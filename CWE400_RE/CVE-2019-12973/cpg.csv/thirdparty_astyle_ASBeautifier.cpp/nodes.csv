command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	610783	File	data/converged/CVE-2019-12973_openjpeg/thirdparty_astyle_ASBeautifier.cpp								
ANR	610784	DeclStmt									
ANR	610785	Decl							int	int	g_preprocessorCppExternCBrace
ANR	610786	Function	ASBeautifier :: ASBeautifier	32:0:1051:2663							
ANR	610787	FunctionDef	ASBeautifier :: ASBeautifier ()		610786	0					
ANR	610788	CompoundStatement		33:0:1080:2663	610786	0					
ANR	610789	ExpressionStatement	waitingBeautifierStack = nullptr	34:1:1083:1115	610786	0	True				
ANR	610790	AssignmentExpression	waitingBeautifierStack = nullptr		610786	0		=			
ANR	610791	Identifier	waitingBeautifierStack		610786	0					
ANR	610792	Identifier	nullptr		610786	1					
ANR	610793	ExpressionStatement	activeBeautifierStack = nullptr	35:1:1118:1149	610786	1	True				
ANR	610794	AssignmentExpression	activeBeautifierStack = nullptr		610786	0		=			
ANR	610795	Identifier	activeBeautifierStack		610786	0					
ANR	610796	Identifier	nullptr		610786	1					
ANR	610797	ExpressionStatement	waitingBeautifierStackLengthStack = nullptr	36:1:1152:1195	610786	2	True				
ANR	610798	AssignmentExpression	waitingBeautifierStackLengthStack = nullptr		610786	0		=			
ANR	610799	Identifier	waitingBeautifierStackLengthStack		610786	0					
ANR	610800	Identifier	nullptr		610786	1					
ANR	610801	ExpressionStatement	activeBeautifierStackLengthStack = nullptr	37:1:1198:1240	610786	3	True				
ANR	610802	AssignmentExpression	activeBeautifierStackLengthStack = nullptr		610786	0		=			
ANR	610803	Identifier	activeBeautifierStackLengthStack		610786	0					
ANR	610804	Identifier	nullptr		610786	1					
ANR	610805	ExpressionStatement	headerStack = nullptr	39:1:1244:1265	610786	4	True				
ANR	610806	AssignmentExpression	headerStack = nullptr		610786	0		=			
ANR	610807	Identifier	headerStack		610786	0					
ANR	610808	Identifier	nullptr		610786	1					
ANR	610809	ExpressionStatement	tempStacks = nullptr	40:1:1268:1288	610786	5	True				
ANR	610810	AssignmentExpression	tempStacks = nullptr		610786	0		=			
ANR	610811	Identifier	tempStacks		610786	0					
ANR	610812	Identifier	nullptr		610786	1					
ANR	610813	ExpressionStatement	squareBracketDepthStack = nullptr	41:1:1291:1324	610786	6	True				
ANR	610814	AssignmentExpression	squareBracketDepthStack = nullptr		610786	0		=			
ANR	610815	Identifier	squareBracketDepthStack		610786	0					
ANR	610816	Identifier	nullptr		610786	1					
ANR	610817	ExpressionStatement	blockStatementStack = nullptr	42:1:1327:1356	610786	7	True				
ANR	610818	AssignmentExpression	blockStatementStack = nullptr		610786	0		=			
ANR	610819	Identifier	blockStatementStack		610786	0					
ANR	610820	Identifier	nullptr		610786	1					
ANR	610821	ExpressionStatement	parenStatementStack = nullptr	43:1:1359:1388	610786	8	True				
ANR	610822	AssignmentExpression	parenStatementStack = nullptr		610786	0		=			
ANR	610823	Identifier	parenStatementStack		610786	0					
ANR	610824	Identifier	nullptr		610786	1					
ANR	610825	ExpressionStatement	braceBlockStateStack = nullptr	44:1:1391:1421	610786	9	True				
ANR	610826	AssignmentExpression	braceBlockStateStack = nullptr		610786	0		=			
ANR	610827	Identifier	braceBlockStateStack		610786	0					
ANR	610828	Identifier	nullptr		610786	1					
ANR	610829	ExpressionStatement	continuationIndentStack = nullptr	45:1:1424:1457	610786	10	True				
ANR	610830	AssignmentExpression	continuationIndentStack = nullptr		610786	0		=			
ANR	610831	Identifier	continuationIndentStack		610786	0					
ANR	610832	Identifier	nullptr		610786	1					
ANR	610833	ExpressionStatement	continuationIndentStackSizeStack = nullptr	46:1:1460:1502	610786	11	True				
ANR	610834	AssignmentExpression	continuationIndentStackSizeStack = nullptr		610786	0		=			
ANR	610835	Identifier	continuationIndentStackSizeStack		610786	0					
ANR	610836	Identifier	nullptr		610786	1					
ANR	610837	ExpressionStatement	parenIndentStack = nullptr	47:1:1505:1531	610786	12	True				
ANR	610838	AssignmentExpression	parenIndentStack = nullptr		610786	0		=			
ANR	610839	Identifier	parenIndentStack		610786	0					
ANR	610840	Identifier	nullptr		610786	1					
ANR	610841	ExpressionStatement	preprocIndentStack = nullptr	48:1:1534:1562	610786	13	True				
ANR	610842	AssignmentExpression	preprocIndentStack = nullptr		610786	0		=			
ANR	610843	Identifier	preprocIndentStack		610786	0					
ANR	610844	Identifier	nullptr		610786	1					
ANR	610845	ExpressionStatement	sourceIterator = nullptr	49:1:1565:1589	610786	14	True				
ANR	610846	AssignmentExpression	sourceIterator = nullptr		610786	0		=			
ANR	610847	Identifier	sourceIterator		610786	0					
ANR	610848	Identifier	nullptr		610786	1					
ANR	610849	ExpressionStatement	isModeManuallySet = false	50:1:1592:1617	610786	15	True				
ANR	610850	AssignmentExpression	isModeManuallySet = false		610786	0		=			
ANR	610851	Identifier	isModeManuallySet		610786	0					
ANR	610852	Identifier	false		610786	1					
ANR	610853	ExpressionStatement	shouldForceTabIndentation = false	51:1:1620:1653	610786	16	True				
ANR	610854	AssignmentExpression	shouldForceTabIndentation = false		610786	0		=			
ANR	610855	Identifier	shouldForceTabIndentation		610786	0					
ANR	610856	Identifier	false		610786	1					
ANR	610857	ExpressionStatement	setSpaceIndentation ( 4 )	52:1:1656:1678	610786	17	True				
ANR	610858	CallExpression	setSpaceIndentation ( 4 )		610786	0					
ANR	610859	Callee	setSpaceIndentation		610786	0					
ANR	610860	Identifier	setSpaceIndentation		610786	0					
ANR	610861	ArgumentList	4		610786	1					
ANR	610862	Argument	4		610786	0					
ANR	610863	PrimaryExpression	4		610786	0					
ANR	610864	ExpressionStatement	setContinuationIndentation ( 1 )	53:1:1681:1710	610786	18	True				
ANR	610865	CallExpression	setContinuationIndentation ( 1 )		610786	0					
ANR	610866	Callee	setContinuationIndentation		610786	0					
ANR	610867	Identifier	setContinuationIndentation		610786	0					
ANR	610868	ArgumentList	1		610786	1					
ANR	610869	Argument	1		610786	0					
ANR	610870	PrimaryExpression	1		610786	0					
ANR	610871	ExpressionStatement	setMinConditionalIndentOption ( MINCOND_TWO )	54:1:1713:1755	610786	19	True				
ANR	610872	CallExpression	setMinConditionalIndentOption ( MINCOND_TWO )		610786	0					
ANR	610873	Callee	setMinConditionalIndentOption		610786	0					
ANR	610874	Identifier	setMinConditionalIndentOption		610786	0					
ANR	610875	ArgumentList	MINCOND_TWO		610786	1					
ANR	610876	Argument	MINCOND_TWO		610786	0					
ANR	610877	Identifier	MINCOND_TWO		610786	0					
ANR	610878	ExpressionStatement	setMaxContinuationIndentLength ( 40 )	55:1:1758:1792	610786	20	True				
ANR	610879	CallExpression	setMaxContinuationIndentLength ( 40 )		610786	0					
ANR	610880	Callee	setMaxContinuationIndentLength		610786	0					
ANR	610881	Identifier	setMaxContinuationIndentLength		610786	0					
ANR	610882	ArgumentList	40		610786	1					
ANR	610883	Argument	40		610786	0					
ANR	610884	PrimaryExpression	40		610786	0					
ANR	610885	ExpressionStatement	classInitializerIndents = 1	56:1:1795:1822	610786	21	True				
ANR	610886	AssignmentExpression	classInitializerIndents = 1		610786	0		=			
ANR	610887	Identifier	classInitializerIndents		610786	0					
ANR	610888	PrimaryExpression	1		610786	1					
ANR	610889	ExpressionStatement	tabLength = 0	57:1:1825:1838	610786	22	True				
ANR	610890	AssignmentExpression	tabLength = 0		610786	0		=			
ANR	610891	Identifier	tabLength		610786	0					
ANR	610892	PrimaryExpression	0		610786	1					
ANR	610893	ExpressionStatement	setClassIndent ( false )	58:1:1841:1862	610786	23	True				
ANR	610894	CallExpression	setClassIndent ( false )		610786	0					
ANR	610895	Callee	setClassIndent		610786	0					
ANR	610896	Identifier	setClassIndent		610786	0					
ANR	610897	ArgumentList	false		610786	1					
ANR	610898	Argument	false		610786	0					
ANR	610899	Identifier	false		610786	0					
ANR	610900	ExpressionStatement	setModifierIndent ( false )	59:1:1865:1889	610786	24	True				
ANR	610901	CallExpression	setModifierIndent ( false )		610786	0					
ANR	610902	Callee	setModifierIndent		610786	0					
ANR	610903	Identifier	setModifierIndent		610786	0					
ANR	610904	ArgumentList	false		610786	1					
ANR	610905	Argument	false		610786	0					
ANR	610906	Identifier	false		610786	0					
ANR	610907	ExpressionStatement	setSwitchIndent ( false )	60:1:1892:1914	610786	25	True				
ANR	610908	CallExpression	setSwitchIndent ( false )		610786	0					
ANR	610909	Callee	setSwitchIndent		610786	0					
ANR	610910	Identifier	setSwitchIndent		610786	0					
ANR	610911	ArgumentList	false		610786	1					
ANR	610912	Argument	false		610786	0					
ANR	610913	Identifier	false		610786	0					
ANR	610914	ExpressionStatement	setCaseIndent ( false )	61:1:1917:1937	610786	26	True				
ANR	610915	CallExpression	setCaseIndent ( false )		610786	0					
ANR	610916	Callee	setCaseIndent		610786	0					
ANR	610917	Identifier	setCaseIndent		610786	0					
ANR	610918	ArgumentList	false		610786	1					
ANR	610919	Argument	false		610786	0					
ANR	610920	Identifier	false		610786	0					
ANR	610921	ExpressionStatement	setBlockIndent ( false )	62:1:1940:1961	610786	27	True				
ANR	610922	CallExpression	setBlockIndent ( false )		610786	0					
ANR	610923	Callee	setBlockIndent		610786	0					
ANR	610924	Identifier	setBlockIndent		610786	0					
ANR	610925	ArgumentList	false		610786	1					
ANR	610926	Argument	false		610786	0					
ANR	610927	Identifier	false		610786	0					
ANR	610928	ExpressionStatement	setBraceIndent ( false )	63:1:1964:1985	610786	28	True				
ANR	610929	CallExpression	setBraceIndent ( false )		610786	0					
ANR	610930	Callee	setBraceIndent		610786	0					
ANR	610931	Identifier	setBraceIndent		610786	0					
ANR	610932	ArgumentList	false		610786	1					
ANR	610933	Argument	false		610786	0					
ANR	610934	Identifier	false		610786	0					
ANR	610935	ExpressionStatement	setBraceIndentVtk ( false )	64:1:1988:2012	610786	29	True				
ANR	610936	CallExpression	setBraceIndentVtk ( false )		610786	0					
ANR	610937	Callee	setBraceIndentVtk		610786	0					
ANR	610938	Identifier	setBraceIndentVtk		610786	0					
ANR	610939	ArgumentList	false		610786	1					
ANR	610940	Argument	false		610786	0					
ANR	610941	Identifier	false		610786	0					
ANR	610942	ExpressionStatement	setNamespaceIndent ( false )	65:1:2015:2040	610786	30	True				
ANR	610943	CallExpression	setNamespaceIndent ( false )		610786	0					
ANR	610944	Callee	setNamespaceIndent		610786	0					
ANR	610945	Identifier	setNamespaceIndent		610786	0					
ANR	610946	ArgumentList	false		610786	1					
ANR	610947	Argument	false		610786	0					
ANR	610948	Identifier	false		610786	0					
ANR	610949	ExpressionStatement	setAfterParenIndent ( false )	66:1:2043:2069	610786	31	True				
ANR	610950	CallExpression	setAfterParenIndent ( false )		610786	0					
ANR	610951	Callee	setAfterParenIndent		610786	0					
ANR	610952	Identifier	setAfterParenIndent		610786	0					
ANR	610953	ArgumentList	false		610786	1					
ANR	610954	Argument	false		610786	0					
ANR	610955	Identifier	false		610786	0					
ANR	610956	ExpressionStatement	setLabelIndent ( false )	67:1:2072:2093	610786	32	True				
ANR	610957	CallExpression	setLabelIndent ( false )		610786	0					
ANR	610958	Callee	setLabelIndent		610786	0					
ANR	610959	Identifier	setLabelIndent		610786	0					
ANR	610960	ArgumentList	false		610786	1					
ANR	610961	Argument	false		610786	0					
ANR	610962	Identifier	false		610786	0					
ANR	610963	ExpressionStatement	setEmptyLineFill ( false )	68:1:2096:2119	610786	33	True				
ANR	610964	CallExpression	setEmptyLineFill ( false )		610786	0					
ANR	610965	Callee	setEmptyLineFill		610786	0					
ANR	610966	Identifier	setEmptyLineFill		610786	0					
ANR	610967	ArgumentList	false		610786	1					
ANR	610968	Argument	false		610786	0					
ANR	610969	Identifier	false		610786	0					
ANR	610970	ExpressionStatement	setCStyle ( )	69:1:2122:2133	610786	34	True				
ANR	610971	CallExpression	setCStyle ( )		610786	0					
ANR	610972	Callee	setCStyle		610786	0					
ANR	610973	Identifier	setCStyle		610786	0					
ANR	610974	ArgumentList			610786	1					
ANR	610975	ExpressionStatement	setPreprocDefineIndent ( false )	70:1:2136:2165	610786	35	True				
ANR	610976	CallExpression	setPreprocDefineIndent ( false )		610786	0					
ANR	610977	Callee	setPreprocDefineIndent		610786	0					
ANR	610978	Identifier	setPreprocDefineIndent		610786	0					
ANR	610979	ArgumentList	false		610786	1					
ANR	610980	Argument	false		610786	0					
ANR	610981	Identifier	false		610786	0					
ANR	610982	ExpressionStatement	setPreprocConditionalIndent ( false )	71:1:2168:2202	610786	36	True				
ANR	610983	CallExpression	setPreprocConditionalIndent ( false )		610786	0					
ANR	610984	Callee	setPreprocConditionalIndent		610786	0					
ANR	610985	Identifier	setPreprocConditionalIndent		610786	0					
ANR	610986	ArgumentList	false		610786	1					
ANR	610987	Argument	false		610786	0					
ANR	610988	Identifier	false		610786	0					
ANR	610989	ExpressionStatement	setAlignMethodColon ( false )	72:1:2205:2231	610786	37	True				
ANR	610990	CallExpression	setAlignMethodColon ( false )		610786	0					
ANR	610991	Callee	setAlignMethodColon		610786	0					
ANR	610992	Identifier	setAlignMethodColon		610786	0					
ANR	610993	ArgumentList	false		610786	1					
ANR	610994	Argument	false		610786	0					
ANR	610995	Identifier	false		610786	0					
ANR	610996	ExpressionStatement	beautifierFileType = 9	75:1:2278:2300	610786	38	True				
ANR	610997	AssignmentExpression	beautifierFileType = 9		610786	0		=			
ANR	610998	Identifier	beautifierFileType		610786	0					
ANR	610999	PrimaryExpression	9		610786	1					
ANR	611000	Statement	headers	76:1:2332:2338	610786	39	True				
ANR	611001	Statement	=	76:9:2340:2340	610786	40	True				
ANR	611002	Statement	new	76:11:2342:2344	610786	41	True				
ANR	611003	Statement	vector	76:15:2346:2351	610786	42	True				
ANR	611004	Statement	<	76:21:2352:2352	610786	43	True				
ANR	611005	Statement	const	76:22:2353:2357	610786	44	True				
ANR	611006	Statement	string	76:28:2359:2364	610786	45	True				
ANR	611007	Statement	*	76:34:2365:2365	610786	46	True				
ANR	611008	Statement	>	76:35:2366:2366	610786	47	True				
ANR	611009	ExpressionStatement		76:36:2367:2367	610786	48	True				
ANR	611010	Statement	nonParenHeaders	77:1:2370:2384	610786	49	True				
ANR	611011	Statement	=	77:17:2386:2386	610786	50	True				
ANR	611012	Statement	new	77:19:2388:2390	610786	51	True				
ANR	611013	Statement	vector	77:23:2392:2397	610786	52	True				
ANR	611014	Statement	<	77:29:2398:2398	610786	53	True				
ANR	611015	Statement	const	77:30:2399:2403	610786	54	True				
ANR	611016	Statement	string	77:36:2405:2410	610786	55	True				
ANR	611017	Statement	*	77:42:2411:2411	610786	56	True				
ANR	611018	Statement	>	77:43:2412:2412	610786	57	True				
ANR	611019	ExpressionStatement		77:44:2413:2413	610786	58	True				
ANR	611020	Statement	assignmentOperators	78:1:2416:2434	610786	59	True				
ANR	611021	Statement	=	78:21:2436:2436	610786	60	True				
ANR	611022	Statement	new	78:23:2438:2440	610786	61	True				
ANR	611023	Statement	vector	78:27:2442:2447	610786	62	True				
ANR	611024	Statement	<	78:33:2448:2448	610786	63	True				
ANR	611025	Statement	const	78:34:2449:2453	610786	64	True				
ANR	611026	Statement	string	78:40:2455:2460	610786	65	True				
ANR	611027	Statement	*	78:46:2461:2461	610786	66	True				
ANR	611028	Statement	>	78:47:2462:2462	610786	67	True				
ANR	611029	ExpressionStatement		78:48:2463:2463	610786	68	True				
ANR	611030	Statement	nonAssignmentOperators	79:1:2466:2487	610786	69	True				
ANR	611031	Statement	=	79:24:2489:2489	610786	70	True				
ANR	611032	Statement	new	79:26:2491:2493	610786	71	True				
ANR	611033	Statement	vector	79:30:2495:2500	610786	72	True				
ANR	611034	Statement	<	79:36:2501:2501	610786	73	True				
ANR	611035	Statement	const	79:37:2502:2506	610786	74	True				
ANR	611036	Statement	string	79:43:2508:2513	610786	75	True				
ANR	611037	Statement	*	79:49:2514:2514	610786	76	True				
ANR	611038	Statement	>	79:50:2515:2515	610786	77	True				
ANR	611039	ExpressionStatement		79:51:2516:2516	610786	78	True				
ANR	611040	Statement	preBlockStatements	80:1:2519:2536	610786	79	True				
ANR	611041	Statement	=	80:20:2538:2538	610786	80	True				
ANR	611042	Statement	new	80:22:2540:2542	610786	81	True				
ANR	611043	Statement	vector	80:26:2544:2549	610786	82	True				
ANR	611044	Statement	<	80:32:2550:2550	610786	83	True				
ANR	611045	Statement	const	80:33:2551:2555	610786	84	True				
ANR	611046	Statement	string	80:39:2557:2562	610786	85	True				
ANR	611047	Statement	*	80:45:2563:2563	610786	86	True				
ANR	611048	Statement	>	80:46:2564:2564	610786	87	True				
ANR	611049	ExpressionStatement		80:47:2565:2565	610786	88	True				
ANR	611050	Statement	preCommandHeaders	81:1:2568:2584	610786	89	True				
ANR	611051	Statement	=	81:19:2586:2586	610786	90	True				
ANR	611052	Statement	new	81:21:2588:2590	610786	91	True				
ANR	611053	Statement	vector	81:25:2592:2597	610786	92	True				
ANR	611054	Statement	<	81:31:2598:2598	610786	93	True				
ANR	611055	Statement	const	81:32:2599:2603	610786	94	True				
ANR	611056	Statement	string	81:38:2605:2610	610786	95	True				
ANR	611057	Statement	*	81:44:2611:2611	610786	96	True				
ANR	611058	Statement	>	81:45:2612:2612	610786	97	True				
ANR	611059	ExpressionStatement		81:46:2613:2613	610786	98	True				
ANR	611060	Statement	indentableHeaders	82:1:2616:2632	610786	99	True				
ANR	611061	Statement	=	82:19:2634:2634	610786	100	True				
ANR	611062	Statement	new	82:21:2636:2638	610786	101	True				
ANR	611063	Statement	vector	82:25:2640:2645	610786	102	True				
ANR	611064	Statement	<	82:31:2646:2646	610786	103	True				
ANR	611065	Statement	const	82:32:2647:2651	610786	104	True				
ANR	611066	Statement	string	82:38:2653:2658	610786	105	True				
ANR	611067	Statement	*	82:44:2659:2659	610786	106	True				
ANR	611068	Statement	>	82:45:2660:2660	610786	107	True				
ANR	611069	ExpressionStatement		82:46:2661:2661	610786	108	True				
ANR	611070	Identifier	ASBeautifier :: ASBeautifier		610786	1					
ANR	611071	ParameterList			610786	2					
ANR	611072	CFGEntryNode	ENTRY		610786		True				
ANR	611073	CFGExitNode	EXIT		610786		True				
ANR	611074	Symbol	beautifierFileType		610786						
ANR	611075	Symbol	squareBracketDepthStack		610786						
ANR	611076	Symbol	isModeManuallySet		610786						
ANR	611077	Symbol	continuationIndentStackSizeStack		610786						
ANR	611078	Symbol	false		610786						
ANR	611079	Symbol	preprocIndentStack		610786						
ANR	611080	Symbol	tempStacks		610786						
ANR	611081	Symbol	classInitializerIndents		610786						
ANR	611082	Symbol	parenIndentStack		610786						
ANR	611083	Symbol	headerStack		610786						
ANR	611084	Symbol	tabLength		610786						
ANR	611085	Symbol	MINCOND_TWO		610786						
ANR	611086	Symbol	shouldForceTabIndentation		610786						
ANR	611087	Symbol	waitingBeautifierStack		610786						
ANR	611088	Symbol	braceBlockStateStack		610786						
ANR	611089	Symbol	waitingBeautifierStackLengthStack		610786						
ANR	611090	Symbol	blockStatementStack		610786						
ANR	611091	Symbol	continuationIndentStack		610786						
ANR	611092	Symbol	activeBeautifierStack		610786						
ANR	611093	Symbol	activeBeautifierStackLengthStack		610786						
ANR	611094	Symbol	nullptr		610786						
ANR	611095	Symbol	parenStatementStack		610786						
ANR	611096	Symbol	sourceIterator		610786						
ANR	611097	Function	ASBeautifier :: ASBeautifier	94:0:2989:10185							
ANR	611098	FunctionDef	ASBeautifier :: ASBeautifier (const ASBeautifier & other)		611097	0					
ANR	611099	CompoundStatement		95:0:3059:10185	611097	0					
ANR	611100	ExpressionStatement	waitingBeautifierStack = nullptr	97:1:3101:3133	611097	0	True				
ANR	611101	AssignmentExpression	waitingBeautifierStack = nullptr		611097	0		=			
ANR	611102	Identifier	waitingBeautifierStack		611097	0					
ANR	611103	Identifier	nullptr		611097	1					
ANR	611104	ExpressionStatement	activeBeautifierStack = nullptr	98:1:3136:3167	611097	1	True				
ANR	611105	AssignmentExpression	activeBeautifierStack = nullptr		611097	0		=			
ANR	611106	Identifier	activeBeautifierStack		611097	0					
ANR	611107	Identifier	nullptr		611097	1					
ANR	611108	ExpressionStatement	waitingBeautifierStackLengthStack = nullptr	99:1:3170:3213	611097	2	True				
ANR	611109	AssignmentExpression	waitingBeautifierStackLengthStack = nullptr		611097	0		=			
ANR	611110	Identifier	waitingBeautifierStackLengthStack		611097	0					
ANR	611111	Identifier	nullptr		611097	1					
ANR	611112	ExpressionStatement	activeBeautifierStackLengthStack = nullptr	100:1:3216:3258	611097	3	True				
ANR	611113	AssignmentExpression	activeBeautifierStackLengthStack = nullptr		611097	0		=			
ANR	611114	Identifier	activeBeautifierStackLengthStack		611097	0					
ANR	611115	Identifier	nullptr		611097	1					
ANR	611116	Statement	headerStack	104:1:3338:3348	611097	4	True				
ANR	611117	Statement	=	104:13:3350:3350	611097	5	True				
ANR	611118	Statement	new	104:15:3352:3354	611097	6	True				
ANR	611119	Statement	vector	104:19:3356:3361	611097	7	True				
ANR	611120	Statement	<	104:25:3362:3362	611097	8	True				
ANR	611121	Statement	const	104:26:3363:3367	611097	9	True				
ANR	611122	Statement	string	104:32:3369:3374	611097	10	True				
ANR	611123	Statement	*	104:38:3375:3375	611097	11	True				
ANR	611124	Statement	>	104:39:3376:3376	611097	12	True				
ANR	611125	ExpressionStatement		104:40:3377:3377	611097	13	True				
ANR	611126	ExpressionStatement	* headerStack = * other . headerStack	105:1:3380:3413	611097	14	True				
ANR	611127	AssignmentExpression	* headerStack = * other . headerStack		611097	0		=			
ANR	611128	UnaryOperationExpression	* headerStack		611097	0					
ANR	611129	UnaryOperator	*		611097	0					
ANR	611130	Identifier	headerStack		611097	1					
ANR	611131	UnaryOperationExpression	* other . headerStack		611097	1					
ANR	611132	UnaryOperator	*		611097	0					
ANR	611133	MemberAccess	other . headerStack		611097	1					
ANR	611134	Identifier	other		611097	0					
ANR	611135	Identifier	headerStack		611097	1					
ANR	611136	ExpressionStatement	tempStacks = copyTempStacks ( other )	107:1:3417:3451	611097	15	True				
ANR	611137	AssignmentExpression	tempStacks = copyTempStacks ( other )		611097	0		=			
ANR	611138	Identifier	tempStacks		611097	0					
ANR	611139	CallExpression	copyTempStacks ( other )		611097	1					
ANR	611140	Callee	copyTempStacks		611097	0					
ANR	611141	Identifier	copyTempStacks		611097	0					
ANR	611142	ArgumentList	other		611097	1					
ANR	611143	Argument	other		611097	0					
ANR	611144	Identifier	other		611097	0					
ANR	611145	Statement	squareBracketDepthStack	109:1:3455:3477	611097	16	True				
ANR	611146	Statement	=	109:25:3479:3479	611097	17	True				
ANR	611147	Statement	new	109:27:3481:3483	611097	18	True				
ANR	611148	Statement	vector	109:31:3485:3490	611097	19	True				
ANR	611149	Statement	<	109:37:3491:3491	611097	20	True				
ANR	611150	Statement	int	109:38:3492:3494	611097	21	True				
ANR	611151	Statement	>	109:41:3495:3495	611097	22	True				
ANR	611152	ExpressionStatement		109:42:3496:3496	611097	23	True				
ANR	611153	ExpressionStatement	* squareBracketDepthStack = * other . squareBracketDepthStack	110:1:3499:3556	611097	24	True				
ANR	611154	AssignmentExpression	* squareBracketDepthStack = * other . squareBracketDepthStack		611097	0		=			
ANR	611155	UnaryOperationExpression	* squareBracketDepthStack		611097	0					
ANR	611156	UnaryOperator	*		611097	0					
ANR	611157	Identifier	squareBracketDepthStack		611097	1					
ANR	611158	UnaryOperationExpression	* other . squareBracketDepthStack		611097	1					
ANR	611159	UnaryOperator	*		611097	0					
ANR	611160	MemberAccess	other . squareBracketDepthStack		611097	1					
ANR	611161	Identifier	other		611097	0					
ANR	611162	Identifier	squareBracketDepthStack		611097	1					
ANR	611163	Statement	blockStatementStack	112:1:3560:3578	611097	25	True				
ANR	611164	Statement	=	112:21:3580:3580	611097	26	True				
ANR	611165	Statement	new	112:23:3582:3584	611097	27	True				
ANR	611166	Statement	vector	112:27:3586:3591	611097	28	True				
ANR	611167	Statement	<	112:33:3592:3592	611097	29	True				
ANR	611168	Statement	bool	112:34:3593:3596	611097	30	True				
ANR	611169	Statement	>	112:38:3597:3597	611097	31	True				
ANR	611170	ExpressionStatement		112:39:3598:3598	611097	32	True				
ANR	611171	ExpressionStatement	* blockStatementStack = * other . blockStatementStack	113:1:3601:3650	611097	33	True				
ANR	611172	AssignmentExpression	* blockStatementStack = * other . blockStatementStack		611097	0		=			
ANR	611173	UnaryOperationExpression	* blockStatementStack		611097	0					
ANR	611174	UnaryOperator	*		611097	0					
ANR	611175	Identifier	blockStatementStack		611097	1					
ANR	611176	UnaryOperationExpression	* other . blockStatementStack		611097	1					
ANR	611177	UnaryOperator	*		611097	0					
ANR	611178	MemberAccess	other . blockStatementStack		611097	1					
ANR	611179	Identifier	other		611097	0					
ANR	611180	Identifier	blockStatementStack		611097	1					
ANR	611181	Statement	parenStatementStack	115:1:3654:3672	611097	34	True				
ANR	611182	Statement	=	115:21:3674:3674	611097	35	True				
ANR	611183	Statement	new	115:23:3676:3678	611097	36	True				
ANR	611184	Statement	vector	115:27:3680:3685	611097	37	True				
ANR	611185	Statement	<	115:33:3686:3686	611097	38	True				
ANR	611186	Statement	bool	115:34:3687:3690	611097	39	True				
ANR	611187	Statement	>	115:38:3691:3691	611097	40	True				
ANR	611188	ExpressionStatement		115:39:3692:3692	611097	41	True				
ANR	611189	ExpressionStatement	* parenStatementStack = * other . parenStatementStack	116:1:3695:3744	611097	42	True				
ANR	611190	AssignmentExpression	* parenStatementStack = * other . parenStatementStack		611097	0		=			
ANR	611191	UnaryOperationExpression	* parenStatementStack		611097	0					
ANR	611192	UnaryOperator	*		611097	0					
ANR	611193	Identifier	parenStatementStack		611097	1					
ANR	611194	UnaryOperationExpression	* other . parenStatementStack		611097	1					
ANR	611195	UnaryOperator	*		611097	0					
ANR	611196	MemberAccess	other . parenStatementStack		611097	1					
ANR	611197	Identifier	other		611097	0					
ANR	611198	Identifier	parenStatementStack		611097	1					
ANR	611199	Statement	braceBlockStateStack	118:1:3748:3767	611097	43	True				
ANR	611200	Statement	=	118:22:3769:3769	611097	44	True				
ANR	611201	Statement	new	118:24:3771:3773	611097	45	True				
ANR	611202	Statement	vector	118:28:3775:3780	611097	46	True				
ANR	611203	Statement	<	118:34:3781:3781	611097	47	True				
ANR	611204	Statement	bool	118:35:3782:3785	611097	48	True				
ANR	611205	Statement	>	118:39:3786:3786	611097	49	True				
ANR	611206	ExpressionStatement		118:40:3787:3787	611097	50	True				
ANR	611207	ExpressionStatement	* braceBlockStateStack = * other . braceBlockStateStack	119:1:3790:3841	611097	51	True				
ANR	611208	AssignmentExpression	* braceBlockStateStack = * other . braceBlockStateStack		611097	0		=			
ANR	611209	UnaryOperationExpression	* braceBlockStateStack		611097	0					
ANR	611210	UnaryOperator	*		611097	0					
ANR	611211	Identifier	braceBlockStateStack		611097	1					
ANR	611212	UnaryOperationExpression	* other . braceBlockStateStack		611097	1					
ANR	611213	UnaryOperator	*		611097	0					
ANR	611214	MemberAccess	other . braceBlockStateStack		611097	1					
ANR	611215	Identifier	other		611097	0					
ANR	611216	Identifier	braceBlockStateStack		611097	1					
ANR	611217	Statement	continuationIndentStack	121:1:3845:3867	611097	52	True				
ANR	611218	Statement	=	121:25:3869:3869	611097	53	True				
ANR	611219	Statement	new	121:27:3871:3873	611097	54	True				
ANR	611220	Statement	vector	121:31:3875:3880	611097	55	True				
ANR	611221	Statement	<	121:37:3881:3881	611097	56	True				
ANR	611222	Statement	int	121:38:3882:3884	611097	57	True				
ANR	611223	Statement	>	121:41:3885:3885	611097	58	True				
ANR	611224	ExpressionStatement		121:42:3886:3886	611097	59	True				
ANR	611225	ExpressionStatement	* continuationIndentStack = * other . continuationIndentStack	122:1:3889:3946	611097	60	True				
ANR	611226	AssignmentExpression	* continuationIndentStack = * other . continuationIndentStack		611097	0		=			
ANR	611227	UnaryOperationExpression	* continuationIndentStack		611097	0					
ANR	611228	UnaryOperator	*		611097	0					
ANR	611229	Identifier	continuationIndentStack		611097	1					
ANR	611230	UnaryOperationExpression	* other . continuationIndentStack		611097	1					
ANR	611231	UnaryOperator	*		611097	0					
ANR	611232	MemberAccess	other . continuationIndentStack		611097	1					
ANR	611233	Identifier	other		611097	0					
ANR	611234	Identifier	continuationIndentStack		611097	1					
ANR	611235	Statement	continuationIndentStackSizeStack	124:1:3950:3981	611097	61	True				
ANR	611236	Statement	=	124:34:3983:3983	611097	62	True				
ANR	611237	Statement	new	124:36:3985:3987	611097	63	True				
ANR	611238	Statement	vector	124:40:3989:3994	611097	64	True				
ANR	611239	Statement	<	124:46:3995:3995	611097	65	True				
ANR	611240	Statement	int	124:47:3996:3998	611097	66	True				
ANR	611241	Statement	>	124:50:3999:3999	611097	67	True				
ANR	611242	ExpressionStatement		124:51:4000:4000	611097	68	True				
ANR	611243	ExpressionStatement	* continuationIndentStackSizeStack = * other . continuationIndentStackSizeStack	125:1:4003:4078	611097	69	True				
ANR	611244	AssignmentExpression	* continuationIndentStackSizeStack = * other . continuationIndentStackSizeStack		611097	0		=			
ANR	611245	UnaryOperationExpression	* continuationIndentStackSizeStack		611097	0					
ANR	611246	UnaryOperator	*		611097	0					
ANR	611247	Identifier	continuationIndentStackSizeStack		611097	1					
ANR	611248	UnaryOperationExpression	* other . continuationIndentStackSizeStack		611097	1					
ANR	611249	UnaryOperator	*		611097	0					
ANR	611250	MemberAccess	other . continuationIndentStackSizeStack		611097	1					
ANR	611251	Identifier	other		611097	0					
ANR	611252	Identifier	continuationIndentStackSizeStack		611097	1					
ANR	611253	Statement	parenIndentStack	127:1:4082:4097	611097	70	True				
ANR	611254	Statement	=	127:18:4099:4099	611097	71	True				
ANR	611255	Statement	new	127:20:4101:4103	611097	72	True				
ANR	611256	Statement	vector	127:24:4105:4110	611097	73	True				
ANR	611257	Statement	<	127:30:4111:4111	611097	74	True				
ANR	611258	Statement	int	127:31:4112:4114	611097	75	True				
ANR	611259	Statement	>	127:34:4115:4115	611097	76	True				
ANR	611260	ExpressionStatement		127:35:4116:4116	611097	77	True				
ANR	611261	ExpressionStatement	* parenIndentStack = * other . parenIndentStack	128:1:4119:4162	611097	78	True				
ANR	611262	AssignmentExpression	* parenIndentStack = * other . parenIndentStack		611097	0		=			
ANR	611263	UnaryOperationExpression	* parenIndentStack		611097	0					
ANR	611264	UnaryOperator	*		611097	0					
ANR	611265	Identifier	parenIndentStack		611097	1					
ANR	611266	UnaryOperationExpression	* other . parenIndentStack		611097	1					
ANR	611267	UnaryOperator	*		611097	0					
ANR	611268	MemberAccess	other . parenIndentStack		611097	1					
ANR	611269	Identifier	other		611097	0					
ANR	611270	Identifier	parenIndentStack		611097	1					
ANR	611271	Statement	preprocIndentStack	130:1:4166:4183	611097	79	True				
ANR	611272	Statement	=	130:20:4185:4185	611097	80	True				
ANR	611273	Statement	new	130:22:4187:4189	611097	81	True				
ANR	611274	Statement	vector	130:26:4191:4196	611097	82	True				
ANR	611275	Statement	<	130:32:4197:4197	611097	83	True				
ANR	611276	Statement	pair	130:33:4198:4201	611097	84	True				
ANR	611277	Statement	<	130:37:4202:4202	611097	85	True				
ANR	611278	Statement	int	130:38:4203:4205	611097	86	True				
ANR	611279	Statement	","	130:41:4206:4206	611097	87	True				
ANR	611280	Statement	int	130:43:4208:4210	611097	88	True				
ANR	611281	Statement	>	130:46:4211:4211	611097	89	True				
ANR	611282	Statement	>	130:48:4213:4213	611097	90	True				
ANR	611283	ExpressionStatement		130:49:4214:4214	611097	91	True				
ANR	611284	ExpressionStatement	* preprocIndentStack = * other . preprocIndentStack	131:1:4217:4264	611097	92	True				
ANR	611285	AssignmentExpression	* preprocIndentStack = * other . preprocIndentStack		611097	0		=			
ANR	611286	UnaryOperationExpression	* preprocIndentStack		611097	0					
ANR	611287	UnaryOperator	*		611097	0					
ANR	611288	Identifier	preprocIndentStack		611097	1					
ANR	611289	UnaryOperationExpression	* other . preprocIndentStack		611097	1					
ANR	611290	UnaryOperator	*		611097	0					
ANR	611291	MemberAccess	other . preprocIndentStack		611097	1					
ANR	611292	Identifier	other		611097	0					
ANR	611293	Identifier	preprocIndentStack		611097	1					
ANR	611294	ExpressionStatement	beautifierFileType = other . beautifierFileType	136:1:4395:4440	611097	93	True				
ANR	611295	AssignmentExpression	beautifierFileType = other . beautifierFileType		611097	0		=			
ANR	611296	Identifier	beautifierFileType		611097	0					
ANR	611297	MemberAccess	other . beautifierFileType		611097	1					
ANR	611298	Identifier	other		611097	0					
ANR	611299	Identifier	beautifierFileType		611097	1					
ANR	611300	ExpressionStatement	headers = other . headers	137:1:4443:4466	611097	94	True				
ANR	611301	AssignmentExpression	headers = other . headers		611097	0		=			
ANR	611302	Identifier	headers		611097	0					
ANR	611303	MemberAccess	other . headers		611097	1					
ANR	611304	Identifier	other		611097	0					
ANR	611305	Identifier	headers		611097	1					
ANR	611306	ExpressionStatement	nonParenHeaders = other . nonParenHeaders	138:1:4469:4508	611097	95	True				
ANR	611307	AssignmentExpression	nonParenHeaders = other . nonParenHeaders		611097	0		=			
ANR	611308	Identifier	nonParenHeaders		611097	0					
ANR	611309	MemberAccess	other . nonParenHeaders		611097	1					
ANR	611310	Identifier	other		611097	0					
ANR	611311	Identifier	nonParenHeaders		611097	1					
ANR	611312	ExpressionStatement	assignmentOperators = other . assignmentOperators	139:1:4511:4558	611097	96	True				
ANR	611313	AssignmentExpression	assignmentOperators = other . assignmentOperators		611097	0		=			
ANR	611314	Identifier	assignmentOperators		611097	0					
ANR	611315	MemberAccess	other . assignmentOperators		611097	1					
ANR	611316	Identifier	other		611097	0					
ANR	611317	Identifier	assignmentOperators		611097	1					
ANR	611318	ExpressionStatement	nonAssignmentOperators = other . nonAssignmentOperators	140:1:4561:4614	611097	97	True				
ANR	611319	AssignmentExpression	nonAssignmentOperators = other . nonAssignmentOperators		611097	0		=			
ANR	611320	Identifier	nonAssignmentOperators		611097	0					
ANR	611321	MemberAccess	other . nonAssignmentOperators		611097	1					
ANR	611322	Identifier	other		611097	0					
ANR	611323	Identifier	nonAssignmentOperators		611097	1					
ANR	611324	ExpressionStatement	preBlockStatements = other . preBlockStatements	141:1:4617:4662	611097	98	True				
ANR	611325	AssignmentExpression	preBlockStatements = other . preBlockStatements		611097	0		=			
ANR	611326	Identifier	preBlockStatements		611097	0					
ANR	611327	MemberAccess	other . preBlockStatements		611097	1					
ANR	611328	Identifier	other		611097	0					
ANR	611329	Identifier	preBlockStatements		611097	1					
ANR	611330	ExpressionStatement	preCommandHeaders = other . preCommandHeaders	142:1:4665:4708	611097	99	True				
ANR	611331	AssignmentExpression	preCommandHeaders = other . preCommandHeaders		611097	0		=			
ANR	611332	Identifier	preCommandHeaders		611097	0					
ANR	611333	MemberAccess	other . preCommandHeaders		611097	1					
ANR	611334	Identifier	other		611097	0					
ANR	611335	Identifier	preCommandHeaders		611097	1					
ANR	611336	ExpressionStatement	indentableHeaders = other . indentableHeaders	143:1:4711:4754	611097	100	True				
ANR	611337	AssignmentExpression	indentableHeaders = other . indentableHeaders		611097	0		=			
ANR	611338	Identifier	indentableHeaders		611097	0					
ANR	611339	MemberAccess	other . indentableHeaders		611097	1					
ANR	611340	Identifier	other		611097	0					
ANR	611341	Identifier	indentableHeaders		611097	1					
ANR	611342	ExpressionStatement	inLineNumber = other . inLineNumber	148:1:4865:4898	611097	101	True				
ANR	611343	AssignmentExpression	inLineNumber = other . inLineNumber		611097	0		=			
ANR	611344	Identifier	inLineNumber		611097	0					
ANR	611345	MemberAccess	other . inLineNumber		611097	1					
ANR	611346	Identifier	other		611097	0					
ANR	611347	Identifier	inLineNumber		611097	1					
ANR	611348	ExpressionStatement	runInIndentContinuation = other . runInIndentContinuation	149:1:4901:4956	611097	102	True				
ANR	611349	AssignmentExpression	runInIndentContinuation = other . runInIndentContinuation		611097	0		=			
ANR	611350	Identifier	runInIndentContinuation		611097	0					
ANR	611351	MemberAccess	other . runInIndentContinuation		611097	1					
ANR	611352	Identifier	other		611097	0					
ANR	611353	Identifier	runInIndentContinuation		611097	1					
ANR	611354	ExpressionStatement	nonInStatementBrace = other . nonInStatementBrace	150:1:4959:5006	611097	103	True				
ANR	611355	AssignmentExpression	nonInStatementBrace = other . nonInStatementBrace		611097	0		=			
ANR	611356	Identifier	nonInStatementBrace		611097	0					
ANR	611357	MemberAccess	other . nonInStatementBrace		611097	1					
ANR	611358	Identifier	other		611097	0					
ANR	611359	Identifier	nonInStatementBrace		611097	1					
ANR	611360	ExpressionStatement	objCColonAlignSubsequent = other . objCColonAlignSubsequent	151:1:5009:5066	611097	104	True				
ANR	611361	AssignmentExpression	objCColonAlignSubsequent = other . objCColonAlignSubsequent		611097	0		=			
ANR	611362	Identifier	objCColonAlignSubsequent		611097	0					
ANR	611363	MemberAccess	other . objCColonAlignSubsequent		611097	1					
ANR	611364	Identifier	other		611097	0					
ANR	611365	Identifier	objCColonAlignSubsequent		611097	1					
ANR	611366	ExpressionStatement	lineCommentNoBeautify = other . lineCommentNoBeautify	152:1:5069:5120	611097	105	True				
ANR	611367	AssignmentExpression	lineCommentNoBeautify = other . lineCommentNoBeautify		611097	0		=			
ANR	611368	Identifier	lineCommentNoBeautify		611097	0					
ANR	611369	MemberAccess	other . lineCommentNoBeautify		611097	1					
ANR	611370	Identifier	other		611097	0					
ANR	611371	Identifier	lineCommentNoBeautify		611097	1					
ANR	611372	ExpressionStatement	isElseHeaderIndent = other . isElseHeaderIndent	153:1:5123:5168	611097	106	True				
ANR	611373	AssignmentExpression	isElseHeaderIndent = other . isElseHeaderIndent		611097	0		=			
ANR	611374	Identifier	isElseHeaderIndent		611097	0					
ANR	611375	MemberAccess	other . isElseHeaderIndent		611097	1					
ANR	611376	Identifier	other		611097	0					
ANR	611377	Identifier	isElseHeaderIndent		611097	1					
ANR	611378	ExpressionStatement	isCaseHeaderCommentIndent = other . isCaseHeaderCommentIndent	154:1:5171:5230	611097	107	True				
ANR	611379	AssignmentExpression	isCaseHeaderCommentIndent = other . isCaseHeaderCommentIndent		611097	0		=			
ANR	611380	Identifier	isCaseHeaderCommentIndent		611097	0					
ANR	611381	MemberAccess	other . isCaseHeaderCommentIndent		611097	1					
ANR	611382	Identifier	other		611097	0					
ANR	611383	Identifier	isCaseHeaderCommentIndent		611097	1					
ANR	611384	ExpressionStatement	isNonInStatementArray = other . isNonInStatementArray	155:1:5233:5284	611097	108	True				
ANR	611385	AssignmentExpression	isNonInStatementArray = other . isNonInStatementArray		611097	0		=			
ANR	611386	Identifier	isNonInStatementArray		611097	0					
ANR	611387	MemberAccess	other . isNonInStatementArray		611097	1					
ANR	611388	Identifier	other		611097	0					
ANR	611389	Identifier	isNonInStatementArray		611097	1					
ANR	611390	ExpressionStatement	isSharpAccessor = other . isSharpAccessor	156:1:5287:5326	611097	109	True				
ANR	611391	AssignmentExpression	isSharpAccessor = other . isSharpAccessor		611097	0		=			
ANR	611392	Identifier	isSharpAccessor		611097	0					
ANR	611393	MemberAccess	other . isSharpAccessor		611097	1					
ANR	611394	Identifier	other		611097	0					
ANR	611395	Identifier	isSharpAccessor		611097	1					
ANR	611396	ExpressionStatement	isSharpDelegate = other . isSharpDelegate	157:1:5329:5368	611097	110	True				
ANR	611397	AssignmentExpression	isSharpDelegate = other . isSharpDelegate		611097	0		=			
ANR	611398	Identifier	isSharpDelegate		611097	0					
ANR	611399	MemberAccess	other . isSharpDelegate		611097	1					
ANR	611400	Identifier	other		611097	0					
ANR	611401	Identifier	isSharpDelegate		611097	1					
ANR	611402	ExpressionStatement	isInExternC = other . isInExternC	158:1:5371:5402	611097	111	True				
ANR	611403	AssignmentExpression	isInExternC = other . isInExternC		611097	0		=			
ANR	611404	Identifier	isInExternC		611097	0					
ANR	611405	MemberAccess	other . isInExternC		611097	1					
ANR	611406	Identifier	other		611097	0					
ANR	611407	Identifier	isInExternC		611097	1					
ANR	611408	ExpressionStatement	isInBeautifySQL = other . isInBeautifySQL	159:1:5405:5444	611097	112	True				
ANR	611409	AssignmentExpression	isInBeautifySQL = other . isInBeautifySQL		611097	0		=			
ANR	611410	Identifier	isInBeautifySQL		611097	0					
ANR	611411	MemberAccess	other . isInBeautifySQL		611097	1					
ANR	611412	Identifier	other		611097	0					
ANR	611413	Identifier	isInBeautifySQL		611097	1					
ANR	611414	ExpressionStatement	isInIndentableStruct = other . isInIndentableStruct	160:1:5447:5496	611097	113	True				
ANR	611415	AssignmentExpression	isInIndentableStruct = other . isInIndentableStruct		611097	0		=			
ANR	611416	Identifier	isInIndentableStruct		611097	0					
ANR	611417	MemberAccess	other . isInIndentableStruct		611097	1					
ANR	611418	Identifier	other		611097	0					
ANR	611419	Identifier	isInIndentableStruct		611097	1					
ANR	611420	ExpressionStatement	isInIndentablePreproc = other . isInIndentablePreproc	161:1:5499:5550	611097	114	True				
ANR	611421	AssignmentExpression	isInIndentablePreproc = other . isInIndentablePreproc		611097	0		=			
ANR	611422	Identifier	isInIndentablePreproc		611097	0					
ANR	611423	MemberAccess	other . isInIndentablePreproc		611097	1					
ANR	611424	Identifier	other		611097	0					
ANR	611425	Identifier	isInIndentablePreproc		611097	1					
ANR	611426	ExpressionStatement	sourceIterator = other . sourceIterator	164:1:5576:5613	611097	115	True				
ANR	611427	AssignmentExpression	sourceIterator = other . sourceIterator		611097	0		=			
ANR	611428	Identifier	sourceIterator		611097	0					
ANR	611429	MemberAccess	other . sourceIterator		611097	1					
ANR	611430	Identifier	other		611097	0					
ANR	611431	Identifier	sourceIterator		611097	1					
ANR	611432	ExpressionStatement	currentHeader = other . currentHeader	165:1:5616:5651	611097	116	True				
ANR	611433	AssignmentExpression	currentHeader = other . currentHeader		611097	0		=			
ANR	611434	Identifier	currentHeader		611097	0					
ANR	611435	MemberAccess	other . currentHeader		611097	1					
ANR	611436	Identifier	other		611097	0					
ANR	611437	Identifier	currentHeader		611097	1					
ANR	611438	ExpressionStatement	previousLastLineHeader = other . previousLastLineHeader	166:1:5654:5707	611097	117	True				
ANR	611439	AssignmentExpression	previousLastLineHeader = other . previousLastLineHeader		611097	0		=			
ANR	611440	Identifier	previousLastLineHeader		611097	0					
ANR	611441	MemberAccess	other . previousLastLineHeader		611097	1					
ANR	611442	Identifier	other		611097	0					
ANR	611443	Identifier	previousLastLineHeader		611097	1					
ANR	611444	ExpressionStatement	probationHeader = other . probationHeader	167:1:5710:5749	611097	118	True				
ANR	611445	AssignmentExpression	probationHeader = other . probationHeader		611097	0		=			
ANR	611446	Identifier	probationHeader		611097	0					
ANR	611447	MemberAccess	other . probationHeader		611097	1					
ANR	611448	Identifier	other		611097	0					
ANR	611449	Identifier	probationHeader		611097	1					
ANR	611450	ExpressionStatement	lastLineHeader = other . lastLineHeader	168:1:5752:5789	611097	119	True				
ANR	611451	AssignmentExpression	lastLineHeader = other . lastLineHeader		611097	0		=			
ANR	611452	Identifier	lastLineHeader		611097	0					
ANR	611453	MemberAccess	other . lastLineHeader		611097	1					
ANR	611454	Identifier	other		611097	0					
ANR	611455	Identifier	lastLineHeader		611097	1					
ANR	611456	ExpressionStatement	indentString = other . indentString	169:1:5792:5825	611097	120	True				
ANR	611457	AssignmentExpression	indentString = other . indentString		611097	0		=			
ANR	611458	Identifier	indentString		611097	0					
ANR	611459	MemberAccess	other . indentString		611097	1					
ANR	611460	Identifier	other		611097	0					
ANR	611461	Identifier	indentString		611097	1					
ANR	611462	ExpressionStatement	verbatimDelimiter = other . verbatimDelimiter	170:1:5828:5871	611097	121	True				
ANR	611463	AssignmentExpression	verbatimDelimiter = other . verbatimDelimiter		611097	0		=			
ANR	611464	Identifier	verbatimDelimiter		611097	0					
ANR	611465	MemberAccess	other . verbatimDelimiter		611097	1					
ANR	611466	Identifier	other		611097	0					
ANR	611467	Identifier	verbatimDelimiter		611097	1					
ANR	611468	ExpressionStatement	isInQuote = other . isInQuote	171:1:5874:5901	611097	122	True				
ANR	611469	AssignmentExpression	isInQuote = other . isInQuote		611097	0		=			
ANR	611470	Identifier	isInQuote		611097	0					
ANR	611471	MemberAccess	other . isInQuote		611097	1					
ANR	611472	Identifier	other		611097	0					
ANR	611473	Identifier	isInQuote		611097	1					
ANR	611474	ExpressionStatement	isInVerbatimQuote = other . isInVerbatimQuote	172:1:5904:5947	611097	123	True				
ANR	611475	AssignmentExpression	isInVerbatimQuote = other . isInVerbatimQuote		611097	0		=			
ANR	611476	Identifier	isInVerbatimQuote		611097	0					
ANR	611477	MemberAccess	other . isInVerbatimQuote		611097	1					
ANR	611478	Identifier	other		611097	0					
ANR	611479	Identifier	isInVerbatimQuote		611097	1					
ANR	611480	ExpressionStatement	haveLineContinuationChar = other . haveLineContinuationChar	173:1:5950:6007	611097	124	True				
ANR	611481	AssignmentExpression	haveLineContinuationChar = other . haveLineContinuationChar		611097	0		=			
ANR	611482	Identifier	haveLineContinuationChar		611097	0					
ANR	611483	MemberAccess	other . haveLineContinuationChar		611097	1					
ANR	611484	Identifier	other		611097	0					
ANR	611485	Identifier	haveLineContinuationChar		611097	1					
ANR	611486	ExpressionStatement	isInAsm = other . isInAsm	174:1:6010:6033	611097	125	True				
ANR	611487	AssignmentExpression	isInAsm = other . isInAsm		611097	0		=			
ANR	611488	Identifier	isInAsm		611097	0					
ANR	611489	MemberAccess	other . isInAsm		611097	1					
ANR	611490	Identifier	other		611097	0					
ANR	611491	Identifier	isInAsm		611097	1					
ANR	611492	ExpressionStatement	isInAsmOneLine = other . isInAsmOneLine	175:1:6036:6073	611097	126	True				
ANR	611493	AssignmentExpression	isInAsmOneLine = other . isInAsmOneLine		611097	0		=			
ANR	611494	Identifier	isInAsmOneLine		611097	0					
ANR	611495	MemberAccess	other . isInAsmOneLine		611097	1					
ANR	611496	Identifier	other		611097	0					
ANR	611497	Identifier	isInAsmOneLine		611097	1					
ANR	611498	ExpressionStatement	isInAsmBlock = other . isInAsmBlock	176:1:6076:6109	611097	127	True				
ANR	611499	AssignmentExpression	isInAsmBlock = other . isInAsmBlock		611097	0		=			
ANR	611500	Identifier	isInAsmBlock		611097	0					
ANR	611501	MemberAccess	other . isInAsmBlock		611097	1					
ANR	611502	Identifier	other		611097	0					
ANR	611503	Identifier	isInAsmBlock		611097	1					
ANR	611504	ExpressionStatement	isInComment = other . isInComment	177:1:6112:6143	611097	128	True				
ANR	611505	AssignmentExpression	isInComment = other . isInComment		611097	0		=			
ANR	611506	Identifier	isInComment		611097	0					
ANR	611507	MemberAccess	other . isInComment		611097	1					
ANR	611508	Identifier	other		611097	0					
ANR	611509	Identifier	isInComment		611097	1					
ANR	611510	ExpressionStatement	isInPreprocessorComment = other . isInPreprocessorComment	178:1:6146:6201	611097	129	True				
ANR	611511	AssignmentExpression	isInPreprocessorComment = other . isInPreprocessorComment		611097	0		=			
ANR	611512	Identifier	isInPreprocessorComment		611097	0					
ANR	611513	MemberAccess	other . isInPreprocessorComment		611097	1					
ANR	611514	Identifier	other		611097	0					
ANR	611515	Identifier	isInPreprocessorComment		611097	1					
ANR	611516	ExpressionStatement	isInRunInComment = other . isInRunInComment	179:1:6204:6245	611097	130	True				
ANR	611517	AssignmentExpression	isInRunInComment = other . isInRunInComment		611097	0		=			
ANR	611518	Identifier	isInRunInComment		611097	0					
ANR	611519	MemberAccess	other . isInRunInComment		611097	1					
ANR	611520	Identifier	other		611097	0					
ANR	611521	Identifier	isInRunInComment		611097	1					
ANR	611522	ExpressionStatement	isInCase = other . isInCase	180:1:6248:6273	611097	131	True				
ANR	611523	AssignmentExpression	isInCase = other . isInCase		611097	0		=			
ANR	611524	Identifier	isInCase		611097	0					
ANR	611525	MemberAccess	other . isInCase		611097	1					
ANR	611526	Identifier	other		611097	0					
ANR	611527	Identifier	isInCase		611097	1					
ANR	611528	ExpressionStatement	isInQuestion = other . isInQuestion	181:1:6276:6309	611097	132	True				
ANR	611529	AssignmentExpression	isInQuestion = other . isInQuestion		611097	0		=			
ANR	611530	Identifier	isInQuestion		611097	0					
ANR	611531	MemberAccess	other . isInQuestion		611097	1					
ANR	611532	Identifier	other		611097	0					
ANR	611533	Identifier	isInQuestion		611097	1					
ANR	611534	ExpressionStatement	isContinuation = other . isContinuation	182:1:6312:6349	611097	133	True				
ANR	611535	AssignmentExpression	isContinuation = other . isContinuation		611097	0		=			
ANR	611536	Identifier	isContinuation		611097	0					
ANR	611537	MemberAccess	other . isContinuation		611097	1					
ANR	611538	Identifier	other		611097	0					
ANR	611539	Identifier	isContinuation		611097	1					
ANR	611540	ExpressionStatement	isInHeader = other . isInHeader	183:1:6352:6381	611097	134	True				
ANR	611541	AssignmentExpression	isInHeader = other . isInHeader		611097	0		=			
ANR	611542	Identifier	isInHeader		611097	0					
ANR	611543	MemberAccess	other . isInHeader		611097	1					
ANR	611544	Identifier	other		611097	0					
ANR	611545	Identifier	isInHeader		611097	1					
ANR	611546	ExpressionStatement	isInTemplate = other . isInTemplate	184:1:6384:6417	611097	135	True				
ANR	611547	AssignmentExpression	isInTemplate = other . isInTemplate		611097	0		=			
ANR	611548	Identifier	isInTemplate		611097	0					
ANR	611549	MemberAccess	other . isInTemplate		611097	1					
ANR	611550	Identifier	other		611097	0					
ANR	611551	Identifier	isInTemplate		611097	1					
ANR	611552	ExpressionStatement	isInDefine = other . isInDefine	185:1:6420:6449	611097	136	True				
ANR	611553	AssignmentExpression	isInDefine = other . isInDefine		611097	0		=			
ANR	611554	Identifier	isInDefine		611097	0					
ANR	611555	MemberAccess	other . isInDefine		611097	1					
ANR	611556	Identifier	other		611097	0					
ANR	611557	Identifier	isInDefine		611097	1					
ANR	611558	ExpressionStatement	isInDefineDefinition = other . isInDefineDefinition	186:1:6452:6501	611097	137	True				
ANR	611559	AssignmentExpression	isInDefineDefinition = other . isInDefineDefinition		611097	0		=			
ANR	611560	Identifier	isInDefineDefinition		611097	0					
ANR	611561	MemberAccess	other . isInDefineDefinition		611097	1					
ANR	611562	Identifier	other		611097	0					
ANR	611563	Identifier	isInDefineDefinition		611097	1					
ANR	611564	ExpressionStatement	classIndent = other . classIndent	187:1:6504:6535	611097	138	True				
ANR	611565	AssignmentExpression	classIndent = other . classIndent		611097	0		=			
ANR	611566	Identifier	classIndent		611097	0					
ANR	611567	MemberAccess	other . classIndent		611097	1					
ANR	611568	Identifier	other		611097	0					
ANR	611569	Identifier	classIndent		611097	1					
ANR	611570	ExpressionStatement	isIndentModeOff = other . isIndentModeOff	188:1:6538:6577	611097	139	True				
ANR	611571	AssignmentExpression	isIndentModeOff = other . isIndentModeOff		611097	0		=			
ANR	611572	Identifier	isIndentModeOff		611097	0					
ANR	611573	MemberAccess	other . isIndentModeOff		611097	1					
ANR	611574	Identifier	other		611097	0					
ANR	611575	Identifier	isIndentModeOff		611097	1					
ANR	611576	ExpressionStatement	isInClassHeader = other . isInClassHeader	189:1:6580:6619	611097	140	True				
ANR	611577	AssignmentExpression	isInClassHeader = other . isInClassHeader		611097	0		=			
ANR	611578	Identifier	isInClassHeader		611097	0					
ANR	611579	MemberAccess	other . isInClassHeader		611097	1					
ANR	611580	Identifier	other		611097	0					
ANR	611581	Identifier	isInClassHeader		611097	1					
ANR	611582	ExpressionStatement	isInClassHeaderTab = other . isInClassHeaderTab	190:1:6622:6667	611097	141	True				
ANR	611583	AssignmentExpression	isInClassHeaderTab = other . isInClassHeaderTab		611097	0		=			
ANR	611584	Identifier	isInClassHeaderTab		611097	0					
ANR	611585	MemberAccess	other . isInClassHeaderTab		611097	1					
ANR	611586	Identifier	other		611097	0					
ANR	611587	Identifier	isInClassHeaderTab		611097	1					
ANR	611588	ExpressionStatement	isInClassInitializer = other . isInClassInitializer	191:1:6670:6719	611097	142	True				
ANR	611589	AssignmentExpression	isInClassInitializer = other . isInClassInitializer		611097	0		=			
ANR	611590	Identifier	isInClassInitializer		611097	0					
ANR	611591	MemberAccess	other . isInClassInitializer		611097	1					
ANR	611592	Identifier	other		611097	0					
ANR	611593	Identifier	isInClassInitializer		611097	1					
ANR	611594	ExpressionStatement	isInClass = other . isInClass	192:1:6722:6749	611097	143	True				
ANR	611595	AssignmentExpression	isInClass = other . isInClass		611097	0		=			
ANR	611596	Identifier	isInClass		611097	0					
ANR	611597	MemberAccess	other . isInClass		611097	1					
ANR	611598	Identifier	other		611097	0					
ANR	611599	Identifier	isInClass		611097	1					
ANR	611600	ExpressionStatement	isInObjCMethodDefinition = other . isInObjCMethodDefinition	193:1:6752:6809	611097	144	True				
ANR	611601	AssignmentExpression	isInObjCMethodDefinition = other . isInObjCMethodDefinition		611097	0		=			
ANR	611602	Identifier	isInObjCMethodDefinition		611097	0					
ANR	611603	MemberAccess	other . isInObjCMethodDefinition		611097	1					
ANR	611604	Identifier	other		611097	0					
ANR	611605	Identifier	isInObjCMethodDefinition		611097	1					
ANR	611606	ExpressionStatement	isInObjCMethodCall = other . isInObjCMethodCall	194:1:6812:6857	611097	145	True				
ANR	611607	AssignmentExpression	isInObjCMethodCall = other . isInObjCMethodCall		611097	0		=			
ANR	611608	Identifier	isInObjCMethodCall		611097	0					
ANR	611609	MemberAccess	other . isInObjCMethodCall		611097	1					
ANR	611610	Identifier	other		611097	0					
ANR	611611	Identifier	isInObjCMethodCall		611097	1					
ANR	611612	ExpressionStatement	isInObjCMethodCallFirst = other . isInObjCMethodCallFirst	195:1:6860:6915	611097	146	True				
ANR	611613	AssignmentExpression	isInObjCMethodCallFirst = other . isInObjCMethodCallFirst		611097	0		=			
ANR	611614	Identifier	isInObjCMethodCallFirst		611097	0					
ANR	611615	MemberAccess	other . isInObjCMethodCallFirst		611097	1					
ANR	611616	Identifier	other		611097	0					
ANR	611617	Identifier	isInObjCMethodCallFirst		611097	1					
ANR	611618	ExpressionStatement	isImmediatelyPostObjCMethodDefinition = other . isImmediatelyPostObjCMethodDefinition	196:1:6918:7001	611097	147	True				
ANR	611619	AssignmentExpression	isImmediatelyPostObjCMethodDefinition = other . isImmediatelyPostObjCMethodDefinition		611097	0		=			
ANR	611620	Identifier	isImmediatelyPostObjCMethodDefinition		611097	0					
ANR	611621	MemberAccess	other . isImmediatelyPostObjCMethodDefinition		611097	1					
ANR	611622	Identifier	other		611097	0					
ANR	611623	Identifier	isImmediatelyPostObjCMethodDefinition		611097	1					
ANR	611624	ExpressionStatement	isImmediatelyPostObjCMethodCall = other . isImmediatelyPostObjCMethodCall	197:1:7004:7075	611097	148	True				
ANR	611625	AssignmentExpression	isImmediatelyPostObjCMethodCall = other . isImmediatelyPostObjCMethodCall		611097	0		=			
ANR	611626	Identifier	isImmediatelyPostObjCMethodCall		611097	0					
ANR	611627	MemberAccess	other . isImmediatelyPostObjCMethodCall		611097	1					
ANR	611628	Identifier	other		611097	0					
ANR	611629	Identifier	isImmediatelyPostObjCMethodCall		611097	1					
ANR	611630	ExpressionStatement	isInIndentablePreprocBlock = other . isInIndentablePreprocBlock	198:1:7078:7139	611097	149	True				
ANR	611631	AssignmentExpression	isInIndentablePreprocBlock = other . isInIndentablePreprocBlock		611097	0		=			
ANR	611632	Identifier	isInIndentablePreprocBlock		611097	0					
ANR	611633	MemberAccess	other . isInIndentablePreprocBlock		611097	1					
ANR	611634	Identifier	other		611097	0					
ANR	611635	Identifier	isInIndentablePreprocBlock		611097	1					
ANR	611636	ExpressionStatement	isInObjCInterface = other . isInObjCInterface	199:1:7142:7185	611097	150	True				
ANR	611637	AssignmentExpression	isInObjCInterface = other . isInObjCInterface		611097	0		=			
ANR	611638	Identifier	isInObjCInterface		611097	0					
ANR	611639	MemberAccess	other . isInObjCInterface		611097	1					
ANR	611640	Identifier	other		611097	0					
ANR	611641	Identifier	isInObjCInterface		611097	1					
ANR	611642	ExpressionStatement	isInEnum = other . isInEnum	200:1:7188:7213	611097	151	True				
ANR	611643	AssignmentExpression	isInEnum = other . isInEnum		611097	0		=			
ANR	611644	Identifier	isInEnum		611097	0					
ANR	611645	MemberAccess	other . isInEnum		611097	1					
ANR	611646	Identifier	other		611097	0					
ANR	611647	Identifier	isInEnum		611097	1					
ANR	611648	ExpressionStatement	isInEnumTypeID = other . isInEnumTypeID	201:1:7216:7253	611097	152	True				
ANR	611649	AssignmentExpression	isInEnumTypeID = other . isInEnumTypeID		611097	0		=			
ANR	611650	Identifier	isInEnumTypeID		611097	0					
ANR	611651	MemberAccess	other . isInEnumTypeID		611097	1					
ANR	611652	Identifier	other		611097	0					
ANR	611653	Identifier	isInEnumTypeID		611097	1					
ANR	611654	ExpressionStatement	isInLet = other . isInLet	202:1:7256:7279	611097	153	True				
ANR	611655	AssignmentExpression	isInLet = other . isInLet		611097	0		=			
ANR	611656	Identifier	isInLet		611097	0					
ANR	611657	MemberAccess	other . isInLet		611097	1					
ANR	611658	Identifier	other		611097	0					
ANR	611659	Identifier	isInLet		611097	1					
ANR	611660	ExpressionStatement	modifierIndent = other . modifierIndent	203:1:7282:7319	611097	154	True				
ANR	611661	AssignmentExpression	modifierIndent = other . modifierIndent		611097	0		=			
ANR	611662	Identifier	modifierIndent		611097	0					
ANR	611663	MemberAccess	other . modifierIndent		611097	1					
ANR	611664	Identifier	other		611097	0					
ANR	611665	Identifier	modifierIndent		611097	1					
ANR	611666	ExpressionStatement	switchIndent = other . switchIndent	204:1:7322:7355	611097	155	True				
ANR	611667	AssignmentExpression	switchIndent = other . switchIndent		611097	0		=			
ANR	611668	Identifier	switchIndent		611097	0					
ANR	611669	MemberAccess	other . switchIndent		611097	1					
ANR	611670	Identifier	other		611097	0					
ANR	611671	Identifier	switchIndent		611097	1					
ANR	611672	ExpressionStatement	caseIndent = other . caseIndent	205:1:7358:7387	611097	156	True				
ANR	611673	AssignmentExpression	caseIndent = other . caseIndent		611097	0		=			
ANR	611674	Identifier	caseIndent		611097	0					
ANR	611675	MemberAccess	other . caseIndent		611097	1					
ANR	611676	Identifier	other		611097	0					
ANR	611677	Identifier	caseIndent		611097	1					
ANR	611678	ExpressionStatement	namespaceIndent = other . namespaceIndent	206:1:7390:7429	611097	157	True				
ANR	611679	AssignmentExpression	namespaceIndent = other . namespaceIndent		611097	0		=			
ANR	611680	Identifier	namespaceIndent		611097	0					
ANR	611681	MemberAccess	other . namespaceIndent		611097	1					
ANR	611682	Identifier	other		611097	0					
ANR	611683	Identifier	namespaceIndent		611097	1					
ANR	611684	ExpressionStatement	braceIndent = other . braceIndent	207:1:7432:7463	611097	158	True				
ANR	611685	AssignmentExpression	braceIndent = other . braceIndent		611097	0		=			
ANR	611686	Identifier	braceIndent		611097	0					
ANR	611687	MemberAccess	other . braceIndent		611097	1					
ANR	611688	Identifier	other		611097	0					
ANR	611689	Identifier	braceIndent		611097	1					
ANR	611690	ExpressionStatement	braceIndentVtk = other . braceIndentVtk	208:1:7466:7503	611097	159	True				
ANR	611691	AssignmentExpression	braceIndentVtk = other . braceIndentVtk		611097	0		=			
ANR	611692	Identifier	braceIndentVtk		611097	0					
ANR	611693	MemberAccess	other . braceIndentVtk		611097	1					
ANR	611694	Identifier	other		611097	0					
ANR	611695	Identifier	braceIndentVtk		611097	1					
ANR	611696	ExpressionStatement	blockIndent = other . blockIndent	209:1:7506:7537	611097	160	True				
ANR	611697	AssignmentExpression	blockIndent = other . blockIndent		611097	0		=			
ANR	611698	Identifier	blockIndent		611097	0					
ANR	611699	MemberAccess	other . blockIndent		611097	1					
ANR	611700	Identifier	other		611097	0					
ANR	611701	Identifier	blockIndent		611097	1					
ANR	611702	ExpressionStatement	shouldIndentAfterParen = other . shouldIndentAfterParen	210:1:7540:7593	611097	161	True				
ANR	611703	AssignmentExpression	shouldIndentAfterParen = other . shouldIndentAfterParen		611097	0		=			
ANR	611704	Identifier	shouldIndentAfterParen		611097	0					
ANR	611705	MemberAccess	other . shouldIndentAfterParen		611097	1					
ANR	611706	Identifier	other		611097	0					
ANR	611707	Identifier	shouldIndentAfterParen		611097	1					
ANR	611708	ExpressionStatement	labelIndent = other . labelIndent	211:1:7596:7627	611097	162	True				
ANR	611709	AssignmentExpression	labelIndent = other . labelIndent		611097	0		=			
ANR	611710	Identifier	labelIndent		611097	0					
ANR	611711	MemberAccess	other . labelIndent		611097	1					
ANR	611712	Identifier	other		611097	0					
ANR	611713	Identifier	labelIndent		611097	1					
ANR	611714	ExpressionStatement	isInConditional = other . isInConditional	212:1:7630:7669	611097	163	True				
ANR	611715	AssignmentExpression	isInConditional = other . isInConditional		611097	0		=			
ANR	611716	Identifier	isInConditional		611097	0					
ANR	611717	MemberAccess	other . isInConditional		611097	1					
ANR	611718	Identifier	other		611097	0					
ANR	611719	Identifier	isInConditional		611097	1					
ANR	611720	ExpressionStatement	isModeManuallySet = other . isModeManuallySet	213:1:7672:7715	611097	164	True				
ANR	611721	AssignmentExpression	isModeManuallySet = other . isModeManuallySet		611097	0		=			
ANR	611722	Identifier	isModeManuallySet		611097	0					
ANR	611723	MemberAccess	other . isModeManuallySet		611097	1					
ANR	611724	Identifier	other		611097	0					
ANR	611725	Identifier	isModeManuallySet		611097	1					
ANR	611726	ExpressionStatement	shouldForceTabIndentation = other . shouldForceTabIndentation	214:1:7718:7777	611097	165	True				
ANR	611727	AssignmentExpression	shouldForceTabIndentation = other . shouldForceTabIndentation		611097	0		=			
ANR	611728	Identifier	shouldForceTabIndentation		611097	0					
ANR	611729	MemberAccess	other . shouldForceTabIndentation		611097	1					
ANR	611730	Identifier	other		611097	0					
ANR	611731	Identifier	shouldForceTabIndentation		611097	1					
ANR	611732	ExpressionStatement	emptyLineFill = other . emptyLineFill	215:1:7780:7815	611097	166	True				
ANR	611733	AssignmentExpression	emptyLineFill = other . emptyLineFill		611097	0		=			
ANR	611734	Identifier	emptyLineFill		611097	0					
ANR	611735	MemberAccess	other . emptyLineFill		611097	1					
ANR	611736	Identifier	other		611097	0					
ANR	611737	Identifier	emptyLineFill		611097	1					
ANR	611738	ExpressionStatement	lineOpensWithLineComment = other . lineOpensWithLineComment	216:1:7818:7875	611097	167	True				
ANR	611739	AssignmentExpression	lineOpensWithLineComment = other . lineOpensWithLineComment		611097	0		=			
ANR	611740	Identifier	lineOpensWithLineComment		611097	0					
ANR	611741	MemberAccess	other . lineOpensWithLineComment		611097	1					
ANR	611742	Identifier	other		611097	0					
ANR	611743	Identifier	lineOpensWithLineComment		611097	1					
ANR	611744	ExpressionStatement	lineOpensWithComment = other . lineOpensWithComment	217:1:7878:7927	611097	168	True				
ANR	611745	AssignmentExpression	lineOpensWithComment = other . lineOpensWithComment		611097	0		=			
ANR	611746	Identifier	lineOpensWithComment		611097	0					
ANR	611747	MemberAccess	other . lineOpensWithComment		611097	1					
ANR	611748	Identifier	other		611097	0					
ANR	611749	Identifier	lineOpensWithComment		611097	1					
ANR	611750	ExpressionStatement	lineStartsInComment = other . lineStartsInComment	218:1:7930:7977	611097	169	True				
ANR	611751	AssignmentExpression	lineStartsInComment = other . lineStartsInComment		611097	0		=			
ANR	611752	Identifier	lineStartsInComment		611097	0					
ANR	611753	MemberAccess	other . lineStartsInComment		611097	1					
ANR	611754	Identifier	other		611097	0					
ANR	611755	Identifier	lineStartsInComment		611097	1					
ANR	611756	ExpressionStatement	backslashEndsPrevLine = other . backslashEndsPrevLine	219:1:7980:8031	611097	170	True				
ANR	611757	AssignmentExpression	backslashEndsPrevLine = other . backslashEndsPrevLine		611097	0		=			
ANR	611758	Identifier	backslashEndsPrevLine		611097	0					
ANR	611759	MemberAccess	other . backslashEndsPrevLine		611097	1					
ANR	611760	Identifier	other		611097	0					
ANR	611761	Identifier	backslashEndsPrevLine		611097	1					
ANR	611762	ExpressionStatement	blockCommentNoIndent = other . blockCommentNoIndent	220:1:8034:8083	611097	171	True				
ANR	611763	AssignmentExpression	blockCommentNoIndent = other . blockCommentNoIndent		611097	0		=			
ANR	611764	Identifier	blockCommentNoIndent		611097	0					
ANR	611765	MemberAccess	other . blockCommentNoIndent		611097	1					
ANR	611766	Identifier	other		611097	0					
ANR	611767	Identifier	blockCommentNoIndent		611097	1					
ANR	611768	ExpressionStatement	blockCommentNoBeautify = other . blockCommentNoBeautify	221:1:8086:8139	611097	172	True				
ANR	611769	AssignmentExpression	blockCommentNoBeautify = other . blockCommentNoBeautify		611097	0		=			
ANR	611770	Identifier	blockCommentNoBeautify		611097	0					
ANR	611771	MemberAccess	other . blockCommentNoBeautify		611097	1					
ANR	611772	Identifier	other		611097	0					
ANR	611773	Identifier	blockCommentNoBeautify		611097	1					
ANR	611774	ExpressionStatement	previousLineProbationTab = other . previousLineProbationTab	222:1:8142:8199	611097	173	True				
ANR	611775	AssignmentExpression	previousLineProbationTab = other . previousLineProbationTab		611097	0		=			
ANR	611776	Identifier	previousLineProbationTab		611097	0					
ANR	611777	MemberAccess	other . previousLineProbationTab		611097	1					
ANR	611778	Identifier	other		611097	0					
ANR	611779	Identifier	previousLineProbationTab		611097	1					
ANR	611780	ExpressionStatement	lineBeginsWithOpenBrace = other . lineBeginsWithOpenBrace	223:1:8202:8257	611097	174	True				
ANR	611781	AssignmentExpression	lineBeginsWithOpenBrace = other . lineBeginsWithOpenBrace		611097	0		=			
ANR	611782	Identifier	lineBeginsWithOpenBrace		611097	0					
ANR	611783	MemberAccess	other . lineBeginsWithOpenBrace		611097	1					
ANR	611784	Identifier	other		611097	0					
ANR	611785	Identifier	lineBeginsWithOpenBrace		611097	1					
ANR	611786	ExpressionStatement	lineBeginsWithCloseBrace = other . lineBeginsWithCloseBrace	224:1:8260:8317	611097	175	True				
ANR	611787	AssignmentExpression	lineBeginsWithCloseBrace = other . lineBeginsWithCloseBrace		611097	0		=			
ANR	611788	Identifier	lineBeginsWithCloseBrace		611097	0					
ANR	611789	MemberAccess	other . lineBeginsWithCloseBrace		611097	1					
ANR	611790	Identifier	other		611097	0					
ANR	611791	Identifier	lineBeginsWithCloseBrace		611097	1					
ANR	611792	ExpressionStatement	lineBeginsWithComma = other . lineBeginsWithComma	225:1:8320:8367	611097	176	True				
ANR	611793	AssignmentExpression	lineBeginsWithComma = other . lineBeginsWithComma		611097	0		=			
ANR	611794	Identifier	lineBeginsWithComma		611097	0					
ANR	611795	MemberAccess	other . lineBeginsWithComma		611097	1					
ANR	611796	Identifier	other		611097	0					
ANR	611797	Identifier	lineBeginsWithComma		611097	1					
ANR	611798	ExpressionStatement	lineIsCommentOnly = other . lineIsCommentOnly	226:1:8370:8413	611097	177	True				
ANR	611799	AssignmentExpression	lineIsCommentOnly = other . lineIsCommentOnly		611097	0		=			
ANR	611800	Identifier	lineIsCommentOnly		611097	0					
ANR	611801	MemberAccess	other . lineIsCommentOnly		611097	1					
ANR	611802	Identifier	other		611097	0					
ANR	611803	Identifier	lineIsCommentOnly		611097	1					
ANR	611804	ExpressionStatement	lineIsLineCommentOnly = other . lineIsLineCommentOnly	227:1:8416:8467	611097	178	True				
ANR	611805	AssignmentExpression	lineIsLineCommentOnly = other . lineIsLineCommentOnly		611097	0		=			
ANR	611806	Identifier	lineIsLineCommentOnly		611097	0					
ANR	611807	MemberAccess	other . lineIsLineCommentOnly		611097	1					
ANR	611808	Identifier	other		611097	0					
ANR	611809	Identifier	lineIsLineCommentOnly		611097	1					
ANR	611810	ExpressionStatement	shouldIndentBracedLine = other . shouldIndentBracedLine	228:1:8470:8523	611097	179	True				
ANR	611811	AssignmentExpression	shouldIndentBracedLine = other . shouldIndentBracedLine		611097	0		=			
ANR	611812	Identifier	shouldIndentBracedLine		611097	0					
ANR	611813	MemberAccess	other . shouldIndentBracedLine		611097	1					
ANR	611814	Identifier	other		611097	0					
ANR	611815	Identifier	shouldIndentBracedLine		611097	1					
ANR	611816	ExpressionStatement	isInSwitch = other . isInSwitch	229:1:8526:8555	611097	180	True				
ANR	611817	AssignmentExpression	isInSwitch = other . isInSwitch		611097	0		=			
ANR	611818	Identifier	isInSwitch		611097	0					
ANR	611819	MemberAccess	other . isInSwitch		611097	1					
ANR	611820	Identifier	other		611097	0					
ANR	611821	Identifier	isInSwitch		611097	1					
ANR	611822	ExpressionStatement	foundPreCommandHeader = other . foundPreCommandHeader	230:1:8558:8609	611097	181	True				
ANR	611823	AssignmentExpression	foundPreCommandHeader = other . foundPreCommandHeader		611097	0		=			
ANR	611824	Identifier	foundPreCommandHeader		611097	0					
ANR	611825	MemberAccess	other . foundPreCommandHeader		611097	1					
ANR	611826	Identifier	other		611097	0					
ANR	611827	Identifier	foundPreCommandHeader		611097	1					
ANR	611828	ExpressionStatement	foundPreCommandMacro = other . foundPreCommandMacro	231:1:8612:8661	611097	182	True				
ANR	611829	AssignmentExpression	foundPreCommandMacro = other . foundPreCommandMacro		611097	0		=			
ANR	611830	Identifier	foundPreCommandMacro		611097	0					
ANR	611831	MemberAccess	other . foundPreCommandMacro		611097	1					
ANR	611832	Identifier	other		611097	0					
ANR	611833	Identifier	foundPreCommandMacro		611097	1					
ANR	611834	ExpressionStatement	shouldAlignMethodColon = other . shouldAlignMethodColon	232:1:8664:8717	611097	183	True				
ANR	611835	AssignmentExpression	shouldAlignMethodColon = other . shouldAlignMethodColon		611097	0		=			
ANR	611836	Identifier	shouldAlignMethodColon		611097	0					
ANR	611837	MemberAccess	other . shouldAlignMethodColon		611097	1					
ANR	611838	Identifier	other		611097	0					
ANR	611839	Identifier	shouldAlignMethodColon		611097	1					
ANR	611840	ExpressionStatement	shouldIndentPreprocDefine = other . shouldIndentPreprocDefine	233:1:8720:8779	611097	184	True				
ANR	611841	AssignmentExpression	shouldIndentPreprocDefine = other . shouldIndentPreprocDefine		611097	0		=			
ANR	611842	Identifier	shouldIndentPreprocDefine		611097	0					
ANR	611843	MemberAccess	other . shouldIndentPreprocDefine		611097	1					
ANR	611844	Identifier	other		611097	0					
ANR	611845	Identifier	shouldIndentPreprocDefine		611097	1					
ANR	611846	ExpressionStatement	shouldIndentPreprocConditional = other . shouldIndentPreprocConditional	234:1:8782:8851	611097	185	True				
ANR	611847	AssignmentExpression	shouldIndentPreprocConditional = other . shouldIndentPreprocConditional		611097	0		=			
ANR	611848	Identifier	shouldIndentPreprocConditional		611097	0					
ANR	611849	MemberAccess	other . shouldIndentPreprocConditional		611097	1					
ANR	611850	Identifier	other		611097	0					
ANR	611851	Identifier	shouldIndentPreprocConditional		611097	1					
ANR	611852	ExpressionStatement	indentCount = other . indentCount	235:1:8854:8885	611097	186	True				
ANR	611853	AssignmentExpression	indentCount = other . indentCount		611097	0		=			
ANR	611854	Identifier	indentCount		611097	0					
ANR	611855	MemberAccess	other . indentCount		611097	1					
ANR	611856	Identifier	other		611097	0					
ANR	611857	Identifier	indentCount		611097	1					
ANR	611858	ExpressionStatement	spaceIndentCount = other . spaceIndentCount	236:1:8888:8929	611097	187	True				
ANR	611859	AssignmentExpression	spaceIndentCount = other . spaceIndentCount		611097	0		=			
ANR	611860	Identifier	spaceIndentCount		611097	0					
ANR	611861	MemberAccess	other . spaceIndentCount		611097	1					
ANR	611862	Identifier	other		611097	0					
ANR	611863	Identifier	spaceIndentCount		611097	1					
ANR	611864	ExpressionStatement	spaceIndentObjCMethodAlignment = other . spaceIndentObjCMethodAlignment	237:1:8932:9001	611097	188	True				
ANR	611865	AssignmentExpression	spaceIndentObjCMethodAlignment = other . spaceIndentObjCMethodAlignment		611097	0		=			
ANR	611866	Identifier	spaceIndentObjCMethodAlignment		611097	0					
ANR	611867	MemberAccess	other . spaceIndentObjCMethodAlignment		611097	1					
ANR	611868	Identifier	other		611097	0					
ANR	611869	Identifier	spaceIndentObjCMethodAlignment		611097	1					
ANR	611870	ExpressionStatement	bracePosObjCMethodAlignment = other . bracePosObjCMethodAlignment	238:1:9004:9067	611097	189	True				
ANR	611871	AssignmentExpression	bracePosObjCMethodAlignment = other . bracePosObjCMethodAlignment		611097	0		=			
ANR	611872	Identifier	bracePosObjCMethodAlignment		611097	0					
ANR	611873	MemberAccess	other . bracePosObjCMethodAlignment		611097	1					
ANR	611874	Identifier	other		611097	0					
ANR	611875	Identifier	bracePosObjCMethodAlignment		611097	1					
ANR	611876	ExpressionStatement	colonIndentObjCMethodAlignment = other . colonIndentObjCMethodAlignment	239:1:9070:9139	611097	190	True				
ANR	611877	AssignmentExpression	colonIndentObjCMethodAlignment = other . colonIndentObjCMethodAlignment		611097	0		=			
ANR	611878	Identifier	colonIndentObjCMethodAlignment		611097	0					
ANR	611879	MemberAccess	other . colonIndentObjCMethodAlignment		611097	1					
ANR	611880	Identifier	other		611097	0					
ANR	611881	Identifier	colonIndentObjCMethodAlignment		611097	1					
ANR	611882	ExpressionStatement	lineOpeningBlocksNum = other . lineOpeningBlocksNum	240:1:9142:9191	611097	191	True				
ANR	611883	AssignmentExpression	lineOpeningBlocksNum = other . lineOpeningBlocksNum		611097	0		=			
ANR	611884	Identifier	lineOpeningBlocksNum		611097	0					
ANR	611885	MemberAccess	other . lineOpeningBlocksNum		611097	1					
ANR	611886	Identifier	other		611097	0					
ANR	611887	Identifier	lineOpeningBlocksNum		611097	1					
ANR	611888	ExpressionStatement	lineClosingBlocksNum = other . lineClosingBlocksNum	241:1:9194:9243	611097	192	True				
ANR	611889	AssignmentExpression	lineClosingBlocksNum = other . lineClosingBlocksNum		611097	0		=			
ANR	611890	Identifier	lineClosingBlocksNum		611097	0					
ANR	611891	MemberAccess	other . lineClosingBlocksNum		611097	1					
ANR	611892	Identifier	other		611097	0					
ANR	611893	Identifier	lineClosingBlocksNum		611097	1					
ANR	611894	ExpressionStatement	fileType = other . fileType	242:1:9246:9271	611097	193	True				
ANR	611895	AssignmentExpression	fileType = other . fileType		611097	0		=			
ANR	611896	Identifier	fileType		611097	0					
ANR	611897	MemberAccess	other . fileType		611097	1					
ANR	611898	Identifier	other		611097	0					
ANR	611899	Identifier	fileType		611097	1					
ANR	611900	ExpressionStatement	minConditionalOption = other . minConditionalOption	243:1:9274:9323	611097	194	True				
ANR	611901	AssignmentExpression	minConditionalOption = other . minConditionalOption		611097	0		=			
ANR	611902	Identifier	minConditionalOption		611097	0					
ANR	611903	MemberAccess	other . minConditionalOption		611097	1					
ANR	611904	Identifier	other		611097	0					
ANR	611905	Identifier	minConditionalOption		611097	1					
ANR	611906	ExpressionStatement	minConditionalIndent = other . minConditionalIndent	244:1:9326:9375	611097	195	True				
ANR	611907	AssignmentExpression	minConditionalIndent = other . minConditionalIndent		611097	0		=			
ANR	611908	Identifier	minConditionalIndent		611097	0					
ANR	611909	MemberAccess	other . minConditionalIndent		611097	1					
ANR	611910	Identifier	other		611097	0					
ANR	611911	Identifier	minConditionalIndent		611097	1					
ANR	611912	ExpressionStatement	parenDepth = other . parenDepth	245:1:9378:9407	611097	196	True				
ANR	611913	AssignmentExpression	parenDepth = other . parenDepth		611097	0		=			
ANR	611914	Identifier	parenDepth		611097	0					
ANR	611915	MemberAccess	other . parenDepth		611097	1					
ANR	611916	Identifier	other		611097	0					
ANR	611917	Identifier	parenDepth		611097	1					
ANR	611918	ExpressionStatement	indentLength = other . indentLength	246:1:9410:9443	611097	197	True				
ANR	611919	AssignmentExpression	indentLength = other . indentLength		611097	0		=			
ANR	611920	Identifier	indentLength		611097	0					
ANR	611921	MemberAccess	other . indentLength		611097	1					
ANR	611922	Identifier	other		611097	0					
ANR	611923	Identifier	indentLength		611097	1					
ANR	611924	ExpressionStatement	tabLength = other . tabLength	247:1:9446:9473	611097	198	True				
ANR	611925	AssignmentExpression	tabLength = other . tabLength		611097	0		=			
ANR	611926	Identifier	tabLength		611097	0					
ANR	611927	MemberAccess	other . tabLength		611097	1					
ANR	611928	Identifier	other		611097	0					
ANR	611929	Identifier	tabLength		611097	1					
ANR	611930	ExpressionStatement	continuationIndent = other . continuationIndent	248:1:9476:9521	611097	199	True				
ANR	611931	AssignmentExpression	continuationIndent = other . continuationIndent		611097	0		=			
ANR	611932	Identifier	continuationIndent		611097	0					
ANR	611933	MemberAccess	other . continuationIndent		611097	1					
ANR	611934	Identifier	other		611097	0					
ANR	611935	Identifier	continuationIndent		611097	1					
ANR	611936	ExpressionStatement	blockTabCount = other . blockTabCount	249:1:9524:9559	611097	200	True				
ANR	611937	AssignmentExpression	blockTabCount = other . blockTabCount		611097	0		=			
ANR	611938	Identifier	blockTabCount		611097	0					
ANR	611939	MemberAccess	other . blockTabCount		611097	1					
ANR	611940	Identifier	other		611097	0					
ANR	611941	Identifier	blockTabCount		611097	1					
ANR	611942	ExpressionStatement	maxContinuationIndent = other . maxContinuationIndent	250:1:9562:9613	611097	201	True				
ANR	611943	AssignmentExpression	maxContinuationIndent = other . maxContinuationIndent		611097	0		=			
ANR	611944	Identifier	maxContinuationIndent		611097	0					
ANR	611945	MemberAccess	other . maxContinuationIndent		611097	1					
ANR	611946	Identifier	other		611097	0					
ANR	611947	Identifier	maxContinuationIndent		611097	1					
ANR	611948	ExpressionStatement	classInitializerIndents = other . classInitializerIndents	251:1:9616:9671	611097	202	True				
ANR	611949	AssignmentExpression	classInitializerIndents = other . classInitializerIndents		611097	0		=			
ANR	611950	Identifier	classInitializerIndents		611097	0					
ANR	611951	MemberAccess	other . classInitializerIndents		611097	1					
ANR	611952	Identifier	other		611097	0					
ANR	611953	Identifier	classInitializerIndents		611097	1					
ANR	611954	ExpressionStatement	templateDepth = other . templateDepth	252:1:9674:9709	611097	203	True				
ANR	611955	AssignmentExpression	templateDepth = other . templateDepth		611097	0		=			
ANR	611956	Identifier	templateDepth		611097	0					
ANR	611957	MemberAccess	other . templateDepth		611097	1					
ANR	611958	Identifier	other		611097	0					
ANR	611959	Identifier	templateDepth		611097	1					
ANR	611960	ExpressionStatement	squareBracketCount = other . squareBracketCount	253:1:9712:9757	611097	204	True				
ANR	611961	AssignmentExpression	squareBracketCount = other . squareBracketCount		611097	0		=			
ANR	611962	Identifier	squareBracketCount		611097	0					
ANR	611963	MemberAccess	other . squareBracketCount		611097	1					
ANR	611964	Identifier	other		611097	0					
ANR	611965	Identifier	squareBracketCount		611097	1					
ANR	611966	ExpressionStatement	prevFinalLineSpaceIndentCount = other . prevFinalLineSpaceIndentCount	254:1:9760:9827	611097	205	True				
ANR	611967	AssignmentExpression	prevFinalLineSpaceIndentCount = other . prevFinalLineSpaceIndentCount		611097	0		=			
ANR	611968	Identifier	prevFinalLineSpaceIndentCount		611097	0					
ANR	611969	MemberAccess	other . prevFinalLineSpaceIndentCount		611097	1					
ANR	611970	Identifier	other		611097	0					
ANR	611971	Identifier	prevFinalLineSpaceIndentCount		611097	1					
ANR	611972	ExpressionStatement	prevFinalLineIndentCount = other . prevFinalLineIndentCount	255:1:9830:9887	611097	206	True				
ANR	611973	AssignmentExpression	prevFinalLineIndentCount = other . prevFinalLineIndentCount		611097	0		=			
ANR	611974	Identifier	prevFinalLineIndentCount		611097	0					
ANR	611975	MemberAccess	other . prevFinalLineIndentCount		611097	1					
ANR	611976	Identifier	other		611097	0					
ANR	611977	Identifier	prevFinalLineIndentCount		611097	1					
ANR	611978	ExpressionStatement	defineIndentCount = other . defineIndentCount	256:1:9890:9933	611097	207	True				
ANR	611979	AssignmentExpression	defineIndentCount = other . defineIndentCount		611097	0		=			
ANR	611980	Identifier	defineIndentCount		611097	0					
ANR	611981	MemberAccess	other . defineIndentCount		611097	1					
ANR	611982	Identifier	other		611097	0					
ANR	611983	Identifier	defineIndentCount		611097	1					
ANR	611984	ExpressionStatement	preprocBlockIndent = other . preprocBlockIndent	257:1:9936:9981	611097	208	True				
ANR	611985	AssignmentExpression	preprocBlockIndent = other . preprocBlockIndent		611097	0		=			
ANR	611986	Identifier	preprocBlockIndent		611097	0					
ANR	611987	MemberAccess	other . preprocBlockIndent		611097	1					
ANR	611988	Identifier	other		611097	0					
ANR	611989	Identifier	preprocBlockIndent		611097	1					
ANR	611990	ExpressionStatement	quoteChar = other . quoteChar	258:1:9984:10011	611097	209	True				
ANR	611991	AssignmentExpression	quoteChar = other . quoteChar		611097	0		=			
ANR	611992	Identifier	quoteChar		611097	0					
ANR	611993	MemberAccess	other . quoteChar		611097	1					
ANR	611994	Identifier	other		611097	0					
ANR	611995	Identifier	quoteChar		611097	1					
ANR	611996	ExpressionStatement	prevNonSpaceCh = other . prevNonSpaceCh	259:1:10014:10051	611097	210	True				
ANR	611997	AssignmentExpression	prevNonSpaceCh = other . prevNonSpaceCh		611097	0		=			
ANR	611998	Identifier	prevNonSpaceCh		611097	0					
ANR	611999	MemberAccess	other . prevNonSpaceCh		611097	1					
ANR	612000	Identifier	other		611097	0					
ANR	612001	Identifier	prevNonSpaceCh		611097	1					
ANR	612002	ExpressionStatement	currentNonSpaceCh = other . currentNonSpaceCh	260:1:10054:10097	611097	211	True				
ANR	612003	AssignmentExpression	currentNonSpaceCh = other . currentNonSpaceCh		611097	0		=			
ANR	612004	Identifier	currentNonSpaceCh		611097	0					
ANR	612005	MemberAccess	other . currentNonSpaceCh		611097	1					
ANR	612006	Identifier	other		611097	0					
ANR	612007	Identifier	currentNonSpaceCh		611097	1					
ANR	612008	ExpressionStatement	currentNonLegalCh = other . currentNonLegalCh	261:1:10100:10143	611097	212	True				
ANR	612009	AssignmentExpression	currentNonLegalCh = other . currentNonLegalCh		611097	0		=			
ANR	612010	Identifier	currentNonLegalCh		611097	0					
ANR	612011	MemberAccess	other . currentNonLegalCh		611097	1					
ANR	612012	Identifier	other		611097	0					
ANR	612013	Identifier	currentNonLegalCh		611097	1					
ANR	612014	ExpressionStatement	prevNonLegalCh = other . prevNonLegalCh	262:1:10146:10183	611097	213	True				
ANR	612015	AssignmentExpression	prevNonLegalCh = other . prevNonLegalCh		611097	0		=			
ANR	612016	Identifier	prevNonLegalCh		611097	0					
ANR	612017	MemberAccess	other . prevNonLegalCh		611097	1					
ANR	612018	Identifier	other		611097	0					
ANR	612019	Identifier	prevNonLegalCh		611097	1					
ANR	612020	Identifier	ASBeautifier :: ASBeautifier		611097	1					
ANR	612021	ParameterList	const ASBeautifier & other		611097	2					
ANR	612022	Parameter	const ASBeautifier & other	94:27:3016:3040	611097	0	True				
ANR	612023	ParameterType	const ASBeautifier &		611097	0					
ANR	612024	Identifier	other		611097	1					
ANR	612025	CFGEntryNode	ENTRY		611097		True				
ANR	612026	CFGExitNode	EXIT		611097		True				
ANR	612027	Symbol	minConditionalIndent		611097						
ANR	612028	Symbol	other . isInAsmBlock		611097						
ANR	612029	Symbol	other . isInTemplate		611097						
ANR	612030	Symbol	other . isInIndentablePreproc		611097						
ANR	612031	Symbol	other . previousLastLineHeader		611097						
ANR	612032	Symbol	other . lineOpensWithComment		611097						
ANR	612033	Symbol	headerStack		611097						
ANR	612034	Symbol	other . backslashEndsPrevLine		611097						
ANR	612035	Symbol	other . shouldIndentAfterParen		611097						
ANR	612036	Symbol	isInEnum		611097						
ANR	612037	Symbol	waitingBeautifierStack		611097						
ANR	612038	Symbol	braceBlockStateStack		611097						
ANR	612039	Symbol	blockStatementStack		611097						
ANR	612040	Symbol	isIndentModeOff		611097						
ANR	612041	Symbol	parenStatementStack		611097						
ANR	612042	Symbol	other . isInQuestion		611097						
ANR	612043	Symbol	other . isInEnum		611097						
ANR	612044	Symbol	other . isInObjCMethodCall		611097						
ANR	612045	Symbol	other . lineIsLineCommentOnly		611097						
ANR	612046	Symbol	tabLength		611097						
ANR	612047	Symbol	blockCommentNoIndent		611097						
ANR	612048	Symbol	other . isImmediatelyPostObjCMethodCall		611097						
ANR	612049	Symbol	inLineNumber		611097						
ANR	612050	Symbol	isInCase		611097						
ANR	612051	Symbol	isSharpAccessor		611097						
ANR	612052	Symbol	nonAssignmentOperators		611097						
ANR	612053	Symbol	activeBeautifierStack		611097						
ANR	612054	Symbol	isCaseHeaderCommentIndent		611097						
ANR	612055	Symbol	shouldIndentPreprocConditional		611097						
ANR	612056	Symbol	nonInStatementBrace		611097						
ANR	612057	Symbol	other . squareBracketDepthStack		611097						
ANR	612058	Symbol	other . foundPreCommandMacro		611097						
ANR	612059	Symbol	isInDefine		611097						
ANR	612060	Symbol	isInObjCMethodCall		611097						
ANR	612061	Symbol	other . isInAsm		611097						
ANR	612062	Symbol	other . lineClosingBlocksNum		611097						
ANR	612063	Symbol	isImmediatelyPostObjCMethodDefinition		611097						
ANR	612064	Symbol	other . namespaceIndent		611097						
ANR	612065	Symbol	other . isInSwitch		611097						
ANR	612066	Symbol	other . blockTabCount		611097						
ANR	612067	Symbol	maxContinuationIndent		611097						
ANR	612068	Symbol	other . headerStack		611097						
ANR	612069	Symbol	isNonInStatementArray		611097						
ANR	612070	Symbol	isInObjCMethodDefinition		611097						
ANR	612071	Symbol	quoteChar		611097						
ANR	612072	Symbol	isInObjCInterface		611097						
ANR	612073	Symbol	preBlockStatements		611097						
ANR	612074	Symbol	other . currentHeader		611097						
ANR	612075	Symbol	other . shouldForceTabIndentation		611097						
ANR	612076	Symbol	parenIndentStack		611097						
ANR	612077	Symbol	other . isInIndentablePreprocBlock		611097						
ANR	612078	Symbol	nonParenHeaders		611097						
ANR	612079	Symbol	isImmediatelyPostObjCMethodCall		611097						
ANR	612080	Symbol	other . lineBeginsWithCloseBrace		611097						
ANR	612081	Symbol	* parenStatementStack		611097						
ANR	612082	Symbol	haveLineContinuationChar		611097						
ANR	612083	Symbol	other . isInObjCMethodCallFirst		611097						
ANR	612084	Symbol	continuationIndentStackSizeStack		611097						
ANR	612085	Symbol	labelIndent		611097						
ANR	612086	Symbol	other . fileType		611097						
ANR	612087	Symbol	spaceIndentObjCMethodAlignment		611097						
ANR	612088	Symbol	other . lineCommentNoBeautify		611097						
ANR	612089	Symbol	other . shouldIndentPreprocDefine		611097						
ANR	612090	Symbol	* preprocIndentStack		611097						
ANR	612091	Symbol	other . lineBeginsWithComma		611097						
ANR	612092	Symbol	* headerStack		611097						
ANR	612093	Symbol	other . blockIndent		611097						
ANR	612094	Symbol	sourceIterator		611097						
ANR	612095	Symbol	beautifierFileType		611097						
ANR	612096	Symbol	other . sourceIterator		611097						
ANR	612097	Symbol	other . isInDefineDefinition		611097						
ANR	612098	Symbol	other . isInConditional		611097						
ANR	612099	Symbol	other . emptyLineFill		611097						
ANR	612100	Symbol	other . isInObjCInterface		611097						
ANR	612101	Symbol	other . foundPreCommandHeader		611097						
ANR	612102	Symbol	other . modifierIndent		611097						
ANR	612103	Symbol	isInRunInComment		611097						
ANR	612104	Symbol	isInClassInitializer		611097						
ANR	612105	Symbol	emptyLineFill		611097						
ANR	612106	Symbol	isInAsmOneLine		611097						
ANR	612107	Symbol	other . quoteChar		611097						
ANR	612108	Symbol	isInIndentablePreprocBlock		611097						
ANR	612109	Symbol	nullptr		611097						
ANR	612110	Symbol	other . labelIndent		611097						
ANR	612111	Symbol	defineIndentCount		611097						
ANR	612112	Symbol	isSharpDelegate		611097						
ANR	612113	Symbol	isInHeader		611097						
ANR	612114	Symbol	blockIndent		611097						
ANR	612115	Symbol	classInitializerIndents		611097						
ANR	612116	Symbol	other . isInIndentableStruct		611097						
ANR	612117	Symbol	other . spaceIndentObjCMethodAlignment		611097						
ANR	612118	Symbol	probationHeader		611097						
ANR	612119	Symbol	other . lastLineHeader		611097						
ANR	612120	Symbol	other . bracePosObjCMethodAlignment		611097						
ANR	612121	Symbol	waitingBeautifierStackLengthStack		611097						
ANR	612122	Symbol	* blockStatementStack		611097						
ANR	612123	Symbol	headers		611097						
ANR	612124	Symbol	other . isModeManuallySet		611097						
ANR	612125	Symbol	isInClassHeaderTab		611097						
ANR	612126	Symbol	* other . squareBracketDepthStack		611097						
ANR	612127	Symbol	other . lineOpeningBlocksNum		611097						
ANR	612128	Symbol	prevNonSpaceCh		611097						
ANR	612129	Symbol	indentLength		611097						
ANR	612130	Symbol	other . caseIndent		611097						
ANR	612131	Symbol	other . preBlockStatements		611097						
ANR	612132	Symbol	shouldAlignMethodColon		611097						
ANR	612133	Symbol	isInAsm		611097						
ANR	612134	Symbol	other . isInCase		611097						
ANR	612135	Symbol	isInClassHeader		611097						
ANR	612136	Symbol	lineStartsInComment		611097						
ANR	612137	Symbol	other . lineIsCommentOnly		611097						
ANR	612138	Symbol	other . parenIndentStack		611097						
ANR	612139	Symbol	other . preCommandHeaders		611097						
ANR	612140	Symbol	other . continuationIndentStack		611097						
ANR	612141	Symbol	other . isInBeautifySQL		611097						
ANR	612142	Symbol	indentString		611097						
ANR	612143	Symbol	fileType		611097						
ANR	612144	Symbol	backslashEndsPrevLine		611097						
ANR	612145	Symbol	lineOpensWithLineComment		611097						
ANR	612146	Symbol	other . currentNonSpaceCh		611097						
ANR	612147	Symbol	squareBracketDepthStack		611097						
ANR	612148	Symbol	isInVerbatimQuote		611097						
ANR	612149	Symbol	other . minConditionalIndent		611097						
ANR	612150	Symbol	isContinuation		611097						
ANR	612151	Symbol	lineOpensWithComment		611097						
ANR	612152	Symbol	other . defineIndentCount		611097						
ANR	612153	Symbol	other . prevNonLegalCh		611097						
ANR	612154	Symbol	lineIsLineCommentOnly		611097						
ANR	612155	Symbol	* other . braceBlockStateStack		611097						
ANR	612156	Symbol	other . isIndentModeOff		611097						
ANR	612157	Symbol	parenDepth		611097						
ANR	612158	Symbol	other . classInitializerIndents		611097						
ANR	612159	Symbol	previousLastLineHeader		611097						
ANR	612160	Symbol	shouldIndentAfterParen		611097						
ANR	612161	Symbol	currentNonLegalCh		611097						
ANR	612162	Symbol	other . braceBlockStateStack		611097						
ANR	612163	Symbol	other . verbatimDelimiter		611097						
ANR	612164	Symbol	other . braceIndent		611097						
ANR	612165	Symbol	isModeManuallySet		611097						
ANR	612166	Symbol	colonIndentObjCMethodAlignment		611097						
ANR	612167	Symbol	other . nonAssignmentOperators		611097						
ANR	612168	Symbol	lineBeginsWithCloseBrace		611097						
ANR	612169	Symbol	lineBeginsWithComma		611097						
ANR	612170	Symbol	other . assignmentOperators		611097						
ANR	612171	Symbol	other . indentableHeaders		611097						
ANR	612172	Symbol	* other		611097						
ANR	612173	Symbol	other . switchIndent		611097						
ANR	612174	Symbol	other . isInRunInComment		611097						
ANR	612175	Symbol	lineClosingBlocksNum		611097						
ANR	612176	Symbol	other . isInQuote		611097						
ANR	612177	Symbol	other . isSharpAccessor		611097						
ANR	612178	Symbol	other . classIndent		611097						
ANR	612179	Symbol	other . isNonInStatementArray		611097						
ANR	612180	Symbol	other . runInIndentContinuation		611097						
ANR	612181	Symbol	other . isInClassHeaderTab		611097						
ANR	612182	Symbol	continuationIndent		611097						
ANR	612183	Symbol	prevNonLegalCh		611097						
ANR	612184	Symbol	other		611097						
ANR	612185	Symbol	other . prevNonSpaceCh		611097						
ANR	612186	Symbol	other . isCaseHeaderCommentIndent		611097						
ANR	612187	Symbol	other . beautifierFileType		611097						
ANR	612188	Symbol	other . objCColonAlignSubsequent		611097						
ANR	612189	Symbol	currentNonSpaceCh		611097						
ANR	612190	Symbol	other . isInVerbatimQuote		611097						
ANR	612191	Symbol	preprocIndentStack		611097						
ANR	612192	Symbol	lineCommentNoBeautify		611097						
ANR	612193	Symbol	isInIndentableStruct		611097						
ANR	612194	Symbol	other . blockCommentNoIndent		611097						
ANR	612195	Symbol	lineBeginsWithOpenBrace		611097						
ANR	612196	Symbol	other . blockCommentNoBeautify		611097						
ANR	612197	Symbol	isInLet		611097						
ANR	612198	Symbol	other . shouldIndentBracedLine		611097						
ANR	612199	Symbol	namespaceIndent		611097						
ANR	612200	Symbol	other . headers		611097						
ANR	612201	Symbol	shouldForceTabIndentation		611097						
ANR	612202	Symbol	braceIndent		611097						
ANR	612203	Symbol	other . continuationIndent		611097						
ANR	612204	Symbol	other . lineStartsInComment		611097						
ANR	612205	Symbol	* braceBlockStateStack		611097						
ANR	612206	Symbol	other . isElseHeaderIndent		611097						
ANR	612207	Symbol	verbatimDelimiter		611097						
ANR	612208	Symbol	other . isContinuation		611097						
ANR	612209	Symbol	isInSwitch		611097						
ANR	612210	Symbol	lastLineHeader		611097						
ANR	612211	Symbol	preprocBlockIndent		611097						
ANR	612212	Symbol	lineOpeningBlocksNum		611097						
ANR	612213	Symbol	other . continuationIndentStackSizeStack		611097						
ANR	612214	Symbol	isInPreprocessorComment		611097						
ANR	612215	Symbol	other . shouldAlignMethodColon		611097						
ANR	612216	Symbol	* squareBracketDepthStack		611097						
ANR	612217	Symbol	shouldIndentPreprocDefine		611097						
ANR	612218	Symbol	minConditionalOption		611097						
ANR	612219	Symbol	* other . continuationIndentStack		611097						
ANR	612220	Symbol	indentCount		611097						
ANR	612221	Symbol	other . nonParenHeaders		611097						
ANR	612222	Symbol	currentHeader		611097						
ANR	612223	Symbol	foundPreCommandHeader		611097						
ANR	612224	Symbol	other . tabLength		611097						
ANR	612225	Symbol	squareBracketCount		611097						
ANR	612226	Symbol	activeBeautifierStackLengthStack		611097						
ANR	612227	Symbol	copyTempStacks		611097						
ANR	612228	Symbol	other . parenStatementStack		611097						
ANR	612229	Symbol	other . isInAsmOneLine		611097						
ANR	612230	Symbol	isInAsmBlock		611097						
ANR	612231	Symbol	other . lineBeginsWithOpenBrace		611097						
ANR	612232	Symbol	* continuationIndentStackSizeStack		611097						
ANR	612233	Symbol	other . isInClassHeader		611097						
ANR	612234	Symbol	isInQuote		611097						
ANR	612235	Symbol	isInTemplate		611097						
ANR	612236	Symbol	other . spaceIndentCount		611097						
ANR	612237	Symbol	modifierIndent		611097						
ANR	612238	Symbol	other . braceIndentVtk		611097						
ANR	612239	Symbol	other . isInPreprocessorComment		611097						
ANR	612240	Symbol	other . parenDepth		611097						
ANR	612241	Symbol	other . squareBracketCount		611097						
ANR	612242	Symbol	isInEnumTypeID		611097						
ANR	612243	Symbol	other . haveLineContinuationChar		611097						
ANR	612244	Symbol	isInComment		611097						
ANR	612245	Symbol	other . isInExternC		611097						
ANR	612246	Symbol	other . lineOpensWithLineComment		611097						
ANR	612247	Symbol	blockTabCount		611097						
ANR	612248	Symbol	isInDefineDefinition		611097						
ANR	612249	Symbol	other . indentCount		611097						
ANR	612250	Symbol	templateDepth		611097						
ANR	612251	Symbol	objCColonAlignSubsequent		611097						
ANR	612252	Symbol	switchIndent		611097						
ANR	612253	Symbol	isInConditional		611097						
ANR	612254	Symbol	other . isInDefine		611097						
ANR	612255	Symbol	* other . parenStatementStack		611097						
ANR	612256	Symbol	other . isInClassInitializer		611097						
ANR	612257	Symbol	* other . blockStatementStack		611097						
ANR	612258	Symbol	lineIsCommentOnly		611097						
ANR	612259	Symbol	other . maxContinuationIndent		611097						
ANR	612260	Symbol	spaceIndentCount		611097						
ANR	612261	Symbol	* other . continuationIndentStackSizeStack		611097						
ANR	612262	Symbol	preCommandHeaders		611097						
ANR	612263	Symbol	other . isSharpDelegate		611097						
ANR	612264	Symbol	isInQuestion		611097						
ANR	612265	Symbol	continuationIndentStack		611097						
ANR	612266	Symbol	isInClass		611097						
ANR	612267	Symbol	other . isInObjCMethodDefinition		611097						
ANR	612268	Symbol	other . inLineNumber		611097						
ANR	612269	Symbol	isInExternC		611097						
ANR	612270	Symbol	other . preprocBlockIndent		611097						
ANR	612271	Symbol	assignmentOperators		611097						
ANR	612272	Symbol	blockCommentNoBeautify		611097						
ANR	612273	Symbol	foundPreCommandMacro		611097						
ANR	612274	Symbol	other . isInComment		611097						
ANR	612275	Symbol	prevFinalLineSpaceIndentCount		611097						
ANR	612276	Symbol	tempStacks		611097						
ANR	612277	Symbol	isInBeautifySQL		611097						
ANR	612278	Symbol	isInObjCMethodCallFirst		611097						
ANR	612279	Symbol	other . templateDepth		611097						
ANR	612280	Symbol	other . isInHeader		611097						
ANR	612281	Symbol	other . prevFinalLineIndentCount		611097						
ANR	612282	Symbol	indentableHeaders		611097						
ANR	612283	Symbol	other . isImmediatelyPostObjCMethodDefinition		611097						
ANR	612284	Symbol	other . previousLineProbationTab		611097						
ANR	612285	Symbol	shouldIndentBracedLine		611097						
ANR	612286	Symbol	other . colonIndentObjCMethodAlignment		611097						
ANR	612287	Symbol	* continuationIndentStack		611097						
ANR	612288	Symbol	* other . parenIndentStack		611097						
ANR	612289	Symbol	other . probationHeader		611097						
ANR	612290	Symbol	caseIndent		611097						
ANR	612291	Symbol	other . currentNonLegalCh		611097						
ANR	612292	Symbol	* parenIndentStack		611097						
ANR	612293	Symbol	braceIndentVtk		611097						
ANR	612294	Symbol	other . preprocIndentStack		611097						
ANR	612295	Symbol	other . nonInStatementBrace		611097						
ANR	612296	Symbol	other . isInLet		611097						
ANR	612297	Symbol	* other . preprocIndentStack		611097						
ANR	612298	Symbol	bracePosObjCMethodAlignment		611097						
ANR	612299	Symbol	isInIndentablePreproc		611097						
ANR	612300	Symbol	other . isInClass		611097						
ANR	612301	Symbol	other . indentLength		611097						
ANR	612302	Symbol	other . shouldIndentPreprocConditional		611097						
ANR	612303	Symbol	other . minConditionalOption		611097						
ANR	612304	Symbol	other . prevFinalLineSpaceIndentCount		611097						
ANR	612305	Symbol	* other . headerStack		611097						
ANR	612306	Symbol	other . isInEnumTypeID		611097						
ANR	612307	Symbol	previousLineProbationTab		611097						
ANR	612308	Symbol	prevFinalLineIndentCount		611097						
ANR	612309	Symbol	isElseHeaderIndent		611097						
ANR	612310	Symbol	classIndent		611097						
ANR	612311	Symbol	other . blockStatementStack		611097						
ANR	612312	Symbol	other . indentString		611097						
ANR	612313	Symbol	runInIndentContinuation		611097						
ANR	612314	Function	ASBeautifier :: ~ASBeautifier	268:0:10225:10866							
ANR	612315	FunctionDef	ASBeautifier :: ~ASBeautifier ()		612314	0					
ANR	612316	CompoundStatement		269:0:10255:10866	612314	0					
ANR	612317	ExpressionStatement	deleteBeautifierContainer ( waitingBeautifierStack )	270:1:10258:10307	612314	0	True				
ANR	612318	CallExpression	deleteBeautifierContainer ( waitingBeautifierStack )		612314	0					
ANR	612319	Callee	deleteBeautifierContainer		612314	0					
ANR	612320	Identifier	deleteBeautifierContainer		612314	0					
ANR	612321	ArgumentList	waitingBeautifierStack		612314	1					
ANR	612322	Argument	waitingBeautifierStack		612314	0					
ANR	612323	Identifier	waitingBeautifierStack		612314	0					
ANR	612324	ExpressionStatement	deleteBeautifierContainer ( activeBeautifierStack )	271:1:10310:10358	612314	1	True				
ANR	612325	CallExpression	deleteBeautifierContainer ( activeBeautifierStack )		612314	0					
ANR	612326	Callee	deleteBeautifierContainer		612314	0					
ANR	612327	Identifier	deleteBeautifierContainer		612314	0					
ANR	612328	ArgumentList	activeBeautifierStack		612314	1					
ANR	612329	Argument	activeBeautifierStack		612314	0					
ANR	612330	Identifier	activeBeautifierStack		612314	0					
ANR	612331	ExpressionStatement	deleteContainer ( waitingBeautifierStackLengthStack )	272:1:10361:10411	612314	2	True				
ANR	612332	CallExpression	deleteContainer ( waitingBeautifierStackLengthStack )		612314	0					
ANR	612333	Callee	deleteContainer		612314	0					
ANR	612334	Identifier	deleteContainer		612314	0					
ANR	612335	ArgumentList	waitingBeautifierStackLengthStack		612314	1					
ANR	612336	Argument	waitingBeautifierStackLengthStack		612314	0					
ANR	612337	Identifier	waitingBeautifierStackLengthStack		612314	0					
ANR	612338	ExpressionStatement	deleteContainer ( activeBeautifierStackLengthStack )	273:1:10414:10463	612314	3	True				
ANR	612339	CallExpression	deleteContainer ( activeBeautifierStackLengthStack )		612314	0					
ANR	612340	Callee	deleteContainer		612314	0					
ANR	612341	Identifier	deleteContainer		612314	0					
ANR	612342	ArgumentList	activeBeautifierStackLengthStack		612314	1					
ANR	612343	Argument	activeBeautifierStackLengthStack		612314	0					
ANR	612344	Identifier	activeBeautifierStackLengthStack		612314	0					
ANR	612345	ExpressionStatement	deleteContainer ( headerStack )	274:1:10466:10494	612314	4	True				
ANR	612346	CallExpression	deleteContainer ( headerStack )		612314	0					
ANR	612347	Callee	deleteContainer		612314	0					
ANR	612348	Identifier	deleteContainer		612314	0					
ANR	612349	ArgumentList	headerStack		612314	1					
ANR	612350	Argument	headerStack		612314	0					
ANR	612351	Identifier	headerStack		612314	0					
ANR	612352	ExpressionStatement	deleteTempStacksContainer ( tempStacks )	275:1:10497:10534	612314	5	True				
ANR	612353	CallExpression	deleteTempStacksContainer ( tempStacks )		612314	0					
ANR	612354	Callee	deleteTempStacksContainer		612314	0					
ANR	612355	Identifier	deleteTempStacksContainer		612314	0					
ANR	612356	ArgumentList	tempStacks		612314	1					
ANR	612357	Argument	tempStacks		612314	0					
ANR	612358	Identifier	tempStacks		612314	0					
ANR	612359	ExpressionStatement	deleteContainer ( squareBracketDepthStack )	276:1:10537:10577	612314	6	True				
ANR	612360	CallExpression	deleteContainer ( squareBracketDepthStack )		612314	0					
ANR	612361	Callee	deleteContainer		612314	0					
ANR	612362	Identifier	deleteContainer		612314	0					
ANR	612363	ArgumentList	squareBracketDepthStack		612314	1					
ANR	612364	Argument	squareBracketDepthStack		612314	0					
ANR	612365	Identifier	squareBracketDepthStack		612314	0					
ANR	612366	ExpressionStatement	deleteContainer ( blockStatementStack )	277:1:10580:10616	612314	7	True				
ANR	612367	CallExpression	deleteContainer ( blockStatementStack )		612314	0					
ANR	612368	Callee	deleteContainer		612314	0					
ANR	612369	Identifier	deleteContainer		612314	0					
ANR	612370	ArgumentList	blockStatementStack		612314	1					
ANR	612371	Argument	blockStatementStack		612314	0					
ANR	612372	Identifier	blockStatementStack		612314	0					
ANR	612373	ExpressionStatement	deleteContainer ( parenStatementStack )	278:1:10619:10655	612314	8	True				
ANR	612374	CallExpression	deleteContainer ( parenStatementStack )		612314	0					
ANR	612375	Callee	deleteContainer		612314	0					
ANR	612376	Identifier	deleteContainer		612314	0					
ANR	612377	ArgumentList	parenStatementStack		612314	1					
ANR	612378	Argument	parenStatementStack		612314	0					
ANR	612379	Identifier	parenStatementStack		612314	0					
ANR	612380	ExpressionStatement	deleteContainer ( braceBlockStateStack )	279:1:10658:10695	612314	9	True				
ANR	612381	CallExpression	deleteContainer ( braceBlockStateStack )		612314	0					
ANR	612382	Callee	deleteContainer		612314	0					
ANR	612383	Identifier	deleteContainer		612314	0					
ANR	612384	ArgumentList	braceBlockStateStack		612314	1					
ANR	612385	Argument	braceBlockStateStack		612314	0					
ANR	612386	Identifier	braceBlockStateStack		612314	0					
ANR	612387	ExpressionStatement	deleteContainer ( continuationIndentStack )	280:1:10698:10738	612314	10	True				
ANR	612388	CallExpression	deleteContainer ( continuationIndentStack )		612314	0					
ANR	612389	Callee	deleteContainer		612314	0					
ANR	612390	Identifier	deleteContainer		612314	0					
ANR	612391	ArgumentList	continuationIndentStack		612314	1					
ANR	612392	Argument	continuationIndentStack		612314	0					
ANR	612393	Identifier	continuationIndentStack		612314	0					
ANR	612394	ExpressionStatement	deleteContainer ( continuationIndentStackSizeStack )	281:1:10741:10790	612314	11	True				
ANR	612395	CallExpression	deleteContainer ( continuationIndentStackSizeStack )		612314	0					
ANR	612396	Callee	deleteContainer		612314	0					
ANR	612397	Identifier	deleteContainer		612314	0					
ANR	612398	ArgumentList	continuationIndentStackSizeStack		612314	1					
ANR	612399	Argument	continuationIndentStackSizeStack		612314	0					
ANR	612400	Identifier	continuationIndentStackSizeStack		612314	0					
ANR	612401	ExpressionStatement	deleteContainer ( parenIndentStack )	282:1:10793:10826	612314	12	True				
ANR	612402	CallExpression	deleteContainer ( parenIndentStack )		612314	0					
ANR	612403	Callee	deleteContainer		612314	0					
ANR	612404	Identifier	deleteContainer		612314	0					
ANR	612405	ArgumentList	parenIndentStack		612314	1					
ANR	612406	Argument	parenIndentStack		612314	0					
ANR	612407	Identifier	parenIndentStack		612314	0					
ANR	612408	ExpressionStatement	deleteContainer ( preprocIndentStack )	283:1:10829:10864	612314	13	True				
ANR	612409	CallExpression	deleteContainer ( preprocIndentStack )		612314	0					
ANR	612410	Callee	deleteContainer		612314	0					
ANR	612411	Identifier	deleteContainer		612314	0					
ANR	612412	ArgumentList	preprocIndentStack		612314	1					
ANR	612413	Argument	preprocIndentStack		612314	0					
ANR	612414	Identifier	preprocIndentStack		612314	0					
ANR	612415	Identifier	ASBeautifier :: ~ASBeautifier		612314	1					
ANR	612416	ParameterList			612314	2					
ANR	612417	CFGEntryNode	ENTRY		612314		True				
ANR	612418	CFGExitNode	EXIT		612314		True				
ANR	612419	Symbol	squareBracketDepthStack		612314						
ANR	612420	Symbol	continuationIndentStackSizeStack		612314						
ANR	612421	Symbol	preprocIndentStack		612314						
ANR	612422	Symbol	tempStacks		612314						
ANR	612423	Symbol	parenIndentStack		612314						
ANR	612424	Symbol	headerStack		612314						
ANR	612425	Symbol	waitingBeautifierStack		612314						
ANR	612426	Symbol	braceBlockStateStack		612314						
ANR	612427	Symbol	waitingBeautifierStackLengthStack		612314						
ANR	612428	Symbol	blockStatementStack		612314						
ANR	612429	Symbol	continuationIndentStack		612314						
ANR	612430	Symbol	activeBeautifierStack		612314						
ANR	612431	Symbol	activeBeautifierStackLengthStack		612314						
ANR	612432	Symbol	parenStatementStack		612314						
ANR	612433	Function	ASBeautifier :: init	297:0:11284:14859							
ANR	612434	FunctionDef	ASBeautifier :: init (ASSourceIterator * iter)		612433	0					
ANR	612435	CompoundStatement		298:0:11332:14859	612433	0					
ANR	612436	ExpressionStatement	sourceIterator = iter	299:1:11335:11356	612433	0	True				
ANR	612437	AssignmentExpression	sourceIterator = iter		612433	0		=			
ANR	612438	Identifier	sourceIterator		612433	0					
ANR	612439	Identifier	iter		612433	1					
ANR	612440	ExpressionStatement	initVectors ( )	300:1:11359:11372	612433	1	True				
ANR	612441	CallExpression	initVectors ( )		612433	0					
ANR	612442	Callee	initVectors		612433	0					
ANR	612443	Identifier	initVectors		612433	0					
ANR	612444	ArgumentList			612433	1					
ANR	612445	ExpressionStatement	ASBase :: init ( getFileType ( ) )	301:1:11375:11402	612433	2	True				
ANR	612446	CallExpression	ASBase :: init ( getFileType ( ) )		612433	0					
ANR	612447	Callee	ASBase :: init		612433	0					
ANR	612448	Identifier	ASBase :: init		612433	0					
ANR	612449	ArgumentList	getFileType ( )		612433	1					
ANR	612450	Argument	getFileType ( )		612433	0					
ANR	612451	CallExpression	getFileType ( )		612433	0					
ANR	612452	Callee	getFileType		612433	0					
ANR	612453	Identifier	getFileType		612433	0					
ANR	612454	ArgumentList			612433	1					
ANR	612455	ExpressionStatement	g_preprocessorCppExternCBrace = 0	302:1:11405:11438	612433	3	True				
ANR	612456	AssignmentExpression	g_preprocessorCppExternCBrace = 0		612433	0		=			
ANR	612457	Identifier	g_preprocessorCppExternCBrace		612433	0					
ANR	612458	PrimaryExpression	0		612433	1					
ANR	612459	Statement	initContainer	304:1:11442:11454	612433	4	True				
ANR	612460	Statement	(	304:14:11455:11455	612433	5	True				
ANR	612461	Statement	waitingBeautifierStack	304:15:11456:11477	612433	6	True				
ANR	612462	Statement	","	304:37:11478:11478	612433	7	True				
ANR	612463	Statement	new	304:39:11480:11482	612433	8	True				
ANR	612464	Statement	vector	304:43:11484:11489	612433	9	True				
ANR	612465	Statement	<	304:49:11490:11490	612433	10	True				
ANR	612466	Statement	ASBeautifier	304:50:11491:11502	612433	11	True				
ANR	612467	Statement	*	304:62:11503:11503	612433	12	True				
ANR	612468	Statement	>	304:63:11504:11504	612433	13	True				
ANR	612469	Statement	)	304:64:11505:11505	612433	14	True				
ANR	612470	ExpressionStatement		304:65:11506:11506	612433	15	True				
ANR	612471	Statement	initContainer	305:1:11509:11521	612433	16	True				
ANR	612472	Statement	(	305:14:11522:11522	612433	17	True				
ANR	612473	Statement	activeBeautifierStack	305:15:11523:11543	612433	18	True				
ANR	612474	Statement	","	305:36:11544:11544	612433	19	True				
ANR	612475	Statement	new	305:38:11546:11548	612433	20	True				
ANR	612476	Statement	vector	305:42:11550:11555	612433	21	True				
ANR	612477	Statement	<	305:48:11556:11556	612433	22	True				
ANR	612478	Statement	ASBeautifier	305:49:11557:11568	612433	23	True				
ANR	612479	Statement	*	305:61:11569:11569	612433	24	True				
ANR	612480	Statement	>	305:62:11570:11570	612433	25	True				
ANR	612481	Statement	)	305:63:11571:11571	612433	26	True				
ANR	612482	ExpressionStatement		305:64:11572:11572	612433	27	True				
ANR	612483	Statement	initContainer	307:1:11576:11588	612433	28	True				
ANR	612484	Statement	(	307:14:11589:11589	612433	29	True				
ANR	612485	Statement	waitingBeautifierStackLengthStack	307:15:11590:11622	612433	30	True				
ANR	612486	Statement	","	307:48:11623:11623	612433	31	True				
ANR	612487	Statement	new	307:50:11625:11627	612433	32	True				
ANR	612488	Statement	vector	307:54:11629:11634	612433	33	True				
ANR	612489	Statement	<	307:60:11635:11635	612433	34	True				
ANR	612490	Statement	int	307:61:11636:11638	612433	35	True				
ANR	612491	Statement	>	307:64:11639:11639	612433	36	True				
ANR	612492	Statement	)	307:65:11640:11640	612433	37	True				
ANR	612493	ExpressionStatement		307:66:11641:11641	612433	38	True				
ANR	612494	Statement	initContainer	308:1:11644:11656	612433	39	True				
ANR	612495	Statement	(	308:14:11657:11657	612433	40	True				
ANR	612496	Statement	activeBeautifierStackLengthStack	308:15:11658:11689	612433	41	True				
ANR	612497	Statement	","	308:47:11690:11690	612433	42	True				
ANR	612498	Statement	new	308:49:11692:11694	612433	43	True				
ANR	612499	Statement	vector	308:53:11696:11701	612433	44	True				
ANR	612500	Statement	<	308:59:11702:11702	612433	45	True				
ANR	612501	Statement	int	308:60:11703:11705	612433	46	True				
ANR	612502	Statement	>	308:63:11706:11706	612433	47	True				
ANR	612503	Statement	)	308:64:11707:11707	612433	48	True				
ANR	612504	ExpressionStatement		308:65:11708:11708	612433	49	True				
ANR	612505	Statement	initContainer	310:1:11712:11724	612433	50	True				
ANR	612506	Statement	(	310:14:11725:11725	612433	51	True				
ANR	612507	Statement	headerStack	310:15:11726:11736	612433	52	True				
ANR	612508	Statement	","	310:26:11737:11737	612433	53	True				
ANR	612509	Statement	new	310:28:11739:11741	612433	54	True				
ANR	612510	Statement	vector	310:32:11743:11748	612433	55	True				
ANR	612511	Statement	<	310:38:11749:11749	612433	56	True				
ANR	612512	Statement	const	310:39:11750:11754	612433	57	True				
ANR	612513	Statement	string	310:45:11756:11761	612433	58	True				
ANR	612514	Statement	*	310:51:11762:11762	612433	59	True				
ANR	612515	Statement	>	310:52:11763:11763	612433	60	True				
ANR	612516	Statement	)	310:53:11764:11764	612433	61	True				
ANR	612517	ExpressionStatement		310:54:11765:11765	612433	62	True				
ANR	612518	Statement	initTempStacksContainer	312:1:11769:11791	612433	63	True				
ANR	612519	Statement	(	312:24:11792:11792	612433	64	True				
ANR	612520	Statement	tempStacks	312:25:11793:11802	612433	65	True				
ANR	612521	Statement	","	312:35:11803:11803	612433	66	True				
ANR	612522	Statement	new	312:37:11805:11807	612433	67	True				
ANR	612523	Statement	vector	312:41:11809:11814	612433	68	True				
ANR	612524	Statement	<	312:47:11815:11815	612433	69	True				
ANR	612525	Statement	vector	312:48:11816:11821	612433	70	True				
ANR	612526	Statement	<	312:54:11822:11822	612433	71	True				
ANR	612527	Statement	const	312:55:11823:11827	612433	72	True				
ANR	612528	Statement	string	312:61:11829:11834	612433	73	True				
ANR	612529	Statement	*	312:67:11835:11835	612433	74	True				
ANR	612530	Statement	>	312:68:11836:11836	612433	75	True				
ANR	612531	Statement	*	312:69:11837:11837	612433	76	True				
ANR	612532	Statement	>	312:70:11838:11838	612433	77	True				
ANR	612533	Statement	)	312:71:11839:11839	612433	78	True				
ANR	612534	ExpressionStatement		312:72:11840:11840	612433	79	True				
ANR	612535	Statement	tempStacks	313:1:11843:11852	612433	80	True				
ANR	612536	Statement	->	313:11:11853:11854	612433	81	True				
ANR	612537	Statement	emplace_back	313:13:11855:11866	612433	82	True				
ANR	612538	Statement	(	313:25:11867:11867	612433	83	True				
ANR	612539	Statement	new	313:26:11868:11870	612433	84	True				
ANR	612540	Statement	vector	313:30:11872:11877	612433	85	True				
ANR	612541	Statement	<	313:36:11878:11878	612433	86	True				
ANR	612542	Statement	const	313:37:11879:11883	612433	87	True				
ANR	612543	Statement	string	313:43:11885:11890	612433	88	True				
ANR	612544	Statement	*	313:49:11891:11891	612433	89	True				
ANR	612545	Statement	>	313:50:11892:11892	612433	90	True				
ANR	612546	Statement	)	313:51:11893:11893	612433	91	True				
ANR	612547	ExpressionStatement		313:52:11894:11894	612433	92	True				
ANR	612548	Statement	initContainer	315:1:11898:11910	612433	93	True				
ANR	612549	Statement	(	315:14:11911:11911	612433	94	True				
ANR	612550	Statement	squareBracketDepthStack	315:15:11912:11934	612433	95	True				
ANR	612551	Statement	","	315:38:11935:11935	612433	96	True				
ANR	612552	Statement	new	315:40:11937:11939	612433	97	True				
ANR	612553	Statement	vector	315:44:11941:11946	612433	98	True				
ANR	612554	Statement	<	315:50:11947:11947	612433	99	True				
ANR	612555	Statement	int	315:51:11948:11950	612433	100	True				
ANR	612556	Statement	>	315:54:11951:11951	612433	101	True				
ANR	612557	Statement	)	315:55:11952:11952	612433	102	True				
ANR	612558	ExpressionStatement		315:56:11953:11953	612433	103	True				
ANR	612559	Statement	initContainer	316:1:11956:11968	612433	104	True				
ANR	612560	Statement	(	316:14:11969:11969	612433	105	True				
ANR	612561	Statement	blockStatementStack	316:15:11970:11988	612433	106	True				
ANR	612562	Statement	","	316:34:11989:11989	612433	107	True				
ANR	612563	Statement	new	316:36:11991:11993	612433	108	True				
ANR	612564	Statement	vector	316:40:11995:12000	612433	109	True				
ANR	612565	Statement	<	316:46:12001:12001	612433	110	True				
ANR	612566	Statement	bool	316:47:12002:12005	612433	111	True				
ANR	612567	Statement	>	316:51:12006:12006	612433	112	True				
ANR	612568	Statement	)	316:52:12007:12007	612433	113	True				
ANR	612569	ExpressionStatement		316:53:12008:12008	612433	114	True				
ANR	612570	Statement	initContainer	317:1:12011:12023	612433	115	True				
ANR	612571	Statement	(	317:14:12024:12024	612433	116	True				
ANR	612572	Statement	parenStatementStack	317:15:12025:12043	612433	117	True				
ANR	612573	Statement	","	317:34:12044:12044	612433	118	True				
ANR	612574	Statement	new	317:36:12046:12048	612433	119	True				
ANR	612575	Statement	vector	317:40:12050:12055	612433	120	True				
ANR	612576	Statement	<	317:46:12056:12056	612433	121	True				
ANR	612577	Statement	bool	317:47:12057:12060	612433	122	True				
ANR	612578	Statement	>	317:51:12061:12061	612433	123	True				
ANR	612579	Statement	)	317:52:12062:12062	612433	124	True				
ANR	612580	ExpressionStatement		317:53:12063:12063	612433	125	True				
ANR	612581	Statement	initContainer	318:1:12066:12078	612433	126	True				
ANR	612582	Statement	(	318:14:12079:12079	612433	127	True				
ANR	612583	Statement	braceBlockStateStack	318:15:12080:12099	612433	128	True				
ANR	612584	Statement	","	318:35:12100:12100	612433	129	True				
ANR	612585	Statement	new	318:37:12102:12104	612433	130	True				
ANR	612586	Statement	vector	318:41:12106:12111	612433	131	True				
ANR	612587	Statement	<	318:47:12112:12112	612433	132	True				
ANR	612588	Statement	bool	318:48:12113:12116	612433	133	True				
ANR	612589	Statement	>	318:52:12117:12117	612433	134	True				
ANR	612590	Statement	)	318:53:12118:12118	612433	135	True				
ANR	612591	ExpressionStatement		318:54:12119:12119	612433	136	True				
ANR	612592	ExpressionStatement	braceBlockStateStack -> push_back ( true )	319:1:12122:12159	612433	137	True				
ANR	612593	CallExpression	braceBlockStateStack -> push_back ( true )		612433	0					
ANR	612594	Callee	braceBlockStateStack -> push_back		612433	0					
ANR	612595	PtrMemberAccess	braceBlockStateStack -> push_back		612433	0					
ANR	612596	Identifier	braceBlockStateStack		612433	0					
ANR	612597	Identifier	push_back		612433	1					
ANR	612598	ArgumentList	true		612433	1					
ANR	612599	Argument	true		612433	0					
ANR	612600	Identifier	true		612433	0					
ANR	612601	Statement	initContainer	320:1:12162:12174	612433	138	True				
ANR	612602	Statement	(	320:14:12175:12175	612433	139	True				
ANR	612603	Statement	continuationIndentStack	320:15:12176:12198	612433	140	True				
ANR	612604	Statement	","	320:38:12199:12199	612433	141	True				
ANR	612605	Statement	new	320:40:12201:12203	612433	142	True				
ANR	612606	Statement	vector	320:44:12205:12210	612433	143	True				
ANR	612607	Statement	<	320:50:12211:12211	612433	144	True				
ANR	612608	Statement	int	320:51:12212:12214	612433	145	True				
ANR	612609	Statement	>	320:54:12215:12215	612433	146	True				
ANR	612610	Statement	)	320:55:12216:12216	612433	147	True				
ANR	612611	ExpressionStatement		320:56:12217:12217	612433	148	True				
ANR	612612	Statement	initContainer	321:1:12220:12232	612433	149	True				
ANR	612613	Statement	(	321:14:12233:12233	612433	150	True				
ANR	612614	Statement	continuationIndentStackSizeStack	321:15:12234:12265	612433	151	True				
ANR	612615	Statement	","	321:47:12266:12266	612433	152	True				
ANR	612616	Statement	new	321:49:12268:12270	612433	153	True				
ANR	612617	Statement	vector	321:53:12272:12277	612433	154	True				
ANR	612618	Statement	<	321:59:12278:12278	612433	155	True				
ANR	612619	Statement	int	321:60:12279:12281	612433	156	True				
ANR	612620	Statement	>	321:63:12282:12282	612433	157	True				
ANR	612621	Statement	)	321:64:12283:12283	612433	158	True				
ANR	612622	ExpressionStatement		321:65:12284:12284	612433	159	True				
ANR	612623	ExpressionStatement	continuationIndentStackSizeStack -> emplace_back ( 0 )	322:1:12287:12336	612433	160	True				
ANR	612624	CallExpression	continuationIndentStackSizeStack -> emplace_back ( 0 )		612433	0					
ANR	612625	Callee	continuationIndentStackSizeStack -> emplace_back		612433	0					
ANR	612626	PtrMemberAccess	continuationIndentStackSizeStack -> emplace_back		612433	0					
ANR	612627	Identifier	continuationIndentStackSizeStack		612433	0					
ANR	612628	Identifier	emplace_back		612433	1					
ANR	612629	ArgumentList	0		612433	1					
ANR	612630	Argument	0		612433	0					
ANR	612631	PrimaryExpression	0		612433	0					
ANR	612632	Statement	initContainer	323:1:12339:12351	612433	161	True				
ANR	612633	Statement	(	323:14:12352:12352	612433	162	True				
ANR	612634	Statement	parenIndentStack	323:15:12353:12368	612433	163	True				
ANR	612635	Statement	","	323:31:12369:12369	612433	164	True				
ANR	612636	Statement	new	323:33:12371:12373	612433	165	True				
ANR	612637	Statement	vector	323:37:12375:12380	612433	166	True				
ANR	612638	Statement	<	323:43:12381:12381	612433	167	True				
ANR	612639	Statement	int	323:44:12382:12384	612433	168	True				
ANR	612640	Statement	>	323:47:12385:12385	612433	169	True				
ANR	612641	Statement	)	323:48:12386:12386	612433	170	True				
ANR	612642	ExpressionStatement		323:49:12387:12387	612433	171	True				
ANR	612643	Statement	initContainer	324:1:12390:12402	612433	172	True				
ANR	612644	Statement	(	324:14:12403:12403	612433	173	True				
ANR	612645	Statement	preprocIndentStack	324:15:12404:12421	612433	174	True				
ANR	612646	Statement	","	324:33:12422:12422	612433	175	True				
ANR	612647	Statement	new	324:35:12424:12426	612433	176	True				
ANR	612648	Statement	vector	324:39:12428:12433	612433	177	True				
ANR	612649	Statement	<	324:45:12434:12434	612433	178	True				
ANR	612650	Statement	pair	324:46:12435:12438	612433	179	True				
ANR	612651	Statement	<	324:50:12439:12439	612433	180	True				
ANR	612652	Statement	int	324:51:12440:12442	612433	181	True				
ANR	612653	Statement	","	324:54:12443:12443	612433	182	True				
ANR	612654	Statement	int	324:56:12445:12447	612433	183	True				
ANR	612655	Statement	>	324:59:12448:12448	612433	184	True				
ANR	612656	Statement	>	324:61:12450:12450	612433	185	True				
ANR	612657	Statement	)	324:62:12451:12451	612433	186	True				
ANR	612658	ExpressionStatement		324:63:12452:12452	612433	187	True				
ANR	612659	ExpressionStatement	previousLastLineHeader = nullptr	326:1:12456:12488	612433	188	True				
ANR	612660	AssignmentExpression	previousLastLineHeader = nullptr		612433	0		=			
ANR	612661	Identifier	previousLastLineHeader		612433	0					
ANR	612662	Identifier	nullptr		612433	1					
ANR	612663	ExpressionStatement	currentHeader = nullptr	327:1:12491:12514	612433	189	True				
ANR	612664	AssignmentExpression	currentHeader = nullptr		612433	0		=			
ANR	612665	Identifier	currentHeader		612433	0					
ANR	612666	Identifier	nullptr		612433	1					
ANR	612667	ExpressionStatement	isInQuote = false	329:1:12518:12535	612433	190	True				
ANR	612668	AssignmentExpression	isInQuote = false		612433	0		=			
ANR	612669	Identifier	isInQuote		612433	0					
ANR	612670	Identifier	false		612433	1					
ANR	612671	ExpressionStatement	isInVerbatimQuote = false	330:1:12538:12563	612433	191	True				
ANR	612672	AssignmentExpression	isInVerbatimQuote = false		612433	0		=			
ANR	612673	Identifier	isInVerbatimQuote		612433	0					
ANR	612674	Identifier	false		612433	1					
ANR	612675	ExpressionStatement	haveLineContinuationChar = false	331:1:12566:12598	612433	192	True				
ANR	612676	AssignmentExpression	haveLineContinuationChar = false		612433	0		=			
ANR	612677	Identifier	haveLineContinuationChar		612433	0					
ANR	612678	Identifier	false		612433	1					
ANR	612679	ExpressionStatement	isInAsm = false	332:1:12601:12616	612433	193	True				
ANR	612680	AssignmentExpression	isInAsm = false		612433	0		=			
ANR	612681	Identifier	isInAsm		612433	0					
ANR	612682	Identifier	false		612433	1					
ANR	612683	ExpressionStatement	isInAsmOneLine = false	333:1:12619:12641	612433	194	True				
ANR	612684	AssignmentExpression	isInAsmOneLine = false		612433	0		=			
ANR	612685	Identifier	isInAsmOneLine		612433	0					
ANR	612686	Identifier	false		612433	1					
ANR	612687	ExpressionStatement	isInAsmBlock = false	334:1:12644:12664	612433	195	True				
ANR	612688	AssignmentExpression	isInAsmBlock = false		612433	0		=			
ANR	612689	Identifier	isInAsmBlock		612433	0					
ANR	612690	Identifier	false		612433	1					
ANR	612691	ExpressionStatement	isInComment = false	335:1:12667:12686	612433	196	True				
ANR	612692	AssignmentExpression	isInComment = false		612433	0		=			
ANR	612693	Identifier	isInComment		612433	0					
ANR	612694	Identifier	false		612433	1					
ANR	612695	ExpressionStatement	isInPreprocessorComment = false	336:1:12689:12720	612433	197	True				
ANR	612696	AssignmentExpression	isInPreprocessorComment = false		612433	0		=			
ANR	612697	Identifier	isInPreprocessorComment		612433	0					
ANR	612698	Identifier	false		612433	1					
ANR	612699	ExpressionStatement	isInRunInComment = false	337:1:12723:12747	612433	198	True				
ANR	612700	AssignmentExpression	isInRunInComment = false		612433	0		=			
ANR	612701	Identifier	isInRunInComment		612433	0					
ANR	612702	Identifier	false		612433	1					
ANR	612703	ExpressionStatement	isContinuation = false	338:1:12750:12772	612433	199	True				
ANR	612704	AssignmentExpression	isContinuation = false		612433	0		=			
ANR	612705	Identifier	isContinuation		612433	0					
ANR	612706	Identifier	false		612433	1					
ANR	612707	ExpressionStatement	isInCase = false	339:1:12775:12791	612433	200	True				
ANR	612708	AssignmentExpression	isInCase = false		612433	0		=			
ANR	612709	Identifier	isInCase		612433	0					
ANR	612710	Identifier	false		612433	1					
ANR	612711	ExpressionStatement	isInQuestion = false	340:1:12794:12814	612433	201	True				
ANR	612712	AssignmentExpression	isInQuestion = false		612433	0		=			
ANR	612713	Identifier	isInQuestion		612433	0					
ANR	612714	Identifier	false		612433	1					
ANR	612715	ExpressionStatement	isIndentModeOff = false	341:1:12817:12840	612433	202	True				
ANR	612716	AssignmentExpression	isIndentModeOff = false		612433	0		=			
ANR	612717	Identifier	isIndentModeOff		612433	0					
ANR	612718	Identifier	false		612433	1					
ANR	612719	ExpressionStatement	isInClassHeader = false	342:1:12843:12866	612433	203	True				
ANR	612720	AssignmentExpression	isInClassHeader = false		612433	0		=			
ANR	612721	Identifier	isInClassHeader		612433	0					
ANR	612722	Identifier	false		612433	1					
ANR	612723	ExpressionStatement	isInClassHeaderTab = false	343:1:12869:12895	612433	204	True				
ANR	612724	AssignmentExpression	isInClassHeaderTab = false		612433	0		=			
ANR	612725	Identifier	isInClassHeaderTab		612433	0					
ANR	612726	Identifier	false		612433	1					
ANR	612727	ExpressionStatement	isInClassInitializer = false	344:1:12898:12926	612433	205	True				
ANR	612728	AssignmentExpression	isInClassInitializer = false		612433	0		=			
ANR	612729	Identifier	isInClassInitializer		612433	0					
ANR	612730	Identifier	false		612433	1					
ANR	612731	ExpressionStatement	isInClass = false	345:1:12929:12946	612433	206	True				
ANR	612732	AssignmentExpression	isInClass = false		612433	0		=			
ANR	612733	Identifier	isInClass		612433	0					
ANR	612734	Identifier	false		612433	1					
ANR	612735	ExpressionStatement	isInObjCMethodDefinition = false	346:1:12949:12981	612433	207	True				
ANR	612736	AssignmentExpression	isInObjCMethodDefinition = false		612433	0		=			
ANR	612737	Identifier	isInObjCMethodDefinition		612433	0					
ANR	612738	Identifier	false		612433	1					
ANR	612739	ExpressionStatement	isInObjCMethodCall = false	347:1:12984:13010	612433	208	True				
ANR	612740	AssignmentExpression	isInObjCMethodCall = false		612433	0		=			
ANR	612741	Identifier	isInObjCMethodCall		612433	0					
ANR	612742	Identifier	false		612433	1					
ANR	612743	ExpressionStatement	isInObjCMethodCallFirst = false	348:1:13013:13044	612433	209	True				
ANR	612744	AssignmentExpression	isInObjCMethodCallFirst = false		612433	0		=			
ANR	612745	Identifier	isInObjCMethodCallFirst		612433	0					
ANR	612746	Identifier	false		612433	1					
ANR	612747	ExpressionStatement	isImmediatelyPostObjCMethodDefinition = false	349:1:13047:13092	612433	210	True				
ANR	612748	AssignmentExpression	isImmediatelyPostObjCMethodDefinition = false		612433	0		=			
ANR	612749	Identifier	isImmediatelyPostObjCMethodDefinition		612433	0					
ANR	612750	Identifier	false		612433	1					
ANR	612751	ExpressionStatement	isImmediatelyPostObjCMethodCall = false	350:1:13095:13134	612433	211	True				
ANR	612752	AssignmentExpression	isImmediatelyPostObjCMethodCall = false		612433	0		=			
ANR	612753	Identifier	isImmediatelyPostObjCMethodCall		612433	0					
ANR	612754	Identifier	false		612433	1					
ANR	612755	ExpressionStatement	isInIndentablePreprocBlock = false	351:1:13137:13171	612433	212	True				
ANR	612756	AssignmentExpression	isInIndentablePreprocBlock = false		612433	0		=			
ANR	612757	Identifier	isInIndentablePreprocBlock		612433	0					
ANR	612758	Identifier	false		612433	1					
ANR	612759	ExpressionStatement	isInObjCInterface = false	352:1:13174:13199	612433	213	True				
ANR	612760	AssignmentExpression	isInObjCInterface = false		612433	0		=			
ANR	612761	Identifier	isInObjCInterface		612433	0					
ANR	612762	Identifier	false		612433	1					
ANR	612763	ExpressionStatement	isInEnum = false	353:1:13202:13218	612433	214	True				
ANR	612764	AssignmentExpression	isInEnum = false		612433	0		=			
ANR	612765	Identifier	isInEnum		612433	0					
ANR	612766	Identifier	false		612433	1					
ANR	612767	ExpressionStatement	isInEnumTypeID = false	354:1:13221:13243	612433	215	True				
ANR	612768	AssignmentExpression	isInEnumTypeID = false		612433	0		=			
ANR	612769	Identifier	isInEnumTypeID		612433	0					
ANR	612770	Identifier	false		612433	1					
ANR	612771	ExpressionStatement	isInLet = false	355:1:13246:13261	612433	216	True				
ANR	612772	AssignmentExpression	isInLet = false		612433	0		=			
ANR	612773	Identifier	isInLet		612433	0					
ANR	612774	Identifier	false		612433	1					
ANR	612775	ExpressionStatement	isInHeader = false	356:1:13264:13282	612433	217	True				
ANR	612776	AssignmentExpression	isInHeader = false		612433	0		=			
ANR	612777	Identifier	isInHeader		612433	0					
ANR	612778	Identifier	false		612433	1					
ANR	612779	ExpressionStatement	isInTemplate = false	357:1:13285:13305	612433	218	True				
ANR	612780	AssignmentExpression	isInTemplate = false		612433	0		=			
ANR	612781	Identifier	isInTemplate		612433	0					
ANR	612782	Identifier	false		612433	1					
ANR	612783	ExpressionStatement	isInConditional = false	358:1:13308:13331	612433	219	True				
ANR	612784	AssignmentExpression	isInConditional = false		612433	0		=			
ANR	612785	Identifier	isInConditional		612433	0					
ANR	612786	Identifier	false		612433	1					
ANR	612787	ExpressionStatement	indentCount = 0	360:1:13335:13350	612433	220	True				
ANR	612788	AssignmentExpression	indentCount = 0		612433	0		=			
ANR	612789	Identifier	indentCount		612433	0					
ANR	612790	PrimaryExpression	0		612433	1					
ANR	612791	ExpressionStatement	spaceIndentCount = 0	361:1:13353:13373	612433	221	True				
ANR	612792	AssignmentExpression	spaceIndentCount = 0		612433	0		=			
ANR	612793	Identifier	spaceIndentCount		612433	0					
ANR	612794	PrimaryExpression	0		612433	1					
ANR	612795	ExpressionStatement	spaceIndentObjCMethodAlignment = 0	362:1:13376:13410	612433	222	True				
ANR	612796	AssignmentExpression	spaceIndentObjCMethodAlignment = 0		612433	0		=			
ANR	612797	Identifier	spaceIndentObjCMethodAlignment		612433	0					
ANR	612798	PrimaryExpression	0		612433	1					
ANR	612799	ExpressionStatement	bracePosObjCMethodAlignment = 0	363:1:13413:13444	612433	223	True				
ANR	612800	AssignmentExpression	bracePosObjCMethodAlignment = 0		612433	0		=			
ANR	612801	Identifier	bracePosObjCMethodAlignment		612433	0					
ANR	612802	PrimaryExpression	0		612433	1					
ANR	612803	ExpressionStatement	colonIndentObjCMethodAlignment = 0	364:1:13447:13481	612433	224	True				
ANR	612804	AssignmentExpression	colonIndentObjCMethodAlignment = 0		612433	0		=			
ANR	612805	Identifier	colonIndentObjCMethodAlignment		612433	0					
ANR	612806	PrimaryExpression	0		612433	1					
ANR	612807	ExpressionStatement	lineOpeningBlocksNum = 0	365:1:13484:13508	612433	225	True				
ANR	612808	AssignmentExpression	lineOpeningBlocksNum = 0		612433	0		=			
ANR	612809	Identifier	lineOpeningBlocksNum		612433	0					
ANR	612810	PrimaryExpression	0		612433	1					
ANR	612811	ExpressionStatement	lineClosingBlocksNum = 0	366:1:13511:13535	612433	226	True				
ANR	612812	AssignmentExpression	lineClosingBlocksNum = 0		612433	0		=			
ANR	612813	Identifier	lineClosingBlocksNum		612433	0					
ANR	612814	PrimaryExpression	0		612433	1					
ANR	612815	ExpressionStatement	templateDepth = 0	367:1:13538:13555	612433	227	True				
ANR	612816	AssignmentExpression	templateDepth = 0		612433	0		=			
ANR	612817	Identifier	templateDepth		612433	0					
ANR	612818	PrimaryExpression	0		612433	1					
ANR	612819	ExpressionStatement	squareBracketCount = 0	368:1:13558:13580	612433	228	True				
ANR	612820	AssignmentExpression	squareBracketCount = 0		612433	0		=			
ANR	612821	Identifier	squareBracketCount		612433	0					
ANR	612822	PrimaryExpression	0		612433	1					
ANR	612823	ExpressionStatement	parenDepth = 0	369:1:13583:13597	612433	229	True				
ANR	612824	AssignmentExpression	parenDepth = 0		612433	0		=			
ANR	612825	Identifier	parenDepth		612433	0					
ANR	612826	PrimaryExpression	0		612433	1					
ANR	612827	ExpressionStatement	blockTabCount = 0	370:1:13600:13617	612433	230	True				
ANR	612828	AssignmentExpression	blockTabCount = 0		612433	0		=			
ANR	612829	Identifier	blockTabCount		612433	0					
ANR	612830	PrimaryExpression	0		612433	1					
ANR	612831	ExpressionStatement	prevFinalLineSpaceIndentCount = 0	371:1:13620:13653	612433	231	True				
ANR	612832	AssignmentExpression	prevFinalLineSpaceIndentCount = 0		612433	0		=			
ANR	612833	Identifier	prevFinalLineSpaceIndentCount		612433	0					
ANR	612834	PrimaryExpression	0		612433	1					
ANR	612835	ExpressionStatement	prevFinalLineIndentCount = 0	372:1:13656:13684	612433	232	True				
ANR	612836	AssignmentExpression	prevFinalLineIndentCount = 0		612433	0		=			
ANR	612837	Identifier	prevFinalLineIndentCount		612433	0					
ANR	612838	PrimaryExpression	0		612433	1					
ANR	612839	ExpressionStatement	defineIndentCount = 0	373:1:13687:13708	612433	233	True				
ANR	612840	AssignmentExpression	defineIndentCount = 0		612433	0		=			
ANR	612841	Identifier	defineIndentCount		612433	0					
ANR	612842	PrimaryExpression	0		612433	1					
ANR	612843	ExpressionStatement	preprocBlockIndent = 0	374:1:13711:13733	612433	234	True				
ANR	612844	AssignmentExpression	preprocBlockIndent = 0		612433	0		=			
ANR	612845	Identifier	preprocBlockIndent		612433	0					
ANR	612846	PrimaryExpression	0		612433	1					
ANR	612847	ExpressionStatement	prevNonSpaceCh = '{'	375:1:13736:13756	612433	235	True				
ANR	612848	AssignmentExpression	prevNonSpaceCh = '{'		612433	0		=			
ANR	612849	Identifier	prevNonSpaceCh		612433	0					
ANR	612850	PrimaryExpression	'{'		612433	1					
ANR	612851	ExpressionStatement	currentNonSpaceCh = '{'	376:1:13759:13782	612433	236	True				
ANR	612852	AssignmentExpression	currentNonSpaceCh = '{'		612433	0		=			
ANR	612853	Identifier	currentNonSpaceCh		612433	0					
ANR	612854	PrimaryExpression	'{'		612433	1					
ANR	612855	ExpressionStatement	prevNonLegalCh = '{'	377:1:13785:13805	612433	237	True				
ANR	612856	AssignmentExpression	prevNonLegalCh = '{'		612433	0		=			
ANR	612857	Identifier	prevNonLegalCh		612433	0					
ANR	612858	PrimaryExpression	'{'		612433	1					
ANR	612859	ExpressionStatement	currentNonLegalCh = '{'	378:1:13808:13831	612433	238	True				
ANR	612860	AssignmentExpression	currentNonLegalCh = '{'		612433	0		=			
ANR	612861	Identifier	currentNonLegalCh		612433	0					
ANR	612862	PrimaryExpression	'{'		612433	1					
ANR	612863	ExpressionStatement	quoteChar = ' '	379:1:13834:13849	612433	239	True				
ANR	612864	AssignmentExpression	quoteChar = ' '		612433	0		=			
ANR	612865	Identifier	quoteChar		612433	0					
ANR	612866	PrimaryExpression	' '		612433	1					
ANR	612867	ExpressionStatement	probationHeader = nullptr	380:1:13852:13877	612433	240	True				
ANR	612868	AssignmentExpression	probationHeader = nullptr		612433	0		=			
ANR	612869	Identifier	probationHeader		612433	0					
ANR	612870	Identifier	nullptr		612433	1					
ANR	612871	ExpressionStatement	lastLineHeader = nullptr	381:1:13880:13904	612433	241	True				
ANR	612872	AssignmentExpression	lastLineHeader = nullptr		612433	0		=			
ANR	612873	Identifier	lastLineHeader		612433	0					
ANR	612874	Identifier	nullptr		612433	1					
ANR	612875	ExpressionStatement	backslashEndsPrevLine = false	382:1:13907:13936	612433	242	True				
ANR	612876	AssignmentExpression	backslashEndsPrevLine = false		612433	0		=			
ANR	612877	Identifier	backslashEndsPrevLine		612433	0					
ANR	612878	Identifier	false		612433	1					
ANR	612879	ExpressionStatement	lineOpensWithLineComment = false	383:1:13939:13971	612433	243	True				
ANR	612880	AssignmentExpression	lineOpensWithLineComment = false		612433	0		=			
ANR	612881	Identifier	lineOpensWithLineComment		612433	0					
ANR	612882	Identifier	false		612433	1					
ANR	612883	ExpressionStatement	lineOpensWithComment = false	384:1:13974:14002	612433	244	True				
ANR	612884	AssignmentExpression	lineOpensWithComment = false		612433	0		=			
ANR	612885	Identifier	lineOpensWithComment		612433	0					
ANR	612886	Identifier	false		612433	1					
ANR	612887	ExpressionStatement	lineStartsInComment = false	385:1:14005:14032	612433	245	True				
ANR	612888	AssignmentExpression	lineStartsInComment = false		612433	0		=			
ANR	612889	Identifier	lineStartsInComment		612433	0					
ANR	612890	Identifier	false		612433	1					
ANR	612891	ExpressionStatement	isInDefine = false	386:1:14035:14053	612433	246	True				
ANR	612892	AssignmentExpression	isInDefine = false		612433	0		=			
ANR	612893	Identifier	isInDefine		612433	0					
ANR	612894	Identifier	false		612433	1					
ANR	612895	ExpressionStatement	isInDefineDefinition = false	387:1:14056:14084	612433	247	True				
ANR	612896	AssignmentExpression	isInDefineDefinition = false		612433	0		=			
ANR	612897	Identifier	isInDefineDefinition		612433	0					
ANR	612898	Identifier	false		612433	1					
ANR	612899	ExpressionStatement	lineCommentNoBeautify = false	388:1:14087:14116	612433	248	True				
ANR	612900	AssignmentExpression	lineCommentNoBeautify = false		612433	0		=			
ANR	612901	Identifier	lineCommentNoBeautify		612433	0					
ANR	612902	Identifier	false		612433	1					
ANR	612903	ExpressionStatement	isElseHeaderIndent = false	389:1:14119:14145	612433	249	True				
ANR	612904	AssignmentExpression	isElseHeaderIndent = false		612433	0		=			
ANR	612905	Identifier	isElseHeaderIndent		612433	0					
ANR	612906	Identifier	false		612433	1					
ANR	612907	ExpressionStatement	isCaseHeaderCommentIndent = false	390:1:14148:14181	612433	250	True				
ANR	612908	AssignmentExpression	isCaseHeaderCommentIndent = false		612433	0		=			
ANR	612909	Identifier	isCaseHeaderCommentIndent		612433	0					
ANR	612910	Identifier	false		612433	1					
ANR	612911	ExpressionStatement	blockCommentNoIndent = false	391:1:14184:14212	612433	251	True				
ANR	612912	AssignmentExpression	blockCommentNoIndent = false		612433	0		=			
ANR	612913	Identifier	blockCommentNoIndent		612433	0					
ANR	612914	Identifier	false		612433	1					
ANR	612915	ExpressionStatement	blockCommentNoBeautify = false	392:1:14215:14245	612433	252	True				
ANR	612916	AssignmentExpression	blockCommentNoBeautify = false		612433	0		=			
ANR	612917	Identifier	blockCommentNoBeautify		612433	0					
ANR	612918	Identifier	false		612433	1					
ANR	612919	ExpressionStatement	previousLineProbationTab = false	393:1:14248:14280	612433	253	True				
ANR	612920	AssignmentExpression	previousLineProbationTab = false		612433	0		=			
ANR	612921	Identifier	previousLineProbationTab		612433	0					
ANR	612922	Identifier	false		612433	1					
ANR	612923	ExpressionStatement	lineBeginsWithOpenBrace = false	394:1:14283:14314	612433	254	True				
ANR	612924	AssignmentExpression	lineBeginsWithOpenBrace = false		612433	0		=			
ANR	612925	Identifier	lineBeginsWithOpenBrace		612433	0					
ANR	612926	Identifier	false		612433	1					
ANR	612927	ExpressionStatement	lineBeginsWithCloseBrace = false	395:1:14317:14349	612433	255	True				
ANR	612928	AssignmentExpression	lineBeginsWithCloseBrace = false		612433	0		=			
ANR	612929	Identifier	lineBeginsWithCloseBrace		612433	0					
ANR	612930	Identifier	false		612433	1					
ANR	612931	ExpressionStatement	lineBeginsWithComma = false	396:1:14352:14379	612433	256	True				
ANR	612932	AssignmentExpression	lineBeginsWithComma = false		612433	0		=			
ANR	612933	Identifier	lineBeginsWithComma		612433	0					
ANR	612934	Identifier	false		612433	1					
ANR	612935	ExpressionStatement	lineIsCommentOnly = false	397:1:14382:14407	612433	257	True				
ANR	612936	AssignmentExpression	lineIsCommentOnly = false		612433	0		=			
ANR	612937	Identifier	lineIsCommentOnly		612433	0					
ANR	612938	Identifier	false		612433	1					
ANR	612939	ExpressionStatement	lineIsLineCommentOnly = false	398:1:14410:14439	612433	258	True				
ANR	612940	AssignmentExpression	lineIsLineCommentOnly = false		612433	0		=			
ANR	612941	Identifier	lineIsLineCommentOnly		612433	0					
ANR	612942	Identifier	false		612433	1					
ANR	612943	ExpressionStatement	shouldIndentBracedLine = true	399:1:14442:14471	612433	259	True				
ANR	612944	AssignmentExpression	shouldIndentBracedLine = true		612433	0		=			
ANR	612945	Identifier	shouldIndentBracedLine		612433	0					
ANR	612946	Identifier	true		612433	1					
ANR	612947	ExpressionStatement	isInSwitch = false	400:1:14474:14492	612433	260	True				
ANR	612948	AssignmentExpression	isInSwitch = false		612433	0		=			
ANR	612949	Identifier	isInSwitch		612433	0					
ANR	612950	Identifier	false		612433	1					
ANR	612951	ExpressionStatement	foundPreCommandHeader = false	401:1:14495:14524	612433	261	True				
ANR	612952	AssignmentExpression	foundPreCommandHeader = false		612433	0		=			
ANR	612953	Identifier	foundPreCommandHeader		612433	0					
ANR	612954	Identifier	false		612433	1					
ANR	612955	ExpressionStatement	foundPreCommandMacro = false	402:1:14527:14555	612433	262	True				
ANR	612956	AssignmentExpression	foundPreCommandMacro = false		612433	0		=			
ANR	612957	Identifier	foundPreCommandMacro		612433	0					
ANR	612958	Identifier	false		612433	1					
ANR	612959	ExpressionStatement	isNonInStatementArray = false	404:1:14559:14588	612433	263	True				
ANR	612960	AssignmentExpression	isNonInStatementArray = false		612433	0		=			
ANR	612961	Identifier	isNonInStatementArray		612433	0					
ANR	612962	Identifier	false		612433	1					
ANR	612963	ExpressionStatement	isSharpAccessor = false	405:1:14591:14614	612433	264	True				
ANR	612964	AssignmentExpression	isSharpAccessor = false		612433	0		=			
ANR	612965	Identifier	isSharpAccessor		612433	0					
ANR	612966	Identifier	false		612433	1					
ANR	612967	ExpressionStatement	isSharpDelegate = false	406:1:14617:14640	612433	265	True				
ANR	612968	AssignmentExpression	isSharpDelegate = false		612433	0		=			
ANR	612969	Identifier	isSharpDelegate		612433	0					
ANR	612970	Identifier	false		612433	1					
ANR	612971	ExpressionStatement	isInExternC = false	407:1:14643:14662	612433	266	True				
ANR	612972	AssignmentExpression	isInExternC = false		612433	0		=			
ANR	612973	Identifier	isInExternC		612433	0					
ANR	612974	Identifier	false		612433	1					
ANR	612975	ExpressionStatement	isInBeautifySQL = false	408:1:14665:14688	612433	267	True				
ANR	612976	AssignmentExpression	isInBeautifySQL = false		612433	0		=			
ANR	612977	Identifier	isInBeautifySQL		612433	0					
ANR	612978	Identifier	false		612433	1					
ANR	612979	ExpressionStatement	isInIndentableStruct = false	409:1:14691:14719	612433	268	True				
ANR	612980	AssignmentExpression	isInIndentableStruct = false		612433	0		=			
ANR	612981	Identifier	isInIndentableStruct		612433	0					
ANR	612982	Identifier	false		612433	1					
ANR	612983	ExpressionStatement	isInIndentablePreproc = false	410:1:14722:14751	612433	269	True				
ANR	612984	AssignmentExpression	isInIndentablePreproc = false		612433	0		=			
ANR	612985	Identifier	isInIndentablePreproc		612433	0					
ANR	612986	Identifier	false		612433	1					
ANR	612987	ExpressionStatement	inLineNumber = 0	411:1:14754:14770	612433	270	True				
ANR	612988	AssignmentExpression	inLineNumber = 0		612433	0		=			
ANR	612989	Identifier	inLineNumber		612433	0					
ANR	612990	PrimaryExpression	0		612433	1					
ANR	612991	ExpressionStatement	runInIndentContinuation = 0	412:1:14773:14800	612433	271	True				
ANR	612992	AssignmentExpression	runInIndentContinuation = 0		612433	0		=			
ANR	612993	Identifier	runInIndentContinuation		612433	0					
ANR	612994	PrimaryExpression	0		612433	1					
ANR	612995	ExpressionStatement	nonInStatementBrace = 0	413:1:14803:14826	612433	272	True				
ANR	612996	AssignmentExpression	nonInStatementBrace = 0		612433	0		=			
ANR	612997	Identifier	nonInStatementBrace		612433	0					
ANR	612998	PrimaryExpression	0		612433	1					
ANR	612999	ExpressionStatement	objCColonAlignSubsequent = 0	414:1:14829:14857	612433	273	True				
ANR	613000	AssignmentExpression	objCColonAlignSubsequent = 0		612433	0		=			
ANR	613001	Identifier	objCColonAlignSubsequent		612433	0					
ANR	613002	PrimaryExpression	0		612433	1					
ANR	613003	ReturnType	void		612433	1					
ANR	613004	Identifier	ASBeautifier :: init		612433	2					
ANR	613005	ParameterList	ASSourceIterator * iter		612433	3					
ANR	613006	Parameter	ASSourceIterator * iter	297:24:11308:11329	612433	0	True				
ANR	613007	ParameterType	ASSourceIterator *		612433	0					
ANR	613008	Identifier	iter		612433	1					
ANR	613009	CFGEntryNode	ENTRY		612433		True				
ANR	613010	CFGExitNode	EXIT		612433		True				
ANR	613011	Symbol	isInAsmBlock		612433						
ANR	613012	Symbol	lineOpensWithLineComment		612433						
ANR	613013	Symbol	continuationIndentStackSizeStack		612433						
ANR	613014	Symbol	isInVerbatimQuote		612433						
ANR	613015	Symbol	isContinuation		612433						
ANR	613016	Symbol	lineOpensWithComment		612433						
ANR	613017	Symbol	isInQuote		612433						
ANR	613018	Symbol	isInTemplate		612433						
ANR	613019	Symbol	spaceIndentObjCMethodAlignment		612433						
ANR	613020	Symbol	lineIsLineCommentOnly		612433						
ANR	613021	Symbol	parenDepth		612433						
ANR	613022	Symbol	isInEnum		612433						
ANR	613023	Symbol	g_preprocessorCppExternCBrace		612433						
ANR	613024	Symbol	braceBlockStateStack		612433						
ANR	613025	Symbol	previousLastLineHeader		612433						
ANR	613026	Symbol	isInEnumTypeID		612433						
ANR	613027	Symbol	currentNonLegalCh		612433						
ANR	613028	Symbol	isIndentModeOff		612433						
ANR	613029	Symbol	isInComment		612433						
ANR	613030	Symbol	sourceIterator		612433						
ANR	613031	Symbol	colonIndentObjCMethodAlignment		612433						
ANR	613032	Symbol	blockTabCount		612433						
ANR	613033	Symbol	isInDefineDefinition		612433						
ANR	613034	Symbol	lineBeginsWithCloseBrace		612433						
ANR	613035	Symbol	lineBeginsWithComma		612433						
ANR	613036	Symbol	templateDepth		612433						
ANR	613037	Symbol	iter		612433						
ANR	613038	Symbol	isInConditional		612433						
ANR	613039	Symbol	objCColonAlignSubsequent		612433						
ANR	613040	Symbol	isInRunInComment		612433						
ANR	613041	Symbol	isInClassInitializer		612433						
ANR	613042	Symbol	lineClosingBlocksNum		612433						
ANR	613043	Symbol	blockCommentNoIndent		612433						
ANR	613044	Symbol	lineIsCommentOnly		612433						
ANR	613045	Symbol	spaceIndentCount		612433						
ANR	613046	Symbol	isInAsmOneLine		612433						
ANR	613047	Symbol	inLineNumber		612433						
ANR	613048	Symbol	true		612433						
ANR	613049	Symbol	isInCase		612433						
ANR	613050	Symbol	isSharpAccessor		612433						
ANR	613051	Symbol	isInQuestion		612433						
ANR	613052	Symbol	isInIndentablePreprocBlock		612433						
ANR	613053	Symbol	isCaseHeaderCommentIndent		612433						
ANR	613054	Symbol	nullptr		612433						
ANR	613055	Symbol	isInClass		612433						
ANR	613056	Symbol	prevNonLegalCh		612433						
ANR	613057	Symbol	nonInStatementBrace		612433						
ANR	613058	Symbol	defineIndentCount		612433						
ANR	613059	Symbol	isInExternC		612433						
ANR	613060	Symbol	isInObjCMethodCall		612433						
ANR	613061	Symbol	isInDefine		612433						
ANR	613062	Symbol	currentNonSpaceCh		612433						
ANR	613063	Symbol	isInHeader		612433						
ANR	613064	Symbol	isSharpDelegate		612433						
ANR	613065	Symbol	blockCommentNoBeautify		612433						
ANR	613066	Symbol	foundPreCommandMacro		612433						
ANR	613067	Symbol	prevFinalLineSpaceIndentCount		612433						
ANR	613068	Symbol	lineCommentNoBeautify		612433						
ANR	613069	Symbol	isInIndentableStruct		612433						
ANR	613070	Symbol	lineBeginsWithOpenBrace		612433						
ANR	613071	Symbol	isInBeautifySQL		612433						
ANR	613072	Symbol	getFileType		612433						
ANR	613073	Symbol	isInObjCMethodCallFirst		612433						
ANR	613074	Symbol	isImmediatelyPostObjCMethodDefinition		612433						
ANR	613075	Symbol	isInLet		612433						
ANR	613076	Symbol	probationHeader		612433						
ANR	613077	Symbol	shouldIndentBracedLine		612433						
ANR	613078	Symbol	isNonInStatementArray		612433						
ANR	613079	Symbol	isInObjCMethodDefinition		612433						
ANR	613080	Symbol	quoteChar		612433						
ANR	613081	Symbol	isInSwitch		612433						
ANR	613082	Symbol	isInClassHeaderTab		612433						
ANR	613083	Symbol	lastLineHeader		612433						
ANR	613084	Symbol	preprocBlockIndent		612433						
ANR	613085	Symbol	lineOpeningBlocksNum		612433						
ANR	613086	Symbol	false		612433						
ANR	613087	Symbol	isInPreprocessorComment		612433						
ANR	613088	Symbol	bracePosObjCMethodAlignment		612433						
ANR	613089	Symbol	prevNonSpaceCh		612433						
ANR	613090	Symbol	isInIndentablePreproc		612433						
ANR	613091	Symbol	isInObjCInterface		612433						
ANR	613092	Symbol	isInAsm		612433						
ANR	613093	Symbol	isInClassHeader		612433						
ANR	613094	Symbol	indentCount		612433						
ANR	613095	Symbol	lineStartsInComment		612433						
ANR	613096	Symbol	currentHeader		612433						
ANR	613097	Symbol	previousLineProbationTab		612433						
ANR	613098	Symbol	isImmediatelyPostObjCMethodCall		612433						
ANR	613099	Symbol	prevFinalLineIndentCount		612433						
ANR	613100	Symbol	foundPreCommandHeader		612433						
ANR	613101	Symbol	isElseHeaderIndent		612433						
ANR	613102	Symbol	squareBracketCount		612433						
ANR	613103	Symbol	runInIndentContinuation		612433						
ANR	613104	Symbol	haveLineContinuationChar		612433						
ANR	613105	Symbol	backslashEndsPrevLine		612433						
ANR	613106	Function	ASBeautifier :: initVectors	420:0:14895:15682							
ANR	613107	FunctionDef	ASBeautifier :: initVectors ()		613106	0					
ANR	613108	CompoundStatement		421:0:14928:15682	613106	0					
ANR	613109	IfStatement	if ( fileType == beautifierFileType )		613106	0					
ANR	613110	Condition	fileType == beautifierFileType	422:5:14935:14964	613106	0	True				
ANR	613111	EqualityExpression	fileType == beautifierFileType		613106	0		==			
ANR	613112	Identifier	fileType		613106	0					
ANR	613113	Identifier	beautifierFileType		613106	1					
ANR	613114	ReturnStatement	return ;	423:2:15004:15010	613106	1	True				
ANR	613115	ExpressionStatement	beautifierFileType = fileType	425:1:15014:15043	613106	1	True				
ANR	613116	AssignmentExpression	beautifierFileType = fileType		613106	0		=			
ANR	613117	Identifier	beautifierFileType		613106	0					
ANR	613118	Identifier	fileType		613106	1					
ANR	613119	ExpressionStatement	headers -> clear ( )	427:1:15047:15063	613106	2	True				
ANR	613120	CallExpression	headers -> clear ( )		613106	0					
ANR	613121	Callee	headers -> clear		613106	0					
ANR	613122	PtrMemberAccess	headers -> clear		613106	0					
ANR	613123	Identifier	headers		613106	0					
ANR	613124	Identifier	clear		613106	1					
ANR	613125	ArgumentList			613106	1					
ANR	613126	ExpressionStatement	nonParenHeaders -> clear ( )	428:1:15066:15090	613106	3	True				
ANR	613127	CallExpression	nonParenHeaders -> clear ( )		613106	0					
ANR	613128	Callee	nonParenHeaders -> clear		613106	0					
ANR	613129	PtrMemberAccess	nonParenHeaders -> clear		613106	0					
ANR	613130	Identifier	nonParenHeaders		613106	0					
ANR	613131	Identifier	clear		613106	1					
ANR	613132	ArgumentList			613106	1					
ANR	613133	ExpressionStatement	assignmentOperators -> clear ( )	429:1:15093:15121	613106	4	True				
ANR	613134	CallExpression	assignmentOperators -> clear ( )		613106	0					
ANR	613135	Callee	assignmentOperators -> clear		613106	0					
ANR	613136	PtrMemberAccess	assignmentOperators -> clear		613106	0					
ANR	613137	Identifier	assignmentOperators		613106	0					
ANR	613138	Identifier	clear		613106	1					
ANR	613139	ArgumentList			613106	1					
ANR	613140	ExpressionStatement	nonAssignmentOperators -> clear ( )	430:1:15124:15155	613106	5	True				
ANR	613141	CallExpression	nonAssignmentOperators -> clear ( )		613106	0					
ANR	613142	Callee	nonAssignmentOperators -> clear		613106	0					
ANR	613143	PtrMemberAccess	nonAssignmentOperators -> clear		613106	0					
ANR	613144	Identifier	nonAssignmentOperators		613106	0					
ANR	613145	Identifier	clear		613106	1					
ANR	613146	ArgumentList			613106	1					
ANR	613147	ExpressionStatement	preBlockStatements -> clear ( )	431:1:15158:15185	613106	6	True				
ANR	613148	CallExpression	preBlockStatements -> clear ( )		613106	0					
ANR	613149	Callee	preBlockStatements -> clear		613106	0					
ANR	613150	PtrMemberAccess	preBlockStatements -> clear		613106	0					
ANR	613151	Identifier	preBlockStatements		613106	0					
ANR	613152	Identifier	clear		613106	1					
ANR	613153	ArgumentList			613106	1					
ANR	613154	ExpressionStatement	preCommandHeaders -> clear ( )	432:1:15188:15214	613106	7	True				
ANR	613155	CallExpression	preCommandHeaders -> clear ( )		613106	0					
ANR	613156	Callee	preCommandHeaders -> clear		613106	0					
ANR	613157	PtrMemberAccess	preCommandHeaders -> clear		613106	0					
ANR	613158	Identifier	preCommandHeaders		613106	0					
ANR	613159	Identifier	clear		613106	1					
ANR	613160	ArgumentList			613106	1					
ANR	613161	ExpressionStatement	indentableHeaders -> clear ( )	433:1:15217:15243	613106	8	True				
ANR	613162	CallExpression	indentableHeaders -> clear ( )		613106	0					
ANR	613163	Callee	indentableHeaders -> clear		613106	0					
ANR	613164	PtrMemberAccess	indentableHeaders -> clear		613106	0					
ANR	613165	Identifier	indentableHeaders		613106	0					
ANR	613166	Identifier	clear		613106	1					
ANR	613167	ArgumentList			613106	1					
ANR	613168	ExpressionStatement	"ASResource :: buildHeaders ( headers , fileType , true )"	435:1:15247:15296	613106	9	True				
ANR	613169	CallExpression	"ASResource :: buildHeaders ( headers , fileType , true )"		613106	0					
ANR	613170	Callee	ASResource :: buildHeaders		613106	0					
ANR	613171	Identifier	ASResource :: buildHeaders		613106	0					
ANR	613172	ArgumentList	headers		613106	1					
ANR	613173	Argument	headers		613106	0					
ANR	613174	Identifier	headers		613106	0					
ANR	613175	Argument	fileType		613106	1					
ANR	613176	Identifier	fileType		613106	0					
ANR	613177	Argument	true		613106	2					
ANR	613178	Identifier	true		613106	0					
ANR	613179	ExpressionStatement	"ASResource :: buildNonParenHeaders ( nonParenHeaders , fileType , true )"	436:1:15299:15364	613106	10	True				
ANR	613180	CallExpression	"ASResource :: buildNonParenHeaders ( nonParenHeaders , fileType , true )"		613106	0					
ANR	613181	Callee	ASResource :: buildNonParenHeaders		613106	0					
ANR	613182	Identifier	ASResource :: buildNonParenHeaders		613106	0					
ANR	613183	ArgumentList	nonParenHeaders		613106	1					
ANR	613184	Argument	nonParenHeaders		613106	0					
ANR	613185	Identifier	nonParenHeaders		613106	0					
ANR	613186	Argument	fileType		613106	1					
ANR	613187	Identifier	fileType		613106	0					
ANR	613188	Argument	true		613106	2					
ANR	613189	Identifier	true		613106	0					
ANR	613190	ExpressionStatement	ASResource :: buildAssignmentOperators ( assignmentOperators )	437:1:15367:15424	613106	11	True				
ANR	613191	CallExpression	ASResource :: buildAssignmentOperators ( assignmentOperators )		613106	0					
ANR	613192	Callee	ASResource :: buildAssignmentOperators		613106	0					
ANR	613193	Identifier	ASResource :: buildAssignmentOperators		613106	0					
ANR	613194	ArgumentList	assignmentOperators		613106	1					
ANR	613195	Argument	assignmentOperators		613106	0					
ANR	613196	Identifier	assignmentOperators		613106	0					
ANR	613197	ExpressionStatement	ASResource :: buildNonAssignmentOperators ( nonAssignmentOperators )	438:1:15427:15490	613106	12	True				
ANR	613198	CallExpression	ASResource :: buildNonAssignmentOperators ( nonAssignmentOperators )		613106	0					
ANR	613199	Callee	ASResource :: buildNonAssignmentOperators		613106	0					
ANR	613200	Identifier	ASResource :: buildNonAssignmentOperators		613106	0					
ANR	613201	ArgumentList	nonAssignmentOperators		613106	1					
ANR	613202	Argument	nonAssignmentOperators		613106	0					
ANR	613203	Identifier	nonAssignmentOperators		613106	0					
ANR	613204	ExpressionStatement	"ASResource :: buildPreBlockStatements ( preBlockStatements , fileType )"	439:1:15493:15558	613106	13	True				
ANR	613205	CallExpression	"ASResource :: buildPreBlockStatements ( preBlockStatements , fileType )"		613106	0					
ANR	613206	Callee	ASResource :: buildPreBlockStatements		613106	0					
ANR	613207	Identifier	ASResource :: buildPreBlockStatements		613106	0					
ANR	613208	ArgumentList	preBlockStatements		613106	1					
ANR	613209	Argument	preBlockStatements		613106	0					
ANR	613210	Identifier	preBlockStatements		613106	0					
ANR	613211	Argument	fileType		613106	1					
ANR	613212	Identifier	fileType		613106	0					
ANR	613213	ExpressionStatement	"ASResource :: buildPreCommandHeaders ( preCommandHeaders , fileType )"	440:1:15561:15624	613106	14	True				
ANR	613214	CallExpression	"ASResource :: buildPreCommandHeaders ( preCommandHeaders , fileType )"		613106	0					
ANR	613215	Callee	ASResource :: buildPreCommandHeaders		613106	0					
ANR	613216	Identifier	ASResource :: buildPreCommandHeaders		613106	0					
ANR	613217	ArgumentList	preCommandHeaders		613106	1					
ANR	613218	Argument	preCommandHeaders		613106	0					
ANR	613219	Identifier	preCommandHeaders		613106	0					
ANR	613220	Argument	fileType		613106	1					
ANR	613221	Identifier	fileType		613106	0					
ANR	613222	ExpressionStatement	ASResource :: buildIndentableHeaders ( indentableHeaders )	441:1:15627:15680	613106	15	True				
ANR	613223	CallExpression	ASResource :: buildIndentableHeaders ( indentableHeaders )		613106	0					
ANR	613224	Callee	ASResource :: buildIndentableHeaders		613106	0					
ANR	613225	Identifier	ASResource :: buildIndentableHeaders		613106	0					
ANR	613226	ArgumentList	indentableHeaders		613106	1					
ANR	613227	Argument	indentableHeaders		613106	0					
ANR	613228	Identifier	indentableHeaders		613106	0					
ANR	613229	ReturnType	void		613106	1					
ANR	613230	Identifier	ASBeautifier :: initVectors		613106	2					
ANR	613231	ParameterList			613106	3					
ANR	613232	CFGEntryNode	ENTRY		613106		True				
ANR	613233	CFGExitNode	EXIT		613106		True				
ANR	613234	Symbol	beautifierFileType		613106						
ANR	613235	Symbol	headers		613106						
ANR	613236	Symbol	assignmentOperators		613106						
ANR	613237	Symbol	indentableHeaders		613106						
ANR	613238	Symbol	nonParenHeaders		613106						
ANR	613239	Symbol	true		613106						
ANR	613240	Symbol	preCommandHeaders		613106						
ANR	613241	Symbol	nonAssignmentOperators		613106						
ANR	613242	Symbol	fileType		613106						
ANR	613243	Symbol	preBlockStatements		613106						
ANR	613244	Function	ASBeautifier :: setCStyle	447:0:15728:15781							
ANR	613245	FunctionDef	ASBeautifier :: setCStyle ()		613244	0					
ANR	613246	CompoundStatement		448:0:15759:15781	613244	0					
ANR	613247	ExpressionStatement	fileType = C_TYPE	449:1:15762:15779	613244	0	True				
ANR	613248	AssignmentExpression	fileType = C_TYPE		613244	0		=			
ANR	613249	Identifier	fileType		613244	0					
ANR	613250	Identifier	C_TYPE		613244	1					
ANR	613251	ReturnType	void		613244	1					
ANR	613252	Identifier	ASBeautifier :: setCStyle		613244	2					
ANR	613253	ParameterList			613244	3					
ANR	613254	CFGEntryNode	ENTRY		613244		True				
ANR	613255	CFGExitNode	EXIT		613244		True				
ANR	613256	Symbol	C_TYPE		613244						
ANR	613257	Symbol	fileType		613244						
ANR	613258	Function	ASBeautifier :: setJavaStyle	455:0:15826:15885							
ANR	613259	FunctionDef	ASBeautifier :: setJavaStyle ()		613258	0					
ANR	613260	CompoundStatement		456:0:15860:15885	613258	0					
ANR	613261	ExpressionStatement	fileType = JAVA_TYPE	457:1:15863:15883	613258	0	True				
ANR	613262	AssignmentExpression	fileType = JAVA_TYPE		613258	0		=			
ANR	613263	Identifier	fileType		613258	0					
ANR	613264	Identifier	JAVA_TYPE		613258	1					
ANR	613265	ReturnType	void		613258	1					
ANR	613266	Identifier	ASBeautifier :: setJavaStyle		613258	2					
ANR	613267	ParameterList			613258	3					
ANR	613268	CFGEntryNode	ENTRY		613258		True				
ANR	613269	CFGExitNode	EXIT		613258		True				
ANR	613270	Symbol	JAVA_TYPE		613258						
ANR	613271	Symbol	fileType		613258						
ANR	613272	Function	ASBeautifier :: setSharpStyle	463:0:15928:15989							
ANR	613273	FunctionDef	ASBeautifier :: setSharpStyle ()		613272	0					
ANR	613274	CompoundStatement		464:0:15963:15989	613272	0					
ANR	613275	ExpressionStatement	fileType = SHARP_TYPE	465:1:15966:15987	613272	0	True				
ANR	613276	AssignmentExpression	fileType = SHARP_TYPE		613272	0		=			
ANR	613277	Identifier	fileType		613272	0					
ANR	613278	Identifier	SHARP_TYPE		613272	1					
ANR	613279	ReturnType	void		613272	1					
ANR	613280	Identifier	ASBeautifier :: setSharpStyle		613272	2					
ANR	613281	ParameterList			613272	3					
ANR	613282	CFGEntryNode	ENTRY		613272		True				
ANR	613283	CFGExitNode	EXIT		613272		True				
ANR	613284	Symbol	fileType		613272						
ANR	613285	Symbol	SHARP_TYPE		613272						
ANR	613286	Function	ASBeautifier :: setModeManuallySet	471:0:16030:16110							
ANR	613287	FunctionDef	ASBeautifier :: setModeManuallySet (bool state)		613286	0					
ANR	613288	CompoundStatement		472:0:16080:16110	613286	0					
ANR	613289	ExpressionStatement	isModeManuallySet = state	473:1:16083:16108	613286	0	True				
ANR	613290	AssignmentExpression	isModeManuallySet = state		613286	0		=			
ANR	613291	Identifier	isModeManuallySet		613286	0					
ANR	613292	Identifier	state		613286	1					
ANR	613293	ReturnType	void		613286	1					
ANR	613294	Identifier	ASBeautifier :: setModeManuallySet		613286	2					
ANR	613295	ParameterList	bool state		613286	3					
ANR	613296	Parameter	bool state	471:38:16068:16077	613286	0	True				
ANR	613297	ParameterType	bool		613286	0					
ANR	613298	Identifier	state		613286	1					
ANR	613299	CFGEntryNode	ENTRY		613286		True				
ANR	613300	CFGExitNode	EXIT		613286		True				
ANR	613301	Symbol	isModeManuallySet		613286						
ANR	613302	Symbol	state		613286						
ANR	613303	Function	ASBeautifier :: setDefaultTabLength	482:0:16244:16314							
ANR	613304	FunctionDef	ASBeautifier :: setDefaultTabLength ()		613303	0					
ANR	613305	CompoundStatement		483:0:16285:16314	613303	0					
ANR	613306	ExpressionStatement	tabLength = indentLength	484:1:16288:16312	613303	0	True				
ANR	613307	AssignmentExpression	tabLength = indentLength		613303	0		=			
ANR	613308	Identifier	tabLength		613303	0					
ANR	613309	Identifier	indentLength		613303	1					
ANR	613310	ReturnType	void		613303	1					
ANR	613311	Identifier	ASBeautifier :: setDefaultTabLength		613303	2					
ANR	613312	ParameterList			613303	3					
ANR	613313	CFGEntryNode	ENTRY		613303		True				
ANR	613314	CFGExitNode	EXIT		613303		True				
ANR	613315	Symbol	tabLength		613303						
ANR	613316	Symbol	indentLength		613303						
ANR	613317	Function	ASBeautifier :: setForceTabXIndentation	492:0:16438:16615							
ANR	613318	FunctionDef	ASBeautifier :: setForceTabXIndentation (int length)		613317	0					
ANR	613319	CompoundStatement		493:0:16493:16615	613317	0					
ANR	613320	ExpressionStatement	"indentString = ""\\t"""	495:1:16538:16557	613317	0	True				
ANR	613321	AssignmentExpression	"indentString = ""\\t"""		613317	0		=			
ANR	613322	Identifier	indentString		613317	0					
ANR	613323	PrimaryExpression	"""\\t"""		613317	1					
ANR	613324	ExpressionStatement	tabLength = length	496:1:16560:16578	613317	1	True				
ANR	613325	AssignmentExpression	tabLength = length		613317	0		=			
ANR	613326	Identifier	tabLength		613317	0					
ANR	613327	Identifier	length		613317	1					
ANR	613328	ExpressionStatement	shouldForceTabIndentation = true	497:1:16581:16613	613317	2	True				
ANR	613329	AssignmentExpression	shouldForceTabIndentation = true		613317	0		=			
ANR	613330	Identifier	shouldForceTabIndentation		613317	0					
ANR	613331	Identifier	true		613317	1					
ANR	613332	ReturnType	void		613317	1					
ANR	613333	Identifier	ASBeautifier :: setForceTabXIndentation		613317	2					
ANR	613334	ParameterList	int length		613317	3					
ANR	613335	Parameter	int length	492:43:16481:16490	613317	0	True				
ANR	613336	ParameterType	int		613317	0					
ANR	613337	Identifier	length		613317	1					
ANR	613338	CFGEntryNode	ENTRY		613317		True				
ANR	613339	CFGExitNode	EXIT		613317		True				
ANR	613340	Symbol	tabLength		613317						
ANR	613341	Symbol	shouldForceTabIndentation		613317						
ANR	613342	Symbol	length		613317						
ANR	613343	Symbol	true		613317						
ANR	613344	Symbol	indentString		613317						
ANR	613345	Function	ASBeautifier :: setTabIndentation	503:0:16666:16819							
ANR	613346	FunctionDef	"ASBeautifier :: setTabIndentation (int length , bool forceTabs)"		613345	0					
ANR	613347	CompoundStatement		504:0:16731:16819	613345	0					
ANR	613348	ExpressionStatement	"indentString = ""\\t"""	505:1:16734:16753	613345	0	True				
ANR	613349	AssignmentExpression	"indentString = ""\\t"""		613345	0		=			
ANR	613350	Identifier	indentString		613345	0					
ANR	613351	PrimaryExpression	"""\\t"""		613345	1					
ANR	613352	ExpressionStatement	indentLength = length	506:1:16756:16777	613345	1	True				
ANR	613353	AssignmentExpression	indentLength = length		613345	0		=			
ANR	613354	Identifier	indentLength		613345	0					
ANR	613355	Identifier	length		613345	1					
ANR	613356	ExpressionStatement	shouldForceTabIndentation = forceTabs	507:1:16780:16817	613345	2	True				
ANR	613357	AssignmentExpression	shouldForceTabIndentation = forceTabs		613345	0		=			
ANR	613358	Identifier	shouldForceTabIndentation		613345	0					
ANR	613359	Identifier	forceTabs		613345	1					
ANR	613360	ReturnType	void		613345	1					
ANR	613361	Identifier	ASBeautifier :: setTabIndentation		613345	2					
ANR	613362	ParameterList	"int length , bool forceTabs"		613345	3					
ANR	613363	Parameter	int length	503:37:16703:16712	613345	0	True				
ANR	613364	ParameterType	int		613345	0					
ANR	613365	Identifier	length		613345	1					
ANR	613366	Parameter	bool forceTabs	503:49:16715:16728	613345	1	True				
ANR	613367	ParameterType	bool		613345	0					
ANR	613368	Identifier	forceTabs		613345	1					
ANR	613369	CFGEntryNode	ENTRY		613345		True				
ANR	613370	CFGExitNode	EXIT		613345		True				
ANR	613371	Symbol	shouldForceTabIndentation		613345						
ANR	613372	Symbol	length		613345						
ANR	613373	Symbol	forceTabs		613345						
ANR	613374	Symbol	indentLength		613345						
ANR	613375	Symbol	indentString		613345						
ANR	613376	Function	ASBeautifier :: setSpaceIndentation	515:0:16937:17051							
ANR	613377	FunctionDef	ASBeautifier :: setSpaceIndentation (int length)		613376	0					
ANR	613378	CompoundStatement		516:0:16988:17051	613376	0					
ANR	613379	ExpressionStatement	"indentString = string ( length , ' ' )"	517:1:16991:17025	613376	0	True				
ANR	613380	AssignmentExpression	"indentString = string ( length , ' ' )"		613376	0		=			
ANR	613381	Identifier	indentString		613376	0					
ANR	613382	CallExpression	"string ( length , ' ' )"		613376	1					
ANR	613383	Callee	string		613376	0					
ANR	613384	Identifier	string		613376	0					
ANR	613385	ArgumentList	length		613376	1					
ANR	613386	Argument	length		613376	0					
ANR	613387	Identifier	length		613376	0					
ANR	613388	Argument	' '		613376	1					
ANR	613389	PrimaryExpression	' '		613376	0					
ANR	613390	ExpressionStatement	indentLength = length	518:1:17028:17049	613376	1	True				
ANR	613391	AssignmentExpression	indentLength = length		613376	0		=			
ANR	613392	Identifier	indentLength		613376	0					
ANR	613393	Identifier	length		613376	1					
ANR	613394	ReturnType	void		613376	1					
ANR	613395	Identifier	ASBeautifier :: setSpaceIndentation		613376	2					
ANR	613396	ParameterList	int length		613376	3					
ANR	613397	Parameter	int length	515:39:16976:16985	613376	0	True				
ANR	613398	ParameterType	int		613376	0					
ANR	613399	Identifier	length		613376	1					
ANR	613400	CFGEntryNode	ENTRY		613376		True				
ANR	613401	CFGExitNode	EXIT		613376		True				
ANR	613402	Symbol	string		613376						
ANR	613403	Symbol	length		613376						
ANR	613404	Symbol	indentLength		613376						
ANR	613405	Symbol	indentString		613376						
ANR	613406	Function	ASBeautifier :: setContinuationIndentation	526:0:17168:17258							
ANR	613407	FunctionDef	ASBeautifier :: setContinuationIndentation (int indent)		613406	0					
ANR	613408	CompoundStatement		527:0:17226:17258	613406	0					
ANR	613409	ExpressionStatement	continuationIndent = indent	528:1:17229:17256	613406	0	True				
ANR	613410	AssignmentExpression	continuationIndent = indent		613406	0		=			
ANR	613411	Identifier	continuationIndent		613406	0					
ANR	613412	Identifier	indent		613406	1					
ANR	613413	ReturnType	void		613406	1					
ANR	613414	Identifier	ASBeautifier :: setContinuationIndentation		613406	2					
ANR	613415	ParameterList	int indent		613406	3					
ANR	613416	Parameter	int indent	526:46:17214:17223	613406	0	True				
ANR	613417	ParameterType	int		613406	0					
ANR	613418	Identifier	indent		613406	1					
ANR	613419	CFGEntryNode	ENTRY		613406		True				
ANR	613420	CFGExitNode	EXIT		613406		True				
ANR	613421	Symbol	indent		613406						
ANR	613422	Symbol	continuationIndent		613406						
ANR	613423	Function	ASBeautifier :: setMaxContinuationIndentLength	536:0:17396:17487							
ANR	613424	FunctionDef	ASBeautifier :: setMaxContinuationIndentLength (int max)		613423	0					
ANR	613425	CompoundStatement		537:0:17455:17487	613423	0					
ANR	613426	ExpressionStatement	maxContinuationIndent = max	538:1:17458:17485	613423	0	True				
ANR	613427	AssignmentExpression	maxContinuationIndent = max		613423	0		=			
ANR	613428	Identifier	maxContinuationIndent		613423	0					
ANR	613429	Identifier	max		613423	1					
ANR	613430	ReturnType	void		613423	1					
ANR	613431	Identifier	ASBeautifier :: setMaxContinuationIndentLength		613423	2					
ANR	613432	ParameterList	int max		613423	3					
ANR	613433	Parameter	int max	536:50:17446:17452	613423	0	True				
ANR	613434	ParameterType	int		613423	0					
ANR	613435	Identifier	max		613423	1					
ANR	613436	CFGEntryNode	ENTRY		613423		True				
ANR	613437	CFGExitNode	EXIT		613423		True				
ANR	613438	Symbol	maxContinuationIndent		613423						
ANR	613439	Symbol	max		613423						
ANR	613440	Function	ASBeautifier :: setMaxInStatementIndentLength	544:0:17682:17780							
ANR	613441	FunctionDef	ASBeautifier :: setMaxInStatementIndentLength (int max)		613440	0					
ANR	613442	CompoundStatement		545:0:17740:17780	613440	0					
ANR	613443	ExpressionStatement	setMaxContinuationIndentLength ( max )	546:1:17743:17778	613440	0	True				
ANR	613444	CallExpression	setMaxContinuationIndentLength ( max )		613440	0					
ANR	613445	Callee	setMaxContinuationIndentLength		613440	0					
ANR	613446	Identifier	setMaxContinuationIndentLength		613440	0					
ANR	613447	ArgumentList	max		613440	1					
ANR	613448	Argument	max		613440	0					
ANR	613449	Identifier	max		613440	0					
ANR	613450	ReturnType	void		613440	1					
ANR	613451	Identifier	ASBeautifier :: setMaxInStatementIndentLength		613440	2					
ANR	613452	ParameterList	int max		613440	3					
ANR	613453	Parameter	int max	544:49:17731:17737	613440	0	True				
ANR	613454	ParameterType	int		613440	0					
ANR	613455	Identifier	max		613440	1					
ANR	613456	CFGEntryNode	ENTRY		613440		True				
ANR	613457	CFGExitNode	EXIT		613440		True				
ANR	613458	Symbol	max		613440						
ANR	613459	Function	ASBeautifier :: setMinConditionalIndentOption	554:0:17893:17982							
ANR	613460	FunctionDef	ASBeautifier :: setMinConditionalIndentOption (int min)		613459	0					
ANR	613461	CompoundStatement		555:0:17951:17982	613459	0					
ANR	613462	ExpressionStatement	minConditionalOption = min	556:1:17954:17980	613459	0	True				
ANR	613463	AssignmentExpression	minConditionalOption = min		613459	0		=			
ANR	613464	Identifier	minConditionalOption		613459	0					
ANR	613465	Identifier	min		613459	1					
ANR	613466	ReturnType	void		613459	1					
ANR	613467	Identifier	ASBeautifier :: setMinConditionalIndentOption		613459	2					
ANR	613468	ParameterList	int min		613459	3					
ANR	613469	Parameter	int min	554:49:17942:17948	613459	0	True				
ANR	613470	ParameterType	int		613459	0					
ANR	613471	Identifier	min		613459	1					
ANR	613472	CFGEntryNode	ENTRY		613459		True				
ANR	613473	CFGExitNode	EXIT		613459		True				
ANR	613474	Symbol	min		613459						
ANR	613475	Symbol	minConditionalOption		613459						
ANR	613476	Function	ASBeautifier :: setMinConditionalIndentLength	562:0:18052:18443							
ANR	613477	FunctionDef	ASBeautifier :: setMinConditionalIndentLength ()		613476	0					
ANR	613478	CompoundStatement		563:0:18103:18443	613476	0					
ANR	613479	IfStatement	if ( minConditionalOption == MINCOND_ZERO )		613476	0					
ANR	613480	Condition	minConditionalOption == MINCOND_ZERO	564:5:18110:18145	613476	0	True				
ANR	613481	EqualityExpression	minConditionalOption == MINCOND_ZERO		613476	0		==			
ANR	613482	Identifier	minConditionalOption		613476	0					
ANR	613483	Identifier	MINCOND_ZERO		613476	1					
ANR	613484	ExpressionStatement	minConditionalIndent = 0	565:2:18150:18174	613476	1	True				
ANR	613485	AssignmentExpression	minConditionalIndent = 0		613476	0		=			
ANR	613486	Identifier	minConditionalIndent		613476	0					
ANR	613487	PrimaryExpression	0		613476	1					
ANR	613488	ElseStatement	else		613476	0					
ANR	613489	IfStatement	if ( minConditionalOption == MINCOND_ONE )		613476	0					
ANR	613490	Condition	minConditionalOption == MINCOND_ONE	566:10:18186:18220	613476	0	True				
ANR	613491	EqualityExpression	minConditionalOption == MINCOND_ONE		613476	0		==			
ANR	613492	Identifier	minConditionalOption		613476	0					
ANR	613493	Identifier	MINCOND_ONE		613476	1					
ANR	613494	ExpressionStatement	minConditionalIndent = indentLength	567:2:18225:18260	613476	1	True				
ANR	613495	AssignmentExpression	minConditionalIndent = indentLength		613476	0		=			
ANR	613496	Identifier	minConditionalIndent		613476	0					
ANR	613497	Identifier	indentLength		613476	1					
ANR	613498	ElseStatement	else		613476	0					
ANR	613499	IfStatement	if ( minConditionalOption == MINCOND_ONEHALF )		613476	0					
ANR	613500	Condition	minConditionalOption == MINCOND_ONEHALF	568:10:18272:18310	613476	0	True				
ANR	613501	EqualityExpression	minConditionalOption == MINCOND_ONEHALF		613476	0		==			
ANR	613502	Identifier	minConditionalOption		613476	0					
ANR	613503	Identifier	MINCOND_ONEHALF		613476	1					
ANR	613504	ExpressionStatement	minConditionalIndent = indentLength / 2	569:2:18315:18354	613476	1	True				
ANR	613505	AssignmentExpression	minConditionalIndent = indentLength / 2		613476	0		=			
ANR	613506	Identifier	minConditionalIndent		613476	0					
ANR	613507	MultiplicativeExpression	indentLength / 2		613476	1		/			
ANR	613508	Identifier	indentLength		613476	0					
ANR	613509	PrimaryExpression	2		613476	1					
ANR	613510	ElseStatement	else		613476	0					
ANR	613511	ExpressionStatement	minConditionalIndent = indentLength * 2	572:2:18402:18441	613476	0	True				
ANR	613512	AssignmentExpression	minConditionalIndent = indentLength * 2		613476	0		=			
ANR	613513	Identifier	minConditionalIndent		613476	0					
ANR	613514	MultiplicativeExpression	indentLength * 2		613476	1		*			
ANR	613515	Identifier	indentLength		613476	0					
ANR	613516	PrimaryExpression	2		613476	1					
ANR	613517	ReturnType	void		613476	1					
ANR	613518	Identifier	ASBeautifier :: setMinConditionalIndentLength		613476	2					
ANR	613519	ParameterList			613476	3					
ANR	613520	CFGEntryNode	ENTRY		613476		True				
ANR	613521	CFGExitNode	EXIT		613476		True				
ANR	613522	Symbol	MINCOND_ONEHALF		613476						
ANR	613523	Symbol	MINCOND_ZERO		613476						
ANR	613524	Symbol	minConditionalIndent		613476						
ANR	613525	Symbol	indentLength		613476						
ANR	613526	Symbol	minConditionalOption		613476						
ANR	613527	Symbol	MINCOND_ONE		613476						
ANR	613528	Function	ASBeautifier :: setBraceIndent	581:0:18608:18678							
ANR	613529	FunctionDef	ASBeautifier :: setBraceIndent (bool state)		613528	0					
ANR	613530	CompoundStatement		582:0:18654:18678	613528	0					
ANR	613531	ExpressionStatement	braceIndent = state	583:1:18657:18676	613528	0	True				
ANR	613532	AssignmentExpression	braceIndent = state		613528	0		=			
ANR	613533	Identifier	braceIndent		613528	0					
ANR	613534	Identifier	state		613528	1					
ANR	613535	ReturnType	void		613528	1					
ANR	613536	Identifier	ASBeautifier :: setBraceIndent		613528	2					
ANR	613537	ParameterList	bool state		613528	3					
ANR	613538	Parameter	bool state	581:34:18642:18651	613528	0	True				
ANR	613539	ParameterType	bool		613528	0					
ANR	613540	Identifier	state		613528	1					
ANR	613541	CFGEntryNode	ENTRY		613528		True				
ANR	613542	CFGExitNode	EXIT		613528		True				
ANR	613543	Symbol	braceIndent		613528						
ANR	613544	Symbol	state		613528						
ANR	613545	Function	ASBeautifier :: setBraceIndentVtk	592:0:18872:19002							
ANR	613546	FunctionDef	ASBeautifier :: setBraceIndentVtk (bool state)		613545	0					
ANR	613547	CompoundStatement		593:0:18921:19002	613545	0					
ANR	613548	ExpressionStatement	setBraceIndent ( state )	595:1:18954:18975	613545	0	True				
ANR	613549	CallExpression	setBraceIndent ( state )		613545	0					
ANR	613550	Callee	setBraceIndent		613545	0					
ANR	613551	Identifier	setBraceIndent		613545	0					
ANR	613552	ArgumentList	state		613545	1					
ANR	613553	Argument	state		613545	0					
ANR	613554	Identifier	state		613545	0					
ANR	613555	ExpressionStatement	braceIndentVtk = state	596:1:18978:19000	613545	1	True				
ANR	613556	AssignmentExpression	braceIndentVtk = state		613545	0		=			
ANR	613557	Identifier	braceIndentVtk		613545	0					
ANR	613558	Identifier	state		613545	1					
ANR	613559	ReturnType	void		613545	1					
ANR	613560	Identifier	ASBeautifier :: setBraceIndentVtk		613545	2					
ANR	613561	ParameterList	bool state		613545	3					
ANR	613562	Parameter	bool state	592:37:18909:18918	613545	0	True				
ANR	613563	ParameterType	bool		613545	0					
ANR	613564	Identifier	state		613545	1					
ANR	613565	CFGEntryNode	ENTRY		613545		True				
ANR	613566	CFGExitNode	EXIT		613545		True				
ANR	613567	Symbol	braceIndentVtk		613545						
ANR	613568	Symbol	state		613545						
ANR	613569	Function	ASBeautifier :: setBlockIndent	605:0:19212:19282							
ANR	613570	FunctionDef	ASBeautifier :: setBlockIndent (bool state)		613569	0					
ANR	613571	CompoundStatement		606:0:19258:19282	613569	0					
ANR	613572	ExpressionStatement	blockIndent = state	607:1:19261:19280	613569	0	True				
ANR	613573	AssignmentExpression	blockIndent = state		613569	0		=			
ANR	613574	Identifier	blockIndent		613569	0					
ANR	613575	Identifier	state		613569	1					
ANR	613576	ReturnType	void		613569	1					
ANR	613577	Identifier	ASBeautifier :: setBlockIndent		613569	2					
ANR	613578	ParameterList	bool state		613569	3					
ANR	613579	Parameter	bool state	605:34:19246:19255	613569	0	True				
ANR	613580	ParameterType	bool		613569	0					
ANR	613581	Identifier	state		613569	1					
ANR	613582	CFGEntryNode	ENTRY		613569		True				
ANR	613583	CFGExitNode	EXIT		613569		True				
ANR	613584	Symbol	state		613569						
ANR	613585	Symbol	blockIndent		613569						
ANR	613586	Function	ASBeautifier :: setClassIndent	616:0:19467:19537							
ANR	613587	FunctionDef	ASBeautifier :: setClassIndent (bool state)		613586	0					
ANR	613588	CompoundStatement		617:0:19513:19537	613586	0					
ANR	613589	ExpressionStatement	classIndent = state	618:1:19516:19535	613586	0	True				
ANR	613590	AssignmentExpression	classIndent = state		613586	0		=			
ANR	613591	Identifier	classIndent		613586	0					
ANR	613592	Identifier	state		613586	1					
ANR	613593	ReturnType	void		613586	1					
ANR	613594	Identifier	ASBeautifier :: setClassIndent		613586	2					
ANR	613595	ParameterList	bool state		613586	3					
ANR	613596	Parameter	bool state	616:34:19501:19510	613586	0	True				
ANR	613597	ParameterType	bool		613586	0					
ANR	613598	Identifier	state		613586	1					
ANR	613599	CFGEntryNode	ENTRY		613586		True				
ANR	613600	CFGExitNode	EXIT		613586		True				
ANR	613601	Symbol	classIndent		613586						
ANR	613602	Symbol	state		613586						
ANR	613603	Function	ASBeautifier :: setModifierIndent	627:0:19727:19803							
ANR	613604	FunctionDef	ASBeautifier :: setModifierIndent (bool state)		613603	0					
ANR	613605	CompoundStatement		628:0:19776:19803	613603	0					
ANR	613606	ExpressionStatement	modifierIndent = state	629:1:19779:19801	613603	0	True				
ANR	613607	AssignmentExpression	modifierIndent = state		613603	0		=			
ANR	613608	Identifier	modifierIndent		613603	0					
ANR	613609	Identifier	state		613603	1					
ANR	613610	ReturnType	void		613603	1					
ANR	613611	Identifier	ASBeautifier :: setModifierIndent		613603	2					
ANR	613612	ParameterList	bool state		613603	3					
ANR	613613	Parameter	bool state	627:37:19764:19773	613603	0	True				
ANR	613614	ParameterType	bool		613603	0					
ANR	613615	Identifier	state		613603	1					
ANR	613616	CFGEntryNode	ENTRY		613603		True				
ANR	613617	CFGExitNode	EXIT		613603		True				
ANR	613618	Symbol	modifierIndent		613603						
ANR	613619	Symbol	state		613603						
ANR	613620	Function	ASBeautifier :: setSwitchIndent	638:0:19997:20069							
ANR	613621	FunctionDef	ASBeautifier :: setSwitchIndent (bool state)		613620	0					
ANR	613622	CompoundStatement		639:0:20044:20069	613620	0					
ANR	613623	ExpressionStatement	switchIndent = state	640:1:20047:20067	613620	0	True				
ANR	613624	AssignmentExpression	switchIndent = state		613620	0		=			
ANR	613625	Identifier	switchIndent		613620	0					
ANR	613626	Identifier	state		613620	1					
ANR	613627	ReturnType	void		613620	1					
ANR	613628	Identifier	ASBeautifier :: setSwitchIndent		613620	2					
ANR	613629	ParameterList	bool state		613620	3					
ANR	613630	Parameter	bool state	638:35:20032:20041	613620	0	True				
ANR	613631	ParameterType	bool		613620	0					
ANR	613632	Identifier	state		613620	1					
ANR	613633	CFGEntryNode	ENTRY		613620		True				
ANR	613634	CFGExitNode	EXIT		613620		True				
ANR	613635	Symbol	switchIndent		613620						
ANR	613636	Symbol	state		613620						
ANR	613637	Function	ASBeautifier :: setCaseIndent	649:0:20258:20326							
ANR	613638	FunctionDef	ASBeautifier :: setCaseIndent (bool state)		613637	0					
ANR	613639	CompoundStatement		650:0:20303:20326	613637	0					
ANR	613640	ExpressionStatement	caseIndent = state	651:1:20306:20324	613637	0	True				
ANR	613641	AssignmentExpression	caseIndent = state		613637	0		=			
ANR	613642	Identifier	caseIndent		613637	0					
ANR	613643	Identifier	state		613637	1					
ANR	613644	ReturnType	void		613637	1					
ANR	613645	Identifier	ASBeautifier :: setCaseIndent		613637	2					
ANR	613646	ParameterList	bool state		613637	3					
ANR	613647	Parameter	bool state	649:33:20291:20300	613637	0	True				
ANR	613648	ParameterType	bool		613637	0					
ANR	613649	Identifier	state		613637	1					
ANR	613650	CFGEntryNode	ENTRY		613637		True				
ANR	613651	CFGExitNode	EXIT		613637		True				
ANR	613652	Symbol	state		613637						
ANR	613653	Symbol	caseIndent		613637						
ANR	613654	Function	ASBeautifier :: setNamespaceIndent	661:0:20570:20648							
ANR	613655	FunctionDef	ASBeautifier :: setNamespaceIndent (bool state)		613654	0					
ANR	613656	CompoundStatement		662:0:20620:20648	613654	0					
ANR	613657	ExpressionStatement	namespaceIndent = state	663:1:20623:20646	613654	0	True				
ANR	613658	AssignmentExpression	namespaceIndent = state		613654	0		=			
ANR	613659	Identifier	namespaceIndent		613654	0					
ANR	613660	Identifier	state		613654	1					
ANR	613661	ReturnType	void		613654	1					
ANR	613662	Identifier	ASBeautifier :: setNamespaceIndent		613654	2					
ANR	613663	ParameterList	bool state		613654	3					
ANR	613664	Parameter	bool state	661:38:20608:20617	613654	0	True				
ANR	613665	ParameterType	bool		613654	0					
ANR	613666	Identifier	state		613654	1					
ANR	613667	CFGEntryNode	ENTRY		613654		True				
ANR	613668	CFGExitNode	EXIT		613654		True				
ANR	613669	Symbol	namespaceIndent		613654						
ANR	613670	Symbol	state		613654						
ANR	613671	Function	ASBeautifier :: setAfterParenIndent	671:0:20757:20843							
ANR	613672	FunctionDef	ASBeautifier :: setAfterParenIndent (bool state)		613671	0					
ANR	613673	CompoundStatement		672:0:20808:20843	613671	0					
ANR	613674	ExpressionStatement	shouldIndentAfterParen = state	673:1:20811:20841	613671	0	True				
ANR	613675	AssignmentExpression	shouldIndentAfterParen = state		613671	0		=			
ANR	613676	Identifier	shouldIndentAfterParen		613671	0					
ANR	613677	Identifier	state		613671	1					
ANR	613678	ReturnType	void		613671	1					
ANR	613679	Identifier	ASBeautifier :: setAfterParenIndent		613671	2					
ANR	613680	ParameterList	bool state		613671	3					
ANR	613681	Parameter	bool state	671:39:20796:20805	613671	0	True				
ANR	613682	ParameterType	bool		613671	0					
ANR	613683	Identifier	state		613671	1					
ANR	613684	CFGEntryNode	ENTRY		613671		True				
ANR	613685	CFGExitNode	EXIT		613671		True				
ANR	613686	Symbol	state		613671						
ANR	613687	Symbol	shouldIndentAfterParen		613671						
ANR	613688	Function	ASBeautifier :: setLabelIndent	685:0:21119:21189							
ANR	613689	FunctionDef	ASBeautifier :: setLabelIndent (bool state)		613688	0					
ANR	613690	CompoundStatement		686:0:21165:21189	613688	0					
ANR	613691	ExpressionStatement	labelIndent = state	687:1:21168:21187	613688	0	True				
ANR	613692	AssignmentExpression	labelIndent = state		613688	0		=			
ANR	613693	Identifier	labelIndent		613688	0					
ANR	613694	Identifier	state		613688	1					
ANR	613695	ReturnType	void		613688	1					
ANR	613696	Identifier	ASBeautifier :: setLabelIndent		613688	2					
ANR	613697	ParameterList	bool state		613688	3					
ANR	613698	Parameter	bool state	685:34:21153:21162	613688	0	True				
ANR	613699	ParameterType	bool		613688	0					
ANR	613700	Identifier	state		613688	1					
ANR	613701	CFGEntryNode	ENTRY		613688		True				
ANR	613702	CFGExitNode	EXIT		613688		True				
ANR	613703	Symbol	labelIndent		613688						
ANR	613704	Symbol	state		613688						
ANR	613705	Function	ASBeautifier :: setPreprocDefineIndent	696:0:21367:21459							
ANR	613706	FunctionDef	ASBeautifier :: setPreprocDefineIndent (bool state)		613705	0					
ANR	613707	CompoundStatement		697:0:21421:21459	613705	0					
ANR	613708	ExpressionStatement	shouldIndentPreprocDefine = state	698:1:21424:21457	613705	0	True				
ANR	613709	AssignmentExpression	shouldIndentPreprocDefine = state		613705	0		=			
ANR	613710	Identifier	shouldIndentPreprocDefine		613705	0					
ANR	613711	Identifier	state		613705	1					
ANR	613712	ReturnType	void		613705	1					
ANR	613713	Identifier	ASBeautifier :: setPreprocDefineIndent		613705	2					
ANR	613714	ParameterList	bool state		613705	3					
ANR	613715	Parameter	bool state	696:42:21409:21418	613705	0	True				
ANR	613716	ParameterType	bool		613705	0					
ANR	613717	Identifier	state		613705	1					
ANR	613718	CFGEntryNode	ENTRY		613705		True				
ANR	613719	CFGExitNode	EXIT		613705		True				
ANR	613720	Symbol	state		613705						
ANR	613721	Symbol	shouldIndentPreprocDefine		613705						
ANR	613722	Function	ASBeautifier :: setPreprocConditionalIndent	701:0:21462:21564							
ANR	613723	FunctionDef	ASBeautifier :: setPreprocConditionalIndent (bool state)		613722	0					
ANR	613724	CompoundStatement		702:0:21521:21564	613722	0					
ANR	613725	ExpressionStatement	shouldIndentPreprocConditional = state	703:1:21524:21562	613722	0	True				
ANR	613726	AssignmentExpression	shouldIndentPreprocConditional = state		613722	0		=			
ANR	613727	Identifier	shouldIndentPreprocConditional		613722	0					
ANR	613728	Identifier	state		613722	1					
ANR	613729	ReturnType	void		613722	1					
ANR	613730	Identifier	ASBeautifier :: setPreprocConditionalIndent		613722	2					
ANR	613731	ParameterList	bool state		613722	3					
ANR	613732	Parameter	bool state	701:47:21509:21518	613722	0	True				
ANR	613733	ParameterType	bool		613722	0					
ANR	613734	Identifier	state		613722	1					
ANR	613735	CFGEntryNode	ENTRY		613722		True				
ANR	613736	CFGExitNode	EXIT		613722		True				
ANR	613737	Symbol	state		613722						
ANR	613738	Symbol	shouldIndentPreprocConditional		613722						
ANR	613739	Function	ASBeautifier :: setEmptyLineFill	714:0:21805:21879							
ANR	613740	FunctionDef	ASBeautifier :: setEmptyLineFill (bool state)		613739	0					
ANR	613741	CompoundStatement		715:0:21853:21879	613739	0					
ANR	613742	ExpressionStatement	emptyLineFill = state	716:1:21856:21877	613739	0	True				
ANR	613743	AssignmentExpression	emptyLineFill = state		613739	0		=			
ANR	613744	Identifier	emptyLineFill		613739	0					
ANR	613745	Identifier	state		613739	1					
ANR	613746	ReturnType	void		613739	1					
ANR	613747	Identifier	ASBeautifier :: setEmptyLineFill		613739	2					
ANR	613748	ParameterList	bool state		613739	3					
ANR	613749	Parameter	bool state	714:36:21841:21850	613739	0	True				
ANR	613750	ParameterType	bool		613739	0					
ANR	613751	Identifier	state		613739	1					
ANR	613752	CFGEntryNode	ENTRY		613739		True				
ANR	613753	CFGExitNode	EXIT		613739		True				
ANR	613754	Symbol	emptyLineFill		613739						
ANR	613755	Symbol	state		613739						
ANR	613756	Function	ASBeautifier :: setAlignMethodColon	719:0:21882:21968							
ANR	613757	FunctionDef	ASBeautifier :: setAlignMethodColon (bool state)		613756	0					
ANR	613758	CompoundStatement		720:0:21933:21968	613756	0					
ANR	613759	ExpressionStatement	shouldAlignMethodColon = state	721:1:21936:21966	613756	0	True				
ANR	613760	AssignmentExpression	shouldAlignMethodColon = state		613756	0		=			
ANR	613761	Identifier	shouldAlignMethodColon		613756	0					
ANR	613762	Identifier	state		613756	1					
ANR	613763	ReturnType	void		613756	1					
ANR	613764	Identifier	ASBeautifier :: setAlignMethodColon		613756	2					
ANR	613765	ParameterList	bool state		613756	3					
ANR	613766	Parameter	bool state	719:39:21921:21930	613756	0	True				
ANR	613767	ParameterType	bool		613756	0					
ANR	613768	Identifier	state		613756	1					
ANR	613769	CFGEntryNode	ENTRY		613756		True				
ANR	613770	CFGExitNode	EXIT		613756		True				
ANR	613771	Symbol	state		613756						
ANR	613772	Symbol	shouldAlignMethodColon		613756						
ANR	613773	Function	ASBeautifier :: getFileType	727:0:22001:22059							
ANR	613774	FunctionDef	ASBeautifier :: getFileType ()		613773	0					
ANR	613775	CompoundStatement		728:0:22039:22059	613773	0					
ANR	613776	ReturnStatement	return fileType ;	729:1:22042:22057	613773	0	True				
ANR	613777	Identifier	fileType		613773	0					
ANR	613778	ReturnType	int		613773	1					
ANR	613779	Identifier	ASBeautifier :: getFileType		613773	2					
ANR	613780	ParameterList			613773	3					
ANR	613781	CFGEntryNode	ENTRY		613773		True				
ANR	613782	CFGExitNode	EXIT		613773		True				
ANR	613783	Symbol	fileType		613773						
ANR	613784	Function	ASBeautifier :: getIndentLength	737:0:22155:22221							
ANR	613785	FunctionDef	ASBeautifier :: getIndentLength ()		613784	0					
ANR	613786	CompoundStatement		738:0:22197:22221	613784	0					
ANR	613787	ReturnStatement	return indentLength ;	739:1:22200:22219	613784	0	True				
ANR	613788	Identifier	indentLength		613784	0					
ANR	613789	ReturnType	int		613784	1					
ANR	613790	Identifier	ASBeautifier :: getIndentLength		613784	2					
ANR	613791	ParameterList			613784	3					
ANR	613792	CFGEntryNode	ENTRY		613784		True				
ANR	613793	CFGExitNode	EXIT		613784		True				
ANR	613794	Symbol	indentLength		613784						
ANR	613795	Function	ASBeautifier :: getIndentString	747:0:22330:22399							
ANR	613796	FunctionDef	ASBeautifier :: getIndentString ()		613795	0					
ANR	613797	CompoundStatement		748:0:22375:22399	613795	0					
ANR	613798	ReturnStatement	return indentString ;	749:1:22378:22397	613795	0	True				
ANR	613799	Identifier	indentString		613795	0					
ANR	613800	ReturnType	string		613795	1					
ANR	613801	Identifier	ASBeautifier :: getIndentString		613795	2					
ANR	613802	ParameterList			613795	3					
ANR	613803	CFGEntryNode	ENTRY		613795		True				
ANR	613804	CFGExitNode	EXIT		613795		True				
ANR	613805	Symbol	indentString		613795						
ANR	613806	Function	ASBeautifier :: getModeManuallySet	755:0:22440:22515							
ANR	613807	FunctionDef	ASBeautifier :: getModeManuallySet ()		613806	0					
ANR	613808	CompoundStatement		756:0:22486:22515	613806	0					
ANR	613809	ReturnStatement	return isModeManuallySet ;	757:1:22489:22513	613806	0	True				
ANR	613810	Identifier	isModeManuallySet		613806	0					
ANR	613811	ReturnType	bool		613806	1					
ANR	613812	Identifier	ASBeautifier :: getModeManuallySet		613806	2					
ANR	613813	ParameterList			613806	3					
ANR	613814	CFGEntryNode	ENTRY		613806		True				
ANR	613815	CFGExitNode	EXIT		613806		True				
ANR	613816	Symbol	isModeManuallySet		613806						
ANR	613817	Function	ASBeautifier :: getForceTabIndentation	765:0:22628:22715							
ANR	613818	FunctionDef	ASBeautifier :: getForceTabIndentation ()		613817	0					
ANR	613819	CompoundStatement		766:0:22678:22715	613817	0					
ANR	613820	ReturnStatement	return shouldForceTabIndentation ;	767:1:22681:22713	613817	0	True				
ANR	613821	Identifier	shouldForceTabIndentation		613817	0					
ANR	613822	ReturnType	bool		613817	1					
ANR	613823	Identifier	ASBeautifier :: getForceTabIndentation		613817	2					
ANR	613824	ParameterList			613817	3					
ANR	613825	CFGEntryNode	ENTRY		613817		True				
ANR	613826	CFGExitNode	EXIT		613817		True				
ANR	613827	Symbol	shouldForceTabIndentation		613817						
ANR	613828	Function	ASBeautifier :: getAlignMethodColon	775:0:22841:22922							
ANR	613829	FunctionDef	ASBeautifier :: getAlignMethodColon ()		613828	0					
ANR	613830	CompoundStatement		776:0:22888:22922	613828	0					
ANR	613831	ReturnStatement	return shouldAlignMethodColon ;	777:1:22891:22920	613828	0	True				
ANR	613832	Identifier	shouldAlignMethodColon		613828	0					
ANR	613833	ReturnType	bool		613828	1					
ANR	613834	Identifier	ASBeautifier :: getAlignMethodColon		613828	2					
ANR	613835	ParameterList			613828	3					
ANR	613836	CFGEntryNode	ENTRY		613828		True				
ANR	613837	CFGExitNode	EXIT		613828		True				
ANR	613838	Symbol	shouldAlignMethodColon		613828						
ANR	613839	Function	ASBeautifier :: getBlockIndent	785:0:23028:23093							
ANR	613840	FunctionDef	ASBeautifier :: getBlockIndent ()		613839	0					
ANR	613841	CompoundStatement		786:0:23070:23093	613839	0					
ANR	613842	ReturnStatement	return blockIndent ;	787:1:23073:23091	613839	0	True				
ANR	613843	Identifier	blockIndent		613839	0					
ANR	613844	ReturnType	bool		613839	1					
ANR	613845	Identifier	ASBeautifier :: getBlockIndent		613839	2					
ANR	613846	ParameterList			613839	3					
ANR	613847	CFGEntryNode	ENTRY		613839		True				
ANR	613848	CFGExitNode	EXIT		613839		True				
ANR	613849	Symbol	blockIndent		613839						
ANR	613850	Function	ASBeautifier :: getBraceIndent	795:0:23199:23264							
ANR	613851	FunctionDef	ASBeautifier :: getBraceIndent ()		613850	0					
ANR	613852	CompoundStatement		796:0:23241:23264	613850	0					
ANR	613853	ReturnStatement	return braceIndent ;	797:1:23244:23262	613850	0	True				
ANR	613854	Identifier	braceIndent		613850	0					
ANR	613855	ReturnType	bool		613850	1					
ANR	613856	Identifier	ASBeautifier :: getBraceIndent		613850	2					
ANR	613857	ParameterList			613850	3					
ANR	613858	CFGEntryNode	ENTRY		613850		True				
ANR	613859	CFGExitNode	EXIT		613850		True				
ANR	613860	Symbol	braceIndent		613850						
ANR	613861	Function	ASBeautifier :: getNamespaceIndent	806:0:23461:23534							
ANR	613862	FunctionDef	ASBeautifier :: getNamespaceIndent ()		613861	0					
ANR	613863	CompoundStatement		807:0:23507:23534	613861	0					
ANR	613864	ReturnStatement	return namespaceIndent ;	808:1:23510:23532	613861	0	True				
ANR	613865	Identifier	namespaceIndent		613861	0					
ANR	613866	ReturnType	bool		613861	1					
ANR	613867	Identifier	ASBeautifier :: getNamespaceIndent		613861	2					
ANR	613868	ParameterList			613861	3					
ANR	613869	CFGEntryNode	ENTRY		613861		True				
ANR	613870	CFGExitNode	EXIT		613861		True				
ANR	613871	Symbol	namespaceIndent		613861						
ANR	613872	Function	ASBeautifier :: getClassIndent	817:0:23724:23789							
ANR	613873	FunctionDef	ASBeautifier :: getClassIndent ()		613872	0					
ANR	613874	CompoundStatement		818:0:23766:23789	613872	0					
ANR	613875	ReturnStatement	return classIndent ;	819:1:23769:23787	613872	0	True				
ANR	613876	Identifier	classIndent		613872	0					
ANR	613877	ReturnType	bool		613872	1					
ANR	613878	Identifier	ASBeautifier :: getClassIndent		613872	2					
ANR	613879	ParameterList			613872	3					
ANR	613880	CFGEntryNode	ENTRY		613872		True				
ANR	613881	CFGExitNode	EXIT		613872		True				
ANR	613882	Symbol	classIndent		613872						
ANR	613883	Function	ASBeautifier :: getModifierIndent	828:0:23987:24058							
ANR	613884	FunctionDef	ASBeautifier :: getModifierIndent ()		613883	0					
ANR	613885	CompoundStatement		829:0:24032:24058	613883	0					
ANR	613886	ReturnStatement	return modifierIndent ;	830:1:24035:24056	613883	0	True				
ANR	613887	Identifier	modifierIndent		613883	0					
ANR	613888	ReturnType	bool		613883	1					
ANR	613889	Identifier	ASBeautifier :: getModifierIndent		613883	2					
ANR	613890	ParameterList			613883	3					
ANR	613891	CFGEntryNode	ENTRY		613883		True				
ANR	613892	CFGExitNode	EXIT		613883		True				
ANR	613893	Symbol	modifierIndent		613883						
ANR	613894	Function	ASBeautifier :: getSwitchIndent	839:0:24251:24318							
ANR	613895	FunctionDef	ASBeautifier :: getSwitchIndent ()		613894	0					
ANR	613896	CompoundStatement		840:0:24294:24318	613894	0					
ANR	613897	ReturnStatement	return switchIndent ;	841:1:24297:24316	613894	0	True				
ANR	613898	Identifier	switchIndent		613894	0					
ANR	613899	ReturnType	bool		613894	1					
ANR	613900	Identifier	ASBeautifier :: getSwitchIndent		613894	2					
ANR	613901	ParameterList			613894	3					
ANR	613902	CFGEntryNode	ENTRY		613894		True				
ANR	613903	CFGExitNode	EXIT		613894		True				
ANR	613904	Symbol	switchIndent		613894						
ANR	613905	Function	ASBeautifier :: getCaseIndent	850:0:24501:24564							
ANR	613906	FunctionDef	ASBeautifier :: getCaseIndent ()		613905	0					
ANR	613907	CompoundStatement		851:0:24542:24564	613905	0					
ANR	613908	ReturnStatement	return caseIndent ;	852:1:24545:24562	613905	0	True				
ANR	613909	Identifier	caseIndent		613905	0					
ANR	613910	ReturnType	bool		613905	1					
ANR	613911	Identifier	ASBeautifier :: getCaseIndent		613905	2					
ANR	613912	ParameterList			613905	3					
ANR	613913	CFGEntryNode	ENTRY		613905		True				
ANR	613914	CFGExitNode	EXIT		613905		True				
ANR	613915	Symbol	caseIndent		613905						
ANR	613916	Function	ASBeautifier :: getEmptyLineFill	863:0:24802:24871							
ANR	613917	FunctionDef	ASBeautifier :: getEmptyLineFill ()		613916	0					
ANR	613918	CompoundStatement		864:0:24846:24871	613916	0					
ANR	613919	ReturnStatement	return emptyLineFill ;	865:1:24849:24869	613916	0	True				
ANR	613920	Identifier	emptyLineFill		613916	0					
ANR	613921	ReturnType	bool		613916	1					
ANR	613922	Identifier	ASBeautifier :: getEmptyLineFill		613916	2					
ANR	613923	ParameterList			613916	3					
ANR	613924	CFGEntryNode	ENTRY		613916		True				
ANR	613925	CFGExitNode	EXIT		613916		True				
ANR	613926	Symbol	emptyLineFill		613916						
ANR	613927	Function	ASBeautifier :: getPreprocDefineIndent	875:0:25116:25203							
ANR	613928	FunctionDef	ASBeautifier :: getPreprocDefineIndent ()		613927	0					
ANR	613929	CompoundStatement		876:0:25166:25203	613927	0					
ANR	613930	ReturnStatement	return shouldIndentPreprocDefine ;	877:1:25169:25201	613927	0	True				
ANR	613931	Identifier	shouldIndentPreprocDefine		613927	0					
ANR	613932	ReturnType	bool		613927	1					
ANR	613933	Identifier	ASBeautifier :: getPreprocDefineIndent		613927	2					
ANR	613934	ParameterList			613927	3					
ANR	613935	CFGEntryNode	ENTRY		613927		True				
ANR	613936	CFGExitNode	EXIT		613927		True				
ANR	613937	Symbol	shouldIndentPreprocDefine		613927						
ANR	613938	Function	ASBeautifier :: getTabLength	885:0:25308:25368							
ANR	613939	FunctionDef	ASBeautifier :: getTabLength ()		613938	0					
ANR	613940	CompoundStatement		886:0:25347:25368	613938	0					
ANR	613941	ReturnStatement	return tabLength ;	887:1:25350:25366	613938	0	True				
ANR	613942	Identifier	tabLength		613938	0					
ANR	613943	ReturnType	int		613938	1					
ANR	613944	Identifier	ASBeautifier :: getTabLength		613938	2					
ANR	613945	ParameterList			613938	3					
ANR	613946	CFGEntryNode	ENTRY		613938		True				
ANR	613947	CFGExitNode	EXIT		613938		True				
ANR	613948	Symbol	tabLength		613938						
ANR	613949	Function	ASBeautifier :: beautify	898:0:25624:37177							
ANR	613950	FunctionDef	ASBeautifier :: beautify (const string & originalLine)		613949	0					
ANR	613951	CompoundStatement		899:0:25682:37177	613949	0					
ANR	613952	IdentifierDeclStatement	string line ;	900:1:25685:25696	613949	0	True				
ANR	613953	IdentifierDecl	line		613949	0					
ANR	613954	IdentifierDeclType	string		613949	0					
ANR	613955	Identifier	line		613949	1					
ANR	613956	IdentifierDeclStatement	bool isInQuoteContinuation = isInVerbatimQuote || haveLineContinuationChar ;	901:1:25699:25773	613949	1	True				
ANR	613957	IdentifierDecl	isInQuoteContinuation = isInVerbatimQuote || haveLineContinuationChar		613949	0					
ANR	613958	IdentifierDeclType	bool		613949	0					
ANR	613959	Identifier	isInQuoteContinuation		613949	1					
ANR	613960	AssignmentExpression	isInQuoteContinuation = isInVerbatimQuote || haveLineContinuationChar		613949	2		=			
ANR	613961	Identifier	isInQuoteContinuation		613949	0					
ANR	613962	OrExpression	isInVerbatimQuote || haveLineContinuationChar		613949	1		||			
ANR	613963	Identifier	isInVerbatimQuote		613949	0					
ANR	613964	Identifier	haveLineContinuationChar		613949	1					
ANR	613965	ExpressionStatement	currentHeader = nullptr	903:1:25777:25800	613949	2	True				
ANR	613966	AssignmentExpression	currentHeader = nullptr		613949	0		=			
ANR	613967	Identifier	currentHeader		613949	0					
ANR	613968	Identifier	nullptr		613949	1					
ANR	613969	ExpressionStatement	lastLineHeader = nullptr	904:1:25803:25827	613949	3	True				
ANR	613970	AssignmentExpression	lastLineHeader = nullptr		613949	0		=			
ANR	613971	Identifier	lastLineHeader		613949	0					
ANR	613972	Identifier	nullptr		613949	1					
ANR	613973	ExpressionStatement	blockCommentNoBeautify = blockCommentNoIndent	905:1:25830:25875	613949	4	True				
ANR	613974	AssignmentExpression	blockCommentNoBeautify = blockCommentNoIndent		613949	0		=			
ANR	613975	Identifier	blockCommentNoBeautify		613949	0					
ANR	613976	Identifier	blockCommentNoIndent		613949	1					
ANR	613977	ExpressionStatement	isInClass = false	906:1:25878:25895	613949	5	True				
ANR	613978	AssignmentExpression	isInClass = false		613949	0		=			
ANR	613979	Identifier	isInClass		613949	0					
ANR	613980	Identifier	false		613949	1					
ANR	613981	ExpressionStatement	isInSwitch = false	907:1:25898:25916	613949	6	True				
ANR	613982	AssignmentExpression	isInSwitch = false		613949	0		=			
ANR	613983	Identifier	isInSwitch		613949	0					
ANR	613984	Identifier	false		613949	1					
ANR	613985	ExpressionStatement	lineBeginsWithOpenBrace = false	908:1:25919:25950	613949	7	True				
ANR	613986	AssignmentExpression	lineBeginsWithOpenBrace = false		613949	0		=			
ANR	613987	Identifier	lineBeginsWithOpenBrace		613949	0					
ANR	613988	Identifier	false		613949	1					
ANR	613989	ExpressionStatement	lineBeginsWithCloseBrace = false	909:1:25953:25985	613949	8	True				
ANR	613990	AssignmentExpression	lineBeginsWithCloseBrace = false		613949	0		=			
ANR	613991	Identifier	lineBeginsWithCloseBrace		613949	0					
ANR	613992	Identifier	false		613949	1					
ANR	613993	ExpressionStatement	lineBeginsWithComma = false	910:1:25988:26015	613949	9	True				
ANR	613994	AssignmentExpression	lineBeginsWithComma = false		613949	0		=			
ANR	613995	Identifier	lineBeginsWithComma		613949	0					
ANR	613996	Identifier	false		613949	1					
ANR	613997	ExpressionStatement	lineIsCommentOnly = false	911:1:26018:26043	613949	10	True				
ANR	613998	AssignmentExpression	lineIsCommentOnly = false		613949	0		=			
ANR	613999	Identifier	lineIsCommentOnly		613949	0					
ANR	614000	Identifier	false		613949	1					
ANR	614001	ExpressionStatement	lineIsLineCommentOnly = false	912:1:26046:26075	613949	11	True				
ANR	614002	AssignmentExpression	lineIsLineCommentOnly = false		613949	0		=			
ANR	614003	Identifier	lineIsLineCommentOnly		613949	0					
ANR	614004	Identifier	false		613949	1					
ANR	614005	ExpressionStatement	shouldIndentBracedLine = true	913:1:26078:26107	613949	12	True				
ANR	614006	AssignmentExpression	shouldIndentBracedLine = true		613949	0		=			
ANR	614007	Identifier	shouldIndentBracedLine		613949	0					
ANR	614008	Identifier	true		613949	1					
ANR	614009	ExpressionStatement	isInAsmOneLine = false	914:1:26110:26132	613949	13	True				
ANR	614010	AssignmentExpression	isInAsmOneLine = false		613949	0		=			
ANR	614011	Identifier	isInAsmOneLine		613949	0					
ANR	614012	Identifier	false		613949	1					
ANR	614013	ExpressionStatement	lineOpensWithLineComment = false	915:1:26135:26167	613949	14	True				
ANR	614014	AssignmentExpression	lineOpensWithLineComment = false		613949	0		=			
ANR	614015	Identifier	lineOpensWithLineComment		613949	0					
ANR	614016	Identifier	false		613949	1					
ANR	614017	ExpressionStatement	lineOpensWithComment = false	916:1:26170:26198	613949	15	True				
ANR	614018	AssignmentExpression	lineOpensWithComment = false		613949	0		=			
ANR	614019	Identifier	lineOpensWithComment		613949	0					
ANR	614020	Identifier	false		613949	1					
ANR	614021	ExpressionStatement	lineStartsInComment = isInComment	917:1:26201:26234	613949	16	True				
ANR	614022	AssignmentExpression	lineStartsInComment = isInComment		613949	0		=			
ANR	614023	Identifier	lineStartsInComment		613949	0					
ANR	614024	Identifier	isInComment		613949	1					
ANR	614025	ExpressionStatement	previousLineProbationTab = false	918:1:26237:26269	613949	17	True				
ANR	614026	AssignmentExpression	previousLineProbationTab = false		613949	0		=			
ANR	614027	Identifier	previousLineProbationTab		613949	0					
ANR	614028	Identifier	false		613949	1					
ANR	614029	ExpressionStatement	lineOpeningBlocksNum = 0	919:1:26272:26296	613949	18	True				
ANR	614030	AssignmentExpression	lineOpeningBlocksNum = 0		613949	0		=			
ANR	614031	Identifier	lineOpeningBlocksNum		613949	0					
ANR	614032	PrimaryExpression	0		613949	1					
ANR	614033	ExpressionStatement	lineClosingBlocksNum = 0	920:1:26299:26323	613949	19	True				
ANR	614034	AssignmentExpression	lineClosingBlocksNum = 0		613949	0		=			
ANR	614035	Identifier	lineClosingBlocksNum		613949	0					
ANR	614036	PrimaryExpression	0		613949	1					
ANR	614037	IfStatement	if ( isImmediatelyPostObjCMethodDefinition )		613949	20					
ANR	614038	Condition	isImmediatelyPostObjCMethodDefinition	921:5:26330:26366	613949	0	True				
ANR	614039	Identifier	isImmediatelyPostObjCMethodDefinition		613949	0					
ANR	614040	ExpressionStatement	clearObjCMethodDefinitionAlignment ( )	922:2:26371:26407	613949	1	True				
ANR	614041	CallExpression	clearObjCMethodDefinitionAlignment ( )		613949	0					
ANR	614042	Callee	clearObjCMethodDefinitionAlignment		613949	0					
ANR	614043	Identifier	clearObjCMethodDefinitionAlignment		613949	0					
ANR	614044	ArgumentList			613949	1					
ANR	614045	IfStatement	if ( isImmediatelyPostObjCMethodCall )		613949	21					
ANR	614046	Condition	isImmediatelyPostObjCMethodCall	923:5:26414:26444	613949	0	True				
ANR	614047	Identifier	isImmediatelyPostObjCMethodCall		613949	0					
ANR	614048	CompoundStatement		26:1:765:765	613949	1					
ANR	614049	ExpressionStatement	isImmediatelyPostObjCMethodCall = false	925:2:26452:26491	613949	0	True				
ANR	614050	AssignmentExpression	isImmediatelyPostObjCMethodCall = false		613949	0		=			
ANR	614051	Identifier	isImmediatelyPostObjCMethodCall		613949	0					
ANR	614052	Identifier	false		613949	1					
ANR	614053	ExpressionStatement	isInObjCMethodCall = false	926:2:26495:26521	613949	1	True				
ANR	614054	AssignmentExpression	isInObjCMethodCall = false		613949	0		=			
ANR	614055	Identifier	isInObjCMethodCall		613949	0					
ANR	614056	Identifier	false		613949	1					
ANR	614057	ExpressionStatement	objCColonAlignSubsequent = 0	927:2:26525:26553	613949	2	True				
ANR	614058	AssignmentExpression	objCColonAlignSubsequent = 0		613949	0		=			
ANR	614059	Identifier	objCColonAlignSubsequent		613949	0					
ANR	614060	PrimaryExpression	0		613949	1					
ANR	614061	IfStatement	if ( isInQuoteContinuation )		613949	22					
ANR	614062	Condition	isInQuoteContinuation	934:5:26795:26815	613949	0	True				
ANR	614063	Identifier	isInQuoteContinuation		613949	0					
ANR	614064	CompoundStatement		37:1:1136:1136	613949	1					
ANR	614065	IfStatement	if ( ! ( originalLine . length ( ) == 1 && originalLine [ 0 ] == ' ' ) )		613949	0					
ANR	614066	Condition	! ( originalLine . length ( ) == 1 && originalLine [ 0 ] == ' ' )	937:6:26899:26953	613949	0	True				
ANR	614067	UnaryOperationExpression	! ( originalLine . length ( ) == 1 && originalLine [ 0 ] == ' ' )		613949	0					
ANR	614068	UnaryOperator	!		613949	0					
ANR	614069	AndExpression	originalLine . length ( ) == 1 && originalLine [ 0 ] == ' '		613949	1		&&			
ANR	614070	EqualityExpression	originalLine . length ( ) == 1		613949	0		==			
ANR	614071	CallExpression	originalLine . length ( )		613949	0					
ANR	614072	Callee	originalLine . length		613949	0					
ANR	614073	MemberAccess	originalLine . length		613949	0					
ANR	614074	Identifier	originalLine		613949	0					
ANR	614075	Identifier	length		613949	1					
ANR	614076	ArgumentList			613949	1					
ANR	614077	PrimaryExpression	1		613949	1					
ANR	614078	EqualityExpression	originalLine [ 0 ] == ' '		613949	1		==			
ANR	614079	ArrayIndexing	originalLine [ 0 ]		613949	0					
ANR	614080	Identifier	originalLine		613949	0					
ANR	614081	PrimaryExpression	0		613949	1					
ANR	614082	PrimaryExpression	' '		613949	1					
ANR	614083	ExpressionStatement	line = originalLine	938:3:26959:26978	613949	1	True				
ANR	614084	AssignmentExpression	line = originalLine		613949	0		=			
ANR	614085	Identifier	line		613949	0					
ANR	614086	Identifier	originalLine		613949	1					
ANR	614087	ElseStatement	else		613949	0					
ANR	614088	IfStatement	if ( isInComment || isInBeautifySQL )		613949	0					
ANR	614089	Condition	isInComment || isInBeautifySQL	940:10:26993:27022	613949	0	True				
ANR	614090	OrExpression	isInComment || isInBeautifySQL		613949	0		||			
ANR	614091	Identifier	isInComment		613949	0					
ANR	614092	Identifier	isInBeautifySQL		613949	1					
ANR	614093	CompoundStatement		54:2:1617:1665	613949	1					
ANR	614094	ExpressionStatement	line = originalLine	943:2:27073:27092	613949	0	True				
ANR	614095	AssignmentExpression	line = originalLine		613949	0		=			
ANR	614096	Identifier	line		613949	0					
ANR	614097	Identifier	originalLine		613949	1					
ANR	614098	IdentifierDeclStatement	"size_t trimEnd = line . find_last_not_of ( "" \\t"" ) ;"	944:2:27096:27141	613949	1	True				
ANR	614099	IdentifierDecl	"trimEnd = line . find_last_not_of ( "" \\t"" )"		613949	0					
ANR	614100	IdentifierDeclType	size_t		613949	0					
ANR	614101	Identifier	trimEnd		613949	1					
ANR	614102	AssignmentExpression	"trimEnd = line . find_last_not_of ( "" \\t"" )"		613949	2		=			
ANR	614103	Identifier	trimEnd		613949	0					
ANR	614104	CallExpression	"line . find_last_not_of ( "" \\t"" )"		613949	1					
ANR	614105	Callee	line . find_last_not_of		613949	0					
ANR	614106	MemberAccess	line . find_last_not_of		613949	0					
ANR	614107	Identifier	line		613949	0					
ANR	614108	Identifier	find_last_not_of		613949	1					
ANR	614109	ArgumentList	""" \\t"""		613949	1					
ANR	614110	Argument	""" \\t"""		613949	0					
ANR	614111	PrimaryExpression	""" \\t"""		613949	0					
ANR	614112	IfStatement	if ( trimEnd == string :: npos )		613949	2					
ANR	614113	Condition	trimEnd == string :: npos	945:6:27149:27171	613949	0	True				
ANR	614114	EqualityExpression	trimEnd == string :: npos		613949	0		==			
ANR	614115	Identifier	trimEnd		613949	0					
ANR	614116	Identifier	string :: npos		613949	1					
ANR	614117	ExpressionStatement	trimEnd = 0	946:3:27177:27188	613949	1	True				
ANR	614118	AssignmentExpression	trimEnd = 0		613949	0		=			
ANR	614119	Identifier	trimEnd		613949	0					
ANR	614120	PrimaryExpression	0		613949	1					
ANR	614121	ElseStatement	else		613949	0					
ANR	614122	ExpressionStatement	trimEnd ++	948:3:27200:27209	613949	0	True				
ANR	614123	PostIncDecOperationExpression	trimEnd ++		613949	0					
ANR	614124	Identifier	trimEnd		613949	0					
ANR	614125	IncDec	++		613949	1					
ANR	614126	IfStatement	if ( trimEnd < line . length ( ) )		613949	3					
ANR	614127	Condition	trimEnd < line . length ( )	949:6:27217:27239	613949	0	True				
ANR	614128	RelationalExpression	trimEnd < line . length ( )		613949	0		<			
ANR	614129	Identifier	trimEnd		613949	0					
ANR	614130	CallExpression	line . length ( )		613949	1					
ANR	614131	Callee	line . length		613949	0					
ANR	614132	MemberAccess	line . length		613949	0					
ANR	614133	Identifier	line		613949	0					
ANR	614134	Identifier	length		613949	1					
ANR	614135	ArgumentList			613949	1					
ANR	614136	ExpressionStatement	line . erase ( trimEnd )	950:3:27245:27264	613949	1	True				
ANR	614137	CallExpression	line . erase ( trimEnd )		613949	0					
ANR	614138	Callee	line . erase		613949	0					
ANR	614139	MemberAccess	line . erase		613949	0					
ANR	614140	Identifier	line		613949	0					
ANR	614141	Identifier	erase		613949	1					
ANR	614142	ArgumentList	trimEnd		613949	1					
ANR	614143	Argument	trimEnd		613949	0					
ANR	614144	Identifier	trimEnd		613949	0					
ANR	614145	IdentifierDeclStatement	"size_t firstChar = line . find_first_not_of ( "" \\t"" ) ;"	952:2:27300:27348	613949	4	True				
ANR	614146	IdentifierDecl	"firstChar = line . find_first_not_of ( "" \\t"" )"		613949	0					
ANR	614147	IdentifierDeclType	size_t		613949	0					
ANR	614148	Identifier	firstChar		613949	1					
ANR	614149	AssignmentExpression	"firstChar = line . find_first_not_of ( "" \\t"" )"		613949	2		=			
ANR	614150	Identifier	firstChar		613949	0					
ANR	614151	CallExpression	"line . find_first_not_of ( "" \\t"" )"		613949	1					
ANR	614152	Callee	line . find_first_not_of		613949	0					
ANR	614153	MemberAccess	line . find_first_not_of		613949	0					
ANR	614154	Identifier	line		613949	0					
ANR	614155	Identifier	find_first_not_of		613949	1					
ANR	614156	ArgumentList	""" \\t"""		613949	1					
ANR	614157	Argument	""" \\t"""		613949	0					
ANR	614158	PrimaryExpression	""" \\t"""		613949	0					
ANR	614159	IfStatement	if ( firstChar != string :: npos )		613949	5					
ANR	614160	Condition	firstChar != string :: npos	953:6:27356:27380	613949	0	True				
ANR	614161	EqualityExpression	firstChar != string :: npos		613949	0		!=			
ANR	614162	Identifier	firstChar		613949	0					
ANR	614163	Identifier	string :: npos		613949	1					
ANR	614164	CompoundStatement		56:2:1702:1702	613949	1					
ANR	614165	IfStatement	if ( line [ firstChar ] == '{' )		613949	0					
ANR	614166	Condition	line [ firstChar ] == '{'	955:7:27394:27415	613949	0	True				
ANR	614167	EqualityExpression	line [ firstChar ] == '{'		613949	0		==			
ANR	614168	ArrayIndexing	line [ firstChar ]		613949	0					
ANR	614169	Identifier	line		613949	0					
ANR	614170	Identifier	firstChar		613949	1					
ANR	614171	PrimaryExpression	'{'		613949	1					
ANR	614172	ExpressionStatement	lineBeginsWithOpenBrace = true	956:4:27422:27452	613949	1	True				
ANR	614173	AssignmentExpression	lineBeginsWithOpenBrace = true		613949	0		=			
ANR	614174	Identifier	lineBeginsWithOpenBrace		613949	0					
ANR	614175	Identifier	true		613949	1					
ANR	614176	ElseStatement	else		613949	0					
ANR	614177	IfStatement	if ( line [ firstChar ] == '}' )		613949	0					
ANR	614178	Condition	line [ firstChar ] == '}'	957:12:27466:27487	613949	0	True				
ANR	614179	EqualityExpression	line [ firstChar ] == '}'		613949	0		==			
ANR	614180	ArrayIndexing	line [ firstChar ]		613949	0					
ANR	614181	Identifier	line		613949	0					
ANR	614182	Identifier	firstChar		613949	1					
ANR	614183	PrimaryExpression	'}'		613949	1					
ANR	614184	ExpressionStatement	lineBeginsWithCloseBrace = true	958:4:27494:27525	613949	1	True				
ANR	614185	AssignmentExpression	lineBeginsWithCloseBrace = true		613949	0		=			
ANR	614186	Identifier	lineBeginsWithCloseBrace		613949	0					
ANR	614187	Identifier	true		613949	1					
ANR	614188	ElseStatement	else		613949	0					
ANR	614189	IfStatement	"if ( line [ firstChar ] == ',' )"		613949	0					
ANR	614190	Condition	"line [ firstChar ] == ','"	959:12:27539:27560	613949	0	True				
ANR	614191	EqualityExpression	"line [ firstChar ] == ','"		613949	0		==			
ANR	614192	ArrayIndexing	line [ firstChar ]		613949	0					
ANR	614193	Identifier	line		613949	0					
ANR	614194	Identifier	firstChar		613949	1					
ANR	614195	PrimaryExpression	"','"		613949	1					
ANR	614196	ExpressionStatement	lineBeginsWithComma = true	960:4:27567:27593	613949	1	True				
ANR	614197	AssignmentExpression	lineBeginsWithComma = true		613949	0		=			
ANR	614198	Identifier	lineBeginsWithComma		613949	0					
ANR	614199	Identifier	true		613949	1					
ANR	614200	ElseStatement	else		613949	0					
ANR	614201	CompoundStatement		86:2:2410:2451	613949	0					
ANR	614202	ExpressionStatement	line = trim ( originalLine )	965:2:27613:27638	613949	0	True				
ANR	614203	AssignmentExpression	line = trim ( originalLine )		613949	0		=			
ANR	614204	Identifier	line		613949	0					
ANR	614205	CallExpression	trim ( originalLine )		613949	1					
ANR	614206	Callee	trim		613949	0					
ANR	614207	Identifier	trim		613949	0					
ANR	614208	ArgumentList	originalLine		613949	1					
ANR	614209	Argument	originalLine		613949	0					
ANR	614210	Identifier	originalLine		613949	0					
ANR	614211	IfStatement	if ( line . length ( ) > 0 )		613949	1					
ANR	614212	Condition	line . length ( ) > 0	966:6:27646:27662	613949	0	True				
ANR	614213	RelationalExpression	line . length ( ) > 0		613949	0		>			
ANR	614214	CallExpression	line . length ( )		613949	0					
ANR	614215	Callee	line . length		613949	0					
ANR	614216	MemberAccess	line . length		613949	0					
ANR	614217	Identifier	line		613949	0					
ANR	614218	Identifier	length		613949	1					
ANR	614219	ArgumentList			613949	1					
ANR	614220	PrimaryExpression	0		613949	1					
ANR	614221	CompoundStatement		69:2:1984:1984	613949	1					
ANR	614222	IfStatement	if ( line [ 0 ] == '{' )		613949	0					
ANR	614223	Condition	line [ 0 ] == '{'	968:7:27676:27689	613949	0	True				
ANR	614224	EqualityExpression	line [ 0 ] == '{'		613949	0		==			
ANR	614225	ArrayIndexing	line [ 0 ]		613949	0					
ANR	614226	Identifier	line		613949	0					
ANR	614227	PrimaryExpression	0		613949	1					
ANR	614228	PrimaryExpression	'{'		613949	1					
ANR	614229	ExpressionStatement	lineBeginsWithOpenBrace = true	969:4:27696:27726	613949	1	True				
ANR	614230	AssignmentExpression	lineBeginsWithOpenBrace = true		613949	0		=			
ANR	614231	Identifier	lineBeginsWithOpenBrace		613949	0					
ANR	614232	Identifier	true		613949	1					
ANR	614233	ElseStatement	else		613949	0					
ANR	614234	IfStatement	if ( line [ 0 ] == '}' )		613949	0					
ANR	614235	Condition	line [ 0 ] == '}'	970:12:27740:27753	613949	0	True				
ANR	614236	EqualityExpression	line [ 0 ] == '}'		613949	0		==			
ANR	614237	ArrayIndexing	line [ 0 ]		613949	0					
ANR	614238	Identifier	line		613949	0					
ANR	614239	PrimaryExpression	0		613949	1					
ANR	614240	PrimaryExpression	'}'		613949	1					
ANR	614241	ExpressionStatement	lineBeginsWithCloseBrace = true	971:4:27760:27791	613949	1	True				
ANR	614242	AssignmentExpression	lineBeginsWithCloseBrace = true		613949	0		=			
ANR	614243	Identifier	lineBeginsWithCloseBrace		613949	0					
ANR	614244	Identifier	true		613949	1					
ANR	614245	ElseStatement	else		613949	0					
ANR	614246	IfStatement	"if ( line [ 0 ] == ',' )"		613949	0					
ANR	614247	Condition	"line [ 0 ] == ','"	972:12:27805:27818	613949	0	True				
ANR	614248	EqualityExpression	"line [ 0 ] == ','"		613949	0		==			
ANR	614249	ArrayIndexing	line [ 0 ]		613949	0					
ANR	614250	Identifier	line		613949	0					
ANR	614251	PrimaryExpression	0		613949	1					
ANR	614252	PrimaryExpression	"','"		613949	1					
ANR	614253	ExpressionStatement	lineBeginsWithComma = true	973:4:27825:27851	613949	1	True				
ANR	614254	AssignmentExpression	lineBeginsWithComma = true		613949	0		=			
ANR	614255	Identifier	lineBeginsWithComma		613949	0					
ANR	614256	Identifier	true		613949	1					
ANR	614257	ElseStatement	else		613949	0					
ANR	614258	IfStatement	"if ( line . compare ( 0 , 2 , ""//"" ) == 0 )"		613949	0					
ANR	614259	Condition	"line . compare ( 0 , 2 , ""//"" ) == 0"	974:12:27865:27893	613949	0	True				
ANR	614260	EqualityExpression	"line . compare ( 0 , 2 , ""//"" ) == 0"		613949	0		==			
ANR	614261	CallExpression	"line . compare ( 0 , 2 , ""//"" )"		613949	0					
ANR	614262	Callee	line . compare		613949	0					
ANR	614263	MemberAccess	line . compare		613949	0					
ANR	614264	Identifier	line		613949	0					
ANR	614265	Identifier	compare		613949	1					
ANR	614266	ArgumentList	0		613949	1					
ANR	614267	Argument	0		613949	0					
ANR	614268	PrimaryExpression	0		613949	0					
ANR	614269	Argument	2		613949	1					
ANR	614270	PrimaryExpression	2		613949	0					
ANR	614271	Argument	"""//"""		613949	2					
ANR	614272	PrimaryExpression	"""//"""		613949	0					
ANR	614273	PrimaryExpression	0		613949	1					
ANR	614274	ExpressionStatement	lineIsLineCommentOnly = true	975:4:27900:27928	613949	1	True				
ANR	614275	AssignmentExpression	lineIsLineCommentOnly = true		613949	0		=			
ANR	614276	Identifier	lineIsLineCommentOnly		613949	0					
ANR	614277	Identifier	true		613949	1					
ANR	614278	ElseStatement	else		613949	0					
ANR	614279	IfStatement	"if ( line . compare ( 0 , 2 , ""/*"" ) == 0 )"		613949	0					
ANR	614280	Condition	"line . compare ( 0 , 2 , ""/*"" ) == 0"	976:12:27942:27970	613949	0	True				
ANR	614281	EqualityExpression	"line . compare ( 0 , 2 , ""/*"" ) == 0"		613949	0		==			
ANR	614282	CallExpression	"line . compare ( 0 , 2 , ""/*"" )"		613949	0					
ANR	614283	Callee	line . compare		613949	0					
ANR	614284	MemberAccess	line . compare		613949	0					
ANR	614285	Identifier	line		613949	0					
ANR	614286	Identifier	compare		613949	1					
ANR	614287	ArgumentList	0		613949	1					
ANR	614288	Argument	0		613949	0					
ANR	614289	PrimaryExpression	0		613949	0					
ANR	614290	Argument	2		613949	1					
ANR	614291	PrimaryExpression	2		613949	0					
ANR	614292	Argument	"""/*"""		613949	2					
ANR	614293	PrimaryExpression	"""/*"""		613949	0					
ANR	614294	PrimaryExpression	0		613949	1					
ANR	614295	CompoundStatement		79:3:2293:2293	613949	1					
ANR	614296	IfStatement	"if ( line . find ( ""*/"" , 2 ) != string :: npos )"		613949	0					
ANR	614297	Condition	"line . find ( ""*/"" , 2 ) != string :: npos"	978:8:27986:28019	613949	0	True				
ANR	614298	EqualityExpression	"line . find ( ""*/"" , 2 ) != string :: npos"		613949	0		!=			
ANR	614299	CallExpression	"line . find ( ""*/"" , 2 )"		613949	0					
ANR	614300	Callee	line . find		613949	0					
ANR	614301	MemberAccess	line . find		613949	0					
ANR	614302	Identifier	line		613949	0					
ANR	614303	Identifier	find		613949	1					
ANR	614304	ArgumentList	"""*/"""		613949	1					
ANR	614305	Argument	"""*/"""		613949	0					
ANR	614306	PrimaryExpression	"""*/"""		613949	0					
ANR	614307	Argument	2		613949	1					
ANR	614308	PrimaryExpression	2		613949	0					
ANR	614309	Identifier	string :: npos		613949	1					
ANR	614310	ExpressionStatement	lineIsCommentOnly = true	979:5:28027:28051	613949	1	True				
ANR	614311	AssignmentExpression	lineIsCommentOnly = true		613949	0		=			
ANR	614312	Identifier	lineIsCommentOnly		613949	0					
ANR	614313	Identifier	true		613949	1					
ANR	614314	ExpressionStatement	isInRunInComment = false	983:2:28065:28089	613949	2	True				
ANR	614315	AssignmentExpression	isInRunInComment = false		613949	0		=			
ANR	614316	Identifier	isInRunInComment		613949	0					
ANR	614317	Identifier	false		613949	1					
ANR	614318	IdentifierDeclStatement	"size_t j = line . find_first_not_of ( "" \\t{"" ) ;"	984:2:28093:28134	613949	3	True				
ANR	614319	IdentifierDecl	"j = line . find_first_not_of ( "" \\t{"" )"		613949	0					
ANR	614320	IdentifierDeclType	size_t		613949	0					
ANR	614321	Identifier	j		613949	1					
ANR	614322	AssignmentExpression	"j = line . find_first_not_of ( "" \\t{"" )"		613949	2		=			
ANR	614323	Identifier	j		613949	0					
ANR	614324	CallExpression	"line . find_first_not_of ( "" \\t{"" )"		613949	1					
ANR	614325	Callee	line . find_first_not_of		613949	0					
ANR	614326	MemberAccess	line . find_first_not_of		613949	0					
ANR	614327	Identifier	line		613949	0					
ANR	614328	Identifier	find_first_not_of		613949	1					
ANR	614329	ArgumentList	""" \\t{"""		613949	1					
ANR	614330	Argument	""" \\t{"""		613949	0					
ANR	614331	PrimaryExpression	""" \\t{"""		613949	0					
ANR	614332	IfStatement	"if ( j != string :: npos && line . compare ( j , 2 , ""//"" ) == 0 )"		613949	4					
ANR	614333	Condition	"j != string :: npos && line . compare ( j , 2 , ""//"" ) == 0"	985:6:28142:28191	613949	0	True				
ANR	614334	AndExpression	"j != string :: npos && line . compare ( j , 2 , ""//"" ) == 0"		613949	0		&&			
ANR	614335	EqualityExpression	j != string :: npos		613949	0		!=			
ANR	614336	Identifier	j		613949	0					
ANR	614337	Identifier	string :: npos		613949	1					
ANR	614338	EqualityExpression	"line . compare ( j , 2 , ""//"" ) == 0"		613949	1		==			
ANR	614339	CallExpression	"line . compare ( j , 2 , ""//"" )"		613949	0					
ANR	614340	Callee	line . compare		613949	0					
ANR	614341	MemberAccess	line . compare		613949	0					
ANR	614342	Identifier	line		613949	0					
ANR	614343	Identifier	compare		613949	1					
ANR	614344	ArgumentList	j		613949	1					
ANR	614345	Argument	j		613949	0					
ANR	614346	Identifier	j		613949	0					
ANR	614347	Argument	2		613949	1					
ANR	614348	PrimaryExpression	2		613949	0					
ANR	614349	Argument	"""//"""		613949	2					
ANR	614350	PrimaryExpression	"""//"""		613949	0					
ANR	614351	PrimaryExpression	0		613949	1					
ANR	614352	ExpressionStatement	lineOpensWithLineComment = true	986:3:28197:28228	613949	1	True				
ANR	614353	AssignmentExpression	lineOpensWithLineComment = true		613949	0		=			
ANR	614354	Identifier	lineOpensWithLineComment		613949	0					
ANR	614355	Identifier	true		613949	1					
ANR	614356	IfStatement	"if ( j != string :: npos && line . compare ( j , 2 , ""/*"" ) == 0 )"		613949	5					
ANR	614357	Condition	"j != string :: npos && line . compare ( j , 2 , ""/*"" ) == 0"	987:6:28236:28285	613949	0	True				
ANR	614358	AndExpression	"j != string :: npos && line . compare ( j , 2 , ""/*"" ) == 0"		613949	0		&&			
ANR	614359	EqualityExpression	j != string :: npos		613949	0		!=			
ANR	614360	Identifier	j		613949	0					
ANR	614361	Identifier	string :: npos		613949	1					
ANR	614362	EqualityExpression	"line . compare ( j , 2 , ""/*"" ) == 0"		613949	1		==			
ANR	614363	CallExpression	"line . compare ( j , 2 , ""/*"" )"		613949	0					
ANR	614364	Callee	line . compare		613949	0					
ANR	614365	MemberAccess	line . compare		613949	0					
ANR	614366	Identifier	line		613949	0					
ANR	614367	Identifier	compare		613949	1					
ANR	614368	ArgumentList	j		613949	1					
ANR	614369	Argument	j		613949	0					
ANR	614370	Identifier	j		613949	0					
ANR	614371	Argument	2		613949	1					
ANR	614372	PrimaryExpression	2		613949	0					
ANR	614373	Argument	"""/*"""		613949	2					
ANR	614374	PrimaryExpression	"""/*"""		613949	0					
ANR	614375	PrimaryExpression	0		613949	1					
ANR	614376	CompoundStatement		92:3:2644:2684	613949	1					
ANR	614377	ExpressionStatement	lineOpensWithComment = true	989:3:28295:28322	613949	0	True				
ANR	614378	AssignmentExpression	lineOpensWithComment = true		613949	0		=			
ANR	614379	Identifier	lineOpensWithComment		613949	0					
ANR	614380	Identifier	true		613949	1					
ANR	614381	IdentifierDeclStatement	"size_t k = line . find_first_not_of ( "" \\t"" ) ;"	990:3:28327:28367	613949	1	True				
ANR	614382	IdentifierDecl	"k = line . find_first_not_of ( "" \\t"" )"		613949	0					
ANR	614383	IdentifierDeclType	size_t		613949	0					
ANR	614384	Identifier	k		613949	1					
ANR	614385	AssignmentExpression	"k = line . find_first_not_of ( "" \\t"" )"		613949	2		=			
ANR	614386	Identifier	k		613949	0					
ANR	614387	CallExpression	"line . find_first_not_of ( "" \\t"" )"		613949	1					
ANR	614388	Callee	line . find_first_not_of		613949	0					
ANR	614389	MemberAccess	line . find_first_not_of		613949	0					
ANR	614390	Identifier	line		613949	0					
ANR	614391	Identifier	find_first_not_of		613949	1					
ANR	614392	ArgumentList	""" \\t"""		613949	1					
ANR	614393	Argument	""" \\t"""		613949	0					
ANR	614394	PrimaryExpression	""" \\t"""		613949	0					
ANR	614395	IfStatement	"if ( k != string :: npos && line . compare ( k , 1 , ""{"" ) == 0 )"		613949	2					
ANR	614396	Condition	"k != string :: npos && line . compare ( k , 1 , ""{"" ) == 0"	991:7:28376:28424	613949	0	True				
ANR	614397	AndExpression	"k != string :: npos && line . compare ( k , 1 , ""{"" ) == 0"		613949	0		&&			
ANR	614398	EqualityExpression	k != string :: npos		613949	0		!=			
ANR	614399	Identifier	k		613949	0					
ANR	614400	Identifier	string :: npos		613949	1					
ANR	614401	EqualityExpression	"line . compare ( k , 1 , ""{"" ) == 0"		613949	1		==			
ANR	614402	CallExpression	"line . compare ( k , 1 , ""{"" )"		613949	0					
ANR	614403	Callee	line . compare		613949	0					
ANR	614404	MemberAccess	line . compare		613949	0					
ANR	614405	Identifier	line		613949	0					
ANR	614406	Identifier	compare		613949	1					
ANR	614407	ArgumentList	k		613949	1					
ANR	614408	Argument	k		613949	0					
ANR	614409	Identifier	k		613949	0					
ANR	614410	Argument	1		613949	1					
ANR	614411	PrimaryExpression	1		613949	0					
ANR	614412	Argument	"""{"""		613949	2					
ANR	614413	PrimaryExpression	"""{"""		613949	0					
ANR	614414	PrimaryExpression	0		613949	1					
ANR	614415	ExpressionStatement	isInRunInComment = true	992:4:28431:28454	613949	1	True				
ANR	614416	AssignmentExpression	isInRunInComment = true		613949	0		=			
ANR	614417	Identifier	isInRunInComment		613949	0					
ANR	614418	Identifier	true		613949	1					
ANR	614419	IfStatement	"if ( ( lineIsLineCommentOnly || lineIsCommentOnly ) && line . find ( ""*INDENT-OFF*"" , 0 ) != string :: npos )"		613949	23					
ANR	614420	Condition	"( lineIsLineCommentOnly || lineIsCommentOnly ) && line . find ( ""*INDENT-OFF*"" , 0 ) != string :: npos"	998:5:28620:28720	613949	0	True				
ANR	614421	AndExpression	"( lineIsLineCommentOnly || lineIsCommentOnly ) && line . find ( ""*INDENT-OFF*"" , 0 ) != string :: npos"		613949	0		&&			
ANR	614422	OrExpression	lineIsLineCommentOnly || lineIsCommentOnly		613949	0		||			
ANR	614423	Identifier	lineIsLineCommentOnly		613949	0					
ANR	614424	Identifier	lineIsCommentOnly		613949	1					
ANR	614425	EqualityExpression	"line . find ( ""*INDENT-OFF*"" , 0 ) != string :: npos"		613949	1		!=			
ANR	614426	CallExpression	"line . find ( ""*INDENT-OFF*"" , 0 )"		613949	0					
ANR	614427	Callee	line . find		613949	0					
ANR	614428	MemberAccess	line . find		613949	0					
ANR	614429	Identifier	line		613949	0					
ANR	614430	Identifier	find		613949	1					
ANR	614431	ArgumentList	"""*INDENT-OFF*"""		613949	1					
ANR	614432	Argument	"""*INDENT-OFF*"""		613949	0					
ANR	614433	PrimaryExpression	"""*INDENT-OFF*"""		613949	0					
ANR	614434	Argument	0		613949	1					
ANR	614435	PrimaryExpression	0		613949	0					
ANR	614436	Identifier	string :: npos		613949	1					
ANR	614437	ExpressionStatement	isIndentModeOff = true	1000:2:28725:28747	613949	1	True				
ANR	614438	AssignmentExpression	isIndentModeOff = true		613949	0		=			
ANR	614439	Identifier	isIndentModeOff		613949	0					
ANR	614440	Identifier	true		613949	1					
ANR	614441	IfStatement	if ( line . length ( ) == 0 )		613949	24					
ANR	614442	Condition	line . length ( ) == 0	1002:5:28755:28772	613949	0	True				
ANR	614443	EqualityExpression	line . length ( ) == 0		613949	0		==			
ANR	614444	CallExpression	line . length ( )		613949	0					
ANR	614445	Callee	line . length		613949	0					
ANR	614446	MemberAccess	line . length		613949	0					
ANR	614447	Identifier	line		613949	0					
ANR	614448	Identifier	length		613949	1					
ANR	614449	ArgumentList			613949	1					
ANR	614450	PrimaryExpression	0		613949	1					
ANR	614451	CompoundStatement		105:1:3093:3093	613949	1					
ANR	614452	IfStatement	if ( backslashEndsPrevLine )		613949	0					
ANR	614453	Condition	backslashEndsPrevLine	1004:6:28784:28804	613949	0	True				
ANR	614454	Identifier	backslashEndsPrevLine		613949	0					
ANR	614455	CompoundStatement		107:2:3126:3126	613949	1					
ANR	614456	ExpressionStatement	backslashEndsPrevLine = false	1006:3:28814:28843	613949	0	True				
ANR	614457	AssignmentExpression	backslashEndsPrevLine = false		613949	0		=			
ANR	614458	Identifier	backslashEndsPrevLine		613949	0					
ANR	614459	Identifier	false		613949	1					
ANR	614460	IfStatement	if ( isInDefineDefinition && ! isInDefine )		613949	1					
ANR	614461	Condition	isInDefineDefinition && ! isInDefine	1010:7:29009:29043	613949	0	True				
ANR	614462	AndExpression	isInDefineDefinition && ! isInDefine		613949	0		&&			
ANR	614463	Identifier	isInDefineDefinition		613949	0					
ANR	614464	UnaryOperationExpression	! isInDefine		613949	1					
ANR	614465	UnaryOperator	!		613949	0					
ANR	614466	Identifier	isInDefine		613949	1					
ANR	614467	CompoundStatement		115:4:3406:3468	613949	1					
ANR	614468	ExpressionStatement	isInDefineDefinition = false	1012:4:29055:29083	613949	0	True				
ANR	614469	AssignmentExpression	isInDefineDefinition = false		613949	0		=			
ANR	614470	Identifier	isInDefineDefinition		613949	0					
ANR	614471	Identifier	false		613949	1					
ANR	614472	IdentifierDeclStatement	ASBeautifier * defineBeautifier = activeBeautifierStack -> back ( ) ;	1013:4:29089:29151	613949	1	True				
ANR	614473	IdentifierDecl	* defineBeautifier = activeBeautifierStack -> back ( )		613949	0					
ANR	614474	IdentifierDeclType	ASBeautifier *		613949	0					
ANR	614475	Identifier	defineBeautifier		613949	1					
ANR	614476	AssignmentExpression	* defineBeautifier = activeBeautifierStack -> back ( )		613949	2		=			
ANR	614477	Identifier	defineBeautifier		613949	0					
ANR	614478	CallExpression	activeBeautifierStack -> back ( )		613949	1					
ANR	614479	Callee	activeBeautifierStack -> back		613949	0					
ANR	614480	PtrMemberAccess	activeBeautifierStack -> back		613949	0					
ANR	614481	Identifier	activeBeautifierStack		613949	0					
ANR	614482	Identifier	back		613949	1					
ANR	614483	ArgumentList			613949	1					
ANR	614484	ExpressionStatement	activeBeautifierStack -> pop_back ( )	1014:4:29157:29190	613949	2	True				
ANR	614485	CallExpression	activeBeautifierStack -> pop_back ( )		613949	0					
ANR	614486	Callee	activeBeautifierStack -> pop_back		613949	0					
ANR	614487	PtrMemberAccess	activeBeautifierStack -> pop_back		613949	0					
ANR	614488	Identifier	activeBeautifierStack		613949	0					
ANR	614489	Identifier	pop_back		613949	1					
ANR	614490	ArgumentList			613949	1					
ANR	614491	Statement	delete	1015:4:29196:29201	613949	3	True				
ANR	614492	ExpressionStatement	defineBeautifier	1015:11:29203:29219	613949	4	True				
ANR	614493	Identifier	defineBeautifier		613949	0					
ANR	614494	IfStatement	if ( emptyLineFill && ! isInQuoteContinuation )		613949	1					
ANR	614495	Condition	emptyLineFill && ! isInQuoteContinuation	1018:6:29236:29274	613949	0	True				
ANR	614496	AndExpression	emptyLineFill && ! isInQuoteContinuation		613949	0		&&			
ANR	614497	Identifier	emptyLineFill		613949	0					
ANR	614498	UnaryOperationExpression	! isInQuoteContinuation		613949	1					
ANR	614499	UnaryOperator	!		613949	0					
ANR	614500	Identifier	isInQuoteContinuation		613949	1					
ANR	614501	CompoundStatement		121:2:3596:3596	613949	1					
ANR	614502	IfStatement	if ( isInIndentablePreprocBlock )		613949	0					
ANR	614503	Condition	isInIndentablePreprocBlock	1020:7:29288:29313	613949	0	True				
ANR	614504	Identifier	isInIndentablePreprocBlock		613949	0					
ANR	614505	ReturnStatement	"return preLineWS ( preprocBlockIndent , 0 ) ;"	1021:4:29320:29359	613949	1	True				
ANR	614506	CallExpression	"preLineWS ( preprocBlockIndent , 0 )"		613949	0					
ANR	614507	Callee	preLineWS		613949	0					
ANR	614508	Identifier	preLineWS		613949	0					
ANR	614509	ArgumentList	preprocBlockIndent		613949	1					
ANR	614510	Argument	preprocBlockIndent		613949	0					
ANR	614511	Identifier	preprocBlockIndent		613949	0					
ANR	614512	Argument	0		613949	1					
ANR	614513	PrimaryExpression	0		613949	0					
ANR	614514	IfStatement	if ( ! headerStack -> empty ( ) || isInEnum )		613949	1					
ANR	614515	Condition	! headerStack -> empty ( ) || isInEnum	1022:7:29368:29400	613949	0	True				
ANR	614516	OrExpression	! headerStack -> empty ( ) || isInEnum		613949	0		||			
ANR	614517	UnaryOperationExpression	! headerStack -> empty ( )		613949	0					
ANR	614518	UnaryOperator	!		613949	0					
ANR	614519	CallExpression	headerStack -> empty ( )		613949	1					
ANR	614520	Callee	headerStack -> empty		613949	0					
ANR	614521	PtrMemberAccess	headerStack -> empty		613949	0					
ANR	614522	Identifier	headerStack		613949	0					
ANR	614523	Identifier	empty		613949	1					
ANR	614524	ArgumentList			613949	1					
ANR	614525	Identifier	isInEnum		613949	1					
ANR	614526	ReturnStatement	"return preLineWS ( prevFinalLineIndentCount , prevFinalLineSpaceIndentCount ) ;"	1023:4:29407:29480	613949	1	True				
ANR	614527	CallExpression	"preLineWS ( prevFinalLineIndentCount , prevFinalLineSpaceIndentCount )"		613949	0					
ANR	614528	Callee	preLineWS		613949	0					
ANR	614529	Identifier	preLineWS		613949	0					
ANR	614530	ArgumentList	prevFinalLineIndentCount		613949	1					
ANR	614531	Argument	prevFinalLineIndentCount		613949	0					
ANR	614532	Identifier	prevFinalLineIndentCount		613949	0					
ANR	614533	Argument	prevFinalLineSpaceIndentCount		613949	1					
ANR	614534	Identifier	prevFinalLineSpaceIndentCount		613949	0					
ANR	614535	ElseStatement	else		613949	0					
ANR	614536	ReturnStatement	return line ;	1027:3:29522:29533	613949	0	True				
ANR	614537	Identifier	line		613949	0					
ANR	614538	IfStatement	if ( isInIndentablePreprocBlock && line . length ( ) > 0 && line [ 0 ] != '#' )		613949	25					
ANR	614539	Condition	isInIndentablePreprocBlock && line . length ( ) > 0 && line [ 0 ] != '#'	1031:5:29577:29659	613949	0	True				
ANR	614540	AndExpression	isInIndentablePreprocBlock && line . length ( ) > 0 && line [ 0 ] != '#'		613949	0		&&			
ANR	614541	Identifier	isInIndentablePreprocBlock		613949	0					
ANR	614542	AndExpression	line . length ( ) > 0 && line [ 0 ] != '#'		613949	1		&&			
ANR	614543	RelationalExpression	line . length ( ) > 0		613949	0		>			
ANR	614544	CallExpression	line . length ( )		613949	0					
ANR	614545	Callee	line . length		613949	0					
ANR	614546	MemberAccess	line . length		613949	0					
ANR	614547	Identifier	line		613949	0					
ANR	614548	Identifier	length		613949	1					
ANR	614549	ArgumentList			613949	1					
ANR	614550	PrimaryExpression	0		613949	1					
ANR	614551	EqualityExpression	line [ 0 ] != '#'		613949	1		!=			
ANR	614552	ArrayIndexing	line [ 0 ]		613949	0					
ANR	614553	Identifier	line		613949	0					
ANR	614554	PrimaryExpression	0		613949	1					
ANR	614555	PrimaryExpression	'#'		613949	1					
ANR	614556	CompoundStatement		137:2:3984:4003	613949	1					
ANR	614557	IdentifierDeclStatement	string indentedLine ;	1035:2:29667:29686	613949	0	True				
ANR	614558	IdentifierDecl	indentedLine		613949	0					
ANR	614559	IdentifierDeclType	string		613949	0					
ANR	614560	Identifier	indentedLine		613949	1					
ANR	614561	IfStatement	if ( isInClassHeaderTab || isInClassInitializer )		613949	1					
ANR	614562	Condition	isInClassHeaderTab || isInClassInitializer	1036:6:29694:29735	613949	0	True				
ANR	614563	OrExpression	isInClassHeaderTab || isInClassInitializer		613949	0		||			
ANR	614564	Identifier	isInClassHeaderTab		613949	0					
ANR	614565	Identifier	isInClassInitializer		613949	1					
ANR	614566	CompoundStatement		139:2:4057:4057	613949	1					
ANR	614567	ExpressionStatement	"indentedLine = preLineWS ( prevFinalLineIndentCount , prevFinalLineSpaceIndentCount ) + line"	1040:3:29862:29950	613949	0	True				
ANR	614568	AssignmentExpression	"indentedLine = preLineWS ( prevFinalLineIndentCount , prevFinalLineSpaceIndentCount ) + line"		613949	0		=			
ANR	614569	Identifier	indentedLine		613949	0					
ANR	614570	AdditiveExpression	"preLineWS ( prevFinalLineIndentCount , prevFinalLineSpaceIndentCount ) + line"		613949	1		+			
ANR	614571	CallExpression	"preLineWS ( prevFinalLineIndentCount , prevFinalLineSpaceIndentCount )"		613949	0					
ANR	614572	Callee	preLineWS		613949	0					
ANR	614573	Identifier	preLineWS		613949	0					
ANR	614574	ArgumentList	prevFinalLineIndentCount		613949	1					
ANR	614575	Argument	prevFinalLineIndentCount		613949	0					
ANR	614576	Identifier	prevFinalLineIndentCount		613949	0					
ANR	614577	Argument	prevFinalLineSpaceIndentCount		613949	1					
ANR	614578	Identifier	prevFinalLineSpaceIndentCount		613949	0					
ANR	614579	Identifier	line		613949	1					
ANR	614580	ReturnStatement	"return getIndentedLineReturn ( indentedLine , originalLine ) ;"	1041:3:29955:30011	613949	1	True				
ANR	614581	CallExpression	"getIndentedLineReturn ( indentedLine , originalLine )"		613949	0					
ANR	614582	Callee	getIndentedLineReturn		613949	0					
ANR	614583	Identifier	getIndentedLineReturn		613949	0					
ANR	614584	ArgumentList	indentedLine		613949	1					
ANR	614585	Argument	indentedLine		613949	0					
ANR	614586	Identifier	indentedLine		613949	0					
ANR	614587	Argument	originalLine		613949	1					
ANR	614588	Identifier	originalLine		613949	0					
ANR	614589	ExpressionStatement	"indentedLine = preLineWS ( preprocBlockIndent , 0 ) + line"	1043:2:30019:30073	613949	2	True				
ANR	614590	AssignmentExpression	"indentedLine = preLineWS ( preprocBlockIndent , 0 ) + line"		613949	0		=			
ANR	614591	Identifier	indentedLine		613949	0					
ANR	614592	AdditiveExpression	"preLineWS ( preprocBlockIndent , 0 ) + line"		613949	1		+			
ANR	614593	CallExpression	"preLineWS ( preprocBlockIndent , 0 )"		613949	0					
ANR	614594	Callee	preLineWS		613949	0					
ANR	614595	Identifier	preLineWS		613949	0					
ANR	614596	ArgumentList	preprocBlockIndent		613949	1					
ANR	614597	Argument	preprocBlockIndent		613949	0					
ANR	614598	Identifier	preprocBlockIndent		613949	0					
ANR	614599	Argument	0		613949	1					
ANR	614600	PrimaryExpression	0		613949	0					
ANR	614601	Identifier	line		613949	1					
ANR	614602	ReturnStatement	"return getIndentedLineReturn ( indentedLine , originalLine ) ;"	1044:2:30077:30133	613949	3	True				
ANR	614603	CallExpression	"getIndentedLineReturn ( indentedLine , originalLine )"		613949	0					
ANR	614604	Callee	getIndentedLineReturn		613949	0					
ANR	614605	Identifier	getIndentedLineReturn		613949	0					
ANR	614606	ArgumentList	indentedLine		613949	1					
ANR	614607	Argument	indentedLine		613949	0					
ANR	614608	Identifier	indentedLine		613949	0					
ANR	614609	Argument	originalLine		613949	1					
ANR	614610	Identifier	originalLine		613949	0					
ANR	614611	IfStatement	"if ( ! isInComment && ! isInQuoteContinuation && line . length ( ) > 0 && ( ( line [ 0 ] == '#' && ! isIndentedPreprocessor ( line , 0 ) ) || backslashEndsPrevLine ) )"		613949	26					
ANR	614612	Condition	"! isInComment && ! isInQuoteContinuation && line . length ( ) > 0 && ( ( line [ 0 ] == '#' && ! isIndentedPreprocessor ( line , 0 ) ) || backslashEndsPrevLine )"	1047:5:30144:30325	613949	0	True				
ANR	614613	AndExpression	"! isInComment && ! isInQuoteContinuation && line . length ( ) > 0 && ( ( line [ 0 ] == '#' && ! isIndentedPreprocessor ( line , 0 ) ) || backslashEndsPrevLine )"		613949	0		&&			
ANR	614614	UnaryOperationExpression	! isInComment		613949	0					
ANR	614615	UnaryOperator	!		613949	0					
ANR	614616	Identifier	isInComment		613949	1					
ANR	614617	AndExpression	"! isInQuoteContinuation && line . length ( ) > 0 && ( ( line [ 0 ] == '#' && ! isIndentedPreprocessor ( line , 0 ) ) || backslashEndsPrevLine )"		613949	1		&&			
ANR	614618	UnaryOperationExpression	! isInQuoteContinuation		613949	0					
ANR	614619	UnaryOperator	!		613949	0					
ANR	614620	Identifier	isInQuoteContinuation		613949	1					
ANR	614621	AndExpression	"line . length ( ) > 0 && ( ( line [ 0 ] == '#' && ! isIndentedPreprocessor ( line , 0 ) ) || backslashEndsPrevLine )"		613949	1		&&			
ANR	614622	RelationalExpression	line . length ( ) > 0		613949	0		>			
ANR	614623	CallExpression	line . length ( )		613949	0					
ANR	614624	Callee	line . length		613949	0					
ANR	614625	MemberAccess	line . length		613949	0					
ANR	614626	Identifier	line		613949	0					
ANR	614627	Identifier	length		613949	1					
ANR	614628	ArgumentList			613949	1					
ANR	614629	PrimaryExpression	0		613949	1					
ANR	614630	OrExpression	"( line [ 0 ] == '#' && ! isIndentedPreprocessor ( line , 0 ) ) || backslashEndsPrevLine"		613949	1		||			
ANR	614631	AndExpression	"line [ 0 ] == '#' && ! isIndentedPreprocessor ( line , 0 )"		613949	0		&&			
ANR	614632	EqualityExpression	line [ 0 ] == '#'		613949	0		==			
ANR	614633	ArrayIndexing	line [ 0 ]		613949	0					
ANR	614634	Identifier	line		613949	0					
ANR	614635	PrimaryExpression	0		613949	1					
ANR	614636	PrimaryExpression	'#'		613949	1					
ANR	614637	UnaryOperationExpression	"! isIndentedPreprocessor ( line , 0 )"		613949	1					
ANR	614638	UnaryOperator	!		613949	0					
ANR	614639	CallExpression	"isIndentedPreprocessor ( line , 0 )"		613949	1					
ANR	614640	Callee	isIndentedPreprocessor		613949	0					
ANR	614641	Identifier	isIndentedPreprocessor		613949	0					
ANR	614642	ArgumentList	line		613949	1					
ANR	614643	Argument	line		613949	0					
ANR	614644	Identifier	line		613949	0					
ANR	614645	Argument	0		613949	1					
ANR	614646	PrimaryExpression	0		613949	0					
ANR	614647	Identifier	backslashEndsPrevLine		613949	1					
ANR	614648	CompoundStatement		154:1:4646:4646	613949	1					
ANR	614649	IfStatement	if ( line [ 0 ] == '#' && ! isInDefine )		613949	0					
ANR	614650	Condition	line [ 0 ] == '#' && ! isInDefine	1053:6:30337:30365	613949	0	True				
ANR	614651	AndExpression	line [ 0 ] == '#' && ! isInDefine		613949	0		&&			
ANR	614652	EqualityExpression	line [ 0 ] == '#'		613949	0		==			
ANR	614653	ArrayIndexing	line [ 0 ]		613949	0					
ANR	614654	Identifier	line		613949	0					
ANR	614655	PrimaryExpression	0		613949	1					
ANR	614656	PrimaryExpression	'#'		613949	1					
ANR	614657	UnaryOperationExpression	! isInDefine		613949	1					
ANR	614658	UnaryOperator	!		613949	0					
ANR	614659	Identifier	isInDefine		613949	1					
ANR	614660	CompoundStatement		157:3:4692:4743	613949	1					
ANR	614661	IdentifierDeclStatement	string preproc = extractPreprocessorStatement ( line ) ;	1055:3:30375:30426	613949	0	True				
ANR	614662	IdentifierDecl	preproc = extractPreprocessorStatement ( line )		613949	0					
ANR	614663	IdentifierDeclType	string		613949	0					
ANR	614664	Identifier	preproc		613949	1					
ANR	614665	AssignmentExpression	preproc = extractPreprocessorStatement ( line )		613949	2		=			
ANR	614666	Identifier	preproc		613949	0					
ANR	614667	CallExpression	extractPreprocessorStatement ( line )		613949	1					
ANR	614668	Callee	extractPreprocessorStatement		613949	0					
ANR	614669	Identifier	extractPreprocessorStatement		613949	0					
ANR	614670	ArgumentList	line		613949	1					
ANR	614671	Argument	line		613949	0					
ANR	614672	Identifier	line		613949	0					
ANR	614673	ExpressionStatement	"processPreprocessor ( preproc , line )"	1056:3:30431:30465	613949	1	True				
ANR	614674	CallExpression	"processPreprocessor ( preproc , line )"		613949	0					
ANR	614675	Callee	processPreprocessor		613949	0					
ANR	614676	Identifier	processPreprocessor		613949	0					
ANR	614677	ArgumentList	preproc		613949	1					
ANR	614678	Argument	preproc		613949	0					
ANR	614679	Identifier	preproc		613949	0					
ANR	614680	Argument	line		613949	1					
ANR	614681	Identifier	line		613949	0					
ANR	614682	IfStatement	if ( isInIndentablePreprocBlock || isInIndentablePreproc )		613949	2					
ANR	614683	Condition	isInIndentablePreprocBlock || isInIndentablePreproc	1057:7:30474:30524	613949	0	True				
ANR	614684	OrExpression	isInIndentablePreprocBlock || isInIndentablePreproc		613949	0		||			
ANR	614685	Identifier	isInIndentablePreprocBlock		613949	0					
ANR	614686	Identifier	isInIndentablePreproc		613949	1					
ANR	614687	CompoundStatement		161:4:4853:4872	613949	1					
ANR	614688	IdentifierDeclStatement	string indentedLine ;	1059:4:30536:30555	613949	0	True				
ANR	614689	IdentifierDecl	indentedLine		613949	0					
ANR	614690	IdentifierDeclType	string		613949	0					
ANR	614691	Identifier	indentedLine		613949	1					
ANR	614692	IfStatement	"if ( ( preproc . length ( ) >= 2 && preproc . substr ( 0 , 2 ) == ""if"" ) )"		613949	1					
ANR	614693	Condition	"preproc . length ( ) >= 2 && preproc . substr ( 0 , 2 ) == ""if"""	1060:8:30565:30619	613949	0	True				
ANR	614694	AndExpression	"preproc . length ( ) >= 2 && preproc . substr ( 0 , 2 ) == ""if"""		613949	0		&&			
ANR	614695	RelationalExpression	preproc . length ( ) >= 2		613949	0		>=			
ANR	614696	CallExpression	preproc . length ( )		613949	0					
ANR	614697	Callee	preproc . length		613949	0					
ANR	614698	MemberAccess	preproc . length		613949	0					
ANR	614699	Identifier	preproc		613949	0					
ANR	614700	Identifier	length		613949	1					
ANR	614701	ArgumentList			613949	1					
ANR	614702	PrimaryExpression	2		613949	1					
ANR	614703	EqualityExpression	"preproc . substr ( 0 , 2 ) == ""if"""		613949	1		==			
ANR	614704	CallExpression	"preproc . substr ( 0 , 2 )"		613949	0					
ANR	614705	Callee	preproc . substr		613949	0					
ANR	614706	MemberAccess	preproc . substr		613949	0					
ANR	614707	Identifier	preproc		613949	0					
ANR	614708	Identifier	substr		613949	1					
ANR	614709	ArgumentList	0		613949	1					
ANR	614710	Argument	0		613949	0					
ANR	614711	PrimaryExpression	0		613949	0					
ANR	614712	Argument	2		613949	1					
ANR	614713	PrimaryExpression	2		613949	0					
ANR	614714	PrimaryExpression	"""if"""		613949	1					
ANR	614715	CompoundStatement		163:4:4967:4967	613949	1					
ANR	614716	ExpressionStatement	"indentedLine = preLineWS ( preprocBlockIndent , 0 ) + line"	1062:5:30657:30711	613949	0	True				
ANR	614717	AssignmentExpression	"indentedLine = preLineWS ( preprocBlockIndent , 0 ) + line"		613949	0		=			
ANR	614718	Identifier	indentedLine		613949	0					
ANR	614719	AdditiveExpression	"preLineWS ( preprocBlockIndent , 0 ) + line"		613949	1		+			
ANR	614720	CallExpression	"preLineWS ( preprocBlockIndent , 0 )"		613949	0					
ANR	614721	Callee	preLineWS		613949	0					
ANR	614722	Identifier	preLineWS		613949	0					
ANR	614723	ArgumentList	preprocBlockIndent		613949	1					
ANR	614724	Argument	preprocBlockIndent		613949	0					
ANR	614725	Identifier	preprocBlockIndent		613949	0					
ANR	614726	Argument	0		613949	1					
ANR	614727	PrimaryExpression	0		613949	0					
ANR	614728	Identifier	line		613949	1					
ANR	614729	ExpressionStatement	preprocBlockIndent += 1	1063:5:30718:30741	613949	1	True				
ANR	614730	AssignmentExpression	preprocBlockIndent += 1		613949	0		+=			
ANR	614731	Identifier	preprocBlockIndent		613949	0					
ANR	614732	PrimaryExpression	1		613949	1					
ANR	614733	ExpressionStatement	isInIndentablePreprocBlock = true	1064:5:30748:30781	613949	2	True				
ANR	614734	AssignmentExpression	isInIndentablePreprocBlock = true		613949	0		=			
ANR	614735	Identifier	isInIndentablePreprocBlock		613949	0					
ANR	614736	Identifier	true		613949	1					
ANR	614737	ElseStatement	else		613949	0					
ANR	614738	IfStatement	"if ( preproc == ""else"" || preproc == ""elif"" )"		613949	0					
ANR	614739	Condition	"preproc == ""else"" || preproc == ""elif"""	1066:13:30802:30839	613949	0	True				
ANR	614740	OrExpression	"preproc == ""else"" || preproc == ""elif"""		613949	0		||			
ANR	614741	EqualityExpression	"preproc == ""else"""		613949	0		==			
ANR	614742	Identifier	preproc		613949	0					
ANR	614743	PrimaryExpression	"""else"""		613949	1					
ANR	614744	EqualityExpression	"preproc == ""elif"""		613949	1		==			
ANR	614745	Identifier	preproc		613949	0					
ANR	614746	PrimaryExpression	"""elif"""		613949	1					
ANR	614747	CompoundStatement		169:4:5163:5163	613949	1					
ANR	614748	ExpressionStatement	"indentedLine = preLineWS ( preprocBlockIndent - 1 , 0 ) + line"	1068:5:30853:30911	613949	0	True				
ANR	614749	AssignmentExpression	"indentedLine = preLineWS ( preprocBlockIndent - 1 , 0 ) + line"		613949	0		=			
ANR	614750	Identifier	indentedLine		613949	0					
ANR	614751	AdditiveExpression	"preLineWS ( preprocBlockIndent - 1 , 0 ) + line"		613949	1		+			
ANR	614752	CallExpression	"preLineWS ( preprocBlockIndent - 1 , 0 )"		613949	0					
ANR	614753	Callee	preLineWS		613949	0					
ANR	614754	Identifier	preLineWS		613949	0					
ANR	614755	ArgumentList	preprocBlockIndent - 1		613949	1					
ANR	614756	Argument	preprocBlockIndent - 1		613949	0					
ANR	614757	AdditiveExpression	preprocBlockIndent - 1		613949	0		-			
ANR	614758	Identifier	preprocBlockIndent		613949	0					
ANR	614759	PrimaryExpression	1		613949	1					
ANR	614760	Argument	0		613949	1					
ANR	614761	PrimaryExpression	0		613949	0					
ANR	614762	Identifier	line		613949	1					
ANR	614763	ElseStatement	else		613949	0					
ANR	614764	IfStatement	"if ( preproc == ""endif"" )"		613949	0					
ANR	614765	Condition	"preproc == ""endif"""	1070:13:30932:30949	613949	0	True				
ANR	614766	EqualityExpression	"preproc == ""endif"""		613949	0		==			
ANR	614767	Identifier	preproc		613949	0					
ANR	614768	PrimaryExpression	"""endif"""		613949	1					
ANR	614769	CompoundStatement		173:4:5273:5273	613949	1					
ANR	614770	ExpressionStatement	preprocBlockIndent -= 1	1072:5:30963:30986	613949	0	True				
ANR	614771	AssignmentExpression	preprocBlockIndent -= 1		613949	0		-=			
ANR	614772	Identifier	preprocBlockIndent		613949	0					
ANR	614773	PrimaryExpression	1		613949	1					
ANR	614774	ExpressionStatement	"indentedLine = preLineWS ( preprocBlockIndent , 0 ) + line"	1073:5:30993:31047	613949	1	True				
ANR	614775	AssignmentExpression	"indentedLine = preLineWS ( preprocBlockIndent , 0 ) + line"		613949	0		=			
ANR	614776	Identifier	indentedLine		613949	0					
ANR	614777	AdditiveExpression	"preLineWS ( preprocBlockIndent , 0 ) + line"		613949	1		+			
ANR	614778	CallExpression	"preLineWS ( preprocBlockIndent , 0 )"		613949	0					
ANR	614779	Callee	preLineWS		613949	0					
ANR	614780	Identifier	preLineWS		613949	0					
ANR	614781	ArgumentList	preprocBlockIndent		613949	1					
ANR	614782	Argument	preprocBlockIndent		613949	0					
ANR	614783	Identifier	preprocBlockIndent		613949	0					
ANR	614784	Argument	0		613949	1					
ANR	614785	PrimaryExpression	0		613949	0					
ANR	614786	Identifier	line		613949	1					
ANR	614787	IfStatement	if ( preprocBlockIndent == 0 )		613949	2					
ANR	614788	Condition	preprocBlockIndent == 0	1074:9:31058:31080	613949	0	True				
ANR	614789	EqualityExpression	preprocBlockIndent == 0		613949	0		==			
ANR	614790	Identifier	preprocBlockIndent		613949	0					
ANR	614791	PrimaryExpression	0		613949	1					
ANR	614792	ExpressionStatement	isInIndentablePreprocBlock = false	1075:6:31089:31123	613949	1	True				
ANR	614793	AssignmentExpression	isInIndentablePreprocBlock = false		613949	0		=			
ANR	614794	Identifier	isInIndentablePreprocBlock		613949	0					
ANR	614795	Identifier	false		613949	1					
ANR	614796	ElseStatement	else		613949	0					
ANR	614797	ExpressionStatement	"indentedLine = preLineWS ( preprocBlockIndent , 0 ) + line"	1078:5:31145:31199	613949	0	True				
ANR	614798	AssignmentExpression	"indentedLine = preLineWS ( preprocBlockIndent , 0 ) + line"		613949	0		=			
ANR	614799	Identifier	indentedLine		613949	0					
ANR	614800	AdditiveExpression	"preLineWS ( preprocBlockIndent , 0 ) + line"		613949	1		+			
ANR	614801	CallExpression	"preLineWS ( preprocBlockIndent , 0 )"		613949	0					
ANR	614802	Callee	preLineWS		613949	0					
ANR	614803	Identifier	preLineWS		613949	0					
ANR	614804	ArgumentList	preprocBlockIndent		613949	1					
ANR	614805	Argument	preprocBlockIndent		613949	0					
ANR	614806	Identifier	preprocBlockIndent		613949	0					
ANR	614807	Argument	0		613949	1					
ANR	614808	PrimaryExpression	0		613949	0					
ANR	614809	Identifier	line		613949	1					
ANR	614810	ReturnStatement	"return getIndentedLineReturn ( indentedLine , originalLine ) ;"	1079:4:31205:31261	613949	2	True				
ANR	614811	CallExpression	"getIndentedLineReturn ( indentedLine , originalLine )"		613949	0					
ANR	614812	Callee	getIndentedLineReturn		613949	0					
ANR	614813	Identifier	getIndentedLineReturn		613949	0					
ANR	614814	ArgumentList	indentedLine		613949	1					
ANR	614815	Argument	indentedLine		613949	0					
ANR	614816	Identifier	indentedLine		613949	0					
ANR	614817	Argument	originalLine		613949	1					
ANR	614818	Identifier	originalLine		613949	0					
ANR	614819	IfStatement	if ( shouldIndentPreprocConditional && preproc . length ( ) > 0 )		613949	3					
ANR	614820	Condition	shouldIndentPreprocConditional && preproc . length ( ) > 0	1081:7:31275:31328	613949	0	True				
ANR	614821	AndExpression	shouldIndentPreprocConditional && preproc . length ( ) > 0		613949	0		&&			
ANR	614822	Identifier	shouldIndentPreprocConditional		613949	0					
ANR	614823	RelationalExpression	preproc . length ( ) > 0		613949	1		>			
ANR	614824	CallExpression	preproc . length ( )		613949	0					
ANR	614825	Callee	preproc . length		613949	0					
ANR	614826	MemberAccess	preproc . length		613949	0					
ANR	614827	Identifier	preproc		613949	0					
ANR	614828	Identifier	length		613949	1					
ANR	614829	ArgumentList			613949	1					
ANR	614830	PrimaryExpression	0		613949	1					
ANR	614831	CompoundStatement		185:4:5657:5676	613949	1					
ANR	614832	IdentifierDeclStatement	string indentedLine ;	1083:4:31340:31359	613949	0	True				
ANR	614833	IdentifierDecl	indentedLine		613949	0					
ANR	614834	IdentifierDeclType	string		613949	0					
ANR	614835	Identifier	indentedLine		613949	1					
ANR	614836	IfStatement	"if ( preproc . length ( ) >= 2 && preproc . substr ( 0 , 2 ) == ""if"" )"		613949	1					
ANR	614837	Condition	"preproc . length ( ) >= 2 && preproc . substr ( 0 , 2 ) == ""if"""	1084:8:31369:31421	613949	0	True				
ANR	614838	AndExpression	"preproc . length ( ) >= 2 && preproc . substr ( 0 , 2 ) == ""if"""		613949	0		&&			
ANR	614839	RelationalExpression	preproc . length ( ) >= 2		613949	0		>=			
ANR	614840	CallExpression	preproc . length ( )		613949	0					
ANR	614841	Callee	preproc . length		613949	0					
ANR	614842	MemberAccess	preproc . length		613949	0					
ANR	614843	Identifier	preproc		613949	0					
ANR	614844	Identifier	length		613949	1					
ANR	614845	ArgumentList			613949	1					
ANR	614846	PrimaryExpression	2		613949	1					
ANR	614847	EqualityExpression	"preproc . substr ( 0 , 2 ) == ""if"""		613949	1		==			
ANR	614848	CallExpression	"preproc . substr ( 0 , 2 )"		613949	0					
ANR	614849	Callee	preproc . substr		613949	0					
ANR	614850	MemberAccess	preproc . substr		613949	0					
ANR	614851	Identifier	preproc		613949	0					
ANR	614852	Identifier	substr		613949	1					
ANR	614853	ArgumentList	0		613949	1					
ANR	614854	Argument	0		613949	0					
ANR	614855	PrimaryExpression	0		613949	0					
ANR	614856	Argument	2		613949	1					
ANR	614857	PrimaryExpression	2		613949	0					
ANR	614858	PrimaryExpression	"""if"""		613949	1					
ANR	614859	CompoundStatement		188:5:5776:5796	613949	1					
ANR	614860	IdentifierDeclStatement	"pair < int , int > entry ;"	1086:5:31459:31479	613949	0	True				
ANR	614861	IdentifierDecl	entry		613949	0					
ANR	614862	IdentifierDeclType	"pair < int , int >"		613949	0					
ANR	614863	Identifier	entry		613949	1					
ANR	614864	IfStatement	if ( ! isInDefine && activeBeautifierStack != nullptr && ! activeBeautifierStack -> empty ( ) )		613949	1					
ANR	614865	Condition	! isInDefine && activeBeautifierStack != nullptr && ! activeBeautifierStack -> empty ( )	1087:9:31523:31604	613949	0	True				
ANR	614866	AndExpression	! isInDefine && activeBeautifierStack != nullptr && ! activeBeautifierStack -> empty ( )		613949	0		&&			
ANR	614867	UnaryOperationExpression	! isInDefine		613949	0					
ANR	614868	UnaryOperator	!		613949	0					
ANR	614869	Identifier	isInDefine		613949	1					
ANR	614870	AndExpression	activeBeautifierStack != nullptr && ! activeBeautifierStack -> empty ( )		613949	1		&&			
ANR	614871	EqualityExpression	activeBeautifierStack != nullptr		613949	0		!=			
ANR	614872	Identifier	activeBeautifierStack		613949	0					
ANR	614873	Identifier	nullptr		613949	1					
ANR	614874	UnaryOperationExpression	! activeBeautifierStack -> empty ( )		613949	1					
ANR	614875	UnaryOperator	!		613949	0					
ANR	614876	CallExpression	activeBeautifierStack -> empty ( )		613949	1					
ANR	614877	Callee	activeBeautifierStack -> empty		613949	0					
ANR	614878	PtrMemberAccess	activeBeautifierStack -> empty		613949	0					
ANR	614879	Identifier	activeBeautifierStack		613949	0					
ANR	614880	Identifier	empty		613949	1					
ANR	614881	ArgumentList			613949	1					
ANR	614882	ExpressionStatement	entry = activeBeautifierStack -> back ( ) -> computePreprocessorIndent ( )	1088:6:31613:31679	613949	1	True				
ANR	614883	AssignmentExpression	entry = activeBeautifierStack -> back ( ) -> computePreprocessorIndent ( )		613949	0		=			
ANR	614884	Identifier	entry		613949	0					
ANR	614885	CallExpression	activeBeautifierStack -> back ( ) -> computePreprocessorIndent ( )		613949	1					
ANR	614886	Callee	activeBeautifierStack -> back ( ) -> computePreprocessorIndent		613949	0					
ANR	614887	PtrMemberAccess	activeBeautifierStack -> back ( ) -> computePreprocessorIndent		613949	0					
ANR	614888	CallExpression	activeBeautifierStack -> back ( )		613949	0					
ANR	614889	Callee	activeBeautifierStack -> back		613949	0					
ANR	614890	PtrMemberAccess	activeBeautifierStack -> back		613949	0					
ANR	614891	Identifier	activeBeautifierStack		613949	0					
ANR	614892	Identifier	back		613949	1					
ANR	614893	ArgumentList			613949	1					
ANR	614894	Identifier	computePreprocessorIndent		613949	1					
ANR	614895	ArgumentList			613949	1					
ANR	614896	ElseStatement	else		613949	0					
ANR	614897	ExpressionStatement	entry = computePreprocessorIndent ( )	1090:6:31697:31732	613949	0	True				
ANR	614898	AssignmentExpression	entry = computePreprocessorIndent ( )		613949	0		=			
ANR	614899	Identifier	entry		613949	0					
ANR	614900	CallExpression	computePreprocessorIndent ( )		613949	1					
ANR	614901	Callee	computePreprocessorIndent		613949	0					
ANR	614902	Identifier	computePreprocessorIndent		613949	0					
ANR	614903	ArgumentList			613949	1					
ANR	614904	ExpressionStatement	preprocIndentStack -> emplace_back ( entry )	1091:5:31739:31778	613949	2	True				
ANR	614905	CallExpression	preprocIndentStack -> emplace_back ( entry )		613949	0					
ANR	614906	Callee	preprocIndentStack -> emplace_back		613949	0					
ANR	614907	PtrMemberAccess	preprocIndentStack -> emplace_back		613949	0					
ANR	614908	Identifier	preprocIndentStack		613949	0					
ANR	614909	Identifier	emplace_back		613949	1					
ANR	614910	ArgumentList	entry		613949	1					
ANR	614911	Argument	entry		613949	0					
ANR	614912	Identifier	entry		613949	0					
ANR	614913	ExpressionStatement	"indentedLine = preLineWS ( preprocIndentStack -> back ( ) . first , preprocIndentStack -> back ( ) . second ) + line"	1092:5:31785:31915	613949	3	True				
ANR	614914	AssignmentExpression	"indentedLine = preLineWS ( preprocIndentStack -> back ( ) . first , preprocIndentStack -> back ( ) . second ) + line"		613949	0		=			
ANR	614915	Identifier	indentedLine		613949	0					
ANR	614916	AdditiveExpression	"preLineWS ( preprocIndentStack -> back ( ) . first , preprocIndentStack -> back ( ) . second ) + line"		613949	1		+			
ANR	614917	CallExpression	"preLineWS ( preprocIndentStack -> back ( ) . first , preprocIndentStack -> back ( ) . second )"		613949	0					
ANR	614918	Callee	preLineWS		613949	0					
ANR	614919	Identifier	preLineWS		613949	0					
ANR	614920	ArgumentList	preprocIndentStack -> back ( ) . first		613949	1					
ANR	614921	Argument	preprocIndentStack -> back ( ) . first		613949	0					
ANR	614922	MemberAccess	preprocIndentStack -> back ( ) . first		613949	0					
ANR	614923	CallExpression	preprocIndentStack -> back ( )		613949	0					
ANR	614924	Callee	preprocIndentStack -> back		613949	0					
ANR	614925	PtrMemberAccess	preprocIndentStack -> back		613949	0					
ANR	614926	Identifier	preprocIndentStack		613949	0					
ANR	614927	Identifier	back		613949	1					
ANR	614928	ArgumentList			613949	1					
ANR	614929	Identifier	first		613949	1					
ANR	614930	Argument	preprocIndentStack -> back ( ) . second		613949	1					
ANR	614931	MemberAccess	preprocIndentStack -> back ( ) . second		613949	0					
ANR	614932	CallExpression	preprocIndentStack -> back ( )		613949	0					
ANR	614933	Callee	preprocIndentStack -> back		613949	0					
ANR	614934	PtrMemberAccess	preprocIndentStack -> back		613949	0					
ANR	614935	Identifier	preprocIndentStack		613949	0					
ANR	614936	Identifier	back		613949	1					
ANR	614937	ArgumentList			613949	1					
ANR	614938	Identifier	second		613949	1					
ANR	614939	Identifier	line		613949	1					
ANR	614940	ReturnStatement	"return getIndentedLineReturn ( indentedLine , originalLine ) ;"	1094:5:31922:31978	613949	4	True				
ANR	614941	CallExpression	"getIndentedLineReturn ( indentedLine , originalLine )"		613949	0					
ANR	614942	Callee	getIndentedLineReturn		613949	0					
ANR	614943	Identifier	getIndentedLineReturn		613949	0					
ANR	614944	ArgumentList	indentedLine		613949	1					
ANR	614945	Argument	indentedLine		613949	0					
ANR	614946	Identifier	indentedLine		613949	0					
ANR	614947	Argument	originalLine		613949	1					
ANR	614948	Identifier	originalLine		613949	0					
ANR	614949	IfStatement	"if ( preproc == ""else"" || preproc == ""elif"" )"		613949	2					
ANR	614950	Condition	"preproc == ""else"" || preproc == ""elif"""	1096:8:31994:32031	613949	0	True				
ANR	614951	OrExpression	"preproc == ""else"" || preproc == ""elif"""		613949	0		||			
ANR	614952	EqualityExpression	"preproc == ""else"""		613949	0		==			
ANR	614953	Identifier	preproc		613949	0					
ANR	614954	PrimaryExpression	"""else"""		613949	1					
ANR	614955	EqualityExpression	"preproc == ""elif"""		613949	1		==			
ANR	614956	Identifier	preproc		613949	0					
ANR	614957	PrimaryExpression	"""elif"""		613949	1					
ANR	614958	CompoundStatement		199:4:6355:6355	613949	1					
ANR	614959	IfStatement	if ( ! preprocIndentStack -> empty ( ) )		613949	0					
ANR	614960	Condition	! preprocIndentStack -> empty ( )	1098:9:32049:32076	613949	0	True				
ANR	614961	UnaryOperationExpression	! preprocIndentStack -> empty ( )		613949	0					
ANR	614962	UnaryOperator	!		613949	0					
ANR	614963	CallExpression	preprocIndentStack -> empty ( )		613949	1					
ANR	614964	Callee	preprocIndentStack -> empty		613949	0					
ANR	614965	PtrMemberAccess	preprocIndentStack -> empty		613949	0					
ANR	614966	Identifier	preprocIndentStack		613949	0					
ANR	614967	Identifier	empty		613949	1					
ANR	614968	ArgumentList			613949	1					
ANR	614969	CompoundStatement		201:5:6429:6429	613949	1					
ANR	614970	ExpressionStatement	"indentedLine = preLineWS ( preprocIndentStack -> back ( ) . first , preprocIndentStack -> back ( ) . second ) + line"	1100:6:32120:32251	613949	0	True				
ANR	614971	AssignmentExpression	"indentedLine = preLineWS ( preprocIndentStack -> back ( ) . first , preprocIndentStack -> back ( ) . second ) + line"		613949	0		=			
ANR	614972	Identifier	indentedLine		613949	0					
ANR	614973	AdditiveExpression	"preLineWS ( preprocIndentStack -> back ( ) . first , preprocIndentStack -> back ( ) . second ) + line"		613949	1		+			
ANR	614974	CallExpression	"preLineWS ( preprocIndentStack -> back ( ) . first , preprocIndentStack -> back ( ) . second )"		613949	0					
ANR	614975	Callee	preLineWS		613949	0					
ANR	614976	Identifier	preLineWS		613949	0					
ANR	614977	ArgumentList	preprocIndentStack -> back ( ) . first		613949	1					
ANR	614978	Argument	preprocIndentStack -> back ( ) . first		613949	0					
ANR	614979	MemberAccess	preprocIndentStack -> back ( ) . first		613949	0					
ANR	614980	CallExpression	preprocIndentStack -> back ( )		613949	0					
ANR	614981	Callee	preprocIndentStack -> back		613949	0					
ANR	614982	PtrMemberAccess	preprocIndentStack -> back		613949	0					
ANR	614983	Identifier	preprocIndentStack		613949	0					
ANR	614984	Identifier	back		613949	1					
ANR	614985	ArgumentList			613949	1					
ANR	614986	Identifier	first		613949	1					
ANR	614987	Argument	preprocIndentStack -> back ( ) . second		613949	1					
ANR	614988	MemberAccess	preprocIndentStack -> back ( ) . second		613949	0					
ANR	614989	CallExpression	preprocIndentStack -> back ( )		613949	0					
ANR	614990	Callee	preprocIndentStack -> back		613949	0					
ANR	614991	PtrMemberAccess	preprocIndentStack -> back		613949	0					
ANR	614992	Identifier	preprocIndentStack		613949	0					
ANR	614993	Identifier	back		613949	1					
ANR	614994	ArgumentList			613949	1					
ANR	614995	Identifier	second		613949	1					
ANR	614996	Identifier	line		613949	1					
ANR	614997	ReturnStatement	"return getIndentedLineReturn ( indentedLine , originalLine ) ;"	1102:6:32259:32315	613949	1	True				
ANR	614998	CallExpression	"getIndentedLineReturn ( indentedLine , originalLine )"		613949	0					
ANR	614999	Callee	getIndentedLineReturn		613949	0					
ANR	615000	Identifier	getIndentedLineReturn		613949	0					
ANR	615001	ArgumentList	indentedLine		613949	1					
ANR	615002	Argument	indentedLine		613949	0					
ANR	615003	Identifier	indentedLine		613949	0					
ANR	615004	Argument	originalLine		613949	1					
ANR	615005	Identifier	originalLine		613949	0					
ANR	615006	ElseStatement	else		613949	0					
ANR	615007	IfStatement	"if ( preproc == ""endif"" )"		613949	0					
ANR	615008	Condition	"preproc == ""endif"""	1105:13:32343:32360	613949	0	True				
ANR	615009	EqualityExpression	"preproc == ""endif"""		613949	0		==			
ANR	615010	Identifier	preproc		613949	0					
ANR	615011	PrimaryExpression	"""endif"""		613949	1					
ANR	615012	CompoundStatement		208:4:6684:6684	613949	1					
ANR	615013	IfStatement	if ( ! preprocIndentStack -> empty ( ) )		613949	0					
ANR	615014	Condition	! preprocIndentStack -> empty ( )	1107:9:32378:32405	613949	0	True				
ANR	615015	UnaryOperationExpression	! preprocIndentStack -> empty ( )		613949	0					
ANR	615016	UnaryOperator	!		613949	0					
ANR	615017	CallExpression	preprocIndentStack -> empty ( )		613949	1					
ANR	615018	Callee	preprocIndentStack -> empty		613949	0					
ANR	615019	PtrMemberAccess	preprocIndentStack -> empty		613949	0					
ANR	615020	Identifier	preprocIndentStack		613949	0					
ANR	615021	Identifier	empty		613949	1					
ANR	615022	ArgumentList			613949	1					
ANR	615023	CompoundStatement		210:5:6758:6758	613949	1					
ANR	615024	ExpressionStatement	"indentedLine = preLineWS ( preprocIndentStack -> back ( ) . first , preprocIndentStack -> back ( ) . second ) + line"	1109:6:32449:32580	613949	0	True				
ANR	615025	AssignmentExpression	"indentedLine = preLineWS ( preprocIndentStack -> back ( ) . first , preprocIndentStack -> back ( ) . second ) + line"		613949	0		=			
ANR	615026	Identifier	indentedLine		613949	0					
ANR	615027	AdditiveExpression	"preLineWS ( preprocIndentStack -> back ( ) . first , preprocIndentStack -> back ( ) . second ) + line"		613949	1		+			
ANR	615028	CallExpression	"preLineWS ( preprocIndentStack -> back ( ) . first , preprocIndentStack -> back ( ) . second )"		613949	0					
ANR	615029	Callee	preLineWS		613949	0					
ANR	615030	Identifier	preLineWS		613949	0					
ANR	615031	ArgumentList	preprocIndentStack -> back ( ) . first		613949	1					
ANR	615032	Argument	preprocIndentStack -> back ( ) . first		613949	0					
ANR	615033	MemberAccess	preprocIndentStack -> back ( ) . first		613949	0					
ANR	615034	CallExpression	preprocIndentStack -> back ( )		613949	0					
ANR	615035	Callee	preprocIndentStack -> back		613949	0					
ANR	615036	PtrMemberAccess	preprocIndentStack -> back		613949	0					
ANR	615037	Identifier	preprocIndentStack		613949	0					
ANR	615038	Identifier	back		613949	1					
ANR	615039	ArgumentList			613949	1					
ANR	615040	Identifier	first		613949	1					
ANR	615041	Argument	preprocIndentStack -> back ( ) . second		613949	1					
ANR	615042	MemberAccess	preprocIndentStack -> back ( ) . second		613949	0					
ANR	615043	CallExpression	preprocIndentStack -> back ( )		613949	0					
ANR	615044	Callee	preprocIndentStack -> back		613949	0					
ANR	615045	PtrMemberAccess	preprocIndentStack -> back		613949	0					
ANR	615046	Identifier	preprocIndentStack		613949	0					
ANR	615047	Identifier	back		613949	1					
ANR	615048	ArgumentList			613949	1					
ANR	615049	Identifier	second		613949	1					
ANR	615050	Identifier	line		613949	1					
ANR	615051	ExpressionStatement	preprocIndentStack -> pop_back ( )	1111:6:32588:32618	613949	1	True				
ANR	615052	CallExpression	preprocIndentStack -> pop_back ( )		613949	0					
ANR	615053	Callee	preprocIndentStack -> pop_back		613949	0					
ANR	615054	PtrMemberAccess	preprocIndentStack -> pop_back		613949	0					
ANR	615055	Identifier	preprocIndentStack		613949	0					
ANR	615056	Identifier	pop_back		613949	1					
ANR	615057	ArgumentList			613949	1					
ANR	615058	ReturnStatement	"return getIndentedLineReturn ( indentedLine , originalLine ) ;"	1112:6:32626:32682	613949	2	True				
ANR	615059	CallExpression	"getIndentedLineReturn ( indentedLine , originalLine )"		613949	0					
ANR	615060	Callee	getIndentedLineReturn		613949	0					
ANR	615061	Identifier	getIndentedLineReturn		613949	0					
ANR	615062	ArgumentList	indentedLine		613949	1					
ANR	615063	Argument	indentedLine		613949	0					
ANR	615064	Identifier	indentedLine		613949	0					
ANR	615065	Argument	originalLine		613949	1					
ANR	615066	Identifier	originalLine		613949	0					
ANR	615067	IfStatement	if ( line . length ( ) > 0 )		613949	1					
ANR	615068	Condition	line . length ( ) > 0	1119:6:32756:32772	613949	0	True				
ANR	615069	RelationalExpression	line . length ( ) > 0		613949	0		>			
ANR	615070	CallExpression	line . length ( )		613949	0					
ANR	615071	Callee	line . length		613949	0					
ANR	615072	MemberAccess	line . length		613949	0					
ANR	615073	Identifier	line		613949	0					
ANR	615074	Identifier	length		613949	1					
ANR	615075	ArgumentList			613949	1					
ANR	615076	PrimaryExpression	0		613949	1					
ANR	615077	ExpressionStatement	backslashEndsPrevLine = ( line [ line . length ( ) - 1 ] == '\\\\' )	1120:3:32778:32835	613949	1	True				
ANR	615078	AssignmentExpression	backslashEndsPrevLine = ( line [ line . length ( ) - 1 ] == '\\\\' )		613949	0		=			
ANR	615079	Identifier	backslashEndsPrevLine		613949	0					
ANR	615080	EqualityExpression	line [ line . length ( ) - 1 ] == '\\\\'		613949	1		==			
ANR	615081	ArrayIndexing	line [ line . length ( ) - 1 ]		613949	0					
ANR	615082	Identifier	line		613949	0					
ANR	615083	AdditiveExpression	line . length ( ) - 1		613949	1		-			
ANR	615084	CallExpression	line . length ( )		613949	0					
ANR	615085	Callee	line . length		613949	0					
ANR	615086	MemberAccess	line . length		613949	0					
ANR	615087	Identifier	line		613949	0					
ANR	615088	Identifier	length		613949	1					
ANR	615089	ArgumentList			613949	1					
ANR	615090	PrimaryExpression	1		613949	1					
ANR	615091	PrimaryExpression	'\\\\'		613949	1					
ANR	615092	IfStatement	if ( isInPreprocessorUnterminatedComment ( line ) )		613949	2					
ANR	615093	Condition	isInPreprocessorUnterminatedComment ( line )	1122:6:32923:32963	613949	0	True				
ANR	615094	CallExpression	isInPreprocessorUnterminatedComment ( line )		613949	0					
ANR	615095	Callee	isInPreprocessorUnterminatedComment		613949	0					
ANR	615096	Identifier	isInPreprocessorUnterminatedComment		613949	0					
ANR	615097	ArgumentList	line		613949	1					
ANR	615098	Argument	line		613949	0					
ANR	615099	Identifier	line		613949	0					
ANR	615100	ExpressionStatement	backslashEndsPrevLine = true	1123:3:32969:32997	613949	1	True				
ANR	615101	AssignmentExpression	backslashEndsPrevLine = true		613949	0		=			
ANR	615102	Identifier	backslashEndsPrevLine		613949	0					
ANR	615103	Identifier	true		613949	1					
ANR	615104	IfStatement	if ( ! backslashEndsPrevLine && isInDefineDefinition && ! isInDefine )		613949	3					
ANR	615105	Condition	! backslashEndsPrevLine && isInDefineDefinition && ! isInDefine	1128:6:33203:33263	613949	0	True				
ANR	615106	AndExpression	! backslashEndsPrevLine && isInDefineDefinition && ! isInDefine		613949	0		&&			
ANR	615107	UnaryOperationExpression	! backslashEndsPrevLine		613949	0					
ANR	615108	UnaryOperator	!		613949	0					
ANR	615109	Identifier	backslashEndsPrevLine		613949	1					
ANR	615110	AndExpression	isInDefineDefinition && ! isInDefine		613949	1		&&			
ANR	615111	Identifier	isInDefineDefinition		613949	0					
ANR	615112	UnaryOperationExpression	! isInDefine		613949	1					
ANR	615113	UnaryOperator	!		613949	0					
ANR	615114	Identifier	isInDefine		613949	1					
ANR	615115	CompoundStatement		236:3:7729:7783	613949	1					
ANR	615116	ExpressionStatement	isInDefineDefinition = false	1130:3:33273:33301	613949	0	True				
ANR	615117	AssignmentExpression	isInDefineDefinition = false		613949	0		=			
ANR	615118	Identifier	isInDefineDefinition		613949	0					
ANR	615119	Identifier	false		613949	1					
ANR	615120	IdentifierDeclStatement	ASBeautifier * defineBeautifier = activeBeautifierStack -> back ( ) ;	1131:3:33306:33368	613949	1	True				
ANR	615121	IdentifierDecl	* defineBeautifier = activeBeautifierStack -> back ( )		613949	0					
ANR	615122	IdentifierDeclType	ASBeautifier *		613949	0					
ANR	615123	Identifier	defineBeautifier		613949	1					
ANR	615124	AssignmentExpression	* defineBeautifier = activeBeautifierStack -> back ( )		613949	2		=			
ANR	615125	Identifier	defineBeautifier		613949	0					
ANR	615126	CallExpression	activeBeautifierStack -> back ( )		613949	1					
ANR	615127	Callee	activeBeautifierStack -> back		613949	0					
ANR	615128	PtrMemberAccess	activeBeautifierStack -> back		613949	0					
ANR	615129	Identifier	activeBeautifierStack		613949	0					
ANR	615130	Identifier	back		613949	1					
ANR	615131	ArgumentList			613949	1					
ANR	615132	ExpressionStatement	activeBeautifierStack -> pop_back ( )	1132:3:33373:33406	613949	2	True				
ANR	615133	CallExpression	activeBeautifierStack -> pop_back ( )		613949	0					
ANR	615134	Callee	activeBeautifierStack -> pop_back		613949	0					
ANR	615135	PtrMemberAccess	activeBeautifierStack -> pop_back		613949	0					
ANR	615136	Identifier	activeBeautifierStack		613949	0					
ANR	615137	Identifier	pop_back		613949	1					
ANR	615138	ArgumentList			613949	1					
ANR	615139	IdentifierDeclStatement	string indentedLine = defineBeautifier -> beautify ( line ) ;	1134:3:33412:33466	613949	3	True				
ANR	615140	IdentifierDecl	indentedLine = defineBeautifier -> beautify ( line )		613949	0					
ANR	615141	IdentifierDeclType	string		613949	0					
ANR	615142	Identifier	indentedLine		613949	1					
ANR	615143	AssignmentExpression	indentedLine = defineBeautifier -> beautify ( line )		613949	2		=			
ANR	615144	Identifier	indentedLine		613949	0					
ANR	615145	CallExpression	defineBeautifier -> beautify ( line )		613949	1					
ANR	615146	Callee	defineBeautifier -> beautify		613949	0					
ANR	615147	PtrMemberAccess	defineBeautifier -> beautify		613949	0					
ANR	615148	Identifier	defineBeautifier		613949	0					
ANR	615149	Identifier	beautify		613949	1					
ANR	615150	ArgumentList	line		613949	1					
ANR	615151	Argument	line		613949	0					
ANR	615152	Identifier	line		613949	0					
ANR	615153	Statement	delete	1135:3:33471:33476	613949	4	True				
ANR	615154	ExpressionStatement	defineBeautifier	1135:10:33478:33494	613949	5	True				
ANR	615155	Identifier	defineBeautifier		613949	0					
ANR	615156	ReturnStatement	"return getIndentedLineReturn ( indentedLine , originalLine ) ;"	1136:3:33499:33555	613949	6	True				
ANR	615157	CallExpression	"getIndentedLineReturn ( indentedLine , originalLine )"		613949	0					
ANR	615158	Callee	getIndentedLineReturn		613949	0					
ANR	615159	Identifier	getIndentedLineReturn		613949	0					
ANR	615160	ArgumentList	indentedLine		613949	1					
ANR	615161	Argument	indentedLine		613949	0					
ANR	615162	Identifier	indentedLine		613949	0					
ANR	615163	Argument	originalLine		613949	1					
ANR	615164	Identifier	originalLine		613949	0					
ANR	615165	IfStatement	if ( ! isInDefine && ! isInDefineDefinition )		613949	4					
ANR	615166	Condition	! isInDefine && ! isInDefineDefinition	1140:6:33646:33681	613949	0	True				
ANR	615167	AndExpression	! isInDefine && ! isInDefineDefinition		613949	0		&&			
ANR	615168	UnaryOperationExpression	! isInDefine		613949	0					
ANR	615169	UnaryOperator	!		613949	0					
ANR	615170	Identifier	isInDefine		613949	1					
ANR	615171	UnaryOperationExpression	! isInDefineDefinition		613949	1					
ANR	615172	UnaryOperator	!		613949	0					
ANR	615173	Identifier	isInDefineDefinition		613949	1					
ANR	615174	ReturnStatement	return originalLine ;	1141:3:33687:33706	613949	1	True				
ANR	615175	Identifier	originalLine		613949	0					
ANR	615176	IfStatement	if ( ! isInDefine && activeBeautifierStack != nullptr && ! activeBeautifierStack -> empty ( ) )		613949	27					
ANR	615177	Condition	! isInDefine && activeBeautifierStack != nullptr && ! activeBeautifierStack -> empty ( )	1147:5:33897:33978	613949	0	True				
ANR	615178	AndExpression	! isInDefine && activeBeautifierStack != nullptr && ! activeBeautifierStack -> empty ( )		613949	0		&&			
ANR	615179	UnaryOperationExpression	! isInDefine		613949	0					
ANR	615180	UnaryOperator	!		613949	0					
ANR	615181	Identifier	isInDefine		613949	1					
ANR	615182	AndExpression	activeBeautifierStack != nullptr && ! activeBeautifierStack -> empty ( )		613949	1		&&			
ANR	615183	EqualityExpression	activeBeautifierStack != nullptr		613949	0		!=			
ANR	615184	Identifier	activeBeautifierStack		613949	0					
ANR	615185	Identifier	nullptr		613949	1					
ANR	615186	UnaryOperationExpression	! activeBeautifierStack -> empty ( )		613949	1					
ANR	615187	UnaryOperator	!		613949	0					
ANR	615188	CallExpression	activeBeautifierStack -> empty ( )		613949	1					
ANR	615189	Callee	activeBeautifierStack -> empty		613949	0					
ANR	615190	PtrMemberAccess	activeBeautifierStack -> empty		613949	0					
ANR	615191	Identifier	activeBeautifierStack		613949	0					
ANR	615192	Identifier	empty		613949	1					
ANR	615193	ArgumentList			613949	1					
ANR	615194	CompoundStatement		250:1:8299:8299	613949	1					
ANR	615195	ExpressionStatement	activeBeautifierStack -> back ( ) -> inLineNumber = inLineNumber	1149:2:33986:34044	613949	0	True				
ANR	615196	AssignmentExpression	activeBeautifierStack -> back ( ) -> inLineNumber = inLineNumber		613949	0		=			
ANR	615197	PtrMemberAccess	activeBeautifierStack -> back ( ) -> inLineNumber		613949	0					
ANR	615198	CallExpression	activeBeautifierStack -> back ( )		613949	0					
ANR	615199	Callee	activeBeautifierStack -> back		613949	0					
ANR	615200	PtrMemberAccess	activeBeautifierStack -> back		613949	0					
ANR	615201	Identifier	activeBeautifierStack		613949	0					
ANR	615202	Identifier	back		613949	1					
ANR	615203	ArgumentList			613949	1					
ANR	615204	Identifier	inLineNumber		613949	1					
ANR	615205	Identifier	inLineNumber		613949	1					
ANR	615206	ExpressionStatement	activeBeautifierStack -> back ( ) -> runInIndentContinuation = runInIndentContinuation	1150:2:34048:34128	613949	1	True				
ANR	615207	AssignmentExpression	activeBeautifierStack -> back ( ) -> runInIndentContinuation = runInIndentContinuation		613949	0		=			
ANR	615208	PtrMemberAccess	activeBeautifierStack -> back ( ) -> runInIndentContinuation		613949	0					
ANR	615209	CallExpression	activeBeautifierStack -> back ( )		613949	0					
ANR	615210	Callee	activeBeautifierStack -> back		613949	0					
ANR	615211	PtrMemberAccess	activeBeautifierStack -> back		613949	0					
ANR	615212	Identifier	activeBeautifierStack		613949	0					
ANR	615213	Identifier	back		613949	1					
ANR	615214	ArgumentList			613949	1					
ANR	615215	Identifier	runInIndentContinuation		613949	1					
ANR	615216	Identifier	runInIndentContinuation		613949	1					
ANR	615217	ExpressionStatement	activeBeautifierStack -> back ( ) -> nonInStatementBrace = nonInStatementBrace	1151:2:34132:34204	613949	2	True				
ANR	615218	AssignmentExpression	activeBeautifierStack -> back ( ) -> nonInStatementBrace = nonInStatementBrace		613949	0		=			
ANR	615219	PtrMemberAccess	activeBeautifierStack -> back ( ) -> nonInStatementBrace		613949	0					
ANR	615220	CallExpression	activeBeautifierStack -> back ( )		613949	0					
ANR	615221	Callee	activeBeautifierStack -> back		613949	0					
ANR	615222	PtrMemberAccess	activeBeautifierStack -> back		613949	0					
ANR	615223	Identifier	activeBeautifierStack		613949	0					
ANR	615224	Identifier	back		613949	1					
ANR	615225	ArgumentList			613949	1					
ANR	615226	Identifier	nonInStatementBrace		613949	1					
ANR	615227	Identifier	nonInStatementBrace		613949	1					
ANR	615228	ExpressionStatement	activeBeautifierStack -> back ( ) -> objCColonAlignSubsequent = objCColonAlignSubsequent	1152:2:34208:34290	613949	3	True				
ANR	615229	AssignmentExpression	activeBeautifierStack -> back ( ) -> objCColonAlignSubsequent = objCColonAlignSubsequent		613949	0		=			
ANR	615230	PtrMemberAccess	activeBeautifierStack -> back ( ) -> objCColonAlignSubsequent		613949	0					
ANR	615231	CallExpression	activeBeautifierStack -> back ( )		613949	0					
ANR	615232	Callee	activeBeautifierStack -> back		613949	0					
ANR	615233	PtrMemberAccess	activeBeautifierStack -> back		613949	0					
ANR	615234	Identifier	activeBeautifierStack		613949	0					
ANR	615235	Identifier	back		613949	1					
ANR	615236	ArgumentList			613949	1					
ANR	615237	Identifier	objCColonAlignSubsequent		613949	1					
ANR	615238	Identifier	objCColonAlignSubsequent		613949	1					
ANR	615239	ExpressionStatement	activeBeautifierStack -> back ( ) -> lineCommentNoBeautify = lineCommentNoBeautify	1153:2:34294:34370	613949	4	True				
ANR	615240	AssignmentExpression	activeBeautifierStack -> back ( ) -> lineCommentNoBeautify = lineCommentNoBeautify		613949	0		=			
ANR	615241	PtrMemberAccess	activeBeautifierStack -> back ( ) -> lineCommentNoBeautify		613949	0					
ANR	615242	CallExpression	activeBeautifierStack -> back ( )		613949	0					
ANR	615243	Callee	activeBeautifierStack -> back		613949	0					
ANR	615244	PtrMemberAccess	activeBeautifierStack -> back		613949	0					
ANR	615245	Identifier	activeBeautifierStack		613949	0					
ANR	615246	Identifier	back		613949	1					
ANR	615247	ArgumentList			613949	1					
ANR	615248	Identifier	lineCommentNoBeautify		613949	1					
ANR	615249	Identifier	lineCommentNoBeautify		613949	1					
ANR	615250	ExpressionStatement	activeBeautifierStack -> back ( ) -> isElseHeaderIndent = isElseHeaderIndent	1154:2:34374:34444	613949	5	True				
ANR	615251	AssignmentExpression	activeBeautifierStack -> back ( ) -> isElseHeaderIndent = isElseHeaderIndent		613949	0		=			
ANR	615252	PtrMemberAccess	activeBeautifierStack -> back ( ) -> isElseHeaderIndent		613949	0					
ANR	615253	CallExpression	activeBeautifierStack -> back ( )		613949	0					
ANR	615254	Callee	activeBeautifierStack -> back		613949	0					
ANR	615255	PtrMemberAccess	activeBeautifierStack -> back		613949	0					
ANR	615256	Identifier	activeBeautifierStack		613949	0					
ANR	615257	Identifier	back		613949	1					
ANR	615258	ArgumentList			613949	1					
ANR	615259	Identifier	isElseHeaderIndent		613949	1					
ANR	615260	Identifier	isElseHeaderIndent		613949	1					
ANR	615261	ExpressionStatement	activeBeautifierStack -> back ( ) -> isCaseHeaderCommentIndent = isCaseHeaderCommentIndent	1155:2:34448:34532	613949	6	True				
ANR	615262	AssignmentExpression	activeBeautifierStack -> back ( ) -> isCaseHeaderCommentIndent = isCaseHeaderCommentIndent		613949	0		=			
ANR	615263	PtrMemberAccess	activeBeautifierStack -> back ( ) -> isCaseHeaderCommentIndent		613949	0					
ANR	615264	CallExpression	activeBeautifierStack -> back ( )		613949	0					
ANR	615265	Callee	activeBeautifierStack -> back		613949	0					
ANR	615266	PtrMemberAccess	activeBeautifierStack -> back		613949	0					
ANR	615267	Identifier	activeBeautifierStack		613949	0					
ANR	615268	Identifier	back		613949	1					
ANR	615269	ArgumentList			613949	1					
ANR	615270	Identifier	isCaseHeaderCommentIndent		613949	1					
ANR	615271	Identifier	isCaseHeaderCommentIndent		613949	1					
ANR	615272	ExpressionStatement	activeBeautifierStack -> back ( ) -> isNonInStatementArray = isNonInStatementArray	1156:2:34536:34612	613949	7	True				
ANR	615273	AssignmentExpression	activeBeautifierStack -> back ( ) -> isNonInStatementArray = isNonInStatementArray		613949	0		=			
ANR	615274	PtrMemberAccess	activeBeautifierStack -> back ( ) -> isNonInStatementArray		613949	0					
ANR	615275	CallExpression	activeBeautifierStack -> back ( )		613949	0					
ANR	615276	Callee	activeBeautifierStack -> back		613949	0					
ANR	615277	PtrMemberAccess	activeBeautifierStack -> back		613949	0					
ANR	615278	Identifier	activeBeautifierStack		613949	0					
ANR	615279	Identifier	back		613949	1					
ANR	615280	ArgumentList			613949	1					
ANR	615281	Identifier	isNonInStatementArray		613949	1					
ANR	615282	Identifier	isNonInStatementArray		613949	1					
ANR	615283	ExpressionStatement	activeBeautifierStack -> back ( ) -> isSharpAccessor = isSharpAccessor	1157:2:34616:34680	613949	8	True				
ANR	615284	AssignmentExpression	activeBeautifierStack -> back ( ) -> isSharpAccessor = isSharpAccessor		613949	0		=			
ANR	615285	PtrMemberAccess	activeBeautifierStack -> back ( ) -> isSharpAccessor		613949	0					
ANR	615286	CallExpression	activeBeautifierStack -> back ( )		613949	0					
ANR	615287	Callee	activeBeautifierStack -> back		613949	0					
ANR	615288	PtrMemberAccess	activeBeautifierStack -> back		613949	0					
ANR	615289	Identifier	activeBeautifierStack		613949	0					
ANR	615290	Identifier	back		613949	1					
ANR	615291	ArgumentList			613949	1					
ANR	615292	Identifier	isSharpAccessor		613949	1					
ANR	615293	Identifier	isSharpAccessor		613949	1					
ANR	615294	ExpressionStatement	activeBeautifierStack -> back ( ) -> isSharpDelegate = isSharpDelegate	1158:2:34684:34748	613949	9	True				
ANR	615295	AssignmentExpression	activeBeautifierStack -> back ( ) -> isSharpDelegate = isSharpDelegate		613949	0		=			
ANR	615296	PtrMemberAccess	activeBeautifierStack -> back ( ) -> isSharpDelegate		613949	0					
ANR	615297	CallExpression	activeBeautifierStack -> back ( )		613949	0					
ANR	615298	Callee	activeBeautifierStack -> back		613949	0					
ANR	615299	PtrMemberAccess	activeBeautifierStack -> back		613949	0					
ANR	615300	Identifier	activeBeautifierStack		613949	0					
ANR	615301	Identifier	back		613949	1					
ANR	615302	ArgumentList			613949	1					
ANR	615303	Identifier	isSharpDelegate		613949	1					
ANR	615304	Identifier	isSharpDelegate		613949	1					
ANR	615305	ExpressionStatement	activeBeautifierStack -> back ( ) -> isInExternC = isInExternC	1159:2:34752:34808	613949	10	True				
ANR	615306	AssignmentExpression	activeBeautifierStack -> back ( ) -> isInExternC = isInExternC		613949	0		=			
ANR	615307	PtrMemberAccess	activeBeautifierStack -> back ( ) -> isInExternC		613949	0					
ANR	615308	CallExpression	activeBeautifierStack -> back ( )		613949	0					
ANR	615309	Callee	activeBeautifierStack -> back		613949	0					
ANR	615310	PtrMemberAccess	activeBeautifierStack -> back		613949	0					
ANR	615311	Identifier	activeBeautifierStack		613949	0					
ANR	615312	Identifier	back		613949	1					
ANR	615313	ArgumentList			613949	1					
ANR	615314	Identifier	isInExternC		613949	1					
ANR	615315	Identifier	isInExternC		613949	1					
ANR	615316	ExpressionStatement	activeBeautifierStack -> back ( ) -> isInBeautifySQL = isInBeautifySQL	1160:2:34812:34876	613949	11	True				
ANR	615317	AssignmentExpression	activeBeautifierStack -> back ( ) -> isInBeautifySQL = isInBeautifySQL		613949	0		=			
ANR	615318	PtrMemberAccess	activeBeautifierStack -> back ( ) -> isInBeautifySQL		613949	0					
ANR	615319	CallExpression	activeBeautifierStack -> back ( )		613949	0					
ANR	615320	Callee	activeBeautifierStack -> back		613949	0					
ANR	615321	PtrMemberAccess	activeBeautifierStack -> back		613949	0					
ANR	615322	Identifier	activeBeautifierStack		613949	0					
ANR	615323	Identifier	back		613949	1					
ANR	615324	ArgumentList			613949	1					
ANR	615325	Identifier	isInBeautifySQL		613949	1					
ANR	615326	Identifier	isInBeautifySQL		613949	1					
ANR	615327	ExpressionStatement	activeBeautifierStack -> back ( ) -> isInIndentableStruct = isInIndentableStruct	1161:2:34880:34954	613949	12	True				
ANR	615328	AssignmentExpression	activeBeautifierStack -> back ( ) -> isInIndentableStruct = isInIndentableStruct		613949	0		=			
ANR	615329	PtrMemberAccess	activeBeautifierStack -> back ( ) -> isInIndentableStruct		613949	0					
ANR	615330	CallExpression	activeBeautifierStack -> back ( )		613949	0					
ANR	615331	Callee	activeBeautifierStack -> back		613949	0					
ANR	615332	PtrMemberAccess	activeBeautifierStack -> back		613949	0					
ANR	615333	Identifier	activeBeautifierStack		613949	0					
ANR	615334	Identifier	back		613949	1					
ANR	615335	ArgumentList			613949	1					
ANR	615336	Identifier	isInIndentableStruct		613949	1					
ANR	615337	Identifier	isInIndentableStruct		613949	1					
ANR	615338	ExpressionStatement	activeBeautifierStack -> back ( ) -> isInIndentablePreproc = isInIndentablePreproc	1162:2:34958:35034	613949	13	True				
ANR	615339	AssignmentExpression	activeBeautifierStack -> back ( ) -> isInIndentablePreproc = isInIndentablePreproc		613949	0		=			
ANR	615340	PtrMemberAccess	activeBeautifierStack -> back ( ) -> isInIndentablePreproc		613949	0					
ANR	615341	CallExpression	activeBeautifierStack -> back ( )		613949	0					
ANR	615342	Callee	activeBeautifierStack -> back		613949	0					
ANR	615343	PtrMemberAccess	activeBeautifierStack -> back		613949	0					
ANR	615344	Identifier	activeBeautifierStack		613949	0					
ANR	615345	Identifier	back		613949	1					
ANR	615346	ArgumentList			613949	1					
ANR	615347	Identifier	isInIndentablePreproc		613949	1					
ANR	615348	Identifier	isInIndentablePreproc		613949	1					
ANR	615349	ReturnStatement	return activeBeautifierStack -> back ( ) -> beautify ( originalLine ) ;	1164:2:35089:35149	613949	14	True				
ANR	615350	CallExpression	activeBeautifierStack -> back ( ) -> beautify ( originalLine )		613949	0					
ANR	615351	Callee	activeBeautifierStack -> back ( ) -> beautify		613949	0					
ANR	615352	PtrMemberAccess	activeBeautifierStack -> back ( ) -> beautify		613949	0					
ANR	615353	CallExpression	activeBeautifierStack -> back ( )		613949	0					
ANR	615354	Callee	activeBeautifierStack -> back		613949	0					
ANR	615355	PtrMemberAccess	activeBeautifierStack -> back		613949	0					
ANR	615356	Identifier	activeBeautifierStack		613949	0					
ANR	615357	Identifier	back		613949	1					
ANR	615358	ArgumentList			613949	1					
ANR	615359	Identifier	beautify		613949	1					
ANR	615360	ArgumentList	originalLine		613949	1					
ANR	615361	Argument	originalLine		613949	0					
ANR	615362	Identifier	originalLine		613949	0					
ANR	615363	IdentifierDeclStatement	bool isInExtraHeaderIndent = false ;	1169:1:35295:35329	613949	28	True				
ANR	615364	IdentifierDecl	isInExtraHeaderIndent = false		613949	0					
ANR	615365	IdentifierDeclType	bool		613949	0					
ANR	615366	Identifier	isInExtraHeaderIndent		613949	1					
ANR	615367	AssignmentExpression	isInExtraHeaderIndent = false		613949	2		=			
ANR	615368	Identifier	false		613949	0					
ANR	615369	Identifier	false		613949	1					
ANR	615370	IfStatement	if ( ! headerStack -> empty ( ) && lineBeginsWithOpenBrace && ( headerStack -> back ( ) != & AS_OPEN_BRACE || probationHeader != nullptr ) )		613949	29					
ANR	615371	Condition	! headerStack -> empty ( ) && lineBeginsWithOpenBrace && ( headerStack -> back ( ) != & AS_OPEN_BRACE || probationHeader != nullptr )	1170:5:35336:35487	613949	0	True				
ANR	615372	AndExpression	! headerStack -> empty ( ) && lineBeginsWithOpenBrace && ( headerStack -> back ( ) != & AS_OPEN_BRACE || probationHeader != nullptr )		613949	0		&&			
ANR	615373	UnaryOperationExpression	! headerStack -> empty ( )		613949	0					
ANR	615374	UnaryOperator	!		613949	0					
ANR	615375	CallExpression	headerStack -> empty ( )		613949	1					
ANR	615376	Callee	headerStack -> empty		613949	0					
ANR	615377	PtrMemberAccess	headerStack -> empty		613949	0					
ANR	615378	Identifier	headerStack		613949	0					
ANR	615379	Identifier	empty		613949	1					
ANR	615380	ArgumentList			613949	1					
ANR	615381	AndExpression	lineBeginsWithOpenBrace && ( headerStack -> back ( ) != & AS_OPEN_BRACE || probationHeader != nullptr )		613949	1		&&			
ANR	615382	Identifier	lineBeginsWithOpenBrace		613949	0					
ANR	615383	OrExpression	headerStack -> back ( ) != & AS_OPEN_BRACE || probationHeader != nullptr		613949	1		||			
ANR	615384	EqualityExpression	headerStack -> back ( ) != & AS_OPEN_BRACE		613949	0		!=			
ANR	615385	CallExpression	headerStack -> back ( )		613949	0					
ANR	615386	Callee	headerStack -> back		613949	0					
ANR	615387	PtrMemberAccess	headerStack -> back		613949	0					
ANR	615388	Identifier	headerStack		613949	0					
ANR	615389	Identifier	back		613949	1					
ANR	615390	ArgumentList			613949	1					
ANR	615391	UnaryOperationExpression	& AS_OPEN_BRACE		613949	1					
ANR	615392	UnaryOperator	&		613949	0					
ANR	615393	Identifier	AS_OPEN_BRACE		613949	1					
ANR	615394	EqualityExpression	probationHeader != nullptr		613949	1		!=			
ANR	615395	Identifier	probationHeader		613949	0					
ANR	615396	Identifier	nullptr		613949	1					
ANR	615397	ExpressionStatement	isInExtraHeaderIndent = true	1174:2:35492:35520	613949	1	True				
ANR	615398	AssignmentExpression	isInExtraHeaderIndent = true		613949	0		=			
ANR	615399	Identifier	isInExtraHeaderIndent		613949	0					
ANR	615400	Identifier	true		613949	1					
ANR	615401	IdentifierDeclStatement	size_t iPrelim = headerStack -> size ( ) ;	1176:1:35524:35560	613949	30	True				
ANR	615402	IdentifierDecl	iPrelim = headerStack -> size ( )		613949	0					
ANR	615403	IdentifierDeclType	size_t		613949	0					
ANR	615404	Identifier	iPrelim		613949	1					
ANR	615405	AssignmentExpression	iPrelim = headerStack -> size ( )		613949	2		=			
ANR	615406	Identifier	iPrelim		613949	0					
ANR	615407	CallExpression	headerStack -> size ( )		613949	1					
ANR	615408	Callee	headerStack -> size		613949	0					
ANR	615409	PtrMemberAccess	headerStack -> size		613949	0					
ANR	615410	Identifier	headerStack		613949	0					
ANR	615411	Identifier	size		613949	1					
ANR	615412	ArgumentList			613949	1					
ANR	615413	ExpressionStatement	computePreliminaryIndentation ( )	1179:1:35648:35679	613949	31	True				
ANR	615414	CallExpression	computePreliminaryIndentation ( )		613949	0					
ANR	615415	Callee	computePreliminaryIndentation		613949	0					
ANR	615416	Identifier	computePreliminaryIndentation		613949	0					
ANR	615417	ArgumentList			613949	1					
ANR	615418	ExpressionStatement	parseCurrentLine ( line )	1182:1:35725:35747	613949	32	True				
ANR	615419	CallExpression	parseCurrentLine ( line )		613949	0					
ANR	615420	Callee	parseCurrentLine		613949	0					
ANR	615421	Identifier	parseCurrentLine		613949	0					
ANR	615422	ArgumentList	line		613949	1					
ANR	615423	Argument	line		613949	0					
ANR	615424	Identifier	line		613949	0					
ANR	615425	ExpressionStatement	"adjustParsedLineIndentation ( iPrelim , isInExtraHeaderIndent )"	1185:1:35791:35850	613949	33	True				
ANR	615426	CallExpression	"adjustParsedLineIndentation ( iPrelim , isInExtraHeaderIndent )"		613949	0					
ANR	615427	Callee	adjustParsedLineIndentation		613949	0					
ANR	615428	Identifier	adjustParsedLineIndentation		613949	0					
ANR	615429	ArgumentList	iPrelim		613949	1					
ANR	615430	Argument	iPrelim		613949	0					
ANR	615431	Identifier	iPrelim		613949	0					
ANR	615432	Argument	isInExtraHeaderIndent		613949	1					
ANR	615433	Identifier	isInExtraHeaderIndent		613949	0					
ANR	615434	IfStatement	if ( isInObjCMethodDefinition )		613949	34					
ANR	615435	Condition	isInObjCMethodDefinition	1187:5:35858:35881	613949	0	True				
ANR	615436	Identifier	isInObjCMethodDefinition		613949	0					
ANR	615437	ExpressionStatement	adjustObjCMethodDefinitionIndentation ( line )	1188:2:35886:35929	613949	1	True				
ANR	615438	CallExpression	adjustObjCMethodDefinitionIndentation ( line )		613949	0					
ANR	615439	Callee	adjustObjCMethodDefinitionIndentation		613949	0					
ANR	615440	Identifier	adjustObjCMethodDefinitionIndentation		613949	0					
ANR	615441	ArgumentList	line		613949	1					
ANR	615442	Argument	line		613949	0					
ANR	615443	Identifier	line		613949	0					
ANR	615444	IfStatement	if ( isInObjCMethodCall )		613949	35					
ANR	615445	Condition	isInObjCMethodCall	1190:5:35937:35954	613949	0	True				
ANR	615446	Identifier	isInObjCMethodCall		613949	0					
ANR	615447	ExpressionStatement	adjustObjCMethodCallIndentation ( line )	1191:2:35959:35996	613949	1	True				
ANR	615448	CallExpression	adjustObjCMethodCallIndentation ( line )		613949	0					
ANR	615449	Callee	adjustObjCMethodCallIndentation		613949	0					
ANR	615450	Identifier	adjustObjCMethodCallIndentation		613949	0					
ANR	615451	ArgumentList	line		613949	1					
ANR	615452	Argument	line		613949	0					
ANR	615453	Identifier	line		613949	0					
ANR	615454	IfStatement	if ( isInDefine )		613949	36					
ANR	615455	Condition	isInDefine	1193:5:36004:36013	613949	0	True				
ANR	615456	Identifier	isInDefine		613949	0					
ANR	615457	CompoundStatement		296:1:10334:10334	613949	1					
ANR	615458	IfStatement	if ( line . length ( ) > 0 && line [ 0 ] == '#' )		613949	0					
ANR	615459	Condition	line . length ( ) > 0 && line [ 0 ] == '#'	1195:6:36025:36059	613949	0	True				
ANR	615460	AndExpression	line . length ( ) > 0 && line [ 0 ] == '#'		613949	0		&&			
ANR	615461	RelationalExpression	line . length ( ) > 0		613949	0		>			
ANR	615462	CallExpression	line . length ( )		613949	0					
ANR	615463	Callee	line . length		613949	0					
ANR	615464	MemberAccess	line . length		613949	0					
ANR	615465	Identifier	line		613949	0					
ANR	615466	Identifier	length		613949	1					
ANR	615467	ArgumentList			613949	1					
ANR	615468	PrimaryExpression	0		613949	1					
ANR	615469	EqualityExpression	line [ 0 ] == '#'		613949	1		==			
ANR	615470	ArrayIndexing	line [ 0 ]		613949	0					
ANR	615471	Identifier	line		613949	0					
ANR	615472	PrimaryExpression	0		613949	1					
ANR	615473	PrimaryExpression	'#'		613949	1					
ANR	615474	CompoundStatement		300:3:10445:10482	613949	1					
ANR	615475	IdentifierDeclStatement	string preproc = trim ( line . substr ( 1 ) ) ;	1198:3:36128:36165	613949	0	True				
ANR	615476	IdentifierDecl	preproc = trim ( line . substr ( 1 ) )		613949	0					
ANR	615477	IdentifierDeclType	string		613949	0					
ANR	615478	Identifier	preproc		613949	1					
ANR	615479	AssignmentExpression	preproc = trim ( line . substr ( 1 ) )		613949	2		=			
ANR	615480	Identifier	preproc		613949	0					
ANR	615481	CallExpression	trim ( line . substr ( 1 ) )		613949	1					
ANR	615482	Callee	trim		613949	0					
ANR	615483	Identifier	trim		613949	0					
ANR	615484	ArgumentList	line . substr ( 1 )		613949	1					
ANR	615485	Argument	line . substr ( 1 )		613949	0					
ANR	615486	CallExpression	line . substr ( 1 )		613949	0					
ANR	615487	Callee	line . substr		613949	0					
ANR	615488	MemberAccess	line . substr		613949	0					
ANR	615489	Identifier	line		613949	0					
ANR	615490	Identifier	substr		613949	1					
ANR	615491	ArgumentList	1		613949	1					
ANR	615492	Argument	1		613949	0					
ANR	615493	PrimaryExpression	1		613949	0					
ANR	615494	IfStatement	"if ( preproc . compare ( 0 , 6 , ""define"" ) == 0 )"		613949	1					
ANR	615495	Condition	"preproc . compare ( 0 , 6 , ""define"" ) == 0"	1199:7:36174:36209	613949	0	True				
ANR	615496	EqualityExpression	"preproc . compare ( 0 , 6 , ""define"" ) == 0"		613949	0		==			
ANR	615497	CallExpression	"preproc . compare ( 0 , 6 , ""define"" )"		613949	0					
ANR	615498	Callee	preproc . compare		613949	0					
ANR	615499	MemberAccess	preproc . compare		613949	0					
ANR	615500	Identifier	preproc		613949	0					
ANR	615501	Identifier	compare		613949	1					
ANR	615502	ArgumentList	0		613949	1					
ANR	615503	Argument	0		613949	0					
ANR	615504	PrimaryExpression	0		613949	0					
ANR	615505	Argument	6		613949	1					
ANR	615506	PrimaryExpression	6		613949	0					
ANR	615507	Argument	"""define"""		613949	2					
ANR	615508	PrimaryExpression	"""define"""		613949	0					
ANR	615509	PrimaryExpression	0		613949	1					
ANR	615510	CompoundStatement		302:3:10532:10532	613949	1					
ANR	615511	IfStatement	if ( ! continuationIndentStack -> empty ( ) && continuationIndentStack -> back ( ) > 0 )		613949	0					
ANR	615512	Condition	! continuationIndentStack -> empty ( ) && continuationIndentStack -> back ( ) > 0	1201:8:36225:36308	613949	0	True				
ANR	615513	AndExpression	! continuationIndentStack -> empty ( ) && continuationIndentStack -> back ( ) > 0		613949	0		&&			
ANR	615514	UnaryOperationExpression	! continuationIndentStack -> empty ( )		613949	0					
ANR	615515	UnaryOperator	!		613949	0					
ANR	615516	CallExpression	continuationIndentStack -> empty ( )		613949	1					
ANR	615517	Callee	continuationIndentStack -> empty		613949	0					
ANR	615518	PtrMemberAccess	continuationIndentStack -> empty		613949	0					
ANR	615519	Identifier	continuationIndentStack		613949	0					
ANR	615520	Identifier	empty		613949	1					
ANR	615521	ArgumentList			613949	1					
ANR	615522	RelationalExpression	continuationIndentStack -> back ( ) > 0		613949	1		>			
ANR	615523	CallExpression	continuationIndentStack -> back ( )		613949	0					
ANR	615524	Callee	continuationIndentStack -> back		613949	0					
ANR	615525	PtrMemberAccess	continuationIndentStack -> back		613949	0					
ANR	615526	Identifier	continuationIndentStack		613949	0					
ANR	615527	Identifier	back		613949	1					
ANR	615528	ArgumentList			613949	1					
ANR	615529	PrimaryExpression	0		613949	1					
ANR	615530	CompoundStatement		305:4:10632:10632	613949	1					
ANR	615531	ExpressionStatement	defineIndentCount = indentCount	1204:5:36322:36353	613949	0	True				
ANR	615532	AssignmentExpression	defineIndentCount = indentCount		613949	0		=			
ANR	615533	Identifier	defineIndentCount		613949	0					
ANR	615534	Identifier	indentCount		613949	1					
ANR	615535	ElseStatement	else		613949	0					
ANR	615536	CompoundStatement		309:4:10691:10691	613949	0					
ANR	615537	ExpressionStatement	defineIndentCount = indentCount - 1	1208:5:36381:36416	613949	0	True				
ANR	615538	AssignmentExpression	defineIndentCount = indentCount - 1		613949	0		=			
ANR	615539	Identifier	defineIndentCount		613949	0					
ANR	615540	AdditiveExpression	indentCount - 1		613949	1		-			
ANR	615541	Identifier	indentCount		613949	0					
ANR	615542	PrimaryExpression	1		613949	1					
ANR	615543	ExpressionStatement	-- indentCount	1209:5:36423:36436	613949	1	True				
ANR	615544	UnaryExpression	-- indentCount		613949	0					
ANR	615545	IncDec	--		613949	0					
ANR	615546	Identifier	indentCount		613949	1					
ANR	615547	ExpressionStatement	indentCount -= defineIndentCount	1214:2:36456:36488	613949	1	True				
ANR	615548	AssignmentExpression	indentCount -= defineIndentCount		613949	0		-=			
ANR	615549	Identifier	indentCount		613949	0					
ANR	615550	Identifier	defineIndentCount		613949	1					
ANR	615551	IfStatement	if ( indentCount < 0 )		613949	37					
ANR	615552	Condition	indentCount < 0	1217:5:36499:36513	613949	0	True				
ANR	615553	RelationalExpression	indentCount < 0		613949	0		<			
ANR	615554	Identifier	indentCount		613949	0					
ANR	615555	PrimaryExpression	0		613949	1					
ANR	615556	ExpressionStatement	indentCount = 0	1218:2:36518:36533	613949	1	True				
ANR	615557	AssignmentExpression	indentCount = 0		613949	0		=			
ANR	615558	Identifier	indentCount		613949	0					
ANR	615559	PrimaryExpression	0		613949	1					
ANR	615560	IfStatement	if ( lineCommentNoBeautify || blockCommentNoBeautify || isInQuoteContinuation )		613949	38					
ANR	615561	Condition	lineCommentNoBeautify || blockCommentNoBeautify || isInQuoteContinuation	1220:5:36541:36612	613949	0	True				
ANR	615562	OrExpression	lineCommentNoBeautify || blockCommentNoBeautify || isInQuoteContinuation		613949	0		||			
ANR	615563	Identifier	lineCommentNoBeautify		613949	0					
ANR	615564	OrExpression	blockCommentNoBeautify || isInQuoteContinuation		613949	1		||			
ANR	615565	Identifier	blockCommentNoBeautify		613949	0					
ANR	615566	Identifier	isInQuoteContinuation		613949	1					
ANR	615567	ExpressionStatement	indentCount = spaceIndentCount = 0	1221:2:36617:36651	613949	1	True				
ANR	615568	AssignmentExpression	indentCount = spaceIndentCount = 0		613949	0		=			
ANR	615569	Identifier	indentCount		613949	0					
ANR	615570	AssignmentExpression	spaceIndentCount = 0		613949	1		=			
ANR	615571	Identifier	spaceIndentCount		613949	0					
ANR	615572	PrimaryExpression	0		613949	1					
ANR	615573	IdentifierDeclStatement	"string indentedLine = preLineWS ( indentCount , spaceIndentCount ) + line ;"	1225:1:36712:36781	613949	39	True				
ANR	615574	IdentifierDecl	"indentedLine = preLineWS ( indentCount , spaceIndentCount ) + line"		613949	0					
ANR	615575	IdentifierDeclType	string		613949	0					
ANR	615576	Identifier	indentedLine		613949	1					
ANR	615577	AssignmentExpression	"indentedLine = preLineWS ( indentCount , spaceIndentCount ) + line"		613949	2		=			
ANR	615578	Identifier	indentedLine		613949	0					
ANR	615579	AdditiveExpression	"preLineWS ( indentCount , spaceIndentCount ) + line"		613949	1		+			
ANR	615580	CallExpression	"preLineWS ( indentCount , spaceIndentCount )"		613949	0					
ANR	615581	Callee	preLineWS		613949	0					
ANR	615582	Identifier	preLineWS		613949	0					
ANR	615583	ArgumentList	indentCount		613949	1					
ANR	615584	Argument	indentCount		613949	0					
ANR	615585	Identifier	indentCount		613949	0					
ANR	615586	Argument	spaceIndentCount		613949	1					
ANR	615587	Identifier	spaceIndentCount		613949	0					
ANR	615588	Identifier	line		613949	1					
ANR	615589	ExpressionStatement	"indentedLine = getIndentedLineReturn ( indentedLine , originalLine )"	1226:1:36784:36848	613949	40	True				
ANR	615590	AssignmentExpression	"indentedLine = getIndentedLineReturn ( indentedLine , originalLine )"		613949	0		=			
ANR	615591	Identifier	indentedLine		613949	0					
ANR	615592	CallExpression	"getIndentedLineReturn ( indentedLine , originalLine )"		613949	1					
ANR	615593	Callee	getIndentedLineReturn		613949	0					
ANR	615594	Identifier	getIndentedLineReturn		613949	0					
ANR	615595	ArgumentList	indentedLine		613949	1					
ANR	615596	Argument	indentedLine		613949	0					
ANR	615597	Identifier	indentedLine		613949	0					
ANR	615598	Argument	originalLine		613949	1					
ANR	615599	Identifier	originalLine		613949	0					
ANR	615600	ExpressionStatement	prevFinalLineSpaceIndentCount = spaceIndentCount	1228:1:36852:36900	613949	41	True				
ANR	615601	AssignmentExpression	prevFinalLineSpaceIndentCount = spaceIndentCount		613949	0		=			
ANR	615602	Identifier	prevFinalLineSpaceIndentCount		613949	0					
ANR	615603	Identifier	spaceIndentCount		613949	1					
ANR	615604	ExpressionStatement	prevFinalLineIndentCount = indentCount	1229:1:36903:36941	613949	42	True				
ANR	615605	AssignmentExpression	prevFinalLineIndentCount = indentCount		613949	0		=			
ANR	615606	Identifier	prevFinalLineIndentCount		613949	0					
ANR	615607	Identifier	indentCount		613949	1					
ANR	615608	IfStatement	if ( lastLineHeader != nullptr )		613949	43					
ANR	615609	Condition	lastLineHeader != nullptr	1231:5:36949:36973	613949	0	True				
ANR	615610	EqualityExpression	lastLineHeader != nullptr		613949	0		!=			
ANR	615611	Identifier	lastLineHeader		613949	0					
ANR	615612	Identifier	nullptr		613949	1					
ANR	615613	ExpressionStatement	previousLastLineHeader = lastLineHeader	1232:2:36978:37017	613949	1	True				
ANR	615614	AssignmentExpression	previousLastLineHeader = lastLineHeader		613949	0		=			
ANR	615615	Identifier	previousLastLineHeader		613949	0					
ANR	615616	Identifier	lastLineHeader		613949	1					
ANR	615617	IfStatement	"if ( ( lineIsLineCommentOnly || lineIsCommentOnly ) && line . find ( ""*INDENT-ON*"" , 0 ) != string :: npos )"		613949	44					
ANR	615618	Condition	"( lineIsLineCommentOnly || lineIsCommentOnly ) && line . find ( ""*INDENT-ON*"" , 0 ) != string :: npos"	1234:5:37025:37124	613949	0	True				
ANR	615619	AndExpression	"( lineIsLineCommentOnly || lineIsCommentOnly ) && line . find ( ""*INDENT-ON*"" , 0 ) != string :: npos"		613949	0		&&			
ANR	615620	OrExpression	lineIsLineCommentOnly || lineIsCommentOnly		613949	0		||			
ANR	615621	Identifier	lineIsLineCommentOnly		613949	0					
ANR	615622	Identifier	lineIsCommentOnly		613949	1					
ANR	615623	EqualityExpression	"line . find ( ""*INDENT-ON*"" , 0 ) != string :: npos"		613949	1		!=			
ANR	615624	CallExpression	"line . find ( ""*INDENT-ON*"" , 0 )"		613949	0					
ANR	615625	Callee	line . find		613949	0					
ANR	615626	MemberAccess	line . find		613949	0					
ANR	615627	Identifier	line		613949	0					
ANR	615628	Identifier	find		613949	1					
ANR	615629	ArgumentList	"""*INDENT-ON*"""		613949	1					
ANR	615630	Argument	"""*INDENT-ON*"""		613949	0					
ANR	615631	PrimaryExpression	"""*INDENT-ON*"""		613949	0					
ANR	615632	Argument	0		613949	1					
ANR	615633	PrimaryExpression	0		613949	0					
ANR	615634	Identifier	string :: npos		613949	1					
ANR	615635	ExpressionStatement	isIndentModeOff = false	1236:2:37129:37152	613949	1	True				
ANR	615636	AssignmentExpression	isIndentModeOff = false		613949	0		=			
ANR	615637	Identifier	isIndentModeOff		613949	0					
ANR	615638	Identifier	false		613949	1					
ANR	615639	ReturnStatement	return indentedLine ;	1238:1:37156:37175	613949	45	True				
ANR	615640	Identifier	indentedLine		613949	0					
ANR	615641	ReturnType	string		613949	1					
ANR	615642	Identifier	ASBeautifier :: beautify		613949	2					
ANR	615643	ParameterList	const string & originalLine		613949	3					
ANR	615644	Parameter	const string & originalLine	898:30:25654:25679	613949	0	True				
ANR	615645	ParameterType	const string &		613949	0					
ANR	615646	Identifier	originalLine		613949	1					
ANR	615647	CFGEntryNode	ENTRY		613949		True				
ANR	615648	CFGExitNode	EXIT		613949		True				
ANR	615649	Symbol	preproc . length		613949						
ANR	615650	Symbol	lineOpensWithLineComment		613949						
ANR	615651	Symbol	line . find		613949						
ANR	615652	Symbol	activeBeautifierStack -> back ( ) -> isInIndentableStruct		613949						
ANR	615653	Symbol	isInExtraHeaderIndent		613949						
ANR	615654	Symbol	isInVerbatimQuote		613949						
ANR	615655	Symbol	continuationIndentStack -> back		613949						
ANR	615656	Symbol	lineOpensWithComment		613949						
ANR	615657	Symbol	originalLine		613949						
ANR	615658	Symbol	headerStack		613949						
ANR	615659	Symbol	lineIsLineCommentOnly		613949						
ANR	615660	Symbol	trim		613949						
ANR	615661	Symbol	preprocIndentStack -> back ( ) . first		613949						
ANR	615662	Symbol	isInEnum		613949						
ANR	615663	Symbol	computePreprocessorIndent		613949						
ANR	615664	Symbol	previousLastLineHeader		613949						
ANR	615665	Symbol	isIndentModeOff		613949						
ANR	615666	Symbol	getIndentedLineReturn		613949						
ANR	615667	Symbol	lineBeginsWithCloseBrace		613949						
ANR	615668	Symbol	lineBeginsWithComma		613949						
ANR	615669	Symbol	* firstChar		613949						
ANR	615670	Symbol	line . find_first_not_of		613949						
ANR	615671	Symbol	activeBeautifierStack -> back ( ) -> isSharpDelegate		613949						
ANR	615672	Symbol	lineClosingBlocksNum		613949						
ANR	615673	Symbol	blockCommentNoIndent		613949						
ANR	615674	Symbol	inLineNumber		613949						
ANR	615675	Symbol	isSharpAccessor		613949						
ANR	615676	Symbol	continuationIndentStack -> empty		613949						
ANR	615677	Symbol	indentedLine		613949						
ANR	615678	Symbol	preprocIndentStack -> empty		613949						
ANR	615679	Symbol	activeBeautifierStack		613949						
ANR	615680	Symbol	shouldIndentPreprocConditional		613949						
ANR	615681	Symbol	isCaseHeaderCommentIndent		613949						
ANR	615682	Symbol	nonInStatementBrace		613949						
ANR	615683	Symbol	isInObjCMethodCall		613949						
ANR	615684	Symbol	isInDefine		613949						
ANR	615685	Symbol	preproc . substr		613949						
ANR	615686	Symbol	activeBeautifierStack -> empty		613949						
ANR	615687	Symbol	preprocIndentStack		613949						
ANR	615688	Symbol	lineCommentNoBeautify		613949						
ANR	615689	Symbol	isInIndentableStruct		613949						
ANR	615690	Symbol	lineBeginsWithOpenBrace		613949						
ANR	615691	Symbol	line . find_last_not_of		613949						
ANR	615692	Symbol	isIndentedPreprocessor		613949						
ANR	615693	Symbol	isImmediatelyPostObjCMethodDefinition		613949						
ANR	615694	Symbol	isNonInStatementArray		613949						
ANR	615695	Symbol	& AS_OPEN_BRACE		613949						
ANR	615696	Symbol	isInObjCMethodDefinition		613949						
ANR	615697	Symbol	isInSwitch		613949						
ANR	615698	Symbol	lastLineHeader		613949						
ANR	615699	Symbol	preprocBlockIndent		613949						
ANR	615700	Symbol	lineOpeningBlocksNum		613949						
ANR	615701	Symbol	j		613949						
ANR	615702	Symbol	k		613949						
ANR	615703	Symbol	activeBeautifierStack -> back ( ) -> computePreprocessorIndent		613949						
ANR	615704	Symbol	activeBeautifierStack -> back ( ) -> isInIndentablePreproc		613949						
ANR	615705	Symbol	indentCount		613949						
ANR	615706	Symbol	currentHeader		613949						
ANR	615707	Symbol	extractPreprocessorStatement		613949						
ANR	615708	Symbol	isImmediatelyPostObjCMethodCall		613949						
ANR	615709	Symbol	headerStack -> empty		613949						
ANR	615710	Symbol	haveLineContinuationChar		613949						
ANR	615711	Symbol	preproc		613949						
ANR	615712	Symbol	* line		613949						
ANR	615713	Symbol	isInQuoteContinuation		613949						
ANR	615714	Symbol	trimEnd		613949						
ANR	615715	Symbol	activeBeautifierStack -> back		613949						
ANR	615716	Symbol	activeBeautifierStack -> back ( ) -> runInIndentContinuation		613949						
ANR	615717	Symbol	originalLine . length		613949						
ANR	615718	Symbol	headerStack -> size		613949						
ANR	615719	Symbol	activeBeautifierStack -> back ( ) -> isInExternC		613949						
ANR	615720	Symbol	preprocIndentStack -> back		613949						
ANR	615721	Symbol	* preprocIndentStack		613949						
ANR	615722	Symbol	* headerStack		613949						
ANR	615723	Symbol	isInComment		613949						
ANR	615724	Symbol	defineBeautifier -> beautify		613949						
ANR	615725	Symbol	isInPreprocessorUnterminatedComment		613949						
ANR	615726	Symbol	headerStack -> back		613949						
ANR	615727	Symbol	isInDefineDefinition		613949						
ANR	615728	Symbol	* defineBeautifier		613949						
ANR	615729	Symbol	objCColonAlignSubsequent		613949						
ANR	615730	Symbol	activeBeautifierStack -> back ( ) -> isSharpAccessor		613949						
ANR	615731	Symbol	defineBeautifier		613949						
ANR	615732	Symbol	* * activeBeautifierStack		613949						
ANR	615733	Symbol	activeBeautifierStack -> back ( ) -> nonInStatementBrace		613949						
ANR	615734	Symbol	isInRunInComment		613949						
ANR	615735	Symbol	isInClassInitializer		613949						
ANR	615736	Symbol	entry		613949						
ANR	615737	Symbol	activeBeautifierStack -> back ( ) -> beautify		613949						
ANR	615738	Symbol	* originalLine		613949						
ANR	615739	Symbol	emptyLineFill		613949						
ANR	615740	Symbol	lineIsCommentOnly		613949						
ANR	615741	Symbol	spaceIndentCount		613949						
ANR	615742	Symbol	isInAsmOneLine		613949						
ANR	615743	Symbol	activeBeautifierStack -> back ( ) -> objCColonAlignSubsequent		613949						
ANR	615744	Symbol	true		613949						
ANR	615745	Symbol	* line . length		613949						
ANR	615746	Symbol	isInIndentablePreprocBlock		613949						
ANR	615747	Symbol	continuationIndentStack		613949						
ANR	615748	Symbol	nullptr		613949						
ANR	615749	Symbol	isInClass		613949						
ANR	615750	Symbol	* activeBeautifierStack -> back		613949						
ANR	615751	Symbol	iPrelim		613949						
ANR	615752	Symbol	firstChar		613949						
ANR	615753	Symbol	isInExternC		613949						
ANR	615754	Symbol	defineIndentCount		613949						
ANR	615755	Symbol	activeBeautifierStack -> back ( ) -> lineCommentNoBeautify		613949						
ANR	615756	Symbol	* activeBeautifierStack		613949						
ANR	615757	Symbol	line		613949						
ANR	615758	Symbol	isSharpDelegate		613949						
ANR	615759	Symbol	line . substr		613949						
ANR	615760	Symbol	blockCommentNoBeautify		613949						
ANR	615761	Symbol	string :: npos		613949						
ANR	615762	Symbol	prevFinalLineSpaceIndentCount		613949						
ANR	615763	Symbol	activeBeautifierStack -> back ( ) -> isElseHeaderIndent		613949						
ANR	615764	Symbol	isInBeautifySQL		613949						
ANR	615765	Symbol	activeBeautifierStack -> back ( ) -> isNonInStatementArray		613949						
ANR	615766	Symbol	preprocIndentStack -> back ( ) . second		613949						
ANR	615767	Symbol	probationHeader		613949						
ANR	615768	Symbol	shouldIndentBracedLine		613949						
ANR	615769	Symbol	* continuationIndentStack		613949						
ANR	615770	Symbol	activeBeautifierStack -> back ( ) -> inLineNumber		613949						
ANR	615771	Symbol	activeBeautifierStack -> back ( ) -> isCaseHeaderCommentIndent		613949						
ANR	615772	Symbol	line . compare		613949						
ANR	615773	Symbol	isInClassHeaderTab		613949						
ANR	615774	Symbol	preLineWS		613949						
ANR	615775	Symbol	false		613949						
ANR	615776	Symbol	isInIndentablePreproc		613949						
ANR	615777	Symbol	lineStartsInComment		613949						
ANR	615778	Symbol	previousLineProbationTab		613949						
ANR	615779	Symbol	activeBeautifierStack -> back ( ) -> isInBeautifySQL		613949						
ANR	615780	Symbol	prevFinalLineIndentCount		613949						
ANR	615781	Symbol	isElseHeaderIndent		613949						
ANR	615782	Symbol	preproc . compare		613949						
ANR	615783	Symbol	runInIndentContinuation		613949						
ANR	615784	Symbol	line . length		613949						
ANR	615785	Symbol	backslashEndsPrevLine		613949						
ANR	615786	Function	ASBeautifier :: getIndentedLineReturn	1241:0:37180:37351							
ANR	615787	FunctionDef	"ASBeautifier :: getIndentedLineReturn (const string & newLine , const string & originalLine)"		615786	0					
ANR	615788	CompoundStatement		1242:0:37287:37351	615786	0					
ANR	615789	IfStatement	if ( isIndentModeOff )		615786	0					
ANR	615790	Condition	isIndentModeOff	1243:5:37294:37308	615786	0	True				
ANR	615791	Identifier	isIndentModeOff		615786	0					
ANR	615792	ReturnStatement	return originalLine ;	1244:2:37313:37332	615786	1	True				
ANR	615793	Identifier	originalLine		615786	0					
ANR	615794	ReturnStatement	return newLine ;	1245:1:37335:37349	615786	1	True				
ANR	615795	Identifier	newLine		615786	0					
ANR	615796	ReturnType	const string &		615786	1					
ANR	615797	Identifier	ASBeautifier :: getIndentedLineReturn		615786	2					
ANR	615798	ParameterList	"const string & newLine , const string & originalLine"		615786	3					
ANR	615799	Parameter	const string & newLine	1241:50:37230:37250	615786	0	True				
ANR	615800	ParameterType	const string &		615786	0					
ANR	615801	Identifier	newLine		615786	1					
ANR	615802	Parameter	const string & originalLine	1241:73:37253:37278	615786	1	True				
ANR	615803	ParameterType	const string &		615786	0					
ANR	615804	Identifier	originalLine		615786	1					
ANR	615805	CFGEntryNode	ENTRY		615786		True				
ANR	615806	CFGExitNode	EXIT		615786		True				
ANR	615807	Symbol	newLine		615786						
ANR	615808	Symbol	isIndentModeOff		615786						
ANR	615809	Symbol	originalLine		615786						
ANR	615810	Function	ASBeautifier :: preLineWS	1248:0:37354:38126							
ANR	615811	FunctionDef	"ASBeautifier :: preLineWS (int lineIndentCount , int lineSpaceIndentCount)"		615810	0					
ANR	615812	CompoundStatement		1249:0:37438:38126	615810	0					
ANR	615813	IfStatement	if ( shouldForceTabIndentation )		615810	0					
ANR	615814	Condition	shouldForceTabIndentation	1250:5:37445:37469	615810	0	True				
ANR	615815	Identifier	shouldForceTabIndentation		615810	0					
ANR	615816	CompoundStatement		3:1:34:34	615810	1					
ANR	615817	IfStatement	if ( tabLength != indentLength )		615810	0					
ANR	615818	Condition	tabLength != indentLength	1252:6:37481:37505	615810	0	True				
ANR	615819	EqualityExpression	tabLength != indentLength		615810	0		!=			
ANR	615820	Identifier	tabLength		615810	0					
ANR	615821	Identifier	indentLength		615810	1					
ANR	615822	CompoundStatement		8:3:156:203	615810	1					
ANR	615823	IdentifierDeclStatement	int indentCountOrig = lineIndentCount ;	1255:3:37553:37590	615810	0	True				
ANR	615824	IdentifierDecl	indentCountOrig = lineIndentCount		615810	0					
ANR	615825	IdentifierDeclType	int		615810	0					
ANR	615826	Identifier	indentCountOrig		615810	1					
ANR	615827	AssignmentExpression	indentCountOrig = lineIndentCount		615810	2		=			
ANR	615828	Identifier	lineIndentCount		615810	0					
ANR	615829	Identifier	lineIndentCount		615810	1					
ANR	615830	IdentifierDeclStatement	int spaceIndentCountOrig = lineSpaceIndentCount ;	1256:3:37595:37642	615810	1	True				
ANR	615831	IdentifierDecl	spaceIndentCountOrig = lineSpaceIndentCount		615810	0					
ANR	615832	IdentifierDeclType	int		615810	0					
ANR	615833	Identifier	spaceIndentCountOrig		615810	1					
ANR	615834	AssignmentExpression	spaceIndentCountOrig = lineSpaceIndentCount		615810	2		=			
ANR	615835	Identifier	lineSpaceIndentCount		615810	0					
ANR	615836	Identifier	lineSpaceIndentCount		615810	1					
ANR	615837	ExpressionStatement	lineIndentCount = ( ( indentCountOrig * indentLength ) + spaceIndentCountOrig ) / tabLength	1257:3:37647:37734	615810	2	True				
ANR	615838	AssignmentExpression	lineIndentCount = ( ( indentCountOrig * indentLength ) + spaceIndentCountOrig ) / tabLength		615810	0		=			
ANR	615839	Identifier	lineIndentCount		615810	0					
ANR	615840	MultiplicativeExpression	( ( indentCountOrig * indentLength ) + spaceIndentCountOrig ) / tabLength		615810	1		/			
ANR	615841	AdditiveExpression	( indentCountOrig * indentLength ) + spaceIndentCountOrig		615810	0		+			
ANR	615842	MultiplicativeExpression	indentCountOrig * indentLength		615810	0		*			
ANR	615843	Identifier	indentCountOrig		615810	0					
ANR	615844	Identifier	indentLength		615810	1					
ANR	615845	Identifier	spaceIndentCountOrig		615810	1					
ANR	615846	Identifier	tabLength		615810	1					
ANR	615847	ExpressionStatement	lineSpaceIndentCount = ( ( indentCountOrig * indentLength ) + spaceIndentCountOrig ) % tabLength	1258:3:37739:37831	615810	3	True				
ANR	615848	AssignmentExpression	lineSpaceIndentCount = ( ( indentCountOrig * indentLength ) + spaceIndentCountOrig ) % tabLength		615810	0		=			
ANR	615849	Identifier	lineSpaceIndentCount		615810	0					
ANR	615850	MultiplicativeExpression	( ( indentCountOrig * indentLength ) + spaceIndentCountOrig ) % tabLength		615810	1		%			
ANR	615851	AdditiveExpression	( indentCountOrig * indentLength ) + spaceIndentCountOrig		615810	0		+			
ANR	615852	MultiplicativeExpression	indentCountOrig * indentLength		615810	0		*			
ANR	615853	Identifier	indentCountOrig		615810	0					
ANR	615854	Identifier	indentLength		615810	1					
ANR	615855	Identifier	spaceIndentCountOrig		615810	1					
ANR	615856	Identifier	tabLength		615810	1					
ANR	615857	ElseStatement	else		615810	0					
ANR	615858	CompoundStatement		13:2:407:407	615810	0					
ANR	615859	ExpressionStatement	lineIndentCount += lineSpaceIndentCount / indentLength	1262:3:37851:37905	615810	0	True				
ANR	615860	AssignmentExpression	lineIndentCount += lineSpaceIndentCount / indentLength		615810	0		+=			
ANR	615861	Identifier	lineIndentCount		615810	0					
ANR	615862	MultiplicativeExpression	lineSpaceIndentCount / indentLength		615810	1		/			
ANR	615863	Identifier	lineSpaceIndentCount		615810	0					
ANR	615864	Identifier	indentLength		615810	1					
ANR	615865	ExpressionStatement	lineSpaceIndentCount = lineSpaceIndentCount % indentLength	1263:3:37910:37968	615810	1	True				
ANR	615866	AssignmentExpression	lineSpaceIndentCount = lineSpaceIndentCount % indentLength		615810	0		=			
ANR	615867	Identifier	lineSpaceIndentCount		615810	0					
ANR	615868	MultiplicativeExpression	lineSpaceIndentCount % indentLength		615810	1		%			
ANR	615869	Identifier	lineSpaceIndentCount		615810	0					
ANR	615870	Identifier	indentLength		615810	1					
ANR	615871	IdentifierDeclStatement	string ws ;	1267:1:37979:37988	615810	1	True				
ANR	615872	IdentifierDecl	ws		615810	0					
ANR	615873	IdentifierDeclType	string		615810	0					
ANR	615874	Identifier	ws		615810	1					
ANR	615875	ForStatement	for ( int i = 0 ; i < lineIndentCount ; i ++ )		615810	2					
ANR	615876	ForInit	int i = 0 ;	1268:6:37996:38005	615810	0	True				
ANR	615877	IdentifierDeclStatement	int i = 0 ;		615810	0					
ANR	615878	IdentifierDecl	i = 0		615810	0					
ANR	615879	IdentifierDeclType	int		615810	0					
ANR	615880	Identifier	i		615810	1					
ANR	615881	AssignmentExpression	i = 0		615810	2		=			
ANR	615882	Identifier	i		615810	0					
ANR	615883	PrimaryExpression	0		615810	1					
ANR	615884	Condition	i < lineIndentCount	1268:17:38007:38025	615810	1	True				
ANR	615885	RelationalExpression	i < lineIndentCount		615810	0		<			
ANR	615886	Identifier	i		615810	0					
ANR	615887	Identifier	lineIndentCount		615810	1					
ANR	615888	PostIncDecOperationExpression	i ++	1268:38:38028:38030	615810	2	True				
ANR	615889	Identifier	i		615810	0					
ANR	615890	IncDec	++		615810	1					
ANR	615891	ExpressionStatement	ws += indentString	1269:2:38035:38053	615810	3	True				
ANR	615892	AssignmentExpression	ws += indentString		615810	0		+=			
ANR	615893	Identifier	ws		615810	0					
ANR	615894	Identifier	indentString		615810	1					
ANR	615895	WhileStatement	while ( ( lineSpaceIndentCount -- ) > 0 )		615810	3					
ANR	615896	Condition	( lineSpaceIndentCount -- ) > 0	1270:8:38063:38090	615810	0	True				
ANR	615897	RelationalExpression	( lineSpaceIndentCount -- ) > 0		615810	0		>			
ANR	615898	PostIncDecOperationExpression	lineSpaceIndentCount --		615810	0					
ANR	615899	Identifier	lineSpaceIndentCount		615810	0					
ANR	615900	IncDec	--		615810	1					
ANR	615901	PrimaryExpression	0		615810	1					
ANR	615902	ExpressionStatement	"ws += string ( "" "" )"	1271:2:38095:38112	615810	1	True				
ANR	615903	AssignmentExpression	"ws += string ( "" "" )"		615810	0		+=			
ANR	615904	Identifier	ws		615810	0					
ANR	615905	CallExpression	"string ( "" "" )"		615810	1					
ANR	615906	Callee	string		615810	0					
ANR	615907	Identifier	string		615810	0					
ANR	615908	ArgumentList	""" """		615810	1					
ANR	615909	Argument	""" """		615810	0					
ANR	615910	PrimaryExpression	""" """		615810	0					
ANR	615911	ReturnStatement	return ws ;	1272:1:38115:38124	615810	4	True				
ANR	615912	Identifier	ws		615810	0					
ANR	615913	ReturnType	string		615810	1					
ANR	615914	Identifier	ASBeautifier :: preLineWS		615810	2					
ANR	615915	ParameterList	"int lineIndentCount , int lineSpaceIndentCount"		615810	3					
ANR	615916	Parameter	int lineIndentCount	1248:31:37385:37403	615810	0	True				
ANR	615917	ParameterType	int		615810	0					
ANR	615918	Identifier	lineIndentCount		615810	1					
ANR	615919	Parameter	int lineSpaceIndentCount	1248:52:37406:37429	615810	1	True				
ANR	615920	ParameterType	int		615810	0					
ANR	615921	Identifier	lineSpaceIndentCount		615810	1					
ANR	615922	CFGEntryNode	ENTRY		615810		True				
ANR	615923	CFGExitNode	EXIT		615810		True				
ANR	615924	Symbol	tabLength		615810						
ANR	615925	Symbol	string		615810						
ANR	615926	Symbol	shouldForceTabIndentation		615810						
ANR	615927	Symbol	lineIndentCount		615810						
ANR	615928	Symbol	i		615810						
ANR	615929	Symbol	indentLength		615810						
ANR	615930	Symbol	indentCountOrig		615810						
ANR	615931	Symbol	spaceIndentCountOrig		615810						
ANR	615932	Symbol	ws		615810						
ANR	615933	Symbol	lineSpaceIndentCount		615810						
ANR	615934	Symbol	indentString		615810						
ANR	615935	Function	ASBeautifier :: registerContinuationIndent	1278:0:38172:40438							
ANR	615936	FunctionDef	"ASBeautifier :: registerContinuationIndent (const string & line , int i , int spaceIndentCount_ , int tabIncrementIn , int minIndent , bool updateParenStack)"		615935	0					
ANR	615937	CompoundStatement		1280:0:38372:40438	615935	0					
ANR	615938	IdentifierDeclStatement	int remainingCharNum = line . length ( ) - i ;	1281:1:38375:38415	615935	0	True				
ANR	615939	IdentifierDecl	remainingCharNum = line . length ( ) - i		615935	0					
ANR	615940	IdentifierDeclType	int		615935	0					
ANR	615941	Identifier	remainingCharNum		615935	1					
ANR	615942	AssignmentExpression	remainingCharNum = line . length ( ) - i		615935	2		=			
ANR	615943	Identifier	remainingCharNum		615935	0					
ANR	615944	AdditiveExpression	line . length ( ) - i		615935	1		-			
ANR	615945	CallExpression	line . length ( )		615935	0					
ANR	615946	Callee	line . length		615935	0					
ANR	615947	MemberAccess	line . length		615935	0					
ANR	615948	Identifier	line		615935	0					
ANR	615949	Identifier	length		615935	1					
ANR	615950	ArgumentList			615935	1					
ANR	615951	Identifier	i		615935	1					
ANR	615952	IdentifierDeclStatement	"int nextNonWSChar = getNextProgramCharDistance ( line , i ) ;"	1282:1:38418:38473	615935	1	True				
ANR	615953	IdentifierDecl	"nextNonWSChar = getNextProgramCharDistance ( line , i )"		615935	0					
ANR	615954	IdentifierDeclType	int		615935	0					
ANR	615955	Identifier	nextNonWSChar		615935	1					
ANR	615956	AssignmentExpression	"nextNonWSChar = getNextProgramCharDistance ( line , i )"		615935	2		=			
ANR	615957	Identifier	nextNonWSChar		615935	0					
ANR	615958	CallExpression	"getNextProgramCharDistance ( line , i )"		615935	1					
ANR	615959	Callee	getNextProgramCharDistance		615935	0					
ANR	615960	Identifier	getNextProgramCharDistance		615935	0					
ANR	615961	ArgumentList	line		615935	1					
ANR	615962	Argument	line		615935	0					
ANR	615963	Identifier	line		615935	0					
ANR	615964	Argument	i		615935	1					
ANR	615965	Identifier	i		615935	0					
ANR	615966	IfStatement	if ( nextNonWSChar == remainingCharNum || shouldIndentAfterParen )		615935	2					
ANR	615967	Condition	nextNonWSChar == remainingCharNum || shouldIndentAfterParen	1286:5:38607:38665	615935	0	True				
ANR	615968	OrExpression	nextNonWSChar == remainingCharNum || shouldIndentAfterParen		615935	0		||			
ANR	615969	EqualityExpression	nextNonWSChar == remainingCharNum		615935	0		==			
ANR	615970	Identifier	nextNonWSChar		615935	0					
ANR	615971	Identifier	remainingCharNum		615935	1					
ANR	615972	Identifier	shouldIndentAfterParen		615935	1					
ANR	615973	CompoundStatement		12:2:436:503	615935	1					
ANR	615974	IdentifierDeclStatement	int previousIndent = spaceIndentCount_ ;	1288:2:38673:38711	615935	0	True				
ANR	615975	IdentifierDecl	previousIndent = spaceIndentCount_		615935	0					
ANR	615976	IdentifierDeclType	int		615935	0					
ANR	615977	Identifier	previousIndent		615935	1					
ANR	615978	AssignmentExpression	previousIndent = spaceIndentCount_		615935	2		=			
ANR	615979	Identifier	spaceIndentCount_		615935	0					
ANR	615980	Identifier	spaceIndentCount_		615935	1					
ANR	615981	IfStatement	if ( ! continuationIndentStack -> empty ( ) )		615935	1					
ANR	615982	Condition	! continuationIndentStack -> empty ( )	1289:6:38719:38751	615935	0	True				
ANR	615983	UnaryOperationExpression	! continuationIndentStack -> empty ( )		615935	0					
ANR	615984	UnaryOperator	!		615935	0					
ANR	615985	CallExpression	continuationIndentStack -> empty ( )		615935	1					
ANR	615986	Callee	continuationIndentStack -> empty		615935	0					
ANR	615987	PtrMemberAccess	continuationIndentStack -> empty		615935	0					
ANR	615988	Identifier	continuationIndentStack		615935	0					
ANR	615989	Identifier	empty		615935	1					
ANR	615990	ArgumentList			615935	1					
ANR	615991	ExpressionStatement	previousIndent = continuationIndentStack -> back ( )	1290:3:38757:38805	615935	1	True				
ANR	615992	AssignmentExpression	previousIndent = continuationIndentStack -> back ( )		615935	0		=			
ANR	615993	Identifier	previousIndent		615935	0					
ANR	615994	CallExpression	continuationIndentStack -> back ( )		615935	1					
ANR	615995	Callee	continuationIndentStack -> back		615935	0					
ANR	615996	PtrMemberAccess	continuationIndentStack -> back		615935	0					
ANR	615997	Identifier	continuationIndentStack		615935	0					
ANR	615998	Identifier	back		615935	1					
ANR	615999	ArgumentList			615935	1					
ANR	616000	IdentifierDeclStatement	int currIndent = continuationIndent * indentLength + previousIndent ;	1291:2:38809:38876	615935	2	True				
ANR	616001	IdentifierDecl	currIndent = continuationIndent * indentLength + previousIndent		615935	0					
ANR	616002	IdentifierDeclType	int		615935	0					
ANR	616003	Identifier	currIndent		615935	1					
ANR	616004	AssignmentExpression	currIndent = continuationIndent * indentLength + previousIndent		615935	2		=			
ANR	616005	Identifier	currIndent		615935	0					
ANR	616006	AdditiveExpression	continuationIndent * indentLength + previousIndent		615935	1		+			
ANR	616007	MultiplicativeExpression	continuationIndent * indentLength		615935	0		*			
ANR	616008	Identifier	continuationIndent		615935	0					
ANR	616009	Identifier	indentLength		615935	1					
ANR	616010	Identifier	previousIndent		615935	1					
ANR	616011	IfStatement	if ( currIndent > maxContinuationIndent && line [ i ] != '{' )		615935	3					
ANR	616012	Condition	currIndent > maxContinuationIndent && line [ i ] != '{'	1292:6:38884:38935	615935	0	True				
ANR	616013	AndExpression	currIndent > maxContinuationIndent && line [ i ] != '{'		615935	0		&&			
ANR	616014	RelationalExpression	currIndent > maxContinuationIndent		615935	0		>			
ANR	616015	Identifier	currIndent		615935	0					
ANR	616016	Identifier	maxContinuationIndent		615935	1					
ANR	616017	EqualityExpression	line [ i ] != '{'		615935	1		!=			
ANR	616018	ArrayIndexing	line [ i ]		615935	0					
ANR	616019	Identifier	line		615935	0					
ANR	616020	Identifier	i		615935	1					
ANR	616021	PrimaryExpression	'{'		615935	1					
ANR	616022	ExpressionStatement	currIndent = indentLength * 2 + spaceIndentCount_	1293:3:38941:38990	615935	1	True				
ANR	616023	AssignmentExpression	currIndent = indentLength * 2 + spaceIndentCount_		615935	0		=			
ANR	616024	Identifier	currIndent		615935	0					
ANR	616025	AdditiveExpression	indentLength * 2 + spaceIndentCount_		615935	1		+			
ANR	616026	MultiplicativeExpression	indentLength * 2		615935	0		*			
ANR	616027	Identifier	indentLength		615935	0					
ANR	616028	PrimaryExpression	2		615935	1					
ANR	616029	Identifier	spaceIndentCount_		615935	1					
ANR	616030	ExpressionStatement	continuationIndentStack -> emplace_back ( currIndent )	1294:2:38994:39043	615935	4	True				
ANR	616031	CallExpression	continuationIndentStack -> emplace_back ( currIndent )		615935	0					
ANR	616032	Callee	continuationIndentStack -> emplace_back		615935	0					
ANR	616033	PtrMemberAccess	continuationIndentStack -> emplace_back		615935	0					
ANR	616034	Identifier	continuationIndentStack		615935	0					
ANR	616035	Identifier	emplace_back		615935	1					
ANR	616036	ArgumentList	currIndent		615935	1					
ANR	616037	Argument	currIndent		615935	0					
ANR	616038	Identifier	currIndent		615935	0					
ANR	616039	IfStatement	if ( updateParenStack )		615935	5					
ANR	616040	Condition	updateParenStack	1295:6:39051:39066	615935	0	True				
ANR	616041	Identifier	updateParenStack		615935	0					
ANR	616042	ExpressionStatement	parenIndentStack -> emplace_back ( previousIndent )	1296:3:39072:39118	615935	1	True				
ANR	616043	CallExpression	parenIndentStack -> emplace_back ( previousIndent )		615935	0					
ANR	616044	Callee	parenIndentStack -> emplace_back		615935	0					
ANR	616045	PtrMemberAccess	parenIndentStack -> emplace_back		615935	0					
ANR	616046	Identifier	parenIndentStack		615935	0					
ANR	616047	Identifier	emplace_back		615935	1					
ANR	616048	ArgumentList	previousIndent		615935	1					
ANR	616049	Argument	previousIndent		615935	0					
ANR	616050	Identifier	previousIndent		615935	0					
ANR	616051	ReturnStatement	return ;	1297:2:39122:39128	615935	6	True				
ANR	616052	IfStatement	if ( updateParenStack )		615935	3					
ANR	616053	Condition	updateParenStack	1300:5:39139:39154	615935	0	True				
ANR	616054	Identifier	updateParenStack		615935	0					
ANR	616055	ExpressionStatement	parenIndentStack -> emplace_back ( i + spaceIndentCount_ - runInIndentContinuation )	1301:2:39159:39238	615935	1	True				
ANR	616056	CallExpression	parenIndentStack -> emplace_back ( i + spaceIndentCount_ - runInIndentContinuation )		615935	0					
ANR	616057	Callee	parenIndentStack -> emplace_back		615935	0					
ANR	616058	PtrMemberAccess	parenIndentStack -> emplace_back		615935	0					
ANR	616059	Identifier	parenIndentStack		615935	0					
ANR	616060	Identifier	emplace_back		615935	1					
ANR	616061	ArgumentList	i + spaceIndentCount_ - runInIndentContinuation		615935	1					
ANR	616062	Argument	i + spaceIndentCount_ - runInIndentContinuation		615935	0					
ANR	616063	AdditiveExpression	i + spaceIndentCount_ - runInIndentContinuation		615935	0		+			
ANR	616064	Identifier	i		615935	0					
ANR	616065	AdditiveExpression	spaceIndentCount_ - runInIndentContinuation		615935	1		-			
ANR	616066	Identifier	spaceIndentCount_		615935	0					
ANR	616067	Identifier	runInIndentContinuation		615935	1					
ANR	616068	IdentifierDeclStatement	int tabIncrement = tabIncrementIn ;	1303:1:39242:39275	615935	4	True				
ANR	616069	IdentifierDecl	tabIncrement = tabIncrementIn		615935	0					
ANR	616070	IdentifierDeclType	int		615935	0					
ANR	616071	Identifier	tabIncrement		615935	1					
ANR	616072	AssignmentExpression	tabIncrement = tabIncrementIn		615935	2		=			
ANR	616073	Identifier	tabIncrementIn		615935	0					
ANR	616074	Identifier	tabIncrementIn		615935	1					
ANR	616075	ForStatement	for ( int j = i + 1 ; j < ( i + nextNonWSChar ) ; j ++ )		615935	5					
ANR	616076	ForInit	int j = i + 1 ;	1306:6:39313:39326	615935	0	True				
ANR	616077	IdentifierDeclStatement	int j = i + 1 ;		615935	0					
ANR	616078	IdentifierDecl	j = i + 1		615935	0					
ANR	616079	IdentifierDeclType	int		615935	0					
ANR	616080	Identifier	j		615935	1					
ANR	616081	AssignmentExpression	j = i + 1		615935	2		=			
ANR	616082	Identifier	j		615935	0					
ANR	616083	AdditiveExpression	i + 1		615935	1		+			
ANR	616084	Identifier	i		615935	0					
ANR	616085	PrimaryExpression	1		615935	1					
ANR	616086	Condition	j < ( i + nextNonWSChar )	1306:21:39328:39350	615935	1	True				
ANR	616087	RelationalExpression	j < ( i + nextNonWSChar )		615935	0		<			
ANR	616088	Identifier	j		615935	0					
ANR	616089	AdditiveExpression	i + nextNonWSChar		615935	1		+			
ANR	616090	Identifier	i		615935	0					
ANR	616091	Identifier	nextNonWSChar		615935	1					
ANR	616092	PostIncDecOperationExpression	j ++	1306:46:39353:39355	615935	2	True				
ANR	616093	Identifier	j		615935	0					
ANR	616094	IncDec	++		615935	1					
ANR	616095	CompoundStatement		28:1:986:986	615935	3					
ANR	616096	IfStatement	if ( line [ j ] == '\\t' )		615935	0					
ANR	616097	Condition	line [ j ] == '\\t'	1308:6:39367:39381	615935	0	True				
ANR	616098	EqualityExpression	line [ j ] == '\\t'		615935	0		==			
ANR	616099	ArrayIndexing	line [ j ]		615935	0					
ANR	616100	Identifier	line		615935	0					
ANR	616101	Identifier	j		615935	1					
ANR	616102	PrimaryExpression	'\\t'		615935	1					
ANR	616103	ExpressionStatement	"tabIncrement += convertTabToSpaces ( j , tabIncrement )"	1309:3:39387:39438	615935	1	True				
ANR	616104	AssignmentExpression	"tabIncrement += convertTabToSpaces ( j , tabIncrement )"		615935	0		+=			
ANR	616105	Identifier	tabIncrement		615935	0					
ANR	616106	CallExpression	"convertTabToSpaces ( j , tabIncrement )"		615935	1					
ANR	616107	Callee	convertTabToSpaces		615935	0					
ANR	616108	Identifier	convertTabToSpaces		615935	0					
ANR	616109	ArgumentList	j		615935	1					
ANR	616110	Argument	j		615935	0					
ANR	616111	Identifier	j		615935	0					
ANR	616112	Argument	tabIncrement		615935	1					
ANR	616113	Identifier	tabIncrement		615935	0					
ANR	616114	IdentifierDeclStatement	int continuationIndentCount = i + nextNonWSChar + spaceIndentCount_ + tabIncrement ;	1312:1:39445:39527	615935	6	True				
ANR	616115	IdentifierDecl	continuationIndentCount = i + nextNonWSChar + spaceIndentCount_ + tabIncrement		615935	0					
ANR	616116	IdentifierDeclType	int		615935	0					
ANR	616117	Identifier	continuationIndentCount		615935	1					
ANR	616118	AssignmentExpression	continuationIndentCount = i + nextNonWSChar + spaceIndentCount_ + tabIncrement		615935	2		=			
ANR	616119	Identifier	continuationIndentCount		615935	0					
ANR	616120	AdditiveExpression	i + nextNonWSChar + spaceIndentCount_ + tabIncrement		615935	1		+			
ANR	616121	Identifier	i		615935	0					
ANR	616122	AdditiveExpression	nextNonWSChar + spaceIndentCount_ + tabIncrement		615935	1		+			
ANR	616123	Identifier	nextNonWSChar		615935	0					
ANR	616124	AdditiveExpression	spaceIndentCount_ + tabIncrement		615935	1		+			
ANR	616125	Identifier	spaceIndentCount_		615935	0					
ANR	616126	Identifier	tabIncrement		615935	1					
ANR	616127	IfStatement	if ( i > 0 && line [ 0 ] == '{' )		615935	7					
ANR	616128	Condition	i > 0 && line [ 0 ] == '{'	1315:5:39566:39588	615935	0	True				
ANR	616129	AndExpression	i > 0 && line [ 0 ] == '{'		615935	0		&&			
ANR	616130	RelationalExpression	i > 0		615935	0		>			
ANR	616131	Identifier	i		615935	0					
ANR	616132	PrimaryExpression	0		615935	1					
ANR	616133	EqualityExpression	line [ 0 ] == '{'		615935	1		==			
ANR	616134	ArrayIndexing	line [ 0 ]		615935	0					
ANR	616135	Identifier	line		615935	0					
ANR	616136	PrimaryExpression	0		615935	1					
ANR	616137	PrimaryExpression	'{'		615935	1					
ANR	616138	ExpressionStatement	continuationIndentCount -= indentLength	1316:2:39593:39632	615935	1	True				
ANR	616139	AssignmentExpression	continuationIndentCount -= indentLength		615935	0		-=			
ANR	616140	Identifier	continuationIndentCount		615935	0					
ANR	616141	Identifier	indentLength		615935	1					
ANR	616142	IfStatement	if ( continuationIndentCount < minIndent )		615935	8					
ANR	616143	Condition	continuationIndentCount < minIndent	1318:5:39640:39674	615935	0	True				
ANR	616144	RelationalExpression	continuationIndentCount < minIndent		615935	0		<			
ANR	616145	Identifier	continuationIndentCount		615935	0					
ANR	616146	Identifier	minIndent		615935	1					
ANR	616147	ExpressionStatement	continuationIndentCount = minIndent + spaceIndentCount_	1319:2:39679:39734	615935	1	True				
ANR	616148	AssignmentExpression	continuationIndentCount = minIndent + spaceIndentCount_		615935	0		=			
ANR	616149	Identifier	continuationIndentCount		615935	0					
ANR	616150	AdditiveExpression	minIndent + spaceIndentCount_		615935	1		+			
ANR	616151	Identifier	minIndent		615935	0					
ANR	616152	Identifier	spaceIndentCount_		615935	1					
ANR	616153	IfStatement	if ( continuationIndentCount > maxContinuationIndent && ! ( prevNonLegalCh == '=' && currentNonLegalCh == '{' ) )		615935	9					
ANR	616154	Condition	continuationIndentCount > maxContinuationIndent && ! ( prevNonLegalCh == '=' && currentNonLegalCh == '{' )	1322:5:39789:39900	615935	0	True				
ANR	616155	AndExpression	continuationIndentCount > maxContinuationIndent && ! ( prevNonLegalCh == '=' && currentNonLegalCh == '{' )		615935	0		&&			
ANR	616156	RelationalExpression	continuationIndentCount > maxContinuationIndent		615935	0		>			
ANR	616157	Identifier	continuationIndentCount		615935	0					
ANR	616158	Identifier	maxContinuationIndent		615935	1					
ANR	616159	UnaryOperationExpression	! ( prevNonLegalCh == '=' && currentNonLegalCh == '{' )		615935	1					
ANR	616160	UnaryOperator	!		615935	0					
ANR	616161	AndExpression	prevNonLegalCh == '=' && currentNonLegalCh == '{'		615935	1		&&			
ANR	616162	EqualityExpression	prevNonLegalCh == '='		615935	0		==			
ANR	616163	Identifier	prevNonLegalCh		615935	0					
ANR	616164	PrimaryExpression	'='		615935	1					
ANR	616165	EqualityExpression	currentNonLegalCh == '{'		615935	1		==			
ANR	616166	Identifier	currentNonLegalCh		615935	0					
ANR	616167	PrimaryExpression	'{'		615935	1					
ANR	616168	ExpressionStatement	continuationIndentCount = indentLength * 2 + spaceIndentCount_	1324:2:39905:39967	615935	1	True				
ANR	616169	AssignmentExpression	continuationIndentCount = indentLength * 2 + spaceIndentCount_		615935	0		=			
ANR	616170	Identifier	continuationIndentCount		615935	0					
ANR	616171	AdditiveExpression	indentLength * 2 + spaceIndentCount_		615935	1		+			
ANR	616172	MultiplicativeExpression	indentLength * 2		615935	0		*			
ANR	616173	Identifier	indentLength		615935	0					
ANR	616174	PrimaryExpression	2		615935	1					
ANR	616175	Identifier	spaceIndentCount_		615935	1					
ANR	616176	IfStatement	if ( ! continuationIndentStack -> empty ( ) && continuationIndentCount < continuationIndentStack -> back ( ) )		615935	10					
ANR	616177	Condition	! continuationIndentStack -> empty ( ) && continuationIndentCount < continuationIndentStack -> back ( )	1326:5:39975:40077	615935	0	True				
ANR	616178	AndExpression	! continuationIndentStack -> empty ( ) && continuationIndentCount < continuationIndentStack -> back ( )		615935	0		&&			
ANR	616179	UnaryOperationExpression	! continuationIndentStack -> empty ( )		615935	0					
ANR	616180	UnaryOperator	!		615935	0					
ANR	616181	CallExpression	continuationIndentStack -> empty ( )		615935	1					
ANR	616182	Callee	continuationIndentStack -> empty		615935	0					
ANR	616183	PtrMemberAccess	continuationIndentStack -> empty		615935	0					
ANR	616184	Identifier	continuationIndentStack		615935	0					
ANR	616185	Identifier	empty		615935	1					
ANR	616186	ArgumentList			615935	1					
ANR	616187	RelationalExpression	continuationIndentCount < continuationIndentStack -> back ( )		615935	1		<			
ANR	616188	Identifier	continuationIndentCount		615935	0					
ANR	616189	CallExpression	continuationIndentStack -> back ( )		615935	1					
ANR	616190	Callee	continuationIndentStack -> back		615935	0					
ANR	616191	PtrMemberAccess	continuationIndentStack -> back		615935	0					
ANR	616192	Identifier	continuationIndentStack		615935	0					
ANR	616193	Identifier	back		615935	1					
ANR	616194	ArgumentList			615935	1					
ANR	616195	ExpressionStatement	continuationIndentCount = continuationIndentStack -> back ( )	1328:2:40082:40139	615935	1	True				
ANR	616196	AssignmentExpression	continuationIndentCount = continuationIndentStack -> back ( )		615935	0		=			
ANR	616197	Identifier	continuationIndentCount		615935	0					
ANR	616198	CallExpression	continuationIndentStack -> back ( )		615935	1					
ANR	616199	Callee	continuationIndentStack -> back		615935	0					
ANR	616200	PtrMemberAccess	continuationIndentStack -> back		615935	0					
ANR	616201	Identifier	continuationIndentStack		615935	0					
ANR	616202	Identifier	back		615935	1					
ANR	616203	ArgumentList			615935	1					
ANR	616204	IfStatement	if ( ( isNonInStatementArray && line [ i ] == '{' ) && ! isInEnum && ! braceBlockStateStack -> empty ( ) && braceBlockStateStack -> back ( ) )		615935	11					
ANR	616205	Condition	( isNonInStatementArray && line [ i ] == '{' ) && ! isInEnum && ! braceBlockStateStack -> empty ( ) && braceBlockStateStack -> back ( )	1331:5:40210:40338	615935	0	True				
ANR	616206	AndExpression	( isNonInStatementArray && line [ i ] == '{' ) && ! isInEnum && ! braceBlockStateStack -> empty ( ) && braceBlockStateStack -> back ( )		615935	0		&&			
ANR	616207	AndExpression	isNonInStatementArray && line [ i ] == '{'		615935	0		&&			
ANR	616208	Identifier	isNonInStatementArray		615935	0					
ANR	616209	EqualityExpression	line [ i ] == '{'		615935	1		==			
ANR	616210	ArrayIndexing	line [ i ]		615935	0					
ANR	616211	Identifier	line		615935	0					
ANR	616212	Identifier	i		615935	1					
ANR	616213	PrimaryExpression	'{'		615935	1					
ANR	616214	AndExpression	! isInEnum && ! braceBlockStateStack -> empty ( ) && braceBlockStateStack -> back ( )		615935	1		&&			
ANR	616215	UnaryOperationExpression	! isInEnum		615935	0					
ANR	616216	UnaryOperator	!		615935	0					
ANR	616217	Identifier	isInEnum		615935	1					
ANR	616218	AndExpression	! braceBlockStateStack -> empty ( ) && braceBlockStateStack -> back ( )		615935	1		&&			
ANR	616219	UnaryOperationExpression	! braceBlockStateStack -> empty ( )		615935	0					
ANR	616220	UnaryOperator	!		615935	0					
ANR	616221	CallExpression	braceBlockStateStack -> empty ( )		615935	1					
ANR	616222	Callee	braceBlockStateStack -> empty		615935	0					
ANR	616223	PtrMemberAccess	braceBlockStateStack -> empty		615935	0					
ANR	616224	Identifier	braceBlockStateStack		615935	0					
ANR	616225	Identifier	empty		615935	1					
ANR	616226	ArgumentList			615935	1					
ANR	616227	CallExpression	braceBlockStateStack -> back ( )		615935	1					
ANR	616228	Callee	braceBlockStateStack -> back		615935	0					
ANR	616229	PtrMemberAccess	braceBlockStateStack -> back		615935	0					
ANR	616230	Identifier	braceBlockStateStack		615935	0					
ANR	616231	Identifier	back		615935	1					
ANR	616232	ArgumentList			615935	1					
ANR	616233	ExpressionStatement	continuationIndentCount = 0	1333:2:40343:40370	615935	1	True				
ANR	616234	AssignmentExpression	continuationIndentCount = 0		615935	0		=			
ANR	616235	Identifier	continuationIndentCount		615935	0					
ANR	616236	PrimaryExpression	0		615935	1					
ANR	616237	ExpressionStatement	continuationIndentStack -> emplace_back ( continuationIndentCount )	1335:1:40374:40436	615935	12	True				
ANR	616238	CallExpression	continuationIndentStack -> emplace_back ( continuationIndentCount )		615935	0					
ANR	616239	Callee	continuationIndentStack -> emplace_back		615935	0					
ANR	616240	PtrMemberAccess	continuationIndentStack -> emplace_back		615935	0					
ANR	616241	Identifier	continuationIndentStack		615935	0					
ANR	616242	Identifier	emplace_back		615935	1					
ANR	616243	ArgumentList	continuationIndentCount		615935	1					
ANR	616244	Argument	continuationIndentCount		615935	0					
ANR	616245	Identifier	continuationIndentCount		615935	0					
ANR	616246	ReturnType	void		615935	1					
ANR	616247	Identifier	ASBeautifier :: registerContinuationIndent		615935	2					
ANR	616248	ParameterList	"const string & line , int i , int spaceIndentCount_ , int tabIncrementIn , int minIndent , bool updateParenStack"		615935	3					
ANR	616249	Parameter	const string & line	1278:46:38218:38235	615935	0	True				
ANR	616250	ParameterType	const string &		615935	0					
ANR	616251	Identifier	line		615935	1					
ANR	616252	Parameter	int i	1278:66:38238:38242	615935	1	True				
ANR	616253	ParameterType	int		615935	0					
ANR	616254	Identifier	i		615935	1					
ANR	616255	Parameter	int spaceIndentCount_	1278:73:38245:38265	615935	2	True				
ANR	616256	ParameterType	int		615935	0					
ANR	616257	Identifier	spaceIndentCount_		615935	1					
ANR	616258	Parameter	int tabIncrementIn	1279:46:38314:38331	615935	3	True				
ANR	616259	ParameterType	int		615935	0					
ANR	616260	Identifier	tabIncrementIn		615935	1					
ANR	616261	Parameter	int minIndent	1279:66:38334:38346	615935	4	True				
ANR	616262	ParameterType	int		615935	0					
ANR	616263	Identifier	minIndent		615935	1					
ANR	616264	Parameter	bool updateParenStack	1279:81:38349:38369	615935	5	True				
ANR	616265	ParameterType	bool		615935	0					
ANR	616266	Identifier	updateParenStack		615935	1					
ANR	616267	CFGEntryNode	ENTRY		615935		True				
ANR	616268	CFGExitNode	EXIT		615935		True				
ANR	616269	Symbol	nextNonWSChar		615935						
ANR	616270	Symbol	line		615935						
ANR	616271	Symbol	tabIncrement		615935						
ANR	616272	Symbol	continuationIndentStack -> back		615935						
ANR	616273	Symbol	* line		615935						
ANR	616274	Symbol	braceBlockStateStack -> back		615935						
ANR	616275	Symbol	previousIndent		615935						
ANR	616276	Symbol	maxContinuationIndent		615935						
ANR	616277	Symbol	getNextProgramCharDistance		615935						
ANR	616278	Symbol	* continuationIndentStack		615935						
ANR	616279	Symbol	isInEnum		615935						
ANR	616280	Symbol	continuationIndentCount		615935						
ANR	616281	Symbol	braceBlockStateStack		615935						
ANR	616282	Symbol	remainingCharNum		615935						
ANR	616283	Symbol	shouldIndentAfterParen		615935						
ANR	616284	Symbol	currentNonLegalCh		615935						
ANR	616285	Symbol	* braceBlockStateStack		615935						
ANR	616286	Symbol	tabIncrementIn		615935						
ANR	616287	Symbol	isNonInStatementArray		615935						
ANR	616288	Symbol	braceBlockStateStack -> empty		615935						
ANR	616289	Symbol	updateParenStack		615935						
ANR	616290	Symbol	minIndent		615935						
ANR	616291	Symbol	i		615935						
ANR	616292	Symbol	indentLength		615935						
ANR	616293	Symbol	j		615935						
ANR	616294	Symbol	parenIndentStack		615935						
ANR	616295	Symbol	spaceIndentCount_		615935						
ANR	616296	Symbol	convertTabToSpaces		615935						
ANR	616297	Symbol	* i		615935						
ANR	616298	Symbol	* j		615935						
ANR	616299	Symbol	currIndent		615935						
ANR	616300	Symbol	continuationIndentStack -> empty		615935						
ANR	616301	Symbol	continuationIndentStack		615935						
ANR	616302	Symbol	continuationIndent		615935						
ANR	616303	Symbol	runInIndentContinuation		615935						
ANR	616304	Symbol	line . length		615935						
ANR	616305	Symbol	prevNonLegalCh		615935						
ANR	616306	Function	ASBeautifier :: registerContinuationIndentColon	1341:0:40530:41148							
ANR	616307	FunctionDef	"ASBeautifier :: registerContinuationIndentColon (const string & line , int i , int tabIncrementIn)"		616306	0					
ANR	616308	CompoundStatement		1342:0:40628:41148	616306	0					
ANR	616309	ExpressionStatement	assert ( line [ i ] == ':' )	1343:1:40631:40653	616306	0	True				
ANR	616310	CallExpression	assert ( line [ i ] == ':' )		616306	0					
ANR	616311	Callee	assert		616306	0					
ANR	616312	Identifier	assert		616306	0					
ANR	616313	ArgumentList	line [ i ] == ':'		616306	1					
ANR	616314	Argument	line [ i ] == ':'		616306	0					
ANR	616315	EqualityExpression	line [ i ] == ':'		616306	0		==			
ANR	616316	ArrayIndexing	line [ i ]		616306	0					
ANR	616317	Identifier	line		616306	0					
ANR	616318	Identifier	i		616306	1					
ANR	616319	PrimaryExpression	':'		616306	1					
ANR	616320	ExpressionStatement	assert ( isInClassInitializer || isInClassHeaderTab )	1344:1:40656:40706	616306	1	True				
ANR	616321	CallExpression	assert ( isInClassInitializer || isInClassHeaderTab )		616306	0					
ANR	616322	Callee	assert		616306	0					
ANR	616323	Identifier	assert		616306	0					
ANR	616324	ArgumentList	isInClassInitializer || isInClassHeaderTab		616306	1					
ANR	616325	Argument	isInClassInitializer || isInClassHeaderTab		616306	0					
ANR	616326	OrExpression	isInClassInitializer || isInClassHeaderTab		616306	0		||			
ANR	616327	Identifier	isInClassInitializer		616306	0					
ANR	616328	Identifier	isInClassHeaderTab		616306	1					
ANR	616329	IdentifierDeclStatement	"size_t firstChar = line . find_first_not_of ( "" \\t"" ) ;"	1347:1:40760:40808	616306	2	True				
ANR	616330	IdentifierDecl	"firstChar = line . find_first_not_of ( "" \\t"" )"		616306	0					
ANR	616331	IdentifierDeclType	size_t		616306	0					
ANR	616332	Identifier	firstChar		616306	1					
ANR	616333	AssignmentExpression	"firstChar = line . find_first_not_of ( "" \\t"" )"		616306	2		=			
ANR	616334	Identifier	firstChar		616306	0					
ANR	616335	CallExpression	"line . find_first_not_of ( "" \\t"" )"		616306	1					
ANR	616336	Callee	line . find_first_not_of		616306	0					
ANR	616337	MemberAccess	line . find_first_not_of		616306	0					
ANR	616338	Identifier	line		616306	0					
ANR	616339	Identifier	find_first_not_of		616306	1					
ANR	616340	ArgumentList	""" \\t"""		616306	1					
ANR	616341	Argument	""" \\t"""		616306	0					
ANR	616342	PrimaryExpression	""" \\t"""		616306	0					
ANR	616343	IfStatement	if ( firstChar == ( size_t ) i )		616306	3					
ANR	616344	Condition	firstChar == ( size_t ) i	1348:5:40815:40837	616306	0	True				
ANR	616345	EqualityExpression	firstChar == ( size_t ) i		616306	0		==			
ANR	616346	Identifier	firstChar		616306	0					
ANR	616347	CastExpression	( size_t ) i		616306	1					
ANR	616348	CastTarget	size_t		616306	0					
ANR	616349	Identifier	i		616306	1					
ANR	616350	CompoundStatement		9:2:237:300	616306	1					
ANR	616351	IdentifierDeclStatement	"size_t firstWord = line . find_first_not_of ( "" \\t"" , firstChar + 1 ) ;"	1350:2:40866:40929	616306	0	True				
ANR	616352	IdentifierDecl	"firstWord = line . find_first_not_of ( "" \\t"" , firstChar + 1 )"		616306	0					
ANR	616353	IdentifierDeclType	size_t		616306	0					
ANR	616354	Identifier	firstWord		616306	1					
ANR	616355	AssignmentExpression	"firstWord = line . find_first_not_of ( "" \\t"" , firstChar + 1 )"		616306	2		=			
ANR	616356	Identifier	firstWord		616306	0					
ANR	616357	CallExpression	"line . find_first_not_of ( "" \\t"" , firstChar + 1 )"		616306	1					
ANR	616358	Callee	line . find_first_not_of		616306	0					
ANR	616359	MemberAccess	line . find_first_not_of		616306	0					
ANR	616360	Identifier	line		616306	0					
ANR	616361	Identifier	find_first_not_of		616306	1					
ANR	616362	ArgumentList	""" \\t"""		616306	1					
ANR	616363	Argument	""" \\t"""		616306	0					
ANR	616364	PrimaryExpression	""" \\t"""		616306	0					
ANR	616365	Argument	firstChar + 1		616306	1					
ANR	616366	AdditiveExpression	firstChar + 1		616306	0		+			
ANR	616367	Identifier	firstChar		616306	0					
ANR	616368	PrimaryExpression	1		616306	1					
ANR	616369	IfStatement	if ( firstChar != string :: npos )		616306	1					
ANR	616370	Condition	firstChar != string :: npos	1351:6:40937:40961	616306	0	True				
ANR	616371	EqualityExpression	firstChar != string :: npos		616306	0		!=			
ANR	616372	Identifier	firstChar		616306	0					
ANR	616373	Identifier	string :: npos		616306	1					
ANR	616374	CompoundStatement		12:3:342:417	616306	1					
ANR	616375	IdentifierDeclStatement	int continuationIndentCount = firstWord + spaceIndentCount + tabIncrementIn ;	1353:3:40971:41046	616306	0	True				
ANR	616376	IdentifierDecl	continuationIndentCount = firstWord + spaceIndentCount + tabIncrementIn		616306	0					
ANR	616377	IdentifierDeclType	int		616306	0					
ANR	616378	Identifier	continuationIndentCount		616306	1					
ANR	616379	AssignmentExpression	continuationIndentCount = firstWord + spaceIndentCount + tabIncrementIn		616306	2		=			
ANR	616380	Identifier	continuationIndentCount		616306	0					
ANR	616381	AdditiveExpression	firstWord + spaceIndentCount + tabIncrementIn		616306	1		+			
ANR	616382	Identifier	firstWord		616306	0					
ANR	616383	AdditiveExpression	spaceIndentCount + tabIncrementIn		616306	1		+			
ANR	616384	Identifier	spaceIndentCount		616306	0					
ANR	616385	Identifier	tabIncrementIn		616306	1					
ANR	616386	ExpressionStatement	continuationIndentStack -> emplace_back ( continuationIndentCount )	1354:3:41051:41113	616306	1	True				
ANR	616387	CallExpression	continuationIndentStack -> emplace_back ( continuationIndentCount )		616306	0					
ANR	616388	Callee	continuationIndentStack -> emplace_back		616306	0					
ANR	616389	PtrMemberAccess	continuationIndentStack -> emplace_back		616306	0					
ANR	616390	Identifier	continuationIndentStack		616306	0					
ANR	616391	Identifier	emplace_back		616306	1					
ANR	616392	ArgumentList	continuationIndentCount		616306	1					
ANR	616393	Argument	continuationIndentCount		616306	0					
ANR	616394	Identifier	continuationIndentCount		616306	0					
ANR	616395	ExpressionStatement	isContinuation = true	1355:3:41118:41139	616306	2	True				
ANR	616396	AssignmentExpression	isContinuation = true		616306	0		=			
ANR	616397	Identifier	isContinuation		616306	0					
ANR	616398	Identifier	true		616306	1					
ANR	616399	ReturnType	void		616306	1					
ANR	616400	Identifier	ASBeautifier :: registerContinuationIndentColon		616306	2					
ANR	616401	ParameterList	"const string & line , int i , int tabIncrementIn"		616306	3					
ANR	616402	Parameter	const string & line	1341:51:40581:40598	616306	0	True				
ANR	616403	ParameterType	const string &		616306	0					
ANR	616404	Identifier	line		616306	1					
ANR	616405	Parameter	int i	1341:71:40601:40605	616306	1	True				
ANR	616406	ParameterType	int		616306	0					
ANR	616407	Identifier	i		616306	1					
ANR	616408	Parameter	int tabIncrementIn	1341:78:40608:40625	616306	2	True				
ANR	616409	ParameterType	int		616306	0					
ANR	616410	Identifier	tabIncrementIn		616306	1					
ANR	616411	CFGEntryNode	ENTRY		616306		True				
ANR	616412	CFGExitNode	EXIT		616306		True				
ANR	616413	Symbol	firstChar		616306						
ANR	616414	Symbol	isInClassHeaderTab		616306						
ANR	616415	Symbol	line		616306						
ANR	616416	Symbol	string :: npos		616306						
ANR	616417	Symbol	isContinuation		616306						
ANR	616418	Symbol	i		616306						
ANR	616419	Symbol	* line		616306						
ANR	616420	Symbol	line . find_first_not_of		616306						
ANR	616421	Symbol	isInClassInitializer		616306						
ANR	616422	Symbol	* i		616306						
ANR	616423	Symbol	firstWord		616306						
ANR	616424	Symbol	spaceIndentCount		616306						
ANR	616425	Symbol	true		616306						
ANR	616426	Symbol	continuationIndentCount		616306						
ANR	616427	Symbol	continuationIndentStack		616306						
ANR	616428	Symbol	tabIncrementIn		616306						
ANR	616429	Function	ASBeautifier :: computePreprocessorIndent	1365:0:41313:41736							
ANR	616430	FunctionDef	ASBeautifier :: computePreprocessorIndent ()		616429	0					
ANR	616431	CompoundStatement		1366:0:41370:41736	616429	0					
ANR	616432	ExpressionStatement	computePreliminaryIndentation ( )	1367:1:41373:41404	616429	0	True				
ANR	616433	CallExpression	computePreliminaryIndentation ( )		616429	0					
ANR	616434	Callee	computePreliminaryIndentation		616429	0					
ANR	616435	Identifier	computePreliminaryIndentation		616429	0					
ANR	616436	ArgumentList			616429	1					
ANR	616437	IdentifierDeclStatement	"pair < int , int > entry ( indentCount , spaceIndentCount ) ;"	1368:1:41407:41458	616429	1	True				
ANR	616438	IdentifierDecl	"entry ( indentCount , spaceIndentCount )"		616429	0					
ANR	616439	IdentifierDeclType	"pair < int , int >"		616429	0					
ANR	616440	Identifier	entry		616429	1					
ANR	616441	Expression	"indentCount , spaceIndentCount"		616429	2					
ANR	616442	Identifier	indentCount		616429	0					
ANR	616443	Identifier	spaceIndentCount		616429	1					
ANR	616444	IfStatement	if ( ! headerStack -> empty ( ) && entry . first > 0 && ( headerStack -> back ( ) == & AS_IF || headerStack -> back ( ) == & AS_ELSE || headerStack -> back ( ) == & AS_FOR || headerStack -> back ( ) == & AS_WHILE ) )		616429	2					
ANR	616445	Condition	! headerStack -> empty ( ) && entry . first > 0 && ( headerStack -> back ( ) == & AS_IF || headerStack -> back ( ) == & AS_ELSE || headerStack -> back ( ) == & AS_FOR || headerStack -> back ( ) == & AS_WHILE )	1369:5:41465:41701	616429	0	True				
ANR	616446	AndExpression	! headerStack -> empty ( ) && entry . first > 0 && ( headerStack -> back ( ) == & AS_IF || headerStack -> back ( ) == & AS_ELSE || headerStack -> back ( ) == & AS_FOR || headerStack -> back ( ) == & AS_WHILE )		616429	0		&&			
ANR	616447	UnaryOperationExpression	! headerStack -> empty ( )		616429	0					
ANR	616448	UnaryOperator	!		616429	0					
ANR	616449	CallExpression	headerStack -> empty ( )		616429	1					
ANR	616450	Callee	headerStack -> empty		616429	0					
ANR	616451	PtrMemberAccess	headerStack -> empty		616429	0					
ANR	616452	Identifier	headerStack		616429	0					
ANR	616453	Identifier	empty		616429	1					
ANR	616454	ArgumentList			616429	1					
ANR	616455	AndExpression	entry . first > 0 && ( headerStack -> back ( ) == & AS_IF || headerStack -> back ( ) == & AS_ELSE || headerStack -> back ( ) == & AS_FOR || headerStack -> back ( ) == & AS_WHILE )		616429	1		&&			
ANR	616456	RelationalExpression	entry . first > 0		616429	0		>			
ANR	616457	MemberAccess	entry . first		616429	0					
ANR	616458	Identifier	entry		616429	0					
ANR	616459	Identifier	first		616429	1					
ANR	616460	PrimaryExpression	0		616429	1					
ANR	616461	OrExpression	headerStack -> back ( ) == & AS_IF || headerStack -> back ( ) == & AS_ELSE || headerStack -> back ( ) == & AS_FOR || headerStack -> back ( ) == & AS_WHILE		616429	1		||			
ANR	616462	EqualityExpression	headerStack -> back ( ) == & AS_IF		616429	0		==			
ANR	616463	CallExpression	headerStack -> back ( )		616429	0					
ANR	616464	Callee	headerStack -> back		616429	0					
ANR	616465	PtrMemberAccess	headerStack -> back		616429	0					
ANR	616466	Identifier	headerStack		616429	0					
ANR	616467	Identifier	back		616429	1					
ANR	616468	ArgumentList			616429	1					
ANR	616469	UnaryOperationExpression	& AS_IF		616429	1					
ANR	616470	UnaryOperator	&		616429	0					
ANR	616471	Identifier	AS_IF		616429	1					
ANR	616472	OrExpression	headerStack -> back ( ) == & AS_ELSE || headerStack -> back ( ) == & AS_FOR || headerStack -> back ( ) == & AS_WHILE		616429	1		||			
ANR	616473	EqualityExpression	headerStack -> back ( ) == & AS_ELSE		616429	0		==			
ANR	616474	CallExpression	headerStack -> back ( )		616429	0					
ANR	616475	Callee	headerStack -> back		616429	0					
ANR	616476	PtrMemberAccess	headerStack -> back		616429	0					
ANR	616477	Identifier	headerStack		616429	0					
ANR	616478	Identifier	back		616429	1					
ANR	616479	ArgumentList			616429	1					
ANR	616480	UnaryOperationExpression	& AS_ELSE		616429	1					
ANR	616481	UnaryOperator	&		616429	0					
ANR	616482	Identifier	AS_ELSE		616429	1					
ANR	616483	OrExpression	headerStack -> back ( ) == & AS_FOR || headerStack -> back ( ) == & AS_WHILE		616429	1		||			
ANR	616484	EqualityExpression	headerStack -> back ( ) == & AS_FOR		616429	0		==			
ANR	616485	CallExpression	headerStack -> back ( )		616429	0					
ANR	616486	Callee	headerStack -> back		616429	0					
ANR	616487	PtrMemberAccess	headerStack -> back		616429	0					
ANR	616488	Identifier	headerStack		616429	0					
ANR	616489	Identifier	back		616429	1					
ANR	616490	ArgumentList			616429	1					
ANR	616491	UnaryOperationExpression	& AS_FOR		616429	1					
ANR	616492	UnaryOperator	&		616429	0					
ANR	616493	Identifier	AS_FOR		616429	1					
ANR	616494	EqualityExpression	headerStack -> back ( ) == & AS_WHILE		616429	1		==			
ANR	616495	CallExpression	headerStack -> back ( )		616429	0					
ANR	616496	Callee	headerStack -> back		616429	0					
ANR	616497	PtrMemberAccess	headerStack -> back		616429	0					
ANR	616498	Identifier	headerStack		616429	0					
ANR	616499	Identifier	back		616429	1					
ANR	616500	ArgumentList			616429	1					
ANR	616501	UnaryOperationExpression	& AS_WHILE		616429	1					
ANR	616502	UnaryOperator	&		616429	0					
ANR	616503	Identifier	AS_WHILE		616429	1					
ANR	616504	ExpressionStatement	-- entry . first	1375:2:41706:41719	616429	1	True				
ANR	616505	UnaryExpression	-- entry . first		616429	0					
ANR	616506	IncDec	--		616429	0					
ANR	616507	MemberAccess	entry . first		616429	1					
ANR	616508	Identifier	entry		616429	0					
ANR	616509	Identifier	first		616429	1					
ANR	616510	ReturnStatement	return entry ;	1376:1:41722:41734	616429	3	True				
ANR	616511	Identifier	entry		616429	0					
ANR	616512	ReturnType	"pair < int , int >"		616429	1					
ANR	616513	Identifier	ASBeautifier :: computePreprocessorIndent		616429	2					
ANR	616514	ParameterList			616429	3					
ANR	616515	CFGEntryNode	ENTRY		616429		True				
ANR	616516	CFGExitNode	EXIT		616429		True				
ANR	616517	Symbol	headerStack		616429						
ANR	616518	Symbol	& AS_WHILE		616429						
ANR	616519	Symbol	entry		616429						
ANR	616520	Symbol	headerStack -> back		616429						
ANR	616521	Symbol	entry . first		616429						
ANR	616522	Symbol	& AS_IF		616429						
ANR	616523	Symbol	& AS_FOR		616429						
ANR	616524	Symbol	* headerStack		616429						
ANR	616525	Symbol	headerStack -> empty		616429						
ANR	616526	Symbol	& AS_ELSE		616429						
ANR	616527	Function	ASBeautifier :: getNextProgramCharDistance	1383:0:41911:42658							
ANR	616528	FunctionDef	"ASBeautifier :: getNextProgramCharDistance (const string & line , int i)"		616527	0					
ANR	616529	CompoundStatement		1384:0:41989:42658	616527	0					
ANR	616530	IdentifierDeclStatement	bool inComment = false ;	1385:1:41992:42014	616527	0	True				
ANR	616531	IdentifierDecl	inComment = false		616527	0					
ANR	616532	IdentifierDeclType	bool		616527	0					
ANR	616533	Identifier	inComment		616527	1					
ANR	616534	AssignmentExpression	inComment = false		616527	2		=			
ANR	616535	Identifier	false		616527	0					
ANR	616536	Identifier	false		616527	1					
ANR	616537	IdentifierDeclStatement	int remainingCharNum = line . length ( ) - i ;	1386:1:42017:42058	616527	1	True				
ANR	616538	IdentifierDecl	remainingCharNum = line . length ( ) - i		616527	0					
ANR	616539	IdentifierDeclType	int		616527	0					
ANR	616540	Identifier	remainingCharNum		616527	1					
ANR	616541	AssignmentExpression	remainingCharNum = line . length ( ) - i		616527	2		=			
ANR	616542	Identifier	remainingCharNum		616527	0					
ANR	616543	AdditiveExpression	line . length ( ) - i		616527	1		-			
ANR	616544	CallExpression	line . length ( )		616527	0					
ANR	616545	Callee	line . length		616527	0					
ANR	616546	MemberAccess	line . length		616527	0					
ANR	616547	Identifier	line		616527	0					
ANR	616548	Identifier	length		616527	1					
ANR	616549	ArgumentList			616527	1					
ANR	616550	Identifier	i		616527	1					
ANR	616551	IdentifierDeclStatement	int charDistance ;	1387:1:42061:42078	616527	2	True				
ANR	616552	IdentifierDecl	charDistance		616527	0					
ANR	616553	IdentifierDeclType	int		616527	0					
ANR	616554	Identifier	charDistance		616527	1					
ANR	616555	IdentifierDeclStatement	char ch ;	1388:1:42081:42088	616527	3	True				
ANR	616556	IdentifierDecl	ch		616527	0					
ANR	616557	IdentifierDeclType	char		616527	0					
ANR	616558	Identifier	ch		616527	1					
ANR	616559	ForStatement	for ( charDistance = 1 ; charDistance < remainingCharNum ; charDistance ++ )		616527	4					
ANR	616560	ForInit	charDistance = 1 ;	1390:6:42097:42113	616527	0	True				
ANR	616561	AssignmentExpression	charDistance = 1		616527	0		=			
ANR	616562	Identifier	charDistance		616527	0					
ANR	616563	PrimaryExpression	1		616527	1					
ANR	616564	Condition	charDistance < remainingCharNum	1390:24:42115:42145	616527	1	True				
ANR	616565	RelationalExpression	charDistance < remainingCharNum		616527	0		<			
ANR	616566	Identifier	charDistance		616527	0					
ANR	616567	Identifier	remainingCharNum		616527	1					
ANR	616568	PostIncDecOperationExpression	charDistance ++	1390:57:42148:42161	616527	2	True				
ANR	616569	Identifier	charDistance		616527	0					
ANR	616570	IncDec	++		616527	1					
ANR	616571	CompoundStatement		8:1:175:175	616527	3					
ANR	616572	ExpressionStatement	ch = line [ i + charDistance ]	1392:2:42169:42196	616527	0	True				
ANR	616573	AssignmentExpression	ch = line [ i + charDistance ]		616527	0		=			
ANR	616574	Identifier	ch		616527	0					
ANR	616575	ArrayIndexing	line [ i + charDistance ]		616527	1					
ANR	616576	Identifier	line		616527	0					
ANR	616577	AdditiveExpression	i + charDistance		616527	1		+			
ANR	616578	Identifier	i		616527	0					
ANR	616579	Identifier	charDistance		616527	1					
ANR	616580	IfStatement	if ( inComment )		616527	1					
ANR	616581	Condition	inComment	1393:6:42204:42212	616527	0	True				
ANR	616582	Identifier	inComment		616527	0					
ANR	616583	CompoundStatement		11:2:227:227	616527	1					
ANR	616584	IfStatement	"if ( line . compare ( i + charDistance , 2 , ""*/"" ) == 0 )"		616527	0					
ANR	616585	Condition	"line . compare ( i + charDistance , 2 , ""*/"" ) == 0"	1395:7:42226:42269	616527	0	True				
ANR	616586	EqualityExpression	"line . compare ( i + charDistance , 2 , ""*/"" ) == 0"		616527	0		==			
ANR	616587	CallExpression	"line . compare ( i + charDistance , 2 , ""*/"" )"		616527	0					
ANR	616588	Callee	line . compare		616527	0					
ANR	616589	MemberAccess	line . compare		616527	0					
ANR	616590	Identifier	line		616527	0					
ANR	616591	Identifier	compare		616527	1					
ANR	616592	ArgumentList	i + charDistance		616527	1					
ANR	616593	Argument	i + charDistance		616527	0					
ANR	616594	AdditiveExpression	i + charDistance		616527	0		+			
ANR	616595	Identifier	i		616527	0					
ANR	616596	Identifier	charDistance		616527	1					
ANR	616597	Argument	2		616527	1					
ANR	616598	PrimaryExpression	2		616527	0					
ANR	616599	Argument	"""*/"""		616527	2					
ANR	616600	PrimaryExpression	"""*/"""		616527	0					
ANR	616601	PrimaryExpression	0		616527	1					
ANR	616602	CompoundStatement		13:3:285:285	616527	1					
ANR	616603	ExpressionStatement	charDistance ++	1397:4:42281:42295	616527	0	True				
ANR	616604	PostIncDecOperationExpression	charDistance ++		616527	0					
ANR	616605	Identifier	charDistance		616527	0					
ANR	616606	IncDec	++		616527	1					
ANR	616607	ExpressionStatement	inComment = false	1398:4:42301:42318	616527	1	True				
ANR	616608	AssignmentExpression	inComment = false		616527	0		=			
ANR	616609	Identifier	inComment		616527	0					
ANR	616610	Identifier	false		616527	1					
ANR	616611	ContinueStatement	continue ;	1400:3:42328:42336	616527	1	True				
ANR	616612	ElseStatement	else		616527	0					
ANR	616613	IfStatement	if ( isWhiteSpace ( ch ) )		616527	0					
ANR	616614	Condition	isWhiteSpace ( ch )	1402:11:42353:42368	616527	0	True				
ANR	616615	CallExpression	isWhiteSpace ( ch )		616527	0					
ANR	616616	Callee	isWhiteSpace		616527	0					
ANR	616617	Identifier	isWhiteSpace		616527	0					
ANR	616618	ArgumentList	ch		616527	1					
ANR	616619	Argument	ch		616527	0					
ANR	616620	Identifier	ch		616527	0					
ANR	616621	ContinueStatement	continue ;	1403:3:42374:42382	616527	1	True				
ANR	616622	ElseStatement	else		616527	0					
ANR	616623	IfStatement	if ( ch == '/' )		616527	0					
ANR	616624	Condition	ch == '/'	1404:11:42395:42403	616527	0	True				
ANR	616625	EqualityExpression	ch == '/'		616527	0		==			
ANR	616626	Identifier	ch		616527	0					
ANR	616627	PrimaryExpression	'/'		616527	1					
ANR	616628	CompoundStatement		22:2:418:418	616527	1					
ANR	616629	IfStatement	"if ( line . compare ( i + charDistance , 2 , ""//"" ) == 0 )"		616527	0					
ANR	616630	Condition	"line . compare ( i + charDistance , 2 , ""//"" ) == 0"	1406:7:42417:42460	616527	0	True				
ANR	616631	EqualityExpression	"line . compare ( i + charDistance , 2 , ""//"" ) == 0"		616527	0		==			
ANR	616632	CallExpression	"line . compare ( i + charDistance , 2 , ""//"" )"		616527	0					
ANR	616633	Callee	line . compare		616527	0					
ANR	616634	MemberAccess	line . compare		616527	0					
ANR	616635	Identifier	line		616527	0					
ANR	616636	Identifier	compare		616527	1					
ANR	616637	ArgumentList	i + charDistance		616527	1					
ANR	616638	Argument	i + charDistance		616527	0					
ANR	616639	AdditiveExpression	i + charDistance		616527	0		+			
ANR	616640	Identifier	i		616527	0					
ANR	616641	Identifier	charDistance		616527	1					
ANR	616642	Argument	2		616527	1					
ANR	616643	PrimaryExpression	2		616527	0					
ANR	616644	Argument	"""//"""		616527	2					
ANR	616645	PrimaryExpression	"""//"""		616527	0					
ANR	616646	PrimaryExpression	0		616527	1					
ANR	616647	ReturnStatement	return remainingCharNum ;	1407:4:42467:42490	616527	1	True				
ANR	616648	Identifier	remainingCharNum		616527	0					
ANR	616649	IfStatement	"if ( line . compare ( i + charDistance , 2 , ""/*"" ) == 0 )"		616527	1					
ANR	616650	Condition	"line . compare ( i + charDistance , 2 , ""/*"" ) == 0"	1408:7:42499:42542	616527	0	True				
ANR	616651	EqualityExpression	"line . compare ( i + charDistance , 2 , ""/*"" ) == 0"		616527	0		==			
ANR	616652	CallExpression	"line . compare ( i + charDistance , 2 , ""/*"" )"		616527	0					
ANR	616653	Callee	line . compare		616527	0					
ANR	616654	MemberAccess	line . compare		616527	0					
ANR	616655	Identifier	line		616527	0					
ANR	616656	Identifier	compare		616527	1					
ANR	616657	ArgumentList	i + charDistance		616527	1					
ANR	616658	Argument	i + charDistance		616527	0					
ANR	616659	AdditiveExpression	i + charDistance		616527	0		+			
ANR	616660	Identifier	i		616527	0					
ANR	616661	Identifier	charDistance		616527	1					
ANR	616662	Argument	2		616527	1					
ANR	616663	PrimaryExpression	2		616527	0					
ANR	616664	Argument	"""/*"""		616527	2					
ANR	616665	PrimaryExpression	"""/*"""		616527	0					
ANR	616666	PrimaryExpression	0		616527	1					
ANR	616667	CompoundStatement		26:3:558:558	616527	1					
ANR	616668	ExpressionStatement	charDistance ++	1410:4:42554:42568	616527	0	True				
ANR	616669	PostIncDecOperationExpression	charDistance ++		616527	0					
ANR	616670	Identifier	charDistance		616527	0					
ANR	616671	IncDec	++		616527	1					
ANR	616672	ExpressionStatement	inComment = true	1411:4:42574:42590	616527	1	True				
ANR	616673	AssignmentExpression	inComment = true		616527	0		=			
ANR	616674	Identifier	inComment		616527	0					
ANR	616675	Identifier	true		616527	1					
ANR	616676	ElseStatement	else		616527	0					
ANR	616677	ReturnStatement	return charDistance ;	1415:3:42611:42630	616527	0	True				
ANR	616678	Identifier	charDistance		616527	0					
ANR	616679	ReturnStatement	return charDistance ;	1418:1:42637:42656	616527	5	True				
ANR	616680	Identifier	charDistance		616527	0					
ANR	616681	ReturnType	int		616527	1					
ANR	616682	Identifier	ASBeautifier :: getNextProgramCharDistance		616527	2					
ANR	616683	ParameterList	"const string & line , int i"		616527	3					
ANR	616684	Parameter	const string & line	1383:45:41956:41973	616527	0	True				
ANR	616685	ParameterType	const string &		616527	0					
ANR	616686	Identifier	line		616527	1					
ANR	616687	Parameter	int i	1383:65:41976:41980	616527	1	True				
ANR	616688	ParameterType	int		616527	0					
ANR	616689	Identifier	i		616527	1					
ANR	616690	CFGEntryNode	ENTRY		616527		True				
ANR	616691	CFGExitNode	EXIT		616527		True				
ANR	616692	Symbol	line . compare		616527						
ANR	616693	Symbol	ch		616527						
ANR	616694	Symbol	line		616527						
ANR	616695	Symbol	false		616527						
ANR	616696	Symbol	i		616527						
ANR	616697	Symbol	inComment		616527						
ANR	616698	Symbol	* line		616527						
ANR	616699	Symbol	isWhiteSpace		616527						
ANR	616700	Symbol	* i		616527						
ANR	616701	Symbol	true		616527						
ANR	616702	Symbol	* charDistance		616527						
ANR	616703	Symbol	remainingCharNum		616527						
ANR	616704	Symbol	line . length		616527						
ANR	616705	Symbol	charDistance		616527						
ANR	616706	Function	ASBeautifier :: indexOf	1428:0:42929:43220							
ANR	616707	FunctionDef	"ASBeautifier :: indexOf (const vector < const string * > & container , const string * element)"		616706	0					
ANR	616708	CompoundStatement		1429:0:43024:43220	616706	0					
ANR	616709	IdentifierDeclStatement	vector < const string * > :: const_iterator where ;	1430:1:43027:43070	616706	0	True				
ANR	616710	IdentifierDecl	where		616706	0					
ANR	616711	IdentifierDeclType	vector < const string * > :: const_iterator		616706	0					
ANR	616712	Identifier	where		616706	1					
ANR	616713	ExpressionStatement	"where = find ( container . begin ( ) , container . end ( ) , element )"	1432:1:43074:43131	616706	1	True				
ANR	616714	AssignmentExpression	"where = find ( container . begin ( ) , container . end ( ) , element )"		616706	0		=			
ANR	616715	Identifier	where		616706	0					
ANR	616716	CallExpression	"find ( container . begin ( ) , container . end ( ) , element )"		616706	1					
ANR	616717	Callee	find		616706	0					
ANR	616718	Identifier	find		616706	0					
ANR	616719	ArgumentList	container . begin ( )		616706	1					
ANR	616720	Argument	container . begin ( )		616706	0					
ANR	616721	CallExpression	container . begin ( )		616706	0					
ANR	616722	Callee	container . begin		616706	0					
ANR	616723	MemberAccess	container . begin		616706	0					
ANR	616724	Identifier	container		616706	0					
ANR	616725	Identifier	begin		616706	1					
ANR	616726	ArgumentList			616706	1					
ANR	616727	Argument	container . end ( )		616706	1					
ANR	616728	CallExpression	container . end ( )		616706	0					
ANR	616729	Callee	container . end		616706	0					
ANR	616730	MemberAccess	container . end		616706	0					
ANR	616731	Identifier	container		616706	0					
ANR	616732	Identifier	end		616706	1					
ANR	616733	ArgumentList			616706	1					
ANR	616734	Argument	element		616706	2					
ANR	616735	Identifier	element		616706	0					
ANR	616736	IfStatement	if ( where == container . end ( ) )		616706	2					
ANR	616737	Condition	where == container . end ( )	1433:5:43138:43161	616706	0	True				
ANR	616738	EqualityExpression	where == container . end ( )		616706	0		==			
ANR	616739	Identifier	where		616706	0					
ANR	616740	CallExpression	container . end ( )		616706	1					
ANR	616741	Callee	container . end		616706	0					
ANR	616742	MemberAccess	container . end		616706	0					
ANR	616743	Identifier	container		616706	0					
ANR	616744	Identifier	end		616706	1					
ANR	616745	ArgumentList			616706	1					
ANR	616746	ReturnStatement	return - 1 ;	1434:2:43166:43175	616706	1	True				
ANR	616747	UnaryOperationExpression	- 1		616706	0					
ANR	616748	UnaryOperator	-		616706	0					
ANR	616749	PrimaryExpression	1		616706	1					
ANR	616750	ReturnStatement	return ( int ) ( where - container . begin ( ) ) ;	1435:1:43178:43218	616706	3	True				
ANR	616751	CastExpression	( int ) ( where - container . begin ( ) )		616706	0					
ANR	616752	CastTarget	int		616706	0					
ANR	616753	AdditiveExpression	where - container . begin ( )		616706	1		-			
ANR	616754	Identifier	where		616706	0					
ANR	616755	CallExpression	container . begin ( )		616706	1					
ANR	616756	Callee	container . begin		616706	0					
ANR	616757	MemberAccess	container . begin		616706	0					
ANR	616758	Identifier	container		616706	0					
ANR	616759	Identifier	begin		616706	1					
ANR	616760	ArgumentList			616706	1					
ANR	616761	ReturnType	int		616706	1					
ANR	616762	Identifier	ASBeautifier :: indexOf		616706	2					
ANR	616763	ParameterList	"const vector < const string * > & container , const string * element"		616706	3					
ANR	616764	Parameter	const vector < const string * > & container	1428:26:42955:42992	616706	0	True				
ANR	616765	ParameterType	const vector < const string * > &		616706	0					
ANR	616766	Identifier	container		616706	1					
ANR	616767	Parameter	const string * element	1428:66:42995:43015	616706	1	True				
ANR	616768	ParameterType	const string *		616706	0					
ANR	616769	Identifier	element		616706	1					
ANR	616770	CFGEntryNode	ENTRY		616706		True				
ANR	616771	CFGExitNode	EXIT		616706		True				
ANR	616772	Symbol	container		616706						
ANR	616773	Symbol	container . end		616706						
ANR	616774	Symbol	find		616706						
ANR	616775	Symbol	where		616706						
ANR	616776	Symbol	container . begin		616706						
ANR	616777	Symbol	element		616706						
ANR	616778	Function	ASBeautifier :: convertTabToSpaces	1444:0:43452:43642							
ANR	616779	FunctionDef	"ASBeautifier :: convertTabToSpaces (int i , int tabIncrementIn)"		616778	0					
ANR	616780	CompoundStatement		1445:0:43522:43642	616778	0					
ANR	616781	IdentifierDeclStatement	int tabToSpacesAdjustment = indentLength - 1 - ( ( tabIncrementIn + i ) % indentLength ) ;	1446:1:43525:43609	616778	0	True				
ANR	616782	IdentifierDecl	tabToSpacesAdjustment = indentLength - 1 - ( ( tabIncrementIn + i ) % indentLength )		616778	0					
ANR	616783	IdentifierDeclType	int		616778	0					
ANR	616784	Identifier	tabToSpacesAdjustment		616778	1					
ANR	616785	AssignmentExpression	tabToSpacesAdjustment = indentLength - 1 - ( ( tabIncrementIn + i ) % indentLength )		616778	2		=			
ANR	616786	Identifier	tabToSpacesAdjustment		616778	0					
ANR	616787	AdditiveExpression	indentLength - 1 - ( ( tabIncrementIn + i ) % indentLength )		616778	1		-			
ANR	616788	Identifier	indentLength		616778	0					
ANR	616789	AdditiveExpression	1 - ( ( tabIncrementIn + i ) % indentLength )		616778	1		-			
ANR	616790	PrimaryExpression	1		616778	0					
ANR	616791	MultiplicativeExpression	( tabIncrementIn + i ) % indentLength		616778	1		%			
ANR	616792	AdditiveExpression	tabIncrementIn + i		616778	0		+			
ANR	616793	Identifier	tabIncrementIn		616778	0					
ANR	616794	Identifier	i		616778	1					
ANR	616795	Identifier	indentLength		616778	1					
ANR	616796	ReturnStatement	return tabToSpacesAdjustment ;	1447:1:43612:43640	616778	1	True				
ANR	616797	Identifier	tabToSpacesAdjustment		616778	0					
ANR	616798	ReturnType	int		616778	1					
ANR	616799	Identifier	ASBeautifier :: convertTabToSpaces		616778	2					
ANR	616800	ParameterList	"int i , int tabIncrementIn"		616778	3					
ANR	616801	Parameter	int i	1444:37:43489:43493	616778	0	True				
ANR	616802	ParameterType	int		616778	0					
ANR	616803	Identifier	i		616778	1					
ANR	616804	Parameter	int tabIncrementIn	1444:44:43496:43513	616778	1	True				
ANR	616805	ParameterType	int		616778	0					
ANR	616806	Identifier	tabIncrementIn		616778	1					
ANR	616807	CFGEntryNode	ENTRY		616778		True				
ANR	616808	CFGExitNode	EXIT		616778		True				
ANR	616809	Symbol	tabToSpacesAdjustment		616778						
ANR	616810	Symbol	i		616778						
ANR	616811	Symbol	indentLength		616778						
ANR	616812	Symbol	tabIncrementIn		616778						
ANR	616813	Function	ASBeautifier :: trim	1456:0:43784:44175							
ANR	616814	FunctionDef	ASBeautifier :: trim (const string & str)		616813	0					
ANR	616815	CompoundStatement		1457:0:43835:44175	616813	0					
ANR	616816	IdentifierDeclStatement	int start = 0 ;	1458:1:43838:43851	616813	0	True				
ANR	616817	IdentifierDecl	start = 0		616813	0					
ANR	616818	IdentifierDeclType	int		616813	0					
ANR	616819	Identifier	start		616813	1					
ANR	616820	AssignmentExpression	start = 0		616813	2		=			
ANR	616821	Identifier	start		616813	0					
ANR	616822	PrimaryExpression	0		616813	1					
ANR	616823	IdentifierDeclStatement	int end = str . length ( ) - 1 ;	1459:1:43854:43880	616813	1	True				
ANR	616824	IdentifierDecl	end = str . length ( ) - 1		616813	0					
ANR	616825	IdentifierDeclType	int		616813	0					
ANR	616826	Identifier	end		616813	1					
ANR	616827	AssignmentExpression	end = str . length ( ) - 1		616813	2		=			
ANR	616828	Identifier	end		616813	0					
ANR	616829	AdditiveExpression	str . length ( ) - 1		616813	1		-			
ANR	616830	CallExpression	str . length ( )		616813	0					
ANR	616831	Callee	str . length		616813	0					
ANR	616832	MemberAccess	str . length		616813	0					
ANR	616833	Identifier	str		616813	0					
ANR	616834	Identifier	length		616813	1					
ANR	616835	ArgumentList			616813	1					
ANR	616836	PrimaryExpression	1		616813	1					
ANR	616837	WhileStatement	while ( start < end && isWhiteSpace ( str [ start ] ) )		616813	2					
ANR	616838	Condition	start < end && isWhiteSpace ( str [ start ] )	1461:8:43891:43929	616813	0	True				
ANR	616839	AndExpression	start < end && isWhiteSpace ( str [ start ] )		616813	0		&&			
ANR	616840	RelationalExpression	start < end		616813	0		<			
ANR	616841	Identifier	start		616813	0					
ANR	616842	Identifier	end		616813	1					
ANR	616843	CallExpression	isWhiteSpace ( str [ start ] )		616813	1					
ANR	616844	Callee	isWhiteSpace		616813	0					
ANR	616845	Identifier	isWhiteSpace		616813	0					
ANR	616846	ArgumentList	str [ start ]		616813	1					
ANR	616847	Argument	str [ start ]		616813	0					
ANR	616848	ArrayIndexing	str [ start ]		616813	0					
ANR	616849	Identifier	str		616813	0					
ANR	616850	Identifier	start		616813	1					
ANR	616851	ExpressionStatement	start ++	1462:2:43934:43941	616813	1	True				
ANR	616852	PostIncDecOperationExpression	start ++		616813	0					
ANR	616853	Identifier	start		616813	0					
ANR	616854	IncDec	++		616813	1					
ANR	616855	WhileStatement	while ( start <= end && isWhiteSpace ( str [ end ] ) )		616813	3					
ANR	616856	Condition	start <= end && isWhiteSpace ( str [ end ] )	1464:8:43952:43989	616813	0	True				
ANR	616857	AndExpression	start <= end && isWhiteSpace ( str [ end ] )		616813	0		&&			
ANR	616858	RelationalExpression	start <= end		616813	0		<=			
ANR	616859	Identifier	start		616813	0					
ANR	616860	Identifier	end		616813	1					
ANR	616861	CallExpression	isWhiteSpace ( str [ end ] )		616813	1					
ANR	616862	Callee	isWhiteSpace		616813	0					
ANR	616863	Identifier	isWhiteSpace		616813	0					
ANR	616864	ArgumentList	str [ end ]		616813	1					
ANR	616865	Argument	str [ end ]		616813	0					
ANR	616866	ArrayIndexing	str [ end ]		616813	0					
ANR	616867	Identifier	str		616813	0					
ANR	616868	Identifier	end		616813	1					
ANR	616869	ExpressionStatement	end --	1465:2:43994:43999	616813	1	True				
ANR	616870	PostIncDecOperationExpression	end --		616813	0					
ANR	616871	Identifier	end		616813	0					
ANR	616872	IncDec	--		616813	1					
ANR	616873	IfStatement	if ( end > - 1 && str [ end ] == '\\\\' )		616813	4					
ANR	616874	Condition	end > - 1 && str [ end ] == '\\\\'	1468:5:44051:44078	616813	0	True				
ANR	616875	AndExpression	end > - 1 && str [ end ] == '\\\\'		616813	0		&&			
ANR	616876	RelationalExpression	end > - 1		616813	0		>			
ANR	616877	Identifier	end		616813	0					
ANR	616878	UnaryOperationExpression	- 1		616813	1					
ANR	616879	UnaryOperator	-		616813	0					
ANR	616880	PrimaryExpression	1		616813	1					
ANR	616881	EqualityExpression	str [ end ] == '\\\\'		616813	1		==			
ANR	616882	ArrayIndexing	str [ end ]		616813	0					
ANR	616883	Identifier	str		616813	0					
ANR	616884	Identifier	end		616813	1					
ANR	616885	PrimaryExpression	'\\\\'		616813	1					
ANR	616886	ExpressionStatement	end = str . length ( ) - 1	1469:2:44083:44105	616813	1	True				
ANR	616887	AssignmentExpression	end = str . length ( ) - 1		616813	0		=			
ANR	616888	Identifier	end		616813	0					
ANR	616889	AdditiveExpression	str . length ( ) - 1		616813	1		-			
ANR	616890	CallExpression	str . length ( )		616813	0					
ANR	616891	Callee	str . length		616813	0					
ANR	616892	MemberAccess	str . length		616813	0					
ANR	616893	Identifier	str		616813	0					
ANR	616894	Identifier	length		616813	1					
ANR	616895	ArgumentList			616813	1					
ANR	616896	PrimaryExpression	1		616813	1					
ANR	616897	IdentifierDeclStatement	"string returnStr ( str , start , end + 1 - start ) ;"	1471:1:44109:44154	616813	5	True				
ANR	616898	IdentifierDecl	"returnStr ( str , start , end + 1 - start )"		616813	0					
ANR	616899	IdentifierDeclType	string		616813	0					
ANR	616900	Identifier	returnStr		616813	1					
ANR	616901	Expression	"str , start , end + 1 - start"		616813	2					
ANR	616902	Identifier	str		616813	0					
ANR	616903	Expression	"start , end + 1 - start"		616813	1					
ANR	616904	Identifier	start		616813	0					
ANR	616905	AdditiveExpression	end + 1 - start		616813	1		+			
ANR	616906	Identifier	end		616813	0					
ANR	616907	AdditiveExpression	1 - start		616813	1		-			
ANR	616908	PrimaryExpression	1		616813	0					
ANR	616909	Identifier	start		616813	1					
ANR	616910	ReturnStatement	return returnStr ;	1472:1:44157:44173	616813	6	True				
ANR	616911	Identifier	returnStr		616813	0					
ANR	616912	ReturnType	string		616813	1					
ANR	616913	Identifier	ASBeautifier :: trim		616813	2					
ANR	616914	ParameterList	const string & str		616813	3					
ANR	616915	Parameter	const string & str	1456:26:43810:43826	616813	0	True				
ANR	616916	ParameterType	const string &		616813	0					
ANR	616917	Identifier	str		616813	1					
ANR	616918	CFGEntryNode	ENTRY		616813		True				
ANR	616919	CFGExitNode	EXIT		616813		True				
ANR	616920	Symbol	str		616813						
ANR	616921	Symbol	returnStr		616813						
ANR	616922	Symbol	* start		616813						
ANR	616923	Symbol	start		616813						
ANR	616924	Symbol	end		616813						
ANR	616925	Symbol	* end		616813						
ANR	616926	Symbol	str . length		616813						
ANR	616927	Symbol	* str		616813						
ANR	616928	Symbol	isWhiteSpace		616813						
ANR	616929	Function	ASBeautifier :: rtrim	1481:0:44322:44569							
ANR	616930	FunctionDef	ASBeautifier :: rtrim (const string & str)		616929	0					
ANR	616931	CompoundStatement		1482:0:44374:44569	616929	0					
ANR	616932	IdentifierDeclStatement	size_t len = str . length ( ) ;	1483:1:44377:44402	616929	0	True				
ANR	616933	IdentifierDecl	len = str . length ( )		616929	0					
ANR	616934	IdentifierDeclType	size_t		616929	0					
ANR	616935	Identifier	len		616929	1					
ANR	616936	AssignmentExpression	len = str . length ( )		616929	2		=			
ANR	616937	Identifier	len		616929	0					
ANR	616938	CallExpression	str . length ( )		616929	1					
ANR	616939	Callee	str . length		616929	0					
ANR	616940	MemberAccess	str . length		616929	0					
ANR	616941	Identifier	str		616929	0					
ANR	616942	Identifier	length		616929	1					
ANR	616943	ArgumentList			616929	1					
ANR	616944	IdentifierDeclStatement	"size_t end = str . find_last_not_of ( "" \\t"" ) ;"	1484:1:44405:44445	616929	1	True				
ANR	616945	IdentifierDecl	"end = str . find_last_not_of ( "" \\t"" )"		616929	0					
ANR	616946	IdentifierDeclType	size_t		616929	0					
ANR	616947	Identifier	end		616929	1					
ANR	616948	AssignmentExpression	"end = str . find_last_not_of ( "" \\t"" )"		616929	2		=			
ANR	616949	Identifier	end		616929	0					
ANR	616950	CallExpression	"str . find_last_not_of ( "" \\t"" )"		616929	1					
ANR	616951	Callee	str . find_last_not_of		616929	0					
ANR	616952	MemberAccess	str . find_last_not_of		616929	0					
ANR	616953	Identifier	str		616929	0					
ANR	616954	Identifier	find_last_not_of		616929	1					
ANR	616955	ArgumentList	""" \\t"""		616929	1					
ANR	616956	Argument	""" \\t"""		616929	0					
ANR	616957	PrimaryExpression	""" \\t"""		616929	0					
ANR	616958	IfStatement	if ( end == string :: npos || end == len - 1 )		616929	2					
ANR	616959	Condition	end == string :: npos || end == len - 1	1485:5:44452:44497	616929	0	True				
ANR	616960	OrExpression	end == string :: npos || end == len - 1		616929	0		||			
ANR	616961	EqualityExpression	end == string :: npos		616929	0		==			
ANR	616962	Identifier	end		616929	0					
ANR	616963	Identifier	string :: npos		616929	1					
ANR	616964	EqualityExpression	end == len - 1		616929	1		==			
ANR	616965	Identifier	end		616929	0					
ANR	616966	AdditiveExpression	len - 1		616929	1		-			
ANR	616967	Identifier	len		616929	0					
ANR	616968	PrimaryExpression	1		616929	1					
ANR	616969	ReturnStatement	return str ;	1487:2:44502:44512	616929	1	True				
ANR	616970	Identifier	str		616929	0					
ANR	616971	IdentifierDeclStatement	"string returnStr ( str , 0 , end + 1 ) ;"	1488:1:44515:44548	616929	3	True				
ANR	616972	IdentifierDecl	"returnStr ( str , 0 , end + 1 )"		616929	0					
ANR	616973	IdentifierDeclType	string		616929	0					
ANR	616974	Identifier	returnStr		616929	1					
ANR	616975	Expression	"str , 0 , end + 1"		616929	2					
ANR	616976	Identifier	str		616929	0					
ANR	616977	Expression	"0 , end + 1"		616929	1					
ANR	616978	PrimaryExpression	0		616929	0					
ANR	616979	AdditiveExpression	end + 1		616929	1		+			
ANR	616980	Identifier	end		616929	0					
ANR	616981	PrimaryExpression	1		616929	1					
ANR	616982	ReturnStatement	return returnStr ;	1489:1:44551:44567	616929	4	True				
ANR	616983	Identifier	returnStr		616929	0					
ANR	616984	ReturnType	string		616929	1					
ANR	616985	Identifier	ASBeautifier :: rtrim		616929	2					
ANR	616986	ParameterList	const string & str		616929	3					
ANR	616987	Parameter	const string & str	1481:27:44349:44365	616929	0	True				
ANR	616988	ParameterType	const string &		616929	0					
ANR	616989	Identifier	str		616929	1					
ANR	616990	CFGEntryNode	ENTRY		616929		True				
ANR	616991	CFGExitNode	EXIT		616929		True				
ANR	616992	Symbol	str		616929						
ANR	616993	Symbol	returnStr		616929						
ANR	616994	Symbol	len		616929						
ANR	616995	Symbol	str . find_last_not_of		616929						
ANR	616996	Symbol	string :: npos		616929						
ANR	616997	Symbol	end		616929						
ANR	616998	Symbol	str . length		616929						
ANR	616999	Function	ASBeautifier :: copyTempStacks	1496:0:44674:45151							
ANR	617000	FunctionDef	ASBeautifier :: copyTempStacks (const ASBeautifier & other)		616999	0					
ANR	617001	CompoundStatement		1497:0:44768:45151	616999	0					
ANR	617002	Statement	vector	1498:1:44771:44776	616999	0	True				
ANR	617003	Statement	<	1498:7:44777:44777	616999	1	True				
ANR	617004	Statement	vector	1498:8:44778:44783	616999	2	True				
ANR	617005	Statement	<	1498:14:44784:44784	616999	3	True				
ANR	617006	Statement	const	1498:15:44785:44789	616999	4	True				
ANR	617007	Statement	string	1498:21:44791:44796	616999	5	True				
ANR	617008	Statement	*	1498:27:44797:44797	616999	6	True				
ANR	617009	Statement	>	1498:28:44798:44798	616999	7	True				
ANR	617010	Statement	*	1498:29:44799:44799	616999	8	True				
ANR	617011	Statement	>	1498:30:44800:44800	616999	9	True				
ANR	617012	Statement	*	1498:31:44801:44801	616999	10	True				
ANR	617013	Statement	tempStacksNew	1498:33:44803:44815	616999	11	True				
ANR	617014	Statement	=	1498:47:44817:44817	616999	12	True				
ANR	617015	Statement	new	1498:49:44819:44821	616999	13	True				
ANR	617016	Statement	vector	1498:53:44823:44828	616999	14	True				
ANR	617017	Statement	<	1498:59:44829:44829	616999	15	True				
ANR	617018	Statement	vector	1498:60:44830:44835	616999	16	True				
ANR	617019	Statement	<	1498:66:44836:44836	616999	17	True				
ANR	617020	Statement	const	1498:67:44837:44841	616999	18	True				
ANR	617021	Statement	string	1498:73:44843:44848	616999	19	True				
ANR	617022	Statement	*	1498:79:44849:44849	616999	20	True				
ANR	617023	Statement	>	1498:80:44850:44850	616999	21	True				
ANR	617024	Statement	*	1498:81:44851:44851	616999	22	True				
ANR	617025	Statement	>	1498:82:44852:44852	616999	23	True				
ANR	617026	ExpressionStatement		1498:83:44853:44853	616999	24	True				
ANR	617027	IdentifierDeclStatement	vector < vector < const string * > * > :: iterator iter ;	1499:1:44856:44901	616999	25	True				
ANR	617028	IdentifierDecl	iter		616999	0					
ANR	617029	IdentifierDeclType	vector < vector < const string * > * > :: iterator		616999	0					
ANR	617030	Identifier	iter		616999	1					
ANR	617031	ForStatement	for ( iter = other . tempStacks -> begin ( ) ; iter != other . tempStacks -> end ( ) ; ++ iter )		616999	26					
ANR	617032	ForInit	iter = other . tempStacks -> begin ( ) ;	1500:6:44909:44941	616999	0	True				
ANR	617033	AssignmentExpression	iter = other . tempStacks -> begin ( )		616999	0		=			
ANR	617034	Identifier	iter		616999	0					
ANR	617035	CallExpression	other . tempStacks -> begin ( )		616999	1					
ANR	617036	Callee	other . tempStacks -> begin		616999	0					
ANR	617037	PtrMemberAccess	other . tempStacks -> begin		616999	0					
ANR	617038	MemberAccess	other . tempStacks		616999	0					
ANR	617039	Identifier	other		616999	0					
ANR	617040	Identifier	tempStacks		616999	1					
ANR	617041	Identifier	begin		616999	1					
ANR	617042	ArgumentList			616999	1					
ANR	617043	Condition	iter != other . tempStacks -> end ( )	1501:9:44952:44982	616999	1	True				
ANR	617044	EqualityExpression	iter != other . tempStacks -> end ( )		616999	0		!=			
ANR	617045	Identifier	iter		616999	0					
ANR	617046	CallExpression	other . tempStacks -> end ( )		616999	1					
ANR	617047	Callee	other . tempStacks -> end		616999	0					
ANR	617048	PtrMemberAccess	other . tempStacks -> end		616999	0					
ANR	617049	MemberAccess	other . tempStacks		616999	0					
ANR	617050	Identifier	other		616999	0					
ANR	617051	Identifier	tempStacks		616999	1					
ANR	617052	Identifier	end		616999	1					
ANR	617053	ArgumentList			616999	1					
ANR	617054	UnaryExpression	++ iter	1502:9:44994:44999	616999	2	True				
ANR	617055	IncDec	++		616999	0					
ANR	617056	Identifier	iter		616999	1					
ANR	617057	CompoundStatement		7:1:234:234	616999	3					
ANR	617058	Statement	vector	1504:2:45007:45012	616999	0	True				
ANR	617059	Statement	<	1504:8:45013:45013	616999	1	True				
ANR	617060	Statement	const	1504:9:45014:45018	616999	2	True				
ANR	617061	Statement	string	1504:15:45020:45025	616999	3	True				
ANR	617062	Statement	*	1504:21:45026:45026	616999	4	True				
ANR	617063	Statement	>	1504:22:45027:45027	616999	5	True				
ANR	617064	Statement	*	1504:23:45028:45028	616999	6	True				
ANR	617065	Statement	newVec	1504:25:45030:45035	616999	7	True				
ANR	617066	Statement	=	1504:32:45037:45037	616999	8	True				
ANR	617067	Statement	new	1504:34:45039:45041	616999	9	True				
ANR	617068	Statement	vector	1504:38:45043:45048	616999	10	True				
ANR	617069	Statement	<	1504:44:45049:45049	616999	11	True				
ANR	617070	Statement	const	1504:45:45050:45054	616999	12	True				
ANR	617071	Statement	string	1504:51:45056:45061	616999	13	True				
ANR	617072	Statement	*	1504:57:45062:45062	616999	14	True				
ANR	617073	Statement	>	1504:58:45063:45063	616999	15	True				
ANR	617074	ExpressionStatement		1504:59:45064:45064	616999	16	True				
ANR	617075	ExpressionStatement	* newVec = * * iter	1505:2:45068:45084	616999	17	True				
ANR	617076	AssignmentExpression	* newVec = * * iter		616999	0		=			
ANR	617077	UnaryOperationExpression	* newVec		616999	0					
ANR	617078	UnaryOperator	*		616999	0					
ANR	617079	Identifier	newVec		616999	1					
ANR	617080	UnaryOperationExpression	* * iter		616999	1					
ANR	617081	UnaryOperator	*		616999	0					
ANR	617082	UnaryOperationExpression	* iter		616999	1					
ANR	617083	UnaryOperator	*		616999	0					
ANR	617084	Identifier	iter		616999	1					
ANR	617085	ExpressionStatement	tempStacksNew -> emplace_back ( newVec )	1506:2:45088:45123	616999	18	True				
ANR	617086	CallExpression	tempStacksNew -> emplace_back ( newVec )		616999	0					
ANR	617087	Callee	tempStacksNew -> emplace_back		616999	0					
ANR	617088	PtrMemberAccess	tempStacksNew -> emplace_back		616999	0					
ANR	617089	Identifier	tempStacksNew		616999	0					
ANR	617090	Identifier	emplace_back		616999	1					
ANR	617091	ArgumentList	newVec		616999	1					
ANR	617092	Argument	newVec		616999	0					
ANR	617093	Identifier	newVec		616999	0					
ANR	617094	ReturnStatement	return tempStacksNew ;	1508:1:45129:45149	616999	27	True				
ANR	617095	Identifier	tempStacksNew		616999	0					
ANR	617096	ReturnType	vector < vector < const string * > * > *		616999	1					
ANR	617097	Identifier	ASBeautifier :: copyTempStacks		616999	2					
ANR	617098	ParameterList	const ASBeautifier & other		616999	3					
ANR	617099	Parameter	const ASBeautifier & other	1496:61:44735:44759	616999	0	True				
ANR	617100	ParameterType	const ASBeautifier &		616999	0					
ANR	617101	Identifier	other		616999	1					
ANR	617102	CFGEntryNode	ENTRY		616999		True				
ANR	617103	CFGExitNode	EXIT		616999		True				
ANR	617104	Symbol	* iter		616999						
ANR	617105	Symbol	other		616999						
ANR	617106	Symbol	other . tempStacks -> end		616999						
ANR	617107	Symbol	other . tempStacks -> begin		616999						
ANR	617108	Symbol	tempStacksNew		616999						
ANR	617109	Symbol	other . tempStacks		616999						
ANR	617110	Symbol	* other . tempStacks		616999						
ANR	617111	Symbol	iter		616999						
ANR	617112	Symbol	* other		616999						
ANR	617113	Symbol	* * iter		616999						
ANR	617114	Symbol	* newVec		616999						
ANR	617115	Symbol	newVec		616999						
ANR	617116	Function	ASBeautifier :: deleteBeautifierVectors	1514:0:45224:45510							
ANR	617117	FunctionDef	ASBeautifier :: deleteBeautifierVectors ()		617116	0					
ANR	617118	CompoundStatement		1515:0:45269:45510	617116	0					
ANR	617119	ExpressionStatement	beautifierFileType = 9	1516:1:45272:45294	617116	0	True				
ANR	617120	AssignmentExpression	beautifierFileType = 9		617116	0		=			
ANR	617121	Identifier	beautifierFileType		617116	0					
ANR	617122	PrimaryExpression	9		617116	1					
ANR	617123	Statement	delete	1517:1:45326:45331	617116	1	True				
ANR	617124	ExpressionStatement	headers	1517:8:45333:45340	617116	2	True				
ANR	617125	Identifier	headers		617116	0					
ANR	617126	Statement	delete	1518:1:45343:45348	617116	3	True				
ANR	617127	ExpressionStatement	nonParenHeaders	1518:8:45350:45365	617116	4	True				
ANR	617128	Identifier	nonParenHeaders		617116	0					
ANR	617129	Statement	delete	1519:1:45368:45373	617116	5	True				
ANR	617130	ExpressionStatement	preBlockStatements	1519:8:45375:45393	617116	6	True				
ANR	617131	Identifier	preBlockStatements		617116	0					
ANR	617132	Statement	delete	1520:1:45396:45401	617116	7	True				
ANR	617133	ExpressionStatement	preCommandHeaders	1520:8:45403:45420	617116	8	True				
ANR	617134	Identifier	preCommandHeaders		617116	0					
ANR	617135	Statement	delete	1521:1:45423:45428	617116	9	True				
ANR	617136	ExpressionStatement	assignmentOperators	1521:8:45430:45449	617116	10	True				
ANR	617137	Identifier	assignmentOperators		617116	0					
ANR	617138	Statement	delete	1522:1:45452:45457	617116	11	True				
ANR	617139	ExpressionStatement	nonAssignmentOperators	1522:8:45459:45481	617116	12	True				
ANR	617140	Identifier	nonAssignmentOperators		617116	0					
ANR	617141	Statement	delete	1523:1:45484:45489	617116	13	True				
ANR	617142	ExpressionStatement	indentableHeaders	1523:8:45491:45508	617116	14	True				
ANR	617143	Identifier	indentableHeaders		617116	0					
ANR	617144	ReturnType	void		617116	1					
ANR	617145	Identifier	ASBeautifier :: deleteBeautifierVectors		617116	2					
ANR	617146	ParameterList			617116	3					
ANR	617147	CFGEntryNode	ENTRY		617116		True				
ANR	617148	CFGExitNode	EXIT		617116		True				
ANR	617149	Symbol	beautifierFileType		617116						
ANR	617150	Function	ASBeautifier :: deleteContainer	1531:0:45616:45788							
ANR	617151	FunctionDef	ASBeautifier :: deleteContainer (T & container)		617150	0					
ANR	617152	CompoundStatement		1533:0:45686:45788	617150	0					
ANR	617153	IfStatement	if ( container != nullptr )		617150	0					
ANR	617154	Condition	container != nullptr	1534:5:45693:45712	617150	0	True				
ANR	617155	EqualityExpression	container != nullptr		617150	0		!=			
ANR	617156	Identifier	container		617150	0					
ANR	617157	Identifier	nullptr		617150	1					
ANR	617158	CompoundStatement		3:1:29:29	617150	1					
ANR	617159	ExpressionStatement	container -> clear ( )	1536:2:45720:45738	617150	0	True				
ANR	617160	CallExpression	container -> clear ( )		617150	0					
ANR	617161	Callee	container -> clear		617150	0					
ANR	617162	PtrMemberAccess	container -> clear		617150	0					
ANR	617163	Identifier	container		617150	0					
ANR	617164	Identifier	clear		617150	1					
ANR	617165	ArgumentList			617150	1					
ANR	617166	Statement	delete	1537:2:45742:45747	617150	1	True				
ANR	617167	ExpressionStatement	container	1537:9:45749:45760	617150	2	True				
ANR	617168	Identifier	container		617150	0					
ANR	617169	ExpressionStatement	container = nullptr	1538:2:45764:45783	617150	3	True				
ANR	617170	AssignmentExpression	container = nullptr		617150	0		=			
ANR	617171	Identifier	container		617150	0					
ANR	617172	Identifier	nullptr		617150	1					
ANR	617173	ReturnType	void		617150	1					
ANR	617174	Identifier	ASBeautifier :: deleteContainer		617150	2					
ANR	617175	ParameterList	T & container		617150	3					
ANR	617176	Parameter	T & container	1532:35:45672:45683	617150	0	True				
ANR	617177	ParameterType	T &		617150	0					
ANR	617178	Identifier	container		617150	1					
ANR	617179	CFGEntryNode	ENTRY		617150		True				
ANR	617180	CFGExitNode	EXIT		617150		True				
ANR	617181	Symbol	container		617150						
ANR	617182	Symbol	nullptr		617150						
ANR	617183	Function	ASBeautifier :: deleteBeautifierContainer	1548:0:46041:46354							
ANR	617184	FunctionDef	ASBeautifier :: deleteBeautifierContainer (vector < ASBeautifier * > * & container)		617183	0					
ANR	617185	CompoundStatement		1549:0:46121:46354	617183	0					
ANR	617186	IfStatement	if ( container != nullptr )		617183	0					
ANR	617187	Condition	container != nullptr	1550:5:46128:46147	617183	0	True				
ANR	617188	EqualityExpression	container != nullptr		617183	0		!=			
ANR	617189	Identifier	container		617183	0					
ANR	617190	Identifier	nullptr		617183	1					
ANR	617191	CompoundStatement		4:2:33:90	617183	1					
ANR	617192	IdentifierDeclStatement	vector < ASBeautifier * > :: iterator iter = container -> begin ( ) ;	1552:2:46155:46212	617183	0	True				
ANR	617193	IdentifierDecl	iter = container -> begin ( )		617183	0					
ANR	617194	IdentifierDeclType	vector < ASBeautifier * > :: iterator		617183	0					
ANR	617195	Identifier	iter		617183	1					
ANR	617196	AssignmentExpression	iter = container -> begin ( )		617183	2		=			
ANR	617197	Identifier	iter		617183	0					
ANR	617198	CallExpression	container -> begin ( )		617183	1					
ANR	617199	Callee	container -> begin		617183	0					
ANR	617200	PtrMemberAccess	container -> begin		617183	0					
ANR	617201	Identifier	container		617183	0					
ANR	617202	Identifier	begin		617183	1					
ANR	617203	ArgumentList			617183	1					
ANR	617204	WhileStatement	while ( iter < container -> end ( ) )		617183	1					
ANR	617205	Condition	iter < container -> end ( )	1553:9:46223:46245	617183	0	True				
ANR	617206	RelationalExpression	iter < container -> end ( )		617183	0		<			
ANR	617207	Identifier	iter		617183	0					
ANR	617208	CallExpression	container -> end ( )		617183	1					
ANR	617209	Callee	container -> end		617183	0					
ANR	617210	PtrMemberAccess	container -> end		617183	0					
ANR	617211	Identifier	container		617183	0					
ANR	617212	Identifier	end		617183	1					
ANR	617213	ArgumentList			617183	1					
ANR	617214	CompoundStatement		6:2:128:128	617183	1					
ANR	617215	Statement	delete	1555:3:46255:46260	617183	0	True				
ANR	617216	ExpressionStatement	* iter	1555:10:46262:46267	617183	1	True				
ANR	617217	UnaryOperationExpression	* iter		617183	0					
ANR	617218	UnaryOperator	*		617183	0					
ANR	617219	Identifier	iter		617183	1					
ANR	617220	ExpressionStatement	++ iter	1556:3:46272:46278	617183	2	True				
ANR	617221	UnaryExpression	++ iter		617183	0					
ANR	617222	IncDec	++		617183	0					
ANR	617223	Identifier	iter		617183	1					
ANR	617224	ExpressionStatement	container -> clear ( )	1558:2:46286:46304	617183	2	True				
ANR	617225	CallExpression	container -> clear ( )		617183	0					
ANR	617226	Callee	container -> clear		617183	0					
ANR	617227	PtrMemberAccess	container -> clear		617183	0					
ANR	617228	Identifier	container		617183	0					
ANR	617229	Identifier	clear		617183	1					
ANR	617230	ArgumentList			617183	1					
ANR	617231	Statement	delete	1559:2:46308:46313	617183	3	True				
ANR	617232	ExpressionStatement	container	1559:9:46315:46326	617183	4	True				
ANR	617233	Identifier	container		617183	0					
ANR	617234	ExpressionStatement	container = nullptr	1560:2:46330:46349	617183	5	True				
ANR	617235	AssignmentExpression	container = nullptr		617183	0		=			
ANR	617236	Identifier	container		617183	0					
ANR	617237	Identifier	nullptr		617183	1					
ANR	617238	ReturnType	void		617183	1					
ANR	617239	Identifier	ASBeautifier :: deleteBeautifierContainer		617183	2					
ANR	617240	ParameterList	vector < ASBeautifier * > * & container		617183	3					
ANR	617241	Parameter	vector < ASBeautifier * > * & container	1548:45:46086:46118	617183	0	True				
ANR	617242	ParameterType	vector < ASBeautifier * > * &		617183	0					
ANR	617243	Identifier	container		617183	1					
ANR	617244	CFGEntryNode	ENTRY		617183		True				
ANR	617245	CFGExitNode	EXIT		617183		True				
ANR	617246	Symbol	container		617183						
ANR	617247	Symbol	container -> begin		617183						
ANR	617248	Symbol	iter		617183						
ANR	617249	Symbol	nullptr		617183						
ANR	617250	Symbol	* container		617183						
ANR	617251	Symbol	container -> end		617183						
ANR	617252	Function	ASBeautifier :: deleteTempStacksContainer	1569:0:46576:46907							
ANR	617253	FunctionDef	ASBeautifier :: deleteTempStacksContainer (vector < vector < const string * > * > * & container)		617252	0					
ANR	617254	CompoundStatement		1570:0:46665:46907	617252	0					
ANR	617255	IfStatement	if ( container != nullptr )		617252	0					
ANR	617256	Condition	container != nullptr	1571:5:46672:46691	617252	0	True				
ANR	617257	EqualityExpression	container != nullptr		617252	0		!=			
ANR	617258	Identifier	container		617252	0					
ANR	617259	Identifier	nullptr		617252	1					
ANR	617260	CompoundStatement		4:2:33:99	617252	1					
ANR	617261	IdentifierDeclStatement	vector < vector < const string * > * > :: iterator iter = container -> begin ( ) ;	1573:2:46699:46765	617252	0	True				
ANR	617262	IdentifierDecl	iter = container -> begin ( )		617252	0					
ANR	617263	IdentifierDeclType	vector < vector < const string * > * > :: iterator		617252	0					
ANR	617264	Identifier	iter		617252	1					
ANR	617265	AssignmentExpression	iter = container -> begin ( )		617252	2		=			
ANR	617266	Identifier	iter		617252	0					
ANR	617267	CallExpression	container -> begin ( )		617252	1					
ANR	617268	Callee	container -> begin		617252	0					
ANR	617269	PtrMemberAccess	container -> begin		617252	0					
ANR	617270	Identifier	container		617252	0					
ANR	617271	Identifier	begin		617252	1					
ANR	617272	ArgumentList			617252	1					
ANR	617273	WhileStatement	while ( iter < container -> end ( ) )		617252	1					
ANR	617274	Condition	iter < container -> end ( )	1574:9:46776:46798	617252	0	True				
ANR	617275	RelationalExpression	iter < container -> end ( )		617252	0		<			
ANR	617276	Identifier	iter		617252	0					
ANR	617277	CallExpression	container -> end ( )		617252	1					
ANR	617278	Callee	container -> end		617252	0					
ANR	617279	PtrMemberAccess	container -> end		617252	0					
ANR	617280	Identifier	container		617252	0					
ANR	617281	Identifier	end		617252	1					
ANR	617282	ArgumentList			617252	1					
ANR	617283	CompoundStatement		6:2:137:137	617252	1					
ANR	617284	Statement	delete	1576:3:46808:46813	617252	0	True				
ANR	617285	ExpressionStatement	* iter	1576:10:46815:46820	617252	1	True				
ANR	617286	UnaryOperationExpression	* iter		617252	0					
ANR	617287	UnaryOperator	*		617252	0					
ANR	617288	Identifier	iter		617252	1					
ANR	617289	ExpressionStatement	++ iter	1577:3:46825:46831	617252	2	True				
ANR	617290	UnaryExpression	++ iter		617252	0					
ANR	617291	IncDec	++		617252	0					
ANR	617292	Identifier	iter		617252	1					
ANR	617293	ExpressionStatement	container -> clear ( )	1579:2:46839:46857	617252	2	True				
ANR	617294	CallExpression	container -> clear ( )		617252	0					
ANR	617295	Callee	container -> clear		617252	0					
ANR	617296	PtrMemberAccess	container -> clear		617252	0					
ANR	617297	Identifier	container		617252	0					
ANR	617298	Identifier	clear		617252	1					
ANR	617299	ArgumentList			617252	1					
ANR	617300	Statement	delete	1580:2:46861:46866	617252	3	True				
ANR	617301	ExpressionStatement	container	1580:9:46868:46879	617252	4	True				
ANR	617302	Identifier	container		617252	0					
ANR	617303	ExpressionStatement	container = nullptr	1581:2:46883:46902	617252	5	True				
ANR	617304	AssignmentExpression	container = nullptr		617252	0		=			
ANR	617305	Identifier	container		617252	0					
ANR	617306	Identifier	nullptr		617252	1					
ANR	617307	ReturnType	void		617252	1					
ANR	617308	Identifier	ASBeautifier :: deleteTempStacksContainer		617252	2					
ANR	617309	ParameterList	vector < vector < const string * > * > * & container		617252	3					
ANR	617310	Parameter	vector < vector < const string * > * > * & container	1569:45:46621:46662	617252	0	True				
ANR	617311	ParameterType	vector < vector < const string * > * > * &		617252	0					
ANR	617312	Identifier	container		617252	1					
ANR	617313	CFGEntryNode	ENTRY		617252		True				
ANR	617314	CFGExitNode	EXIT		617252		True				
ANR	617315	Symbol	container		617252						
ANR	617316	Symbol	container -> begin		617252						
ANR	617317	Symbol	iter		617252						
ANR	617318	Symbol	nullptr		617252						
ANR	617319	Symbol	* container		617252						
ANR	617320	Symbol	container -> end		617252						
ANR	617321	Function	ASBeautifier :: initContainer	1589:0:46996:47269							
ANR	617322	FunctionDef	"ASBeautifier :: initContainer (T & container , T value)"		617321	0					
ANR	617323	CompoundStatement		1591:0:47073:47269	617321	0					
ANR	617324	IfStatement	if ( container != nullptr )		617321	0					
ANR	617325	Condition	container != nullptr	1594:5:47197:47216	617321	0	True				
ANR	617326	EqualityExpression	container != nullptr		617321	0		!=			
ANR	617327	Identifier	container		617321	0					
ANR	617328	Identifier	nullptr		617321	1					
ANR	617329	ExpressionStatement	deleteContainer ( container )	1595:2:47221:47247	617321	1	True				
ANR	617330	CallExpression	deleteContainer ( container )		617321	0					
ANR	617331	Callee	deleteContainer		617321	0					
ANR	617332	Identifier	deleteContainer		617321	0					
ANR	617333	ArgumentList	container		617321	1					
ANR	617334	Argument	container		617321	0					
ANR	617335	Identifier	container		617321	0					
ANR	617336	ExpressionStatement	container = value	1596:1:47250:47267	617321	1	True				
ANR	617337	AssignmentExpression	container = value		617321	0		=			
ANR	617338	Identifier	container		617321	0					
ANR	617339	Identifier	value		617321	1					
ANR	617340	ReturnType	void		617321	1					
ANR	617341	Identifier	ASBeautifier :: initContainer		617321	2					
ANR	617342	ParameterList	"T & container , T value"		617321	3					
ANR	617343	Parameter	T & container	1590:33:47050:47061	617321	0	True				
ANR	617344	ParameterType	T &		617321	0					
ANR	617345	Identifier	container		617321	1					
ANR	617346	Parameter	T value	1590:47:47064:47070	617321	1	True				
ANR	617347	ParameterType	T		617321	0					
ANR	617348	Identifier	value		617321	1					
ANR	617349	CFGEntryNode	ENTRY		617321		True				
ANR	617350	CFGExitNode	EXIT		617321		True				
ANR	617351	Symbol	container		617321						
ANR	617352	Symbol	value		617321						
ANR	617353	Symbol	nullptr		617321						
ANR	617354	Function	ASBeautifier :: initTempStacksContainer	1604:0:47482:47740							
ANR	617355	FunctionDef	"ASBeautifier :: initTempStacksContainer (vector < vector < const string * > * > * & container , vector < vector < const string * > * > * value)"		617354	0					
ANR	617356	CompoundStatement		1606:0:47651:47740	617354	0					
ANR	617357	IfStatement	if ( container != nullptr )		617354	0					
ANR	617358	Condition	container != nullptr	1607:5:47658:47677	617354	0	True				
ANR	617359	EqualityExpression	container != nullptr		617354	0		!=			
ANR	617360	Identifier	container		617354	0					
ANR	617361	Identifier	nullptr		617354	1					
ANR	617362	ExpressionStatement	deleteTempStacksContainer ( container )	1608:2:47682:47718	617354	1	True				
ANR	617363	CallExpression	deleteTempStacksContainer ( container )		617354	0					
ANR	617364	Callee	deleteTempStacksContainer		617354	0					
ANR	617365	Identifier	deleteTempStacksContainer		617354	0					
ANR	617366	ArgumentList	container		617354	1					
ANR	617367	Argument	container		617354	0					
ANR	617368	Identifier	container		617354	0					
ANR	617369	ExpressionStatement	container = value	1609:1:47721:47738	617354	1	True				
ANR	617370	AssignmentExpression	container = value		617354	0		=			
ANR	617371	Identifier	container		617354	0					
ANR	617372	Identifier	value		617354	1					
ANR	617373	ReturnType	void		617354	1					
ANR	617374	Identifier	ASBeautifier :: initTempStacksContainer		617354	2					
ANR	617375	ParameterList	"vector < vector < const string * > * > * & container , vector < vector < const string * > * > * value"		617354	3					
ANR	617376	Parameter	vector < vector < const string * > * > * & container	1604:43:47525:47566	617354	0	True				
ANR	617377	ParameterType	vector < vector < const string * > * > * &		617354	0					
ANR	617378	Identifier	container		617354	1					
ANR	617379	Parameter	vector < vector < const string * > * > * value	1605:43:47612:47648	617354	1	True				
ANR	617380	ParameterType	vector < vector < const string * > * > *		617354	0					
ANR	617381	Identifier	value		617354	1					
ANR	617382	CFGEntryNode	ENTRY		617354		True				
ANR	617383	CFGExitNode	EXIT		617354		True				
ANR	617384	Symbol	container		617354						
ANR	617385	Symbol	value		617354						
ANR	617386	Symbol	nullptr		617354						
ANR	617387	Function	ASBeautifier :: statementEndsWithComma	1619:0:47985:49219							
ANR	617388	FunctionDef	"ASBeautifier :: statementEndsWithComma (const string & line , int index)"		617387	0					
ANR	617389	CompoundStatement		1620:0:48064:49219	617387	0					
ANR	617390	ExpressionStatement	assert ( line [ index ] == '=' )	1621:1:48067:48093	617387	0	True				
ANR	617391	CallExpression	assert ( line [ index ] == '=' )		617387	0					
ANR	617392	Callee	assert		617387	0					
ANR	617393	Identifier	assert		617387	0					
ANR	617394	ArgumentList	line [ index ] == '='		617387	1					
ANR	617395	Argument	line [ index ] == '='		617387	0					
ANR	617396	EqualityExpression	line [ index ] == '='		617387	0		==			
ANR	617397	ArrayIndexing	line [ index ]		617387	0					
ANR	617398	Identifier	line		617387	0					
ANR	617399	Identifier	index		617387	1					
ANR	617400	PrimaryExpression	'='		617387	1					
ANR	617401	IdentifierDeclStatement	bool isInComment_ = false ;	1623:1:48097:48122	617387	1	True				
ANR	617402	IdentifierDecl	isInComment_ = false		617387	0					
ANR	617403	IdentifierDeclType	bool		617387	0					
ANR	617404	Identifier	isInComment_		617387	1					
ANR	617405	AssignmentExpression	isInComment_ = false		617387	2		=			
ANR	617406	Identifier	false		617387	0					
ANR	617407	Identifier	false		617387	1					
ANR	617408	IdentifierDeclStatement	bool isInQuote_ = false ;	1624:1:48125:48148	617387	2	True				
ANR	617409	IdentifierDecl	isInQuote_ = false		617387	0					
ANR	617410	IdentifierDeclType	bool		617387	0					
ANR	617411	Identifier	isInQuote_		617387	1					
ANR	617412	AssignmentExpression	isInQuote_ = false		617387	2		=			
ANR	617413	Identifier	false		617387	0					
ANR	617414	Identifier	false		617387	1					
ANR	617415	IdentifierDeclStatement	int parenCount = 0 ;	1625:1:48151:48169	617387	3	True				
ANR	617416	IdentifierDecl	parenCount = 0		617387	0					
ANR	617417	IdentifierDeclType	int		617387	0					
ANR	617418	Identifier	parenCount		617387	1					
ANR	617419	AssignmentExpression	parenCount = 0		617387	2		=			
ANR	617420	Identifier	parenCount		617387	0					
ANR	617421	PrimaryExpression	0		617387	1					
ANR	617422	IdentifierDeclStatement	size_t lineLength = line . length ( ) ;	1626:1:48172:48205	617387	4	True				
ANR	617423	IdentifierDecl	lineLength = line . length ( )		617387	0					
ANR	617424	IdentifierDeclType	size_t		617387	0					
ANR	617425	Identifier	lineLength		617387	1					
ANR	617426	AssignmentExpression	lineLength = line . length ( )		617387	2		=			
ANR	617427	Identifier	lineLength		617387	0					
ANR	617428	CallExpression	line . length ( )		617387	1					
ANR	617429	Callee	line . length		617387	0					
ANR	617430	MemberAccess	line . length		617387	0					
ANR	617431	Identifier	line		617387	0					
ANR	617432	Identifier	length		617387	1					
ANR	617433	ArgumentList			617387	1					
ANR	617434	IdentifierDeclStatement	size_t i = 0 ;	1627:1:48208:48220	617387	5	True				
ANR	617435	IdentifierDecl	i = 0		617387	0					
ANR	617436	IdentifierDeclType	size_t		617387	0					
ANR	617437	Identifier	i		617387	1					
ANR	617438	AssignmentExpression	i = 0		617387	2		=			
ANR	617439	Identifier	i		617387	0					
ANR	617440	PrimaryExpression	0		617387	1					
ANR	617441	IdentifierDeclStatement	char quoteChar_ = ' ' ;	1628:1:48223:48244	617387	6	True				
ANR	617442	IdentifierDecl	quoteChar_ = ' '		617387	0					
ANR	617443	IdentifierDeclType	char		617387	0					
ANR	617444	Identifier	quoteChar_		617387	1					
ANR	617445	AssignmentExpression	quoteChar_ = ' '		617387	2		=			
ANR	617446	Identifier	quoteChar_		617387	0					
ANR	617447	PrimaryExpression	' '		617387	1					
ANR	617448	ForStatement	for ( i = index + 1 ; i < lineLength ; ++ i )		617387	7					
ANR	617449	ForInit	i = index + 1 ;	1630:6:48253:48266	617387	0	True				
ANR	617450	AssignmentExpression	i = index + 1		617387	0		=			
ANR	617451	Identifier	i		617387	0					
ANR	617452	AdditiveExpression	index + 1		617387	1		+			
ANR	617453	Identifier	index		617387	0					
ANR	617454	PrimaryExpression	1		617387	1					
ANR	617455	Condition	i < lineLength	1630:21:48268:48281	617387	1	True				
ANR	617456	RelationalExpression	i < lineLength		617387	0		<			
ANR	617457	Identifier	i		617387	0					
ANR	617458	Identifier	lineLength		617387	1					
ANR	617459	UnaryExpression	++ i	1630:37:48284:48286	617387	2	True				
ANR	617460	IncDec	++		617387	0					
ANR	617461	Identifier	i		617387	1					
ANR	617462	CompoundStatement		13:2:229:246	617387	3					
ANR	617463	IdentifierDeclStatement	char ch = line [ i ] ;	1632:2:48294:48311	617387	0	True				
ANR	617464	IdentifierDecl	ch = line [ i ]		617387	0					
ANR	617465	IdentifierDeclType	char		617387	0					
ANR	617466	Identifier	ch		617387	1					
ANR	617467	AssignmentExpression	ch = line [ i ]		617387	2		=			
ANR	617468	Identifier	ch		617387	0					
ANR	617469	ArrayIndexing	line [ i ]		617387	1					
ANR	617470	Identifier	line		617387	0					
ANR	617471	Identifier	i		617387	1					
ANR	617472	IfStatement	if ( isInComment_ )		617387	1					
ANR	617473	Condition	isInComment_	1634:6:48320:48331	617387	0	True				
ANR	617474	Identifier	isInComment_		617387	0					
ANR	617475	CompoundStatement		16:2:271:271	617387	1					
ANR	617476	IfStatement	"if ( line . compare ( i , 2 , ""*/"" ) == 0 )"		617387	0					
ANR	617477	Condition	"line . compare ( i , 2 , ""*/"" ) == 0"	1636:7:48345:48373	617387	0	True				
ANR	617478	EqualityExpression	"line . compare ( i , 2 , ""*/"" ) == 0"		617387	0		==			
ANR	617479	CallExpression	"line . compare ( i , 2 , ""*/"" )"		617387	0					
ANR	617480	Callee	line . compare		617387	0					
ANR	617481	MemberAccess	line . compare		617387	0					
ANR	617482	Identifier	line		617387	0					
ANR	617483	Identifier	compare		617387	1					
ANR	617484	ArgumentList	i		617387	1					
ANR	617485	Argument	i		617387	0					
ANR	617486	Identifier	i		617387	0					
ANR	617487	Argument	2		617387	1					
ANR	617488	PrimaryExpression	2		617387	0					
ANR	617489	Argument	"""*/"""		617387	2					
ANR	617490	PrimaryExpression	"""*/"""		617387	0					
ANR	617491	PrimaryExpression	0		617387	1					
ANR	617492	CompoundStatement		18:3:314:314	617387	1					
ANR	617493	ExpressionStatement	isInComment_ = false	1638:4:48385:48405	617387	0	True				
ANR	617494	AssignmentExpression	isInComment_ = false		617387	0		=			
ANR	617495	Identifier	isInComment_		617387	0					
ANR	617496	Identifier	false		617387	1					
ANR	617497	ExpressionStatement	++ i	1639:4:48411:48414	617387	1	True				
ANR	617498	UnaryExpression	++ i		617387	0					
ANR	617499	IncDec	++		617387	0					
ANR	617500	Identifier	i		617387	1					
ANR	617501	ContinueStatement	continue ;	1641:3:48424:48432	617387	1	True				
ANR	617502	IfStatement	if ( ch == '\\\\' )		617387	2					
ANR	617503	Condition	ch == '\\\\'	1644:6:48445:48454	617387	0	True				
ANR	617504	EqualityExpression	ch == '\\\\'		617387	0		==			
ANR	617505	Identifier	ch		617387	0					
ANR	617506	PrimaryExpression	'\\\\'		617387	1					
ANR	617507	CompoundStatement		26:2:394:394	617387	1					
ANR	617508	ExpressionStatement	++ i	1646:3:48464:48467	617387	0	True				
ANR	617509	UnaryExpression	++ i		617387	0					
ANR	617510	IncDec	++		617387	0					
ANR	617511	Identifier	i		617387	1					
ANR	617512	ContinueStatement	continue ;	1647:3:48472:48480	617387	1	True				
ANR	617513	IfStatement	if ( isInQuote_ )		617387	3					
ANR	617514	Condition	isInQuote_	1650:6:48493:48502	617387	0	True				
ANR	617515	Identifier	isInQuote_		617387	0					
ANR	617516	CompoundStatement		32:2:442:442	617387	1					
ANR	617517	IfStatement	if ( ch == quoteChar_ )		617387	0					
ANR	617518	Condition	ch == quoteChar_	1652:7:48516:48531	617387	0	True				
ANR	617519	EqualityExpression	ch == quoteChar_		617387	0		==			
ANR	617520	Identifier	ch		617387	0					
ANR	617521	Identifier	quoteChar_		617387	1					
ANR	617522	ExpressionStatement	isInQuote_ = false	1653:4:48538:48556	617387	1	True				
ANR	617523	AssignmentExpression	isInQuote_ = false		617387	0		=			
ANR	617524	Identifier	isInQuote_		617387	0					
ANR	617525	Identifier	false		617387	1					
ANR	617526	ContinueStatement	continue ;	1654:3:48561:48569	617387	1	True				
ANR	617527	IfStatement	"if ( ch == '""' || ( ch == '\\'' && ! isDigitSeparator ( line , i ) ) )"		617387	4					
ANR	617528	Condition	"ch == '""' || ( ch == '\\'' && ! isDigitSeparator ( line , i ) )"	1657:6:48582:48646	617387	0	True				
ANR	617529	OrExpression	"ch == '""' || ( ch == '\\'' && ! isDigitSeparator ( line , i ) )"		617387	0		||			
ANR	617530	EqualityExpression	"ch == '""'"		617387	0		==			
ANR	617531	Identifier	ch		617387	0					
ANR	617532	PrimaryExpression	"'""'"		617387	1					
ANR	617533	AndExpression	"ch == '\\'' && ! isDigitSeparator ( line , i )"		617387	1		&&			
ANR	617534	EqualityExpression	ch == '\\''		617387	0		==			
ANR	617535	Identifier	ch		617387	0					
ANR	617536	PrimaryExpression	'\\''		617387	1					
ANR	617537	UnaryOperationExpression	"! isDigitSeparator ( line , i )"		617387	1					
ANR	617538	UnaryOperator	!		617387	0					
ANR	617539	CallExpression	"isDigitSeparator ( line , i )"		617387	1					
ANR	617540	Callee	isDigitSeparator		617387	0					
ANR	617541	Identifier	isDigitSeparator		617387	0					
ANR	617542	ArgumentList	line		617387	1					
ANR	617543	Argument	line		617387	0					
ANR	617544	Identifier	line		617387	0					
ANR	617545	Argument	i		617387	1					
ANR	617546	Identifier	i		617387	0					
ANR	617547	CompoundStatement		40:2:586:586	617387	1					
ANR	617548	ExpressionStatement	isInQuote_ = true	1660:3:48656:48673	617387	0	True				
ANR	617549	AssignmentExpression	isInQuote_ = true		617387	0		=			
ANR	617550	Identifier	isInQuote_		617387	0					
ANR	617551	Identifier	true		617387	1					
ANR	617552	ExpressionStatement	quoteChar_ = ch	1661:3:48678:48693	617387	1	True				
ANR	617553	AssignmentExpression	quoteChar_ = ch		617387	0		=			
ANR	617554	Identifier	quoteChar_		617387	0					
ANR	617555	Identifier	ch		617387	1					
ANR	617556	ContinueStatement	continue ;	1662:3:48698:48706	617387	2	True				
ANR	617557	IfStatement	"if ( line . compare ( i , 2 , ""//"" ) == 0 )"		617387	5					
ANR	617558	Condition	"line . compare ( i , 2 , ""//"" ) == 0"	1665:6:48719:48747	617387	0	True				
ANR	617559	EqualityExpression	"line . compare ( i , 2 , ""//"" ) == 0"		617387	0		==			
ANR	617560	CallExpression	"line . compare ( i , 2 , ""//"" )"		617387	0					
ANR	617561	Callee	line . compare		617387	0					
ANR	617562	MemberAccess	line . compare		617387	0					
ANR	617563	Identifier	line		617387	0					
ANR	617564	Identifier	compare		617387	1					
ANR	617565	ArgumentList	i		617387	1					
ANR	617566	Argument	i		617387	0					
ANR	617567	Identifier	i		617387	0					
ANR	617568	Argument	2		617387	1					
ANR	617569	PrimaryExpression	2		617387	0					
ANR	617570	Argument	"""//"""		617387	2					
ANR	617571	PrimaryExpression	"""//"""		617387	0					
ANR	617572	PrimaryExpression	0		617387	1					
ANR	617573	BreakStatement	break ;	1666:3:48753:48758	617387	1	True				
ANR	617574	IfStatement	"if ( line . compare ( i , 2 , ""/*"" ) == 0 )"		617387	6					
ANR	617575	Condition	"line . compare ( i , 2 , ""/*"" ) == 0"	1668:6:48767:48795	617387	0	True				
ANR	617576	EqualityExpression	"line . compare ( i , 2 , ""/*"" ) == 0"		617387	0		==			
ANR	617577	CallExpression	"line . compare ( i , 2 , ""/*"" )"		617387	0					
ANR	617578	Callee	line . compare		617387	0					
ANR	617579	MemberAccess	line . compare		617387	0					
ANR	617580	Identifier	line		617387	0					
ANR	617581	Identifier	compare		617387	1					
ANR	617582	ArgumentList	i		617387	1					
ANR	617583	Argument	i		617387	0					
ANR	617584	Identifier	i		617387	0					
ANR	617585	Argument	2		617387	1					
ANR	617586	PrimaryExpression	2		617387	0					
ANR	617587	Argument	"""/*"""		617387	2					
ANR	617588	PrimaryExpression	"""/*"""		617387	0					
ANR	617589	PrimaryExpression	0		617387	1					
ANR	617590	CompoundStatement		50:2:735:735	617387	1					
ANR	617591	IfStatement	"if ( isLineEndComment ( line , i ) )"		617387	0					
ANR	617592	Condition	"isLineEndComment ( line , i )"	1670:7:48809:48833	617387	0	True				
ANR	617593	CallExpression	"isLineEndComment ( line , i )"		617387	0					
ANR	617594	Callee	isLineEndComment		617387	0					
ANR	617595	Identifier	isLineEndComment		617387	0					
ANR	617596	ArgumentList	line		617387	1					
ANR	617597	Argument	line		617387	0					
ANR	617598	Identifier	line		617387	0					
ANR	617599	Argument	i		617387	1					
ANR	617600	Identifier	i		617387	0					
ANR	617601	BreakStatement	break ;	1671:4:48840:48845	617387	1	True				
ANR	617602	ElseStatement	else		617387	0					
ANR	617603	CompoundStatement		54:3:793:793	617387	0					
ANR	617604	ExpressionStatement	isInComment_ = true	1674:4:48864:48883	617387	0	True				
ANR	617605	AssignmentExpression	isInComment_ = true		617387	0		=			
ANR	617606	Identifier	isInComment_		617387	0					
ANR	617607	Identifier	true		617387	1					
ANR	617608	ExpressionStatement	++ i	1675:4:48889:48892	617387	1	True				
ANR	617609	UnaryExpression	++ i		617387	0					
ANR	617610	IncDec	++		617387	0					
ANR	617611	Identifier	i		617387	1					
ANR	617612	ContinueStatement	continue ;	1676:4:48898:48906	617387	2	True				
ANR	617613	IfStatement	if ( ch == '(' )		617387	7					
ANR	617614	Condition	ch == '('	1680:6:48924:48932	617387	0	True				
ANR	617615	EqualityExpression	ch == '('		617387	0		==			
ANR	617616	Identifier	ch		617387	0					
ANR	617617	PrimaryExpression	'('		617387	1					
ANR	617618	ExpressionStatement	parenCount ++	1681:3:48938:48950	617387	1	True				
ANR	617619	PostIncDecOperationExpression	parenCount ++		617387	0					
ANR	617620	Identifier	parenCount		617387	0					
ANR	617621	IncDec	++		617387	1					
ANR	617622	IfStatement	if ( ch == ')' )		617387	8					
ANR	617623	Condition	ch == ')'	1682:6:48958:48966	617387	0	True				
ANR	617624	EqualityExpression	ch == ')'		617387	0		==			
ANR	617625	Identifier	ch		617387	0					
ANR	617626	PrimaryExpression	')'		617387	1					
ANR	617627	ExpressionStatement	parenCount --	1683:3:48972:48984	617387	1	True				
ANR	617628	PostIncDecOperationExpression	parenCount --		617387	0					
ANR	617629	Identifier	parenCount		617387	0					
ANR	617630	IncDec	--		617387	1					
ANR	617631	IfStatement	if ( isInComment_ || isInQuote_ || parenCount > 0 )		617387	8					
ANR	617632	Condition	isInComment_ || isInQuote_ || parenCount > 0	1685:5:48994:49055	617387	0	True				
ANR	617633	OrExpression	isInComment_ || isInQuote_ || parenCount > 0		617387	0		||			
ANR	617634	Identifier	isInComment_		617387	0					
ANR	617635	OrExpression	isInQuote_ || parenCount > 0		617387	1		||			
ANR	617636	Identifier	isInQuote_		617387	0					
ANR	617637	RelationalExpression	parenCount > 0		617387	1		>			
ANR	617638	Identifier	parenCount		617387	0					
ANR	617639	PrimaryExpression	0		617387	1					
ANR	617640	ReturnStatement	return false ;	1688:2:49060:49072	617387	1	True				
ANR	617641	Identifier	false		617387	0					
ANR	617642	IdentifierDeclStatement	"size_t lastChar = line . find_last_not_of ( "" \\t"" , i - 1 ) ;"	1690:1:49076:49129	617387	9	True				
ANR	617643	IdentifierDecl	"lastChar = line . find_last_not_of ( "" \\t"" , i - 1 )"		617387	0					
ANR	617644	IdentifierDeclType	size_t		617387	0					
ANR	617645	Identifier	lastChar		617387	1					
ANR	617646	AssignmentExpression	"lastChar = line . find_last_not_of ( "" \\t"" , i - 1 )"		617387	2		=			
ANR	617647	Identifier	lastChar		617387	0					
ANR	617648	CallExpression	"line . find_last_not_of ( "" \\t"" , i - 1 )"		617387	1					
ANR	617649	Callee	line . find_last_not_of		617387	0					
ANR	617650	MemberAccess	line . find_last_not_of		617387	0					
ANR	617651	Identifier	line		617387	0					
ANR	617652	Identifier	find_last_not_of		617387	1					
ANR	617653	ArgumentList	""" \\t"""		617387	1					
ANR	617654	Argument	""" \\t"""		617387	0					
ANR	617655	PrimaryExpression	""" \\t"""		617387	0					
ANR	617656	Argument	i - 1		617387	1					
ANR	617657	AdditiveExpression	i - 1		617387	0		-			
ANR	617658	Identifier	i		617387	0					
ANR	617659	PrimaryExpression	1		617387	1					
ANR	617660	IfStatement	"if ( lastChar == string :: npos || line [ lastChar ] != ',' )"		617387	10					
ANR	617661	Condition	"lastChar == string :: npos || line [ lastChar ] != ','"	1692:5:49137:49185	617387	0	True				
ANR	617662	OrExpression	"lastChar == string :: npos || line [ lastChar ] != ','"		617387	0		||			
ANR	617663	EqualityExpression	lastChar == string :: npos		617387	0		==			
ANR	617664	Identifier	lastChar		617387	0					
ANR	617665	Identifier	string :: npos		617387	1					
ANR	617666	EqualityExpression	"line [ lastChar ] != ','"		617387	1		!=			
ANR	617667	ArrayIndexing	line [ lastChar ]		617387	0					
ANR	617668	Identifier	line		617387	0					
ANR	617669	Identifier	lastChar		617387	1					
ANR	617670	PrimaryExpression	"','"		617387	1					
ANR	617671	ReturnStatement	return false ;	1693:2:49190:49202	617387	1	True				
ANR	617672	Identifier	false		617387	0					
ANR	617673	ReturnStatement	return true ;	1695:1:49206:49217	617387	11	True				
ANR	617674	Identifier	true		617387	0					
ANR	617675	ReturnType	bool		617387	1					
ANR	617676	Identifier	ASBeautifier :: statementEndsWithComma		617387	2					
ANR	617677	ParameterList	"const string & line , int index"		617387	3					
ANR	617678	Parameter	const string & line	1619:42:48027:48044	617387	0	True				
ANR	617679	ParameterType	const string &		617387	0					
ANR	617680	Identifier	line		617387	1					
ANR	617681	Parameter	int index	1619:62:48047:48055	617387	1	True				
ANR	617682	ParameterType	int		617387	0					
ANR	617683	Identifier	index		617387	1					
ANR	617684	CFGEntryNode	ENTRY		617387		True				
ANR	617685	CFGExitNode	EXIT		617387		True				
ANR	617686	Symbol	parenCount		617387						
ANR	617687	Symbol	line . compare		617387						
ANR	617688	Symbol	ch		617387						
ANR	617689	Symbol	line		617387						
ANR	617690	Symbol	* index		617387						
ANR	617691	Symbol	false		617387						
ANR	617692	Symbol	string :: npos		617387						
ANR	617693	Symbol	index		617387						
ANR	617694	Symbol	i		617387						
ANR	617695	Symbol	* line		617387						
ANR	617696	Symbol	isInComment_		617387						
ANR	617697	Symbol	isInQuote_		617387						
ANR	617698	Symbol	quoteChar_		617387						
ANR	617699	Symbol	lineLength		617387						
ANR	617700	Symbol	line . find_last_not_of		617387						
ANR	617701	Symbol	* i		617387						
ANR	617702	Symbol	isLineEndComment		617387						
ANR	617703	Symbol	isDigitSeparator		617387						
ANR	617704	Symbol	lastChar		617387						
ANR	617705	Symbol	* lastChar		617387						
ANR	617706	Symbol	true		617387						
ANR	617707	Symbol	line . length		617387						
ANR	617708	Function	ASBeautifier :: isLineEndComment	1703:0:49328:49725							
ANR	617709	FunctionDef	"ASBeautifier :: isLineEndComment (const string & line , int startPos)"		617708	0					
ANR	617710	CompoundStatement		1704:0:49404:49725	617708	0					
ANR	617711	ExpressionStatement	"assert ( line . compare ( startPos , 2 , ""/*"" ) == 0 )"	1705:1:49407:49451	617708	0	True				
ANR	617712	CallExpression	"assert ( line . compare ( startPos , 2 , ""/*"" ) == 0 )"		617708	0					
ANR	617713	Callee	assert		617708	0					
ANR	617714	Identifier	assert		617708	0					
ANR	617715	ArgumentList	"line . compare ( startPos , 2 , ""/*"" ) == 0"		617708	1					
ANR	617716	Argument	"line . compare ( startPos , 2 , ""/*"" ) == 0"		617708	0					
ANR	617717	EqualityExpression	"line . compare ( startPos , 2 , ""/*"" ) == 0"		617708	0		==			
ANR	617718	CallExpression	"line . compare ( startPos , 2 , ""/*"" )"		617708	0					
ANR	617719	Callee	line . compare		617708	0					
ANR	617720	MemberAccess	line . compare		617708	0					
ANR	617721	Identifier	line		617708	0					
ANR	617722	Identifier	compare		617708	1					
ANR	617723	ArgumentList	startPos		617708	1					
ANR	617724	Argument	startPos		617708	0					
ANR	617725	Identifier	startPos		617708	0					
ANR	617726	Argument	2		617708	1					
ANR	617727	PrimaryExpression	2		617708	0					
ANR	617728	Argument	"""/*"""		617708	2					
ANR	617729	PrimaryExpression	"""/*"""		617708	0					
ANR	617730	PrimaryExpression	0		617708	1					
ANR	617731	IdentifierDeclStatement	"size_t endNum = line . find ( ""*/"" , startPos + 2 ) ;"	1708:1:49517:49562	617708	1	True				
ANR	617732	IdentifierDecl	"endNum = line . find ( ""*/"" , startPos + 2 )"		617708	0					
ANR	617733	IdentifierDeclType	size_t		617708	0					
ANR	617734	Identifier	endNum		617708	1					
ANR	617735	AssignmentExpression	"endNum = line . find ( ""*/"" , startPos + 2 )"		617708	2		=			
ANR	617736	Identifier	endNum		617708	0					
ANR	617737	CallExpression	"line . find ( ""*/"" , startPos + 2 )"		617708	1					
ANR	617738	Callee	line . find		617708	0					
ANR	617739	MemberAccess	line . find		617708	0					
ANR	617740	Identifier	line		617708	0					
ANR	617741	Identifier	find		617708	1					
ANR	617742	ArgumentList	"""*/"""		617708	1					
ANR	617743	Argument	"""*/"""		617708	0					
ANR	617744	PrimaryExpression	"""*/"""		617708	0					
ANR	617745	Argument	startPos + 2		617708	1					
ANR	617746	AdditiveExpression	startPos + 2		617708	0		+			
ANR	617747	Identifier	startPos		617708	0					
ANR	617748	PrimaryExpression	2		617708	1					
ANR	617749	IfStatement	if ( endNum != string :: npos )		617708	2					
ANR	617750	Condition	endNum != string :: npos	1709:5:49569:49590	617708	0	True				
ANR	617751	EqualityExpression	endNum != string :: npos		617708	0		!=			
ANR	617752	Identifier	endNum		617708	0					
ANR	617753	Identifier	string :: npos		617708	1					
ANR	617754	CompoundStatement		8:2:193:252	617708	1					
ANR	617755	IdentifierDeclStatement	"size_t nextChar = line . find_first_not_of ( "" \\t"" , endNum + 2 ) ;"	1711:2:49598:49657	617708	0	True				
ANR	617756	IdentifierDecl	"nextChar = line . find_first_not_of ( "" \\t"" , endNum + 2 )"		617708	0					
ANR	617757	IdentifierDeclType	size_t		617708	0					
ANR	617758	Identifier	nextChar		617708	1					
ANR	617759	AssignmentExpression	"nextChar = line . find_first_not_of ( "" \\t"" , endNum + 2 )"		617708	2		=			
ANR	617760	Identifier	nextChar		617708	0					
ANR	617761	CallExpression	"line . find_first_not_of ( "" \\t"" , endNum + 2 )"		617708	1					
ANR	617762	Callee	line . find_first_not_of		617708	0					
ANR	617763	MemberAccess	line . find_first_not_of		617708	0					
ANR	617764	Identifier	line		617708	0					
ANR	617765	Identifier	find_first_not_of		617708	1					
ANR	617766	ArgumentList	""" \\t"""		617708	1					
ANR	617767	Argument	""" \\t"""		617708	0					
ANR	617768	PrimaryExpression	""" \\t"""		617708	0					
ANR	617769	Argument	endNum + 2		617708	1					
ANR	617770	AdditiveExpression	endNum + 2		617708	0		+			
ANR	617771	Identifier	endNum		617708	0					
ANR	617772	PrimaryExpression	2		617708	1					
ANR	617773	IfStatement	if ( nextChar == string :: npos )		617708	1					
ANR	617774	Condition	nextChar == string :: npos	1712:6:49665:49688	617708	0	True				
ANR	617775	EqualityExpression	nextChar == string :: npos		617708	0		==			
ANR	617776	Identifier	nextChar		617708	0					
ANR	617777	Identifier	string :: npos		617708	1					
ANR	617778	ReturnStatement	return true ;	1713:3:49694:49705	617708	1	True				
ANR	617779	Identifier	true		617708	0					
ANR	617780	ReturnStatement	return false ;	1715:1:49711:49723	617708	3	True				
ANR	617781	Identifier	false		617708	0					
ANR	617782	ReturnType	bool		617708	1					
ANR	617783	Identifier	ASBeautifier :: isLineEndComment		617708	2					
ANR	617784	ParameterList	"const string & line , int startPos"		617708	3					
ANR	617785	Parameter	const string & line	1703:36:49364:49381	617708	0	True				
ANR	617786	ParameterType	const string &		617708	0					
ANR	617787	Identifier	line		617708	1					
ANR	617788	Parameter	int startPos	1703:56:49384:49395	617708	1	True				
ANR	617789	ParameterType	int		617708	0					
ANR	617790	Identifier	startPos		617708	1					
ANR	617791	CFGEntryNode	ENTRY		617708		True				
ANR	617792	CFGExitNode	EXIT		617708		True				
ANR	617793	Symbol	line . compare		617708						
ANR	617794	Symbol	line . find		617708						
ANR	617795	Symbol	line		617708						
ANR	617796	Symbol	nextChar		617708						
ANR	617797	Symbol	string :: npos		617708						
ANR	617798	Symbol	true		617708						
ANR	617799	Symbol	false		617708						
ANR	617800	Symbol	endNum		617708						
ANR	617801	Symbol	line . find_first_not_of		617708						
ANR	617802	Symbol	startPos		617708						
ANR	617803	Function	ASBeautifier :: getContinuationIndentAssign	1723:0:49869:50388							
ANR	617804	FunctionDef	"ASBeautifier :: getContinuationIndentAssign (const string & line , size_t currPos)"		617803	0					
ANR	617805	CompoundStatement		1724:0:49957:50388	617803	0					
ANR	617806	ExpressionStatement	assert ( line [ currPos ] == '=' )	1725:1:49960:49988	617803	0	True				
ANR	617807	CallExpression	assert ( line [ currPos ] == '=' )		617803	0					
ANR	617808	Callee	assert		617803	0					
ANR	617809	Identifier	assert		617803	0					
ANR	617810	ArgumentList	line [ currPos ] == '='		617803	1					
ANR	617811	Argument	line [ currPos ] == '='		617803	0					
ANR	617812	EqualityExpression	line [ currPos ] == '='		617803	0		==			
ANR	617813	ArrayIndexing	line [ currPos ]		617803	0					
ANR	617814	Identifier	line		617803	0					
ANR	617815	Identifier	currPos		617803	1					
ANR	617816	PrimaryExpression	'='		617803	1					
ANR	617817	IfStatement	if ( currPos == 0 )		617803	1					
ANR	617818	Condition	currPos == 0	1727:5:49996:50007	617803	0	True				
ANR	617819	EqualityExpression	currPos == 0		617803	0		==			
ANR	617820	Identifier	currPos		617803	0					
ANR	617821	PrimaryExpression	0		617803	1					
ANR	617822	ReturnStatement	return 0 ;	1728:2:50012:50020	617803	1	True				
ANR	617823	PrimaryExpression	0		617803	0					
ANR	617824	IdentifierDeclStatement	"size_t end = line . find_last_not_of ( "" \\t"" , currPos - 1 ) ;"	1731:1:50070:50124	617803	2	True				
ANR	617825	IdentifierDecl	"end = line . find_last_not_of ( "" \\t"" , currPos - 1 )"		617803	0					
ANR	617826	IdentifierDeclType	size_t		617803	0					
ANR	617827	Identifier	end		617803	1					
ANR	617828	AssignmentExpression	"end = line . find_last_not_of ( "" \\t"" , currPos - 1 )"		617803	2		=			
ANR	617829	Identifier	end		617803	0					
ANR	617830	CallExpression	"line . find_last_not_of ( "" \\t"" , currPos - 1 )"		617803	1					
ANR	617831	Callee	line . find_last_not_of		617803	0					
ANR	617832	MemberAccess	line . find_last_not_of		617803	0					
ANR	617833	Identifier	line		617803	0					
ANR	617834	Identifier	find_last_not_of		617803	1					
ANR	617835	ArgumentList	""" \\t"""		617803	1					
ANR	617836	Argument	""" \\t"""		617803	0					
ANR	617837	PrimaryExpression	""" \\t"""		617803	0					
ANR	617838	Argument	currPos - 1		617803	1					
ANR	617839	AdditiveExpression	currPos - 1		617803	0		-			
ANR	617840	Identifier	currPos		617803	0					
ANR	617841	PrimaryExpression	1		617803	1					
ANR	617842	IfStatement	if ( end == string :: npos || ! isLegalNameChar ( line [ end ] ) )		617803	3					
ANR	617843	Condition	end == string :: npos || ! isLegalNameChar ( line [ end ] )	1732:5:50131:50180	617803	0	True				
ANR	617844	OrExpression	end == string :: npos || ! isLegalNameChar ( line [ end ] )		617803	0		||			
ANR	617845	EqualityExpression	end == string :: npos		617803	0		==			
ANR	617846	Identifier	end		617803	0					
ANR	617847	Identifier	string :: npos		617803	1					
ANR	617848	UnaryOperationExpression	! isLegalNameChar ( line [ end ] )		617803	1					
ANR	617849	UnaryOperator	!		617803	0					
ANR	617850	CallExpression	isLegalNameChar ( line [ end ] )		617803	1					
ANR	617851	Callee	isLegalNameChar		617803	0					
ANR	617852	Identifier	isLegalNameChar		617803	0					
ANR	617853	ArgumentList	line [ end ]		617803	1					
ANR	617854	Argument	line [ end ]		617803	0					
ANR	617855	ArrayIndexing	line [ end ]		617803	0					
ANR	617856	Identifier	line		617803	0					
ANR	617857	Identifier	end		617803	1					
ANR	617858	ReturnStatement	return 0 ;	1733:2:50185:50193	617803	1	True				
ANR	617859	PrimaryExpression	0		617803	0					
ANR	617860	IdentifierDeclStatement	int start ;	1735:1:50197:50206	617803	4	True				
ANR	617861	IdentifierDecl	start		617803	0					
ANR	617862	IdentifierDeclType	int		617803	0					
ANR	617863	Identifier	start		617803	1					
ANR	617864	ForStatement	for ( start = end ; start > - 1 ; start -- )		617803	5					
ANR	617865	ForInit	start = end ;	1736:6:50253:50264	617803	0	True				
ANR	617866	AssignmentExpression	start = end		617803	0		=			
ANR	617867	Identifier	start		617803	0					
ANR	617868	Identifier	end		617803	1					
ANR	617869	Condition	start > - 1	1736:19:50266:50275	617803	1	True				
ANR	617870	RelationalExpression	start > - 1		617803	0		>			
ANR	617871	Identifier	start		617803	0					
ANR	617872	UnaryOperationExpression	- 1		617803	1					
ANR	617873	UnaryOperator	-		617803	0					
ANR	617874	PrimaryExpression	1		617803	1					
ANR	617875	PostIncDecOperationExpression	start --	1736:31:50278:50284	617803	2	True				
ANR	617876	Identifier	start		617803	0					
ANR	617877	IncDec	--		617803	1					
ANR	617878	CompoundStatement		14:1:330:330	617803	3					
ANR	617879	IfStatement	if ( ! isLegalNameChar ( line [ start ] ) || line [ start ] == '.' )		617803	0					
ANR	617880	Condition	! isLegalNameChar ( line [ start ] ) || line [ start ] == '.'	1738:6:50296:50346	617803	0	True				
ANR	617881	OrExpression	! isLegalNameChar ( line [ start ] ) || line [ start ] == '.'		617803	0		||			
ANR	617882	UnaryOperationExpression	! isLegalNameChar ( line [ start ] )		617803	0					
ANR	617883	UnaryOperator	!		617803	0					
ANR	617884	CallExpression	isLegalNameChar ( line [ start ] )		617803	1					
ANR	617885	Callee	isLegalNameChar		617803	0					
ANR	617886	Identifier	isLegalNameChar		617803	0					
ANR	617887	ArgumentList	line [ start ]		617803	1					
ANR	617888	Argument	line [ start ]		617803	0					
ANR	617889	ArrayIndexing	line [ start ]		617803	0					
ANR	617890	Identifier	line		617803	0					
ANR	617891	Identifier	start		617803	1					
ANR	617892	EqualityExpression	line [ start ] == '.'		617803	1		==			
ANR	617893	ArrayIndexing	line [ start ]		617803	0					
ANR	617894	Identifier	line		617803	0					
ANR	617895	Identifier	start		617803	1					
ANR	617896	PrimaryExpression	'.'		617803	1					
ANR	617897	BreakStatement	break ;	1739:3:50352:50357	617803	1	True				
ANR	617898	ExpressionStatement	start ++	1741:1:50363:50370	617803	6	True				
ANR	617899	PostIncDecOperationExpression	start ++		617803	0					
ANR	617900	Identifier	start		617803	0					
ANR	617901	IncDec	++		617803	1					
ANR	617902	ReturnStatement	return start ;	1743:1:50374:50386	617803	7	True				
ANR	617903	Identifier	start		617803	0					
ANR	617904	ReturnType	int		617803	1					
ANR	617905	Identifier	ASBeautifier :: getContinuationIndentAssign		617803	2					
ANR	617906	ParameterList	"const string & line , size_t currPos"		617803	3					
ANR	617907	Parameter	const string & line	1723:46:49915:49932	617803	0	True				
ANR	617908	ParameterType	const string &		617803	0					
ANR	617909	Identifier	line		617803	1					
ANR	617910	Parameter	size_t currPos	1723:66:49935:49948	617803	1	True				
ANR	617911	ParameterType	size_t		617803	0					
ANR	617912	Identifier	currPos		617803	1					
ANR	617913	CFGEntryNode	ENTRY		617803		True				
ANR	617914	CFGExitNode	EXIT		617803		True				
ANR	617915	Symbol	line		617803						
ANR	617916	Symbol	* currPos		617803						
ANR	617917	Symbol	* start		617803						
ANR	617918	Symbol	string :: npos		617803						
ANR	617919	Symbol	start		617803						
ANR	617920	Symbol	currPos		617803						
ANR	617921	Symbol	end		617803						
ANR	617922	Symbol	* end		617803						
ANR	617923	Symbol	isLegalNameChar		617803						
ANR	617924	Symbol	* line		617803						
ANR	617925	Symbol	line . find_last_not_of		617803						
ANR	617926	Function	ASBeautifier :: getContinuationIndentComma	1751:0:50527:51151							
ANR	617927	FunctionDef	"ASBeautifier :: getContinuationIndentComma (const string & line , size_t currPos)"		617926	0					
ANR	617928	CompoundStatement		1752:0:50614:51151	617926	0					
ANR	617929	ExpressionStatement	"assert ( line [ currPos ] == ',' )"	1753:1:50617:50645	617926	0	True				
ANR	617930	CallExpression	"assert ( line [ currPos ] == ',' )"		617926	0					
ANR	617931	Callee	assert		617926	0					
ANR	617932	Identifier	assert		617926	0					
ANR	617933	ArgumentList	"line [ currPos ] == ','"		617926	1					
ANR	617934	Argument	"line [ currPos ] == ','"		617926	0					
ANR	617935	EqualityExpression	"line [ currPos ] == ','"		617926	0		==			
ANR	617936	ArrayIndexing	line [ currPos ]		617926	0					
ANR	617937	Identifier	line		617926	0					
ANR	617938	Identifier	currPos		617926	1					
ANR	617939	PrimaryExpression	"','"		617926	1					
ANR	617940	IdentifierDeclStatement	"size_t indent = line . find_first_not_of ( "" \\t"" ) ;"	1756:1:50678:50723	617926	1	True				
ANR	617941	IdentifierDecl	"indent = line . find_first_not_of ( "" \\t"" )"		617926	0					
ANR	617942	IdentifierDeclType	size_t		617926	0					
ANR	617943	Identifier	indent		617926	1					
ANR	617944	AssignmentExpression	"indent = line . find_first_not_of ( "" \\t"" )"		617926	2		=			
ANR	617945	Identifier	indent		617926	0					
ANR	617946	CallExpression	"line . find_first_not_of ( "" \\t"" )"		617926	1					
ANR	617947	Callee	line . find_first_not_of		617926	0					
ANR	617948	MemberAccess	line . find_first_not_of		617926	0					
ANR	617949	Identifier	line		617926	0					
ANR	617950	Identifier	find_first_not_of		617926	1					
ANR	617951	ArgumentList	""" \\t"""		617926	1					
ANR	617952	Argument	""" \\t"""		617926	0					
ANR	617953	PrimaryExpression	""" \\t"""		617926	0					
ANR	617954	IfStatement	if ( indent == string :: npos || ! isLegalNameChar ( line [ indent ] ) )		617926	2					
ANR	617955	Condition	indent == string :: npos || ! isLegalNameChar ( line [ indent ] )	1757:5:50730:50785	617926	0	True				
ANR	617956	OrExpression	indent == string :: npos || ! isLegalNameChar ( line [ indent ] )		617926	0		||			
ANR	617957	EqualityExpression	indent == string :: npos		617926	0		==			
ANR	617958	Identifier	indent		617926	0					
ANR	617959	Identifier	string :: npos		617926	1					
ANR	617960	UnaryOperationExpression	! isLegalNameChar ( line [ indent ] )		617926	1					
ANR	617961	UnaryOperator	!		617926	0					
ANR	617962	CallExpression	isLegalNameChar ( line [ indent ] )		617926	1					
ANR	617963	Callee	isLegalNameChar		617926	0					
ANR	617964	Identifier	isLegalNameChar		617926	0					
ANR	617965	ArgumentList	line [ indent ]		617926	1					
ANR	617966	Argument	line [ indent ]		617926	0					
ANR	617967	ArrayIndexing	line [ indent ]		617926	0					
ANR	617968	Identifier	line		617926	0					
ANR	617969	Identifier	indent		617926	1					
ANR	617970	ReturnStatement	return 0 ;	1758:2:50790:50798	617926	1	True				
ANR	617971	PrimaryExpression	0		617926	0					
ANR	617972	ForStatement	for ( ; indent < currPos ; indent ++ )		617926	3					
ANR	617973	Condition	indent < currPos	1761:8:50831:50846	617926	0	True				
ANR	617974	RelationalExpression	indent < currPos		617926	0		<			
ANR	617975	Identifier	indent		617926	0					
ANR	617976	Identifier	currPos		617926	1					
ANR	617977	PostIncDecOperationExpression	indent ++	1761:26:50849:50856	617926	1	True				
ANR	617978	Identifier	indent		617926	0					
ANR	617979	IncDec	++		617926	1					
ANR	617980	CompoundStatement		11:1:245:245	617926	2					
ANR	617981	IfStatement	if ( ! isLegalNameChar ( line [ indent ] ) )		617926	0					
ANR	617982	Condition	! isLegalNameChar ( line [ indent ] )	1763:6:50868:50897	617926	0	True				
ANR	617983	UnaryOperationExpression	! isLegalNameChar ( line [ indent ] )		617926	0					
ANR	617984	UnaryOperator	!		617926	0					
ANR	617985	CallExpression	isLegalNameChar ( line [ indent ] )		617926	1					
ANR	617986	Callee	isLegalNameChar		617926	0					
ANR	617987	Identifier	isLegalNameChar		617926	0					
ANR	617988	ArgumentList	line [ indent ]		617926	1					
ANR	617989	Argument	line [ indent ]		617926	0					
ANR	617990	ArrayIndexing	line [ indent ]		617926	0					
ANR	617991	Identifier	line		617926	0					
ANR	617992	Identifier	indent		617926	1					
ANR	617993	BreakStatement	break ;	1764:3:50903:50908	617926	1	True				
ANR	617994	ExpressionStatement	indent ++	1766:1:50914:50922	617926	4	True				
ANR	617995	PostIncDecOperationExpression	indent ++		617926	0					
ANR	617996	Identifier	indent		617926	0					
ANR	617997	IncDec	++		617926	1					
ANR	617998	IfStatement	if ( indent >= currPos || indent < 4 )		617926	5					
ANR	617999	Condition	indent >= currPos || indent < 4	1767:5:50929:50959	617926	0	True				
ANR	618000	OrExpression	indent >= currPos || indent < 4		617926	0		||			
ANR	618001	RelationalExpression	indent >= currPos		617926	0		>=			
ANR	618002	Identifier	indent		617926	0					
ANR	618003	Identifier	currPos		617926	1					
ANR	618004	RelationalExpression	indent < 4		617926	1		<			
ANR	618005	Identifier	indent		617926	0					
ANR	618006	PrimaryExpression	4		617926	1					
ANR	618007	ReturnStatement	return 0 ;	1768:2:50964:50972	617926	1	True				
ANR	618008	PrimaryExpression	0		617926	0					
ANR	618009	ExpressionStatement	"indent = line . find_first_not_of ( "" \\t"" , indent )"	1771:1:51024:51070	617926	6	True				
ANR	618010	AssignmentExpression	"indent = line . find_first_not_of ( "" \\t"" , indent )"		617926	0		=			
ANR	618011	Identifier	indent		617926	0					
ANR	618012	CallExpression	"line . find_first_not_of ( "" \\t"" , indent )"		617926	1					
ANR	618013	Callee	line . find_first_not_of		617926	0					
ANR	618014	MemberAccess	line . find_first_not_of		617926	0					
ANR	618015	Identifier	line		617926	0					
ANR	618016	Identifier	find_first_not_of		617926	1					
ANR	618017	ArgumentList	""" \\t"""		617926	1					
ANR	618018	Argument	""" \\t"""		617926	0					
ANR	618019	PrimaryExpression	""" \\t"""		617926	0					
ANR	618020	Argument	indent		617926	1					
ANR	618021	Identifier	indent		617926	0					
ANR	618022	IfStatement	if ( indent == string :: npos || indent >= currPos )		617926	7					
ANR	618023	Condition	indent == string :: npos || indent >= currPos	1772:5:51077:51119	617926	0	True				
ANR	618024	OrExpression	indent == string :: npos || indent >= currPos		617926	0		||			
ANR	618025	EqualityExpression	indent == string :: npos		617926	0		==			
ANR	618026	Identifier	indent		617926	0					
ANR	618027	Identifier	string :: npos		617926	1					
ANR	618028	RelationalExpression	indent >= currPos		617926	1		>=			
ANR	618029	Identifier	indent		617926	0					
ANR	618030	Identifier	currPos		617926	1					
ANR	618031	ReturnStatement	return 0 ;	1773:2:51124:51132	617926	1	True				
ANR	618032	PrimaryExpression	0		617926	0					
ANR	618033	ReturnStatement	return indent ;	1775:1:51136:51149	617926	8	True				
ANR	618034	Identifier	indent		617926	0					
ANR	618035	ReturnType	int		617926	1					
ANR	618036	Identifier	ASBeautifier :: getContinuationIndentComma		617926	2					
ANR	618037	ParameterList	"const string & line , size_t currPos"		617926	3					
ANR	618038	Parameter	const string & line	1751:45:50572:50589	617926	0	True				
ANR	618039	ParameterType	const string &		617926	0					
ANR	618040	Identifier	line		617926	1					
ANR	618041	Parameter	size_t currPos	1751:65:50592:50605	617926	1	True				
ANR	618042	ParameterType	size_t		617926	0					
ANR	618043	Identifier	currPos		617926	1					
ANR	618044	CFGEntryNode	ENTRY		617926		True				
ANR	618045	CFGExitNode	EXIT		617926		True				
ANR	618046	Symbol	* indent		617926						
ANR	618047	Symbol	indent		617926						
ANR	618048	Symbol	line		617926						
ANR	618049	Symbol	* currPos		617926						
ANR	618050	Symbol	string :: npos		617926						
ANR	618051	Symbol	currPos		617926						
ANR	618052	Symbol	isLegalNameChar		617926						
ANR	618053	Symbol	* line		617926						
ANR	618054	Symbol	line . find_first_not_of		617926						
ANR	618055	Function	ASBeautifier :: getNextWord	1784:0:51320:51876							
ANR	618056	FunctionDef	"ASBeautifier :: getNextWord (const string & line , size_t currPos)"		618055	0					
ANR	618057	CompoundStatement		1785:0:51395:51876	618055	0					
ANR	618058	IdentifierDeclStatement	size_t lineLength = line . length ( ) ;	1786:1:51398:51431	618055	0	True				
ANR	618059	IdentifierDecl	lineLength = line . length ( )		618055	0					
ANR	618060	IdentifierDeclType	size_t		618055	0					
ANR	618061	Identifier	lineLength		618055	1					
ANR	618062	AssignmentExpression	lineLength = line . length ( )		618055	2		=			
ANR	618063	Identifier	lineLength		618055	0					
ANR	618064	CallExpression	line . length ( )		618055	1					
ANR	618065	Callee	line . length		618055	0					
ANR	618066	MemberAccess	line . length		618055	0					
ANR	618067	Identifier	line		618055	0					
ANR	618068	Identifier	length		618055	1					
ANR	618069	ArgumentList			618055	1					
ANR	618070	IfStatement	if ( currPos == lineLength - 1 )		618055	1					
ANR	618071	Condition	currPos == lineLength - 1	1788:5:51484:51508	618055	0	True				
ANR	618072	EqualityExpression	currPos == lineLength - 1		618055	0		==			
ANR	618073	Identifier	currPos		618055	0					
ANR	618074	AdditiveExpression	lineLength - 1		618055	1		-			
ANR	618075	Identifier	lineLength		618055	0					
ANR	618076	PrimaryExpression	1		618055	1					
ANR	618077	ReturnStatement	return string ( ) ;	1789:2:51513:51528	618055	1	True				
ANR	618078	CallExpression	string ( )		618055	0					
ANR	618079	Callee	string		618055	0					
ANR	618080	Identifier	string		618055	0					
ANR	618081	ArgumentList			618055	1					
ANR	618082	IdentifierDeclStatement	"size_t start = line . find_first_not_of ( "" \\t"" , currPos + 1 ) ;"	1791:1:51532:51589	618055	2	True				
ANR	618083	IdentifierDecl	"start = line . find_first_not_of ( "" \\t"" , currPos + 1 )"		618055	0					
ANR	618084	IdentifierDeclType	size_t		618055	0					
ANR	618085	Identifier	start		618055	1					
ANR	618086	AssignmentExpression	"start = line . find_first_not_of ( "" \\t"" , currPos + 1 )"		618055	2		=			
ANR	618087	Identifier	start		618055	0					
ANR	618088	CallExpression	"line . find_first_not_of ( "" \\t"" , currPos + 1 )"		618055	1					
ANR	618089	Callee	line . find_first_not_of		618055	0					
ANR	618090	MemberAccess	line . find_first_not_of		618055	0					
ANR	618091	Identifier	line		618055	0					
ANR	618092	Identifier	find_first_not_of		618055	1					
ANR	618093	ArgumentList	""" \\t"""		618055	1					
ANR	618094	Argument	""" \\t"""		618055	0					
ANR	618095	PrimaryExpression	""" \\t"""		618055	0					
ANR	618096	Argument	currPos + 1		618055	1					
ANR	618097	AdditiveExpression	currPos + 1		618055	0		+			
ANR	618098	Identifier	currPos		618055	0					
ANR	618099	PrimaryExpression	1		618055	1					
ANR	618100	IfStatement	if ( start == string :: npos || ! isLegalNameChar ( line [ start ] ) )		618055	3					
ANR	618101	Condition	start == string :: npos || ! isLegalNameChar ( line [ start ] )	1792:5:51596:51649	618055	0	True				
ANR	618102	OrExpression	start == string :: npos || ! isLegalNameChar ( line [ start ] )		618055	0		||			
ANR	618103	EqualityExpression	start == string :: npos		618055	0		==			
ANR	618104	Identifier	start		618055	0					
ANR	618105	Identifier	string :: npos		618055	1					
ANR	618106	UnaryOperationExpression	! isLegalNameChar ( line [ start ] )		618055	1					
ANR	618107	UnaryOperator	!		618055	0					
ANR	618108	CallExpression	isLegalNameChar ( line [ start ] )		618055	1					
ANR	618109	Callee	isLegalNameChar		618055	0					
ANR	618110	Identifier	isLegalNameChar		618055	0					
ANR	618111	ArgumentList	line [ start ]		618055	1					
ANR	618112	Argument	line [ start ]		618055	0					
ANR	618113	ArrayIndexing	line [ start ]		618055	0					
ANR	618114	Identifier	line		618055	0					
ANR	618115	Identifier	start		618055	1					
ANR	618116	ReturnStatement	return string ( ) ;	1793:2:51654:51669	618055	1	True				
ANR	618117	CallExpression	string ( )		618055	0					
ANR	618118	Callee	string		618055	0					
ANR	618119	Identifier	string		618055	0					
ANR	618120	ArgumentList			618055	1					
ANR	618121	IdentifierDeclStatement	size_t end ;	1795:1:51673:51683	618055	4	True				
ANR	618122	IdentifierDecl	end		618055	0					
ANR	618123	IdentifierDeclType	size_t		618055	0					
ANR	618124	Identifier	end		618055	1					
ANR	618125	ForStatement	for ( end = start + 1 ; end <= lineLength ; end ++ )		618055	5					
ANR	618126	ForInit	end = start + 1 ;	1796:6:51720:51735	618055	0	True				
ANR	618127	AssignmentExpression	end = start + 1		618055	0		=			
ANR	618128	Identifier	end		618055	0					
ANR	618129	AdditiveExpression	start + 1		618055	1		+			
ANR	618130	Identifier	start		618055	0					
ANR	618131	PrimaryExpression	1		618055	1					
ANR	618132	Condition	end <= lineLength	1796:23:51737:51753	618055	1	True				
ANR	618133	RelationalExpression	end <= lineLength		618055	0		<=			
ANR	618134	Identifier	end		618055	0					
ANR	618135	Identifier	lineLength		618055	1					
ANR	618136	PostIncDecOperationExpression	end ++	1796:42:51756:51760	618055	2	True				
ANR	618137	Identifier	end		618055	0					
ANR	618138	IncDec	++		618055	1					
ANR	618139	CompoundStatement		13:1:368:368	618055	3					
ANR	618140	IfStatement	if ( ! isLegalNameChar ( line [ end ] ) || line [ end ] == '.' )		618055	0					
ANR	618141	Condition	! isLegalNameChar ( line [ end ] ) || line [ end ] == '.'	1798:6:51772:51818	618055	0	True				
ANR	618142	OrExpression	! isLegalNameChar ( line [ end ] ) || line [ end ] == '.'		618055	0		||			
ANR	618143	UnaryOperationExpression	! isLegalNameChar ( line [ end ] )		618055	0					
ANR	618144	UnaryOperator	!		618055	0					
ANR	618145	CallExpression	isLegalNameChar ( line [ end ] )		618055	1					
ANR	618146	Callee	isLegalNameChar		618055	0					
ANR	618147	Identifier	isLegalNameChar		618055	0					
ANR	618148	ArgumentList	line [ end ]		618055	1					
ANR	618149	Argument	line [ end ]		618055	0					
ANR	618150	ArrayIndexing	line [ end ]		618055	0					
ANR	618151	Identifier	line		618055	0					
ANR	618152	Identifier	end		618055	1					
ANR	618153	EqualityExpression	line [ end ] == '.'		618055	1		==			
ANR	618154	ArrayIndexing	line [ end ]		618055	0					
ANR	618155	Identifier	line		618055	0					
ANR	618156	Identifier	end		618055	1					
ANR	618157	PrimaryExpression	'.'		618055	1					
ANR	618158	BreakStatement	break ;	1799:3:51824:51829	618055	1	True				
ANR	618159	ReturnStatement	"return line . substr ( start , end - start ) ;"	1802:1:51836:51874	618055	6	True				
ANR	618160	CallExpression	"line . substr ( start , end - start )"		618055	0					
ANR	618161	Callee	line . substr		618055	0					
ANR	618162	MemberAccess	line . substr		618055	0					
ANR	618163	Identifier	line		618055	0					
ANR	618164	Identifier	substr		618055	1					
ANR	618165	ArgumentList	start		618055	1					
ANR	618166	Argument	start		618055	0					
ANR	618167	Identifier	start		618055	0					
ANR	618168	Argument	end - start		618055	1					
ANR	618169	AdditiveExpression	end - start		618055	0		-			
ANR	618170	Identifier	end		618055	0					
ANR	618171	Identifier	start		618055	1					
ANR	618172	ReturnType	string		618055	1					
ANR	618173	Identifier	ASBeautifier :: getNextWord		618055	2					
ANR	618174	ParameterList	"const string & line , size_t currPos"		618055	3					
ANR	618175	Parameter	const string & line	1784:33:51353:51370	618055	0	True				
ANR	618176	ParameterType	const string &		618055	0					
ANR	618177	Identifier	line		618055	1					
ANR	618178	Parameter	size_t currPos	1784:53:51373:51386	618055	1	True				
ANR	618179	ParameterType	size_t		618055	0					
ANR	618180	Identifier	currPos		618055	1					
ANR	618181	CFGEntryNode	ENTRY		618055		True				
ANR	618182	CFGExitNode	EXIT		618055		True				
ANR	618183	Symbol	string		618055						
ANR	618184	Symbol	line		618055						
ANR	618185	Symbol	line . substr		618055						
ANR	618186	Symbol	* start		618055						
ANR	618187	Symbol	start		618055						
ANR	618188	Symbol	string :: npos		618055						
ANR	618189	Symbol	currPos		618055						
ANR	618190	Symbol	isLegalNameChar		618055						
ANR	618191	Symbol	* line		618055						
ANR	618192	Symbol	lineLength		618055						
ANR	618193	Symbol	line . find_first_not_of		618055						
ANR	618194	Symbol	end		618055						
ANR	618195	Symbol	* end		618055						
ANR	618196	Symbol	line . length		618055						
ANR	618197	Function	ASBeautifier :: isIndentedPreprocessor	1812:0:52070:53112							
ANR	618198	FunctionDef	"ASBeautifier :: isIndentedPreprocessor (const string & line , size_t currPos)"		618197	0					
ANR	618199	CompoundStatement		1813:0:52154:53112	618197	0					
ANR	618200	ExpressionStatement	assert ( line [ 0 ] == '#' )	1814:1:52157:52179	618197	0	True				
ANR	618201	CallExpression	assert ( line [ 0 ] == '#' )		618197	0					
ANR	618202	Callee	assert		618197	0					
ANR	618203	Identifier	assert		618197	0					
ANR	618204	ArgumentList	line [ 0 ] == '#'		618197	1					
ANR	618205	Argument	line [ 0 ] == '#'		618197	0					
ANR	618206	EqualityExpression	line [ 0 ] == '#'		618197	0		==			
ANR	618207	ArrayIndexing	line [ 0 ]		618197	0					
ANR	618208	Identifier	line		618197	0					
ANR	618209	PrimaryExpression	0		618197	1					
ANR	618210	PrimaryExpression	'#'		618197	1					
ANR	618211	IdentifierDeclStatement	"string nextWord = getNextWord ( line , currPos ) ;"	1815:1:52182:52226	618197	1	True				
ANR	618212	IdentifierDecl	"nextWord = getNextWord ( line , currPos )"		618197	0					
ANR	618213	IdentifierDeclType	string		618197	0					
ANR	618214	Identifier	nextWord		618197	1					
ANR	618215	AssignmentExpression	"nextWord = getNextWord ( line , currPos )"		618197	2		=			
ANR	618216	Identifier	nextWord		618197	0					
ANR	618217	CallExpression	"getNextWord ( line , currPos )"		618197	1					
ANR	618218	Callee	getNextWord		618197	0					
ANR	618219	Identifier	getNextWord		618197	0					
ANR	618220	ArgumentList	line		618197	1					
ANR	618221	Argument	line		618197	0					
ANR	618222	Identifier	line		618197	0					
ANR	618223	Argument	currPos		618197	1					
ANR	618224	Identifier	currPos		618197	0					
ANR	618225	IfStatement	"if ( nextWord == ""region"" || nextWord == ""endregion"" )"		618197	2					
ANR	618226	Condition	"nextWord == ""region"" || nextWord == ""endregion"""	1816:5:52233:52279	618197	0	True				
ANR	618227	OrExpression	"nextWord == ""region"" || nextWord == ""endregion"""		618197	0		||			
ANR	618228	EqualityExpression	"nextWord == ""region"""		618197	0		==			
ANR	618229	Identifier	nextWord		618197	0					
ANR	618230	PrimaryExpression	"""region"""		618197	1					
ANR	618231	EqualityExpression	"nextWord == ""endregion"""		618197	1		==			
ANR	618232	Identifier	nextWord		618197	0					
ANR	618233	PrimaryExpression	"""endregion"""		618197	1					
ANR	618234	ReturnStatement	return true ;	1817:2:52284:52295	618197	1	True				
ANR	618235	Identifier	true		618197	0					
ANR	618236	IfStatement	"if ( nextWord == ""pragma"" )"		618197	3					
ANR	618237	Condition	"nextWord == ""pragma"""	1819:5:52324:52343	618197	0	True				
ANR	618238	EqualityExpression	"nextWord == ""pragma"""		618197	0		==			
ANR	618239	Identifier	nextWord		618197	0					
ANR	618240	PrimaryExpression	"""pragma"""		618197	1					
ANR	618241	CompoundStatement		34:2:812:857	618197	1					
ANR	618242	IdentifierDeclStatement	"size_t start = line . find ( ""pragma"" ) ;"	1822:2:52368:52402	618197	0	True				
ANR	618243	IdentifierDecl	"start = line . find ( ""pragma"" )"		618197	0					
ANR	618244	IdentifierDeclType	size_t		618197	0					
ANR	618245	Identifier	start		618197	1					
ANR	618246	AssignmentExpression	"start = line . find ( ""pragma"" )"		618197	2		=			
ANR	618247	Identifier	start		618197	0					
ANR	618248	CallExpression	"line . find ( ""pragma"" )"		618197	1					
ANR	618249	Callee	line . find		618197	0					
ANR	618250	MemberAccess	line . find		618197	0					
ANR	618251	Identifier	line		618197	0					
ANR	618252	Identifier	find		618197	1					
ANR	618253	ArgumentList	"""pragma"""		618197	1					
ANR	618254	Argument	"""pragma"""		618197	0					
ANR	618255	PrimaryExpression	"""pragma"""		618197	0					
ANR	618256	IfStatement	if ( start == string :: npos || ! isLegalNameChar ( line [ start ] ) )		618197	1					
ANR	618257	Condition	start == string :: npos || ! isLegalNameChar ( line [ start ] )	1823:6:52410:52463	618197	0	True				
ANR	618258	OrExpression	start == string :: npos || ! isLegalNameChar ( line [ start ] )		618197	0		||			
ANR	618259	EqualityExpression	start == string :: npos		618197	0		==			
ANR	618260	Identifier	start		618197	0					
ANR	618261	Identifier	string :: npos		618197	1					
ANR	618262	UnaryOperationExpression	! isLegalNameChar ( line [ start ] )		618197	1					
ANR	618263	UnaryOperator	!		618197	0					
ANR	618264	CallExpression	isLegalNameChar ( line [ start ] )		618197	1					
ANR	618265	Callee	isLegalNameChar		618197	0					
ANR	618266	Identifier	isLegalNameChar		618197	0					
ANR	618267	ArgumentList	line [ start ]		618197	1					
ANR	618268	Argument	line [ start ]		618197	0					
ANR	618269	ArrayIndexing	line [ start ]		618197	0					
ANR	618270	Identifier	line		618197	0					
ANR	618271	Identifier	start		618197	1					
ANR	618272	ReturnStatement	return false ;	1824:3:52469:52481	618197	1	True				
ANR	618273	Identifier	false		618197	0					
ANR	618274	ForStatement	for ( ; start < line . length ( ) ; start ++ )		618197	2					
ANR	618275	Condition	start < line . length ( )	1826:9:52511:52531	618197	0	True				
ANR	618276	RelationalExpression	start < line . length ( )		618197	0		<			
ANR	618277	Identifier	start		618197	0					
ANR	618278	CallExpression	line . length ( )		618197	1					
ANR	618279	Callee	line . length		618197	0					
ANR	618280	MemberAccess	line . length		618197	0					
ANR	618281	Identifier	line		618197	0					
ANR	618282	Identifier	length		618197	1					
ANR	618283	ArgumentList			618197	1					
ANR	618284	PostIncDecOperationExpression	start ++	1826:32:52534:52540	618197	1	True				
ANR	618285	Identifier	start		618197	0					
ANR	618286	IncDec	++		618197	1					
ANR	618287	CompoundStatement		15:2:390:390	618197	2					
ANR	618288	IfStatement	if ( ! isLegalNameChar ( line [ start ] ) )		618197	0					
ANR	618289	Condition	! isLegalNameChar ( line [ start ] )	1828:7:52554:52582	618197	0	True				
ANR	618290	UnaryOperationExpression	! isLegalNameChar ( line [ start ] )		618197	0					
ANR	618291	UnaryOperator	!		618197	0					
ANR	618292	CallExpression	isLegalNameChar ( line [ start ] )		618197	1					
ANR	618293	Callee	isLegalNameChar		618197	0					
ANR	618294	Identifier	isLegalNameChar		618197	0					
ANR	618295	ArgumentList	line [ start ]		618197	1					
ANR	618296	Argument	line [ start ]		618197	0					
ANR	618297	ArrayIndexing	line [ start ]		618197	0					
ANR	618298	Identifier	line		618197	0					
ANR	618299	Identifier	start		618197	1					
ANR	618300	BreakStatement	break ;	1829:4:52589:52594	618197	1	True				
ANR	618301	ExpressionStatement	start ++	1831:2:52602:52609	618197	3	True				
ANR	618302	PostIncDecOperationExpression	start ++		618197	0					
ANR	618303	Identifier	start		618197	0					
ANR	618304	IncDec	++		618197	1					
ANR	618305	IfStatement	if ( start >= line . length ( ) )		618197	4					
ANR	618306	Condition	start >= line . length ( )	1832:6:52617:52638	618197	0	True				
ANR	618307	RelationalExpression	start >= line . length ( )		618197	0		>=			
ANR	618308	Identifier	start		618197	0					
ANR	618309	CallExpression	line . length ( )		618197	1					
ANR	618310	Callee	line . length		618197	0					
ANR	618311	MemberAccess	line . length		618197	0					
ANR	618312	Identifier	line		618197	0					
ANR	618313	Identifier	length		618197	1					
ANR	618314	ArgumentList			618197	1					
ANR	618315	ReturnStatement	return false ;	1833:3:52644:52656	618197	1	True				
ANR	618316	Identifier	false		618197	0					
ANR	618317	ExpressionStatement	"start = line . find_first_not_of ( "" \\t"" , start )"	1835:2:52695:52739	618197	5	True				
ANR	618318	AssignmentExpression	"start = line . find_first_not_of ( "" \\t"" , start )"		618197	0		=			
ANR	618319	Identifier	start		618197	0					
ANR	618320	CallExpression	"line . find_first_not_of ( "" \\t"" , start )"		618197	1					
ANR	618321	Callee	line . find_first_not_of		618197	0					
ANR	618322	MemberAccess	line . find_first_not_of		618197	0					
ANR	618323	Identifier	line		618197	0					
ANR	618324	Identifier	find_first_not_of		618197	1					
ANR	618325	ArgumentList	""" \\t"""		618197	1					
ANR	618326	Argument	""" \\t"""		618197	0					
ANR	618327	PrimaryExpression	""" \\t"""		618197	0					
ANR	618328	Argument	start		618197	1					
ANR	618329	Identifier	start		618197	0					
ANR	618330	IfStatement	if ( start == string :: npos )		618197	6					
ANR	618331	Condition	start == string :: npos	1836:6:52747:52767	618197	0	True				
ANR	618332	EqualityExpression	start == string :: npos		618197	0		==			
ANR	618333	Identifier	start		618197	0					
ANR	618334	Identifier	string :: npos		618197	1					
ANR	618335	ReturnStatement	return false ;	1837:3:52773:52785	618197	1	True				
ANR	618336	Identifier	false		618197	0					
ANR	618337	IdentifierDeclStatement	size_t end ;	1839:2:52822:52832	618197	7	True				
ANR	618338	IdentifierDecl	end		618197	0					
ANR	618339	IdentifierDeclType	size_t		618197	0					
ANR	618340	Identifier	end		618197	1					
ANR	618341	ForStatement	for ( end = start ; end < line . length ( ) ; end ++ )		618197	8					
ANR	618342	ForInit	end = start ;	1840:7:52841:52852	618197	0	True				
ANR	618343	AssignmentExpression	end = start		618197	0		=			
ANR	618344	Identifier	end		618197	0					
ANR	618345	Identifier	start		618197	1					
ANR	618346	Condition	end < line . length ( )	1840:20:52854:52872	618197	1	True				
ANR	618347	RelationalExpression	end < line . length ( )		618197	0		<			
ANR	618348	Identifier	end		618197	0					
ANR	618349	CallExpression	line . length ( )		618197	1					
ANR	618350	Callee	line . length		618197	0					
ANR	618351	MemberAccess	line . length		618197	0					
ANR	618352	Identifier	line		618197	0					
ANR	618353	Identifier	length		618197	1					
ANR	618354	ArgumentList			618197	1					
ANR	618355	PostIncDecOperationExpression	end ++	1840:41:52875:52879	618197	2	True				
ANR	618356	Identifier	end		618197	0					
ANR	618357	IncDec	++		618197	1					
ANR	618358	CompoundStatement		29:2:729:729	618197	3					
ANR	618359	IfStatement	if ( ! isLegalNameChar ( line [ end ] ) )		618197	0					
ANR	618360	Condition	! isLegalNameChar ( line [ end ] )	1842:7:52893:52919	618197	0	True				
ANR	618361	UnaryOperationExpression	! isLegalNameChar ( line [ end ] )		618197	0					
ANR	618362	UnaryOperator	!		618197	0					
ANR	618363	CallExpression	isLegalNameChar ( line [ end ] )		618197	1					
ANR	618364	Callee	isLegalNameChar		618197	0					
ANR	618365	Identifier	isLegalNameChar		618197	0					
ANR	618366	ArgumentList	line [ end ]		618197	1					
ANR	618367	Argument	line [ end ]		618197	0					
ANR	618368	ArrayIndexing	line [ end ]		618197	0					
ANR	618369	Identifier	line		618197	0					
ANR	618370	Identifier	end		618197	1					
ANR	618371	BreakStatement	break ;	1843:4:52926:52931	618197	1	True				
ANR	618372	IdentifierDeclStatement	"string word = line . substr ( start , end - start ) ;"	1846:2:52967:53012	618197	9	True				
ANR	618373	IdentifierDecl	"word = line . substr ( start , end - start )"		618197	0					
ANR	618374	IdentifierDeclType	string		618197	0					
ANR	618375	Identifier	word		618197	1					
ANR	618376	AssignmentExpression	"word = line . substr ( start , end - start )"		618197	2		=			
ANR	618377	Identifier	word		618197	0					
ANR	618378	CallExpression	"line . substr ( start , end - start )"		618197	1					
ANR	618379	Callee	line . substr		618197	0					
ANR	618380	MemberAccess	line . substr		618197	0					
ANR	618381	Identifier	line		618197	0					
ANR	618382	Identifier	substr		618197	1					
ANR	618383	ArgumentList	start		618197	1					
ANR	618384	Argument	start		618197	0					
ANR	618385	Identifier	start		618197	0					
ANR	618386	Argument	end - start		618197	1					
ANR	618387	AdditiveExpression	end - start		618197	0		-			
ANR	618388	Identifier	end		618197	0					
ANR	618389	Identifier	start		618197	1					
ANR	618390	IfStatement	"if ( word == ""omp"" || word == ""region"" || word == ""endregion"" )"		618197	10					
ANR	618391	Condition	"word == ""omp"" || word == ""region"" || word == ""endregion"""	1847:6:53020:53075	618197	0	True				
ANR	618392	OrExpression	"word == ""omp"" || word == ""region"" || word == ""endregion"""		618197	0		||			
ANR	618393	EqualityExpression	"word == ""omp"""		618197	0		==			
ANR	618394	Identifier	word		618197	0					
ANR	618395	PrimaryExpression	"""omp"""		618197	1					
ANR	618396	OrExpression	"word == ""region"" || word == ""endregion"""		618197	1		||			
ANR	618397	EqualityExpression	"word == ""region"""		618197	0		==			
ANR	618398	Identifier	word		618197	0					
ANR	618399	PrimaryExpression	"""region"""		618197	1					
ANR	618400	EqualityExpression	"word == ""endregion"""		618197	1		==			
ANR	618401	Identifier	word		618197	0					
ANR	618402	PrimaryExpression	"""endregion"""		618197	1					
ANR	618403	ReturnStatement	return true ;	1848:3:53081:53092	618197	1	True				
ANR	618404	Identifier	true		618197	0					
ANR	618405	ReturnStatement	return false ;	1850:1:53098:53110	618197	4	True				
ANR	618406	Identifier	false		618197	0					
ANR	618407	ReturnType	bool		618197	1					
ANR	618408	Identifier	ASBeautifier :: isIndentedPreprocessor		618197	2					
ANR	618409	ParameterList	"const string & line , size_t currPos"		618197	3					
ANR	618410	Parameter	const string & line	1812:42:52112:52129	618197	0	True				
ANR	618411	ParameterType	const string &		618197	0					
ANR	618412	Identifier	line		618197	1					
ANR	618413	Parameter	size_t currPos	1812:62:52132:52145	618197	1	True				
ANR	618414	ParameterType	size_t		618197	0					
ANR	618415	Identifier	currPos		618197	1					
ANR	618416	CFGEntryNode	ENTRY		618197		True				
ANR	618417	CFGExitNode	EXIT		618197		True				
ANR	618418	Symbol	line . find		618197						
ANR	618419	Symbol	line		618197						
ANR	618420	Symbol	line . substr		618197						
ANR	618421	Symbol	* start		618197						
ANR	618422	Symbol	start		618197						
ANR	618423	Symbol	string :: npos		618197						
ANR	618424	Symbol	false		618197						
ANR	618425	Symbol	currPos		618197						
ANR	618426	Symbol	isLegalNameChar		618197						
ANR	618427	Symbol	* line		618197						
ANR	618428	Symbol	line . find_first_not_of		618197						
ANR	618429	Symbol	getNextWord		618197						
ANR	618430	Symbol	nextWord		618197						
ANR	618431	Symbol	true		618197						
ANR	618432	Symbol	end		618197						
ANR	618433	Symbol	* end		618197						
ANR	618434	Symbol	word		618197						
ANR	618435	Symbol	line . length		618197						
ANR	618436	Function	ASBeautifier :: isPreprocessorConditionalCplusplus	1858:0:53229:53995							
ANR	618437	FunctionDef	ASBeautifier :: isPreprocessorConditionalCplusplus (const string & line)		618436	0					
ANR	618438	CompoundStatement		1859:0:53309:53995	618436	0					
ANR	618439	IdentifierDeclStatement	string preproc = trim ( line . substr ( 1 ) ) ;	1860:1:53312:53349	618436	0	True				
ANR	618440	IdentifierDecl	preproc = trim ( line . substr ( 1 ) )		618436	0					
ANR	618441	IdentifierDeclType	string		618436	0					
ANR	618442	Identifier	preproc		618436	1					
ANR	618443	AssignmentExpression	preproc = trim ( line . substr ( 1 ) )		618436	2		=			
ANR	618444	Identifier	preproc		618436	0					
ANR	618445	CallExpression	trim ( line . substr ( 1 ) )		618436	1					
ANR	618446	Callee	trim		618436	0					
ANR	618447	Identifier	trim		618436	0					
ANR	618448	ArgumentList	line . substr ( 1 )		618436	1					
ANR	618449	Argument	line . substr ( 1 )		618436	0					
ANR	618450	CallExpression	line . substr ( 1 )		618436	0					
ANR	618451	Callee	line . substr		618436	0					
ANR	618452	MemberAccess	line . substr		618436	0					
ANR	618453	Identifier	line		618436	0					
ANR	618454	Identifier	substr		618436	1					
ANR	618455	ArgumentList	1		618436	1					
ANR	618456	Argument	1		618436	0					
ANR	618457	PrimaryExpression	1		618436	0					
ANR	618458	IfStatement	"if ( preproc . compare ( 0 , 5 , ""ifdef"" ) == 0 && getNextWord ( preproc , 4 ) == ""__cplusplus"" )"		618436	1					
ANR	618459	Condition	"preproc . compare ( 0 , 5 , ""ifdef"" ) == 0 && getNextWord ( preproc , 4 ) == ""__cplusplus"""	1861:5:53356:53434	618436	0	True				
ANR	618460	AndExpression	"preproc . compare ( 0 , 5 , ""ifdef"" ) == 0 && getNextWord ( preproc , 4 ) == ""__cplusplus"""		618436	0		&&			
ANR	618461	EqualityExpression	"preproc . compare ( 0 , 5 , ""ifdef"" ) == 0"		618436	0		==			
ANR	618462	CallExpression	"preproc . compare ( 0 , 5 , ""ifdef"" )"		618436	0					
ANR	618463	Callee	preproc . compare		618436	0					
ANR	618464	MemberAccess	preproc . compare		618436	0					
ANR	618465	Identifier	preproc		618436	0					
ANR	618466	Identifier	compare		618436	1					
ANR	618467	ArgumentList	0		618436	1					
ANR	618468	Argument	0		618436	0					
ANR	618469	PrimaryExpression	0		618436	0					
ANR	618470	Argument	5		618436	1					
ANR	618471	PrimaryExpression	5		618436	0					
ANR	618472	Argument	"""ifdef"""		618436	2					
ANR	618473	PrimaryExpression	"""ifdef"""		618436	0					
ANR	618474	PrimaryExpression	0		618436	1					
ANR	618475	EqualityExpression	"getNextWord ( preproc , 4 ) == ""__cplusplus"""		618436	1		==			
ANR	618476	CallExpression	"getNextWord ( preproc , 4 )"		618436	0					
ANR	618477	Callee	getNextWord		618436	0					
ANR	618478	Identifier	getNextWord		618436	0					
ANR	618479	ArgumentList	preproc		618436	1					
ANR	618480	Argument	preproc		618436	0					
ANR	618481	Identifier	preproc		618436	0					
ANR	618482	Argument	4		618436	1					
ANR	618483	PrimaryExpression	4		618436	0					
ANR	618484	PrimaryExpression	"""__cplusplus"""		618436	1					
ANR	618485	ReturnStatement	return true ;	1862:2:53439:53450	618436	1	True				
ANR	618486	Identifier	true		618436	0					
ANR	618487	IfStatement	"if ( preproc . compare ( 0 , 2 , ""if"" ) == 0 )"		618436	2					
ANR	618488	Condition	"preproc . compare ( 0 , 2 , ""if"" ) == 0"	1863:5:53457:53488	618436	0	True				
ANR	618489	EqualityExpression	"preproc . compare ( 0 , 2 , ""if"" ) == 0"		618436	0		==			
ANR	618490	CallExpression	"preproc . compare ( 0 , 2 , ""if"" )"		618436	0					
ANR	618491	Callee	preproc . compare		618436	0					
ANR	618492	MemberAccess	preproc . compare		618436	0					
ANR	618493	Identifier	preproc		618436	0					
ANR	618494	Identifier	compare		618436	1					
ANR	618495	ArgumentList	0		618436	1					
ANR	618496	Argument	0		618436	0					
ANR	618497	PrimaryExpression	0		618436	0					
ANR	618498	Argument	2		618436	1					
ANR	618499	PrimaryExpression	2		618436	0					
ANR	618500	Argument	"""if"""		618436	2					
ANR	618501	PrimaryExpression	"""if"""		618436	0					
ANR	618502	PrimaryExpression	0		618436	1					
ANR	618503	CompoundStatement		8:2:229:247	618436	1					
ANR	618504	IdentifierDeclStatement	size_t charNum = 2 ;	1866:2:53539:53557	618436	0	True				
ANR	618505	IdentifierDecl	charNum = 2		618436	0					
ANR	618506	IdentifierDeclType	size_t		618436	0					
ANR	618507	Identifier	charNum		618436	1					
ANR	618508	AssignmentExpression	charNum = 2		618436	2		=			
ANR	618509	Identifier	charNum		618436	0					
ANR	618510	PrimaryExpression	2		618436	1					
ANR	618511	ExpressionStatement	"charNum = preproc . find_first_not_of ( "" \\t"" , charNum )"	1867:2:53561:53612	618436	1	True				
ANR	618512	AssignmentExpression	"charNum = preproc . find_first_not_of ( "" \\t"" , charNum )"		618436	0		=			
ANR	618513	Identifier	charNum		618436	0					
ANR	618514	CallExpression	"preproc . find_first_not_of ( "" \\t"" , charNum )"		618436	1					
ANR	618515	Callee	preproc . find_first_not_of		618436	0					
ANR	618516	MemberAccess	preproc . find_first_not_of		618436	0					
ANR	618517	Identifier	preproc		618436	0					
ANR	618518	Identifier	find_first_not_of		618436	1					
ANR	618519	ArgumentList	""" \\t"""		618436	1					
ANR	618520	Argument	""" \\t"""		618436	0					
ANR	618521	PrimaryExpression	""" \\t"""		618436	0					
ANR	618522	Argument	charNum		618436	1					
ANR	618523	Identifier	charNum		618436	0					
ANR	618524	IfStatement	"if ( charNum != string :: npos && preproc . compare ( charNum , 7 , ""defined"" ) == 0 )"		618436	2					
ANR	618525	Condition	"charNum != string :: npos && preproc . compare ( charNum , 7 , ""defined"" ) == 0"	1868:6:53620:53689	618436	0	True				
ANR	618526	AndExpression	"charNum != string :: npos && preproc . compare ( charNum , 7 , ""defined"" ) == 0"		618436	0		&&			
ANR	618527	EqualityExpression	charNum != string :: npos		618436	0		!=			
ANR	618528	Identifier	charNum		618436	0					
ANR	618529	Identifier	string :: npos		618436	1					
ANR	618530	EqualityExpression	"preproc . compare ( charNum , 7 , ""defined"" ) == 0"		618436	1		==			
ANR	618531	CallExpression	"preproc . compare ( charNum , 7 , ""defined"" )"		618436	0					
ANR	618532	Callee	preproc . compare		618436	0					
ANR	618533	MemberAccess	preproc . compare		618436	0					
ANR	618534	Identifier	preproc		618436	0					
ANR	618535	Identifier	compare		618436	1					
ANR	618536	ArgumentList	charNum		618436	1					
ANR	618537	Argument	charNum		618436	0					
ANR	618538	Identifier	charNum		618436	0					
ANR	618539	Argument	7		618436	1					
ANR	618540	PrimaryExpression	7		618436	0					
ANR	618541	Argument	"""defined"""		618436	2					
ANR	618542	PrimaryExpression	"""defined"""		618436	0					
ANR	618543	PrimaryExpression	0		618436	1					
ANR	618544	CompoundStatement		11:2:384:384	618436	1					
ANR	618545	ExpressionStatement	charNum += 7	1870:3:53699:53711	618436	0	True				
ANR	618546	AssignmentExpression	charNum += 7		618436	0		+=			
ANR	618547	Identifier	charNum		618436	0					
ANR	618548	PrimaryExpression	7		618436	1					
ANR	618549	ExpressionStatement	"charNum = preproc . find_first_not_of ( "" \\t"" , charNum )"	1871:3:53716:53767	618436	1	True				
ANR	618550	AssignmentExpression	"charNum = preproc . find_first_not_of ( "" \\t"" , charNum )"		618436	0		=			
ANR	618551	Identifier	charNum		618436	0					
ANR	618552	CallExpression	"preproc . find_first_not_of ( "" \\t"" , charNum )"		618436	1					
ANR	618553	Callee	preproc . find_first_not_of		618436	0					
ANR	618554	MemberAccess	preproc . find_first_not_of		618436	0					
ANR	618555	Identifier	preproc		618436	0					
ANR	618556	Identifier	find_first_not_of		618436	1					
ANR	618557	ArgumentList	""" \\t"""		618436	1					
ANR	618558	Argument	""" \\t"""		618436	0					
ANR	618559	PrimaryExpression	""" \\t"""		618436	0					
ANR	618560	Argument	charNum		618436	1					
ANR	618561	Identifier	charNum		618436	0					
ANR	618562	IfStatement	"if ( preproc . compare ( charNum , 1 , ""("" ) == 0 )"		618436	2					
ANR	618563	Condition	"preproc . compare ( charNum , 1 , ""("" ) == 0"	1872:7:53776:53812	618436	0	True				
ANR	618564	EqualityExpression	"preproc . compare ( charNum , 1 , ""("" ) == 0"		618436	0		==			
ANR	618565	CallExpression	"preproc . compare ( charNum , 1 , ""("" )"		618436	0					
ANR	618566	Callee	preproc . compare		618436	0					
ANR	618567	MemberAccess	preproc . compare		618436	0					
ANR	618568	Identifier	preproc		618436	0					
ANR	618569	Identifier	compare		618436	1					
ANR	618570	ArgumentList	charNum		618436	1					
ANR	618571	Argument	charNum		618436	0					
ANR	618572	Identifier	charNum		618436	0					
ANR	618573	Argument	1		618436	1					
ANR	618574	PrimaryExpression	1		618436	0					
ANR	618575	Argument	"""("""		618436	2					
ANR	618576	PrimaryExpression	"""("""		618436	0					
ANR	618577	PrimaryExpression	0		618436	1					
ANR	618578	CompoundStatement		15:3:508:508	618436	1					
ANR	618579	ExpressionStatement	++ charNum	1874:4:53824:53833	618436	0	True				
ANR	618580	UnaryExpression	++ charNum		618436	0					
ANR	618581	IncDec	++		618436	0					
ANR	618582	Identifier	charNum		618436	1					
ANR	618583	ExpressionStatement	"charNum = preproc . find_first_not_of ( "" \\t"" , charNum )"	1875:4:53839:53890	618436	1	True				
ANR	618584	AssignmentExpression	"charNum = preproc . find_first_not_of ( "" \\t"" , charNum )"		618436	0		=			
ANR	618585	Identifier	charNum		618436	0					
ANR	618586	CallExpression	"preproc . find_first_not_of ( "" \\t"" , charNum )"		618436	1					
ANR	618587	Callee	preproc . find_first_not_of		618436	0					
ANR	618588	MemberAccess	preproc . find_first_not_of		618436	0					
ANR	618589	Identifier	preproc		618436	0					
ANR	618590	Identifier	find_first_not_of		618436	1					
ANR	618591	ArgumentList	""" \\t"""		618436	1					
ANR	618592	Argument	""" \\t"""		618436	0					
ANR	618593	PrimaryExpression	""" \\t"""		618436	0					
ANR	618594	Argument	charNum		618436	1					
ANR	618595	Identifier	charNum		618436	0					
ANR	618596	IfStatement	"if ( preproc . compare ( charNum , 11 , ""__cplusplus"" ) == 0 )"		618436	2					
ANR	618597	Condition	"preproc . compare ( charNum , 11 , ""__cplusplus"" ) == 0"	1876:8:53900:53947	618436	0	True				
ANR	618598	EqualityExpression	"preproc . compare ( charNum , 11 , ""__cplusplus"" ) == 0"		618436	0		==			
ANR	618599	CallExpression	"preproc . compare ( charNum , 11 , ""__cplusplus"" )"		618436	0					
ANR	618600	Callee	preproc . compare		618436	0					
ANR	618601	MemberAccess	preproc . compare		618436	0					
ANR	618602	Identifier	preproc		618436	0					
ANR	618603	Identifier	compare		618436	1					
ANR	618604	ArgumentList	charNum		618436	1					
ANR	618605	Argument	charNum		618436	0					
ANR	618606	Identifier	charNum		618436	0					
ANR	618607	Argument	11		618436	1					
ANR	618608	PrimaryExpression	11		618436	0					
ANR	618609	Argument	"""__cplusplus"""		618436	2					
ANR	618610	PrimaryExpression	"""__cplusplus"""		618436	0					
ANR	618611	PrimaryExpression	0		618436	1					
ANR	618612	ReturnStatement	return true ;	1877:5:53955:53966	618436	1	True				
ANR	618613	Identifier	true		618436	0					
ANR	618614	ReturnStatement	return false ;	1881:1:53981:53993	618436	3	True				
ANR	618615	Identifier	false		618436	0					
ANR	618616	ReturnType	bool		618436	1					
ANR	618617	Identifier	ASBeautifier :: isPreprocessorConditionalCplusplus		618436	2					
ANR	618618	ParameterList	const string & line		618436	3					
ANR	618619	Parameter	const string & line	1858:54:53283:53300	618436	0	True				
ANR	618620	ParameterType	const string &		618436	0					
ANR	618621	Identifier	line		618436	1					
ANR	618622	CFGEntryNode	ENTRY		618436		True				
ANR	618623	CFGExitNode	EXIT		618436		True				
ANR	618624	Symbol	getNextWord		618436						
ANR	618625	Symbol	preproc . find_first_not_of		618436						
ANR	618626	Symbol	trim		618436						
ANR	618627	Symbol	line		618436						
ANR	618628	Symbol	line . substr		618436						
ANR	618629	Symbol	true		618436						
ANR	618630	Symbol	string :: npos		618436						
ANR	618631	Symbol	false		618436						
ANR	618632	Symbol	preproc . compare		618436						
ANR	618633	Symbol	charNum		618436						
ANR	618634	Symbol	preproc		618436						
ANR	618635	Function	ASBeautifier :: isInPreprocessorUnterminatedComment	1890:0:54195:54562							
ANR	618636	FunctionDef	ASBeautifier :: isInPreprocessorUnterminatedComment (const string & line)		618635	0					
ANR	618637	CompoundStatement		1891:0:54270:54562	618635	0					
ANR	618638	IfStatement	if ( ! isInPreprocessorComment )		618635	0					
ANR	618639	Condition	! isInPreprocessorComment	1892:5:54277:54300	618635	0	True				
ANR	618640	UnaryOperationExpression	! isInPreprocessorComment		618635	0					
ANR	618641	UnaryOperator	!		618635	0					
ANR	618642	Identifier	isInPreprocessorComment		618635	1					
ANR	618643	CompoundStatement		4:2:37:70	618635	1					
ANR	618644	IdentifierDeclStatement	"size_t startPos = line . find ( ""/*"" ) ;"	1894:2:54308:54341	618635	0	True				
ANR	618645	IdentifierDecl	"startPos = line . find ( ""/*"" )"		618635	0					
ANR	618646	IdentifierDeclType	size_t		618635	0					
ANR	618647	Identifier	startPos		618635	1					
ANR	618648	AssignmentExpression	"startPos = line . find ( ""/*"" )"		618635	2		=			
ANR	618649	Identifier	startPos		618635	0					
ANR	618650	CallExpression	"line . find ( ""/*"" )"		618635	1					
ANR	618651	Callee	line . find		618635	0					
ANR	618652	MemberAccess	line . find		618635	0					
ANR	618653	Identifier	line		618635	0					
ANR	618654	Identifier	find		618635	1					
ANR	618655	ArgumentList	"""/*"""		618635	1					
ANR	618656	Argument	"""/*"""		618635	0					
ANR	618657	PrimaryExpression	"""/*"""		618635	0					
ANR	618658	IfStatement	if ( startPos == string :: npos )		618635	1					
ANR	618659	Condition	startPos == string :: npos	1895:6:54349:54372	618635	0	True				
ANR	618660	EqualityExpression	startPos == string :: npos		618635	0		==			
ANR	618661	Identifier	startPos		618635	0					
ANR	618662	Identifier	string :: npos		618635	1					
ANR	618663	ReturnStatement	return false ;	1896:3:54378:54390	618635	1	True				
ANR	618664	Identifier	false		618635	0					
ANR	618665	IdentifierDeclStatement	"size_t endNum = line . find ( ""*/"" ) ;"	1898:1:54396:54427	618635	1	True				
ANR	618666	IdentifierDecl	"endNum = line . find ( ""*/"" )"		618635	0					
ANR	618667	IdentifierDeclType	size_t		618635	0					
ANR	618668	Identifier	endNum		618635	1					
ANR	618669	AssignmentExpression	"endNum = line . find ( ""*/"" )"		618635	2		=			
ANR	618670	Identifier	endNum		618635	0					
ANR	618671	CallExpression	"line . find ( ""*/"" )"		618635	1					
ANR	618672	Callee	line . find		618635	0					
ANR	618673	MemberAccess	line . find		618635	0					
ANR	618674	Identifier	line		618635	0					
ANR	618675	Identifier	find		618635	1					
ANR	618676	ArgumentList	"""*/"""		618635	1					
ANR	618677	Argument	"""*/"""		618635	0					
ANR	618678	PrimaryExpression	"""*/"""		618635	0					
ANR	618679	IfStatement	if ( endNum != string :: npos )		618635	2					
ANR	618680	Condition	endNum != string :: npos	1899:5:54434:54455	618635	0	True				
ANR	618681	EqualityExpression	endNum != string :: npos		618635	0		!=			
ANR	618682	Identifier	endNum		618635	0					
ANR	618683	Identifier	string :: npos		618635	1					
ANR	618684	CompoundStatement		10:1:188:188	618635	1					
ANR	618685	ExpressionStatement	isInPreprocessorComment = false	1901:2:54463:54494	618635	0	True				
ANR	618686	AssignmentExpression	isInPreprocessorComment = false		618635	0		=			
ANR	618687	Identifier	isInPreprocessorComment		618635	0					
ANR	618688	Identifier	false		618635	1					
ANR	618689	ReturnStatement	return false ;	1902:2:54498:54510	618635	1	True				
ANR	618690	Identifier	false		618635	0					
ANR	618691	ExpressionStatement	isInPreprocessorComment = true	1904:1:54516:54546	618635	3	True				
ANR	618692	AssignmentExpression	isInPreprocessorComment = true		618635	0		=			
ANR	618693	Identifier	isInPreprocessorComment		618635	0					
ANR	618694	Identifier	true		618635	1					
ANR	618695	ReturnStatement	return true ;	1905:1:54549:54560	618635	4	True				
ANR	618696	Identifier	true		618635	0					
ANR	618697	ReturnType	bool		618635	1					
ANR	618698	Identifier	ASBeautifier :: isInPreprocessorUnterminatedComment		618635	2					
ANR	618699	ParameterList	const string & line		618635	3					
ANR	618700	Parameter	const string & line	1890:55:54250:54267	618635	0	True				
ANR	618701	ParameterType	const string &		618635	0					
ANR	618702	Identifier	line		618635	1					
ANR	618703	CFGEntryNode	ENTRY		618635		True				
ANR	618704	CFGExitNode	EXIT		618635		True				
ANR	618705	Symbol	line . find		618635						
ANR	618706	Symbol	line		618635						
ANR	618707	Symbol	isInPreprocessorComment		618635						
ANR	618708	Symbol	string :: npos		618635						
ANR	618709	Symbol	false		618635						
ANR	618710	Symbol	true		618635						
ANR	618711	Symbol	endNum		618635						
ANR	618712	Symbol	startPos		618635						
ANR	618713	Function	ASBeautifier :: popLastContinuationIndent	1908:0:54565:54951							
ANR	618714	FunctionDef	ASBeautifier :: popLastContinuationIndent ()		618713	0					
ANR	618715	CompoundStatement		1909:0:54612:54951	618713	0					
ANR	618716	ExpressionStatement	assert ( ! continuationIndentStackSizeStack -> empty ( ) )	1910:1:54615:54665	618713	0	True				
ANR	618717	CallExpression	assert ( ! continuationIndentStackSizeStack -> empty ( ) )		618713	0					
ANR	618718	Callee	assert		618713	0					
ANR	618719	Identifier	assert		618713	0					
ANR	618720	ArgumentList	! continuationIndentStackSizeStack -> empty ( )		618713	1					
ANR	618721	Argument	! continuationIndentStackSizeStack -> empty ( )		618713	0					
ANR	618722	UnaryOperationExpression	! continuationIndentStackSizeStack -> empty ( )		618713	0					
ANR	618723	UnaryOperator	!		618713	0					
ANR	618724	CallExpression	continuationIndentStackSizeStack -> empty ( )		618713	1					
ANR	618725	Callee	continuationIndentStackSizeStack -> empty		618713	0					
ANR	618726	PtrMemberAccess	continuationIndentStackSizeStack -> empty		618713	0					
ANR	618727	Identifier	continuationIndentStackSizeStack		618713	0					
ANR	618728	Identifier	empty		618713	1					
ANR	618729	ArgumentList			618713	1					
ANR	618730	IdentifierDeclStatement	int previousIndentStackSize = continuationIndentStackSizeStack -> back ( ) ;	1911:1:54668:54738	618713	1	True				
ANR	618731	IdentifierDecl	previousIndentStackSize = continuationIndentStackSizeStack -> back ( )		618713	0					
ANR	618732	IdentifierDeclType	int		618713	0					
ANR	618733	Identifier	previousIndentStackSize		618713	1					
ANR	618734	AssignmentExpression	previousIndentStackSize = continuationIndentStackSizeStack -> back ( )		618713	2		=			
ANR	618735	Identifier	previousIndentStackSize		618713	0					
ANR	618736	CallExpression	continuationIndentStackSizeStack -> back ( )		618713	1					
ANR	618737	Callee	continuationIndentStackSizeStack -> back		618713	0					
ANR	618738	PtrMemberAccess	continuationIndentStackSizeStack -> back		618713	0					
ANR	618739	Identifier	continuationIndentStackSizeStack		618713	0					
ANR	618740	Identifier	back		618713	1					
ANR	618741	ArgumentList			618713	1					
ANR	618742	IfStatement	if ( continuationIndentStackSizeStack -> size ( ) > 1 )		618713	2					
ANR	618743	Condition	continuationIndentStackSizeStack -> size ( ) > 1	1912:5:54745:54788	618713	0	True				
ANR	618744	RelationalExpression	continuationIndentStackSizeStack -> size ( ) > 1		618713	0		>			
ANR	618745	CallExpression	continuationIndentStackSizeStack -> size ( )		618713	0					
ANR	618746	Callee	continuationIndentStackSizeStack -> size		618713	0					
ANR	618747	PtrMemberAccess	continuationIndentStackSizeStack -> size		618713	0					
ANR	618748	Identifier	continuationIndentStackSizeStack		618713	0					
ANR	618749	Identifier	size		618713	1					
ANR	618750	ArgumentList			618713	1					
ANR	618751	PrimaryExpression	1		618713	1					
ANR	618752	ExpressionStatement	continuationIndentStackSizeStack -> pop_back ( )	1913:2:54793:54837	618713	1	True				
ANR	618753	CallExpression	continuationIndentStackSizeStack -> pop_back ( )		618713	0					
ANR	618754	Callee	continuationIndentStackSizeStack -> pop_back		618713	0					
ANR	618755	PtrMemberAccess	continuationIndentStackSizeStack -> pop_back		618713	0					
ANR	618756	Identifier	continuationIndentStackSizeStack		618713	0					
ANR	618757	Identifier	pop_back		618713	1					
ANR	618758	ArgumentList			618713	1					
ANR	618759	WhileStatement	while ( previousIndentStackSize < ( int ) continuationIndentStack -> size ( ) )		618713	3					
ANR	618760	Condition	previousIndentStackSize < ( int ) continuationIndentStack -> size ( )	1914:8:54847:54909	618713	0	True				
ANR	618761	RelationalExpression	previousIndentStackSize < ( int ) continuationIndentStack -> size ( )		618713	0		<			
ANR	618762	Identifier	previousIndentStackSize		618713	0					
ANR	618763	CastExpression	( int ) continuationIndentStack -> size ( )		618713	1					
ANR	618764	CastTarget	int		618713	0					
ANR	618765	CallExpression	continuationIndentStack -> size ( )		618713	1					
ANR	618766	Callee	continuationIndentStack -> size		618713	0					
ANR	618767	PtrMemberAccess	continuationIndentStack -> size		618713	0					
ANR	618768	Identifier	continuationIndentStack		618713	0					
ANR	618769	Identifier	size		618713	1					
ANR	618770	ArgumentList			618713	1					
ANR	618771	ExpressionStatement	continuationIndentStack -> pop_back ( )	1915:2:54914:54949	618713	1	True				
ANR	618772	CallExpression	continuationIndentStack -> pop_back ( )		618713	0					
ANR	618773	Callee	continuationIndentStack -> pop_back		618713	0					
ANR	618774	PtrMemberAccess	continuationIndentStack -> pop_back		618713	0					
ANR	618775	Identifier	continuationIndentStack		618713	0					
ANR	618776	Identifier	pop_back		618713	1					
ANR	618777	ArgumentList			618713	1					
ANR	618778	ReturnType	void		618713	1					
ANR	618779	Identifier	ASBeautifier :: popLastContinuationIndent		618713	2					
ANR	618780	ParameterList			618713	3					
ANR	618781	CFGEntryNode	ENTRY		618713		True				
ANR	618782	CFGExitNode	EXIT		618713		True				
ANR	618783	Symbol	continuationIndentStack -> size		618713						
ANR	618784	Symbol	continuationIndentStackSizeStack		618713						
ANR	618785	Symbol	continuationIndentStackSizeStack -> empty		618713						
ANR	618786	Symbol	continuationIndentStackSizeStack -> back		618713						
ANR	618787	Symbol	* continuationIndentStack		618713						
ANR	618788	Symbol	previousIndentStackSize		618713						
ANR	618789	Symbol	continuationIndentStackSizeStack -> size		618713						
ANR	618790	Symbol	* continuationIndentStackSizeStack		618713						
ANR	618791	Symbol	continuationIndentStack		618713						
ANR	618792	Function	ASBeautifier :: getBeautifierFileType	1919:0:54974:55051							
ANR	618793	FunctionDef	ASBeautifier :: getBeautifierFileType ()		618792	0					
ANR	618794	CompoundStatement		1920:0:55022:55051	618792	0					
ANR	618795	ReturnStatement	return beautifierFileType ;	1920:1:55024:55049	618792	0	True				
ANR	618796	Identifier	beautifierFileType		618792	0					
ANR	618797	ReturnType	int		618792	1					
ANR	618798	Identifier	ASBeautifier :: getBeautifierFileType		618792	2					
ANR	618799	ParameterList			618792	3					
ANR	618800	CFGEntryNode	ENTRY		618792		True				
ANR	618801	CFGExitNode	EXIT		618792		True				
ANR	618802	Symbol	beautifierFileType		618792						
ANR	618803	Function	ASBeautifier :: processPreprocessor	1925:0:55131:58319							
ANR	618804	FunctionDef	"ASBeautifier :: processPreprocessor (const string & preproc , const string & line)"		618803	0					
ANR	618805	CompoundStatement		1926:0:55213:58319	618803	0					
ANR	618806	IfStatement	"if ( shouldIndentPreprocDefine && preproc == ""define"" && line [ line . length ( ) - 1 ] == '\\\\' )"		618803	0					
ANR	618807	Condition	"shouldIndentPreprocDefine && preproc == ""define"" && line [ line . length ( ) - 1 ] == '\\\\'"	1934:5:55712:55794	618803	0	True				
ANR	618808	AndExpression	"shouldIndentPreprocDefine && preproc == ""define"" && line [ line . length ( ) - 1 ] == '\\\\'"		618803	0		&&			
ANR	618809	Identifier	shouldIndentPreprocDefine		618803	0					
ANR	618810	AndExpression	"preproc == ""define"" && line [ line . length ( ) - 1 ] == '\\\\'"		618803	1		&&			
ANR	618811	EqualityExpression	"preproc == ""define"""		618803	0		==			
ANR	618812	Identifier	preproc		618803	0					
ANR	618813	PrimaryExpression	"""define"""		618803	1					
ANR	618814	EqualityExpression	line [ line . length ( ) - 1 ] == '\\\\'		618803	1		==			
ANR	618815	ArrayIndexing	line [ line . length ( ) - 1 ]		618803	0					
ANR	618816	Identifier	line		618803	0					
ANR	618817	AdditiveExpression	line . length ( ) - 1		618803	1		-			
ANR	618818	CallExpression	line . length ( )		618803	0					
ANR	618819	Callee	line . length		618803	0					
ANR	618820	MemberAccess	line . length		618803	0					
ANR	618821	Identifier	line		618803	0					
ANR	618822	Identifier	length		618803	1					
ANR	618823	ArgumentList			618803	1					
ANR	618824	PrimaryExpression	1		618803	1					
ANR	618825	PrimaryExpression	'\\\\'		618803	1					
ANR	618826	CompoundStatement		10:1:584:584	618803	1					
ANR	618827	IfStatement	if ( ! isInDefineDefinition )		618803	0					
ANR	618828	Condition	! isInDefineDefinition	1936:6:55806:55826	618803	0	True				
ANR	618829	UnaryOperationExpression	! isInDefineDefinition		618803	0					
ANR	618830	UnaryOperator	!		618803	0					
ANR	618831	Identifier	isInDefineDefinition		618803	1					
ANR	618832	CompoundStatement		18:3:813:869	618803	1					
ANR	618833	ExpressionStatement	isInDefineDefinition = true	1939:3:55874:55901	618803	0	True				
ANR	618834	AssignmentExpression	isInDefineDefinition = true		618803	0		=			
ANR	618835	Identifier	isInDefineDefinition		618803	0					
ANR	618836	Identifier	true		618803	1					
ANR	618837	IdentifierDeclStatement	ASBeautifier * defineBeautifier = new ASBeautifier ( * this ) ;	1943:3:56027:56083	618803	1	True				
ANR	618838	IdentifierDecl	* defineBeautifier = new ASBeautifier ( * this )		618803	0					
ANR	618839	IdentifierDeclType	ASBeautifier *		618803	0					
ANR	618840	Identifier	defineBeautifier		618803	1					
ANR	618841	AssignmentExpression	* defineBeautifier = new ASBeautifier ( * this )		618803	2		=			
ANR	618842	Identifier	defineBeautifier		618803	0					
ANR	618843	UnaryOperationExpression	* this		618803	1					
ANR	618844	UnaryOperator	*		618803	0					
ANR	618845	Identifier	this		618803	1					
ANR	618846	ExpressionStatement	activeBeautifierStack -> emplace_back ( defineBeautifier )	1944:3:56088:56141	618803	2	True				
ANR	618847	CallExpression	activeBeautifierStack -> emplace_back ( defineBeautifier )		618803	0					
ANR	618848	Callee	activeBeautifierStack -> emplace_back		618803	0					
ANR	618849	PtrMemberAccess	activeBeautifierStack -> emplace_back		618803	0					
ANR	618850	Identifier	activeBeautifierStack		618803	0					
ANR	618851	Identifier	emplace_back		618803	1					
ANR	618852	ArgumentList	defineBeautifier		618803	1					
ANR	618853	Argument	defineBeautifier		618803	0					
ANR	618854	Identifier	defineBeautifier		618803	0					
ANR	618855	ElseStatement	else		618803	0					
ANR	618856	CompoundStatement		22:2:942:942	618803	0					
ANR	618857	ExpressionStatement	isInDefine = true	1949:3:56240:56257	618803	0	True				
ANR	618858	AssignmentExpression	isInDefine = true		618803	0		=			
ANR	618859	Identifier	isInDefine		618803	0					
ANR	618860	Identifier	true		618803	1					
ANR	618861	ElseStatement	else		618803	0					
ANR	618862	IfStatement	"if ( preproc . length ( ) >= 2 && preproc . substr ( 0 , 2 ) == ""if"" )"		618803	0					
ANR	618863	Condition	"preproc . length ( ) >= 2 && preproc . substr ( 0 , 2 ) == ""if"""	1952:10:56276:56328	618803	0	True				
ANR	618864	AndExpression	"preproc . length ( ) >= 2 && preproc . substr ( 0 , 2 ) == ""if"""		618803	0		&&			
ANR	618865	RelationalExpression	preproc . length ( ) >= 2		618803	0		>=			
ANR	618866	CallExpression	preproc . length ( )		618803	0					
ANR	618867	Callee	preproc . length		618803	0					
ANR	618868	MemberAccess	preproc . length		618803	0					
ANR	618869	Identifier	preproc		618803	0					
ANR	618870	Identifier	length		618803	1					
ANR	618871	ArgumentList			618803	1					
ANR	618872	PrimaryExpression	2		618803	1					
ANR	618873	EqualityExpression	"preproc . substr ( 0 , 2 ) == ""if"""		618803	1		==			
ANR	618874	CallExpression	"preproc . substr ( 0 , 2 )"		618803	0					
ANR	618875	Callee	preproc . substr		618803	0					
ANR	618876	MemberAccess	preproc . substr		618803	0					
ANR	618877	Identifier	preproc		618803	0					
ANR	618878	Identifier	substr		618803	1					
ANR	618879	ArgumentList	0		618803	1					
ANR	618880	Argument	0		618803	0					
ANR	618881	PrimaryExpression	0		618803	0					
ANR	618882	Argument	2		618803	1					
ANR	618883	PrimaryExpression	2		618803	0					
ANR	618884	PrimaryExpression	"""if"""		618803	1					
ANR	618885	CompoundStatement		28:1:1118:1118	618803	1					
ANR	618886	IfStatement	if ( isPreprocessorConditionalCplusplus ( line ) && ! g_preprocessorCppExternCBrace )		618803	0					
ANR	618887	Condition	isPreprocessorConditionalCplusplus ( line ) && ! g_preprocessorCppExternCBrace	1954:6:56340:56413	618803	0	True				
ANR	618888	AndExpression	isPreprocessorConditionalCplusplus ( line ) && ! g_preprocessorCppExternCBrace		618803	0		&&			
ANR	618889	CallExpression	isPreprocessorConditionalCplusplus ( line )		618803	0					
ANR	618890	Callee	isPreprocessorConditionalCplusplus		618803	0					
ANR	618891	Identifier	isPreprocessorConditionalCplusplus		618803	0					
ANR	618892	ArgumentList	line		618803	1					
ANR	618893	Argument	line		618803	0					
ANR	618894	Identifier	line		618803	0					
ANR	618895	UnaryOperationExpression	! g_preprocessorCppExternCBrace		618803	1					
ANR	618896	UnaryOperator	!		618803	0					
ANR	618897	Identifier	g_preprocessorCppExternCBrace		618803	1					
ANR	618898	ExpressionStatement	g_preprocessorCppExternCBrace = 1	1955:3:56419:56452	618803	1	True				
ANR	618899	AssignmentExpression	g_preprocessorCppExternCBrace = 1		618803	0		=			
ANR	618900	Identifier	g_preprocessorCppExternCBrace		618803	0					
ANR	618901	PrimaryExpression	1		618803	1					
ANR	618902	ExpressionStatement	waitingBeautifierStackLengthStack -> push_back ( waitingBeautifierStack -> size ( ) )	1957:2:56498:56574	618803	1	True				
ANR	618903	CallExpression	waitingBeautifierStackLengthStack -> push_back ( waitingBeautifierStack -> size ( ) )		618803	0					
ANR	618904	Callee	waitingBeautifierStackLengthStack -> push_back		618803	0					
ANR	618905	PtrMemberAccess	waitingBeautifierStackLengthStack -> push_back		618803	0					
ANR	618906	Identifier	waitingBeautifierStackLengthStack		618803	0					
ANR	618907	Identifier	push_back		618803	1					
ANR	618908	ArgumentList	waitingBeautifierStack -> size ( )		618803	1					
ANR	618909	Argument	waitingBeautifierStack -> size ( )		618803	0					
ANR	618910	CallExpression	waitingBeautifierStack -> size ( )		618803	0					
ANR	618911	Callee	waitingBeautifierStack -> size		618803	0					
ANR	618912	PtrMemberAccess	waitingBeautifierStack -> size		618803	0					
ANR	618913	Identifier	waitingBeautifierStack		618803	0					
ANR	618914	Identifier	size		618803	1					
ANR	618915	ArgumentList			618803	1					
ANR	618916	ExpressionStatement	activeBeautifierStackLengthStack -> push_back ( activeBeautifierStack -> size ( ) )	1958:2:56578:56652	618803	2	True				
ANR	618917	CallExpression	activeBeautifierStackLengthStack -> push_back ( activeBeautifierStack -> size ( ) )		618803	0					
ANR	618918	Callee	activeBeautifierStackLengthStack -> push_back		618803	0					
ANR	618919	PtrMemberAccess	activeBeautifierStackLengthStack -> push_back		618803	0					
ANR	618920	Identifier	activeBeautifierStackLengthStack		618803	0					
ANR	618921	Identifier	push_back		618803	1					
ANR	618922	ArgumentList	activeBeautifierStack -> size ( )		618803	1					
ANR	618923	Argument	activeBeautifierStack -> size ( )		618803	0					
ANR	618924	CallExpression	activeBeautifierStack -> size ( )		618803	0					
ANR	618925	Callee	activeBeautifierStack -> size		618803	0					
ANR	618926	PtrMemberAccess	activeBeautifierStack -> size		618803	0					
ANR	618927	Identifier	activeBeautifierStack		618803	0					
ANR	618928	Identifier	size		618803	1					
ANR	618929	ArgumentList			618803	1					
ANR	618930	IfStatement	if ( activeBeautifierStackLengthStack -> back ( ) == 0 )		618803	3					
ANR	618931	Condition	activeBeautifierStackLengthStack -> back ( ) == 0	1959:6:56660:56704	618803	0	True				
ANR	618932	EqualityExpression	activeBeautifierStackLengthStack -> back ( ) == 0		618803	0		==			
ANR	618933	CallExpression	activeBeautifierStackLengthStack -> back ( )		618803	0					
ANR	618934	Callee	activeBeautifierStackLengthStack -> back		618803	0					
ANR	618935	PtrMemberAccess	activeBeautifierStackLengthStack -> back		618803	0					
ANR	618936	Identifier	activeBeautifierStackLengthStack		618803	0					
ANR	618937	Identifier	back		618803	1					
ANR	618938	ArgumentList			618803	1					
ANR	618939	PrimaryExpression	0		618803	1					
ANR	618940	ExpressionStatement	waitingBeautifierStack -> emplace_back ( new ASBeautifier ( * this ) )	1960:3:56710:56771	618803	1	True				
ANR	618941	CallExpression	waitingBeautifierStack -> emplace_back ( new ASBeautifier ( * this ) )		618803	0					
ANR	618942	Callee	waitingBeautifierStack -> emplace_back		618803	0					
ANR	618943	PtrMemberAccess	waitingBeautifierStack -> emplace_back		618803	0					
ANR	618944	Identifier	waitingBeautifierStack		618803	0					
ANR	618945	Identifier	emplace_back		618803	1					
ANR	618946	ArgumentList	* this		618803	1					
ANR	618947	Argument	* this		618803	0					
ANR	618948	UnaryOperationExpression	* this		618803	0					
ANR	618949	UnaryOperator	*		618803	0					
ANR	618950	Identifier	this		618803	1					
ANR	618951	ElseStatement	else		618803	0					
ANR	618952	ExpressionStatement	waitingBeautifierStack -> emplace_back ( new ASBeautifier ( * activeBeautifierStack -> back ( ) ) )	1962:3:56783:56869	618803	0	True				
ANR	618953	CallExpression	waitingBeautifierStack -> emplace_back ( new ASBeautifier ( * activeBeautifierStack -> back ( ) ) )		618803	0					
ANR	618954	Callee	waitingBeautifierStack -> emplace_back		618803	0					
ANR	618955	PtrMemberAccess	waitingBeautifierStack -> emplace_back		618803	0					
ANR	618956	Identifier	waitingBeautifierStack		618803	0					
ANR	618957	Identifier	emplace_back		618803	1					
ANR	618958	ArgumentList	* activeBeautifierStack -> back ( )		618803	1					
ANR	618959	Argument	* activeBeautifierStack -> back ( )		618803	0					
ANR	618960	UnaryOperationExpression	* activeBeautifierStack -> back ( )		618803	0					
ANR	618961	UnaryOperator	*		618803	0					
ANR	618962	CallExpression	activeBeautifierStack -> back ( )		618803	1					
ANR	618963	Callee	activeBeautifierStack -> back		618803	0					
ANR	618964	PtrMemberAccess	activeBeautifierStack -> back		618803	0					
ANR	618965	Identifier	activeBeautifierStack		618803	0					
ANR	618966	Identifier	back		618803	1					
ANR	618967	ArgumentList			618803	1					
ANR	618968	ElseStatement	else		618803	0					
ANR	618969	IfStatement	"if ( preproc == ""else"" )"		618803	0					
ANR	618970	Condition	"preproc == ""else"""	1964:10:56884:56900	618803	0	True				
ANR	618971	EqualityExpression	"preproc == ""else"""		618803	0		==			
ANR	618972	Identifier	preproc		618803	0					
ANR	618973	PrimaryExpression	"""else"""		618803	1					
ANR	618974	CompoundStatement		40:1:1690:1690	618803	1					
ANR	618975	IfStatement	if ( ( waitingBeautifierStack != nullptr ) && ! waitingBeautifierStack -> empty ( ) )		618803	0					
ANR	618976	Condition	( waitingBeautifierStack != nullptr ) && ! waitingBeautifierStack -> empty ( )	1966:6:56912:56982	618803	0	True				
ANR	618977	AndExpression	( waitingBeautifierStack != nullptr ) && ! waitingBeautifierStack -> empty ( )		618803	0		&&			
ANR	618978	EqualityExpression	waitingBeautifierStack != nullptr		618803	0		!=			
ANR	618979	Identifier	waitingBeautifierStack		618803	0					
ANR	618980	Identifier	nullptr		618803	1					
ANR	618981	UnaryOperationExpression	! waitingBeautifierStack -> empty ( )		618803	1					
ANR	618982	UnaryOperator	!		618803	0					
ANR	618983	CallExpression	waitingBeautifierStack -> empty ( )		618803	1					
ANR	618984	Callee	waitingBeautifierStack -> empty		618803	0					
ANR	618985	PtrMemberAccess	waitingBeautifierStack -> empty		618803	0					
ANR	618986	Identifier	waitingBeautifierStack		618803	0					
ANR	618987	Identifier	empty		618803	1					
ANR	618988	ArgumentList			618803	1					
ANR	618989	CompoundStatement		42:2:1773:1773	618803	1					
ANR	618990	ExpressionStatement	activeBeautifierStack -> emplace_back ( waitingBeautifierStack -> back ( ) )	1969:3:57047:57114	618803	0	True				
ANR	618991	CallExpression	activeBeautifierStack -> emplace_back ( waitingBeautifierStack -> back ( ) )		618803	0					
ANR	618992	Callee	activeBeautifierStack -> emplace_back		618803	0					
ANR	618993	PtrMemberAccess	activeBeautifierStack -> emplace_back		618803	0					
ANR	618994	Identifier	activeBeautifierStack		618803	0					
ANR	618995	Identifier	emplace_back		618803	1					
ANR	618996	ArgumentList	waitingBeautifierStack -> back ( )		618803	1					
ANR	618997	Argument	waitingBeautifierStack -> back ( )		618803	0					
ANR	618998	CallExpression	waitingBeautifierStack -> back ( )		618803	0					
ANR	618999	Callee	waitingBeautifierStack -> back		618803	0					
ANR	619000	PtrMemberAccess	waitingBeautifierStack -> back		618803	0					
ANR	619001	Identifier	waitingBeautifierStack		618803	0					
ANR	619002	Identifier	back		618803	1					
ANR	619003	ArgumentList			618803	1					
ANR	619004	ExpressionStatement	waitingBeautifierStack -> pop_back ( )	1970:3:57119:57153	618803	1	True				
ANR	619005	CallExpression	waitingBeautifierStack -> pop_back ( )		618803	0					
ANR	619006	Callee	waitingBeautifierStack -> pop_back		618803	0					
ANR	619007	PtrMemberAccess	waitingBeautifierStack -> pop_back		618803	0					
ANR	619008	Identifier	waitingBeautifierStack		618803	0					
ANR	619009	Identifier	pop_back		618803	1					
ANR	619010	ArgumentList			618803	1					
ANR	619011	ElseStatement	else		618803	0					
ANR	619012	IfStatement	"if ( preproc == ""elif"" )"		618803	0					
ANR	619013	Condition	"preproc == ""elif"""	1973:10:57172:57188	618803	0	True				
ANR	619014	EqualityExpression	"preproc == ""elif"""		618803	0		==			
ANR	619015	Identifier	preproc		618803	0					
ANR	619016	PrimaryExpression	"""elif"""		618803	1					
ANR	619017	CompoundStatement		49:1:1978:1978	618803	1					
ANR	619018	IfStatement	if ( ( waitingBeautifierStack != nullptr ) && ! waitingBeautifierStack -> empty ( ) )		618803	0					
ANR	619019	Condition	( waitingBeautifierStack != nullptr ) && ! waitingBeautifierStack -> empty ( )	1975:6:57200:57270	618803	0	True				
ANR	619020	AndExpression	( waitingBeautifierStack != nullptr ) && ! waitingBeautifierStack -> empty ( )		618803	0		&&			
ANR	619021	EqualityExpression	waitingBeautifierStack != nullptr		618803	0		!=			
ANR	619022	Identifier	waitingBeautifierStack		618803	0					
ANR	619023	Identifier	nullptr		618803	1					
ANR	619024	UnaryOperationExpression	! waitingBeautifierStack -> empty ( )		618803	1					
ANR	619025	UnaryOperator	!		618803	0					
ANR	619026	CallExpression	waitingBeautifierStack -> empty ( )		618803	1					
ANR	619027	Callee	waitingBeautifierStack -> empty		618803	0					
ANR	619028	PtrMemberAccess	waitingBeautifierStack -> empty		618803	0					
ANR	619029	Identifier	waitingBeautifierStack		618803	0					
ANR	619030	Identifier	empty		618803	1					
ANR	619031	ArgumentList			618803	1					
ANR	619032	CompoundStatement		51:2:2061:2061	618803	1					
ANR	619033	ExpressionStatement	activeBeautifierStack -> emplace_back ( new ASBeautifier ( * ( waitingBeautifierStack -> back ( ) ) ) )	1978:3:57375:57463	618803	0	True				
ANR	619034	CallExpression	activeBeautifierStack -> emplace_back ( new ASBeautifier ( * ( waitingBeautifierStack -> back ( ) ) ) )		618803	0					
ANR	619035	Callee	activeBeautifierStack -> emplace_back		618803	0					
ANR	619036	PtrMemberAccess	activeBeautifierStack -> emplace_back		618803	0					
ANR	619037	Identifier	activeBeautifierStack		618803	0					
ANR	619038	Identifier	emplace_back		618803	1					
ANR	619039	ArgumentList	* ( waitingBeautifierStack -> back ( ) )		618803	1					
ANR	619040	Argument	* ( waitingBeautifierStack -> back ( ) )		618803	0					
ANR	619041	UnaryOperationExpression	* ( waitingBeautifierStack -> back ( ) )		618803	0					
ANR	619042	UnaryOperator	*		618803	0					
ANR	619043	CallExpression	waitingBeautifierStack -> back ( )		618803	1					
ANR	619044	Callee	waitingBeautifierStack -> back		618803	0					
ANR	619045	PtrMemberAccess	waitingBeautifierStack -> back		618803	0					
ANR	619046	Identifier	waitingBeautifierStack		618803	0					
ANR	619047	Identifier	back		618803	1					
ANR	619048	ArgumentList			618803	1					
ANR	619049	ElseStatement	else		618803	0					
ANR	619050	IfStatement	"if ( preproc == ""endif"" )"		618803	0					
ANR	619051	Condition	"preproc == ""endif"""	1981:10:57482:57499	618803	0	True				
ANR	619052	EqualityExpression	"preproc == ""endif"""		618803	0		==			
ANR	619053	Identifier	preproc		618803	0					
ANR	619054	PrimaryExpression	"""endif"""		618803	1					
ANR	619055	CompoundStatement		59:2:2316:2350	618803	1					
ANR	619056	IdentifierDeclStatement	int stackLength = 0 ;	1983:2:57507:57526	618803	0	True				
ANR	619057	IdentifierDecl	stackLength = 0		618803	0					
ANR	619058	IdentifierDeclType	int		618803	0					
ANR	619059	Identifier	stackLength		618803	1					
ANR	619060	AssignmentExpression	stackLength = 0		618803	2		=			
ANR	619061	Identifier	stackLength		618803	0					
ANR	619062	PrimaryExpression	0		618803	1					
ANR	619063	IdentifierDeclStatement	ASBeautifier * beautifier = nullptr ;	1984:2:57530:57564	618803	1	True				
ANR	619064	IdentifierDecl	* beautifier = nullptr		618803	0					
ANR	619065	IdentifierDeclType	ASBeautifier *		618803	0					
ANR	619066	Identifier	beautifier		618803	1					
ANR	619067	AssignmentExpression	* beautifier = nullptr		618803	2		=			
ANR	619068	Identifier	nullptr		618803	0					
ANR	619069	Identifier	nullptr		618803	1					
ANR	619070	IfStatement	if ( waitingBeautifierStackLengthStack != nullptr && ! waitingBeautifierStackLengthStack -> empty ( ) )		618803	2					
ANR	619071	Condition	waitingBeautifierStackLengthStack != nullptr && ! waitingBeautifierStackLengthStack -> empty ( )	1986:6:57573:57663	618803	0	True				
ANR	619072	AndExpression	waitingBeautifierStackLengthStack != nullptr && ! waitingBeautifierStackLengthStack -> empty ( )		618803	0		&&			
ANR	619073	EqualityExpression	waitingBeautifierStackLengthStack != nullptr		618803	0		!=			
ANR	619074	Identifier	waitingBeautifierStackLengthStack		618803	0					
ANR	619075	Identifier	nullptr		618803	1					
ANR	619076	UnaryOperationExpression	! waitingBeautifierStackLengthStack -> empty ( )		618803	1					
ANR	619077	UnaryOperator	!		618803	0					
ANR	619078	CallExpression	waitingBeautifierStackLengthStack -> empty ( )		618803	1					
ANR	619079	Callee	waitingBeautifierStackLengthStack -> empty		618803	0					
ANR	619080	PtrMemberAccess	waitingBeautifierStackLengthStack -> empty		618803	0					
ANR	619081	Identifier	waitingBeautifierStackLengthStack		618803	0					
ANR	619082	Identifier	empty		618803	1					
ANR	619083	ArgumentList			618803	1					
ANR	619084	CompoundStatement		62:2:2454:2454	618803	1					
ANR	619085	ExpressionStatement	stackLength = waitingBeautifierStackLengthStack -> back ( )	1988:3:57673:57728	618803	0	True				
ANR	619086	AssignmentExpression	stackLength = waitingBeautifierStackLengthStack -> back ( )		618803	0		=			
ANR	619087	Identifier	stackLength		618803	0					
ANR	619088	CallExpression	waitingBeautifierStackLengthStack -> back ( )		618803	1					
ANR	619089	Callee	waitingBeautifierStackLengthStack -> back		618803	0					
ANR	619090	PtrMemberAccess	waitingBeautifierStackLengthStack -> back		618803	0					
ANR	619091	Identifier	waitingBeautifierStackLengthStack		618803	0					
ANR	619092	Identifier	back		618803	1					
ANR	619093	ArgumentList			618803	1					
ANR	619094	ExpressionStatement	waitingBeautifierStackLengthStack -> pop_back ( )	1989:3:57733:57778	618803	1	True				
ANR	619095	CallExpression	waitingBeautifierStackLengthStack -> pop_back ( )		618803	0					
ANR	619096	Callee	waitingBeautifierStackLengthStack -> pop_back		618803	0					
ANR	619097	PtrMemberAccess	waitingBeautifierStackLengthStack -> pop_back		618803	0					
ANR	619098	Identifier	waitingBeautifierStackLengthStack		618803	0					
ANR	619099	Identifier	pop_back		618803	1					
ANR	619100	ArgumentList			618803	1					
ANR	619101	WhileStatement	while ( ( int ) waitingBeautifierStack -> size ( ) > stackLength )		618803	2					
ANR	619102	Condition	( int ) waitingBeautifierStack -> size ( ) > stackLength	1990:10:57790:57839	618803	0	True				
ANR	619103	RelationalExpression	( int ) waitingBeautifierStack -> size ( ) > stackLength		618803	0		>			
ANR	619104	CastExpression	( int ) waitingBeautifierStack -> size ( )		618803	0					
ANR	619105	CastTarget	int		618803	0					
ANR	619106	CallExpression	waitingBeautifierStack -> size ( )		618803	1					
ANR	619107	Callee	waitingBeautifierStack -> size		618803	0					
ANR	619108	PtrMemberAccess	waitingBeautifierStack -> size		618803	0					
ANR	619109	Identifier	waitingBeautifierStack		618803	0					
ANR	619110	Identifier	size		618803	1					
ANR	619111	ArgumentList			618803	1					
ANR	619112	Identifier	stackLength		618803	1					
ANR	619113	CompoundStatement		66:3:2631:2631	618803	1					
ANR	619114	ExpressionStatement	beautifier = waitingBeautifierStack -> back ( )	1992:4:57851:57894	618803	0	True				
ANR	619115	AssignmentExpression	beautifier = waitingBeautifierStack -> back ( )		618803	0		=			
ANR	619116	Identifier	beautifier		618803	0					
ANR	619117	CallExpression	waitingBeautifierStack -> back ( )		618803	1					
ANR	619118	Callee	waitingBeautifierStack -> back		618803	0					
ANR	619119	PtrMemberAccess	waitingBeautifierStack -> back		618803	0					
ANR	619120	Identifier	waitingBeautifierStack		618803	0					
ANR	619121	Identifier	back		618803	1					
ANR	619122	ArgumentList			618803	1					
ANR	619123	ExpressionStatement	waitingBeautifierStack -> pop_back ( )	1993:4:57900:57934	618803	1	True				
ANR	619124	CallExpression	waitingBeautifierStack -> pop_back ( )		618803	0					
ANR	619125	Callee	waitingBeautifierStack -> pop_back		618803	0					
ANR	619126	PtrMemberAccess	waitingBeautifierStack -> pop_back		618803	0					
ANR	619127	Identifier	waitingBeautifierStack		618803	0					
ANR	619128	Identifier	pop_back		618803	1					
ANR	619129	ArgumentList			618803	1					
ANR	619130	Statement	delete	1994:4:57940:57945	618803	2	True				
ANR	619131	ExpressionStatement	beautifier	1994:11:57947:57957	618803	3	True				
ANR	619132	Identifier	beautifier		618803	0					
ANR	619133	IfStatement	if ( ! activeBeautifierStackLengthStack -> empty ( ) )		618803	3					
ANR	619134	Condition	! activeBeautifierStackLengthStack -> empty ( )	1998:6:57975:58016	618803	0	True				
ANR	619135	UnaryOperationExpression	! activeBeautifierStackLengthStack -> empty ( )		618803	0					
ANR	619136	UnaryOperator	!		618803	0					
ANR	619137	CallExpression	activeBeautifierStackLengthStack -> empty ( )		618803	1					
ANR	619138	Callee	activeBeautifierStackLengthStack -> empty		618803	0					
ANR	619139	PtrMemberAccess	activeBeautifierStackLengthStack -> empty		618803	0					
ANR	619140	Identifier	activeBeautifierStackLengthStack		618803	0					
ANR	619141	Identifier	empty		618803	1					
ANR	619142	ArgumentList			618803	1					
ANR	619143	CompoundStatement		74:2:2807:2807	618803	1					
ANR	619144	ExpressionStatement	stackLength = activeBeautifierStackLengthStack -> back ( )	2000:3:58026:58080	618803	0	True				
ANR	619145	AssignmentExpression	stackLength = activeBeautifierStackLengthStack -> back ( )		618803	0		=			
ANR	619146	Identifier	stackLength		618803	0					
ANR	619147	CallExpression	activeBeautifierStackLengthStack -> back ( )		618803	1					
ANR	619148	Callee	activeBeautifierStackLengthStack -> back		618803	0					
ANR	619149	PtrMemberAccess	activeBeautifierStackLengthStack -> back		618803	0					
ANR	619150	Identifier	activeBeautifierStackLengthStack		618803	0					
ANR	619151	Identifier	back		618803	1					
ANR	619152	ArgumentList			618803	1					
ANR	619153	ExpressionStatement	activeBeautifierStackLengthStack -> pop_back ( )	2001:3:58085:58129	618803	1	True				
ANR	619154	CallExpression	activeBeautifierStackLengthStack -> pop_back ( )		618803	0					
ANR	619155	Callee	activeBeautifierStackLengthStack -> pop_back		618803	0					
ANR	619156	PtrMemberAccess	activeBeautifierStackLengthStack -> pop_back		618803	0					
ANR	619157	Identifier	activeBeautifierStackLengthStack		618803	0					
ANR	619158	Identifier	pop_back		618803	1					
ANR	619159	ArgumentList			618803	1					
ANR	619160	WhileStatement	while ( ( int ) activeBeautifierStack -> size ( ) > stackLength )		618803	2					
ANR	619161	Condition	( int ) activeBeautifierStack -> size ( ) > stackLength	2002:10:58141:58189	618803	0	True				
ANR	619162	RelationalExpression	( int ) activeBeautifierStack -> size ( ) > stackLength		618803	0		>			
ANR	619163	CastExpression	( int ) activeBeautifierStack -> size ( )		618803	0					
ANR	619164	CastTarget	int		618803	0					
ANR	619165	CallExpression	activeBeautifierStack -> size ( )		618803	1					
ANR	619166	Callee	activeBeautifierStack -> size		618803	0					
ANR	619167	PtrMemberAccess	activeBeautifierStack -> size		618803	0					
ANR	619168	Identifier	activeBeautifierStack		618803	0					
ANR	619169	Identifier	size		618803	1					
ANR	619170	ArgumentList			618803	1					
ANR	619171	Identifier	stackLength		618803	1					
ANR	619172	CompoundStatement		78:3:2981:2981	618803	1					
ANR	619173	ExpressionStatement	beautifier = activeBeautifierStack -> back ( )	2004:4:58201:58243	618803	0	True				
ANR	619174	AssignmentExpression	beautifier = activeBeautifierStack -> back ( )		618803	0		=			
ANR	619175	Identifier	beautifier		618803	0					
ANR	619176	CallExpression	activeBeautifierStack -> back ( )		618803	1					
ANR	619177	Callee	activeBeautifierStack -> back		618803	0					
ANR	619178	PtrMemberAccess	activeBeautifierStack -> back		618803	0					
ANR	619179	Identifier	activeBeautifierStack		618803	0					
ANR	619180	Identifier	back		618803	1					
ANR	619181	ArgumentList			618803	1					
ANR	619182	ExpressionStatement	activeBeautifierStack -> pop_back ( )	2005:4:58249:58282	618803	1	True				
ANR	619183	CallExpression	activeBeautifierStack -> pop_back ( )		618803	0					
ANR	619184	Callee	activeBeautifierStack -> pop_back		618803	0					
ANR	619185	PtrMemberAccess	activeBeautifierStack -> pop_back		618803	0					
ANR	619186	Identifier	activeBeautifierStack		618803	0					
ANR	619187	Identifier	pop_back		618803	1					
ANR	619188	ArgumentList			618803	1					
ANR	619189	Statement	delete	2006:4:58288:58293	618803	2	True				
ANR	619190	ExpressionStatement	beautifier	2006:11:58295:58305	618803	3	True				
ANR	619191	Identifier	beautifier		618803	0					
ANR	619192	ReturnType	void		618803	1					
ANR	619193	Identifier	ASBeautifier :: processPreprocessor		618803	2					
ANR	619194	ParameterList	"const string & preproc , const string & line"		618803	3					
ANR	619195	Parameter	const string & preproc	1925:39:55170:55190	618803	0	True				
ANR	619196	ParameterType	const string &		618803	0					
ANR	619197	Identifier	preproc		618803	1					
ANR	619198	Parameter	const string & line	1925:62:55193:55210	618803	1	True				
ANR	619199	ParameterType	const string &		618803	0					
ANR	619200	Identifier	line		618803	1					
ANR	619201	CFGEntryNode	ENTRY		618803		True				
ANR	619202	CFGExitNode	EXIT		618803		True				
ANR	619203	Symbol	preproc . length		618803						
ANR	619204	Symbol	isInDefine		618803						
ANR	619205	Symbol	isPreprocessorConditionalCplusplus		618803						
ANR	619206	Symbol	* activeBeautifierStack		618803						
ANR	619207	Symbol	line		618803						
ANR	619208	Symbol	preproc . substr		618803						
ANR	619209	Symbol	waitingBeautifierStack -> back		618803						
ANR	619210	Symbol	waitingBeautifierStack -> size		618803						
ANR	619211	Symbol	* line		618803						
ANR	619212	Symbol	beautifier		618803						
ANR	619213	Symbol	activeBeautifierStack -> back		618803						
ANR	619214	Symbol	* ( waitingBeautifierStack -> back ( ) )		618803						
ANR	619215	Symbol	activeBeautifierStackLengthStack -> empty		618803						
ANR	619216	Symbol	waitingBeautifierStackLengthStack -> empty		618803						
ANR	619217	Symbol	g_preprocessorCppExternCBrace		618803						
ANR	619218	Symbol	waitingBeautifierStack		618803						
ANR	619219	Symbol	waitingBeautifierStackLengthStack		618803						
ANR	619220	Symbol	* activeBeautifierStackLengthStack		618803						
ANR	619221	Symbol	* * waitingBeautifierStack		618803						
ANR	619222	Symbol	activeBeautifierStackLengthStack -> back		618803						
ANR	619223	Symbol	waitingBeautifierStack -> empty		618803						
ANR	619224	Symbol	isInDefineDefinition		618803						
ANR	619225	Symbol	this		618803						
ANR	619226	Symbol	shouldIndentPreprocDefine		618803						
ANR	619227	Symbol	* waitingBeautifierStack -> back		618803						
ANR	619228	Symbol	* waitingBeautifierStack		618803						
ANR	619229	Symbol	activeBeautifierStack -> size		618803						
ANR	619230	Symbol	defineBeautifier		618803						
ANR	619231	Symbol	* waitingBeautifierStackLengthStack		618803						
ANR	619232	Symbol	* * activeBeautifierStack		618803						
ANR	619233	Symbol	* this		618803						
ANR	619234	Symbol	true		618803						
ANR	619235	Symbol	waitingBeautifierStackLengthStack -> back		618803						
ANR	619236	Symbol	* line . length		618803						
ANR	619237	Symbol	* activeBeautifierStack -> back ( )		618803						
ANR	619238	Symbol	activeBeautifierStack		618803						
ANR	619239	Symbol	activeBeautifierStackLengthStack		618803						
ANR	619240	Symbol	stackLength		618803						
ANR	619241	Symbol	* activeBeautifierStack -> back		618803						
ANR	619242	Symbol	nullptr		618803						
ANR	619243	Symbol	preproc		618803						
ANR	619244	Symbol	line . length		618803						
ANR	619245	Function	ASBeautifier :: computePreliminaryIndentation	2015:0:58469:62175							
ANR	619246	FunctionDef	ASBeautifier :: computePreliminaryIndentation ()		619245	0					
ANR	619247	CompoundStatement		2016:0:58520:62175	619245	0					
ANR	619248	ExpressionStatement	indentCount = 0	2017:1:58523:58538	619245	0	True				
ANR	619249	AssignmentExpression	indentCount = 0		619245	0		=			
ANR	619250	Identifier	indentCount		619245	0					
ANR	619251	PrimaryExpression	0		619245	1					
ANR	619252	ExpressionStatement	spaceIndentCount = 0	2018:1:58541:58561	619245	1	True				
ANR	619253	AssignmentExpression	spaceIndentCount = 0		619245	0		=			
ANR	619254	Identifier	spaceIndentCount		619245	0					
ANR	619255	PrimaryExpression	0		619245	1					
ANR	619256	ExpressionStatement	isInClassHeaderTab = false	2019:1:58564:58590	619245	2	True				
ANR	619257	AssignmentExpression	isInClassHeaderTab = false		619245	0		=			
ANR	619258	Identifier	isInClassHeaderTab		619245	0					
ANR	619259	Identifier	false		619245	1					
ANR	619260	IfStatement	if ( isInObjCMethodDefinition && ! continuationIndentStack -> empty ( ) )		619245	3					
ANR	619261	Condition	isInObjCMethodDefinition && ! continuationIndentStack -> empty ( )	2021:5:58598:58658	619245	0	True				
ANR	619262	AndExpression	isInObjCMethodDefinition && ! continuationIndentStack -> empty ( )		619245	0		&&			
ANR	619263	Identifier	isInObjCMethodDefinition		619245	0					
ANR	619264	UnaryOperationExpression	! continuationIndentStack -> empty ( )		619245	1					
ANR	619265	UnaryOperator	!		619245	0					
ANR	619266	CallExpression	continuationIndentStack -> empty ( )		619245	1					
ANR	619267	Callee	continuationIndentStack -> empty		619245	0					
ANR	619268	PtrMemberAccess	continuationIndentStack -> empty		619245	0					
ANR	619269	Identifier	continuationIndentStack		619245	0					
ANR	619270	Identifier	empty		619245	1					
ANR	619271	ArgumentList			619245	1					
ANR	619272	ExpressionStatement	spaceIndentObjCMethodAlignment = continuationIndentStack -> back ( )	2022:2:58663:58727	619245	1	True				
ANR	619273	AssignmentExpression	spaceIndentObjCMethodAlignment = continuationIndentStack -> back ( )		619245	0		=			
ANR	619274	Identifier	spaceIndentObjCMethodAlignment		619245	0					
ANR	619275	CallExpression	continuationIndentStack -> back ( )		619245	1					
ANR	619276	Callee	continuationIndentStack -> back		619245	0					
ANR	619277	PtrMemberAccess	continuationIndentStack -> back		619245	0					
ANR	619278	Identifier	continuationIndentStack		619245	0					
ANR	619279	Identifier	back		619245	1					
ANR	619280	ArgumentList			619245	1					
ANR	619281	IfStatement	if ( ! continuationIndentStack -> empty ( ) )		619245	4					
ANR	619282	Condition	! continuationIndentStack -> empty ( )	2024:5:58735:58767	619245	0	True				
ANR	619283	UnaryOperationExpression	! continuationIndentStack -> empty ( )		619245	0					
ANR	619284	UnaryOperator	!		619245	0					
ANR	619285	CallExpression	continuationIndentStack -> empty ( )		619245	1					
ANR	619286	Callee	continuationIndentStack -> empty		619245	0					
ANR	619287	PtrMemberAccess	continuationIndentStack -> empty		619245	0					
ANR	619288	Identifier	continuationIndentStack		619245	0					
ANR	619289	Identifier	empty		619245	1					
ANR	619290	ArgumentList			619245	1					
ANR	619291	ExpressionStatement	spaceIndentCount = continuationIndentStack -> back ( )	2025:2:58772:58822	619245	1	True				
ANR	619292	AssignmentExpression	spaceIndentCount = continuationIndentStack -> back ( )		619245	0		=			
ANR	619293	Identifier	spaceIndentCount		619245	0					
ANR	619294	CallExpression	continuationIndentStack -> back ( )		619245	1					
ANR	619295	Callee	continuationIndentStack -> back		619245	0					
ANR	619296	PtrMemberAccess	continuationIndentStack -> back		619245	0					
ANR	619297	Identifier	continuationIndentStack		619245	0					
ANR	619298	Identifier	back		619245	1					
ANR	619299	ArgumentList			619245	1					
ANR	619300	ForStatement	for ( size_t i = 0 ; i < headerStack -> size ( ) ; i ++ )		619245	5					
ANR	619301	ForInit	size_t i = 0 ;	2027:6:58831:58843	619245	0	True				
ANR	619302	IdentifierDeclStatement	size_t i = 0 ;		619245	0					
ANR	619303	IdentifierDecl	i = 0		619245	0					
ANR	619304	IdentifierDeclType	size_t		619245	0					
ANR	619305	Identifier	i		619245	1					
ANR	619306	AssignmentExpression	i = 0		619245	2		=			
ANR	619307	Identifier	i		619245	0					
ANR	619308	PrimaryExpression	0		619245	1					
ANR	619309	Condition	i < headerStack -> size ( )	2027:20:58845:58867	619245	1	True				
ANR	619310	RelationalExpression	i < headerStack -> size ( )		619245	0		<			
ANR	619311	Identifier	i		619245	0					
ANR	619312	CallExpression	headerStack -> size ( )		619245	1					
ANR	619313	Callee	headerStack -> size		619245	0					
ANR	619314	PtrMemberAccess	headerStack -> size		619245	0					
ANR	619315	Identifier	headerStack		619245	0					
ANR	619316	Identifier	size		619245	1					
ANR	619317	ArgumentList			619245	1					
ANR	619318	PostIncDecOperationExpression	i ++	2027:45:58870:58872	619245	2	True				
ANR	619319	Identifier	i		619245	0					
ANR	619320	IncDec	++		619245	1					
ANR	619321	CompoundStatement		13:1:355:355	619245	3					
ANR	619322	ExpressionStatement	isInClass = false	2029:2:58880:58897	619245	0	True				
ANR	619323	AssignmentExpression	isInClass = false		619245	0		=			
ANR	619324	Identifier	isInClass		619245	0					
ANR	619325	Identifier	false		619245	1					
ANR	619326	IfStatement	if ( blockIndent )		619245	1					
ANR	619327	Condition	blockIndent	2031:6:58906:58916	619245	0	True				
ANR	619328	Identifier	blockIndent		619245	0					
ANR	619329	CompoundStatement		17:2:400:400	619245	1					
ANR	619330	IfStatement	if ( ! ( ( * headerStack ) [ i ] == & AS_NAMESPACE || ( * headerStack ) [ i ] == & AS_MODULE || ( * headerStack ) [ i ] == & AS_CLASS || ( * headerStack ) [ i ] == & AS_STRUCT || ( * headerStack ) [ i ] == & AS_UNION || ( * headerStack ) [ i ] == & AS_INTERFACE || ( * headerStack ) [ i ] == & AS_THROWS || ( * headerStack ) [ i ] == & AS_STATIC ) )		619245	0					
ANR	619331	Condition	! ( ( * headerStack ) [ i ] == & AS_NAMESPACE || ( * headerStack ) [ i ] == & AS_MODULE || ( * headerStack ) [ i ] == & AS_CLASS || ( * headerStack ) [ i ] == & AS_STRUCT || ( * headerStack ) [ i ] == & AS_UNION || ( * headerStack ) [ i ] == & AS_INTERFACE || ( * headerStack ) [ i ] == & AS_THROWS || ( * headerStack ) [ i ] == & AS_STATIC )	2034:7:58982:59341	619245	0	True				
ANR	619332	UnaryOperationExpression	! ( ( * headerStack ) [ i ] == & AS_NAMESPACE || ( * headerStack ) [ i ] == & AS_MODULE || ( * headerStack ) [ i ] == & AS_CLASS || ( * headerStack ) [ i ] == & AS_STRUCT || ( * headerStack ) [ i ] == & AS_UNION || ( * headerStack ) [ i ] == & AS_INTERFACE || ( * headerStack ) [ i ] == & AS_THROWS || ( * headerStack ) [ i ] == & AS_STATIC )		619245	0					
ANR	619333	UnaryOperator	!		619245	0					
ANR	619334	OrExpression	( * headerStack ) [ i ] == & AS_NAMESPACE || ( * headerStack ) [ i ] == & AS_MODULE || ( * headerStack ) [ i ] == & AS_CLASS || ( * headerStack ) [ i ] == & AS_STRUCT || ( * headerStack ) [ i ] == & AS_UNION || ( * headerStack ) [ i ] == & AS_INTERFACE || ( * headerStack ) [ i ] == & AS_THROWS || ( * headerStack ) [ i ] == & AS_STATIC		619245	1		||			
ANR	619335	EqualityExpression	( * headerStack ) [ i ] == & AS_NAMESPACE		619245	0		==			
ANR	619336	ArrayIndexing	( * headerStack ) [ i ]		619245	0					
ANR	619337	UnaryOperationExpression	* headerStack		619245	0					
ANR	619338	UnaryOperator	*		619245	0					
ANR	619339	Identifier	headerStack		619245	1					
ANR	619340	Identifier	i		619245	1					
ANR	619341	UnaryOperationExpression	& AS_NAMESPACE		619245	1					
ANR	619342	UnaryOperator	&		619245	0					
ANR	619343	Identifier	AS_NAMESPACE		619245	1					
ANR	619344	OrExpression	( * headerStack ) [ i ] == & AS_MODULE || ( * headerStack ) [ i ] == & AS_CLASS || ( * headerStack ) [ i ] == & AS_STRUCT || ( * headerStack ) [ i ] == & AS_UNION || ( * headerStack ) [ i ] == & AS_INTERFACE || ( * headerStack ) [ i ] == & AS_THROWS || ( * headerStack ) [ i ] == & AS_STATIC		619245	1		||			
ANR	619345	EqualityExpression	( * headerStack ) [ i ] == & AS_MODULE		619245	0		==			
ANR	619346	ArrayIndexing	( * headerStack ) [ i ]		619245	0					
ANR	619347	UnaryOperationExpression	* headerStack		619245	0					
ANR	619348	UnaryOperator	*		619245	0					
ANR	619349	Identifier	headerStack		619245	1					
ANR	619350	Identifier	i		619245	1					
ANR	619351	UnaryOperationExpression	& AS_MODULE		619245	1					
ANR	619352	UnaryOperator	&		619245	0					
ANR	619353	Identifier	AS_MODULE		619245	1					
ANR	619354	OrExpression	( * headerStack ) [ i ] == & AS_CLASS || ( * headerStack ) [ i ] == & AS_STRUCT || ( * headerStack ) [ i ] == & AS_UNION || ( * headerStack ) [ i ] == & AS_INTERFACE || ( * headerStack ) [ i ] == & AS_THROWS || ( * headerStack ) [ i ] == & AS_STATIC		619245	1		||			
ANR	619355	EqualityExpression	( * headerStack ) [ i ] == & AS_CLASS		619245	0		==			
ANR	619356	ArrayIndexing	( * headerStack ) [ i ]		619245	0					
ANR	619357	UnaryOperationExpression	* headerStack		619245	0					
ANR	619358	UnaryOperator	*		619245	0					
ANR	619359	Identifier	headerStack		619245	1					
ANR	619360	Identifier	i		619245	1					
ANR	619361	UnaryOperationExpression	& AS_CLASS		619245	1					
ANR	619362	UnaryOperator	&		619245	0					
ANR	619363	Identifier	AS_CLASS		619245	1					
ANR	619364	OrExpression	( * headerStack ) [ i ] == & AS_STRUCT || ( * headerStack ) [ i ] == & AS_UNION || ( * headerStack ) [ i ] == & AS_INTERFACE || ( * headerStack ) [ i ] == & AS_THROWS || ( * headerStack ) [ i ] == & AS_STATIC		619245	1		||			
ANR	619365	EqualityExpression	( * headerStack ) [ i ] == & AS_STRUCT		619245	0		==			
ANR	619366	ArrayIndexing	( * headerStack ) [ i ]		619245	0					
ANR	619367	UnaryOperationExpression	* headerStack		619245	0					
ANR	619368	UnaryOperator	*		619245	0					
ANR	619369	Identifier	headerStack		619245	1					
ANR	619370	Identifier	i		619245	1					
ANR	619371	UnaryOperationExpression	& AS_STRUCT		619245	1					
ANR	619372	UnaryOperator	&		619245	0					
ANR	619373	Identifier	AS_STRUCT		619245	1					
ANR	619374	OrExpression	( * headerStack ) [ i ] == & AS_UNION || ( * headerStack ) [ i ] == & AS_INTERFACE || ( * headerStack ) [ i ] == & AS_THROWS || ( * headerStack ) [ i ] == & AS_STATIC		619245	1		||			
ANR	619375	EqualityExpression	( * headerStack ) [ i ] == & AS_UNION		619245	0		==			
ANR	619376	ArrayIndexing	( * headerStack ) [ i ]		619245	0					
ANR	619377	UnaryOperationExpression	* headerStack		619245	0					
ANR	619378	UnaryOperator	*		619245	0					
ANR	619379	Identifier	headerStack		619245	1					
ANR	619380	Identifier	i		619245	1					
ANR	619381	UnaryOperationExpression	& AS_UNION		619245	1					
ANR	619382	UnaryOperator	&		619245	0					
ANR	619383	Identifier	AS_UNION		619245	1					
ANR	619384	OrExpression	( * headerStack ) [ i ] == & AS_INTERFACE || ( * headerStack ) [ i ] == & AS_THROWS || ( * headerStack ) [ i ] == & AS_STATIC		619245	1		||			
ANR	619385	EqualityExpression	( * headerStack ) [ i ] == & AS_INTERFACE		619245	0		==			
ANR	619386	ArrayIndexing	( * headerStack ) [ i ]		619245	0					
ANR	619387	UnaryOperationExpression	* headerStack		619245	0					
ANR	619388	UnaryOperator	*		619245	0					
ANR	619389	Identifier	headerStack		619245	1					
ANR	619390	Identifier	i		619245	1					
ANR	619391	UnaryOperationExpression	& AS_INTERFACE		619245	1					
ANR	619392	UnaryOperator	&		619245	0					
ANR	619393	Identifier	AS_INTERFACE		619245	1					
ANR	619394	OrExpression	( * headerStack ) [ i ] == & AS_THROWS || ( * headerStack ) [ i ] == & AS_STATIC		619245	1		||			
ANR	619395	EqualityExpression	( * headerStack ) [ i ] == & AS_THROWS		619245	0		==			
ANR	619396	ArrayIndexing	( * headerStack ) [ i ]		619245	0					
ANR	619397	UnaryOperationExpression	* headerStack		619245	0					
ANR	619398	UnaryOperator	*		619245	0					
ANR	619399	Identifier	headerStack		619245	1					
ANR	619400	Identifier	i		619245	1					
ANR	619401	UnaryOperationExpression	& AS_THROWS		619245	1					
ANR	619402	UnaryOperator	&		619245	0					
ANR	619403	Identifier	AS_THROWS		619245	1					
ANR	619404	EqualityExpression	( * headerStack ) [ i ] == & AS_STATIC		619245	1		==			
ANR	619405	ArrayIndexing	( * headerStack ) [ i ]		619245	0					
ANR	619406	UnaryOperationExpression	* headerStack		619245	0					
ANR	619407	UnaryOperator	*		619245	0					
ANR	619408	Identifier	headerStack		619245	1					
ANR	619409	Identifier	i		619245	1					
ANR	619410	UnaryOperationExpression	& AS_STATIC		619245	1					
ANR	619411	UnaryOperator	&		619245	0					
ANR	619412	Identifier	AS_STATIC		619245	1					
ANR	619413	ExpressionStatement	++ indentCount	2042:4:59348:59361	619245	1	True				
ANR	619414	UnaryExpression	++ indentCount		619245	0					
ANR	619415	IncDec	++		619245	0					
ANR	619416	Identifier	indentCount		619245	1					
ANR	619417	ElseStatement	else		619245	0					
ANR	619418	IfStatement	if ( ! ( i > 0 && ( * headerStack ) [ i - 1 ] != & AS_OPEN_BRACE && ( * headerStack ) [ i ] == & AS_OPEN_BRACE ) )		619245	0					
ANR	619419	Condition	! ( i > 0 && ( * headerStack ) [ i - 1 ] != & AS_OPEN_BRACE && ( * headerStack ) [ i ] == & AS_OPEN_BRACE )	2044:11:59378:59480	619245	0	True				
ANR	619420	UnaryOperationExpression	! ( i > 0 && ( * headerStack ) [ i - 1 ] != & AS_OPEN_BRACE && ( * headerStack ) [ i ] == & AS_OPEN_BRACE )		619245	0					
ANR	619421	UnaryOperator	!		619245	0					
ANR	619422	AndExpression	i > 0 && ( * headerStack ) [ i - 1 ] != & AS_OPEN_BRACE && ( * headerStack ) [ i ] == & AS_OPEN_BRACE		619245	1		&&			
ANR	619423	RelationalExpression	i > 0		619245	0		>			
ANR	619424	Identifier	i		619245	0					
ANR	619425	PrimaryExpression	0		619245	1					
ANR	619426	AndExpression	( * headerStack ) [ i - 1 ] != & AS_OPEN_BRACE && ( * headerStack ) [ i ] == & AS_OPEN_BRACE		619245	1		&&			
ANR	619427	EqualityExpression	( * headerStack ) [ i - 1 ] != & AS_OPEN_BRACE		619245	0		!=			
ANR	619428	ArrayIndexing	( * headerStack ) [ i - 1 ]		619245	0					
ANR	619429	UnaryOperationExpression	* headerStack		619245	0					
ANR	619430	UnaryOperator	*		619245	0					
ANR	619431	Identifier	headerStack		619245	1					
ANR	619432	AdditiveExpression	i - 1		619245	1		-			
ANR	619433	Identifier	i		619245	0					
ANR	619434	PrimaryExpression	1		619245	1					
ANR	619435	UnaryOperationExpression	& AS_OPEN_BRACE		619245	1					
ANR	619436	UnaryOperator	&		619245	0					
ANR	619437	Identifier	AS_OPEN_BRACE		619245	1					
ANR	619438	EqualityExpression	( * headerStack ) [ i ] == & AS_OPEN_BRACE		619245	1		==			
ANR	619439	ArrayIndexing	( * headerStack ) [ i ]		619245	0					
ANR	619440	UnaryOperationExpression	* headerStack		619245	0					
ANR	619441	UnaryOperator	*		619245	0					
ANR	619442	Identifier	headerStack		619245	1					
ANR	619443	Identifier	i		619245	1					
ANR	619444	UnaryOperationExpression	& AS_OPEN_BRACE		619245	1					
ANR	619445	UnaryOperator	&		619245	0					
ANR	619446	Identifier	AS_OPEN_BRACE		619245	1					
ANR	619447	ExpressionStatement	++ indentCount	2046:3:59486:59499	619245	1	True				
ANR	619448	UnaryExpression	++ indentCount		619245	0					
ANR	619449	IncDec	++		619245	0					
ANR	619450	Identifier	indentCount		619245	1					
ANR	619451	IfStatement	if ( ! isJavaStyle ( ) && ! namespaceIndent && i > 0 && ( ( * headerStack ) [ i - 1 ] == & AS_NAMESPACE || ( * headerStack ) [ i - 1 ] == & AS_MODULE ) && ( * headerStack ) [ i ] == & AS_OPEN_BRACE )		619245	2					
ANR	619452	Condition	! isJavaStyle ( ) && ! namespaceIndent && i > 0 && ( ( * headerStack ) [ i - 1 ] == & AS_NAMESPACE || ( * headerStack ) [ i - 1 ] == & AS_MODULE ) && ( * headerStack ) [ i ] == & AS_OPEN_BRACE	2048:6:59508:59706	619245	0	True				
ANR	619453	AndExpression	! isJavaStyle ( ) && ! namespaceIndent && i > 0 && ( ( * headerStack ) [ i - 1 ] == & AS_NAMESPACE || ( * headerStack ) [ i - 1 ] == & AS_MODULE ) && ( * headerStack ) [ i ] == & AS_OPEN_BRACE		619245	0		&&			
ANR	619454	UnaryOperationExpression	! isJavaStyle ( )		619245	0					
ANR	619455	UnaryOperator	!		619245	0					
ANR	619456	CallExpression	isJavaStyle ( )		619245	1					
ANR	619457	Callee	isJavaStyle		619245	0					
ANR	619458	Identifier	isJavaStyle		619245	0					
ANR	619459	ArgumentList			619245	1					
ANR	619460	AndExpression	! namespaceIndent && i > 0 && ( ( * headerStack ) [ i - 1 ] == & AS_NAMESPACE || ( * headerStack ) [ i - 1 ] == & AS_MODULE ) && ( * headerStack ) [ i ] == & AS_OPEN_BRACE		619245	1		&&			
ANR	619461	UnaryOperationExpression	! namespaceIndent		619245	0					
ANR	619462	UnaryOperator	!		619245	0					
ANR	619463	Identifier	namespaceIndent		619245	1					
ANR	619464	AndExpression	i > 0 && ( ( * headerStack ) [ i - 1 ] == & AS_NAMESPACE || ( * headerStack ) [ i - 1 ] == & AS_MODULE ) && ( * headerStack ) [ i ] == & AS_OPEN_BRACE		619245	1		&&			
ANR	619465	RelationalExpression	i > 0		619245	0		>			
ANR	619466	Identifier	i		619245	0					
ANR	619467	PrimaryExpression	0		619245	1					
ANR	619468	AndExpression	( ( * headerStack ) [ i - 1 ] == & AS_NAMESPACE || ( * headerStack ) [ i - 1 ] == & AS_MODULE ) && ( * headerStack ) [ i ] == & AS_OPEN_BRACE		619245	1		&&			
ANR	619469	OrExpression	( * headerStack ) [ i - 1 ] == & AS_NAMESPACE || ( * headerStack ) [ i - 1 ] == & AS_MODULE		619245	0		||			
ANR	619470	EqualityExpression	( * headerStack ) [ i - 1 ] == & AS_NAMESPACE		619245	0		==			
ANR	619471	ArrayIndexing	( * headerStack ) [ i - 1 ]		619245	0					
ANR	619472	UnaryOperationExpression	* headerStack		619245	0					
ANR	619473	UnaryOperator	*		619245	0					
ANR	619474	Identifier	headerStack		619245	1					
ANR	619475	AdditiveExpression	i - 1		619245	1		-			
ANR	619476	Identifier	i		619245	0					
ANR	619477	PrimaryExpression	1		619245	1					
ANR	619478	UnaryOperationExpression	& AS_NAMESPACE		619245	1					
ANR	619479	UnaryOperator	&		619245	0					
ANR	619480	Identifier	AS_NAMESPACE		619245	1					
ANR	619481	EqualityExpression	( * headerStack ) [ i - 1 ] == & AS_MODULE		619245	1		==			
ANR	619482	ArrayIndexing	( * headerStack ) [ i - 1 ]		619245	0					
ANR	619483	UnaryOperationExpression	* headerStack		619245	0					
ANR	619484	UnaryOperator	*		619245	0					
ANR	619485	Identifier	headerStack		619245	1					
ANR	619486	AdditiveExpression	i - 1		619245	1		-			
ANR	619487	Identifier	i		619245	0					
ANR	619488	PrimaryExpression	1		619245	1					
ANR	619489	UnaryOperationExpression	& AS_MODULE		619245	1					
ANR	619490	UnaryOperator	&		619245	0					
ANR	619491	Identifier	AS_MODULE		619245	1					
ANR	619492	EqualityExpression	( * headerStack ) [ i ] == & AS_OPEN_BRACE		619245	1		==			
ANR	619493	ArrayIndexing	( * headerStack ) [ i ]		619245	0					
ANR	619494	UnaryOperationExpression	* headerStack		619245	0					
ANR	619495	UnaryOperator	*		619245	0					
ANR	619496	Identifier	headerStack		619245	1					
ANR	619497	Identifier	i		619245	1					
ANR	619498	UnaryOperationExpression	& AS_OPEN_BRACE		619245	1					
ANR	619499	UnaryOperator	&		619245	0					
ANR	619500	Identifier	AS_OPEN_BRACE		619245	1					
ANR	619501	ExpressionStatement	-- indentCount	2052:3:59712:59725	619245	1	True				
ANR	619502	UnaryExpression	-- indentCount		619245	0					
ANR	619503	IncDec	--		619245	0					
ANR	619504	Identifier	indentCount		619245	1					
ANR	619505	IfStatement	if ( isCStyle ( ) && i >= 1 && ( * headerStack ) [ i - 1 ] == & AS_CLASS && ( * headerStack ) [ i ] == & AS_OPEN_BRACE )		619245	3					
ANR	619506	Condition	isCStyle ( ) && i >= 1 && ( * headerStack ) [ i - 1 ] == & AS_CLASS && ( * headerStack ) [ i ] == & AS_OPEN_BRACE	2054:6:59734:59850	619245	0	True				
ANR	619507	AndExpression	isCStyle ( ) && i >= 1 && ( * headerStack ) [ i - 1 ] == & AS_CLASS && ( * headerStack ) [ i ] == & AS_OPEN_BRACE		619245	0		&&			
ANR	619508	CallExpression	isCStyle ( )		619245	0					
ANR	619509	Callee	isCStyle		619245	0					
ANR	619510	Identifier	isCStyle		619245	0					
ANR	619511	ArgumentList			619245	1					
ANR	619512	AndExpression	i >= 1 && ( * headerStack ) [ i - 1 ] == & AS_CLASS && ( * headerStack ) [ i ] == & AS_OPEN_BRACE		619245	1		&&			
ANR	619513	RelationalExpression	i >= 1		619245	0		>=			
ANR	619514	Identifier	i		619245	0					
ANR	619515	PrimaryExpression	1		619245	1					
ANR	619516	AndExpression	( * headerStack ) [ i - 1 ] == & AS_CLASS && ( * headerStack ) [ i ] == & AS_OPEN_BRACE		619245	1		&&			
ANR	619517	EqualityExpression	( * headerStack ) [ i - 1 ] == & AS_CLASS		619245	0		==			
ANR	619518	ArrayIndexing	( * headerStack ) [ i - 1 ]		619245	0					
ANR	619519	UnaryOperationExpression	* headerStack		619245	0					
ANR	619520	UnaryOperator	*		619245	0					
ANR	619521	Identifier	headerStack		619245	1					
ANR	619522	AdditiveExpression	i - 1		619245	1		-			
ANR	619523	Identifier	i		619245	0					
ANR	619524	PrimaryExpression	1		619245	1					
ANR	619525	UnaryOperationExpression	& AS_CLASS		619245	1					
ANR	619526	UnaryOperator	&		619245	0					
ANR	619527	Identifier	AS_CLASS		619245	1					
ANR	619528	EqualityExpression	( * headerStack ) [ i ] == & AS_OPEN_BRACE		619245	1		==			
ANR	619529	ArrayIndexing	( * headerStack ) [ i ]		619245	0					
ANR	619530	UnaryOperationExpression	* headerStack		619245	0					
ANR	619531	UnaryOperator	*		619245	0					
ANR	619532	Identifier	headerStack		619245	1					
ANR	619533	Identifier	i		619245	1					
ANR	619534	UnaryOperationExpression	& AS_OPEN_BRACE		619245	1					
ANR	619535	UnaryOperator	&		619245	0					
ANR	619536	Identifier	AS_OPEN_BRACE		619245	1					
ANR	619537	CompoundStatement		42:2:1334:1334	619245	1					
ANR	619538	IfStatement	if ( classIndent )		619245	0					
ANR	619539	Condition	classIndent	2058:7:59864:59874	619245	0	True				
ANR	619540	Identifier	classIndent		619245	0					
ANR	619541	ExpressionStatement	++ indentCount	2059:4:59881:59894	619245	1	True				
ANR	619542	UnaryExpression	++ indentCount		619245	0					
ANR	619543	IncDec	++		619245	0					
ANR	619544	Identifier	indentCount		619245	1					
ANR	619545	ExpressionStatement	isInClass = true	2060:3:59899:59915	619245	1	True				
ANR	619546	AssignmentExpression	isInClass = true		619245	0		=			
ANR	619547	Identifier	isInClass		619245	0					
ANR	619548	Identifier	true		619245	1					
ANR	619549	ElseStatement	else		619245	0					
ANR	619550	IfStatement	if ( switchIndent && i > 1 && ( * headerStack ) [ i - 1 ] == & AS_SWITCH && ( * headerStack ) [ i ] == & AS_OPEN_BRACE )		619245	0					
ANR	619551	Condition	switchIndent && i > 1 && ( * headerStack ) [ i - 1 ] == & AS_SWITCH && ( * headerStack ) [ i ] == & AS_OPEN_BRACE	2064:11:60019:60139	619245	0	True				
ANR	619552	AndExpression	switchIndent && i > 1 && ( * headerStack ) [ i - 1 ] == & AS_SWITCH && ( * headerStack ) [ i ] == & AS_OPEN_BRACE		619245	0		&&			
ANR	619553	Identifier	switchIndent		619245	0					
ANR	619554	AndExpression	i > 1 && ( * headerStack ) [ i - 1 ] == & AS_SWITCH && ( * headerStack ) [ i ] == & AS_OPEN_BRACE		619245	1		&&			
ANR	619555	RelationalExpression	i > 1		619245	0		>			
ANR	619556	Identifier	i		619245	0					
ANR	619557	PrimaryExpression	1		619245	1					
ANR	619558	AndExpression	( * headerStack ) [ i - 1 ] == & AS_SWITCH && ( * headerStack ) [ i ] == & AS_OPEN_BRACE		619245	1		&&			
ANR	619559	EqualityExpression	( * headerStack ) [ i - 1 ] == & AS_SWITCH		619245	0		==			
ANR	619560	ArrayIndexing	( * headerStack ) [ i - 1 ]		619245	0					
ANR	619561	UnaryOperationExpression	* headerStack		619245	0					
ANR	619562	UnaryOperator	*		619245	0					
ANR	619563	Identifier	headerStack		619245	1					
ANR	619564	AdditiveExpression	i - 1		619245	1		-			
ANR	619565	Identifier	i		619245	0					
ANR	619566	PrimaryExpression	1		619245	1					
ANR	619567	UnaryOperationExpression	& AS_SWITCH		619245	1					
ANR	619568	UnaryOperator	&		619245	0					
ANR	619569	Identifier	AS_SWITCH		619245	1					
ANR	619570	EqualityExpression	( * headerStack ) [ i ] == & AS_OPEN_BRACE		619245	1		==			
ANR	619571	ArrayIndexing	( * headerStack ) [ i ]		619245	0					
ANR	619572	UnaryOperationExpression	* headerStack		619245	0					
ANR	619573	UnaryOperator	*		619245	0					
ANR	619574	Identifier	headerStack		619245	1					
ANR	619575	Identifier	i		619245	1					
ANR	619576	UnaryOperationExpression	& AS_OPEN_BRACE		619245	1					
ANR	619577	UnaryOperator	&		619245	0					
ANR	619578	Identifier	AS_OPEN_BRACE		619245	1					
ANR	619579	CompoundStatement		52:2:1623:1623	619245	1					
ANR	619580	ExpressionStatement	++ indentCount	2068:3:60149:60162	619245	0	True				
ANR	619581	UnaryExpression	++ indentCount		619245	0					
ANR	619582	IncDec	++		619245	0					
ANR	619583	Identifier	indentCount		619245	1					
ANR	619584	ExpressionStatement	isInSwitch = true	2069:3:60167:60184	619245	1	True				
ANR	619585	AssignmentExpression	isInSwitch = true		619245	0		=			
ANR	619586	Identifier	isInSwitch		619245	0					
ANR	619587	Identifier	true		619245	1					
ANR	619588	IfStatement	if ( isInClassHeader )		619245	6					
ANR	619589	Condition	isInClassHeader	2074:5:60219:60233	619245	0	True				
ANR	619590	Identifier	isInClassHeader		619245	0					
ANR	619591	CompoundStatement		60:1:1716:1716	619245	1					
ANR	619592	IfStatement	if ( ! isJavaStyle ( ) )		619245	0					
ANR	619593	Condition	! isJavaStyle ( )	2076:6:60245:60258	619245	0	True				
ANR	619594	UnaryOperationExpression	! isJavaStyle ( )		619245	0					
ANR	619595	UnaryOperator	!		619245	0					
ANR	619596	CallExpression	isJavaStyle ( )		619245	1					
ANR	619597	Callee	isJavaStyle		619245	0					
ANR	619598	Identifier	isJavaStyle		619245	0					
ANR	619599	ArgumentList			619245	1					
ANR	619600	ExpressionStatement	isInClassHeaderTab = true	2077:3:60264:60289	619245	1	True				
ANR	619601	AssignmentExpression	isInClassHeaderTab = true		619245	0		=			
ANR	619602	Identifier	isInClassHeaderTab		619245	0					
ANR	619603	Identifier	true		619245	1					
ANR	619604	IfStatement	if ( lineOpensWithLineComment || lineStartsInComment || lineOpensWithComment )		619245	1					
ANR	619605	Condition	lineOpensWithLineComment || lineStartsInComment || lineOpensWithComment	2078:6:60297:60367	619245	0	True				
ANR	619606	OrExpression	lineOpensWithLineComment || lineStartsInComment || lineOpensWithComment		619245	0		||			
ANR	619607	Identifier	lineOpensWithLineComment		619245	0					
ANR	619608	OrExpression	lineStartsInComment || lineOpensWithComment		619245	1		||			
ANR	619609	Identifier	lineStartsInComment		619245	0					
ANR	619610	Identifier	lineOpensWithComment		619245	1					
ANR	619611	CompoundStatement		64:2:1851:1851	619245	1					
ANR	619612	IfStatement	if ( ! lineBeginsWithOpenBrace )		619245	0					
ANR	619613	Condition	! lineBeginsWithOpenBrace	2080:7:60381:60404	619245	0	True				
ANR	619614	UnaryOperationExpression	! lineBeginsWithOpenBrace		619245	0					
ANR	619615	UnaryOperator	!		619245	0					
ANR	619616	Identifier	lineBeginsWithOpenBrace		619245	1					
ANR	619617	ExpressionStatement	-- indentCount	2081:4:60411:60424	619245	1	True				
ANR	619618	UnaryExpression	-- indentCount		619245	0					
ANR	619619	IncDec	--		619245	0					
ANR	619620	Identifier	indentCount		619245	1					
ANR	619621	IfStatement	if ( ! continuationIndentStack -> empty ( ) )		619245	1					
ANR	619622	Condition	! continuationIndentStack -> empty ( )	2082:7:60433:60465	619245	0	True				
ANR	619623	UnaryOperationExpression	! continuationIndentStack -> empty ( )		619245	0					
ANR	619624	UnaryOperator	!		619245	0					
ANR	619625	CallExpression	continuationIndentStack -> empty ( )		619245	1					
ANR	619626	Callee	continuationIndentStack -> empty		619245	0					
ANR	619627	PtrMemberAccess	continuationIndentStack -> empty		619245	0					
ANR	619628	Identifier	continuationIndentStack		619245	0					
ANR	619629	Identifier	empty		619245	1					
ANR	619630	ArgumentList			619245	1					
ANR	619631	ExpressionStatement	spaceIndentCount -= continuationIndentStack -> back ( )	2083:4:60472:60523	619245	1	True				
ANR	619632	AssignmentExpression	spaceIndentCount -= continuationIndentStack -> back ( )		619245	0		-=			
ANR	619633	Identifier	spaceIndentCount		619245	0					
ANR	619634	CallExpression	continuationIndentStack -> back ( )		619245	1					
ANR	619635	Callee	continuationIndentStack -> back		619245	0					
ANR	619636	PtrMemberAccess	continuationIndentStack -> back		619245	0					
ANR	619637	Identifier	continuationIndentStack		619245	0					
ANR	619638	Identifier	back		619245	1					
ANR	619639	ArgumentList			619245	1					
ANR	619640	ElseStatement	else		619245	0					
ANR	619641	IfStatement	if ( blockIndent )		619245	0					
ANR	619642	Condition	blockIndent	2085:11:60540:60550	619245	0	True				
ANR	619643	Identifier	blockIndent		619245	0					
ANR	619644	CompoundStatement		71:2:2034:2034	619245	1					
ANR	619645	IfStatement	if ( ! lineBeginsWithOpenBrace )		619245	0					
ANR	619646	Condition	! lineBeginsWithOpenBrace	2087:7:60564:60587	619245	0	True				
ANR	619647	UnaryOperationExpression	! lineBeginsWithOpenBrace		619245	0					
ANR	619648	UnaryOperator	!		619245	0					
ANR	619649	Identifier	lineBeginsWithOpenBrace		619245	1					
ANR	619650	ExpressionStatement	++ indentCount	2088:4:60594:60607	619245	1	True				
ANR	619651	UnaryExpression	++ indentCount		619245	0					
ANR	619652	IncDec	++		619245	0					
ANR	619653	Identifier	indentCount		619245	1					
ANR	619654	IfStatement	if ( isInClassInitializer || isInEnumTypeID )		619245	7					
ANR	619655	Condition	isInClassInitializer || isInEnumTypeID	2092:5:60622:60659	619245	0	True				
ANR	619656	OrExpression	isInClassInitializer || isInEnumTypeID		619245	0		||			
ANR	619657	Identifier	isInClassInitializer		619245	0					
ANR	619658	Identifier	isInEnumTypeID		619245	1					
ANR	619659	CompoundStatement		78:1:2142:2142	619245	1					
ANR	619660	ExpressionStatement	indentCount += classInitializerIndents	2094:2:60667:60705	619245	0	True				
ANR	619661	AssignmentExpression	indentCount += classInitializerIndents		619245	0		+=			
ANR	619662	Identifier	indentCount		619245	0					
ANR	619663	Identifier	classInitializerIndents		619245	1					
ANR	619664	IfStatement	if ( isInEnum && lineBeginsWithComma && ! continuationIndentStack -> empty ( ) )		619245	8					
ANR	619665	Condition	isInEnum && lineBeginsWithComma && ! continuationIndentStack -> empty ( )	2097:5:60716:60783	619245	0	True				
ANR	619666	AndExpression	isInEnum && lineBeginsWithComma && ! continuationIndentStack -> empty ( )		619245	0		&&			
ANR	619667	Identifier	isInEnum		619245	0					
ANR	619668	AndExpression	lineBeginsWithComma && ! continuationIndentStack -> empty ( )		619245	1		&&			
ANR	619669	Identifier	lineBeginsWithComma		619245	0					
ANR	619670	UnaryOperationExpression	! continuationIndentStack -> empty ( )		619245	1					
ANR	619671	UnaryOperator	!		619245	0					
ANR	619672	CallExpression	continuationIndentStack -> empty ( )		619245	1					
ANR	619673	Callee	continuationIndentStack -> empty		619245	0					
ANR	619674	PtrMemberAccess	continuationIndentStack -> empty		619245	0					
ANR	619675	Identifier	continuationIndentStack		619245	0					
ANR	619676	Identifier	empty		619245	1					
ANR	619677	ArgumentList			619245	1					
ANR	619678	CompoundStatement		83:1:2266:2266	619245	1					
ANR	619679	ExpressionStatement	continuationIndentStack -> pop_back ( )	2100:2:60841:60876	619245	0	True				
ANR	619680	CallExpression	continuationIndentStack -> pop_back ( )		619245	0					
ANR	619681	Callee	continuationIndentStack -> pop_back		619245	0					
ANR	619682	PtrMemberAccess	continuationIndentStack -> pop_back		619245	0					
ANR	619683	Identifier	continuationIndentStack		619245	0					
ANR	619684	Identifier	pop_back		619245	1					
ANR	619685	ArgumentList			619245	1					
ANR	619686	ExpressionStatement	isContinuation = false	2101:2:60880:60902	619245	1	True				
ANR	619687	AssignmentExpression	isContinuation = false		619245	0		=			
ANR	619688	Identifier	isContinuation		619245	0					
ANR	619689	Identifier	false		619245	1					
ANR	619690	ExpressionStatement	spaceIndentCount = 0	2102:2:60906:60926	619245	2	True				
ANR	619691	AssignmentExpression	spaceIndentCount = 0		619245	0		=			
ANR	619692	Identifier	spaceIndentCount		619245	0					
ANR	619693	PrimaryExpression	0		619245	1					
ANR	619694	IfStatement	if ( isInObjCInterface )		619245	9					
ANR	619695	Condition	isInObjCInterface	2106:5:60981:60997	619245	0	True				
ANR	619696	Identifier	isInObjCInterface		619245	0					
ANR	619697	ExpressionStatement	++ indentCount	2107:2:61002:61015	619245	1	True				
ANR	619698	UnaryExpression	++ indentCount		619245	0					
ANR	619699	IncDec	++		619245	0					
ANR	619700	Identifier	indentCount		619245	1					
ANR	619701	IfStatement	if ( ! lineStartsInComment && isCStyle ( ) && isInClass && classIndent && headerStack -> size ( ) >= 2 && ( * headerStack ) [ headerStack -> size ( ) - 2 ] == & AS_CLASS && ( * headerStack ) [ headerStack -> size ( ) - 1 ] == & AS_OPEN_BRACE && lineBeginsWithCloseBrace && braceBlockStateStack -> back ( ) )		619245	10					
ANR	619702	Condition	! lineStartsInComment && isCStyle ( ) && isInClass && classIndent && headerStack -> size ( ) >= 2 && ( * headerStack ) [ headerStack -> size ( ) - 2 ] == & AS_CLASS && ( * headerStack ) [ headerStack -> size ( ) - 1 ] == & AS_OPEN_BRACE && lineBeginsWithCloseBrace && braceBlockStateStack -> back ( )	2110:5:61061:61399	619245	0	True				
ANR	619703	AndExpression	! lineStartsInComment && isCStyle ( ) && isInClass && classIndent && headerStack -> size ( ) >= 2 && ( * headerStack ) [ headerStack -> size ( ) - 2 ] == & AS_CLASS && ( * headerStack ) [ headerStack -> size ( ) - 1 ] == & AS_OPEN_BRACE && lineBeginsWithCloseBrace && braceBlockStateStack -> back ( )		619245	0		&&			
ANR	619704	UnaryOperationExpression	! lineStartsInComment		619245	0					
ANR	619705	UnaryOperator	!		619245	0					
ANR	619706	Identifier	lineStartsInComment		619245	1					
ANR	619707	AndExpression	isCStyle ( ) && isInClass && classIndent && headerStack -> size ( ) >= 2 && ( * headerStack ) [ headerStack -> size ( ) - 2 ] == & AS_CLASS && ( * headerStack ) [ headerStack -> size ( ) - 1 ] == & AS_OPEN_BRACE && lineBeginsWithCloseBrace && braceBlockStateStack -> back ( )		619245	1		&&			
ANR	619708	CallExpression	isCStyle ( )		619245	0					
ANR	619709	Callee	isCStyle		619245	0					
ANR	619710	Identifier	isCStyle		619245	0					
ANR	619711	ArgumentList			619245	1					
ANR	619712	AndExpression	isInClass && classIndent && headerStack -> size ( ) >= 2 && ( * headerStack ) [ headerStack -> size ( ) - 2 ] == & AS_CLASS && ( * headerStack ) [ headerStack -> size ( ) - 1 ] == & AS_OPEN_BRACE && lineBeginsWithCloseBrace && braceBlockStateStack -> back ( )		619245	1		&&			
ANR	619713	Identifier	isInClass		619245	0					
ANR	619714	AndExpression	classIndent && headerStack -> size ( ) >= 2 && ( * headerStack ) [ headerStack -> size ( ) - 2 ] == & AS_CLASS && ( * headerStack ) [ headerStack -> size ( ) - 1 ] == & AS_OPEN_BRACE && lineBeginsWithCloseBrace && braceBlockStateStack -> back ( )		619245	1		&&			
ANR	619715	Identifier	classIndent		619245	0					
ANR	619716	AndExpression	headerStack -> size ( ) >= 2 && ( * headerStack ) [ headerStack -> size ( ) - 2 ] == & AS_CLASS && ( * headerStack ) [ headerStack -> size ( ) - 1 ] == & AS_OPEN_BRACE && lineBeginsWithCloseBrace && braceBlockStateStack -> back ( )		619245	1		&&			
ANR	619717	RelationalExpression	headerStack -> size ( ) >= 2		619245	0		>=			
ANR	619718	CallExpression	headerStack -> size ( )		619245	0					
ANR	619719	Callee	headerStack -> size		619245	0					
ANR	619720	PtrMemberAccess	headerStack -> size		619245	0					
ANR	619721	Identifier	headerStack		619245	0					
ANR	619722	Identifier	size		619245	1					
ANR	619723	ArgumentList			619245	1					
ANR	619724	PrimaryExpression	2		619245	1					
ANR	619725	AndExpression	( * headerStack ) [ headerStack -> size ( ) - 2 ] == & AS_CLASS && ( * headerStack ) [ headerStack -> size ( ) - 1 ] == & AS_OPEN_BRACE && lineBeginsWithCloseBrace && braceBlockStateStack -> back ( )		619245	1		&&			
ANR	619726	EqualityExpression	( * headerStack ) [ headerStack -> size ( ) - 2 ] == & AS_CLASS		619245	0		==			
ANR	619727	ArrayIndexing	( * headerStack ) [ headerStack -> size ( ) - 2 ]		619245	0					
ANR	619728	UnaryOperationExpression	* headerStack		619245	0					
ANR	619729	UnaryOperator	*		619245	0					
ANR	619730	Identifier	headerStack		619245	1					
ANR	619731	AdditiveExpression	headerStack -> size ( ) - 2		619245	1		-			
ANR	619732	CallExpression	headerStack -> size ( )		619245	0					
ANR	619733	Callee	headerStack -> size		619245	0					
ANR	619734	PtrMemberAccess	headerStack -> size		619245	0					
ANR	619735	Identifier	headerStack		619245	0					
ANR	619736	Identifier	size		619245	1					
ANR	619737	ArgumentList			619245	1					
ANR	619738	PrimaryExpression	2		619245	1					
ANR	619739	UnaryOperationExpression	& AS_CLASS		619245	1					
ANR	619740	UnaryOperator	&		619245	0					
ANR	619741	Identifier	AS_CLASS		619245	1					
ANR	619742	AndExpression	( * headerStack ) [ headerStack -> size ( ) - 1 ] == & AS_OPEN_BRACE && lineBeginsWithCloseBrace && braceBlockStateStack -> back ( )		619245	1		&&			
ANR	619743	EqualityExpression	( * headerStack ) [ headerStack -> size ( ) - 1 ] == & AS_OPEN_BRACE		619245	0		==			
ANR	619744	ArrayIndexing	( * headerStack ) [ headerStack -> size ( ) - 1 ]		619245	0					
ANR	619745	UnaryOperationExpression	* headerStack		619245	0					
ANR	619746	UnaryOperator	*		619245	0					
ANR	619747	Identifier	headerStack		619245	1					
ANR	619748	AdditiveExpression	headerStack -> size ( ) - 1		619245	1		-			
ANR	619749	CallExpression	headerStack -> size ( )		619245	0					
ANR	619750	Callee	headerStack -> size		619245	0					
ANR	619751	PtrMemberAccess	headerStack -> size		619245	0					
ANR	619752	Identifier	headerStack		619245	0					
ANR	619753	Identifier	size		619245	1					
ANR	619754	ArgumentList			619245	1					
ANR	619755	PrimaryExpression	1		619245	1					
ANR	619756	UnaryOperationExpression	& AS_OPEN_BRACE		619245	1					
ANR	619757	UnaryOperator	&		619245	0					
ANR	619758	Identifier	AS_OPEN_BRACE		619245	1					
ANR	619759	AndExpression	lineBeginsWithCloseBrace && braceBlockStateStack -> back ( )		619245	1		&&			
ANR	619760	Identifier	lineBeginsWithCloseBrace		619245	0					
ANR	619761	CallExpression	braceBlockStateStack -> back ( )		619245	1					
ANR	619762	Callee	braceBlockStateStack -> back		619245	0					
ANR	619763	PtrMemberAccess	braceBlockStateStack -> back		619245	0					
ANR	619764	Identifier	braceBlockStateStack		619245	0					
ANR	619765	Identifier	back		619245	1					
ANR	619766	ArgumentList			619245	1					
ANR	619767	ExpressionStatement	-- indentCount	2119:2:61404:61417	619245	1	True				
ANR	619768	UnaryExpression	-- indentCount		619245	0					
ANR	619769	IncDec	--		619245	0					
ANR	619770	Identifier	indentCount		619245	1					
ANR	619771	ElseStatement	else		619245	0					
ANR	619772	IfStatement	if ( ! lineStartsInComment && isInSwitch && switchIndent && headerStack -> size ( ) >= 2 && ( * headerStack ) [ headerStack -> size ( ) - 2 ] == & AS_SWITCH && ( * headerStack ) [ headerStack -> size ( ) - 1 ] == & AS_OPEN_BRACE && lineBeginsWithCloseBrace )		619245	0					
ANR	619773	Condition	! lineStartsInComment && isInSwitch && switchIndent && headerStack -> size ( ) >= 2 && ( * headerStack ) [ headerStack -> size ( ) - 2 ] == & AS_SWITCH && ( * headerStack ) [ headerStack -> size ( ) - 1 ] == & AS_OPEN_BRACE && lineBeginsWithCloseBrace	2122:10:61479:61762	619245	0	True				
ANR	619774	AndExpression	! lineStartsInComment && isInSwitch && switchIndent && headerStack -> size ( ) >= 2 && ( * headerStack ) [ headerStack -> size ( ) - 2 ] == & AS_SWITCH && ( * headerStack ) [ headerStack -> size ( ) - 1 ] == & AS_OPEN_BRACE && lineBeginsWithCloseBrace		619245	0		&&			
ANR	619775	UnaryOperationExpression	! lineStartsInComment		619245	0					
ANR	619776	UnaryOperator	!		619245	0					
ANR	619777	Identifier	lineStartsInComment		619245	1					
ANR	619778	AndExpression	isInSwitch && switchIndent && headerStack -> size ( ) >= 2 && ( * headerStack ) [ headerStack -> size ( ) - 2 ] == & AS_SWITCH && ( * headerStack ) [ headerStack -> size ( ) - 1 ] == & AS_OPEN_BRACE && lineBeginsWithCloseBrace		619245	1		&&			
ANR	619779	Identifier	isInSwitch		619245	0					
ANR	619780	AndExpression	switchIndent && headerStack -> size ( ) >= 2 && ( * headerStack ) [ headerStack -> size ( ) - 2 ] == & AS_SWITCH && ( * headerStack ) [ headerStack -> size ( ) - 1 ] == & AS_OPEN_BRACE && lineBeginsWithCloseBrace		619245	1		&&			
ANR	619781	Identifier	switchIndent		619245	0					
ANR	619782	AndExpression	headerStack -> size ( ) >= 2 && ( * headerStack ) [ headerStack -> size ( ) - 2 ] == & AS_SWITCH && ( * headerStack ) [ headerStack -> size ( ) - 1 ] == & AS_OPEN_BRACE && lineBeginsWithCloseBrace		619245	1		&&			
ANR	619783	RelationalExpression	headerStack -> size ( ) >= 2		619245	0		>=			
ANR	619784	CallExpression	headerStack -> size ( )		619245	0					
ANR	619785	Callee	headerStack -> size		619245	0					
ANR	619786	PtrMemberAccess	headerStack -> size		619245	0					
ANR	619787	Identifier	headerStack		619245	0					
ANR	619788	Identifier	size		619245	1					
ANR	619789	ArgumentList			619245	1					
ANR	619790	PrimaryExpression	2		619245	1					
ANR	619791	AndExpression	( * headerStack ) [ headerStack -> size ( ) - 2 ] == & AS_SWITCH && ( * headerStack ) [ headerStack -> size ( ) - 1 ] == & AS_OPEN_BRACE && lineBeginsWithCloseBrace		619245	1		&&			
ANR	619792	EqualityExpression	( * headerStack ) [ headerStack -> size ( ) - 2 ] == & AS_SWITCH		619245	0		==			
ANR	619793	ArrayIndexing	( * headerStack ) [ headerStack -> size ( ) - 2 ]		619245	0					
ANR	619794	UnaryOperationExpression	* headerStack		619245	0					
ANR	619795	UnaryOperator	*		619245	0					
ANR	619796	Identifier	headerStack		619245	1					
ANR	619797	AdditiveExpression	headerStack -> size ( ) - 2		619245	1		-			
ANR	619798	CallExpression	headerStack -> size ( )		619245	0					
ANR	619799	Callee	headerStack -> size		619245	0					
ANR	619800	PtrMemberAccess	headerStack -> size		619245	0					
ANR	619801	Identifier	headerStack		619245	0					
ANR	619802	Identifier	size		619245	1					
ANR	619803	ArgumentList			619245	1					
ANR	619804	PrimaryExpression	2		619245	1					
ANR	619805	UnaryOperationExpression	& AS_SWITCH		619245	1					
ANR	619806	UnaryOperator	&		619245	0					
ANR	619807	Identifier	AS_SWITCH		619245	1					
ANR	619808	AndExpression	( * headerStack ) [ headerStack -> size ( ) - 1 ] == & AS_OPEN_BRACE && lineBeginsWithCloseBrace		619245	1		&&			
ANR	619809	EqualityExpression	( * headerStack ) [ headerStack -> size ( ) - 1 ] == & AS_OPEN_BRACE		619245	0		==			
ANR	619810	ArrayIndexing	( * headerStack ) [ headerStack -> size ( ) - 1 ]		619245	0					
ANR	619811	UnaryOperationExpression	* headerStack		619245	0					
ANR	619812	UnaryOperator	*		619245	0					
ANR	619813	Identifier	headerStack		619245	1					
ANR	619814	AdditiveExpression	headerStack -> size ( ) - 1		619245	1		-			
ANR	619815	CallExpression	headerStack -> size ( )		619245	0					
ANR	619816	Callee	headerStack -> size		619245	0					
ANR	619817	PtrMemberAccess	headerStack -> size		619245	0					
ANR	619818	Identifier	headerStack		619245	0					
ANR	619819	Identifier	size		619245	1					
ANR	619820	ArgumentList			619245	1					
ANR	619821	PrimaryExpression	1		619245	1					
ANR	619822	UnaryOperationExpression	& AS_OPEN_BRACE		619245	1					
ANR	619823	UnaryOperator	&		619245	0					
ANR	619824	Identifier	AS_OPEN_BRACE		619245	1					
ANR	619825	Identifier	lineBeginsWithCloseBrace		619245	1					
ANR	619826	ExpressionStatement	-- indentCount	2129:2:61767:61780	619245	1	True				
ANR	619827	UnaryExpression	-- indentCount		619245	0					
ANR	619828	IncDec	--		619245	0					
ANR	619829	Identifier	indentCount		619245	1					
ANR	619830	IfStatement	if ( isInClass && classIndent && isInRunInComment && ! lineOpensWithComment && headerStack -> size ( ) > 1 && ( * headerStack ) [ headerStack -> size ( ) - 2 ] == & AS_CLASS )		619245	11					
ANR	619831	Condition	isInClass && classIndent && isInRunInComment && ! lineOpensWithComment && headerStack -> size ( ) > 1 && ( * headerStack ) [ headerStack -> size ( ) - 2 ] == & AS_CLASS	2132:5:61861:62057	619245	0	True				
ANR	619832	AndExpression	isInClass && classIndent && isInRunInComment && ! lineOpensWithComment && headerStack -> size ( ) > 1 && ( * headerStack ) [ headerStack -> size ( ) - 2 ] == & AS_CLASS		619245	0		&&			
ANR	619833	Identifier	isInClass		619245	0					
ANR	619834	AndExpression	classIndent && isInRunInComment && ! lineOpensWithComment && headerStack -> size ( ) > 1 && ( * headerStack ) [ headerStack -> size ( ) - 2 ] == & AS_CLASS		619245	1		&&			
ANR	619835	Identifier	classIndent		619245	0					
ANR	619836	AndExpression	isInRunInComment && ! lineOpensWithComment && headerStack -> size ( ) > 1 && ( * headerStack ) [ headerStack -> size ( ) - 2 ] == & AS_CLASS		619245	1		&&			
ANR	619837	Identifier	isInRunInComment		619245	0					
ANR	619838	AndExpression	! lineOpensWithComment && headerStack -> size ( ) > 1 && ( * headerStack ) [ headerStack -> size ( ) - 2 ] == & AS_CLASS		619245	1		&&			
ANR	619839	UnaryOperationExpression	! lineOpensWithComment		619245	0					
ANR	619840	UnaryOperator	!		619245	0					
ANR	619841	Identifier	lineOpensWithComment		619245	1					
ANR	619842	AndExpression	headerStack -> size ( ) > 1 && ( * headerStack ) [ headerStack -> size ( ) - 2 ] == & AS_CLASS		619245	1		&&			
ANR	619843	RelationalExpression	headerStack -> size ( ) > 1		619245	0		>			
ANR	619844	CallExpression	headerStack -> size ( )		619245	0					
ANR	619845	Callee	headerStack -> size		619245	0					
ANR	619846	PtrMemberAccess	headerStack -> size		619245	0					
ANR	619847	Identifier	headerStack		619245	0					
ANR	619848	Identifier	size		619245	1					
ANR	619849	ArgumentList			619245	1					
ANR	619850	PrimaryExpression	1		619245	1					
ANR	619851	EqualityExpression	( * headerStack ) [ headerStack -> size ( ) - 2 ] == & AS_CLASS		619245	1		==			
ANR	619852	ArrayIndexing	( * headerStack ) [ headerStack -> size ( ) - 2 ]		619245	0					
ANR	619853	UnaryOperationExpression	* headerStack		619245	0					
ANR	619854	UnaryOperator	*		619245	0					
ANR	619855	Identifier	headerStack		619245	1					
ANR	619856	AdditiveExpression	headerStack -> size ( ) - 2		619245	1		-			
ANR	619857	CallExpression	headerStack -> size ( )		619245	0					
ANR	619858	Callee	headerStack -> size		619245	0					
ANR	619859	PtrMemberAccess	headerStack -> size		619245	0					
ANR	619860	Identifier	headerStack		619245	0					
ANR	619861	Identifier	size		619245	1					
ANR	619862	ArgumentList			619245	1					
ANR	619863	PrimaryExpression	2		619245	1					
ANR	619864	UnaryOperationExpression	& AS_CLASS		619245	1					
ANR	619865	UnaryOperator	&		619245	0					
ANR	619866	Identifier	AS_CLASS		619245	1					
ANR	619867	ExpressionStatement	-- indentCount	2138:2:62062:62075	619245	1	True				
ANR	619868	UnaryExpression	-- indentCount		619245	0					
ANR	619869	IncDec	--		619245	0					
ANR	619870	Identifier	indentCount		619245	1					
ANR	619871	IfStatement	if ( isInConditional )		619245	12					
ANR	619872	Condition	isInConditional	2140:5:62083:62097	619245	0	True				
ANR	619873	Identifier	isInConditional		619245	0					
ANR	619874	ExpressionStatement	-- indentCount	2141:2:62102:62115	619245	1	True				
ANR	619875	UnaryExpression	-- indentCount		619245	0					
ANR	619876	IncDec	--		619245	0					
ANR	619877	Identifier	indentCount		619245	1					
ANR	619878	IfStatement	if ( g_preprocessorCppExternCBrace >= 4 )		619245	13					
ANR	619879	Condition	g_preprocessorCppExternCBrace >= 4	2142:5:62122:62155	619245	0	True				
ANR	619880	RelationalExpression	g_preprocessorCppExternCBrace >= 4		619245	0		>=			
ANR	619881	Identifier	g_preprocessorCppExternCBrace		619245	0					
ANR	619882	PrimaryExpression	4		619245	1					
ANR	619883	ExpressionStatement	-- indentCount	2143:2:62160:62173	619245	1	True				
ANR	619884	UnaryExpression	-- indentCount		619245	0					
ANR	619885	IncDec	--		619245	0					
ANR	619886	Identifier	indentCount		619245	1					
ANR	619887	ReturnType	void		619245	1					
ANR	619888	Identifier	ASBeautifier :: computePreliminaryIndentation		619245	2					
ANR	619889	ParameterList			619245	3					
ANR	619890	CFGEntryNode	ENTRY		619245		True				
ANR	619891	CFGExitNode	EXIT		619245		True				
ANR	619892	Symbol	lineOpensWithLineComment		619245						
ANR	619893	Symbol	continuationIndentStack -> back		619245						
ANR	619894	Symbol	lineOpensWithComment		619245						
ANR	619895	Symbol	isContinuation		619245						
ANR	619896	Symbol	braceBlockStateStack -> back		619245						
ANR	619897	Symbol	headerStack		619245						
ANR	619898	Symbol	spaceIndentObjCMethodAlignment		619245						
ANR	619899	Symbol	headerStack -> size		619245						
ANR	619900	Symbol	isInEnum		619245						
ANR	619901	Symbol	* headerStack		619245						
ANR	619902	Symbol	braceBlockStateStack		619245						
ANR	619903	Symbol	g_preprocessorCppExternCBrace		619245						
ANR	619904	Symbol	isInEnumTypeID		619245						
ANR	619905	Symbol	& AS_NAMESPACE		619245						
ANR	619906	Symbol	lineBeginsWithCloseBrace		619245						
ANR	619907	Symbol	lineBeginsWithComma		619245						
ANR	619908	Symbol	& AS_UNION		619245						
ANR	619909	Symbol	switchIndent		619245						
ANR	619910	Symbol	isInConditional		619245						
ANR	619911	Symbol	isInClassInitializer		619245						
ANR	619912	Symbol	isInRunInComment		619245						
ANR	619913	Symbol	spaceIndentCount		619245						
ANR	619914	Symbol	true		619245						
ANR	619915	Symbol	continuationIndentStack -> empty		619245						
ANR	619916	Symbol	continuationIndentStack		619245						
ANR	619917	Symbol	isCStyle		619245						
ANR	619918	Symbol	isInClass		619245						
ANR	619919	Symbol	* headerStack -> size		619245						
ANR	619920	Symbol	blockIndent		619245						
ANR	619921	Symbol	lineBeginsWithOpenBrace		619245						
ANR	619922	Symbol	classInitializerIndents		619245						
ANR	619923	Symbol	& AS_MODULE		619245						
ANR	619924	Symbol	& AS_STRUCT		619245						
ANR	619925	Symbol	namespaceIndent		619245						
ANR	619926	Symbol	* continuationIndentStack		619245						
ANR	619927	Symbol	* * headerStack		619245						
ANR	619928	Symbol	& AS_INTERFACE		619245						
ANR	619929	Symbol	* braceBlockStateStack		619245						
ANR	619930	Symbol	& AS_OPEN_BRACE		619245						
ANR	619931	Symbol	isInObjCMethodDefinition		619245						
ANR	619932	Symbol	isInSwitch		619245						
ANR	619933	Symbol	isInClassHeaderTab		619245						
ANR	619934	Symbol	& AS_THROWS		619245						
ANR	619935	Symbol	& AS_SWITCH		619245						
ANR	619936	Symbol	false		619245						
ANR	619937	Symbol	i		619245						
ANR	619938	Symbol	isInObjCInterface		619245						
ANR	619939	Symbol	indentCount		619245						
ANR	619940	Symbol	& AS_STATIC		619245						
ANR	619941	Symbol	isInClassHeader		619245						
ANR	619942	Symbol	lineStartsInComment		619245						
ANR	619943	Symbol	* i		619245						
ANR	619944	Symbol	& AS_CLASS		619245						
ANR	619945	Symbol	isJavaStyle		619245						
ANR	619946	Symbol	classIndent		619245						
ANR	619947	Function	ASBeautifier :: adjustParsedLineIndentation	2146:0:62178:65006							
ANR	619948	FunctionDef	"ASBeautifier :: adjustParsedLineIndentation (size_t iPrelim , bool isInExtraHeaderIndent)"		619947	0					
ANR	619949	CompoundStatement		2147:0:62269:65006	619947	0					
ANR	619950	IfStatement	if ( lineStartsInComment )		619947	0					
ANR	619951	Condition	lineStartsInComment	2148:5:62276:62294	619947	0	True				
ANR	619952	Identifier	lineStartsInComment		619947	0					
ANR	619953	ReturnStatement	return ;	2149:2:62299:62305	619947	1	True				
ANR	619954	IfStatement	if ( ! blockIndent && lineBeginsWithOpenBrace && headerStack -> size ( ) < iPrelim && isInExtraHeaderIndent && ( lineOpeningBlocksNum > 0 && lineOpeningBlocksNum <= lineClosingBlocksNum ) && shouldIndentBracedLine )		619947	1					
ANR	619955	Condition	! blockIndent && lineBeginsWithOpenBrace && headerStack -> size ( ) < iPrelim && isInExtraHeaderIndent && ( lineOpeningBlocksNum > 0 && lineOpeningBlocksNum <= lineClosingBlocksNum ) && shouldIndentBracedLine	2152:5:62366:62611	619947	0	True				
ANR	619956	AndExpression	! blockIndent && lineBeginsWithOpenBrace && headerStack -> size ( ) < iPrelim && isInExtraHeaderIndent && ( lineOpeningBlocksNum > 0 && lineOpeningBlocksNum <= lineClosingBlocksNum ) && shouldIndentBracedLine		619947	0		&&			
ANR	619957	UnaryOperationExpression	! blockIndent		619947	0					
ANR	619958	UnaryOperator	!		619947	0					
ANR	619959	Identifier	blockIndent		619947	1					
ANR	619960	AndExpression	lineBeginsWithOpenBrace && headerStack -> size ( ) < iPrelim && isInExtraHeaderIndent && ( lineOpeningBlocksNum > 0 && lineOpeningBlocksNum <= lineClosingBlocksNum ) && shouldIndentBracedLine		619947	1		&&			
ANR	619961	Identifier	lineBeginsWithOpenBrace		619947	0					
ANR	619962	AndExpression	headerStack -> size ( ) < iPrelim && isInExtraHeaderIndent && ( lineOpeningBlocksNum > 0 && lineOpeningBlocksNum <= lineClosingBlocksNum ) && shouldIndentBracedLine		619947	1		&&			
ANR	619963	RelationalExpression	headerStack -> size ( ) < iPrelim		619947	0		<			
ANR	619964	CallExpression	headerStack -> size ( )		619947	0					
ANR	619965	Callee	headerStack -> size		619947	0					
ANR	619966	PtrMemberAccess	headerStack -> size		619947	0					
ANR	619967	Identifier	headerStack		619947	0					
ANR	619968	Identifier	size		619947	1					
ANR	619969	ArgumentList			619947	1					
ANR	619970	Identifier	iPrelim		619947	1					
ANR	619971	AndExpression	isInExtraHeaderIndent && ( lineOpeningBlocksNum > 0 && lineOpeningBlocksNum <= lineClosingBlocksNum ) && shouldIndentBracedLine		619947	1		&&			
ANR	619972	Identifier	isInExtraHeaderIndent		619947	0					
ANR	619973	AndExpression	( lineOpeningBlocksNum > 0 && lineOpeningBlocksNum <= lineClosingBlocksNum ) && shouldIndentBracedLine		619947	1		&&			
ANR	619974	AndExpression	lineOpeningBlocksNum > 0 && lineOpeningBlocksNum <= lineClosingBlocksNum		619947	0		&&			
ANR	619975	RelationalExpression	lineOpeningBlocksNum > 0		619947	0		>			
ANR	619976	Identifier	lineOpeningBlocksNum		619947	0					
ANR	619977	PrimaryExpression	0		619947	1					
ANR	619978	RelationalExpression	lineOpeningBlocksNum <= lineClosingBlocksNum		619947	1		<=			
ANR	619979	Identifier	lineOpeningBlocksNum		619947	0					
ANR	619980	Identifier	lineClosingBlocksNum		619947	1					
ANR	619981	Identifier	shouldIndentBracedLine		619947	1					
ANR	619982	ExpressionStatement	-- indentCount	2158:2:62616:62629	619947	1	True				
ANR	619983	UnaryExpression	-- indentCount		619947	0					
ANR	619984	IncDec	--		619947	0					
ANR	619985	Identifier	indentCount		619947	1					
ANR	619986	ElseStatement	else		619947	0					
ANR	619987	IfStatement	if ( ! blockIndent && lineBeginsWithOpenBrace && ! ( lineOpeningBlocksNum > 0 && lineOpeningBlocksNum <= lineClosingBlocksNum ) && ( headerStack -> size ( ) > 1 && ( * headerStack ) [ headerStack -> size ( ) - 2 ] != & AS_OPEN_BRACE ) && shouldIndentBracedLine )		619947	0					
ANR	619988	Condition	! blockIndent && lineBeginsWithOpenBrace && ! ( lineOpeningBlocksNum > 0 && lineOpeningBlocksNum <= lineClosingBlocksNum ) && ( headerStack -> size ( ) > 1 && ( * headerStack ) [ headerStack -> size ( ) - 2 ] != & AS_OPEN_BRACE ) && shouldIndentBracedLine	2165:10:62841:63114	619947	0	True				
ANR	619989	AndExpression	! blockIndent && lineBeginsWithOpenBrace && ! ( lineOpeningBlocksNum > 0 && lineOpeningBlocksNum <= lineClosingBlocksNum ) && ( headerStack -> size ( ) > 1 && ( * headerStack ) [ headerStack -> size ( ) - 2 ] != & AS_OPEN_BRACE ) && shouldIndentBracedLine		619947	0		&&			
ANR	619990	UnaryOperationExpression	! blockIndent		619947	0					
ANR	619991	UnaryOperator	!		619947	0					
ANR	619992	Identifier	blockIndent		619947	1					
ANR	619993	AndExpression	lineBeginsWithOpenBrace && ! ( lineOpeningBlocksNum > 0 && lineOpeningBlocksNum <= lineClosingBlocksNum ) && ( headerStack -> size ( ) > 1 && ( * headerStack ) [ headerStack -> size ( ) - 2 ] != & AS_OPEN_BRACE ) && shouldIndentBracedLine		619947	1		&&			
ANR	619994	Identifier	lineBeginsWithOpenBrace		619947	0					
ANR	619995	AndExpression	! ( lineOpeningBlocksNum > 0 && lineOpeningBlocksNum <= lineClosingBlocksNum ) && ( headerStack -> size ( ) > 1 && ( * headerStack ) [ headerStack -> size ( ) - 2 ] != & AS_OPEN_BRACE ) && shouldIndentBracedLine		619947	1		&&			
ANR	619996	UnaryOperationExpression	! ( lineOpeningBlocksNum > 0 && lineOpeningBlocksNum <= lineClosingBlocksNum )		619947	0					
ANR	619997	UnaryOperator	!		619947	0					
ANR	619998	AndExpression	lineOpeningBlocksNum > 0 && lineOpeningBlocksNum <= lineClosingBlocksNum		619947	1		&&			
ANR	619999	RelationalExpression	lineOpeningBlocksNum > 0		619947	0		>			
ANR	620000	Identifier	lineOpeningBlocksNum		619947	0					
ANR	620001	PrimaryExpression	0		619947	1					
ANR	620002	RelationalExpression	lineOpeningBlocksNum <= lineClosingBlocksNum		619947	1		<=			
ANR	620003	Identifier	lineOpeningBlocksNum		619947	0					
ANR	620004	Identifier	lineClosingBlocksNum		619947	1					
ANR	620005	AndExpression	( headerStack -> size ( ) > 1 && ( * headerStack ) [ headerStack -> size ( ) - 2 ] != & AS_OPEN_BRACE ) && shouldIndentBracedLine		619947	1		&&			
ANR	620006	AndExpression	headerStack -> size ( ) > 1 && ( * headerStack ) [ headerStack -> size ( ) - 2 ] != & AS_OPEN_BRACE		619947	0		&&			
ANR	620007	RelationalExpression	headerStack -> size ( ) > 1		619947	0		>			
ANR	620008	CallExpression	headerStack -> size ( )		619947	0					
ANR	620009	Callee	headerStack -> size		619947	0					
ANR	620010	PtrMemberAccess	headerStack -> size		619947	0					
ANR	620011	Identifier	headerStack		619947	0					
ANR	620012	Identifier	size		619947	1					
ANR	620013	ArgumentList			619947	1					
ANR	620014	PrimaryExpression	1		619947	1					
ANR	620015	EqualityExpression	( * headerStack ) [ headerStack -> size ( ) - 2 ] != & AS_OPEN_BRACE		619947	1		!=			
ANR	620016	ArrayIndexing	( * headerStack ) [ headerStack -> size ( ) - 2 ]		619947	0					
ANR	620017	UnaryOperationExpression	* headerStack		619947	0					
ANR	620018	UnaryOperator	*		619947	0					
ANR	620019	Identifier	headerStack		619947	1					
ANR	620020	AdditiveExpression	headerStack -> size ( ) - 2		619947	1		-			
ANR	620021	CallExpression	headerStack -> size ( )		619947	0					
ANR	620022	Callee	headerStack -> size		619947	0					
ANR	620023	PtrMemberAccess	headerStack -> size		619947	0					
ANR	620024	Identifier	headerStack		619947	0					
ANR	620025	Identifier	size		619947	1					
ANR	620026	ArgumentList			619947	1					
ANR	620027	PrimaryExpression	2		619947	1					
ANR	620028	UnaryOperationExpression	& AS_OPEN_BRACE		619947	1					
ANR	620029	UnaryOperator	&		619947	0					
ANR	620030	Identifier	AS_OPEN_BRACE		619947	1					
ANR	620031	Identifier	shouldIndentBracedLine		619947	1					
ANR	620032	ExpressionStatement	-- indentCount	2170:2:63119:63132	619947	1	True				
ANR	620033	UnaryExpression	-- indentCount		619947	0					
ANR	620034	IncDec	--		619947	0					
ANR	620035	Identifier	indentCount		619947	1					
ANR	620036	ElseStatement	else		619947	0					
ANR	620037	IfStatement	if ( headerStack -> size ( ) > iPrelim + 1 && ! blockIndent && lineBeginsWithOpenBrace && ! ( lineOpeningBlocksNum > 0 && lineOpeningBlocksNum <= lineClosingBlocksNum ) && ( headerStack -> size ( ) > 2 && ( * headerStack ) [ headerStack -> size ( ) - 3 ] != & AS_OPEN_BRACE ) && shouldIndentBracedLine )		619947	0					
ANR	620038	Condition	headerStack -> size ( ) > iPrelim + 1 && ! blockIndent && lineBeginsWithOpenBrace && ! ( lineOpeningBlocksNum > 0 && lineOpeningBlocksNum <= lineClosingBlocksNum ) && ( headerStack -> size ( ) > 2 && ( * headerStack ) [ headerStack -> size ( ) - 3 ] != & AS_OPEN_BRACE ) && shouldIndentBracedLine	2173:10:63236:63556	619947	0	True				
ANR	620039	AndExpression	headerStack -> size ( ) > iPrelim + 1 && ! blockIndent && lineBeginsWithOpenBrace && ! ( lineOpeningBlocksNum > 0 && lineOpeningBlocksNum <= lineClosingBlocksNum ) && ( headerStack -> size ( ) > 2 && ( * headerStack ) [ headerStack -> size ( ) - 3 ] != & AS_OPEN_BRACE ) && shouldIndentBracedLine		619947	0		&&			
ANR	620040	RelationalExpression	headerStack -> size ( ) > iPrelim + 1		619947	0		>			
ANR	620041	CallExpression	headerStack -> size ( )		619947	0					
ANR	620042	Callee	headerStack -> size		619947	0					
ANR	620043	PtrMemberAccess	headerStack -> size		619947	0					
ANR	620044	Identifier	headerStack		619947	0					
ANR	620045	Identifier	size		619947	1					
ANR	620046	ArgumentList			619947	1					
ANR	620047	AdditiveExpression	iPrelim + 1		619947	1		+			
ANR	620048	Identifier	iPrelim		619947	0					
ANR	620049	PrimaryExpression	1		619947	1					
ANR	620050	AndExpression	! blockIndent && lineBeginsWithOpenBrace && ! ( lineOpeningBlocksNum > 0 && lineOpeningBlocksNum <= lineClosingBlocksNum ) && ( headerStack -> size ( ) > 2 && ( * headerStack ) [ headerStack -> size ( ) - 3 ] != & AS_OPEN_BRACE ) && shouldIndentBracedLine		619947	1		&&			
ANR	620051	UnaryOperationExpression	! blockIndent		619947	0					
ANR	620052	UnaryOperator	!		619947	0					
ANR	620053	Identifier	blockIndent		619947	1					
ANR	620054	AndExpression	lineBeginsWithOpenBrace && ! ( lineOpeningBlocksNum > 0 && lineOpeningBlocksNum <= lineClosingBlocksNum ) && ( headerStack -> size ( ) > 2 && ( * headerStack ) [ headerStack -> size ( ) - 3 ] != & AS_OPEN_BRACE ) && shouldIndentBracedLine		619947	1		&&			
ANR	620055	Identifier	lineBeginsWithOpenBrace		619947	0					
ANR	620056	AndExpression	! ( lineOpeningBlocksNum > 0 && lineOpeningBlocksNum <= lineClosingBlocksNum ) && ( headerStack -> size ( ) > 2 && ( * headerStack ) [ headerStack -> size ( ) - 3 ] != & AS_OPEN_BRACE ) && shouldIndentBracedLine		619947	1		&&			
ANR	620057	UnaryOperationExpression	! ( lineOpeningBlocksNum > 0 && lineOpeningBlocksNum <= lineClosingBlocksNum )		619947	0					
ANR	620058	UnaryOperator	!		619947	0					
ANR	620059	AndExpression	lineOpeningBlocksNum > 0 && lineOpeningBlocksNum <= lineClosingBlocksNum		619947	1		&&			
ANR	620060	RelationalExpression	lineOpeningBlocksNum > 0		619947	0		>			
ANR	620061	Identifier	lineOpeningBlocksNum		619947	0					
ANR	620062	PrimaryExpression	0		619947	1					
ANR	620063	RelationalExpression	lineOpeningBlocksNum <= lineClosingBlocksNum		619947	1		<=			
ANR	620064	Identifier	lineOpeningBlocksNum		619947	0					
ANR	620065	Identifier	lineClosingBlocksNum		619947	1					
ANR	620066	AndExpression	( headerStack -> size ( ) > 2 && ( * headerStack ) [ headerStack -> size ( ) - 3 ] != & AS_OPEN_BRACE ) && shouldIndentBracedLine		619947	1		&&			
ANR	620067	AndExpression	headerStack -> size ( ) > 2 && ( * headerStack ) [ headerStack -> size ( ) - 3 ] != & AS_OPEN_BRACE		619947	0		&&			
ANR	620068	RelationalExpression	headerStack -> size ( ) > 2		619947	0		>			
ANR	620069	CallExpression	headerStack -> size ( )		619947	0					
ANR	620070	Callee	headerStack -> size		619947	0					
ANR	620071	PtrMemberAccess	headerStack -> size		619947	0					
ANR	620072	Identifier	headerStack		619947	0					
ANR	620073	Identifier	size		619947	1					
ANR	620074	ArgumentList			619947	1					
ANR	620075	PrimaryExpression	2		619947	1					
ANR	620076	EqualityExpression	( * headerStack ) [ headerStack -> size ( ) - 3 ] != & AS_OPEN_BRACE		619947	1		!=			
ANR	620077	ArrayIndexing	( * headerStack ) [ headerStack -> size ( ) - 3 ]		619947	0					
ANR	620078	UnaryOperationExpression	* headerStack		619947	0					
ANR	620079	UnaryOperator	*		619947	0					
ANR	620080	Identifier	headerStack		619947	1					
ANR	620081	AdditiveExpression	headerStack -> size ( ) - 3		619947	1		-			
ANR	620082	CallExpression	headerStack -> size ( )		619947	0					
ANR	620083	Callee	headerStack -> size		619947	0					
ANR	620084	PtrMemberAccess	headerStack -> size		619947	0					
ANR	620085	Identifier	headerStack		619947	0					
ANR	620086	Identifier	size		619947	1					
ANR	620087	ArgumentList			619947	1					
ANR	620088	PrimaryExpression	3		619947	1					
ANR	620089	UnaryOperationExpression	& AS_OPEN_BRACE		619947	1					
ANR	620090	UnaryOperator	&		619947	0					
ANR	620091	Identifier	AS_OPEN_BRACE		619947	1					
ANR	620092	Identifier	shouldIndentBracedLine		619947	1					
ANR	620093	ExpressionStatement	-- indentCount	2179:2:63561:63574	619947	1	True				
ANR	620094	UnaryExpression	-- indentCount		619947	0					
ANR	620095	IncDec	--		619947	0					
ANR	620096	Identifier	indentCount		619947	1					
ANR	620097	ElseStatement	else		619947	0					
ANR	620098	IfStatement	if ( lineBeginsWithCloseBrace && shouldIndentBracedLine )		619947	0					
ANR	620099	Condition	lineBeginsWithCloseBrace && shouldIndentBracedLine	2182:10:63619:63678	619947	0	True				
ANR	620100	AndExpression	lineBeginsWithCloseBrace && shouldIndentBracedLine		619947	0		&&			
ANR	620101	Identifier	lineBeginsWithCloseBrace		619947	0					
ANR	620102	Identifier	shouldIndentBracedLine		619947	1					
ANR	620103	ExpressionStatement	-- indentCount	2184:2:63683:63696	619947	1	True				
ANR	620104	UnaryExpression	-- indentCount		619947	0					
ANR	620105	IncDec	--		619947	0					
ANR	620106	Identifier	indentCount		619947	1					
ANR	620107	ElseStatement	else		619947	0					
ANR	620108	IfStatement	if ( lineOpeningBlocksNum > 0 && lineOpeningBlocksNum == lineClosingBlocksNum && previousLineProbationTab )		619947	0					
ANR	620109	Condition	lineOpeningBlocksNum > 0 && lineOpeningBlocksNum == lineClosingBlocksNum && previousLineProbationTab	2187:10:63749:63868	619947	0	True				
ANR	620110	AndExpression	lineOpeningBlocksNum > 0 && lineOpeningBlocksNum == lineClosingBlocksNum && previousLineProbationTab		619947	0		&&			
ANR	620111	RelationalExpression	lineOpeningBlocksNum > 0		619947	0		>			
ANR	620112	Identifier	lineOpeningBlocksNum		619947	0					
ANR	620113	PrimaryExpression	0		619947	1					
ANR	620114	AndExpression	lineOpeningBlocksNum == lineClosingBlocksNum && previousLineProbationTab		619947	1		&&			
ANR	620115	EqualityExpression	lineOpeningBlocksNum == lineClosingBlocksNum		619947	0		==			
ANR	620116	Identifier	lineOpeningBlocksNum		619947	0					
ANR	620117	Identifier	lineClosingBlocksNum		619947	1					
ANR	620118	Identifier	previousLineProbationTab		619947	1					
ANR	620119	ExpressionStatement	-- indentCount	2190:2:63873:63886	619947	1	True				
ANR	620120	UnaryExpression	-- indentCount		619947	0					
ANR	620121	IncDec	--		619947	0					
ANR	620122	Identifier	indentCount		619947	1					
ANR	620123	IfStatement	if ( indentCount < 0 )		619947	2					
ANR	620124	Condition	indentCount < 0	2192:5:63894:63908	619947	0	True				
ANR	620125	RelationalExpression	indentCount < 0		619947	0		<			
ANR	620126	Identifier	indentCount		619947	0					
ANR	620127	PrimaryExpression	0		619947	1					
ANR	620128	ExpressionStatement	indentCount = 0	2193:2:63913:63928	619947	1	True				
ANR	620129	AssignmentExpression	indentCount = 0		619947	0		=			
ANR	620130	Identifier	indentCount		619947	0					
ANR	620131	PrimaryExpression	0		619947	1					
ANR	620132	IfStatement	if ( ! lineStartsInComment && braceIndent && shouldIndentBracedLine && ( lineBeginsWithOpenBrace || lineBeginsWithCloseBrace ) )		619947	3					
ANR	620133	Condition	! lineStartsInComment && braceIndent && shouldIndentBracedLine && ( lineBeginsWithOpenBrace || lineBeginsWithCloseBrace )	2196:5:63987:64131	619947	0	True				
ANR	620134	AndExpression	! lineStartsInComment && braceIndent && shouldIndentBracedLine && ( lineBeginsWithOpenBrace || lineBeginsWithCloseBrace )		619947	0		&&			
ANR	620135	UnaryOperationExpression	! lineStartsInComment		619947	0					
ANR	620136	UnaryOperator	!		619947	0					
ANR	620137	Identifier	lineStartsInComment		619947	1					
ANR	620138	AndExpression	braceIndent && shouldIndentBracedLine && ( lineBeginsWithOpenBrace || lineBeginsWithCloseBrace )		619947	1		&&			
ANR	620139	Identifier	braceIndent		619947	0					
ANR	620140	AndExpression	shouldIndentBracedLine && ( lineBeginsWithOpenBrace || lineBeginsWithCloseBrace )		619947	1		&&			
ANR	620141	Identifier	shouldIndentBracedLine		619947	0					
ANR	620142	OrExpression	lineBeginsWithOpenBrace || lineBeginsWithCloseBrace		619947	1		||			
ANR	620143	Identifier	lineBeginsWithOpenBrace		619947	0					
ANR	620144	Identifier	lineBeginsWithCloseBrace		619947	1					
ANR	620145	CompoundStatement		54:1:1865:1865	619947	1					
ANR	620146	IfStatement	if ( ! braceIndentVtk )		619947	0					
ANR	620147	Condition	! braceIndentVtk	2201:6:64143:64157	619947	0	True				
ANR	620148	UnaryOperationExpression	! braceIndentVtk		619947	0					
ANR	620149	UnaryOperator	!		619947	0					
ANR	620150	Identifier	braceIndentVtk		619947	1					
ANR	620151	ExpressionStatement	++ indentCount	2202:3:64163:64176	619947	1	True				
ANR	620152	UnaryExpression	++ indentCount		619947	0					
ANR	620153	IncDec	++		619947	0					
ANR	620154	Identifier	indentCount		619947	1					
ANR	620155	ElseStatement	else		619947	0					
ANR	620156	CompoundStatement		60:3:1971:2003	619947	0					
ANR	620157	IdentifierDeclStatement	bool haveUnindentedBrace = false ;	2206:3:64241:64273	619947	0	True				
ANR	620158	IdentifierDecl	haveUnindentedBrace = false		619947	0					
ANR	620159	IdentifierDeclType	bool		619947	0					
ANR	620160	Identifier	haveUnindentedBrace		619947	1					
ANR	620161	AssignmentExpression	haveUnindentedBrace = false		619947	2		=			
ANR	620162	Identifier	false		619947	0					
ANR	620163	Identifier	false		619947	1					
ANR	620164	ForStatement	for ( size_t i = 0 ; i < headerStack -> size ( ) ; i ++ )		619947	1					
ANR	620165	ForInit	size_t i = 0 ;	2207:8:64283:64295	619947	0	True				
ANR	620166	IdentifierDeclStatement	size_t i = 0 ;		619947	0					
ANR	620167	IdentifierDecl	i = 0		619947	0					
ANR	620168	IdentifierDeclType	size_t		619947	0					
ANR	620169	Identifier	i		619947	1					
ANR	620170	AssignmentExpression	i = 0		619947	2		=			
ANR	620171	Identifier	i		619947	0					
ANR	620172	PrimaryExpression	0		619947	1					
ANR	620173	Condition	i < headerStack -> size ( )	2207:22:64297:64319	619947	1	True				
ANR	620174	RelationalExpression	i < headerStack -> size ( )		619947	0		<			
ANR	620175	Identifier	i		619947	0					
ANR	620176	CallExpression	headerStack -> size ( )		619947	1					
ANR	620177	Callee	headerStack -> size		619947	0					
ANR	620178	PtrMemberAccess	headerStack -> size		619947	0					
ANR	620179	Identifier	headerStack		619947	0					
ANR	620180	Identifier	size		619947	1					
ANR	620181	ArgumentList			619947	1					
ANR	620182	PostIncDecOperationExpression	i ++	2207:47:64322:64324	619947	2	True				
ANR	620183	Identifier	i		619947	0					
ANR	620184	IncDec	++		619947	1					
ANR	620185	CompoundStatement		62:3:2060:2060	619947	3					
ANR	620186	IfStatement	if ( ( ( * headerStack ) [ i ] == & AS_NAMESPACE || ( * headerStack ) [ i ] == & AS_MODULE || ( * headerStack ) [ i ] == & AS_CLASS || ( * headerStack ) [ i ] == & AS_STRUCT ) && i + 1 < headerStack -> size ( ) && ( * headerStack ) [ i + 1 ] == & AS_OPEN_BRACE )		619947	0					
ANR	620187	Condition	( ( * headerStack ) [ i ] == & AS_NAMESPACE || ( * headerStack ) [ i ] == & AS_MODULE || ( * headerStack ) [ i ] == & AS_CLASS || ( * headerStack ) [ i ] == & AS_STRUCT ) && i + 1 < headerStack -> size ( ) && ( * headerStack ) [ i + 1 ] == & AS_OPEN_BRACE	2209:8:64340:64613	619947	0	True				
ANR	620188	AndExpression	( ( * headerStack ) [ i ] == & AS_NAMESPACE || ( * headerStack ) [ i ] == & AS_MODULE || ( * headerStack ) [ i ] == & AS_CLASS || ( * headerStack ) [ i ] == & AS_STRUCT ) && i + 1 < headerStack -> size ( ) && ( * headerStack ) [ i + 1 ] == & AS_OPEN_BRACE		619947	0		&&			
ANR	620189	OrExpression	( * headerStack ) [ i ] == & AS_NAMESPACE || ( * headerStack ) [ i ] == & AS_MODULE || ( * headerStack ) [ i ] == & AS_CLASS || ( * headerStack ) [ i ] == & AS_STRUCT		619947	0		||			
ANR	620190	EqualityExpression	( * headerStack ) [ i ] == & AS_NAMESPACE		619947	0		==			
ANR	620191	ArrayIndexing	( * headerStack ) [ i ]		619947	0					
ANR	620192	UnaryOperationExpression	* headerStack		619947	0					
ANR	620193	UnaryOperator	*		619947	0					
ANR	620194	Identifier	headerStack		619947	1					
ANR	620195	Identifier	i		619947	1					
ANR	620196	UnaryOperationExpression	& AS_NAMESPACE		619947	1					
ANR	620197	UnaryOperator	&		619947	0					
ANR	620198	Identifier	AS_NAMESPACE		619947	1					
ANR	620199	OrExpression	( * headerStack ) [ i ] == & AS_MODULE || ( * headerStack ) [ i ] == & AS_CLASS || ( * headerStack ) [ i ] == & AS_STRUCT		619947	1		||			
ANR	620200	EqualityExpression	( * headerStack ) [ i ] == & AS_MODULE		619947	0		==			
ANR	620201	ArrayIndexing	( * headerStack ) [ i ]		619947	0					
ANR	620202	UnaryOperationExpression	* headerStack		619947	0					
ANR	620203	UnaryOperator	*		619947	0					
ANR	620204	Identifier	headerStack		619947	1					
ANR	620205	Identifier	i		619947	1					
ANR	620206	UnaryOperationExpression	& AS_MODULE		619947	1					
ANR	620207	UnaryOperator	&		619947	0					
ANR	620208	Identifier	AS_MODULE		619947	1					
ANR	620209	OrExpression	( * headerStack ) [ i ] == & AS_CLASS || ( * headerStack ) [ i ] == & AS_STRUCT		619947	1		||			
ANR	620210	EqualityExpression	( * headerStack ) [ i ] == & AS_CLASS		619947	0		==			
ANR	620211	ArrayIndexing	( * headerStack ) [ i ]		619947	0					
ANR	620212	UnaryOperationExpression	* headerStack		619947	0					
ANR	620213	UnaryOperator	*		619947	0					
ANR	620214	Identifier	headerStack		619947	1					
ANR	620215	Identifier	i		619947	1					
ANR	620216	UnaryOperationExpression	& AS_CLASS		619947	1					
ANR	620217	UnaryOperator	&		619947	0					
ANR	620218	Identifier	AS_CLASS		619947	1					
ANR	620219	EqualityExpression	( * headerStack ) [ i ] == & AS_STRUCT		619947	1		==			
ANR	620220	ArrayIndexing	( * headerStack ) [ i ]		619947	0					
ANR	620221	UnaryOperationExpression	* headerStack		619947	0					
ANR	620222	UnaryOperator	*		619947	0					
ANR	620223	Identifier	headerStack		619947	1					
ANR	620224	Identifier	i		619947	1					
ANR	620225	UnaryOperationExpression	& AS_STRUCT		619947	1					
ANR	620226	UnaryOperator	&		619947	0					
ANR	620227	Identifier	AS_STRUCT		619947	1					
ANR	620228	AndExpression	i + 1 < headerStack -> size ( ) && ( * headerStack ) [ i + 1 ] == & AS_OPEN_BRACE		619947	1		&&			
ANR	620229	RelationalExpression	i + 1 < headerStack -> size ( )		619947	0		<			
ANR	620230	AdditiveExpression	i + 1		619947	0		+			
ANR	620231	Identifier	i		619947	0					
ANR	620232	PrimaryExpression	1		619947	1					
ANR	620233	CallExpression	headerStack -> size ( )		619947	1					
ANR	620234	Callee	headerStack -> size		619947	0					
ANR	620235	PtrMemberAccess	headerStack -> size		619947	0					
ANR	620236	Identifier	headerStack		619947	0					
ANR	620237	Identifier	size		619947	1					
ANR	620238	ArgumentList			619947	1					
ANR	620239	EqualityExpression	( * headerStack ) [ i + 1 ] == & AS_OPEN_BRACE		619947	1		==			
ANR	620240	ArrayIndexing	( * headerStack ) [ i + 1 ]		619947	0					
ANR	620241	UnaryOperationExpression	* headerStack		619947	0					
ANR	620242	UnaryOperator	*		619947	0					
ANR	620243	Identifier	headerStack		619947	1					
ANR	620244	AdditiveExpression	i + 1		619947	1		+			
ANR	620245	Identifier	i		619947	0					
ANR	620246	PrimaryExpression	1		619947	1					
ANR	620247	UnaryOperationExpression	& AS_OPEN_BRACE		619947	1					
ANR	620248	UnaryOperator	&		619947	0					
ANR	620249	Identifier	AS_OPEN_BRACE		619947	1					
ANR	620250	ExpressionStatement	i ++	2215:5:64621:64624	619947	1	True				
ANR	620251	PostIncDecOperationExpression	i ++		619947	0					
ANR	620252	Identifier	i		619947	0					
ANR	620253	IncDec	++		619947	1					
ANR	620254	ElseStatement	else		619947	0					
ANR	620255	IfStatement	if ( lineBeginsWithOpenBrace )		619947	0					
ANR	620256	Condition	lineBeginsWithOpenBrace	2216:13:64639:64661	619947	0	True				
ANR	620257	Identifier	lineBeginsWithOpenBrace		619947	0					
ANR	620258	CompoundStatement		71:4:2398:2398	619947	1					
ANR	620259	IfStatement	if ( i + 1 < headerStack -> size ( ) && ( * headerStack ) [ i ] == & AS_OPEN_BRACE )		619947	0					
ANR	620260	Condition	i + 1 < headerStack -> size ( ) && ( * headerStack ) [ i ] == & AS_OPEN_BRACE	2219:9:64724:64802	619947	0	True				
ANR	620261	AndExpression	i + 1 < headerStack -> size ( ) && ( * headerStack ) [ i ] == & AS_OPEN_BRACE		619947	0		&&			
ANR	620262	RelationalExpression	i + 1 < headerStack -> size ( )		619947	0		<			
ANR	620263	AdditiveExpression	i + 1		619947	0		+			
ANR	620264	Identifier	i		619947	0					
ANR	620265	PrimaryExpression	1		619947	1					
ANR	620266	CallExpression	headerStack -> size ( )		619947	1					
ANR	620267	Callee	headerStack -> size		619947	0					
ANR	620268	PtrMemberAccess	headerStack -> size		619947	0					
ANR	620269	Identifier	headerStack		619947	0					
ANR	620270	Identifier	size		619947	1					
ANR	620271	ArgumentList			619947	1					
ANR	620272	EqualityExpression	( * headerStack ) [ i ] == & AS_OPEN_BRACE		619947	1		==			
ANR	620273	ArrayIndexing	( * headerStack ) [ i ]		619947	0					
ANR	620274	UnaryOperationExpression	* headerStack		619947	0					
ANR	620275	UnaryOperator	*		619947	0					
ANR	620276	Identifier	headerStack		619947	1					
ANR	620277	Identifier	i		619947	1					
ANR	620278	UnaryOperationExpression	& AS_OPEN_BRACE		619947	1					
ANR	620279	UnaryOperator	&		619947	0					
ANR	620280	Identifier	AS_OPEN_BRACE		619947	1					
ANR	620281	ExpressionStatement	haveUnindentedBrace = true	2221:6:64811:64837	619947	1	True				
ANR	620282	AssignmentExpression	haveUnindentedBrace = true		619947	0		=			
ANR	620283	Identifier	haveUnindentedBrace		619947	0					
ANR	620284	Identifier	true		619947	1					
ANR	620285	ElseStatement	else		619947	0					
ANR	620286	IfStatement	if ( ( * headerStack ) [ i ] == & AS_OPEN_BRACE )		619947	0					
ANR	620287	Condition	( * headerStack ) [ i ] == & AS_OPEN_BRACE	2223:13:64858:64892	619947	0	True				
ANR	620288	EqualityExpression	( * headerStack ) [ i ] == & AS_OPEN_BRACE		619947	0		==			
ANR	620289	ArrayIndexing	( * headerStack ) [ i ]		619947	0					
ANR	620290	UnaryOperationExpression	* headerStack		619947	0					
ANR	620291	UnaryOperator	*		619947	0					
ANR	620292	Identifier	headerStack		619947	1					
ANR	620293	Identifier	i		619947	1					
ANR	620294	UnaryOperationExpression	& AS_OPEN_BRACE		619947	1					
ANR	620295	UnaryOperator	&		619947	0					
ANR	620296	Identifier	AS_OPEN_BRACE		619947	1					
ANR	620297	ExpressionStatement	haveUnindentedBrace = true	2224:5:64900:64926	619947	1	True				
ANR	620298	AssignmentExpression	haveUnindentedBrace = true		619947	0		=			
ANR	620299	Identifier	haveUnindentedBrace		619947	0					
ANR	620300	Identifier	true		619947	1					
ANR	620301	IfStatement	if ( haveUnindentedBrace )		619947	2					
ANR	620302	Condition	haveUnindentedBrace	2226:7:64959:64977	619947	0	True				
ANR	620303	Identifier	haveUnindentedBrace		619947	0					
ANR	620304	ExpressionStatement	++ indentCount	2227:4:64984:64997	619947	1	True				
ANR	620305	UnaryExpression	++ indentCount		619947	0					
ANR	620306	IncDec	++		619947	0					
ANR	620307	Identifier	indentCount		619947	1					
ANR	620308	ReturnType	void		619947	1					
ANR	620309	Identifier	ASBeautifier :: adjustParsedLineIndentation		619947	2					
ANR	620310	ParameterList	"size_t iPrelim , bool isInExtraHeaderIndent"		619947	3					
ANR	620311	Parameter	size_t iPrelim	2146:47:62225:62238	619947	0	True				
ANR	620312	ParameterType	size_t		619947	0					
ANR	620313	Identifier	iPrelim		619947	1					
ANR	620314	Parameter	bool isInExtraHeaderIndent	2146:63:62241:62266	619947	1	True				
ANR	620315	ParameterType	bool		619947	0					
ANR	620316	Identifier	isInExtraHeaderIndent		619947	1					
ANR	620317	CFGEntryNode	ENTRY		619947		True				
ANR	620318	CFGExitNode	EXIT		619947		True				
ANR	620319	Symbol	isInExtraHeaderIndent		619947						
ANR	620320	Symbol	haveUnindentedBrace		619947						
ANR	620321	Symbol	blockIndent		619947						
ANR	620322	Symbol	lineBeginsWithOpenBrace		619947						
ANR	620323	Symbol	& AS_MODULE		619947						
ANR	620324	Symbol	headerStack		619947						
ANR	620325	Symbol	& AS_STRUCT		619947						
ANR	620326	Symbol	headerStack -> size		619947						
ANR	620327	Symbol	shouldIndentBracedLine		619947						
ANR	620328	Symbol	* * headerStack		619947						
ANR	620329	Symbol	braceIndent		619947						
ANR	620330	Symbol	* headerStack		619947						
ANR	620331	Symbol	& AS_OPEN_BRACE		619947						
ANR	620332	Symbol	braceIndentVtk		619947						
ANR	620333	Symbol	& AS_NAMESPACE		619947						
ANR	620334	Symbol	lineOpeningBlocksNum		619947						
ANR	620335	Symbol	lineBeginsWithCloseBrace		619947						
ANR	620336	Symbol	false		619947						
ANR	620337	Symbol	i		619947						
ANR	620338	Symbol	lineClosingBlocksNum		619947						
ANR	620339	Symbol	lineStartsInComment		619947						
ANR	620340	Symbol	indentCount		619947						
ANR	620341	Symbol	& AS_CLASS		619947						
ANR	620342	Symbol	* i		619947						
ANR	620343	Symbol	previousLineProbationTab		619947						
ANR	620344	Symbol	true		619947						
ANR	620345	Symbol	iPrelim		619947						
ANR	620346	Symbol	* headerStack -> size		619947						
ANR	620347	Function	ASBeautifier :: adjustIndentCountForBreakElseIfComments	2237:0:65188:65597							
ANR	620348	FunctionDef	ASBeautifier :: adjustIndentCountForBreakElseIfComments ()		620347	0					
ANR	620349	CompoundStatement		2238:0:65254:65597	620347	0					
ANR	620350	ExpressionStatement	assert ( isElseHeaderIndent && ! tempStacks -> empty ( ) )	2239:1:65257:65307	620347	0	True				
ANR	620351	CallExpression	assert ( isElseHeaderIndent && ! tempStacks -> empty ( ) )		620347	0					
ANR	620352	Callee	assert		620347	0					
ANR	620353	Identifier	assert		620347	0					
ANR	620354	ArgumentList	isElseHeaderIndent && ! tempStacks -> empty ( )		620347	1					
ANR	620355	Argument	isElseHeaderIndent && ! tempStacks -> empty ( )		620347	0					
ANR	620356	AndExpression	isElseHeaderIndent && ! tempStacks -> empty ( )		620347	0		&&			
ANR	620357	Identifier	isElseHeaderIndent		620347	0					
ANR	620358	UnaryOperationExpression	! tempStacks -> empty ( )		620347	1					
ANR	620359	UnaryOperator	!		620347	0					
ANR	620360	CallExpression	tempStacks -> empty ( )		620347	1					
ANR	620361	Callee	tempStacks -> empty		620347	0					
ANR	620362	PtrMemberAccess	tempStacks -> empty		620347	0					
ANR	620363	Identifier	tempStacks		620347	0					
ANR	620364	Identifier	empty		620347	1					
ANR	620365	ArgumentList			620347	1					
ANR	620366	IdentifierDeclStatement	int indentCountIncrement = 0 ;	2240:1:65310:65338	620347	1	True				
ANR	620367	IdentifierDecl	indentCountIncrement = 0		620347	0					
ANR	620368	IdentifierDeclType	int		620347	0					
ANR	620369	Identifier	indentCountIncrement		620347	1					
ANR	620370	AssignmentExpression	indentCountIncrement = 0		620347	2		=			
ANR	620371	Identifier	indentCountIncrement		620347	0					
ANR	620372	PrimaryExpression	0		620347	1					
ANR	620373	IdentifierDeclStatement	vector < const string * > * lastTempStack = tempStacks -> back ( ) ;	2241:1:65341:65398	620347	2	True				
ANR	620374	IdentifierDecl	* lastTempStack = tempStacks -> back ( )		620347	0					
ANR	620375	IdentifierDeclType	vector < const string * > *		620347	0					
ANR	620376	Identifier	lastTempStack		620347	1					
ANR	620377	AssignmentExpression	* lastTempStack = tempStacks -> back ( )		620347	2		=			
ANR	620378	Identifier	lastTempStack		620347	0					
ANR	620379	CallExpression	tempStacks -> back ( )		620347	1					
ANR	620380	Callee	tempStacks -> back		620347	0					
ANR	620381	PtrMemberAccess	tempStacks -> back		620347	0					
ANR	620382	Identifier	tempStacks		620347	0					
ANR	620383	Identifier	back		620347	1					
ANR	620384	ArgumentList			620347	1					
ANR	620385	IfStatement	if ( lastTempStack != nullptr )		620347	3					
ANR	620386	Condition	lastTempStack != nullptr	2242:5:65405:65428	620347	0	True				
ANR	620387	EqualityExpression	lastTempStack != nullptr		620347	0		!=			
ANR	620388	Identifier	lastTempStack		620347	0					
ANR	620389	Identifier	nullptr		620347	1					
ANR	620390	CompoundStatement		6:1:177:177	620347	1					
ANR	620391	ForStatement	for ( size_t i = 0 ; i < lastTempStack -> size ( ) ; i ++ )		620347	0					
ANR	620392	ForInit	size_t i = 0 ;	2244:7:65441:65453	620347	0	True				
ANR	620393	IdentifierDeclStatement	size_t i = 0 ;		620347	0					
ANR	620394	IdentifierDecl	i = 0		620347	0					
ANR	620395	IdentifierDeclType	size_t		620347	0					
ANR	620396	Identifier	i		620347	1					
ANR	620397	AssignmentExpression	i = 0		620347	2		=			
ANR	620398	Identifier	i		620347	0					
ANR	620399	PrimaryExpression	0		620347	1					
ANR	620400	Condition	i < lastTempStack -> size ( )	2244:21:65455:65479	620347	1	True				
ANR	620401	RelationalExpression	i < lastTempStack -> size ( )		620347	0		<			
ANR	620402	Identifier	i		620347	0					
ANR	620403	CallExpression	lastTempStack -> size ( )		620347	1					
ANR	620404	Callee	lastTempStack -> size		620347	0					
ANR	620405	PtrMemberAccess	lastTempStack -> size		620347	0					
ANR	620406	Identifier	lastTempStack		620347	0					
ANR	620407	Identifier	size		620347	1					
ANR	620408	ArgumentList			620347	1					
ANR	620409	PostIncDecOperationExpression	i ++	2244:48:65482:65484	620347	2	True				
ANR	620410	Identifier	i		620347	0					
ANR	620411	IncDec	++		620347	1					
ANR	620412	CompoundStatement		8:2:234:234	620347	3					
ANR	620413	IfStatement	if ( * lastTempStack -> at ( i ) == AS_ELSE )		620347	0					
ANR	620414	Condition	* lastTempStack -> at ( i ) == AS_ELSE	2246:7:65498:65529	620347	0	True				
ANR	620415	EqualityExpression	* lastTempStack -> at ( i ) == AS_ELSE		620347	0		==			
ANR	620416	UnaryOperationExpression	* lastTempStack -> at ( i )		620347	0					
ANR	620417	UnaryOperator	*		620347	0					
ANR	620418	CallExpression	lastTempStack -> at ( i )		620347	1					
ANR	620419	Callee	lastTempStack -> at		620347	0					
ANR	620420	PtrMemberAccess	lastTempStack -> at		620347	0					
ANR	620421	Identifier	lastTempStack		620347	0					
ANR	620422	Identifier	at		620347	1					
ANR	620423	ArgumentList	i		620347	1					
ANR	620424	Argument	i		620347	0					
ANR	620425	Identifier	i		620347	0					
ANR	620426	Identifier	AS_ELSE		620347	1					
ANR	620427	ExpressionStatement	indentCountIncrement ++	2247:4:65536:65558	620347	1	True				
ANR	620428	PostIncDecOperationExpression	indentCountIncrement ++		620347	0					
ANR	620429	Identifier	indentCountIncrement		620347	0					
ANR	620430	IncDec	++		620347	1					
ANR	620431	ReturnStatement	return indentCountIncrement ;	2250:1:65568:65595	620347	4	True				
ANR	620432	Identifier	indentCountIncrement		620347	0					
ANR	620433	ReturnType	int		620347	1					
ANR	620434	Identifier	ASBeautifier :: adjustIndentCountForBreakElseIfComments		620347	2					
ANR	620435	ParameterList			620347	3					
ANR	620436	CFGEntryNode	ENTRY		620347		True				
ANR	620437	CFGExitNode	EXIT		620347		True				
ANR	620438	Symbol	* lastTempStack		620347						
ANR	620439	Symbol	tempStacks -> empty		620347						
ANR	620440	Symbol	i		620347						
ANR	620441	Symbol	* lastTempStack -> at		620347						
ANR	620442	Symbol	tempStacks		620347						
ANR	620443	Symbol	lastTempStack		620347						
ANR	620444	Symbol	lastTempStack -> size		620347						
ANR	620445	Symbol	lastTempStack -> at		620347						
ANR	620446	Symbol	indentCountIncrement		620347						
ANR	620447	Symbol	AS_ELSE		620347						
ANR	620448	Symbol	* lastTempStack -> at ( i )		620347						
ANR	620449	Symbol	* * lastTempStack		620347						
ANR	620450	Symbol	isElseHeaderIndent		620347						
ANR	620451	Symbol	tempStacks -> back		620347						
ANR	620452	Symbol	* tempStacks		620347						
ANR	620453	Symbol	nullptr		620347						
ANR	620454	Function	ASBeautifier :: extractPreprocessorStatement	2257:0:65709:66058							
ANR	620455	FunctionDef	ASBeautifier :: extractPreprocessorStatement (const string & line)		620454	0					
ANR	620456	CompoundStatement		2258:0:65785:66058	620454	0					
ANR	620457	IdentifierDeclStatement	string preproc ;	2259:1:65788:65802	620454	0	True				
ANR	620458	IdentifierDecl	preproc		620454	0					
ANR	620459	IdentifierDeclType	string		620454	0					
ANR	620460	Identifier	preproc		620454	1					
ANR	620461	IdentifierDeclStatement	"size_t start = line . find_first_not_of ( ""#/ \\t"" ) ;"	2260:1:65805:65851	620454	1	True				
ANR	620462	IdentifierDecl	"start = line . find_first_not_of ( ""#/ \\t"" )"		620454	0					
ANR	620463	IdentifierDeclType	size_t		620454	0					
ANR	620464	Identifier	start		620454	1					
ANR	620465	AssignmentExpression	"start = line . find_first_not_of ( ""#/ \\t"" )"		620454	2		=			
ANR	620466	Identifier	start		620454	0					
ANR	620467	CallExpression	"line . find_first_not_of ( ""#/ \\t"" )"		620454	1					
ANR	620468	Callee	line . find_first_not_of		620454	0					
ANR	620469	MemberAccess	line . find_first_not_of		620454	0					
ANR	620470	Identifier	line		620454	0					
ANR	620471	Identifier	find_first_not_of		620454	1					
ANR	620472	ArgumentList	"""#/ \\t"""		620454	1					
ANR	620473	Argument	"""#/ \\t"""		620454	0					
ANR	620474	PrimaryExpression	"""#/ \\t"""		620454	0					
ANR	620475	IfStatement	if ( start == string :: npos )		620454	2					
ANR	620476	Condition	start == string :: npos	2261:5:65858:65878	620454	0	True				
ANR	620477	EqualityExpression	start == string :: npos		620454	0		==			
ANR	620478	Identifier	start		620454	0					
ANR	620479	Identifier	string :: npos		620454	1					
ANR	620480	ReturnStatement	return preproc ;	2262:2:65883:65897	620454	1	True				
ANR	620481	Identifier	preproc		620454	0					
ANR	620482	IdentifierDeclStatement	"size_t end = line . find_first_of ( ""/ \\t"" , start ) ;"	2263:1:65900:65946	620454	3	True				
ANR	620483	IdentifierDecl	"end = line . find_first_of ( ""/ \\t"" , start )"		620454	0					
ANR	620484	IdentifierDeclType	size_t		620454	0					
ANR	620485	Identifier	end		620454	1					
ANR	620486	AssignmentExpression	"end = line . find_first_of ( ""/ \\t"" , start )"		620454	2		=			
ANR	620487	Identifier	end		620454	0					
ANR	620488	CallExpression	"line . find_first_of ( ""/ \\t"" , start )"		620454	1					
ANR	620489	Callee	line . find_first_of		620454	0					
ANR	620490	MemberAccess	line . find_first_of		620454	0					
ANR	620491	Identifier	line		620454	0					
ANR	620492	Identifier	find_first_of		620454	1					
ANR	620493	ArgumentList	"""/ \\t"""		620454	1					
ANR	620494	Argument	"""/ \\t"""		620454	0					
ANR	620495	PrimaryExpression	"""/ \\t"""		620454	0					
ANR	620496	Argument	start		620454	1					
ANR	620497	Identifier	start		620454	0					
ANR	620498	IfStatement	if ( end == string :: npos )		620454	4					
ANR	620499	Condition	end == string :: npos	2264:5:65953:65971	620454	0	True				
ANR	620500	EqualityExpression	end == string :: npos		620454	0		==			
ANR	620501	Identifier	end		620454	0					
ANR	620502	Identifier	string :: npos		620454	1					
ANR	620503	ExpressionStatement	end = line . length ( )	2265:2:65976:65995	620454	1	True				
ANR	620504	AssignmentExpression	end = line . length ( )		620454	0		=			
ANR	620505	Identifier	end		620454	0					
ANR	620506	CallExpression	line . length ( )		620454	1					
ANR	620507	Callee	line . length		620454	0					
ANR	620508	MemberAccess	line . length		620454	0					
ANR	620509	Identifier	line		620454	0					
ANR	620510	Identifier	length		620454	1					
ANR	620511	ArgumentList			620454	1					
ANR	620512	ExpressionStatement	"preproc = line . substr ( start , end - start )"	2266:1:65998:66039	620454	5	True				
ANR	620513	AssignmentExpression	"preproc = line . substr ( start , end - start )"		620454	0		=			
ANR	620514	Identifier	preproc		620454	0					
ANR	620515	CallExpression	"line . substr ( start , end - start )"		620454	1					
ANR	620516	Callee	line . substr		620454	0					
ANR	620517	MemberAccess	line . substr		620454	0					
ANR	620518	Identifier	line		620454	0					
ANR	620519	Identifier	substr		620454	1					
ANR	620520	ArgumentList	start		620454	1					
ANR	620521	Argument	start		620454	0					
ANR	620522	Identifier	start		620454	0					
ANR	620523	Argument	end - start		620454	1					
ANR	620524	AdditiveExpression	end - start		620454	0		-			
ANR	620525	Identifier	end		620454	0					
ANR	620526	Identifier	start		620454	1					
ANR	620527	ReturnStatement	return preproc ;	2267:1:66042:66056	620454	6	True				
ANR	620528	Identifier	preproc		620454	0					
ANR	620529	ReturnType	string		620454	1					
ANR	620530	Identifier	ASBeautifier :: extractPreprocessorStatement		620454	2					
ANR	620531	ParameterList	const string & line		620454	3					
ANR	620532	Parameter	const string & line	2257:50:65759:65776	620454	0	True				
ANR	620533	ParameterType	const string &		620454	0					
ANR	620534	Identifier	line		620454	1					
ANR	620535	CFGEntryNode	ENTRY		620454		True				
ANR	620536	CFGExitNode	EXIT		620454		True				
ANR	620537	Symbol	line		620454						
ANR	620538	Symbol	line . substr		620454						
ANR	620539	Symbol	start		620454						
ANR	620540	Symbol	string :: npos		620454						
ANR	620541	Symbol	end		620454						
ANR	620542	Symbol	line . find_first_not_of		620454						
ANR	620543	Symbol	line . find_first_of		620454						
ANR	620544	Symbol	preproc		620454						
ANR	620545	Symbol	line . length		620454						
ANR	620546	Function	ASBeautifier :: adjustObjCMethodDefinitionIndentation	2270:0:66061:67176							
ANR	620547	FunctionDef	ASBeautifier :: adjustObjCMethodDefinitionIndentation (const string & line_)		620546	0					
ANR	620548	CompoundStatement		2271:0:66139:67176	620546	0					
ANR	620549	IfStatement	if ( line_ . length ( ) > 0 && ( line_ [ 0 ] == '-' || line_ [ 0 ] == '+' ) )		620546	0					
ANR	620550	Condition	line_ . length ( ) > 0 && ( line_ [ 0 ] == '-' || line_ [ 0 ] == '+' )	2273:5:66200:66266	620546	0	True				
ANR	620551	AndExpression	line_ . length ( ) > 0 && ( line_ [ 0 ] == '-' || line_ [ 0 ] == '+' )		620546	0		&&			
ANR	620552	RelationalExpression	line_ . length ( ) > 0		620546	0		>			
ANR	620553	CallExpression	line_ . length ( )		620546	0					
ANR	620554	Callee	line_ . length		620546	0					
ANR	620555	MemberAccess	line_ . length		620546	0					
ANR	620556	Identifier	line_		620546	0					
ANR	620557	Identifier	length		620546	1					
ANR	620558	ArgumentList			620546	1					
ANR	620559	PrimaryExpression	0		620546	1					
ANR	620560	OrExpression	line_ [ 0 ] == '-' || line_ [ 0 ] == '+'		620546	1		||			
ANR	620561	EqualityExpression	line_ [ 0 ] == '-'		620546	0		==			
ANR	620562	ArrayIndexing	line_ [ 0 ]		620546	0					
ANR	620563	Identifier	line_		620546	0					
ANR	620564	PrimaryExpression	0		620546	1					
ANR	620565	PrimaryExpression	'-'		620546	1					
ANR	620566	EqualityExpression	line_ [ 0 ] == '+'		620546	1		==			
ANR	620567	ArrayIndexing	line_ [ 0 ]		620546	0					
ANR	620568	Identifier	line_		620546	0					
ANR	620569	PrimaryExpression	0		620546	1					
ANR	620570	PrimaryExpression	'+'		620546	1					
ANR	620571	CompoundStatement		5:1:130:130	620546	1					
ANR	620572	IfStatement	if ( shouldAlignMethodColon && objCColonAlignSubsequent != - 1 )		620546	0					
ANR	620573	Condition	shouldAlignMethodColon && objCColonAlignSubsequent != - 1	2276:6:66278:66333	620546	0	True				
ANR	620574	AndExpression	shouldAlignMethodColon && objCColonAlignSubsequent != - 1		620546	0		&&			
ANR	620575	Identifier	shouldAlignMethodColon		620546	0					
ANR	620576	EqualityExpression	objCColonAlignSubsequent != - 1		620546	1		!=			
ANR	620577	Identifier	objCColonAlignSubsequent		620546	0					
ANR	620578	UnaryOperationExpression	- 1		620546	1					
ANR	620579	UnaryOperator	-		620546	0					
ANR	620580	PrimaryExpression	1		620546	1					
ANR	620581	CompoundStatement		10:3:325:401	620546	1					
ANR	620582	IdentifierDeclStatement	string convertedLine = getIndentedSpaceEquivalent ( line_ ) ;	2278:3:66343:66399	620546	0	True				
ANR	620583	IdentifierDecl	convertedLine = getIndentedSpaceEquivalent ( line_ )		620546	0					
ANR	620584	IdentifierDeclType	string		620546	0					
ANR	620585	Identifier	convertedLine		620546	1					
ANR	620586	AssignmentExpression	convertedLine = getIndentedSpaceEquivalent ( line_ )		620546	2		=			
ANR	620587	Identifier	convertedLine		620546	0					
ANR	620588	CallExpression	getIndentedSpaceEquivalent ( line_ )		620546	1					
ANR	620589	Callee	getIndentedSpaceEquivalent		620546	0					
ANR	620590	Identifier	getIndentedSpaceEquivalent		620546	0					
ANR	620591	ArgumentList	line_		620546	1					
ANR	620592	Argument	line_		620546	0					
ANR	620593	Identifier	line_		620546	0					
ANR	620594	ExpressionStatement	colonIndentObjCMethodAlignment = convertedLine . find ( ':' )	2279:3:66404:66460	620546	1	True				
ANR	620595	AssignmentExpression	colonIndentObjCMethodAlignment = convertedLine . find ( ':' )		620546	0		=			
ANR	620596	Identifier	colonIndentObjCMethodAlignment		620546	0					
ANR	620597	CallExpression	convertedLine . find ( ':' )		620546	1					
ANR	620598	Callee	convertedLine . find		620546	0					
ANR	620599	MemberAccess	convertedLine . find		620546	0					
ANR	620600	Identifier	convertedLine		620546	0					
ANR	620601	Identifier	find		620546	1					
ANR	620602	ArgumentList	':'		620546	1					
ANR	620603	Argument	':'		620546	0					
ANR	620604	PrimaryExpression	':'		620546	0					
ANR	620605	IdentifierDeclStatement	int objCColonAlignSubsequentIndent = objCColonAlignSubsequent + indentLength ;	2280:3:66465:66541	620546	2	True				
ANR	620606	IdentifierDecl	objCColonAlignSubsequentIndent = objCColonAlignSubsequent + indentLength		620546	0					
ANR	620607	IdentifierDeclType	int		620546	0					
ANR	620608	Identifier	objCColonAlignSubsequentIndent		620546	1					
ANR	620609	AssignmentExpression	objCColonAlignSubsequentIndent = objCColonAlignSubsequent + indentLength		620546	2		=			
ANR	620610	Identifier	objCColonAlignSubsequentIndent		620546	0					
ANR	620611	AdditiveExpression	objCColonAlignSubsequent + indentLength		620546	1		+			
ANR	620612	Identifier	objCColonAlignSubsequent		620546	0					
ANR	620613	Identifier	indentLength		620546	1					
ANR	620614	IfStatement	if ( objCColonAlignSubsequentIndent > colonIndentObjCMethodAlignment )		620546	3					
ANR	620615	Condition	objCColonAlignSubsequentIndent > colonIndentObjCMethodAlignment	2281:7:66550:66612	620546	0	True				
ANR	620616	RelationalExpression	objCColonAlignSubsequentIndent > colonIndentObjCMethodAlignment		620546	0		>			
ANR	620617	Identifier	objCColonAlignSubsequentIndent		620546	0					
ANR	620618	Identifier	colonIndentObjCMethodAlignment		620546	1					
ANR	620619	ExpressionStatement	colonIndentObjCMethodAlignment = objCColonAlignSubsequentIndent	2282:4:66619:66682	620546	1	True				
ANR	620620	AssignmentExpression	colonIndentObjCMethodAlignment = objCColonAlignSubsequentIndent		620546	0		=			
ANR	620621	Identifier	colonIndentObjCMethodAlignment		620546	0					
ANR	620622	Identifier	objCColonAlignSubsequentIndent		620546	1					
ANR	620623	ElseStatement	else		620546	0					
ANR	620624	IfStatement	if ( continuationIndentStack -> empty ( ) || continuationIndentStack -> back ( ) == 0 )		620546	0					
ANR	620625	Condition	continuationIndentStack -> empty ( ) || continuationIndentStack -> back ( ) == 0	2284:11:66699:66781	620546	0	True				
ANR	620626	OrExpression	continuationIndentStack -> empty ( ) || continuationIndentStack -> back ( ) == 0		620546	0		||			
ANR	620627	CallExpression	continuationIndentStack -> empty ( )		620546	0					
ANR	620628	Callee	continuationIndentStack -> empty		620546	0					
ANR	620629	PtrMemberAccess	continuationIndentStack -> empty		620546	0					
ANR	620630	Identifier	continuationIndentStack		620546	0					
ANR	620631	Identifier	empty		620546	1					
ANR	620632	ArgumentList			620546	1					
ANR	620633	EqualityExpression	continuationIndentStack -> back ( ) == 0		620546	1		==			
ANR	620634	CallExpression	continuationIndentStack -> back ( )		620546	0					
ANR	620635	Callee	continuationIndentStack -> back		620546	0					
ANR	620636	PtrMemberAccess	continuationIndentStack -> back		620546	0					
ANR	620637	Identifier	continuationIndentStack		620546	0					
ANR	620638	Identifier	back		620546	1					
ANR	620639	ArgumentList			620546	1					
ANR	620640	PrimaryExpression	0		620546	1					
ANR	620641	CompoundStatement		16:2:646:646	620546	1					
ANR	620642	ExpressionStatement	continuationIndentStack -> emplace_back ( indentLength )	2287:3:66791:66842	620546	0	True				
ANR	620643	CallExpression	continuationIndentStack -> emplace_back ( indentLength )		620546	0					
ANR	620644	Callee	continuationIndentStack -> emplace_back		620546	0					
ANR	620645	PtrMemberAccess	continuationIndentStack -> emplace_back		620546	0					
ANR	620646	Identifier	continuationIndentStack		620546	0					
ANR	620647	Identifier	emplace_back		620546	1					
ANR	620648	ArgumentList	indentLength		620546	1					
ANR	620649	Argument	indentLength		620546	0					
ANR	620650	Identifier	indentLength		620546	0					
ANR	620651	ExpressionStatement	isContinuation = true	2288:3:66847:66868	620546	1	True				
ANR	620652	AssignmentExpression	isContinuation = true		620546	0		=			
ANR	620653	Identifier	isContinuation		620546	0					
ANR	620654	Identifier	true		620546	1					
ANR	620655	ElseStatement	else		620546	0					
ANR	620656	IfStatement	if ( ! lineBeginsWithOpenBrace )		620546	0					
ANR	620657	Condition	! lineBeginsWithOpenBrace	2292:10:66927:66950	620546	0	True				
ANR	620658	UnaryOperationExpression	! lineBeginsWithOpenBrace		620546	0					
ANR	620659	UnaryOperator	!		620546	0					
ANR	620660	Identifier	lineBeginsWithOpenBrace		620546	1					
ANR	620661	CompoundStatement		23:1:814:814	620546	1					
ANR	620662	IfStatement	if ( shouldAlignMethodColon )		620546	0					
ANR	620663	Condition	shouldAlignMethodColon	2294:6:66962:66983	620546	0	True				
ANR	620664	Identifier	shouldAlignMethodColon		620546	0					
ANR	620665	ExpressionStatement	"spaceIndentCount = computeObjCColonAlignment ( line_ , colonIndentObjCMethodAlignment )"	2295:3:66989:67072	620546	1	True				
ANR	620666	AssignmentExpression	"spaceIndentCount = computeObjCColonAlignment ( line_ , colonIndentObjCMethodAlignment )"		620546	0		=			
ANR	620667	Identifier	spaceIndentCount		620546	0					
ANR	620668	CallExpression	"computeObjCColonAlignment ( line_ , colonIndentObjCMethodAlignment )"		620546	1					
ANR	620669	Callee	computeObjCColonAlignment		620546	0					
ANR	620670	Identifier	computeObjCColonAlignment		620546	0					
ANR	620671	ArgumentList	line_		620546	1					
ANR	620672	Argument	line_		620546	0					
ANR	620673	Identifier	line_		620546	0					
ANR	620674	Argument	colonIndentObjCMethodAlignment		620546	1					
ANR	620675	Identifier	colonIndentObjCMethodAlignment		620546	0					
ANR	620676	ElseStatement	else		620546	0					
ANR	620677	IfStatement	if ( continuationIndentStack -> empty ( ) )		620546	0					
ANR	620678	Condition	continuationIndentStack -> empty ( )	2296:11:67085:67116	620546	0	True				
ANR	620679	CallExpression	continuationIndentStack -> empty ( )		620546	0					
ANR	620680	Callee	continuationIndentStack -> empty		620546	0					
ANR	620681	PtrMemberAccess	continuationIndentStack -> empty		620546	0					
ANR	620682	Identifier	continuationIndentStack		620546	0					
ANR	620683	Identifier	empty		620546	1					
ANR	620684	ArgumentList			620546	1					
ANR	620685	ExpressionStatement	spaceIndentCount = spaceIndentObjCMethodAlignment	2297:3:67122:67171	620546	1	True				
ANR	620686	AssignmentExpression	spaceIndentCount = spaceIndentObjCMethodAlignment		620546	0		=			
ANR	620687	Identifier	spaceIndentCount		620546	0					
ANR	620688	Identifier	spaceIndentObjCMethodAlignment		620546	1					
ANR	620689	ReturnType	void		620546	1					
ANR	620690	Identifier	ASBeautifier :: adjustObjCMethodDefinitionIndentation		620546	2					
ANR	620691	ParameterList	const string & line_		620546	3					
ANR	620692	Parameter	const string & line_	2270:57:66118:66136	620546	0	True				
ANR	620693	ParameterType	const string &		620546	0					
ANR	620694	Identifier	line_		620546	1					
ANR	620695	CFGEntryNode	ENTRY		620546		True				
ANR	620696	CFGExitNode	EXIT		620546		True				
ANR	620697	Symbol	convertedLine . find		620546						
ANR	620698	Symbol	computeObjCColonAlignment		620546						
ANR	620699	Symbol	colonIndentObjCMethodAlignment		620546						
ANR	620700	Symbol	continuationIndentStack -> back		620546						
ANR	620701	Symbol	line_		620546						
ANR	620702	Symbol	isContinuation		620546						
ANR	620703	Symbol	objCColonAlignSubsequent		620546						
ANR	620704	Symbol	indentLength		620546						
ANR	620705	Symbol	lineBeginsWithOpenBrace		620546						
ANR	620706	Symbol	shouldAlignMethodColon		620546						
ANR	620707	Symbol	convertedLine		620546						
ANR	620708	Symbol	* line_		620546						
ANR	620709	Symbol	spaceIndentObjCMethodAlignment		620546						
ANR	620710	Symbol	line_ . length		620546						
ANR	620711	Symbol	spaceIndentCount		620546						
ANR	620712	Symbol	* continuationIndentStack		620546						
ANR	620713	Symbol	true		620546						
ANR	620714	Symbol	objCColonAlignSubsequentIndent		620546						
ANR	620715	Symbol	continuationIndentStack -> empty		620546						
ANR	620716	Symbol	getIndentedSpaceEquivalent		620546						
ANR	620717	Symbol	continuationIndentStack		620546						
ANR	620718	Function	ASBeautifier :: adjustObjCMethodCallIndentation	2301:0:67179:69213							
ANR	620719	FunctionDef	ASBeautifier :: adjustObjCMethodCallIndentation (const string & line_)		620718	0					
ANR	620720	CompoundStatement		2302:0:67251:69213	620718	0					
ANR	620721	Statement	static	2303:1:67254:67259	620718	0	True				
ANR	620722	IdentifierDeclStatement	int keywordIndentObjCMethodAlignment = 0 ;	2303:8:67261:67301	620718	1	True				
ANR	620723	IdentifierDecl	keywordIndentObjCMethodAlignment = 0		620718	0					
ANR	620724	IdentifierDeclType	int		620718	0					
ANR	620725	Identifier	keywordIndentObjCMethodAlignment		620718	1					
ANR	620726	AssignmentExpression	keywordIndentObjCMethodAlignment = 0		620718	2		=			
ANR	620727	Identifier	keywordIndentObjCMethodAlignment		620718	0					
ANR	620728	PrimaryExpression	0		620718	1					
ANR	620729	IfStatement	if ( shouldAlignMethodColon && objCColonAlignSubsequent != - 1 )		620718	2					
ANR	620730	Condition	shouldAlignMethodColon && objCColonAlignSubsequent != - 1	2304:5:67308:67363	620718	0	True				
ANR	620731	AndExpression	shouldAlignMethodColon && objCColonAlignSubsequent != - 1		620718	0		&&			
ANR	620732	Identifier	shouldAlignMethodColon		620718	0					
ANR	620733	EqualityExpression	objCColonAlignSubsequent != - 1		620718	1		!=			
ANR	620734	Identifier	objCColonAlignSubsequent		620718	0					
ANR	620735	UnaryOperationExpression	- 1		620718	1					
ANR	620736	UnaryOperator	-		620718	0					
ANR	620737	PrimaryExpression	1		620718	1					
ANR	620738	CompoundStatement		4:1:115:115	620718	1					
ANR	620739	IfStatement	if ( isInObjCMethodCallFirst )		620718	0					
ANR	620740	Condition	isInObjCMethodCallFirst	2306:6:67375:67397	620718	0	True				
ANR	620741	Identifier	isInObjCMethodCallFirst		620718	0					
ANR	620742	CompoundStatement		8:3:191:247	620718	1					
ANR	620743	ExpressionStatement	isInObjCMethodCallFirst = false	2308:3:67407:67438	620718	0	True				
ANR	620744	AssignmentExpression	isInObjCMethodCallFirst = false		620718	0		=			
ANR	620745	Identifier	isInObjCMethodCallFirst		620718	0					
ANR	620746	Identifier	false		620718	1					
ANR	620747	IdentifierDeclStatement	string convertedLine = getIndentedSpaceEquivalent ( line_ ) ;	2309:3:67443:67499	620718	1	True				
ANR	620748	IdentifierDecl	convertedLine = getIndentedSpaceEquivalent ( line_ )		620718	0					
ANR	620749	IdentifierDeclType	string		620718	0					
ANR	620750	Identifier	convertedLine		620718	1					
ANR	620751	AssignmentExpression	convertedLine = getIndentedSpaceEquivalent ( line_ )		620718	2		=			
ANR	620752	Identifier	convertedLine		620718	0					
ANR	620753	CallExpression	getIndentedSpaceEquivalent ( line_ )		620718	1					
ANR	620754	Callee	getIndentedSpaceEquivalent		620718	0					
ANR	620755	Identifier	getIndentedSpaceEquivalent		620718	0					
ANR	620756	ArgumentList	line_		620718	1					
ANR	620757	Argument	line_		620718	0					
ANR	620758	Identifier	line_		620718	0					
ANR	620759	ExpressionStatement	bracePosObjCMethodAlignment = convertedLine . find ( '[' )	2310:3:67504:67557	620718	2	True				
ANR	620760	AssignmentExpression	bracePosObjCMethodAlignment = convertedLine . find ( '[' )		620718	0		=			
ANR	620761	Identifier	bracePosObjCMethodAlignment		620718	0					
ANR	620762	CallExpression	convertedLine . find ( '[' )		620718	1					
ANR	620763	Callee	convertedLine . find		620718	0					
ANR	620764	MemberAccess	convertedLine . find		620718	0					
ANR	620765	Identifier	convertedLine		620718	0					
ANR	620766	Identifier	find		620718	1					
ANR	620767	ArgumentList	'['		620718	1					
ANR	620768	Argument	'['		620718	0					
ANR	620769	PrimaryExpression	'['		620718	0					
ANR	620770	ExpressionStatement	"keywordIndentObjCMethodAlignment = getObjCFollowingKeyword ( convertedLine , bracePosObjCMethodAlignment )"	2311:3:67562:67671	620718	3	True				
ANR	620771	AssignmentExpression	"keywordIndentObjCMethodAlignment = getObjCFollowingKeyword ( convertedLine , bracePosObjCMethodAlignment )"		620718	0		=			
ANR	620772	Identifier	keywordIndentObjCMethodAlignment		620718	0					
ANR	620773	CallExpression	"getObjCFollowingKeyword ( convertedLine , bracePosObjCMethodAlignment )"		620718	1					
ANR	620774	Callee	getObjCFollowingKeyword		620718	0					
ANR	620775	Identifier	getObjCFollowingKeyword		620718	0					
ANR	620776	ArgumentList	convertedLine		620718	1					
ANR	620777	Argument	convertedLine		620718	0					
ANR	620778	Identifier	convertedLine		620718	0					
ANR	620779	Argument	bracePosObjCMethodAlignment		620718	1					
ANR	620780	Identifier	bracePosObjCMethodAlignment		620718	0					
ANR	620781	ExpressionStatement	colonIndentObjCMethodAlignment = convertedLine . find ( ':' )	2313:3:67676:67732	620718	4	True				
ANR	620782	AssignmentExpression	colonIndentObjCMethodAlignment = convertedLine . find ( ':' )		620718	0		=			
ANR	620783	Identifier	colonIndentObjCMethodAlignment		620718	0					
ANR	620784	CallExpression	convertedLine . find ( ':' )		620718	1					
ANR	620785	Callee	convertedLine . find		620718	0					
ANR	620786	MemberAccess	convertedLine . find		620718	0					
ANR	620787	Identifier	convertedLine		620718	0					
ANR	620788	Identifier	find		620718	1					
ANR	620789	ArgumentList	':'		620718	1					
ANR	620790	Argument	':'		620718	0					
ANR	620791	PrimaryExpression	':'		620718	0					
ANR	620792	IfStatement	if ( colonIndentObjCMethodAlignment >= 0 )		620718	5					
ANR	620793	Condition	colonIndentObjCMethodAlignment >= 0	2314:7:67741:67775	620718	0	True				
ANR	620794	RelationalExpression	colonIndentObjCMethodAlignment >= 0		620718	0		>=			
ANR	620795	Identifier	colonIndentObjCMethodAlignment		620718	0					
ANR	620796	PrimaryExpression	0		620718	1					
ANR	620797	CompoundStatement		15:4:535:611	620718	1					
ANR	620798	IdentifierDeclStatement	int objCColonAlignSubsequentIndent = objCColonAlignSubsequent + indentLength ;	2316:4:67787:67863	620718	0	True				
ANR	620799	IdentifierDecl	objCColonAlignSubsequentIndent = objCColonAlignSubsequent + indentLength		620718	0					
ANR	620800	IdentifierDeclType	int		620718	0					
ANR	620801	Identifier	objCColonAlignSubsequentIndent		620718	1					
ANR	620802	AssignmentExpression	objCColonAlignSubsequentIndent = objCColonAlignSubsequent + indentLength		620718	2		=			
ANR	620803	Identifier	objCColonAlignSubsequentIndent		620718	0					
ANR	620804	AdditiveExpression	objCColonAlignSubsequent + indentLength		620718	1		+			
ANR	620805	Identifier	objCColonAlignSubsequent		620718	0					
ANR	620806	Identifier	indentLength		620718	1					
ANR	620807	IfStatement	if ( objCColonAlignSubsequentIndent > colonIndentObjCMethodAlignment )		620718	1					
ANR	620808	Condition	objCColonAlignSubsequentIndent > colonIndentObjCMethodAlignment	2317:8:67873:67935	620718	0	True				
ANR	620809	RelationalExpression	objCColonAlignSubsequentIndent > colonIndentObjCMethodAlignment		620718	0		>			
ANR	620810	Identifier	objCColonAlignSubsequentIndent		620718	0					
ANR	620811	Identifier	colonIndentObjCMethodAlignment		620718	1					
ANR	620812	ExpressionStatement	colonIndentObjCMethodAlignment = objCColonAlignSubsequentIndent	2318:5:67943:68006	620718	1	True				
ANR	620813	AssignmentExpression	colonIndentObjCMethodAlignment = objCColonAlignSubsequentIndent		620718	0		=			
ANR	620814	Identifier	colonIndentObjCMethodAlignment		620718	0					
ANR	620815	Identifier	objCColonAlignSubsequentIndent		620718	1					
ANR	620816	IfStatement	if ( lineBeginsWithOpenBrace )		620718	2					
ANR	620817	Condition	lineBeginsWithOpenBrace	2319:8:68016:68038	620718	0	True				
ANR	620818	Identifier	lineBeginsWithOpenBrace		620718	0					
ANR	620819	ExpressionStatement	colonIndentObjCMethodAlignment -= indentLength	2320:5:68046:68092	620718	1	True				
ANR	620820	AssignmentExpression	colonIndentObjCMethodAlignment -= indentLength		620718	0		-=			
ANR	620821	Identifier	colonIndentObjCMethodAlignment		620718	0					
ANR	620822	Identifier	indentLength		620718	1					
ANR	620823	ElseStatement	else		620718	0					
ANR	620824	CompoundStatement		23:2:860:860	620718	0					
ANR	620825	IfStatement	if ( line_ . find ( ':' ) != string :: npos )		620718	0					
ANR	620826	Condition	line_ . find ( ':' ) != string :: npos	2325:7:68121:68151	620718	0	True				
ANR	620827	EqualityExpression	line_ . find ( ':' ) != string :: npos		620718	0		!=			
ANR	620828	CallExpression	line_ . find ( ':' )		620718	0					
ANR	620829	Callee	line_ . find		620718	0					
ANR	620830	MemberAccess	line_ . find		620718	0					
ANR	620831	Identifier	line_		620718	0					
ANR	620832	Identifier	find		620718	1					
ANR	620833	ArgumentList	':'		620718	1					
ANR	620834	Argument	':'		620718	0					
ANR	620835	PrimaryExpression	':'		620718	0					
ANR	620836	Identifier	string :: npos		620718	1					
ANR	620837	CompoundStatement		25:3:905:905	620718	1					
ANR	620838	IfStatement	if ( colonIndentObjCMethodAlignment < 0 )		620718	0					
ANR	620839	Condition	colonIndentObjCMethodAlignment < 0	2327:8:68167:68200	620718	0	True				
ANR	620840	RelationalExpression	colonIndentObjCMethodAlignment < 0		620718	0		<			
ANR	620841	Identifier	colonIndentObjCMethodAlignment		620718	0					
ANR	620842	PrimaryExpression	0		620718	1					
ANR	620843	ExpressionStatement	"spaceIndentCount += computeObjCColonAlignment ( line_ , objCColonAlignSubsequent )"	2328:5:68208:68286	620718	1	True				
ANR	620844	AssignmentExpression	"spaceIndentCount += computeObjCColonAlignment ( line_ , objCColonAlignSubsequent )"		620718	0		+=			
ANR	620845	Identifier	spaceIndentCount		620718	0					
ANR	620846	CallExpression	"computeObjCColonAlignment ( line_ , objCColonAlignSubsequent )"		620718	1					
ANR	620847	Callee	computeObjCColonAlignment		620718	0					
ANR	620848	Identifier	computeObjCColonAlignment		620718	0					
ANR	620849	ArgumentList	line_		620718	1					
ANR	620850	Argument	line_		620718	0					
ANR	620851	Identifier	line_		620718	0					
ANR	620852	Argument	objCColonAlignSubsequent		620718	1					
ANR	620853	Identifier	objCColonAlignSubsequent		620718	0					
ANR	620854	ElseStatement	else		620718	0					
ANR	620855	IfStatement	if ( objCColonAlignSubsequent > colonIndentObjCMethodAlignment )		620718	0					
ANR	620856	Condition	objCColonAlignSubsequent > colonIndentObjCMethodAlignment	2329:13:68301:68357	620718	0	True				
ANR	620857	RelationalExpression	objCColonAlignSubsequent > colonIndentObjCMethodAlignment		620718	0		>			
ANR	620858	Identifier	objCColonAlignSubsequent		620718	0					
ANR	620859	Identifier	colonIndentObjCMethodAlignment		620718	1					
ANR	620860	ExpressionStatement	"spaceIndentCount = computeObjCColonAlignment ( line_ , objCColonAlignSubsequent )"	2330:5:68365:68442	620718	1	True				
ANR	620861	AssignmentExpression	"spaceIndentCount = computeObjCColonAlignment ( line_ , objCColonAlignSubsequent )"		620718	0		=			
ANR	620862	Identifier	spaceIndentCount		620718	0					
ANR	620863	CallExpression	"computeObjCColonAlignment ( line_ , objCColonAlignSubsequent )"		620718	1					
ANR	620864	Callee	computeObjCColonAlignment		620718	0					
ANR	620865	Identifier	computeObjCColonAlignment		620718	0					
ANR	620866	ArgumentList	line_		620718	1					
ANR	620867	Argument	line_		620718	0					
ANR	620868	Identifier	line_		620718	0					
ANR	620869	Argument	objCColonAlignSubsequent		620718	1					
ANR	620870	Identifier	objCColonAlignSubsequent		620718	0					
ANR	620871	ElseStatement	else		620718	0					
ANR	620872	ExpressionStatement	"spaceIndentCount = computeObjCColonAlignment ( line_ , colonIndentObjCMethodAlignment )"	2332:5:68458:68541	620718	0	True				
ANR	620873	AssignmentExpression	"spaceIndentCount = computeObjCColonAlignment ( line_ , colonIndentObjCMethodAlignment )"		620718	0		=			
ANR	620874	Identifier	spaceIndentCount		620718	0					
ANR	620875	CallExpression	"computeObjCColonAlignment ( line_ , colonIndentObjCMethodAlignment )"		620718	1					
ANR	620876	Callee	computeObjCColonAlignment		620718	0					
ANR	620877	Identifier	computeObjCColonAlignment		620718	0					
ANR	620878	ArgumentList	line_		620718	1					
ANR	620879	Argument	line_		620718	0					
ANR	620880	Identifier	line_		620718	0					
ANR	620881	Argument	colonIndentObjCMethodAlignment		620718	1					
ANR	620882	Identifier	colonIndentObjCMethodAlignment		620718	0					
ANR	620883	ElseStatement	else		620718	0					
ANR	620884	CompoundStatement		34:3:1307:1307	620718	0					
ANR	620885	IfStatement	if ( spaceIndentCount < colonIndentObjCMethodAlignment )		620718	0					
ANR	620886	Condition	spaceIndentCount < colonIndentObjCMethodAlignment	2336:8:68569:68617	620718	0	True				
ANR	620887	RelationalExpression	spaceIndentCount < colonIndentObjCMethodAlignment		620718	0		<			
ANR	620888	Identifier	spaceIndentCount		620718	0					
ANR	620889	Identifier	colonIndentObjCMethodAlignment		620718	1					
ANR	620890	ExpressionStatement	spaceIndentCount += keywordIndentObjCMethodAlignment	2337:5:68625:68677	620718	1	True				
ANR	620891	AssignmentExpression	spaceIndentCount += keywordIndentObjCMethodAlignment		620718	0		+=			
ANR	620892	Identifier	spaceIndentCount		620718	0					
ANR	620893	Identifier	keywordIndentObjCMethodAlignment		620718	1					
ANR	620894	ElseStatement	else		620718	0					
ANR	620895	CompoundStatement		41:1:1485:1485	620718	0					
ANR	620896	IfStatement	if ( isInObjCMethodCallFirst )		620718	0					
ANR	620897	Condition	isInObjCMethodCallFirst	2343:6:68745:68767	620718	0	True				
ANR	620898	Identifier	isInObjCMethodCallFirst		620718	0					
ANR	620899	CompoundStatement		45:3:1561:1617	620718	1					
ANR	620900	ExpressionStatement	isInObjCMethodCallFirst = false	2345:3:68777:68808	620718	0	True				
ANR	620901	AssignmentExpression	isInObjCMethodCallFirst = false		620718	0		=			
ANR	620902	Identifier	isInObjCMethodCallFirst		620718	0					
ANR	620903	Identifier	false		620718	1					
ANR	620904	IdentifierDeclStatement	string convertedLine = getIndentedSpaceEquivalent ( line_ ) ;	2346:3:68813:68869	620718	1	True				
ANR	620905	IdentifierDecl	convertedLine = getIndentedSpaceEquivalent ( line_ )		620718	0					
ANR	620906	IdentifierDeclType	string		620718	0					
ANR	620907	Identifier	convertedLine		620718	1					
ANR	620908	AssignmentExpression	convertedLine = getIndentedSpaceEquivalent ( line_ )		620718	2		=			
ANR	620909	Identifier	convertedLine		620718	0					
ANR	620910	CallExpression	getIndentedSpaceEquivalent ( line_ )		620718	1					
ANR	620911	Callee	getIndentedSpaceEquivalent		620718	0					
ANR	620912	Identifier	getIndentedSpaceEquivalent		620718	0					
ANR	620913	ArgumentList	line_		620718	1					
ANR	620914	Argument	line_		620718	0					
ANR	620915	Identifier	line_		620718	0					
ANR	620916	ExpressionStatement	bracePosObjCMethodAlignment = convertedLine . find ( '[' )	2347:3:68874:68927	620718	2	True				
ANR	620917	AssignmentExpression	bracePosObjCMethodAlignment = convertedLine . find ( '[' )		620718	0		=			
ANR	620918	Identifier	bracePosObjCMethodAlignment		620718	0					
ANR	620919	CallExpression	convertedLine . find ( '[' )		620718	1					
ANR	620920	Callee	convertedLine . find		620718	0					
ANR	620921	MemberAccess	convertedLine . find		620718	0					
ANR	620922	Identifier	convertedLine		620718	0					
ANR	620923	Identifier	find		620718	1					
ANR	620924	ArgumentList	'['		620718	1					
ANR	620925	Argument	'['		620718	0					
ANR	620926	PrimaryExpression	'['		620718	0					
ANR	620927	ExpressionStatement	"keywordIndentObjCMethodAlignment = getObjCFollowingKeyword ( convertedLine , bracePosObjCMethodAlignment )"	2348:3:68932:69041	620718	3	True				
ANR	620928	AssignmentExpression	"keywordIndentObjCMethodAlignment = getObjCFollowingKeyword ( convertedLine , bracePosObjCMethodAlignment )"		620718	0		=			
ANR	620929	Identifier	keywordIndentObjCMethodAlignment		620718	0					
ANR	620930	CallExpression	"getObjCFollowingKeyword ( convertedLine , bracePosObjCMethodAlignment )"		620718	1					
ANR	620931	Callee	getObjCFollowingKeyword		620718	0					
ANR	620932	Identifier	getObjCFollowingKeyword		620718	0					
ANR	620933	ArgumentList	convertedLine		620718	1					
ANR	620934	Argument	convertedLine		620718	0					
ANR	620935	Identifier	convertedLine		620718	0					
ANR	620936	Argument	bracePosObjCMethodAlignment		620718	1					
ANR	620937	Identifier	bracePosObjCMethodAlignment		620718	0					
ANR	620938	ElseStatement	else		620718	0					
ANR	620939	CompoundStatement		51:2:1804:1804	620718	0					
ANR	620940	IfStatement	if ( spaceIndentCount < keywordIndentObjCMethodAlignment + bracePosObjCMethodAlignment )		620718	0					
ANR	620941	Condition	spaceIndentCount < keywordIndentObjCMethodAlignment + bracePosObjCMethodAlignment	2353:7:69065:69145	620718	0	True				
ANR	620942	RelationalExpression	spaceIndentCount < keywordIndentObjCMethodAlignment + bracePosObjCMethodAlignment		620718	0		<			
ANR	620943	Identifier	spaceIndentCount		620718	0					
ANR	620944	AdditiveExpression	keywordIndentObjCMethodAlignment + bracePosObjCMethodAlignment		620718	1		+			
ANR	620945	Identifier	keywordIndentObjCMethodAlignment		620718	0					
ANR	620946	Identifier	bracePosObjCMethodAlignment		620718	1					
ANR	620947	ExpressionStatement	spaceIndentCount += keywordIndentObjCMethodAlignment	2354:4:69152:69204	620718	1	True				
ANR	620948	AssignmentExpression	spaceIndentCount += keywordIndentObjCMethodAlignment		620718	0		+=			
ANR	620949	Identifier	spaceIndentCount		620718	0					
ANR	620950	Identifier	keywordIndentObjCMethodAlignment		620718	1					
ANR	620951	ReturnType	void		620718	1					
ANR	620952	Identifier	ASBeautifier :: adjustObjCMethodCallIndentation		620718	2					
ANR	620953	ParameterList	const string & line_		620718	3					
ANR	620954	Parameter	const string & line_	2301:51:67230:67248	620718	0	True				
ANR	620955	ParameterType	const string &		620718	0					
ANR	620956	Identifier	line_		620718	1					
ANR	620957	CFGEntryNode	ENTRY		620718		True				
ANR	620958	CFGExitNode	EXIT		620718		True				
ANR	620959	Symbol	convertedLine . find		620718						
ANR	620960	Symbol	computeObjCColonAlignment		620718						
ANR	620961	Symbol	colonIndentObjCMethodAlignment		620718						
ANR	620962	Symbol	line_		620718						
ANR	620963	Symbol	keywordIndentObjCMethodAlignment		620718						
ANR	620964	Symbol	false		620718						
ANR	620965	Symbol	bracePosObjCMethodAlignment		620718						
ANR	620966	Symbol	string :: npos		620718						
ANR	620967	Symbol	objCColonAlignSubsequent		620718						
ANR	620968	Symbol	indentLength		620718						
ANR	620969	Symbol	lineBeginsWithOpenBrace		620718						
ANR	620970	Symbol	shouldAlignMethodColon		620718						
ANR	620971	Symbol	convertedLine		620718						
ANR	620972	Symbol	isInObjCMethodCallFirst		620718						
ANR	620973	Symbol	getObjCFollowingKeyword		620718						
ANR	620974	Symbol	line_ . find		620718						
ANR	620975	Symbol	spaceIndentCount		620718						
ANR	620976	Symbol	objCColonAlignSubsequentIndent		620718						
ANR	620977	Symbol	getIndentedSpaceEquivalent		620718						
ANR	620978	Function	ASBeautifier :: clearObjCMethodDefinitionAlignment	2362:0:69297:69662							
ANR	620979	FunctionDef	ASBeautifier :: clearObjCMethodDefinitionAlignment ()		620978	0					
ANR	620980	CompoundStatement		2363:0:69353:69662	620978	0					
ANR	620981	ExpressionStatement	assert ( isImmediatelyPostObjCMethodDefinition )	2364:1:69356:69401	620978	0	True				
ANR	620982	CallExpression	assert ( isImmediatelyPostObjCMethodDefinition )		620978	0					
ANR	620983	Callee	assert		620978	0					
ANR	620984	Identifier	assert		620978	0					
ANR	620985	ArgumentList	isImmediatelyPostObjCMethodDefinition		620978	1					
ANR	620986	Argument	isImmediatelyPostObjCMethodDefinition		620978	0					
ANR	620987	Identifier	isImmediatelyPostObjCMethodDefinition		620978	0					
ANR	620988	ExpressionStatement	spaceIndentCount = 0	2365:1:69404:69424	620978	1	True				
ANR	620989	AssignmentExpression	spaceIndentCount = 0		620978	0		=			
ANR	620990	Identifier	spaceIndentCount		620978	0					
ANR	620991	PrimaryExpression	0		620978	1					
ANR	620992	ExpressionStatement	spaceIndentObjCMethodAlignment = 0	2366:1:69427:69461	620978	2	True				
ANR	620993	AssignmentExpression	spaceIndentObjCMethodAlignment = 0		620978	0		=			
ANR	620994	Identifier	spaceIndentObjCMethodAlignment		620978	0					
ANR	620995	PrimaryExpression	0		620978	1					
ANR	620996	ExpressionStatement	colonIndentObjCMethodAlignment = 0	2367:1:69464:69498	620978	3	True				
ANR	620997	AssignmentExpression	colonIndentObjCMethodAlignment = 0		620978	0		=			
ANR	620998	Identifier	colonIndentObjCMethodAlignment		620978	0					
ANR	620999	PrimaryExpression	0		620978	1					
ANR	621000	ExpressionStatement	isInObjCMethodDefinition = false	2368:1:69501:69533	620978	4	True				
ANR	621001	AssignmentExpression	isInObjCMethodDefinition = false		620978	0		=			
ANR	621002	Identifier	isInObjCMethodDefinition		620978	0					
ANR	621003	Identifier	false		620978	1					
ANR	621004	ExpressionStatement	isImmediatelyPostObjCMethodDefinition = false	2369:1:69536:69581	620978	5	True				
ANR	621005	AssignmentExpression	isImmediatelyPostObjCMethodDefinition = false		620978	0		=			
ANR	621006	Identifier	isImmediatelyPostObjCMethodDefinition		620978	0					
ANR	621007	Identifier	false		620978	1					
ANR	621008	IfStatement	if ( ! continuationIndentStack -> empty ( ) )		620978	6					
ANR	621009	Condition	! continuationIndentStack -> empty ( )	2370:5:69588:69620	620978	0	True				
ANR	621010	UnaryOperationExpression	! continuationIndentStack -> empty ( )		620978	0					
ANR	621011	UnaryOperator	!		620978	0					
ANR	621012	CallExpression	continuationIndentStack -> empty ( )		620978	1					
ANR	621013	Callee	continuationIndentStack -> empty		620978	0					
ANR	621014	PtrMemberAccess	continuationIndentStack -> empty		620978	0					
ANR	621015	Identifier	continuationIndentStack		620978	0					
ANR	621016	Identifier	empty		620978	1					
ANR	621017	ArgumentList			620978	1					
ANR	621018	ExpressionStatement	continuationIndentStack -> pop_back ( )	2371:2:69625:69660	620978	1	True				
ANR	621019	CallExpression	continuationIndentStack -> pop_back ( )		620978	0					
ANR	621020	Callee	continuationIndentStack -> pop_back		620978	0					
ANR	621021	PtrMemberAccess	continuationIndentStack -> pop_back		620978	0					
ANR	621022	Identifier	continuationIndentStack		620978	0					
ANR	621023	Identifier	pop_back		620978	1					
ANR	621024	ArgumentList			620978	1					
ANR	621025	ReturnType	void		620978	1					
ANR	621026	Identifier	ASBeautifier :: clearObjCMethodDefinitionAlignment		620978	2					
ANR	621027	ParameterList			620978	3					
ANR	621028	CFGEntryNode	ENTRY		620978		True				
ANR	621029	CFGExitNode	EXIT		620978		True				
ANR	621030	Symbol	spaceIndentObjCMethodAlignment		620978						
ANR	621031	Symbol	colonIndentObjCMethodAlignment		620978						
ANR	621032	Symbol	spaceIndentCount		620978						
ANR	621033	Symbol	false		620978						
ANR	621034	Symbol	* continuationIndentStack		620978						
ANR	621035	Symbol	continuationIndentStack -> empty		620978						
ANR	621036	Symbol	continuationIndentStack		620978						
ANR	621037	Symbol	isImmediatelyPostObjCMethodDefinition		620978						
ANR	621038	Symbol	isInObjCMethodDefinition		620978						
ANR	621039	Function	ASBeautifier :: computeObjCColonAlignment	2380:0:69886:70150							
ANR	621040	FunctionDef	"ASBeautifier :: computeObjCColonAlignment (const string & line , int colonAlignPosition)"		621039	0					
ANR	621041	CompoundStatement		2381:0:69980:70150	621039	0					
ANR	621042	IdentifierDeclStatement	int colonPosition = line . find ( ':' ) ;	2382:1:69983:70017	621039	0	True				
ANR	621043	IdentifierDecl	colonPosition = line . find ( ':' )		621039	0					
ANR	621044	IdentifierDeclType	int		621039	0					
ANR	621045	Identifier	colonPosition		621039	1					
ANR	621046	AssignmentExpression	colonPosition = line . find ( ':' )		621039	2		=			
ANR	621047	Identifier	colonPosition		621039	0					
ANR	621048	CallExpression	line . find ( ':' )		621039	1					
ANR	621049	Callee	line . find		621039	0					
ANR	621050	MemberAccess	line . find		621039	0					
ANR	621051	Identifier	line		621039	0					
ANR	621052	Identifier	find		621039	1					
ANR	621053	ArgumentList	':'		621039	1					
ANR	621054	Argument	':'		621039	0					
ANR	621055	PrimaryExpression	':'		621039	0					
ANR	621056	IfStatement	if ( colonPosition < 0 || colonPosition > colonAlignPosition )		621039	1					
ANR	621057	Condition	colonPosition < 0 || colonPosition > colonAlignPosition	2383:5:70024:70078	621039	0	True				
ANR	621058	OrExpression	colonPosition < 0 || colonPosition > colonAlignPosition		621039	0		||			
ANR	621059	RelationalExpression	colonPosition < 0		621039	0		<			
ANR	621060	Identifier	colonPosition		621039	0					
ANR	621061	PrimaryExpression	0		621039	1					
ANR	621062	RelationalExpression	colonPosition > colonAlignPosition		621039	1		>			
ANR	621063	Identifier	colonPosition		621039	0					
ANR	621064	Identifier	colonAlignPosition		621039	1					
ANR	621065	ReturnStatement	return indentLength ;	2384:2:70083:70102	621039	1	True				
ANR	621066	Identifier	indentLength		621039	0					
ANR	621067	ReturnStatement	return ( colonAlignPosition - colonPosition ) ;	2385:1:70105:70148	621039	2	True				
ANR	621068	AdditiveExpression	colonAlignPosition - colonPosition		621039	0		-			
ANR	621069	Identifier	colonAlignPosition		621039	0					
ANR	621070	Identifier	colonPosition		621039	1					
ANR	621071	ReturnType	int		621039	1					
ANR	621072	Identifier	ASBeautifier :: computeObjCColonAlignment		621039	2					
ANR	621073	ParameterList	"const string & line , int colonAlignPosition"		621039	3					
ANR	621074	Parameter	const string & line	2380:44:69930:69947	621039	0	True				
ANR	621075	ParameterType	const string &		621039	0					
ANR	621076	Identifier	line		621039	1					
ANR	621077	Parameter	int colonAlignPosition	2380:64:69950:69971	621039	1	True				
ANR	621078	ParameterType	int		621039	0					
ANR	621079	Identifier	colonAlignPosition		621039	1					
ANR	621080	CFGEntryNode	ENTRY		621039		True				
ANR	621081	CFGExitNode	EXIT		621039		True				
ANR	621082	Symbol	colonAlignPosition		621039						
ANR	621083	Symbol	colonPosition		621039						
ANR	621084	Symbol	line . find		621039						
ANR	621085	Symbol	line		621039						
ANR	621086	Symbol	indentLength		621039						
ANR	621087	Function	ASBeautifier :: getObjCFollowingKeyword	2391:0:70230:71110							
ANR	621088	FunctionDef	"ASBeautifier :: getObjCFollowingKeyword (const string & line , int bracePos)"		621087	0					
ANR	621089	CompoundStatement		2392:0:70312:71110	621087	0					
ANR	621090	ExpressionStatement	assert ( line [ bracePos ] == '[' )	2393:1:70315:70344	621087	0	True				
ANR	621091	CallExpression	assert ( line [ bracePos ] == '[' )		621087	0					
ANR	621092	Callee	assert		621087	0					
ANR	621093	Identifier	assert		621087	0					
ANR	621094	ArgumentList	line [ bracePos ] == '['		621087	1					
ANR	621095	Argument	line [ bracePos ] == '['		621087	0					
ANR	621096	EqualityExpression	line [ bracePos ] == '['		621087	0		==			
ANR	621097	ArrayIndexing	line [ bracePos ]		621087	0					
ANR	621098	Identifier	line		621087	0					
ANR	621099	Identifier	bracePos		621087	1					
ANR	621100	PrimaryExpression	'['		621087	1					
ANR	621101	IdentifierDeclStatement	"size_t firstText = line . find_first_not_of ( "" \\t"" , bracePos + 1 ) ;"	2394:1:70347:70409	621087	1	True				
ANR	621102	IdentifierDecl	"firstText = line . find_first_not_of ( "" \\t"" , bracePos + 1 )"		621087	0					
ANR	621103	IdentifierDeclType	size_t		621087	0					
ANR	621104	Identifier	firstText		621087	1					
ANR	621105	AssignmentExpression	"firstText = line . find_first_not_of ( "" \\t"" , bracePos + 1 )"		621087	2		=			
ANR	621106	Identifier	firstText		621087	0					
ANR	621107	CallExpression	"line . find_first_not_of ( "" \\t"" , bracePos + 1 )"		621087	1					
ANR	621108	Callee	line . find_first_not_of		621087	0					
ANR	621109	MemberAccess	line . find_first_not_of		621087	0					
ANR	621110	Identifier	line		621087	0					
ANR	621111	Identifier	find_first_not_of		621087	1					
ANR	621112	ArgumentList	""" \\t"""		621087	1					
ANR	621113	Argument	""" \\t"""		621087	0					
ANR	621114	PrimaryExpression	""" \\t"""		621087	0					
ANR	621115	Argument	bracePos + 1		621087	1					
ANR	621116	AdditiveExpression	bracePos + 1		621087	0		+			
ANR	621117	Identifier	bracePos		621087	0					
ANR	621118	PrimaryExpression	1		621087	1					
ANR	621119	IfStatement	if ( firstText == string :: npos )		621087	2					
ANR	621120	Condition	firstText == string :: npos	2395:5:70416:70440	621087	0	True				
ANR	621121	EqualityExpression	firstText == string :: npos		621087	0		==			
ANR	621122	Identifier	firstText		621087	0					
ANR	621123	Identifier	string :: npos		621087	1					
ANR	621124	ReturnStatement	return - ( indentCount * indentLength - 1 ) ;	2396:2:70445:70485	621087	1	True				
ANR	621125	UnaryOperationExpression	- ( indentCount * indentLength - 1 )		621087	0					
ANR	621126	UnaryOperator	-		621087	0					
ANR	621127	AdditiveExpression	indentCount * indentLength - 1		621087	1		-			
ANR	621128	MultiplicativeExpression	indentCount * indentLength		621087	0		*			
ANR	621129	Identifier	indentCount		621087	0					
ANR	621130	Identifier	indentLength		621087	1					
ANR	621131	PrimaryExpression	1		621087	1					
ANR	621132	IdentifierDeclStatement	size_t searchBeg = firstText ;	2397:1:70488:70516	621087	3	True				
ANR	621133	IdentifierDecl	searchBeg = firstText		621087	0					
ANR	621134	IdentifierDeclType	size_t		621087	0					
ANR	621135	Identifier	searchBeg		621087	1					
ANR	621136	AssignmentExpression	searchBeg = firstText		621087	2		=			
ANR	621137	Identifier	firstText		621087	0					
ANR	621138	Identifier	firstText		621087	1					
ANR	621139	IdentifierDeclStatement	size_t objectEnd = 0 ;	2398:1:70519:70539	621087	4	True				
ANR	621140	IdentifierDecl	objectEnd = 0		621087	0					
ANR	621141	IdentifierDeclType	size_t		621087	0					
ANR	621142	Identifier	objectEnd		621087	1					
ANR	621143	AssignmentExpression	objectEnd = 0		621087	2		=			
ANR	621144	Identifier	objectEnd		621087	0					
ANR	621145	PrimaryExpression	0		621087	1					
ANR	621146	IfStatement	if ( line [ searchBeg ] == '[' )		621087	5					
ANR	621147	Condition	line [ searchBeg ] == '['	2399:5:70568:70589	621087	0	True				
ANR	621148	EqualityExpression	line [ searchBeg ] == '['		621087	0		==			
ANR	621149	ArrayIndexing	line [ searchBeg ]		621087	0					
ANR	621150	Identifier	line		621087	0					
ANR	621151	Identifier	searchBeg		621087	1					
ANR	621152	PrimaryExpression	'['		621087	1					
ANR	621153	CompoundStatement		9:1:280:280	621087	1					
ANR	621154	ExpressionStatement	"objectEnd = line . find ( ']' , searchBeg + 1 )"	2401:2:70597:70638	621087	0	True				
ANR	621155	AssignmentExpression	"objectEnd = line . find ( ']' , searchBeg + 1 )"		621087	0		=			
ANR	621156	Identifier	objectEnd		621087	0					
ANR	621157	CallExpression	"line . find ( ']' , searchBeg + 1 )"		621087	1					
ANR	621158	Callee	line . find		621087	0					
ANR	621159	MemberAccess	line . find		621087	0					
ANR	621160	Identifier	line		621087	0					
ANR	621161	Identifier	find		621087	1					
ANR	621162	ArgumentList	']'		621087	1					
ANR	621163	Argument	']'		621087	0					
ANR	621164	PrimaryExpression	']'		621087	0					
ANR	621165	Argument	searchBeg + 1		621087	1					
ANR	621166	AdditiveExpression	searchBeg + 1		621087	0		+			
ANR	621167	Identifier	searchBeg		621087	0					
ANR	621168	PrimaryExpression	1		621087	1					
ANR	621169	IfStatement	if ( objectEnd == string :: npos )		621087	1					
ANR	621170	Condition	objectEnd == string :: npos	2402:6:70646:70670	621087	0	True				
ANR	621171	EqualityExpression	objectEnd == string :: npos		621087	0		==			
ANR	621172	Identifier	objectEnd		621087	0					
ANR	621173	Identifier	string :: npos		621087	1					
ANR	621174	ReturnStatement	return 0 ;	2403:3:70676:70684	621087	1	True				
ANR	621175	PrimaryExpression	0		621087	0					
ANR	621176	ElseStatement	else		621087	0					
ANR	621177	CompoundStatement		15:1:383:383	621087	0					
ANR	621178	IfStatement	if ( line [ searchBeg ] == '(' )		621087	0					
ANR	621179	Condition	line [ searchBeg ] == '('	2407:6:70704:70725	621087	0	True				
ANR	621180	EqualityExpression	line [ searchBeg ] == '('		621087	0		==			
ANR	621181	ArrayIndexing	line [ searchBeg ]		621087	0					
ANR	621182	Identifier	line		621087	0					
ANR	621183	Identifier	searchBeg		621087	1					
ANR	621184	PrimaryExpression	'('		621087	1					
ANR	621185	CompoundStatement		17:2:417:417	621087	1					
ANR	621186	ExpressionStatement	"searchBeg = line . find ( ')' , searchBeg + 1 )"	2409:3:70735:70776	621087	0	True				
ANR	621187	AssignmentExpression	"searchBeg = line . find ( ')' , searchBeg + 1 )"		621087	0		=			
ANR	621188	Identifier	searchBeg		621087	0					
ANR	621189	CallExpression	"line . find ( ')' , searchBeg + 1 )"		621087	1					
ANR	621190	Callee	line . find		621087	0					
ANR	621191	MemberAccess	line . find		621087	0					
ANR	621192	Identifier	line		621087	0					
ANR	621193	Identifier	find		621087	1					
ANR	621194	ArgumentList	')'		621087	1					
ANR	621195	Argument	')'		621087	0					
ANR	621196	PrimaryExpression	')'		621087	0					
ANR	621197	Argument	searchBeg + 1		621087	1					
ANR	621198	AdditiveExpression	searchBeg + 1		621087	0		+			
ANR	621199	Identifier	searchBeg		621087	0					
ANR	621200	PrimaryExpression	1		621087	1					
ANR	621201	IfStatement	if ( searchBeg == string :: npos )		621087	1					
ANR	621202	Condition	searchBeg == string :: npos	2410:7:70785:70809	621087	0	True				
ANR	621203	EqualityExpression	searchBeg == string :: npos		621087	0		==			
ANR	621204	Identifier	searchBeg		621087	0					
ANR	621205	Identifier	string :: npos		621087	1					
ANR	621206	ReturnStatement	return 0 ;	2411:4:70816:70824	621087	1	True				
ANR	621207	PrimaryExpression	0		621087	0					
ANR	621208	ExpressionStatement	"objectEnd = line . find_first_of ( "" \\t"" , searchBeg + 1 )"	2414:2:70860:70912	621087	1	True				
ANR	621209	AssignmentExpression	"objectEnd = line . find_first_of ( "" \\t"" , searchBeg + 1 )"		621087	0		=			
ANR	621210	Identifier	objectEnd		621087	0					
ANR	621211	CallExpression	"line . find_first_of ( "" \\t"" , searchBeg + 1 )"		621087	1					
ANR	621212	Callee	line . find_first_of		621087	0					
ANR	621213	MemberAccess	line . find_first_of		621087	0					
ANR	621214	Identifier	line		621087	0					
ANR	621215	Identifier	find_first_of		621087	1					
ANR	621216	ArgumentList	""" \\t"""		621087	1					
ANR	621217	Argument	""" \\t"""		621087	0					
ANR	621218	PrimaryExpression	""" \\t"""		621087	0					
ANR	621219	Argument	searchBeg + 1		621087	1					
ANR	621220	AdditiveExpression	searchBeg + 1		621087	0		+			
ANR	621221	Identifier	searchBeg		621087	0					
ANR	621222	PrimaryExpression	1		621087	1					
ANR	621223	IfStatement	if ( objectEnd == string :: npos )		621087	2					
ANR	621224	Condition	objectEnd == string :: npos	2415:6:70920:70944	621087	0	True				
ANR	621225	EqualityExpression	objectEnd == string :: npos		621087	0		==			
ANR	621226	Identifier	objectEnd		621087	0					
ANR	621227	Identifier	string :: npos		621087	1					
ANR	621228	ReturnStatement	return 0 ;	2416:3:70950:70958	621087	1	True				
ANR	621229	PrimaryExpression	0		621087	0					
ANR	621230	ExpressionStatement	-- objectEnd	2417:2:70962:70973	621087	3	True				
ANR	621231	UnaryExpression	-- objectEnd		621087	0					
ANR	621232	IncDec	--		621087	0					
ANR	621233	Identifier	objectEnd		621087	1					
ANR	621234	IdentifierDeclStatement	"size_t keyPos = line . find_first_not_of ( "" \\t"" , objectEnd + 1 ) ;"	2419:1:70979:71039	621087	6	True				
ANR	621235	IdentifierDecl	"keyPos = line . find_first_not_of ( "" \\t"" , objectEnd + 1 )"		621087	0					
ANR	621236	IdentifierDeclType	size_t		621087	0					
ANR	621237	Identifier	keyPos		621087	1					
ANR	621238	AssignmentExpression	"keyPos = line . find_first_not_of ( "" \\t"" , objectEnd + 1 )"		621087	2		=			
ANR	621239	Identifier	keyPos		621087	0					
ANR	621240	CallExpression	"line . find_first_not_of ( "" \\t"" , objectEnd + 1 )"		621087	1					
ANR	621241	Callee	line . find_first_not_of		621087	0					
ANR	621242	MemberAccess	line . find_first_not_of		621087	0					
ANR	621243	Identifier	line		621087	0					
ANR	621244	Identifier	find_first_not_of		621087	1					
ANR	621245	ArgumentList	""" \\t"""		621087	1					
ANR	621246	Argument	""" \\t"""		621087	0					
ANR	621247	PrimaryExpression	""" \\t"""		621087	0					
ANR	621248	Argument	objectEnd + 1		621087	1					
ANR	621249	AdditiveExpression	objectEnd + 1		621087	0		+			
ANR	621250	Identifier	objectEnd		621087	0					
ANR	621251	PrimaryExpression	1		621087	1					
ANR	621252	IfStatement	if ( keyPos == string :: npos )		621087	7					
ANR	621253	Condition	keyPos == string :: npos	2420:5:71046:71067	621087	0	True				
ANR	621254	EqualityExpression	keyPos == string :: npos		621087	0		==			
ANR	621255	Identifier	keyPos		621087	0					
ANR	621256	Identifier	string :: npos		621087	1					
ANR	621257	ReturnStatement	return 0 ;	2421:2:71072:71080	621087	1	True				
ANR	621258	PrimaryExpression	0		621087	0					
ANR	621259	ReturnStatement	return keyPos - firstText ;	2422:1:71083:71108	621087	8	True				
ANR	621260	AdditiveExpression	keyPos - firstText		621087	0		-			
ANR	621261	Identifier	keyPos		621087	0					
ANR	621262	Identifier	firstText		621087	1					
ANR	621263	ReturnType	int		621087	1					
ANR	621264	Identifier	ASBeautifier :: getObjCFollowingKeyword		621087	2					
ANR	621265	ParameterList	"const string & line , int bracePos"		621087	3					
ANR	621266	Parameter	const string & line	2391:42:70272:70289	621087	0	True				
ANR	621267	ParameterType	const string &		621087	0					
ANR	621268	Identifier	line		621087	1					
ANR	621269	Parameter	int bracePos	2391:62:70292:70303	621087	1	True				
ANR	621270	ParameterType	int		621087	0					
ANR	621271	Identifier	bracePos		621087	1					
ANR	621272	CFGEntryNode	ENTRY		621087		True				
ANR	621273	CFGExitNode	EXIT		621087		True				
ANR	621274	Symbol	bracePos		621087						
ANR	621275	Symbol	searchBeg		621087						
ANR	621276	Symbol	line . find		621087						
ANR	621277	Symbol	line		621087						
ANR	621278	Symbol	string :: npos		621087						
ANR	621279	Symbol	indentLength		621087						
ANR	621280	Symbol	objectEnd		621087						
ANR	621281	Symbol	* line		621087						
ANR	621282	Symbol	* bracePos		621087						
ANR	621283	Symbol	keyPos		621087						
ANR	621284	Symbol	line . find_first_not_of		621087						
ANR	621285	Symbol	line . find_first_of		621087						
ANR	621286	Symbol	firstText		621087						
ANR	621287	Symbol	indentCount		621087						
ANR	621288	Symbol	* searchBeg		621087						
ANR	621289	Function	ASBeautifier :: getIndentedSpaceEquivalent	2430:0:71279:71738							
ANR	621290	FunctionDef	ASBeautifier :: getIndentedSpaceEquivalent (const string & line_)		621289	0					
ANR	621291	CompoundStatement		2431:0:71354:71738	621289	0					
ANR	621292	IdentifierDeclStatement	string spaceIndent ;	2432:1:71357:71375	621289	0	True				
ANR	621293	IdentifierDecl	spaceIndent		621289	0					
ANR	621294	IdentifierDeclType	string		621289	0					
ANR	621295	Identifier	spaceIndent		621289	1					
ANR	621296	ExpressionStatement	"spaceIndent . append ( spaceIndentCount , ' ' )"	2433:1:71378:71419	621289	1	True				
ANR	621297	CallExpression	"spaceIndent . append ( spaceIndentCount , ' ' )"		621289	0					
ANR	621298	Callee	spaceIndent . append		621289	0					
ANR	621299	MemberAccess	spaceIndent . append		621289	0					
ANR	621300	Identifier	spaceIndent		621289	0					
ANR	621301	Identifier	append		621289	1					
ANR	621302	ArgumentList	spaceIndentCount		621289	1					
ANR	621303	Argument	spaceIndentCount		621289	0					
ANR	621304	Identifier	spaceIndentCount		621289	0					
ANR	621305	Argument	' '		621289	1					
ANR	621306	PrimaryExpression	' '		621289	0					
ANR	621307	IdentifierDeclStatement	string convertedLine = spaceIndent + line_ ;	2434:1:71422:71464	621289	2	True				
ANR	621308	IdentifierDecl	convertedLine = spaceIndent + line_		621289	0					
ANR	621309	IdentifierDeclType	string		621289	0					
ANR	621310	Identifier	convertedLine		621289	1					
ANR	621311	AssignmentExpression	convertedLine = spaceIndent + line_		621289	2		=			
ANR	621312	Identifier	convertedLine		621289	0					
ANR	621313	AdditiveExpression	spaceIndent + line_		621289	1		+			
ANR	621314	Identifier	spaceIndent		621289	0					
ANR	621315	Identifier	line_		621289	1					
ANR	621316	ForStatement	for ( size_t i = spaceIndent . length ( ) ; i < convertedLine . length ( ) ; i ++ )		621289	3					
ANR	621317	ForInit	size_t i = spaceIndent . length ( ) ;	2435:6:71472:71503	621289	0	True				
ANR	621318	IdentifierDeclStatement	size_t i = spaceIndent . length ( ) ;		621289	0					
ANR	621319	IdentifierDecl	i = spaceIndent . length ( )		621289	0					
ANR	621320	IdentifierDeclType	size_t		621289	0					
ANR	621321	Identifier	i		621289	1					
ANR	621322	AssignmentExpression	i = spaceIndent . length ( )		621289	2		=			
ANR	621323	Identifier	i		621289	0					
ANR	621324	CallExpression	spaceIndent . length ( )		621289	1					
ANR	621325	Callee	spaceIndent . length		621289	0					
ANR	621326	MemberAccess	spaceIndent . length		621289	0					
ANR	621327	Identifier	spaceIndent		621289	0					
ANR	621328	Identifier	length		621289	1					
ANR	621329	ArgumentList			621289	1					
ANR	621330	Condition	i < convertedLine . length ( )	2435:39:71505:71530	621289	1	True				
ANR	621331	RelationalExpression	i < convertedLine . length ( )		621289	0		<			
ANR	621332	Identifier	i		621289	0					
ANR	621333	CallExpression	convertedLine . length ( )		621289	1					
ANR	621334	Callee	convertedLine . length		621289	0					
ANR	621335	MemberAccess	convertedLine . length		621289	0					
ANR	621336	Identifier	convertedLine		621289	0					
ANR	621337	Identifier	length		621289	1					
ANR	621338	ArgumentList			621289	1					
ANR	621339	PostIncDecOperationExpression	i ++	2435:67:71533:71535	621289	2	True				
ANR	621340	Identifier	i		621289	0					
ANR	621341	IncDec	++		621289	1					
ANR	621342	CompoundStatement		6:1:184:184	621289	3					
ANR	621343	IfStatement	if ( convertedLine [ i ] == '\\t' )		621289	0					
ANR	621344	Condition	convertedLine [ i ] == '\\t'	2437:6:71547:71570	621289	0	True				
ANR	621345	EqualityExpression	convertedLine [ i ] == '\\t'		621289	0		==			
ANR	621346	ArrayIndexing	convertedLine [ i ]		621289	0					
ANR	621347	Identifier	convertedLine		621289	0					
ANR	621348	Identifier	i		621289	1					
ANR	621349	PrimaryExpression	'\\t'		621289	1					
ANR	621350	CompoundStatement		9:3:225:277	621289	1					
ANR	621351	IdentifierDeclStatement	size_t numSpaces = indentLength - ( i % indentLength ) ;	2439:3:71580:71632	621289	0	True				
ANR	621352	IdentifierDecl	numSpaces = indentLength - ( i % indentLength )		621289	0					
ANR	621353	IdentifierDeclType	size_t		621289	0					
ANR	621354	Identifier	numSpaces		621289	1					
ANR	621355	AssignmentExpression	numSpaces = indentLength - ( i % indentLength )		621289	2		=			
ANR	621356	Identifier	numSpaces		621289	0					
ANR	621357	AdditiveExpression	indentLength - ( i % indentLength )		621289	1		-			
ANR	621358	Identifier	indentLength		621289	0					
ANR	621359	MultiplicativeExpression	i % indentLength		621289	1		%			
ANR	621360	Identifier	i		621289	0					
ANR	621361	Identifier	indentLength		621289	1					
ANR	621362	ExpressionStatement	"convertedLine . replace ( i , 1 , numSpaces , ' ' )"	2440:3:71637:71680	621289	1	True				
ANR	621363	CallExpression	"convertedLine . replace ( i , 1 , numSpaces , ' ' )"		621289	0					
ANR	621364	Callee	convertedLine . replace		621289	0					
ANR	621365	MemberAccess	convertedLine . replace		621289	0					
ANR	621366	Identifier	convertedLine		621289	0					
ANR	621367	Identifier	replace		621289	1					
ANR	621368	ArgumentList	i		621289	1					
ANR	621369	Argument	i		621289	0					
ANR	621370	Identifier	i		621289	0					
ANR	621371	Argument	1		621289	1					
ANR	621372	PrimaryExpression	1		621289	0					
ANR	621373	Argument	numSpaces		621289	2					
ANR	621374	Identifier	numSpaces		621289	0					
ANR	621375	Argument	' '		621289	3					
ANR	621376	PrimaryExpression	' '		621289	0					
ANR	621377	ExpressionStatement	i += indentLength - 1	2441:3:71685:71706	621289	2	True				
ANR	621378	AssignmentExpression	i += indentLength - 1		621289	0		+=			
ANR	621379	Identifier	i		621289	0					
ANR	621380	AdditiveExpression	indentLength - 1		621289	1		-			
ANR	621381	Identifier	indentLength		621289	0					
ANR	621382	PrimaryExpression	1		621289	1					
ANR	621383	ReturnStatement	return convertedLine ;	2444:1:71716:71736	621289	4	True				
ANR	621384	Identifier	convertedLine		621289	0					
ANR	621385	ReturnType	string		621289	1					
ANR	621386	Identifier	ASBeautifier :: getIndentedSpaceEquivalent		621289	2					
ANR	621387	ParameterList	const string & line_		621289	3					
ANR	621388	Parameter	const string & line_	2430:48:71327:71345	621289	0	True				
ANR	621389	ParameterType	const string &		621289	0					
ANR	621390	Identifier	line_		621289	1					
ANR	621391	CFGEntryNode	ENTRY		621289		True				
ANR	621392	CFGExitNode	EXIT		621289		True				
ANR	621393	Symbol	* convertedLine		621289						
ANR	621394	Symbol	numSpaces		621289						
ANR	621395	Symbol	* i		621289						
ANR	621396	Symbol	convertedLine . length		621289						
ANR	621397	Symbol	spaceIndent		621289						
ANR	621398	Symbol	spaceIndentCount		621289						
ANR	621399	Symbol	line_		621289						
ANR	621400	Symbol	i		621289						
ANR	621401	Symbol	indentLength		621289						
ANR	621402	Symbol	spaceIndent . length		621289						
ANR	621403	Symbol	convertedLine		621289						
ANR	621404	Function	ASBeautifier :: parseCurrentLine	2450:0:71819:107716							
ANR	621405	FunctionDef	ASBeautifier :: parseCurrentLine (const string & line)		621404	0					
ANR	621406	CompoundStatement		2451:0:71875:107716	621404	0					
ANR	621407	IdentifierDeclStatement	bool isInLineComment = false ;	2452:1:71878:71906	621404	0	True				
ANR	621408	IdentifierDecl	isInLineComment = false		621404	0					
ANR	621409	IdentifierDeclType	bool		621404	0					
ANR	621410	Identifier	isInLineComment		621404	1					
ANR	621411	AssignmentExpression	isInLineComment = false		621404	2		=			
ANR	621412	Identifier	false		621404	0					
ANR	621413	Identifier	false		621404	1					
ANR	621414	IdentifierDeclStatement	bool isInOperator = false ;	2453:1:71909:71934	621404	1	True				
ANR	621415	IdentifierDecl	isInOperator = false		621404	0					
ANR	621416	IdentifierDeclType	bool		621404	0					
ANR	621417	Identifier	isInOperator		621404	1					
ANR	621418	AssignmentExpression	isInOperator = false		621404	2		=			
ANR	621419	Identifier	false		621404	0					
ANR	621420	Identifier	false		621404	1					
ANR	621421	IdentifierDeclStatement	bool isSpecialChar = false ;	2454:1:71937:71963	621404	2	True				
ANR	621422	IdentifierDecl	isSpecialChar = false		621404	0					
ANR	621423	IdentifierDeclType	bool		621404	0					
ANR	621424	Identifier	isSpecialChar		621404	1					
ANR	621425	AssignmentExpression	isSpecialChar = false		621404	2		=			
ANR	621426	Identifier	false		621404	0					
ANR	621427	Identifier	false		621404	1					
ANR	621428	IdentifierDeclStatement	bool haveCaseIndent = false ;	2455:1:71966:71993	621404	3	True				
ANR	621429	IdentifierDecl	haveCaseIndent = false		621404	0					
ANR	621430	IdentifierDeclType	bool		621404	0					
ANR	621431	Identifier	haveCaseIndent		621404	1					
ANR	621432	AssignmentExpression	haveCaseIndent = false		621404	2		=			
ANR	621433	Identifier	false		621404	0					
ANR	621434	Identifier	false		621404	1					
ANR	621435	IdentifierDeclStatement	bool haveAssignmentThisLine = false ;	2456:1:71996:72031	621404	4	True				
ANR	621436	IdentifierDecl	haveAssignmentThisLine = false		621404	0					
ANR	621437	IdentifierDeclType	bool		621404	0					
ANR	621438	Identifier	haveAssignmentThisLine		621404	1					
ANR	621439	AssignmentExpression	haveAssignmentThisLine = false		621404	2		=			
ANR	621440	Identifier	false		621404	0					
ANR	621441	Identifier	false		621404	1					
ANR	621442	IdentifierDeclStatement	bool closingBraceReached = false ;	2457:1:72034:72066	621404	5	True				
ANR	621443	IdentifierDecl	closingBraceReached = false		621404	0					
ANR	621444	IdentifierDeclType	bool		621404	0					
ANR	621445	Identifier	closingBraceReached		621404	1					
ANR	621446	AssignmentExpression	closingBraceReached = false		621404	2		=			
ANR	621447	Identifier	false		621404	0					
ANR	621448	Identifier	false		621404	1					
ANR	621449	IdentifierDeclStatement	bool previousLineProbation = ( probationHeader != nullptr ) ;	2458:1:72069:72126	621404	6	True				
ANR	621450	IdentifierDecl	previousLineProbation = ( probationHeader != nullptr )		621404	0					
ANR	621451	IdentifierDeclType	bool		621404	0					
ANR	621452	Identifier	previousLineProbation		621404	1					
ANR	621453	AssignmentExpression	previousLineProbation = ( probationHeader != nullptr )		621404	2		=			
ANR	621454	Identifier	previousLineProbation		621404	0					
ANR	621455	EqualityExpression	probationHeader != nullptr		621404	1		!=			
ANR	621456	Identifier	probationHeader		621404	0					
ANR	621457	Identifier	nullptr		621404	1					
ANR	621458	IdentifierDeclStatement	char ch = ' ' ;	2459:1:72129:72142	621404	7	True				
ANR	621459	IdentifierDecl	ch = ' '		621404	0					
ANR	621460	IdentifierDeclType	char		621404	0					
ANR	621461	Identifier	ch		621404	1					
ANR	621462	AssignmentExpression	ch = ' '		621404	2		=			
ANR	621463	Identifier	ch		621404	0					
ANR	621464	PrimaryExpression	' '		621404	1					
ANR	621465	IdentifierDeclStatement	int tabIncrementIn = 0 ;	2460:1:72145:72167	621404	8	True				
ANR	621466	IdentifierDecl	tabIncrementIn = 0		621404	0					
ANR	621467	IdentifierDeclType	int		621404	0					
ANR	621468	Identifier	tabIncrementIn		621404	1					
ANR	621469	AssignmentExpression	tabIncrementIn = 0		621404	2		=			
ANR	621470	Identifier	tabIncrementIn		621404	0					
ANR	621471	PrimaryExpression	0		621404	1					
ANR	621472	IfStatement	if ( isInQuote && ! haveLineContinuationChar && ! isInVerbatimQuote && ! isInAsm )		621404	9					
ANR	621473	Condition	isInQuote && ! haveLineContinuationChar && ! isInVerbatimQuote && ! isInAsm	2461:5:72174:72272	621404	0	True				
ANR	621474	AndExpression	isInQuote && ! haveLineContinuationChar && ! isInVerbatimQuote && ! isInAsm		621404	0		&&			
ANR	621475	Identifier	isInQuote		621404	0					
ANR	621476	AndExpression	! haveLineContinuationChar && ! isInVerbatimQuote && ! isInAsm		621404	1		&&			
ANR	621477	UnaryOperationExpression	! haveLineContinuationChar		621404	0					
ANR	621478	UnaryOperator	!		621404	0					
ANR	621479	Identifier	haveLineContinuationChar		621404	1					
ANR	621480	AndExpression	! isInVerbatimQuote && ! isInAsm		621404	1		&&			
ANR	621481	UnaryOperationExpression	! isInVerbatimQuote		621404	0					
ANR	621482	UnaryOperator	!		621404	0					
ANR	621483	Identifier	isInVerbatimQuote		621404	1					
ANR	621484	UnaryOperationExpression	! isInAsm		621404	1					
ANR	621485	UnaryOperator	!		621404	0					
ANR	621486	Identifier	isInAsm		621404	1					
ANR	621487	ExpressionStatement	isInQuote = false	2465:2:72277:72294	621404	1	True				
ANR	621488	AssignmentExpression	isInQuote = false		621404	0		=			
ANR	621489	Identifier	isInQuote		621404	0					
ANR	621490	Identifier	false		621404	1					
ANR	621491	ExpressionStatement	haveLineContinuationChar = false	2466:1:72325:72357	621404	10	True				
ANR	621492	AssignmentExpression	haveLineContinuationChar = false		621404	0		=			
ANR	621493	Identifier	haveLineContinuationChar		621404	0					
ANR	621494	Identifier	false		621404	1					
ANR	621495	ForStatement	for ( size_t i = 0 ; i < line . length ( ) ; i ++ )		621404	11					
ANR	621496	ForInit	size_t i = 0 ;	2468:6:72366:72378	621404	0	True				
ANR	621497	IdentifierDeclStatement	size_t i = 0 ;		621404	0					
ANR	621498	IdentifierDecl	i = 0		621404	0					
ANR	621499	IdentifierDeclType	size_t		621404	0					
ANR	621500	Identifier	i		621404	1					
ANR	621501	AssignmentExpression	i = 0		621404	2		=			
ANR	621502	Identifier	i		621404	0					
ANR	621503	PrimaryExpression	0		621404	1					
ANR	621504	Condition	i < line . length ( )	2468:20:72380:72396	621404	1	True				
ANR	621505	RelationalExpression	i < line . length ( )		621404	0		<			
ANR	621506	Identifier	i		621404	0					
ANR	621507	CallExpression	line . length ( )		621404	1					
ANR	621508	Callee	line . length		621404	0					
ANR	621509	MemberAccess	line . length		621404	0					
ANR	621510	Identifier	line		621404	0					
ANR	621511	Identifier	length		621404	1					
ANR	621512	ArgumentList			621404	1					
ANR	621513	PostIncDecOperationExpression	i ++	2468:39:72399:72401	621404	2	True				
ANR	621514	Identifier	i		621404	0					
ANR	621515	IncDec	++		621404	1					
ANR	621516	CompoundStatement		1116:2:32558:32612	621404	3					
ANR	621517	ExpressionStatement	ch = line [ i ]	2470:2:72409:72421	621404	0	True				
ANR	621518	AssignmentExpression	ch = line [ i ]		621404	0		=			
ANR	621519	Identifier	ch		621404	0					
ANR	621520	ArrayIndexing	line [ i ]		621404	1					
ANR	621521	Identifier	line		621404	0					
ANR	621522	Identifier	i		621404	1					
ANR	621523	IfStatement	if ( isInBeautifySQL )		621404	1					
ANR	621524	Condition	isInBeautifySQL	2472:6:72430:72444	621404	0	True				
ANR	621525	Identifier	isInBeautifySQL		621404	0					
ANR	621526	ContinueStatement	continue ;	2473:3:72450:72458	621404	1	True				
ANR	621527	IfStatement	if ( isInQuote && ! isInVerbatimQuote )		621404	2					
ANR	621528	Condition	isInQuote && ! isInVerbatimQuote	2476:6:72545:72575	621404	0	True				
ANR	621529	AndExpression	isInQuote && ! isInVerbatimQuote		621404	0		&&			
ANR	621530	Identifier	isInQuote		621404	0					
ANR	621531	UnaryOperationExpression	! isInVerbatimQuote		621404	1					
ANR	621532	UnaryOperator	!		621404	0					
ANR	621533	Identifier	isInVerbatimQuote		621404	1					
ANR	621534	CompoundStatement		27:2:704:704	621404	1					
ANR	621535	IfStatement	if ( isSpecialChar )		621404	0					
ANR	621536	Condition	isSpecialChar	2478:7:72589:72601	621404	0	True				
ANR	621537	Identifier	isSpecialChar		621404	0					
ANR	621538	CompoundStatement		29:3:731:731	621404	1					
ANR	621539	ExpressionStatement	isSpecialChar = false	2480:4:72613:72634	621404	0	True				
ANR	621540	AssignmentExpression	isSpecialChar = false		621404	0		=			
ANR	621541	Identifier	isSpecialChar		621404	0					
ANR	621542	Identifier	false		621404	1					
ANR	621543	ContinueStatement	continue ;	2481:4:72640:72648	621404	1	True				
ANR	621544	IfStatement	"if ( line . compare ( i , 2 , ""\\\\\\\\"" ) == 0 )"		621404	1					
ANR	621545	Condition	"line . compare ( i , 2 , ""\\\\\\\\"" ) == 0"	2483:7:72662:72692	621404	0	True				
ANR	621546	EqualityExpression	"line . compare ( i , 2 , ""\\\\\\\\"" ) == 0"		621404	0		==			
ANR	621547	CallExpression	"line . compare ( i , 2 , ""\\\\\\\\"" )"		621404	0					
ANR	621548	Callee	line . compare		621404	0					
ANR	621549	MemberAccess	line . compare		621404	0					
ANR	621550	Identifier	line		621404	0					
ANR	621551	Identifier	compare		621404	1					
ANR	621552	ArgumentList	i		621404	1					
ANR	621553	Argument	i		621404	0					
ANR	621554	Identifier	i		621404	0					
ANR	621555	Argument	2		621404	1					
ANR	621556	PrimaryExpression	2		621404	0					
ANR	621557	Argument	"""\\\\\\\\"""		621404	2					
ANR	621558	PrimaryExpression	"""\\\\\\\\"""		621404	0					
ANR	621559	PrimaryExpression	0		621404	1					
ANR	621560	CompoundStatement		34:3:822:822	621404	1					
ANR	621561	ExpressionStatement	i ++	2485:4:72704:72707	621404	0	True				
ANR	621562	PostIncDecOperationExpression	i ++		621404	0					
ANR	621563	Identifier	i		621404	0					
ANR	621564	IncDec	++		621404	1					
ANR	621565	ContinueStatement	continue ;	2486:4:72713:72721	621404	1	True				
ANR	621566	IfStatement	if ( ch == '\\\\' )		621404	2					
ANR	621567	Condition	ch == '\\\\'	2488:7:72735:72744	621404	0	True				
ANR	621568	EqualityExpression	ch == '\\\\'		621404	0		==			
ANR	621569	Identifier	ch		621404	0					
ANR	621570	PrimaryExpression	'\\\\'		621404	1					
ANR	621571	CompoundStatement		39:3:874:874	621404	1					
ANR	621572	IfStatement	"if ( peekNextChar ( line , i ) == ' ' )"		621404	0					
ANR	621573	Condition	"peekNextChar ( line , i ) == ' '"	2490:8:72760:72787	621404	0	True				
ANR	621574	EqualityExpression	"peekNextChar ( line , i ) == ' '"		621404	0		==			
ANR	621575	CallExpression	"peekNextChar ( line , i )"		621404	0					
ANR	621576	Callee	peekNextChar		621404	0					
ANR	621577	Identifier	peekNextChar		621404	0					
ANR	621578	ArgumentList	line		621404	1					
ANR	621579	Argument	line		621404	0					
ANR	621580	Identifier	line		621404	0					
ANR	621581	Argument	i		621404	1					
ANR	621582	Identifier	i		621404	0					
ANR	621583	PrimaryExpression	' '		621404	1					
ANR	621584	ExpressionStatement	haveLineContinuationChar = true	2491:5:72827:72858	621404	1	True				
ANR	621585	AssignmentExpression	haveLineContinuationChar = true		621404	0		=			
ANR	621586	Identifier	haveLineContinuationChar		621404	0					
ANR	621587	Identifier	true		621404	1					
ANR	621588	ElseStatement	else		621404	0					
ANR	621589	ExpressionStatement	isSpecialChar = true	2493:5:72874:72894	621404	0	True				
ANR	621590	AssignmentExpression	isSpecialChar = true		621404	0		=			
ANR	621591	Identifier	isSpecialChar		621404	0					
ANR	621592	Identifier	true		621404	1					
ANR	621593	ContinueStatement	continue ;	2494:4:72900:72908	621404	1	True				
ANR	621594	ElseStatement	else		621404	0					
ANR	621595	IfStatement	if ( isInDefine && ch == '\\\\' )		621404	0					
ANR	621596	Condition	isInDefine && ch == '\\\\'	2497:11:72930:72953	621404	0	True				
ANR	621597	AndExpression	isInDefine && ch == '\\\\'		621404	0		&&			
ANR	621598	Identifier	isInDefine		621404	0					
ANR	621599	EqualityExpression	ch == '\\\\'		621404	1		==			
ANR	621600	Identifier	ch		621404	0					
ANR	621601	PrimaryExpression	'\\\\'		621404	1					
ANR	621602	ContinueStatement	continue ;	2498:3:72959:72967	621404	1	True				
ANR	621603	IfStatement	if ( isWhiteSpace ( ch ) )		621404	3					
ANR	621604	Condition	isWhiteSpace ( ch )	2501:6:73004:73019	621404	0	True				
ANR	621605	CallExpression	isWhiteSpace ( ch )		621404	0					
ANR	621606	Callee	isWhiteSpace		621404	0					
ANR	621607	Identifier	isWhiteSpace		621404	0					
ANR	621608	ArgumentList	ch		621404	1					
ANR	621609	Argument	ch		621404	0					
ANR	621610	Identifier	ch		621404	0					
ANR	621611	CompoundStatement		52:2:1148:1148	621404	1					
ANR	621612	IfStatement	if ( ch == '\\t' )		621404	0					
ANR	621613	Condition	ch == '\\t'	2503:7:73033:73042	621404	0	True				
ANR	621614	EqualityExpression	ch == '\\t'		621404	0		==			
ANR	621615	Identifier	ch		621404	0					
ANR	621616	PrimaryExpression	'\\t'		621404	1					
ANR	621617	ExpressionStatement	"tabIncrementIn += convertTabToSpaces ( i , tabIncrementIn )"	2504:4:73049:73104	621404	1	True				
ANR	621618	AssignmentExpression	"tabIncrementIn += convertTabToSpaces ( i , tabIncrementIn )"		621404	0		+=			
ANR	621619	Identifier	tabIncrementIn		621404	0					
ANR	621620	CallExpression	"convertTabToSpaces ( i , tabIncrementIn )"		621404	1					
ANR	621621	Callee	convertTabToSpaces		621404	0					
ANR	621622	Identifier	convertTabToSpaces		621404	0					
ANR	621623	ArgumentList	i		621404	1					
ANR	621624	Argument	i		621404	0					
ANR	621625	Identifier	i		621404	0					
ANR	621626	Argument	tabIncrementIn		621404	1					
ANR	621627	Identifier	tabIncrementIn		621404	0					
ANR	621628	ContinueStatement	continue ;	2505:3:73109:73117	621404	1	True				
ANR	621629	IfStatement	"if ( ! ( isInComment || isInLineComment ) && ( ch == '""' || ( ch == '\\'' && ! isDigitSeparator ( line , i ) ) ) )"		621404	4					
ANR	621630	Condition	"! ( isInComment || isInLineComment ) && ( ch == '""' || ( ch == '\\'' && ! isDigitSeparator ( line , i ) ) )"	2509:6:73181:73298	621404	0	True				
ANR	621631	AndExpression	"! ( isInComment || isInLineComment ) && ( ch == '""' || ( ch == '\\'' && ! isDigitSeparator ( line , i ) ) )"		621404	0		&&			
ANR	621632	UnaryOperationExpression	! ( isInComment || isInLineComment )		621404	0					
ANR	621633	UnaryOperator	!		621404	0					
ANR	621634	OrExpression	isInComment || isInLineComment		621404	1		||			
ANR	621635	Identifier	isInComment		621404	0					
ANR	621636	Identifier	isInLineComment		621404	1					
ANR	621637	OrExpression	"ch == '""' || ( ch == '\\'' && ! isDigitSeparator ( line , i ) )"		621404	1		||			
ANR	621638	EqualityExpression	"ch == '""'"		621404	0		==			
ANR	621639	Identifier	ch		621404	0					
ANR	621640	PrimaryExpression	"'""'"		621404	1					
ANR	621641	AndExpression	"ch == '\\'' && ! isDigitSeparator ( line , i )"		621404	1		&&			
ANR	621642	EqualityExpression	ch == '\\''		621404	0		==			
ANR	621643	Identifier	ch		621404	0					
ANR	621644	PrimaryExpression	'\\''		621404	1					
ANR	621645	UnaryOperationExpression	"! isDigitSeparator ( line , i )"		621404	1					
ANR	621646	UnaryOperator	!		621404	0					
ANR	621647	CallExpression	"isDigitSeparator ( line , i )"		621404	1					
ANR	621648	Callee	isDigitSeparator		621404	0					
ANR	621649	Identifier	isDigitSeparator		621404	0					
ANR	621650	ArgumentList	line		621404	1					
ANR	621651	Argument	line		621404	0					
ANR	621652	Identifier	line		621404	0					
ANR	621653	Argument	i		621404	1					
ANR	621654	Identifier	i		621404	0					
ANR	621655	CompoundStatement		62:2:1427:1427	621404	1					
ANR	621656	IfStatement	if ( ! isInQuote )		621404	0					
ANR	621657	Condition	! isInQuote	2513:7:73312:73321	621404	0	True				
ANR	621658	UnaryOperationExpression	! isInQuote		621404	0					
ANR	621659	UnaryOperator	!		621404	0					
ANR	621660	Identifier	isInQuote		621404	1					
ANR	621661	CompoundStatement		67:4:1499:1538	621404	1					
ANR	621662	ExpressionStatement	quoteChar = ch	2515:4:73333:73347	621404	0	True				
ANR	621663	AssignmentExpression	quoteChar = ch		621404	0		=			
ANR	621664	Identifier	quoteChar		621404	0					
ANR	621665	Identifier	ch		621404	1					
ANR	621666	ExpressionStatement	isInQuote = true	2516:4:73353:73369	621404	1	True				
ANR	621667	AssignmentExpression	isInQuote = true		621404	0		=			
ANR	621668	Identifier	isInQuote		621404	0					
ANR	621669	Identifier	true		621404	1					
ANR	621670	IdentifierDeclStatement	char prevCh = i > 0 ? line [ i - 1 ] : ' ' ;	2517:4:73375:73414	621404	2	True				
ANR	621671	IdentifierDecl	prevCh = i > 0 ? line [ i - 1 ] : ' '		621404	0					
ANR	621672	IdentifierDeclType	char		621404	0					
ANR	621673	Identifier	prevCh		621404	1					
ANR	621674	AssignmentExpression	prevCh = i > 0 ? line [ i - 1 ] : ' '		621404	2		=			
ANR	621675	Identifier	prevCh		621404	0					
ANR	621676	ConditionalExpression	i > 0 ? line [ i - 1 ] : ' '		621404	1					
ANR	621677	Condition	i > 0		621404	0					
ANR	621678	RelationalExpression	i > 0		621404	0		>			
ANR	621679	Identifier	i		621404	0					
ANR	621680	PrimaryExpression	0		621404	1					
ANR	621681	ArrayIndexing	line [ i - 1 ]		621404	1					
ANR	621682	Identifier	line		621404	0					
ANR	621683	AdditiveExpression	i - 1		621404	1		-			
ANR	621684	Identifier	i		621404	0					
ANR	621685	PrimaryExpression	1		621404	1					
ANR	621686	PrimaryExpression	' '		621404	2					
ANR	621687	IfStatement	if ( isCStyle ( ) && prevCh == 'R' )		621404	3					
ANR	621688	Condition	isCStyle ( ) && prevCh == 'R'	2518:8:73424:73450	621404	0	True				
ANR	621689	AndExpression	isCStyle ( ) && prevCh == 'R'		621404	0		&&			
ANR	621690	CallExpression	isCStyle ( )		621404	0					
ANR	621691	Callee	isCStyle		621404	0					
ANR	621692	Identifier	isCStyle		621404	0					
ANR	621693	ArgumentList			621404	1					
ANR	621694	EqualityExpression	prevCh == 'R'		621404	1		==			
ANR	621695	Identifier	prevCh		621404	0					
ANR	621696	PrimaryExpression	'R'		621404	1					
ANR	621697	CompoundStatement		70:5:1588:1620	621404	1					
ANR	621698	IdentifierDeclStatement	"int parenPos = line . find ( '(' , i ) ;"	2520:5:73464:73496	621404	0	True				
ANR	621699	IdentifierDecl	"parenPos = line . find ( '(' , i )"		621404	0					
ANR	621700	IdentifierDeclType	int		621404	0					
ANR	621701	Identifier	parenPos		621404	1					
ANR	621702	AssignmentExpression	"parenPos = line . find ( '(' , i )"		621404	2		=			
ANR	621703	Identifier	parenPos		621404	0					
ANR	621704	CallExpression	"line . find ( '(' , i )"		621404	1					
ANR	621705	Callee	line . find		621404	0					
ANR	621706	MemberAccess	line . find		621404	0					
ANR	621707	Identifier	line		621404	0					
ANR	621708	Identifier	find		621404	1					
ANR	621709	ArgumentList	'('		621404	1					
ANR	621710	Argument	'('		621404	0					
ANR	621711	PrimaryExpression	'('		621404	0					
ANR	621712	Argument	i		621404	1					
ANR	621713	Identifier	i		621404	0					
ANR	621714	IfStatement	if ( parenPos != - 1 )		621404	1					
ANR	621715	Condition	parenPos != - 1	2521:9:73507:73520	621404	0	True				
ANR	621716	EqualityExpression	parenPos != - 1		621404	0		!=			
ANR	621717	Identifier	parenPos		621404	0					
ANR	621718	UnaryOperationExpression	- 1		621404	1					
ANR	621719	UnaryOperator	-		621404	0					
ANR	621720	PrimaryExpression	1		621404	1					
ANR	621721	CompoundStatement		72:5:1652:1652	621404	1					
ANR	621722	ExpressionStatement	isInVerbatimQuote = true	2523:6:73536:73560	621404	0	True				
ANR	621723	AssignmentExpression	isInVerbatimQuote = true		621404	0		=			
ANR	621724	Identifier	isInVerbatimQuote		621404	0					
ANR	621725	Identifier	true		621404	1					
ANR	621726	ExpressionStatement	"verbatimDelimiter = line . substr ( i + 1 , parenPos - i - 1 )"	2524:6:73568:73624	621404	1	True				
ANR	621727	AssignmentExpression	"verbatimDelimiter = line . substr ( i + 1 , parenPos - i - 1 )"		621404	0		=			
ANR	621728	Identifier	verbatimDelimiter		621404	0					
ANR	621729	CallExpression	"line . substr ( i + 1 , parenPos - i - 1 )"		621404	1					
ANR	621730	Callee	line . substr		621404	0					
ANR	621731	MemberAccess	line . substr		621404	0					
ANR	621732	Identifier	line		621404	0					
ANR	621733	Identifier	substr		621404	1					
ANR	621734	ArgumentList	i + 1		621404	1					
ANR	621735	Argument	i + 1		621404	0					
ANR	621736	AdditiveExpression	i + 1		621404	0		+			
ANR	621737	Identifier	i		621404	0					
ANR	621738	PrimaryExpression	1		621404	1					
ANR	621739	Argument	parenPos - i - 1		621404	1					
ANR	621740	AdditiveExpression	parenPos - i - 1		621404	0		-			
ANR	621741	Identifier	parenPos		621404	0					
ANR	621742	AdditiveExpression	i - 1		621404	1		-			
ANR	621743	Identifier	i		621404	0					
ANR	621744	PrimaryExpression	1		621404	1					
ANR	621745	ElseStatement	else		621404	0					
ANR	621746	IfStatement	if ( isSharpStyle ( ) && prevCh == '@' )		621404	0					
ANR	621747	Condition	isSharpStyle ( ) && prevCh == '@'	2527:13:73652:73682	621404	0	True				
ANR	621748	AndExpression	isSharpStyle ( ) && prevCh == '@'		621404	0		&&			
ANR	621749	CallExpression	isSharpStyle ( )		621404	0					
ANR	621750	Callee	isSharpStyle		621404	0					
ANR	621751	Identifier	isSharpStyle		621404	0					
ANR	621752	ArgumentList			621404	1					
ANR	621753	EqualityExpression	prevCh == '@'		621404	1		==			
ANR	621754	Identifier	prevCh		621404	0					
ANR	621755	PrimaryExpression	'@'		621404	1					
ANR	621756	ExpressionStatement	isInVerbatimQuote = true	2528:5:73690:73714	621404	1	True				
ANR	621757	AssignmentExpression	isInVerbatimQuote = true		621404	0		=			
ANR	621758	Identifier	isInVerbatimQuote		621404	0					
ANR	621759	Identifier	true		621404	1					
ANR	621760	ElseStatement	else		621404	0					
ANR	621761	IfStatement	"if ( g_preprocessorCppExternCBrace == 2 && line . compare ( i , 3 , ""\\""C\\"""" ) == 0 )"		621404	0					
ANR	621762	Condition	"g_preprocessorCppExternCBrace == 2 && line . compare ( i , 3 , ""\\""C\\"""" ) == 0"	2530:13:73769:73838	621404	0	True				
ANR	621763	AndExpression	"g_preprocessorCppExternCBrace == 2 && line . compare ( i , 3 , ""\\""C\\"""" ) == 0"		621404	0		&&			
ANR	621764	EqualityExpression	g_preprocessorCppExternCBrace == 2		621404	0		==			
ANR	621765	Identifier	g_preprocessorCppExternCBrace		621404	0					
ANR	621766	PrimaryExpression	2		621404	1					
ANR	621767	EqualityExpression	"line . compare ( i , 3 , ""\\""C\\"""" ) == 0"		621404	1		==			
ANR	621768	CallExpression	"line . compare ( i , 3 , ""\\""C\\"""" )"		621404	0					
ANR	621769	Callee	line . compare		621404	0					
ANR	621770	MemberAccess	line . compare		621404	0					
ANR	621771	Identifier	line		621404	0					
ANR	621772	Identifier	compare		621404	1					
ANR	621773	ArgumentList	i		621404	1					
ANR	621774	Argument	i		621404	0					
ANR	621775	Identifier	i		621404	0					
ANR	621776	Argument	3		621404	1					
ANR	621777	PrimaryExpression	3		621404	0					
ANR	621778	Argument	"""\\""C\\"""""		621404	2					
ANR	621779	PrimaryExpression	"""\\""C\\"""""		621404	0					
ANR	621780	PrimaryExpression	0		621404	1					
ANR	621781	ExpressionStatement	++ g_preprocessorCppExternCBrace	2531:5:73846:73877	621404	1	True				
ANR	621782	UnaryExpression	++ g_preprocessorCppExternCBrace		621404	0					
ANR	621783	IncDec	++		621404	0					
ANR	621784	Identifier	g_preprocessorCppExternCBrace		621404	1					
ANR	621785	ElseStatement	else		621404	0					
ANR	621786	IfStatement	"if ( isInVerbatimQuote && ch == '""' )"		621404	0					
ANR	621787	Condition	"isInVerbatimQuote && ch == '""'"	2533:12:73896:73925	621404	0	True				
ANR	621788	AndExpression	"isInVerbatimQuote && ch == '""'"		621404	0		&&			
ANR	621789	Identifier	isInVerbatimQuote		621404	0					
ANR	621790	EqualityExpression	"ch == '""'"		621404	1		==			
ANR	621791	Identifier	ch		621404	0					
ANR	621792	PrimaryExpression	"'""'"		621404	1					
ANR	621793	CompoundStatement		84:3:2055:2055	621404	1					
ANR	621794	IfStatement	if ( isCStyle ( ) )		621404	0					
ANR	621795	Condition	isCStyle ( )	2535:8:73941:73950	621404	0	True				
ANR	621796	CallExpression	isCStyle ( )		621404	0					
ANR	621797	Callee	isCStyle		621404	0					
ANR	621798	Identifier	isCStyle		621404	0					
ANR	621799	ArgumentList			621404	1					
ANR	621800	CompoundStatement		88:5:2133:2168	621404	1					
ANR	621801	IdentifierDeclStatement	string delim = ')' + verbatimDelimiter ;	2537:5:73964:74002	621404	0	True				
ANR	621802	IdentifierDecl	delim = ')' + verbatimDelimiter		621404	0					
ANR	621803	IdentifierDeclType	string		621404	0					
ANR	621804	Identifier	delim		621404	1					
ANR	621805	AssignmentExpression	delim = ')' + verbatimDelimiter		621404	2		=			
ANR	621806	Identifier	delim		621404	0					
ANR	621807	AdditiveExpression	')' + verbatimDelimiter		621404	1		+			
ANR	621808	PrimaryExpression	')'		621404	0					
ANR	621809	Identifier	verbatimDelimiter		621404	1					
ANR	621810	IdentifierDeclStatement	int delimStart = i - delim . length ( ) ;	2538:5:74009:74044	621404	1	True				
ANR	621811	IdentifierDecl	delimStart = i - delim . length ( )		621404	0					
ANR	621812	IdentifierDeclType	int		621404	0					
ANR	621813	Identifier	delimStart		621404	1					
ANR	621814	AssignmentExpression	delimStart = i - delim . length ( )		621404	2		=			
ANR	621815	Identifier	delimStart		621404	0					
ANR	621816	AdditiveExpression	i - delim . length ( )		621404	1		-			
ANR	621817	Identifier	i		621404	0					
ANR	621818	CallExpression	delim . length ( )		621404	1					
ANR	621819	Callee	delim . length		621404	0					
ANR	621820	MemberAccess	delim . length		621404	0					
ANR	621821	Identifier	delim		621404	0					
ANR	621822	Identifier	length		621404	1					
ANR	621823	ArgumentList			621404	1					
ANR	621824	IfStatement	"if ( delimStart > 0 && line . substr ( delimStart , delim . length ( ) ) == delim )"		621404	2					
ANR	621825	Condition	"delimStart > 0 && line . substr ( delimStart , delim . length ( ) ) == delim"	2539:9:74055:74120	621404	0	True				
ANR	621826	AndExpression	"delimStart > 0 && line . substr ( delimStart , delim . length ( ) ) == delim"		621404	0		&&			
ANR	621827	RelationalExpression	delimStart > 0		621404	0		>			
ANR	621828	Identifier	delimStart		621404	0					
ANR	621829	PrimaryExpression	0		621404	1					
ANR	621830	EqualityExpression	"line . substr ( delimStart , delim . length ( ) ) == delim"		621404	1		==			
ANR	621831	CallExpression	"line . substr ( delimStart , delim . length ( ) )"		621404	0					
ANR	621832	Callee	line . substr		621404	0					
ANR	621833	MemberAccess	line . substr		621404	0					
ANR	621834	Identifier	line		621404	0					
ANR	621835	Identifier	substr		621404	1					
ANR	621836	ArgumentList	delimStart		621404	1					
ANR	621837	Argument	delimStart		621404	0					
ANR	621838	Identifier	delimStart		621404	0					
ANR	621839	Argument	delim . length ( )		621404	1					
ANR	621840	CallExpression	delim . length ( )		621404	0					
ANR	621841	Callee	delim . length		621404	0					
ANR	621842	MemberAccess	delim . length		621404	0					
ANR	621843	Identifier	delim		621404	0					
ANR	621844	Identifier	length		621404	1					
ANR	621845	ArgumentList			621404	1					
ANR	621846	Identifier	delim		621404	1					
ANR	621847	CompoundStatement		90:5:2252:2252	621404	1					
ANR	621848	ExpressionStatement	isInQuote = false	2541:6:74136:74153	621404	0	True				
ANR	621849	AssignmentExpression	isInQuote = false		621404	0		=			
ANR	621850	Identifier	isInQuote		621404	0					
ANR	621851	Identifier	false		621404	1					
ANR	621852	ExpressionStatement	isInVerbatimQuote = false	2542:6:74161:74186	621404	1	True				
ANR	621853	AssignmentExpression	isInVerbatimQuote = false		621404	0		=			
ANR	621854	Identifier	isInVerbatimQuote		621404	0					
ANR	621855	Identifier	false		621404	1					
ANR	621856	ElseStatement	else		621404	0					
ANR	621857	IfStatement	if ( isSharpStyle ( ) )		621404	0					
ANR	621858	Condition	isSharpStyle ( )	2545:13:74214:74227	621404	0	True				
ANR	621859	CallExpression	isSharpStyle ( )		621404	0					
ANR	621860	Callee	isSharpStyle		621404	0					
ANR	621861	Identifier	isSharpStyle		621404	0					
ANR	621862	ArgumentList			621404	1					
ANR	621863	CompoundStatement		96:4:2358:2358	621404	1					
ANR	621864	IfStatement	"if ( line . compare ( i , 2 , ""\\""\\"""" ) == 0 )"		621404	0					
ANR	621865	Condition	"line . compare ( i , 2 , ""\\""\\"""" ) == 0"	2547:9:74245:74275	621404	0	True				
ANR	621866	EqualityExpression	"line . compare ( i , 2 , ""\\""\\"""" ) == 0"		621404	0		==			
ANR	621867	CallExpression	"line . compare ( i , 2 , ""\\""\\"""" )"		621404	0					
ANR	621868	Callee	line . compare		621404	0					
ANR	621869	MemberAccess	line . compare		621404	0					
ANR	621870	Identifier	line		621404	0					
ANR	621871	Identifier	compare		621404	1					
ANR	621872	ArgumentList	i		621404	1					
ANR	621873	Argument	i		621404	0					
ANR	621874	Identifier	i		621404	0					
ANR	621875	Argument	2		621404	1					
ANR	621876	PrimaryExpression	2		621404	0					
ANR	621877	Argument	"""\\""\\"""""		621404	2					
ANR	621878	PrimaryExpression	"""\\""\\"""""		621404	0					
ANR	621879	PrimaryExpression	0		621404	1					
ANR	621880	ExpressionStatement	i ++	2548:6:74284:74287	621404	1	True				
ANR	621881	PostIncDecOperationExpression	i ++		621404	0					
ANR	621882	Identifier	i		621404	0					
ANR	621883	IncDec	++		621404	1					
ANR	621884	ElseStatement	else		621404	0					
ANR	621885	CompoundStatement		100:5:2428:2428	621404	0					
ANR	621886	ExpressionStatement	isInQuote = false	2551:6:74312:74329	621404	0	True				
ANR	621887	AssignmentExpression	isInQuote = false		621404	0		=			
ANR	621888	Identifier	isInQuote		621404	0					
ANR	621889	Identifier	false		621404	1					
ANR	621890	ExpressionStatement	isInVerbatimQuote = false	2552:6:74337:74362	621404	1	True				
ANR	621891	AssignmentExpression	isInVerbatimQuote = false		621404	0		=			
ANR	621892	Identifier	isInVerbatimQuote		621404	0					
ANR	621893	Identifier	false		621404	1					
ANR	621894	ContinueStatement	continue ;	2553:6:74370:74378	621404	2	True				
ANR	621895	ElseStatement	else		621404	0					
ANR	621896	IfStatement	if ( quoteChar == ch )		621404	0					
ANR	621897	Condition	quoteChar == ch	2557:12:74410:74424	621404	0	True				
ANR	621898	EqualityExpression	quoteChar == ch		621404	0		==			
ANR	621899	Identifier	quoteChar		621404	0					
ANR	621900	Identifier	ch		621404	1					
ANR	621901	CompoundStatement		108:3:2554:2554	621404	1					
ANR	621902	ExpressionStatement	isInQuote = false	2559:4:74436:74453	621404	0	True				
ANR	621903	AssignmentExpression	isInQuote = false		621404	0		=			
ANR	621904	Identifier	isInQuote		621404	0					
ANR	621905	Identifier	false		621404	1					
ANR	621906	ExpressionStatement	isContinuation = true	2560:4:74459:74480	621404	1	True				
ANR	621907	AssignmentExpression	isContinuation = true		621404	0		=			
ANR	621908	Identifier	isContinuation		621404	0					
ANR	621909	Identifier	true		621404	1					
ANR	621910	ContinueStatement	continue ;	2561:4:74486:74494	621404	2	True				
ANR	621911	IfStatement	if ( isInQuote )		621404	5					
ANR	621912	Condition	isInQuote	2564:6:74511:74519	621404	0	True				
ANR	621913	Identifier	isInQuote		621404	0					
ANR	621914	ContinueStatement	continue ;	2565:3:74525:74533	621404	1	True				
ANR	621915	IfStatement	"if ( ! ( isInComment || isInLineComment ) && line . compare ( i , 2 , ""//"" ) == 0 )"		621404	6					
ANR	621916	Condition	"! ( isInComment || isInLineComment ) && line . compare ( i , 2 , ""//"" ) == 0"	2569:6:74564:74629	621404	0	True				
ANR	621917	AndExpression	"! ( isInComment || isInLineComment ) && line . compare ( i , 2 , ""//"" ) == 0"		621404	0		&&			
ANR	621918	UnaryOperationExpression	! ( isInComment || isInLineComment )		621404	0					
ANR	621919	UnaryOperator	!		621404	0					
ANR	621920	OrExpression	isInComment || isInLineComment		621404	1		||			
ANR	621921	Identifier	isInComment		621404	0					
ANR	621922	Identifier	isInLineComment		621404	1					
ANR	621923	EqualityExpression	"line . compare ( i , 2 , ""//"" ) == 0"		621404	1		==			
ANR	621924	CallExpression	"line . compare ( i , 2 , ""//"" )"		621404	0					
ANR	621925	Callee	line . compare		621404	0					
ANR	621926	MemberAccess	line . compare		621404	0					
ANR	621927	Identifier	line		621404	0					
ANR	621928	Identifier	compare		621404	1					
ANR	621929	ArgumentList	i		621404	1					
ANR	621930	Argument	i		621404	0					
ANR	621931	Identifier	i		621404	0					
ANR	621932	Argument	2		621404	1					
ANR	621933	PrimaryExpression	2		621404	0					
ANR	621934	Argument	"""//"""		621404	2					
ANR	621935	PrimaryExpression	"""//"""		621404	0					
ANR	621936	PrimaryExpression	0		621404	1					
ANR	621937	CompoundStatement		120:2:2758:2758	621404	1					
ANR	621938	IfStatement	if ( isCaseHeaderCommentIndent )		621404	0					
ANR	621939	Condition	isCaseHeaderCommentIndent	2572:7:74715:74739	621404	0	True				
ANR	621940	Identifier	isCaseHeaderCommentIndent		621404	0					
ANR	621941	ExpressionStatement	-- indentCount	2573:4:74746:74759	621404	1	True				
ANR	621942	UnaryExpression	-- indentCount		621404	0					
ANR	621943	IncDec	--		621404	0					
ANR	621944	Identifier	indentCount		621404	1					
ANR	621945	IfStatement	if ( isElseHeaderIndent && lineOpensWithLineComment && ! tempStacks -> empty ( ) )		621404	1					
ANR	621946	Condition	isElseHeaderIndent && lineOpensWithLineComment && ! tempStacks -> empty ( )	2576:7:74931:75000	621404	0	True				
ANR	621947	AndExpression	isElseHeaderIndent && lineOpensWithLineComment && ! tempStacks -> empty ( )		621404	0		&&			
ANR	621948	Identifier	isElseHeaderIndent		621404	0					
ANR	621949	AndExpression	lineOpensWithLineComment && ! tempStacks -> empty ( )		621404	1		&&			
ANR	621950	Identifier	lineOpensWithLineComment		621404	0					
ANR	621951	UnaryOperationExpression	! tempStacks -> empty ( )		621404	1					
ANR	621952	UnaryOperator	!		621404	0					
ANR	621953	CallExpression	tempStacks -> empty ( )		621404	1					
ANR	621954	Callee	tempStacks -> empty		621404	0					
ANR	621955	PtrMemberAccess	tempStacks -> empty		621404	0					
ANR	621956	Identifier	tempStacks		621404	0					
ANR	621957	Identifier	empty		621404	1					
ANR	621958	ArgumentList			621404	1					
ANR	621959	ExpressionStatement	indentCount += adjustIndentCountForBreakElseIfComments ( )	2577:4:75007:75063	621404	1	True				
ANR	621960	AssignmentExpression	indentCount += adjustIndentCountForBreakElseIfComments ( )		621404	0		+=			
ANR	621961	Identifier	indentCount		621404	0					
ANR	621962	CallExpression	adjustIndentCountForBreakElseIfComments ( )		621404	1					
ANR	621963	Callee	adjustIndentCountForBreakElseIfComments		621404	0					
ANR	621964	Identifier	adjustIndentCountForBreakElseIfComments		621404	0					
ANR	621965	ArgumentList			621404	1					
ANR	621966	ExpressionStatement	isInLineComment = true	2578:3:75068:75090	621404	2	True				
ANR	621967	AssignmentExpression	isInLineComment = true		621404	0		=			
ANR	621968	Identifier	isInLineComment		621404	0					
ANR	621969	Identifier	true		621404	1					
ANR	621970	ExpressionStatement	i ++	2579:3:75095:75098	621404	3	True				
ANR	621971	PostIncDecOperationExpression	i ++		621404	0					
ANR	621972	Identifier	i		621404	0					
ANR	621973	IncDec	++		621404	1					
ANR	621974	ContinueStatement	continue ;	2580:3:75103:75111	621404	4	True				
ANR	621975	ElseStatement	else		621404	0					
ANR	621976	IfStatement	"if ( ! ( isInComment || isInLineComment ) && line . compare ( i , 2 , ""/*"" ) == 0 )"		621404	0					
ANR	621977	Condition	"! ( isInComment || isInLineComment ) && line . compare ( i , 2 , ""/*"" ) == 0"	2582:11:75128:75193	621404	0	True				
ANR	621978	AndExpression	"! ( isInComment || isInLineComment ) && line . compare ( i , 2 , ""/*"" ) == 0"		621404	0		&&			
ANR	621979	UnaryOperationExpression	! ( isInComment || isInLineComment )		621404	0					
ANR	621980	UnaryOperator	!		621404	0					
ANR	621981	OrExpression	isInComment || isInLineComment		621404	1		||			
ANR	621982	Identifier	isInComment		621404	0					
ANR	621983	Identifier	isInLineComment		621404	1					
ANR	621984	EqualityExpression	"line . compare ( i , 2 , ""/*"" ) == 0"		621404	1		==			
ANR	621985	CallExpression	"line . compare ( i , 2 , ""/*"" )"		621404	0					
ANR	621986	Callee	line . compare		621404	0					
ANR	621987	MemberAccess	line . compare		621404	0					
ANR	621988	Identifier	line		621404	0					
ANR	621989	Identifier	compare		621404	1					
ANR	621990	ArgumentList	i		621404	1					
ANR	621991	Argument	i		621404	0					
ANR	621992	Identifier	i		621404	0					
ANR	621993	Argument	2		621404	1					
ANR	621994	PrimaryExpression	2		621404	0					
ANR	621995	Argument	"""/*"""		621404	2					
ANR	621996	PrimaryExpression	"""/*"""		621404	0					
ANR	621997	PrimaryExpression	0		621404	1					
ANR	621998	CompoundStatement		133:2:3322:3322	621404	1					
ANR	621999	IfStatement	if ( isCaseHeaderCommentIndent && lineOpensWithComment )		621404	0					
ANR	622000	Condition	isCaseHeaderCommentIndent && lineOpensWithComment	2585:7:75279:75327	621404	0	True				
ANR	622001	AndExpression	isCaseHeaderCommentIndent && lineOpensWithComment		621404	0		&&			
ANR	622002	Identifier	isCaseHeaderCommentIndent		621404	0					
ANR	622003	Identifier	lineOpensWithComment		621404	1					
ANR	622004	ExpressionStatement	-- indentCount	2586:4:75334:75347	621404	1	True				
ANR	622005	UnaryExpression	-- indentCount		621404	0					
ANR	622006	IncDec	--		621404	0					
ANR	622007	Identifier	indentCount		621404	1					
ANR	622008	IfStatement	if ( isElseHeaderIndent && lineOpensWithComment && ! tempStacks -> empty ( ) )		621404	1					
ANR	622009	Condition	isElseHeaderIndent && lineOpensWithComment && ! tempStacks -> empty ( )	2589:7:75519:75584	621404	0	True				
ANR	622010	AndExpression	isElseHeaderIndent && lineOpensWithComment && ! tempStacks -> empty ( )		621404	0		&&			
ANR	622011	Identifier	isElseHeaderIndent		621404	0					
ANR	622012	AndExpression	lineOpensWithComment && ! tempStacks -> empty ( )		621404	1		&&			
ANR	622013	Identifier	lineOpensWithComment		621404	0					
ANR	622014	UnaryOperationExpression	! tempStacks -> empty ( )		621404	1					
ANR	622015	UnaryOperator	!		621404	0					
ANR	622016	CallExpression	tempStacks -> empty ( )		621404	1					
ANR	622017	Callee	tempStacks -> empty		621404	0					
ANR	622018	PtrMemberAccess	tempStacks -> empty		621404	0					
ANR	622019	Identifier	tempStacks		621404	0					
ANR	622020	Identifier	empty		621404	1					
ANR	622021	ArgumentList			621404	1					
ANR	622022	ExpressionStatement	indentCount += adjustIndentCountForBreakElseIfComments ( )	2590:4:75591:75647	621404	1	True				
ANR	622023	AssignmentExpression	indentCount += adjustIndentCountForBreakElseIfComments ( )		621404	0		+=			
ANR	622024	Identifier	indentCount		621404	0					
ANR	622025	CallExpression	adjustIndentCountForBreakElseIfComments ( )		621404	1					
ANR	622026	Callee	adjustIndentCountForBreakElseIfComments		621404	0					
ANR	622027	Identifier	adjustIndentCountForBreakElseIfComments		621404	0					
ANR	622028	ArgumentList			621404	1					
ANR	622029	ExpressionStatement	isInComment = true	2591:3:75652:75670	621404	2	True				
ANR	622030	AssignmentExpression	isInComment = true		621404	0		=			
ANR	622031	Identifier	isInComment		621404	0					
ANR	622032	Identifier	true		621404	1					
ANR	622033	ExpressionStatement	i ++	2592:3:75675:75678	621404	3	True				
ANR	622034	PostIncDecOperationExpression	i ++		621404	0					
ANR	622035	Identifier	i		621404	0					
ANR	622036	IncDec	++		621404	1					
ANR	622037	IfStatement	if ( ! lineOpensWithComment )		621404	4					
ANR	622038	Condition	! lineOpensWithComment	2593:7:75687:75707	621404	0	True				
ANR	622039	UnaryOperationExpression	! lineOpensWithComment		621404	0					
ANR	622040	UnaryOperator	!		621404	0					
ANR	622041	Identifier	lineOpensWithComment		621404	1					
ANR	622042	ExpressionStatement	blockCommentNoIndent = true	2594:4:75750:75777	621404	1	True				
ANR	622043	AssignmentExpression	blockCommentNoIndent = true		621404	0		=			
ANR	622044	Identifier	blockCommentNoIndent		621404	0					
ANR	622045	Identifier	true		621404	1					
ANR	622046	ContinueStatement	continue ;	2595:3:75832:75840	621404	5	True				
ANR	622047	ElseStatement	else		621404	0					
ANR	622048	IfStatement	"if ( ( isInComment || isInLineComment ) && line . compare ( i , 2 , ""*/"" ) == 0 )"		621404	0					
ANR	622049	Condition	"( isInComment || isInLineComment ) && line . compare ( i , 2 , ""*/"" ) == 0"	2597:11:75857:75921	621404	0	True				
ANR	622050	AndExpression	"( isInComment || isInLineComment ) && line . compare ( i , 2 , ""*/"" ) == 0"		621404	0		&&			
ANR	622051	OrExpression	isInComment || isInLineComment		621404	0		||			
ANR	622052	Identifier	isInComment		621404	0					
ANR	622053	Identifier	isInLineComment		621404	1					
ANR	622054	EqualityExpression	"line . compare ( i , 2 , ""*/"" ) == 0"		621404	1		==			
ANR	622055	CallExpression	"line . compare ( i , 2 , ""*/"" )"		621404	0					
ANR	622056	Callee	line . compare		621404	0					
ANR	622057	MemberAccess	line . compare		621404	0					
ANR	622058	Identifier	line		621404	0					
ANR	622059	Identifier	compare		621404	1					
ANR	622060	ArgumentList	i		621404	1					
ANR	622061	Argument	i		621404	0					
ANR	622062	Identifier	i		621404	0					
ANR	622063	Argument	2		621404	1					
ANR	622064	PrimaryExpression	2		621404	0					
ANR	622065	Argument	"""*/"""		621404	2					
ANR	622066	PrimaryExpression	"""*/"""		621404	0					
ANR	622067	PrimaryExpression	0		621404	1					
ANR	622068	CompoundStatement		149:3:4055:4103	621404	1					
ANR	622069	IdentifierDeclStatement	"size_t firstText = line . find_first_not_of ( "" \\t"" ) ;"	2599:3:75931:75979	621404	0	True				
ANR	622070	IdentifierDecl	"firstText = line . find_first_not_of ( "" \\t"" )"		621404	0					
ANR	622071	IdentifierDeclType	size_t		621404	0					
ANR	622072	Identifier	firstText		621404	1					
ANR	622073	AssignmentExpression	"firstText = line . find_first_not_of ( "" \\t"" )"		621404	2		=			
ANR	622074	Identifier	firstText		621404	0					
ANR	622075	CallExpression	"line . find_first_not_of ( "" \\t"" )"		621404	1					
ANR	622076	Callee	line . find_first_not_of		621404	0					
ANR	622077	MemberAccess	line . find_first_not_of		621404	0					
ANR	622078	Identifier	line		621404	0					
ANR	622079	Identifier	find_first_not_of		621404	1					
ANR	622080	ArgumentList	""" \\t"""		621404	1					
ANR	622081	Argument	""" \\t"""		621404	0					
ANR	622082	PrimaryExpression	""" \\t"""		621404	0					
ANR	622083	IfStatement	if ( isCaseHeaderCommentIndent && firstText == i )		621404	1					
ANR	622084	Condition	isCaseHeaderCommentIndent && firstText == i	2602:7:76124:76166	621404	0	True				
ANR	622085	AndExpression	isCaseHeaderCommentIndent && firstText == i		621404	0		&&			
ANR	622086	Identifier	isCaseHeaderCommentIndent		621404	0					
ANR	622087	EqualityExpression	firstText == i		621404	1		==			
ANR	622088	Identifier	firstText		621404	0					
ANR	622089	Identifier	i		621404	1					
ANR	622090	ExpressionStatement	-- indentCount	2603:4:76173:76186	621404	1	True				
ANR	622091	UnaryExpression	-- indentCount		621404	0					
ANR	622092	IncDec	--		621404	0					
ANR	622093	Identifier	indentCount		621404	1					
ANR	622094	IfStatement	if ( firstText == i )		621404	2					
ANR	622095	Condition	firstText == i	2607:7:76433:76446	621404	0	True				
ANR	622096	EqualityExpression	firstText == i		621404	0		==			
ANR	622097	Identifier	firstText		621404	0					
ANR	622098	Identifier	i		621404	1					
ANR	622099	CompoundStatement		158:3:4576:4576	621404	1					
ANR	622100	IfStatement	if ( isElseHeaderIndent && ! lineOpensWithComment && ! tempStacks -> empty ( ) )		621404	0					
ANR	622101	Condition	isElseHeaderIndent && ! lineOpensWithComment && ! tempStacks -> empty ( )	2609:8:76462:76528	621404	0	True				
ANR	622102	AndExpression	isElseHeaderIndent && ! lineOpensWithComment && ! tempStacks -> empty ( )		621404	0		&&			
ANR	622103	Identifier	isElseHeaderIndent		621404	0					
ANR	622104	AndExpression	! lineOpensWithComment && ! tempStacks -> empty ( )		621404	1		&&			
ANR	622105	UnaryOperationExpression	! lineOpensWithComment		621404	0					
ANR	622106	UnaryOperator	!		621404	0					
ANR	622107	Identifier	lineOpensWithComment		621404	1					
ANR	622108	UnaryOperationExpression	! tempStacks -> empty ( )		621404	1					
ANR	622109	UnaryOperator	!		621404	0					
ANR	622110	CallExpression	tempStacks -> empty ( )		621404	1					
ANR	622111	Callee	tempStacks -> empty		621404	0					
ANR	622112	PtrMemberAccess	tempStacks -> empty		621404	0					
ANR	622113	Identifier	tempStacks		621404	0					
ANR	622114	Identifier	empty		621404	1					
ANR	622115	ArgumentList			621404	1					
ANR	622116	ExpressionStatement	indentCount += adjustIndentCountForBreakElseIfComments ( )	2610:5:76536:76592	621404	1	True				
ANR	622117	AssignmentExpression	indentCount += adjustIndentCountForBreakElseIfComments ( )		621404	0		+=			
ANR	622118	Identifier	indentCount		621404	0					
ANR	622119	CallExpression	adjustIndentCountForBreakElseIfComments ( )		621404	1					
ANR	622120	Callee	adjustIndentCountForBreakElseIfComments		621404	0					
ANR	622121	Identifier	adjustIndentCountForBreakElseIfComments		621404	0					
ANR	622122	ArgumentList			621404	1					
ANR	622123	ExpressionStatement	isInComment = false	2612:3:76602:76621	621404	3	True				
ANR	622124	AssignmentExpression	isInComment = false		621404	0		=			
ANR	622125	Identifier	isInComment		621404	0					
ANR	622126	Identifier	false		621404	1					
ANR	622127	ExpressionStatement	i ++	2613:3:76626:76629	621404	4	True				
ANR	622128	PostIncDecOperationExpression	i ++		621404	0					
ANR	622129	Identifier	i		621404	0					
ANR	622130	IncDec	++		621404	1					
ANR	622131	ExpressionStatement	blockCommentNoIndent = false	2614:3:76634:76662	621404	5	True				
ANR	622132	AssignmentExpression	blockCommentNoIndent = false		621404	0		=			
ANR	622133	Identifier	blockCommentNoIndent		621404	0					
ANR	622134	Identifier	false		621404	1					
ANR	622135	ContinueStatement	continue ;	2615:3:76706:76714	621404	6	True				
ANR	622136	ElseStatement	else		621404	0					
ANR	622137	IfStatement	"if ( line [ 0 ] == '#' && isIndentedPreprocessor ( line , i ) )"		621404	0					
ANR	622138	Condition	"line [ 0 ] == '#' && isIndentedPreprocessor ( line , i )"	2618:11:76788:76836	621404	0	True				
ANR	622139	AndExpression	"line [ 0 ] == '#' && isIndentedPreprocessor ( line , i )"		621404	0		&&			
ANR	622140	EqualityExpression	line [ 0 ] == '#'		621404	0		==			
ANR	622141	ArrayIndexing	line [ 0 ]		621404	0					
ANR	622142	Identifier	line		621404	0					
ANR	622143	PrimaryExpression	0		621404	1					
ANR	622144	PrimaryExpression	'#'		621404	1					
ANR	622145	CallExpression	"isIndentedPreprocessor ( line , i )"		621404	1					
ANR	622146	Callee	isIndentedPreprocessor		621404	0					
ANR	622147	Identifier	isIndentedPreprocessor		621404	0					
ANR	622148	ArgumentList	line		621404	1					
ANR	622149	Argument	line		621404	0					
ANR	622150	Identifier	line		621404	0					
ANR	622151	Argument	i		621404	1					
ANR	622152	Identifier	i		621404	0					
ANR	622153	CompoundStatement		169:2:4965:4965	621404	1					
ANR	622154	ExpressionStatement	isInLineComment = true	2620:3:76846:76868	621404	0	True				
ANR	622155	AssignmentExpression	isInLineComment = true		621404	0		=			
ANR	622156	Identifier	isInLineComment		621404	0					
ANR	622157	Identifier	true		621404	1					
ANR	622158	IfStatement	if ( isInLineComment )		621404	7					
ANR	622159	Condition	isInLineComment	2623:6:76881:76895	621404	0	True				
ANR	622160	Identifier	isInLineComment		621404	0					
ANR	622161	CompoundStatement		174:2:5024:5024	621404	1					
ANR	622162	WhileStatement	while ( i + 1 < line . length ( ) )		621404	0					
ANR	622163	Condition	i + 1 < line . length ( )	2626:10:76967:76987	621404	0	True				
ANR	622164	RelationalExpression	i + 1 < line . length ( )		621404	0		<			
ANR	622165	AdditiveExpression	i + 1		621404	0		+			
ANR	622166	Identifier	i		621404	0					
ANR	622167	PrimaryExpression	1		621404	1					
ANR	622168	CallExpression	line . length ( )		621404	1					
ANR	622169	Callee	line . length		621404	0					
ANR	622170	MemberAccess	line . length		621404	0					
ANR	622171	Identifier	line		621404	0					
ANR	622172	Identifier	length		621404	1					
ANR	622173	ArgumentList			621404	1					
ANR	622174	ExpressionStatement	i ++	2627:4:76994:76997	621404	1	True				
ANR	622175	PostIncDecOperationExpression	i ++		621404	0					
ANR	622176	Identifier	i		621404	0					
ANR	622177	IncDec	++		621404	1					
ANR	622178	ContinueStatement	continue ;	2629:3:77003:77011	621404	1	True				
ANR	622179	IfStatement	if ( isInComment )		621404	8					
ANR	622180	Condition	isInComment	2631:6:77023:77033	621404	0	True				
ANR	622181	Identifier	isInComment		621404	0					
ANR	622182	CompoundStatement		182:2:5162:5162	621404	1					
ANR	622183	IfStatement	if ( ! lineOpensWithComment && isCaseHeaderCommentIndent )		621404	0					
ANR	622184	Condition	! lineOpensWithComment && isCaseHeaderCommentIndent	2634:7:77119:77168	621404	0	True				
ANR	622185	AndExpression	! lineOpensWithComment && isCaseHeaderCommentIndent		621404	0		&&			
ANR	622186	UnaryOperationExpression	! lineOpensWithComment		621404	0					
ANR	622187	UnaryOperator	!		621404	0					
ANR	622188	Identifier	lineOpensWithComment		621404	1					
ANR	622189	Identifier	isCaseHeaderCommentIndent		621404	1					
ANR	622190	ExpressionStatement	-- indentCount	2635:4:77175:77188	621404	1	True				
ANR	622191	UnaryExpression	-- indentCount		621404	0					
ANR	622192	IncDec	--		621404	0					
ANR	622193	Identifier	indentCount		621404	1					
ANR	622194	IfStatement	if ( ! lineOpensWithComment && isElseHeaderIndent && ! tempStacks -> empty ( ) )		621404	1					
ANR	622195	Condition	! lineOpensWithComment && isElseHeaderIndent && ! tempStacks -> empty ( )	2638:7:77360:77426	621404	0	True				
ANR	622196	AndExpression	! lineOpensWithComment && isElseHeaderIndent && ! tempStacks -> empty ( )		621404	0		&&			
ANR	622197	UnaryOperationExpression	! lineOpensWithComment		621404	0					
ANR	622198	UnaryOperator	!		621404	0					
ANR	622199	Identifier	lineOpensWithComment		621404	1					
ANR	622200	AndExpression	isElseHeaderIndent && ! tempStacks -> empty ( )		621404	1		&&			
ANR	622201	Identifier	isElseHeaderIndent		621404	0					
ANR	622202	UnaryOperationExpression	! tempStacks -> empty ( )		621404	1					
ANR	622203	UnaryOperator	!		621404	0					
ANR	622204	CallExpression	tempStacks -> empty ( )		621404	1					
ANR	622205	Callee	tempStacks -> empty		621404	0					
ANR	622206	PtrMemberAccess	tempStacks -> empty		621404	0					
ANR	622207	Identifier	tempStacks		621404	0					
ANR	622208	Identifier	empty		621404	1					
ANR	622209	ArgumentList			621404	1					
ANR	622210	ExpressionStatement	indentCount += adjustIndentCountForBreakElseIfComments ( )	2639:4:77433:77489	621404	1	True				
ANR	622211	AssignmentExpression	indentCount += adjustIndentCountForBreakElseIfComments ( )		621404	0		+=			
ANR	622212	Identifier	indentCount		621404	0					
ANR	622213	CallExpression	adjustIndentCountForBreakElseIfComments ( )		621404	1					
ANR	622214	Callee	adjustIndentCountForBreakElseIfComments		621404	0					
ANR	622215	Identifier	adjustIndentCountForBreakElseIfComments		621404	0					
ANR	622216	ArgumentList			621404	1					
ANR	622217	WhileStatement	"while ( i + 1 < line . length ( ) && line . compare ( i + 1 , 2 , ""*/"" ) != 0 )"		621404	2					
ANR	622218	Condition	"i + 1 < line . length ( ) && line . compare ( i + 1 , 2 , ""*/"" ) != 0"	2641:10:77556:77624	621404	0	True				
ANR	622219	AndExpression	"i + 1 < line . length ( ) && line . compare ( i + 1 , 2 , ""*/"" ) != 0"		621404	0		&&			
ANR	622220	RelationalExpression	i + 1 < line . length ( )		621404	0		<			
ANR	622221	AdditiveExpression	i + 1		621404	0		+			
ANR	622222	Identifier	i		621404	0					
ANR	622223	PrimaryExpression	1		621404	1					
ANR	622224	CallExpression	line . length ( )		621404	1					
ANR	622225	Callee	line . length		621404	0					
ANR	622226	MemberAccess	line . length		621404	0					
ANR	622227	Identifier	line		621404	0					
ANR	622228	Identifier	length		621404	1					
ANR	622229	ArgumentList			621404	1					
ANR	622230	EqualityExpression	"line . compare ( i + 1 , 2 , ""*/"" ) != 0"		621404	1		!=			
ANR	622231	CallExpression	"line . compare ( i + 1 , 2 , ""*/"" )"		621404	0					
ANR	622232	Callee	line . compare		621404	0					
ANR	622233	MemberAccess	line . compare		621404	0					
ANR	622234	Identifier	line		621404	0					
ANR	622235	Identifier	compare		621404	1					
ANR	622236	ArgumentList	i + 1		621404	1					
ANR	622237	Argument	i + 1		621404	0					
ANR	622238	AdditiveExpression	i + 1		621404	0		+			
ANR	622239	Identifier	i		621404	0					
ANR	622240	PrimaryExpression	1		621404	1					
ANR	622241	Argument	2		621404	1					
ANR	622242	PrimaryExpression	2		621404	0					
ANR	622243	Argument	"""*/"""		621404	2					
ANR	622244	PrimaryExpression	"""*/"""		621404	0					
ANR	622245	PrimaryExpression	0		621404	1					
ANR	622246	ExpressionStatement	i ++	2643:4:77631:77634	621404	1	True				
ANR	622247	PostIncDecOperationExpression	i ++		621404	0					
ANR	622248	Identifier	i		621404	0					
ANR	622249	IncDec	++		621404	1					
ANR	622250	ContinueStatement	continue ;	2645:3:77640:77648	621404	3	True				
ANR	622251	IfStatement	if ( probationHeader != nullptr )		621404	9					
ANR	622252	Condition	probationHeader != nullptr	2650:6:77758:77783	621404	0	True				
ANR	622253	EqualityExpression	probationHeader != nullptr		621404	0		!=			
ANR	622254	Identifier	probationHeader		621404	0					
ANR	622255	Identifier	nullptr		621404	1					
ANR	622256	CompoundStatement		201:2:5912:5912	621404	1					
ANR	622257	IfStatement	if ( ( probationHeader == & AS_STATIC && ch == '{' ) || ( probationHeader == & AS_SYNCHRONIZED && ch == '(' ) )		621404	0					
ANR	622258	Condition	( probationHeader == & AS_STATIC && ch == '{' ) || ( probationHeader == & AS_SYNCHRONIZED && ch == '(' )	2652:7:77797:77905	621404	0	True				
ANR	622259	OrExpression	( probationHeader == & AS_STATIC && ch == '{' ) || ( probationHeader == & AS_SYNCHRONIZED && ch == '(' )		621404	0		||			
ANR	622260	AndExpression	probationHeader == & AS_STATIC && ch == '{'		621404	0		&&			
ANR	622261	EqualityExpression	probationHeader == & AS_STATIC		621404	0		==			
ANR	622262	Identifier	probationHeader		621404	0					
ANR	622263	UnaryOperationExpression	& AS_STATIC		621404	1					
ANR	622264	UnaryOperator	&		621404	0					
ANR	622265	Identifier	AS_STATIC		621404	1					
ANR	622266	EqualityExpression	ch == '{'		621404	1		==			
ANR	622267	Identifier	ch		621404	0					
ANR	622268	PrimaryExpression	'{'		621404	1					
ANR	622269	AndExpression	probationHeader == & AS_SYNCHRONIZED && ch == '('		621404	1		&&			
ANR	622270	EqualityExpression	probationHeader == & AS_SYNCHRONIZED		621404	0		==			
ANR	622271	Identifier	probationHeader		621404	0					
ANR	622272	UnaryOperationExpression	& AS_SYNCHRONIZED		621404	1					
ANR	622273	UnaryOperator	&		621404	0					
ANR	622274	Identifier	AS_SYNCHRONIZED		621404	1					
ANR	622275	EqualityExpression	ch == '('		621404	1		==			
ANR	622276	Identifier	ch		621404	0					
ANR	622277	PrimaryExpression	'('		621404	1					
ANR	622278	CompoundStatement		204:3:6035:6035	621404	1					
ANR	622279	ExpressionStatement	isInHeader = true	2656:4:77968:77985	621404	0	True				
ANR	622280	AssignmentExpression	isInHeader = true		621404	0		=			
ANR	622281	Identifier	isInHeader		621404	0					
ANR	622282	Identifier	true		621404	1					
ANR	622283	ExpressionStatement	headerStack -> emplace_back ( probationHeader )	2657:4:77991:78033	621404	1	True				
ANR	622284	CallExpression	headerStack -> emplace_back ( probationHeader )		621404	0					
ANR	622285	Callee	headerStack -> emplace_back		621404	0					
ANR	622286	PtrMemberAccess	headerStack -> emplace_back		621404	0					
ANR	622287	Identifier	headerStack		621404	0					
ANR	622288	Identifier	emplace_back		621404	1					
ANR	622289	ArgumentList	probationHeader		621404	1					
ANR	622290	Argument	probationHeader		621404	0					
ANR	622291	Identifier	probationHeader		621404	0					
ANR	622292	ExpressionStatement	isInConditional = ( probationHeader == & AS_SYNCHRONIZED )	2660:4:78084:78139	621404	2	True				
ANR	622293	AssignmentExpression	isInConditional = ( probationHeader == & AS_SYNCHRONIZED )		621404	0		=			
ANR	622294	Identifier	isInConditional		621404	0					
ANR	622295	EqualityExpression	probationHeader == & AS_SYNCHRONIZED		621404	1		==			
ANR	622296	Identifier	probationHeader		621404	0					
ANR	622297	UnaryOperationExpression	& AS_SYNCHRONIZED		621404	1					
ANR	622298	UnaryOperator	&		621404	0					
ANR	622299	Identifier	AS_SYNCHRONIZED		621404	1					
ANR	622300	ExpressionStatement	isContinuation = false	2662:4:78146:78168	621404	3	True				
ANR	622301	AssignmentExpression	isContinuation = false		621404	0		=			
ANR	622302	Identifier	isContinuation		621404	0					
ANR	622303	Identifier	false		621404	1					
ANR	622304	IfStatement	if ( previousLineProbation && ch == '{' && ! ( blockIndent && probationHeader == & AS_STATIC ) )		621404	4					
ANR	622305	Condition	previousLineProbation && ch == '{' && ! ( blockIndent && probationHeader == & AS_STATIC )	2664:8:78260:78368	621404	0	True				
ANR	622306	AndExpression	previousLineProbation && ch == '{' && ! ( blockIndent && probationHeader == & AS_STATIC )		621404	0		&&			
ANR	622307	Identifier	previousLineProbation		621404	0					
ANR	622308	AndExpression	ch == '{' && ! ( blockIndent && probationHeader == & AS_STATIC )		621404	1		&&			
ANR	622309	EqualityExpression	ch == '{'		621404	0		==			
ANR	622310	Identifier	ch		621404	0					
ANR	622311	PrimaryExpression	'{'		621404	1					
ANR	622312	UnaryOperationExpression	! ( blockIndent && probationHeader == & AS_STATIC )		621404	1					
ANR	622313	UnaryOperator	!		621404	0					
ANR	622314	AndExpression	blockIndent && probationHeader == & AS_STATIC		621404	1		&&			
ANR	622315	Identifier	blockIndent		621404	0					
ANR	622316	EqualityExpression	probationHeader == & AS_STATIC		621404	1		==			
ANR	622317	Identifier	probationHeader		621404	0					
ANR	622318	UnaryOperationExpression	& AS_STATIC		621404	1					
ANR	622319	UnaryOperator	&		621404	0					
ANR	622320	Identifier	AS_STATIC		621404	1					
ANR	622321	CompoundStatement		217:4:6499:6499	621404	1					
ANR	622322	ExpressionStatement	++ indentCount	2668:5:78382:78395	621404	0	True				
ANR	622323	UnaryExpression	++ indentCount		621404	0					
ANR	622324	IncDec	++		621404	0					
ANR	622325	Identifier	indentCount		621404	1					
ANR	622326	ExpressionStatement	previousLineProbationTab = true	2669:5:78402:78433	621404	1	True				
ANR	622327	AssignmentExpression	previousLineProbationTab = true		621404	0		=			
ANR	622328	Identifier	previousLineProbationTab		621404	0					
ANR	622329	Identifier	true		621404	1					
ANR	622330	ExpressionStatement	previousLineProbation = false	2671:4:78445:78474	621404	5	True				
ANR	622331	AssignmentExpression	previousLineProbation = false		621404	0		=			
ANR	622332	Identifier	previousLineProbation		621404	0					
ANR	622333	Identifier	false		621404	1					
ANR	622334	ExpressionStatement	probationHeader = nullptr	2675:3:78520:78545	621404	1	True				
ANR	622335	AssignmentExpression	probationHeader = nullptr		621404	0		=			
ANR	622336	Identifier	probationHeader		621404	0					
ANR	622337	Identifier	nullptr		621404	1					
ANR	622338	ExpressionStatement	prevNonSpaceCh = currentNonSpaceCh	2678:2:78554:78588	621404	10	True				
ANR	622339	AssignmentExpression	prevNonSpaceCh = currentNonSpaceCh		621404	0		=			
ANR	622340	Identifier	prevNonSpaceCh		621404	0					
ANR	622341	Identifier	currentNonSpaceCh		621404	1					
ANR	622342	ExpressionStatement	currentNonSpaceCh = ch	2679:2:78592:78614	621404	11	True				
ANR	622343	AssignmentExpression	currentNonSpaceCh = ch		621404	0		=			
ANR	622344	Identifier	currentNonSpaceCh		621404	0					
ANR	622345	Identifier	ch		621404	1					
ANR	622346	IfStatement	"if ( ! isLegalNameChar ( ch ) && ch != ',' && ch != ';' )"		621404	12					
ANR	622347	Condition	"! isLegalNameChar ( ch ) && ch != ',' && ch != ';'"	2680:6:78622:78667	621404	0	True				
ANR	622348	AndExpression	"! isLegalNameChar ( ch ) && ch != ',' && ch != ';'"		621404	0		&&			
ANR	622349	UnaryOperationExpression	! isLegalNameChar ( ch )		621404	0					
ANR	622350	UnaryOperator	!		621404	0					
ANR	622351	CallExpression	isLegalNameChar ( ch )		621404	1					
ANR	622352	Callee	isLegalNameChar		621404	0					
ANR	622353	Identifier	isLegalNameChar		621404	0					
ANR	622354	ArgumentList	ch		621404	1					
ANR	622355	Argument	ch		621404	0					
ANR	622356	Identifier	ch		621404	0					
ANR	622357	AndExpression	"ch != ',' && ch != ';'"		621404	1		&&			
ANR	622358	EqualityExpression	"ch != ','"		621404	0		!=			
ANR	622359	Identifier	ch		621404	0					
ANR	622360	PrimaryExpression	"','"		621404	1					
ANR	622361	EqualityExpression	ch != ';'		621404	1		!=			
ANR	622362	Identifier	ch		621404	0					
ANR	622363	PrimaryExpression	';'		621404	1					
ANR	622364	CompoundStatement		231:2:6796:6796	621404	1					
ANR	622365	ExpressionStatement	prevNonLegalCh = currentNonLegalCh	2682:3:78677:78711	621404	0	True				
ANR	622366	AssignmentExpression	prevNonLegalCh = currentNonLegalCh		621404	0		=			
ANR	622367	Identifier	prevNonLegalCh		621404	0					
ANR	622368	Identifier	currentNonLegalCh		621404	1					
ANR	622369	ExpressionStatement	currentNonLegalCh = ch	2683:3:78716:78738	621404	1	True				
ANR	622370	AssignmentExpression	currentNonLegalCh = ch		621404	0		=			
ANR	622371	Identifier	currentNonLegalCh		621404	0					
ANR	622372	Identifier	ch		621404	1					
ANR	622373	IfStatement	if ( isInHeader )		621404	13					
ANR	622374	Condition	isInHeader	2686:6:78751:78760	621404	0	True				
ANR	622375	Identifier	isInHeader		621404	0					
ANR	622376	CompoundStatement		237:2:6889:6889	621404	1					
ANR	622377	ExpressionStatement	isInHeader = false	2688:3:78770:78788	621404	0	True				
ANR	622378	AssignmentExpression	isInHeader = false		621404	0		=			
ANR	622379	Identifier	isInHeader		621404	0					
ANR	622380	Identifier	false		621404	1					
ANR	622381	ExpressionStatement	currentHeader = headerStack -> back ( )	2689:3:78793:78828	621404	1	True				
ANR	622382	AssignmentExpression	currentHeader = headerStack -> back ( )		621404	0		=			
ANR	622383	Identifier	currentHeader		621404	0					
ANR	622384	CallExpression	headerStack -> back ( )		621404	1					
ANR	622385	Callee	headerStack -> back		621404	0					
ANR	622386	PtrMemberAccess	headerStack -> back		621404	0					
ANR	622387	Identifier	headerStack		621404	0					
ANR	622388	Identifier	back		621404	1					
ANR	622389	ArgumentList			621404	1					
ANR	622390	ElseStatement	else		621404	0					
ANR	622391	ExpressionStatement	currentHeader = nullptr	2692:3:78844:78867	621404	0	True				
ANR	622392	AssignmentExpression	currentHeader = nullptr		621404	0		=			
ANR	622393	Identifier	currentHeader		621404	0					
ANR	622394	Identifier	nullptr		621404	1					
ANR	622395	IfStatement	"if ( isCStyle ( ) && isInTemplate && ( ch == '<' || ch == '>' ) && ! ( line . length ( ) > i + 1 && line . compare ( i , 2 , "">="" ) == 0 ) )"		621404	14					
ANR	622396	Condition	"isCStyle ( ) && isInTemplate && ( ch == '<' || ch == '>' ) && ! ( line . length ( ) > i + 1 && line . compare ( i , 2 , "">="" ) == 0 )"	2694:6:78876:79010	621404	0	True				
ANR	622397	AndExpression	"isCStyle ( ) && isInTemplate && ( ch == '<' || ch == '>' ) && ! ( line . length ( ) > i + 1 && line . compare ( i , 2 , "">="" ) == 0 )"		621404	0		&&			
ANR	622398	CallExpression	isCStyle ( )		621404	0					
ANR	622399	Callee	isCStyle		621404	0					
ANR	622400	Identifier	isCStyle		621404	0					
ANR	622401	ArgumentList			621404	1					
ANR	622402	AndExpression	"isInTemplate && ( ch == '<' || ch == '>' ) && ! ( line . length ( ) > i + 1 && line . compare ( i , 2 , "">="" ) == 0 )"		621404	1		&&			
ANR	622403	Identifier	isInTemplate		621404	0					
ANR	622404	AndExpression	"( ch == '<' || ch == '>' ) && ! ( line . length ( ) > i + 1 && line . compare ( i , 2 , "">="" ) == 0 )"		621404	1		&&			
ANR	622405	OrExpression	ch == '<' || ch == '>'		621404	0		||			
ANR	622406	EqualityExpression	ch == '<'		621404	0		==			
ANR	622407	Identifier	ch		621404	0					
ANR	622408	PrimaryExpression	'<'		621404	1					
ANR	622409	EqualityExpression	ch == '>'		621404	1		==			
ANR	622410	Identifier	ch		621404	0					
ANR	622411	PrimaryExpression	'>'		621404	1					
ANR	622412	UnaryOperationExpression	"! ( line . length ( ) > i + 1 && line . compare ( i , 2 , "">="" ) == 0 )"		621404	1					
ANR	622413	UnaryOperator	!		621404	0					
ANR	622414	AndExpression	"line . length ( ) > i + 1 && line . compare ( i , 2 , "">="" ) == 0"		621404	1		&&			
ANR	622415	RelationalExpression	line . length ( ) > i + 1		621404	0		>			
ANR	622416	CallExpression	line . length ( )		621404	0					
ANR	622417	Callee	line . length		621404	0					
ANR	622418	MemberAccess	line . length		621404	0					
ANR	622419	Identifier	line		621404	0					
ANR	622420	Identifier	length		621404	1					
ANR	622421	ArgumentList			621404	1					
ANR	622422	AdditiveExpression	i + 1		621404	1		+			
ANR	622423	Identifier	i		621404	0					
ANR	622424	PrimaryExpression	1		621404	1					
ANR	622425	EqualityExpression	"line . compare ( i , 2 , "">="" ) == 0"		621404	1		==			
ANR	622426	CallExpression	"line . compare ( i , 2 , "">="" )"		621404	0					
ANR	622427	Callee	line . compare		621404	0					
ANR	622428	MemberAccess	line . compare		621404	0					
ANR	622429	Identifier	line		621404	0					
ANR	622430	Identifier	compare		621404	1					
ANR	622431	ArgumentList	i		621404	1					
ANR	622432	Argument	i		621404	0					
ANR	622433	Identifier	i		621404	0					
ANR	622434	Argument	2		621404	1					
ANR	622435	PrimaryExpression	2		621404	0					
ANR	622436	Argument	""">="""		621404	2					
ANR	622437	PrimaryExpression	""">="""		621404	0					
ANR	622438	PrimaryExpression	0		621404	1					
ANR	622439	CompoundStatement		247:2:7139:7139	621404	1					
ANR	622440	IfStatement	if ( ch == '<' )		621404	0					
ANR	622441	Condition	ch == '<'	2698:7:79024:79032	621404	0	True				
ANR	622442	EqualityExpression	ch == '<'		621404	0		==			
ANR	622443	Identifier	ch		621404	0					
ANR	622444	PrimaryExpression	'<'		621404	1					
ANR	622445	CompoundStatement		249:3:7162:7162	621404	1					
ANR	622446	ExpressionStatement	++ templateDepth	2700:4:79044:79059	621404	0	True				
ANR	622447	UnaryExpression	++ templateDepth		621404	0					
ANR	622448	IncDec	++		621404	0					
ANR	622449	Identifier	templateDepth		621404	1					
ANR	622450	ExpressionStatement	continuationIndentStackSizeStack -> push_back ( continuationIndentStack -> size ( ) )	2701:4:79065:79141	621404	1	True				
ANR	622451	CallExpression	continuationIndentStackSizeStack -> push_back ( continuationIndentStack -> size ( ) )		621404	0					
ANR	622452	Callee	continuationIndentStackSizeStack -> push_back		621404	0					
ANR	622453	PtrMemberAccess	continuationIndentStackSizeStack -> push_back		621404	0					
ANR	622454	Identifier	continuationIndentStackSizeStack		621404	0					
ANR	622455	Identifier	push_back		621404	1					
ANR	622456	ArgumentList	continuationIndentStack -> size ( )		621404	1					
ANR	622457	Argument	continuationIndentStack -> size ( )		621404	0					
ANR	622458	CallExpression	continuationIndentStack -> size ( )		621404	0					
ANR	622459	Callee	continuationIndentStack -> size		621404	0					
ANR	622460	PtrMemberAccess	continuationIndentStack -> size		621404	0					
ANR	622461	Identifier	continuationIndentStack		621404	0					
ANR	622462	Identifier	size		621404	1					
ANR	622463	ArgumentList			621404	1					
ANR	622464	ExpressionStatement	"registerContinuationIndent ( line , i , spaceIndentCount , tabIncrementIn , 0 , true )"	2702:4:79147:79225	621404	2	True				
ANR	622465	CallExpression	"registerContinuationIndent ( line , i , spaceIndentCount , tabIncrementIn , 0 , true )"		621404	0					
ANR	622466	Callee	registerContinuationIndent		621404	0					
ANR	622467	Identifier	registerContinuationIndent		621404	0					
ANR	622468	ArgumentList	line		621404	1					
ANR	622469	Argument	line		621404	0					
ANR	622470	Identifier	line		621404	0					
ANR	622471	Argument	i		621404	1					
ANR	622472	Identifier	i		621404	0					
ANR	622473	Argument	spaceIndentCount		621404	2					
ANR	622474	Identifier	spaceIndentCount		621404	0					
ANR	622475	Argument	tabIncrementIn		621404	3					
ANR	622476	Identifier	tabIncrementIn		621404	0					
ANR	622477	Argument	0		621404	4					
ANR	622478	PrimaryExpression	0		621404	0					
ANR	622479	Argument	true		621404	5					
ANR	622480	Identifier	true		621404	0					
ANR	622481	ElseStatement	else		621404	0					
ANR	622482	IfStatement	if ( ch == '>' )		621404	0					
ANR	622483	Condition	ch == '>'	2704:12:79244:79252	621404	0	True				
ANR	622484	EqualityExpression	ch == '>'		621404	0		==			
ANR	622485	Identifier	ch		621404	0					
ANR	622486	PrimaryExpression	'>'		621404	1					
ANR	622487	CompoundStatement		255:3:7382:7382	621404	1					
ANR	622488	ExpressionStatement	popLastContinuationIndent ( )	2706:4:79264:79291	621404	0	True				
ANR	622489	CallExpression	popLastContinuationIndent ( )		621404	0					
ANR	622490	Callee	popLastContinuationIndent		621404	0					
ANR	622491	Identifier	popLastContinuationIndent		621404	0					
ANR	622492	ArgumentList			621404	1					
ANR	622493	IfStatement	if ( -- templateDepth <= 0 )		621404	1					
ANR	622494	Condition	-- templateDepth <= 0	2707:8:79301:79320	621404	0	True				
ANR	622495	RelationalExpression	-- templateDepth <= 0		621404	0		<=			
ANR	622496	UnaryExpression	-- templateDepth		621404	0					
ANR	622497	IncDec	--		621404	0					
ANR	622498	Identifier	templateDepth		621404	1					
ANR	622499	PrimaryExpression	0		621404	1					
ANR	622500	CompoundStatement		258:4:7451:7451	621404	1					
ANR	622501	ExpressionStatement	ch = ';'	2709:5:79334:79342	621404	0	True				
ANR	622502	AssignmentExpression	ch = ';'		621404	0		=			
ANR	622503	Identifier	ch		621404	0					
ANR	622504	PrimaryExpression	';'		621404	1					
ANR	622505	ExpressionStatement	isInTemplate = false	2710:5:79349:79369	621404	1	True				
ANR	622506	AssignmentExpression	isInTemplate = false		621404	0		=			
ANR	622507	Identifier	isInTemplate		621404	0					
ANR	622508	Identifier	false		621404	1					
ANR	622509	ExpressionStatement	templateDepth = 0	2711:5:79376:79393	621404	2	True				
ANR	622510	AssignmentExpression	templateDepth = 0		621404	0		=			
ANR	622511	Identifier	templateDepth		621404	0					
ANR	622512	PrimaryExpression	0		621404	1					
ANR	622513	IfStatement	if ( ch == '(' || ch == '[' || ch == ')' || ch == ']' )		621404	15					
ANR	622514	Condition	ch == '(' || ch == '[' || ch == ')' || ch == ']'	2717:6:79441:79488	621404	0	True				
ANR	622515	OrExpression	ch == '(' || ch == '[' || ch == ')' || ch == ']'		621404	0		||			
ANR	622516	EqualityExpression	ch == '('		621404	0		==			
ANR	622517	Identifier	ch		621404	0					
ANR	622518	PrimaryExpression	'('		621404	1					
ANR	622519	OrExpression	ch == '[' || ch == ')' || ch == ']'		621404	1		||			
ANR	622520	EqualityExpression	ch == '['		621404	0		==			
ANR	622521	Identifier	ch		621404	0					
ANR	622522	PrimaryExpression	'['		621404	1					
ANR	622523	OrExpression	ch == ')' || ch == ']'		621404	1		||			
ANR	622524	EqualityExpression	ch == ')'		621404	0		==			
ANR	622525	Identifier	ch		621404	0					
ANR	622526	PrimaryExpression	')'		621404	1					
ANR	622527	EqualityExpression	ch == ']'		621404	1		==			
ANR	622528	Identifier	ch		621404	0					
ANR	622529	PrimaryExpression	']'		621404	1					
ANR	622530	CompoundStatement		268:2:7617:7617	621404	1					
ANR	622531	IfStatement	if ( ch == '(' || ch == '[' )		621404	0					
ANR	622532	Condition	ch == '(' || ch == '['	2719:7:79502:79523	621404	0	True				
ANR	622533	OrExpression	ch == '(' || ch == '['		621404	0		||			
ANR	622534	EqualityExpression	ch == '('		621404	0		==			
ANR	622535	Identifier	ch		621404	0					
ANR	622536	PrimaryExpression	'('		621404	1					
ANR	622537	EqualityExpression	ch == '['		621404	1		==			
ANR	622538	Identifier	ch		621404	0					
ANR	622539	PrimaryExpression	'['		621404	1					
ANR	622540	CompoundStatement		270:3:7653:7653	621404	1					
ANR	622541	ExpressionStatement	isInOperator = false	2721:4:79535:79555	621404	0	True				
ANR	622542	AssignmentExpression	isInOperator = false		621404	0		=			
ANR	622543	Identifier	isInOperator		621404	0					
ANR	622544	Identifier	false		621404	1					
ANR	622545	IfStatement	if ( ch == '(' && ! headerStack -> empty ( ) && headerStack -> back ( ) == & AS_STRUCT )		621404	1					
ANR	622546	Condition	ch == '(' && ! headerStack -> empty ( ) && headerStack -> back ( ) == & AS_STRUCT	2723:8:79636:79730	621404	0	True				
ANR	622547	AndExpression	ch == '(' && ! headerStack -> empty ( ) && headerStack -> back ( ) == & AS_STRUCT		621404	0		&&			
ANR	622548	EqualityExpression	ch == '('		621404	0		==			
ANR	622549	Identifier	ch		621404	0					
ANR	622550	PrimaryExpression	'('		621404	1					
ANR	622551	AndExpression	! headerStack -> empty ( ) && headerStack -> back ( ) == & AS_STRUCT		621404	1		&&			
ANR	622552	UnaryOperationExpression	! headerStack -> empty ( )		621404	0					
ANR	622553	UnaryOperator	!		621404	0					
ANR	622554	CallExpression	headerStack -> empty ( )		621404	1					
ANR	622555	Callee	headerStack -> empty		621404	0					
ANR	622556	PtrMemberAccess	headerStack -> empty		621404	0					
ANR	622557	Identifier	headerStack		621404	0					
ANR	622558	Identifier	empty		621404	1					
ANR	622559	ArgumentList			621404	1					
ANR	622560	EqualityExpression	headerStack -> back ( ) == & AS_STRUCT		621404	1		==			
ANR	622561	CallExpression	headerStack -> back ( )		621404	0					
ANR	622562	Callee	headerStack -> back		621404	0					
ANR	622563	PtrMemberAccess	headerStack -> back		621404	0					
ANR	622564	Identifier	headerStack		621404	0					
ANR	622565	Identifier	back		621404	1					
ANR	622566	ArgumentList			621404	1					
ANR	622567	UnaryOperationExpression	& AS_STRUCT		621404	1					
ANR	622568	UnaryOperator	&		621404	0					
ANR	622569	Identifier	AS_STRUCT		621404	1					
ANR	622570	CompoundStatement		276:4:7861:7861	621404	1					
ANR	622571	ExpressionStatement	headerStack -> pop_back ( )	2727:5:79744:79767	621404	0	True				
ANR	622572	CallExpression	headerStack -> pop_back ( )		621404	0					
ANR	622573	Callee	headerStack -> pop_back		621404	0					
ANR	622574	PtrMemberAccess	headerStack -> pop_back		621404	0					
ANR	622575	Identifier	headerStack		621404	0					
ANR	622576	Identifier	pop_back		621404	1					
ANR	622577	ArgumentList			621404	1					
ANR	622578	ExpressionStatement	isInClassHeader = false	2728:5:79774:79797	621404	1	True				
ANR	622579	AssignmentExpression	isInClassHeader = false		621404	0		=			
ANR	622580	Identifier	isInClassHeader		621404	0					
ANR	622581	Identifier	false		621404	1					
ANR	622582	IfStatement	"if ( line . find ( AS_STRUCT , 0 ) > i )"		621404	2					
ANR	622583	Condition	"line . find ( AS_STRUCT , 0 ) > i"	2729:9:79808:79834	621404	0	True				
ANR	622584	RelationalExpression	"line . find ( AS_STRUCT , 0 ) > i"		621404	0		>			
ANR	622585	CallExpression	"line . find ( AS_STRUCT , 0 )"		621404	0					
ANR	622586	Callee	line . find		621404	0					
ANR	622587	MemberAccess	line . find		621404	0					
ANR	622588	Identifier	line		621404	0					
ANR	622589	Identifier	find		621404	1					
ANR	622590	ArgumentList	AS_STRUCT		621404	1					
ANR	622591	Argument	AS_STRUCT		621404	0					
ANR	622592	Identifier	AS_STRUCT		621404	0					
ANR	622593	Argument	0		621404	1					
ANR	622594	PrimaryExpression	0		621404	0					
ANR	622595	Identifier	i		621404	1					
ANR	622596	ExpressionStatement	indentCount -= classInitializerIndents	2730:6:79866:79904	621404	1	True				
ANR	622597	AssignmentExpression	indentCount -= classInitializerIndents		621404	0		-=			
ANR	622598	Identifier	indentCount		621404	0					
ANR	622599	Identifier	classInitializerIndents		621404	1					
ANR	622600	IfStatement	if ( indentCount < 0 )		621404	3					
ANR	622601	Condition	indentCount < 0	2731:9:79915:79929	621404	0	True				
ANR	622602	RelationalExpression	indentCount < 0		621404	0		<			
ANR	622603	Identifier	indentCount		621404	0					
ANR	622604	PrimaryExpression	0		621404	1					
ANR	622605	ExpressionStatement	indentCount = 0	2732:6:79938:79953	621404	1	True				
ANR	622606	AssignmentExpression	indentCount = 0		621404	0		=			
ANR	622607	Identifier	indentCount		621404	0					
ANR	622608	PrimaryExpression	0		621404	1					
ANR	622609	IfStatement	if ( parenDepth == 0 )		621404	2					
ANR	622610	Condition	parenDepth == 0	2735:8:79970:79984	621404	0	True				
ANR	622611	EqualityExpression	parenDepth == 0		621404	0		==			
ANR	622612	Identifier	parenDepth		621404	0					
ANR	622613	PrimaryExpression	0		621404	1					
ANR	622614	CompoundStatement		286:4:8115:8115	621404	1					
ANR	622615	ExpressionStatement	parenStatementStack -> push_back ( isContinuation )	2737:5:79998:80044	621404	0	True				
ANR	622616	CallExpression	parenStatementStack -> push_back ( isContinuation )		621404	0					
ANR	622617	Callee	parenStatementStack -> push_back		621404	0					
ANR	622618	PtrMemberAccess	parenStatementStack -> push_back		621404	0					
ANR	622619	Identifier	parenStatementStack		621404	0					
ANR	622620	Identifier	push_back		621404	1					
ANR	622621	ArgumentList	isContinuation		621404	1					
ANR	622622	Argument	isContinuation		621404	0					
ANR	622623	Identifier	isContinuation		621404	0					
ANR	622624	ExpressionStatement	isContinuation = true	2738:5:80051:80072	621404	1	True				
ANR	622625	AssignmentExpression	isContinuation = true		621404	0		=			
ANR	622626	Identifier	isContinuation		621404	0					
ANR	622627	Identifier	true		621404	1					
ANR	622628	ExpressionStatement	parenDepth ++	2740:4:80084:80096	621404	3	True				
ANR	622629	PostIncDecOperationExpression	parenDepth ++		621404	0					
ANR	622630	Identifier	parenDepth		621404	0					
ANR	622631	IncDec	++		621404	1					
ANR	622632	IfStatement	if ( ch == '[' )		621404	4					
ANR	622633	Condition	ch == '['	2741:8:80106:80114	621404	0	True				
ANR	622634	EqualityExpression	ch == '['		621404	0		==			
ANR	622635	Identifier	ch		621404	0					
ANR	622636	PrimaryExpression	'['		621404	1					
ANR	622637	CompoundStatement		292:4:8245:8245	621404	1					
ANR	622638	ExpressionStatement	++ squareBracketCount	2743:5:80128:80148	621404	0	True				
ANR	622639	UnaryExpression	++ squareBracketCount		621404	0					
ANR	622640	IncDec	++		621404	0					
ANR	622641	Identifier	squareBracketCount		621404	1					
ANR	622642	IfStatement	if ( squareBracketCount == 1 && isCStyle ( ) )		621404	1					
ANR	622643	Condition	squareBracketCount == 1 && isCStyle ( )	2744:9:80159:80195	621404	0	True				
ANR	622644	AndExpression	squareBracketCount == 1 && isCStyle ( )		621404	0		&&			
ANR	622645	EqualityExpression	squareBracketCount == 1		621404	0		==			
ANR	622646	Identifier	squareBracketCount		621404	0					
ANR	622647	PrimaryExpression	1		621404	1					
ANR	622648	CallExpression	isCStyle ( )		621404	1					
ANR	622649	Callee	isCStyle		621404	0					
ANR	622650	Identifier	isCStyle		621404	0					
ANR	622651	ArgumentList			621404	1					
ANR	622652	CompoundStatement		295:5:8327:8327	621404	1					
ANR	622653	ExpressionStatement	isInObjCMethodCall = true	2746:6:80211:80236	621404	0	True				
ANR	622654	AssignmentExpression	isInObjCMethodCall = true		621404	0		=			
ANR	622655	Identifier	isInObjCMethodCall		621404	0					
ANR	622656	Identifier	true		621404	1					
ANR	622657	ExpressionStatement	isInObjCMethodCallFirst = true	2747:6:80244:80274	621404	1	True				
ANR	622658	AssignmentExpression	isInObjCMethodCallFirst = true		621404	0		=			
ANR	622659	Identifier	isInObjCMethodCallFirst		621404	0					
ANR	622660	Identifier	true		621404	1					
ANR	622661	ExpressionStatement	continuationIndentStackSizeStack -> push_back ( continuationIndentStack -> size ( ) )	2751:4:80294:80370	621404	5	True				
ANR	622662	CallExpression	continuationIndentStackSizeStack -> push_back ( continuationIndentStack -> size ( ) )		621404	0					
ANR	622663	Callee	continuationIndentStackSizeStack -> push_back		621404	0					
ANR	622664	PtrMemberAccess	continuationIndentStackSizeStack -> push_back		621404	0					
ANR	622665	Identifier	continuationIndentStackSizeStack		621404	0					
ANR	622666	Identifier	push_back		621404	1					
ANR	622667	ArgumentList	continuationIndentStack -> size ( )		621404	1					
ANR	622668	Argument	continuationIndentStack -> size ( )		621404	0					
ANR	622669	CallExpression	continuationIndentStack -> size ( )		621404	0					
ANR	622670	Callee	continuationIndentStack -> size		621404	0					
ANR	622671	PtrMemberAccess	continuationIndentStack -> size		621404	0					
ANR	622672	Identifier	continuationIndentStack		621404	0					
ANR	622673	Identifier	size		621404	1					
ANR	622674	ArgumentList			621404	1					
ANR	622675	IfStatement	if ( currentHeader != nullptr )		621404	6					
ANR	622676	Condition	currentHeader != nullptr	2753:8:80381:80404	621404	0	True				
ANR	622677	EqualityExpression	currentHeader != nullptr		621404	0		!=			
ANR	622678	Identifier	currentHeader		621404	0					
ANR	622679	Identifier	nullptr		621404	1					
ANR	622680	ExpressionStatement	"registerContinuationIndent ( line , i , spaceIndentCount , tabIncrementIn , minConditionalIndent , true )"	2754:5:80412:80509	621404	1	True				
ANR	622681	CallExpression	"registerContinuationIndent ( line , i , spaceIndentCount , tabIncrementIn , minConditionalIndent , true )"		621404	0					
ANR	622682	Callee	registerContinuationIndent		621404	0					
ANR	622683	Identifier	registerContinuationIndent		621404	0					
ANR	622684	ArgumentList	line		621404	1					
ANR	622685	Argument	line		621404	0					
ANR	622686	Identifier	line		621404	0					
ANR	622687	Argument	i		621404	1					
ANR	622688	Identifier	i		621404	0					
ANR	622689	Argument	spaceIndentCount		621404	2					
ANR	622690	Identifier	spaceIndentCount		621404	0					
ANR	622691	Argument	tabIncrementIn		621404	3					
ANR	622692	Identifier	tabIncrementIn		621404	0					
ANR	622693	Argument	minConditionalIndent		621404	4					
ANR	622694	Identifier	minConditionalIndent		621404	0					
ANR	622695	Argument	true		621404	5					
ANR	622696	Identifier	true		621404	0					
ANR	622697	ElseStatement	else		621404	0					
ANR	622698	ExpressionStatement	"registerContinuationIndent ( line , i , spaceIndentCount , tabIncrementIn , 0 , true )"	2756:5:80525:80603	621404	0	True				
ANR	622699	CallExpression	"registerContinuationIndent ( line , i , spaceIndentCount , tabIncrementIn , 0 , true )"		621404	0					
ANR	622700	Callee	registerContinuationIndent		621404	0					
ANR	622701	Identifier	registerContinuationIndent		621404	0					
ANR	622702	ArgumentList	line		621404	1					
ANR	622703	Argument	line		621404	0					
ANR	622704	Identifier	line		621404	0					
ANR	622705	Argument	i		621404	1					
ANR	622706	Identifier	i		621404	0					
ANR	622707	Argument	spaceIndentCount		621404	2					
ANR	622708	Identifier	spaceIndentCount		621404	0					
ANR	622709	Argument	tabIncrementIn		621404	3					
ANR	622710	Identifier	tabIncrementIn		621404	0					
ANR	622711	Argument	0		621404	4					
ANR	622712	PrimaryExpression	0		621404	0					
ANR	622713	Argument	true		621404	5					
ANR	622714	Identifier	true		621404	0					
ANR	622715	ElseStatement	else		621404	0					
ANR	622716	IfStatement	if ( ch == ')' || ch == ']' )		621404	0					
ANR	622717	Condition	ch == ')' || ch == ']'	2758:12:80622:80643	621404	0	True				
ANR	622718	OrExpression	ch == ')' || ch == ']'		621404	0		||			
ANR	622719	EqualityExpression	ch == ')'		621404	0		==			
ANR	622720	Identifier	ch		621404	0					
ANR	622721	PrimaryExpression	')'		621404	1					
ANR	622722	EqualityExpression	ch == ']'		621404	1		==			
ANR	622723	Identifier	ch		621404	0					
ANR	622724	PrimaryExpression	']'		621404	1					
ANR	622725	CompoundStatement		309:3:8773:8773	621404	1					
ANR	622726	IfStatement	if ( ch == ']' )		621404	0					
ANR	622727	Condition	ch == ']'	2760:8:80659:80667	621404	0	True				
ANR	622728	EqualityExpression	ch == ']'		621404	0		==			
ANR	622729	Identifier	ch		621404	0					
ANR	622730	PrimaryExpression	']'		621404	1					
ANR	622731	ExpressionStatement	-- squareBracketCount	2761:5:80675:80695	621404	1	True				
ANR	622732	UnaryExpression	-- squareBracketCount		621404	0					
ANR	622733	IncDec	--		621404	0					
ANR	622734	Identifier	squareBracketCount		621404	1					
ANR	622735	IfStatement	if ( squareBracketCount <= 0 )		621404	1					
ANR	622736	Condition	squareBracketCount <= 0	2762:8:80705:80727	621404	0	True				
ANR	622737	RelationalExpression	squareBracketCount <= 0		621404	0		<=			
ANR	622738	Identifier	squareBracketCount		621404	0					
ANR	622739	PrimaryExpression	0		621404	1					
ANR	622740	CompoundStatement		313:4:8858:8858	621404	1					
ANR	622741	ExpressionStatement	squareBracketCount = 0	2764:5:80741:80763	621404	0	True				
ANR	622742	AssignmentExpression	squareBracketCount = 0		621404	0		=			
ANR	622743	Identifier	squareBracketCount		621404	0					
ANR	622744	PrimaryExpression	0		621404	1					
ANR	622745	IfStatement	if ( isInObjCMethodCall )		621404	1					
ANR	622746	Condition	isInObjCMethodCall	2765:9:80774:80791	621404	0	True				
ANR	622747	Identifier	isInObjCMethodCall		621404	0					
ANR	622748	ExpressionStatement	isImmediatelyPostObjCMethodCall = true	2766:6:80800:80838	621404	1	True				
ANR	622749	AssignmentExpression	isImmediatelyPostObjCMethodCall = true		621404	0		=			
ANR	622750	Identifier	isImmediatelyPostObjCMethodCall		621404	0					
ANR	622751	Identifier	true		621404	1					
ANR	622752	ExpressionStatement	foundPreCommandHeader = false	2768:4:80850:80879	621404	2	True				
ANR	622753	AssignmentExpression	foundPreCommandHeader = false		621404	0		=			
ANR	622754	Identifier	foundPreCommandHeader		621404	0					
ANR	622755	Identifier	false		621404	1					
ANR	622756	ExpressionStatement	parenDepth --	2769:4:80885:80897	621404	3	True				
ANR	622757	PostIncDecOperationExpression	parenDepth --		621404	0					
ANR	622758	Identifier	parenDepth		621404	0					
ANR	622759	IncDec	--		621404	1					
ANR	622760	IfStatement	if ( parenDepth == 0 )		621404	4					
ANR	622761	Condition	parenDepth == 0	2770:8:80907:80921	621404	0	True				
ANR	622762	EqualityExpression	parenDepth == 0		621404	0		==			
ANR	622763	Identifier	parenDepth		621404	0					
ANR	622764	PrimaryExpression	0		621404	1					
ANR	622765	CompoundStatement		321:4:9052:9052	621404	1					
ANR	622766	IfStatement	if ( ! parenStatementStack -> empty ( ) )		621404	0					
ANR	622767	Condition	! parenStatementStack -> empty ( )	2772:9:80939:80967	621404	0	True				
ANR	622768	UnaryOperationExpression	! parenStatementStack -> empty ( )		621404	0					
ANR	622769	UnaryOperator	!		621404	0					
ANR	622770	CallExpression	parenStatementStack -> empty ( )		621404	1					
ANR	622771	Callee	parenStatementStack -> empty		621404	0					
ANR	622772	PtrMemberAccess	parenStatementStack -> empty		621404	0					
ANR	622773	Identifier	parenStatementStack		621404	0					
ANR	622774	Identifier	empty		621404	1					
ANR	622775	ArgumentList			621404	1					
ANR	622776	CompoundStatement		323:5:9143:9143	621404	1					
ANR	622777	ExpressionStatement	isContinuation = parenStatementStack -> back ( )	2774:6:81027:81071	621404	0	True				
ANR	622778	AssignmentExpression	isContinuation = parenStatementStack -> back ( )		621404	0		=			
ANR	622779	Identifier	isContinuation		621404	0					
ANR	622780	CallExpression	parenStatementStack -> back ( )		621404	1					
ANR	622781	Callee	parenStatementStack -> back		621404	0					
ANR	622782	PtrMemberAccess	parenStatementStack -> back		621404	0					
ANR	622783	Identifier	parenStatementStack		621404	0					
ANR	622784	Identifier	back		621404	1					
ANR	622785	ArgumentList			621404	1					
ANR	622786	ExpressionStatement	parenStatementStack -> pop_back ( )	2775:6:81079:81110	621404	1	True				
ANR	622787	CallExpression	parenStatementStack -> pop_back ( )		621404	0					
ANR	622788	Callee	parenStatementStack -> pop_back		621404	0					
ANR	622789	PtrMemberAccess	parenStatementStack -> pop_back		621404	0					
ANR	622790	Identifier	parenStatementStack		621404	0					
ANR	622791	Identifier	pop_back		621404	1					
ANR	622792	ArgumentList			621404	1					
ANR	622793	ExpressionStatement	isInAsm = false	2777:5:81124:81139	621404	1	True				
ANR	622794	AssignmentExpression	isInAsm = false		621404	0		=			
ANR	622795	Identifier	isInAsm		621404	0					
ANR	622796	Identifier	false		621404	1					
ANR	622797	ExpressionStatement	isInConditional = false	2778:5:81146:81169	621404	2	True				
ANR	622798	AssignmentExpression	isInConditional = false		621404	0		=			
ANR	622799	Identifier	isInConditional		621404	0					
ANR	622800	Identifier	false		621404	1					
ANR	622801	IfStatement	if ( ! continuationIndentStackSizeStack -> empty ( ) )		621404	5					
ANR	622802	Condition	! continuationIndentStackSizeStack -> empty ( )	2781:8:81186:81227	621404	0	True				
ANR	622803	UnaryOperationExpression	! continuationIndentStackSizeStack -> empty ( )		621404	0					
ANR	622804	UnaryOperator	!		621404	0					
ANR	622805	CallExpression	continuationIndentStackSizeStack -> empty ( )		621404	1					
ANR	622806	Callee	continuationIndentStackSizeStack -> empty		621404	0					
ANR	622807	PtrMemberAccess	continuationIndentStackSizeStack -> empty		621404	0					
ANR	622808	Identifier	continuationIndentStackSizeStack		621404	0					
ANR	622809	Identifier	empty		621404	1					
ANR	622810	ArgumentList			621404	1					
ANR	622811	CompoundStatement		332:4:9358:9358	621404	1					
ANR	622812	ExpressionStatement	popLastContinuationIndent ( )	2783:5:81241:81268	621404	0	True				
ANR	622813	CallExpression	popLastContinuationIndent ( )		621404	0					
ANR	622814	Callee	popLastContinuationIndent		621404	0					
ANR	622815	Identifier	popLastContinuationIndent		621404	0					
ANR	622816	ArgumentList			621404	1					
ANR	622817	IfStatement	if ( ! parenIndentStack -> empty ( ) )		621404	1					
ANR	622818	Condition	! parenIndentStack -> empty ( )	2785:9:81280:81305	621404	0	True				
ANR	622819	UnaryOperationExpression	! parenIndentStack -> empty ( )		621404	0					
ANR	622820	UnaryOperator	!		621404	0					
ANR	622821	CallExpression	parenIndentStack -> empty ( )		621404	1					
ANR	622822	Callee	parenIndentStack -> empty		621404	0					
ANR	622823	PtrMemberAccess	parenIndentStack -> empty		621404	0					
ANR	622824	Identifier	parenIndentStack		621404	0					
ANR	622825	Identifier	empty		621404	1					
ANR	622826	ArgumentList			621404	1					
ANR	622827	CompoundStatement		337:6:9445:9488	621404	1					
ANR	622828	IdentifierDeclStatement	int poppedIndent = parenIndentStack -> back ( ) ;	2787:6:81321:81364	621404	0	True				
ANR	622829	IdentifierDecl	poppedIndent = parenIndentStack -> back ( )		621404	0					
ANR	622830	IdentifierDeclType	int		621404	0					
ANR	622831	Identifier	poppedIndent		621404	1					
ANR	622832	AssignmentExpression	poppedIndent = parenIndentStack -> back ( )		621404	2		=			
ANR	622833	Identifier	poppedIndent		621404	0					
ANR	622834	CallExpression	parenIndentStack -> back ( )		621404	1					
ANR	622835	Callee	parenIndentStack -> back		621404	0					
ANR	622836	PtrMemberAccess	parenIndentStack -> back		621404	0					
ANR	622837	Identifier	parenIndentStack		621404	0					
ANR	622838	Identifier	back		621404	1					
ANR	622839	ArgumentList			621404	1					
ANR	622840	ExpressionStatement	parenIndentStack -> pop_back ( )	2788:6:81372:81400	621404	1	True				
ANR	622841	CallExpression	parenIndentStack -> pop_back ( )		621404	0					
ANR	622842	Callee	parenIndentStack -> pop_back		621404	0					
ANR	622843	PtrMemberAccess	parenIndentStack -> pop_back		621404	0					
ANR	622844	Identifier	parenIndentStack		621404	0					
ANR	622845	Identifier	pop_back		621404	1					
ANR	622846	ArgumentList			621404	1					
ANR	622847	IfStatement	if ( i == 0 )		621404	2					
ANR	622848	Condition	i == 0	2790:10:81413:81418	621404	0	True				
ANR	622849	EqualityExpression	i == 0		621404	0		==			
ANR	622850	Identifier	i		621404	0					
ANR	622851	PrimaryExpression	0		621404	1					
ANR	622852	ExpressionStatement	spaceIndentCount = poppedIndent	2791:7:81428:81459	621404	1	True				
ANR	622853	AssignmentExpression	spaceIndentCount = poppedIndent		621404	0		=			
ANR	622854	Identifier	spaceIndentCount		621404	0					
ANR	622855	Identifier	poppedIndent		621404	1					
ANR	622856	ContinueStatement	continue ;	2795:3:81482:81490	621404	1	True				
ANR	622857	IfStatement	if ( ch == '{' )		621404	16					
ANR	622858	Condition	ch == '{'	2798:6:81503:81511	621404	0	True				
ANR	622859	EqualityExpression	ch == '{'		621404	0		==			
ANR	622860	Identifier	ch		621404	0					
ANR	622861	PrimaryExpression	'{'		621404	1					
ANR	622862	CompoundStatement		351:3:9714:10771	621404	1					
ANR	622863	IdentifierDeclStatement	"bool isBlockOpener = ( ( prevNonSpaceCh == '{' && braceBlockStateStack -> back ( ) ) || prevNonSpaceCh == '}' || prevNonSpaceCh == ')' || prevNonSpaceCh == ';' || peekNextChar ( line , i ) == '{' || foundPreCommandHeader || foundPreCommandMacro || isInClassHeader || ( isInClassInitializer && ! isLegalNameChar ( prevNonSpaceCh ) ) || isNonInStatementArray || isInObjCMethodDefinition || isInObjCInterface || isSharpAccessor || isSharpDelegate || isInExternC || isInAsmBlock || getNextWord ( line , i ) == AS_NEW || ( isInDefine && ( prevNonSpaceCh == '(' || isLegalNameChar ( prevNonSpaceCh ) ) ) ) ;"	2801:3:81590:82647	621404	0	True				
ANR	622864	IdentifierDecl	"isBlockOpener = ( ( prevNonSpaceCh == '{' && braceBlockStateStack -> back ( ) ) || prevNonSpaceCh == '}' || prevNonSpaceCh == ')' || prevNonSpaceCh == ';' || peekNextChar ( line , i ) == '{' || foundPreCommandHeader || foundPreCommandMacro || isInClassHeader || ( isInClassInitializer && ! isLegalNameChar ( prevNonSpaceCh ) ) || isNonInStatementArray || isInObjCMethodDefinition || isInObjCInterface || isSharpAccessor || isSharpDelegate || isInExternC || isInAsmBlock || getNextWord ( line , i ) == AS_NEW || ( isInDefine && ( prevNonSpaceCh == '(' || isLegalNameChar ( prevNonSpaceCh ) ) ) )"		621404	0					
ANR	622865	IdentifierDeclType	bool		621404	0					
ANR	622866	Identifier	isBlockOpener		621404	1					
ANR	622867	AssignmentExpression	"isBlockOpener = ( ( prevNonSpaceCh == '{' && braceBlockStateStack -> back ( ) ) || prevNonSpaceCh == '}' || prevNonSpaceCh == ')' || prevNonSpaceCh == ';' || peekNextChar ( line , i ) == '{' || foundPreCommandHeader || foundPreCommandMacro || isInClassHeader || ( isInClassInitializer && ! isLegalNameChar ( prevNonSpaceCh ) ) || isNonInStatementArray || isInObjCMethodDefinition || isInObjCInterface || isSharpAccessor || isSharpDelegate || isInExternC || isInAsmBlock || getNextWord ( line , i ) == AS_NEW || ( isInDefine && ( prevNonSpaceCh == '(' || isLegalNameChar ( prevNonSpaceCh ) ) ) )"		621404	2		=			
ANR	622868	Identifier	isBlockOpener		621404	0					
ANR	622869	OrExpression	"( prevNonSpaceCh == '{' && braceBlockStateStack -> back ( ) ) || prevNonSpaceCh == '}' || prevNonSpaceCh == ')' || prevNonSpaceCh == ';' || peekNextChar ( line , i ) == '{' || foundPreCommandHeader || foundPreCommandMacro || isInClassHeader || ( isInClassInitializer && ! isLegalNameChar ( prevNonSpaceCh ) ) || isNonInStatementArray || isInObjCMethodDefinition || isInObjCInterface || isSharpAccessor || isSharpDelegate || isInExternC || isInAsmBlock || getNextWord ( line , i ) == AS_NEW || ( isInDefine && ( prevNonSpaceCh == '(' || isLegalNameChar ( prevNonSpaceCh ) ) )"		621404	1		||			
ANR	622870	AndExpression	prevNonSpaceCh == '{' && braceBlockStateStack -> back ( )		621404	0		&&			
ANR	622871	EqualityExpression	prevNonSpaceCh == '{'		621404	0		==			
ANR	622872	Identifier	prevNonSpaceCh		621404	0					
ANR	622873	PrimaryExpression	'{'		621404	1					
ANR	622874	CallExpression	braceBlockStateStack -> back ( )		621404	1					
ANR	622875	Callee	braceBlockStateStack -> back		621404	0					
ANR	622876	PtrMemberAccess	braceBlockStateStack -> back		621404	0					
ANR	622877	Identifier	braceBlockStateStack		621404	0					
ANR	622878	Identifier	back		621404	1					
ANR	622879	ArgumentList			621404	1					
ANR	622880	OrExpression	"prevNonSpaceCh == '}' || prevNonSpaceCh == ')' || prevNonSpaceCh == ';' || peekNextChar ( line , i ) == '{' || foundPreCommandHeader || foundPreCommandMacro || isInClassHeader || ( isInClassInitializer && ! isLegalNameChar ( prevNonSpaceCh ) ) || isNonInStatementArray || isInObjCMethodDefinition || isInObjCInterface || isSharpAccessor || isSharpDelegate || isInExternC || isInAsmBlock || getNextWord ( line , i ) == AS_NEW || ( isInDefine && ( prevNonSpaceCh == '(' || isLegalNameChar ( prevNonSpaceCh ) ) )"		621404	1		||			
ANR	622881	EqualityExpression	prevNonSpaceCh == '}'		621404	0		==			
ANR	622882	Identifier	prevNonSpaceCh		621404	0					
ANR	622883	PrimaryExpression	'}'		621404	1					
ANR	622884	OrExpression	"prevNonSpaceCh == ')' || prevNonSpaceCh == ';' || peekNextChar ( line , i ) == '{' || foundPreCommandHeader || foundPreCommandMacro || isInClassHeader || ( isInClassInitializer && ! isLegalNameChar ( prevNonSpaceCh ) ) || isNonInStatementArray || isInObjCMethodDefinition || isInObjCInterface || isSharpAccessor || isSharpDelegate || isInExternC || isInAsmBlock || getNextWord ( line , i ) == AS_NEW || ( isInDefine && ( prevNonSpaceCh == '(' || isLegalNameChar ( prevNonSpaceCh ) ) )"		621404	1		||			
ANR	622885	EqualityExpression	prevNonSpaceCh == ')'		621404	0		==			
ANR	622886	Identifier	prevNonSpaceCh		621404	0					
ANR	622887	PrimaryExpression	')'		621404	1					
ANR	622888	OrExpression	"prevNonSpaceCh == ';' || peekNextChar ( line , i ) == '{' || foundPreCommandHeader || foundPreCommandMacro || isInClassHeader || ( isInClassInitializer && ! isLegalNameChar ( prevNonSpaceCh ) ) || isNonInStatementArray || isInObjCMethodDefinition || isInObjCInterface || isSharpAccessor || isSharpDelegate || isInExternC || isInAsmBlock || getNextWord ( line , i ) == AS_NEW || ( isInDefine && ( prevNonSpaceCh == '(' || isLegalNameChar ( prevNonSpaceCh ) ) )"		621404	1		||			
ANR	622889	EqualityExpression	prevNonSpaceCh == ';'		621404	0		==			
ANR	622890	Identifier	prevNonSpaceCh		621404	0					
ANR	622891	PrimaryExpression	';'		621404	1					
ANR	622892	OrExpression	"peekNextChar ( line , i ) == '{' || foundPreCommandHeader || foundPreCommandMacro || isInClassHeader || ( isInClassInitializer && ! isLegalNameChar ( prevNonSpaceCh ) ) || isNonInStatementArray || isInObjCMethodDefinition || isInObjCInterface || isSharpAccessor || isSharpDelegate || isInExternC || isInAsmBlock || getNextWord ( line , i ) == AS_NEW || ( isInDefine && ( prevNonSpaceCh == '(' || isLegalNameChar ( prevNonSpaceCh ) ) )"		621404	1		||			
ANR	622893	EqualityExpression	"peekNextChar ( line , i ) == '{'"		621404	0		==			
ANR	622894	CallExpression	"peekNextChar ( line , i )"		621404	0					
ANR	622895	Callee	peekNextChar		621404	0					
ANR	622896	Identifier	peekNextChar		621404	0					
ANR	622897	ArgumentList	line		621404	1					
ANR	622898	Argument	line		621404	0					
ANR	622899	Identifier	line		621404	0					
ANR	622900	Argument	i		621404	1					
ANR	622901	Identifier	i		621404	0					
ANR	622902	PrimaryExpression	'{'		621404	1					
ANR	622903	OrExpression	"foundPreCommandHeader || foundPreCommandMacro || isInClassHeader || ( isInClassInitializer && ! isLegalNameChar ( prevNonSpaceCh ) ) || isNonInStatementArray || isInObjCMethodDefinition || isInObjCInterface || isSharpAccessor || isSharpDelegate || isInExternC || isInAsmBlock || getNextWord ( line , i ) == AS_NEW || ( isInDefine && ( prevNonSpaceCh == '(' || isLegalNameChar ( prevNonSpaceCh ) ) )"		621404	1		||			
ANR	622904	Identifier	foundPreCommandHeader		621404	0					
ANR	622905	OrExpression	"foundPreCommandMacro || isInClassHeader || ( isInClassInitializer && ! isLegalNameChar ( prevNonSpaceCh ) ) || isNonInStatementArray || isInObjCMethodDefinition || isInObjCInterface || isSharpAccessor || isSharpDelegate || isInExternC || isInAsmBlock || getNextWord ( line , i ) == AS_NEW || ( isInDefine && ( prevNonSpaceCh == '(' || isLegalNameChar ( prevNonSpaceCh ) ) )"		621404	1		||			
ANR	622906	Identifier	foundPreCommandMacro		621404	0					
ANR	622907	OrExpression	"isInClassHeader || ( isInClassInitializer && ! isLegalNameChar ( prevNonSpaceCh ) ) || isNonInStatementArray || isInObjCMethodDefinition || isInObjCInterface || isSharpAccessor || isSharpDelegate || isInExternC || isInAsmBlock || getNextWord ( line , i ) == AS_NEW || ( isInDefine && ( prevNonSpaceCh == '(' || isLegalNameChar ( prevNonSpaceCh ) ) )"		621404	1		||			
ANR	622908	Identifier	isInClassHeader		621404	0					
ANR	622909	OrExpression	"( isInClassInitializer && ! isLegalNameChar ( prevNonSpaceCh ) ) || isNonInStatementArray || isInObjCMethodDefinition || isInObjCInterface || isSharpAccessor || isSharpDelegate || isInExternC || isInAsmBlock || getNextWord ( line , i ) == AS_NEW || ( isInDefine && ( prevNonSpaceCh == '(' || isLegalNameChar ( prevNonSpaceCh ) ) )"		621404	1		||			
ANR	622910	AndExpression	isInClassInitializer && ! isLegalNameChar ( prevNonSpaceCh )		621404	0		&&			
ANR	622911	Identifier	isInClassInitializer		621404	0					
ANR	622912	UnaryOperationExpression	! isLegalNameChar ( prevNonSpaceCh )		621404	1					
ANR	622913	UnaryOperator	!		621404	0					
ANR	622914	CallExpression	isLegalNameChar ( prevNonSpaceCh )		621404	1					
ANR	622915	Callee	isLegalNameChar		621404	0					
ANR	622916	Identifier	isLegalNameChar		621404	0					
ANR	622917	ArgumentList	prevNonSpaceCh		621404	1					
ANR	622918	Argument	prevNonSpaceCh		621404	0					
ANR	622919	Identifier	prevNonSpaceCh		621404	0					
ANR	622920	OrExpression	"isNonInStatementArray || isInObjCMethodDefinition || isInObjCInterface || isSharpAccessor || isSharpDelegate || isInExternC || isInAsmBlock || getNextWord ( line , i ) == AS_NEW || ( isInDefine && ( prevNonSpaceCh == '(' || isLegalNameChar ( prevNonSpaceCh ) ) )"		621404	1		||			
ANR	622921	Identifier	isNonInStatementArray		621404	0					
ANR	622922	OrExpression	"isInObjCMethodDefinition || isInObjCInterface || isSharpAccessor || isSharpDelegate || isInExternC || isInAsmBlock || getNextWord ( line , i ) == AS_NEW || ( isInDefine && ( prevNonSpaceCh == '(' || isLegalNameChar ( prevNonSpaceCh ) ) )"		621404	1		||			
ANR	622923	Identifier	isInObjCMethodDefinition		621404	0					
ANR	622924	OrExpression	"isInObjCInterface || isSharpAccessor || isSharpDelegate || isInExternC || isInAsmBlock || getNextWord ( line , i ) == AS_NEW || ( isInDefine && ( prevNonSpaceCh == '(' || isLegalNameChar ( prevNonSpaceCh ) ) )"		621404	1		||			
ANR	622925	Identifier	isInObjCInterface		621404	0					
ANR	622926	OrExpression	"isSharpAccessor || isSharpDelegate || isInExternC || isInAsmBlock || getNextWord ( line , i ) == AS_NEW || ( isInDefine && ( prevNonSpaceCh == '(' || isLegalNameChar ( prevNonSpaceCh ) ) )"		621404	1		||			
ANR	622927	Identifier	isSharpAccessor		621404	0					
ANR	622928	OrExpression	"isSharpDelegate || isInExternC || isInAsmBlock || getNextWord ( line , i ) == AS_NEW || ( isInDefine && ( prevNonSpaceCh == '(' || isLegalNameChar ( prevNonSpaceCh ) ) )"		621404	1		||			
ANR	622929	Identifier	isSharpDelegate		621404	0					
ANR	622930	OrExpression	"isInExternC || isInAsmBlock || getNextWord ( line , i ) == AS_NEW || ( isInDefine && ( prevNonSpaceCh == '(' || isLegalNameChar ( prevNonSpaceCh ) ) )"		621404	1		||			
ANR	622931	Identifier	isInExternC		621404	0					
ANR	622932	OrExpression	"isInAsmBlock || getNextWord ( line , i ) == AS_NEW || ( isInDefine && ( prevNonSpaceCh == '(' || isLegalNameChar ( prevNonSpaceCh ) ) )"		621404	1		||			
ANR	622933	Identifier	isInAsmBlock		621404	0					
ANR	622934	OrExpression	"getNextWord ( line , i ) == AS_NEW || ( isInDefine && ( prevNonSpaceCh == '(' || isLegalNameChar ( prevNonSpaceCh ) ) )"		621404	1		||			
ANR	622935	EqualityExpression	"getNextWord ( line , i ) == AS_NEW"		621404	0		==			
ANR	622936	CallExpression	"getNextWord ( line , i )"		621404	0					
ANR	622937	Callee	getNextWord		621404	0					
ANR	622938	Identifier	getNextWord		621404	0					
ANR	622939	ArgumentList	line		621404	1					
ANR	622940	Argument	line		621404	0					
ANR	622941	Identifier	line		621404	0					
ANR	622942	Argument	i		621404	1					
ANR	622943	Identifier	i		621404	0					
ANR	622944	Identifier	AS_NEW		621404	1					
ANR	622945	AndExpression	isInDefine && ( prevNonSpaceCh == '(' || isLegalNameChar ( prevNonSpaceCh ) )		621404	1		&&			
ANR	622946	Identifier	isInDefine		621404	0					
ANR	622947	OrExpression	prevNonSpaceCh == '(' || isLegalNameChar ( prevNonSpaceCh )		621404	1		||			
ANR	622948	EqualityExpression	prevNonSpaceCh == '('		621404	0		==			
ANR	622949	Identifier	prevNonSpaceCh		621404	0					
ANR	622950	PrimaryExpression	'('		621404	1					
ANR	622951	CallExpression	isLegalNameChar ( prevNonSpaceCh )		621404	1					
ANR	622952	Callee	isLegalNameChar		621404	0					
ANR	622953	Identifier	isLegalNameChar		621404	0					
ANR	622954	ArgumentList	prevNonSpaceCh		621404	1					
ANR	622955	Argument	prevNonSpaceCh		621404	0					
ANR	622956	Identifier	prevNonSpaceCh		621404	0					
ANR	622957	IfStatement	if ( isInObjCMethodDefinition )		621404	1					
ANR	622958	Condition	isInObjCMethodDefinition	2822:7:82657:82680	621404	0	True				
ANR	622959	Identifier	isInObjCMethodDefinition		621404	0					
ANR	622960	CompoundStatement		373:3:10810:10810	621404	1					
ANR	622961	ExpressionStatement	objCColonAlignSubsequent = 0	2824:4:82692:82720	621404	0	True				
ANR	622962	AssignmentExpression	objCColonAlignSubsequent = 0		621404	0		=			
ANR	622963	Identifier	objCColonAlignSubsequent		621404	0					
ANR	622964	PrimaryExpression	0		621404	1					
ANR	622965	ExpressionStatement	isImmediatelyPostObjCMethodDefinition = true	2825:4:82726:82770	621404	1	True				
ANR	622966	AssignmentExpression	isImmediatelyPostObjCMethodDefinition = true		621404	0		=			
ANR	622967	Identifier	isImmediatelyPostObjCMethodDefinition		621404	0					
ANR	622968	Identifier	true		621404	1					
ANR	622969	IfStatement	if ( lineBeginsWithOpenBrace )		621404	2					
ANR	622970	Condition	lineBeginsWithOpenBrace	2826:8:82780:82802	621404	0	True				
ANR	622971	Identifier	lineBeginsWithOpenBrace		621404	0					
ANR	622972	ExpressionStatement	clearObjCMethodDefinitionAlignment ( )	2827:5:82832:82868	621404	1	True				
ANR	622973	CallExpression	clearObjCMethodDefinitionAlignment ( )		621404	0					
ANR	622974	Callee	clearObjCMethodDefinitionAlignment		621404	0					
ANR	622975	Identifier	clearObjCMethodDefinitionAlignment		621404	0					
ANR	622976	ArgumentList			621404	1					
ANR	622977	IfStatement	if ( ! isBlockOpener && ! isContinuation && ! isInClassInitializer && ! isInEnum )		621404	2					
ANR	622978	Condition	! isBlockOpener && ! isContinuation && ! isInClassInitializer && ! isInEnum	2830:7:82883:82953	621404	0	True				
ANR	622979	AndExpression	! isBlockOpener && ! isContinuation && ! isInClassInitializer && ! isInEnum		621404	0		&&			
ANR	622980	UnaryOperationExpression	! isBlockOpener		621404	0					
ANR	622981	UnaryOperator	!		621404	0					
ANR	622982	Identifier	isBlockOpener		621404	1					
ANR	622983	AndExpression	! isContinuation && ! isInClassInitializer && ! isInEnum		621404	1		&&			
ANR	622984	UnaryOperationExpression	! isContinuation		621404	0					
ANR	622985	UnaryOperator	!		621404	0					
ANR	622986	Identifier	isContinuation		621404	1					
ANR	622987	AndExpression	! isInClassInitializer && ! isInEnum		621404	1		&&			
ANR	622988	UnaryOperationExpression	! isInClassInitializer		621404	0					
ANR	622989	UnaryOperator	!		621404	0					
ANR	622990	Identifier	isInClassInitializer		621404	1					
ANR	622991	UnaryOperationExpression	! isInEnum		621404	1					
ANR	622992	UnaryOperator	!		621404	0					
ANR	622993	Identifier	isInEnum		621404	1					
ANR	622994	CompoundStatement		381:3:11083:11083	621404	1					
ANR	622995	IfStatement	if ( headerStack -> empty ( ) )		621404	0					
ANR	622996	Condition	headerStack -> empty ( )	2832:8:82969:82988	621404	0	True				
ANR	622997	CallExpression	headerStack -> empty ( )		621404	0					
ANR	622998	Callee	headerStack -> empty		621404	0					
ANR	622999	PtrMemberAccess	headerStack -> empty		621404	0					
ANR	623000	Identifier	headerStack		621404	0					
ANR	623001	Identifier	empty		621404	1					
ANR	623002	ArgumentList			621404	1					
ANR	623003	ExpressionStatement	isBlockOpener = true	2833:5:82996:83016	621404	1	True				
ANR	623004	AssignmentExpression	isBlockOpener = true		621404	0		=			
ANR	623005	Identifier	isBlockOpener		621404	0					
ANR	623006	Identifier	true		621404	1					
ANR	623007	ElseStatement	else		621404	0					
ANR	623008	IfStatement	if ( headerStack -> back ( ) == & AS_OPEN_BRACE && headerStack -> size ( ) >= 2 )		621404	0					
ANR	623009	Condition	headerStack -> back ( ) == & AS_OPEN_BRACE && headerStack -> size ( ) >= 2	2834:13:83031:83108	621404	0	True				
ANR	623010	AndExpression	headerStack -> back ( ) == & AS_OPEN_BRACE && headerStack -> size ( ) >= 2		621404	0		&&			
ANR	623011	EqualityExpression	headerStack -> back ( ) == & AS_OPEN_BRACE		621404	0		==			
ANR	623012	CallExpression	headerStack -> back ( )		621404	0					
ANR	623013	Callee	headerStack -> back		621404	0					
ANR	623014	PtrMemberAccess	headerStack -> back		621404	0					
ANR	623015	Identifier	headerStack		621404	0					
ANR	623016	Identifier	back		621404	1					
ANR	623017	ArgumentList			621404	1					
ANR	623018	UnaryOperationExpression	& AS_OPEN_BRACE		621404	1					
ANR	623019	UnaryOperator	&		621404	0					
ANR	623020	Identifier	AS_OPEN_BRACE		621404	1					
ANR	623021	RelationalExpression	headerStack -> size ( ) >= 2		621404	1		>=			
ANR	623022	CallExpression	headerStack -> size ( )		621404	0					
ANR	623023	Callee	headerStack -> size		621404	0					
ANR	623024	PtrMemberAccess	headerStack -> size		621404	0					
ANR	623025	Identifier	headerStack		621404	0					
ANR	623026	Identifier	size		621404	1					
ANR	623027	ArgumentList			621404	1					
ANR	623028	PrimaryExpression	2		621404	1					
ANR	623029	CompoundStatement		386:4:11239:11239	621404	1					
ANR	623030	IfStatement	if ( ( * headerStack ) [ headerStack -> size ( ) - 2 ] == & AS_NAMESPACE || ( * headerStack ) [ headerStack -> size ( ) - 2 ] == & AS_MODULE || ( * headerStack ) [ headerStack -> size ( ) - 2 ] == & AS_CLASS || ( * headerStack ) [ headerStack -> size ( ) - 2 ] == & AS_INTERFACE || ( * headerStack ) [ headerStack -> size ( ) - 2 ] == & AS_STRUCT || ( * headerStack ) [ headerStack -> size ( ) - 2 ] == & AS_UNION )		621404	0					
ANR	623031	Condition	( * headerStack ) [ headerStack -> size ( ) - 2 ] == & AS_NAMESPACE || ( * headerStack ) [ headerStack -> size ( ) - 2 ] == & AS_MODULE || ( * headerStack ) [ headerStack -> size ( ) - 2 ] == & AS_CLASS || ( * headerStack ) [ headerStack -> size ( ) - 2 ] == & AS_INTERFACE || ( * headerStack ) [ headerStack -> size ( ) - 2 ] == & AS_STRUCT || ( * headerStack ) [ headerStack -> size ( ) - 2 ] == & AS_UNION	2837:9:83126:83532	621404	0	True				
ANR	623032	OrExpression	( * headerStack ) [ headerStack -> size ( ) - 2 ] == & AS_NAMESPACE || ( * headerStack ) [ headerStack -> size ( ) - 2 ] == & AS_MODULE || ( * headerStack ) [ headerStack -> size ( ) - 2 ] == & AS_CLASS || ( * headerStack ) [ headerStack -> size ( ) - 2 ] == & AS_INTERFACE || ( * headerStack ) [ headerStack -> size ( ) - 2 ] == & AS_STRUCT || ( * headerStack ) [ headerStack -> size ( ) - 2 ] == & AS_UNION		621404	0		||			
ANR	623033	EqualityExpression	( * headerStack ) [ headerStack -> size ( ) - 2 ] == & AS_NAMESPACE		621404	0		==			
ANR	623034	ArrayIndexing	( * headerStack ) [ headerStack -> size ( ) - 2 ]		621404	0					
ANR	623035	UnaryOperationExpression	* headerStack		621404	0					
ANR	623036	UnaryOperator	*		621404	0					
ANR	623037	Identifier	headerStack		621404	1					
ANR	623038	AdditiveExpression	headerStack -> size ( ) - 2		621404	1		-			
ANR	623039	CallExpression	headerStack -> size ( )		621404	0					
ANR	623040	Callee	headerStack -> size		621404	0					
ANR	623041	PtrMemberAccess	headerStack -> size		621404	0					
ANR	623042	Identifier	headerStack		621404	0					
ANR	623043	Identifier	size		621404	1					
ANR	623044	ArgumentList			621404	1					
ANR	623045	PrimaryExpression	2		621404	1					
ANR	623046	UnaryOperationExpression	& AS_NAMESPACE		621404	1					
ANR	623047	UnaryOperator	&		621404	0					
ANR	623048	Identifier	AS_NAMESPACE		621404	1					
ANR	623049	OrExpression	( * headerStack ) [ headerStack -> size ( ) - 2 ] == & AS_MODULE || ( * headerStack ) [ headerStack -> size ( ) - 2 ] == & AS_CLASS || ( * headerStack ) [ headerStack -> size ( ) - 2 ] == & AS_INTERFACE || ( * headerStack ) [ headerStack -> size ( ) - 2 ] == & AS_STRUCT || ( * headerStack ) [ headerStack -> size ( ) - 2 ] == & AS_UNION		621404	1		||			
ANR	623050	EqualityExpression	( * headerStack ) [ headerStack -> size ( ) - 2 ] == & AS_MODULE		621404	0		==			
ANR	623051	ArrayIndexing	( * headerStack ) [ headerStack -> size ( ) - 2 ]		621404	0					
ANR	623052	UnaryOperationExpression	* headerStack		621404	0					
ANR	623053	UnaryOperator	*		621404	0					
ANR	623054	Identifier	headerStack		621404	1					
ANR	623055	AdditiveExpression	headerStack -> size ( ) - 2		621404	1		-			
ANR	623056	CallExpression	headerStack -> size ( )		621404	0					
ANR	623057	Callee	headerStack -> size		621404	0					
ANR	623058	PtrMemberAccess	headerStack -> size		621404	0					
ANR	623059	Identifier	headerStack		621404	0					
ANR	623060	Identifier	size		621404	1					
ANR	623061	ArgumentList			621404	1					
ANR	623062	PrimaryExpression	2		621404	1					
ANR	623063	UnaryOperationExpression	& AS_MODULE		621404	1					
ANR	623064	UnaryOperator	&		621404	0					
ANR	623065	Identifier	AS_MODULE		621404	1					
ANR	623066	OrExpression	( * headerStack ) [ headerStack -> size ( ) - 2 ] == & AS_CLASS || ( * headerStack ) [ headerStack -> size ( ) - 2 ] == & AS_INTERFACE || ( * headerStack ) [ headerStack -> size ( ) - 2 ] == & AS_STRUCT || ( * headerStack ) [ headerStack -> size ( ) - 2 ] == & AS_UNION		621404	1		||			
ANR	623067	EqualityExpression	( * headerStack ) [ headerStack -> size ( ) - 2 ] == & AS_CLASS		621404	0		==			
ANR	623068	ArrayIndexing	( * headerStack ) [ headerStack -> size ( ) - 2 ]		621404	0					
ANR	623069	UnaryOperationExpression	* headerStack		621404	0					
ANR	623070	UnaryOperator	*		621404	0					
ANR	623071	Identifier	headerStack		621404	1					
ANR	623072	AdditiveExpression	headerStack -> size ( ) - 2		621404	1		-			
ANR	623073	CallExpression	headerStack -> size ( )		621404	0					
ANR	623074	Callee	headerStack -> size		621404	0					
ANR	623075	PtrMemberAccess	headerStack -> size		621404	0					
ANR	623076	Identifier	headerStack		621404	0					
ANR	623077	Identifier	size		621404	1					
ANR	623078	ArgumentList			621404	1					
ANR	623079	PrimaryExpression	2		621404	1					
ANR	623080	UnaryOperationExpression	& AS_CLASS		621404	1					
ANR	623081	UnaryOperator	&		621404	0					
ANR	623082	Identifier	AS_CLASS		621404	1					
ANR	623083	OrExpression	( * headerStack ) [ headerStack -> size ( ) - 2 ] == & AS_INTERFACE || ( * headerStack ) [ headerStack -> size ( ) - 2 ] == & AS_STRUCT || ( * headerStack ) [ headerStack -> size ( ) - 2 ] == & AS_UNION		621404	1		||			
ANR	623084	EqualityExpression	( * headerStack ) [ headerStack -> size ( ) - 2 ] == & AS_INTERFACE		621404	0		==			
ANR	623085	ArrayIndexing	( * headerStack ) [ headerStack -> size ( ) - 2 ]		621404	0					
ANR	623086	UnaryOperationExpression	* headerStack		621404	0					
ANR	623087	UnaryOperator	*		621404	0					
ANR	623088	Identifier	headerStack		621404	1					
ANR	623089	AdditiveExpression	headerStack -> size ( ) - 2		621404	1		-			
ANR	623090	CallExpression	headerStack -> size ( )		621404	0					
ANR	623091	Callee	headerStack -> size		621404	0					
ANR	623092	PtrMemberAccess	headerStack -> size		621404	0					
ANR	623093	Identifier	headerStack		621404	0					
ANR	623094	Identifier	size		621404	1					
ANR	623095	ArgumentList			621404	1					
ANR	623096	PrimaryExpression	2		621404	1					
ANR	623097	UnaryOperationExpression	& AS_INTERFACE		621404	1					
ANR	623098	UnaryOperator	&		621404	0					
ANR	623099	Identifier	AS_INTERFACE		621404	1					
ANR	623100	OrExpression	( * headerStack ) [ headerStack -> size ( ) - 2 ] == & AS_STRUCT || ( * headerStack ) [ headerStack -> size ( ) - 2 ] == & AS_UNION		621404	1		||			
ANR	623101	EqualityExpression	( * headerStack ) [ headerStack -> size ( ) - 2 ] == & AS_STRUCT		621404	0		==			
ANR	623102	ArrayIndexing	( * headerStack ) [ headerStack -> size ( ) - 2 ]		621404	0					
ANR	623103	UnaryOperationExpression	* headerStack		621404	0					
ANR	623104	UnaryOperator	*		621404	0					
ANR	623105	Identifier	headerStack		621404	1					
ANR	623106	AdditiveExpression	headerStack -> size ( ) - 2		621404	1		-			
ANR	623107	CallExpression	headerStack -> size ( )		621404	0					
ANR	623108	Callee	headerStack -> size		621404	0					
ANR	623109	PtrMemberAccess	headerStack -> size		621404	0					
ANR	623110	Identifier	headerStack		621404	0					
ANR	623111	Identifier	size		621404	1					
ANR	623112	ArgumentList			621404	1					
ANR	623113	PrimaryExpression	2		621404	1					
ANR	623114	UnaryOperationExpression	& AS_STRUCT		621404	1					
ANR	623115	UnaryOperator	&		621404	0					
ANR	623116	Identifier	AS_STRUCT		621404	1					
ANR	623117	EqualityExpression	( * headerStack ) [ headerStack -> size ( ) - 2 ] == & AS_UNION		621404	1		==			
ANR	623118	ArrayIndexing	( * headerStack ) [ headerStack -> size ( ) - 2 ]		621404	0					
ANR	623119	UnaryOperationExpression	* headerStack		621404	0					
ANR	623120	UnaryOperator	*		621404	0					
ANR	623121	Identifier	headerStack		621404	1					
ANR	623122	AdditiveExpression	headerStack -> size ( ) - 2		621404	1		-			
ANR	623123	CallExpression	headerStack -> size ( )		621404	0					
ANR	623124	Callee	headerStack -> size		621404	0					
ANR	623125	PtrMemberAccess	headerStack -> size		621404	0					
ANR	623126	Identifier	headerStack		621404	0					
ANR	623127	Identifier	size		621404	1					
ANR	623128	ArgumentList			621404	1					
ANR	623129	PrimaryExpression	2		621404	1					
ANR	623130	UnaryOperationExpression	& AS_UNION		621404	1					
ANR	623131	UnaryOperator	&		621404	0					
ANR	623132	Identifier	AS_UNION		621404	1					
ANR	623133	ExpressionStatement	isBlockOpener = true	2843:6:83541:83561	621404	1	True				
ANR	623134	AssignmentExpression	isBlockOpener = true		621404	0		=			
ANR	623135	Identifier	isBlockOpener		621404	0					
ANR	623136	Identifier	true		621404	1					
ANR	623137	ElseStatement	else		621404	0					
ANR	623138	IfStatement	if ( headerStack -> back ( ) == & AS_NAMESPACE || headerStack -> back ( ) == & AS_MODULE || headerStack -> back ( ) == & AS_CLASS || headerStack -> back ( ) == & AS_INTERFACE || headerStack -> back ( ) == & AS_STRUCT || headerStack -> back ( ) == & AS_UNION )		621404	0					
ANR	623139	Condition	headerStack -> back ( ) == & AS_NAMESPACE || headerStack -> back ( ) == & AS_MODULE || headerStack -> back ( ) == & AS_CLASS || headerStack -> back ( ) == & AS_INTERFACE || headerStack -> back ( ) == & AS_STRUCT || headerStack -> back ( ) == & AS_UNION	2845:13:83582:83868	621404	0	True				
ANR	623140	OrExpression	headerStack -> back ( ) == & AS_NAMESPACE || headerStack -> back ( ) == & AS_MODULE || headerStack -> back ( ) == & AS_CLASS || headerStack -> back ( ) == & AS_INTERFACE || headerStack -> back ( ) == & AS_STRUCT || headerStack -> back ( ) == & AS_UNION		621404	0		||			
ANR	623141	EqualityExpression	headerStack -> back ( ) == & AS_NAMESPACE		621404	0		==			
ANR	623142	CallExpression	headerStack -> back ( )		621404	0					
ANR	623143	Callee	headerStack -> back		621404	0					
ANR	623144	PtrMemberAccess	headerStack -> back		621404	0					
ANR	623145	Identifier	headerStack		621404	0					
ANR	623146	Identifier	back		621404	1					
ANR	623147	ArgumentList			621404	1					
ANR	623148	UnaryOperationExpression	& AS_NAMESPACE		621404	1					
ANR	623149	UnaryOperator	&		621404	0					
ANR	623150	Identifier	AS_NAMESPACE		621404	1					
ANR	623151	OrExpression	headerStack -> back ( ) == & AS_MODULE || headerStack -> back ( ) == & AS_CLASS || headerStack -> back ( ) == & AS_INTERFACE || headerStack -> back ( ) == & AS_STRUCT || headerStack -> back ( ) == & AS_UNION		621404	1		||			
ANR	623152	EqualityExpression	headerStack -> back ( ) == & AS_MODULE		621404	0		==			
ANR	623153	CallExpression	headerStack -> back ( )		621404	0					
ANR	623154	Callee	headerStack -> back		621404	0					
ANR	623155	PtrMemberAccess	headerStack -> back		621404	0					
ANR	623156	Identifier	headerStack		621404	0					
ANR	623157	Identifier	back		621404	1					
ANR	623158	ArgumentList			621404	1					
ANR	623159	UnaryOperationExpression	& AS_MODULE		621404	1					
ANR	623160	UnaryOperator	&		621404	0					
ANR	623161	Identifier	AS_MODULE		621404	1					
ANR	623162	OrExpression	headerStack -> back ( ) == & AS_CLASS || headerStack -> back ( ) == & AS_INTERFACE || headerStack -> back ( ) == & AS_STRUCT || headerStack -> back ( ) == & AS_UNION		621404	1		||			
ANR	623163	EqualityExpression	headerStack -> back ( ) == & AS_CLASS		621404	0		==			
ANR	623164	CallExpression	headerStack -> back ( )		621404	0					
ANR	623165	Callee	headerStack -> back		621404	0					
ANR	623166	PtrMemberAccess	headerStack -> back		621404	0					
ANR	623167	Identifier	headerStack		621404	0					
ANR	623168	Identifier	back		621404	1					
ANR	623169	ArgumentList			621404	1					
ANR	623170	UnaryOperationExpression	& AS_CLASS		621404	1					
ANR	623171	UnaryOperator	&		621404	0					
ANR	623172	Identifier	AS_CLASS		621404	1					
ANR	623173	OrExpression	headerStack -> back ( ) == & AS_INTERFACE || headerStack -> back ( ) == & AS_STRUCT || headerStack -> back ( ) == & AS_UNION		621404	1		||			
ANR	623174	EqualityExpression	headerStack -> back ( ) == & AS_INTERFACE		621404	0		==			
ANR	623175	CallExpression	headerStack -> back ( )		621404	0					
ANR	623176	Callee	headerStack -> back		621404	0					
ANR	623177	PtrMemberAccess	headerStack -> back		621404	0					
ANR	623178	Identifier	headerStack		621404	0					
ANR	623179	Identifier	back		621404	1					
ANR	623180	ArgumentList			621404	1					
ANR	623181	UnaryOperationExpression	& AS_INTERFACE		621404	1					
ANR	623182	UnaryOperator	&		621404	0					
ANR	623183	Identifier	AS_INTERFACE		621404	1					
ANR	623184	OrExpression	headerStack -> back ( ) == & AS_STRUCT || headerStack -> back ( ) == & AS_UNION		621404	1		||			
ANR	623185	EqualityExpression	headerStack -> back ( ) == & AS_STRUCT		621404	0		==			
ANR	623186	CallExpression	headerStack -> back ( )		621404	0					
ANR	623187	Callee	headerStack -> back		621404	0					
ANR	623188	PtrMemberAccess	headerStack -> back		621404	0					
ANR	623189	Identifier	headerStack		621404	0					
ANR	623190	Identifier	back		621404	1					
ANR	623191	ArgumentList			621404	1					
ANR	623192	UnaryOperationExpression	& AS_STRUCT		621404	1					
ANR	623193	UnaryOperator	&		621404	0					
ANR	623194	Identifier	AS_STRUCT		621404	1					
ANR	623195	EqualityExpression	headerStack -> back ( ) == & AS_UNION		621404	1		==			
ANR	623196	CallExpression	headerStack -> back ( )		621404	0					
ANR	623197	Callee	headerStack -> back		621404	0					
ANR	623198	PtrMemberAccess	headerStack -> back		621404	0					
ANR	623199	Identifier	headerStack		621404	0					
ANR	623200	Identifier	back		621404	1					
ANR	623201	ArgumentList			621404	1					
ANR	623202	UnaryOperationExpression	& AS_UNION		621404	1					
ANR	623203	UnaryOperator	&		621404	0					
ANR	623204	Identifier	AS_UNION		621404	1					
ANR	623205	ExpressionStatement	isBlockOpener = true	2851:5:83876:83896	621404	1	True				
ANR	623206	AssignmentExpression	isBlockOpener = true		621404	0		=			
ANR	623207	Identifier	isBlockOpener		621404	0					
ANR	623208	Identifier	true		621404	1					
ANR	623209	IfStatement	if ( ! isBlockOpener && currentHeader != nullptr )		621404	3					
ANR	623210	Condition	! isBlockOpener && currentHeader != nullptr	2854:7:83911:83952	621404	0	True				
ANR	623211	AndExpression	! isBlockOpener && currentHeader != nullptr		621404	0		&&			
ANR	623212	UnaryOperationExpression	! isBlockOpener		621404	0					
ANR	623213	UnaryOperator	!		621404	0					
ANR	623214	Identifier	isBlockOpener		621404	1					
ANR	623215	EqualityExpression	currentHeader != nullptr		621404	1		!=			
ANR	623216	Identifier	currentHeader		621404	0					
ANR	623217	Identifier	nullptr		621404	1					
ANR	623218	CompoundStatement		405:3:12082:12082	621404	1					
ANR	623219	ForStatement	for ( size_t n = 0 ; n < nonParenHeaders -> size ( ) ; n ++ )		621404	0					
ANR	623220	ForInit	size_t n = 0 ;	2856:9:83969:83981	621404	0	True				
ANR	623221	IdentifierDeclStatement	size_t n = 0 ;		621404	0					
ANR	623222	IdentifierDecl	n = 0		621404	0					
ANR	623223	IdentifierDeclType	size_t		621404	0					
ANR	623224	Identifier	n		621404	1					
ANR	623225	AssignmentExpression	n = 0		621404	2		=			
ANR	623226	Identifier	n		621404	0					
ANR	623227	PrimaryExpression	0		621404	1					
ANR	623228	Condition	n < nonParenHeaders -> size ( )	2856:23:83983:84009	621404	1	True				
ANR	623229	RelationalExpression	n < nonParenHeaders -> size ( )		621404	0		<			
ANR	623230	Identifier	n		621404	0					
ANR	623231	CallExpression	nonParenHeaders -> size ( )		621404	1					
ANR	623232	Callee	nonParenHeaders -> size		621404	0					
ANR	623233	PtrMemberAccess	nonParenHeaders -> size		621404	0					
ANR	623234	Identifier	nonParenHeaders		621404	0					
ANR	623235	Identifier	size		621404	1					
ANR	623236	ArgumentList			621404	1					
ANR	623237	PostIncDecOperationExpression	n ++	2856:52:84012:84014	621404	2	True				
ANR	623238	Identifier	n		621404	0					
ANR	623239	IncDec	++		621404	1					
ANR	623240	IfStatement	if ( currentHeader == ( * nonParenHeaders ) [ n ] )		621404	3					
ANR	623241	Condition	currentHeader == ( * nonParenHeaders ) [ n ]	2857:9:84026:84063	621404	0	True				
ANR	623242	EqualityExpression	currentHeader == ( * nonParenHeaders ) [ n ]		621404	0		==			
ANR	623243	Identifier	currentHeader		621404	0					
ANR	623244	ArrayIndexing	( * nonParenHeaders ) [ n ]		621404	1					
ANR	623245	UnaryOperationExpression	* nonParenHeaders		621404	0					
ANR	623246	UnaryOperator	*		621404	0					
ANR	623247	Identifier	nonParenHeaders		621404	1					
ANR	623248	Identifier	n		621404	1					
ANR	623249	CompoundStatement		408:5:12195:12195	621404	1					
ANR	623250	ExpressionStatement	isBlockOpener = true	2859:6:84079:84099	621404	0	True				
ANR	623251	AssignmentExpression	isBlockOpener = true		621404	0		=			
ANR	623252	Identifier	isBlockOpener		621404	0					
ANR	623253	Identifier	true		621404	1					
ANR	623254	BreakStatement	break ;	2860:6:84107:84112	621404	1	True				
ANR	623255	ExpressionStatement	braceBlockStateStack -> push_back ( isBlockOpener )	2864:3:84130:84176	621404	4	True				
ANR	623256	CallExpression	braceBlockStateStack -> push_back ( isBlockOpener )		621404	0					
ANR	623257	Callee	braceBlockStateStack -> push_back		621404	0					
ANR	623258	PtrMemberAccess	braceBlockStateStack -> push_back		621404	0					
ANR	623259	Identifier	braceBlockStateStack		621404	0					
ANR	623260	Identifier	push_back		621404	1					
ANR	623261	ArgumentList	isBlockOpener		621404	1					
ANR	623262	Argument	isBlockOpener		621404	0					
ANR	623263	Identifier	isBlockOpener		621404	0					
ANR	623264	IfStatement	if ( ! isBlockOpener )		621404	5					
ANR	623265	Condition	! isBlockOpener	2866:7:84186:84199	621404	0	True				
ANR	623266	UnaryOperationExpression	! isBlockOpener		621404	0					
ANR	623267	UnaryOperator	!		621404	0					
ANR	623268	Identifier	isBlockOpener		621404	1					
ANR	623269	CompoundStatement		417:3:12329:12329	621404	1					
ANR	623270	ExpressionStatement	continuationIndentStackSizeStack -> push_back ( continuationIndentStack -> size ( ) )	2868:4:84211:84287	621404	0	True				
ANR	623271	CallExpression	continuationIndentStackSizeStack -> push_back ( continuationIndentStack -> size ( ) )		621404	0					
ANR	623272	Callee	continuationIndentStackSizeStack -> push_back		621404	0					
ANR	623273	PtrMemberAccess	continuationIndentStackSizeStack -> push_back		621404	0					
ANR	623274	Identifier	continuationIndentStackSizeStack		621404	0					
ANR	623275	Identifier	push_back		621404	1					
ANR	623276	ArgumentList	continuationIndentStack -> size ( )		621404	1					
ANR	623277	Argument	continuationIndentStack -> size ( )		621404	0					
ANR	623278	CallExpression	continuationIndentStack -> size ( )		621404	0					
ANR	623279	Callee	continuationIndentStack -> size		621404	0					
ANR	623280	PtrMemberAccess	continuationIndentStack -> size		621404	0					
ANR	623281	Identifier	continuationIndentStack		621404	0					
ANR	623282	Identifier	size		621404	1					
ANR	623283	ArgumentList			621404	1					
ANR	623284	ExpressionStatement	"registerContinuationIndent ( line , i , spaceIndentCount , tabIncrementIn , 0 , true )"	2869:4:84293:84371	621404	1	True				
ANR	623285	CallExpression	"registerContinuationIndent ( line , i , spaceIndentCount , tabIncrementIn , 0 , true )"		621404	0					
ANR	623286	Callee	registerContinuationIndent		621404	0					
ANR	623287	Identifier	registerContinuationIndent		621404	0					
ANR	623288	ArgumentList	line		621404	1					
ANR	623289	Argument	line		621404	0					
ANR	623290	Identifier	line		621404	0					
ANR	623291	Argument	i		621404	1					
ANR	623292	Identifier	i		621404	0					
ANR	623293	Argument	spaceIndentCount		621404	2					
ANR	623294	Identifier	spaceIndentCount		621404	0					
ANR	623295	Argument	tabIncrementIn		621404	3					
ANR	623296	Identifier	tabIncrementIn		621404	0					
ANR	623297	Argument	0		621404	4					
ANR	623298	PrimaryExpression	0		621404	0					
ANR	623299	Argument	true		621404	5					
ANR	623300	Identifier	true		621404	0					
ANR	623301	ExpressionStatement	parenDepth ++	2870:4:84377:84389	621404	2	True				
ANR	623302	PostIncDecOperationExpression	parenDepth ++		621404	0					
ANR	623303	Identifier	parenDepth		621404	0					
ANR	623304	IncDec	++		621404	1					
ANR	623305	IfStatement	if ( i == 0 )		621404	3					
ANR	623306	Condition	i == 0	2871:8:84399:84404	621404	0	True				
ANR	623307	EqualityExpression	i == 0		621404	0		==			
ANR	623308	Identifier	i		621404	0					
ANR	623309	PrimaryExpression	0		621404	1					
ANR	623310	ExpressionStatement	shouldIndentBracedLine = false	2872:5:84412:84442	621404	1	True				
ANR	623311	AssignmentExpression	shouldIndentBracedLine = false		621404	0		=			
ANR	623312	Identifier	shouldIndentBracedLine		621404	0					
ANR	623313	Identifier	false		621404	1					
ANR	623314	ExpressionStatement	isInEnumTypeID = false	2873:4:84448:84470	621404	4	True				
ANR	623315	AssignmentExpression	isInEnumTypeID = false		621404	0		=			
ANR	623316	Identifier	isInEnumTypeID		621404	0					
ANR	623317	Identifier	false		621404	1					
ANR	623318	ContinueStatement	continue ;	2875:4:84477:84485	621404	5	True				
ANR	623319	ExpressionStatement	++ lineOpeningBlocksNum	2880:3:84535:84557	621404	6	True				
ANR	623320	UnaryExpression	++ lineOpeningBlocksNum		621404	0					
ANR	623321	IncDec	++		621404	0					
ANR	623322	Identifier	lineOpeningBlocksNum		621404	1					
ANR	623323	IfStatement	if ( isInClassInitializer || isInEnumTypeID )		621404	7					
ANR	623324	Condition	isInClassInitializer || isInEnumTypeID	2882:7:84567:84604	621404	0	True				
ANR	623325	OrExpression	isInClassInitializer || isInEnumTypeID		621404	0		||			
ANR	623326	Identifier	isInClassInitializer		621404	0					
ANR	623327	Identifier	isInEnumTypeID		621404	1					
ANR	623328	CompoundStatement		433:3:12734:12734	621404	1					
ANR	623329	IfStatement	if ( lineBeginsWithOpenBrace )		621404	0					
ANR	623330	Condition	lineBeginsWithOpenBrace	2885:8:84665:84687	621404	0	True				
ANR	623331	Identifier	lineBeginsWithOpenBrace		621404	0					
ANR	623332	CompoundStatement		436:4:12818:12818	621404	1					
ANR	623333	ExpressionStatement	indentCount -= classInitializerIndents	2887:5:84701:84739	621404	0	True				
ANR	623334	AssignmentExpression	indentCount -= classInitializerIndents		621404	0		-=			
ANR	623335	Identifier	indentCount		621404	0					
ANR	623336	Identifier	classInitializerIndents		621404	1					
ANR	623337	IfStatement	if ( ! headerStack -> empty ( ) && ( * headerStack ) . back ( ) == & AS_CLASS )		621404	1					
ANR	623338	Condition	! headerStack -> empty ( ) && ( * headerStack ) . back ( ) == & AS_CLASS	2889:9:84794:84865	621404	0	True				
ANR	623339	AndExpression	! headerStack -> empty ( ) && ( * headerStack ) . back ( ) == & AS_CLASS		621404	0		&&			
ANR	623340	UnaryOperationExpression	! headerStack -> empty ( )		621404	0					
ANR	623341	UnaryOperator	!		621404	0					
ANR	623342	CallExpression	headerStack -> empty ( )		621404	1					
ANR	623343	Callee	headerStack -> empty		621404	0					
ANR	623344	PtrMemberAccess	headerStack -> empty		621404	0					
ANR	623345	Identifier	headerStack		621404	0					
ANR	623346	Identifier	empty		621404	1					
ANR	623347	ArgumentList			621404	1					
ANR	623348	EqualityExpression	( * headerStack ) . back ( ) == & AS_CLASS		621404	1		==			
ANR	623349	CallExpression	( * headerStack ) . back ( )		621404	0					
ANR	623350	Callee	( * headerStack ) . back		621404	0					
ANR	623351	MemberAccess	( * headerStack ) . back		621404	0					
ANR	623352	UnaryOperationExpression	* headerStack		621404	0					
ANR	623353	UnaryOperator	*		621404	0					
ANR	623354	Identifier	headerStack		621404	1					
ANR	623355	Identifier	back		621404	1					
ANR	623356	ArgumentList			621404	1					
ANR	623357	UnaryOperationExpression	& AS_CLASS		621404	1					
ANR	623358	UnaryOperator	&		621404	0					
ANR	623359	Identifier	AS_CLASS		621404	1					
ANR	623360	CompoundStatement		442:6:13005:13055	621404	1					
ANR	623361	IdentifierDeclStatement	"int nextChar = getNextProgramCharDistance ( line , i ) ;"	2892:6:84881:84931	621404	0	True				
ANR	623362	IdentifierDecl	"nextChar = getNextProgramCharDistance ( line , i )"		621404	0					
ANR	623363	IdentifierDeclType	int		621404	0					
ANR	623364	Identifier	nextChar		621404	1					
ANR	623365	AssignmentExpression	"nextChar = getNextProgramCharDistance ( line , i )"		621404	2		=			
ANR	623366	Identifier	nextChar		621404	0					
ANR	623367	CallExpression	"getNextProgramCharDistance ( line , i )"		621404	1					
ANR	623368	Callee	getNextProgramCharDistance		621404	0					
ANR	623369	Identifier	getNextProgramCharDistance		621404	0					
ANR	623370	ArgumentList	line		621404	1					
ANR	623371	Argument	line		621404	0					
ANR	623372	Identifier	line		621404	0					
ANR	623373	Argument	i		621404	1					
ANR	623374	Identifier	i		621404	0					
ANR	623375	IfStatement	if ( ( int ) line . length ( ) > nextChar && line [ nextChar ] == '}' )		621404	1					
ANR	623376	Condition	( int ) line . length ( ) > nextChar && line [ nextChar ] == '}'	2893:10:84943:84997	621404	0	True				
ANR	623377	AndExpression	( int ) line . length ( ) > nextChar && line [ nextChar ] == '}'		621404	0		&&			
ANR	623378	RelationalExpression	( int ) line . length ( ) > nextChar		621404	0		>			
ANR	623379	CastExpression	( int ) line . length ( )		621404	0					
ANR	623380	CastTarget	int		621404	0					
ANR	623381	CallExpression	line . length ( )		621404	1					
ANR	623382	Callee	line . length		621404	0					
ANR	623383	MemberAccess	line . length		621404	0					
ANR	623384	Identifier	line		621404	0					
ANR	623385	Identifier	length		621404	1					
ANR	623386	ArgumentList			621404	1					
ANR	623387	Identifier	nextChar		621404	1					
ANR	623388	EqualityExpression	line [ nextChar ] == '}'		621404	1		==			
ANR	623389	ArrayIndexing	line [ nextChar ]		621404	0					
ANR	623390	Identifier	line		621404	0					
ANR	623391	Identifier	nextChar		621404	1					
ANR	623392	PrimaryExpression	'}'		621404	1					
ANR	623393	ExpressionStatement	-- indentCount	2894:7:85007:85020	621404	1	True				
ANR	623394	UnaryExpression	-- indentCount		621404	0					
ANR	623395	IncDec	--		621404	0					
ANR	623396	Identifier	indentCount		621404	1					
ANR	623397	IfStatement	if ( isInObjCInterface )		621404	8					
ANR	623398	Condition	isInObjCInterface	2899:7:85048:85064	621404	0	True				
ANR	623399	Identifier	isInObjCInterface		621404	0					
ANR	623400	CompoundStatement		450:3:13194:13194	621404	1					
ANR	623401	ExpressionStatement	isInObjCInterface = false	2901:4:85076:85101	621404	0	True				
ANR	623402	AssignmentExpression	isInObjCInterface = false		621404	0		=			
ANR	623403	Identifier	isInObjCInterface		621404	0					
ANR	623404	Identifier	false		621404	1					
ANR	623405	IfStatement	if ( lineBeginsWithOpenBrace )		621404	1					
ANR	623406	Condition	lineBeginsWithOpenBrace	2902:8:85111:85133	621404	0	True				
ANR	623407	Identifier	lineBeginsWithOpenBrace		621404	0					
ANR	623408	ExpressionStatement	-- indentCount	2903:5:85141:85154	621404	1	True				
ANR	623409	UnaryExpression	-- indentCount		621404	0					
ANR	623410	IncDec	--		621404	0					
ANR	623411	Identifier	indentCount		621404	1					
ANR	623412	IfStatement	if ( braceIndent && ! namespaceIndent && ! headerStack -> empty ( ) && ( ( * headerStack ) . back ( ) == & AS_NAMESPACE || ( * headerStack ) . back ( ) == & AS_MODULE ) )		621404	9					
ANR	623413	Condition	braceIndent && ! namespaceIndent && ! headerStack -> empty ( ) && ( ( * headerStack ) . back ( ) == & AS_NAMESPACE || ( * headerStack ) . back ( ) == & AS_MODULE )	2906:7:85169:85333	621404	0	True				
ANR	623414	AndExpression	braceIndent && ! namespaceIndent && ! headerStack -> empty ( ) && ( ( * headerStack ) . back ( ) == & AS_NAMESPACE || ( * headerStack ) . back ( ) == & AS_MODULE )		621404	0		&&			
ANR	623415	Identifier	braceIndent		621404	0					
ANR	623416	AndExpression	! namespaceIndent && ! headerStack -> empty ( ) && ( ( * headerStack ) . back ( ) == & AS_NAMESPACE || ( * headerStack ) . back ( ) == & AS_MODULE )		621404	1		&&			
ANR	623417	UnaryOperationExpression	! namespaceIndent		621404	0					
ANR	623418	UnaryOperator	!		621404	0					
ANR	623419	Identifier	namespaceIndent		621404	1					
ANR	623420	AndExpression	! headerStack -> empty ( ) && ( ( * headerStack ) . back ( ) == & AS_NAMESPACE || ( * headerStack ) . back ( ) == & AS_MODULE )		621404	1		&&			
ANR	623421	UnaryOperationExpression	! headerStack -> empty ( )		621404	0					
ANR	623422	UnaryOperator	!		621404	0					
ANR	623423	CallExpression	headerStack -> empty ( )		621404	1					
ANR	623424	Callee	headerStack -> empty		621404	0					
ANR	623425	PtrMemberAccess	headerStack -> empty		621404	0					
ANR	623426	Identifier	headerStack		621404	0					
ANR	623427	Identifier	empty		621404	1					
ANR	623428	ArgumentList			621404	1					
ANR	623429	OrExpression	( * headerStack ) . back ( ) == & AS_NAMESPACE || ( * headerStack ) . back ( ) == & AS_MODULE		621404	1		||			
ANR	623430	EqualityExpression	( * headerStack ) . back ( ) == & AS_NAMESPACE		621404	0		==			
ANR	623431	CallExpression	( * headerStack ) . back ( )		621404	0					
ANR	623432	Callee	( * headerStack ) . back		621404	0					
ANR	623433	MemberAccess	( * headerStack ) . back		621404	0					
ANR	623434	UnaryOperationExpression	* headerStack		621404	0					
ANR	623435	UnaryOperator	*		621404	0					
ANR	623436	Identifier	headerStack		621404	1					
ANR	623437	Identifier	back		621404	1					
ANR	623438	ArgumentList			621404	1					
ANR	623439	UnaryOperationExpression	& AS_NAMESPACE		621404	1					
ANR	623440	UnaryOperator	&		621404	0					
ANR	623441	Identifier	AS_NAMESPACE		621404	1					
ANR	623442	EqualityExpression	( * headerStack ) . back ( ) == & AS_MODULE		621404	1		==			
ANR	623443	CallExpression	( * headerStack ) . back ( )		621404	0					
ANR	623444	Callee	( * headerStack ) . back		621404	0					
ANR	623445	MemberAccess	( * headerStack ) . back		621404	0					
ANR	623446	UnaryOperationExpression	* headerStack		621404	0					
ANR	623447	UnaryOperator	*		621404	0					
ANR	623448	Identifier	headerStack		621404	1					
ANR	623449	Identifier	back		621404	1					
ANR	623450	ArgumentList			621404	1					
ANR	623451	UnaryOperationExpression	& AS_MODULE		621404	1					
ANR	623452	UnaryOperator	&		621404	0					
ANR	623453	Identifier	AS_MODULE		621404	1					
ANR	623454	CompoundStatement		459:3:13463:13463	621404	1					
ANR	623455	ExpressionStatement	shouldIndentBracedLine = false	2910:4:85345:85375	621404	0	True				
ANR	623456	AssignmentExpression	shouldIndentBracedLine = false		621404	0		=			
ANR	623457	Identifier	shouldIndentBracedLine		621404	0					
ANR	623458	Identifier	false		621404	1					
ANR	623459	ExpressionStatement	-- indentCount	2911:4:85381:85394	621404	1	True				
ANR	623460	UnaryExpression	-- indentCount		621404	0					
ANR	623461	IncDec	--		621404	0					
ANR	623462	Identifier	indentCount		621404	1					
ANR	623463	IfStatement	if ( ! headerStack -> empty ( ) && ( * headerStack ) . back ( ) == & AS_STRUCT && isInIndentableStruct )		621404	10					
ANR	623464	Condition	! headerStack -> empty ( ) && ( * headerStack ) . back ( ) == & AS_STRUCT && isInIndentableStruct	2915:7:85480:85585	621404	0	True				
ANR	623465	AndExpression	! headerStack -> empty ( ) && ( * headerStack ) . back ( ) == & AS_STRUCT && isInIndentableStruct		621404	0		&&			
ANR	623466	UnaryOperationExpression	! headerStack -> empty ( )		621404	0					
ANR	623467	UnaryOperator	!		621404	0					
ANR	623468	CallExpression	headerStack -> empty ( )		621404	1					
ANR	623469	Callee	headerStack -> empty		621404	0					
ANR	623470	PtrMemberAccess	headerStack -> empty		621404	0					
ANR	623471	Identifier	headerStack		621404	0					
ANR	623472	Identifier	empty		621404	1					
ANR	623473	ArgumentList			621404	1					
ANR	623474	AndExpression	( * headerStack ) . back ( ) == & AS_STRUCT && isInIndentableStruct		621404	1		&&			
ANR	623475	EqualityExpression	( * headerStack ) . back ( ) == & AS_STRUCT		621404	0		==			
ANR	623476	CallExpression	( * headerStack ) . back ( )		621404	0					
ANR	623477	Callee	( * headerStack ) . back		621404	0					
ANR	623478	MemberAccess	( * headerStack ) . back		621404	0					
ANR	623479	UnaryOperationExpression	* headerStack		621404	0					
ANR	623480	UnaryOperator	*		621404	0					
ANR	623481	Identifier	headerStack		621404	1					
ANR	623482	Identifier	back		621404	1					
ANR	623483	ArgumentList			621404	1					
ANR	623484	UnaryOperationExpression	& AS_STRUCT		621404	1					
ANR	623485	UnaryOperator	&		621404	0					
ANR	623486	Identifier	AS_STRUCT		621404	1					
ANR	623487	Identifier	isInIndentableStruct		621404	1					
ANR	623488	ExpressionStatement	( * headerStack ) . back ( ) = & AS_CLASS	2918:4:85592:85625	621404	1	True				
ANR	623489	AssignmentExpression	( * headerStack ) . back ( ) = & AS_CLASS		621404	0		=			
ANR	623490	CallExpression	( * headerStack ) . back ( )		621404	0					
ANR	623491	Callee	( * headerStack ) . back		621404	0					
ANR	623492	MemberAccess	( * headerStack ) . back		621404	0					
ANR	623493	UnaryOperationExpression	* headerStack		621404	0					
ANR	623494	UnaryOperator	*		621404	0					
ANR	623495	Identifier	headerStack		621404	1					
ANR	623496	Identifier	back		621404	1					
ANR	623497	ArgumentList			621404	1					
ANR	623498	UnaryOperationExpression	& AS_CLASS		621404	1					
ANR	623499	UnaryOperator	&		621404	0					
ANR	623500	Identifier	AS_CLASS		621404	1					
ANR	623501	ExpressionStatement	squareBracketDepthStack -> emplace_back ( parenDepth )	2920:3:85631:85680	621404	11	True				
ANR	623502	CallExpression	squareBracketDepthStack -> emplace_back ( parenDepth )		621404	0					
ANR	623503	Callee	squareBracketDepthStack -> emplace_back		621404	0					
ANR	623504	PtrMemberAccess	squareBracketDepthStack -> emplace_back		621404	0					
ANR	623505	Identifier	squareBracketDepthStack		621404	0					
ANR	623506	Identifier	emplace_back		621404	1					
ANR	623507	ArgumentList	parenDepth		621404	1					
ANR	623508	Argument	parenDepth		621404	0					
ANR	623509	Identifier	parenDepth		621404	0					
ANR	623510	ExpressionStatement	blockStatementStack -> push_back ( isContinuation )	2921:3:85685:85731	621404	12	True				
ANR	623511	CallExpression	blockStatementStack -> push_back ( isContinuation )		621404	0					
ANR	623512	Callee	blockStatementStack -> push_back		621404	0					
ANR	623513	PtrMemberAccess	blockStatementStack -> push_back		621404	0					
ANR	623514	Identifier	blockStatementStack		621404	0					
ANR	623515	Identifier	push_back		621404	1					
ANR	623516	ArgumentList	isContinuation		621404	1					
ANR	623517	Argument	isContinuation		621404	0					
ANR	623518	Identifier	isContinuation		621404	0					
ANR	623519	IfStatement	if ( ! continuationIndentStack -> empty ( ) )		621404	13					
ANR	623520	Condition	! continuationIndentStack -> empty ( )	2923:7:85741:85773	621404	0	True				
ANR	623521	UnaryOperationExpression	! continuationIndentStack -> empty ( )		621404	0					
ANR	623522	UnaryOperator	!		621404	0					
ANR	623523	CallExpression	continuationIndentStack -> empty ( )		621404	1					
ANR	623524	Callee	continuationIndentStack -> empty		621404	0					
ANR	623525	PtrMemberAccess	continuationIndentStack -> empty		621404	0					
ANR	623526	Identifier	continuationIndentStack		621404	0					
ANR	623527	Identifier	empty		621404	1					
ANR	623528	ArgumentList			621404	1					
ANR	623529	CompoundStatement		474:3:13903:13903	621404	1					
ANR	623530	WhileStatement	while ( ! continuationIndentStack -> empty ( ) )		621404	0					
ANR	623531	Condition	! continuationIndentStack -> empty ( )	2926:11:85843:85875	621404	0	True				
ANR	623532	UnaryOperationExpression	! continuationIndentStack -> empty ( )		621404	0					
ANR	623533	UnaryOperator	!		621404	0					
ANR	623534	CallExpression	continuationIndentStack -> empty ( )		621404	1					
ANR	623535	Callee	continuationIndentStack -> empty		621404	0					
ANR	623536	PtrMemberAccess	continuationIndentStack -> empty		621404	0					
ANR	623537	Identifier	continuationIndentStack		621404	0					
ANR	623538	Identifier	empty		621404	1					
ANR	623539	ArgumentList			621404	1					
ANR	623540	ExpressionStatement	popLastContinuationIndent ( )	2927:5:85883:85910	621404	1	True				
ANR	623541	CallExpression	popLastContinuationIndent ( )		621404	0					
ANR	623542	Callee	popLastContinuationIndent		621404	0					
ANR	623543	Identifier	popLastContinuationIndent		621404	0					
ANR	623544	ArgumentList			621404	1					
ANR	623545	IfStatement	if ( isInClassInitializer || isInClassHeaderTab )		621404	1					
ANR	623546	Condition	isInClassInitializer || isInClassHeaderTab	2928:8:85920:85961	621404	0	True				
ANR	623547	OrExpression	isInClassInitializer || isInClassHeaderTab		621404	0		||			
ANR	623548	Identifier	isInClassInitializer		621404	0					
ANR	623549	Identifier	isInClassHeaderTab		621404	1					
ANR	623550	CompoundStatement		479:4:14092:14092	621404	1					
ANR	623551	IfStatement	if ( lineBeginsWithOpenBrace || lineBeginsWithComma )		621404	0					
ANR	623552	Condition	lineBeginsWithOpenBrace || lineBeginsWithComma	2930:9:85979:86024	621404	0	True				
ANR	623553	OrExpression	lineBeginsWithOpenBrace || lineBeginsWithComma		621404	0		||			
ANR	623554	Identifier	lineBeginsWithOpenBrace		621404	0					
ANR	623555	Identifier	lineBeginsWithComma		621404	1					
ANR	623556	ExpressionStatement	spaceIndentCount = 0	2931:6:86033:86053	621404	1	True				
ANR	623557	AssignmentExpression	spaceIndentCount = 0		621404	0		=			
ANR	623558	Identifier	spaceIndentCount		621404	0					
ANR	623559	PrimaryExpression	0		621404	1					
ANR	623560	ElseStatement	else		621404	0					
ANR	623561	ExpressionStatement	spaceIndentCount = 0	2934:5:86075:86095	621404	0	True				
ANR	623562	AssignmentExpression	spaceIndentCount = 0		621404	0		=			
ANR	623563	Identifier	spaceIndentCount		621404	0					
ANR	623564	PrimaryExpression	0		621404	1					
ANR	623565	ExpressionStatement	blockTabCount += ( isContinuation ? 1 : 0 )	2937:3:86106:86147	621404	14	True				
ANR	623566	AssignmentExpression	blockTabCount += ( isContinuation ? 1 : 0 )		621404	0		+=			
ANR	623567	Identifier	blockTabCount		621404	0					
ANR	623568	ConditionalExpression	isContinuation ? 1 : 0		621404	1					
ANR	623569	Condition	isContinuation		621404	0					
ANR	623570	Identifier	isContinuation		621404	0					
ANR	623571	PrimaryExpression	1		621404	1					
ANR	623572	PrimaryExpression	0		621404	2					
ANR	623573	IfStatement	if ( g_preprocessorCppExternCBrace == 3 )		621404	15					
ANR	623574	Condition	g_preprocessorCppExternCBrace == 3	2938:7:86156:86189	621404	0	True				
ANR	623575	EqualityExpression	g_preprocessorCppExternCBrace == 3		621404	0		==			
ANR	623576	Identifier	g_preprocessorCppExternCBrace		621404	0					
ANR	623577	PrimaryExpression	3		621404	1					
ANR	623578	ExpressionStatement	++ g_preprocessorCppExternCBrace	2939:4:86196:86227	621404	1	True				
ANR	623579	UnaryExpression	++ g_preprocessorCppExternCBrace		621404	0					
ANR	623580	IncDec	++		621404	0					
ANR	623581	Identifier	g_preprocessorCppExternCBrace		621404	1					
ANR	623582	ExpressionStatement	parenDepth = 0	2940:3:86232:86246	621404	16	True				
ANR	623583	AssignmentExpression	parenDepth = 0		621404	0		=			
ANR	623584	Identifier	parenDepth		621404	0					
ANR	623585	PrimaryExpression	0		621404	1					
ANR	623586	ExpressionStatement	isInClassHeader = false	2941:3:86251:86274	621404	17	True				
ANR	623587	AssignmentExpression	isInClassHeader = false		621404	0		=			
ANR	623588	Identifier	isInClassHeader		621404	0					
ANR	623589	Identifier	false		621404	1					
ANR	623590	ExpressionStatement	isInClassHeaderTab = false	2942:3:86279:86305	621404	18	True				
ANR	623591	AssignmentExpression	isInClassHeaderTab = false		621404	0		=			
ANR	623592	Identifier	isInClassHeaderTab		621404	0					
ANR	623593	Identifier	false		621404	1					
ANR	623594	ExpressionStatement	isInClassInitializer = false	2943:3:86310:86338	621404	19	True				
ANR	623595	AssignmentExpression	isInClassInitializer = false		621404	0		=			
ANR	623596	Identifier	isInClassInitializer		621404	0					
ANR	623597	Identifier	false		621404	1					
ANR	623598	ExpressionStatement	isInEnumTypeID = false	2944:3:86343:86365	621404	20	True				
ANR	623599	AssignmentExpression	isInEnumTypeID = false		621404	0		=			
ANR	623600	Identifier	isInEnumTypeID		621404	0					
ANR	623601	Identifier	false		621404	1					
ANR	623602	ExpressionStatement	isContinuation = false	2945:3:86370:86392	621404	21	True				
ANR	623603	AssignmentExpression	isContinuation = false		621404	0		=			
ANR	623604	Identifier	isContinuation		621404	0					
ANR	623605	Identifier	false		621404	1					
ANR	623606	ExpressionStatement	isInQuestion = false	2946:3:86397:86417	621404	22	True				
ANR	623607	AssignmentExpression	isInQuestion = false		621404	0		=			
ANR	623608	Identifier	isInQuestion		621404	0					
ANR	623609	Identifier	false		621404	1					
ANR	623610	ExpressionStatement	isInLet = false	2947:3:86422:86437	621404	23	True				
ANR	623611	AssignmentExpression	isInLet = false		621404	0		=			
ANR	623612	Identifier	isInLet		621404	0					
ANR	623613	Identifier	false		621404	1					
ANR	623614	ExpressionStatement	foundPreCommandHeader = false	2948:3:86442:86471	621404	24	True				
ANR	623615	AssignmentExpression	foundPreCommandHeader = false		621404	0		=			
ANR	623616	Identifier	foundPreCommandHeader		621404	0					
ANR	623617	Identifier	false		621404	1					
ANR	623618	ExpressionStatement	foundPreCommandMacro = false	2949:3:86476:86504	621404	25	True				
ANR	623619	AssignmentExpression	foundPreCommandMacro = false		621404	0		=			
ANR	623620	Identifier	foundPreCommandMacro		621404	0					
ANR	623621	Identifier	false		621404	1					
ANR	623622	ExpressionStatement	isInExternC = false	2950:3:86509:86528	621404	26	True				
ANR	623623	AssignmentExpression	isInExternC = false		621404	0		=			
ANR	623624	Identifier	isInExternC		621404	0					
ANR	623625	Identifier	false		621404	1					
ANR	623626	Statement	tempStacks	2952:3:86534:86543	621404	27	True				
ANR	623627	Statement	->	2952:13:86544:86545	621404	28	True				
ANR	623628	Statement	emplace_back	2952:15:86546:86557	621404	29	True				
ANR	623629	Statement	(	2952:27:86558:86558	621404	30	True				
ANR	623630	Statement	new	2952:28:86559:86561	621404	31	True				
ANR	623631	Statement	vector	2952:32:86563:86568	621404	32	True				
ANR	623632	Statement	<	2952:38:86569:86569	621404	33	True				
ANR	623633	Statement	const	2952:39:86570:86574	621404	34	True				
ANR	623634	Statement	string	2952:45:86576:86581	621404	35	True				
ANR	623635	Statement	*	2952:51:86582:86582	621404	36	True				
ANR	623636	Statement	>	2952:52:86583:86583	621404	37	True				
ANR	623637	Statement	)	2952:53:86584:86584	621404	38	True				
ANR	623638	ExpressionStatement		2952:54:86585:86585	621404	39	True				
ANR	623639	ExpressionStatement	headerStack -> emplace_back ( & AS_OPEN_BRACE )	2953:3:86590:86631	621404	40	True				
ANR	623640	CallExpression	headerStack -> emplace_back ( & AS_OPEN_BRACE )		621404	0					
ANR	623641	Callee	headerStack -> emplace_back		621404	0					
ANR	623642	PtrMemberAccess	headerStack -> emplace_back		621404	0					
ANR	623643	Identifier	headerStack		621404	0					
ANR	623644	Identifier	emplace_back		621404	1					
ANR	623645	ArgumentList	& AS_OPEN_BRACE		621404	1					
ANR	623646	Argument	& AS_OPEN_BRACE		621404	0					
ANR	623647	UnaryOperationExpression	& AS_OPEN_BRACE		621404	0					
ANR	623648	UnaryOperator	&		621404	0					
ANR	623649	Identifier	AS_OPEN_BRACE		621404	1					
ANR	623650	ExpressionStatement	lastLineHeader = & AS_OPEN_BRACE	2954:3:86636:86667	621404	41	True				
ANR	623651	AssignmentExpression	lastLineHeader = & AS_OPEN_BRACE		621404	0		=			
ANR	623652	Identifier	lastLineHeader		621404	0					
ANR	623653	UnaryOperationExpression	& AS_OPEN_BRACE		621404	1					
ANR	623654	UnaryOperator	&		621404	0					
ANR	623655	Identifier	AS_OPEN_BRACE		621404	1					
ANR	623656	ContinueStatement	continue ;	2956:3:86673:86681	621404	42	True				
ANR	623657	IdentifierDeclStatement	"bool isPotentialHeader = isCharPotentialHeader ( line , i ) ;"	2960:2:86740:86795	621404	17	True				
ANR	623658	IdentifierDecl	"isPotentialHeader = isCharPotentialHeader ( line , i )"		621404	0					
ANR	623659	IdentifierDeclType	bool		621404	0					
ANR	623660	Identifier	isPotentialHeader		621404	1					
ANR	623661	AssignmentExpression	"isPotentialHeader = isCharPotentialHeader ( line , i )"		621404	2		=			
ANR	623662	Identifier	isPotentialHeader		621404	0					
ANR	623663	CallExpression	"isCharPotentialHeader ( line , i )"		621404	1					
ANR	623664	Callee	isCharPotentialHeader		621404	0					
ANR	623665	Identifier	isCharPotentialHeader		621404	0					
ANR	623666	ArgumentList	line		621404	1					
ANR	623667	Argument	line		621404	0					
ANR	623668	Identifier	line		621404	0					
ANR	623669	Argument	i		621404	1					
ANR	623670	Identifier	i		621404	0					
ANR	623671	IfStatement	if ( isPotentialHeader && squareBracketCount == 0 )		621404	18					
ANR	623672	Condition	isPotentialHeader && squareBracketCount == 0	2962:6:86804:86847	621404	0	True				
ANR	623673	AndExpression	isPotentialHeader && squareBracketCount == 0		621404	0		&&			
ANR	623674	Identifier	isPotentialHeader		621404	0					
ANR	623675	EqualityExpression	squareBracketCount == 0		621404	1		==			
ANR	623676	Identifier	squareBracketCount		621404	0					
ANR	623677	PrimaryExpression	0		621404	1					
ANR	623678	CompoundStatement		514:3:14981:15035	621404	1					
ANR	623679	IdentifierDeclStatement	"const string * newHeader = findHeader ( line , i , headers ) ;"	2964:3:86857:86911	621404	0	True				
ANR	623680	IdentifierDecl	"* newHeader = findHeader ( line , i , headers )"		621404	0					
ANR	623681	IdentifierDeclType	const string *		621404	0					
ANR	623682	Identifier	newHeader		621404	1					
ANR	623683	AssignmentExpression	"* newHeader = findHeader ( line , i , headers )"		621404	2		=			
ANR	623684	Identifier	newHeader		621404	0					
ANR	623685	CallExpression	"findHeader ( line , i , headers )"		621404	1					
ANR	623686	Callee	findHeader		621404	0					
ANR	623687	Identifier	findHeader		621404	0					
ANR	623688	ArgumentList	line		621404	1					
ANR	623689	Argument	line		621404	0					
ANR	623690	Identifier	line		621404	0					
ANR	623691	Argument	i		621404	1					
ANR	623692	Identifier	i		621404	0					
ANR	623693	Argument	headers		621404	2					
ANR	623694	Identifier	headers		621404	0					
ANR	623695	IfStatement	if ( isCStyle ( ) && ( newHeader == & AS_FOREVER || newHeader == & AS_FOREACH ) )		621404	1					
ANR	623696	Condition	isCStyle ( ) && ( newHeader == & AS_FOREVER || newHeader == & AS_FOREACH )	2967:7:86962:87040	621404	0	True				
ANR	623697	AndExpression	isCStyle ( ) && ( newHeader == & AS_FOREVER || newHeader == & AS_FOREACH )		621404	0		&&			
ANR	623698	CallExpression	isCStyle ( )		621404	0					
ANR	623699	Callee	isCStyle		621404	0					
ANR	623700	Identifier	isCStyle		621404	0					
ANR	623701	ArgumentList			621404	1					
ANR	623702	OrExpression	newHeader == & AS_FOREVER || newHeader == & AS_FOREACH		621404	1		||			
ANR	623703	EqualityExpression	newHeader == & AS_FOREVER		621404	0		==			
ANR	623704	Identifier	newHeader		621404	0					
ANR	623705	UnaryOperationExpression	& AS_FOREVER		621404	1					
ANR	623706	UnaryOperator	&		621404	0					
ANR	623707	Identifier	AS_FOREVER		621404	1					
ANR	623708	EqualityExpression	newHeader == & AS_FOREACH		621404	1		==			
ANR	623709	Identifier	newHeader		621404	0					
ANR	623710	UnaryOperationExpression	& AS_FOREACH		621404	1					
ANR	623711	UnaryOperator	&		621404	0					
ANR	623712	Identifier	AS_FOREACH		621404	1					
ANR	623713	CompoundStatement		519:3:15170:15170	621404	1					
ANR	623714	IfStatement	"if ( line . find_first_of ( ""=;"" , i ) != string :: npos )"		621404	0					
ANR	623715	Condition	"line . find_first_of ( ""=;"" , i ) != string :: npos"	2970:8:87056:87098	621404	0	True				
ANR	623716	EqualityExpression	"line . find_first_of ( ""=;"" , i ) != string :: npos"		621404	0		!=			
ANR	623717	CallExpression	"line . find_first_of ( ""=;"" , i )"		621404	0					
ANR	623718	Callee	line . find_first_of		621404	0					
ANR	623719	MemberAccess	line . find_first_of		621404	0					
ANR	623720	Identifier	line		621404	0					
ANR	623721	Identifier	find_first_of		621404	1					
ANR	623722	ArgumentList	"""=;"""		621404	1					
ANR	623723	Argument	"""=;"""		621404	0					
ANR	623724	PrimaryExpression	"""=;"""		621404	0					
ANR	623725	Argument	i		621404	1					
ANR	623726	Identifier	i		621404	0					
ANR	623727	Identifier	string :: npos		621404	1					
ANR	623728	ExpressionStatement	newHeader = nullptr	2971:5:87106:87125	621404	1	True				
ANR	623729	AssignmentExpression	newHeader = nullptr		621404	0		=			
ANR	623730	Identifier	newHeader		621404	0					
ANR	623731	Identifier	nullptr		621404	1					
ANR	623732	ElseStatement	else		621404	0					
ANR	623733	IfStatement	"if ( newHeader == & AS_USING && ASBeautifier :: peekNextChar ( line , i + ( * newHeader ) . length ( ) - 1 ) != '(' )"		621404	0					
ANR	623734	Condition	"newHeader == & AS_USING && ASBeautifier :: peekNextChar ( line , i + ( * newHeader ) . length ( ) - 1 ) != '('"	2973:12:87144:87251	621404	0	True				
ANR	623735	AndExpression	"newHeader == & AS_USING && ASBeautifier :: peekNextChar ( line , i + ( * newHeader ) . length ( ) - 1 ) != '('"		621404	0		&&			
ANR	623736	EqualityExpression	newHeader == & AS_USING		621404	0		==			
ANR	623737	Identifier	newHeader		621404	0					
ANR	623738	UnaryOperationExpression	& AS_USING		621404	1					
ANR	623739	UnaryOperator	&		621404	0					
ANR	623740	Identifier	AS_USING		621404	1					
ANR	623741	EqualityExpression	"ASBeautifier :: peekNextChar ( line , i + ( * newHeader ) . length ( ) - 1 ) != '('"		621404	1		!=			
ANR	623742	CallExpression	"ASBeautifier :: peekNextChar ( line , i + ( * newHeader ) . length ( ) - 1 )"		621404	0					
ANR	623743	Callee	ASBeautifier :: peekNextChar		621404	0					
ANR	623744	Identifier	ASBeautifier :: peekNextChar		621404	0					
ANR	623745	ArgumentList	line		621404	1					
ANR	623746	Argument	line		621404	0					
ANR	623747	Identifier	line		621404	0					
ANR	623748	Argument	i + ( * newHeader ) . length ( ) - 1		621404	1					
ANR	623749	AdditiveExpression	i + ( * newHeader ) . length ( ) - 1		621404	0		+			
ANR	623750	Identifier	i		621404	0					
ANR	623751	AdditiveExpression	( * newHeader ) . length ( ) - 1		621404	1		-			
ANR	623752	CallExpression	( * newHeader ) . length ( )		621404	0					
ANR	623753	Callee	( * newHeader ) . length		621404	0					
ANR	623754	MemberAccess	( * newHeader ) . length		621404	0					
ANR	623755	UnaryOperationExpression	* newHeader		621404	0					
ANR	623756	UnaryOperator	*		621404	0					
ANR	623757	Identifier	newHeader		621404	1					
ANR	623758	Identifier	length		621404	1					
ANR	623759	ArgumentList			621404	1					
ANR	623760	PrimaryExpression	1		621404	1					
ANR	623761	PrimaryExpression	'('		621404	1					
ANR	623762	ExpressionStatement	newHeader = nullptr	2975:4:87258:87277	621404	1	True				
ANR	623763	AssignmentExpression	newHeader = nullptr		621404	0		=			
ANR	623764	Identifier	newHeader		621404	0					
ANR	623765	Identifier	nullptr		621404	1					
ANR	623766	IfStatement	if ( newHeader != nullptr )		621404	2					
ANR	623767	Condition	newHeader != nullptr	2977:7:87287:87306	621404	0	True				
ANR	623768	EqualityExpression	newHeader != nullptr		621404	0		!=			
ANR	623769	Identifier	newHeader		621404	0					
ANR	623770	Identifier	nullptr		621404	1					
ANR	623771	CompoundStatement		534:4:15555:15601	621404	1					
ANR	623772	IdentifierDeclStatement	bool isIndentableHeader = true ;	2980:4:87370:87400	621404	0	True				
ANR	623773	IdentifierDecl	isIndentableHeader = true		621404	0					
ANR	623774	IdentifierDeclType	bool		621404	0					
ANR	623775	Identifier	isIndentableHeader		621404	1					
ANR	623776	AssignmentExpression	isIndentableHeader = true		621404	2		=			
ANR	623777	Identifier	true		621404	0					
ANR	623778	Identifier	true		621404	1					
ANR	623779	ExpressionStatement	isInHeader = true	2982:4:87407:87424	621404	1	True				
ANR	623780	AssignmentExpression	isInHeader = true		621404	0		=			
ANR	623781	Identifier	isInHeader		621404	0					
ANR	623782	Identifier	true		621404	1					
ANR	623783	IdentifierDeclStatement	vector < const string * > * lastTempStack = nullptr ;	2984:4:87431:87477	621404	2	True				
ANR	623784	IdentifierDecl	* lastTempStack = nullptr		621404	0					
ANR	623785	IdentifierDeclType	vector < const string * > *		621404	0					
ANR	623786	Identifier	lastTempStack		621404	1					
ANR	623787	AssignmentExpression	* lastTempStack = nullptr		621404	2		=			
ANR	623788	Identifier	nullptr		621404	0					
ANR	623789	Identifier	nullptr		621404	1					
ANR	623790	ExpressionStatement		2984:51:87478:87478	621404	3	True				
ANR	623791	IfStatement	if ( ! tempStacks -> empty ( ) )		621404	4					
ANR	623792	Condition	! tempStacks -> empty ( )	2985:8:87488:87507	621404	0	True				
ANR	623793	UnaryOperationExpression	! tempStacks -> empty ( )		621404	0					
ANR	623794	UnaryOperator	!		621404	0					
ANR	623795	CallExpression	tempStacks -> empty ( )		621404	1					
ANR	623796	Callee	tempStacks -> empty		621404	0					
ANR	623797	PtrMemberAccess	tempStacks -> empty		621404	0					
ANR	623798	Identifier	tempStacks		621404	0					
ANR	623799	Identifier	empty		621404	1					
ANR	623800	ArgumentList			621404	1					
ANR	623801	ExpressionStatement	lastTempStack = tempStacks -> back ( )	2986:5:87515:87549	621404	1	True				
ANR	623802	AssignmentExpression	lastTempStack = tempStacks -> back ( )		621404	0		=			
ANR	623803	Identifier	lastTempStack		621404	0					
ANR	623804	CallExpression	tempStacks -> back ( )		621404	1					
ANR	623805	Callee	tempStacks -> back		621404	0					
ANR	623806	PtrMemberAccess	tempStacks -> back		621404	0					
ANR	623807	Identifier	tempStacks		621404	0					
ANR	623808	Identifier	back		621404	1					
ANR	623809	ArgumentList			621404	1					
ANR	623810	IfStatement	if ( newHeader == & AS_IF && lastLineHeader == & AS_ELSE )		621404	5					
ANR	623811	Condition	newHeader == & AS_IF && lastLineHeader == & AS_ELSE	2992:8:87741:87789	621404	0	True				
ANR	623812	AndExpression	newHeader == & AS_IF && lastLineHeader == & AS_ELSE		621404	0		&&			
ANR	623813	EqualityExpression	newHeader == & AS_IF		621404	0		==			
ANR	623814	Identifier	newHeader		621404	0					
ANR	623815	UnaryOperationExpression	& AS_IF		621404	1					
ANR	623816	UnaryOperator	&		621404	0					
ANR	623817	Identifier	AS_IF		621404	1					
ANR	623818	EqualityExpression	lastLineHeader == & AS_ELSE		621404	1		==			
ANR	623819	Identifier	lastLineHeader		621404	0					
ANR	623820	UnaryOperationExpression	& AS_ELSE		621404	1					
ANR	623821	UnaryOperator	&		621404	0					
ANR	623822	Identifier	AS_ELSE		621404	1					
ANR	623823	CompoundStatement		543:4:15920:15920	621404	1					
ANR	623824	ExpressionStatement	headerStack -> pop_back ( )	2994:5:87803:87826	621404	0	True				
ANR	623825	CallExpression	headerStack -> pop_back ( )		621404	0					
ANR	623826	Callee	headerStack -> pop_back		621404	0					
ANR	623827	PtrMemberAccess	headerStack -> pop_back		621404	0					
ANR	623828	Identifier	headerStack		621404	0					
ANR	623829	Identifier	pop_back		621404	1					
ANR	623830	ArgumentList			621404	1					
ANR	623831	ElseStatement	else		621404	0					
ANR	623832	IfStatement	if ( newHeader == & AS_ELSE )		621404	0					
ANR	623833	Condition	newHeader == & AS_ELSE	2998:13:87875:87895	621404	0	True				
ANR	623834	EqualityExpression	newHeader == & AS_ELSE		621404	0		==			
ANR	623835	Identifier	newHeader		621404	0					
ANR	623836	UnaryOperationExpression	& AS_ELSE		621404	1					
ANR	623837	UnaryOperator	&		621404	0					
ANR	623838	Identifier	AS_ELSE		621404	1					
ANR	623839	CompoundStatement		549:4:16026:16026	621404	1					
ANR	623840	IfStatement	if ( lastTempStack != nullptr )		621404	0					
ANR	623841	Condition	lastTempStack != nullptr	3000:9:87913:87936	621404	0	True				
ANR	623842	EqualityExpression	lastTempStack != nullptr		621404	0		!=			
ANR	623843	Identifier	lastTempStack		621404	0					
ANR	623844	Identifier	nullptr		621404	1					
ANR	623845	CompoundStatement		552:6:16076:16123	621404	1					
ANR	623846	IdentifierDeclStatement	"int indexOfIf = indexOf ( * lastTempStack , & AS_IF ) ;"	3002:6:87952:87999	621404	0	True				
ANR	623847	IdentifierDecl	"indexOfIf = indexOf ( * lastTempStack , & AS_IF )"		621404	0					
ANR	623848	IdentifierDeclType	int		621404	0					
ANR	623849	Identifier	indexOfIf		621404	1					
ANR	623850	AssignmentExpression	"indexOfIf = indexOf ( * lastTempStack , & AS_IF )"		621404	2		=			
ANR	623851	Identifier	indexOfIf		621404	0					
ANR	623852	CallExpression	"indexOf ( * lastTempStack , & AS_IF )"		621404	1					
ANR	623853	Callee	indexOf		621404	0					
ANR	623854	Identifier	indexOf		621404	0					
ANR	623855	ArgumentList	* lastTempStack		621404	1					
ANR	623856	Argument	* lastTempStack		621404	0					
ANR	623857	UnaryOperationExpression	* lastTempStack		621404	0					
ANR	623858	UnaryOperator	*		621404	0					
ANR	623859	Identifier	lastTempStack		621404	1					
ANR	623860	Argument	& AS_IF		621404	1					
ANR	623861	UnaryOperationExpression	& AS_IF		621404	0					
ANR	623862	UnaryOperator	&		621404	0					
ANR	623863	Identifier	AS_IF		621404	1					
ANR	623864	IfStatement	if ( indexOfIf != - 1 )		621404	1					
ANR	623865	Condition	indexOfIf != - 1	3003:10:88011:88025	621404	0	True				
ANR	623866	EqualityExpression	indexOfIf != - 1		621404	0		!=			
ANR	623867	Identifier	indexOfIf		621404	0					
ANR	623868	UnaryOperationExpression	- 1		621404	1					
ANR	623869	UnaryOperator	-		621404	0					
ANR	623870	PrimaryExpression	1		621404	1					
ANR	623871	CompoundStatement		557:7:16304:16359	621404	1					
ANR	623872	IdentifierDeclStatement	int restackSize = lastTempStack -> size ( ) - indexOfIf - 1 ;	3007:7:88180:88235	621404	0	True				
ANR	623873	IdentifierDecl	restackSize = lastTempStack -> size ( ) - indexOfIf - 1		621404	0					
ANR	623874	IdentifierDeclType	int		621404	0					
ANR	623875	Identifier	restackSize		621404	1					
ANR	623876	AssignmentExpression	restackSize = lastTempStack -> size ( ) - indexOfIf - 1		621404	2		=			
ANR	623877	Identifier	restackSize		621404	0					
ANR	623878	AdditiveExpression	lastTempStack -> size ( ) - indexOfIf - 1		621404	1		-			
ANR	623879	CallExpression	lastTempStack -> size ( )		621404	0					
ANR	623880	Callee	lastTempStack -> size		621404	0					
ANR	623881	PtrMemberAccess	lastTempStack -> size		621404	0					
ANR	623882	Identifier	lastTempStack		621404	0					
ANR	623883	Identifier	size		621404	1					
ANR	623884	ArgumentList			621404	1					
ANR	623885	AdditiveExpression	indexOfIf - 1		621404	1		-			
ANR	623886	Identifier	indexOfIf		621404	0					
ANR	623887	PrimaryExpression	1		621404	1					
ANR	623888	ForStatement	for ( int r = 0 ; r < restackSize ; r ++ )		621404	1					
ANR	623889	ForInit	int r = 0 ;	3008:12:88249:88258	621404	0	True				
ANR	623890	IdentifierDeclStatement	int r = 0 ;		621404	0					
ANR	623891	IdentifierDecl	r = 0		621404	0					
ANR	623892	IdentifierDeclType	int		621404	0					
ANR	623893	Identifier	r		621404	1					
ANR	623894	AssignmentExpression	r = 0		621404	2		=			
ANR	623895	Identifier	r		621404	0					
ANR	623896	PrimaryExpression	0		621404	1					
ANR	623897	Condition	r < restackSize	3008:23:88260:88274	621404	1	True				
ANR	623898	RelationalExpression	r < restackSize		621404	0		<			
ANR	623899	Identifier	r		621404	0					
ANR	623900	Identifier	restackSize		621404	1					
ANR	623901	PostIncDecOperationExpression	r ++	3008:40:88277:88279	621404	2	True				
ANR	623902	Identifier	r		621404	0					
ANR	623903	IncDec	++		621404	1					
ANR	623904	CompoundStatement		559:7:16413:16413	621404	3					
ANR	623905	ExpressionStatement	headerStack -> emplace_back ( lastTempStack -> back ( ) )	3010:8:88299:88347	621404	0	True				
ANR	623906	CallExpression	headerStack -> emplace_back ( lastTempStack -> back ( ) )		621404	0					
ANR	623907	Callee	headerStack -> emplace_back		621404	0					
ANR	623908	PtrMemberAccess	headerStack -> emplace_back		621404	0					
ANR	623909	Identifier	headerStack		621404	0					
ANR	623910	Identifier	emplace_back		621404	1					
ANR	623911	ArgumentList	lastTempStack -> back ( )		621404	1					
ANR	623912	Argument	lastTempStack -> back ( )		621404	0					
ANR	623913	CallExpression	lastTempStack -> back ( )		621404	0					
ANR	623914	Callee	lastTempStack -> back		621404	0					
ANR	623915	PtrMemberAccess	lastTempStack -> back		621404	0					
ANR	623916	Identifier	lastTempStack		621404	0					
ANR	623917	Identifier	back		621404	1					
ANR	623918	ArgumentList			621404	1					
ANR	623919	ExpressionStatement	lastTempStack -> pop_back ( )	3011:8:88357:88382	621404	1	True				
ANR	623920	CallExpression	lastTempStack -> pop_back ( )		621404	0					
ANR	623921	Callee	lastTempStack -> pop_back		621404	0					
ANR	623922	PtrMemberAccess	lastTempStack -> pop_back		621404	0					
ANR	623923	Identifier	lastTempStack		621404	0					
ANR	623924	Identifier	pop_back		621404	1					
ANR	623925	ArgumentList			621404	1					
ANR	623926	IfStatement	if ( ! closingBraceReached )		621404	2					
ANR	623927	Condition	! closingBraceReached	3013:11:88404:88423	621404	0	True				
ANR	623928	UnaryOperationExpression	! closingBraceReached		621404	0					
ANR	623929	UnaryOperator	!		621404	0					
ANR	623930	Identifier	closingBraceReached		621404	1					
ANR	623931	ExpressionStatement	indentCount += restackSize	3014:8:88434:88460	621404	1	True				
ANR	623932	AssignmentExpression	indentCount += restackSize		621404	0		+=			
ANR	623933	Identifier	indentCount		621404	0					
ANR	623934	Identifier	restackSize		621404	1					
ANR	623935	ElseStatement	else		621404	0					
ANR	623936	IfStatement	if ( newHeader == & AS_WHILE )		621404	0					
ANR	623937	Condition	newHeader == & AS_WHILE	3025:13:88780:88801	621404	0	True				
ANR	623938	EqualityExpression	newHeader == & AS_WHILE		621404	0		==			
ANR	623939	Identifier	newHeader		621404	0					
ANR	623940	UnaryOperationExpression	& AS_WHILE		621404	1					
ANR	623941	UnaryOperator	&		621404	0					
ANR	623942	Identifier	AS_WHILE		621404	1					
ANR	623943	CompoundStatement		576:4:16932:16932	621404	1					
ANR	623944	IfStatement	if ( lastTempStack != nullptr )		621404	0					
ANR	623945	Condition	lastTempStack != nullptr	3027:9:88819:88842	621404	0	True				
ANR	623946	EqualityExpression	lastTempStack != nullptr		621404	0		!=			
ANR	623947	Identifier	lastTempStack		621404	0					
ANR	623948	Identifier	nullptr		621404	1					
ANR	623949	CompoundStatement		579:6:16982:17029	621404	1					
ANR	623950	IdentifierDeclStatement	"int indexOfDo = indexOf ( * lastTempStack , & AS_DO ) ;"	3029:6:88858:88905	621404	0	True				
ANR	623951	IdentifierDecl	"indexOfDo = indexOf ( * lastTempStack , & AS_DO )"		621404	0					
ANR	623952	IdentifierDeclType	int		621404	0					
ANR	623953	Identifier	indexOfDo		621404	1					
ANR	623954	AssignmentExpression	"indexOfDo = indexOf ( * lastTempStack , & AS_DO )"		621404	2		=			
ANR	623955	Identifier	indexOfDo		621404	0					
ANR	623956	CallExpression	"indexOf ( * lastTempStack , & AS_DO )"		621404	1					
ANR	623957	Callee	indexOf		621404	0					
ANR	623958	Identifier	indexOf		621404	0					
ANR	623959	ArgumentList	* lastTempStack		621404	1					
ANR	623960	Argument	* lastTempStack		621404	0					
ANR	623961	UnaryOperationExpression	* lastTempStack		621404	0					
ANR	623962	UnaryOperator	*		621404	0					
ANR	623963	Identifier	lastTempStack		621404	1					
ANR	623964	Argument	& AS_DO		621404	1					
ANR	623965	UnaryOperationExpression	& AS_DO		621404	0					
ANR	623966	UnaryOperator	&		621404	0					
ANR	623967	Identifier	AS_DO		621404	1					
ANR	623968	IfStatement	if ( indexOfDo != - 1 )		621404	1					
ANR	623969	Condition	indexOfDo != - 1	3030:10:88917:88931	621404	0	True				
ANR	623970	EqualityExpression	indexOfDo != - 1		621404	0		!=			
ANR	623971	Identifier	indexOfDo		621404	0					
ANR	623972	UnaryOperationExpression	- 1		621404	1					
ANR	623973	UnaryOperator	-		621404	0					
ANR	623974	PrimaryExpression	1		621404	1					
ANR	623975	CompoundStatement		584:7:17210:17265	621404	1					
ANR	623976	IdentifierDeclStatement	int restackSize = lastTempStack -> size ( ) - indexOfDo - 1 ;	3034:7:89086:89141	621404	0	True				
ANR	623977	IdentifierDecl	restackSize = lastTempStack -> size ( ) - indexOfDo - 1		621404	0					
ANR	623978	IdentifierDeclType	int		621404	0					
ANR	623979	Identifier	restackSize		621404	1					
ANR	623980	AssignmentExpression	restackSize = lastTempStack -> size ( ) - indexOfDo - 1		621404	2		=			
ANR	623981	Identifier	restackSize		621404	0					
ANR	623982	AdditiveExpression	lastTempStack -> size ( ) - indexOfDo - 1		621404	1		-			
ANR	623983	CallExpression	lastTempStack -> size ( )		621404	0					
ANR	623984	Callee	lastTempStack -> size		621404	0					
ANR	623985	PtrMemberAccess	lastTempStack -> size		621404	0					
ANR	623986	Identifier	lastTempStack		621404	0					
ANR	623987	Identifier	size		621404	1					
ANR	623988	ArgumentList			621404	1					
ANR	623989	AdditiveExpression	indexOfDo - 1		621404	1		-			
ANR	623990	Identifier	indexOfDo		621404	0					
ANR	623991	PrimaryExpression	1		621404	1					
ANR	623992	ForStatement	for ( int r = 0 ; r < restackSize ; r ++ )		621404	1					
ANR	623993	ForInit	int r = 0 ;	3035:12:89155:89164	621404	0	True				
ANR	623994	IdentifierDeclStatement	int r = 0 ;		621404	0					
ANR	623995	IdentifierDecl	r = 0		621404	0					
ANR	623996	IdentifierDeclType	int		621404	0					
ANR	623997	Identifier	r		621404	1					
ANR	623998	AssignmentExpression	r = 0		621404	2		=			
ANR	623999	Identifier	r		621404	0					
ANR	624000	PrimaryExpression	0		621404	1					
ANR	624001	Condition	r < restackSize	3035:23:89166:89180	621404	1	True				
ANR	624002	RelationalExpression	r < restackSize		621404	0		<			
ANR	624003	Identifier	r		621404	0					
ANR	624004	Identifier	restackSize		621404	1					
ANR	624005	PostIncDecOperationExpression	r ++	3035:40:89183:89185	621404	2	True				
ANR	624006	Identifier	r		621404	0					
ANR	624007	IncDec	++		621404	1					
ANR	624008	CompoundStatement		586:7:17319:17319	621404	3					
ANR	624009	ExpressionStatement	headerStack -> emplace_back ( lastTempStack -> back ( ) )	3037:8:89205:89253	621404	0	True				
ANR	624010	CallExpression	headerStack -> emplace_back ( lastTempStack -> back ( ) )		621404	0					
ANR	624011	Callee	headerStack -> emplace_back		621404	0					
ANR	624012	PtrMemberAccess	headerStack -> emplace_back		621404	0					
ANR	624013	Identifier	headerStack		621404	0					
ANR	624014	Identifier	emplace_back		621404	1					
ANR	624015	ArgumentList	lastTempStack -> back ( )		621404	1					
ANR	624016	Argument	lastTempStack -> back ( )		621404	0					
ANR	624017	CallExpression	lastTempStack -> back ( )		621404	0					
ANR	624018	Callee	lastTempStack -> back		621404	0					
ANR	624019	PtrMemberAccess	lastTempStack -> back		621404	0					
ANR	624020	Identifier	lastTempStack		621404	0					
ANR	624021	Identifier	back		621404	1					
ANR	624022	ArgumentList			621404	1					
ANR	624023	ExpressionStatement	lastTempStack -> pop_back ( )	3038:8:89263:89288	621404	1	True				
ANR	624024	CallExpression	lastTempStack -> pop_back ( )		621404	0					
ANR	624025	Callee	lastTempStack -> pop_back		621404	0					
ANR	624026	PtrMemberAccess	lastTempStack -> pop_back		621404	0					
ANR	624027	Identifier	lastTempStack		621404	0					
ANR	624028	Identifier	pop_back		621404	1					
ANR	624029	ArgumentList			621404	1					
ANR	624030	IfStatement	if ( ! closingBraceReached )		621404	2					
ANR	624031	Condition	! closingBraceReached	3040:11:89310:89329	621404	0	True				
ANR	624032	UnaryOperationExpression	! closingBraceReached		621404	0					
ANR	624033	UnaryOperator	!		621404	0					
ANR	624034	Identifier	closingBraceReached		621404	1					
ANR	624035	ExpressionStatement	indentCount += restackSize	3041:8:89340:89366	621404	1	True				
ANR	624036	AssignmentExpression	indentCount += restackSize		621404	0		+=			
ANR	624037	Identifier	indentCount		621404	0					
ANR	624038	Identifier	restackSize		621404	1					
ANR	624039	ElseStatement	else		621404	0					
ANR	624040	IfStatement	if ( newHeader == & AS_CATCH || newHeader == & AS_FINALLY )		621404	0					
ANR	624041	Condition	newHeader == & AS_CATCH || newHeader == & AS_FINALLY	3046:13:89461:89510	621404	0	True				
ANR	624042	OrExpression	newHeader == & AS_CATCH || newHeader == & AS_FINALLY		621404	0		||			
ANR	624043	EqualityExpression	newHeader == & AS_CATCH		621404	0		==			
ANR	624044	Identifier	newHeader		621404	0					
ANR	624045	UnaryOperationExpression	& AS_CATCH		621404	1					
ANR	624046	UnaryOperator	&		621404	0					
ANR	624047	Identifier	AS_CATCH		621404	1					
ANR	624048	EqualityExpression	newHeader == & AS_FINALLY		621404	1		==			
ANR	624049	Identifier	newHeader		621404	0					
ANR	624050	UnaryOperationExpression	& AS_FINALLY		621404	1					
ANR	624051	UnaryOperator	&		621404	0					
ANR	624052	Identifier	AS_FINALLY		621404	1					
ANR	624053	CompoundStatement		597:4:17641:17641	621404	1					
ANR	624054	IfStatement	if ( lastTempStack != nullptr )		621404	0					
ANR	624055	Condition	lastTempStack != nullptr	3048:9:89528:89551	621404	0	True				
ANR	624056	EqualityExpression	lastTempStack != nullptr		621404	0		!=			
ANR	624057	Identifier	lastTempStack		621404	0					
ANR	624058	Identifier	nullptr		621404	1					
ANR	624059	CompoundStatement		600:6:17691:17740	621404	1					
ANR	624060	IdentifierDeclStatement	"int indexOfTry = indexOf ( * lastTempStack , & AS_TRY ) ;"	3050:6:89567:89616	621404	0	True				
ANR	624061	IdentifierDecl	"indexOfTry = indexOf ( * lastTempStack , & AS_TRY )"		621404	0					
ANR	624062	IdentifierDeclType	int		621404	0					
ANR	624063	Identifier	indexOfTry		621404	1					
ANR	624064	AssignmentExpression	"indexOfTry = indexOf ( * lastTempStack , & AS_TRY )"		621404	2		=			
ANR	624065	Identifier	indexOfTry		621404	0					
ANR	624066	CallExpression	"indexOf ( * lastTempStack , & AS_TRY )"		621404	1					
ANR	624067	Callee	indexOf		621404	0					
ANR	624068	Identifier	indexOf		621404	0					
ANR	624069	ArgumentList	* lastTempStack		621404	1					
ANR	624070	Argument	* lastTempStack		621404	0					
ANR	624071	UnaryOperationExpression	* lastTempStack		621404	0					
ANR	624072	UnaryOperator	*		621404	0					
ANR	624073	Identifier	lastTempStack		621404	1					
ANR	624074	Argument	& AS_TRY		621404	1					
ANR	624075	UnaryOperationExpression	& AS_TRY		621404	0					
ANR	624076	UnaryOperator	&		621404	0					
ANR	624077	Identifier	AS_TRY		621404	1					
ANR	624078	IfStatement	if ( indexOfTry == - 1 )		621404	1					
ANR	624079	Condition	indexOfTry == - 1	3051:10:89628:89643	621404	0	True				
ANR	624080	EqualityExpression	indexOfTry == - 1		621404	0		==			
ANR	624081	Identifier	indexOfTry		621404	0					
ANR	624082	UnaryOperationExpression	- 1		621404	1					
ANR	624083	UnaryOperator	-		621404	0					
ANR	624084	PrimaryExpression	1		621404	1					
ANR	624085	ExpressionStatement	"indexOfTry = indexOf ( * lastTempStack , & AS_CATCH )"	3052:7:89653:89700	621404	1	True				
ANR	624086	AssignmentExpression	"indexOfTry = indexOf ( * lastTempStack , & AS_CATCH )"		621404	0		=			
ANR	624087	Identifier	indexOfTry		621404	0					
ANR	624088	CallExpression	"indexOf ( * lastTempStack , & AS_CATCH )"		621404	1					
ANR	624089	Callee	indexOf		621404	0					
ANR	624090	Identifier	indexOf		621404	0					
ANR	624091	ArgumentList	* lastTempStack		621404	1					
ANR	624092	Argument	* lastTempStack		621404	0					
ANR	624093	UnaryOperationExpression	* lastTempStack		621404	0					
ANR	624094	UnaryOperator	*		621404	0					
ANR	624095	Identifier	lastTempStack		621404	1					
ANR	624096	Argument	& AS_CATCH		621404	1					
ANR	624097	UnaryOperationExpression	& AS_CATCH		621404	0					
ANR	624098	UnaryOperator	&		621404	0					
ANR	624099	Identifier	AS_CATCH		621404	1					
ANR	624100	IfStatement	if ( indexOfTry != - 1 )		621404	2					
ANR	624101	Condition	indexOfTry != - 1	3053:10:89712:89727	621404	0	True				
ANR	624102	EqualityExpression	indexOfTry != - 1		621404	0		!=			
ANR	624103	Identifier	indexOfTry		621404	0					
ANR	624104	UnaryOperationExpression	- 1		621404	1					
ANR	624105	UnaryOperator	-		621404	0					
ANR	624106	PrimaryExpression	1		621404	1					
ANR	624107	CompoundStatement		607:7:18007:18063	621404	1					
ANR	624108	IdentifierDeclStatement	int restackSize = lastTempStack -> size ( ) - indexOfTry - 1 ;	3057:7:89883:89939	621404	0	True				
ANR	624109	IdentifierDecl	restackSize = lastTempStack -> size ( ) - indexOfTry - 1		621404	0					
ANR	624110	IdentifierDeclType	int		621404	0					
ANR	624111	Identifier	restackSize		621404	1					
ANR	624112	AssignmentExpression	restackSize = lastTempStack -> size ( ) - indexOfTry - 1		621404	2		=			
ANR	624113	Identifier	restackSize		621404	0					
ANR	624114	AdditiveExpression	lastTempStack -> size ( ) - indexOfTry - 1		621404	1		-			
ANR	624115	CallExpression	lastTempStack -> size ( )		621404	0					
ANR	624116	Callee	lastTempStack -> size		621404	0					
ANR	624117	PtrMemberAccess	lastTempStack -> size		621404	0					
ANR	624118	Identifier	lastTempStack		621404	0					
ANR	624119	Identifier	size		621404	1					
ANR	624120	ArgumentList			621404	1					
ANR	624121	AdditiveExpression	indexOfTry - 1		621404	1		-			
ANR	624122	Identifier	indexOfTry		621404	0					
ANR	624123	PrimaryExpression	1		621404	1					
ANR	624124	ForStatement	for ( int r = 0 ; r < restackSize ; r ++ )		621404	1					
ANR	624125	ForInit	int r = 0 ;	3058:12:89953:89962	621404	0	True				
ANR	624126	IdentifierDeclStatement	int r = 0 ;		621404	0					
ANR	624127	IdentifierDecl	r = 0		621404	0					
ANR	624128	IdentifierDeclType	int		621404	0					
ANR	624129	Identifier	r		621404	1					
ANR	624130	AssignmentExpression	r = 0		621404	2		=			
ANR	624131	Identifier	r		621404	0					
ANR	624132	PrimaryExpression	0		621404	1					
ANR	624133	Condition	r < restackSize	3058:23:89964:89978	621404	1	True				
ANR	624134	RelationalExpression	r < restackSize		621404	0		<			
ANR	624135	Identifier	r		621404	0					
ANR	624136	Identifier	restackSize		621404	1					
ANR	624137	PostIncDecOperationExpression	r ++	3058:40:89981:89983	621404	2	True				
ANR	624138	Identifier	r		621404	0					
ANR	624139	IncDec	++		621404	1					
ANR	624140	CompoundStatement		609:7:18117:18117	621404	3					
ANR	624141	ExpressionStatement	headerStack -> emplace_back ( lastTempStack -> back ( ) )	3060:8:90003:90051	621404	0	True				
ANR	624142	CallExpression	headerStack -> emplace_back ( lastTempStack -> back ( ) )		621404	0					
ANR	624143	Callee	headerStack -> emplace_back		621404	0					
ANR	624144	PtrMemberAccess	headerStack -> emplace_back		621404	0					
ANR	624145	Identifier	headerStack		621404	0					
ANR	624146	Identifier	emplace_back		621404	1					
ANR	624147	ArgumentList	lastTempStack -> back ( )		621404	1					
ANR	624148	Argument	lastTempStack -> back ( )		621404	0					
ANR	624149	CallExpression	lastTempStack -> back ( )		621404	0					
ANR	624150	Callee	lastTempStack -> back		621404	0					
ANR	624151	PtrMemberAccess	lastTempStack -> back		621404	0					
ANR	624152	Identifier	lastTempStack		621404	0					
ANR	624153	Identifier	back		621404	1					
ANR	624154	ArgumentList			621404	1					
ANR	624155	ExpressionStatement	lastTempStack -> pop_back ( )	3061:8:90061:90086	621404	1	True				
ANR	624156	CallExpression	lastTempStack -> pop_back ( )		621404	0					
ANR	624157	Callee	lastTempStack -> pop_back		621404	0					
ANR	624158	PtrMemberAccess	lastTempStack -> pop_back		621404	0					
ANR	624159	Identifier	lastTempStack		621404	0					
ANR	624160	Identifier	pop_back		621404	1					
ANR	624161	ArgumentList			621404	1					
ANR	624162	IfStatement	if ( ! closingBraceReached )		621404	2					
ANR	624163	Condition	! closingBraceReached	3064:11:90109:90128	621404	0	True				
ANR	624164	UnaryOperationExpression	! closingBraceReached		621404	0					
ANR	624165	UnaryOperator	!		621404	0					
ANR	624166	Identifier	closingBraceReached		621404	1					
ANR	624167	ExpressionStatement	indentCount += restackSize	3065:8:90139:90165	621404	1	True				
ANR	624168	AssignmentExpression	indentCount += restackSize		621404	0		+=			
ANR	624169	Identifier	indentCount		621404	0					
ANR	624170	Identifier	restackSize		621404	1					
ANR	624171	ElseStatement	else		621404	0					
ANR	624172	IfStatement	if ( newHeader == & AS_CASE )		621404	0					
ANR	624173	Condition	newHeader == & AS_CASE	3069:13:90201:90221	621404	0	True				
ANR	624174	EqualityExpression	newHeader == & AS_CASE		621404	0		==			
ANR	624175	Identifier	newHeader		621404	0					
ANR	624176	UnaryOperationExpression	& AS_CASE		621404	1					
ANR	624177	UnaryOperator	&		621404	0					
ANR	624178	Identifier	AS_CASE		621404	1					
ANR	624179	CompoundStatement		620:4:18352:18352	621404	1					
ANR	624180	ExpressionStatement	isInCase = true	3071:5:90235:90250	621404	0	True				
ANR	624181	AssignmentExpression	isInCase = true		621404	0		=			
ANR	624182	Identifier	isInCase		621404	0					
ANR	624183	Identifier	true		621404	1					
ANR	624184	IfStatement	if ( ! haveCaseIndent )		621404	1					
ANR	624185	Condition	! haveCaseIndent	3072:9:90261:90275	621404	0	True				
ANR	624186	UnaryOperationExpression	! haveCaseIndent		621404	0					
ANR	624187	UnaryOperator	!		621404	0					
ANR	624188	Identifier	haveCaseIndent		621404	1					
ANR	624189	CompoundStatement		623:5:18407:18407	621404	1					
ANR	624190	ExpressionStatement	haveCaseIndent = true	3074:6:90291:90312	621404	0	True				
ANR	624191	AssignmentExpression	haveCaseIndent = true		621404	0		=			
ANR	624192	Identifier	haveCaseIndent		621404	0					
ANR	624193	Identifier	true		621404	1					
ANR	624194	IfStatement	if ( ! lineBeginsWithOpenBrace )		621404	1					
ANR	624195	Condition	! lineBeginsWithOpenBrace	3075:10:90324:90347	621404	0	True				
ANR	624196	UnaryOperationExpression	! lineBeginsWithOpenBrace		621404	0					
ANR	624197	UnaryOperator	!		621404	0					
ANR	624198	Identifier	lineBeginsWithOpenBrace		621404	1					
ANR	624199	ExpressionStatement	-- indentCount	3076:7:90357:90370	621404	1	True				
ANR	624200	UnaryExpression	-- indentCount		621404	0					
ANR	624201	IncDec	--		621404	0					
ANR	624202	Identifier	indentCount		621404	1					
ANR	624203	ElseStatement	else		621404	0					
ANR	624204	IfStatement	if ( newHeader == & AS_DEFAULT )		621404	0					
ANR	624205	Condition	newHeader == & AS_DEFAULT	3079:13:90398:90421	621404	0	True				
ANR	624206	EqualityExpression	newHeader == & AS_DEFAULT		621404	0		==			
ANR	624207	Identifier	newHeader		621404	0					
ANR	624208	UnaryOperationExpression	& AS_DEFAULT		621404	1					
ANR	624209	UnaryOperator	&		621404	0					
ANR	624210	Identifier	AS_DEFAULT		621404	1					
ANR	624211	CompoundStatement		630:4:18552:18552	621404	1					
ANR	624212	ExpressionStatement	isInCase = true	3081:5:90435:90450	621404	0	True				
ANR	624213	AssignmentExpression	isInCase = true		621404	0		=			
ANR	624214	Identifier	isInCase		621404	0					
ANR	624215	Identifier	true		621404	1					
ANR	624216	ExpressionStatement	-- indentCount	3082:5:90457:90470	621404	1	True				
ANR	624217	UnaryExpression	-- indentCount		621404	0					
ANR	624218	IncDec	--		621404	0					
ANR	624219	Identifier	indentCount		621404	1					
ANR	624220	ElseStatement	else		621404	0					
ANR	624221	IfStatement	if ( newHeader == & AS_STATIC || newHeader == & AS_SYNCHRONIZED )		621404	0					
ANR	624222	Condition	newHeader == & AS_STATIC || newHeader == & AS_SYNCHRONIZED	3084:13:90491:90559	621404	0	True				
ANR	624223	OrExpression	newHeader == & AS_STATIC || newHeader == & AS_SYNCHRONIZED		621404	0		||			
ANR	624224	EqualityExpression	newHeader == & AS_STATIC		621404	0		==			
ANR	624225	Identifier	newHeader		621404	0					
ANR	624226	UnaryOperationExpression	& AS_STATIC		621404	1					
ANR	624227	UnaryOperator	&		621404	0					
ANR	624228	Identifier	AS_STATIC		621404	1					
ANR	624229	EqualityExpression	newHeader == & AS_SYNCHRONIZED		621404	1		==			
ANR	624230	Identifier	newHeader		621404	0					
ANR	624231	UnaryOperationExpression	& AS_SYNCHRONIZED		621404	1					
ANR	624232	UnaryOperator	&		621404	0					
ANR	624233	Identifier	AS_SYNCHRONIZED		621404	1					
ANR	624234	CompoundStatement		636:4:18690:18690	621404	1					
ANR	624235	IfStatement	if ( ! headerStack -> empty ( ) && ( headerStack -> back ( ) == & AS_STATIC || headerStack -> back ( ) == & AS_SYNCHRONIZED ) )		621404	0					
ANR	624236	Condition	! headerStack -> empty ( ) && ( headerStack -> back ( ) == & AS_STATIC || headerStack -> back ( ) == & AS_SYNCHRONIZED )	3087:9:90577:90709	621404	0	True				
ANR	624237	AndExpression	! headerStack -> empty ( ) && ( headerStack -> back ( ) == & AS_STATIC || headerStack -> back ( ) == & AS_SYNCHRONIZED )		621404	0		&&			
ANR	624238	UnaryOperationExpression	! headerStack -> empty ( )		621404	0					
ANR	624239	UnaryOperator	!		621404	0					
ANR	624240	CallExpression	headerStack -> empty ( )		621404	1					
ANR	624241	Callee	headerStack -> empty		621404	0					
ANR	624242	PtrMemberAccess	headerStack -> empty		621404	0					
ANR	624243	Identifier	headerStack		621404	0					
ANR	624244	Identifier	empty		621404	1					
ANR	624245	ArgumentList			621404	1					
ANR	624246	OrExpression	headerStack -> back ( ) == & AS_STATIC || headerStack -> back ( ) == & AS_SYNCHRONIZED		621404	1		||			
ANR	624247	EqualityExpression	headerStack -> back ( ) == & AS_STATIC		621404	0		==			
ANR	624248	CallExpression	headerStack -> back ( )		621404	0					
ANR	624249	Callee	headerStack -> back		621404	0					
ANR	624250	PtrMemberAccess	headerStack -> back		621404	0					
ANR	624251	Identifier	headerStack		621404	0					
ANR	624252	Identifier	back		621404	1					
ANR	624253	ArgumentList			621404	1					
ANR	624254	UnaryOperationExpression	& AS_STATIC		621404	1					
ANR	624255	UnaryOperator	&		621404	0					
ANR	624256	Identifier	AS_STATIC		621404	1					
ANR	624257	EqualityExpression	headerStack -> back ( ) == & AS_SYNCHRONIZED		621404	1		==			
ANR	624258	CallExpression	headerStack -> back ( )		621404	0					
ANR	624259	Callee	headerStack -> back		621404	0					
ANR	624260	PtrMemberAccess	headerStack -> back		621404	0					
ANR	624261	Identifier	headerStack		621404	0					
ANR	624262	Identifier	back		621404	1					
ANR	624263	ArgumentList			621404	1					
ANR	624264	UnaryOperationExpression	& AS_SYNCHRONIZED		621404	1					
ANR	624265	UnaryOperator	&		621404	0					
ANR	624266	Identifier	AS_SYNCHRONIZED		621404	1					
ANR	624267	CompoundStatement		640:5:18841:18841	621404	1					
ANR	624268	ExpressionStatement	isIndentableHeader = false	3091:6:90725:90751	621404	0	True				
ANR	624269	AssignmentExpression	isIndentableHeader = false		621404	0		=			
ANR	624270	Identifier	isIndentableHeader		621404	0					
ANR	624271	Identifier	false		621404	1					
ANR	624272	ElseStatement	else		621404	0					
ANR	624273	CompoundStatement		644:5:18899:18899	621404	0					
ANR	624274	ExpressionStatement	isIndentableHeader = false	3095:6:90783:90809	621404	0	True				
ANR	624275	AssignmentExpression	isIndentableHeader = false		621404	0		=			
ANR	624276	Identifier	isIndentableHeader		621404	0					
ANR	624277	Identifier	false		621404	1					
ANR	624278	ExpressionStatement	probationHeader = newHeader	3096:6:90817:90844	621404	1	True				
ANR	624279	AssignmentExpression	probationHeader = newHeader		621404	0		=			
ANR	624280	Identifier	probationHeader		621404	0					
ANR	624281	Identifier	newHeader		621404	1					
ANR	624282	ElseStatement	else		621404	0					
ANR	624283	IfStatement	if ( newHeader == & AS_TEMPLATE )		621404	0					
ANR	624284	Condition	newHeader == & AS_TEMPLATE	3099:13:90872:90896	621404	0	True				
ANR	624285	EqualityExpression	newHeader == & AS_TEMPLATE		621404	0		==			
ANR	624286	Identifier	newHeader		621404	0					
ANR	624287	UnaryOperationExpression	& AS_TEMPLATE		621404	1					
ANR	624288	UnaryOperator	&		621404	0					
ANR	624289	Identifier	AS_TEMPLATE		621404	1					
ANR	624290	CompoundStatement		650:4:19027:19027	621404	1					
ANR	624291	ExpressionStatement	isInTemplate = true	3101:5:90910:90929	621404	0	True				
ANR	624292	AssignmentExpression	isInTemplate = true		621404	0		=			
ANR	624293	Identifier	isInTemplate		621404	0					
ANR	624294	Identifier	true		621404	1					
ANR	624295	ExpressionStatement	isIndentableHeader = false	3102:5:90936:90962	621404	1	True				
ANR	624296	AssignmentExpression	isIndentableHeader = false		621404	0		=			
ANR	624297	Identifier	isIndentableHeader		621404	0					
ANR	624298	Identifier	false		621404	1					
ANR	624299	IfStatement	if ( isIndentableHeader )		621404	6					
ANR	624300	Condition	isIndentableHeader	3105:8:90979:90996	621404	0	True				
ANR	624301	Identifier	isIndentableHeader		621404	0					
ANR	624302	CompoundStatement		656:4:19127:19127	621404	1					
ANR	624303	ExpressionStatement	headerStack -> emplace_back ( newHeader )	3107:5:91010:91046	621404	0	True				
ANR	624304	CallExpression	headerStack -> emplace_back ( newHeader )		621404	0					
ANR	624305	Callee	headerStack -> emplace_back		621404	0					
ANR	624306	PtrMemberAccess	headerStack -> emplace_back		621404	0					
ANR	624307	Identifier	headerStack		621404	0					
ANR	624308	Identifier	emplace_back		621404	1					
ANR	624309	ArgumentList	newHeader		621404	1					
ANR	624310	Argument	newHeader		621404	0					
ANR	624311	Identifier	newHeader		621404	0					
ANR	624312	ExpressionStatement	isContinuation = false	3108:5:91053:91075	621404	1	True				
ANR	624313	AssignmentExpression	isContinuation = false		621404	0		=			
ANR	624314	Identifier	isContinuation		621404	0					
ANR	624315	Identifier	false		621404	1					
ANR	624316	IfStatement	"if ( indexOf ( * nonParenHeaders , newHeader ) == - 1 )"		621404	2					
ANR	624317	Condition	"indexOf ( * nonParenHeaders , newHeader ) == - 1"	3109:9:91086:91127	621404	0	True				
ANR	624318	EqualityExpression	"indexOf ( * nonParenHeaders , newHeader ) == - 1"		621404	0		==			
ANR	624319	CallExpression	"indexOf ( * nonParenHeaders , newHeader )"		621404	0					
ANR	624320	Callee	indexOf		621404	0					
ANR	624321	Identifier	indexOf		621404	0					
ANR	624322	ArgumentList	* nonParenHeaders		621404	1					
ANR	624323	Argument	* nonParenHeaders		621404	0					
ANR	624324	UnaryOperationExpression	* nonParenHeaders		621404	0					
ANR	624325	UnaryOperator	*		621404	0					
ANR	624326	Identifier	nonParenHeaders		621404	1					
ANR	624327	Argument	newHeader		621404	1					
ANR	624328	Identifier	newHeader		621404	0					
ANR	624329	UnaryOperationExpression	- 1		621404	1					
ANR	624330	UnaryOperator	-		621404	0					
ANR	624331	PrimaryExpression	1		621404	1					
ANR	624332	CompoundStatement		660:5:19259:19259	621404	1					
ANR	624333	ExpressionStatement	isInConditional = true	3111:6:91143:91165	621404	0	True				
ANR	624334	AssignmentExpression	isInConditional = true		621404	0		=			
ANR	624335	Identifier	isInConditional		621404	0					
ANR	624336	Identifier	true		621404	1					
ANR	624337	ExpressionStatement	lastLineHeader = newHeader	3113:5:91179:91205	621404	3	True				
ANR	624338	AssignmentExpression	lastLineHeader = newHeader		621404	0		=			
ANR	624339	Identifier	lastLineHeader		621404	0					
ANR	624340	Identifier	newHeader		621404	1					
ANR	624341	ElseStatement	else		621404	0					
ANR	624342	ExpressionStatement	isInHeader = false	3116:5:91227:91245	621404	0	True				
ANR	624343	AssignmentExpression	isInHeader = false		621404	0		=			
ANR	624344	Identifier	isInHeader		621404	0					
ANR	624345	Identifier	false		621404	1					
ANR	624346	ExpressionStatement	i += newHeader -> length ( ) - 1	3118:4:91252:91280	621404	7	True				
ANR	624347	AssignmentExpression	i += newHeader -> length ( ) - 1		621404	0		+=			
ANR	624348	Identifier	i		621404	0					
ANR	624349	AdditiveExpression	newHeader -> length ( ) - 1		621404	1		-			
ANR	624350	CallExpression	newHeader -> length ( )		621404	0					
ANR	624351	Callee	newHeader -> length		621404	0					
ANR	624352	PtrMemberAccess	newHeader -> length		621404	0					
ANR	624353	Identifier	newHeader		621404	0					
ANR	624354	Identifier	length		621404	1					
ANR	624355	ArgumentList			621404	1					
ANR	624356	PrimaryExpression	1		621404	1					
ANR	624357	ContinueStatement	continue ;	3120:4:91287:91295	621404	8	True				
ANR	624358	IfStatement	"if ( findHeader ( line , i , preCommandHeaders ) != nullptr )"		621404	3					
ANR	624359	Condition	"findHeader ( line , i , preCommandHeaders ) != nullptr"	3123:7:91335:91383	621404	0	True				
ANR	624360	EqualityExpression	"findHeader ( line , i , preCommandHeaders ) != nullptr"		621404	0		!=			
ANR	624361	CallExpression	"findHeader ( line , i , preCommandHeaders )"		621404	0					
ANR	624362	Callee	findHeader		621404	0					
ANR	624363	Identifier	findHeader		621404	0					
ANR	624364	ArgumentList	line		621404	1					
ANR	624365	Argument	line		621404	0					
ANR	624366	Identifier	line		621404	0					
ANR	624367	Argument	i		621404	1					
ANR	624368	Identifier	i		621404	0					
ANR	624369	Argument	preCommandHeaders		621404	2					
ANR	624370	Identifier	preCommandHeaders		621404	0					
ANR	624371	Identifier	nullptr		621404	1					
ANR	624372	ExpressionStatement	foundPreCommandHeader = true	3124:4:91390:91418	621404	1	True				
ANR	624373	AssignmentExpression	foundPreCommandHeader = true		621404	0		=			
ANR	624374	Identifier	foundPreCommandHeader		621404	0					
ANR	624375	Identifier	true		621404	1					
ANR	624376	IfStatement	"if ( isCStyle ( ) && findKeyword ( line , i , AS_NS_DURING ) )"		621404	4					
ANR	624377	Condition	"isCStyle ( ) && findKeyword ( line , i , AS_NS_DURING )"	3127:7:91487:91534	621404	0	True				
ANR	624378	AndExpression	"isCStyle ( ) && findKeyword ( line , i , AS_NS_DURING )"		621404	0		&&			
ANR	624379	CallExpression	isCStyle ( )		621404	0					
ANR	624380	Callee	isCStyle		621404	0					
ANR	624381	Identifier	isCStyle		621404	0					
ANR	624382	ArgumentList			621404	1					
ANR	624383	CallExpression	"findKeyword ( line , i , AS_NS_DURING )"		621404	1					
ANR	624384	Callee	findKeyword		621404	0					
ANR	624385	Identifier	findKeyword		621404	0					
ANR	624386	ArgumentList	line		621404	1					
ANR	624387	Argument	line		621404	0					
ANR	624388	Identifier	line		621404	0					
ANR	624389	Argument	i		621404	1					
ANR	624390	Identifier	i		621404	0					
ANR	624391	Argument	AS_NS_DURING		621404	2					
ANR	624392	Identifier	AS_NS_DURING		621404	0					
ANR	624393	ExpressionStatement	foundPreCommandMacro = true	3128:4:91541:91568	621404	1	True				
ANR	624394	AssignmentExpression	foundPreCommandMacro = true		621404	0		=			
ANR	624395	Identifier	foundPreCommandMacro		621404	0					
ANR	624396	Identifier	true		621404	1					
ANR	624397	IfStatement	"if ( isCStyle ( ) && findKeyword ( line , i , AS_NS_HANDLER ) )"		621404	5					
ANR	624398	Condition	"isCStyle ( ) && findKeyword ( line , i , AS_NS_HANDLER )"	3129:7:91577:91625	621404	0	True				
ANR	624399	AndExpression	"isCStyle ( ) && findKeyword ( line , i , AS_NS_HANDLER )"		621404	0		&&			
ANR	624400	CallExpression	isCStyle ( )		621404	0					
ANR	624401	Callee	isCStyle		621404	0					
ANR	624402	Identifier	isCStyle		621404	0					
ANR	624403	ArgumentList			621404	1					
ANR	624404	CallExpression	"findKeyword ( line , i , AS_NS_HANDLER )"		621404	1					
ANR	624405	Callee	findKeyword		621404	0					
ANR	624406	Identifier	findKeyword		621404	0					
ANR	624407	ArgumentList	line		621404	1					
ANR	624408	Argument	line		621404	0					
ANR	624409	Identifier	line		621404	0					
ANR	624410	Argument	i		621404	1					
ANR	624411	Identifier	i		621404	0					
ANR	624412	Argument	AS_NS_HANDLER		621404	2					
ANR	624413	Identifier	AS_NS_HANDLER		621404	0					
ANR	624414	ExpressionStatement	foundPreCommandMacro = true	3130:4:91632:91659	621404	1	True				
ANR	624415	AssignmentExpression	foundPreCommandMacro = true		621404	0		=			
ANR	624416	Identifier	foundPreCommandMacro		621404	0					
ANR	624417	Identifier	true		621404	1					
ANR	624418	IfStatement	"if ( parenDepth == 0 && findKeyword ( line , i , AS_ENUM ) )"		621404	6					
ANR	624419	Condition	"parenDepth == 0 && findKeyword ( line , i , AS_ENUM )"	3132:7:91669:91716	621404	0	True				
ANR	624420	AndExpression	"parenDepth == 0 && findKeyword ( line , i , AS_ENUM )"		621404	0		&&			
ANR	624421	EqualityExpression	parenDepth == 0		621404	0		==			
ANR	624422	Identifier	parenDepth		621404	0					
ANR	624423	PrimaryExpression	0		621404	1					
ANR	624424	CallExpression	"findKeyword ( line , i , AS_ENUM )"		621404	1					
ANR	624425	Callee	findKeyword		621404	0					
ANR	624426	Identifier	findKeyword		621404	0					
ANR	624427	ArgumentList	line		621404	1					
ANR	624428	Argument	line		621404	0					
ANR	624429	Identifier	line		621404	0					
ANR	624430	Argument	i		621404	1					
ANR	624431	Identifier	i		621404	0					
ANR	624432	Argument	AS_ENUM		621404	2					
ANR	624433	Identifier	AS_ENUM		621404	0					
ANR	624434	ExpressionStatement	isInEnum = true	3133:4:91723:91738	621404	1	True				
ANR	624435	AssignmentExpression	isInEnum = true		621404	0		=			
ANR	624436	Identifier	isInEnum		621404	0					
ANR	624437	Identifier	true		621404	1					
ANR	624438	IfStatement	"if ( isSharpStyle ( ) && findKeyword ( line , i , AS_LET ) )"		621404	7					
ANR	624439	Condition	"isSharpStyle ( ) && findKeyword ( line , i , AS_LET )"	3135:7:91748:91793	621404	0	True				
ANR	624440	AndExpression	"isSharpStyle ( ) && findKeyword ( line , i , AS_LET )"		621404	0		&&			
ANR	624441	CallExpression	isSharpStyle ( )		621404	0					
ANR	624442	Callee	isSharpStyle		621404	0					
ANR	624443	Identifier	isSharpStyle		621404	0					
ANR	624444	ArgumentList			621404	1					
ANR	624445	CallExpression	"findKeyword ( line , i , AS_LET )"		621404	1					
ANR	624446	Callee	findKeyword		621404	0					
ANR	624447	Identifier	findKeyword		621404	0					
ANR	624448	ArgumentList	line		621404	1					
ANR	624449	Argument	line		621404	0					
ANR	624450	Identifier	line		621404	0					
ANR	624451	Argument	i		621404	1					
ANR	624452	Identifier	i		621404	0					
ANR	624453	Argument	AS_LET		621404	2					
ANR	624454	Identifier	AS_LET		621404	0					
ANR	624455	ExpressionStatement	isInLet = true	3136:4:91800:91814	621404	1	True				
ANR	624456	AssignmentExpression	isInLet = true		621404	0		=			
ANR	624457	Identifier	isInLet		621404	0					
ANR	624458	Identifier	true		621404	1					
ANR	624459	IfStatement	if ( ch == '?' )		621404	19					
ANR	624460	Condition	ch == '?'	3140:6:91851:91859	621404	0	True				
ANR	624461	EqualityExpression	ch == '?'		621404	0		==			
ANR	624462	Identifier	ch		621404	0					
ANR	624463	PrimaryExpression	'?'		621404	1					
ANR	624464	ExpressionStatement	isInQuestion = true	3141:3:91865:91884	621404	1	True				
ANR	624465	AssignmentExpression	isInQuestion = true		621404	0		=			
ANR	624466	Identifier	isInQuestion		621404	0					
ANR	624467	Identifier	true		621404	1					
ANR	624468	IfStatement	if ( ch == ':' )		621404	20					
ANR	624469	Condition	ch == ':'	3144:6:91925:91933	621404	0	True				
ANR	624470	EqualityExpression	ch == ':'		621404	0		==			
ANR	624471	Identifier	ch		621404	0					
ANR	624472	PrimaryExpression	':'		621404	1					
ANR	624473	CompoundStatement		695:2:20062:20062	621404	1					
ANR	624474	IfStatement	if ( line . length ( ) > i + 1 && line [ i + 1 ] == ':' )		621404	0					
ANR	624475	Condition	line . length ( ) > i + 1 && line [ i + 1 ] == ':'	3146:7:91947:91989	621404	0	True				
ANR	624476	AndExpression	line . length ( ) > i + 1 && line [ i + 1 ] == ':'		621404	0		&&			
ANR	624477	RelationalExpression	line . length ( ) > i + 1		621404	0		>			
ANR	624478	CallExpression	line . length ( )		621404	0					
ANR	624479	Callee	line . length		621404	0					
ANR	624480	MemberAccess	line . length		621404	0					
ANR	624481	Identifier	line		621404	0					
ANR	624482	Identifier	length		621404	1					
ANR	624483	ArgumentList			621404	1					
ANR	624484	AdditiveExpression	i + 1		621404	1		+			
ANR	624485	Identifier	i		621404	0					
ANR	624486	PrimaryExpression	1		621404	1					
ANR	624487	EqualityExpression	line [ i + 1 ] == ':'		621404	1		==			
ANR	624488	ArrayIndexing	line [ i + 1 ]		621404	0					
ANR	624489	Identifier	line		621404	0					
ANR	624490	AdditiveExpression	i + 1		621404	1		+			
ANR	624491	Identifier	i		621404	0					
ANR	624492	PrimaryExpression	1		621404	1					
ANR	624493	PrimaryExpression	':'		621404	1					
ANR	624494	CompoundStatement		697:3:20134:20134	621404	1					
ANR	624495	ExpressionStatement	++ i	3148:4:92016:92019	621404	0	True				
ANR	624496	UnaryExpression	++ i		621404	0					
ANR	624497	IncDec	++		621404	0					
ANR	624498	Identifier	i		621404	1					
ANR	624499	ContinueStatement	continue ;	3149:4:92025:92033	621404	1	True				
ANR	624500	ElseStatement	else		621404	0					
ANR	624501	IfStatement	if ( isInQuestion )		621404	0					
ANR	624502	Condition	isInQuestion	3151:12:92052:92063	621404	0	True				
ANR	624503	Identifier	isInQuestion		621404	0					
ANR	624504	CompoundStatement		702:3:20193:20193	621404	1					
ANR	624505	ElseStatement	else		621404	0					
ANR	624506	IfStatement	if ( parenDepth > 0 )		621404	0					
ANR	624507	Condition	parenDepth > 0	3155:12:92114:92127	621404	0	True				
ANR	624508	RelationalExpression	parenDepth > 0		621404	0		>			
ANR	624509	Identifier	parenDepth		621404	0					
ANR	624510	PrimaryExpression	0		621404	1					
ANR	624511	CompoundStatement		706:3:20257:20257	621404	1					
ANR	624512	ElseStatement	else		621404	0					
ANR	624513	IfStatement	if ( isInEnum )		621404	0					
ANR	624514	Condition	isInEnum	3160:12:92235:92242	621404	0	True				
ANR	624515	Identifier	isInEnum		621404	0					
ANR	624516	CompoundStatement		711:3:20372:20372	621404	1					
ANR	624517	ExpressionStatement	isInEnumTypeID = true	3163:4:92292:92313	621404	0	True				
ANR	624518	AssignmentExpression	isInEnumTypeID = true		621404	0		=			
ANR	624519	Identifier	isInEnumTypeID		621404	0					
ANR	624520	Identifier	true		621404	1					
ANR	624521	IfStatement	if ( i == 0 )		621404	1					
ANR	624522	Condition	i == 0	3164:8:92323:92328	621404	0	True				
ANR	624523	EqualityExpression	i == 0		621404	0		==			
ANR	624524	Identifier	i		621404	0					
ANR	624525	PrimaryExpression	0		621404	1					
ANR	624526	ExpressionStatement	indentCount += classInitializerIndents	3165:5:92336:92374	621404	1	True				
ANR	624527	AssignmentExpression	indentCount += classInitializerIndents		621404	0		+=			
ANR	624528	Identifier	indentCount		621404	0					
ANR	624529	Identifier	classInitializerIndents		621404	1					
ANR	624530	ElseStatement	else		621404	0					
ANR	624531	IfStatement	if ( isCStyle ( ) && ! isInCase && ( prevNonSpaceCh == ')' || foundPreCommandHeader ) )		621404	0					
ANR	624532	Condition	isCStyle ( ) && ! isInCase && ( prevNonSpaceCh == ')' || foundPreCommandHeader )	3167:12:92393:92491	621404	0	True				
ANR	624533	AndExpression	isCStyle ( ) && ! isInCase && ( prevNonSpaceCh == ')' || foundPreCommandHeader )		621404	0		&&			
ANR	624534	CallExpression	isCStyle ( )		621404	0					
ANR	624535	Callee	isCStyle		621404	0					
ANR	624536	Identifier	isCStyle		621404	0					
ANR	624537	ArgumentList			621404	1					
ANR	624538	AndExpression	! isInCase && ( prevNonSpaceCh == ')' || foundPreCommandHeader )		621404	1		&&			
ANR	624539	UnaryOperationExpression	! isInCase		621404	0					
ANR	624540	UnaryOperator	!		621404	0					
ANR	624541	Identifier	isInCase		621404	1					
ANR	624542	OrExpression	prevNonSpaceCh == ')' || foundPreCommandHeader		621404	1		||			
ANR	624543	EqualityExpression	prevNonSpaceCh == ')'		621404	0		==			
ANR	624544	Identifier	prevNonSpaceCh		621404	0					
ANR	624545	PrimaryExpression	')'		621404	1					
ANR	624546	Identifier	foundPreCommandHeader		621404	1					
ANR	624547	CompoundStatement		720:3:20621:20621	621404	1					
ANR	624548	ExpressionStatement	isInClassInitializer = true	3172:4:92544:92571	621404	0	True				
ANR	624549	AssignmentExpression	isInClassInitializer = true		621404	0		=			
ANR	624550	Identifier	isInClassInitializer		621404	0					
ANR	624551	Identifier	true		621404	1					
ANR	624552	ExpressionStatement	"registerContinuationIndentColon ( line , i , tabIncrementIn )"	3173:4:92577:92633	621404	1	True				
ANR	624553	CallExpression	"registerContinuationIndentColon ( line , i , tabIncrementIn )"		621404	0					
ANR	624554	Callee	registerContinuationIndentColon		621404	0					
ANR	624555	Identifier	registerContinuationIndentColon		621404	0					
ANR	624556	ArgumentList	line		621404	1					
ANR	624557	Argument	line		621404	0					
ANR	624558	Identifier	line		621404	0					
ANR	624559	Argument	i		621404	1					
ANR	624560	Identifier	i		621404	0					
ANR	624561	Argument	tabIncrementIn		621404	2					
ANR	624562	Identifier	tabIncrementIn		621404	0					
ANR	624563	IfStatement	if ( i == 0 )		621404	2					
ANR	624564	Condition	i == 0	3174:8:92643:92648	621404	0	True				
ANR	624565	EqualityExpression	i == 0		621404	0		==			
ANR	624566	Identifier	i		621404	0					
ANR	624567	PrimaryExpression	0		621404	1					
ANR	624568	ExpressionStatement	indentCount += classInitializerIndents	3175:5:92656:92694	621404	1	True				
ANR	624569	AssignmentExpression	indentCount += classInitializerIndents		621404	0		+=			
ANR	624570	Identifier	indentCount		621404	0					
ANR	624571	Identifier	classInitializerIndents		621404	1					
ANR	624572	ElseStatement	else		621404	0					
ANR	624573	IfStatement	if ( isInClassHeader || isInObjCInterface )		621404	0					
ANR	624574	Condition	isInClassHeader || isInObjCInterface	3177:12:92713:92748	621404	0	True				
ANR	624575	OrExpression	isInClassHeader || isInObjCInterface		621404	0		||			
ANR	624576	Identifier	isInClassHeader		621404	0					
ANR	624577	Identifier	isInObjCInterface		621404	1					
ANR	624578	CompoundStatement		728:3:20878:20878	621404	1					
ANR	624579	ExpressionStatement	isInClassHeaderTab = true	3180:4:92807:92832	621404	0	True				
ANR	624580	AssignmentExpression	isInClassHeaderTab = true		621404	0		=			
ANR	624581	Identifier	isInClassHeaderTab		621404	0					
ANR	624582	Identifier	true		621404	1					
ANR	624583	ExpressionStatement	"registerContinuationIndentColon ( line , i , tabIncrementIn )"	3181:4:92838:92894	621404	1	True				
ANR	624584	CallExpression	"registerContinuationIndentColon ( line , i , tabIncrementIn )"		621404	0					
ANR	624585	Callee	registerContinuationIndentColon		621404	0					
ANR	624586	Identifier	registerContinuationIndentColon		621404	0					
ANR	624587	ArgumentList	line		621404	1					
ANR	624588	Argument	line		621404	0					
ANR	624589	Identifier	line		621404	0					
ANR	624590	Argument	i		621404	1					
ANR	624591	Identifier	i		621404	0					
ANR	624592	Argument	tabIncrementIn		621404	2					
ANR	624593	Identifier	tabIncrementIn		621404	0					
ANR	624594	ElseStatement	else		621404	0					
ANR	624595	IfStatement	if ( isInAsm || isInAsmOneLine || isInAsmBlock )		621404	0					
ANR	624596	Condition	isInAsm || isInAsmOneLine || isInAsmBlock	3183:12:92913:92953	621404	0	True				
ANR	624597	OrExpression	isInAsm || isInAsmOneLine || isInAsmBlock		621404	0		||			
ANR	624598	Identifier	isInAsm		621404	0					
ANR	624599	OrExpression	isInAsmOneLine || isInAsmBlock		621404	1		||			
ANR	624600	Identifier	isInAsmOneLine		621404	0					
ANR	624601	Identifier	isInAsmBlock		621404	1					
ANR	624602	CompoundStatement		734:3:21083:21083	621404	1					
ANR	624603	ElseStatement	else		621404	0					
ANR	624604	IfStatement	"if ( isDigit ( peekNextChar ( line , i ) ) )"		621404	0					
ANR	624605	Condition	"isDigit ( peekNextChar ( line , i ) )"	3187:12:93004:93033	621404	0	True				
ANR	624606	CallExpression	"isDigit ( peekNextChar ( line , i ) )"		621404	0					
ANR	624607	Callee	isDigit		621404	0					
ANR	624608	Identifier	isDigit		621404	0					
ANR	624609	ArgumentList	"peekNextChar ( line , i )"		621404	1					
ANR	624610	Argument	"peekNextChar ( line , i )"		621404	0					
ANR	624611	CallExpression	"peekNextChar ( line , i )"		621404	0					
ANR	624612	Callee	peekNextChar		621404	0					
ANR	624613	Identifier	peekNextChar		621404	0					
ANR	624614	ArgumentList	line		621404	1					
ANR	624615	Argument	line		621404	0					
ANR	624616	Identifier	line		621404	0					
ANR	624617	Argument	i		621404	1					
ANR	624618	Identifier	i		621404	0					
ANR	624619	CompoundStatement		738:3:21163:21163	621404	1					
ANR	624620	ElseStatement	else		621404	0					
ANR	624621	IfStatement	if ( isCStyle ( ) && isInClass && prevNonSpaceCh != ')' )		621404	0					
ANR	624622	Condition	isCStyle ( ) && isInClass && prevNonSpaceCh != ')'	3191:12:93104:93151	621404	0	True				
ANR	624623	AndExpression	isCStyle ( ) && isInClass && prevNonSpaceCh != ')'		621404	0		&&			
ANR	624624	CallExpression	isCStyle ( )		621404	0					
ANR	624625	Callee	isCStyle		621404	0					
ANR	624626	Identifier	isCStyle		621404	0					
ANR	624627	ArgumentList			621404	1					
ANR	624628	AndExpression	isInClass && prevNonSpaceCh != ')'		621404	1		&&			
ANR	624629	Identifier	isInClass		621404	0					
ANR	624630	EqualityExpression	prevNonSpaceCh != ')'		621404	1		!=			
ANR	624631	Identifier	prevNonSpaceCh		621404	0					
ANR	624632	PrimaryExpression	')'		621404	1					
ANR	624633	CompoundStatement		742:3:21281:21281	621404	1					
ANR	624634	ExpressionStatement	-- indentCount	3194:4:93228:93241	621404	0	True				
ANR	624635	UnaryExpression	-- indentCount		621404	0					
ANR	624636	IncDec	--		621404	0					
ANR	624637	Identifier	indentCount		621404	1					
ANR	624638	IfStatement	if ( modifierIndent )		621404	1					
ANR	624639	Condition	modifierIndent	3195:8:93251:93264	621404	0	True				
ANR	624640	Identifier	modifierIndent		621404	0					
ANR	624641	ExpressionStatement	spaceIndentCount += ( indentLength / 2 )	3196:5:93272:93310	621404	1	True				
ANR	624642	AssignmentExpression	spaceIndentCount += ( indentLength / 2 )		621404	0		+=			
ANR	624643	Identifier	spaceIndentCount		621404	0					
ANR	624644	MultiplicativeExpression	indentLength / 2		621404	1		/			
ANR	624645	Identifier	indentLength		621404	0					
ANR	624646	PrimaryExpression	2		621404	1					
ANR	624647	ElseStatement	else		621404	0					
ANR	624648	IfStatement	if ( isCStyle ( ) && ! isInClass && headerStack -> size ( ) >= 2 && ( * headerStack ) [ headerStack -> size ( ) - 2 ] == & AS_CLASS && ( * headerStack ) [ headerStack -> size ( ) - 1 ] == & AS_OPEN_BRACE )		621404	0					
ANR	624649	Condition	isCStyle ( ) && ! isInClass && headerStack -> size ( ) >= 2 && ( * headerStack ) [ headerStack -> size ( ) - 2 ] == & AS_CLASS && ( * headerStack ) [ headerStack -> size ( ) - 1 ] == & AS_OPEN_BRACE	3198:12:93329:93533	621404	0	True				
ANR	624650	AndExpression	isCStyle ( ) && ! isInClass && headerStack -> size ( ) >= 2 && ( * headerStack ) [ headerStack -> size ( ) - 2 ] == & AS_CLASS && ( * headerStack ) [ headerStack -> size ( ) - 1 ] == & AS_OPEN_BRACE		621404	0		&&			
ANR	624651	CallExpression	isCStyle ( )		621404	0					
ANR	624652	Callee	isCStyle		621404	0					
ANR	624653	Identifier	isCStyle		621404	0					
ANR	624654	ArgumentList			621404	1					
ANR	624655	AndExpression	! isInClass && headerStack -> size ( ) >= 2 && ( * headerStack ) [ headerStack -> size ( ) - 2 ] == & AS_CLASS && ( * headerStack ) [ headerStack -> size ( ) - 1 ] == & AS_OPEN_BRACE		621404	1		&&			
ANR	624656	UnaryOperationExpression	! isInClass		621404	0					
ANR	624657	UnaryOperator	!		621404	0					
ANR	624658	Identifier	isInClass		621404	1					
ANR	624659	AndExpression	headerStack -> size ( ) >= 2 && ( * headerStack ) [ headerStack -> size ( ) - 2 ] == & AS_CLASS && ( * headerStack ) [ headerStack -> size ( ) - 1 ] == & AS_OPEN_BRACE		621404	1		&&			
ANR	624660	RelationalExpression	headerStack -> size ( ) >= 2		621404	0		>=			
ANR	624661	CallExpression	headerStack -> size ( )		621404	0					
ANR	624662	Callee	headerStack -> size		621404	0					
ANR	624663	PtrMemberAccess	headerStack -> size		621404	0					
ANR	624664	Identifier	headerStack		621404	0					
ANR	624665	Identifier	size		621404	1					
ANR	624666	ArgumentList			621404	1					
ANR	624667	PrimaryExpression	2		621404	1					
ANR	624668	AndExpression	( * headerStack ) [ headerStack -> size ( ) - 2 ] == & AS_CLASS && ( * headerStack ) [ headerStack -> size ( ) - 1 ] == & AS_OPEN_BRACE		621404	1		&&			
ANR	624669	EqualityExpression	( * headerStack ) [ headerStack -> size ( ) - 2 ] == & AS_CLASS		621404	0		==			
ANR	624670	ArrayIndexing	( * headerStack ) [ headerStack -> size ( ) - 2 ]		621404	0					
ANR	624671	UnaryOperationExpression	* headerStack		621404	0					
ANR	624672	UnaryOperator	*		621404	0					
ANR	624673	Identifier	headerStack		621404	1					
ANR	624674	AdditiveExpression	headerStack -> size ( ) - 2		621404	1		-			
ANR	624675	CallExpression	headerStack -> size ( )		621404	0					
ANR	624676	Callee	headerStack -> size		621404	0					
ANR	624677	PtrMemberAccess	headerStack -> size		621404	0					
ANR	624678	Identifier	headerStack		621404	0					
ANR	624679	Identifier	size		621404	1					
ANR	624680	ArgumentList			621404	1					
ANR	624681	PrimaryExpression	2		621404	1					
ANR	624682	UnaryOperationExpression	& AS_CLASS		621404	1					
ANR	624683	UnaryOperator	&		621404	0					
ANR	624684	Identifier	AS_CLASS		621404	1					
ANR	624685	EqualityExpression	( * headerStack ) [ headerStack -> size ( ) - 1 ] == & AS_OPEN_BRACE		621404	1		==			
ANR	624686	ArrayIndexing	( * headerStack ) [ headerStack -> size ( ) - 1 ]		621404	0					
ANR	624687	UnaryOperationExpression	* headerStack		621404	0					
ANR	624688	UnaryOperator	*		621404	0					
ANR	624689	Identifier	headerStack		621404	1					
ANR	624690	AdditiveExpression	headerStack -> size ( ) - 1		621404	1		-			
ANR	624691	CallExpression	headerStack -> size ( )		621404	0					
ANR	624692	Callee	headerStack -> size		621404	0					
ANR	624693	PtrMemberAccess	headerStack -> size		621404	0					
ANR	624694	Identifier	headerStack		621404	0					
ANR	624695	Identifier	size		621404	1					
ANR	624696	ArgumentList			621404	1					
ANR	624697	PrimaryExpression	1		621404	1					
ANR	624698	UnaryOperationExpression	& AS_OPEN_BRACE		621404	1					
ANR	624699	UnaryOperator	&		621404	0					
ANR	624700	Identifier	AS_OPEN_BRACE		621404	1					
ANR	624701	CompoundStatement		752:3:21663:21663	621404	1					
ANR	624702	ElseStatement	else		621404	0					
ANR	624703	IfStatement	if ( isJavaStyle ( ) && lastLineHeader == & AS_FOR )		621404	0					
ANR	624704	Condition	isJavaStyle ( ) && lastLineHeader == & AS_FOR	3207:12:93696:93737	621404	0	True				
ANR	624705	AndExpression	isJavaStyle ( ) && lastLineHeader == & AS_FOR		621404	0		&&			
ANR	624706	CallExpression	isJavaStyle ( )		621404	0					
ANR	624707	Callee	isJavaStyle		621404	0					
ANR	624708	Identifier	isJavaStyle		621404	0					
ANR	624709	ArgumentList			621404	1					
ANR	624710	EqualityExpression	lastLineHeader == & AS_FOR		621404	1		==			
ANR	624711	Identifier	lastLineHeader		621404	0					
ANR	624712	UnaryOperationExpression	& AS_FOR		621404	1					
ANR	624713	UnaryOperator	&		621404	0					
ANR	624714	Identifier	AS_FOR		621404	1					
ANR	624715	CompoundStatement		758:3:21867:21867	621404	1					
ANR	624716	ElseStatement	else		621404	0					
ANR	624717	CompoundStatement		765:4:22049:22088	621404	0					
ANR	624718	ExpressionStatement	currentNonSpaceCh = ';'	3214:4:93835:93858	621404	0	True				
ANR	624719	AssignmentExpression	currentNonSpaceCh = ';'		621404	0		=			
ANR	624720	Identifier	currentNonSpaceCh		621404	0					
ANR	624721	PrimaryExpression	';'		621404	1					
ANR	624722	IdentifierDeclStatement	"char peekedChar = peekNextChar ( line , i ) ;"	3215:4:93925:93964	621404	1	True				
ANR	624723	IdentifierDecl	"peekedChar = peekNextChar ( line , i )"		621404	0					
ANR	624724	IdentifierDeclType	char		621404	0					
ANR	624725	Identifier	peekedChar		621404	1					
ANR	624726	AssignmentExpression	"peekedChar = peekNextChar ( line , i )"		621404	2		=			
ANR	624727	Identifier	peekedChar		621404	0					
ANR	624728	CallExpression	"peekNextChar ( line , i )"		621404	1					
ANR	624729	Callee	peekNextChar		621404	0					
ANR	624730	Identifier	peekNextChar		621404	0					
ANR	624731	ArgumentList	line		621404	1					
ANR	624732	Argument	line		621404	0					
ANR	624733	Identifier	line		621404	0					
ANR	624734	Argument	i		621404	1					
ANR	624735	Identifier	i		621404	0					
ANR	624736	IfStatement	if ( isInCase )		621404	2					
ANR	624737	Condition	isInCase	3216:8:93974:93981	621404	0	True				
ANR	624738	Identifier	isInCase		621404	0					
ANR	624739	CompoundStatement		767:4:22112:22112	621404	1					
ANR	624740	ExpressionStatement	isInCase = false	3218:5:93995:94011	621404	0	True				
ANR	624741	AssignmentExpression	isInCase = false		621404	0		=			
ANR	624742	Identifier	isInCase		621404	0					
ANR	624743	Identifier	false		621404	1					
ANR	624744	ExpressionStatement	ch = ';'	3219:5:94018:94026	621404	1	True				
ANR	624745	AssignmentExpression	ch = ';'		621404	0		=			
ANR	624746	Identifier	ch		621404	0					
ANR	624747	PrimaryExpression	';'		621404	1					
ANR	624748	ElseStatement	else		621404	0					
ANR	624749	IfStatement	if ( isCStyle ( ) || ( isSharpStyle ( ) && peekedChar == ';' ) )		621404	0					
ANR	624750	Condition	isCStyle ( ) || ( isSharpStyle ( ) && peekedChar == ';' )	3221:13:94082:94132	621404	0	True				
ANR	624751	OrExpression	isCStyle ( ) || ( isSharpStyle ( ) && peekedChar == ';' )		621404	0		||			
ANR	624752	CallExpression	isCStyle ( )		621404	0					
ANR	624753	Callee	isCStyle		621404	0					
ANR	624754	Identifier	isCStyle		621404	0					
ANR	624755	ArgumentList			621404	1					
ANR	624756	AndExpression	isSharpStyle ( ) && peekedChar == ';'		621404	1		&&			
ANR	624757	CallExpression	isSharpStyle ( )		621404	0					
ANR	624758	Callee	isSharpStyle		621404	0					
ANR	624759	Identifier	isSharpStyle		621404	0					
ANR	624760	ArgumentList			621404	1					
ANR	624761	EqualityExpression	peekedChar == ';'		621404	1		==			
ANR	624762	Identifier	peekedChar		621404	0					
ANR	624763	PrimaryExpression	';'		621404	1					
ANR	624764	CompoundStatement		772:4:22263:22263	621404	1					
ANR	624765	IfStatement	if ( labelIndent )		621404	0					
ANR	624766	Condition	labelIndent	3224:9:94189:94199	621404	0	True				
ANR	624767	Identifier	labelIndent		621404	0					
ANR	624768	ExpressionStatement	-- indentCount	3225:6:94208:94221	621404	1	True				
ANR	624769	UnaryExpression	-- indentCount		621404	0					
ANR	624770	IncDec	--		621404	0					
ANR	624771	Identifier	indentCount		621404	1					
ANR	624772	ElseStatement	else		621404	0					
ANR	624773	IfStatement	if ( ! lineBeginsWithOpenBrace )		621404	0					
ANR	624774	Condition	! lineBeginsWithOpenBrace	3226:14:94269:94292	621404	0	True				
ANR	624775	UnaryOperationExpression	! lineBeginsWithOpenBrace		621404	0					
ANR	624776	UnaryOperator	!		621404	0					
ANR	624777	Identifier	lineBeginsWithOpenBrace		621404	1					
ANR	624778	ExpressionStatement	indentCount = 0	3227:6:94301:94316	621404	1	True				
ANR	624779	AssignmentExpression	indentCount = 0		621404	0		=			
ANR	624780	Identifier	indentCount		621404	0					
ANR	624781	PrimaryExpression	0		621404	1					
ANR	624782	IfStatement	"if ( ( ch == ';' || ( parenDepth > 0 && ch == ',' ) ) && ! continuationIndentStackSizeStack -> empty ( ) )"		621404	21					
ANR	624783	Condition	"( ch == ';' || ( parenDepth > 0 && ch == ',' ) ) && ! continuationIndentStackSizeStack -> empty ( )"	3232:6:94375:94464	621404	0	True				
ANR	624784	AndExpression	"( ch == ';' || ( parenDepth > 0 && ch == ',' ) ) && ! continuationIndentStackSizeStack -> empty ( )"		621404	0		&&			
ANR	624785	OrExpression	"ch == ';' || ( parenDepth > 0 && ch == ',' )"		621404	0		||			
ANR	624786	EqualityExpression	ch == ';'		621404	0		==			
ANR	624787	Identifier	ch		621404	0					
ANR	624788	PrimaryExpression	';'		621404	1					
ANR	624789	AndExpression	"parenDepth > 0 && ch == ','"		621404	1		&&			
ANR	624790	RelationalExpression	parenDepth > 0		621404	0		>			
ANR	624791	Identifier	parenDepth		621404	0					
ANR	624792	PrimaryExpression	0		621404	1					
ANR	624793	EqualityExpression	"ch == ','"		621404	1		==			
ANR	624794	Identifier	ch		621404	0					
ANR	624795	PrimaryExpression	"','"		621404	1					
ANR	624796	UnaryOperationExpression	! continuationIndentStackSizeStack -> empty ( )		621404	1					
ANR	624797	UnaryOperator	!		621404	0					
ANR	624798	CallExpression	continuationIndentStackSizeStack -> empty ( )		621404	1					
ANR	624799	Callee	continuationIndentStackSizeStack -> empty		621404	0					
ANR	624800	PtrMemberAccess	continuationIndentStackSizeStack -> empty		621404	0					
ANR	624801	Identifier	continuationIndentStackSizeStack		621404	0					
ANR	624802	Identifier	empty		621404	1					
ANR	624803	ArgumentList			621404	1					
ANR	624804	WhileStatement	while ( ( int ) continuationIndentStackSizeStack -> back ( ) + ( parenDepth > 0 ? 1 : 0 ) < ( int ) continuationIndentStack -> size ( ) )		621404	1					
ANR	624805	Condition	( int ) continuationIndentStackSizeStack -> back ( ) + ( parenDepth > 0 ? 1 : 0 ) < ( int ) continuationIndentStack -> size ( )	3233:10:94477:94600	621404	0	True				
ANR	624806	RelationalExpression	( int ) continuationIndentStackSizeStack -> back ( ) + ( parenDepth > 0 ? 1 : 0 ) < ( int ) continuationIndentStack -> size ( )		621404	0		<			
ANR	624807	AdditiveExpression	( int ) continuationIndentStackSizeStack -> back ( ) + ( parenDepth > 0 ? 1 : 0 )		621404	0		+			
ANR	624808	CastExpression	( int ) continuationIndentStackSizeStack -> back ( )		621404	0					
ANR	624809	CastTarget	int		621404	0					
ANR	624810	CallExpression	continuationIndentStackSizeStack -> back ( )		621404	1					
ANR	624811	Callee	continuationIndentStackSizeStack -> back		621404	0					
ANR	624812	PtrMemberAccess	continuationIndentStackSizeStack -> back		621404	0					
ANR	624813	Identifier	continuationIndentStackSizeStack		621404	0					
ANR	624814	Identifier	back		621404	1					
ANR	624815	ArgumentList			621404	1					
ANR	624816	ConditionalExpression	parenDepth > 0 ? 1 : 0		621404	1					
ANR	624817	Condition	parenDepth > 0		621404	0					
ANR	624818	RelationalExpression	parenDepth > 0		621404	0		>			
ANR	624819	Identifier	parenDepth		621404	0					
ANR	624820	PrimaryExpression	0		621404	1					
ANR	624821	PrimaryExpression	1		621404	1					
ANR	624822	PrimaryExpression	0		621404	2					
ANR	624823	CastExpression	( int ) continuationIndentStack -> size ( )		621404	1					
ANR	624824	CastTarget	int		621404	0					
ANR	624825	CallExpression	continuationIndentStack -> size ( )		621404	1					
ANR	624826	Callee	continuationIndentStack -> size		621404	0					
ANR	624827	PtrMemberAccess	continuationIndentStack -> size		621404	0					
ANR	624828	Identifier	continuationIndentStack		621404	0					
ANR	624829	Identifier	size		621404	1					
ANR	624830	ArgumentList			621404	1					
ANR	624831	ExpressionStatement	continuationIndentStack -> pop_back ( )	3235:4:94607:94642	621404	1	True				
ANR	624832	CallExpression	continuationIndentStack -> pop_back ( )		621404	0					
ANR	624833	Callee	continuationIndentStack -> pop_back		621404	0					
ANR	624834	PtrMemberAccess	continuationIndentStack -> pop_back		621404	0					
ANR	624835	Identifier	continuationIndentStack		621404	0					
ANR	624836	Identifier	pop_back		621404	1					
ANR	624837	ArgumentList			621404	1					
ANR	624838	ElseStatement	else		621404	0					
ANR	624839	IfStatement	"if ( ch == ',' && isInEnum && isNonInStatementArray && ! continuationIndentStack -> empty ( ) )"		621404	0					
ANR	624840	Condition	"ch == ',' && isInEnum && isNonInStatementArray && ! continuationIndentStack -> empty ( )"	3237:11:94656:94738	621404	0	True				
ANR	624841	AndExpression	"ch == ',' && isInEnum && isNonInStatementArray && ! continuationIndentStack -> empty ( )"		621404	0		&&			
ANR	624842	EqualityExpression	"ch == ','"		621404	0		==			
ANR	624843	Identifier	ch		621404	0					
ANR	624844	PrimaryExpression	"','"		621404	1					
ANR	624845	AndExpression	isInEnum && isNonInStatementArray && ! continuationIndentStack -> empty ( )		621404	1		&&			
ANR	624846	Identifier	isInEnum		621404	0					
ANR	624847	AndExpression	isNonInStatementArray && ! continuationIndentStack -> empty ( )		621404	1		&&			
ANR	624848	Identifier	isNonInStatementArray		621404	0					
ANR	624849	UnaryOperationExpression	! continuationIndentStack -> empty ( )		621404	1					
ANR	624850	UnaryOperator	!		621404	0					
ANR	624851	CallExpression	continuationIndentStack -> empty ( )		621404	1					
ANR	624852	Callee	continuationIndentStack -> empty		621404	0					
ANR	624853	PtrMemberAccess	continuationIndentStack -> empty		621404	0					
ANR	624854	Identifier	continuationIndentStack		621404	0					
ANR	624855	Identifier	empty		621404	1					
ANR	624856	ArgumentList			621404	1					
ANR	624857	ExpressionStatement	continuationIndentStack -> pop_back ( )	3238:3:94744:94779	621404	1	True				
ANR	624858	CallExpression	continuationIndentStack -> pop_back ( )		621404	0					
ANR	624859	Callee	continuationIndentStack -> pop_back		621404	0					
ANR	624860	PtrMemberAccess	continuationIndentStack -> pop_back		621404	0					
ANR	624861	Identifier	continuationIndentStack		621404	0					
ANR	624862	Identifier	pop_back		621404	1					
ANR	624863	ArgumentList			621404	1					
ANR	624864	IfStatement	"if ( ch == ',' && parenDepth == 0 && ! isContinuation && ! isNonInStatementArray )"		621404	22					
ANR	624865	Condition	"ch == ',' && parenDepth == 0 && ! isContinuation && ! isNonInStatementArray"	3242:6:94894:94966	621404	0	True				
ANR	624866	AndExpression	"ch == ',' && parenDepth == 0 && ! isContinuation && ! isNonInStatementArray"		621404	0		&&			
ANR	624867	EqualityExpression	"ch == ','"		621404	0		==			
ANR	624868	Identifier	ch		621404	0					
ANR	624869	PrimaryExpression	"','"		621404	1					
ANR	624870	AndExpression	parenDepth == 0 && ! isContinuation && ! isNonInStatementArray		621404	1		&&			
ANR	624871	EqualityExpression	parenDepth == 0		621404	0		==			
ANR	624872	Identifier	parenDepth		621404	0					
ANR	624873	PrimaryExpression	0		621404	1					
ANR	624874	AndExpression	! isContinuation && ! isNonInStatementArray		621404	1		&&			
ANR	624875	UnaryOperationExpression	! isContinuation		621404	0					
ANR	624876	UnaryOperator	!		621404	0					
ANR	624877	Identifier	isContinuation		621404	1					
ANR	624878	UnaryOperationExpression	! isNonInStatementArray		621404	1					
ANR	624879	UnaryOperator	!		621404	0					
ANR	624880	Identifier	isNonInStatementArray		621404	1					
ANR	624881	CompoundStatement		795:3:23130:23184	621404	1					
ANR	624882	IdentifierDeclStatement	"size_t nextChar = line . find_first_not_of ( "" \\t"" , i + 1 ) ;"	3245:3:95006:95060	621404	0	True				
ANR	624883	IdentifierDecl	"nextChar = line . find_first_not_of ( "" \\t"" , i + 1 )"		621404	0					
ANR	624884	IdentifierDeclType	size_t		621404	0					
ANR	624885	Identifier	nextChar		621404	1					
ANR	624886	AssignmentExpression	"nextChar = line . find_first_not_of ( "" \\t"" , i + 1 )"		621404	2		=			
ANR	624887	Identifier	nextChar		621404	0					
ANR	624888	CallExpression	"line . find_first_not_of ( "" \\t"" , i + 1 )"		621404	1					
ANR	624889	Callee	line . find_first_not_of		621404	0					
ANR	624890	MemberAccess	line . find_first_not_of		621404	0					
ANR	624891	Identifier	line		621404	0					
ANR	624892	Identifier	find_first_not_of		621404	1					
ANR	624893	ArgumentList	""" \\t"""		621404	1					
ANR	624894	Argument	""" \\t"""		621404	0					
ANR	624895	PrimaryExpression	""" \\t"""		621404	0					
ANR	624896	Argument	i + 1		621404	1					
ANR	624897	AdditiveExpression	i + 1		621404	0		+			
ANR	624898	Identifier	i		621404	0					
ANR	624899	PrimaryExpression	1		621404	1					
ANR	624900	IfStatement	if ( nextChar != string :: npos )		621404	1					
ANR	624901	Condition	nextChar != string :: npos	3246:7:95069:95092	621404	0	True				
ANR	624902	EqualityExpression	nextChar != string :: npos		621404	0		!=			
ANR	624903	Identifier	nextChar		621404	0					
ANR	624904	Identifier	string :: npos		621404	1					
ANR	624905	CompoundStatement		797:3:23222:23222	621404	1					
ANR	624906	IfStatement	"if ( line . compare ( nextChar , 2 , ""//"" ) == 0 || line . compare ( nextChar , 2 , ""/*"" ) == 0 )"		621404	0					
ANR	624907	Condition	"line . compare ( nextChar , 2 , ""//"" ) == 0 || line . compare ( nextChar , 2 , ""/*"" ) == 0"	3248:8:95108:95195	621404	0	True				
ANR	624908	OrExpression	"line . compare ( nextChar , 2 , ""//"" ) == 0 || line . compare ( nextChar , 2 , ""/*"" ) == 0"		621404	0		||			
ANR	624909	EqualityExpression	"line . compare ( nextChar , 2 , ""//"" ) == 0"		621404	0		==			
ANR	624910	CallExpression	"line . compare ( nextChar , 2 , ""//"" )"		621404	0					
ANR	624911	Callee	line . compare		621404	0					
ANR	624912	MemberAccess	line . compare		621404	0					
ANR	624913	Identifier	line		621404	0					
ANR	624914	Identifier	compare		621404	1					
ANR	624915	ArgumentList	nextChar		621404	1					
ANR	624916	Argument	nextChar		621404	0					
ANR	624917	Identifier	nextChar		621404	0					
ANR	624918	Argument	2		621404	1					
ANR	624919	PrimaryExpression	2		621404	0					
ANR	624920	Argument	"""//"""		621404	2					
ANR	624921	PrimaryExpression	"""//"""		621404	0					
ANR	624922	PrimaryExpression	0		621404	1					
ANR	624923	EqualityExpression	"line . compare ( nextChar , 2 , ""/*"" ) == 0"		621404	1		==			
ANR	624924	CallExpression	"line . compare ( nextChar , 2 , ""/*"" )"		621404	0					
ANR	624925	Callee	line . compare		621404	0					
ANR	624926	MemberAccess	line . compare		621404	0					
ANR	624927	Identifier	line		621404	0					
ANR	624928	Identifier	compare		621404	1					
ANR	624929	ArgumentList	nextChar		621404	1					
ANR	624930	Argument	nextChar		621404	0					
ANR	624931	Identifier	nextChar		621404	0					
ANR	624932	Argument	2		621404	1					
ANR	624933	PrimaryExpression	2		621404	0					
ANR	624934	Argument	"""/*"""		621404	2					
ANR	624935	PrimaryExpression	"""/*"""		621404	0					
ANR	624936	PrimaryExpression	0		621404	1					
ANR	624937	ExpressionStatement	nextChar = string :: npos	3250:5:95203:95226	621404	1	True				
ANR	624938	AssignmentExpression	nextChar = string :: npos		621404	0		=			
ANR	624939	Identifier	nextChar		621404	0					
ANR	624940	Identifier	string :: npos		621404	1					
ANR	624941	IfStatement	if ( nextChar == string :: npos )		621404	2					
ANR	624942	Condition	nextChar == string :: npos	3253:7:95262:95285	621404	0	True				
ANR	624943	EqualityExpression	nextChar == string :: npos		621404	0		==			
ANR	624944	Identifier	nextChar		621404	0					
ANR	624945	Identifier	string :: npos		621404	1					
ANR	624946	CompoundStatement		804:3:23415:23415	621404	1					
ANR	624947	IfStatement	if ( isJavaStyle ( ) && isInClassHeader )		621404	0					
ANR	624948	Condition	isJavaStyle ( ) && isInClassHeader	3256:8:95341:95372	621404	0	True				
ANR	624949	AndExpression	isJavaStyle ( ) && isInClassHeader		621404	0		&&			
ANR	624950	CallExpression	isJavaStyle ( )		621404	0					
ANR	624951	Callee	isJavaStyle		621404	0					
ANR	624952	Identifier	isJavaStyle		621404	0					
ANR	624953	ArgumentList			621404	1					
ANR	624954	Identifier	isInClassHeader		621404	1					
ANR	624955	CompoundStatement		807:4:23503:23503	621404	1					
ANR	624956	ElseStatement	else		621404	0					
ANR	624957	IfStatement	if ( ! isInTemplate && ! isInClassHeaderTab && ! isInClassInitializer )		621404	0					
ANR	624958	Condition	! isInTemplate && ! isInClassHeaderTab && ! isInClassInitializer	3261:13:95477:95537	621404	0	True				
ANR	624959	AndExpression	! isInTemplate && ! isInClassHeaderTab && ! isInClassInitializer		621404	0		&&			
ANR	624960	UnaryOperationExpression	! isInTemplate		621404	0					
ANR	624961	UnaryOperator	!		621404	0					
ANR	624962	Identifier	isInTemplate		621404	1					
ANR	624963	AndExpression	! isInClassHeaderTab && ! isInClassInitializer		621404	1		&&			
ANR	624964	UnaryOperationExpression	! isInClassHeaderTab		621404	0					
ANR	624965	UnaryOperator	!		621404	0					
ANR	624966	Identifier	isInClassHeaderTab		621404	1					
ANR	624967	UnaryOperationExpression	! isInClassInitializer		621404	1					
ANR	624968	UnaryOperator	!		621404	0					
ANR	624969	Identifier	isInClassInitializer		621404	1					
ANR	624970	CompoundStatement		814:5:23732:23806	621404	1					
ANR	624971	IdentifierDeclStatement	"int prevWord = getContinuationIndentComma ( line , i ) ;"	3263:5:95551:95601	621404	0	True				
ANR	624972	IdentifierDecl	"prevWord = getContinuationIndentComma ( line , i )"		621404	0					
ANR	624973	IdentifierDeclType	int		621404	0					
ANR	624974	Identifier	prevWord		621404	1					
ANR	624975	AssignmentExpression	"prevWord = getContinuationIndentComma ( line , i )"		621404	2		=			
ANR	624976	Identifier	prevWord		621404	0					
ANR	624977	CallExpression	"getContinuationIndentComma ( line , i )"		621404	1					
ANR	624978	Callee	getContinuationIndentComma		621404	0					
ANR	624979	Identifier	getContinuationIndentComma		621404	0					
ANR	624980	ArgumentList	line		621404	1					
ANR	624981	Argument	line		621404	0					
ANR	624982	Identifier	line		621404	0					
ANR	624983	Argument	i		621404	1					
ANR	624984	Identifier	i		621404	0					
ANR	624985	IdentifierDeclStatement	int continuationIndentCount = prevWord + spaceIndentCount + tabIncrementIn ;	3264:5:95608:95682	621404	1	True				
ANR	624986	IdentifierDecl	continuationIndentCount = prevWord + spaceIndentCount + tabIncrementIn		621404	0					
ANR	624987	IdentifierDeclType	int		621404	0					
ANR	624988	Identifier	continuationIndentCount		621404	1					
ANR	624989	AssignmentExpression	continuationIndentCount = prevWord + spaceIndentCount + tabIncrementIn		621404	2		=			
ANR	624990	Identifier	continuationIndentCount		621404	0					
ANR	624991	AdditiveExpression	prevWord + spaceIndentCount + tabIncrementIn		621404	1		+			
ANR	624992	Identifier	prevWord		621404	0					
ANR	624993	AdditiveExpression	spaceIndentCount + tabIncrementIn		621404	1		+			
ANR	624994	Identifier	spaceIndentCount		621404	0					
ANR	624995	Identifier	tabIncrementIn		621404	1					
ANR	624996	ExpressionStatement	continuationIndentStack -> emplace_back ( continuationIndentCount )	3265:5:95689:95751	621404	2	True				
ANR	624997	CallExpression	continuationIndentStack -> emplace_back ( continuationIndentCount )		621404	0					
ANR	624998	Callee	continuationIndentStack -> emplace_back		621404	0					
ANR	624999	PtrMemberAccess	continuationIndentStack -> emplace_back		621404	0					
ANR	625000	Identifier	continuationIndentStack		621404	0					
ANR	625001	Identifier	emplace_back		621404	1					
ANR	625002	ArgumentList	continuationIndentCount		621404	1					
ANR	625003	Argument	continuationIndentCount		621404	0					
ANR	625004	Identifier	continuationIndentCount		621404	0					
ANR	625005	ExpressionStatement	isContinuation = true	3266:5:95758:95779	621404	3	True				
ANR	625006	AssignmentExpression	isContinuation = true		621404	0		=			
ANR	625007	Identifier	isContinuation		621404	0					
ANR	625008	Identifier	true		621404	1					
ANR	625009	IfStatement	"if ( ch == ',' && parenDepth == 0 && lineBeginsWithComma && ( isInClassInitializer || isInClassHeaderTab ) )"		621404	23					
ANR	625010	Condition	"ch == ',' && parenDepth == 0 && lineBeginsWithComma && ( isInClassInitializer || isInClassHeaderTab )"	3271:6:95839:95947	621404	0	True				
ANR	625011	AndExpression	"ch == ',' && parenDepth == 0 && lineBeginsWithComma && ( isInClassInitializer || isInClassHeaderTab )"		621404	0		&&			
ANR	625012	EqualityExpression	"ch == ','"		621404	0		==			
ANR	625013	Identifier	ch		621404	0					
ANR	625014	PrimaryExpression	"','"		621404	1					
ANR	625015	AndExpression	parenDepth == 0 && lineBeginsWithComma && ( isInClassInitializer || isInClassHeaderTab )		621404	1		&&			
ANR	625016	EqualityExpression	parenDepth == 0		621404	0		==			
ANR	625017	Identifier	parenDepth		621404	0					
ANR	625018	PrimaryExpression	0		621404	1					
ANR	625019	AndExpression	lineBeginsWithComma && ( isInClassInitializer || isInClassHeaderTab )		621404	1		&&			
ANR	625020	Identifier	lineBeginsWithComma		621404	0					
ANR	625021	OrExpression	isInClassInitializer || isInClassHeaderTab		621404	1		||			
ANR	625022	Identifier	isInClassInitializer		621404	0					
ANR	625023	Identifier	isInClassHeaderTab		621404	1					
ANR	625024	ExpressionStatement	spaceIndentCount = 0	3273:3:95953:95973	621404	1	True				
ANR	625025	AssignmentExpression	spaceIndentCount = 0		621404	0		=			
ANR	625026	Identifier	spaceIndentCount		621404	0					
ANR	625027	PrimaryExpression	0		621404	1					
ANR	625028	IfStatement	if ( ( ch == ';' && parenDepth == 0 ) || ch == '}' )		621404	24					
ANR	625029	Condition	( ch == ';' && parenDepth == 0 ) || ch == '}'	3276:6:96013:96055	621404	0	True				
ANR	625030	OrExpression	( ch == ';' && parenDepth == 0 ) || ch == '}'		621404	0		||			
ANR	625031	AndExpression	ch == ';' && parenDepth == 0		621404	0		&&			
ANR	625032	EqualityExpression	ch == ';'		621404	0		==			
ANR	625033	Identifier	ch		621404	0					
ANR	625034	PrimaryExpression	';'		621404	1					
ANR	625035	EqualityExpression	parenDepth == 0		621404	1		==			
ANR	625036	Identifier	parenDepth		621404	0					
ANR	625037	PrimaryExpression	0		621404	1					
ANR	625038	EqualityExpression	ch == '}'		621404	1		==			
ANR	625039	Identifier	ch		621404	0					
ANR	625040	PrimaryExpression	'}'		621404	1					
ANR	625041	CompoundStatement		827:2:24184:24184	621404	1					
ANR	625042	IfStatement	if ( ch == '}' )		621404	0					
ANR	625043	Condition	ch == '}'	3278:7:96069:96077	621404	0	True				
ANR	625044	EqualityExpression	ch == '}'		621404	0		==			
ANR	625045	Identifier	ch		621404	0					
ANR	625046	PrimaryExpression	'}'		621404	1					
ANR	625047	CompoundStatement		881:4:25556:25611	621404	1					
ANR	625048	IfStatement	if ( braceBlockStateStack -> size ( ) > 1 )		621404	0					
ANR	625049	Condition	braceBlockStateStack -> size ( ) > 1	3281:8:96170:96201	621404	0	True				
ANR	625050	RelationalExpression	braceBlockStateStack -> size ( ) > 1		621404	0		>			
ANR	625051	CallExpression	braceBlockStateStack -> size ( )		621404	0					
ANR	625052	Callee	braceBlockStateStack -> size		621404	0					
ANR	625053	PtrMemberAccess	braceBlockStateStack -> size		621404	0					
ANR	625054	Identifier	braceBlockStateStack		621404	0					
ANR	625055	Identifier	size		621404	1					
ANR	625056	ArgumentList			621404	1					
ANR	625057	PrimaryExpression	1		621404	1					
ANR	625058	CompoundStatement		833:5:24339:24390	621404	1					
ANR	625059	IdentifierDeclStatement	bool braceBlockState = braceBlockStateStack -> back ( ) ;	3283:5:96215:96266	621404	0	True				
ANR	625060	IdentifierDecl	braceBlockState = braceBlockStateStack -> back ( )		621404	0					
ANR	625061	IdentifierDeclType	bool		621404	0					
ANR	625062	Identifier	braceBlockState		621404	1					
ANR	625063	AssignmentExpression	braceBlockState = braceBlockStateStack -> back ( )		621404	2		=			
ANR	625064	Identifier	braceBlockState		621404	0					
ANR	625065	CallExpression	braceBlockStateStack -> back ( )		621404	1					
ANR	625066	Callee	braceBlockStateStack -> back		621404	0					
ANR	625067	PtrMemberAccess	braceBlockStateStack -> back		621404	0					
ANR	625068	Identifier	braceBlockStateStack		621404	0					
ANR	625069	Identifier	back		621404	1					
ANR	625070	ArgumentList			621404	1					
ANR	625071	ExpressionStatement	braceBlockStateStack -> pop_back ( )	3284:5:96273:96305	621404	1	True				
ANR	625072	CallExpression	braceBlockStateStack -> pop_back ( )		621404	0					
ANR	625073	Callee	braceBlockStateStack -> pop_back		621404	0					
ANR	625074	PtrMemberAccess	braceBlockStateStack -> pop_back		621404	0					
ANR	625075	Identifier	braceBlockStateStack		621404	0					
ANR	625076	Identifier	pop_back		621404	1					
ANR	625077	ArgumentList			621404	1					
ANR	625078	IfStatement	if ( ! braceBlockState )		621404	2					
ANR	625079	Condition	! braceBlockState	3285:9:96316:96331	621404	0	True				
ANR	625080	UnaryOperationExpression	! braceBlockState		621404	0					
ANR	625081	UnaryOperator	!		621404	0					
ANR	625082	Identifier	braceBlockState		621404	1					
ANR	625083	CompoundStatement		836:5:24463:24463	621404	1					
ANR	625084	IfStatement	if ( ! continuationIndentStackSizeStack -> empty ( ) )		621404	0					
ANR	625085	Condition	! continuationIndentStackSizeStack -> empty ( )	3287:10:96351:96392	621404	0	True				
ANR	625086	UnaryOperationExpression	! continuationIndentStackSizeStack -> empty ( )		621404	0					
ANR	625087	UnaryOperator	!		621404	0					
ANR	625088	CallExpression	continuationIndentStackSizeStack -> empty ( )		621404	1					
ANR	625089	Callee	continuationIndentStackSizeStack -> empty		621404	0					
ANR	625090	PtrMemberAccess	continuationIndentStackSizeStack -> empty		621404	0					
ANR	625091	Identifier	continuationIndentStackSizeStack		621404	0					
ANR	625092	Identifier	empty		621404	1					
ANR	625093	ArgumentList			621404	1					
ANR	625094	CompoundStatement		838:6:24525:24525	621404	1					
ANR	625095	ExpressionStatement	popLastContinuationIndent ( )	3290:7:96449:96476	621404	0	True				
ANR	625096	CallExpression	popLastContinuationIndent ( )		621404	0					
ANR	625097	Callee	popLastContinuationIndent		621404	0					
ANR	625098	Identifier	popLastContinuationIndent		621404	0					
ANR	625099	ArgumentList			621404	1					
ANR	625100	ExpressionStatement	parenDepth --	3291:7:96485:96497	621404	1	True				
ANR	625101	PostIncDecOperationExpression	parenDepth --		621404	0					
ANR	625102	Identifier	parenDepth		621404	0					
ANR	625103	IncDec	--		621404	1					
ANR	625104	IfStatement	if ( i == 0 )		621404	2					
ANR	625105	Condition	i == 0	3292:11:96510:96515	621404	0	True				
ANR	625106	EqualityExpression	i == 0		621404	0		==			
ANR	625107	Identifier	i		621404	0					
ANR	625108	PrimaryExpression	0		621404	1					
ANR	625109	ExpressionStatement	shouldIndentBracedLine = false	3293:8:96526:96556	621404	1	True				
ANR	625110	AssignmentExpression	shouldIndentBracedLine = false		621404	0		=			
ANR	625111	Identifier	shouldIndentBracedLine		621404	0					
ANR	625112	Identifier	false		621404	1					
ANR	625113	IfStatement	if ( ! parenIndentStack -> empty ( ) )		621404	3					
ANR	625114	Condition	! parenIndentStack -> empty ( )	3295:11:96570:96595	621404	0	True				
ANR	625115	UnaryOperationExpression	! parenIndentStack -> empty ( )		621404	0					
ANR	625116	UnaryOperator	!		621404	0					
ANR	625117	CallExpression	parenIndentStack -> empty ( )		621404	1					
ANR	625118	Callee	parenIndentStack -> empty		621404	0					
ANR	625119	PtrMemberAccess	parenIndentStack -> empty		621404	0					
ANR	625120	Identifier	parenIndentStack		621404	0					
ANR	625121	Identifier	empty		621404	1					
ANR	625122	ArgumentList			621404	1					
ANR	625123	CompoundStatement		847:8:24739:24782	621404	1					
ANR	625124	IdentifierDeclStatement	int poppedIndent = parenIndentStack -> back ( ) ;	3297:8:96615:96658	621404	0	True				
ANR	625125	IdentifierDecl	poppedIndent = parenIndentStack -> back ( )		621404	0					
ANR	625126	IdentifierDeclType	int		621404	0					
ANR	625127	Identifier	poppedIndent		621404	1					
ANR	625128	AssignmentExpression	poppedIndent = parenIndentStack -> back ( )		621404	2		=			
ANR	625129	Identifier	poppedIndent		621404	0					
ANR	625130	CallExpression	parenIndentStack -> back ( )		621404	1					
ANR	625131	Callee	parenIndentStack -> back		621404	0					
ANR	625132	PtrMemberAccess	parenIndentStack -> back		621404	0					
ANR	625133	Identifier	parenIndentStack		621404	0					
ANR	625134	Identifier	back		621404	1					
ANR	625135	ArgumentList			621404	1					
ANR	625136	ExpressionStatement	parenIndentStack -> pop_back ( )	3298:8:96668:96696	621404	1	True				
ANR	625137	CallExpression	parenIndentStack -> pop_back ( )		621404	0					
ANR	625138	Callee	parenIndentStack -> pop_back		621404	0					
ANR	625139	PtrMemberAccess	parenIndentStack -> pop_back		621404	0					
ANR	625140	Identifier	parenIndentStack		621404	0					
ANR	625141	Identifier	pop_back		621404	1					
ANR	625142	ArgumentList			621404	1					
ANR	625143	IfStatement	if ( i == 0 )		621404	2					
ANR	625144	Condition	i == 0	3299:12:96710:96715	621404	0	True				
ANR	625145	EqualityExpression	i == 0		621404	0		==			
ANR	625146	Identifier	i		621404	0					
ANR	625147	PrimaryExpression	0		621404	1					
ANR	625148	ExpressionStatement	spaceIndentCount = poppedIndent	3300:9:96727:96758	621404	1	True				
ANR	625149	AssignmentExpression	spaceIndentCount = poppedIndent		621404	0		=			
ANR	625150	Identifier	spaceIndentCount		621404	0					
ANR	625151	Identifier	poppedIndent		621404	1					
ANR	625152	ContinueStatement	continue ;	3303:6:96783:96791	621404	1	True				
ANR	625153	ExpressionStatement	++ lineClosingBlocksNum	3309:4:96849:96871	621404	1	True				
ANR	625154	UnaryExpression	++ lineClosingBlocksNum		621404	0					
ANR	625155	IncDec	++		621404	0					
ANR	625156	Identifier	lineClosingBlocksNum		621404	1					
ANR	625157	IfStatement	if ( ! continuationIndentStackSizeStack -> empty ( ) )		621404	2					
ANR	625158	Condition	! continuationIndentStackSizeStack -> empty ( )	3311:8:96882:96923	621404	0	True				
ANR	625159	UnaryOperationExpression	! continuationIndentStackSizeStack -> empty ( )		621404	0					
ANR	625160	UnaryOperator	!		621404	0					
ANR	625161	CallExpression	continuationIndentStackSizeStack -> empty ( )		621404	1					
ANR	625162	Callee	continuationIndentStackSizeStack -> empty		621404	0					
ANR	625163	PtrMemberAccess	continuationIndentStackSizeStack -> empty		621404	0					
ANR	625164	Identifier	continuationIndentStackSizeStack		621404	0					
ANR	625165	Identifier	empty		621404	1					
ANR	625166	ArgumentList			621404	1					
ANR	625167	ExpressionStatement	popLastContinuationIndent ( )	3312:5:96931:96958	621404	1	True				
ANR	625168	CallExpression	popLastContinuationIndent ( )		621404	0					
ANR	625169	Callee	popLastContinuationIndent		621404	0					
ANR	625170	Identifier	popLastContinuationIndent		621404	0					
ANR	625171	ArgumentList			621404	1					
ANR	625172	IfStatement	if ( ! squareBracketDepthStack -> empty ( ) )		621404	3					
ANR	625173	Condition	! squareBracketDepthStack -> empty ( )	3314:8:96969:97001	621404	0	True				
ANR	625174	UnaryOperationExpression	! squareBracketDepthStack -> empty ( )		621404	0					
ANR	625175	UnaryOperator	!		621404	0					
ANR	625176	CallExpression	squareBracketDepthStack -> empty ( )		621404	1					
ANR	625177	Callee	squareBracketDepthStack -> empty		621404	0					
ANR	625178	PtrMemberAccess	squareBracketDepthStack -> empty		621404	0					
ANR	625179	Identifier	squareBracketDepthStack		621404	0					
ANR	625180	Identifier	empty		621404	1					
ANR	625181	ArgumentList			621404	1					
ANR	625182	CompoundStatement		865:4:25132:25132	621404	1					
ANR	625183	ExpressionStatement	parenDepth = squareBracketDepthStack -> back ( )	3316:5:97015:97059	621404	0	True				
ANR	625184	AssignmentExpression	parenDepth = squareBracketDepthStack -> back ( )		621404	0		=			
ANR	625185	Identifier	parenDepth		621404	0					
ANR	625186	CallExpression	squareBracketDepthStack -> back ( )		621404	1					
ANR	625187	Callee	squareBracketDepthStack -> back		621404	0					
ANR	625188	PtrMemberAccess	squareBracketDepthStack -> back		621404	0					
ANR	625189	Identifier	squareBracketDepthStack		621404	0					
ANR	625190	Identifier	back		621404	1					
ANR	625191	ArgumentList			621404	1					
ANR	625192	ExpressionStatement	squareBracketDepthStack -> pop_back ( )	3317:5:97066:97101	621404	1	True				
ANR	625193	CallExpression	squareBracketDepthStack -> pop_back ( )		621404	0					
ANR	625194	Callee	squareBracketDepthStack -> pop_back		621404	0					
ANR	625195	PtrMemberAccess	squareBracketDepthStack -> pop_back		621404	0					
ANR	625196	Identifier	squareBracketDepthStack		621404	0					
ANR	625197	Identifier	pop_back		621404	1					
ANR	625198	ArgumentList			621404	1					
ANR	625199	ExpressionStatement	isContinuation = blockStatementStack -> back ( )	3318:5:97108:97152	621404	2	True				
ANR	625200	AssignmentExpression	isContinuation = blockStatementStack -> back ( )		621404	0		=			
ANR	625201	Identifier	isContinuation		621404	0					
ANR	625202	CallExpression	blockStatementStack -> back ( )		621404	1					
ANR	625203	Callee	blockStatementStack -> back		621404	0					
ANR	625204	PtrMemberAccess	blockStatementStack -> back		621404	0					
ANR	625205	Identifier	blockStatementStack		621404	0					
ANR	625206	Identifier	back		621404	1					
ANR	625207	ArgumentList			621404	1					
ANR	625208	ExpressionStatement	blockStatementStack -> pop_back ( )	3319:5:97159:97190	621404	3	True				
ANR	625209	CallExpression	blockStatementStack -> pop_back ( )		621404	0					
ANR	625210	Callee	blockStatementStack -> pop_back		621404	0					
ANR	625211	PtrMemberAccess	blockStatementStack -> pop_back		621404	0					
ANR	625212	Identifier	blockStatementStack		621404	0					
ANR	625213	Identifier	pop_back		621404	1					
ANR	625214	ArgumentList			621404	1					
ANR	625215	IfStatement	if ( isContinuation )		621404	4					
ANR	625216	Condition	isContinuation	3321:9:97202:97215	621404	0	True				
ANR	625217	Identifier	isContinuation		621404	0					
ANR	625218	ExpressionStatement	blockTabCount --	3322:6:97224:97239	621404	1	True				
ANR	625219	PostIncDecOperationExpression	blockTabCount --		621404	0					
ANR	625220	Identifier	blockTabCount		621404	0					
ANR	625221	IncDec	--		621404	1					
ANR	625222	ExpressionStatement	closingBraceReached = true	3325:4:97252:97278	621404	4	True				
ANR	625223	AssignmentExpression	closingBraceReached = true		621404	0		=			
ANR	625224	Identifier	closingBraceReached		621404	0					
ANR	625225	Identifier	true		621404	1					
ANR	625226	IfStatement	if ( i == 0 )		621404	5					
ANR	625227	Condition	i == 0	3326:8:97288:97293	621404	0	True				
ANR	625228	EqualityExpression	i == 0		621404	0		==			
ANR	625229	Identifier	i		621404	0					
ANR	625230	PrimaryExpression	0		621404	1					
ANR	625231	ExpressionStatement	spaceIndentCount = 0	3327:5:97301:97321	621404	1	True				
ANR	625232	AssignmentExpression	spaceIndentCount = 0		621404	0		=			
ANR	625233	Identifier	spaceIndentCount		621404	0					
ANR	625234	PrimaryExpression	0		621404	1					
ANR	625235	ExpressionStatement	isInAsmBlock = false	3328:4:97327:97347	621404	6	True				
ANR	625236	AssignmentExpression	isInAsmBlock = false		621404	0		=			
ANR	625237	Identifier	isInAsmBlock		621404	0					
ANR	625238	Identifier	false		621404	1					
ANR	625239	ExpressionStatement	isInAsm = isInAsmOneLine = isInQuote = false	3329:4:97353:97397	621404	7	True				
ANR	625240	AssignmentExpression	isInAsm = isInAsmOneLine = isInQuote = false		621404	0		=			
ANR	625241	Identifier	isInAsm		621404	0					
ANR	625242	AssignmentExpression	isInAsmOneLine = isInQuote = false		621404	1		=			
ANR	625243	Identifier	isInAsmOneLine		621404	0					
ANR	625244	AssignmentExpression	isInQuote = false		621404	1		=			
ANR	625245	Identifier	isInQuote		621404	0					
ANR	625246	Identifier	false		621404	1					
ANR	625247	IdentifierDeclStatement	"int headerPlace = indexOf ( * headerStack , & AS_OPEN_BRACE ) ;"	3331:4:97432:97487	621404	8	True				
ANR	625248	IdentifierDecl	"headerPlace = indexOf ( * headerStack , & AS_OPEN_BRACE )"		621404	0					
ANR	625249	IdentifierDeclType	int		621404	0					
ANR	625250	Identifier	headerPlace		621404	1					
ANR	625251	AssignmentExpression	"headerPlace = indexOf ( * headerStack , & AS_OPEN_BRACE )"		621404	2		=			
ANR	625252	Identifier	headerPlace		621404	0					
ANR	625253	CallExpression	"indexOf ( * headerStack , & AS_OPEN_BRACE )"		621404	1					
ANR	625254	Callee	indexOf		621404	0					
ANR	625255	Identifier	indexOf		621404	0					
ANR	625256	ArgumentList	* headerStack		621404	1					
ANR	625257	Argument	* headerStack		621404	0					
ANR	625258	UnaryOperationExpression	* headerStack		621404	0					
ANR	625259	UnaryOperator	*		621404	0					
ANR	625260	Identifier	headerStack		621404	1					
ANR	625261	Argument	& AS_OPEN_BRACE		621404	1					
ANR	625262	UnaryOperationExpression	& AS_OPEN_BRACE		621404	0					
ANR	625263	UnaryOperator	&		621404	0					
ANR	625264	Identifier	AS_OPEN_BRACE		621404	1					
ANR	625265	IfStatement	if ( headerPlace != - 1 )		621404	9					
ANR	625266	Condition	headerPlace != - 1	3332:8:97497:97513	621404	0	True				
ANR	625267	EqualityExpression	headerPlace != - 1		621404	0		!=			
ANR	625268	Identifier	headerPlace		621404	0					
ANR	625269	UnaryOperationExpression	- 1		621404	1					
ANR	625270	UnaryOperator	-		621404	0					
ANR	625271	PrimaryExpression	1		621404	1					
ANR	625272	CompoundStatement		884:5:25651:25693	621404	1					
ANR	625273	IdentifierDeclStatement	const string * popped = headerStack -> back ( ) ;	3334:5:97527:97569	621404	0	True				
ANR	625274	IdentifierDecl	* popped = headerStack -> back ( )		621404	0					
ANR	625275	IdentifierDeclType	const string *		621404	0					
ANR	625276	Identifier	popped		621404	1					
ANR	625277	AssignmentExpression	* popped = headerStack -> back ( )		621404	2		=			
ANR	625278	Identifier	popped		621404	0					
ANR	625279	CallExpression	headerStack -> back ( )		621404	1					
ANR	625280	Callee	headerStack -> back		621404	0					
ANR	625281	PtrMemberAccess	headerStack -> back		621404	0					
ANR	625282	Identifier	headerStack		621404	0					
ANR	625283	Identifier	back		621404	1					
ANR	625284	ArgumentList			621404	1					
ANR	625285	WhileStatement	while ( popped != & AS_OPEN_BRACE )		621404	1					
ANR	625286	Condition	popped != & AS_OPEN_BRACE	3335:12:97583:97606	621404	0	True				
ANR	625287	EqualityExpression	popped != & AS_OPEN_BRACE		621404	0		!=			
ANR	625288	Identifier	popped		621404	0					
ANR	625289	UnaryOperationExpression	& AS_OPEN_BRACE		621404	1					
ANR	625290	UnaryOperator	&		621404	0					
ANR	625291	Identifier	AS_OPEN_BRACE		621404	1					
ANR	625292	CompoundStatement		886:5:25738:25738	621404	1					
ANR	625293	ExpressionStatement	headerStack -> pop_back ( )	3337:6:97622:97645	621404	0	True				
ANR	625294	CallExpression	headerStack -> pop_back ( )		621404	0					
ANR	625295	Callee	headerStack -> pop_back		621404	0					
ANR	625296	PtrMemberAccess	headerStack -> pop_back		621404	0					
ANR	625297	Identifier	headerStack		621404	0					
ANR	625298	Identifier	pop_back		621404	1					
ANR	625299	ArgumentList			621404	1					
ANR	625300	ExpressionStatement	popped = headerStack -> back ( )	3338:6:97653:97681	621404	1	True				
ANR	625301	AssignmentExpression	popped = headerStack -> back ( )		621404	0		=			
ANR	625302	Identifier	popped		621404	0					
ANR	625303	CallExpression	headerStack -> back ( )		621404	1					
ANR	625304	Callee	headerStack -> back		621404	0					
ANR	625305	PtrMemberAccess	headerStack -> back		621404	0					
ANR	625306	Identifier	headerStack		621404	0					
ANR	625307	Identifier	back		621404	1					
ANR	625308	ArgumentList			621404	1					
ANR	625309	ExpressionStatement	headerStack -> pop_back ( )	3340:5:97695:97718	621404	2	True				
ANR	625310	CallExpression	headerStack -> pop_back ( )		621404	0					
ANR	625311	Callee	headerStack -> pop_back		621404	0					
ANR	625312	PtrMemberAccess	headerStack -> pop_back		621404	0					
ANR	625313	Identifier	headerStack		621404	0					
ANR	625314	Identifier	pop_back		621404	1					
ANR	625315	ArgumentList			621404	1					
ANR	625316	IfStatement	if ( headerStack -> empty ( ) )		621404	3					
ANR	625317	Condition	headerStack -> empty ( )	3342:9:97730:97749	621404	0	True				
ANR	625318	CallExpression	headerStack -> empty ( )		621404	0					
ANR	625319	Callee	headerStack -> empty		621404	0					
ANR	625320	PtrMemberAccess	headerStack -> empty		621404	0					
ANR	625321	Identifier	headerStack		621404	0					
ANR	625322	Identifier	empty		621404	1					
ANR	625323	ArgumentList			621404	1					
ANR	625324	ExpressionStatement	g_preprocessorCppExternCBrace = 0	3343:6:97758:97791	621404	1	True				
ANR	625325	AssignmentExpression	g_preprocessorCppExternCBrace = 0		621404	0		=			
ANR	625326	Identifier	g_preprocessorCppExternCBrace		621404	0					
ANR	625327	PrimaryExpression	0		621404	1					
ANR	625328	IfStatement	if ( ! namespaceIndent && ! headerStack -> empty ( ) && ( ( * headerStack ) . back ( ) == & AS_NAMESPACE || ( * headerStack ) . back ( ) == & AS_MODULE ) && i == 0 )		621404	4					
ANR	625329	Condition	! namespaceIndent && ! headerStack -> empty ( ) && ( ( * headerStack ) . back ( ) == & AS_NAMESPACE || ( * headerStack ) . back ( ) == & AS_MODULE ) && i == 0	3346:9:97872:98048	621404	0	True				
ANR	625330	AndExpression	! namespaceIndent && ! headerStack -> empty ( ) && ( ( * headerStack ) . back ( ) == & AS_NAMESPACE || ( * headerStack ) . back ( ) == & AS_MODULE ) && i == 0		621404	0		&&			
ANR	625331	UnaryOperationExpression	! namespaceIndent		621404	0					
ANR	625332	UnaryOperator	!		621404	0					
ANR	625333	Identifier	namespaceIndent		621404	1					
ANR	625334	AndExpression	! headerStack -> empty ( ) && ( ( * headerStack ) . back ( ) == & AS_NAMESPACE || ( * headerStack ) . back ( ) == & AS_MODULE ) && i == 0		621404	1		&&			
ANR	625335	UnaryOperationExpression	! headerStack -> empty ( )		621404	0					
ANR	625336	UnaryOperator	!		621404	0					
ANR	625337	CallExpression	headerStack -> empty ( )		621404	1					
ANR	625338	Callee	headerStack -> empty		621404	0					
ANR	625339	PtrMemberAccess	headerStack -> empty		621404	0					
ANR	625340	Identifier	headerStack		621404	0					
ANR	625341	Identifier	empty		621404	1					
ANR	625342	ArgumentList			621404	1					
ANR	625343	AndExpression	( ( * headerStack ) . back ( ) == & AS_NAMESPACE || ( * headerStack ) . back ( ) == & AS_MODULE ) && i == 0		621404	1		&&			
ANR	625344	OrExpression	( * headerStack ) . back ( ) == & AS_NAMESPACE || ( * headerStack ) . back ( ) == & AS_MODULE		621404	0		||			
ANR	625345	EqualityExpression	( * headerStack ) . back ( ) == & AS_NAMESPACE		621404	0		==			
ANR	625346	CallExpression	( * headerStack ) . back ( )		621404	0					
ANR	625347	Callee	( * headerStack ) . back		621404	0					
ANR	625348	MemberAccess	( * headerStack ) . back		621404	0					
ANR	625349	UnaryOperationExpression	* headerStack		621404	0					
ANR	625350	UnaryOperator	*		621404	0					
ANR	625351	Identifier	headerStack		621404	1					
ANR	625352	Identifier	back		621404	1					
ANR	625353	ArgumentList			621404	1					
ANR	625354	UnaryOperationExpression	& AS_NAMESPACE		621404	1					
ANR	625355	UnaryOperator	&		621404	0					
ANR	625356	Identifier	AS_NAMESPACE		621404	1					
ANR	625357	EqualityExpression	( * headerStack ) . back ( ) == & AS_MODULE		621404	1		==			
ANR	625358	CallExpression	( * headerStack ) . back ( )		621404	0					
ANR	625359	Callee	( * headerStack ) . back		621404	0					
ANR	625360	MemberAccess	( * headerStack ) . back		621404	0					
ANR	625361	UnaryOperationExpression	* headerStack		621404	0					
ANR	625362	UnaryOperator	*		621404	0					
ANR	625363	Identifier	headerStack		621404	1					
ANR	625364	Identifier	back		621404	1					
ANR	625365	ArgumentList			621404	1					
ANR	625366	UnaryOperationExpression	& AS_MODULE		621404	1					
ANR	625367	UnaryOperator	&		621404	0					
ANR	625368	Identifier	AS_MODULE		621404	1					
ANR	625369	EqualityExpression	i == 0		621404	1		==			
ANR	625370	Identifier	i		621404	0					
ANR	625371	PrimaryExpression	0		621404	1					
ANR	625372	ExpressionStatement	shouldIndentBracedLine = false	3350:6:98097:98127	621404	1	True				
ANR	625373	AssignmentExpression	shouldIndentBracedLine = false		621404	0		=			
ANR	625374	Identifier	shouldIndentBracedLine		621404	0					
ANR	625375	Identifier	false		621404	1					
ANR	625376	IfStatement	if ( ! tempStacks -> empty ( ) )		621404	5					
ANR	625377	Condition	! tempStacks -> empty ( )	3352:9:98139:98158	621404	0	True				
ANR	625378	UnaryOperationExpression	! tempStacks -> empty ( )		621404	0					
ANR	625379	UnaryOperator	!		621404	0					
ANR	625380	CallExpression	tempStacks -> empty ( )		621404	1					
ANR	625381	Callee	tempStacks -> empty		621404	0					
ANR	625382	PtrMemberAccess	tempStacks -> empty		621404	0					
ANR	625383	Identifier	tempStacks		621404	0					
ANR	625384	Identifier	empty		621404	1					
ANR	625385	ArgumentList			621404	1					
ANR	625386	CompoundStatement		904:6:26298:26346	621404	1					
ANR	625387	IdentifierDeclStatement	vector < const string * > * temp = tempStacks -> back ( ) ;	3354:6:98174:98222	621404	0	True				
ANR	625388	IdentifierDecl	* temp = tempStacks -> back ( )		621404	0					
ANR	625389	IdentifierDeclType	vector < const string * > *		621404	0					
ANR	625390	Identifier	temp		621404	1					
ANR	625391	AssignmentExpression	* temp = tempStacks -> back ( )		621404	2		=			
ANR	625392	Identifier	temp		621404	0					
ANR	625393	CallExpression	tempStacks -> back ( )		621404	1					
ANR	625394	Callee	tempStacks -> back		621404	0					
ANR	625395	PtrMemberAccess	tempStacks -> back		621404	0					
ANR	625396	Identifier	tempStacks		621404	0					
ANR	625397	Identifier	back		621404	1					
ANR	625398	ArgumentList			621404	1					
ANR	625399	ExpressionStatement	tempStacks -> pop_back ( )	3355:6:98230:98252	621404	1	True				
ANR	625400	CallExpression	tempStacks -> pop_back ( )		621404	0					
ANR	625401	Callee	tempStacks -> pop_back		621404	0					
ANR	625402	PtrMemberAccess	tempStacks -> pop_back		621404	0					
ANR	625403	Identifier	tempStacks		621404	0					
ANR	625404	Identifier	pop_back		621404	1					
ANR	625405	ArgumentList			621404	1					
ANR	625406	Statement	delete	3356:6:98260:98265	621404	2	True				
ANR	625407	ExpressionStatement	temp	3356:13:98267:98271	621404	3	True				
ANR	625408	Identifier	temp		621404	0					
ANR	625409	ExpressionStatement	ch = ' '	3360:4:98291:98299	621404	10	True				
ANR	625410	AssignmentExpression	ch = ' '		621404	0		=			
ANR	625411	Identifier	ch		621404	0					
ANR	625412	PrimaryExpression	' '		621404	1					
ANR	625413	IfStatement	if ( ! tempStacks -> back ( ) -> empty ( ) )		621404	1					
ANR	625414	Condition	! tempStacks -> back ( ) -> empty ( )	3372:7:98926:98953	621404	0	True				
ANR	625415	UnaryOperationExpression	! tempStacks -> back ( ) -> empty ( )		621404	0					
ANR	625416	UnaryOperator	!		621404	0					
ANR	625417	CallExpression	tempStacks -> back ( ) -> empty ( )		621404	1					
ANR	625418	Callee	tempStacks -> back ( ) -> empty		621404	0					
ANR	625419	PtrMemberAccess	tempStacks -> back ( ) -> empty		621404	0					
ANR	625420	CallExpression	tempStacks -> back ( )		621404	0					
ANR	625421	Callee	tempStacks -> back		621404	0					
ANR	625422	PtrMemberAccess	tempStacks -> back		621404	0					
ANR	625423	Identifier	tempStacks		621404	0					
ANR	625424	Identifier	back		621404	1					
ANR	625425	ArgumentList			621404	1					
ANR	625426	Identifier	empty		621404	1					
ANR	625427	ArgumentList			621404	1					
ANR	625428	WhileStatement	while ( ! tempStacks -> back ( ) -> empty ( ) )		621404	1					
ANR	625429	Condition	! tempStacks -> back ( ) -> empty ( )	3373:11:98967:98994	621404	0	True				
ANR	625430	UnaryOperationExpression	! tempStacks -> back ( ) -> empty ( )		621404	0					
ANR	625431	UnaryOperator	!		621404	0					
ANR	625432	CallExpression	tempStacks -> back ( ) -> empty ( )		621404	1					
ANR	625433	Callee	tempStacks -> back ( ) -> empty		621404	0					
ANR	625434	PtrMemberAccess	tempStacks -> back ( ) -> empty		621404	0					
ANR	625435	CallExpression	tempStacks -> back ( )		621404	0					
ANR	625436	Callee	tempStacks -> back		621404	0					
ANR	625437	PtrMemberAccess	tempStacks -> back		621404	0					
ANR	625438	Identifier	tempStacks		621404	0					
ANR	625439	Identifier	back		621404	1					
ANR	625440	ArgumentList			621404	1					
ANR	625441	Identifier	empty		621404	1					
ANR	625442	ArgumentList			621404	1					
ANR	625443	ExpressionStatement	tempStacks -> back ( ) -> pop_back ( )	3374:5:99002:99032	621404	1	True				
ANR	625444	CallExpression	tempStacks -> back ( ) -> pop_back ( )		621404	0					
ANR	625445	Callee	tempStacks -> back ( ) -> pop_back		621404	0					
ANR	625446	PtrMemberAccess	tempStacks -> back ( ) -> pop_back		621404	0					
ANR	625447	CallExpression	tempStacks -> back ( )		621404	0					
ANR	625448	Callee	tempStacks -> back		621404	0					
ANR	625449	PtrMemberAccess	tempStacks -> back		621404	0					
ANR	625450	Identifier	tempStacks		621404	0					
ANR	625451	Identifier	back		621404	1					
ANR	625452	ArgumentList			621404	1					
ANR	625453	Identifier	pop_back		621404	1					
ANR	625454	ArgumentList			621404	1					
ANR	625455	WhileStatement	while ( ! headerStack -> empty ( ) && headerStack -> back ( ) != & AS_OPEN_BRACE )		621404	2					
ANR	625456	Condition	! headerStack -> empty ( ) && headerStack -> back ( ) != & AS_OPEN_BRACE	3375:10:99044:99105	621404	0	True				
ANR	625457	AndExpression	! headerStack -> empty ( ) && headerStack -> back ( ) != & AS_OPEN_BRACE		621404	0		&&			
ANR	625458	UnaryOperationExpression	! headerStack -> empty ( )		621404	0					
ANR	625459	UnaryOperator	!		621404	0					
ANR	625460	CallExpression	headerStack -> empty ( )		621404	1					
ANR	625461	Callee	headerStack -> empty		621404	0					
ANR	625462	PtrMemberAccess	headerStack -> empty		621404	0					
ANR	625463	Identifier	headerStack		621404	0					
ANR	625464	Identifier	empty		621404	1					
ANR	625465	ArgumentList			621404	1					
ANR	625466	EqualityExpression	headerStack -> back ( ) != & AS_OPEN_BRACE		621404	1		!=			
ANR	625467	CallExpression	headerStack -> back ( )		621404	0					
ANR	625468	Callee	headerStack -> back		621404	0					
ANR	625469	PtrMemberAccess	headerStack -> back		621404	0					
ANR	625470	Identifier	headerStack		621404	0					
ANR	625471	Identifier	back		621404	1					
ANR	625472	ArgumentList			621404	1					
ANR	625473	UnaryOperationExpression	& AS_OPEN_BRACE		621404	1					
ANR	625474	UnaryOperator	&		621404	0					
ANR	625475	Identifier	AS_OPEN_BRACE		621404	1					
ANR	625476	CompoundStatement		926:3:27235:27235	621404	1					
ANR	625477	ExpressionStatement	tempStacks -> back ( ) -> emplace_back ( headerStack -> back ( ) )	3377:4:99117:99170	621404	0	True				
ANR	625478	CallExpression	tempStacks -> back ( ) -> emplace_back ( headerStack -> back ( ) )		621404	0					
ANR	625479	Callee	tempStacks -> back ( ) -> emplace_back		621404	0					
ANR	625480	PtrMemberAccess	tempStacks -> back ( ) -> emplace_back		621404	0					
ANR	625481	CallExpression	tempStacks -> back ( )		621404	0					
ANR	625482	Callee	tempStacks -> back		621404	0					
ANR	625483	PtrMemberAccess	tempStacks -> back		621404	0					
ANR	625484	Identifier	tempStacks		621404	0					
ANR	625485	Identifier	back		621404	1					
ANR	625486	ArgumentList			621404	1					
ANR	625487	Identifier	emplace_back		621404	1					
ANR	625488	ArgumentList	headerStack -> back ( )		621404	1					
ANR	625489	Argument	headerStack -> back ( )		621404	0					
ANR	625490	CallExpression	headerStack -> back ( )		621404	0					
ANR	625491	Callee	headerStack -> back		621404	0					
ANR	625492	PtrMemberAccess	headerStack -> back		621404	0					
ANR	625493	Identifier	headerStack		621404	0					
ANR	625494	Identifier	back		621404	1					
ANR	625495	ArgumentList			621404	1					
ANR	625496	ExpressionStatement	headerStack -> pop_back ( )	3378:4:99176:99199	621404	1	True				
ANR	625497	CallExpression	headerStack -> pop_back ( )		621404	0					
ANR	625498	Callee	headerStack -> pop_back		621404	0					
ANR	625499	PtrMemberAccess	headerStack -> pop_back		621404	0					
ANR	625500	Identifier	headerStack		621404	0					
ANR	625501	Identifier	pop_back		621404	1					
ANR	625502	ArgumentList			621404	1					
ANR	625503	IfStatement	if ( parenDepth == 0 && ch == ';' )		621404	3					
ANR	625504	Condition	parenDepth == 0 && ch == ';'	3381:7:99214:99241	621404	0	True				
ANR	625505	AndExpression	parenDepth == 0 && ch == ';'		621404	0		&&			
ANR	625506	EqualityExpression	parenDepth == 0		621404	0		==			
ANR	625507	Identifier	parenDepth		621404	0					
ANR	625508	PrimaryExpression	0		621404	1					
ANR	625509	EqualityExpression	ch == ';'		621404	1		==			
ANR	625510	Identifier	ch		621404	0					
ANR	625511	PrimaryExpression	';'		621404	1					
ANR	625512	ExpressionStatement	isContinuation = false	3382:4:99248:99270	621404	1	True				
ANR	625513	AssignmentExpression	isContinuation = false		621404	0		=			
ANR	625514	Identifier	isContinuation		621404	0					
ANR	625515	Identifier	false		621404	1					
ANR	625516	IfStatement	if ( isInObjCMethodDefinition )		621404	4					
ANR	625517	Condition	isInObjCMethodDefinition	3384:7:99280:99303	621404	0	True				
ANR	625518	Identifier	isInObjCMethodDefinition		621404	0					
ANR	625519	CompoundStatement		935:3:27433:27433	621404	1					
ANR	625520	ExpressionStatement	objCColonAlignSubsequent = 0	3386:4:99315:99343	621404	0	True				
ANR	625521	AssignmentExpression	objCColonAlignSubsequent = 0		621404	0		=			
ANR	625522	Identifier	objCColonAlignSubsequent		621404	0					
ANR	625523	PrimaryExpression	0		621404	1					
ANR	625524	ExpressionStatement	isImmediatelyPostObjCMethodDefinition = true	3387:4:99349:99393	621404	1	True				
ANR	625525	AssignmentExpression	isImmediatelyPostObjCMethodDefinition = true		621404	0		=			
ANR	625526	Identifier	isImmediatelyPostObjCMethodDefinition		621404	0					
ANR	625527	Identifier	true		621404	1					
ANR	625528	ExpressionStatement	previousLastLineHeader = nullptr	3390:3:99404:99436	621404	5	True				
ANR	625529	AssignmentExpression	previousLastLineHeader = nullptr		621404	0		=			
ANR	625530	Identifier	previousLastLineHeader		621404	0					
ANR	625531	Identifier	nullptr		621404	1					
ANR	625532	ExpressionStatement	isInClassHeader = false	3391:3:99441:99464	621404	6	True				
ANR	625533	AssignmentExpression	isInClassHeader = false		621404	0		=			
ANR	625534	Identifier	isInClassHeader		621404	0					
ANR	625535	Identifier	false		621404	1					
ANR	625536	ExpressionStatement	isInEnum = false	3392:3:99492:99508	621404	7	True				
ANR	625537	AssignmentExpression	isInEnum = false		621404	0		=			
ANR	625538	Identifier	isInEnum		621404	0					
ANR	625539	Identifier	false		621404	1					
ANR	625540	ExpressionStatement	isInEnumTypeID = false	3393:3:99513:99535	621404	8	True				
ANR	625541	AssignmentExpression	isInEnumTypeID = false		621404	0		=			
ANR	625542	Identifier	isInEnumTypeID		621404	0					
ANR	625543	Identifier	false		621404	1					
ANR	625544	ExpressionStatement	isInQuestion = false	3394:3:99540:99560	621404	9	True				
ANR	625545	AssignmentExpression	isInQuestion = false		621404	0		=			
ANR	625546	Identifier	isInQuestion		621404	0					
ANR	625547	Identifier	false		621404	1					
ANR	625548	ExpressionStatement	isInTemplate = false	3395:3:99565:99585	621404	10	True				
ANR	625549	AssignmentExpression	isInTemplate = false		621404	0		=			
ANR	625550	Identifier	isInTemplate		621404	0					
ANR	625551	Identifier	false		621404	1					
ANR	625552	ExpressionStatement	isInObjCInterface = false	3396:3:99590:99615	621404	11	True				
ANR	625553	AssignmentExpression	isInObjCInterface = false		621404	0		=			
ANR	625554	Identifier	isInObjCInterface		621404	0					
ANR	625555	Identifier	false		621404	1					
ANR	625556	ExpressionStatement	foundPreCommandHeader = false	3397:3:99620:99649	621404	12	True				
ANR	625557	AssignmentExpression	foundPreCommandHeader = false		621404	0		=			
ANR	625558	Identifier	foundPreCommandHeader		621404	0					
ANR	625559	Identifier	false		621404	1					
ANR	625560	ExpressionStatement	foundPreCommandMacro = false	3398:3:99654:99682	621404	13	True				
ANR	625561	AssignmentExpression	foundPreCommandMacro = false		621404	0		=			
ANR	625562	Identifier	foundPreCommandMacro		621404	0					
ANR	625563	Identifier	false		621404	1					
ANR	625564	ExpressionStatement	squareBracketCount = 0	3399:3:99687:99709	621404	14	True				
ANR	625565	AssignmentExpression	squareBracketCount = 0		621404	0		=			
ANR	625566	Identifier	squareBracketCount		621404	0					
ANR	625567	PrimaryExpression	0		621404	1					
ANR	625568	ContinueStatement	continue ;	3401:3:99715:99723	621404	15	True				
ANR	625569	IfStatement	if ( isPotentialHeader )		621404	25					
ANR	625570	Condition	isPotentialHeader	3404:6:99736:99752	621404	0	True				
ANR	625571	Identifier	isPotentialHeader		621404	0					
ANR	625572	CompoundStatement		1057:3:31212:31249	621404	1					
ANR	625573	IfStatement	if ( ! isInTemplate && ! ( isCStyle ( ) && parenDepth > 0 ) )		621404	0					
ANR	625574	Condition	! isInTemplate && ! ( isCStyle ( ) && parenDepth > 0 )	3408:7:99915:99962	621404	0	True				
ANR	625575	AndExpression	! isInTemplate && ! ( isCStyle ( ) && parenDepth > 0 )		621404	0		&&			
ANR	625576	UnaryOperationExpression	! isInTemplate		621404	0					
ANR	625577	UnaryOperator	!		621404	0					
ANR	625578	Identifier	isInTemplate		621404	1					
ANR	625579	UnaryOperationExpression	! ( isCStyle ( ) && parenDepth > 0 )		621404	1					
ANR	625580	UnaryOperator	!		621404	0					
ANR	625581	AndExpression	isCStyle ( ) && parenDepth > 0		621404	1		&&			
ANR	625582	CallExpression	isCStyle ( )		621404	0					
ANR	625583	Callee	isCStyle		621404	0					
ANR	625584	Identifier	isCStyle		621404	0					
ANR	625585	ArgumentList			621404	1					
ANR	625586	RelationalExpression	parenDepth > 0		621404	1		>			
ANR	625587	Identifier	parenDepth		621404	0					
ANR	625588	PrimaryExpression	0		621404	1					
ANR	625589	CompoundStatement		960:4:28098:28163	621404	1					
ANR	625590	IdentifierDeclStatement	"const string * newHeader = findHeader ( line , i , preBlockStatements ) ;"	3410:4:99974:100039	621404	0	True				
ANR	625591	IdentifierDecl	"* newHeader = findHeader ( line , i , preBlockStatements )"		621404	0					
ANR	625592	IdentifierDeclType	const string *		621404	0					
ANR	625593	Identifier	newHeader		621404	1					
ANR	625594	AssignmentExpression	"* newHeader = findHeader ( line , i , preBlockStatements )"		621404	2		=			
ANR	625595	Identifier	newHeader		621404	0					
ANR	625596	CallExpression	"findHeader ( line , i , preBlockStatements )"		621404	1					
ANR	625597	Callee	findHeader		621404	0					
ANR	625598	Identifier	findHeader		621404	0					
ANR	625599	ArgumentList	line		621404	1					
ANR	625600	Argument	line		621404	0					
ANR	625601	Identifier	line		621404	0					
ANR	625602	Argument	i		621404	1					
ANR	625603	Identifier	i		621404	0					
ANR	625604	Argument	preBlockStatements		621404	2					
ANR	625605	Identifier	preBlockStatements		621404	0					
ANR	625606	IfStatement	if ( newHeader == & AS_MODULE )		621404	1					
ANR	625607	Condition	newHeader == & AS_MODULE	3412:8:100080:100102	621404	0	True				
ANR	625608	EqualityExpression	newHeader == & AS_MODULE		621404	0		==			
ANR	625609	Identifier	newHeader		621404	0					
ANR	625610	UnaryOperationExpression	& AS_MODULE		621404	1					
ANR	625611	UnaryOperator	&		621404	0					
ANR	625612	Identifier	AS_MODULE		621404	1					
ANR	625613	CompoundStatement		964:5:28240:28303	621404	1					
ANR	625614	IdentifierDeclStatement	"char nextChar = peekNextChar ( line , i + newHeader -> length ( ) - 1 ) ;"	3414:5:100116:100179	621404	0	True				
ANR	625615	IdentifierDecl	"nextChar = peekNextChar ( line , i + newHeader -> length ( ) - 1 )"		621404	0					
ANR	625616	IdentifierDeclType	char		621404	0					
ANR	625617	Identifier	nextChar		621404	1					
ANR	625618	AssignmentExpression	"nextChar = peekNextChar ( line , i + newHeader -> length ( ) - 1 )"		621404	2		=			
ANR	625619	Identifier	nextChar		621404	0					
ANR	625620	CallExpression	"peekNextChar ( line , i + newHeader -> length ( ) - 1 )"		621404	1					
ANR	625621	Callee	peekNextChar		621404	0					
ANR	625622	Identifier	peekNextChar		621404	0					
ANR	625623	ArgumentList	line		621404	1					
ANR	625624	Argument	line		621404	0					
ANR	625625	Identifier	line		621404	0					
ANR	625626	Argument	i + newHeader -> length ( ) - 1		621404	1					
ANR	625627	AdditiveExpression	i + newHeader -> length ( ) - 1		621404	0		+			
ANR	625628	Identifier	i		621404	0					
ANR	625629	AdditiveExpression	newHeader -> length ( ) - 1		621404	1		-			
ANR	625630	CallExpression	newHeader -> length ( )		621404	0					
ANR	625631	Callee	newHeader -> length		621404	0					
ANR	625632	PtrMemberAccess	newHeader -> length		621404	0					
ANR	625633	Identifier	newHeader		621404	0					
ANR	625634	Identifier	length		621404	1					
ANR	625635	ArgumentList			621404	1					
ANR	625636	PrimaryExpression	1		621404	1					
ANR	625637	IfStatement	if ( prevNonSpaceCh == ')' || ! isalpha ( nextChar ) )		621404	1					
ANR	625638	Condition	prevNonSpaceCh == ')' || ! isalpha ( nextChar )	3415:9:100190:100232	621404	0	True				
ANR	625639	OrExpression	prevNonSpaceCh == ')' || ! isalpha ( nextChar )		621404	0		||			
ANR	625640	EqualityExpression	prevNonSpaceCh == ')'		621404	0		==			
ANR	625641	Identifier	prevNonSpaceCh		621404	0					
ANR	625642	PrimaryExpression	')'		621404	1					
ANR	625643	UnaryOperationExpression	! isalpha ( nextChar )		621404	1					
ANR	625644	UnaryOperator	!		621404	0					
ANR	625645	CallExpression	isalpha ( nextChar )		621404	1					
ANR	625646	Callee	isalpha		621404	0					
ANR	625647	Identifier	isalpha		621404	0					
ANR	625648	ArgumentList	nextChar		621404	1					
ANR	625649	Argument	nextChar		621404	0					
ANR	625650	Identifier	nextChar		621404	0					
ANR	625651	ExpressionStatement	newHeader = nullptr	3416:6:100241:100260	621404	1	True				
ANR	625652	AssignmentExpression	newHeader = nullptr		621404	0		=			
ANR	625653	Identifier	newHeader		621404	0					
ANR	625654	Identifier	nullptr		621404	1					
ANR	625655	IfStatement	if ( newHeader != nullptr && ! ( isCStyle ( ) && newHeader == & AS_CLASS && isInEnum ) )		621404	2					
ANR	625656	Condition	newHeader != nullptr && ! ( isCStyle ( ) && newHeader == & AS_CLASS && isInEnum )	3418:8:100276:100362	621404	0	True				
ANR	625657	AndExpression	newHeader != nullptr && ! ( isCStyle ( ) && newHeader == & AS_CLASS && isInEnum )		621404	0		&&			
ANR	625658	EqualityExpression	newHeader != nullptr		621404	0		!=			
ANR	625659	Identifier	newHeader		621404	0					
ANR	625660	Identifier	nullptr		621404	1					
ANR	625661	UnaryOperationExpression	! ( isCStyle ( ) && newHeader == & AS_CLASS && isInEnum )		621404	1					
ANR	625662	UnaryOperator	!		621404	0					
ANR	625663	AndExpression	isCStyle ( ) && newHeader == & AS_CLASS && isInEnum		621404	1		&&			
ANR	625664	CallExpression	isCStyle ( )		621404	0					
ANR	625665	Callee	isCStyle		621404	0					
ANR	625666	Identifier	isCStyle		621404	0					
ANR	625667	ArgumentList			621404	1					
ANR	625668	AndExpression	newHeader == & AS_CLASS && isInEnum		621404	1		&&			
ANR	625669	EqualityExpression	newHeader == & AS_CLASS		621404	0		==			
ANR	625670	Identifier	newHeader		621404	0					
ANR	625671	UnaryOperationExpression	& AS_CLASS		621404	1					
ANR	625672	UnaryOperator	&		621404	0					
ANR	625673	Identifier	AS_CLASS		621404	1					
ANR	625674	Identifier	isInEnum		621404	1					
ANR	625675	CompoundStatement		970:4:28516:28516	621404	1					
ANR	625676	IfStatement	if ( ! isSharpStyle ( ) )		621404	0					
ANR	625677	Condition	! isSharpStyle ( )	3421:9:100403:100417	621404	0	True				
ANR	625678	UnaryOperationExpression	! isSharpStyle ( )		621404	0					
ANR	625679	UnaryOperator	!		621404	0					
ANR	625680	CallExpression	isSharpStyle ( )		621404	1					
ANR	625681	Callee	isSharpStyle		621404	0					
ANR	625682	Identifier	isSharpStyle		621404	0					
ANR	625683	ArgumentList			621404	1					
ANR	625684	ExpressionStatement	headerStack -> emplace_back ( newHeader )	3422:6:100426:100462	621404	1	True				
ANR	625685	CallExpression	headerStack -> emplace_back ( newHeader )		621404	0					
ANR	625686	Callee	headerStack -> emplace_back		621404	0					
ANR	625687	PtrMemberAccess	headerStack -> emplace_back		621404	0					
ANR	625688	Identifier	headerStack		621404	0					
ANR	625689	Identifier	emplace_back		621404	1					
ANR	625690	ArgumentList	newHeader		621404	1					
ANR	625691	Argument	newHeader		621404	0					
ANR	625692	Identifier	newHeader		621404	0					
ANR	625693	ElseStatement	else		621404	0					
ANR	625694	IfStatement	if ( ! ( newHeader == & AS_WHERE || ( ( newHeader == & AS_CLASS || newHeader == & AS_STRUCT ) && ! headerStack -> empty ( ) && ( headerStack -> back ( ) == & AS_CLASS || headerStack -> back ( ) == & AS_STRUCT ) ) ) )		621404	0					
ANR	625695	Condition	! ( newHeader == & AS_WHERE || ( ( newHeader == & AS_CLASS || newHeader == & AS_STRUCT ) && ! headerStack -> empty ( ) && ( headerStack -> back ( ) == & AS_CLASS || headerStack -> back ( ) == & AS_STRUCT ) ) )	3425:14:100579:100840	621404	0	True				
ANR	625696	UnaryOperationExpression	! ( newHeader == & AS_WHERE || ( ( newHeader == & AS_CLASS || newHeader == & AS_STRUCT ) && ! headerStack -> empty ( ) && ( headerStack -> back ( ) == & AS_CLASS || headerStack -> back ( ) == & AS_STRUCT ) ) )		621404	0					
ANR	625697	UnaryOperator	!		621404	0					
ANR	625698	OrExpression	newHeader == & AS_WHERE || ( ( newHeader == & AS_CLASS || newHeader == & AS_STRUCT ) && ! headerStack -> empty ( ) && ( headerStack -> back ( ) == & AS_CLASS || headerStack -> back ( ) == & AS_STRUCT ) )		621404	1		||			
ANR	625699	EqualityExpression	newHeader == & AS_WHERE		621404	0		==			
ANR	625700	Identifier	newHeader		621404	0					
ANR	625701	UnaryOperationExpression	& AS_WHERE		621404	1					
ANR	625702	UnaryOperator	&		621404	0					
ANR	625703	Identifier	AS_WHERE		621404	1					
ANR	625704	AndExpression	( newHeader == & AS_CLASS || newHeader == & AS_STRUCT ) && ! headerStack -> empty ( ) && ( headerStack -> back ( ) == & AS_CLASS || headerStack -> back ( ) == & AS_STRUCT )		621404	1		&&			
ANR	625705	OrExpression	newHeader == & AS_CLASS || newHeader == & AS_STRUCT		621404	0		||			
ANR	625706	EqualityExpression	newHeader == & AS_CLASS		621404	0		==			
ANR	625707	Identifier	newHeader		621404	0					
ANR	625708	UnaryOperationExpression	& AS_CLASS		621404	1					
ANR	625709	UnaryOperator	&		621404	0					
ANR	625710	Identifier	AS_CLASS		621404	1					
ANR	625711	EqualityExpression	newHeader == & AS_STRUCT		621404	1		==			
ANR	625712	Identifier	newHeader		621404	0					
ANR	625713	UnaryOperationExpression	& AS_STRUCT		621404	1					
ANR	625714	UnaryOperator	&		621404	0					
ANR	625715	Identifier	AS_STRUCT		621404	1					
ANR	625716	AndExpression	! headerStack -> empty ( ) && ( headerStack -> back ( ) == & AS_CLASS || headerStack -> back ( ) == & AS_STRUCT )		621404	1		&&			
ANR	625717	UnaryOperationExpression	! headerStack -> empty ( )		621404	0					
ANR	625718	UnaryOperator	!		621404	0					
ANR	625719	CallExpression	headerStack -> empty ( )		621404	1					
ANR	625720	Callee	headerStack -> empty		621404	0					
ANR	625721	PtrMemberAccess	headerStack -> empty		621404	0					
ANR	625722	Identifier	headerStack		621404	0					
ANR	625723	Identifier	empty		621404	1					
ANR	625724	ArgumentList			621404	1					
ANR	625725	OrExpression	headerStack -> back ( ) == & AS_CLASS || headerStack -> back ( ) == & AS_STRUCT		621404	1		||			
ANR	625726	EqualityExpression	headerStack -> back ( ) == & AS_CLASS		621404	0		==			
ANR	625727	CallExpression	headerStack -> back ( )		621404	0					
ANR	625728	Callee	headerStack -> back		621404	0					
ANR	625729	PtrMemberAccess	headerStack -> back		621404	0					
ANR	625730	Identifier	headerStack		621404	0					
ANR	625731	Identifier	back		621404	1					
ANR	625732	ArgumentList			621404	1					
ANR	625733	UnaryOperationExpression	& AS_CLASS		621404	1					
ANR	625734	UnaryOperator	&		621404	0					
ANR	625735	Identifier	AS_CLASS		621404	1					
ANR	625736	EqualityExpression	headerStack -> back ( ) == & AS_STRUCT		621404	1		==			
ANR	625737	CallExpression	headerStack -> back ( )		621404	0					
ANR	625738	Callee	headerStack -> back		621404	0					
ANR	625739	PtrMemberAccess	headerStack -> back		621404	0					
ANR	625740	Identifier	headerStack		621404	0					
ANR	625741	Identifier	back		621404	1					
ANR	625742	ArgumentList			621404	1					
ANR	625743	UnaryOperationExpression	& AS_STRUCT		621404	1					
ANR	625744	UnaryOperator	&		621404	0					
ANR	625745	Identifier	AS_STRUCT		621404	1					
ANR	625746	ExpressionStatement	headerStack -> emplace_back ( newHeader )	3430:6:100849:100885	621404	1	True				
ANR	625747	CallExpression	headerStack -> emplace_back ( newHeader )		621404	0					
ANR	625748	Callee	headerStack -> emplace_back		621404	0					
ANR	625749	PtrMemberAccess	headerStack -> emplace_back		621404	0					
ANR	625750	Identifier	headerStack		621404	0					
ANR	625751	Identifier	emplace_back		621404	1					
ANR	625752	ArgumentList	newHeader		621404	1					
ANR	625753	Argument	newHeader		621404	0					
ANR	625754	Identifier	newHeader		621404	0					
ANR	625755	IfStatement	if ( ! headerStack -> empty ( ) )		621404	1					
ANR	625756	Condition	! headerStack -> empty ( )	3432:9:100897:100917	621404	0	True				
ANR	625757	UnaryOperationExpression	! headerStack -> empty ( )		621404	0					
ANR	625758	UnaryOperator	!		621404	0					
ANR	625759	CallExpression	headerStack -> empty ( )		621404	1					
ANR	625760	Callee	headerStack -> empty		621404	0					
ANR	625761	PtrMemberAccess	headerStack -> empty		621404	0					
ANR	625762	Identifier	headerStack		621404	0					
ANR	625763	Identifier	empty		621404	1					
ANR	625764	ArgumentList			621404	1					
ANR	625765	CompoundStatement		983:5:29049:29049	621404	1					
ANR	625766	IfStatement	if ( ( * headerStack ) . back ( ) == & AS_CLASS || ( * headerStack ) . back ( ) == & AS_STRUCT || ( * headerStack ) . back ( ) == & AS_INTERFACE )		621404	0					
ANR	625767	Condition	( * headerStack ) . back ( ) == & AS_CLASS || ( * headerStack ) . back ( ) == & AS_STRUCT || ( * headerStack ) . back ( ) == & AS_INTERFACE	3434:10:100937:101079	621404	0	True				
ANR	625768	OrExpression	( * headerStack ) . back ( ) == & AS_CLASS || ( * headerStack ) . back ( ) == & AS_STRUCT || ( * headerStack ) . back ( ) == & AS_INTERFACE		621404	0		||			
ANR	625769	EqualityExpression	( * headerStack ) . back ( ) == & AS_CLASS		621404	0		==			
ANR	625770	CallExpression	( * headerStack ) . back ( )		621404	0					
ANR	625771	Callee	( * headerStack ) . back		621404	0					
ANR	625772	MemberAccess	( * headerStack ) . back		621404	0					
ANR	625773	UnaryOperationExpression	* headerStack		621404	0					
ANR	625774	UnaryOperator	*		621404	0					
ANR	625775	Identifier	headerStack		621404	1					
ANR	625776	Identifier	back		621404	1					
ANR	625777	ArgumentList			621404	1					
ANR	625778	UnaryOperationExpression	& AS_CLASS		621404	1					
ANR	625779	UnaryOperator	&		621404	0					
ANR	625780	Identifier	AS_CLASS		621404	1					
ANR	625781	OrExpression	( * headerStack ) . back ( ) == & AS_STRUCT || ( * headerStack ) . back ( ) == & AS_INTERFACE		621404	1		||			
ANR	625782	EqualityExpression	( * headerStack ) . back ( ) == & AS_STRUCT		621404	0		==			
ANR	625783	CallExpression	( * headerStack ) . back ( )		621404	0					
ANR	625784	Callee	( * headerStack ) . back		621404	0					
ANR	625785	MemberAccess	( * headerStack ) . back		621404	0					
ANR	625786	UnaryOperationExpression	* headerStack		621404	0					
ANR	625787	UnaryOperator	*		621404	0					
ANR	625788	Identifier	headerStack		621404	1					
ANR	625789	Identifier	back		621404	1					
ANR	625790	ArgumentList			621404	1					
ANR	625791	UnaryOperationExpression	& AS_STRUCT		621404	1					
ANR	625792	UnaryOperator	&		621404	0					
ANR	625793	Identifier	AS_STRUCT		621404	1					
ANR	625794	EqualityExpression	( * headerStack ) . back ( ) == & AS_INTERFACE		621404	1		==			
ANR	625795	CallExpression	( * headerStack ) . back ( )		621404	0					
ANR	625796	Callee	( * headerStack ) . back		621404	0					
ANR	625797	MemberAccess	( * headerStack ) . back		621404	0					
ANR	625798	UnaryOperationExpression	* headerStack		621404	0					
ANR	625799	UnaryOperator	*		621404	0					
ANR	625800	Identifier	headerStack		621404	1					
ANR	625801	Identifier	back		621404	1					
ANR	625802	ArgumentList			621404	1					
ANR	625803	UnaryOperationExpression	& AS_INTERFACE		621404	1					
ANR	625804	UnaryOperator	&		621404	0					
ANR	625805	Identifier	AS_INTERFACE		621404	1					
ANR	625806	CompoundStatement		987:6:29212:29212	621404	1					
ANR	625807	ExpressionStatement	isInClassHeader = true	3438:7:101097:101119	621404	0	True				
ANR	625808	AssignmentExpression	isInClassHeader = true		621404	0		=			
ANR	625809	Identifier	isInClassHeader		621404	0					
ANR	625810	Identifier	true		621404	1					
ANR	625811	ElseStatement	else		621404	0					
ANR	625812	IfStatement	if ( ( * headerStack ) . back ( ) == & AS_NAMESPACE || ( * headerStack ) . back ( ) == & AS_MODULE )		621404	0					
ANR	625813	Condition	( * headerStack ) . back ( ) == & AS_NAMESPACE || ( * headerStack ) . back ( ) == & AS_MODULE	3440:15:101144:101235	621404	0	True				
ANR	625814	OrExpression	( * headerStack ) . back ( ) == & AS_NAMESPACE || ( * headerStack ) . back ( ) == & AS_MODULE		621404	0		||			
ANR	625815	EqualityExpression	( * headerStack ) . back ( ) == & AS_NAMESPACE		621404	0		==			
ANR	625816	CallExpression	( * headerStack ) . back ( )		621404	0					
ANR	625817	Callee	( * headerStack ) . back		621404	0					
ANR	625818	MemberAccess	( * headerStack ) . back		621404	0					
ANR	625819	UnaryOperationExpression	* headerStack		621404	0					
ANR	625820	UnaryOperator	*		621404	0					
ANR	625821	Identifier	headerStack		621404	1					
ANR	625822	Identifier	back		621404	1					
ANR	625823	ArgumentList			621404	1					
ANR	625824	UnaryOperationExpression	& AS_NAMESPACE		621404	1					
ANR	625825	UnaryOperator	&		621404	0					
ANR	625826	Identifier	AS_NAMESPACE		621404	1					
ANR	625827	EqualityExpression	( * headerStack ) . back ( ) == & AS_MODULE		621404	1		==			
ANR	625828	CallExpression	( * headerStack ) . back ( )		621404	0					
ANR	625829	Callee	( * headerStack ) . back		621404	0					
ANR	625830	MemberAccess	( * headerStack ) . back		621404	0					
ANR	625831	UnaryOperationExpression	* headerStack		621404	0					
ANR	625832	UnaryOperator	*		621404	0					
ANR	625833	Identifier	headerStack		621404	1					
ANR	625834	Identifier	back		621404	1					
ANR	625835	ArgumentList			621404	1					
ANR	625836	UnaryOperationExpression	& AS_MODULE		621404	1					
ANR	625837	UnaryOperator	&		621404	0					
ANR	625838	Identifier	AS_MODULE		621404	1					
ANR	625839	CompoundStatement		992:6:29368:29368	621404	1					
ANR	625840	IfStatement	if ( ! continuationIndentStack -> empty ( ) )		621404	0					
ANR	625841	Condition	! continuationIndentStack -> empty ( )	3444:11:101308:101340	621404	0	True				
ANR	625842	UnaryOperationExpression	! continuationIndentStack -> empty ( )		621404	0					
ANR	625843	UnaryOperator	!		621404	0					
ANR	625844	CallExpression	continuationIndentStack -> empty ( )		621404	1					
ANR	625845	Callee	continuationIndentStack -> empty		621404	0					
ANR	625846	PtrMemberAccess	continuationIndentStack -> empty		621404	0					
ANR	625847	Identifier	continuationIndentStack		621404	0					
ANR	625848	Identifier	empty		621404	1					
ANR	625849	ArgumentList			621404	1					
ANR	625850	ExpressionStatement	continuationIndentStack -> pop_back ( )	3445:8:101351:101386	621404	1	True				
ANR	625851	CallExpression	continuationIndentStack -> pop_back ( )		621404	0					
ANR	625852	Callee	continuationIndentStack -> pop_back		621404	0					
ANR	625853	PtrMemberAccess	continuationIndentStack -> pop_back		621404	0					
ANR	625854	Identifier	continuationIndentStack		621404	0					
ANR	625855	Identifier	pop_back		621404	1					
ANR	625856	ArgumentList			621404	1					
ANR	625857	ExpressionStatement	isContinuation = false	3446:7:101395:101417	621404	1	True				
ANR	625858	AssignmentExpression	isContinuation = false		621404	0		=			
ANR	625859	Identifier	isContinuation		621404	0					
ANR	625860	Identifier	false		621404	1					
ANR	625861	ExpressionStatement	i += newHeader -> length ( ) - 1	3450:5:101440:101468	621404	2	True				
ANR	625862	AssignmentExpression	i += newHeader -> length ( ) - 1		621404	0		+=			
ANR	625863	Identifier	i		621404	0					
ANR	625864	AdditiveExpression	newHeader -> length ( ) - 1		621404	1		-			
ANR	625865	CallExpression	newHeader -> length ( )		621404	0					
ANR	625866	Callee	newHeader -> length		621404	0					
ANR	625867	PtrMemberAccess	newHeader -> length		621404	0					
ANR	625868	Identifier	newHeader		621404	0					
ANR	625869	Identifier	length		621404	1					
ANR	625870	ArgumentList			621404	1					
ANR	625871	PrimaryExpression	1		621404	1					
ANR	625872	ContinueStatement	continue ;	3451:5:101475:101483	621404	3	True				
ANR	625873	IdentifierDeclStatement	"const string * foundIndentableHeader = findHeader ( line , i , indentableHeaders ) ;"	3454:3:101499:101575	621404	1	True				
ANR	625874	IdentifierDecl	"* foundIndentableHeader = findHeader ( line , i , indentableHeaders )"		621404	0					
ANR	625875	IdentifierDeclType	const string *		621404	0					
ANR	625876	Identifier	foundIndentableHeader		621404	1					
ANR	625877	AssignmentExpression	"* foundIndentableHeader = findHeader ( line , i , indentableHeaders )"		621404	2		=			
ANR	625878	Identifier	foundIndentableHeader		621404	0					
ANR	625879	CallExpression	"findHeader ( line , i , indentableHeaders )"		621404	1					
ANR	625880	Callee	findHeader		621404	0					
ANR	625881	Identifier	findHeader		621404	0					
ANR	625882	ArgumentList	line		621404	1					
ANR	625883	Argument	line		621404	0					
ANR	625884	Identifier	line		621404	0					
ANR	625885	Argument	i		621404	1					
ANR	625886	Identifier	i		621404	0					
ANR	625887	Argument	indentableHeaders		621404	2					
ANR	625888	Identifier	indentableHeaders		621404	0					
ANR	625889	IfStatement	if ( foundIndentableHeader != nullptr )		621404	2					
ANR	625890	Condition	foundIndentableHeader != nullptr	3456:7:101585:101616	621404	0	True				
ANR	625891	EqualityExpression	foundIndentableHeader != nullptr		621404	0		!=			
ANR	625892	Identifier	foundIndentableHeader		621404	0					
ANR	625893	Identifier	nullptr		621404	1					
ANR	625894	CompoundStatement		1007:3:29746:29746	621404	1					
ANR	625895	ExpressionStatement	i += foundIndentableHeader -> length ( ) - 1	3459:4:101694:101734	621404	0	True				
ANR	625896	AssignmentExpression	i += foundIndentableHeader -> length ( ) - 1		621404	0		+=			
ANR	625897	Identifier	i		621404	0					
ANR	625898	AdditiveExpression	foundIndentableHeader -> length ( ) - 1		621404	1		-			
ANR	625899	CallExpression	foundIndentableHeader -> length ( )		621404	0					
ANR	625900	Callee	foundIndentableHeader -> length		621404	0					
ANR	625901	PtrMemberAccess	foundIndentableHeader -> length		621404	0					
ANR	625902	Identifier	foundIndentableHeader		621404	0					
ANR	625903	Identifier	length		621404	1					
ANR	625904	ArgumentList			621404	1					
ANR	625905	PrimaryExpression	1		621404	1					
ANR	625906	IfStatement	if ( ! isInOperator && ! isInTemplate && ! isNonInStatementArray )		621404	1					
ANR	625907	Condition	! isInOperator && ! isInTemplate && ! isNonInStatementArray	3460:8:101744:101799	621404	0	True				
ANR	625908	AndExpression	! isInOperator && ! isInTemplate && ! isNonInStatementArray		621404	0		&&			
ANR	625909	UnaryOperationExpression	! isInOperator		621404	0					
ANR	625910	UnaryOperator	!		621404	0					
ANR	625911	Identifier	isInOperator		621404	1					
ANR	625912	AndExpression	! isInTemplate && ! isNonInStatementArray		621404	1		&&			
ANR	625913	UnaryOperationExpression	! isInTemplate		621404	0					
ANR	625914	UnaryOperator	!		621404	0					
ANR	625915	Identifier	isInTemplate		621404	1					
ANR	625916	UnaryOperationExpression	! isNonInStatementArray		621404	1					
ANR	625917	UnaryOperator	!		621404	0					
ANR	625918	Identifier	isNonInStatementArray		621404	1					
ANR	625919	CompoundStatement		1011:4:29930:29930	621404	1					
ANR	625920	ExpressionStatement	"registerContinuationIndent ( line , i , spaceIndentCount , tabIncrementIn , 0 , false )"	3462:5:101813:101892	621404	0	True				
ANR	625921	CallExpression	"registerContinuationIndent ( line , i , spaceIndentCount , tabIncrementIn , 0 , false )"		621404	0					
ANR	625922	Callee	registerContinuationIndent		621404	0					
ANR	625923	Identifier	registerContinuationIndent		621404	0					
ANR	625924	ArgumentList	line		621404	1					
ANR	625925	Argument	line		621404	0					
ANR	625926	Identifier	line		621404	0					
ANR	625927	Argument	i		621404	1					
ANR	625928	Identifier	i		621404	0					
ANR	625929	Argument	spaceIndentCount		621404	2					
ANR	625930	Identifier	spaceIndentCount		621404	0					
ANR	625931	Argument	tabIncrementIn		621404	3					
ANR	625932	Identifier	tabIncrementIn		621404	0					
ANR	625933	Argument	0		621404	4					
ANR	625934	PrimaryExpression	0		621404	0					
ANR	625935	Argument	false		621404	5					
ANR	625936	Identifier	false		621404	0					
ANR	625937	ExpressionStatement	isContinuation = true	3463:5:101899:101920	621404	1	True				
ANR	625938	AssignmentExpression	isContinuation = true		621404	0		=			
ANR	625939	Identifier	isContinuation		621404	0					
ANR	625940	Identifier	true		621404	1					
ANR	625941	ContinueStatement	continue ;	3465:4:101932:101940	621404	2	True				
ANR	625942	IfStatement	"if ( isCStyle ( ) && findKeyword ( line , i , AS_OPERATOR ) )"		621404	3					
ANR	625943	Condition	"isCStyle ( ) && findKeyword ( line , i , AS_OPERATOR )"	3468:7:101955:102001	621404	0	True				
ANR	625944	AndExpression	"isCStyle ( ) && findKeyword ( line , i , AS_OPERATOR )"		621404	0		&&			
ANR	625945	CallExpression	isCStyle ( )		621404	0					
ANR	625946	Callee	isCStyle		621404	0					
ANR	625947	Identifier	isCStyle		621404	0					
ANR	625948	ArgumentList			621404	1					
ANR	625949	CallExpression	"findKeyword ( line , i , AS_OPERATOR )"		621404	1					
ANR	625950	Callee	findKeyword		621404	0					
ANR	625951	Identifier	findKeyword		621404	0					
ANR	625952	ArgumentList	line		621404	1					
ANR	625953	Argument	line		621404	0					
ANR	625954	Identifier	line		621404	0					
ANR	625955	Argument	i		621404	1					
ANR	625956	Identifier	i		621404	0					
ANR	625957	Argument	AS_OPERATOR		621404	2					
ANR	625958	Identifier	AS_OPERATOR		621404	0					
ANR	625959	ExpressionStatement	isInOperator = true	3469:4:102008:102027	621404	1	True				
ANR	625960	AssignmentExpression	isInOperator = true		621404	0		=			
ANR	625961	Identifier	isInOperator		621404	0					
ANR	625962	Identifier	true		621404	1					
ANR	625963	IfStatement	"if ( g_preprocessorCppExternCBrace == 1 && findKeyword ( line , i , AS_EXTERN ) )"		621404	4					
ANR	625964	Condition	"g_preprocessorCppExternCBrace == 1 && findKeyword ( line , i , AS_EXTERN )"	3471:7:102037:102105	621404	0	True				
ANR	625965	AndExpression	"g_preprocessorCppExternCBrace == 1 && findKeyword ( line , i , AS_EXTERN )"		621404	0		&&			
ANR	625966	EqualityExpression	g_preprocessorCppExternCBrace == 1		621404	0		==			
ANR	625967	Identifier	g_preprocessorCppExternCBrace		621404	0					
ANR	625968	PrimaryExpression	1		621404	1					
ANR	625969	CallExpression	"findKeyword ( line , i , AS_EXTERN )"		621404	1					
ANR	625970	Callee	findKeyword		621404	0					
ANR	625971	Identifier	findKeyword		621404	0					
ANR	625972	ArgumentList	line		621404	1					
ANR	625973	Argument	line		621404	0					
ANR	625974	Identifier	line		621404	0					
ANR	625975	Argument	i		621404	1					
ANR	625976	Identifier	i		621404	0					
ANR	625977	Argument	AS_EXTERN		621404	2					
ANR	625978	Identifier	AS_EXTERN		621404	0					
ANR	625979	ExpressionStatement	++ g_preprocessorCppExternCBrace	3472:4:102112:102143	621404	1	True				
ANR	625980	UnaryExpression	++ g_preprocessorCppExternCBrace		621404	0					
ANR	625981	IncDec	++		621404	0					
ANR	625982	Identifier	g_preprocessorCppExternCBrace		621404	1					
ANR	625983	IfStatement	if ( g_preprocessorCppExternCBrace == 3 )		621404	5					
ANR	625984	Condition	g_preprocessorCppExternCBrace == 3	3474:7:102153:102186	621404	0	True				
ANR	625985	EqualityExpression	g_preprocessorCppExternCBrace == 3		621404	0		==			
ANR	625986	Identifier	g_preprocessorCppExternCBrace		621404	0					
ANR	625987	PrimaryExpression	3		621404	1					
ANR	625988	ExpressionStatement	g_preprocessorCppExternCBrace = 0	3475:4:102232:102265	621404	1	True				
ANR	625989	AssignmentExpression	g_preprocessorCppExternCBrace = 0		621404	0		=			
ANR	625990	Identifier	g_preprocessorCppExternCBrace		621404	0					
ANR	625991	PrimaryExpression	0		621404	1					
ANR	625992	IfStatement	"if ( findKeyword ( line , i , AS_NEW ) )"		621404	6					
ANR	625993	Condition	"findKeyword ( line , i , AS_NEW )"	3478:7:102328:102355	621404	0	True				
ANR	625994	CallExpression	"findKeyword ( line , i , AS_NEW )"		621404	0					
ANR	625995	Callee	findKeyword		621404	0					
ANR	625996	Identifier	findKeyword		621404	0					
ANR	625997	ArgumentList	line		621404	1					
ANR	625998	Argument	line		621404	0					
ANR	625999	Identifier	line		621404	0					
ANR	626000	Argument	i		621404	1					
ANR	626001	Identifier	i		621404	0					
ANR	626002	Argument	AS_NEW		621404	2					
ANR	626003	Identifier	AS_NEW		621404	0					
ANR	626004	CompoundStatement		1029:3:30485:30485	621404	1					
ANR	626005	IfStatement	if ( isContinuation && ! continuationIndentStack -> empty ( ) && prevNonSpaceCh == '=' )		621404	0					
ANR	626006	Condition	isContinuation && ! continuationIndentStack -> empty ( ) && prevNonSpaceCh == '='	3480:8:102371:102446	621404	0	True				
ANR	626007	AndExpression	isContinuation && ! continuationIndentStack -> empty ( ) && prevNonSpaceCh == '='		621404	0		&&			
ANR	626008	Identifier	isContinuation		621404	0					
ANR	626009	AndExpression	! continuationIndentStack -> empty ( ) && prevNonSpaceCh == '='		621404	1		&&			
ANR	626010	UnaryOperationExpression	! continuationIndentStack -> empty ( )		621404	0					
ANR	626011	UnaryOperator	!		621404	0					
ANR	626012	CallExpression	continuationIndentStack -> empty ( )		621404	1					
ANR	626013	Callee	continuationIndentStack -> empty		621404	0					
ANR	626014	PtrMemberAccess	continuationIndentStack -> empty		621404	0					
ANR	626015	Identifier	continuationIndentStack		621404	0					
ANR	626016	Identifier	empty		621404	1					
ANR	626017	ArgumentList			621404	1					
ANR	626018	EqualityExpression	prevNonSpaceCh == '='		621404	1		==			
ANR	626019	Identifier	prevNonSpaceCh		621404	0					
ANR	626020	PrimaryExpression	'='		621404	1					
ANR	626021	ExpressionStatement	continuationIndentStack -> back ( ) = 0	3481:5:102454:102489	621404	1	True				
ANR	626022	AssignmentExpression	continuationIndentStack -> back ( ) = 0		621404	0		=			
ANR	626023	CallExpression	continuationIndentStack -> back ( )		621404	0					
ANR	626024	Callee	continuationIndentStack -> back		621404	0					
ANR	626025	PtrMemberAccess	continuationIndentStack -> back		621404	0					
ANR	626026	Identifier	continuationIndentStack		621404	0					
ANR	626027	Identifier	back		621404	1					
ANR	626028	ArgumentList			621404	1					
ANR	626029	PrimaryExpression	0		621404	1					
ANR	626030	IfStatement	if ( isCStyle ( ) )		621404	7					
ANR	626031	Condition	isCStyle ( )	3484:7:102504:102513	621404	0	True				
ANR	626032	CallExpression	isCStyle ( )		621404	0					
ANR	626033	Callee	isCStyle		621404	0					
ANR	626034	Identifier	isCStyle		621404	0					
ANR	626035	ArgumentList			621404	1					
ANR	626036	CompoundStatement		1035:3:30643:30643	621404	1					
ANR	626037	IfStatement	"if ( findKeyword ( line , i , AS_ASM ) || findKeyword ( line , i , AS__ASM__ ) )"		621404	0					
ANR	626038	Condition	"findKeyword ( line , i , AS_ASM ) || findKeyword ( line , i , AS__ASM__ )"	3486:8:102529:102603	621404	0	True				
ANR	626039	OrExpression	"findKeyword ( line , i , AS_ASM ) || findKeyword ( line , i , AS__ASM__ )"		621404	0		||			
ANR	626040	CallExpression	"findKeyword ( line , i , AS_ASM )"		621404	0					
ANR	626041	Callee	findKeyword		621404	0					
ANR	626042	Identifier	findKeyword		621404	0					
ANR	626043	ArgumentList	line		621404	1					
ANR	626044	Argument	line		621404	0					
ANR	626045	Identifier	line		621404	0					
ANR	626046	Argument	i		621404	1					
ANR	626047	Identifier	i		621404	0					
ANR	626048	Argument	AS_ASM		621404	2					
ANR	626049	Identifier	AS_ASM		621404	0					
ANR	626050	CallExpression	"findKeyword ( line , i , AS__ASM__ )"		621404	1					
ANR	626051	Callee	findKeyword		621404	0					
ANR	626052	Identifier	findKeyword		621404	0					
ANR	626053	ArgumentList	line		621404	1					
ANR	626054	Argument	line		621404	0					
ANR	626055	Identifier	line		621404	0					
ANR	626056	Argument	i		621404	1					
ANR	626057	Identifier	i		621404	0					
ANR	626058	Argument	AS__ASM__		621404	2					
ANR	626059	Identifier	AS__ASM__		621404	0					
ANR	626060	CompoundStatement		1038:4:30734:30734	621404	1					
ANR	626061	ExpressionStatement	isInAsm = true	3489:5:102617:102631	621404	0	True				
ANR	626062	AssignmentExpression	isInAsm = true		621404	0		=			
ANR	626063	Identifier	isInAsm		621404	0					
ANR	626064	Identifier	true		621404	1					
ANR	626065	ElseStatement	else		621404	0					
ANR	626066	IfStatement	"if ( findKeyword ( line , i , AS_MS_ASM ) || findKeyword ( line , i , AS_MS__ASM ) )"		621404	0					
ANR	626067	Condition	"findKeyword ( line , i , AS_MS_ASM ) || findKeyword ( line , i , AS_MS__ASM )"	3491:13:102652:102754	621404	0	True				
ANR	626068	OrExpression	"findKeyword ( line , i , AS_MS_ASM ) || findKeyword ( line , i , AS_MS__ASM )"		621404	0		||			
ANR	626069	CallExpression	"findKeyword ( line , i , AS_MS_ASM )"		621404	0					
ANR	626070	Callee	findKeyword		621404	0					
ANR	626071	Identifier	findKeyword		621404	0					
ANR	626072	ArgumentList	line		621404	1					
ANR	626073	Argument	line		621404	0					
ANR	626074	Identifier	line		621404	0					
ANR	626075	Argument	i		621404	1					
ANR	626076	Identifier	i		621404	0					
ANR	626077	Argument	AS_MS_ASM		621404	2					
ANR	626078	Identifier	AS_MS_ASM		621404	0					
ANR	626079	CallExpression	"findKeyword ( line , i , AS_MS__ASM )"		621404	1					
ANR	626080	Callee	findKeyword		621404	0					
ANR	626081	Identifier	findKeyword		621404	0					
ANR	626082	ArgumentList	line		621404	1					
ANR	626083	Argument	line		621404	0					
ANR	626084	Identifier	line		621404	0					
ANR	626085	Argument	i		621404	1					
ANR	626086	Identifier	i		621404	0					
ANR	626087	Argument	AS_MS__ASM		621404	2					
ANR	626088	Identifier	AS_MS__ASM		621404	0					
ANR	626089	CompoundStatement		1048:5:30989:31036	621404	1					
ANR	626090	IdentifierDeclStatement	int index = 4 ;	3494:5:102768:102781	621404	0	True				
ANR	626091	IdentifierDecl	index = 4		621404	0					
ANR	626092	IdentifierDeclType	int		621404	0					
ANR	626093	Identifier	index		621404	1					
ANR	626094	AssignmentExpression	index = 4		621404	2		=			
ANR	626095	Identifier	index		621404	0					
ANR	626096	PrimaryExpression	4		621404	1					
ANR	626097	IfStatement	"if ( peekNextChar ( line , i ) == '_' )"		621404	1					
ANR	626098	Condition	"peekNextChar ( line , i ) == '_'"	3495:9:102792:102819	621404	0	True				
ANR	626099	EqualityExpression	"peekNextChar ( line , i ) == '_'"		621404	0		==			
ANR	626100	CallExpression	"peekNextChar ( line , i )"		621404	0					
ANR	626101	Callee	peekNextChar		621404	0					
ANR	626102	Identifier	peekNextChar		621404	0					
ANR	626103	ArgumentList	line		621404	1					
ANR	626104	Argument	line		621404	0					
ANR	626105	Identifier	line		621404	0					
ANR	626106	Argument	i		621404	1					
ANR	626107	Identifier	i		621404	0					
ANR	626108	PrimaryExpression	'_'		621404	1					
ANR	626109	ExpressionStatement	index = 5	3496:6:102848:102857	621404	1	True				
ANR	626110	AssignmentExpression	index = 5		621404	0		=			
ANR	626111	Identifier	index		621404	0					
ANR	626112	PrimaryExpression	5		621404	1					
ANR	626113	IdentifierDeclStatement	"char peekedChar = peekNextChar ( line , i + index ) ;"	3498:5:102865:102912	621404	2	True				
ANR	626114	IdentifierDecl	"peekedChar = peekNextChar ( line , i + index )"		621404	0					
ANR	626115	IdentifierDeclType	char		621404	0					
ANR	626116	Identifier	peekedChar		621404	1					
ANR	626117	AssignmentExpression	"peekedChar = peekNextChar ( line , i + index )"		621404	2		=			
ANR	626118	Identifier	peekedChar		621404	0					
ANR	626119	CallExpression	"peekNextChar ( line , i + index )"		621404	1					
ANR	626120	Callee	peekNextChar		621404	0					
ANR	626121	Identifier	peekNextChar		621404	0					
ANR	626122	ArgumentList	line		621404	1					
ANR	626123	Argument	line		621404	0					
ANR	626124	Identifier	line		621404	0					
ANR	626125	Argument	i + index		621404	1					
ANR	626126	AdditiveExpression	i + index		621404	0		+			
ANR	626127	Identifier	i		621404	0					
ANR	626128	Identifier	index		621404	1					
ANR	626129	IfStatement	if ( peekedChar == '{' || peekedChar == ' ' )		621404	3					
ANR	626130	Condition	peekedChar == '{' || peekedChar == ' '	3499:9:102923:102960	621404	0	True				
ANR	626131	OrExpression	peekedChar == '{' || peekedChar == ' '		621404	0		||			
ANR	626132	EqualityExpression	peekedChar == '{'		621404	0		==			
ANR	626133	Identifier	peekedChar		621404	0					
ANR	626134	PrimaryExpression	'{'		621404	1					
ANR	626135	EqualityExpression	peekedChar == ' '		621404	1		==			
ANR	626136	Identifier	peekedChar		621404	0					
ANR	626137	PrimaryExpression	' '		621404	1					
ANR	626138	ExpressionStatement	isInAsmBlock = true	3500:6:102969:102988	621404	1	True				
ANR	626139	AssignmentExpression	isInAsmBlock = true		621404	0		=			
ANR	626140	Identifier	isInAsmBlock		621404	0					
ANR	626141	Identifier	true		621404	1					
ANR	626142	ElseStatement	else		621404	0					
ANR	626143	ExpressionStatement	isInAsmOneLine = true	3502:6:103006:103027	621404	0	True				
ANR	626144	AssignmentExpression	isInAsmOneLine = true		621404	0		=			
ANR	626145	Identifier	isInAsmOneLine		621404	0					
ANR	626146	Identifier	true		621404	1					
ANR	626147	IdentifierDeclStatement	"string name = getCurrentWord ( line , i ) ;"	3507:3:103088:103125	621404	8	True				
ANR	626148	IdentifierDecl	"name = getCurrentWord ( line , i )"		621404	0					
ANR	626149	IdentifierDeclType	string		621404	0					
ANR	626150	Identifier	name		621404	1					
ANR	626151	AssignmentExpression	"name = getCurrentWord ( line , i )"		621404	2		=			
ANR	626152	Identifier	name		621404	0					
ANR	626153	CallExpression	"getCurrentWord ( line , i )"		621404	1					
ANR	626154	Callee	getCurrentWord		621404	0					
ANR	626155	Identifier	getCurrentWord		621404	0					
ANR	626156	ArgumentList	line		621404	1					
ANR	626157	Argument	line		621404	0					
ANR	626158	Identifier	line		621404	0					
ANR	626159	Argument	i		621404	1					
ANR	626160	Identifier	i		621404	0					
ANR	626161	ExpressionStatement	i += name . length ( ) - 1	3508:3:103130:103152	621404	9	True				
ANR	626162	AssignmentExpression	i += name . length ( ) - 1		621404	0		+=			
ANR	626163	Identifier	i		621404	0					
ANR	626164	AdditiveExpression	name . length ( ) - 1		621404	1		-			
ANR	626165	CallExpression	name . length ( )		621404	0					
ANR	626166	Callee	name . length		621404	0					
ANR	626167	MemberAccess	name . length		621404	0					
ANR	626168	Identifier	name		621404	0					
ANR	626169	Identifier	length		621404	1					
ANR	626170	ArgumentList			621404	1					
ANR	626171	PrimaryExpression	1		621404	1					
ANR	626172	ContinueStatement	continue ;	3509:3:103157:103165	621404	10	True				
ANR	626173	IfStatement	"if ( ch == '@' && ! isWhiteSpace ( line [ i + 1 ] ) && isCharPotentialHeader ( line , i + 1 ) )"		621404	26					
ANR	626174	Condition	"ch == '@' && ! isWhiteSpace ( line [ i + 1 ] ) && isCharPotentialHeader ( line , i + 1 )"	3514:6:103214:103300	621404	0	True				
ANR	626175	AndExpression	"ch == '@' && ! isWhiteSpace ( line [ i + 1 ] ) && isCharPotentialHeader ( line , i + 1 )"		621404	0		&&			
ANR	626176	EqualityExpression	ch == '@'		621404	0		==			
ANR	626177	Identifier	ch		621404	0					
ANR	626178	PrimaryExpression	'@'		621404	1					
ANR	626179	AndExpression	"! isWhiteSpace ( line [ i + 1 ] ) && isCharPotentialHeader ( line , i + 1 )"		621404	1		&&			
ANR	626180	UnaryOperationExpression	! isWhiteSpace ( line [ i + 1 ] )		621404	0					
ANR	626181	UnaryOperator	!		621404	0					
ANR	626182	CallExpression	isWhiteSpace ( line [ i + 1 ] )		621404	1					
ANR	626183	Callee	isWhiteSpace		621404	0					
ANR	626184	Identifier	isWhiteSpace		621404	0					
ANR	626185	ArgumentList	line [ i + 1 ]		621404	1					
ANR	626186	Argument	line [ i + 1 ]		621404	0					
ANR	626187	ArrayIndexing	line [ i + 1 ]		621404	0					
ANR	626188	Identifier	line		621404	0					
ANR	626189	AdditiveExpression	i + 1		621404	1		+			
ANR	626190	Identifier	i		621404	0					
ANR	626191	PrimaryExpression	1		621404	1					
ANR	626192	CallExpression	"isCharPotentialHeader ( line , i + 1 )"		621404	1					
ANR	626193	Callee	isCharPotentialHeader		621404	0					
ANR	626194	Identifier	isCharPotentialHeader		621404	0					
ANR	626195	ArgumentList	line		621404	1					
ANR	626196	Argument	line		621404	0					
ANR	626197	Identifier	line		621404	0					
ANR	626198	Argument	i + 1		621404	1					
ANR	626199	AdditiveExpression	i + 1		621404	0		+			
ANR	626200	Identifier	i		621404	0					
ANR	626201	PrimaryExpression	1		621404	1					
ANR	626202	CompoundStatement		1067:3:31434:31478	621404	1					
ANR	626203	IdentifierDeclStatement	"string curWord = getCurrentWord ( line , i + 1 ) ;"	3517:3:103310:103354	621404	0	True				
ANR	626204	IdentifierDecl	"curWord = getCurrentWord ( line , i + 1 )"		621404	0					
ANR	626205	IdentifierDeclType	string		621404	0					
ANR	626206	Identifier	curWord		621404	1					
ANR	626207	AssignmentExpression	"curWord = getCurrentWord ( line , i + 1 )"		621404	2		=			
ANR	626208	Identifier	curWord		621404	0					
ANR	626209	CallExpression	"getCurrentWord ( line , i + 1 )"		621404	1					
ANR	626210	Callee	getCurrentWord		621404	0					
ANR	626211	Identifier	getCurrentWord		621404	0					
ANR	626212	ArgumentList	line		621404	1					
ANR	626213	Argument	line		621404	0					
ANR	626214	Identifier	line		621404	0					
ANR	626215	Argument	i + 1		621404	1					
ANR	626216	AdditiveExpression	i + 1		621404	0		+			
ANR	626217	Identifier	i		621404	0					
ANR	626218	PrimaryExpression	1		621404	1					
ANR	626219	IfStatement	if ( curWord == AS_INTERFACE && headerStack -> empty ( ) )		621404	1					
ANR	626220	Condition	curWord == AS_INTERFACE && headerStack -> empty ( )	3518:7:103363:103409	621404	0	True				
ANR	626221	AndExpression	curWord == AS_INTERFACE && headerStack -> empty ( )		621404	0		&&			
ANR	626222	EqualityExpression	curWord == AS_INTERFACE		621404	0		==			
ANR	626223	Identifier	curWord		621404	0					
ANR	626224	Identifier	AS_INTERFACE		621404	1					
ANR	626225	CallExpression	headerStack -> empty ( )		621404	1					
ANR	626226	Callee	headerStack -> empty		621404	0					
ANR	626227	PtrMemberAccess	headerStack -> empty		621404	0					
ANR	626228	Identifier	headerStack		621404	0					
ANR	626229	Identifier	empty		621404	1					
ANR	626230	ArgumentList			621404	1					
ANR	626231	CompoundStatement		1071:4:31575:31602	621404	1					
ANR	626232	ExpressionStatement	isInObjCInterface = true	3520:4:103421:103445	621404	0	True				
ANR	626233	AssignmentExpression	isInObjCInterface = true		621404	0		=			
ANR	626234	Identifier	isInObjCInterface		621404	0					
ANR	626235	Identifier	true		621404	1					
ANR	626236	IdentifierDeclStatement	string name = '@' + curWord ;	3521:4:103451:103478	621404	1	True				
ANR	626237	IdentifierDecl	name = '@' + curWord		621404	0					
ANR	626238	IdentifierDeclType	string		621404	0					
ANR	626239	Identifier	name		621404	1					
ANR	626240	AssignmentExpression	name = '@' + curWord		621404	2		=			
ANR	626241	Identifier	name		621404	0					
ANR	626242	AdditiveExpression	'@' + curWord		621404	1		+			
ANR	626243	PrimaryExpression	'@'		621404	0					
ANR	626244	Identifier	curWord		621404	1					
ANR	626245	ExpressionStatement	i += name . length ( ) - 1	3522:4:103484:103506	621404	2	True				
ANR	626246	AssignmentExpression	i += name . length ( ) - 1		621404	0		+=			
ANR	626247	Identifier	i		621404	0					
ANR	626248	AdditiveExpression	name . length ( ) - 1		621404	1		-			
ANR	626249	CallExpression	name . length ( )		621404	0					
ANR	626250	Callee	name . length		621404	0					
ANR	626251	MemberAccess	name . length		621404	0					
ANR	626252	Identifier	name		621404	0					
ANR	626253	Identifier	length		621404	1					
ANR	626254	ArgumentList			621404	1					
ANR	626255	PrimaryExpression	1		621404	1					
ANR	626256	ContinueStatement	continue ;	3523:4:103512:103520	621404	3	True				
ANR	626257	ElseStatement	else		621404	0					
ANR	626258	IfStatement	if ( isInObjCInterface )		621404	0					
ANR	626259	Condition	isInObjCInterface	3525:12:103539:103555	621404	0	True				
ANR	626260	Identifier	isInObjCInterface		621404	0					
ANR	626261	CompoundStatement		1076:3:31685:31685	621404	1					
ANR	626262	ExpressionStatement	-- indentCount	3527:4:103567:103580	621404	0	True				
ANR	626263	UnaryExpression	-- indentCount		621404	0					
ANR	626264	IncDec	--		621404	0					
ANR	626265	Identifier	indentCount		621404	1					
ANR	626266	ExpressionStatement	isInObjCInterface = false	3528:4:103586:103611	621404	1	True				
ANR	626267	AssignmentExpression	isInObjCInterface = false		621404	0		=			
ANR	626268	Identifier	isInObjCInterface		621404	0					
ANR	626269	Identifier	false		621404	1					
ANR	626270	IfStatement	if ( curWord == AS_PUBLIC || curWord == AS_PRIVATE || curWord == AS_PROTECTED )		621404	2					
ANR	626271	Condition	curWord == AS_PUBLIC || curWord == AS_PRIVATE || curWord == AS_PROTECTED	3531:7:103626:103719	621404	0	True				
ANR	626272	OrExpression	curWord == AS_PUBLIC || curWord == AS_PRIVATE || curWord == AS_PROTECTED		621404	0		||			
ANR	626273	EqualityExpression	curWord == AS_PUBLIC		621404	0		==			
ANR	626274	Identifier	curWord		621404	0					
ANR	626275	Identifier	AS_PUBLIC		621404	1					
ANR	626276	OrExpression	curWord == AS_PRIVATE || curWord == AS_PROTECTED		621404	1		||			
ANR	626277	EqualityExpression	curWord == AS_PRIVATE		621404	0		==			
ANR	626278	Identifier	curWord		621404	0					
ANR	626279	Identifier	AS_PRIVATE		621404	1					
ANR	626280	EqualityExpression	curWord == AS_PROTECTED		621404	1		==			
ANR	626281	Identifier	curWord		621404	0					
ANR	626282	Identifier	AS_PROTECTED		621404	1					
ANR	626283	CompoundStatement		1088:4:31943:31970	621404	1					
ANR	626284	ExpressionStatement	-- indentCount	3535:4:103731:103744	621404	0	True				
ANR	626285	UnaryExpression	-- indentCount		621404	0					
ANR	626286	IncDec	--		621404	0					
ANR	626287	Identifier	indentCount		621404	1					
ANR	626288	IfStatement	if ( modifierIndent )		621404	1					
ANR	626289	Condition	modifierIndent	3536:8:103754:103767	621404	0	True				
ANR	626290	Identifier	modifierIndent		621404	0					
ANR	626291	ExpressionStatement	spaceIndentCount += ( indentLength / 2 )	3537:5:103775:103813	621404	1	True				
ANR	626292	AssignmentExpression	spaceIndentCount += ( indentLength / 2 )		621404	0		+=			
ANR	626293	Identifier	spaceIndentCount		621404	0					
ANR	626294	MultiplicativeExpression	indentLength / 2		621404	1		/			
ANR	626295	Identifier	indentLength		621404	0					
ANR	626296	PrimaryExpression	2		621404	1					
ANR	626297	IdentifierDeclStatement	string name = '@' + curWord ;	3538:4:103819:103846	621404	2	True				
ANR	626298	IdentifierDecl	name = '@' + curWord		621404	0					
ANR	626299	IdentifierDeclType	string		621404	0					
ANR	626300	Identifier	name		621404	1					
ANR	626301	AssignmentExpression	name = '@' + curWord		621404	2		=			
ANR	626302	Identifier	name		621404	0					
ANR	626303	AdditiveExpression	'@' + curWord		621404	1		+			
ANR	626304	PrimaryExpression	'@'		621404	0					
ANR	626305	Identifier	curWord		621404	1					
ANR	626306	ExpressionStatement	i += name . length ( ) - 1	3539:4:103852:103874	621404	3	True				
ANR	626307	AssignmentExpression	i += name . length ( ) - 1		621404	0		+=			
ANR	626308	Identifier	i		621404	0					
ANR	626309	AdditiveExpression	name . length ( ) - 1		621404	1		-			
ANR	626310	CallExpression	name . length ( )		621404	0					
ANR	626311	Callee	name . length		621404	0					
ANR	626312	MemberAccess	name . length		621404	0					
ANR	626313	Identifier	name		621404	0					
ANR	626314	Identifier	length		621404	1					
ANR	626315	ArgumentList			621404	1					
ANR	626316	PrimaryExpression	1		621404	1					
ANR	626317	ContinueStatement	continue ;	3540:4:103880:103888	621404	4	True				
ANR	626318	ElseStatement	else		621404	0					
ANR	626319	IfStatement	if ( curWord == AS_END )		621404	0					
ANR	626320	Condition	curWord == AS_END	3542:12:103907:103923	621404	0	True				
ANR	626321	EqualityExpression	curWord == AS_END		621404	0		==			
ANR	626322	Identifier	curWord		621404	0					
ANR	626323	Identifier	AS_END		621404	1					
ANR	626324	CompoundStatement		1097:4:32156:32183	621404	1					
ANR	626325	ExpressionStatement	popLastContinuationIndent ( )	3544:4:103935:103962	621404	0	True				
ANR	626326	CallExpression	popLastContinuationIndent ( )		621404	0					
ANR	626327	Callee	popLastContinuationIndent		621404	0					
ANR	626328	Identifier	popLastContinuationIndent		621404	0					
ANR	626329	ArgumentList			621404	1					
ANR	626330	ExpressionStatement	spaceIndentCount = 0	3545:4:103968:103988	621404	1	True				
ANR	626331	AssignmentExpression	spaceIndentCount = 0		621404	0		=			
ANR	626332	Identifier	spaceIndentCount		621404	0					
ANR	626333	PrimaryExpression	0		621404	1					
ANR	626334	ExpressionStatement	isInObjCMethodDefinition = false	3546:4:103994:104026	621404	2	True				
ANR	626335	AssignmentExpression	isInObjCMethodDefinition = false		621404	0		=			
ANR	626336	Identifier	isInObjCMethodDefinition		621404	0					
ANR	626337	Identifier	false		621404	1					
ANR	626338	IdentifierDeclStatement	string name = '@' + curWord ;	3547:4:104032:104059	621404	3	True				
ANR	626339	IdentifierDecl	name = '@' + curWord		621404	0					
ANR	626340	IdentifierDeclType	string		621404	0					
ANR	626341	Identifier	name		621404	1					
ANR	626342	AssignmentExpression	name = '@' + curWord		621404	2		=			
ANR	626343	Identifier	name		621404	0					
ANR	626344	AdditiveExpression	'@' + curWord		621404	1		+			
ANR	626345	PrimaryExpression	'@'		621404	0					
ANR	626346	Identifier	curWord		621404	1					
ANR	626347	ExpressionStatement	i += name . length ( ) - 1	3548:4:104065:104087	621404	4	True				
ANR	626348	AssignmentExpression	i += name . length ( ) - 1		621404	0		+=			
ANR	626349	Identifier	i		621404	0					
ANR	626350	AdditiveExpression	name . length ( ) - 1		621404	1		-			
ANR	626351	CallExpression	name . length ( )		621404	0					
ANR	626352	Callee	name . length		621404	0					
ANR	626353	MemberAccess	name . length		621404	0					
ANR	626354	Identifier	name		621404	0					
ANR	626355	Identifier	length		621404	1					
ANR	626356	ArgumentList			621404	1					
ANR	626357	PrimaryExpression	1		621404	1					
ANR	626358	ContinueStatement	continue ;	3549:4:104093:104101	621404	5	True				
ANR	626359	ElseStatement	else		621404	0					
ANR	626360	IfStatement	"if ( ( ch == '-' || ch == '+' ) && peekNextChar ( line , i ) == '(' && headerStack -> empty ( ) && line . find_first_not_of ( "" \\t"" ) == i )"		621404	0					
ANR	626361	Condition	"( ch == '-' || ch == '+' ) && peekNextChar ( line , i ) == '(' && headerStack -> empty ( ) && line . find_first_not_of ( "" \\t"" ) == i"	3552:11:104123:104273	621404	0	True				
ANR	626362	AndExpression	"( ch == '-' || ch == '+' ) && peekNextChar ( line , i ) == '(' && headerStack -> empty ( ) && line . find_first_not_of ( "" \\t"" ) == i"		621404	0		&&			
ANR	626363	OrExpression	ch == '-' || ch == '+'		621404	0		||			
ANR	626364	EqualityExpression	ch == '-'		621404	0		==			
ANR	626365	Identifier	ch		621404	0					
ANR	626366	PrimaryExpression	'-'		621404	1					
ANR	626367	EqualityExpression	ch == '+'		621404	1		==			
ANR	626368	Identifier	ch		621404	0					
ANR	626369	PrimaryExpression	'+'		621404	1					
ANR	626370	AndExpression	"peekNextChar ( line , i ) == '(' && headerStack -> empty ( ) && line . find_first_not_of ( "" \\t"" ) == i"		621404	1		&&			
ANR	626371	EqualityExpression	"peekNextChar ( line , i ) == '('"		621404	0		==			
ANR	626372	CallExpression	"peekNextChar ( line , i )"		621404	0					
ANR	626373	Callee	peekNextChar		621404	0					
ANR	626374	Identifier	peekNextChar		621404	0					
ANR	626375	ArgumentList	line		621404	1					
ANR	626376	Argument	line		621404	0					
ANR	626377	Identifier	line		621404	0					
ANR	626378	Argument	i		621404	1					
ANR	626379	Identifier	i		621404	0					
ANR	626380	PrimaryExpression	'('		621404	1					
ANR	626381	AndExpression	"headerStack -> empty ( ) && line . find_first_not_of ( "" \\t"" ) == i"		621404	1		&&			
ANR	626382	CallExpression	headerStack -> empty ( )		621404	0					
ANR	626383	Callee	headerStack -> empty		621404	0					
ANR	626384	PtrMemberAccess	headerStack -> empty		621404	0					
ANR	626385	Identifier	headerStack		621404	0					
ANR	626386	Identifier	empty		621404	1					
ANR	626387	ArgumentList			621404	1					
ANR	626388	EqualityExpression	"line . find_first_not_of ( "" \\t"" ) == i"		621404	1		==			
ANR	626389	CallExpression	"line . find_first_not_of ( "" \\t"" )"		621404	0					
ANR	626390	Callee	line . find_first_not_of		621404	0					
ANR	626391	MemberAccess	line . find_first_not_of		621404	0					
ANR	626392	Identifier	line		621404	0					
ANR	626393	Identifier	find_first_not_of		621404	1					
ANR	626394	ArgumentList	""" \\t"""		621404	1					
ANR	626395	Argument	""" \\t"""		621404	0					
ANR	626396	PrimaryExpression	""" \\t"""		621404	0					
ANR	626397	Identifier	i		621404	1					
ANR	626398	CompoundStatement		1106:2:32402:32402	621404	1					
ANR	626399	IfStatement	if ( isInObjCInterface )		621404	0					
ANR	626400	Condition	isInObjCInterface	3557:7:104287:104303	621404	0	True				
ANR	626401	Identifier	isInObjCInterface		621404	0					
ANR	626402	ExpressionStatement	-- indentCount	3558:4:104310:104323	621404	1	True				
ANR	626403	UnaryExpression	-- indentCount		621404	0					
ANR	626404	IncDec	--		621404	0					
ANR	626405	Identifier	indentCount		621404	1					
ANR	626406	ExpressionStatement	isInObjCInterface = false	3559:3:104328:104353	621404	1	True				
ANR	626407	AssignmentExpression	isInObjCInterface = false		621404	0		=			
ANR	626408	Identifier	isInObjCInterface		621404	0					
ANR	626409	Identifier	false		621404	1					
ANR	626410	ExpressionStatement	isInObjCMethodDefinition = true	3560:3:104358:104389	621404	2	True				
ANR	626411	AssignmentExpression	isInObjCMethodDefinition = true		621404	0		=			
ANR	626412	Identifier	isInObjCMethodDefinition		621404	0					
ANR	626413	Identifier	true		621404	1					
ANR	626414	ContinueStatement	continue ;	3561:3:104394:104402	621404	3	True				
ANR	626415	IdentifierDeclStatement	bool isPotentialOperator = isCharPotentialOperator ( ch ) ;	3566:2:104434:104488	621404	27	True				
ANR	626416	IdentifierDecl	isPotentialOperator = isCharPotentialOperator ( ch )		621404	0					
ANR	626417	IdentifierDeclType	bool		621404	0					
ANR	626418	Identifier	isPotentialOperator		621404	1					
ANR	626419	AssignmentExpression	isPotentialOperator = isCharPotentialOperator ( ch )		621404	2		=			
ANR	626420	Identifier	isPotentialOperator		621404	0					
ANR	626421	CallExpression	isCharPotentialOperator ( ch )		621404	1					
ANR	626422	Callee	isCharPotentialOperator		621404	0					
ANR	626423	Identifier	isCharPotentialOperator		621404	0					
ANR	626424	ArgumentList	ch		621404	1					
ANR	626425	Argument	ch		621404	0					
ANR	626426	Identifier	ch		621404	0					
ANR	626427	IfStatement	if ( isPotentialOperator )		621404	28					
ANR	626428	Condition	isPotentialOperator	3568:6:104497:104515	621404	0	True				
ANR	626429	Identifier	isPotentialOperator		621404	0					
ANR	626430	CompoundStatement		1122:3:32775:32857	621404	1					
ANR	626431	IdentifierDeclStatement	"const string * foundAssignmentOp = findOperator ( line , i , assignmentOperators ) ;"	3571:3:104570:104646	621404	0	True				
ANR	626432	IdentifierDecl	"* foundAssignmentOp = findOperator ( line , i , assignmentOperators )"		621404	0					
ANR	626433	IdentifierDeclType	const string *		621404	0					
ANR	626434	Identifier	foundAssignmentOp		621404	1					
ANR	626435	AssignmentExpression	"* foundAssignmentOp = findOperator ( line , i , assignmentOperators )"		621404	2		=			
ANR	626436	Identifier	foundAssignmentOp		621404	0					
ANR	626437	CallExpression	"findOperator ( line , i , assignmentOperators )"		621404	1					
ANR	626438	Callee	findOperator		621404	0					
ANR	626439	Identifier	findOperator		621404	0					
ANR	626440	ArgumentList	line		621404	1					
ANR	626441	Argument	line		621404	0					
ANR	626442	Identifier	line		621404	0					
ANR	626443	Argument	i		621404	1					
ANR	626444	Identifier	i		621404	0					
ANR	626445	Argument	assignmentOperators		621404	2					
ANR	626446	Identifier	assignmentOperators		621404	0					
ANR	626447	IdentifierDeclStatement	"const string * foundNonAssignmentOp = findOperator ( line , i , nonAssignmentOperators ) ;"	3572:3:104651:104733	621404	1	True				
ANR	626448	IdentifierDecl	"* foundNonAssignmentOp = findOperator ( line , i , nonAssignmentOperators )"		621404	0					
ANR	626449	IdentifierDeclType	const string *		621404	0					
ANR	626450	Identifier	foundNonAssignmentOp		621404	1					
ANR	626451	AssignmentExpression	"* foundNonAssignmentOp = findOperator ( line , i , nonAssignmentOperators )"		621404	2		=			
ANR	626452	Identifier	foundNonAssignmentOp		621404	0					
ANR	626453	CallExpression	"findOperator ( line , i , nonAssignmentOperators )"		621404	1					
ANR	626454	Callee	findOperator		621404	0					
ANR	626455	Identifier	findOperator		621404	0					
ANR	626456	ArgumentList	line		621404	1					
ANR	626457	Argument	line		621404	0					
ANR	626458	Identifier	line		621404	0					
ANR	626459	Argument	i		621404	1					
ANR	626460	Identifier	i		621404	0					
ANR	626461	Argument	nonAssignmentOperators		621404	2					
ANR	626462	Identifier	nonAssignmentOperators		621404	0					
ANR	626463	IfStatement	if ( foundNonAssignmentOp != nullptr )		621404	2					
ANR	626464	Condition	foundNonAssignmentOp != nullptr	3574:7:104743:104773	621404	0	True				
ANR	626465	EqualityExpression	foundNonAssignmentOp != nullptr		621404	0		!=			
ANR	626466	Identifier	foundNonAssignmentOp		621404	0					
ANR	626467	Identifier	nullptr		621404	1					
ANR	626468	CompoundStatement		1125:3:32903:32903	621404	1					
ANR	626469	IfStatement	if ( foundNonAssignmentOp == & AS_LAMBDA )		621404	0					
ANR	626470	Condition	foundNonAssignmentOp == & AS_LAMBDA	3576:8:104789:104822	621404	0	True				
ANR	626471	EqualityExpression	foundNonAssignmentOp == & AS_LAMBDA		621404	0		==			
ANR	626472	Identifier	foundNonAssignmentOp		621404	0					
ANR	626473	UnaryOperationExpression	& AS_LAMBDA		621404	1					
ANR	626474	UnaryOperator	&		621404	0					
ANR	626475	Identifier	AS_LAMBDA		621404	1					
ANR	626476	ExpressionStatement	foundPreCommandHeader = true	3577:5:104830:104858	621404	1	True				
ANR	626477	AssignmentExpression	foundPreCommandHeader = true		621404	0		=			
ANR	626478	Identifier	foundPreCommandHeader		621404	0					
ANR	626479	Identifier	true		621404	1					
ANR	626480	IfStatement	if ( isInTemplate && foundNonAssignmentOp == & AS_GR_GR )		621404	1					
ANR	626481	Condition	isInTemplate && foundNonAssignmentOp == & AS_GR_GR	3578:8:104868:104916	621404	0	True				
ANR	626482	AndExpression	isInTemplate && foundNonAssignmentOp == & AS_GR_GR		621404	0		&&			
ANR	626483	Identifier	isInTemplate		621404	0					
ANR	626484	EqualityExpression	foundNonAssignmentOp == & AS_GR_GR		621404	1		==			
ANR	626485	Identifier	foundNonAssignmentOp		621404	0					
ANR	626486	UnaryOperationExpression	& AS_GR_GR		621404	1					
ANR	626487	UnaryOperator	&		621404	0					
ANR	626488	Identifier	AS_GR_GR		621404	1					
ANR	626489	ExpressionStatement	foundNonAssignmentOp = nullptr	3579:5:104924:104954	621404	1	True				
ANR	626490	AssignmentExpression	foundNonAssignmentOp = nullptr		621404	0		=			
ANR	626491	Identifier	foundNonAssignmentOp		621404	0					
ANR	626492	Identifier	nullptr		621404	1					
ANR	626493	IfStatement	if ( foundAssignmentOp != nullptr && foundNonAssignmentOp != nullptr )		621404	3					
ANR	626494	Condition	foundAssignmentOp != nullptr && foundNonAssignmentOp != nullptr	3586:7:105215:105277	621404	0	True				
ANR	626495	AndExpression	foundAssignmentOp != nullptr && foundNonAssignmentOp != nullptr		621404	0		&&			
ANR	626496	EqualityExpression	foundAssignmentOp != nullptr		621404	0		!=			
ANR	626497	Identifier	foundAssignmentOp		621404	0					
ANR	626498	Identifier	nullptr		621404	1					
ANR	626499	EqualityExpression	foundNonAssignmentOp != nullptr		621404	1		!=			
ANR	626500	Identifier	foundNonAssignmentOp		621404	0					
ANR	626501	Identifier	nullptr		621404	1					
ANR	626502	CompoundStatement		1137:3:33407:33407	621404	1					
ANR	626503	IfStatement	if ( foundAssignmentOp -> length ( ) < foundNonAssignmentOp -> length ( ) )		621404	0					
ANR	626504	Condition	foundAssignmentOp -> length ( ) < foundNonAssignmentOp -> length ( )	3588:8:105293:105352	621404	0	True				
ANR	626505	RelationalExpression	foundAssignmentOp -> length ( ) < foundNonAssignmentOp -> length ( )		621404	0		<			
ANR	626506	CallExpression	foundAssignmentOp -> length ( )		621404	0					
ANR	626507	Callee	foundAssignmentOp -> length		621404	0					
ANR	626508	PtrMemberAccess	foundAssignmentOp -> length		621404	0					
ANR	626509	Identifier	foundAssignmentOp		621404	0					
ANR	626510	Identifier	length		621404	1					
ANR	626511	ArgumentList			621404	1					
ANR	626512	CallExpression	foundNonAssignmentOp -> length ( )		621404	1					
ANR	626513	Callee	foundNonAssignmentOp -> length		621404	0					
ANR	626514	PtrMemberAccess	foundNonAssignmentOp -> length		621404	0					
ANR	626515	Identifier	foundNonAssignmentOp		621404	0					
ANR	626516	Identifier	length		621404	1					
ANR	626517	ArgumentList			621404	1					
ANR	626518	ExpressionStatement	foundAssignmentOp = nullptr	3589:5:105360:105387	621404	1	True				
ANR	626519	AssignmentExpression	foundAssignmentOp = nullptr		621404	0		=			
ANR	626520	Identifier	foundAssignmentOp		621404	0					
ANR	626521	Identifier	nullptr		621404	1					
ANR	626522	ElseStatement	else		621404	0					
ANR	626523	ExpressionStatement	foundNonAssignmentOp = nullptr	3591:5:105403:105433	621404	0	True				
ANR	626524	AssignmentExpression	foundNonAssignmentOp = nullptr		621404	0		=			
ANR	626525	Identifier	foundNonAssignmentOp		621404	0					
ANR	626526	Identifier	nullptr		621404	1					
ANR	626527	IfStatement	if ( foundNonAssignmentOp != nullptr )		621404	4					
ANR	626528	Condition	foundNonAssignmentOp != nullptr	3594:7:105448:105478	621404	0	True				
ANR	626529	EqualityExpression	foundNonAssignmentOp != nullptr		621404	0		!=			
ANR	626530	Identifier	foundNonAssignmentOp		621404	0					
ANR	626531	Identifier	nullptr		621404	1					
ANR	626532	CompoundStatement		1145:3:33608:33608	621404	1					
ANR	626533	IfStatement	if ( foundNonAssignmentOp -> length ( ) > 1 )		621404	0					
ANR	626534	Condition	foundNonAssignmentOp -> length ( ) > 1	3596:8:105494:105527	621404	0	True				
ANR	626535	RelationalExpression	foundNonAssignmentOp -> length ( ) > 1		621404	0		>			
ANR	626536	CallExpression	foundNonAssignmentOp -> length ( )		621404	0					
ANR	626537	Callee	foundNonAssignmentOp -> length		621404	0					
ANR	626538	PtrMemberAccess	foundNonAssignmentOp -> length		621404	0					
ANR	626539	Identifier	foundNonAssignmentOp		621404	0					
ANR	626540	Identifier	length		621404	1					
ANR	626541	ArgumentList			621404	1					
ANR	626542	PrimaryExpression	1		621404	1					
ANR	626543	ExpressionStatement	i += foundNonAssignmentOp -> length ( ) - 1	3597:5:105535:105574	621404	1	True				
ANR	626544	AssignmentExpression	i += foundNonAssignmentOp -> length ( ) - 1		621404	0		+=			
ANR	626545	Identifier	i		621404	0					
ANR	626546	AdditiveExpression	foundNonAssignmentOp -> length ( ) - 1		621404	1		-			
ANR	626547	CallExpression	foundNonAssignmentOp -> length ( )		621404	0					
ANR	626548	Callee	foundNonAssignmentOp -> length		621404	0					
ANR	626549	PtrMemberAccess	foundNonAssignmentOp -> length		621404	0					
ANR	626550	Identifier	foundNonAssignmentOp		621404	0					
ANR	626551	Identifier	length		621404	1					
ANR	626552	ArgumentList			621404	1					
ANR	626553	PrimaryExpression	1		621404	1					
ANR	626554	IfStatement	if ( ! isInOperator && continuationIndentStack -> empty ( ) && isCStyle ( ) && ( foundNonAssignmentOp == & AS_GR_GR || foundNonAssignmentOp == & AS_LS_LS ) )		621404	1					
ANR	626555	Condition	! isInOperator && continuationIndentStack -> empty ( ) && isCStyle ( ) && ( foundNonAssignmentOp == & AS_GR_GR || foundNonAssignmentOp == & AS_LS_LS )	3602:8:105752:105942	621404	0	True				
ANR	626556	AndExpression	! isInOperator && continuationIndentStack -> empty ( ) && isCStyle ( ) && ( foundNonAssignmentOp == & AS_GR_GR || foundNonAssignmentOp == & AS_LS_LS )		621404	0		&&			
ANR	626557	UnaryOperationExpression	! isInOperator		621404	0					
ANR	626558	UnaryOperator	!		621404	0					
ANR	626559	Identifier	isInOperator		621404	1					
ANR	626560	AndExpression	continuationIndentStack -> empty ( ) && isCStyle ( ) && ( foundNonAssignmentOp == & AS_GR_GR || foundNonAssignmentOp == & AS_LS_LS )		621404	1		&&			
ANR	626561	CallExpression	continuationIndentStack -> empty ( )		621404	0					
ANR	626562	Callee	continuationIndentStack -> empty		621404	0					
ANR	626563	PtrMemberAccess	continuationIndentStack -> empty		621404	0					
ANR	626564	Identifier	continuationIndentStack		621404	0					
ANR	626565	Identifier	empty		621404	1					
ANR	626566	ArgumentList			621404	1					
ANR	626567	AndExpression	isCStyle ( ) && ( foundNonAssignmentOp == & AS_GR_GR || foundNonAssignmentOp == & AS_LS_LS )		621404	1		&&			
ANR	626568	CallExpression	isCStyle ( )		621404	0					
ANR	626569	Callee	isCStyle		621404	0					
ANR	626570	Identifier	isCStyle		621404	0					
ANR	626571	ArgumentList			621404	1					
ANR	626572	OrExpression	foundNonAssignmentOp == & AS_GR_GR || foundNonAssignmentOp == & AS_LS_LS		621404	1		||			
ANR	626573	EqualityExpression	foundNonAssignmentOp == & AS_GR_GR		621404	0		==			
ANR	626574	Identifier	foundNonAssignmentOp		621404	0					
ANR	626575	UnaryOperationExpression	& AS_GR_GR		621404	1					
ANR	626576	UnaryOperator	&		621404	0					
ANR	626577	Identifier	AS_GR_GR		621404	1					
ANR	626578	EqualityExpression	foundNonAssignmentOp == & AS_LS_LS		621404	1		==			
ANR	626579	Identifier	foundNonAssignmentOp		621404	0					
ANR	626580	UnaryOperationExpression	& AS_LS_LS		621404	1					
ANR	626581	UnaryOperator	&		621404	0					
ANR	626582	Identifier	AS_LS_LS		621404	1					
ANR	626583	CompoundStatement		1157:4:34073:34073	621404	1					
ANR	626584	IfStatement	if ( i < 2 && spaceIndentCount == 0 )		621404	0					
ANR	626585	Condition	i < 2 && spaceIndentCount == 0	3609:9:106023:106052	621404	0	True				
ANR	626586	AndExpression	i < 2 && spaceIndentCount == 0		621404	0		&&			
ANR	626587	RelationalExpression	i < 2		621404	0		<			
ANR	626588	Identifier	i		621404	0					
ANR	626589	PrimaryExpression	2		621404	1					
ANR	626590	EqualityExpression	spaceIndentCount == 0		621404	1		==			
ANR	626591	Identifier	spaceIndentCount		621404	0					
ANR	626592	PrimaryExpression	0		621404	1					
ANR	626593	ExpressionStatement	spaceIndentCount += 2 * indentLength	3610:6:106061:106097	621404	1	True				
ANR	626594	AssignmentExpression	spaceIndentCount += 2 * indentLength		621404	0		+=			
ANR	626595	Identifier	spaceIndentCount		621404	0					
ANR	626596	MultiplicativeExpression	2 * indentLength		621404	1		*			
ANR	626597	PrimaryExpression	2		621404	0					
ANR	626598	Identifier	indentLength		621404	1					
ANR	626599	ExpressionStatement	"registerContinuationIndent ( line , i - foundNonAssignmentOp -> length ( ) , spaceIndentCount , tabIncrementIn , 0 , false )"	3612:5:106158:106270	621404	1	True				
ANR	626600	CallExpression	"registerContinuationIndent ( line , i - foundNonAssignmentOp -> length ( ) , spaceIndentCount , tabIncrementIn , 0 , false )"		621404	0					
ANR	626601	Callee	registerContinuationIndent		621404	0					
ANR	626602	Identifier	registerContinuationIndent		621404	0					
ANR	626603	ArgumentList	line		621404	1					
ANR	626604	Argument	line		621404	0					
ANR	626605	Identifier	line		621404	0					
ANR	626606	Argument	i - foundNonAssignmentOp -> length ( )		621404	1					
ANR	626607	AdditiveExpression	i - foundNonAssignmentOp -> length ( )		621404	0		-			
ANR	626608	Identifier	i		621404	0					
ANR	626609	CallExpression	foundNonAssignmentOp -> length ( )		621404	1					
ANR	626610	Callee	foundNonAssignmentOp -> length		621404	0					
ANR	626611	PtrMemberAccess	foundNonAssignmentOp -> length		621404	0					
ANR	626612	Identifier	foundNonAssignmentOp		621404	0					
ANR	626613	Identifier	length		621404	1					
ANR	626614	ArgumentList			621404	1					
ANR	626615	Argument	spaceIndentCount		621404	2					
ANR	626616	Identifier	spaceIndentCount		621404	0					
ANR	626617	Argument	tabIncrementIn		621404	3					
ANR	626618	Identifier	tabIncrementIn		621404	0					
ANR	626619	Argument	0		621404	4					
ANR	626620	PrimaryExpression	0		621404	0					
ANR	626621	Argument	false		621404	5					
ANR	626622	Identifier	false		621404	0					
ANR	626623	ElseStatement	else		621404	0					
ANR	626624	IfStatement	if ( foundAssignmentOp != nullptr )		621404	0					
ANR	626625	Condition	foundAssignmentOp != nullptr	3616:12:106296:106323	621404	0	True				
ANR	626626	EqualityExpression	foundAssignmentOp != nullptr		621404	0		!=			
ANR	626627	Identifier	foundAssignmentOp		621404	0					
ANR	626628	Identifier	nullptr		621404	1					
ANR	626629	CompoundStatement		1167:3:34453:34453	621404	1					
ANR	626630	ExpressionStatement	foundPreCommandHeader = false	3618:4:106335:106364	621404	0	True				
ANR	626631	AssignmentExpression	foundPreCommandHeader = false		621404	0		=			
ANR	626632	Identifier	foundPreCommandHeader		621404	0					
ANR	626633	Identifier	false		621404	1					
ANR	626634	ExpressionStatement	foundPreCommandMacro = false	3619:4:106408:106436	621404	1	True				
ANR	626635	AssignmentExpression	foundPreCommandMacro = false		621404	0		=			
ANR	626636	Identifier	foundPreCommandMacro		621404	0					
ANR	626637	Identifier	false		621404	1					
ANR	626638	IfStatement	if ( foundAssignmentOp -> length ( ) > 1 )		621404	2					
ANR	626639	Condition	foundAssignmentOp -> length ( ) > 1	3621:8:106447:106477	621404	0	True				
ANR	626640	RelationalExpression	foundAssignmentOp -> length ( ) > 1		621404	0		>			
ANR	626641	CallExpression	foundAssignmentOp -> length ( )		621404	0					
ANR	626642	Callee	foundAssignmentOp -> length		621404	0					
ANR	626643	PtrMemberAccess	foundAssignmentOp -> length		621404	0					
ANR	626644	Identifier	foundAssignmentOp		621404	0					
ANR	626645	Identifier	length		621404	1					
ANR	626646	ArgumentList			621404	1					
ANR	626647	PrimaryExpression	1		621404	1					
ANR	626648	ExpressionStatement	i += foundAssignmentOp -> length ( ) - 1	3622:5:106485:106521	621404	1	True				
ANR	626649	AssignmentExpression	i += foundAssignmentOp -> length ( ) - 1		621404	0		+=			
ANR	626650	Identifier	i		621404	0					
ANR	626651	AdditiveExpression	foundAssignmentOp -> length ( ) - 1		621404	1		-			
ANR	626652	CallExpression	foundAssignmentOp -> length ( )		621404	0					
ANR	626653	Callee	foundAssignmentOp -> length		621404	0					
ANR	626654	PtrMemberAccess	foundAssignmentOp -> length		621404	0					
ANR	626655	Identifier	foundAssignmentOp		621404	0					
ANR	626656	Identifier	length		621404	1					
ANR	626657	ArgumentList			621404	1					
ANR	626658	PrimaryExpression	1		621404	1					
ANR	626659	IfStatement	if ( ! isInOperator && ! isInTemplate && ( ! isNonInStatementArray || isInEnum ) )		621404	3					
ANR	626660	Condition	! isInOperator && ! isInTemplate && ( ! isNonInStatementArray || isInEnum )	3624:8:106532:106601	621404	0	True				
ANR	626661	AndExpression	! isInOperator && ! isInTemplate && ( ! isNonInStatementArray || isInEnum )		621404	0		&&			
ANR	626662	UnaryOperationExpression	! isInOperator		621404	0					
ANR	626663	UnaryOperator	!		621404	0					
ANR	626664	Identifier	isInOperator		621404	1					
ANR	626665	AndExpression	! isInTemplate && ( ! isNonInStatementArray || isInEnum )		621404	1		&&			
ANR	626666	UnaryOperationExpression	! isInTemplate		621404	0					
ANR	626667	UnaryOperator	!		621404	0					
ANR	626668	Identifier	isInTemplate		621404	1					
ANR	626669	OrExpression	! isNonInStatementArray || isInEnum		621404	1		||			
ANR	626670	UnaryOperationExpression	! isNonInStatementArray		621404	0					
ANR	626671	UnaryOperator	!		621404	0					
ANR	626672	Identifier	isNonInStatementArray		621404	1					
ANR	626673	Identifier	isInEnum		621404	1					
ANR	626674	CompoundStatement		1175:4:34732:34732	621404	1					
ANR	626675	IfStatement	"if ( foundAssignmentOp == & AS_ASSIGN && prevNonSpaceCh != ']' && statementEndsWithComma ( line , i ) )"		621404	0					
ANR	626676	Condition	"foundAssignmentOp == & AS_ASSIGN && prevNonSpaceCh != ']' && statementEndsWithComma ( line , i )"	3627:9:106679:106808	621404	0	True				
ANR	626677	AndExpression	"foundAssignmentOp == & AS_ASSIGN && prevNonSpaceCh != ']' && statementEndsWithComma ( line , i )"		621404	0		&&			
ANR	626678	EqualityExpression	foundAssignmentOp == & AS_ASSIGN		621404	0		==			
ANR	626679	Identifier	foundAssignmentOp		621404	0					
ANR	626680	UnaryOperationExpression	& AS_ASSIGN		621404	1					
ANR	626681	UnaryOperator	&		621404	0					
ANR	626682	Identifier	AS_ASSIGN		621404	1					
ANR	626683	AndExpression	"prevNonSpaceCh != ']' && statementEndsWithComma ( line , i )"		621404	1		&&			
ANR	626684	EqualityExpression	prevNonSpaceCh != ']'		621404	0		!=			
ANR	626685	Identifier	prevNonSpaceCh		621404	0					
ANR	626686	PrimaryExpression	']'		621404	1					
ANR	626687	CallExpression	"statementEndsWithComma ( line , i )"		621404	1					
ANR	626688	Callee	statementEndsWithComma		621404	0					
ANR	626689	Identifier	statementEndsWithComma		621404	0					
ANR	626690	ArgumentList	line		621404	1					
ANR	626691	Argument	line		621404	0					
ANR	626692	Identifier	line		621404	0					
ANR	626693	Argument	i		621404	1					
ANR	626694	Identifier	i		621404	0					
ANR	626695	CompoundStatement		1180:5:34940:34940	621404	1					
ANR	626696	IfStatement	if ( ! haveAssignmentThisLine )		621404	0					
ANR	626697	Condition	! haveAssignmentThisLine	3631:10:106828:106850	621404	0	True				
ANR	626698	UnaryOperationExpression	! haveAssignmentThisLine		621404	0					
ANR	626699	UnaryOperator	!		621404	0					
ANR	626700	Identifier	haveAssignmentThisLine		621404	1					
ANR	626701	CompoundStatement		1186:7:35178:35257	621404	1					
ANR	626702	ExpressionStatement	haveAssignmentThisLine = true	3634:7:106951:106980	621404	0	True				
ANR	626703	AssignmentExpression	haveAssignmentThisLine = true		621404	0		=			
ANR	626704	Identifier	haveAssignmentThisLine		621404	0					
ANR	626705	Identifier	true		621404	1					
ANR	626706	IdentifierDeclStatement	"int prevWordIndex = getContinuationIndentAssign ( line , i ) ;"	3635:7:106989:107045	621404	1	True				
ANR	626707	IdentifierDecl	"prevWordIndex = getContinuationIndentAssign ( line , i )"		621404	0					
ANR	626708	IdentifierDeclType	int		621404	0					
ANR	626709	Identifier	prevWordIndex		621404	1					
ANR	626710	AssignmentExpression	"prevWordIndex = getContinuationIndentAssign ( line , i )"		621404	2		=			
ANR	626711	Identifier	prevWordIndex		621404	0					
ANR	626712	CallExpression	"getContinuationIndentAssign ( line , i )"		621404	1					
ANR	626713	Callee	getContinuationIndentAssign		621404	0					
ANR	626714	Identifier	getContinuationIndentAssign		621404	0					
ANR	626715	ArgumentList	line		621404	1					
ANR	626716	Argument	line		621404	0					
ANR	626717	Identifier	line		621404	0					
ANR	626718	Argument	i		621404	1					
ANR	626719	Identifier	i		621404	0					
ANR	626720	IdentifierDeclStatement	int continuationIndentCount = prevWordIndex + spaceIndentCount + tabIncrementIn ;	3636:7:107054:107133	621404	2	True				
ANR	626721	IdentifierDecl	continuationIndentCount = prevWordIndex + spaceIndentCount + tabIncrementIn		621404	0					
ANR	626722	IdentifierDeclType	int		621404	0					
ANR	626723	Identifier	continuationIndentCount		621404	1					
ANR	626724	AssignmentExpression	continuationIndentCount = prevWordIndex + spaceIndentCount + tabIncrementIn		621404	2		=			
ANR	626725	Identifier	continuationIndentCount		621404	0					
ANR	626726	AdditiveExpression	prevWordIndex + spaceIndentCount + tabIncrementIn		621404	1		+			
ANR	626727	Identifier	prevWordIndex		621404	0					
ANR	626728	AdditiveExpression	spaceIndentCount + tabIncrementIn		621404	1		+			
ANR	626729	Identifier	spaceIndentCount		621404	0					
ANR	626730	Identifier	tabIncrementIn		621404	1					
ANR	626731	ExpressionStatement	continuationIndentStack -> emplace_back ( continuationIndentCount )	3637:7:107142:107204	621404	3	True				
ANR	626732	CallExpression	continuationIndentStack -> emplace_back ( continuationIndentCount )		621404	0					
ANR	626733	Callee	continuationIndentStack -> emplace_back		621404	0					
ANR	626734	PtrMemberAccess	continuationIndentStack -> emplace_back		621404	0					
ANR	626735	Identifier	continuationIndentStack		621404	0					
ANR	626736	Identifier	emplace_back		621404	1					
ANR	626737	ArgumentList	continuationIndentCount		621404	1					
ANR	626738	Argument	continuationIndentCount		621404	0					
ANR	626739	Identifier	continuationIndentCount		621404	0					
ANR	626740	ExpressionStatement	isContinuation = true	3638:7:107213:107234	621404	4	True				
ANR	626741	AssignmentExpression	isContinuation = true		621404	0		=			
ANR	626742	Identifier	isContinuation		621404	0					
ANR	626743	Identifier	true		621404	1					
ANR	626744	ElseStatement	else		621404	0					
ANR	626745	IfStatement	if ( isInLet )		621404	0					
ANR	626746	Condition	isInLet	3642:14:107309:107315	621404	0	True				
ANR	626747	Identifier	isInLet		621404	0					
ANR	626748	CompoundStatement		1193:5:35447:35447	621404	1					
ANR	626749	ExpressionStatement	isInLet = false	3644:6:107331:107346	621404	0	True				
ANR	626750	AssignmentExpression	isInLet = false		621404	0		=			
ANR	626751	Identifier	isInLet		621404	0					
ANR	626752	Identifier	false		621404	1					
ANR	626753	ElseStatement	else		621404	0					
ANR	626754	IfStatement	if ( ! lineBeginsWithComma )		621404	0					
ANR	626755	Condition	! lineBeginsWithComma	3646:14:107369:107388	621404	0	True				
ANR	626756	UnaryOperationExpression	! lineBeginsWithComma		621404	0					
ANR	626757	UnaryOperator	!		621404	0					
ANR	626758	Identifier	lineBeginsWithComma		621404	1					
ANR	626759	CompoundStatement		1197:5:35520:35520	621404	1					
ANR	626760	IfStatement	if ( i == 0 && spaceIndentCount == 0 )		621404	0					
ANR	626761	Condition	i == 0 && spaceIndentCount == 0	3648:10:107408:107438	621404	0	True				
ANR	626762	AndExpression	i == 0 && spaceIndentCount == 0		621404	0		&&			
ANR	626763	EqualityExpression	i == 0		621404	0		==			
ANR	626764	Identifier	i		621404	0					
ANR	626765	PrimaryExpression	0		621404	1					
ANR	626766	EqualityExpression	spaceIndentCount == 0		621404	1		==			
ANR	626767	Identifier	spaceIndentCount		621404	0					
ANR	626768	PrimaryExpression	0		621404	1					
ANR	626769	ExpressionStatement	spaceIndentCount += indentLength	3649:7:107448:107480	621404	1	True				
ANR	626770	AssignmentExpression	spaceIndentCount += indentLength		621404	0		+=			
ANR	626771	Identifier	spaceIndentCount		621404	0					
ANR	626772	Identifier	indentLength		621404	1					
ANR	626773	ExpressionStatement	"registerContinuationIndent ( line , i , spaceIndentCount , tabIncrementIn , 0 , false )"	3650:6:107488:107567	621404	1	True				
ANR	626774	CallExpression	"registerContinuationIndent ( line , i , spaceIndentCount , tabIncrementIn , 0 , false )"		621404	0					
ANR	626775	Callee	registerContinuationIndent		621404	0					
ANR	626776	Identifier	registerContinuationIndent		621404	0					
ANR	626777	ArgumentList	line		621404	1					
ANR	626778	Argument	line		621404	0					
ANR	626779	Identifier	line		621404	0					
ANR	626780	Argument	i		621404	1					
ANR	626781	Identifier	i		621404	0					
ANR	626782	Argument	spaceIndentCount		621404	2					
ANR	626783	Identifier	spaceIndentCount		621404	0					
ANR	626784	Argument	tabIncrementIn		621404	3					
ANR	626785	Identifier	tabIncrementIn		621404	0					
ANR	626786	Argument	0		621404	4					
ANR	626787	PrimaryExpression	0		621404	0					
ANR	626788	Argument	false		621404	5					
ANR	626789	Identifier	false		621404	0					
ANR	626790	ExpressionStatement	isContinuation = true	3651:6:107575:107596	621404	2	True				
ANR	626791	AssignmentExpression	isContinuation = true		621404	0		=			
ANR	626792	Identifier	isContinuation		621404	0					
ANR	626793	Identifier	true		621404	1					
ANR	626794	ReturnType	void		621404	1					
ANR	626795	Identifier	ASBeautifier :: parseCurrentLine		621404	2					
ANR	626796	ParameterList	const string & line		621404	3					
ANR	626797	Parameter	const string & line	2450:36:71855:71872	621404	0	True				
ANR	626798	ParameterType	const string &		621404	0					
ANR	626799	Identifier	line		621404	1					
ANR	626800	CFGEntryNode	ENTRY		621404		True				
ANR	626801	CFGExitNode	EXIT		621404		True				
ANR	626802	Symbol	minConditionalIndent		621404						
ANR	626803	Symbol	continuationIndentStackSizeStack -> empty		621404						
ANR	626804	Symbol	AS_OPERATOR		621404						
ANR	626805	Symbol	statementEndsWithComma		621404						
ANR	626806	Symbol	firstText		621404						
ANR	626807	Symbol	headerStack		621404						
ANR	626808	Symbol	continuationIndentStack -> size		621404						
ANR	626809	Symbol	isInEnum		621404						
ANR	626810	Symbol	restackSize		621404						
ANR	626811	Symbol	continuationIndentStackSizeStack -> back		621404						
ANR	626812	Symbol	braceBlockStateStack		621404						
ANR	626813	Symbol	blockStatementStack		621404						
ANR	626814	Symbol	AS_MS_ASM		621404						
ANR	626815	Symbol	foundIndentableHeader -> length		621404						
ANR	626816	Symbol	parenStatementStack		621404						
ANR	626817	Symbol	* foundIndentableHeader		621404						
ANR	626818	Symbol	* lastTempStack		621404						
ANR	626819	Symbol	& AS_TEMPLATE		621404						
ANR	626820	Symbol	isPotentialOperator		621404						
ANR	626821	Symbol	foundAssignmentOp -> length		621404						
ANR	626822	Symbol	AS_MS__ASM		621404						
ANR	626823	Symbol	haveAssignmentThisLine		621404						
ANR	626824	Symbol	& AS_UNION		621404						
ANR	626825	Symbol	newHeader -> length		621404						
ANR	626826	Symbol	isInLineComment		621404						
ANR	626827	Symbol	& AS_WHILE		621404						
ANR	626828	Symbol	blockCommentNoIndent		621404						
ANR	626829	Symbol	nextChar		621404						
ANR	626830	Symbol	isInCase		621404						
ANR	626831	Symbol	isSharpAccessor		621404						
ANR	626832	Symbol	continuationIndentStack -> empty		621404						
ANR	626833	Symbol	nonAssignmentOperators		621404						
ANR	626834	Symbol	isCaseHeaderCommentIndent		621404						
ANR	626835	Symbol	* headerStack -> size		621404						
ANR	626836	Symbol	isalpha		621404						
ANR	626837	Symbol	isInDefine		621404						
ANR	626838	Symbol	isInObjCMethodCall		621404						
ANR	626839	Symbol	isSharpStyle		621404						
ANR	626840	Symbol	* newHeader		621404						
ANR	626841	Symbol	isImmediatelyPostObjCMethodDefinition		621404						
ANR	626842	Symbol	& AS_MODULE		621404						
ANR	626843	Symbol	* tempStacks		621404						
ANR	626844	Symbol	AS_NEW		621404						
ANR	626845	Symbol	tabIncrementIn		621404						
ANR	626846	Symbol	isNonInStatementArray		621404						
ANR	626847	Symbol	isInObjCMethodDefinition		621404						
ANR	626848	Symbol	quoteChar		621404						
ANR	626849	Symbol	& AS_SYNCHRONIZED		621404						
ANR	626850	Symbol	ch		621404						
ANR	626851	Symbol	i		621404						
ANR	626852	Symbol	isCharPotentialOperator		621404						
ANR	626853	Symbol	prevCh		621404						
ANR	626854	Symbol	isInObjCInterface		621404						
ANR	626855	Symbol	n		621404						
ANR	626856	Symbol	preBlockStatements		621404						
ANR	626857	Symbol	parenIndentStack		621404						
ANR	626858	Symbol	foundIndentableHeader		621404						
ANR	626859	Symbol	convertTabToSpaces		621404						
ANR	626860	Symbol	popped		621404						
ANR	626861	Symbol	r		621404						
ANR	626862	Symbol	parenIndentStack -> back		621404						
ANR	626863	Symbol	curWord		621404						
ANR	626864	Symbol	nonParenHeaders		621404						
ANR	626865	Symbol	isImmediatelyPostObjCMethodCall		621404						
ANR	626866	Symbol	& AS_DEFAULT		621404						
ANR	626867	Symbol	ASBeautifier :: peekNextChar		621404						
ANR	626868	Symbol	isBlockOpener		621404						
ANR	626869	Symbol	& AS_WHERE		621404						
ANR	626870	Symbol	headerStack -> empty		621404						
ANR	626871	Symbol	* parenStatementStack		621404						
ANR	626872	Symbol	parenStatementStack -> back		621404						
ANR	626873	Symbol	haveLineContinuationChar		621404						
ANR	626874	Symbol	continuationIndentStackSizeStack		621404						
ANR	626875	Symbol	AS_NS_DURING		621404						
ANR	626876	Symbol	AS_END		621404						
ANR	626877	Symbol	labelIndent		621404						
ANR	626878	Symbol	isLegalNameChar		621404						
ANR	626879	Symbol	tempStacks -> back ( ) -> empty		621404						
ANR	626880	Symbol	braceBlockStateStack -> back		621404						
ANR	626881	Symbol	* tempStacks -> back		621404						
ANR	626882	Symbol	newHeader		621404						
ANR	626883	Symbol	squareBracketDepthStack -> back		621404						
ANR	626884	Symbol	headerStack -> size		621404						
ANR	626885	Symbol	& AS_TRY		621404						
ANR	626886	Symbol	AS_PROTECTED		621404						
ANR	626887	Symbol	* headerStack		621404						
ANR	626888	Symbol	& AS_CASE		621404						
ANR	626889	Symbol	indexOfIf		621404						
ANR	626890	Symbol	peekedChar		621404						
ANR	626891	Symbol	& AS_NAMESPACE		621404						
ANR	626892	Symbol	isInClassInitializer		621404						
ANR	626893	Symbol	& AS_FOREVER		621404						
ANR	626894	Symbol	isInAsmOneLine		621404						
ANR	626895	Symbol	isDigit		621404						
ANR	626896	Symbol	name		621404						
ANR	626897	Symbol	findKeyword		621404						
ANR	626898	Symbol	nullptr		621404						
ANR	626899	Symbol	isIndentableHeader		621404						
ANR	626900	Symbol	AS_INTERFACE		621404						
ANR	626901	Symbol	isInHeader		621404						
ANR	626902	Symbol	isSharpDelegate		621404						
ANR	626903	Symbol	( * headerStack ) . back		621404						
ANR	626904	Symbol	getContinuationIndentComma		621404						
ANR	626905	Symbol	blockIndent		621404						
ANR	626906	Symbol	lastTempStack		621404						
ANR	626907	Symbol	foundNonAssignmentOp -> length		621404						
ANR	626908	Symbol	classInitializerIndents		621404						
ANR	626909	Symbol	probationHeader		621404						
ANR	626910	Symbol	getNextWord		621404						
ANR	626911	Symbol	delimStart		621404						
ANR	626912	Symbol	* * headerStack		621404						
ANR	626913	Symbol	& AS_FINALLY		621404						
ANR	626914	Symbol	* foundNonAssignmentOp		621404						
ANR	626915	Symbol	* blockStatementStack		621404						
ANR	626916	Symbol	parenPos		621404						
ANR	626917	Symbol	headers		621404						
ANR	626918	Symbol	poppedIndent		621404						
ANR	626919	Symbol	isInClassHeaderTab		621404						
ANR	626920	Symbol	false		621404						
ANR	626921	Symbol	prevNonSpaceCh		621404						
ANR	626922	Symbol	indentLength		621404						
ANR	626923	Symbol	& AS_ELSE		621404						
ANR	626924	Symbol	isInAsm		621404						
ANR	626925	Symbol	isInClassHeader		621404						
ANR	626926	Symbol	isCharPotentialHeader		621404						
ANR	626927	Symbol	lineOpensWithLineComment		621404						
ANR	626928	Symbol	squareBracketDepthStack		621404						
ANR	626929	Symbol	line . find		621404						
ANR	626930	Symbol	isInVerbatimQuote		621404						
ANR	626931	Symbol	continuationIndentStack -> back		621404						
ANR	626932	Symbol	isContinuation		621404						
ANR	626933	Symbol	lineOpensWithComment		621404						
ANR	626934	Symbol	line . find_first_of		621404						
ANR	626935	Symbol	isWhiteSpace		621404						
ANR	626936	Symbol	parenIndentStack -> empty		621404						
ANR	626937	Symbol	indexOfTry		621404						
ANR	626938	Symbol	parenDepth		621404						
ANR	626939	Symbol	& AS_LS_LS		621404						
ANR	626940	Symbol	getNextProgramCharDistance		621404						
ANR	626941	Symbol	previousLastLineHeader		621404						
ANR	626942	Symbol	currentNonLegalCh		621404						
ANR	626943	Symbol	peekNextChar		621404						
ANR	626944	Symbol	AS_PRIVATE		621404						
ANR	626945	Symbol	lineBeginsWithComma		621404						
ANR	626946	Symbol	index		621404						
ANR	626947	Symbol	line . find_first_not_of		621404						
ANR	626948	Symbol	AS_NS_HANDLER		621404						
ANR	626949	Symbol	AS_PUBLIC		621404						
ANR	626950	Symbol	findHeader		621404						
ANR	626951	Symbol	& AS_CATCH		621404						
ANR	626952	Symbol	isCStyle		621404						
ANR	626953	Symbol	( * newHeader ) . length		621404						
ANR	626954	Symbol	prevNonLegalCh		621404						
ANR	626955	Symbol	prevWordIndex		621404						
ANR	626956	Symbol	getCurrentWord		621404						
ANR	626957	Symbol	currentNonSpaceCh		621404						
ANR	626958	Symbol	isInOperator		621404						
ANR	626959	Symbol	haveCaseIndent		621404						
ANR	626960	Symbol	getContinuationIndentAssign		621404						
ANR	626961	Symbol	isInIndentableStruct		621404						
ANR	626962	Symbol	lastTempStack -> size		621404						
ANR	626963	Symbol	isIndentedPreprocessor		621404						
ANR	626964	Symbol	lineBeginsWithOpenBrace		621404						
ANR	626965	Symbol	isInLet		621404						
ANR	626966	Symbol	& AS_STRUCT		621404						
ANR	626967	Symbol	namespaceIndent		621404						
ANR	626968	Symbol	& AS_IF		621404						
ANR	626969	Symbol	isDigitSeparator		621404						
ANR	626970	Symbol	* * nonParenHeaders		621404						
ANR	626971	Symbol	braceIndent		621404						
ANR	626972	Symbol	nonParenHeaders -> size		621404						
ANR	626973	Symbol	continuationIndentCount		621404						
ANR	626974	Symbol	* * tempStacks		621404						
ANR	626975	Symbol	* braceBlockStateStack		621404						
ANR	626976	Symbol	& AS_GR_GR		621404						
ANR	626977	Symbol	verbatimDelimiter		621404						
ANR	626978	Symbol	& AS_OPEN_BRACE		621404						
ANR	626979	Symbol	lastLineHeader		621404						
ANR	626980	Symbol	squareBracketDepthStack -> empty		621404						
ANR	626981	Symbol	* nextChar		621404						
ANR	626982	Symbol	AS_ASM		621404						
ANR	626983	Symbol	* squareBracketDepthStack		621404						
ANR	626984	Symbol	indexOfDo		621404						
ANR	626985	Symbol	indentCount		621404						
ANR	626986	Symbol	currentHeader		621404						
ANR	626987	Symbol	foundPreCommandHeader		621404						
ANR	626988	Symbol	squareBracketCount		621404						
ANR	626989	Symbol	blockStatementStack -> back		621404						
ANR	626990	Symbol	isInAsmBlock		621404						
ANR	626991	Symbol	AS__ASM__		621404						
ANR	626992	Symbol	tempStacks -> empty		621404						
ANR	626993	Symbol	parenStatementStack -> empty		621404						
ANR	626994	Symbol	* nonParenHeaders		621404						
ANR	626995	Symbol	& AS_FOR		621404						
ANR	626996	Symbol	* line		621404						
ANR	626997	Symbol	* continuationIndentStackSizeStack		621404						
ANR	626998	Symbol	isInQuote		621404						
ANR	626999	Symbol	isInTemplate		621404						
ANR	627000	Symbol	modifierIndent		621404						
ANR	627001	Symbol	adjustIndentCountForBreakElseIfComments		621404						
ANR	627002	Symbol	& AS_FOREACH		621404						
ANR	627003	Symbol	g_preprocessorCppExternCBrace		621404						
ANR	627004	Symbol	delim . length		621404						
ANR	627005	Symbol	foundNonAssignmentOp		621404						
ANR	627006	Symbol	isInEnumTypeID		621404						
ANR	627007	Symbol	AS_ENUM		621404						
ANR	627008	Symbol	indexOf		621404						
ANR	627009	Symbol	isInComment		621404						
ANR	627010	Symbol	findOperator		621404						
ANR	627011	Symbol	& AS_LAMBDA		621404						
ANR	627012	Symbol	headerStack -> back		621404						
ANR	627013	Symbol	blockTabCount		621404						
ANR	627014	Symbol	templateDepth		621404						
ANR	627015	Symbol	isInConditional		621404						
ANR	627016	Symbol	objCColonAlignSubsequent		621404						
ANR	627017	Symbol	* foundAssignmentOp		621404						
ANR	627018	Symbol	braceBlockStateStack -> size		621404						
ANR	627019	Symbol	spaceIndentCount		621404						
ANR	627020	Symbol	& AS_ASSIGN		621404						
ANR	627021	Symbol	true		621404						
ANR	627022	Symbol	AS_STRUCT		621404						
ANR	627023	Symbol	tempStacks -> back		621404						
ANR	627024	Symbol	preCommandHeaders		621404						
ANR	627025	Symbol	braceBlockState		621404						
ANR	627026	Symbol	isInQuestion		621404						
ANR	627027	Symbol	continuationIndentStack		621404						
ANR	627028	Symbol	& AS_DO		621404						
ANR	627029	Symbol	isInClass		621404						
ANR	627030	Symbol	isInExternC		621404						
ANR	627031	Symbol	AS_EXTERN		621404						
ANR	627032	Symbol	name . length		621404						
ANR	627033	Symbol	assignmentOperators		621404						
ANR	627034	Symbol	line		621404						
ANR	627035	Symbol	line . substr		621404						
ANR	627036	Symbol	AS_LET		621404						
ANR	627037	Symbol	foundPreCommandMacro		621404						
ANR	627038	Symbol	headerPlace		621404						
ANR	627039	Symbol	string :: npos		621404						
ANR	627040	Symbol	isSpecialChar		621404						
ANR	627041	Symbol	tempStacks		621404						
ANR	627042	Symbol	isPotentialHeader		621404						
ANR	627043	Symbol	isInBeautifySQL		621404						
ANR	627044	Symbol	lastTempStack -> back		621404						
ANR	627045	Symbol	isInObjCMethodCallFirst		621404						
ANR	627046	Symbol	foundAssignmentOp		621404						
ANR	627047	Symbol	indentableHeaders		621404						
ANR	627048	Symbol	prevWord		621404						
ANR	627049	Symbol	shouldIndentBracedLine		621404						
ANR	627050	Symbol	* continuationIndentStack		621404						
ANR	627051	Symbol	& AS_INTERFACE		621404						
ANR	627052	Symbol	delim		621404						
ANR	627053	Symbol	* parenIndentStack		621404						
ANR	627054	Symbol	line . compare		621404						
ANR	627055	Symbol	temp		621404						
ANR	627056	Symbol	& AS_USING		621404						
ANR	627057	Symbol	& AS_STATIC		621404						
ANR	627058	Symbol	* i		621404						
ANR	627059	Symbol	& AS_CLASS		621404						
ANR	627060	Symbol	previousLineProbationTab		621404						
ANR	627061	Symbol	closingBraceReached		621404						
ANR	627062	Symbol	isJavaStyle		621404						
ANR	627063	Symbol	previousLineProbation		621404						
ANR	627064	Symbol	* n		621404						
ANR	627065	Symbol	isElseHeaderIndent		621404						
ANR	627066	Symbol	line . length		621404						
