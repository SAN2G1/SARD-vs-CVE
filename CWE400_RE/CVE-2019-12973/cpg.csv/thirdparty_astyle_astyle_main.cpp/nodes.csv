command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	675643	File	data/converged/CVE-2019-12973_openjpeg/thirdparty_astyle_astyle_main.cpp								
ANR	675644	DeclStmt									
ANR	675645	Decl							int	int	_CRT_glob
ANR	675646	DeclStmt									
ANR	675647	Decl							char	char	g_fileSeparator
ANR	675648	DeclStmt									
ANR	675649	Decl							bool	bool	g_isCaseSensitive
ANR	675650	DeclStmt									
ANR	675651	Decl							char	char	g_fileSeparator
ANR	675652	DeclStmt									
ANR	675653	Decl							bool	bool	g_isCaseSensitive
ANR	675654	DeclStmt									
ANR	675655	Decl							JNIEnv	JNIEnv *	g_env
ANR	675656	DeclStmt									
ANR	675657	Decl							jobject	jobject	g_obj
ANR	675658	DeclStmt									
ANR	675659	Decl							jmethodID	jmethodID	g_mid
ANR	675660	DeclStmt									
ANR	675661	Decl							const char	const char *	g_version
ANR	675662	Function	ASStreamIterator	105:21:3110:3424							
ANR	675663	FunctionDef	ASStreamIterator (T * in)		675662	0					
ANR	675664	CompoundStatement		106:0:3134:3424	675662	0					
ANR	675665	ExpressionStatement	inStream = in	107:1:3137:3150	675662	0	True				
ANR	675666	AssignmentExpression	inStream = in		675662	0		=			
ANR	675667	Identifier	inStream		675662	0					
ANR	675668	Identifier	in		675662	1					
ANR	675669	ExpressionStatement	buffer . reserve ( 200 )	108:1:3153:3172	675662	1	True				
ANR	675670	CallExpression	buffer . reserve ( 200 )		675662	0					
ANR	675671	Callee	buffer . reserve		675662	0					
ANR	675672	MemberAccess	buffer . reserve		675662	0					
ANR	675673	Identifier	buffer		675662	0					
ANR	675674	Identifier	reserve		675662	1					
ANR	675675	ArgumentList	200		675662	1					
ANR	675676	Argument	200		675662	0					
ANR	675677	PrimaryExpression	200		675662	0					
ANR	675678	ExpressionStatement	eolWindows = 0	109:1:3175:3189	675662	2	True				
ANR	675679	AssignmentExpression	eolWindows = 0		675662	0		=			
ANR	675680	Identifier	eolWindows		675662	0					
ANR	675681	PrimaryExpression	0		675662	1					
ANR	675682	ExpressionStatement	eolLinux = 0	110:1:3192:3204	675662	3	True				
ANR	675683	AssignmentExpression	eolLinux = 0		675662	0		=			
ANR	675684	Identifier	eolLinux		675662	0					
ANR	675685	PrimaryExpression	0		675662	1					
ANR	675686	ExpressionStatement	eolMacOld = 0	111:1:3207:3220	675662	4	True				
ANR	675687	AssignmentExpression	eolMacOld = 0		675662	0		=			
ANR	675688	Identifier	eolMacOld		675662	0					
ANR	675689	PrimaryExpression	0		675662	1					
ANR	675690	ExpressionStatement	peekStart = 0	112:1:3223:3236	675662	5	True				
ANR	675691	AssignmentExpression	peekStart = 0		675662	0		=			
ANR	675692	Identifier	peekStart		675662	0					
ANR	675693	PrimaryExpression	0		675662	1					
ANR	675694	ExpressionStatement	prevLineDeleted = false	113:1:3239:3262	675662	6	True				
ANR	675695	AssignmentExpression	prevLineDeleted = false		675662	0		=			
ANR	675696	Identifier	prevLineDeleted		675662	0					
ANR	675697	Identifier	false		675662	1					
ANR	675698	ExpressionStatement	checkForEmptyLine = false	114:1:3265:3290	675662	7	True				
ANR	675699	AssignmentExpression	checkForEmptyLine = false		675662	0		=			
ANR	675700	Identifier	checkForEmptyLine		675662	0					
ANR	675701	Identifier	false		675662	1					
ANR	675702	ExpressionStatement	"inStream -> seekg ( 0 , inStream -> end )"	116:1:3318:3351	675662	8	True				
ANR	675703	CallExpression	"inStream -> seekg ( 0 , inStream -> end )"		675662	0					
ANR	675704	Callee	inStream -> seekg		675662	0					
ANR	675705	PtrMemberAccess	inStream -> seekg		675662	0					
ANR	675706	Identifier	inStream		675662	0					
ANR	675707	Identifier	seekg		675662	1					
ANR	675708	ArgumentList	0		675662	1					
ANR	675709	Argument	0		675662	0					
ANR	675710	PrimaryExpression	0		675662	0					
ANR	675711	Argument	inStream -> end		675662	1					
ANR	675712	PtrMemberAccess	inStream -> end		675662	0					
ANR	675713	Identifier	inStream		675662	0					
ANR	675714	Identifier	end		675662	1					
ANR	675715	ExpressionStatement	streamLength = inStream -> tellg ( )	117:1:3354:3386	675662	9	True				
ANR	675716	AssignmentExpression	streamLength = inStream -> tellg ( )		675662	0		=			
ANR	675717	Identifier	streamLength		675662	0					
ANR	675718	CallExpression	inStream -> tellg ( )		675662	1					
ANR	675719	Callee	inStream -> tellg		675662	0					
ANR	675720	PtrMemberAccess	inStream -> tellg		675662	0					
ANR	675721	Identifier	inStream		675662	0					
ANR	675722	Identifier	tellg		675662	1					
ANR	675723	ArgumentList			675662	1					
ANR	675724	ExpressionStatement	"inStream -> seekg ( 0 , inStream -> beg )"	118:1:3389:3422	675662	10	True				
ANR	675725	CallExpression	"inStream -> seekg ( 0 , inStream -> beg )"		675662	0					
ANR	675726	Callee	inStream -> seekg		675662	0					
ANR	675727	PtrMemberAccess	inStream -> seekg		675662	0					
ANR	675728	Identifier	inStream		675662	0					
ANR	675729	Identifier	seekg		675662	1					
ANR	675730	ArgumentList	0		675662	1					
ANR	675731	Argument	0		675662	0					
ANR	675732	PrimaryExpression	0		675662	0					
ANR	675733	Argument	inStream -> beg		675662	1					
ANR	675734	PtrMemberAccess	inStream -> beg		675662	0					
ANR	675735	Identifier	inStream		675662	0					
ANR	675736	Identifier	beg		675662	1					
ANR	675737	Identifier	ASStreamIterator		675662	1					
ANR	675738	ParameterList	T * in		675662	2					
ANR	675739	Parameter	T * in	105:38:3127:3131	675662	0	True				
ANR	675740	ParameterType	T *		675662	0					
ANR	675741	Identifier	in		675662	1					
ANR	675742	CFGEntryNode	ENTRY		675662		True				
ANR	675743	CFGExitNode	EXIT		675662		True				
ANR	675744	Symbol	eolLinux		675662						
ANR	675745	Symbol	in		675662						
ANR	675746	Symbol	inStream		675662						
ANR	675747	Symbol	* inStream		675662						
ANR	675748	Symbol	false		675662						
ANR	675749	Symbol	inStream -> end		675662						
ANR	675750	Symbol	inStream -> tellg		675662						
ANR	675751	Symbol	streamLength		675662						
ANR	675752	Symbol	prevLineDeleted		675662						
ANR	675753	Symbol	checkForEmptyLine		675662						
ANR	675754	Symbol	eolWindows		675662						
ANR	675755	Symbol	eolMacOld		675662						
ANR	675756	Symbol	buffer		675662						
ANR	675757	Symbol	peekStart		675662						
ANR	675758	Symbol	inStream -> beg		675662						
ANR	675759	Function	~ASStreamIterator	122:21:3469:3491							
ANR	675760	FunctionDef	~ASStreamIterator ()		675759	0					
ANR	675761	CompoundStatement		123:0:3489:3491	675759	0					
ANR	675762	Identifier	~ASStreamIterator		675759	1					
ANR	675763	ParameterList			675759	2					
ANR	675764	CFGEntryNode	ENTRY		675759		True				
ANR	675765	CFGExitNode	EXIT		675759		True				
ANR	675766	Function	getStreamLength	133:25:3706:3772							
ANR	675767	FunctionDef	getStreamLength ()		675766	0					
ANR	675768	CompoundStatement		134:0:3730:3772	675766	0					
ANR	675769	ReturnStatement	return static_cast < int > ( streamLength ) ;	135:1:3733:3770	675766	0	True				
ANR	675770	RelationalExpression	static_cast < int > ( streamLength )		675766	0		<			
ANR	675771	Identifier	static_cast		675766	0					
ANR	675772	RelationalExpression	int > ( streamLength )		675766	1		>			
ANR	675773	Identifier	int		675766	0					
ANR	675774	Identifier	streamLength		675766	1					
ANR	675775	Identifier	getStreamLength		675766	1					
ANR	675776	ParameterList			675766	2					
ANR	675777	CFGEntryNode	ENTRY		675766		True				
ANR	675778	CFGExitNode	EXIT		675766		True				
ANR	675779	Symbol	static_cast		675766						
ANR	675780	Symbol	streamLength		675766						
ANR	675781	Symbol	int		675766						
ANR	675782	Function	nextLine	145:28:4041:5492							
ANR	675783	FunctionDef	nextLine (bool emptyLineWasDeleted)		675782	0					
ANR	675784	CompoundStatement		146:0:4076:5492	675782	0					
ANR	675785	ExpressionStatement	assert ( peekStart == 0 )	148:1:4127:4149	675782	0	True				
ANR	675786	CallExpression	assert ( peekStart == 0 )		675782	0					
ANR	675787	Callee	assert		675782	0					
ANR	675788	Identifier	assert		675782	0					
ANR	675789	ArgumentList	peekStart == 0		675782	1					
ANR	675790	Argument	peekStart == 0		675782	0					
ANR	675791	EqualityExpression	peekStart == 0		675782	0		==			
ANR	675792	Identifier	peekStart		675782	0					
ANR	675793	PrimaryExpression	0		675782	1					
ANR	675794	IfStatement	if ( prevLineDeleted )		675782	1					
ANR	675795	Condition	prevLineDeleted	152:5:4285:4299	675782	0	True				
ANR	675796	Identifier	prevLineDeleted		675782	0					
ANR	675797	CompoundStatement		8:1:226:226	675782	1					
ANR	675798	ExpressionStatement	prevLineDeleted = false	154:2:4307:4330	675782	0	True				
ANR	675799	AssignmentExpression	prevLineDeleted = false		675782	0		=			
ANR	675800	Identifier	prevLineDeleted		675782	0					
ANR	675801	Identifier	false		675782	1					
ANR	675802	ExpressionStatement	checkForEmptyLine = true	155:2:4334:4358	675782	1	True				
ANR	675803	AssignmentExpression	checkForEmptyLine = true		675782	0		=			
ANR	675804	Identifier	checkForEmptyLine		675782	0					
ANR	675805	Identifier	true		675782	1					
ANR	675806	IfStatement	if ( ! emptyLineWasDeleted )		675782	2					
ANR	675807	Condition	! emptyLineWasDeleted	157:5:4368:4387	675782	0	True				
ANR	675808	UnaryOperationExpression	! emptyLineWasDeleted		675782	0					
ANR	675809	UnaryOperator	!		675782	0					
ANR	675810	Identifier	emptyLineWasDeleted		675782	1					
ANR	675811	ExpressionStatement	prevBuffer = buffer	158:2:4392:4411	675782	1	True				
ANR	675812	AssignmentExpression	prevBuffer = buffer		675782	0		=			
ANR	675813	Identifier	prevBuffer		675782	0					
ANR	675814	Identifier	buffer		675782	1					
ANR	675815	ElseStatement	else		675782	0					
ANR	675816	ExpressionStatement	prevLineDeleted = true	160:2:4421:4443	675782	0	True				
ANR	675817	AssignmentExpression	prevLineDeleted = true		675782	0		=			
ANR	675818	Identifier	prevLineDeleted		675782	0					
ANR	675819	Identifier	true		675782	1					
ANR	675820	ExpressionStatement	buffer . clear ( )	163:1:4472:4486	675782	3	True				
ANR	675821	CallExpression	buffer . clear ( )		675782	0					
ANR	675822	Callee	buffer . clear		675782	0					
ANR	675823	MemberAccess	buffer . clear		675782	0					
ANR	675824	Identifier	buffer		675782	0					
ANR	675825	Identifier	clear		675782	1					
ANR	675826	ArgumentList			675782	1					
ANR	675827	IdentifierDeclStatement	char ch ;	164:1:4489:4496	675782	4	True				
ANR	675828	IdentifierDecl	ch		675782	0					
ANR	675829	IdentifierDeclType	char		675782	0					
ANR	675830	Identifier	ch		675782	1					
ANR	675831	ExpressionStatement	inStream -> get ( ch )	165:1:4499:4516	675782	5	True				
ANR	675832	CallExpression	inStream -> get ( ch )		675782	0					
ANR	675833	Callee	inStream -> get		675782	0					
ANR	675834	PtrMemberAccess	inStream -> get		675782	0					
ANR	675835	Identifier	inStream		675782	0					
ANR	675836	Identifier	get		675782	1					
ANR	675837	ArgumentList	ch		675782	1					
ANR	675838	Argument	ch		675782	0					
ANR	675839	Identifier	ch		675782	0					
ANR	675840	WhileStatement	while ( ! inStream -> eof ( ) && ch != '\\n' && ch != '\\r' )		675782	6					
ANR	675841	Condition	! inStream -> eof ( ) && ch != '\\n' && ch != '\\r'	167:8:4527:4570	675782	0	True				
ANR	675842	AndExpression	! inStream -> eof ( ) && ch != '\\n' && ch != '\\r'		675782	0		&&			
ANR	675843	UnaryOperationExpression	! inStream -> eof ( )		675782	0					
ANR	675844	UnaryOperator	!		675782	0					
ANR	675845	CallExpression	inStream -> eof ( )		675782	1					
ANR	675846	Callee	inStream -> eof		675782	0					
ANR	675847	PtrMemberAccess	inStream -> eof		675782	0					
ANR	675848	Identifier	inStream		675782	0					
ANR	675849	Identifier	eof		675782	1					
ANR	675850	ArgumentList			675782	1					
ANR	675851	AndExpression	ch != '\\n' && ch != '\\r'		675782	1		&&			
ANR	675852	EqualityExpression	ch != '\\n'		675782	0		!=			
ANR	675853	Identifier	ch		675782	0					
ANR	675854	PrimaryExpression	'\\n'		675782	1					
ANR	675855	EqualityExpression	ch != '\\r'		675782	1		!=			
ANR	675856	Identifier	ch		675782	0					
ANR	675857	PrimaryExpression	'\\r'		675782	1					
ANR	675858	CompoundStatement		23:1:497:497	675782	1					
ANR	675859	ExpressionStatement	"buffer . append ( 1 , ch )"	169:2:4578:4598	675782	0	True				
ANR	675860	CallExpression	"buffer . append ( 1 , ch )"		675782	0					
ANR	675861	Callee	buffer . append		675782	0					
ANR	675862	MemberAccess	buffer . append		675782	0					
ANR	675863	Identifier	buffer		675782	0					
ANR	675864	Identifier	append		675782	1					
ANR	675865	ArgumentList	1		675782	1					
ANR	675866	Argument	1		675782	0					
ANR	675867	PrimaryExpression	1		675782	0					
ANR	675868	Argument	ch		675782	1					
ANR	675869	Identifier	ch		675782	0					
ANR	675870	ExpressionStatement	inStream -> get ( ch )	170:2:4602:4619	675782	1	True				
ANR	675871	CallExpression	inStream -> get ( ch )		675782	0					
ANR	675872	Callee	inStream -> get		675782	0					
ANR	675873	PtrMemberAccess	inStream -> get		675782	0					
ANR	675874	Identifier	inStream		675782	0					
ANR	675875	Identifier	get		675782	1					
ANR	675876	ArgumentList	ch		675782	1					
ANR	675877	Argument	ch		675782	0					
ANR	675878	Identifier	ch		675782	0					
ANR	675879	IfStatement	if ( inStream -> eof ( ) )		675782	7					
ANR	675880	Condition	inStream -> eof ( )	173:5:4630:4644	675782	0	True				
ANR	675881	CallExpression	inStream -> eof ( )		675782	0					
ANR	675882	Callee	inStream -> eof		675782	0					
ANR	675883	PtrMemberAccess	inStream -> eof		675782	0					
ANR	675884	Identifier	inStream		675782	0					
ANR	675885	Identifier	eof		675782	1					
ANR	675886	ArgumentList			675782	1					
ANR	675887	CompoundStatement		29:1:571:571	675782	1					
ANR	675888	ReturnStatement	return buffer ;	175:2:4652:4665	675782	0	True				
ANR	675889	Identifier	buffer		675782	0					
ANR	675890	IdentifierDeclStatement	int peekCh = inStream -> peek ( ) ;	178:1:4672:4701	675782	8	True				
ANR	675891	IdentifierDecl	peekCh = inStream -> peek ( )		675782	0					
ANR	675892	IdentifierDeclType	int		675782	0					
ANR	675893	Identifier	peekCh		675782	1					
ANR	675894	AssignmentExpression	peekCh = inStream -> peek ( )		675782	2		=			
ANR	675895	Identifier	peekCh		675782	0					
ANR	675896	CallExpression	inStream -> peek ( )		675782	1					
ANR	675897	Callee	inStream -> peek		675782	0					
ANR	675898	PtrMemberAccess	inStream -> peek		675782	0					
ANR	675899	Identifier	inStream		675782	0					
ANR	675900	Identifier	peek		675782	1					
ANR	675901	ArgumentList			675782	1					
ANR	675902	IfStatement	if ( ! inStream -> eof ( ) )		675782	9					
ANR	675903	Condition	! inStream -> eof ( )	181:5:4747:4762	675782	0	True				
ANR	675904	UnaryOperationExpression	! inStream -> eof ( )		675782	0					
ANR	675905	UnaryOperator	!		675782	0					
ANR	675906	CallExpression	inStream -> eof ( )		675782	1					
ANR	675907	Callee	inStream -> eof		675782	0					
ANR	675908	PtrMemberAccess	inStream -> eof		675782	0					
ANR	675909	Identifier	inStream		675782	0					
ANR	675910	Identifier	eof		675782	1					
ANR	675911	ArgumentList			675782	1					
ANR	675912	CompoundStatement		37:1:689:689	675782	1					
ANR	675913	IfStatement	if ( ch == '\\r' )		675782	0					
ANR	675914	Condition	ch == '\\r'	183:6:4774:4783	675782	0	True				
ANR	675915	EqualityExpression	ch == '\\r'		675782	0		==			
ANR	675916	Identifier	ch		675782	0					
ANR	675917	PrimaryExpression	'\\r'		675782	1					
ANR	675918	CompoundStatement		39:2:758:758	675782	1					
ANR	675919	IfStatement	if ( peekCh == '\\n' )		675782	0					
ANR	675920	Condition	peekCh == '\\n'	185:7:4844:4857	675782	0	True				
ANR	675921	EqualityExpression	peekCh == '\\n'		675782	0		==			
ANR	675922	Identifier	peekCh		675782	0					
ANR	675923	PrimaryExpression	'\\n'		675782	1					
ANR	675924	CompoundStatement		41:3:786:786	675782	1					
ANR	675925	ExpressionStatement	inStream -> get ( )	187:4:4869:4884	675782	0	True				
ANR	675926	CallExpression	inStream -> get ( )		675782	0					
ANR	675927	Callee	inStream -> get		675782	0					
ANR	675928	PtrMemberAccess	inStream -> get		675782	0					
ANR	675929	Identifier	inStream		675782	0					
ANR	675930	Identifier	get		675782	1					
ANR	675931	ArgumentList			675782	1					
ANR	675932	ExpressionStatement	eolWindows ++	188:4:4890:4902	675782	1	True				
ANR	675933	PostIncDecOperationExpression	eolWindows ++		675782	0					
ANR	675934	Identifier	eolWindows		675782	0					
ANR	675935	IncDec	++		675782	1					
ANR	675936	ElseStatement	else		675782	0					
ANR	675937	ExpressionStatement	eolMacOld ++	191:4:4921:4932	675782	0	True				
ANR	675938	PostIncDecOperationExpression	eolMacOld ++		675782	0					
ANR	675939	Identifier	eolMacOld		675782	0					
ANR	675940	IncDec	++		675782	1					
ANR	675941	ElseStatement	else		675782	0					
ANR	675942	CompoundStatement		49:2:932:932	675782	0					
ANR	675943	IfStatement	if ( peekCh == '\\r' )		675782	0					
ANR	675944	Condition	peekCh == '\\r'	195:7:5018:5031	675782	0	True				
ANR	675945	EqualityExpression	peekCh == '\\r'		675782	0		==			
ANR	675946	Identifier	peekCh		675782	0					
ANR	675947	PrimaryExpression	'\\r'		675782	1					
ANR	675948	CompoundStatement		51:3:960:960	675782	1					
ANR	675949	ExpressionStatement	inStream -> get ( )	197:4:5043:5058	675782	0	True				
ANR	675950	CallExpression	inStream -> get ( )		675782	0					
ANR	675951	Callee	inStream -> get		675782	0					
ANR	675952	PtrMemberAccess	inStream -> get		675782	0					
ANR	675953	Identifier	inStream		675782	0					
ANR	675954	Identifier	get		675782	1					
ANR	675955	ArgumentList			675782	1					
ANR	675956	ExpressionStatement	eolWindows ++	198:4:5064:5076	675782	1	True				
ANR	675957	PostIncDecOperationExpression	eolWindows ++		675782	0					
ANR	675958	Identifier	eolWindows		675782	0					
ANR	675959	IncDec	++		675782	1					
ANR	675960	ElseStatement	else		675782	0					
ANR	675961	ExpressionStatement	eolLinux ++	201:4:5095:5105	675782	0	True				
ANR	675962	PostIncDecOperationExpression	eolLinux ++		675782	0					
ANR	675963	Identifier	eolLinux		675782	0					
ANR	675964	IncDec	++		675782	1					
ANR	675965	ElseStatement	else		675782	0					
ANR	675966	CompoundStatement		60:1:1044:1044	675782	0					
ANR	675967	ExpressionStatement	inStream -> clear ( )	206:2:5125:5142	675782	0	True				
ANR	675968	CallExpression	inStream -> clear ( )		675782	0					
ANR	675969	Callee	inStream -> clear		675782	0					
ANR	675970	PtrMemberAccess	inStream -> clear		675782	0					
ANR	675971	Identifier	inStream		675782	0					
ANR	675972	Identifier	clear		675782	1					
ANR	675973	ArgumentList			675782	1					
ANR	675974	IfStatement	if ( eolWindows >= eolLinux )		675782	10					
ANR	675975	Condition	eolWindows >= eolLinux	210:5:5191:5212	675782	0	True				
ANR	675976	RelationalExpression	eolWindows >= eolLinux		675782	0		>=			
ANR	675977	Identifier	eolWindows		675782	0					
ANR	675978	Identifier	eolLinux		675782	1					
ANR	675979	CompoundStatement		66:1:1139:1139	675782	1					
ANR	675980	IfStatement	if ( eolWindows >= eolMacOld )		675782	0					
ANR	675981	Condition	eolWindows >= eolMacOld	212:6:5224:5246	675782	0	True				
ANR	675982	RelationalExpression	eolWindows >= eolMacOld		675782	0		>=			
ANR	675983	Identifier	eolWindows		675782	0					
ANR	675984	Identifier	eolMacOld		675782	1					
ANR	675985	ExpressionStatement	"outputEOL = ""\\r\\n"""	213:3:5252:5270	675782	1	True				
ANR	675986	AssignmentExpression	"outputEOL = ""\\r\\n"""		675782	0		=			
ANR	675987	Identifier	outputEOL		675782	0					
ANR	675988	PrimaryExpression	"""\\r\\n"""		675782	1					
ANR	675989	ElseStatement	else		675782	0					
ANR	675990	ExpressionStatement	"outputEOL = ""\\r"""	215:3:5305:5321	675782	0	True				
ANR	675991	AssignmentExpression	"outputEOL = ""\\r"""		675782	0		=			
ANR	675992	Identifier	outputEOL		675782	0					
ANR	675993	PrimaryExpression	"""\\r"""		675782	1					
ANR	675994	ElseStatement	else		675782	0					
ANR	675995	IfStatement	if ( eolLinux >= eolMacOld )		675782	0					
ANR	675996	Condition	eolLinux >= eolMacOld	217:10:5357:5377	675782	0	True				
ANR	675997	RelationalExpression	eolLinux >= eolMacOld		675782	0		>=			
ANR	675998	Identifier	eolLinux		675782	0					
ANR	675999	Identifier	eolMacOld		675782	1					
ANR	676000	ExpressionStatement	"outputEOL = ""\\n"""	218:2:5382:5398	675782	1	True				
ANR	676001	AssignmentExpression	"outputEOL = ""\\n"""		675782	0		=			
ANR	676002	Identifier	outputEOL		675782	0					
ANR	676003	PrimaryExpression	"""\\n"""		675782	1					
ANR	676004	ElseStatement	else		675782	0					
ANR	676005	ExpressionStatement	"outputEOL = ""\\r"""	220:2:5432:5448	675782	0	True				
ANR	676006	AssignmentExpression	"outputEOL = ""\\r"""		675782	0		=			
ANR	676007	Identifier	outputEOL		675782	0					
ANR	676008	PrimaryExpression	"""\\r"""		675782	1					
ANR	676009	ReturnStatement	return buffer ;	222:1:5477:5490	675782	11	True				
ANR	676010	Identifier	buffer		675782	0					
ANR	676011	Identifier	nextLine		675782	1					
ANR	676012	ParameterList	bool emptyLineWasDeleted		675782	2					
ANR	676013	Parameter	bool emptyLineWasDeleted	145:37:4050:4073	675782	0	True				
ANR	676014	ParameterType	bool		675782	0					
ANR	676015	Identifier	emptyLineWasDeleted		675782	1					
ANR	676016	CFGEntryNode	ENTRY		675782		True				
ANR	676017	CFGExitNode	EXIT		675782		True				
ANR	676018	Symbol	prevBuffer		675782						
ANR	676019	Symbol	eolLinux		675782						
ANR	676020	Symbol	ch		675782						
ANR	676021	Symbol	inStream		675782						
ANR	676022	Symbol	* inStream		675782						
ANR	676023	Symbol	inStream -> eof		675782						
ANR	676024	Symbol	false		675782						
ANR	676025	Symbol	prevLineDeleted		675782						
ANR	676026	Symbol	checkForEmptyLine		675782						
ANR	676027	Symbol	outputEOL		675782						
ANR	676028	Symbol	eolWindows		675782						
ANR	676029	Symbol	emptyLineWasDeleted		675782						
ANR	676030	Symbol	eolMacOld		675782						
ANR	676031	Symbol	true		675782						
ANR	676032	Symbol	buffer		675782						
ANR	676033	Symbol	peekStart		675782						
ANR	676034	Symbol	peekCh		675782						
ANR	676035	Symbol	inStream -> peek		675782						
ANR	676036	Function	peekNextLine	230:28:5731:6255							
ANR	676037	FunctionDef	peekNextLine ()		676036	0					
ANR	676038	CompoundStatement		231:0:5746:6255	676036	0					
ANR	676039	ExpressionStatement	assert ( hasMoreLines ( ) )	232:1:5749:5771	676036	0	True				
ANR	676040	CallExpression	assert ( hasMoreLines ( ) )		676036	0					
ANR	676041	Callee	assert		676036	0					
ANR	676042	Identifier	assert		676036	0					
ANR	676043	ArgumentList	hasMoreLines ( )		676036	1					
ANR	676044	Argument	hasMoreLines ( )		676036	0					
ANR	676045	CallExpression	hasMoreLines ( )		676036	0					
ANR	676046	Callee	hasMoreLines		676036	0					
ANR	676047	Identifier	hasMoreLines		676036	0					
ANR	676048	ArgumentList			676036	1					
ANR	676049	IdentifierDeclStatement	string nextLine_ ;	233:1:5774:5790	676036	1	True				
ANR	676050	IdentifierDecl	nextLine_		676036	0					
ANR	676051	IdentifierDeclType	string		676036	0					
ANR	676052	Identifier	nextLine_		676036	1					
ANR	676053	IdentifierDeclStatement	char ch ;	234:1:5793:5800	676036	2	True				
ANR	676054	IdentifierDecl	ch		676036	0					
ANR	676055	IdentifierDeclType	char		676036	0					
ANR	676056	Identifier	ch		676036	1					
ANR	676057	IfStatement	if ( peekStart == 0 )		676036	3					
ANR	676058	Condition	peekStart == 0	236:5:5808:5821	676036	0	True				
ANR	676059	EqualityExpression	peekStart == 0		676036	0		==			
ANR	676060	Identifier	peekStart		676036	0					
ANR	676061	PrimaryExpression	0		676036	1					
ANR	676062	ExpressionStatement	peekStart = inStream -> tellg ( )	237:2:5826:5855	676036	1	True				
ANR	676063	AssignmentExpression	peekStart = inStream -> tellg ( )		676036	0		=			
ANR	676064	Identifier	peekStart		676036	0					
ANR	676065	CallExpression	inStream -> tellg ( )		676036	1					
ANR	676066	Callee	inStream -> tellg		676036	0					
ANR	676067	PtrMemberAccess	inStream -> tellg		676036	0					
ANR	676068	Identifier	inStream		676036	0					
ANR	676069	Identifier	tellg		676036	1					
ANR	676070	ArgumentList			676036	1					
ANR	676071	ExpressionStatement	inStream -> get ( ch )	240:1:5884:5901	676036	4	True				
ANR	676072	CallExpression	inStream -> get ( ch )		676036	0					
ANR	676073	Callee	inStream -> get		676036	0					
ANR	676074	PtrMemberAccess	inStream -> get		676036	0					
ANR	676075	Identifier	inStream		676036	0					
ANR	676076	Identifier	get		676036	1					
ANR	676077	ArgumentList	ch		676036	1					
ANR	676078	Argument	ch		676036	0					
ANR	676079	Identifier	ch		676036	0					
ANR	676080	WhileStatement	while ( ! inStream -> eof ( ) && ch != '\\n' && ch != '\\r' )		676036	5					
ANR	676081	Condition	! inStream -> eof ( ) && ch != '\\n' && ch != '\\r'	241:8:5911:5954	676036	0	True				
ANR	676082	AndExpression	! inStream -> eof ( ) && ch != '\\n' && ch != '\\r'		676036	0		&&			
ANR	676083	UnaryOperationExpression	! inStream -> eof ( )		676036	0					
ANR	676084	UnaryOperator	!		676036	0					
ANR	676085	CallExpression	inStream -> eof ( )		676036	1					
ANR	676086	Callee	inStream -> eof		676036	0					
ANR	676087	PtrMemberAccess	inStream -> eof		676036	0					
ANR	676088	Identifier	inStream		676036	0					
ANR	676089	Identifier	eof		676036	1					
ANR	676090	ArgumentList			676036	1					
ANR	676091	AndExpression	ch != '\\n' && ch != '\\r'		676036	1		&&			
ANR	676092	EqualityExpression	ch != '\\n'		676036	0		!=			
ANR	676093	Identifier	ch		676036	0					
ANR	676094	PrimaryExpression	'\\n'		676036	1					
ANR	676095	EqualityExpression	ch != '\\r'		676036	1		!=			
ANR	676096	Identifier	ch		676036	0					
ANR	676097	PrimaryExpression	'\\r'		676036	1					
ANR	676098	CompoundStatement		12:1:211:211	676036	1					
ANR	676099	ExpressionStatement	"nextLine_ . append ( 1 , ch )"	243:2:5962:5985	676036	0	True				
ANR	676100	CallExpression	"nextLine_ . append ( 1 , ch )"		676036	0					
ANR	676101	Callee	nextLine_ . append		676036	0					
ANR	676102	MemberAccess	nextLine_ . append		676036	0					
ANR	676103	Identifier	nextLine_		676036	0					
ANR	676104	Identifier	append		676036	1					
ANR	676105	ArgumentList	1		676036	1					
ANR	676106	Argument	1		676036	0					
ANR	676107	PrimaryExpression	1		676036	0					
ANR	676108	Argument	ch		676036	1					
ANR	676109	Identifier	ch		676036	0					
ANR	676110	ExpressionStatement	inStream -> get ( ch )	244:2:5989:6006	676036	1	True				
ANR	676111	CallExpression	inStream -> get ( ch )		676036	0					
ANR	676112	Callee	inStream -> get		676036	0					
ANR	676113	PtrMemberAccess	inStream -> get		676036	0					
ANR	676114	Identifier	inStream		676036	0					
ANR	676115	Identifier	get		676036	1					
ANR	676116	ArgumentList	ch		676036	1					
ANR	676117	Argument	ch		676036	0					
ANR	676118	Identifier	ch		676036	0					
ANR	676119	IfStatement	if ( inStream -> eof ( ) )		676036	6					
ANR	676120	Condition	inStream -> eof ( )	247:5:6017:6031	676036	0	True				
ANR	676121	CallExpression	inStream -> eof ( )		676036	0					
ANR	676122	Callee	inStream -> eof		676036	0					
ANR	676123	PtrMemberAccess	inStream -> eof		676036	0					
ANR	676124	Identifier	inStream		676036	0					
ANR	676125	Identifier	eof		676036	1					
ANR	676126	ArgumentList			676036	1					
ANR	676127	CompoundStatement		18:1:288:288	676036	1					
ANR	676128	ReturnStatement	return nextLine_ ;	249:2:6039:6055	676036	0	True				
ANR	676129	Identifier	nextLine_		676036	0					
ANR	676130	IdentifierDeclStatement	int peekCh = inStream -> peek ( ) ;	252:1:6062:6091	676036	7	True				
ANR	676131	IdentifierDecl	peekCh = inStream -> peek ( )		676036	0					
ANR	676132	IdentifierDeclType	int		676036	0					
ANR	676133	Identifier	peekCh		676036	1					
ANR	676134	AssignmentExpression	peekCh = inStream -> peek ( )		676036	2		=			
ANR	676135	Identifier	peekCh		676036	0					
ANR	676136	CallExpression	inStream -> peek ( )		676036	1					
ANR	676137	Callee	inStream -> peek		676036	0					
ANR	676138	PtrMemberAccess	inStream -> peek		676036	0					
ANR	676139	Identifier	inStream		676036	0					
ANR	676140	Identifier	peek		676036	1					
ANR	676141	ArgumentList			676036	1					
ANR	676142	IfStatement	if ( ! inStream -> eof ( ) )		676036	8					
ANR	676143	Condition	! inStream -> eof ( )	255:5:6133:6148	676036	0	True				
ANR	676144	UnaryOperationExpression	! inStream -> eof ( )		676036	0					
ANR	676145	UnaryOperator	!		676036	0					
ANR	676146	CallExpression	inStream -> eof ( )		676036	1					
ANR	676147	Callee	inStream -> eof		676036	0					
ANR	676148	PtrMemberAccess	inStream -> eof		676036	0					
ANR	676149	Identifier	inStream		676036	0					
ANR	676150	Identifier	eof		676036	1					
ANR	676151	ArgumentList			676036	1					
ANR	676152	CompoundStatement		26:1:405:405	676036	1					
ANR	676153	IfStatement	if ( ( peekCh == '\\n' || peekCh == '\\r' ) && peekCh != ch )		676036	0					
ANR	676154	Condition	( peekCh == '\\n' || peekCh == '\\r' ) && peekCh != ch	257:6:6160:6209	676036	0	True				
ANR	676155	AndExpression	( peekCh == '\\n' || peekCh == '\\r' ) && peekCh != ch		676036	0		&&			
ANR	676156	OrExpression	peekCh == '\\n' || peekCh == '\\r'		676036	0		||			
ANR	676157	EqualityExpression	peekCh == '\\n'		676036	0		==			
ANR	676158	Identifier	peekCh		676036	0					
ANR	676159	PrimaryExpression	'\\n'		676036	1					
ANR	676160	EqualityExpression	peekCh == '\\r'		676036	1		==			
ANR	676161	Identifier	peekCh		676036	0					
ANR	676162	PrimaryExpression	'\\r'		676036	1					
ANR	676163	EqualityExpression	peekCh != ch		676036	1		!=			
ANR	676164	Identifier	peekCh		676036	0					
ANR	676165	Identifier	ch		676036	1					
ANR	676166	ExpressionStatement	inStream -> get ( )	258:3:6215:6230	676036	1	True				
ANR	676167	CallExpression	inStream -> get ( )		676036	0					
ANR	676168	Callee	inStream -> get		676036	0					
ANR	676169	PtrMemberAccess	inStream -> get		676036	0					
ANR	676170	Identifier	inStream		676036	0					
ANR	676171	Identifier	get		676036	1					
ANR	676172	ArgumentList			676036	1					
ANR	676173	ReturnStatement	return nextLine_ ;	261:1:6237:6253	676036	9	True				
ANR	676174	Identifier	nextLine_		676036	0					
ANR	676175	Identifier	peekNextLine		676036	1					
ANR	676176	ParameterList			676036	2					
ANR	676177	CFGEntryNode	ENTRY		676036		True				
ANR	676178	CFGExitNode	EXIT		676036		True				
ANR	676179	Symbol	nextLine_		676036						
ANR	676180	Symbol	ch		676036						
ANR	676181	Symbol	* inStream		676036						
ANR	676182	Symbol	inStream		676036						
ANR	676183	Symbol	inStream -> eof		676036						
ANR	676184	Symbol	hasMoreLines		676036						
ANR	676185	Symbol	inStream -> tellg		676036						
ANR	676186	Symbol	peekStart		676036						
ANR	676187	Symbol	peekCh		676036						
ANR	676188	Symbol	inStream -> peek		676036						
ANR	676189	Function	peekReset	266:26:6358:6462							
ANR	676190	FunctionDef	peekReset ()		676189	0					
ANR	676191	CompoundStatement		267:0:6370:6462	676189	0					
ANR	676192	ExpressionStatement	assert ( peekStart != 0 )	268:1:6373:6395	676189	0	True				
ANR	676193	CallExpression	assert ( peekStart != 0 )		676189	0					
ANR	676194	Callee	assert		676189	0					
ANR	676195	Identifier	assert		676189	0					
ANR	676196	ArgumentList	peekStart != 0		676189	1					
ANR	676197	Argument	peekStart != 0		676189	0					
ANR	676198	EqualityExpression	peekStart != 0		676189	0		!=			
ANR	676199	Identifier	peekStart		676189	0					
ANR	676200	PrimaryExpression	0		676189	1					
ANR	676201	ExpressionStatement	inStream -> clear ( )	269:1:6398:6415	676189	1	True				
ANR	676202	CallExpression	inStream -> clear ( )		676189	0					
ANR	676203	Callee	inStream -> clear		676189	0					
ANR	676204	PtrMemberAccess	inStream -> clear		676189	0					
ANR	676205	Identifier	inStream		676189	0					
ANR	676206	Identifier	clear		676189	1					
ANR	676207	ArgumentList			676189	1					
ANR	676208	ExpressionStatement	inStream -> seekg ( peekStart )	270:1:6418:6444	676189	2	True				
ANR	676209	CallExpression	inStream -> seekg ( peekStart )		676189	0					
ANR	676210	Callee	inStream -> seekg		676189	0					
ANR	676211	PtrMemberAccess	inStream -> seekg		676189	0					
ANR	676212	Identifier	inStream		676189	0					
ANR	676213	Identifier	seekg		676189	1					
ANR	676214	ArgumentList	peekStart		676189	1					
ANR	676215	Argument	peekStart		676189	0					
ANR	676216	Identifier	peekStart		676189	0					
ANR	676217	ExpressionStatement	peekStart = 0	271:1:6447:6460	676189	3	True				
ANR	676218	AssignmentExpression	peekStart = 0		676189	0		=			
ANR	676219	Identifier	peekStart		676189	0					
ANR	676220	PrimaryExpression	0		676189	1					
ANR	676221	Identifier	peekReset		676189	1					
ANR	676222	ParameterList			676189	2					
ANR	676223	CFGEntryNode	ENTRY		676189		True				
ANR	676224	CFGExitNode	EXIT		676189		True				
ANR	676225	Symbol	inStream		676189						
ANR	676226	Symbol	peekStart		676189						
ANR	676227	Function	saveLastInputLine	276:26:6568:6638							
ANR	676228	FunctionDef	saveLastInputLine ()		676227	0					
ANR	676229	CompoundStatement		277:0:6588:6638	676227	0					
ANR	676230	ExpressionStatement	assert ( inStream -> eof ( ) )	278:1:6591:6614	676227	0	True				
ANR	676231	CallExpression	assert ( inStream -> eof ( ) )		676227	0					
ANR	676232	Callee	assert		676227	0					
ANR	676233	Identifier	assert		676227	0					
ANR	676234	ArgumentList	inStream -> eof ( )		676227	1					
ANR	676235	Argument	inStream -> eof ( )		676227	0					
ANR	676236	CallExpression	inStream -> eof ( )		676227	0					
ANR	676237	Callee	inStream -> eof		676227	0					
ANR	676238	PtrMemberAccess	inStream -> eof		676227	0					
ANR	676239	Identifier	inStream		676227	0					
ANR	676240	Identifier	eof		676227	1					
ANR	676241	ArgumentList			676227	1					
ANR	676242	ExpressionStatement	prevBuffer = buffer	279:1:6617:6636	676227	1	True				
ANR	676243	AssignmentExpression	prevBuffer = buffer		676227	0		=			
ANR	676244	Identifier	prevBuffer		676227	0					
ANR	676245	Identifier	buffer		676227	1					
ANR	676246	Identifier	saveLastInputLine		676227	1					
ANR	676247	ParameterList			676227	2					
ANR	676248	CFGEntryNode	ENTRY		676227		True				
ANR	676249	CFGExitNode	EXIT		676227		True				
ANR	676250	Symbol	prevBuffer		676227						
ANR	676251	Symbol	* inStream		676227						
ANR	676252	Symbol	inStream		676227						
ANR	676253	Symbol	inStream -> eof		676227						
ANR	676254	Symbol	buffer		676227						
ANR	676255	Function	tellg	284:31:6731:6768							
ANR	676256	FunctionDef	tellg ()		676255	0					
ANR	676257	CompoundStatement		285:0:6739:6768	676255	0					
ANR	676258	ReturnStatement	return inStream -> tellg ( ) ;	286:1:6742:6766	676255	0	True				
ANR	676259	CallExpression	inStream -> tellg ( )		676255	0					
ANR	676260	Callee	inStream -> tellg		676255	0					
ANR	676261	PtrMemberAccess	inStream -> tellg		676255	0					
ANR	676262	Identifier	inStream		676255	0					
ANR	676263	Identifier	tellg		676255	1					
ANR	676264	ArgumentList			676255	1					
ANR	676265	Identifier	tellg		676255	1					
ANR	676266	ParameterList			676255	2					
ANR	676267	CFGEntryNode	ENTRY		676255		True				
ANR	676268	CFGExitNode	EXIT		676255		True				
ANR	676269	Symbol	inStream		676255						
ANR	676270	Symbol	* inStream		676255						
ANR	676271	Symbol	inStream -> tellg		676255						
ANR	676272	Function	getLineEndChange	291:26:6853:7622							
ANR	676273	FunctionDef	getLineEndChange (int lineEndFormat)		676272	0					
ANR	676274	CompoundStatement		292:0:6895:7622	676272	0					
ANR	676275	ExpressionStatement	assert ( lineEndFormat == LINEEND_DEFAULT || lineEndFormat == LINEEND_WINDOWS || lineEndFormat == LINEEND_LINUX || lineEndFormat == LINEEND_MACOLD )	293:1:6898:7067	676272	0	True				
ANR	676276	CallExpression	assert ( lineEndFormat == LINEEND_DEFAULT || lineEndFormat == LINEEND_WINDOWS || lineEndFormat == LINEEND_LINUX || lineEndFormat == LINEEND_MACOLD )		676272	0					
ANR	676277	Callee	assert		676272	0					
ANR	676278	Identifier	assert		676272	0					
ANR	676279	ArgumentList	lineEndFormat == LINEEND_DEFAULT || lineEndFormat == LINEEND_WINDOWS || lineEndFormat == LINEEND_LINUX || lineEndFormat == LINEEND_MACOLD		676272	1					
ANR	676280	Argument	lineEndFormat == LINEEND_DEFAULT || lineEndFormat == LINEEND_WINDOWS || lineEndFormat == LINEEND_LINUX || lineEndFormat == LINEEND_MACOLD		676272	0					
ANR	676281	OrExpression	lineEndFormat == LINEEND_DEFAULT || lineEndFormat == LINEEND_WINDOWS || lineEndFormat == LINEEND_LINUX || lineEndFormat == LINEEND_MACOLD		676272	0		||			
ANR	676282	EqualityExpression	lineEndFormat == LINEEND_DEFAULT		676272	0		==			
ANR	676283	Identifier	lineEndFormat		676272	0					
ANR	676284	Identifier	LINEEND_DEFAULT		676272	1					
ANR	676285	OrExpression	lineEndFormat == LINEEND_WINDOWS || lineEndFormat == LINEEND_LINUX || lineEndFormat == LINEEND_MACOLD		676272	1		||			
ANR	676286	EqualityExpression	lineEndFormat == LINEEND_WINDOWS		676272	0		==			
ANR	676287	Identifier	lineEndFormat		676272	0					
ANR	676288	Identifier	LINEEND_WINDOWS		676272	1					
ANR	676289	OrExpression	lineEndFormat == LINEEND_LINUX || lineEndFormat == LINEEND_MACOLD		676272	1		||			
ANR	676290	EqualityExpression	lineEndFormat == LINEEND_LINUX		676272	0		==			
ANR	676291	Identifier	lineEndFormat		676272	0					
ANR	676292	Identifier	LINEEND_LINUX		676272	1					
ANR	676293	EqualityExpression	lineEndFormat == LINEEND_MACOLD		676272	1		==			
ANR	676294	Identifier	lineEndFormat		676272	0					
ANR	676295	Identifier	LINEEND_MACOLD		676272	1					
ANR	676296	IdentifierDeclStatement	bool lineEndChange = false ;	298:1:7071:7097	676272	1	True				
ANR	676297	IdentifierDecl	lineEndChange = false		676272	0					
ANR	676298	IdentifierDeclType	bool		676272	0					
ANR	676299	Identifier	lineEndChange		676272	1					
ANR	676300	AssignmentExpression	lineEndChange = false		676272	2		=			
ANR	676301	Identifier	false		676272	0					
ANR	676302	Identifier	false		676272	1					
ANR	676303	IfStatement	if ( lineEndFormat == LINEEND_WINDOWS )		676272	2					
ANR	676304	Condition	lineEndFormat == LINEEND_WINDOWS	299:5:7104:7135	676272	0	True				
ANR	676305	EqualityExpression	lineEndFormat == LINEEND_WINDOWS		676272	0		==			
ANR	676306	Identifier	lineEndFormat		676272	0					
ANR	676307	Identifier	LINEEND_WINDOWS		676272	1					
ANR	676308	ExpressionStatement	lineEndChange = ( eolLinux + eolMacOld != 0 )	300:2:7140:7183	676272	1	True				
ANR	676309	AssignmentExpression	lineEndChange = ( eolLinux + eolMacOld != 0 )		676272	0		=			
ANR	676310	Identifier	lineEndChange		676272	0					
ANR	676311	EqualityExpression	eolLinux + eolMacOld != 0		676272	1		!=			
ANR	676312	AdditiveExpression	eolLinux + eolMacOld		676272	0		+			
ANR	676313	Identifier	eolLinux		676272	0					
ANR	676314	Identifier	eolMacOld		676272	1					
ANR	676315	PrimaryExpression	0		676272	1					
ANR	676316	ElseStatement	else		676272	0					
ANR	676317	IfStatement	if ( lineEndFormat == LINEEND_LINUX )		676272	0					
ANR	676318	Condition	lineEndFormat == LINEEND_LINUX	301:10:7195:7224	676272	0	True				
ANR	676319	EqualityExpression	lineEndFormat == LINEEND_LINUX		676272	0		==			
ANR	676320	Identifier	lineEndFormat		676272	0					
ANR	676321	Identifier	LINEEND_LINUX		676272	1					
ANR	676322	ExpressionStatement	lineEndChange = ( eolWindows + eolMacOld != 0 )	302:2:7229:7274	676272	1	True				
ANR	676323	AssignmentExpression	lineEndChange = ( eolWindows + eolMacOld != 0 )		676272	0		=			
ANR	676324	Identifier	lineEndChange		676272	0					
ANR	676325	EqualityExpression	eolWindows + eolMacOld != 0		676272	1		!=			
ANR	676326	AdditiveExpression	eolWindows + eolMacOld		676272	0		+			
ANR	676327	Identifier	eolWindows		676272	0					
ANR	676328	Identifier	eolMacOld		676272	1					
ANR	676329	PrimaryExpression	0		676272	1					
ANR	676330	ElseStatement	else		676272	0					
ANR	676331	IfStatement	if ( lineEndFormat == LINEEND_MACOLD )		676272	0					
ANR	676332	Condition	lineEndFormat == LINEEND_MACOLD	303:10:7286:7316	676272	0	True				
ANR	676333	EqualityExpression	lineEndFormat == LINEEND_MACOLD		676272	0		==			
ANR	676334	Identifier	lineEndFormat		676272	0					
ANR	676335	Identifier	LINEEND_MACOLD		676272	1					
ANR	676336	ExpressionStatement	lineEndChange = ( eolWindows + eolLinux != 0 )	304:2:7321:7365	676272	1	True				
ANR	676337	AssignmentExpression	lineEndChange = ( eolWindows + eolLinux != 0 )		676272	0		=			
ANR	676338	Identifier	lineEndChange		676272	0					
ANR	676339	EqualityExpression	eolWindows + eolLinux != 0		676272	1		!=			
ANR	676340	AdditiveExpression	eolWindows + eolLinux		676272	0		+			
ANR	676341	Identifier	eolWindows		676272	0					
ANR	676342	Identifier	eolLinux		676272	1					
ANR	676343	PrimaryExpression	0		676272	1					
ANR	676344	ElseStatement	else		676272	0					
ANR	676345	CompoundStatement		15:1:478:478	676272	0					
ANR	676346	IfStatement	if ( eolWindows > 0 )		676272	0					
ANR	676347	Condition	eolWindows > 0	307:6:7382:7395	676272	0	True				
ANR	676348	RelationalExpression	eolWindows > 0		676272	0		>			
ANR	676349	Identifier	eolWindows		676272	0					
ANR	676350	PrimaryExpression	0		676272	1					
ANR	676351	ExpressionStatement	lineEndChange = ( eolLinux + eolMacOld != 0 )	308:3:7401:7444	676272	1	True				
ANR	676352	AssignmentExpression	lineEndChange = ( eolLinux + eolMacOld != 0 )		676272	0		=			
ANR	676353	Identifier	lineEndChange		676272	0					
ANR	676354	EqualityExpression	eolLinux + eolMacOld != 0		676272	1		!=			
ANR	676355	AdditiveExpression	eolLinux + eolMacOld		676272	0		+			
ANR	676356	Identifier	eolLinux		676272	0					
ANR	676357	Identifier	eolMacOld		676272	1					
ANR	676358	PrimaryExpression	0		676272	1					
ANR	676359	ElseStatement	else		676272	0					
ANR	676360	IfStatement	if ( eolLinux > 0 )		676272	0					
ANR	676361	Condition	eolLinux > 0	309:11:7457:7468	676272	0	True				
ANR	676362	RelationalExpression	eolLinux > 0		676272	0		>			
ANR	676363	Identifier	eolLinux		676272	0					
ANR	676364	PrimaryExpression	0		676272	1					
ANR	676365	ExpressionStatement	lineEndChange = ( eolWindows + eolMacOld != 0 )	310:3:7474:7519	676272	1	True				
ANR	676366	AssignmentExpression	lineEndChange = ( eolWindows + eolMacOld != 0 )		676272	0		=			
ANR	676367	Identifier	lineEndChange		676272	0					
ANR	676368	EqualityExpression	eolWindows + eolMacOld != 0		676272	1		!=			
ANR	676369	AdditiveExpression	eolWindows + eolMacOld		676272	0		+			
ANR	676370	Identifier	eolWindows		676272	0					
ANR	676371	Identifier	eolMacOld		676272	1					
ANR	676372	PrimaryExpression	0		676272	1					
ANR	676373	ElseStatement	else		676272	0					
ANR	676374	IfStatement	if ( eolMacOld > 0 )		676272	0					
ANR	676375	Condition	eolMacOld > 0	311:11:7532:7544	676272	0	True				
ANR	676376	RelationalExpression	eolMacOld > 0		676272	0		>			
ANR	676377	Identifier	eolMacOld		676272	0					
ANR	676378	PrimaryExpression	0		676272	1					
ANR	676379	ExpressionStatement	lineEndChange = ( eolWindows + eolLinux != 0 )	312:3:7550:7594	676272	1	True				
ANR	676380	AssignmentExpression	lineEndChange = ( eolWindows + eolLinux != 0 )		676272	0		=			
ANR	676381	Identifier	lineEndChange		676272	0					
ANR	676382	EqualityExpression	eolWindows + eolLinux != 0		676272	1		!=			
ANR	676383	AdditiveExpression	eolWindows + eolLinux		676272	0		+			
ANR	676384	Identifier	eolWindows		676272	0					
ANR	676385	Identifier	eolLinux		676272	1					
ANR	676386	PrimaryExpression	0		676272	1					
ANR	676387	ReturnStatement	return lineEndChange ;	314:1:7600:7620	676272	3	True				
ANR	676388	Identifier	lineEndChange		676272	0					
ANR	676389	Identifier	getLineEndChange		676272	1					
ANR	676390	ParameterList	int lineEndFormat		676272	2					
ANR	676391	Parameter	int lineEndFormat	291:43:6870:6886	676272	0	True				
ANR	676392	ParameterType	int		676272	0					
ANR	676393	Identifier	lineEndFormat		676272	1					
ANR	676394	CFGEntryNode	ENTRY		676272		True				
ANR	676395	CFGExitNode	EXIT		676272		True				
ANR	676396	Symbol	eolLinux		676272						
ANR	676397	Symbol	lineEndFormat		676272						
ANR	676398	Symbol	LINEEND_LINUX		676272						
ANR	676399	Symbol	LINEEND_WINDOWS		676272						
ANR	676400	Symbol	LINEEND_MACOLD		676272						
ANR	676401	Symbol	lineEndChange		676272						
ANR	676402	Symbol	eolMacOld		676272						
ANR	676403	Symbol	false		676272						
ANR	676404	Symbol	LINEEND_DEFAULT		676272						
ANR	676405	Symbol	eolWindows		676272						
ANR	676406	Function	ASConsole :: ASConsole	324:0:7885:8498							
ANR	676407	FunctionDef	ASConsole :: ASConsole (ASFormatter & formatterArg)		676406	0					
ANR	676408	CompoundStatement		325:0:7959:8498	676406	0					
ANR	676409	ExpressionStatement	errorStream = & cerr	326:1:7962:7981	676406	0	True				
ANR	676410	AssignmentExpression	errorStream = & cerr		676406	0		=			
ANR	676411	Identifier	errorStream		676406	0					
ANR	676412	UnaryOperationExpression	& cerr		676406	1					
ANR	676413	UnaryOperator	&		676406	0					
ANR	676414	Identifier	cerr		676406	1					
ANR	676415	ExpressionStatement	isRecursive = false	328:1:8009:8028	676406	1	True				
ANR	676416	AssignmentExpression	isRecursive = false		676406	0		=			
ANR	676417	Identifier	isRecursive		676406	0					
ANR	676418	Identifier	false		676406	1					
ANR	676419	ExpressionStatement	isDryRun = false	329:1:8031:8047	676406	2	True				
ANR	676420	AssignmentExpression	isDryRun = false		676406	0		=			
ANR	676421	Identifier	isDryRun		676406	0					
ANR	676422	Identifier	false		676406	1					
ANR	676423	ExpressionStatement	noBackup = false	330:1:8050:8066	676406	3	True				
ANR	676424	AssignmentExpression	noBackup = false		676406	0		=			
ANR	676425	Identifier	noBackup		676406	0					
ANR	676426	Identifier	false		676406	1					
ANR	676427	ExpressionStatement	preserveDate = false	331:1:8069:8089	676406	4	True				
ANR	676428	AssignmentExpression	preserveDate = false		676406	0		=			
ANR	676429	Identifier	preserveDate		676406	0					
ANR	676430	Identifier	false		676406	1					
ANR	676431	ExpressionStatement	isVerbose = false	332:1:8092:8109	676406	5	True				
ANR	676432	AssignmentExpression	isVerbose = false		676406	0		=			
ANR	676433	Identifier	isVerbose		676406	0					
ANR	676434	Identifier	false		676406	1					
ANR	676435	ExpressionStatement	isQuiet = false	333:1:8112:8127	676406	6	True				
ANR	676436	AssignmentExpression	isQuiet = false		676406	0		=			
ANR	676437	Identifier	isQuiet		676406	0					
ANR	676438	Identifier	false		676406	1					
ANR	676439	ExpressionStatement	isFormattedOnly = false	334:1:8130:8153	676406	7	True				
ANR	676440	AssignmentExpression	isFormattedOnly = false		676406	0		=			
ANR	676441	Identifier	isFormattedOnly		676406	0					
ANR	676442	Identifier	false		676406	1					
ANR	676443	ExpressionStatement	ignoreExcludeErrors = false	335:1:8156:8183	676406	8	True				
ANR	676444	AssignmentExpression	ignoreExcludeErrors = false		676406	0		=			
ANR	676445	Identifier	ignoreExcludeErrors		676406	0					
ANR	676446	Identifier	false		676406	1					
ANR	676447	ExpressionStatement	ignoreExcludeErrorsDisplay = false	336:1:8186:8220	676406	9	True				
ANR	676448	AssignmentExpression	ignoreExcludeErrorsDisplay = false		676406	0		=			
ANR	676449	Identifier	ignoreExcludeErrorsDisplay		676406	0					
ANR	676450	Identifier	false		676406	1					
ANR	676451	ExpressionStatement	optionsFileRequired = false	337:1:8223:8250	676406	10	True				
ANR	676452	AssignmentExpression	optionsFileRequired = false		676406	0		=			
ANR	676453	Identifier	optionsFileRequired		676406	0					
ANR	676454	Identifier	false		676406	1					
ANR	676455	ExpressionStatement	useAscii = false	338:1:8253:8269	676406	11	True				
ANR	676456	AssignmentExpression	useAscii = false		676406	0		=			
ANR	676457	Identifier	useAscii		676406	0					
ANR	676458	Identifier	false		676406	1					
ANR	676459	ExpressionStatement	bypassBrowserOpen = false	340:1:8292:8317	676406	12	True				
ANR	676460	AssignmentExpression	bypassBrowserOpen = false		676406	0		=			
ANR	676461	Identifier	bypassBrowserOpen		676406	0					
ANR	676462	Identifier	false		676406	1					
ANR	676463	ExpressionStatement	hasWildcard = false	341:1:8320:8339	676406	13	True				
ANR	676464	AssignmentExpression	hasWildcard = false		676406	0		=			
ANR	676465	Identifier	hasWildcard		676406	0					
ANR	676466	Identifier	false		676406	1					
ANR	676467	ExpressionStatement	filesAreIdentical = true	342:1:8342:8366	676406	14	True				
ANR	676468	AssignmentExpression	filesAreIdentical = true		676406	0		=			
ANR	676469	Identifier	filesAreIdentical		676406	0					
ANR	676470	Identifier	true		676406	1					
ANR	676471	ExpressionStatement	lineEndsMixed = false	343:1:8369:8390	676406	15	True				
ANR	676472	AssignmentExpression	lineEndsMixed = false		676406	0		=			
ANR	676473	Identifier	lineEndsMixed		676406	0					
ANR	676474	Identifier	false		676406	1					
ANR	676475	ExpressionStatement	"origSuffix = "".orig"""	344:1:8393:8413	676406	16	True				
ANR	676476	AssignmentExpression	"origSuffix = "".orig"""		676406	0		=			
ANR	676477	Identifier	origSuffix		676406	0					
ANR	676478	PrimaryExpression	""".orig"""		676406	1					
ANR	676479	ExpressionStatement	mainDirectoryLength = 0	345:1:8416:8439	676406	17	True				
ANR	676480	AssignmentExpression	mainDirectoryLength = 0		676406	0		=			
ANR	676481	Identifier	mainDirectoryLength		676406	0					
ANR	676482	PrimaryExpression	0		676406	1					
ANR	676483	ExpressionStatement	filesFormatted = 0	346:1:8442:8460	676406	18	True				
ANR	676484	AssignmentExpression	filesFormatted = 0		676406	0		=			
ANR	676485	Identifier	filesFormatted		676406	0					
ANR	676486	PrimaryExpression	0		676406	1					
ANR	676487	ExpressionStatement	filesUnchanged = 0	347:1:8463:8481	676406	19	True				
ANR	676488	AssignmentExpression	filesUnchanged = 0		676406	0		=			
ANR	676489	Identifier	filesUnchanged		676406	0					
ANR	676490	PrimaryExpression	0		676406	1					
ANR	676491	ExpressionStatement	linesOut = 0	348:1:8484:8496	676406	20	True				
ANR	676492	AssignmentExpression	linesOut = 0		676406	0		=			
ANR	676493	Identifier	linesOut		676406	0					
ANR	676494	PrimaryExpression	0		676406	1					
ANR	676495	Identifier	ASConsole :: ASConsole		676406	1					
ANR	676496	ParameterList	ASFormatter & formatterArg		676406	2					
ANR	676497	Parameter	ASFormatter & formatterArg	324:21:7906:7930	676406	0	True				
ANR	676498	ParameterType	ASFormatter &		676406	0					
ANR	676499	Identifier	formatterArg		676406	1					
ANR	676500	CFGEntryNode	ENTRY		676406		True				
ANR	676501	CFGExitNode	EXIT		676406		True				
ANR	676502	Symbol	formatterArg		676406						
ANR	676503	Symbol	filesUnchanged		676406						
ANR	676504	Symbol	isRecursive		676406						
ANR	676505	Symbol	bypassBrowserOpen		676406						
ANR	676506	Symbol	& cerr		676406						
ANR	676507	Symbol	noBackup		676406						
ANR	676508	Symbol	isFormattedOnly		676406						
ANR	676509	Symbol	errorStream		676406						
ANR	676510	Symbol	origSuffix		676406						
ANR	676511	Symbol	isVerbose		676406						
ANR	676512	Symbol	ignoreExcludeErrors		676406						
ANR	676513	Symbol	false		676406						
ANR	676514	Symbol	linesOut		676406						
ANR	676515	Symbol	preserveDate		676406						
ANR	676516	Symbol	optionsFileRequired		676406						
ANR	676517	Symbol	filesAreIdentical		676406						
ANR	676518	Symbol	mainDirectoryLength		676406						
ANR	676519	Symbol	useAscii		676406						
ANR	676520	Symbol	filesFormatted		676406						
ANR	676521	Symbol	true		676406						
ANR	676522	Symbol	isDryRun		676406						
ANR	676523	Symbol	isQuiet		676406						
ANR	676524	Symbol	hasWildcard		676406						
ANR	676525	Symbol	ignoreExcludeErrorsDisplay		676406						
ANR	676526	Symbol	lineEndsMixed		676406						
ANR	676527	Function	ASConsole :: ~ASConsole	351:0:8501:8526							
ANR	676528	FunctionDef	ASConsole :: ~ASConsole ()		676527	0					
ANR	676529	CompoundStatement		352:0:8525:8526	676527	0					
ANR	676530	Identifier	ASConsole :: ~ASConsole		676527	1					
ANR	676531	ParameterList			676527	2					
ANR	676532	CFGEntryNode	ENTRY		676527		True				
ANR	676533	CFGExitNode	EXIT		676527		True				
ANR	676534	Function	ASConsole :: convertLineEnds	355:0:8580:10218							
ANR	676535	FunctionDef	"ASConsole :: convertLineEnds (ostringstream & out , int lineEnd)"		676534	0					
ANR	676536	CompoundStatement		356:0:8645:10218	676534	0					
ANR	676537	ExpressionStatement	assert ( lineEnd == LINEEND_WINDOWS || lineEnd == LINEEND_LINUX || lineEnd == LINEEND_MACOLD )	357:1:8648:8739	676534	0	True				
ANR	676538	CallExpression	assert ( lineEnd == LINEEND_WINDOWS || lineEnd == LINEEND_LINUX || lineEnd == LINEEND_MACOLD )		676534	0					
ANR	676539	Callee	assert		676534	0					
ANR	676540	Identifier	assert		676534	0					
ANR	676541	ArgumentList	lineEnd == LINEEND_WINDOWS || lineEnd == LINEEND_LINUX || lineEnd == LINEEND_MACOLD		676534	1					
ANR	676542	Argument	lineEnd == LINEEND_WINDOWS || lineEnd == LINEEND_LINUX || lineEnd == LINEEND_MACOLD		676534	0					
ANR	676543	OrExpression	lineEnd == LINEEND_WINDOWS || lineEnd == LINEEND_LINUX || lineEnd == LINEEND_MACOLD		676534	0		||			
ANR	676544	EqualityExpression	lineEnd == LINEEND_WINDOWS		676534	0		==			
ANR	676545	Identifier	lineEnd		676534	0					
ANR	676546	Identifier	LINEEND_WINDOWS		676534	1					
ANR	676547	OrExpression	lineEnd == LINEEND_LINUX || lineEnd == LINEEND_MACOLD		676534	1		||			
ANR	676548	EqualityExpression	lineEnd == LINEEND_LINUX		676534	0		==			
ANR	676549	Identifier	lineEnd		676534	0					
ANR	676550	Identifier	LINEEND_LINUX		676534	1					
ANR	676551	EqualityExpression	lineEnd == LINEEND_MACOLD		676534	1		==			
ANR	676552	Identifier	lineEnd		676534	0					
ANR	676553	Identifier	LINEEND_MACOLD		676534	1					
ANR	676554	IdentifierDeclStatement	const string & inStr = out . str ( ) ;	358:1:8742:8773	676534	1	True				
ANR	676555	IdentifierDecl	& inStr = out . str ( )		676534	0					
ANR	676556	IdentifierDeclType	const string &		676534	0					
ANR	676557	Identifier	inStr		676534	1					
ANR	676558	AssignmentExpression	& inStr = out . str ( )		676534	2		=			
ANR	676559	Identifier	inStr		676534	0					
ANR	676560	CallExpression	out . str ( )		676534	1					
ANR	676561	Callee	out . str		676534	0					
ANR	676562	MemberAccess	out . str		676534	0					
ANR	676563	Identifier	out		676534	0					
ANR	676564	Identifier	str		676534	1					
ANR	676565	ArgumentList			676534	1					
ANR	676566	IdentifierDeclStatement	string outStr ;	359:1:8809:8822	676534	2	True				
ANR	676567	IdentifierDecl	outStr		676534	0					
ANR	676568	IdentifierDeclType	string		676534	0					
ANR	676569	Identifier	outStr		676534	1					
ANR	676570	IdentifierDeclStatement	int inLength = ( int ) inStr . length ( ) ;	360:1:8854:8888	676534	3	True				
ANR	676571	IdentifierDecl	inLength = ( int ) inStr . length ( )		676534	0					
ANR	676572	IdentifierDeclType	int		676534	0					
ANR	676573	Identifier	inLength		676534	1					
ANR	676574	AssignmentExpression	inLength = ( int ) inStr . length ( )		676534	2		=			
ANR	676575	Identifier	inLength		676534	0					
ANR	676576	CastExpression	( int ) inStr . length ( )		676534	1					
ANR	676577	CastTarget	int		676534	0					
ANR	676578	CallExpression	inStr . length ( )		676534	1					
ANR	676579	Callee	inStr . length		676534	0					
ANR	676580	MemberAccess	inStr . length		676534	0					
ANR	676581	Identifier	inStr		676534	0					
ANR	676582	Identifier	length		676534	1					
ANR	676583	ArgumentList			676534	1					
ANR	676584	ForStatement	for ( int pos = 0 ; pos < inLength ; pos ++ )		676534	4					
ANR	676585	ForInit	int pos = 0 ;	361:6:8896:8907	676534	0	True				
ANR	676586	IdentifierDeclStatement	int pos = 0 ;		676534	0					
ANR	676587	IdentifierDecl	pos = 0		676534	0					
ANR	676588	IdentifierDeclType	int		676534	0					
ANR	676589	Identifier	pos		676534	1					
ANR	676590	AssignmentExpression	pos = 0		676534	2		=			
ANR	676591	Identifier	pos		676534	0					
ANR	676592	PrimaryExpression	0		676534	1					
ANR	676593	Condition	pos < inLength	361:19:8909:8922	676534	1	True				
ANR	676594	RelationalExpression	pos < inLength		676534	0		<			
ANR	676595	Identifier	pos		676534	0					
ANR	676596	Identifier	inLength		676534	1					
ANR	676597	PostIncDecOperationExpression	pos ++	361:35:8925:8929	676534	2	True				
ANR	676598	Identifier	pos		676534	0					
ANR	676599	IncDec	++		676534	1					
ANR	676600	CompoundStatement		7:1:287:287	676534	3					
ANR	676601	IfStatement	if ( inStr [ pos ] == '\\r' )		676534	0					
ANR	676602	Condition	inStr [ pos ] == '\\r'	363:6:8941:8958	676534	0	True				
ANR	676603	EqualityExpression	inStr [ pos ] == '\\r'		676534	0		==			
ANR	676604	ArrayIndexing	inStr [ pos ]		676534	0					
ANR	676605	Identifier	inStr		676534	0					
ANR	676606	Identifier	pos		676534	1					
ANR	676607	PrimaryExpression	'\\r'		676534	1					
ANR	676608	CompoundStatement		9:2:317:317	676534	1					
ANR	676609	IfStatement	if ( inStr [ pos + 1 ] == '\\n' )		676534	0					
ANR	676610	Condition	inStr [ pos + 1 ] == '\\n'	365:7:8972:8993	676534	0	True				
ANR	676611	EqualityExpression	inStr [ pos + 1 ] == '\\n'		676534	0		==			
ANR	676612	ArrayIndexing	inStr [ pos + 1 ]		676534	0					
ANR	676613	Identifier	inStr		676534	0					
ANR	676614	AdditiveExpression	pos + 1		676534	1		+			
ANR	676615	Identifier	pos		676534	0					
ANR	676616	PrimaryExpression	1		676534	1					
ANR	676617	PrimaryExpression	'\\n'		676534	1					
ANR	676618	CompoundStatement		11:3:353:353	676534	1					
ANR	676619	IfStatement	if ( lineEnd == LINEEND_CR )		676534	0					
ANR	676620	Condition	lineEnd == LINEEND_CR	368:8:9021:9041	676534	0	True				
ANR	676621	EqualityExpression	lineEnd == LINEEND_CR		676534	0		==			
ANR	676622	Identifier	lineEnd		676534	0					
ANR	676623	Identifier	LINEEND_CR		676534	1					
ANR	676624	CompoundStatement		14:4:402:402	676534	1					
ANR	676625	ExpressionStatement	outStr += inStr [ pos ]	370:5:9055:9075	676534	0	True				
ANR	676626	AssignmentExpression	outStr += inStr [ pos ]		676534	0		+=			
ANR	676627	Identifier	outStr		676534	0					
ANR	676628	ArrayIndexing	inStr [ pos ]		676534	1					
ANR	676629	Identifier	inStr		676534	0					
ANR	676630	Identifier	pos		676534	1					
ANR	676631	ExpressionStatement	pos ++	371:5:9100:9105	676534	1	True				
ANR	676632	PostIncDecOperationExpression	pos ++		676534	0					
ANR	676633	Identifier	pos		676534	0					
ANR	676634	IncDec	++		676534	1					
ANR	676635	ContinueStatement	continue ;	372:5:9112:9120	676534	2	True				
ANR	676636	ElseStatement	else		676534	0					
ANR	676637	IfStatement	if ( lineEnd == LINEEND_LF )		676534	0					
ANR	676638	Condition	lineEnd == LINEEND_LF	374:13:9141:9161	676534	0	True				
ANR	676639	EqualityExpression	lineEnd == LINEEND_LF		676534	0		==			
ANR	676640	Identifier	lineEnd		676534	0					
ANR	676641	Identifier	LINEEND_LF		676534	1					
ANR	676642	CompoundStatement		20:4:522:522	676534	1					
ANR	676643	ExpressionStatement	outStr += inStr [ pos + 1 ]	376:5:9175:9199	676534	0	True				
ANR	676644	AssignmentExpression	outStr += inStr [ pos + 1 ]		676534	0		+=			
ANR	676645	Identifier	outStr		676534	0					
ANR	676646	ArrayIndexing	inStr [ pos + 1 ]		676534	1					
ANR	676647	Identifier	inStr		676534	0					
ANR	676648	AdditiveExpression	pos + 1		676534	1		+			
ANR	676649	Identifier	pos		676534	0					
ANR	676650	PrimaryExpression	1		676534	1					
ANR	676651	ExpressionStatement	pos ++	377:5:9224:9229	676534	1	True				
ANR	676652	PostIncDecOperationExpression	pos ++		676534	0					
ANR	676653	Identifier	pos		676534	0					
ANR	676654	IncDec	++		676534	1					
ANR	676655	ContinueStatement	continue ;	378:5:9236:9244	676534	2	True				
ANR	676656	ElseStatement	else		676534	0					
ANR	676657	CompoundStatement		26:4:619:619	676534	0					
ANR	676658	ExpressionStatement	outStr += inStr [ pos ]	382:5:9272:9292	676534	0	True				
ANR	676659	AssignmentExpression	outStr += inStr [ pos ]		676534	0		+=			
ANR	676660	Identifier	outStr		676534	0					
ANR	676661	ArrayIndexing	inStr [ pos ]		676534	1					
ANR	676662	Identifier	inStr		676534	0					
ANR	676663	Identifier	pos		676534	1					
ANR	676664	ExpressionStatement	outStr += inStr [ pos + 1 ]	383:5:9317:9341	676534	1	True				
ANR	676665	AssignmentExpression	outStr += inStr [ pos + 1 ]		676534	0		+=			
ANR	676666	Identifier	outStr		676534	0					
ANR	676667	ArrayIndexing	inStr [ pos + 1 ]		676534	1					
ANR	676668	Identifier	inStr		676534	0					
ANR	676669	AdditiveExpression	pos + 1		676534	1		+			
ANR	676670	Identifier	pos		676534	0					
ANR	676671	PrimaryExpression	1		676534	1					
ANR	676672	ExpressionStatement	pos ++	384:5:9348:9353	676534	2	True				
ANR	676673	PostIncDecOperationExpression	pos ++		676534	0					
ANR	676674	Identifier	pos		676534	0					
ANR	676675	IncDec	++		676534	1					
ANR	676676	ContinueStatement	continue ;	385:5:9360:9368	676534	3	True				
ANR	676677	ElseStatement	else		676534	0					
ANR	676678	CompoundStatement		34:3:746:746	676534	0					
ANR	676679	IfStatement	if ( lineEnd == LINEEND_CRLF )		676534	0					
ANR	676680	Condition	lineEnd == LINEEND_CRLF	391:8:9412:9434	676534	0	True				
ANR	676681	EqualityExpression	lineEnd == LINEEND_CRLF		676534	0		==			
ANR	676682	Identifier	lineEnd		676534	0					
ANR	676683	Identifier	LINEEND_CRLF		676534	1					
ANR	676684	CompoundStatement		37:4:795:795	676534	1					
ANR	676685	ExpressionStatement	outStr += inStr [ pos ]	393:5:9448:9468	676534	0	True				
ANR	676686	AssignmentExpression	outStr += inStr [ pos ]		676534	0		+=			
ANR	676687	Identifier	outStr		676534	0					
ANR	676688	ArrayIndexing	inStr [ pos ]		676534	1					
ANR	676689	Identifier	inStr		676534	0					
ANR	676690	Identifier	pos		676534	1					
ANR	676691	ExpressionStatement	outStr += '\\n'	394:5:9493:9507	676534	1	True				
ANR	676692	AssignmentExpression	outStr += '\\n'		676534	0		+=			
ANR	676693	Identifier	outStr		676534	0					
ANR	676694	PrimaryExpression	'\\n'		676534	1					
ANR	676695	ContinueStatement	continue ;	395:5:9534:9542	676534	2	True				
ANR	676696	ElseStatement	else		676534	0					
ANR	676697	IfStatement	if ( lineEnd == LINEEND_LF )		676534	0					
ANR	676698	Condition	lineEnd == LINEEND_LF	397:13:9563:9583	676534	0	True				
ANR	676699	EqualityExpression	lineEnd == LINEEND_LF		676534	0		==			
ANR	676700	Identifier	lineEnd		676534	0					
ANR	676701	Identifier	LINEEND_LF		676534	1					
ANR	676702	CompoundStatement		43:4:944:944	676534	1					
ANR	676703	ExpressionStatement	outStr += '\\n'	399:5:9597:9611	676534	0	True				
ANR	676704	AssignmentExpression	outStr += '\\n'		676534	0		+=			
ANR	676705	Identifier	outStr		676534	0					
ANR	676706	PrimaryExpression	'\\n'		676534	1					
ANR	676707	ContinueStatement	continue ;	400:5:9638:9646	676534	1	True				
ANR	676708	ElseStatement	else		676534	0					
ANR	676709	CompoundStatement		48:4:1021:1021	676534	0					
ANR	676710	ExpressionStatement	outStr += inStr [ pos ]	404:5:9674:9694	676534	0	True				
ANR	676711	AssignmentExpression	outStr += inStr [ pos ]		676534	0		+=			
ANR	676712	Identifier	outStr		676534	0					
ANR	676713	ArrayIndexing	inStr [ pos ]		676534	1					
ANR	676714	Identifier	inStr		676534	0					
ANR	676715	Identifier	pos		676534	1					
ANR	676716	ContinueStatement	continue ;	405:5:9719:9727	676534	1	True				
ANR	676717	ElseStatement	else		676534	0					
ANR	676718	IfStatement	if ( inStr [ pos ] == '\\n' )		676534	0					
ANR	676719	Condition	inStr [ pos ] == '\\n'	409:11:9755:9772	676534	0	True				
ANR	676720	EqualityExpression	inStr [ pos ] == '\\n'		676534	0		==			
ANR	676721	ArrayIndexing	inStr [ pos ]		676534	0					
ANR	676722	Identifier	inStr		676534	0					
ANR	676723	Identifier	pos		676534	1					
ANR	676724	PrimaryExpression	'\\n'		676534	1					
ANR	676725	CompoundStatement		55:2:1131:1131	676534	1					
ANR	676726	IfStatement	if ( lineEnd == LINEEND_CRLF )		676534	0					
ANR	676727	Condition	lineEnd == LINEEND_CRLF	412:7:9795:9817	676534	0	True				
ANR	676728	EqualityExpression	lineEnd == LINEEND_CRLF		676534	0		==			
ANR	676729	Identifier	lineEnd		676534	0					
ANR	676730	Identifier	LINEEND_CRLF		676534	1					
ANR	676731	CompoundStatement		58:3:1177:1177	676534	1					
ANR	676732	ExpressionStatement	outStr += '\\r'	414:4:9829:9843	676534	0	True				
ANR	676733	AssignmentExpression	outStr += '\\r'		676534	0		+=			
ANR	676734	Identifier	outStr		676534	0					
ANR	676735	PrimaryExpression	'\\r'		676534	1					
ANR	676736	ExpressionStatement	outStr += inStr [ pos ]	415:4:9869:9889	676534	1	True				
ANR	676737	AssignmentExpression	outStr += inStr [ pos ]		676534	0		+=			
ANR	676738	Identifier	outStr		676534	0					
ANR	676739	ArrayIndexing	inStr [ pos ]		676534	1					
ANR	676740	Identifier	inStr		676534	0					
ANR	676741	Identifier	pos		676534	1					
ANR	676742	ContinueStatement	continue ;	416:4:9913:9921	676534	2	True				
ANR	676743	ElseStatement	else		676534	0					
ANR	676744	IfStatement	if ( lineEnd == LINEEND_CR )		676534	0					
ANR	676745	Condition	lineEnd == LINEEND_CR	418:12:9940:9960	676534	0	True				
ANR	676746	EqualityExpression	lineEnd == LINEEND_CR		676534	0		==			
ANR	676747	Identifier	lineEnd		676534	0					
ANR	676748	Identifier	LINEEND_CR		676534	1					
ANR	676749	CompoundStatement		64:3:1320:1320	676534	1					
ANR	676750	ExpressionStatement	outStr += '\\r'	420:4:9972:9986	676534	0	True				
ANR	676751	AssignmentExpression	outStr += '\\r'		676534	0		+=			
ANR	676752	Identifier	outStr		676534	0					
ANR	676753	PrimaryExpression	'\\r'		676534	1					
ANR	676754	ContinueStatement	continue ;	421:4:10012:10020	676534	1	True				
ANR	676755	ElseStatement	else		676534	0					
ANR	676756	CompoundStatement		69:3:1392:1392	676534	0					
ANR	676757	ExpressionStatement	outStr += inStr [ pos ]	425:4:10044:10064	676534	0	True				
ANR	676758	AssignmentExpression	outStr += inStr [ pos ]		676534	0		+=			
ANR	676759	Identifier	outStr		676534	0					
ANR	676760	ArrayIndexing	inStr [ pos ]		676534	1					
ANR	676761	Identifier	inStr		676534	0					
ANR	676762	Identifier	pos		676534	1					
ANR	676763	ContinueStatement	continue ;	426:4:10088:10096	676534	1	True				
ANR	676764	ElseStatement	else		676534	0					
ANR	676765	CompoundStatement		75:2:1470:1470	676534	0					
ANR	676766	ExpressionStatement	outStr += inStr [ pos ]	431:3:10121:10141	676534	0	True				
ANR	676767	AssignmentExpression	outStr += inStr [ pos ]		676534	0		+=			
ANR	676768	Identifier	outStr		676534	0					
ANR	676769	ArrayIndexing	inStr [ pos ]		676534	1					
ANR	676770	Identifier	inStr		676534	0					
ANR	676771	Identifier	pos		676534	1					
ANR	676772	ExpressionStatement	out . str ( outStr )	435:1:10201:10216	676534	5	True				
ANR	676773	CallExpression	out . str ( outStr )		676534	0					
ANR	676774	Callee	out . str		676534	0					
ANR	676775	MemberAccess	out . str		676534	0					
ANR	676776	Identifier	out		676534	0					
ANR	676777	Identifier	str		676534	1					
ANR	676778	ArgumentList	outStr		676534	1					
ANR	676779	Argument	outStr		676534	0					
ANR	676780	Identifier	outStr		676534	0					
ANR	676781	ReturnType	void		676534	1					
ANR	676782	Identifier	ASConsole :: convertLineEnds		676534	2					
ANR	676783	ParameterList	"ostringstream & out , int lineEnd"		676534	3					
ANR	676784	Parameter	ostringstream & out	355:32:8612:8629	676534	0	True				
ANR	676785	ParameterType	ostringstream &		676534	0					
ANR	676786	Identifier	out		676534	1					
ANR	676787	Parameter	int lineEnd	355:52:8632:8642	676534	1	True				
ANR	676788	ParameterType	int		676534	0					
ANR	676789	Identifier	lineEnd		676534	1					
ANR	676790	CFGEntryNode	ENTRY		676534		True				
ANR	676791	CFGExitNode	EXIT		676534		True				
ANR	676792	Symbol	inStr . length		676534						
ANR	676793	Symbol	LINEEND_CRLF		676534						
ANR	676794	Symbol	LINEEND_CR		676534						
ANR	676795	Symbol	LINEEND_MACOLD		676534						
ANR	676796	Symbol	LINEEND_WINDOWS		676534						
ANR	676797	Symbol	lineEnd		676534						
ANR	676798	Symbol	* inStr		676534						
ANR	676799	Symbol	out		676534						
ANR	676800	Symbol	out . str		676534						
ANR	676801	Symbol	outStr		676534						
ANR	676802	Symbol	pos		676534						
ANR	676803	Symbol	inStr		676534						
ANR	676804	Symbol	LINEEND_LF		676534						
ANR	676805	Symbol	LINEEND_LINUX		676534						
ANR	676806	Symbol	inLength		676534						
ANR	676807	Symbol	* pos		676534						
ANR	676808	Function	ASConsole :: correctMixedLineEnds	438:0:10221:10542							
ANR	676809	FunctionDef	ASConsole :: correctMixedLineEnds (ostringstream & out)		676808	0					
ANR	676810	CompoundStatement		439:0:10278:10542	676808	0					
ANR	676811	IdentifierDeclStatement	LineEndFormat lineEndFormat = LINEEND_DEFAULT ;	440:1:10281:10326	676808	0	True				
ANR	676812	IdentifierDecl	lineEndFormat = LINEEND_DEFAULT		676808	0					
ANR	676813	IdentifierDeclType	LineEndFormat		676808	0					
ANR	676814	Identifier	lineEndFormat		676808	1					
ANR	676815	AssignmentExpression	lineEndFormat = LINEEND_DEFAULT		676808	2		=			
ANR	676816	Identifier	LINEEND_DEFAULT		676808	0					
ANR	676817	Identifier	LINEEND_DEFAULT		676808	1					
ANR	676818	IfStatement	"if ( outputEOL == ""\\r\\n"" )"		676808	1					
ANR	676819	Condition	"outputEOL == ""\\r\\n"""	441:5:10333:10351	676808	0	True				
ANR	676820	EqualityExpression	"outputEOL == ""\\r\\n"""		676808	0		==			
ANR	676821	Identifier	outputEOL		676808	0					
ANR	676822	PrimaryExpression	"""\\r\\n"""		676808	1					
ANR	676823	ExpressionStatement	lineEndFormat = LINEEND_WINDOWS	442:2:10356:10387	676808	1	True				
ANR	676824	AssignmentExpression	lineEndFormat = LINEEND_WINDOWS		676808	0		=			
ANR	676825	Identifier	lineEndFormat		676808	0					
ANR	676826	Identifier	LINEEND_WINDOWS		676808	1					
ANR	676827	IfStatement	"if ( outputEOL == ""\\n"" )"		676808	2					
ANR	676828	Condition	"outputEOL == ""\\n"""	443:5:10394:10410	676808	0	True				
ANR	676829	EqualityExpression	"outputEOL == ""\\n"""		676808	0		==			
ANR	676830	Identifier	outputEOL		676808	0					
ANR	676831	PrimaryExpression	"""\\n"""		676808	1					
ANR	676832	ExpressionStatement	lineEndFormat = LINEEND_LINUX	444:2:10415:10444	676808	1	True				
ANR	676833	AssignmentExpression	lineEndFormat = LINEEND_LINUX		676808	0		=			
ANR	676834	Identifier	lineEndFormat		676808	0					
ANR	676835	Identifier	LINEEND_LINUX		676808	1					
ANR	676836	IfStatement	"if ( outputEOL == ""\\r"" )"		676808	3					
ANR	676837	Condition	"outputEOL == ""\\r"""	445:5:10451:10467	676808	0	True				
ANR	676838	EqualityExpression	"outputEOL == ""\\r"""		676808	0		==			
ANR	676839	Identifier	outputEOL		676808	0					
ANR	676840	PrimaryExpression	"""\\r"""		676808	1					
ANR	676841	ExpressionStatement	lineEndFormat = LINEEND_MACOLD	446:2:10472:10502	676808	1	True				
ANR	676842	AssignmentExpression	lineEndFormat = LINEEND_MACOLD		676808	0		=			
ANR	676843	Identifier	lineEndFormat		676808	0					
ANR	676844	Identifier	LINEEND_MACOLD		676808	1					
ANR	676845	ExpressionStatement	"convertLineEnds ( out , lineEndFormat )"	447:1:10505:10540	676808	4	True				
ANR	676846	CallExpression	"convertLineEnds ( out , lineEndFormat )"		676808	0					
ANR	676847	Callee	convertLineEnds		676808	0					
ANR	676848	Identifier	convertLineEnds		676808	0					
ANR	676849	ArgumentList	out		676808	1					
ANR	676850	Argument	out		676808	0					
ANR	676851	Identifier	out		676808	0					
ANR	676852	Argument	lineEndFormat		676808	1					
ANR	676853	Identifier	lineEndFormat		676808	0					
ANR	676854	ReturnType	void		676808	1					
ANR	676855	Identifier	ASConsole :: correctMixedLineEnds		676808	2					
ANR	676856	ParameterList	ostringstream & out		676808	3					
ANR	676857	Parameter	ostringstream & out	438:37:10258:10275	676808	0	True				
ANR	676858	ParameterType	ostringstream &		676808	0					
ANR	676859	Identifier	out		676808	1					
ANR	676860	CFGEntryNode	ENTRY		676808		True				
ANR	676861	CFGExitNode	EXIT		676808		True				
ANR	676862	Symbol	lineEndFormat		676808						
ANR	676863	Symbol	LINEEND_WINDOWS		676808						
ANR	676864	Symbol	LINEEND_LINUX		676808						
ANR	676865	Symbol	LINEEND_MACOLD		676808						
ANR	676866	Symbol	LINEEND_DEFAULT		676808						
ANR	676867	Symbol	outputEOL		676808						
ANR	676868	Symbol	out		676808						
ANR	676869	Function	ASConsole :: detectEncoding	453:0:10701:11190							
ANR	676870	FunctionDef	"ASConsole :: detectEncoding (const char * data , size_t dataSize)"		676869	0					
ANR	676871	CompoundStatement		454:0:10781:11190	676869	0					
ANR	676872	IdentifierDeclStatement	FileEncoding encoding = ENCODING_8BIT ;	455:1:10784:10821	676869	0	True				
ANR	676873	IdentifierDecl	encoding = ENCODING_8BIT		676869	0					
ANR	676874	IdentifierDeclType	FileEncoding		676869	0					
ANR	676875	Identifier	encoding		676869	1					
ANR	676876	AssignmentExpression	encoding = ENCODING_8BIT		676869	2		=			
ANR	676877	Identifier	ENCODING_8BIT		676869	0					
ANR	676878	Identifier	ENCODING_8BIT		676869	1					
ANR	676879	IfStatement	"if ( dataSize >= 4 && memcmp ( data , ""\\x00\\x00\\xFE\\xFF"" , 4 ) == 0 )"		676869	1					
ANR	676880	Condition	"dataSize >= 4 && memcmp ( data , ""\\x00\\x00\\xFE\\xFF"" , 4 ) == 0"	457:5:10829:10885	676869	0	True				
ANR	676881	AndExpression	"dataSize >= 4 && memcmp ( data , ""\\x00\\x00\\xFE\\xFF"" , 4 ) == 0"		676869	0		&&			
ANR	676882	RelationalExpression	dataSize >= 4		676869	0		>=			
ANR	676883	Identifier	dataSize		676869	0					
ANR	676884	PrimaryExpression	4		676869	1					
ANR	676885	EqualityExpression	"memcmp ( data , ""\\x00\\x00\\xFE\\xFF"" , 4 ) == 0"		676869	1		==			
ANR	676886	CallExpression	"memcmp ( data , ""\\x00\\x00\\xFE\\xFF"" , 4 )"		676869	0					
ANR	676887	Callee	memcmp		676869	0					
ANR	676888	Identifier	memcmp		676869	0					
ANR	676889	ArgumentList	data		676869	1					
ANR	676890	Argument	data		676869	0					
ANR	676891	Identifier	data		676869	0					
ANR	676892	Argument	"""\\x00\\x00\\xFE\\xFF"""		676869	1					
ANR	676893	PrimaryExpression	"""\\x00\\x00\\xFE\\xFF"""		676869	0					
ANR	676894	Argument	4		676869	2					
ANR	676895	PrimaryExpression	4		676869	0					
ANR	676896	PrimaryExpression	0		676869	1					
ANR	676897	ExpressionStatement	encoding = UTF_32BE	458:2:10890:10909	676869	1	True				
ANR	676898	AssignmentExpression	encoding = UTF_32BE		676869	0		=			
ANR	676899	Identifier	encoding		676869	0					
ANR	676900	Identifier	UTF_32BE		676869	1					
ANR	676901	ElseStatement	else		676869	0					
ANR	676902	IfStatement	"if ( dataSize >= 4 && memcmp ( data , ""\\xFF\\xFE\\x00\\x00"" , 4 ) == 0 )"		676869	0					
ANR	676903	Condition	"dataSize >= 4 && memcmp ( data , ""\\xFF\\xFE\\x00\\x00"" , 4 ) == 0"	459:10:10921:10977	676869	0	True				
ANR	676904	AndExpression	"dataSize >= 4 && memcmp ( data , ""\\xFF\\xFE\\x00\\x00"" , 4 ) == 0"		676869	0		&&			
ANR	676905	RelationalExpression	dataSize >= 4		676869	0		>=			
ANR	676906	Identifier	dataSize		676869	0					
ANR	676907	PrimaryExpression	4		676869	1					
ANR	676908	EqualityExpression	"memcmp ( data , ""\\xFF\\xFE\\x00\\x00"" , 4 ) == 0"		676869	1		==			
ANR	676909	CallExpression	"memcmp ( data , ""\\xFF\\xFE\\x00\\x00"" , 4 )"		676869	0					
ANR	676910	Callee	memcmp		676869	0					
ANR	676911	Identifier	memcmp		676869	0					
ANR	676912	ArgumentList	data		676869	1					
ANR	676913	Argument	data		676869	0					
ANR	676914	Identifier	data		676869	0					
ANR	676915	Argument	"""\\xFF\\xFE\\x00\\x00"""		676869	1					
ANR	676916	PrimaryExpression	"""\\xFF\\xFE\\x00\\x00"""		676869	0					
ANR	676917	Argument	4		676869	2					
ANR	676918	PrimaryExpression	4		676869	0					
ANR	676919	PrimaryExpression	0		676869	1					
ANR	676920	ExpressionStatement	encoding = UTF_32LE	460:2:10982:11001	676869	1	True				
ANR	676921	AssignmentExpression	encoding = UTF_32LE		676869	0		=			
ANR	676922	Identifier	encoding		676869	0					
ANR	676923	Identifier	UTF_32LE		676869	1					
ANR	676924	ElseStatement	else		676869	0					
ANR	676925	IfStatement	"if ( dataSize >= 2 && memcmp ( data , ""\\xFE\\xFF"" , 2 ) == 0 )"		676869	0					
ANR	676926	Condition	"dataSize >= 2 && memcmp ( data , ""\\xFE\\xFF"" , 2 ) == 0"	461:10:11013:11061	676869	0	True				
ANR	676927	AndExpression	"dataSize >= 2 && memcmp ( data , ""\\xFE\\xFF"" , 2 ) == 0"		676869	0		&&			
ANR	676928	RelationalExpression	dataSize >= 2		676869	0		>=			
ANR	676929	Identifier	dataSize		676869	0					
ANR	676930	PrimaryExpression	2		676869	1					
ANR	676931	EqualityExpression	"memcmp ( data , ""\\xFE\\xFF"" , 2 ) == 0"		676869	1		==			
ANR	676932	CallExpression	"memcmp ( data , ""\\xFE\\xFF"" , 2 )"		676869	0					
ANR	676933	Callee	memcmp		676869	0					
ANR	676934	Identifier	memcmp		676869	0					
ANR	676935	ArgumentList	data		676869	1					
ANR	676936	Argument	data		676869	0					
ANR	676937	Identifier	data		676869	0					
ANR	676938	Argument	"""\\xFE\\xFF"""		676869	1					
ANR	676939	PrimaryExpression	"""\\xFE\\xFF"""		676869	0					
ANR	676940	Argument	2		676869	2					
ANR	676941	PrimaryExpression	2		676869	0					
ANR	676942	PrimaryExpression	0		676869	1					
ANR	676943	ExpressionStatement	encoding = UTF_16BE	462:2:11066:11085	676869	1	True				
ANR	676944	AssignmentExpression	encoding = UTF_16BE		676869	0		=			
ANR	676945	Identifier	encoding		676869	0					
ANR	676946	Identifier	UTF_16BE		676869	1					
ANR	676947	ElseStatement	else		676869	0					
ANR	676948	IfStatement	"if ( dataSize >= 2 && memcmp ( data , ""\\xFF\\xFE"" , 2 ) == 0 )"		676869	0					
ANR	676949	Condition	"dataSize >= 2 && memcmp ( data , ""\\xFF\\xFE"" , 2 ) == 0"	463:10:11097:11145	676869	0	True				
ANR	676950	AndExpression	"dataSize >= 2 && memcmp ( data , ""\\xFF\\xFE"" , 2 ) == 0"		676869	0		&&			
ANR	676951	RelationalExpression	dataSize >= 2		676869	0		>=			
ANR	676952	Identifier	dataSize		676869	0					
ANR	676953	PrimaryExpression	2		676869	1					
ANR	676954	EqualityExpression	"memcmp ( data , ""\\xFF\\xFE"" , 2 ) == 0"		676869	1		==			
ANR	676955	CallExpression	"memcmp ( data , ""\\xFF\\xFE"" , 2 )"		676869	0					
ANR	676956	Callee	memcmp		676869	0					
ANR	676957	Identifier	memcmp		676869	0					
ANR	676958	ArgumentList	data		676869	1					
ANR	676959	Argument	data		676869	0					
ANR	676960	Identifier	data		676869	0					
ANR	676961	Argument	"""\\xFF\\xFE"""		676869	1					
ANR	676962	PrimaryExpression	"""\\xFF\\xFE"""		676869	0					
ANR	676963	Argument	2		676869	2					
ANR	676964	PrimaryExpression	2		676869	0					
ANR	676965	PrimaryExpression	0		676869	1					
ANR	676966	ExpressionStatement	encoding = UTF_16LE	464:2:11150:11169	676869	1	True				
ANR	676967	AssignmentExpression	encoding = UTF_16LE		676869	0		=			
ANR	676968	Identifier	encoding		676869	0					
ANR	676969	Identifier	UTF_16LE		676869	1					
ANR	676970	ReturnStatement	return encoding ;	466:1:11173:11188	676869	2	True				
ANR	676971	Identifier	encoding		676869	0					
ANR	676972	ReturnType	FileEncoding		676869	1					
ANR	676973	Identifier	ASConsole :: detectEncoding		676869	2					
ANR	676974	ParameterList	"const char * data , size_t dataSize"		676869	3					
ANR	676975	Parameter	const char * data	453:39:10740:10755	676869	0	True				
ANR	676976	ParameterType	const char *		676869	0					
ANR	676977	Identifier	data		676869	1					
ANR	676978	Parameter	size_t dataSize	453:57:10758:10772	676869	1	True				
ANR	676979	ParameterType	size_t		676869	0					
ANR	676980	Identifier	dataSize		676869	1					
ANR	676981	CFGEntryNode	ENTRY		676869		True				
ANR	676982	CFGExitNode	EXIT		676869		True				
ANR	676983	Symbol	UTF_16LE		676869						
ANR	676984	Symbol	memcmp		676869						
ANR	676985	Symbol	data		676869						
ANR	676986	Symbol	UTF_16BE		676869						
ANR	676987	Symbol	UTF_32LE		676869						
ANR	676988	Symbol	dataSize		676869						
ANR	676989	Symbol	encoding		676869						
ANR	676990	Symbol	ENCODING_8BIT		676869						
ANR	676991	Symbol	UTF_32BE		676869						
ANR	676992	Function	ASConsole :: error	470:0:11225:11343							
ANR	676993	FunctionDef	ASConsole :: error ()		676992	0					
ANR	676994	CompoundStatement		471:0:11255:11343	676992	0					
ANR	676995	ExpressionStatement	"( * errorStream ) << _ ( ""\\nArtistic Style has terminated"" ) << endl"	472:1:11258:11320	676992	0	True				
ANR	676996	ShiftExpression	"( * errorStream ) << _ ( ""\\nArtistic Style has terminated"" ) << endl"		676992	0		<<			
ANR	676997	UnaryOperationExpression	* errorStream		676992	0					
ANR	676998	UnaryOperator	*		676992	0					
ANR	676999	Identifier	errorStream		676992	1					
ANR	677000	ShiftExpression	"_ ( ""\\nArtistic Style has terminated"" ) << endl"		676992	1		<<			
ANR	677001	CallExpression	"_ ( ""\\nArtistic Style has terminated"" )"		676992	0					
ANR	677002	Callee	_		676992	0					
ANR	677003	Identifier	_		676992	0					
ANR	677004	ArgumentList	"""\\nArtistic Style has terminated"""		676992	1					
ANR	677005	Argument	"""\\nArtistic Style has terminated"""		676992	0					
ANR	677006	PrimaryExpression	"""\\nArtistic Style has terminated"""		676992	0					
ANR	677007	Identifier	endl		676992	1					
ANR	677008	ExpressionStatement	exit ( EXIT_FAILURE )	473:1:11323:11341	676992	1	True				
ANR	677009	CallExpression	exit ( EXIT_FAILURE )		676992	0					
ANR	677010	Callee	exit		676992	0					
ANR	677011	Identifier	exit		676992	0					
ANR	677012	ArgumentList	EXIT_FAILURE		676992	1					
ANR	677013	Argument	EXIT_FAILURE		676992	0					
ANR	677014	Identifier	EXIT_FAILURE		676992	0					
ANR	677015	ReturnType	void		676992	1					
ANR	677016	Identifier	ASConsole :: error		676992	2					
ANR	677017	ParameterList			676992	3					
ANR	677018	CFGEntryNode	ENTRY		676992		True				
ANR	677019	CFGExitNode	EXIT		676992		True				
ANR	677020	Symbol	errorStream		676992						
ANR	677021	Symbol	EXIT_FAILURE		676992						
ANR	677022	Function	ASConsole :: error	477:0:11375:11497							
ANR	677023	FunctionDef	"ASConsole :: error (const char * why , const char * what)"		677022	0					
ANR	677024	CompoundStatement		478:0:11438:11497	677022	0					
ANR	677025	ExpressionStatement	( * errorStream ) << why << ' ' << what << endl	479:1:11441:11485	677022	0	True				
ANR	677026	ShiftExpression	( * errorStream ) << why << ' ' << what << endl		677022	0		<<			
ANR	677027	UnaryOperationExpression	* errorStream		677022	0					
ANR	677028	UnaryOperator	*		677022	0					
ANR	677029	Identifier	errorStream		677022	1					
ANR	677030	ShiftExpression	why << ' ' << what << endl		677022	1		<<			
ANR	677031	Identifier	why		677022	0					
ANR	677032	ShiftExpression	' ' << what << endl		677022	1		<<			
ANR	677033	PrimaryExpression	' '		677022	0					
ANR	677034	ShiftExpression	what << endl		677022	1		<<			
ANR	677035	Identifier	what		677022	0					
ANR	677036	Identifier	endl		677022	1					
ANR	677037	ExpressionStatement	error ( )	480:1:11488:11495	677022	1	True				
ANR	677038	CallExpression	error ( )		677022	0					
ANR	677039	Callee	error		677022	0					
ANR	677040	Identifier	error		677022	0					
ANR	677041	ArgumentList			677022	1					
ANR	677042	ReturnType	void		677022	1					
ANR	677043	Identifier	ASConsole :: error		677022	2					
ANR	677044	ParameterList	"const char * why , const char * what"		677022	3					
ANR	677045	Parameter	const char * why	477:22:11397:11411	677022	0	True				
ANR	677046	ParameterType	const char *		677022	0					
ANR	677047	Identifier	why		677022	1					
ANR	677048	Parameter	const char * what	477:39:11414:11429	677022	1	True				
ANR	677049	ParameterType	const char *		677022	0					
ANR	677050	Identifier	what		677022	1					
ANR	677051	CFGEntryNode	ENTRY		677022		True				
ANR	677052	CFGExitNode	EXIT		677022		True				
ANR	677053	Symbol	what		677022						
ANR	677054	Symbol	errorStream		677022						
ANR	677055	Symbol	why		677022						
ANR	677056	Function	ASConsole :: formatCinToCout	489:0:11722:13501							
ANR	677057	FunctionDef	ASConsole :: formatCinToCout ()		677056	0					
ANR	677058	CompoundStatement		490:0:11756:13501	677056	0					
ANR	677059	IfStatement	if ( ! stdPathIn . empty ( ) )		677056	0					
ANR	677060	Condition	! stdPathIn . empty ( )	492:5:11811:11828	677056	0	True				
ANR	677061	UnaryOperationExpression	! stdPathIn . empty ( )		677056	0					
ANR	677062	UnaryOperator	!		677056	0					
ANR	677063	CallExpression	stdPathIn . empty ( )		677056	1					
ANR	677064	Callee	stdPathIn . empty		677056	0					
ANR	677065	MemberAccess	stdPathIn . empty		677056	0					
ANR	677066	Identifier	stdPathIn		677056	0					
ANR	677067	Identifier	empty		677056	1					
ANR	677068	ArgumentList			677056	1					
ANR	677069	CompoundStatement		4:1:75:75	677056	1					
ANR	677070	IfStatement	"if ( ! freopen ( stdPathIn . c_str ( ) , ""r"" , stdin ) )"		677056	0					
ANR	677071	Condition	"! freopen ( stdPathIn . c_str ( ) , ""r"" , stdin )"	494:6:11840:11878	677056	0	True				
ANR	677072	UnaryOperationExpression	"! freopen ( stdPathIn . c_str ( ) , ""r"" , stdin )"		677056	0					
ANR	677073	UnaryOperator	!		677056	0					
ANR	677074	CallExpression	"freopen ( stdPathIn . c_str ( ) , ""r"" , stdin )"		677056	1					
ANR	677075	Callee	freopen		677056	0					
ANR	677076	Identifier	freopen		677056	0					
ANR	677077	ArgumentList	stdPathIn . c_str ( )		677056	1					
ANR	677078	Argument	stdPathIn . c_str ( )		677056	0					
ANR	677079	CallExpression	stdPathIn . c_str ( )		677056	0					
ANR	677080	Callee	stdPathIn . c_str		677056	0					
ANR	677081	MemberAccess	stdPathIn . c_str		677056	0					
ANR	677082	Identifier	stdPathIn		677056	0					
ANR	677083	Identifier	c_str		677056	1					
ANR	677084	ArgumentList			677056	1					
ANR	677085	Argument	"""r"""		677056	1					
ANR	677086	PrimaryExpression	"""r"""		677056	0					
ANR	677087	Argument	stdin		677056	2					
ANR	677088	Identifier	stdin		677056	0					
ANR	677089	ExpressionStatement	"error ( ""Cannot open input file"" , stdPathIn . c_str ( ) )"	495:3:11884:11934	677056	1	True				
ANR	677090	CallExpression	"error ( ""Cannot open input file"" , stdPathIn . c_str ( ) )"		677056	0					
ANR	677091	Callee	error		677056	0					
ANR	677092	Identifier	error		677056	0					
ANR	677093	ArgumentList	"""Cannot open input file"""		677056	1					
ANR	677094	Argument	"""Cannot open input file"""		677056	0					
ANR	677095	PrimaryExpression	"""Cannot open input file"""		677056	0					
ANR	677096	Argument	stdPathIn . c_str ( )		677056	1					
ANR	677097	CallExpression	stdPathIn . c_str ( )		677056	0					
ANR	677098	Callee	stdPathIn . c_str		677056	0					
ANR	677099	MemberAccess	stdPathIn . c_str		677056	0					
ANR	677100	Identifier	stdPathIn		677056	0					
ANR	677101	Identifier	c_str		677056	1					
ANR	677102	ArgumentList			677056	1					
ANR	677103	IfStatement	if ( ! stdPathOut . empty ( ) )		677056	1					
ANR	677104	Condition	! stdPathOut . empty ( )	497:5:11944:11962	677056	0	True				
ANR	677105	UnaryOperationExpression	! stdPathOut . empty ( )		677056	0					
ANR	677106	UnaryOperator	!		677056	0					
ANR	677107	CallExpression	stdPathOut . empty ( )		677056	1					
ANR	677108	Callee	stdPathOut . empty		677056	0					
ANR	677109	MemberAccess	stdPathOut . empty		677056	0					
ANR	677110	Identifier	stdPathOut		677056	0					
ANR	677111	Identifier	empty		677056	1					
ANR	677112	ArgumentList			677056	1					
ANR	677113	CompoundStatement		9:1:209:209	677056	1					
ANR	677114	IfStatement	"if ( ! freopen ( stdPathOut . c_str ( ) , ""w"" , stdout ) )"		677056	0					
ANR	677115	Condition	"! freopen ( stdPathOut . c_str ( ) , ""w"" , stdout )"	499:6:11974:12014	677056	0	True				
ANR	677116	UnaryOperationExpression	"! freopen ( stdPathOut . c_str ( ) , ""w"" , stdout )"		677056	0					
ANR	677117	UnaryOperator	!		677056	0					
ANR	677118	CallExpression	"freopen ( stdPathOut . c_str ( ) , ""w"" , stdout )"		677056	1					
ANR	677119	Callee	freopen		677056	0					
ANR	677120	Identifier	freopen		677056	0					
ANR	677121	ArgumentList	stdPathOut . c_str ( )		677056	1					
ANR	677122	Argument	stdPathOut . c_str ( )		677056	0					
ANR	677123	CallExpression	stdPathOut . c_str ( )		677056	0					
ANR	677124	Callee	stdPathOut . c_str		677056	0					
ANR	677125	MemberAccess	stdPathOut . c_str		677056	0					
ANR	677126	Identifier	stdPathOut		677056	0					
ANR	677127	Identifier	c_str		677056	1					
ANR	677128	ArgumentList			677056	1					
ANR	677129	Argument	"""w"""		677056	1					
ANR	677130	PrimaryExpression	"""w"""		677056	0					
ANR	677131	Argument	stdout		677056	2					
ANR	677132	Identifier	stdout		677056	0					
ANR	677133	ExpressionStatement	"error ( ""Cannot open output file"" , stdPathOut . c_str ( ) )"	500:3:12020:12072	677056	1	True				
ANR	677134	CallExpression	"error ( ""Cannot open output file"" , stdPathOut . c_str ( ) )"		677056	0					
ANR	677135	Callee	error		677056	0					
ANR	677136	Identifier	error		677056	0					
ANR	677137	ArgumentList	"""Cannot open output file"""		677056	1					
ANR	677138	Argument	"""Cannot open output file"""		677056	0					
ANR	677139	PrimaryExpression	"""Cannot open output file"""		677056	0					
ANR	677140	Argument	stdPathOut . c_str ( )		677056	1					
ANR	677141	CallExpression	stdPathOut . c_str ( )		677056	0					
ANR	677142	Callee	stdPathOut . c_str		677056	0					
ANR	677143	MemberAccess	stdPathOut . c_str		677056	0					
ANR	677144	Identifier	stdPathOut		677056	0					
ANR	677145	Identifier	c_str		677056	1					
ANR	677146	ArgumentList			677056	1					
ANR	677147	IdentifierDeclStatement	istream * inStream = & cin ;	509:1:12441:12465	677056	2	True				
ANR	677148	IdentifierDecl	* inStream = & cin		677056	0					
ANR	677149	IdentifierDeclType	istream *		677056	0					
ANR	677150	Identifier	inStream		677056	1					
ANR	677151	AssignmentExpression	* inStream = & cin		677056	2		=			
ANR	677152	Identifier	inStream		677056	0					
ANR	677153	UnaryOperationExpression	& cin		677056	1					
ANR	677154	UnaryOperator	&		677056	0					
ANR	677155	Identifier	cin		677056	1					
ANR	677156	IdentifierDeclStatement	stringstream outStream ;	510:1:12468:12490	677056	3	True				
ANR	677157	IdentifierDecl	outStream		677056	0					
ANR	677158	IdentifierDeclType	stringstream		677056	0					
ANR	677159	Identifier	outStream		677056	1					
ANR	677160	IdentifierDeclStatement	char ch ;	511:1:12493:12500	677056	4	True				
ANR	677161	IdentifierDecl	ch		677056	0					
ANR	677162	IdentifierDeclType	char		677056	0					
ANR	677163	Identifier	ch		677056	1					
ANR	677164	ExpressionStatement	inStream -> get ( ch )	512:1:12503:12520	677056	5	True				
ANR	677165	CallExpression	inStream -> get ( ch )		677056	0					
ANR	677166	Callee	inStream -> get		677056	0					
ANR	677167	PtrMemberAccess	inStream -> get		677056	0					
ANR	677168	Identifier	inStream		677056	0					
ANR	677169	Identifier	get		677056	1					
ANR	677170	ArgumentList	ch		677056	1					
ANR	677171	Argument	ch		677056	0					
ANR	677172	Identifier	ch		677056	0					
ANR	677173	WhileStatement	while ( ! inStream -> eof ( ) && ! inStream -> fail ( ) )		677056	6					
ANR	677174	Condition	! inStream -> eof ( ) && ! inStream -> fail ( )	513:8:12530:12566	677056	0	True				
ANR	677175	AndExpression	! inStream -> eof ( ) && ! inStream -> fail ( )		677056	0		&&			
ANR	677176	UnaryOperationExpression	! inStream -> eof ( )		677056	0					
ANR	677177	UnaryOperator	!		677056	0					
ANR	677178	CallExpression	inStream -> eof ( )		677056	1					
ANR	677179	Callee	inStream -> eof		677056	0					
ANR	677180	PtrMemberAccess	inStream -> eof		677056	0					
ANR	677181	Identifier	inStream		677056	0					
ANR	677182	Identifier	eof		677056	1					
ANR	677183	ArgumentList			677056	1					
ANR	677184	UnaryOperationExpression	! inStream -> fail ( )		677056	1					
ANR	677185	UnaryOperator	!		677056	0					
ANR	677186	CallExpression	inStream -> fail ( )		677056	1					
ANR	677187	Callee	inStream -> fail		677056	0					
ANR	677188	PtrMemberAccess	inStream -> fail		677056	0					
ANR	677189	Identifier	inStream		677056	0					
ANR	677190	Identifier	fail		677056	1					
ANR	677191	ArgumentList			677056	1					
ANR	677192	CompoundStatement		25:1:813:813	677056	1					
ANR	677193	ExpressionStatement	outStream . put ( ch )	515:2:12574:12591	677056	0	True				
ANR	677194	CallExpression	outStream . put ( ch )		677056	0					
ANR	677195	Callee	outStream . put		677056	0					
ANR	677196	MemberAccess	outStream . put		677056	0					
ANR	677197	Identifier	outStream		677056	0					
ANR	677198	Identifier	put		677056	1					
ANR	677199	ArgumentList	ch		677056	1					
ANR	677200	Argument	ch		677056	0					
ANR	677201	Identifier	ch		677056	0					
ANR	677202	ExpressionStatement	inStream -> get ( ch )	516:2:12595:12612	677056	1	True				
ANR	677203	CallExpression	inStream -> get ( ch )		677056	0					
ANR	677204	Callee	inStream -> get		677056	0					
ANR	677205	PtrMemberAccess	inStream -> get		677056	0					
ANR	677206	Identifier	inStream		677056	0					
ANR	677207	Identifier	get		677056	1					
ANR	677208	ArgumentList	ch		677056	1					
ANR	677209	Argument	ch		677056	0					
ANR	677210	Identifier	ch		677056	0					
ANR	677211	IdentifierDeclStatement	ASStreamIterator < stringstream > streamIterator ( & outStream ) ;	518:1:12618:12675	677056	7	True				
ANR	677212	IdentifierDecl	streamIterator ( & outStream )		677056	0					
ANR	677213	IdentifierDeclType	ASStreamIterator < stringstream >		677056	0					
ANR	677214	Identifier	streamIterator		677056	1					
ANR	677215	UnaryOperationExpression	& outStream		677056	2					
ANR	677216	UnaryOperator	&		677056	0					
ANR	677217	Identifier	outStream		677056	1					
ANR	677218	IdentifierDeclStatement	LineEndFormat lineEndFormat = LINEEND_DEFAULT ;	522:1:12814:12859	677056	8	True				
ANR	677219	IdentifierDecl	lineEndFormat = LINEEND_DEFAULT		677056	0					
ANR	677220	IdentifierDeclType	LineEndFormat		677056	0					
ANR	677221	Identifier	lineEndFormat		677056	1					
ANR	677222	AssignmentExpression	lineEndFormat = LINEEND_DEFAULT		677056	2		=			
ANR	677223	Identifier	LINEEND_DEFAULT		677056	0					
ANR	677224	Identifier	LINEEND_DEFAULT		677056	1					
ANR	677225	ExpressionStatement	initializeOutputEOL ( lineEndFormat )	526:1:12946:12980	677056	9	True				
ANR	677226	CallExpression	initializeOutputEOL ( lineEndFormat )		677056	0					
ANR	677227	Callee	initializeOutputEOL		677056	0					
ANR	677228	Identifier	initializeOutputEOL		677056	0					
ANR	677229	ArgumentList	lineEndFormat		677056	1					
ANR	677230	Argument	lineEndFormat		677056	0					
ANR	677231	Identifier	lineEndFormat		677056	0					
ANR	677232	ExpressionStatement	formatter . init ( & streamIterator )	527:1:12983:13014	677056	10	True				
ANR	677233	CallExpression	formatter . init ( & streamIterator )		677056	0					
ANR	677234	Callee	formatter . init		677056	0					
ANR	677235	MemberAccess	formatter . init		677056	0					
ANR	677236	Identifier	formatter		677056	0					
ANR	677237	Identifier	init		677056	1					
ANR	677238	ArgumentList	& streamIterator		677056	1					
ANR	677239	Argument	& streamIterator		677056	0					
ANR	677240	UnaryOperationExpression	& streamIterator		677056	0					
ANR	677241	UnaryOperator	&		677056	0					
ANR	677242	Identifier	streamIterator		677056	1					
ANR	677243	WhileStatement	while ( formatter . hasMoreLines ( ) )		677056	11					
ANR	677244	Condition	formatter . hasMoreLines ( )	529:8:13025:13048	677056	0	True				
ANR	677245	CallExpression	formatter . hasMoreLines ( )		677056	0					
ANR	677246	Callee	formatter . hasMoreLines		677056	0					
ANR	677247	MemberAccess	formatter . hasMoreLines		677056	0					
ANR	677248	Identifier	formatter		677056	0					
ANR	677249	Identifier	hasMoreLines		677056	1					
ANR	677250	ArgumentList			677056	1					
ANR	677251	CompoundStatement		41:1:1295:1295	677056	1					
ANR	677252	ExpressionStatement	cout << formatter . nextLine ( )	531:2:13056:13084	677056	0	True				
ANR	677253	ShiftExpression	cout << formatter . nextLine ( )		677056	0		<<			
ANR	677254	Identifier	cout		677056	0					
ANR	677255	CallExpression	formatter . nextLine ( )		677056	1					
ANR	677256	Callee	formatter . nextLine		677056	0					
ANR	677257	MemberAccess	formatter . nextLine		677056	0					
ANR	677258	Identifier	formatter		677056	0					
ANR	677259	Identifier	nextLine		677056	1					
ANR	677260	ArgumentList			677056	1					
ANR	677261	IfStatement	if ( formatter . hasMoreLines ( ) )		677056	1					
ANR	677262	Condition	formatter . hasMoreLines ( )	532:6:13092:13115	677056	0	True				
ANR	677263	CallExpression	formatter . hasMoreLines ( )		677056	0					
ANR	677264	Callee	formatter . hasMoreLines		677056	0					
ANR	677265	MemberAccess	formatter . hasMoreLines		677056	0					
ANR	677266	Identifier	formatter		677056	0					
ANR	677267	Identifier	hasMoreLines		677056	1					
ANR	677268	ArgumentList			677056	1					
ANR	677269	CompoundStatement		44:2:1363:1363	677056	1					
ANR	677270	ExpressionStatement	"setOutputEOL ( lineEndFormat , streamIterator . getOutputEOL ( ) )"	534:3:13125:13183	677056	0	True				
ANR	677271	CallExpression	"setOutputEOL ( lineEndFormat , streamIterator . getOutputEOL ( ) )"		677056	0					
ANR	677272	Callee	setOutputEOL		677056	0					
ANR	677273	Identifier	setOutputEOL		677056	0					
ANR	677274	ArgumentList	lineEndFormat		677056	1					
ANR	677275	Argument	lineEndFormat		677056	0					
ANR	677276	Identifier	lineEndFormat		677056	0					
ANR	677277	Argument	streamIterator . getOutputEOL ( )		677056	1					
ANR	677278	CallExpression	streamIterator . getOutputEOL ( )		677056	0					
ANR	677279	Callee	streamIterator . getOutputEOL		677056	0					
ANR	677280	MemberAccess	streamIterator . getOutputEOL		677056	0					
ANR	677281	Identifier	streamIterator		677056	0					
ANR	677282	Identifier	getOutputEOL		677056	1					
ANR	677283	ArgumentList			677056	1					
ANR	677284	ExpressionStatement	cout << outputEOL	535:3:13188:13205	677056	1	True				
ANR	677285	ShiftExpression	cout << outputEOL		677056	0		<<			
ANR	677286	Identifier	cout		677056	0					
ANR	677287	Identifier	outputEOL		677056	1					
ANR	677288	ElseStatement	else		677056	0					
ANR	677289	CompoundStatement		49:2:1463:1463	677056	0					
ANR	677290	IfStatement	if ( formatter . getIsLineReady ( ) )		677056	0					
ANR	677291	Condition	formatter . getIsLineReady ( )	540:7:13320:13345	677056	0	True				
ANR	677292	CallExpression	formatter . getIsLineReady ( )		677056	0					
ANR	677293	Callee	formatter . getIsLineReady		677056	0					
ANR	677294	MemberAccess	formatter . getIsLineReady		677056	0					
ANR	677295	Identifier	formatter		677056	0					
ANR	677296	Identifier	getIsLineReady		677056	1					
ANR	677297	ArgumentList			677056	1					
ANR	677298	CompoundStatement		52:3:1594:1594	677056	1					
ANR	677299	ExpressionStatement	"setOutputEOL ( lineEndFormat , streamIterator . getOutputEOL ( ) )"	542:4:13357:13415	677056	0	True				
ANR	677300	CallExpression	"setOutputEOL ( lineEndFormat , streamIterator . getOutputEOL ( ) )"		677056	0					
ANR	677301	Callee	setOutputEOL		677056	0					
ANR	677302	Identifier	setOutputEOL		677056	0					
ANR	677303	ArgumentList	lineEndFormat		677056	1					
ANR	677304	Argument	lineEndFormat		677056	0					
ANR	677305	Identifier	lineEndFormat		677056	0					
ANR	677306	Argument	streamIterator . getOutputEOL ( )		677056	1					
ANR	677307	CallExpression	streamIterator . getOutputEOL ( )		677056	0					
ANR	677308	Callee	streamIterator . getOutputEOL		677056	0					
ANR	677309	MemberAccess	streamIterator . getOutputEOL		677056	0					
ANR	677310	Identifier	streamIterator		677056	0					
ANR	677311	Identifier	getOutputEOL		677056	1					
ANR	677312	ArgumentList			677056	1					
ANR	677313	ExpressionStatement	cout << outputEOL	543:4:13421:13438	677056	1	True				
ANR	677314	ShiftExpression	cout << outputEOL		677056	0		<<			
ANR	677315	Identifier	cout		677056	0					
ANR	677316	Identifier	outputEOL		677056	1					
ANR	677317	ExpressionStatement	cout << formatter . nextLine ( )	544:4:13444:13472	677056	2	True				
ANR	677318	ShiftExpression	cout << formatter . nextLine ( )		677056	0		<<			
ANR	677319	Identifier	cout		677056	0					
ANR	677320	CallExpression	formatter . nextLine ( )		677056	1					
ANR	677321	Callee	formatter . nextLine		677056	0					
ANR	677322	MemberAccess	formatter . nextLine		677056	0					
ANR	677323	Identifier	formatter		677056	0					
ANR	677324	Identifier	nextLine		677056	1					
ANR	677325	ArgumentList			677056	1					
ANR	677326	ExpressionStatement	cout . flush ( )	548:1:13487:13499	677056	12	True				
ANR	677327	CallExpression	cout . flush ( )		677056	0					
ANR	677328	Callee	cout . flush		677056	0					
ANR	677329	MemberAccess	cout . flush		677056	0					
ANR	677330	Identifier	cout		677056	0					
ANR	677331	Identifier	flush		677056	1					
ANR	677332	ArgumentList			677056	1					
ANR	677333	ReturnType	void		677056	1					
ANR	677334	Identifier	ASConsole :: formatCinToCout		677056	2					
ANR	677335	ParameterList			677056	3					
ANR	677336	CFGEntryNode	ENTRY		677056		True				
ANR	677337	CFGExitNode	EXIT		677056		True				
ANR	677338	Symbol	stdin		677056						
ANR	677339	Symbol	stdout		677056						
ANR	677340	Symbol	inStream		677056						
ANR	677341	Symbol	stdPathOut		677056						
ANR	677342	Symbol	outStream		677056						
ANR	677343	Symbol	stdPathOut . c_str		677056						
ANR	677344	Symbol	streamIterator . getOutputEOL		677056						
ANR	677345	Symbol	lineEndFormat		677056						
ANR	677346	Symbol	stdPathIn . empty		677056						
ANR	677347	Symbol	inStream -> fail		677056						
ANR	677348	Symbol	stdPathIn . c_str		677056						
ANR	677349	Symbol	formatter . hasMoreLines		677056						
ANR	677350	Symbol	freopen		677056						
ANR	677351	Symbol	ch		677056						
ANR	677352	Symbol	cout		677056						
ANR	677353	Symbol	* inStream		677056						
ANR	677354	Symbol	inStream -> eof		677056						
ANR	677355	Symbol	stdPathOut . empty		677056						
ANR	677356	Symbol	& cin		677056						
ANR	677357	Symbol	formatter . getIsLineReady		677056						
ANR	677358	Symbol	streamIterator		677056						
ANR	677359	Symbol	stdPathIn		677056						
ANR	677360	Symbol	formatter		677056						
ANR	677361	Symbol	& streamIterator		677056						
ANR	677362	Symbol	LINEEND_DEFAULT		677056						
ANR	677363	Function	ASConsole :: formatFile	556:0:13639:16194							
ANR	677364	FunctionDef	ASConsole :: formatFile (const string & fileName_)		677363	0					
ANR	677365	CompoundStatement		557:0:13691:16194	677363	0					
ANR	677366	IdentifierDeclStatement	stringstream in ;	558:1:13694:13709	677363	0	True				
ANR	677367	IdentifierDecl	in		677363	0					
ANR	677368	IdentifierDeclType	stringstream		677363	0					
ANR	677369	Identifier	in		677363	1					
ANR	677370	IdentifierDeclStatement	ostringstream out ;	559:1:13712:13729	677363	1	True				
ANR	677371	IdentifierDecl	out		677363	0					
ANR	677372	IdentifierDeclType	ostringstream		677363	0					
ANR	677373	Identifier	out		677363	1					
ANR	677374	IdentifierDeclStatement	"FileEncoding encoding = readFile ( fileName_ , in ) ;"	560:1:13732:13779	677363	2	True				
ANR	677375	IdentifierDecl	"encoding = readFile ( fileName_ , in )"		677363	0					
ANR	677376	IdentifierDeclType	FileEncoding		677363	0					
ANR	677377	Identifier	encoding		677363	1					
ANR	677378	AssignmentExpression	"encoding = readFile ( fileName_ , in )"		677363	2		=			
ANR	677379	Identifier	encoding		677363	0					
ANR	677380	CallExpression	"readFile ( fileName_ , in )"		677363	1					
ANR	677381	Callee	readFile		677363	0					
ANR	677382	Identifier	readFile		677363	0					
ANR	677383	ArgumentList	fileName_		677363	1					
ANR	677384	Argument	fileName_		677363	0					
ANR	677385	Identifier	fileName_		677363	0					
ANR	677386	Argument	in		677363	1					
ANR	677387	Identifier	in		677363	0					
ANR	677388	IfStatement	if ( ! formatter . getModeManuallySet ( ) )		677363	3					
ANR	677389	Condition	! formatter . getModeManuallySet ( )	564:5:13895:13925	677363	0	True				
ANR	677390	UnaryOperationExpression	! formatter . getModeManuallySet ( )		677363	0					
ANR	677391	UnaryOperator	!		677363	0					
ANR	677392	CallExpression	formatter . getModeManuallySet ( )		677363	1					
ANR	677393	Callee	formatter . getModeManuallySet		677363	0					
ANR	677394	MemberAccess	formatter . getModeManuallySet		677363	0					
ANR	677395	Identifier	formatter		677363	0					
ANR	677396	Identifier	getModeManuallySet		677363	1					
ANR	677397	ArgumentList			677363	1					
ANR	677398	CompoundStatement		9:1:237:237	677363	1					
ANR	677399	IfStatement	"if ( stringEndsWith ( fileName_ , string ( "".java"" ) ) )"		677363	0					
ANR	677400	Condition	"stringEndsWith ( fileName_ , string ( "".java"" ) )"	566:6:13937:13978	677363	0	True				
ANR	677401	CallExpression	"stringEndsWith ( fileName_ , string ( "".java"" ) )"		677363	0					
ANR	677402	Callee	stringEndsWith		677363	0					
ANR	677403	Identifier	stringEndsWith		677363	0					
ANR	677404	ArgumentList	fileName_		677363	1					
ANR	677405	Argument	fileName_		677363	0					
ANR	677406	Identifier	fileName_		677363	0					
ANR	677407	Argument	"string ( "".java"" )"		677363	1					
ANR	677408	CallExpression	"string ( "".java"" )"		677363	0					
ANR	677409	Callee	string		677363	0					
ANR	677410	Identifier	string		677363	0					
ANR	677411	ArgumentList	""".java"""		677363	1					
ANR	677412	Argument	""".java"""		677363	0					
ANR	677413	PrimaryExpression	""".java"""		677363	0					
ANR	677414	ExpressionStatement	formatter . setJavaStyle ( )	567:3:13984:14008	677363	1	True				
ANR	677415	CallExpression	formatter . setJavaStyle ( )		677363	0					
ANR	677416	Callee	formatter . setJavaStyle		677363	0					
ANR	677417	MemberAccess	formatter . setJavaStyle		677363	0					
ANR	677418	Identifier	formatter		677363	0					
ANR	677419	Identifier	setJavaStyle		677363	1					
ANR	677420	ArgumentList			677363	1					
ANR	677421	ElseStatement	else		677363	0					
ANR	677422	IfStatement	"if ( stringEndsWith ( fileName_ , string ( "".cs"" ) ) )"		677363	0					
ANR	677423	Condition	"stringEndsWith ( fileName_ , string ( "".cs"" ) )"	568:11:14021:14060	677363	0	True				
ANR	677424	CallExpression	"stringEndsWith ( fileName_ , string ( "".cs"" ) )"		677363	0					
ANR	677425	Callee	stringEndsWith		677363	0					
ANR	677426	Identifier	stringEndsWith		677363	0					
ANR	677427	ArgumentList	fileName_		677363	1					
ANR	677428	Argument	fileName_		677363	0					
ANR	677429	Identifier	fileName_		677363	0					
ANR	677430	Argument	"string ( "".cs"" )"		677363	1					
ANR	677431	CallExpression	"string ( "".cs"" )"		677363	0					
ANR	677432	Callee	string		677363	0					
ANR	677433	Identifier	string		677363	0					
ANR	677434	ArgumentList	""".cs"""		677363	1					
ANR	677435	Argument	""".cs"""		677363	0					
ANR	677436	PrimaryExpression	""".cs"""		677363	0					
ANR	677437	ExpressionStatement	formatter . setSharpStyle ( )	569:3:14066:14091	677363	1	True				
ANR	677438	CallExpression	formatter . setSharpStyle ( )		677363	0					
ANR	677439	Callee	formatter . setSharpStyle		677363	0					
ANR	677440	MemberAccess	formatter . setSharpStyle		677363	0					
ANR	677441	Identifier	formatter		677363	0					
ANR	677442	Identifier	setSharpStyle		677363	1					
ANR	677443	ArgumentList			677363	1					
ANR	677444	ElseStatement	else		677363	0					
ANR	677445	ExpressionStatement	formatter . setCStyle ( )	571:3:14103:14124	677363	0	True				
ANR	677446	CallExpression	formatter . setCStyle ( )		677363	0					
ANR	677447	Callee	formatter . setCStyle		677363	0					
ANR	677448	MemberAccess	formatter . setCStyle		677363	0					
ANR	677449	Identifier	formatter		677363	0					
ANR	677450	Identifier	setCStyle		677363	1					
ANR	677451	ArgumentList			677363	1					
ANR	677452	IdentifierDeclStatement	string nextLine ;	575:1:14155:14170	677363	4	True				
ANR	677453	IdentifierDecl	nextLine		677363	0					
ANR	677454	IdentifierDeclType	string		677363	0					
ANR	677455	Identifier	nextLine		677363	1					
ANR	677456	ExpressionStatement	filesAreIdentical = true	576:1:14196:14220	677363	5	True				
ANR	677457	AssignmentExpression	filesAreIdentical = true		677363	0		=			
ANR	677458	Identifier	filesAreIdentical		677363	0					
ANR	677459	Identifier	true		677363	1					
ANR	677460	IdentifierDeclStatement	LineEndFormat lineEndFormat = formatter . getLineEndFormat ( ) ;	577:1:14264:14322	677363	6	True				
ANR	677461	IdentifierDecl	lineEndFormat = formatter . getLineEndFormat ( )		677363	0					
ANR	677462	IdentifierDeclType	LineEndFormat		677363	0					
ANR	677463	Identifier	lineEndFormat		677363	1					
ANR	677464	AssignmentExpression	lineEndFormat = formatter . getLineEndFormat ( )		677363	2		=			
ANR	677465	Identifier	lineEndFormat		677363	0					
ANR	677466	CallExpression	formatter . getLineEndFormat ( )		677363	1					
ANR	677467	Callee	formatter . getLineEndFormat		677363	0					
ANR	677468	MemberAccess	formatter . getLineEndFormat		677363	0					
ANR	677469	Identifier	formatter		677363	0					
ANR	677470	Identifier	getLineEndFormat		677363	1					
ANR	677471	ArgumentList			677363	1					
ANR	677472	ExpressionStatement	initializeOutputEOL ( lineEndFormat )	578:1:14325:14359	677363	7	True				
ANR	677473	CallExpression	initializeOutputEOL ( lineEndFormat )		677363	0					
ANR	677474	Callee	initializeOutputEOL		677363	0					
ANR	677475	Identifier	initializeOutputEOL		677363	0					
ANR	677476	ArgumentList	lineEndFormat		677363	1					
ANR	677477	Argument	lineEndFormat		677363	0					
ANR	677478	Identifier	lineEndFormat		677363	0					
ANR	677479	IdentifierDeclStatement	ASStreamIterator < stringstream > streamIterator ( & in ) ;	580:1:14402:14452	677363	8	True				
ANR	677480	IdentifierDecl	streamIterator ( & in )		677363	0					
ANR	677481	IdentifierDeclType	ASStreamIterator < stringstream >		677363	0					
ANR	677482	Identifier	streamIterator		677363	1					
ANR	677483	UnaryOperationExpression	& in		677363	2					
ANR	677484	UnaryOperator	&		677363	0					
ANR	677485	Identifier	in		677363	1					
ANR	677486	ExpressionStatement	formatter . init ( & streamIterator )	581:1:14455:14486	677363	9	True				
ANR	677487	CallExpression	formatter . init ( & streamIterator )		677363	0					
ANR	677488	Callee	formatter . init		677363	0					
ANR	677489	MemberAccess	formatter . init		677363	0					
ANR	677490	Identifier	formatter		677363	0					
ANR	677491	Identifier	init		677363	1					
ANR	677492	ArgumentList	& streamIterator		677363	1					
ANR	677493	Argument	& streamIterator		677363	0					
ANR	677494	UnaryOperationExpression	& streamIterator		677363	0					
ANR	677495	UnaryOperator	&		677363	0					
ANR	677496	Identifier	streamIterator		677363	1					
ANR	677497	WhileStatement	while ( formatter . hasMoreLines ( ) )		677363	10					
ANR	677498	Condition	formatter . hasMoreLines ( )	584:8:14517:14540	677363	0	True				
ANR	677499	CallExpression	formatter . hasMoreLines ( )		677363	0					
ANR	677500	Callee	formatter . hasMoreLines		677363	0					
ANR	677501	MemberAccess	formatter . hasMoreLines		677363	0					
ANR	677502	Identifier	formatter		677363	0					
ANR	677503	Identifier	hasMoreLines		677363	1					
ANR	677504	ArgumentList			677363	1					
ANR	677505	CompoundStatement		29:1:852:852	677363	1					
ANR	677506	ExpressionStatement	nextLine = formatter . nextLine ( )	586:2:14548:14579	677363	0	True				
ANR	677507	AssignmentExpression	nextLine = formatter . nextLine ( )		677363	0		=			
ANR	677508	Identifier	nextLine		677363	0					
ANR	677509	CallExpression	formatter . nextLine ( )		677363	1					
ANR	677510	Callee	formatter . nextLine		677363	0					
ANR	677511	MemberAccess	formatter . nextLine		677363	0					
ANR	677512	Identifier	formatter		677363	0					
ANR	677513	Identifier	nextLine		677363	1					
ANR	677514	ArgumentList			677363	1					
ANR	677515	ExpressionStatement	out << nextLine	587:2:14583:14598	677363	1	True				
ANR	677516	ShiftExpression	out << nextLine		677363	0		<<			
ANR	677517	Identifier	out		677363	0					
ANR	677518	Identifier	nextLine		677363	1					
ANR	677519	ExpressionStatement	linesOut ++	588:2:14602:14612	677363	2	True				
ANR	677520	PostIncDecOperationExpression	linesOut ++		677363	0					
ANR	677521	Identifier	linesOut		677363	0					
ANR	677522	IncDec	++		677363	1					
ANR	677523	IfStatement	if ( formatter . hasMoreLines ( ) )		677363	3					
ANR	677524	Condition	formatter . hasMoreLines ( )	589:6:14620:14643	677363	0	True				
ANR	677525	CallExpression	formatter . hasMoreLines ( )		677363	0					
ANR	677526	Callee	formatter . hasMoreLines		677363	0					
ANR	677527	MemberAccess	formatter . hasMoreLines		677363	0					
ANR	677528	Identifier	formatter		677363	0					
ANR	677529	Identifier	hasMoreLines		677363	1					
ANR	677530	ArgumentList			677363	1					
ANR	677531	CompoundStatement		34:2:956:956	677363	1					
ANR	677532	ExpressionStatement	"setOutputEOL ( lineEndFormat , streamIterator . getOutputEOL ( ) )"	591:3:14653:14711	677363	0	True				
ANR	677533	CallExpression	"setOutputEOL ( lineEndFormat , streamIterator . getOutputEOL ( ) )"		677363	0					
ANR	677534	Callee	setOutputEOL		677363	0					
ANR	677535	Identifier	setOutputEOL		677363	0					
ANR	677536	ArgumentList	lineEndFormat		677363	1					
ANR	677537	Argument	lineEndFormat		677363	0					
ANR	677538	Identifier	lineEndFormat		677363	0					
ANR	677539	Argument	streamIterator . getOutputEOL ( )		677363	1					
ANR	677540	CallExpression	streamIterator . getOutputEOL ( )		677363	0					
ANR	677541	Callee	streamIterator . getOutputEOL		677363	0					
ANR	677542	MemberAccess	streamIterator . getOutputEOL		677363	0					
ANR	677543	Identifier	streamIterator		677363	0					
ANR	677544	Identifier	getOutputEOL		677363	1					
ANR	677545	ArgumentList			677363	1					
ANR	677546	ExpressionStatement	out << outputEOL	592:3:14716:14732	677363	1	True				
ANR	677547	ShiftExpression	out << outputEOL		677363	0		<<			
ANR	677548	Identifier	out		677363	0					
ANR	677549	Identifier	outputEOL		677363	1					
ANR	677550	ElseStatement	else		677363	0					
ANR	677551	CompoundStatement		39:2:1055:1055	677363	0					
ANR	677552	ExpressionStatement	streamIterator . saveLastInputLine ( )	596:3:14752:14786	677363	0	True				
ANR	677553	CallExpression	streamIterator . saveLastInputLine ( )		677363	0					
ANR	677554	Callee	streamIterator . saveLastInputLine		677363	0					
ANR	677555	MemberAccess	streamIterator . saveLastInputLine		677363	0					
ANR	677556	Identifier	streamIterator		677363	0					
ANR	677557	Identifier	saveLastInputLine		677363	1					
ANR	677558	ArgumentList			677363	1					
ANR	677559	IfStatement	if ( formatter . getIsLineReady ( ) )		677363	1					
ANR	677560	Condition	formatter . getIsLineReady ( )	598:7:14924:14949	677363	0	True				
ANR	677561	CallExpression	formatter . getIsLineReady ( )		677363	0					
ANR	677562	Callee	formatter . getIsLineReady		677363	0					
ANR	677563	MemberAccess	formatter . getIsLineReady		677363	0					
ANR	677564	Identifier	formatter		677363	0					
ANR	677565	Identifier	getIsLineReady		677363	1					
ANR	677566	ArgumentList			677363	1					
ANR	677567	CompoundStatement		43:3:1263:1263	677363	1					
ANR	677568	ExpressionStatement	"setOutputEOL ( lineEndFormat , streamIterator . getOutputEOL ( ) )"	600:4:14961:15019	677363	0	True				
ANR	677569	CallExpression	"setOutputEOL ( lineEndFormat , streamIterator . getOutputEOL ( ) )"		677363	0					
ANR	677570	Callee	setOutputEOL		677363	0					
ANR	677571	Identifier	setOutputEOL		677363	0					
ANR	677572	ArgumentList	lineEndFormat		677363	1					
ANR	677573	Argument	lineEndFormat		677363	0					
ANR	677574	Identifier	lineEndFormat		677363	0					
ANR	677575	Argument	streamIterator . getOutputEOL ( )		677363	1					
ANR	677576	CallExpression	streamIterator . getOutputEOL ( )		677363	0					
ANR	677577	Callee	streamIterator . getOutputEOL		677363	0					
ANR	677578	MemberAccess	streamIterator . getOutputEOL		677363	0					
ANR	677579	Identifier	streamIterator		677363	0					
ANR	677580	Identifier	getOutputEOL		677363	1					
ANR	677581	ArgumentList			677363	1					
ANR	677582	ExpressionStatement	out << outputEOL	601:4:15025:15041	677363	1	True				
ANR	677583	ShiftExpression	out << outputEOL		677363	0		<<			
ANR	677584	Identifier	out		677363	0					
ANR	677585	Identifier	outputEOL		677363	1					
ANR	677586	ExpressionStatement	nextLine = formatter . nextLine ( )	602:4:15047:15078	677363	2	True				
ANR	677587	AssignmentExpression	nextLine = formatter . nextLine ( )		677363	0		=			
ANR	677588	Identifier	nextLine		677363	0					
ANR	677589	CallExpression	formatter . nextLine ( )		677363	1					
ANR	677590	Callee	formatter . nextLine		677363	0					
ANR	677591	MemberAccess	formatter . nextLine		677363	0					
ANR	677592	Identifier	formatter		677363	0					
ANR	677593	Identifier	nextLine		677363	1					
ANR	677594	ArgumentList			677363	1					
ANR	677595	ExpressionStatement	out << nextLine	603:4:15084:15099	677363	3	True				
ANR	677596	ShiftExpression	out << nextLine		677363	0		<<			
ANR	677597	Identifier	out		677363	0					
ANR	677598	Identifier	nextLine		677363	1					
ANR	677599	ExpressionStatement	linesOut ++	604:4:15105:15115	677363	4	True				
ANR	677600	PostIncDecOperationExpression	linesOut ++		677363	0					
ANR	677601	Identifier	linesOut		677363	0					
ANR	677602	IncDec	++		677363	1					
ANR	677603	ExpressionStatement	streamIterator . saveLastInputLine ( )	605:4:15121:15155	677363	5	True				
ANR	677604	CallExpression	streamIterator . saveLastInputLine ( )		677363	0					
ANR	677605	Callee	streamIterator . saveLastInputLine		677363	0					
ANR	677606	MemberAccess	streamIterator . saveLastInputLine		677363	0					
ANR	677607	Identifier	streamIterator		677363	0					
ANR	677608	Identifier	saveLastInputLine		677363	1					
ANR	677609	ArgumentList			677363	1					
ANR	677610	IfStatement	if ( filesAreIdentical )		677363	4					
ANR	677611	Condition	filesAreIdentical	609:6:15173:15189	677363	0	True				
ANR	677612	Identifier	filesAreIdentical		677363	0					
ANR	677613	CompoundStatement		54:2:1502:1502	677363	1					
ANR	677614	IfStatement	if ( streamIterator . checkForEmptyLine )		677363	0					
ANR	677615	Condition	streamIterator . checkForEmptyLine	611:7:15203:15234	677363	0	True				
ANR	677616	MemberAccess	streamIterator . checkForEmptyLine		677363	0					
ANR	677617	Identifier	streamIterator		677363	0					
ANR	677618	Identifier	checkForEmptyLine		677363	1					
ANR	677619	CompoundStatement		56:3:1548:1548	677363	1					
ANR	677620	IfStatement	"if ( nextLine . find_first_not_of ( "" \\t"" ) != string :: npos )"		677363	0					
ANR	677621	Condition	"nextLine . find_first_not_of ( "" \\t"" ) != string :: npos"	613:8:15250:15298	677363	0	True				
ANR	677622	EqualityExpression	"nextLine . find_first_not_of ( "" \\t"" ) != string :: npos"		677363	0		!=			
ANR	677623	CallExpression	"nextLine . find_first_not_of ( "" \\t"" )"		677363	0					
ANR	677624	Callee	nextLine . find_first_not_of		677363	0					
ANR	677625	MemberAccess	nextLine . find_first_not_of		677363	0					
ANR	677626	Identifier	nextLine		677363	0					
ANR	677627	Identifier	find_first_not_of		677363	1					
ANR	677628	ArgumentList	""" \\t"""		677363	1					
ANR	677629	Argument	""" \\t"""		677363	0					
ANR	677630	PrimaryExpression	""" \\t"""		677363	0					
ANR	677631	Identifier	string :: npos		677363	1					
ANR	677632	ExpressionStatement	filesAreIdentical = false	614:5:15306:15331	677363	1	True				
ANR	677633	AssignmentExpression	filesAreIdentical = false		677363	0		=			
ANR	677634	Identifier	filesAreIdentical		677363	0					
ANR	677635	Identifier	false		677363	1					
ANR	677636	ElseStatement	else		677363	0					
ANR	677637	IfStatement	if ( ! streamIterator . compareToInputBuffer ( nextLine ) )		677363	0					
ANR	677638	Condition	! streamIterator . compareToInputBuffer ( nextLine )	616:12:15350:15395	677363	0	True				
ANR	677639	UnaryOperationExpression	! streamIterator . compareToInputBuffer ( nextLine )		677363	0					
ANR	677640	UnaryOperator	!		677363	0					
ANR	677641	CallExpression	streamIterator . compareToInputBuffer ( nextLine )		677363	1					
ANR	677642	Callee	streamIterator . compareToInputBuffer		677363	0					
ANR	677643	MemberAccess	streamIterator . compareToInputBuffer		677363	0					
ANR	677644	Identifier	streamIterator		677363	0					
ANR	677645	Identifier	compareToInputBuffer		677363	1					
ANR	677646	ArgumentList	nextLine		677363	1					
ANR	677647	Argument	nextLine		677363	0					
ANR	677648	Identifier	nextLine		677363	0					
ANR	677649	ExpressionStatement	filesAreIdentical = false	617:4:15402:15427	677363	1	True				
ANR	677650	AssignmentExpression	filesAreIdentical = false		677363	0		=			
ANR	677651	Identifier	filesAreIdentical		677363	0					
ANR	677652	Identifier	false		677363	1					
ANR	677653	ExpressionStatement	streamIterator . checkForEmptyLine = false	618:3:15432:15472	677363	1	True				
ANR	677654	AssignmentExpression	streamIterator . checkForEmptyLine = false		677363	0		=			
ANR	677655	MemberAccess	streamIterator . checkForEmptyLine		677363	0					
ANR	677656	Identifier	streamIterator		677363	0					
ANR	677657	Identifier	checkForEmptyLine		677363	1					
ANR	677658	Identifier	false		677363	1					
ANR	677659	IfStatement	if ( lineEndsMixed )		677363	11					
ANR	677660	Condition	lineEndsMixed	622:5:15518:15530	677363	0	True				
ANR	677661	Identifier	lineEndsMixed		677363	0					
ANR	677662	CompoundStatement		67:1:1842:1842	677363	1					
ANR	677663	ExpressionStatement	correctMixedLineEnds ( out )	624:2:15538:15563	677363	0	True				
ANR	677664	CallExpression	correctMixedLineEnds ( out )		677363	0					
ANR	677665	Callee	correctMixedLineEnds		677363	0					
ANR	677666	Identifier	correctMixedLineEnds		677363	0					
ANR	677667	ArgumentList	out		677363	1					
ANR	677668	Argument	out		677363	0					
ANR	677669	Identifier	out		677363	0					
ANR	677670	ExpressionStatement	filesAreIdentical = false	625:2:15567:15592	677363	1	True				
ANR	677671	AssignmentExpression	filesAreIdentical = false		677363	0		=			
ANR	677672	Identifier	filesAreIdentical		677363	0					
ANR	677673	Identifier	false		677363	1					
ANR	677674	IdentifierDeclStatement	string displayName ;	629:1:15661:15679	677363	12	True				
ANR	677675	IdentifierDecl	displayName		677363	0					
ANR	677676	IdentifierDeclType	string		677363	0					
ANR	677677	Identifier	displayName		677363	1					
ANR	677678	IfStatement	if ( hasWildcard )		677363	13					
ANR	677679	Condition	hasWildcard	630:5:15686:15696	677363	0	True				
ANR	677680	Identifier	hasWildcard		677363	0					
ANR	677681	ExpressionStatement	displayName = fileName_ . substr ( targetDirectory . length ( ) + 1 )	631:2:15701:15761	677363	1	True				
ANR	677682	AssignmentExpression	displayName = fileName_ . substr ( targetDirectory . length ( ) + 1 )		677363	0		=			
ANR	677683	Identifier	displayName		677363	0					
ANR	677684	CallExpression	fileName_ . substr ( targetDirectory . length ( ) + 1 )		677363	1					
ANR	677685	Callee	fileName_ . substr		677363	0					
ANR	677686	MemberAccess	fileName_ . substr		677363	0					
ANR	677687	Identifier	fileName_		677363	0					
ANR	677688	Identifier	substr		677363	1					
ANR	677689	ArgumentList	targetDirectory . length ( ) + 1		677363	1					
ANR	677690	Argument	targetDirectory . length ( ) + 1		677363	0					
ANR	677691	AdditiveExpression	targetDirectory . length ( ) + 1		677363	0		+			
ANR	677692	CallExpression	targetDirectory . length ( )		677363	0					
ANR	677693	Callee	targetDirectory . length		677363	0					
ANR	677694	MemberAccess	targetDirectory . length		677363	0					
ANR	677695	Identifier	targetDirectory		677363	0					
ANR	677696	Identifier	length		677363	1					
ANR	677697	ArgumentList			677363	1					
ANR	677698	PrimaryExpression	1		677363	1					
ANR	677699	ElseStatement	else		677363	0					
ANR	677700	ExpressionStatement	displayName = fileName_	633:2:15771:15794	677363	0	True				
ANR	677701	AssignmentExpression	displayName = fileName_		677363	0		=			
ANR	677702	Identifier	displayName		677363	0					
ANR	677703	Identifier	fileName_		677363	1					
ANR	677704	IfStatement	if ( ! filesAreIdentical || streamIterator . getLineEndChange ( lineEndFormat ) )		677363	14					
ANR	677705	Condition	! filesAreIdentical || streamIterator . getLineEndChange ( lineEndFormat )	636:5:15846:15913	677363	0	True				
ANR	677706	OrExpression	! filesAreIdentical || streamIterator . getLineEndChange ( lineEndFormat )		677363	0		||			
ANR	677707	UnaryOperationExpression	! filesAreIdentical		677363	0					
ANR	677708	UnaryOperator	!		677363	0					
ANR	677709	Identifier	filesAreIdentical		677363	1					
ANR	677710	CallExpression	streamIterator . getLineEndChange ( lineEndFormat )		677363	1					
ANR	677711	Callee	streamIterator . getLineEndChange		677363	0					
ANR	677712	MemberAccess	streamIterator . getLineEndChange		677363	0					
ANR	677713	Identifier	streamIterator		677363	0					
ANR	677714	Identifier	getLineEndChange		677363	1					
ANR	677715	ArgumentList	lineEndFormat		677363	1					
ANR	677716	Argument	lineEndFormat		677363	0					
ANR	677717	Identifier	lineEndFormat		677363	0					
ANR	677718	CompoundStatement		81:1:2225:2225	677363	1					
ANR	677719	IfStatement	if ( ! isDryRun )		677363	0					
ANR	677720	Condition	! isDryRun	638:6:15925:15933	677363	0	True				
ANR	677721	UnaryOperationExpression	! isDryRun		677363	0					
ANR	677722	UnaryOperator	!		677363	0					
ANR	677723	Identifier	isDryRun		677363	1					
ANR	677724	ExpressionStatement	"writeFile ( fileName_ , encoding , out )"	639:3:15939:15974	677363	1	True				
ANR	677725	CallExpression	"writeFile ( fileName_ , encoding , out )"		677363	0					
ANR	677726	Callee	writeFile		677363	0					
ANR	677727	Identifier	writeFile		677363	0					
ANR	677728	ArgumentList	fileName_		677363	1					
ANR	677729	Argument	fileName_		677363	0					
ANR	677730	Identifier	fileName_		677363	0					
ANR	677731	Argument	encoding		677363	1					
ANR	677732	Identifier	encoding		677363	0					
ANR	677733	Argument	out		677363	2					
ANR	677734	Identifier	out		677363	0					
ANR	677735	ExpressionStatement	"printMsg ( _ ( ""Formatted  %s\\n"" ) , displayName )"	640:2:15978:16021	677363	1	True				
ANR	677736	CallExpression	"printMsg ( _ ( ""Formatted  %s\\n"" ) , displayName )"		677363	0					
ANR	677737	Callee	printMsg		677363	0					
ANR	677738	Identifier	printMsg		677363	0					
ANR	677739	ArgumentList	"_ ( ""Formatted  %s\\n"" )"		677363	1					
ANR	677740	Argument	"_ ( ""Formatted  %s\\n"" )"		677363	0					
ANR	677741	CallExpression	"_ ( ""Formatted  %s\\n"" )"		677363	0					
ANR	677742	Callee	_		677363	0					
ANR	677743	Identifier	_		677363	0					
ANR	677744	ArgumentList	"""Formatted  %s\\n"""		677363	1					
ANR	677745	Argument	"""Formatted  %s\\n"""		677363	0					
ANR	677746	PrimaryExpression	"""Formatted  %s\\n"""		677363	0					
ANR	677747	Argument	displayName		677363	1					
ANR	677748	Identifier	displayName		677363	0					
ANR	677749	ExpressionStatement	filesFormatted ++	641:2:16025:16041	677363	2	True				
ANR	677750	PostIncDecOperationExpression	filesFormatted ++		677363	0					
ANR	677751	Identifier	filesFormatted		677363	0					
ANR	677752	IncDec	++		677363	1					
ANR	677753	ElseStatement	else		677363	0					
ANR	677754	CompoundStatement		88:1:2361:2361	677363	0					
ANR	677755	IfStatement	if ( ! isFormattedOnly )		677363	0					
ANR	677756	Condition	! isFormattedOnly	645:6:16061:16076	677363	0	True				
ANR	677757	UnaryOperationExpression	! isFormattedOnly		677363	0					
ANR	677758	UnaryOperator	!		677363	0					
ANR	677759	Identifier	isFormattedOnly		677363	1					
ANR	677760	ExpressionStatement	"printMsg ( _ ( ""Unchanged  %s\\n"" ) , displayName )"	646:3:16082:16125	677363	1	True				
ANR	677761	CallExpression	"printMsg ( _ ( ""Unchanged  %s\\n"" ) , displayName )"		677363	0					
ANR	677762	Callee	printMsg		677363	0					
ANR	677763	Identifier	printMsg		677363	0					
ANR	677764	ArgumentList	"_ ( ""Unchanged  %s\\n"" )"		677363	1					
ANR	677765	Argument	"_ ( ""Unchanged  %s\\n"" )"		677363	0					
ANR	677766	CallExpression	"_ ( ""Unchanged  %s\\n"" )"		677363	0					
ANR	677767	Callee	_		677363	0					
ANR	677768	Identifier	_		677363	0					
ANR	677769	ArgumentList	"""Unchanged  %s\\n"""		677363	1					
ANR	677770	Argument	"""Unchanged  %s\\n"""		677363	0					
ANR	677771	PrimaryExpression	"""Unchanged  %s\\n"""		677363	0					
ANR	677772	Argument	displayName		677363	1					
ANR	677773	Identifier	displayName		677363	0					
ANR	677774	ExpressionStatement	filesUnchanged ++	647:2:16129:16145	677363	1	True				
ANR	677775	PostIncDecOperationExpression	filesUnchanged ++		677363	0					
ANR	677776	Identifier	filesUnchanged		677363	0					
ANR	677777	IncDec	++		677363	1					
ANR	677778	ExpressionStatement	assert ( formatter . getChecksumDiff ( ) == 0 )	650:1:16152:16192	677363	15	True				
ANR	677779	CallExpression	assert ( formatter . getChecksumDiff ( ) == 0 )		677363	0					
ANR	677780	Callee	assert		677363	0					
ANR	677781	Identifier	assert		677363	0					
ANR	677782	ArgumentList	formatter . getChecksumDiff ( ) == 0		677363	1					
ANR	677783	Argument	formatter . getChecksumDiff ( ) == 0		677363	0					
ANR	677784	EqualityExpression	formatter . getChecksumDiff ( ) == 0		677363	0		==			
ANR	677785	CallExpression	formatter . getChecksumDiff ( )		677363	0					
ANR	677786	Callee	formatter . getChecksumDiff		677363	0					
ANR	677787	MemberAccess	formatter . getChecksumDiff		677363	0					
ANR	677788	Identifier	formatter		677363	0					
ANR	677789	Identifier	getChecksumDiff		677363	1					
ANR	677790	ArgumentList			677363	1					
ANR	677791	PrimaryExpression	0		677363	1					
ANR	677792	ReturnType	void		677363	1					
ANR	677793	Identifier	ASConsole :: formatFile		677363	2					
ANR	677794	ParameterList	const string & fileName_		677363	3					
ANR	677795	Parameter	const string & fileName_	556:27:13666:13688	677363	0	True				
ANR	677796	ParameterType	const string &		677363	0					
ANR	677797	Identifier	fileName_		677363	1					
ANR	677798	CFGEntryNode	ENTRY		677363		True				
ANR	677799	CFGExitNode	EXIT		677363		True				
ANR	677800	Symbol	string		677363						
ANR	677801	Symbol	displayName		677363						
ANR	677802	Symbol	targetDirectory		677363						
ANR	677803	Symbol	formatter . getModeManuallySet		677363						
ANR	677804	Symbol	string :: npos		677363						
ANR	677805	Symbol	fileName_		677363						
ANR	677806	Symbol	fileName_ . substr		677363						
ANR	677807	Symbol	stringEndsWith		677363						
ANR	677808	Symbol	out		677363						
ANR	677809	Symbol	filesUnchanged		677363						
ANR	677810	Symbol	streamIterator . compareToInputBuffer		677363						
ANR	677811	Symbol	formatter . nextLine		677363						
ANR	677812	Symbol	streamIterator . checkForEmptyLine		677363						
ANR	677813	Symbol	streamIterator . getOutputEOL		677363						
ANR	677814	Symbol	lineEndFormat		677363						
ANR	677815	Symbol	isFormattedOnly		677363						
ANR	677816	Symbol	_		677363						
ANR	677817	Symbol	formatter . hasMoreLines		677363						
ANR	677818	Symbol	in		677363						
ANR	677819	Symbol	nextLine		677363						
ANR	677820	Symbol	linesOut		677363						
ANR	677821	Symbol	false		677363						
ANR	677822	Symbol	formatter . getIsLineReady		677363						
ANR	677823	Symbol	streamIterator		677363						
ANR	677824	Symbol	filesAreIdentical		677363						
ANR	677825	Symbol	encoding		677363						
ANR	677826	Symbol	formatter		677363						
ANR	677827	Symbol	& streamIterator		677363						
ANR	677828	Symbol	formatter . getLineEndFormat		677363						
ANR	677829	Symbol	targetDirectory . length		677363						
ANR	677830	Symbol	readFile		677363						
ANR	677831	Symbol	streamIterator . getLineEndChange		677363						
ANR	677832	Symbol	filesFormatted		677363						
ANR	677833	Symbol	true		677363						
ANR	677834	Symbol	formatter . getChecksumDiff		677363						
ANR	677835	Symbol	nextLine . find_first_not_of		677363						
ANR	677836	Symbol	isDryRun		677363						
ANR	677837	Symbol	hasWildcard		677363						
ANR	677838	Symbol	lineEndsMixed		677363						
ANR	677839	Function	ASConsole :: getArgvOptions	655:0:16271:16476							
ANR	677840	FunctionDef	"ASConsole :: getArgvOptions (int argc , char * * argv)"		677839	0					
ANR	677841	CompoundStatement		656:0:16341:16476	677839	0					
ANR	677842	IdentifierDeclStatement	vector < string > argvOptions ;	657:1:16344:16370	677839	0	True				
ANR	677843	IdentifierDecl	argvOptions		677839	0					
ANR	677844	IdentifierDeclType	vector < string >		677839	0					
ANR	677845	Identifier	argvOptions		677839	1					
ANR	677846	ForStatement	for ( int i = 1 ; i < argc ; i ++ )		677839	1					
ANR	677847	ForInit	int i = 1 ;	658:6:16378:16387	677839	0	True				
ANR	677848	IdentifierDeclStatement	int i = 1 ;		677839	0					
ANR	677849	IdentifierDecl	i = 1		677839	0					
ANR	677850	IdentifierDeclType	int		677839	0					
ANR	677851	Identifier	i		677839	1					
ANR	677852	AssignmentExpression	i = 1		677839	2		=			
ANR	677853	Identifier	i		677839	0					
ANR	677854	PrimaryExpression	1		677839	1					
ANR	677855	Condition	i < argc	658:17:16389:16396	677839	1	True				
ANR	677856	RelationalExpression	i < argc		677839	0		<			
ANR	677857	Identifier	i		677839	0					
ANR	677858	Identifier	argc		677839	1					
ANR	677859	PostIncDecOperationExpression	i ++	658:27:16399:16401	677839	2	True				
ANR	677860	Identifier	i		677839	0					
ANR	677861	IncDec	++		677839	1					
ANR	677862	CompoundStatement		4:1:63:63	677839	3					
ANR	677863	ExpressionStatement	argvOptions . emplace_back ( string ( argv [ i ] ) )	660:2:16409:16450	677839	0	True				
ANR	677864	CallExpression	argvOptions . emplace_back ( string ( argv [ i ] ) )		677839	0					
ANR	677865	Callee	argvOptions . emplace_back		677839	0					
ANR	677866	MemberAccess	argvOptions . emplace_back		677839	0					
ANR	677867	Identifier	argvOptions		677839	0					
ANR	677868	Identifier	emplace_back		677839	1					
ANR	677869	ArgumentList	string ( argv [ i ] )		677839	1					
ANR	677870	Argument	string ( argv [ i ] )		677839	0					
ANR	677871	CallExpression	string ( argv [ i ] )		677839	0					
ANR	677872	Callee	string		677839	0					
ANR	677873	Identifier	string		677839	0					
ANR	677874	ArgumentList	argv [ i ]		677839	1					
ANR	677875	Argument	argv [ i ]		677839	0					
ANR	677876	ArrayIndexing	argv [ i ]		677839	0					
ANR	677877	Identifier	argv		677839	0					
ANR	677878	Identifier	i		677839	1					
ANR	677879	ReturnStatement	return argvOptions ;	662:1:16456:16474	677839	2	True				
ANR	677880	Identifier	argvOptions		677839	0					
ANR	677881	ReturnType	vector < string >		677839	1					
ANR	677882	Identifier	ASConsole :: getArgvOptions		677839	2					
ANR	677883	ParameterList	"int argc , char * * argv"		677839	3					
ANR	677884	Parameter	int argc	655:41:16312:16319	677839	0	True				
ANR	677885	ParameterType	int		677839	0					
ANR	677886	Identifier	argc		677839	1					
ANR	677887	Parameter	char * * argv	655:51:16322:16332	677839	1	True				
ANR	677888	ParameterType	char * *		677839	0					
ANR	677889	Identifier	argv		677839	1					
ANR	677890	CFGEntryNode	ENTRY		677839		True				
ANR	677891	CFGExitNode	EXIT		677839		True				
ANR	677892	Symbol	argc		677839						
ANR	677893	Symbol	argvOptions		677839						
ANR	677894	Symbol	* i		677839						
ANR	677895	Symbol	string		677839						
ANR	677896	Symbol	i		677839						
ANR	677897	Symbol	* argv		677839						
ANR	677898	Symbol	argv		677839						
ANR	677899	Function	ASConsole :: getExcludeHitsVector	666:0:16499:16580							
ANR	677900	FunctionDef	ASConsole :: getExcludeHitsVector ()		677899	0					
ANR	677901	CompoundStatement		667:0:16552:16580	677899	0					
ANR	677902	ReturnStatement	return excludeHitsVector ;	667:1:16554:16578	677899	0	True				
ANR	677903	Identifier	excludeHitsVector		677899	0					
ANR	677904	ReturnType	vector < bool >		677899	1					
ANR	677905	Identifier	ASConsole :: getExcludeHitsVector		677899	2					
ANR	677906	ParameterList			677899	3					
ANR	677907	CFGEntryNode	ENTRY		677899		True				
ANR	677908	CFGExitNode	EXIT		677899		True				
ANR	677909	Symbol	excludeHitsVector		677899						
ANR	677910	Function	ASConsole :: getExcludeVector	670:0:16603:16678							
ANR	677911	FunctionDef	ASConsole :: getExcludeVector ()		677910	0					
ANR	677912	CompoundStatement		671:0:16654:16678	677910	0					
ANR	677913	ReturnStatement	return excludeVector ;	671:1:16656:16676	677910	0	True				
ANR	677914	Identifier	excludeVector		677910	0					
ANR	677915	ReturnType	vector < string >		677910	1					
ANR	677916	Identifier	ASConsole :: getExcludeVector		677910	2					
ANR	677917	ParameterList			677910	3					
ANR	677918	CFGEntryNode	ENTRY		677910		True				
ANR	677919	CFGExitNode	EXIT		677910		True				
ANR	677920	Symbol	excludeVector		677910						
ANR	677921	Function	ASConsole :: getFileName	674:0:16701:16766							
ANR	677922	FunctionDef	ASConsole :: getFileName ()		677921	0					
ANR	677923	CompoundStatement		675:0:16747:16766	677921	0					
ANR	677924	ReturnStatement	return fileName ;	675:1:16749:16764	677921	0	True				
ANR	677925	Identifier	fileName		677921	0					
ANR	677926	ReturnType	vector < string >		677921	1					
ANR	677927	Identifier	ASConsole :: getFileName		677921	2					
ANR	677928	ParameterList			677921	3					
ANR	677929	CFGEntryNode	ENTRY		677921		True				
ANR	677930	CFGExitNode	EXIT		677921		True				
ANR	677931	Symbol	fileName		677921						
ANR	677932	Function	ASConsole :: getFileNameVector	678:0:16789:16866							
ANR	677933	FunctionDef	ASConsole :: getFileNameVector ()		677932	0					
ANR	677934	CompoundStatement		679:0:16841:16866	677932	0					
ANR	677935	ReturnStatement	return fileNameVector ;	679:1:16843:16864	677932	0	True				
ANR	677936	Identifier	fileNameVector		677932	0					
ANR	677937	ReturnType	vector < string >		677932	1					
ANR	677938	Identifier	ASConsole :: getFileNameVector		677932	2					
ANR	677939	ParameterList			677932	3					
ANR	677940	CFGEntryNode	ENTRY		677932		True				
ANR	677941	CFGExitNode	EXIT		677932		True				
ANR	677942	Symbol	fileNameVector		677932						
ANR	677943	Function	ASConsole :: getFileOptionsVector	682:0:16889:16972							
ANR	677944	FunctionDef	ASConsole :: getFileOptionsVector ()		677943	0					
ANR	677945	CompoundStatement		683:0:16944:16972	677943	0					
ANR	677946	ReturnStatement	return fileOptionsVector ;	683:1:16946:16970	677943	0	True				
ANR	677947	Identifier	fileOptionsVector		677943	0					
ANR	677948	ReturnType	vector < string >		677943	1					
ANR	677949	Identifier	ASConsole :: getFileOptionsVector		677943	2					
ANR	677950	ParameterList			677943	3					
ANR	677951	CFGEntryNode	ENTRY		677943		True				
ANR	677952	CFGExitNode	EXIT		677943		True				
ANR	677953	Symbol	fileOptionsVector		677943						
ANR	677954	Function	ASConsole :: getFilesAreIdentical	686:0:16995:17068							
ANR	677955	FunctionDef	ASConsole :: getFilesAreIdentical ()		677954	0					
ANR	677956	CompoundStatement		687:0:17040:17068	677954	0					
ANR	677957	ReturnStatement	return filesAreIdentical ;	687:1:17042:17066	677954	0	True				
ANR	677958	Identifier	filesAreIdentical		677954	0					
ANR	677959	ReturnType	bool		677954	1					
ANR	677960	Identifier	ASConsole :: getFilesAreIdentical		677954	2					
ANR	677961	ParameterList			677954	3					
ANR	677962	CFGEntryNode	ENTRY		677954		True				
ANR	677963	CFGExitNode	EXIT		677954		True				
ANR	677964	Symbol	filesAreIdentical		677954						
ANR	677965	Function	ASConsole :: getFilesFormatted	690:0:17091:17157							
ANR	677966	FunctionDef	ASConsole :: getFilesFormatted ()		677965	0					
ANR	677967	CompoundStatement		691:0:17132:17157	677965	0					
ANR	677968	ReturnStatement	return filesFormatted ;	691:1:17134:17155	677965	0	True				
ANR	677969	Identifier	filesFormatted		677965	0					
ANR	677970	ReturnType	int		677965	1					
ANR	677971	Identifier	ASConsole :: getFilesFormatted		677965	2					
ANR	677972	ParameterList			677965	3					
ANR	677973	CFGEntryNode	ENTRY		677965		True				
ANR	677974	CFGExitNode	EXIT		677965		True				
ANR	677975	Symbol	filesFormatted		677965						
ANR	677976	Function	ASConsole :: getIgnoreExcludeErrors	694:0:17180:17257							
ANR	677977	FunctionDef	ASConsole :: getIgnoreExcludeErrors ()		677976	0					
ANR	677978	CompoundStatement		695:0:17227:17257	677976	0					
ANR	677979	ReturnStatement	return ignoreExcludeErrors ;	695:1:17229:17255	677976	0	True				
ANR	677980	Identifier	ignoreExcludeErrors		677976	0					
ANR	677981	ReturnType	bool		677976	1					
ANR	677982	Identifier	ASConsole :: getIgnoreExcludeErrors		677976	2					
ANR	677983	ParameterList			677976	3					
ANR	677984	CFGEntryNode	ENTRY		677976		True				
ANR	677985	CFGExitNode	EXIT		677976		True				
ANR	677986	Symbol	ignoreExcludeErrors		677976						
ANR	677987	Function	ASConsole :: getIgnoreExcludeErrorsDisplay	698:0:17280:17371							
ANR	677988	FunctionDef	ASConsole :: getIgnoreExcludeErrorsDisplay ()		677987	0					
ANR	677989	CompoundStatement		699:0:17334:17371	677987	0					
ANR	677990	ReturnStatement	return ignoreExcludeErrorsDisplay ;	699:1:17336:17369	677987	0	True				
ANR	677991	Identifier	ignoreExcludeErrorsDisplay		677987	0					
ANR	677992	ReturnType	bool		677987	1					
ANR	677993	Identifier	ASConsole :: getIgnoreExcludeErrorsDisplay		677987	2					
ANR	677994	ParameterList			677987	3					
ANR	677995	CFGEntryNode	ENTRY		677987		True				
ANR	677996	CFGExitNode	EXIT		677987		True				
ANR	677997	Symbol	ignoreExcludeErrorsDisplay		677987						
ANR	677998	Function	ASConsole :: getIsDryRun	702:0:17394:17449							
ANR	677999	FunctionDef	ASConsole :: getIsDryRun ()		677998	0					
ANR	678000	CompoundStatement		703:0:17430:17449	677998	0					
ANR	678001	ReturnStatement	return isDryRun ;	703:1:17432:17447	677998	0	True				
ANR	678002	Identifier	isDryRun		677998	0					
ANR	678003	ReturnType	bool		677998	1					
ANR	678004	Identifier	ASConsole :: getIsDryRun		677998	2					
ANR	678005	ParameterList			677998	3					
ANR	678006	CFGEntryNode	ENTRY		677998		True				
ANR	678007	CFGExitNode	EXIT		677998		True				
ANR	678008	Symbol	isDryRun		677998						
ANR	678009	Function	ASConsole :: getIsFormattedOnly	706:0:17472:17541							
ANR	678010	FunctionDef	ASConsole :: getIsFormattedOnly ()		678009	0					
ANR	678011	CompoundStatement		707:0:17515:17541	678009	0					
ANR	678012	ReturnStatement	return isFormattedOnly ;	707:1:17517:17539	678009	0	True				
ANR	678013	Identifier	isFormattedOnly		678009	0					
ANR	678014	ReturnType	bool		678009	1					
ANR	678015	Identifier	ASConsole :: getIsFormattedOnly		678009	2					
ANR	678016	ParameterList			678009	3					
ANR	678017	CFGEntryNode	ENTRY		678009		True				
ANR	678018	CFGExitNode	EXIT		678009		True				
ANR	678019	Symbol	isFormattedOnly		678009						
ANR	678020	Function	ASConsole :: getLanguageID	710:0:17564:17640							
ANR	678021	FunctionDef	ASConsole :: getLanguageID ()		678020	0					
ANR	678022	CompoundStatement		711:0:17604:17640	678020	0					
ANR	678023	ReturnStatement	return localizer . getLanguageID ( ) ;	711:1:17606:17638	678020	0	True				
ANR	678024	CallExpression	localizer . getLanguageID ( )		678020	0					
ANR	678025	Callee	localizer . getLanguageID		678020	0					
ANR	678026	MemberAccess	localizer . getLanguageID		678020	0					
ANR	678027	Identifier	localizer		678020	0					
ANR	678028	Identifier	getLanguageID		678020	1					
ANR	678029	ArgumentList			678020	1					
ANR	678030	ReturnType	string		678020	1					
ANR	678031	Identifier	ASConsole :: getLanguageID		678020	2					
ANR	678032	ParameterList			678020	3					
ANR	678033	CFGEntryNode	ENTRY		678020		True				
ANR	678034	CFGExitNode	EXIT		678020		True				
ANR	678035	Symbol	localizer . getLanguageID		678020						
ANR	678036	Symbol	localizer		678020						
ANR	678037	Function	ASConsole :: getIsQuiet	714:0:17663:17716							
ANR	678038	FunctionDef	ASConsole :: getIsQuiet ()		678037	0					
ANR	678039	CompoundStatement		715:0:17698:17716	678037	0					
ANR	678040	ReturnStatement	return isQuiet ;	715:1:17700:17714	678037	0	True				
ANR	678041	Identifier	isQuiet		678037	0					
ANR	678042	ReturnType	bool		678037	1					
ANR	678043	Identifier	ASConsole :: getIsQuiet		678037	2					
ANR	678044	ParameterList			678037	3					
ANR	678045	CFGEntryNode	ENTRY		678037		True				
ANR	678046	CFGExitNode	EXIT		678037		True				
ANR	678047	Symbol	isQuiet		678037						
ANR	678048	Function	ASConsole :: getIsRecursive	718:0:17739:17800							
ANR	678049	FunctionDef	ASConsole :: getIsRecursive ()		678048	0					
ANR	678050	CompoundStatement		719:0:17778:17800	678048	0					
ANR	678051	ReturnStatement	return isRecursive ;	719:1:17780:17798	678048	0	True				
ANR	678052	Identifier	isRecursive		678048	0					
ANR	678053	ReturnType	bool		678048	1					
ANR	678054	Identifier	ASConsole :: getIsRecursive		678048	2					
ANR	678055	ParameterList			678048	3					
ANR	678056	CFGEntryNode	ENTRY		678048		True				
ANR	678057	CFGExitNode	EXIT		678048		True				
ANR	678058	Symbol	isRecursive		678048						
ANR	678059	Function	ASConsole :: getIsVerbose	722:0:17823:17880							
ANR	678060	FunctionDef	ASConsole :: getIsVerbose ()		678059	0					
ANR	678061	CompoundStatement		723:0:17860:17880	678059	0					
ANR	678062	ReturnStatement	return isVerbose ;	723:1:17862:17878	678059	0	True				
ANR	678063	Identifier	isVerbose		678059	0					
ANR	678064	ReturnType	bool		678059	1					
ANR	678065	Identifier	ASConsole :: getIsVerbose		678059	2					
ANR	678066	ParameterList			678059	3					
ANR	678067	CFGEntryNode	ENTRY		678059		True				
ANR	678068	CFGExitNode	EXIT		678059		True				
ANR	678069	Symbol	isVerbose		678059						
ANR	678070	Function	ASConsole :: getLineEndsMixed	726:0:17903:17968							
ANR	678071	FunctionDef	ASConsole :: getLineEndsMixed ()		678070	0					
ANR	678072	CompoundStatement		727:0:17944:17968	678070	0					
ANR	678073	ReturnStatement	return lineEndsMixed ;	727:1:17946:17966	678070	0	True				
ANR	678074	Identifier	lineEndsMixed		678070	0					
ANR	678075	ReturnType	bool		678070	1					
ANR	678076	Identifier	ASConsole :: getLineEndsMixed		678070	2					
ANR	678077	ParameterList			678070	3					
ANR	678078	CFGEntryNode	ENTRY		678070		True				
ANR	678079	CFGExitNode	EXIT		678070		True				
ANR	678080	Symbol	lineEndsMixed		678070						
ANR	678081	Function	ASConsole :: getNoBackup	730:0:17991:18046							
ANR	678082	FunctionDef	ASConsole :: getNoBackup ()		678081	0					
ANR	678083	CompoundStatement		731:0:18027:18046	678081	0					
ANR	678084	ReturnStatement	return noBackup ;	731:1:18029:18044	678081	0	True				
ANR	678085	Identifier	noBackup		678081	0					
ANR	678086	ReturnType	bool		678081	1					
ANR	678087	Identifier	ASConsole :: getNoBackup		678081	2					
ANR	678088	ParameterList			678081	3					
ANR	678089	CFGEntryNode	ENTRY		678081		True				
ANR	678090	CFGExitNode	EXIT		678081		True				
ANR	678091	Symbol	noBackup		678081						
ANR	678092	Function	ASConsole :: getOptionsFileName	734:0:18069:18140							
ANR	678093	FunctionDef	ASConsole :: getOptionsFileName ()		678092	0					
ANR	678094	CompoundStatement		735:0:18114:18140	678092	0					
ANR	678095	ReturnStatement	return optionsFileName ;	735:1:18116:18138	678092	0	True				
ANR	678096	Identifier	optionsFileName		678092	0					
ANR	678097	ReturnType	string		678092	1					
ANR	678098	Identifier	ASConsole :: getOptionsFileName		678092	2					
ANR	678099	ParameterList			678092	3					
ANR	678100	CFGEntryNode	ENTRY		678092		True				
ANR	678101	CFGExitNode	EXIT		678092		True				
ANR	678102	Symbol	optionsFileName		678092						
ANR	678103	Function	ASConsole :: getOptionsVector	738:0:18163:18238							
ANR	678104	FunctionDef	ASConsole :: getOptionsVector ()		678103	0					
ANR	678105	CompoundStatement		739:0:18214:18238	678103	0					
ANR	678106	ReturnStatement	return optionsVector ;	739:1:18216:18236	678103	0	True				
ANR	678107	Identifier	optionsVector		678103	0					
ANR	678108	ReturnType	vector < string >		678103	1					
ANR	678109	Identifier	ASConsole :: getOptionsVector		678103	2					
ANR	678110	ParameterList			678103	3					
ANR	678111	CFGEntryNode	ENTRY		678103		True				
ANR	678112	CFGExitNode	EXIT		678103		True				
ANR	678113	Symbol	optionsVector		678103						
ANR	678114	Function	ASConsole :: getOrigSuffix	742:0:18261:18322							
ANR	678115	FunctionDef	ASConsole :: getOrigSuffix ()		678114	0					
ANR	678116	CompoundStatement		743:0:18301:18322	678114	0					
ANR	678117	ReturnStatement	return origSuffix ;	743:1:18303:18320	678114	0	True				
ANR	678118	Identifier	origSuffix		678114	0					
ANR	678119	ReturnType	string		678114	1					
ANR	678120	Identifier	ASConsole :: getOrigSuffix		678114	2					
ANR	678121	ParameterList			678114	3					
ANR	678122	CFGEntryNode	ENTRY		678114		True				
ANR	678123	CFGExitNode	EXIT		678114		True				
ANR	678124	Symbol	origSuffix		678114						
ANR	678125	Function	ASConsole :: getPreserveDate	746:0:18345:18408							
ANR	678126	FunctionDef	ASConsole :: getPreserveDate ()		678125	0					
ANR	678127	CompoundStatement		747:0:18385:18408	678125	0					
ANR	678128	ReturnStatement	return preserveDate ;	747:1:18387:18406	678125	0	True				
ANR	678129	Identifier	preserveDate		678125	0					
ANR	678130	ReturnType	bool		678125	1					
ANR	678131	Identifier	ASConsole :: getPreserveDate		678125	2					
ANR	678132	ParameterList			678125	3					
ANR	678133	CFGEntryNode	ENTRY		678125		True				
ANR	678134	CFGExitNode	EXIT		678125		True				
ANR	678135	Symbol	preserveDate		678125						
ANR	678136	Function	ASConsole :: getStdPathIn	750:0:18431:18490							
ANR	678137	FunctionDef	ASConsole :: getStdPathIn ()		678136	0					
ANR	678138	CompoundStatement		751:0:18470:18490	678136	0					
ANR	678139	ReturnStatement	return stdPathIn ;	751:1:18472:18488	678136	0	True				
ANR	678140	Identifier	stdPathIn		678136	0					
ANR	678141	ReturnType	string		678136	1					
ANR	678142	Identifier	ASConsole :: getStdPathIn		678136	2					
ANR	678143	ParameterList			678136	3					
ANR	678144	CFGEntryNode	ENTRY		678136		True				
ANR	678145	CFGExitNode	EXIT		678136		True				
ANR	678146	Symbol	stdPathIn		678136						
ANR	678147	Function	ASConsole :: getStdPathOut	754:0:18513:18574							
ANR	678148	FunctionDef	ASConsole :: getStdPathOut ()		678147	0					
ANR	678149	CompoundStatement		755:0:18553:18574	678147	0					
ANR	678150	ReturnStatement	return stdPathOut ;	755:1:18555:18572	678147	0	True				
ANR	678151	Identifier	stdPathOut		678147	0					
ANR	678152	ReturnType	string		678147	1					
ANR	678153	Identifier	ASConsole :: getStdPathOut		678147	2					
ANR	678154	ParameterList			678147	3					
ANR	678155	CFGEntryNode	ENTRY		678147		True				
ANR	678156	CFGExitNode	EXIT		678147		True				
ANR	678157	Symbol	stdPathOut		678147						
ANR	678158	Function	ASConsole :: setBypassBrowserOpen	758:0:18597:18675							
ANR	678159	FunctionDef	ASConsole :: setBypassBrowserOpen (bool state)		678158	0					
ANR	678160	CompoundStatement		759:0:18646:18675	678158	0					
ANR	678161	ExpressionStatement	bypassBrowserOpen = state	759:1:18648:18673	678158	0	True				
ANR	678162	AssignmentExpression	bypassBrowserOpen = state		678158	0		=			
ANR	678163	Identifier	bypassBrowserOpen		678158	0					
ANR	678164	Identifier	state		678158	1					
ANR	678165	ReturnType	void		678158	1					
ANR	678166	Identifier	ASConsole :: setBypassBrowserOpen		678158	2					
ANR	678167	ParameterList	bool state		678158	3					
ANR	678168	Parameter	bool state	758:37:18634:18643	678158	0	True				
ANR	678169	ParameterType	bool		678158	0					
ANR	678170	Identifier	state		678158	1					
ANR	678171	CFGEntryNode	ENTRY		678158		True				
ANR	678172	CFGExitNode	EXIT		678158		True				
ANR	678173	Symbol	bypassBrowserOpen		678158						
ANR	678174	Symbol	state		678158						
ANR	678175	Function	ASConsole :: getErrorStream	762:0:18698:18764							
ANR	678176	FunctionDef	ASConsole :: getErrorStream ()		678175	0					
ANR	678177	CompoundStatement		763:0:18741:18764	678175	0					
ANR	678178	ReturnStatement	return errorStream ;	764:1:18744:18762	678175	0	True				
ANR	678179	Identifier	errorStream		678175	0					
ANR	678180	ReturnType	ostream *		678175	1					
ANR	678181	Identifier	ASConsole :: getErrorStream		678175	2					
ANR	678182	ParameterList			678175	3					
ANR	678183	CFGEntryNode	ENTRY		678175		True				
ANR	678184	CFGExitNode	EXIT		678175		True				
ANR	678185	Symbol	errorStream		678175						
ANR	678186	Function	ASConsole :: setErrorStream	767:0:18767:18852							
ANR	678187	FunctionDef	ASConsole :: setErrorStream (ostream * errStreamPtr)		678186	0					
ANR	678188	CompoundStatement		768:0:18821:18852	678186	0					
ANR	678189	ExpressionStatement	errorStream = errStreamPtr	769:1:18824:18850	678186	0	True				
ANR	678190	AssignmentExpression	errorStream = errStreamPtr		678186	0		=			
ANR	678191	Identifier	errorStream		678186	0					
ANR	678192	Identifier	errStreamPtr		678186	1					
ANR	678193	ReturnType	void		678186	1					
ANR	678194	Identifier	ASConsole :: setErrorStream		678186	2					
ANR	678195	ParameterList	ostream * errStreamPtr		678186	3					
ANR	678196	Parameter	ostream * errStreamPtr	767:31:18798:18818	678186	0	True				
ANR	678197	ParameterType	ostream *		678186	0					
ANR	678198	Identifier	errStreamPtr		678186	1					
ANR	678199	CFGEntryNode	ENTRY		678186		True				
ANR	678200	CFGExitNode	EXIT		678186		True				
ANR	678201	Symbol	errorStream		678186						
ANR	678202	Symbol	errStreamPtr		678186						
ANR	678203	Function	ASConsole :: getParam	772:0:18855:18951							
ANR	678204	FunctionDef	"ASConsole :: getParam (const string & arg , const char * op)"		678203	0					
ANR	678205	CompoundStatement		773:0:18917:18951	678203	0					
ANR	678206	ReturnStatement	return arg . substr ( strlen ( op ) ) ;	774:1:18920:18949	678203	0	True				
ANR	678207	CallExpression	arg . substr ( strlen ( op ) )		678203	0					
ANR	678208	Callee	arg . substr		678203	0					
ANR	678209	MemberAccess	arg . substr		678203	0					
ANR	678210	Identifier	arg		678203	0					
ANR	678211	Identifier	substr		678203	1					
ANR	678212	ArgumentList	strlen ( op )		678203	1					
ANR	678213	Argument	strlen ( op )		678203	0					
ANR	678214	CallExpression	strlen ( op )		678203	0					
ANR	678215	Callee	strlen		678203	0					
ANR	678216	Identifier	strlen		678203	0					
ANR	678217	ArgumentList	op		678203	1					
ANR	678218	Argument	op		678203	0					
ANR	678219	Identifier	op		678203	0					
ANR	678220	ReturnType	string		678203	1					
ANR	678221	Identifier	ASConsole :: getParam		678203	2					
ANR	678222	ParameterList	"const string & arg , const char * op"		678203	3					
ANR	678223	Parameter	const string & arg	772:27:18882:18898	678203	0	True				
ANR	678224	ParameterType	const string &		678203	0					
ANR	678225	Identifier	arg		678203	1					
ANR	678226	Parameter	const char * op	772:46:18901:18914	678203	1	True				
ANR	678227	ParameterType	const char *		678203	0					
ANR	678228	Identifier	op		678203	1					
ANR	678229	CFGEntryNode	ENTRY		678203		True				
ANR	678230	CFGExitNode	EXIT		678203		True				
ANR	678231	Symbol	op		678203						
ANR	678232	Symbol	strlen		678203						
ANR	678233	Symbol	arg . substr		678203						
ANR	678234	Symbol	arg		678203						
ANR	678235	Function	ASConsole :: initializeOutputEOL	778:0:18987:19601							
ANR	678236	FunctionDef	ASConsole :: initializeOutputEOL (LineEndFormat lineEndFormat)		678235	0					
ANR	678237	CompoundStatement		779:0:19052:19601	678235	0					
ANR	678238	ExpressionStatement	assert ( lineEndFormat == LINEEND_DEFAULT || lineEndFormat == LINEEND_WINDOWS || lineEndFormat == LINEEND_LINUX || lineEndFormat == LINEEND_MACOLD )	780:1:19055:19224	678235	0	True				
ANR	678239	CallExpression	assert ( lineEndFormat == LINEEND_DEFAULT || lineEndFormat == LINEEND_WINDOWS || lineEndFormat == LINEEND_LINUX || lineEndFormat == LINEEND_MACOLD )		678235	0					
ANR	678240	Callee	assert		678235	0					
ANR	678241	Identifier	assert		678235	0					
ANR	678242	ArgumentList	lineEndFormat == LINEEND_DEFAULT || lineEndFormat == LINEEND_WINDOWS || lineEndFormat == LINEEND_LINUX || lineEndFormat == LINEEND_MACOLD		678235	1					
ANR	678243	Argument	lineEndFormat == LINEEND_DEFAULT || lineEndFormat == LINEEND_WINDOWS || lineEndFormat == LINEEND_LINUX || lineEndFormat == LINEEND_MACOLD		678235	0					
ANR	678244	OrExpression	lineEndFormat == LINEEND_DEFAULT || lineEndFormat == LINEEND_WINDOWS || lineEndFormat == LINEEND_LINUX || lineEndFormat == LINEEND_MACOLD		678235	0		||			
ANR	678245	EqualityExpression	lineEndFormat == LINEEND_DEFAULT		678235	0		==			
ANR	678246	Identifier	lineEndFormat		678235	0					
ANR	678247	Identifier	LINEEND_DEFAULT		678235	1					
ANR	678248	OrExpression	lineEndFormat == LINEEND_WINDOWS || lineEndFormat == LINEEND_LINUX || lineEndFormat == LINEEND_MACOLD		678235	1		||			
ANR	678249	EqualityExpression	lineEndFormat == LINEEND_WINDOWS		678235	0		==			
ANR	678250	Identifier	lineEndFormat		678235	0					
ANR	678251	Identifier	LINEEND_WINDOWS		678235	1					
ANR	678252	OrExpression	lineEndFormat == LINEEND_LINUX || lineEndFormat == LINEEND_MACOLD		678235	1		||			
ANR	678253	EqualityExpression	lineEndFormat == LINEEND_LINUX		678235	0		==			
ANR	678254	Identifier	lineEndFormat		678235	0					
ANR	678255	Identifier	LINEEND_LINUX		678235	1					
ANR	678256	EqualityExpression	lineEndFormat == LINEEND_MACOLD		678235	1		==			
ANR	678257	Identifier	lineEndFormat		678235	0					
ANR	678258	Identifier	LINEEND_MACOLD		678235	1					
ANR	678259	ExpressionStatement	outputEOL . clear ( )	785:1:19228:19245	678235	1	True				
ANR	678260	CallExpression	outputEOL . clear ( )		678235	0					
ANR	678261	Callee	outputEOL . clear		678235	0					
ANR	678262	MemberAccess	outputEOL . clear		678235	0					
ANR	678263	Identifier	outputEOL		678235	0					
ANR	678264	Identifier	clear		678235	1					
ANR	678265	ArgumentList			678235	1					
ANR	678266	ExpressionStatement	prevEOL . clear ( )	786:1:19270:19285	678235	2	True				
ANR	678267	CallExpression	prevEOL . clear ( )		678235	0					
ANR	678268	Callee	prevEOL . clear		678235	0					
ANR	678269	MemberAccess	prevEOL . clear		678235	0					
ANR	678270	Identifier	prevEOL		678235	0					
ANR	678271	Identifier	clear		678235	1					
ANR	678272	ArgumentList			678235	1					
ANR	678273	ExpressionStatement	lineEndsMixed = false	787:1:19311:19332	678235	3	True				
ANR	678274	AssignmentExpression	lineEndsMixed = false		678235	0		=			
ANR	678275	Identifier	lineEndsMixed		678235	0					
ANR	678276	Identifier	false		678235	1					
ANR	678277	IfStatement	if ( lineEndFormat == LINEEND_WINDOWS )		678235	4					
ANR	678278	Condition	lineEndFormat == LINEEND_WINDOWS	789:5:19393:19424	678235	0	True				
ANR	678279	EqualityExpression	lineEndFormat == LINEEND_WINDOWS		678235	0		==			
ANR	678280	Identifier	lineEndFormat		678235	0					
ANR	678281	Identifier	LINEEND_WINDOWS		678235	1					
ANR	678282	ExpressionStatement	"outputEOL = ""\\r\\n"""	790:2:19429:19447	678235	1	True				
ANR	678283	AssignmentExpression	"outputEOL = ""\\r\\n"""		678235	0		=			
ANR	678284	Identifier	outputEOL		678235	0					
ANR	678285	PrimaryExpression	"""\\r\\n"""		678235	1					
ANR	678286	ElseStatement	else		678235	0					
ANR	678287	IfStatement	if ( lineEndFormat == LINEEND_LINUX )		678235	0					
ANR	678288	Condition	lineEndFormat == LINEEND_LINUX	791:10:19459:19488	678235	0	True				
ANR	678289	EqualityExpression	lineEndFormat == LINEEND_LINUX		678235	0		==			
ANR	678290	Identifier	lineEndFormat		678235	0					
ANR	678291	Identifier	LINEEND_LINUX		678235	1					
ANR	678292	ExpressionStatement	"outputEOL = ""\\n"""	792:2:19493:19509	678235	1	True				
ANR	678293	AssignmentExpression	"outputEOL = ""\\n"""		678235	0		=			
ANR	678294	Identifier	outputEOL		678235	0					
ANR	678295	PrimaryExpression	"""\\n"""		678235	1					
ANR	678296	ElseStatement	else		678235	0					
ANR	678297	IfStatement	if ( lineEndFormat == LINEEND_MACOLD )		678235	0					
ANR	678298	Condition	lineEndFormat == LINEEND_MACOLD	793:10:19521:19551	678235	0	True				
ANR	678299	EqualityExpression	lineEndFormat == LINEEND_MACOLD		678235	0		==			
ANR	678300	Identifier	lineEndFormat		678235	0					
ANR	678301	Identifier	LINEEND_MACOLD		678235	1					
ANR	678302	ExpressionStatement	"outputEOL = ""\\r"""	794:2:19556:19572	678235	1	True				
ANR	678303	AssignmentExpression	"outputEOL = ""\\r"""		678235	0		=			
ANR	678304	Identifier	outputEOL		678235	0					
ANR	678305	PrimaryExpression	"""\\r"""		678235	1					
ANR	678306	ElseStatement	else		678235	0					
ANR	678307	ExpressionStatement	outputEOL . clear ( )	796:2:19582:19599	678235	0	True				
ANR	678308	CallExpression	outputEOL . clear ( )		678235	0					
ANR	678309	Callee	outputEOL . clear		678235	0					
ANR	678310	MemberAccess	outputEOL . clear		678235	0					
ANR	678311	Identifier	outputEOL		678235	0					
ANR	678312	Identifier	clear		678235	1					
ANR	678313	ArgumentList			678235	1					
ANR	678314	ReturnType	void		678235	1					
ANR	678315	Identifier	ASConsole :: initializeOutputEOL		678235	2					
ANR	678316	ParameterList	LineEndFormat lineEndFormat		678235	3					
ANR	678317	Parameter	LineEndFormat lineEndFormat	778:36:19023:19049	678235	0	True				
ANR	678318	ParameterType	LineEndFormat		678235	0					
ANR	678319	Identifier	lineEndFormat		678235	1					
ANR	678320	CFGEntryNode	ENTRY		678235		True				
ANR	678321	CFGExitNode	EXIT		678235		True				
ANR	678322	Symbol	lineEndFormat		678235						
ANR	678323	Symbol	LINEEND_MACOLD		678235						
ANR	678324	Symbol	LINEEND_WINDOWS		678235						
ANR	678325	Symbol	LINEEND_LINUX		678235						
ANR	678326	Symbol	prevEOL		678235						
ANR	678327	Symbol	false		678235						
ANR	678328	Symbol	LINEEND_DEFAULT		678235						
ANR	678329	Symbol	outputEOL		678235						
ANR	678330	Symbol	lineEndsMixed		678235						
ANR	678331	Function	ASConsole :: readFile	799:0:19604:21158							
ANR	678332	FunctionDef	"ASConsole :: readFile (const string & fileName_ , stringstream & in)"		678331	0					
ANR	678333	CompoundStatement		800:0:19686:21158	678331	0					
ANR	678334	IdentifierDeclStatement	const int blockSize = 65536 ;	801:1:19689:19716	678331	0	True				
ANR	678335	IdentifierDecl	blockSize = 65536		678331	0					
ANR	678336	IdentifierDeclType	const int		678331	0					
ANR	678337	Identifier	blockSize		678331	1					
ANR	678338	AssignmentExpression	blockSize = 65536		678331	2		=			
ANR	678339	Identifier	blockSize		678331	0					
ANR	678340	PrimaryExpression	65536		678331	1					
ANR	678341	IdentifierDeclStatement	"ifstream fin ( fileName_ . c_str ( ) , ios :: binary ) ;"	802:1:19728:19772	678331	1	True				
ANR	678342	IdentifierDecl	"fin ( fileName_ . c_str ( ) , ios :: binary )"		678331	0					
ANR	678343	IdentifierDeclType	ifstream		678331	0					
ANR	678344	Identifier	fin		678331	1					
ANR	678345	Expression	"fileName_ . c_str ( ) , ios :: binary"		678331	2					
ANR	678346	CallExpression	fileName_ . c_str ( )		678331	0					
ANR	678347	Callee	fileName_ . c_str		678331	0					
ANR	678348	MemberAccess	fileName_ . c_str		678331	0					
ANR	678349	Identifier	fileName_		678331	0					
ANR	678350	Identifier	c_str		678331	1					
ANR	678351	ArgumentList			678331	1					
ANR	678352	Identifier	ios :: binary		678331	1					
ANR	678353	IfStatement	if ( ! fin )		678331	2					
ANR	678354	Condition	! fin	803:5:19779:19782	678331	0	True				
ANR	678355	UnaryOperationExpression	! fin		678331	0					
ANR	678356	UnaryOperator	!		678331	0					
ANR	678357	Identifier	fin		678331	1					
ANR	678358	ExpressionStatement	"error ( ""Cannot open input file"" , fileName_ . c_str ( ) )"	804:2:19787:19837	678331	1	True				
ANR	678359	CallExpression	"error ( ""Cannot open input file"" , fileName_ . c_str ( ) )"		678331	0					
ANR	678360	Callee	error		678331	0					
ANR	678361	Identifier	error		678331	0					
ANR	678362	ArgumentList	"""Cannot open input file"""		678331	1					
ANR	678363	Argument	"""Cannot open input file"""		678331	0					
ANR	678364	PrimaryExpression	"""Cannot open input file"""		678331	0					
ANR	678365	Argument	fileName_ . c_str ( )		678331	1					
ANR	678366	CallExpression	fileName_ . c_str ( )		678331	0					
ANR	678367	Callee	fileName_ . c_str		678331	0					
ANR	678368	MemberAccess	fileName_ . c_str		678331	0					
ANR	678369	Identifier	fileName_		678331	0					
ANR	678370	Identifier	c_str		678331	1					
ANR	678371	ArgumentList			678331	1					
ANR	678372	Statement	char	805:1:19840:19843	678331	3	True				
ANR	678373	Statement	*	805:5:19844:19844	678331	4	True				
ANR	678374	Statement	data	805:7:19846:19849	678331	5	True				
ANR	678375	Statement	=	805:12:19851:19851	678331	6	True				
ANR	678376	Statement	new	805:14:19853:19855	678331	7	True				
ANR	678377	ExpressionStatement	( nothrow ) char [ blockSize ]	805:18:19857:19882	678331	8	True				
ANR	678378	CastExpression	( nothrow ) char [ blockSize ]		678331	0					
ANR	678379	CastTarget	nothrow		678331	0					
ANR	678380	ArrayIndexing	char [ blockSize ]		678331	1					
ANR	678381	Identifier	char		678331	0					
ANR	678382	Identifier	blockSize		678331	1					
ANR	678383	IfStatement	if ( data == nullptr )		678331	9					
ANR	678384	Condition	data == nullptr	806:5:19889:19903	678331	0	True				
ANR	678385	EqualityExpression	data == nullptr		678331	0		==			
ANR	678386	Identifier	data		678331	0					
ANR	678387	Identifier	nullptr		678331	1					
ANR	678388	ExpressionStatement	"error ( ""Cannot allocate memory for input file"" , fileName_ . c_str ( ) )"	807:2:19908:19973	678331	1	True				
ANR	678389	CallExpression	"error ( ""Cannot allocate memory for input file"" , fileName_ . c_str ( ) )"		678331	0					
ANR	678390	Callee	error		678331	0					
ANR	678391	Identifier	error		678331	0					
ANR	678392	ArgumentList	"""Cannot allocate memory for input file"""		678331	1					
ANR	678393	Argument	"""Cannot allocate memory for input file"""		678331	0					
ANR	678394	PrimaryExpression	"""Cannot allocate memory for input file"""		678331	0					
ANR	678395	Argument	fileName_ . c_str ( )		678331	1					
ANR	678396	CallExpression	fileName_ . c_str ( )		678331	0					
ANR	678397	Callee	fileName_ . c_str		678331	0					
ANR	678398	MemberAccess	fileName_ . c_str		678331	0					
ANR	678399	Identifier	fileName_		678331	0					
ANR	678400	Identifier	c_str		678331	1					
ANR	678401	ArgumentList			678331	1					
ANR	678402	ExpressionStatement	"fin . read ( data , blockSize )"	808:1:19976:20001	678331	10	True				
ANR	678403	CallExpression	"fin . read ( data , blockSize )"		678331	0					
ANR	678404	Callee	fin . read		678331	0					
ANR	678405	MemberAccess	fin . read		678331	0					
ANR	678406	Identifier	fin		678331	0					
ANR	678407	Identifier	read		678331	1					
ANR	678408	ArgumentList	data		678331	1					
ANR	678409	Argument	data		678331	0					
ANR	678410	Identifier	data		678331	0					
ANR	678411	Argument	blockSize		678331	1					
ANR	678412	Identifier	blockSize		678331	0					
ANR	678413	IfStatement	if ( fin . bad ( ) )		678331	11					
ANR	678414	Condition	fin . bad ( )	809:5:20008:20016	678331	0	True				
ANR	678415	CallExpression	fin . bad ( )		678331	0					
ANR	678416	Callee	fin . bad		678331	0					
ANR	678417	MemberAccess	fin . bad		678331	0					
ANR	678418	Identifier	fin		678331	0					
ANR	678419	Identifier	bad		678331	1					
ANR	678420	ArgumentList			678331	1					
ANR	678421	ExpressionStatement	"error ( ""Cannot read input file"" , fileName_ . c_str ( ) )"	810:2:20021:20071	678331	1	True				
ANR	678422	CallExpression	"error ( ""Cannot read input file"" , fileName_ . c_str ( ) )"		678331	0					
ANR	678423	Callee	error		678331	0					
ANR	678424	Identifier	error		678331	0					
ANR	678425	ArgumentList	"""Cannot read input file"""		678331	1					
ANR	678426	Argument	"""Cannot read input file"""		678331	0					
ANR	678427	PrimaryExpression	"""Cannot read input file"""		678331	0					
ANR	678428	Argument	fileName_ . c_str ( )		678331	1					
ANR	678429	CallExpression	fileName_ . c_str ( )		678331	0					
ANR	678430	Callee	fileName_ . c_str		678331	0					
ANR	678431	MemberAccess	fileName_ . c_str		678331	0					
ANR	678432	Identifier	fileName_		678331	0					
ANR	678433	Identifier	c_str		678331	1					
ANR	678434	ArgumentList			678331	1					
ANR	678435	IdentifierDeclStatement	size_t dataSize = static_cast < size_t > ( fin . gcount ( ) ) ;	811:1:20074:20125	678331	12	True				
ANR	678436	IdentifierDecl	dataSize = static_cast < size_t > ( fin . gcount ( ) )		678331	0					
ANR	678437	IdentifierDeclType	size_t		678331	0					
ANR	678438	Identifier	dataSize		678331	1					
ANR	678439	AssignmentExpression	dataSize = static_cast < size_t > ( fin . gcount ( ) )		678331	2		=			
ANR	678440	Identifier	dataSize		678331	0					
ANR	678441	RelationalExpression	static_cast < size_t > ( fin . gcount ( ) )		678331	1		<			
ANR	678442	Identifier	static_cast		678331	0					
ANR	678443	RelationalExpression	size_t > ( fin . gcount ( ) )		678331	1		>			
ANR	678444	Identifier	size_t		678331	0					
ANR	678445	CallExpression	fin . gcount ( )		678331	1					
ANR	678446	Callee	fin . gcount		678331	0					
ANR	678447	MemberAccess	fin . gcount		678331	0					
ANR	678448	Identifier	fin		678331	0					
ANR	678449	Identifier	gcount		678331	1					
ANR	678450	ArgumentList			678331	1					
ANR	678451	IdentifierDeclStatement	"FileEncoding encoding = detectEncoding ( data , dataSize ) ;"	812:1:20128:20182	678331	13	True				
ANR	678452	IdentifierDecl	"encoding = detectEncoding ( data , dataSize )"		678331	0					
ANR	678453	IdentifierDeclType	FileEncoding		678331	0					
ANR	678454	Identifier	encoding		678331	1					
ANR	678455	AssignmentExpression	"encoding = detectEncoding ( data , dataSize )"		678331	2		=			
ANR	678456	Identifier	encoding		678331	0					
ANR	678457	CallExpression	"detectEncoding ( data , dataSize )"		678331	1					
ANR	678458	Callee	detectEncoding		678331	0					
ANR	678459	Identifier	detectEncoding		678331	0					
ANR	678460	ArgumentList	data		678331	1					
ANR	678461	Argument	data		678331	0					
ANR	678462	Identifier	data		678331	0					
ANR	678463	Argument	dataSize		678331	1					
ANR	678464	Identifier	dataSize		678331	0					
ANR	678465	IfStatement	if ( encoding == UTF_32BE || encoding == UTF_32LE )		678331	14					
ANR	678466	Condition	encoding == UTF_32BE || encoding == UTF_32LE	813:5:20189:20232	678331	0	True				
ANR	678467	OrExpression	encoding == UTF_32BE || encoding == UTF_32LE		678331	0		||			
ANR	678468	EqualityExpression	encoding == UTF_32BE		678331	0		==			
ANR	678469	Identifier	encoding		678331	0					
ANR	678470	Identifier	UTF_32BE		678331	1					
ANR	678471	EqualityExpression	encoding == UTF_32LE		678331	1		==			
ANR	678472	Identifier	encoding		678331	0					
ANR	678473	Identifier	UTF_32LE		678331	1					
ANR	678474	ExpressionStatement	"error ( _ ( ""Cannot process UTF-32 encoding"" ) , fileName_ . c_str ( ) )"	814:2:20237:20298	678331	1	True				
ANR	678475	CallExpression	"error ( _ ( ""Cannot process UTF-32 encoding"" ) , fileName_ . c_str ( ) )"		678331	0					
ANR	678476	Callee	error		678331	0					
ANR	678477	Identifier	error		678331	0					
ANR	678478	ArgumentList	"_ ( ""Cannot process UTF-32 encoding"" )"		678331	1					
ANR	678479	Argument	"_ ( ""Cannot process UTF-32 encoding"" )"		678331	0					
ANR	678480	CallExpression	"_ ( ""Cannot process UTF-32 encoding"" )"		678331	0					
ANR	678481	Callee	_		678331	0					
ANR	678482	Identifier	_		678331	0					
ANR	678483	ArgumentList	"""Cannot process UTF-32 encoding"""		678331	1					
ANR	678484	Argument	"""Cannot process UTF-32 encoding"""		678331	0					
ANR	678485	PrimaryExpression	"""Cannot process UTF-32 encoding"""		678331	0					
ANR	678486	Argument	fileName_ . c_str ( )		678331	1					
ANR	678487	CallExpression	fileName_ . c_str ( )		678331	0					
ANR	678488	Callee	fileName_ . c_str		678331	0					
ANR	678489	MemberAccess	fileName_ . c_str		678331	0					
ANR	678490	Identifier	fileName_		678331	0					
ANR	678491	Identifier	c_str		678331	1					
ANR	678492	ArgumentList			678331	1					
ANR	678493	IdentifierDeclStatement	bool firstBlock = true ;	815:1:20301:20323	678331	15	True				
ANR	678494	IdentifierDecl	firstBlock = true		678331	0					
ANR	678495	IdentifierDeclType	bool		678331	0					
ANR	678496	Identifier	firstBlock		678331	1					
ANR	678497	AssignmentExpression	firstBlock = true		678331	2		=			
ANR	678498	Identifier	true		678331	0					
ANR	678499	Identifier	true		678331	1					
ANR	678500	IdentifierDeclStatement	bool isBigEndian = ( encoding == UTF_16BE ) ;	816:1:20326:20367	678331	16	True				
ANR	678501	IdentifierDecl	isBigEndian = ( encoding == UTF_16BE )		678331	0					
ANR	678502	IdentifierDeclType	bool		678331	0					
ANR	678503	Identifier	isBigEndian		678331	1					
ANR	678504	AssignmentExpression	isBigEndian = ( encoding == UTF_16BE )		678331	2		=			
ANR	678505	Identifier	isBigEndian		678331	0					
ANR	678506	EqualityExpression	encoding == UTF_16BE		678331	1		==			
ANR	678507	Identifier	encoding		678331	0					
ANR	678508	Identifier	UTF_16BE		678331	1					
ANR	678509	WhileStatement	while ( dataSize != 0 )		678331	17					
ANR	678510	Condition	dataSize != 0	817:8:20377:20389	678331	0	True				
ANR	678511	EqualityExpression	dataSize != 0		678331	0		!=			
ANR	678512	Identifier	dataSize		678331	0					
ANR	678513	PrimaryExpression	0		678331	1					
ANR	678514	CompoundStatement		19:1:706:706	678331	1					
ANR	678515	IfStatement	if ( encoding == UTF_16LE || encoding == UTF_16BE )		678331	0					
ANR	678516	Condition	encoding == UTF_16LE || encoding == UTF_16BE	819:6:20401:20444	678331	0	True				
ANR	678517	OrExpression	encoding == UTF_16LE || encoding == UTF_16BE		678331	0		||			
ANR	678518	EqualityExpression	encoding == UTF_16LE		678331	0		==			
ANR	678519	Identifier	encoding		678331	0					
ANR	678520	Identifier	UTF_16LE		678331	1					
ANR	678521	EqualityExpression	encoding == UTF_16BE		678331	1		==			
ANR	678522	Identifier	encoding		678331	0					
ANR	678523	Identifier	UTF_16BE		678331	1					
ANR	678524	CompoundStatement		27:3:1029:1115	678331	1					
ANR	678525	IdentifierDeclStatement	"size_t utf8Size = utf8_16 . utf8LengthFromUtf16 ( data , dataSize , isBigEndian ) ;"	822:3:20484:20558	678331	0	True				
ANR	678526	IdentifierDecl	"utf8Size = utf8_16 . utf8LengthFromUtf16 ( data , dataSize , isBigEndian )"		678331	0					
ANR	678527	IdentifierDeclType	size_t		678331	0					
ANR	678528	Identifier	utf8Size		678331	1					
ANR	678529	AssignmentExpression	"utf8Size = utf8_16 . utf8LengthFromUtf16 ( data , dataSize , isBigEndian )"		678331	2		=			
ANR	678530	Identifier	utf8Size		678331	0					
ANR	678531	CallExpression	"utf8_16 . utf8LengthFromUtf16 ( data , dataSize , isBigEndian )"		678331	1					
ANR	678532	Callee	utf8_16 . utf8LengthFromUtf16		678331	0					
ANR	678533	MemberAccess	utf8_16 . utf8LengthFromUtf16		678331	0					
ANR	678534	Identifier	utf8_16		678331	0					
ANR	678535	Identifier	utf8LengthFromUtf16		678331	1					
ANR	678536	ArgumentList	data		678331	1					
ANR	678537	Argument	data		678331	0					
ANR	678538	Identifier	data		678331	0					
ANR	678539	Argument	dataSize		678331	1					
ANR	678540	Identifier	dataSize		678331	0					
ANR	678541	Argument	isBigEndian		678331	2					
ANR	678542	Identifier	isBigEndian		678331	0					
ANR	678543	Statement	char	823:3:20563:20566	678331	1	True				
ANR	678544	Statement	*	823:7:20567:20567	678331	2	True				
ANR	678545	Statement	utf8Out	823:9:20569:20575	678331	3	True				
ANR	678546	Statement	=	823:17:20577:20577	678331	4	True				
ANR	678547	Statement	new	823:19:20579:20581	678331	5	True				
ANR	678548	ExpressionStatement	( nothrow ) char [ utf8Size ]	823:23:20583:20607	678331	6	True				
ANR	678549	CastExpression	( nothrow ) char [ utf8Size ]		678331	0					
ANR	678550	CastTarget	nothrow		678331	0					
ANR	678551	ArrayIndexing	char [ utf8Size ]		678331	1					
ANR	678552	Identifier	char		678331	0					
ANR	678553	Identifier	utf8Size		678331	1					
ANR	678554	IfStatement	if ( utf8Out == nullptr )		678331	7					
ANR	678555	Condition	utf8Out == nullptr	824:7:20616:20633	678331	0	True				
ANR	678556	EqualityExpression	utf8Out == nullptr		678331	0		==			
ANR	678557	Identifier	utf8Out		678331	0					
ANR	678558	Identifier	nullptr		678331	1					
ANR	678559	ExpressionStatement	"error ( ""Cannot allocate memory for utf-8 conversion"" , fileName_ . c_str ( ) )"	825:4:20640:20711	678331	1	True				
ANR	678560	CallExpression	"error ( ""Cannot allocate memory for utf-8 conversion"" , fileName_ . c_str ( ) )"		678331	0					
ANR	678561	Callee	error		678331	0					
ANR	678562	Identifier	error		678331	0					
ANR	678563	ArgumentList	"""Cannot allocate memory for utf-8 conversion"""		678331	1					
ANR	678564	Argument	"""Cannot allocate memory for utf-8 conversion"""		678331	0					
ANR	678565	PrimaryExpression	"""Cannot allocate memory for utf-8 conversion"""		678331	0					
ANR	678566	Argument	fileName_ . c_str ( )		678331	1					
ANR	678567	CallExpression	fileName_ . c_str ( )		678331	0					
ANR	678568	Callee	fileName_ . c_str		678331	0					
ANR	678569	MemberAccess	fileName_ . c_str		678331	0					
ANR	678570	Identifier	fileName_		678331	0					
ANR	678571	Identifier	c_str		678331	1					
ANR	678572	ArgumentList			678331	1					
ANR	678573	IdentifierDeclStatement	"size_t utf8Len = utf8_16 . utf16ToUtf8 ( data , dataSize , isBigEndian , firstBlock , utf8Out ) ;"	826:3:20716:20802	678331	8	True				
ANR	678574	IdentifierDecl	"utf8Len = utf8_16 . utf16ToUtf8 ( data , dataSize , isBigEndian , firstBlock , utf8Out )"		678331	0					
ANR	678575	IdentifierDeclType	size_t		678331	0					
ANR	678576	Identifier	utf8Len		678331	1					
ANR	678577	AssignmentExpression	"utf8Len = utf8_16 . utf16ToUtf8 ( data , dataSize , isBigEndian , firstBlock , utf8Out )"		678331	2		=			
ANR	678578	Identifier	utf8Len		678331	0					
ANR	678579	CallExpression	"utf8_16 . utf16ToUtf8 ( data , dataSize , isBigEndian , firstBlock , utf8Out )"		678331	1					
ANR	678580	Callee	utf8_16 . utf16ToUtf8		678331	0					
ANR	678581	MemberAccess	utf8_16 . utf16ToUtf8		678331	0					
ANR	678582	Identifier	utf8_16		678331	0					
ANR	678583	Identifier	utf16ToUtf8		678331	1					
ANR	678584	ArgumentList	data		678331	1					
ANR	678585	Argument	data		678331	0					
ANR	678586	Identifier	data		678331	0					
ANR	678587	Argument	dataSize		678331	1					
ANR	678588	Identifier	dataSize		678331	0					
ANR	678589	Argument	isBigEndian		678331	2					
ANR	678590	Identifier	isBigEndian		678331	0					
ANR	678591	Argument	firstBlock		678331	3					
ANR	678592	Identifier	firstBlock		678331	0					
ANR	678593	Argument	utf8Out		678331	4					
ANR	678594	Identifier	utf8Out		678331	0					
ANR	678595	ExpressionStatement	assert ( utf8Len == utf8Size )	827:3:20807:20834	678331	9	True				
ANR	678596	CallExpression	assert ( utf8Len == utf8Size )		678331	0					
ANR	678597	Callee	assert		678331	0					
ANR	678598	Identifier	assert		678331	0					
ANR	678599	ArgumentList	utf8Len == utf8Size		678331	1					
ANR	678600	Argument	utf8Len == utf8Size		678331	0					
ANR	678601	EqualityExpression	utf8Len == utf8Size		678331	0		==			
ANR	678602	Identifier	utf8Len		678331	0					
ANR	678603	Identifier	utf8Size		678331	1					
ANR	678604	ExpressionStatement	"in << string ( utf8Out , utf8Len )"	828:3:20839:20869	678331	10	True				
ANR	678605	ShiftExpression	"in << string ( utf8Out , utf8Len )"		678331	0		<<			
ANR	678606	Identifier	in		678331	0					
ANR	678607	CallExpression	"string ( utf8Out , utf8Len )"		678331	1					
ANR	678608	Callee	string		678331	0					
ANR	678609	Identifier	string		678331	0					
ANR	678610	ArgumentList	utf8Out		678331	1					
ANR	678611	Argument	utf8Out		678331	0					
ANR	678612	Identifier	utf8Out		678331	0					
ANR	678613	Argument	utf8Len		678331	1					
ANR	678614	Identifier	utf8Len		678331	0					
ANR	678615	Statement	delete	829:3:20874:20879	678331	11	True				
ANR	678616	Statement	[	829:9:20880:20880	678331	12	True				
ANR	678617	Statement	]	829:10:20881:20881	678331	13	True				
ANR	678618	ExpressionStatement	utf8Out	829:12:20883:20890	678331	14	True				
ANR	678619	Identifier	utf8Out		678331	0					
ANR	678620	ElseStatement	else		678331	0					
ANR	678621	ExpressionStatement	"in << string ( data , dataSize )"	832:3:20906:20934	678331	0	True				
ANR	678622	ShiftExpression	"in << string ( data , dataSize )"		678331	0		<<			
ANR	678623	Identifier	in		678331	0					
ANR	678624	CallExpression	"string ( data , dataSize )"		678331	1					
ANR	678625	Callee	string		678331	0					
ANR	678626	Identifier	string		678331	0					
ANR	678627	ArgumentList	data		678331	1					
ANR	678628	Argument	data		678331	0					
ANR	678629	Identifier	data		678331	0					
ANR	678630	Argument	dataSize		678331	1					
ANR	678631	Identifier	dataSize		678331	0					
ANR	678632	ExpressionStatement	"fin . read ( data , blockSize )"	833:2:20938:20963	678331	1	True				
ANR	678633	CallExpression	"fin . read ( data , blockSize )"		678331	0					
ANR	678634	Callee	fin . read		678331	0					
ANR	678635	MemberAccess	fin . read		678331	0					
ANR	678636	Identifier	fin		678331	0					
ANR	678637	Identifier	read		678331	1					
ANR	678638	ArgumentList	data		678331	1					
ANR	678639	Argument	data		678331	0					
ANR	678640	Identifier	data		678331	0					
ANR	678641	Argument	blockSize		678331	1					
ANR	678642	Identifier	blockSize		678331	0					
ANR	678643	IfStatement	if ( fin . bad ( ) )		678331	2					
ANR	678644	Condition	fin . bad ( )	834:6:20971:20979	678331	0	True				
ANR	678645	CallExpression	fin . bad ( )		678331	0					
ANR	678646	Callee	fin . bad		678331	0					
ANR	678647	MemberAccess	fin . bad		678331	0					
ANR	678648	Identifier	fin		678331	0					
ANR	678649	Identifier	bad		678331	1					
ANR	678650	ArgumentList			678331	1					
ANR	678651	ExpressionStatement	"error ( ""Cannot read input file"" , fileName_ . c_str ( ) )"	835:3:20985:21035	678331	1	True				
ANR	678652	CallExpression	"error ( ""Cannot read input file"" , fileName_ . c_str ( ) )"		678331	0					
ANR	678653	Callee	error		678331	0					
ANR	678654	Identifier	error		678331	0					
ANR	678655	ArgumentList	"""Cannot read input file"""		678331	1					
ANR	678656	Argument	"""Cannot read input file"""		678331	0					
ANR	678657	PrimaryExpression	"""Cannot read input file"""		678331	0					
ANR	678658	Argument	fileName_ . c_str ( )		678331	1					
ANR	678659	CallExpression	fileName_ . c_str ( )		678331	0					
ANR	678660	Callee	fileName_ . c_str		678331	0					
ANR	678661	MemberAccess	fileName_ . c_str		678331	0					
ANR	678662	Identifier	fileName_		678331	0					
ANR	678663	Identifier	c_str		678331	1					
ANR	678664	ArgumentList			678331	1					
ANR	678665	ExpressionStatement	dataSize = static_cast < size_t > ( fin . gcount ( ) )	836:2:21039:21083	678331	3	True				
ANR	678666	AssignmentExpression	dataSize = static_cast < size_t > ( fin . gcount ( ) )		678331	0		=			
ANR	678667	Identifier	dataSize		678331	0					
ANR	678668	RelationalExpression	static_cast < size_t > ( fin . gcount ( ) )		678331	1		<			
ANR	678669	Identifier	static_cast		678331	0					
ANR	678670	RelationalExpression	size_t > ( fin . gcount ( ) )		678331	1		>			
ANR	678671	Identifier	size_t		678331	0					
ANR	678672	CallExpression	fin . gcount ( )		678331	1					
ANR	678673	Callee	fin . gcount		678331	0					
ANR	678674	MemberAccess	fin . gcount		678331	0					
ANR	678675	Identifier	fin		678331	0					
ANR	678676	Identifier	gcount		678331	1					
ANR	678677	ArgumentList			678331	1					
ANR	678678	ExpressionStatement	firstBlock = false	837:2:21087:21105	678331	4	True				
ANR	678679	AssignmentExpression	firstBlock = false		678331	0		=			
ANR	678680	Identifier	firstBlock		678331	0					
ANR	678681	Identifier	false		678331	1					
ANR	678682	ExpressionStatement	fin . close ( )	839:1:21111:21122	678331	18	True				
ANR	678683	CallExpression	fin . close ( )		678331	0					
ANR	678684	Callee	fin . close		678331	0					
ANR	678685	MemberAccess	fin . close		678331	0					
ANR	678686	Identifier	fin		678331	0					
ANR	678687	Identifier	close		678331	1					
ANR	678688	ArgumentList			678331	1					
ANR	678689	Statement	delete	840:1:21125:21130	678331	19	True				
ANR	678690	Statement	[	840:7:21131:21131	678331	20	True				
ANR	678691	Statement	]	840:8:21132:21132	678331	21	True				
ANR	678692	ExpressionStatement	data	840:10:21134:21138	678331	22	True				
ANR	678693	Identifier	data		678331	0					
ANR	678694	ReturnStatement	return encoding ;	841:1:21141:21156	678331	23	True				
ANR	678695	Identifier	encoding		678331	0					
ANR	678696	ReturnType	FileEncoding		678331	1					
ANR	678697	Identifier	ASConsole :: readFile		678331	2					
ANR	678698	ParameterList	"const string & fileName_ , stringstream & in"		678331	3					
ANR	678699	Parameter	const string & fileName_	799:33:19637:19659	678331	0	True				
ANR	678700	ParameterType	const string &		678331	0					
ANR	678701	Identifier	fileName_		678331	1					
ANR	678702	Parameter	stringstream & in	799:58:19662:19677	678331	1	True				
ANR	678703	ParameterType	stringstream &		678331	0					
ANR	678704	Identifier	in		678331	1					
ANR	678705	CFGEntryNode	ENTRY		678331		True				
ANR	678706	CFGExitNode	EXIT		678331		True				
ANR	678707	Symbol	UTF_16LE		678331						
ANR	678708	Symbol	data		678331						
ANR	678709	Symbol	UTF_32LE		678331						
ANR	678710	Symbol	detectEncoding		678331						
ANR	678711	Symbol	utf8Len		678331						
ANR	678712	Symbol	fileName_		678331						
ANR	678713	Symbol	fin		678331						
ANR	678714	Symbol	size_t		678331						
ANR	678715	Symbol	UTF_32BE		678331						
ANR	678716	Symbol	utf8_16 . utf16ToUtf8		678331						
ANR	678717	Symbol	utf8_16		678331						
ANR	678718	Symbol	utf8Size		678331						
ANR	678719	Symbol	fileName_ . c_str		678331						
ANR	678720	Symbol	isBigEndian		678331						
ANR	678721	Symbol	_		678331						
ANR	678722	Symbol	in		678331						
ANR	678723	Symbol	false		678331						
ANR	678724	Symbol	dataSize		678331						
ANR	678725	Symbol	encoding		678331						
ANR	678726	Symbol	blockSize		678331						
ANR	678727	Symbol	static_cast		678331						
ANR	678728	Symbol	firstBlock		678331						
ANR	678729	Symbol	UTF_16BE		678331						
ANR	678730	Symbol	fin . gcount		678331						
ANR	678731	Symbol	char		678331						
ANR	678732	Symbol	true		678331						
ANR	678733	Symbol	utf8_16 . utf8LengthFromUtf16		678331						
ANR	678734	Symbol	nullptr		678331						
ANR	678735	Symbol	fin . bad		678331						
ANR	678736	Symbol	utf8Out		678331						
ANR	678737	Function	ASConsole :: setIgnoreExcludeErrors	844:0:21161:21243							
ANR	678738	FunctionDef	ASConsole :: setIgnoreExcludeErrors (bool state)		678737	0					
ANR	678739	CompoundStatement		845:0:21212:21243	678737	0					
ANR	678740	ExpressionStatement	ignoreExcludeErrors = state	845:1:21214:21241	678737	0	True				
ANR	678741	AssignmentExpression	ignoreExcludeErrors = state		678737	0		=			
ANR	678742	Identifier	ignoreExcludeErrors		678737	0					
ANR	678743	Identifier	state		678737	1					
ANR	678744	ReturnType	void		678737	1					
ANR	678745	Identifier	ASConsole :: setIgnoreExcludeErrors		678737	2					
ANR	678746	ParameterList	bool state		678737	3					
ANR	678747	Parameter	bool state	844:39:21200:21209	678737	0	True				
ANR	678748	ParameterType	bool		678737	0					
ANR	678749	Identifier	state		678737	1					
ANR	678750	CFGEntryNode	ENTRY		678737		True				
ANR	678751	CFGExitNode	EXIT		678737		True				
ANR	678752	Symbol	ignoreExcludeErrors		678737						
ANR	678753	Symbol	state		678737						
ANR	678754	Function	ASConsole :: setIgnoreExcludeErrorsAndDisplay	847:0:21246:21374							
ANR	678755	FunctionDef	ASConsole :: setIgnoreExcludeErrorsAndDisplay (bool state)		678754	0					
ANR	678756	CompoundStatement		848:0:21307:21374	678754	0					
ANR	678757	ExpressionStatement	ignoreExcludeErrors = state	848:1:21309:21336	678754	0	True				
ANR	678758	AssignmentExpression	ignoreExcludeErrors = state		678754	0		=			
ANR	678759	Identifier	ignoreExcludeErrors		678754	0					
ANR	678760	Identifier	state		678754	1					
ANR	678761	ExpressionStatement	ignoreExcludeErrorsDisplay = state	848:30:21338:21372	678754	1	True				
ANR	678762	AssignmentExpression	ignoreExcludeErrorsDisplay = state		678754	0		=			
ANR	678763	Identifier	ignoreExcludeErrorsDisplay		678754	0					
ANR	678764	Identifier	state		678754	1					
ANR	678765	ReturnType	void		678754	1					
ANR	678766	Identifier	ASConsole :: setIgnoreExcludeErrorsAndDisplay		678754	2					
ANR	678767	ParameterList	bool state		678754	3					
ANR	678768	Parameter	bool state	847:49:21295:21304	678754	0	True				
ANR	678769	ParameterType	bool		678754	0					
ANR	678770	Identifier	state		678754	1					
ANR	678771	CFGEntryNode	ENTRY		678754		True				
ANR	678772	CFGExitNode	EXIT		678754		True				
ANR	678773	Symbol	ignoreExcludeErrors		678754						
ANR	678774	Symbol	state		678754						
ANR	678775	Symbol	ignoreExcludeErrorsDisplay		678754						
ANR	678776	Function	ASConsole :: setIsFormattedOnly	850:0:21377:21451							
ANR	678777	FunctionDef	ASConsole :: setIsFormattedOnly (bool state)		678776	0					
ANR	678778	CompoundStatement		851:0:21424:21451	678776	0					
ANR	678779	ExpressionStatement	isFormattedOnly = state	851:1:21426:21449	678776	0	True				
ANR	678780	AssignmentExpression	isFormattedOnly = state		678776	0		=			
ANR	678781	Identifier	isFormattedOnly		678776	0					
ANR	678782	Identifier	state		678776	1					
ANR	678783	ReturnType	void		678776	1					
ANR	678784	Identifier	ASConsole :: setIsFormattedOnly		678776	2					
ANR	678785	ParameterList	bool state		678776	3					
ANR	678786	Parameter	bool state	850:35:21412:21421	678776	0	True				
ANR	678787	ParameterType	bool		678776	0					
ANR	678788	Identifier	state		678776	1					
ANR	678789	CFGEntryNode	ENTRY		678776		True				
ANR	678790	CFGExitNode	EXIT		678776		True				
ANR	678791	Symbol	state		678776						
ANR	678792	Symbol	isFormattedOnly		678776						
ANR	678793	Function	ASConsole :: setIsQuiet	853:0:21454:21512							
ANR	678794	FunctionDef	ASConsole :: setIsQuiet (bool state)		678793	0					
ANR	678795	CompoundStatement		854:0:21493:21512	678793	0					
ANR	678796	ExpressionStatement	isQuiet = state	854:1:21495:21510	678793	0	True				
ANR	678797	AssignmentExpression	isQuiet = state		678793	0		=			
ANR	678798	Identifier	isQuiet		678793	0					
ANR	678799	Identifier	state		678793	1					
ANR	678800	ReturnType	void		678793	1					
ANR	678801	Identifier	ASConsole :: setIsQuiet		678793	2					
ANR	678802	ParameterList	bool state		678793	3					
ANR	678803	Parameter	bool state	853:27:21481:21490	678793	0	True				
ANR	678804	ParameterType	bool		678793	0					
ANR	678805	Identifier	state		678793	1					
ANR	678806	CFGEntryNode	ENTRY		678793		True				
ANR	678807	CFGExitNode	EXIT		678793		True				
ANR	678808	Symbol	state		678793						
ANR	678809	Symbol	isQuiet		678793						
ANR	678810	Function	ASConsole :: setIsRecursive	856:0:21515:21581							
ANR	678811	FunctionDef	ASConsole :: setIsRecursive (bool state)		678810	0					
ANR	678812	CompoundStatement		857:0:21558:21581	678810	0					
ANR	678813	ExpressionStatement	isRecursive = state	857:1:21560:21579	678810	0	True				
ANR	678814	AssignmentExpression	isRecursive = state		678810	0		=			
ANR	678815	Identifier	isRecursive		678810	0					
ANR	678816	Identifier	state		678810	1					
ANR	678817	ReturnType	void		678810	1					
ANR	678818	Identifier	ASConsole :: setIsRecursive		678810	2					
ANR	678819	ParameterList	bool state		678810	3					
ANR	678820	Parameter	bool state	856:31:21546:21555	678810	0	True				
ANR	678821	ParameterType	bool		678810	0					
ANR	678822	Identifier	state		678810	1					
ANR	678823	CFGEntryNode	ENTRY		678810		True				
ANR	678824	CFGExitNode	EXIT		678810		True				
ANR	678825	Symbol	isRecursive		678810						
ANR	678826	Symbol	state		678810						
ANR	678827	Function	ASConsole :: setIsDryRun	859:0:21584:21644							
ANR	678828	FunctionDef	ASConsole :: setIsDryRun (bool state)		678827	0					
ANR	678829	CompoundStatement		860:0:21624:21644	678827	0					
ANR	678830	ExpressionStatement	isDryRun = state	860:1:21626:21642	678827	0	True				
ANR	678831	AssignmentExpression	isDryRun = state		678827	0		=			
ANR	678832	Identifier	isDryRun		678827	0					
ANR	678833	Identifier	state		678827	1					
ANR	678834	ReturnType	void		678827	1					
ANR	678835	Identifier	ASConsole :: setIsDryRun		678827	2					
ANR	678836	ParameterList	bool state		678827	3					
ANR	678837	Parameter	bool state	859:28:21612:21621	678827	0	True				
ANR	678838	ParameterType	bool		678827	0					
ANR	678839	Identifier	state		678827	1					
ANR	678840	CFGEntryNode	ENTRY		678827		True				
ANR	678841	CFGExitNode	EXIT		678827		True				
ANR	678842	Symbol	isDryRun		678827						
ANR	678843	Symbol	state		678827						
ANR	678844	Function	ASConsole :: setIsVerbose	862:0:21647:21709							
ANR	678845	FunctionDef	ASConsole :: setIsVerbose (bool state)		678844	0					
ANR	678846	CompoundStatement		863:0:21688:21709	678844	0					
ANR	678847	ExpressionStatement	isVerbose = state	863:1:21690:21707	678844	0	True				
ANR	678848	AssignmentExpression	isVerbose = state		678844	0		=			
ANR	678849	Identifier	isVerbose		678844	0					
ANR	678850	Identifier	state		678844	1					
ANR	678851	ReturnType	void		678844	1					
ANR	678852	Identifier	ASConsole :: setIsVerbose		678844	2					
ANR	678853	ParameterList	bool state		678844	3					
ANR	678854	Parameter	bool state	862:29:21676:21685	678844	0	True				
ANR	678855	ParameterType	bool		678844	0					
ANR	678856	Identifier	state		678844	1					
ANR	678857	CFGEntryNode	ENTRY		678844		True				
ANR	678858	CFGExitNode	EXIT		678844		True				
ANR	678859	Symbol	isVerbose		678844						
ANR	678860	Symbol	state		678844						
ANR	678861	Function	ASConsole :: setNoBackup	865:0:21712:21772							
ANR	678862	FunctionDef	ASConsole :: setNoBackup (bool state)		678861	0					
ANR	678863	CompoundStatement		866:0:21752:21772	678861	0					
ANR	678864	ExpressionStatement	noBackup = state	866:1:21754:21770	678861	0	True				
ANR	678865	AssignmentExpression	noBackup = state		678861	0		=			
ANR	678866	Identifier	noBackup		678861	0					
ANR	678867	Identifier	state		678861	1					
ANR	678868	ReturnType	void		678861	1					
ANR	678869	Identifier	ASConsole :: setNoBackup		678861	2					
ANR	678870	ParameterList	bool state		678861	3					
ANR	678871	Parameter	bool state	865:28:21740:21749	678861	0	True				
ANR	678872	ParameterType	bool		678861	0					
ANR	678873	Identifier	state		678861	1					
ANR	678874	CFGEntryNode	ENTRY		678861		True				
ANR	678875	CFGExitNode	EXIT		678861		True				
ANR	678876	Symbol	noBackup		678861						
ANR	678877	Symbol	state		678861						
ANR	678878	Function	ASConsole :: setOptionsFileName	868:0:21775:21856							
ANR	678879	FunctionDef	ASConsole :: setOptionsFileName (const string & name)		678878	0					
ANR	678880	CompoundStatement		869:0:21830:21856	678878	0					
ANR	678881	ExpressionStatement	optionsFileName = name	869:1:21832:21854	678878	0	True				
ANR	678882	AssignmentExpression	optionsFileName = name		678878	0		=			
ANR	678883	Identifier	optionsFileName		678878	0					
ANR	678884	Identifier	name		678878	1					
ANR	678885	ReturnType	void		678878	1					
ANR	678886	Identifier	ASConsole :: setOptionsFileName		678878	2					
ANR	678887	ParameterList	const string & name		678878	3					
ANR	678888	Parameter	const string & name	868:35:21810:21827	678878	0	True				
ANR	678889	ParameterType	const string &		678878	0					
ANR	678890	Identifier	name		678878	1					
ANR	678891	CFGEntryNode	ENTRY		678878		True				
ANR	678892	CFGExitNode	EXIT		678878		True				
ANR	678893	Symbol	name		678878						
ANR	678894	Symbol	optionsFileName		678878						
ANR	678895	Function	ASConsole :: setOrigSuffix	871:0:21859:21934							
ANR	678896	FunctionDef	ASConsole :: setOrigSuffix (const string & suffix)		678895	0					
ANR	678897	CompoundStatement		872:0:21911:21934	678895	0					
ANR	678898	ExpressionStatement	origSuffix = suffix	872:1:21913:21932	678895	0	True				
ANR	678899	AssignmentExpression	origSuffix = suffix		678895	0		=			
ANR	678900	Identifier	origSuffix		678895	0					
ANR	678901	Identifier	suffix		678895	1					
ANR	678902	ReturnType	void		678895	1					
ANR	678903	Identifier	ASConsole :: setOrigSuffix		678895	2					
ANR	678904	ParameterList	const string & suffix		678895	3					
ANR	678905	Parameter	const string & suffix	871:30:21889:21908	678895	0	True				
ANR	678906	ParameterType	const string &		678895	0					
ANR	678907	Identifier	suffix		678895	1					
ANR	678908	CFGEntryNode	ENTRY		678895		True				
ANR	678909	CFGExitNode	EXIT		678895		True				
ANR	678910	Symbol	origSuffix		678895						
ANR	678911	Symbol	suffix		678895						
ANR	678912	Function	ASConsole :: setPreserveDate	874:0:21937:22005							
ANR	678913	FunctionDef	ASConsole :: setPreserveDate (bool state)		678912	0					
ANR	678914	CompoundStatement		875:0:21981:22005	678912	0					
ANR	678915	ExpressionStatement	preserveDate = state	875:1:21983:22003	678912	0	True				
ANR	678916	AssignmentExpression	preserveDate = state		678912	0		=			
ANR	678917	Identifier	preserveDate		678912	0					
ANR	678918	Identifier	state		678912	1					
ANR	678919	ReturnType	void		678912	1					
ANR	678920	Identifier	ASConsole :: setPreserveDate		678912	2					
ANR	678921	ParameterList	bool state		678912	3					
ANR	678922	Parameter	bool state	874:32:21969:21978	678912	0	True				
ANR	678923	ParameterType	bool		678912	0					
ANR	678924	Identifier	state		678912	1					
ANR	678925	CFGEntryNode	ENTRY		678912		True				
ANR	678926	CFGExitNode	EXIT		678912		True				
ANR	678927	Symbol	preserveDate		678912						
ANR	678928	Symbol	state		678912						
ANR	678929	Function	ASConsole :: setStdPathIn	877:0:22008:22077							
ANR	678930	FunctionDef	ASConsole :: setStdPathIn (const string & path)		678929	0					
ANR	678931	CompoundStatement		878:0:22057:22077	678929	0					
ANR	678932	ExpressionStatement	stdPathIn = path	878:1:22059:22075	678929	0	True				
ANR	678933	AssignmentExpression	stdPathIn = path		678929	0		=			
ANR	678934	Identifier	stdPathIn		678929	0					
ANR	678935	Identifier	path		678929	1					
ANR	678936	ReturnType	void		678929	1					
ANR	678937	Identifier	ASConsole :: setStdPathIn		678929	2					
ANR	678938	ParameterList	const string & path		678929	3					
ANR	678939	Parameter	const string & path	877:29:22037:22054	678929	0	True				
ANR	678940	ParameterType	const string &		678929	0					
ANR	678941	Identifier	path		678929	1					
ANR	678942	CFGEntryNode	ENTRY		678929		True				
ANR	678943	CFGExitNode	EXIT		678929		True				
ANR	678944	Symbol	path		678929						
ANR	678945	Symbol	stdPathIn		678929						
ANR	678946	Function	ASConsole :: setStdPathOut	880:0:22080:22151							
ANR	678947	FunctionDef	ASConsole :: setStdPathOut (const string & path)		678946	0					
ANR	678948	CompoundStatement		881:0:22130:22151	678946	0					
ANR	678949	ExpressionStatement	stdPathOut = path	881:1:22132:22149	678946	0	True				
ANR	678950	AssignmentExpression	stdPathOut = path		678946	0		=			
ANR	678951	Identifier	stdPathOut		678946	0					
ANR	678952	Identifier	path		678946	1					
ANR	678953	ReturnType	void		678946	1					
ANR	678954	Identifier	ASConsole :: setStdPathOut		678946	2					
ANR	678955	ParameterList	const string & path		678946	3					
ANR	678956	Parameter	const string & path	880:30:22110:22127	678946	0	True				
ANR	678957	ParameterType	const string &		678946	0					
ANR	678958	Identifier	path		678946	1					
ANR	678959	CFGEntryNode	ENTRY		678946		True				
ANR	678960	CFGExitNode	EXIT		678946		True				
ANR	678961	Symbol	path		678946						
ANR	678962	Symbol	stdPathOut		678946						
ANR	678963	Function	ASConsole :: setOutputEOL	884:0:22180:22593							
ANR	678964	FunctionDef	"ASConsole :: setOutputEOL (LineEndFormat lineEndFormat , const string & currentEOL)"		678963	0					
ANR	678965	CompoundStatement		885:0:22264:22593	678963	0					
ANR	678966	IfStatement	if ( lineEndFormat == LINEEND_DEFAULT )		678963	0					
ANR	678967	Condition	lineEndFormat == LINEEND_DEFAULT	886:5:22271:22302	678963	0	True				
ANR	678968	EqualityExpression	lineEndFormat == LINEEND_DEFAULT		678963	0		==			
ANR	678969	Identifier	lineEndFormat		678963	0					
ANR	678970	Identifier	LINEEND_DEFAULT		678963	1					
ANR	678971	CompoundStatement		3:1:41:41	678963	1					
ANR	678972	ExpressionStatement	outputEOL = currentEOL	888:2:22310:22332	678963	0	True				
ANR	678973	AssignmentExpression	outputEOL = currentEOL		678963	0		=			
ANR	678974	Identifier	outputEOL		678963	0					
ANR	678975	Identifier	currentEOL		678963	1					
ANR	678976	IfStatement	if ( prevEOL . empty ( ) )		678963	1					
ANR	678977	Condition	prevEOL . empty ( )	889:6:22340:22354	678963	0	True				
ANR	678978	CallExpression	prevEOL . empty ( )		678963	0					
ANR	678979	Callee	prevEOL . empty		678963	0					
ANR	678980	MemberAccess	prevEOL . empty		678963	0					
ANR	678981	Identifier	prevEOL		678963	0					
ANR	678982	Identifier	empty		678963	1					
ANR	678983	ArgumentList			678963	1					
ANR	678984	ExpressionStatement	prevEOL = outputEOL	890:3:22360:22379	678963	1	True				
ANR	678985	AssignmentExpression	prevEOL = outputEOL		678963	0		=			
ANR	678986	Identifier	prevEOL		678963	0					
ANR	678987	Identifier	outputEOL		678963	1					
ANR	678988	IfStatement	if ( prevEOL != outputEOL )		678963	2					
ANR	678989	Condition	prevEOL != outputEOL	891:6:22387:22406	678963	0	True				
ANR	678990	EqualityExpression	prevEOL != outputEOL		678963	0		!=			
ANR	678991	Identifier	prevEOL		678963	0					
ANR	678992	Identifier	outputEOL		678963	1					
ANR	678993	CompoundStatement		8:2:146:146	678963	1					
ANR	678994	ExpressionStatement	lineEndsMixed = true	893:3:22416:22436	678963	0	True				
ANR	678995	AssignmentExpression	lineEndsMixed = true		678963	0		=			
ANR	678996	Identifier	lineEndsMixed		678963	0					
ANR	678997	Identifier	true		678963	1					
ANR	678998	ExpressionStatement	filesAreIdentical = false	894:3:22441:22466	678963	1	True				
ANR	678999	AssignmentExpression	filesAreIdentical = false		678963	0		=			
ANR	679000	Identifier	filesAreIdentical		678963	0					
ANR	679001	Identifier	false		678963	1					
ANR	679002	ExpressionStatement	prevEOL = outputEOL	895:3:22471:22490	678963	2	True				
ANR	679003	AssignmentExpression	prevEOL = outputEOL		678963	0		=			
ANR	679004	Identifier	prevEOL		678963	0					
ANR	679005	Identifier	outputEOL		678963	1					
ANR	679006	ElseStatement	else		678963	0					
ANR	679007	CompoundStatement		15:1:241:241	678963	0					
ANR	679008	ExpressionStatement	prevEOL = currentEOL	900:2:22510:22530	678963	0	True				
ANR	679009	AssignmentExpression	prevEOL = currentEOL		678963	0		=			
ANR	679010	Identifier	prevEOL		678963	0					
ANR	679011	Identifier	currentEOL		678963	1					
ANR	679012	IfStatement	if ( prevEOL != outputEOL )		678963	1					
ANR	679013	Condition	prevEOL != outputEOL	901:6:22538:22557	678963	0	True				
ANR	679014	EqualityExpression	prevEOL != outputEOL		678963	0		!=			
ANR	679015	Identifier	prevEOL		678963	0					
ANR	679016	Identifier	outputEOL		678963	1					
ANR	679017	ExpressionStatement	filesAreIdentical = false	902:3:22563:22588	678963	1	True				
ANR	679018	AssignmentExpression	filesAreIdentical = false		678963	0		=			
ANR	679019	Identifier	filesAreIdentical		678963	0					
ANR	679020	Identifier	false		678963	1					
ANR	679021	ReturnType	void		678963	1					
ANR	679022	Identifier	ASConsole :: setOutputEOL		678963	2					
ANR	679023	ParameterList	"LineEndFormat lineEndFormat , const string & currentEOL"		678963	3					
ANR	679024	Parameter	LineEndFormat lineEndFormat	884:29:22209:22235	678963	0	True				
ANR	679025	ParameterType	LineEndFormat		678963	0					
ANR	679026	Identifier	lineEndFormat		678963	1					
ANR	679027	Parameter	const string & currentEOL	884:58:22238:22261	678963	1	True				
ANR	679028	ParameterType	const string &		678963	0					
ANR	679029	Identifier	currentEOL		678963	1					
ANR	679030	CFGEntryNode	ENTRY		678963		True				
ANR	679031	CFGExitNode	EXIT		678963		True				
ANR	679032	Symbol	lineEndFormat		678963						
ANR	679033	Symbol	prevEOL		678963						
ANR	679034	Symbol	true		678963						
ANR	679035	Symbol	false		678963						
ANR	679036	Symbol	LINEEND_DEFAULT		678963						
ANR	679037	Symbol	filesAreIdentical		678963						
ANR	679038	Symbol	outputEOL		678963						
ANR	679039	Symbol	prevEOL . empty		678963						
ANR	679040	Symbol	currentEOL		678963						
ANR	679041	Symbol	lineEndsMixed		678963						
ANR	679042	Function	ASConsole :: displayLastError	911:0:22694:23210							
ANR	679043	FunctionDef	ASConsole :: displayLastError ()		679042	0					
ANR	679044	CompoundStatement		912:0:22729:23210	679042	0					
ANR	679045	IdentifierDeclStatement	LPSTR msgBuf ;	913:1:22732:22744	679042	0	True				
ANR	679046	IdentifierDecl	msgBuf		679042	0					
ANR	679047	IdentifierDeclType	LPSTR		679042	0					
ANR	679048	Identifier	msgBuf		679042	1					
ANR	679049	IdentifierDeclStatement	DWORD lastError = GetLastError ( ) ;	914:1:22747:22779	679042	1	True				
ANR	679050	IdentifierDecl	lastError = GetLastError ( )		679042	0					
ANR	679051	IdentifierDeclType	DWORD		679042	0					
ANR	679052	Identifier	lastError		679042	1					
ANR	679053	AssignmentExpression	lastError = GetLastError ( )		679042	2		=			
ANR	679054	Identifier	lastError		679042	0					
ANR	679055	CallExpression	GetLastError ( )		679042	1					
ANR	679056	Callee	GetLastError		679042	0					
ANR	679057	Identifier	GetLastError		679042	0					
ANR	679058	ArgumentList			679042	1					
ANR	679059	ExpressionStatement	"FormatMessage ( FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM , nullptr , lastError , MAKELANGID ( LANG_NEUTRAL , SUBLANG_DEFAULT ) , ( LPSTR ) & msgBuf , 0 , nullptr )"	915:1:22782:23074	679042	2	True				
ANR	679060	CallExpression	"FormatMessage ( FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM , nullptr , lastError , MAKELANGID ( LANG_NEUTRAL , SUBLANG_DEFAULT ) , ( LPSTR ) & msgBuf , 0 , nullptr )"		679042	0					
ANR	679061	Callee	FormatMessage		679042	0					
ANR	679062	Identifier	FormatMessage		679042	0					
ANR	679063	ArgumentList	FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM		679042	1					
ANR	679064	Argument	FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM		679042	0					
ANR	679065	InclusiveOrExpression	FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM		679042	0		|			
ANR	679066	Identifier	FORMAT_MESSAGE_ALLOCATE_BUFFER		679042	0					
ANR	679067	Identifier	FORMAT_MESSAGE_FROM_SYSTEM		679042	1					
ANR	679068	Argument	nullptr		679042	1					
ANR	679069	Identifier	nullptr		679042	0					
ANR	679070	Argument	lastError		679042	2					
ANR	679071	Identifier	lastError		679042	0					
ANR	679072	Argument	"MAKELANGID ( LANG_NEUTRAL , SUBLANG_DEFAULT )"		679042	3					
ANR	679073	CallExpression	"MAKELANGID ( LANG_NEUTRAL , SUBLANG_DEFAULT )"		679042	0					
ANR	679074	Callee	MAKELANGID		679042	0					
ANR	679075	Identifier	MAKELANGID		679042	0					
ANR	679076	ArgumentList	LANG_NEUTRAL		679042	1					
ANR	679077	Argument	LANG_NEUTRAL		679042	0					
ANR	679078	Identifier	LANG_NEUTRAL		679042	0					
ANR	679079	Argument	SUBLANG_DEFAULT		679042	1					
ANR	679080	Identifier	SUBLANG_DEFAULT		679042	0					
ANR	679081	Argument	( LPSTR ) & msgBuf		679042	4					
ANR	679082	CastExpression	( LPSTR ) & msgBuf		679042	0					
ANR	679083	CastTarget	LPSTR		679042	0					
ANR	679084	UnaryOperationExpression	& msgBuf		679042	1					
ANR	679085	UnaryOperator	&		679042	0					
ANR	679086	Identifier	msgBuf		679042	1					
ANR	679087	Argument	0		679042	5					
ANR	679088	PrimaryExpression	0		679042	0					
ANR	679089	Argument	nullptr		679042	6					
ANR	679090	Identifier	nullptr		679042	0					
ANR	679091	ExpressionStatement	"( * errorStream ) << ""Error ("" << lastError << "") "" << msgBuf << endl"	924:1:23101:23167	679042	3	True				
ANR	679092	ShiftExpression	"( * errorStream ) << ""Error ("" << lastError << "") "" << msgBuf << endl"		679042	0		<<			
ANR	679093	UnaryOperationExpression	* errorStream		679042	0					
ANR	679094	UnaryOperator	*		679042	0					
ANR	679095	Identifier	errorStream		679042	1					
ANR	679096	ShiftExpression	"""Error ("" << lastError << "") "" << msgBuf << endl"		679042	1		<<			
ANR	679097	PrimaryExpression	"""Error ("""		679042	0					
ANR	679098	ShiftExpression	"lastError << "") "" << msgBuf << endl"		679042	1		<<			
ANR	679099	Identifier	lastError		679042	0					
ANR	679100	ShiftExpression	""") "" << msgBuf << endl"		679042	1		<<			
ANR	679101	PrimaryExpression	""") """		679042	0					
ANR	679102	ShiftExpression	msgBuf << endl		679042	1		<<			
ANR	679103	Identifier	msgBuf		679042	0					
ANR	679104	Identifier	endl		679042	1					
ANR	679105	ExpressionStatement	LocalFree ( msgBuf )	926:1:23191:23208	679042	4	True				
ANR	679106	CallExpression	LocalFree ( msgBuf )		679042	0					
ANR	679107	Callee	LocalFree		679042	0					
ANR	679108	Identifier	LocalFree		679042	0					
ANR	679109	ArgumentList	msgBuf		679042	1					
ANR	679110	Argument	msgBuf		679042	0					
ANR	679111	Identifier	msgBuf		679042	0					
ANR	679112	ReturnType	void		679042	1					
ANR	679113	Identifier	ASConsole :: displayLastError		679042	2					
ANR	679114	ParameterList			679042	3					
ANR	679115	CFGEntryNode	ENTRY		679042		True				
ANR	679116	CFGExitNode	EXIT		679042		True				
ANR	679117	Symbol	MAKELANGID		679042						
ANR	679118	Symbol	FORMAT_MESSAGE_ALLOCATE_BUFFER		679042						
ANR	679119	Symbol	lastError		679042						
ANR	679120	Symbol	errorStream		679042						
ANR	679121	Symbol	& msgBuf		679042						
ANR	679122	Symbol	LANG_NEUTRAL		679042						
ANR	679123	Symbol	msgBuf		679042						
ANR	679124	Symbol	GetLastError		679042						
ANR	679125	Symbol	SUBLANG_DEFAULT		679042						
ANR	679126	Symbol	FORMAT_MESSAGE_FROM_SYSTEM		679042						
ANR	679127	Symbol	nullptr		679042						
ANR	679128	Function	ASConsole :: getCurrentDirectory	936:0:23455:23697							
ANR	679129	FunctionDef	ASConsole :: getCurrentDirectory (const string & fileName_)		679128	0					
ANR	679130	CompoundStatement		937:0:23524:23697	679128	0					
ANR	679131	IdentifierDeclStatement	char currdir [ MAX_PATH ] ;	938:1:23527:23549	679128	0	True				
ANR	679132	IdentifierDecl	currdir [ MAX_PATH ]		679128	0					
ANR	679133	IdentifierDeclType	char [ MAX_PATH ]		679128	0					
ANR	679134	Identifier	currdir		679128	1					
ANR	679135	Identifier	MAX_PATH		679128	2					
ANR	679136	ExpressionStatement	currdir [ 0 ] = '\\0'	939:1:23552:23569	679128	1	True				
ANR	679137	AssignmentExpression	currdir [ 0 ] = '\\0'		679128	0		=			
ANR	679138	ArrayIndexing	currdir [ 0 ]		679128	0					
ANR	679139	Identifier	currdir		679128	0					
ANR	679140	PrimaryExpression	0		679128	1					
ANR	679141	PrimaryExpression	'\\0'		679128	1					
ANR	679142	IfStatement	"if ( ! GetCurrentDirectory ( sizeof ( currdir ) , currdir ) )"		679128	2					
ANR	679143	Condition	"! GetCurrentDirectory ( sizeof ( currdir ) , currdir )"	940:5:23576:23621	679128	0	True				
ANR	679144	UnaryOperationExpression	"! GetCurrentDirectory ( sizeof ( currdir ) , currdir )"		679128	0					
ANR	679145	UnaryOperator	!		679128	0					
ANR	679146	CallExpression	"GetCurrentDirectory ( sizeof ( currdir ) , currdir )"		679128	1					
ANR	679147	Callee	GetCurrentDirectory		679128	0					
ANR	679148	Identifier	GetCurrentDirectory		679128	0					
ANR	679149	ArgumentList	sizeof ( currdir )		679128	1					
ANR	679150	Argument	sizeof ( currdir )		679128	0					
ANR	679151	SizeofExpression	sizeof ( currdir )		679128	0					
ANR	679152	Sizeof	sizeof		679128	0					
ANR	679153	SizeofOperand	currdir		679128	1					
ANR	679154	Argument	currdir		679128	1					
ANR	679155	Identifier	currdir		679128	0					
ANR	679156	ExpressionStatement	"error ( ""Cannot find file"" , fileName_ . c_str ( ) )"	941:2:23626:23670	679128	1	True				
ANR	679157	CallExpression	"error ( ""Cannot find file"" , fileName_ . c_str ( ) )"		679128	0					
ANR	679158	Callee	error		679128	0					
ANR	679159	Identifier	error		679128	0					
ANR	679160	ArgumentList	"""Cannot find file"""		679128	1					
ANR	679161	Argument	"""Cannot find file"""		679128	0					
ANR	679162	PrimaryExpression	"""Cannot find file"""		679128	0					
ANR	679163	Argument	fileName_ . c_str ( )		679128	1					
ANR	679164	CallExpression	fileName_ . c_str ( )		679128	0					
ANR	679165	Callee	fileName_ . c_str		679128	0					
ANR	679166	MemberAccess	fileName_ . c_str		679128	0					
ANR	679167	Identifier	fileName_		679128	0					
ANR	679168	Identifier	c_str		679128	1					
ANR	679169	ArgumentList			679128	1					
ANR	679170	ReturnStatement	return string ( currdir ) ;	942:1:23673:23695	679128	3	True				
ANR	679171	CallExpression	string ( currdir )		679128	0					
ANR	679172	Callee	string		679128	0					
ANR	679173	Identifier	string		679128	0					
ANR	679174	ArgumentList	currdir		679128	1					
ANR	679175	Argument	currdir		679128	0					
ANR	679176	Identifier	currdir		679128	0					
ANR	679177	ReturnType	string		679128	1					
ANR	679178	Identifier	ASConsole :: getCurrentDirectory		679128	2					
ANR	679179	ParameterList	const string & fileName_		679128	3					
ANR	679180	Parameter	const string & fileName_	936:38:23493:23515	679128	0	True				
ANR	679181	ParameterType	const string &		679128	0					
ANR	679182	Identifier	fileName_		679128	1					
ANR	679183	CFGEntryNode	ENTRY		679128		True				
ANR	679184	CFGExitNode	EXIT		679128		True				
ANR	679185	Symbol	currdir		679128						
ANR	679186	Symbol	string		679128						
ANR	679187	Symbol	fileName_ . c_str		679128						
ANR	679188	Symbol	GetCurrentDirectory		679128						
ANR	679189	Symbol	fileName_		679128						
ANR	679190	Symbol	* currdir		679128						
ANR	679191	Function	ASConsole :: getFileNames	952:0:23998:26329							
ANR	679192	FunctionDef	"ASConsole :: getFileNames (const string & directory , const string & wildcard)"		679191	0					
ANR	679193	CompoundStatement		953:0:24076:26329	679191	0					
ANR	679194	IdentifierDeclStatement	vector < string > subDirectory ;	954:1:24079:24106	679191	0	True				
ANR	679195	IdentifierDecl	subDirectory		679191	0					
ANR	679196	IdentifierDeclType	vector < string >		679191	0					
ANR	679197	Identifier	subDirectory		679191	1					
ANR	679198	IdentifierDeclStatement	WIN32_FIND_DATA findFileData ;	955:1:24144:24172	679191	1	True				
ANR	679199	IdentifierDecl	findFileData		679191	0					
ANR	679200	IdentifierDeclType	WIN32_FIND_DATA		679191	0					
ANR	679201	Identifier	findFileData		679191	1					
ANR	679202	IdentifierDeclStatement	"string firstFile = directory + ""\\\\*"" ;"	959:1:24298:24334	679191	2	True				
ANR	679203	IdentifierDecl	"firstFile = directory + ""\\\\*"""		679191	0					
ANR	679204	IdentifierDeclType	string		679191	0					
ANR	679205	Identifier	firstFile		679191	1					
ANR	679206	AssignmentExpression	"firstFile = directory + ""\\\\*"""		679191	2		=			
ANR	679207	Identifier	firstFile		679191	0					
ANR	679208	AdditiveExpression	"directory + ""\\\\*"""		679191	1		+			
ANR	679209	Identifier	directory		679191	0					
ANR	679210	PrimaryExpression	"""\\\\*"""		679191	1					
ANR	679211	IdentifierDeclStatement	"HANDLE hFind = FindFirstFile ( firstFile . c_str ( ) , & findFileData ) ;"	960:1:24337:24399	679191	3	True				
ANR	679212	IdentifierDecl	"hFind = FindFirstFile ( firstFile . c_str ( ) , & findFileData )"		679191	0					
ANR	679213	IdentifierDeclType	HANDLE		679191	0					
ANR	679214	Identifier	hFind		679191	1					
ANR	679215	AssignmentExpression	"hFind = FindFirstFile ( firstFile . c_str ( ) , & findFileData )"		679191	2		=			
ANR	679216	Identifier	hFind		679191	0					
ANR	679217	CallExpression	"FindFirstFile ( firstFile . c_str ( ) , & findFileData )"		679191	1					
ANR	679218	Callee	FindFirstFile		679191	0					
ANR	679219	Identifier	FindFirstFile		679191	0					
ANR	679220	ArgumentList	firstFile . c_str ( )		679191	1					
ANR	679221	Argument	firstFile . c_str ( )		679191	0					
ANR	679222	CallExpression	firstFile . c_str ( )		679191	0					
ANR	679223	Callee	firstFile . c_str		679191	0					
ANR	679224	MemberAccess	firstFile . c_str		679191	0					
ANR	679225	Identifier	firstFile		679191	0					
ANR	679226	Identifier	c_str		679191	1					
ANR	679227	ArgumentList			679191	1					
ANR	679228	Argument	& findFileData		679191	1					
ANR	679229	UnaryOperationExpression	& findFileData		679191	0					
ANR	679230	UnaryOperator	&		679191	0					
ANR	679231	Identifier	findFileData		679191	1					
ANR	679232	IfStatement	if ( hFind == INVALID_HANDLE_VALUE )		679191	4					
ANR	679233	Condition	hFind == INVALID_HANDLE_VALUE	962:5:24407:24435	679191	0	True				
ANR	679234	EqualityExpression	hFind == INVALID_HANDLE_VALUE		679191	0		==			
ANR	679235	Identifier	hFind		679191	0					
ANR	679236	Identifier	INVALID_HANDLE_VALUE		679191	1					
ANR	679237	CompoundStatement		11:1:362:362	679191	1					
ANR	679238	ExpressionStatement	displayLastError ( )	967:2:24625:24643	679191	0	True				
ANR	679239	CallExpression	displayLastError ( )		679191	0					
ANR	679240	Callee	displayLastError		679191	0					
ANR	679241	Identifier	displayLastError		679191	0					
ANR	679242	ArgumentList			679191	1					
ANR	679243	ExpressionStatement	"error ( _ ( ""Cannot open directory"" ) , directory . c_str ( ) )"	968:2:24647:24699	679191	1	True				
ANR	679244	CallExpression	"error ( _ ( ""Cannot open directory"" ) , directory . c_str ( ) )"		679191	0					
ANR	679245	Callee	error		679191	0					
ANR	679246	Identifier	error		679191	0					
ANR	679247	ArgumentList	"_ ( ""Cannot open directory"" )"		679191	1					
ANR	679248	Argument	"_ ( ""Cannot open directory"" )"		679191	0					
ANR	679249	CallExpression	"_ ( ""Cannot open directory"" )"		679191	0					
ANR	679250	Callee	_		679191	0					
ANR	679251	Identifier	_		679191	0					
ANR	679252	ArgumentList	"""Cannot open directory"""		679191	1					
ANR	679253	Argument	"""Cannot open directory"""		679191	0					
ANR	679254	PrimaryExpression	"""Cannot open directory"""		679191	0					
ANR	679255	Argument	directory . c_str ( )		679191	1					
ANR	679256	CallExpression	directory . c_str ( )		679191	0					
ANR	679257	Callee	directory . c_str		679191	0					
ANR	679258	MemberAccess	directory . c_str		679191	0					
ANR	679259	Identifier	directory		679191	0					
ANR	679260	Identifier	c_str		679191	1					
ANR	679261	ArgumentList			679191	1					
ANR	679262	DoStatement	do		679191	5					
ANR	679263	CompoundStatement		45:2:1536:1581	679191	0					
ANR	679264	IfStatement	if ( findFileData . cFileName [ 0 ] == '.' || ( findFileData . dwFileAttributes & FILE_ATTRIBUTE_HIDDEN ) || ( findFileData . dwFileAttributes & FILE_ATTRIBUTE_READONLY ) )		679191	0					
ANR	679265	Condition	findFileData . cFileName [ 0 ] == '.' || ( findFileData . dwFileAttributes & FILE_ATTRIBUTE_HIDDEN ) || ( findFileData . dwFileAttributes & FILE_ATTRIBUTE_READONLY )	975:6:24783:24954	679191	0	True				
ANR	679266	OrExpression	findFileData . cFileName [ 0 ] == '.' || ( findFileData . dwFileAttributes & FILE_ATTRIBUTE_HIDDEN ) || ( findFileData . dwFileAttributes & FILE_ATTRIBUTE_READONLY )		679191	0		||			
ANR	679267	EqualityExpression	findFileData . cFileName [ 0 ] == '.'		679191	0		==			
ANR	679268	ArrayIndexing	findFileData . cFileName [ 0 ]		679191	0					
ANR	679269	MemberAccess	findFileData . cFileName		679191	0					
ANR	679270	Identifier	findFileData		679191	0					
ANR	679271	Identifier	cFileName		679191	1					
ANR	679272	PrimaryExpression	0		679191	1					
ANR	679273	PrimaryExpression	'.'		679191	1					
ANR	679274	OrExpression	( findFileData . dwFileAttributes & FILE_ATTRIBUTE_HIDDEN ) || ( findFileData . dwFileAttributes & FILE_ATTRIBUTE_READONLY )		679191	1		||			
ANR	679275	BitAndExpression	findFileData . dwFileAttributes & FILE_ATTRIBUTE_HIDDEN		679191	0		&			
ANR	679276	MemberAccess	findFileData . dwFileAttributes		679191	0					
ANR	679277	Identifier	findFileData		679191	0					
ANR	679278	Identifier	dwFileAttributes		679191	1					
ANR	679279	Identifier	FILE_ATTRIBUTE_HIDDEN		679191	1					
ANR	679280	BitAndExpression	findFileData . dwFileAttributes & FILE_ATTRIBUTE_READONLY		679191	1		&			
ANR	679281	MemberAccess	findFileData . dwFileAttributes		679191	0					
ANR	679282	Identifier	findFileData		679191	0					
ANR	679283	Identifier	dwFileAttributes		679191	1					
ANR	679284	Identifier	FILE_ATTRIBUTE_READONLY		679191	1					
ANR	679285	ContinueStatement	continue ;	978:3:24960:24968	679191	1	True				
ANR	679286	IfStatement	if ( findFileData . dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY )		679191	1					
ANR	679287	Condition	findFileData . dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY	981:6:25006:25061	679191	0	True				
ANR	679288	BitAndExpression	findFileData . dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY		679191	0		&			
ANR	679289	MemberAccess	findFileData . dwFileAttributes		679191	0					
ANR	679290	Identifier	findFileData		679191	0					
ANR	679291	Identifier	dwFileAttributes		679191	1					
ANR	679292	Identifier	FILE_ATTRIBUTE_DIRECTORY		679191	1					
ANR	679293	CompoundStatement		34:3:1088:1166	679191	1					
ANR	679294	IfStatement	if ( ! isRecursive )		679191	0					
ANR	679295	Condition	! isRecursive	983:7:25075:25086	679191	0	True				
ANR	679296	UnaryOperationExpression	! isRecursive		679191	0					
ANR	679297	UnaryOperator	!		679191	0					
ANR	679298	Identifier	isRecursive		679191	1					
ANR	679299	ContinueStatement	continue ;	984:4:25093:25101	679191	1	True				
ANR	679300	IdentifierDeclStatement	string subDirectoryPath = directory + g_fileSeparator + findFileData . cFileName ;	986:3:25165:25243	679191	1	True				
ANR	679301	IdentifierDecl	subDirectoryPath = directory + g_fileSeparator + findFileData . cFileName		679191	0					
ANR	679302	IdentifierDeclType	string		679191	0					
ANR	679303	Identifier	subDirectoryPath		679191	1					
ANR	679304	AssignmentExpression	subDirectoryPath = directory + g_fileSeparator + findFileData . cFileName		679191	2		=			
ANR	679305	Identifier	subDirectoryPath		679191	0					
ANR	679306	AdditiveExpression	directory + g_fileSeparator + findFileData . cFileName		679191	1		+			
ANR	679307	Identifier	directory		679191	0					
ANR	679308	AdditiveExpression	g_fileSeparator + findFileData . cFileName		679191	1		+			
ANR	679309	Identifier	g_fileSeparator		679191	0					
ANR	679310	MemberAccess	findFileData . cFileName		679191	1					
ANR	679311	Identifier	findFileData		679191	0					
ANR	679312	Identifier	cFileName		679191	1					
ANR	679313	IfStatement	if ( isPathExclued ( subDirectoryPath ) )		679191	2					
ANR	679314	Condition	isPathExclued ( subDirectoryPath )	987:7:25252:25282	679191	0	True				
ANR	679315	CallExpression	isPathExclued ( subDirectoryPath )		679191	0					
ANR	679316	Callee	isPathExclued		679191	0					
ANR	679317	Identifier	isPathExclued		679191	0					
ANR	679318	ArgumentList	subDirectoryPath		679191	1					
ANR	679319	Argument	subDirectoryPath		679191	0					
ANR	679320	Identifier	subDirectoryPath		679191	0					
ANR	679321	ExpressionStatement	"printMsg ( _ ( ""Exclude  %s\\n"" ) , subDirectoryPath . substr ( mainDirectoryLength ) )"	988:4:25289:25363	679191	1	True				
ANR	679322	CallExpression	"printMsg ( _ ( ""Exclude  %s\\n"" ) , subDirectoryPath . substr ( mainDirectoryLength ) )"		679191	0					
ANR	679323	Callee	printMsg		679191	0					
ANR	679324	Identifier	printMsg		679191	0					
ANR	679325	ArgumentList	"_ ( ""Exclude  %s\\n"" )"		679191	1					
ANR	679326	Argument	"_ ( ""Exclude  %s\\n"" )"		679191	0					
ANR	679327	CallExpression	"_ ( ""Exclude  %s\\n"" )"		679191	0					
ANR	679328	Callee	_		679191	0					
ANR	679329	Identifier	_		679191	0					
ANR	679330	ArgumentList	"""Exclude  %s\\n"""		679191	1					
ANR	679331	Argument	"""Exclude  %s\\n"""		679191	0					
ANR	679332	PrimaryExpression	"""Exclude  %s\\n"""		679191	0					
ANR	679333	Argument	subDirectoryPath . substr ( mainDirectoryLength )		679191	1					
ANR	679334	CallExpression	subDirectoryPath . substr ( mainDirectoryLength )		679191	0					
ANR	679335	Callee	subDirectoryPath . substr		679191	0					
ANR	679336	MemberAccess	subDirectoryPath . substr		679191	0					
ANR	679337	Identifier	subDirectoryPath		679191	0					
ANR	679338	Identifier	substr		679191	1					
ANR	679339	ArgumentList	mainDirectoryLength		679191	1					
ANR	679340	Argument	mainDirectoryLength		679191	0					
ANR	679341	Identifier	mainDirectoryLength		679191	0					
ANR	679342	ElseStatement	else		679191	0					
ANR	679343	ExpressionStatement	subDirectory . emplace_back ( subDirectoryPath )	990:4:25377:25420	679191	0	True				
ANR	679344	CallExpression	subDirectory . emplace_back ( subDirectoryPath )		679191	0					
ANR	679345	Callee	subDirectory . emplace_back		679191	0					
ANR	679346	MemberAccess	subDirectory . emplace_back		679191	0					
ANR	679347	Identifier	subDirectory		679191	0					
ANR	679348	Identifier	emplace_back		679191	1					
ANR	679349	ArgumentList	subDirectoryPath		679191	1					
ANR	679350	Argument	subDirectoryPath		679191	0					
ANR	679351	Identifier	subDirectoryPath		679191	0					
ANR	679352	ContinueStatement	continue ;	991:3:25425:25433	679191	3	True				
ANR	679353	IdentifierDeclStatement	string filePathName = directory + g_fileSeparator + findFileData . cFileName ;	995:2:25466:25540	679191	2	True				
ANR	679354	IdentifierDecl	filePathName = directory + g_fileSeparator + findFileData . cFileName		679191	0					
ANR	679355	IdentifierDeclType	string		679191	0					
ANR	679356	Identifier	filePathName		679191	1					
ANR	679357	AssignmentExpression	filePathName = directory + g_fileSeparator + findFileData . cFileName		679191	2		=			
ANR	679358	Identifier	filePathName		679191	0					
ANR	679359	AdditiveExpression	directory + g_fileSeparator + findFileData . cFileName		679191	1		+			
ANR	679360	Identifier	directory		679191	0					
ANR	679361	AdditiveExpression	g_fileSeparator + findFileData . cFileName		679191	1		+			
ANR	679362	Identifier	g_fileSeparator		679191	0					
ANR	679363	MemberAccess	findFileData . cFileName		679191	1					
ANR	679364	Identifier	findFileData		679191	0					
ANR	679365	Identifier	cFileName		679191	1					
ANR	679366	IdentifierDeclStatement	bool isExcluded = isPathExclued ( filePathName ) ;	997:2:25613:25658	679191	3	True				
ANR	679367	IdentifierDecl	isExcluded = isPathExclued ( filePathName )		679191	0					
ANR	679368	IdentifierDeclType	bool		679191	0					
ANR	679369	Identifier	isExcluded		679191	1					
ANR	679370	AssignmentExpression	isExcluded = isPathExclued ( filePathName )		679191	2		=			
ANR	679371	Identifier	isExcluded		679191	0					
ANR	679372	CallExpression	isPathExclued ( filePathName )		679191	1					
ANR	679373	Callee	isPathExclued		679191	0					
ANR	679374	Identifier	isPathExclued		679191	0					
ANR	679375	ArgumentList	filePathName		679191	1					
ANR	679376	Argument	filePathName		679191	0					
ANR	679377	Identifier	filePathName		679191	0					
ANR	679378	IfStatement	"if ( wildcmp ( wildcard . c_str ( ) , findFileData . cFileName ) )"		679191	4					
ANR	679379	Condition	"wildcmp ( wildcard . c_str ( ) , findFileData . cFileName )"	999:6:25704:25752	679191	0	True				
ANR	679380	CallExpression	"wildcmp ( wildcard . c_str ( ) , findFileData . cFileName )"		679191	0					
ANR	679381	Callee	wildcmp		679191	0					
ANR	679382	Identifier	wildcmp		679191	0					
ANR	679383	ArgumentList	wildcard . c_str ( )		679191	1					
ANR	679384	Argument	wildcard . c_str ( )		679191	0					
ANR	679385	CallExpression	wildcard . c_str ( )		679191	0					
ANR	679386	Callee	wildcard . c_str		679191	0					
ANR	679387	MemberAccess	wildcard . c_str		679191	0					
ANR	679388	Identifier	wildcard		679191	0					
ANR	679389	Identifier	c_str		679191	1					
ANR	679390	ArgumentList			679191	1					
ANR	679391	Argument	findFileData . cFileName		679191	1					
ANR	679392	MemberAccess	findFileData . cFileName		679191	0					
ANR	679393	Identifier	findFileData		679191	0					
ANR	679394	Identifier	cFileName		679191	1					
ANR	679395	CompoundStatement		48:2:1680:1680	679191	1					
ANR	679396	IfStatement	if ( isExcluded )		679191	0					
ANR	679397	Condition	isExcluded	1001:7:25766:25775	679191	0	True				
ANR	679398	Identifier	isExcluded		679191	0					
ANR	679399	ExpressionStatement	"printMsg ( _ ( ""Exclude  %s\\n"" ) , filePathName . substr ( mainDirectoryLength ) )"	1002:4:25782:25852	679191	1	True				
ANR	679400	CallExpression	"printMsg ( _ ( ""Exclude  %s\\n"" ) , filePathName . substr ( mainDirectoryLength ) )"		679191	0					
ANR	679401	Callee	printMsg		679191	0					
ANR	679402	Identifier	printMsg		679191	0					
ANR	679403	ArgumentList	"_ ( ""Exclude  %s\\n"" )"		679191	1					
ANR	679404	Argument	"_ ( ""Exclude  %s\\n"" )"		679191	0					
ANR	679405	CallExpression	"_ ( ""Exclude  %s\\n"" )"		679191	0					
ANR	679406	Callee	_		679191	0					
ANR	679407	Identifier	_		679191	0					
ANR	679408	ArgumentList	"""Exclude  %s\\n"""		679191	1					
ANR	679409	Argument	"""Exclude  %s\\n"""		679191	0					
ANR	679410	PrimaryExpression	"""Exclude  %s\\n"""		679191	0					
ANR	679411	Argument	filePathName . substr ( mainDirectoryLength )		679191	1					
ANR	679412	CallExpression	filePathName . substr ( mainDirectoryLength )		679191	0					
ANR	679413	Callee	filePathName . substr		679191	0					
ANR	679414	MemberAccess	filePathName . substr		679191	0					
ANR	679415	Identifier	filePathName		679191	0					
ANR	679416	Identifier	substr		679191	1					
ANR	679417	ArgumentList	mainDirectoryLength		679191	1					
ANR	679418	Argument	mainDirectoryLength		679191	0					
ANR	679419	Identifier	mainDirectoryLength		679191	0					
ANR	679420	ElseStatement	else		679191	0					
ANR	679421	ExpressionStatement	fileName . emplace_back ( filePathName )	1004:4:25866:25901	679191	0	True				
ANR	679422	CallExpression	fileName . emplace_back ( filePathName )		679191	0					
ANR	679423	Callee	fileName . emplace_back		679191	0					
ANR	679424	MemberAccess	fileName . emplace_back		679191	0					
ANR	679425	Identifier	fileName		679191	0					
ANR	679426	Identifier	emplace_back		679191	1					
ANR	679427	ArgumentList	filePathName		679191	1					
ANR	679428	Argument	filePathName		679191	0					
ANR	679429	Identifier	filePathName		679191	0					
ANR	679430	Condition	"FindNextFile ( hFind , & findFileData ) != 0"	1007:8:25918:25956	679191	1	True				
ANR	679431	EqualityExpression	"FindNextFile ( hFind , & findFileData ) != 0"		679191	0		!=			
ANR	679432	CallExpression	"FindNextFile ( hFind , & findFileData )"		679191	0					
ANR	679433	Callee	FindNextFile		679191	0					
ANR	679434	Identifier	FindNextFile		679191	0					
ANR	679435	ArgumentList	hFind		679191	1					
ANR	679436	Argument	hFind		679191	0					
ANR	679437	Identifier	hFind		679191	0					
ANR	679438	Argument	& findFileData		679191	1					
ANR	679439	UnaryOperationExpression	& findFileData		679191	0					
ANR	679440	UnaryOperator	&		679191	0					
ANR	679441	Identifier	findFileData		679191	1					
ANR	679442	PrimaryExpression	0		679191	1					
ANR	679443	Statement	::	1010:1:25993:25994	679191	6	True				
ANR	679444	ExpressionStatement	FindClose ( hFind )	1010:3:25995:26011	679191	7	True				
ANR	679445	CallExpression	FindClose ( hFind )		679191	0					
ANR	679446	Callee	FindClose		679191	0					
ANR	679447	Identifier	FindClose		679191	0					
ANR	679448	ArgumentList	hFind		679191	1					
ANR	679449	Argument	hFind		679191	0					
ANR	679450	Identifier	hFind		679191	0					
ANR	679451	IdentifierDeclStatement	DWORD dwError = GetLastError ( ) ;	1011:1:26014:26044	679191	8	True				
ANR	679452	IdentifierDecl	dwError = GetLastError ( )		679191	0					
ANR	679453	IdentifierDeclType	DWORD		679191	0					
ANR	679454	Identifier	dwError		679191	1					
ANR	679455	AssignmentExpression	dwError = GetLastError ( )		679191	2		=			
ANR	679456	Identifier	dwError		679191	0					
ANR	679457	CallExpression	GetLastError ( )		679191	1					
ANR	679458	Callee	GetLastError		679191	0					
ANR	679459	Identifier	GetLastError		679191	0					
ANR	679460	ArgumentList			679191	1					
ANR	679461	IfStatement	if ( dwError != ERROR_NO_MORE_FILES )		679191	9					
ANR	679462	Condition	dwError != ERROR_NO_MORE_FILES	1012:5:26051:26080	679191	0	True				
ANR	679463	EqualityExpression	dwError != ERROR_NO_MORE_FILES		679191	0		!=			
ANR	679464	Identifier	dwError		679191	0					
ANR	679465	Identifier	ERROR_NO_MORE_FILES		679191	1					
ANR	679466	ExpressionStatement	"error ( ""Error processing directory"" , directory . c_str ( ) )"	1013:2:26085:26139	679191	1	True				
ANR	679467	CallExpression	"error ( ""Error processing directory"" , directory . c_str ( ) )"		679191	0					
ANR	679468	Callee	error		679191	0					
ANR	679469	Identifier	error		679191	0					
ANR	679470	ArgumentList	"""Error processing directory"""		679191	1					
ANR	679471	Argument	"""Error processing directory"""		679191	0					
ANR	679472	PrimaryExpression	"""Error processing directory"""		679191	0					
ANR	679473	Argument	directory . c_str ( )		679191	1					
ANR	679474	CallExpression	directory . c_str ( )		679191	0					
ANR	679475	Callee	directory . c_str		679191	0					
ANR	679476	MemberAccess	directory . c_str		679191	0					
ANR	679477	Identifier	directory		679191	0					
ANR	679478	Identifier	c_str		679191	1					
ANR	679479	ArgumentList			679191	1					
ANR	679480	ForStatement	for ( unsigned i = 0 ; i < subDirectory . size ( ) ; i ++ )		679191	10					
ANR	679481	ForInit	unsigned i = 0 ;	1017:6:26230:26244	679191	0	True				
ANR	679482	IdentifierDeclStatement	unsigned i = 0 ;		679191	0					
ANR	679483	IdentifierDecl	i = 0		679191	0					
ANR	679484	IdentifierDeclType	unsigned		679191	0					
ANR	679485	Identifier	i		679191	1					
ANR	679486	AssignmentExpression	i = 0		679191	2		=			
ANR	679487	Identifier	i		679191	0					
ANR	679488	PrimaryExpression	0		679191	1					
ANR	679489	Condition	i < subDirectory . size ( )	1017:22:26246:26268	679191	1	True				
ANR	679490	RelationalExpression	i < subDirectory . size ( )		679191	0		<			
ANR	679491	Identifier	i		679191	0					
ANR	679492	CallExpression	subDirectory . size ( )		679191	1					
ANR	679493	Callee	subDirectory . size		679191	0					
ANR	679494	MemberAccess	subDirectory . size		679191	0					
ANR	679495	Identifier	subDirectory		679191	0					
ANR	679496	Identifier	size		679191	1					
ANR	679497	ArgumentList			679191	1					
ANR	679498	PostIncDecOperationExpression	i ++	1017:47:26271:26273	679191	2	True				
ANR	679499	Identifier	i		679191	0					
ANR	679500	IncDec	++		679191	1					
ANR	679501	ExpressionStatement	"getFileNames ( subDirectory [ i ] , wildcard )"	1018:2:26278:26317	679191	3	True				
ANR	679502	CallExpression	"getFileNames ( subDirectory [ i ] , wildcard )"		679191	0					
ANR	679503	Callee	getFileNames		679191	0					
ANR	679504	Identifier	getFileNames		679191	0					
ANR	679505	ArgumentList	subDirectory [ i ]		679191	1					
ANR	679506	Argument	subDirectory [ i ]		679191	0					
ANR	679507	ArrayIndexing	subDirectory [ i ]		679191	0					
ANR	679508	Identifier	subDirectory		679191	0					
ANR	679509	Identifier	i		679191	1					
ANR	679510	Argument	wildcard		679191	1					
ANR	679511	Identifier	wildcard		679191	0					
ANR	679512	ReturnStatement	return ;	1020:1:26321:26327	679191	11	True				
ANR	679513	ReturnType	void		679191	1					
ANR	679514	Identifier	ASConsole :: getFileNames		679191	2					
ANR	679515	ParameterList	"const string & directory , const string & wildcard"		679191	3					
ANR	679516	Parameter	const string & directory	952:29:24027:24049	679191	0	True				
ANR	679517	ParameterType	const string &		679191	0					
ANR	679518	Identifier	directory		679191	1					
ANR	679519	Parameter	const string & wildcard	952:54:24052:24073	679191	1	True				
ANR	679520	ParameterType	const string &		679191	0					
ANR	679521	Identifier	wildcard		679191	1					
ANR	679522	CFGEntryNode	ENTRY		679191		True				
ANR	679523	CFGExitNode	EXIT		679191		True				
ANR	679524	Symbol	fileName		679191						
ANR	679525	Symbol	findFileData		679191						
ANR	679526	Symbol	isPathExclued		679191						
ANR	679527	Symbol	* subDirectory		679191						
ANR	679528	Symbol	isExcluded		679191						
ANR	679529	Symbol	filePathName . substr		679191						
ANR	679530	Symbol	subDirectoryPath		679191						
ANR	679531	Symbol	* findFileData		679191						
ANR	679532	Symbol	FILE_ATTRIBUTE_DIRECTORY		679191						
ANR	679533	Symbol	wildcard . c_str		679191						
ANR	679534	Symbol	FindFirstFile		679191						
ANR	679535	Symbol	directory		679191						
ANR	679536	Symbol	wildcard		679191						
ANR	679537	Symbol	subDirectory		679191						
ANR	679538	Symbol	subDirectoryPath . substr		679191						
ANR	679539	Symbol	isRecursive		679191						
ANR	679540	Symbol	FILE_ATTRIBUTE_READONLY		679191						
ANR	679541	Symbol	ERROR_NO_MORE_FILES		679191						
ANR	679542	Symbol	filePathName		679191						
ANR	679543	Symbol	hFind		679191						
ANR	679544	Symbol	firstFile . c_str		679191						
ANR	679545	Symbol	_		679191						
ANR	679546	Symbol	findFileData . dwFileAttributes		679191						
ANR	679547	Symbol	* findFileData . cFileName		679191						
ANR	679548	Symbol	subDirectory . size		679191						
ANR	679549	Symbol	g_fileSeparator		679191						
ANR	679550	Symbol	i		679191						
ANR	679551	Symbol	firstFile		679191						
ANR	679552	Symbol	INVALID_HANDLE_VALUE		679191						
ANR	679553	Symbol	FindNextFile		679191						
ANR	679554	Symbol	findFileData . cFileName		679191						
ANR	679555	Symbol	wildcmp		679191						
ANR	679556	Symbol	mainDirectoryLength		679191						
ANR	679557	Symbol	* i		679191						
ANR	679558	Symbol	directory . c_str		679191						
ANR	679559	Symbol	dwError		679191						
ANR	679560	Symbol	GetLastError		679191						
ANR	679561	Symbol	FILE_ATTRIBUTE_HIDDEN		679191						
ANR	679562	Symbol	& findFileData		679191						
ANR	679563	Function	ASConsole :: getNumberFormat	1031:0:26606:27986							
ANR	679564	FunctionDef	"ASConsole :: getNumberFormat (int num , size_t lcid)"		679563	0					
ANR	679565	CompoundStatement		1032:0:26668:27986	679563	0					
ANR	679566	ExpressionStatement	"assert ( locale ( ) . name ( ) == ""C"" )"	1038:1:27022:27052	679563	0	True				
ANR	679567	CallExpression	"assert ( locale ( ) . name ( ) == ""C"" )"		679563	0					
ANR	679568	Callee	assert		679563	0					
ANR	679569	Identifier	assert		679563	0					
ANR	679570	ArgumentList	"locale ( ) . name ( ) == ""C"""		679563	1					
ANR	679571	Argument	"locale ( ) . name ( ) == ""C"""		679563	0					
ANR	679572	EqualityExpression	"locale ( ) . name ( ) == ""C"""		679563	0		==			
ANR	679573	CallExpression	locale ( ) . name ( )		679563	0					
ANR	679574	Callee	locale ( ) . name		679563	0					
ANR	679575	MemberAccess	locale ( ) . name		679563	0					
ANR	679576	CallExpression	locale ( )		679563	0					
ANR	679577	Callee	locale		679563	0					
ANR	679578	Identifier	locale		679563	0					
ANR	679579	ArgumentList			679563	1					
ANR	679580	Identifier	name		679563	1					
ANR	679581	ArgumentList			679563	1					
ANR	679582	PrimaryExpression	"""C"""		679563	1					
ANR	679583	IdentifierDeclStatement	stringstream alphaNum ;	1041:1:27090:27111	679563	1	True				
ANR	679584	IdentifierDecl	alphaNum		679563	0					
ANR	679585	IdentifierDeclType	stringstream		679563	0					
ANR	679586	Identifier	alphaNum		679563	1					
ANR	679587	ExpressionStatement	alphaNum << num	1042:1:27114:27129	679563	2	True				
ANR	679588	ShiftExpression	alphaNum << num		679563	0		<<			
ANR	679589	Identifier	alphaNum		679563	0					
ANR	679590	Identifier	num		679563	1					
ANR	679591	IdentifierDeclStatement	string number = alphaNum . str ( ) ;	1043:1:27132:27162	679563	3	True				
ANR	679592	IdentifierDecl	number = alphaNum . str ( )		679563	0					
ANR	679593	IdentifierDeclType	string		679563	0					
ANR	679594	Identifier	number		679563	1					
ANR	679595	AssignmentExpression	number = alphaNum . str ( )		679563	2		=			
ANR	679596	Identifier	number		679563	0					
ANR	679597	CallExpression	alphaNum . str ( )		679563	1					
ANR	679598	Callee	alphaNum . str		679563	0					
ANR	679599	MemberAccess	alphaNum . str		679563	0					
ANR	679600	Identifier	alphaNum		679563	0					
ANR	679601	Identifier	str		679563	1					
ANR	679602	ArgumentList			679563	1					
ANR	679603	IfStatement	if ( useAscii )		679563	4					
ANR	679604	Condition	useAscii	1044:5:27169:27176	679563	0	True				
ANR	679605	Identifier	useAscii		679563	0					
ANR	679606	ReturnStatement	return number ;	1045:2:27181:27194	679563	1	True				
ANR	679607	Identifier	number		679563	0					
ANR	679608	IfStatement	if ( lcid == 0 )		679563	5					
ANR	679609	Condition	lcid == 0	1048:5:27246:27254	679563	0	True				
ANR	679610	EqualityExpression	lcid == 0		679563	0		==			
ANR	679611	Identifier	lcid		679563	0					
ANR	679612	PrimaryExpression	0		679563	1					
ANR	679613	ExpressionStatement	lcid = LOCALE_USER_DEFAULT	1049:2:27259:27285	679563	1	True				
ANR	679614	AssignmentExpression	lcid = LOCALE_USER_DEFAULT		679563	0		=			
ANR	679615	Identifier	lcid		679563	0					
ANR	679616	Identifier	LOCALE_USER_DEFAULT		679563	1					
ANR	679617	Statement	int	1050:1:27288:27290	679563	6	True				
ANR	679618	Statement	outSize	1050:5:27292:27298	679563	7	True				
ANR	679619	Statement	=	1050:13:27300:27300	679563	8	True				
ANR	679620	Statement	::	1050:15:27302:27303	679563	9	True				
ANR	679621	ExpressionStatement	"GetNumberFormat ( lcid , 0 , number . c_str ( ) , nullptr , nullptr , 0 )"	1050:17:27304:27365	679563	10	True				
ANR	679622	CallExpression	"GetNumberFormat ( lcid , 0 , number . c_str ( ) , nullptr , nullptr , 0 )"		679563	0					
ANR	679623	Callee	GetNumberFormat		679563	0					
ANR	679624	Identifier	GetNumberFormat		679563	0					
ANR	679625	ArgumentList	lcid		679563	1					
ANR	679626	Argument	lcid		679563	0					
ANR	679627	Identifier	lcid		679563	0					
ANR	679628	Argument	0		679563	1					
ANR	679629	PrimaryExpression	0		679563	0					
ANR	679630	Argument	number . c_str ( )		679563	2					
ANR	679631	CallExpression	number . c_str ( )		679563	0					
ANR	679632	Callee	number . c_str		679563	0					
ANR	679633	MemberAccess	number . c_str		679563	0					
ANR	679634	Identifier	number		679563	0					
ANR	679635	Identifier	c_str		679563	1					
ANR	679636	ArgumentList			679563	1					
ANR	679637	Argument	nullptr		679563	3					
ANR	679638	Identifier	nullptr		679563	0					
ANR	679639	Argument	nullptr		679563	4					
ANR	679640	Identifier	nullptr		679563	0					
ANR	679641	Argument	0		679563	5					
ANR	679642	PrimaryExpression	0		679563	0					
ANR	679643	Statement	char	1051:1:27368:27371	679563	11	True				
ANR	679644	Statement	*	1051:5:27372:27372	679563	12	True				
ANR	679645	Statement	outBuf	1051:7:27374:27379	679563	13	True				
ANR	679646	Statement	=	1051:14:27381:27381	679563	14	True				
ANR	679647	Statement	new	1051:16:27383:27385	679563	15	True				
ANR	679648	ExpressionStatement	( nothrow ) char [ outSize ]	1051:20:27387:27410	679563	16	True				
ANR	679649	CastExpression	( nothrow ) char [ outSize ]		679563	0					
ANR	679650	CastTarget	nothrow		679563	0					
ANR	679651	ArrayIndexing	char [ outSize ]		679563	1					
ANR	679652	Identifier	char		679563	0					
ANR	679653	Identifier	outSize		679563	1					
ANR	679654	IfStatement	if ( outBuf == nullptr )		679563	17					
ANR	679655	Condition	outBuf == nullptr	1052:5:27417:27433	679563	0	True				
ANR	679656	EqualityExpression	outBuf == nullptr		679563	0		==			
ANR	679657	Identifier	outBuf		679563	0					
ANR	679658	Identifier	nullptr		679563	1					
ANR	679659	ReturnStatement	return number ;	1053:2:27438:27451	679563	1	True				
ANR	679660	Identifier	number		679563	0					
ANR	679661	Statement	::	1054:1:27454:27455	679563	18	True				
ANR	679662	ExpressionStatement	"GetNumberFormat ( lcid , 0 , number . c_str ( ) , nullptr , outBuf , outSize )"	1054:3:27456:27522	679563	19	True				
ANR	679663	CallExpression	"GetNumberFormat ( lcid , 0 , number . c_str ( ) , nullptr , outBuf , outSize )"		679563	0					
ANR	679664	Callee	GetNumberFormat		679563	0					
ANR	679665	Identifier	GetNumberFormat		679563	0					
ANR	679666	ArgumentList	lcid		679563	1					
ANR	679667	Argument	lcid		679563	0					
ANR	679668	Identifier	lcid		679563	0					
ANR	679669	Argument	0		679563	1					
ANR	679670	PrimaryExpression	0		679563	0					
ANR	679671	Argument	number . c_str ( )		679563	2					
ANR	679672	CallExpression	number . c_str ( )		679563	0					
ANR	679673	Callee	number . c_str		679563	0					
ANR	679674	MemberAccess	number . c_str		679563	0					
ANR	679675	Identifier	number		679563	0					
ANR	679676	Identifier	c_str		679563	1					
ANR	679677	ArgumentList			679563	1					
ANR	679678	Argument	nullptr		679563	3					
ANR	679679	Identifier	nullptr		679563	0					
ANR	679680	Argument	outBuf		679563	4					
ANR	679681	Identifier	outBuf		679563	0					
ANR	679682	Argument	outSize		679563	5					
ANR	679683	Identifier	outSize		679563	0					
ANR	679684	IdentifierDeclStatement	string formattedNum ( outBuf ) ;	1055:1:27525:27552	679563	20	True				
ANR	679685	IdentifierDecl	formattedNum ( outBuf )		679563	0					
ANR	679686	IdentifierDeclType	string		679563	0					
ANR	679687	Identifier	formattedNum		679563	1					
ANR	679688	Identifier	outBuf		679563	2					
ANR	679689	Statement	delete	1056:1:27555:27560	679563	21	True				
ANR	679690	Statement	[	1056:7:27561:27561	679563	22	True				
ANR	679691	Statement	]	1056:8:27562:27562	679563	23	True				
ANR	679692	ExpressionStatement	outBuf	1056:10:27564:27570	679563	24	True				
ANR	679693	Identifier	outBuf		679563	0					
ANR	679694	Statement	int	1058:1:27596:27598	679563	25	True				
ANR	679695	Statement	decSize	1058:5:27600:27606	679563	26	True				
ANR	679696	Statement	=	1058:13:27608:27608	679563	27	True				
ANR	679697	Statement	::	1058:15:27610:27611	679563	28	True				
ANR	679698	ExpressionStatement	"GetLocaleInfo ( lcid , LOCALE_SDECIMAL , nullptr , 0 )"	1058:17:27612:27660	679563	29	True				
ANR	679699	CallExpression	"GetLocaleInfo ( lcid , LOCALE_SDECIMAL , nullptr , 0 )"		679563	0					
ANR	679700	Callee	GetLocaleInfo		679563	0					
ANR	679701	Identifier	GetLocaleInfo		679563	0					
ANR	679702	ArgumentList	lcid		679563	1					
ANR	679703	Argument	lcid		679563	0					
ANR	679704	Identifier	lcid		679563	0					
ANR	679705	Argument	LOCALE_SDECIMAL		679563	1					
ANR	679706	Identifier	LOCALE_SDECIMAL		679563	0					
ANR	679707	Argument	nullptr		679563	2					
ANR	679708	Identifier	nullptr		679563	0					
ANR	679709	Argument	0		679563	3					
ANR	679710	PrimaryExpression	0		679563	0					
ANR	679711	Statement	char	1059:1:27663:27666	679563	30	True				
ANR	679712	Statement	*	1059:5:27667:27667	679563	31	True				
ANR	679713	Statement	decBuf	1059:7:27669:27674	679563	32	True				
ANR	679714	Statement	=	1059:14:27676:27676	679563	33	True				
ANR	679715	Statement	new	1059:16:27678:27680	679563	34	True				
ANR	679716	ExpressionStatement	( nothrow ) char [ decSize ]	1059:20:27682:27705	679563	35	True				
ANR	679717	CastExpression	( nothrow ) char [ decSize ]		679563	0					
ANR	679718	CastTarget	nothrow		679563	0					
ANR	679719	ArrayIndexing	char [ decSize ]		679563	1					
ANR	679720	Identifier	char		679563	0					
ANR	679721	Identifier	decSize		679563	1					
ANR	679722	IfStatement	if ( decBuf == nullptr )		679563	36					
ANR	679723	Condition	decBuf == nullptr	1060:5:27712:27728	679563	0	True				
ANR	679724	EqualityExpression	decBuf == nullptr		679563	0		==			
ANR	679725	Identifier	decBuf		679563	0					
ANR	679726	Identifier	nullptr		679563	1					
ANR	679727	ReturnStatement	return number ;	1061:2:27733:27746	679563	1	True				
ANR	679728	Identifier	number		679563	0					
ANR	679729	Statement	::	1062:1:27749:27750	679563	37	True				
ANR	679730	ExpressionStatement	"GetLocaleInfo ( lcid , LOCALE_SDECIMAL , decBuf , decSize )"	1062:3:27751:27804	679563	38	True				
ANR	679731	CallExpression	"GetLocaleInfo ( lcid , LOCALE_SDECIMAL , decBuf , decSize )"		679563	0					
ANR	679732	Callee	GetLocaleInfo		679563	0					
ANR	679733	Identifier	GetLocaleInfo		679563	0					
ANR	679734	ArgumentList	lcid		679563	1					
ANR	679735	Argument	lcid		679563	0					
ANR	679736	Identifier	lcid		679563	0					
ANR	679737	Argument	LOCALE_SDECIMAL		679563	1					
ANR	679738	Identifier	LOCALE_SDECIMAL		679563	0					
ANR	679739	Argument	decBuf		679563	2					
ANR	679740	Identifier	decBuf		679563	0					
ANR	679741	Argument	decSize		679563	3					
ANR	679742	Identifier	decSize		679563	0					
ANR	679743	IdentifierDeclStatement	size_t i = formattedNum . rfind ( decBuf ) ;	1063:1:27807:27844	679563	39	True				
ANR	679744	IdentifierDecl	i = formattedNum . rfind ( decBuf )		679563	0					
ANR	679745	IdentifierDeclType	size_t		679563	0					
ANR	679746	Identifier	i		679563	1					
ANR	679747	AssignmentExpression	i = formattedNum . rfind ( decBuf )		679563	2		=			
ANR	679748	Identifier	i		679563	0					
ANR	679749	CallExpression	formattedNum . rfind ( decBuf )		679563	1					
ANR	679750	Callee	formattedNum . rfind		679563	0					
ANR	679751	MemberAccess	formattedNum . rfind		679563	0					
ANR	679752	Identifier	formattedNum		679563	0					
ANR	679753	Identifier	rfind		679563	1					
ANR	679754	ArgumentList	decBuf		679563	1					
ANR	679755	Argument	decBuf		679563	0					
ANR	679756	Identifier	decBuf		679563	0					
ANR	679757	Statement	delete	1064:1:27847:27852	679563	40	True				
ANR	679758	Statement	[	1064:7:27853:27853	679563	41	True				
ANR	679759	Statement	]	1064:8:27854:27854	679563	42	True				
ANR	679760	ExpressionStatement	decBuf	1064:10:27856:27862	679563	43	True				
ANR	679761	Identifier	decBuf		679563	0					
ANR	679762	IfStatement	if ( i != string :: npos )		679563	44					
ANR	679763	Condition	i != string :: npos	1065:5:27869:27885	679563	0	True				
ANR	679764	EqualityExpression	i != string :: npos		679563	0		!=			
ANR	679765	Identifier	i		679563	0					
ANR	679766	Identifier	string :: npos		679563	1					
ANR	679767	ExpressionStatement	formattedNum . erase ( i )	1066:2:27890:27911	679563	1	True				
ANR	679768	CallExpression	formattedNum . erase ( i )		679563	0					
ANR	679769	Callee	formattedNum . erase		679563	0					
ANR	679770	MemberAccess	formattedNum . erase		679563	0					
ANR	679771	Identifier	formattedNum		679563	0					
ANR	679772	Identifier	erase		679563	1					
ANR	679773	ArgumentList	i		679563	1					
ANR	679774	Argument	i		679563	0					
ANR	679775	Identifier	i		679563	0					
ANR	679776	IfStatement	if ( ! formattedNum . length ( ) )		679563	45					
ANR	679777	Condition	! formattedNum . length ( )	1067:5:27918:27939	679563	0	True				
ANR	679778	UnaryOperationExpression	! formattedNum . length ( )		679563	0					
ANR	679779	UnaryOperator	!		679563	0					
ANR	679780	CallExpression	formattedNum . length ( )		679563	1					
ANR	679781	Callee	formattedNum . length		679563	0					
ANR	679782	MemberAccess	formattedNum . length		679563	0					
ANR	679783	Identifier	formattedNum		679563	0					
ANR	679784	Identifier	length		679563	1					
ANR	679785	ArgumentList			679563	1					
ANR	679786	ExpressionStatement	"formattedNum = ""0"""	1068:2:27944:27962	679563	1	True				
ANR	679787	AssignmentExpression	"formattedNum = ""0"""		679563	0		=			
ANR	679788	Identifier	formattedNum		679563	0					
ANR	679789	PrimaryExpression	"""0"""		679563	1					
ANR	679790	ReturnStatement	return formattedNum ;	1069:1:27965:27984	679563	46	True				
ANR	679791	Identifier	formattedNum		679563	0					
ANR	679792	ReturnType	string		679563	1					
ANR	679793	Identifier	ASConsole :: getNumberFormat		679563	2					
ANR	679794	ParameterList	"int num , size_t lcid"		679563	3					
ANR	679795	Parameter	int num	1031:34:26640:26646	679563	0	True				
ANR	679796	ParameterType	int		679563	0					
ANR	679797	Identifier	num		679563	1					
ANR	679798	Parameter	size_t lcid	1031:43:26649:26659	679563	1	True				
ANR	679799	ParameterType	size_t		679563	0					
ANR	679800	Identifier	lcid		679563	1					
ANR	679801	CFGEntryNode	ENTRY		679563		True				
ANR	679802	CFGExitNode	EXIT		679563		True				
ANR	679803	Symbol	lcid		679563						
ANR	679804	Symbol	decSize		679563						
ANR	679805	Symbol	alphaNum . str		679563						
ANR	679806	Symbol	locale ( ) . name		679563						
ANR	679807	Symbol	num		679563						
ANR	679808	Symbol	formattedNum . rfind		679563						
ANR	679809	Symbol	string :: npos		679563						
ANR	679810	Symbol	LOCALE_SDECIMAL		679563						
ANR	679811	Symbol	i		679563						
ANR	679812	Symbol	outSize		679563						
ANR	679813	Symbol	locale		679563						
ANR	679814	Symbol	alphaNum		679563						
ANR	679815	Symbol	decBuf		679563						
ANR	679816	Symbol	number		679563						
ANR	679817	Symbol	useAscii		679563						
ANR	679818	Symbol	outBuf		679563						
ANR	679819	Symbol	formattedNum		679563						
ANR	679820	Symbol	LOCALE_USER_DEFAULT		679563						
ANR	679821	Symbol	char		679563						
ANR	679822	Symbol	number . c_str		679563						
ANR	679823	Symbol	nullptr		679563						
ANR	679824	Symbol	formattedNum . length		679563						
ANR	679825	Function	ASConsole :: launchDefaultBrowser	1075:0:28061:29728							
ANR	679826	FunctionDef	ASConsole :: launchDefaultBrowser (const char * filePathIn)		679825	0					
ANR	679827	CompoundStatement		1076:0:28140:29728	679825	0					
ANR	679828	IdentifierDeclStatement	struct stat statbuf ;	1077:1:28143:28162	679825	0	True				
ANR	679829	IdentifierDecl	statbuf		679825	0					
ANR	679830	IdentifierDeclType	struct stat		679825	0					
ANR	679831	Identifier	statbuf		679825	1					
ANR	679832	IdentifierDeclStatement	"const char * envPaths [ ] = { ""PROGRAMFILES(X86)"" , ""PROGRAMFILES"" } ;"	1078:1:28165:28229	679825	1	True				
ANR	679833	IdentifierDecl	"* envPaths [ ] = { ""PROGRAMFILES(X86)"" , ""PROGRAMFILES"" }"		679825	0					
ANR	679834	IdentifierDeclType	const char * [ ]		679825	0					
ANR	679835	Identifier	envPaths		679825	1					
ANR	679836	AssignmentExpression	"* envPaths [ ] = { ""PROGRAMFILES(X86)"" , ""PROGRAMFILES"" }"		679825	2		=			
ANR	679837	Identifier	envPaths		679825	0					
ANR	679838	InitializerList	"""PROGRAMFILES(X86)"""		679825	1					
ANR	679839	PrimaryExpression	"""PROGRAMFILES(X86)"""		679825	0					
ANR	679840	PrimaryExpression	"""PROGRAMFILES"""		679825	1					
ANR	679841	IdentifierDeclStatement	size_t pathsLen = sizeof ( envPaths ) / sizeof ( envPaths [ 0 ] ) ;	1079:1:28232:28288	679825	2	True				
ANR	679842	IdentifierDecl	pathsLen = sizeof ( envPaths ) / sizeof ( envPaths [ 0 ] )		679825	0					
ANR	679843	IdentifierDeclType	size_t		679825	0					
ANR	679844	Identifier	pathsLen		679825	1					
ANR	679845	AssignmentExpression	pathsLen = sizeof ( envPaths ) / sizeof ( envPaths [ 0 ] )		679825	2		=			
ANR	679846	Identifier	pathsLen		679825	0					
ANR	679847	MultiplicativeExpression	sizeof ( envPaths ) / sizeof ( envPaths [ 0 ] )		679825	1		/			
ANR	679848	SizeofExpression	sizeof ( envPaths )		679825	0					
ANR	679849	Sizeof	sizeof		679825	0					
ANR	679850	SizeofOperand	envPaths		679825	1					
ANR	679851	SizeofExpression	sizeof ( envPaths [ 0 ] )		679825	1					
ANR	679852	Sizeof	sizeof		679825	0					
ANR	679853	ArrayIndexing	envPaths [ 0 ]		679825	1					
ANR	679854	Identifier	envPaths		679825	0					
ANR	679855	PrimaryExpression	0		679825	1					
ANR	679856	IdentifierDeclStatement	string htmlDefaultPath ;	1080:1:28291:28313	679825	3	True				
ANR	679857	IdentifierDecl	htmlDefaultPath		679825	0					
ANR	679858	IdentifierDeclType	string		679825	0					
ANR	679859	Identifier	htmlDefaultPath		679825	1					
ANR	679860	ForStatement	for ( size_t i = 0 ; i < pathsLen ; i ++ )		679825	4					
ANR	679861	ForInit	size_t i = 0 ;	1081:6:28321:28333	679825	0	True				
ANR	679862	IdentifierDeclStatement	size_t i = 0 ;		679825	0					
ANR	679863	IdentifierDecl	i = 0		679825	0					
ANR	679864	IdentifierDeclType	size_t		679825	0					
ANR	679865	Identifier	i		679825	1					
ANR	679866	AssignmentExpression	i = 0		679825	2		=			
ANR	679867	Identifier	i		679825	0					
ANR	679868	PrimaryExpression	0		679825	1					
ANR	679869	Condition	i < pathsLen	1081:20:28335:28346	679825	1	True				
ANR	679870	RelationalExpression	i < pathsLen		679825	0		<			
ANR	679871	Identifier	i		679825	0					
ANR	679872	Identifier	pathsLen		679825	1					
ANR	679873	PostIncDecOperationExpression	i ++	1081:34:28349:28351	679825	2	True				
ANR	679874	Identifier	i		679825	0					
ANR	679875	IncDec	++		679825	1					
ANR	679876	CompoundStatement		8:2:218:259	679825	3					
ANR	679877	IdentifierDeclStatement	const char * envPath = getenv ( envPaths [ i ] ) ;	1083:2:28359:28400	679825	0	True				
ANR	679878	IdentifierDecl	* envPath = getenv ( envPaths [ i ] )		679825	0					
ANR	679879	IdentifierDeclType	const char *		679825	0					
ANR	679880	Identifier	envPath		679825	1					
ANR	679881	AssignmentExpression	* envPath = getenv ( envPaths [ i ] )		679825	2		=			
ANR	679882	Identifier	envPath		679825	0					
ANR	679883	CallExpression	getenv ( envPaths [ i ] )		679825	1					
ANR	679884	Callee	getenv		679825	0					
ANR	679885	Identifier	getenv		679825	0					
ANR	679886	ArgumentList	envPaths [ i ]		679825	1					
ANR	679887	Argument	envPaths [ i ]		679825	0					
ANR	679888	ArrayIndexing	envPaths [ i ]		679825	0					
ANR	679889	Identifier	envPaths		679825	0					
ANR	679890	Identifier	i		679825	1					
ANR	679891	IfStatement	if ( envPath == nullptr )		679825	1					
ANR	679892	Condition	envPath == nullptr	1084:6:28408:28425	679825	0	True				
ANR	679893	EqualityExpression	envPath == nullptr		679825	0		==			
ANR	679894	Identifier	envPath		679825	0					
ANR	679895	Identifier	nullptr		679825	1					
ANR	679896	ContinueStatement	continue ;	1085:3:28431:28439	679825	1	True				
ANR	679897	ExpressionStatement	htmlDefaultPath = envPath	1086:2:28443:28468	679825	2	True				
ANR	679898	AssignmentExpression	htmlDefaultPath = envPath		679825	0		=			
ANR	679899	Identifier	htmlDefaultPath		679825	0					
ANR	679900	Identifier	envPath		679825	1					
ANR	679901	IfStatement	if ( htmlDefaultPath . length ( ) > 0 && htmlDefaultPath [ htmlDefaultPath . length ( ) - 1 ] == g_fileSeparator )		679825	3					
ANR	679902	Condition	htmlDefaultPath . length ( ) > 0 && htmlDefaultPath [ htmlDefaultPath . length ( ) - 1 ] == g_fileSeparator	1087:6:28476:28581	679825	0	True				
ANR	679903	AndExpression	htmlDefaultPath . length ( ) > 0 && htmlDefaultPath [ htmlDefaultPath . length ( ) - 1 ] == g_fileSeparator		679825	0		&&			
ANR	679904	RelationalExpression	htmlDefaultPath . length ( ) > 0		679825	0		>			
ANR	679905	CallExpression	htmlDefaultPath . length ( )		679825	0					
ANR	679906	Callee	htmlDefaultPath . length		679825	0					
ANR	679907	MemberAccess	htmlDefaultPath . length		679825	0					
ANR	679908	Identifier	htmlDefaultPath		679825	0					
ANR	679909	Identifier	length		679825	1					
ANR	679910	ArgumentList			679825	1					
ANR	679911	PrimaryExpression	0		679825	1					
ANR	679912	EqualityExpression	htmlDefaultPath [ htmlDefaultPath . length ( ) - 1 ] == g_fileSeparator		679825	1		==			
ANR	679913	ArrayIndexing	htmlDefaultPath [ htmlDefaultPath . length ( ) - 1 ]		679825	0					
ANR	679914	Identifier	htmlDefaultPath		679825	0					
ANR	679915	AdditiveExpression	htmlDefaultPath . length ( ) - 1		679825	1		-			
ANR	679916	CallExpression	htmlDefaultPath . length ( )		679825	0					
ANR	679917	Callee	htmlDefaultPath . length		679825	0					
ANR	679918	MemberAccess	htmlDefaultPath . length		679825	0					
ANR	679919	Identifier	htmlDefaultPath		679825	0					
ANR	679920	Identifier	length		679825	1					
ANR	679921	ArgumentList			679825	1					
ANR	679922	PrimaryExpression	1		679825	1					
ANR	679923	Identifier	g_fileSeparator		679825	1					
ANR	679924	ExpressionStatement	htmlDefaultPath . erase ( htmlDefaultPath . length ( ) - 1 )	1089:3:28587:28638	679825	1	True				
ANR	679925	CallExpression	htmlDefaultPath . erase ( htmlDefaultPath . length ( ) - 1 )		679825	0					
ANR	679926	Callee	htmlDefaultPath . erase		679825	0					
ANR	679927	MemberAccess	htmlDefaultPath . erase		679825	0					
ANR	679928	Identifier	htmlDefaultPath		679825	0					
ANR	679929	Identifier	erase		679825	1					
ANR	679930	ArgumentList	htmlDefaultPath . length ( ) - 1		679825	1					
ANR	679931	Argument	htmlDefaultPath . length ( ) - 1		679825	0					
ANR	679932	AdditiveExpression	htmlDefaultPath . length ( ) - 1		679825	0		-			
ANR	679933	CallExpression	htmlDefaultPath . length ( )		679825	0					
ANR	679934	Callee	htmlDefaultPath . length		679825	0					
ANR	679935	MemberAccess	htmlDefaultPath . length		679825	0					
ANR	679936	Identifier	htmlDefaultPath		679825	0					
ANR	679937	Identifier	length		679825	1					
ANR	679938	ArgumentList			679825	1					
ANR	679939	PrimaryExpression	1		679825	1					
ANR	679940	ExpressionStatement	"htmlDefaultPath . append ( ""\\\\AStyle\\\\doc"" )"	1090:2:28642:28681	679825	4	True				
ANR	679941	CallExpression	"htmlDefaultPath . append ( ""\\\\AStyle\\\\doc"" )"		679825	0					
ANR	679942	Callee	htmlDefaultPath . append		679825	0					
ANR	679943	MemberAccess	htmlDefaultPath . append		679825	0					
ANR	679944	Identifier	htmlDefaultPath		679825	0					
ANR	679945	Identifier	append		679825	1					
ANR	679946	ArgumentList	"""\\\\AStyle\\\\doc"""		679825	1					
ANR	679947	Argument	"""\\\\AStyle\\\\doc"""		679825	0					
ANR	679948	PrimaryExpression	"""\\\\AStyle\\\\doc"""		679825	0					
ANR	679949	IfStatement	"if ( stat ( htmlDefaultPath . c_str ( ) , & statbuf ) == 0 && statbuf . st_mode & S_IFDIR )"		679825	5					
ANR	679950	Condition	"stat ( htmlDefaultPath . c_str ( ) , & statbuf ) == 0 && statbuf . st_mode & S_IFDIR"	1091:6:28689:28761	679825	0	True				
ANR	679951	AndExpression	"stat ( htmlDefaultPath . c_str ( ) , & statbuf ) == 0 && statbuf . st_mode & S_IFDIR"		679825	0		&&			
ANR	679952	EqualityExpression	"stat ( htmlDefaultPath . c_str ( ) , & statbuf ) == 0"		679825	0		==			
ANR	679953	CallExpression	"stat ( htmlDefaultPath . c_str ( ) , & statbuf )"		679825	0					
ANR	679954	Callee	stat		679825	0					
ANR	679955	Identifier	stat		679825	0					
ANR	679956	ArgumentList	htmlDefaultPath . c_str ( )		679825	1					
ANR	679957	Argument	htmlDefaultPath . c_str ( )		679825	0					
ANR	679958	CallExpression	htmlDefaultPath . c_str ( )		679825	0					
ANR	679959	Callee	htmlDefaultPath . c_str		679825	0					
ANR	679960	MemberAccess	htmlDefaultPath . c_str		679825	0					
ANR	679961	Identifier	htmlDefaultPath		679825	0					
ANR	679962	Identifier	c_str		679825	1					
ANR	679963	ArgumentList			679825	1					
ANR	679964	Argument	& statbuf		679825	1					
ANR	679965	UnaryOperationExpression	& statbuf		679825	0					
ANR	679966	UnaryOperator	&		679825	0					
ANR	679967	Identifier	statbuf		679825	1					
ANR	679968	PrimaryExpression	0		679825	1					
ANR	679969	BitAndExpression	statbuf . st_mode & S_IFDIR		679825	1		&			
ANR	679970	MemberAccess	statbuf . st_mode		679825	0					
ANR	679971	Identifier	statbuf		679825	0					
ANR	679972	Identifier	st_mode		679825	1					
ANR	679973	Identifier	S_IFDIR		679825	1					
ANR	679974	BreakStatement	break ;	1092:3:28767:28772	679825	1	True				
ANR	679975	ExpressionStatement	"htmlDefaultPath . append ( ""\\\\"" )"	1094:1:28778:28806	679825	5	True				
ANR	679976	CallExpression	"htmlDefaultPath . append ( ""\\\\"" )"		679825	0					
ANR	679977	Callee	htmlDefaultPath . append		679825	0					
ANR	679978	MemberAccess	htmlDefaultPath . append		679825	0					
ANR	679979	Identifier	htmlDefaultPath		679825	0					
ANR	679980	Identifier	append		679825	1					
ANR	679981	ArgumentList	"""\\\\"""		679825	1					
ANR	679982	Argument	"""\\\\"""		679825	0					
ANR	679983	PrimaryExpression	"""\\\\"""		679825	0					
ANR	679984	IdentifierDeclStatement	string htmlFilePath ;	1097:1:28830:28849	679825	6	True				
ANR	679985	IdentifierDecl	htmlFilePath		679825	0					
ANR	679986	IdentifierDeclType	string		679825	0					
ANR	679987	Identifier	htmlFilePath		679825	1					
ANR	679988	IfStatement	if ( filePathIn == nullptr )		679825	7					
ANR	679989	Condition	filePathIn == nullptr	1098:5:28856:28876	679825	0	True				
ANR	679990	EqualityExpression	filePathIn == nullptr		679825	0		==			
ANR	679991	Identifier	filePathIn		679825	0					
ANR	679992	Identifier	nullptr		679825	1					
ANR	679993	ExpressionStatement	"htmlFilePath = htmlDefaultPath + ""astyle.html"""	1099:2:28881:28927	679825	1	True				
ANR	679994	AssignmentExpression	"htmlFilePath = htmlDefaultPath + ""astyle.html"""		679825	0		=			
ANR	679995	Identifier	htmlFilePath		679825	0					
ANR	679996	AdditiveExpression	"htmlDefaultPath + ""astyle.html"""		679825	1		+			
ANR	679997	Identifier	htmlDefaultPath		679825	0					
ANR	679998	PrimaryExpression	"""astyle.html"""		679825	1					
ANR	679999	ElseStatement	else		679825	0					
ANR	680000	CompoundStatement		26:1:795:795	679825	0					
ANR	680001	IfStatement	"if ( strpbrk ( filePathIn , ""\\\\/"" ) == nullptr )"		679825	0					
ANR	680002	Condition	"strpbrk ( filePathIn , ""\\\\/"" ) == nullptr"	1102:6:28944:28980	679825	0	True				
ANR	680003	EqualityExpression	"strpbrk ( filePathIn , ""\\\\/"" ) == nullptr"		679825	0		==			
ANR	680004	CallExpression	"strpbrk ( filePathIn , ""\\\\/"" )"		679825	0					
ANR	680005	Callee	strpbrk		679825	0					
ANR	680006	Identifier	strpbrk		679825	0					
ANR	680007	ArgumentList	filePathIn		679825	1					
ANR	680008	Argument	filePathIn		679825	0					
ANR	680009	Identifier	filePathIn		679825	0					
ANR	680010	Argument	"""\\\\/"""		679825	1					
ANR	680011	PrimaryExpression	"""\\\\/"""		679825	0					
ANR	680012	Identifier	nullptr		679825	1					
ANR	680013	ExpressionStatement	htmlFilePath = htmlDefaultPath + filePathIn	1103:3:28986:29029	679825	1	True				
ANR	680014	AssignmentExpression	htmlFilePath = htmlDefaultPath + filePathIn		679825	0		=			
ANR	680015	Identifier	htmlFilePath		679825	0					
ANR	680016	AdditiveExpression	htmlDefaultPath + filePathIn		679825	1		+			
ANR	680017	Identifier	htmlDefaultPath		679825	0					
ANR	680018	Identifier	filePathIn		679825	1					
ANR	680019	ElseStatement	else		679825	0					
ANR	680020	ExpressionStatement	htmlFilePath = filePathIn	1105:3:29041:29066	679825	0	True				
ANR	680021	AssignmentExpression	htmlFilePath = filePathIn		679825	0		=			
ANR	680022	Identifier	htmlFilePath		679825	0					
ANR	680023	Identifier	filePathIn		679825	1					
ANR	680024	ExpressionStatement	standardizePath ( htmlFilePath )	1107:1:29072:29101	679825	8	True				
ANR	680025	CallExpression	standardizePath ( htmlFilePath )		679825	0					
ANR	680026	Callee	standardizePath		679825	0					
ANR	680027	Identifier	standardizePath		679825	0					
ANR	680028	ArgumentList	htmlFilePath		679825	1					
ANR	680029	Argument	htmlFilePath		679825	0					
ANR	680030	Identifier	htmlFilePath		679825	0					
ANR	680031	IfStatement	"if ( stat ( htmlFilePath . c_str ( ) , & statbuf ) != 0 || ! ( statbuf . st_mode & S_IFREG ) )"		679825	9					
ANR	680032	Condition	"stat ( htmlFilePath . c_str ( ) , & statbuf ) != 0 || ! ( statbuf . st_mode & S_IFREG )"	1108:5:29108:29180	679825	0	True				
ANR	680033	OrExpression	"stat ( htmlFilePath . c_str ( ) , & statbuf ) != 0 || ! ( statbuf . st_mode & S_IFREG )"		679825	0		||			
ANR	680034	EqualityExpression	"stat ( htmlFilePath . c_str ( ) , & statbuf ) != 0"		679825	0		!=			
ANR	680035	CallExpression	"stat ( htmlFilePath . c_str ( ) , & statbuf )"		679825	0					
ANR	680036	Callee	stat		679825	0					
ANR	680037	Identifier	stat		679825	0					
ANR	680038	ArgumentList	htmlFilePath . c_str ( )		679825	1					
ANR	680039	Argument	htmlFilePath . c_str ( )		679825	0					
ANR	680040	CallExpression	htmlFilePath . c_str ( )		679825	0					
ANR	680041	Callee	htmlFilePath . c_str		679825	0					
ANR	680042	MemberAccess	htmlFilePath . c_str		679825	0					
ANR	680043	Identifier	htmlFilePath		679825	0					
ANR	680044	Identifier	c_str		679825	1					
ANR	680045	ArgumentList			679825	1					
ANR	680046	Argument	& statbuf		679825	1					
ANR	680047	UnaryOperationExpression	& statbuf		679825	0					
ANR	680048	UnaryOperator	&		679825	0					
ANR	680049	Identifier	statbuf		679825	1					
ANR	680050	PrimaryExpression	0		679825	1					
ANR	680051	UnaryOperationExpression	! ( statbuf . st_mode & S_IFREG )		679825	1					
ANR	680052	UnaryOperator	!		679825	0					
ANR	680053	BitAndExpression	statbuf . st_mode & S_IFREG		679825	1		&			
ANR	680054	MemberAccess	statbuf . st_mode		679825	0					
ANR	680055	Identifier	statbuf		679825	0					
ANR	680056	Identifier	st_mode		679825	1					
ANR	680057	Identifier	S_IFREG		679825	1					
ANR	680058	CompoundStatement		34:1:1043:1043	679825	1					
ANR	680059	ExpressionStatement	"printf ( _ ( ""Cannot open HTML file %s\\n"" ) , htmlFilePath . c_str ( ) )"	1110:2:29188:29249	679825	0	True				
ANR	680060	CallExpression	"printf ( _ ( ""Cannot open HTML file %s\\n"" ) , htmlFilePath . c_str ( ) )"		679825	0					
ANR	680061	Callee	printf		679825	0					
ANR	680062	Identifier	printf		679825	0					
ANR	680063	ArgumentList	"_ ( ""Cannot open HTML file %s\\n"" )"		679825	1					
ANR	680064	Argument	"_ ( ""Cannot open HTML file %s\\n"" )"		679825	0					
ANR	680065	CallExpression	"_ ( ""Cannot open HTML file %s\\n"" )"		679825	0					
ANR	680066	Callee	_		679825	0					
ANR	680067	Identifier	_		679825	0					
ANR	680068	ArgumentList	"""Cannot open HTML file %s\\n"""		679825	1					
ANR	680069	Argument	"""Cannot open HTML file %s\\n"""		679825	0					
ANR	680070	PrimaryExpression	"""Cannot open HTML file %s\\n"""		679825	0					
ANR	680071	Argument	htmlFilePath . c_str ( )		679825	1					
ANR	680072	CallExpression	htmlFilePath . c_str ( )		679825	0					
ANR	680073	Callee	htmlFilePath . c_str		679825	0					
ANR	680074	MemberAccess	htmlFilePath . c_str		679825	0					
ANR	680075	Identifier	htmlFilePath		679825	0					
ANR	680076	Identifier	c_str		679825	1					
ANR	680077	ArgumentList			679825	1					
ANR	680078	ReturnStatement	return ;	1111:2:29253:29259	679825	1	True				
ANR	680079	IdentifierDeclStatement	"SHELLEXECUTEINFO sei = { sizeof ( sei ) , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 } ;"	1114:1:29266:29346	679825	10	True				
ANR	680080	IdentifierDecl	"sei = { sizeof ( sei ) , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 }"		679825	0					
ANR	680081	IdentifierDeclType	SHELLEXECUTEINFO		679825	0					
ANR	680082	Identifier	sei		679825	1					
ANR	680083	AssignmentExpression	"sei = { sizeof ( sei ) , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 }"		679825	2		=			
ANR	680084	Identifier	sei		679825	0					
ANR	680085	InitializerList	sizeof ( sei )		679825	1					
ANR	680086	SizeofExpression	sizeof ( sei )		679825	0					
ANR	680087	Sizeof	sizeof		679825	0					
ANR	680088	SizeofOperand	sei		679825	1					
ANR	680089	PrimaryExpression	0		679825	1					
ANR	680090	PrimaryExpression	0		679825	2					
ANR	680091	PrimaryExpression	0		679825	3					
ANR	680092	PrimaryExpression	0		679825	4					
ANR	680093	PrimaryExpression	0		679825	5					
ANR	680094	PrimaryExpression	0		679825	6					
ANR	680095	PrimaryExpression	0		679825	7					
ANR	680096	PrimaryExpression	0		679825	8					
ANR	680097	PrimaryExpression	0		679825	9					
ANR	680098	PrimaryExpression	0		679825	10					
ANR	680099	PrimaryExpression	0		679825	11					
ANR	680100	PrimaryExpression	0		679825	12					
ANR	680101	PrimaryExpression	0		679825	13					
ANR	680102	PrimaryExpression	0		679825	14					
ANR	680103	ExpressionStatement	sei . fMask = SEE_MASK_FLAG_NO_UI	1115:1:29349:29380	679825	11	True				
ANR	680104	AssignmentExpression	sei . fMask = SEE_MASK_FLAG_NO_UI		679825	0		=			
ANR	680105	MemberAccess	sei . fMask		679825	0					
ANR	680106	Identifier	sei		679825	0					
ANR	680107	Identifier	fMask		679825	1					
ANR	680108	Identifier	SEE_MASK_FLAG_NO_UI		679825	1					
ANR	680109	ExpressionStatement	"sei . lpVerb = ""open"""	1116:1:29383:29402	679825	12	True				
ANR	680110	AssignmentExpression	"sei . lpVerb = ""open"""		679825	0		=			
ANR	680111	MemberAccess	sei . lpVerb		679825	0					
ANR	680112	Identifier	sei		679825	0					
ANR	680113	Identifier	lpVerb		679825	1					
ANR	680114	PrimaryExpression	"""open"""		679825	1					
ANR	680115	ExpressionStatement	sei . lpFile = htmlFilePath . c_str ( )	1117:1:29405:29438	679825	13	True				
ANR	680116	AssignmentExpression	sei . lpFile = htmlFilePath . c_str ( )		679825	0		=			
ANR	680117	MemberAccess	sei . lpFile		679825	0					
ANR	680118	Identifier	sei		679825	0					
ANR	680119	Identifier	lpFile		679825	1					
ANR	680120	CallExpression	htmlFilePath . c_str ( )		679825	1					
ANR	680121	Callee	htmlFilePath . c_str		679825	0					
ANR	680122	MemberAccess	htmlFilePath . c_str		679825	0					
ANR	680123	Identifier	htmlFilePath		679825	0					
ANR	680124	Identifier	c_str		679825	1					
ANR	680125	ArgumentList			679825	1					
ANR	680126	ExpressionStatement	sei . nShow = SW_SHOWNORMAL	1118:1:29441:29466	679825	14	True				
ANR	680127	AssignmentExpression	sei . nShow = SW_SHOWNORMAL		679825	0		=			
ANR	680128	MemberAccess	sei . nShow		679825	0					
ANR	680129	Identifier	sei		679825	0					
ANR	680130	Identifier	nShow		679825	1					
ANR	680131	Identifier	SW_SHOWNORMAL		679825	1					
ANR	680132	ExpressionStatement	"printf ( _ ( ""Opening HTML documentation %s\\n"" ) , htmlFilePath . c_str ( ) )"	1121:1:29521:29587	679825	15	True				
ANR	680133	CallExpression	"printf ( _ ( ""Opening HTML documentation %s\\n"" ) , htmlFilePath . c_str ( ) )"		679825	0					
ANR	680134	Callee	printf		679825	0					
ANR	680135	Identifier	printf		679825	0					
ANR	680136	ArgumentList	"_ ( ""Opening HTML documentation %s\\n"" )"		679825	1					
ANR	680137	Argument	"_ ( ""Opening HTML documentation %s\\n"" )"		679825	0					
ANR	680138	CallExpression	"_ ( ""Opening HTML documentation %s\\n"" )"		679825	0					
ANR	680139	Callee	_		679825	0					
ANR	680140	Identifier	_		679825	0					
ANR	680141	ArgumentList	"""Opening HTML documentation %s\\n"""		679825	1					
ANR	680142	Argument	"""Opening HTML documentation %s\\n"""		679825	0					
ANR	680143	PrimaryExpression	"""Opening HTML documentation %s\\n"""		679825	0					
ANR	680144	Argument	htmlFilePath . c_str ( )		679825	1					
ANR	680145	CallExpression	htmlFilePath . c_str ( )		679825	0					
ANR	680146	Callee	htmlFilePath . c_str		679825	0					
ANR	680147	MemberAccess	htmlFilePath . c_str		679825	0					
ANR	680148	Identifier	htmlFilePath		679825	0					
ANR	680149	Identifier	c_str		679825	1					
ANR	680150	ArgumentList			679825	1					
ANR	680151	IfStatement	if ( ! bypassBrowserOpen )		679825	16					
ANR	680152	Condition	! bypassBrowserOpen	1122:5:29594:29611	679825	0	True				
ANR	680153	UnaryOperationExpression	! bypassBrowserOpen		679825	0					
ANR	680154	UnaryOperator	!		679825	0					
ANR	680155	Identifier	bypassBrowserOpen		679825	1					
ANR	680156	CompoundStatement		49:2:1478:1508	679825	1					
ANR	680157	IdentifierDeclStatement	int ret = ShellExecuteEx ( & sei ) ;	1124:2:29619:29649	679825	0	True				
ANR	680158	IdentifierDecl	ret = ShellExecuteEx ( & sei )		679825	0					
ANR	680159	IdentifierDeclType	int		679825	0					
ANR	680160	Identifier	ret		679825	1					
ANR	680161	AssignmentExpression	ret = ShellExecuteEx ( & sei )		679825	2		=			
ANR	680162	Identifier	ret		679825	0					
ANR	680163	CallExpression	ShellExecuteEx ( & sei )		679825	1					
ANR	680164	Callee	ShellExecuteEx		679825	0					
ANR	680165	Identifier	ShellExecuteEx		679825	0					
ANR	680166	ArgumentList	& sei		679825	1					
ANR	680167	Argument	& sei		679825	0					
ANR	680168	UnaryOperationExpression	& sei		679825	0					
ANR	680169	UnaryOperator	&		679825	0					
ANR	680170	Identifier	sei		679825	1					
ANR	680171	IfStatement	if ( ! ret )		679825	1					
ANR	680172	Condition	! ret	1125:6:29657:29660	679825	0	True				
ANR	680173	UnaryOperationExpression	! ret		679825	0					
ANR	680174	UnaryOperator	!		679825	0					
ANR	680175	Identifier	ret		679825	1					
ANR	680176	ExpressionStatement	"error ( _ ( ""Command execute failure"" ) , htmlFilePath . c_str ( ) )"	1126:3:29666:29723	679825	1	True				
ANR	680177	CallExpression	"error ( _ ( ""Command execute failure"" ) , htmlFilePath . c_str ( ) )"		679825	0					
ANR	680178	Callee	error		679825	0					
ANR	680179	Identifier	error		679825	0					
ANR	680180	ArgumentList	"_ ( ""Command execute failure"" )"		679825	1					
ANR	680181	Argument	"_ ( ""Command execute failure"" )"		679825	0					
ANR	680182	CallExpression	"_ ( ""Command execute failure"" )"		679825	0					
ANR	680183	Callee	_		679825	0					
ANR	680184	Identifier	_		679825	0					
ANR	680185	ArgumentList	"""Command execute failure"""		679825	1					
ANR	680186	Argument	"""Command execute failure"""		679825	0					
ANR	680187	PrimaryExpression	"""Command execute failure"""		679825	0					
ANR	680188	Argument	htmlFilePath . c_str ( )		679825	1					
ANR	680189	CallExpression	htmlFilePath . c_str ( )		679825	0					
ANR	680190	Callee	htmlFilePath . c_str		679825	0					
ANR	680191	MemberAccess	htmlFilePath . c_str		679825	0					
ANR	680192	Identifier	htmlFilePath		679825	0					
ANR	680193	Identifier	c_str		679825	1					
ANR	680194	ArgumentList			679825	1					
ANR	680195	ReturnType	void		679825	1					
ANR	680196	Identifier	ASConsole :: launchDefaultBrowser		679825	2					
ANR	680197	ParameterList	const char * filePathIn		679825	3					
ANR	680198	Parameter	const char * filePathIn	1075:37:28098:28119	679825	0	True				
ANR	680199	ParameterType	const char *		679825	0					
ANR	680200	Identifier	filePathIn		679825	1					
ANR	680201	CFGEntryNode	ENTRY		679825		True				
ANR	680202	CFGExitNode	EXIT		679825		True				
ANR	680203	Symbol	SEE_MASK_FLAG_NO_UI		679825						
ANR	680204	Symbol	SW_SHOWNORMAL		679825						
ANR	680205	Symbol	ShellExecuteEx		679825						
ANR	680206	Symbol	strpbrk		679825						
ANR	680207	Symbol	sei . nShow		679825						
ANR	680208	Symbol	sei . lpVerb		679825						
ANR	680209	Symbol	htmlFilePath . c_str		679825						
ANR	680210	Symbol	bypassBrowserOpen		679825						
ANR	680211	Symbol	sei		679825						
ANR	680212	Symbol	& statbuf		679825						
ANR	680213	Symbol	envPath		679825						
ANR	680214	Symbol	getenv		679825						
ANR	680215	Symbol	_		679825						
ANR	680216	Symbol	sei . fMask		679825						
ANR	680217	Symbol	statbuf . st_mode		679825						
ANR	680218	Symbol	ret		679825						
ANR	680219	Symbol	htmlDefaultPath		679825						
ANR	680220	Symbol	stat		679825						
ANR	680221	Symbol	S_IFDIR		679825						
ANR	680222	Symbol	pathsLen		679825						
ANR	680223	Symbol	g_fileSeparator		679825						
ANR	680224	Symbol	i		679825						
ANR	680225	Symbol	S_IFREG		679825						
ANR	680226	Symbol	htmlDefaultPath . length		679825						
ANR	680227	Symbol	* htmlDefaultPath		679825						
ANR	680228	Symbol	sei . lpFile		679825						
ANR	680229	Symbol	* i		679825						
ANR	680230	Symbol	statbuf		679825						
ANR	680231	Symbol	envPaths		679825						
ANR	680232	Symbol	* htmlDefaultPath . length		679825						
ANR	680233	Symbol	* envPaths		679825						
ANR	680234	Symbol	& sei		679825						
ANR	680235	Symbol	htmlFilePath		679825						
ANR	680236	Symbol	nullptr		679825						
ANR	680237	Symbol	htmlDefaultPath . c_str		679825						
ANR	680238	Symbol	filePathIn		679825						
ANR	680239	Function	ASConsole :: getCurrentDirectory	1140:0:30061:30262							
ANR	680240	FunctionDef	ASConsole :: getCurrentDirectory (const string & fileName_)		680239	0					
ANR	680241	CompoundStatement		1141:0:30130:30262	680239	0					
ANR	680242	IdentifierDeclStatement	"char * currdir = getenv ( ""PWD"" ) ;"	1142:1:30133:30162	680239	0	True				
ANR	680243	IdentifierDecl	"* currdir = getenv ( ""PWD"" )"		680239	0					
ANR	680244	IdentifierDeclType	char *		680239	0					
ANR	680245	Identifier	currdir		680239	1					
ANR	680246	AssignmentExpression	"* currdir = getenv ( ""PWD"" )"		680239	2		=			
ANR	680247	Identifier	currdir		680239	0					
ANR	680248	CallExpression	"getenv ( ""PWD"" )"		680239	1					
ANR	680249	Callee	getenv		680239	0					
ANR	680250	Identifier	getenv		680239	0					
ANR	680251	ArgumentList	"""PWD"""		680239	1					
ANR	680252	Argument	"""PWD"""		680239	0					
ANR	680253	PrimaryExpression	"""PWD"""		680239	0					
ANR	680254	IfStatement	if ( currdir == nullptr )		680239	1					
ANR	680255	Condition	currdir == nullptr	1143:5:30169:30186	680239	0	True				
ANR	680256	EqualityExpression	currdir == nullptr		680239	0		==			
ANR	680257	Identifier	currdir		680239	0					
ANR	680258	Identifier	nullptr		680239	1					
ANR	680259	ExpressionStatement	"error ( ""Cannot find file"" , fileName_ . c_str ( ) )"	1144:2:30191:30235	680239	1	True				
ANR	680260	CallExpression	"error ( ""Cannot find file"" , fileName_ . c_str ( ) )"		680239	0					
ANR	680261	Callee	error		680239	0					
ANR	680262	Identifier	error		680239	0					
ANR	680263	ArgumentList	"""Cannot find file"""		680239	1					
ANR	680264	Argument	"""Cannot find file"""		680239	0					
ANR	680265	PrimaryExpression	"""Cannot find file"""		680239	0					
ANR	680266	Argument	fileName_ . c_str ( )		680239	1					
ANR	680267	CallExpression	fileName_ . c_str ( )		680239	0					
ANR	680268	Callee	fileName_ . c_str		680239	0					
ANR	680269	MemberAccess	fileName_ . c_str		680239	0					
ANR	680270	Identifier	fileName_		680239	0					
ANR	680271	Identifier	c_str		680239	1					
ANR	680272	ArgumentList			680239	1					
ANR	680273	ReturnStatement	return string ( currdir ) ;	1145:1:30238:30260	680239	2	True				
ANR	680274	CallExpression	string ( currdir )		680239	0					
ANR	680275	Callee	string		680239	0					
ANR	680276	Identifier	string		680239	0					
ANR	680277	ArgumentList	currdir		680239	1					
ANR	680278	Argument	currdir		680239	0					
ANR	680279	Identifier	currdir		680239	0					
ANR	680280	ReturnType	string		680239	1					
ANR	680281	Identifier	ASConsole :: getCurrentDirectory		680239	2					
ANR	680282	ParameterList	const string & fileName_		680239	3					
ANR	680283	Parameter	const string & fileName_	1140:38:30099:30121	680239	0	True				
ANR	680284	ParameterType	const string &		680239	0					
ANR	680285	Identifier	fileName_		680239	1					
ANR	680286	CFGEntryNode	ENTRY		680239		True				
ANR	680287	CFGExitNode	EXIT		680239		True				
ANR	680288	Symbol	currdir		680239						
ANR	680289	Symbol	string		680239						
ANR	680290	Symbol	fileName_ . c_str		680239						
ANR	680291	Symbol	fileName_		680239						
ANR	680292	Symbol	nullptr		680239						
ANR	680293	Symbol	getenv		680239						
ANR	680294	Function	ASConsole :: getFileNames	1155:0:30561:32927							
ANR	680295	FunctionDef	"ASConsole :: getFileNames (const string & directory , const string & wildcard)"		680294	0					
ANR	680296	CompoundStatement		1156:0:30639:32927	680294	0					
ANR	680297	IdentifierDeclStatement	struct dirent * entry ;	1157:1:30642:30662	680294	0	True				
ANR	680298	IdentifierDecl	* entry		680294	0					
ANR	680299	IdentifierDeclType	struct dirent *		680294	0					
ANR	680300	Identifier	entry		680294	1					
ANR	680301	IdentifierDeclStatement	struct stat statbuf ;	1158:1:30699:30718	680294	1	True				
ANR	680302	IdentifierDecl	statbuf		680294	0					
ANR	680303	IdentifierDeclType	struct stat		680294	0					
ANR	680304	Identifier	statbuf		680294	1					
ANR	680305	IdentifierDeclStatement	vector < string > subDirectory ;	1159:1:30753:30780	680294	2	True				
ANR	680306	IdentifierDecl	subDirectory		680294	0					
ANR	680307	IdentifierDeclType	vector < string >		680294	0					
ANR	680308	Identifier	subDirectory		680294	1					
ANR	680309	ExpressionStatement	errno = 0	1162:1:30909:30918	680294	3	True				
ANR	680310	AssignmentExpression	errno = 0		680294	0		=			
ANR	680311	Identifier	errno		680294	0					
ANR	680312	PrimaryExpression	0		680294	1					
ANR	680313	IdentifierDeclStatement	DIR * dp = opendir ( directory . c_str ( ) ) ;	1164:1:30922:30958	680294	4	True				
ANR	680314	IdentifierDecl	* dp = opendir ( directory . c_str ( ) )		680294	0					
ANR	680315	IdentifierDeclType	DIR *		680294	0					
ANR	680316	Identifier	dp		680294	1					
ANR	680317	AssignmentExpression	* dp = opendir ( directory . c_str ( ) )		680294	2		=			
ANR	680318	Identifier	dp		680294	0					
ANR	680319	CallExpression	opendir ( directory . c_str ( ) )		680294	1					
ANR	680320	Callee	opendir		680294	0					
ANR	680321	Identifier	opendir		680294	0					
ANR	680322	ArgumentList	directory . c_str ( )		680294	1					
ANR	680323	Argument	directory . c_str ( )		680294	0					
ANR	680324	CallExpression	directory . c_str ( )		680294	0					
ANR	680325	Callee	directory . c_str		680294	0					
ANR	680326	MemberAccess	directory . c_str		680294	0					
ANR	680327	Identifier	directory		680294	0					
ANR	680328	Identifier	c_str		680294	1					
ANR	680329	ArgumentList			680294	1					
ANR	680330	IfStatement	if ( dp == nullptr )		680294	5					
ANR	680331	Condition	dp == nullptr	1165:5:30965:30977	680294	0	True				
ANR	680332	EqualityExpression	dp == nullptr		680294	0		==			
ANR	680333	Identifier	dp		680294	0					
ANR	680334	Identifier	nullptr		680294	1					
ANR	680335	ExpressionStatement	"error ( _ ( ""Cannot open directory"" ) , directory . c_str ( ) )"	1166:2:30982:31034	680294	1	True				
ANR	680336	CallExpression	"error ( _ ( ""Cannot open directory"" ) , directory . c_str ( ) )"		680294	0					
ANR	680337	Callee	error		680294	0					
ANR	680338	Identifier	error		680294	0					
ANR	680339	ArgumentList	"_ ( ""Cannot open directory"" )"		680294	1					
ANR	680340	Argument	"_ ( ""Cannot open directory"" )"		680294	0					
ANR	680341	CallExpression	"_ ( ""Cannot open directory"" )"		680294	0					
ANR	680342	Callee	_		680294	0					
ANR	680343	Identifier	_		680294	0					
ANR	680344	ArgumentList	"""Cannot open directory"""		680294	1					
ANR	680345	Argument	"""Cannot open directory"""		680294	0					
ANR	680346	PrimaryExpression	"""Cannot open directory"""		680294	0					
ANR	680347	Argument	directory . c_str ( )		680294	1					
ANR	680348	CallExpression	directory . c_str ( )		680294	0					
ANR	680349	Callee	directory . c_str		680294	0					
ANR	680350	MemberAccess	directory . c_str		680294	0					
ANR	680351	Identifier	directory		680294	0					
ANR	680352	Identifier	c_str		680294	1					
ANR	680353	ArgumentList			680294	1					
ANR	680354	Statement	const	1169:1:31091:31095	680294	6	True				
ANR	680355	IdentifierDeclStatement	unsigned firstEntry = fileName . size ( ) ;	1169:7:31097:31134	680294	7	True				
ANR	680356	IdentifierDecl	firstEntry = fileName . size ( )		680294	0					
ANR	680357	IdentifierDeclType	unsigned		680294	0					
ANR	680358	Identifier	firstEntry		680294	1					
ANR	680359	AssignmentExpression	firstEntry = fileName . size ( )		680294	2		=			
ANR	680360	Identifier	firstEntry		680294	0					
ANR	680361	CallExpression	fileName . size ( )		680294	1					
ANR	680362	Callee	fileName . size		680294	0					
ANR	680363	MemberAccess	fileName . size		680294	0					
ANR	680364	Identifier	fileName		680294	0					
ANR	680365	Identifier	size		680294	1					
ANR	680366	ArgumentList			680294	1					
ANR	680367	WhileStatement	while ( ( entry = readdir ( dp ) ) != nullptr )		680294	8					
ANR	680368	Condition	( entry = readdir ( dp ) ) != nullptr	1172:8:31180:31211	680294	0	True				
ANR	680369	EqualityExpression	( entry = readdir ( dp ) ) != nullptr		680294	0		!=			
ANR	680370	AssignmentExpression	entry = readdir ( dp )		680294	0		=			
ANR	680371	Identifier	entry		680294	0					
ANR	680372	CallExpression	readdir ( dp )		680294	1					
ANR	680373	Callee	readdir		680294	0					
ANR	680374	Identifier	readdir		680294	0					
ANR	680375	ArgumentList	dp		680294	1					
ANR	680376	Argument	dp		680294	0					
ANR	680377	Identifier	dp		680294	0					
ANR	680378	Identifier	nullptr		680294	1					
ANR	680379	CompoundStatement		20:2:600:666	680294	1					
ANR	680380	IdentifierDeclStatement	string entryFilepath = directory + g_fileSeparator + entry -> d_name ;	1175:2:31240:31306	680294	0	True				
ANR	680381	IdentifierDecl	entryFilepath = directory + g_fileSeparator + entry -> d_name		680294	0					
ANR	680382	IdentifierDeclType	string		680294	0					
ANR	680383	Identifier	entryFilepath		680294	1					
ANR	680384	AssignmentExpression	entryFilepath = directory + g_fileSeparator + entry -> d_name		680294	2		=			
ANR	680385	Identifier	entryFilepath		680294	0					
ANR	680386	AdditiveExpression	directory + g_fileSeparator + entry -> d_name		680294	1		+			
ANR	680387	Identifier	directory		680294	0					
ANR	680388	AdditiveExpression	g_fileSeparator + entry -> d_name		680294	1		+			
ANR	680389	Identifier	g_fileSeparator		680294	0					
ANR	680390	PtrMemberAccess	entry -> d_name		680294	1					
ANR	680391	Identifier	entry		680294	0					
ANR	680392	Identifier	d_name		680294	1					
ANR	680393	IfStatement	"if ( stat ( entryFilepath . c_str ( ) , & statbuf ) != 0 )"		680294	1					
ANR	680394	Condition	"stat ( entryFilepath . c_str ( ) , & statbuf ) != 0"	1176:6:31314:31355	680294	0	True				
ANR	680395	EqualityExpression	"stat ( entryFilepath . c_str ( ) , & statbuf ) != 0"		680294	0		!=			
ANR	680396	CallExpression	"stat ( entryFilepath . c_str ( ) , & statbuf )"		680294	0					
ANR	680397	Callee	stat		680294	0					
ANR	680398	Identifier	stat		680294	0					
ANR	680399	ArgumentList	entryFilepath . c_str ( )		680294	1					
ANR	680400	Argument	entryFilepath . c_str ( )		680294	0					
ANR	680401	CallExpression	entryFilepath . c_str ( )		680294	0					
ANR	680402	Callee	entryFilepath . c_str		680294	0					
ANR	680403	MemberAccess	entryFilepath . c_str		680294	0					
ANR	680404	Identifier	entryFilepath		680294	0					
ANR	680405	Identifier	c_str		680294	1					
ANR	680406	ArgumentList			680294	1					
ANR	680407	Argument	& statbuf		680294	1					
ANR	680408	UnaryOperationExpression	& statbuf		680294	0					
ANR	680409	UnaryOperator	&		680294	0					
ANR	680410	Identifier	statbuf		680294	1					
ANR	680411	PrimaryExpression	0		680294	1					
ANR	680412	CompoundStatement		22:2:720:720	680294	1					
ANR	680413	IfStatement	if ( errno == EOVERFLOW )		680294	0					
ANR	680414	Condition	errno == EOVERFLOW	1178:7:31369:31386	680294	0	True				
ANR	680415	EqualityExpression	errno == EOVERFLOW		680294	0		==			
ANR	680416	Identifier	errno		680294	0					
ANR	680417	Identifier	EOVERFLOW		680294	1					
ANR	680418	CompoundStatement		24:3:784:784	680294	1					
ANR	680419	ExpressionStatement	errno = 0	1180:4:31430:31439	680294	0	True				
ANR	680420	AssignmentExpression	errno = 0		680294	0		=			
ANR	680421	Identifier	errno		680294	0					
ANR	680422	PrimaryExpression	0		680294	1					
ANR	680423	ContinueStatement	continue ;	1181:4:31445:31453	680294	1	True				
ANR	680424	ExpressionStatement	"perror ( ""errno message"" )"	1183:3:31463:31486	680294	1	True				
ANR	680425	CallExpression	"perror ( ""errno message"" )"		680294	0					
ANR	680426	Callee	perror		680294	0					
ANR	680427	Identifier	perror		680294	0					
ANR	680428	ArgumentList	"""errno message"""		680294	1					
ANR	680429	Argument	"""errno message"""		680294	0					
ANR	680430	PrimaryExpression	"""errno message"""		680294	0					
ANR	680431	ExpressionStatement	"error ( ""Error getting file status in directory"" , directory . c_str ( ) )"	1184:3:31491:31557	680294	2	True				
ANR	680432	CallExpression	"error ( ""Error getting file status in directory"" , directory . c_str ( ) )"		680294	0					
ANR	680433	Callee	error		680294	0					
ANR	680434	Identifier	error		680294	0					
ANR	680435	ArgumentList	"""Error getting file status in directory"""		680294	1					
ANR	680436	Argument	"""Error getting file status in directory"""		680294	0					
ANR	680437	PrimaryExpression	"""Error getting file status in directory"""		680294	0					
ANR	680438	Argument	directory . c_str ( )		680294	1					
ANR	680439	CallExpression	directory . c_str ( )		680294	0					
ANR	680440	Callee	directory . c_str		680294	0					
ANR	680441	MemberAccess	directory . c_str		680294	0					
ANR	680442	Identifier	directory		680294	0					
ANR	680443	Identifier	c_str		680294	1					
ANR	680444	ArgumentList			680294	1					
ANR	680445	IfStatement	if ( entry -> d_name [ 0 ] == '.' || ! ( statbuf . st_mode & S_IWUSR ) )		680294	2					
ANR	680446	Condition	entry -> d_name [ 0 ] == '.' || ! ( statbuf . st_mode & S_IWUSR )	1187:6:31599:31653	680294	0	True				
ANR	680447	OrExpression	entry -> d_name [ 0 ] == '.' || ! ( statbuf . st_mode & S_IWUSR )		680294	0		||			
ANR	680448	EqualityExpression	entry -> d_name [ 0 ] == '.'		680294	0		==			
ANR	680449	ArrayIndexing	entry -> d_name [ 0 ]		680294	0					
ANR	680450	PtrMemberAccess	entry -> d_name		680294	0					
ANR	680451	Identifier	entry		680294	0					
ANR	680452	Identifier	d_name		680294	1					
ANR	680453	PrimaryExpression	0		680294	1					
ANR	680454	PrimaryExpression	'.'		680294	1					
ANR	680455	UnaryOperationExpression	! ( statbuf . st_mode & S_IWUSR )		680294	1					
ANR	680456	UnaryOperator	!		680294	0					
ANR	680457	BitAndExpression	statbuf . st_mode & S_IWUSR		680294	1		&			
ANR	680458	MemberAccess	statbuf . st_mode		680294	0					
ANR	680459	Identifier	statbuf		680294	0					
ANR	680460	Identifier	st_mode		680294	1					
ANR	680461	Identifier	S_IWUSR		680294	1					
ANR	680462	ContinueStatement	continue ;	1188:3:31659:31667	680294	1	True				
ANR	680463	IfStatement	if ( S_ISDIR ( statbuf . st_mode ) && isRecursive )		680294	3					
ANR	680464	Condition	S_ISDIR ( statbuf . st_mode ) && isRecursive	1190:6:31733:31771	680294	0	True				
ANR	680465	AndExpression	S_ISDIR ( statbuf . st_mode ) && isRecursive		680294	0		&&			
ANR	680466	CallExpression	S_ISDIR ( statbuf . st_mode )		680294	0					
ANR	680467	Callee	S_ISDIR		680294	0					
ANR	680468	Identifier	S_ISDIR		680294	0					
ANR	680469	ArgumentList	statbuf . st_mode		680294	1					
ANR	680470	Argument	statbuf . st_mode		680294	0					
ANR	680471	MemberAccess	statbuf . st_mode		680294	0					
ANR	680472	Identifier	statbuf		680294	0					
ANR	680473	Identifier	st_mode		680294	1					
ANR	680474	Identifier	isRecursive		680294	1					
ANR	680475	CompoundStatement		36:2:1136:1136	680294	1					
ANR	680476	IfStatement	if ( isPathExclued ( entryFilepath ) )		680294	0					
ANR	680477	Condition	isPathExclued ( entryFilepath )	1192:7:31785:31812	680294	0	True				
ANR	680478	CallExpression	isPathExclued ( entryFilepath )		680294	0					
ANR	680479	Callee	isPathExclued		680294	0					
ANR	680480	Identifier	isPathExclued		680294	0					
ANR	680481	ArgumentList	entryFilepath		680294	1					
ANR	680482	Argument	entryFilepath		680294	0					
ANR	680483	Identifier	entryFilepath		680294	0					
ANR	680484	ExpressionStatement	"printMsg ( _ ( ""Exclude  %s\\n"" ) , entryFilepath . substr ( mainDirectoryLength ) )"	1193:4:31819:31890	680294	1	True				
ANR	680485	CallExpression	"printMsg ( _ ( ""Exclude  %s\\n"" ) , entryFilepath . substr ( mainDirectoryLength ) )"		680294	0					
ANR	680486	Callee	printMsg		680294	0					
ANR	680487	Identifier	printMsg		680294	0					
ANR	680488	ArgumentList	"_ ( ""Exclude  %s\\n"" )"		680294	1					
ANR	680489	Argument	"_ ( ""Exclude  %s\\n"" )"		680294	0					
ANR	680490	CallExpression	"_ ( ""Exclude  %s\\n"" )"		680294	0					
ANR	680491	Callee	_		680294	0					
ANR	680492	Identifier	_		680294	0					
ANR	680493	ArgumentList	"""Exclude  %s\\n"""		680294	1					
ANR	680494	Argument	"""Exclude  %s\\n"""		680294	0					
ANR	680495	PrimaryExpression	"""Exclude  %s\\n"""		680294	0					
ANR	680496	Argument	entryFilepath . substr ( mainDirectoryLength )		680294	1					
ANR	680497	CallExpression	entryFilepath . substr ( mainDirectoryLength )		680294	0					
ANR	680498	Callee	entryFilepath . substr		680294	0					
ANR	680499	MemberAccess	entryFilepath . substr		680294	0					
ANR	680500	Identifier	entryFilepath		680294	0					
ANR	680501	Identifier	substr		680294	1					
ANR	680502	ArgumentList	mainDirectoryLength		680294	1					
ANR	680503	Argument	mainDirectoryLength		680294	0					
ANR	680504	Identifier	mainDirectoryLength		680294	0					
ANR	680505	ElseStatement	else		680294	0					
ANR	680506	ExpressionStatement	subDirectory . emplace_back ( entryFilepath )	1195:4:31904:31944	680294	0	True				
ANR	680507	CallExpression	subDirectory . emplace_back ( entryFilepath )		680294	0					
ANR	680508	Callee	subDirectory . emplace_back		680294	0					
ANR	680509	MemberAccess	subDirectory . emplace_back		680294	0					
ANR	680510	Identifier	subDirectory		680294	0					
ANR	680511	Identifier	emplace_back		680294	1					
ANR	680512	ArgumentList	entryFilepath		680294	1					
ANR	680513	Argument	entryFilepath		680294	0					
ANR	680514	Identifier	entryFilepath		680294	0					
ANR	680515	ContinueStatement	continue ;	1196:3:31949:31957	680294	1	True				
ANR	680516	IfStatement	if ( S_ISREG ( statbuf . st_mode ) )		680294	4					
ANR	680517	Condition	S_ISREG ( statbuf . st_mode )	1200:6:32001:32024	680294	0	True				
ANR	680518	CallExpression	S_ISREG ( statbuf . st_mode )		680294	0					
ANR	680519	Callee	S_ISREG		680294	0					
ANR	680520	Identifier	S_ISREG		680294	0					
ANR	680521	ArgumentList	statbuf . st_mode		680294	1					
ANR	680522	Argument	statbuf . st_mode		680294	0					
ANR	680523	MemberAccess	statbuf . st_mode		680294	0					
ANR	680524	Identifier	statbuf		680294	0					
ANR	680525	Identifier	st_mode		680294	1					
ANR	680526	CompoundStatement		48:3:1464:1510	680294	1					
ANR	680527	IdentifierDeclStatement	bool isExcluded = isPathExclued ( entryFilepath ) ;	1203:3:32104:32150	680294	0	True				
ANR	680528	IdentifierDecl	isExcluded = isPathExclued ( entryFilepath )		680294	0					
ANR	680529	IdentifierDeclType	bool		680294	0					
ANR	680530	Identifier	isExcluded		680294	1					
ANR	680531	AssignmentExpression	isExcluded = isPathExclued ( entryFilepath )		680294	2		=			
ANR	680532	Identifier	isExcluded		680294	0					
ANR	680533	CallExpression	isPathExclued ( entryFilepath )		680294	1					
ANR	680534	Callee	isPathExclued		680294	0					
ANR	680535	Identifier	isPathExclued		680294	0					
ANR	680536	ArgumentList	entryFilepath		680294	1					
ANR	680537	Argument	entryFilepath		680294	0					
ANR	680538	Identifier	entryFilepath		680294	0					
ANR	680539	IfStatement	"if ( wildcmp ( wildcard . c_str ( ) , entry -> d_name ) != 0 )"		680294	1					
ANR	680540	Condition	"wildcmp ( wildcard . c_str ( ) , entry -> d_name ) != 0"	1205:7:32198:32242	680294	0	True				
ANR	680541	EqualityExpression	"wildcmp ( wildcard . c_str ( ) , entry -> d_name ) != 0"		680294	0		!=			
ANR	680542	CallExpression	"wildcmp ( wildcard . c_str ( ) , entry -> d_name )"		680294	0					
ANR	680543	Callee	wildcmp		680294	0					
ANR	680544	Identifier	wildcmp		680294	0					
ANR	680545	ArgumentList	wildcard . c_str ( )		680294	1					
ANR	680546	Argument	wildcard . c_str ( )		680294	0					
ANR	680547	CallExpression	wildcard . c_str ( )		680294	0					
ANR	680548	Callee	wildcard . c_str		680294	0					
ANR	680549	MemberAccess	wildcard . c_str		680294	0					
ANR	680550	Identifier	wildcard		680294	0					
ANR	680551	Identifier	c_str		680294	1					
ANR	680552	ArgumentList			680294	1					
ANR	680553	Argument	entry -> d_name		680294	1					
ANR	680554	PtrMemberAccess	entry -> d_name		680294	0					
ANR	680555	Identifier	entry		680294	0					
ANR	680556	Identifier	d_name		680294	1					
ANR	680557	PrimaryExpression	0		680294	1					
ANR	680558	CompoundStatement		51:3:1608:1608	680294	1					
ANR	680559	IfStatement	if ( isExcluded )		680294	0					
ANR	680560	Condition	isExcluded	1207:8:32258:32267	680294	0	True				
ANR	680561	Identifier	isExcluded		680294	0					
ANR	680562	ExpressionStatement	"printMsg ( _ ( ""Exclude  %s\\n"" ) , entryFilepath . substr ( mainDirectoryLength ) )"	1208:5:32275:32346	680294	1	True				
ANR	680563	CallExpression	"printMsg ( _ ( ""Exclude  %s\\n"" ) , entryFilepath . substr ( mainDirectoryLength ) )"		680294	0					
ANR	680564	Callee	printMsg		680294	0					
ANR	680565	Identifier	printMsg		680294	0					
ANR	680566	ArgumentList	"_ ( ""Exclude  %s\\n"" )"		680294	1					
ANR	680567	Argument	"_ ( ""Exclude  %s\\n"" )"		680294	0					
ANR	680568	CallExpression	"_ ( ""Exclude  %s\\n"" )"		680294	0					
ANR	680569	Callee	_		680294	0					
ANR	680570	Identifier	_		680294	0					
ANR	680571	ArgumentList	"""Exclude  %s\\n"""		680294	1					
ANR	680572	Argument	"""Exclude  %s\\n"""		680294	0					
ANR	680573	PrimaryExpression	"""Exclude  %s\\n"""		680294	0					
ANR	680574	Argument	entryFilepath . substr ( mainDirectoryLength )		680294	1					
ANR	680575	CallExpression	entryFilepath . substr ( mainDirectoryLength )		680294	0					
ANR	680576	Callee	entryFilepath . substr		680294	0					
ANR	680577	MemberAccess	entryFilepath . substr		680294	0					
ANR	680578	Identifier	entryFilepath		680294	0					
ANR	680579	Identifier	substr		680294	1					
ANR	680580	ArgumentList	mainDirectoryLength		680294	1					
ANR	680581	Argument	mainDirectoryLength		680294	0					
ANR	680582	Identifier	mainDirectoryLength		680294	0					
ANR	680583	ElseStatement	else		680294	0					
ANR	680584	ExpressionStatement	fileName . emplace_back ( entryFilepath )	1210:5:32362:32398	680294	0	True				
ANR	680585	CallExpression	fileName . emplace_back ( entryFilepath )		680294	0					
ANR	680586	Callee	fileName . emplace_back		680294	0					
ANR	680587	MemberAccess	fileName . emplace_back		680294	0					
ANR	680588	Identifier	fileName		680294	0					
ANR	680589	Identifier	emplace_back		680294	1					
ANR	680590	ArgumentList	entryFilepath		680294	1					
ANR	680591	Argument	entryFilepath		680294	0					
ANR	680592	Identifier	entryFilepath		680294	0					
ANR	680593	IfStatement	if ( closedir ( dp ) != 0 )		680294	9					
ANR	680594	Condition	closedir ( dp ) != 0	1215:5:32418:32434	680294	0	True				
ANR	680595	EqualityExpression	closedir ( dp ) != 0		680294	0		!=			
ANR	680596	CallExpression	closedir ( dp )		680294	0					
ANR	680597	Callee	closedir		680294	0					
ANR	680598	Identifier	closedir		680294	0					
ANR	680599	ArgumentList	dp		680294	1					
ANR	680600	Argument	dp		680294	0					
ANR	680601	Identifier	dp		680294	0					
ANR	680602	PrimaryExpression	0		680294	1					
ANR	680603	CompoundStatement		61:1:1798:1798	680294	1					
ANR	680604	ExpressionStatement	"perror ( ""errno message"" )"	1217:2:32442:32465	680294	0	True				
ANR	680605	CallExpression	"perror ( ""errno message"" )"		680294	0					
ANR	680606	Callee	perror		680294	0					
ANR	680607	Identifier	perror		680294	0					
ANR	680608	ArgumentList	"""errno message"""		680294	1					
ANR	680609	Argument	"""errno message"""		680294	0					
ANR	680610	PrimaryExpression	"""errno message"""		680294	0					
ANR	680611	ExpressionStatement	"error ( ""Error reading directory"" , directory . c_str ( ) )"	1218:2:32469:32520	680294	1	True				
ANR	680612	CallExpression	"error ( ""Error reading directory"" , directory . c_str ( ) )"		680294	0					
ANR	680613	Callee	error		680294	0					
ANR	680614	Identifier	error		680294	0					
ANR	680615	ArgumentList	"""Error reading directory"""		680294	1					
ANR	680616	Argument	"""Error reading directory"""		680294	0					
ANR	680617	PrimaryExpression	"""Error reading directory"""		680294	0					
ANR	680618	Argument	directory . c_str ( )		680294	1					
ANR	680619	CallExpression	directory . c_str ( )		680294	0					
ANR	680620	Callee	directory . c_str		680294	0					
ANR	680621	MemberAccess	directory . c_str		680294	0					
ANR	680622	Identifier	directory		680294	0					
ANR	680623	Identifier	c_str		680294	1					
ANR	680624	ArgumentList			680294	1					
ANR	680625	IfStatement	if ( firstEntry < fileName . size ( ) )		680294	10					
ANR	680626	Condition	firstEntry < fileName . size ( )	1222:5:32573:32600	680294	0	True				
ANR	680627	RelationalExpression	firstEntry < fileName . size ( )		680294	0		<			
ANR	680628	Identifier	firstEntry		680294	0					
ANR	680629	CallExpression	fileName . size ( )		680294	1					
ANR	680630	Callee	fileName . size		680294	0					
ANR	680631	MemberAccess	fileName . size		680294	0					
ANR	680632	Identifier	fileName		680294	0					
ANR	680633	Identifier	size		680294	1					
ANR	680634	ArgumentList			680294	1					
ANR	680635	ExpressionStatement	"sort ( & fileName [ firstEntry ] , & fileName [ fileName . size ( ) ] )"	1223:2:32605:32660	680294	1	True				
ANR	680636	CallExpression	"sort ( & fileName [ firstEntry ] , & fileName [ fileName . size ( ) ] )"		680294	0					
ANR	680637	Callee	sort		680294	0					
ANR	680638	Identifier	sort		680294	0					
ANR	680639	ArgumentList	& fileName [ firstEntry ]		680294	1					
ANR	680640	Argument	& fileName [ firstEntry ]		680294	0					
ANR	680641	UnaryOperationExpression	& fileName [ firstEntry ]		680294	0					
ANR	680642	UnaryOperator	&		680294	0					
ANR	680643	ArrayIndexing	fileName [ firstEntry ]		680294	1					
ANR	680644	Identifier	fileName		680294	0					
ANR	680645	Identifier	firstEntry		680294	1					
ANR	680646	Argument	& fileName [ fileName . size ( ) ]		680294	1					
ANR	680647	UnaryOperationExpression	& fileName [ fileName . size ( ) ]		680294	0					
ANR	680648	UnaryOperator	&		680294	0					
ANR	680649	ArrayIndexing	fileName [ fileName . size ( ) ]		680294	1					
ANR	680650	Identifier	fileName		680294	0					
ANR	680651	CallExpression	fileName . size ( )		680294	1					
ANR	680652	Callee	fileName . size		680294	0					
ANR	680653	MemberAccess	fileName . size		680294	0					
ANR	680654	Identifier	fileName		680294	0					
ANR	680655	Identifier	size		680294	1					
ANR	680656	ArgumentList			680294	1					
ANR	680657	IfStatement	if ( subDirectory . size ( ) > 1 )		680294	11					
ANR	680658	Condition	subDirectory . size ( ) > 1	1227:5:32751:32773	680294	0	True				
ANR	680659	RelationalExpression	subDirectory . size ( ) > 1		680294	0		>			
ANR	680660	CallExpression	subDirectory . size ( )		680294	0					
ANR	680661	Callee	subDirectory . size		680294	0					
ANR	680662	MemberAccess	subDirectory . size		680294	0					
ANR	680663	Identifier	subDirectory		680294	0					
ANR	680664	Identifier	size		680294	1					
ANR	680665	ArgumentList			680294	1					
ANR	680666	PrimaryExpression	1		680294	1					
ANR	680667	ExpressionStatement	"sort ( subDirectory . begin ( ) , subDirectory . end ( ) )"	1228:2:32778:32824	680294	1	True				
ANR	680668	CallExpression	"sort ( subDirectory . begin ( ) , subDirectory . end ( ) )"		680294	0					
ANR	680669	Callee	sort		680294	0					
ANR	680670	Identifier	sort		680294	0					
ANR	680671	ArgumentList	subDirectory . begin ( )		680294	1					
ANR	680672	Argument	subDirectory . begin ( )		680294	0					
ANR	680673	CallExpression	subDirectory . begin ( )		680294	0					
ANR	680674	Callee	subDirectory . begin		680294	0					
ANR	680675	MemberAccess	subDirectory . begin		680294	0					
ANR	680676	Identifier	subDirectory		680294	0					
ANR	680677	Identifier	begin		680294	1					
ANR	680678	ArgumentList			680294	1					
ANR	680679	Argument	subDirectory . end ( )		680294	1					
ANR	680680	CallExpression	subDirectory . end ( )		680294	0					
ANR	680681	Callee	subDirectory . end		680294	0					
ANR	680682	MemberAccess	subDirectory . end		680294	0					
ANR	680683	Identifier	subDirectory		680294	0					
ANR	680684	Identifier	end		680294	1					
ANR	680685	ArgumentList			680294	1					
ANR	680686	ForStatement	for ( unsigned i = 0 ; i < subDirectory . size ( ) ; i ++ )		680294	12					
ANR	680687	ForInit	unsigned i = 0 ;	1229:6:32832:32846	680294	0	True				
ANR	680688	IdentifierDeclStatement	unsigned i = 0 ;		680294	0					
ANR	680689	IdentifierDecl	i = 0		680294	0					
ANR	680690	IdentifierDeclType	unsigned		680294	0					
ANR	680691	Identifier	i		680294	1					
ANR	680692	AssignmentExpression	i = 0		680294	2		=			
ANR	680693	Identifier	i		680294	0					
ANR	680694	PrimaryExpression	0		680294	1					
ANR	680695	Condition	i < subDirectory . size ( )	1229:22:32848:32870	680294	1	True				
ANR	680696	RelationalExpression	i < subDirectory . size ( )		680294	0		<			
ANR	680697	Identifier	i		680294	0					
ANR	680698	CallExpression	subDirectory . size ( )		680294	1					
ANR	680699	Callee	subDirectory . size		680294	0					
ANR	680700	MemberAccess	subDirectory . size		680294	0					
ANR	680701	Identifier	subDirectory		680294	0					
ANR	680702	Identifier	size		680294	1					
ANR	680703	ArgumentList			680294	1					
ANR	680704	PostIncDecOperationExpression	i ++	1229:47:32873:32875	680294	2	True				
ANR	680705	Identifier	i		680294	0					
ANR	680706	IncDec	++		680294	1					
ANR	680707	CompoundStatement		75:1:2239:2239	680294	3					
ANR	680708	ExpressionStatement	"getFileNames ( subDirectory [ i ] , wildcard )"	1231:2:32883:32922	680294	0	True				
ANR	680709	CallExpression	"getFileNames ( subDirectory [ i ] , wildcard )"		680294	0					
ANR	680710	Callee	getFileNames		680294	0					
ANR	680711	Identifier	getFileNames		680294	0					
ANR	680712	ArgumentList	subDirectory [ i ]		680294	1					
ANR	680713	Argument	subDirectory [ i ]		680294	0					
ANR	680714	ArrayIndexing	subDirectory [ i ]		680294	0					
ANR	680715	Identifier	subDirectory		680294	0					
ANR	680716	Identifier	i		680294	1					
ANR	680717	Argument	wildcard		680294	1					
ANR	680718	Identifier	wildcard		680294	0					
ANR	680719	ReturnType	void		680294	1					
ANR	680720	Identifier	ASConsole :: getFileNames		680294	2					
ANR	680721	ParameterList	"const string & directory , const string & wildcard"		680294	3					
ANR	680722	Parameter	const string & directory	1155:29:30590:30612	680294	0	True				
ANR	680723	ParameterType	const string &		680294	0					
ANR	680724	Identifier	directory		680294	1					
ANR	680725	Parameter	const string & wildcard	1155:54:30615:30636	680294	1	True				
ANR	680726	ParameterType	const string &		680294	0					
ANR	680727	Identifier	wildcard		680294	1					
ANR	680728	CFGEntryNode	ENTRY		680294		True				
ANR	680729	CFGExitNode	EXIT		680294		True				
ANR	680730	Symbol	fileName		680294						
ANR	680731	Symbol	subDirectory . begin		680294						
ANR	680732	Symbol	* * entry		680294						
ANR	680733	Symbol	isPathExclued		680294						
ANR	680734	Symbol	* subDirectory		680294						
ANR	680735	Symbol	isExcluded		680294						
ANR	680736	Symbol	wildcard . c_str		680294						
ANR	680737	Symbol	dp		680294						
ANR	680738	Symbol	directory		680294						
ANR	680739	Symbol	entryFilepath . substr		680294						
ANR	680740	Symbol	wildcard		680294						
ANR	680741	Symbol	subDirectory		680294						
ANR	680742	Symbol	isRecursive		680294						
ANR	680743	Symbol	readdir		680294						
ANR	680744	Symbol	* entry -> d_name		680294						
ANR	680745	Symbol	entryFilepath . c_str		680294						
ANR	680746	Symbol	firstEntry		680294						
ANR	680747	Symbol	& statbuf		680294						
ANR	680748	Symbol	_		680294						
ANR	680749	Symbol	* entry		680294						
ANR	680750	Symbol	statbuf . st_mode		680294						
ANR	680751	Symbol	errno		680294						
ANR	680752	Symbol	stat		680294						
ANR	680753	Symbol	subDirectory . size		680294						
ANR	680754	Symbol	g_fileSeparator		680294						
ANR	680755	Symbol	i		680294						
ANR	680756	Symbol	entry -> d_name		680294						
ANR	680757	Symbol	EOVERFLOW		680294						
ANR	680758	Symbol	wildcmp		680294						
ANR	680759	Symbol	fileName . size		680294						
ANR	680760	Symbol	mainDirectoryLength		680294						
ANR	680761	Symbol	entry		680294						
ANR	680762	Symbol	S_ISREG		680294						
ANR	680763	Symbol	* i		680294						
ANR	680764	Symbol	statbuf		680294						
ANR	680765	Symbol	directory . c_str		680294						
ANR	680766	Symbol	S_IWUSR		680294						
ANR	680767	Symbol	opendir		680294						
ANR	680768	Symbol	closedir		680294						
ANR	680769	Symbol	subDirectory . end		680294						
ANR	680770	Symbol	entryFilepath		680294						
ANR	680771	Symbol	S_ISDIR		680294						
ANR	680772	Symbol	nullptr		680294						
ANR	680773	DeclStmt									
ANR	680774	Decl							struct lconv	struct lconv *	lc
ANR	680775	Function	ASConsole :: getNumberFormat	1270:0:34166:35075							
ANR	680776	FunctionDef	"ASConsole :: getNumberFormat (int num , const char * groupingArg , const char * separator)"		680775	0					
ANR	680777	CompoundStatement		1271:0:34263:35075	680775	0					
ANR	680778	IdentifierDeclStatement	stringstream alphaNum ;	1273:1:34294:34315	680775	0	True				
ANR	680779	IdentifierDecl	alphaNum		680775	0					
ANR	680780	IdentifierDeclType	stringstream		680775	0					
ANR	680781	Identifier	alphaNum		680775	1					
ANR	680782	ExpressionStatement	alphaNum << num	1274:1:34318:34333	680775	1	True				
ANR	680783	ShiftExpression	alphaNum << num		680775	0		<<			
ANR	680784	Identifier	alphaNum		680775	0					
ANR	680785	Identifier	num		680775	1					
ANR	680786	IdentifierDeclStatement	string number = alphaNum . str ( ) ;	1275:1:34336:34366	680775	2	True				
ANR	680787	IdentifierDecl	number = alphaNum . str ( )		680775	0					
ANR	680788	IdentifierDeclType	string		680775	0					
ANR	680789	Identifier	number		680775	1					
ANR	680790	AssignmentExpression	number = alphaNum . str ( )		680775	2		=			
ANR	680791	Identifier	number		680775	0					
ANR	680792	CallExpression	alphaNum . str ( )		680775	1					
ANR	680793	Callee	alphaNum . str		680775	0					
ANR	680794	MemberAccess	alphaNum . str		680775	0					
ANR	680795	Identifier	alphaNum		680775	0					
ANR	680796	Identifier	str		680775	1					
ANR	680797	ArgumentList			680775	1					
ANR	680798	IdentifierDeclStatement	string formattedNum ;	1277:1:34410:34429	680775	3	True				
ANR	680799	IdentifierDecl	formattedNum		680775	0					
ANR	680800	IdentifierDeclType	string		680775	0					
ANR	680801	Identifier	formattedNum		680775	1					
ANR	680802	IdentifierDeclStatement	size_t ig = 0 ;	1278:1:34432:34445	680775	4	True				
ANR	680803	IdentifierDecl	ig = 0		680775	0					
ANR	680804	IdentifierDeclType	size_t		680775	0					
ANR	680805	Identifier	ig		680775	1					
ANR	680806	AssignmentExpression	ig = 0		680775	2		=			
ANR	680807	Identifier	ig		680775	0					
ANR	680808	PrimaryExpression	0		680775	1					
ANR	680809	IdentifierDeclStatement	int grouping = groupingArg [ ig ] ;	1279:1:34466:34496	680775	5	True				
ANR	680810	IdentifierDecl	grouping = groupingArg [ ig ]		680775	0					
ANR	680811	IdentifierDeclType	int		680775	0					
ANR	680812	Identifier	grouping		680775	1					
ANR	680813	AssignmentExpression	grouping = groupingArg [ ig ]		680775	2		=			
ANR	680814	Identifier	grouping		680775	0					
ANR	680815	ArrayIndexing	groupingArg [ ig ]		680775	1					
ANR	680816	Identifier	groupingArg		680775	0					
ANR	680817	Identifier	ig		680775	1					
ANR	680818	IdentifierDeclStatement	int i = number . length ( ) ;	1280:1:34499:34522	680775	6	True				
ANR	680819	IdentifierDecl	i = number . length ( )		680775	0					
ANR	680820	IdentifierDeclType	int		680775	0					
ANR	680821	Identifier	i		680775	1					
ANR	680822	AssignmentExpression	i = number . length ( )		680775	2		=			
ANR	680823	Identifier	i		680775	0					
ANR	680824	CallExpression	number . length ( )		680775	1					
ANR	680825	Callee	number . length		680775	0					
ANR	680826	MemberAccess	number . length		680775	0					
ANR	680827	Identifier	number		680775	0					
ANR	680828	Identifier	length		680775	1					
ANR	680829	ArgumentList			680775	1					
ANR	680830	IfStatement	if ( grouping == 0 )		680775	7					
ANR	680831	Condition	grouping == 0	1282:5:34555:34567	680775	0	True				
ANR	680832	EqualityExpression	grouping == 0		680775	0		==			
ANR	680833	Identifier	grouping		680775	0					
ANR	680834	PrimaryExpression	0		680775	1					
ANR	680835	ExpressionStatement	grouping = number . length ( )	1283:2:34572:34598	680775	1	True				
ANR	680836	AssignmentExpression	grouping = number . length ( )		680775	0		=			
ANR	680837	Identifier	grouping		680775	0					
ANR	680838	CallExpression	number . length ( )		680775	1					
ANR	680839	Callee	number . length		680775	0					
ANR	680840	MemberAccess	number . length		680775	0					
ANR	680841	Identifier	number		680775	0					
ANR	680842	Identifier	length		680775	1					
ANR	680843	ArgumentList			680775	1					
ANR	680844	WhileStatement	while ( i > 0 )		680775	8					
ANR	680845	Condition	i > 0	1284:8:34608:34612	680775	0	True				
ANR	680846	RelationalExpression	i > 0		680775	0		>			
ANR	680847	Identifier	i		680775	0					
ANR	680848	PrimaryExpression	0		680775	1					
ANR	680849	CompoundStatement		17:2:388:400	680775	1					
ANR	680850	IdentifierDeclStatement	string group ;	1287:2:34652:34664	680775	0	True				
ANR	680851	IdentifierDecl	group		680775	0					
ANR	680852	IdentifierDeclType	string		680775	0					
ANR	680853	Identifier	group		680775	1					
ANR	680854	IfStatement	if ( i < grouping )		680775	1					
ANR	680855	Condition	i < grouping	1288:6:34672:34683	680775	0	True				
ANR	680856	RelationalExpression	i < grouping		680775	0		<			
ANR	680857	Identifier	i		680775	0					
ANR	680858	Identifier	grouping		680775	1					
ANR	680859	ExpressionStatement	group = number	1289:3:34689:34703	680775	1	True				
ANR	680860	AssignmentExpression	group = number		680775	0		=			
ANR	680861	Identifier	group		680775	0					
ANR	680862	Identifier	number		680775	1					
ANR	680863	ElseStatement	else		680775	0					
ANR	680864	ExpressionStatement	group = number . substr ( i - grouping )	1291:3:34715:34750	680775	0	True				
ANR	680865	AssignmentExpression	group = number . substr ( i - grouping )		680775	0		=			
ANR	680866	Identifier	group		680775	0					
ANR	680867	CallExpression	number . substr ( i - grouping )		680775	1					
ANR	680868	Callee	number . substr		680775	0					
ANR	680869	MemberAccess	number . substr		680775	0					
ANR	680870	Identifier	number		680775	0					
ANR	680871	Identifier	substr		680775	1					
ANR	680872	ArgumentList	i - grouping		680775	1					
ANR	680873	Argument	i - grouping		680775	0					
ANR	680874	AdditiveExpression	i - grouping		680775	0		-			
ANR	680875	Identifier	i		680775	0					
ANR	680876	Identifier	grouping		680775	1					
ANR	680877	ExpressionStatement	"formattedNum . insert ( 0 , group )"	1293:2:34783:34812	680775	2	True				
ANR	680878	CallExpression	"formattedNum . insert ( 0 , group )"		680775	0					
ANR	680879	Callee	formattedNum . insert		680775	0					
ANR	680880	MemberAccess	formattedNum . insert		680775	0					
ANR	680881	Identifier	formattedNum		680775	0					
ANR	680882	Identifier	insert		680775	1					
ANR	680883	ArgumentList	0		680775	1					
ANR	680884	Argument	0		680775	0					
ANR	680885	PrimaryExpression	0		680775	0					
ANR	680886	Argument	group		680775	1					
ANR	680887	Identifier	group		680775	0					
ANR	680888	ExpressionStatement	i -= grouping	1294:2:34816:34829	680775	3	True				
ANR	680889	AssignmentExpression	i -= grouping		680775	0		-=			
ANR	680890	Identifier	i		680775	0					
ANR	680891	Identifier	grouping		680775	1					
ANR	680892	IfStatement	if ( i < 0 )		680775	4					
ANR	680893	Condition	i < 0	1295:6:34837:34841	680775	0	True				
ANR	680894	RelationalExpression	i < 0		680775	0		<			
ANR	680895	Identifier	i		680775	0					
ANR	680896	PrimaryExpression	0		680775	1					
ANR	680897	ExpressionStatement	i = 0	1296:3:34847:34852	680775	1	True				
ANR	680898	AssignmentExpression	i = 0		680775	0		=			
ANR	680899	Identifier	i		680775	0					
ANR	680900	PrimaryExpression	0		680775	1					
ANR	680901	IfStatement	if ( i > 0 )		680775	5					
ANR	680902	Condition	i > 0	1297:6:34860:34864	680775	0	True				
ANR	680903	RelationalExpression	i > 0		680775	0		>			
ANR	680904	Identifier	i		680775	0					
ANR	680905	PrimaryExpression	0		680775	1					
ANR	680906	ExpressionStatement	"formattedNum . insert ( 0 , separator )"	1298:3:34870:34903	680775	1	True				
ANR	680907	CallExpression	"formattedNum . insert ( 0 , separator )"		680775	0					
ANR	680908	Callee	formattedNum . insert		680775	0					
ANR	680909	MemberAccess	formattedNum . insert		680775	0					
ANR	680910	Identifier	formattedNum		680775	0					
ANR	680911	Identifier	insert		680775	1					
ANR	680912	ArgumentList	0		680775	1					
ANR	680913	Argument	0		680775	0					
ANR	680914	PrimaryExpression	0		680775	0					
ANR	680915	Argument	separator		680775	1					
ANR	680916	Identifier	separator		680775	0					
ANR	680917	ExpressionStatement	number . erase ( i )	1299:2:34907:34922	680775	6	True				
ANR	680918	CallExpression	number . erase ( i )		680775	0					
ANR	680919	Callee	number . erase		680775	0					
ANR	680920	MemberAccess	number . erase		680775	0					
ANR	680921	Identifier	number		680775	0					
ANR	680922	Identifier	erase		680775	1					
ANR	680923	ArgumentList	i		680775	1					
ANR	680924	Argument	i		680775	0					
ANR	680925	Identifier	i		680775	0					
ANR	680926	IfStatement	if ( groupingArg [ ig ] != '\\0' && groupingArg [ ig + 1 ] != '\\0' )		680775	7					
ANR	680927	Condition	groupingArg [ ig ] != '\\0' && groupingArg [ ig + 1 ] != '\\0'	1301:6:34951:35014	680775	0	True				
ANR	680928	AndExpression	groupingArg [ ig ] != '\\0' && groupingArg [ ig + 1 ] != '\\0'		680775	0		&&			
ANR	680929	EqualityExpression	groupingArg [ ig ] != '\\0'		680775	0		!=			
ANR	680930	ArrayIndexing	groupingArg [ ig ]		680775	0					
ANR	680931	Identifier	groupingArg		680775	0					
ANR	680932	Identifier	ig		680775	1					
ANR	680933	PrimaryExpression	'\\0'		680775	1					
ANR	680934	EqualityExpression	groupingArg [ ig + 1 ] != '\\0'		680775	1		!=			
ANR	680935	ArrayIndexing	groupingArg [ ig + 1 ]		680775	0					
ANR	680936	Identifier	groupingArg		680775	0					
ANR	680937	AdditiveExpression	ig + 1		680775	1		+			
ANR	680938	Identifier	ig		680775	0					
ANR	680939	PrimaryExpression	1		680775	1					
ANR	680940	PrimaryExpression	'\\0'		680775	1					
ANR	680941	ExpressionStatement	grouping = groupingArg [ ++ ig ]	1303:3:35020:35048	680775	1	True				
ANR	680942	AssignmentExpression	grouping = groupingArg [ ++ ig ]		680775	0		=			
ANR	680943	Identifier	grouping		680775	0					
ANR	680944	ArrayIndexing	groupingArg [ ++ ig ]		680775	1					
ANR	680945	Identifier	groupingArg		680775	0					
ANR	680946	UnaryExpression	++ ig		680775	1					
ANR	680947	IncDec	++		680775	0					
ANR	680948	Identifier	ig		680775	1					
ANR	680949	ReturnStatement	return formattedNum ;	1305:1:35054:35073	680775	9	True				
ANR	680950	Identifier	formattedNum		680775	0					
ANR	680951	ReturnType	string		680775	1					
ANR	680952	Identifier	ASConsole :: getNumberFormat		680775	2					
ANR	680953	ParameterList	"int num , const char * groupingArg , const char * separator"		680775	3					
ANR	680954	Parameter	int num	1270:34:34200:34206	680775	0	True				
ANR	680955	ParameterType	int		680775	0					
ANR	680956	Identifier	num		680775	1					
ANR	680957	Parameter	const char * groupingArg	1270:43:34209:34231	680775	1	True				
ANR	680958	ParameterType	const char *		680775	0					
ANR	680959	Identifier	groupingArg		680775	1					
ANR	680960	Parameter	const char * separator	1270:68:34234:34254	680775	2	True				
ANR	680961	ParameterType	const char *		680775	0					
ANR	680962	Identifier	separator		680775	1					
ANR	680963	CFGEntryNode	ENTRY		680775		True				
ANR	680964	CFGExitNode	EXIT		680775		True				
ANR	680965	Symbol	groupingArg		680775						
ANR	680966	Symbol	alphaNum . str		680775						
ANR	680967	Symbol	num		680775						
ANR	680968	Symbol	* ig		680775						
ANR	680969	Symbol	i		680775						
ANR	680970	Symbol	separator		680775						
ANR	680971	Symbol	grouping		680775						
ANR	680972	Symbol	alphaNum		680775						
ANR	680973	Symbol	number		680775						
ANR	680974	Symbol	formattedNum		680775						
ANR	680975	Symbol	number . length		680775						
ANR	680976	Symbol	* groupingArg		680775						
ANR	680977	Symbol	number . substr		680775						
ANR	680978	Symbol	ig		680775						
ANR	680979	Symbol	group		680775						
ANR	680980	Function	ASConsole :: launchDefaultBrowser	1314:0:35326:37176							
ANR	680981	FunctionDef	ASConsole :: launchDefaultBrowser (const char * filePathIn)		680980	0					
ANR	680982	CompoundStatement		1315:0:35405:37176	680980	0					
ANR	680983	IdentifierDeclStatement	struct stat statbuf ;	1316:1:35408:35427	680980	0	True				
ANR	680984	IdentifierDecl	statbuf		680980	0					
ANR	680985	IdentifierDeclType	struct stat		680980	0					
ANR	680986	Identifier	statbuf		680980	1					
ANR	680987	IdentifierDeclStatement	"string htmlDefaultPath = ""/usr/share/doc/astyle/html/"" ;"	1317:1:35430:35484	680980	1	True				
ANR	680988	IdentifierDecl	"htmlDefaultPath = ""/usr/share/doc/astyle/html/"""		680980	0					
ANR	680989	IdentifierDeclType	string		680980	0					
ANR	680990	Identifier	htmlDefaultPath		680980	1					
ANR	680991	AssignmentExpression	"htmlDefaultPath = ""/usr/share/doc/astyle/html/"""		680980	2		=			
ANR	680992	Identifier	htmlDefaultPath		680980	0					
ANR	680993	PrimaryExpression	"""/usr/share/doc/astyle/html/"""		680980	1					
ANR	680994	IdentifierDeclStatement	"string htmlDefaultFile = ""astyle.html"" ;"	1318:1:35487:35525	680980	2	True				
ANR	680995	IdentifierDecl	"htmlDefaultFile = ""astyle.html"""		680980	0					
ANR	680996	IdentifierDeclType	string		680980	0					
ANR	680997	Identifier	htmlDefaultFile		680980	1					
ANR	680998	AssignmentExpression	"htmlDefaultFile = ""astyle.html"""		680980	2		=			
ANR	680999	Identifier	htmlDefaultFile		680980	0					
ANR	681000	PrimaryExpression	"""astyle.html"""		680980	1					
ANR	681001	IdentifierDeclStatement	string htmlFilePath ;	1321:1:35549:35568	680980	3	True				
ANR	681002	IdentifierDecl	htmlFilePath		680980	0					
ANR	681003	IdentifierDeclType	string		680980	0					
ANR	681004	Identifier	htmlFilePath		680980	1					
ANR	681005	IfStatement	if ( filePathIn == nullptr )		680980	4					
ANR	681006	Condition	filePathIn == nullptr	1322:5:35575:35595	680980	0	True				
ANR	681007	EqualityExpression	filePathIn == nullptr		680980	0		==			
ANR	681008	Identifier	filePathIn		680980	0					
ANR	681009	Identifier	nullptr		680980	1					
ANR	681010	ExpressionStatement	htmlFilePath = htmlDefaultPath + htmlDefaultFile	1323:2:35600:35648	680980	1	True				
ANR	681011	AssignmentExpression	htmlFilePath = htmlDefaultPath + htmlDefaultFile		680980	0		=			
ANR	681012	Identifier	htmlFilePath		680980	0					
ANR	681013	AdditiveExpression	htmlDefaultPath + htmlDefaultFile		680980	1		+			
ANR	681014	Identifier	htmlDefaultPath		680980	0					
ANR	681015	Identifier	htmlDefaultFile		680980	1					
ANR	681016	ElseStatement	else		680980	0					
ANR	681017	CompoundStatement		11:1:251:251	680980	0					
ANR	681018	IfStatement	"if ( strpbrk ( filePathIn , ""\\\\/"" ) == nullptr )"		680980	0					
ANR	681019	Condition	"strpbrk ( filePathIn , ""\\\\/"" ) == nullptr"	1326:6:35665:35701	680980	0	True				
ANR	681020	EqualityExpression	"strpbrk ( filePathIn , ""\\\\/"" ) == nullptr"		680980	0		==			
ANR	681021	CallExpression	"strpbrk ( filePathIn , ""\\\\/"" )"		680980	0					
ANR	681022	Callee	strpbrk		680980	0					
ANR	681023	Identifier	strpbrk		680980	0					
ANR	681024	ArgumentList	filePathIn		680980	1					
ANR	681025	Argument	filePathIn		680980	0					
ANR	681026	Identifier	filePathIn		680980	0					
ANR	681027	Argument	"""\\\\/"""		680980	1					
ANR	681028	PrimaryExpression	"""\\\\/"""		680980	0					
ANR	681029	Identifier	nullptr		680980	1					
ANR	681030	ExpressionStatement	htmlFilePath = htmlDefaultPath + filePathIn	1327:3:35707:35750	680980	1	True				
ANR	681031	AssignmentExpression	htmlFilePath = htmlDefaultPath + filePathIn		680980	0		=			
ANR	681032	Identifier	htmlFilePath		680980	0					
ANR	681033	AdditiveExpression	htmlDefaultPath + filePathIn		680980	1		+			
ANR	681034	Identifier	htmlDefaultPath		680980	0					
ANR	681035	Identifier	filePathIn		680980	1					
ANR	681036	ElseStatement	else		680980	0					
ANR	681037	ExpressionStatement	htmlFilePath = filePathIn	1329:3:35762:35787	680980	0	True				
ANR	681038	AssignmentExpression	htmlFilePath = filePathIn		680980	0		=			
ANR	681039	Identifier	htmlFilePath		680980	0					
ANR	681040	Identifier	filePathIn		680980	1					
ANR	681041	ExpressionStatement	standardizePath ( htmlFilePath )	1331:1:35793:35822	680980	5	True				
ANR	681042	CallExpression	standardizePath ( htmlFilePath )		680980	0					
ANR	681043	Callee	standardizePath		680980	0					
ANR	681044	Identifier	standardizePath		680980	0					
ANR	681045	ArgumentList	htmlFilePath		680980	1					
ANR	681046	Argument	htmlFilePath		680980	0					
ANR	681047	Identifier	htmlFilePath		680980	0					
ANR	681048	IfStatement	"if ( stat ( htmlFilePath . c_str ( ) , & statbuf ) != 0 || ! ( statbuf . st_mode & S_IFREG ) )"		680980	6					
ANR	681049	Condition	"stat ( htmlFilePath . c_str ( ) , & statbuf ) != 0 || ! ( statbuf . st_mode & S_IFREG )"	1332:5:35829:35901	680980	0	True				
ANR	681050	OrExpression	"stat ( htmlFilePath . c_str ( ) , & statbuf ) != 0 || ! ( statbuf . st_mode & S_IFREG )"		680980	0		||			
ANR	681051	EqualityExpression	"stat ( htmlFilePath . c_str ( ) , & statbuf ) != 0"		680980	0		!=			
ANR	681052	CallExpression	"stat ( htmlFilePath . c_str ( ) , & statbuf )"		680980	0					
ANR	681053	Callee	stat		680980	0					
ANR	681054	Identifier	stat		680980	0					
ANR	681055	ArgumentList	htmlFilePath . c_str ( )		680980	1					
ANR	681056	Argument	htmlFilePath . c_str ( )		680980	0					
ANR	681057	CallExpression	htmlFilePath . c_str ( )		680980	0					
ANR	681058	Callee	htmlFilePath . c_str		680980	0					
ANR	681059	MemberAccess	htmlFilePath . c_str		680980	0					
ANR	681060	Identifier	htmlFilePath		680980	0					
ANR	681061	Identifier	c_str		680980	1					
ANR	681062	ArgumentList			680980	1					
ANR	681063	Argument	& statbuf		680980	1					
ANR	681064	UnaryOperationExpression	& statbuf		680980	0					
ANR	681065	UnaryOperator	&		680980	0					
ANR	681066	Identifier	statbuf		680980	1					
ANR	681067	PrimaryExpression	0		680980	1					
ANR	681068	UnaryOperationExpression	! ( statbuf . st_mode & S_IFREG )		680980	1					
ANR	681069	UnaryOperator	!		680980	0					
ANR	681070	BitAndExpression	statbuf . st_mode & S_IFREG		680980	1		&			
ANR	681071	MemberAccess	statbuf . st_mode		680980	0					
ANR	681072	Identifier	statbuf		680980	0					
ANR	681073	Identifier	st_mode		680980	1					
ANR	681074	Identifier	S_IFREG		680980	1					
ANR	681075	CompoundStatement		19:1:499:499	680980	1					
ANR	681076	ExpressionStatement	"printf ( _ ( ""Cannot open HTML file %s\\n"" ) , htmlFilePath . c_str ( ) )"	1334:2:35909:35970	680980	0	True				
ANR	681077	CallExpression	"printf ( _ ( ""Cannot open HTML file %s\\n"" ) , htmlFilePath . c_str ( ) )"		680980	0					
ANR	681078	Callee	printf		680980	0					
ANR	681079	Identifier	printf		680980	0					
ANR	681080	ArgumentList	"_ ( ""Cannot open HTML file %s\\n"" )"		680980	1					
ANR	681081	Argument	"_ ( ""Cannot open HTML file %s\\n"" )"		680980	0					
ANR	681082	CallExpression	"_ ( ""Cannot open HTML file %s\\n"" )"		680980	0					
ANR	681083	Callee	_		680980	0					
ANR	681084	Identifier	_		680980	0					
ANR	681085	ArgumentList	"""Cannot open HTML file %s\\n"""		680980	1					
ANR	681086	Argument	"""Cannot open HTML file %s\\n"""		680980	0					
ANR	681087	PrimaryExpression	"""Cannot open HTML file %s\\n"""		680980	0					
ANR	681088	Argument	htmlFilePath . c_str ( )		680980	1					
ANR	681089	CallExpression	htmlFilePath . c_str ( )		680980	0					
ANR	681090	Callee	htmlFilePath . c_str		680980	0					
ANR	681091	MemberAccess	htmlFilePath . c_str		680980	0					
ANR	681092	Identifier	htmlFilePath		680980	0					
ANR	681093	Identifier	c_str		680980	1					
ANR	681094	ArgumentList			680980	1					
ANR	681095	ReturnStatement	return ;	1335:2:35974:35980	680980	1	True				
ANR	681096	IdentifierDeclStatement	"const char * envPaths = getenv ( ""PATH"" ) ;"	1339:1:36008:36045	680980	7	True				
ANR	681097	IdentifierDecl	"* envPaths = getenv ( ""PATH"" )"		680980	0					
ANR	681098	IdentifierDeclType	const char *		680980	0					
ANR	681099	Identifier	envPaths		680980	1					
ANR	681100	AssignmentExpression	"* envPaths = getenv ( ""PATH"" )"		680980	2		=			
ANR	681101	Identifier	envPaths		680980	0					
ANR	681102	CallExpression	"getenv ( ""PATH"" )"		680980	1					
ANR	681103	Callee	getenv		680980	0					
ANR	681104	Identifier	getenv		680980	0					
ANR	681105	ArgumentList	"""PATH"""		680980	1					
ANR	681106	Argument	"""PATH"""		680980	0					
ANR	681107	PrimaryExpression	"""PATH"""		680980	0					
ANR	681108	IfStatement	if ( envPaths == nullptr )		680980	8					
ANR	681109	Condition	envPaths == nullptr	1340:5:36052:36070	680980	0	True				
ANR	681110	EqualityExpression	envPaths == nullptr		680980	0		==			
ANR	681111	Identifier	envPaths		680980	0					
ANR	681112	Identifier	nullptr		680980	1					
ANR	681113	ExpressionStatement	"envPaths = ""?"""	1341:2:36075:36089	680980	1	True				
ANR	681114	AssignmentExpression	"envPaths = ""?"""		680980	0		=			
ANR	681115	Identifier	envPaths		680980	0					
ANR	681116	PrimaryExpression	"""?"""		680980	1					
ANR	681117	IdentifierDeclStatement	size_t envlen = strlen ( envPaths ) ;	1342:1:36092:36124	680980	9	True				
ANR	681118	IdentifierDecl	envlen = strlen ( envPaths )		680980	0					
ANR	681119	IdentifierDeclType	size_t		680980	0					
ANR	681120	Identifier	envlen		680980	1					
ANR	681121	AssignmentExpression	envlen = strlen ( envPaths )		680980	2		=			
ANR	681122	Identifier	envlen		680980	0					
ANR	681123	CallExpression	strlen ( envPaths )		680980	1					
ANR	681124	Callee	strlen		680980	0					
ANR	681125	Identifier	strlen		680980	0					
ANR	681126	ArgumentList	envPaths		680980	1					
ANR	681127	Argument	envPaths		680980	0					
ANR	681128	Identifier	envPaths		680980	0					
ANR	681129	IdentifierDeclStatement	char * paths = new char [ envlen + 1 ] ;	1343:1:36127:36161	680980	10	True				
ANR	681130	IdentifierDecl	* paths = new char [ envlen + 1 ]		680980	0					
ANR	681131	IdentifierDeclType	char *		680980	0					
ANR	681132	Identifier	paths		680980	1					
ANR	681133	AssignmentExpression	* paths = new char [ envlen + 1 ]		680980	2		=			
ANR	681134	Identifier	paths		680980	0					
ANR	681135	AdditiveExpression	envlen + 1		680980	1		+			
ANR	681136	Identifier	envlen		680980	0					
ANR	681137	PrimaryExpression	1		680980	1					
ANR	681138	ExpressionStatement	"strcpy ( paths , envPaths )"	1344:1:36164:36187	680980	11	True				
ANR	681139	CallExpression	"strcpy ( paths , envPaths )"		680980	0					
ANR	681140	Callee	strcpy		680980	0					
ANR	681141	Identifier	strcpy		680980	0					
ANR	681142	ArgumentList	paths		680980	1					
ANR	681143	Argument	paths		680980	0					
ANR	681144	Identifier	paths		680980	0					
ANR	681145	Argument	envPaths		680980	1					
ANR	681146	Identifier	envPaths		680980	0					
ANR	681147	IdentifierDeclStatement	"const char * fileOpen = ""open"" ;"	1348:1:36273:36302	680980	12	True				
ANR	681148	IdentifierDecl	"* fileOpen = ""open"""		680980	0					
ANR	681149	IdentifierDeclType	const char *		680980	0					
ANR	681150	Identifier	fileOpen		680980	1					
ANR	681151	AssignmentExpression	"* fileOpen = ""open"""		680980	2		=			
ANR	681152	Identifier	fileOpen		680980	0					
ANR	681153	PrimaryExpression	"""open"""		680980	1					
ANR	681154	IdentifierDeclStatement	string searchPath ;	1352:1:36354:36371	680980	13	True				
ANR	681155	IdentifierDecl	searchPath		680980	0					
ANR	681156	IdentifierDeclType	string		680980	0					
ANR	681157	Identifier	searchPath		680980	1					
ANR	681158	IdentifierDeclStatement	"char * searchDir = strtok ( paths , "":"" ) ;"	1353:1:36374:36410	680980	14	True				
ANR	681159	IdentifierDecl	"* searchDir = strtok ( paths , "":"" )"		680980	0					
ANR	681160	IdentifierDeclType	char *		680980	0					
ANR	681161	Identifier	searchDir		680980	1					
ANR	681162	AssignmentExpression	"* searchDir = strtok ( paths , "":"" )"		680980	2		=			
ANR	681163	Identifier	searchDir		680980	0					
ANR	681164	CallExpression	"strtok ( paths , "":"" )"		680980	1					
ANR	681165	Callee	strtok		680980	0					
ANR	681166	Identifier	strtok		680980	0					
ANR	681167	ArgumentList	paths		680980	1					
ANR	681168	Argument	paths		680980	0					
ANR	681169	Identifier	paths		680980	0					
ANR	681170	Argument	""":"""		680980	1					
ANR	681171	PrimaryExpression	""":"""		680980	0					
ANR	681172	WhileStatement	while ( searchDir != nullptr )		680980	15					
ANR	681173	Condition	searchDir != nullptr	1354:8:36420:36439	680980	0	True				
ANR	681174	EqualityExpression	searchDir != nullptr		680980	0		!=			
ANR	681175	Identifier	searchDir		680980	0					
ANR	681176	Identifier	nullptr		680980	1					
ANR	681177	CompoundStatement		41:1:1037:1037	680980	1					
ANR	681178	ExpressionStatement	searchPath = searchDir	1356:2:36447:36469	680980	0	True				
ANR	681179	AssignmentExpression	searchPath = searchDir		680980	0		=			
ANR	681180	Identifier	searchPath		680980	0					
ANR	681181	Identifier	searchDir		680980	1					
ANR	681182	IfStatement	if ( searchPath . length ( ) > 0 && searchPath [ searchPath . length ( ) - 1 ] != g_fileSeparator )		680980	1					
ANR	681183	Condition	searchPath . length ( ) > 0 && searchPath [ searchPath . length ( ) - 1 ] != g_fileSeparator	1357:6:36477:36567	680980	0	True				
ANR	681184	AndExpression	searchPath . length ( ) > 0 && searchPath [ searchPath . length ( ) - 1 ] != g_fileSeparator		680980	0		&&			
ANR	681185	RelationalExpression	searchPath . length ( ) > 0		680980	0		>			
ANR	681186	CallExpression	searchPath . length ( )		680980	0					
ANR	681187	Callee	searchPath . length		680980	0					
ANR	681188	MemberAccess	searchPath . length		680980	0					
ANR	681189	Identifier	searchPath		680980	0					
ANR	681190	Identifier	length		680980	1					
ANR	681191	ArgumentList			680980	1					
ANR	681192	PrimaryExpression	0		680980	1					
ANR	681193	EqualityExpression	searchPath [ searchPath . length ( ) - 1 ] != g_fileSeparator		680980	1		!=			
ANR	681194	ArrayIndexing	searchPath [ searchPath . length ( ) - 1 ]		680980	0					
ANR	681195	Identifier	searchPath		680980	0					
ANR	681196	AdditiveExpression	searchPath . length ( ) - 1		680980	1		-			
ANR	681197	CallExpression	searchPath . length ( )		680980	0					
ANR	681198	Callee	searchPath . length		680980	0					
ANR	681199	MemberAccess	searchPath . length		680980	0					
ANR	681200	Identifier	searchPath		680980	0					
ANR	681201	Identifier	length		680980	1					
ANR	681202	ArgumentList			680980	1					
ANR	681203	PrimaryExpression	1		680980	1					
ANR	681204	Identifier	g_fileSeparator		680980	1					
ANR	681205	ExpressionStatement	"searchPath . append ( string ( 1 , g_fileSeparator ) )"	1359:3:36573:36618	680980	1	True				
ANR	681206	CallExpression	"searchPath . append ( string ( 1 , g_fileSeparator ) )"		680980	0					
ANR	681207	Callee	searchPath . append		680980	0					
ANR	681208	MemberAccess	searchPath . append		680980	0					
ANR	681209	Identifier	searchPath		680980	0					
ANR	681210	Identifier	append		680980	1					
ANR	681211	ArgumentList	"string ( 1 , g_fileSeparator )"		680980	1					
ANR	681212	Argument	"string ( 1 , g_fileSeparator )"		680980	0					
ANR	681213	CallExpression	"string ( 1 , g_fileSeparator )"		680980	0					
ANR	681214	Callee	string		680980	0					
ANR	681215	Identifier	string		680980	0					
ANR	681216	ArgumentList	1		680980	1					
ANR	681217	Argument	1		680980	0					
ANR	681218	PrimaryExpression	1		680980	0					
ANR	681219	Argument	g_fileSeparator		680980	1					
ANR	681220	Identifier	g_fileSeparator		680980	0					
ANR	681221	ExpressionStatement	searchPath . append ( fileOpen )	1360:2:36622:36649	680980	2	True				
ANR	681222	CallExpression	searchPath . append ( fileOpen )		680980	0					
ANR	681223	Callee	searchPath . append		680980	0					
ANR	681224	MemberAccess	searchPath . append		680980	0					
ANR	681225	Identifier	searchPath		680980	0					
ANR	681226	Identifier	append		680980	1					
ANR	681227	ArgumentList	fileOpen		680980	1					
ANR	681228	Argument	fileOpen		680980	0					
ANR	681229	Identifier	fileOpen		680980	0					
ANR	681230	IfStatement	"if ( stat ( searchPath . c_str ( ) , & statbuf ) == 0 && ( statbuf . st_mode & S_IFREG ) )"		680980	3					
ANR	681231	Condition	"stat ( searchPath . c_str ( ) , & statbuf ) == 0 && ( statbuf . st_mode & S_IFREG )"	1361:6:36657:36726	680980	0	True				
ANR	681232	AndExpression	"stat ( searchPath . c_str ( ) , & statbuf ) == 0 && ( statbuf . st_mode & S_IFREG )"		680980	0		&&			
ANR	681233	EqualityExpression	"stat ( searchPath . c_str ( ) , & statbuf ) == 0"		680980	0		==			
ANR	681234	CallExpression	"stat ( searchPath . c_str ( ) , & statbuf )"		680980	0					
ANR	681235	Callee	stat		680980	0					
ANR	681236	Identifier	stat		680980	0					
ANR	681237	ArgumentList	searchPath . c_str ( )		680980	1					
ANR	681238	Argument	searchPath . c_str ( )		680980	0					
ANR	681239	CallExpression	searchPath . c_str ( )		680980	0					
ANR	681240	Callee	searchPath . c_str		680980	0					
ANR	681241	MemberAccess	searchPath . c_str		680980	0					
ANR	681242	Identifier	searchPath		680980	0					
ANR	681243	Identifier	c_str		680980	1					
ANR	681244	ArgumentList			680980	1					
ANR	681245	Argument	& statbuf		680980	1					
ANR	681246	UnaryOperationExpression	& statbuf		680980	0					
ANR	681247	UnaryOperator	&		680980	0					
ANR	681248	Identifier	statbuf		680980	1					
ANR	681249	PrimaryExpression	0		680980	1					
ANR	681250	BitAndExpression	statbuf . st_mode & S_IFREG		680980	1		&			
ANR	681251	MemberAccess	statbuf . st_mode		680980	0					
ANR	681252	Identifier	statbuf		680980	0					
ANR	681253	Identifier	st_mode		680980	1					
ANR	681254	Identifier	S_IFREG		680980	1					
ANR	681255	BreakStatement	break ;	1362:3:36732:36737	680980	1	True				
ANR	681256	ExpressionStatement	"searchDir = strtok ( nullptr , "":"" )"	1363:2:36741:36773	680980	4	True				
ANR	681257	AssignmentExpression	"searchDir = strtok ( nullptr , "":"" )"		680980	0		=			
ANR	681258	Identifier	searchDir		680980	0					
ANR	681259	CallExpression	"strtok ( nullptr , "":"" )"		680980	1					
ANR	681260	Callee	strtok		680980	0					
ANR	681261	Identifier	strtok		680980	0					
ANR	681262	ArgumentList	nullptr		680980	1					
ANR	681263	Argument	nullptr		680980	0					
ANR	681264	Identifier	nullptr		680980	0					
ANR	681265	Argument	""":"""		680980	1					
ANR	681266	PrimaryExpression	""":"""		680980	0					
ANR	681267	Statement	delete	1365:1:36779:36784	680980	16	True				
ANR	681268	Statement	[	1365:7:36785:36785	680980	17	True				
ANR	681269	Statement	]	1365:8:36786:36786	680980	18	True				
ANR	681270	ExpressionStatement	paths	1365:10:36788:36793	680980	19	True				
ANR	681271	Identifier	paths		680980	0					
ANR	681272	IfStatement	if ( searchDir == nullptr )		680980	20					
ANR	681273	Condition	searchDir == nullptr	1366:5:36800:36819	680980	0	True				
ANR	681274	EqualityExpression	searchDir == nullptr		680980	0		==			
ANR	681275	Identifier	searchDir		680980	0					
ANR	681276	Identifier	nullptr		680980	1					
ANR	681277	ExpressionStatement	"error ( _ ( ""Command is not installed"" ) , fileOpen )"	1367:2:36824:36870	680980	1	True				
ANR	681278	CallExpression	"error ( _ ( ""Command is not installed"" ) , fileOpen )"		680980	0					
ANR	681279	Callee	error		680980	0					
ANR	681280	Identifier	error		680980	0					
ANR	681281	ArgumentList	"_ ( ""Command is not installed"" )"		680980	1					
ANR	681282	Argument	"_ ( ""Command is not installed"" )"		680980	0					
ANR	681283	CallExpression	"_ ( ""Command is not installed"" )"		680980	0					
ANR	681284	Callee	_		680980	0					
ANR	681285	Identifier	_		680980	0					
ANR	681286	ArgumentList	"""Command is not installed"""		680980	1					
ANR	681287	Argument	"""Command is not installed"""		680980	0					
ANR	681288	PrimaryExpression	"""Command is not installed"""		680980	0					
ANR	681289	Argument	fileOpen		680980	1					
ANR	681290	Identifier	fileOpen		680980	0					
ANR	681291	ExpressionStatement	"printf ( _ ( ""Opening HTML documentation %s\\n"" ) , htmlFilePath . c_str ( ) )"	1370:1:36925:36991	680980	21	True				
ANR	681292	CallExpression	"printf ( _ ( ""Opening HTML documentation %s\\n"" ) , htmlFilePath . c_str ( ) )"		680980	0					
ANR	681293	Callee	printf		680980	0					
ANR	681294	Identifier	printf		680980	0					
ANR	681295	ArgumentList	"_ ( ""Opening HTML documentation %s\\n"" )"		680980	1					
ANR	681296	Argument	"_ ( ""Opening HTML documentation %s\\n"" )"		680980	0					
ANR	681297	CallExpression	"_ ( ""Opening HTML documentation %s\\n"" )"		680980	0					
ANR	681298	Callee	_		680980	0					
ANR	681299	Identifier	_		680980	0					
ANR	681300	ArgumentList	"""Opening HTML documentation %s\\n"""		680980	1					
ANR	681301	Argument	"""Opening HTML documentation %s\\n"""		680980	0					
ANR	681302	PrimaryExpression	"""Opening HTML documentation %s\\n"""		680980	0					
ANR	681303	Argument	htmlFilePath . c_str ( )		680980	1					
ANR	681304	CallExpression	htmlFilePath . c_str ( )		680980	0					
ANR	681305	Callee	htmlFilePath . c_str		680980	0					
ANR	681306	MemberAccess	htmlFilePath . c_str		680980	0					
ANR	681307	Identifier	htmlFilePath		680980	0					
ANR	681308	Identifier	c_str		680980	1					
ANR	681309	ArgumentList			680980	1					
ANR	681310	IfStatement	if ( ! bypassBrowserOpen )		680980	22					
ANR	681311	Condition	! bypassBrowserOpen	1371:5:36998:37015	680980	0	True				
ANR	681312	UnaryOperationExpression	! bypassBrowserOpen		680980	0					
ANR	681313	UnaryOperator	!		680980	0					
ANR	681314	Identifier	bypassBrowserOpen		680980	1					
ANR	681315	CompoundStatement		58:1:1613:1613	680980	1					
ANR	681316	ExpressionStatement	"execlp ( fileOpen , fileOpen , htmlFilePath . c_str ( ) , nullptr )"	1373:2:37023:37080	680980	0	True				
ANR	681317	CallExpression	"execlp ( fileOpen , fileOpen , htmlFilePath . c_str ( ) , nullptr )"		680980	0					
ANR	681318	Callee	execlp		680980	0					
ANR	681319	Identifier	execlp		680980	0					
ANR	681320	ArgumentList	fileOpen		680980	1					
ANR	681321	Argument	fileOpen		680980	0					
ANR	681322	Identifier	fileOpen		680980	0					
ANR	681323	Argument	fileOpen		680980	1					
ANR	681324	Identifier	fileOpen		680980	0					
ANR	681325	Argument	htmlFilePath . c_str ( )		680980	2					
ANR	681326	CallExpression	htmlFilePath . c_str ( )		680980	0					
ANR	681327	Callee	htmlFilePath . c_str		680980	0					
ANR	681328	MemberAccess	htmlFilePath . c_str		680980	0					
ANR	681329	Identifier	htmlFilePath		680980	0					
ANR	681330	Identifier	c_str		680980	1					
ANR	681331	ArgumentList			680980	1					
ANR	681332	Argument	nullptr		680980	3					
ANR	681333	Identifier	nullptr		680980	0					
ANR	681334	ExpressionStatement	"error ( _ ( ""Command execute failure"" ) , fileOpen )"	1375:2:37126:37171	680980	1	True				
ANR	681335	CallExpression	"error ( _ ( ""Command execute failure"" ) , fileOpen )"		680980	0					
ANR	681336	Callee	error		680980	0					
ANR	681337	Identifier	error		680980	0					
ANR	681338	ArgumentList	"_ ( ""Command execute failure"" )"		680980	1					
ANR	681339	Argument	"_ ( ""Command execute failure"" )"		680980	0					
ANR	681340	CallExpression	"_ ( ""Command execute failure"" )"		680980	0					
ANR	681341	Callee	_		680980	0					
ANR	681342	Identifier	_		680980	0					
ANR	681343	ArgumentList	"""Command execute failure"""		680980	1					
ANR	681344	Argument	"""Command execute failure"""		680980	0					
ANR	681345	PrimaryExpression	"""Command execute failure"""		680980	0					
ANR	681346	Argument	fileOpen		680980	1					
ANR	681347	Identifier	fileOpen		680980	0					
ANR	681348	ReturnType	void		680980	1					
ANR	681349	Identifier	ASConsole :: launchDefaultBrowser		680980	2					
ANR	681350	ParameterList	const char * filePathIn		680980	3					
ANR	681351	Parameter	const char * filePathIn	1314:37:35363:35384	680980	0	True				
ANR	681352	ParameterType	const char *		680980	0					
ANR	681353	Identifier	filePathIn		680980	1					
ANR	681354	CFGEntryNode	ENTRY		680980		True				
ANR	681355	CFGExitNode	EXIT		680980		True				
ANR	681356	Symbol	fileOpen		680980						
ANR	681357	Symbol	* searchPath		680980						
ANR	681358	Symbol	string		680980						
ANR	681359	Symbol	strpbrk		680980						
ANR	681360	Symbol	htmlDefaultFile		680980						
ANR	681361	Symbol	searchPath		680980						
ANR	681362	Symbol	strlen		680980						
ANR	681363	Symbol	htmlFilePath . c_str		680980						
ANR	681364	Symbol	bypassBrowserOpen		680980						
ANR	681365	Symbol	envlen		680980						
ANR	681366	Symbol	searchPath . length		680980						
ANR	681367	Symbol	& statbuf		680980						
ANR	681368	Symbol	_		680980						
ANR	681369	Symbol	getenv		680980						
ANR	681370	Symbol	statbuf . st_mode		680980						
ANR	681371	Symbol	htmlDefaultPath		680980						
ANR	681372	Symbol	stat		680980						
ANR	681373	Symbol	g_fileSeparator		680980						
ANR	681374	Symbol	strtok		680980						
ANR	681375	Symbol	S_IFREG		680980						
ANR	681376	Symbol	statbuf		680980						
ANR	681377	Symbol	envPaths		680980						
ANR	681378	Symbol	paths		680980						
ANR	681379	Symbol	* searchPath . length		680980						
ANR	681380	Symbol	searchPath . c_str		680980						
ANR	681381	Symbol	searchDir		680980						
ANR	681382	Symbol	htmlFilePath		680980						
ANR	681383	Symbol	nullptr		680980						
ANR	681384	Symbol	filePathIn		680980						
ANR	681385	Function	ASConsole :: getFilePaths	1382:0:37259:40378							
ANR	681386	FunctionDef	ASConsole :: getFilePaths (const string & filePath)		681385	0					
ANR	681387	CompoundStatement		1383:0:37312:40378	681385	0					
ANR	681388	ExpressionStatement	fileName . clear ( )	1384:1:37315:37331	681385	0	True				
ANR	681389	CallExpression	fileName . clear ( )		681385	0					
ANR	681390	Callee	fileName . clear		681385	0					
ANR	681391	MemberAccess	fileName . clear		681385	0					
ANR	681392	Identifier	fileName		681385	0					
ANR	681393	Identifier	clear		681385	1					
ANR	681394	ArgumentList			681385	1					
ANR	681395	ExpressionStatement	targetDirectory = string ( )	1385:1:37334:37360	681385	1	True				
ANR	681396	AssignmentExpression	targetDirectory = string ( )		681385	0		=			
ANR	681397	Identifier	targetDirectory		681385	0					
ANR	681398	CallExpression	string ( )		681385	1					
ANR	681399	Callee	string		681385	0					
ANR	681400	Identifier	string		681385	0					
ANR	681401	ArgumentList			681385	1					
ANR	681402	ExpressionStatement	targetFilename = string ( )	1386:1:37363:37388	681385	2	True				
ANR	681403	AssignmentExpression	targetFilename = string ( )		681385	0		=			
ANR	681404	Identifier	targetFilename		681385	0					
ANR	681405	CallExpression	string ( )		681385	1					
ANR	681406	Callee	string		681385	0					
ANR	681407	Identifier	string		681385	0					
ANR	681408	ArgumentList			681385	1					
ANR	681409	IdentifierDeclStatement	size_t separator = filePath . find_last_of ( g_fileSeparator ) ;	1389:1:37429:37486	681385	3	True				
ANR	681410	IdentifierDecl	separator = filePath . find_last_of ( g_fileSeparator )		681385	0					
ANR	681411	IdentifierDeclType	size_t		681385	0					
ANR	681412	Identifier	separator		681385	1					
ANR	681413	AssignmentExpression	separator = filePath . find_last_of ( g_fileSeparator )		681385	2		=			
ANR	681414	Identifier	separator		681385	0					
ANR	681415	CallExpression	filePath . find_last_of ( g_fileSeparator )		681385	1					
ANR	681416	Callee	filePath . find_last_of		681385	0					
ANR	681417	MemberAccess	filePath . find_last_of		681385	0					
ANR	681418	Identifier	filePath		681385	0					
ANR	681419	Identifier	find_last_of		681385	1					
ANR	681420	ArgumentList	g_fileSeparator		681385	1					
ANR	681421	Argument	g_fileSeparator		681385	0					
ANR	681422	Identifier	g_fileSeparator		681385	0					
ANR	681423	IfStatement	if ( separator == string :: npos )		681385	4					
ANR	681424	Condition	separator == string :: npos	1390:5:37493:37517	681385	0	True				
ANR	681425	EqualityExpression	separator == string :: npos		681385	0		==			
ANR	681426	Identifier	separator		681385	0					
ANR	681427	Identifier	string :: npos		681385	1					
ANR	681428	CompoundStatement		9:1:208:208	681385	1					
ANR	681429	ExpressionStatement	targetDirectory = getCurrentDirectory ( filePath )	1393:2:37593:37640	681385	0	True				
ANR	681430	AssignmentExpression	targetDirectory = getCurrentDirectory ( filePath )		681385	0		=			
ANR	681431	Identifier	targetDirectory		681385	0					
ANR	681432	CallExpression	getCurrentDirectory ( filePath )		681385	1					
ANR	681433	Callee	getCurrentDirectory		681385	0					
ANR	681434	Identifier	getCurrentDirectory		681385	0					
ANR	681435	ArgumentList	filePath		681385	1					
ANR	681436	Argument	filePath		681385	0					
ANR	681437	Identifier	filePath		681385	0					
ANR	681438	ExpressionStatement	targetFilename = filePath	1394:2:37644:37670	681385	1	True				
ANR	681439	AssignmentExpression	targetFilename = filePath		681385	0		=			
ANR	681440	Identifier	targetFilename		681385	0					
ANR	681441	Identifier	filePath		681385	1					
ANR	681442	ExpressionStatement	mainDirectoryLength = targetDirectory . length ( ) + 1	1395:2:37674:37724	681385	2	True				
ANR	681443	AssignmentExpression	mainDirectoryLength = targetDirectory . length ( ) + 1		681385	0		=			
ANR	681444	Identifier	mainDirectoryLength		681385	0					
ANR	681445	AdditiveExpression	targetDirectory . length ( ) + 1		681385	1		+			
ANR	681446	CallExpression	targetDirectory . length ( )		681385	0					
ANR	681447	Callee	targetDirectory . length		681385	0					
ANR	681448	MemberAccess	targetDirectory . length		681385	0					
ANR	681449	Identifier	targetDirectory		681385	0					
ANR	681450	Identifier	length		681385	1					
ANR	681451	ArgumentList			681385	1					
ANR	681452	PrimaryExpression	1		681385	1					
ANR	681453	ElseStatement	else		681385	0					
ANR	681454	CompoundStatement		16:1:460:460	681385	0					
ANR	681455	ExpressionStatement	"targetDirectory = filePath . substr ( 0 , separator )"	1399:2:37777:37824	681385	0	True				
ANR	681456	AssignmentExpression	"targetDirectory = filePath . substr ( 0 , separator )"		681385	0		=			
ANR	681457	Identifier	targetDirectory		681385	0					
ANR	681458	CallExpression	"filePath . substr ( 0 , separator )"		681385	1					
ANR	681459	Callee	filePath . substr		681385	0					
ANR	681460	MemberAccess	filePath . substr		681385	0					
ANR	681461	Identifier	filePath		681385	0					
ANR	681462	Identifier	substr		681385	1					
ANR	681463	ArgumentList	0		681385	1					
ANR	681464	Argument	0		681385	0					
ANR	681465	PrimaryExpression	0		681385	0					
ANR	681466	Argument	separator		681385	1					
ANR	681467	Identifier	separator		681385	0					
ANR	681468	ExpressionStatement	targetFilename = filePath . substr ( separator + 1 )	1400:2:37828:37876	681385	1	True				
ANR	681469	AssignmentExpression	targetFilename = filePath . substr ( separator + 1 )		681385	0		=			
ANR	681470	Identifier	targetFilename		681385	0					
ANR	681471	CallExpression	filePath . substr ( separator + 1 )		681385	1					
ANR	681472	Callee	filePath . substr		681385	0					
ANR	681473	MemberAccess	filePath . substr		681385	0					
ANR	681474	Identifier	filePath		681385	0					
ANR	681475	Identifier	substr		681385	1					
ANR	681476	ArgumentList	separator + 1		681385	1					
ANR	681477	Argument	separator + 1		681385	0					
ANR	681478	AdditiveExpression	separator + 1		681385	0		+			
ANR	681479	Identifier	separator		681385	0					
ANR	681480	PrimaryExpression	1		681385	1					
ANR	681481	ExpressionStatement	mainDirectoryLength = targetDirectory . length ( ) + 1	1401:2:37880:37930	681385	2	True				
ANR	681482	AssignmentExpression	mainDirectoryLength = targetDirectory . length ( ) + 1		681385	0		=			
ANR	681483	Identifier	mainDirectoryLength		681385	0					
ANR	681484	AdditiveExpression	targetDirectory . length ( ) + 1		681385	1		+			
ANR	681485	CallExpression	targetDirectory . length ( )		681385	0					
ANR	681486	Callee	targetDirectory . length		681385	0					
ANR	681487	MemberAccess	targetDirectory . length		681385	0					
ANR	681488	Identifier	targetDirectory		681385	0					
ANR	681489	Identifier	length		681385	1					
ANR	681490	ArgumentList			681385	1					
ANR	681491	PrimaryExpression	1		681385	1					
ANR	681492	IfStatement	if ( targetFilename . length ( ) == 0 )		681385	5					
ANR	681493	Condition	targetFilename . length ( ) == 0	1404:5:37978:38005	681385	0	True				
ANR	681494	EqualityExpression	targetFilename . length ( ) == 0		681385	0		==			
ANR	681495	CallExpression	targetFilename . length ( )		681385	0					
ANR	681496	Callee	targetFilename . length		681385	0					
ANR	681497	MemberAccess	targetFilename . length		681385	0					
ANR	681498	Identifier	targetFilename		681385	0					
ANR	681499	Identifier	length		681385	1					
ANR	681500	ArgumentList			681385	1					
ANR	681501	PrimaryExpression	0		681385	1					
ANR	681502	CompoundStatement		23:1:696:696	681385	1					
ANR	681503	ExpressionStatement	"fprintf ( stderr , _ ( ""Missing filename in %s\\n"" ) , filePath . c_str ( ) )"	1406:2:38013:38077	681385	0	True				
ANR	681504	CallExpression	"fprintf ( stderr , _ ( ""Missing filename in %s\\n"" ) , filePath . c_str ( ) )"		681385	0					
ANR	681505	Callee	fprintf		681385	0					
ANR	681506	Identifier	fprintf		681385	0					
ANR	681507	ArgumentList	stderr		681385	1					
ANR	681508	Argument	stderr		681385	0					
ANR	681509	Identifier	stderr		681385	0					
ANR	681510	Argument	"_ ( ""Missing filename in %s\\n"" )"		681385	1					
ANR	681511	CallExpression	"_ ( ""Missing filename in %s\\n"" )"		681385	0					
ANR	681512	Callee	_		681385	0					
ANR	681513	Identifier	_		681385	0					
ANR	681514	ArgumentList	"""Missing filename in %s\\n"""		681385	1					
ANR	681515	Argument	"""Missing filename in %s\\n"""		681385	0					
ANR	681516	PrimaryExpression	"""Missing filename in %s\\n"""		681385	0					
ANR	681517	Argument	filePath . c_str ( )		681385	2					
ANR	681518	CallExpression	filePath . c_str ( )		681385	0					
ANR	681519	Callee	filePath . c_str		681385	0					
ANR	681520	MemberAccess	filePath . c_str		681385	0					
ANR	681521	Identifier	filePath		681385	0					
ANR	681522	Identifier	c_str		681385	1					
ANR	681523	ArgumentList			681385	1					
ANR	681524	ExpressionStatement	error ( )	1407:2:38081:38088	681385	1	True				
ANR	681525	CallExpression	error ( )		681385	0					
ANR	681526	Callee	error		681385	0					
ANR	681527	Identifier	error		681385	0					
ANR	681528	ArgumentList			681385	1					
ANR	681529	ExpressionStatement	hasWildcard = false	1411:1:38128:38147	681385	6	True				
ANR	681530	AssignmentExpression	hasWildcard = false		681385	0		=			
ANR	681531	Identifier	hasWildcard		681385	0					
ANR	681532	Identifier	false		681385	1					
ANR	681533	IfStatement	"if ( targetFilename . find_first_of ( ""*?"" ) != string :: npos )"		681385	7					
ANR	681534	Condition	"targetFilename . find_first_of ( ""*?"" ) != string :: npos"	1412:5:38154:38203	681385	0	True				
ANR	681535	EqualityExpression	"targetFilename . find_first_of ( ""*?"" ) != string :: npos"		681385	0		!=			
ANR	681536	CallExpression	"targetFilename . find_first_of ( ""*?"" )"		681385	0					
ANR	681537	Callee	targetFilename . find_first_of		681385	0					
ANR	681538	MemberAccess	targetFilename . find_first_of		681385	0					
ANR	681539	Identifier	targetFilename		681385	0					
ANR	681540	Identifier	find_first_of		681385	1					
ANR	681541	ArgumentList	"""*?"""		681385	1					
ANR	681542	Argument	"""*?"""		681385	0					
ANR	681543	PrimaryExpression	"""*?"""		681385	0					
ANR	681544	Identifier	string :: npos		681385	1					
ANR	681545	ExpressionStatement	hasWildcard = true	1413:2:38208:38226	681385	1	True				
ANR	681546	AssignmentExpression	hasWildcard = true		681385	0		=			
ANR	681547	Identifier	hasWildcard		681385	0					
ANR	681548	Identifier	true		681385	1					
ANR	681549	IdentifierDeclStatement	size_t excludeHitsVectorSize = excludeHitsVector . size ( ) ;	1416:1:38260:38315	681385	8	True				
ANR	681550	IdentifierDecl	excludeHitsVectorSize = excludeHitsVector . size ( )		681385	0					
ANR	681551	IdentifierDeclType	size_t		681385	0					
ANR	681552	Identifier	excludeHitsVectorSize		681385	1					
ANR	681553	AssignmentExpression	excludeHitsVectorSize = excludeHitsVector . size ( )		681385	2		=			
ANR	681554	Identifier	excludeHitsVectorSize		681385	0					
ANR	681555	CallExpression	excludeHitsVector . size ( )		681385	1					
ANR	681556	Callee	excludeHitsVector . size		681385	0					
ANR	681557	MemberAccess	excludeHitsVector . size		681385	0					
ANR	681558	Identifier	excludeHitsVector		681385	0					
ANR	681559	Identifier	size		681385	1					
ANR	681560	ArgumentList			681385	1					
ANR	681561	ForStatement	for ( size_t ix = 0 ; ix < excludeHitsVectorSize ; ix ++ )		681385	9					
ANR	681562	ForInit	size_t ix = 0 ;	1417:6:38323:38336	681385	0	True				
ANR	681563	IdentifierDeclStatement	size_t ix = 0 ;		681385	0					
ANR	681564	IdentifierDecl	ix = 0		681385	0					
ANR	681565	IdentifierDeclType	size_t		681385	0					
ANR	681566	Identifier	ix		681385	1					
ANR	681567	AssignmentExpression	ix = 0		681385	2		=			
ANR	681568	Identifier	ix		681385	0					
ANR	681569	PrimaryExpression	0		681385	1					
ANR	681570	Condition	ix < excludeHitsVectorSize	1417:21:38338:38363	681385	1	True				
ANR	681571	RelationalExpression	ix < excludeHitsVectorSize		681385	0		<			
ANR	681572	Identifier	ix		681385	0					
ANR	681573	Identifier	excludeHitsVectorSize		681385	1					
ANR	681574	PostIncDecOperationExpression	ix ++	1417:49:38366:38369	681385	2	True				
ANR	681575	Identifier	ix		681385	0					
ANR	681576	IncDec	++		681385	1					
ANR	681577	ExpressionStatement	excludeHitsVector [ ix ] = false	1418:2:38374:38403	681385	3	True				
ANR	681578	AssignmentExpression	excludeHitsVector [ ix ] = false		681385	0		=			
ANR	681579	ArrayIndexing	excludeHitsVector [ ix ]		681385	0					
ANR	681580	Identifier	excludeHitsVector		681385	0					
ANR	681581	Identifier	ix		681385	1					
ANR	681582	Identifier	false		681385	1					
ANR	681583	IfStatement	if ( isRecursive && ! hasWildcard )		681385	10					
ANR	681584	Condition	isRecursive && ! hasWildcard	1422:5:38528:38554	681385	0	True				
ANR	681585	AndExpression	isRecursive && ! hasWildcard		681385	0		&&			
ANR	681586	Identifier	isRecursive		681385	0					
ANR	681587	UnaryOperationExpression	! hasWildcard		681385	1					
ANR	681588	UnaryOperator	!		681385	0					
ANR	681589	Identifier	hasWildcard		681385	1					
ANR	681590	CompoundStatement		41:1:1245:1245	681385	1					
ANR	681591	ExpressionStatement	"fprintf ( stderr , ""%s\\n"" , _ ( ""Recursive option with no wildcard"" ) )"	1424:2:38562:38625	681385	0	True				
ANR	681592	CallExpression	"fprintf ( stderr , ""%s\\n"" , _ ( ""Recursive option with no wildcard"" ) )"		681385	0					
ANR	681593	Callee	fprintf		681385	0					
ANR	681594	Identifier	fprintf		681385	0					
ANR	681595	ArgumentList	stderr		681385	1					
ANR	681596	Argument	stderr		681385	0					
ANR	681597	Identifier	stderr		681385	0					
ANR	681598	Argument	"""%s\\n"""		681385	1					
ANR	681599	PrimaryExpression	"""%s\\n"""		681385	0					
ANR	681600	Argument	"_ ( ""Recursive option with no wildcard"" )"		681385	2					
ANR	681601	CallExpression	"_ ( ""Recursive option with no wildcard"" )"		681385	0					
ANR	681602	Callee	_		681385	0					
ANR	681603	Identifier	_		681385	0					
ANR	681604	ArgumentList	"""Recursive option with no wildcard"""		681385	1					
ANR	681605	Argument	"""Recursive option with no wildcard"""		681385	0					
ANR	681606	PrimaryExpression	"""Recursive option with no wildcard"""		681385	0					
ANR	681607	ExpressionStatement	"fprintf ( stderr , ""%s\\n"" , _ ( ""Did you intend quote the filename"" ) )"	1426:2:38644:38707	681385	1	True				
ANR	681608	CallExpression	"fprintf ( stderr , ""%s\\n"" , _ ( ""Did you intend quote the filename"" ) )"		681385	0					
ANR	681609	Callee	fprintf		681385	0					
ANR	681610	Identifier	fprintf		681385	0					
ANR	681611	ArgumentList	stderr		681385	1					
ANR	681612	Argument	stderr		681385	0					
ANR	681613	Identifier	stderr		681385	0					
ANR	681614	Argument	"""%s\\n"""		681385	1					
ANR	681615	PrimaryExpression	"""%s\\n"""		681385	0					
ANR	681616	Argument	"_ ( ""Did you intend quote the filename"" )"		681385	2					
ANR	681617	CallExpression	"_ ( ""Did you intend quote the filename"" )"		681385	0					
ANR	681618	Callee	_		681385	0					
ANR	681619	Identifier	_		681385	0					
ANR	681620	ArgumentList	"""Did you intend quote the filename"""		681385	1					
ANR	681621	Argument	"""Did you intend quote the filename"""		681385	0					
ANR	681622	PrimaryExpression	"""Did you intend quote the filename"""		681385	0					
ANR	681623	ExpressionStatement	error ( )	1428:2:38718:38725	681385	2	True				
ANR	681624	CallExpression	error ( )		681385	0					
ANR	681625	Callee	error		681385	0					
ANR	681626	Identifier	error		681385	0					
ANR	681627	ArgumentList			681385	1					
ANR	681628	IfStatement	if ( hasWildcard )		681385	11					
ANR	681629	Condition	hasWildcard	1432:5:38787:38797	681385	0	True				
ANR	681630	Identifier	hasWildcard		681385	0					
ANR	681631	CompoundStatement		51:1:1488:1488	681385	1					
ANR	681632	ExpressionStatement	printSeparatingLine ( )	1434:2:38805:38826	681385	0	True				
ANR	681633	CallExpression	printSeparatingLine ( )		681385	0					
ANR	681634	Callee	printSeparatingLine		681385	0					
ANR	681635	Identifier	printSeparatingLine		681385	0					
ANR	681636	ArgumentList			681385	1					
ANR	681637	ExpressionStatement	"printMsg ( _ ( ""Directory  %s\\n"" ) , targetDirectory + g_fileSeparator + targetFilename )"	1435:2:38830:38912	681385	1	True				
ANR	681638	CallExpression	"printMsg ( _ ( ""Directory  %s\\n"" ) , targetDirectory + g_fileSeparator + targetFilename )"		681385	0					
ANR	681639	Callee	printMsg		681385	0					
ANR	681640	Identifier	printMsg		681385	0					
ANR	681641	ArgumentList	"_ ( ""Directory  %s\\n"" )"		681385	1					
ANR	681642	Argument	"_ ( ""Directory  %s\\n"" )"		681385	0					
ANR	681643	CallExpression	"_ ( ""Directory  %s\\n"" )"		681385	0					
ANR	681644	Callee	_		681385	0					
ANR	681645	Identifier	_		681385	0					
ANR	681646	ArgumentList	"""Directory  %s\\n"""		681385	1					
ANR	681647	Argument	"""Directory  %s\\n"""		681385	0					
ANR	681648	PrimaryExpression	"""Directory  %s\\n"""		681385	0					
ANR	681649	Argument	targetDirectory + g_fileSeparator + targetFilename		681385	1					
ANR	681650	AdditiveExpression	targetDirectory + g_fileSeparator + targetFilename		681385	0		+			
ANR	681651	Identifier	targetDirectory		681385	0					
ANR	681652	AdditiveExpression	g_fileSeparator + targetFilename		681385	1		+			
ANR	681653	Identifier	g_fileSeparator		681385	0					
ANR	681654	Identifier	targetFilename		681385	1					
ANR	681655	IfStatement	if ( hasWildcard || isRecursive )		681385	12					
ANR	681656	Condition	hasWildcard || isRecursive	1439:5:38978:39003	681385	0	True				
ANR	681657	OrExpression	hasWildcard || isRecursive		681385	0		||			
ANR	681658	Identifier	hasWildcard		681385	0					
ANR	681659	Identifier	isRecursive		681385	1					
ANR	681660	ExpressionStatement	"getFileNames ( targetDirectory , targetFilename )"	1440:2:39008:39053	681385	1	True				
ANR	681661	CallExpression	"getFileNames ( targetDirectory , targetFilename )"		681385	0					
ANR	681662	Callee	getFileNames		681385	0					
ANR	681663	Identifier	getFileNames		681385	0					
ANR	681664	ArgumentList	targetDirectory		681385	1					
ANR	681665	Argument	targetDirectory		681385	0					
ANR	681666	Identifier	targetDirectory		681385	0					
ANR	681667	Argument	targetFilename		681385	1					
ANR	681668	Identifier	targetFilename		681385	0					
ANR	681669	ElseStatement	else		681385	0					
ANR	681670	CompoundStatement		63:2:1893:1912	681385	0					
ANR	681671	IdentifierDeclStatement	string entryFilepath = targetDirectory + g_fileSeparator + targetFilename ;	1444:2:39129:39202	681385	0	True				
ANR	681672	IdentifierDecl	entryFilepath = targetDirectory + g_fileSeparator + targetFilename		681385	0					
ANR	681673	IdentifierDeclType	string		681385	0					
ANR	681674	Identifier	entryFilepath		681385	1					
ANR	681675	AssignmentExpression	entryFilepath = targetDirectory + g_fileSeparator + targetFilename		681385	2		=			
ANR	681676	Identifier	entryFilepath		681385	0					
ANR	681677	AdditiveExpression	targetDirectory + g_fileSeparator + targetFilename		681385	1		+			
ANR	681678	Identifier	targetDirectory		681385	0					
ANR	681679	AdditiveExpression	g_fileSeparator + targetFilename		681385	1		+			
ANR	681680	Identifier	g_fileSeparator		681385	0					
ANR	681681	Identifier	targetFilename		681385	1					
ANR	681682	IdentifierDeclStatement	struct stat statbuf ;	1445:2:39206:39225	681385	1	True				
ANR	681683	IdentifierDecl	statbuf		681385	0					
ANR	681684	IdentifierDeclType	struct stat		681385	0					
ANR	681685	Identifier	statbuf		681385	1					
ANR	681686	IfStatement	"if ( stat ( entryFilepath . c_str ( ) , & statbuf ) == 0 && ( statbuf . st_mode & S_IFREG ) )"		681385	2					
ANR	681687	Condition	"stat ( entryFilepath . c_str ( ) , & statbuf ) == 0 && ( statbuf . st_mode & S_IFREG )"	1446:6:39233:39305	681385	0	True				
ANR	681688	AndExpression	"stat ( entryFilepath . c_str ( ) , & statbuf ) == 0 && ( statbuf . st_mode & S_IFREG )"		681385	0		&&			
ANR	681689	EqualityExpression	"stat ( entryFilepath . c_str ( ) , & statbuf ) == 0"		681385	0		==			
ANR	681690	CallExpression	"stat ( entryFilepath . c_str ( ) , & statbuf )"		681385	0					
ANR	681691	Callee	stat		681385	0					
ANR	681692	Identifier	stat		681385	0					
ANR	681693	ArgumentList	entryFilepath . c_str ( )		681385	1					
ANR	681694	Argument	entryFilepath . c_str ( )		681385	0					
ANR	681695	CallExpression	entryFilepath . c_str ( )		681385	0					
ANR	681696	Callee	entryFilepath . c_str		681385	0					
ANR	681697	MemberAccess	entryFilepath . c_str		681385	0					
ANR	681698	Identifier	entryFilepath		681385	0					
ANR	681699	Identifier	c_str		681385	1					
ANR	681700	ArgumentList			681385	1					
ANR	681701	Argument	& statbuf		681385	1					
ANR	681702	UnaryOperationExpression	& statbuf		681385	0					
ANR	681703	UnaryOperator	&		681385	0					
ANR	681704	Identifier	statbuf		681385	1					
ANR	681705	PrimaryExpression	0		681385	1					
ANR	681706	BitAndExpression	statbuf . st_mode & S_IFREG		681385	1		&			
ANR	681707	MemberAccess	statbuf . st_mode		681385	0					
ANR	681708	Identifier	statbuf		681385	0					
ANR	681709	Identifier	st_mode		681385	1					
ANR	681710	Identifier	S_IFREG		681385	1					
ANR	681711	ExpressionStatement	fileName . emplace_back ( entryFilepath )	1447:3:39311:39347	681385	1	True				
ANR	681712	CallExpression	fileName . emplace_back ( entryFilepath )		681385	0					
ANR	681713	Callee	fileName . emplace_back		681385	0					
ANR	681714	MemberAccess	fileName . emplace_back		681385	0					
ANR	681715	Identifier	fileName		681385	0					
ANR	681716	Identifier	emplace_back		681385	1					
ANR	681717	ArgumentList	entryFilepath		681385	1					
ANR	681718	Argument	entryFilepath		681385	0					
ANR	681719	Identifier	entryFilepath		681385	0					
ANR	681720	IdentifierDeclStatement	bool excludeErr = false ;	1451:1:39389:39412	681385	13	True				
ANR	681721	IdentifierDecl	excludeErr = false		681385	0					
ANR	681722	IdentifierDeclType	bool		681385	0					
ANR	681723	Identifier	excludeErr		681385	1					
ANR	681724	AssignmentExpression	excludeErr = false		681385	2		=			
ANR	681725	Identifier	false		681385	0					
ANR	681726	Identifier	false		681385	1					
ANR	681727	ForStatement	for ( size_t ix = 0 ; ix < excludeHitsVector . size ( ) ; ix ++ )		681385	14					
ANR	681728	ForInit	size_t ix = 0 ;	1452:6:39420:39433	681385	0	True				
ANR	681729	IdentifierDeclStatement	size_t ix = 0 ;		681385	0					
ANR	681730	IdentifierDecl	ix = 0		681385	0					
ANR	681731	IdentifierDeclType	size_t		681385	0					
ANR	681732	Identifier	ix		681385	1					
ANR	681733	AssignmentExpression	ix = 0		681385	2		=			
ANR	681734	Identifier	ix		681385	0					
ANR	681735	PrimaryExpression	0		681385	1					
ANR	681736	Condition	ix < excludeHitsVector . size ( )	1452:21:39435:39463	681385	1	True				
ANR	681737	RelationalExpression	ix < excludeHitsVector . size ( )		681385	0		<			
ANR	681738	Identifier	ix		681385	0					
ANR	681739	CallExpression	excludeHitsVector . size ( )		681385	1					
ANR	681740	Callee	excludeHitsVector . size		681385	0					
ANR	681741	MemberAccess	excludeHitsVector . size		681385	0					
ANR	681742	Identifier	excludeHitsVector		681385	0					
ANR	681743	Identifier	size		681385	1					
ANR	681744	ArgumentList			681385	1					
ANR	681745	PostIncDecOperationExpression	ix ++	1452:52:39466:39469	681385	2	True				
ANR	681746	Identifier	ix		681385	0					
ANR	681747	IncDec	++		681385	1					
ANR	681748	CompoundStatement		71:1:2160:2160	681385	3					
ANR	681749	IfStatement	if ( ! excludeHitsVector [ ix ] )		681385	0					
ANR	681750	Condition	! excludeHitsVector [ ix ]	1454:6:39481:39502	681385	0	True				
ANR	681751	UnaryOperationExpression	! excludeHitsVector [ ix ]		681385	0					
ANR	681752	UnaryOperator	!		681385	0					
ANR	681753	ArrayIndexing	excludeHitsVector [ ix ]		681385	1					
ANR	681754	Identifier	excludeHitsVector		681385	0					
ANR	681755	Identifier	ix		681385	1					
ANR	681756	CompoundStatement		73:2:2194:2194	681385	1					
ANR	681757	ExpressionStatement	excludeErr = true	1456:3:39512:39529	681385	0	True				
ANR	681758	AssignmentExpression	excludeErr = true		681385	0		=			
ANR	681759	Identifier	excludeErr		681385	0					
ANR	681760	Identifier	true		681385	1					
ANR	681761	IfStatement	if ( ! ignoreExcludeErrorsDisplay )		681385	1					
ANR	681762	Condition	! ignoreExcludeErrorsDisplay	1457:7:39538:39564	681385	0	True				
ANR	681763	UnaryOperationExpression	! ignoreExcludeErrorsDisplay		681385	0					
ANR	681764	UnaryOperator	!		681385	0					
ANR	681765	Identifier	ignoreExcludeErrorsDisplay		681385	1					
ANR	681766	CompoundStatement		76:3:2257:2257	681385	1					
ANR	681767	IfStatement	if ( ignoreExcludeErrors )		681385	0					
ANR	681768	Condition	ignoreExcludeErrors	1459:8:39580:39598	681385	0	True				
ANR	681769	Identifier	ignoreExcludeErrors		681385	0					
ANR	681770	ExpressionStatement	"printMsg ( _ ( ""Exclude (unmatched)  %s\\n"" ) , excludeVector [ ix ] )"	1460:5:39606:39665	681385	1	True				
ANR	681771	CallExpression	"printMsg ( _ ( ""Exclude (unmatched)  %s\\n"" ) , excludeVector [ ix ] )"		681385	0					
ANR	681772	Callee	printMsg		681385	0					
ANR	681773	Identifier	printMsg		681385	0					
ANR	681774	ArgumentList	"_ ( ""Exclude (unmatched)  %s\\n"" )"		681385	1					
ANR	681775	Argument	"_ ( ""Exclude (unmatched)  %s\\n"" )"		681385	0					
ANR	681776	CallExpression	"_ ( ""Exclude (unmatched)  %s\\n"" )"		681385	0					
ANR	681777	Callee	_		681385	0					
ANR	681778	Identifier	_		681385	0					
ANR	681779	ArgumentList	"""Exclude (unmatched)  %s\\n"""		681385	1					
ANR	681780	Argument	"""Exclude (unmatched)  %s\\n"""		681385	0					
ANR	681781	PrimaryExpression	"""Exclude (unmatched)  %s\\n"""		681385	0					
ANR	681782	Argument	excludeVector [ ix ]		681385	1					
ANR	681783	ArrayIndexing	excludeVector [ ix ]		681385	0					
ANR	681784	Identifier	excludeVector		681385	0					
ANR	681785	Identifier	ix		681385	1					
ANR	681786	ElseStatement	else		681385	0					
ANR	681787	ExpressionStatement	"fprintf ( stderr , _ ( ""Exclude (unmatched)  %s\\n"" ) , excludeVector [ ix ] . c_str ( ) )"	1462:5:39681:39755	681385	0	True				
ANR	681788	CallExpression	"fprintf ( stderr , _ ( ""Exclude (unmatched)  %s\\n"" ) , excludeVector [ ix ] . c_str ( ) )"		681385	0					
ANR	681789	Callee	fprintf		681385	0					
ANR	681790	Identifier	fprintf		681385	0					
ANR	681791	ArgumentList	stderr		681385	1					
ANR	681792	Argument	stderr		681385	0					
ANR	681793	Identifier	stderr		681385	0					
ANR	681794	Argument	"_ ( ""Exclude (unmatched)  %s\\n"" )"		681385	1					
ANR	681795	CallExpression	"_ ( ""Exclude (unmatched)  %s\\n"" )"		681385	0					
ANR	681796	Callee	_		681385	0					
ANR	681797	Identifier	_		681385	0					
ANR	681798	ArgumentList	"""Exclude (unmatched)  %s\\n"""		681385	1					
ANR	681799	Argument	"""Exclude (unmatched)  %s\\n"""		681385	0					
ANR	681800	PrimaryExpression	"""Exclude (unmatched)  %s\\n"""		681385	0					
ANR	681801	Argument	excludeVector [ ix ] . c_str ( )		681385	2					
ANR	681802	CallExpression	excludeVector [ ix ] . c_str ( )		681385	0					
ANR	681803	Callee	excludeVector [ ix ] . c_str		681385	0					
ANR	681804	MemberAccess	excludeVector [ ix ] . c_str		681385	0					
ANR	681805	ArrayIndexing	excludeVector [ ix ]		681385	0					
ANR	681806	Identifier	excludeVector		681385	0					
ANR	681807	Identifier	ix		681385	1					
ANR	681808	Identifier	c_str		681385	1					
ANR	681809	ArgumentList			681385	1					
ANR	681810	ElseStatement	else		681385	0					
ANR	681811	CompoundStatement		83:3:2460:2460	681385	0					
ANR	681812	IfStatement	if ( ! ignoreExcludeErrors )		681385	0					
ANR	681813	Condition	! ignoreExcludeErrors	1466:8:39783:39802	681385	0	True				
ANR	681814	UnaryOperationExpression	! ignoreExcludeErrors		681385	0					
ANR	681815	UnaryOperator	!		681385	0					
ANR	681816	Identifier	ignoreExcludeErrors		681385	1					
ANR	681817	ExpressionStatement	"fprintf ( stderr , _ ( ""Exclude (unmatched)  %s\\n"" ) , excludeVector [ ix ] . c_str ( ) )"	1467:5:39810:39884	681385	1	True				
ANR	681818	CallExpression	"fprintf ( stderr , _ ( ""Exclude (unmatched)  %s\\n"" ) , excludeVector [ ix ] . c_str ( ) )"		681385	0					
ANR	681819	Callee	fprintf		681385	0					
ANR	681820	Identifier	fprintf		681385	0					
ANR	681821	ArgumentList	stderr		681385	1					
ANR	681822	Argument	stderr		681385	0					
ANR	681823	Identifier	stderr		681385	0					
ANR	681824	Argument	"_ ( ""Exclude (unmatched)  %s\\n"" )"		681385	1					
ANR	681825	CallExpression	"_ ( ""Exclude (unmatched)  %s\\n"" )"		681385	0					
ANR	681826	Callee	_		681385	0					
ANR	681827	Identifier	_		681385	0					
ANR	681828	ArgumentList	"""Exclude (unmatched)  %s\\n"""		681385	1					
ANR	681829	Argument	"""Exclude (unmatched)  %s\\n"""		681385	0					
ANR	681830	PrimaryExpression	"""Exclude (unmatched)  %s\\n"""		681385	0					
ANR	681831	Argument	excludeVector [ ix ] . c_str ( )		681385	2					
ANR	681832	CallExpression	excludeVector [ ix ] . c_str ( )		681385	0					
ANR	681833	Callee	excludeVector [ ix ] . c_str		681385	0					
ANR	681834	MemberAccess	excludeVector [ ix ] . c_str		681385	0					
ANR	681835	ArrayIndexing	excludeVector [ ix ]		681385	0					
ANR	681836	Identifier	excludeVector		681385	0					
ANR	681837	Identifier	ix		681385	1					
ANR	681838	Identifier	c_str		681385	1					
ANR	681839	ArgumentList			681385	1					
ANR	681840	IfStatement	if ( excludeErr && ! ignoreExcludeErrors )		681385	15					
ANR	681841	Condition	excludeErr && ! ignoreExcludeErrors	1472:5:39904:39937	681385	0	True				
ANR	681842	AndExpression	excludeErr && ! ignoreExcludeErrors		681385	0		&&			
ANR	681843	Identifier	excludeErr		681385	0					
ANR	681844	UnaryOperationExpression	! ignoreExcludeErrors		681385	1					
ANR	681845	UnaryOperator	!		681385	0					
ANR	681846	Identifier	ignoreExcludeErrors		681385	1					
ANR	681847	CompoundStatement		91:1:2628:2628	681385	1					
ANR	681848	IfStatement	if ( hasWildcard && ! isRecursive )		681385	0					
ANR	681849	Condition	hasWildcard && ! isRecursive	1474:6:39949:39975	681385	0	True				
ANR	681850	AndExpression	hasWildcard && ! isRecursive		681385	0		&&			
ANR	681851	Identifier	hasWildcard		681385	0					
ANR	681852	UnaryOperationExpression	! isRecursive		681385	1					
ANR	681853	UnaryOperator	!		681385	0					
ANR	681854	Identifier	isRecursive		681385	1					
ANR	681855	ExpressionStatement	"fprintf ( stderr , ""%s\\n"" , _ ( ""Did you intend to use --recursive"" ) )"	1475:3:39981:40044	681385	1	True				
ANR	681856	CallExpression	"fprintf ( stderr , ""%s\\n"" , _ ( ""Did you intend to use --recursive"" ) )"		681385	0					
ANR	681857	Callee	fprintf		681385	0					
ANR	681858	Identifier	fprintf		681385	0					
ANR	681859	ArgumentList	stderr		681385	1					
ANR	681860	Argument	stderr		681385	0					
ANR	681861	Identifier	stderr		681385	0					
ANR	681862	Argument	"""%s\\n"""		681385	1					
ANR	681863	PrimaryExpression	"""%s\\n"""		681385	0					
ANR	681864	Argument	"_ ( ""Did you intend to use --recursive"" )"		681385	2					
ANR	681865	CallExpression	"_ ( ""Did you intend to use --recursive"" )"		681385	0					
ANR	681866	Callee	_		681385	0					
ANR	681867	Identifier	_		681385	0					
ANR	681868	ArgumentList	"""Did you intend to use --recursive"""		681385	1					
ANR	681869	Argument	"""Did you intend to use --recursive"""		681385	0					
ANR	681870	PrimaryExpression	"""Did you intend to use --recursive"""		681385	0					
ANR	681871	ExpressionStatement	error ( )	1476:2:40048:40055	681385	1	True				
ANR	681872	CallExpression	error ( )		681385	0					
ANR	681873	Callee	error		681385	0					
ANR	681874	Identifier	error		681385	0					
ANR	681875	ArgumentList			681385	1					
ANR	681876	IfStatement	if ( fileName . empty ( ) )		681385	16					
ANR	681877	Condition	fileName . empty ( )	1480:5:40129:40144	681385	0	True				
ANR	681878	CallExpression	fileName . empty ( )		681385	0					
ANR	681879	Callee	fileName . empty		681385	0					
ANR	681880	MemberAccess	fileName . empty		681385	0					
ANR	681881	Identifier	fileName		681385	0					
ANR	681882	Identifier	empty		681385	1					
ANR	681883	ArgumentList			681385	1					
ANR	681884	CompoundStatement		99:1:2835:2835	681385	1					
ANR	681885	ExpressionStatement	"fprintf ( stderr , _ ( ""No file to process %s\\n"" ) , filePath . c_str ( ) )"	1482:2:40152:40215	681385	0	True				
ANR	681886	CallExpression	"fprintf ( stderr , _ ( ""No file to process %s\\n"" ) , filePath . c_str ( ) )"		681385	0					
ANR	681887	Callee	fprintf		681385	0					
ANR	681888	Identifier	fprintf		681385	0					
ANR	681889	ArgumentList	stderr		681385	1					
ANR	681890	Argument	stderr		681385	0					
ANR	681891	Identifier	stderr		681385	0					
ANR	681892	Argument	"_ ( ""No file to process %s\\n"" )"		681385	1					
ANR	681893	CallExpression	"_ ( ""No file to process %s\\n"" )"		681385	0					
ANR	681894	Callee	_		681385	0					
ANR	681895	Identifier	_		681385	0					
ANR	681896	ArgumentList	"""No file to process %s\\n"""		681385	1					
ANR	681897	Argument	"""No file to process %s\\n"""		681385	0					
ANR	681898	PrimaryExpression	"""No file to process %s\\n"""		681385	0					
ANR	681899	Argument	filePath . c_str ( )		681385	2					
ANR	681900	CallExpression	filePath . c_str ( )		681385	0					
ANR	681901	Callee	filePath . c_str		681385	0					
ANR	681902	MemberAccess	filePath . c_str		681385	0					
ANR	681903	Identifier	filePath		681385	0					
ANR	681904	Identifier	c_str		681385	1					
ANR	681905	ArgumentList			681385	1					
ANR	681906	IfStatement	if ( hasWildcard && ! isRecursive )		681385	1					
ANR	681907	Condition	hasWildcard && ! isRecursive	1483:6:40223:40249	681385	0	True				
ANR	681908	AndExpression	hasWildcard && ! isRecursive		681385	0		&&			
ANR	681909	Identifier	hasWildcard		681385	0					
ANR	681910	UnaryOperationExpression	! isRecursive		681385	1					
ANR	681911	UnaryOperator	!		681385	0					
ANR	681912	Identifier	isRecursive		681385	1					
ANR	681913	ExpressionStatement	"fprintf ( stderr , ""%s\\n"" , _ ( ""Did you intend to use --recursive"" ) )"	1484:3:40255:40318	681385	1	True				
ANR	681914	CallExpression	"fprintf ( stderr , ""%s\\n"" , _ ( ""Did you intend to use --recursive"" ) )"		681385	0					
ANR	681915	Callee	fprintf		681385	0					
ANR	681916	Identifier	fprintf		681385	0					
ANR	681917	ArgumentList	stderr		681385	1					
ANR	681918	Argument	stderr		681385	0					
ANR	681919	Identifier	stderr		681385	0					
ANR	681920	Argument	"""%s\\n"""		681385	1					
ANR	681921	PrimaryExpression	"""%s\\n"""		681385	0					
ANR	681922	Argument	"_ ( ""Did you intend to use --recursive"" )"		681385	2					
ANR	681923	CallExpression	"_ ( ""Did you intend to use --recursive"" )"		681385	0					
ANR	681924	Callee	_		681385	0					
ANR	681925	Identifier	_		681385	0					
ANR	681926	ArgumentList	"""Did you intend to use --recursive"""		681385	1					
ANR	681927	Argument	"""Did you intend to use --recursive"""		681385	0					
ANR	681928	PrimaryExpression	"""Did you intend to use --recursive"""		681385	0					
ANR	681929	ExpressionStatement	error ( )	1485:2:40322:40329	681385	2	True				
ANR	681930	CallExpression	error ( )		681385	0					
ANR	681931	Callee	error		681385	0					
ANR	681932	Identifier	error		681385	0					
ANR	681933	ArgumentList			681385	1					
ANR	681934	IfStatement	if ( hasWildcard )		681385	17					
ANR	681935	Condition	hasWildcard	1488:5:40340:40350	681385	0	True				
ANR	681936	Identifier	hasWildcard		681385	0					
ANR	681937	ExpressionStatement	printSeparatingLine ( )	1489:2:40355:40376	681385	1	True				
ANR	681938	CallExpression	printSeparatingLine ( )		681385	0					
ANR	681939	Callee	printSeparatingLine		681385	0					
ANR	681940	Identifier	printSeparatingLine		681385	0					
ANR	681941	ArgumentList			681385	1					
ANR	681942	ReturnType	void		681385	1					
ANR	681943	Identifier	ASConsole :: getFilePaths		681385	2					
ANR	681944	ParameterList	const string & filePath		681385	3					
ANR	681945	Parameter	const string & filePath	1382:29:37288:37309	681385	0	True				
ANR	681946	ParameterType	const string &		681385	0					
ANR	681947	Identifier	filePath		681385	1					
ANR	681948	CFGEntryNode	ENTRY		681385		True				
ANR	681949	CFGExitNode	EXIT		681385		True				
ANR	681950	Symbol	fileName		681385						
ANR	681951	Symbol	string		681385						
ANR	681952	Symbol	excludeVector [ ix ] . c_str		681385						
ANR	681953	Symbol	targetDirectory		681385						
ANR	681954	Symbol	string :: npos		681385						
ANR	681955	Symbol	* excludeHitsVector		681385						
ANR	681956	Symbol	excludeVector		681385						
ANR	681957	Symbol	filePath . find_last_of		681385						
ANR	681958	Symbol	excludeHitsVector . size		681385						
ANR	681959	Symbol	isRecursive		681385						
ANR	681960	Symbol	targetFilename . find_first_of		681385						
ANR	681961	Symbol	filePath . substr		681385						
ANR	681962	Symbol	entryFilepath . c_str		681385						
ANR	681963	Symbol	targetFilename . length		681385						
ANR	681964	Symbol	filePath . c_str		681385						
ANR	681965	Symbol	& statbuf		681385						
ANR	681966	Symbol	_		681385						
ANR	681967	Symbol	excludeHitsVector		681385						
ANR	681968	Symbol	statbuf . st_mode		681385						
ANR	681969	Symbol	stat		681385						
ANR	681970	Symbol	g_fileSeparator		681385						
ANR	681971	Symbol	ignoreExcludeErrors		681385						
ANR	681972	Symbol	filePath		681385						
ANR	681973	Symbol	false		681385						
ANR	681974	Symbol	excludeHitsVectorSize		681385						
ANR	681975	Symbol	* excludeVector		681385						
ANR	681976	Symbol	stderr		681385						
ANR	681977	Symbol	S_IFREG		681385						
ANR	681978	Symbol	fileName . empty		681385						
ANR	681979	Symbol	separator		681385						
ANR	681980	Symbol	ix		681385						
ANR	681981	Symbol	getCurrentDirectory		681385						
ANR	681982	Symbol	mainDirectoryLength		681385						
ANR	681983	Symbol	excludeErr		681385						
ANR	681984	Symbol	statbuf		681385						
ANR	681985	Symbol	targetDirectory . length		681385						
ANR	681986	Symbol	* ix		681385						
ANR	681987	Symbol	targetFilename		681385						
ANR	681988	Symbol	entryFilepath		681385						
ANR	681989	Symbol	true		681385						
ANR	681990	Symbol	hasWildcard		681385						
ANR	681991	Symbol	ignoreExcludeErrorsDisplay		681385						
ANR	681992	Function	ASConsole :: fileNameVectorIsEmpty	1492:0:40381:40461							
ANR	681993	FunctionDef	ASConsole :: fileNameVectorIsEmpty ()		681992	0					
ANR	681994	CompoundStatement		1493:0:40427:40461	681992	0					
ANR	681995	ReturnStatement	return fileNameVector . empty ( ) ;	1494:1:40430:40459	681992	0	True				
ANR	681996	CallExpression	fileNameVector . empty ( )		681992	0					
ANR	681997	Callee	fileNameVector . empty		681992	0					
ANR	681998	MemberAccess	fileNameVector . empty		681992	0					
ANR	681999	Identifier	fileNameVector		681992	0					
ANR	682000	Identifier	empty		681992	1					
ANR	682001	ArgumentList			681992	1					
ANR	682002	ReturnType	bool		681992	1					
ANR	682003	Identifier	ASConsole :: fileNameVectorIsEmpty		681992	2					
ANR	682004	ParameterList			681992	3					
ANR	682005	CFGEntryNode	ENTRY		681992		True				
ANR	682006	CFGExitNode	EXIT		681992		True				
ANR	682007	Symbol	fileNameVector		681992						
ANR	682008	Symbol	fileNameVector . empty		681992						
ANR	682009	Function	ASConsole :: isOption	1497:0:40464:40556							
ANR	682010	FunctionDef	"ASConsole :: isOption (const string & arg , const char * op)"		682009	0					
ANR	682011	CompoundStatement		1498:0:40524:40556	682009	0					
ANR	682012	ReturnStatement	return arg . compare ( op ) == 0 ;	1499:1:40527:40554	682009	0	True				
ANR	682013	EqualityExpression	arg . compare ( op ) == 0		682009	0		==			
ANR	682014	CallExpression	arg . compare ( op )		682009	0					
ANR	682015	Callee	arg . compare		682009	0					
ANR	682016	MemberAccess	arg . compare		682009	0					
ANR	682017	Identifier	arg		682009	0					
ANR	682018	Identifier	compare		682009	1					
ANR	682019	ArgumentList	op		682009	1					
ANR	682020	Argument	op		682009	0					
ANR	682021	Identifier	op		682009	0					
ANR	682022	PrimaryExpression	0		682009	1					
ANR	682023	ReturnType	bool		682009	1					
ANR	682024	Identifier	ASConsole :: isOption		682009	2					
ANR	682025	ParameterList	"const string & arg , const char * op"		682009	3					
ANR	682026	Parameter	const string & arg	1497:25:40489:40505	682009	0	True				
ANR	682027	ParameterType	const string &		682009	0					
ANR	682028	Identifier	arg		682009	1					
ANR	682029	Parameter	const char * op	1497:44:40508:40521	682009	1	True				
ANR	682030	ParameterType	const char *		682009	0					
ANR	682031	Identifier	op		682009	1					
ANR	682032	CFGEntryNode	ENTRY		682009		True				
ANR	682033	CFGExitNode	EXIT		682009		True				
ANR	682034	Symbol	op		682009						
ANR	682035	Symbol	arg . compare		682009						
ANR	682036	Symbol	arg		682009						
ANR	682037	Function	ASConsole :: isOption	1502:0:40559:40683							
ANR	682038	FunctionDef	"ASConsole :: isOption (const string & arg , const char * a , const char * b)"		682037	0					
ANR	682039	CompoundStatement		1503:0:40633:40683	682037	0					
ANR	682040	ReturnStatement	"return ( isOption ( arg , a ) || isOption ( arg , b ) ) ;"	1504:1:40636:40681	682037	0	True				
ANR	682041	OrExpression	"isOption ( arg , a ) || isOption ( arg , b )"		682037	0		||			
ANR	682042	CallExpression	"isOption ( arg , a )"		682037	0					
ANR	682043	Callee	isOption		682037	0					
ANR	682044	Identifier	isOption		682037	0					
ANR	682045	ArgumentList	arg		682037	1					
ANR	682046	Argument	arg		682037	0					
ANR	682047	Identifier	arg		682037	0					
ANR	682048	Argument	a		682037	1					
ANR	682049	Identifier	a		682037	0					
ANR	682050	CallExpression	"isOption ( arg , b )"		682037	1					
ANR	682051	Callee	isOption		682037	0					
ANR	682052	Identifier	isOption		682037	0					
ANR	682053	ArgumentList	arg		682037	1					
ANR	682054	Argument	arg		682037	0					
ANR	682055	Identifier	arg		682037	0					
ANR	682056	Argument	b		682037	1					
ANR	682057	Identifier	b		682037	0					
ANR	682058	ReturnType	bool		682037	1					
ANR	682059	Identifier	ASConsole :: isOption		682037	2					
ANR	682060	ParameterList	"const string & arg , const char * a , const char * b"		682037	3					
ANR	682061	Parameter	const string & arg	1502:25:40584:40600	682037	0	True				
ANR	682062	ParameterType	const string &		682037	0					
ANR	682063	Identifier	arg		682037	1					
ANR	682064	Parameter	const char * a	1502:44:40603:40615	682037	1	True				
ANR	682065	ParameterType	const char *		682037	0					
ANR	682066	Identifier	a		682037	1					
ANR	682067	Parameter	const char * b	1502:59:40618:40630	682037	2	True				
ANR	682068	ParameterType	const char *		682037	0					
ANR	682069	Identifier	b		682037	1					
ANR	682070	CFGEntryNode	ENTRY		682037		True				
ANR	682071	CFGExitNode	EXIT		682037		True				
ANR	682072	Symbol	a		682037						
ANR	682073	Symbol	b		682037						
ANR	682074	Symbol	arg		682037						
ANR	682075	Symbol	isOption		682037						
ANR	682076	Function	ASConsole :: isParamOption	1507:0:40686:41014							
ANR	682077	FunctionDef	"ASConsole :: isParamOption (const string & arg , const char * option)"		682076	0					
ANR	682078	CompoundStatement		1508:0:40755:41014	682076	0					
ANR	682079	IdentifierDeclStatement	"bool retVal = arg . compare ( 0 , strlen ( option ) , option ) == 0 ;"	1509:1:40758:40815	682076	0	True				
ANR	682080	IdentifierDecl	"retVal = arg . compare ( 0 , strlen ( option ) , option ) == 0"		682076	0					
ANR	682081	IdentifierDeclType	bool		682076	0					
ANR	682082	Identifier	retVal		682076	1					
ANR	682083	AssignmentExpression	"retVal = arg . compare ( 0 , strlen ( option ) , option ) == 0"		682076	2		=			
ANR	682084	Identifier	retVal		682076	0					
ANR	682085	EqualityExpression	"arg . compare ( 0 , strlen ( option ) , option ) == 0"		682076	1		==			
ANR	682086	CallExpression	"arg . compare ( 0 , strlen ( option ) , option )"		682076	0					
ANR	682087	Callee	arg . compare		682076	0					
ANR	682088	MemberAccess	arg . compare		682076	0					
ANR	682089	Identifier	arg		682076	0					
ANR	682090	Identifier	compare		682076	1					
ANR	682091	ArgumentList	0		682076	1					
ANR	682092	Argument	0		682076	0					
ANR	682093	PrimaryExpression	0		682076	0					
ANR	682094	Argument	strlen ( option )		682076	1					
ANR	682095	CallExpression	strlen ( option )		682076	0					
ANR	682096	Callee	strlen		682076	0					
ANR	682097	Identifier	strlen		682076	0					
ANR	682098	ArgumentList	option		682076	1					
ANR	682099	Argument	option		682076	0					
ANR	682100	Identifier	option		682076	0					
ANR	682101	Argument	option		682076	2					
ANR	682102	Identifier	option		682076	0					
ANR	682103	PrimaryExpression	0		682076	1					
ANR	682104	IfStatement	if ( retVal && strlen ( option ) == 1 && arg . length ( ) > 1 )		682076	1					
ANR	682105	Condition	retVal && strlen ( option ) == 1 && arg . length ( ) > 1	1511:5:40889:40937	682076	0	True				
ANR	682106	AndExpression	retVal && strlen ( option ) == 1 && arg . length ( ) > 1		682076	0		&&			
ANR	682107	Identifier	retVal		682076	0					
ANR	682108	AndExpression	strlen ( option ) == 1 && arg . length ( ) > 1		682076	1		&&			
ANR	682109	EqualityExpression	strlen ( option ) == 1		682076	0		==			
ANR	682110	CallExpression	strlen ( option )		682076	0					
ANR	682111	Callee	strlen		682076	0					
ANR	682112	Identifier	strlen		682076	0					
ANR	682113	ArgumentList	option		682076	1					
ANR	682114	Argument	option		682076	0					
ANR	682115	Identifier	option		682076	0					
ANR	682116	PrimaryExpression	1		682076	1					
ANR	682117	RelationalExpression	arg . length ( ) > 1		682076	1		>			
ANR	682118	CallExpression	arg . length ( )		682076	0					
ANR	682119	Callee	arg . length		682076	0					
ANR	682120	MemberAccess	arg . length		682076	0					
ANR	682121	Identifier	arg		682076	0					
ANR	682122	Identifier	length		682076	1					
ANR	682123	ArgumentList			682076	1					
ANR	682124	PrimaryExpression	1		682076	1					
ANR	682125	IfStatement	if ( ! isdigit ( ( unsigned char ) arg [ 1 ] ) )		682076	1					
ANR	682126	Condition	! isdigit ( ( unsigned char ) arg [ 1 ] )	1512:6:40946:40976	682076	0	True				
ANR	682127	UnaryOperationExpression	! isdigit ( ( unsigned char ) arg [ 1 ] )		682076	0					
ANR	682128	UnaryOperator	!		682076	0					
ANR	682129	CallExpression	isdigit ( ( unsigned char ) arg [ 1 ] )		682076	1					
ANR	682130	Callee	isdigit		682076	0					
ANR	682131	Identifier	isdigit		682076	0					
ANR	682132	ArgumentList	( unsigned char ) arg [ 1 ]		682076	1					
ANR	682133	Argument	( unsigned char ) arg [ 1 ]		682076	0					
ANR	682134	CastExpression	( unsigned char ) arg [ 1 ]		682076	0					
ANR	682135	CastTarget	unsigned char		682076	0					
ANR	682136	ArrayIndexing	arg [ 1 ]		682076	1					
ANR	682137	Identifier	arg		682076	0					
ANR	682138	PrimaryExpression	1		682076	1					
ANR	682139	ExpressionStatement	retVal = false	1513:3:40982:40996	682076	1	True				
ANR	682140	AssignmentExpression	retVal = false		682076	0		=			
ANR	682141	Identifier	retVal		682076	0					
ANR	682142	Identifier	false		682076	1					
ANR	682143	ReturnStatement	return retVal ;	1514:1:40999:41012	682076	2	True				
ANR	682144	Identifier	retVal		682076	0					
ANR	682145	ReturnType	bool		682076	1					
ANR	682146	Identifier	ASConsole :: isParamOption		682076	2					
ANR	682147	ParameterList	"const string & arg , const char * option"		682076	3					
ANR	682148	Parameter	const string & arg	1507:30:40716:40732	682076	0	True				
ANR	682149	ParameterType	const string &		682076	0					
ANR	682150	Identifier	arg		682076	1					
ANR	682151	Parameter	const char * option	1507:49:40735:40752	682076	1	True				
ANR	682152	ParameterType	const char *		682076	0					
ANR	682153	Identifier	option		682076	1					
ANR	682154	CFGEntryNode	ENTRY		682076		True				
ANR	682155	CFGExitNode	EXIT		682076		True				
ANR	682156	Symbol	strlen		682076						
ANR	682157	Symbol	arg . compare		682076						
ANR	682158	Symbol	arg		682076						
ANR	682159	Symbol	false		682076						
ANR	682160	Symbol	retVal		682076						
ANR	682161	Symbol	isdigit		682076						
ANR	682162	Symbol	option		682076						
ANR	682163	Symbol	arg . length		682076						
ANR	682164	Symbol	* arg		682076						
ANR	682165	Function	ASConsole :: isPathExclued	1521:0:41161:42179							
ANR	682166	FunctionDef	ASConsole :: isPathExclued (const string & subPath)		682165	0					
ANR	682167	CompoundStatement		1522:0:41214:42179	682165	0					
ANR	682168	IdentifierDeclStatement	bool retVal = false ;	1523:1:41217:41236	682165	0	True				
ANR	682169	IdentifierDecl	retVal = false		682165	0					
ANR	682170	IdentifierDeclType	bool		682165	0					
ANR	682171	Identifier	retVal		682165	1					
ANR	682172	AssignmentExpression	retVal = false		682165	2		=			
ANR	682173	Identifier	false		682165	0					
ANR	682174	Identifier	false		682165	1					
ANR	682175	ForStatement	for ( size_t i = 0 ; i < excludeVector . size ( ) ; i ++ )		682165	1					
ANR	682176	ForInit	size_t i = 0 ;	1526:6:41294:41306	682165	0	True				
ANR	682177	IdentifierDeclStatement	size_t i = 0 ;		682165	0					
ANR	682178	IdentifierDecl	i = 0		682165	0					
ANR	682179	IdentifierDeclType	size_t		682165	0					
ANR	682180	Identifier	i		682165	1					
ANR	682181	AssignmentExpression	i = 0		682165	2		=			
ANR	682182	Identifier	i		682165	0					
ANR	682183	PrimaryExpression	0		682165	1					
ANR	682184	Condition	i < excludeVector . size ( )	1526:20:41308:41331	682165	1	True				
ANR	682185	RelationalExpression	i < excludeVector . size ( )		682165	0		<			
ANR	682186	Identifier	i		682165	0					
ANR	682187	CallExpression	excludeVector . size ( )		682165	1					
ANR	682188	Callee	excludeVector . size		682165	0					
ANR	682189	MemberAccess	excludeVector . size		682165	0					
ANR	682190	Identifier	excludeVector		682165	0					
ANR	682191	Identifier	size		682165	1					
ANR	682192	ArgumentList			682165	1					
ANR	682193	PostIncDecOperationExpression	i ++	1526:46:41334:41336	682165	2	True				
ANR	682194	Identifier	i		682165	0					
ANR	682195	IncDec	++		682165	1					
ANR	682196	CompoundStatement		21:2:476:521	682165	3					
ANR	682197	IdentifierDeclStatement	string exclude = excludeVector [ i ] ;	1528:2:41344:41377	682165	0	True				
ANR	682198	IdentifierDecl	exclude = excludeVector [ i ]		682165	0					
ANR	682199	IdentifierDeclType	string		682165	0					
ANR	682200	Identifier	exclude		682165	1					
ANR	682201	AssignmentExpression	exclude = excludeVector [ i ]		682165	2		=			
ANR	682202	Identifier	exclude		682165	0					
ANR	682203	ArrayIndexing	excludeVector [ i ]		682165	1					
ANR	682204	Identifier	excludeVector		682165	0					
ANR	682205	Identifier	i		682165	1					
ANR	682206	IfStatement	if ( subPath . length ( ) < exclude . length ( ) )		682165	1					
ANR	682207	Condition	subPath . length ( ) < exclude . length ( )	1530:6:41386:41420	682165	0	True				
ANR	682208	RelationalExpression	subPath . length ( ) < exclude . length ( )		682165	0		<			
ANR	682209	CallExpression	subPath . length ( )		682165	0					
ANR	682210	Callee	subPath . length		682165	0					
ANR	682211	MemberAccess	subPath . length		682165	0					
ANR	682212	Identifier	subPath		682165	0					
ANR	682213	Identifier	length		682165	1					
ANR	682214	ArgumentList			682165	1					
ANR	682215	CallExpression	exclude . length ( )		682165	1					
ANR	682216	Callee	exclude . length		682165	0					
ANR	682217	MemberAccess	exclude . length		682165	0					
ANR	682218	Identifier	exclude		682165	0					
ANR	682219	Identifier	length		682165	1					
ANR	682220	ArgumentList			682165	1					
ANR	682221	ContinueStatement	continue ;	1531:3:41426:41434	682165	1	True				
ANR	682222	IdentifierDeclStatement	size_t compareStart = subPath . length ( ) - exclude . length ( ) ;	1533:2:41439:41496	682165	2	True				
ANR	682223	IdentifierDecl	compareStart = subPath . length ( ) - exclude . length ( )		682165	0					
ANR	682224	IdentifierDeclType	size_t		682165	0					
ANR	682225	Identifier	compareStart		682165	1					
ANR	682226	AssignmentExpression	compareStart = subPath . length ( ) - exclude . length ( )		682165	2		=			
ANR	682227	Identifier	compareStart		682165	0					
ANR	682228	AdditiveExpression	subPath . length ( ) - exclude . length ( )		682165	1		-			
ANR	682229	CallExpression	subPath . length ( )		682165	0					
ANR	682230	Callee	subPath . length		682165	0					
ANR	682231	MemberAccess	subPath . length		682165	0					
ANR	682232	Identifier	subPath		682165	0					
ANR	682233	Identifier	length		682165	1					
ANR	682234	ArgumentList			682165	1					
ANR	682235	CallExpression	exclude . length ( )		682165	1					
ANR	682236	Callee	exclude . length		682165	0					
ANR	682237	MemberAccess	exclude . length		682165	0					
ANR	682238	Identifier	exclude		682165	0					
ANR	682239	Identifier	length		682165	1					
ANR	682240	ArgumentList			682165	1					
ANR	682241	IfStatement	if ( compareStart > 0 )		682165	3					
ANR	682242	Condition	compareStart > 0	1535:6:41558:41573	682165	0	True				
ANR	682243	RelationalExpression	compareStart > 0		682165	0		>			
ANR	682244	Identifier	compareStart		682165	0					
ANR	682245	PrimaryExpression	0		682165	1					
ANR	682246	CompoundStatement		16:3:368:413	682165	1					
ANR	682247	IdentifierDeclStatement	char lastPathChar = subPath [ compareStart - 1 ] ;	1537:3:41583:41628	682165	0	True				
ANR	682248	IdentifierDecl	lastPathChar = subPath [ compareStart - 1 ]		682165	0					
ANR	682249	IdentifierDeclType	char		682165	0					
ANR	682250	Identifier	lastPathChar		682165	1					
ANR	682251	AssignmentExpression	lastPathChar = subPath [ compareStart - 1 ]		682165	2		=			
ANR	682252	Identifier	lastPathChar		682165	0					
ANR	682253	ArrayIndexing	subPath [ compareStart - 1 ]		682165	1					
ANR	682254	Identifier	subPath		682165	0					
ANR	682255	AdditiveExpression	compareStart - 1		682165	1		-			
ANR	682256	Identifier	compareStart		682165	0					
ANR	682257	PrimaryExpression	1		682165	1					
ANR	682258	IfStatement	if ( lastPathChar != g_fileSeparator )		682165	1					
ANR	682259	Condition	lastPathChar != g_fileSeparator	1538:7:41637:41667	682165	0	True				
ANR	682260	EqualityExpression	lastPathChar != g_fileSeparator		682165	0		!=			
ANR	682261	Identifier	lastPathChar		682165	0					
ANR	682262	Identifier	g_fileSeparator		682165	1					
ANR	682263	ContinueStatement	continue ;	1539:4:41674:41682	682165	1	True				
ANR	682264	IdentifierDeclStatement	string compare = subPath . substr ( compareStart ) ;	1542:2:41691:41736	682165	4	True				
ANR	682265	IdentifierDecl	compare = subPath . substr ( compareStart )		682165	0					
ANR	682266	IdentifierDeclType	string		682165	0					
ANR	682267	Identifier	compare		682165	1					
ANR	682268	AssignmentExpression	compare = subPath . substr ( compareStart )		682165	2		=			
ANR	682269	Identifier	compare		682165	0					
ANR	682270	CallExpression	subPath . substr ( compareStart )		682165	1					
ANR	682271	Callee	subPath . substr		682165	0					
ANR	682272	MemberAccess	subPath . substr		682165	0					
ANR	682273	Identifier	subPath		682165	0					
ANR	682274	Identifier	substr		682165	1					
ANR	682275	ArgumentList	compareStart		682165	1					
ANR	682276	Argument	compareStart		682165	0					
ANR	682277	Identifier	compareStart		682165	0					
ANR	682278	IfStatement	if ( ! g_isCaseSensitive )		682165	5					
ANR	682279	Condition	! g_isCaseSensitive	1543:6:41744:41761	682165	0	True				
ANR	682280	UnaryOperationExpression	! g_isCaseSensitive		682165	0					
ANR	682281	UnaryOperator	!		682165	0					
ANR	682282	Identifier	g_isCaseSensitive		682165	1					
ANR	682283	CompoundStatement		23:2:551:551	682165	1					
ANR	682284	ForStatement	for ( size_t j = 0 ; j < compare . length ( ) ; j ++ )		682165	0					
ANR	682285	ForInit	size_t j = 0 ;	1546:8:41819:41831	682165	0	True				
ANR	682286	IdentifierDeclStatement	size_t j = 0 ;		682165	0					
ANR	682287	IdentifierDecl	j = 0		682165	0					
ANR	682288	IdentifierDeclType	size_t		682165	0					
ANR	682289	Identifier	j		682165	1					
ANR	682290	AssignmentExpression	j = 0		682165	2		=			
ANR	682291	Identifier	j		682165	0					
ANR	682292	PrimaryExpression	0		682165	1					
ANR	682293	Condition	j < compare . length ( )	1546:22:41833:41852	682165	1	True				
ANR	682294	RelationalExpression	j < compare . length ( )		682165	0		<			
ANR	682295	Identifier	j		682165	0					
ANR	682296	CallExpression	compare . length ( )		682165	1					
ANR	682297	Callee	compare . length		682165	0					
ANR	682298	MemberAccess	compare . length		682165	0					
ANR	682299	Identifier	compare		682165	0					
ANR	682300	Identifier	length		682165	1					
ANR	682301	ArgumentList			682165	1					
ANR	682302	PostIncDecOperationExpression	j ++	1546:44:41855:41857	682165	2	True				
ANR	682303	Identifier	j		682165	0					
ANR	682304	IncDec	++		682165	1					
ANR	682305	ExpressionStatement	compare [ j ] = ( char ) tolower ( compare [ j ] )	1547:4:41864:41902	682165	3	True				
ANR	682306	AssignmentExpression	compare [ j ] = ( char ) tolower ( compare [ j ] )		682165	0		=			
ANR	682307	ArrayIndexing	compare [ j ]		682165	0					
ANR	682308	Identifier	compare		682165	0					
ANR	682309	Identifier	j		682165	1					
ANR	682310	CastExpression	( char ) tolower ( compare [ j ] )		682165	1					
ANR	682311	CastTarget	char		682165	0					
ANR	682312	CallExpression	tolower ( compare [ j ] )		682165	1					
ANR	682313	Callee	tolower		682165	0					
ANR	682314	Identifier	tolower		682165	0					
ANR	682315	ArgumentList	compare [ j ]		682165	1					
ANR	682316	Argument	compare [ j ]		682165	0					
ANR	682317	ArrayIndexing	compare [ j ]		682165	0					
ANR	682318	Identifier	compare		682165	0					
ANR	682319	Identifier	j		682165	1					
ANR	682320	ForStatement	for ( size_t j = 0 ; j < exclude . length ( ) ; j ++ )		682165	1					
ANR	682321	ForInit	size_t j = 0 ;	1548:8:41912:41924	682165	0	True				
ANR	682322	IdentifierDeclStatement	size_t j = 0 ;		682165	0					
ANR	682323	IdentifierDecl	j = 0		682165	0					
ANR	682324	IdentifierDeclType	size_t		682165	0					
ANR	682325	Identifier	j		682165	1					
ANR	682326	AssignmentExpression	j = 0		682165	2		=			
ANR	682327	Identifier	j		682165	0					
ANR	682328	PrimaryExpression	0		682165	1					
ANR	682329	Condition	j < exclude . length ( )	1548:22:41926:41945	682165	1	True				
ANR	682330	RelationalExpression	j < exclude . length ( )		682165	0		<			
ANR	682331	Identifier	j		682165	0					
ANR	682332	CallExpression	exclude . length ( )		682165	1					
ANR	682333	Callee	exclude . length		682165	0					
ANR	682334	MemberAccess	exclude . length		682165	0					
ANR	682335	Identifier	exclude		682165	0					
ANR	682336	Identifier	length		682165	1					
ANR	682337	ArgumentList			682165	1					
ANR	682338	PostIncDecOperationExpression	j ++	1548:44:41948:41950	682165	2	True				
ANR	682339	Identifier	j		682165	0					
ANR	682340	IncDec	++		682165	1					
ANR	682341	ExpressionStatement	exclude [ j ] = ( char ) tolower ( exclude [ j ] )	1549:4:41957:41995	682165	3	True				
ANR	682342	AssignmentExpression	exclude [ j ] = ( char ) tolower ( exclude [ j ] )		682165	0		=			
ANR	682343	ArrayIndexing	exclude [ j ]		682165	0					
ANR	682344	Identifier	exclude		682165	0					
ANR	682345	Identifier	j		682165	1					
ANR	682346	CastExpression	( char ) tolower ( exclude [ j ] )		682165	1					
ANR	682347	CastTarget	char		682165	0					
ANR	682348	CallExpression	tolower ( exclude [ j ] )		682165	1					
ANR	682349	Callee	tolower		682165	0					
ANR	682350	Identifier	tolower		682165	0					
ANR	682351	ArgumentList	exclude [ j ]		682165	1					
ANR	682352	Argument	exclude [ j ]		682165	0					
ANR	682353	ArrayIndexing	exclude [ j ]		682165	0					
ANR	682354	Identifier	exclude		682165	0					
ANR	682355	Identifier	j		682165	1					
ANR	682356	IfStatement	if ( compare == exclude )		682165	6					
ANR	682357	Condition	compare == exclude	1552:6:42072:42089	682165	0	True				
ANR	682358	EqualityExpression	compare == exclude		682165	0		==			
ANR	682359	Identifier	compare		682165	0					
ANR	682360	Identifier	exclude		682165	1					
ANR	682361	CompoundStatement		32:2:879:879	682165	1					
ANR	682362	ExpressionStatement	excludeHitsVector [ i ] = true	1554:3:42099:42126	682165	0	True				
ANR	682363	AssignmentExpression	excludeHitsVector [ i ] = true		682165	0		=			
ANR	682364	ArrayIndexing	excludeHitsVector [ i ]		682165	0					
ANR	682365	Identifier	excludeHitsVector		682165	0					
ANR	682366	Identifier	i		682165	1					
ANR	682367	Identifier	true		682165	1					
ANR	682368	ExpressionStatement	retVal = true	1555:3:42131:42144	682165	1	True				
ANR	682369	AssignmentExpression	retVal = true		682165	0		=			
ANR	682370	Identifier	retVal		682165	0					
ANR	682371	Identifier	true		682165	1					
ANR	682372	BreakStatement	break ;	1556:3:42149:42154	682165	2	True				
ANR	682373	ReturnStatement	return retVal ;	1559:1:42164:42177	682165	2	True				
ANR	682374	Identifier	retVal		682165	0					
ANR	682375	ReturnType	bool		682165	1					
ANR	682376	Identifier	ASConsole :: isPathExclued		682165	2					
ANR	682377	ParameterList	const string & subPath		682165	3					
ANR	682378	Parameter	const string & subPath	1521:30:41191:41211	682165	0	True				
ANR	682379	ParameterType	const string &		682165	0					
ANR	682380	Identifier	subPath		682165	1					
ANR	682381	CFGEntryNode	ENTRY		682165		True				
ANR	682382	CFGExitNode	EXIT		682165		True				
ANR	682383	Symbol	compare		682165						
ANR	682384	Symbol	tolower		682165						
ANR	682385	Symbol	* exclude		682165						
ANR	682386	Symbol	excludeVector . size		682165						
ANR	682387	Symbol	excludeVector		682165						
ANR	682388	Symbol	* excludeHitsVector		682165						
ANR	682389	Symbol	subPath . substr		682165						
ANR	682390	Symbol	retVal		682165						
ANR	682391	Symbol	subPath . length		682165						
ANR	682392	Symbol	exclude . length		682165						
ANR	682393	Symbol	exclude		682165						
ANR	682394	Symbol	subPath		682165						
ANR	682395	Symbol	excludeHitsVector		682165						
ANR	682396	Symbol	g_fileSeparator		682165						
ANR	682397	Symbol	false		682165						
ANR	682398	Symbol	* compare		682165						
ANR	682399	Symbol	i		682165						
ANR	682400	Symbol	* excludeVector		682165						
ANR	682401	Symbol	j		682165						
ANR	682402	Symbol	lastPathChar		682165						
ANR	682403	Symbol	* subPath		682165						
ANR	682404	Symbol	* i		682165						
ANR	682405	Symbol	* j		682165						
ANR	682406	Symbol	compareStart		682165						
ANR	682407	Symbol	true		682165						
ANR	682408	Symbol	compare . length		682165						
ANR	682409	Symbol	* compareStart		682165						
ANR	682410	Symbol	g_isCaseSensitive		682165						
ANR	682411	Function	ASConsole :: printHelp	1562:0:42182:63732							
ANR	682412	FunctionDef	ASConsole :: printHelp ()		682411	0					
ANR	682413	CompoundStatement		1563:0:42216:63732	682411	0					
ANR	682414	ExpressionStatement	cout << endl	1564:1:42219:42231	682411	0	True				
ANR	682415	ShiftExpression	cout << endl		682411	0		<<			
ANR	682416	Identifier	cout		682411	0					
ANR	682417	Identifier	endl		682411	1					
ANR	682418	ExpressionStatement	"cout << ""                     Artistic Style "" << g_version << endl"	1565:1:42234:42301	682411	1	True				
ANR	682419	ShiftExpression	"cout << ""                     Artistic Style "" << g_version << endl"		682411	0		<<			
ANR	682420	Identifier	cout		682411	0					
ANR	682421	ShiftExpression	"""                     Artistic Style "" << g_version << endl"		682411	1		<<			
ANR	682422	PrimaryExpression	"""                     Artistic Style """		682411	0					
ANR	682423	ShiftExpression	g_version << endl		682411	1		<<			
ANR	682424	Identifier	g_version		682411	0					
ANR	682425	Identifier	endl		682411	1					
ANR	682426	ExpressionStatement	"cout << ""                     Maintained by: Jim Pattee\\n"""	1566:1:42304:42362	682411	2	True				
ANR	682427	ShiftExpression	"cout << ""                     Maintained by: Jim Pattee\\n"""		682411	0		<<			
ANR	682428	Identifier	cout		682411	0					
ANR	682429	PrimaryExpression	"""                     Maintained by: Jim Pattee\\n"""		682411	1					
ANR	682430	ExpressionStatement	"cout << ""                     Original Author: Tal Davidson\\n"""	1567:1:42365:42427	682411	3	True				
ANR	682431	ShiftExpression	"cout << ""                     Original Author: Tal Davidson\\n"""		682411	0		<<			
ANR	682432	Identifier	cout		682411	0					
ANR	682433	PrimaryExpression	"""                     Original Author: Tal Davidson\\n"""		682411	1					
ANR	682434	ExpressionStatement	cout << endl	1568:1:42430:42442	682411	4	True				
ANR	682435	ShiftExpression	cout << endl		682411	0		<<			
ANR	682436	Identifier	cout		682411	0					
ANR	682437	Identifier	endl		682411	1					
ANR	682438	ExpressionStatement	"cout << ""Usage:\\n"""	1569:1:42445:42463	682411	5	True				
ANR	682439	ShiftExpression	"cout << ""Usage:\\n"""		682411	0		<<			
ANR	682440	Identifier	cout		682411	0					
ANR	682441	PrimaryExpression	"""Usage:\\n"""		682411	1					
ANR	682442	ExpressionStatement	"cout << ""------\\n"""	1570:1:42466:42484	682411	6	True				
ANR	682443	ShiftExpression	"cout << ""------\\n"""		682411	0		<<			
ANR	682444	Identifier	cout		682411	0					
ANR	682445	PrimaryExpression	"""------\\n"""		682411	1					
ANR	682446	ExpressionStatement	"cout << ""            astyle [OPTIONS] File1 File2 File3 [...]\\n"""	1571:1:42487:42551	682411	7	True				
ANR	682447	ShiftExpression	"cout << ""            astyle [OPTIONS] File1 File2 File3 [...]\\n"""		682411	0		<<			
ANR	682448	Identifier	cout		682411	0					
ANR	682449	PrimaryExpression	"""            astyle [OPTIONS] File1 File2 File3 [...]\\n"""		682411	1					
ANR	682450	ExpressionStatement	cout << endl	1572:1:42554:42566	682411	8	True				
ANR	682451	ShiftExpression	cout << endl		682411	0		<<			
ANR	682452	Identifier	cout		682411	0					
ANR	682453	Identifier	endl		682411	1					
ANR	682454	ExpressionStatement	"cout << ""            astyle [OPTIONS] < Original > Beautified\\n"""	1573:1:42569:42633	682411	9	True				
ANR	682455	ShiftExpression	"cout << ""            astyle [OPTIONS] < Original > Beautified\\n"""		682411	0		<<			
ANR	682456	Identifier	cout		682411	0					
ANR	682457	PrimaryExpression	"""            astyle [OPTIONS] < Original > Beautified\\n"""		682411	1					
ANR	682458	ExpressionStatement	cout << endl	1574:1:42636:42648	682411	10	True				
ANR	682459	ShiftExpression	cout << endl		682411	0		<<			
ANR	682460	Identifier	cout		682411	0					
ANR	682461	Identifier	endl		682411	1					
ANR	682462	ExpressionStatement	"cout << ""    When indenting a specific file, the resulting indented file RETAINS\\n"""	1575:1:42651:42734	682411	11	True				
ANR	682463	ShiftExpression	"cout << ""    When indenting a specific file, the resulting indented file RETAINS\\n"""		682411	0		<<			
ANR	682464	Identifier	cout		682411	0					
ANR	682465	PrimaryExpression	"""    When indenting a specific file, the resulting indented file RETAINS\\n"""		682411	1					
ANR	682466	ExpressionStatement	"cout << ""    the original file-name. The original pre-indented file is renamed,\\n"""	1576:1:42737:42819	682411	12	True				
ANR	682467	ShiftExpression	"cout << ""    the original file-name. The original pre-indented file is renamed,\\n"""		682411	0		<<			
ANR	682468	Identifier	cout		682411	0					
ANR	682469	PrimaryExpression	"""    the original file-name. The original pre-indented file is renamed,\\n"""		682411	1					
ANR	682470	ExpressionStatement	"cout << ""    with a suffix of \\'.orig\\' added to the original filename.\\n"""	1577:1:42822:42896	682411	13	True				
ANR	682471	ShiftExpression	"cout << ""    with a suffix of \\'.orig\\' added to the original filename.\\n"""		682411	0		<<			
ANR	682472	Identifier	cout		682411	0					
ANR	682473	PrimaryExpression	"""    with a suffix of \\'.orig\\' added to the original filename.\\n"""		682411	1					
ANR	682474	ExpressionStatement	cout << endl	1578:1:42899:42911	682411	14	True				
ANR	682475	ShiftExpression	cout << endl		682411	0		<<			
ANR	682476	Identifier	cout		682411	0					
ANR	682477	Identifier	endl		682411	1					
ANR	682478	ExpressionStatement	"cout << ""    Wildcards (* and ?) may be used in the filename.\\n"""	1579:1:42914:42978	682411	15	True				
ANR	682479	ShiftExpression	"cout << ""    Wildcards (* and ?) may be used in the filename.\\n"""		682411	0		<<			
ANR	682480	Identifier	cout		682411	0					
ANR	682481	PrimaryExpression	"""    Wildcards (* and ?) may be used in the filename.\\n"""		682411	1					
ANR	682482	ExpressionStatement	"cout << ""    A \\'recursive\\' option can process directories recursively.\\n"""	1580:1:42981:43056	682411	16	True				
ANR	682483	ShiftExpression	"cout << ""    A \\'recursive\\' option can process directories recursively.\\n"""		682411	0		<<			
ANR	682484	Identifier	cout		682411	0					
ANR	682485	PrimaryExpression	"""    A \\'recursive\\' option can process directories recursively.\\n"""		682411	1					
ANR	682486	ExpressionStatement	cout << endl	1581:1:43059:43071	682411	17	True				
ANR	682487	ShiftExpression	cout << endl		682411	0		<<			
ANR	682488	Identifier	cout		682411	0					
ANR	682489	Identifier	endl		682411	1					
ANR	682490	ExpressionStatement	"cout << ""    By default, astyle is set up to indent with four spaces per indent,\\n"""	1582:1:43074:43157	682411	18	True				
ANR	682491	ShiftExpression	"cout << ""    By default, astyle is set up to indent with four spaces per indent,\\n"""		682411	0		<<			
ANR	682492	Identifier	cout		682411	0					
ANR	682493	PrimaryExpression	"""    By default, astyle is set up to indent with four spaces per indent,\\n"""		682411	1					
ANR	682494	ExpressionStatement	"cout << ""    a maximal indentation of 40 spaces inside continuous statements,\\n"""	1583:1:43160:43240	682411	19	True				
ANR	682495	ShiftExpression	"cout << ""    a maximal indentation of 40 spaces inside continuous statements,\\n"""		682411	0		<<			
ANR	682496	Identifier	cout		682411	0					
ANR	682497	PrimaryExpression	"""    a maximal indentation of 40 spaces inside continuous statements,\\n"""		682411	1					
ANR	682498	ExpressionStatement	"cout << ""    a minimum indentation of eight spaces inside conditional statements,\\n"""	1584:1:43243:43327	682411	20	True				
ANR	682499	ShiftExpression	"cout << ""    a minimum indentation of eight spaces inside conditional statements,\\n"""		682411	0		<<			
ANR	682500	Identifier	cout		682411	0					
ANR	682501	PrimaryExpression	"""    a minimum indentation of eight spaces inside conditional statements,\\n"""		682411	1					
ANR	682502	ExpressionStatement	"cout << ""    and NO formatting options.\\n"""	1585:1:43330:43372	682411	21	True				
ANR	682503	ShiftExpression	"cout << ""    and NO formatting options.\\n"""		682411	0		<<			
ANR	682504	Identifier	cout		682411	0					
ANR	682505	PrimaryExpression	"""    and NO formatting options.\\n"""		682411	1					
ANR	682506	ExpressionStatement	cout << endl	1586:1:43375:43387	682411	22	True				
ANR	682507	ShiftExpression	cout << endl		682411	0		<<			
ANR	682508	Identifier	cout		682411	0					
ANR	682509	Identifier	endl		682411	1					
ANR	682510	ExpressionStatement	"cout << ""Options:\\n"""	1587:1:43390:43410	682411	23	True				
ANR	682511	ShiftExpression	"cout << ""Options:\\n"""		682411	0		<<			
ANR	682512	Identifier	cout		682411	0					
ANR	682513	PrimaryExpression	"""Options:\\n"""		682411	1					
ANR	682514	ExpressionStatement	"cout << ""--------\\n"""	1588:1:43413:43433	682411	24	True				
ANR	682515	ShiftExpression	"cout << ""--------\\n"""		682411	0		<<			
ANR	682516	Identifier	cout		682411	0					
ANR	682517	PrimaryExpression	"""--------\\n"""		682411	1					
ANR	682518	ExpressionStatement	"cout << ""    This  program  follows  the  usual  GNU  command line syntax.\\n"""	1589:1:43436:43513	682411	25	True				
ANR	682519	ShiftExpression	"cout << ""    This  program  follows  the  usual  GNU  command line syntax.\\n"""		682411	0		<<			
ANR	682520	Identifier	cout		682411	0					
ANR	682521	PrimaryExpression	"""    This  program  follows  the  usual  GNU  command line syntax.\\n"""		682411	1					
ANR	682522	ExpressionStatement	"cout << ""    Long options (starting with '--') must be written one at a time.\\n"""	1590:1:43516:43596	682411	26	True				
ANR	682523	ShiftExpression	"cout << ""    Long options (starting with '--') must be written one at a time.\\n"""		682411	0		<<			
ANR	682524	Identifier	cout		682411	0					
ANR	682525	PrimaryExpression	"""    Long options (starting with '--') must be written one at a time.\\n"""		682411	1					
ANR	682526	ExpressionStatement	"cout << ""    Short options (starting with '-') may be appended together.\\n"""	1591:1:43599:43674	682411	27	True				
ANR	682527	ShiftExpression	"cout << ""    Short options (starting with '-') may be appended together.\\n"""		682411	0		<<			
ANR	682528	Identifier	cout		682411	0					
ANR	682529	PrimaryExpression	"""    Short options (starting with '-') may be appended together.\\n"""		682411	1					
ANR	682530	ExpressionStatement	"cout << ""    Thus, -bps4 is the same as -b -p -s4.\\n"""	1592:1:43677:43730	682411	28	True				
ANR	682531	ShiftExpression	"cout << ""    Thus, -bps4 is the same as -b -p -s4.\\n"""		682411	0		<<			
ANR	682532	Identifier	cout		682411	0					
ANR	682533	PrimaryExpression	"""    Thus, -bps4 is the same as -b -p -s4.\\n"""		682411	1					
ANR	682534	ExpressionStatement	cout << endl	1593:1:43733:43745	682411	29	True				
ANR	682535	ShiftExpression	cout << endl		682411	0		<<			
ANR	682536	Identifier	cout		682411	0					
ANR	682537	Identifier	endl		682411	1					
ANR	682538	ExpressionStatement	"cout << ""Options File:\\n"""	1594:1:43748:43773	682411	30	True				
ANR	682539	ShiftExpression	"cout << ""Options File:\\n"""		682411	0		<<			
ANR	682540	Identifier	cout		682411	0					
ANR	682541	PrimaryExpression	"""Options File:\\n"""		682411	1					
ANR	682542	ExpressionStatement	"cout << ""-------------\\n"""	1595:1:43776:43801	682411	31	True				
ANR	682543	ShiftExpression	"cout << ""-------------\\n"""		682411	0		<<			
ANR	682544	Identifier	cout		682411	0					
ANR	682545	PrimaryExpression	"""-------------\\n"""		682411	1					
ANR	682546	ExpressionStatement	"cout << ""    Artistic Style looks for a default options file in the\\n"""	1596:1:43804:43874	682411	32	True				
ANR	682547	ShiftExpression	"cout << ""    Artistic Style looks for a default options file in the\\n"""		682411	0		<<			
ANR	682548	Identifier	cout		682411	0					
ANR	682549	PrimaryExpression	"""    Artistic Style looks for a default options file in the\\n"""		682411	1					
ANR	682550	ExpressionStatement	"cout << ""    following order:\\n"""	1597:1:43877:43909	682411	33	True				
ANR	682551	ShiftExpression	"cout << ""    following order:\\n"""		682411	0		<<			
ANR	682552	Identifier	cout		682411	0					
ANR	682553	PrimaryExpression	"""    following order:\\n"""		682411	1					
ANR	682554	ExpressionStatement	"cout << ""    1. The contents of the ARTISTIC_STYLE_OPTIONS environment\\n"""	1598:1:43912:43985	682411	34	True				
ANR	682555	ShiftExpression	"cout << ""    1. The contents of the ARTISTIC_STYLE_OPTIONS environment\\n"""		682411	0		<<			
ANR	682556	Identifier	cout		682411	0					
ANR	682557	PrimaryExpression	"""    1. The contents of the ARTISTIC_STYLE_OPTIONS environment\\n"""		682411	1					
ANR	682558	ExpressionStatement	"cout << ""       variable if it exists.\\n"""	1599:1:43988:44029	682411	35	True				
ANR	682559	ShiftExpression	"cout << ""       variable if it exists.\\n"""		682411	0		<<			
ANR	682560	Identifier	cout		682411	0					
ANR	682561	PrimaryExpression	"""       variable if it exists.\\n"""		682411	1					
ANR	682562	ExpressionStatement	"cout << ""    2. The file called .astylerc in the directory pointed to by the\\n"""	1600:1:44032:44111	682411	36	True				
ANR	682563	ShiftExpression	"cout << ""    2. The file called .astylerc in the directory pointed to by the\\n"""		682411	0		<<			
ANR	682564	Identifier	cout		682411	0					
ANR	682565	PrimaryExpression	"""    2. The file called .astylerc in the directory pointed to by the\\n"""		682411	1					
ANR	682566	ExpressionStatement	"cout << ""       HOME environment variable ( i.e. $HOME/.astylerc ).\\n"""	1601:1:44114:44184	682411	37	True				
ANR	682567	ShiftExpression	"cout << ""       HOME environment variable ( i.e. $HOME/.astylerc ).\\n"""		682411	0		<<			
ANR	682568	Identifier	cout		682411	0					
ANR	682569	PrimaryExpression	"""       HOME environment variable ( i.e. $HOME/.astylerc ).\\n"""		682411	1					
ANR	682570	ExpressionStatement	"cout << ""    3. The file called astylerc in the directory pointed to by the\\n"""	1602:1:44187:44265	682411	38	True				
ANR	682571	ShiftExpression	"cout << ""    3. The file called astylerc in the directory pointed to by the\\n"""		682411	0		<<			
ANR	682572	Identifier	cout		682411	0					
ANR	682573	PrimaryExpression	"""    3. The file called astylerc in the directory pointed to by the\\n"""		682411	1					
ANR	682574	ExpressionStatement	"cout << ""       USERPROFILE environment variable (i.e. %USERPROFILE%\\\\astylerc).\\n"""	1603:1:44268:44351	682411	39	True				
ANR	682575	ShiftExpression	"cout << ""       USERPROFILE environment variable (i.e. %USERPROFILE%\\\\astylerc).\\n"""		682411	0		<<			
ANR	682576	Identifier	cout		682411	0					
ANR	682577	PrimaryExpression	"""       USERPROFILE environment variable (i.e. %USERPROFILE%\\\\astylerc).\\n"""		682411	1					
ANR	682578	ExpressionStatement	"cout << ""    If a default options file is found, the options in this file will\\n"""	1604:1:44354:44435	682411	40	True				
ANR	682579	ShiftExpression	"cout << ""    If a default options file is found, the options in this file will\\n"""		682411	0		<<			
ANR	682580	Identifier	cout		682411	0					
ANR	682581	PrimaryExpression	"""    If a default options file is found, the options in this file will\\n"""		682411	1					
ANR	682582	ExpressionStatement	"cout << ""    be parsed BEFORE the command-line options.\\n"""	1605:1:44438:44496	682411	41	True				
ANR	682583	ShiftExpression	"cout << ""    be parsed BEFORE the command-line options.\\n"""		682411	0		<<			
ANR	682584	Identifier	cout		682411	0					
ANR	682585	PrimaryExpression	"""    be parsed BEFORE the command-line options.\\n"""		682411	1					
ANR	682586	ExpressionStatement	"cout << ""    Long options within the default option file may be written without\\n"""	1606:1:44499:44581	682411	42	True				
ANR	682587	ShiftExpression	"cout << ""    Long options within the default option file may be written without\\n"""		682411	0		<<			
ANR	682588	Identifier	cout		682411	0					
ANR	682589	PrimaryExpression	"""    Long options within the default option file may be written without\\n"""		682411	1					
ANR	682590	ExpressionStatement	"cout << ""    the preliminary '--'.\\n"""	1607:1:44584:44621	682411	43	True				
ANR	682591	ShiftExpression	"cout << ""    the preliminary '--'.\\n"""		682411	0		<<			
ANR	682592	Identifier	cout		682411	0					
ANR	682593	PrimaryExpression	"""    the preliminary '--'.\\n"""		682411	1					
ANR	682594	ExpressionStatement	cout << endl	1608:1:44624:44636	682411	44	True				
ANR	682595	ShiftExpression	cout << endl		682411	0		<<			
ANR	682596	Identifier	cout		682411	0					
ANR	682597	Identifier	endl		682411	1					
ANR	682598	ExpressionStatement	"cout << ""Disable Formatting:\\n"""	1609:1:44639:44670	682411	45	True				
ANR	682599	ShiftExpression	"cout << ""Disable Formatting:\\n"""		682411	0		<<			
ANR	682600	Identifier	cout		682411	0					
ANR	682601	PrimaryExpression	"""Disable Formatting:\\n"""		682411	1					
ANR	682602	ExpressionStatement	"cout << ""-------------------\\n"""	1610:1:44673:44704	682411	46	True				
ANR	682603	ShiftExpression	"cout << ""-------------------\\n"""		682411	0		<<			
ANR	682604	Identifier	cout		682411	0					
ANR	682605	PrimaryExpression	"""-------------------\\n"""		682411	1					
ANR	682606	ExpressionStatement	"cout << ""    Disable Block\\n"""	1611:1:44707:44736	682411	47	True				
ANR	682607	ShiftExpression	"cout << ""    Disable Block\\n"""		682411	0		<<			
ANR	682608	Identifier	cout		682411	0					
ANR	682609	PrimaryExpression	"""    Disable Block\\n"""		682411	1					
ANR	682610	ExpressionStatement	"cout << ""    Blocks of code can be disabled with the comment tags *INDENT-OFF*\\n"""	1612:1:44739:44820	682411	48	True				
ANR	682611	ShiftExpression	"cout << ""    Blocks of code can be disabled with the comment tags *INDENT-OFF*\\n"""		682411	0		<<			
ANR	682612	Identifier	cout		682411	0					
ANR	682613	PrimaryExpression	"""    Blocks of code can be disabled with the comment tags *INDENT-OFF*\\n"""		682411	1					
ANR	682614	ExpressionStatement	"cout << ""    and *INDENT-ON*. It must be contained in a one-line comment.\\n"""	1613:1:44823:44899	682411	49	True				
ANR	682615	ShiftExpression	"cout << ""    and *INDENT-ON*. It must be contained in a one-line comment.\\n"""		682411	0		<<			
ANR	682616	Identifier	cout		682411	0					
ANR	682617	PrimaryExpression	"""    and *INDENT-ON*. It must be contained in a one-line comment.\\n"""		682411	1					
ANR	682618	ExpressionStatement	cout << endl	1614:1:44902:44914	682411	50	True				
ANR	682619	ShiftExpression	cout << endl		682411	0		<<			
ANR	682620	Identifier	cout		682411	0					
ANR	682621	Identifier	endl		682411	1					
ANR	682622	ExpressionStatement	"cout << ""    Disable Line\\n"""	1615:1:44917:44945	682411	51	True				
ANR	682623	ShiftExpression	"cout << ""    Disable Line\\n"""		682411	0		<<			
ANR	682624	Identifier	cout		682411	0					
ANR	682625	PrimaryExpression	"""    Disable Line\\n"""		682411	1					
ANR	682626	ExpressionStatement	"cout << ""    Padding of operators can be disabled on a single line using the\\n"""	1616:1:44948:45027	682411	52	True				
ANR	682627	ShiftExpression	"cout << ""    Padding of operators can be disabled on a single line using the\\n"""		682411	0		<<			
ANR	682628	Identifier	cout		682411	0					
ANR	682629	PrimaryExpression	"""    Padding of operators can be disabled on a single line using the\\n"""		682411	1					
ANR	682630	ExpressionStatement	"cout << ""    comment tag *NOPAD*. It must be contained in a line-end comment.\\n"""	1617:1:45030:45110	682411	53	True				
ANR	682631	ShiftExpression	"cout << ""    comment tag *NOPAD*. It must be contained in a line-end comment.\\n"""		682411	0		<<			
ANR	682632	Identifier	cout		682411	0					
ANR	682633	PrimaryExpression	"""    comment tag *NOPAD*. It must be contained in a line-end comment.\\n"""		682411	1					
ANR	682634	ExpressionStatement	cout << endl	1618:1:45113:45125	682411	54	True				
ANR	682635	ShiftExpression	cout << endl		682411	0		<<			
ANR	682636	Identifier	cout		682411	0					
ANR	682637	Identifier	endl		682411	1					
ANR	682638	ExpressionStatement	"cout << ""Brace Style Options:\\n"""	1619:1:45128:45160	682411	55	True				
ANR	682639	ShiftExpression	"cout << ""Brace Style Options:\\n"""		682411	0		<<			
ANR	682640	Identifier	cout		682411	0					
ANR	682641	PrimaryExpression	"""Brace Style Options:\\n"""		682411	1					
ANR	682642	ExpressionStatement	"cout << ""--------------------\\n"""	1620:1:45163:45195	682411	56	True				
ANR	682643	ShiftExpression	"cout << ""--------------------\\n"""		682411	0		<<			
ANR	682644	Identifier	cout		682411	0					
ANR	682645	PrimaryExpression	"""--------------------\\n"""		682411	1					
ANR	682646	ExpressionStatement	"cout << ""    default brace style\\n"""	1621:1:45198:45233	682411	57	True				
ANR	682647	ShiftExpression	"cout << ""    default brace style\\n"""		682411	0		<<			
ANR	682648	Identifier	cout		682411	0					
ANR	682649	PrimaryExpression	"""    default brace style\\n"""		682411	1					
ANR	682650	ExpressionStatement	"cout << ""    If no brace style is requested, the opening braces will not be\\n"""	1622:1:45236:45314	682411	58	True				
ANR	682651	ShiftExpression	"cout << ""    If no brace style is requested, the opening braces will not be\\n"""		682411	0		<<			
ANR	682652	Identifier	cout		682411	0					
ANR	682653	PrimaryExpression	"""    If no brace style is requested, the opening braces will not be\\n"""		682411	1					
ANR	682654	ExpressionStatement	"cout << ""    changed and closing braces will be broken from the preceding line.\\n"""	1623:1:45317:45399	682411	59	True				
ANR	682655	ShiftExpression	"cout << ""    changed and closing braces will be broken from the preceding line.\\n"""		682411	0		<<			
ANR	682656	Identifier	cout		682411	0					
ANR	682657	PrimaryExpression	"""    changed and closing braces will be broken from the preceding line.\\n"""		682411	1					
ANR	682658	ExpressionStatement	cout << endl	1624:1:45402:45414	682411	60	True				
ANR	682659	ShiftExpression	cout << endl		682411	0		<<			
ANR	682660	Identifier	cout		682411	0					
ANR	682661	Identifier	endl		682411	1					
ANR	682662	ExpressionStatement	"cout << ""    --style=allman  OR  --style=bsd  OR  --style=break  OR  -A1\\n"""	1625:1:45417:45492	682411	61	True				
ANR	682663	ShiftExpression	"cout << ""    --style=allman  OR  --style=bsd  OR  --style=break  OR  -A1\\n"""		682411	0		<<			
ANR	682664	Identifier	cout		682411	0					
ANR	682665	PrimaryExpression	"""    --style=allman  OR  --style=bsd  OR  --style=break  OR  -A1\\n"""		682411	1					
ANR	682666	ExpressionStatement	"cout << ""    Allman style formatting/indenting.\\n"""	1626:1:45495:45545	682411	62	True				
ANR	682667	ShiftExpression	"cout << ""    Allman style formatting/indenting.\\n"""		682411	0		<<			
ANR	682668	Identifier	cout		682411	0					
ANR	682669	PrimaryExpression	"""    Allman style formatting/indenting.\\n"""		682411	1					
ANR	682670	ExpressionStatement	"cout << ""    Broken braces.\\n"""	1627:1:45548:45578	682411	63	True				
ANR	682671	ShiftExpression	"cout << ""    Broken braces.\\n"""		682411	0		<<			
ANR	682672	Identifier	cout		682411	0					
ANR	682673	PrimaryExpression	"""    Broken braces.\\n"""		682411	1					
ANR	682674	ExpressionStatement	cout << endl	1628:1:45581:45593	682411	64	True				
ANR	682675	ShiftExpression	cout << endl		682411	0		<<			
ANR	682676	Identifier	cout		682411	0					
ANR	682677	Identifier	endl		682411	1					
ANR	682678	ExpressionStatement	"cout << ""    --style=java  OR  --style=attach  OR  -A2\\n"""	1629:1:45596:45653	682411	65	True				
ANR	682679	ShiftExpression	"cout << ""    --style=java  OR  --style=attach  OR  -A2\\n"""		682411	0		<<			
ANR	682680	Identifier	cout		682411	0					
ANR	682681	PrimaryExpression	"""    --style=java  OR  --style=attach  OR  -A2\\n"""		682411	1					
ANR	682682	ExpressionStatement	"cout << ""    Java style formatting/indenting.\\n"""	1630:1:45656:45704	682411	66	True				
ANR	682683	ShiftExpression	"cout << ""    Java style formatting/indenting.\\n"""		682411	0		<<			
ANR	682684	Identifier	cout		682411	0					
ANR	682685	PrimaryExpression	"""    Java style formatting/indenting.\\n"""		682411	1					
ANR	682686	ExpressionStatement	"cout << ""    Attached braces.\\n"""	1631:1:45707:45739	682411	67	True				
ANR	682687	ShiftExpression	"cout << ""    Attached braces.\\n"""		682411	0		<<			
ANR	682688	Identifier	cout		682411	0					
ANR	682689	PrimaryExpression	"""    Attached braces.\\n"""		682411	1					
ANR	682690	ExpressionStatement	cout << endl	1632:1:45742:45754	682411	68	True				
ANR	682691	ShiftExpression	cout << endl		682411	0		<<			
ANR	682692	Identifier	cout		682411	0					
ANR	682693	Identifier	endl		682411	1					
ANR	682694	ExpressionStatement	"cout << ""    --style=kr  OR  --style=k&r  OR  --style=k/r  OR  -A3\\n"""	1633:1:45757:45826	682411	69	True				
ANR	682695	ShiftExpression	"cout << ""    --style=kr  OR  --style=k&r  OR  --style=k/r  OR  -A3\\n"""		682411	0		<<			
ANR	682696	Identifier	cout		682411	0					
ANR	682697	PrimaryExpression	"""    --style=kr  OR  --style=k&r  OR  --style=k/r  OR  -A3\\n"""		682411	1					
ANR	682698	ExpressionStatement	"cout << ""    Kernighan & Ritchie style formatting/indenting.\\n"""	1634:1:45829:45892	682411	70	True				
ANR	682699	ShiftExpression	"cout << ""    Kernighan & Ritchie style formatting/indenting.\\n"""		682411	0		<<			
ANR	682700	Identifier	cout		682411	0					
ANR	682701	PrimaryExpression	"""    Kernighan & Ritchie style formatting/indenting.\\n"""		682411	1					
ANR	682702	ExpressionStatement	"cout << ""    Linux braces.\\n"""	1635:1:45895:45924	682411	71	True				
ANR	682703	ShiftExpression	"cout << ""    Linux braces.\\n"""		682411	0		<<			
ANR	682704	Identifier	cout		682411	0					
ANR	682705	PrimaryExpression	"""    Linux braces.\\n"""		682411	1					
ANR	682706	ExpressionStatement	cout << endl	1636:1:45927:45939	682411	72	True				
ANR	682707	ShiftExpression	cout << endl		682411	0		<<			
ANR	682708	Identifier	cout		682411	0					
ANR	682709	Identifier	endl		682411	1					
ANR	682710	ExpressionStatement	"cout << ""    --style=stroustrup  OR  -A4\\n"""	1637:1:45942:45985	682411	73	True				
ANR	682711	ShiftExpression	"cout << ""    --style=stroustrup  OR  -A4\\n"""		682411	0		<<			
ANR	682712	Identifier	cout		682411	0					
ANR	682713	PrimaryExpression	"""    --style=stroustrup  OR  -A4\\n"""		682411	1					
ANR	682714	ExpressionStatement	"cout << ""    Stroustrup style formatting/indenting.\\n"""	1638:1:45988:46042	682411	74	True				
ANR	682715	ShiftExpression	"cout << ""    Stroustrup style formatting/indenting.\\n"""		682411	0		<<			
ANR	682716	Identifier	cout		682411	0					
ANR	682717	PrimaryExpression	"""    Stroustrup style formatting/indenting.\\n"""		682411	1					
ANR	682718	ExpressionStatement	"cout << ""    Linux braces.\\n"""	1639:1:46045:46074	682411	75	True				
ANR	682719	ShiftExpression	"cout << ""    Linux braces.\\n"""		682411	0		<<			
ANR	682720	Identifier	cout		682411	0					
ANR	682721	PrimaryExpression	"""    Linux braces.\\n"""		682411	1					
ANR	682722	ExpressionStatement	cout << endl	1640:1:46077:46089	682411	76	True				
ANR	682723	ShiftExpression	cout << endl		682411	0		<<			
ANR	682724	Identifier	cout		682411	0					
ANR	682725	Identifier	endl		682411	1					
ANR	682726	ExpressionStatement	"cout << ""    --style=whitesmith  OR  -A5\\n"""	1641:1:46092:46135	682411	77	True				
ANR	682727	ShiftExpression	"cout << ""    --style=whitesmith  OR  -A5\\n"""		682411	0		<<			
ANR	682728	Identifier	cout		682411	0					
ANR	682729	PrimaryExpression	"""    --style=whitesmith  OR  -A5\\n"""		682411	1					
ANR	682730	ExpressionStatement	"cout << ""    Whitesmith style formatting/indenting.\\n"""	1642:1:46138:46192	682411	78	True				
ANR	682731	ShiftExpression	"cout << ""    Whitesmith style formatting/indenting.\\n"""		682411	0		<<			
ANR	682732	Identifier	cout		682411	0					
ANR	682733	PrimaryExpression	"""    Whitesmith style formatting/indenting.\\n"""		682411	1					
ANR	682734	ExpressionStatement	"cout << ""    Broken, indented braces.\\n"""	1643:1:46195:46235	682411	79	True				
ANR	682735	ShiftExpression	"cout << ""    Broken, indented braces.\\n"""		682411	0		<<			
ANR	682736	Identifier	cout		682411	0					
ANR	682737	PrimaryExpression	"""    Broken, indented braces.\\n"""		682411	1					
ANR	682738	ExpressionStatement	"cout << ""    Indented class blocks and switch blocks.\\n"""	1644:1:46238:46294	682411	80	True				
ANR	682739	ShiftExpression	"cout << ""    Indented class blocks and switch blocks.\\n"""		682411	0		<<			
ANR	682740	Identifier	cout		682411	0					
ANR	682741	PrimaryExpression	"""    Indented class blocks and switch blocks.\\n"""		682411	1					
ANR	682742	ExpressionStatement	cout << endl	1645:1:46297:46309	682411	81	True				
ANR	682743	ShiftExpression	cout << endl		682411	0		<<			
ANR	682744	Identifier	cout		682411	0					
ANR	682745	Identifier	endl		682411	1					
ANR	682746	ExpressionStatement	"cout << ""    --style=vtk  OR  -A15\\n"""	1646:1:46312:46349	682411	82	True				
ANR	682747	ShiftExpression	"cout << ""    --style=vtk  OR  -A15\\n"""		682411	0		<<			
ANR	682748	Identifier	cout		682411	0					
ANR	682749	PrimaryExpression	"""    --style=vtk  OR  -A15\\n"""		682411	1					
ANR	682750	ExpressionStatement	"cout << ""    VTK style formatting/indenting.\\n"""	1647:1:46352:46399	682411	83	True				
ANR	682751	ShiftExpression	"cout << ""    VTK style formatting/indenting.\\n"""		682411	0		<<			
ANR	682752	Identifier	cout		682411	0					
ANR	682753	PrimaryExpression	"""    VTK style formatting/indenting.\\n"""		682411	1					
ANR	682754	ExpressionStatement	"cout << ""    Broken, indented braces except for the opening braces.\\n"""	1648:1:46402:46472	682411	84	True				
ANR	682755	ShiftExpression	"cout << ""    Broken, indented braces except for the opening braces.\\n"""		682411	0		<<			
ANR	682756	Identifier	cout		682411	0					
ANR	682757	PrimaryExpression	"""    Broken, indented braces except for the opening braces.\\n"""		682411	1					
ANR	682758	ExpressionStatement	cout << endl	1649:1:46475:46487	682411	85	True				
ANR	682759	ShiftExpression	cout << endl		682411	0		<<			
ANR	682760	Identifier	cout		682411	0					
ANR	682761	Identifier	endl		682411	1					
ANR	682762	ExpressionStatement	"cout << ""    --style=banner  OR  -A6\\n"""	1650:1:46490:46529	682411	86	True				
ANR	682763	ShiftExpression	"cout << ""    --style=banner  OR  -A6\\n"""		682411	0		<<			
ANR	682764	Identifier	cout		682411	0					
ANR	682765	PrimaryExpression	"""    --style=banner  OR  -A6\\n"""		682411	1					
ANR	682766	ExpressionStatement	"cout << ""    Banner style formatting/indenting.\\n"""	1651:1:46532:46582	682411	87	True				
ANR	682767	ShiftExpression	"cout << ""    Banner style formatting/indenting.\\n"""		682411	0		<<			
ANR	682768	Identifier	cout		682411	0					
ANR	682769	PrimaryExpression	"""    Banner style formatting/indenting.\\n"""		682411	1					
ANR	682770	ExpressionStatement	"cout << ""    Attached, indented braces.\\n"""	1652:1:46585:46627	682411	88	True				
ANR	682771	ShiftExpression	"cout << ""    Attached, indented braces.\\n"""		682411	0		<<			
ANR	682772	Identifier	cout		682411	0					
ANR	682773	PrimaryExpression	"""    Attached, indented braces.\\n"""		682411	1					
ANR	682774	ExpressionStatement	cout << endl	1653:1:46630:46642	682411	89	True				
ANR	682775	ShiftExpression	cout << endl		682411	0		<<			
ANR	682776	Identifier	cout		682411	0					
ANR	682777	Identifier	endl		682411	1					
ANR	682778	ExpressionStatement	"cout << ""    --style=gnu  OR  -A7\\n"""	1654:1:46645:46681	682411	90	True				
ANR	682779	ShiftExpression	"cout << ""    --style=gnu  OR  -A7\\n"""		682411	0		<<			
ANR	682780	Identifier	cout		682411	0					
ANR	682781	PrimaryExpression	"""    --style=gnu  OR  -A7\\n"""		682411	1					
ANR	682782	ExpressionStatement	"cout << ""    GNU style formatting/indenting.\\n"""	1655:1:46684:46731	682411	91	True				
ANR	682783	ShiftExpression	"cout << ""    GNU style formatting/indenting.\\n"""		682411	0		<<			
ANR	682784	Identifier	cout		682411	0					
ANR	682785	PrimaryExpression	"""    GNU style formatting/indenting.\\n"""		682411	1					
ANR	682786	ExpressionStatement	"cout << ""    Broken braces, indented blocks.\\n"""	1656:1:46734:46781	682411	92	True				
ANR	682787	ShiftExpression	"cout << ""    Broken braces, indented blocks.\\n"""		682411	0		<<			
ANR	682788	Identifier	cout		682411	0					
ANR	682789	PrimaryExpression	"""    Broken braces, indented blocks.\\n"""		682411	1					
ANR	682790	ExpressionStatement	cout << endl	1657:1:46784:46796	682411	93	True				
ANR	682791	ShiftExpression	cout << endl		682411	0		<<			
ANR	682792	Identifier	cout		682411	0					
ANR	682793	Identifier	endl		682411	1					
ANR	682794	ExpressionStatement	"cout << ""    --style=linux  OR  --style=knf  OR  -A8\\n"""	1658:1:46799:46854	682411	94	True				
ANR	682795	ShiftExpression	"cout << ""    --style=linux  OR  --style=knf  OR  -A8\\n"""		682411	0		<<			
ANR	682796	Identifier	cout		682411	0					
ANR	682797	PrimaryExpression	"""    --style=linux  OR  --style=knf  OR  -A8\\n"""		682411	1					
ANR	682798	ExpressionStatement	"cout << ""    Linux style formatting/indenting.\\n"""	1659:1:46857:46906	682411	95	True				
ANR	682799	ShiftExpression	"cout << ""    Linux style formatting/indenting.\\n"""		682411	0		<<			
ANR	682800	Identifier	cout		682411	0					
ANR	682801	PrimaryExpression	"""    Linux style formatting/indenting.\\n"""		682411	1					
ANR	682802	ExpressionStatement	"cout << ""    Linux braces, minimum conditional indent is one-half indent.\\n"""	1660:1:46909:46985	682411	96	True				
ANR	682803	ShiftExpression	"cout << ""    Linux braces, minimum conditional indent is one-half indent.\\n"""		682411	0		<<			
ANR	682804	Identifier	cout		682411	0					
ANR	682805	PrimaryExpression	"""    Linux braces, minimum conditional indent is one-half indent.\\n"""		682411	1					
ANR	682806	ExpressionStatement	cout << endl	1661:1:46988:47000	682411	97	True				
ANR	682807	ShiftExpression	cout << endl		682411	0		<<			
ANR	682808	Identifier	cout		682411	0					
ANR	682809	Identifier	endl		682411	1					
ANR	682810	ExpressionStatement	"cout << ""    --style=horstmann  OR  --style=run-in  OR  -A9\\n"""	1662:1:47003:47065	682411	98	True				
ANR	682811	ShiftExpression	"cout << ""    --style=horstmann  OR  --style=run-in  OR  -A9\\n"""		682411	0		<<			
ANR	682812	Identifier	cout		682411	0					
ANR	682813	PrimaryExpression	"""    --style=horstmann  OR  --style=run-in  OR  -A9\\n"""		682411	1					
ANR	682814	ExpressionStatement	"cout << ""    Horstmann style formatting/indenting.\\n"""	1663:1:47068:47121	682411	99	True				
ANR	682815	ShiftExpression	"cout << ""    Horstmann style formatting/indenting.\\n"""		682411	0		<<			
ANR	682816	Identifier	cout		682411	0					
ANR	682817	PrimaryExpression	"""    Horstmann style formatting/indenting.\\n"""		682411	1					
ANR	682818	ExpressionStatement	"cout << ""    Run-in braces, indented switches.\\n"""	1664:1:47124:47173	682411	100	True				
ANR	682819	ShiftExpression	"cout << ""    Run-in braces, indented switches.\\n"""		682411	0		<<			
ANR	682820	Identifier	cout		682411	0					
ANR	682821	PrimaryExpression	"""    Run-in braces, indented switches.\\n"""		682411	1					
ANR	682822	ExpressionStatement	cout << endl	1665:1:47176:47188	682411	101	True				
ANR	682823	ShiftExpression	cout << endl		682411	0		<<			
ANR	682824	Identifier	cout		682411	0					
ANR	682825	Identifier	endl		682411	1					
ANR	682826	ExpressionStatement	"cout << ""    --style=1tbs  OR  --style=otbs  OR  -A10\\n"""	1666:1:47191:47247	682411	102	True				
ANR	682827	ShiftExpression	"cout << ""    --style=1tbs  OR  --style=otbs  OR  -A10\\n"""		682411	0		<<			
ANR	682828	Identifier	cout		682411	0					
ANR	682829	PrimaryExpression	"""    --style=1tbs  OR  --style=otbs  OR  -A10\\n"""		682411	1					
ANR	682830	ExpressionStatement	"cout << ""    One True Brace Style formatting/indenting.\\n"""	1667:1:47250:47308	682411	103	True				
ANR	682831	ShiftExpression	"cout << ""    One True Brace Style formatting/indenting.\\n"""		682411	0		<<			
ANR	682832	Identifier	cout		682411	0					
ANR	682833	PrimaryExpression	"""    One True Brace Style formatting/indenting.\\n"""		682411	1					
ANR	682834	ExpressionStatement	"cout << ""    Linux braces, add braces to all conditionals.\\n"""	1668:1:47311:47372	682411	104	True				
ANR	682835	ShiftExpression	"cout << ""    Linux braces, add braces to all conditionals.\\n"""		682411	0		<<			
ANR	682836	Identifier	cout		682411	0					
ANR	682837	PrimaryExpression	"""    Linux braces, add braces to all conditionals.\\n"""		682411	1					
ANR	682838	ExpressionStatement	cout << endl	1669:1:47375:47387	682411	105	True				
ANR	682839	ShiftExpression	cout << endl		682411	0		<<			
ANR	682840	Identifier	cout		682411	0					
ANR	682841	Identifier	endl		682411	1					
ANR	682842	ExpressionStatement	"cout << ""    --style=google  OR  -A14\\n"""	1670:1:47390:47430	682411	106	True				
ANR	682843	ShiftExpression	"cout << ""    --style=google  OR  -A14\\n"""		682411	0		<<			
ANR	682844	Identifier	cout		682411	0					
ANR	682845	PrimaryExpression	"""    --style=google  OR  -A14\\n"""		682411	1					
ANR	682846	ExpressionStatement	"cout << ""    Google style formatting/indenting.\\n"""	1671:1:47433:47483	682411	107	True				
ANR	682847	ShiftExpression	"cout << ""    Google style formatting/indenting.\\n"""		682411	0		<<			
ANR	682848	Identifier	cout		682411	0					
ANR	682849	PrimaryExpression	"""    Google style formatting/indenting.\\n"""		682411	1					
ANR	682850	ExpressionStatement	"cout << ""    Attached braces, indented class modifiers.\\n"""	1672:1:47486:47544	682411	108	True				
ANR	682851	ShiftExpression	"cout << ""    Attached braces, indented class modifiers.\\n"""		682411	0		<<			
ANR	682852	Identifier	cout		682411	0					
ANR	682853	PrimaryExpression	"""    Attached braces, indented class modifiers.\\n"""		682411	1					
ANR	682854	ExpressionStatement	cout << endl	1673:1:47547:47559	682411	109	True				
ANR	682855	ShiftExpression	cout << endl		682411	0		<<			
ANR	682856	Identifier	cout		682411	0					
ANR	682857	Identifier	endl		682411	1					
ANR	682858	ExpressionStatement	"cout << ""    --style=mozilla  OR  -A16\\n"""	1674:1:47562:47603	682411	110	True				
ANR	682859	ShiftExpression	"cout << ""    --style=mozilla  OR  -A16\\n"""		682411	0		<<			
ANR	682860	Identifier	cout		682411	0					
ANR	682861	PrimaryExpression	"""    --style=mozilla  OR  -A16\\n"""		682411	1					
ANR	682862	ExpressionStatement	"cout << ""    Mozilla style formatting/indenting.\\n"""	1675:1:47606:47657	682411	111	True				
ANR	682863	ShiftExpression	"cout << ""    Mozilla style formatting/indenting.\\n"""		682411	0		<<			
ANR	682864	Identifier	cout		682411	0					
ANR	682865	PrimaryExpression	"""    Mozilla style formatting/indenting.\\n"""		682411	1					
ANR	682866	ExpressionStatement	"cout << ""    Linux braces, with broken braces for structs and enums,\\n"""	1676:1:47660:47731	682411	112	True				
ANR	682867	ShiftExpression	"cout << ""    Linux braces, with broken braces for structs and enums,\\n"""		682411	0		<<			
ANR	682868	Identifier	cout		682411	0					
ANR	682869	PrimaryExpression	"""    Linux braces, with broken braces for structs and enums,\\n"""		682411	1					
ANR	682870	ExpressionStatement	"cout << ""    and attached braces for namespaces.\\n"""	1677:1:47734:47785	682411	113	True				
ANR	682871	ShiftExpression	"cout << ""    and attached braces for namespaces.\\n"""		682411	0		<<			
ANR	682872	Identifier	cout		682411	0					
ANR	682873	PrimaryExpression	"""    and attached braces for namespaces.\\n"""		682411	1					
ANR	682874	ExpressionStatement	cout << endl	1678:1:47788:47800	682411	114	True				
ANR	682875	ShiftExpression	cout << endl		682411	0		<<			
ANR	682876	Identifier	cout		682411	0					
ANR	682877	Identifier	endl		682411	1					
ANR	682878	ExpressionStatement	"cout << ""    --style=pico  OR  -A11\\n"""	1679:1:47803:47841	682411	115	True				
ANR	682879	ShiftExpression	"cout << ""    --style=pico  OR  -A11\\n"""		682411	0		<<			
ANR	682880	Identifier	cout		682411	0					
ANR	682881	PrimaryExpression	"""    --style=pico  OR  -A11\\n"""		682411	1					
ANR	682882	ExpressionStatement	"cout << ""    Pico style formatting/indenting.\\n"""	1680:1:47844:47892	682411	116	True				
ANR	682883	ShiftExpression	"cout << ""    Pico style formatting/indenting.\\n"""		682411	0		<<			
ANR	682884	Identifier	cout		682411	0					
ANR	682885	PrimaryExpression	"""    Pico style formatting/indenting.\\n"""		682411	1					
ANR	682886	ExpressionStatement	"cout << ""    Run-in opening braces and attached closing braces.\\n"""	1681:1:47895:47961	682411	117	True				
ANR	682887	ShiftExpression	"cout << ""    Run-in opening braces and attached closing braces.\\n"""		682411	0		<<			
ANR	682888	Identifier	cout		682411	0					
ANR	682889	PrimaryExpression	"""    Run-in opening braces and attached closing braces.\\n"""		682411	1					
ANR	682890	ExpressionStatement	"cout << ""    Uses keep one line blocks and keep one line statements.\\n"""	1682:1:47964:48035	682411	118	True				
ANR	682891	ShiftExpression	"cout << ""    Uses keep one line blocks and keep one line statements.\\n"""		682411	0		<<			
ANR	682892	Identifier	cout		682411	0					
ANR	682893	PrimaryExpression	"""    Uses keep one line blocks and keep one line statements.\\n"""		682411	1					
ANR	682894	ExpressionStatement	cout << endl	1683:1:48038:48050	682411	119	True				
ANR	682895	ShiftExpression	cout << endl		682411	0		<<			
ANR	682896	Identifier	cout		682411	0					
ANR	682897	Identifier	endl		682411	1					
ANR	682898	ExpressionStatement	"cout << ""    --style=lisp  OR  -A12\\n"""	1684:1:48053:48091	682411	120	True				
ANR	682899	ShiftExpression	"cout << ""    --style=lisp  OR  -A12\\n"""		682411	0		<<			
ANR	682900	Identifier	cout		682411	0					
ANR	682901	PrimaryExpression	"""    --style=lisp  OR  -A12\\n"""		682411	1					
ANR	682902	ExpressionStatement	"cout << ""    Lisp style formatting/indenting.\\n"""	1685:1:48094:48142	682411	121	True				
ANR	682903	ShiftExpression	"cout << ""    Lisp style formatting/indenting.\\n"""		682411	0		<<			
ANR	682904	Identifier	cout		682411	0					
ANR	682905	PrimaryExpression	"""    Lisp style formatting/indenting.\\n"""		682411	1					
ANR	682906	ExpressionStatement	"cout << ""    Attached opening braces and attached closing braces.\\n"""	1686:1:48145:48213	682411	122	True				
ANR	682907	ShiftExpression	"cout << ""    Attached opening braces and attached closing braces.\\n"""		682411	0		<<			
ANR	682908	Identifier	cout		682411	0					
ANR	682909	PrimaryExpression	"""    Attached opening braces and attached closing braces.\\n"""		682411	1					
ANR	682910	ExpressionStatement	"cout << ""    Uses keep one line statements.\\n"""	1687:1:48216:48262	682411	123	True				
ANR	682911	ShiftExpression	"cout << ""    Uses keep one line statements.\\n"""		682411	0		<<			
ANR	682912	Identifier	cout		682411	0					
ANR	682913	PrimaryExpression	"""    Uses keep one line statements.\\n"""		682411	1					
ANR	682914	ExpressionStatement	cout << endl	1688:1:48265:48277	682411	124	True				
ANR	682915	ShiftExpression	cout << endl		682411	0		<<			
ANR	682916	Identifier	cout		682411	0					
ANR	682917	Identifier	endl		682411	1					
ANR	682918	ExpressionStatement	"cout << ""Tab Options:\\n"""	1689:1:48280:48304	682411	125	True				
ANR	682919	ShiftExpression	"cout << ""Tab Options:\\n"""		682411	0		<<			
ANR	682920	Identifier	cout		682411	0					
ANR	682921	PrimaryExpression	"""Tab Options:\\n"""		682411	1					
ANR	682922	ExpressionStatement	"cout << ""------------\\n"""	1690:1:48307:48331	682411	126	True				
ANR	682923	ShiftExpression	"cout << ""------------\\n"""		682411	0		<<			
ANR	682924	Identifier	cout		682411	0					
ANR	682925	PrimaryExpression	"""------------\\n"""		682411	1					
ANR	682926	ExpressionStatement	"cout << ""    default indent option\\n"""	1691:1:48334:48371	682411	127	True				
ANR	682927	ShiftExpression	"cout << ""    default indent option\\n"""		682411	0		<<			
ANR	682928	Identifier	cout		682411	0					
ANR	682929	PrimaryExpression	"""    default indent option\\n"""		682411	1					
ANR	682930	ExpressionStatement	"cout << ""    If no indentation option is set, the default\\n"""	1692:1:48374:48434	682411	128	True				
ANR	682931	ShiftExpression	"cout << ""    If no indentation option is set, the default\\n"""		682411	0		<<			
ANR	682932	Identifier	cout		682411	0					
ANR	682933	PrimaryExpression	"""    If no indentation option is set, the default\\n"""		682411	1					
ANR	682934	ExpressionStatement	"cout << ""    option of 4 spaces per indent will be used.\\n"""	1693:1:48437:48496	682411	129	True				
ANR	682935	ShiftExpression	"cout << ""    option of 4 spaces per indent will be used.\\n"""		682411	0		<<			
ANR	682936	Identifier	cout		682411	0					
ANR	682937	PrimaryExpression	"""    option of 4 spaces per indent will be used.\\n"""		682411	1					
ANR	682938	ExpressionStatement	cout << endl	1694:1:48499:48511	682411	130	True				
ANR	682939	ShiftExpression	cout << endl		682411	0		<<			
ANR	682940	Identifier	cout		682411	0					
ANR	682941	Identifier	endl		682411	1					
ANR	682942	ExpressionStatement	"cout << ""    --indent=spaces=#  OR  -s#\\n"""	1695:1:48514:48556	682411	131	True				
ANR	682943	ShiftExpression	"cout << ""    --indent=spaces=#  OR  -s#\\n"""		682411	0		<<			
ANR	682944	Identifier	cout		682411	0					
ANR	682945	PrimaryExpression	"""    --indent=spaces=#  OR  -s#\\n"""		682411	1					
ANR	682946	ExpressionStatement	"cout << ""    Indent using # spaces per indent. Not specifying #\\n"""	1696:1:48559:48625	682411	132	True				
ANR	682947	ShiftExpression	"cout << ""    Indent using # spaces per indent. Not specifying #\\n"""		682411	0		<<			
ANR	682948	Identifier	cout		682411	0					
ANR	682949	PrimaryExpression	"""    Indent using # spaces per indent. Not specifying #\\n"""		682411	1					
ANR	682950	ExpressionStatement	"cout << ""    will result in a default of 4 spaces per indent.\\n"""	1697:1:48628:48692	682411	133	True				
ANR	682951	ShiftExpression	"cout << ""    will result in a default of 4 spaces per indent.\\n"""		682411	0		<<			
ANR	682952	Identifier	cout		682411	0					
ANR	682953	PrimaryExpression	"""    will result in a default of 4 spaces per indent.\\n"""		682411	1					
ANR	682954	ExpressionStatement	cout << endl	1698:1:48695:48707	682411	134	True				
ANR	682955	ShiftExpression	cout << endl		682411	0		<<			
ANR	682956	Identifier	cout		682411	0					
ANR	682957	Identifier	endl		682411	1					
ANR	682958	ExpressionStatement	"cout << ""    --indent=tab  OR  --indent=tab=#  OR  -t  OR  -t#\\n"""	1699:1:48710:48775	682411	135	True				
ANR	682959	ShiftExpression	"cout << ""    --indent=tab  OR  --indent=tab=#  OR  -t  OR  -t#\\n"""		682411	0		<<			
ANR	682960	Identifier	cout		682411	0					
ANR	682961	PrimaryExpression	"""    --indent=tab  OR  --indent=tab=#  OR  -t  OR  -t#\\n"""		682411	1					
ANR	682962	ExpressionStatement	"cout << ""    Indent using tab characters, assuming that each\\n"""	1700:1:48778:48841	682411	136	True				
ANR	682963	ShiftExpression	"cout << ""    Indent using tab characters, assuming that each\\n"""		682411	0		<<			
ANR	682964	Identifier	cout		682411	0					
ANR	682965	PrimaryExpression	"""    Indent using tab characters, assuming that each\\n"""		682411	1					
ANR	682966	ExpressionStatement	"cout << ""    indent is # spaces long. Not specifying # will result\\n"""	1701:1:48844:48913	682411	137	True				
ANR	682967	ShiftExpression	"cout << ""    indent is # spaces long. Not specifying # will result\\n"""		682411	0		<<			
ANR	682968	Identifier	cout		682411	0					
ANR	682969	PrimaryExpression	"""    indent is # spaces long. Not specifying # will result\\n"""		682411	1					
ANR	682970	ExpressionStatement	"cout << ""    in a default assumption of 4 spaces per indent.\\n"""	1702:1:48916:48979	682411	138	True				
ANR	682971	ShiftExpression	"cout << ""    in a default assumption of 4 spaces per indent.\\n"""		682411	0		<<			
ANR	682972	Identifier	cout		682411	0					
ANR	682973	PrimaryExpression	"""    in a default assumption of 4 spaces per indent.\\n"""		682411	1					
ANR	682974	ExpressionStatement	cout << endl	1703:1:48982:48994	682411	139	True				
ANR	682975	ShiftExpression	cout << endl		682411	0		<<			
ANR	682976	Identifier	cout		682411	0					
ANR	682977	Identifier	endl		682411	1					
ANR	682978	ExpressionStatement	"cout << ""    --indent=force-tab=#  OR  -T#\\n"""	1704:1:48997:49042	682411	140	True				
ANR	682979	ShiftExpression	"cout << ""    --indent=force-tab=#  OR  -T#\\n"""		682411	0		<<			
ANR	682980	Identifier	cout		682411	0					
ANR	682981	PrimaryExpression	"""    --indent=force-tab=#  OR  -T#\\n"""		682411	1					
ANR	682982	ExpressionStatement	"cout << ""    Indent using tab characters, assuming that each\\n"""	1705:1:49045:49108	682411	141	True				
ANR	682983	ShiftExpression	"cout << ""    Indent using tab characters, assuming that each\\n"""		682411	0		<<			
ANR	682984	Identifier	cout		682411	0					
ANR	682985	PrimaryExpression	"""    Indent using tab characters, assuming that each\\n"""		682411	1					
ANR	682986	ExpressionStatement	"cout << ""    indent is # spaces long. Force tabs to be used in areas\\n"""	1706:1:49111:49182	682411	142	True				
ANR	682987	ShiftExpression	"cout << ""    indent is # spaces long. Force tabs to be used in areas\\n"""		682411	0		<<			
ANR	682988	Identifier	cout		682411	0					
ANR	682989	PrimaryExpression	"""    indent is # spaces long. Force tabs to be used in areas\\n"""		682411	1					
ANR	682990	ExpressionStatement	"cout << ""    AStyle would prefer to use spaces.\\n"""	1707:1:49185:49235	682411	143	True				
ANR	682991	ShiftExpression	"cout << ""    AStyle would prefer to use spaces.\\n"""		682411	0		<<			
ANR	682992	Identifier	cout		682411	0					
ANR	682993	PrimaryExpression	"""    AStyle would prefer to use spaces.\\n"""		682411	1					
ANR	682994	ExpressionStatement	cout << endl	1708:1:49238:49250	682411	144	True				
ANR	682995	ShiftExpression	cout << endl		682411	0		<<			
ANR	682996	Identifier	cout		682411	0					
ANR	682997	Identifier	endl		682411	1					
ANR	682998	ExpressionStatement	"cout << ""    --indent=force-tab-x=#  OR  -xT#\\n"""	1709:1:49253:49301	682411	145	True				
ANR	682999	ShiftExpression	"cout << ""    --indent=force-tab-x=#  OR  -xT#\\n"""		682411	0		<<			
ANR	683000	Identifier	cout		682411	0					
ANR	683001	PrimaryExpression	"""    --indent=force-tab-x=#  OR  -xT#\\n"""		682411	1					
ANR	683002	ExpressionStatement	"cout << ""    Allows the tab length to be set to a length that is different\\n"""	1710:1:49304:49381	682411	146	True				
ANR	683003	ShiftExpression	"cout << ""    Allows the tab length to be set to a length that is different\\n"""		682411	0		<<			
ANR	683004	Identifier	cout		682411	0					
ANR	683005	PrimaryExpression	"""    Allows the tab length to be set to a length that is different\\n"""		682411	1					
ANR	683006	ExpressionStatement	"cout << ""    from the indent length. This may cause the indentation to be\\n"""	1711:1:49384:49460	682411	147	True				
ANR	683007	ShiftExpression	"cout << ""    from the indent length. This may cause the indentation to be\\n"""		682411	0		<<			
ANR	683008	Identifier	cout		682411	0					
ANR	683009	PrimaryExpression	"""    from the indent length. This may cause the indentation to be\\n"""		682411	1					
ANR	683010	ExpressionStatement	"cout << ""    a mix of both spaces and tabs. This option sets the tab length.\\n"""	1712:1:49463:49542	682411	148	True				
ANR	683011	ShiftExpression	"cout << ""    a mix of both spaces and tabs. This option sets the tab length.\\n"""		682411	0		<<			
ANR	683012	Identifier	cout		682411	0					
ANR	683013	PrimaryExpression	"""    a mix of both spaces and tabs. This option sets the tab length.\\n"""		682411	1					
ANR	683014	ExpressionStatement	cout << endl	1713:1:49545:49557	682411	149	True				
ANR	683015	ShiftExpression	cout << endl		682411	0		<<			
ANR	683016	Identifier	cout		682411	0					
ANR	683017	Identifier	endl		682411	1					
ANR	683018	ExpressionStatement	"cout << ""Brace Modify Options:\\n"""	1714:1:49560:49593	682411	150	True				
ANR	683019	ShiftExpression	"cout << ""Brace Modify Options:\\n"""		682411	0		<<			
ANR	683020	Identifier	cout		682411	0					
ANR	683021	PrimaryExpression	"""Brace Modify Options:\\n"""		682411	1					
ANR	683022	ExpressionStatement	"cout << ""---------------------\\n"""	1715:1:49596:49629	682411	151	True				
ANR	683023	ShiftExpression	"cout << ""---------------------\\n"""		682411	0		<<			
ANR	683024	Identifier	cout		682411	0					
ANR	683025	PrimaryExpression	"""---------------------\\n"""		682411	1					
ANR	683026	ExpressionStatement	"cout << ""    --attach-namespaces  OR  -xn\\n"""	1716:1:49632:49676	682411	152	True				
ANR	683027	ShiftExpression	"cout << ""    --attach-namespaces  OR  -xn\\n"""		682411	0		<<			
ANR	683028	Identifier	cout		682411	0					
ANR	683029	PrimaryExpression	"""    --attach-namespaces  OR  -xn\\n"""		682411	1					
ANR	683030	ExpressionStatement	"cout << ""    Attach braces to a namespace statement.\\n"""	1717:1:49679:49734	682411	153	True				
ANR	683031	ShiftExpression	"cout << ""    Attach braces to a namespace statement.\\n"""		682411	0		<<			
ANR	683032	Identifier	cout		682411	0					
ANR	683033	PrimaryExpression	"""    Attach braces to a namespace statement.\\n"""		682411	1					
ANR	683034	ExpressionStatement	cout << endl	1718:1:49737:49749	682411	154	True				
ANR	683035	ShiftExpression	cout << endl		682411	0		<<			
ANR	683036	Identifier	cout		682411	0					
ANR	683037	Identifier	endl		682411	1					
ANR	683038	ExpressionStatement	"cout << ""    --attach-classes  OR  -xc\\n"""	1719:1:49752:49793	682411	155	True				
ANR	683039	ShiftExpression	"cout << ""    --attach-classes  OR  -xc\\n"""		682411	0		<<			
ANR	683040	Identifier	cout		682411	0					
ANR	683041	PrimaryExpression	"""    --attach-classes  OR  -xc\\n"""		682411	1					
ANR	683042	ExpressionStatement	"cout << ""    Attach braces to a class statement.\\n"""	1720:1:49796:49847	682411	156	True				
ANR	683043	ShiftExpression	"cout << ""    Attach braces to a class statement.\\n"""		682411	0		<<			
ANR	683044	Identifier	cout		682411	0					
ANR	683045	PrimaryExpression	"""    Attach braces to a class statement.\\n"""		682411	1					
ANR	683046	ExpressionStatement	cout << endl	1721:1:49850:49862	682411	157	True				
ANR	683047	ShiftExpression	cout << endl		682411	0		<<			
ANR	683048	Identifier	cout		682411	0					
ANR	683049	Identifier	endl		682411	1					
ANR	683050	ExpressionStatement	"cout << ""    --attach-inlines  OR  -xl\\n"""	1722:1:49865:49906	682411	158	True				
ANR	683051	ShiftExpression	"cout << ""    --attach-inlines  OR  -xl\\n"""		682411	0		<<			
ANR	683052	Identifier	cout		682411	0					
ANR	683053	PrimaryExpression	"""    --attach-inlines  OR  -xl\\n"""		682411	1					
ANR	683054	ExpressionStatement	"cout << ""    Attach braces to class inline function definitions.\\n"""	1723:1:49909:49976	682411	159	True				
ANR	683055	ShiftExpression	"cout << ""    Attach braces to class inline function definitions.\\n"""		682411	0		<<			
ANR	683056	Identifier	cout		682411	0					
ANR	683057	PrimaryExpression	"""    Attach braces to class inline function definitions.\\n"""		682411	1					
ANR	683058	ExpressionStatement	cout << endl	1724:1:49979:49991	682411	160	True				
ANR	683059	ShiftExpression	cout << endl		682411	0		<<			
ANR	683060	Identifier	cout		682411	0					
ANR	683061	Identifier	endl		682411	1					
ANR	683062	ExpressionStatement	"cout << ""    --attach-extern-c  OR  -xk\\n"""	1725:1:49994:50036	682411	161	True				
ANR	683063	ShiftExpression	"cout << ""    --attach-extern-c  OR  -xk\\n"""		682411	0		<<			
ANR	683064	Identifier	cout		682411	0					
ANR	683065	PrimaryExpression	"""    --attach-extern-c  OR  -xk\\n"""		682411	1					
ANR	683066	ExpressionStatement	"cout << ""    Attach braces to an extern \\""C\\"" statement.\\n"""	1726:1:50039:50098	682411	162	True				
ANR	683067	ShiftExpression	"cout << ""    Attach braces to an extern \\""C\\"" statement.\\n"""		682411	0		<<			
ANR	683068	Identifier	cout		682411	0					
ANR	683069	PrimaryExpression	"""    Attach braces to an extern \\""C\\"" statement.\\n"""		682411	1					
ANR	683070	ExpressionStatement	cout << endl	1727:1:50101:50113	682411	163	True				
ANR	683071	ShiftExpression	cout << endl		682411	0		<<			
ANR	683072	Identifier	cout		682411	0					
ANR	683073	Identifier	endl		682411	1					
ANR	683074	ExpressionStatement	"cout << ""    --attach-closing-while  OR  -xV\\n"""	1728:1:50116:50163	682411	164	True				
ANR	683075	ShiftExpression	"cout << ""    --attach-closing-while  OR  -xV\\n"""		682411	0		<<			
ANR	683076	Identifier	cout		682411	0					
ANR	683077	PrimaryExpression	"""    --attach-closing-while  OR  -xV\\n"""		682411	1					
ANR	683078	ExpressionStatement	"cout << ""    Attach closing while of do-while to the closing brace.\\n"""	1729:1:50166:50236	682411	165	True				
ANR	683079	ShiftExpression	"cout << ""    Attach closing while of do-while to the closing brace.\\n"""		682411	0		<<			
ANR	683080	Identifier	cout		682411	0					
ANR	683081	PrimaryExpression	"""    Attach closing while of do-while to the closing brace.\\n"""		682411	1					
ANR	683082	ExpressionStatement	cout << endl	1730:1:50239:50251	682411	166	True				
ANR	683083	ShiftExpression	cout << endl		682411	0		<<			
ANR	683084	Identifier	cout		682411	0					
ANR	683085	Identifier	endl		682411	1					
ANR	683086	ExpressionStatement	"cout << ""Indentation Options:\\n"""	1731:1:50254:50286	682411	167	True				
ANR	683087	ShiftExpression	"cout << ""Indentation Options:\\n"""		682411	0		<<			
ANR	683088	Identifier	cout		682411	0					
ANR	683089	PrimaryExpression	"""Indentation Options:\\n"""		682411	1					
ANR	683090	ExpressionStatement	"cout << ""--------------------\\n"""	1732:1:50289:50321	682411	168	True				
ANR	683091	ShiftExpression	"cout << ""--------------------\\n"""		682411	0		<<			
ANR	683092	Identifier	cout		682411	0					
ANR	683093	PrimaryExpression	"""--------------------\\n"""		682411	1					
ANR	683094	ExpressionStatement	"cout << ""    --indent-classes  OR  -C\\n"""	1733:1:50324:50364	682411	169	True				
ANR	683095	ShiftExpression	"cout << ""    --indent-classes  OR  -C\\n"""		682411	0		<<			
ANR	683096	Identifier	cout		682411	0					
ANR	683097	PrimaryExpression	"""    --indent-classes  OR  -C\\n"""		682411	1					
ANR	683098	ExpressionStatement	"cout << ""    Indent 'class' blocks so that the entire block is indented.\\n"""	1734:1:50367:50442	682411	170	True				
ANR	683099	ShiftExpression	"cout << ""    Indent 'class' blocks so that the entire block is indented.\\n"""		682411	0		<<			
ANR	683100	Identifier	cout		682411	0					
ANR	683101	PrimaryExpression	"""    Indent 'class' blocks so that the entire block is indented.\\n"""		682411	1					
ANR	683102	ExpressionStatement	cout << endl	1735:1:50445:50457	682411	171	True				
ANR	683103	ShiftExpression	cout << endl		682411	0		<<			
ANR	683104	Identifier	cout		682411	0					
ANR	683105	Identifier	endl		682411	1					
ANR	683106	ExpressionStatement	"cout << ""    --indent-modifiers  OR  -xG\\n"""	1736:1:50460:50503	682411	172	True				
ANR	683107	ShiftExpression	"cout << ""    --indent-modifiers  OR  -xG\\n"""		682411	0		<<			
ANR	683108	Identifier	cout		682411	0					
ANR	683109	PrimaryExpression	"""    --indent-modifiers  OR  -xG\\n"""		682411	1					
ANR	683110	ExpressionStatement	"cout << ""    Indent 'class' access modifiers, 'public:', 'protected:' or\\n"""	1737:1:50506:50581	682411	173	True				
ANR	683111	ShiftExpression	"cout << ""    Indent 'class' access modifiers, 'public:', 'protected:' or\\n"""		682411	0		<<			
ANR	683112	Identifier	cout		682411	0					
ANR	683113	PrimaryExpression	"""    Indent 'class' access modifiers, 'public:', 'protected:' or\\n"""		682411	1					
ANR	683114	ExpressionStatement	"cout << ""    'private:', one half indent. The rest of the class is not\\n"""	1738:1:50584:50657	682411	174	True				
ANR	683115	ShiftExpression	"cout << ""    'private:', one half indent. The rest of the class is not\\n"""		682411	0		<<			
ANR	683116	Identifier	cout		682411	0					
ANR	683117	PrimaryExpression	"""    'private:', one half indent. The rest of the class is not\\n"""		682411	1					
ANR	683118	ExpressionStatement	"cout << ""    indented. \\n"""	1739:1:50660:50686	682411	175	True				
ANR	683119	ShiftExpression	"cout << ""    indented. \\n"""		682411	0		<<			
ANR	683120	Identifier	cout		682411	0					
ANR	683121	PrimaryExpression	"""    indented. \\n"""		682411	1					
ANR	683122	ExpressionStatement	cout << endl	1740:1:50689:50701	682411	176	True				
ANR	683123	ShiftExpression	cout << endl		682411	0		<<			
ANR	683124	Identifier	cout		682411	0					
ANR	683125	Identifier	endl		682411	1					
ANR	683126	ExpressionStatement	"cout << ""    --indent-switches  OR  -S\\n"""	1741:1:50704:50745	682411	177	True				
ANR	683127	ShiftExpression	"cout << ""    --indent-switches  OR  -S\\n"""		682411	0		<<			
ANR	683128	Identifier	cout		682411	0					
ANR	683129	PrimaryExpression	"""    --indent-switches  OR  -S\\n"""		682411	1					
ANR	683130	ExpressionStatement	"cout << ""    Indent 'switch' blocks, so that the inner 'case XXX:'\\n"""	1742:1:50748:50817	682411	178	True				
ANR	683131	ShiftExpression	"cout << ""    Indent 'switch' blocks, so that the inner 'case XXX:'\\n"""		682411	0		<<			
ANR	683132	Identifier	cout		682411	0					
ANR	683133	PrimaryExpression	"""    Indent 'switch' blocks, so that the inner 'case XXX:'\\n"""		682411	1					
ANR	683134	ExpressionStatement	"cout << ""    headers are indented in relation to the switch block.\\n"""	1743:1:50820:50889	682411	179	True				
ANR	683135	ShiftExpression	"cout << ""    headers are indented in relation to the switch block.\\n"""		682411	0		<<			
ANR	683136	Identifier	cout		682411	0					
ANR	683137	PrimaryExpression	"""    headers are indented in relation to the switch block.\\n"""		682411	1					
ANR	683138	ExpressionStatement	cout << endl	1744:1:50892:50904	682411	180	True				
ANR	683139	ShiftExpression	cout << endl		682411	0		<<			
ANR	683140	Identifier	cout		682411	0					
ANR	683141	Identifier	endl		682411	1					
ANR	683142	ExpressionStatement	"cout << ""    --indent-cases  OR  -K\\n"""	1745:1:50907:50945	682411	181	True				
ANR	683143	ShiftExpression	"cout << ""    --indent-cases  OR  -K\\n"""		682411	0		<<			
ANR	683144	Identifier	cout		682411	0					
ANR	683145	PrimaryExpression	"""    --indent-cases  OR  -K\\n"""		682411	1					
ANR	683146	ExpressionStatement	"cout << ""    Indent case blocks from the 'case XXX:' headers.\\n"""	1746:1:50948:51012	682411	182	True				
ANR	683147	ShiftExpression	"cout << ""    Indent case blocks from the 'case XXX:' headers.\\n"""		682411	0		<<			
ANR	683148	Identifier	cout		682411	0					
ANR	683149	PrimaryExpression	"""    Indent case blocks from the 'case XXX:' headers.\\n"""		682411	1					
ANR	683150	ExpressionStatement	"cout << ""    Case statements not enclosed in blocks are NOT indented.\\n"""	1747:1:51015:51087	682411	183	True				
ANR	683151	ShiftExpression	"cout << ""    Case statements not enclosed in blocks are NOT indented.\\n"""		682411	0		<<			
ANR	683152	Identifier	cout		682411	0					
ANR	683153	PrimaryExpression	"""    Case statements not enclosed in blocks are NOT indented.\\n"""		682411	1					
ANR	683154	ExpressionStatement	cout << endl	1748:1:51090:51102	682411	184	True				
ANR	683155	ShiftExpression	cout << endl		682411	0		<<			
ANR	683156	Identifier	cout		682411	0					
ANR	683157	Identifier	endl		682411	1					
ANR	683158	ExpressionStatement	"cout << ""    --indent-namespaces  OR  -N\\n"""	1749:1:51105:51148	682411	185	True				
ANR	683159	ShiftExpression	"cout << ""    --indent-namespaces  OR  -N\\n"""		682411	0		<<			
ANR	683160	Identifier	cout		682411	0					
ANR	683161	PrimaryExpression	"""    --indent-namespaces  OR  -N\\n"""		682411	1					
ANR	683162	ExpressionStatement	"cout << ""    Indent the contents of namespace blocks.\\n"""	1750:1:51151:51207	682411	186	True				
ANR	683163	ShiftExpression	"cout << ""    Indent the contents of namespace blocks.\\n"""		682411	0		<<			
ANR	683164	Identifier	cout		682411	0					
ANR	683165	PrimaryExpression	"""    Indent the contents of namespace blocks.\\n"""		682411	1					
ANR	683166	ExpressionStatement	cout << endl	1751:1:51210:51222	682411	187	True				
ANR	683167	ShiftExpression	cout << endl		682411	0		<<			
ANR	683168	Identifier	cout		682411	0					
ANR	683169	Identifier	endl		682411	1					
ANR	683170	ExpressionStatement	"cout << ""    --indent-after-parens  OR  -xU\\n"""	1752:1:51225:51271	682411	188	True				
ANR	683171	ShiftExpression	"cout << ""    --indent-after-parens  OR  -xU\\n"""		682411	0		<<			
ANR	683172	Identifier	cout		682411	0					
ANR	683173	PrimaryExpression	"""    --indent-after-parens  OR  -xU\\n"""		682411	1					
ANR	683174	ExpressionStatement	"cout << ""    Indent, instead of align, continuation lines following lines\\n"""	1753:1:51274:51350	682411	189	True				
ANR	683175	ShiftExpression	"cout << ""    Indent, instead of align, continuation lines following lines\\n"""		682411	0		<<			
ANR	683176	Identifier	cout		682411	0					
ANR	683177	PrimaryExpression	"""    Indent, instead of align, continuation lines following lines\\n"""		682411	1					
ANR	683178	ExpressionStatement	"cout << ""    that contain an opening paren '(' or an assignment '='. \\n"""	1754:1:51353:51425	682411	190	True				
ANR	683179	ShiftExpression	"cout << ""    that contain an opening paren '(' or an assignment '='. \\n"""		682411	0		<<			
ANR	683180	Identifier	cout		682411	0					
ANR	683181	PrimaryExpression	"""    that contain an opening paren '(' or an assignment '='. \\n"""		682411	1					
ANR	683182	ExpressionStatement	cout << endl	1755:1:51428:51440	682411	191	True				
ANR	683183	ShiftExpression	cout << endl		682411	0		<<			
ANR	683184	Identifier	cout		682411	0					
ANR	683185	Identifier	endl		682411	1					
ANR	683186	ExpressionStatement	"cout << ""    --indent-continuation=#  OR  -xt#\\n"""	1756:1:51443:51492	682411	192	True				
ANR	683187	ShiftExpression	"cout << ""    --indent-continuation=#  OR  -xt#\\n"""		682411	0		<<			
ANR	683188	Identifier	cout		682411	0					
ANR	683189	PrimaryExpression	"""    --indent-continuation=#  OR  -xt#\\n"""		682411	1					
ANR	683190	ExpressionStatement	"cout << ""    Indent continuation lines an additional # indents.\\n"""	1757:1:51495:51561	682411	193	True				
ANR	683191	ShiftExpression	"cout << ""    Indent continuation lines an additional # indents.\\n"""		682411	0		<<			
ANR	683192	Identifier	cout		682411	0					
ANR	683193	PrimaryExpression	"""    Indent continuation lines an additional # indents.\\n"""		682411	1					
ANR	683194	ExpressionStatement	"cout << ""    The valid values are 0 thru 4 indents.\\n"""	1758:1:51564:51618	682411	194	True				
ANR	683195	ShiftExpression	"cout << ""    The valid values are 0 thru 4 indents.\\n"""		682411	0		<<			
ANR	683196	Identifier	cout		682411	0					
ANR	683197	PrimaryExpression	"""    The valid values are 0 thru 4 indents.\\n"""		682411	1					
ANR	683198	ExpressionStatement	"cout << ""    The default value is 1 indent.\\n"""	1759:1:51621:51667	682411	195	True				
ANR	683199	ShiftExpression	"cout << ""    The default value is 1 indent.\\n"""		682411	0		<<			
ANR	683200	Identifier	cout		682411	0					
ANR	683201	PrimaryExpression	"""    The default value is 1 indent.\\n"""		682411	1					
ANR	683202	ExpressionStatement	cout << endl	1760:1:51670:51682	682411	196	True				
ANR	683203	ShiftExpression	cout << endl		682411	0		<<			
ANR	683204	Identifier	cout		682411	0					
ANR	683205	Identifier	endl		682411	1					
ANR	683206	ExpressionStatement	"cout << ""    --indent-labels  OR  -L\\n"""	1761:1:51685:51724	682411	197	True				
ANR	683207	ShiftExpression	"cout << ""    --indent-labels  OR  -L\\n"""		682411	0		<<			
ANR	683208	Identifier	cout		682411	0					
ANR	683209	PrimaryExpression	"""    --indent-labels  OR  -L\\n"""		682411	1					
ANR	683210	ExpressionStatement	"cout << ""    Indent labels so that they appear one indent less than\\n"""	1762:1:51727:51797	682411	198	True				
ANR	683211	ShiftExpression	"cout << ""    Indent labels so that they appear one indent less than\\n"""		682411	0		<<			
ANR	683212	Identifier	cout		682411	0					
ANR	683213	PrimaryExpression	"""    Indent labels so that they appear one indent less than\\n"""		682411	1					
ANR	683214	ExpressionStatement	"cout << ""    the current indentation level, rather than being\\n"""	1763:1:51800:51864	682411	199	True				
ANR	683215	ShiftExpression	"cout << ""    the current indentation level, rather than being\\n"""		682411	0		<<			
ANR	683216	Identifier	cout		682411	0					
ANR	683217	PrimaryExpression	"""    the current indentation level, rather than being\\n"""		682411	1					
ANR	683218	ExpressionStatement	"cout << ""    flushed completely to the left (which is the default).\\n"""	1764:1:51867:51937	682411	200	True				
ANR	683219	ShiftExpression	"cout << ""    flushed completely to the left (which is the default).\\n"""		682411	0		<<			
ANR	683220	Identifier	cout		682411	0					
ANR	683221	PrimaryExpression	"""    flushed completely to the left (which is the default).\\n"""		682411	1					
ANR	683222	ExpressionStatement	cout << endl	1765:1:51940:51952	682411	201	True				
ANR	683223	ShiftExpression	cout << endl		682411	0		<<			
ANR	683224	Identifier	cout		682411	0					
ANR	683225	Identifier	endl		682411	1					
ANR	683226	ExpressionStatement	"cout << ""    --indent-preproc-block  OR  -xW\\n"""	1766:1:51955:52002	682411	202	True				
ANR	683227	ShiftExpression	"cout << ""    --indent-preproc-block  OR  -xW\\n"""		682411	0		<<			
ANR	683228	Identifier	cout		682411	0					
ANR	683229	PrimaryExpression	"""    --indent-preproc-block  OR  -xW\\n"""		682411	1					
ANR	683230	ExpressionStatement	"cout << ""    Indent preprocessor blocks at brace level 0.\\n"""	1767:1:52005:52065	682411	203	True				
ANR	683231	ShiftExpression	"cout << ""    Indent preprocessor blocks at brace level 0.\\n"""		682411	0		<<			
ANR	683232	Identifier	cout		682411	0					
ANR	683233	PrimaryExpression	"""    Indent preprocessor blocks at brace level 0.\\n"""		682411	1					
ANR	683234	ExpressionStatement	"cout << ""    Without this option the preprocessor block is not indented.\\n"""	1768:1:52068:52143	682411	204	True				
ANR	683235	ShiftExpression	"cout << ""    Without this option the preprocessor block is not indented.\\n"""		682411	0		<<			
ANR	683236	Identifier	cout		682411	0					
ANR	683237	PrimaryExpression	"""    Without this option the preprocessor block is not indented.\\n"""		682411	1					
ANR	683238	ExpressionStatement	cout << endl	1769:1:52146:52158	682411	205	True				
ANR	683239	ShiftExpression	cout << endl		682411	0		<<			
ANR	683240	Identifier	cout		682411	0					
ANR	683241	Identifier	endl		682411	1					
ANR	683242	ExpressionStatement	"cout << ""    --indent-preproc-cond  OR  -xw\\n"""	1770:1:52161:52207	682411	206	True				
ANR	683243	ShiftExpression	"cout << ""    --indent-preproc-cond  OR  -xw\\n"""		682411	0		<<			
ANR	683244	Identifier	cout		682411	0					
ANR	683245	PrimaryExpression	"""    --indent-preproc-cond  OR  -xw\\n"""		682411	1					
ANR	683246	ExpressionStatement	"cout << ""    Indent preprocessor conditional statements #if/#else/#endif\\n"""	1771:1:52210:52285	682411	207	True				
ANR	683247	ShiftExpression	"cout << ""    Indent preprocessor conditional statements #if/#else/#endif\\n"""		682411	0		<<			
ANR	683248	Identifier	cout		682411	0					
ANR	683249	PrimaryExpression	"""    Indent preprocessor conditional statements #if/#else/#endif\\n"""		682411	1					
ANR	683250	ExpressionStatement	"cout << ""    to the same level as the source code.\\n"""	1772:1:52288:52341	682411	208	True				
ANR	683251	ShiftExpression	"cout << ""    to the same level as the source code.\\n"""		682411	0		<<			
ANR	683252	Identifier	cout		682411	0					
ANR	683253	PrimaryExpression	"""    to the same level as the source code.\\n"""		682411	1					
ANR	683254	ExpressionStatement	cout << endl	1773:1:52344:52356	682411	209	True				
ANR	683255	ShiftExpression	cout << endl		682411	0		<<			
ANR	683256	Identifier	cout		682411	0					
ANR	683257	Identifier	endl		682411	1					
ANR	683258	ExpressionStatement	"cout << ""    --indent-preproc-define  OR  -w\\n"""	1774:1:52359:52406	682411	210	True				
ANR	683259	ShiftExpression	"cout << ""    --indent-preproc-define  OR  -w\\n"""		682411	0		<<			
ANR	683260	Identifier	cout		682411	0					
ANR	683261	PrimaryExpression	"""    --indent-preproc-define  OR  -w\\n"""		682411	1					
ANR	683262	ExpressionStatement	"cout << ""    Indent multi-line preprocessor #define statements.\\n"""	1775:1:52409:52475	682411	211	True				
ANR	683263	ShiftExpression	"cout << ""    Indent multi-line preprocessor #define statements.\\n"""		682411	0		<<			
ANR	683264	Identifier	cout		682411	0					
ANR	683265	PrimaryExpression	"""    Indent multi-line preprocessor #define statements.\\n"""		682411	1					
ANR	683266	ExpressionStatement	cout << endl	1776:1:52478:52490	682411	212	True				
ANR	683267	ShiftExpression	cout << endl		682411	0		<<			
ANR	683268	Identifier	cout		682411	0					
ANR	683269	Identifier	endl		682411	1					
ANR	683270	ExpressionStatement	"cout << ""    --indent-col1-comments  OR  -Y\\n"""	1777:1:52493:52539	682411	213	True				
ANR	683271	ShiftExpression	"cout << ""    --indent-col1-comments  OR  -Y\\n"""		682411	0		<<			
ANR	683272	Identifier	cout		682411	0					
ANR	683273	PrimaryExpression	"""    --indent-col1-comments  OR  -Y\\n"""		682411	1					
ANR	683274	ExpressionStatement	"cout << ""    Indent line comments that start in column one.\\n"""	1778:1:52542:52604	682411	214	True				
ANR	683275	ShiftExpression	"cout << ""    Indent line comments that start in column one.\\n"""		682411	0		<<			
ANR	683276	Identifier	cout		682411	0					
ANR	683277	PrimaryExpression	"""    Indent line comments that start in column one.\\n"""		682411	1					
ANR	683278	ExpressionStatement	cout << endl	1779:1:52607:52619	682411	215	True				
ANR	683279	ShiftExpression	cout << endl		682411	0		<<			
ANR	683280	Identifier	cout		682411	0					
ANR	683281	Identifier	endl		682411	1					
ANR	683282	ExpressionStatement	"cout << ""    --min-conditional-indent=#  OR  -m#\\n"""	1780:1:52622:52673	682411	216	True				
ANR	683283	ShiftExpression	"cout << ""    --min-conditional-indent=#  OR  -m#\\n"""		682411	0		<<			
ANR	683284	Identifier	cout		682411	0					
ANR	683285	PrimaryExpression	"""    --min-conditional-indent=#  OR  -m#\\n"""		682411	1					
ANR	683286	ExpressionStatement	"cout << ""    Indent a minimal # spaces in a continuous conditional\\n"""	1781:1:52676:52745	682411	217	True				
ANR	683287	ShiftExpression	"cout << ""    Indent a minimal # spaces in a continuous conditional\\n"""		682411	0		<<			
ANR	683288	Identifier	cout		682411	0					
ANR	683289	PrimaryExpression	"""    Indent a minimal # spaces in a continuous conditional\\n"""		682411	1					
ANR	683290	ExpressionStatement	"cout << ""    belonging to a conditional header.\\n"""	1782:1:52748:52798	682411	218	True				
ANR	683291	ShiftExpression	"cout << ""    belonging to a conditional header.\\n"""		682411	0		<<			
ANR	683292	Identifier	cout		682411	0					
ANR	683293	PrimaryExpression	"""    belonging to a conditional header.\\n"""		682411	1					
ANR	683294	ExpressionStatement	"cout << ""    The valid values are:\\n"""	1783:1:52801:52838	682411	219	True				
ANR	683295	ShiftExpression	"cout << ""    The valid values are:\\n"""		682411	0		<<			
ANR	683296	Identifier	cout		682411	0					
ANR	683297	PrimaryExpression	"""    The valid values are:\\n"""		682411	1					
ANR	683298	ExpressionStatement	"cout << ""    0 - no minimal indent.\\n"""	1784:1:52841:52879	682411	220	True				
ANR	683299	ShiftExpression	"cout << ""    0 - no minimal indent.\\n"""		682411	0		<<			
ANR	683300	Identifier	cout		682411	0					
ANR	683301	PrimaryExpression	"""    0 - no minimal indent.\\n"""		682411	1					
ANR	683302	ExpressionStatement	"cout << ""    1 - indent at least one additional indent.\\n"""	1785:1:52882:52940	682411	221	True				
ANR	683303	ShiftExpression	"cout << ""    1 - indent at least one additional indent.\\n"""		682411	0		<<			
ANR	683304	Identifier	cout		682411	0					
ANR	683305	PrimaryExpression	"""    1 - indent at least one additional indent.\\n"""		682411	1					
ANR	683306	ExpressionStatement	"cout << ""    2 - indent at least two additional indents.\\n"""	1786:1:52943:53002	682411	222	True				
ANR	683307	ShiftExpression	"cout << ""    2 - indent at least two additional indents.\\n"""		682411	0		<<			
ANR	683308	Identifier	cout		682411	0					
ANR	683309	PrimaryExpression	"""    2 - indent at least two additional indents.\\n"""		682411	1					
ANR	683310	ExpressionStatement	"cout << ""    3 - indent at least one-half an additional indent.\\n"""	1787:1:53005:53071	682411	223	True				
ANR	683311	ShiftExpression	"cout << ""    3 - indent at least one-half an additional indent.\\n"""		682411	0		<<			
ANR	683312	Identifier	cout		682411	0					
ANR	683313	PrimaryExpression	"""    3 - indent at least one-half an additional indent.\\n"""		682411	1					
ANR	683314	ExpressionStatement	"cout << ""    The default value is 2, two additional indents.\\n"""	1788:1:53074:53137	682411	224	True				
ANR	683315	ShiftExpression	"cout << ""    The default value is 2, two additional indents.\\n"""		682411	0		<<			
ANR	683316	Identifier	cout		682411	0					
ANR	683317	PrimaryExpression	"""    The default value is 2, two additional indents.\\n"""		682411	1					
ANR	683318	ExpressionStatement	cout << endl	1789:1:53140:53152	682411	225	True				
ANR	683319	ShiftExpression	cout << endl		682411	0		<<			
ANR	683320	Identifier	cout		682411	0					
ANR	683321	Identifier	endl		682411	1					
ANR	683322	ExpressionStatement	"cout << ""    --max-continuation-indent=#  OR  -M#\\n"""	1790:1:53155:53207	682411	226	True				
ANR	683323	ShiftExpression	"cout << ""    --max-continuation-indent=#  OR  -M#\\n"""		682411	0		<<			
ANR	683324	Identifier	cout		682411	0					
ANR	683325	PrimaryExpression	"""    --max-continuation-indent=#  OR  -M#\\n"""		682411	1					
ANR	683326	ExpressionStatement	"cout << ""    Indent a maximal # spaces in a continuation line,\\n"""	1791:1:53210:53275	682411	227	True				
ANR	683327	ShiftExpression	"cout << ""    Indent a maximal # spaces in a continuation line,\\n"""		682411	0		<<			
ANR	683328	Identifier	cout		682411	0					
ANR	683329	PrimaryExpression	"""    Indent a maximal # spaces in a continuation line,\\n"""		682411	1					
ANR	683330	ExpressionStatement	"cout << ""    relative to the previous line.\\n"""	1792:1:53278:53324	682411	228	True				
ANR	683331	ShiftExpression	"cout << ""    relative to the previous line.\\n"""		682411	0		<<			
ANR	683332	Identifier	cout		682411	0					
ANR	683333	PrimaryExpression	"""    relative to the previous line.\\n"""		682411	1					
ANR	683334	ExpressionStatement	"cout << ""    The valid values are 40 thru 120.\\n"""	1793:1:53327:53376	682411	229	True				
ANR	683335	ShiftExpression	"cout << ""    The valid values are 40 thru 120.\\n"""		682411	0		<<			
ANR	683336	Identifier	cout		682411	0					
ANR	683337	PrimaryExpression	"""    The valid values are 40 thru 120.\\n"""		682411	1					
ANR	683338	ExpressionStatement	"cout << ""    The default value is 40.\\n"""	1794:1:53379:53419	682411	230	True				
ANR	683339	ShiftExpression	"cout << ""    The default value is 40.\\n"""		682411	0		<<			
ANR	683340	Identifier	cout		682411	0					
ANR	683341	PrimaryExpression	"""    The default value is 40.\\n"""		682411	1					
ANR	683342	ExpressionStatement	cout << endl	1795:1:53422:53434	682411	231	True				
ANR	683343	ShiftExpression	cout << endl		682411	0		<<			
ANR	683344	Identifier	cout		682411	0					
ANR	683345	Identifier	endl		682411	1					
ANR	683346	ExpressionStatement	"cout << ""Padding Options:\\n"""	1796:1:53437:53465	682411	232	True				
ANR	683347	ShiftExpression	"cout << ""Padding Options:\\n"""		682411	0		<<			
ANR	683348	Identifier	cout		682411	0					
ANR	683349	PrimaryExpression	"""Padding Options:\\n"""		682411	1					
ANR	683350	ExpressionStatement	"cout << ""----------------\\n"""	1797:1:53468:53496	682411	233	True				
ANR	683351	ShiftExpression	"cout << ""----------------\\n"""		682411	0		<<			
ANR	683352	Identifier	cout		682411	0					
ANR	683353	PrimaryExpression	"""----------------\\n"""		682411	1					
ANR	683354	ExpressionStatement	"cout << ""    --break-blocks  OR  -f\\n"""	1798:1:53499:53537	682411	234	True				
ANR	683355	ShiftExpression	"cout << ""    --break-blocks  OR  -f\\n"""		682411	0		<<			
ANR	683356	Identifier	cout		682411	0					
ANR	683357	PrimaryExpression	"""    --break-blocks  OR  -f\\n"""		682411	1					
ANR	683358	ExpressionStatement	"cout << ""    Insert empty lines around unrelated blocks, labels, classes, ...\\n"""	1799:1:53540:53620	682411	235	True				
ANR	683359	ShiftExpression	"cout << ""    Insert empty lines around unrelated blocks, labels, classes, ...\\n"""		682411	0		<<			
ANR	683360	Identifier	cout		682411	0					
ANR	683361	PrimaryExpression	"""    Insert empty lines around unrelated blocks, labels, classes, ...\\n"""		682411	1					
ANR	683362	ExpressionStatement	cout << endl	1800:1:53623:53635	682411	236	True				
ANR	683363	ShiftExpression	cout << endl		682411	0		<<			
ANR	683364	Identifier	cout		682411	0					
ANR	683365	Identifier	endl		682411	1					
ANR	683366	ExpressionStatement	"cout << ""    --break-blocks=all  OR  -F\\n"""	1801:1:53638:53680	682411	237	True				
ANR	683367	ShiftExpression	"cout << ""    --break-blocks=all  OR  -F\\n"""		682411	0		<<			
ANR	683368	Identifier	cout		682411	0					
ANR	683369	PrimaryExpression	"""    --break-blocks=all  OR  -F\\n"""		682411	1					
ANR	683370	ExpressionStatement	"cout << ""    Like --break-blocks, except also insert empty lines \\n"""	1802:1:53683:53751	682411	238	True				
ANR	683371	ShiftExpression	"cout << ""    Like --break-blocks, except also insert empty lines \\n"""		682411	0		<<			
ANR	683372	Identifier	cout		682411	0					
ANR	683373	PrimaryExpression	"""    Like --break-blocks, except also insert empty lines \\n"""		682411	1					
ANR	683374	ExpressionStatement	"cout << ""    around closing headers (e.g. 'else', 'catch', ...).\\n"""	1803:1:53754:53821	682411	239	True				
ANR	683375	ShiftExpression	"cout << ""    around closing headers (e.g. 'else', 'catch', ...).\\n"""		682411	0		<<			
ANR	683376	Identifier	cout		682411	0					
ANR	683377	PrimaryExpression	"""    around closing headers (e.g. 'else', 'catch', ...).\\n"""		682411	1					
ANR	683378	ExpressionStatement	cout << endl	1804:1:53824:53836	682411	240	True				
ANR	683379	ShiftExpression	cout << endl		682411	0		<<			
ANR	683380	Identifier	cout		682411	0					
ANR	683381	Identifier	endl		682411	1					
ANR	683382	ExpressionStatement	"cout << ""    --pad-oper  OR  -p\\n"""	1805:1:53839:53873	682411	241	True				
ANR	683383	ShiftExpression	"cout << ""    --pad-oper  OR  -p\\n"""		682411	0		<<			
ANR	683384	Identifier	cout		682411	0					
ANR	683385	PrimaryExpression	"""    --pad-oper  OR  -p\\n"""		682411	1					
ANR	683386	ExpressionStatement	"cout << ""    Insert space padding around operators.\\n"""	1806:1:53876:53930	682411	242	True				
ANR	683387	ShiftExpression	"cout << ""    Insert space padding around operators.\\n"""		682411	0		<<			
ANR	683388	Identifier	cout		682411	0					
ANR	683389	PrimaryExpression	"""    Insert space padding around operators.\\n"""		682411	1					
ANR	683390	ExpressionStatement	cout << endl	1807:1:53933:53945	682411	243	True				
ANR	683391	ShiftExpression	cout << endl		682411	0		<<			
ANR	683392	Identifier	cout		682411	0					
ANR	683393	Identifier	endl		682411	1					
ANR	683394	ExpressionStatement	"cout << ""    --pad-comma  OR  -xg\\n"""	1808:1:53948:53984	682411	244	True				
ANR	683395	ShiftExpression	"cout << ""    --pad-comma  OR  -xg\\n"""		682411	0		<<			
ANR	683396	Identifier	cout		682411	0					
ANR	683397	PrimaryExpression	"""    --pad-comma  OR  -xg\\n"""		682411	1					
ANR	683398	ExpressionStatement	"cout << ""    Insert space padding after commas.\\n"""	1809:1:53987:54037	682411	245	True				
ANR	683399	ShiftExpression	"cout << ""    Insert space padding after commas.\\n"""		682411	0		<<			
ANR	683400	Identifier	cout		682411	0					
ANR	683401	PrimaryExpression	"""    Insert space padding after commas.\\n"""		682411	1					
ANR	683402	ExpressionStatement	cout << endl	1810:1:54040:54052	682411	246	True				
ANR	683403	ShiftExpression	cout << endl		682411	0		<<			
ANR	683404	Identifier	cout		682411	0					
ANR	683405	Identifier	endl		682411	1					
ANR	683406	ExpressionStatement	"cout << ""    --pad-paren  OR  -P\\n"""	1811:1:54055:54090	682411	247	True				
ANR	683407	ShiftExpression	"cout << ""    --pad-paren  OR  -P\\n"""		682411	0		<<			
ANR	683408	Identifier	cout		682411	0					
ANR	683409	PrimaryExpression	"""    --pad-paren  OR  -P\\n"""		682411	1					
ANR	683410	ExpressionStatement	"cout << ""    Insert space padding around parenthesis on both the outside\\n"""	1812:1:54093:54168	682411	248	True				
ANR	683411	ShiftExpression	"cout << ""    Insert space padding around parenthesis on both the outside\\n"""		682411	0		<<			
ANR	683412	Identifier	cout		682411	0					
ANR	683413	PrimaryExpression	"""    Insert space padding around parenthesis on both the outside\\n"""		682411	1					
ANR	683414	ExpressionStatement	"cout << ""    and the inside.\\n"""	1813:1:54171:54202	682411	249	True				
ANR	683415	ShiftExpression	"cout << ""    and the inside.\\n"""		682411	0		<<			
ANR	683416	Identifier	cout		682411	0					
ANR	683417	PrimaryExpression	"""    and the inside.\\n"""		682411	1					
ANR	683418	ExpressionStatement	cout << endl	1814:1:54205:54217	682411	250	True				
ANR	683419	ShiftExpression	cout << endl		682411	0		<<			
ANR	683420	Identifier	cout		682411	0					
ANR	683421	Identifier	endl		682411	1					
ANR	683422	ExpressionStatement	"cout << ""    --pad-paren-out  OR  -d\\n"""	1815:1:54220:54259	682411	251	True				
ANR	683423	ShiftExpression	"cout << ""    --pad-paren-out  OR  -d\\n"""		682411	0		<<			
ANR	683424	Identifier	cout		682411	0					
ANR	683425	PrimaryExpression	"""    --pad-paren-out  OR  -d\\n"""		682411	1					
ANR	683426	ExpressionStatement	"cout << ""    Insert space padding around parenthesis on the outside only.\\n"""	1816:1:54262:54338	682411	252	True				
ANR	683427	ShiftExpression	"cout << ""    Insert space padding around parenthesis on the outside only.\\n"""		682411	0		<<			
ANR	683428	Identifier	cout		682411	0					
ANR	683429	PrimaryExpression	"""    Insert space padding around parenthesis on the outside only.\\n"""		682411	1					
ANR	683430	ExpressionStatement	cout << endl	1817:1:54341:54353	682411	253	True				
ANR	683431	ShiftExpression	cout << endl		682411	0		<<			
ANR	683432	Identifier	cout		682411	0					
ANR	683433	Identifier	endl		682411	1					
ANR	683434	ExpressionStatement	"cout << ""    --pad-first-paren-out  OR  -xd\\n"""	1818:1:54356:54402	682411	254	True				
ANR	683435	ShiftExpression	"cout << ""    --pad-first-paren-out  OR  -xd\\n"""		682411	0		<<			
ANR	683436	Identifier	cout		682411	0					
ANR	683437	PrimaryExpression	"""    --pad-first-paren-out  OR  -xd\\n"""		682411	1					
ANR	683438	ExpressionStatement	"cout << ""    Insert space padding around first parenthesis in a series on\\n"""	1819:1:54405:54481	682411	255	True				
ANR	683439	ShiftExpression	"cout << ""    Insert space padding around first parenthesis in a series on\\n"""		682411	0		<<			
ANR	683440	Identifier	cout		682411	0					
ANR	683441	PrimaryExpression	"""    Insert space padding around first parenthesis in a series on\\n"""		682411	1					
ANR	683442	ExpressionStatement	"cout << ""    the outside only.\\n"""	1820:1:54484:54517	682411	256	True				
ANR	683443	ShiftExpression	"cout << ""    the outside only.\\n"""		682411	0		<<			
ANR	683444	Identifier	cout		682411	0					
ANR	683445	PrimaryExpression	"""    the outside only.\\n"""		682411	1					
ANR	683446	ExpressionStatement	cout << endl	1821:1:54520:54532	682411	257	True				
ANR	683447	ShiftExpression	cout << endl		682411	0		<<			
ANR	683448	Identifier	cout		682411	0					
ANR	683449	Identifier	endl		682411	1					
ANR	683450	ExpressionStatement	"cout << ""    --pad-paren-in  OR  -D\\n"""	1822:1:54535:54573	682411	258	True				
ANR	683451	ShiftExpression	"cout << ""    --pad-paren-in  OR  -D\\n"""		682411	0		<<			
ANR	683452	Identifier	cout		682411	0					
ANR	683453	PrimaryExpression	"""    --pad-paren-in  OR  -D\\n"""		682411	1					
ANR	683454	ExpressionStatement	"cout << ""    Insert space padding around parenthesis on the inside only.\\n"""	1823:1:54576:54651	682411	259	True				
ANR	683455	ShiftExpression	"cout << ""    Insert space padding around parenthesis on the inside only.\\n"""		682411	0		<<			
ANR	683456	Identifier	cout		682411	0					
ANR	683457	PrimaryExpression	"""    Insert space padding around parenthesis on the inside only.\\n"""		682411	1					
ANR	683458	ExpressionStatement	cout << endl	1824:1:54654:54666	682411	260	True				
ANR	683459	ShiftExpression	cout << endl		682411	0		<<			
ANR	683460	Identifier	cout		682411	0					
ANR	683461	Identifier	endl		682411	1					
ANR	683462	ExpressionStatement	"cout << ""    --pad-header  OR  -H\\n"""	1825:1:54669:54705	682411	261	True				
ANR	683463	ShiftExpression	"cout << ""    --pad-header  OR  -H\\n"""		682411	0		<<			
ANR	683464	Identifier	cout		682411	0					
ANR	683465	PrimaryExpression	"""    --pad-header  OR  -H\\n"""		682411	1					
ANR	683466	ExpressionStatement	"cout << ""    Insert space padding after paren headers (e.g. 'if', 'for'...).\\n"""	1826:1:54708:54787	682411	262	True				
ANR	683467	ShiftExpression	"cout << ""    Insert space padding after paren headers (e.g. 'if', 'for'...).\\n"""		682411	0		<<			
ANR	683468	Identifier	cout		682411	0					
ANR	683469	PrimaryExpression	"""    Insert space padding after paren headers (e.g. 'if', 'for'...).\\n"""		682411	1					
ANR	683470	ExpressionStatement	cout << endl	1827:1:54790:54802	682411	263	True				
ANR	683471	ShiftExpression	cout << endl		682411	0		<<			
ANR	683472	Identifier	cout		682411	0					
ANR	683473	Identifier	endl		682411	1					
ANR	683474	ExpressionStatement	"cout << ""    --unpad-paren  OR  -U\\n"""	1828:1:54805:54842	682411	264	True				
ANR	683475	ShiftExpression	"cout << ""    --unpad-paren  OR  -U\\n"""		682411	0		<<			
ANR	683476	Identifier	cout		682411	0					
ANR	683477	PrimaryExpression	"""    --unpad-paren  OR  -U\\n"""		682411	1					
ANR	683478	ExpressionStatement	"cout << ""    Remove unnecessary space padding around parenthesis. This\\n"""	1829:1:54845:54918	682411	265	True				
ANR	683479	ShiftExpression	"cout << ""    Remove unnecessary space padding around parenthesis. This\\n"""		682411	0		<<			
ANR	683480	Identifier	cout		682411	0					
ANR	683481	PrimaryExpression	"""    Remove unnecessary space padding around parenthesis. This\\n"""		682411	1					
ANR	683482	ExpressionStatement	"cout << ""    can be used in combination with the 'pad' options above.\\n"""	1830:1:54921:54993	682411	266	True				
ANR	683483	ShiftExpression	"cout << ""    can be used in combination with the 'pad' options above.\\n"""		682411	0		<<			
ANR	683484	Identifier	cout		682411	0					
ANR	683485	PrimaryExpression	"""    can be used in combination with the 'pad' options above.\\n"""		682411	1					
ANR	683486	ExpressionStatement	cout << endl	1831:1:54996:55008	682411	267	True				
ANR	683487	ShiftExpression	cout << endl		682411	0		<<			
ANR	683488	Identifier	cout		682411	0					
ANR	683489	Identifier	endl		682411	1					
ANR	683490	ExpressionStatement	"cout << ""    --delete-empty-lines  OR  -xd\\n"""	1832:1:55011:55056	682411	268	True				
ANR	683491	ShiftExpression	"cout << ""    --delete-empty-lines  OR  -xd\\n"""		682411	0		<<			
ANR	683492	Identifier	cout		682411	0					
ANR	683493	PrimaryExpression	"""    --delete-empty-lines  OR  -xd\\n"""		682411	1					
ANR	683494	ExpressionStatement	"cout << ""    Delete empty lines within a function or method.\\n"""	1833:1:55059:55122	682411	269	True				
ANR	683495	ShiftExpression	"cout << ""    Delete empty lines within a function or method.\\n"""		682411	0		<<			
ANR	683496	Identifier	cout		682411	0					
ANR	683497	PrimaryExpression	"""    Delete empty lines within a function or method.\\n"""		682411	1					
ANR	683498	ExpressionStatement	"cout << ""    It will NOT delete lines added by the break-blocks options.\\n"""	1834:1:55125:55200	682411	270	True				
ANR	683499	ShiftExpression	"cout << ""    It will NOT delete lines added by the break-blocks options.\\n"""		682411	0		<<			
ANR	683500	Identifier	cout		682411	0					
ANR	683501	PrimaryExpression	"""    It will NOT delete lines added by the break-blocks options.\\n"""		682411	1					
ANR	683502	ExpressionStatement	cout << endl	1835:1:55203:55215	682411	271	True				
ANR	683503	ShiftExpression	cout << endl		682411	0		<<			
ANR	683504	Identifier	cout		682411	0					
ANR	683505	Identifier	endl		682411	1					
ANR	683506	ExpressionStatement	"cout << ""    --fill-empty-lines  OR  -E\\n"""	1836:1:55218:55260	682411	272	True				
ANR	683507	ShiftExpression	"cout << ""    --fill-empty-lines  OR  -E\\n"""		682411	0		<<			
ANR	683508	Identifier	cout		682411	0					
ANR	683509	PrimaryExpression	"""    --fill-empty-lines  OR  -E\\n"""		682411	1					
ANR	683510	ExpressionStatement	"cout << ""    Fill empty lines with the white space of their\\n"""	1837:1:55263:55325	682411	273	True				
ANR	683511	ShiftExpression	"cout << ""    Fill empty lines with the white space of their\\n"""		682411	0		<<			
ANR	683512	Identifier	cout		682411	0					
ANR	683513	PrimaryExpression	"""    Fill empty lines with the white space of their\\n"""		682411	1					
ANR	683514	ExpressionStatement	"cout << ""    previous lines.\\n"""	1838:1:55328:55359	682411	274	True				
ANR	683515	ShiftExpression	"cout << ""    previous lines.\\n"""		682411	0		<<			
ANR	683516	Identifier	cout		682411	0					
ANR	683517	PrimaryExpression	"""    previous lines.\\n"""		682411	1					
ANR	683518	ExpressionStatement	cout << endl	1839:1:55362:55374	682411	275	True				
ANR	683519	ShiftExpression	cout << endl		682411	0		<<			
ANR	683520	Identifier	cout		682411	0					
ANR	683521	Identifier	endl		682411	1					
ANR	683522	ExpressionStatement	"cout << ""    --align-pointer=type    OR  -k1\\n"""	1840:1:55377:55424	682411	276	True				
ANR	683523	ShiftExpression	"cout << ""    --align-pointer=type    OR  -k1\\n"""		682411	0		<<			
ANR	683524	Identifier	cout		682411	0					
ANR	683525	PrimaryExpression	"""    --align-pointer=type    OR  -k1\\n"""		682411	1					
ANR	683526	ExpressionStatement	"cout << ""    --align-pointer=middle  OR  -k2\\n"""	1841:1:55427:55474	682411	277	True				
ANR	683527	ShiftExpression	"cout << ""    --align-pointer=middle  OR  -k2\\n"""		682411	0		<<			
ANR	683528	Identifier	cout		682411	0					
ANR	683529	PrimaryExpression	"""    --align-pointer=middle  OR  -k2\\n"""		682411	1					
ANR	683530	ExpressionStatement	"cout << ""    --align-pointer=name    OR  -k3\\n"""	1842:1:55477:55524	682411	278	True				
ANR	683531	ShiftExpression	"cout << ""    --align-pointer=name    OR  -k3\\n"""		682411	0		<<			
ANR	683532	Identifier	cout		682411	0					
ANR	683533	PrimaryExpression	"""    --align-pointer=name    OR  -k3\\n"""		682411	1					
ANR	683534	ExpressionStatement	"cout << ""    Attach a pointer or reference operator (*, &, or ^) to either\\n"""	1843:1:55527:55604	682411	279	True				
ANR	683535	ShiftExpression	"cout << ""    Attach a pointer or reference operator (*, &, or ^) to either\\n"""		682411	0		<<			
ANR	683536	Identifier	cout		682411	0					
ANR	683537	PrimaryExpression	"""    Attach a pointer or reference operator (*, &, or ^) to either\\n"""		682411	1					
ANR	683538	ExpressionStatement	"cout << ""    the operator type (left), middle, or operator name (right).\\n"""	1844:1:55607:55682	682411	280	True				
ANR	683539	ShiftExpression	"cout << ""    the operator type (left), middle, or operator name (right).\\n"""		682411	0		<<			
ANR	683540	Identifier	cout		682411	0					
ANR	683541	PrimaryExpression	"""    the operator type (left), middle, or operator name (right).\\n"""		682411	1					
ANR	683542	ExpressionStatement	"cout << ""    To align the reference separately use --align-reference.\\n"""	1845:1:55685:55757	682411	281	True				
ANR	683543	ShiftExpression	"cout << ""    To align the reference separately use --align-reference.\\n"""		682411	0		<<			
ANR	683544	Identifier	cout		682411	0					
ANR	683545	PrimaryExpression	"""    To align the reference separately use --align-reference.\\n"""		682411	1					
ANR	683546	ExpressionStatement	cout << endl	1846:1:55760:55772	682411	282	True				
ANR	683547	ShiftExpression	cout << endl		682411	0		<<			
ANR	683548	Identifier	cout		682411	0					
ANR	683549	Identifier	endl		682411	1					
ANR	683550	ExpressionStatement	"cout << ""    --align-reference=none    OR  -W0\\n"""	1847:1:55775:55824	682411	283	True				
ANR	683551	ShiftExpression	"cout << ""    --align-reference=none    OR  -W0\\n"""		682411	0		<<			
ANR	683552	Identifier	cout		682411	0					
ANR	683553	PrimaryExpression	"""    --align-reference=none    OR  -W0\\n"""		682411	1					
ANR	683554	ExpressionStatement	"cout << ""    --align-reference=type    OR  -W1\\n"""	1848:1:55827:55876	682411	284	True				
ANR	683555	ShiftExpression	"cout << ""    --align-reference=type    OR  -W1\\n"""		682411	0		<<			
ANR	683556	Identifier	cout		682411	0					
ANR	683557	PrimaryExpression	"""    --align-reference=type    OR  -W1\\n"""		682411	1					
ANR	683558	ExpressionStatement	"cout << ""    --align-reference=middle  OR  -W2\\n"""	1849:1:55879:55928	682411	285	True				
ANR	683559	ShiftExpression	"cout << ""    --align-reference=middle  OR  -W2\\n"""		682411	0		<<			
ANR	683560	Identifier	cout		682411	0					
ANR	683561	PrimaryExpression	"""    --align-reference=middle  OR  -W2\\n"""		682411	1					
ANR	683562	ExpressionStatement	"cout << ""    --align-reference=name    OR  -W3\\n"""	1850:1:55931:55980	682411	286	True				
ANR	683563	ShiftExpression	"cout << ""    --align-reference=name    OR  -W3\\n"""		682411	0		<<			
ANR	683564	Identifier	cout		682411	0					
ANR	683565	PrimaryExpression	"""    --align-reference=name    OR  -W3\\n"""		682411	1					
ANR	683566	ExpressionStatement	"cout << ""    Attach a reference operator (&) to either\\n"""	1851:1:55983:56040	682411	287	True				
ANR	683567	ShiftExpression	"cout << ""    Attach a reference operator (&) to either\\n"""		682411	0		<<			
ANR	683568	Identifier	cout		682411	0					
ANR	683569	PrimaryExpression	"""    Attach a reference operator (&) to either\\n"""		682411	1					
ANR	683570	ExpressionStatement	"cout << ""    the operator type (left), middle, or operator name (right).\\n"""	1852:1:56043:56118	682411	288	True				
ANR	683571	ShiftExpression	"cout << ""    the operator type (left), middle, or operator name (right).\\n"""		682411	0		<<			
ANR	683572	Identifier	cout		682411	0					
ANR	683573	PrimaryExpression	"""    the operator type (left), middle, or operator name (right).\\n"""		682411	1					
ANR	683574	ExpressionStatement	"cout << ""    If not set, follow pointer alignment.\\n"""	1853:1:56121:56174	682411	289	True				
ANR	683575	ShiftExpression	"cout << ""    If not set, follow pointer alignment.\\n"""		682411	0		<<			
ANR	683576	Identifier	cout		682411	0					
ANR	683577	PrimaryExpression	"""    If not set, follow pointer alignment.\\n"""		682411	1					
ANR	683578	ExpressionStatement	cout << endl	1854:1:56177:56189	682411	290	True				
ANR	683579	ShiftExpression	cout << endl		682411	0		<<			
ANR	683580	Identifier	cout		682411	0					
ANR	683581	Identifier	endl		682411	1					
ANR	683582	ExpressionStatement	"cout << ""Formatting Options:\\n"""	1855:1:56192:56223	682411	291	True				
ANR	683583	ShiftExpression	"cout << ""Formatting Options:\\n"""		682411	0		<<			
ANR	683584	Identifier	cout		682411	0					
ANR	683585	PrimaryExpression	"""Formatting Options:\\n"""		682411	1					
ANR	683586	ExpressionStatement	"cout << ""-------------------\\n"""	1856:1:56226:56257	682411	292	True				
ANR	683587	ShiftExpression	"cout << ""-------------------\\n"""		682411	0		<<			
ANR	683588	Identifier	cout		682411	0					
ANR	683589	PrimaryExpression	"""-------------------\\n"""		682411	1					
ANR	683590	ExpressionStatement	"cout << ""    --break-closing-braces  OR  -y\\n"""	1857:1:56260:56306	682411	293	True				
ANR	683591	ShiftExpression	"cout << ""    --break-closing-braces  OR  -y\\n"""		682411	0		<<			
ANR	683592	Identifier	cout		682411	0					
ANR	683593	PrimaryExpression	"""    --break-closing-braces  OR  -y\\n"""		682411	1					
ANR	683594	ExpressionStatement	"cout << ""    Break braces before closing headers (e.g. 'else', 'catch', ...).\\n"""	1858:1:56309:56389	682411	294	True				
ANR	683595	ShiftExpression	"cout << ""    Break braces before closing headers (e.g. 'else', 'catch', ...).\\n"""		682411	0		<<			
ANR	683596	Identifier	cout		682411	0					
ANR	683597	PrimaryExpression	"""    Break braces before closing headers (e.g. 'else', 'catch', ...).\\n"""		682411	1					
ANR	683598	ExpressionStatement	"cout << ""    Use with --style=java, --style=kr, --style=stroustrup,\\n"""	1859:1:56392:56462	682411	295	True				
ANR	683599	ShiftExpression	"cout << ""    Use with --style=java, --style=kr, --style=stroustrup,\\n"""		682411	0		<<			
ANR	683600	Identifier	cout		682411	0					
ANR	683601	PrimaryExpression	"""    Use with --style=java, --style=kr, --style=stroustrup,\\n"""		682411	1					
ANR	683602	ExpressionStatement	"cout << ""    --style=linux, or --style=1tbs.\\n"""	1860:1:56465:56512	682411	296	True				
ANR	683603	ShiftExpression	"cout << ""    --style=linux, or --style=1tbs.\\n"""		682411	0		<<			
ANR	683604	Identifier	cout		682411	0					
ANR	683605	PrimaryExpression	"""    --style=linux, or --style=1tbs.\\n"""		682411	1					
ANR	683606	ExpressionStatement	cout << endl	1861:1:56515:56527	682411	297	True				
ANR	683607	ShiftExpression	cout << endl		682411	0		<<			
ANR	683608	Identifier	cout		682411	0					
ANR	683609	Identifier	endl		682411	1					
ANR	683610	ExpressionStatement	"cout << ""    --break-elseifs  OR  -e\\n"""	1862:1:56530:56569	682411	298	True				
ANR	683611	ShiftExpression	"cout << ""    --break-elseifs  OR  -e\\n"""		682411	0		<<			
ANR	683612	Identifier	cout		682411	0					
ANR	683613	PrimaryExpression	"""    --break-elseifs  OR  -e\\n"""		682411	1					
ANR	683614	ExpressionStatement	"cout << ""    Break 'else if()' statements into two different lines.\\n"""	1863:1:56572:56642	682411	299	True				
ANR	683615	ShiftExpression	"cout << ""    Break 'else if()' statements into two different lines.\\n"""		682411	0		<<			
ANR	683616	Identifier	cout		682411	0					
ANR	683617	PrimaryExpression	"""    Break 'else if()' statements into two different lines.\\n"""		682411	1					
ANR	683618	ExpressionStatement	cout << endl	1864:1:56645:56657	682411	300	True				
ANR	683619	ShiftExpression	cout << endl		682411	0		<<			
ANR	683620	Identifier	cout		682411	0					
ANR	683621	Identifier	endl		682411	1					
ANR	683622	ExpressionStatement	"cout << ""    --break-one-line-headers  OR  -xb\\n"""	1865:1:56660:56709	682411	301	True				
ANR	683623	ShiftExpression	"cout << ""    --break-one-line-headers  OR  -xb\\n"""		682411	0		<<			
ANR	683624	Identifier	cout		682411	0					
ANR	683625	PrimaryExpression	"""    --break-one-line-headers  OR  -xb\\n"""		682411	1					
ANR	683626	ExpressionStatement	"cout << ""    Break one line headers (e.g. 'if', 'while', 'else', ...) from a\\n"""	1866:1:56712:56791	682411	302	True				
ANR	683627	ShiftExpression	"cout << ""    Break one line headers (e.g. 'if', 'while', 'else', ...) from a\\n"""		682411	0		<<			
ANR	683628	Identifier	cout		682411	0					
ANR	683629	PrimaryExpression	"""    Break one line headers (e.g. 'if', 'while', 'else', ...) from a\\n"""		682411	1					
ANR	683630	ExpressionStatement	"cout << ""    statement residing on the same line.\\n"""	1867:1:56794:56846	682411	303	True				
ANR	683631	ShiftExpression	"cout << ""    statement residing on the same line.\\n"""		682411	0		<<			
ANR	683632	Identifier	cout		682411	0					
ANR	683633	PrimaryExpression	"""    statement residing on the same line.\\n"""		682411	1					
ANR	683634	ExpressionStatement	cout << endl	1868:1:56849:56861	682411	304	True				
ANR	683635	ShiftExpression	cout << endl		682411	0		<<			
ANR	683636	Identifier	cout		682411	0					
ANR	683637	Identifier	endl		682411	1					
ANR	683638	ExpressionStatement	"cout << ""    --add-braces  OR  -j\\n"""	1869:1:56864:56900	682411	305	True				
ANR	683639	ShiftExpression	"cout << ""    --add-braces  OR  -j\\n"""		682411	0		<<			
ANR	683640	Identifier	cout		682411	0					
ANR	683641	PrimaryExpression	"""    --add-braces  OR  -j\\n"""		682411	1					
ANR	683642	ExpressionStatement	"cout << ""    Add braces to unbraced one line conditional statements.\\n"""	1870:1:56903:56974	682411	306	True				
ANR	683643	ShiftExpression	"cout << ""    Add braces to unbraced one line conditional statements.\\n"""		682411	0		<<			
ANR	683644	Identifier	cout		682411	0					
ANR	683645	PrimaryExpression	"""    Add braces to unbraced one line conditional statements.\\n"""		682411	1					
ANR	683646	ExpressionStatement	cout << endl	1871:1:56977:56989	682411	307	True				
ANR	683647	ShiftExpression	cout << endl		682411	0		<<			
ANR	683648	Identifier	cout		682411	0					
ANR	683649	Identifier	endl		682411	1					
ANR	683650	ExpressionStatement	"cout << ""    --add-one-line-braces  OR  -J\\n"""	1872:1:56992:57037	682411	308	True				
ANR	683651	ShiftExpression	"cout << ""    --add-one-line-braces  OR  -J\\n"""		682411	0		<<			
ANR	683652	Identifier	cout		682411	0					
ANR	683653	PrimaryExpression	"""    --add-one-line-braces  OR  -J\\n"""		682411	1					
ANR	683654	ExpressionStatement	"cout << ""    Add one line braces to unbraced one line conditional\\n"""	1873:1:57040:57108	682411	309	True				
ANR	683655	ShiftExpression	"cout << ""    Add one line braces to unbraced one line conditional\\n"""		682411	0		<<			
ANR	683656	Identifier	cout		682411	0					
ANR	683657	PrimaryExpression	"""    Add one line braces to unbraced one line conditional\\n"""		682411	1					
ANR	683658	ExpressionStatement	"cout << ""    statements.\\n"""	1874:1:57111:57138	682411	310	True				
ANR	683659	ShiftExpression	"cout << ""    statements.\\n"""		682411	0		<<			
ANR	683660	Identifier	cout		682411	0					
ANR	683661	PrimaryExpression	"""    statements.\\n"""		682411	1					
ANR	683662	ExpressionStatement	cout << endl	1875:1:57141:57153	682411	311	True				
ANR	683663	ShiftExpression	cout << endl		682411	0		<<			
ANR	683664	Identifier	cout		682411	0					
ANR	683665	Identifier	endl		682411	1					
ANR	683666	ExpressionStatement	"cout << ""    --remove-braces  OR  -xj\\n"""	1876:1:57156:57196	682411	312	True				
ANR	683667	ShiftExpression	"cout << ""    --remove-braces  OR  -xj\\n"""		682411	0		<<			
ANR	683668	Identifier	cout		682411	0					
ANR	683669	PrimaryExpression	"""    --remove-braces  OR  -xj\\n"""		682411	1					
ANR	683670	ExpressionStatement	"cout << ""    Remove braces from a braced one line conditional statements.\\n"""	1877:1:57199:57275	682411	313	True				
ANR	683671	ShiftExpression	"cout << ""    Remove braces from a braced one line conditional statements.\\n"""		682411	0		<<			
ANR	683672	Identifier	cout		682411	0					
ANR	683673	PrimaryExpression	"""    Remove braces from a braced one line conditional statements.\\n"""		682411	1					
ANR	683674	ExpressionStatement	cout << endl	1878:1:57278:57290	682411	314	True				
ANR	683675	ShiftExpression	cout << endl		682411	0		<<			
ANR	683676	Identifier	cout		682411	0					
ANR	683677	Identifier	endl		682411	1					
ANR	683678	ExpressionStatement	"cout << ""    --keep-one-line-blocks  OR  -O\\n"""	1879:1:57293:57339	682411	315	True				
ANR	683679	ShiftExpression	"cout << ""    --keep-one-line-blocks  OR  -O\\n"""		682411	0		<<			
ANR	683680	Identifier	cout		682411	0					
ANR	683681	PrimaryExpression	"""    --keep-one-line-blocks  OR  -O\\n"""		682411	1					
ANR	683682	ExpressionStatement	"cout << ""    Don't break blocks residing completely on one line.\\n"""	1880:1:57342:57409	682411	316	True				
ANR	683683	ShiftExpression	"cout << ""    Don't break blocks residing completely on one line.\\n"""		682411	0		<<			
ANR	683684	Identifier	cout		682411	0					
ANR	683685	PrimaryExpression	"""    Don't break blocks residing completely on one line.\\n"""		682411	1					
ANR	683686	ExpressionStatement	cout << endl	1881:1:57412:57424	682411	317	True				
ANR	683687	ShiftExpression	cout << endl		682411	0		<<			
ANR	683688	Identifier	cout		682411	0					
ANR	683689	Identifier	endl		682411	1					
ANR	683690	ExpressionStatement	"cout << ""    --keep-one-line-statements  OR  -o\\n"""	1882:1:57427:57477	682411	318	True				
ANR	683691	ShiftExpression	"cout << ""    --keep-one-line-statements  OR  -o\\n"""		682411	0		<<			
ANR	683692	Identifier	cout		682411	0					
ANR	683693	PrimaryExpression	"""    --keep-one-line-statements  OR  -o\\n"""		682411	1					
ANR	683694	ExpressionStatement	"cout << ""    Don't break lines containing multiple statements into\\n"""	1883:1:57480:57549	682411	319	True				
ANR	683695	ShiftExpression	"cout << ""    Don't break lines containing multiple statements into\\n"""		682411	0		<<			
ANR	683696	Identifier	cout		682411	0					
ANR	683697	PrimaryExpression	"""    Don't break lines containing multiple statements into\\n"""		682411	1					
ANR	683698	ExpressionStatement	"cout << ""    multiple single-statement lines.\\n"""	1884:1:57552:57600	682411	320	True				
ANR	683699	ShiftExpression	"cout << ""    multiple single-statement lines.\\n"""		682411	0		<<			
ANR	683700	Identifier	cout		682411	0					
ANR	683701	PrimaryExpression	"""    multiple single-statement lines.\\n"""		682411	1					
ANR	683702	ExpressionStatement	cout << endl	1885:1:57603:57615	682411	321	True				
ANR	683703	ShiftExpression	cout << endl		682411	0		<<			
ANR	683704	Identifier	cout		682411	0					
ANR	683705	Identifier	endl		682411	1					
ANR	683706	ExpressionStatement	"cout << ""    --convert-tabs  OR  -c\\n"""	1886:1:57618:57656	682411	322	True				
ANR	683707	ShiftExpression	"cout << ""    --convert-tabs  OR  -c\\n"""		682411	0		<<			
ANR	683708	Identifier	cout		682411	0					
ANR	683709	PrimaryExpression	"""    --convert-tabs  OR  -c\\n"""		682411	1					
ANR	683710	ExpressionStatement	"cout << ""    Convert tabs to the appropriate number of spaces.\\n"""	1887:1:57659:57724	682411	323	True				
ANR	683711	ShiftExpression	"cout << ""    Convert tabs to the appropriate number of spaces.\\n"""		682411	0		<<			
ANR	683712	Identifier	cout		682411	0					
ANR	683713	PrimaryExpression	"""    Convert tabs to the appropriate number of spaces.\\n"""		682411	1					
ANR	683714	ExpressionStatement	cout << endl	1888:1:57727:57739	682411	324	True				
ANR	683715	ShiftExpression	cout << endl		682411	0		<<			
ANR	683716	Identifier	cout		682411	0					
ANR	683717	Identifier	endl		682411	1					
ANR	683718	ExpressionStatement	"cout << ""    --close-templates  OR  -xy\\n"""	1889:1:57742:57784	682411	325	True				
ANR	683719	ShiftExpression	"cout << ""    --close-templates  OR  -xy\\n"""		682411	0		<<			
ANR	683720	Identifier	cout		682411	0					
ANR	683721	PrimaryExpression	"""    --close-templates  OR  -xy\\n"""		682411	1					
ANR	683722	ExpressionStatement	"cout << ""    Close ending angle brackets on template definitions.\\n"""	1890:1:57787:57855	682411	326	True				
ANR	683723	ShiftExpression	"cout << ""    Close ending angle brackets on template definitions.\\n"""		682411	0		<<			
ANR	683724	Identifier	cout		682411	0					
ANR	683725	PrimaryExpression	"""    Close ending angle brackets on template definitions.\\n"""		682411	1					
ANR	683726	ExpressionStatement	cout << endl	1891:1:57858:57870	682411	327	True				
ANR	683727	ShiftExpression	cout << endl		682411	0		<<			
ANR	683728	Identifier	cout		682411	0					
ANR	683729	Identifier	endl		682411	1					
ANR	683730	ExpressionStatement	"cout << ""    --remove-comment-prefix  OR  -xp\\n"""	1892:1:57873:57921	682411	328	True				
ANR	683731	ShiftExpression	"cout << ""    --remove-comment-prefix  OR  -xp\\n"""		682411	0		<<			
ANR	683732	Identifier	cout		682411	0					
ANR	683733	PrimaryExpression	"""    --remove-comment-prefix  OR  -xp\\n"""		682411	1					
ANR	683734	ExpressionStatement	"cout << ""    Remove the leading '*' prefix on multi-line comments and\\n"""	1893:1:57924:57996	682411	329	True				
ANR	683735	ShiftExpression	"cout << ""    Remove the leading '*' prefix on multi-line comments and\\n"""		682411	0		<<			
ANR	683736	Identifier	cout		682411	0					
ANR	683737	PrimaryExpression	"""    Remove the leading '*' prefix on multi-line comments and\\n"""		682411	1					
ANR	683738	ExpressionStatement	"cout << ""    indent the comment text one indent.\\n"""	1894:1:57999:58050	682411	330	True				
ANR	683739	ShiftExpression	"cout << ""    indent the comment text one indent.\\n"""		682411	0		<<			
ANR	683740	Identifier	cout		682411	0					
ANR	683741	PrimaryExpression	"""    indent the comment text one indent.\\n"""		682411	1					
ANR	683742	ExpressionStatement	cout << endl	1895:1:58053:58065	682411	331	True				
ANR	683743	ShiftExpression	cout << endl		682411	0		<<			
ANR	683744	Identifier	cout		682411	0					
ANR	683745	Identifier	endl		682411	1					
ANR	683746	ExpressionStatement	"cout << ""    --max-code-length=#    OR  -xC#\\n"""	1896:1:58068:58115	682411	332	True				
ANR	683747	ShiftExpression	"cout << ""    --max-code-length=#    OR  -xC#\\n"""		682411	0		<<			
ANR	683748	Identifier	cout		682411	0					
ANR	683749	PrimaryExpression	"""    --max-code-length=#    OR  -xC#\\n"""		682411	1					
ANR	683750	ExpressionStatement	"cout << ""    --break-after-logical  OR  -xL\\n"""	1897:1:58118:58164	682411	333	True				
ANR	683751	ShiftExpression	"cout << ""    --break-after-logical  OR  -xL\\n"""		682411	0		<<			
ANR	683752	Identifier	cout		682411	0					
ANR	683753	PrimaryExpression	"""    --break-after-logical  OR  -xL\\n"""		682411	1					
ANR	683754	ExpressionStatement	"cout << ""    max-code-length=# will break the line if it exceeds more than\\n"""	1898:1:58167:58244	682411	334	True				
ANR	683755	ShiftExpression	"cout << ""    max-code-length=# will break the line if it exceeds more than\\n"""		682411	0		<<			
ANR	683756	Identifier	cout		682411	0					
ANR	683757	PrimaryExpression	"""    max-code-length=# will break the line if it exceeds more than\\n"""		682411	1					
ANR	683758	ExpressionStatement	"cout << ""    # characters. The valid values are 50 thru 200.\\n"""	1899:1:58247:58310	682411	335	True				
ANR	683759	ShiftExpression	"cout << ""    # characters. The valid values are 50 thru 200.\\n"""		682411	0		<<			
ANR	683760	Identifier	cout		682411	0					
ANR	683761	PrimaryExpression	"""    # characters. The valid values are 50 thru 200.\\n"""		682411	1					
ANR	683762	ExpressionStatement	"cout << ""    If the line contains logical conditionals they will be placed\\n"""	1900:1:58313:58390	682411	336	True				
ANR	683763	ShiftExpression	"cout << ""    If the line contains logical conditionals they will be placed\\n"""		682411	0		<<			
ANR	683764	Identifier	cout		682411	0					
ANR	683765	PrimaryExpression	"""    If the line contains logical conditionals they will be placed\\n"""		682411	1					
ANR	683766	ExpressionStatement	"cout << ""    first on the new line. The option break-after-logical will\\n"""	1901:1:58393:58467	682411	337	True				
ANR	683767	ShiftExpression	"cout << ""    first on the new line. The option break-after-logical will\\n"""		682411	0		<<			
ANR	683768	Identifier	cout		682411	0					
ANR	683769	PrimaryExpression	"""    first on the new line. The option break-after-logical will\\n"""		682411	1					
ANR	683770	ExpressionStatement	"cout << ""    cause the logical conditional to be placed last on the\\n"""	1902:1:58470:58540	682411	338	True				
ANR	683771	ShiftExpression	"cout << ""    cause the logical conditional to be placed last on the\\n"""		682411	0		<<			
ANR	683772	Identifier	cout		682411	0					
ANR	683773	PrimaryExpression	"""    cause the logical conditional to be placed last on the\\n"""		682411	1					
ANR	683774	ExpressionStatement	"cout << ""    previous line.\\n"""	1903:1:58543:58573	682411	339	True				
ANR	683775	ShiftExpression	"cout << ""    previous line.\\n"""		682411	0		<<			
ANR	683776	Identifier	cout		682411	0					
ANR	683777	PrimaryExpression	"""    previous line.\\n"""		682411	1					
ANR	683778	ExpressionStatement	cout << endl	1904:1:58576:58588	682411	340	True				
ANR	683779	ShiftExpression	cout << endl		682411	0		<<			
ANR	683780	Identifier	cout		682411	0					
ANR	683781	Identifier	endl		682411	1					
ANR	683782	ExpressionStatement	"cout << ""    --mode=c\\n"""	1905:1:58591:58615	682411	341	True				
ANR	683783	ShiftExpression	"cout << ""    --mode=c\\n"""		682411	0		<<			
ANR	683784	Identifier	cout		682411	0					
ANR	683785	PrimaryExpression	"""    --mode=c\\n"""		682411	1					
ANR	683786	ExpressionStatement	"cout << ""    Indent a C or C++ source file (this is the default).\\n"""	1906:1:58618:58686	682411	342	True				
ANR	683787	ShiftExpression	"cout << ""    Indent a C or C++ source file (this is the default).\\n"""		682411	0		<<			
ANR	683788	Identifier	cout		682411	0					
ANR	683789	PrimaryExpression	"""    Indent a C or C++ source file (this is the default).\\n"""		682411	1					
ANR	683790	ExpressionStatement	cout << endl	1907:1:58689:58701	682411	343	True				
ANR	683791	ShiftExpression	cout << endl		682411	0		<<			
ANR	683792	Identifier	cout		682411	0					
ANR	683793	Identifier	endl		682411	1					
ANR	683794	ExpressionStatement	"cout << ""    --mode=java\\n"""	1908:1:58704:58731	682411	344	True				
ANR	683795	ShiftExpression	"cout << ""    --mode=java\\n"""		682411	0		<<			
ANR	683796	Identifier	cout		682411	0					
ANR	683797	PrimaryExpression	"""    --mode=java\\n"""		682411	1					
ANR	683798	ExpressionStatement	"cout << ""    Indent a Java source file.\\n"""	1909:1:58734:58776	682411	345	True				
ANR	683799	ShiftExpression	"cout << ""    Indent a Java source file.\\n"""		682411	0		<<			
ANR	683800	Identifier	cout		682411	0					
ANR	683801	PrimaryExpression	"""    Indent a Java source file.\\n"""		682411	1					
ANR	683802	ExpressionStatement	cout << endl	1910:1:58779:58791	682411	346	True				
ANR	683803	ShiftExpression	cout << endl		682411	0		<<			
ANR	683804	Identifier	cout		682411	0					
ANR	683805	Identifier	endl		682411	1					
ANR	683806	ExpressionStatement	"cout << ""    --mode=cs\\n"""	1911:1:58794:58819	682411	347	True				
ANR	683807	ShiftExpression	"cout << ""    --mode=cs\\n"""		682411	0		<<			
ANR	683808	Identifier	cout		682411	0					
ANR	683809	PrimaryExpression	"""    --mode=cs\\n"""		682411	1					
ANR	683810	ExpressionStatement	"cout << ""    Indent a C# source file.\\n"""	1912:1:58822:58862	682411	348	True				
ANR	683811	ShiftExpression	"cout << ""    Indent a C# source file.\\n"""		682411	0		<<			
ANR	683812	Identifier	cout		682411	0					
ANR	683813	PrimaryExpression	"""    Indent a C# source file.\\n"""		682411	1					
ANR	683814	ExpressionStatement	cout << endl	1913:1:58865:58877	682411	349	True				
ANR	683815	ShiftExpression	cout << endl		682411	0		<<			
ANR	683816	Identifier	cout		682411	0					
ANR	683817	Identifier	endl		682411	1					
ANR	683818	ExpressionStatement	"cout << ""Objective-C Options:\\n"""	1914:1:58880:58912	682411	350	True				
ANR	683819	ShiftExpression	"cout << ""Objective-C Options:\\n"""		682411	0		<<			
ANR	683820	Identifier	cout		682411	0					
ANR	683821	PrimaryExpression	"""Objective-C Options:\\n"""		682411	1					
ANR	683822	ExpressionStatement	"cout << ""--------------------\\n"""	1915:1:58915:58947	682411	351	True				
ANR	683823	ShiftExpression	"cout << ""--------------------\\n"""		682411	0		<<			
ANR	683824	Identifier	cout		682411	0					
ANR	683825	PrimaryExpression	"""--------------------\\n"""		682411	1					
ANR	683826	ExpressionStatement	"cout << ""    --pad-method-prefix  OR  -xQ\\n"""	1916:1:58950:58994	682411	352	True				
ANR	683827	ShiftExpression	"cout << ""    --pad-method-prefix  OR  -xQ\\n"""		682411	0		<<			
ANR	683828	Identifier	cout		682411	0					
ANR	683829	PrimaryExpression	"""    --pad-method-prefix  OR  -xQ\\n"""		682411	1					
ANR	683830	ExpressionStatement	"cout << ""    Insert space padding after the '-' or '+' Objective-C\\n"""	1917:1:58997:59066	682411	353	True				
ANR	683831	ShiftExpression	"cout << ""    Insert space padding after the '-' or '+' Objective-C\\n"""		682411	0		<<			
ANR	683832	Identifier	cout		682411	0					
ANR	683833	PrimaryExpression	"""    Insert space padding after the '-' or '+' Objective-C\\n"""		682411	1					
ANR	683834	ExpressionStatement	"cout << ""    method prefix.\\n"""	1918:1:59069:59099	682411	354	True				
ANR	683835	ShiftExpression	"cout << ""    method prefix.\\n"""		682411	0		<<			
ANR	683836	Identifier	cout		682411	0					
ANR	683837	PrimaryExpression	"""    method prefix.\\n"""		682411	1					
ANR	683838	ExpressionStatement	cout << endl	1919:1:59102:59114	682411	355	True				
ANR	683839	ShiftExpression	cout << endl		682411	0		<<			
ANR	683840	Identifier	cout		682411	0					
ANR	683841	Identifier	endl		682411	1					
ANR	683842	ExpressionStatement	"cout << ""    --unpad-method-prefix  OR  -xR\\n"""	1920:1:59117:59163	682411	356	True				
ANR	683843	ShiftExpression	"cout << ""    --unpad-method-prefix  OR  -xR\\n"""		682411	0		<<			
ANR	683844	Identifier	cout		682411	0					
ANR	683845	PrimaryExpression	"""    --unpad-method-prefix  OR  -xR\\n"""		682411	1					
ANR	683846	ExpressionStatement	"cout << ""    Remove all space padding after the '-' or '+' Objective-C\\n"""	1921:1:59166:59239	682411	357	True				
ANR	683847	ShiftExpression	"cout << ""    Remove all space padding after the '-' or '+' Objective-C\\n"""		682411	0		<<			
ANR	683848	Identifier	cout		682411	0					
ANR	683849	PrimaryExpression	"""    Remove all space padding after the '-' or '+' Objective-C\\n"""		682411	1					
ANR	683850	ExpressionStatement	"cout << ""    method prefix.\\n"""	1922:1:59242:59272	682411	358	True				
ANR	683851	ShiftExpression	"cout << ""    method prefix.\\n"""		682411	0		<<			
ANR	683852	Identifier	cout		682411	0					
ANR	683853	PrimaryExpression	"""    method prefix.\\n"""		682411	1					
ANR	683854	ExpressionStatement	cout << endl	1923:1:59275:59287	682411	359	True				
ANR	683855	ShiftExpression	cout << endl		682411	0		<<			
ANR	683856	Identifier	cout		682411	0					
ANR	683857	Identifier	endl		682411	1					
ANR	683858	ExpressionStatement	"cout << ""    --pad-return-type  OR  -xq\\n"""	1924:1:59290:59332	682411	360	True				
ANR	683859	ShiftExpression	"cout << ""    --pad-return-type  OR  -xq\\n"""		682411	0		<<			
ANR	683860	Identifier	cout		682411	0					
ANR	683861	PrimaryExpression	"""    --pad-return-type  OR  -xq\\n"""		682411	1					
ANR	683862	ExpressionStatement	"cout << ""    Insert space padding after the Objective-C return type.\\n"""	1925:1:59335:59406	682411	361	True				
ANR	683863	ShiftExpression	"cout << ""    Insert space padding after the Objective-C return type.\\n"""		682411	0		<<			
ANR	683864	Identifier	cout		682411	0					
ANR	683865	PrimaryExpression	"""    Insert space padding after the Objective-C return type.\\n"""		682411	1					
ANR	683866	ExpressionStatement	cout << endl	1926:1:59409:59421	682411	362	True				
ANR	683867	ShiftExpression	cout << endl		682411	0		<<			
ANR	683868	Identifier	cout		682411	0					
ANR	683869	Identifier	endl		682411	1					
ANR	683870	ExpressionStatement	"cout << ""    --unpad-return-type  OR  -xr\\n"""	1927:1:59424:59468	682411	363	True				
ANR	683871	ShiftExpression	"cout << ""    --unpad-return-type  OR  -xr\\n"""		682411	0		<<			
ANR	683872	Identifier	cout		682411	0					
ANR	683873	PrimaryExpression	"""    --unpad-return-type  OR  -xr\\n"""		682411	1					
ANR	683874	ExpressionStatement	"cout << ""    Remove all space padding after the Objective-C return type.\\n"""	1928:1:59471:59546	682411	364	True				
ANR	683875	ShiftExpression	"cout << ""    Remove all space padding after the Objective-C return type.\\n"""		682411	0		<<			
ANR	683876	Identifier	cout		682411	0					
ANR	683877	PrimaryExpression	"""    Remove all space padding after the Objective-C return type.\\n"""		682411	1					
ANR	683878	ExpressionStatement	cout << endl	1929:1:59549:59561	682411	365	True				
ANR	683879	ShiftExpression	cout << endl		682411	0		<<			
ANR	683880	Identifier	cout		682411	0					
ANR	683881	Identifier	endl		682411	1					
ANR	683882	ExpressionStatement	"cout << ""    --pad-param-type  OR  -xS\\n"""	1930:1:59564:59605	682411	366	True				
ANR	683883	ShiftExpression	"cout << ""    --pad-param-type  OR  -xS\\n"""		682411	0		<<			
ANR	683884	Identifier	cout		682411	0					
ANR	683885	PrimaryExpression	"""    --pad-param-type  OR  -xS\\n"""		682411	1					
ANR	683886	ExpressionStatement	"cout << ""    Insert space padding after the Objective-C return type.\\n"""	1931:1:59608:59679	682411	367	True				
ANR	683887	ShiftExpression	"cout << ""    Insert space padding after the Objective-C return type.\\n"""		682411	0		<<			
ANR	683888	Identifier	cout		682411	0					
ANR	683889	PrimaryExpression	"""    Insert space padding after the Objective-C return type.\\n"""		682411	1					
ANR	683890	ExpressionStatement	cout << endl	1932:1:59682:59694	682411	368	True				
ANR	683891	ShiftExpression	cout << endl		682411	0		<<			
ANR	683892	Identifier	cout		682411	0					
ANR	683893	Identifier	endl		682411	1					
ANR	683894	ExpressionStatement	"cout << ""    --unpad-param-type  OR  -xs\\n"""	1933:1:59697:59740	682411	369	True				
ANR	683895	ShiftExpression	"cout << ""    --unpad-param-type  OR  -xs\\n"""		682411	0		<<			
ANR	683896	Identifier	cout		682411	0					
ANR	683897	PrimaryExpression	"""    --unpad-param-type  OR  -xs\\n"""		682411	1					
ANR	683898	ExpressionStatement	"cout << ""    Remove all space padding after the Objective-C return type.\\n"""	1934:1:59743:59818	682411	370	True				
ANR	683899	ShiftExpression	"cout << ""    Remove all space padding after the Objective-C return type.\\n"""		682411	0		<<			
ANR	683900	Identifier	cout		682411	0					
ANR	683901	PrimaryExpression	"""    Remove all space padding after the Objective-C return type.\\n"""		682411	1					
ANR	683902	ExpressionStatement	cout << endl	1935:1:59821:59833	682411	371	True				
ANR	683903	ShiftExpression	cout << endl		682411	0		<<			
ANR	683904	Identifier	cout		682411	0					
ANR	683905	Identifier	endl		682411	1					
ANR	683906	ExpressionStatement	"cout << ""    --align-method-colon  OR  -xM\\n"""	1936:1:59836:59881	682411	372	True				
ANR	683907	ShiftExpression	"cout << ""    --align-method-colon  OR  -xM\\n"""		682411	0		<<			
ANR	683908	Identifier	cout		682411	0					
ANR	683909	PrimaryExpression	"""    --align-method-colon  OR  -xM\\n"""		682411	1					
ANR	683910	ExpressionStatement	"cout << ""    Align the colons in an Objective-C method definition.\\n"""	1937:1:59884:59953	682411	373	True				
ANR	683911	ShiftExpression	"cout << ""    Align the colons in an Objective-C method definition.\\n"""		682411	0		<<			
ANR	683912	Identifier	cout		682411	0					
ANR	683913	PrimaryExpression	"""    Align the colons in an Objective-C method definition.\\n"""		682411	1					
ANR	683914	ExpressionStatement	cout << endl	1938:1:59956:59968	682411	374	True				
ANR	683915	ShiftExpression	cout << endl		682411	0		<<			
ANR	683916	Identifier	cout		682411	0					
ANR	683917	Identifier	endl		682411	1					
ANR	683918	ExpressionStatement	"cout << ""    --pad-method-colon=none    OR  -xP\\n"""	1939:1:59971:60021	682411	375	True				
ANR	683919	ShiftExpression	"cout << ""    --pad-method-colon=none    OR  -xP\\n"""		682411	0		<<			
ANR	683920	Identifier	cout		682411	0					
ANR	683921	PrimaryExpression	"""    --pad-method-colon=none    OR  -xP\\n"""		682411	1					
ANR	683922	ExpressionStatement	"cout << ""    --pad-method-colon=all     OR  -xP1\\n"""	1940:1:60024:60075	682411	376	True				
ANR	683923	ShiftExpression	"cout << ""    --pad-method-colon=all     OR  -xP1\\n"""		682411	0		<<			
ANR	683924	Identifier	cout		682411	0					
ANR	683925	PrimaryExpression	"""    --pad-method-colon=all     OR  -xP1\\n"""		682411	1					
ANR	683926	ExpressionStatement	"cout << ""    --pad-method-colon=after   OR  -xP2\\n"""	1941:1:60078:60129	682411	377	True				
ANR	683927	ShiftExpression	"cout << ""    --pad-method-colon=after   OR  -xP2\\n"""		682411	0		<<			
ANR	683928	Identifier	cout		682411	0					
ANR	683929	PrimaryExpression	"""    --pad-method-colon=after   OR  -xP2\\n"""		682411	1					
ANR	683930	ExpressionStatement	"cout << ""    --pad-method-colon=before  OR  -xP3\\n"""	1942:1:60132:60183	682411	378	True				
ANR	683931	ShiftExpression	"cout << ""    --pad-method-colon=before  OR  -xP3\\n"""		682411	0		<<			
ANR	683932	Identifier	cout		682411	0					
ANR	683933	PrimaryExpression	"""    --pad-method-colon=before  OR  -xP3\\n"""		682411	1					
ANR	683934	ExpressionStatement	"cout << ""    Add or remove space padding before or after the colons in an\\n"""	1943:1:60186:60262	682411	379	True				
ANR	683935	ShiftExpression	"cout << ""    Add or remove space padding before or after the colons in an\\n"""		682411	0		<<			
ANR	683936	Identifier	cout		682411	0					
ANR	683937	PrimaryExpression	"""    Add or remove space padding before or after the colons in an\\n"""		682411	1					
ANR	683938	ExpressionStatement	"cout << ""    Objective-C method call.\\n"""	1944:1:60265:60305	682411	380	True				
ANR	683939	ShiftExpression	"cout << ""    Objective-C method call.\\n"""		682411	0		<<			
ANR	683940	Identifier	cout		682411	0					
ANR	683941	PrimaryExpression	"""    Objective-C method call.\\n"""		682411	1					
ANR	683942	ExpressionStatement	cout << endl	1945:1:60308:60320	682411	381	True				
ANR	683943	ShiftExpression	cout << endl		682411	0		<<			
ANR	683944	Identifier	cout		682411	0					
ANR	683945	Identifier	endl		682411	1					
ANR	683946	ExpressionStatement	"cout << ""Other Options:\\n"""	1946:1:60323:60349	682411	382	True				
ANR	683947	ShiftExpression	"cout << ""Other Options:\\n"""		682411	0		<<			
ANR	683948	Identifier	cout		682411	0					
ANR	683949	PrimaryExpression	"""Other Options:\\n"""		682411	1					
ANR	683950	ExpressionStatement	"cout << ""--------------\\n"""	1947:1:60352:60378	682411	383	True				
ANR	683951	ShiftExpression	"cout << ""--------------\\n"""		682411	0		<<			
ANR	683952	Identifier	cout		682411	0					
ANR	683953	PrimaryExpression	"""--------------\\n"""		682411	1					
ANR	683954	ExpressionStatement	"cout << ""    --suffix=####\\n"""	1948:1:60381:60410	682411	384	True				
ANR	683955	ShiftExpression	"cout << ""    --suffix=####\\n"""		682411	0		<<			
ANR	683956	Identifier	cout		682411	0					
ANR	683957	PrimaryExpression	"""    --suffix=####\\n"""		682411	1					
ANR	683958	ExpressionStatement	"cout << ""    Append the suffix #### instead of '.orig' to original filename.\\n"""	1949:1:60413:60492	682411	385	True				
ANR	683959	ShiftExpression	"cout << ""    Append the suffix #### instead of '.orig' to original filename.\\n"""		682411	0		<<			
ANR	683960	Identifier	cout		682411	0					
ANR	683961	PrimaryExpression	"""    Append the suffix #### instead of '.orig' to original filename.\\n"""		682411	1					
ANR	683962	ExpressionStatement	cout << endl	1950:1:60495:60507	682411	386	True				
ANR	683963	ShiftExpression	cout << endl		682411	0		<<			
ANR	683964	Identifier	cout		682411	0					
ANR	683965	Identifier	endl		682411	1					
ANR	683966	ExpressionStatement	"cout << ""    --suffix=none  OR  -n\\n"""	1951:1:60510:60547	682411	387	True				
ANR	683967	ShiftExpression	"cout << ""    --suffix=none  OR  -n\\n"""		682411	0		<<			
ANR	683968	Identifier	cout		682411	0					
ANR	683969	PrimaryExpression	"""    --suffix=none  OR  -n\\n"""		682411	1					
ANR	683970	ExpressionStatement	"cout << ""    Do not retain a backup of the original file.\\n"""	1952:1:60550:60610	682411	388	True				
ANR	683971	ShiftExpression	"cout << ""    Do not retain a backup of the original file.\\n"""		682411	0		<<			
ANR	683972	Identifier	cout		682411	0					
ANR	683973	PrimaryExpression	"""    Do not retain a backup of the original file.\\n"""		682411	1					
ANR	683974	ExpressionStatement	cout << endl	1953:1:60613:60625	682411	389	True				
ANR	683975	ShiftExpression	cout << endl		682411	0		<<			
ANR	683976	Identifier	cout		682411	0					
ANR	683977	Identifier	endl		682411	1					
ANR	683978	ExpressionStatement	"cout << ""    --recursive  OR  -r  OR  -R\\n"""	1954:1:60628:60671	682411	390	True				
ANR	683979	ShiftExpression	"cout << ""    --recursive  OR  -r  OR  -R\\n"""		682411	0		<<			
ANR	683980	Identifier	cout		682411	0					
ANR	683981	PrimaryExpression	"""    --recursive  OR  -r  OR  -R\\n"""		682411	1					
ANR	683982	ExpressionStatement	"cout << ""    Process subdirectories recursively.\\n"""	1955:1:60674:60725	682411	391	True				
ANR	683983	ShiftExpression	"cout << ""    Process subdirectories recursively.\\n"""		682411	0		<<			
ANR	683984	Identifier	cout		682411	0					
ANR	683985	PrimaryExpression	"""    Process subdirectories recursively.\\n"""		682411	1					
ANR	683986	ExpressionStatement	cout << endl	1956:1:60728:60740	682411	392	True				
ANR	683987	ShiftExpression	cout << endl		682411	0		<<			
ANR	683988	Identifier	cout		682411	0					
ANR	683989	Identifier	endl		682411	1					
ANR	683990	ExpressionStatement	"cout << ""    --dry-run\\n"""	1957:1:60743:60768	682411	393	True				
ANR	683991	ShiftExpression	"cout << ""    --dry-run\\n"""		682411	0		<<			
ANR	683992	Identifier	cout		682411	0					
ANR	683993	PrimaryExpression	"""    --dry-run\\n"""		682411	1					
ANR	683994	ExpressionStatement	"cout << ""    Perform a trial run with no changes made to check for formatting.\\n"""	1958:1:60771:60852	682411	394	True				
ANR	683995	ShiftExpression	"cout << ""    Perform a trial run with no changes made to check for formatting.\\n"""		682411	0		<<			
ANR	683996	Identifier	cout		682411	0					
ANR	683997	PrimaryExpression	"""    Perform a trial run with no changes made to check for formatting.\\n"""		682411	1					
ANR	683998	ExpressionStatement	cout << endl	1959:1:60855:60867	682411	395	True				
ANR	683999	ShiftExpression	cout << endl		682411	0		<<			
ANR	684000	Identifier	cout		682411	0					
ANR	684001	Identifier	endl		682411	1					
ANR	684002	ExpressionStatement	"cout << ""    --exclude=####\\n"""	1960:1:60870:60900	682411	396	True				
ANR	684003	ShiftExpression	"cout << ""    --exclude=####\\n"""		682411	0		<<			
ANR	684004	Identifier	cout		682411	0					
ANR	684005	PrimaryExpression	"""    --exclude=####\\n"""		682411	1					
ANR	684006	ExpressionStatement	"cout << ""    Specify a file or directory #### to be excluded from processing.\\n"""	1961:1:60903:60983	682411	397	True				
ANR	684007	ShiftExpression	"cout << ""    Specify a file or directory #### to be excluded from processing.\\n"""		682411	0		<<			
ANR	684008	Identifier	cout		682411	0					
ANR	684009	PrimaryExpression	"""    Specify a file or directory #### to be excluded from processing.\\n"""		682411	1					
ANR	684010	ExpressionStatement	cout << endl	1962:1:60986:60998	682411	398	True				
ANR	684011	ShiftExpression	cout << endl		682411	0		<<			
ANR	684012	Identifier	cout		682411	0					
ANR	684013	Identifier	endl		682411	1					
ANR	684014	ExpressionStatement	"cout << ""    --ignore-exclude-errors  OR  -i\\n"""	1963:1:61001:61048	682411	399	True				
ANR	684015	ShiftExpression	"cout << ""    --ignore-exclude-errors  OR  -i\\n"""		682411	0		<<			
ANR	684016	Identifier	cout		682411	0					
ANR	684017	PrimaryExpression	"""    --ignore-exclude-errors  OR  -i\\n"""		682411	1					
ANR	684018	ExpressionStatement	"cout << ""    Allow processing to continue if there are errors in the exclude=####\\n"""	1964:1:61051:61135	682411	400	True				
ANR	684019	ShiftExpression	"cout << ""    Allow processing to continue if there are errors in the exclude=####\\n"""		682411	0		<<			
ANR	684020	Identifier	cout		682411	0					
ANR	684021	PrimaryExpression	"""    Allow processing to continue if there are errors in the exclude=####\\n"""		682411	1					
ANR	684022	ExpressionStatement	"cout << ""    options. It will display the unmatched excludes.\\n"""	1965:1:61138:61202	682411	401	True				
ANR	684023	ShiftExpression	"cout << ""    options. It will display the unmatched excludes.\\n"""		682411	0		<<			
ANR	684024	Identifier	cout		682411	0					
ANR	684025	PrimaryExpression	"""    options. It will display the unmatched excludes.\\n"""		682411	1					
ANR	684026	ExpressionStatement	cout << endl	1966:1:61205:61217	682411	402	True				
ANR	684027	ShiftExpression	cout << endl		682411	0		<<			
ANR	684028	Identifier	cout		682411	0					
ANR	684029	Identifier	endl		682411	1					
ANR	684030	ExpressionStatement	"cout << ""    --ignore-exclude-errors-x  OR  -xi\\n"""	1967:1:61220:61270	682411	403	True				
ANR	684031	ShiftExpression	"cout << ""    --ignore-exclude-errors-x  OR  -xi\\n"""		682411	0		<<			
ANR	684032	Identifier	cout		682411	0					
ANR	684033	PrimaryExpression	"""    --ignore-exclude-errors-x  OR  -xi\\n"""		682411	1					
ANR	684034	ExpressionStatement	"cout << ""    Allow processing to continue if there are errors in the exclude=####\\n"""	1968:1:61273:61357	682411	404	True				
ANR	684035	ShiftExpression	"cout << ""    Allow processing to continue if there are errors in the exclude=####\\n"""		682411	0		<<			
ANR	684036	Identifier	cout		682411	0					
ANR	684037	PrimaryExpression	"""    Allow processing to continue if there are errors in the exclude=####\\n"""		682411	1					
ANR	684038	ExpressionStatement	"cout << ""    options. It will NOT display the unmatched excludes.\\n"""	1969:1:61360:61428	682411	405	True				
ANR	684039	ShiftExpression	"cout << ""    options. It will NOT display the unmatched excludes.\\n"""		682411	0		<<			
ANR	684040	Identifier	cout		682411	0					
ANR	684041	PrimaryExpression	"""    options. It will NOT display the unmatched excludes.\\n"""		682411	1					
ANR	684042	ExpressionStatement	cout << endl	1970:1:61431:61443	682411	406	True				
ANR	684043	ShiftExpression	cout << endl		682411	0		<<			
ANR	684044	Identifier	cout		682411	0					
ANR	684045	Identifier	endl		682411	1					
ANR	684046	ExpressionStatement	"cout << ""    --errors-to-stdout  OR  -X\\n"""	1971:1:61446:61488	682411	407	True				
ANR	684047	ShiftExpression	"cout << ""    --errors-to-stdout  OR  -X\\n"""		682411	0		<<			
ANR	684048	Identifier	cout		682411	0					
ANR	684049	PrimaryExpression	"""    --errors-to-stdout  OR  -X\\n"""		682411	1					
ANR	684050	ExpressionStatement	"cout << ""    Print errors and help information to standard-output rather than\\n"""	1972:1:61491:61571	682411	408	True				
ANR	684051	ShiftExpression	"cout << ""    Print errors and help information to standard-output rather than\\n"""		682411	0		<<			
ANR	684052	Identifier	cout		682411	0					
ANR	684053	PrimaryExpression	"""    Print errors and help information to standard-output rather than\\n"""		682411	1					
ANR	684054	ExpressionStatement	"cout << ""    to standard-error.\\n"""	1973:1:61574:61608	682411	409	True				
ANR	684055	ShiftExpression	"cout << ""    to standard-error.\\n"""		682411	0		<<			
ANR	684056	Identifier	cout		682411	0					
ANR	684057	PrimaryExpression	"""    to standard-error.\\n"""		682411	1					
ANR	684058	ExpressionStatement	cout << endl	1974:1:61611:61623	682411	410	True				
ANR	684059	ShiftExpression	cout << endl		682411	0		<<			
ANR	684060	Identifier	cout		682411	0					
ANR	684061	Identifier	endl		682411	1					
ANR	684062	ExpressionStatement	"cout << ""    --preserve-date  OR  -Z\\n"""	1975:1:61626:61665	682411	411	True				
ANR	684063	ShiftExpression	"cout << ""    --preserve-date  OR  -Z\\n"""		682411	0		<<			
ANR	684064	Identifier	cout		682411	0					
ANR	684065	PrimaryExpression	"""    --preserve-date  OR  -Z\\n"""		682411	1					
ANR	684066	ExpressionStatement	"cout << ""    Preserve the original file's date and time modified. The time\\n"""	1976:1:61668:61745	682411	412	True				
ANR	684067	ShiftExpression	"cout << ""    Preserve the original file's date and time modified. The time\\n"""		682411	0		<<			
ANR	684068	Identifier	cout		682411	0					
ANR	684069	PrimaryExpression	"""    Preserve the original file's date and time modified. The time\\n"""		682411	1					
ANR	684070	ExpressionStatement	"cout << ""     modified will be changed a few micro seconds to force a compile.\\n"""	1977:1:61748:61829	682411	413	True				
ANR	684071	ShiftExpression	"cout << ""     modified will be changed a few micro seconds to force a compile.\\n"""		682411	0		<<			
ANR	684072	Identifier	cout		682411	0					
ANR	684073	PrimaryExpression	"""     modified will be changed a few micro seconds to force a compile.\\n"""		682411	1					
ANR	684074	ExpressionStatement	cout << endl	1978:1:61832:61844	682411	414	True				
ANR	684075	ShiftExpression	cout << endl		682411	0		<<			
ANR	684076	Identifier	cout		682411	0					
ANR	684077	Identifier	endl		682411	1					
ANR	684078	ExpressionStatement	"cout << ""    --verbose  OR  -v\\n"""	1979:1:61847:61880	682411	415	True				
ANR	684079	ShiftExpression	"cout << ""    --verbose  OR  -v\\n"""		682411	0		<<			
ANR	684080	Identifier	cout		682411	0					
ANR	684081	PrimaryExpression	"""    --verbose  OR  -v\\n"""		682411	1					
ANR	684082	ExpressionStatement	"cout << ""    Verbose mode. Extra informational messages will be displayed.\\n"""	1980:1:61883:61960	682411	416	True				
ANR	684083	ShiftExpression	"cout << ""    Verbose mode. Extra informational messages will be displayed.\\n"""		682411	0		<<			
ANR	684084	Identifier	cout		682411	0					
ANR	684085	PrimaryExpression	"""    Verbose mode. Extra informational messages will be displayed.\\n"""		682411	1					
ANR	684086	ExpressionStatement	cout << endl	1981:1:61963:61975	682411	417	True				
ANR	684087	ShiftExpression	cout << endl		682411	0		<<			
ANR	684088	Identifier	cout		682411	0					
ANR	684089	Identifier	endl		682411	1					
ANR	684090	ExpressionStatement	"cout << ""    --formatted  OR  -Q\\n"""	1982:1:61978:62013	682411	418	True				
ANR	684091	ShiftExpression	"cout << ""    --formatted  OR  -Q\\n"""		682411	0		<<			
ANR	684092	Identifier	cout		682411	0					
ANR	684093	PrimaryExpression	"""    --formatted  OR  -Q\\n"""		682411	1					
ANR	684094	ExpressionStatement	"cout << ""    Formatted display mode. Display only the files that have been\\n"""	1983:1:62016:62093	682411	419	True				
ANR	684095	ShiftExpression	"cout << ""    Formatted display mode. Display only the files that have been\\n"""		682411	0		<<			
ANR	684096	Identifier	cout		682411	0					
ANR	684097	PrimaryExpression	"""    Formatted display mode. Display only the files that have been\\n"""		682411	1					
ANR	684098	ExpressionStatement	"cout << ""    formatted.\\n"""	1984:1:62096:62122	682411	420	True				
ANR	684099	ShiftExpression	"cout << ""    formatted.\\n"""		682411	0		<<			
ANR	684100	Identifier	cout		682411	0					
ANR	684101	PrimaryExpression	"""    formatted.\\n"""		682411	1					
ANR	684102	ExpressionStatement	cout << endl	1985:1:62125:62137	682411	421	True				
ANR	684103	ShiftExpression	cout << endl		682411	0		<<			
ANR	684104	Identifier	cout		682411	0					
ANR	684105	Identifier	endl		682411	1					
ANR	684106	ExpressionStatement	"cout << ""    --quiet  OR  -q\\n"""	1986:1:62140:62171	682411	422	True				
ANR	684107	ShiftExpression	"cout << ""    --quiet  OR  -q\\n"""		682411	0		<<			
ANR	684108	Identifier	cout		682411	0					
ANR	684109	PrimaryExpression	"""    --quiet  OR  -q\\n"""		682411	1					
ANR	684110	ExpressionStatement	"cout << ""    Quiet mode. Suppress all output except error messages.\\n"""	1987:1:62174:62244	682411	423	True				
ANR	684111	ShiftExpression	"cout << ""    Quiet mode. Suppress all output except error messages.\\n"""		682411	0		<<			
ANR	684112	Identifier	cout		682411	0					
ANR	684113	PrimaryExpression	"""    Quiet mode. Suppress all output except error messages.\\n"""		682411	1					
ANR	684114	ExpressionStatement	cout << endl	1988:1:62247:62259	682411	424	True				
ANR	684115	ShiftExpression	cout << endl		682411	0		<<			
ANR	684116	Identifier	cout		682411	0					
ANR	684117	Identifier	endl		682411	1					
ANR	684118	ExpressionStatement	"cout << ""    --lineend=windows  OR  -z1\\n"""	1989:1:62262:62304	682411	425	True				
ANR	684119	ShiftExpression	"cout << ""    --lineend=windows  OR  -z1\\n"""		682411	0		<<			
ANR	684120	Identifier	cout		682411	0					
ANR	684121	PrimaryExpression	"""    --lineend=windows  OR  -z1\\n"""		682411	1					
ANR	684122	ExpressionStatement	"cout << ""    --lineend=linux    OR  -z2\\n"""	1990:1:62307:62349	682411	426	True				
ANR	684123	ShiftExpression	"cout << ""    --lineend=linux    OR  -z2\\n"""		682411	0		<<			
ANR	684124	Identifier	cout		682411	0					
ANR	684125	PrimaryExpression	"""    --lineend=linux    OR  -z2\\n"""		682411	1					
ANR	684126	ExpressionStatement	"cout << ""    --lineend=macold   OR  -z3\\n"""	1991:1:62352:62394	682411	427	True				
ANR	684127	ShiftExpression	"cout << ""    --lineend=macold   OR  -z3\\n"""		682411	0		<<			
ANR	684128	Identifier	cout		682411	0					
ANR	684129	PrimaryExpression	"""    --lineend=macold   OR  -z3\\n"""		682411	1					
ANR	684130	ExpressionStatement	"cout << ""    Force use of the specified line end style. Valid options\\n"""	1992:1:62397:62469	682411	428	True				
ANR	684131	ShiftExpression	"cout << ""    Force use of the specified line end style. Valid options\\n"""		682411	0		<<			
ANR	684132	Identifier	cout		682411	0					
ANR	684133	PrimaryExpression	"""    Force use of the specified line end style. Valid options\\n"""		682411	1					
ANR	684134	ExpressionStatement	"cout << ""    are windows (CRLF), linux (LF), and macold (CR).\\n"""	1993:1:62472:62536	682411	429	True				
ANR	684135	ShiftExpression	"cout << ""    are windows (CRLF), linux (LF), and macold (CR).\\n"""		682411	0		<<			
ANR	684136	Identifier	cout		682411	0					
ANR	684137	PrimaryExpression	"""    are windows (CRLF), linux (LF), and macold (CR).\\n"""		682411	1					
ANR	684138	ExpressionStatement	cout << endl	1994:1:62539:62551	682411	430	True				
ANR	684139	ShiftExpression	cout << endl		682411	0		<<			
ANR	684140	Identifier	cout		682411	0					
ANR	684141	Identifier	endl		682411	1					
ANR	684142	ExpressionStatement	"cout << ""Command Line Only:\\n"""	1995:1:62554:62584	682411	431	True				
ANR	684143	ShiftExpression	"cout << ""Command Line Only:\\n"""		682411	0		<<			
ANR	684144	Identifier	cout		682411	0					
ANR	684145	PrimaryExpression	"""Command Line Only:\\n"""		682411	1					
ANR	684146	ExpressionStatement	"cout << ""------------------\\n"""	1996:1:62587:62617	682411	432	True				
ANR	684147	ShiftExpression	"cout << ""------------------\\n"""		682411	0		<<			
ANR	684148	Identifier	cout		682411	0					
ANR	684149	PrimaryExpression	"""------------------\\n"""		682411	1					
ANR	684150	ExpressionStatement	"cout << ""    --options=####\\n"""	1997:1:62620:62650	682411	433	True				
ANR	684151	ShiftExpression	"cout << ""    --options=####\\n"""		682411	0		<<			
ANR	684152	Identifier	cout		682411	0					
ANR	684153	PrimaryExpression	"""    --options=####\\n"""		682411	1					
ANR	684154	ExpressionStatement	"cout << ""    Specify an options file #### to read and use.\\n"""	1998:1:62653:62714	682411	434	True				
ANR	684155	ShiftExpression	"cout << ""    Specify an options file #### to read and use.\\n"""		682411	0		<<			
ANR	684156	Identifier	cout		682411	0					
ANR	684157	PrimaryExpression	"""    Specify an options file #### to read and use.\\n"""		682411	1					
ANR	684158	ExpressionStatement	cout << endl	1999:1:62717:62729	682411	435	True				
ANR	684159	ShiftExpression	cout << endl		682411	0		<<			
ANR	684160	Identifier	cout		682411	0					
ANR	684161	Identifier	endl		682411	1					
ANR	684162	ExpressionStatement	"cout << ""    --options=none\\n"""	2000:1:62732:62762	682411	436	True				
ANR	684163	ShiftExpression	"cout << ""    --options=none\\n"""		682411	0		<<			
ANR	684164	Identifier	cout		682411	0					
ANR	684165	PrimaryExpression	"""    --options=none\\n"""		682411	1					
ANR	684166	ExpressionStatement	"cout << ""    Disable the default options file.\\n"""	2001:1:62765:62814	682411	437	True				
ANR	684167	ShiftExpression	"cout << ""    Disable the default options file.\\n"""		682411	0		<<			
ANR	684168	Identifier	cout		682411	0					
ANR	684169	PrimaryExpression	"""    Disable the default options file.\\n"""		682411	1					
ANR	684170	ExpressionStatement	"cout << ""    Only the command-line parameters will be used.\\n"""	2002:1:62817:62879	682411	438	True				
ANR	684171	ShiftExpression	"cout << ""    Only the command-line parameters will be used.\\n"""		682411	0		<<			
ANR	684172	Identifier	cout		682411	0					
ANR	684173	PrimaryExpression	"""    Only the command-line parameters will be used.\\n"""		682411	1					
ANR	684174	ExpressionStatement	cout << endl	2003:1:62882:62894	682411	439	True				
ANR	684175	ShiftExpression	cout << endl		682411	0		<<			
ANR	684176	Identifier	cout		682411	0					
ANR	684177	Identifier	endl		682411	1					
ANR	684178	ExpressionStatement	"cout << ""    --ascii  OR  -I\\n"""	2004:1:62897:62928	682411	440	True				
ANR	684179	ShiftExpression	"cout << ""    --ascii  OR  -I\\n"""		682411	0		<<			
ANR	684180	Identifier	cout		682411	0					
ANR	684181	PrimaryExpression	"""    --ascii  OR  -I\\n"""		682411	1					
ANR	684182	ExpressionStatement	"cout << ""    The displayed output will be ascii characters only.\\n"""	2005:1:62931:62998	682411	441	True				
ANR	684183	ShiftExpression	"cout << ""    The displayed output will be ascii characters only.\\n"""		682411	0		<<			
ANR	684184	Identifier	cout		682411	0					
ANR	684185	PrimaryExpression	"""    The displayed output will be ascii characters only.\\n"""		682411	1					
ANR	684186	ExpressionStatement	cout << endl	2006:1:63001:63013	682411	442	True				
ANR	684187	ShiftExpression	cout << endl		682411	0		<<			
ANR	684188	Identifier	cout		682411	0					
ANR	684189	Identifier	endl		682411	1					
ANR	684190	ExpressionStatement	"cout << ""    --version  OR  -V\\n"""	2007:1:63016:63049	682411	443	True				
ANR	684191	ShiftExpression	"cout << ""    --version  OR  -V\\n"""		682411	0		<<			
ANR	684192	Identifier	cout		682411	0					
ANR	684193	PrimaryExpression	"""    --version  OR  -V\\n"""		682411	1					
ANR	684194	ExpressionStatement	"cout << ""    Print version number.\\n"""	2008:1:63052:63089	682411	444	True				
ANR	684195	ShiftExpression	"cout << ""    Print version number.\\n"""		682411	0		<<			
ANR	684196	Identifier	cout		682411	0					
ANR	684197	PrimaryExpression	"""    Print version number.\\n"""		682411	1					
ANR	684198	ExpressionStatement	cout << endl	2009:1:63092:63104	682411	445	True				
ANR	684199	ShiftExpression	cout << endl		682411	0		<<			
ANR	684200	Identifier	cout		682411	0					
ANR	684201	Identifier	endl		682411	1					
ANR	684202	ExpressionStatement	"cout << ""    --help  OR  -h  OR  -?\\n"""	2010:1:63107:63145	682411	446	True				
ANR	684203	ShiftExpression	"cout << ""    --help  OR  -h  OR  -?\\n"""		682411	0		<<			
ANR	684204	Identifier	cout		682411	0					
ANR	684205	PrimaryExpression	"""    --help  OR  -h  OR  -?\\n"""		682411	1					
ANR	684206	ExpressionStatement	"cout << ""    Print this help message.\\n"""	2011:1:63148:63188	682411	447	True				
ANR	684207	ShiftExpression	"cout << ""    Print this help message.\\n"""		682411	0		<<			
ANR	684208	Identifier	cout		682411	0					
ANR	684209	PrimaryExpression	"""    Print this help message.\\n"""		682411	1					
ANR	684210	ExpressionStatement	cout << endl	2012:1:63191:63203	682411	448	True				
ANR	684211	ShiftExpression	cout << endl		682411	0		<<			
ANR	684212	Identifier	cout		682411	0					
ANR	684213	Identifier	endl		682411	1					
ANR	684214	ExpressionStatement	"cout << ""    --html  OR  -!\\n"""	2013:1:63206:63236	682411	449	True				
ANR	684215	ShiftExpression	"cout << ""    --html  OR  -!\\n"""		682411	0		<<			
ANR	684216	Identifier	cout		682411	0					
ANR	684217	PrimaryExpression	"""    --html  OR  -!\\n"""		682411	1					
ANR	684218	ExpressionStatement	"cout << ""    Open the HTML help file \\""astyle.html\\"" in the default browser.\\n"""	2014:1:63239:63318	682411	450	True				
ANR	684219	ShiftExpression	"cout << ""    Open the HTML help file \\""astyle.html\\"" in the default browser.\\n"""		682411	0		<<			
ANR	684220	Identifier	cout		682411	0					
ANR	684221	PrimaryExpression	"""    Open the HTML help file \\""astyle.html\\"" in the default browser.\\n"""		682411	1					
ANR	684222	ExpressionStatement	"cout << ""    The documentation must be installed in the standard install path.\\n"""	2015:1:63321:63402	682411	451	True				
ANR	684223	ShiftExpression	"cout << ""    The documentation must be installed in the standard install path.\\n"""		682411	0		<<			
ANR	684224	Identifier	cout		682411	0					
ANR	684225	PrimaryExpression	"""    The documentation must be installed in the standard install path.\\n"""		682411	1					
ANR	684226	ExpressionStatement	cout << endl	2016:1:63405:63417	682411	452	True				
ANR	684227	ShiftExpression	cout << endl		682411	0		<<			
ANR	684228	Identifier	cout		682411	0					
ANR	684229	Identifier	endl		682411	1					
ANR	684230	ExpressionStatement	"cout << ""    --html=####\\n"""	2017:1:63420:63447	682411	453	True				
ANR	684231	ShiftExpression	"cout << ""    --html=####\\n"""		682411	0		<<			
ANR	684232	Identifier	cout		682411	0					
ANR	684233	PrimaryExpression	"""    --html=####\\n"""		682411	1					
ANR	684234	ExpressionStatement	"cout << ""    Open a HTML help file in the default browser using the file path\\n"""	2018:1:63450:63530	682411	454	True				
ANR	684235	ShiftExpression	"cout << ""    Open a HTML help file in the default browser using the file path\\n"""		682411	0		<<			
ANR	684236	Identifier	cout		682411	0					
ANR	684237	PrimaryExpression	"""    Open a HTML help file in the default browser using the file path\\n"""		682411	1					
ANR	684238	ExpressionStatement	"cout << ""    ####. The path may include a directory path and a file name, or a\\n"""	2019:1:63533:63614	682411	455	True				
ANR	684239	ShiftExpression	"cout << ""    ####. The path may include a directory path and a file name, or a\\n"""		682411	0		<<			
ANR	684240	Identifier	cout		682411	0					
ANR	684241	PrimaryExpression	"""    ####. The path may include a directory path and a file name, or a\\n"""		682411	1					
ANR	684242	ExpressionStatement	"cout << ""    file name only. Paths containing spaces must be enclosed in quotes.\\n"""	2020:1:63617:63700	682411	456	True				
ANR	684243	ShiftExpression	"cout << ""    file name only. Paths containing spaces must be enclosed in quotes.\\n"""		682411	0		<<			
ANR	684244	Identifier	cout		682411	0					
ANR	684245	PrimaryExpression	"""    file name only. Paths containing spaces must be enclosed in quotes.\\n"""		682411	1					
ANR	684246	ExpressionStatement	cout << endl	2021:1:63703:63715	682411	457	True				
ANR	684247	ShiftExpression	cout << endl		682411	0		<<			
ANR	684248	Identifier	cout		682411	0					
ANR	684249	Identifier	endl		682411	1					
ANR	684250	ExpressionStatement	cout << endl	2022:1:63718:63730	682411	458	True				
ANR	684251	ShiftExpression	cout << endl		682411	0		<<			
ANR	684252	Identifier	cout		682411	0					
ANR	684253	Identifier	endl		682411	1					
ANR	684254	ReturnType	void		682411	1					
ANR	684255	Identifier	ASConsole :: printHelp		682411	2					
ANR	684256	ParameterList			682411	3					
ANR	684257	CFGEntryNode	ENTRY		682411		True				
ANR	684258	CFGExitNode	EXIT		682411		True				
ANR	684259	Function	ASConsole :: processFiles	2028:0:63783:64291							
ANR	684260	FunctionDef	ASConsole :: processFiles ()		684259	0					
ANR	684261	CompoundStatement		2029:0:63814:64291	684259	0					
ANR	684262	IfStatement	if ( isVerbose )		684259	0					
ANR	684263	Condition	isVerbose	2030:5:63821:63829	684259	0	True				
ANR	684264	Identifier	isVerbose		684259	0					
ANR	684265	ExpressionStatement	printVerboseHeader ( )	2031:2:63834:63854	684259	1	True				
ANR	684266	CallExpression	printVerboseHeader ( )		684259	0					
ANR	684267	Callee	printVerboseHeader		684259	0					
ANR	684268	Identifier	printVerboseHeader		684259	0					
ANR	684269	ArgumentList			684259	1					
ANR	684270	IdentifierDeclStatement	clock_t startTime = clock ( ) ;	2033:1:63858:63885	684259	1	True				
ANR	684271	IdentifierDecl	startTime = clock ( )		684259	0					
ANR	684272	IdentifierDeclType	clock_t		684259	0					
ANR	684273	Identifier	startTime		684259	1					
ANR	684274	AssignmentExpression	startTime = clock ( )		684259	2		=			
ANR	684275	Identifier	startTime		684259	0					
ANR	684276	CallExpression	clock ( )		684259	1					
ANR	684277	Callee	clock		684259	0					
ANR	684278	Identifier	clock		684259	0					
ANR	684279	ArgumentList			684259	1					
ANR	684280	ForStatement	for ( size_t i = 0 ; i < fileNameVector . size ( ) ; i ++ )		684259	2					
ANR	684281	ForInit	size_t i = 0 ;	2036:6:63988:64000	684259	0	True				
ANR	684282	IdentifierDeclStatement	size_t i = 0 ;		684259	0					
ANR	684283	IdentifierDecl	i = 0		684259	0					
ANR	684284	IdentifierDeclType	size_t		684259	0					
ANR	684285	Identifier	i		684259	1					
ANR	684286	AssignmentExpression	i = 0		684259	2		=			
ANR	684287	Identifier	i		684259	0					
ANR	684288	PrimaryExpression	0		684259	1					
ANR	684289	Condition	i < fileNameVector . size ( )	2036:20:64002:64026	684259	1	True				
ANR	684290	RelationalExpression	i < fileNameVector . size ( )		684259	0		<			
ANR	684291	Identifier	i		684259	0					
ANR	684292	CallExpression	fileNameVector . size ( )		684259	1					
ANR	684293	Callee	fileNameVector . size		684259	0					
ANR	684294	MemberAccess	fileNameVector . size		684259	0					
ANR	684295	Identifier	fileNameVector		684259	0					
ANR	684296	Identifier	size		684259	1					
ANR	684297	ArgumentList			684259	1					
ANR	684298	PostIncDecOperationExpression	i ++	2036:47:64029:64031	684259	2	True				
ANR	684299	Identifier	i		684259	0					
ANR	684300	IncDec	++		684259	1					
ANR	684301	CompoundStatement		9:1:220:220	684259	3					
ANR	684302	ExpressionStatement	getFilePaths ( fileNameVector [ i ] )	2038:2:64039:64070	684259	0	True				
ANR	684303	CallExpression	getFilePaths ( fileNameVector [ i ] )		684259	0					
ANR	684304	Callee	getFilePaths		684259	0					
ANR	684305	Identifier	getFilePaths		684259	0					
ANR	684306	ArgumentList	fileNameVector [ i ]		684259	1					
ANR	684307	Argument	fileNameVector [ i ]		684259	0					
ANR	684308	ArrayIndexing	fileNameVector [ i ]		684259	0					
ANR	684309	Identifier	fileNameVector		684259	0					
ANR	684310	Identifier	i		684259	1					
ANR	684311	ForStatement	for ( size_t j = 0 ; j < fileName . size ( ) ; j ++ )		684259	1					
ANR	684312	ForInit	size_t j = 0 ;	2041:7:64132:64144	684259	0	True				
ANR	684313	IdentifierDeclStatement	size_t j = 0 ;		684259	0					
ANR	684314	IdentifierDecl	j = 0		684259	0					
ANR	684315	IdentifierDeclType	size_t		684259	0					
ANR	684316	Identifier	j		684259	1					
ANR	684317	AssignmentExpression	j = 0		684259	2		=			
ANR	684318	Identifier	j		684259	0					
ANR	684319	PrimaryExpression	0		684259	1					
ANR	684320	Condition	j < fileName . size ( )	2041:21:64146:64164	684259	1	True				
ANR	684321	RelationalExpression	j < fileName . size ( )		684259	0		<			
ANR	684322	Identifier	j		684259	0					
ANR	684323	CallExpression	fileName . size ( )		684259	1					
ANR	684324	Callee	fileName . size		684259	0					
ANR	684325	MemberAccess	fileName . size		684259	0					
ANR	684326	Identifier	fileName		684259	0					
ANR	684327	Identifier	size		684259	1					
ANR	684328	ArgumentList			684259	1					
ANR	684329	PostIncDecOperationExpression	j ++	2041:42:64167:64169	684259	2	True				
ANR	684330	Identifier	j		684259	0					
ANR	684331	IncDec	++		684259	1					
ANR	684332	ExpressionStatement	formatFile ( fileName [ j ] )	2042:3:64175:64198	684259	3	True				
ANR	684333	CallExpression	formatFile ( fileName [ j ] )		684259	0					
ANR	684334	Callee	formatFile		684259	0					
ANR	684335	Identifier	formatFile		684259	0					
ANR	684336	ArgumentList	fileName [ j ]		684259	1					
ANR	684337	Argument	fileName [ j ]		684259	0					
ANR	684338	ArrayIndexing	fileName [ j ]		684259	0					
ANR	684339	Identifier	fileName		684259	0					
ANR	684340	Identifier	j		684259	1					
ANR	684341	IfStatement	if ( isVerbose )		684259	3					
ANR	684342	Condition	isVerbose	2046:5:64248:64256	684259	0	True				
ANR	684343	Identifier	isVerbose		684259	0					
ANR	684344	ExpressionStatement	printVerboseStats ( startTime )	2047:2:64261:64289	684259	1	True				
ANR	684345	CallExpression	printVerboseStats ( startTime )		684259	0					
ANR	684346	Callee	printVerboseStats		684259	0					
ANR	684347	Identifier	printVerboseStats		684259	0					
ANR	684348	ArgumentList	startTime		684259	1					
ANR	684349	Argument	startTime		684259	0					
ANR	684350	Identifier	startTime		684259	0					
ANR	684351	ReturnType	void		684259	1					
ANR	684352	Identifier	ASConsole :: processFiles		684259	2					
ANR	684353	ParameterList			684259	3					
ANR	684354	CFGEntryNode	ENTRY		684259		True				
ANR	684355	CFGExitNode	EXIT		684259		True				
ANR	684356	Symbol	fileNameVector		684259						
ANR	684357	Symbol	fileName		684259						
ANR	684358	Symbol	isVerbose		684259						
ANR	684359	Symbol	* fileNameVector		684259						
ANR	684360	Symbol	i		684259						
ANR	684361	Symbol	j		684259						
ANR	684362	Symbol	clock		684259						
ANR	684363	Symbol	fileNameVector . size		684259						
ANR	684364	Symbol	fileName . size		684259						
ANR	684365	Symbol	* i		684259						
ANR	684366	Symbol	* j		684259						
ANR	684367	Symbol	startTime		684259						
ANR	684368	Symbol	* fileName		684259						
ANR	684369	Function	ASConsole :: processOptions	2052:0:64441:67551							
ANR	684370	FunctionDef	ASConsole :: processOptions (const vector < string > & argvOptions)		684369	0					
ANR	684371	CompoundStatement		2053:0:64507:67551	684369	0					
ANR	684372	IdentifierDeclStatement	string arg ;	2054:1:64510:64520	684369	0	True				
ANR	684373	IdentifierDecl	arg		684369	0					
ANR	684374	IdentifierDeclType	string		684369	0					
ANR	684375	Identifier	arg		684369	1					
ANR	684376	IdentifierDeclStatement	bool ok = true ;	2055:1:64523:64537	684369	1	True				
ANR	684377	IdentifierDecl	ok = true		684369	0					
ANR	684378	IdentifierDeclType	bool		684369	0					
ANR	684379	Identifier	ok		684369	1					
ANR	684380	AssignmentExpression	ok = true		684369	2		=			
ANR	684381	Identifier	true		684369	0					
ANR	684382	Identifier	true		684369	1					
ANR	684383	IdentifierDeclStatement	bool shouldParseOptionsFile = true ;	2056:1:64540:64574	684369	2	True				
ANR	684384	IdentifierDecl	shouldParseOptionsFile = true		684369	0					
ANR	684385	IdentifierDeclType	bool		684369	0					
ANR	684386	Identifier	shouldParseOptionsFile		684369	1					
ANR	684387	AssignmentExpression	shouldParseOptionsFile = true		684369	2		=			
ANR	684388	Identifier	true		684369	0					
ANR	684389	Identifier	true		684369	1					
ANR	684390	ForStatement	for ( size_t i = 0 ; i < argvOptions . size ( ) ; i ++ )		684369	3					
ANR	684391	ForInit	size_t i = 0 ;	2059:6:64612:64624	684369	0	True				
ANR	684392	IdentifierDeclStatement	size_t i = 0 ;		684369	0					
ANR	684393	IdentifierDecl	i = 0		684369	0					
ANR	684394	IdentifierDeclType	size_t		684369	0					
ANR	684395	Identifier	i		684369	1					
ANR	684396	AssignmentExpression	i = 0		684369	2		=			
ANR	684397	Identifier	i		684369	0					
ANR	684398	PrimaryExpression	0		684369	1					
ANR	684399	Condition	i < argvOptions . size ( )	2059:20:64626:64647	684369	1	True				
ANR	684400	RelationalExpression	i < argvOptions . size ( )		684369	0		<			
ANR	684401	Identifier	i		684369	0					
ANR	684402	CallExpression	argvOptions . size ( )		684369	1					
ANR	684403	Callee	argvOptions . size		684369	0					
ANR	684404	MemberAccess	argvOptions . size		684369	0					
ANR	684405	Identifier	argvOptions		684369	0					
ANR	684406	Identifier	size		684369	1					
ANR	684407	ArgumentList			684369	1					
ANR	684408	PostIncDecOperationExpression	i ++	2059:44:64650:64652	684369	2	True				
ANR	684409	Identifier	i		684369	0					
ANR	684410	IncDec	++		684369	1					
ANR	684411	CompoundStatement		8:1:148:148	684369	3					
ANR	684412	ExpressionStatement	arg = argvOptions [ i ]	2061:2:64660:64680	684369	0	True				
ANR	684413	AssignmentExpression	arg = argvOptions [ i ]		684369	0		=			
ANR	684414	Identifier	arg		684369	0					
ANR	684415	ArrayIndexing	argvOptions [ i ]		684369	1					
ANR	684416	Identifier	argvOptions		684369	0					
ANR	684417	Identifier	i		684369	1					
ANR	684418	IfStatement	"if ( isOption ( arg , ""-I"" ) || isOption ( arg , ""--ascii"" ) )"		684369	1					
ANR	684419	Condition	"isOption ( arg , ""-I"" ) || isOption ( arg , ""--ascii"" )"	2063:7:64690:64747	684369	0	True				
ANR	684420	OrExpression	"isOption ( arg , ""-I"" ) || isOption ( arg , ""--ascii"" )"		684369	0		||			
ANR	684421	CallExpression	"isOption ( arg , ""-I"" )"		684369	0					
ANR	684422	Callee	isOption		684369	0					
ANR	684423	Identifier	isOption		684369	0					
ANR	684424	ArgumentList	arg		684369	1					
ANR	684425	Argument	arg		684369	0					
ANR	684426	Identifier	arg		684369	0					
ANR	684427	Argument	"""-I"""		684369	1					
ANR	684428	PrimaryExpression	"""-I"""		684369	0					
ANR	684429	CallExpression	"isOption ( arg , ""--ascii"" )"		684369	1					
ANR	684430	Callee	isOption		684369	0					
ANR	684431	Identifier	isOption		684369	0					
ANR	684432	ArgumentList	arg		684369	1					
ANR	684433	Argument	arg		684369	0					
ANR	684434	Identifier	arg		684369	0					
ANR	684435	Argument	"""--ascii"""		684369	1					
ANR	684436	PrimaryExpression	"""--ascii"""		684369	0					
ANR	684437	CompoundStatement		13:2:245:245	684369	1					
ANR	684438	ExpressionStatement	useAscii = true	2066:3:64758:64773	684369	0	True				
ANR	684439	AssignmentExpression	useAscii = true		684369	0		=			
ANR	684440	Identifier	useAscii		684369	0					
ANR	684441	Identifier	true		684369	1					
ANR	684442	ExpressionStatement	"setlocale ( LC_ALL , ""C"" )"	2067:3:64778:64800	684369	1	True				
ANR	684443	CallExpression	"setlocale ( LC_ALL , ""C"" )"		684369	0					
ANR	684444	Callee	setlocale		684369	0					
ANR	684445	Identifier	setlocale		684369	0					
ANR	684446	ArgumentList	LC_ALL		684369	1					
ANR	684447	Argument	LC_ALL		684369	0					
ANR	684448	Identifier	LC_ALL		684369	0					
ANR	684449	Argument	"""C"""		684369	1					
ANR	684450	PrimaryExpression	"""C"""		684369	0					
ANR	684451	ExpressionStatement	"localizer . setLanguageFromName ( ""en"" )"	2068:3:64839:64874	684369	2	True				
ANR	684452	CallExpression	"localizer . setLanguageFromName ( ""en"" )"		684369	0					
ANR	684453	Callee	localizer . setLanguageFromName		684369	0					
ANR	684454	MemberAccess	localizer . setLanguageFromName		684369	0					
ANR	684455	Identifier	localizer		684369	0					
ANR	684456	Identifier	setLanguageFromName		684369	1					
ANR	684457	ArgumentList	"""en"""		684369	1					
ANR	684458	Argument	"""en"""		684369	0					
ANR	684459	PrimaryExpression	"""en"""		684369	0					
ANR	684460	ElseStatement	else		684369	0					
ANR	684461	IfStatement	"if ( isOption ( arg , ""--options=none"" ) )"		684369	0					
ANR	684462	Condition	"isOption ( arg , ""--options=none"" )"	2070:12:64892:64922	684369	0	True				
ANR	684463	CallExpression	"isOption ( arg , ""--options=none"" )"		684369	0					
ANR	684464	Callee	isOption		684369	0					
ANR	684465	Identifier	isOption		684369	0					
ANR	684466	ArgumentList	arg		684369	1					
ANR	684467	Argument	arg		684369	0					
ANR	684468	Identifier	arg		684369	0					
ANR	684469	Argument	"""--options=none"""		684369	1					
ANR	684470	PrimaryExpression	"""--options=none"""		684369	0					
ANR	684471	CompoundStatement		19:2:420:420	684369	1					
ANR	684472	ExpressionStatement	shouldParseOptionsFile = false	2072:3:64933:64963	684369	0	True				
ANR	684473	AssignmentExpression	shouldParseOptionsFile = false		684369	0		=			
ANR	684474	Identifier	shouldParseOptionsFile		684369	0					
ANR	684475	Identifier	false		684369	1					
ANR	684476	ElseStatement	else		684369	0					
ANR	684477	IfStatement	"if ( isParamOption ( arg , ""--options="" ) )"		684369	0					
ANR	684478	Condition	"isParamOption ( arg , ""--options="" )"	2074:12:64981:65012	684369	0	True				
ANR	684479	CallExpression	"isParamOption ( arg , ""--options="" )"		684369	0					
ANR	684480	Callee	isParamOption		684369	0					
ANR	684481	Identifier	isParamOption		684369	0					
ANR	684482	ArgumentList	arg		684369	1					
ANR	684483	Argument	arg		684369	0					
ANR	684484	Identifier	arg		684369	0					
ANR	684485	Argument	"""--options="""		684369	1					
ANR	684486	PrimaryExpression	"""--options="""		684369	0					
ANR	684487	CompoundStatement		23:2:510:510	684369	1					
ANR	684488	ExpressionStatement	"optionsFileName = getParam ( arg , ""--options="" )"	2076:3:65023:65068	684369	0	True				
ANR	684489	AssignmentExpression	"optionsFileName = getParam ( arg , ""--options="" )"		684369	0		=			
ANR	684490	Identifier	optionsFileName		684369	0					
ANR	684491	CallExpression	"getParam ( arg , ""--options="" )"		684369	1					
ANR	684492	Callee	getParam		684369	0					
ANR	684493	Identifier	getParam		684369	0					
ANR	684494	ArgumentList	arg		684369	1					
ANR	684495	Argument	arg		684369	0					
ANR	684496	Identifier	arg		684369	0					
ANR	684497	Argument	"""--options="""		684369	1					
ANR	684498	PrimaryExpression	"""--options="""		684369	0					
ANR	684499	ExpressionStatement	optionsFileRequired = true	2077:3:65073:65099	684369	1	True				
ANR	684500	AssignmentExpression	optionsFileRequired = true		684369	0		=			
ANR	684501	Identifier	optionsFileRequired		684369	0					
ANR	684502	Identifier	true		684369	1					
ANR	684503	IfStatement	if ( optionsFileName . empty ( ) )		684369	2					
ANR	684504	Condition	optionsFileName . empty ( )	2078:7:65108:65130	684369	0	True				
ANR	684505	CallExpression	optionsFileName . empty ( )		684369	0					
ANR	684506	Callee	optionsFileName . empty		684369	0					
ANR	684507	MemberAccess	optionsFileName . empty		684369	0					
ANR	684508	Identifier	optionsFileName		684369	0					
ANR	684509	Identifier	empty		684369	1					
ANR	684510	ArgumentList			684369	1					
ANR	684511	ExpressionStatement	"setOptionsFileName ( "" "" )"	2079:4:65137:65160	684369	1	True				
ANR	684512	CallExpression	"setOptionsFileName ( "" "" )"		684369	0					
ANR	684513	Callee	setOptionsFileName		684369	0					
ANR	684514	Identifier	setOptionsFileName		684369	0					
ANR	684515	ArgumentList	""" """		684369	1					
ANR	684516	Argument	""" """		684369	0					
ANR	684517	PrimaryExpression	""" """		684369	0					
ANR	684518	ElseStatement	else		684369	0					
ANR	684519	IfStatement	"if ( isOption ( arg , ""-h"" ) || isOption ( arg , ""--help"" ) || isOption ( arg , ""-?"" ) )"		684369	0					
ANR	684520	Condition	"isOption ( arg , ""-h"" ) || isOption ( arg , ""--help"" ) || isOption ( arg , ""-?"" )"	2081:12:65178:65270	684369	0	True				
ANR	684521	OrExpression	"isOption ( arg , ""-h"" ) || isOption ( arg , ""--help"" ) || isOption ( arg , ""-?"" )"		684369	0		||			
ANR	684522	CallExpression	"isOption ( arg , ""-h"" )"		684369	0					
ANR	684523	Callee	isOption		684369	0					
ANR	684524	Identifier	isOption		684369	0					
ANR	684525	ArgumentList	arg		684369	1					
ANR	684526	Argument	arg		684369	0					
ANR	684527	Identifier	arg		684369	0					
ANR	684528	Argument	"""-h"""		684369	1					
ANR	684529	PrimaryExpression	"""-h"""		684369	0					
ANR	684530	OrExpression	"isOption ( arg , ""--help"" ) || isOption ( arg , ""-?"" )"		684369	1		||			
ANR	684531	CallExpression	"isOption ( arg , ""--help"" )"		684369	0					
ANR	684532	Callee	isOption		684369	0					
ANR	684533	Identifier	isOption		684369	0					
ANR	684534	ArgumentList	arg		684369	1					
ANR	684535	Argument	arg		684369	0					
ANR	684536	Identifier	arg		684369	0					
ANR	684537	Argument	"""--help"""		684369	1					
ANR	684538	PrimaryExpression	"""--help"""		684369	0					
ANR	684539	CallExpression	"isOption ( arg , ""-?"" )"		684369	1					
ANR	684540	Callee	isOption		684369	0					
ANR	684541	Identifier	isOption		684369	0					
ANR	684542	ArgumentList	arg		684369	1					
ANR	684543	Argument	arg		684369	0					
ANR	684544	Identifier	arg		684369	0					
ANR	684545	Argument	"""-?"""		684369	1					
ANR	684546	PrimaryExpression	"""-?"""		684369	0					
ANR	684547	CompoundStatement		32:2:768:768	684369	1					
ANR	684548	ExpressionStatement	printHelp ( )	2085:3:65281:65292	684369	0	True				
ANR	684549	CallExpression	printHelp ( )		684369	0					
ANR	684550	Callee	printHelp		684369	0					
ANR	684551	Identifier	printHelp		684369	0					
ANR	684552	ArgumentList			684369	1					
ANR	684553	ExpressionStatement	exit ( EXIT_SUCCESS )	2086:3:65297:65315	684369	1	True				
ANR	684554	CallExpression	exit ( EXIT_SUCCESS )		684369	0					
ANR	684555	Callee	exit		684369	0					
ANR	684556	Identifier	exit		684369	0					
ANR	684557	ArgumentList	EXIT_SUCCESS		684369	1					
ANR	684558	Argument	EXIT_SUCCESS		684369	0					
ANR	684559	Identifier	EXIT_SUCCESS		684369	0					
ANR	684560	ElseStatement	else		684369	0					
ANR	684561	IfStatement	"if ( isOption ( arg , ""-!"" ) || isOption ( arg , ""--html"" ) )"		684369	0					
ANR	684562	Condition	"isOption ( arg , ""-!"" ) || isOption ( arg , ""--html"" )"	2088:12:65333:65390	684369	0	True				
ANR	684563	OrExpression	"isOption ( arg , ""-!"" ) || isOption ( arg , ""--html"" )"		684369	0		||			
ANR	684564	CallExpression	"isOption ( arg , ""-!"" )"		684369	0					
ANR	684565	Callee	isOption		684369	0					
ANR	684566	Identifier	isOption		684369	0					
ANR	684567	ArgumentList	arg		684369	1					
ANR	684568	Argument	arg		684369	0					
ANR	684569	Identifier	arg		684369	0					
ANR	684570	Argument	"""-!"""		684369	1					
ANR	684571	PrimaryExpression	"""-!"""		684369	0					
ANR	684572	CallExpression	"isOption ( arg , ""--html"" )"		684369	1					
ANR	684573	Callee	isOption		684369	0					
ANR	684574	Identifier	isOption		684369	0					
ANR	684575	ArgumentList	arg		684369	1					
ANR	684576	Argument	arg		684369	0					
ANR	684577	Identifier	arg		684369	0					
ANR	684578	Argument	"""--html"""		684369	1					
ANR	684579	PrimaryExpression	"""--html"""		684369	0					
ANR	684580	CompoundStatement		38:2:888:888	684369	1					
ANR	684581	ExpressionStatement	launchDefaultBrowser ( )	2091:3:65401:65423	684369	0	True				
ANR	684582	CallExpression	launchDefaultBrowser ( )		684369	0					
ANR	684583	Callee	launchDefaultBrowser		684369	0					
ANR	684584	Identifier	launchDefaultBrowser		684369	0					
ANR	684585	ArgumentList			684369	1					
ANR	684586	ExpressionStatement	exit ( EXIT_SUCCESS )	2092:3:65428:65446	684369	1	True				
ANR	684587	CallExpression	exit ( EXIT_SUCCESS )		684369	0					
ANR	684588	Callee	exit		684369	0					
ANR	684589	Identifier	exit		684369	0					
ANR	684590	ArgumentList	EXIT_SUCCESS		684369	1					
ANR	684591	Argument	EXIT_SUCCESS		684369	0					
ANR	684592	Identifier	EXIT_SUCCESS		684369	0					
ANR	684593	ElseStatement	else		684369	0					
ANR	684594	IfStatement	"if ( isParamOption ( arg , ""--html="" ) )"		684369	0					
ANR	684595	Condition	"isParamOption ( arg , ""--html="" )"	2094:12:65464:65492	684369	0	True				
ANR	684596	CallExpression	"isParamOption ( arg , ""--html="" )"		684369	0					
ANR	684597	Callee	isParamOption		684369	0					
ANR	684598	Identifier	isParamOption		684369	0					
ANR	684599	ArgumentList	arg		684369	1					
ANR	684600	Argument	arg		684369	0					
ANR	684601	Identifier	arg		684369	0					
ANR	684602	Argument	"""--html="""		684369	1					
ANR	684603	PrimaryExpression	"""--html="""		684369	0					
ANR	684604	CompoundStatement		44:3:995:1041	684369	1					
ANR	684605	IdentifierDeclStatement	"string htmlFilePath = getParam ( arg , ""--html="" ) ;"	2096:3:65503:65549	684369	0	True				
ANR	684606	IdentifierDecl	"htmlFilePath = getParam ( arg , ""--html="" )"		684369	0					
ANR	684607	IdentifierDeclType	string		684369	0					
ANR	684608	Identifier	htmlFilePath		684369	1					
ANR	684609	AssignmentExpression	"htmlFilePath = getParam ( arg , ""--html="" )"		684369	2		=			
ANR	684610	Identifier	htmlFilePath		684369	0					
ANR	684611	CallExpression	"getParam ( arg , ""--html="" )"		684369	1					
ANR	684612	Callee	getParam		684369	0					
ANR	684613	Identifier	getParam		684369	0					
ANR	684614	ArgumentList	arg		684369	1					
ANR	684615	Argument	arg		684369	0					
ANR	684616	Identifier	arg		684369	0					
ANR	684617	Argument	"""--html="""		684369	1					
ANR	684618	PrimaryExpression	"""--html="""		684369	0					
ANR	684619	ExpressionStatement	launchDefaultBrowser ( htmlFilePath . c_str ( ) )	2097:3:65554:65596	684369	1	True				
ANR	684620	CallExpression	launchDefaultBrowser ( htmlFilePath . c_str ( ) )		684369	0					
ANR	684621	Callee	launchDefaultBrowser		684369	0					
ANR	684622	Identifier	launchDefaultBrowser		684369	0					
ANR	684623	ArgumentList	htmlFilePath . c_str ( )		684369	1					
ANR	684624	Argument	htmlFilePath . c_str ( )		684369	0					
ANR	684625	CallExpression	htmlFilePath . c_str ( )		684369	0					
ANR	684626	Callee	htmlFilePath . c_str		684369	0					
ANR	684627	MemberAccess	htmlFilePath . c_str		684369	0					
ANR	684628	Identifier	htmlFilePath		684369	0					
ANR	684629	Identifier	c_str		684369	1					
ANR	684630	ArgumentList			684369	1					
ANR	684631	ExpressionStatement	exit ( EXIT_SUCCESS )	2098:3:65601:65619	684369	2	True				
ANR	684632	CallExpression	exit ( EXIT_SUCCESS )		684369	0					
ANR	684633	Callee	exit		684369	0					
ANR	684634	Identifier	exit		684369	0					
ANR	684635	ArgumentList	EXIT_SUCCESS		684369	1					
ANR	684636	Argument	EXIT_SUCCESS		684369	0					
ANR	684637	Identifier	EXIT_SUCCESS		684369	0					
ANR	684638	ElseStatement	else		684369	0					
ANR	684639	IfStatement	"if ( isOption ( arg , ""-V"" ) || isOption ( arg , ""--version"" ) )"		684369	0					
ANR	684640	Condition	"isOption ( arg , ""-V"" ) || isOption ( arg , ""--version"" )"	2100:12:65637:65698	684369	0	True				
ANR	684641	OrExpression	"isOption ( arg , ""-V"" ) || isOption ( arg , ""--version"" )"		684369	0		||			
ANR	684642	CallExpression	"isOption ( arg , ""-V"" )"		684369	0					
ANR	684643	Callee	isOption		684369	0					
ANR	684644	Identifier	isOption		684369	0					
ANR	684645	ArgumentList	arg		684369	1					
ANR	684646	Argument	arg		684369	0					
ANR	684647	Identifier	arg		684369	0					
ANR	684648	Argument	"""-V"""		684369	1					
ANR	684649	PrimaryExpression	"""-V"""		684369	0					
ANR	684650	CallExpression	"isOption ( arg , ""--version"" )"		684369	1					
ANR	684651	Callee	isOption		684369	0					
ANR	684652	Identifier	isOption		684369	0					
ANR	684653	ArgumentList	arg		684369	1					
ANR	684654	Argument	arg		684369	0					
ANR	684655	Identifier	arg		684369	0					
ANR	684656	Argument	"""--version"""		684369	1					
ANR	684657	PrimaryExpression	"""--version"""		684369	0					
ANR	684658	CompoundStatement		50:2:1196:1196	684369	1					
ANR	684659	ExpressionStatement	"printf ( ""Artistic Style Version %s\\n"" , g_version )"	2103:3:65709:65757	684369	0	True				
ANR	684660	CallExpression	"printf ( ""Artistic Style Version %s\\n"" , g_version )"		684369	0					
ANR	684661	Callee	printf		684369	0					
ANR	684662	Identifier	printf		684369	0					
ANR	684663	ArgumentList	"""Artistic Style Version %s\\n"""		684369	1					
ANR	684664	Argument	"""Artistic Style Version %s\\n"""		684369	0					
ANR	684665	PrimaryExpression	"""Artistic Style Version %s\\n"""		684369	0					
ANR	684666	Argument	g_version		684369	1					
ANR	684667	Identifier	g_version		684369	0					
ANR	684668	ExpressionStatement	exit ( EXIT_SUCCESS )	2104:3:65762:65780	684369	1	True				
ANR	684669	CallExpression	exit ( EXIT_SUCCESS )		684369	0					
ANR	684670	Callee	exit		684369	0					
ANR	684671	Identifier	exit		684369	0					
ANR	684672	ArgumentList	EXIT_SUCCESS		684369	1					
ANR	684673	Argument	EXIT_SUCCESS		684369	0					
ANR	684674	Identifier	EXIT_SUCCESS		684369	0					
ANR	684675	ElseStatement	else		684369	0					
ANR	684676	IfStatement	if ( arg [ 0 ] == '-' )		684369	0					
ANR	684677	Condition	arg [ 0 ] == '-'	2106:11:65797:65809	684369	0	True				
ANR	684678	EqualityExpression	arg [ 0 ] == '-'		684369	0		==			
ANR	684679	ArrayIndexing	arg [ 0 ]		684369	0					
ANR	684680	Identifier	arg		684369	0					
ANR	684681	PrimaryExpression	0		684369	1					
ANR	684682	PrimaryExpression	'-'		684369	1					
ANR	684683	CompoundStatement		55:2:1306:1306	684369	1					
ANR	684684	ExpressionStatement	optionsVector . emplace_back ( arg )	2108:3:65819:65850	684369	0	True				
ANR	684685	CallExpression	optionsVector . emplace_back ( arg )		684369	0					
ANR	684686	Callee	optionsVector . emplace_back		684369	0					
ANR	684687	MemberAccess	optionsVector . emplace_back		684369	0					
ANR	684688	Identifier	optionsVector		684369	0					
ANR	684689	Identifier	emplace_back		684369	1					
ANR	684690	ArgumentList	arg		684369	1					
ANR	684691	Argument	arg		684369	0					
ANR	684692	Identifier	arg		684369	0					
ANR	684693	ElseStatement	else		684369	0					
ANR	684694	CompoundStatement		59:2:1370:1370	684369	0					
ANR	684695	ExpressionStatement	standardizePath ( arg )	2112:3:65883:65903	684369	0	True				
ANR	684696	CallExpression	standardizePath ( arg )		684369	0					
ANR	684697	Callee	standardizePath		684369	0					
ANR	684698	Identifier	standardizePath		684369	0					
ANR	684699	ArgumentList	arg		684369	1					
ANR	684700	Argument	arg		684369	0					
ANR	684701	Identifier	arg		684369	0					
ANR	684702	ExpressionStatement	fileNameVector . emplace_back ( arg )	2113:3:65908:65940	684369	1	True				
ANR	684703	CallExpression	fileNameVector . emplace_back ( arg )		684369	0					
ANR	684704	Callee	fileNameVector . emplace_back		684369	0					
ANR	684705	MemberAccess	fileNameVector . emplace_back		684369	0					
ANR	684706	Identifier	fileNameVector		684369	0					
ANR	684707	Identifier	emplace_back		684369	1					
ANR	684708	ArgumentList	arg		684369	1					
ANR	684709	Argument	arg		684369	0					
ANR	684710	Identifier	arg		684369	0					
ANR	684711	IfStatement	if ( shouldParseOptionsFile )		684369	4					
ANR	684712	Condition	shouldParseOptionsFile	2118:5:65990:66011	684369	0	True				
ANR	684713	Identifier	shouldParseOptionsFile		684369	0					
ANR	684714	CompoundStatement		67:1:1507:1507	684369	1					
ANR	684715	IfStatement	if ( optionsFileName . empty ( ) )		684369	0					
ANR	684716	Condition	optionsFileName . empty ( )	2120:6:66023:66045	684369	0	True				
ANR	684717	CallExpression	optionsFileName . empty ( )		684369	0					
ANR	684718	Callee	optionsFileName . empty		684369	0					
ANR	684719	MemberAccess	optionsFileName . empty		684369	0					
ANR	684720	Identifier	optionsFileName		684369	0					
ANR	684721	Identifier	empty		684369	1					
ANR	684722	ArgumentList			684369	1					
ANR	684723	CompoundStatement		70:3:1547:1591	684369	1					
ANR	684724	IdentifierDeclStatement	"char * env = getenv ( ""ARTISTIC_STYLE_OPTIONS"" ) ;"	2122:3:66055:66099	684369	0	True				
ANR	684725	IdentifierDecl	"* env = getenv ( ""ARTISTIC_STYLE_OPTIONS"" )"		684369	0					
ANR	684726	IdentifierDeclType	char *		684369	0					
ANR	684727	Identifier	env		684369	1					
ANR	684728	AssignmentExpression	"* env = getenv ( ""ARTISTIC_STYLE_OPTIONS"" )"		684369	2		=			
ANR	684729	Identifier	env		684369	0					
ANR	684730	CallExpression	"getenv ( ""ARTISTIC_STYLE_OPTIONS"" )"		684369	1					
ANR	684731	Callee	getenv		684369	0					
ANR	684732	Identifier	getenv		684369	0					
ANR	684733	ArgumentList	"""ARTISTIC_STYLE_OPTIONS"""		684369	1					
ANR	684734	Argument	"""ARTISTIC_STYLE_OPTIONS"""		684369	0					
ANR	684735	PrimaryExpression	"""ARTISTIC_STYLE_OPTIONS"""		684369	0					
ANR	684736	IfStatement	if ( env != nullptr )		684369	1					
ANR	684737	Condition	env != nullptr	2123:7:66108:66121	684369	0	True				
ANR	684738	EqualityExpression	env != nullptr		684369	0		!=			
ANR	684739	Identifier	env		684369	0					
ANR	684740	Identifier	nullptr		684369	1					
ANR	684741	ExpressionStatement	setOptionsFileName ( env )	2124:4:66128:66151	684369	1	True				
ANR	684742	CallExpression	setOptionsFileName ( env )		684369	0					
ANR	684743	Callee	setOptionsFileName		684369	0					
ANR	684744	Identifier	setOptionsFileName		684369	0					
ANR	684745	ArgumentList	env		684369	1					
ANR	684746	Argument	env		684369	0					
ANR	684747	Identifier	env		684369	0					
ANR	684748	IfStatement	if ( optionsFileName . empty ( ) )		684369	1					
ANR	684749	Condition	optionsFileName . empty ( )	2126:6:66163:66185	684369	0	True				
ANR	684750	CallExpression	optionsFileName . empty ( )		684369	0					
ANR	684751	Callee	optionsFileName . empty		684369	0					
ANR	684752	MemberAccess	optionsFileName . empty		684369	0					
ANR	684753	Identifier	optionsFileName		684369	0					
ANR	684754	Identifier	empty		684369	1					
ANR	684755	ArgumentList			684369	1					
ANR	684756	CompoundStatement		76:3:1687:1713	684369	1					
ANR	684757	IdentifierDeclStatement	"char * env = getenv ( ""HOME"" ) ;"	2128:3:66195:66221	684369	0	True				
ANR	684758	IdentifierDecl	"* env = getenv ( ""HOME"" )"		684369	0					
ANR	684759	IdentifierDeclType	char *		684369	0					
ANR	684760	Identifier	env		684369	1					
ANR	684761	AssignmentExpression	"* env = getenv ( ""HOME"" )"		684369	2		=			
ANR	684762	Identifier	env		684369	0					
ANR	684763	CallExpression	"getenv ( ""HOME"" )"		684369	1					
ANR	684764	Callee	getenv		684369	0					
ANR	684765	Identifier	getenv		684369	0					
ANR	684766	ArgumentList	"""HOME"""		684369	1					
ANR	684767	Argument	"""HOME"""		684369	0					
ANR	684768	PrimaryExpression	"""HOME"""		684369	0					
ANR	684769	IfStatement	if ( env != nullptr )		684369	1					
ANR	684770	Condition	env != nullptr	2129:7:66230:66243	684369	0	True				
ANR	684771	EqualityExpression	env != nullptr		684369	0		!=			
ANR	684772	Identifier	env		684369	0					
ANR	684773	Identifier	nullptr		684369	1					
ANR	684774	ExpressionStatement	"setOptionsFileName ( string ( env ) + ""/.astylerc"" )"	2130:4:66250:66296	684369	1	True				
ANR	684775	CallExpression	"setOptionsFileName ( string ( env ) + ""/.astylerc"" )"		684369	0					
ANR	684776	Callee	setOptionsFileName		684369	0					
ANR	684777	Identifier	setOptionsFileName		684369	0					
ANR	684778	ArgumentList	"string ( env ) + ""/.astylerc"""		684369	1					
ANR	684779	Argument	"string ( env ) + ""/.astylerc"""		684369	0					
ANR	684780	AdditiveExpression	"string ( env ) + ""/.astylerc"""		684369	0		+			
ANR	684781	CallExpression	string ( env )		684369	0					
ANR	684782	Callee	string		684369	0					
ANR	684783	Identifier	string		684369	0					
ANR	684784	ArgumentList	env		684369	1					
ANR	684785	Argument	env		684369	0					
ANR	684786	Identifier	env		684369	0					
ANR	684787	PrimaryExpression	"""/.astylerc"""		684369	1					
ANR	684788	IfStatement	if ( optionsFileName . empty ( ) )		684369	2					
ANR	684789	Condition	optionsFileName . empty ( )	2132:6:66308:66330	684369	0	True				
ANR	684790	CallExpression	optionsFileName . empty ( )		684369	0					
ANR	684791	Callee	optionsFileName . empty		684369	0					
ANR	684792	MemberAccess	optionsFileName . empty		684369	0					
ANR	684793	Identifier	optionsFileName		684369	0					
ANR	684794	Identifier	empty		684369	1					
ANR	684795	ArgumentList			684369	1					
ANR	684796	CompoundStatement		82:3:1832:1865	684369	1					
ANR	684797	IdentifierDeclStatement	"char * env = getenv ( ""USERPROFILE"" ) ;"	2134:3:66340:66373	684369	0	True				
ANR	684798	IdentifierDecl	"* env = getenv ( ""USERPROFILE"" )"		684369	0					
ANR	684799	IdentifierDeclType	char *		684369	0					
ANR	684800	Identifier	env		684369	1					
ANR	684801	AssignmentExpression	"* env = getenv ( ""USERPROFILE"" )"		684369	2		=			
ANR	684802	Identifier	env		684369	0					
ANR	684803	CallExpression	"getenv ( ""USERPROFILE"" )"		684369	1					
ANR	684804	Callee	getenv		684369	0					
ANR	684805	Identifier	getenv		684369	0					
ANR	684806	ArgumentList	"""USERPROFILE"""		684369	1					
ANR	684807	Argument	"""USERPROFILE"""		684369	0					
ANR	684808	PrimaryExpression	"""USERPROFILE"""		684369	0					
ANR	684809	IfStatement	if ( env != nullptr )		684369	1					
ANR	684810	Condition	env != nullptr	2135:7:66382:66395	684369	0	True				
ANR	684811	EqualityExpression	env != nullptr		684369	0		!=			
ANR	684812	Identifier	env		684369	0					
ANR	684813	Identifier	nullptr		684369	1					
ANR	684814	ExpressionStatement	"setOptionsFileName ( string ( env ) + ""/astylerc"" )"	2136:4:66402:66447	684369	1	True				
ANR	684815	CallExpression	"setOptionsFileName ( string ( env ) + ""/astylerc"" )"		684369	0					
ANR	684816	Callee	setOptionsFileName		684369	0					
ANR	684817	Identifier	setOptionsFileName		684369	0					
ANR	684818	ArgumentList	"string ( env ) + ""/astylerc"""		684369	1					
ANR	684819	Argument	"string ( env ) + ""/astylerc"""		684369	0					
ANR	684820	AdditiveExpression	"string ( env ) + ""/astylerc"""		684369	0		+			
ANR	684821	CallExpression	string ( env )		684369	0					
ANR	684822	Callee	string		684369	0					
ANR	684823	Identifier	string		684369	0					
ANR	684824	ArgumentList	env		684369	1					
ANR	684825	Argument	env		684369	0					
ANR	684826	Identifier	env		684369	0					
ANR	684827	PrimaryExpression	"""/astylerc"""		684369	1					
ANR	684828	IfStatement	if ( ! optionsFileName . empty ( ) )		684369	3					
ANR	684829	Condition	! optionsFileName . empty ( )	2138:6:66459:66482	684369	0	True				
ANR	684830	UnaryOperationExpression	! optionsFileName . empty ( )		684369	0					
ANR	684831	UnaryOperator	!		684369	0					
ANR	684832	CallExpression	optionsFileName . empty ( )		684369	1					
ANR	684833	Callee	optionsFileName . empty		684369	0					
ANR	684834	MemberAccess	optionsFileName . empty		684369	0					
ANR	684835	Identifier	optionsFileName		684369	0					
ANR	684836	Identifier	empty		684369	1					
ANR	684837	ArgumentList			684369	1					
ANR	684838	ExpressionStatement	standardizePath ( optionsFileName )	2139:3:66488:66520	684369	1	True				
ANR	684839	CallExpression	standardizePath ( optionsFileName )		684369	0					
ANR	684840	Callee	standardizePath		684369	0					
ANR	684841	Identifier	standardizePath		684369	0					
ANR	684842	ArgumentList	optionsFileName		684369	1					
ANR	684843	Argument	optionsFileName		684369	0					
ANR	684844	Identifier	optionsFileName		684369	0					
ANR	684845	IdentifierDeclStatement	"ASOptions options ( formatter , * this ) ;"	2143:1:66595:66630	684369	5	True				
ANR	684846	IdentifierDecl	"options ( formatter , * this )"		684369	0					
ANR	684847	IdentifierDeclType	ASOptions		684369	0					
ANR	684848	Identifier	options		684369	1					
ANR	684849	Expression	"formatter , * this"		684369	2					
ANR	684850	Identifier	formatter		684369	0					
ANR	684851	UnaryOperationExpression	* this		684369	1					
ANR	684852	UnaryOperator	*		684369	0					
ANR	684853	Identifier	this		684369	1					
ANR	684854	IfStatement	if ( ! optionsFileName . empty ( ) )		684369	6					
ANR	684855	Condition	! optionsFileName . empty ( )	2144:5:66637:66660	684369	0	True				
ANR	684856	UnaryOperationExpression	! optionsFileName . empty ( )		684369	0					
ANR	684857	UnaryOperator	!		684369	0					
ANR	684858	CallExpression	optionsFileName . empty ( )		684369	1					
ANR	684859	Callee	optionsFileName . empty		684369	0					
ANR	684860	MemberAccess	optionsFileName . empty		684369	0					
ANR	684861	Identifier	optionsFileName		684369	0					
ANR	684862	Identifier	empty		684369	1					
ANR	684863	ArgumentList			684369	1					
ANR	684864	CompoundStatement		94:2:2160:2203	684369	1					
ANR	684865	IdentifierDeclStatement	ifstream optionsIn ( optionsFileName . c_str ( ) ) ;	2146:2:66668:66711	684369	0	True				
ANR	684866	IdentifierDecl	optionsIn ( optionsFileName . c_str ( ) )		684369	0					
ANR	684867	IdentifierDeclType	ifstream		684369	0					
ANR	684868	Identifier	optionsIn		684369	1					
ANR	684869	CallExpression	optionsFileName . c_str ( )		684369	2					
ANR	684870	Callee	optionsFileName . c_str		684369	0					
ANR	684871	MemberAccess	optionsFileName . c_str		684369	0					
ANR	684872	Identifier	optionsFileName		684369	0					
ANR	684873	Identifier	c_str		684369	1					
ANR	684874	ArgumentList			684369	1					
ANR	684875	IfStatement	if ( optionsIn )		684369	1					
ANR	684876	Condition	optionsIn	2147:6:66719:66727	684369	0	True				
ANR	684877	Identifier	optionsIn		684369	0					
ANR	684878	CompoundStatement		96:2:2224:2224	684369	1					
ANR	684879	ExpressionStatement	"options . importOptions ( optionsIn , fileOptionsVector )"	2149:3:66737:66788	684369	0	True				
ANR	684880	CallExpression	"options . importOptions ( optionsIn , fileOptionsVector )"		684369	0					
ANR	684881	Callee	options . importOptions		684369	0					
ANR	684882	MemberAccess	options . importOptions		684369	0					
ANR	684883	Identifier	options		684369	0					
ANR	684884	Identifier	importOptions		684369	1					
ANR	684885	ArgumentList	optionsIn		684369	1					
ANR	684886	Argument	optionsIn		684369	0					
ANR	684887	Identifier	optionsIn		684369	0					
ANR	684888	Argument	fileOptionsVector		684369	1					
ANR	684889	Identifier	fileOptionsVector		684369	0					
ANR	684890	ExpressionStatement	"ok = options . parseOptions ( fileOptionsVector , string ( _ ( ""Invalid option file options:"" ) ) )"	2150:3:66793:66909	684369	1	True				
ANR	684891	AssignmentExpression	"ok = options . parseOptions ( fileOptionsVector , string ( _ ( ""Invalid option file options:"" ) ) )"		684369	0		=			
ANR	684892	Identifier	ok		684369	0					
ANR	684893	CallExpression	"options . parseOptions ( fileOptionsVector , string ( _ ( ""Invalid option file options:"" ) ) )"		684369	1					
ANR	684894	Callee	options . parseOptions		684369	0					
ANR	684895	MemberAccess	options . parseOptions		684369	0					
ANR	684896	Identifier	options		684369	0					
ANR	684897	Identifier	parseOptions		684369	1					
ANR	684898	ArgumentList	fileOptionsVector		684369	1					
ANR	684899	Argument	fileOptionsVector		684369	0					
ANR	684900	Identifier	fileOptionsVector		684369	0					
ANR	684901	Argument	"string ( _ ( ""Invalid option file options:"" ) )"		684369	1					
ANR	684902	CallExpression	"string ( _ ( ""Invalid option file options:"" ) )"		684369	0					
ANR	684903	Callee	string		684369	0					
ANR	684904	Identifier	string		684369	0					
ANR	684905	ArgumentList	"_ ( ""Invalid option file options:"" )"		684369	1					
ANR	684906	Argument	"_ ( ""Invalid option file options:"" )"		684369	0					
ANR	684907	CallExpression	"_ ( ""Invalid option file options:"" )"		684369	0					
ANR	684908	Callee	_		684369	0					
ANR	684909	Identifier	_		684369	0					
ANR	684910	ArgumentList	"""Invalid option file options:"""		684369	1					
ANR	684911	Argument	"""Invalid option file options:"""		684369	0					
ANR	684912	PrimaryExpression	"""Invalid option file options:"""		684369	0					
ANR	684913	ElseStatement	else		684369	0					
ANR	684914	CompoundStatement		102:2:2416:2416	684369	0					
ANR	684915	IfStatement	if ( optionsFileRequired )		684369	0					
ANR	684916	Condition	optionsFileRequired	2155:7:66933:66951	684369	0	True				
ANR	684917	Identifier	optionsFileRequired		684369	0					
ANR	684918	ExpressionStatement	"error ( _ ( ""Cannot open options file"" ) , optionsFileName . c_str ( ) )"	2156:4:66958:67019	684369	1	True				
ANR	684919	CallExpression	"error ( _ ( ""Cannot open options file"" ) , optionsFileName . c_str ( ) )"		684369	0					
ANR	684920	Callee	error		684369	0					
ANR	684921	Identifier	error		684369	0					
ANR	684922	ArgumentList	"_ ( ""Cannot open options file"" )"		684369	1					
ANR	684923	Argument	"_ ( ""Cannot open options file"" )"		684369	0					
ANR	684924	CallExpression	"_ ( ""Cannot open options file"" )"		684369	0					
ANR	684925	Callee	_		684369	0					
ANR	684926	Identifier	_		684369	0					
ANR	684927	ArgumentList	"""Cannot open options file"""		684369	1					
ANR	684928	Argument	"""Cannot open options file"""		684369	0					
ANR	684929	PrimaryExpression	"""Cannot open options file"""		684369	0					
ANR	684930	Argument	optionsFileName . c_str ( )		684369	1					
ANR	684931	CallExpression	optionsFileName . c_str ( )		684369	0					
ANR	684932	Callee	optionsFileName . c_str		684369	0					
ANR	684933	MemberAccess	optionsFileName . c_str		684369	0					
ANR	684934	Identifier	optionsFileName		684369	0					
ANR	684935	Identifier	c_str		684369	1					
ANR	684936	ArgumentList			684369	1					
ANR	684937	ExpressionStatement	optionsFileName . clear ( )	2157:3:67024:67047	684369	1	True				
ANR	684938	CallExpression	optionsFileName . clear ( )		684369	0					
ANR	684939	Callee	optionsFileName . clear		684369	0					
ANR	684940	MemberAccess	optionsFileName . clear		684369	0					
ANR	684941	Identifier	optionsFileName		684369	0					
ANR	684942	Identifier	clear		684369	1					
ANR	684943	ArgumentList			684369	1					
ANR	684944	ExpressionStatement	optionsIn . close ( )	2159:2:67055:67072	684369	2	True				
ANR	684945	CallExpression	optionsIn . close ( )		684369	0					
ANR	684946	Callee	optionsIn . close		684369	0					
ANR	684947	MemberAccess	optionsIn . close		684369	0					
ANR	684948	Identifier	optionsIn		684369	0					
ANR	684949	Identifier	close		684369	1					
ANR	684950	ArgumentList			684369	1					
ANR	684951	IfStatement	if ( ! ok )		684369	7					
ANR	684952	Condition	! ok	2161:5:67082:67084	684369	0	True				
ANR	684953	UnaryOperationExpression	! ok		684369	0					
ANR	684954	UnaryOperator	!		684369	0					
ANR	684955	Identifier	ok		684369	1					
ANR	684956	CompoundStatement		110:1:2580:2580	684369	1					
ANR	684957	ExpressionStatement	( * errorStream ) << options . getOptionErrors ( ) << endl	2163:2:67092:67143	684369	0	True				
ANR	684958	ShiftExpression	( * errorStream ) << options . getOptionErrors ( ) << endl		684369	0		<<			
ANR	684959	UnaryOperationExpression	* errorStream		684369	0					
ANR	684960	UnaryOperator	*		684369	0					
ANR	684961	Identifier	errorStream		684369	1					
ANR	684962	ShiftExpression	options . getOptionErrors ( ) << endl		684369	1		<<			
ANR	684963	CallExpression	options . getOptionErrors ( )		684369	0					
ANR	684964	Callee	options . getOptionErrors		684369	0					
ANR	684965	MemberAccess	options . getOptionErrors		684369	0					
ANR	684966	Identifier	options		684369	0					
ANR	684967	Identifier	getOptionErrors		684369	1					
ANR	684968	ArgumentList			684369	1					
ANR	684969	Identifier	endl		684369	1					
ANR	684970	ExpressionStatement	"( * errorStream ) << _ ( ""For help on options type 'astyle -h'"" ) << endl"	2164:2:67147:67214	684369	1	True				
ANR	684971	ShiftExpression	"( * errorStream ) << _ ( ""For help on options type 'astyle -h'"" ) << endl"		684369	0		<<			
ANR	684972	UnaryOperationExpression	* errorStream		684369	0					
ANR	684973	UnaryOperator	*		684369	0					
ANR	684974	Identifier	errorStream		684369	1					
ANR	684975	ShiftExpression	"_ ( ""For help on options type 'astyle -h'"" ) << endl"		684369	1		<<			
ANR	684976	CallExpression	"_ ( ""For help on options type 'astyle -h'"" )"		684369	0					
ANR	684977	Callee	_		684369	0					
ANR	684978	Identifier	_		684369	0					
ANR	684979	ArgumentList	"""For help on options type 'astyle -h'"""		684369	1					
ANR	684980	Argument	"""For help on options type 'astyle -h'"""		684369	0					
ANR	684981	PrimaryExpression	"""For help on options type 'astyle -h'"""		684369	0					
ANR	684982	Identifier	endl		684369	1					
ANR	684983	ExpressionStatement	error ( )	2165:2:67218:67225	684369	2	True				
ANR	684984	CallExpression	error ( )		684369	0					
ANR	684985	Callee	error		684369	0					
ANR	684986	Identifier	error		684369	0					
ANR	684987	ArgumentList			684369	1					
ANR	684988	ExpressionStatement	"ok = options . parseOptions ( optionsVector , string ( _ ( ""Invalid command line options:"" ) ) )"	2169:1:67285:67396	684369	8	True				
ANR	684989	AssignmentExpression	"ok = options . parseOptions ( optionsVector , string ( _ ( ""Invalid command line options:"" ) ) )"		684369	0		=			
ANR	684990	Identifier	ok		684369	0					
ANR	684991	CallExpression	"options . parseOptions ( optionsVector , string ( _ ( ""Invalid command line options:"" ) ) )"		684369	1					
ANR	684992	Callee	options . parseOptions		684369	0					
ANR	684993	MemberAccess	options . parseOptions		684369	0					
ANR	684994	Identifier	options		684369	0					
ANR	684995	Identifier	parseOptions		684369	1					
ANR	684996	ArgumentList	optionsVector		684369	1					
ANR	684997	Argument	optionsVector		684369	0					
ANR	684998	Identifier	optionsVector		684369	0					
ANR	684999	Argument	"string ( _ ( ""Invalid command line options:"" ) )"		684369	1					
ANR	685000	CallExpression	"string ( _ ( ""Invalid command line options:"" ) )"		684369	0					
ANR	685001	Callee	string		684369	0					
ANR	685002	Identifier	string		684369	0					
ANR	685003	ArgumentList	"_ ( ""Invalid command line options:"" )"		684369	1					
ANR	685004	Argument	"_ ( ""Invalid command line options:"" )"		684369	0					
ANR	685005	CallExpression	"_ ( ""Invalid command line options:"" )"		684369	0					
ANR	685006	Callee	_		684369	0					
ANR	685007	Identifier	_		684369	0					
ANR	685008	ArgumentList	"""Invalid command line options:"""		684369	1					
ANR	685009	Argument	"""Invalid command line options:"""		684369	0					
ANR	685010	PrimaryExpression	"""Invalid command line options:"""		684369	0					
ANR	685011	IfStatement	if ( ! ok )		684369	9					
ANR	685012	Condition	! ok	2171:5:67403:67405	684369	0	True				
ANR	685013	UnaryOperationExpression	! ok		684369	0					
ANR	685014	UnaryOperator	!		684369	0					
ANR	685015	Identifier	ok		684369	1					
ANR	685016	CompoundStatement		120:1:2901:2901	684369	1					
ANR	685017	ExpressionStatement	( * errorStream ) << options . getOptionErrors ( ) << endl	2173:2:67413:67464	684369	0	True				
ANR	685018	ShiftExpression	( * errorStream ) << options . getOptionErrors ( ) << endl		684369	0		<<			
ANR	685019	UnaryOperationExpression	* errorStream		684369	0					
ANR	685020	UnaryOperator	*		684369	0					
ANR	685021	Identifier	errorStream		684369	1					
ANR	685022	ShiftExpression	options . getOptionErrors ( ) << endl		684369	1		<<			
ANR	685023	CallExpression	options . getOptionErrors ( )		684369	0					
ANR	685024	Callee	options . getOptionErrors		684369	0					
ANR	685025	MemberAccess	options . getOptionErrors		684369	0					
ANR	685026	Identifier	options		684369	0					
ANR	685027	Identifier	getOptionErrors		684369	1					
ANR	685028	ArgumentList			684369	1					
ANR	685029	Identifier	endl		684369	1					
ANR	685030	ExpressionStatement	"( * errorStream ) << _ ( ""For help on options type 'astyle -h'"" ) << endl"	2174:2:67468:67535	684369	1	True				
ANR	685031	ShiftExpression	"( * errorStream ) << _ ( ""For help on options type 'astyle -h'"" ) << endl"		684369	0		<<			
ANR	685032	UnaryOperationExpression	* errorStream		684369	0					
ANR	685033	UnaryOperator	*		684369	0					
ANR	685034	Identifier	errorStream		684369	1					
ANR	685035	ShiftExpression	"_ ( ""For help on options type 'astyle -h'"" ) << endl"		684369	1		<<			
ANR	685036	CallExpression	"_ ( ""For help on options type 'astyle -h'"" )"		684369	0					
ANR	685037	Callee	_		684369	0					
ANR	685038	Identifier	_		684369	0					
ANR	685039	ArgumentList	"""For help on options type 'astyle -h'"""		684369	1					
ANR	685040	Argument	"""For help on options type 'astyle -h'"""		684369	0					
ANR	685041	PrimaryExpression	"""For help on options type 'astyle -h'"""		684369	0					
ANR	685042	Identifier	endl		684369	1					
ANR	685043	ExpressionStatement	error ( )	2175:2:67539:67546	684369	2	True				
ANR	685044	CallExpression	error ( )		684369	0					
ANR	685045	Callee	error		684369	0					
ANR	685046	Identifier	error		684369	0					
ANR	685047	ArgumentList			684369	1					
ANR	685048	ReturnType	void		684369	1					
ANR	685049	Identifier	ASConsole :: processOptions		684369	2					
ANR	685050	ParameterList	const vector < string > & argvOptions		684369	3					
ANR	685051	Parameter	const vector < string > & argvOptions	2052:31:64472:64504	684369	0	True				
ANR	685052	ParameterType	const vector < string > &		684369	0					
ANR	685053	Identifier	argvOptions		684369	1					
ANR	685054	CFGEntryNode	ENTRY		684369		True				
ANR	685055	CFGExitNode	EXIT		684369		True				
ANR	685056	Symbol	argvOptions . size		684369						
ANR	685057	Symbol	isParamOption		684369						
ANR	685058	Symbol	fileNameVector		684369						
ANR	685059	Symbol	optionsFileName . empty		684369						
ANR	685060	Symbol	string		684369						
ANR	685061	Symbol	isOption		684369						
ANR	685062	Symbol	* argvOptions		684369						
ANR	685063	Symbol	g_version		684369						
ANR	685064	Symbol	htmlFilePath . c_str		684369						
ANR	685065	Symbol	arg		684369						
ANR	685066	Symbol	options		684369						
ANR	685067	Symbol	ok		684369						
ANR	685068	Symbol	optionsIn		684369						
ANR	685069	Symbol	getenv		684369						
ANR	685070	Symbol	_		684369						
ANR	685071	Symbol	optionsVector		684369						
ANR	685072	Symbol	getParam		684369						
ANR	685073	Symbol	errorStream		684369						
ANR	685074	Symbol	false		684369						
ANR	685075	Symbol	this		684369						
ANR	685076	Symbol	i		684369						
ANR	685077	Symbol	optionsFileName . c_str		684369						
ANR	685078	Symbol	optionsFileRequired		684369						
ANR	685079	Symbol	options . parseOptions		684369						
ANR	685080	Symbol	env		684369						
ANR	685081	Symbol	argvOptions		684369						
ANR	685082	Symbol	fileOptionsVector		684369						
ANR	685083	Symbol	* i		684369						
ANR	685084	Symbol	useAscii		684369						
ANR	685085	Symbol	LC_ALL		684369						
ANR	685086	Symbol	EXIT_SUCCESS		684369						
ANR	685087	Symbol	true		684369						
ANR	685088	Symbol	optionsFileName		684369						
ANR	685089	Symbol	localizer		684369						
ANR	685090	Symbol	shouldParseOptionsFile		684369						
ANR	685091	Symbol	htmlFilePath		684369						
ANR	685092	Symbol	nullptr		684369						
ANR	685093	Symbol	* arg		684369						
ANR	685094	Function	ASConsole :: removeFile	2180:0:67594:67846							
ANR	685095	FunctionDef	"ASConsole :: removeFile (const char * fileName_ , const char * errMsg)"		685094	0					
ANR	685096	CompoundStatement		2181:0:67670:67846	685094	0					
ANR	685097	IfStatement	if ( remove ( fileName_ ) != 0 )		685094	0					
ANR	685098	Condition	remove ( fileName_ ) != 0	2182:5:67677:67698	685094	0	True				
ANR	685099	EqualityExpression	remove ( fileName_ ) != 0		685094	0		!=			
ANR	685100	CallExpression	remove ( fileName_ )		685094	0					
ANR	685101	Callee	remove		685094	0					
ANR	685102	Identifier	remove		685094	0					
ANR	685103	ArgumentList	fileName_		685094	1					
ANR	685104	Argument	fileName_		685094	0					
ANR	685105	Identifier	fileName_		685094	0					
ANR	685106	PrimaryExpression	0		685094	1					
ANR	685107	CompoundStatement		3:1:31:31	685094	1					
ANR	685108	IfStatement	if ( errno == ENOENT )		685094	0					
ANR	685109	Condition	errno == ENOENT	2184:6:67710:67724	685094	0	True				
ANR	685110	EqualityExpression	errno == ENOENT		685094	0		==			
ANR	685111	Identifier	errno		685094	0					
ANR	685112	Identifier	ENOENT		685094	1					
ANR	685113	ExpressionStatement	errno = 0	2185:3:67754:67763	685094	1	True				
ANR	685114	AssignmentExpression	errno = 0		685094	0		=			
ANR	685115	Identifier	errno		685094	0					
ANR	685116	PrimaryExpression	0		685094	1					
ANR	685117	IfStatement	if ( errno )		685094	1					
ANR	685118	Condition	errno	2186:6:67771:67775	685094	0	True				
ANR	685119	Identifier	errno		685094	0					
ANR	685120	CompoundStatement		7:2:109:109	685094	1					
ANR	685121	ExpressionStatement	"perror ( ""errno message"" )"	2188:3:67785:67808	685094	0	True				
ANR	685122	CallExpression	"perror ( ""errno message"" )"		685094	0					
ANR	685123	Callee	perror		685094	0					
ANR	685124	Identifier	perror		685094	0					
ANR	685125	ArgumentList	"""errno message"""		685094	1					
ANR	685126	Argument	"""errno message"""		685094	0					
ANR	685127	PrimaryExpression	"""errno message"""		685094	0					
ANR	685128	ExpressionStatement	"error ( errMsg , fileName_ )"	2189:3:67813:67837	685094	1	True				
ANR	685129	CallExpression	"error ( errMsg , fileName_ )"		685094	0					
ANR	685130	Callee	error		685094	0					
ANR	685131	Identifier	error		685094	0					
ANR	685132	ArgumentList	errMsg		685094	1					
ANR	685133	Argument	errMsg		685094	0					
ANR	685134	Identifier	errMsg		685094	0					
ANR	685135	Argument	fileName_		685094	1					
ANR	685136	Identifier	fileName_		685094	0					
ANR	685137	ReturnType	void		685094	1					
ANR	685138	Identifier	ASConsole :: removeFile		685094	2					
ANR	685139	ParameterList	"const char * fileName_ , const char * errMsg"		685094	3					
ANR	685140	Parameter	const char * fileName_	2180:27:67621:67641	685094	0	True				
ANR	685141	ParameterType	const char *		685094	0					
ANR	685142	Identifier	fileName_		685094	1					
ANR	685143	Parameter	const char * errMsg	2180:50:67644:67661	685094	1	True				
ANR	685144	ParameterType	const char *		685094	0					
ANR	685145	Identifier	errMsg		685094	1					
ANR	685146	CFGEntryNode	ENTRY		685094		True				
ANR	685147	CFGExitNode	EXIT		685094		True				
ANR	685148	Symbol	errno		685094						
ANR	685149	Symbol	errMsg		685094						
ANR	685150	Symbol	fileName_		685094						
ANR	685151	Symbol	ENOENT		685094						
ANR	685152	Symbol	remove		685094						
ANR	685153	Function	ASConsole :: renameFile	2195:0:67889:68335							
ANR	685154	FunctionDef	"ASConsole :: renameFile (const char * oldFileName , const char * newFileName , const char * errMsg)"		685153	0					
ANR	685155	CompoundStatement		2196:0:67992:68335	685153	0					
ANR	685156	IdentifierDeclStatement	"int result = rename ( oldFileName , newFileName ) ;"	2197:1:67995:68040	685153	0	True				
ANR	685157	IdentifierDecl	"result = rename ( oldFileName , newFileName )"		685153	0					
ANR	685158	IdentifierDeclType	int		685153	0					
ANR	685159	Identifier	result		685153	1					
ANR	685160	AssignmentExpression	"result = rename ( oldFileName , newFileName )"		685153	2		=			
ANR	685161	Identifier	result		685153	0					
ANR	685162	CallExpression	"rename ( oldFileName , newFileName )"		685153	1					
ANR	685163	Callee	rename		685153	0					
ANR	685164	Identifier	rename		685153	0					
ANR	685165	ArgumentList	oldFileName		685153	1					
ANR	685166	Argument	oldFileName		685153	0					
ANR	685167	Identifier	oldFileName		685153	0					
ANR	685168	Argument	newFileName		685153	1					
ANR	685169	Identifier	newFileName		685153	0					
ANR	685170	IfStatement	if ( result != 0 )		685153	1					
ANR	685171	Condition	result != 0	2198:5:68047:68057	685153	0	True				
ANR	685172	EqualityExpression	result != 0		685153	0		!=			
ANR	685173	Identifier	result		685153	0					
ANR	685174	PrimaryExpression	0		685153	1					
ANR	685175	CompoundStatement		4:1:68:68	685153	1					
ANR	685176	IfStatement	if ( errno == EEXIST )		685153	0					
ANR	685177	Condition	errno == EEXIST	2201:6:68130:68144	685153	0	True				
ANR	685178	EqualityExpression	errno == EEXIST		685153	0		==			
ANR	685179	Identifier	errno		685153	0					
ANR	685180	Identifier	EEXIST		685153	1					
ANR	685181	CompoundStatement		7:2:156:156	685153	1					
ANR	685182	ExpressionStatement	errno = 0	2203:3:68154:68163	685153	0	True				
ANR	685183	AssignmentExpression	errno = 0		685153	0		=			
ANR	685184	Identifier	errno		685153	0					
ANR	685185	PrimaryExpression	0		685153	1					
ANR	685186	ExpressionStatement	waitForRemove ( newFileName )	2204:3:68168:68194	685153	1	True				
ANR	685187	CallExpression	waitForRemove ( newFileName )		685153	0					
ANR	685188	Callee	waitForRemove		685153	0					
ANR	685189	Identifier	waitForRemove		685153	0					
ANR	685190	ArgumentList	newFileName		685153	1					
ANR	685191	Argument	newFileName		685153	0					
ANR	685192	Identifier	newFileName		685153	0					
ANR	685193	ExpressionStatement	"result = rename ( oldFileName , newFileName )"	2205:3:68199:68240	685153	2	True				
ANR	685194	AssignmentExpression	"result = rename ( oldFileName , newFileName )"		685153	0		=			
ANR	685195	Identifier	result		685153	0					
ANR	685196	CallExpression	"rename ( oldFileName , newFileName )"		685153	1					
ANR	685197	Callee	rename		685153	0					
ANR	685198	Identifier	rename		685153	0					
ANR	685199	ArgumentList	oldFileName		685153	1					
ANR	685200	Argument	oldFileName		685153	0					
ANR	685201	Identifier	oldFileName		685153	0					
ANR	685202	Argument	newFileName		685153	1					
ANR	685203	Identifier	newFileName		685153	0					
ANR	685204	IfStatement	if ( result != 0 )		685153	1					
ANR	685205	Condition	result != 0	2207:6:68252:68262	685153	0	True				
ANR	685206	EqualityExpression	result != 0		685153	0		!=			
ANR	685207	Identifier	result		685153	0					
ANR	685208	PrimaryExpression	0		685153	1					
ANR	685209	CompoundStatement		13:2:274:274	685153	1					
ANR	685210	ExpressionStatement	"perror ( ""errno message"" )"	2209:3:68272:68295	685153	0	True				
ANR	685211	CallExpression	"perror ( ""errno message"" )"		685153	0					
ANR	685212	Callee	perror		685153	0					
ANR	685213	Identifier	perror		685153	0					
ANR	685214	ArgumentList	"""errno message"""		685153	1					
ANR	685215	Argument	"""errno message"""		685153	0					
ANR	685216	PrimaryExpression	"""errno message"""		685153	0					
ANR	685217	ExpressionStatement	"error ( errMsg , oldFileName )"	2210:3:68300:68326	685153	1	True				
ANR	685218	CallExpression	"error ( errMsg , oldFileName )"		685153	0					
ANR	685219	Callee	error		685153	0					
ANR	685220	Identifier	error		685153	0					
ANR	685221	ArgumentList	errMsg		685153	1					
ANR	685222	Argument	errMsg		685153	0					
ANR	685223	Identifier	errMsg		685153	0					
ANR	685224	Argument	oldFileName		685153	1					
ANR	685225	Identifier	oldFileName		685153	0					
ANR	685226	ReturnType	void		685153	1					
ANR	685227	Identifier	ASConsole :: renameFile		685153	2					
ANR	685228	ParameterList	"const char * oldFileName , const char * newFileName , const char * errMsg"		685153	3					
ANR	685229	Parameter	const char * oldFileName	2195:27:67916:67938	685153	0	True				
ANR	685230	ParameterType	const char *		685153	0					
ANR	685231	Identifier	oldFileName		685153	1					
ANR	685232	Parameter	const char * newFileName	2195:52:67941:67963	685153	1	True				
ANR	685233	ParameterType	const char *		685153	0					
ANR	685234	Identifier	newFileName		685153	1					
ANR	685235	Parameter	const char * errMsg	2195:77:67966:67983	685153	2	True				
ANR	685236	ParameterType	const char *		685153	0					
ANR	685237	Identifier	errMsg		685153	1					
ANR	685238	CFGEntryNode	ENTRY		685153		True				
ANR	685239	CFGExitNode	EXIT		685153		True				
ANR	685240	Symbol	result		685153						
ANR	685241	Symbol	EEXIST		685153						
ANR	685242	Symbol	errno		685153						
ANR	685243	Symbol	rename		685153						
ANR	685244	Symbol	errMsg		685153						
ANR	685245	Symbol	newFileName		685153						
ANR	685246	Symbol	oldFileName		685153						
ANR	685247	Function	ASConsole :: standardizePath	2218:0:68512:70041							
ANR	685248	FunctionDef	"ASConsole :: standardizePath (string & path , bool removeBeginningSeparator)"		685247	0					
ANR	685249	CompoundStatement		2219:0:68605:70041	685247	0					
ANR	685250	IdentifierDeclStatement	struct FAB fab ;	2221:1:68621:68635	685247	0	True				
ANR	685251	IdentifierDecl	fab		685247	0					
ANR	685252	IdentifierDeclType	struct FAB		685247	0					
ANR	685253	Identifier	fab		685247	1					
ANR	685254	IdentifierDeclStatement	struct NAML naml ;	2222:1:68638:68654	685247	1	True				
ANR	685255	IdentifierDecl	naml		685247	0					
ANR	685256	IdentifierDeclType	struct NAML		685247	0					
ANR	685257	Identifier	naml		685247	1					
ANR	685258	Statement	char	2223:1:68657:68660	685247	2	True				
ANR	685259	Statement	less	2223:6:68662:68665	685247	3	True				
ANR	685260	Statement	[	2223:10:68666:68666	685247	4	True				
ANR	685261	Statement	NAML	2223:11:68667:68670	685247	5	True				
ANR	685262	Statement	C_MAXRSS	2223:16:68672:68679	685247	6	True				
ANR	685263	Statement	]	2223:24:68680:68680	685247	7	True				
ANR	685264	ExpressionStatement		2223:25:68681:68681	685247	8	True				
ANR	685265	Statement	char	2224:1:68684:68687	685247	9	True				
ANR	685266	Statement	sess	2224:6:68689:68692	685247	10	True				
ANR	685267	Statement	[	2224:10:68693:68693	685247	11	True				
ANR	685268	Statement	NAM	2224:11:68694:68696	685247	12	True				
ANR	685269	Statement	C_MAXRSS	2224:15:68698:68705	685247	13	True				
ANR	685270	Statement	]	2224:23:68706:68706	685247	14	True				
ANR	685271	ExpressionStatement		2224:24:68707:68707	685247	15	True				
ANR	685272	IdentifierDeclStatement	int r0_status ;	2225:1:68710:68723	685247	16	True				
ANR	685273	IdentifierDecl	r0_status		685247	0					
ANR	685274	IdentifierDeclType	int		685247	0					
ANR	685275	Identifier	r0_status		685247	1					
ANR	685276	Statement	fab	2229:1:68807:68809	685247	17	True				
ANR	685277	Statement	=	2229:5:68811:68811	685247	18	True				
ANR	685278	IdentifierDeclStatement	cc rms_fab ;	2229:7:68813:68823	685247	19	True				
ANR	685279	IdentifierDecl	rms_fab		685247	0					
ANR	685280	IdentifierDeclType	cc		685247	0					
ANR	685281	Identifier	rms_fab		685247	1					
ANR	685282	Statement	fab	2230:1:68826:68828	685247	20	True				
ANR	685283	Statement	.	2230:4:68829:68829	685247	21	True				
ANR	685284	IdentifierDeclStatement	fab l_fna = ( char * ) - 1 ;	2230:5:68830:68852	685247	22	True				
ANR	685285	IdentifierDecl	l_fna = ( char * ) - 1		685247	0					
ANR	685286	IdentifierDeclType	fab		685247	0					
ANR	685287	Identifier	l_fna		685247	1					
ANR	685288	AssignmentExpression	l_fna = ( char * ) - 1		685247	2		=			
ANR	685289	Identifier	l_fna		685247	0					
ANR	685290	CastExpression	( char * ) - 1		685247	1					
ANR	685291	CastTarget	char *		685247	0					
ANR	685292	UnaryOperationExpression	- 1		685247	1					
ANR	685293	UnaryOperator	-		685247	0					
ANR	685294	PrimaryExpression	1		685247	1					
ANR	685295	Statement	fab	2231:1:68873:68875	685247	23	True				
ANR	685296	Statement	.	2231:4:68876:68876	685247	24	True				
ANR	685297	IdentifierDeclStatement	fab b_fns = 0 ;	2231:5:68877:68890	685247	25	True				
ANR	685298	IdentifierDecl	b_fns = 0		685247	0					
ANR	685299	IdentifierDeclType	fab		685247	0					
ANR	685300	Identifier	b_fns		685247	1					
ANR	685301	AssignmentExpression	b_fns = 0		685247	2		=			
ANR	685302	Identifier	b_fns		685247	0					
ANR	685303	PrimaryExpression	0		685247	1					
ANR	685304	Statement	fab	2232:1:68893:68895	685247	26	True				
ANR	685305	Statement	.	2232:4:68896:68896	685247	27	True				
ANR	685306	IdentifierDeclStatement	fab l_naml = & naml ;	2232:5:68897:68915	685247	28	True				
ANR	685307	IdentifierDecl	l_naml = & naml		685247	0					
ANR	685308	IdentifierDeclType	fab		685247	0					
ANR	685309	Identifier	l_naml		685247	1					
ANR	685310	AssignmentExpression	l_naml = & naml		685247	2		=			
ANR	685311	Identifier	l_naml		685247	0					
ANR	685312	UnaryOperationExpression	& naml		685247	1					
ANR	685313	UnaryOperator	&		685247	0					
ANR	685314	Identifier	naml		685247	1					
ANR	685315	Statement	naml	2233:1:68918:68921	685247	29	True				
ANR	685316	Statement	=	2233:6:68923:68923	685247	30	True				
ANR	685317	IdentifierDeclStatement	cc rms_naml ;	2233:8:68925:68936	685247	31	True				
ANR	685318	IdentifierDecl	rms_naml		685247	0					
ANR	685319	IdentifierDeclType	cc		685247	0					
ANR	685320	Identifier	rms_naml		685247	1					
ANR	685321	ExpressionStatement	"strcpy ( sess , path . c_str ( ) )"	2234:1:68939:68965	685247	32	True				
ANR	685322	CallExpression	"strcpy ( sess , path . c_str ( ) )"		685247	0					
ANR	685323	Callee	strcpy		685247	0					
ANR	685324	Identifier	strcpy		685247	0					
ANR	685325	ArgumentList	sess		685247	1					
ANR	685326	Argument	sess		685247	0					
ANR	685327	Identifier	sess		685247	0					
ANR	685328	Argument	path . c_str ( )		685247	1					
ANR	685329	CallExpression	path . c_str ( )		685247	0					
ANR	685330	Callee	path . c_str		685247	0					
ANR	685331	MemberAccess	path . c_str		685247	0					
ANR	685332	Identifier	path		685247	0					
ANR	685333	Identifier	c_str		685247	1					
ANR	685334	ArgumentList			685247	1					
ANR	685335	Statement	naml	2235:1:68968:68971	685247	33	True				
ANR	685336	Statement	.	2235:5:68972:68972	685247	34	True				
ANR	685337	IdentifierDeclStatement	naml l_long_filename = ( char * ) sess ;	2235:6:68973:69007	685247	35	True				
ANR	685338	IdentifierDecl	l_long_filename = ( char * ) sess		685247	0					
ANR	685339	IdentifierDeclType	naml		685247	0					
ANR	685340	Identifier	l_long_filename		685247	1					
ANR	685341	AssignmentExpression	l_long_filename = ( char * ) sess		685247	2		=			
ANR	685342	Identifier	l_long_filename		685247	0					
ANR	685343	CastExpression	( char * ) sess		685247	1					
ANR	685344	CastTarget	char *		685247	0					
ANR	685345	Identifier	sess		685247	1					
ANR	685346	Statement	naml	2236:1:69010:69013	685247	36	True				
ANR	685347	Statement	.	2236:5:69014:69014	685247	37	True				
ANR	685348	IdentifierDeclStatement	naml l_long_filename_size = path . length ( ) ;	2236:6:69015:69056	685247	38	True				
ANR	685349	IdentifierDecl	l_long_filename_size = path . length ( )		685247	0					
ANR	685350	IdentifierDeclType	naml		685247	0					
ANR	685351	Identifier	l_long_filename_size		685247	1					
ANR	685352	AssignmentExpression	l_long_filename_size = path . length ( )		685247	2		=			
ANR	685353	Identifier	l_long_filename_size		685247	0					
ANR	685354	CallExpression	path . length ( )		685247	1					
ANR	685355	Callee	path . length		685247	0					
ANR	685356	MemberAccess	path . length		685247	0					
ANR	685357	Identifier	path		685247	0					
ANR	685358	Identifier	length		685247	1					
ANR	685359	ArgumentList			685247	1					
ANR	685360	Statement	naml	2237:1:69059:69062	685247	39	True				
ANR	685361	Statement	.	2237:5:69063:69063	685247	40	True				
ANR	685362	IdentifierDeclStatement	naml l_long_expand = less ;	2237:6:69064:69089	685247	41	True				
ANR	685363	IdentifierDecl	l_long_expand = less		685247	0					
ANR	685364	IdentifierDeclType	naml		685247	0					
ANR	685365	Identifier	l_long_expand		685247	1					
ANR	685366	AssignmentExpression	l_long_expand = less		685247	2		=			
ANR	685367	Identifier	less		685247	0					
ANR	685368	Identifier	less		685247	1					
ANR	685369	Statement	naml	2238:1:69092:69095	685247	42	True				
ANR	685370	Statement	.	2238:5:69096:69096	685247	43	True				
ANR	685371	IdentifierDeclStatement	naml l_long_expand_alloc = sizeof ( less ) ;	2238:6:69097:69136	685247	44	True				
ANR	685372	IdentifierDecl	l_long_expand_alloc = sizeof ( less )		685247	0					
ANR	685373	IdentifierDeclType	naml		685247	0					
ANR	685374	Identifier	l_long_expand_alloc		685247	1					
ANR	685375	AssignmentExpression	l_long_expand_alloc = sizeof ( less )		685247	2		=			
ANR	685376	Identifier	l_long_expand_alloc		685247	0					
ANR	685377	SizeofExpression	sizeof ( less )		685247	1					
ANR	685378	Sizeof	sizeof		685247	0					
ANR	685379	SizeofOperand	less		685247	1					
ANR	685380	Statement	naml	2239:1:69139:69142	685247	45	True				
ANR	685381	Statement	.	2239:5:69143:69143	685247	46	True				
ANR	685382	IdentifierDeclStatement	naml l_esa = sess ;	2239:6:69144:69161	685247	47	True				
ANR	685383	IdentifierDecl	l_esa = sess		685247	0					
ANR	685384	IdentifierDeclType	naml		685247	0					
ANR	685385	Identifier	l_esa		685247	1					
ANR	685386	AssignmentExpression	l_esa = sess		685247	2		=			
ANR	685387	Identifier	sess		685247	0					
ANR	685388	Identifier	sess		685247	1					
ANR	685389	Statement	naml	2240:1:69164:69167	685247	48	True				
ANR	685390	Statement	.	2240:5:69168:69168	685247	49	True				
ANR	685391	IdentifierDeclStatement	naml b_ess = sizeof ( sess ) ;	2240:6:69169:69194	685247	50	True				
ANR	685392	IdentifierDecl	b_ess = sizeof ( sess )		685247	0					
ANR	685393	IdentifierDeclType	naml		685247	0					
ANR	685394	Identifier	b_ess		685247	1					
ANR	685395	AssignmentExpression	b_ess = sizeof ( sess )		685247	2		=			
ANR	685396	Identifier	b_ess		685247	0					
ANR	685397	SizeofExpression	sizeof ( sess )		685247	1					
ANR	685398	Sizeof	sizeof		685247	0					
ANR	685399	SizeofOperand	sess		685247	1					
ANR	685400	Statement	naml	2241:1:69197:69200	685247	51	True				
ANR	685401	Statement	.	2241:5:69201:69201	685247	52	True				
ANR	685402	IdentifierDeclStatement	naml v_no_short_upcase = 1 ;	2241:6:69202:69228	685247	53	True				
ANR	685403	IdentifierDecl	v_no_short_upcase = 1		685247	0					
ANR	685404	IdentifierDeclType	naml		685247	0					
ANR	685405	Identifier	v_no_short_upcase		685247	1					
ANR	685406	AssignmentExpression	v_no_short_upcase = 1		685247	2		=			
ANR	685407	Identifier	v_no_short_upcase		685247	0					
ANR	685408	PrimaryExpression	1		685247	1					
ANR	685409	Statement	r0_status	2242:1:69231:69239	685247	54	True				
ANR	685410	Statement	=	2242:11:69241:69241	685247	55	True				
ANR	685411	IdentifierDeclStatement	sys parse ( & fab ) ;	2242:13:69243:69258	685247	56	True				
ANR	685412	IdentifierDecl	parse ( & fab )		685247	0					
ANR	685413	IdentifierDeclType	sys		685247	0					
ANR	685414	Identifier	parse		685247	1					
ANR	685415	UnaryOperationExpression	& fab		685247	2					
ANR	685416	UnaryOperator	&		685247	0					
ANR	685417	Identifier	fab		685247	1					
ANR	685418	Statement	if	2243:1:69261:69262	685247	57	True				
ANR	685419	Statement	(	2243:4:69264:69264	685247	58	True				
ANR	685420	Statement	r0_status	2243:5:69265:69273	685247	59	True				
ANR	685421	Statement	==	2243:15:69275:69276	685247	60	True				
ANR	685422	Statement	RMS	2243:18:69278:69280	685247	61	True				
ANR	685423	Statement	_SYN	2243:22:69282:69285	685247	62	True				
ANR	685424	Statement	)	2243:26:69286:69286	685247	63	True				
ANR	685425	CompoundStatement		26:1:683:683	685247	64					
ANR	685426	ExpressionStatement	"error ( ""File syntax error"" , path . c_str ( ) )"	2245:2:69293:69333	685247	0	True				
ANR	685427	CallExpression	"error ( ""File syntax error"" , path . c_str ( ) )"		685247	0					
ANR	685428	Callee	error		685247	0					
ANR	685429	Identifier	error		685247	0					
ANR	685430	ArgumentList	"""File syntax error"""		685247	1					
ANR	685431	Argument	"""File syntax error"""		685247	0					
ANR	685432	PrimaryExpression	"""File syntax error"""		685247	0					
ANR	685433	Argument	path . c_str ( )		685247	1					
ANR	685434	CallExpression	path . c_str ( )		685247	0					
ANR	685435	Callee	path . c_str		685247	0					
ANR	685436	MemberAccess	path . c_str		685247	0					
ANR	685437	Identifier	path		685247	0					
ANR	685438	Identifier	c_str		685247	1					
ANR	685439	ArgumentList			685247	1					
ANR	685440	ReturnType	void		685247	1					
ANR	685441	Identifier	ASConsole :: standardizePath		685247	2					
ANR	685442	ParameterList	"string & path , bool removeBeginningSeparator"		685247	3					
ANR	685443	Parameter	string & path	2218:32:68544:68555	685247	0	True				
ANR	685444	ParameterType	string &		685247	0					
ANR	685445	Identifier	path		685247	1					
ANR	685446	Parameter	bool removeBeginningSeparator	2218:46:68558:68586	685247	1	True				
ANR	685447	ParameterType	bool		685247	0					
ANR	685448	Identifier	removeBeginningSeparator		685247	1					
ANR	685449	CFGEntryNode	ENTRY		685247		True				
ANR	685450	CFGExitNode	EXIT		685247		True				
ANR	685451	Symbol	path . length		685247						
ANR	685452	Symbol	l_long_expand_alloc		685247						
ANR	685453	Symbol	naml		685247						
ANR	685454	Symbol	rms_naml		685247						
ANR	685455	Symbol	l_long_filename		685247						
ANR	685456	Symbol	& naml		685247						
ANR	685457	Symbol	removeBeginningSeparator		685247						
ANR	685458	Symbol	fab		685247						
ANR	685459	Symbol	rms_fab		685247						
ANR	685460	Symbol	sess		685247						
ANR	685461	Symbol	l_long_expand		685247						
ANR	685462	Symbol	less		685247						
ANR	685463	Symbol	parse		685247						
ANR	685464	Symbol	l_long_filename_size		685247						
ANR	685465	Symbol	path		685247						
ANR	685466	Symbol	l_fna		685247						
ANR	685467	Symbol	b_ess		685247						
ANR	685468	Symbol	path . c_str		685247						
ANR	685469	Symbol	r0_status		685247						
ANR	685470	Symbol	l_naml		685247						
ANR	685471	Symbol	v_no_short_upcase		685247						
ANR	685472	Symbol	l_esa		685247						
ANR	685473	Symbol	b_fns		685247						
ANR	685474	Function	ASConsole :: printMsg	2279:0:70044:70166							
ANR	685475	FunctionDef	"ASConsole :: printMsg (const char * msg , const string & data)"		685474	0					
ANR	685476	CompoundStatement		2280:0:70112:70166	685474	0					
ANR	685477	IfStatement	if ( isQuiet )		685474	0					
ANR	685478	Condition	isQuiet	2281:5:70119:70125	685474	0	True				
ANR	685479	Identifier	isQuiet		685474	0					
ANR	685480	ReturnStatement	return ;	2282:2:70130:70136	685474	1	True				
ANR	685481	ExpressionStatement	"printf ( msg , data . c_str ( ) )"	2283:1:70139:70164	685474	1	True				
ANR	685482	CallExpression	"printf ( msg , data . c_str ( ) )"		685474	0					
ANR	685483	Callee	printf		685474	0					
ANR	685484	Identifier	printf		685474	0					
ANR	685485	ArgumentList	msg		685474	1					
ANR	685486	Argument	msg		685474	0					
ANR	685487	Identifier	msg		685474	0					
ANR	685488	Argument	data . c_str ( )		685474	1					
ANR	685489	CallExpression	data . c_str ( )		685474	0					
ANR	685490	Callee	data . c_str		685474	0					
ANR	685491	MemberAccess	data . c_str		685474	0					
ANR	685492	Identifier	data		685474	0					
ANR	685493	Identifier	c_str		685474	1					
ANR	685494	ArgumentList			685474	1					
ANR	685495	ReturnType	void		685474	1					
ANR	685496	Identifier	ASConsole :: printMsg		685474	2					
ANR	685497	ParameterList	"const char * msg , const string & data"		685474	3					
ANR	685498	Parameter	const char * msg	2279:25:70069:70083	685474	0	True				
ANR	685499	ParameterType	const char *		685474	0					
ANR	685500	Identifier	msg		685474	1					
ANR	685501	Parameter	const string & data	2279:42:70086:70103	685474	1	True				
ANR	685502	ParameterType	const string &		685474	0					
ANR	685503	Identifier	data		685474	1					
ANR	685504	CFGEntryNode	ENTRY		685474		True				
ANR	685505	CFGExitNode	EXIT		685474		True				
ANR	685506	Symbol	msg		685474						
ANR	685507	Symbol	data		685474						
ANR	685508	Symbol	isQuiet		685474						
ANR	685509	Symbol	data . c_str		685474						
ANR	685510	Function	ASConsole :: printSeparatingLine	2286:0:70169:70307							
ANR	685511	FunctionDef	ASConsole :: printSeparatingLine ()		685510	0					
ANR	685512	CompoundStatement		2287:0:70213:70307	685510	0					
ANR	685513	IdentifierDeclStatement	string line ;	2288:1:70216:70227	685510	0	True				
ANR	685514	IdentifierDecl	line		685510	0					
ANR	685515	IdentifierDeclType	string		685510	0					
ANR	685516	Identifier	line		685510	1					
ANR	685517	ForStatement	for ( size_t i = 0 ; i < 60 ; i ++ )		685510	1					
ANR	685518	ForInit	size_t i = 0 ;	2289:6:70235:70247	685510	0	True				
ANR	685519	IdentifierDeclStatement	size_t i = 0 ;		685510	0					
ANR	685520	IdentifierDecl	i = 0		685510	0					
ANR	685521	IdentifierDeclType	size_t		685510	0					
ANR	685522	Identifier	i		685510	1					
ANR	685523	AssignmentExpression	i = 0		685510	2		=			
ANR	685524	Identifier	i		685510	0					
ANR	685525	PrimaryExpression	0		685510	1					
ANR	685526	Condition	i < 60	2289:20:70249:70254	685510	1	True				
ANR	685527	RelationalExpression	i < 60		685510	0		<			
ANR	685528	Identifier	i		685510	0					
ANR	685529	PrimaryExpression	60		685510	1					
ANR	685530	PostIncDecOperationExpression	i ++	2289:28:70257:70259	685510	2	True				
ANR	685531	Identifier	i		685510	0					
ANR	685532	IncDec	++		685510	1					
ANR	685533	ExpressionStatement	"line . append ( ""-"" )"	2290:2:70264:70280	685510	3	True				
ANR	685534	CallExpression	"line . append ( ""-"" )"		685510	0					
ANR	685535	Callee	line . append		685510	0					
ANR	685536	MemberAccess	line . append		685510	0					
ANR	685537	Identifier	line		685510	0					
ANR	685538	Identifier	append		685510	1					
ANR	685539	ArgumentList	"""-"""		685510	1					
ANR	685540	Argument	"""-"""		685510	0					
ANR	685541	PrimaryExpression	"""-"""		685510	0					
ANR	685542	ExpressionStatement	"printMsg ( ""%s\\n"" , line )"	2291:1:70283:70305	685510	2	True				
ANR	685543	CallExpression	"printMsg ( ""%s\\n"" , line )"		685510	0					
ANR	685544	Callee	printMsg		685510	0					
ANR	685545	Identifier	printMsg		685510	0					
ANR	685546	ArgumentList	"""%s\\n"""		685510	1					
ANR	685547	Argument	"""%s\\n"""		685510	0					
ANR	685548	PrimaryExpression	"""%s\\n"""		685510	0					
ANR	685549	Argument	line		685510	1					
ANR	685550	Identifier	line		685510	0					
ANR	685551	ReturnType	void		685510	1					
ANR	685552	Identifier	ASConsole :: printSeparatingLine		685510	2					
ANR	685553	ParameterList			685510	3					
ANR	685554	CFGEntryNode	ENTRY		685510		True				
ANR	685555	CFGExitNode	EXIT		685510		True				
ANR	685556	Symbol	line		685510						
ANR	685557	Symbol	i		685510						
ANR	685558	Function	ASConsole :: printVerboseHeader	2294:0:70310:70958							
ANR	685559	FunctionDef	ASConsole :: printVerboseHeader ()		685558	0					
ANR	685560	CompoundStatement		2295:0:70353:70958	685558	0					
ANR	685561	ExpressionStatement	assert ( isVerbose )	2296:1:70356:70373	685558	0	True				
ANR	685562	CallExpression	assert ( isVerbose )		685558	0					
ANR	685563	Callee	assert		685558	0					
ANR	685564	Identifier	assert		685558	0					
ANR	685565	ArgumentList	isVerbose		685558	1					
ANR	685566	Argument	isVerbose		685558	0					
ANR	685567	Identifier	isVerbose		685558	0					
ANR	685568	IfStatement	if ( isQuiet )		685558	1					
ANR	685569	Condition	isQuiet	2297:5:70380:70386	685558	0	True				
ANR	685570	Identifier	isQuiet		685558	0					
ANR	685571	ReturnStatement	return ;	2298:2:70391:70397	685558	1	True				
ANR	685572	IdentifierDeclStatement	time_t lt ;	2300:1:70417:70426	685558	2	True				
ANR	685573	IdentifierDecl	lt		685558	0					
ANR	685574	IdentifierDeclType	time_t		685558	0					
ANR	685575	Identifier	lt		685558	1					
ANR	685576	IdentifierDeclStatement	char str [ 20 ] ;	2301:1:70429:70441	685558	3	True				
ANR	685577	IdentifierDecl	str [ 20 ]		685558	0					
ANR	685578	IdentifierDeclType	char [ 20 ]		685558	0					
ANR	685579	Identifier	str		685558	1					
ANR	685580	PrimaryExpression	20		685558	2					
ANR	685581	ExpressionStatement	lt = time ( nullptr )	2302:1:70444:70462	685558	4	True				
ANR	685582	AssignmentExpression	lt = time ( nullptr )		685558	0		=			
ANR	685583	Identifier	lt		685558	0					
ANR	685584	CallExpression	time ( nullptr )		685558	1					
ANR	685585	Callee	time		685558	0					
ANR	685586	Identifier	time		685558	0					
ANR	685587	ArgumentList	nullptr		685558	1					
ANR	685588	Argument	nullptr		685558	0					
ANR	685589	Identifier	nullptr		685558	0					
ANR	685590	IdentifierDeclStatement	struct tm * ptr = localtime ( & lt ) ;	2303:1:70465:70496	685558	5	True				
ANR	685591	IdentifierDecl	* ptr = localtime ( & lt )		685558	0					
ANR	685592	IdentifierDeclType	struct tm *		685558	0					
ANR	685593	Identifier	ptr		685558	1					
ANR	685594	AssignmentExpression	* ptr = localtime ( & lt )		685558	2		=			
ANR	685595	Identifier	ptr		685558	0					
ANR	685596	CallExpression	localtime ( & lt )		685558	1					
ANR	685597	Callee	localtime		685558	0					
ANR	685598	Identifier	localtime		685558	0					
ANR	685599	ArgumentList	& lt		685558	1					
ANR	685600	Argument	& lt		685558	0					
ANR	685601	UnaryOperationExpression	& lt		685558	0					
ANR	685602	UnaryOperator	&		685558	0					
ANR	685603	Identifier	lt		685558	1					
ANR	685604	ExpressionStatement	"strftime ( str , 20 , ""%x"" , ptr )"	2304:1:70499:70527	685558	6	True				
ANR	685605	CallExpression	"strftime ( str , 20 , ""%x"" , ptr )"		685558	0					
ANR	685606	Callee	strftime		685558	0					
ANR	685607	Identifier	strftime		685558	0					
ANR	685608	ArgumentList	str		685558	1					
ANR	685609	Argument	str		685558	0					
ANR	685610	Identifier	str		685558	0					
ANR	685611	Argument	20		685558	1					
ANR	685612	PrimaryExpression	20		685558	0					
ANR	685613	Argument	"""%x"""		685558	2					
ANR	685614	PrimaryExpression	"""%x"""		685558	0					
ANR	685615	Argument	ptr		685558	3					
ANR	685616	Identifier	ptr		685558	0					
ANR	685617	IdentifierDeclStatement	"string header = ""Artistic Style "" + string ( g_version ) ;"	2307:1:70614:70667	685558	7	True				
ANR	685618	IdentifierDecl	"header = ""Artistic Style "" + string ( g_version )"		685558	0					
ANR	685619	IdentifierDeclType	string		685558	0					
ANR	685620	Identifier	header		685558	1					
ANR	685621	AssignmentExpression	"header = ""Artistic Style "" + string ( g_version )"		685558	2		=			
ANR	685622	Identifier	header		685558	0					
ANR	685623	AdditiveExpression	"""Artistic Style "" + string ( g_version )"		685558	1		+			
ANR	685624	PrimaryExpression	"""Artistic Style """		685558	0					
ANR	685625	CallExpression	string ( g_version )		685558	1					
ANR	685626	Callee	string		685558	0					
ANR	685627	Identifier	string		685558	0					
ANR	685628	ArgumentList	g_version		685558	1					
ANR	685629	Argument	g_version		685558	0					
ANR	685630	Identifier	g_version		685558	0					
ANR	685631	IdentifierDeclStatement	size_t numSpaces = 60 - header . length ( ) - strlen ( str ) ;	2308:1:70670:70723	685558	8	True				
ANR	685632	IdentifierDecl	numSpaces = 60 - header . length ( ) - strlen ( str )		685558	0					
ANR	685633	IdentifierDeclType	size_t		685558	0					
ANR	685634	Identifier	numSpaces		685558	1					
ANR	685635	AssignmentExpression	numSpaces = 60 - header . length ( ) - strlen ( str )		685558	2		=			
ANR	685636	Identifier	numSpaces		685558	0					
ANR	685637	AdditiveExpression	60 - header . length ( ) - strlen ( str )		685558	1		-			
ANR	685638	PrimaryExpression	60		685558	0					
ANR	685639	AdditiveExpression	header . length ( ) - strlen ( str )		685558	1		-			
ANR	685640	CallExpression	header . length ( )		685558	0					
ANR	685641	Callee	header . length		685558	0					
ANR	685642	MemberAccess	header . length		685558	0					
ANR	685643	Identifier	header		685558	0					
ANR	685644	Identifier	length		685558	1					
ANR	685645	ArgumentList			685558	1					
ANR	685646	CallExpression	strlen ( str )		685558	1					
ANR	685647	Callee	strlen		685558	0					
ANR	685648	Identifier	strlen		685558	0					
ANR	685649	ArgumentList	str		685558	1					
ANR	685650	Argument	str		685558	0					
ANR	685651	Identifier	str		685558	0					
ANR	685652	ExpressionStatement	"header . append ( numSpaces , ' ' )"	2309:1:70726:70755	685558	9	True				
ANR	685653	CallExpression	"header . append ( numSpaces , ' ' )"		685558	0					
ANR	685654	Callee	header . append		685558	0					
ANR	685655	MemberAccess	header . append		685558	0					
ANR	685656	Identifier	header		685558	0					
ANR	685657	Identifier	append		685558	1					
ANR	685658	ArgumentList	numSpaces		685558	1					
ANR	685659	Argument	numSpaces		685558	0					
ANR	685660	Identifier	numSpaces		685558	0					
ANR	685661	Argument	' '		685558	1					
ANR	685662	PrimaryExpression	' '		685558	0					
ANR	685663	ExpressionStatement	header . append ( str )	2310:1:70758:70776	685558	10	True				
ANR	685664	CallExpression	header . append ( str )		685558	0					
ANR	685665	Callee	header . append		685558	0					
ANR	685666	MemberAccess	header . append		685558	0					
ANR	685667	Identifier	header		685558	0					
ANR	685668	Identifier	append		685558	1					
ANR	685669	ArgumentList	str		685558	1					
ANR	685670	Argument	str		685558	0					
ANR	685671	Identifier	str		685558	0					
ANR	685672	ExpressionStatement	"header . append ( ""\\n"" )"	2311:1:70779:70798	685558	11	True				
ANR	685673	CallExpression	"header . append ( ""\\n"" )"		685558	0					
ANR	685674	Callee	header . append		685558	0					
ANR	685675	MemberAccess	header . append		685558	0					
ANR	685676	Identifier	header		685558	0					
ANR	685677	Identifier	append		685558	1					
ANR	685678	ArgumentList	"""\\n"""		685558	1					
ANR	685679	Argument	"""\\n"""		685558	0					
ANR	685680	PrimaryExpression	"""\\n"""		685558	0					
ANR	685681	ExpressionStatement	"printf ( ""%s"" , header . c_str ( ) )"	2312:1:70801:70829	685558	12	True				
ANR	685682	CallExpression	"printf ( ""%s"" , header . c_str ( ) )"		685558	0					
ANR	685683	Callee	printf		685558	0					
ANR	685684	Identifier	printf		685558	0					
ANR	685685	ArgumentList	"""%s"""		685558	1					
ANR	685686	Argument	"""%s"""		685558	0					
ANR	685687	PrimaryExpression	"""%s"""		685558	0					
ANR	685688	Argument	header . c_str ( )		685558	1					
ANR	685689	CallExpression	header . c_str ( )		685558	0					
ANR	685690	Callee	header . c_str		685558	0					
ANR	685691	MemberAccess	header . c_str		685558	0					
ANR	685692	Identifier	header		685558	0					
ANR	685693	Identifier	c_str		685558	1					
ANR	685694	ArgumentList			685558	1					
ANR	685695	IfStatement	if ( ! optionsFileName . empty ( ) )		685558	13					
ANR	685696	Condition	! optionsFileName . empty ( )	2314:5:70859:70882	685558	0	True				
ANR	685697	UnaryOperationExpression	! optionsFileName . empty ( )		685558	0					
ANR	685698	UnaryOperator	!		685558	0					
ANR	685699	CallExpression	optionsFileName . empty ( )		685558	1					
ANR	685700	Callee	optionsFileName . empty		685558	0					
ANR	685701	MemberAccess	optionsFileName . empty		685558	0					
ANR	685702	Identifier	optionsFileName		685558	0					
ANR	685703	Identifier	empty		685558	1					
ANR	685704	ArgumentList			685558	1					
ANR	685705	ExpressionStatement	"printf ( _ ( ""Using default options file %s\\n"" ) , optionsFileName . c_str ( ) )"	2315:2:70887:70956	685558	1	True				
ANR	685706	CallExpression	"printf ( _ ( ""Using default options file %s\\n"" ) , optionsFileName . c_str ( ) )"		685558	0					
ANR	685707	Callee	printf		685558	0					
ANR	685708	Identifier	printf		685558	0					
ANR	685709	ArgumentList	"_ ( ""Using default options file %s\\n"" )"		685558	1					
ANR	685710	Argument	"_ ( ""Using default options file %s\\n"" )"		685558	0					
ANR	685711	CallExpression	"_ ( ""Using default options file %s\\n"" )"		685558	0					
ANR	685712	Callee	_		685558	0					
ANR	685713	Identifier	_		685558	0					
ANR	685714	ArgumentList	"""Using default options file %s\\n"""		685558	1					
ANR	685715	Argument	"""Using default options file %s\\n"""		685558	0					
ANR	685716	PrimaryExpression	"""Using default options file %s\\n"""		685558	0					
ANR	685717	Argument	optionsFileName . c_str ( )		685558	1					
ANR	685718	CallExpression	optionsFileName . c_str ( )		685558	0					
ANR	685719	Callee	optionsFileName . c_str		685558	0					
ANR	685720	MemberAccess	optionsFileName . c_str		685558	0					
ANR	685721	Identifier	optionsFileName		685558	0					
ANR	685722	Identifier	c_str		685558	1					
ANR	685723	ArgumentList			685558	1					
ANR	685724	ReturnType	void		685558	1					
ANR	685725	Identifier	ASConsole :: printVerboseHeader		685558	2					
ANR	685726	ParameterList			685558	3					
ANR	685727	CFGEntryNode	ENTRY		685558		True				
ANR	685728	CFGExitNode	EXIT		685558		True				
ANR	685729	Symbol	localtime		685558						
ANR	685730	Symbol	numSpaces		685558						
ANR	685731	Symbol	string		685558						
ANR	685732	Symbol	optionsFileName . empty		685558						
ANR	685733	Symbol	isVerbose		685558						
ANR	685734	Symbol	lt		685558						
ANR	685735	Symbol	optionsFileName . c_str		685558						
ANR	685736	Symbol	g_version		685558						
ANR	685737	Symbol	ptr		685558						
ANR	685738	Symbol	str		685558						
ANR	685739	Symbol	strlen		685558						
ANR	685740	Symbol	& lt		685558						
ANR	685741	Symbol	header . c_str		685558						
ANR	685742	Symbol	optionsFileName		685558						
ANR	685743	Symbol	header		685558						
ANR	685744	Symbol	time		685558						
ANR	685745	Symbol	isQuiet		685558						
ANR	685746	Symbol	header . length		685558						
ANR	685747	Symbol	nullptr		685558						
ANR	685748	Symbol	_		685558						
ANR	685749	Function	ASConsole :: printVerboseStats	2318:0:70961:71889							
ANR	685750	FunctionDef	ASConsole :: printVerboseStats (clock_t startTime)		685749	0					
ANR	685751	CompoundStatement		2319:0:71020:71889	685749	0					
ANR	685752	ExpressionStatement	assert ( isVerbose )	2320:1:71023:71040	685749	0	True				
ANR	685753	CallExpression	assert ( isVerbose )		685749	0					
ANR	685754	Callee	assert		685749	0					
ANR	685755	Identifier	assert		685749	0					
ANR	685756	ArgumentList	isVerbose		685749	1					
ANR	685757	Argument	isVerbose		685749	0					
ANR	685758	Identifier	isVerbose		685749	0					
ANR	685759	IfStatement	if ( isQuiet )		685749	1					
ANR	685760	Condition	isQuiet	2321:5:71047:71053	685749	0	True				
ANR	685761	Identifier	isQuiet		685749	0					
ANR	685762	ReturnStatement	return ;	2322:2:71058:71064	685749	1	True				
ANR	685763	IfStatement	if ( hasWildcard )		685749	2					
ANR	685764	Condition	hasWildcard	2323:5:71071:71081	685749	0	True				
ANR	685765	Identifier	hasWildcard		685749	0					
ANR	685766	ExpressionStatement	printSeparatingLine ( )	2324:2:71086:71107	685749	1	True				
ANR	685767	CallExpression	printSeparatingLine ( )		685749	0					
ANR	685768	Callee	printSeparatingLine		685749	0					
ANR	685769	Identifier	printSeparatingLine		685749	0					
ANR	685770	ArgumentList			685749	1					
ANR	685771	IdentifierDeclStatement	string formatted = getNumberFormat ( filesFormatted ) ;	2325:1:71110:71160	685749	3	True				
ANR	685772	IdentifierDecl	formatted = getNumberFormat ( filesFormatted )		685749	0					
ANR	685773	IdentifierDeclType	string		685749	0					
ANR	685774	Identifier	formatted		685749	1					
ANR	685775	AssignmentExpression	formatted = getNumberFormat ( filesFormatted )		685749	2		=			
ANR	685776	Identifier	formatted		685749	0					
ANR	685777	CallExpression	getNumberFormat ( filesFormatted )		685749	1					
ANR	685778	Callee	getNumberFormat		685749	0					
ANR	685779	Identifier	getNumberFormat		685749	0					
ANR	685780	ArgumentList	filesFormatted		685749	1					
ANR	685781	Argument	filesFormatted		685749	0					
ANR	685782	Identifier	filesFormatted		685749	0					
ANR	685783	IdentifierDeclStatement	string unchanged = getNumberFormat ( filesUnchanged ) ;	2326:1:71163:71213	685749	4	True				
ANR	685784	IdentifierDecl	unchanged = getNumberFormat ( filesUnchanged )		685749	0					
ANR	685785	IdentifierDeclType	string		685749	0					
ANR	685786	Identifier	unchanged		685749	1					
ANR	685787	AssignmentExpression	unchanged = getNumberFormat ( filesUnchanged )		685749	2		=			
ANR	685788	Identifier	unchanged		685749	0					
ANR	685789	CallExpression	getNumberFormat ( filesUnchanged )		685749	1					
ANR	685790	Callee	getNumberFormat		685749	0					
ANR	685791	Identifier	getNumberFormat		685749	0					
ANR	685792	ArgumentList	filesUnchanged		685749	1					
ANR	685793	Argument	filesUnchanged		685749	0					
ANR	685794	Identifier	filesUnchanged		685749	0					
ANR	685795	ExpressionStatement	"printf ( _ ( "" %s formatted   %s unchanged   "" ) , formatted . c_str ( ) , unchanged . c_str ( ) )"	2327:1:71216:71298	685749	5	True				
ANR	685796	CallExpression	"printf ( _ ( "" %s formatted   %s unchanged   "" ) , formatted . c_str ( ) , unchanged . c_str ( ) )"		685749	0					
ANR	685797	Callee	printf		685749	0					
ANR	685798	Identifier	printf		685749	0					
ANR	685799	ArgumentList	"_ ( "" %s formatted   %s unchanged   "" )"		685749	1					
ANR	685800	Argument	"_ ( "" %s formatted   %s unchanged   "" )"		685749	0					
ANR	685801	CallExpression	"_ ( "" %s formatted   %s unchanged   "" )"		685749	0					
ANR	685802	Callee	_		685749	0					
ANR	685803	Identifier	_		685749	0					
ANR	685804	ArgumentList	""" %s formatted   %s unchanged   """		685749	1					
ANR	685805	Argument	""" %s formatted   %s unchanged   """		685749	0					
ANR	685806	PrimaryExpression	""" %s formatted   %s unchanged   """		685749	0					
ANR	685807	Argument	formatted . c_str ( )		685749	1					
ANR	685808	CallExpression	formatted . c_str ( )		685749	0					
ANR	685809	Callee	formatted . c_str		685749	0					
ANR	685810	MemberAccess	formatted . c_str		685749	0					
ANR	685811	Identifier	formatted		685749	0					
ANR	685812	Identifier	c_str		685749	1					
ANR	685813	ArgumentList			685749	1					
ANR	685814	Argument	unchanged . c_str ( )		685749	2					
ANR	685815	CallExpression	unchanged . c_str ( )		685749	0					
ANR	685816	Callee	unchanged . c_str		685749	0					
ANR	685817	MemberAccess	unchanged . c_str		685749	0					
ANR	685818	Identifier	unchanged		685749	0					
ANR	685819	Identifier	c_str		685749	1					
ANR	685820	ArgumentList			685749	1					
ANR	685821	IdentifierDeclStatement	clock_t stopTime = clock ( ) ;	2330:1:71327:71353	685749	6	True				
ANR	685822	IdentifierDecl	stopTime = clock ( )		685749	0					
ANR	685823	IdentifierDeclType	clock_t		685749	0					
ANR	685824	Identifier	stopTime		685749	1					
ANR	685825	AssignmentExpression	stopTime = clock ( )		685749	2		=			
ANR	685826	Identifier	stopTime		685749	0					
ANR	685827	CallExpression	clock ( )		685749	1					
ANR	685828	Callee	clock		685749	0					
ANR	685829	Identifier	clock		685749	0					
ANR	685830	ArgumentList			685749	1					
ANR	685831	IdentifierDeclStatement	double secs = ( stopTime - startTime ) / double ( CLOCKS_PER_SEC ) ;	2331:1:71356:71418	685749	7	True				
ANR	685832	IdentifierDecl	secs = ( stopTime - startTime ) / double ( CLOCKS_PER_SEC )		685749	0					
ANR	685833	IdentifierDeclType	double		685749	0					
ANR	685834	Identifier	secs		685749	1					
ANR	685835	AssignmentExpression	secs = ( stopTime - startTime ) / double ( CLOCKS_PER_SEC )		685749	2		=			
ANR	685836	Identifier	secs		685749	0					
ANR	685837	MultiplicativeExpression	( stopTime - startTime ) / double ( CLOCKS_PER_SEC )		685749	1		/			
ANR	685838	AdditiveExpression	stopTime - startTime		685749	0		-			
ANR	685839	Identifier	stopTime		685749	0					
ANR	685840	Identifier	startTime		685749	1					
ANR	685841	CallExpression	double ( CLOCKS_PER_SEC )		685749	1					
ANR	685842	Callee	double		685749	0					
ANR	685843	Identifier	double		685749	0					
ANR	685844	ArgumentList	CLOCKS_PER_SEC		685749	1					
ANR	685845	Argument	CLOCKS_PER_SEC		685749	0					
ANR	685846	Identifier	CLOCKS_PER_SEC		685749	0					
ANR	685847	IfStatement	if ( secs < 60 )		685749	8					
ANR	685848	Condition	secs < 60	2332:5:71425:71433	685749	0	True				
ANR	685849	RelationalExpression	secs < 60		685749	0		<			
ANR	685850	Identifier	secs		685749	0					
ANR	685851	PrimaryExpression	60		685749	1					
ANR	685852	CompoundStatement		15:1:416:416	685749	1					
ANR	685853	IfStatement	if ( secs < 2.0 )		685749	0					
ANR	685854	Condition	secs < 2.0	2334:6:71445:71454	685749	0	True				
ANR	685855	RelationalExpression	secs < 2.0		685749	0		<			
ANR	685856	Identifier	secs		685749	0					
ANR	685857	PrimaryExpression	2.0		685749	1					
ANR	685858	ExpressionStatement	"printf ( ""%.2f"" , secs )"	2335:3:71460:71480	685749	1	True				
ANR	685859	CallExpression	"printf ( ""%.2f"" , secs )"		685749	0					
ANR	685860	Callee	printf		685749	0					
ANR	685861	Identifier	printf		685749	0					
ANR	685862	ArgumentList	"""%.2f"""		685749	1					
ANR	685863	Argument	"""%.2f"""		685749	0					
ANR	685864	PrimaryExpression	"""%.2f"""		685749	0					
ANR	685865	Argument	secs		685749	1					
ANR	685866	Identifier	secs		685749	0					
ANR	685867	ElseStatement	else		685749	0					
ANR	685868	IfStatement	if ( secs < 20.0 )		685749	0					
ANR	685869	Condition	secs < 20.0	2336:11:71493:71503	685749	0	True				
ANR	685870	RelationalExpression	secs < 20.0		685749	0		<			
ANR	685871	Identifier	secs		685749	0					
ANR	685872	PrimaryExpression	20.0		685749	1					
ANR	685873	ExpressionStatement	"printf ( ""%.1f"" , secs )"	2337:3:71509:71529	685749	1	True				
ANR	685874	CallExpression	"printf ( ""%.1f"" , secs )"		685749	0					
ANR	685875	Callee	printf		685749	0					
ANR	685876	Identifier	printf		685749	0					
ANR	685877	ArgumentList	"""%.1f"""		685749	1					
ANR	685878	Argument	"""%.1f"""		685749	0					
ANR	685879	PrimaryExpression	"""%.1f"""		685749	0					
ANR	685880	Argument	secs		685749	1					
ANR	685881	Identifier	secs		685749	0					
ANR	685882	ElseStatement	else		685749	0					
ANR	685883	ExpressionStatement	"printf ( ""%.0f"" , secs )"	2339:3:71541:71561	685749	0	True				
ANR	685884	CallExpression	"printf ( ""%.0f"" , secs )"		685749	0					
ANR	685885	Callee	printf		685749	0					
ANR	685886	Identifier	printf		685749	0					
ANR	685887	ArgumentList	"""%.0f"""		685749	1					
ANR	685888	Argument	"""%.0f"""		685749	0					
ANR	685889	PrimaryExpression	"""%.0f"""		685749	0					
ANR	685890	Argument	secs		685749	1					
ANR	685891	Identifier	secs		685749	0					
ANR	685892	ExpressionStatement	"printf ( ""%s"" , _ ( "" seconds   "" ) )"	2340:2:71565:71595	685749	1	True				
ANR	685893	CallExpression	"printf ( ""%s"" , _ ( "" seconds   "" ) )"		685749	0					
ANR	685894	Callee	printf		685749	0					
ANR	685895	Identifier	printf		685749	0					
ANR	685896	ArgumentList	"""%s"""		685749	1					
ANR	685897	Argument	"""%s"""		685749	0					
ANR	685898	PrimaryExpression	"""%s"""		685749	0					
ANR	685899	Argument	"_ ( "" seconds   "" )"		685749	1					
ANR	685900	CallExpression	"_ ( "" seconds   "" )"		685749	0					
ANR	685901	Callee	_		685749	0					
ANR	685902	Identifier	_		685749	0					
ANR	685903	ArgumentList	""" seconds   """		685749	1					
ANR	685904	Argument	""" seconds   """		685749	0					
ANR	685905	PrimaryExpression	""" seconds   """		685749	0					
ANR	685906	ElseStatement	else		685749	0					
ANR	685907	CompoundStatement		29:2:704:732	685749	0					
ANR	685908	IdentifierDeclStatement	int min = ( int ) secs / 60 ;	2345:2:71676:71701	685749	0	True				
ANR	685909	IdentifierDecl	min = ( int ) secs / 60		685749	0					
ANR	685910	IdentifierDeclType	int		685749	0					
ANR	685911	Identifier	min		685749	1					
ANR	685912	AssignmentExpression	min = ( int ) secs / 60		685749	2		=			
ANR	685913	Identifier	min		685749	0					
ANR	685914	MultiplicativeExpression	( int ) secs / 60		685749	1		/			
ANR	685915	CastExpression	( int ) secs		685749	0					
ANR	685916	CastTarget	int		685749	0					
ANR	685917	Identifier	secs		685749	1					
ANR	685918	PrimaryExpression	60		685749	1					
ANR	685919	ExpressionStatement	secs -= min * 60	2346:2:71705:71721	685749	1	True				
ANR	685920	AssignmentExpression	secs -= min * 60		685749	0		-=			
ANR	685921	Identifier	secs		685749	0					
ANR	685922	MultiplicativeExpression	min * 60		685749	1		*			
ANR	685923	Identifier	min		685749	0					
ANR	685924	PrimaryExpression	60		685749	1					
ANR	685925	IdentifierDeclStatement	int minsec = int ( secs + .5 ) ;	2347:2:71725:71753	685749	2	True				
ANR	685926	IdentifierDecl	minsec = int ( secs + .5 )		685749	0					
ANR	685927	IdentifierDeclType	int		685749	0					
ANR	685928	Identifier	minsec		685749	1					
ANR	685929	AssignmentExpression	minsec = int ( secs + .5 )		685749	2		=			
ANR	685930	Identifier	minsec		685749	0					
ANR	685931	CallExpression	int ( secs + .5 )		685749	1					
ANR	685932	Callee	int		685749	0					
ANR	685933	Identifier	int		685749	0					
ANR	685934	ArgumentList	secs + .5		685749	1					
ANR	685935	Argument	secs + .5		685749	0					
ANR	685936	AdditiveExpression	secs + .5		685749	0		+			
ANR	685937	Identifier	secs		685749	0					
ANR	685938	PrimaryExpression	.5		685749	1					
ANR	685939	ExpressionStatement	"printf ( _ ( ""%d min %d sec   "" ) , min , minsec )"	2348:2:71757:71799	685749	3	True				
ANR	685940	CallExpression	"printf ( _ ( ""%d min %d sec   "" ) , min , minsec )"		685749	0					
ANR	685941	Callee	printf		685749	0					
ANR	685942	Identifier	printf		685749	0					
ANR	685943	ArgumentList	"_ ( ""%d min %d sec   "" )"		685749	1					
ANR	685944	Argument	"_ ( ""%d min %d sec   "" )"		685749	0					
ANR	685945	CallExpression	"_ ( ""%d min %d sec   "" )"		685749	0					
ANR	685946	Callee	_		685749	0					
ANR	685947	Identifier	_		685749	0					
ANR	685948	ArgumentList	"""%d min %d sec   """		685749	1					
ANR	685949	Argument	"""%d min %d sec   """		685749	0					
ANR	685950	PrimaryExpression	"""%d min %d sec   """		685749	0					
ANR	685951	Argument	min		685749	1					
ANR	685952	Identifier	min		685749	0					
ANR	685953	Argument	minsec		685749	2					
ANR	685954	Identifier	minsec		685749	0					
ANR	685955	IdentifierDeclStatement	string lines = getNumberFormat ( linesOut ) ;	2351:1:71806:71846	685749	9	True				
ANR	685956	IdentifierDecl	lines = getNumberFormat ( linesOut )		685749	0					
ANR	685957	IdentifierDeclType	string		685749	0					
ANR	685958	Identifier	lines		685749	1					
ANR	685959	AssignmentExpression	lines = getNumberFormat ( linesOut )		685749	2		=			
ANR	685960	Identifier	lines		685749	0					
ANR	685961	CallExpression	getNumberFormat ( linesOut )		685749	1					
ANR	685962	Callee	getNumberFormat		685749	0					
ANR	685963	Identifier	getNumberFormat		685749	0					
ANR	685964	ArgumentList	linesOut		685749	1					
ANR	685965	Argument	linesOut		685749	0					
ANR	685966	Identifier	linesOut		685749	0					
ANR	685967	ExpressionStatement	"printf ( _ ( ""%s lines\\n"" ) , lines . c_str ( ) )"	2352:1:71849:71887	685749	10	True				
ANR	685968	CallExpression	"printf ( _ ( ""%s lines\\n"" ) , lines . c_str ( ) )"		685749	0					
ANR	685969	Callee	printf		685749	0					
ANR	685970	Identifier	printf		685749	0					
ANR	685971	ArgumentList	"_ ( ""%s lines\\n"" )"		685749	1					
ANR	685972	Argument	"_ ( ""%s lines\\n"" )"		685749	0					
ANR	685973	CallExpression	"_ ( ""%s lines\\n"" )"		685749	0					
ANR	685974	Callee	_		685749	0					
ANR	685975	Identifier	_		685749	0					
ANR	685976	ArgumentList	"""%s lines\\n"""		685749	1					
ANR	685977	Argument	"""%s lines\\n"""		685749	0					
ANR	685978	PrimaryExpression	"""%s lines\\n"""		685749	0					
ANR	685979	Argument	lines . c_str ( )		685749	1					
ANR	685980	CallExpression	lines . c_str ( )		685749	0					
ANR	685981	Callee	lines . c_str		685749	0					
ANR	685982	MemberAccess	lines . c_str		685749	0					
ANR	685983	Identifier	lines		685749	0					
ANR	685984	Identifier	c_str		685749	1					
ANR	685985	ArgumentList			685749	1					
ANR	685986	ReturnType	void		685749	1					
ANR	685987	Identifier	ASConsole :: printVerboseStats		685749	2					
ANR	685988	ParameterList	clock_t startTime		685749	3					
ANR	685989	Parameter	clock_t startTime	2318:34:70995:71011	685749	0	True				
ANR	685990	ParameterType	clock_t		685749	0					
ANR	685991	Identifier	startTime		685749	1					
ANR	685992	CFGEntryNode	ENTRY		685749		True				
ANR	685993	CFGExitNode	EXIT		685749		True				
ANR	685994	Symbol	minsec		685749						
ANR	685995	Symbol	isVerbose		685749						
ANR	685996	Symbol	formatted		685749						
ANR	685997	Symbol	double		685749						
ANR	685998	Symbol	unchanged		685749						
ANR	685999	Symbol	unchanged . c_str		685749						
ANR	686000	Symbol	linesOut		685749						
ANR	686001	Symbol	clock		685749						
ANR	686002	Symbol	int		685749						
ANR	686003	Symbol	filesUnchanged		685749						
ANR	686004	Symbol	getNumberFormat		685749						
ANR	686005	Symbol	min		685749						
ANR	686006	Symbol	formatted . c_str		685749						
ANR	686007	Symbol	CLOCKS_PER_SEC		685749						
ANR	686008	Symbol	filesFormatted		685749						
ANR	686009	Symbol	secs		685749						
ANR	686010	Symbol	startTime		685749						
ANR	686011	Symbol	stopTime		685749						
ANR	686012	Symbol	lines		685749						
ANR	686013	Symbol	isQuiet		685749						
ANR	686014	Symbol	hasWildcard		685749						
ANR	686015	Symbol	lines . c_str		685749						
ANR	686016	Symbol	_		685749						
ANR	686017	Function	ASConsole :: sleep	2355:0:71892:72041							
ANR	686018	FunctionDef	ASConsole :: sleep (int seconds)		686017	0					
ANR	686019	CompoundStatement		2356:0:71933:72041	686017	0					
ANR	686020	IdentifierDeclStatement	clock_t endwait ;	2357:1:71936:71951	686017	0	True				
ANR	686021	IdentifierDecl	endwait		686017	0					
ANR	686022	IdentifierDeclType	clock_t		686017	0					
ANR	686023	Identifier	endwait		686017	1					
ANR	686024	ExpressionStatement	endwait = clock_t ( clock ( ) + seconds * CLOCKS_PER_SEC )	2358:1:71954:72009	686017	1	True				
ANR	686025	AssignmentExpression	endwait = clock_t ( clock ( ) + seconds * CLOCKS_PER_SEC )		686017	0		=			
ANR	686026	Identifier	endwait		686017	0					
ANR	686027	CallExpression	clock_t ( clock ( ) + seconds * CLOCKS_PER_SEC )		686017	1					
ANR	686028	Callee	clock_t		686017	0					
ANR	686029	Identifier	clock_t		686017	0					
ANR	686030	ArgumentList	clock ( ) + seconds * CLOCKS_PER_SEC		686017	1					
ANR	686031	Argument	clock ( ) + seconds * CLOCKS_PER_SEC		686017	0					
ANR	686032	AdditiveExpression	clock ( ) + seconds * CLOCKS_PER_SEC		686017	0		+			
ANR	686033	CallExpression	clock ( )		686017	0					
ANR	686034	Callee	clock		686017	0					
ANR	686035	Identifier	clock		686017	0					
ANR	686036	ArgumentList			686017	1					
ANR	686037	MultiplicativeExpression	seconds * CLOCKS_PER_SEC		686017	1		*			
ANR	686038	Identifier	seconds		686017	0					
ANR	686039	Identifier	CLOCKS_PER_SEC		686017	1					
ANR	686040	WhileStatement	while ( clock ( ) < endwait )		686017	2					
ANR	686041	Condition	clock ( ) < endwait	2359:8:72019:72035	686017	0	True				
ANR	686042	RelationalExpression	clock ( ) < endwait		686017	0		<			
ANR	686043	CallExpression	clock ( )		686017	0					
ANR	686044	Callee	clock		686017	0					
ANR	686045	Identifier	clock		686017	0					
ANR	686046	ArgumentList			686017	1					
ANR	686047	Identifier	endwait		686017	1					
ANR	686048	CompoundStatement		4:27:104:104	686017	1					
ANR	686049	ReturnType	void		686017	1					
ANR	686050	Identifier	ASConsole :: sleep		686017	2					
ANR	686051	ParameterList	int seconds		686017	3					
ANR	686052	Parameter	int seconds	2355:22:71914:71924	686017	0	True				
ANR	686053	ParameterType	int		686017	0					
ANR	686054	Identifier	seconds		686017	1					
ANR	686055	CFGEntryNode	ENTRY		686017		True				
ANR	686056	CFGExitNode	EXIT		686017		True				
ANR	686057	Symbol	seconds		686017						
ANR	686058	Symbol	endwait		686017						
ANR	686059	Symbol	CLOCKS_PER_SEC		686017						
ANR	686060	Symbol	clock		686017						
ANR	686061	Symbol	clock_t		686017						
ANR	686062	Function	ASConsole :: stringEndsWith	2362:0:72044:72470							
ANR	686063	FunctionDef	"ASConsole :: stringEndsWith (const string & str , const string & suffix)"		686062	0					
ANR	686064	CompoundStatement		2363:0:72122:72470	686062	0					
ANR	686065	IdentifierDeclStatement	int strIndex = ( int ) str . length ( ) - 1 ;	2364:1:72125:72162	686062	0	True				
ANR	686066	IdentifierDecl	strIndex = ( int ) str . length ( ) - 1		686062	0					
ANR	686067	IdentifierDeclType	int		686062	0					
ANR	686068	Identifier	strIndex		686062	1					
ANR	686069	AssignmentExpression	strIndex = ( int ) str . length ( ) - 1		686062	2		=			
ANR	686070	Identifier	strIndex		686062	0					
ANR	686071	AdditiveExpression	( int ) str . length ( ) - 1		686062	1		-			
ANR	686072	CastExpression	( int ) str . length ( )		686062	0					
ANR	686073	CastTarget	int		686062	0					
ANR	686074	CallExpression	str . length ( )		686062	1					
ANR	686075	Callee	str . length		686062	0					
ANR	686076	MemberAccess	str . length		686062	0					
ANR	686077	Identifier	str		686062	0					
ANR	686078	Identifier	length		686062	1					
ANR	686079	ArgumentList			686062	1					
ANR	686080	PrimaryExpression	1		686062	1					
ANR	686081	IdentifierDeclStatement	int suffixIndex = ( int ) suffix . length ( ) - 1 ;	2365:1:72165:72208	686062	1	True				
ANR	686082	IdentifierDecl	suffixIndex = ( int ) suffix . length ( ) - 1		686062	0					
ANR	686083	IdentifierDeclType	int		686062	0					
ANR	686084	Identifier	suffixIndex		686062	1					
ANR	686085	AssignmentExpression	suffixIndex = ( int ) suffix . length ( ) - 1		686062	2		=			
ANR	686086	Identifier	suffixIndex		686062	0					
ANR	686087	AdditiveExpression	( int ) suffix . length ( ) - 1		686062	1		-			
ANR	686088	CastExpression	( int ) suffix . length ( )		686062	0					
ANR	686089	CastTarget	int		686062	0					
ANR	686090	CallExpression	suffix . length ( )		686062	1					
ANR	686091	Callee	suffix . length		686062	0					
ANR	686092	MemberAccess	suffix . length		686062	0					
ANR	686093	Identifier	suffix		686062	0					
ANR	686094	Identifier	length		686062	1					
ANR	686095	ArgumentList			686062	1					
ANR	686096	PrimaryExpression	1		686062	1					
ANR	686097	WhileStatement	while ( strIndex >= 0 && suffixIndex >= 0 )		686062	2					
ANR	686098	Condition	strIndex >= 0 && suffixIndex >= 0	2367:8:72219:72251	686062	0	True				
ANR	686099	AndExpression	strIndex >= 0 && suffixIndex >= 0		686062	0		&&			
ANR	686100	RelationalExpression	strIndex >= 0		686062	0		>=			
ANR	686101	Identifier	strIndex		686062	0					
ANR	686102	PrimaryExpression	0		686062	1					
ANR	686103	RelationalExpression	suffixIndex >= 0		686062	1		>=			
ANR	686104	Identifier	suffixIndex		686062	0					
ANR	686105	PrimaryExpression	0		686062	1					
ANR	686106	CompoundStatement		6:1:132:132	686062	1					
ANR	686107	IfStatement	if ( tolower ( str [ strIndex ] ) != tolower ( suffix [ suffixIndex ] ) )		686062	0					
ANR	686108	Condition	tolower ( str [ strIndex ] ) != tolower ( suffix [ suffixIndex ] )	2369:6:72263:72316	686062	0	True				
ANR	686109	EqualityExpression	tolower ( str [ strIndex ] ) != tolower ( suffix [ suffixIndex ] )		686062	0		!=			
ANR	686110	CallExpression	tolower ( str [ strIndex ] )		686062	0					
ANR	686111	Callee	tolower		686062	0					
ANR	686112	Identifier	tolower		686062	0					
ANR	686113	ArgumentList	str [ strIndex ]		686062	1					
ANR	686114	Argument	str [ strIndex ]		686062	0					
ANR	686115	ArrayIndexing	str [ strIndex ]		686062	0					
ANR	686116	Identifier	str		686062	0					
ANR	686117	Identifier	strIndex		686062	1					
ANR	686118	CallExpression	tolower ( suffix [ suffixIndex ] )		686062	1					
ANR	686119	Callee	tolower		686062	0					
ANR	686120	Identifier	tolower		686062	0					
ANR	686121	ArgumentList	suffix [ suffixIndex ]		686062	1					
ANR	686122	Argument	suffix [ suffixIndex ]		686062	0					
ANR	686123	ArrayIndexing	suffix [ suffixIndex ]		686062	0					
ANR	686124	Identifier	suffix		686062	0					
ANR	686125	Identifier	suffixIndex		686062	1					
ANR	686126	ReturnStatement	return false ;	2370:3:72322:72334	686062	1	True				
ANR	686127	Identifier	false		686062	0					
ANR	686128	ExpressionStatement	-- strIndex	2372:2:72339:72349	686062	1	True				
ANR	686129	UnaryExpression	-- strIndex		686062	0					
ANR	686130	IncDec	--		686062	0					
ANR	686131	Identifier	strIndex		686062	1					
ANR	686132	ExpressionStatement	-- suffixIndex	2373:2:72353:72366	686062	2	True				
ANR	686133	UnaryExpression	-- suffixIndex		686062	0					
ANR	686134	IncDec	--		686062	0					
ANR	686135	Identifier	suffixIndex		686062	1					
ANR	686136	IfStatement	if ( strIndex < 0 && suffixIndex >= 0 )		686062	3					
ANR	686137	Condition	strIndex < 0 && suffixIndex >= 0	2376:5:72406:72437	686062	0	True				
ANR	686138	AndExpression	strIndex < 0 && suffixIndex >= 0		686062	0		&&			
ANR	686139	RelationalExpression	strIndex < 0		686062	0		<			
ANR	686140	Identifier	strIndex		686062	0					
ANR	686141	PrimaryExpression	0		686062	1					
ANR	686142	RelationalExpression	suffixIndex >= 0		686062	1		>=			
ANR	686143	Identifier	suffixIndex		686062	0					
ANR	686144	PrimaryExpression	0		686062	1					
ANR	686145	ReturnStatement	return false ;	2377:2:72442:72454	686062	1	True				
ANR	686146	Identifier	false		686062	0					
ANR	686147	ReturnStatement	return true ;	2378:1:72457:72468	686062	4	True				
ANR	686148	Identifier	true		686062	0					
ANR	686149	ReturnType	bool		686062	1					
ANR	686150	Identifier	ASConsole :: stringEndsWith		686062	2					
ANR	686151	ParameterList	"const string & str , const string & suffix"		686062	3					
ANR	686152	Parameter	const string & str	2362:31:72075:72091	686062	0	True				
ANR	686153	ParameterType	const string &		686062	0					
ANR	686154	Identifier	str		686062	1					
ANR	686155	Parameter	const string & suffix	2362:50:72094:72113	686062	1	True				
ANR	686156	ParameterType	const string &		686062	0					
ANR	686157	Identifier	suffix		686062	1					
ANR	686158	CFGEntryNode	ENTRY		686062		True				
ANR	686159	CFGExitNode	EXIT		686062		True				
ANR	686160	Symbol	* strIndex		686062						
ANR	686161	Symbol	* suffixIndex		686062						
ANR	686162	Symbol	tolower		686062						
ANR	686163	Symbol	false		686062						
ANR	686164	Symbol	suffix		686062						
ANR	686165	Symbol	str		686062						
ANR	686166	Symbol	* suffix		686062						
ANR	686167	Symbol	suffixIndex		686062						
ANR	686168	Symbol	true		686062						
ANR	686169	Symbol	suffix . length		686062						
ANR	686170	Symbol	str . length		686062						
ANR	686171	Symbol	strIndex		686062						
ANR	686172	Symbol	* str		686062						
ANR	686173	Function	ASConsole :: updateExcludeVector	2381:0:72473:72663							
ANR	686174	FunctionDef	ASConsole :: updateExcludeVector (const string & suffixParam)		686173	0					
ANR	686175	CompoundStatement		2382:0:72536:72663	686173	0					
ANR	686176	ExpressionStatement	excludeVector . emplace_back ( suffixParam )	2383:1:72539:72578	686173	0	True				
ANR	686177	CallExpression	excludeVector . emplace_back ( suffixParam )		686173	0					
ANR	686178	Callee	excludeVector . emplace_back		686173	0					
ANR	686179	MemberAccess	excludeVector . emplace_back		686173	0					
ANR	686180	Identifier	excludeVector		686173	0					
ANR	686181	Identifier	emplace_back		686173	1					
ANR	686182	ArgumentList	suffixParam		686173	1					
ANR	686183	Argument	suffixParam		686173	0					
ANR	686184	Identifier	suffixParam		686173	0					
ANR	686185	ExpressionStatement	"standardizePath ( excludeVector . back ( ) , true )"	2384:1:72581:72624	686173	1	True				
ANR	686186	CallExpression	"standardizePath ( excludeVector . back ( ) , true )"		686173	0					
ANR	686187	Callee	standardizePath		686173	0					
ANR	686188	Identifier	standardizePath		686173	0					
ANR	686189	ArgumentList	excludeVector . back ( )		686173	1					
ANR	686190	Argument	excludeVector . back ( )		686173	0					
ANR	686191	CallExpression	excludeVector . back ( )		686173	0					
ANR	686192	Callee	excludeVector . back		686173	0					
ANR	686193	MemberAccess	excludeVector . back		686173	0					
ANR	686194	Identifier	excludeVector		686173	0					
ANR	686195	Identifier	back		686173	1					
ANR	686196	ArgumentList			686173	1					
ANR	686197	Argument	true		686173	1					
ANR	686198	Identifier	true		686173	0					
ANR	686199	ExpressionStatement	excludeHitsVector . push_back ( false )	2385:1:72627:72661	686173	2	True				
ANR	686200	CallExpression	excludeHitsVector . push_back ( false )		686173	0					
ANR	686201	Callee	excludeHitsVector . push_back		686173	0					
ANR	686202	MemberAccess	excludeHitsVector . push_back		686173	0					
ANR	686203	Identifier	excludeHitsVector		686173	0					
ANR	686204	Identifier	push_back		686173	1					
ANR	686205	ArgumentList	false		686173	1					
ANR	686206	Argument	false		686173	0					
ANR	686207	Identifier	false		686173	0					
ANR	686208	ReturnType	void		686173	1					
ANR	686209	Identifier	ASConsole :: updateExcludeVector		686173	2					
ANR	686210	ParameterList	const string & suffixParam		686173	3					
ANR	686211	Parameter	const string & suffixParam	2381:36:72509:72533	686173	0	True				
ANR	686212	ParameterType	const string &		686173	0					
ANR	686213	Identifier	suffixParam		686173	1					
ANR	686214	CFGEntryNode	ENTRY		686173		True				
ANR	686215	CFGExitNode	EXIT		686173		True				
ANR	686216	Symbol	excludeHitsVector		686173						
ANR	686217	Symbol	excludeVector . back		686173						
ANR	686218	Symbol	true		686173						
ANR	686219	Symbol	false		686173						
ANR	686220	Symbol	excludeVector		686173						
ANR	686221	Symbol	suffixParam		686173						
ANR	686222	Function	ASConsole :: waitForRemove	2388:0:72666:72947							
ANR	686223	FunctionDef	ASConsole :: waitForRemove (const char * newFileName)		686222	0					
ANR	686224	CompoundStatement		2389:0:72726:72947	686222	0					
ANR	686225	IdentifierDeclStatement	struct stat stBuf ;	2390:1:72729:72746	686222	0	True				
ANR	686226	IdentifierDecl	stBuf		686222	0					
ANR	686227	IdentifierDeclType	struct stat		686222	0					
ANR	686228	Identifier	stBuf		686222	1					
ANR	686229	IdentifierDeclStatement	int seconds ;	2391:1:72749:72760	686222	1	True				
ANR	686230	IdentifierDecl	seconds		686222	0					
ANR	686231	IdentifierDeclType	int		686222	0					
ANR	686232	Identifier	seconds		686222	1					
ANR	686233	ForStatement	for ( seconds = 1 ; seconds <= 20 ; seconds ++ )		686222	2					
ANR	686234	ForInit	seconds = 1 ;	2393:6:72813:72824	686222	0	True				
ANR	686235	AssignmentExpression	seconds = 1		686222	0		=			
ANR	686236	Identifier	seconds		686222	0					
ANR	686237	PrimaryExpression	1		686222	1					
ANR	686238	Condition	seconds <= 20	2393:19:72826:72838	686222	1	True				
ANR	686239	RelationalExpression	seconds <= 20		686222	0		<=			
ANR	686240	Identifier	seconds		686222	0					
ANR	686241	PrimaryExpression	20		686222	1					
ANR	686242	PostIncDecOperationExpression	seconds ++	2393:34:72841:72849	686222	2	True				
ANR	686243	Identifier	seconds		686222	0					
ANR	686244	IncDec	++		686222	1					
ANR	686245	CompoundStatement		6:1:126:126	686222	3					
ANR	686246	ExpressionStatement	sleep ( 1 )	2395:2:72857:72865	686222	0	True				
ANR	686247	CallExpression	sleep ( 1 )		686222	0					
ANR	686248	Callee	sleep		686222	0					
ANR	686249	Identifier	sleep		686222	0					
ANR	686250	ArgumentList	1		686222	1					
ANR	686251	Argument	1		686222	0					
ANR	686252	PrimaryExpression	1		686222	0					
ANR	686253	IfStatement	"if ( stat ( newFileName , & stBuf ) != 0 )"		686222	1					
ANR	686254	Condition	"stat ( newFileName , & stBuf ) != 0"	2396:6:72873:72902	686222	0	True				
ANR	686255	EqualityExpression	"stat ( newFileName , & stBuf ) != 0"		686222	0		!=			
ANR	686256	CallExpression	"stat ( newFileName , & stBuf )"		686222	0					
ANR	686257	Callee	stat		686222	0					
ANR	686258	Identifier	stat		686222	0					
ANR	686259	ArgumentList	newFileName		686222	1					
ANR	686260	Argument	newFileName		686222	0					
ANR	686261	Identifier	newFileName		686222	0					
ANR	686262	Argument	& stBuf		686222	1					
ANR	686263	UnaryOperationExpression	& stBuf		686222	0					
ANR	686264	UnaryOperator	&		686222	0					
ANR	686265	Identifier	stBuf		686222	1					
ANR	686266	PrimaryExpression	0		686222	1					
ANR	686267	BreakStatement	break ;	2397:3:72908:72913	686222	1	True				
ANR	686268	ExpressionStatement	errno = 0	2399:1:72919:72928	686222	3	True				
ANR	686269	AssignmentExpression	errno = 0		686222	0		=			
ANR	686270	Identifier	errno		686222	0					
ANR	686271	PrimaryExpression	0		686222	1					
ANR	686272	ReturnStatement	return seconds ;	2400:1:72931:72945	686222	4	True				
ANR	686273	Identifier	seconds		686222	0					
ANR	686274	ReturnType	int		686222	1					
ANR	686275	Identifier	ASConsole :: waitForRemove		686222	2					
ANR	686276	ParameterList	const char * newFileName		686222	3					
ANR	686277	Parameter	const char * newFileName	2388:29:72695:72717	686222	0	True				
ANR	686278	ParameterType	const char *		686222	0					
ANR	686279	Identifier	newFileName		686222	1					
ANR	686280	CFGEntryNode	ENTRY		686222		True				
ANR	686281	CFGExitNode	EXIT		686222		True				
ANR	686282	Symbol	seconds		686222						
ANR	686283	Symbol	stat		686222						
ANR	686284	Symbol	errno		686222						
ANR	686285	Symbol	stBuf		686222						
ANR	686286	Symbol	newFileName		686222						
ANR	686287	Symbol	& stBuf		686222						
ANR	686288	Function	ASConsole :: wildcmp	2406:0:73122:73934							
ANR	686289	FunctionDef	"ASConsole :: wildcmp (const char * wild , const char * data)"		686288	0					
ANR	686290	CompoundStatement		2407:0:73187:73934	686288	0					
ANR	686291	IdentifierDeclStatement	"const char * cp = nullptr , * mp = nullptr ;"	2408:1:73190:73229	686288	0	True				
ANR	686292	IdentifierDecl	* cp = nullptr		686288	0					
ANR	686293	IdentifierDeclType	const char *		686288	0					
ANR	686294	Identifier	cp		686288	1					
ANR	686295	AssignmentExpression	* cp = nullptr		686288	2		=			
ANR	686296	Identifier	nullptr		686288	0					
ANR	686297	Identifier	nullptr		686288	1					
ANR	686298	IdentifierDecl	* mp = nullptr		686288	1					
ANR	686299	IdentifierDeclType	const char *		686288	0					
ANR	686300	Identifier	mp		686288	1					
ANR	686301	AssignmentExpression	* mp = nullptr		686288	2		=			
ANR	686302	Identifier	nullptr		686288	0					
ANR	686303	Identifier	nullptr		686288	1					
ANR	686304	IdentifierDeclStatement	bool cmpval ;	2409:1:73232:73243	686288	1	True				
ANR	686305	IdentifierDecl	cmpval		686288	0					
ANR	686306	IdentifierDeclType	bool		686288	0					
ANR	686307	Identifier	cmpval		686288	1					
ANR	686308	WhileStatement	while ( ( * data ) && ( * wild != '*' ) )		686288	2					
ANR	686309	Condition	( * data ) && ( * wild != '*' )	2411:8:73254:73278	686288	0	True				
ANR	686310	AndExpression	( * data ) && ( * wild != '*' )		686288	0		&&			
ANR	686311	UnaryOperationExpression	* data		686288	0					
ANR	686312	UnaryOperator	*		686288	0					
ANR	686313	Identifier	data		686288	1					
ANR	686314	EqualityExpression	* wild != '*'		686288	1		!=			
ANR	686315	UnaryOperationExpression	* wild		686288	0					
ANR	686316	UnaryOperator	*		686288	0					
ANR	686317	Identifier	wild		686288	1					
ANR	686318	PrimaryExpression	'*'		686288	1					
ANR	686319	CompoundStatement		6:1:94:94	686288	1					
ANR	686320	IfStatement	if ( ! g_isCaseSensitive )		686288	0					
ANR	686321	Condition	! g_isCaseSensitive	2413:6:73290:73307	686288	0	True				
ANR	686322	UnaryOperationExpression	! g_isCaseSensitive		686288	0					
ANR	686323	UnaryOperator	!		686288	0					
ANR	686324	Identifier	g_isCaseSensitive		686288	1					
ANR	686325	ExpressionStatement	cmpval = ( tolower ( * wild ) != tolower ( * data ) ) && ( * wild != '?' )	2414:3:73313:73374	686288	1	True				
ANR	686326	AssignmentExpression	cmpval = ( tolower ( * wild ) != tolower ( * data ) ) && ( * wild != '?' )		686288	0		=			
ANR	686327	Identifier	cmpval		686288	0					
ANR	686328	AndExpression	( tolower ( * wild ) != tolower ( * data ) ) && ( * wild != '?' )		686288	1		&&			
ANR	686329	EqualityExpression	tolower ( * wild ) != tolower ( * data )		686288	0		!=			
ANR	686330	CallExpression	tolower ( * wild )		686288	0					
ANR	686331	Callee	tolower		686288	0					
ANR	686332	Identifier	tolower		686288	0					
ANR	686333	ArgumentList	* wild		686288	1					
ANR	686334	Argument	* wild		686288	0					
ANR	686335	UnaryOperationExpression	* wild		686288	0					
ANR	686336	UnaryOperator	*		686288	0					
ANR	686337	Identifier	wild		686288	1					
ANR	686338	CallExpression	tolower ( * data )		686288	1					
ANR	686339	Callee	tolower		686288	0					
ANR	686340	Identifier	tolower		686288	0					
ANR	686341	ArgumentList	* data		686288	1					
ANR	686342	Argument	* data		686288	0					
ANR	686343	UnaryOperationExpression	* data		686288	0					
ANR	686344	UnaryOperator	*		686288	0					
ANR	686345	Identifier	data		686288	1					
ANR	686346	EqualityExpression	* wild != '?'		686288	1		!=			
ANR	686347	UnaryOperationExpression	* wild		686288	0					
ANR	686348	UnaryOperator	*		686288	0					
ANR	686349	Identifier	wild		686288	1					
ANR	686350	PrimaryExpression	'?'		686288	1					
ANR	686351	ElseStatement	else		686288	0					
ANR	686352	ExpressionStatement	cmpval = ( * wild != * data ) && ( * wild != '?' )	2416:3:73386:73429	686288	0	True				
ANR	686353	AssignmentExpression	cmpval = ( * wild != * data ) && ( * wild != '?' )		686288	0		=			
ANR	686354	Identifier	cmpval		686288	0					
ANR	686355	AndExpression	( * wild != * data ) && ( * wild != '?' )		686288	1		&&			
ANR	686356	EqualityExpression	* wild != * data		686288	0		!=			
ANR	686357	UnaryOperationExpression	* wild		686288	0					
ANR	686358	UnaryOperator	*		686288	0					
ANR	686359	Identifier	wild		686288	1					
ANR	686360	UnaryOperationExpression	* data		686288	1					
ANR	686361	UnaryOperator	*		686288	0					
ANR	686362	Identifier	data		686288	1					
ANR	686363	EqualityExpression	* wild != '?'		686288	1		!=			
ANR	686364	UnaryOperationExpression	* wild		686288	0					
ANR	686365	UnaryOperator	*		686288	0					
ANR	686366	Identifier	wild		686288	1					
ANR	686367	PrimaryExpression	'?'		686288	1					
ANR	686368	IfStatement	if ( cmpval )		686288	1					
ANR	686369	Condition	cmpval	2418:6:73438:73443	686288	0	True				
ANR	686370	Identifier	cmpval		686288	0					
ANR	686371	CompoundStatement		13:2:260:260	686288	1					
ANR	686372	ReturnStatement	return 0 ;	2420:3:73453:73461	686288	0	True				
ANR	686373	PrimaryExpression	0		686288	0					
ANR	686374	ExpressionStatement	wild ++	2422:2:73469:73475	686288	2	True				
ANR	686375	PostIncDecOperationExpression	wild ++		686288	0					
ANR	686376	Identifier	wild		686288	0					
ANR	686377	IncDec	++		686288	1					
ANR	686378	ExpressionStatement	data ++	2423:2:73479:73485	686288	3	True				
ANR	686379	PostIncDecOperationExpression	data ++		686288	0					
ANR	686380	Identifier	data		686288	0					
ANR	686381	IncDec	++		686288	1					
ANR	686382	WhileStatement	while ( * data )		686288	3					
ANR	686383	Condition	* data	2426:8:73499:73503	686288	0	True				
ANR	686384	UnaryOperationExpression	* data		686288	0					
ANR	686385	UnaryOperator	*		686288	0					
ANR	686386	Identifier	data		686288	1					
ANR	686387	CompoundStatement		21:1:319:319	686288	1					
ANR	686388	IfStatement	if ( * wild == '*' )		686288	0					
ANR	686389	Condition	* wild == '*'	2428:6:73515:73526	686288	0	True				
ANR	686390	EqualityExpression	* wild == '*'		686288	0		==			
ANR	686391	UnaryOperationExpression	* wild		686288	0					
ANR	686392	UnaryOperator	*		686288	0					
ANR	686393	Identifier	wild		686288	1					
ANR	686394	PrimaryExpression	'*'		686288	1					
ANR	686395	CompoundStatement		23:2:343:343	686288	1					
ANR	686396	IfStatement	if ( ! * ++ wild )		686288	0					
ANR	686397	Condition	! * ++ wild	2430:7:73540:73547	686288	0	True				
ANR	686398	UnaryOperationExpression	! * ++ wild		686288	0					
ANR	686399	UnaryOperator	!		686288	0					
ANR	686400	UnaryOperationExpression	* ++ wild		686288	1					
ANR	686401	UnaryOperator	*		686288	0					
ANR	686402	UnaryExpression	++ wild		686288	1					
ANR	686403	IncDec	++		686288	0					
ANR	686404	Identifier	wild		686288	1					
ANR	686405	CompoundStatement		25:3:365:365	686288	1					
ANR	686406	ReturnStatement	return 1 ;	2432:4:73559:73567	686288	0	True				
ANR	686407	PrimaryExpression	1		686288	0					
ANR	686408	ExpressionStatement	mp = wild	2434:3:73577:73586	686288	1	True				
ANR	686409	AssignmentExpression	mp = wild		686288	0		=			
ANR	686410	Identifier	mp		686288	0					
ANR	686411	Identifier	wild		686288	1					
ANR	686412	ExpressionStatement	cp = data + 1	2435:3:73591:73604	686288	2	True				
ANR	686413	AssignmentExpression	cp = data + 1		686288	0		=			
ANR	686414	Identifier	cp		686288	0					
ANR	686415	AdditiveExpression	data + 1		686288	1		+			
ANR	686416	Identifier	data		686288	0					
ANR	686417	PrimaryExpression	1		686288	1					
ANR	686418	ElseStatement	else		686288	0					
ANR	686419	CompoundStatement		32:2:431:431	686288	0					
ANR	686420	IfStatement	if ( ! g_isCaseSensitive )		686288	0					
ANR	686421	Condition	! g_isCaseSensitive	2439:7:73628:73645	686288	0	True				
ANR	686422	UnaryOperationExpression	! g_isCaseSensitive		686288	0					
ANR	686423	UnaryOperator	!		686288	0					
ANR	686424	Identifier	g_isCaseSensitive		686288	1					
ANR	686425	ExpressionStatement	cmpval = ( tolower ( * wild ) == tolower ( * data ) || ( * wild == '?' ) )	2440:4:73652:73713	686288	1	True				
ANR	686426	AssignmentExpression	cmpval = ( tolower ( * wild ) == tolower ( * data ) || ( * wild == '?' ) )		686288	0		=			
ANR	686427	Identifier	cmpval		686288	0					
ANR	686428	OrExpression	tolower ( * wild ) == tolower ( * data ) || ( * wild == '?' )		686288	1		||			
ANR	686429	EqualityExpression	tolower ( * wild ) == tolower ( * data )		686288	0		==			
ANR	686430	CallExpression	tolower ( * wild )		686288	0					
ANR	686431	Callee	tolower		686288	0					
ANR	686432	Identifier	tolower		686288	0					
ANR	686433	ArgumentList	* wild		686288	1					
ANR	686434	Argument	* wild		686288	0					
ANR	686435	UnaryOperationExpression	* wild		686288	0					
ANR	686436	UnaryOperator	*		686288	0					
ANR	686437	Identifier	wild		686288	1					
ANR	686438	CallExpression	tolower ( * data )		686288	1					
ANR	686439	Callee	tolower		686288	0					
ANR	686440	Identifier	tolower		686288	0					
ANR	686441	ArgumentList	* data		686288	1					
ANR	686442	Argument	* data		686288	0					
ANR	686443	UnaryOperationExpression	* data		686288	0					
ANR	686444	UnaryOperator	*		686288	0					
ANR	686445	Identifier	data		686288	1					
ANR	686446	EqualityExpression	* wild == '?'		686288	1		==			
ANR	686447	UnaryOperationExpression	* wild		686288	0					
ANR	686448	UnaryOperator	*		686288	0					
ANR	686449	Identifier	wild		686288	1					
ANR	686450	PrimaryExpression	'?'		686288	1					
ANR	686451	ElseStatement	else		686288	0					
ANR	686452	ExpressionStatement	cmpval = ( * wild == * data ) || ( * wild == '?' )	2442:4:73727:73770	686288	0	True				
ANR	686453	AssignmentExpression	cmpval = ( * wild == * data ) || ( * wild == '?' )		686288	0		=			
ANR	686454	Identifier	cmpval		686288	0					
ANR	686455	OrExpression	( * wild == * data ) || ( * wild == '?' )		686288	1		||			
ANR	686456	EqualityExpression	* wild == * data		686288	0		==			
ANR	686457	UnaryOperationExpression	* wild		686288	0					
ANR	686458	UnaryOperator	*		686288	0					
ANR	686459	Identifier	wild		686288	1					
ANR	686460	UnaryOperationExpression	* data		686288	1					
ANR	686461	UnaryOperator	*		686288	0					
ANR	686462	Identifier	data		686288	1					
ANR	686463	EqualityExpression	* wild == '?'		686288	1		==			
ANR	686464	UnaryOperationExpression	* wild		686288	0					
ANR	686465	UnaryOperator	*		686288	0					
ANR	686466	Identifier	wild		686288	1					
ANR	686467	PrimaryExpression	'?'		686288	1					
ANR	686468	IfStatement	if ( cmpval )		686288	1					
ANR	686469	Condition	cmpval	2444:7:73780:73785	686288	0	True				
ANR	686470	Identifier	cmpval		686288	0					
ANR	686471	CompoundStatement		39:3:603:603	686288	1					
ANR	686472	ExpressionStatement	wild ++	2446:4:73797:73803	686288	0	True				
ANR	686473	PostIncDecOperationExpression	wild ++		686288	0					
ANR	686474	Identifier	wild		686288	0					
ANR	686475	IncDec	++		686288	1					
ANR	686476	ExpressionStatement	data ++	2447:4:73809:73815	686288	1	True				
ANR	686477	PostIncDecOperationExpression	data ++		686288	0					
ANR	686478	Identifier	data		686288	0					
ANR	686479	IncDec	++		686288	1					
ANR	686480	ElseStatement	else		686288	0					
ANR	686481	CompoundStatement		44:3:645:645	686288	0					
ANR	686482	ExpressionStatement	wild = mp	2451:4:73839:73848	686288	0	True				
ANR	686483	AssignmentExpression	wild = mp		686288	0		=			
ANR	686484	Identifier	wild		686288	0					
ANR	686485	Identifier	mp		686288	1					
ANR	686486	ExpressionStatement	data = cp ++	2452:4:73854:73865	686288	1	True				
ANR	686487	AssignmentExpression	data = cp ++		686288	0		=			
ANR	686488	Identifier	data		686288	0					
ANR	686489	PostIncDecOperationExpression	cp ++		686288	1					
ANR	686490	Identifier	cp		686288	0					
ANR	686491	IncDec	++		686288	1					
ANR	686492	WhileStatement	while ( * wild == '*' )		686288	4					
ANR	686493	Condition	* wild == '*'	2457:8:73888:73899	686288	0	True				
ANR	686494	EqualityExpression	* wild == '*'		686288	0		==			
ANR	686495	UnaryOperationExpression	* wild		686288	0					
ANR	686496	UnaryOperator	*		686288	0					
ANR	686497	Identifier	wild		686288	1					
ANR	686498	PrimaryExpression	'*'		686288	1					
ANR	686499	CompoundStatement		52:1:715:715	686288	1					
ANR	686500	ExpressionStatement	wild ++	2459:2:73907:73913	686288	0	True				
ANR	686501	PostIncDecOperationExpression	wild ++		686288	0					
ANR	686502	Identifier	wild		686288	0					
ANR	686503	IncDec	++		686288	1					
ANR	686504	ReturnStatement	return ! * wild ;	2461:1:73919:73932	686288	5	True				
ANR	686505	UnaryOperationExpression	! * wild		686288	0					
ANR	686506	UnaryOperator	!		686288	0					
ANR	686507	UnaryOperationExpression	* wild		686288	1					
ANR	686508	UnaryOperator	*		686288	0					
ANR	686509	Identifier	wild		686288	1					
ANR	686510	ReturnType	int		686288	1					
ANR	686511	Identifier	ASConsole :: wildcmp		686288	2					
ANR	686512	ParameterList	"const char * wild , const char * data"		686288	3					
ANR	686513	Parameter	const char * wild	2406:23:73145:73160	686288	0	True				
ANR	686514	ParameterType	const char *		686288	0					
ANR	686515	Identifier	wild		686288	1					
ANR	686516	Parameter	const char * data	2406:41:73163:73178	686288	1	True				
ANR	686517	ParameterType	const char *		686288	0					
ANR	686518	Identifier	data		686288	1					
ANR	686519	CFGEntryNode	ENTRY		686288		True				
ANR	686520	CFGExitNode	EXIT		686288		True				
ANR	686521	Symbol	* ++ wild		686288						
ANR	686522	Symbol	mp		686288						
ANR	686523	Symbol	data		686288						
ANR	686524	Symbol	tolower		686288						
ANR	686525	Symbol	* wild		686288						
ANR	686526	Symbol	wild		686288						
ANR	686527	Symbol	cp		686288						
ANR	686528	Symbol	* data		686288						
ANR	686529	Symbol	g_isCaseSensitive		686288						
ANR	686530	Symbol	nullptr		686288						
ANR	686531	Symbol	cmpval		686288						
ANR	686532	Function	ASConsole :: writeFile	2464:0:73937:75699							
ANR	686533	FunctionDef	"ASConsole :: writeFile (const string & fileName_ , FileEncoding encoding , ostringstream & out)"		686532	0					
ANR	686534	CompoundStatement		2465:0:74037:75699	686532	0					
ANR	686535	IdentifierDeclStatement	struct stat stBuf ;	2467:1:74098:74115	686532	0	True				
ANR	686536	IdentifierDecl	stBuf		686532	0					
ANR	686537	IdentifierDeclType	struct stat		686532	0					
ANR	686538	Identifier	stBuf		686532	1					
ANR	686539	IdentifierDeclStatement	bool statErr = false ;	2468:1:74118:74138	686532	1	True				
ANR	686540	IdentifierDecl	statErr = false		686532	0					
ANR	686541	IdentifierDeclType	bool		686532	0					
ANR	686542	Identifier	statErr		686532	1					
ANR	686543	AssignmentExpression	statErr = false		686532	2		=			
ANR	686544	Identifier	false		686532	0					
ANR	686545	Identifier	false		686532	1					
ANR	686546	IfStatement	"if ( stat ( fileName_ . c_str ( ) , & stBuf ) == - 1 )"		686532	2					
ANR	686547	Condition	"stat ( fileName_ . c_str ( ) , & stBuf ) == - 1"	2469:5:74145:74181	686532	0	True				
ANR	686548	EqualityExpression	"stat ( fileName_ . c_str ( ) , & stBuf ) == - 1"		686532	0		==			
ANR	686549	CallExpression	"stat ( fileName_ . c_str ( ) , & stBuf )"		686532	0					
ANR	686550	Callee	stat		686532	0					
ANR	686551	Identifier	stat		686532	0					
ANR	686552	ArgumentList	fileName_ . c_str ( )		686532	1					
ANR	686553	Argument	fileName_ . c_str ( )		686532	0					
ANR	686554	CallExpression	fileName_ . c_str ( )		686532	0					
ANR	686555	Callee	fileName_ . c_str		686532	0					
ANR	686556	MemberAccess	fileName_ . c_str		686532	0					
ANR	686557	Identifier	fileName_		686532	0					
ANR	686558	Identifier	c_str		686532	1					
ANR	686559	ArgumentList			686532	1					
ANR	686560	Argument	& stBuf		686532	1					
ANR	686561	UnaryOperationExpression	& stBuf		686532	0					
ANR	686562	UnaryOperator	&		686532	0					
ANR	686563	Identifier	stBuf		686532	1					
ANR	686564	UnaryOperationExpression	- 1		686532	1					
ANR	686565	UnaryOperator	-		686532	0					
ANR	686566	PrimaryExpression	1		686532	1					
ANR	686567	ExpressionStatement	statErr = true	2470:2:74186:74200	686532	1	True				
ANR	686568	AssignmentExpression	statErr = true		686532	0		=			
ANR	686569	Identifier	statErr		686532	0					
ANR	686570	Identifier	true		686532	1					
ANR	686571	IfStatement	if ( ! noBackup )		686532	3					
ANR	686572	Condition	! noBackup	2473:5:74228:74236	686532	0	True				
ANR	686573	UnaryOperationExpression	! noBackup		686532	0					
ANR	686574	UnaryOperator	!		686532	0					
ANR	686575	Identifier	noBackup		686532	1					
ANR	686576	CompoundStatement		11:2:206:250	686532	1					
ANR	686577	IdentifierDeclStatement	string origFileName = fileName_ + origSuffix ;	2475:2:74244:74288	686532	0	True				
ANR	686578	IdentifierDecl	origFileName = fileName_ + origSuffix		686532	0					
ANR	686579	IdentifierDeclType	string		686532	0					
ANR	686580	Identifier	origFileName		686532	1					
ANR	686581	AssignmentExpression	origFileName = fileName_ + origSuffix		686532	2		=			
ANR	686582	Identifier	origFileName		686532	0					
ANR	686583	AdditiveExpression	fileName_ + origSuffix		686532	1		+			
ANR	686584	Identifier	fileName_		686532	0					
ANR	686585	Identifier	origSuffix		686532	1					
ANR	686586	ExpressionStatement	"removeFile ( origFileName . c_str ( ) , ""Cannot remove pre-existing backup file"" )"	2476:2:74292:74366	686532	1	True				
ANR	686587	CallExpression	"removeFile ( origFileName . c_str ( ) , ""Cannot remove pre-existing backup file"" )"		686532	0					
ANR	686588	Callee	removeFile		686532	0					
ANR	686589	Identifier	removeFile		686532	0					
ANR	686590	ArgumentList	origFileName . c_str ( )		686532	1					
ANR	686591	Argument	origFileName . c_str ( )		686532	0					
ANR	686592	CallExpression	origFileName . c_str ( )		686532	0					
ANR	686593	Callee	origFileName . c_str		686532	0					
ANR	686594	MemberAccess	origFileName . c_str		686532	0					
ANR	686595	Identifier	origFileName		686532	0					
ANR	686596	Identifier	c_str		686532	1					
ANR	686597	ArgumentList			686532	1					
ANR	686598	Argument	"""Cannot remove pre-existing backup file"""		686532	1					
ANR	686599	PrimaryExpression	"""Cannot remove pre-existing backup file"""		686532	0					
ANR	686600	ExpressionStatement	"renameFile ( fileName_ . c_str ( ) , origFileName . c_str ( ) , ""Cannot create backup file"" )"	2477:2:74370:74450	686532	2	True				
ANR	686601	CallExpression	"renameFile ( fileName_ . c_str ( ) , origFileName . c_str ( ) , ""Cannot create backup file"" )"		686532	0					
ANR	686602	Callee	renameFile		686532	0					
ANR	686603	Identifier	renameFile		686532	0					
ANR	686604	ArgumentList	fileName_ . c_str ( )		686532	1					
ANR	686605	Argument	fileName_ . c_str ( )		686532	0					
ANR	686606	CallExpression	fileName_ . c_str ( )		686532	0					
ANR	686607	Callee	fileName_ . c_str		686532	0					
ANR	686608	MemberAccess	fileName_ . c_str		686532	0					
ANR	686609	Identifier	fileName_		686532	0					
ANR	686610	Identifier	c_str		686532	1					
ANR	686611	ArgumentList			686532	1					
ANR	686612	Argument	origFileName . c_str ( )		686532	1					
ANR	686613	CallExpression	origFileName . c_str ( )		686532	0					
ANR	686614	Callee	origFileName . c_str		686532	0					
ANR	686615	MemberAccess	origFileName . c_str		686532	0					
ANR	686616	Identifier	origFileName		686532	0					
ANR	686617	Identifier	c_str		686532	1					
ANR	686618	ArgumentList			686532	1					
ANR	686619	Argument	"""Cannot create backup file"""		686532	2					
ANR	686620	PrimaryExpression	"""Cannot create backup file"""		686532	0					
ANR	686621	IdentifierDeclStatement	"ofstream fout ( fileName_ . c_str ( ) , ios :: binary | ios :: trunc ) ;"	2481:1:74483:74541	686532	4	True				
ANR	686622	IdentifierDecl	"fout ( fileName_ . c_str ( ) , ios :: binary | ios :: trunc )"		686532	0					
ANR	686623	IdentifierDeclType	ofstream		686532	0					
ANR	686624	Identifier	fout		686532	1					
ANR	686625	Expression	"fileName_ . c_str ( ) , ios :: binary | ios :: trunc"		686532	2					
ANR	686626	CallExpression	fileName_ . c_str ( )		686532	0					
ANR	686627	Callee	fileName_ . c_str		686532	0					
ANR	686628	MemberAccess	fileName_ . c_str		686532	0					
ANR	686629	Identifier	fileName_		686532	0					
ANR	686630	Identifier	c_str		686532	1					
ANR	686631	ArgumentList			686532	1					
ANR	686632	InclusiveOrExpression	ios :: binary | ios :: trunc		686532	1		|			
ANR	686633	Identifier	ios :: binary		686532	0					
ANR	686634	Identifier	ios :: trunc		686532	1					
ANR	686635	IfStatement	if ( ! fout )		686532	5					
ANR	686636	Condition	! fout	2482:5:74548:74552	686532	0	True				
ANR	686637	UnaryOperationExpression	! fout		686532	0					
ANR	686638	UnaryOperator	!		686532	0					
ANR	686639	Identifier	fout		686532	1					
ANR	686640	ExpressionStatement	"error ( ""Cannot open output file"" , fileName_ . c_str ( ) )"	2483:2:74557:74608	686532	1	True				
ANR	686641	CallExpression	"error ( ""Cannot open output file"" , fileName_ . c_str ( ) )"		686532	0					
ANR	686642	Callee	error		686532	0					
ANR	686643	Identifier	error		686532	0					
ANR	686644	ArgumentList	"""Cannot open output file"""		686532	1					
ANR	686645	Argument	"""Cannot open output file"""		686532	0					
ANR	686646	PrimaryExpression	"""Cannot open output file"""		686532	0					
ANR	686647	Argument	fileName_ . c_str ( )		686532	1					
ANR	686648	CallExpression	fileName_ . c_str ( )		686532	0					
ANR	686649	Callee	fileName_ . c_str		686532	0					
ANR	686650	MemberAccess	fileName_ . c_str		686532	0					
ANR	686651	Identifier	fileName_		686532	0					
ANR	686652	Identifier	c_str		686532	1					
ANR	686653	ArgumentList			686532	1					
ANR	686654	IfStatement	if ( encoding == UTF_16LE || encoding == UTF_16BE )		686532	6					
ANR	686655	Condition	encoding == UTF_16LE || encoding == UTF_16BE	2484:5:74615:74658	686532	0	True				
ANR	686656	OrExpression	encoding == UTF_16LE || encoding == UTF_16BE		686532	0		||			
ANR	686657	EqualityExpression	encoding == UTF_16LE		686532	0		==			
ANR	686658	Identifier	encoding		686532	0					
ANR	686659	Identifier	UTF_16LE		686532	1					
ANR	686660	EqualityExpression	encoding == UTF_16BE		686532	1		==			
ANR	686661	Identifier	encoding		686532	0					
ANR	686662	Identifier	UTF_16BE		686532	1					
ANR	686663	CompoundStatement		25:2:791:827	686532	1					
ANR	686664	IdentifierDeclStatement	bool isBigEndian = ( encoding == UTF_16BE ) ;	2487:2:74695:74736	686532	0	True				
ANR	686665	IdentifierDecl	isBigEndian = ( encoding == UTF_16BE )		686532	0					
ANR	686666	IdentifierDeclType	bool		686532	0					
ANR	686667	Identifier	isBigEndian		686532	1					
ANR	686668	AssignmentExpression	isBigEndian = ( encoding == UTF_16BE )		686532	2		=			
ANR	686669	Identifier	isBigEndian		686532	0					
ANR	686670	EqualityExpression	encoding == UTF_16BE		686532	1		==			
ANR	686671	Identifier	encoding		686532	0					
ANR	686672	Identifier	UTF_16BE		686532	1					
ANR	686673	IdentifierDeclStatement	"size_t utf16Size = utf8_16 . utf16LengthFromUtf8 ( out . str ( ) . c_str ( ) , out . str ( ) . length ( ) ) ;"	2488:2:74740:74825	686532	1	True				
ANR	686674	IdentifierDecl	"utf16Size = utf8_16 . utf16LengthFromUtf8 ( out . str ( ) . c_str ( ) , out . str ( ) . length ( ) )"		686532	0					
ANR	686675	IdentifierDeclType	size_t		686532	0					
ANR	686676	Identifier	utf16Size		686532	1					
ANR	686677	AssignmentExpression	"utf16Size = utf8_16 . utf16LengthFromUtf8 ( out . str ( ) . c_str ( ) , out . str ( ) . length ( ) )"		686532	2		=			
ANR	686678	Identifier	utf16Size		686532	0					
ANR	686679	CallExpression	"utf8_16 . utf16LengthFromUtf8 ( out . str ( ) . c_str ( ) , out . str ( ) . length ( ) )"		686532	1					
ANR	686680	Callee	utf8_16 . utf16LengthFromUtf8		686532	0					
ANR	686681	MemberAccess	utf8_16 . utf16LengthFromUtf8		686532	0					
ANR	686682	Identifier	utf8_16		686532	0					
ANR	686683	Identifier	utf16LengthFromUtf8		686532	1					
ANR	686684	ArgumentList	out . str ( ) . c_str ( )		686532	1					
ANR	686685	Argument	out . str ( ) . c_str ( )		686532	0					
ANR	686686	CallExpression	out . str ( ) . c_str ( )		686532	0					
ANR	686687	Callee	out . str ( ) . c_str		686532	0					
ANR	686688	MemberAccess	out . str ( ) . c_str		686532	0					
ANR	686689	CallExpression	out . str ( )		686532	0					
ANR	686690	Callee	out . str		686532	0					
ANR	686691	MemberAccess	out . str		686532	0					
ANR	686692	Identifier	out		686532	0					
ANR	686693	Identifier	str		686532	1					
ANR	686694	ArgumentList			686532	1					
ANR	686695	Identifier	c_str		686532	1					
ANR	686696	ArgumentList			686532	1					
ANR	686697	Argument	out . str ( ) . length ( )		686532	1					
ANR	686698	CallExpression	out . str ( ) . length ( )		686532	0					
ANR	686699	Callee	out . str ( ) . length		686532	0					
ANR	686700	MemberAccess	out . str ( ) . length		686532	0					
ANR	686701	CallExpression	out . str ( )		686532	0					
ANR	686702	Callee	out . str		686532	0					
ANR	686703	MemberAccess	out . str		686532	0					
ANR	686704	Identifier	out		686532	0					
ANR	686705	Identifier	str		686532	1					
ANR	686706	ArgumentList			686532	1					
ANR	686707	Identifier	length		686532	1					
ANR	686708	ArgumentList			686532	1					
ANR	686709	IdentifierDeclStatement	char * utf16Out = new char [ utf16Size ] ;	2489:2:74829:74865	686532	2	True				
ANR	686710	IdentifierDecl	* utf16Out = new char [ utf16Size ]		686532	0					
ANR	686711	IdentifierDeclType	char *		686532	0					
ANR	686712	Identifier	utf16Out		686532	1					
ANR	686713	AssignmentExpression	* utf16Out = new char [ utf16Size ]		686532	2		=			
ANR	686714	Identifier	utf16Size		686532	0					
ANR	686715	Identifier	utf16Size		686532	1					
ANR	686716	Statement	size_t	2490:2:74869:74874	686532	3	True				
ANR	686717	Statement	utf16Len	2490:9:74876:74883	686532	4	True				
ANR	686718	Statement	=	2490:18:74885:74885	686532	5	True				
ANR	686719	Statement	utf8_16	2490:20:74887:74893	686532	6	True				
ANR	686720	Statement	.	2490:27:74894:74894	686532	7	True				
ANR	686721	Statement	utf8ToUtf16	2490:28:74895:74905	686532	8	True				
ANR	686722	Statement	(	2490:39:74906:74906	686532	9	True				
ANR	686723	Statement	const_cast	2490:40:74907:74916	686532	10	True				
ANR	686724	Statement	<	2490:50:74917:74917	686532	11	True				
ANR	686725	Statement	char	2490:51:74918:74921	686532	12	True				
ANR	686726	Statement	*	2490:55:74922:74922	686532	13	True				
ANR	686727	Statement	>	2490:56:74923:74923	686532	14	True				
ANR	686728	Statement	(	2490:57:74924:74924	686532	15	True				
ANR	686729	Statement	out	2490:58:74925:74927	686532	16	True				
ANR	686730	Statement	.	2490:61:74928:74928	686532	17	True				
ANR	686731	Statement	str	2490:62:74929:74931	686532	18	True				
ANR	686732	Statement	(	2490:65:74932:74932	686532	19	True				
ANR	686733	Statement	)	2490:66:74933:74933	686532	20	True				
ANR	686734	Statement	.	2490:67:74934:74934	686532	21	True				
ANR	686735	Statement	c_str	2490:68:74935:74939	686532	22	True				
ANR	686736	Statement	(	2490:73:74940:74940	686532	23	True				
ANR	686737	Statement	)	2490:74:74941:74941	686532	24	True				
ANR	686738	Statement	)	2490:75:74942:74942	686532	25	True				
ANR	686739	Statement	","	2490:76:74943:74943	686532	26	True				
ANR	686740	Statement	out	2491:40:74985:74987	686532	27	True				
ANR	686741	Statement	.	2491:43:74988:74988	686532	28	True				
ANR	686742	Statement	str	2491:44:74989:74991	686532	29	True				
ANR	686743	Statement	(	2491:47:74992:74992	686532	30	True				
ANR	686744	Statement	)	2491:48:74993:74993	686532	31	True				
ANR	686745	Statement	.	2491:49:74994:74994	686532	32	True				
ANR	686746	Statement	length	2491:50:74995:75000	686532	33	True				
ANR	686747	Statement	(	2491:56:75001:75001	686532	34	True				
ANR	686748	Statement	)	2491:57:75002:75002	686532	35	True				
ANR	686749	Statement	","	2491:58:75003:75003	686532	36	True				
ANR	686750	Statement	isBigEndian	2491:60:75005:75015	686532	37	True				
ANR	686751	Statement	","	2491:71:75016:75016	686532	38	True				
ANR	686752	Statement	utf16Out	2491:73:75018:75025	686532	39	True				
ANR	686753	Statement	)	2491:81:75026:75026	686532	40	True				
ANR	686754	ExpressionStatement		2491:82:75027:75027	686532	41	True				
ANR	686755	ExpressionStatement	assert ( utf16Len == utf16Size )	2492:2:75031:75060	686532	42	True				
ANR	686756	CallExpression	assert ( utf16Len == utf16Size )		686532	0					
ANR	686757	Callee	assert		686532	0					
ANR	686758	Identifier	assert		686532	0					
ANR	686759	ArgumentList	utf16Len == utf16Size		686532	1					
ANR	686760	Argument	utf16Len == utf16Size		686532	0					
ANR	686761	EqualityExpression	utf16Len == utf16Size		686532	0		==			
ANR	686762	Identifier	utf16Len		686532	0					
ANR	686763	Identifier	utf16Size		686532	1					
ANR	686764	ExpressionStatement	"fout << string ( utf16Out , utf16Len )"	2493:2:75064:75098	686532	43	True				
ANR	686765	ShiftExpression	"fout << string ( utf16Out , utf16Len )"		686532	0		<<			
ANR	686766	Identifier	fout		686532	0					
ANR	686767	CallExpression	"string ( utf16Out , utf16Len )"		686532	1					
ANR	686768	Callee	string		686532	0					
ANR	686769	Identifier	string		686532	0					
ANR	686770	ArgumentList	utf16Out		686532	1					
ANR	686771	Argument	utf16Out		686532	0					
ANR	686772	Identifier	utf16Out		686532	0					
ANR	686773	Argument	utf16Len		686532	1					
ANR	686774	Identifier	utf16Len		686532	0					
ANR	686775	Statement	delete	2494:2:75102:75107	686532	44	True				
ANR	686776	Statement	[	2494:8:75108:75108	686532	45	True				
ANR	686777	Statement	]	2494:9:75109:75109	686532	46	True				
ANR	686778	ExpressionStatement	utf16Out	2494:11:75111:75119	686532	47	True				
ANR	686779	Identifier	utf16Out		686532	0					
ANR	686780	ElseStatement	else		686532	0					
ANR	686781	ExpressionStatement	fout << out . str ( )	2497:2:75132:75149	686532	0	True				
ANR	686782	ShiftExpression	fout << out . str ( )		686532	0		<<			
ANR	686783	Identifier	fout		686532	0					
ANR	686784	CallExpression	out . str ( )		686532	1					
ANR	686785	Callee	out . str		686532	0					
ANR	686786	MemberAccess	out . str		686532	0					
ANR	686787	Identifier	out		686532	0					
ANR	686788	Identifier	str		686532	1					
ANR	686789	ArgumentList			686532	1					
ANR	686790	ExpressionStatement	fout . close ( )	2499:1:75153:75165	686532	7	True				
ANR	686791	CallExpression	fout . close ( )		686532	0					
ANR	686792	Callee	fout . close		686532	0					
ANR	686793	MemberAccess	fout . close		686532	0					
ANR	686794	Identifier	fout		686532	0					
ANR	686795	Identifier	close		686532	1					
ANR	686796	ArgumentList			686532	1					
ANR	686797	IfStatement	if ( preserveDate )		686532	8					
ANR	686798	Condition	preserveDate	2503:5:75272:75283	686532	0	True				
ANR	686799	Identifier	preserveDate		686532	0					
ANR	686800	CompoundStatement		40:1:1249:1249	686532	1					
ANR	686801	IfStatement	if ( ! statErr )		686532	0					
ANR	686802	Condition	! statErr	2505:6:75295:75302	686532	0	True				
ANR	686803	UnaryOperationExpression	! statErr		686532	0					
ANR	686804	UnaryOperator	!		686532	0					
ANR	686805	Identifier	statErr		686532	1					
ANR	686806	CompoundStatement		43:3:1274:1295	686532	1					
ANR	686807	IdentifierDeclStatement	struct utimbuf outBuf ;	2507:3:75312:75333	686532	0	True				
ANR	686808	IdentifierDecl	outBuf		686532	0					
ANR	686809	IdentifierDeclType	struct utimbuf		686532	0					
ANR	686810	Identifier	outBuf		686532	1					
ANR	686811	ExpressionStatement	outBuf . actime = stBuf . st_atime	2508:3:75338:75368	686532	1	True				
ANR	686812	AssignmentExpression	outBuf . actime = stBuf . st_atime		686532	0		=			
ANR	686813	MemberAccess	outBuf . actime		686532	0					
ANR	686814	Identifier	outBuf		686532	0					
ANR	686815	Identifier	actime		686532	1					
ANR	686816	MemberAccess	stBuf . st_atime		686532	1					
ANR	686817	Identifier	stBuf		686532	0					
ANR	686818	Identifier	st_atime		686532	1					
ANR	686819	ExpressionStatement	outBuf . modtime = stBuf . st_mtime + 10	2511:3:75466:75502	686532	2	True				
ANR	686820	AssignmentExpression	outBuf . modtime = stBuf . st_mtime + 10		686532	0		=			
ANR	686821	MemberAccess	outBuf . modtime		686532	0					
ANR	686822	Identifier	outBuf		686532	0					
ANR	686823	Identifier	modtime		686532	1					
ANR	686824	AdditiveExpression	stBuf . st_mtime + 10		686532	1		+			
ANR	686825	MemberAccess	stBuf . st_mtime		686532	0					
ANR	686826	Identifier	stBuf		686532	0					
ANR	686827	Identifier	st_mtime		686532	1					
ANR	686828	PrimaryExpression	10		686532	1					
ANR	686829	IfStatement	"if ( utime ( fileName_ . c_str ( ) , & outBuf ) == - 1 )"		686532	3					
ANR	686830	Condition	"utime ( fileName_ . c_str ( ) , & outBuf ) == - 1"	2512:7:75511:75549	686532	0	True				
ANR	686831	EqualityExpression	"utime ( fileName_ . c_str ( ) , & outBuf ) == - 1"		686532	0		==			
ANR	686832	CallExpression	"utime ( fileName_ . c_str ( ) , & outBuf )"		686532	0					
ANR	686833	Callee	utime		686532	0					
ANR	686834	Identifier	utime		686532	0					
ANR	686835	ArgumentList	fileName_ . c_str ( )		686532	1					
ANR	686836	Argument	fileName_ . c_str ( )		686532	0					
ANR	686837	CallExpression	fileName_ . c_str ( )		686532	0					
ANR	686838	Callee	fileName_ . c_str		686532	0					
ANR	686839	MemberAccess	fileName_ . c_str		686532	0					
ANR	686840	Identifier	fileName_		686532	0					
ANR	686841	Identifier	c_str		686532	1					
ANR	686842	ArgumentList			686532	1					
ANR	686843	Argument	& outBuf		686532	1					
ANR	686844	UnaryOperationExpression	& outBuf		686532	0					
ANR	686845	UnaryOperator	&		686532	0					
ANR	686846	Identifier	outBuf		686532	1					
ANR	686847	UnaryOperationExpression	- 1		686532	1					
ANR	686848	UnaryOperator	-		686532	0					
ANR	686849	PrimaryExpression	1		686532	1					
ANR	686850	ExpressionStatement	statErr = true	2513:4:75556:75570	686532	1	True				
ANR	686851	AssignmentExpression	statErr = true		686532	0		=			
ANR	686852	Identifier	statErr		686532	0					
ANR	686853	Identifier	true		686532	1					
ANR	686854	IfStatement	if ( statErr )		686532	1					
ANR	686855	Condition	statErr	2515:6:75582:75588	686532	0	True				
ANR	686856	Identifier	statErr		686532	0					
ANR	686857	CompoundStatement		52:2:1555:1555	686532	1					
ANR	686858	ExpressionStatement	"perror ( ""errno message"" )"	2517:3:75598:75621	686532	0	True				
ANR	686859	CallExpression	"perror ( ""errno message"" )"		686532	0					
ANR	686860	Callee	perror		686532	0					
ANR	686861	Identifier	perror		686532	0					
ANR	686862	ArgumentList	"""errno message"""		686532	1					
ANR	686863	Argument	"""errno message"""		686532	0					
ANR	686864	PrimaryExpression	"""errno message"""		686532	0					
ANR	686865	ExpressionStatement	"( * errorStream ) << ""*********  Cannot preserve file date"" << endl"	2518:3:75626:75690	686532	1	True				
ANR	686866	ShiftExpression	"( * errorStream ) << ""*********  Cannot preserve file date"" << endl"		686532	0		<<			
ANR	686867	UnaryOperationExpression	* errorStream		686532	0					
ANR	686868	UnaryOperator	*		686532	0					
ANR	686869	Identifier	errorStream		686532	1					
ANR	686870	ShiftExpression	"""*********  Cannot preserve file date"" << endl"		686532	1		<<			
ANR	686871	PrimaryExpression	"""*********  Cannot preserve file date"""		686532	0					
ANR	686872	Identifier	endl		686532	1					
ANR	686873	ReturnType	void		686532	1					
ANR	686874	Identifier	ASConsole :: writeFile		686532	2					
ANR	686875	ParameterList	"const string & fileName_ , FileEncoding encoding , ostringstream & out"		686532	3					
ANR	686876	Parameter	const string & fileName_	2464:26:73963:73985	686532	0	True				
ANR	686877	ParameterType	const string &		686532	0					
ANR	686878	Identifier	fileName_		686532	1					
ANR	686879	Parameter	FileEncoding encoding	2464:51:73988:74008	686532	1	True				
ANR	686880	ParameterType	FileEncoding		686532	0					
ANR	686881	Identifier	encoding		686532	1					
ANR	686882	Parameter	ostringstream & out	2464:74:74011:74028	686532	2	True				
ANR	686883	ParameterType	ostringstream &		686532	0					
ANR	686884	Identifier	out		686532	1					
ANR	686885	CFGEntryNode	ENTRY		686532		True				
ANR	686886	CFGExitNode	EXIT		686532		True				
ANR	686887	Symbol	UTF_16LE		686532						
ANR	686888	Symbol	fileName_		686532						
ANR	686889	Symbol	& stBuf		686532						
ANR	686890	Symbol	origFileName		686532						
ANR	686891	Symbol	out		686532						
ANR	686892	Symbol	utf8_16		686532						
ANR	686893	Symbol	stBuf . st_atime		686532						
ANR	686894	Symbol	outBuf		686532						
ANR	686895	Symbol	fileName_ . c_str		686532						
ANR	686896	Symbol	stBuf		686532						
ANR	686897	Symbol	fout		686532						
ANR	686898	Symbol	noBackup		686532						
ANR	686899	Symbol	isBigEndian		686532						
ANR	686900	Symbol	statErr		686532						
ANR	686901	Symbol	stat		686532						
ANR	686902	Symbol	origFileName . c_str		686532						
ANR	686903	Symbol	utf8_16 . utf16LengthFromUtf8		686532						
ANR	686904	Symbol	origSuffix		686532						
ANR	686905	Symbol	errorStream		686532						
ANR	686906	Symbol	utf16Size		686532						
ANR	686907	Symbol	utime		686532						
ANR	686908	Symbol	outBuf . modtime		686532						
ANR	686909	Symbol	false		686532						
ANR	686910	Symbol	preserveDate		686532						
ANR	686911	Symbol	encoding		686532						
ANR	686912	Symbol	out . str		686532						
ANR	686913	Symbol	stBuf . st_mtime		686532						
ANR	686914	Symbol	outBuf . actime		686532						
ANR	686915	Symbol	UTF_16BE		686532						
ANR	686916	Symbol	utf16Out		686532						
ANR	686917	Symbol	true		686532						
ANR	686918	Symbol	out . str ( ) . c_str		686532						
ANR	686919	Symbol	& outBuf		686532						
ANR	686920	Symbol	out . str ( ) . length		686532						
ANR	686921	Symbol	utf16Len		686532						
ANR	686922	Function	ASLibrary :: formatUtf16	2530:0:75940:77395							
ANR	686923	FunctionDef	"ASLibrary :: formatUtf16 (const utf16_t * pSourceIn , const utf16_t * pOptions , fpError fpErrorHandler , fpAlloc fpMemoryAlloc)"		686922	0					
ANR	686924	CompoundStatement		2534:0:76281:77395	686922	0					
ANR	686925	IdentifierDeclStatement	const char * utf8In = convertUtf16ToUtf8 ( pSourceIn ) ;	2535:1:76284:76334	686922	0	True				
ANR	686926	IdentifierDecl	* utf8In = convertUtf16ToUtf8 ( pSourceIn )		686922	0					
ANR	686927	IdentifierDeclType	const char *		686922	0					
ANR	686928	Identifier	utf8In		686922	1					
ANR	686929	AssignmentExpression	* utf8In = convertUtf16ToUtf8 ( pSourceIn )		686922	2		=			
ANR	686930	Identifier	utf8In		686922	0					
ANR	686931	CallExpression	convertUtf16ToUtf8 ( pSourceIn )		686922	1					
ANR	686932	Callee	convertUtf16ToUtf8		686922	0					
ANR	686933	Identifier	convertUtf16ToUtf8		686922	0					
ANR	686934	ArgumentList	pSourceIn		686922	1					
ANR	686935	Argument	pSourceIn		686922	0					
ANR	686936	Identifier	pSourceIn		686922	0					
ANR	686937	IfStatement	if ( utf8In == nullptr )		686922	1					
ANR	686938	Condition	utf8In == nullptr	2536:5:76341:76357	686922	0	True				
ANR	686939	EqualityExpression	utf8In == nullptr		686922	0		==			
ANR	686940	Identifier	utf8In		686922	0					
ANR	686941	Identifier	nullptr		686922	1					
ANR	686942	CompoundStatement		4:1:79:79	686922	1					
ANR	686943	ExpressionStatement	"fpErrorHandler ( 121 , ""Cannot convert input utf-16 to utf-8."" )"	2538:2:76365:76425	686922	0	True				
ANR	686944	CallExpression	"fpErrorHandler ( 121 , ""Cannot convert input utf-16 to utf-8."" )"		686922	0					
ANR	686945	Callee	fpErrorHandler		686922	0					
ANR	686946	Identifier	fpErrorHandler		686922	0					
ANR	686947	ArgumentList	121		686922	1					
ANR	686948	Argument	121		686922	0					
ANR	686949	PrimaryExpression	121		686922	0					
ANR	686950	Argument	"""Cannot convert input utf-16 to utf-8."""		686922	1					
ANR	686951	PrimaryExpression	"""Cannot convert input utf-16 to utf-8."""		686922	0					
ANR	686952	ReturnStatement	return nullptr ;	2539:2:76429:76443	686922	1	True				
ANR	686953	Identifier	nullptr		686922	0					
ANR	686954	IdentifierDeclStatement	const char * utf8Options = convertUtf16ToUtf8 ( pOptions ) ;	2541:1:76449:76503	686922	2	True				
ANR	686955	IdentifierDecl	* utf8Options = convertUtf16ToUtf8 ( pOptions )		686922	0					
ANR	686956	IdentifierDeclType	const char *		686922	0					
ANR	686957	Identifier	utf8Options		686922	1					
ANR	686958	AssignmentExpression	* utf8Options = convertUtf16ToUtf8 ( pOptions )		686922	2		=			
ANR	686959	Identifier	utf8Options		686922	0					
ANR	686960	CallExpression	convertUtf16ToUtf8 ( pOptions )		686922	1					
ANR	686961	Callee	convertUtf16ToUtf8		686922	0					
ANR	686962	Identifier	convertUtf16ToUtf8		686922	0					
ANR	686963	ArgumentList	pOptions		686922	1					
ANR	686964	Argument	pOptions		686922	0					
ANR	686965	Identifier	pOptions		686922	0					
ANR	686966	IfStatement	if ( utf8Options == nullptr )		686922	3					
ANR	686967	Condition	utf8Options == nullptr	2542:5:76510:76531	686922	0	True				
ANR	686968	EqualityExpression	utf8Options == nullptr		686922	0		==			
ANR	686969	Identifier	utf8Options		686922	0					
ANR	686970	Identifier	nullptr		686922	1					
ANR	686971	CompoundStatement		10:1:253:253	686922	1					
ANR	686972	Statement	delete	2544:2:76539:76544	686922	0	True				
ANR	686973	Statement	[	2544:8:76545:76545	686922	1	True				
ANR	686974	Statement	]	2544:9:76546:76546	686922	2	True				
ANR	686975	ExpressionStatement	utf8In	2544:11:76548:76554	686922	3	True				
ANR	686976	Identifier	utf8In		686922	0					
ANR	686977	ExpressionStatement	"fpErrorHandler ( 122 , ""Cannot convert options utf-16 to utf-8."" )"	2545:2:76558:76620	686922	4	True				
ANR	686978	CallExpression	"fpErrorHandler ( 122 , ""Cannot convert options utf-16 to utf-8."" )"		686922	0					
ANR	686979	Callee	fpErrorHandler		686922	0					
ANR	686980	Identifier	fpErrorHandler		686922	0					
ANR	686981	ArgumentList	122		686922	1					
ANR	686982	Argument	122		686922	0					
ANR	686983	PrimaryExpression	122		686922	0					
ANR	686984	Argument	"""Cannot convert options utf-16 to utf-8."""		686922	1					
ANR	686985	PrimaryExpression	"""Cannot convert options utf-16 to utf-8."""		686922	0					
ANR	686986	ReturnStatement	return nullptr ;	2546:2:76624:76638	686922	5	True				
ANR	686987	Identifier	nullptr		686922	0					
ANR	686988	IdentifierDeclStatement	"char * utf8Out = AStyleMain ( utf8In , utf8Options , fpErrorHandler , ASLibrary :: tempMemoryAllocation ) ;"	2550:1:76742:76922	686922	4	True				
ANR	686989	IdentifierDecl	"* utf8Out = AStyleMain ( utf8In , utf8Options , fpErrorHandler , ASLibrary :: tempMemoryAllocation )"		686922	0					
ANR	686990	IdentifierDeclType	char *		686922	0					
ANR	686991	Identifier	utf8Out		686922	1					
ANR	686992	AssignmentExpression	"* utf8Out = AStyleMain ( utf8In , utf8Options , fpErrorHandler , ASLibrary :: tempMemoryAllocation )"		686922	2		=			
ANR	686993	Identifier	utf8Out		686922	0					
ANR	686994	CallExpression	"AStyleMain ( utf8In , utf8Options , fpErrorHandler , ASLibrary :: tempMemoryAllocation )"		686922	1					
ANR	686995	Callee	AStyleMain		686922	0					
ANR	686996	Identifier	AStyleMain		686922	0					
ANR	686997	ArgumentList	utf8In		686922	1					
ANR	686998	Argument	utf8In		686922	0					
ANR	686999	Identifier	utf8In		686922	0					
ANR	687000	Argument	utf8Options		686922	1					
ANR	687001	Identifier	utf8Options		686922	0					
ANR	687002	Argument	fpErrorHandler		686922	2					
ANR	687003	Identifier	fpErrorHandler		686922	0					
ANR	687004	Argument	ASLibrary :: tempMemoryAllocation		686922	3					
ANR	687005	Identifier	ASLibrary :: tempMemoryAllocation		686922	0					
ANR	687006	Statement	delete	2555:1:76949:76954	686922	5	True				
ANR	687007	Statement	[	2555:7:76955:76955	686922	6	True				
ANR	687008	Statement	]	2555:8:76956:76956	686922	7	True				
ANR	687009	ExpressionStatement	utf8In	2555:10:76958:76964	686922	8	True				
ANR	687010	Identifier	utf8In		686922	0					
ANR	687011	Statement	delete	2556:1:76967:76972	686922	9	True				
ANR	687012	Statement	[	2556:7:76973:76973	686922	10	True				
ANR	687013	Statement	]	2556:8:76974:76974	686922	11	True				
ANR	687014	ExpressionStatement	utf8Options	2556:10:76976:76987	686922	12	True				
ANR	687015	Identifier	utf8Options		686922	0					
ANR	687016	ExpressionStatement	utf8In = nullptr	2557:1:76990:77006	686922	13	True				
ANR	687017	AssignmentExpression	utf8In = nullptr		686922	0		=			
ANR	687018	Identifier	utf8In		686922	0					
ANR	687019	Identifier	nullptr		686922	1					
ANR	687020	ExpressionStatement	utf8Options = nullptr	2558:1:77009:77030	686922	14	True				
ANR	687021	AssignmentExpression	utf8Options = nullptr		686922	0		=			
ANR	687022	Identifier	utf8Options		686922	0					
ANR	687023	Identifier	nullptr		686922	1					
ANR	687024	IfStatement	if ( utf8Out == nullptr )		686922	15					
ANR	687025	Condition	utf8Out == nullptr	2560:5:77076:77093	686922	0	True				
ANR	687026	EqualityExpression	utf8Out == nullptr		686922	0		==			
ANR	687027	Identifier	utf8Out		686922	0					
ANR	687028	Identifier	nullptr		686922	1					
ANR	687029	ReturnStatement	return nullptr ;	2561:2:77098:77112	686922	1	True				
ANR	687030	Identifier	nullptr		686922	0					
ANR	687031	IdentifierDeclStatement	"utf16_t * utf16Out = convertUtf8ToUtf16 ( utf8Out , fpMemoryAlloc ) ;"	2563:1:77159:77221	686922	16	True				
ANR	687032	IdentifierDecl	"* utf16Out = convertUtf8ToUtf16 ( utf8Out , fpMemoryAlloc )"		686922	0					
ANR	687033	IdentifierDeclType	utf16_t *		686922	0					
ANR	687034	Identifier	utf16Out		686922	1					
ANR	687035	AssignmentExpression	"* utf16Out = convertUtf8ToUtf16 ( utf8Out , fpMemoryAlloc )"		686922	2		=			
ANR	687036	Identifier	utf16Out		686922	0					
ANR	687037	CallExpression	"convertUtf8ToUtf16 ( utf8Out , fpMemoryAlloc )"		686922	1					
ANR	687038	Callee	convertUtf8ToUtf16		686922	0					
ANR	687039	Identifier	convertUtf8ToUtf16		686922	0					
ANR	687040	ArgumentList	utf8Out		686922	1					
ANR	687041	Argument	utf8Out		686922	0					
ANR	687042	Identifier	utf8Out		686922	0					
ANR	687043	Argument	fpMemoryAlloc		686922	1					
ANR	687044	Identifier	fpMemoryAlloc		686922	0					
ANR	687045	Statement	delete	2564:1:77224:77229	686922	17	True				
ANR	687046	Statement	[	2564:7:77230:77230	686922	18	True				
ANR	687047	Statement	]	2564:8:77231:77231	686922	19	True				
ANR	687048	ExpressionStatement	utf8Out	2564:10:77233:77240	686922	20	True				
ANR	687049	Identifier	utf8Out		686922	0					
ANR	687050	ExpressionStatement	utf8Out = nullptr	2565:1:77243:77260	686922	21	True				
ANR	687051	AssignmentExpression	utf8Out = nullptr		686922	0		=			
ANR	687052	Identifier	utf8Out		686922	0					
ANR	687053	Identifier	nullptr		686922	1					
ANR	687054	IfStatement	if ( utf16Out == nullptr )		686922	22					
ANR	687055	Condition	utf16Out == nullptr	2566:5:77267:77285	686922	0	True				
ANR	687056	EqualityExpression	utf16Out == nullptr		686922	0		==			
ANR	687057	Identifier	utf16Out		686922	0					
ANR	687058	Identifier	nullptr		686922	1					
ANR	687059	CompoundStatement		34:1:1007:1007	686922	1					
ANR	687060	ExpressionStatement	"fpErrorHandler ( 123 , ""Cannot convert output utf-8 to utf-16."" )"	2568:2:77293:77354	686922	0	True				
ANR	687061	CallExpression	"fpErrorHandler ( 123 , ""Cannot convert output utf-8 to utf-16."" )"		686922	0					
ANR	687062	Callee	fpErrorHandler		686922	0					
ANR	687063	Identifier	fpErrorHandler		686922	0					
ANR	687064	ArgumentList	123		686922	1					
ANR	687065	Argument	123		686922	0					
ANR	687066	PrimaryExpression	123		686922	0					
ANR	687067	Argument	"""Cannot convert output utf-8 to utf-16."""		686922	1					
ANR	687068	PrimaryExpression	"""Cannot convert output utf-8 to utf-16."""		686922	0					
ANR	687069	ReturnStatement	return nullptr ;	2569:2:77358:77372	686922	1	True				
ANR	687070	Identifier	nullptr		686922	0					
ANR	687071	ReturnStatement	return utf16Out ;	2571:1:77378:77393	686922	23	True				
ANR	687072	Identifier	utf16Out		686922	0					
ANR	687073	ReturnType	utf16_t *		686922	1					
ANR	687074	Identifier	ASLibrary :: formatUtf16		686922	2					
ANR	687075	ParameterList	"const utf16_t * pSourceIn , const utf16_t * pOptions , fpError fpErrorHandler , fpAlloc fpMemoryAlloc"		686922	3					
ANR	687076	Parameter	const utf16_t * pSourceIn	2530:32:75972:75995	686922	0	True				
ANR	687077	ParameterType	const utf16_t *		686922	0					
ANR	687078	Identifier	pSourceIn		686922	1					
ANR	687079	Parameter	const utf16_t * pOptions	2531:32:76061:76083	686922	1	True				
ANR	687080	ParameterType	const utf16_t *		686922	0					
ANR	687081	Identifier	pOptions		686922	1					
ANR	687082	Parameter	fpError fpErrorHandler	2532:32:76137:76158	686922	2	True				
ANR	687083	ParameterType	fpError		686922	0					
ANR	687084	Identifier	fpErrorHandler		686922	1					
ANR	687085	Parameter	fpAlloc fpMemoryAlloc	2533:32:76221:76241	686922	3	True				
ANR	687086	ParameterType	fpAlloc		686922	0					
ANR	687087	Identifier	fpMemoryAlloc		686922	1					
ANR	687088	CFGEntryNode	ENTRY		686922		True				
ANR	687089	CFGExitNode	EXIT		686922		True				
ANR	687090	Symbol	AStyleMain		686922						
ANR	687091	Symbol	pOptions		686922						
ANR	687092	Symbol	utf8In		686922						
ANR	687093	Symbol	pSourceIn		686922						
ANR	687094	Symbol	utf16Out		686922						
ANR	687095	Symbol	fpMemoryAlloc		686922						
ANR	687096	Symbol	fpErrorHandler		686922						
ANR	687097	Symbol	ASLibrary :: tempMemoryAllocation		686922						
ANR	687098	Symbol	convertUtf8ToUtf16		686922						
ANR	687099	Symbol	nullptr		686922						
ANR	687100	Symbol	utf8Out		686922						
ANR	687101	Symbol	convertUtf16ToUtf8		686922						
ANR	687102	Symbol	utf8Options		686922						
ANR	687103	Function	ASLibrary :: tempMemoryAllocation	2576:6:77549:77685							
ANR	687104	FunctionDef	ASLibrary :: tempMemoryAllocation (unsigned long memoryNeeded)		687103	0					
ANR	687105	CompoundStatement		2577:0:77617:77685	687103	0					
ANR	687106	Statement	char	2578:1:77620:77623	687103	0	True				
ANR	687107	Statement	*	2578:5:77624:77624	687103	1	True				
ANR	687108	Statement	buffer	2578:7:77626:77631	687103	2	True				
ANR	687109	Statement	=	2578:14:77633:77633	687103	3	True				
ANR	687110	Statement	new	2578:16:77635:77637	687103	4	True				
ANR	687111	ExpressionStatement	( nothrow ) char [ memoryNeeded ]	2578:20:77639:77667	687103	5	True				
ANR	687112	CastExpression	( nothrow ) char [ memoryNeeded ]		687103	0					
ANR	687113	CastTarget	nothrow		687103	0					
ANR	687114	ArrayIndexing	char [ memoryNeeded ]		687103	1					
ANR	687115	Identifier	char		687103	0					
ANR	687116	Identifier	memoryNeeded		687103	1					
ANR	687117	ReturnStatement	return buffer ;	2579:1:77670:77683	687103	6	True				
ANR	687118	Identifier	buffer		687103	0					
ANR	687119	ReturnType	STDCALL		687103	1					
ANR	687120	Identifier	ASLibrary :: tempMemoryAllocation		687103	2					
ANR	687121	ParameterList	unsigned long memoryNeeded		687103	3					
ANR	687122	Parameter	unsigned long memoryNeeded	2576:46:77589:77614	687103	0	True				
ANR	687123	ParameterType	unsigned long		687103	0					
ANR	687124	Identifier	memoryNeeded		687103	1					
ANR	687125	CFGEntryNode	ENTRY		687103		True				
ANR	687126	CFGExitNode	EXIT		687103		True				
ANR	687127	Symbol	char		687103						
ANR	687128	Symbol	memoryNeeded		687103						
ANR	687129	Symbol	buffer		687103						
ANR	687130	Function	ASLibrary :: convertUtf8ToUtf16	2587:0:77860:78697							
ANR	687131	FunctionDef	"ASLibrary :: convertUtf8ToUtf16 (const char * utf8In , fpAlloc fpMemoryAlloc)"		687130	0					
ANR	687132	CompoundStatement		2588:0:77948:78697	687130	0					
ANR	687133	IfStatement	if ( utf8In == nullptr )		687130	0					
ANR	687134	Condition	utf8In == nullptr	2589:5:77955:77971	687130	0	True				
ANR	687135	EqualityExpression	utf8In == nullptr		687130	0		==			
ANR	687136	Identifier	utf8In		687130	0					
ANR	687137	Identifier	nullptr		687130	1					
ANR	687138	ReturnStatement	return nullptr ;	2590:2:77976:77990	687130	1	True				
ANR	687139	Identifier	nullptr		687130	0					
ANR	687140	Statement	char	2591:1:77993:77996	687130	1	True				
ANR	687141	Statement	*	2591:5:77997:77997	687130	2	True				
ANR	687142	Statement	data	2591:7:77999:78002	687130	3	True				
ANR	687143	Statement	=	2591:12:78004:78004	687130	4	True				
ANR	687144	Statement	const_cast	2591:14:78006:78015	687130	5	True				
ANR	687145	Statement	<	2591:24:78016:78016	687130	6	True				
ANR	687146	Statement	char	2591:25:78017:78020	687130	7	True				
ANR	687147	Statement	*	2591:29:78021:78021	687130	8	True				
ANR	687148	Statement	>	2591:30:78022:78022	687130	9	True				
ANR	687149	ExpressionStatement	utf8In	2591:31:78023:78031	687130	10	True				
ANR	687150	Identifier	utf8In		687130	0					
ANR	687151	IdentifierDeclStatement	size_t dataSize = strlen ( utf8In ) ;	2592:1:78034:78066	687130	11	True				
ANR	687152	IdentifierDecl	dataSize = strlen ( utf8In )		687130	0					
ANR	687153	IdentifierDeclType	size_t		687130	0					
ANR	687154	Identifier	dataSize		687130	1					
ANR	687155	AssignmentExpression	dataSize = strlen ( utf8In )		687130	2		=			
ANR	687156	Identifier	dataSize		687130	0					
ANR	687157	CallExpression	strlen ( utf8In )		687130	1					
ANR	687158	Callee	strlen		687130	0					
ANR	687159	Identifier	strlen		687130	0					
ANR	687160	ArgumentList	utf8In		687130	1					
ANR	687161	Argument	utf8In		687130	0					
ANR	687162	Identifier	utf8In		687130	0					
ANR	687163	IdentifierDeclStatement	bool isBigEndian = utf8_16 . getBigEndian ( ) ;	2593:1:78069:78110	687130	12	True				
ANR	687164	IdentifierDecl	isBigEndian = utf8_16 . getBigEndian ( )		687130	0					
ANR	687165	IdentifierDeclType	bool		687130	0					
ANR	687166	Identifier	isBigEndian		687130	1					
ANR	687167	AssignmentExpression	isBigEndian = utf8_16 . getBigEndian ( )		687130	2		=			
ANR	687168	Identifier	isBigEndian		687130	0					
ANR	687169	CallExpression	utf8_16 . getBigEndian ( )		687130	1					
ANR	687170	Callee	utf8_16 . getBigEndian		687130	0					
ANR	687171	MemberAccess	utf8_16 . getBigEndian		687130	0					
ANR	687172	Identifier	utf8_16		687130	0					
ANR	687173	Identifier	getBigEndian		687130	1					
ANR	687174	ArgumentList			687130	1					
ANR	687175	IdentifierDeclStatement	"size_t utf16Size = ( utf8_16 . utf16LengthFromUtf8 ( data , dataSize ) + sizeof ( utf16_t ) ) ;"	2595:1:78164:78246	687130	13	True				
ANR	687176	IdentifierDecl	"utf16Size = ( utf8_16 . utf16LengthFromUtf8 ( data , dataSize ) + sizeof ( utf16_t ) )"		687130	0					
ANR	687177	IdentifierDeclType	size_t		687130	0					
ANR	687178	Identifier	utf16Size		687130	1					
ANR	687179	AssignmentExpression	"utf16Size = ( utf8_16 . utf16LengthFromUtf8 ( data , dataSize ) + sizeof ( utf16_t ) )"		687130	2		=			
ANR	687180	Identifier	utf16Size		687130	0					
ANR	687181	AdditiveExpression	"utf8_16 . utf16LengthFromUtf8 ( data , dataSize ) + sizeof ( utf16_t )"		687130	1		+			
ANR	687182	CallExpression	"utf8_16 . utf16LengthFromUtf8 ( data , dataSize )"		687130	0					
ANR	687183	Callee	utf8_16 . utf16LengthFromUtf8		687130	0					
ANR	687184	MemberAccess	utf8_16 . utf16LengthFromUtf8		687130	0					
ANR	687185	Identifier	utf8_16		687130	0					
ANR	687186	Identifier	utf16LengthFromUtf8		687130	1					
ANR	687187	ArgumentList	data		687130	1					
ANR	687188	Argument	data		687130	0					
ANR	687189	Identifier	data		687130	0					
ANR	687190	Argument	dataSize		687130	1					
ANR	687191	Identifier	dataSize		687130	0					
ANR	687192	SizeofExpression	sizeof ( utf16_t )		687130	1					
ANR	687193	Sizeof	sizeof		687130	0					
ANR	687194	SizeofOperand	utf16_t		687130	1					
ANR	687195	IdentifierDeclStatement	char * utf16Out = fpMemoryAlloc ( ( long ) utf16Size ) ;	2596:1:78249:78296	687130	14	True				
ANR	687196	IdentifierDecl	* utf16Out = fpMemoryAlloc ( ( long ) utf16Size )		687130	0					
ANR	687197	IdentifierDeclType	char *		687130	0					
ANR	687198	Identifier	utf16Out		687130	1					
ANR	687199	AssignmentExpression	* utf16Out = fpMemoryAlloc ( ( long ) utf16Size )		687130	2		=			
ANR	687200	Identifier	utf16Out		687130	0					
ANR	687201	CallExpression	fpMemoryAlloc ( ( long ) utf16Size )		687130	1					
ANR	687202	Callee	fpMemoryAlloc		687130	0					
ANR	687203	Identifier	fpMemoryAlloc		687130	0					
ANR	687204	ArgumentList	( long ) utf16Size		687130	1					
ANR	687205	Argument	( long ) utf16Size		687130	0					
ANR	687206	CastExpression	( long ) utf16Size		687130	0					
ANR	687207	CastTarget	long		687130	0					
ANR	687208	Identifier	utf16Size		687130	1					
ANR	687209	IfStatement	if ( utf16Out == nullptr )		687130	15					
ANR	687210	Condition	utf16Out == nullptr	2597:5:78303:78321	687130	0	True				
ANR	687211	EqualityExpression	utf16Out == nullptr		687130	0		==			
ANR	687212	Identifier	utf16Out		687130	0					
ANR	687213	Identifier	nullptr		687130	1					
ANR	687214	ReturnStatement	return nullptr ;	2598:2:78326:78340	687130	1	True				
ANR	687215	Identifier	nullptr		687130	0					
ANR	687216	ExpressionStatement	"utf8_16 . utf8ToUtf16 ( data , dataSize + 1 , isBigEndian , utf16Out )"	2600:1:78357:78419	687130	16	True				
ANR	687217	CallExpression	"utf8_16 . utf8ToUtf16 ( data , dataSize + 1 , isBigEndian , utf16Out )"		687130	0					
ANR	687218	Callee	utf8_16 . utf8ToUtf16		687130	0					
ANR	687219	MemberAccess	utf8_16 . utf8ToUtf16		687130	0					
ANR	687220	Identifier	utf8_16		687130	0					
ANR	687221	Identifier	utf8ToUtf16		687130	1					
ANR	687222	ArgumentList	data		687130	1					
ANR	687223	Argument	data		687130	0					
ANR	687224	Identifier	data		687130	0					
ANR	687225	Argument	dataSize + 1		687130	1					
ANR	687226	AdditiveExpression	dataSize + 1		687130	0		+			
ANR	687227	Identifier	dataSize		687130	0					
ANR	687228	PrimaryExpression	1		687130	1					
ANR	687229	Argument	isBigEndian		687130	2					
ANR	687230	Identifier	isBigEndian		687130	0					
ANR	687231	Argument	utf16Out		687130	3					
ANR	687232	Identifier	utf16Out		687130	0					
ANR	687233	Statement	assert	2605:1:78550:78555	687130	17	True				
ANR	687234	Statement	(	2605:7:78556:78556	687130	18	True				
ANR	687235	Statement	utf16Size	2605:8:78557:78565	687130	19	True				
ANR	687236	Statement	==	2605:18:78567:78568	687130	20	True				
ANR	687237	Statement	(	2605:21:78570:78570	687130	21	True				
ANR	687238	Statement	utf8_16	2605:22:78571:78577	687130	22	True				
ANR	687239	Statement	.	2605:29:78578:78578	687130	23	True				
ANR	687240	Statement	utf16len	2605:30:78579:78586	687130	24	True				
ANR	687241	Statement	(	2605:38:78587:78587	687130	25	True				
ANR	687242	Statement	reinterpret_cast	2605:39:78588:78603	687130	26	True				
ANR	687243	Statement	<	2605:55:78604:78604	687130	27	True				
ANR	687244	Statement	utf16_t	2605:56:78605:78611	687130	28	True				
ANR	687245	Statement	*	2605:63:78612:78612	687130	29	True				
ANR	687246	Statement	>	2605:64:78613:78613	687130	30	True				
ANR	687247	Statement	(	2605:65:78614:78614	687130	31	True				
ANR	687248	Statement	utf16Out	2605:66:78615:78622	687130	32	True				
ANR	687249	Statement	)	2605:74:78623:78623	687130	33	True				
ANR	687250	Statement	)	2605:75:78624:78624	687130	34	True				
ANR	687251	Statement	+	2605:77:78626:78626	687130	35	True				
ANR	687252	Statement	1	2605:79:78628:78628	687130	36	True				
ANR	687253	Statement	)	2605:80:78629:78629	687130	37	True				
ANR	687254	Statement	*	2605:82:78631:78631	687130	38	True				
ANR	687255	Statement	sizeof	2605:84:78633:78638	687130	39	True				
ANR	687256	Statement	(	2605:90:78639:78639	687130	40	True				
ANR	687257	Statement	utf16_t	2605:91:78640:78646	687130	41	True				
ANR	687258	Statement	)	2605:98:78647:78647	687130	42	True				
ANR	687259	Statement	)	2605:99:78648:78648	687130	43	True				
ANR	687260	ExpressionStatement		2605:100:78649:78649	687130	44	True				
ANR	687261	Statement	return	2606:1:78652:78657	687130	45	True				
ANR	687262	Statement	reinterpret_cast	2606:8:78659:78674	687130	46	True				
ANR	687263	Statement	<	2606:24:78675:78675	687130	47	True				
ANR	687264	Statement	utf16_t	2606:25:78676:78682	687130	48	True				
ANR	687265	Statement	*	2606:32:78683:78683	687130	49	True				
ANR	687266	Statement	>	2606:33:78684:78684	687130	50	True				
ANR	687267	ExpressionStatement	utf16Out	2606:34:78685:78695	687130	51	True				
ANR	687268	Identifier	utf16Out		687130	0					
ANR	687269	ReturnType	utf16_t *		687130	1					
ANR	687270	Identifier	ASLibrary :: convertUtf8ToUtf16		687130	2					
ANR	687271	ParameterList	"const char * utf8In , fpAlloc fpMemoryAlloc"		687130	3					
ANR	687272	Parameter	const char * utf8In	2587:39:77899:77916	687130	0	True				
ANR	687273	ParameterType	const char *		687130	0					
ANR	687274	Identifier	utf8In		687130	1					
ANR	687275	Parameter	fpAlloc fpMemoryAlloc	2587:59:77919:77939	687130	1	True				
ANR	687276	ParameterType	fpAlloc		687130	0					
ANR	687277	Identifier	fpMemoryAlloc		687130	1					
ANR	687278	CFGEntryNode	ENTRY		687130		True				
ANR	687279	CFGExitNode	EXIT		687130		True				
ANR	687280	Symbol	utf8_16		687130						
ANR	687281	Symbol	strlen		687130						
ANR	687282	Symbol	utf8_16 . utf16LengthFromUtf8		687130						
ANR	687283	Symbol	data		687130						
ANR	687284	Symbol	utf16Out		687130						
ANR	687285	Symbol	utf16Size		687130						
ANR	687286	Symbol	fpMemoryAlloc		687130						
ANR	687287	Symbol	dataSize		687130						
ANR	687288	Symbol	isBigEndian		687130						
ANR	687289	Symbol	utf8In		687130						
ANR	687290	Symbol	nullptr		687130						
ANR	687291	Symbol	utf8_16 . getBigEndian		687130						
ANR	687292	Function	ASLibrary :: convertUtf16ToUtf8	2614:0:78825:79584							
ANR	687293	FunctionDef	ASLibrary :: convertUtf16ToUtf8 (const utf16_t * utf16In)		687292	0					
ANR	687294	CompoundStatement		2615:0:78891:79584	687292	0					
ANR	687295	IfStatement	if ( utf16In == nullptr )		687292	0					
ANR	687296	Condition	utf16In == nullptr	2616:5:78898:78915	687292	0	True				
ANR	687297	EqualityExpression	utf16In == nullptr		687292	0		==			
ANR	687298	Identifier	utf16In		687292	0					
ANR	687299	Identifier	nullptr		687292	1					
ANR	687300	ReturnStatement	return nullptr ;	2617:2:78920:78934	687292	1	True				
ANR	687301	Identifier	nullptr		687292	0					
ANR	687302	Statement	char	2618:1:78937:78940	687292	1	True				
ANR	687303	Statement	*	2618:5:78941:78941	687292	2	True				
ANR	687304	Statement	data	2618:7:78943:78946	687292	3	True				
ANR	687305	Statement	=	2618:12:78948:78948	687292	4	True				
ANR	687306	Statement	reinterpret_cast	2618:14:78950:78965	687292	5	True				
ANR	687307	Statement	<	2618:30:78966:78966	687292	6	True				
ANR	687308	Statement	char	2618:31:78967:78970	687292	7	True				
ANR	687309	Statement	*	2618:35:78971:78971	687292	8	True				
ANR	687310	Statement	>	2618:36:78972:78972	687292	9	True				
ANR	687311	Statement	(	2618:37:78973:78973	687292	10	True				
ANR	687312	Statement	const_cast	2618:38:78974:78983	687292	11	True				
ANR	687313	Statement	<	2618:48:78984:78984	687292	12	True				
ANR	687314	Statement	utf16_t	2618:49:78985:78991	687292	13	True				
ANR	687315	Statement	*	2618:56:78992:78992	687292	14	True				
ANR	687316	Statement	>	2618:57:78993:78993	687292	15	True				
ANR	687317	Statement	(	2618:58:78994:78994	687292	16	True				
ANR	687318	Statement	utf16In	2618:59:78995:79001	687292	17	True				
ANR	687319	Statement	)	2618:66:79002:79002	687292	18	True				
ANR	687320	Statement	)	2618:67:79003:79003	687292	19	True				
ANR	687321	ExpressionStatement		2618:68:79004:79004	687292	20	True				
ANR	687322	IdentifierDeclStatement	size_t dataSize = utf8_16 . utf16len ( utf16In ) * sizeof ( utf16_t ) ;	2620:1:79033:79094	687292	21	True				
ANR	687323	IdentifierDecl	dataSize = utf8_16 . utf16len ( utf16In ) * sizeof ( utf16_t )		687292	0					
ANR	687324	IdentifierDeclType	size_t		687292	0					
ANR	687325	Identifier	dataSize		687292	1					
ANR	687326	AssignmentExpression	dataSize = utf8_16 . utf16len ( utf16In ) * sizeof ( utf16_t )		687292	2		=			
ANR	687327	Identifier	dataSize		687292	0					
ANR	687328	MultiplicativeExpression	utf8_16 . utf16len ( utf16In ) * sizeof ( utf16_t )		687292	1		*			
ANR	687329	CallExpression	utf8_16 . utf16len ( utf16In )		687292	0					
ANR	687330	Callee	utf8_16 . utf16len		687292	0					
ANR	687331	MemberAccess	utf8_16 . utf16len		687292	0					
ANR	687332	Identifier	utf8_16		687292	0					
ANR	687333	Identifier	utf16len		687292	1					
ANR	687334	ArgumentList	utf16In		687292	1					
ANR	687335	Argument	utf16In		687292	0					
ANR	687336	Identifier	utf16In		687292	0					
ANR	687337	SizeofExpression	sizeof ( utf16_t )		687292	1					
ANR	687338	Sizeof	sizeof		687292	0					
ANR	687339	SizeofOperand	utf16_t		687292	1					
ANR	687340	IdentifierDeclStatement	bool isBigEndian = utf8_16 . getBigEndian ( ) ;	2621:1:79097:79138	687292	22	True				
ANR	687341	IdentifierDecl	isBigEndian = utf8_16 . getBigEndian ( )		687292	0					
ANR	687342	IdentifierDeclType	bool		687292	0					
ANR	687343	Identifier	isBigEndian		687292	1					
ANR	687344	AssignmentExpression	isBigEndian = utf8_16 . getBigEndian ( )		687292	2		=			
ANR	687345	Identifier	isBigEndian		687292	0					
ANR	687346	CallExpression	utf8_16 . getBigEndian ( )		687292	1					
ANR	687347	Callee	utf8_16 . getBigEndian		687292	0					
ANR	687348	MemberAccess	utf8_16 . getBigEndian		687292	0					
ANR	687349	Identifier	utf8_16		687292	0					
ANR	687350	Identifier	getBigEndian		687292	1					
ANR	687351	ArgumentList			687292	1					
ANR	687352	IdentifierDeclStatement	"size_t utf8Size = utf8_16 . utf8LengthFromUtf16 ( data , dataSize , isBigEndian ) + 1 ;"	2622:1:79141:79219	687292	23	True				
ANR	687353	IdentifierDecl	"utf8Size = utf8_16 . utf8LengthFromUtf16 ( data , dataSize , isBigEndian ) + 1"		687292	0					
ANR	687354	IdentifierDeclType	size_t		687292	0					
ANR	687355	Identifier	utf8Size		687292	1					
ANR	687356	AssignmentExpression	"utf8Size = utf8_16 . utf8LengthFromUtf16 ( data , dataSize , isBigEndian ) + 1"		687292	2		=			
ANR	687357	Identifier	utf8Size		687292	0					
ANR	687358	AdditiveExpression	"utf8_16 . utf8LengthFromUtf16 ( data , dataSize , isBigEndian ) + 1"		687292	1		+			
ANR	687359	CallExpression	"utf8_16 . utf8LengthFromUtf16 ( data , dataSize , isBigEndian )"		687292	0					
ANR	687360	Callee	utf8_16 . utf8LengthFromUtf16		687292	0					
ANR	687361	MemberAccess	utf8_16 . utf8LengthFromUtf16		687292	0					
ANR	687362	Identifier	utf8_16		687292	0					
ANR	687363	Identifier	utf8LengthFromUtf16		687292	1					
ANR	687364	ArgumentList	data		687292	1					
ANR	687365	Argument	data		687292	0					
ANR	687366	Identifier	data		687292	0					
ANR	687367	Argument	dataSize		687292	1					
ANR	687368	Identifier	dataSize		687292	0					
ANR	687369	Argument	isBigEndian		687292	2					
ANR	687370	Identifier	isBigEndian		687292	0					
ANR	687371	PrimaryExpression	1		687292	1					
ANR	687372	Statement	char	2623:1:79222:79225	687292	24	True				
ANR	687373	Statement	*	2623:5:79226:79226	687292	25	True				
ANR	687374	Statement	utf8Out	2623:7:79228:79234	687292	26	True				
ANR	687375	Statement	=	2623:15:79236:79236	687292	27	True				
ANR	687376	Statement	new	2623:17:79238:79240	687292	28	True				
ANR	687377	ExpressionStatement	( nothrow ) char [ utf8Size ]	2623:21:79242:79266	687292	29	True				
ANR	687378	CastExpression	( nothrow ) char [ utf8Size ]		687292	0					
ANR	687379	CastTarget	nothrow		687292	0					
ANR	687380	ArrayIndexing	char [ utf8Size ]		687292	1					
ANR	687381	Identifier	char		687292	0					
ANR	687382	Identifier	utf8Size		687292	1					
ANR	687383	IfStatement	if ( utf8Out == nullptr )		687292	30					
ANR	687384	Condition	utf8Out == nullptr	2624:5:79273:79290	687292	0	True				
ANR	687385	EqualityExpression	utf8Out == nullptr		687292	0		==			
ANR	687386	Identifier	utf8Out		687292	0					
ANR	687387	Identifier	nullptr		687292	1					
ANR	687388	ReturnStatement	return nullptr ;	2625:2:79295:79309	687292	1	True				
ANR	687389	Identifier	nullptr		687292	0					
ANR	687390	ExpressionStatement	"utf8_16 . utf16ToUtf8 ( data , dataSize + 1 , isBigEndian , true , utf8Out )"	2627:1:79326:79393	687292	31	True				
ANR	687391	CallExpression	"utf8_16 . utf16ToUtf8 ( data , dataSize + 1 , isBigEndian , true , utf8Out )"		687292	0					
ANR	687392	Callee	utf8_16 . utf16ToUtf8		687292	0					
ANR	687393	MemberAccess	utf8_16 . utf16ToUtf8		687292	0					
ANR	687394	Identifier	utf8_16		687292	0					
ANR	687395	Identifier	utf16ToUtf8		687292	1					
ANR	687396	ArgumentList	data		687292	1					
ANR	687397	Argument	data		687292	0					
ANR	687398	Identifier	data		687292	0					
ANR	687399	Argument	dataSize + 1		687292	1					
ANR	687400	AdditiveExpression	dataSize + 1		687292	0		+			
ANR	687401	Identifier	dataSize		687292	0					
ANR	687402	PrimaryExpression	1		687292	1					
ANR	687403	Argument	isBigEndian		687292	2					
ANR	687404	Identifier	isBigEndian		687292	0					
ANR	687405	Argument	true		687292	3					
ANR	687406	Identifier	true		687292	0					
ANR	687407	Argument	utf8Out		687292	4					
ANR	687408	Identifier	utf8Out		687292	0					
ANR	687409	ExpressionStatement	assert ( utf8Size == strlen ( utf8Out ) + 1 )	2632:1:79526:79565	687292	32	True				
ANR	687410	CallExpression	assert ( utf8Size == strlen ( utf8Out ) + 1 )		687292	0					
ANR	687411	Callee	assert		687292	0					
ANR	687412	Identifier	assert		687292	0					
ANR	687413	ArgumentList	utf8Size == strlen ( utf8Out ) + 1		687292	1					
ANR	687414	Argument	utf8Size == strlen ( utf8Out ) + 1		687292	0					
ANR	687415	EqualityExpression	utf8Size == strlen ( utf8Out ) + 1		687292	0		==			
ANR	687416	Identifier	utf8Size		687292	0					
ANR	687417	AdditiveExpression	strlen ( utf8Out ) + 1		687292	1		+			
ANR	687418	CallExpression	strlen ( utf8Out )		687292	0					
ANR	687419	Callee	strlen		687292	0					
ANR	687420	Identifier	strlen		687292	0					
ANR	687421	ArgumentList	utf8Out		687292	1					
ANR	687422	Argument	utf8Out		687292	0					
ANR	687423	Identifier	utf8Out		687292	0					
ANR	687424	PrimaryExpression	1		687292	1					
ANR	687425	ReturnStatement	return utf8Out ;	2633:1:79568:79582	687292	33	True				
ANR	687426	Identifier	utf8Out		687292	0					
ANR	687427	ReturnType	char *		687292	1					
ANR	687428	Identifier	ASLibrary :: convertUtf16ToUtf8		687292	2					
ANR	687429	ParameterList	const utf16_t * utf16In		687292	3					
ANR	687430	Parameter	const utf16_t * utf16In	2614:36:78861:78882	687292	0	True				
ANR	687431	ParameterType	const utf16_t *		687292	0					
ANR	687432	Identifier	utf16In		687292	1					
ANR	687433	CFGEntryNode	ENTRY		687292		True				
ANR	687434	CFGExitNode	EXIT		687292		True				
ANR	687435	Symbol	utf8_16 . utf16len		687292						
ANR	687436	Symbol	data		687292						
ANR	687437	Symbol	dataSize		687292						
ANR	687438	Symbol	utf16In		687292						
ANR	687439	Symbol	utf8_16		687292						
ANR	687440	Symbol	strlen		687292						
ANR	687441	Symbol	utf8Size		687292						
ANR	687442	Symbol	utf8_16 . utf8LengthFromUtf16		687292						
ANR	687443	Symbol	char		687292						
ANR	687444	Symbol	true		687292						
ANR	687445	Symbol	isBigEndian		687292						
ANR	687446	Symbol	nullptr		687292						
ANR	687447	Symbol	utf8_16 . getBigEndian		687292						
ANR	687448	Symbol	utf8Out		687292						
ANR	687449	Function	ASOptions :: ASOptions	2644:0:79850:79927							
ANR	687450	FunctionDef	ASOptions :: ASOptions (ASFormatter & formatterArg)		687449	0					
ANR	687451	CompoundStatement		2646:0:79925:79927	687449	0					
ANR	687452	Identifier	ASOptions :: ASOptions		687449	1					
ANR	687453	ParameterList	ASFormatter & formatterArg		687449	2					
ANR	687454	Parameter	ASFormatter & formatterArg	2644:21:79871:79895	687449	0	True				
ANR	687455	ParameterType	ASFormatter &		687449	0					
ANR	687456	Identifier	formatterArg		687449	1					
ANR	687457	CFGEntryNode	ENTRY		687449		True				
ANR	687458	CFGExitNode	EXIT		687449		True				
ANR	687459	Symbol	formatterArg		687449						
ANR	687460	Function	ASOptions :: ASOptions	2648:0:79935:80056							
ANR	687461	FunctionDef	"ASOptions :: ASOptions (ASFormatter & formatterArg , ASConsole & consoleArg)"		687460	0					
ANR	687462	CompoundStatement		2650:0:80054:80056	687460	0					
ANR	687463	Identifier	ASOptions :: ASOptions		687460	1					
ANR	687464	ParameterList	"ASFormatter & formatterArg , ASConsole & consoleArg"		687460	2					
ANR	687465	Parameter	ASFormatter & formatterArg	2648:21:79956:79980	687460	0	True				
ANR	687466	ParameterType	ASFormatter &		687460	0					
ANR	687467	Identifier	formatterArg		687460	1					
ANR	687468	Parameter	ASConsole & consoleArg	2648:48:79983:80003	687460	1	True				
ANR	687469	ParameterType	ASConsole &		687460	0					
ANR	687470	Identifier	consoleArg		687460	1					
ANR	687471	CFGEntryNode	ENTRY		687460		True				
ANR	687472	CFGExitNode	EXIT		687460		True				
ANR	687473	Symbol	consoleArg		687460						
ANR	687474	Symbol	formatterArg		687460						
ANR	687475	Function	ASOptions :: parseOptions	2659:0:80259:81190							
ANR	687476	FunctionDef	"ASOptions :: parseOptions (vector < string > & optionsVector , const string & errorInfo)"		687475	0					
ANR	687477	CompoundStatement		2660:0:80344:81190	687475	0					
ANR	687478	IdentifierDeclStatement	vector < string > :: iterator option ;	2661:1:80347:80378	687475	0	True				
ANR	687479	IdentifierDecl	option		687475	0					
ANR	687480	IdentifierDeclType	vector < string > :: iterator		687475	0					
ANR	687481	Identifier	option		687475	1					
ANR	687482	IdentifierDeclStatement	"string arg , subArg ;"	2662:1:80381:80399	687475	1	True				
ANR	687483	IdentifierDecl	arg		687475	0					
ANR	687484	IdentifierDeclType	string		687475	0					
ANR	687485	Identifier	arg		687475	1					
ANR	687486	IdentifierDecl	subArg		687475	1					
ANR	687487	IdentifierDeclType	string		687475	0					
ANR	687488	Identifier	subArg		687475	1					
ANR	687489	ExpressionStatement	optionErrors . clear ( )	2663:1:80402:80422	687475	2	True				
ANR	687490	CallExpression	optionErrors . clear ( )		687475	0					
ANR	687491	Callee	optionErrors . clear		687475	0					
ANR	687492	MemberAccess	optionErrors . clear		687475	0					
ANR	687493	Identifier	optionErrors		687475	0					
ANR	687494	Identifier	clear		687475	1					
ANR	687495	ArgumentList			687475	1					
ANR	687496	ForStatement	for ( option = optionsVector . begin ( ) ; option != optionsVector . end ( ) ; ++ option )		687475	3					
ANR	687497	ForInit	option = optionsVector . begin ( ) ;	2665:6:80431:80461	687475	0	True				
ANR	687498	AssignmentExpression	option = optionsVector . begin ( )		687475	0		=			
ANR	687499	Identifier	option		687475	0					
ANR	687500	CallExpression	optionsVector . begin ( )		687475	1					
ANR	687501	Callee	optionsVector . begin		687475	0					
ANR	687502	MemberAccess	optionsVector . begin		687475	0					
ANR	687503	Identifier	optionsVector		687475	0					
ANR	687504	Identifier	begin		687475	1					
ANR	687505	ArgumentList			687475	1					
ANR	687506	Condition	option != optionsVector . end ( )	2665:38:80463:80491	687475	1	True				
ANR	687507	EqualityExpression	option != optionsVector . end ( )		687475	0		!=			
ANR	687508	Identifier	option		687475	0					
ANR	687509	CallExpression	optionsVector . end ( )		687475	1					
ANR	687510	Callee	optionsVector . end		687475	0					
ANR	687511	MemberAccess	optionsVector . end		687475	0					
ANR	687512	Identifier	optionsVector		687475	0					
ANR	687513	Identifier	end		687475	1					
ANR	687514	ArgumentList			687475	1					
ANR	687515	UnaryExpression	++ option	2665:69:80494:80501	687475	2	True				
ANR	687516	IncDec	++		687475	0					
ANR	687517	Identifier	option		687475	1					
ANR	687518	CompoundStatement		7:1:160:160	687475	3					
ANR	687519	ExpressionStatement	arg = * option	2667:2:80509:80522	687475	0	True				
ANR	687520	AssignmentExpression	arg = * option		687475	0		=			
ANR	687521	Identifier	arg		687475	0					
ANR	687522	UnaryOperationExpression	* option		687475	1					
ANR	687523	UnaryOperator	*		687475	0					
ANR	687524	Identifier	option		687475	1					
ANR	687525	IfStatement	"if ( arg . compare ( 0 , 2 , ""--"" ) == 0 )"		687475	1					
ANR	687526	Condition	"arg . compare ( 0 , 2 , ""--"" ) == 0"	2669:6:80531:80558	687475	0	True				
ANR	687527	EqualityExpression	"arg . compare ( 0 , 2 , ""--"" ) == 0"		687475	0		==			
ANR	687528	CallExpression	"arg . compare ( 0 , 2 , ""--"" )"		687475	0					
ANR	687529	Callee	arg . compare		687475	0					
ANR	687530	MemberAccess	arg . compare		687475	0					
ANR	687531	Identifier	arg		687475	0					
ANR	687532	Identifier	compare		687475	1					
ANR	687533	ArgumentList	0		687475	1					
ANR	687534	Argument	0		687475	0					
ANR	687535	PrimaryExpression	0		687475	0					
ANR	687536	Argument	2		687475	1					
ANR	687537	PrimaryExpression	2		687475	0					
ANR	687538	Argument	"""--"""		687475	2					
ANR	687539	PrimaryExpression	"""--"""		687475	0					
ANR	687540	PrimaryExpression	0		687475	1					
ANR	687541	ExpressionStatement	"parseOption ( arg . substr ( 2 ) , errorInfo )"	2670:3:80564:80601	687475	1	True				
ANR	687542	CallExpression	"parseOption ( arg . substr ( 2 ) , errorInfo )"		687475	0					
ANR	687543	Callee	parseOption		687475	0					
ANR	687544	Identifier	parseOption		687475	0					
ANR	687545	ArgumentList	arg . substr ( 2 )		687475	1					
ANR	687546	Argument	arg . substr ( 2 )		687475	0					
ANR	687547	CallExpression	arg . substr ( 2 )		687475	0					
ANR	687548	Callee	arg . substr		687475	0					
ANR	687549	MemberAccess	arg . substr		687475	0					
ANR	687550	Identifier	arg		687475	0					
ANR	687551	Identifier	substr		687475	1					
ANR	687552	ArgumentList	2		687475	1					
ANR	687553	Argument	2		687475	0					
ANR	687554	PrimaryExpression	2		687475	0					
ANR	687555	Argument	errorInfo		687475	1					
ANR	687556	Identifier	errorInfo		687475	0					
ANR	687557	ElseStatement	else		687475	0					
ANR	687558	IfStatement	if ( arg [ 0 ] == '-' )		687475	0					
ANR	687559	Condition	arg [ 0 ] == '-'	2671:11:80614:80626	687475	0	True				
ANR	687560	EqualityExpression	arg [ 0 ] == '-'		687475	0		==			
ANR	687561	ArrayIndexing	arg [ 0 ]		687475	0					
ANR	687562	Identifier	arg		687475	0					
ANR	687563	PrimaryExpression	0		687475	1					
ANR	687564	PrimaryExpression	'-'		687475	1					
ANR	687565	CompoundStatement		14:3:291:299	687475	1					
ANR	687566	IdentifierDeclStatement	size_t i ;	2673:3:80636:80644	687475	0	True				
ANR	687567	IdentifierDecl	i		687475	0					
ANR	687568	IdentifierDeclType	size_t		687475	0					
ANR	687569	Identifier	i		687475	1					
ANR	687570	ForStatement	for ( i = 1 ; i < arg . length ( ) ; ++ i )		687475	1					
ANR	687571	ForInit	i = 1 ;	2675:8:80655:80660	687475	0	True				
ANR	687572	AssignmentExpression	i = 1		687475	0		=			
ANR	687573	Identifier	i		687475	0					
ANR	687574	PrimaryExpression	1		687475	1					
ANR	687575	Condition	i < arg . length ( )	2675:15:80662:80677	687475	1	True				
ANR	687576	RelationalExpression	i < arg . length ( )		687475	0		<			
ANR	687577	Identifier	i		687475	0					
ANR	687578	CallExpression	arg . length ( )		687475	1					
ANR	687579	Callee	arg . length		687475	0					
ANR	687580	MemberAccess	arg . length		687475	0					
ANR	687581	Identifier	arg		687475	0					
ANR	687582	Identifier	length		687475	1					
ANR	687583	ArgumentList			687475	1					
ANR	687584	UnaryExpression	++ i	2675:33:80680:80682	687475	2	True				
ANR	687585	IncDec	++		687475	0					
ANR	687586	Identifier	i		687475	1					
ANR	687587	CompoundStatement		17:3:343:343	687475	3					
ANR	687588	IfStatement	if ( i > 1 && isalpha ( ( unsigned char ) arg [ i ] ) && arg [ i - 1 ] != 'x' )		687475	0					
ANR	687589	Condition	i > 1 && isalpha ( ( unsigned char ) arg [ i ] ) && arg [ i - 1 ] != 'x'	2677:8:80698:80781	687475	0	True				
ANR	687590	AndExpression	i > 1 && isalpha ( ( unsigned char ) arg [ i ] ) && arg [ i - 1 ] != 'x'		687475	0		&&			
ANR	687591	RelationalExpression	i > 1		687475	0		>			
ANR	687592	Identifier	i		687475	0					
ANR	687593	PrimaryExpression	1		687475	1					
ANR	687594	AndExpression	isalpha ( ( unsigned char ) arg [ i ] ) && arg [ i - 1 ] != 'x'		687475	1		&&			
ANR	687595	CallExpression	isalpha ( ( unsigned char ) arg [ i ] )		687475	0					
ANR	687596	Callee	isalpha		687475	0					
ANR	687597	Identifier	isalpha		687475	0					
ANR	687598	ArgumentList	( unsigned char ) arg [ i ]		687475	1					
ANR	687599	Argument	( unsigned char ) arg [ i ]		687475	0					
ANR	687600	CastExpression	( unsigned char ) arg [ i ]		687475	0					
ANR	687601	CastTarget	unsigned char		687475	0					
ANR	687602	ArrayIndexing	arg [ i ]		687475	1					
ANR	687603	Identifier	arg		687475	0					
ANR	687604	Identifier	i		687475	1					
ANR	687605	EqualityExpression	arg [ i - 1 ] != 'x'		687475	1		!=			
ANR	687606	ArrayIndexing	arg [ i - 1 ]		687475	0					
ANR	687607	Identifier	arg		687475	0					
ANR	687608	AdditiveExpression	i - 1		687475	1		-			
ANR	687609	Identifier	i		687475	0					
ANR	687610	PrimaryExpression	1		687475	1					
ANR	687611	PrimaryExpression	'x'		687475	1					
ANR	687612	CompoundStatement		21:4:443:443	687475	1					
ANR	687613	ExpressionStatement	"parseOption ( subArg , errorInfo )"	2682:5:80839:80869	687475	0	True				
ANR	687614	CallExpression	"parseOption ( subArg , errorInfo )"		687475	0					
ANR	687615	Callee	parseOption		687475	0					
ANR	687616	Identifier	parseOption		687475	0					
ANR	687617	ArgumentList	subArg		687475	1					
ANR	687618	Argument	subArg		687475	0					
ANR	687619	Identifier	subArg		687475	0					
ANR	687620	Argument	errorInfo		687475	1					
ANR	687621	Identifier	errorInfo		687475	0					
ANR	687622	ExpressionStatement	"subArg = """""	2683:5:80876:80887	687475	1	True				
ANR	687623	AssignmentExpression	"subArg = """""		687475	0		=			
ANR	687624	Identifier	subArg		687475	0					
ANR	687625	PrimaryExpression	""""""		687475	1					
ANR	687626	ExpressionStatement	"subArg . append ( 1 , arg [ i ] )"	2686:4:80942:80966	687475	1	True				
ANR	687627	CallExpression	"subArg . append ( 1 , arg [ i ] )"		687475	0					
ANR	687628	Callee	subArg . append		687475	0					
ANR	687629	MemberAccess	subArg . append		687475	0					
ANR	687630	Identifier	subArg		687475	0					
ANR	687631	Identifier	append		687475	1					
ANR	687632	ArgumentList	1		687475	1					
ANR	687633	Argument	1		687475	0					
ANR	687634	PrimaryExpression	1		687475	0					
ANR	687635	Argument	arg [ i ]		687475	1					
ANR	687636	ArrayIndexing	arg [ i ]		687475	0					
ANR	687637	Identifier	arg		687475	0					
ANR	687638	Identifier	i		687475	1					
ANR	687639	ExpressionStatement	"parseOption ( subArg , errorInfo )"	2689:3:81004:81034	687475	2	True				
ANR	687640	CallExpression	"parseOption ( subArg , errorInfo )"		687475	0					
ANR	687641	Callee	parseOption		687475	0					
ANR	687642	Identifier	parseOption		687475	0					
ANR	687643	ArgumentList	subArg		687475	1					
ANR	687644	Argument	subArg		687475	0					
ANR	687645	Identifier	subArg		687475	0					
ANR	687646	Argument	errorInfo		687475	1					
ANR	687647	Identifier	errorInfo		687475	0					
ANR	687648	ExpressionStatement	"subArg = """""	2690:3:81039:81050	687475	3	True				
ANR	687649	AssignmentExpression	"subArg = """""		687475	0		=			
ANR	687650	Identifier	subArg		687475	0					
ANR	687651	PrimaryExpression	""""""		687475	1					
ANR	687652	ElseStatement	else		687475	0					
ANR	687653	CompoundStatement		34:2:720:720	687475	0					
ANR	687654	ExpressionStatement	"parseOption ( arg , errorInfo )"	2694:3:81070:81097	687475	0	True				
ANR	687655	CallExpression	"parseOption ( arg , errorInfo )"		687475	0					
ANR	687656	Callee	parseOption		687475	0					
ANR	687657	Identifier	parseOption		687475	0					
ANR	687658	ArgumentList	arg		687475	1					
ANR	687659	Argument	arg		687475	0					
ANR	687660	Identifier	arg		687475	0					
ANR	687661	Argument	errorInfo		687475	1					
ANR	687662	Identifier	errorInfo		687475	0					
ANR	687663	ExpressionStatement	"subArg = """""	2695:3:81102:81113	687475	1	True				
ANR	687664	AssignmentExpression	"subArg = """""		687475	0		=			
ANR	687665	Identifier	subArg		687475	0					
ANR	687666	PrimaryExpression	""""""		687475	1					
ANR	687667	IfStatement	if ( optionErrors . str ( ) . length ( ) > 0 )		687475	4					
ANR	687668	Condition	optionErrors . str ( ) . length ( ) > 0	2698:5:81127:81157	687475	0	True				
ANR	687669	RelationalExpression	optionErrors . str ( ) . length ( ) > 0		687475	0		>			
ANR	687670	CallExpression	optionErrors . str ( ) . length ( )		687475	0					
ANR	687671	Callee	optionErrors . str ( ) . length		687475	0					
ANR	687672	MemberAccess	optionErrors . str ( ) . length		687475	0					
ANR	687673	CallExpression	optionErrors . str ( )		687475	0					
ANR	687674	Callee	optionErrors . str		687475	0					
ANR	687675	MemberAccess	optionErrors . str		687475	0					
ANR	687676	Identifier	optionErrors		687475	0					
ANR	687677	Identifier	str		687475	1					
ANR	687678	ArgumentList			687475	1					
ANR	687679	Identifier	length		687475	1					
ANR	687680	ArgumentList			687475	1					
ANR	687681	PrimaryExpression	0		687475	1					
ANR	687682	ReturnStatement	return false ;	2699:2:81162:81174	687475	1	True				
ANR	687683	Identifier	false		687475	0					
ANR	687684	ReturnStatement	return true ;	2700:1:81177:81188	687475	5	True				
ANR	687685	Identifier	true		687475	0					
ANR	687686	ReturnType	bool		687475	1					
ANR	687687	Identifier	ASOptions :: parseOptions		687475	2					
ANR	687688	ParameterList	"vector < string > & optionsVector , const string & errorInfo"		687475	3					
ANR	687689	Parameter	vector < string > & optionsVector	2659:29:80288:80316	687475	0	True				
ANR	687690	ParameterType	vector < string > &		687475	0					
ANR	687691	Identifier	optionsVector		687475	1					
ANR	687692	Parameter	const string & errorInfo	2659:60:80319:80341	687475	1	True				
ANR	687693	ParameterType	const string &		687475	0					
ANR	687694	Identifier	errorInfo		687475	1					
ANR	687695	CFGEntryNode	ENTRY		687475		True				
ANR	687696	CFGExitNode	EXIT		687475		True				
ANR	687697	Symbol	optionsVector		687475						
ANR	687698	Symbol	isalpha		687475						
ANR	687699	Symbol	arg . compare		687475						
ANR	687700	Symbol	optionsVector . begin		687475						
ANR	687701	Symbol	* option		687475						
ANR	687702	Symbol	false		687475						
ANR	687703	Symbol	errorInfo		687475						
ANR	687704	Symbol	i		687475						
ANR	687705	Symbol	subArg		687475						
ANR	687706	Symbol	arg . length		687475						
ANR	687707	Symbol	optionsVector . end		687475						
ANR	687708	Symbol	* i		687475						
ANR	687709	Symbol	arg . substr		687475						
ANR	687710	Symbol	arg		687475						
ANR	687711	Symbol	optionErrors		687475						
ANR	687712	Symbol	true		687475						
ANR	687713	Symbol	optionErrors . str ( ) . length		687475						
ANR	687714	Symbol	option		687475						
ANR	687715	Symbol	* arg		687475						
ANR	687716	Symbol	optionErrors . str		687475						
ANR	687717	Function	ASOptions :: parseOption	2703:0:81193:100015							
ANR	687718	FunctionDef	"ASOptions :: parseOption (const string & arg , const string & errorInfo)"		687717	0					
ANR	687719	CompoundStatement		2704:0:81265:100015	687717	0					
ANR	687720	IfStatement	"if ( isOption ( arg , ""style=allman"" ) || isOption ( arg , ""style=bsd"" ) || isOption ( arg , ""style=break"" ) )"		687717	0					
ANR	687721	Condition	"isOption ( arg , ""style=allman"" ) || isOption ( arg , ""style=bsd"" ) || isOption ( arg , ""style=break"" )"	2705:6:81273:81363	687717	0	True				
ANR	687722	OrExpression	"isOption ( arg , ""style=allman"" ) || isOption ( arg , ""style=bsd"" ) || isOption ( arg , ""style=break"" )"		687717	0		||			
ANR	687723	CallExpression	"isOption ( arg , ""style=allman"" )"		687717	0					
ANR	687724	Callee	isOption		687717	0					
ANR	687725	Identifier	isOption		687717	0					
ANR	687726	ArgumentList	arg		687717	1					
ANR	687727	Argument	arg		687717	0					
ANR	687728	Identifier	arg		687717	0					
ANR	687729	Argument	"""style=allman"""		687717	1					
ANR	687730	PrimaryExpression	"""style=allman"""		687717	0					
ANR	687731	OrExpression	"isOption ( arg , ""style=bsd"" ) || isOption ( arg , ""style=break"" )"		687717	1		||			
ANR	687732	CallExpression	"isOption ( arg , ""style=bsd"" )"		687717	0					
ANR	687733	Callee	isOption		687717	0					
ANR	687734	Identifier	isOption		687717	0					
ANR	687735	ArgumentList	arg		687717	1					
ANR	687736	Argument	arg		687717	0					
ANR	687737	Identifier	arg		687717	0					
ANR	687738	Argument	"""style=bsd"""		687717	1					
ANR	687739	PrimaryExpression	"""style=bsd"""		687717	0					
ANR	687740	CallExpression	"isOption ( arg , ""style=break"" )"		687717	1					
ANR	687741	Callee	isOption		687717	0					
ANR	687742	Identifier	isOption		687717	0					
ANR	687743	ArgumentList	arg		687717	1					
ANR	687744	Argument	arg		687717	0					
ANR	687745	Identifier	arg		687717	0					
ANR	687746	Argument	"""style=break"""		687717	1					
ANR	687747	PrimaryExpression	"""style=break"""		687717	0					
ANR	687748	CompoundStatement		3:1:102:102	687717	1					
ANR	687749	ExpressionStatement	formatter . setFormattingStyle ( STYLE_ALLMAN )	2707:2:81372:81414	687717	0	True				
ANR	687750	CallExpression	formatter . setFormattingStyle ( STYLE_ALLMAN )		687717	0					
ANR	687751	Callee	formatter . setFormattingStyle		687717	0					
ANR	687752	MemberAccess	formatter . setFormattingStyle		687717	0					
ANR	687753	Identifier	formatter		687717	0					
ANR	687754	Identifier	setFormattingStyle		687717	1					
ANR	687755	ArgumentList	STYLE_ALLMAN		687717	1					
ANR	687756	Argument	STYLE_ALLMAN		687717	0					
ANR	687757	Identifier	STYLE_ALLMAN		687717	0					
ANR	687758	ElseStatement	else		687717	0					
ANR	687759	IfStatement	"if ( isOption ( arg , ""style=java"" ) || isOption ( arg , ""style=attach"" ) )"		687717	0					
ANR	687760	Condition	"isOption ( arg , ""style=java"" ) || isOption ( arg , ""style=attach"" )"	2709:11:81430:81489	687717	0	True				
ANR	687761	OrExpression	"isOption ( arg , ""style=java"" ) || isOption ( arg , ""style=attach"" )"		687717	0		||			
ANR	687762	CallExpression	"isOption ( arg , ""style=java"" )"		687717	0					
ANR	687763	Callee	isOption		687717	0					
ANR	687764	Identifier	isOption		687717	0					
ANR	687765	ArgumentList	arg		687717	1					
ANR	687766	Argument	arg		687717	0					
ANR	687767	Identifier	arg		687717	0					
ANR	687768	Argument	"""style=java"""		687717	1					
ANR	687769	PrimaryExpression	"""style=java"""		687717	0					
ANR	687770	CallExpression	"isOption ( arg , ""style=attach"" )"		687717	1					
ANR	687771	Callee	isOption		687717	0					
ANR	687772	Identifier	isOption		687717	0					
ANR	687773	ArgumentList	arg		687717	1					
ANR	687774	Argument	arg		687717	0					
ANR	687775	Identifier	arg		687717	0					
ANR	687776	Argument	"""style=attach"""		687717	1					
ANR	687777	PrimaryExpression	"""style=attach"""		687717	0					
ANR	687778	CompoundStatement		7:1:228:228	687717	1					
ANR	687779	ExpressionStatement	formatter . setFormattingStyle ( STYLE_JAVA )	2711:2:81498:81538	687717	0	True				
ANR	687780	CallExpression	formatter . setFormattingStyle ( STYLE_JAVA )		687717	0					
ANR	687781	Callee	formatter . setFormattingStyle		687717	0					
ANR	687782	MemberAccess	formatter . setFormattingStyle		687717	0					
ANR	687783	Identifier	formatter		687717	0					
ANR	687784	Identifier	setFormattingStyle		687717	1					
ANR	687785	ArgumentList	STYLE_JAVA		687717	1					
ANR	687786	Argument	STYLE_JAVA		687717	0					
ANR	687787	Identifier	STYLE_JAVA		687717	0					
ANR	687788	ElseStatement	else		687717	0					
ANR	687789	IfStatement	"if ( isOption ( arg , ""style=k&r"" ) || isOption ( arg , ""style=kr"" ) || isOption ( arg , ""style=k/r"" ) )"		687717	0					
ANR	687790	Condition	"isOption ( arg , ""style=k&r"" ) || isOption ( arg , ""style=kr"" ) || isOption ( arg , ""style=k/r"" )"	2713:11:81554:81638	687717	0	True				
ANR	687791	OrExpression	"isOption ( arg , ""style=k&r"" ) || isOption ( arg , ""style=kr"" ) || isOption ( arg , ""style=k/r"" )"		687717	0		||			
ANR	687792	CallExpression	"isOption ( arg , ""style=k&r"" )"		687717	0					
ANR	687793	Callee	isOption		687717	0					
ANR	687794	Identifier	isOption		687717	0					
ANR	687795	ArgumentList	arg		687717	1					
ANR	687796	Argument	arg		687717	0					
ANR	687797	Identifier	arg		687717	0					
ANR	687798	Argument	"""style=k&r"""		687717	1					
ANR	687799	PrimaryExpression	"""style=k&r"""		687717	0					
ANR	687800	OrExpression	"isOption ( arg , ""style=kr"" ) || isOption ( arg , ""style=k/r"" )"		687717	1		||			
ANR	687801	CallExpression	"isOption ( arg , ""style=kr"" )"		687717	0					
ANR	687802	Callee	isOption		687717	0					
ANR	687803	Identifier	isOption		687717	0					
ANR	687804	ArgumentList	arg		687717	1					
ANR	687805	Argument	arg		687717	0					
ANR	687806	Identifier	arg		687717	0					
ANR	687807	Argument	"""style=kr"""		687717	1					
ANR	687808	PrimaryExpression	"""style=kr"""		687717	0					
ANR	687809	CallExpression	"isOption ( arg , ""style=k/r"" )"		687717	1					
ANR	687810	Callee	isOption		687717	0					
ANR	687811	Identifier	isOption		687717	0					
ANR	687812	ArgumentList	arg		687717	1					
ANR	687813	Argument	arg		687717	0					
ANR	687814	Identifier	arg		687717	0					
ANR	687815	Argument	"""style=k/r"""		687717	1					
ANR	687816	PrimaryExpression	"""style=k/r"""		687717	0					
ANR	687817	CompoundStatement		11:1:377:377	687717	1					
ANR	687818	ExpressionStatement	formatter . setFormattingStyle ( STYLE_KR )	2715:2:81647:81685	687717	0	True				
ANR	687819	CallExpression	formatter . setFormattingStyle ( STYLE_KR )		687717	0					
ANR	687820	Callee	formatter . setFormattingStyle		687717	0					
ANR	687821	MemberAccess	formatter . setFormattingStyle		687717	0					
ANR	687822	Identifier	formatter		687717	0					
ANR	687823	Identifier	setFormattingStyle		687717	1					
ANR	687824	ArgumentList	STYLE_KR		687717	1					
ANR	687825	Argument	STYLE_KR		687717	0					
ANR	687826	Identifier	STYLE_KR		687717	0					
ANR	687827	ElseStatement	else		687717	0					
ANR	687828	IfStatement	"if ( isOption ( arg , ""style=stroustrup"" ) )"		687717	0					
ANR	687829	Condition	"isOption ( arg , ""style=stroustrup"" )"	2717:11:81701:81733	687717	0	True				
ANR	687830	CallExpression	"isOption ( arg , ""style=stroustrup"" )"		687717	0					
ANR	687831	Callee	isOption		687717	0					
ANR	687832	Identifier	isOption		687717	0					
ANR	687833	ArgumentList	arg		687717	1					
ANR	687834	Argument	arg		687717	0					
ANR	687835	Identifier	arg		687717	0					
ANR	687836	Argument	"""style=stroustrup"""		687717	1					
ANR	687837	PrimaryExpression	"""style=stroustrup"""		687717	0					
ANR	687838	CompoundStatement		15:1:472:472	687717	1					
ANR	687839	ExpressionStatement	formatter . setFormattingStyle ( STYLE_STROUSTRUP )	2719:2:81742:81788	687717	0	True				
ANR	687840	CallExpression	formatter . setFormattingStyle ( STYLE_STROUSTRUP )		687717	0					
ANR	687841	Callee	formatter . setFormattingStyle		687717	0					
ANR	687842	MemberAccess	formatter . setFormattingStyle		687717	0					
ANR	687843	Identifier	formatter		687717	0					
ANR	687844	Identifier	setFormattingStyle		687717	1					
ANR	687845	ArgumentList	STYLE_STROUSTRUP		687717	1					
ANR	687846	Argument	STYLE_STROUSTRUP		687717	0					
ANR	687847	Identifier	STYLE_STROUSTRUP		687717	0					
ANR	687848	ElseStatement	else		687717	0					
ANR	687849	IfStatement	"if ( isOption ( arg , ""style=whitesmith"" ) )"		687717	0					
ANR	687850	Condition	"isOption ( arg , ""style=whitesmith"" )"	2721:11:81804:81836	687717	0	True				
ANR	687851	CallExpression	"isOption ( arg , ""style=whitesmith"" )"		687717	0					
ANR	687852	Callee	isOption		687717	0					
ANR	687853	Identifier	isOption		687717	0					
ANR	687854	ArgumentList	arg		687717	1					
ANR	687855	Argument	arg		687717	0					
ANR	687856	Identifier	arg		687717	0					
ANR	687857	Argument	"""style=whitesmith"""		687717	1					
ANR	687858	PrimaryExpression	"""style=whitesmith"""		687717	0					
ANR	687859	CompoundStatement		19:1:575:575	687717	1					
ANR	687860	ExpressionStatement	formatter . setFormattingStyle ( STYLE_WHITESMITH )	2723:2:81845:81891	687717	0	True				
ANR	687861	CallExpression	formatter . setFormattingStyle ( STYLE_WHITESMITH )		687717	0					
ANR	687862	Callee	formatter . setFormattingStyle		687717	0					
ANR	687863	MemberAccess	formatter . setFormattingStyle		687717	0					
ANR	687864	Identifier	formatter		687717	0					
ANR	687865	Identifier	setFormattingStyle		687717	1					
ANR	687866	ArgumentList	STYLE_WHITESMITH		687717	1					
ANR	687867	Argument	STYLE_WHITESMITH		687717	0					
ANR	687868	Identifier	STYLE_WHITESMITH		687717	0					
ANR	687869	ElseStatement	else		687717	0					
ANR	687870	IfStatement	"if ( isOption ( arg , ""style=vtk"" ) )"		687717	0					
ANR	687871	Condition	"isOption ( arg , ""style=vtk"" )"	2725:11:81907:81932	687717	0	True				
ANR	687872	CallExpression	"isOption ( arg , ""style=vtk"" )"		687717	0					
ANR	687873	Callee	isOption		687717	0					
ANR	687874	Identifier	isOption		687717	0					
ANR	687875	ArgumentList	arg		687717	1					
ANR	687876	Argument	arg		687717	0					
ANR	687877	Identifier	arg		687717	0					
ANR	687878	Argument	"""style=vtk"""		687717	1					
ANR	687879	PrimaryExpression	"""style=vtk"""		687717	0					
ANR	687880	CompoundStatement		23:1:671:671	687717	1					
ANR	687881	ExpressionStatement	formatter . setFormattingStyle ( STYLE_VTK )	2727:2:81941:81980	687717	0	True				
ANR	687882	CallExpression	formatter . setFormattingStyle ( STYLE_VTK )		687717	0					
ANR	687883	Callee	formatter . setFormattingStyle		687717	0					
ANR	687884	MemberAccess	formatter . setFormattingStyle		687717	0					
ANR	687885	Identifier	formatter		687717	0					
ANR	687886	Identifier	setFormattingStyle		687717	1					
ANR	687887	ArgumentList	STYLE_VTK		687717	1					
ANR	687888	Argument	STYLE_VTK		687717	0					
ANR	687889	Identifier	STYLE_VTK		687717	0					
ANR	687890	ElseStatement	else		687717	0					
ANR	687891	IfStatement	"if ( isOption ( arg , ""style=banner"" ) )"		687717	0					
ANR	687892	Condition	"isOption ( arg , ""style=banner"" )"	2729:11:81996:82024	687717	0	True				
ANR	687893	CallExpression	"isOption ( arg , ""style=banner"" )"		687717	0					
ANR	687894	Callee	isOption		687717	0					
ANR	687895	Identifier	isOption		687717	0					
ANR	687896	ArgumentList	arg		687717	1					
ANR	687897	Argument	arg		687717	0					
ANR	687898	Identifier	arg		687717	0					
ANR	687899	Argument	"""style=banner"""		687717	1					
ANR	687900	PrimaryExpression	"""style=banner"""		687717	0					
ANR	687901	CompoundStatement		27:1:763:763	687717	1					
ANR	687902	ExpressionStatement	formatter . setFormattingStyle ( STYLE_BANNER )	2731:2:82033:82075	687717	0	True				
ANR	687903	CallExpression	formatter . setFormattingStyle ( STYLE_BANNER )		687717	0					
ANR	687904	Callee	formatter . setFormattingStyle		687717	0					
ANR	687905	MemberAccess	formatter . setFormattingStyle		687717	0					
ANR	687906	Identifier	formatter		687717	0					
ANR	687907	Identifier	setFormattingStyle		687717	1					
ANR	687908	ArgumentList	STYLE_BANNER		687717	1					
ANR	687909	Argument	STYLE_BANNER		687717	0					
ANR	687910	Identifier	STYLE_BANNER		687717	0					
ANR	687911	ElseStatement	else		687717	0					
ANR	687912	IfStatement	"if ( isOption ( arg , ""style=gnu"" ) )"		687717	0					
ANR	687913	Condition	"isOption ( arg , ""style=gnu"" )"	2733:11:82091:82116	687717	0	True				
ANR	687914	CallExpression	"isOption ( arg , ""style=gnu"" )"		687717	0					
ANR	687915	Callee	isOption		687717	0					
ANR	687916	Identifier	isOption		687717	0					
ANR	687917	ArgumentList	arg		687717	1					
ANR	687918	Argument	arg		687717	0					
ANR	687919	Identifier	arg		687717	0					
ANR	687920	Argument	"""style=gnu"""		687717	1					
ANR	687921	PrimaryExpression	"""style=gnu"""		687717	0					
ANR	687922	CompoundStatement		31:1:855:855	687717	1					
ANR	687923	ExpressionStatement	formatter . setFormattingStyle ( STYLE_GNU )	2735:2:82125:82164	687717	0	True				
ANR	687924	CallExpression	formatter . setFormattingStyle ( STYLE_GNU )		687717	0					
ANR	687925	Callee	formatter . setFormattingStyle		687717	0					
ANR	687926	MemberAccess	formatter . setFormattingStyle		687717	0					
ANR	687927	Identifier	formatter		687717	0					
ANR	687928	Identifier	setFormattingStyle		687717	1					
ANR	687929	ArgumentList	STYLE_GNU		687717	1					
ANR	687930	Argument	STYLE_GNU		687717	0					
ANR	687931	Identifier	STYLE_GNU		687717	0					
ANR	687932	ElseStatement	else		687717	0					
ANR	687933	IfStatement	"if ( isOption ( arg , ""style=linux"" ) || isOption ( arg , ""style=knf"" ) )"		687717	0					
ANR	687934	Condition	"isOption ( arg , ""style=linux"" ) || isOption ( arg , ""style=knf"" )"	2737:11:82180:82237	687717	0	True				
ANR	687935	OrExpression	"isOption ( arg , ""style=linux"" ) || isOption ( arg , ""style=knf"" )"		687717	0		||			
ANR	687936	CallExpression	"isOption ( arg , ""style=linux"" )"		687717	0					
ANR	687937	Callee	isOption		687717	0					
ANR	687938	Identifier	isOption		687717	0					
ANR	687939	ArgumentList	arg		687717	1					
ANR	687940	Argument	arg		687717	0					
ANR	687941	Identifier	arg		687717	0					
ANR	687942	Argument	"""style=linux"""		687717	1					
ANR	687943	PrimaryExpression	"""style=linux"""		687717	0					
ANR	687944	CallExpression	"isOption ( arg , ""style=knf"" )"		687717	1					
ANR	687945	Callee	isOption		687717	0					
ANR	687946	Identifier	isOption		687717	0					
ANR	687947	ArgumentList	arg		687717	1					
ANR	687948	Argument	arg		687717	0					
ANR	687949	Identifier	arg		687717	0					
ANR	687950	Argument	"""style=knf"""		687717	1					
ANR	687951	PrimaryExpression	"""style=knf"""		687717	0					
ANR	687952	CompoundStatement		35:1:976:976	687717	1					
ANR	687953	ExpressionStatement	formatter . setFormattingStyle ( STYLE_LINUX )	2739:2:82246:82287	687717	0	True				
ANR	687954	CallExpression	formatter . setFormattingStyle ( STYLE_LINUX )		687717	0					
ANR	687955	Callee	formatter . setFormattingStyle		687717	0					
ANR	687956	MemberAccess	formatter . setFormattingStyle		687717	0					
ANR	687957	Identifier	formatter		687717	0					
ANR	687958	Identifier	setFormattingStyle		687717	1					
ANR	687959	ArgumentList	STYLE_LINUX		687717	1					
ANR	687960	Argument	STYLE_LINUX		687717	0					
ANR	687961	Identifier	STYLE_LINUX		687717	0					
ANR	687962	ElseStatement	else		687717	0					
ANR	687963	IfStatement	"if ( isOption ( arg , ""style=horstmann"" ) || isOption ( arg , ""style=run-in"" ) )"		687717	0					
ANR	687964	Condition	"isOption ( arg , ""style=horstmann"" ) || isOption ( arg , ""style=run-in"" )"	2741:11:82303:82367	687717	0	True				
ANR	687965	OrExpression	"isOption ( arg , ""style=horstmann"" ) || isOption ( arg , ""style=run-in"" )"		687717	0		||			
ANR	687966	CallExpression	"isOption ( arg , ""style=horstmann"" )"		687717	0					
ANR	687967	Callee	isOption		687717	0					
ANR	687968	Identifier	isOption		687717	0					
ANR	687969	ArgumentList	arg		687717	1					
ANR	687970	Argument	arg		687717	0					
ANR	687971	Identifier	arg		687717	0					
ANR	687972	Argument	"""style=horstmann"""		687717	1					
ANR	687973	PrimaryExpression	"""style=horstmann"""		687717	0					
ANR	687974	CallExpression	"isOption ( arg , ""style=run-in"" )"		687717	1					
ANR	687975	Callee	isOption		687717	0					
ANR	687976	Identifier	isOption		687717	0					
ANR	687977	ArgumentList	arg		687717	1					
ANR	687978	Argument	arg		687717	0					
ANR	687979	Identifier	arg		687717	0					
ANR	687980	Argument	"""style=run-in"""		687717	1					
ANR	687981	PrimaryExpression	"""style=run-in"""		687717	0					
ANR	687982	CompoundStatement		39:1:1106:1106	687717	1					
ANR	687983	ExpressionStatement	formatter . setFormattingStyle ( STYLE_HORSTMANN )	2743:2:82376:82421	687717	0	True				
ANR	687984	CallExpression	formatter . setFormattingStyle ( STYLE_HORSTMANN )		687717	0					
ANR	687985	Callee	formatter . setFormattingStyle		687717	0					
ANR	687986	MemberAccess	formatter . setFormattingStyle		687717	0					
ANR	687987	Identifier	formatter		687717	0					
ANR	687988	Identifier	setFormattingStyle		687717	1					
ANR	687989	ArgumentList	STYLE_HORSTMANN		687717	1					
ANR	687990	Argument	STYLE_HORSTMANN		687717	0					
ANR	687991	Identifier	STYLE_HORSTMANN		687717	0					
ANR	687992	ElseStatement	else		687717	0					
ANR	687993	IfStatement	"if ( isOption ( arg , ""style=1tbs"" ) || isOption ( arg , ""style=otbs"" ) )"		687717	0					
ANR	687994	Condition	"isOption ( arg , ""style=1tbs"" ) || isOption ( arg , ""style=otbs"" )"	2745:11:82437:82494	687717	0	True				
ANR	687995	OrExpression	"isOption ( arg , ""style=1tbs"" ) || isOption ( arg , ""style=otbs"" )"		687717	0		||			
ANR	687996	CallExpression	"isOption ( arg , ""style=1tbs"" )"		687717	0					
ANR	687997	Callee	isOption		687717	0					
ANR	687998	Identifier	isOption		687717	0					
ANR	687999	ArgumentList	arg		687717	1					
ANR	688000	Argument	arg		687717	0					
ANR	688001	Identifier	arg		687717	0					
ANR	688002	Argument	"""style=1tbs"""		687717	1					
ANR	688003	PrimaryExpression	"""style=1tbs"""		687717	0					
ANR	688004	CallExpression	"isOption ( arg , ""style=otbs"" )"		687717	1					
ANR	688005	Callee	isOption		687717	0					
ANR	688006	Identifier	isOption		687717	0					
ANR	688007	ArgumentList	arg		687717	1					
ANR	688008	Argument	arg		687717	0					
ANR	688009	Identifier	arg		687717	0					
ANR	688010	Argument	"""style=otbs"""		687717	1					
ANR	688011	PrimaryExpression	"""style=otbs"""		687717	0					
ANR	688012	CompoundStatement		43:1:1233:1233	687717	1					
ANR	688013	ExpressionStatement	formatter . setFormattingStyle ( STYLE_1TBS )	2747:2:82503:82543	687717	0	True				
ANR	688014	CallExpression	formatter . setFormattingStyle ( STYLE_1TBS )		687717	0					
ANR	688015	Callee	formatter . setFormattingStyle		687717	0					
ANR	688016	MemberAccess	formatter . setFormattingStyle		687717	0					
ANR	688017	Identifier	formatter		687717	0					
ANR	688018	Identifier	setFormattingStyle		687717	1					
ANR	688019	ArgumentList	STYLE_1TBS		687717	1					
ANR	688020	Argument	STYLE_1TBS		687717	0					
ANR	688021	Identifier	STYLE_1TBS		687717	0					
ANR	688022	ElseStatement	else		687717	0					
ANR	688023	IfStatement	"if ( isOption ( arg , ""style=google"" ) )"		687717	0					
ANR	688024	Condition	"isOption ( arg , ""style=google"" )"	2749:11:82559:82587	687717	0	True				
ANR	688025	CallExpression	"isOption ( arg , ""style=google"" )"		687717	0					
ANR	688026	Callee	isOption		687717	0					
ANR	688027	Identifier	isOption		687717	0					
ANR	688028	ArgumentList	arg		687717	1					
ANR	688029	Argument	arg		687717	0					
ANR	688030	Identifier	arg		687717	0					
ANR	688031	Argument	"""style=google"""		687717	1					
ANR	688032	PrimaryExpression	"""style=google"""		687717	0					
ANR	688033	CompoundStatement		47:1:1326:1326	687717	1					
ANR	688034	ExpressionStatement	formatter . setFormattingStyle ( STYLE_GOOGLE )	2751:2:82596:82638	687717	0	True				
ANR	688035	CallExpression	formatter . setFormattingStyle ( STYLE_GOOGLE )		687717	0					
ANR	688036	Callee	formatter . setFormattingStyle		687717	0					
ANR	688037	MemberAccess	formatter . setFormattingStyle		687717	0					
ANR	688038	Identifier	formatter		687717	0					
ANR	688039	Identifier	setFormattingStyle		687717	1					
ANR	688040	ArgumentList	STYLE_GOOGLE		687717	1					
ANR	688041	Argument	STYLE_GOOGLE		687717	0					
ANR	688042	Identifier	STYLE_GOOGLE		687717	0					
ANR	688043	ElseStatement	else		687717	0					
ANR	688044	IfStatement	"if ( isOption ( arg , ""style=mozilla"" ) )"		687717	0					
ANR	688045	Condition	"isOption ( arg , ""style=mozilla"" )"	2753:10:82653:82682	687717	0	True				
ANR	688046	CallExpression	"isOption ( arg , ""style=mozilla"" )"		687717	0					
ANR	688047	Callee	isOption		687717	0					
ANR	688048	Identifier	isOption		687717	0					
ANR	688049	ArgumentList	arg		687717	1					
ANR	688050	Argument	arg		687717	0					
ANR	688051	Identifier	arg		687717	0					
ANR	688052	Argument	"""style=mozilla"""		687717	1					
ANR	688053	PrimaryExpression	"""style=mozilla"""		687717	0					
ANR	688054	CompoundStatement		51:1:1420:1420	687717	1					
ANR	688055	ExpressionStatement	formatter . setFormattingStyle ( STYLE_MOZILLA )	2755:2:82690:82733	687717	0	True				
ANR	688056	CallExpression	formatter . setFormattingStyle ( STYLE_MOZILLA )		687717	0					
ANR	688057	Callee	formatter . setFormattingStyle		687717	0					
ANR	688058	MemberAccess	formatter . setFormattingStyle		687717	0					
ANR	688059	Identifier	formatter		687717	0					
ANR	688060	Identifier	setFormattingStyle		687717	1					
ANR	688061	ArgumentList	STYLE_MOZILLA		687717	1					
ANR	688062	Argument	STYLE_MOZILLA		687717	0					
ANR	688063	Identifier	STYLE_MOZILLA		687717	0					
ANR	688064	ElseStatement	else		687717	0					
ANR	688065	IfStatement	"if ( isOption ( arg , ""style=pico"" ) )"		687717	0					
ANR	688066	Condition	"isOption ( arg , ""style=pico"" )"	2757:11:82749:82775	687717	0	True				
ANR	688067	CallExpression	"isOption ( arg , ""style=pico"" )"		687717	0					
ANR	688068	Callee	isOption		687717	0					
ANR	688069	Identifier	isOption		687717	0					
ANR	688070	ArgumentList	arg		687717	1					
ANR	688071	Argument	arg		687717	0					
ANR	688072	Identifier	arg		687717	0					
ANR	688073	Argument	"""style=pico"""		687717	1					
ANR	688074	PrimaryExpression	"""style=pico"""		687717	0					
ANR	688075	CompoundStatement		55:1:1514:1514	687717	1					
ANR	688076	ExpressionStatement	formatter . setFormattingStyle ( STYLE_PICO )	2759:2:82784:82824	687717	0	True				
ANR	688077	CallExpression	formatter . setFormattingStyle ( STYLE_PICO )		687717	0					
ANR	688078	Callee	formatter . setFormattingStyle		687717	0					
ANR	688079	MemberAccess	formatter . setFormattingStyle		687717	0					
ANR	688080	Identifier	formatter		687717	0					
ANR	688081	Identifier	setFormattingStyle		687717	1					
ANR	688082	ArgumentList	STYLE_PICO		687717	1					
ANR	688083	Argument	STYLE_PICO		687717	0					
ANR	688084	Identifier	STYLE_PICO		687717	0					
ANR	688085	ElseStatement	else		687717	0					
ANR	688086	IfStatement	"if ( isOption ( arg , ""style=lisp"" ) || isOption ( arg , ""style=python"" ) )"		687717	0					
ANR	688087	Condition	"isOption ( arg , ""style=lisp"" ) || isOption ( arg , ""style=python"" )"	2761:11:82840:82899	687717	0	True				
ANR	688088	OrExpression	"isOption ( arg , ""style=lisp"" ) || isOption ( arg , ""style=python"" )"		687717	0		||			
ANR	688089	CallExpression	"isOption ( arg , ""style=lisp"" )"		687717	0					
ANR	688090	Callee	isOption		687717	0					
ANR	688091	Identifier	isOption		687717	0					
ANR	688092	ArgumentList	arg		687717	1					
ANR	688093	Argument	arg		687717	0					
ANR	688094	Identifier	arg		687717	0					
ANR	688095	Argument	"""style=lisp"""		687717	1					
ANR	688096	PrimaryExpression	"""style=lisp"""		687717	0					
ANR	688097	CallExpression	"isOption ( arg , ""style=python"" )"		687717	1					
ANR	688098	Callee	isOption		687717	0					
ANR	688099	Identifier	isOption		687717	0					
ANR	688100	ArgumentList	arg		687717	1					
ANR	688101	Argument	arg		687717	0					
ANR	688102	Identifier	arg		687717	0					
ANR	688103	Argument	"""style=python"""		687717	1					
ANR	688104	PrimaryExpression	"""style=python"""		687717	0					
ANR	688105	CompoundStatement		59:1:1638:1638	687717	1					
ANR	688106	ExpressionStatement	formatter . setFormattingStyle ( STYLE_LISP )	2763:2:82908:82948	687717	0	True				
ANR	688107	CallExpression	formatter . setFormattingStyle ( STYLE_LISP )		687717	0					
ANR	688108	Callee	formatter . setFormattingStyle		687717	0					
ANR	688109	MemberAccess	formatter . setFormattingStyle		687717	0					
ANR	688110	Identifier	formatter		687717	0					
ANR	688111	Identifier	setFormattingStyle		687717	1					
ANR	688112	ArgumentList	STYLE_LISP		687717	1					
ANR	688113	Argument	STYLE_LISP		687717	0					
ANR	688114	Identifier	STYLE_LISP		687717	0					
ANR	688115	ElseStatement	else		687717	0					
ANR	688116	IfStatement	"if ( isParamOption ( arg , ""A"" ) )"		687717	0					
ANR	688117	Condition	"isParamOption ( arg , ""A"" )"	2765:11:82964:82986	687717	0	True				
ANR	688118	CallExpression	"isParamOption ( arg , ""A"" )"		687717	0					
ANR	688119	Callee	isParamOption		687717	0					
ANR	688120	Identifier	isParamOption		687717	0					
ANR	688121	ArgumentList	arg		687717	1					
ANR	688122	Argument	arg		687717	0					
ANR	688123	Identifier	arg		687717	0					
ANR	688124	Argument	"""A"""		687717	1					
ANR	688125	PrimaryExpression	"""A"""		687717	0					
ANR	688126	CompoundStatement		65:2:1746:1784	687717	1					
ANR	688127	IdentifierDeclStatement	int style = 0 ;	2767:2:82995:83008	687717	0	True				
ANR	688128	IdentifierDecl	style = 0		687717	0					
ANR	688129	IdentifierDeclType	int		687717	0					
ANR	688130	Identifier	style		687717	1					
ANR	688131	AssignmentExpression	style = 0		687717	2		=			
ANR	688132	Identifier	style		687717	0					
ANR	688133	PrimaryExpression	0		687717	1					
ANR	688134	IdentifierDeclStatement	"string styleParam = getParam ( arg , ""A"" ) ;"	2768:2:83012:83050	687717	1	True				
ANR	688135	IdentifierDecl	"styleParam = getParam ( arg , ""A"" )"		687717	0					
ANR	688136	IdentifierDeclType	string		687717	0					
ANR	688137	Identifier	styleParam		687717	1					
ANR	688138	AssignmentExpression	"styleParam = getParam ( arg , ""A"" )"		687717	2		=			
ANR	688139	Identifier	styleParam		687717	0					
ANR	688140	CallExpression	"getParam ( arg , ""A"" )"		687717	1					
ANR	688141	Callee	getParam		687717	0					
ANR	688142	Identifier	getParam		687717	0					
ANR	688143	ArgumentList	arg		687717	1					
ANR	688144	Argument	arg		687717	0					
ANR	688145	Identifier	arg		687717	0					
ANR	688146	Argument	"""A"""		687717	1					
ANR	688147	PrimaryExpression	"""A"""		687717	0					
ANR	688148	IfStatement	if ( styleParam . length ( ) > 0 )		687717	2					
ANR	688149	Condition	styleParam . length ( ) > 0	2769:6:83058:83080	687717	0	True				
ANR	688150	RelationalExpression	styleParam . length ( ) > 0		687717	0		>			
ANR	688151	CallExpression	styleParam . length ( )		687717	0					
ANR	688152	Callee	styleParam . length		687717	0					
ANR	688153	MemberAccess	styleParam . length		687717	0					
ANR	688154	Identifier	styleParam		687717	0					
ANR	688155	Identifier	length		687717	1					
ANR	688156	ArgumentList			687717	1					
ANR	688157	PrimaryExpression	0		687717	1					
ANR	688158	ExpressionStatement	style = atoi ( styleParam . c_str ( ) )	2770:3:83086:83118	687717	1	True				
ANR	688159	AssignmentExpression	style = atoi ( styleParam . c_str ( ) )		687717	0		=			
ANR	688160	Identifier	style		687717	0					
ANR	688161	CallExpression	atoi ( styleParam . c_str ( ) )		687717	1					
ANR	688162	Callee	atoi		687717	0					
ANR	688163	Identifier	atoi		687717	0					
ANR	688164	ArgumentList	styleParam . c_str ( )		687717	1					
ANR	688165	Argument	styleParam . c_str ( )		687717	0					
ANR	688166	CallExpression	styleParam . c_str ( )		687717	0					
ANR	688167	Callee	styleParam . c_str		687717	0					
ANR	688168	MemberAccess	styleParam . c_str		687717	0					
ANR	688169	Identifier	styleParam		687717	0					
ANR	688170	Identifier	c_str		687717	1					
ANR	688171	ArgumentList			687717	1					
ANR	688172	IfStatement	if ( style == 1 )		687717	3					
ANR	688173	Condition	style == 1	2771:6:83126:83135	687717	0	True				
ANR	688174	EqualityExpression	style == 1		687717	0		==			
ANR	688175	Identifier	style		687717	0					
ANR	688176	PrimaryExpression	1		687717	1					
ANR	688177	ExpressionStatement	formatter . setFormattingStyle ( STYLE_ALLMAN )	2772:3:83141:83183	687717	1	True				
ANR	688178	CallExpression	formatter . setFormattingStyle ( STYLE_ALLMAN )		687717	0					
ANR	688179	Callee	formatter . setFormattingStyle		687717	0					
ANR	688180	MemberAccess	formatter . setFormattingStyle		687717	0					
ANR	688181	Identifier	formatter		687717	0					
ANR	688182	Identifier	setFormattingStyle		687717	1					
ANR	688183	ArgumentList	STYLE_ALLMAN		687717	1					
ANR	688184	Argument	STYLE_ALLMAN		687717	0					
ANR	688185	Identifier	STYLE_ALLMAN		687717	0					
ANR	688186	ElseStatement	else		687717	0					
ANR	688187	IfStatement	if ( style == 2 )		687717	0					
ANR	688188	Condition	style == 2	2773:11:83196:83205	687717	0	True				
ANR	688189	EqualityExpression	style == 2		687717	0		==			
ANR	688190	Identifier	style		687717	0					
ANR	688191	PrimaryExpression	2		687717	1					
ANR	688192	ExpressionStatement	formatter . setFormattingStyle ( STYLE_JAVA )	2774:3:83211:83251	687717	1	True				
ANR	688193	CallExpression	formatter . setFormattingStyle ( STYLE_JAVA )		687717	0					
ANR	688194	Callee	formatter . setFormattingStyle		687717	0					
ANR	688195	MemberAccess	formatter . setFormattingStyle		687717	0					
ANR	688196	Identifier	formatter		687717	0					
ANR	688197	Identifier	setFormattingStyle		687717	1					
ANR	688198	ArgumentList	STYLE_JAVA		687717	1					
ANR	688199	Argument	STYLE_JAVA		687717	0					
ANR	688200	Identifier	STYLE_JAVA		687717	0					
ANR	688201	ElseStatement	else		687717	0					
ANR	688202	IfStatement	if ( style == 3 )		687717	0					
ANR	688203	Condition	style == 3	2775:11:83264:83273	687717	0	True				
ANR	688204	EqualityExpression	style == 3		687717	0		==			
ANR	688205	Identifier	style		687717	0					
ANR	688206	PrimaryExpression	3		687717	1					
ANR	688207	ExpressionStatement	formatter . setFormattingStyle ( STYLE_KR )	2776:3:83279:83317	687717	1	True				
ANR	688208	CallExpression	formatter . setFormattingStyle ( STYLE_KR )		687717	0					
ANR	688209	Callee	formatter . setFormattingStyle		687717	0					
ANR	688210	MemberAccess	formatter . setFormattingStyle		687717	0					
ANR	688211	Identifier	formatter		687717	0					
ANR	688212	Identifier	setFormattingStyle		687717	1					
ANR	688213	ArgumentList	STYLE_KR		687717	1					
ANR	688214	Argument	STYLE_KR		687717	0					
ANR	688215	Identifier	STYLE_KR		687717	0					
ANR	688216	ElseStatement	else		687717	0					
ANR	688217	IfStatement	if ( style == 4 )		687717	0					
ANR	688218	Condition	style == 4	2777:11:83330:83339	687717	0	True				
ANR	688219	EqualityExpression	style == 4		687717	0		==			
ANR	688220	Identifier	style		687717	0					
ANR	688221	PrimaryExpression	4		687717	1					
ANR	688222	ExpressionStatement	formatter . setFormattingStyle ( STYLE_STROUSTRUP )	2778:3:83345:83391	687717	1	True				
ANR	688223	CallExpression	formatter . setFormattingStyle ( STYLE_STROUSTRUP )		687717	0					
ANR	688224	Callee	formatter . setFormattingStyle		687717	0					
ANR	688225	MemberAccess	formatter . setFormattingStyle		687717	0					
ANR	688226	Identifier	formatter		687717	0					
ANR	688227	Identifier	setFormattingStyle		687717	1					
ANR	688228	ArgumentList	STYLE_STROUSTRUP		687717	1					
ANR	688229	Argument	STYLE_STROUSTRUP		687717	0					
ANR	688230	Identifier	STYLE_STROUSTRUP		687717	0					
ANR	688231	ElseStatement	else		687717	0					
ANR	688232	IfStatement	if ( style == 5 )		687717	0					
ANR	688233	Condition	style == 5	2779:11:83404:83413	687717	0	True				
ANR	688234	EqualityExpression	style == 5		687717	0		==			
ANR	688235	Identifier	style		687717	0					
ANR	688236	PrimaryExpression	5		687717	1					
ANR	688237	ExpressionStatement	formatter . setFormattingStyle ( STYLE_WHITESMITH )	2780:3:83419:83465	687717	1	True				
ANR	688238	CallExpression	formatter . setFormattingStyle ( STYLE_WHITESMITH )		687717	0					
ANR	688239	Callee	formatter . setFormattingStyle		687717	0					
ANR	688240	MemberAccess	formatter . setFormattingStyle		687717	0					
ANR	688241	Identifier	formatter		687717	0					
ANR	688242	Identifier	setFormattingStyle		687717	1					
ANR	688243	ArgumentList	STYLE_WHITESMITH		687717	1					
ANR	688244	Argument	STYLE_WHITESMITH		687717	0					
ANR	688245	Identifier	STYLE_WHITESMITH		687717	0					
ANR	688246	ElseStatement	else		687717	0					
ANR	688247	IfStatement	if ( style == 6 )		687717	0					
ANR	688248	Condition	style == 6	2781:11:83478:83487	687717	0	True				
ANR	688249	EqualityExpression	style == 6		687717	0		==			
ANR	688250	Identifier	style		687717	0					
ANR	688251	PrimaryExpression	6		687717	1					
ANR	688252	ExpressionStatement	formatter . setFormattingStyle ( STYLE_BANNER )	2782:3:83493:83535	687717	1	True				
ANR	688253	CallExpression	formatter . setFormattingStyle ( STYLE_BANNER )		687717	0					
ANR	688254	Callee	formatter . setFormattingStyle		687717	0					
ANR	688255	MemberAccess	formatter . setFormattingStyle		687717	0					
ANR	688256	Identifier	formatter		687717	0					
ANR	688257	Identifier	setFormattingStyle		687717	1					
ANR	688258	ArgumentList	STYLE_BANNER		687717	1					
ANR	688259	Argument	STYLE_BANNER		687717	0					
ANR	688260	Identifier	STYLE_BANNER		687717	0					
ANR	688261	ElseStatement	else		687717	0					
ANR	688262	IfStatement	if ( style == 7 )		687717	0					
ANR	688263	Condition	style == 7	2783:11:83548:83557	687717	0	True				
ANR	688264	EqualityExpression	style == 7		687717	0		==			
ANR	688265	Identifier	style		687717	0					
ANR	688266	PrimaryExpression	7		687717	1					
ANR	688267	ExpressionStatement	formatter . setFormattingStyle ( STYLE_GNU )	2784:3:83563:83602	687717	1	True				
ANR	688268	CallExpression	formatter . setFormattingStyle ( STYLE_GNU )		687717	0					
ANR	688269	Callee	formatter . setFormattingStyle		687717	0					
ANR	688270	MemberAccess	formatter . setFormattingStyle		687717	0					
ANR	688271	Identifier	formatter		687717	0					
ANR	688272	Identifier	setFormattingStyle		687717	1					
ANR	688273	ArgumentList	STYLE_GNU		687717	1					
ANR	688274	Argument	STYLE_GNU		687717	0					
ANR	688275	Identifier	STYLE_GNU		687717	0					
ANR	688276	ElseStatement	else		687717	0					
ANR	688277	IfStatement	if ( style == 8 )		687717	0					
ANR	688278	Condition	style == 8	2785:11:83615:83624	687717	0	True				
ANR	688279	EqualityExpression	style == 8		687717	0		==			
ANR	688280	Identifier	style		687717	0					
ANR	688281	PrimaryExpression	8		687717	1					
ANR	688282	ExpressionStatement	formatter . setFormattingStyle ( STYLE_LINUX )	2786:3:83630:83671	687717	1	True				
ANR	688283	CallExpression	formatter . setFormattingStyle ( STYLE_LINUX )		687717	0					
ANR	688284	Callee	formatter . setFormattingStyle		687717	0					
ANR	688285	MemberAccess	formatter . setFormattingStyle		687717	0					
ANR	688286	Identifier	formatter		687717	0					
ANR	688287	Identifier	setFormattingStyle		687717	1					
ANR	688288	ArgumentList	STYLE_LINUX		687717	1					
ANR	688289	Argument	STYLE_LINUX		687717	0					
ANR	688290	Identifier	STYLE_LINUX		687717	0					
ANR	688291	ElseStatement	else		687717	0					
ANR	688292	IfStatement	if ( style == 9 )		687717	0					
ANR	688293	Condition	style == 9	2787:11:83684:83693	687717	0	True				
ANR	688294	EqualityExpression	style == 9		687717	0		==			
ANR	688295	Identifier	style		687717	0					
ANR	688296	PrimaryExpression	9		687717	1					
ANR	688297	ExpressionStatement	formatter . setFormattingStyle ( STYLE_HORSTMANN )	2788:3:83699:83744	687717	1	True				
ANR	688298	CallExpression	formatter . setFormattingStyle ( STYLE_HORSTMANN )		687717	0					
ANR	688299	Callee	formatter . setFormattingStyle		687717	0					
ANR	688300	MemberAccess	formatter . setFormattingStyle		687717	0					
ANR	688301	Identifier	formatter		687717	0					
ANR	688302	Identifier	setFormattingStyle		687717	1					
ANR	688303	ArgumentList	STYLE_HORSTMANN		687717	1					
ANR	688304	Argument	STYLE_HORSTMANN		687717	0					
ANR	688305	Identifier	STYLE_HORSTMANN		687717	0					
ANR	688306	ElseStatement	else		687717	0					
ANR	688307	IfStatement	if ( style == 10 )		687717	0					
ANR	688308	Condition	style == 10	2789:11:83757:83767	687717	0	True				
ANR	688309	EqualityExpression	style == 10		687717	0		==			
ANR	688310	Identifier	style		687717	0					
ANR	688311	PrimaryExpression	10		687717	1					
ANR	688312	ExpressionStatement	formatter . setFormattingStyle ( STYLE_1TBS )	2790:3:83773:83813	687717	1	True				
ANR	688313	CallExpression	formatter . setFormattingStyle ( STYLE_1TBS )		687717	0					
ANR	688314	Callee	formatter . setFormattingStyle		687717	0					
ANR	688315	MemberAccess	formatter . setFormattingStyle		687717	0					
ANR	688316	Identifier	formatter		687717	0					
ANR	688317	Identifier	setFormattingStyle		687717	1					
ANR	688318	ArgumentList	STYLE_1TBS		687717	1					
ANR	688319	Argument	STYLE_1TBS		687717	0					
ANR	688320	Identifier	STYLE_1TBS		687717	0					
ANR	688321	ElseStatement	else		687717	0					
ANR	688322	IfStatement	if ( style == 11 )		687717	0					
ANR	688323	Condition	style == 11	2791:11:83826:83836	687717	0	True				
ANR	688324	EqualityExpression	style == 11		687717	0		==			
ANR	688325	Identifier	style		687717	0					
ANR	688326	PrimaryExpression	11		687717	1					
ANR	688327	ExpressionStatement	formatter . setFormattingStyle ( STYLE_PICO )	2792:3:83842:83882	687717	1	True				
ANR	688328	CallExpression	formatter . setFormattingStyle ( STYLE_PICO )		687717	0					
ANR	688329	Callee	formatter . setFormattingStyle		687717	0					
ANR	688330	MemberAccess	formatter . setFormattingStyle		687717	0					
ANR	688331	Identifier	formatter		687717	0					
ANR	688332	Identifier	setFormattingStyle		687717	1					
ANR	688333	ArgumentList	STYLE_PICO		687717	1					
ANR	688334	Argument	STYLE_PICO		687717	0					
ANR	688335	Identifier	STYLE_PICO		687717	0					
ANR	688336	ElseStatement	else		687717	0					
ANR	688337	IfStatement	if ( style == 12 )		687717	0					
ANR	688338	Condition	style == 12	2793:11:83895:83905	687717	0	True				
ANR	688339	EqualityExpression	style == 12		687717	0		==			
ANR	688340	Identifier	style		687717	0					
ANR	688341	PrimaryExpression	12		687717	1					
ANR	688342	ExpressionStatement	formatter . setFormattingStyle ( STYLE_LISP )	2794:3:83911:83951	687717	1	True				
ANR	688343	CallExpression	formatter . setFormattingStyle ( STYLE_LISP )		687717	0					
ANR	688344	Callee	formatter . setFormattingStyle		687717	0					
ANR	688345	MemberAccess	formatter . setFormattingStyle		687717	0					
ANR	688346	Identifier	formatter		687717	0					
ANR	688347	Identifier	setFormattingStyle		687717	1					
ANR	688348	ArgumentList	STYLE_LISP		687717	1					
ANR	688349	Argument	STYLE_LISP		687717	0					
ANR	688350	Identifier	STYLE_LISP		687717	0					
ANR	688351	ElseStatement	else		687717	0					
ANR	688352	IfStatement	if ( style == 14 )		687717	0					
ANR	688353	Condition	style == 14	2795:11:83964:83974	687717	0	True				
ANR	688354	EqualityExpression	style == 14		687717	0		==			
ANR	688355	Identifier	style		687717	0					
ANR	688356	PrimaryExpression	14		687717	1					
ANR	688357	ExpressionStatement	formatter . setFormattingStyle ( STYLE_GOOGLE )	2796:3:83980:84022	687717	1	True				
ANR	688358	CallExpression	formatter . setFormattingStyle ( STYLE_GOOGLE )		687717	0					
ANR	688359	Callee	formatter . setFormattingStyle		687717	0					
ANR	688360	MemberAccess	formatter . setFormattingStyle		687717	0					
ANR	688361	Identifier	formatter		687717	0					
ANR	688362	Identifier	setFormattingStyle		687717	1					
ANR	688363	ArgumentList	STYLE_GOOGLE		687717	1					
ANR	688364	Argument	STYLE_GOOGLE		687717	0					
ANR	688365	Identifier	STYLE_GOOGLE		687717	0					
ANR	688366	ElseStatement	else		687717	0					
ANR	688367	IfStatement	if ( style == 15 )		687717	0					
ANR	688368	Condition	style == 15	2797:11:84035:84045	687717	0	True				
ANR	688369	EqualityExpression	style == 15		687717	0		==			
ANR	688370	Identifier	style		687717	0					
ANR	688371	PrimaryExpression	15		687717	1					
ANR	688372	ExpressionStatement	formatter . setFormattingStyle ( STYLE_VTK )	2798:3:84051:84090	687717	1	True				
ANR	688373	CallExpression	formatter . setFormattingStyle ( STYLE_VTK )		687717	0					
ANR	688374	Callee	formatter . setFormattingStyle		687717	0					
ANR	688375	MemberAccess	formatter . setFormattingStyle		687717	0					
ANR	688376	Identifier	formatter		687717	0					
ANR	688377	Identifier	setFormattingStyle		687717	1					
ANR	688378	ArgumentList	STYLE_VTK		687717	1					
ANR	688379	Argument	STYLE_VTK		687717	0					
ANR	688380	Identifier	STYLE_VTK		687717	0					
ANR	688381	ElseStatement	else		687717	0					
ANR	688382	IfStatement	if ( style == 16 )		687717	0					
ANR	688383	Condition	style == 16	2799:11:84103:84113	687717	0	True				
ANR	688384	EqualityExpression	style == 16		687717	0		==			
ANR	688385	Identifier	style		687717	0					
ANR	688386	PrimaryExpression	16		687717	1					
ANR	688387	ExpressionStatement	formatter . setFormattingStyle ( STYLE_MOZILLA )	2800:3:84119:84162	687717	1	True				
ANR	688388	CallExpression	formatter . setFormattingStyle ( STYLE_MOZILLA )		687717	0					
ANR	688389	Callee	formatter . setFormattingStyle		687717	0					
ANR	688390	MemberAccess	formatter . setFormattingStyle		687717	0					
ANR	688391	Identifier	formatter		687717	0					
ANR	688392	Identifier	setFormattingStyle		687717	1					
ANR	688393	ArgumentList	STYLE_MOZILLA		687717	1					
ANR	688394	Argument	STYLE_MOZILLA		687717	0					
ANR	688395	Identifier	STYLE_MOZILLA		687717	0					
ANR	688396	ElseStatement	else		687717	0					
ANR	688397	ExpressionStatement	"isOptionError ( arg , errorInfo )"	2802:3:84174:84203	687717	0	True				
ANR	688398	CallExpression	"isOptionError ( arg , errorInfo )"		687717	0					
ANR	688399	Callee	isOptionError		687717	0					
ANR	688400	Identifier	isOptionError		687717	0					
ANR	688401	ArgumentList	arg		687717	1					
ANR	688402	Argument	arg		687717	0					
ANR	688403	Identifier	arg		687717	0					
ANR	688404	Argument	errorInfo		687717	1					
ANR	688405	Identifier	errorInfo		687717	0					
ANR	688406	ElseStatement	else		687717	0					
ANR	688407	IfStatement	"if ( isOption ( arg , ""mode=cs"" ) )"		687717	0					
ANR	688408	Condition	"isOption ( arg , ""mode=cs"" )"	2805:11:84264:84287	687717	0	True				
ANR	688409	CallExpression	"isOption ( arg , ""mode=cs"" )"		687717	0					
ANR	688410	Callee	isOption		687717	0					
ANR	688411	Identifier	isOption		687717	0					
ANR	688412	ArgumentList	arg		687717	1					
ANR	688413	Argument	arg		687717	0					
ANR	688414	Identifier	arg		687717	0					
ANR	688415	Argument	"""mode=cs"""		687717	1					
ANR	688416	PrimaryExpression	"""mode=cs"""		687717	0					
ANR	688417	CompoundStatement		103:1:3026:3026	687717	1					
ANR	688418	ExpressionStatement	formatter . setSharpStyle ( )	2807:2:84296:84321	687717	0	True				
ANR	688419	CallExpression	formatter . setSharpStyle ( )		687717	0					
ANR	688420	Callee	formatter . setSharpStyle		687717	0					
ANR	688421	MemberAccess	formatter . setSharpStyle		687717	0					
ANR	688422	Identifier	formatter		687717	0					
ANR	688423	Identifier	setSharpStyle		687717	1					
ANR	688424	ArgumentList			687717	1					
ANR	688425	ExpressionStatement	formatter . setModeManuallySet ( true )	2808:2:84325:84359	687717	1	True				
ANR	688426	CallExpression	formatter . setModeManuallySet ( true )		687717	0					
ANR	688427	Callee	formatter . setModeManuallySet		687717	0					
ANR	688428	MemberAccess	formatter . setModeManuallySet		687717	0					
ANR	688429	Identifier	formatter		687717	0					
ANR	688430	Identifier	setModeManuallySet		687717	1					
ANR	688431	ArgumentList	true		687717	1					
ANR	688432	Argument	true		687717	0					
ANR	688433	Identifier	true		687717	0					
ANR	688434	ElseStatement	else		687717	0					
ANR	688435	IfStatement	"if ( isOption ( arg , ""mode=c"" ) )"		687717	0					
ANR	688436	Condition	"isOption ( arg , ""mode=c"" )"	2810:11:84375:84397	687717	0	True				
ANR	688437	CallExpression	"isOption ( arg , ""mode=c"" )"		687717	0					
ANR	688438	Callee	isOption		687717	0					
ANR	688439	Identifier	isOption		687717	0					
ANR	688440	ArgumentList	arg		687717	1					
ANR	688441	Argument	arg		687717	0					
ANR	688442	Identifier	arg		687717	0					
ANR	688443	Argument	"""mode=c"""		687717	1					
ANR	688444	PrimaryExpression	"""mode=c"""		687717	0					
ANR	688445	CompoundStatement		108:1:3136:3136	687717	1					
ANR	688446	ExpressionStatement	formatter . setCStyle ( )	2812:2:84406:84427	687717	0	True				
ANR	688447	CallExpression	formatter . setCStyle ( )		687717	0					
ANR	688448	Callee	formatter . setCStyle		687717	0					
ANR	688449	MemberAccess	formatter . setCStyle		687717	0					
ANR	688450	Identifier	formatter		687717	0					
ANR	688451	Identifier	setCStyle		687717	1					
ANR	688452	ArgumentList			687717	1					
ANR	688453	ExpressionStatement	formatter . setModeManuallySet ( true )	2813:2:84431:84465	687717	1	True				
ANR	688454	CallExpression	formatter . setModeManuallySet ( true )		687717	0					
ANR	688455	Callee	formatter . setModeManuallySet		687717	0					
ANR	688456	MemberAccess	formatter . setModeManuallySet		687717	0					
ANR	688457	Identifier	formatter		687717	0					
ANR	688458	Identifier	setModeManuallySet		687717	1					
ANR	688459	ArgumentList	true		687717	1					
ANR	688460	Argument	true		687717	0					
ANR	688461	Identifier	true		687717	0					
ANR	688462	ElseStatement	else		687717	0					
ANR	688463	IfStatement	"if ( isOption ( arg , ""mode=java"" ) )"		687717	0					
ANR	688464	Condition	"isOption ( arg , ""mode=java"" )"	2815:11:84481:84506	687717	0	True				
ANR	688465	CallExpression	"isOption ( arg , ""mode=java"" )"		687717	0					
ANR	688466	Callee	isOption		687717	0					
ANR	688467	Identifier	isOption		687717	0					
ANR	688468	ArgumentList	arg		687717	1					
ANR	688469	Argument	arg		687717	0					
ANR	688470	Identifier	arg		687717	0					
ANR	688471	Argument	"""mode=java"""		687717	1					
ANR	688472	PrimaryExpression	"""mode=java"""		687717	0					
ANR	688473	CompoundStatement		113:1:3245:3245	687717	1					
ANR	688474	ExpressionStatement	formatter . setJavaStyle ( )	2817:2:84515:84539	687717	0	True				
ANR	688475	CallExpression	formatter . setJavaStyle ( )		687717	0					
ANR	688476	Callee	formatter . setJavaStyle		687717	0					
ANR	688477	MemberAccess	formatter . setJavaStyle		687717	0					
ANR	688478	Identifier	formatter		687717	0					
ANR	688479	Identifier	setJavaStyle		687717	1					
ANR	688480	ArgumentList			687717	1					
ANR	688481	ExpressionStatement	formatter . setModeManuallySet ( true )	2818:2:84543:84577	687717	1	True				
ANR	688482	CallExpression	formatter . setModeManuallySet ( true )		687717	0					
ANR	688483	Callee	formatter . setModeManuallySet		687717	0					
ANR	688484	MemberAccess	formatter . setModeManuallySet		687717	0					
ANR	688485	Identifier	formatter		687717	0					
ANR	688486	Identifier	setModeManuallySet		687717	1					
ANR	688487	ArgumentList	true		687717	1					
ANR	688488	Argument	true		687717	0					
ANR	688489	Identifier	true		687717	0					
ANR	688490	ElseStatement	else		687717	0					
ANR	688491	IfStatement	"if ( isParamOption ( arg , ""t"" , ""indent=tab="" ) )"		687717	0					
ANR	688492	Condition	"isParamOption ( arg , ""t"" , ""indent=tab="" )"	2820:11:84593:84630	687717	0	True				
ANR	688493	CallExpression	"isParamOption ( arg , ""t"" , ""indent=tab="" )"		687717	0					
ANR	688494	Callee	isParamOption		687717	0					
ANR	688495	Identifier	isParamOption		687717	0					
ANR	688496	ArgumentList	arg		687717	1					
ANR	688497	Argument	arg		687717	0					
ANR	688498	Identifier	arg		687717	0					
ANR	688499	Argument	"""t"""		687717	1					
ANR	688500	PrimaryExpression	"""t"""		687717	0					
ANR	688501	Argument	"""indent=tab="""		687717	2					
ANR	688502	PrimaryExpression	"""indent=tab="""		687717	0					
ANR	688503	CompoundStatement		120:2:3393:3449	687717	1					
ANR	688504	IdentifierDeclStatement	int spaceNum = 4 ;	2822:2:84639:84655	687717	0	True				
ANR	688505	IdentifierDecl	spaceNum = 4		687717	0					
ANR	688506	IdentifierDeclType	int		687717	0					
ANR	688507	Identifier	spaceNum		687717	1					
ANR	688508	AssignmentExpression	spaceNum = 4		687717	2		=			
ANR	688509	Identifier	spaceNum		687717	0					
ANR	688510	PrimaryExpression	4		687717	1					
ANR	688511	IdentifierDeclStatement	"string spaceNumParam = getParam ( arg , ""t"" , ""indent=tab="" ) ;"	2823:2:84659:84715	687717	1	True				
ANR	688512	IdentifierDecl	"spaceNumParam = getParam ( arg , ""t"" , ""indent=tab="" )"		687717	0					
ANR	688513	IdentifierDeclType	string		687717	0					
ANR	688514	Identifier	spaceNumParam		687717	1					
ANR	688515	AssignmentExpression	"spaceNumParam = getParam ( arg , ""t"" , ""indent=tab="" )"		687717	2		=			
ANR	688516	Identifier	spaceNumParam		687717	0					
ANR	688517	CallExpression	"getParam ( arg , ""t"" , ""indent=tab="" )"		687717	1					
ANR	688518	Callee	getParam		687717	0					
ANR	688519	Identifier	getParam		687717	0					
ANR	688520	ArgumentList	arg		687717	1					
ANR	688521	Argument	arg		687717	0					
ANR	688522	Identifier	arg		687717	0					
ANR	688523	Argument	"""t"""		687717	1					
ANR	688524	PrimaryExpression	"""t"""		687717	0					
ANR	688525	Argument	"""indent=tab="""		687717	2					
ANR	688526	PrimaryExpression	"""indent=tab="""		687717	0					
ANR	688527	IfStatement	if ( spaceNumParam . length ( ) > 0 )		687717	2					
ANR	688528	Condition	spaceNumParam . length ( ) > 0	2824:6:84723:84748	687717	0	True				
ANR	688529	RelationalExpression	spaceNumParam . length ( ) > 0		687717	0		>			
ANR	688530	CallExpression	spaceNumParam . length ( )		687717	0					
ANR	688531	Callee	spaceNumParam . length		687717	0					
ANR	688532	MemberAccess	spaceNumParam . length		687717	0					
ANR	688533	Identifier	spaceNumParam		687717	0					
ANR	688534	Identifier	length		687717	1					
ANR	688535	ArgumentList			687717	1					
ANR	688536	PrimaryExpression	0		687717	1					
ANR	688537	ExpressionStatement	spaceNum = atoi ( spaceNumParam . c_str ( ) )	2825:3:84754:84792	687717	1	True				
ANR	688538	AssignmentExpression	spaceNum = atoi ( spaceNumParam . c_str ( ) )		687717	0		=			
ANR	688539	Identifier	spaceNum		687717	0					
ANR	688540	CallExpression	atoi ( spaceNumParam . c_str ( ) )		687717	1					
ANR	688541	Callee	atoi		687717	0					
ANR	688542	Identifier	atoi		687717	0					
ANR	688543	ArgumentList	spaceNumParam . c_str ( )		687717	1					
ANR	688544	Argument	spaceNumParam . c_str ( )		687717	0					
ANR	688545	CallExpression	spaceNumParam . c_str ( )		687717	0					
ANR	688546	Callee	spaceNumParam . c_str		687717	0					
ANR	688547	MemberAccess	spaceNumParam . c_str		687717	0					
ANR	688548	Identifier	spaceNumParam		687717	0					
ANR	688549	Identifier	c_str		687717	1					
ANR	688550	ArgumentList			687717	1					
ANR	688551	IfStatement	if ( spaceNum < 2 || spaceNum > 20 )		687717	3					
ANR	688552	Condition	spaceNum < 2 || spaceNum > 20	2826:6:84800:84828	687717	0	True				
ANR	688553	OrExpression	spaceNum < 2 || spaceNum > 20		687717	0		||			
ANR	688554	RelationalExpression	spaceNum < 2		687717	0		<			
ANR	688555	Identifier	spaceNum		687717	0					
ANR	688556	PrimaryExpression	2		687717	1					
ANR	688557	RelationalExpression	spaceNum > 20		687717	1		>			
ANR	688558	Identifier	spaceNum		687717	0					
ANR	688559	PrimaryExpression	20		687717	1					
ANR	688560	ExpressionStatement	"isOptionError ( arg , errorInfo )"	2827:3:84834:84863	687717	1	True				
ANR	688561	CallExpression	"isOptionError ( arg , errorInfo )"		687717	0					
ANR	688562	Callee	isOptionError		687717	0					
ANR	688563	Identifier	isOptionError		687717	0					
ANR	688564	ArgumentList	arg		687717	1					
ANR	688565	Argument	arg		687717	0					
ANR	688566	Identifier	arg		687717	0					
ANR	688567	Argument	errorInfo		687717	1					
ANR	688568	Identifier	errorInfo		687717	0					
ANR	688569	ElseStatement	else		687717	0					
ANR	688570	CompoundStatement		126:2:3608:3608	687717	0					
ANR	688571	ExpressionStatement	"formatter . setTabIndentation ( spaceNum , false )"	2830:3:84879:84923	687717	0	True				
ANR	688572	CallExpression	"formatter . setTabIndentation ( spaceNum , false )"		687717	0					
ANR	688573	Callee	formatter . setTabIndentation		687717	0					
ANR	688574	MemberAccess	formatter . setTabIndentation		687717	0					
ANR	688575	Identifier	formatter		687717	0					
ANR	688576	Identifier	setTabIndentation		687717	1					
ANR	688577	ArgumentList	spaceNum		687717	1					
ANR	688578	Argument	spaceNum		687717	0					
ANR	688579	Identifier	spaceNum		687717	0					
ANR	688580	Argument	false		687717	1					
ANR	688581	Identifier	false		687717	0					
ANR	688582	ElseStatement	else		687717	0					
ANR	688583	IfStatement	"if ( isOption ( arg , ""indent=tab"" ) )"		687717	0					
ANR	688584	Condition	"isOption ( arg , ""indent=tab"" )"	2833:11:84943:84969	687717	0	True				
ANR	688585	CallExpression	"isOption ( arg , ""indent=tab"" )"		687717	0					
ANR	688586	Callee	isOption		687717	0					
ANR	688587	Identifier	isOption		687717	0					
ANR	688588	ArgumentList	arg		687717	1					
ANR	688589	Argument	arg		687717	0					
ANR	688590	Identifier	arg		687717	0					
ANR	688591	Argument	"""indent=tab"""		687717	1					
ANR	688592	PrimaryExpression	"""indent=tab"""		687717	0					
ANR	688593	CompoundStatement		131:1:3708:3708	687717	1					
ANR	688594	ExpressionStatement	formatter . setTabIndentation ( 4 )	2835:2:84978:85008	687717	0	True				
ANR	688595	CallExpression	formatter . setTabIndentation ( 4 )		687717	0					
ANR	688596	Callee	formatter . setTabIndentation		687717	0					
ANR	688597	MemberAccess	formatter . setTabIndentation		687717	0					
ANR	688598	Identifier	formatter		687717	0					
ANR	688599	Identifier	setTabIndentation		687717	1					
ANR	688600	ArgumentList	4		687717	1					
ANR	688601	Argument	4		687717	0					
ANR	688602	PrimaryExpression	4		687717	0					
ANR	688603	ElseStatement	else		687717	0					
ANR	688604	IfStatement	"if ( isParamOption ( arg , ""T"" , ""indent=force-tab="" ) )"		687717	0					
ANR	688605	Condition	"isParamOption ( arg , ""T"" , ""indent=force-tab="" )"	2837:11:85024:85067	687717	0	True				
ANR	688606	CallExpression	"isParamOption ( arg , ""T"" , ""indent=force-tab="" )"		687717	0					
ANR	688607	Callee	isParamOption		687717	0					
ANR	688608	Identifier	isParamOption		687717	0					
ANR	688609	ArgumentList	arg		687717	1					
ANR	688610	Argument	arg		687717	0					
ANR	688611	Identifier	arg		687717	0					
ANR	688612	Argument	"""T"""		687717	1					
ANR	688613	PrimaryExpression	"""T"""		687717	0					
ANR	688614	Argument	"""indent=force-tab="""		687717	2					
ANR	688615	PrimaryExpression	"""indent=force-tab="""		687717	0					
ANR	688616	CompoundStatement		137:2:3830:3892	687717	1					
ANR	688617	IdentifierDeclStatement	int spaceNum = 4 ;	2839:2:85076:85092	687717	0	True				
ANR	688618	IdentifierDecl	spaceNum = 4		687717	0					
ANR	688619	IdentifierDeclType	int		687717	0					
ANR	688620	Identifier	spaceNum		687717	1					
ANR	688621	AssignmentExpression	spaceNum = 4		687717	2		=			
ANR	688622	Identifier	spaceNum		687717	0					
ANR	688623	PrimaryExpression	4		687717	1					
ANR	688624	IdentifierDeclStatement	"string spaceNumParam = getParam ( arg , ""T"" , ""indent=force-tab="" ) ;"	2840:2:85096:85158	687717	1	True				
ANR	688625	IdentifierDecl	"spaceNumParam = getParam ( arg , ""T"" , ""indent=force-tab="" )"		687717	0					
ANR	688626	IdentifierDeclType	string		687717	0					
ANR	688627	Identifier	spaceNumParam		687717	1					
ANR	688628	AssignmentExpression	"spaceNumParam = getParam ( arg , ""T"" , ""indent=force-tab="" )"		687717	2		=			
ANR	688629	Identifier	spaceNumParam		687717	0					
ANR	688630	CallExpression	"getParam ( arg , ""T"" , ""indent=force-tab="" )"		687717	1					
ANR	688631	Callee	getParam		687717	0					
ANR	688632	Identifier	getParam		687717	0					
ANR	688633	ArgumentList	arg		687717	1					
ANR	688634	Argument	arg		687717	0					
ANR	688635	Identifier	arg		687717	0					
ANR	688636	Argument	"""T"""		687717	1					
ANR	688637	PrimaryExpression	"""T"""		687717	0					
ANR	688638	Argument	"""indent=force-tab="""		687717	2					
ANR	688639	PrimaryExpression	"""indent=force-tab="""		687717	0					
ANR	688640	IfStatement	if ( spaceNumParam . length ( ) > 0 )		687717	2					
ANR	688641	Condition	spaceNumParam . length ( ) > 0	2841:6:85166:85191	687717	0	True				
ANR	688642	RelationalExpression	spaceNumParam . length ( ) > 0		687717	0		>			
ANR	688643	CallExpression	spaceNumParam . length ( )		687717	0					
ANR	688644	Callee	spaceNumParam . length		687717	0					
ANR	688645	MemberAccess	spaceNumParam . length		687717	0					
ANR	688646	Identifier	spaceNumParam		687717	0					
ANR	688647	Identifier	length		687717	1					
ANR	688648	ArgumentList			687717	1					
ANR	688649	PrimaryExpression	0		687717	1					
ANR	688650	ExpressionStatement	spaceNum = atoi ( spaceNumParam . c_str ( ) )	2842:3:85197:85235	687717	1	True				
ANR	688651	AssignmentExpression	spaceNum = atoi ( spaceNumParam . c_str ( ) )		687717	0		=			
ANR	688652	Identifier	spaceNum		687717	0					
ANR	688653	CallExpression	atoi ( spaceNumParam . c_str ( ) )		687717	1					
ANR	688654	Callee	atoi		687717	0					
ANR	688655	Identifier	atoi		687717	0					
ANR	688656	ArgumentList	spaceNumParam . c_str ( )		687717	1					
ANR	688657	Argument	spaceNumParam . c_str ( )		687717	0					
ANR	688658	CallExpression	spaceNumParam . c_str ( )		687717	0					
ANR	688659	Callee	spaceNumParam . c_str		687717	0					
ANR	688660	MemberAccess	spaceNumParam . c_str		687717	0					
ANR	688661	Identifier	spaceNumParam		687717	0					
ANR	688662	Identifier	c_str		687717	1					
ANR	688663	ArgumentList			687717	1					
ANR	688664	IfStatement	if ( spaceNum < 2 || spaceNum > 20 )		687717	3					
ANR	688665	Condition	spaceNum < 2 || spaceNum > 20	2843:6:85243:85271	687717	0	True				
ANR	688666	OrExpression	spaceNum < 2 || spaceNum > 20		687717	0		||			
ANR	688667	RelationalExpression	spaceNum < 2		687717	0		<			
ANR	688668	Identifier	spaceNum		687717	0					
ANR	688669	PrimaryExpression	2		687717	1					
ANR	688670	RelationalExpression	spaceNum > 20		687717	1		>			
ANR	688671	Identifier	spaceNum		687717	0					
ANR	688672	PrimaryExpression	20		687717	1					
ANR	688673	ExpressionStatement	"isOptionError ( arg , errorInfo )"	2844:3:85277:85306	687717	1	True				
ANR	688674	CallExpression	"isOptionError ( arg , errorInfo )"		687717	0					
ANR	688675	Callee	isOptionError		687717	0					
ANR	688676	Identifier	isOptionError		687717	0					
ANR	688677	ArgumentList	arg		687717	1					
ANR	688678	Argument	arg		687717	0					
ANR	688679	Identifier	arg		687717	0					
ANR	688680	Argument	errorInfo		687717	1					
ANR	688681	Identifier	errorInfo		687717	0					
ANR	688682	ElseStatement	else		687717	0					
ANR	688683	CompoundStatement		143:2:4051:4051	687717	0					
ANR	688684	ExpressionStatement	"formatter . setTabIndentation ( spaceNum , true )"	2847:3:85322:85365	687717	0	True				
ANR	688685	CallExpression	"formatter . setTabIndentation ( spaceNum , true )"		687717	0					
ANR	688686	Callee	formatter . setTabIndentation		687717	0					
ANR	688687	MemberAccess	formatter . setTabIndentation		687717	0					
ANR	688688	Identifier	formatter		687717	0					
ANR	688689	Identifier	setTabIndentation		687717	1					
ANR	688690	ArgumentList	spaceNum		687717	1					
ANR	688691	Argument	spaceNum		687717	0					
ANR	688692	Identifier	spaceNum		687717	0					
ANR	688693	Argument	true		687717	1					
ANR	688694	Identifier	true		687717	0					
ANR	688695	ElseStatement	else		687717	0					
ANR	688696	IfStatement	"if ( isOption ( arg , ""indent=force-tab"" ) )"		687717	0					
ANR	688697	Condition	"isOption ( arg , ""indent=force-tab"" )"	2850:11:85385:85417	687717	0	True				
ANR	688698	CallExpression	"isOption ( arg , ""indent=force-tab"" )"		687717	0					
ANR	688699	Callee	isOption		687717	0					
ANR	688700	Identifier	isOption		687717	0					
ANR	688701	ArgumentList	arg		687717	1					
ANR	688702	Argument	arg		687717	0					
ANR	688703	Identifier	arg		687717	0					
ANR	688704	Argument	"""indent=force-tab"""		687717	1					
ANR	688705	PrimaryExpression	"""indent=force-tab"""		687717	0					
ANR	688706	CompoundStatement		148:1:4156:4156	687717	1					
ANR	688707	ExpressionStatement	"formatter . setTabIndentation ( 4 , true )"	2852:2:85426:85462	687717	0	True				
ANR	688708	CallExpression	"formatter . setTabIndentation ( 4 , true )"		687717	0					
ANR	688709	Callee	formatter . setTabIndentation		687717	0					
ANR	688710	MemberAccess	formatter . setTabIndentation		687717	0					
ANR	688711	Identifier	formatter		687717	0					
ANR	688712	Identifier	setTabIndentation		687717	1					
ANR	688713	ArgumentList	4		687717	1					
ANR	688714	Argument	4		687717	0					
ANR	688715	PrimaryExpression	4		687717	0					
ANR	688716	Argument	true		687717	1					
ANR	688717	Identifier	true		687717	0					
ANR	688718	ElseStatement	else		687717	0					
ANR	688719	IfStatement	"if ( isParamOption ( arg , ""xT"" , ""indent=force-tab-x="" ) )"		687717	0					
ANR	688720	Condition	"isParamOption ( arg , ""xT"" , ""indent=force-tab-x="" )"	2854:11:85478:85524	687717	0	True				
ANR	688721	CallExpression	"isParamOption ( arg , ""xT"" , ""indent=force-tab-x="" )"		687717	0					
ANR	688722	Callee	isParamOption		687717	0					
ANR	688723	Identifier	isParamOption		687717	0					
ANR	688724	ArgumentList	arg		687717	1					
ANR	688725	Argument	arg		687717	0					
ANR	688726	Identifier	arg		687717	0					
ANR	688727	Argument	"""xT"""		687717	1					
ANR	688728	PrimaryExpression	"""xT"""		687717	0					
ANR	688729	Argument	"""indent=force-tab-x="""		687717	2					
ANR	688730	PrimaryExpression	"""indent=force-tab-x="""		687717	0					
ANR	688731	CompoundStatement		154:2:4285:4348	687717	1					
ANR	688732	IdentifierDeclStatement	int tabNum = 8 ;	2856:2:85533:85547	687717	0	True				
ANR	688733	IdentifierDecl	tabNum = 8		687717	0					
ANR	688734	IdentifierDeclType	int		687717	0					
ANR	688735	Identifier	tabNum		687717	1					
ANR	688736	AssignmentExpression	tabNum = 8		687717	2		=			
ANR	688737	Identifier	tabNum		687717	0					
ANR	688738	PrimaryExpression	8		687717	1					
ANR	688739	IdentifierDeclStatement	"string tabNumParam = getParam ( arg , ""xT"" , ""indent=force-tab-x="" ) ;"	2857:2:85551:85614	687717	1	True				
ANR	688740	IdentifierDecl	"tabNumParam = getParam ( arg , ""xT"" , ""indent=force-tab-x="" )"		687717	0					
ANR	688741	IdentifierDeclType	string		687717	0					
ANR	688742	Identifier	tabNumParam		687717	1					
ANR	688743	AssignmentExpression	"tabNumParam = getParam ( arg , ""xT"" , ""indent=force-tab-x="" )"		687717	2		=			
ANR	688744	Identifier	tabNumParam		687717	0					
ANR	688745	CallExpression	"getParam ( arg , ""xT"" , ""indent=force-tab-x="" )"		687717	1					
ANR	688746	Callee	getParam		687717	0					
ANR	688747	Identifier	getParam		687717	0					
ANR	688748	ArgumentList	arg		687717	1					
ANR	688749	Argument	arg		687717	0					
ANR	688750	Identifier	arg		687717	0					
ANR	688751	Argument	"""xT"""		687717	1					
ANR	688752	PrimaryExpression	"""xT"""		687717	0					
ANR	688753	Argument	"""indent=force-tab-x="""		687717	2					
ANR	688754	PrimaryExpression	"""indent=force-tab-x="""		687717	0					
ANR	688755	IfStatement	if ( tabNumParam . length ( ) > 0 )		687717	2					
ANR	688756	Condition	tabNumParam . length ( ) > 0	2858:6:85622:85645	687717	0	True				
ANR	688757	RelationalExpression	tabNumParam . length ( ) > 0		687717	0		>			
ANR	688758	CallExpression	tabNumParam . length ( )		687717	0					
ANR	688759	Callee	tabNumParam . length		687717	0					
ANR	688760	MemberAccess	tabNumParam . length		687717	0					
ANR	688761	Identifier	tabNumParam		687717	0					
ANR	688762	Identifier	length		687717	1					
ANR	688763	ArgumentList			687717	1					
ANR	688764	PrimaryExpression	0		687717	1					
ANR	688765	ExpressionStatement	tabNum = atoi ( tabNumParam . c_str ( ) )	2859:3:85651:85685	687717	1	True				
ANR	688766	AssignmentExpression	tabNum = atoi ( tabNumParam . c_str ( ) )		687717	0		=			
ANR	688767	Identifier	tabNum		687717	0					
ANR	688768	CallExpression	atoi ( tabNumParam . c_str ( ) )		687717	1					
ANR	688769	Callee	atoi		687717	0					
ANR	688770	Identifier	atoi		687717	0					
ANR	688771	ArgumentList	tabNumParam . c_str ( )		687717	1					
ANR	688772	Argument	tabNumParam . c_str ( )		687717	0					
ANR	688773	CallExpression	tabNumParam . c_str ( )		687717	0					
ANR	688774	Callee	tabNumParam . c_str		687717	0					
ANR	688775	MemberAccess	tabNumParam . c_str		687717	0					
ANR	688776	Identifier	tabNumParam		687717	0					
ANR	688777	Identifier	c_str		687717	1					
ANR	688778	ArgumentList			687717	1					
ANR	688779	IfStatement	if ( tabNum < 2 || tabNum > 20 )		687717	3					
ANR	688780	Condition	tabNum < 2 || tabNum > 20	2860:6:85693:85717	687717	0	True				
ANR	688781	OrExpression	tabNum < 2 || tabNum > 20		687717	0		||			
ANR	688782	RelationalExpression	tabNum < 2		687717	0		<			
ANR	688783	Identifier	tabNum		687717	0					
ANR	688784	PrimaryExpression	2		687717	1					
ANR	688785	RelationalExpression	tabNum > 20		687717	1		>			
ANR	688786	Identifier	tabNum		687717	0					
ANR	688787	PrimaryExpression	20		687717	1					
ANR	688788	ExpressionStatement	"isOptionError ( arg , errorInfo )"	2861:3:85723:85752	687717	1	True				
ANR	688789	CallExpression	"isOptionError ( arg , errorInfo )"		687717	0					
ANR	688790	Callee	isOptionError		687717	0					
ANR	688791	Identifier	isOptionError		687717	0					
ANR	688792	ArgumentList	arg		687717	1					
ANR	688793	Argument	arg		687717	0					
ANR	688794	Identifier	arg		687717	0					
ANR	688795	Argument	errorInfo		687717	1					
ANR	688796	Identifier	errorInfo		687717	0					
ANR	688797	ElseStatement	else		687717	0					
ANR	688798	CompoundStatement		160:2:4497:4497	687717	0					
ANR	688799	ExpressionStatement	formatter . setForceTabXIndentation ( tabNum )	2864:3:85768:85809	687717	0	True				
ANR	688800	CallExpression	formatter . setForceTabXIndentation ( tabNum )		687717	0					
ANR	688801	Callee	formatter . setForceTabXIndentation		687717	0					
ANR	688802	MemberAccess	formatter . setForceTabXIndentation		687717	0					
ANR	688803	Identifier	formatter		687717	0					
ANR	688804	Identifier	setForceTabXIndentation		687717	1					
ANR	688805	ArgumentList	tabNum		687717	1					
ANR	688806	Argument	tabNum		687717	0					
ANR	688807	Identifier	tabNum		687717	0					
ANR	688808	ElseStatement	else		687717	0					
ANR	688809	IfStatement	"if ( isOption ( arg , ""indent=force-tab-x"" ) )"		687717	0					
ANR	688810	Condition	"isOption ( arg , ""indent=force-tab-x"" )"	2867:11:85829:85863	687717	0	True				
ANR	688811	CallExpression	"isOption ( arg , ""indent=force-tab-x"" )"		687717	0					
ANR	688812	Callee	isOption		687717	0					
ANR	688813	Identifier	isOption		687717	0					
ANR	688814	ArgumentList	arg		687717	1					
ANR	688815	Argument	arg		687717	0					
ANR	688816	Identifier	arg		687717	0					
ANR	688817	Argument	"""indent=force-tab-x"""		687717	1					
ANR	688818	PrimaryExpression	"""indent=force-tab-x"""		687717	0					
ANR	688819	CompoundStatement		165:1:4602:4602	687717	1					
ANR	688820	ExpressionStatement	formatter . setForceTabXIndentation ( 8 )	2869:2:85872:85908	687717	0	True				
ANR	688821	CallExpression	formatter . setForceTabXIndentation ( 8 )		687717	0					
ANR	688822	Callee	formatter . setForceTabXIndentation		687717	0					
ANR	688823	MemberAccess	formatter . setForceTabXIndentation		687717	0					
ANR	688824	Identifier	formatter		687717	0					
ANR	688825	Identifier	setForceTabXIndentation		687717	1					
ANR	688826	ArgumentList	8		687717	1					
ANR	688827	Argument	8		687717	0					
ANR	688828	PrimaryExpression	8		687717	0					
ANR	688829	ElseStatement	else		687717	0					
ANR	688830	IfStatement	"if ( isParamOption ( arg , ""s"" , ""indent=spaces="" ) )"		687717	0					
ANR	688831	Condition	"isParamOption ( arg , ""s"" , ""indent=spaces="" )"	2871:11:85924:85964	687717	0	True				
ANR	688832	CallExpression	"isParamOption ( arg , ""s"" , ""indent=spaces="" )"		687717	0					
ANR	688833	Callee	isParamOption		687717	0					
ANR	688834	Identifier	isParamOption		687717	0					
ANR	688835	ArgumentList	arg		687717	1					
ANR	688836	Argument	arg		687717	0					
ANR	688837	Identifier	arg		687717	0					
ANR	688838	Argument	"""s"""		687717	1					
ANR	688839	PrimaryExpression	"""s"""		687717	0					
ANR	688840	Argument	"""indent=spaces="""		687717	2					
ANR	688841	PrimaryExpression	"""indent=spaces="""		687717	0					
ANR	688842	CompoundStatement		171:2:4727:4786	687717	1					
ANR	688843	IdentifierDeclStatement	int spaceNum = 4 ;	2873:2:85973:85989	687717	0	True				
ANR	688844	IdentifierDecl	spaceNum = 4		687717	0					
ANR	688845	IdentifierDeclType	int		687717	0					
ANR	688846	Identifier	spaceNum		687717	1					
ANR	688847	AssignmentExpression	spaceNum = 4		687717	2		=			
ANR	688848	Identifier	spaceNum		687717	0					
ANR	688849	PrimaryExpression	4		687717	1					
ANR	688850	IdentifierDeclStatement	"string spaceNumParam = getParam ( arg , ""s"" , ""indent=spaces="" ) ;"	2874:2:85993:86052	687717	1	True				
ANR	688851	IdentifierDecl	"spaceNumParam = getParam ( arg , ""s"" , ""indent=spaces="" )"		687717	0					
ANR	688852	IdentifierDeclType	string		687717	0					
ANR	688853	Identifier	spaceNumParam		687717	1					
ANR	688854	AssignmentExpression	"spaceNumParam = getParam ( arg , ""s"" , ""indent=spaces="" )"		687717	2		=			
ANR	688855	Identifier	spaceNumParam		687717	0					
ANR	688856	CallExpression	"getParam ( arg , ""s"" , ""indent=spaces="" )"		687717	1					
ANR	688857	Callee	getParam		687717	0					
ANR	688858	Identifier	getParam		687717	0					
ANR	688859	ArgumentList	arg		687717	1					
ANR	688860	Argument	arg		687717	0					
ANR	688861	Identifier	arg		687717	0					
ANR	688862	Argument	"""s"""		687717	1					
ANR	688863	PrimaryExpression	"""s"""		687717	0					
ANR	688864	Argument	"""indent=spaces="""		687717	2					
ANR	688865	PrimaryExpression	"""indent=spaces="""		687717	0					
ANR	688866	IfStatement	if ( spaceNumParam . length ( ) > 0 )		687717	2					
ANR	688867	Condition	spaceNumParam . length ( ) > 0	2875:6:86060:86085	687717	0	True				
ANR	688868	RelationalExpression	spaceNumParam . length ( ) > 0		687717	0		>			
ANR	688869	CallExpression	spaceNumParam . length ( )		687717	0					
ANR	688870	Callee	spaceNumParam . length		687717	0					
ANR	688871	MemberAccess	spaceNumParam . length		687717	0					
ANR	688872	Identifier	spaceNumParam		687717	0					
ANR	688873	Identifier	length		687717	1					
ANR	688874	ArgumentList			687717	1					
ANR	688875	PrimaryExpression	0		687717	1					
ANR	688876	ExpressionStatement	spaceNum = atoi ( spaceNumParam . c_str ( ) )	2876:3:86091:86129	687717	1	True				
ANR	688877	AssignmentExpression	spaceNum = atoi ( spaceNumParam . c_str ( ) )		687717	0		=			
ANR	688878	Identifier	spaceNum		687717	0					
ANR	688879	CallExpression	atoi ( spaceNumParam . c_str ( ) )		687717	1					
ANR	688880	Callee	atoi		687717	0					
ANR	688881	Identifier	atoi		687717	0					
ANR	688882	ArgumentList	spaceNumParam . c_str ( )		687717	1					
ANR	688883	Argument	spaceNumParam . c_str ( )		687717	0					
ANR	688884	CallExpression	spaceNumParam . c_str ( )		687717	0					
ANR	688885	Callee	spaceNumParam . c_str		687717	0					
ANR	688886	MemberAccess	spaceNumParam . c_str		687717	0					
ANR	688887	Identifier	spaceNumParam		687717	0					
ANR	688888	Identifier	c_str		687717	1					
ANR	688889	ArgumentList			687717	1					
ANR	688890	IfStatement	if ( spaceNum < 2 || spaceNum > 20 )		687717	3					
ANR	688891	Condition	spaceNum < 2 || spaceNum > 20	2877:6:86137:86165	687717	0	True				
ANR	688892	OrExpression	spaceNum < 2 || spaceNum > 20		687717	0		||			
ANR	688893	RelationalExpression	spaceNum < 2		687717	0		<			
ANR	688894	Identifier	spaceNum		687717	0					
ANR	688895	PrimaryExpression	2		687717	1					
ANR	688896	RelationalExpression	spaceNum > 20		687717	1		>			
ANR	688897	Identifier	spaceNum		687717	0					
ANR	688898	PrimaryExpression	20		687717	1					
ANR	688899	ExpressionStatement	"isOptionError ( arg , errorInfo )"	2878:3:86171:86200	687717	1	True				
ANR	688900	CallExpression	"isOptionError ( arg , errorInfo )"		687717	0					
ANR	688901	Callee	isOptionError		687717	0					
ANR	688902	Identifier	isOptionError		687717	0					
ANR	688903	ArgumentList	arg		687717	1					
ANR	688904	Argument	arg		687717	0					
ANR	688905	Identifier	arg		687717	0					
ANR	688906	Argument	errorInfo		687717	1					
ANR	688907	Identifier	errorInfo		687717	0					
ANR	688908	ElseStatement	else		687717	0					
ANR	688909	CompoundStatement		177:2:4945:4945	687717	0					
ANR	688910	ExpressionStatement	formatter . setSpaceIndentation ( spaceNum )	2881:3:86216:86255	687717	0	True				
ANR	688911	CallExpression	formatter . setSpaceIndentation ( spaceNum )		687717	0					
ANR	688912	Callee	formatter . setSpaceIndentation		687717	0					
ANR	688913	MemberAccess	formatter . setSpaceIndentation		687717	0					
ANR	688914	Identifier	formatter		687717	0					
ANR	688915	Identifier	setSpaceIndentation		687717	1					
ANR	688916	ArgumentList	spaceNum		687717	1					
ANR	688917	Argument	spaceNum		687717	0					
ANR	688918	Identifier	spaceNum		687717	0					
ANR	688919	ElseStatement	else		687717	0					
ANR	688920	IfStatement	"if ( isOption ( arg , ""indent=spaces"" ) )"		687717	0					
ANR	688921	Condition	"isOption ( arg , ""indent=spaces"" )"	2884:11:86275:86304	687717	0	True				
ANR	688922	CallExpression	"isOption ( arg , ""indent=spaces"" )"		687717	0					
ANR	688923	Callee	isOption		687717	0					
ANR	688924	Identifier	isOption		687717	0					
ANR	688925	ArgumentList	arg		687717	1					
ANR	688926	Argument	arg		687717	0					
ANR	688927	Identifier	arg		687717	0					
ANR	688928	Argument	"""indent=spaces"""		687717	1					
ANR	688929	PrimaryExpression	"""indent=spaces"""		687717	0					
ANR	688930	CompoundStatement		182:1:5043:5043	687717	1					
ANR	688931	ExpressionStatement	formatter . setSpaceIndentation ( 4 )	2886:2:86313:86345	687717	0	True				
ANR	688932	CallExpression	formatter . setSpaceIndentation ( 4 )		687717	0					
ANR	688933	Callee	formatter . setSpaceIndentation		687717	0					
ANR	688934	MemberAccess	formatter . setSpaceIndentation		687717	0					
ANR	688935	Identifier	formatter		687717	0					
ANR	688936	Identifier	setSpaceIndentation		687717	1					
ANR	688937	ArgumentList	4		687717	1					
ANR	688938	Argument	4		687717	0					
ANR	688939	PrimaryExpression	4		687717	0					
ANR	688940	ElseStatement	else		687717	0					
ANR	688941	IfStatement	"if ( isParamOption ( arg , ""xt"" , ""indent-continuation="" ) )"		687717	0					
ANR	688942	Condition	"isParamOption ( arg , ""xt"" , ""indent-continuation="" )"	2888:10:86360:86407	687717	0	True				
ANR	688943	CallExpression	"isParamOption ( arg , ""xt"" , ""indent-continuation="" )"		687717	0					
ANR	688944	Callee	isParamOption		687717	0					
ANR	688945	Identifier	isParamOption		687717	0					
ANR	688946	ArgumentList	arg		687717	1					
ANR	688947	Argument	arg		687717	0					
ANR	688948	Identifier	arg		687717	0					
ANR	688949	Argument	"""xt"""		687717	1					
ANR	688950	PrimaryExpression	"""xt"""		687717	0					
ANR	688951	Argument	"""indent-continuation="""		687717	2					
ANR	688952	PrimaryExpression	"""indent-continuation="""		687717	0					
ANR	688953	CompoundStatement		188:2:5171:5239	687717	1					
ANR	688954	IdentifierDeclStatement	int contIndent = 1 ;	2890:2:86415:86433	687717	0	True				
ANR	688955	IdentifierDecl	contIndent = 1		687717	0					
ANR	688956	IdentifierDeclType	int		687717	0					
ANR	688957	Identifier	contIndent		687717	1					
ANR	688958	AssignmentExpression	contIndent = 1		687717	2		=			
ANR	688959	Identifier	contIndent		687717	0					
ANR	688960	PrimaryExpression	1		687717	1					
ANR	688961	IdentifierDeclStatement	"string contIndentParam = getParam ( arg , ""xt"" , ""indent-continuation="" ) ;"	2891:2:86437:86505	687717	1	True				
ANR	688962	IdentifierDecl	"contIndentParam = getParam ( arg , ""xt"" , ""indent-continuation="" )"		687717	0					
ANR	688963	IdentifierDeclType	string		687717	0					
ANR	688964	Identifier	contIndentParam		687717	1					
ANR	688965	AssignmentExpression	"contIndentParam = getParam ( arg , ""xt"" , ""indent-continuation="" )"		687717	2		=			
ANR	688966	Identifier	contIndentParam		687717	0					
ANR	688967	CallExpression	"getParam ( arg , ""xt"" , ""indent-continuation="" )"		687717	1					
ANR	688968	Callee	getParam		687717	0					
ANR	688969	Identifier	getParam		687717	0					
ANR	688970	ArgumentList	arg		687717	1					
ANR	688971	Argument	arg		687717	0					
ANR	688972	Identifier	arg		687717	0					
ANR	688973	Argument	"""xt"""		687717	1					
ANR	688974	PrimaryExpression	"""xt"""		687717	0					
ANR	688975	Argument	"""indent-continuation="""		687717	2					
ANR	688976	PrimaryExpression	"""indent-continuation="""		687717	0					
ANR	688977	IfStatement	if ( contIndentParam . length ( ) > 0 )		687717	2					
ANR	688978	Condition	contIndentParam . length ( ) > 0	2892:6:86513:86540	687717	0	True				
ANR	688979	RelationalExpression	contIndentParam . length ( ) > 0		687717	0		>			
ANR	688980	CallExpression	contIndentParam . length ( )		687717	0					
ANR	688981	Callee	contIndentParam . length		687717	0					
ANR	688982	MemberAccess	contIndentParam . length		687717	0					
ANR	688983	Identifier	contIndentParam		687717	0					
ANR	688984	Identifier	length		687717	1					
ANR	688985	ArgumentList			687717	1					
ANR	688986	PrimaryExpression	0		687717	1					
ANR	688987	ExpressionStatement	contIndent = atoi ( contIndentParam . c_str ( ) )	2893:3:86546:86588	687717	1	True				
ANR	688988	AssignmentExpression	contIndent = atoi ( contIndentParam . c_str ( ) )		687717	0		=			
ANR	688989	Identifier	contIndent		687717	0					
ANR	688990	CallExpression	atoi ( contIndentParam . c_str ( ) )		687717	1					
ANR	688991	Callee	atoi		687717	0					
ANR	688992	Identifier	atoi		687717	0					
ANR	688993	ArgumentList	contIndentParam . c_str ( )		687717	1					
ANR	688994	Argument	contIndentParam . c_str ( )		687717	0					
ANR	688995	CallExpression	contIndentParam . c_str ( )		687717	0					
ANR	688996	Callee	contIndentParam . c_str		687717	0					
ANR	688997	MemberAccess	contIndentParam . c_str		687717	0					
ANR	688998	Identifier	contIndentParam		687717	0					
ANR	688999	Identifier	c_str		687717	1					
ANR	689000	ArgumentList			687717	1					
ANR	689001	IfStatement	if ( contIndent < 0 )		687717	3					
ANR	689002	Condition	contIndent < 0	2894:6:86596:86609	687717	0	True				
ANR	689003	RelationalExpression	contIndent < 0		687717	0		<			
ANR	689004	Identifier	contIndent		687717	0					
ANR	689005	PrimaryExpression	0		687717	1					
ANR	689006	ExpressionStatement	"isOptionError ( arg , errorInfo )"	2895:3:86615:86644	687717	1	True				
ANR	689007	CallExpression	"isOptionError ( arg , errorInfo )"		687717	0					
ANR	689008	Callee	isOptionError		687717	0					
ANR	689009	Identifier	isOptionError		687717	0					
ANR	689010	ArgumentList	arg		687717	1					
ANR	689011	Argument	arg		687717	0					
ANR	689012	Identifier	arg		687717	0					
ANR	689013	Argument	errorInfo		687717	1					
ANR	689014	Identifier	errorInfo		687717	0					
ANR	689015	ElseStatement	else		687717	0					
ANR	689016	IfStatement	if ( contIndent > 4 )		687717	0					
ANR	689017	Condition	contIndent > 4	2896:11:86657:86670	687717	0	True				
ANR	689018	RelationalExpression	contIndent > 4		687717	0		>			
ANR	689019	Identifier	contIndent		687717	0					
ANR	689020	PrimaryExpression	4		687717	1					
ANR	689021	ExpressionStatement	"isOptionError ( arg , errorInfo )"	2897:3:86676:86705	687717	1	True				
ANR	689022	CallExpression	"isOptionError ( arg , errorInfo )"		687717	0					
ANR	689023	Callee	isOptionError		687717	0					
ANR	689024	Identifier	isOptionError		687717	0					
ANR	689025	ArgumentList	arg		687717	1					
ANR	689026	Argument	arg		687717	0					
ANR	689027	Identifier	arg		687717	0					
ANR	689028	Argument	errorInfo		687717	1					
ANR	689029	Identifier	errorInfo		687717	0					
ANR	689030	ElseStatement	else		687717	0					
ANR	689031	ExpressionStatement	formatter . setContinuationIndentation ( contIndent )	2899:3:86717:86765	687717	0	True				
ANR	689032	CallExpression	formatter . setContinuationIndentation ( contIndent )		687717	0					
ANR	689033	Callee	formatter . setContinuationIndentation		687717	0					
ANR	689034	MemberAccess	formatter . setContinuationIndentation		687717	0					
ANR	689035	Identifier	formatter		687717	0					
ANR	689036	Identifier	setContinuationIndentation		687717	1					
ANR	689037	ArgumentList	contIndent		687717	1					
ANR	689038	Argument	contIndent		687717	0					
ANR	689039	Identifier	contIndent		687717	0					
ANR	689040	ElseStatement	else		687717	0					
ANR	689041	IfStatement	"if ( isParamOption ( arg , ""m"" , ""min-conditional-indent="" ) )"		687717	0					
ANR	689042	Condition	"isParamOption ( arg , ""m"" , ""min-conditional-indent="" )"	2901:11:86781:86830	687717	0	True				
ANR	689043	CallExpression	"isParamOption ( arg , ""m"" , ""min-conditional-indent="" )"		687717	0					
ANR	689044	Callee	isParamOption		687717	0					
ANR	689045	Identifier	isParamOption		687717	0					
ANR	689046	ArgumentList	arg		687717	1					
ANR	689047	Argument	arg		687717	0					
ANR	689048	Identifier	arg		687717	0					
ANR	689049	Argument	"""m"""		687717	1					
ANR	689050	PrimaryExpression	"""m"""		687717	0					
ANR	689051	Argument	"""min-conditional-indent="""		687717	2					
ANR	689052	PrimaryExpression	"""min-conditional-indent="""		687717	0					
ANR	689053	CompoundStatement		201:2:5604:5673	687717	1					
ANR	689054	IdentifierDeclStatement	int minIndent = MINCOND_TWO ;	2903:2:86839:86866	687717	0	True				
ANR	689055	IdentifierDecl	minIndent = MINCOND_TWO		687717	0					
ANR	689056	IdentifierDeclType	int		687717	0					
ANR	689057	Identifier	minIndent		687717	1					
ANR	689058	AssignmentExpression	minIndent = MINCOND_TWO		687717	2		=			
ANR	689059	Identifier	MINCOND_TWO		687717	0					
ANR	689060	Identifier	MINCOND_TWO		687717	1					
ANR	689061	IdentifierDeclStatement	"string minIndentParam = getParam ( arg , ""m"" , ""min-conditional-indent="" ) ;"	2904:2:86870:86939	687717	1	True				
ANR	689062	IdentifierDecl	"minIndentParam = getParam ( arg , ""m"" , ""min-conditional-indent="" )"		687717	0					
ANR	689063	IdentifierDeclType	string		687717	0					
ANR	689064	Identifier	minIndentParam		687717	1					
ANR	689065	AssignmentExpression	"minIndentParam = getParam ( arg , ""m"" , ""min-conditional-indent="" )"		687717	2		=			
ANR	689066	Identifier	minIndentParam		687717	0					
ANR	689067	CallExpression	"getParam ( arg , ""m"" , ""min-conditional-indent="" )"		687717	1					
ANR	689068	Callee	getParam		687717	0					
ANR	689069	Identifier	getParam		687717	0					
ANR	689070	ArgumentList	arg		687717	1					
ANR	689071	Argument	arg		687717	0					
ANR	689072	Identifier	arg		687717	0					
ANR	689073	Argument	"""m"""		687717	1					
ANR	689074	PrimaryExpression	"""m"""		687717	0					
ANR	689075	Argument	"""min-conditional-indent="""		687717	2					
ANR	689076	PrimaryExpression	"""min-conditional-indent="""		687717	0					
ANR	689077	IfStatement	if ( minIndentParam . length ( ) > 0 )		687717	2					
ANR	689078	Condition	minIndentParam . length ( ) > 0	2905:6:86947:86973	687717	0	True				
ANR	689079	RelationalExpression	minIndentParam . length ( ) > 0		687717	0		>			
ANR	689080	CallExpression	minIndentParam . length ( )		687717	0					
ANR	689081	Callee	minIndentParam . length		687717	0					
ANR	689082	MemberAccess	minIndentParam . length		687717	0					
ANR	689083	Identifier	minIndentParam		687717	0					
ANR	689084	Identifier	length		687717	1					
ANR	689085	ArgumentList			687717	1					
ANR	689086	PrimaryExpression	0		687717	1					
ANR	689087	ExpressionStatement	minIndent = atoi ( minIndentParam . c_str ( ) )	2906:3:86979:87019	687717	1	True				
ANR	689088	AssignmentExpression	minIndent = atoi ( minIndentParam . c_str ( ) )		687717	0		=			
ANR	689089	Identifier	minIndent		687717	0					
ANR	689090	CallExpression	atoi ( minIndentParam . c_str ( ) )		687717	1					
ANR	689091	Callee	atoi		687717	0					
ANR	689092	Identifier	atoi		687717	0					
ANR	689093	ArgumentList	minIndentParam . c_str ( )		687717	1					
ANR	689094	Argument	minIndentParam . c_str ( )		687717	0					
ANR	689095	CallExpression	minIndentParam . c_str ( )		687717	0					
ANR	689096	Callee	minIndentParam . c_str		687717	0					
ANR	689097	MemberAccess	minIndentParam . c_str		687717	0					
ANR	689098	Identifier	minIndentParam		687717	0					
ANR	689099	Identifier	c_str		687717	1					
ANR	689100	ArgumentList			687717	1					
ANR	689101	IfStatement	if ( minIndent >= MINCOND_END )		687717	3					
ANR	689102	Condition	minIndent >= MINCOND_END	2907:6:87027:87050	687717	0	True				
ANR	689103	RelationalExpression	minIndent >= MINCOND_END		687717	0		>=			
ANR	689104	Identifier	minIndent		687717	0					
ANR	689105	Identifier	MINCOND_END		687717	1					
ANR	689106	ExpressionStatement	"isOptionError ( arg , errorInfo )"	2908:3:87056:87085	687717	1	True				
ANR	689107	CallExpression	"isOptionError ( arg , errorInfo )"		687717	0					
ANR	689108	Callee	isOptionError		687717	0					
ANR	689109	Identifier	isOptionError		687717	0					
ANR	689110	ArgumentList	arg		687717	1					
ANR	689111	Argument	arg		687717	0					
ANR	689112	Identifier	arg		687717	0					
ANR	689113	Argument	errorInfo		687717	1					
ANR	689114	Identifier	errorInfo		687717	0					
ANR	689115	ElseStatement	else		687717	0					
ANR	689116	ExpressionStatement	formatter . setMinConditionalIndentOption ( minIndent )	2910:3:87097:87147	687717	0	True				
ANR	689117	CallExpression	formatter . setMinConditionalIndentOption ( minIndent )		687717	0					
ANR	689118	Callee	formatter . setMinConditionalIndentOption		687717	0					
ANR	689119	MemberAccess	formatter . setMinConditionalIndentOption		687717	0					
ANR	689120	Identifier	formatter		687717	0					
ANR	689121	Identifier	setMinConditionalIndentOption		687717	1					
ANR	689122	ArgumentList	minIndent		687717	1					
ANR	689123	Argument	minIndent		687717	0					
ANR	689124	Identifier	minIndent		687717	0					
ANR	689125	ElseStatement	else		687717	0					
ANR	689126	IfStatement	"if ( isParamOption ( arg , ""M"" , ""max-continuation-indent="" ) )"		687717	0					
ANR	689127	Condition	"isParamOption ( arg , ""M"" , ""max-continuation-indent="" )"	2912:11:87163:87213	687717	0	True				
ANR	689128	CallExpression	"isParamOption ( arg , ""M"" , ""max-continuation-indent="" )"		687717	0					
ANR	689129	Callee	isParamOption		687717	0					
ANR	689130	Identifier	isParamOption		687717	0					
ANR	689131	ArgumentList	arg		687717	1					
ANR	689132	Argument	arg		687717	0					
ANR	689133	Identifier	arg		687717	0					
ANR	689134	Argument	"""M"""		687717	1					
ANR	689135	PrimaryExpression	"""M"""		687717	0					
ANR	689136	Argument	"""max-continuation-indent="""		687717	2					
ANR	689137	PrimaryExpression	"""max-continuation-indent="""		687717	0					
ANR	689138	CompoundStatement		212:2:5978:6048	687717	1					
ANR	689139	IdentifierDeclStatement	int maxIndent = 40 ;	2914:2:87222:87240	687717	0	True				
ANR	689140	IdentifierDecl	maxIndent = 40		687717	0					
ANR	689141	IdentifierDeclType	int		687717	0					
ANR	689142	Identifier	maxIndent		687717	1					
ANR	689143	AssignmentExpression	maxIndent = 40		687717	2		=			
ANR	689144	Identifier	maxIndent		687717	0					
ANR	689145	PrimaryExpression	40		687717	1					
ANR	689146	IdentifierDeclStatement	"string maxIndentParam = getParam ( arg , ""M"" , ""max-continuation-indent="" ) ;"	2915:2:87244:87314	687717	1	True				
ANR	689147	IdentifierDecl	"maxIndentParam = getParam ( arg , ""M"" , ""max-continuation-indent="" )"		687717	0					
ANR	689148	IdentifierDeclType	string		687717	0					
ANR	689149	Identifier	maxIndentParam		687717	1					
ANR	689150	AssignmentExpression	"maxIndentParam = getParam ( arg , ""M"" , ""max-continuation-indent="" )"		687717	2		=			
ANR	689151	Identifier	maxIndentParam		687717	0					
ANR	689152	CallExpression	"getParam ( arg , ""M"" , ""max-continuation-indent="" )"		687717	1					
ANR	689153	Callee	getParam		687717	0					
ANR	689154	Identifier	getParam		687717	0					
ANR	689155	ArgumentList	arg		687717	1					
ANR	689156	Argument	arg		687717	0					
ANR	689157	Identifier	arg		687717	0					
ANR	689158	Argument	"""M"""		687717	1					
ANR	689159	PrimaryExpression	"""M"""		687717	0					
ANR	689160	Argument	"""max-continuation-indent="""		687717	2					
ANR	689161	PrimaryExpression	"""max-continuation-indent="""		687717	0					
ANR	689162	IfStatement	if ( maxIndentParam . length ( ) > 0 )		687717	2					
ANR	689163	Condition	maxIndentParam . length ( ) > 0	2916:6:87322:87348	687717	0	True				
ANR	689164	RelationalExpression	maxIndentParam . length ( ) > 0		687717	0		>			
ANR	689165	CallExpression	maxIndentParam . length ( )		687717	0					
ANR	689166	Callee	maxIndentParam . length		687717	0					
ANR	689167	MemberAccess	maxIndentParam . length		687717	0					
ANR	689168	Identifier	maxIndentParam		687717	0					
ANR	689169	Identifier	length		687717	1					
ANR	689170	ArgumentList			687717	1					
ANR	689171	PrimaryExpression	0		687717	1					
ANR	689172	ExpressionStatement	maxIndent = atoi ( maxIndentParam . c_str ( ) )	2917:3:87354:87394	687717	1	True				
ANR	689173	AssignmentExpression	maxIndent = atoi ( maxIndentParam . c_str ( ) )		687717	0		=			
ANR	689174	Identifier	maxIndent		687717	0					
ANR	689175	CallExpression	atoi ( maxIndentParam . c_str ( ) )		687717	1					
ANR	689176	Callee	atoi		687717	0					
ANR	689177	Identifier	atoi		687717	0					
ANR	689178	ArgumentList	maxIndentParam . c_str ( )		687717	1					
ANR	689179	Argument	maxIndentParam . c_str ( )		687717	0					
ANR	689180	CallExpression	maxIndentParam . c_str ( )		687717	0					
ANR	689181	Callee	maxIndentParam . c_str		687717	0					
ANR	689182	MemberAccess	maxIndentParam . c_str		687717	0					
ANR	689183	Identifier	maxIndentParam		687717	0					
ANR	689184	Identifier	c_str		687717	1					
ANR	689185	ArgumentList			687717	1					
ANR	689186	IfStatement	if ( maxIndent < 40 )		687717	3					
ANR	689187	Condition	maxIndent < 40	2918:6:87402:87415	687717	0	True				
ANR	689188	RelationalExpression	maxIndent < 40		687717	0		<			
ANR	689189	Identifier	maxIndent		687717	0					
ANR	689190	PrimaryExpression	40		687717	1					
ANR	689191	ExpressionStatement	"isOptionError ( arg , errorInfo )"	2919:3:87421:87450	687717	1	True				
ANR	689192	CallExpression	"isOptionError ( arg , errorInfo )"		687717	0					
ANR	689193	Callee	isOptionError		687717	0					
ANR	689194	Identifier	isOptionError		687717	0					
ANR	689195	ArgumentList	arg		687717	1					
ANR	689196	Argument	arg		687717	0					
ANR	689197	Identifier	arg		687717	0					
ANR	689198	Argument	errorInfo		687717	1					
ANR	689199	Identifier	errorInfo		687717	0					
ANR	689200	ElseStatement	else		687717	0					
ANR	689201	IfStatement	if ( maxIndent > 120 )		687717	0					
ANR	689202	Condition	maxIndent > 120	2920:11:87463:87477	687717	0	True				
ANR	689203	RelationalExpression	maxIndent > 120		687717	0		>			
ANR	689204	Identifier	maxIndent		687717	0					
ANR	689205	PrimaryExpression	120		687717	1					
ANR	689206	ExpressionStatement	"isOptionError ( arg , errorInfo )"	2921:3:87483:87512	687717	1	True				
ANR	689207	CallExpression	"isOptionError ( arg , errorInfo )"		687717	0					
ANR	689208	Callee	isOptionError		687717	0					
ANR	689209	Identifier	isOptionError		687717	0					
ANR	689210	ArgumentList	arg		687717	1					
ANR	689211	Argument	arg		687717	0					
ANR	689212	Identifier	arg		687717	0					
ANR	689213	Argument	errorInfo		687717	1					
ANR	689214	Identifier	errorInfo		687717	0					
ANR	689215	ElseStatement	else		687717	0					
ANR	689216	ExpressionStatement	formatter . setMaxContinuationIndentLength ( maxIndent )	2923:3:87524:87575	687717	0	True				
ANR	689217	CallExpression	formatter . setMaxContinuationIndentLength ( maxIndent )		687717	0					
ANR	689218	Callee	formatter . setMaxContinuationIndentLength		687717	0					
ANR	689219	MemberAccess	formatter . setMaxContinuationIndentLength		687717	0					
ANR	689220	Identifier	formatter		687717	0					
ANR	689221	Identifier	setMaxContinuationIndentLength		687717	1					
ANR	689222	ArgumentList	maxIndent		687717	1					
ANR	689223	Argument	maxIndent		687717	0					
ANR	689224	Identifier	maxIndent		687717	0					
ANR	689225	ElseStatement	else		687717	0					
ANR	689226	IfStatement	"if ( isOption ( arg , ""N"" , ""indent-namespaces"" ) )"		687717	0					
ANR	689227	Condition	"isOption ( arg , ""N"" , ""indent-namespaces"" )"	2925:11:87591:87629	687717	0	True				
ANR	689228	CallExpression	"isOption ( arg , ""N"" , ""indent-namespaces"" )"		687717	0					
ANR	689229	Callee	isOption		687717	0					
ANR	689230	Identifier	isOption		687717	0					
ANR	689231	ArgumentList	arg		687717	1					
ANR	689232	Argument	arg		687717	0					
ANR	689233	Identifier	arg		687717	0					
ANR	689234	Argument	"""N"""		687717	1					
ANR	689235	PrimaryExpression	"""N"""		687717	0					
ANR	689236	Argument	"""indent-namespaces"""		687717	2					
ANR	689237	PrimaryExpression	"""indent-namespaces"""		687717	0					
ANR	689238	CompoundStatement		223:1:6368:6368	687717	1					
ANR	689239	ExpressionStatement	formatter . setNamespaceIndent ( true )	2927:2:87638:87672	687717	0	True				
ANR	689240	CallExpression	formatter . setNamespaceIndent ( true )		687717	0					
ANR	689241	Callee	formatter . setNamespaceIndent		687717	0					
ANR	689242	MemberAccess	formatter . setNamespaceIndent		687717	0					
ANR	689243	Identifier	formatter		687717	0					
ANR	689244	Identifier	setNamespaceIndent		687717	1					
ANR	689245	ArgumentList	true		687717	1					
ANR	689246	Argument	true		687717	0					
ANR	689247	Identifier	true		687717	0					
ANR	689248	ElseStatement	else		687717	0					
ANR	689249	IfStatement	"if ( isOption ( arg , ""C"" , ""indent-classes"" ) )"		687717	0					
ANR	689250	Condition	"isOption ( arg , ""C"" , ""indent-classes"" )"	2929:11:87688:87723	687717	0	True				
ANR	689251	CallExpression	"isOption ( arg , ""C"" , ""indent-classes"" )"		687717	0					
ANR	689252	Callee	isOption		687717	0					
ANR	689253	Identifier	isOption		687717	0					
ANR	689254	ArgumentList	arg		687717	1					
ANR	689255	Argument	arg		687717	0					
ANR	689256	Identifier	arg		687717	0					
ANR	689257	Argument	"""C"""		687717	1					
ANR	689258	PrimaryExpression	"""C"""		687717	0					
ANR	689259	Argument	"""indent-classes"""		687717	2					
ANR	689260	PrimaryExpression	"""indent-classes"""		687717	0					
ANR	689261	CompoundStatement		227:1:6462:6462	687717	1					
ANR	689262	ExpressionStatement	formatter . setClassIndent ( true )	2931:2:87732:87762	687717	0	True				
ANR	689263	CallExpression	formatter . setClassIndent ( true )		687717	0					
ANR	689264	Callee	formatter . setClassIndent		687717	0					
ANR	689265	MemberAccess	formatter . setClassIndent		687717	0					
ANR	689266	Identifier	formatter		687717	0					
ANR	689267	Identifier	setClassIndent		687717	1					
ANR	689268	ArgumentList	true		687717	1					
ANR	689269	Argument	true		687717	0					
ANR	689270	Identifier	true		687717	0					
ANR	689271	ElseStatement	else		687717	0					
ANR	689272	IfStatement	"if ( isOption ( arg , ""xG"" , ""indent-modifiers"" ) )"		687717	0					
ANR	689273	Condition	"isOption ( arg , ""xG"" , ""indent-modifiers"" )"	2933:11:87778:87816	687717	0	True				
ANR	689274	CallExpression	"isOption ( arg , ""xG"" , ""indent-modifiers"" )"		687717	0					
ANR	689275	Callee	isOption		687717	0					
ANR	689276	Identifier	isOption		687717	0					
ANR	689277	ArgumentList	arg		687717	1					
ANR	689278	Argument	arg		687717	0					
ANR	689279	Identifier	arg		687717	0					
ANR	689280	Argument	"""xG"""		687717	1					
ANR	689281	PrimaryExpression	"""xG"""		687717	0					
ANR	689282	Argument	"""indent-modifiers"""		687717	2					
ANR	689283	PrimaryExpression	"""indent-modifiers"""		687717	0					
ANR	689284	CompoundStatement		231:1:6555:6555	687717	1					
ANR	689285	ExpressionStatement	formatter . setModifierIndent ( true )	2935:2:87825:87858	687717	0	True				
ANR	689286	CallExpression	formatter . setModifierIndent ( true )		687717	0					
ANR	689287	Callee	formatter . setModifierIndent		687717	0					
ANR	689288	MemberAccess	formatter . setModifierIndent		687717	0					
ANR	689289	Identifier	formatter		687717	0					
ANR	689290	Identifier	setModifierIndent		687717	1					
ANR	689291	ArgumentList	true		687717	1					
ANR	689292	Argument	true		687717	0					
ANR	689293	Identifier	true		687717	0					
ANR	689294	ElseStatement	else		687717	0					
ANR	689295	IfStatement	"if ( isOption ( arg , ""S"" , ""indent-switches"" ) )"		687717	0					
ANR	689296	Condition	"isOption ( arg , ""S"" , ""indent-switches"" )"	2937:11:87874:87910	687717	0	True				
ANR	689297	CallExpression	"isOption ( arg , ""S"" , ""indent-switches"" )"		687717	0					
ANR	689298	Callee	isOption		687717	0					
ANR	689299	Identifier	isOption		687717	0					
ANR	689300	ArgumentList	arg		687717	1					
ANR	689301	Argument	arg		687717	0					
ANR	689302	Identifier	arg		687717	0					
ANR	689303	Argument	"""S"""		687717	1					
ANR	689304	PrimaryExpression	"""S"""		687717	0					
ANR	689305	Argument	"""indent-switches"""		687717	2					
ANR	689306	PrimaryExpression	"""indent-switches"""		687717	0					
ANR	689307	CompoundStatement		235:1:6649:6649	687717	1					
ANR	689308	ExpressionStatement	formatter . setSwitchIndent ( true )	2939:2:87919:87950	687717	0	True				
ANR	689309	CallExpression	formatter . setSwitchIndent ( true )		687717	0					
ANR	689310	Callee	formatter . setSwitchIndent		687717	0					
ANR	689311	MemberAccess	formatter . setSwitchIndent		687717	0					
ANR	689312	Identifier	formatter		687717	0					
ANR	689313	Identifier	setSwitchIndent		687717	1					
ANR	689314	ArgumentList	true		687717	1					
ANR	689315	Argument	true		687717	0					
ANR	689316	Identifier	true		687717	0					
ANR	689317	ElseStatement	else		687717	0					
ANR	689318	IfStatement	"if ( isOption ( arg , ""K"" , ""indent-cases"" ) )"		687717	0					
ANR	689319	Condition	"isOption ( arg , ""K"" , ""indent-cases"" )"	2941:11:87966:87999	687717	0	True				
ANR	689320	CallExpression	"isOption ( arg , ""K"" , ""indent-cases"" )"		687717	0					
ANR	689321	Callee	isOption		687717	0					
ANR	689322	Identifier	isOption		687717	0					
ANR	689323	ArgumentList	arg		687717	1					
ANR	689324	Argument	arg		687717	0					
ANR	689325	Identifier	arg		687717	0					
ANR	689326	Argument	"""K"""		687717	1					
ANR	689327	PrimaryExpression	"""K"""		687717	0					
ANR	689328	Argument	"""indent-cases"""		687717	2					
ANR	689329	PrimaryExpression	"""indent-cases"""		687717	0					
ANR	689330	CompoundStatement		239:1:6738:6738	687717	1					
ANR	689331	ExpressionStatement	formatter . setCaseIndent ( true )	2943:2:88008:88037	687717	0	True				
ANR	689332	CallExpression	formatter . setCaseIndent ( true )		687717	0					
ANR	689333	Callee	formatter . setCaseIndent		687717	0					
ANR	689334	MemberAccess	formatter . setCaseIndent		687717	0					
ANR	689335	Identifier	formatter		687717	0					
ANR	689336	Identifier	setCaseIndent		687717	1					
ANR	689337	ArgumentList	true		687717	1					
ANR	689338	Argument	true		687717	0					
ANR	689339	Identifier	true		687717	0					
ANR	689340	ElseStatement	else		687717	0					
ANR	689341	IfStatement	"if ( isOption ( arg , ""xU"" , ""indent-after-parens"" ) )"		687717	0					
ANR	689342	Condition	"isOption ( arg , ""xU"" , ""indent-after-parens"" )"	2945:11:88053:88094	687717	0	True				
ANR	689343	CallExpression	"isOption ( arg , ""xU"" , ""indent-after-parens"" )"		687717	0					
ANR	689344	Callee	isOption		687717	0					
ANR	689345	Identifier	isOption		687717	0					
ANR	689346	ArgumentList	arg		687717	1					
ANR	689347	Argument	arg		687717	0					
ANR	689348	Identifier	arg		687717	0					
ANR	689349	Argument	"""xU"""		687717	1					
ANR	689350	PrimaryExpression	"""xU"""		687717	0					
ANR	689351	Argument	"""indent-after-parens"""		687717	2					
ANR	689352	PrimaryExpression	"""indent-after-parens"""		687717	0					
ANR	689353	CompoundStatement		243:1:6833:6833	687717	1					
ANR	689354	ExpressionStatement	formatter . setAfterParenIndent ( true )	2947:2:88103:88138	687717	0	True				
ANR	689355	CallExpression	formatter . setAfterParenIndent ( true )		687717	0					
ANR	689356	Callee	formatter . setAfterParenIndent		687717	0					
ANR	689357	MemberAccess	formatter . setAfterParenIndent		687717	0					
ANR	689358	Identifier	formatter		687717	0					
ANR	689359	Identifier	setAfterParenIndent		687717	1					
ANR	689360	ArgumentList	true		687717	1					
ANR	689361	Argument	true		687717	0					
ANR	689362	Identifier	true		687717	0					
ANR	689363	ElseStatement	else		687717	0					
ANR	689364	IfStatement	"if ( isOption ( arg , ""L"" , ""indent-labels"" ) )"		687717	0					
ANR	689365	Condition	"isOption ( arg , ""L"" , ""indent-labels"" )"	2949:11:88154:88188	687717	0	True				
ANR	689366	CallExpression	"isOption ( arg , ""L"" , ""indent-labels"" )"		687717	0					
ANR	689367	Callee	isOption		687717	0					
ANR	689368	Identifier	isOption		687717	0					
ANR	689369	ArgumentList	arg		687717	1					
ANR	689370	Argument	arg		687717	0					
ANR	689371	Identifier	arg		687717	0					
ANR	689372	Argument	"""L"""		687717	1					
ANR	689373	PrimaryExpression	"""L"""		687717	0					
ANR	689374	Argument	"""indent-labels"""		687717	2					
ANR	689375	PrimaryExpression	"""indent-labels"""		687717	0					
ANR	689376	CompoundStatement		247:1:6927:6927	687717	1					
ANR	689377	ExpressionStatement	formatter . setLabelIndent ( true )	2951:2:88197:88227	687717	0	True				
ANR	689378	CallExpression	formatter . setLabelIndent ( true )		687717	0					
ANR	689379	Callee	formatter . setLabelIndent		687717	0					
ANR	689380	MemberAccess	formatter . setLabelIndent		687717	0					
ANR	689381	Identifier	formatter		687717	0					
ANR	689382	Identifier	setLabelIndent		687717	1					
ANR	689383	ArgumentList	true		687717	1					
ANR	689384	Argument	true		687717	0					
ANR	689385	Identifier	true		687717	0					
ANR	689386	ElseStatement	else		687717	0					
ANR	689387	IfStatement	"if ( isOption ( arg , ""xW"" , ""indent-preproc-block"" ) )"		687717	0					
ANR	689388	Condition	"isOption ( arg , ""xW"" , ""indent-preproc-block"" )"	2953:10:88242:88284	687717	0	True				
ANR	689389	CallExpression	"isOption ( arg , ""xW"" , ""indent-preproc-block"" )"		687717	0					
ANR	689390	Callee	isOption		687717	0					
ANR	689391	Identifier	isOption		687717	0					
ANR	689392	ArgumentList	arg		687717	1					
ANR	689393	Argument	arg		687717	0					
ANR	689394	Identifier	arg		687717	0					
ANR	689395	Argument	"""xW"""		687717	1					
ANR	689396	PrimaryExpression	"""xW"""		687717	0					
ANR	689397	Argument	"""indent-preproc-block"""		687717	2					
ANR	689398	PrimaryExpression	"""indent-preproc-block"""		687717	0					
ANR	689399	CompoundStatement		251:1:7022:7022	687717	1					
ANR	689400	ExpressionStatement	formatter . setPreprocBlockIndent ( true )	2955:2:88292:88329	687717	0	True				
ANR	689401	CallExpression	formatter . setPreprocBlockIndent ( true )		687717	0					
ANR	689402	Callee	formatter . setPreprocBlockIndent		687717	0					
ANR	689403	MemberAccess	formatter . setPreprocBlockIndent		687717	0					
ANR	689404	Identifier	formatter		687717	0					
ANR	689405	Identifier	setPreprocBlockIndent		687717	1					
ANR	689406	ArgumentList	true		687717	1					
ANR	689407	Argument	true		687717	0					
ANR	689408	Identifier	true		687717	0					
ANR	689409	ElseStatement	else		687717	0					
ANR	689410	IfStatement	"if ( isOption ( arg , ""w"" , ""indent-preproc-define"" ) )"		687717	0					
ANR	689411	Condition	"isOption ( arg , ""w"" , ""indent-preproc-define"" )"	2957:11:88345:88387	687717	0	True				
ANR	689412	CallExpression	"isOption ( arg , ""w"" , ""indent-preproc-define"" )"		687717	0					
ANR	689413	Callee	isOption		687717	0					
ANR	689414	Identifier	isOption		687717	0					
ANR	689415	ArgumentList	arg		687717	1					
ANR	689416	Argument	arg		687717	0					
ANR	689417	Identifier	arg		687717	0					
ANR	689418	Argument	"""w"""		687717	1					
ANR	689419	PrimaryExpression	"""w"""		687717	0					
ANR	689420	Argument	"""indent-preproc-define"""		687717	2					
ANR	689421	PrimaryExpression	"""indent-preproc-define"""		687717	0					
ANR	689422	CompoundStatement		255:1:7126:7126	687717	1					
ANR	689423	ExpressionStatement	formatter . setPreprocDefineIndent ( true )	2959:2:88396:88434	687717	0	True				
ANR	689424	CallExpression	formatter . setPreprocDefineIndent ( true )		687717	0					
ANR	689425	Callee	formatter . setPreprocDefineIndent		687717	0					
ANR	689426	MemberAccess	formatter . setPreprocDefineIndent		687717	0					
ANR	689427	Identifier	formatter		687717	0					
ANR	689428	Identifier	setPreprocDefineIndent		687717	1					
ANR	689429	ArgumentList	true		687717	1					
ANR	689430	Argument	true		687717	0					
ANR	689431	Identifier	true		687717	0					
ANR	689432	ElseStatement	else		687717	0					
ANR	689433	IfStatement	"if ( isOption ( arg , ""xw"" , ""indent-preproc-cond"" ) )"		687717	0					
ANR	689434	Condition	"isOption ( arg , ""xw"" , ""indent-preproc-cond"" )"	2961:11:88450:88491	687717	0	True				
ANR	689435	CallExpression	"isOption ( arg , ""xw"" , ""indent-preproc-cond"" )"		687717	0					
ANR	689436	Callee	isOption		687717	0					
ANR	689437	Identifier	isOption		687717	0					
ANR	689438	ArgumentList	arg		687717	1					
ANR	689439	Argument	arg		687717	0					
ANR	689440	Identifier	arg		687717	0					
ANR	689441	Argument	"""xw"""		687717	1					
ANR	689442	PrimaryExpression	"""xw"""		687717	0					
ANR	689443	Argument	"""indent-preproc-cond"""		687717	2					
ANR	689444	PrimaryExpression	"""indent-preproc-cond"""		687717	0					
ANR	689445	CompoundStatement		259:1:7230:7230	687717	1					
ANR	689446	ExpressionStatement	formatter . setPreprocConditionalIndent ( true )	2963:2:88500:88543	687717	0	True				
ANR	689447	CallExpression	formatter . setPreprocConditionalIndent ( true )		687717	0					
ANR	689448	Callee	formatter . setPreprocConditionalIndent		687717	0					
ANR	689449	MemberAccess	formatter . setPreprocConditionalIndent		687717	0					
ANR	689450	Identifier	formatter		687717	0					
ANR	689451	Identifier	setPreprocConditionalIndent		687717	1					
ANR	689452	ArgumentList	true		687717	1					
ANR	689453	Argument	true		687717	0					
ANR	689454	Identifier	true		687717	0					
ANR	689455	ElseStatement	else		687717	0					
ANR	689456	IfStatement	"if ( isOption ( arg , ""y"" , ""break-closing-braces"" ) )"		687717	0					
ANR	689457	Condition	"isOption ( arg , ""y"" , ""break-closing-braces"" )"	2965:11:88559:88600	687717	0	True				
ANR	689458	CallExpression	"isOption ( arg , ""y"" , ""break-closing-braces"" )"		687717	0					
ANR	689459	Callee	isOption		687717	0					
ANR	689460	Identifier	isOption		687717	0					
ANR	689461	ArgumentList	arg		687717	1					
ANR	689462	Argument	arg		687717	0					
ANR	689463	Identifier	arg		687717	0					
ANR	689464	Argument	"""y"""		687717	1					
ANR	689465	PrimaryExpression	"""y"""		687717	0					
ANR	689466	Argument	"""break-closing-braces"""		687717	2					
ANR	689467	PrimaryExpression	"""break-closing-braces"""		687717	0					
ANR	689468	CompoundStatement		263:1:7339:7339	687717	1					
ANR	689469	ExpressionStatement	formatter . setBreakClosingHeaderBracesMode ( true )	2967:2:88609:88656	687717	0	True				
ANR	689470	CallExpression	formatter . setBreakClosingHeaderBracesMode ( true )		687717	0					
ANR	689471	Callee	formatter . setBreakClosingHeaderBracesMode		687717	0					
ANR	689472	MemberAccess	formatter . setBreakClosingHeaderBracesMode		687717	0					
ANR	689473	Identifier	formatter		687717	0					
ANR	689474	Identifier	setBreakClosingHeaderBracesMode		687717	1					
ANR	689475	ArgumentList	true		687717	1					
ANR	689476	Argument	true		687717	0					
ANR	689477	Identifier	true		687717	0					
ANR	689478	ElseStatement	else		687717	0					
ANR	689479	IfStatement	"if ( isOption ( arg , ""O"" , ""keep-one-line-blocks"" ) )"		687717	0					
ANR	689480	Condition	"isOption ( arg , ""O"" , ""keep-one-line-blocks"" )"	2969:11:88672:88713	687717	0	True				
ANR	689481	CallExpression	"isOption ( arg , ""O"" , ""keep-one-line-blocks"" )"		687717	0					
ANR	689482	Callee	isOption		687717	0					
ANR	689483	Identifier	isOption		687717	0					
ANR	689484	ArgumentList	arg		687717	1					
ANR	689485	Argument	arg		687717	0					
ANR	689486	Identifier	arg		687717	0					
ANR	689487	Argument	"""O"""		687717	1					
ANR	689488	PrimaryExpression	"""O"""		687717	0					
ANR	689489	Argument	"""keep-one-line-blocks"""		687717	2					
ANR	689490	PrimaryExpression	"""keep-one-line-blocks"""		687717	0					
ANR	689491	CompoundStatement		267:1:7452:7452	687717	1					
ANR	689492	ExpressionStatement	formatter . setBreakOneLineBlocksMode ( false )	2971:2:88722:88764	687717	0	True				
ANR	689493	CallExpression	formatter . setBreakOneLineBlocksMode ( false )		687717	0					
ANR	689494	Callee	formatter . setBreakOneLineBlocksMode		687717	0					
ANR	689495	MemberAccess	formatter . setBreakOneLineBlocksMode		687717	0					
ANR	689496	Identifier	formatter		687717	0					
ANR	689497	Identifier	setBreakOneLineBlocksMode		687717	1					
ANR	689498	ArgumentList	false		687717	1					
ANR	689499	Argument	false		687717	0					
ANR	689500	Identifier	false		687717	0					
ANR	689501	ElseStatement	else		687717	0					
ANR	689502	IfStatement	"if ( isOption ( arg , ""o"" , ""keep-one-line-statements"" ) )"		687717	0					
ANR	689503	Condition	"isOption ( arg , ""o"" , ""keep-one-line-statements"" )"	2973:11:88780:88825	687717	0	True				
ANR	689504	CallExpression	"isOption ( arg , ""o"" , ""keep-one-line-statements"" )"		687717	0					
ANR	689505	Callee	isOption		687717	0					
ANR	689506	Identifier	isOption		687717	0					
ANR	689507	ArgumentList	arg		687717	1					
ANR	689508	Argument	arg		687717	0					
ANR	689509	Identifier	arg		687717	0					
ANR	689510	Argument	"""o"""		687717	1					
ANR	689511	PrimaryExpression	"""o"""		687717	0					
ANR	689512	Argument	"""keep-one-line-statements"""		687717	2					
ANR	689513	PrimaryExpression	"""keep-one-line-statements"""		687717	0					
ANR	689514	CompoundStatement		271:1:7564:7564	687717	1					
ANR	689515	ExpressionStatement	formatter . setBreakOneLineStatementsMode ( false )	2975:2:88834:88880	687717	0	True				
ANR	689516	CallExpression	formatter . setBreakOneLineStatementsMode ( false )		687717	0					
ANR	689517	Callee	formatter . setBreakOneLineStatementsMode		687717	0					
ANR	689518	MemberAccess	formatter . setBreakOneLineStatementsMode		687717	0					
ANR	689519	Identifier	formatter		687717	0					
ANR	689520	Identifier	setBreakOneLineStatementsMode		687717	1					
ANR	689521	ArgumentList	false		687717	1					
ANR	689522	Argument	false		687717	0					
ANR	689523	Identifier	false		687717	0					
ANR	689524	ElseStatement	else		687717	0					
ANR	689525	IfStatement	"if ( isOption ( arg , ""P"" , ""pad-paren"" ) )"		687717	0					
ANR	689526	Condition	"isOption ( arg , ""P"" , ""pad-paren"" )"	2977:11:88896:88926	687717	0	True				
ANR	689527	CallExpression	"isOption ( arg , ""P"" , ""pad-paren"" )"		687717	0					
ANR	689528	Callee	isOption		687717	0					
ANR	689529	Identifier	isOption		687717	0					
ANR	689530	ArgumentList	arg		687717	1					
ANR	689531	Argument	arg		687717	0					
ANR	689532	Identifier	arg		687717	0					
ANR	689533	Argument	"""P"""		687717	1					
ANR	689534	PrimaryExpression	"""P"""		687717	0					
ANR	689535	Argument	"""pad-paren"""		687717	2					
ANR	689536	PrimaryExpression	"""pad-paren"""		687717	0					
ANR	689537	CompoundStatement		275:1:7665:7665	687717	1					
ANR	689538	ExpressionStatement	formatter . setParensOutsidePaddingMode ( true )	2979:2:88935:88978	687717	0	True				
ANR	689539	CallExpression	formatter . setParensOutsidePaddingMode ( true )		687717	0					
ANR	689540	Callee	formatter . setParensOutsidePaddingMode		687717	0					
ANR	689541	MemberAccess	formatter . setParensOutsidePaddingMode		687717	0					
ANR	689542	Identifier	formatter		687717	0					
ANR	689543	Identifier	setParensOutsidePaddingMode		687717	1					
ANR	689544	ArgumentList	true		687717	1					
ANR	689545	Argument	true		687717	0					
ANR	689546	Identifier	true		687717	0					
ANR	689547	ExpressionStatement	formatter . setParensInsidePaddingMode ( true )	2980:2:88982:89024	687717	1	True				
ANR	689548	CallExpression	formatter . setParensInsidePaddingMode ( true )		687717	0					
ANR	689549	Callee	formatter . setParensInsidePaddingMode		687717	0					
ANR	689550	MemberAccess	formatter . setParensInsidePaddingMode		687717	0					
ANR	689551	Identifier	formatter		687717	0					
ANR	689552	Identifier	setParensInsidePaddingMode		687717	1					
ANR	689553	ArgumentList	true		687717	1					
ANR	689554	Argument	true		687717	0					
ANR	689555	Identifier	true		687717	0					
ANR	689556	ElseStatement	else		687717	0					
ANR	689557	IfStatement	"if ( isOption ( arg , ""d"" , ""pad-paren-out"" ) )"		687717	0					
ANR	689558	Condition	"isOption ( arg , ""d"" , ""pad-paren-out"" )"	2982:11:89040:89074	687717	0	True				
ANR	689559	CallExpression	"isOption ( arg , ""d"" , ""pad-paren-out"" )"		687717	0					
ANR	689560	Callee	isOption		687717	0					
ANR	689561	Identifier	isOption		687717	0					
ANR	689562	ArgumentList	arg		687717	1					
ANR	689563	Argument	arg		687717	0					
ANR	689564	Identifier	arg		687717	0					
ANR	689565	Argument	"""d"""		687717	1					
ANR	689566	PrimaryExpression	"""d"""		687717	0					
ANR	689567	Argument	"""pad-paren-out"""		687717	2					
ANR	689568	PrimaryExpression	"""pad-paren-out"""		687717	0					
ANR	689569	CompoundStatement		280:1:7813:7813	687717	1					
ANR	689570	ExpressionStatement	formatter . setParensOutsidePaddingMode ( true )	2984:2:89083:89126	687717	0	True				
ANR	689571	CallExpression	formatter . setParensOutsidePaddingMode ( true )		687717	0					
ANR	689572	Callee	formatter . setParensOutsidePaddingMode		687717	0					
ANR	689573	MemberAccess	formatter . setParensOutsidePaddingMode		687717	0					
ANR	689574	Identifier	formatter		687717	0					
ANR	689575	Identifier	setParensOutsidePaddingMode		687717	1					
ANR	689576	ArgumentList	true		687717	1					
ANR	689577	Argument	true		687717	0					
ANR	689578	Identifier	true		687717	0					
ANR	689579	ElseStatement	else		687717	0					
ANR	689580	IfStatement	"if ( isOption ( arg , ""xd"" , ""pad-first-paren-out"" ) )"		687717	0					
ANR	689581	Condition	"isOption ( arg , ""xd"" , ""pad-first-paren-out"" )"	2986:11:89142:89183	687717	0	True				
ANR	689582	CallExpression	"isOption ( arg , ""xd"" , ""pad-first-paren-out"" )"		687717	0					
ANR	689583	Callee	isOption		687717	0					
ANR	689584	Identifier	isOption		687717	0					
ANR	689585	ArgumentList	arg		687717	1					
ANR	689586	Argument	arg		687717	0					
ANR	689587	Identifier	arg		687717	0					
ANR	689588	Argument	"""xd"""		687717	1					
ANR	689589	PrimaryExpression	"""xd"""		687717	0					
ANR	689590	Argument	"""pad-first-paren-out"""		687717	2					
ANR	689591	PrimaryExpression	"""pad-first-paren-out"""		687717	0					
ANR	689592	CompoundStatement		284:1:7922:7922	687717	1					
ANR	689593	ExpressionStatement	formatter . setParensFirstPaddingMode ( true )	2988:2:89192:89233	687717	0	True				
ANR	689594	CallExpression	formatter . setParensFirstPaddingMode ( true )		687717	0					
ANR	689595	Callee	formatter . setParensFirstPaddingMode		687717	0					
ANR	689596	MemberAccess	formatter . setParensFirstPaddingMode		687717	0					
ANR	689597	Identifier	formatter		687717	0					
ANR	689598	Identifier	setParensFirstPaddingMode		687717	1					
ANR	689599	ArgumentList	true		687717	1					
ANR	689600	Argument	true		687717	0					
ANR	689601	Identifier	true		687717	0					
ANR	689602	ElseStatement	else		687717	0					
ANR	689603	IfStatement	"if ( isOption ( arg , ""D"" , ""pad-paren-in"" ) )"		687717	0					
ANR	689604	Condition	"isOption ( arg , ""D"" , ""pad-paren-in"" )"	2990:11:89249:89282	687717	0	True				
ANR	689605	CallExpression	"isOption ( arg , ""D"" , ""pad-paren-in"" )"		687717	0					
ANR	689606	Callee	isOption		687717	0					
ANR	689607	Identifier	isOption		687717	0					
ANR	689608	ArgumentList	arg		687717	1					
ANR	689609	Argument	arg		687717	0					
ANR	689610	Identifier	arg		687717	0					
ANR	689611	Argument	"""D"""		687717	1					
ANR	689612	PrimaryExpression	"""D"""		687717	0					
ANR	689613	Argument	"""pad-paren-in"""		687717	2					
ANR	689614	PrimaryExpression	"""pad-paren-in"""		687717	0					
ANR	689615	CompoundStatement		288:1:8021:8021	687717	1					
ANR	689616	ExpressionStatement	formatter . setParensInsidePaddingMode ( true )	2992:2:89291:89333	687717	0	True				
ANR	689617	CallExpression	formatter . setParensInsidePaddingMode ( true )		687717	0					
ANR	689618	Callee	formatter . setParensInsidePaddingMode		687717	0					
ANR	689619	MemberAccess	formatter . setParensInsidePaddingMode		687717	0					
ANR	689620	Identifier	formatter		687717	0					
ANR	689621	Identifier	setParensInsidePaddingMode		687717	1					
ANR	689622	ArgumentList	true		687717	1					
ANR	689623	Argument	true		687717	0					
ANR	689624	Identifier	true		687717	0					
ANR	689625	ElseStatement	else		687717	0					
ANR	689626	IfStatement	"if ( isOption ( arg , ""H"" , ""pad-header"" ) )"		687717	0					
ANR	689627	Condition	"isOption ( arg , ""H"" , ""pad-header"" )"	2994:11:89349:89380	687717	0	True				
ANR	689628	CallExpression	"isOption ( arg , ""H"" , ""pad-header"" )"		687717	0					
ANR	689629	Callee	isOption		687717	0					
ANR	689630	Identifier	isOption		687717	0					
ANR	689631	ArgumentList	arg		687717	1					
ANR	689632	Argument	arg		687717	0					
ANR	689633	Identifier	arg		687717	0					
ANR	689634	Argument	"""H"""		687717	1					
ANR	689635	PrimaryExpression	"""H"""		687717	0					
ANR	689636	Argument	"""pad-header"""		687717	2					
ANR	689637	PrimaryExpression	"""pad-header"""		687717	0					
ANR	689638	CompoundStatement		292:1:8119:8119	687717	1					
ANR	689639	ExpressionStatement	formatter . setParensHeaderPaddingMode ( true )	2996:2:89389:89431	687717	0	True				
ANR	689640	CallExpression	formatter . setParensHeaderPaddingMode ( true )		687717	0					
ANR	689641	Callee	formatter . setParensHeaderPaddingMode		687717	0					
ANR	689642	MemberAccess	formatter . setParensHeaderPaddingMode		687717	0					
ANR	689643	Identifier	formatter		687717	0					
ANR	689644	Identifier	setParensHeaderPaddingMode		687717	1					
ANR	689645	ArgumentList	true		687717	1					
ANR	689646	Argument	true		687717	0					
ANR	689647	Identifier	true		687717	0					
ANR	689648	ElseStatement	else		687717	0					
ANR	689649	IfStatement	"if ( isOption ( arg , ""U"" , ""unpad-paren"" ) )"		687717	0					
ANR	689650	Condition	"isOption ( arg , ""U"" , ""unpad-paren"" )"	2998:11:89447:89479	687717	0	True				
ANR	689651	CallExpression	"isOption ( arg , ""U"" , ""unpad-paren"" )"		687717	0					
ANR	689652	Callee	isOption		687717	0					
ANR	689653	Identifier	isOption		687717	0					
ANR	689654	ArgumentList	arg		687717	1					
ANR	689655	Argument	arg		687717	0					
ANR	689656	Identifier	arg		687717	0					
ANR	689657	Argument	"""U"""		687717	1					
ANR	689658	PrimaryExpression	"""U"""		687717	0					
ANR	689659	Argument	"""unpad-paren"""		687717	2					
ANR	689660	PrimaryExpression	"""unpad-paren"""		687717	0					
ANR	689661	CompoundStatement		296:1:8218:8218	687717	1					
ANR	689662	ExpressionStatement	formatter . setParensUnPaddingMode ( true )	3000:2:89488:89526	687717	0	True				
ANR	689663	CallExpression	formatter . setParensUnPaddingMode ( true )		687717	0					
ANR	689664	Callee	formatter . setParensUnPaddingMode		687717	0					
ANR	689665	MemberAccess	formatter . setParensUnPaddingMode		687717	0					
ANR	689666	Identifier	formatter		687717	0					
ANR	689667	Identifier	setParensUnPaddingMode		687717	1					
ANR	689668	ArgumentList	true		687717	1					
ANR	689669	Argument	true		687717	0					
ANR	689670	Identifier	true		687717	0					
ANR	689671	ElseStatement	else		687717	0					
ANR	689672	IfStatement	"if ( isOption ( arg , ""p"" , ""pad-oper"" ) )"		687717	0					
ANR	689673	Condition	"isOption ( arg , ""p"" , ""pad-oper"" )"	3002:11:89542:89571	687717	0	True				
ANR	689674	CallExpression	"isOption ( arg , ""p"" , ""pad-oper"" )"		687717	0					
ANR	689675	Callee	isOption		687717	0					
ANR	689676	Identifier	isOption		687717	0					
ANR	689677	ArgumentList	arg		687717	1					
ANR	689678	Argument	arg		687717	0					
ANR	689679	Identifier	arg		687717	0					
ANR	689680	Argument	"""p"""		687717	1					
ANR	689681	PrimaryExpression	"""p"""		687717	0					
ANR	689682	Argument	"""pad-oper"""		687717	2					
ANR	689683	PrimaryExpression	"""pad-oper"""		687717	0					
ANR	689684	CompoundStatement		300:1:8310:8310	687717	1					
ANR	689685	ExpressionStatement	formatter . setOperatorPaddingMode ( true )	3004:2:89580:89618	687717	0	True				
ANR	689686	CallExpression	formatter . setOperatorPaddingMode ( true )		687717	0					
ANR	689687	Callee	formatter . setOperatorPaddingMode		687717	0					
ANR	689688	MemberAccess	formatter . setOperatorPaddingMode		687717	0					
ANR	689689	Identifier	formatter		687717	0					
ANR	689690	Identifier	setOperatorPaddingMode		687717	1					
ANR	689691	ArgumentList	true		687717	1					
ANR	689692	Argument	true		687717	0					
ANR	689693	Identifier	true		687717	0					
ANR	689694	ElseStatement	else		687717	0					
ANR	689695	IfStatement	"if ( isOption ( arg , ""xg"" , ""pad-comma"" ) )"		687717	0					
ANR	689696	Condition	"isOption ( arg , ""xg"" , ""pad-comma"" )"	3006:10:89633:89664	687717	0	True				
ANR	689697	CallExpression	"isOption ( arg , ""xg"" , ""pad-comma"" )"		687717	0					
ANR	689698	Callee	isOption		687717	0					
ANR	689699	Identifier	isOption		687717	0					
ANR	689700	ArgumentList	arg		687717	1					
ANR	689701	Argument	arg		687717	0					
ANR	689702	Identifier	arg		687717	0					
ANR	689703	Argument	"""xg"""		687717	1					
ANR	689704	PrimaryExpression	"""xg"""		687717	0					
ANR	689705	Argument	"""pad-comma"""		687717	2					
ANR	689706	PrimaryExpression	"""pad-comma"""		687717	0					
ANR	689707	CompoundStatement		304:1:8402:8402	687717	1					
ANR	689708	ExpressionStatement	formatter . setCommaPaddingMode ( true )	3008:2:89672:89707	687717	0	True				
ANR	689709	CallExpression	formatter . setCommaPaddingMode ( true )		687717	0					
ANR	689710	Callee	formatter . setCommaPaddingMode		687717	0					
ANR	689711	MemberAccess	formatter . setCommaPaddingMode		687717	0					
ANR	689712	Identifier	formatter		687717	0					
ANR	689713	Identifier	setCommaPaddingMode		687717	1					
ANR	689714	ArgumentList	true		687717	1					
ANR	689715	Argument	true		687717	0					
ANR	689716	Identifier	true		687717	0					
ANR	689717	ElseStatement	else		687717	0					
ANR	689718	IfStatement	"if ( isOption ( arg , ""xe"" , ""delete-empty-lines"" ) )"		687717	0					
ANR	689719	Condition	"isOption ( arg , ""xe"" , ""delete-empty-lines"" )"	3010:11:89723:89763	687717	0	True				
ANR	689720	CallExpression	"isOption ( arg , ""xe"" , ""delete-empty-lines"" )"		687717	0					
ANR	689721	Callee	isOption		687717	0					
ANR	689722	Identifier	isOption		687717	0					
ANR	689723	ArgumentList	arg		687717	1					
ANR	689724	Argument	arg		687717	0					
ANR	689725	Identifier	arg		687717	0					
ANR	689726	Argument	"""xe"""		687717	1					
ANR	689727	PrimaryExpression	"""xe"""		687717	0					
ANR	689728	Argument	"""delete-empty-lines"""		687717	2					
ANR	689729	PrimaryExpression	"""delete-empty-lines"""		687717	0					
ANR	689730	CompoundStatement		308:1:8502:8502	687717	1					
ANR	689731	ExpressionStatement	formatter . setDeleteEmptyLinesMode ( true )	3012:2:89772:89811	687717	0	True				
ANR	689732	CallExpression	formatter . setDeleteEmptyLinesMode ( true )		687717	0					
ANR	689733	Callee	formatter . setDeleteEmptyLinesMode		687717	0					
ANR	689734	MemberAccess	formatter . setDeleteEmptyLinesMode		687717	0					
ANR	689735	Identifier	formatter		687717	0					
ANR	689736	Identifier	setDeleteEmptyLinesMode		687717	1					
ANR	689737	ArgumentList	true		687717	1					
ANR	689738	Argument	true		687717	0					
ANR	689739	Identifier	true		687717	0					
ANR	689740	ElseStatement	else		687717	0					
ANR	689741	IfStatement	"if ( isOption ( arg , ""E"" , ""fill-empty-lines"" ) )"		687717	0					
ANR	689742	Condition	"isOption ( arg , ""E"" , ""fill-empty-lines"" )"	3014:11:89827:89864	687717	0	True				
ANR	689743	CallExpression	"isOption ( arg , ""E"" , ""fill-empty-lines"" )"		687717	0					
ANR	689744	Callee	isOption		687717	0					
ANR	689745	Identifier	isOption		687717	0					
ANR	689746	ArgumentList	arg		687717	1					
ANR	689747	Argument	arg		687717	0					
ANR	689748	Identifier	arg		687717	0					
ANR	689749	Argument	"""E"""		687717	1					
ANR	689750	PrimaryExpression	"""E"""		687717	0					
ANR	689751	Argument	"""fill-empty-lines"""		687717	2					
ANR	689752	PrimaryExpression	"""fill-empty-lines"""		687717	0					
ANR	689753	CompoundStatement		312:1:8603:8603	687717	1					
ANR	689754	ExpressionStatement	formatter . setEmptyLineFill ( true )	3016:2:89873:89905	687717	0	True				
ANR	689755	CallExpression	formatter . setEmptyLineFill ( true )		687717	0					
ANR	689756	Callee	formatter . setEmptyLineFill		687717	0					
ANR	689757	MemberAccess	formatter . setEmptyLineFill		687717	0					
ANR	689758	Identifier	formatter		687717	0					
ANR	689759	Identifier	setEmptyLineFill		687717	1					
ANR	689760	ArgumentList	true		687717	1					
ANR	689761	Argument	true		687717	0					
ANR	689762	Identifier	true		687717	0					
ANR	689763	ElseStatement	else		687717	0					
ANR	689764	IfStatement	"if ( isOption ( arg , ""c"" , ""convert-tabs"" ) )"		687717	0					
ANR	689765	Condition	"isOption ( arg , ""c"" , ""convert-tabs"" )"	3018:11:89921:89954	687717	0	True				
ANR	689766	CallExpression	"isOption ( arg , ""c"" , ""convert-tabs"" )"		687717	0					
ANR	689767	Callee	isOption		687717	0					
ANR	689768	Identifier	isOption		687717	0					
ANR	689769	ArgumentList	arg		687717	1					
ANR	689770	Argument	arg		687717	0					
ANR	689771	Identifier	arg		687717	0					
ANR	689772	Argument	"""c"""		687717	1					
ANR	689773	PrimaryExpression	"""c"""		687717	0					
ANR	689774	Argument	"""convert-tabs"""		687717	2					
ANR	689775	PrimaryExpression	"""convert-tabs"""		687717	0					
ANR	689776	CompoundStatement		316:1:8693:8693	687717	1					
ANR	689777	ExpressionStatement	formatter . setTabSpaceConversionMode ( true )	3020:2:89963:90004	687717	0	True				
ANR	689778	CallExpression	formatter . setTabSpaceConversionMode ( true )		687717	0					
ANR	689779	Callee	formatter . setTabSpaceConversionMode		687717	0					
ANR	689780	MemberAccess	formatter . setTabSpaceConversionMode		687717	0					
ANR	689781	Identifier	formatter		687717	0					
ANR	689782	Identifier	setTabSpaceConversionMode		687717	1					
ANR	689783	ArgumentList	true		687717	1					
ANR	689784	Argument	true		687717	0					
ANR	689785	Identifier	true		687717	0					
ANR	689786	ElseStatement	else		687717	0					
ANR	689787	IfStatement	"if ( isOption ( arg , ""xy"" , ""close-templates"" ) )"		687717	0					
ANR	689788	Condition	"isOption ( arg , ""xy"" , ""close-templates"" )"	3022:11:90020:90057	687717	0	True				
ANR	689789	CallExpression	"isOption ( arg , ""xy"" , ""close-templates"" )"		687717	0					
ANR	689790	Callee	isOption		687717	0					
ANR	689791	Identifier	isOption		687717	0					
ANR	689792	ArgumentList	arg		687717	1					
ANR	689793	Argument	arg		687717	0					
ANR	689794	Identifier	arg		687717	0					
ANR	689795	Argument	"""xy"""		687717	1					
ANR	689796	PrimaryExpression	"""xy"""		687717	0					
ANR	689797	Argument	"""close-templates"""		687717	2					
ANR	689798	PrimaryExpression	"""close-templates"""		687717	0					
ANR	689799	CompoundStatement		320:1:8796:8796	687717	1					
ANR	689800	ExpressionStatement	formatter . setCloseTemplatesMode ( true )	3024:2:90066:90103	687717	0	True				
ANR	689801	CallExpression	formatter . setCloseTemplatesMode ( true )		687717	0					
ANR	689802	Callee	formatter . setCloseTemplatesMode		687717	0					
ANR	689803	MemberAccess	formatter . setCloseTemplatesMode		687717	0					
ANR	689804	Identifier	formatter		687717	0					
ANR	689805	Identifier	setCloseTemplatesMode		687717	1					
ANR	689806	ArgumentList	true		687717	1					
ANR	689807	Argument	true		687717	0					
ANR	689808	Identifier	true		687717	0					
ANR	689809	ElseStatement	else		687717	0					
ANR	689810	IfStatement	"if ( isOption ( arg , ""F"" , ""break-blocks=all"" ) )"		687717	0					
ANR	689811	Condition	"isOption ( arg , ""F"" , ""break-blocks=all"" )"	3026:11:90119:90156	687717	0	True				
ANR	689812	CallExpression	"isOption ( arg , ""F"" , ""break-blocks=all"" )"		687717	0					
ANR	689813	Callee	isOption		687717	0					
ANR	689814	Identifier	isOption		687717	0					
ANR	689815	ArgumentList	arg		687717	1					
ANR	689816	Argument	arg		687717	0					
ANR	689817	Identifier	arg		687717	0					
ANR	689818	Argument	"""F"""		687717	1					
ANR	689819	PrimaryExpression	"""F"""		687717	0					
ANR	689820	Argument	"""break-blocks=all"""		687717	2					
ANR	689821	PrimaryExpression	"""break-blocks=all"""		687717	0					
ANR	689822	CompoundStatement		324:1:8895:8895	687717	1					
ANR	689823	ExpressionStatement	formatter . setBreakBlocksMode ( true )	3028:2:90165:90199	687717	0	True				
ANR	689824	CallExpression	formatter . setBreakBlocksMode ( true )		687717	0					
ANR	689825	Callee	formatter . setBreakBlocksMode		687717	0					
ANR	689826	MemberAccess	formatter . setBreakBlocksMode		687717	0					
ANR	689827	Identifier	formatter		687717	0					
ANR	689828	Identifier	setBreakBlocksMode		687717	1					
ANR	689829	ArgumentList	true		687717	1					
ANR	689830	Argument	true		687717	0					
ANR	689831	Identifier	true		687717	0					
ANR	689832	ExpressionStatement	formatter . setBreakClosingHeaderBlocksMode ( true )	3029:2:90203:90250	687717	1	True				
ANR	689833	CallExpression	formatter . setBreakClosingHeaderBlocksMode ( true )		687717	0					
ANR	689834	Callee	formatter . setBreakClosingHeaderBlocksMode		687717	0					
ANR	689835	MemberAccess	formatter . setBreakClosingHeaderBlocksMode		687717	0					
ANR	689836	Identifier	formatter		687717	0					
ANR	689837	Identifier	setBreakClosingHeaderBlocksMode		687717	1					
ANR	689838	ArgumentList	true		687717	1					
ANR	689839	Argument	true		687717	0					
ANR	689840	Identifier	true		687717	0					
ANR	689841	ElseStatement	else		687717	0					
ANR	689842	IfStatement	"if ( isOption ( arg , ""f"" , ""break-blocks"" ) )"		687717	0					
ANR	689843	Condition	"isOption ( arg , ""f"" , ""break-blocks"" )"	3031:11:90266:90299	687717	0	True				
ANR	689844	CallExpression	"isOption ( arg , ""f"" , ""break-blocks"" )"		687717	0					
ANR	689845	Callee	isOption		687717	0					
ANR	689846	Identifier	isOption		687717	0					
ANR	689847	ArgumentList	arg		687717	1					
ANR	689848	Argument	arg		687717	0					
ANR	689849	Identifier	arg		687717	0					
ANR	689850	Argument	"""f"""		687717	1					
ANR	689851	PrimaryExpression	"""f"""		687717	0					
ANR	689852	Argument	"""break-blocks"""		687717	2					
ANR	689853	PrimaryExpression	"""break-blocks"""		687717	0					
ANR	689854	CompoundStatement		329:1:9038:9038	687717	1					
ANR	689855	ExpressionStatement	formatter . setBreakBlocksMode ( true )	3033:2:90308:90342	687717	0	True				
ANR	689856	CallExpression	formatter . setBreakBlocksMode ( true )		687717	0					
ANR	689857	Callee	formatter . setBreakBlocksMode		687717	0					
ANR	689858	MemberAccess	formatter . setBreakBlocksMode		687717	0					
ANR	689859	Identifier	formatter		687717	0					
ANR	689860	Identifier	setBreakBlocksMode		687717	1					
ANR	689861	ArgumentList	true		687717	1					
ANR	689862	Argument	true		687717	0					
ANR	689863	Identifier	true		687717	0					
ANR	689864	ElseStatement	else		687717	0					
ANR	689865	IfStatement	"if ( isOption ( arg , ""e"" , ""break-elseifs"" ) )"		687717	0					
ANR	689866	Condition	"isOption ( arg , ""e"" , ""break-elseifs"" )"	3035:11:90358:90392	687717	0	True				
ANR	689867	CallExpression	"isOption ( arg , ""e"" , ""break-elseifs"" )"		687717	0					
ANR	689868	Callee	isOption		687717	0					
ANR	689869	Identifier	isOption		687717	0					
ANR	689870	ArgumentList	arg		687717	1					
ANR	689871	Argument	arg		687717	0					
ANR	689872	Identifier	arg		687717	0					
ANR	689873	Argument	"""e"""		687717	1					
ANR	689874	PrimaryExpression	"""e"""		687717	0					
ANR	689875	Argument	"""break-elseifs"""		687717	2					
ANR	689876	PrimaryExpression	"""break-elseifs"""		687717	0					
ANR	689877	CompoundStatement		333:1:9131:9131	687717	1					
ANR	689878	ExpressionStatement	formatter . setBreakElseIfsMode ( true )	3037:2:90401:90436	687717	0	True				
ANR	689879	CallExpression	formatter . setBreakElseIfsMode ( true )		687717	0					
ANR	689880	Callee	formatter . setBreakElseIfsMode		687717	0					
ANR	689881	MemberAccess	formatter . setBreakElseIfsMode		687717	0					
ANR	689882	Identifier	formatter		687717	0					
ANR	689883	Identifier	setBreakElseIfsMode		687717	1					
ANR	689884	ArgumentList	true		687717	1					
ANR	689885	Argument	true		687717	0					
ANR	689886	Identifier	true		687717	0					
ANR	689887	ElseStatement	else		687717	0					
ANR	689888	IfStatement	"if ( isOption ( arg , ""xb"" , ""break-one-line-headers"" ) )"		687717	0					
ANR	689889	Condition	"isOption ( arg , ""xb"" , ""break-one-line-headers"" )"	3039:11:90452:90496	687717	0	True				
ANR	689890	CallExpression	"isOption ( arg , ""xb"" , ""break-one-line-headers"" )"		687717	0					
ANR	689891	Callee	isOption		687717	0					
ANR	689892	Identifier	isOption		687717	0					
ANR	689893	ArgumentList	arg		687717	1					
ANR	689894	Argument	arg		687717	0					
ANR	689895	Identifier	arg		687717	0					
ANR	689896	Argument	"""xb"""		687717	1					
ANR	689897	PrimaryExpression	"""xb"""		687717	0					
ANR	689898	Argument	"""break-one-line-headers"""		687717	2					
ANR	689899	PrimaryExpression	"""break-one-line-headers"""		687717	0					
ANR	689900	CompoundStatement		337:1:9235:9235	687717	1					
ANR	689901	ExpressionStatement	formatter . setBreakOneLineHeadersMode ( true )	3041:2:90505:90547	687717	0	True				
ANR	689902	CallExpression	formatter . setBreakOneLineHeadersMode ( true )		687717	0					
ANR	689903	Callee	formatter . setBreakOneLineHeadersMode		687717	0					
ANR	689904	MemberAccess	formatter . setBreakOneLineHeadersMode		687717	0					
ANR	689905	Identifier	formatter		687717	0					
ANR	689906	Identifier	setBreakOneLineHeadersMode		687717	1					
ANR	689907	ArgumentList	true		687717	1					
ANR	689908	Argument	true		687717	0					
ANR	689909	Identifier	true		687717	0					
ANR	689910	ElseStatement	else		687717	0					
ANR	689911	IfStatement	"if ( isOption ( arg , ""j"" , ""add-braces"" ) )"		687717	0					
ANR	689912	Condition	"isOption ( arg , ""j"" , ""add-braces"" )"	3043:11:90563:90594	687717	0	True				
ANR	689913	CallExpression	"isOption ( arg , ""j"" , ""add-braces"" )"		687717	0					
ANR	689914	Callee	isOption		687717	0					
ANR	689915	Identifier	isOption		687717	0					
ANR	689916	ArgumentList	arg		687717	1					
ANR	689917	Argument	arg		687717	0					
ANR	689918	Identifier	arg		687717	0					
ANR	689919	Argument	"""j"""		687717	1					
ANR	689920	PrimaryExpression	"""j"""		687717	0					
ANR	689921	Argument	"""add-braces"""		687717	2					
ANR	689922	PrimaryExpression	"""add-braces"""		687717	0					
ANR	689923	CompoundStatement		341:1:9333:9333	687717	1					
ANR	689924	ExpressionStatement	formatter . setAddBracesMode ( true )	3045:2:90603:90635	687717	0	True				
ANR	689925	CallExpression	formatter . setAddBracesMode ( true )		687717	0					
ANR	689926	Callee	formatter . setAddBracesMode		687717	0					
ANR	689927	MemberAccess	formatter . setAddBracesMode		687717	0					
ANR	689928	Identifier	formatter		687717	0					
ANR	689929	Identifier	setAddBracesMode		687717	1					
ANR	689930	ArgumentList	true		687717	1					
ANR	689931	Argument	true		687717	0					
ANR	689932	Identifier	true		687717	0					
ANR	689933	ElseStatement	else		687717	0					
ANR	689934	IfStatement	"if ( isOption ( arg , ""J"" , ""add-one-line-braces"" ) )"		687717	0					
ANR	689935	Condition	"isOption ( arg , ""J"" , ""add-one-line-braces"" )"	3047:11:90651:90691	687717	0	True				
ANR	689936	CallExpression	"isOption ( arg , ""J"" , ""add-one-line-braces"" )"		687717	0					
ANR	689937	Callee	isOption		687717	0					
ANR	689938	Identifier	isOption		687717	0					
ANR	689939	ArgumentList	arg		687717	1					
ANR	689940	Argument	arg		687717	0					
ANR	689941	Identifier	arg		687717	0					
ANR	689942	Argument	"""J"""		687717	1					
ANR	689943	PrimaryExpression	"""J"""		687717	0					
ANR	689944	Argument	"""add-one-line-braces"""		687717	2					
ANR	689945	PrimaryExpression	"""add-one-line-braces"""		687717	0					
ANR	689946	CompoundStatement		345:1:9430:9430	687717	1					
ANR	689947	ExpressionStatement	formatter . setAddOneLineBracesMode ( true )	3049:2:90700:90739	687717	0	True				
ANR	689948	CallExpression	formatter . setAddOneLineBracesMode ( true )		687717	0					
ANR	689949	Callee	formatter . setAddOneLineBracesMode		687717	0					
ANR	689950	MemberAccess	formatter . setAddOneLineBracesMode		687717	0					
ANR	689951	Identifier	formatter		687717	0					
ANR	689952	Identifier	setAddOneLineBracesMode		687717	1					
ANR	689953	ArgumentList	true		687717	1					
ANR	689954	Argument	true		687717	0					
ANR	689955	Identifier	true		687717	0					
ANR	689956	ElseStatement	else		687717	0					
ANR	689957	IfStatement	"if ( isOption ( arg , ""xj"" , ""remove-braces"" ) )"		687717	0					
ANR	689958	Condition	"isOption ( arg , ""xj"" , ""remove-braces"" )"	3051:11:90755:90790	687717	0	True				
ANR	689959	CallExpression	"isOption ( arg , ""xj"" , ""remove-braces"" )"		687717	0					
ANR	689960	Callee	isOption		687717	0					
ANR	689961	Identifier	isOption		687717	0					
ANR	689962	ArgumentList	arg		687717	1					
ANR	689963	Argument	arg		687717	0					
ANR	689964	Identifier	arg		687717	0					
ANR	689965	Argument	"""xj"""		687717	1					
ANR	689966	PrimaryExpression	"""xj"""		687717	0					
ANR	689967	Argument	"""remove-braces"""		687717	2					
ANR	689968	PrimaryExpression	"""remove-braces"""		687717	0					
ANR	689969	CompoundStatement		349:1:9529:9529	687717	1					
ANR	689970	ExpressionStatement	formatter . setRemoveBracesMode ( true )	3053:2:90799:90834	687717	0	True				
ANR	689971	CallExpression	formatter . setRemoveBracesMode ( true )		687717	0					
ANR	689972	Callee	formatter . setRemoveBracesMode		687717	0					
ANR	689973	MemberAccess	formatter . setRemoveBracesMode		687717	0					
ANR	689974	Identifier	formatter		687717	0					
ANR	689975	Identifier	setRemoveBracesMode		687717	1					
ANR	689976	ArgumentList	true		687717	1					
ANR	689977	Argument	true		687717	0					
ANR	689978	Identifier	true		687717	0					
ANR	689979	ElseStatement	else		687717	0					
ANR	689980	IfStatement	"if ( isOption ( arg , ""Y"" , ""indent-col1-comments"" ) )"		687717	0					
ANR	689981	Condition	"isOption ( arg , ""Y"" , ""indent-col1-comments"" )"	3055:11:90850:90891	687717	0	True				
ANR	689982	CallExpression	"isOption ( arg , ""Y"" , ""indent-col1-comments"" )"		687717	0					
ANR	689983	Callee	isOption		687717	0					
ANR	689984	Identifier	isOption		687717	0					
ANR	689985	ArgumentList	arg		687717	1					
ANR	689986	Argument	arg		687717	0					
ANR	689987	Identifier	arg		687717	0					
ANR	689988	Argument	"""Y"""		687717	1					
ANR	689989	PrimaryExpression	"""Y"""		687717	0					
ANR	689990	Argument	"""indent-col1-comments"""		687717	2					
ANR	689991	PrimaryExpression	"""indent-col1-comments"""		687717	0					
ANR	689992	CompoundStatement		353:1:9630:9630	687717	1					
ANR	689993	ExpressionStatement	formatter . setIndentCol1CommentsMode ( true )	3057:2:90900:90941	687717	0	True				
ANR	689994	CallExpression	formatter . setIndentCol1CommentsMode ( true )		687717	0					
ANR	689995	Callee	formatter . setIndentCol1CommentsMode		687717	0					
ANR	689996	MemberAccess	formatter . setIndentCol1CommentsMode		687717	0					
ANR	689997	Identifier	formatter		687717	0					
ANR	689998	Identifier	setIndentCol1CommentsMode		687717	1					
ANR	689999	ArgumentList	true		687717	1					
ANR	690000	Argument	true		687717	0					
ANR	690001	Identifier	true		687717	0					
ANR	690002	ElseStatement	else		687717	0					
ANR	690003	IfStatement	"if ( isOption ( arg , ""align-pointer=type"" ) )"		687717	0					
ANR	690004	Condition	"isOption ( arg , ""align-pointer=type"" )"	3059:11:90957:90991	687717	0	True				
ANR	690005	CallExpression	"isOption ( arg , ""align-pointer=type"" )"		687717	0					
ANR	690006	Callee	isOption		687717	0					
ANR	690007	Identifier	isOption		687717	0					
ANR	690008	ArgumentList	arg		687717	1					
ANR	690009	Argument	arg		687717	0					
ANR	690010	Identifier	arg		687717	0					
ANR	690011	Argument	"""align-pointer=type"""		687717	1					
ANR	690012	PrimaryExpression	"""align-pointer=type"""		687717	0					
ANR	690013	CompoundStatement		357:1:9730:9730	687717	1					
ANR	690014	ExpressionStatement	formatter . setPointerAlignment ( PTR_ALIGN_TYPE )	3061:2:91000:91045	687717	0	True				
ANR	690015	CallExpression	formatter . setPointerAlignment ( PTR_ALIGN_TYPE )		687717	0					
ANR	690016	Callee	formatter . setPointerAlignment		687717	0					
ANR	690017	MemberAccess	formatter . setPointerAlignment		687717	0					
ANR	690018	Identifier	formatter		687717	0					
ANR	690019	Identifier	setPointerAlignment		687717	1					
ANR	690020	ArgumentList	PTR_ALIGN_TYPE		687717	1					
ANR	690021	Argument	PTR_ALIGN_TYPE		687717	0					
ANR	690022	Identifier	PTR_ALIGN_TYPE		687717	0					
ANR	690023	ElseStatement	else		687717	0					
ANR	690024	IfStatement	"if ( isOption ( arg , ""align-pointer=middle"" ) )"		687717	0					
ANR	690025	Condition	"isOption ( arg , ""align-pointer=middle"" )"	3063:11:91061:91097	687717	0	True				
ANR	690026	CallExpression	"isOption ( arg , ""align-pointer=middle"" )"		687717	0					
ANR	690027	Callee	isOption		687717	0					
ANR	690028	Identifier	isOption		687717	0					
ANR	690029	ArgumentList	arg		687717	1					
ANR	690030	Argument	arg		687717	0					
ANR	690031	Identifier	arg		687717	0					
ANR	690032	Argument	"""align-pointer=middle"""		687717	1					
ANR	690033	PrimaryExpression	"""align-pointer=middle"""		687717	0					
ANR	690034	CompoundStatement		361:1:9836:9836	687717	1					
ANR	690035	ExpressionStatement	formatter . setPointerAlignment ( PTR_ALIGN_MIDDLE )	3065:2:91106:91153	687717	0	True				
ANR	690036	CallExpression	formatter . setPointerAlignment ( PTR_ALIGN_MIDDLE )		687717	0					
ANR	690037	Callee	formatter . setPointerAlignment		687717	0					
ANR	690038	MemberAccess	formatter . setPointerAlignment		687717	0					
ANR	690039	Identifier	formatter		687717	0					
ANR	690040	Identifier	setPointerAlignment		687717	1					
ANR	690041	ArgumentList	PTR_ALIGN_MIDDLE		687717	1					
ANR	690042	Argument	PTR_ALIGN_MIDDLE		687717	0					
ANR	690043	Identifier	PTR_ALIGN_MIDDLE		687717	0					
ANR	690044	ElseStatement	else		687717	0					
ANR	690045	IfStatement	"if ( isOption ( arg , ""align-pointer=name"" ) )"		687717	0					
ANR	690046	Condition	"isOption ( arg , ""align-pointer=name"" )"	3067:11:91169:91203	687717	0	True				
ANR	690047	CallExpression	"isOption ( arg , ""align-pointer=name"" )"		687717	0					
ANR	690048	Callee	isOption		687717	0					
ANR	690049	Identifier	isOption		687717	0					
ANR	690050	ArgumentList	arg		687717	1					
ANR	690051	Argument	arg		687717	0					
ANR	690052	Identifier	arg		687717	0					
ANR	690053	Argument	"""align-pointer=name"""		687717	1					
ANR	690054	PrimaryExpression	"""align-pointer=name"""		687717	0					
ANR	690055	CompoundStatement		365:1:9942:9942	687717	1					
ANR	690056	ExpressionStatement	formatter . setPointerAlignment ( PTR_ALIGN_NAME )	3069:2:91212:91257	687717	0	True				
ANR	690057	CallExpression	formatter . setPointerAlignment ( PTR_ALIGN_NAME )		687717	0					
ANR	690058	Callee	formatter . setPointerAlignment		687717	0					
ANR	690059	MemberAccess	formatter . setPointerAlignment		687717	0					
ANR	690060	Identifier	formatter		687717	0					
ANR	690061	Identifier	setPointerAlignment		687717	1					
ANR	690062	ArgumentList	PTR_ALIGN_NAME		687717	1					
ANR	690063	Argument	PTR_ALIGN_NAME		687717	0					
ANR	690064	Identifier	PTR_ALIGN_NAME		687717	0					
ANR	690065	ElseStatement	else		687717	0					
ANR	690066	IfStatement	"if ( isParamOption ( arg , ""k"" ) )"		687717	0					
ANR	690067	Condition	"isParamOption ( arg , ""k"" )"	3071:11:91273:91295	687717	0	True				
ANR	690068	CallExpression	"isParamOption ( arg , ""k"" )"		687717	0					
ANR	690069	Callee	isParamOption		687717	0					
ANR	690070	Identifier	isParamOption		687717	0					
ANR	690071	ArgumentList	arg		687717	1					
ANR	690072	Argument	arg		687717	0					
ANR	690073	Identifier	arg		687717	0					
ANR	690074	Argument	"""k"""		687717	1					
ANR	690075	PrimaryExpression	"""k"""		687717	0					
ANR	690076	CompoundStatement		371:2:10055:10093	687717	1					
ANR	690077	IdentifierDeclStatement	int align = 0 ;	3073:2:91304:91317	687717	0	True				
ANR	690078	IdentifierDecl	align = 0		687717	0					
ANR	690079	IdentifierDeclType	int		687717	0					
ANR	690080	Identifier	align		687717	1					
ANR	690081	AssignmentExpression	align = 0		687717	2		=			
ANR	690082	Identifier	align		687717	0					
ANR	690083	PrimaryExpression	0		687717	1					
ANR	690084	IdentifierDeclStatement	"string styleParam = getParam ( arg , ""k"" ) ;"	3074:2:91321:91359	687717	1	True				
ANR	690085	IdentifierDecl	"styleParam = getParam ( arg , ""k"" )"		687717	0					
ANR	690086	IdentifierDeclType	string		687717	0					
ANR	690087	Identifier	styleParam		687717	1					
ANR	690088	AssignmentExpression	"styleParam = getParam ( arg , ""k"" )"		687717	2		=			
ANR	690089	Identifier	styleParam		687717	0					
ANR	690090	CallExpression	"getParam ( arg , ""k"" )"		687717	1					
ANR	690091	Callee	getParam		687717	0					
ANR	690092	Identifier	getParam		687717	0					
ANR	690093	ArgumentList	arg		687717	1					
ANR	690094	Argument	arg		687717	0					
ANR	690095	Identifier	arg		687717	0					
ANR	690096	Argument	"""k"""		687717	1					
ANR	690097	PrimaryExpression	"""k"""		687717	0					
ANR	690098	IfStatement	if ( styleParam . length ( ) > 0 )		687717	2					
ANR	690099	Condition	styleParam . length ( ) > 0	3075:6:91367:91389	687717	0	True				
ANR	690100	RelationalExpression	styleParam . length ( ) > 0		687717	0		>			
ANR	690101	CallExpression	styleParam . length ( )		687717	0					
ANR	690102	Callee	styleParam . length		687717	0					
ANR	690103	MemberAccess	styleParam . length		687717	0					
ANR	690104	Identifier	styleParam		687717	0					
ANR	690105	Identifier	length		687717	1					
ANR	690106	ArgumentList			687717	1					
ANR	690107	PrimaryExpression	0		687717	1					
ANR	690108	ExpressionStatement	align = atoi ( styleParam . c_str ( ) )	3076:3:91395:91427	687717	1	True				
ANR	690109	AssignmentExpression	align = atoi ( styleParam . c_str ( ) )		687717	0		=			
ANR	690110	Identifier	align		687717	0					
ANR	690111	CallExpression	atoi ( styleParam . c_str ( ) )		687717	1					
ANR	690112	Callee	atoi		687717	0					
ANR	690113	Identifier	atoi		687717	0					
ANR	690114	ArgumentList	styleParam . c_str ( )		687717	1					
ANR	690115	Argument	styleParam . c_str ( )		687717	0					
ANR	690116	CallExpression	styleParam . c_str ( )		687717	0					
ANR	690117	Callee	styleParam . c_str		687717	0					
ANR	690118	MemberAccess	styleParam . c_str		687717	0					
ANR	690119	Identifier	styleParam		687717	0					
ANR	690120	Identifier	c_str		687717	1					
ANR	690121	ArgumentList			687717	1					
ANR	690122	IfStatement	if ( align < 1 || align > 3 )		687717	3					
ANR	690123	Condition	align < 1 || align > 3	3077:6:91435:91456	687717	0	True				
ANR	690124	OrExpression	align < 1 || align > 3		687717	0		||			
ANR	690125	RelationalExpression	align < 1		687717	0		<			
ANR	690126	Identifier	align		687717	0					
ANR	690127	PrimaryExpression	1		687717	1					
ANR	690128	RelationalExpression	align > 3		687717	1		>			
ANR	690129	Identifier	align		687717	0					
ANR	690130	PrimaryExpression	3		687717	1					
ANR	690131	ExpressionStatement	"isOptionError ( arg , errorInfo )"	3078:3:91462:91491	687717	1	True				
ANR	690132	CallExpression	"isOptionError ( arg , errorInfo )"		687717	0					
ANR	690133	Callee	isOptionError		687717	0					
ANR	690134	Identifier	isOptionError		687717	0					
ANR	690135	ArgumentList	arg		687717	1					
ANR	690136	Argument	arg		687717	0					
ANR	690137	Identifier	arg		687717	0					
ANR	690138	Argument	errorInfo		687717	1					
ANR	690139	Identifier	errorInfo		687717	0					
ANR	690140	ElseStatement	else		687717	0					
ANR	690141	IfStatement	if ( align == 1 )		687717	0					
ANR	690142	Condition	align == 1	3079:11:91504:91513	687717	0	True				
ANR	690143	EqualityExpression	align == 1		687717	0		==			
ANR	690144	Identifier	align		687717	0					
ANR	690145	PrimaryExpression	1		687717	1					
ANR	690146	ExpressionStatement	formatter . setPointerAlignment ( PTR_ALIGN_TYPE )	3080:3:91519:91564	687717	1	True				
ANR	690147	CallExpression	formatter . setPointerAlignment ( PTR_ALIGN_TYPE )		687717	0					
ANR	690148	Callee	formatter . setPointerAlignment		687717	0					
ANR	690149	MemberAccess	formatter . setPointerAlignment		687717	0					
ANR	690150	Identifier	formatter		687717	0					
ANR	690151	Identifier	setPointerAlignment		687717	1					
ANR	690152	ArgumentList	PTR_ALIGN_TYPE		687717	1					
ANR	690153	Argument	PTR_ALIGN_TYPE		687717	0					
ANR	690154	Identifier	PTR_ALIGN_TYPE		687717	0					
ANR	690155	ElseStatement	else		687717	0					
ANR	690156	IfStatement	if ( align == 2 )		687717	0					
ANR	690157	Condition	align == 2	3081:11:91577:91586	687717	0	True				
ANR	690158	EqualityExpression	align == 2		687717	0		==			
ANR	690159	Identifier	align		687717	0					
ANR	690160	PrimaryExpression	2		687717	1					
ANR	690161	ExpressionStatement	formatter . setPointerAlignment ( PTR_ALIGN_MIDDLE )	3082:3:91592:91639	687717	1	True				
ANR	690162	CallExpression	formatter . setPointerAlignment ( PTR_ALIGN_MIDDLE )		687717	0					
ANR	690163	Callee	formatter . setPointerAlignment		687717	0					
ANR	690164	MemberAccess	formatter . setPointerAlignment		687717	0					
ANR	690165	Identifier	formatter		687717	0					
ANR	690166	Identifier	setPointerAlignment		687717	1					
ANR	690167	ArgumentList	PTR_ALIGN_MIDDLE		687717	1					
ANR	690168	Argument	PTR_ALIGN_MIDDLE		687717	0					
ANR	690169	Identifier	PTR_ALIGN_MIDDLE		687717	0					
ANR	690170	ElseStatement	else		687717	0					
ANR	690171	IfStatement	if ( align == 3 )		687717	0					
ANR	690172	Condition	align == 3	3083:11:91652:91661	687717	0	True				
ANR	690173	EqualityExpression	align == 3		687717	0		==			
ANR	690174	Identifier	align		687717	0					
ANR	690175	PrimaryExpression	3		687717	1					
ANR	690176	ExpressionStatement	formatter . setPointerAlignment ( PTR_ALIGN_NAME )	3084:3:91667:91712	687717	1	True				
ANR	690177	CallExpression	formatter . setPointerAlignment ( PTR_ALIGN_NAME )		687717	0					
ANR	690178	Callee	formatter . setPointerAlignment		687717	0					
ANR	690179	MemberAccess	formatter . setPointerAlignment		687717	0					
ANR	690180	Identifier	formatter		687717	0					
ANR	690181	Identifier	setPointerAlignment		687717	1					
ANR	690182	ArgumentList	PTR_ALIGN_NAME		687717	1					
ANR	690183	Argument	PTR_ALIGN_NAME		687717	0					
ANR	690184	Identifier	PTR_ALIGN_NAME		687717	0					
ANR	690185	ElseStatement	else		687717	0					
ANR	690186	IfStatement	"if ( isOption ( arg , ""align-reference=none"" ) )"		687717	0					
ANR	690187	Condition	"isOption ( arg , ""align-reference=none"" )"	3086:11:91728:91764	687717	0	True				
ANR	690188	CallExpression	"isOption ( arg , ""align-reference=none"" )"		687717	0					
ANR	690189	Callee	isOption		687717	0					
ANR	690190	Identifier	isOption		687717	0					
ANR	690191	ArgumentList	arg		687717	1					
ANR	690192	Argument	arg		687717	0					
ANR	690193	Identifier	arg		687717	0					
ANR	690194	Argument	"""align-reference=none"""		687717	1					
ANR	690195	PrimaryExpression	"""align-reference=none"""		687717	0					
ANR	690196	CompoundStatement		384:1:10503:10503	687717	1					
ANR	690197	ExpressionStatement	formatter . setReferenceAlignment ( REF_ALIGN_NONE )	3088:2:91773:91820	687717	0	True				
ANR	690198	CallExpression	formatter . setReferenceAlignment ( REF_ALIGN_NONE )		687717	0					
ANR	690199	Callee	formatter . setReferenceAlignment		687717	0					
ANR	690200	MemberAccess	formatter . setReferenceAlignment		687717	0					
ANR	690201	Identifier	formatter		687717	0					
ANR	690202	Identifier	setReferenceAlignment		687717	1					
ANR	690203	ArgumentList	REF_ALIGN_NONE		687717	1					
ANR	690204	Argument	REF_ALIGN_NONE		687717	0					
ANR	690205	Identifier	REF_ALIGN_NONE		687717	0					
ANR	690206	ElseStatement	else		687717	0					
ANR	690207	IfStatement	"if ( isOption ( arg , ""align-reference=type"" ) )"		687717	0					
ANR	690208	Condition	"isOption ( arg , ""align-reference=type"" )"	3090:11:91836:91872	687717	0	True				
ANR	690209	CallExpression	"isOption ( arg , ""align-reference=type"" )"		687717	0					
ANR	690210	Callee	isOption		687717	0					
ANR	690211	Identifier	isOption		687717	0					
ANR	690212	ArgumentList	arg		687717	1					
ANR	690213	Argument	arg		687717	0					
ANR	690214	Identifier	arg		687717	0					
ANR	690215	Argument	"""align-reference=type"""		687717	1					
ANR	690216	PrimaryExpression	"""align-reference=type"""		687717	0					
ANR	690217	CompoundStatement		388:1:10611:10611	687717	1					
ANR	690218	ExpressionStatement	formatter . setReferenceAlignment ( REF_ALIGN_TYPE )	3092:2:91881:91928	687717	0	True				
ANR	690219	CallExpression	formatter . setReferenceAlignment ( REF_ALIGN_TYPE )		687717	0					
ANR	690220	Callee	formatter . setReferenceAlignment		687717	0					
ANR	690221	MemberAccess	formatter . setReferenceAlignment		687717	0					
ANR	690222	Identifier	formatter		687717	0					
ANR	690223	Identifier	setReferenceAlignment		687717	1					
ANR	690224	ArgumentList	REF_ALIGN_TYPE		687717	1					
ANR	690225	Argument	REF_ALIGN_TYPE		687717	0					
ANR	690226	Identifier	REF_ALIGN_TYPE		687717	0					
ANR	690227	ElseStatement	else		687717	0					
ANR	690228	IfStatement	"if ( isOption ( arg , ""align-reference=middle"" ) )"		687717	0					
ANR	690229	Condition	"isOption ( arg , ""align-reference=middle"" )"	3094:11:91944:91982	687717	0	True				
ANR	690230	CallExpression	"isOption ( arg , ""align-reference=middle"" )"		687717	0					
ANR	690231	Callee	isOption		687717	0					
ANR	690232	Identifier	isOption		687717	0					
ANR	690233	ArgumentList	arg		687717	1					
ANR	690234	Argument	arg		687717	0					
ANR	690235	Identifier	arg		687717	0					
ANR	690236	Argument	"""align-reference=middle"""		687717	1					
ANR	690237	PrimaryExpression	"""align-reference=middle"""		687717	0					
ANR	690238	CompoundStatement		392:1:10721:10721	687717	1					
ANR	690239	ExpressionStatement	formatter . setReferenceAlignment ( REF_ALIGN_MIDDLE )	3096:2:91991:92040	687717	0	True				
ANR	690240	CallExpression	formatter . setReferenceAlignment ( REF_ALIGN_MIDDLE )		687717	0					
ANR	690241	Callee	formatter . setReferenceAlignment		687717	0					
ANR	690242	MemberAccess	formatter . setReferenceAlignment		687717	0					
ANR	690243	Identifier	formatter		687717	0					
ANR	690244	Identifier	setReferenceAlignment		687717	1					
ANR	690245	ArgumentList	REF_ALIGN_MIDDLE		687717	1					
ANR	690246	Argument	REF_ALIGN_MIDDLE		687717	0					
ANR	690247	Identifier	REF_ALIGN_MIDDLE		687717	0					
ANR	690248	ElseStatement	else		687717	0					
ANR	690249	IfStatement	"if ( isOption ( arg , ""align-reference=name"" ) )"		687717	0					
ANR	690250	Condition	"isOption ( arg , ""align-reference=name"" )"	3098:11:92056:92092	687717	0	True				
ANR	690251	CallExpression	"isOption ( arg , ""align-reference=name"" )"		687717	0					
ANR	690252	Callee	isOption		687717	0					
ANR	690253	Identifier	isOption		687717	0					
ANR	690254	ArgumentList	arg		687717	1					
ANR	690255	Argument	arg		687717	0					
ANR	690256	Identifier	arg		687717	0					
ANR	690257	Argument	"""align-reference=name"""		687717	1					
ANR	690258	PrimaryExpression	"""align-reference=name"""		687717	0					
ANR	690259	CompoundStatement		396:1:10831:10831	687717	1					
ANR	690260	ExpressionStatement	formatter . setReferenceAlignment ( REF_ALIGN_NAME )	3100:2:92101:92148	687717	0	True				
ANR	690261	CallExpression	formatter . setReferenceAlignment ( REF_ALIGN_NAME )		687717	0					
ANR	690262	Callee	formatter . setReferenceAlignment		687717	0					
ANR	690263	MemberAccess	formatter . setReferenceAlignment		687717	0					
ANR	690264	Identifier	formatter		687717	0					
ANR	690265	Identifier	setReferenceAlignment		687717	1					
ANR	690266	ArgumentList	REF_ALIGN_NAME		687717	1					
ANR	690267	Argument	REF_ALIGN_NAME		687717	0					
ANR	690268	Identifier	REF_ALIGN_NAME		687717	0					
ANR	690269	ElseStatement	else		687717	0					
ANR	690270	IfStatement	"if ( isParamOption ( arg , ""W"" ) )"		687717	0					
ANR	690271	Condition	"isParamOption ( arg , ""W"" )"	3102:11:92164:92186	687717	0	True				
ANR	690272	CallExpression	"isParamOption ( arg , ""W"" )"		687717	0					
ANR	690273	Callee	isParamOption		687717	0					
ANR	690274	Identifier	isParamOption		687717	0					
ANR	690275	ArgumentList	arg		687717	1					
ANR	690276	Argument	arg		687717	0					
ANR	690277	Identifier	arg		687717	0					
ANR	690278	Argument	"""W"""		687717	1					
ANR	690279	PrimaryExpression	"""W"""		687717	0					
ANR	690280	CompoundStatement		402:2:10946:10984	687717	1					
ANR	690281	IdentifierDeclStatement	int align = 0 ;	3104:2:92195:92208	687717	0	True				
ANR	690282	IdentifierDecl	align = 0		687717	0					
ANR	690283	IdentifierDeclType	int		687717	0					
ANR	690284	Identifier	align		687717	1					
ANR	690285	AssignmentExpression	align = 0		687717	2		=			
ANR	690286	Identifier	align		687717	0					
ANR	690287	PrimaryExpression	0		687717	1					
ANR	690288	IdentifierDeclStatement	"string styleParam = getParam ( arg , ""W"" ) ;"	3105:2:92212:92250	687717	1	True				
ANR	690289	IdentifierDecl	"styleParam = getParam ( arg , ""W"" )"		687717	0					
ANR	690290	IdentifierDeclType	string		687717	0					
ANR	690291	Identifier	styleParam		687717	1					
ANR	690292	AssignmentExpression	"styleParam = getParam ( arg , ""W"" )"		687717	2		=			
ANR	690293	Identifier	styleParam		687717	0					
ANR	690294	CallExpression	"getParam ( arg , ""W"" )"		687717	1					
ANR	690295	Callee	getParam		687717	0					
ANR	690296	Identifier	getParam		687717	0					
ANR	690297	ArgumentList	arg		687717	1					
ANR	690298	Argument	arg		687717	0					
ANR	690299	Identifier	arg		687717	0					
ANR	690300	Argument	"""W"""		687717	1					
ANR	690301	PrimaryExpression	"""W"""		687717	0					
ANR	690302	IfStatement	if ( styleParam . length ( ) > 0 )		687717	2					
ANR	690303	Condition	styleParam . length ( ) > 0	3106:6:92258:92280	687717	0	True				
ANR	690304	RelationalExpression	styleParam . length ( ) > 0		687717	0		>			
ANR	690305	CallExpression	styleParam . length ( )		687717	0					
ANR	690306	Callee	styleParam . length		687717	0					
ANR	690307	MemberAccess	styleParam . length		687717	0					
ANR	690308	Identifier	styleParam		687717	0					
ANR	690309	Identifier	length		687717	1					
ANR	690310	ArgumentList			687717	1					
ANR	690311	PrimaryExpression	0		687717	1					
ANR	690312	ExpressionStatement	align = atoi ( styleParam . c_str ( ) )	3107:3:92286:92318	687717	1	True				
ANR	690313	AssignmentExpression	align = atoi ( styleParam . c_str ( ) )		687717	0		=			
ANR	690314	Identifier	align		687717	0					
ANR	690315	CallExpression	atoi ( styleParam . c_str ( ) )		687717	1					
ANR	690316	Callee	atoi		687717	0					
ANR	690317	Identifier	atoi		687717	0					
ANR	690318	ArgumentList	styleParam . c_str ( )		687717	1					
ANR	690319	Argument	styleParam . c_str ( )		687717	0					
ANR	690320	CallExpression	styleParam . c_str ( )		687717	0					
ANR	690321	Callee	styleParam . c_str		687717	0					
ANR	690322	MemberAccess	styleParam . c_str		687717	0					
ANR	690323	Identifier	styleParam		687717	0					
ANR	690324	Identifier	c_str		687717	1					
ANR	690325	ArgumentList			687717	1					
ANR	690326	IfStatement	if ( align < 0 || align > 3 )		687717	3					
ANR	690327	Condition	align < 0 || align > 3	3108:6:92326:92347	687717	0	True				
ANR	690328	OrExpression	align < 0 || align > 3		687717	0		||			
ANR	690329	RelationalExpression	align < 0		687717	0		<			
ANR	690330	Identifier	align		687717	0					
ANR	690331	PrimaryExpression	0		687717	1					
ANR	690332	RelationalExpression	align > 3		687717	1		>			
ANR	690333	Identifier	align		687717	0					
ANR	690334	PrimaryExpression	3		687717	1					
ANR	690335	ExpressionStatement	"isOptionError ( arg , errorInfo )"	3109:3:92353:92382	687717	1	True				
ANR	690336	CallExpression	"isOptionError ( arg , errorInfo )"		687717	0					
ANR	690337	Callee	isOptionError		687717	0					
ANR	690338	Identifier	isOptionError		687717	0					
ANR	690339	ArgumentList	arg		687717	1					
ANR	690340	Argument	arg		687717	0					
ANR	690341	Identifier	arg		687717	0					
ANR	690342	Argument	errorInfo		687717	1					
ANR	690343	Identifier	errorInfo		687717	0					
ANR	690344	ElseStatement	else		687717	0					
ANR	690345	IfStatement	if ( align == 0 )		687717	0					
ANR	690346	Condition	align == 0	3110:11:92395:92404	687717	0	True				
ANR	690347	EqualityExpression	align == 0		687717	0		==			
ANR	690348	Identifier	align		687717	0					
ANR	690349	PrimaryExpression	0		687717	1					
ANR	690350	ExpressionStatement	formatter . setReferenceAlignment ( REF_ALIGN_NONE )	3111:3:92410:92457	687717	1	True				
ANR	690351	CallExpression	formatter . setReferenceAlignment ( REF_ALIGN_NONE )		687717	0					
ANR	690352	Callee	formatter . setReferenceAlignment		687717	0					
ANR	690353	MemberAccess	formatter . setReferenceAlignment		687717	0					
ANR	690354	Identifier	formatter		687717	0					
ANR	690355	Identifier	setReferenceAlignment		687717	1					
ANR	690356	ArgumentList	REF_ALIGN_NONE		687717	1					
ANR	690357	Argument	REF_ALIGN_NONE		687717	0					
ANR	690358	Identifier	REF_ALIGN_NONE		687717	0					
ANR	690359	ElseStatement	else		687717	0					
ANR	690360	IfStatement	if ( align == 1 )		687717	0					
ANR	690361	Condition	align == 1	3112:11:92470:92479	687717	0	True				
ANR	690362	EqualityExpression	align == 1		687717	0		==			
ANR	690363	Identifier	align		687717	0					
ANR	690364	PrimaryExpression	1		687717	1					
ANR	690365	ExpressionStatement	formatter . setReferenceAlignment ( REF_ALIGN_TYPE )	3113:3:92485:92532	687717	1	True				
ANR	690366	CallExpression	formatter . setReferenceAlignment ( REF_ALIGN_TYPE )		687717	0					
ANR	690367	Callee	formatter . setReferenceAlignment		687717	0					
ANR	690368	MemberAccess	formatter . setReferenceAlignment		687717	0					
ANR	690369	Identifier	formatter		687717	0					
ANR	690370	Identifier	setReferenceAlignment		687717	1					
ANR	690371	ArgumentList	REF_ALIGN_TYPE		687717	1					
ANR	690372	Argument	REF_ALIGN_TYPE		687717	0					
ANR	690373	Identifier	REF_ALIGN_TYPE		687717	0					
ANR	690374	ElseStatement	else		687717	0					
ANR	690375	IfStatement	if ( align == 2 )		687717	0					
ANR	690376	Condition	align == 2	3114:11:92545:92554	687717	0	True				
ANR	690377	EqualityExpression	align == 2		687717	0		==			
ANR	690378	Identifier	align		687717	0					
ANR	690379	PrimaryExpression	2		687717	1					
ANR	690380	ExpressionStatement	formatter . setReferenceAlignment ( REF_ALIGN_MIDDLE )	3115:3:92560:92609	687717	1	True				
ANR	690381	CallExpression	formatter . setReferenceAlignment ( REF_ALIGN_MIDDLE )		687717	0					
ANR	690382	Callee	formatter . setReferenceAlignment		687717	0					
ANR	690383	MemberAccess	formatter . setReferenceAlignment		687717	0					
ANR	690384	Identifier	formatter		687717	0					
ANR	690385	Identifier	setReferenceAlignment		687717	1					
ANR	690386	ArgumentList	REF_ALIGN_MIDDLE		687717	1					
ANR	690387	Argument	REF_ALIGN_MIDDLE		687717	0					
ANR	690388	Identifier	REF_ALIGN_MIDDLE		687717	0					
ANR	690389	ElseStatement	else		687717	0					
ANR	690390	IfStatement	if ( align == 3 )		687717	0					
ANR	690391	Condition	align == 3	3116:11:92622:92631	687717	0	True				
ANR	690392	EqualityExpression	align == 3		687717	0		==			
ANR	690393	Identifier	align		687717	0					
ANR	690394	PrimaryExpression	3		687717	1					
ANR	690395	ExpressionStatement	formatter . setReferenceAlignment ( REF_ALIGN_NAME )	3117:3:92637:92684	687717	1	True				
ANR	690396	CallExpression	formatter . setReferenceAlignment ( REF_ALIGN_NAME )		687717	0					
ANR	690397	Callee	formatter . setReferenceAlignment		687717	0					
ANR	690398	MemberAccess	formatter . setReferenceAlignment		687717	0					
ANR	690399	Identifier	formatter		687717	0					
ANR	690400	Identifier	setReferenceAlignment		687717	1					
ANR	690401	ArgumentList	REF_ALIGN_NAME		687717	1					
ANR	690402	Argument	REF_ALIGN_NAME		687717	0					
ANR	690403	Identifier	REF_ALIGN_NAME		687717	0					
ANR	690404	ElseStatement	else		687717	0					
ANR	690405	IfStatement	"if ( isParamOption ( arg , ""max-code-length="" ) )"		687717	0					
ANR	690406	Condition	"isParamOption ( arg , ""max-code-length="" )"	3119:11:92700:92737	687717	0	True				
ANR	690407	CallExpression	"isParamOption ( arg , ""max-code-length="" )"		687717	0					
ANR	690408	Callee	isParamOption		687717	0					
ANR	690409	Identifier	isParamOption		687717	0					
ANR	690410	ArgumentList	arg		687717	1					
ANR	690411	Argument	arg		687717	0					
ANR	690412	Identifier	arg		687717	0					
ANR	690413	Argument	"""max-code-length="""		687717	1					
ANR	690414	PrimaryExpression	"""max-code-length="""		687717	0					
ANR	690415	CompoundStatement		419:2:11502:11559	687717	1					
ANR	690416	IdentifierDeclStatement	int maxLength = 50 ;	3121:2:92746:92764	687717	0	True				
ANR	690417	IdentifierDecl	maxLength = 50		687717	0					
ANR	690418	IdentifierDeclType	int		687717	0					
ANR	690419	Identifier	maxLength		687717	1					
ANR	690420	AssignmentExpression	maxLength = 50		687717	2		=			
ANR	690421	Identifier	maxLength		687717	0					
ANR	690422	PrimaryExpression	50		687717	1					
ANR	690423	IdentifierDeclStatement	"string maxLengthParam = getParam ( arg , ""max-code-length="" ) ;"	3122:2:92768:92825	687717	1	True				
ANR	690424	IdentifierDecl	"maxLengthParam = getParam ( arg , ""max-code-length="" )"		687717	0					
ANR	690425	IdentifierDeclType	string		687717	0					
ANR	690426	Identifier	maxLengthParam		687717	1					
ANR	690427	AssignmentExpression	"maxLengthParam = getParam ( arg , ""max-code-length="" )"		687717	2		=			
ANR	690428	Identifier	maxLengthParam		687717	0					
ANR	690429	CallExpression	"getParam ( arg , ""max-code-length="" )"		687717	1					
ANR	690430	Callee	getParam		687717	0					
ANR	690431	Identifier	getParam		687717	0					
ANR	690432	ArgumentList	arg		687717	1					
ANR	690433	Argument	arg		687717	0					
ANR	690434	Identifier	arg		687717	0					
ANR	690435	Argument	"""max-code-length="""		687717	1					
ANR	690436	PrimaryExpression	"""max-code-length="""		687717	0					
ANR	690437	IfStatement	if ( maxLengthParam . length ( ) > 0 )		687717	2					
ANR	690438	Condition	maxLengthParam . length ( ) > 0	3123:6:92833:92859	687717	0	True				
ANR	690439	RelationalExpression	maxLengthParam . length ( ) > 0		687717	0		>			
ANR	690440	CallExpression	maxLengthParam . length ( )		687717	0					
ANR	690441	Callee	maxLengthParam . length		687717	0					
ANR	690442	MemberAccess	maxLengthParam . length		687717	0					
ANR	690443	Identifier	maxLengthParam		687717	0					
ANR	690444	Identifier	length		687717	1					
ANR	690445	ArgumentList			687717	1					
ANR	690446	PrimaryExpression	0		687717	1					
ANR	690447	ExpressionStatement	maxLength = atoi ( maxLengthParam . c_str ( ) )	3124:3:92865:92905	687717	1	True				
ANR	690448	AssignmentExpression	maxLength = atoi ( maxLengthParam . c_str ( ) )		687717	0		=			
ANR	690449	Identifier	maxLength		687717	0					
ANR	690450	CallExpression	atoi ( maxLengthParam . c_str ( ) )		687717	1					
ANR	690451	Callee	atoi		687717	0					
ANR	690452	Identifier	atoi		687717	0					
ANR	690453	ArgumentList	maxLengthParam . c_str ( )		687717	1					
ANR	690454	Argument	maxLengthParam . c_str ( )		687717	0					
ANR	690455	CallExpression	maxLengthParam . c_str ( )		687717	0					
ANR	690456	Callee	maxLengthParam . c_str		687717	0					
ANR	690457	MemberAccess	maxLengthParam . c_str		687717	0					
ANR	690458	Identifier	maxLengthParam		687717	0					
ANR	690459	Identifier	c_str		687717	1					
ANR	690460	ArgumentList			687717	1					
ANR	690461	IfStatement	if ( maxLength < 50 )		687717	3					
ANR	690462	Condition	maxLength < 50	3125:6:92913:92926	687717	0	True				
ANR	690463	RelationalExpression	maxLength < 50		687717	0		<			
ANR	690464	Identifier	maxLength		687717	0					
ANR	690465	PrimaryExpression	50		687717	1					
ANR	690466	ExpressionStatement	"isOptionError ( arg , errorInfo )"	3126:3:92932:92961	687717	1	True				
ANR	690467	CallExpression	"isOptionError ( arg , errorInfo )"		687717	0					
ANR	690468	Callee	isOptionError		687717	0					
ANR	690469	Identifier	isOptionError		687717	0					
ANR	690470	ArgumentList	arg		687717	1					
ANR	690471	Argument	arg		687717	0					
ANR	690472	Identifier	arg		687717	0					
ANR	690473	Argument	errorInfo		687717	1					
ANR	690474	Identifier	errorInfo		687717	0					
ANR	690475	ElseStatement	else		687717	0					
ANR	690476	IfStatement	if ( maxLength > 200 )		687717	0					
ANR	690477	Condition	maxLength > 200	3127:11:92974:92988	687717	0	True				
ANR	690478	RelationalExpression	maxLength > 200		687717	0		>			
ANR	690479	Identifier	maxLength		687717	0					
ANR	690480	PrimaryExpression	200		687717	1					
ANR	690481	ExpressionStatement	"isOptionError ( arg , errorInfo )"	3128:3:92994:93023	687717	1	True				
ANR	690482	CallExpression	"isOptionError ( arg , errorInfo )"		687717	0					
ANR	690483	Callee	isOptionError		687717	0					
ANR	690484	Identifier	isOptionError		687717	0					
ANR	690485	ArgumentList	arg		687717	1					
ANR	690486	Argument	arg		687717	0					
ANR	690487	Identifier	arg		687717	0					
ANR	690488	Argument	errorInfo		687717	1					
ANR	690489	Identifier	errorInfo		687717	0					
ANR	690490	ElseStatement	else		687717	0					
ANR	690491	ExpressionStatement	formatter . setMaxCodeLength ( maxLength )	3130:3:93035:93072	687717	0	True				
ANR	690492	CallExpression	formatter . setMaxCodeLength ( maxLength )		687717	0					
ANR	690493	Callee	formatter . setMaxCodeLength		687717	0					
ANR	690494	MemberAccess	formatter . setMaxCodeLength		687717	0					
ANR	690495	Identifier	formatter		687717	0					
ANR	690496	Identifier	setMaxCodeLength		687717	1					
ANR	690497	ArgumentList	maxLength		687717	1					
ANR	690498	Argument	maxLength		687717	0					
ANR	690499	Identifier	maxLength		687717	0					
ANR	690500	ElseStatement	else		687717	0					
ANR	690501	IfStatement	"if ( isParamOption ( arg , ""xC"" ) )"		687717	0					
ANR	690502	Condition	"isParamOption ( arg , ""xC"" )"	3132:11:93088:93111	687717	0	True				
ANR	690503	CallExpression	"isParamOption ( arg , ""xC"" )"		687717	0					
ANR	690504	Callee	isParamOption		687717	0					
ANR	690505	Identifier	isParamOption		687717	0					
ANR	690506	ArgumentList	arg		687717	1					
ANR	690507	Argument	arg		687717	0					
ANR	690508	Identifier	arg		687717	0					
ANR	690509	Argument	"""xC"""		687717	1					
ANR	690510	PrimaryExpression	"""xC"""		687717	0					
ANR	690511	CompoundStatement		432:2:11876:11919	687717	1					
ANR	690512	IdentifierDeclStatement	int maxLength = 50 ;	3134:2:93120:93138	687717	0	True				
ANR	690513	IdentifierDecl	maxLength = 50		687717	0					
ANR	690514	IdentifierDeclType	int		687717	0					
ANR	690515	Identifier	maxLength		687717	1					
ANR	690516	AssignmentExpression	maxLength = 50		687717	2		=			
ANR	690517	Identifier	maxLength		687717	0					
ANR	690518	PrimaryExpression	50		687717	1					
ANR	690519	IdentifierDeclStatement	"string maxLengthParam = getParam ( arg , ""xC"" ) ;"	3135:2:93142:93185	687717	1	True				
ANR	690520	IdentifierDecl	"maxLengthParam = getParam ( arg , ""xC"" )"		687717	0					
ANR	690521	IdentifierDeclType	string		687717	0					
ANR	690522	Identifier	maxLengthParam		687717	1					
ANR	690523	AssignmentExpression	"maxLengthParam = getParam ( arg , ""xC"" )"		687717	2		=			
ANR	690524	Identifier	maxLengthParam		687717	0					
ANR	690525	CallExpression	"getParam ( arg , ""xC"" )"		687717	1					
ANR	690526	Callee	getParam		687717	0					
ANR	690527	Identifier	getParam		687717	0					
ANR	690528	ArgumentList	arg		687717	1					
ANR	690529	Argument	arg		687717	0					
ANR	690530	Identifier	arg		687717	0					
ANR	690531	Argument	"""xC"""		687717	1					
ANR	690532	PrimaryExpression	"""xC"""		687717	0					
ANR	690533	IfStatement	if ( maxLengthParam . length ( ) > 0 )		687717	2					
ANR	690534	Condition	maxLengthParam . length ( ) > 0	3136:6:93193:93219	687717	0	True				
ANR	690535	RelationalExpression	maxLengthParam . length ( ) > 0		687717	0		>			
ANR	690536	CallExpression	maxLengthParam . length ( )		687717	0					
ANR	690537	Callee	maxLengthParam . length		687717	0					
ANR	690538	MemberAccess	maxLengthParam . length		687717	0					
ANR	690539	Identifier	maxLengthParam		687717	0					
ANR	690540	Identifier	length		687717	1					
ANR	690541	ArgumentList			687717	1					
ANR	690542	PrimaryExpression	0		687717	1					
ANR	690543	ExpressionStatement	maxLength = atoi ( maxLengthParam . c_str ( ) )	3137:3:93225:93265	687717	1	True				
ANR	690544	AssignmentExpression	maxLength = atoi ( maxLengthParam . c_str ( ) )		687717	0		=			
ANR	690545	Identifier	maxLength		687717	0					
ANR	690546	CallExpression	atoi ( maxLengthParam . c_str ( ) )		687717	1					
ANR	690547	Callee	atoi		687717	0					
ANR	690548	Identifier	atoi		687717	0					
ANR	690549	ArgumentList	maxLengthParam . c_str ( )		687717	1					
ANR	690550	Argument	maxLengthParam . c_str ( )		687717	0					
ANR	690551	CallExpression	maxLengthParam . c_str ( )		687717	0					
ANR	690552	Callee	maxLengthParam . c_str		687717	0					
ANR	690553	MemberAccess	maxLengthParam . c_str		687717	0					
ANR	690554	Identifier	maxLengthParam		687717	0					
ANR	690555	Identifier	c_str		687717	1					
ANR	690556	ArgumentList			687717	1					
ANR	690557	IfStatement	if ( maxLength > 200 )		687717	3					
ANR	690558	Condition	maxLength > 200	3138:6:93273:93287	687717	0	True				
ANR	690559	RelationalExpression	maxLength > 200		687717	0		>			
ANR	690560	Identifier	maxLength		687717	0					
ANR	690561	PrimaryExpression	200		687717	1					
ANR	690562	ExpressionStatement	"isOptionError ( arg , errorInfo )"	3139:3:93293:93322	687717	1	True				
ANR	690563	CallExpression	"isOptionError ( arg , errorInfo )"		687717	0					
ANR	690564	Callee	isOptionError		687717	0					
ANR	690565	Identifier	isOptionError		687717	0					
ANR	690566	ArgumentList	arg		687717	1					
ANR	690567	Argument	arg		687717	0					
ANR	690568	Identifier	arg		687717	0					
ANR	690569	Argument	errorInfo		687717	1					
ANR	690570	Identifier	errorInfo		687717	0					
ANR	690571	ElseStatement	else		687717	0					
ANR	690572	ExpressionStatement	formatter . setMaxCodeLength ( maxLength )	3141:3:93334:93371	687717	0	True				
ANR	690573	CallExpression	formatter . setMaxCodeLength ( maxLength )		687717	0					
ANR	690574	Callee	formatter . setMaxCodeLength		687717	0					
ANR	690575	MemberAccess	formatter . setMaxCodeLength		687717	0					
ANR	690576	Identifier	formatter		687717	0					
ANR	690577	Identifier	setMaxCodeLength		687717	1					
ANR	690578	ArgumentList	maxLength		687717	1					
ANR	690579	Argument	maxLength		687717	0					
ANR	690580	Identifier	maxLength		687717	0					
ANR	690581	ElseStatement	else		687717	0					
ANR	690582	IfStatement	"if ( isOption ( arg , ""xL"" , ""break-after-logical"" ) )"		687717	0					
ANR	690583	Condition	"isOption ( arg , ""xL"" , ""break-after-logical"" )"	3143:11:93387:93428	687717	0	True				
ANR	690584	CallExpression	"isOption ( arg , ""xL"" , ""break-after-logical"" )"		687717	0					
ANR	690585	Callee	isOption		687717	0					
ANR	690586	Identifier	isOption		687717	0					
ANR	690587	ArgumentList	arg		687717	1					
ANR	690588	Argument	arg		687717	0					
ANR	690589	Identifier	arg		687717	0					
ANR	690590	Argument	"""xL"""		687717	1					
ANR	690591	PrimaryExpression	"""xL"""		687717	0					
ANR	690592	Argument	"""break-after-logical"""		687717	2					
ANR	690593	PrimaryExpression	"""break-after-logical"""		687717	0					
ANR	690594	CompoundStatement		441:1:12167:12167	687717	1					
ANR	690595	ExpressionStatement	formatter . setBreakAfterMode ( true )	3145:2:93437:93470	687717	0	True				
ANR	690596	CallExpression	formatter . setBreakAfterMode ( true )		687717	0					
ANR	690597	Callee	formatter . setBreakAfterMode		687717	0					
ANR	690598	MemberAccess	formatter . setBreakAfterMode		687717	0					
ANR	690599	Identifier	formatter		687717	0					
ANR	690600	Identifier	setBreakAfterMode		687717	1					
ANR	690601	ArgumentList	true		687717	1					
ANR	690602	Argument	true		687717	0					
ANR	690603	Identifier	true		687717	0					
ANR	690604	ElseStatement	else		687717	0					
ANR	690605	IfStatement	"if ( isOption ( arg , ""xc"" , ""attach-classes"" ) )"		687717	0					
ANR	690606	Condition	"isOption ( arg , ""xc"" , ""attach-classes"" )"	3147:11:93486:93522	687717	0	True				
ANR	690607	CallExpression	"isOption ( arg , ""xc"" , ""attach-classes"" )"		687717	0					
ANR	690608	Callee	isOption		687717	0					
ANR	690609	Identifier	isOption		687717	0					
ANR	690610	ArgumentList	arg		687717	1					
ANR	690611	Argument	arg		687717	0					
ANR	690612	Identifier	arg		687717	0					
ANR	690613	Argument	"""xc"""		687717	1					
ANR	690614	PrimaryExpression	"""xc"""		687717	0					
ANR	690615	Argument	"""attach-classes"""		687717	2					
ANR	690616	PrimaryExpression	"""attach-classes"""		687717	0					
ANR	690617	CompoundStatement		445:1:12261:12261	687717	1					
ANR	690618	ExpressionStatement	formatter . setAttachClass ( true )	3149:2:93531:93561	687717	0	True				
ANR	690619	CallExpression	formatter . setAttachClass ( true )		687717	0					
ANR	690620	Callee	formatter . setAttachClass		687717	0					
ANR	690621	MemberAccess	formatter . setAttachClass		687717	0					
ANR	690622	Identifier	formatter		687717	0					
ANR	690623	Identifier	setAttachClass		687717	1					
ANR	690624	ArgumentList	true		687717	1					
ANR	690625	Argument	true		687717	0					
ANR	690626	Identifier	true		687717	0					
ANR	690627	ElseStatement	else		687717	0					
ANR	690628	IfStatement	"if ( isOption ( arg , ""xV"" , ""attach-closing-while"" ) )"		687717	0					
ANR	690629	Condition	"isOption ( arg , ""xV"" , ""attach-closing-while"" )"	3151:11:93577:93619	687717	0	True				
ANR	690630	CallExpression	"isOption ( arg , ""xV"" , ""attach-closing-while"" )"		687717	0					
ANR	690631	Callee	isOption		687717	0					
ANR	690632	Identifier	isOption		687717	0					
ANR	690633	ArgumentList	arg		687717	1					
ANR	690634	Argument	arg		687717	0					
ANR	690635	Identifier	arg		687717	0					
ANR	690636	Argument	"""xV"""		687717	1					
ANR	690637	PrimaryExpression	"""xV"""		687717	0					
ANR	690638	Argument	"""attach-closing-while"""		687717	2					
ANR	690639	PrimaryExpression	"""attach-closing-while"""		687717	0					
ANR	690640	CompoundStatement		449:1:12358:12358	687717	1					
ANR	690641	ExpressionStatement	formatter . setAttachClosingWhile ( true )	3153:2:93628:93665	687717	0	True				
ANR	690642	CallExpression	formatter . setAttachClosingWhile ( true )		687717	0					
ANR	690643	Callee	formatter . setAttachClosingWhile		687717	0					
ANR	690644	MemberAccess	formatter . setAttachClosingWhile		687717	0					
ANR	690645	Identifier	formatter		687717	0					
ANR	690646	Identifier	setAttachClosingWhile		687717	1					
ANR	690647	ArgumentList	true		687717	1					
ANR	690648	Argument	true		687717	0					
ANR	690649	Identifier	true		687717	0					
ANR	690650	ElseStatement	else		687717	0					
ANR	690651	IfStatement	"if ( isOption ( arg , ""xk"" , ""attach-extern-c"" ) )"		687717	0					
ANR	690652	Condition	"isOption ( arg , ""xk"" , ""attach-extern-c"" )"	3155:11:93681:93718	687717	0	True				
ANR	690653	CallExpression	"isOption ( arg , ""xk"" , ""attach-extern-c"" )"		687717	0					
ANR	690654	Callee	isOption		687717	0					
ANR	690655	Identifier	isOption		687717	0					
ANR	690656	ArgumentList	arg		687717	1					
ANR	690657	Argument	arg		687717	0					
ANR	690658	Identifier	arg		687717	0					
ANR	690659	Argument	"""xk"""		687717	1					
ANR	690660	PrimaryExpression	"""xk"""		687717	0					
ANR	690661	Argument	"""attach-extern-c"""		687717	2					
ANR	690662	PrimaryExpression	"""attach-extern-c"""		687717	0					
ANR	690663	CompoundStatement		453:1:12457:12457	687717	1					
ANR	690664	ExpressionStatement	formatter . setAttachExternC ( true )	3157:2:93727:93759	687717	0	True				
ANR	690665	CallExpression	formatter . setAttachExternC ( true )		687717	0					
ANR	690666	Callee	formatter . setAttachExternC		687717	0					
ANR	690667	MemberAccess	formatter . setAttachExternC		687717	0					
ANR	690668	Identifier	formatter		687717	0					
ANR	690669	Identifier	setAttachExternC		687717	1					
ANR	690670	ArgumentList	true		687717	1					
ANR	690671	Argument	true		687717	0					
ANR	690672	Identifier	true		687717	0					
ANR	690673	ElseStatement	else		687717	0					
ANR	690674	IfStatement	"if ( isOption ( arg , ""xn"" , ""attach-namespaces"" ) )"		687717	0					
ANR	690675	Condition	"isOption ( arg , ""xn"" , ""attach-namespaces"" )"	3159:11:93775:93814	687717	0	True				
ANR	690676	CallExpression	"isOption ( arg , ""xn"" , ""attach-namespaces"" )"		687717	0					
ANR	690677	Callee	isOption		687717	0					
ANR	690678	Identifier	isOption		687717	0					
ANR	690679	ArgumentList	arg		687717	1					
ANR	690680	Argument	arg		687717	0					
ANR	690681	Identifier	arg		687717	0					
ANR	690682	Argument	"""xn"""		687717	1					
ANR	690683	PrimaryExpression	"""xn"""		687717	0					
ANR	690684	Argument	"""attach-namespaces"""		687717	2					
ANR	690685	PrimaryExpression	"""attach-namespaces"""		687717	0					
ANR	690686	CompoundStatement		457:1:12553:12553	687717	1					
ANR	690687	ExpressionStatement	formatter . setAttachNamespace ( true )	3161:2:93823:93857	687717	0	True				
ANR	690688	CallExpression	formatter . setAttachNamespace ( true )		687717	0					
ANR	690689	Callee	formatter . setAttachNamespace		687717	0					
ANR	690690	MemberAccess	formatter . setAttachNamespace		687717	0					
ANR	690691	Identifier	formatter		687717	0					
ANR	690692	Identifier	setAttachNamespace		687717	1					
ANR	690693	ArgumentList	true		687717	1					
ANR	690694	Argument	true		687717	0					
ANR	690695	Identifier	true		687717	0					
ANR	690696	ElseStatement	else		687717	0					
ANR	690697	IfStatement	"if ( isOption ( arg , ""xl"" , ""attach-inlines"" ) )"		687717	0					
ANR	690698	Condition	"isOption ( arg , ""xl"" , ""attach-inlines"" )"	3163:11:93873:93909	687717	0	True				
ANR	690699	CallExpression	"isOption ( arg , ""xl"" , ""attach-inlines"" )"		687717	0					
ANR	690700	Callee	isOption		687717	0					
ANR	690701	Identifier	isOption		687717	0					
ANR	690702	ArgumentList	arg		687717	1					
ANR	690703	Argument	arg		687717	0					
ANR	690704	Identifier	arg		687717	0					
ANR	690705	Argument	"""xl"""		687717	1					
ANR	690706	PrimaryExpression	"""xl"""		687717	0					
ANR	690707	Argument	"""attach-inlines"""		687717	2					
ANR	690708	PrimaryExpression	"""attach-inlines"""		687717	0					
ANR	690709	CompoundStatement		461:1:12648:12648	687717	1					
ANR	690710	ExpressionStatement	formatter . setAttachInline ( true )	3165:2:93918:93949	687717	0	True				
ANR	690711	CallExpression	formatter . setAttachInline ( true )		687717	0					
ANR	690712	Callee	formatter . setAttachInline		687717	0					
ANR	690713	MemberAccess	formatter . setAttachInline		687717	0					
ANR	690714	Identifier	formatter		687717	0					
ANR	690715	Identifier	setAttachInline		687717	1					
ANR	690716	ArgumentList	true		687717	1					
ANR	690717	Argument	true		687717	0					
ANR	690718	Identifier	true		687717	0					
ANR	690719	ElseStatement	else		687717	0					
ANR	690720	IfStatement	"if ( isOption ( arg , ""xp"" , ""remove-comment-prefix"" ) )"		687717	0					
ANR	690721	Condition	"isOption ( arg , ""xp"" , ""remove-comment-prefix"" )"	3167:11:93965:94008	687717	0	True				
ANR	690722	CallExpression	"isOption ( arg , ""xp"" , ""remove-comment-prefix"" )"		687717	0					
ANR	690723	Callee	isOption		687717	0					
ANR	690724	Identifier	isOption		687717	0					
ANR	690725	ArgumentList	arg		687717	1					
ANR	690726	Argument	arg		687717	0					
ANR	690727	Identifier	arg		687717	0					
ANR	690728	Argument	"""xp"""		687717	1					
ANR	690729	PrimaryExpression	"""xp"""		687717	0					
ANR	690730	Argument	"""remove-comment-prefix"""		687717	2					
ANR	690731	PrimaryExpression	"""remove-comment-prefix"""		687717	0					
ANR	690732	CompoundStatement		465:1:12747:12747	687717	1					
ANR	690733	ExpressionStatement	formatter . setStripCommentPrefix ( true )	3169:2:94017:94054	687717	0	True				
ANR	690734	CallExpression	formatter . setStripCommentPrefix ( true )		687717	0					
ANR	690735	Callee	formatter . setStripCommentPrefix		687717	0					
ANR	690736	MemberAccess	formatter . setStripCommentPrefix		687717	0					
ANR	690737	Identifier	formatter		687717	0					
ANR	690738	Identifier	setStripCommentPrefix		687717	1					
ANR	690739	ArgumentList	true		687717	1					
ANR	690740	Argument	true		687717	0					
ANR	690741	Identifier	true		687717	0					
ANR	690742	ElseStatement	else		687717	0					
ANR	690743	IfStatement	"if ( isOption ( arg , ""xQ"" , ""pad-method-prefix"" ) )"		687717	0					
ANR	690744	Condition	"isOption ( arg , ""xQ"" , ""pad-method-prefix"" )"	3172:11:94094:94133	687717	0	True				
ANR	690745	CallExpression	"isOption ( arg , ""xQ"" , ""pad-method-prefix"" )"		687717	0					
ANR	690746	Callee	isOption		687717	0					
ANR	690747	Identifier	isOption		687717	0					
ANR	690748	ArgumentList	arg		687717	1					
ANR	690749	Argument	arg		687717	0					
ANR	690750	Identifier	arg		687717	0					
ANR	690751	Argument	"""xQ"""		687717	1					
ANR	690752	PrimaryExpression	"""xQ"""		687717	0					
ANR	690753	Argument	"""pad-method-prefix"""		687717	2					
ANR	690754	PrimaryExpression	"""pad-method-prefix"""		687717	0					
ANR	690755	CompoundStatement		470:1:12872:12872	687717	1					
ANR	690756	ExpressionStatement	formatter . setMethodPrefixPaddingMode ( true )	3174:2:94142:94184	687717	0	True				
ANR	690757	CallExpression	formatter . setMethodPrefixPaddingMode ( true )		687717	0					
ANR	690758	Callee	formatter . setMethodPrefixPaddingMode		687717	0					
ANR	690759	MemberAccess	formatter . setMethodPrefixPaddingMode		687717	0					
ANR	690760	Identifier	formatter		687717	0					
ANR	690761	Identifier	setMethodPrefixPaddingMode		687717	1					
ANR	690762	ArgumentList	true		687717	1					
ANR	690763	Argument	true		687717	0					
ANR	690764	Identifier	true		687717	0					
ANR	690765	ElseStatement	else		687717	0					
ANR	690766	IfStatement	"if ( isOption ( arg , ""xR"" , ""unpad-method-prefix"" ) )"		687717	0					
ANR	690767	Condition	"isOption ( arg , ""xR"" , ""unpad-method-prefix"" )"	3176:11:94200:94241	687717	0	True				
ANR	690768	CallExpression	"isOption ( arg , ""xR"" , ""unpad-method-prefix"" )"		687717	0					
ANR	690769	Callee	isOption		687717	0					
ANR	690770	Identifier	isOption		687717	0					
ANR	690771	ArgumentList	arg		687717	1					
ANR	690772	Argument	arg		687717	0					
ANR	690773	Identifier	arg		687717	0					
ANR	690774	Argument	"""xR"""		687717	1					
ANR	690775	PrimaryExpression	"""xR"""		687717	0					
ANR	690776	Argument	"""unpad-method-prefix"""		687717	2					
ANR	690777	PrimaryExpression	"""unpad-method-prefix"""		687717	0					
ANR	690778	CompoundStatement		474:1:12980:12980	687717	1					
ANR	690779	ExpressionStatement	formatter . setMethodPrefixUnPaddingMode ( true )	3178:2:94250:94294	687717	0	True				
ANR	690780	CallExpression	formatter . setMethodPrefixUnPaddingMode ( true )		687717	0					
ANR	690781	Callee	formatter . setMethodPrefixUnPaddingMode		687717	0					
ANR	690782	MemberAccess	formatter . setMethodPrefixUnPaddingMode		687717	0					
ANR	690783	Identifier	formatter		687717	0					
ANR	690784	Identifier	setMethodPrefixUnPaddingMode		687717	1					
ANR	690785	ArgumentList	true		687717	1					
ANR	690786	Argument	true		687717	0					
ANR	690787	Identifier	true		687717	0					
ANR	690788	ElseStatement	else		687717	0					
ANR	690789	IfStatement	"if ( isOption ( arg , ""xq"" , ""pad-return-type"" ) )"		687717	0					
ANR	690790	Condition	"isOption ( arg , ""xq"" , ""pad-return-type"" )"	3180:10:94309:94346	687717	0	True				
ANR	690791	CallExpression	"isOption ( arg , ""xq"" , ""pad-return-type"" )"		687717	0					
ANR	690792	Callee	isOption		687717	0					
ANR	690793	Identifier	isOption		687717	0					
ANR	690794	ArgumentList	arg		687717	1					
ANR	690795	Argument	arg		687717	0					
ANR	690796	Identifier	arg		687717	0					
ANR	690797	Argument	"""xq"""		687717	1					
ANR	690798	PrimaryExpression	"""xq"""		687717	0					
ANR	690799	Argument	"""pad-return-type"""		687717	2					
ANR	690800	PrimaryExpression	"""pad-return-type"""		687717	0					
ANR	690801	CompoundStatement		478:1:13084:13084	687717	1					
ANR	690802	ExpressionStatement	formatter . setReturnTypePaddingMode ( true )	3182:2:94354:94394	687717	0	True				
ANR	690803	CallExpression	formatter . setReturnTypePaddingMode ( true )		687717	0					
ANR	690804	Callee	formatter . setReturnTypePaddingMode		687717	0					
ANR	690805	MemberAccess	formatter . setReturnTypePaddingMode		687717	0					
ANR	690806	Identifier	formatter		687717	0					
ANR	690807	Identifier	setReturnTypePaddingMode		687717	1					
ANR	690808	ArgumentList	true		687717	1					
ANR	690809	Argument	true		687717	0					
ANR	690810	Identifier	true		687717	0					
ANR	690811	ElseStatement	else		687717	0					
ANR	690812	IfStatement	"if ( isOption ( arg , ""xr"" , ""unpad-return-type"" ) )"		687717	0					
ANR	690813	Condition	"isOption ( arg , ""xr"" , ""unpad-return-type"" )"	3184:10:94409:94448	687717	0	True				
ANR	690814	CallExpression	"isOption ( arg , ""xr"" , ""unpad-return-type"" )"		687717	0					
ANR	690815	Callee	isOption		687717	0					
ANR	690816	Identifier	isOption		687717	0					
ANR	690817	ArgumentList	arg		687717	1					
ANR	690818	Argument	arg		687717	0					
ANR	690819	Identifier	arg		687717	0					
ANR	690820	Argument	"""xr"""		687717	1					
ANR	690821	PrimaryExpression	"""xr"""		687717	0					
ANR	690822	Argument	"""unpad-return-type"""		687717	2					
ANR	690823	PrimaryExpression	"""unpad-return-type"""		687717	0					
ANR	690824	CompoundStatement		482:1:13186:13186	687717	1					
ANR	690825	ExpressionStatement	formatter . setReturnTypeUnPaddingMode ( true )	3186:2:94456:94498	687717	0	True				
ANR	690826	CallExpression	formatter . setReturnTypeUnPaddingMode ( true )		687717	0					
ANR	690827	Callee	formatter . setReturnTypeUnPaddingMode		687717	0					
ANR	690828	MemberAccess	formatter . setReturnTypeUnPaddingMode		687717	0					
ANR	690829	Identifier	formatter		687717	0					
ANR	690830	Identifier	setReturnTypeUnPaddingMode		687717	1					
ANR	690831	ArgumentList	true		687717	1					
ANR	690832	Argument	true		687717	0					
ANR	690833	Identifier	true		687717	0					
ANR	690834	ElseStatement	else		687717	0					
ANR	690835	IfStatement	"if ( isOption ( arg , ""xS"" , ""pad-param-type"" ) )"		687717	0					
ANR	690836	Condition	"isOption ( arg , ""xS"" , ""pad-param-type"" )"	3188:10:94513:94549	687717	0	True				
ANR	690837	CallExpression	"isOption ( arg , ""xS"" , ""pad-param-type"" )"		687717	0					
ANR	690838	Callee	isOption		687717	0					
ANR	690839	Identifier	isOption		687717	0					
ANR	690840	ArgumentList	arg		687717	1					
ANR	690841	Argument	arg		687717	0					
ANR	690842	Identifier	arg		687717	0					
ANR	690843	Argument	"""xS"""		687717	1					
ANR	690844	PrimaryExpression	"""xS"""		687717	0					
ANR	690845	Argument	"""pad-param-type"""		687717	2					
ANR	690846	PrimaryExpression	"""pad-param-type"""		687717	0					
ANR	690847	CompoundStatement		486:1:13287:13287	687717	1					
ANR	690848	ExpressionStatement	formatter . setParamTypePaddingMode ( true )	3190:2:94557:94596	687717	0	True				
ANR	690849	CallExpression	formatter . setParamTypePaddingMode ( true )		687717	0					
ANR	690850	Callee	formatter . setParamTypePaddingMode		687717	0					
ANR	690851	MemberAccess	formatter . setParamTypePaddingMode		687717	0					
ANR	690852	Identifier	formatter		687717	0					
ANR	690853	Identifier	setParamTypePaddingMode		687717	1					
ANR	690854	ArgumentList	true		687717	1					
ANR	690855	Argument	true		687717	0					
ANR	690856	Identifier	true		687717	0					
ANR	690857	ElseStatement	else		687717	0					
ANR	690858	IfStatement	"if ( isOption ( arg , ""xs"" , ""unpad-param-type"" ) )"		687717	0					
ANR	690859	Condition	"isOption ( arg , ""xs"" , ""unpad-param-type"" )"	3192:10:94611:94649	687717	0	True				
ANR	690860	CallExpression	"isOption ( arg , ""xs"" , ""unpad-param-type"" )"		687717	0					
ANR	690861	Callee	isOption		687717	0					
ANR	690862	Identifier	isOption		687717	0					
ANR	690863	ArgumentList	arg		687717	1					
ANR	690864	Argument	arg		687717	0					
ANR	690865	Identifier	arg		687717	0					
ANR	690866	Argument	"""xs"""		687717	1					
ANR	690867	PrimaryExpression	"""xs"""		687717	0					
ANR	690868	Argument	"""unpad-param-type"""		687717	2					
ANR	690869	PrimaryExpression	"""unpad-param-type"""		687717	0					
ANR	690870	CompoundStatement		490:1:13387:13387	687717	1					
ANR	690871	ExpressionStatement	formatter . setParamTypeUnPaddingMode ( true )	3194:2:94657:94698	687717	0	True				
ANR	690872	CallExpression	formatter . setParamTypeUnPaddingMode ( true )		687717	0					
ANR	690873	Callee	formatter . setParamTypeUnPaddingMode		687717	0					
ANR	690874	MemberAccess	formatter . setParamTypeUnPaddingMode		687717	0					
ANR	690875	Identifier	formatter		687717	0					
ANR	690876	Identifier	setParamTypeUnPaddingMode		687717	1					
ANR	690877	ArgumentList	true		687717	1					
ANR	690878	Argument	true		687717	0					
ANR	690879	Identifier	true		687717	0					
ANR	690880	ElseStatement	else		687717	0					
ANR	690881	IfStatement	"if ( isOption ( arg , ""xM"" , ""align-method-colon"" ) )"		687717	0					
ANR	690882	Condition	"isOption ( arg , ""xM"" , ""align-method-colon"" )"	3196:10:94713:94753	687717	0	True				
ANR	690883	CallExpression	"isOption ( arg , ""xM"" , ""align-method-colon"" )"		687717	0					
ANR	690884	Callee	isOption		687717	0					
ANR	690885	Identifier	isOption		687717	0					
ANR	690886	ArgumentList	arg		687717	1					
ANR	690887	Argument	arg		687717	0					
ANR	690888	Identifier	arg		687717	0					
ANR	690889	Argument	"""xM"""		687717	1					
ANR	690890	PrimaryExpression	"""xM"""		687717	0					
ANR	690891	Argument	"""align-method-colon"""		687717	2					
ANR	690892	PrimaryExpression	"""align-method-colon"""		687717	0					
ANR	690893	CompoundStatement		494:1:13491:13491	687717	1					
ANR	690894	ExpressionStatement	formatter . setAlignMethodColon ( true )	3198:2:94761:94796	687717	0	True				
ANR	690895	CallExpression	formatter . setAlignMethodColon ( true )		687717	0					
ANR	690896	Callee	formatter . setAlignMethodColon		687717	0					
ANR	690897	MemberAccess	formatter . setAlignMethodColon		687717	0					
ANR	690898	Identifier	formatter		687717	0					
ANR	690899	Identifier	setAlignMethodColon		687717	1					
ANR	690900	ArgumentList	true		687717	1					
ANR	690901	Argument	true		687717	0					
ANR	690902	Identifier	true		687717	0					
ANR	690903	ElseStatement	else		687717	0					
ANR	690904	IfStatement	"if ( isOption ( arg , ""xP0"" , ""pad-method-colon=none"" ) )"		687717	0					
ANR	690905	Condition	"isOption ( arg , ""xP0"" , ""pad-method-colon=none"" )"	3200:11:94812:94856	687717	0	True				
ANR	690906	CallExpression	"isOption ( arg , ""xP0"" , ""pad-method-colon=none"" )"		687717	0					
ANR	690907	Callee	isOption		687717	0					
ANR	690908	Identifier	isOption		687717	0					
ANR	690909	ArgumentList	arg		687717	1					
ANR	690910	Argument	arg		687717	0					
ANR	690911	Identifier	arg		687717	0					
ANR	690912	Argument	"""xP0"""		687717	1					
ANR	690913	PrimaryExpression	"""xP0"""		687717	0					
ANR	690914	Argument	"""pad-method-colon=none"""		687717	2					
ANR	690915	PrimaryExpression	"""pad-method-colon=none"""		687717	0					
ANR	690916	CompoundStatement		498:1:13595:13595	687717	1					
ANR	690917	ExpressionStatement	formatter . setObjCColonPaddingMode ( COLON_PAD_NONE )	3202:2:94865:94914	687717	0	True				
ANR	690918	CallExpression	formatter . setObjCColonPaddingMode ( COLON_PAD_NONE )		687717	0					
ANR	690919	Callee	formatter . setObjCColonPaddingMode		687717	0					
ANR	690920	MemberAccess	formatter . setObjCColonPaddingMode		687717	0					
ANR	690921	Identifier	formatter		687717	0					
ANR	690922	Identifier	setObjCColonPaddingMode		687717	1					
ANR	690923	ArgumentList	COLON_PAD_NONE		687717	1					
ANR	690924	Argument	COLON_PAD_NONE		687717	0					
ANR	690925	Identifier	COLON_PAD_NONE		687717	0					
ANR	690926	ElseStatement	else		687717	0					
ANR	690927	IfStatement	"if ( isOption ( arg , ""xP1"" , ""pad-method-colon=all"" ) )"		687717	0					
ANR	690928	Condition	"isOption ( arg , ""xP1"" , ""pad-method-colon=all"" )"	3204:11:94930:94973	687717	0	True				
ANR	690929	CallExpression	"isOption ( arg , ""xP1"" , ""pad-method-colon=all"" )"		687717	0					
ANR	690930	Callee	isOption		687717	0					
ANR	690931	Identifier	isOption		687717	0					
ANR	690932	ArgumentList	arg		687717	1					
ANR	690933	Argument	arg		687717	0					
ANR	690934	Identifier	arg		687717	0					
ANR	690935	Argument	"""xP1"""		687717	1					
ANR	690936	PrimaryExpression	"""xP1"""		687717	0					
ANR	690937	Argument	"""pad-method-colon=all"""		687717	2					
ANR	690938	PrimaryExpression	"""pad-method-colon=all"""		687717	0					
ANR	690939	CompoundStatement		502:1:13712:13712	687717	1					
ANR	690940	ExpressionStatement	formatter . setObjCColonPaddingMode ( COLON_PAD_ALL )	3206:2:94982:95030	687717	0	True				
ANR	690941	CallExpression	formatter . setObjCColonPaddingMode ( COLON_PAD_ALL )		687717	0					
ANR	690942	Callee	formatter . setObjCColonPaddingMode		687717	0					
ANR	690943	MemberAccess	formatter . setObjCColonPaddingMode		687717	0					
ANR	690944	Identifier	formatter		687717	0					
ANR	690945	Identifier	setObjCColonPaddingMode		687717	1					
ANR	690946	ArgumentList	COLON_PAD_ALL		687717	1					
ANR	690947	Argument	COLON_PAD_ALL		687717	0					
ANR	690948	Identifier	COLON_PAD_ALL		687717	0					
ANR	690949	ElseStatement	else		687717	0					
ANR	690950	IfStatement	"if ( isOption ( arg , ""xP2"" , ""pad-method-colon=after"" ) )"		687717	0					
ANR	690951	Condition	"isOption ( arg , ""xP2"" , ""pad-method-colon=after"" )"	3208:11:95046:95091	687717	0	True				
ANR	690952	CallExpression	"isOption ( arg , ""xP2"" , ""pad-method-colon=after"" )"		687717	0					
ANR	690953	Callee	isOption		687717	0					
ANR	690954	Identifier	isOption		687717	0					
ANR	690955	ArgumentList	arg		687717	1					
ANR	690956	Argument	arg		687717	0					
ANR	690957	Identifier	arg		687717	0					
ANR	690958	Argument	"""xP2"""		687717	1					
ANR	690959	PrimaryExpression	"""xP2"""		687717	0					
ANR	690960	Argument	"""pad-method-colon=after"""		687717	2					
ANR	690961	PrimaryExpression	"""pad-method-colon=after"""		687717	0					
ANR	690962	CompoundStatement		506:1:13830:13830	687717	1					
ANR	690963	ExpressionStatement	formatter . setObjCColonPaddingMode ( COLON_PAD_AFTER )	3210:2:95100:95150	687717	0	True				
ANR	690964	CallExpression	formatter . setObjCColonPaddingMode ( COLON_PAD_AFTER )		687717	0					
ANR	690965	Callee	formatter . setObjCColonPaddingMode		687717	0					
ANR	690966	MemberAccess	formatter . setObjCColonPaddingMode		687717	0					
ANR	690967	Identifier	formatter		687717	0					
ANR	690968	Identifier	setObjCColonPaddingMode		687717	1					
ANR	690969	ArgumentList	COLON_PAD_AFTER		687717	1					
ANR	690970	Argument	COLON_PAD_AFTER		687717	0					
ANR	690971	Identifier	COLON_PAD_AFTER		687717	0					
ANR	690972	ElseStatement	else		687717	0					
ANR	690973	IfStatement	"if ( isOption ( arg , ""xP3"" , ""pad-method-colon=before"" ) )"		687717	0					
ANR	690974	Condition	"isOption ( arg , ""xP3"" , ""pad-method-colon=before"" )"	3212:11:95166:95212	687717	0	True				
ANR	690975	CallExpression	"isOption ( arg , ""xP3"" , ""pad-method-colon=before"" )"		687717	0					
ANR	690976	Callee	isOption		687717	0					
ANR	690977	Identifier	isOption		687717	0					
ANR	690978	ArgumentList	arg		687717	1					
ANR	690979	Argument	arg		687717	0					
ANR	690980	Identifier	arg		687717	0					
ANR	690981	Argument	"""xP3"""		687717	1					
ANR	690982	PrimaryExpression	"""xP3"""		687717	0					
ANR	690983	Argument	"""pad-method-colon=before"""		687717	2					
ANR	690984	PrimaryExpression	"""pad-method-colon=before"""		687717	0					
ANR	690985	CompoundStatement		510:1:13951:13951	687717	1					
ANR	690986	ExpressionStatement	formatter . setObjCColonPaddingMode ( COLON_PAD_BEFORE )	3214:2:95221:95272	687717	0	True				
ANR	690987	CallExpression	formatter . setObjCColonPaddingMode ( COLON_PAD_BEFORE )		687717	0					
ANR	690988	Callee	formatter . setObjCColonPaddingMode		687717	0					
ANR	690989	MemberAccess	formatter . setObjCColonPaddingMode		687717	0					
ANR	690990	Identifier	formatter		687717	0					
ANR	690991	Identifier	setObjCColonPaddingMode		687717	1					
ANR	690992	ArgumentList	COLON_PAD_BEFORE		687717	1					
ANR	690993	Argument	COLON_PAD_BEFORE		687717	0					
ANR	690994	Identifier	COLON_PAD_BEFORE		687717	0					
ANR	690995	ElseStatement	else		687717	0					
ANR	690996	IfStatement	"if ( isOption ( arg , ""indent-preprocessor"" ) )"		687717	0					
ANR	690997	Condition	"isOption ( arg , ""indent-preprocessor"" )"	3217:11:95385:95420	687717	0	True				
ANR	690998	CallExpression	"isOption ( arg , ""indent-preprocessor"" )"		687717	0					
ANR	690999	Callee	isOption		687717	0					
ANR	691000	Identifier	isOption		687717	0					
ANR	691001	ArgumentList	arg		687717	1					
ANR	691002	Argument	arg		687717	0					
ANR	691003	Identifier	arg		687717	0					
ANR	691004	Argument	"""indent-preprocessor"""		687717	1					
ANR	691005	PrimaryExpression	"""indent-preprocessor"""		687717	0					
ANR	691006	CompoundStatement		515:1:14188:14188	687717	1					
ANR	691007	ExpressionStatement	formatter . setPreprocDefineIndent ( true )	3219:2:95458:95496	687717	0	True				
ANR	691008	CallExpression	formatter . setPreprocDefineIndent ( true )		687717	0					
ANR	691009	Callee	formatter . setPreprocDefineIndent		687717	0					
ANR	691010	MemberAccess	formatter . setPreprocDefineIndent		687717	0					
ANR	691011	Identifier	formatter		687717	0					
ANR	691012	Identifier	setPreprocDefineIndent		687717	1					
ANR	691013	ArgumentList	true		687717	1					
ANR	691014	Argument	true		687717	0					
ANR	691015	Identifier	true		687717	0					
ANR	691016	ElseStatement	else		687717	0					
ANR	691017	IfStatement	"if ( isOption ( arg , ""style=ansi"" ) )"		687717	0					
ANR	691018	Condition	"isOption ( arg , ""style=ansi"" )"	3221:11:95512:95538	687717	0	True				
ANR	691019	CallExpression	"isOption ( arg , ""style=ansi"" )"		687717	0					
ANR	691020	Callee	isOption		687717	0					
ANR	691021	Identifier	isOption		687717	0					
ANR	691022	ArgumentList	arg		687717	1					
ANR	691023	Argument	arg		687717	0					
ANR	691024	Identifier	arg		687717	0					
ANR	691025	Argument	"""style=ansi"""		687717	1					
ANR	691026	PrimaryExpression	"""style=ansi"""		687717	0					
ANR	691027	CompoundStatement		519:1:14309:14309	687717	1					
ANR	691028	ExpressionStatement	formatter . setFormattingStyle ( STYLE_ALLMAN )	3223:2:95579:95621	687717	0	True				
ANR	691029	CallExpression	formatter . setFormattingStyle ( STYLE_ALLMAN )		687717	0					
ANR	691030	Callee	formatter . setFormattingStyle		687717	0					
ANR	691031	MemberAccess	formatter . setFormattingStyle		687717	0					
ANR	691032	Identifier	formatter		687717	0					
ANR	691033	Identifier	setFormattingStyle		687717	1					
ANR	691034	ArgumentList	STYLE_ALLMAN		687717	1					
ANR	691035	Argument	STYLE_ALLMAN		687717	0					
ANR	691036	Identifier	STYLE_ALLMAN		687717	0					
ANR	691037	ElseStatement	else		687717	0					
ANR	691038	IfStatement	"if ( isOption ( arg , ""break-closing-brackets"" ) )"		687717	0					
ANR	691039	Condition	"isOption ( arg , ""break-closing-brackets"" )"	3226:11:95734:95772	687717	0	True				
ANR	691040	CallExpression	"isOption ( arg , ""break-closing-brackets"" )"		687717	0					
ANR	691041	Callee	isOption		687717	0					
ANR	691042	Identifier	isOption		687717	0					
ANR	691043	ArgumentList	arg		687717	1					
ANR	691044	Argument	arg		687717	0					
ANR	691045	Identifier	arg		687717	0					
ANR	691046	Argument	"""break-closing-brackets"""		687717	1					
ANR	691047	PrimaryExpression	"""break-closing-brackets"""		687717	0					
ANR	691048	CompoundStatement		524:1:14539:14539	687717	1					
ANR	691049	ExpressionStatement	formatter . setBreakClosingHeaderBracketsMode ( true )	3228:2:95809:95858	687717	0	True				
ANR	691050	CallExpression	formatter . setBreakClosingHeaderBracketsMode ( true )		687717	0					
ANR	691051	Callee	formatter . setBreakClosingHeaderBracketsMode		687717	0					
ANR	691052	MemberAccess	formatter . setBreakClosingHeaderBracketsMode		687717	0					
ANR	691053	Identifier	formatter		687717	0					
ANR	691054	Identifier	setBreakClosingHeaderBracketsMode		687717	1					
ANR	691055	ArgumentList	true		687717	1					
ANR	691056	Argument	true		687717	0					
ANR	691057	Identifier	true		687717	0					
ANR	691058	ElseStatement	else		687717	0					
ANR	691059	IfStatement	"if ( isOption ( arg , ""add-brackets"" ) )"		687717	0					
ANR	691060	Condition	"isOption ( arg , ""add-brackets"" )"	3230:11:95874:95902	687717	0	True				
ANR	691061	CallExpression	"isOption ( arg , ""add-brackets"" )"		687717	0					
ANR	691062	Callee	isOption		687717	0					
ANR	691063	Identifier	isOption		687717	0					
ANR	691064	ArgumentList	arg		687717	1					
ANR	691065	Argument	arg		687717	0					
ANR	691066	Identifier	arg		687717	0					
ANR	691067	Argument	"""add-brackets"""		687717	1					
ANR	691068	PrimaryExpression	"""add-brackets"""		687717	0					
ANR	691069	CompoundStatement		528:1:14671:14671	687717	1					
ANR	691070	ExpressionStatement	formatter . setAddBracketsMode ( true )	3232:2:95941:95975	687717	0	True				
ANR	691071	CallExpression	formatter . setAddBracketsMode ( true )		687717	0					
ANR	691072	Callee	formatter . setAddBracketsMode		687717	0					
ANR	691073	MemberAccess	formatter . setAddBracketsMode		687717	0					
ANR	691074	Identifier	formatter		687717	0					
ANR	691075	Identifier	setAddBracketsMode		687717	1					
ANR	691076	ArgumentList	true		687717	1					
ANR	691077	Argument	true		687717	0					
ANR	691078	Identifier	true		687717	0					
ANR	691079	ElseStatement	else		687717	0					
ANR	691080	IfStatement	"if ( isOption ( arg , ""add-one-line-brackets"" ) )"		687717	0					
ANR	691081	Condition	"isOption ( arg , ""add-one-line-brackets"" )"	3234:11:95991:96028	687717	0	True				
ANR	691082	CallExpression	"isOption ( arg , ""add-one-line-brackets"" )"		687717	0					
ANR	691083	Callee	isOption		687717	0					
ANR	691084	Identifier	isOption		687717	0					
ANR	691085	ArgumentList	arg		687717	1					
ANR	691086	Argument	arg		687717	0					
ANR	691087	Identifier	arg		687717	0					
ANR	691088	Argument	"""add-one-line-brackets"""		687717	1					
ANR	691089	PrimaryExpression	"""add-one-line-brackets"""		687717	0					
ANR	691090	CompoundStatement		532:1:14795:14795	687717	1					
ANR	691091	ExpressionStatement	formatter . setAddOneLineBracketsMode ( true )	3236:2:96065:96106	687717	0	True				
ANR	691092	CallExpression	formatter . setAddOneLineBracketsMode ( true )		687717	0					
ANR	691093	Callee	formatter . setAddOneLineBracketsMode		687717	0					
ANR	691094	MemberAccess	formatter . setAddOneLineBracketsMode		687717	0					
ANR	691095	Identifier	formatter		687717	0					
ANR	691096	Identifier	setAddOneLineBracketsMode		687717	1					
ANR	691097	ArgumentList	true		687717	1					
ANR	691098	Argument	true		687717	0					
ANR	691099	Identifier	true		687717	0					
ANR	691100	ElseStatement	else		687717	0					
ANR	691101	IfStatement	"if ( isOption ( arg , ""remove-brackets"" ) )"		687717	0					
ANR	691102	Condition	"isOption ( arg , ""remove-brackets"" )"	3238:11:96122:96153	687717	0	True				
ANR	691103	CallExpression	"isOption ( arg , ""remove-brackets"" )"		687717	0					
ANR	691104	Callee	isOption		687717	0					
ANR	691105	Identifier	isOption		687717	0					
ANR	691106	ArgumentList	arg		687717	1					
ANR	691107	Argument	arg		687717	0					
ANR	691108	Identifier	arg		687717	0					
ANR	691109	Argument	"""remove-brackets"""		687717	1					
ANR	691110	PrimaryExpression	"""remove-brackets"""		687717	0					
ANR	691111	CompoundStatement		536:1:14921:14921	687717	1					
ANR	691112	ExpressionStatement	formatter . setRemoveBracketsMode ( true )	3240:2:96191:96228	687717	0	True				
ANR	691113	CallExpression	formatter . setRemoveBracketsMode ( true )		687717	0					
ANR	691114	Callee	formatter . setRemoveBracketsMode		687717	0					
ANR	691115	MemberAccess	formatter . setRemoveBracketsMode		687717	0					
ANR	691116	Identifier	formatter		687717	0					
ANR	691117	Identifier	setRemoveBracketsMode		687717	1					
ANR	691118	ArgumentList	true		687717	1					
ANR	691119	Argument	true		687717	0					
ANR	691120	Identifier	true		687717	0					
ANR	691121	ElseStatement	else		687717	0					
ANR	691122	IfStatement	"if ( isParamOption ( arg , ""max-instatement-indent="" ) )"		687717	0					
ANR	691123	Condition	"isParamOption ( arg , ""max-instatement-indent="" )"	3242:11:96244:96288	687717	0	True				
ANR	691124	CallExpression	"isParamOption ( arg , ""max-instatement-indent="" )"		687717	0					
ANR	691125	Callee	isParamOption		687717	0					
ANR	691126	Identifier	isParamOption		687717	0					
ANR	691127	ArgumentList	arg		687717	1					
ANR	691128	Argument	arg		687717	0					
ANR	691129	Identifier	arg		687717	0					
ANR	691130	Argument	"""max-instatement-indent="""		687717	1					
ANR	691131	PrimaryExpression	"""max-instatement-indent="""		687717	0					
ANR	691132	CompoundStatement		542:2:15080:15144	687717	1					
ANR	691133	IdentifierDeclStatement	int maxIndent = 40 ;	3244:2:96324:96342	687717	0	True				
ANR	691134	IdentifierDecl	maxIndent = 40		687717	0					
ANR	691135	IdentifierDeclType	int		687717	0					
ANR	691136	Identifier	maxIndent		687717	1					
ANR	691137	AssignmentExpression	maxIndent = 40		687717	2		=			
ANR	691138	Identifier	maxIndent		687717	0					
ANR	691139	PrimaryExpression	40		687717	1					
ANR	691140	IdentifierDeclStatement	"string maxIndentParam = getParam ( arg , ""max-instatement-indent="" ) ;"	3245:2:96346:96410	687717	1	True				
ANR	691141	IdentifierDecl	"maxIndentParam = getParam ( arg , ""max-instatement-indent="" )"		687717	0					
ANR	691142	IdentifierDeclType	string		687717	0					
ANR	691143	Identifier	maxIndentParam		687717	1					
ANR	691144	AssignmentExpression	"maxIndentParam = getParam ( arg , ""max-instatement-indent="" )"		687717	2		=			
ANR	691145	Identifier	maxIndentParam		687717	0					
ANR	691146	CallExpression	"getParam ( arg , ""max-instatement-indent="" )"		687717	1					
ANR	691147	Callee	getParam		687717	0					
ANR	691148	Identifier	getParam		687717	0					
ANR	691149	ArgumentList	arg		687717	1					
ANR	691150	Argument	arg		687717	0					
ANR	691151	Identifier	arg		687717	0					
ANR	691152	Argument	"""max-instatement-indent="""		687717	1					
ANR	691153	PrimaryExpression	"""max-instatement-indent="""		687717	0					
ANR	691154	IfStatement	if ( maxIndentParam . length ( ) > 0 )		687717	2					
ANR	691155	Condition	maxIndentParam . length ( ) > 0	3246:6:96418:96444	687717	0	True				
ANR	691156	RelationalExpression	maxIndentParam . length ( ) > 0		687717	0		>			
ANR	691157	CallExpression	maxIndentParam . length ( )		687717	0					
ANR	691158	Callee	maxIndentParam . length		687717	0					
ANR	691159	MemberAccess	maxIndentParam . length		687717	0					
ANR	691160	Identifier	maxIndentParam		687717	0					
ANR	691161	Identifier	length		687717	1					
ANR	691162	ArgumentList			687717	1					
ANR	691163	PrimaryExpression	0		687717	1					
ANR	691164	ExpressionStatement	maxIndent = atoi ( maxIndentParam . c_str ( ) )	3247:3:96450:96490	687717	1	True				
ANR	691165	AssignmentExpression	maxIndent = atoi ( maxIndentParam . c_str ( ) )		687717	0		=			
ANR	691166	Identifier	maxIndent		687717	0					
ANR	691167	CallExpression	atoi ( maxIndentParam . c_str ( ) )		687717	1					
ANR	691168	Callee	atoi		687717	0					
ANR	691169	Identifier	atoi		687717	0					
ANR	691170	ArgumentList	maxIndentParam . c_str ( )		687717	1					
ANR	691171	Argument	maxIndentParam . c_str ( )		687717	0					
ANR	691172	CallExpression	maxIndentParam . c_str ( )		687717	0					
ANR	691173	Callee	maxIndentParam . c_str		687717	0					
ANR	691174	MemberAccess	maxIndentParam . c_str		687717	0					
ANR	691175	Identifier	maxIndentParam		687717	0					
ANR	691176	Identifier	c_str		687717	1					
ANR	691177	ArgumentList			687717	1					
ANR	691178	IfStatement	if ( maxIndent < 40 )		687717	3					
ANR	691179	Condition	maxIndent < 40	3248:6:96498:96511	687717	0	True				
ANR	691180	RelationalExpression	maxIndent < 40		687717	0		<			
ANR	691181	Identifier	maxIndent		687717	0					
ANR	691182	PrimaryExpression	40		687717	1					
ANR	691183	ExpressionStatement	"isOptionError ( arg , errorInfo )"	3249:3:96517:96546	687717	1	True				
ANR	691184	CallExpression	"isOptionError ( arg , errorInfo )"		687717	0					
ANR	691185	Callee	isOptionError		687717	0					
ANR	691186	Identifier	isOptionError		687717	0					
ANR	691187	ArgumentList	arg		687717	1					
ANR	691188	Argument	arg		687717	0					
ANR	691189	Identifier	arg		687717	0					
ANR	691190	Argument	errorInfo		687717	1					
ANR	691191	Identifier	errorInfo		687717	0					
ANR	691192	ElseStatement	else		687717	0					
ANR	691193	IfStatement	if ( maxIndent > 120 )		687717	0					
ANR	691194	Condition	maxIndent > 120	3250:11:96559:96573	687717	0	True				
ANR	691195	RelationalExpression	maxIndent > 120		687717	0		>			
ANR	691196	Identifier	maxIndent		687717	0					
ANR	691197	PrimaryExpression	120		687717	1					
ANR	691198	ExpressionStatement	"isOptionError ( arg , errorInfo )"	3251:3:96579:96608	687717	1	True				
ANR	691199	CallExpression	"isOptionError ( arg , errorInfo )"		687717	0					
ANR	691200	Callee	isOptionError		687717	0					
ANR	691201	Identifier	isOptionError		687717	0					
ANR	691202	ArgumentList	arg		687717	1					
ANR	691203	Argument	arg		687717	0					
ANR	691204	Identifier	arg		687717	0					
ANR	691205	Argument	errorInfo		687717	1					
ANR	691206	Identifier	errorInfo		687717	0					
ANR	691207	ElseStatement	else		687717	0					
ANR	691208	ExpressionStatement	formatter . setMaxInStatementIndentLength ( maxIndent )	3253:3:96620:96670	687717	0	True				
ANR	691209	CallExpression	formatter . setMaxInStatementIndentLength ( maxIndent )		687717	0					
ANR	691210	Callee	formatter . setMaxInStatementIndentLength		687717	0					
ANR	691211	MemberAccess	formatter . setMaxInStatementIndentLength		687717	0					
ANR	691212	Identifier	formatter		687717	0					
ANR	691213	Identifier	setMaxInStatementIndentLength		687717	1					
ANR	691214	ArgumentList	maxIndent		687717	1					
ANR	691215	Argument	maxIndent		687717	0					
ANR	691216	Identifier	maxIndent		687717	0					
ANR	691217	ElseStatement	else		687717	0					
ANR	691218	ExpressionStatement	"isOptionError ( arg , errorInfo )"	3280:2:97494:97523	687717	0	True				
ANR	691219	CallExpression	"isOptionError ( arg , errorInfo )"		687717	0					
ANR	691220	Callee	isOptionError		687717	0					
ANR	691221	Identifier	isOptionError		687717	0					
ANR	691222	ArgumentList	arg		687717	1					
ANR	691223	Argument	arg		687717	0					
ANR	691224	Identifier	arg		687717	0					
ANR	691225	Argument	errorInfo		687717	1					
ANR	691226	Identifier	errorInfo		687717	0					
ANR	691227	ReturnType	void		687717	1					
ANR	691228	Identifier	ASOptions :: parseOption		687717	2					
ANR	691229	ParameterList	"const string & arg , const string & errorInfo"		687717	3					
ANR	691230	Parameter	const string & arg	2703:28:81221:81237	687717	0	True				
ANR	691231	ParameterType	const string &		687717	0					
ANR	691232	Identifier	arg		687717	1					
ANR	691233	Parameter	const string & errorInfo	2703:47:81240:81262	687717	1	True				
ANR	691234	ParameterType	const string &		687717	0					
ANR	691235	Identifier	errorInfo		687717	1					
ANR	691236	CFGEntryNode	ENTRY		687717		True				
ANR	691237	CFGExitNode	EXIT		687717		True				
ANR	691238	Symbol	isParamOption		687717						
ANR	691239	Symbol	COLON_PAD_BEFORE		687717						
ANR	691240	Symbol	styleParam . length		687717						
ANR	691241	Symbol	maxIndentParam . c_str		687717						
ANR	691242	Symbol	STYLE_HORSTMANN		687717						
ANR	691243	Symbol	contIndentParam . c_str		687717						
ANR	691244	Symbol	STYLE_LISP		687717						
ANR	691245	Symbol	contIndent		687717						
ANR	691246	Symbol	align		687717						
ANR	691247	Symbol	maxLengthParam . length		687717						
ANR	691248	Symbol	STYLE_JAVA		687717						
ANR	691249	Symbol	STYLE_PICO		687717						
ANR	691250	Symbol	STYLE_MOZILLA		687717						
ANR	691251	Symbol	maxIndentParam		687717						
ANR	691252	Symbol	STYLE_WHITESMITH		687717						
ANR	691253	Symbol	maxIndent		687717						
ANR	691254	Symbol	styleParam		687717						
ANR	691255	Symbol	getParam		687717						
ANR	691256	Symbol	minIndent		687717						
ANR	691257	Symbol	PTR_ALIGN_NAME		687717						
ANR	691258	Symbol	minIndentParam . c_str		687717						
ANR	691259	Symbol	spaceNum		687717						
ANR	691260	Symbol	formatter		687717						
ANR	691261	Symbol	contIndentParam		687717						
ANR	691262	Symbol	STYLE_1TBS		687717						
ANR	691263	Symbol	tabNumParam . length		687717						
ANR	691264	Symbol	true		687717						
ANR	691265	Symbol	style		687717						
ANR	691266	Symbol	REF_ALIGN_NAME		687717						
ANR	691267	Symbol	maxLength		687717						
ANR	691268	Symbol	PTR_ALIGN_MIDDLE		687717						
ANR	691269	Symbol	spaceNumParam		687717						
ANR	691270	Symbol	minIndentParam		687717						
ANR	691271	Symbol	STYLE_STROUSTRUP		687717						
ANR	691272	Symbol	MINCOND_END		687717						
ANR	691273	Symbol	tabNum		687717						
ANR	691274	Symbol	contIndentParam . length		687717						
ANR	691275	Symbol	isOption		687717						
ANR	691276	Symbol	COLON_PAD_NONE		687717						
ANR	691277	Symbol	errorInfo		687717						
ANR	691278	Symbol	styleParam . c_str		687717						
ANR	691279	Symbol	tabNumParam		687717						
ANR	691280	Symbol	maxIndentParam . length		687717						
ANR	691281	Symbol	REF_ALIGN_NONE		687717						
ANR	691282	Symbol	MINCOND_TWO		687717						
ANR	691283	Symbol	arg		687717						
ANR	691284	Symbol	STYLE_VTK		687717						
ANR	691285	Symbol	REF_ALIGN_MIDDLE		687717						
ANR	691286	Symbol	maxLengthParam		687717						
ANR	691287	Symbol	STYLE_ALLMAN		687717						
ANR	691288	Symbol	atoi		687717						
ANR	691289	Symbol	STYLE_GOOGLE		687717						
ANR	691290	Symbol	STYLE_GNU		687717						
ANR	691291	Symbol	tabNumParam . c_str		687717						
ANR	691292	Symbol	false		687717						
ANR	691293	Symbol	COLON_PAD_ALL		687717						
ANR	691294	Symbol	STYLE_KR		687717						
ANR	691295	Symbol	spaceNumParam . c_str		687717						
ANR	691296	Symbol	STYLE_BANNER		687717						
ANR	691297	Symbol	maxLengthParam . c_str		687717						
ANR	691298	Symbol	PTR_ALIGN_TYPE		687717						
ANR	691299	Symbol	REF_ALIGN_TYPE		687717						
ANR	691300	Symbol	minIndentParam . length		687717						
ANR	691301	Symbol	STYLE_LINUX		687717						
ANR	691302	Symbol	spaceNumParam . length		687717						
ANR	691303	Symbol	COLON_PAD_AFTER		687717						
ANR	691304	Function	ASOptions :: importOptions	3382:0:100089:100993							
ANR	691305	FunctionDef	"ASOptions :: importOptions (istream & in , vector < string > & optionsVector)"		691304	0					
ANR	691306	CompoundStatement		3383:0:100163:100993	691304	0					
ANR	691307	IdentifierDeclStatement	char ch ;	3384:1:100166:100173	691304	0	True				
ANR	691308	IdentifierDecl	ch		691304	0					
ANR	691309	IdentifierDeclType	char		691304	0					
ANR	691310	Identifier	ch		691304	1					
ANR	691311	IdentifierDeclStatement	bool isInQuote = false ;	3385:1:100176:100198	691304	1	True				
ANR	691312	IdentifierDecl	isInQuote = false		691304	0					
ANR	691313	IdentifierDeclType	bool		691304	0					
ANR	691314	Identifier	isInQuote		691304	1					
ANR	691315	AssignmentExpression	isInQuote = false		691304	2		=			
ANR	691316	Identifier	false		691304	0					
ANR	691317	Identifier	false		691304	1					
ANR	691318	IdentifierDeclStatement	char quoteChar = ' ' ;	3386:1:100201:100221	691304	2	True				
ANR	691319	IdentifierDecl	quoteChar = ' '		691304	0					
ANR	691320	IdentifierDeclType	char		691304	0					
ANR	691321	Identifier	quoteChar		691304	1					
ANR	691322	AssignmentExpression	quoteChar = ' '		691304	2		=			
ANR	691323	Identifier	quoteChar		691304	0					
ANR	691324	PrimaryExpression	' '		691304	1					
ANR	691325	IdentifierDeclStatement	string currentToken ;	3387:1:100224:100243	691304	3	True				
ANR	691326	IdentifierDecl	currentToken		691304	0					
ANR	691327	IdentifierDeclType	string		691304	0					
ANR	691328	Identifier	currentToken		691304	1					
ANR	691329	WhileStatement	while ( in )		691304	4					
ANR	691330	Condition	in	3389:8:100254:100255	691304	0	True				
ANR	691331	Identifier	in		691304	0					
ANR	691332	CompoundStatement		8:1:95:95	691304	1					
ANR	691333	ExpressionStatement	"currentToken = """""	3391:2:100263:100280	691304	0	True				
ANR	691334	AssignmentExpression	"currentToken = """""		691304	0		=			
ANR	691335	Identifier	currentToken		691304	0					
ANR	691336	PrimaryExpression	""""""		691304	1					
ANR	691337	DoStatement	do		691304	1					
ANR	691338	CompoundStatement		11:2:125:125	691304	0					
ANR	691339	ExpressionStatement	in . get ( ch )	3394:3:100294:100304	691304	0	True				
ANR	691340	CallExpression	in . get ( ch )		691304	0					
ANR	691341	Callee	in . get		691304	0					
ANR	691342	MemberAccess	in . get		691304	0					
ANR	691343	Identifier	in		691304	0					
ANR	691344	Identifier	get		691304	1					
ANR	691345	ArgumentList	ch		691304	1					
ANR	691346	Argument	ch		691304	0					
ANR	691347	Identifier	ch		691304	0					
ANR	691348	IfStatement	if ( in . eof ( ) )		691304	1					
ANR	691349	Condition	in . eof ( )	3395:7:100313:100320	691304	0	True				
ANR	691350	CallExpression	in . eof ( )		691304	0					
ANR	691351	Callee	in . eof		691304	0					
ANR	691352	MemberAccess	in . eof		691304	0					
ANR	691353	Identifier	in		691304	0					
ANR	691354	Identifier	eof		691304	1					
ANR	691355	ArgumentList			691304	1					
ANR	691356	BreakStatement	break ;	3396:4:100327:100332	691304	1	True				
ANR	691357	IfStatement	if ( ch == '#' )		691304	2					
ANR	691358	Condition	ch == '#'	3398:7:100374:100382	691304	0	True				
ANR	691359	EqualityExpression	ch == '#'		691304	0		==			
ANR	691360	Identifier	ch		691304	0					
ANR	691361	PrimaryExpression	'#'		691304	1					
ANR	691362	WhileStatement	while ( in )		691304	1					
ANR	691363	Condition	in	3399:11:100396:100397	691304	0	True				
ANR	691364	Identifier	in		691304	0					
ANR	691365	CompoundStatement		18:4:240:240	691304	1					
ANR	691366	ExpressionStatement	in . get ( ch )	3401:5:100411:100421	691304	0	True				
ANR	691367	CallExpression	in . get ( ch )		691304	0					
ANR	691368	Callee	in . get		691304	0					
ANR	691369	MemberAccess	in . get		691304	0					
ANR	691370	Identifier	in		691304	0					
ANR	691371	Identifier	get		691304	1					
ANR	691372	ArgumentList	ch		691304	1					
ANR	691373	Argument	ch		691304	0					
ANR	691374	Identifier	ch		691304	0					
ANR	691375	IfStatement	if ( ch == '\\n' || ch == '\\r' )		691304	1					
ANR	691376	Condition	ch == '\\n' || ch == '\\r'	3402:9:100432:100455	691304	0	True				
ANR	691377	OrExpression	ch == '\\n' || ch == '\\r'		691304	0		||			
ANR	691378	EqualityExpression	ch == '\\n'		691304	0		==			
ANR	691379	Identifier	ch		691304	0					
ANR	691380	PrimaryExpression	'\\n'		691304	1					
ANR	691381	EqualityExpression	ch == '\\r'		691304	1		==			
ANR	691382	Identifier	ch		691304	0					
ANR	691383	PrimaryExpression	'\\r'		691304	1					
ANR	691384	BreakStatement	break ;	3403:6:100464:100469	691304	1	True				
ANR	691385	IfStatement	"if ( in . eof ( ) || ch == '\\n' || ch == '\\r' || ch == '\\t' || ch == ',' )"		691304	3					
ANR	691386	Condition	"in . eof ( ) || ch == '\\n' || ch == '\\r' || ch == '\\t' || ch == ','"	3408:7:100575:100637	691304	0	True				
ANR	691387	OrExpression	"in . eof ( ) || ch == '\\n' || ch == '\\r' || ch == '\\t' || ch == ','"		691304	0		||			
ANR	691388	CallExpression	in . eof ( )		691304	0					
ANR	691389	Callee	in . eof		691304	0					
ANR	691390	MemberAccess	in . eof		691304	0					
ANR	691391	Identifier	in		691304	0					
ANR	691392	Identifier	eof		691304	1					
ANR	691393	ArgumentList			691304	1					
ANR	691394	OrExpression	"ch == '\\n' || ch == '\\r' || ch == '\\t' || ch == ','"		691304	1		||			
ANR	691395	EqualityExpression	ch == '\\n'		691304	0		==			
ANR	691396	Identifier	ch		691304	0					
ANR	691397	PrimaryExpression	'\\n'		691304	1					
ANR	691398	OrExpression	"ch == '\\r' || ch == '\\t' || ch == ','"		691304	1		||			
ANR	691399	EqualityExpression	ch == '\\r'		691304	0		==			
ANR	691400	Identifier	ch		691304	0					
ANR	691401	PrimaryExpression	'\\r'		691304	1					
ANR	691402	OrExpression	"ch == '\\t' || ch == ','"		691304	1		||			
ANR	691403	EqualityExpression	ch == '\\t'		691304	0		==			
ANR	691404	Identifier	ch		691304	0					
ANR	691405	PrimaryExpression	'\\t'		691304	1					
ANR	691406	EqualityExpression	"ch == ','"		691304	1		==			
ANR	691407	Identifier	ch		691304	0					
ANR	691408	PrimaryExpression	"','"		691304	1					
ANR	691409	BreakStatement	break ;	3409:4:100644:100649	691304	1	True				
ANR	691410	IfStatement	if ( ch == ' ' && ! isInQuote )		691304	4					
ANR	691411	Condition	ch == ' ' && ! isInQuote	3410:7:100658:100680	691304	0	True				
ANR	691412	AndExpression	ch == ' ' && ! isInQuote		691304	0		&&			
ANR	691413	EqualityExpression	ch == ' '		691304	0		==			
ANR	691414	Identifier	ch		691304	0					
ANR	691415	PrimaryExpression	' '		691304	1					
ANR	691416	UnaryOperationExpression	! isInQuote		691304	1					
ANR	691417	UnaryOperator	!		691304	0					
ANR	691418	Identifier	isInQuote		691304	1					
ANR	691419	BreakStatement	break ;	3411:4:100687:100692	691304	1	True				
ANR	691420	IfStatement	if ( ch == quoteChar && isInQuote )		691304	5					
ANR	691421	Condition	ch == quoteChar && isInQuote	3412:7:100701:100728	691304	0	True				
ANR	691422	AndExpression	ch == quoteChar && isInQuote		691304	0		&&			
ANR	691423	EqualityExpression	ch == quoteChar		691304	0		==			
ANR	691424	Identifier	ch		691304	0					
ANR	691425	Identifier	quoteChar		691304	1					
ANR	691426	Identifier	isInQuote		691304	1					
ANR	691427	BreakStatement	break ;	3413:4:100735:100740	691304	1	True				
ANR	691428	IfStatement	"if ( ch == '""' || ch == '\\'' )"		691304	6					
ANR	691429	Condition	"ch == '""' || ch == '\\''"	3414:7:100749:100771	691304	0	True				
ANR	691430	OrExpression	"ch == '""' || ch == '\\''"		691304	0		||			
ANR	691431	EqualityExpression	"ch == '""'"		691304	0		==			
ANR	691432	Identifier	ch		691304	0					
ANR	691433	PrimaryExpression	"'""'"		691304	1					
ANR	691434	EqualityExpression	ch == '\\''		691304	1		==			
ANR	691435	Identifier	ch		691304	0					
ANR	691436	PrimaryExpression	'\\''		691304	1					
ANR	691437	CompoundStatement		33:3:613:613	691304	1					
ANR	691438	ExpressionStatement	isInQuote = true	3416:4:100783:100799	691304	0	True				
ANR	691439	AssignmentExpression	isInQuote = true		691304	0		=			
ANR	691440	Identifier	isInQuote		691304	0					
ANR	691441	Identifier	true		691304	1					
ANR	691442	ExpressionStatement	quoteChar = ch	3417:4:100805:100819	691304	1	True				
ANR	691443	AssignmentExpression	quoteChar = ch		691304	0		=			
ANR	691444	Identifier	quoteChar		691304	0					
ANR	691445	Identifier	ch		691304	1					
ANR	691446	ContinueStatement	continue ;	3418:4:100825:100833	691304	2	True				
ANR	691447	ExpressionStatement	"currentToken . append ( 1 , ch )"	3420:3:100843:100869	691304	7	True				
ANR	691448	CallExpression	"currentToken . append ( 1 , ch )"		691304	0					
ANR	691449	Callee	currentToken . append		691304	0					
ANR	691450	MemberAccess	currentToken . append		691304	0					
ANR	691451	Identifier	currentToken		691304	0					
ANR	691452	Identifier	append		691304	1					
ANR	691453	ArgumentList	1		691304	1					
ANR	691454	Argument	1		691304	0					
ANR	691455	PrimaryExpression	1		691304	0					
ANR	691456	Argument	ch		691304	1					
ANR	691457	Identifier	ch		691304	0					
ANR	691458	Condition	in	3422:9:100884:100885	691304	1	True				
ANR	691459	Identifier	in		691304	0					
ANR	691460	IfStatement	if ( currentToken . length ( ) != 0 )		691304	2					
ANR	691461	Condition	currentToken . length ( ) != 0	3424:6:100896:100921	691304	0	True				
ANR	691462	EqualityExpression	currentToken . length ( ) != 0		691304	0		!=			
ANR	691463	CallExpression	currentToken . length ( )		691304	0					
ANR	691464	Callee	currentToken . length		691304	0					
ANR	691465	MemberAccess	currentToken . length		691304	0					
ANR	691466	Identifier	currentToken		691304	0					
ANR	691467	Identifier	length		691304	1					
ANR	691468	ArgumentList			691304	1					
ANR	691469	PrimaryExpression	0		691304	1					
ANR	691470	ExpressionStatement	optionsVector . emplace_back ( currentToken )	3425:3:100927:100967	691304	1	True				
ANR	691471	CallExpression	optionsVector . emplace_back ( currentToken )		691304	0					
ANR	691472	Callee	optionsVector . emplace_back		691304	0					
ANR	691473	MemberAccess	optionsVector . emplace_back		691304	0					
ANR	691474	Identifier	optionsVector		691304	0					
ANR	691475	Identifier	emplace_back		691304	1					
ANR	691476	ArgumentList	currentToken		691304	1					
ANR	691477	Argument	currentToken		691304	0					
ANR	691478	Identifier	currentToken		691304	0					
ANR	691479	ExpressionStatement	isInQuote = false	3426:2:100971:100988	691304	3	True				
ANR	691480	AssignmentExpression	isInQuote = false		691304	0		=			
ANR	691481	Identifier	isInQuote		691304	0					
ANR	691482	Identifier	false		691304	1					
ANR	691483	ReturnType	void		691304	1					
ANR	691484	Identifier	ASOptions :: importOptions		691304	2					
ANR	691485	ParameterList	"istream & in , vector < string > & optionsVector"		691304	3					
ANR	691486	Parameter	istream & in	3382:30:100119:100129	691304	0	True				
ANR	691487	ParameterType	istream &		691304	0					
ANR	691488	Identifier	in		691304	1					
ANR	691489	Parameter	vector < string > & optionsVector	3382:43:100132:100160	691304	1	True				
ANR	691490	ParameterType	vector < string > &		691304	0					
ANR	691491	Identifier	optionsVector		691304	1					
ANR	691492	CFGEntryNode	ENTRY		691304		True				
ANR	691493	CFGExitNode	EXIT		691304		True				
ANR	691494	Symbol	optionsVector		691304						
ANR	691495	Symbol	currentToken		691304						
ANR	691496	Symbol	quoteChar		691304						
ANR	691497	Symbol	in . eof		691304						
ANR	691498	Symbol	currentToken . length		691304						
ANR	691499	Symbol	in		691304						
ANR	691500	Symbol	ch		691304						
ANR	691501	Symbol	false		691304						
ANR	691502	Symbol	true		691304						
ANR	691503	Symbol	isInQuote		691304						
ANR	691504	Function	ASOptions :: getOptionErrors	3430:0:100996:101068							
ANR	691505	FunctionDef	ASOptions :: getOptionErrors ()		691504	0					
ANR	691506	CompoundStatement		3431:0:101038:101068	691504	0					
ANR	691507	ReturnStatement	return optionErrors . str ( ) ;	3432:1:101041:101066	691504	0	True				
ANR	691508	CallExpression	optionErrors . str ( )		691504	0					
ANR	691509	Callee	optionErrors . str		691504	0					
ANR	691510	MemberAccess	optionErrors . str		691504	0					
ANR	691511	Identifier	optionErrors		691504	0					
ANR	691512	Identifier	str		691504	1					
ANR	691513	ArgumentList			691504	1					
ANR	691514	ReturnType	string		691504	1					
ANR	691515	Identifier	ASOptions :: getOptionErrors		691504	2					
ANR	691516	ParameterList			691504	3					
ANR	691517	CFGEntryNode	ENTRY		691504		True				
ANR	691518	CFGExitNode	EXIT		691504		True				
ANR	691519	Symbol	optionErrors		691504						
ANR	691520	Symbol	optionErrors . str		691504						
ANR	691521	Function	ASOptions :: getParam	3435:0:101071:101167							
ANR	691522	FunctionDef	"ASOptions :: getParam (const string & arg , const char * op)"		691521	0					
ANR	691523	CompoundStatement		3436:0:101133:101167	691521	0					
ANR	691524	ReturnStatement	return arg . substr ( strlen ( op ) ) ;	3437:1:101136:101165	691521	0	True				
ANR	691525	CallExpression	arg . substr ( strlen ( op ) )		691521	0					
ANR	691526	Callee	arg . substr		691521	0					
ANR	691527	MemberAccess	arg . substr		691521	0					
ANR	691528	Identifier	arg		691521	0					
ANR	691529	Identifier	substr		691521	1					
ANR	691530	ArgumentList	strlen ( op )		691521	1					
ANR	691531	Argument	strlen ( op )		691521	0					
ANR	691532	CallExpression	strlen ( op )		691521	0					
ANR	691533	Callee	strlen		691521	0					
ANR	691534	Identifier	strlen		691521	0					
ANR	691535	ArgumentList	op		691521	1					
ANR	691536	Argument	op		691521	0					
ANR	691537	Identifier	op		691521	0					
ANR	691538	ReturnType	string		691521	1					
ANR	691539	Identifier	ASOptions :: getParam		691521	2					
ANR	691540	ParameterList	"const string & arg , const char * op"		691521	3					
ANR	691541	Parameter	const string & arg	3435:27:101098:101114	691521	0	True				
ANR	691542	ParameterType	const string &		691521	0					
ANR	691543	Identifier	arg		691521	1					
ANR	691544	Parameter	const char * op	3435:46:101117:101130	691521	1	True				
ANR	691545	ParameterType	const char *		691521	0					
ANR	691546	Identifier	op		691521	1					
ANR	691547	CFGEntryNode	ENTRY		691521		True				
ANR	691548	CFGExitNode	EXIT		691521		True				
ANR	691549	Symbol	op		691521						
ANR	691550	Symbol	strlen		691521						
ANR	691551	Symbol	arg . substr		691521						
ANR	691552	Symbol	arg		691521						
ANR	691553	Function	ASOptions :: getParam	3440:0:101170:101327							
ANR	691554	FunctionDef	"ASOptions :: getParam (const string & arg , const char * op1 , const char * op2)"		691553	0					
ANR	691555	CompoundStatement		3441:0:101250:101327	691553	0					
ANR	691556	ReturnStatement	"return isParamOption ( arg , op1 ) ? getParam ( arg , op1 ) : getParam ( arg , op2 ) ;"	3442:1:101253:101325	691553	0	True				
ANR	691557	ConditionalExpression	"isParamOption ( arg , op1 ) ? getParam ( arg , op1 ) : getParam ( arg , op2 )"		691553	0					
ANR	691558	Condition	"isParamOption ( arg , op1 )"		691553	0					
ANR	691559	CallExpression	"isParamOption ( arg , op1 )"		691553	0					
ANR	691560	Callee	isParamOption		691553	0					
ANR	691561	Identifier	isParamOption		691553	0					
ANR	691562	ArgumentList	arg		691553	1					
ANR	691563	Argument	arg		691553	0					
ANR	691564	Identifier	arg		691553	0					
ANR	691565	Argument	op1		691553	1					
ANR	691566	Identifier	op1		691553	0					
ANR	691567	CallExpression	"getParam ( arg , op1 )"		691553	1					
ANR	691568	Callee	getParam		691553	0					
ANR	691569	Identifier	getParam		691553	0					
ANR	691570	ArgumentList	arg		691553	1					
ANR	691571	Argument	arg		691553	0					
ANR	691572	Identifier	arg		691553	0					
ANR	691573	Argument	op1		691553	1					
ANR	691574	Identifier	op1		691553	0					
ANR	691575	CallExpression	"getParam ( arg , op2 )"		691553	2					
ANR	691576	Callee	getParam		691553	0					
ANR	691577	Identifier	getParam		691553	0					
ANR	691578	ArgumentList	arg		691553	1					
ANR	691579	Argument	arg		691553	0					
ANR	691580	Identifier	arg		691553	0					
ANR	691581	Argument	op2		691553	1					
ANR	691582	Identifier	op2		691553	0					
ANR	691583	ReturnType	string		691553	1					
ANR	691584	Identifier	ASOptions :: getParam		691553	2					
ANR	691585	ParameterList	"const string & arg , const char * op1 , const char * op2"		691553	3					
ANR	691586	Parameter	const string & arg	3440:27:101197:101213	691553	0	True				
ANR	691587	ParameterType	const string &		691553	0					
ANR	691588	Identifier	arg		691553	1					
ANR	691589	Parameter	const char * op1	3440:46:101216:101230	691553	1	True				
ANR	691590	ParameterType	const char *		691553	0					
ANR	691591	Identifier	op1		691553	1					
ANR	691592	Parameter	const char * op2	3440:63:101233:101247	691553	2	True				
ANR	691593	ParameterType	const char *		691553	0					
ANR	691594	Identifier	op2		691553	1					
ANR	691595	CFGEntryNode	ENTRY		691553		True				
ANR	691596	CFGExitNode	EXIT		691553		True				
ANR	691597	Symbol	op2		691553						
ANR	691598	Symbol	isParamOption		691553						
ANR	691599	Symbol	op1		691553						
ANR	691600	Symbol	getParam		691553						
ANR	691601	Symbol	arg		691553						
ANR	691602	Function	ASOptions :: isOption	3445:0:101330:101422							
ANR	691603	FunctionDef	"ASOptions :: isOption (const string & arg , const char * op)"		691602	0					
ANR	691604	CompoundStatement		3446:0:101390:101422	691602	0					
ANR	691605	ReturnStatement	return arg . compare ( op ) == 0 ;	3447:1:101393:101420	691602	0	True				
ANR	691606	EqualityExpression	arg . compare ( op ) == 0		691602	0		==			
ANR	691607	CallExpression	arg . compare ( op )		691602	0					
ANR	691608	Callee	arg . compare		691602	0					
ANR	691609	MemberAccess	arg . compare		691602	0					
ANR	691610	Identifier	arg		691602	0					
ANR	691611	Identifier	compare		691602	1					
ANR	691612	ArgumentList	op		691602	1					
ANR	691613	Argument	op		691602	0					
ANR	691614	Identifier	op		691602	0					
ANR	691615	PrimaryExpression	0		691602	1					
ANR	691616	ReturnType	bool		691602	1					
ANR	691617	Identifier	ASOptions :: isOption		691602	2					
ANR	691618	ParameterList	"const string & arg , const char * op"		691602	3					
ANR	691619	Parameter	const string & arg	3445:25:101355:101371	691602	0	True				
ANR	691620	ParameterType	const string &		691602	0					
ANR	691621	Identifier	arg		691602	1					
ANR	691622	Parameter	const char * op	3445:44:101374:101387	691602	1	True				
ANR	691623	ParameterType	const char *		691602	0					
ANR	691624	Identifier	op		691602	1					
ANR	691625	CFGEntryNode	ENTRY		691602		True				
ANR	691626	CFGExitNode	EXIT		691602		True				
ANR	691627	Symbol	op		691602						
ANR	691628	Symbol	arg . compare		691602						
ANR	691629	Symbol	arg		691602						
ANR	691630	Function	ASOptions :: isOption	3450:0:101425:101557							
ANR	691631	FunctionDef	"ASOptions :: isOption (const string & arg , const char * op1 , const char * op2)"		691630	0					
ANR	691632	CompoundStatement		3451:0:101503:101557	691630	0					
ANR	691633	ReturnStatement	"return ( isOption ( arg , op1 ) || isOption ( arg , op2 ) ) ;"	3452:1:101506:101555	691630	0	True				
ANR	691634	OrExpression	"isOption ( arg , op1 ) || isOption ( arg , op2 )"		691630	0		||			
ANR	691635	CallExpression	"isOption ( arg , op1 )"		691630	0					
ANR	691636	Callee	isOption		691630	0					
ANR	691637	Identifier	isOption		691630	0					
ANR	691638	ArgumentList	arg		691630	1					
ANR	691639	Argument	arg		691630	0					
ANR	691640	Identifier	arg		691630	0					
ANR	691641	Argument	op1		691630	1					
ANR	691642	Identifier	op1		691630	0					
ANR	691643	CallExpression	"isOption ( arg , op2 )"		691630	1					
ANR	691644	Callee	isOption		691630	0					
ANR	691645	Identifier	isOption		691630	0					
ANR	691646	ArgumentList	arg		691630	1					
ANR	691647	Argument	arg		691630	0					
ANR	691648	Identifier	arg		691630	0					
ANR	691649	Argument	op2		691630	1					
ANR	691650	Identifier	op2		691630	0					
ANR	691651	ReturnType	bool		691630	1					
ANR	691652	Identifier	ASOptions :: isOption		691630	2					
ANR	691653	ParameterList	"const string & arg , const char * op1 , const char * op2"		691630	3					
ANR	691654	Parameter	const string & arg	3450:25:101450:101466	691630	0	True				
ANR	691655	ParameterType	const string &		691630	0					
ANR	691656	Identifier	arg		691630	1					
ANR	691657	Parameter	const char * op1	3450:44:101469:101483	691630	1	True				
ANR	691658	ParameterType	const char *		691630	0					
ANR	691659	Identifier	op1		691630	1					
ANR	691660	Parameter	const char * op2	3450:61:101486:101500	691630	2	True				
ANR	691661	ParameterType	const char *		691630	0					
ANR	691662	Identifier	op2		691630	1					
ANR	691663	CFGEntryNode	ENTRY		691630		True				
ANR	691664	CFGExitNode	EXIT		691630		True				
ANR	691665	Symbol	op2		691630						
ANR	691666	Symbol	op1		691630						
ANR	691667	Symbol	arg		691630						
ANR	691668	Symbol	isOption		691630						
ANR	691669	Function	ASOptions :: isOptionError	3455:0:101560:101771							
ANR	691670	FunctionDef	"ASOptions :: isOptionError (const string & arg , const string & errorInfo)"		691669	0					
ANR	691671	CompoundStatement		3456:0:101634:101771	691669	0					
ANR	691672	IfStatement	if ( optionErrors . str ( ) . length ( ) == 0 )		691669	0					
ANR	691673	Condition	optionErrors . str ( ) . length ( ) == 0	3457:5:101641:101672	691669	0	True				
ANR	691674	EqualityExpression	optionErrors . str ( ) . length ( ) == 0		691669	0		==			
ANR	691675	CallExpression	optionErrors . str ( ) . length ( )		691669	0					
ANR	691676	Callee	optionErrors . str ( ) . length		691669	0					
ANR	691677	MemberAccess	optionErrors . str ( ) . length		691669	0					
ANR	691678	CallExpression	optionErrors . str ( )		691669	0					
ANR	691679	Callee	optionErrors . str		691669	0					
ANR	691680	MemberAccess	optionErrors . str		691669	0					
ANR	691681	Identifier	optionErrors		691669	0					
ANR	691682	Identifier	str		691669	1					
ANR	691683	ArgumentList			691669	1					
ANR	691684	Identifier	length		691669	1					
ANR	691685	ArgumentList			691669	1					
ANR	691686	PrimaryExpression	0		691669	1					
ANR	691687	ExpressionStatement	optionErrors << errorInfo << endl	3458:2:101677:101710	691669	1	True				
ANR	691688	ShiftExpression	optionErrors << errorInfo << endl		691669	0		<<			
ANR	691689	Identifier	optionErrors		691669	0					
ANR	691690	ShiftExpression	errorInfo << endl		691669	1		<<			
ANR	691691	Identifier	errorInfo		691669	0					
ANR	691692	Identifier	endl		691669	1					
ANR	691693	ExpressionStatement	optionErrors << arg << endl	3459:1:101742:101769	691669	1	True				
ANR	691694	ShiftExpression	optionErrors << arg << endl		691669	0		<<			
ANR	691695	Identifier	optionErrors		691669	0					
ANR	691696	ShiftExpression	arg << endl		691669	1		<<			
ANR	691697	Identifier	arg		691669	0					
ANR	691698	Identifier	endl		691669	1					
ANR	691699	ReturnType	void		691669	1					
ANR	691700	Identifier	ASOptions :: isOptionError		691669	2					
ANR	691701	ParameterList	"const string & arg , const string & errorInfo"		691669	3					
ANR	691702	Parameter	const string & arg	3455:30:101590:101606	691669	0	True				
ANR	691703	ParameterType	const string &		691669	0					
ANR	691704	Identifier	arg		691669	1					
ANR	691705	Parameter	const string & errorInfo	3455:49:101609:101631	691669	1	True				
ANR	691706	ParameterType	const string &		691669	0					
ANR	691707	Identifier	errorInfo		691669	1					
ANR	691708	CFGEntryNode	ENTRY		691669		True				
ANR	691709	CFGExitNode	EXIT		691669		True				
ANR	691710	Symbol	arg		691669						
ANR	691711	Symbol	optionErrors		691669						
ANR	691712	Symbol	errorInfo		691669						
ANR	691713	Symbol	optionErrors . str ( ) . length		691669						
ANR	691714	Symbol	optionErrors . str		691669						
ANR	691715	Function	ASOptions :: isParamOption	3462:0:101774:102102							
ANR	691716	FunctionDef	"ASOptions :: isParamOption (const string & arg , const char * option)"		691715	0					
ANR	691717	CompoundStatement		3463:0:101843:102102	691715	0					
ANR	691718	IdentifierDeclStatement	"bool retVal = arg . compare ( 0 , strlen ( option ) , option ) == 0 ;"	3464:1:101846:101903	691715	0	True				
ANR	691719	IdentifierDecl	"retVal = arg . compare ( 0 , strlen ( option ) , option ) == 0"		691715	0					
ANR	691720	IdentifierDeclType	bool		691715	0					
ANR	691721	Identifier	retVal		691715	1					
ANR	691722	AssignmentExpression	"retVal = arg . compare ( 0 , strlen ( option ) , option ) == 0"		691715	2		=			
ANR	691723	Identifier	retVal		691715	0					
ANR	691724	EqualityExpression	"arg . compare ( 0 , strlen ( option ) , option ) == 0"		691715	1		==			
ANR	691725	CallExpression	"arg . compare ( 0 , strlen ( option ) , option )"		691715	0					
ANR	691726	Callee	arg . compare		691715	0					
ANR	691727	MemberAccess	arg . compare		691715	0					
ANR	691728	Identifier	arg		691715	0					
ANR	691729	Identifier	compare		691715	1					
ANR	691730	ArgumentList	0		691715	1					
ANR	691731	Argument	0		691715	0					
ANR	691732	PrimaryExpression	0		691715	0					
ANR	691733	Argument	strlen ( option )		691715	1					
ANR	691734	CallExpression	strlen ( option )		691715	0					
ANR	691735	Callee	strlen		691715	0					
ANR	691736	Identifier	strlen		691715	0					
ANR	691737	ArgumentList	option		691715	1					
ANR	691738	Argument	option		691715	0					
ANR	691739	Identifier	option		691715	0					
ANR	691740	Argument	option		691715	2					
ANR	691741	Identifier	option		691715	0					
ANR	691742	PrimaryExpression	0		691715	1					
ANR	691743	IfStatement	if ( retVal && strlen ( option ) == 1 && arg . length ( ) > 1 )		691715	1					
ANR	691744	Condition	retVal && strlen ( option ) == 1 && arg . length ( ) > 1	3466:5:101977:102025	691715	0	True				
ANR	691745	AndExpression	retVal && strlen ( option ) == 1 && arg . length ( ) > 1		691715	0		&&			
ANR	691746	Identifier	retVal		691715	0					
ANR	691747	AndExpression	strlen ( option ) == 1 && arg . length ( ) > 1		691715	1		&&			
ANR	691748	EqualityExpression	strlen ( option ) == 1		691715	0		==			
ANR	691749	CallExpression	strlen ( option )		691715	0					
ANR	691750	Callee	strlen		691715	0					
ANR	691751	Identifier	strlen		691715	0					
ANR	691752	ArgumentList	option		691715	1					
ANR	691753	Argument	option		691715	0					
ANR	691754	Identifier	option		691715	0					
ANR	691755	PrimaryExpression	1		691715	1					
ANR	691756	RelationalExpression	arg . length ( ) > 1		691715	1		>			
ANR	691757	CallExpression	arg . length ( )		691715	0					
ANR	691758	Callee	arg . length		691715	0					
ANR	691759	MemberAccess	arg . length		691715	0					
ANR	691760	Identifier	arg		691715	0					
ANR	691761	Identifier	length		691715	1					
ANR	691762	ArgumentList			691715	1					
ANR	691763	PrimaryExpression	1		691715	1					
ANR	691764	IfStatement	if ( ! isdigit ( ( unsigned char ) arg [ 1 ] ) )		691715	1					
ANR	691765	Condition	! isdigit ( ( unsigned char ) arg [ 1 ] )	3467:6:102034:102064	691715	0	True				
ANR	691766	UnaryOperationExpression	! isdigit ( ( unsigned char ) arg [ 1 ] )		691715	0					
ANR	691767	UnaryOperator	!		691715	0					
ANR	691768	CallExpression	isdigit ( ( unsigned char ) arg [ 1 ] )		691715	1					
ANR	691769	Callee	isdigit		691715	0					
ANR	691770	Identifier	isdigit		691715	0					
ANR	691771	ArgumentList	( unsigned char ) arg [ 1 ]		691715	1					
ANR	691772	Argument	( unsigned char ) arg [ 1 ]		691715	0					
ANR	691773	CastExpression	( unsigned char ) arg [ 1 ]		691715	0					
ANR	691774	CastTarget	unsigned char		691715	0					
ANR	691775	ArrayIndexing	arg [ 1 ]		691715	1					
ANR	691776	Identifier	arg		691715	0					
ANR	691777	PrimaryExpression	1		691715	1					
ANR	691778	ExpressionStatement	retVal = false	3468:3:102070:102084	691715	1	True				
ANR	691779	AssignmentExpression	retVal = false		691715	0		=			
ANR	691780	Identifier	retVal		691715	0					
ANR	691781	Identifier	false		691715	1					
ANR	691782	ReturnStatement	return retVal ;	3469:1:102087:102100	691715	2	True				
ANR	691783	Identifier	retVal		691715	0					
ANR	691784	ReturnType	bool		691715	1					
ANR	691785	Identifier	ASOptions :: isParamOption		691715	2					
ANR	691786	ParameterList	"const string & arg , const char * option"		691715	3					
ANR	691787	Parameter	const string & arg	3462:30:101804:101820	691715	0	True				
ANR	691788	ParameterType	const string &		691715	0					
ANR	691789	Identifier	arg		691715	1					
ANR	691790	Parameter	const char * option	3462:49:101823:101840	691715	1	True				
ANR	691791	ParameterType	const char *		691715	0					
ANR	691792	Identifier	option		691715	1					
ANR	691793	CFGEntryNode	ENTRY		691715		True				
ANR	691794	CFGExitNode	EXIT		691715		True				
ANR	691795	Symbol	strlen		691715						
ANR	691796	Symbol	arg . compare		691715						
ANR	691797	Symbol	arg		691715						
ANR	691798	Symbol	false		691715						
ANR	691799	Symbol	retVal		691715						
ANR	691800	Symbol	isdigit		691715						
ANR	691801	Symbol	option		691715						
ANR	691802	Symbol	arg . length		691715						
ANR	691803	Symbol	* arg		691715						
ANR	691804	Function	ASOptions :: isParamOption	3472:0:102105:102266							
ANR	691805	FunctionDef	"ASOptions :: isParamOption (const string & arg , const char * option1 , const char * option2)"		691804	0					
ANR	691806	CompoundStatement		3473:0:102196:102266	691804	0					
ANR	691807	ReturnStatement	"return isParamOption ( arg , option1 ) || isParamOption ( arg , option2 ) ;"	3474:1:102199:102264	691804	0	True				
ANR	691808	OrExpression	"isParamOption ( arg , option1 ) || isParamOption ( arg , option2 )"		691804	0		||			
ANR	691809	CallExpression	"isParamOption ( arg , option1 )"		691804	0					
ANR	691810	Callee	isParamOption		691804	0					
ANR	691811	Identifier	isParamOption		691804	0					
ANR	691812	ArgumentList	arg		691804	1					
ANR	691813	Argument	arg		691804	0					
ANR	691814	Identifier	arg		691804	0					
ANR	691815	Argument	option1		691804	1					
ANR	691816	Identifier	option1		691804	0					
ANR	691817	CallExpression	"isParamOption ( arg , option2 )"		691804	1					
ANR	691818	Callee	isParamOption		691804	0					
ANR	691819	Identifier	isParamOption		691804	0					
ANR	691820	ArgumentList	arg		691804	1					
ANR	691821	Argument	arg		691804	0					
ANR	691822	Identifier	arg		691804	0					
ANR	691823	Argument	option2		691804	1					
ANR	691824	Identifier	option2		691804	0					
ANR	691825	ReturnType	bool		691804	1					
ANR	691826	Identifier	ASOptions :: isParamOption		691804	2					
ANR	691827	ParameterList	"const string & arg , const char * option1 , const char * option2"		691804	3					
ANR	691828	Parameter	const string & arg	3472:30:102135:102151	691804	0	True				
ANR	691829	ParameterType	const string &		691804	0					
ANR	691830	Identifier	arg		691804	1					
ANR	691831	Parameter	const char * option1	3472:49:102154:102172	691804	1	True				
ANR	691832	ParameterType	const char *		691804	0					
ANR	691833	Identifier	option1		691804	1					
ANR	691834	Parameter	const char * option2	3472:70:102175:102193	691804	2	True				
ANR	691835	ParameterType	const char *		691804	0					
ANR	691836	Identifier	option2		691804	1					
ANR	691837	CFGEntryNode	ENTRY		691804		True				
ANR	691838	CFGExitNode	EXIT		691804		True				
ANR	691839	Symbol	isParamOption		691804						
ANR	691840	Symbol	arg		691804						
ANR	691841	Symbol	option1		691804						
ANR	691842	Symbol	option2		691804						
ANR	691843	Function	ASEncoding :: getBigEndian	3482:0:102488:102617							
ANR	691844	FunctionDef	ASEncoding :: getBigEndian ()		691843	0					
ANR	691845	CompoundStatement		3483:0:102526:102617	691843	0					
ANR	691846	IdentifierDeclStatement	short int word = 0x0001 ;	3484:1:102529:102552	691843	0	True				
ANR	691847	IdentifierDecl	word = 0x0001		691843	0					
ANR	691848	IdentifierDeclType	short int		691843	0					
ANR	691849	Identifier	word		691843	1					
ANR	691850	AssignmentExpression	word = 0x0001		691843	2		=			
ANR	691851	Identifier	word		691843	0					
ANR	691852	PrimaryExpression	0x0001		691843	1					
ANR	691853	IdentifierDeclStatement	char * byte = ( char * ) & word ;	3485:1:102555:102581	691843	1	True				
ANR	691854	IdentifierDecl	* byte = ( char * ) & word		691843	0					
ANR	691855	IdentifierDeclType	char *		691843	0					
ANR	691856	Identifier	byte		691843	1					
ANR	691857	AssignmentExpression	* byte = ( char * ) & word		691843	2		=			
ANR	691858	Identifier	byte		691843	0					
ANR	691859	CastExpression	( char * ) & word		691843	1					
ANR	691860	CastTarget	char *		691843	0					
ANR	691861	UnaryOperationExpression	& word		691843	1					
ANR	691862	UnaryOperator	&		691843	0					
ANR	691863	Identifier	word		691843	1					
ANR	691864	ReturnStatement	return ( byte [ 0 ] ? false : true ) ;	3486:1:102584:102615	691843	2	True				
ANR	691865	ConditionalExpression	byte [ 0 ] ? false : true		691843	0					
ANR	691866	Condition	byte [ 0 ]		691843	0					
ANR	691867	ArrayIndexing	byte [ 0 ]		691843	0					
ANR	691868	Identifier	byte		691843	0					
ANR	691869	PrimaryExpression	0		691843	1					
ANR	691870	Identifier	false		691843	1					
ANR	691871	Identifier	true		691843	2					
ANR	691872	ReturnType	bool		691843	1					
ANR	691873	Identifier	ASEncoding :: getBigEndian		691843	2					
ANR	691874	ParameterList			691843	3					
ANR	691875	CFGEntryNode	ENTRY		691843		True				
ANR	691876	CFGExitNode	EXIT		691843		True				
ANR	691877	Symbol	* byte		691843						
ANR	691878	Symbol	byte		691843						
ANR	691879	Symbol	& word		691843						
ANR	691880	Symbol	false		691843						
ANR	691881	Symbol	true		691843						
ANR	691882	Symbol	word		691843						
ANR	691883	Function	ASEncoding :: swap16bit	3490:0:102679:102785							
ANR	691884	FunctionDef	ASEncoding :: swap16bit (int value)		691883	0					
ANR	691885	CompoundStatement		3491:0:102722:102785	691883	0					
ANR	691886	ReturnStatement	return ( ( ( value & 0xff ) << 8 ) | ( ( value & 0xff00 ) >> 8 ) ) ;	3492:1:102725:102783	691883	0	True				
ANR	691887	InclusiveOrExpression	( ( value & 0xff ) << 8 ) | ( ( value & 0xff00 ) >> 8 )		691883	0		|			
ANR	691888	ShiftExpression	( value & 0xff ) << 8		691883	0		<<			
ANR	691889	BitAndExpression	value & 0xff		691883	0		&			
ANR	691890	Identifier	value		691883	0					
ANR	691891	PrimaryExpression	0xff		691883	1					
ANR	691892	PrimaryExpression	8		691883	1					
ANR	691893	ShiftExpression	( value & 0xff00 ) >> 8		691883	1		>>			
ANR	691894	BitAndExpression	value & 0xff00		691883	0		&			
ANR	691895	Identifier	value		691883	0					
ANR	691896	PrimaryExpression	0xff00		691883	1					
ANR	691897	PrimaryExpression	8		691883	1					
ANR	691898	ReturnType	int		691883	1					
ANR	691899	Identifier	ASEncoding :: swap16bit		691883	2					
ANR	691900	ParameterList	int value		691883	3					
ANR	691901	Parameter	int value	3490:26:102705:102713	691883	0	True				
ANR	691902	ParameterType	int		691883	0					
ANR	691903	Identifier	value		691883	1					
ANR	691904	CFGEntryNode	ENTRY		691883		True				
ANR	691905	CFGExitNode	EXIT		691883		True				
ANR	691906	Symbol	value		691883						
ANR	691907	Function	ASEncoding :: utf16len	3497:0:102870:103004							
ANR	691908	FunctionDef	ASEncoding :: utf16len (const utf16 * utf16In)		691907	0					
ANR	691909	CompoundStatement		3498:0:102926:103004	691907	0					
ANR	691910	IdentifierDeclStatement	size_t length = 0 ;	3499:1:102929:102946	691907	0	True				
ANR	691911	IdentifierDecl	length = 0		691907	0					
ANR	691912	IdentifierDeclType	size_t		691907	0					
ANR	691913	Identifier	length		691907	1					
ANR	691914	AssignmentExpression	length = 0		691907	2		=			
ANR	691915	Identifier	length		691907	0					
ANR	691916	PrimaryExpression	0		691907	1					
ANR	691917	WhileStatement	while ( * utf16In ++ != '\\0' )		691907	1					
ANR	691918	Condition	* utf16In ++ != '\\0'	3500:8:102956:102973	691907	0	True				
ANR	691919	EqualityExpression	* utf16In ++ != '\\0'		691907	0		!=			
ANR	691920	UnaryOperationExpression	* utf16In ++		691907	0					
ANR	691921	UnaryOperator	*		691907	0					
ANR	691922	PostIncDecOperationExpression	utf16In ++		691907	1					
ANR	691923	Identifier	utf16In		691907	0					
ANR	691924	IncDec	++		691907	1					
ANR	691925	PrimaryExpression	'\\0'		691907	1					
ANR	691926	ExpressionStatement	length ++	3501:2:102978:102986	691907	1	True				
ANR	691927	PostIncDecOperationExpression	length ++		691907	0					
ANR	691928	Identifier	length		691907	0					
ANR	691929	IncDec	++		691907	1					
ANR	691930	ReturnStatement	return length ;	3502:1:102989:103002	691907	2	True				
ANR	691931	Identifier	length		691907	0					
ANR	691932	ReturnType	size_t		691907	1					
ANR	691933	Identifier	ASEncoding :: utf16len		691907	2					
ANR	691934	ParameterList	const utf16 * utf16In		691907	3					
ANR	691935	Parameter	const utf16 * utf16In	3497:28:102898:102917	691907	0	True				
ANR	691936	ParameterType	const utf16 *		691907	0					
ANR	691937	Identifier	utf16In		691907	1					
ANR	691938	CFGEntryNode	ENTRY		691907		True				
ANR	691939	CFGExitNode	EXIT		691907		True				
ANR	691940	Symbol	* utf16In ++		691907						
ANR	691941	Symbol	length		691907						
ANR	691942	Symbol	utf16In		691907						
ANR	691943	Function	ASEncoding :: utf8LengthFromUtf16	3510:0:103273:103802							
ANR	691944	FunctionDef	"ASEncoding :: utf8LengthFromUtf16 (const char * utf16In , size_t inLen , bool isBigEndian)"		691943	0					
ANR	691945	CompoundStatement		3511:0:103371:103802	691943	0					
ANR	691946	IdentifierDeclStatement	size_t len = 0 ;	3512:1:103374:103388	691943	0	True				
ANR	691947	IdentifierDecl	len = 0		691943	0					
ANR	691948	IdentifierDeclType	size_t		691943	0					
ANR	691949	Identifier	len		691943	1					
ANR	691950	AssignmentExpression	len = 0		691943	2		=			
ANR	691951	Identifier	len		691943	0					
ANR	691952	PrimaryExpression	0		691943	1					
ANR	691953	IdentifierDeclStatement	size_t wcharLen = inLen / 2 ;	3513:1:103391:103418	691943	1	True				
ANR	691954	IdentifierDecl	wcharLen = inLen / 2		691943	0					
ANR	691955	IdentifierDeclType	size_t		691943	0					
ANR	691956	Identifier	wcharLen		691943	1					
ANR	691957	AssignmentExpression	wcharLen = inLen / 2		691943	2		=			
ANR	691958	Identifier	wcharLen		691943	0					
ANR	691959	MultiplicativeExpression	inLen / 2		691943	1		/			
ANR	691960	Identifier	inLen		691943	0					
ANR	691961	PrimaryExpression	2		691943	1					
ANR	691962	Statement	const	3514:1:103421:103425	691943	2	True				
ANR	691963	Statement	short	3514:7:103427:103431	691943	3	True				
ANR	691964	Statement	*	3514:12:103432:103432	691943	4	True				
ANR	691965	Statement	uptr	3514:14:103434:103437	691943	5	True				
ANR	691966	Statement	=	3514:19:103439:103439	691943	6	True				
ANR	691967	Statement	reinterpret_cast	3514:21:103441:103456	691943	7	True				
ANR	691968	Statement	<	3514:37:103457:103457	691943	8	True				
ANR	691969	Statement	const	3514:38:103458:103462	691943	9	True				
ANR	691970	Statement	short	3514:44:103464:103468	691943	10	True				
ANR	691971	Statement	*	3514:49:103469:103469	691943	11	True				
ANR	691972	Statement	>	3514:50:103470:103470	691943	12	True				
ANR	691973	ExpressionStatement	utf16In	3514:51:103471:103480	691943	13	True				
ANR	691974	Identifier	utf16In		691943	0					
ANR	691975	ForStatement	for ( size_t i = 0 ; i < wcharLen && uptr [ i ] ; )		691943	14					
ANR	691976	ForInit	size_t i = 0 ;	3515:6:103488:103500	691943	0	True				
ANR	691977	IdentifierDeclStatement	size_t i = 0 ;		691943	0					
ANR	691978	IdentifierDecl	i = 0		691943	0					
ANR	691979	IdentifierDeclType	size_t		691943	0					
ANR	691980	Identifier	i		691943	1					
ANR	691981	AssignmentExpression	i = 0		691943	2		=			
ANR	691982	Identifier	i		691943	0					
ANR	691983	PrimaryExpression	0		691943	1					
ANR	691984	Condition	i < wcharLen && uptr [ i ]	3515:20:103502:103524	691943	1	True				
ANR	691985	AndExpression	i < wcharLen && uptr [ i ]		691943	0		&&			
ANR	691986	RelationalExpression	i < wcharLen		691943	0		<			
ANR	691987	Identifier	i		691943	0					
ANR	691988	Identifier	wcharLen		691943	1					
ANR	691989	ArrayIndexing	uptr [ i ]		691943	1					
ANR	691990	Identifier	uptr		691943	0					
ANR	691991	Identifier	i		691943	1					
ANR	691992	CompoundStatement		7:2:161:216	691943	2					
ANR	691993	IdentifierDeclStatement	size_t uch = isBigEndian ? swap16bit ( uptr [ i ] ) : uptr [ i ] ;	3517:2:103533:103588	691943	0	True				
ANR	691994	IdentifierDecl	uch = isBigEndian ? swap16bit ( uptr [ i ] ) : uptr [ i ]		691943	0					
ANR	691995	IdentifierDeclType	size_t		691943	0					
ANR	691996	Identifier	uch		691943	1					
ANR	691997	AssignmentExpression	uch = isBigEndian ? swap16bit ( uptr [ i ] ) : uptr [ i ]		691943	2		=			
ANR	691998	Identifier	uch		691943	0					
ANR	691999	ConditionalExpression	isBigEndian ? swap16bit ( uptr [ i ] ) : uptr [ i ]		691943	1					
ANR	692000	Condition	isBigEndian		691943	0					
ANR	692001	Identifier	isBigEndian		691943	0					
ANR	692002	CallExpression	swap16bit ( uptr [ i ] )		691943	1					
ANR	692003	Callee	swap16bit		691943	0					
ANR	692004	Identifier	swap16bit		691943	0					
ANR	692005	ArgumentList	uptr [ i ]		691943	1					
ANR	692006	Argument	uptr [ i ]		691943	0					
ANR	692007	ArrayIndexing	uptr [ i ]		691943	0					
ANR	692008	Identifier	uptr		691943	0					
ANR	692009	Identifier	i		691943	1					
ANR	692010	ArrayIndexing	uptr [ i ]		691943	2					
ANR	692011	Identifier	uptr		691943	0					
ANR	692012	Identifier	i		691943	1					
ANR	692013	IfStatement	if ( uch < 0x80 )		691943	1					
ANR	692014	Condition	uch < 0x80	3518:6:103596:103605	691943	0	True				
ANR	692015	RelationalExpression	uch < 0x80		691943	0		<			
ANR	692016	Identifier	uch		691943	0					
ANR	692017	PrimaryExpression	0x80		691943	1					
ANR	692018	ExpressionStatement	len ++	3519:3:103611:103616	691943	1	True				
ANR	692019	PostIncDecOperationExpression	len ++		691943	0					
ANR	692020	Identifier	len		691943	0					
ANR	692021	IncDec	++		691943	1					
ANR	692022	ElseStatement	else		691943	0					
ANR	692023	IfStatement	if ( uch < 0x800 )		691943	0					
ANR	692024	Condition	uch < 0x800	3520:11:103629:103639	691943	0	True				
ANR	692025	RelationalExpression	uch < 0x800		691943	0		<			
ANR	692026	Identifier	uch		691943	0					
ANR	692027	PrimaryExpression	0x800		691943	1					
ANR	692028	ExpressionStatement	len += 2	3521:3:103645:103653	691943	1	True				
ANR	692029	AssignmentExpression	len += 2		691943	0		+=			
ANR	692030	Identifier	len		691943	0					
ANR	692031	PrimaryExpression	2		691943	1					
ANR	692032	ElseStatement	else		691943	0					
ANR	692033	IfStatement	if ( ( uch >= SURROGATE_LEAD_FIRST ) && ( uch <= SURROGATE_TRAIL_LAST ) )		691943	0					
ANR	692034	Condition	( uch >= SURROGATE_LEAD_FIRST ) && ( uch <= SURROGATE_TRAIL_LAST )	3522:11:103666:103727	691943	0	True				
ANR	692035	AndExpression	( uch >= SURROGATE_LEAD_FIRST ) && ( uch <= SURROGATE_TRAIL_LAST )		691943	0		&&			
ANR	692036	RelationalExpression	uch >= SURROGATE_LEAD_FIRST		691943	0		>=			
ANR	692037	Identifier	uch		691943	0					
ANR	692038	Identifier	SURROGATE_LEAD_FIRST		691943	1					
ANR	692039	RelationalExpression	uch <= SURROGATE_TRAIL_LAST		691943	1		<=			
ANR	692040	Identifier	uch		691943	0					
ANR	692041	Identifier	SURROGATE_TRAIL_LAST		691943	1					
ANR	692042	CompoundStatement		13:2:360:360	691943	1					
ANR	692043	ExpressionStatement	len += 4	3524:3:103737:103745	691943	0	True				
ANR	692044	AssignmentExpression	len += 4		691943	0		+=			
ANR	692045	Identifier	len		691943	0					
ANR	692046	PrimaryExpression	4		691943	1					
ANR	692047	ExpressionStatement	i ++	3525:3:103750:103753	691943	1	True				
ANR	692048	PostIncDecOperationExpression	i ++		691943	0					
ANR	692049	Identifier	i		691943	0					
ANR	692050	IncDec	++		691943	1					
ANR	692051	ElseStatement	else		691943	0					
ANR	692052	ExpressionStatement	len += 3	3528:3:103769:103777	691943	0	True				
ANR	692053	AssignmentExpression	len += 3		691943	0		+=			
ANR	692054	Identifier	len		691943	0					
ANR	692055	PrimaryExpression	3		691943	1					
ANR	692056	ExpressionStatement	i ++	3529:2:103781:103784	691943	2	True				
ANR	692057	PostIncDecOperationExpression	i ++		691943	0					
ANR	692058	Identifier	i		691943	0					
ANR	692059	IncDec	++		691943	1					
ANR	692060	ReturnStatement	return len ;	3531:1:103790:103800	691943	15	True				
ANR	692061	Identifier	len		691943	0					
ANR	692062	ReturnType	size_t		691943	1					
ANR	692063	Identifier	ASEncoding :: utf8LengthFromUtf16		691943	2					
ANR	692064	ParameterList	"const char * utf16In , size_t inLen , bool isBigEndian"		691943	3					
ANR	692065	Parameter	const char * utf16In	3510:39:103312:103330	691943	0	True				
ANR	692066	ParameterType	const char *		691943	0					
ANR	692067	Identifier	utf16In		691943	1					
ANR	692068	Parameter	size_t inLen	3510:60:103333:103344	691943	1	True				
ANR	692069	ParameterType	size_t		691943	0					
ANR	692070	Identifier	inLen		691943	1					
ANR	692071	Parameter	bool isBigEndian	3510:74:103347:103362	691943	2	True				
ANR	692072	ParameterType	bool		691943	0					
ANR	692073	Identifier	isBigEndian		691943	1					
ANR	692074	CFGEntryNode	ENTRY		691943		True				
ANR	692075	CFGExitNode	EXIT		691943		True				
ANR	692076	Symbol	swap16bit		691943						
ANR	692077	Symbol	i		691943						
ANR	692078	Symbol	inLen		691943						
ANR	692079	Symbol	* uptr		691943						
ANR	692080	Symbol	utf16In		691943						
ANR	692081	Symbol	uptr		691943						
ANR	692082	Symbol	wcharLen		691943						
ANR	692083	Symbol	* i		691943						
ANR	692084	Symbol	SURROGATE_LEAD_FIRST		691943						
ANR	692085	Symbol	len		691943						
ANR	692086	Symbol	SURROGATE_TRAIL_LAST		691943						
ANR	692087	Symbol	isBigEndian		691943						
ANR	692088	Symbol	uch		691943						
ANR	692089	Function	ASEncoding :: utf8ToUtf16	3538:0:103959:105694							
ANR	692090	FunctionDef	"ASEncoding :: utf8ToUtf16 (char * utf8In , size_t inLen , bool isBigEndian , char * utf16Out)"		692089	0					
ANR	692091	CompoundStatement		3539:0:104058:105694	692089	0					
ANR	692092	IdentifierDeclStatement	int nCur = 0 ;	3540:1:104061:104073	692089	0	True				
ANR	692093	IdentifierDecl	nCur = 0		692089	0					
ANR	692094	IdentifierDeclType	int		692089	0					
ANR	692095	Identifier	nCur		692089	1					
ANR	692096	AssignmentExpression	nCur = 0		692089	2		=			
ANR	692097	Identifier	nCur		692089	0					
ANR	692098	PrimaryExpression	0		692089	1					
ANR	692099	Statement	ubyte	3541:1:104076:104080	692089	1	True				
ANR	692100	Statement	*	3541:6:104081:104081	692089	2	True				
ANR	692101	Statement	pRead	3541:8:104083:104087	692089	3	True				
ANR	692102	Statement	=	3541:14:104089:104089	692089	4	True				
ANR	692103	Statement	reinterpret_cast	3541:16:104091:104106	692089	5	True				
ANR	692104	Statement	<	3541:32:104107:104107	692089	6	True				
ANR	692105	Statement	ubyte	3541:33:104108:104112	692089	7	True				
ANR	692106	Statement	*	3541:38:104113:104113	692089	8	True				
ANR	692107	Statement	>	3541:39:104114:104114	692089	9	True				
ANR	692108	ExpressionStatement	utf8In	3541:40:104115:104123	692089	10	True				
ANR	692109	Identifier	utf8In		692089	0					
ANR	692110	Statement	utf16	3542:1:104126:104130	692089	11	True				
ANR	692111	Statement	*	3542:6:104131:104131	692089	12	True				
ANR	692112	Statement	pCur	3542:8:104133:104136	692089	13	True				
ANR	692113	Statement	=	3542:13:104138:104138	692089	14	True				
ANR	692114	Statement	reinterpret_cast	3542:15:104140:104155	692089	15	True				
ANR	692115	Statement	<	3542:31:104156:104156	692089	16	True				
ANR	692116	Statement	utf16	3542:32:104157:104161	692089	17	True				
ANR	692117	Statement	*	3542:37:104162:104162	692089	18	True				
ANR	692118	Statement	>	3542:38:104163:104163	692089	19	True				
ANR	692119	ExpressionStatement	utf16Out	3542:39:104164:104174	692089	20	True				
ANR	692120	Identifier	utf16Out		692089	0					
ANR	692121	IdentifierDeclStatement	const ubyte * pEnd = pRead + inLen ;	3543:1:104177:104210	692089	21	True				
ANR	692122	IdentifierDecl	* pEnd = pRead + inLen		692089	0					
ANR	692123	IdentifierDeclType	const ubyte *		692089	0					
ANR	692124	Identifier	pEnd		692089	1					
ANR	692125	AssignmentExpression	* pEnd = pRead + inLen		692089	2		=			
ANR	692126	Identifier	pEnd		692089	0					
ANR	692127	AdditiveExpression	pRead + inLen		692089	1		+			
ANR	692128	Identifier	pRead		692089	0					
ANR	692129	Identifier	inLen		692089	1					
ANR	692130	IdentifierDeclStatement	const utf16 * pCurStart = pCur ;	3544:1:104213:104242	692089	22	True				
ANR	692131	IdentifierDecl	* pCurStart = pCur		692089	0					
ANR	692132	IdentifierDeclType	const utf16 *		692089	0					
ANR	692133	Identifier	pCurStart		692089	1					
ANR	692134	AssignmentExpression	* pCurStart = pCur		692089	2		=			
ANR	692135	Identifier	pCur		692089	0					
ANR	692136	Identifier	pCur		692089	1					
ANR	692137	IdentifierDeclStatement	eState state = eStart ;	3545:1:104245:104266	692089	23	True				
ANR	692138	IdentifierDecl	state = eStart		692089	0					
ANR	692139	IdentifierDeclType	eState		692089	0					
ANR	692140	Identifier	state		692089	1					
ANR	692141	AssignmentExpression	state = eStart		692089	2		=			
ANR	692142	Identifier	eStart		692089	0					
ANR	692143	Identifier	eStart		692089	1					
ANR	692144	WhileStatement	while ( pRead < pEnd )		692089	24					
ANR	692145	Condition	pRead < pEnd	3548:8:104331:104342	692089	0	True				
ANR	692146	RelationalExpression	pRead < pEnd		692089	0		<			
ANR	692147	Identifier	pRead		692089	0					
ANR	692148	Identifier	pEnd		692089	1					
ANR	692149	CompoundStatement		11:1:287:287	692089	1					
ANR	692150	SwitchStatement	switch ( state )		692089	0					
ANR	692151	Condition	state	3550:10:104358:104362	692089	0	True				
ANR	692152	Identifier	state		692089	0					
ANR	692153	CompoundStatement		13:2:308:308	692089	1					
ANR	692154	Label	case eStart :	3552:3:104372:104383	692089	0	True				
ANR	692155	Identifier	eStart		692089	0					
ANR	692156	IfStatement	if ( ( 0xF0 & * pRead ) == 0xF0 )		692089	1					
ANR	692157	Condition	( 0xF0 & * pRead ) == 0xF0	3553:8:104393:104415	692089	0	True				
ANR	692158	EqualityExpression	( 0xF0 & * pRead ) == 0xF0		692089	0		==			
ANR	692159	BitAndExpression	0xF0 & * pRead		692089	0		&			
ANR	692160	PrimaryExpression	0xF0		692089	0					
ANR	692161	UnaryOperationExpression	* pRead		692089	1					
ANR	692162	UnaryOperator	*		692089	0					
ANR	692163	Identifier	pRead		692089	1					
ANR	692164	PrimaryExpression	0xF0		692089	1					
ANR	692165	CompoundStatement		16:4:363:363	692089	1					
ANR	692166	ExpressionStatement	nCur = ( 0x7 & * pRead ) << 18	3555:5:104429:104456	692089	0	True				
ANR	692167	AssignmentExpression	nCur = ( 0x7 & * pRead ) << 18		692089	0		=			
ANR	692168	Identifier	nCur		692089	0					
ANR	692169	ShiftExpression	( 0x7 & * pRead ) << 18		692089	1		<<			
ANR	692170	BitAndExpression	0x7 & * pRead		692089	0		&			
ANR	692171	PrimaryExpression	0x7		692089	0					
ANR	692172	UnaryOperationExpression	* pRead		692089	1					
ANR	692173	UnaryOperator	*		692089	0					
ANR	692174	Identifier	pRead		692089	1					
ANR	692175	PrimaryExpression	18		692089	1					
ANR	692176	ExpressionStatement	state = eSecondOf4Bytes	3556:5:104463:104486	692089	1	True				
ANR	692177	AssignmentExpression	state = eSecondOf4Bytes		692089	0		=			
ANR	692178	Identifier	state		692089	0					
ANR	692179	Identifier	eSecondOf4Bytes		692089	1					
ANR	692180	ElseStatement	else		692089	0					
ANR	692181	IfStatement	if ( ( 0xE0 & * pRead ) == 0xE0 )		692089	0					
ANR	692182	Condition	( 0xE0 & * pRead ) == 0xE0	3558:13:104507:104529	692089	0	True				
ANR	692183	EqualityExpression	( 0xE0 & * pRead ) == 0xE0		692089	0		==			
ANR	692184	BitAndExpression	0xE0 & * pRead		692089	0		&			
ANR	692185	PrimaryExpression	0xE0		692089	0					
ANR	692186	UnaryOperationExpression	* pRead		692089	1					
ANR	692187	UnaryOperator	*		692089	0					
ANR	692188	Identifier	pRead		692089	1					
ANR	692189	PrimaryExpression	0xE0		692089	1					
ANR	692190	CompoundStatement		21:4:477:477	692089	1					
ANR	692191	ExpressionStatement	nCur = ( ~0xE0 & * pRead ) << 12	3560:5:104543:104572	692089	0	True				
ANR	692192	AssignmentExpression	nCur = ( ~0xE0 & * pRead ) << 12		692089	0		=			
ANR	692193	Identifier	nCur		692089	0					
ANR	692194	ShiftExpression	( ~0xE0 & * pRead ) << 12		692089	1		<<			
ANR	692195	BitAndExpression	~0xE0 & * pRead		692089	0		&			
ANR	692196	Identifier	~0xE0		692089	0					
ANR	692197	UnaryOperationExpression	* pRead		692089	1					
ANR	692198	UnaryOperator	*		692089	0					
ANR	692199	Identifier	pRead		692089	1					
ANR	692200	PrimaryExpression	12		692089	1					
ANR	692201	ExpressionStatement	state = ePenultimate	3561:5:104579:104599	692089	1	True				
ANR	692202	AssignmentExpression	state = ePenultimate		692089	0		=			
ANR	692203	Identifier	state		692089	0					
ANR	692204	Identifier	ePenultimate		692089	1					
ANR	692205	ElseStatement	else		692089	0					
ANR	692206	IfStatement	if ( ( 0xC0 & * pRead ) == 0xC0 )		692089	0					
ANR	692207	Condition	( 0xC0 & * pRead ) == 0xC0	3563:13:104620:104642	692089	0	True				
ANR	692208	EqualityExpression	( 0xC0 & * pRead ) == 0xC0		692089	0		==			
ANR	692209	BitAndExpression	0xC0 & * pRead		692089	0		&			
ANR	692210	PrimaryExpression	0xC0		692089	0					
ANR	692211	UnaryOperationExpression	* pRead		692089	1					
ANR	692212	UnaryOperator	*		692089	0					
ANR	692213	Identifier	pRead		692089	1					
ANR	692214	PrimaryExpression	0xC0		692089	1					
ANR	692215	CompoundStatement		26:4:590:590	692089	1					
ANR	692216	ExpressionStatement	nCur = ( ~0xC0 & * pRead ) << 6	3565:5:104656:104684	692089	0	True				
ANR	692217	AssignmentExpression	nCur = ( ~0xC0 & * pRead ) << 6		692089	0		=			
ANR	692218	Identifier	nCur		692089	0					
ANR	692219	ShiftExpression	( ~0xC0 & * pRead ) << 6		692089	1		<<			
ANR	692220	BitAndExpression	~0xC0 & * pRead		692089	0		&			
ANR	692221	Identifier	~0xC0		692089	0					
ANR	692222	UnaryOperationExpression	* pRead		692089	1					
ANR	692223	UnaryOperator	*		692089	0					
ANR	692224	Identifier	pRead		692089	1					
ANR	692225	PrimaryExpression	6		692089	1					
ANR	692226	ExpressionStatement	state = eFinal	3566:5:104691:104705	692089	1	True				
ANR	692227	AssignmentExpression	state = eFinal		692089	0		=			
ANR	692228	Identifier	state		692089	0					
ANR	692229	Identifier	eFinal		692089	1					
ANR	692230	ElseStatement	else		692089	0					
ANR	692231	CompoundStatement		31:4:667:667	692089	0					
ANR	692232	ExpressionStatement	nCur = * pRead	3570:5:104733:104746	692089	0	True				
ANR	692233	AssignmentExpression	nCur = * pRead		692089	0		=			
ANR	692234	Identifier	nCur		692089	0					
ANR	692235	UnaryOperationExpression	* pRead		692089	1					
ANR	692236	UnaryOperator	*		692089	0					
ANR	692237	Identifier	pRead		692089	1					
ANR	692238	ExpressionStatement	state = eStart	3571:5:104753:104767	692089	1	True				
ANR	692239	AssignmentExpression	state = eStart		692089	0		=			
ANR	692240	Identifier	state		692089	0					
ANR	692241	Identifier	eStart		692089	1					
ANR	692242	BreakStatement	break ;	3573:4:104779:104784	692089	2	True				
ANR	692243	Label	case eSecondOf4Bytes :	3574:3:104789:104809	692089	3	True				
ANR	692244	Identifier	eSecondOf4Bytes		692089	0					
ANR	692245	ExpressionStatement	nCur |= ( 0x3F & * pRead ) << 12	3575:4:104815:104844	692089	4	True				
ANR	692246	AssignmentExpression	nCur |= ( 0x3F & * pRead ) << 12		692089	0		|=			
ANR	692247	Identifier	nCur		692089	0					
ANR	692248	ShiftExpression	( 0x3F & * pRead ) << 12		692089	1		<<			
ANR	692249	BitAndExpression	0x3F & * pRead		692089	0		&			
ANR	692250	PrimaryExpression	0x3F		692089	0					
ANR	692251	UnaryOperationExpression	* pRead		692089	1					
ANR	692252	UnaryOperator	*		692089	0					
ANR	692253	Identifier	pRead		692089	1					
ANR	692254	PrimaryExpression	12		692089	1					
ANR	692255	ExpressionStatement	state = ePenultimate	3576:4:104850:104870	692089	5	True				
ANR	692256	AssignmentExpression	state = ePenultimate		692089	0		=			
ANR	692257	Identifier	state		692089	0					
ANR	692258	Identifier	ePenultimate		692089	1					
ANR	692259	BreakStatement	break ;	3577:4:104876:104881	692089	6	True				
ANR	692260	Label	case ePenultimate :	3578:3:104886:104903	692089	7	True				
ANR	692261	Identifier	ePenultimate		692089	0					
ANR	692262	ExpressionStatement	nCur |= ( 0x3F & * pRead ) << 6	3579:4:104909:104937	692089	8	True				
ANR	692263	AssignmentExpression	nCur |= ( 0x3F & * pRead ) << 6		692089	0		|=			
ANR	692264	Identifier	nCur		692089	0					
ANR	692265	ShiftExpression	( 0x3F & * pRead ) << 6		692089	1		<<			
ANR	692266	BitAndExpression	0x3F & * pRead		692089	0		&			
ANR	692267	PrimaryExpression	0x3F		692089	0					
ANR	692268	UnaryOperationExpression	* pRead		692089	1					
ANR	692269	UnaryOperator	*		692089	0					
ANR	692270	Identifier	pRead		692089	1					
ANR	692271	PrimaryExpression	6		692089	1					
ANR	692272	ExpressionStatement	state = eFinal	3580:4:104943:104957	692089	9	True				
ANR	692273	AssignmentExpression	state = eFinal		692089	0		=			
ANR	692274	Identifier	state		692089	0					
ANR	692275	Identifier	eFinal		692089	1					
ANR	692276	BreakStatement	break ;	3581:4:104963:104968	692089	10	True				
ANR	692277	Label	case eFinal :	3582:3:104973:104984	692089	11	True				
ANR	692278	Identifier	eFinal		692089	0					
ANR	692279	ExpressionStatement	nCur |= ( 0x3F & * pRead )	3583:4:104990:105013	692089	12	True				
ANR	692280	AssignmentExpression	nCur |= ( 0x3F & * pRead )		692089	0		|=			
ANR	692281	Identifier	nCur		692089	0					
ANR	692282	BitAndExpression	0x3F & * pRead		692089	1		&			
ANR	692283	PrimaryExpression	0x3F		692089	0					
ANR	692284	UnaryOperationExpression	* pRead		692089	1					
ANR	692285	UnaryOperator	*		692089	0					
ANR	692286	Identifier	pRead		692089	1					
ANR	692287	ExpressionStatement	state = eStart	3584:4:105019:105033	692089	13	True				
ANR	692288	AssignmentExpression	state = eStart		692089	0		=			
ANR	692289	Identifier	state		692089	0					
ANR	692290	Identifier	eStart		692089	1					
ANR	692291	BreakStatement	break ;	3585:4:105039:105044	692089	14	True				
ANR	692292	ExpressionStatement	++ pRead	3588:2:105085:105092	692089	1	True				
ANR	692293	UnaryExpression	++ pRead		692089	0					
ANR	692294	IncDec	++		692089	0					
ANR	692295	Identifier	pRead		692089	1					
ANR	692296	IfStatement	if ( state == eStart )		692089	2					
ANR	692297	Condition	state == eStart	3590:6:105101:105115	692089	0	True				
ANR	692298	EqualityExpression	state == eStart		692089	0		==			
ANR	692299	Identifier	state		692089	0					
ANR	692300	Identifier	eStart		692089	1					
ANR	692301	CompoundStatement		54:3:1066:1086	692089	1					
ANR	692302	IdentifierDeclStatement	int codePoint = nCur ;	3592:3:105125:105145	692089	0	True				
ANR	692303	IdentifierDecl	codePoint = nCur		692089	0					
ANR	692304	IdentifierDeclType	int		692089	0					
ANR	692305	Identifier	codePoint		692089	1					
ANR	692306	AssignmentExpression	codePoint = nCur		692089	2		=			
ANR	692307	Identifier	nCur		692089	0					
ANR	692308	Identifier	nCur		692089	1					
ANR	692309	IfStatement	if ( codePoint >= SURROGATE_FIRST_VALUE )		692089	1					
ANR	692310	Condition	codePoint >= SURROGATE_FIRST_VALUE	3593:7:105154:105187	692089	0	True				
ANR	692311	RelationalExpression	codePoint >= SURROGATE_FIRST_VALUE		692089	0		>=			
ANR	692312	Identifier	codePoint		692089	0					
ANR	692313	Identifier	SURROGATE_FIRST_VALUE		692089	1					
ANR	692314	CompoundStatement		60:4:1309:1364	692089	1					
ANR	692315	ExpressionStatement	codePoint -= SURROGATE_FIRST_VALUE	3595:4:105199:105233	692089	0	True				
ANR	692316	AssignmentExpression	codePoint -= SURROGATE_FIRST_VALUE		692089	0		-=			
ANR	692317	Identifier	codePoint		692089	0					
ANR	692318	Identifier	SURROGATE_FIRST_VALUE		692089	1					
ANR	692319	IdentifierDeclStatement	int lead = ( codePoint >> 10 ) + SURROGATE_LEAD_FIRST ;	3596:4:105239:105290	692089	1	True				
ANR	692320	IdentifierDecl	lead = ( codePoint >> 10 ) + SURROGATE_LEAD_FIRST		692089	0					
ANR	692321	IdentifierDeclType	int		692089	0					
ANR	692322	Identifier	lead		692089	1					
ANR	692323	AssignmentExpression	lead = ( codePoint >> 10 ) + SURROGATE_LEAD_FIRST		692089	2		=			
ANR	692324	Identifier	lead		692089	0					
ANR	692325	AdditiveExpression	( codePoint >> 10 ) + SURROGATE_LEAD_FIRST		692089	1		+			
ANR	692326	ShiftExpression	codePoint >> 10		692089	0		>>			
ANR	692327	Identifier	codePoint		692089	0					
ANR	692328	PrimaryExpression	10		692089	1					
ANR	692329	Identifier	SURROGATE_LEAD_FIRST		692089	1					
ANR	692330	ExpressionStatement	* pCur ++ = static_cast < utf16 > ( isBigEndian ? swap16bit ( lead ) : lead )	3597:4:105296:105362	692089	2	True				
ANR	692331	AssignmentExpression	* pCur ++ = static_cast < utf16 > ( isBigEndian ? swap16bit ( lead ) : lead )		692089	0		=			
ANR	692332	UnaryOperationExpression	* pCur ++		692089	0					
ANR	692333	UnaryOperator	*		692089	0					
ANR	692334	PostIncDecOperationExpression	pCur ++		692089	1					
ANR	692335	Identifier	pCur		692089	0					
ANR	692336	IncDec	++		692089	1					
ANR	692337	RelationalExpression	static_cast < utf16 > ( isBigEndian ? swap16bit ( lead ) : lead )		692089	1		<			
ANR	692338	Identifier	static_cast		692089	0					
ANR	692339	RelationalExpression	utf16 > ( isBigEndian ? swap16bit ( lead ) : lead )		692089	1		>			
ANR	692340	Identifier	utf16		692089	0					
ANR	692341	ConditionalExpression	isBigEndian ? swap16bit ( lead ) : lead		692089	1					
ANR	692342	Condition	isBigEndian		692089	0					
ANR	692343	Identifier	isBigEndian		692089	0					
ANR	692344	CallExpression	swap16bit ( lead )		692089	1					
ANR	692345	Callee	swap16bit		692089	0					
ANR	692346	Identifier	swap16bit		692089	0					
ANR	692347	ArgumentList	lead		692089	1					
ANR	692348	Argument	lead		692089	0					
ANR	692349	Identifier	lead		692089	0					
ANR	692350	Identifier	lead		692089	2					
ANR	692351	IdentifierDeclStatement	int trail = ( codePoint & 0x3ff ) + SURROGATE_TRAIL_FIRST ;	3598:4:105368:105423	692089	3	True				
ANR	692352	IdentifierDecl	trail = ( codePoint & 0x3ff ) + SURROGATE_TRAIL_FIRST		692089	0					
ANR	692353	IdentifierDeclType	int		692089	0					
ANR	692354	Identifier	trail		692089	1					
ANR	692355	AssignmentExpression	trail = ( codePoint & 0x3ff ) + SURROGATE_TRAIL_FIRST		692089	2		=			
ANR	692356	Identifier	trail		692089	0					
ANR	692357	AdditiveExpression	( codePoint & 0x3ff ) + SURROGATE_TRAIL_FIRST		692089	1		+			
ANR	692358	BitAndExpression	codePoint & 0x3ff		692089	0		&			
ANR	692359	Identifier	codePoint		692089	0					
ANR	692360	PrimaryExpression	0x3ff		692089	1					
ANR	692361	Identifier	SURROGATE_TRAIL_FIRST		692089	1					
ANR	692362	ExpressionStatement	* pCur ++ = static_cast < utf16 > ( isBigEndian ? swap16bit ( trail ) : trail )	3599:4:105429:105497	692089	4	True				
ANR	692363	AssignmentExpression	* pCur ++ = static_cast < utf16 > ( isBigEndian ? swap16bit ( trail ) : trail )		692089	0		=			
ANR	692364	UnaryOperationExpression	* pCur ++		692089	0					
ANR	692365	UnaryOperator	*		692089	0					
ANR	692366	PostIncDecOperationExpression	pCur ++		692089	1					
ANR	692367	Identifier	pCur		692089	0					
ANR	692368	IncDec	++		692089	1					
ANR	692369	RelationalExpression	static_cast < utf16 > ( isBigEndian ? swap16bit ( trail ) : trail )		692089	1		<			
ANR	692370	Identifier	static_cast		692089	0					
ANR	692371	RelationalExpression	utf16 > ( isBigEndian ? swap16bit ( trail ) : trail )		692089	1		>			
ANR	692372	Identifier	utf16		692089	0					
ANR	692373	ConditionalExpression	isBigEndian ? swap16bit ( trail ) : trail		692089	1					
ANR	692374	Condition	isBigEndian		692089	0					
ANR	692375	Identifier	isBigEndian		692089	0					
ANR	692376	CallExpression	swap16bit ( trail )		692089	1					
ANR	692377	Callee	swap16bit		692089	0					
ANR	692378	Identifier	swap16bit		692089	0					
ANR	692379	ArgumentList	trail		692089	1					
ANR	692380	Argument	trail		692089	0					
ANR	692381	Identifier	trail		692089	0					
ANR	692382	Identifier	trail		692089	2					
ANR	692383	ElseStatement	else		692089	0					
ANR	692384	ExpressionStatement	* pCur ++ = static_cast < utf16 > ( isBigEndian ? swap16bit ( codePoint ) : codePoint )	3602:4:105516:105592	692089	0	True				
ANR	692385	AssignmentExpression	* pCur ++ = static_cast < utf16 > ( isBigEndian ? swap16bit ( codePoint ) : codePoint )		692089	0		=			
ANR	692386	UnaryOperationExpression	* pCur ++		692089	0					
ANR	692387	UnaryOperator	*		692089	0					
ANR	692388	PostIncDecOperationExpression	pCur ++		692089	1					
ANR	692389	Identifier	pCur		692089	0					
ANR	692390	IncDec	++		692089	1					
ANR	692391	RelationalExpression	static_cast < utf16 > ( isBigEndian ? swap16bit ( codePoint ) : codePoint )		692089	1		<			
ANR	692392	Identifier	static_cast		692089	0					
ANR	692393	RelationalExpression	utf16 > ( isBigEndian ? swap16bit ( codePoint ) : codePoint )		692089	1		>			
ANR	692394	Identifier	utf16		692089	0					
ANR	692395	ConditionalExpression	isBigEndian ? swap16bit ( codePoint ) : codePoint		692089	1					
ANR	692396	Condition	isBigEndian		692089	0					
ANR	692397	Identifier	isBigEndian		692089	0					
ANR	692398	CallExpression	swap16bit ( codePoint )		692089	1					
ANR	692399	Callee	swap16bit		692089	0					
ANR	692400	Identifier	swap16bit		692089	0					
ANR	692401	ArgumentList	codePoint		692089	1					
ANR	692402	Argument	codePoint		692089	0					
ANR	692403	Identifier	codePoint		692089	0					
ANR	692404	Identifier	codePoint		692089	2					
ANR	692405	ReturnStatement	return ( pCur - pCurStart ) * 2 ;	3606:1:105663:105692	692089	25	True				
ANR	692406	MultiplicativeExpression	( pCur - pCurStart ) * 2		692089	0		*			
ANR	692407	AdditiveExpression	pCur - pCurStart		692089	0		-			
ANR	692408	Identifier	pCur		692089	0					
ANR	692409	Identifier	pCurStart		692089	1					
ANR	692410	PrimaryExpression	2		692089	1					
ANR	692411	ReturnType	size_t		692089	1					
ANR	692412	Identifier	ASEncoding :: utf8ToUtf16		692089	2					
ANR	692413	ParameterList	"char * utf8In , size_t inLen , bool isBigEndian , char * utf16Out"		692089	3					
ANR	692414	Parameter	char * utf8In	3538:31:103990:104001	692089	0	True				
ANR	692415	ParameterType	char *		692089	0					
ANR	692416	Identifier	utf8In		692089	1					
ANR	692417	Parameter	size_t inLen	3538:45:104004:104015	692089	1	True				
ANR	692418	ParameterType	size_t		692089	0					
ANR	692419	Identifier	inLen		692089	1					
ANR	692420	Parameter	bool isBigEndian	3538:59:104018:104033	692089	2	True				
ANR	692421	ParameterType	bool		692089	0					
ANR	692422	Identifier	isBigEndian		692089	1					
ANR	692423	Parameter	char * utf16Out	3538:77:104036:104049	692089	3	True				
ANR	692424	ParameterType	char *		692089	0					
ANR	692425	Identifier	utf16Out		692089	1					
ANR	692426	CFGEntryNode	ENTRY		692089		True				
ANR	692427	CFGExitNode	EXIT		692089		True				
ANR	692428	Symbol	nCur		692089						
ANR	692429	Symbol	* pRead		692089						
ANR	692430	Symbol	pCur		692089						
ANR	692431	Symbol	swap16bit		692089						
ANR	692432	Symbol	* pCur ++		692089						
ANR	692433	Symbol	inLen		692089						
ANR	692434	Symbol	utf8In		692089						
ANR	692435	Symbol	trail		692089						
ANR	692436	Symbol	SURROGATE_LEAD_FIRST		692089						
ANR	692437	Symbol	~0xC0		692089						
ANR	692438	Symbol	~0xE0		692089						
ANR	692439	Symbol	isBigEndian		692089						
ANR	692440	Symbol	state		692089						
ANR	692441	Symbol	eStart		692089						
ANR	692442	Symbol	codePoint		692089						
ANR	692443	Symbol	ePenultimate		692089						
ANR	692444	Symbol	SURROGATE_TRAIL_FIRST		692089						
ANR	692445	Symbol	eSecondOf4Bytes		692089						
ANR	692446	Symbol	utf16		692089						
ANR	692447	Symbol	lead		692089						
ANR	692448	Symbol	static_cast		692089						
ANR	692449	Symbol	utf16Out		692089						
ANR	692450	Symbol	eFinal		692089						
ANR	692451	Symbol	pRead		692089						
ANR	692452	Symbol	pEnd		692089						
ANR	692453	Symbol	pCurStart		692089						
ANR	692454	Symbol	SURROGATE_FIRST_VALUE		692089						
ANR	692455	Function	ASEncoding :: utf16LengthFromUtf8	3614:0:105964:106458							
ANR	692456	FunctionDef	"ASEncoding :: utf16LengthFromUtf8 (const char * utf8In , size_t len)"		692455	0					
ANR	692457	CompoundStatement		3615:0:106041:106458	692455	0					
ANR	692458	IdentifierDeclStatement	size_t ulen = 0 ;	3616:1:106044:106059	692455	0	True				
ANR	692459	IdentifierDecl	ulen = 0		692455	0					
ANR	692460	IdentifierDeclType	size_t		692455	0					
ANR	692461	Identifier	ulen		692455	1					
ANR	692462	AssignmentExpression	ulen = 0		692455	2		=			
ANR	692463	Identifier	ulen		692455	0					
ANR	692464	PrimaryExpression	0		692455	1					
ANR	692465	IdentifierDeclStatement	size_t charLen ;	3617:1:106062:106076	692455	1	True				
ANR	692466	IdentifierDecl	charLen		692455	0					
ANR	692467	IdentifierDeclType	size_t		692455	0					
ANR	692468	Identifier	charLen		692455	1					
ANR	692469	ForStatement	for ( size_t i = 0 ; i < len ; )		692455	2					
ANR	692470	ForInit	size_t i = 0 ;	3618:6:106084:106096	692455	0	True				
ANR	692471	IdentifierDeclStatement	size_t i = 0 ;		692455	0					
ANR	692472	IdentifierDecl	i = 0		692455	0					
ANR	692473	IdentifierDeclType	size_t		692455	0					
ANR	692474	Identifier	i		692455	1					
ANR	692475	AssignmentExpression	i = 0		692455	2		=			
ANR	692476	Identifier	i		692455	0					
ANR	692477	PrimaryExpression	0		692455	1					
ANR	692478	Condition	i < len	3618:20:106098:106104	692455	1	True				
ANR	692479	RelationalExpression	i < len		692455	0		<			
ANR	692480	Identifier	i		692455	0					
ANR	692481	Identifier	len		692455	1					
ANR	692482	CompoundStatement		5:1:67:67	692455	2					
ANR	692483	Statement	unsigned	3620:2:106113:106120	692455	0	True				
ANR	692484	Statement	char	3620:11:106122:106125	692455	1	True				
ANR	692485	Statement	ch	3620:16:106127:106128	692455	2	True				
ANR	692486	Statement	=	3620:19:106130:106130	692455	3	True				
ANR	692487	Statement	static_cast	3620:21:106132:106142	692455	4	True				
ANR	692488	Statement	<	3620:32:106143:106143	692455	5	True				
ANR	692489	Statement	unsigned	3620:33:106144:106151	692455	6	True				
ANR	692490	ExpressionStatement	char > ( utf8In [ i ] )	3620:42:106153:106169	692455	7	True				
ANR	692491	RelationalExpression	char > ( utf8In [ i ] )		692455	0		>			
ANR	692492	Identifier	char		692455	0					
ANR	692493	ArrayIndexing	utf8In [ i ]		692455	1					
ANR	692494	Identifier	utf8In		692455	0					
ANR	692495	Identifier	i		692455	1					
ANR	692496	IfStatement	if ( ch < 0x80 )		692455	8					
ANR	692497	Condition	ch < 0x80	3621:6:106177:106185	692455	0	True				
ANR	692498	RelationalExpression	ch < 0x80		692455	0		<			
ANR	692499	Identifier	ch		692455	0					
ANR	692500	PrimaryExpression	0x80		692455	1					
ANR	692501	ExpressionStatement	charLen = 1	3622:3:106191:106202	692455	1	True				
ANR	692502	AssignmentExpression	charLen = 1		692455	0		=			
ANR	692503	Identifier	charLen		692455	0					
ANR	692504	PrimaryExpression	1		692455	1					
ANR	692505	ElseStatement	else		692455	0					
ANR	692506	IfStatement	if ( ch < 0x80 + 0x40 + 0x20 )		692455	0					
ANR	692507	Condition	ch < 0x80 + 0x40 + 0x20	3623:11:106215:106237	692455	0	True				
ANR	692508	RelationalExpression	ch < 0x80 + 0x40 + 0x20		692455	0		<			
ANR	692509	Identifier	ch		692455	0					
ANR	692510	AdditiveExpression	0x80 + 0x40 + 0x20		692455	1		+			
ANR	692511	PrimaryExpression	0x80		692455	0					
ANR	692512	AdditiveExpression	0x40 + 0x20		692455	1		+			
ANR	692513	PrimaryExpression	0x40		692455	0					
ANR	692514	PrimaryExpression	0x20		692455	1					
ANR	692515	ExpressionStatement	charLen = 2	3624:3:106243:106254	692455	1	True				
ANR	692516	AssignmentExpression	charLen = 2		692455	0		=			
ANR	692517	Identifier	charLen		692455	0					
ANR	692518	PrimaryExpression	2		692455	1					
ANR	692519	ElseStatement	else		692455	0					
ANR	692520	IfStatement	if ( ch < 0x80 + 0x40 + 0x20 + 0x10 )		692455	0					
ANR	692521	Condition	ch < 0x80 + 0x40 + 0x20 + 0x10	3625:11:106267:106296	692455	0	True				
ANR	692522	RelationalExpression	ch < 0x80 + 0x40 + 0x20 + 0x10		692455	0		<			
ANR	692523	Identifier	ch		692455	0					
ANR	692524	AdditiveExpression	0x80 + 0x40 + 0x20 + 0x10		692455	1		+			
ANR	692525	PrimaryExpression	0x80		692455	0					
ANR	692526	AdditiveExpression	0x40 + 0x20 + 0x10		692455	1		+			
ANR	692527	PrimaryExpression	0x40		692455	0					
ANR	692528	AdditiveExpression	0x20 + 0x10		692455	1		+			
ANR	692529	PrimaryExpression	0x20		692455	0					
ANR	692530	PrimaryExpression	0x10		692455	1					
ANR	692531	ExpressionStatement	charLen = 3	3626:3:106302:106313	692455	1	True				
ANR	692532	AssignmentExpression	charLen = 3		692455	0		=			
ANR	692533	Identifier	charLen		692455	0					
ANR	692534	PrimaryExpression	3		692455	1					
ANR	692535	ElseStatement	else		692455	0					
ANR	692536	CompoundStatement		14:2:282:282	692455	0					
ANR	692537	ExpressionStatement	charLen = 4	3629:3:106329:106340	692455	0	True				
ANR	692538	AssignmentExpression	charLen = 4		692455	0		=			
ANR	692539	Identifier	charLen		692455	0					
ANR	692540	PrimaryExpression	4		692455	1					
ANR	692541	ExpressionStatement	ulen ++	3630:3:106345:106351	692455	1	True				
ANR	692542	PostIncDecOperationExpression	ulen ++		692455	0					
ANR	692543	Identifier	ulen		692455	0					
ANR	692544	IncDec	++		692455	1					
ANR	692545	ExpressionStatement	i += charLen	3632:2:106359:106371	692455	9	True				
ANR	692546	AssignmentExpression	i += charLen		692455	0		+=			
ANR	692547	Identifier	i		692455	0					
ANR	692548	Identifier	charLen		692455	1					
ANR	692549	ExpressionStatement	ulen ++	3633:2:106375:106381	692455	10	True				
ANR	692550	PostIncDecOperationExpression	ulen ++		692455	0					
ANR	692551	Identifier	ulen		692455	0					
ANR	692552	IncDec	++		692455	1					
ANR	692553	ReturnStatement	return ulen * 2 ;	3636:1:106441:106456	692455	3	True				
ANR	692554	MultiplicativeExpression	ulen * 2		692455	0		*			
ANR	692555	Identifier	ulen		692455	0					
ANR	692556	PrimaryExpression	2		692455	1					
ANR	692557	ReturnType	size_t		692455	1					
ANR	692558	Identifier	ASEncoding :: utf16LengthFromUtf8		692455	2					
ANR	692559	ParameterList	"const char * utf8In , size_t len"		692455	3					
ANR	692560	Parameter	const char * utf8In	3614:39:106003:106020	692455	0	True				
ANR	692561	ParameterType	const char *		692455	0					
ANR	692562	Identifier	utf8In		692455	1					
ANR	692563	Parameter	size_t len	3614:59:106023:106032	692455	1	True				
ANR	692564	ParameterType	size_t		692455	0					
ANR	692565	Identifier	len		692455	1					
ANR	692566	CFGEntryNode	ENTRY		692455		True				
ANR	692567	CFGExitNode	EXIT		692455		True				
ANR	692568	Symbol	charLen		692455						
ANR	692569	Symbol	len		692455						
ANR	692570	Symbol	ch		692455						
ANR	692571	Symbol	ulen		692455						
ANR	692572	Symbol	i		692455						
ANR	692573	Symbol	utf8In		692455						
ANR	692574	Function	ASEncoding :: utf16ToUtf8	3643:0:106615:108827							
ANR	692575	FunctionDef	"ASEncoding :: utf16ToUtf8 (char * utf16In , size_t inLen , bool isBigEndian , bool firstBlock , char * utf8Out)"		692574	0					
ANR	692576	CompoundStatement		3645:0:106762:108827	692574	0					
ANR	692577	IdentifierDeclStatement	int nCur16 = 0 ;	3646:1:106765:106779	692574	0	True				
ANR	692578	IdentifierDecl	nCur16 = 0		692574	0					
ANR	692579	IdentifierDeclType	int		692574	0					
ANR	692580	Identifier	nCur16		692574	1					
ANR	692581	AssignmentExpression	nCur16 = 0		692574	2		=			
ANR	692582	Identifier	nCur16		692574	0					
ANR	692583	PrimaryExpression	0		692574	1					
ANR	692584	IdentifierDeclStatement	int nCur = 0 ;	3647:1:106782:106794	692574	1	True				
ANR	692585	IdentifierDecl	nCur = 0		692574	0					
ANR	692586	IdentifierDeclType	int		692574	0					
ANR	692587	Identifier	nCur		692574	1					
ANR	692588	AssignmentExpression	nCur = 0		692574	2		=			
ANR	692589	Identifier	nCur		692574	0					
ANR	692590	PrimaryExpression	0		692574	1					
ANR	692591	Statement	ubyte	3648:1:106797:106801	692574	2	True				
ANR	692592	Statement	*	3648:6:106802:106802	692574	3	True				
ANR	692593	Statement	pRead	3648:8:106804:106808	692574	4	True				
ANR	692594	Statement	=	3648:14:106810:106810	692574	5	True				
ANR	692595	Statement	reinterpret_cast	3648:16:106812:106827	692574	6	True				
ANR	692596	Statement	<	3648:32:106828:106828	692574	7	True				
ANR	692597	Statement	ubyte	3648:33:106829:106833	692574	8	True				
ANR	692598	Statement	*	3648:38:106834:106834	692574	9	True				
ANR	692599	Statement	>	3648:39:106835:106835	692574	10	True				
ANR	692600	ExpressionStatement	utf16In	3648:40:106836:106845	692574	11	True				
ANR	692601	Identifier	utf16In		692574	0					
ANR	692602	Statement	ubyte	3649:1:106848:106852	692574	12	True				
ANR	692603	Statement	*	3649:6:106853:106853	692574	13	True				
ANR	692604	Statement	pCur	3649:8:106855:106858	692574	14	True				
ANR	692605	Statement	=	3649:13:106860:106860	692574	15	True				
ANR	692606	Statement	reinterpret_cast	3649:15:106862:106877	692574	16	True				
ANR	692607	Statement	<	3649:31:106878:106878	692574	17	True				
ANR	692608	Statement	ubyte	3649:32:106879:106883	692574	18	True				
ANR	692609	Statement	*	3649:37:106884:106884	692574	19	True				
ANR	692610	Statement	>	3649:38:106885:106885	692574	20	True				
ANR	692611	ExpressionStatement	utf8Out	3649:39:106886:106895	692574	21	True				
ANR	692612	Identifier	utf8Out		692574	0					
ANR	692613	IdentifierDeclStatement	const ubyte * pEnd = pRead + inLen ;	3650:1:106898:106931	692574	22	True				
ANR	692614	IdentifierDecl	* pEnd = pRead + inLen		692574	0					
ANR	692615	IdentifierDeclType	const ubyte *		692574	0					
ANR	692616	Identifier	pEnd		692574	1					
ANR	692617	AssignmentExpression	* pEnd = pRead + inLen		692574	2		=			
ANR	692618	Identifier	pEnd		692574	0					
ANR	692619	AdditiveExpression	pRead + inLen		692574	1		+			
ANR	692620	Identifier	pRead		692574	0					
ANR	692621	Identifier	inLen		692574	1					
ANR	692622	IdentifierDeclStatement	const ubyte * pCurStart = pCur ;	3651:1:106934:106963	692574	23	True				
ANR	692623	IdentifierDecl	* pCurStart = pCur		692574	0					
ANR	692624	IdentifierDeclType	const ubyte *		692574	0					
ANR	692625	Identifier	pCurStart		692574	1					
ANR	692626	AssignmentExpression	* pCurStart = pCur		692574	2		=			
ANR	692627	Identifier	pCur		692574	0					
ANR	692628	Identifier	pCur		692574	1					
ANR	692629	Statement	static	3652:1:106966:106971	692574	24	True				
ANR	692630	IdentifierDeclStatement	eState state = eStart ;	3652:8:106973:106994	692574	25	True				
ANR	692631	IdentifierDecl	state = eStart		692574	0					
ANR	692632	IdentifierDeclType	eState		692574	0					
ANR	692633	Identifier	state		692574	1					
ANR	692634	AssignmentExpression	state = eStart		692574	2		=			
ANR	692635	Identifier	eStart		692574	0					
ANR	692636	Identifier	eStart		692574	1					
ANR	692637	IfStatement	if ( firstBlock )		692574	26					
ANR	692638	Condition	firstBlock	3653:5:107044:107053	692574	0	True				
ANR	692639	Identifier	firstBlock		692574	0					
ANR	692640	ExpressionStatement	state = eStart	3654:2:107058:107072	692574	1	True				
ANR	692641	AssignmentExpression	state = eStart		692574	0		=			
ANR	692642	Identifier	state		692574	0					
ANR	692643	Identifier	eStart		692574	1					
ANR	692644	WhileStatement	while ( pRead < pEnd )		692574	27					
ANR	692645	Condition	pRead < pEnd	3657:8:107136:107147	692574	0	True				
ANR	692646	RelationalExpression	pRead < pEnd		692574	0		<			
ANR	692647	Identifier	pRead		692574	0					
ANR	692648	Identifier	pEnd		692574	1					
ANR	692649	CompoundStatement		14:1:388:388	692574	1					
ANR	692650	SwitchStatement	switch ( state )		692574	0					
ANR	692651	Condition	state	3659:10:107163:107167	692574	0	True				
ANR	692652	Identifier	state		692574	0					
ANR	692653	CompoundStatement		16:2:409:409	692574	1					
ANR	692654	Label	case eStart :	3661:3:107177:107188	692574	0	True				
ANR	692655	Identifier	eStart		692574	0					
ANR	692656	IfStatement	if ( pRead >= pEnd )		692574	1					
ANR	692657	Condition	pRead >= pEnd	3662:8:107198:107210	692574	0	True				
ANR	692658	RelationalExpression	pRead >= pEnd		692574	0		>=			
ANR	692659	Identifier	pRead		692574	0					
ANR	692660	Identifier	pEnd		692574	1					
ANR	692661	CompoundStatement		19:4:454:454	692574	1					
ANR	692662	ExpressionStatement	++ pRead	3664:5:107224:107231	692574	0	True				
ANR	692663	UnaryExpression	++ pRead		692574	0					
ANR	692664	IncDec	++		692574	0					
ANR	692665	Identifier	pRead		692574	1					
ANR	692666	BreakStatement	break ;	3665:5:107238:107243	692574	1	True				
ANR	692667	IfStatement	if ( isBigEndian )		692574	2					
ANR	692668	Condition	isBigEndian	3667:8:107259:107269	692574	0	True				
ANR	692669	Identifier	isBigEndian		692574	0					
ANR	692670	CompoundStatement		24:4:513:513	692574	1					
ANR	692671	ExpressionStatement	nCur16 = static_cast < utf16 > ( * pRead ++ << 8 )	3669:5:107283:107325	692574	0	True				
ANR	692672	AssignmentExpression	nCur16 = static_cast < utf16 > ( * pRead ++ << 8 )		692574	0		=			
ANR	692673	Identifier	nCur16		692574	0					
ANR	692674	RelationalExpression	static_cast < utf16 > ( * pRead ++ << 8 )		692574	1		<			
ANR	692675	Identifier	static_cast		692574	0					
ANR	692676	RelationalExpression	utf16 > ( * pRead ++ << 8 )		692574	1		>			
ANR	692677	Identifier	utf16		692574	0					
ANR	692678	ShiftExpression	* pRead ++ << 8		692574	1		<<			
ANR	692679	UnaryOperationExpression	* pRead ++		692574	0					
ANR	692680	UnaryOperator	*		692574	0					
ANR	692681	PostIncDecOperationExpression	pRead ++		692574	1					
ANR	692682	Identifier	pRead		692574	0					
ANR	692683	IncDec	++		692574	1					
ANR	692684	PrimaryExpression	8		692574	1					
ANR	692685	ExpressionStatement	nCur16 |= static_cast < utf16 > ( * pRead )	3670:5:107332:107368	692574	1	True				
ANR	692686	AssignmentExpression	nCur16 |= static_cast < utf16 > ( * pRead )		692574	0		|=			
ANR	692687	Identifier	nCur16		692574	0					
ANR	692688	RelationalExpression	static_cast < utf16 > ( * pRead )		692574	1		<			
ANR	692689	Identifier	static_cast		692574	0					
ANR	692690	RelationalExpression	utf16 > ( * pRead )		692574	1		>			
ANR	692691	Identifier	utf16		692574	0					
ANR	692692	UnaryOperationExpression	* pRead		692574	1					
ANR	692693	UnaryOperator	*		692574	0					
ANR	692694	Identifier	pRead		692574	1					
ANR	692695	ElseStatement	else		692574	0					
ANR	692696	CompoundStatement		29:4:626:626	692574	0					
ANR	692697	ExpressionStatement	nCur16 = * pRead ++	3674:5:107396:107413	692574	0	True				
ANR	692698	AssignmentExpression	nCur16 = * pRead ++		692574	0		=			
ANR	692699	Identifier	nCur16		692574	0					
ANR	692700	UnaryOperationExpression	* pRead ++		692574	1					
ANR	692701	UnaryOperator	*		692574	0					
ANR	692702	PostIncDecOperationExpression	pRead ++		692574	1					
ANR	692703	Identifier	pRead		692574	0					
ANR	692704	IncDec	++		692574	1					
ANR	692705	ExpressionStatement	nCur16 |= static_cast < utf16 > ( * pRead << 8 )	3675:5:107420:107461	692574	1	True				
ANR	692706	AssignmentExpression	nCur16 |= static_cast < utf16 > ( * pRead << 8 )		692574	0		|=			
ANR	692707	Identifier	nCur16		692574	0					
ANR	692708	RelationalExpression	static_cast < utf16 > ( * pRead << 8 )		692574	1		<			
ANR	692709	Identifier	static_cast		692574	0					
ANR	692710	RelationalExpression	utf16 > ( * pRead << 8 )		692574	1		>			
ANR	692711	Identifier	utf16		692574	0					
ANR	692712	ShiftExpression	* pRead << 8		692574	1		<<			
ANR	692713	UnaryOperationExpression	* pRead		692574	0					
ANR	692714	UnaryOperator	*		692574	0					
ANR	692715	Identifier	pRead		692574	1					
ANR	692716	PrimaryExpression	8		692574	1					
ANR	692717	IfStatement	if ( nCur16 >= SURROGATE_LEAD_FIRST && nCur16 <= SURROGATE_LEAD_LAST )		692574	3					
ANR	692718	Condition	nCur16 >= SURROGATE_LEAD_FIRST && nCur16 <= SURROGATE_LEAD_LAST	3677:8:107477:107539	692574	0	True				
ANR	692719	AndExpression	nCur16 >= SURROGATE_LEAD_FIRST && nCur16 <= SURROGATE_LEAD_LAST		692574	0		&&			
ANR	692720	RelationalExpression	nCur16 >= SURROGATE_LEAD_FIRST		692574	0		>=			
ANR	692721	Identifier	nCur16		692574	0					
ANR	692722	Identifier	SURROGATE_LEAD_FIRST		692574	1					
ANR	692723	RelationalExpression	nCur16 <= SURROGATE_LEAD_LAST		692574	1		<=			
ANR	692724	Identifier	nCur16		692574	0					
ANR	692725	Identifier	SURROGATE_LEAD_LAST		692574	1					
ANR	692726	CompoundStatement		36:5:804:813	692574	1					
ANR	692727	ExpressionStatement	++ pRead	3679:5:107553:107560	692574	0	True				
ANR	692728	UnaryExpression	++ pRead		692574	0					
ANR	692729	IncDec	++		692574	0					
ANR	692730	Identifier	pRead		692574	1					
ANR	692731	IdentifierDeclStatement	int trail ;	3680:5:107567:107576	692574	1	True				
ANR	692732	IdentifierDecl	trail		692574	0					
ANR	692733	IdentifierDeclType	int		692574	0					
ANR	692734	Identifier	trail		692574	1					
ANR	692735	IfStatement	if ( isBigEndian )		692574	2					
ANR	692736	Condition	isBigEndian	3681:9:107587:107597	692574	0	True				
ANR	692737	Identifier	isBigEndian		692574	0					
ANR	692738	CompoundStatement		38:5:842:842	692574	1					
ANR	692739	ExpressionStatement	trail = static_cast < utf16 > ( * pRead ++ << 8 )	3683:6:107613:107654	692574	0	True				
ANR	692740	AssignmentExpression	trail = static_cast < utf16 > ( * pRead ++ << 8 )		692574	0		=			
ANR	692741	Identifier	trail		692574	0					
ANR	692742	RelationalExpression	static_cast < utf16 > ( * pRead ++ << 8 )		692574	1		<			
ANR	692743	Identifier	static_cast		692574	0					
ANR	692744	RelationalExpression	utf16 > ( * pRead ++ << 8 )		692574	1		>			
ANR	692745	Identifier	utf16		692574	0					
ANR	692746	ShiftExpression	* pRead ++ << 8		692574	1		<<			
ANR	692747	UnaryOperationExpression	* pRead ++		692574	0					
ANR	692748	UnaryOperator	*		692574	0					
ANR	692749	PostIncDecOperationExpression	pRead ++		692574	1					
ANR	692750	Identifier	pRead		692574	0					
ANR	692751	IncDec	++		692574	1					
ANR	692752	PrimaryExpression	8		692574	1					
ANR	692753	ExpressionStatement	trail |= static_cast < utf16 > ( * pRead )	3684:6:107662:107697	692574	1	True				
ANR	692754	AssignmentExpression	trail |= static_cast < utf16 > ( * pRead )		692574	0		|=			
ANR	692755	Identifier	trail		692574	0					
ANR	692756	RelationalExpression	static_cast < utf16 > ( * pRead )		692574	1		<			
ANR	692757	Identifier	static_cast		692574	0					
ANR	692758	RelationalExpression	utf16 > ( * pRead )		692574	1		>			
ANR	692759	Identifier	utf16		692574	0					
ANR	692760	UnaryOperationExpression	* pRead		692574	1					
ANR	692761	UnaryOperator	*		692574	0					
ANR	692762	Identifier	pRead		692574	1					
ANR	692763	ElseStatement	else		692574	0					
ANR	692764	CompoundStatement		43:5:958:958	692574	0					
ANR	692765	ExpressionStatement	trail = * pRead ++	3688:6:107729:107745	692574	0	True				
ANR	692766	AssignmentExpression	trail = * pRead ++		692574	0		=			
ANR	692767	Identifier	trail		692574	0					
ANR	692768	UnaryOperationExpression	* pRead ++		692574	1					
ANR	692769	UnaryOperator	*		692574	0					
ANR	692770	PostIncDecOperationExpression	pRead ++		692574	1					
ANR	692771	Identifier	pRead		692574	0					
ANR	692772	IncDec	++		692574	1					
ANR	692773	ExpressionStatement	trail |= static_cast < utf16 > ( * pRead << 8 )	3689:6:107753:107793	692574	1	True				
ANR	692774	AssignmentExpression	trail |= static_cast < utf16 > ( * pRead << 8 )		692574	0		|=			
ANR	692775	Identifier	trail		692574	0					
ANR	692776	RelationalExpression	static_cast < utf16 > ( * pRead << 8 )		692574	1		<			
ANR	692777	Identifier	static_cast		692574	0					
ANR	692778	RelationalExpression	utf16 > ( * pRead << 8 )		692574	1		>			
ANR	692779	Identifier	utf16		692574	0					
ANR	692780	ShiftExpression	* pRead << 8		692574	1		<<			
ANR	692781	UnaryOperationExpression	* pRead		692574	0					
ANR	692782	UnaryOperator	*		692574	0					
ANR	692783	Identifier	pRead		692574	1					
ANR	692784	PrimaryExpression	8		692574	1					
ANR	692785	ExpressionStatement	nCur16 = ( ( ( nCur16 & 0x3ff ) << 10 ) | ( trail & 0x3ff ) ) + SURROGATE_FIRST_VALUE	3691:5:107807:107884	692574	3	True				
ANR	692786	AssignmentExpression	nCur16 = ( ( ( nCur16 & 0x3ff ) << 10 ) | ( trail & 0x3ff ) ) + SURROGATE_FIRST_VALUE		692574	0		=			
ANR	692787	Identifier	nCur16		692574	0					
ANR	692788	AdditiveExpression	( ( ( nCur16 & 0x3ff ) << 10 ) | ( trail & 0x3ff ) ) + SURROGATE_FIRST_VALUE		692574	1		+			
ANR	692789	InclusiveOrExpression	( ( nCur16 & 0x3ff ) << 10 ) | ( trail & 0x3ff )		692574	0		|			
ANR	692790	ShiftExpression	( nCur16 & 0x3ff ) << 10		692574	0		<<			
ANR	692791	BitAndExpression	nCur16 & 0x3ff		692574	0		&			
ANR	692792	Identifier	nCur16		692574	0					
ANR	692793	PrimaryExpression	0x3ff		692574	1					
ANR	692794	PrimaryExpression	10		692574	1					
ANR	692795	BitAndExpression	trail & 0x3ff		692574	1		&			
ANR	692796	Identifier	trail		692574	0					
ANR	692797	PrimaryExpression	0x3ff		692574	1					
ANR	692798	Identifier	SURROGATE_FIRST_VALUE		692574	1					
ANR	692799	ExpressionStatement	++ pRead	3693:4:107896:107903	692574	4	True				
ANR	692800	UnaryExpression	++ pRead		692574	0					
ANR	692801	IncDec	++		692574	0					
ANR	692802	Identifier	pRead		692574	1					
ANR	692803	IfStatement	if ( nCur16 < 0x80 )		692574	5					
ANR	692804	Condition	nCur16 < 0x80	3695:8:107914:107926	692574	0	True				
ANR	692805	RelationalExpression	nCur16 < 0x80		692574	0		<			
ANR	692806	Identifier	nCur16		692574	0					
ANR	692807	PrimaryExpression	0x80		692574	1					
ANR	692808	CompoundStatement		52:4:1170:1170	692574	1					
ANR	692809	ExpressionStatement	nCur = static_cast < ubyte > ( nCur16 & 0xFF )	3697:5:107940:107980	692574	0	True				
ANR	692810	AssignmentExpression	nCur = static_cast < ubyte > ( nCur16 & 0xFF )		692574	0		=			
ANR	692811	Identifier	nCur		692574	0					
ANR	692812	RelationalExpression	static_cast < ubyte > ( nCur16 & 0xFF )		692574	1		<			
ANR	692813	Identifier	static_cast		692574	0					
ANR	692814	RelationalExpression	ubyte > ( nCur16 & 0xFF )		692574	1		>			
ANR	692815	Identifier	ubyte		692574	0					
ANR	692816	BitAndExpression	nCur16 & 0xFF		692574	1		&			
ANR	692817	Identifier	nCur16		692574	0					
ANR	692818	PrimaryExpression	0xFF		692574	1					
ANR	692819	ExpressionStatement	state = eStart	3698:5:107987:108001	692574	1	True				
ANR	692820	AssignmentExpression	state = eStart		692574	0		=			
ANR	692821	Identifier	state		692574	0					
ANR	692822	Identifier	eStart		692574	1					
ANR	692823	ElseStatement	else		692574	0					
ANR	692824	IfStatement	if ( nCur16 < 0x800 )		692574	0					
ANR	692825	Condition	nCur16 < 0x800	3700:13:108022:108035	692574	0	True				
ANR	692826	RelationalExpression	nCur16 < 0x800		692574	0		<			
ANR	692827	Identifier	nCur16		692574	0					
ANR	692828	PrimaryExpression	0x800		692574	1					
ANR	692829	CompoundStatement		57:4:1279:1279	692574	1					
ANR	692830	ExpressionStatement	nCur = static_cast < ubyte > ( 0xC0 | ( nCur16 >> 6 ) )	3702:5:108049:108096	692574	0	True				
ANR	692831	AssignmentExpression	nCur = static_cast < ubyte > ( 0xC0 | ( nCur16 >> 6 ) )		692574	0		=			
ANR	692832	Identifier	nCur		692574	0					
ANR	692833	RelationalExpression	static_cast < ubyte > ( 0xC0 | ( nCur16 >> 6 ) )		692574	1		<			
ANR	692834	Identifier	static_cast		692574	0					
ANR	692835	RelationalExpression	ubyte > ( 0xC0 | ( nCur16 >> 6 ) )		692574	1		>			
ANR	692836	Identifier	ubyte		692574	0					
ANR	692837	InclusiveOrExpression	0xC0 | ( nCur16 >> 6 )		692574	1		|			
ANR	692838	PrimaryExpression	0xC0		692574	0					
ANR	692839	ShiftExpression	nCur16 >> 6		692574	1		>>			
ANR	692840	Identifier	nCur16		692574	0					
ANR	692841	PrimaryExpression	6		692574	1					
ANR	692842	ExpressionStatement	state = eFinal	3703:5:108103:108117	692574	1	True				
ANR	692843	AssignmentExpression	state = eFinal		692574	0		=			
ANR	692844	Identifier	state		692574	0					
ANR	692845	Identifier	eFinal		692574	1					
ANR	692846	ElseStatement	else		692574	0					
ANR	692847	IfStatement	if ( nCur16 < SURROGATE_FIRST_VALUE )		692574	0					
ANR	692848	Condition	nCur16 < SURROGATE_FIRST_VALUE	3705:13:108138:108167	692574	0	True				
ANR	692849	RelationalExpression	nCur16 < SURROGATE_FIRST_VALUE		692574	0		<			
ANR	692850	Identifier	nCur16		692574	0					
ANR	692851	Identifier	SURROGATE_FIRST_VALUE		692574	1					
ANR	692852	CompoundStatement		62:4:1411:1411	692574	1					
ANR	692853	ExpressionStatement	nCur = static_cast < ubyte > ( 0xE0 | ( nCur16 >> 12 ) )	3707:5:108181:108229	692574	0	True				
ANR	692854	AssignmentExpression	nCur = static_cast < ubyte > ( 0xE0 | ( nCur16 >> 12 ) )		692574	0		=			
ANR	692855	Identifier	nCur		692574	0					
ANR	692856	RelationalExpression	static_cast < ubyte > ( 0xE0 | ( nCur16 >> 12 ) )		692574	1		<			
ANR	692857	Identifier	static_cast		692574	0					
ANR	692858	RelationalExpression	ubyte > ( 0xE0 | ( nCur16 >> 12 ) )		692574	1		>			
ANR	692859	Identifier	ubyte		692574	0					
ANR	692860	InclusiveOrExpression	0xE0 | ( nCur16 >> 12 )		692574	1		|			
ANR	692861	PrimaryExpression	0xE0		692574	0					
ANR	692862	ShiftExpression	nCur16 >> 12		692574	1		>>			
ANR	692863	Identifier	nCur16		692574	0					
ANR	692864	PrimaryExpression	12		692574	1					
ANR	692865	ExpressionStatement	state = ePenultimate	3708:5:108236:108256	692574	1	True				
ANR	692866	AssignmentExpression	state = ePenultimate		692574	0		=			
ANR	692867	Identifier	state		692574	0					
ANR	692868	Identifier	ePenultimate		692574	1					
ANR	692869	ElseStatement	else		692574	0					
ANR	692870	CompoundStatement		67:4:1514:1514	692574	0					
ANR	692871	ExpressionStatement	nCur = static_cast < ubyte > ( 0xF0 | ( nCur16 >> 18 ) )	3712:5:108284:108332	692574	0	True				
ANR	692872	AssignmentExpression	nCur = static_cast < ubyte > ( 0xF0 | ( nCur16 >> 18 ) )		692574	0		=			
ANR	692873	Identifier	nCur		692574	0					
ANR	692874	RelationalExpression	static_cast < ubyte > ( 0xF0 | ( nCur16 >> 18 ) )		692574	1		<			
ANR	692875	Identifier	static_cast		692574	0					
ANR	692876	RelationalExpression	ubyte > ( 0xF0 | ( nCur16 >> 18 ) )		692574	1		>			
ANR	692877	Identifier	ubyte		692574	0					
ANR	692878	InclusiveOrExpression	0xF0 | ( nCur16 >> 18 )		692574	1		|			
ANR	692879	PrimaryExpression	0xF0		692574	0					
ANR	692880	ShiftExpression	nCur16 >> 18		692574	1		>>			
ANR	692881	Identifier	nCur16		692574	0					
ANR	692882	PrimaryExpression	18		692574	1					
ANR	692883	ExpressionStatement	state = eSecondOf4Bytes	3713:5:108339:108362	692574	1	True				
ANR	692884	AssignmentExpression	state = eSecondOf4Bytes		692574	0		=			
ANR	692885	Identifier	state		692574	0					
ANR	692886	Identifier	eSecondOf4Bytes		692574	1					
ANR	692887	BreakStatement	break ;	3715:4:108374:108379	692574	6	True				
ANR	692888	Label	case eSecondOf4Bytes :	3716:3:108384:108404	692574	7	True				
ANR	692889	Identifier	eSecondOf4Bytes		692574	0					
ANR	692890	ExpressionStatement	nCur = static_cast < ubyte > ( 0x80 | ( ( nCur16 >> 12 ) & 0x3F ) )	3717:4:108410:108467	692574	8	True				
ANR	692891	AssignmentExpression	nCur = static_cast < ubyte > ( 0x80 | ( ( nCur16 >> 12 ) & 0x3F ) )		692574	0		=			
ANR	692892	Identifier	nCur		692574	0					
ANR	692893	RelationalExpression	static_cast < ubyte > ( 0x80 | ( ( nCur16 >> 12 ) & 0x3F ) )		692574	1		<			
ANR	692894	Identifier	static_cast		692574	0					
ANR	692895	RelationalExpression	ubyte > ( 0x80 | ( ( nCur16 >> 12 ) & 0x3F ) )		692574	1		>			
ANR	692896	Identifier	ubyte		692574	0					
ANR	692897	InclusiveOrExpression	0x80 | ( ( nCur16 >> 12 ) & 0x3F )		692574	1		|			
ANR	692898	PrimaryExpression	0x80		692574	0					
ANR	692899	BitAndExpression	( nCur16 >> 12 ) & 0x3F		692574	1		&			
ANR	692900	ShiftExpression	nCur16 >> 12		692574	0		>>			
ANR	692901	Identifier	nCur16		692574	0					
ANR	692902	PrimaryExpression	12		692574	1					
ANR	692903	PrimaryExpression	0x3F		692574	1					
ANR	692904	ExpressionStatement	state = ePenultimate	3718:4:108473:108493	692574	9	True				
ANR	692905	AssignmentExpression	state = ePenultimate		692574	0		=			
ANR	692906	Identifier	state		692574	0					
ANR	692907	Identifier	ePenultimate		692574	1					
ANR	692908	BreakStatement	break ;	3719:4:108499:108504	692574	10	True				
ANR	692909	Label	case ePenultimate :	3720:3:108509:108526	692574	11	True				
ANR	692910	Identifier	ePenultimate		692574	0					
ANR	692911	ExpressionStatement	nCur = static_cast < ubyte > ( 0x80 | ( ( nCur16 >> 6 ) & 0x3F ) )	3721:4:108532:108588	692574	12	True				
ANR	692912	AssignmentExpression	nCur = static_cast < ubyte > ( 0x80 | ( ( nCur16 >> 6 ) & 0x3F ) )		692574	0		=			
ANR	692913	Identifier	nCur		692574	0					
ANR	692914	RelationalExpression	static_cast < ubyte > ( 0x80 | ( ( nCur16 >> 6 ) & 0x3F ) )		692574	1		<			
ANR	692915	Identifier	static_cast		692574	0					
ANR	692916	RelationalExpression	ubyte > ( 0x80 | ( ( nCur16 >> 6 ) & 0x3F ) )		692574	1		>			
ANR	692917	Identifier	ubyte		692574	0					
ANR	692918	InclusiveOrExpression	0x80 | ( ( nCur16 >> 6 ) & 0x3F )		692574	1		|			
ANR	692919	PrimaryExpression	0x80		692574	0					
ANR	692920	BitAndExpression	( nCur16 >> 6 ) & 0x3F		692574	1		&			
ANR	692921	ShiftExpression	nCur16 >> 6		692574	0		>>			
ANR	692922	Identifier	nCur16		692574	0					
ANR	692923	PrimaryExpression	6		692574	1					
ANR	692924	PrimaryExpression	0x3F		692574	1					
ANR	692925	ExpressionStatement	state = eFinal	3722:4:108594:108608	692574	13	True				
ANR	692926	AssignmentExpression	state = eFinal		692574	0		=			
ANR	692927	Identifier	state		692574	0					
ANR	692928	Identifier	eFinal		692574	1					
ANR	692929	BreakStatement	break ;	3723:4:108614:108619	692574	14	True				
ANR	692930	Label	case eFinal :	3724:3:108624:108635	692574	15	True				
ANR	692931	Identifier	eFinal		692574	0					
ANR	692932	ExpressionStatement	nCur = static_cast < ubyte > ( 0x80 | ( nCur16 & 0x3F ) )	3725:4:108641:108690	692574	16	True				
ANR	692933	AssignmentExpression	nCur = static_cast < ubyte > ( 0x80 | ( nCur16 & 0x3F ) )		692574	0		=			
ANR	692934	Identifier	nCur		692574	0					
ANR	692935	RelationalExpression	static_cast < ubyte > ( 0x80 | ( nCur16 & 0x3F ) )		692574	1		<			
ANR	692936	Identifier	static_cast		692574	0					
ANR	692937	RelationalExpression	ubyte > ( 0x80 | ( nCur16 & 0x3F ) )		692574	1		>			
ANR	692938	Identifier	ubyte		692574	0					
ANR	692939	InclusiveOrExpression	0x80 | ( nCur16 & 0x3F )		692574	1		|			
ANR	692940	PrimaryExpression	0x80		692574	0					
ANR	692941	BitAndExpression	nCur16 & 0x3F		692574	1		&			
ANR	692942	Identifier	nCur16		692574	0					
ANR	692943	PrimaryExpression	0x3F		692574	1					
ANR	692944	ExpressionStatement	state = eStart	3726:4:108696:108710	692574	17	True				
ANR	692945	AssignmentExpression	state = eStart		692574	0		=			
ANR	692946	Identifier	state		692574	0					
ANR	692947	Identifier	eStart		692574	1					
ANR	692948	BreakStatement	break ;	3727:4:108716:108721	692574	18	True				
ANR	692949	ExpressionStatement	* pCur ++ = static_cast < ubyte > ( nCur )	3730:2:108762:108796	692574	1	True				
ANR	692950	AssignmentExpression	* pCur ++ = static_cast < ubyte > ( nCur )		692574	0		=			
ANR	692951	UnaryOperationExpression	* pCur ++		692574	0					
ANR	692952	UnaryOperator	*		692574	0					
ANR	692953	PostIncDecOperationExpression	pCur ++		692574	1					
ANR	692954	Identifier	pCur		692574	0					
ANR	692955	IncDec	++		692574	1					
ANR	692956	RelationalExpression	static_cast < ubyte > ( nCur )		692574	1		<			
ANR	692957	Identifier	static_cast		692574	0					
ANR	692958	RelationalExpression	ubyte > ( nCur )		692574	1		>			
ANR	692959	Identifier	ubyte		692574	0					
ANR	692960	Identifier	nCur		692574	1					
ANR	692961	ReturnStatement	return pCur - pCurStart ;	3732:1:108802:108825	692574	28	True				
ANR	692962	AdditiveExpression	pCur - pCurStart		692574	0		-			
ANR	692963	Identifier	pCur		692574	0					
ANR	692964	Identifier	pCurStart		692574	1					
ANR	692965	ReturnType	size_t		692574	1					
ANR	692966	Identifier	ASEncoding :: utf16ToUtf8		692574	2					
ANR	692967	ParameterList	"char * utf16In , size_t inLen , bool isBigEndian , bool firstBlock , char * utf8Out"		692574	3					
ANR	692968	Parameter	char * utf16In	3643:31:106646:106658	692574	0	True				
ANR	692969	ParameterType	char *		692574	0					
ANR	692970	Identifier	utf16In		692574	1					
ANR	692971	Parameter	size_t inLen	3643:46:106661:106672	692574	1	True				
ANR	692972	ParameterType	size_t		692574	0					
ANR	692973	Identifier	inLen		692574	1					
ANR	692974	Parameter	bool isBigEndian	3643:60:106675:106690	692574	2	True				
ANR	692975	ParameterType	bool		692574	0					
ANR	692976	Identifier	isBigEndian		692574	1					
ANR	692977	Parameter	bool firstBlock	3644:31:106724:106738	692574	3	True				
ANR	692978	ParameterType	bool		692574	0					
ANR	692979	Identifier	firstBlock		692574	1					
ANR	692980	Parameter	char * utf8Out	3644:48:106741:106753	692574	4	True				
ANR	692981	ParameterType	char *		692574	0					
ANR	692982	Identifier	utf8Out		692574	1					
ANR	692983	CFGEntryNode	ENTRY		692574		True				
ANR	692984	CFGExitNode	EXIT		692574		True				
ANR	692985	Symbol	nCur		692574						
ANR	692986	Symbol	* pRead		692574						
ANR	692987	Symbol	pCur		692574						
ANR	692988	Symbol	SURROGATE_LEAD_LAST		692574						
ANR	692989	Symbol	* pCur ++		692574						
ANR	692990	Symbol	inLen		692574						
ANR	692991	Symbol	nCur16		692574						
ANR	692992	Symbol	utf16In		692574						
ANR	692993	Symbol	trail		692574						
ANR	692994	Symbol	SURROGATE_LEAD_FIRST		692574						
ANR	692995	Symbol	isBigEndian		692574						
ANR	692996	Symbol	state		692574						
ANR	692997	Symbol	eStart		692574						
ANR	692998	Symbol	ubyte		692574						
ANR	692999	Symbol	ePenultimate		692574						
ANR	693000	Symbol	eSecondOf4Bytes		692574						
ANR	693001	Symbol	utf16		692574						
ANR	693002	Symbol	* pRead ++		692574						
ANR	693003	Symbol	static_cast		692574						
ANR	693004	Symbol	firstBlock		692574						
ANR	693005	Symbol	eFinal		692574						
ANR	693006	Symbol	pRead		692574						
ANR	693007	Symbol	pEnd		692574						
ANR	693008	Symbol	pCurStart		692574						
ANR	693009	Symbol	utf8Out		692574						
ANR	693010	Symbol	SURROGATE_FIRST_VALUE		692574						
ANR	693011	Function	Java_AStyleInterface_AStyleMain	3759:12:109687:111055							
ANR	693012	FunctionDef	"Java_AStyleInterface_AStyleMain (JNIEnv * env , jobject obj , jstring textInJava , jstring optionsJava)"		693011	0					
ANR	693013	CompoundStatement		3764:0:109953:111055	693011	0					
ANR	693014	ExpressionStatement	g_env = env	3765:1:109956:109967	693011	0	True				
ANR	693015	AssignmentExpression	g_env = env		693011	0		=			
ANR	693016	Identifier	g_env		693011	0					
ANR	693017	Identifier	env		693011	1					
ANR	693018	ExpressionStatement	g_obj = obj	3766:1:110035:110046	693011	1	True				
ANR	693019	AssignmentExpression	g_obj = obj		693011	0		=			
ANR	693020	Identifier	g_obj		693011	0					
ANR	693021	Identifier	obj		693011	1					
ANR	693022	IdentifierDeclStatement	"jstring textErr = env -> NewStringUTF ( """" ) ;"	3768:1:110115:110154	693011	2	True				
ANR	693023	IdentifierDecl	"textErr = env -> NewStringUTF ( """" )"		693011	0					
ANR	693024	IdentifierDeclType	jstring		693011	0					
ANR	693025	Identifier	textErr		693011	1					
ANR	693026	AssignmentExpression	"textErr = env -> NewStringUTF ( """" )"		693011	2		=			
ANR	693027	Identifier	textErr		693011	0					
ANR	693028	CallExpression	"env -> NewStringUTF ( """" )"		693011	1					
ANR	693029	Callee	env -> NewStringUTF		693011	0					
ANR	693030	PtrMemberAccess	env -> NewStringUTF		693011	0					
ANR	693031	Identifier	env		693011	0					
ANR	693032	Identifier	NewStringUTF		693011	1					
ANR	693033	ArgumentList	""""""		693011	1					
ANR	693034	Argument	""""""		693011	0					
ANR	693035	PrimaryExpression	""""""		693011	0					
ANR	693036	IdentifierDeclStatement	jclass cls = env -> GetObjectClass ( obj ) ;	3771:1:110231:110268	693011	3	True				
ANR	693037	IdentifierDecl	cls = env -> GetObjectClass ( obj )		693011	0					
ANR	693038	IdentifierDeclType	jclass		693011	0					
ANR	693039	Identifier	cls		693011	1					
ANR	693040	AssignmentExpression	cls = env -> GetObjectClass ( obj )		693011	2		=			
ANR	693041	Identifier	cls		693011	0					
ANR	693042	CallExpression	env -> GetObjectClass ( obj )		693011	1					
ANR	693043	Callee	env -> GetObjectClass		693011	0					
ANR	693044	PtrMemberAccess	env -> GetObjectClass		693011	0					
ANR	693045	Identifier	env		693011	0					
ANR	693046	Identifier	GetObjectClass		693011	1					
ANR	693047	ArgumentList	obj		693011	1					
ANR	693048	Argument	obj		693011	0					
ANR	693049	Identifier	obj		693011	0					
ANR	693050	ExpressionStatement	"g_mid = env -> GetMethodID ( cls , ""ErrorHandler"" , ""(ILjava/lang/String;)V"" )"	3772:1:110271:110342	693011	4	True				
ANR	693051	AssignmentExpression	"g_mid = env -> GetMethodID ( cls , ""ErrorHandler"" , ""(ILjava/lang/String;)V"" )"		693011	0		=			
ANR	693052	Identifier	g_mid		693011	0					
ANR	693053	CallExpression	"env -> GetMethodID ( cls , ""ErrorHandler"" , ""(ILjava/lang/String;)V"" )"		693011	1					
ANR	693054	Callee	env -> GetMethodID		693011	0					
ANR	693055	PtrMemberAccess	env -> GetMethodID		693011	0					
ANR	693056	Identifier	env		693011	0					
ANR	693057	Identifier	GetMethodID		693011	1					
ANR	693058	ArgumentList	cls		693011	1					
ANR	693059	Argument	cls		693011	0					
ANR	693060	Identifier	cls		693011	0					
ANR	693061	Argument	"""ErrorHandler"""		693011	1					
ANR	693062	PrimaryExpression	"""ErrorHandler"""		693011	0					
ANR	693063	Argument	"""(ILjava/lang/String;)V"""		693011	2					
ANR	693064	PrimaryExpression	"""(ILjava/lang/String;)V"""		693011	0					
ANR	693065	IfStatement	if ( g_mid == nullptr )		693011	5					
ANR	693066	Condition	g_mid == nullptr	3773:5:110349:110364	693011	0	True				
ANR	693067	EqualityExpression	g_mid == nullptr		693011	0		==			
ANR	693068	Identifier	g_mid		693011	0					
ANR	693069	Identifier	nullptr		693011	1					
ANR	693070	CompoundStatement		11:1:414:414	693011	1					
ANR	693071	ExpressionStatement	"cout << ""Cannot find java method ErrorHandler"" << endl"	3775:2:110372:110426	693011	0	True				
ANR	693072	ShiftExpression	"cout << ""Cannot find java method ErrorHandler"" << endl"		693011	0		<<			
ANR	693073	Identifier	cout		693011	0					
ANR	693074	ShiftExpression	"""Cannot find java method ErrorHandler"" << endl"		693011	1		<<			
ANR	693075	PrimaryExpression	"""Cannot find java method ErrorHandler"""		693011	0					
ANR	693076	Identifier	endl		693011	1					
ANR	693077	ReturnStatement	return textErr ;	3776:2:110430:110444	693011	1	True				
ANR	693078	Identifier	textErr		693011	0					
ANR	693079	IdentifierDeclStatement	"const char * textIn = env -> GetStringUTFChars ( textInJava , nullptr ) ;"	3780:1:110480:110544	693011	6	True				
ANR	693080	IdentifierDecl	"* textIn = env -> GetStringUTFChars ( textInJava , nullptr )"		693011	0					
ANR	693081	IdentifierDeclType	const char *		693011	0					
ANR	693082	Identifier	textIn		693011	1					
ANR	693083	AssignmentExpression	"* textIn = env -> GetStringUTFChars ( textInJava , nullptr )"		693011	2		=			
ANR	693084	Identifier	textIn		693011	0					
ANR	693085	CallExpression	"env -> GetStringUTFChars ( textInJava , nullptr )"		693011	1					
ANR	693086	Callee	env -> GetStringUTFChars		693011	0					
ANR	693087	PtrMemberAccess	env -> GetStringUTFChars		693011	0					
ANR	693088	Identifier	env		693011	0					
ANR	693089	Identifier	GetStringUTFChars		693011	1					
ANR	693090	ArgumentList	textInJava		693011	1					
ANR	693091	Argument	textInJava		693011	0					
ANR	693092	Identifier	textInJava		693011	0					
ANR	693093	Argument	nullptr		693011	1					
ANR	693094	Identifier	nullptr		693011	0					
ANR	693095	IdentifierDeclStatement	"const char * options = env -> GetStringUTFChars ( optionsJava , nullptr ) ;"	3781:1:110547:110613	693011	7	True				
ANR	693096	IdentifierDecl	"* options = env -> GetStringUTFChars ( optionsJava , nullptr )"		693011	0					
ANR	693097	IdentifierDeclType	const char *		693011	0					
ANR	693098	Identifier	options		693011	1					
ANR	693099	AssignmentExpression	"* options = env -> GetStringUTFChars ( optionsJava , nullptr )"		693011	2		=			
ANR	693100	Identifier	options		693011	0					
ANR	693101	CallExpression	"env -> GetStringUTFChars ( optionsJava , nullptr )"		693011	1					
ANR	693102	Callee	env -> GetStringUTFChars		693011	0					
ANR	693103	PtrMemberAccess	env -> GetStringUTFChars		693011	0					
ANR	693104	Identifier	env		693011	0					
ANR	693105	Identifier	GetStringUTFChars		693011	1					
ANR	693106	ArgumentList	optionsJava		693011	1					
ANR	693107	Argument	optionsJava		693011	0					
ANR	693108	Identifier	optionsJava		693011	0					
ANR	693109	Argument	nullptr		693011	1					
ANR	693110	Identifier	nullptr		693011	0					
ANR	693111	IdentifierDeclStatement	"char * textOut = AStyleMain ( textIn , options , javaErrorHandler , javaMemoryAlloc ) ;"	3784:1:110654:110732	693011	8	True				
ANR	693112	IdentifierDecl	"* textOut = AStyleMain ( textIn , options , javaErrorHandler , javaMemoryAlloc )"		693011	0					
ANR	693113	IdentifierDeclType	char *		693011	0					
ANR	693114	Identifier	textOut		693011	1					
ANR	693115	AssignmentExpression	"* textOut = AStyleMain ( textIn , options , javaErrorHandler , javaMemoryAlloc )"		693011	2		=			
ANR	693116	Identifier	textOut		693011	0					
ANR	693117	CallExpression	"AStyleMain ( textIn , options , javaErrorHandler , javaMemoryAlloc )"		693011	1					
ANR	693118	Callee	AStyleMain		693011	0					
ANR	693119	Identifier	AStyleMain		693011	0					
ANR	693120	ArgumentList	textIn		693011	1					
ANR	693121	Argument	textIn		693011	0					
ANR	693122	Identifier	textIn		693011	0					
ANR	693123	Argument	options		693011	1					
ANR	693124	Identifier	options		693011	0					
ANR	693125	Argument	javaErrorHandler		693011	2					
ANR	693126	Identifier	javaErrorHandler		693011	0					
ANR	693127	Argument	javaMemoryAlloc		693011	3					
ANR	693128	Identifier	javaMemoryAlloc		693011	0					
ANR	693129	IfStatement	if ( textOut == nullptr )		693011	9					
ANR	693130	Condition	textOut == nullptr	3786:5:110805:110822	693011	0	True				
ANR	693131	EqualityExpression	textOut == nullptr		693011	0		==			
ANR	693132	Identifier	textOut		693011	0					
ANR	693133	Identifier	nullptr		693011	1					
ANR	693134	ReturnStatement	return textErr ;	3787:2:110827:110841	693011	1	True				
ANR	693135	Identifier	textErr		693011	0					
ANR	693136	IdentifierDeclStatement	jstring textOutJava = env -> NewStringUTF ( textOut ) ;	3790:1:110864:110912	693011	10	True				
ANR	693137	IdentifierDecl	textOutJava = env -> NewStringUTF ( textOut )		693011	0					
ANR	693138	IdentifierDeclType	jstring		693011	0					
ANR	693139	Identifier	textOutJava		693011	1					
ANR	693140	AssignmentExpression	textOutJava = env -> NewStringUTF ( textOut )		693011	2		=			
ANR	693141	Identifier	textOutJava		693011	0					
ANR	693142	CallExpression	env -> NewStringUTF ( textOut )		693011	1					
ANR	693143	Callee	env -> NewStringUTF		693011	0					
ANR	693144	PtrMemberAccess	env -> NewStringUTF		693011	0					
ANR	693145	Identifier	env		693011	0					
ANR	693146	Identifier	NewStringUTF		693011	1					
ANR	693147	ArgumentList	textOut		693011	1					
ANR	693148	Argument	textOut		693011	0					
ANR	693149	Identifier	textOut		693011	0					
ANR	693150	Statement	delete	3791:1:110915:110920	693011	11	True				
ANR	693151	Statement	[	3791:7:110921:110921	693011	12	True				
ANR	693152	Statement	]	3791:8:110922:110922	693011	13	True				
ANR	693153	ExpressionStatement	textOut	3791:10:110924:110931	693011	14	True				
ANR	693154	Identifier	textOut		693011	0					
ANR	693155	ExpressionStatement	"env -> ReleaseStringUTFChars ( textInJava , textIn )"	3792:1:110934:110980	693011	15	True				
ANR	693156	CallExpression	"env -> ReleaseStringUTFChars ( textInJava , textIn )"		693011	0					
ANR	693157	Callee	env -> ReleaseStringUTFChars		693011	0					
ANR	693158	PtrMemberAccess	env -> ReleaseStringUTFChars		693011	0					
ANR	693159	Identifier	env		693011	0					
ANR	693160	Identifier	ReleaseStringUTFChars		693011	1					
ANR	693161	ArgumentList	textInJava		693011	1					
ANR	693162	Argument	textInJava		693011	0					
ANR	693163	Identifier	textInJava		693011	0					
ANR	693164	Argument	textIn		693011	1					
ANR	693165	Identifier	textIn		693011	0					
ANR	693166	ExpressionStatement	"env -> ReleaseStringUTFChars ( optionsJava , options )"	3793:1:110983:111031	693011	16	True				
ANR	693167	CallExpression	"env -> ReleaseStringUTFChars ( optionsJava , options )"		693011	0					
ANR	693168	Callee	env -> ReleaseStringUTFChars		693011	0					
ANR	693169	PtrMemberAccess	env -> ReleaseStringUTFChars		693011	0					
ANR	693170	Identifier	env		693011	0					
ANR	693171	Identifier	ReleaseStringUTFChars		693011	1					
ANR	693172	ArgumentList	optionsJava		693011	1					
ANR	693173	Argument	optionsJava		693011	0					
ANR	693174	Identifier	optionsJava		693011	0					
ANR	693175	Argument	options		693011	1					
ANR	693176	Identifier	options		693011	0					
ANR	693177	ReturnStatement	return textOutJava ;	3795:1:111035:111053	693011	17	True				
ANR	693178	Identifier	textOutJava		693011	0					
ANR	693179	ReturnType	EXPORT jstring STDCALL		693011	1					
ANR	693180	Identifier	Java_AStyleInterface_AStyleMain		693011	2					
ANR	693181	ParameterList	"JNIEnv * env , jobject obj , jstring textInJava , jstring optionsJava"		693011	3					
ANR	693182	Parameter	JNIEnv * env	3760:48:109742:109752	693011	0	True				
ANR	693183	ParameterType	JNIEnv *		693011	0					
ANR	693184	Identifier	env		693011	1					
ANR	693185	Parameter	jobject obj	3761:48:109803:109813	693011	1	True				
ANR	693186	ParameterType	jobject		693011	0					
ANR	693187	Identifier	obj		693011	1					
ANR	693188	Parameter	jstring textInJava	3762:48:109864:109881	693011	2	True				
ANR	693189	ParameterType	jstring		693011	0					
ANR	693190	Identifier	textInJava		693011	1					
ANR	693191	Parameter	jstring optionsJava	3763:48:109932:109950	693011	3	True				
ANR	693192	ParameterType	jstring		693011	0					
ANR	693193	Identifier	optionsJava		693011	1					
ANR	693194	CFGEntryNode	ENTRY		693011		True				
ANR	693195	CFGExitNode	EXIT		693011		True				
ANR	693196	Symbol	env -> GetStringUTFChars		693011						
ANR	693197	Symbol	textErr		693011						
ANR	693198	Symbol	AStyleMain		693011						
ANR	693199	Symbol	g_obj		693011						
ANR	693200	Symbol	* env		693011						
ANR	693201	Symbol	g_mid		693011						
ANR	693202	Symbol	optionsJava		693011						
ANR	693203	Symbol	javaErrorHandler		693011						
ANR	693204	Symbol	cls		693011						
ANR	693205	Symbol	textIn		693011						
ANR	693206	Symbol	env		693011						
ANR	693207	Symbol	env -> GetObjectClass		693011						
ANR	693208	Symbol	env -> GetMethodID		693011						
ANR	693209	Symbol	g_env		693011						
ANR	693210	Symbol	env -> NewStringUTF		693011						
ANR	693211	Symbol	textOutJava		693011						
ANR	693212	Symbol	obj		693011						
ANR	693213	Symbol	options		693011						
ANR	693214	Symbol	javaMemoryAlloc		693011						
ANR	693215	Symbol	textOut		693011						
ANR	693216	Symbol	textInJava		693011						
ANR	693217	Symbol	nullptr		693011						
ANR	693218	Function	javaErrorHandler	3799:0:111089:111296							
ANR	693219	FunctionDef	"javaErrorHandler (int errorNumber , const char * errorMessage)"		693218	0					
ANR	693220	CompoundStatement		3800:0:111162:111296	693218	0					
ANR	693221	IdentifierDeclStatement	jstring errorMessageJava = g_env -> NewStringUTF ( errorMessage ) ;	3801:1:111165:111225	693218	0	True				
ANR	693222	IdentifierDecl	errorMessageJava = g_env -> NewStringUTF ( errorMessage )		693218	0					
ANR	693223	IdentifierDeclType	jstring		693218	0					
ANR	693224	Identifier	errorMessageJava		693218	1					
ANR	693225	AssignmentExpression	errorMessageJava = g_env -> NewStringUTF ( errorMessage )		693218	2		=			
ANR	693226	Identifier	errorMessageJava		693218	0					
ANR	693227	CallExpression	g_env -> NewStringUTF ( errorMessage )		693218	1					
ANR	693228	Callee	g_env -> NewStringUTF		693218	0					
ANR	693229	PtrMemberAccess	g_env -> NewStringUTF		693218	0					
ANR	693230	Identifier	g_env		693218	0					
ANR	693231	Identifier	NewStringUTF		693218	1					
ANR	693232	ArgumentList	errorMessage		693218	1					
ANR	693233	Argument	errorMessage		693218	0					
ANR	693234	Identifier	errorMessage		693218	0					
ANR	693235	ExpressionStatement	"g_env -> CallVoidMethod ( g_obj , g_mid , errorNumber , errorMessageJava )"	3802:1:111228:111294	693218	1	True				
ANR	693236	CallExpression	"g_env -> CallVoidMethod ( g_obj , g_mid , errorNumber , errorMessageJava )"		693218	0					
ANR	693237	Callee	g_env -> CallVoidMethod		693218	0					
ANR	693238	PtrMemberAccess	g_env -> CallVoidMethod		693218	0					
ANR	693239	Identifier	g_env		693218	0					
ANR	693240	Identifier	CallVoidMethod		693218	1					
ANR	693241	ArgumentList	g_obj		693218	1					
ANR	693242	Argument	g_obj		693218	0					
ANR	693243	Identifier	g_obj		693218	0					
ANR	693244	Argument	g_mid		693218	1					
ANR	693245	Identifier	g_mid		693218	0					
ANR	693246	Argument	errorNumber		693218	2					
ANR	693247	Identifier	errorNumber		693218	0					
ANR	693248	Argument	errorMessageJava		693218	3					
ANR	693249	Identifier	errorMessageJava		693218	0					
ANR	693250	ReturnType	void STDCALL		693218	1					
ANR	693251	Identifier	javaErrorHandler		693218	2					
ANR	693252	ParameterList	"int errorNumber , const char * errorMessage"		693218	3					
ANR	693253	Parameter	int errorNumber	3799:30:111119:111133	693218	0	True				
ANR	693254	ParameterType	int		693218	0					
ANR	693255	Identifier	errorNumber		693218	1					
ANR	693256	Parameter	const char * errorMessage	3799:47:111136:111159	693218	1	True				
ANR	693257	ParameterType	const char *		693218	0					
ANR	693258	Identifier	errorMessage		693218	1					
ANR	693259	CFGEntryNode	ENTRY		693218		True				
ANR	693260	CFGExitNode	EXIT		693218		True				
ANR	693261	Symbol	g_env -> NewStringUTF		693218						
ANR	693262	Symbol	* g_env		693218						
ANR	693263	Symbol	g_obj		693218						
ANR	693264	Symbol	errorMessage		693218						
ANR	693265	Symbol	g_mid		693218						
ANR	693266	Symbol	errorMessageJava		693218						
ANR	693267	Symbol	g_env		693218						
ANR	693268	Symbol	errorNumber		693218						
ANR	693269	Function	javaMemoryAlloc	3806:6:111347:111527							
ANR	693270	FunctionDef	javaMemoryAlloc (unsigned long memoryNeeded)		693269	0					
ANR	693271	CompoundStatement		3807:0:111399:111527	693269	0					
ANR	693272	Statement	char	3809:1:111462:111465	693269	0	True				
ANR	693273	Statement	*	3809:5:111466:111466	693269	1	True				
ANR	693274	Statement	buffer	3809:7:111468:111473	693269	2	True				
ANR	693275	Statement	=	3809:14:111475:111475	693269	3	True				
ANR	693276	Statement	new	3809:16:111477:111479	693269	4	True				
ANR	693277	ExpressionStatement	( nothrow ) char [ memoryNeeded ]	3809:20:111481:111509	693269	5	True				
ANR	693278	CastExpression	( nothrow ) char [ memoryNeeded ]		693269	0					
ANR	693279	CastTarget	nothrow		693269	0					
ANR	693280	ArrayIndexing	char [ memoryNeeded ]		693269	1					
ANR	693281	Identifier	char		693269	0					
ANR	693282	Identifier	memoryNeeded		693269	1					
ANR	693283	ReturnStatement	return buffer ;	3810:1:111512:111525	693269	6	True				
ANR	693284	Identifier	buffer		693269	0					
ANR	693285	ReturnType	STDCALL		693269	1					
ANR	693286	Identifier	javaMemoryAlloc		693269	2					
ANR	693287	ParameterList	unsigned long memoryNeeded		693269	3					
ANR	693288	Parameter	unsigned long memoryNeeded	3806:30:111371:111396	693269	0	True				
ANR	693289	ParameterType	unsigned long		693269	0					
ANR	693290	Identifier	memoryNeeded		693269	1					
ANR	693291	CFGEntryNode	ENTRY		693269		True				
ANR	693292	CFGExitNode	EXIT		693269		True				
ANR	693293	Symbol	char		693269						
ANR	693294	Symbol	memoryNeeded		693269						
ANR	693295	Symbol	buffer		693269						
ANR	693296	Function	AStyleMainUtf16	3831:27:112293:113453							
ANR	693297	FunctionDef	"AStyleMainUtf16 (const utf16_t * pSourceIn , const utf16_t * pOptions , fpError fpErrorHandler , fpAlloc fpMemoryAlloc)"		693296	0					
ANR	693298	CompoundStatement		3835:0:112675:113453	693296	0					
ANR	693299	IfStatement	if ( fpErrorHandler == nullptr )		693296	0					
ANR	693300	Condition	fpErrorHandler == nullptr	3836:5:112682:112706	693296	0	True				
ANR	693301	EqualityExpression	fpErrorHandler == nullptr		693296	0		==			
ANR	693302	Identifier	fpErrorHandler		693296	0					
ANR	693303	Identifier	nullptr		693296	1					
ANR	693304	ReturnStatement	return nullptr ;	3837:2:112767:112781	693296	1	True				
ANR	693305	Identifier	nullptr		693296	0					
ANR	693306	IfStatement	if ( pSourceIn == nullptr )		693296	1					
ANR	693307	Condition	pSourceIn == nullptr	3839:5:112789:112808	693296	0	True				
ANR	693308	EqualityExpression	pSourceIn == nullptr		693296	0		==			
ANR	693309	Identifier	pSourceIn		693296	0					
ANR	693310	Identifier	nullptr		693296	1					
ANR	693311	CompoundStatement		6:1:136:136	693296	1					
ANR	693312	ExpressionStatement	"fpErrorHandler ( 101 , ""No pointer to source input."" )"	3841:2:112816:112866	693296	0	True				
ANR	693313	CallExpression	"fpErrorHandler ( 101 , ""No pointer to source input."" )"		693296	0					
ANR	693314	Callee	fpErrorHandler		693296	0					
ANR	693315	Identifier	fpErrorHandler		693296	0					
ANR	693316	ArgumentList	101		693296	1					
ANR	693317	Argument	101		693296	0					
ANR	693318	PrimaryExpression	101		693296	0					
ANR	693319	Argument	"""No pointer to source input."""		693296	1					
ANR	693320	PrimaryExpression	"""No pointer to source input."""		693296	0					
ANR	693321	ReturnStatement	return nullptr ;	3842:2:112870:112884	693296	1	True				
ANR	693322	Identifier	nullptr		693296	0					
ANR	693323	IfStatement	if ( pOptions == nullptr )		693296	2					
ANR	693324	Condition	pOptions == nullptr	3844:5:112894:112912	693296	0	True				
ANR	693325	EqualityExpression	pOptions == nullptr		693296	0		==			
ANR	693326	Identifier	pOptions		693296	0					
ANR	693327	Identifier	nullptr		693296	1					
ANR	693328	CompoundStatement		11:1:240:240	693296	1					
ANR	693329	ExpressionStatement	"fpErrorHandler ( 102 , ""No pointer to AStyle options."" )"	3846:2:112920:112972	693296	0	True				
ANR	693330	CallExpression	"fpErrorHandler ( 102 , ""No pointer to AStyle options."" )"		693296	0					
ANR	693331	Callee	fpErrorHandler		693296	0					
ANR	693332	Identifier	fpErrorHandler		693296	0					
ANR	693333	ArgumentList	102		693296	1					
ANR	693334	Argument	102		693296	0					
ANR	693335	PrimaryExpression	102		693296	0					
ANR	693336	Argument	"""No pointer to AStyle options."""		693296	1					
ANR	693337	PrimaryExpression	"""No pointer to AStyle options."""		693296	0					
ANR	693338	ReturnStatement	return nullptr ;	3847:2:112976:112990	693296	1	True				
ANR	693339	Identifier	nullptr		693296	0					
ANR	693340	IfStatement	if ( fpMemoryAlloc == nullptr )		693296	3					
ANR	693341	Condition	fpMemoryAlloc == nullptr	3849:5:113000:113023	693296	0	True				
ANR	693342	EqualityExpression	fpMemoryAlloc == nullptr		693296	0		==			
ANR	693343	Identifier	fpMemoryAlloc		693296	0					
ANR	693344	Identifier	nullptr		693296	1					
ANR	693345	CompoundStatement		16:1:351:351	693296	1					
ANR	693346	ExpressionStatement	"fpErrorHandler ( 103 , ""No pointer to memory allocation function."" )"	3851:2:113031:113095	693296	0	True				
ANR	693347	CallExpression	"fpErrorHandler ( 103 , ""No pointer to memory allocation function."" )"		693296	0					
ANR	693348	Callee	fpErrorHandler		693296	0					
ANR	693349	Identifier	fpErrorHandler		693296	0					
ANR	693350	ArgumentList	103		693296	1					
ANR	693351	Argument	103		693296	0					
ANR	693352	PrimaryExpression	103		693296	0					
ANR	693353	Argument	"""No pointer to memory allocation function."""		693296	1					
ANR	693354	PrimaryExpression	"""No pointer to memory allocation function."""		693296	0					
ANR	693355	ReturnStatement	return nullptr ;	3852:2:113099:113113	693296	1	True				
ANR	693356	Identifier	nullptr		693296	0					
ANR	693357	IdentifierDeclStatement	int sizeCheck = 2 ;	3856:1:113169:113186	693296	4	True				
ANR	693358	IdentifierDecl	sizeCheck = 2		693296	0					
ANR	693359	IdentifierDeclType	int		693296	0					
ANR	693360	Identifier	sizeCheck		693296	1					
ANR	693361	AssignmentExpression	sizeCheck = 2		693296	2		=			
ANR	693362	Identifier	sizeCheck		693296	0					
ANR	693363	PrimaryExpression	2		693296	1					
ANR	693364	IfStatement	if ( sizeof ( utf16_t ) != sizeCheck )		693296	5					
ANR	693365	Condition	sizeof ( utf16_t ) != sizeCheck	3857:5:113193:113220	693296	0	True				
ANR	693366	EqualityExpression	sizeof ( utf16_t ) != sizeCheck		693296	0		!=			
ANR	693367	SizeofExpression	sizeof ( utf16_t )		693296	0					
ANR	693368	Sizeof	sizeof		693296	0					
ANR	693369	SizeofOperand	utf16_t		693296	1					
ANR	693370	Identifier	sizeCheck		693296	1					
ANR	693371	CompoundStatement		24:1:548:548	693296	1					
ANR	693372	ExpressionStatement	"fpErrorHandler ( 104 , ""Unsigned short is not the correct size."" )"	3859:2:113228:113290	693296	0	True				
ANR	693373	CallExpression	"fpErrorHandler ( 104 , ""Unsigned short is not the correct size."" )"		693296	0					
ANR	693374	Callee	fpErrorHandler		693296	0					
ANR	693375	Identifier	fpErrorHandler		693296	0					
ANR	693376	ArgumentList	104		693296	1					
ANR	693377	Argument	104		693296	0					
ANR	693378	PrimaryExpression	104		693296	0					
ANR	693379	Argument	"""Unsigned short is not the correct size."""		693296	1					
ANR	693380	PrimaryExpression	"""Unsigned short is not the correct size."""		693296	0					
ANR	693381	ReturnStatement	return nullptr ;	3860:2:113294:113308	693296	1	True				
ANR	693382	Identifier	nullptr		693296	0					
ANR	693383	IdentifierDeclStatement	ASLibrary library ;	3864:1:113322:113339	693296	6	True				
ANR	693384	IdentifierDecl	library		693296	0					
ANR	693385	IdentifierDeclType	ASLibrary		693296	0					
ANR	693386	Identifier	library		693296	1					
ANR	693387	IdentifierDeclStatement	"utf16_t * utf16Out = library . formatUtf16 ( pSourceIn , pOptions , fpErrorHandler , fpMemoryAlloc ) ;"	3865:1:113342:113433	693296	7	True				
ANR	693388	IdentifierDecl	"* utf16Out = library . formatUtf16 ( pSourceIn , pOptions , fpErrorHandler , fpMemoryAlloc )"		693296	0					
ANR	693389	IdentifierDeclType	utf16_t *		693296	0					
ANR	693390	Identifier	utf16Out		693296	1					
ANR	693391	AssignmentExpression	"* utf16Out = library . formatUtf16 ( pSourceIn , pOptions , fpErrorHandler , fpMemoryAlloc )"		693296	2		=			
ANR	693392	Identifier	utf16Out		693296	0					
ANR	693393	CallExpression	"library . formatUtf16 ( pSourceIn , pOptions , fpErrorHandler , fpMemoryAlloc )"		693296	1					
ANR	693394	Callee	library . formatUtf16		693296	0					
ANR	693395	MemberAccess	library . formatUtf16		693296	0					
ANR	693396	Identifier	library		693296	0					
ANR	693397	Identifier	formatUtf16		693296	1					
ANR	693398	ArgumentList	pSourceIn		693296	1					
ANR	693399	Argument	pSourceIn		693296	0					
ANR	693400	Identifier	pSourceIn		693296	0					
ANR	693401	Argument	pOptions		693296	1					
ANR	693402	Identifier	pOptions		693296	0					
ANR	693403	Argument	fpErrorHandler		693296	2					
ANR	693404	Identifier	fpErrorHandler		693296	0					
ANR	693405	Argument	fpMemoryAlloc		693296	3					
ANR	693406	Identifier	fpMemoryAlloc		693296	0					
ANR	693407	ReturnStatement	return utf16Out ;	3866:1:113436:113451	693296	8	True				
ANR	693408	Identifier	utf16Out		693296	0					
ANR	693409	ReturnType	STDCALL		693296	1					
ANR	693410	Identifier	AStyleMainUtf16		693296	2					
ANR	693411	ParameterList	"const utf16_t * pSourceIn , const utf16_t * pOptions , fpError fpErrorHandler , fpAlloc fpMemoryAlloc"		693296	3					
ANR	693412	Parameter	const utf16_t * pSourceIn	3831:51:112317:112340	693296	0	True				
ANR	693413	ParameterType	const utf16_t *		693296	0					
ANR	693414	Identifier	pSourceIn		693296	1					
ANR	693415	Parameter	const utf16_t * pOptions	3832:51:112424:112446	693296	1	True				
ANR	693416	ParameterType	const utf16_t *		693296	0					
ANR	693417	Identifier	pOptions		693296	1					
ANR	693418	Parameter	fpError fpErrorHandler	3833:51:112519:112540	693296	2	True				
ANR	693419	ParameterType	fpError		693296	0					
ANR	693420	Identifier	fpErrorHandler		693296	1					
ANR	693421	Parameter	fpAlloc fpMemoryAlloc	3834:51:112621:112641	693296	3	True				
ANR	693422	ParameterType	fpAlloc		693296	0					
ANR	693423	Identifier	fpMemoryAlloc		693296	1					
ANR	693424	CFGEntryNode	ENTRY		693296		True				
ANR	693425	CFGExitNode	EXIT		693296		True				
ANR	693426	Symbol	pSourceIn		693296						
ANR	693427	Symbol	library . formatUtf16		693296						
ANR	693428	Symbol	library		693296						
ANR	693429	Symbol	utf16Out		693296						
ANR	693430	Symbol	fpMemoryAlloc		693296						
ANR	693431	Symbol	fpErrorHandler		693296						
ANR	693432	Symbol	pOptions		693296						
ANR	693433	Symbol	sizeCheck		693296						
ANR	693434	Symbol	nullptr		693296						
ANR	693435	Function	AStyleMain	3879:24:113963:116292							
ANR	693436	FunctionDef	"AStyleMain (const char * pSourceIn , const char * pOptions , fpError fpErrorHandler , fpAlloc fpMemoryAlloc)"		693435	0					
ANR	693437	CompoundStatement		3883:0:114311:116292	693435	0					
ANR	693438	IfStatement	if ( fpErrorHandler == nullptr )		693435	0					
ANR	693439	Condition	fpErrorHandler == nullptr	3884:5:114318:114342	693435	0	True				
ANR	693440	EqualityExpression	fpErrorHandler == nullptr		693435	0		==			
ANR	693441	Identifier	fpErrorHandler		693435	0					
ANR	693442	Identifier	nullptr		693435	1					
ANR	693443	ReturnStatement	return nullptr ;	3885:2:114403:114417	693435	1	True				
ANR	693444	Identifier	nullptr		693435	0					
ANR	693445	IfStatement	if ( pSourceIn == nullptr )		693435	1					
ANR	693446	Condition	pSourceIn == nullptr	3887:5:114425:114444	693435	0	True				
ANR	693447	EqualityExpression	pSourceIn == nullptr		693435	0		==			
ANR	693448	Identifier	pSourceIn		693435	0					
ANR	693449	Identifier	nullptr		693435	1					
ANR	693450	CompoundStatement		6:1:136:136	693435	1					
ANR	693451	ExpressionStatement	"fpErrorHandler ( 101 , ""No pointer to source input."" )"	3889:2:114452:114502	693435	0	True				
ANR	693452	CallExpression	"fpErrorHandler ( 101 , ""No pointer to source input."" )"		693435	0					
ANR	693453	Callee	fpErrorHandler		693435	0					
ANR	693454	Identifier	fpErrorHandler		693435	0					
ANR	693455	ArgumentList	101		693435	1					
ANR	693456	Argument	101		693435	0					
ANR	693457	PrimaryExpression	101		693435	0					
ANR	693458	Argument	"""No pointer to source input."""		693435	1					
ANR	693459	PrimaryExpression	"""No pointer to source input."""		693435	0					
ANR	693460	ReturnStatement	return nullptr ;	3890:2:114506:114520	693435	1	True				
ANR	693461	Identifier	nullptr		693435	0					
ANR	693462	IfStatement	if ( pOptions == nullptr )		693435	2					
ANR	693463	Condition	pOptions == nullptr	3892:5:114530:114548	693435	0	True				
ANR	693464	EqualityExpression	pOptions == nullptr		693435	0		==			
ANR	693465	Identifier	pOptions		693435	0					
ANR	693466	Identifier	nullptr		693435	1					
ANR	693467	CompoundStatement		11:1:240:240	693435	1					
ANR	693468	ExpressionStatement	"fpErrorHandler ( 102 , ""No pointer to AStyle options."" )"	3894:2:114556:114608	693435	0	True				
ANR	693469	CallExpression	"fpErrorHandler ( 102 , ""No pointer to AStyle options."" )"		693435	0					
ANR	693470	Callee	fpErrorHandler		693435	0					
ANR	693471	Identifier	fpErrorHandler		693435	0					
ANR	693472	ArgumentList	102		693435	1					
ANR	693473	Argument	102		693435	0					
ANR	693474	PrimaryExpression	102		693435	0					
ANR	693475	Argument	"""No pointer to AStyle options."""		693435	1					
ANR	693476	PrimaryExpression	"""No pointer to AStyle options."""		693435	0					
ANR	693477	ReturnStatement	return nullptr ;	3895:2:114612:114626	693435	1	True				
ANR	693478	Identifier	nullptr		693435	0					
ANR	693479	IfStatement	if ( fpMemoryAlloc == nullptr )		693435	3					
ANR	693480	Condition	fpMemoryAlloc == nullptr	3897:5:114636:114659	693435	0	True				
ANR	693481	EqualityExpression	fpMemoryAlloc == nullptr		693435	0		==			
ANR	693482	Identifier	fpMemoryAlloc		693435	0					
ANR	693483	Identifier	nullptr		693435	1					
ANR	693484	CompoundStatement		16:1:351:351	693435	1					
ANR	693485	ExpressionStatement	"fpErrorHandler ( 103 , ""No pointer to memory allocation function."" )"	3899:2:114667:114731	693435	0	True				
ANR	693486	CallExpression	"fpErrorHandler ( 103 , ""No pointer to memory allocation function."" )"		693435	0					
ANR	693487	Callee	fpErrorHandler		693435	0					
ANR	693488	Identifier	fpErrorHandler		693435	0					
ANR	693489	ArgumentList	103		693435	1					
ANR	693490	Argument	103		693435	0					
ANR	693491	PrimaryExpression	103		693435	0					
ANR	693492	Argument	"""No pointer to memory allocation function."""		693435	1					
ANR	693493	PrimaryExpression	"""No pointer to memory allocation function."""		693435	0					
ANR	693494	ReturnStatement	return nullptr ;	3900:2:114735:114749	693435	1	True				
ANR	693495	Identifier	nullptr		693435	0					
ANR	693496	IdentifierDeclStatement	ASFormatter formatter ;	3903:1:114756:114777	693435	4	True				
ANR	693497	IdentifierDecl	formatter		693435	0					
ANR	693498	IdentifierDeclType	ASFormatter		693435	0					
ANR	693499	Identifier	formatter		693435	1					
ANR	693500	IdentifierDeclStatement	ASOptions options ( formatter ) ;	3904:1:114780:114808	693435	5	True				
ANR	693501	IdentifierDecl	options ( formatter )		693435	0					
ANR	693502	IdentifierDeclType	ASOptions		693435	0					
ANR	693503	Identifier	options		693435	1					
ANR	693504	Identifier	formatter		693435	2					
ANR	693505	IdentifierDeclStatement	vector < string > optionsVector ;	3906:1:114812:114840	693435	6	True				
ANR	693506	IdentifierDecl	optionsVector		693435	0					
ANR	693507	IdentifierDeclType	vector < string >		693435	0					
ANR	693508	Identifier	optionsVector		693435	1					
ANR	693509	IdentifierDeclStatement	istringstream opt ( pOptions ) ;	3907:1:114843:114870	693435	7	True				
ANR	693510	IdentifierDecl	opt ( pOptions )		693435	0					
ANR	693511	IdentifierDeclType	istringstream		693435	0					
ANR	693512	Identifier	opt		693435	1					
ANR	693513	Identifier	pOptions		693435	2					
ANR	693514	ExpressionStatement	"options . importOptions ( opt , optionsVector )"	3909:1:114874:114915	693435	8	True				
ANR	693515	CallExpression	"options . importOptions ( opt , optionsVector )"		693435	0					
ANR	693516	Callee	options . importOptions		693435	0					
ANR	693517	MemberAccess	options . importOptions		693435	0					
ANR	693518	Identifier	options		693435	0					
ANR	693519	Identifier	importOptions		693435	1					
ANR	693520	ArgumentList	opt		693435	1					
ANR	693521	Argument	opt		693435	0					
ANR	693522	Identifier	opt		693435	0					
ANR	693523	Argument	optionsVector		693435	1					
ANR	693524	Identifier	optionsVector		693435	0					
ANR	693525	IdentifierDeclStatement	"bool ok = options . parseOptions ( optionsVector , ""Invalid Artistic Style options:"" ) ;"	3911:1:114919:114999	693435	9	True				
ANR	693526	IdentifierDecl	"ok = options . parseOptions ( optionsVector , ""Invalid Artistic Style options:"" )"		693435	0					
ANR	693527	IdentifierDeclType	bool		693435	0					
ANR	693528	Identifier	ok		693435	1					
ANR	693529	AssignmentExpression	"ok = options . parseOptions ( optionsVector , ""Invalid Artistic Style options:"" )"		693435	2		=			
ANR	693530	Identifier	ok		693435	0					
ANR	693531	CallExpression	"options . parseOptions ( optionsVector , ""Invalid Artistic Style options:"" )"		693435	1					
ANR	693532	Callee	options . parseOptions		693435	0					
ANR	693533	MemberAccess	options . parseOptions		693435	0					
ANR	693534	Identifier	options		693435	0					
ANR	693535	Identifier	parseOptions		693435	1					
ANR	693536	ArgumentList	optionsVector		693435	1					
ANR	693537	Argument	optionsVector		693435	0					
ANR	693538	Identifier	optionsVector		693435	0					
ANR	693539	Argument	"""Invalid Artistic Style options:"""		693435	1					
ANR	693540	PrimaryExpression	"""Invalid Artistic Style options:"""		693435	0					
ANR	693541	IfStatement	if ( ! ok )		693435	10					
ANR	693542	Condition	! ok	3912:5:115006:115008	693435	0	True				
ANR	693543	UnaryOperationExpression	! ok		693435	0					
ANR	693544	UnaryOperator	!		693435	0					
ANR	693545	Identifier	ok		693435	1					
ANR	693546	ExpressionStatement	"fpErrorHandler ( 130 , options . getOptionErrors ( ) . c_str ( ) )"	3913:2:115013:115067	693435	1	True				
ANR	693547	CallExpression	"fpErrorHandler ( 130 , options . getOptionErrors ( ) . c_str ( ) )"		693435	0					
ANR	693548	Callee	fpErrorHandler		693435	0					
ANR	693549	Identifier	fpErrorHandler		693435	0					
ANR	693550	ArgumentList	130		693435	1					
ANR	693551	Argument	130		693435	0					
ANR	693552	PrimaryExpression	130		693435	0					
ANR	693553	Argument	options . getOptionErrors ( ) . c_str ( )		693435	1					
ANR	693554	CallExpression	options . getOptionErrors ( ) . c_str ( )		693435	0					
ANR	693555	Callee	options . getOptionErrors ( ) . c_str		693435	0					
ANR	693556	MemberAccess	options . getOptionErrors ( ) . c_str		693435	0					
ANR	693557	CallExpression	options . getOptionErrors ( )		693435	0					
ANR	693558	Callee	options . getOptionErrors		693435	0					
ANR	693559	MemberAccess	options . getOptionErrors		693435	0					
ANR	693560	Identifier	options		693435	0					
ANR	693561	Identifier	getOptionErrors		693435	1					
ANR	693562	ArgumentList			693435	1					
ANR	693563	Identifier	c_str		693435	1					
ANR	693564	ArgumentList			693435	1					
ANR	693565	IdentifierDeclStatement	istringstream in ( pSourceIn ) ;	3915:1:115071:115098	693435	11	True				
ANR	693566	IdentifierDecl	in ( pSourceIn )		693435	0					
ANR	693567	IdentifierDeclType	istringstream		693435	0					
ANR	693568	Identifier	in		693435	1					
ANR	693569	Identifier	pSourceIn		693435	2					
ANR	693570	IdentifierDeclStatement	ASStreamIterator < istringstream > streamIterator ( & in ) ;	3916:1:115101:115152	693435	12	True				
ANR	693571	IdentifierDecl	streamIterator ( & in )		693435	0					
ANR	693572	IdentifierDeclType	ASStreamIterator < istringstream >		693435	0					
ANR	693573	Identifier	streamIterator		693435	1					
ANR	693574	UnaryOperationExpression	& in		693435	2					
ANR	693575	UnaryOperator	&		693435	0					
ANR	693576	Identifier	in		693435	1					
ANR	693577	IdentifierDeclStatement	ostringstream out ;	3917:1:115155:115172	693435	13	True				
ANR	693578	IdentifierDecl	out		693435	0					
ANR	693579	IdentifierDeclType	ostringstream		693435	0					
ANR	693580	Identifier	out		693435	1					
ANR	693581	ExpressionStatement	formatter . init ( & streamIterator )	3918:1:115175:115206	693435	14	True				
ANR	693582	CallExpression	formatter . init ( & streamIterator )		693435	0					
ANR	693583	Callee	formatter . init		693435	0					
ANR	693584	MemberAccess	formatter . init		693435	0					
ANR	693585	Identifier	formatter		693435	0					
ANR	693586	Identifier	init		693435	1					
ANR	693587	ArgumentList	& streamIterator		693435	1					
ANR	693588	Argument	& streamIterator		693435	0					
ANR	693589	UnaryOperationExpression	& streamIterator		693435	0					
ANR	693590	UnaryOperator	&		693435	0					
ANR	693591	Identifier	streamIterator		693435	1					
ANR	693592	WhileStatement	while ( formatter . hasMoreLines ( ) )		693435	15					
ANR	693593	Condition	formatter . hasMoreLines ( )	3920:8:115217:115240	693435	0	True				
ANR	693594	CallExpression	formatter . hasMoreLines ( )		693435	0					
ANR	693595	Callee	formatter . hasMoreLines		693435	0					
ANR	693596	MemberAccess	formatter . hasMoreLines		693435	0					
ANR	693597	Identifier	formatter		693435	0					
ANR	693598	Identifier	hasMoreLines		693435	1					
ANR	693599	ArgumentList			693435	1					
ANR	693600	CompoundStatement		39:1:932:932	693435	1					
ANR	693601	ExpressionStatement	out << formatter . nextLine ( )	3922:2:115248:115275	693435	0	True				
ANR	693602	ShiftExpression	out << formatter . nextLine ( )		693435	0		<<			
ANR	693603	Identifier	out		693435	0					
ANR	693604	CallExpression	formatter . nextLine ( )		693435	1					
ANR	693605	Callee	formatter . nextLine		693435	0					
ANR	693606	MemberAccess	formatter . nextLine		693435	0					
ANR	693607	Identifier	formatter		693435	0					
ANR	693608	Identifier	nextLine		693435	1					
ANR	693609	ArgumentList			693435	1					
ANR	693610	IfStatement	if ( formatter . hasMoreLines ( ) )		693435	1					
ANR	693611	Condition	formatter . hasMoreLines ( )	3923:6:115283:115306	693435	0	True				
ANR	693612	CallExpression	formatter . hasMoreLines ( )		693435	0					
ANR	693613	Callee	formatter . hasMoreLines		693435	0					
ANR	693614	MemberAccess	formatter . hasMoreLines		693435	0					
ANR	693615	Identifier	formatter		693435	0					
ANR	693616	Identifier	hasMoreLines		693435	1					
ANR	693617	ArgumentList			693435	1					
ANR	693618	ExpressionStatement	out << streamIterator . getOutputEOL ( )	3924:3:115312:115348	693435	1	True				
ANR	693619	ShiftExpression	out << streamIterator . getOutputEOL ( )		693435	0		<<			
ANR	693620	Identifier	out		693435	0					
ANR	693621	CallExpression	streamIterator . getOutputEOL ( )		693435	1					
ANR	693622	Callee	streamIterator . getOutputEOL		693435	0					
ANR	693623	MemberAccess	streamIterator . getOutputEOL		693435	0					
ANR	693624	Identifier	streamIterator		693435	0					
ANR	693625	Identifier	getOutputEOL		693435	1					
ANR	693626	ArgumentList			693435	1					
ANR	693627	ElseStatement	else		693435	0					
ANR	693628	CompoundStatement		44:2:1047:1047	693435	0					
ANR	693629	IfStatement	if ( formatter . getIsLineReady ( ) )		693435	0					
ANR	693630	Condition	formatter . getIsLineReady ( )	3928:7:115459:115484	693435	0	True				
ANR	693631	CallExpression	formatter . getIsLineReady ( )		693435	0					
ANR	693632	Callee	formatter . getIsLineReady		693435	0					
ANR	693633	MemberAccess	formatter . getIsLineReady		693435	0					
ANR	693634	Identifier	formatter		693435	0					
ANR	693635	Identifier	getIsLineReady		693435	1					
ANR	693636	ArgumentList			693435	1					
ANR	693637	CompoundStatement		47:3:1178:1178	693435	1					
ANR	693638	ExpressionStatement	out << streamIterator . getOutputEOL ( )	3930:4:115496:115532	693435	0	True				
ANR	693639	ShiftExpression	out << streamIterator . getOutputEOL ( )		693435	0		<<			
ANR	693640	Identifier	out		693435	0					
ANR	693641	CallExpression	streamIterator . getOutputEOL ( )		693435	1					
ANR	693642	Callee	streamIterator . getOutputEOL		693435	0					
ANR	693643	MemberAccess	streamIterator . getOutputEOL		693435	0					
ANR	693644	Identifier	streamIterator		693435	0					
ANR	693645	Identifier	getOutputEOL		693435	1					
ANR	693646	ArgumentList			693435	1					
ANR	693647	ExpressionStatement	out << formatter . nextLine ( )	3931:4:115538:115565	693435	1	True				
ANR	693648	ShiftExpression	out << formatter . nextLine ( )		693435	0		<<			
ANR	693649	Identifier	out		693435	0					
ANR	693650	CallExpression	formatter . nextLine ( )		693435	1					
ANR	693651	Callee	formatter . nextLine		693435	0					
ANR	693652	MemberAccess	formatter . nextLine		693435	0					
ANR	693653	Identifier	formatter		693435	0					
ANR	693654	Identifier	nextLine		693435	1					
ANR	693655	ArgumentList			693435	1					
ANR	693656	IdentifierDeclStatement	size_t textSizeOut = out . str ( ) . length ( ) ;	3936:1:115581:115620	693435	16	True				
ANR	693657	IdentifierDecl	textSizeOut = out . str ( ) . length ( )		693435	0					
ANR	693658	IdentifierDeclType	size_t		693435	0					
ANR	693659	Identifier	textSizeOut		693435	1					
ANR	693660	AssignmentExpression	textSizeOut = out . str ( ) . length ( )		693435	2		=			
ANR	693661	Identifier	textSizeOut		693435	0					
ANR	693662	CallExpression	out . str ( ) . length ( )		693435	1					
ANR	693663	Callee	out . str ( ) . length		693435	0					
ANR	693664	MemberAccess	out . str ( ) . length		693435	0					
ANR	693665	CallExpression	out . str ( )		693435	0					
ANR	693666	Callee	out . str		693435	0					
ANR	693667	MemberAccess	out . str		693435	0					
ANR	693668	Identifier	out		693435	0					
ANR	693669	Identifier	str		693435	1					
ANR	693670	ArgumentList			693435	1					
ANR	693671	Identifier	length		693435	1					
ANR	693672	ArgumentList			693435	1					
ANR	693673	IdentifierDeclStatement	char * pTextOut = fpMemoryAlloc ( ( long ) textSizeOut + 1 ) ;	3937:1:115623:115676	693435	17	True				
ANR	693674	IdentifierDecl	* pTextOut = fpMemoryAlloc ( ( long ) textSizeOut + 1 )		693435	0					
ANR	693675	IdentifierDeclType	char *		693435	0					
ANR	693676	Identifier	pTextOut		693435	1					
ANR	693677	AssignmentExpression	* pTextOut = fpMemoryAlloc ( ( long ) textSizeOut + 1 )		693435	2		=			
ANR	693678	Identifier	pTextOut		693435	0					
ANR	693679	CallExpression	fpMemoryAlloc ( ( long ) textSizeOut + 1 )		693435	1					
ANR	693680	Callee	fpMemoryAlloc		693435	0					
ANR	693681	Identifier	fpMemoryAlloc		693435	0					
ANR	693682	ArgumentList	( long ) textSizeOut + 1		693435	1					
ANR	693683	Argument	( long ) textSizeOut + 1		693435	0					
ANR	693684	AdditiveExpression	( long ) textSizeOut + 1		693435	0		+			
ANR	693685	CastExpression	( long ) textSizeOut		693435	0					
ANR	693686	CastTarget	long		693435	0					
ANR	693687	Identifier	textSizeOut		693435	1					
ANR	693688	PrimaryExpression	1		693435	1					
ANR	693689	IfStatement	if ( pTextOut == nullptr )		693435	18					
ANR	693690	Condition	pTextOut == nullptr	3938:5:115722:115740	693435	0	True				
ANR	693691	EqualityExpression	pTextOut == nullptr		693435	0		==			
ANR	693692	Identifier	pTextOut		693435	0					
ANR	693693	Identifier	nullptr		693435	1					
ANR	693694	CompoundStatement		57:1:1432:1432	693435	1					
ANR	693695	ExpressionStatement	"fpErrorHandler ( 120 , ""Allocation failure on output."" )"	3940:2:115748:115800	693435	0	True				
ANR	693696	CallExpression	"fpErrorHandler ( 120 , ""Allocation failure on output."" )"		693435	0					
ANR	693697	Callee	fpErrorHandler		693435	0					
ANR	693698	Identifier	fpErrorHandler		693435	0					
ANR	693699	ArgumentList	120		693435	1					
ANR	693700	Argument	120		693435	0					
ANR	693701	PrimaryExpression	120		693435	0					
ANR	693702	Argument	"""Allocation failure on output."""		693435	1					
ANR	693703	PrimaryExpression	"""Allocation failure on output."""		693435	0					
ANR	693704	ReturnStatement	return nullptr ;	3941:2:115804:115818	693435	1	True				
ANR	693705	Identifier	nullptr		693435	0					
ANR	693706	ExpressionStatement	"strcpy ( pTextOut , out . str ( ) . c_str ( ) )"	3944:1:115825:115860	693435	19	True				
ANR	693707	CallExpression	"strcpy ( pTextOut , out . str ( ) . c_str ( ) )"		693435	0					
ANR	693708	Callee	strcpy		693435	0					
ANR	693709	Identifier	strcpy		693435	0					
ANR	693710	ArgumentList	pTextOut		693435	1					
ANR	693711	Argument	pTextOut		693435	0					
ANR	693712	Identifier	pTextOut		693435	0					
ANR	693713	Argument	out . str ( ) . c_str ( )		693435	1					
ANR	693714	CallExpression	out . str ( ) . c_str ( )		693435	0					
ANR	693715	Callee	out . str ( ) . c_str		693435	0					
ANR	693716	MemberAccess	out . str ( ) . c_str		693435	0					
ANR	693717	CallExpression	out . str ( )		693435	0					
ANR	693718	Callee	out . str		693435	0					
ANR	693719	MemberAccess	out . str		693435	0					
ANR	693720	Identifier	out		693435	0					
ANR	693721	Identifier	str		693435	1					
ANR	693722	ArgumentList			693435	1					
ANR	693723	Identifier	c_str		693435	1					
ANR	693724	ArgumentList			693435	1					
ANR	693725	IfStatement	if ( formatter . getChecksumDiff ( ) != 0 )		693435	20					
ANR	693726	Condition	formatter . getChecksumDiff ( ) != 0	3949:5:116090:116121	693435	0	True				
ANR	693727	EqualityExpression	formatter . getChecksumDiff ( ) != 0		693435	0		!=			
ANR	693728	CallExpression	formatter . getChecksumDiff ( )		693435	0					
ANR	693729	Callee	formatter . getChecksumDiff		693435	0					
ANR	693730	MemberAccess	formatter . getChecksumDiff		693435	0					
ANR	693731	Identifier	formatter		693435	0					
ANR	693732	Identifier	getChecksumDiff		693435	1					
ANR	693733	ArgumentList			693435	1					
ANR	693734	PrimaryExpression	0		693435	1					
ANR	693735	Statement	fpErrorHandler	3950:2:116126:116139	693435	1	True				
ANR	693736	Statement	(	3950:16:116140:116140	693435	21	True				
ANR	693737	Statement	220	3950:17:116141:116143	693435	22	True				
ANR	693738	Statement	","	3950:20:116144:116144	693435	23	True				
ANR	693739	Statement	"""Checksum error.\\n"""	3951:17:116163:116181	693435	24	True				
ANR	693740	Statement	"""The incorrectly formatted file will be returned for debugging."""	3952:17:116200:116263	693435	25	True				
ANR	693741	Statement	)	3952:81:116264:116264	693435	26	True				
ANR	693742	ExpressionStatement		3952:82:116265:116265	693435	27	True				
ANR	693743	ReturnStatement	return pTextOut ;	3954:1:116275:116290	693435	28	True				
ANR	693744	Identifier	pTextOut		693435	0					
ANR	693745	ReturnType	STDCALL		693435	1					
ANR	693746	Identifier	AStyleMain		693435	2					
ANR	693747	ParameterList	"const char * pSourceIn , const char * pOptions , fpError fpErrorHandler , fpAlloc fpMemoryAlloc"		693435	3					
ANR	693748	Parameter	const char * pSourceIn	3879:43:113982:114002	693435	0	True				
ANR	693749	ParameterType	const char *		693435	0					
ANR	693750	Identifier	pSourceIn		693435	1					
ANR	693751	Parameter	const char * pOptions	3880:43:114079:114098	693435	1	True				
ANR	693752	ParameterType	const char *		693435	0					
ANR	693753	Identifier	pOptions		693435	1					
ANR	693754	Parameter	fpError fpErrorHandler	3881:43:114163:114184	693435	2	True				
ANR	693755	ParameterType	fpError		693435	0					
ANR	693756	Identifier	fpErrorHandler		693435	1					
ANR	693757	Parameter	fpAlloc fpMemoryAlloc	3882:43:114257:114277	693435	3	True				
ANR	693758	ParameterType	fpAlloc		693435	0					
ANR	693759	Identifier	fpMemoryAlloc		693435	1					
ANR	693760	CFGEntryNode	ENTRY		693435		True				
ANR	693761	CFGExitNode	EXIT		693435		True				
ANR	693762	Symbol	options . getOptionErrors		693435						
ANR	693763	Symbol	pOptions		693435						
ANR	693764	Symbol	out		693435						
ANR	693765	Symbol	textSizeOut		693435						
ANR	693766	Symbol	pSourceIn		693435						
ANR	693767	Symbol	fpErrorHandler		693435						
ANR	693768	Symbol	options		693435						
ANR	693769	Symbol	ok		693435						
ANR	693770	Symbol	optionsVector		693435						
ANR	693771	Symbol	formatter . hasMoreLines		693435						
ANR	693772	Symbol	in		693435						
ANR	693773	Symbol	pTextOut		693435						
ANR	693774	Symbol	formatter . getIsLineReady		693435						
ANR	693775	Symbol	streamIterator		693435						
ANR	693776	Symbol	options . parseOptions		693435						
ANR	693777	Symbol	options . getOptionErrors ( ) . c_str		693435						
ANR	693778	Symbol	formatter		693435						
ANR	693779	Symbol	& streamIterator		693435						
ANR	693780	Symbol	out . str		693435						
ANR	693781	Symbol	opt		693435						
ANR	693782	Symbol	fpMemoryAlloc		693435						
ANR	693783	Symbol	formatter . getChecksumDiff		693435						
ANR	693784	Symbol	out . str ( ) . c_str		693435						
ANR	693785	Symbol	nullptr		693435						
ANR	693786	Symbol	out . str ( ) . length		693435						
ANR	693787	Function	AStyleGetVersion	3957:30:116325:116377							
ANR	693788	FunctionDef	AStyleGetVersion ()		693787	0					
ANR	693789	CompoundStatement		3958:0:116356:116377	693787	0					
ANR	693790	ReturnStatement	return g_version ;	3959:1:116359:116375	693787	0	True				
ANR	693791	Identifier	g_version		693787	0					
ANR	693792	ReturnType	STDCALL		693787	1					
ANR	693793	Identifier	AStyleGetVersion		693787	2					
ANR	693794	ParameterList			693787	3					
ANR	693795	CFGEntryNode	ENTRY		693787		True				
ANR	693796	CFGExitNode	EXIT		693787		True				
ANR	693797	Symbol	g_version		693787						
ANR	693798	Function	main	3969:0:116676:117240							
ANR	693799	FunctionDef	"main (int argc , char * * argv)"		693798	0					
ANR	693800	CompoundStatement		3970:0:116708:117240	693798	0					
ANR	693801	IdentifierDeclStatement	ASFormatter formatter ;	3972:1:116730:116751	693798	0	True				
ANR	693802	IdentifierDecl	formatter		693798	0					
ANR	693803	IdentifierDeclType	ASFormatter		693798	0					
ANR	693804	Identifier	formatter		693798	1					
ANR	693805	Statement	auto	3973:1:116754:116757	693798	1	True				
ANR	693806	ExpressionStatement	console = make_shared < ASConsole > ( formatter )	3973:6:116759:116802	693798	2	True				
ANR	693807	AssignmentExpression	console = make_shared < ASConsole > ( formatter )		693798	0		=			
ANR	693808	Identifier	console		693798	0					
ANR	693809	RelationalExpression	make_shared < ASConsole > ( formatter )		693798	1		<			
ANR	693810	Identifier	make_shared		693798	0					
ANR	693811	RelationalExpression	ASConsole > ( formatter )		693798	1		>			
ANR	693812	Identifier	ASConsole		693798	0					
ANR	693813	Identifier	formatter		693798	1					
ANR	693814	IdentifierDeclStatement	vector < string > argvOptions ;	3977:1:116923:116949	693798	3	True				
ANR	693815	IdentifierDecl	argvOptions		693798	0					
ANR	693816	IdentifierDeclType	vector < string >		693798	0					
ANR	693817	Identifier	argvOptions		693798	1					
ANR	693818	ExpressionStatement	"argvOptions = console -> getArgvOptions ( argc , argv )"	3978:1:116952:117001	693798	4	True				
ANR	693819	AssignmentExpression	"argvOptions = console -> getArgvOptions ( argc , argv )"		693798	0		=			
ANR	693820	Identifier	argvOptions		693798	0					
ANR	693821	CallExpression	"console -> getArgvOptions ( argc , argv )"		693798	1					
ANR	693822	Callee	console -> getArgvOptions		693798	0					
ANR	693823	PtrMemberAccess	console -> getArgvOptions		693798	0					
ANR	693824	Identifier	console		693798	0					
ANR	693825	Identifier	getArgvOptions		693798	1					
ANR	693826	ArgumentList	argc		693798	1					
ANR	693827	Argument	argc		693798	0					
ANR	693828	Identifier	argc		693798	0					
ANR	693829	Argument	argv		693798	1					
ANR	693830	Identifier	argv		693798	0					
ANR	693831	ExpressionStatement	console -> processOptions ( argvOptions )	3979:1:117004:117040	693798	5	True				
ANR	693832	CallExpression	console -> processOptions ( argvOptions )		693798	0					
ANR	693833	Callee	console -> processOptions		693798	0					
ANR	693834	PtrMemberAccess	console -> processOptions		693798	0					
ANR	693835	Identifier	console		693798	0					
ANR	693836	Identifier	processOptions		693798	1					
ANR	693837	ArgumentList	argvOptions		693798	1					
ANR	693838	Argument	argvOptions		693798	0					
ANR	693839	Identifier	argvOptions		693798	0					
ANR	693840	IfStatement	if ( ! console -> fileNameVectorIsEmpty ( ) )		693798	6					
ANR	693841	Condition	! console -> fileNameVectorIsEmpty ( )	3982:5:117119:117151	693798	0	True				
ANR	693842	UnaryOperationExpression	! console -> fileNameVectorIsEmpty ( )		693798	0					
ANR	693843	UnaryOperator	!		693798	0					
ANR	693844	CallExpression	console -> fileNameVectorIsEmpty ( )		693798	1					
ANR	693845	Callee	console -> fileNameVectorIsEmpty		693798	0					
ANR	693846	PtrMemberAccess	console -> fileNameVectorIsEmpty		693798	0					
ANR	693847	Identifier	console		693798	0					
ANR	693848	Identifier	fileNameVectorIsEmpty		693798	1					
ANR	693849	ArgumentList			693798	1					
ANR	693850	ExpressionStatement	console -> processFiles ( )	3983:2:117156:117179	693798	1	True				
ANR	693851	CallExpression	console -> processFiles ( )		693798	0					
ANR	693852	Callee	console -> processFiles		693798	0					
ANR	693853	PtrMemberAccess	console -> processFiles		693798	0					
ANR	693854	Identifier	console		693798	0					
ANR	693855	Identifier	processFiles		693798	1					
ANR	693856	ArgumentList			693798	1					
ANR	693857	ElseStatement	else		693798	0					
ANR	693858	ExpressionStatement	console -> formatCinToCout ( )	3985:2:117189:117215	693798	0	True				
ANR	693859	CallExpression	console -> formatCinToCout ( )		693798	0					
ANR	693860	Callee	console -> formatCinToCout		693798	0					
ANR	693861	PtrMemberAccess	console -> formatCinToCout		693798	0					
ANR	693862	Identifier	console		693798	0					
ANR	693863	Identifier	formatCinToCout		693798	1					
ANR	693864	ArgumentList			693798	1					
ANR	693865	ReturnStatement	return EXIT_SUCCESS ;	3987:1:117219:117238	693798	7	True				
ANR	693866	Identifier	EXIT_SUCCESS		693798	0					
ANR	693867	ReturnType	int		693798	1					
ANR	693868	Identifier	main		693798	2					
ANR	693869	ParameterList	"int argc , char * * argv"		693798	3					
ANR	693870	Parameter	int argc	3969:9:116685:116692	693798	0	True				
ANR	693871	ParameterType	int		693798	0					
ANR	693872	Identifier	argc		693798	1					
ANR	693873	Parameter	char * * argv	3969:19:116695:116705	693798	1	True				
ANR	693874	ParameterType	char * *		693798	0					
ANR	693875	Identifier	argv		693798	1					
ANR	693876	CFGEntryNode	ENTRY		693798		True				
ANR	693877	CFGExitNode	EXIT		693798		True				
ANR	693878	Symbol	argc		693798						
ANR	693879	Symbol	formatter		693798						
ANR	693880	Symbol	argvOptions		693798						
ANR	693881	Symbol	console		693798						
ANR	693882	Symbol	console -> getArgvOptions		693798						
ANR	693883	Symbol	ASConsole		693798						
ANR	693884	Symbol	* console		693798						
ANR	693885	Symbol	EXIT_SUCCESS		693798						
ANR	693886	Symbol	console -> fileNameVectorIsEmpty		693798						
ANR	693887	Symbol	argv		693798						
ANR	693888	Symbol	make_shared		693798						
