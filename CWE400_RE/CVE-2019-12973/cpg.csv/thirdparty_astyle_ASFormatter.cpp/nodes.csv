command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	630203	File	data/converged/CVE-2019-12973_openjpeg/thirdparty_astyle_ASFormatter.cpp								
ANR	630204	Function	ASFormatter :: ASFormatter	28:0:866:3061							
ANR	630205	FunctionDef	ASFormatter :: ASFormatter ()		630204	0					
ANR	630206	CompoundStatement		29:0:893:3061	630204	0					
ANR	630207	ExpressionStatement	sourceIterator = nullptr	30:1:896:920	630204	0	True				
ANR	630208	AssignmentExpression	sourceIterator = nullptr		630204	0		=			
ANR	630209	Identifier	sourceIterator		630204	0					
ANR	630210	Identifier	nullptr		630204	1					
ANR	630211	Statement	enhancer	31:1:923:930	630204	1	True				
ANR	630212	Statement	=	31:10:932:932	630204	2	True				
ANR	630213	Statement	new	31:12:934:936	630204	3	True				
ANR	630214	ExpressionStatement	ASEnhancer	31:16:938:948	630204	4	True				
ANR	630215	Identifier	ASEnhancer		630204	0					
ANR	630216	ExpressionStatement	preBraceHeaderStack = nullptr	32:1:951:980	630204	5	True				
ANR	630217	AssignmentExpression	preBraceHeaderStack = nullptr		630204	0		=			
ANR	630218	Identifier	preBraceHeaderStack		630204	0					
ANR	630219	Identifier	nullptr		630204	1					
ANR	630220	ExpressionStatement	braceTypeStack = nullptr	33:1:983:1007	630204	6	True				
ANR	630221	AssignmentExpression	braceTypeStack = nullptr		630204	0		=			
ANR	630222	Identifier	braceTypeStack		630204	0					
ANR	630223	Identifier	nullptr		630204	1					
ANR	630224	ExpressionStatement	parenStack = nullptr	34:1:1010:1030	630204	7	True				
ANR	630225	AssignmentExpression	parenStack = nullptr		630204	0		=			
ANR	630226	Identifier	parenStack		630204	0					
ANR	630227	Identifier	nullptr		630204	1					
ANR	630228	ExpressionStatement	structStack = nullptr	35:1:1033:1054	630204	8	True				
ANR	630229	AssignmentExpression	structStack = nullptr		630204	0		=			
ANR	630230	Identifier	structStack		630204	0					
ANR	630231	Identifier	nullptr		630204	1					
ANR	630232	ExpressionStatement	questionMarkStack = nullptr	36:1:1057:1084	630204	9	True				
ANR	630233	AssignmentExpression	questionMarkStack = nullptr		630204	0		=			
ANR	630234	Identifier	questionMarkStack		630204	0					
ANR	630235	Identifier	nullptr		630204	1					
ANR	630236	ExpressionStatement	lineCommentNoIndent = false	37:1:1087:1114	630204	10	True				
ANR	630237	AssignmentExpression	lineCommentNoIndent = false		630204	0		=			
ANR	630238	Identifier	lineCommentNoIndent		630204	0					
ANR	630239	Identifier	false		630204	1					
ANR	630240	ExpressionStatement	formattingStyle = STYLE_NONE	38:1:1117:1145	630204	11	True				
ANR	630241	AssignmentExpression	formattingStyle = STYLE_NONE		630204	0		=			
ANR	630242	Identifier	formattingStyle		630204	0					
ANR	630243	Identifier	STYLE_NONE		630204	1					
ANR	630244	ExpressionStatement	braceFormatMode = NONE_MODE	39:1:1148:1175	630204	12	True				
ANR	630245	AssignmentExpression	braceFormatMode = NONE_MODE		630204	0		=			
ANR	630246	Identifier	braceFormatMode		630204	0					
ANR	630247	Identifier	NONE_MODE		630204	1					
ANR	630248	ExpressionStatement	pointerAlignment = PTR_ALIGN_NONE	40:1:1178:1211	630204	13	True				
ANR	630249	AssignmentExpression	pointerAlignment = PTR_ALIGN_NONE		630204	0		=			
ANR	630250	Identifier	pointerAlignment		630204	0					
ANR	630251	Identifier	PTR_ALIGN_NONE		630204	1					
ANR	630252	ExpressionStatement	referenceAlignment = REF_SAME_AS_PTR	41:1:1214:1250	630204	14	True				
ANR	630253	AssignmentExpression	referenceAlignment = REF_SAME_AS_PTR		630204	0		=			
ANR	630254	Identifier	referenceAlignment		630204	0					
ANR	630255	Identifier	REF_SAME_AS_PTR		630204	1					
ANR	630256	ExpressionStatement	objCColonPadMode = COLON_PAD_NO_CHANGE	42:1:1253:1291	630204	15	True				
ANR	630257	AssignmentExpression	objCColonPadMode = COLON_PAD_NO_CHANGE		630204	0		=			
ANR	630258	Identifier	objCColonPadMode		630204	0					
ANR	630259	Identifier	COLON_PAD_NO_CHANGE		630204	1					
ANR	630260	ExpressionStatement	lineEnd = LINEEND_DEFAULT	43:1:1294:1319	630204	16	True				
ANR	630261	AssignmentExpression	lineEnd = LINEEND_DEFAULT		630204	0		=			
ANR	630262	Identifier	lineEnd		630204	0					
ANR	630263	Identifier	LINEEND_DEFAULT		630204	1					
ANR	630264	ExpressionStatement	maxCodeLength = string :: npos	44:1:1322:1350	630204	17	True				
ANR	630265	AssignmentExpression	maxCodeLength = string :: npos		630204	0		=			
ANR	630266	Identifier	maxCodeLength		630204	0					
ANR	630267	Identifier	string :: npos		630204	1					
ANR	630268	ExpressionStatement	shouldPadCommas = false	45:1:1353:1376	630204	18	True				
ANR	630269	AssignmentExpression	shouldPadCommas = false		630204	0		=			
ANR	630270	Identifier	shouldPadCommas		630204	0					
ANR	630271	Identifier	false		630204	1					
ANR	630272	ExpressionStatement	shouldPadOperators = false	46:1:1379:1405	630204	19	True				
ANR	630273	AssignmentExpression	shouldPadOperators = false		630204	0		=			
ANR	630274	Identifier	shouldPadOperators		630204	0					
ANR	630275	Identifier	false		630204	1					
ANR	630276	ExpressionStatement	shouldPadParensOutside = false	47:1:1408:1438	630204	20	True				
ANR	630277	AssignmentExpression	shouldPadParensOutside = false		630204	0		=			
ANR	630278	Identifier	shouldPadParensOutside		630204	0					
ANR	630279	Identifier	false		630204	1					
ANR	630280	ExpressionStatement	shouldPadFirstParen = false	48:1:1441:1468	630204	21	True				
ANR	630281	AssignmentExpression	shouldPadFirstParen = false		630204	0		=			
ANR	630282	Identifier	shouldPadFirstParen		630204	0					
ANR	630283	Identifier	false		630204	1					
ANR	630284	ExpressionStatement	shouldPadParensInside = false	49:1:1471:1500	630204	22	True				
ANR	630285	AssignmentExpression	shouldPadParensInside = false		630204	0		=			
ANR	630286	Identifier	shouldPadParensInside		630204	0					
ANR	630287	Identifier	false		630204	1					
ANR	630288	ExpressionStatement	shouldPadHeader = false	50:1:1503:1526	630204	23	True				
ANR	630289	AssignmentExpression	shouldPadHeader = false		630204	0		=			
ANR	630290	Identifier	shouldPadHeader		630204	0					
ANR	630291	Identifier	false		630204	1					
ANR	630292	ExpressionStatement	shouldStripCommentPrefix = false	51:1:1529:1561	630204	24	True				
ANR	630293	AssignmentExpression	shouldStripCommentPrefix = false		630204	0		=			
ANR	630294	Identifier	shouldStripCommentPrefix		630204	0					
ANR	630295	Identifier	false		630204	1					
ANR	630296	ExpressionStatement	shouldUnPadParens = false	52:1:1564:1589	630204	25	True				
ANR	630297	AssignmentExpression	shouldUnPadParens = false		630204	0		=			
ANR	630298	Identifier	shouldUnPadParens		630204	0					
ANR	630299	Identifier	false		630204	1					
ANR	630300	ExpressionStatement	attachClosingBraceMode = false	53:1:1592:1622	630204	26	True				
ANR	630301	AssignmentExpression	attachClosingBraceMode = false		630204	0		=			
ANR	630302	Identifier	attachClosingBraceMode		630204	0					
ANR	630303	Identifier	false		630204	1					
ANR	630304	ExpressionStatement	shouldBreakOneLineBlocks = true	54:1:1625:1656	630204	27	True				
ANR	630305	AssignmentExpression	shouldBreakOneLineBlocks = true		630204	0		=			
ANR	630306	Identifier	shouldBreakOneLineBlocks		630204	0					
ANR	630307	Identifier	true		630204	1					
ANR	630308	ExpressionStatement	shouldBreakOneLineHeaders = false	55:1:1659:1692	630204	28	True				
ANR	630309	AssignmentExpression	shouldBreakOneLineHeaders = false		630204	0		=			
ANR	630310	Identifier	shouldBreakOneLineHeaders		630204	0					
ANR	630311	Identifier	false		630204	1					
ANR	630312	ExpressionStatement	shouldBreakOneLineStatements = true	56:1:1695:1730	630204	29	True				
ANR	630313	AssignmentExpression	shouldBreakOneLineStatements = true		630204	0		=			
ANR	630314	Identifier	shouldBreakOneLineStatements		630204	0					
ANR	630315	Identifier	true		630204	1					
ANR	630316	ExpressionStatement	shouldConvertTabs = false	57:1:1733:1758	630204	30	True				
ANR	630317	AssignmentExpression	shouldConvertTabs = false		630204	0		=			
ANR	630318	Identifier	shouldConvertTabs		630204	0					
ANR	630319	Identifier	false		630204	1					
ANR	630320	ExpressionStatement	shouldIndentCol1Comments = false	58:1:1761:1793	630204	31	True				
ANR	630321	AssignmentExpression	shouldIndentCol1Comments = false		630204	0		=			
ANR	630322	Identifier	shouldIndentCol1Comments		630204	0					
ANR	630323	Identifier	false		630204	1					
ANR	630324	ExpressionStatement	shouldIndentPreprocBlock = false	59:1:1796:1828	630204	32	True				
ANR	630325	AssignmentExpression	shouldIndentPreprocBlock = false		630204	0		=			
ANR	630326	Identifier	shouldIndentPreprocBlock		630204	0					
ANR	630327	Identifier	false		630204	1					
ANR	630328	ExpressionStatement	shouldCloseTemplates = false	60:1:1831:1859	630204	33	True				
ANR	630329	AssignmentExpression	shouldCloseTemplates = false		630204	0		=			
ANR	630330	Identifier	shouldCloseTemplates		630204	0					
ANR	630331	Identifier	false		630204	1					
ANR	630332	ExpressionStatement	shouldAttachExternC = false	61:1:1862:1889	630204	34	True				
ANR	630333	AssignmentExpression	shouldAttachExternC = false		630204	0		=			
ANR	630334	Identifier	shouldAttachExternC		630204	0					
ANR	630335	Identifier	false		630204	1					
ANR	630336	ExpressionStatement	shouldAttachNamespace = false	62:1:1892:1921	630204	35	True				
ANR	630337	AssignmentExpression	shouldAttachNamespace = false		630204	0		=			
ANR	630338	Identifier	shouldAttachNamespace		630204	0					
ANR	630339	Identifier	false		630204	1					
ANR	630340	ExpressionStatement	shouldAttachClass = false	63:1:1924:1949	630204	36	True				
ANR	630341	AssignmentExpression	shouldAttachClass = false		630204	0		=			
ANR	630342	Identifier	shouldAttachClass		630204	0					
ANR	630343	Identifier	false		630204	1					
ANR	630344	ExpressionStatement	shouldAttachClosingWhile = false	64:1:1952:1984	630204	37	True				
ANR	630345	AssignmentExpression	shouldAttachClosingWhile = false		630204	0		=			
ANR	630346	Identifier	shouldAttachClosingWhile		630204	0					
ANR	630347	Identifier	false		630204	1					
ANR	630348	ExpressionStatement	shouldAttachInline = false	65:1:1987:2013	630204	38	True				
ANR	630349	AssignmentExpression	shouldAttachInline = false		630204	0		=			
ANR	630350	Identifier	shouldAttachInline		630204	0					
ANR	630351	Identifier	false		630204	1					
ANR	630352	ExpressionStatement	shouldBreakBlocks = false	66:1:2016:2041	630204	39	True				
ANR	630353	AssignmentExpression	shouldBreakBlocks = false		630204	0		=			
ANR	630354	Identifier	shouldBreakBlocks		630204	0					
ANR	630355	Identifier	false		630204	1					
ANR	630356	ExpressionStatement	shouldBreakClosingHeaderBlocks = false	67:1:2044:2082	630204	40	True				
ANR	630357	AssignmentExpression	shouldBreakClosingHeaderBlocks = false		630204	0		=			
ANR	630358	Identifier	shouldBreakClosingHeaderBlocks		630204	0					
ANR	630359	Identifier	false		630204	1					
ANR	630360	ExpressionStatement	shouldBreakClosingHeaderBraces = false	68:1:2085:2123	630204	41	True				
ANR	630361	AssignmentExpression	shouldBreakClosingHeaderBraces = false		630204	0		=			
ANR	630362	Identifier	shouldBreakClosingHeaderBraces		630204	0					
ANR	630363	Identifier	false		630204	1					
ANR	630364	ExpressionStatement	shouldDeleteEmptyLines = false	69:1:2126:2156	630204	42	True				
ANR	630365	AssignmentExpression	shouldDeleteEmptyLines = false		630204	0		=			
ANR	630366	Identifier	shouldDeleteEmptyLines		630204	0					
ANR	630367	Identifier	false		630204	1					
ANR	630368	ExpressionStatement	shouldBreakElseIfs = false	70:1:2159:2185	630204	43	True				
ANR	630369	AssignmentExpression	shouldBreakElseIfs = false		630204	0		=			
ANR	630370	Identifier	shouldBreakElseIfs		630204	0					
ANR	630371	Identifier	false		630204	1					
ANR	630372	ExpressionStatement	shouldBreakLineAfterLogical = false	71:1:2188:2223	630204	44	True				
ANR	630373	AssignmentExpression	shouldBreakLineAfterLogical = false		630204	0		=			
ANR	630374	Identifier	shouldBreakLineAfterLogical		630204	0					
ANR	630375	Identifier	false		630204	1					
ANR	630376	ExpressionStatement	shouldAddBraces = false	72:1:2226:2249	630204	45	True				
ANR	630377	AssignmentExpression	shouldAddBraces = false		630204	0		=			
ANR	630378	Identifier	shouldAddBraces		630204	0					
ANR	630379	Identifier	false		630204	1					
ANR	630380	ExpressionStatement	shouldAddOneLineBraces = false	73:1:2252:2282	630204	46	True				
ANR	630381	AssignmentExpression	shouldAddOneLineBraces = false		630204	0		=			
ANR	630382	Identifier	shouldAddOneLineBraces		630204	0					
ANR	630383	Identifier	false		630204	1					
ANR	630384	ExpressionStatement	shouldRemoveBraces = false	74:1:2285:2311	630204	47	True				
ANR	630385	AssignmentExpression	shouldRemoveBraces = false		630204	0		=			
ANR	630386	Identifier	shouldRemoveBraces		630204	0					
ANR	630387	Identifier	false		630204	1					
ANR	630388	ExpressionStatement	shouldPadMethodColon = false	75:1:2314:2342	630204	48	True				
ANR	630389	AssignmentExpression	shouldPadMethodColon = false		630204	0		=			
ANR	630390	Identifier	shouldPadMethodColon		630204	0					
ANR	630391	Identifier	false		630204	1					
ANR	630392	ExpressionStatement	shouldPadMethodPrefix = false	76:1:2345:2374	630204	49	True				
ANR	630393	AssignmentExpression	shouldPadMethodPrefix = false		630204	0		=			
ANR	630394	Identifier	shouldPadMethodPrefix		630204	0					
ANR	630395	Identifier	false		630204	1					
ANR	630396	ExpressionStatement	shouldUnPadMethodPrefix = false	77:1:2377:2408	630204	50	True				
ANR	630397	AssignmentExpression	shouldUnPadMethodPrefix = false		630204	0		=			
ANR	630398	Identifier	shouldUnPadMethodPrefix		630204	0					
ANR	630399	Identifier	false		630204	1					
ANR	630400	ExpressionStatement	shouldPadReturnType = false	78:1:2411:2438	630204	51	True				
ANR	630401	AssignmentExpression	shouldPadReturnType = false		630204	0		=			
ANR	630402	Identifier	shouldPadReturnType		630204	0					
ANR	630403	Identifier	false		630204	1					
ANR	630404	ExpressionStatement	shouldUnPadReturnType = false	79:1:2441:2470	630204	52	True				
ANR	630405	AssignmentExpression	shouldUnPadReturnType = false		630204	0		=			
ANR	630406	Identifier	shouldUnPadReturnType		630204	0					
ANR	630407	Identifier	false		630204	1					
ANR	630408	ExpressionStatement	shouldPadParamType = false	80:1:2473:2499	630204	53	True				
ANR	630409	AssignmentExpression	shouldPadParamType = false		630204	0		=			
ANR	630410	Identifier	shouldPadParamType		630204	0					
ANR	630411	Identifier	false		630204	1					
ANR	630412	ExpressionStatement	shouldUnPadParamType = false	81:1:2502:2530	630204	54	True				
ANR	630413	AssignmentExpression	shouldUnPadParamType = false		630204	0		=			
ANR	630414	Identifier	shouldUnPadParamType		630204	0					
ANR	630415	Identifier	false		630204	1					
ANR	630416	ExpressionStatement	formatterFileType = 9	84:1:2576:2597	630204	55	True				
ANR	630417	AssignmentExpression	formatterFileType = 9		630204	0		=			
ANR	630418	Identifier	formatterFileType		630204	0					
ANR	630419	PrimaryExpression	9		630204	1					
ANR	630420	Statement	headers	85:1:2629:2635	630204	56	True				
ANR	630421	Statement	=	85:9:2637:2637	630204	57	True				
ANR	630422	Statement	new	85:11:2639:2641	630204	58	True				
ANR	630423	Statement	vector	85:15:2643:2648	630204	59	True				
ANR	630424	Statement	<	85:21:2649:2649	630204	60	True				
ANR	630425	Statement	const	85:22:2650:2654	630204	61	True				
ANR	630426	Statement	string	85:28:2656:2661	630204	62	True				
ANR	630427	Statement	*	85:34:2662:2662	630204	63	True				
ANR	630428	Statement	>	85:35:2663:2663	630204	64	True				
ANR	630429	ExpressionStatement		85:36:2664:2664	630204	65	True				
ANR	630430	Statement	nonParenHeaders	86:1:2667:2681	630204	66	True				
ANR	630431	Statement	=	86:17:2683:2683	630204	67	True				
ANR	630432	Statement	new	86:19:2685:2687	630204	68	True				
ANR	630433	Statement	vector	86:23:2689:2694	630204	69	True				
ANR	630434	Statement	<	86:29:2695:2695	630204	70	True				
ANR	630435	Statement	const	86:30:2696:2700	630204	71	True				
ANR	630436	Statement	string	86:36:2702:2707	630204	72	True				
ANR	630437	Statement	*	86:42:2708:2708	630204	73	True				
ANR	630438	Statement	>	86:43:2709:2709	630204	74	True				
ANR	630439	ExpressionStatement		86:44:2710:2710	630204	75	True				
ANR	630440	Statement	preDefinitionHeaders	87:1:2713:2732	630204	76	True				
ANR	630441	Statement	=	87:22:2734:2734	630204	77	True				
ANR	630442	Statement	new	87:24:2736:2738	630204	78	True				
ANR	630443	Statement	vector	87:28:2740:2745	630204	79	True				
ANR	630444	Statement	<	87:34:2746:2746	630204	80	True				
ANR	630445	Statement	const	87:35:2747:2751	630204	81	True				
ANR	630446	Statement	string	87:41:2753:2758	630204	82	True				
ANR	630447	Statement	*	87:47:2759:2759	630204	83	True				
ANR	630448	Statement	>	87:48:2760:2760	630204	84	True				
ANR	630449	ExpressionStatement		87:49:2761:2761	630204	85	True				
ANR	630450	Statement	preCommandHeaders	88:1:2764:2780	630204	86	True				
ANR	630451	Statement	=	88:19:2782:2782	630204	87	True				
ANR	630452	Statement	new	88:21:2784:2786	630204	88	True				
ANR	630453	Statement	vector	88:25:2788:2793	630204	89	True				
ANR	630454	Statement	<	88:31:2794:2794	630204	90	True				
ANR	630455	Statement	const	88:32:2795:2799	630204	91	True				
ANR	630456	Statement	string	88:38:2801:2806	630204	92	True				
ANR	630457	Statement	*	88:44:2807:2807	630204	93	True				
ANR	630458	Statement	>	88:45:2808:2808	630204	94	True				
ANR	630459	ExpressionStatement		88:46:2809:2809	630204	95	True				
ANR	630460	Statement	operators	89:1:2812:2820	630204	96	True				
ANR	630461	Statement	=	89:11:2822:2822	630204	97	True				
ANR	630462	Statement	new	89:13:2824:2826	630204	98	True				
ANR	630463	Statement	vector	89:17:2828:2833	630204	99	True				
ANR	630464	Statement	<	89:23:2834:2834	630204	100	True				
ANR	630465	Statement	const	89:24:2835:2839	630204	101	True				
ANR	630466	Statement	string	89:30:2841:2846	630204	102	True				
ANR	630467	Statement	*	89:36:2847:2847	630204	103	True				
ANR	630468	Statement	>	89:37:2848:2848	630204	104	True				
ANR	630469	ExpressionStatement		89:38:2849:2849	630204	105	True				
ANR	630470	Statement	assignmentOperators	90:1:2852:2870	630204	106	True				
ANR	630471	Statement	=	90:21:2872:2872	630204	107	True				
ANR	630472	Statement	new	90:23:2874:2876	630204	108	True				
ANR	630473	Statement	vector	90:27:2878:2883	630204	109	True				
ANR	630474	Statement	<	90:33:2884:2884	630204	110	True				
ANR	630475	Statement	const	90:34:2885:2889	630204	111	True				
ANR	630476	Statement	string	90:40:2891:2896	630204	112	True				
ANR	630477	Statement	*	90:46:2897:2897	630204	113	True				
ANR	630478	Statement	>	90:47:2898:2898	630204	114	True				
ANR	630479	ExpressionStatement		90:48:2899:2899	630204	115	True				
ANR	630480	Statement	castOperators	91:1:2902:2914	630204	116	True				
ANR	630481	Statement	=	91:15:2916:2916	630204	117	True				
ANR	630482	Statement	new	91:17:2918:2920	630204	118	True				
ANR	630483	Statement	vector	91:21:2922:2927	630204	119	True				
ANR	630484	Statement	<	91:27:2928:2928	630204	120	True				
ANR	630485	Statement	const	91:28:2929:2933	630204	121	True				
ANR	630486	Statement	string	91:34:2935:2940	630204	122	True				
ANR	630487	Statement	*	91:40:2941:2941	630204	123	True				
ANR	630488	Statement	>	91:41:2942:2942	630204	124	True				
ANR	630489	ExpressionStatement		91:42:2943:2943	630204	125	True				
ANR	630490	Statement	indentableMacros	94:1:2988:3003	630204	126	True				
ANR	630491	Statement	=	94:18:3005:3005	630204	127	True				
ANR	630492	Statement	new	94:20:3007:3009	630204	128	True				
ANR	630493	Statement	vector	94:24:3011:3016	630204	129	True				
ANR	630494	Statement	<	94:30:3017:3017	630204	130	True				
ANR	630495	Statement	const	94:31:3018:3022	630204	131	True				
ANR	630496	Statement	pair	94:37:3024:3027	630204	132	True				
ANR	630497	Statement	<	94:41:3028:3028	630204	133	True				
ANR	630498	Statement	const	94:42:3029:3033	630204	134	True				
ANR	630499	Statement	string	94:48:3035:3040	630204	135	True				
ANR	630500	Statement	","	94:54:3041:3041	630204	136	True				
ANR	630501	Statement	const	94:56:3043:3047	630204	137	True				
ANR	630502	Statement	string	94:62:3049:3054	630204	138	True				
ANR	630503	Statement	>	94:68:3055:3055	630204	139	True				
ANR	630504	Statement	*	94:69:3056:3056	630204	140	True				
ANR	630505	Statement	>	94:71:3058:3058	630204	141	True				
ANR	630506	ExpressionStatement		94:72:3059:3059	630204	142	True				
ANR	630507	Identifier	ASFormatter :: ASFormatter		630204	1					
ANR	630508	ParameterList			630204	2					
ANR	630509	CFGEntryNode	ENTRY		630204		True				
ANR	630510	CFGExitNode	EXIT		630204		True				
ANR	630511	Symbol	shouldRemoveBraces		630204						
ANR	630512	Symbol	shouldAddBraces		630204						
ANR	630513	Symbol	shouldDeleteEmptyLines		630204						
ANR	630514	Symbol	shouldBreakOneLineBlocks		630204						
ANR	630515	Symbol	shouldAttachNamespace		630204						
ANR	630516	Symbol	shouldBreakElseIfs		630204						
ANR	630517	Symbol	shouldBreakBlocks		630204						
ANR	630518	Symbol	formatterFileType		630204						
ANR	630519	Symbol	shouldAttachClosingWhile		630204						
ANR	630520	Symbol	formattingStyle		630204						
ANR	630521	Symbol	REF_SAME_AS_PTR		630204						
ANR	630522	Symbol	shouldBreakOneLineHeaders		630204						
ANR	630523	Symbol	shouldBreakClosingHeaderBraces		630204						
ANR	630524	Symbol	shouldConvertTabs		630204						
ANR	630525	Symbol	shouldPadHeader		630204						
ANR	630526	Symbol	shouldCloseTemplates		630204						
ANR	630527	Symbol	structStack		630204						
ANR	630528	Symbol	sourceIterator		630204						
ANR	630529	Symbol	shouldPadCommas		630204						
ANR	630530	Symbol	shouldAttachInline		630204						
ANR	630531	Symbol	shouldBreakOneLineStatements		630204						
ANR	630532	Symbol	STYLE_NONE		630204						
ANR	630533	Symbol	shouldUnPadParamType		630204						
ANR	630534	Symbol	shouldIndentCol1Comments		630204						
ANR	630535	Symbol	attachClosingBraceMode		630204						
ANR	630536	Symbol	true		630204						
ANR	630537	Symbol	parenStack		630204						
ANR	630538	Symbol	braceFormatMode		630204						
ANR	630539	Symbol	nullptr		630204						
ANR	630540	Symbol	shouldUnPadParens		630204						
ANR	630541	Symbol	braceTypeStack		630204						
ANR	630542	Symbol	maxCodeLength		630204						
ANR	630543	Symbol	string :: npos		630204						
ANR	630544	Symbol	shouldAttachExternC		630204						
ANR	630545	Symbol	shouldPadParensOutside		630204						
ANR	630546	Symbol	lineEnd		630204						
ANR	630547	Symbol	shouldAttachClass		630204						
ANR	630548	Symbol	objCColonPadMode		630204						
ANR	630549	Symbol	shouldBreakClosingHeaderBlocks		630204						
ANR	630550	Symbol	NONE_MODE		630204						
ANR	630551	Symbol	shouldUnPadMethodPrefix		630204						
ANR	630552	Symbol	COLON_PAD_NO_CHANGE		630204						
ANR	630553	Symbol	shouldPadParensInside		630204						
ANR	630554	Symbol	shouldUnPadReturnType		630204						
ANR	630555	Symbol	pointerAlignment		630204						
ANR	630556	Symbol	questionMarkStack		630204						
ANR	630557	Symbol	false		630204						
ANR	630558	Symbol	referenceAlignment		630204						
ANR	630559	Symbol	shouldPadMethodPrefix		630204						
ANR	630560	Symbol	shouldPadFirstParen		630204						
ANR	630561	Symbol	shouldIndentPreprocBlock		630204						
ANR	630562	Symbol	PTR_ALIGN_NONE		630204						
ANR	630563	Symbol	shouldPadParamType		630204						
ANR	630564	Symbol	lineCommentNoIndent		630204						
ANR	630565	Symbol	shouldPadOperators		630204						
ANR	630566	Symbol	LINEEND_DEFAULT		630204						
ANR	630567	Symbol	shouldStripCommentPrefix		630204						
ANR	630568	Symbol	shouldBreakLineAfterLogical		630204						
ANR	630569	Symbol	shouldPadReturnType		630204						
ANR	630570	Symbol	preBraceHeaderStack		630204						
ANR	630571	Symbol	shouldAddOneLineBraces		630204						
ANR	630572	Symbol	shouldPadMethodColon		630204						
ANR	630573	Function	ASFormatter :: ~ASFormatter	100:0:3101:3841							
ANR	630574	FunctionDef	ASFormatter :: ~ASFormatter ()		630573	0					
ANR	630575	CompoundStatement		101:0:3129:3841	630573	0					
ANR	630576	ExpressionStatement	deleteContainer ( preBraceHeaderStack )	103:1:3169:3205	630573	0	True				
ANR	630577	CallExpression	deleteContainer ( preBraceHeaderStack )		630573	0					
ANR	630578	Callee	deleteContainer		630573	0					
ANR	630579	Identifier	deleteContainer		630573	0					
ANR	630580	ArgumentList	preBraceHeaderStack		630573	1					
ANR	630581	Argument	preBraceHeaderStack		630573	0					
ANR	630582	Identifier	preBraceHeaderStack		630573	0					
ANR	630583	ExpressionStatement	deleteContainer ( braceTypeStack )	104:1:3208:3239	630573	1	True				
ANR	630584	CallExpression	deleteContainer ( braceTypeStack )		630573	0					
ANR	630585	Callee	deleteContainer		630573	0					
ANR	630586	Identifier	deleteContainer		630573	0					
ANR	630587	ArgumentList	braceTypeStack		630573	1					
ANR	630588	Argument	braceTypeStack		630573	0					
ANR	630589	Identifier	braceTypeStack		630573	0					
ANR	630590	ExpressionStatement	deleteContainer ( parenStack )	105:1:3242:3269	630573	2	True				
ANR	630591	CallExpression	deleteContainer ( parenStack )		630573	0					
ANR	630592	Callee	deleteContainer		630573	0					
ANR	630593	Identifier	deleteContainer		630573	0					
ANR	630594	ArgumentList	parenStack		630573	1					
ANR	630595	Argument	parenStack		630573	0					
ANR	630596	Identifier	parenStack		630573	0					
ANR	630597	ExpressionStatement	deleteContainer ( structStack )	106:1:3272:3300	630573	3	True				
ANR	630598	CallExpression	deleteContainer ( structStack )		630573	0					
ANR	630599	Callee	deleteContainer		630573	0					
ANR	630600	Identifier	deleteContainer		630573	0					
ANR	630601	ArgumentList	structStack		630573	1					
ANR	630602	Argument	structStack		630573	0					
ANR	630603	Identifier	structStack		630573	0					
ANR	630604	ExpressionStatement	deleteContainer ( questionMarkStack )	107:1:3303:3337	630573	4	True				
ANR	630605	CallExpression	deleteContainer ( questionMarkStack )		630573	0					
ANR	630606	Callee	deleteContainer		630573	0					
ANR	630607	Identifier	deleteContainer		630573	0					
ANR	630608	ArgumentList	questionMarkStack		630573	1					
ANR	630609	Argument	questionMarkStack		630573	0					
ANR	630610	Identifier	questionMarkStack		630573	0					
ANR	630611	ExpressionStatement	formatterFileType = 9	110:1:3379:3400	630573	5	True				
ANR	630612	AssignmentExpression	formatterFileType = 9		630573	0		=			
ANR	630613	Identifier	formatterFileType		630573	0					
ANR	630614	PrimaryExpression	9		630573	1					
ANR	630615	Statement	delete	111:1:3432:3437	630573	6	True				
ANR	630616	ExpressionStatement	headers	111:8:3439:3446	630573	7	True				
ANR	630617	Identifier	headers		630573	0					
ANR	630618	Statement	delete	112:1:3449:3454	630573	8	True				
ANR	630619	ExpressionStatement	nonParenHeaders	112:8:3456:3471	630573	9	True				
ANR	630620	Identifier	nonParenHeaders		630573	0					
ANR	630621	Statement	delete	113:1:3474:3479	630573	10	True				
ANR	630622	ExpressionStatement	preDefinitionHeaders	113:8:3481:3501	630573	11	True				
ANR	630623	Identifier	preDefinitionHeaders		630573	0					
ANR	630624	Statement	delete	114:1:3504:3509	630573	12	True				
ANR	630625	ExpressionStatement	preCommandHeaders	114:8:3511:3528	630573	13	True				
ANR	630626	Identifier	preCommandHeaders		630573	0					
ANR	630627	Statement	delete	115:1:3531:3536	630573	14	True				
ANR	630628	ExpressionStatement	operators	115:8:3538:3547	630573	15	True				
ANR	630629	Identifier	operators		630573	0					
ANR	630630	Statement	delete	116:1:3550:3555	630573	16	True				
ANR	630631	ExpressionStatement	assignmentOperators	116:8:3557:3576	630573	17	True				
ANR	630632	Identifier	assignmentOperators		630573	0					
ANR	630633	Statement	delete	117:1:3579:3584	630573	18	True				
ANR	630634	ExpressionStatement	castOperators	117:8:3586:3599	630573	19	True				
ANR	630635	Identifier	castOperators		630573	0					
ANR	630636	Statement	delete	120:1:3640:3645	630573	20	True				
ANR	630637	ExpressionStatement	indentableMacros	120:8:3647:3663	630573	21	True				
ANR	630638	Identifier	indentableMacros		630573	0					
ANR	630639	ExpressionStatement	ASBeautifier :: deleteBeautifierVectors ( )	124:1:3781:3820	630573	22	True				
ANR	630640	CallExpression	ASBeautifier :: deleteBeautifierVectors ( )		630573	0					
ANR	630641	Callee	ASBeautifier :: deleteBeautifierVectors		630573	0					
ANR	630642	Identifier	ASBeautifier :: deleteBeautifierVectors		630573	0					
ANR	630643	ArgumentList			630573	1					
ANR	630644	Statement	delete	126:1:3824:3829	630573	23	True				
ANR	630645	ExpressionStatement	enhancer	126:8:3831:3839	630573	24	True				
ANR	630646	Identifier	enhancer		630573	0					
ANR	630647	Identifier	ASFormatter :: ~ASFormatter		630573	1					
ANR	630648	ParameterList			630573	2					
ANR	630649	CFGEntryNode	ENTRY		630573		True				
ANR	630650	CFGExitNode	EXIT		630573		True				
ANR	630651	Symbol	questionMarkStack		630573						
ANR	630652	Symbol	braceTypeStack		630573						
ANR	630653	Symbol	parenStack		630573						
ANR	630654	Symbol	structStack		630573						
ANR	630655	Symbol	preBraceHeaderStack		630573						
ANR	630656	Symbol	formatterFileType		630573						
ANR	630657	Function	ASFormatter :: init	139:0:4190:9097							
ANR	630658	FunctionDef	ASFormatter :: init (ASSourceIterator * si)		630657	0					
ANR	630659	CompoundStatement		140:0:4235:9097	630657	0					
ANR	630660	ExpressionStatement	buildLanguageVectors ( )	141:1:4238:4260	630657	0	True				
ANR	630661	CallExpression	buildLanguageVectors ( )		630657	0					
ANR	630662	Callee	buildLanguageVectors		630657	0					
ANR	630663	Identifier	buildLanguageVectors		630657	0					
ANR	630664	ArgumentList			630657	1					
ANR	630665	ExpressionStatement	fixOptionVariableConflicts ( )	142:1:4263:4291	630657	1	True				
ANR	630666	CallExpression	fixOptionVariableConflicts ( )		630657	0					
ANR	630667	Callee	fixOptionVariableConflicts		630657	0					
ANR	630668	Identifier	fixOptionVariableConflicts		630657	0					
ANR	630669	ArgumentList			630657	1					
ANR	630670	ExpressionStatement	ASBeautifier :: init ( si )	143:1:4294:4316	630657	2	True				
ANR	630671	CallExpression	ASBeautifier :: init ( si )		630657	0					
ANR	630672	Callee	ASBeautifier :: init		630657	0					
ANR	630673	Identifier	ASBeautifier :: init		630657	0					
ANR	630674	ArgumentList	si		630657	1					
ANR	630675	Argument	si		630657	0					
ANR	630676	Identifier	si		630657	0					
ANR	630677	ExpressionStatement	sourceIterator = si	144:1:4319:4338	630657	3	True				
ANR	630678	AssignmentExpression	sourceIterator = si		630657	0		=			
ANR	630679	Identifier	sourceIterator		630657	0					
ANR	630680	Identifier	si		630657	1					
ANR	630681	ExpressionStatement	"enhancer -> init ( getFileType ( ) , getIndentLength ( ) , getTabLength ( ) , getIndentString ( ) == ""\\t"" , getForceTabIndentation ( ) , getNamespaceIndent ( ) , getCaseIndent ( ) , shouldIndentPreprocBlock , getPreprocDefineIndent ( ) , getEmptyLineFill ( ) , indentableMacros )"	146:1:4342:4748	630657	4	True				
ANR	630682	CallExpression	"enhancer -> init ( getFileType ( ) , getIndentLength ( ) , getTabLength ( ) , getIndentString ( ) == ""\\t"" , getForceTabIndentation ( ) , getNamespaceIndent ( ) , getCaseIndent ( ) , shouldIndentPreprocBlock , getPreprocDefineIndent ( ) , getEmptyLineFill ( ) , indentableMacros )"		630657	0					
ANR	630683	Callee	enhancer -> init		630657	0					
ANR	630684	PtrMemberAccess	enhancer -> init		630657	0					
ANR	630685	Identifier	enhancer		630657	0					
ANR	630686	Identifier	init		630657	1					
ANR	630687	ArgumentList	getFileType ( )		630657	1					
ANR	630688	Argument	getFileType ( )		630657	0					
ANR	630689	CallExpression	getFileType ( )		630657	0					
ANR	630690	Callee	getFileType		630657	0					
ANR	630691	Identifier	getFileType		630657	0					
ANR	630692	ArgumentList			630657	1					
ANR	630693	Argument	getIndentLength ( )		630657	1					
ANR	630694	CallExpression	getIndentLength ( )		630657	0					
ANR	630695	Callee	getIndentLength		630657	0					
ANR	630696	Identifier	getIndentLength		630657	0					
ANR	630697	ArgumentList			630657	1					
ANR	630698	Argument	getTabLength ( )		630657	2					
ANR	630699	CallExpression	getTabLength ( )		630657	0					
ANR	630700	Callee	getTabLength		630657	0					
ANR	630701	Identifier	getTabLength		630657	0					
ANR	630702	ArgumentList			630657	1					
ANR	630703	Argument	"getIndentString ( ) == ""\\t"""		630657	3					
ANR	630704	EqualityExpression	"getIndentString ( ) == ""\\t"""		630657	0		==			
ANR	630705	CallExpression	getIndentString ( )		630657	0					
ANR	630706	Callee	getIndentString		630657	0					
ANR	630707	Identifier	getIndentString		630657	0					
ANR	630708	ArgumentList			630657	1					
ANR	630709	PrimaryExpression	"""\\t"""		630657	1					
ANR	630710	Argument	getForceTabIndentation ( )		630657	4					
ANR	630711	CallExpression	getForceTabIndentation ( )		630657	0					
ANR	630712	Callee	getForceTabIndentation		630657	0					
ANR	630713	Identifier	getForceTabIndentation		630657	0					
ANR	630714	ArgumentList			630657	1					
ANR	630715	Argument	getNamespaceIndent ( )		630657	5					
ANR	630716	CallExpression	getNamespaceIndent ( )		630657	0					
ANR	630717	Callee	getNamespaceIndent		630657	0					
ANR	630718	Identifier	getNamespaceIndent		630657	0					
ANR	630719	ArgumentList			630657	1					
ANR	630720	Argument	getCaseIndent ( )		630657	6					
ANR	630721	CallExpression	getCaseIndent ( )		630657	0					
ANR	630722	Callee	getCaseIndent		630657	0					
ANR	630723	Identifier	getCaseIndent		630657	0					
ANR	630724	ArgumentList			630657	1					
ANR	630725	Argument	shouldIndentPreprocBlock		630657	7					
ANR	630726	Identifier	shouldIndentPreprocBlock		630657	0					
ANR	630727	Argument	getPreprocDefineIndent ( )		630657	8					
ANR	630728	CallExpression	getPreprocDefineIndent ( )		630657	0					
ANR	630729	Callee	getPreprocDefineIndent		630657	0					
ANR	630730	Identifier	getPreprocDefineIndent		630657	0					
ANR	630731	ArgumentList			630657	1					
ANR	630732	Argument	getEmptyLineFill ( )		630657	9					
ANR	630733	CallExpression	getEmptyLineFill ( )		630657	0					
ANR	630734	Callee	getEmptyLineFill		630657	0					
ANR	630735	Identifier	getEmptyLineFill		630657	0					
ANR	630736	ArgumentList			630657	1					
ANR	630737	Argument	indentableMacros		630657	10					
ANR	630738	Identifier	indentableMacros		630657	0					
ANR	630739	Statement	initContainer	158:1:4752:4764	630657	5	True				
ANR	630740	Statement	(	158:14:4765:4765	630657	6	True				
ANR	630741	Statement	preBraceHeaderStack	158:15:4766:4784	630657	7	True				
ANR	630742	Statement	","	158:34:4785:4785	630657	8	True				
ANR	630743	Statement	new	158:36:4787:4789	630657	9	True				
ANR	630744	Statement	vector	158:40:4791:4796	630657	10	True				
ANR	630745	Statement	<	158:46:4797:4797	630657	11	True				
ANR	630746	Statement	const	158:47:4798:4802	630657	12	True				
ANR	630747	Statement	string	158:53:4804:4809	630657	13	True				
ANR	630748	Statement	*	158:59:4810:4810	630657	14	True				
ANR	630749	Statement	>	158:60:4811:4811	630657	15	True				
ANR	630750	Statement	)	158:61:4812:4812	630657	16	True				
ANR	630751	ExpressionStatement		158:62:4813:4813	630657	17	True				
ANR	630752	Statement	initContainer	159:1:4816:4828	630657	18	True				
ANR	630753	Statement	(	159:14:4829:4829	630657	19	True				
ANR	630754	Statement	parenStack	159:15:4830:4839	630657	20	True				
ANR	630755	Statement	","	159:25:4840:4840	630657	21	True				
ANR	630756	Statement	new	159:27:4842:4844	630657	22	True				
ANR	630757	Statement	vector	159:31:4846:4851	630657	23	True				
ANR	630758	Statement	<	159:37:4852:4852	630657	24	True				
ANR	630759	Statement	int	159:38:4853:4855	630657	25	True				
ANR	630760	Statement	>	159:41:4856:4856	630657	26	True				
ANR	630761	Statement	)	159:42:4857:4857	630657	27	True				
ANR	630762	ExpressionStatement		159:43:4858:4858	630657	28	True				
ANR	630763	Statement	initContainer	160:1:4861:4873	630657	29	True				
ANR	630764	Statement	(	160:14:4874:4874	630657	30	True				
ANR	630765	Statement	structStack	160:15:4875:4885	630657	31	True				
ANR	630766	Statement	","	160:26:4886:4886	630657	32	True				
ANR	630767	Statement	new	160:28:4888:4890	630657	33	True				
ANR	630768	Statement	vector	160:32:4892:4897	630657	34	True				
ANR	630769	Statement	<	160:38:4898:4898	630657	35	True				
ANR	630770	Statement	bool	160:39:4899:4902	630657	36	True				
ANR	630771	Statement	>	160:43:4903:4903	630657	37	True				
ANR	630772	Statement	)	160:44:4904:4904	630657	38	True				
ANR	630773	ExpressionStatement		160:45:4905:4905	630657	39	True				
ANR	630774	Statement	initContainer	161:1:4908:4920	630657	40	True				
ANR	630775	Statement	(	161:14:4921:4921	630657	41	True				
ANR	630776	Statement	questionMarkStack	161:15:4922:4938	630657	42	True				
ANR	630777	Statement	","	161:32:4939:4939	630657	43	True				
ANR	630778	Statement	new	161:34:4941:4943	630657	44	True				
ANR	630779	Statement	vector	161:38:4945:4950	630657	45	True				
ANR	630780	Statement	<	161:44:4951:4951	630657	46	True				
ANR	630781	Statement	bool	161:45:4952:4955	630657	47	True				
ANR	630782	Statement	>	161:49:4956:4956	630657	48	True				
ANR	630783	Statement	)	161:50:4957:4957	630657	49	True				
ANR	630784	ExpressionStatement		161:51:4958:4958	630657	50	True				
ANR	630785	ExpressionStatement	parenStack -> emplace_back ( 0 )	162:1:4961:4988	630657	51	True				
ANR	630786	CallExpression	parenStack -> emplace_back ( 0 )		630657	0					
ANR	630787	Callee	parenStack -> emplace_back		630657	0					
ANR	630788	PtrMemberAccess	parenStack -> emplace_back		630657	0					
ANR	630789	Identifier	parenStack		630657	0					
ANR	630790	Identifier	emplace_back		630657	1					
ANR	630791	ArgumentList	0		630657	1					
ANR	630792	Argument	0		630657	0					
ANR	630793	PrimaryExpression	0		630657	0					
ANR	630794	Statement	initContainer	163:1:5051:5063	630657	52	True				
ANR	630795	Statement	(	163:14:5064:5064	630657	53	True				
ANR	630796	Statement	braceTypeStack	163:15:5065:5078	630657	54	True				
ANR	630797	Statement	","	163:29:5079:5079	630657	55	True				
ANR	630798	Statement	new	163:31:5081:5083	630657	56	True				
ANR	630799	Statement	vector	163:35:5085:5090	630657	57	True				
ANR	630800	Statement	<	163:41:5091:5091	630657	58	True				
ANR	630801	Statement	BraceType	163:42:5092:5100	630657	59	True				
ANR	630802	Statement	>	163:51:5101:5101	630657	60	True				
ANR	630803	Statement	)	163:52:5102:5102	630657	61	True				
ANR	630804	ExpressionStatement		163:53:5103:5103	630657	62	True				
ANR	630805	ExpressionStatement	braceTypeStack -> emplace_back ( NULL_TYPE )	164:1:5106:5145	630657	63	True				
ANR	630806	CallExpression	braceTypeStack -> emplace_back ( NULL_TYPE )		630657	0					
ANR	630807	Callee	braceTypeStack -> emplace_back		630657	0					
ANR	630808	PtrMemberAccess	braceTypeStack -> emplace_back		630657	0					
ANR	630809	Identifier	braceTypeStack		630657	0					
ANR	630810	Identifier	emplace_back		630657	1					
ANR	630811	ArgumentList	NULL_TYPE		630657	1					
ANR	630812	Argument	NULL_TYPE		630657	0					
ANR	630813	Identifier	NULL_TYPE		630657	0					
ANR	630814	ExpressionStatement	clearFormattedLineSplitPoints ( )	165:1:5200:5231	630657	64	True				
ANR	630815	CallExpression	clearFormattedLineSplitPoints ( )		630657	0					
ANR	630816	Callee	clearFormattedLineSplitPoints		630657	0					
ANR	630817	Identifier	clearFormattedLineSplitPoints		630657	0					
ANR	630818	ArgumentList			630657	1					
ANR	630819	ExpressionStatement	currentHeader = nullptr	167:1:5235:5258	630657	65	True				
ANR	630820	AssignmentExpression	currentHeader = nullptr		630657	0		=			
ANR	630821	Identifier	currentHeader		630657	0					
ANR	630822	Identifier	nullptr		630657	1					
ANR	630823	ExpressionStatement	"currentLine = """""	168:1:5261:5277	630657	66	True				
ANR	630824	AssignmentExpression	"currentLine = """""		630657	0		=			
ANR	630825	Identifier	currentLine		630657	0					
ANR	630826	PrimaryExpression	""""""		630657	1					
ANR	630827	ExpressionStatement	"readyFormattedLine = """""	169:1:5280:5303	630657	67	True				
ANR	630828	AssignmentExpression	"readyFormattedLine = """""		630657	0		=			
ANR	630829	Identifier	readyFormattedLine		630657	0					
ANR	630830	PrimaryExpression	""""""		630657	1					
ANR	630831	ExpressionStatement	"formattedLine = """""	170:1:5306:5324	630657	68	True				
ANR	630832	AssignmentExpression	"formattedLine = """""		630657	0		=			
ANR	630833	Identifier	formattedLine		630657	0					
ANR	630834	PrimaryExpression	""""""		630657	1					
ANR	630835	ExpressionStatement	"verbatimDelimiter = """""	171:1:5327:5349	630657	69	True				
ANR	630836	AssignmentExpression	"verbatimDelimiter = """""		630657	0		=			
ANR	630837	Identifier	verbatimDelimiter		630657	0					
ANR	630838	PrimaryExpression	""""""		630657	1					
ANR	630839	ExpressionStatement	currentChar = ' '	172:1:5352:5369	630657	70	True				
ANR	630840	AssignmentExpression	currentChar = ' '		630657	0		=			
ANR	630841	Identifier	currentChar		630657	0					
ANR	630842	PrimaryExpression	' '		630657	1					
ANR	630843	ExpressionStatement	previousChar = ' '	173:1:5372:5390	630657	71	True				
ANR	630844	AssignmentExpression	previousChar = ' '		630657	0		=			
ANR	630845	Identifier	previousChar		630657	0					
ANR	630846	PrimaryExpression	' '		630657	1					
ANR	630847	ExpressionStatement	previousCommandChar = ' '	174:1:5393:5418	630657	72	True				
ANR	630848	AssignmentExpression	previousCommandChar = ' '		630657	0		=			
ANR	630849	Identifier	previousCommandChar		630657	0					
ANR	630850	PrimaryExpression	' '		630657	1					
ANR	630851	ExpressionStatement	previousNonWSChar = ' '	175:1:5421:5444	630657	73	True				
ANR	630852	AssignmentExpression	previousNonWSChar = ' '		630657	0		=			
ANR	630853	Identifier	previousNonWSChar		630657	0					
ANR	630854	PrimaryExpression	' '		630657	1					
ANR	630855	ExpressionStatement	"quoteChar = '""'"	176:1:5447:5462	630657	74	True				
ANR	630856	AssignmentExpression	"quoteChar = '""'"		630657	0		=			
ANR	630857	Identifier	quoteChar		630657	0					
ANR	630858	PrimaryExpression	"'""'"		630657	1					
ANR	630859	ExpressionStatement	preprocBlockEnd = 0	177:1:5465:5484	630657	75	True				
ANR	630860	AssignmentExpression	preprocBlockEnd = 0		630657	0		=			
ANR	630861	Identifier	preprocBlockEnd		630657	0					
ANR	630862	PrimaryExpression	0		630657	1					
ANR	630863	ExpressionStatement	charNum = 0	178:1:5487:5498	630657	76	True				
ANR	630864	AssignmentExpression	charNum = 0		630657	0		=			
ANR	630865	Identifier	charNum		630657	0					
ANR	630866	PrimaryExpression	0		630657	1					
ANR	630867	ExpressionStatement	checksumIn = 0	179:1:5501:5515	630657	77	True				
ANR	630868	AssignmentExpression	checksumIn = 0		630657	0		=			
ANR	630869	Identifier	checksumIn		630657	0					
ANR	630870	PrimaryExpression	0		630657	1					
ANR	630871	ExpressionStatement	checksumOut = 0	180:1:5518:5533	630657	78	True				
ANR	630872	AssignmentExpression	checksumOut = 0		630657	0		=			
ANR	630873	Identifier	checksumOut		630657	0					
ANR	630874	PrimaryExpression	0		630657	1					
ANR	630875	ExpressionStatement	currentLineFirstBraceNum = string :: npos	181:1:5536:5575	630657	79	True				
ANR	630876	AssignmentExpression	currentLineFirstBraceNum = string :: npos		630657	0		=			
ANR	630877	Identifier	currentLineFirstBraceNum		630657	0					
ANR	630878	Identifier	string :: npos		630657	1					
ANR	630879	ExpressionStatement	formattedLineCommentNum = 0	182:1:5578:5605	630657	80	True				
ANR	630880	AssignmentExpression	formattedLineCommentNum = 0		630657	0		=			
ANR	630881	Identifier	formattedLineCommentNum		630657	0					
ANR	630882	PrimaryExpression	0		630657	1					
ANR	630883	ExpressionStatement	leadingSpaces = 0	183:1:5608:5625	630657	81	True				
ANR	630884	AssignmentExpression	leadingSpaces = 0		630657	0		=			
ANR	630885	Identifier	leadingSpaces		630657	0					
ANR	630886	PrimaryExpression	0		630657	1					
ANR	630887	ExpressionStatement	previousReadyFormattedLineLength = string :: npos	184:1:5628:5675	630657	82	True				
ANR	630888	AssignmentExpression	previousReadyFormattedLineLength = string :: npos		630657	0		=			
ANR	630889	Identifier	previousReadyFormattedLineLength		630657	0					
ANR	630890	Identifier	string :: npos		630657	1					
ANR	630891	ExpressionStatement	preprocBraceTypeStackSize = 0	185:1:5678:5707	630657	83	True				
ANR	630892	AssignmentExpression	preprocBraceTypeStackSize = 0		630657	0		=			
ANR	630893	Identifier	preprocBraceTypeStackSize		630657	0					
ANR	630894	PrimaryExpression	0		630657	1					
ANR	630895	ExpressionStatement	spacePadNum = 0	186:1:5710:5725	630657	84	True				
ANR	630896	AssignmentExpression	spacePadNum = 0		630657	0		=			
ANR	630897	Identifier	spacePadNum		630657	0					
ANR	630898	PrimaryExpression	0		630657	1					
ANR	630899	ExpressionStatement	nextLineSpacePadNum = 0	187:1:5728:5751	630657	85	True				
ANR	630900	AssignmentExpression	nextLineSpacePadNum = 0		630657	0		=			
ANR	630901	Identifier	nextLineSpacePadNum		630657	0					
ANR	630902	PrimaryExpression	0		630657	1					
ANR	630903	ExpressionStatement	objCColonAlign = 0	188:1:5754:5772	630657	86	True				
ANR	630904	AssignmentExpression	objCColonAlign = 0		630657	0		=			
ANR	630905	Identifier	objCColonAlign		630657	0					
ANR	630906	PrimaryExpression	0		630657	1					
ANR	630907	ExpressionStatement	templateDepth = 0	189:1:5775:5792	630657	87	True				
ANR	630908	AssignmentExpression	templateDepth = 0		630657	0		=			
ANR	630909	Identifier	templateDepth		630657	0					
ANR	630910	PrimaryExpression	0		630657	1					
ANR	630911	ExpressionStatement	squareBracketCount = 0	190:1:5795:5817	630657	88	True				
ANR	630912	AssignmentExpression	squareBracketCount = 0		630657	0		=			
ANR	630913	Identifier	squareBracketCount		630657	0					
ANR	630914	PrimaryExpression	0		630657	1					
ANR	630915	ExpressionStatement	runInIndentChars = 0	191:1:5820:5840	630657	89	True				
ANR	630916	AssignmentExpression	runInIndentChars = 0		630657	0		=			
ANR	630917	Identifier	runInIndentChars		630657	0					
ANR	630918	PrimaryExpression	0		630657	1					
ANR	630919	ExpressionStatement	tabIncrementIn = 0	192:1:5843:5861	630657	90	True				
ANR	630920	AssignmentExpression	tabIncrementIn = 0		630657	0		=			
ANR	630921	Identifier	tabIncrementIn		630657	0					
ANR	630922	PrimaryExpression	0		630657	1					
ANR	630923	ExpressionStatement	previousBraceType = NULL_TYPE	193:1:5864:5893	630657	91	True				
ANR	630924	AssignmentExpression	previousBraceType = NULL_TYPE		630657	0		=			
ANR	630925	Identifier	previousBraceType		630657	0					
ANR	630926	Identifier	NULL_TYPE		630657	1					
ANR	630927	ExpressionStatement	isVirgin = true	195:1:5897:5912	630657	92	True				
ANR	630928	AssignmentExpression	isVirgin = true		630657	0		=			
ANR	630929	Identifier	isVirgin		630657	0					
ANR	630930	Identifier	true		630657	1					
ANR	630931	ExpressionStatement	isInVirginLine = true	196:1:5915:5936	630657	93	True				
ANR	630932	AssignmentExpression	isInVirginLine = true		630657	0		=			
ANR	630933	Identifier	isInVirginLine		630657	0					
ANR	630934	Identifier	true		630657	1					
ANR	630935	ExpressionStatement	isInLineComment = false	197:1:5939:5962	630657	94	True				
ANR	630936	AssignmentExpression	isInLineComment = false		630657	0		=			
ANR	630937	Identifier	isInLineComment		630657	0					
ANR	630938	Identifier	false		630657	1					
ANR	630939	ExpressionStatement	isInComment = false	198:1:5965:5984	630657	95	True				
ANR	630940	AssignmentExpression	isInComment = false		630657	0		=			
ANR	630941	Identifier	isInComment		630657	0					
ANR	630942	Identifier	false		630657	1					
ANR	630943	ExpressionStatement	isInCommentStartLine = false	199:1:5987:6015	630657	96	True				
ANR	630944	AssignmentExpression	isInCommentStartLine = false		630657	0		=			
ANR	630945	Identifier	isInCommentStartLine		630657	0					
ANR	630946	Identifier	false		630657	1					
ANR	630947	ExpressionStatement	noTrimCommentContinuation = false	200:1:6018:6051	630657	97	True				
ANR	630948	AssignmentExpression	noTrimCommentContinuation = false		630657	0		=			
ANR	630949	Identifier	noTrimCommentContinuation		630657	0					
ANR	630950	Identifier	false		630657	1					
ANR	630951	ExpressionStatement	isInPreprocessor = false	201:1:6054:6078	630657	98	True				
ANR	630952	AssignmentExpression	isInPreprocessor = false		630657	0		=			
ANR	630953	Identifier	isInPreprocessor		630657	0					
ANR	630954	Identifier	false		630657	1					
ANR	630955	ExpressionStatement	isInPreprocessorBeautify = false	202:1:6081:6113	630657	99	True				
ANR	630956	AssignmentExpression	isInPreprocessorBeautify = false		630657	0		=			
ANR	630957	Identifier	isInPreprocessorBeautify		630657	0					
ANR	630958	Identifier	false		630657	1					
ANR	630959	ExpressionStatement	doesLineStartComment = false	203:1:6116:6144	630657	100	True				
ANR	630960	AssignmentExpression	doesLineStartComment = false		630657	0		=			
ANR	630961	Identifier	doesLineStartComment		630657	0					
ANR	630962	Identifier	false		630657	1					
ANR	630963	ExpressionStatement	lineEndsInCommentOnly = false	204:1:6147:6176	630657	101	True				
ANR	630964	AssignmentExpression	lineEndsInCommentOnly = false		630657	0		=			
ANR	630965	Identifier	lineEndsInCommentOnly		630657	0					
ANR	630966	Identifier	false		630657	1					
ANR	630967	ExpressionStatement	lineIsCommentOnly = false	205:1:6179:6204	630657	102	True				
ANR	630968	AssignmentExpression	lineIsCommentOnly = false		630657	0		=			
ANR	630969	Identifier	lineIsCommentOnly		630657	0					
ANR	630970	Identifier	false		630657	1					
ANR	630971	ExpressionStatement	lineIsLineCommentOnly = false	206:1:6207:6236	630657	103	True				
ANR	630972	AssignmentExpression	lineIsLineCommentOnly = false		630657	0		=			
ANR	630973	Identifier	lineIsLineCommentOnly		630657	0					
ANR	630974	Identifier	false		630657	1					
ANR	630975	ExpressionStatement	lineIsEmpty = false	207:1:6239:6258	630657	104	True				
ANR	630976	AssignmentExpression	lineIsEmpty = false		630657	0		=			
ANR	630977	Identifier	lineIsEmpty		630657	0					
ANR	630978	Identifier	false		630657	1					
ANR	630979	ExpressionStatement	isImmediatelyPostCommentOnly = false	208:1:6261:6297	630657	105	True				
ANR	630980	AssignmentExpression	isImmediatelyPostCommentOnly = false		630657	0		=			
ANR	630981	Identifier	isImmediatelyPostCommentOnly		630657	0					
ANR	630982	Identifier	false		630657	1					
ANR	630983	ExpressionStatement	isImmediatelyPostEmptyLine = false	209:1:6300:6334	630657	106	True				
ANR	630984	AssignmentExpression	isImmediatelyPostEmptyLine = false		630657	0		=			
ANR	630985	Identifier	isImmediatelyPostEmptyLine		630657	0					
ANR	630986	Identifier	false		630657	1					
ANR	630987	ExpressionStatement	isInClassInitializer = false	210:1:6337:6365	630657	107	True				
ANR	630988	AssignmentExpression	isInClassInitializer = false		630657	0		=			
ANR	630989	Identifier	isInClassInitializer		630657	0					
ANR	630990	Identifier	false		630657	1					
ANR	630991	ExpressionStatement	isInQuote = false	211:1:6368:6385	630657	108	True				
ANR	630992	AssignmentExpression	isInQuote = false		630657	0		=			
ANR	630993	Identifier	isInQuote		630657	0					
ANR	630994	Identifier	false		630657	1					
ANR	630995	ExpressionStatement	isInVerbatimQuote = false	212:1:6388:6413	630657	109	True				
ANR	630996	AssignmentExpression	isInVerbatimQuote = false		630657	0		=			
ANR	630997	Identifier	isInVerbatimQuote		630657	0					
ANR	630998	Identifier	false		630657	1					
ANR	630999	ExpressionStatement	haveLineContinuationChar = false	213:1:6416:6448	630657	110	True				
ANR	631000	AssignmentExpression	haveLineContinuationChar = false		630657	0		=			
ANR	631001	Identifier	haveLineContinuationChar		630657	0					
ANR	631002	Identifier	false		630657	1					
ANR	631003	ExpressionStatement	isInQuoteContinuation = false	214:1:6451:6480	630657	111	True				
ANR	631004	AssignmentExpression	isInQuoteContinuation = false		630657	0		=			
ANR	631005	Identifier	isInQuoteContinuation		630657	0					
ANR	631006	Identifier	false		630657	1					
ANR	631007	ExpressionStatement	isHeaderInMultiStatementLine = false	215:1:6483:6519	630657	112	True				
ANR	631008	AssignmentExpression	isHeaderInMultiStatementLine = false		630657	0		=			
ANR	631009	Identifier	isHeaderInMultiStatementLine		630657	0					
ANR	631010	Identifier	false		630657	1					
ANR	631011	ExpressionStatement	isSpecialChar = false	216:1:6522:6543	630657	113	True				
ANR	631012	AssignmentExpression	isSpecialChar = false		630657	0		=			
ANR	631013	Identifier	isSpecialChar		630657	0					
ANR	631014	Identifier	false		630657	1					
ANR	631015	ExpressionStatement	isNonParenHeader = false	217:1:6546:6570	630657	114	True				
ANR	631016	AssignmentExpression	isNonParenHeader = false		630657	0		=			
ANR	631017	Identifier	isNonParenHeader		630657	0					
ANR	631018	Identifier	false		630657	1					
ANR	631019	ExpressionStatement	foundNamespaceHeader = false	218:1:6573:6601	630657	115	True				
ANR	631020	AssignmentExpression	foundNamespaceHeader = false		630657	0		=			
ANR	631021	Identifier	foundNamespaceHeader		630657	0					
ANR	631022	Identifier	false		630657	1					
ANR	631023	ExpressionStatement	foundClassHeader = false	219:1:6604:6628	630657	116	True				
ANR	631024	AssignmentExpression	foundClassHeader = false		630657	0		=			
ANR	631025	Identifier	foundClassHeader		630657	0					
ANR	631026	Identifier	false		630657	1					
ANR	631027	ExpressionStatement	foundStructHeader = false	220:1:6631:6656	630657	117	True				
ANR	631028	AssignmentExpression	foundStructHeader = false		630657	0		=			
ANR	631029	Identifier	foundStructHeader		630657	0					
ANR	631030	Identifier	false		630657	1					
ANR	631031	ExpressionStatement	foundInterfaceHeader = false	221:1:6659:6687	630657	118	True				
ANR	631032	AssignmentExpression	foundInterfaceHeader = false		630657	0		=			
ANR	631033	Identifier	foundInterfaceHeader		630657	0					
ANR	631034	Identifier	false		630657	1					
ANR	631035	ExpressionStatement	foundPreDefinitionHeader = false	222:1:6690:6722	630657	119	True				
ANR	631036	AssignmentExpression	foundPreDefinitionHeader = false		630657	0		=			
ANR	631037	Identifier	foundPreDefinitionHeader		630657	0					
ANR	631038	Identifier	false		630657	1					
ANR	631039	ExpressionStatement	foundPreCommandHeader = false	223:1:6725:6754	630657	120	True				
ANR	631040	AssignmentExpression	foundPreCommandHeader = false		630657	0		=			
ANR	631041	Identifier	foundPreCommandHeader		630657	0					
ANR	631042	Identifier	false		630657	1					
ANR	631043	ExpressionStatement	foundPreCommandMacro = false	224:1:6757:6785	630657	121	True				
ANR	631044	AssignmentExpression	foundPreCommandMacro = false		630657	0		=			
ANR	631045	Identifier	foundPreCommandMacro		630657	0					
ANR	631046	Identifier	false		630657	1					
ANR	631047	ExpressionStatement	foundTrailingReturnType = false	225:1:6788:6819	630657	122	True				
ANR	631048	AssignmentExpression	foundTrailingReturnType = false		630657	0		=			
ANR	631049	Identifier	foundTrailingReturnType		630657	0					
ANR	631050	Identifier	false		630657	1					
ANR	631051	ExpressionStatement	foundCastOperator = false	226:1:6822:6847	630657	123	True				
ANR	631052	AssignmentExpression	foundCastOperator = false		630657	0		=			
ANR	631053	Identifier	foundCastOperator		630657	0					
ANR	631054	Identifier	false		630657	1					
ANR	631055	ExpressionStatement	foundQuestionMark = false	227:1:6850:6875	630657	124	True				
ANR	631056	AssignmentExpression	foundQuestionMark = false		630657	0		=			
ANR	631057	Identifier	foundQuestionMark		630657	0					
ANR	631058	Identifier	false		630657	1					
ANR	631059	ExpressionStatement	isInLineBreak = false	228:1:6878:6899	630657	125	True				
ANR	631060	AssignmentExpression	isInLineBreak = false		630657	0		=			
ANR	631061	Identifier	isInLineBreak		630657	0					
ANR	631062	Identifier	false		630657	1					
ANR	631063	ExpressionStatement	endOfAsmReached = false	229:1:6902:6925	630657	126	True				
ANR	631064	AssignmentExpression	endOfAsmReached = false		630657	0		=			
ANR	631065	Identifier	endOfAsmReached		630657	0					
ANR	631066	Identifier	false		630657	1					
ANR	631067	ExpressionStatement	endOfCodeReached = false	230:1:6928:6952	630657	127	True				
ANR	631068	AssignmentExpression	endOfCodeReached = false		630657	0		=			
ANR	631069	Identifier	endOfCodeReached		630657	0					
ANR	631070	Identifier	false		630657	1					
ANR	631071	ExpressionStatement	isFormattingModeOff = false	231:1:6955:6982	630657	128	True				
ANR	631072	AssignmentExpression	isFormattingModeOff = false		630657	0		=			
ANR	631073	Identifier	isFormattingModeOff		630657	0					
ANR	631074	Identifier	false		630657	1					
ANR	631075	ExpressionStatement	isInEnum = false	232:1:6985:7001	630657	129	True				
ANR	631076	AssignmentExpression	isInEnum = false		630657	0		=			
ANR	631077	Identifier	isInEnum		630657	0					
ANR	631078	Identifier	false		630657	1					
ANR	631079	ExpressionStatement	isInExecSQL = false	233:1:7004:7023	630657	130	True				
ANR	631080	AssignmentExpression	isInExecSQL = false		630657	0		=			
ANR	631081	Identifier	isInExecSQL		630657	0					
ANR	631082	Identifier	false		630657	1					
ANR	631083	ExpressionStatement	isInAsm = false	234:1:7026:7041	630657	131	True				
ANR	631084	AssignmentExpression	isInAsm = false		630657	0		=			
ANR	631085	Identifier	isInAsm		630657	0					
ANR	631086	Identifier	false		630657	1					
ANR	631087	ExpressionStatement	isInAsmOneLine = false	235:1:7044:7066	630657	132	True				
ANR	631088	AssignmentExpression	isInAsmOneLine = false		630657	0		=			
ANR	631089	Identifier	isInAsmOneLine		630657	0					
ANR	631090	Identifier	false		630657	1					
ANR	631091	ExpressionStatement	isInAsmBlock = false	236:1:7069:7089	630657	133	True				
ANR	631092	AssignmentExpression	isInAsmBlock = false		630657	0		=			
ANR	631093	Identifier	isInAsmBlock		630657	0					
ANR	631094	Identifier	false		630657	1					
ANR	631095	ExpressionStatement	isLineReady = false	237:1:7092:7111	630657	134	True				
ANR	631096	AssignmentExpression	isLineReady = false		630657	0		=			
ANR	631097	Identifier	isLineReady		630657	0					
ANR	631098	Identifier	false		630657	1					
ANR	631099	ExpressionStatement	elseHeaderFollowsComments = false	238:1:7114:7147	630657	135	True				
ANR	631100	AssignmentExpression	elseHeaderFollowsComments = false		630657	0		=			
ANR	631101	Identifier	elseHeaderFollowsComments		630657	0					
ANR	631102	Identifier	false		630657	1					
ANR	631103	ExpressionStatement	caseHeaderFollowsComments = false	239:1:7150:7183	630657	136	True				
ANR	631104	AssignmentExpression	caseHeaderFollowsComments = false		630657	0		=			
ANR	631105	Identifier	caseHeaderFollowsComments		630657	0					
ANR	631106	Identifier	false		630657	1					
ANR	631107	ExpressionStatement	isPreviousBraceBlockRelated = false	240:1:7186:7221	630657	137	True				
ANR	631108	AssignmentExpression	isPreviousBraceBlockRelated = false		630657	0		=			
ANR	631109	Identifier	isPreviousBraceBlockRelated		630657	0					
ANR	631110	Identifier	false		630657	1					
ANR	631111	ExpressionStatement	isInPotentialCalculation = false	241:1:7224:7256	630657	138	True				
ANR	631112	AssignmentExpression	isInPotentialCalculation = false		630657	0		=			
ANR	631113	Identifier	isInPotentialCalculation		630657	0					
ANR	631114	Identifier	false		630657	1					
ANR	631115	ExpressionStatement	needHeaderOpeningBrace = false	242:1:7259:7289	630657	139	True				
ANR	631116	AssignmentExpression	needHeaderOpeningBrace = false		630657	0		=			
ANR	631117	Identifier	needHeaderOpeningBrace		630657	0					
ANR	631118	Identifier	false		630657	1					
ANR	631119	ExpressionStatement	shouldBreakLineAtNextChar = false	243:1:7292:7325	630657	140	True				
ANR	631120	AssignmentExpression	shouldBreakLineAtNextChar = false		630657	0		=			
ANR	631121	Identifier	shouldBreakLineAtNextChar		630657	0					
ANR	631122	Identifier	false		630657	1					
ANR	631123	ExpressionStatement	shouldKeepLineUnbroken = false	244:1:7328:7358	630657	141	True				
ANR	631124	AssignmentExpression	shouldKeepLineUnbroken = false		630657	0		=			
ANR	631125	Identifier	shouldKeepLineUnbroken		630657	0					
ANR	631126	Identifier	false		630657	1					
ANR	631127	ExpressionStatement	shouldReparseCurrentChar = false	245:1:7361:7393	630657	142	True				
ANR	631128	AssignmentExpression	shouldReparseCurrentChar = false		630657	0		=			
ANR	631129	Identifier	shouldReparseCurrentChar		630657	0					
ANR	631130	Identifier	false		630657	1					
ANR	631131	ExpressionStatement	passedSemicolon = false	246:1:7396:7419	630657	143	True				
ANR	631132	AssignmentExpression	passedSemicolon = false		630657	0		=			
ANR	631133	Identifier	passedSemicolon		630657	0					
ANR	631134	Identifier	false		630657	1					
ANR	631135	ExpressionStatement	passedColon = false	247:1:7422:7441	630657	144	True				
ANR	631136	AssignmentExpression	passedColon = false		630657	0		=			
ANR	631137	Identifier	passedColon		630657	0					
ANR	631138	Identifier	false		630657	1					
ANR	631139	ExpressionStatement	isImmediatelyPostNonInStmt = false	248:1:7444:7478	630657	145	True				
ANR	631140	AssignmentExpression	isImmediatelyPostNonInStmt = false		630657	0		=			
ANR	631141	Identifier	isImmediatelyPostNonInStmt		630657	0					
ANR	631142	Identifier	false		630657	1					
ANR	631143	ExpressionStatement	isCharImmediatelyPostNonInStmt = false	249:1:7481:7519	630657	146	True				
ANR	631144	AssignmentExpression	isCharImmediatelyPostNonInStmt = false		630657	0		=			
ANR	631145	Identifier	isCharImmediatelyPostNonInStmt		630657	0					
ANR	631146	Identifier	false		630657	1					
ANR	631147	ExpressionStatement	isInTemplate = false	250:1:7522:7542	630657	147	True				
ANR	631148	AssignmentExpression	isInTemplate = false		630657	0		=			
ANR	631149	Identifier	isInTemplate		630657	0					
ANR	631150	Identifier	false		630657	1					
ANR	631151	ExpressionStatement	isImmediatelyPostComment = false	251:1:7545:7577	630657	148	True				
ANR	631152	AssignmentExpression	isImmediatelyPostComment = false		630657	0		=			
ANR	631153	Identifier	isImmediatelyPostComment		630657	0					
ANR	631154	Identifier	false		630657	1					
ANR	631155	ExpressionStatement	isImmediatelyPostLineComment = false	252:1:7580:7616	630657	149	True				
ANR	631156	AssignmentExpression	isImmediatelyPostLineComment = false		630657	0		=			
ANR	631157	Identifier	isImmediatelyPostLineComment		630657	0					
ANR	631158	Identifier	false		630657	1					
ANR	631159	ExpressionStatement	isImmediatelyPostEmptyBlock = false	253:1:7619:7654	630657	150	True				
ANR	631160	AssignmentExpression	isImmediatelyPostEmptyBlock = false		630657	0		=			
ANR	631161	Identifier	isImmediatelyPostEmptyBlock		630657	0					
ANR	631162	Identifier	false		630657	1					
ANR	631163	ExpressionStatement	isImmediatelyPostObjCMethodPrefix = false	254:1:7657:7698	630657	151	True				
ANR	631164	AssignmentExpression	isImmediatelyPostObjCMethodPrefix = false		630657	0		=			
ANR	631165	Identifier	isImmediatelyPostObjCMethodPrefix		630657	0					
ANR	631166	Identifier	false		630657	1					
ANR	631167	ExpressionStatement	isImmediatelyPostPreprocessor = false	255:1:7701:7738	630657	152	True				
ANR	631168	AssignmentExpression	isImmediatelyPostPreprocessor = false		630657	0		=			
ANR	631169	Identifier	isImmediatelyPostPreprocessor		630657	0					
ANR	631170	Identifier	false		630657	1					
ANR	631171	ExpressionStatement	isImmediatelyPostReturn = false	256:1:7741:7772	630657	153	True				
ANR	631172	AssignmentExpression	isImmediatelyPostReturn = false		630657	0		=			
ANR	631173	Identifier	isImmediatelyPostReturn		630657	0					
ANR	631174	Identifier	false		630657	1					
ANR	631175	ExpressionStatement	isImmediatelyPostThrow = false	257:1:7775:7805	630657	154	True				
ANR	631176	AssignmentExpression	isImmediatelyPostThrow = false		630657	0		=			
ANR	631177	Identifier	isImmediatelyPostThrow		630657	0					
ANR	631178	Identifier	false		630657	1					
ANR	631179	ExpressionStatement	isImmediatelyPostNewDelete = false	258:1:7808:7842	630657	155	True				
ANR	631180	AssignmentExpression	isImmediatelyPostNewDelete = false		630657	0		=			
ANR	631181	Identifier	isImmediatelyPostNewDelete		630657	0					
ANR	631182	Identifier	false		630657	1					
ANR	631183	ExpressionStatement	isImmediatelyPostOperator = false	259:1:7845:7878	630657	156	True				
ANR	631184	AssignmentExpression	isImmediatelyPostOperator = false		630657	0		=			
ANR	631185	Identifier	isImmediatelyPostOperator		630657	0					
ANR	631186	Identifier	false		630657	1					
ANR	631187	ExpressionStatement	isImmediatelyPostTemplate = false	260:1:7881:7914	630657	157	True				
ANR	631188	AssignmentExpression	isImmediatelyPostTemplate = false		630657	0		=			
ANR	631189	Identifier	isImmediatelyPostTemplate		630657	0					
ANR	631190	Identifier	false		630657	1					
ANR	631191	ExpressionStatement	isImmediatelyPostPointerOrReference = false	261:1:7917:7960	630657	158	True				
ANR	631192	AssignmentExpression	isImmediatelyPostPointerOrReference = false		630657	0		=			
ANR	631193	Identifier	isImmediatelyPostPointerOrReference		630657	0					
ANR	631194	Identifier	false		630657	1					
ANR	631195	ExpressionStatement	isCharImmediatelyPostReturn = false	262:1:7963:7998	630657	159	True				
ANR	631196	AssignmentExpression	isCharImmediatelyPostReturn = false		630657	0		=			
ANR	631197	Identifier	isCharImmediatelyPostReturn		630657	0					
ANR	631198	Identifier	false		630657	1					
ANR	631199	ExpressionStatement	isCharImmediatelyPostThrow = false	263:1:8001:8035	630657	160	True				
ANR	631200	AssignmentExpression	isCharImmediatelyPostThrow = false		630657	0		=			
ANR	631201	Identifier	isCharImmediatelyPostThrow		630657	0					
ANR	631202	Identifier	false		630657	1					
ANR	631203	ExpressionStatement	isCharImmediatelyPostNewDelete = false	264:1:8038:8076	630657	161	True				
ANR	631204	AssignmentExpression	isCharImmediatelyPostNewDelete = false		630657	0		=			
ANR	631205	Identifier	isCharImmediatelyPostNewDelete		630657	0					
ANR	631206	Identifier	false		630657	1					
ANR	631207	ExpressionStatement	isCharImmediatelyPostOperator = false	265:1:8079:8116	630657	162	True				
ANR	631208	AssignmentExpression	isCharImmediatelyPostOperator = false		630657	0		=			
ANR	631209	Identifier	isCharImmediatelyPostOperator		630657	0					
ANR	631210	Identifier	false		630657	1					
ANR	631211	ExpressionStatement	isCharImmediatelyPostComment = false	266:1:8119:8155	630657	163	True				
ANR	631212	AssignmentExpression	isCharImmediatelyPostComment = false		630657	0		=			
ANR	631213	Identifier	isCharImmediatelyPostComment		630657	0					
ANR	631214	Identifier	false		630657	1					
ANR	631215	ExpressionStatement	isPreviousCharPostComment = false	267:1:8158:8191	630657	164	True				
ANR	631216	AssignmentExpression	isPreviousCharPostComment = false		630657	0		=			
ANR	631217	Identifier	isPreviousCharPostComment		630657	0					
ANR	631218	Identifier	false		630657	1					
ANR	631219	ExpressionStatement	isCharImmediatelyPostLineComment = false	268:1:8194:8234	630657	165	True				
ANR	631220	AssignmentExpression	isCharImmediatelyPostLineComment = false		630657	0		=			
ANR	631221	Identifier	isCharImmediatelyPostLineComment		630657	0					
ANR	631222	Identifier	false		630657	1					
ANR	631223	ExpressionStatement	isCharImmediatelyPostOpenBlock = false	269:1:8237:8275	630657	166	True				
ANR	631224	AssignmentExpression	isCharImmediatelyPostOpenBlock = false		630657	0		=			
ANR	631225	Identifier	isCharImmediatelyPostOpenBlock		630657	0					
ANR	631226	Identifier	false		630657	1					
ANR	631227	ExpressionStatement	isCharImmediatelyPostCloseBlock = false	270:1:8278:8317	630657	167	True				
ANR	631228	AssignmentExpression	isCharImmediatelyPostCloseBlock = false		630657	0		=			
ANR	631229	Identifier	isCharImmediatelyPostCloseBlock		630657	0					
ANR	631230	Identifier	false		630657	1					
ANR	631231	ExpressionStatement	isCharImmediatelyPostTemplate = false	271:1:8320:8357	630657	168	True				
ANR	631232	AssignmentExpression	isCharImmediatelyPostTemplate = false		630657	0		=			
ANR	631233	Identifier	isCharImmediatelyPostTemplate		630657	0					
ANR	631234	Identifier	false		630657	1					
ANR	631235	ExpressionStatement	isCharImmediatelyPostPointerOrReference = false	272:1:8360:8407	630657	169	True				
ANR	631236	AssignmentExpression	isCharImmediatelyPostPointerOrReference = false		630657	0		=			
ANR	631237	Identifier	isCharImmediatelyPostPointerOrReference		630657	0					
ANR	631238	Identifier	false		630657	1					
ANR	631239	ExpressionStatement	isInObjCInterface = false	273:1:8410:8435	630657	170	True				
ANR	631240	AssignmentExpression	isInObjCInterface = false		630657	0		=			
ANR	631241	Identifier	isInObjCInterface		630657	0					
ANR	631242	Identifier	false		630657	1					
ANR	631243	ExpressionStatement	isInObjCMethodDefinition = false	274:1:8438:8470	630657	171	True				
ANR	631244	AssignmentExpression	isInObjCMethodDefinition = false		630657	0		=			
ANR	631245	Identifier	isInObjCMethodDefinition		630657	0					
ANR	631246	Identifier	false		630657	1					
ANR	631247	ExpressionStatement	isInObjCReturnType = false	275:1:8473:8499	630657	172	True				
ANR	631248	AssignmentExpression	isInObjCReturnType = false		630657	0		=			
ANR	631249	Identifier	isInObjCReturnType		630657	0					
ANR	631250	Identifier	false		630657	1					
ANR	631251	ExpressionStatement	isInObjCSelector = false	276:1:8502:8526	630657	173	True				
ANR	631252	AssignmentExpression	isInObjCSelector = false		630657	0		=			
ANR	631253	Identifier	isInObjCSelector		630657	0					
ANR	631254	Identifier	false		630657	1					
ANR	631255	ExpressionStatement	breakCurrentOneLineBlock = false	277:1:8529:8561	630657	174	True				
ANR	631256	AssignmentExpression	breakCurrentOneLineBlock = false		630657	0		=			
ANR	631257	Identifier	breakCurrentOneLineBlock		630657	0					
ANR	631258	Identifier	false		630657	1					
ANR	631259	ExpressionStatement	shouldRemoveNextClosingBrace = false	278:1:8564:8600	630657	175	True				
ANR	631260	AssignmentExpression	shouldRemoveNextClosingBrace = false		630657	0		=			
ANR	631261	Identifier	shouldRemoveNextClosingBrace		630657	0					
ANR	631262	Identifier	false		630657	1					
ANR	631263	ExpressionStatement	isInBraceRunIn = false	279:1:8603:8625	630657	176	True				
ANR	631264	AssignmentExpression	isInBraceRunIn = false		630657	0		=			
ANR	631265	Identifier	isInBraceRunIn		630657	0					
ANR	631266	Identifier	false		630657	1					
ANR	631267	ExpressionStatement	currentLineBeginsWithBrace = false	280:1:8628:8662	630657	177	True				
ANR	631268	AssignmentExpression	currentLineBeginsWithBrace = false		630657	0		=			
ANR	631269	Identifier	currentLineBeginsWithBrace		630657	0					
ANR	631270	Identifier	false		630657	1					
ANR	631271	ExpressionStatement	isPrependPostBlockEmptyLineRequested = false	281:1:8665:8709	630657	178	True				
ANR	631272	AssignmentExpression	isPrependPostBlockEmptyLineRequested = false		630657	0		=			
ANR	631273	Identifier	isPrependPostBlockEmptyLineRequested		630657	0					
ANR	631274	Identifier	false		630657	1					
ANR	631275	ExpressionStatement	isAppendPostBlockEmptyLineRequested = false	282:1:8712:8755	630657	179	True				
ANR	631276	AssignmentExpression	isAppendPostBlockEmptyLineRequested = false		630657	0		=			
ANR	631277	Identifier	isAppendPostBlockEmptyLineRequested		630657	0					
ANR	631278	Identifier	false		630657	1					
ANR	631279	ExpressionStatement	isIndentableProprocessor = false	283:1:8758:8790	630657	180	True				
ANR	631280	AssignmentExpression	isIndentableProprocessor = false		630657	0		=			
ANR	631281	Identifier	isIndentableProprocessor		630657	0					
ANR	631282	Identifier	false		630657	1					
ANR	631283	ExpressionStatement	isIndentableProprocessorBlock = false	284:1:8793:8830	630657	181	True				
ANR	631284	AssignmentExpression	isIndentableProprocessorBlock = false		630657	0		=			
ANR	631285	Identifier	isIndentableProprocessorBlock		630657	0					
ANR	631286	Identifier	false		630657	1					
ANR	631287	ExpressionStatement	prependEmptyLine = false	285:1:8833:8857	630657	182	True				
ANR	631288	AssignmentExpression	prependEmptyLine = false		630657	0		=			
ANR	631289	Identifier	prependEmptyLine		630657	0					
ANR	631290	Identifier	false		630657	1					
ANR	631291	ExpressionStatement	appendOpeningBrace = false	286:1:8860:8886	630657	183	True				
ANR	631292	AssignmentExpression	appendOpeningBrace = false		630657	0		=			
ANR	631293	Identifier	appendOpeningBrace		630657	0					
ANR	631294	Identifier	false		630657	1					
ANR	631295	ExpressionStatement	foundClosingHeader = false	287:1:8889:8915	630657	184	True				
ANR	631296	AssignmentExpression	foundClosingHeader = false		630657	0		=			
ANR	631297	Identifier	foundClosingHeader		630657	0					
ANR	631298	Identifier	false		630657	1					
ANR	631299	ExpressionStatement	isImmediatelyPostHeader = false	288:1:8918:8949	630657	185	True				
ANR	631300	AssignmentExpression	isImmediatelyPostHeader = false		630657	0		=			
ANR	631301	Identifier	isImmediatelyPostHeader		630657	0					
ANR	631302	Identifier	false		630657	1					
ANR	631303	ExpressionStatement	isInHeader = false	289:1:8952:8970	630657	186	True				
ANR	631304	AssignmentExpression	isInHeader = false		630657	0		=			
ANR	631305	Identifier	isInHeader		630657	0					
ANR	631306	Identifier	false		630657	1					
ANR	631307	ExpressionStatement	isInCase = false	290:1:8973:8989	630657	187	True				
ANR	631308	AssignmentExpression	isInCase = false		630657	0		=			
ANR	631309	Identifier	isInCase		630657	0					
ANR	631310	Identifier	false		630657	1					
ANR	631311	ExpressionStatement	isFirstPreprocConditional = false	291:1:8992:9025	630657	188	True				
ANR	631312	AssignmentExpression	isFirstPreprocConditional = false		630657	0		=			
ANR	631313	Identifier	isFirstPreprocConditional		630657	0					
ANR	631314	Identifier	false		630657	1					
ANR	631315	ExpressionStatement	processedFirstConditional = false	292:1:9028:9061	630657	189	True				
ANR	631316	AssignmentExpression	processedFirstConditional = false		630657	0		=			
ANR	631317	Identifier	processedFirstConditional		630657	0					
ANR	631318	Identifier	false		630657	1					
ANR	631319	ExpressionStatement	isJavaStaticConstructor = false	293:1:9064:9095	630657	190	True				
ANR	631320	AssignmentExpression	isJavaStaticConstructor = false		630657	0		=			
ANR	631321	Identifier	isJavaStaticConstructor		630657	0					
ANR	631322	Identifier	false		630657	1					
ANR	631323	ReturnType	void		630657	1					
ANR	631324	Identifier	ASFormatter :: init		630657	2					
ANR	631325	ParameterList	ASSourceIterator * si		630657	3					
ANR	631326	Parameter	ASSourceIterator * si	139:23:4213:4232	630657	0	True				
ANR	631327	ParameterType	ASSourceIterator *		630657	0					
ANR	631328	Identifier	si		630657	1					
ANR	631329	CFGEntryNode	ENTRY		630657		True				
ANR	631330	CFGExitNode	EXIT		630657		True				
ANR	631331	Symbol	foundClassHeader		630657						
ANR	631332	Symbol	isInVerbatimQuote		630657						
ANR	631333	Symbol	isPreviousBraceBlockRelated		630657						
ANR	631334	Symbol	lineIsLineCommentOnly		630657						
ANR	631335	Symbol	lineIsEmpty		630657						
ANR	631336	Symbol	preprocBraceTypeStackSize		630657						
ANR	631337	Symbol	isCharImmediatelyPostOperator		630657						
ANR	631338	Symbol	isInEnum		630657						
ANR	631339	Symbol	isCharImmediatelyPostLineComment		630657						
ANR	631340	Symbol	getPreprocDefineIndent		630657						
ANR	631341	Symbol	isFormattingModeOff		630657						
ANR	631342	Symbol	isJavaStaticConstructor		630657						
ANR	631343	Symbol	needHeaderOpeningBrace		630657						
ANR	631344	Symbol	spacePadNum		630657						
ANR	631345	Symbol	isInLineBreak		630657						
ANR	631346	Symbol	isInObjCReturnType		630657						
ANR	631347	Symbol	previousCommandChar		630657						
ANR	631348	Symbol	isIndentableProprocessor		630657						
ANR	631349	Symbol	isInLineComment		630657						
ANR	631350	Symbol	isInExecSQL		630657						
ANR	631351	Symbol	breakCurrentOneLineBlock		630657						
ANR	631352	Symbol	shouldReparseCurrentChar		630657						
ANR	631353	Symbol	runInIndentChars		630657						
ANR	631354	Symbol	preprocBlockEnd		630657						
ANR	631355	Symbol	isInCase		630657						
ANR	631356	Symbol	parenStack		630657						
ANR	631357	Symbol	isImmediatelyPostLineComment		630657						
ANR	631358	Symbol	isInObjCSelector		630657						
ANR	631359	Symbol	getIndentString		630657						
ANR	631360	Symbol	enhancer		630657						
ANR	631361	Symbol	foundQuestionMark		630657						
ANR	631362	Symbol	isCharImmediatelyPostComment		630657						
ANR	631363	Symbol	caseHeaderFollowsComments		630657						
ANR	631364	Symbol	getFileType		630657						
ANR	631365	Symbol	isImmediatelyPostThrow		630657						
ANR	631366	Symbol	isCharImmediatelyPostOpenBlock		630657						
ANR	631367	Symbol	si		630657						
ANR	631368	Symbol	isCharImmediatelyPostThrow		630657						
ANR	631369	Symbol	foundTrailingReturnType		630657						
ANR	631370	Symbol	charNum		630657						
ANR	631371	Symbol	passedSemicolon		630657						
ANR	631372	Symbol	getEmptyLineFill		630657						
ANR	631373	Symbol	verbatimDelimiter		630657						
ANR	631374	Symbol	tabIncrementIn		630657						
ANR	631375	Symbol	isInObjCMethodDefinition		630657						
ANR	631376	Symbol	quoteChar		630657						
ANR	631377	Symbol	shouldBreakLineAtNextChar		630657						
ANR	631378	Symbol	getIndentLength		630657						
ANR	631379	Symbol	isAppendPostBlockEmptyLineRequested		630657						
ANR	631380	Symbol	appendOpeningBrace		630657						
ANR	631381	Symbol	isInObjCInterface		630657						
ANR	631382	Symbol	lineEndsInCommentOnly		630657						
ANR	631383	Symbol	formattedLine		630657						
ANR	631384	Symbol	isImmediatelyPostObjCMethodPrefix		630657						
ANR	631385	Symbol	getTabLength		630657						
ANR	631386	Symbol	currentHeader		630657						
ANR	631387	Symbol	elseHeaderFollowsComments		630657						
ANR	631388	Symbol	isLineReady		630657						
ANR	631389	Symbol	isImmediatelyPostEmptyBlock		630657						
ANR	631390	Symbol	foundPreCommandHeader		630657						
ANR	631391	Symbol	shouldRemoveNextClosingBrace		630657						
ANR	631392	Symbol	squareBracketCount		630657						
ANR	631393	Symbol	isInBraceRunIn		630657						
ANR	631394	Symbol	checksumOut		630657						
ANR	631395	Symbol	shouldKeepLineUnbroken		630657						
ANR	631396	Symbol	isImmediatelyPostPointerOrReference		630657						
ANR	631397	Symbol	currentLineFirstBraceNum		630657						
ANR	631398	Symbol	foundCastOperator		630657						
ANR	631399	Symbol	isImmediatelyPostPreprocessor		630657						
ANR	631400	Symbol	isCharImmediatelyPostTemplate		630657						
ANR	631401	Symbol	haveLineContinuationChar		630657						
ANR	631402	Symbol	isInAsmBlock		630657						
ANR	631403	Symbol	foundStructHeader		630657						
ANR	631404	Symbol	isInQuoteContinuation		630657						
ANR	631405	Symbol	isInQuote		630657						
ANR	631406	Symbol	isInTemplate		630657						
ANR	631407	Symbol	isCharImmediatelyPostCloseBlock		630657						
ANR	631408	Symbol	isPrependPostBlockEmptyLineRequested		630657						
ANR	631409	Symbol	foundClosingHeader		630657						
ANR	631410	Symbol	getCaseIndent		630657						
ANR	631411	Symbol	isVirgin		630657						
ANR	631412	Symbol	noTrimCommentContinuation		630657						
ANR	631413	Symbol	isHeaderInMultiStatementLine		630657						
ANR	631414	Symbol	foundInterfaceHeader		630657						
ANR	631415	Symbol	isInComment		630657						
ANR	631416	Symbol	sourceIterator		630657						
ANR	631417	Symbol	formattedLineCommentNum		630657						
ANR	631418	Symbol	currentChar		630657						
ANR	631419	Symbol	currentLineBeginsWithBrace		630657						
ANR	631420	Symbol	isImmediatelyPostCommentOnly		630657						
ANR	631421	Symbol	endOfCodeReached		630657						
ANR	631422	Symbol	getNamespaceIndent		630657						
ANR	631423	Symbol	templateDepth		630657						
ANR	631424	Symbol	getForceTabIndentation		630657						
ANR	631425	Symbol	isImmediatelyPostHeader		630657						
ANR	631426	Symbol	isInPreprocessorBeautify		630657						
ANR	631427	Symbol	isInClassInitializer		630657						
ANR	631428	Symbol	nextLineSpacePadNum		630657						
ANR	631429	Symbol	previousChar		630657						
ANR	631430	Symbol	isNonParenHeader		630657						
ANR	631431	Symbol	lineIsCommentOnly		630657						
ANR	631432	Symbol	isCharImmediatelyPostReturn		630657						
ANR	631433	Symbol	isInAsmOneLine		630657						
ANR	631434	Symbol	true		630657						
ANR	631435	Symbol	nullptr		630657						
ANR	631436	Symbol	isImmediatelyPostNonInStmt		630657						
ANR	631437	Symbol	previousNonWSChar		630657						
ANR	631438	Symbol	braceTypeStack		630657						
ANR	631439	Symbol	previousReadyFormattedLineLength		630657						
ANR	631440	Symbol	prependEmptyLine		630657						
ANR	631441	Symbol	isInHeader		630657						
ANR	631442	Symbol	foundPreCommandMacro		630657						
ANR	631443	Symbol	string :: npos		630657						
ANR	631444	Symbol	isSpecialChar		630657						
ANR	631445	Symbol	isImmediatelyPostEmptyLine		630657						
ANR	631446	Symbol	isImmediatelyPostComment		630657						
ANR	631447	Symbol	processedFirstConditional		630657						
ANR	631448	Symbol	isImmediatelyPostOperator		630657						
ANR	631449	Symbol	isInCommentStartLine		630657						
ANR	631450	Symbol	endOfAsmReached		630657						
ANR	631451	Symbol	isInPreprocessor		630657						
ANR	631452	Symbol	isCharImmediatelyPostNonInStmt		630657						
ANR	631453	Symbol	foundPreDefinitionHeader		630657						
ANR	631454	Symbol	isCharImmediatelyPostNewDelete		630657						
ANR	631455	Symbol	objCColonAlign		630657						
ANR	631456	Symbol	currentLine		630657						
ANR	631457	Symbol	isImmediatelyPostReturn		630657						
ANR	631458	Symbol	isImmediatelyPostNewDelete		630657						
ANR	631459	Symbol	isPreviousCharPostComment		630657						
ANR	631460	Symbol	readyFormattedLine		630657						
ANR	631461	Symbol	isIndentableProprocessorBlock		630657						
ANR	631462	Symbol	indentableMacros		630657						
ANR	631463	Symbol	doesLineStartComment		630657						
ANR	631464	Symbol	false		630657						
ANR	631465	Symbol	passedColon		630657						
ANR	631466	Symbol	isInAsm		630657						
ANR	631467	Symbol	isInPotentialCalculation		630657						
ANR	631468	Symbol	shouldIndentPreprocBlock		630657						
ANR	631469	Symbol	leadingSpaces		630657						
ANR	631470	Symbol	isImmediatelyPostTemplate		630657						
ANR	631471	Symbol	isCharImmediatelyPostPointerOrReference		630657						
ANR	631472	Symbol	previousBraceType		630657						
ANR	631473	Symbol	isInVirginLine		630657						
ANR	631474	Symbol	foundNamespaceHeader		630657						
ANR	631475	Symbol	isFirstPreprocConditional		630657						
ANR	631476	Symbol	NULL_TYPE		630657						
ANR	631477	Symbol	checksumIn		630657						
ANR	631478	Function	ASFormatter :: buildLanguageVectors	300:0:9190:10078							
ANR	631479	FunctionDef	ASFormatter :: buildLanguageVectors ()		631478	0					
ANR	631480	CompoundStatement		301:0:9231:10078	631478	0					
ANR	631481	IfStatement	if ( getFileType ( ) == formatterFileType )		631478	0					
ANR	631482	Condition	getFileType ( ) == formatterFileType	302:5:9238:9271	631478	0	True				
ANR	631483	EqualityExpression	getFileType ( ) == formatterFileType		631478	0		==			
ANR	631484	CallExpression	getFileType ( )		631478	0					
ANR	631485	Callee	getFileType		631478	0					
ANR	631486	Identifier	getFileType		631478	0					
ANR	631487	ArgumentList			631478	1					
ANR	631488	Identifier	formatterFileType		631478	1					
ANR	631489	ReturnStatement	return ;	303:2:9309:9315	631478	1	True				
ANR	631490	ExpressionStatement	formatterFileType = getFileType ( )	305:1:9319:9352	631478	1	True				
ANR	631491	AssignmentExpression	formatterFileType = getFileType ( )		631478	0		=			
ANR	631492	Identifier	formatterFileType		631478	0					
ANR	631493	CallExpression	getFileType ( )		631478	1					
ANR	631494	Callee	getFileType		631478	0					
ANR	631495	Identifier	getFileType		631478	0					
ANR	631496	ArgumentList			631478	1					
ANR	631497	ExpressionStatement	headers -> clear ( )	307:1:9356:9372	631478	2	True				
ANR	631498	CallExpression	headers -> clear ( )		631478	0					
ANR	631499	Callee	headers -> clear		631478	0					
ANR	631500	PtrMemberAccess	headers -> clear		631478	0					
ANR	631501	Identifier	headers		631478	0					
ANR	631502	Identifier	clear		631478	1					
ANR	631503	ArgumentList			631478	1					
ANR	631504	ExpressionStatement	nonParenHeaders -> clear ( )	308:1:9375:9399	631478	3	True				
ANR	631505	CallExpression	nonParenHeaders -> clear ( )		631478	0					
ANR	631506	Callee	nonParenHeaders -> clear		631478	0					
ANR	631507	PtrMemberAccess	nonParenHeaders -> clear		631478	0					
ANR	631508	Identifier	nonParenHeaders		631478	0					
ANR	631509	Identifier	clear		631478	1					
ANR	631510	ArgumentList			631478	1					
ANR	631511	ExpressionStatement	preDefinitionHeaders -> clear ( )	309:1:9402:9431	631478	4	True				
ANR	631512	CallExpression	preDefinitionHeaders -> clear ( )		631478	0					
ANR	631513	Callee	preDefinitionHeaders -> clear		631478	0					
ANR	631514	PtrMemberAccess	preDefinitionHeaders -> clear		631478	0					
ANR	631515	Identifier	preDefinitionHeaders		631478	0					
ANR	631516	Identifier	clear		631478	1					
ANR	631517	ArgumentList			631478	1					
ANR	631518	ExpressionStatement	preCommandHeaders -> clear ( )	310:1:9434:9460	631478	5	True				
ANR	631519	CallExpression	preCommandHeaders -> clear ( )		631478	0					
ANR	631520	Callee	preCommandHeaders -> clear		631478	0					
ANR	631521	PtrMemberAccess	preCommandHeaders -> clear		631478	0					
ANR	631522	Identifier	preCommandHeaders		631478	0					
ANR	631523	Identifier	clear		631478	1					
ANR	631524	ArgumentList			631478	1					
ANR	631525	ExpressionStatement	operators -> clear ( )	311:1:9463:9481	631478	6	True				
ANR	631526	CallExpression	operators -> clear ( )		631478	0					
ANR	631527	Callee	operators -> clear		631478	0					
ANR	631528	PtrMemberAccess	operators -> clear		631478	0					
ANR	631529	Identifier	operators		631478	0					
ANR	631530	Identifier	clear		631478	1					
ANR	631531	ArgumentList			631478	1					
ANR	631532	ExpressionStatement	assignmentOperators -> clear ( )	312:1:9484:9512	631478	7	True				
ANR	631533	CallExpression	assignmentOperators -> clear ( )		631478	0					
ANR	631534	Callee	assignmentOperators -> clear		631478	0					
ANR	631535	PtrMemberAccess	assignmentOperators -> clear		631478	0					
ANR	631536	Identifier	assignmentOperators		631478	0					
ANR	631537	Identifier	clear		631478	1					
ANR	631538	ArgumentList			631478	1					
ANR	631539	ExpressionStatement	castOperators -> clear ( )	313:1:9515:9537	631478	8	True				
ANR	631540	CallExpression	castOperators -> clear ( )		631478	0					
ANR	631541	Callee	castOperators -> clear		631478	0					
ANR	631542	PtrMemberAccess	castOperators -> clear		631478	0					
ANR	631543	Identifier	castOperators		631478	0					
ANR	631544	Identifier	clear		631478	1					
ANR	631545	ArgumentList			631478	1					
ANR	631546	ExpressionStatement	indentableMacros -> clear ( )	314:1:9540:9565	631478	9	True				
ANR	631547	CallExpression	indentableMacros -> clear ( )		631478	0					
ANR	631548	Callee	indentableMacros -> clear		631478	0					
ANR	631549	PtrMemberAccess	indentableMacros -> clear		631478	0					
ANR	631550	Identifier	indentableMacros		631478	0					
ANR	631551	Identifier	clear		631478	1					
ANR	631552	ArgumentList			631478	1					
ANR	631553	ExpressionStatement	"ASResource :: buildHeaders ( headers , getFileType ( ) )"	316:1:9583:9631	631478	10	True				
ANR	631554	CallExpression	"ASResource :: buildHeaders ( headers , getFileType ( ) )"		631478	0					
ANR	631555	Callee	ASResource :: buildHeaders		631478	0					
ANR	631556	Identifier	ASResource :: buildHeaders		631478	0					
ANR	631557	ArgumentList	headers		631478	1					
ANR	631558	Argument	headers		631478	0					
ANR	631559	Identifier	headers		631478	0					
ANR	631560	Argument	getFileType ( )		631478	1					
ANR	631561	CallExpression	getFileType ( )		631478	0					
ANR	631562	Callee	getFileType		631478	0					
ANR	631563	Identifier	getFileType		631478	0					
ANR	631564	ArgumentList			631478	1					
ANR	631565	ExpressionStatement	"ASResource :: buildNonParenHeaders ( nonParenHeaders , getFileType ( ) )"	317:1:9634:9698	631478	11	True				
ANR	631566	CallExpression	"ASResource :: buildNonParenHeaders ( nonParenHeaders , getFileType ( ) )"		631478	0					
ANR	631567	Callee	ASResource :: buildNonParenHeaders		631478	0					
ANR	631568	Identifier	ASResource :: buildNonParenHeaders		631478	0					
ANR	631569	ArgumentList	nonParenHeaders		631478	1					
ANR	631570	Argument	nonParenHeaders		631478	0					
ANR	631571	Identifier	nonParenHeaders		631478	0					
ANR	631572	Argument	getFileType ( )		631478	1					
ANR	631573	CallExpression	getFileType ( )		631478	0					
ANR	631574	Callee	getFileType		631478	0					
ANR	631575	Identifier	getFileType		631478	0					
ANR	631576	ArgumentList			631478	1					
ANR	631577	ExpressionStatement	"ASResource :: buildPreDefinitionHeaders ( preDefinitionHeaders , getFileType ( ) )"	318:1:9701:9775	631478	12	True				
ANR	631578	CallExpression	"ASResource :: buildPreDefinitionHeaders ( preDefinitionHeaders , getFileType ( ) )"		631478	0					
ANR	631579	Callee	ASResource :: buildPreDefinitionHeaders		631478	0					
ANR	631580	Identifier	ASResource :: buildPreDefinitionHeaders		631478	0					
ANR	631581	ArgumentList	preDefinitionHeaders		631478	1					
ANR	631582	Argument	preDefinitionHeaders		631478	0					
ANR	631583	Identifier	preDefinitionHeaders		631478	0					
ANR	631584	Argument	getFileType ( )		631478	1					
ANR	631585	CallExpression	getFileType ( )		631478	0					
ANR	631586	Callee	getFileType		631478	0					
ANR	631587	Identifier	getFileType		631478	0					
ANR	631588	ArgumentList			631478	1					
ANR	631589	ExpressionStatement	"ASResource :: buildPreCommandHeaders ( preCommandHeaders , getFileType ( ) )"	319:1:9778:9846	631478	13	True				
ANR	631590	CallExpression	"ASResource :: buildPreCommandHeaders ( preCommandHeaders , getFileType ( ) )"		631478	0					
ANR	631591	Callee	ASResource :: buildPreCommandHeaders		631478	0					
ANR	631592	Identifier	ASResource :: buildPreCommandHeaders		631478	0					
ANR	631593	ArgumentList	preCommandHeaders		631478	1					
ANR	631594	Argument	preCommandHeaders		631478	0					
ANR	631595	Identifier	preCommandHeaders		631478	0					
ANR	631596	Argument	getFileType ( )		631478	1					
ANR	631597	CallExpression	getFileType ( )		631478	0					
ANR	631598	Callee	getFileType		631478	0					
ANR	631599	Identifier	getFileType		631478	0					
ANR	631600	ArgumentList			631478	1					
ANR	631601	ExpressionStatement	"ASResource :: buildOperators ( operators , getFileType ( ) )"	320:1:9849:9901	631478	14	True				
ANR	631602	CallExpression	"ASResource :: buildOperators ( operators , getFileType ( ) )"		631478	0					
ANR	631603	Callee	ASResource :: buildOperators		631478	0					
ANR	631604	Identifier	ASResource :: buildOperators		631478	0					
ANR	631605	ArgumentList	operators		631478	1					
ANR	631606	Argument	operators		631478	0					
ANR	631607	Identifier	operators		631478	0					
ANR	631608	Argument	getFileType ( )		631478	1					
ANR	631609	CallExpression	getFileType ( )		631478	0					
ANR	631610	Callee	getFileType		631478	0					
ANR	631611	Identifier	getFileType		631478	0					
ANR	631612	ArgumentList			631478	1					
ANR	631613	ExpressionStatement	ASResource :: buildAssignmentOperators ( assignmentOperators )	321:1:9904:9961	631478	15	True				
ANR	631614	CallExpression	ASResource :: buildAssignmentOperators ( assignmentOperators )		631478	0					
ANR	631615	Callee	ASResource :: buildAssignmentOperators		631478	0					
ANR	631616	Identifier	ASResource :: buildAssignmentOperators		631478	0					
ANR	631617	ArgumentList	assignmentOperators		631478	1					
ANR	631618	Argument	assignmentOperators		631478	0					
ANR	631619	Identifier	assignmentOperators		631478	0					
ANR	631620	ExpressionStatement	ASResource :: buildCastOperators ( castOperators )	322:1:9964:10009	631478	16	True				
ANR	631621	CallExpression	ASResource :: buildCastOperators ( castOperators )		631478	0					
ANR	631622	Callee	ASResource :: buildCastOperators		631478	0					
ANR	631623	Identifier	ASResource :: buildCastOperators		631478	0					
ANR	631624	ArgumentList	castOperators		631478	1					
ANR	631625	Argument	castOperators		631478	0					
ANR	631626	Identifier	castOperators		631478	0					
ANR	631627	ExpressionStatement	ASResource :: buildIndentableMacros ( indentableMacros )	323:1:10012:10063	631478	17	True				
ANR	631628	CallExpression	ASResource :: buildIndentableMacros ( indentableMacros )		631478	0					
ANR	631629	Callee	ASResource :: buildIndentableMacros		631478	0					
ANR	631630	Identifier	ASResource :: buildIndentableMacros		631478	0					
ANR	631631	ArgumentList	indentableMacros		631478	1					
ANR	631632	Argument	indentableMacros		631478	0					
ANR	631633	Identifier	indentableMacros		631478	0					
ANR	631634	ReturnType	void		631478	1					
ANR	631635	Identifier	ASFormatter :: buildLanguageVectors		631478	2					
ANR	631636	ParameterList			631478	3					
ANR	631637	CFGEntryNode	ENTRY		631478		True				
ANR	631638	CFGExitNode	EXIT		631478		True				
ANR	631639	Symbol	headers		631478						
ANR	631640	Symbol	preDefinitionHeaders		631478						
ANR	631641	Symbol	operators		631478						
ANR	631642	Symbol	assignmentOperators		631478						
ANR	631643	Symbol	nonParenHeaders		631478						
ANR	631644	Symbol	indentableMacros		631478						
ANR	631645	Symbol	preCommandHeaders		631478						
ANR	631646	Symbol	castOperators		631478						
ANR	631647	Symbol	formatterFileType		631478						
ANR	631648	Symbol	getFileType		631478						
ANR	631649	Function	ASFormatter :: fixOptionVariableConflicts	330:0:10182:13440							
ANR	631650	FunctionDef	ASFormatter :: fixOptionVariableConflicts ()		631649	0					
ANR	631651	CompoundStatement		331:0:10229:13440	631649	0					
ANR	631652	IfStatement	if ( formattingStyle == STYLE_ALLMAN )		631649	0					
ANR	631653	Condition	formattingStyle == STYLE_ALLMAN	332:5:10236:10266	631649	0	True				
ANR	631654	EqualityExpression	formattingStyle == STYLE_ALLMAN		631649	0		==			
ANR	631655	Identifier	formattingStyle		631649	0					
ANR	631656	Identifier	STYLE_ALLMAN		631649	1					
ANR	631657	CompoundStatement		3:1:40:40	631649	1					
ANR	631658	ExpressionStatement	setBraceFormatMode ( BREAK_MODE )	334:2:10274:10304	631649	0	True				
ANR	631659	CallExpression	setBraceFormatMode ( BREAK_MODE )		631649	0					
ANR	631660	Callee	setBraceFormatMode		631649	0					
ANR	631661	Identifier	setBraceFormatMode		631649	0					
ANR	631662	ArgumentList	BREAK_MODE		631649	1					
ANR	631663	Argument	BREAK_MODE		631649	0					
ANR	631664	Identifier	BREAK_MODE		631649	0					
ANR	631665	ElseStatement	else		631649	0					
ANR	631666	IfStatement	if ( formattingStyle == STYLE_JAVA )		631649	0					
ANR	631667	Condition	formattingStyle == STYLE_JAVA	336:10:10319:10347	631649	0	True				
ANR	631668	EqualityExpression	formattingStyle == STYLE_JAVA		631649	0		==			
ANR	631669	Identifier	formattingStyle		631649	0					
ANR	631670	Identifier	STYLE_JAVA		631649	1					
ANR	631671	CompoundStatement		7:1:121:121	631649	1					
ANR	631672	ExpressionStatement	setBraceFormatMode ( ATTACH_MODE )	338:2:10355:10386	631649	0	True				
ANR	631673	CallExpression	setBraceFormatMode ( ATTACH_MODE )		631649	0					
ANR	631674	Callee	setBraceFormatMode		631649	0					
ANR	631675	Identifier	setBraceFormatMode		631649	0					
ANR	631676	ArgumentList	ATTACH_MODE		631649	1					
ANR	631677	Argument	ATTACH_MODE		631649	0					
ANR	631678	Identifier	ATTACH_MODE		631649	0					
ANR	631679	ElseStatement	else		631649	0					
ANR	631680	IfStatement	if ( formattingStyle == STYLE_KR )		631649	0					
ANR	631681	Condition	formattingStyle == STYLE_KR	340:10:10401:10427	631649	0	True				
ANR	631682	EqualityExpression	formattingStyle == STYLE_KR		631649	0		==			
ANR	631683	Identifier	formattingStyle		631649	0					
ANR	631684	Identifier	STYLE_KR		631649	1					
ANR	631685	CompoundStatement		11:1:201:201	631649	1					
ANR	631686	ExpressionStatement	setBraceFormatMode ( LINUX_MODE )	342:2:10435:10465	631649	0	True				
ANR	631687	CallExpression	setBraceFormatMode ( LINUX_MODE )		631649	0					
ANR	631688	Callee	setBraceFormatMode		631649	0					
ANR	631689	Identifier	setBraceFormatMode		631649	0					
ANR	631690	ArgumentList	LINUX_MODE		631649	1					
ANR	631691	Argument	LINUX_MODE		631649	0					
ANR	631692	Identifier	LINUX_MODE		631649	0					
ANR	631693	ElseStatement	else		631649	0					
ANR	631694	IfStatement	if ( formattingStyle == STYLE_STROUSTRUP )		631649	0					
ANR	631695	Condition	formattingStyle == STYLE_STROUSTRUP	344:10:10480:10514	631649	0	True				
ANR	631696	EqualityExpression	formattingStyle == STYLE_STROUSTRUP		631649	0		==			
ANR	631697	Identifier	formattingStyle		631649	0					
ANR	631698	Identifier	STYLE_STROUSTRUP		631649	1					
ANR	631699	CompoundStatement		15:1:288:288	631649	1					
ANR	631700	ExpressionStatement	setBraceFormatMode ( LINUX_MODE )	346:2:10522:10552	631649	0	True				
ANR	631701	CallExpression	setBraceFormatMode ( LINUX_MODE )		631649	0					
ANR	631702	Callee	setBraceFormatMode		631649	0					
ANR	631703	Identifier	setBraceFormatMode		631649	0					
ANR	631704	ArgumentList	LINUX_MODE		631649	1					
ANR	631705	Argument	LINUX_MODE		631649	0					
ANR	631706	Identifier	LINUX_MODE		631649	0					
ANR	631707	ExpressionStatement	setBreakClosingHeaderBracesMode ( true )	347:2:10556:10593	631649	1	True				
ANR	631708	CallExpression	setBreakClosingHeaderBracesMode ( true )		631649	0					
ANR	631709	Callee	setBreakClosingHeaderBracesMode		631649	0					
ANR	631710	Identifier	setBreakClosingHeaderBracesMode		631649	0					
ANR	631711	ArgumentList	true		631649	1					
ANR	631712	Argument	true		631649	0					
ANR	631713	Identifier	true		631649	0					
ANR	631714	ElseStatement	else		631649	0					
ANR	631715	IfStatement	if ( formattingStyle == STYLE_WHITESMITH )		631649	0					
ANR	631716	Condition	formattingStyle == STYLE_WHITESMITH	349:10:10608:10642	631649	0	True				
ANR	631717	EqualityExpression	formattingStyle == STYLE_WHITESMITH		631649	0		==			
ANR	631718	Identifier	formattingStyle		631649	0					
ANR	631719	Identifier	STYLE_WHITESMITH		631649	1					
ANR	631720	CompoundStatement		20:1:416:416	631649	1					
ANR	631721	ExpressionStatement	setBraceFormatMode ( BREAK_MODE )	351:2:10650:10680	631649	0	True				
ANR	631722	CallExpression	setBraceFormatMode ( BREAK_MODE )		631649	0					
ANR	631723	Callee	setBraceFormatMode		631649	0					
ANR	631724	Identifier	setBraceFormatMode		631649	0					
ANR	631725	ArgumentList	BREAK_MODE		631649	1					
ANR	631726	Argument	BREAK_MODE		631649	0					
ANR	631727	Identifier	BREAK_MODE		631649	0					
ANR	631728	ExpressionStatement	setBraceIndent ( true )	352:2:10684:10704	631649	1	True				
ANR	631729	CallExpression	setBraceIndent ( true )		631649	0					
ANR	631730	Callee	setBraceIndent		631649	0					
ANR	631731	Identifier	setBraceIndent		631649	0					
ANR	631732	ArgumentList	true		631649	1					
ANR	631733	Argument	true		631649	0					
ANR	631734	Identifier	true		631649	0					
ANR	631735	ExpressionStatement	setClassIndent ( true )	353:2:10708:10728	631649	2	True				
ANR	631736	CallExpression	setClassIndent ( true )		631649	0					
ANR	631737	Callee	setClassIndent		631649	0					
ANR	631738	Identifier	setClassIndent		631649	0					
ANR	631739	ArgumentList	true		631649	1					
ANR	631740	Argument	true		631649	0					
ANR	631741	Identifier	true		631649	0					
ANR	631742	ExpressionStatement	setSwitchIndent ( true )	354:2:10780:10801	631649	3	True				
ANR	631743	CallExpression	setSwitchIndent ( true )		631649	0					
ANR	631744	Callee	setSwitchIndent		631649	0					
ANR	631745	Identifier	setSwitchIndent		631649	0					
ANR	631746	ArgumentList	true		631649	1					
ANR	631747	Argument	true		631649	0					
ANR	631748	Identifier	true		631649	0					
ANR	631749	ElseStatement	else		631649	0					
ANR	631750	IfStatement	if ( formattingStyle == STYLE_VTK )		631649	0					
ANR	631751	Condition	formattingStyle == STYLE_VTK	356:10:10863:10890	631649	0	True				
ANR	631752	EqualityExpression	formattingStyle == STYLE_VTK		631649	0		==			
ANR	631753	Identifier	formattingStyle		631649	0					
ANR	631754	Identifier	STYLE_VTK		631649	1					
ANR	631755	CompoundStatement		27:1:664:664	631649	1					
ANR	631756	ExpressionStatement	setBraceFormatMode ( BREAK_MODE )	359:2:10978:11008	631649	0	True				
ANR	631757	CallExpression	setBraceFormatMode ( BREAK_MODE )		631649	0					
ANR	631758	Callee	setBraceFormatMode		631649	0					
ANR	631759	Identifier	setBraceFormatMode		631649	0					
ANR	631760	ArgumentList	BREAK_MODE		631649	1					
ANR	631761	Argument	BREAK_MODE		631649	0					
ANR	631762	Identifier	BREAK_MODE		631649	0					
ANR	631763	ExpressionStatement	setBraceIndentVtk ( true )	360:2:11012:11035	631649	1	True				
ANR	631764	CallExpression	setBraceIndentVtk ( true )		631649	0					
ANR	631765	Callee	setBraceIndentVtk		631649	0					
ANR	631766	Identifier	setBraceIndentVtk		631649	0					
ANR	631767	ArgumentList	true		631649	1					
ANR	631768	Argument	true		631649	0					
ANR	631769	Identifier	true		631649	0					
ANR	631770	ExpressionStatement	setSwitchIndent ( true )	361:2:11084:11105	631649	2	True				
ANR	631771	CallExpression	setSwitchIndent ( true )		631649	0					
ANR	631772	Callee	setSwitchIndent		631649	0					
ANR	631773	Identifier	setSwitchIndent		631649	0					
ANR	631774	ArgumentList	true		631649	1					
ANR	631775	Argument	true		631649	0					
ANR	631776	Identifier	true		631649	0					
ANR	631777	ElseStatement	else		631649	0					
ANR	631778	IfStatement	if ( formattingStyle == STYLE_BANNER )		631649	0					
ANR	631779	Condition	formattingStyle == STYLE_BANNER	363:10:11167:11197	631649	0	True				
ANR	631780	EqualityExpression	formattingStyle == STYLE_BANNER		631649	0		==			
ANR	631781	Identifier	formattingStyle		631649	0					
ANR	631782	Identifier	STYLE_BANNER		631649	1					
ANR	631783	CompoundStatement		34:1:971:971	631649	1					
ANR	631784	ExpressionStatement	setBraceFormatMode ( ATTACH_MODE )	366:2:11274:11305	631649	0	True				
ANR	631785	CallExpression	setBraceFormatMode ( ATTACH_MODE )		631649	0					
ANR	631786	Callee	setBraceFormatMode		631649	0					
ANR	631787	Identifier	setBraceFormatMode		631649	0					
ANR	631788	ArgumentList	ATTACH_MODE		631649	1					
ANR	631789	Argument	ATTACH_MODE		631649	0					
ANR	631790	Identifier	ATTACH_MODE		631649	0					
ANR	631791	ExpressionStatement	setBraceIndent ( true )	367:2:11309:11329	631649	1	True				
ANR	631792	CallExpression	setBraceIndent ( true )		631649	0					
ANR	631793	Callee	setBraceIndent		631649	0					
ANR	631794	Identifier	setBraceIndent		631649	0					
ANR	631795	ArgumentList	true		631649	1					
ANR	631796	Argument	true		631649	0					
ANR	631797	Identifier	true		631649	0					
ANR	631798	ExpressionStatement	setClassIndent ( true )	368:2:11333:11353	631649	2	True				
ANR	631799	CallExpression	setClassIndent ( true )		631649	0					
ANR	631800	Callee	setClassIndent		631649	0					
ANR	631801	Identifier	setClassIndent		631649	0					
ANR	631802	ArgumentList	true		631649	1					
ANR	631803	Argument	true		631649	0					
ANR	631804	Identifier	true		631649	0					
ANR	631805	ExpressionStatement	setSwitchIndent ( true )	369:2:11405:11426	631649	3	True				
ANR	631806	CallExpression	setSwitchIndent ( true )		631649	0					
ANR	631807	Callee	setSwitchIndent		631649	0					
ANR	631808	Identifier	setSwitchIndent		631649	0					
ANR	631809	ArgumentList	true		631649	1					
ANR	631810	Argument	true		631649	0					
ANR	631811	Identifier	true		631649	0					
ANR	631812	ElseStatement	else		631649	0					
ANR	631813	IfStatement	if ( formattingStyle == STYLE_GNU )		631649	0					
ANR	631814	Condition	formattingStyle == STYLE_GNU	371:10:11488:11515	631649	0	True				
ANR	631815	EqualityExpression	formattingStyle == STYLE_GNU		631649	0		==			
ANR	631816	Identifier	formattingStyle		631649	0					
ANR	631817	Identifier	STYLE_GNU		631649	1					
ANR	631818	CompoundStatement		42:1:1289:1289	631649	1					
ANR	631819	ExpressionStatement	setBraceFormatMode ( BREAK_MODE )	373:2:11523:11553	631649	0	True				
ANR	631820	CallExpression	setBraceFormatMode ( BREAK_MODE )		631649	0					
ANR	631821	Callee	setBraceFormatMode		631649	0					
ANR	631822	Identifier	setBraceFormatMode		631649	0					
ANR	631823	ArgumentList	BREAK_MODE		631649	1					
ANR	631824	Argument	BREAK_MODE		631649	0					
ANR	631825	Identifier	BREAK_MODE		631649	0					
ANR	631826	ExpressionStatement	setBlockIndent ( true )	374:2:11557:11577	631649	1	True				
ANR	631827	CallExpression	setBlockIndent ( true )		631649	0					
ANR	631828	Callee	setBlockIndent		631649	0					
ANR	631829	Identifier	setBlockIndent		631649	0					
ANR	631830	ArgumentList	true		631649	1					
ANR	631831	Argument	true		631649	0					
ANR	631832	Identifier	true		631649	0					
ANR	631833	ElseStatement	else		631649	0					
ANR	631834	IfStatement	if ( formattingStyle == STYLE_LINUX )		631649	0					
ANR	631835	Condition	formattingStyle == STYLE_LINUX	376:10:11592:11621	631649	0	True				
ANR	631836	EqualityExpression	formattingStyle == STYLE_LINUX		631649	0		==			
ANR	631837	Identifier	formattingStyle		631649	0					
ANR	631838	Identifier	STYLE_LINUX		631649	1					
ANR	631839	CompoundStatement		47:1:1395:1395	631649	1					
ANR	631840	ExpressionStatement	setBraceFormatMode ( LINUX_MODE )	378:2:11629:11659	631649	0	True				
ANR	631841	CallExpression	setBraceFormatMode ( LINUX_MODE )		631649	0					
ANR	631842	Callee	setBraceFormatMode		631649	0					
ANR	631843	Identifier	setBraceFormatMode		631649	0					
ANR	631844	ArgumentList	LINUX_MODE		631649	1					
ANR	631845	Argument	LINUX_MODE		631649	0					
ANR	631846	Identifier	LINUX_MODE		631649	0					
ANR	631847	ExpressionStatement	setMinConditionalIndentOption ( MINCOND_ONEHALF )	380:2:11691:11737	631649	1	True				
ANR	631848	CallExpression	setMinConditionalIndentOption ( MINCOND_ONEHALF )		631649	0					
ANR	631849	Callee	setMinConditionalIndentOption		631649	0					
ANR	631850	Identifier	setMinConditionalIndentOption		631649	0					
ANR	631851	ArgumentList	MINCOND_ONEHALF		631649	1					
ANR	631852	Argument	MINCOND_ONEHALF		631649	0					
ANR	631853	Identifier	MINCOND_ONEHALF		631649	0					
ANR	631854	ElseStatement	else		631649	0					
ANR	631855	IfStatement	if ( formattingStyle == STYLE_HORSTMANN )		631649	0					
ANR	631856	Condition	formattingStyle == STYLE_HORSTMANN	382:10:11752:11785	631649	0	True				
ANR	631857	EqualityExpression	formattingStyle == STYLE_HORSTMANN		631649	0		==			
ANR	631858	Identifier	formattingStyle		631649	0					
ANR	631859	Identifier	STYLE_HORSTMANN		631649	1					
ANR	631860	CompoundStatement		53:1:1559:1559	631649	1					
ANR	631861	ExpressionStatement	setBraceFormatMode ( RUN_IN_MODE )	384:2:11793:11824	631649	0	True				
ANR	631862	CallExpression	setBraceFormatMode ( RUN_IN_MODE )		631649	0					
ANR	631863	Callee	setBraceFormatMode		631649	0					
ANR	631864	Identifier	setBraceFormatMode		631649	0					
ANR	631865	ArgumentList	RUN_IN_MODE		631649	1					
ANR	631866	Argument	RUN_IN_MODE		631649	0					
ANR	631867	Identifier	RUN_IN_MODE		631649	0					
ANR	631868	ExpressionStatement	setSwitchIndent ( true )	385:2:11828:11849	631649	1	True				
ANR	631869	CallExpression	setSwitchIndent ( true )		631649	0					
ANR	631870	Callee	setSwitchIndent		631649	0					
ANR	631871	Identifier	setSwitchIndent		631649	0					
ANR	631872	ArgumentList	true		631649	1					
ANR	631873	Argument	true		631649	0					
ANR	631874	Identifier	true		631649	0					
ANR	631875	ElseStatement	else		631649	0					
ANR	631876	IfStatement	if ( formattingStyle == STYLE_1TBS )		631649	0					
ANR	631877	Condition	formattingStyle == STYLE_1TBS	387:10:11864:11892	631649	0	True				
ANR	631878	EqualityExpression	formattingStyle == STYLE_1TBS		631649	0		==			
ANR	631879	Identifier	formattingStyle		631649	0					
ANR	631880	Identifier	STYLE_1TBS		631649	1					
ANR	631881	CompoundStatement		58:1:1666:1666	631649	1					
ANR	631882	ExpressionStatement	setBraceFormatMode ( LINUX_MODE )	389:2:11900:11930	631649	0	True				
ANR	631883	CallExpression	setBraceFormatMode ( LINUX_MODE )		631649	0					
ANR	631884	Callee	setBraceFormatMode		631649	0					
ANR	631885	Identifier	setBraceFormatMode		631649	0					
ANR	631886	ArgumentList	LINUX_MODE		631649	1					
ANR	631887	Argument	LINUX_MODE		631649	0					
ANR	631888	Identifier	LINUX_MODE		631649	0					
ANR	631889	ExpressionStatement	setAddBracesMode ( true )	390:2:11934:11956	631649	1	True				
ANR	631890	CallExpression	setAddBracesMode ( true )		631649	0					
ANR	631891	Callee	setAddBracesMode		631649	0					
ANR	631892	Identifier	setAddBracesMode		631649	0					
ANR	631893	ArgumentList	true		631649	1					
ANR	631894	Argument	true		631649	0					
ANR	631895	Identifier	true		631649	0					
ANR	631896	ExpressionStatement	setRemoveBracesMode ( false )	391:2:11960:11986	631649	2	True				
ANR	631897	CallExpression	setRemoveBracesMode ( false )		631649	0					
ANR	631898	Callee	setRemoveBracesMode		631649	0					
ANR	631899	Identifier	setRemoveBracesMode		631649	0					
ANR	631900	ArgumentList	false		631649	1					
ANR	631901	Argument	false		631649	0					
ANR	631902	Identifier	false		631649	0					
ANR	631903	ElseStatement	else		631649	0					
ANR	631904	IfStatement	if ( formattingStyle == STYLE_GOOGLE )		631649	0					
ANR	631905	Condition	formattingStyle == STYLE_GOOGLE	393:10:12001:12031	631649	0	True				
ANR	631906	EqualityExpression	formattingStyle == STYLE_GOOGLE		631649	0		==			
ANR	631907	Identifier	formattingStyle		631649	0					
ANR	631908	Identifier	STYLE_GOOGLE		631649	1					
ANR	631909	CompoundStatement		64:1:1805:1805	631649	1					
ANR	631910	ExpressionStatement	setBraceFormatMode ( ATTACH_MODE )	395:2:12039:12070	631649	0	True				
ANR	631911	CallExpression	setBraceFormatMode ( ATTACH_MODE )		631649	0					
ANR	631912	Callee	setBraceFormatMode		631649	0					
ANR	631913	Identifier	setBraceFormatMode		631649	0					
ANR	631914	ArgumentList	ATTACH_MODE		631649	1					
ANR	631915	Argument	ATTACH_MODE		631649	0					
ANR	631916	Identifier	ATTACH_MODE		631649	0					
ANR	631917	ExpressionStatement	setModifierIndent ( true )	396:2:12074:12097	631649	1	True				
ANR	631918	CallExpression	setModifierIndent ( true )		631649	0					
ANR	631919	Callee	setModifierIndent		631649	0					
ANR	631920	Identifier	setModifierIndent		631649	0					
ANR	631921	ArgumentList	true		631649	1					
ANR	631922	Argument	true		631649	0					
ANR	631923	Identifier	true		631649	0					
ANR	631924	ExpressionStatement	setClassIndent ( false )	397:2:12101:12122	631649	2	True				
ANR	631925	CallExpression	setClassIndent ( false )		631649	0					
ANR	631926	Callee	setClassIndent		631649	0					
ANR	631927	Identifier	setClassIndent		631649	0					
ANR	631928	ArgumentList	false		631649	1					
ANR	631929	Argument	false		631649	0					
ANR	631930	Identifier	false		631649	0					
ANR	631931	ElseStatement	else		631649	0					
ANR	631932	IfStatement	if ( formattingStyle == STYLE_MOZILLA )		631649	0					
ANR	631933	Condition	formattingStyle == STYLE_MOZILLA	399:10:12137:12168	631649	0	True				
ANR	631934	EqualityExpression	formattingStyle == STYLE_MOZILLA		631649	0		==			
ANR	631935	Identifier	formattingStyle		631649	0					
ANR	631936	Identifier	STYLE_MOZILLA		631649	1					
ANR	631937	CompoundStatement		70:1:1942:1942	631649	1					
ANR	631938	ExpressionStatement	setBraceFormatMode ( LINUX_MODE )	401:2:12176:12206	631649	0	True				
ANR	631939	CallExpression	setBraceFormatMode ( LINUX_MODE )		631649	0					
ANR	631940	Callee	setBraceFormatMode		631649	0					
ANR	631941	Identifier	setBraceFormatMode		631649	0					
ANR	631942	ArgumentList	LINUX_MODE		631649	1					
ANR	631943	Argument	LINUX_MODE		631649	0					
ANR	631944	Identifier	LINUX_MODE		631649	0					
ANR	631945	ElseStatement	else		631649	0					
ANR	631946	IfStatement	if ( formattingStyle == STYLE_PICO )		631649	0					
ANR	631947	Condition	formattingStyle == STYLE_PICO	403:10:12221:12249	631649	0	True				
ANR	631948	EqualityExpression	formattingStyle == STYLE_PICO		631649	0		==			
ANR	631949	Identifier	formattingStyle		631649	0					
ANR	631950	Identifier	STYLE_PICO		631649	1					
ANR	631951	CompoundStatement		74:1:2023:2023	631649	1					
ANR	631952	ExpressionStatement	setBraceFormatMode ( RUN_IN_MODE )	405:2:12257:12288	631649	0	True				
ANR	631953	CallExpression	setBraceFormatMode ( RUN_IN_MODE )		631649	0					
ANR	631954	Callee	setBraceFormatMode		631649	0					
ANR	631955	Identifier	setBraceFormatMode		631649	0					
ANR	631956	ArgumentList	RUN_IN_MODE		631649	1					
ANR	631957	Argument	RUN_IN_MODE		631649	0					
ANR	631958	Identifier	RUN_IN_MODE		631649	0					
ANR	631959	ExpressionStatement	setAttachClosingBraceMode ( true )	406:2:12292:12323	631649	1	True				
ANR	631960	CallExpression	setAttachClosingBraceMode ( true )		631649	0					
ANR	631961	Callee	setAttachClosingBraceMode		631649	0					
ANR	631962	Identifier	setAttachClosingBraceMode		631649	0					
ANR	631963	ArgumentList	true		631649	1					
ANR	631964	Argument	true		631649	0					
ANR	631965	Identifier	true		631649	0					
ANR	631966	ExpressionStatement	setSwitchIndent ( true )	407:2:12327:12348	631649	2	True				
ANR	631967	CallExpression	setSwitchIndent ( true )		631649	0					
ANR	631968	Callee	setSwitchIndent		631649	0					
ANR	631969	Identifier	setSwitchIndent		631649	0					
ANR	631970	ArgumentList	true		631649	1					
ANR	631971	Argument	true		631649	0					
ANR	631972	Identifier	true		631649	0					
ANR	631973	ExpressionStatement	setBreakOneLineBlocksMode ( false )	408:2:12352:12384	631649	3	True				
ANR	631974	CallExpression	setBreakOneLineBlocksMode ( false )		631649	0					
ANR	631975	Callee	setBreakOneLineBlocksMode		631649	0					
ANR	631976	Identifier	setBreakOneLineBlocksMode		631649	0					
ANR	631977	ArgumentList	false		631649	1					
ANR	631978	Argument	false		631649	0					
ANR	631979	Identifier	false		631649	0					
ANR	631980	ExpressionStatement	setBreakOneLineStatementsMode ( false )	409:2:12388:12424	631649	4	True				
ANR	631981	CallExpression	setBreakOneLineStatementsMode ( false )		631649	0					
ANR	631982	Callee	setBreakOneLineStatementsMode		631649	0					
ANR	631983	Identifier	setBreakOneLineStatementsMode		631649	0					
ANR	631984	ArgumentList	false		631649	1					
ANR	631985	Argument	false		631649	0					
ANR	631986	Identifier	false		631649	0					
ANR	631987	IfStatement	if ( shouldAddBraces )		631649	5					
ANR	631988	Condition	shouldAddBraces	412:6:12544:12558	631649	0	True				
ANR	631989	Identifier	shouldAddBraces		631649	0					
ANR	631990	ExpressionStatement	shouldAddOneLineBraces = true	413:3:12564:12593	631649	1	True				
ANR	631991	AssignmentExpression	shouldAddOneLineBraces = true		631649	0		=			
ANR	631992	Identifier	shouldAddOneLineBraces		631649	0					
ANR	631993	Identifier	true		631649	1					
ANR	631994	ElseStatement	else		631649	0					
ANR	631995	IfStatement	if ( formattingStyle == STYLE_LISP )		631649	0					
ANR	631996	Condition	formattingStyle == STYLE_LISP	415:10:12608:12636	631649	0	True				
ANR	631997	EqualityExpression	formattingStyle == STYLE_LISP		631649	0		==			
ANR	631998	Identifier	formattingStyle		631649	0					
ANR	631999	Identifier	STYLE_LISP		631649	1					
ANR	632000	CompoundStatement		86:1:2410:2410	631649	1					
ANR	632001	ExpressionStatement	setBraceFormatMode ( ATTACH_MODE )	417:2:12644:12675	631649	0	True				
ANR	632002	CallExpression	setBraceFormatMode ( ATTACH_MODE )		631649	0					
ANR	632003	Callee	setBraceFormatMode		631649	0					
ANR	632004	Identifier	setBraceFormatMode		631649	0					
ANR	632005	ArgumentList	ATTACH_MODE		631649	1					
ANR	632006	Argument	ATTACH_MODE		631649	0					
ANR	632007	Identifier	ATTACH_MODE		631649	0					
ANR	632008	ExpressionStatement	setAttachClosingBraceMode ( true )	418:2:12679:12710	631649	1	True				
ANR	632009	CallExpression	setAttachClosingBraceMode ( true )		631649	0					
ANR	632010	Callee	setAttachClosingBraceMode		631649	0					
ANR	632011	Identifier	setAttachClosingBraceMode		631649	0					
ANR	632012	ArgumentList	true		631649	1					
ANR	632013	Argument	true		631649	0					
ANR	632014	Identifier	true		631649	0					
ANR	632015	ExpressionStatement	setBreakOneLineStatementsMode ( false )	419:2:12714:12750	631649	2	True				
ANR	632016	CallExpression	setBreakOneLineStatementsMode ( false )		631649	0					
ANR	632017	Callee	setBreakOneLineStatementsMode		631649	0					
ANR	632018	Identifier	setBreakOneLineStatementsMode		631649	0					
ANR	632019	ArgumentList	false		631649	1					
ANR	632020	Argument	false		631649	0					
ANR	632021	Identifier	false		631649	0					
ANR	632022	IfStatement	if ( shouldAddOneLineBraces )		631649	3					
ANR	632023	Condition	shouldAddOneLineBraces	422:6:12851:12872	631649	0	True				
ANR	632024	Identifier	shouldAddOneLineBraces		631649	0					
ANR	632025	CompoundStatement		93:2:2647:2647	631649	1					
ANR	632026	ExpressionStatement	shouldAddBraces = true	424:3:12882:12904	631649	0	True				
ANR	632027	AssignmentExpression	shouldAddBraces = true		631649	0		=			
ANR	632028	Identifier	shouldAddBraces		631649	0					
ANR	632029	Identifier	true		631649	1					
ANR	632030	ExpressionStatement	shouldAddOneLineBraces = false	425:3:12909:12939	631649	1	True				
ANR	632031	AssignmentExpression	shouldAddOneLineBraces = false		631649	0		=			
ANR	632032	Identifier	shouldAddOneLineBraces		631649	0					
ANR	632033	Identifier	false		631649	1					
ANR	632034	ExpressionStatement	setMinConditionalIndentLength ( )	428:1:12949:12980	631649	1	True				
ANR	632035	CallExpression	setMinConditionalIndentLength ( )		631649	0					
ANR	632036	Callee	setMinConditionalIndentLength		631649	0					
ANR	632037	Identifier	setMinConditionalIndentLength		631649	0					
ANR	632038	ArgumentList			631649	1					
ANR	632039	IfStatement	if ( getTabLength ( ) == 0 )		631649	2					
ANR	632040	Condition	getTabLength ( ) == 0	430:5:13050:13068	631649	0	True				
ANR	632041	EqualityExpression	getTabLength ( ) == 0		631649	0		==			
ANR	632042	CallExpression	getTabLength ( )		631649	0					
ANR	632043	Callee	getTabLength		631649	0					
ANR	632044	Identifier	getTabLength		631649	0					
ANR	632045	ArgumentList			631649	1					
ANR	632046	PrimaryExpression	0		631649	1					
ANR	632047	ExpressionStatement	setDefaultTabLength ( )	431:2:13073:13094	631649	1	True				
ANR	632048	CallExpression	setDefaultTabLength ( )		631649	0					
ANR	632049	Callee	setDefaultTabLength		631649	0					
ANR	632050	Identifier	setDefaultTabLength		631649	0					
ANR	632051	ArgumentList			631649	1					
ANR	632052	IfStatement	if ( shouldAddOneLineBraces )		631649	3					
ANR	632053	Condition	shouldAddOneLineBraces	433:5:13154:13175	631649	0	True				
ANR	632054	Identifier	shouldAddOneLineBraces		631649	0					
ANR	632055	ExpressionStatement	setBreakOneLineBlocksMode ( false )	434:2:13180:13212	631649	1	True				
ANR	632056	CallExpression	setBreakOneLineBlocksMode ( false )		631649	0					
ANR	632057	Callee	setBreakOneLineBlocksMode		631649	0					
ANR	632058	Identifier	setBreakOneLineBlocksMode		631649	0					
ANR	632059	ArgumentList	false		631649	1					
ANR	632060	Argument	false		631649	0					
ANR	632061	Identifier	false		631649	0					
ANR	632062	IfStatement	if ( shouldAddBraces || shouldAddOneLineBraces )		631649	4					
ANR	632063	Condition	shouldAddBraces || shouldAddOneLineBraces	436:5:13264:13304	631649	0	True				
ANR	632064	OrExpression	shouldAddBraces || shouldAddOneLineBraces		631649	0		||			
ANR	632065	Identifier	shouldAddBraces		631649	0					
ANR	632066	Identifier	shouldAddOneLineBraces		631649	1					
ANR	632067	ExpressionStatement	setRemoveBracesMode ( false )	437:2:13309:13335	631649	1	True				
ANR	632068	CallExpression	setRemoveBracesMode ( false )		631649	0					
ANR	632069	Callee	setRemoveBracesMode		631649	0					
ANR	632070	Identifier	setRemoveBracesMode		631649	0					
ANR	632071	ArgumentList	false		631649	1					
ANR	632072	Argument	false		631649	0					
ANR	632073	Identifier	false		631649	0					
ANR	632074	IfStatement	if ( getClassIndent ( ) )		631649	5					
ANR	632075	Condition	getClassIndent ( )	439:5:13394:13409	631649	0	True				
ANR	632076	CallExpression	getClassIndent ( )		631649	0					
ANR	632077	Callee	getClassIndent		631649	0					
ANR	632078	Identifier	getClassIndent		631649	0					
ANR	632079	ArgumentList			631649	1					
ANR	632080	ExpressionStatement	setModifierIndent ( false )	440:2:13414:13438	631649	1	True				
ANR	632081	CallExpression	setModifierIndent ( false )		631649	0					
ANR	632082	Callee	setModifierIndent		631649	0					
ANR	632083	Identifier	setModifierIndent		631649	0					
ANR	632084	ArgumentList	false		631649	1					
ANR	632085	Argument	false		631649	0					
ANR	632086	Identifier	false		631649	0					
ANR	632087	ReturnType	void		631649	1					
ANR	632088	Identifier	ASFormatter :: fixOptionVariableConflicts		631649	2					
ANR	632089	ParameterList			631649	3					
ANR	632090	CFGEntryNode	ENTRY		631649		True				
ANR	632091	CFGExitNode	EXIT		631649		True				
ANR	632092	Symbol	shouldAddBraces		631649						
ANR	632093	Symbol	STYLE_STROUSTRUP		631649						
ANR	632094	Symbol	RUN_IN_MODE		631649						
ANR	632095	Symbol	STYLE_HORSTMANN		631649						
ANR	632096	Symbol	LINUX_MODE		631649						
ANR	632097	Symbol	STYLE_LISP		631649						
ANR	632098	Symbol	STYLE_JAVA		631649						
ANR	632099	Symbol	formattingStyle		631649						
ANR	632100	Symbol	ATTACH_MODE		631649						
ANR	632101	Symbol	STYLE_PICO		631649						
ANR	632102	Symbol	BREAK_MODE		631649						
ANR	632103	Symbol	STYLE_VTK		631649						
ANR	632104	Symbol	STYLE_MOZILLA		631649						
ANR	632105	Symbol	STYLE_ALLMAN		631649						
ANR	632106	Symbol	STYLE_WHITESMITH		631649						
ANR	632107	Symbol	getClassIndent		631649						
ANR	632108	Symbol	MINCOND_ONEHALF		631649						
ANR	632109	Symbol	STYLE_GOOGLE		631649						
ANR	632110	Symbol	STYLE_GNU		631649						
ANR	632111	Symbol	false		631649						
ANR	632112	Symbol	STYLE_KR		631649						
ANR	632113	Symbol	STYLE_BANNER		631649						
ANR	632114	Symbol	getTabLength		631649						
ANR	632115	Symbol	STYLE_1TBS		631649						
ANR	632116	Symbol	true		631649						
ANR	632117	Symbol	STYLE_LINUX		631649						
ANR	632118	Symbol	shouldAddOneLineBraces		631649						
ANR	632119	Function	ASFormatter :: nextLine	448:0:13516:55161							
ANR	632120	FunctionDef	ASFormatter :: nextLine ()		632119	0					
ANR	632121	CompoundStatement		449:0:13547:55161	632119	0					
ANR	632122	IdentifierDeclStatement	const string * newHeader = nullptr ;	450:1:13550:13583	632119	0	True				
ANR	632123	IdentifierDecl	* newHeader = nullptr		632119	0					
ANR	632124	IdentifierDeclType	const string *		632119	0					
ANR	632125	Identifier	newHeader		632119	1					
ANR	632126	AssignmentExpression	* newHeader = nullptr		632119	2		=			
ANR	632127	Identifier	nullptr		632119	0					
ANR	632128	Identifier	nullptr		632119	1					
ANR	632129	ExpressionStatement	isInVirginLine = isVirgin	451:1:13586:13611	632119	1	True				
ANR	632130	AssignmentExpression	isInVirginLine = isVirgin		632119	0		=			
ANR	632131	Identifier	isInVirginLine		632119	0					
ANR	632132	Identifier	isVirgin		632119	1					
ANR	632133	ExpressionStatement	isCharImmediatelyPostComment = false	452:1:13614:13650	632119	2	True				
ANR	632134	AssignmentExpression	isCharImmediatelyPostComment = false		632119	0		=			
ANR	632135	Identifier	isCharImmediatelyPostComment		632119	0					
ANR	632136	Identifier	false		632119	1					
ANR	632137	ExpressionStatement	isPreviousCharPostComment = false	453:1:13653:13686	632119	3	True				
ANR	632138	AssignmentExpression	isPreviousCharPostComment = false		632119	0		=			
ANR	632139	Identifier	isPreviousCharPostComment		632119	0					
ANR	632140	Identifier	false		632119	1					
ANR	632141	ExpressionStatement	isCharImmediatelyPostLineComment = false	454:1:13689:13729	632119	4	True				
ANR	632142	AssignmentExpression	isCharImmediatelyPostLineComment = false		632119	0		=			
ANR	632143	Identifier	isCharImmediatelyPostLineComment		632119	0					
ANR	632144	Identifier	false		632119	1					
ANR	632145	ExpressionStatement	isCharImmediatelyPostOpenBlock = false	455:1:13732:13770	632119	5	True				
ANR	632146	AssignmentExpression	isCharImmediatelyPostOpenBlock = false		632119	0		=			
ANR	632147	Identifier	isCharImmediatelyPostOpenBlock		632119	0					
ANR	632148	Identifier	false		632119	1					
ANR	632149	ExpressionStatement	isCharImmediatelyPostCloseBlock = false	456:1:13773:13812	632119	6	True				
ANR	632150	AssignmentExpression	isCharImmediatelyPostCloseBlock = false		632119	0		=			
ANR	632151	Identifier	isCharImmediatelyPostCloseBlock		632119	0					
ANR	632152	Identifier	false		632119	1					
ANR	632153	ExpressionStatement	isCharImmediatelyPostTemplate = false	457:1:13815:13852	632119	7	True				
ANR	632154	AssignmentExpression	isCharImmediatelyPostTemplate = false		632119	0		=			
ANR	632155	Identifier	isCharImmediatelyPostTemplate		632119	0					
ANR	632156	Identifier	false		632119	1					
ANR	632157	WhileStatement	while ( ! isLineReady )		632119	8					
ANR	632158	Condition	! isLineReady	459:8:13863:13874	632119	0	True				
ANR	632159	UnaryOperationExpression	! isLineReady		632119	0					
ANR	632160	UnaryOperator	!		632119	0					
ANR	632161	Identifier	isLineReady		632119	1					
ANR	632162	CompoundStatement		1147:2:35585:35648	632119	1					
ANR	632163	IfStatement	if ( shouldReparseCurrentChar )		632119	0					
ANR	632164	Condition	shouldReparseCurrentChar	461:6:13886:13909	632119	0	True				
ANR	632165	Identifier	shouldReparseCurrentChar		632119	0					
ANR	632166	ExpressionStatement	shouldReparseCurrentChar = false	462:3:13915:13947	632119	1	True				
ANR	632167	AssignmentExpression	shouldReparseCurrentChar = false		632119	0		=			
ANR	632168	Identifier	shouldReparseCurrentChar		632119	0					
ANR	632169	Identifier	false		632119	1					
ANR	632170	ElseStatement	else		632119	0					
ANR	632171	IfStatement	if ( ! getNextChar ( ) )		632119	0					
ANR	632172	Condition	! getNextChar ( )	463:11:13960:13973	632119	0	True				
ANR	632173	UnaryOperationExpression	! getNextChar ( )		632119	0					
ANR	632174	UnaryOperator	!		632119	0					
ANR	632175	CallExpression	getNextChar ( )		632119	1					
ANR	632176	Callee	getNextChar		632119	0					
ANR	632177	Identifier	getNextChar		632119	0					
ANR	632178	ArgumentList			632119	1					
ANR	632179	CompoundStatement		16:2:430:430	632119	1					
ANR	632180	ExpressionStatement	breakLine ( )	465:3:13983:13994	632119	0	True				
ANR	632181	CallExpression	breakLine ( )		632119	0					
ANR	632182	Callee	breakLine		632119	0					
ANR	632183	Identifier	breakLine		632119	0					
ANR	632184	ArgumentList			632119	1					
ANR	632185	ContinueStatement	continue ;	466:3:13999:14007	632119	1	True				
ANR	632186	ElseStatement	else		632119	0					
ANR	632187	CompoundStatement		21:2:521:521	632119	0					
ANR	632188	IfStatement	if ( isInVirginLine && currentChar == '{' && currentLineBeginsWithBrace && previousCommandChar == ' ' )		632119	0					
ANR	632189	Condition	isInVirginLine && currentChar == '{' && currentLineBeginsWithBrace && previousCommandChar == ' '	471:7:14171:14288	632119	0	True				
ANR	632190	AndExpression	isInVirginLine && currentChar == '{' && currentLineBeginsWithBrace && previousCommandChar == ' '		632119	0		&&			
ANR	632191	Identifier	isInVirginLine		632119	0					
ANR	632192	AndExpression	currentChar == '{' && currentLineBeginsWithBrace && previousCommandChar == ' '		632119	1		&&			
ANR	632193	EqualityExpression	currentChar == '{'		632119	0		==			
ANR	632194	Identifier	currentChar		632119	0					
ANR	632195	PrimaryExpression	'{'		632119	1					
ANR	632196	AndExpression	currentLineBeginsWithBrace && previousCommandChar == ' '		632119	1		&&			
ANR	632197	Identifier	currentLineBeginsWithBrace		632119	0					
ANR	632198	EqualityExpression	previousCommandChar == ' '		632119	1		==			
ANR	632199	Identifier	previousCommandChar		632119	0					
ANR	632200	PrimaryExpression	' '		632119	1					
ANR	632201	ExpressionStatement	previousCommandChar = '{'	474:4:14295:14320	632119	1	True				
ANR	632202	AssignmentExpression	previousCommandChar = '{'		632119	0		=			
ANR	632203	Identifier	previousCommandChar		632119	0					
ANR	632204	PrimaryExpression	'{'		632119	1					
ANR	632205	IfStatement	"if ( isInClassInitializer && isBraceType ( braceTypeStack -> back ( ) , COMMAND_TYPE ) )"		632119	1					
ANR	632206	Condition	"isInClassInitializer && isBraceType ( braceTypeStack -> back ( ) , COMMAND_TYPE )"	475:7:14329:14412	632119	0	True				
ANR	632207	AndExpression	"isInClassInitializer && isBraceType ( braceTypeStack -> back ( ) , COMMAND_TYPE )"		632119	0		&&			
ANR	632208	Identifier	isInClassInitializer		632119	0					
ANR	632209	CallExpression	"isBraceType ( braceTypeStack -> back ( ) , COMMAND_TYPE )"		632119	1					
ANR	632210	Callee	isBraceType		632119	0					
ANR	632211	Identifier	isBraceType		632119	0					
ANR	632212	ArgumentList	braceTypeStack -> back ( )		632119	1					
ANR	632213	Argument	braceTypeStack -> back ( )		632119	0					
ANR	632214	CallExpression	braceTypeStack -> back ( )		632119	0					
ANR	632215	Callee	braceTypeStack -> back		632119	0					
ANR	632216	PtrMemberAccess	braceTypeStack -> back		632119	0					
ANR	632217	Identifier	braceTypeStack		632119	0					
ANR	632218	Identifier	back		632119	1					
ANR	632219	ArgumentList			632119	1					
ANR	632220	Argument	COMMAND_TYPE		632119	1					
ANR	632221	Identifier	COMMAND_TYPE		632119	0					
ANR	632222	ExpressionStatement	isInClassInitializer = false	477:4:14419:14447	632119	1	True				
ANR	632223	AssignmentExpression	isInClassInitializer = false		632119	0		=			
ANR	632224	Identifier	isInClassInitializer		632119	0					
ANR	632225	Identifier	false		632119	1					
ANR	632226	IfStatement	if ( isInBraceRunIn )		632119	2					
ANR	632227	Condition	isInBraceRunIn	478:7:14456:14469	632119	0	True				
ANR	632228	Identifier	isInBraceRunIn		632119	0					
ANR	632229	ExpressionStatement	isInLineBreak = false	479:4:14476:14497	632119	1	True				
ANR	632230	AssignmentExpression	isInLineBreak = false		632119	0		=			
ANR	632231	Identifier	isInLineBreak		632119	0					
ANR	632232	Identifier	false		632119	1					
ANR	632233	IfStatement	if ( ! isWhiteSpace ( currentChar ) )		632119	3					
ANR	632234	Condition	! isWhiteSpace ( currentChar )	480:7:14506:14531	632119	0	True				
ANR	632235	UnaryOperationExpression	! isWhiteSpace ( currentChar )		632119	0					
ANR	632236	UnaryOperator	!		632119	0					
ANR	632237	CallExpression	isWhiteSpace ( currentChar )		632119	1					
ANR	632238	Callee	isWhiteSpace		632119	0					
ANR	632239	Identifier	isWhiteSpace		632119	0					
ANR	632240	ArgumentList	currentChar		632119	1					
ANR	632241	Argument	currentChar		632119	0					
ANR	632242	Identifier	currentChar		632119	0					
ANR	632243	ExpressionStatement	isInBraceRunIn = false	481:4:14538:14560	632119	1	True				
ANR	632244	AssignmentExpression	isInBraceRunIn = false		632119	0		=			
ANR	632245	Identifier	isInBraceRunIn		632119	0					
ANR	632246	Identifier	false		632119	1					
ANR	632247	ExpressionStatement	isPreviousCharPostComment = isCharImmediatelyPostComment	482:3:14565:14621	632119	4	True				
ANR	632248	AssignmentExpression	isPreviousCharPostComment = isCharImmediatelyPostComment		632119	0		=			
ANR	632249	Identifier	isPreviousCharPostComment		632119	0					
ANR	632250	Identifier	isCharImmediatelyPostComment		632119	1					
ANR	632251	ExpressionStatement	isCharImmediatelyPostComment = false	483:3:14626:14662	632119	5	True				
ANR	632252	AssignmentExpression	isCharImmediatelyPostComment = false		632119	0		=			
ANR	632253	Identifier	isCharImmediatelyPostComment		632119	0					
ANR	632254	Identifier	false		632119	1					
ANR	632255	ExpressionStatement	isCharImmediatelyPostTemplate = false	484:3:14667:14704	632119	6	True				
ANR	632256	AssignmentExpression	isCharImmediatelyPostTemplate = false		632119	0		=			
ANR	632257	Identifier	isCharImmediatelyPostTemplate		632119	0					
ANR	632258	Identifier	false		632119	1					
ANR	632259	ExpressionStatement	isCharImmediatelyPostReturn = false	485:3:14709:14744	632119	7	True				
ANR	632260	AssignmentExpression	isCharImmediatelyPostReturn = false		632119	0		=			
ANR	632261	Identifier	isCharImmediatelyPostReturn		632119	0					
ANR	632262	Identifier	false		632119	1					
ANR	632263	ExpressionStatement	isCharImmediatelyPostThrow = false	486:3:14749:14783	632119	8	True				
ANR	632264	AssignmentExpression	isCharImmediatelyPostThrow = false		632119	0		=			
ANR	632265	Identifier	isCharImmediatelyPostThrow		632119	0					
ANR	632266	Identifier	false		632119	1					
ANR	632267	ExpressionStatement	isCharImmediatelyPostNewDelete = false	487:3:14788:14826	632119	9	True				
ANR	632268	AssignmentExpression	isCharImmediatelyPostNewDelete = false		632119	0		=			
ANR	632269	Identifier	isCharImmediatelyPostNewDelete		632119	0					
ANR	632270	Identifier	false		632119	1					
ANR	632271	ExpressionStatement	isCharImmediatelyPostOperator = false	488:3:14831:14868	632119	10	True				
ANR	632272	AssignmentExpression	isCharImmediatelyPostOperator = false		632119	0		=			
ANR	632273	Identifier	isCharImmediatelyPostOperator		632119	0					
ANR	632274	Identifier	false		632119	1					
ANR	632275	ExpressionStatement	isCharImmediatelyPostPointerOrReference = false	489:3:14873:14920	632119	11	True				
ANR	632276	AssignmentExpression	isCharImmediatelyPostPointerOrReference = false		632119	0		=			
ANR	632277	Identifier	isCharImmediatelyPostPointerOrReference		632119	0					
ANR	632278	Identifier	false		632119	1					
ANR	632279	ExpressionStatement	isCharImmediatelyPostOpenBlock = false	490:3:14925:14963	632119	12	True				
ANR	632280	AssignmentExpression	isCharImmediatelyPostOpenBlock = false		632119	0		=			
ANR	632281	Identifier	isCharImmediatelyPostOpenBlock		632119	0					
ANR	632282	Identifier	false		632119	1					
ANR	632283	ExpressionStatement	isCharImmediatelyPostCloseBlock = false	491:3:14968:15007	632119	13	True				
ANR	632284	AssignmentExpression	isCharImmediatelyPostCloseBlock = false		632119	0		=			
ANR	632285	Identifier	isCharImmediatelyPostCloseBlock		632119	0					
ANR	632286	Identifier	false		632119	1					
ANR	632287	IfStatement	"if ( ( lineIsLineCommentOnly || lineIsCommentOnly ) && currentLine . find ( ""*INDENT-ON*"" , charNum ) != string :: npos && isFormattingModeOff )"		632119	1					
ANR	632288	Condition	"( lineIsLineCommentOnly || lineIsCommentOnly ) && currentLine . find ( ""*INDENT-ON*"" , charNum ) != string :: npos && isFormattingModeOff"	494:6:15020:15166	632119	0	True				
ANR	632289	AndExpression	"( lineIsLineCommentOnly || lineIsCommentOnly ) && currentLine . find ( ""*INDENT-ON*"" , charNum ) != string :: npos && isFormattingModeOff"		632119	0		&&			
ANR	632290	OrExpression	lineIsLineCommentOnly || lineIsCommentOnly		632119	0		||			
ANR	632291	Identifier	lineIsLineCommentOnly		632119	0					
ANR	632292	Identifier	lineIsCommentOnly		632119	1					
ANR	632293	AndExpression	"currentLine . find ( ""*INDENT-ON*"" , charNum ) != string :: npos && isFormattingModeOff"		632119	1		&&			
ANR	632294	EqualityExpression	"currentLine . find ( ""*INDENT-ON*"" , charNum ) != string :: npos"		632119	0		!=			
ANR	632295	CallExpression	"currentLine . find ( ""*INDENT-ON*"" , charNum )"		632119	0					
ANR	632296	Callee	currentLine . find		632119	0					
ANR	632297	MemberAccess	currentLine . find		632119	0					
ANR	632298	Identifier	currentLine		632119	0					
ANR	632299	Identifier	find		632119	1					
ANR	632300	ArgumentList	"""*INDENT-ON*"""		632119	1					
ANR	632301	Argument	"""*INDENT-ON*"""		632119	0					
ANR	632302	PrimaryExpression	"""*INDENT-ON*"""		632119	0					
ANR	632303	Argument	charNum		632119	1					
ANR	632304	Identifier	charNum		632119	0					
ANR	632305	Identifier	string :: npos		632119	1					
ANR	632306	Identifier	isFormattingModeOff		632119	1					
ANR	632307	CompoundStatement		49:2:1623:1623	632119	1					
ANR	632308	ExpressionStatement	isFormattingModeOff = false	498:3:15176:15203	632119	0	True				
ANR	632309	AssignmentExpression	isFormattingModeOff = false		632119	0		=			
ANR	632310	Identifier	isFormattingModeOff		632119	0					
ANR	632311	Identifier	false		632119	1					
ANR	632312	ExpressionStatement	breakLine ( )	499:3:15208:15219	632119	1	True				
ANR	632313	CallExpression	breakLine ( )		632119	0					
ANR	632314	Callee	breakLine		632119	0					
ANR	632315	Identifier	breakLine		632119	0					
ANR	632316	ArgumentList			632119	1					
ANR	632317	ExpressionStatement	formattedLine = currentLine	500:3:15224:15251	632119	2	True				
ANR	632318	AssignmentExpression	formattedLine = currentLine		632119	0		=			
ANR	632319	Identifier	formattedLine		632119	0					
ANR	632320	Identifier	currentLine		632119	1					
ANR	632321	ExpressionStatement	charNum = ( int ) currentLine . length ( ) - 1	501:3:15256:15296	632119	3	True				
ANR	632322	AssignmentExpression	charNum = ( int ) currentLine . length ( ) - 1		632119	0		=			
ANR	632323	Identifier	charNum		632119	0					
ANR	632324	AdditiveExpression	( int ) currentLine . length ( ) - 1		632119	1		-			
ANR	632325	CastExpression	( int ) currentLine . length ( )		632119	0					
ANR	632326	CastTarget	int		632119	0					
ANR	632327	CallExpression	currentLine . length ( )		632119	1					
ANR	632328	Callee	currentLine . length		632119	0					
ANR	632329	MemberAccess	currentLine . length		632119	0					
ANR	632330	Identifier	currentLine		632119	0					
ANR	632331	Identifier	length		632119	1					
ANR	632332	ArgumentList			632119	1					
ANR	632333	PrimaryExpression	1		632119	1					
ANR	632334	ContinueStatement	continue ;	502:3:15301:15309	632119	4	True				
ANR	632335	IfStatement	if ( isFormattingModeOff )		632119	2					
ANR	632336	Condition	isFormattingModeOff	504:6:15321:15339	632119	0	True				
ANR	632337	Identifier	isFormattingModeOff		632119	0					
ANR	632338	CompoundStatement		57:2:1796:1796	632119	1					
ANR	632339	ExpressionStatement	breakLine ( )	506:3:15349:15360	632119	0	True				
ANR	632340	CallExpression	breakLine ( )		632119	0					
ANR	632341	Callee	breakLine		632119	0					
ANR	632342	Identifier	breakLine		632119	0					
ANR	632343	ArgumentList			632119	1					
ANR	632344	ExpressionStatement	formattedLine = currentLine	507:3:15365:15392	632119	1	True				
ANR	632345	AssignmentExpression	formattedLine = currentLine		632119	0		=			
ANR	632346	Identifier	formattedLine		632119	0					
ANR	632347	Identifier	currentLine		632119	1					
ANR	632348	ExpressionStatement	charNum = ( int ) currentLine . length ( ) - 1	508:3:15397:15437	632119	2	True				
ANR	632349	AssignmentExpression	charNum = ( int ) currentLine . length ( ) - 1		632119	0		=			
ANR	632350	Identifier	charNum		632119	0					
ANR	632351	AdditiveExpression	( int ) currentLine . length ( ) - 1		632119	1		-			
ANR	632352	CastExpression	( int ) currentLine . length ( )		632119	0					
ANR	632353	CastTarget	int		632119	0					
ANR	632354	CallExpression	currentLine . length ( )		632119	1					
ANR	632355	Callee	currentLine . length		632119	0					
ANR	632356	MemberAccess	currentLine . length		632119	0					
ANR	632357	Identifier	currentLine		632119	0					
ANR	632358	Identifier	length		632119	1					
ANR	632359	ArgumentList			632119	1					
ANR	632360	PrimaryExpression	1		632119	1					
ANR	632361	ContinueStatement	continue ;	509:3:15442:15450	632119	3	True				
ANR	632362	IfStatement	"if ( ( lineIsLineCommentOnly || lineIsCommentOnly ) && currentLine . find ( ""*INDENT-OFF*"" , charNum ) != string :: npos )"		632119	3					
ANR	632363	Condition	"( lineIsLineCommentOnly || lineIsCommentOnly ) && currentLine . find ( ""*INDENT-OFF*"" , charNum ) != string :: npos"	511:6:15462:15576	632119	0	True				
ANR	632364	AndExpression	"( lineIsLineCommentOnly || lineIsCommentOnly ) && currentLine . find ( ""*INDENT-OFF*"" , charNum ) != string :: npos"		632119	0		&&			
ANR	632365	OrExpression	lineIsLineCommentOnly || lineIsCommentOnly		632119	0		||			
ANR	632366	Identifier	lineIsLineCommentOnly		632119	0					
ANR	632367	Identifier	lineIsCommentOnly		632119	1					
ANR	632368	EqualityExpression	"currentLine . find ( ""*INDENT-OFF*"" , charNum ) != string :: npos"		632119	1		!=			
ANR	632369	CallExpression	"currentLine . find ( ""*INDENT-OFF*"" , charNum )"		632119	0					
ANR	632370	Callee	currentLine . find		632119	0					
ANR	632371	MemberAccess	currentLine . find		632119	0					
ANR	632372	Identifier	currentLine		632119	0					
ANR	632373	Identifier	find		632119	1					
ANR	632374	ArgumentList	"""*INDENT-OFF*"""		632119	1					
ANR	632375	Argument	"""*INDENT-OFF*"""		632119	0					
ANR	632376	PrimaryExpression	"""*INDENT-OFF*"""		632119	0					
ANR	632377	Argument	charNum		632119	1					
ANR	632378	Identifier	charNum		632119	0					
ANR	632379	Identifier	string :: npos		632119	1					
ANR	632380	CompoundStatement		65:2:2033:2033	632119	1					
ANR	632381	ExpressionStatement	isFormattingModeOff = true	514:3:15586:15612	632119	0	True				
ANR	632382	AssignmentExpression	isFormattingModeOff = true		632119	0		=			
ANR	632383	Identifier	isFormattingModeOff		632119	0					
ANR	632384	Identifier	true		632119	1					
ANR	632385	IfStatement	if ( isInLineBreak )		632119	1					
ANR	632386	Condition	isInLineBreak	515:7:15621:15633	632119	0	True				
ANR	632387	Identifier	isInLineBreak		632119	0					
ANR	632388	ExpressionStatement	breakLine ( )	516:4:15675:15686	632119	1	True				
ANR	632389	CallExpression	breakLine ( )		632119	0					
ANR	632390	Callee	breakLine		632119	0					
ANR	632391	Identifier	breakLine		632119	0					
ANR	632392	ArgumentList			632119	1					
ANR	632393	ExpressionStatement	formattedLine = currentLine	517:3:15691:15718	632119	2	True				
ANR	632394	AssignmentExpression	formattedLine = currentLine		632119	0		=			
ANR	632395	Identifier	formattedLine		632119	0					
ANR	632396	Identifier	currentLine		632119	1					
ANR	632397	ExpressionStatement	charNum = ( int ) currentLine . length ( ) - 1	518:3:15723:15762	632119	3	True				
ANR	632398	AssignmentExpression	charNum = ( int ) currentLine . length ( ) - 1		632119	0		=			
ANR	632399	Identifier	charNum		632119	0					
ANR	632400	AdditiveExpression	( int ) currentLine . length ( ) - 1		632119	1		-			
ANR	632401	CastExpression	( int ) currentLine . length ( )		632119	0					
ANR	632402	CastTarget	int		632119	0					
ANR	632403	CallExpression	currentLine . length ( )		632119	1					
ANR	632404	Callee	currentLine . length		632119	0					
ANR	632405	MemberAccess	currentLine . length		632119	0					
ANR	632406	Identifier	currentLine		632119	0					
ANR	632407	Identifier	length		632119	1					
ANR	632408	ArgumentList			632119	1					
ANR	632409	PrimaryExpression	1		632119	1					
ANR	632410	ContinueStatement	continue ;	519:3:15767:15775	632119	4	True				
ANR	632411	IfStatement	if ( shouldBreakLineAtNextChar )		632119	4					
ANR	632412	Condition	shouldBreakLineAtNextChar	522:6:15788:15812	632119	0	True				
ANR	632413	Identifier	shouldBreakLineAtNextChar		632119	0					
ANR	632414	CompoundStatement		75:2:2269:2269	632119	1					
ANR	632415	IfStatement	if ( isWhiteSpace ( currentChar ) && ! lineIsEmpty )		632119	0					
ANR	632416	Condition	isWhiteSpace ( currentChar ) && ! lineIsEmpty	524:7:15826:15866	632119	0	True				
ANR	632417	AndExpression	isWhiteSpace ( currentChar ) && ! lineIsEmpty		632119	0		&&			
ANR	632418	CallExpression	isWhiteSpace ( currentChar )		632119	0					
ANR	632419	Callee	isWhiteSpace		632119	0					
ANR	632420	Identifier	isWhiteSpace		632119	0					
ANR	632421	ArgumentList	currentChar		632119	1					
ANR	632422	Argument	currentChar		632119	0					
ANR	632423	Identifier	currentChar		632119	0					
ANR	632424	UnaryOperationExpression	! lineIsEmpty		632119	1					
ANR	632425	UnaryOperator	!		632119	0					
ANR	632426	Identifier	lineIsEmpty		632119	1					
ANR	632427	ContinueStatement	continue ;	525:4:15873:15881	632119	1	True				
ANR	632428	ExpressionStatement	isInLineBreak = true	526:3:15886:15906	632119	1	True				
ANR	632429	AssignmentExpression	isInLineBreak = true		632119	0		=			
ANR	632430	Identifier	isInLineBreak		632119	0					
ANR	632431	Identifier	true		632119	1					
ANR	632432	ExpressionStatement	shouldBreakLineAtNextChar = false	527:3:15911:15944	632119	2	True				
ANR	632433	AssignmentExpression	shouldBreakLineAtNextChar = false		632119	0		=			
ANR	632434	Identifier	shouldBreakLineAtNextChar		632119	0					
ANR	632435	Identifier	false		632119	1					
ANR	632436	IfStatement	if ( isInExecSQL && ! passedSemicolon )		632119	5					
ANR	632437	Condition	isInExecSQL && ! passedSemicolon	530:6:15957:15987	632119	0	True				
ANR	632438	AndExpression	isInExecSQL && ! passedSemicolon		632119	0		&&			
ANR	632439	Identifier	isInExecSQL		632119	0					
ANR	632440	UnaryOperationExpression	! passedSemicolon		632119	1					
ANR	632441	UnaryOperator	!		632119	0					
ANR	632442	Identifier	passedSemicolon		632119	1					
ANR	632443	CompoundStatement		83:2:2444:2444	632119	1					
ANR	632444	IfStatement	if ( currentChar == ';' )		632119	0					
ANR	632445	Condition	currentChar == ';'	532:7:16001:16018	632119	0	True				
ANR	632446	EqualityExpression	currentChar == ';'		632119	0		==			
ANR	632447	Identifier	currentChar		632119	0					
ANR	632448	PrimaryExpression	';'		632119	1					
ANR	632449	ExpressionStatement	passedSemicolon = true	533:4:16025:16047	632119	1	True				
ANR	632450	AssignmentExpression	passedSemicolon = true		632119	0		=			
ANR	632451	Identifier	passedSemicolon		632119	0					
ANR	632452	Identifier	true		632119	1					
ANR	632453	ExpressionStatement	appendCurrentChar ( )	534:3:16052:16071	632119	1	True				
ANR	632454	CallExpression	appendCurrentChar ( )		632119	0					
ANR	632455	Callee	appendCurrentChar		632119	0					
ANR	632456	Identifier	appendCurrentChar		632119	0					
ANR	632457	ArgumentList			632119	1					
ANR	632458	ContinueStatement	continue ;	535:3:16076:16084	632119	2	True				
ANR	632459	IfStatement	if ( isInLineComment )		632119	6					
ANR	632460	Condition	isInLineComment	538:6:16097:16111	632119	0	True				
ANR	632461	Identifier	isInLineComment		632119	0					
ANR	632462	CompoundStatement		91:2:2568:2568	632119	1					
ANR	632463	ExpressionStatement	formatLineCommentBody ( )	540:3:16121:16144	632119	0	True				
ANR	632464	CallExpression	formatLineCommentBody ( )		632119	0					
ANR	632465	Callee	formatLineCommentBody		632119	0					
ANR	632466	Identifier	formatLineCommentBody		632119	0					
ANR	632467	ArgumentList			632119	1					
ANR	632468	ContinueStatement	continue ;	541:3:16149:16157	632119	1	True				
ANR	632469	ElseStatement	else		632119	0					
ANR	632470	IfStatement	if ( isInComment )		632119	0					
ANR	632471	Condition	isInComment	543:11:16174:16184	632119	0	True				
ANR	632472	Identifier	isInComment		632119	0					
ANR	632473	CompoundStatement		96:2:2641:2641	632119	1					
ANR	632474	ExpressionStatement	formatCommentBody ( )	545:3:16194:16213	632119	0	True				
ANR	632475	CallExpression	formatCommentBody ( )		632119	0					
ANR	632476	Callee	formatCommentBody		632119	0					
ANR	632477	Identifier	formatCommentBody		632119	0					
ANR	632478	ArgumentList			632119	1					
ANR	632479	ContinueStatement	continue ;	546:3:16218:16226	632119	1	True				
ANR	632480	ElseStatement	else		632119	0					
ANR	632481	IfStatement	if ( isInQuote )		632119	0					
ANR	632482	Condition	isInQuote	549:11:16244:16252	632119	0	True				
ANR	632483	Identifier	isInQuote		632119	0					
ANR	632484	CompoundStatement		102:2:2709:2709	632119	1					
ANR	632485	ExpressionStatement	formatQuoteBody ( )	551:3:16262:16279	632119	0	True				
ANR	632486	CallExpression	formatQuoteBody ( )		632119	0					
ANR	632487	Callee	formatQuoteBody		632119	0					
ANR	632488	Identifier	formatQuoteBody		632119	0					
ANR	632489	ArgumentList			632119	1					
ANR	632490	ContinueStatement	continue ;	552:3:16284:16292	632119	1	True				
ANR	632491	IfStatement	"if ( isSequenceReached ( ""//"" ) )"		632119	7					
ANR	632492	Condition	"isSequenceReached ( ""//"" )"	557:6:16351:16373	632119	0	True				
ANR	632493	CallExpression	"isSequenceReached ( ""//"" )"		632119	0					
ANR	632494	Callee	isSequenceReached		632119	0					
ANR	632495	Identifier	isSequenceReached		632119	0					
ANR	632496	ArgumentList	"""//"""		632119	1					
ANR	632497	Argument	"""//"""		632119	0					
ANR	632498	PrimaryExpression	"""//"""		632119	0					
ANR	632499	CompoundStatement		110:2:2830:2830	632119	1					
ANR	632500	ExpressionStatement	formatLineCommentOpener ( )	559:3:16383:16408	632119	0	True				
ANR	632501	CallExpression	formatLineCommentOpener ( )		632119	0					
ANR	632502	Callee	formatLineCommentOpener		632119	0					
ANR	632503	Identifier	formatLineCommentOpener		632119	0					
ANR	632504	ArgumentList			632119	1					
ANR	632505	ExpressionStatement	testForTimeToSplitFormattedLine ( )	560:3:16413:16446	632119	1	True				
ANR	632506	CallExpression	testForTimeToSplitFormattedLine ( )		632119	0					
ANR	632507	Callee	testForTimeToSplitFormattedLine		632119	0					
ANR	632508	Identifier	testForTimeToSplitFormattedLine		632119	0					
ANR	632509	ArgumentList			632119	1					
ANR	632510	ContinueStatement	continue ;	561:3:16451:16459	632119	2	True				
ANR	632511	ElseStatement	else		632119	0					
ANR	632512	IfStatement	"if ( isSequenceReached ( ""/*"" ) )"		632119	0					
ANR	632513	Condition	"isSequenceReached ( ""/*"" )"	563:11:16476:16498	632119	0	True				
ANR	632514	CallExpression	"isSequenceReached ( ""/*"" )"		632119	0					
ANR	632515	Callee	isSequenceReached		632119	0					
ANR	632516	Identifier	isSequenceReached		632119	0					
ANR	632517	ArgumentList	"""/*"""		632119	1					
ANR	632518	Argument	"""/*"""		632119	0					
ANR	632519	PrimaryExpression	"""/*"""		632119	0					
ANR	632520	CompoundStatement		116:2:2955:2955	632119	1					
ANR	632521	ExpressionStatement	formatCommentOpener ( )	565:3:16508:16529	632119	0	True				
ANR	632522	CallExpression	formatCommentOpener ( )		632119	0					
ANR	632523	Callee	formatCommentOpener		632119	0					
ANR	632524	Identifier	formatCommentOpener		632119	0					
ANR	632525	ArgumentList			632119	1					
ANR	632526	ExpressionStatement	testForTimeToSplitFormattedLine ( )	566:3:16534:16567	632119	1	True				
ANR	632527	CallExpression	testForTimeToSplitFormattedLine ( )		632119	0					
ANR	632528	Callee	testForTimeToSplitFormattedLine		632119	0					
ANR	632529	Identifier	testForTimeToSplitFormattedLine		632119	0					
ANR	632530	ArgumentList			632119	1					
ANR	632531	ContinueStatement	continue ;	567:3:16572:16580	632119	2	True				
ANR	632532	ElseStatement	else		632119	0					
ANR	632533	IfStatement	"if ( currentChar == '""' || ( currentChar == '\\'' && ! isDigitSeparator ( currentLine , charNum ) ) )"		632119	0					
ANR	632534	Condition	"currentChar == '""' || ( currentChar == '\\'' && ! isDigitSeparator ( currentLine , charNum ) )"	569:11:16597:16693	632119	0	True				
ANR	632535	OrExpression	"currentChar == '""' || ( currentChar == '\\'' && ! isDigitSeparator ( currentLine , charNum ) )"		632119	0		||			
ANR	632536	EqualityExpression	"currentChar == '""'"		632119	0		==			
ANR	632537	Identifier	currentChar		632119	0					
ANR	632538	PrimaryExpression	"'""'"		632119	1					
ANR	632539	AndExpression	"currentChar == '\\'' && ! isDigitSeparator ( currentLine , charNum )"		632119	1		&&			
ANR	632540	EqualityExpression	currentChar == '\\''		632119	0		==			
ANR	632541	Identifier	currentChar		632119	0					
ANR	632542	PrimaryExpression	'\\''		632119	1					
ANR	632543	UnaryOperationExpression	"! isDigitSeparator ( currentLine , charNum )"		632119	1					
ANR	632544	UnaryOperator	!		632119	0					
ANR	632545	CallExpression	"isDigitSeparator ( currentLine , charNum )"		632119	1					
ANR	632546	Callee	isDigitSeparator		632119	0					
ANR	632547	Identifier	isDigitSeparator		632119	0					
ANR	632548	ArgumentList	currentLine		632119	1					
ANR	632549	Argument	currentLine		632119	0					
ANR	632550	Identifier	currentLine		632119	0					
ANR	632551	Argument	charNum		632119	1					
ANR	632552	Identifier	charNum		632119	0					
ANR	632553	CompoundStatement		123:2:3150:3150	632119	1					
ANR	632554	ExpressionStatement	formatQuoteOpener ( )	572:3:16703:16722	632119	0	True				
ANR	632555	CallExpression	formatQuoteOpener ( )		632119	0					
ANR	632556	Callee	formatQuoteOpener		632119	0					
ANR	632557	Identifier	formatQuoteOpener		632119	0					
ANR	632558	ArgumentList			632119	1					
ANR	632559	ExpressionStatement	testForTimeToSplitFormattedLine ( )	573:3:16727:16760	632119	1	True				
ANR	632560	CallExpression	testForTimeToSplitFormattedLine ( )		632119	0					
ANR	632561	Callee	testForTimeToSplitFormattedLine		632119	0					
ANR	632562	Identifier	testForTimeToSplitFormattedLine		632119	0					
ANR	632563	ArgumentList			632119	1					
ANR	632564	ContinueStatement	continue ;	574:3:16765:16773	632119	2	True				
ANR	632565	ElseStatement	else		632119	0					
ANR	632566	IfStatement	"if ( currentChar == '#' && currentLine . find_first_not_of ( "" \\t"" ) == ( size_t ) charNum )"		632119	0					
ANR	632567	Condition	"currentChar == '#' && currentLine . find_first_not_of ( "" \\t"" ) == ( size_t ) charNum"	577:11:16849:16937	632119	0	True				
ANR	632568	AndExpression	"currentChar == '#' && currentLine . find_first_not_of ( "" \\t"" ) == ( size_t ) charNum"		632119	0		&&			
ANR	632569	EqualityExpression	currentChar == '#'		632119	0		==			
ANR	632570	Identifier	currentChar		632119	0					
ANR	632571	PrimaryExpression	'#'		632119	1					
ANR	632572	EqualityExpression	"currentLine . find_first_not_of ( "" \\t"" ) == ( size_t ) charNum"		632119	1		==			
ANR	632573	CallExpression	"currentLine . find_first_not_of ( "" \\t"" )"		632119	0					
ANR	632574	Callee	currentLine . find_first_not_of		632119	0					
ANR	632575	MemberAccess	currentLine . find_first_not_of		632119	0					
ANR	632576	Identifier	currentLine		632119	0					
ANR	632577	Identifier	find_first_not_of		632119	1					
ANR	632578	ArgumentList	""" \\t"""		632119	1					
ANR	632579	Argument	""" \\t"""		632119	0					
ANR	632580	PrimaryExpression	""" \\t"""		632119	0					
ANR	632581	CastExpression	( size_t ) charNum		632119	1					
ANR	632582	CastTarget	size_t		632119	0					
ANR	632583	Identifier	charNum		632119	1					
ANR	632584	CompoundStatement		132:3:3399:3455	632119	1					
ANR	632585	IdentifierDeclStatement	string preproc = trim ( currentLine . c_str ( ) + charNum + 1 ) ;	580:3:16947:17003	632119	0	True				
ANR	632586	IdentifierDecl	preproc = trim ( currentLine . c_str ( ) + charNum + 1 )		632119	0					
ANR	632587	IdentifierDeclType	string		632119	0					
ANR	632588	Identifier	preproc		632119	1					
ANR	632589	AssignmentExpression	preproc = trim ( currentLine . c_str ( ) + charNum + 1 )		632119	2		=			
ANR	632590	Identifier	preproc		632119	0					
ANR	632591	CallExpression	trim ( currentLine . c_str ( ) + charNum + 1 )		632119	1					
ANR	632592	Callee	trim		632119	0					
ANR	632593	Identifier	trim		632119	0					
ANR	632594	ArgumentList	currentLine . c_str ( ) + charNum + 1		632119	1					
ANR	632595	Argument	currentLine . c_str ( ) + charNum + 1		632119	0					
ANR	632596	AdditiveExpression	currentLine . c_str ( ) + charNum + 1		632119	0		+			
ANR	632597	CallExpression	currentLine . c_str ( )		632119	0					
ANR	632598	Callee	currentLine . c_str		632119	0					
ANR	632599	MemberAccess	currentLine . c_str		632119	0					
ANR	632600	Identifier	currentLine		632119	0					
ANR	632601	Identifier	c_str		632119	1					
ANR	632602	ArgumentList			632119	1					
ANR	632603	AdditiveExpression	charNum + 1		632119	1		+			
ANR	632604	Identifier	charNum		632119	0					
ANR	632605	PrimaryExpression	1		632119	1					
ANR	632606	IfStatement	"if ( preproc . length ( ) > 0 && isCharPotentialHeader ( preproc , 0 ) && ( findKeyword ( preproc , 0 , ""region"" ) || findKeyword ( preproc , 0 , ""endregion"" ) || findKeyword ( preproc , 0 , ""error"" ) || findKeyword ( preproc , 0 , ""warning"" ) || findKeyword ( preproc , 0 , ""line"" ) ) )"		632119	1					
ANR	632607	Condition	"preproc . length ( ) > 0 && isCharPotentialHeader ( preproc , 0 ) && ( findKeyword ( preproc , 0 , ""region"" ) || findKeyword ( preproc , 0 , ""endregion"" ) || findKeyword ( preproc , 0 , ""error"" ) || findKeyword ( preproc , 0 , ""warning"" ) || findKeyword ( preproc , 0 , ""line"" ) )"	581:7:17012:17338	632119	0	True				
ANR	632608	AndExpression	"preproc . length ( ) > 0 && isCharPotentialHeader ( preproc , 0 ) && ( findKeyword ( preproc , 0 , ""region"" ) || findKeyword ( preproc , 0 , ""endregion"" ) || findKeyword ( preproc , 0 , ""error"" ) || findKeyword ( preproc , 0 , ""warning"" ) || findKeyword ( preproc , 0 , ""line"" ) )"		632119	0		&&			
ANR	632609	RelationalExpression	preproc . length ( ) > 0		632119	0		>			
ANR	632610	CallExpression	preproc . length ( )		632119	0					
ANR	632611	Callee	preproc . length		632119	0					
ANR	632612	MemberAccess	preproc . length		632119	0					
ANR	632613	Identifier	preproc		632119	0					
ANR	632614	Identifier	length		632119	1					
ANR	632615	ArgumentList			632119	1					
ANR	632616	PrimaryExpression	0		632119	1					
ANR	632617	AndExpression	"isCharPotentialHeader ( preproc , 0 ) && ( findKeyword ( preproc , 0 , ""region"" ) || findKeyword ( preproc , 0 , ""endregion"" ) || findKeyword ( preproc , 0 , ""error"" ) || findKeyword ( preproc , 0 , ""warning"" ) || findKeyword ( preproc , 0 , ""line"" ) )"		632119	1		&&			
ANR	632618	CallExpression	"isCharPotentialHeader ( preproc , 0 )"		632119	0					
ANR	632619	Callee	isCharPotentialHeader		632119	0					
ANR	632620	Identifier	isCharPotentialHeader		632119	0					
ANR	632621	ArgumentList	preproc		632119	1					
ANR	632622	Argument	preproc		632119	0					
ANR	632623	Identifier	preproc		632119	0					
ANR	632624	Argument	0		632119	1					
ANR	632625	PrimaryExpression	0		632119	0					
ANR	632626	OrExpression	"findKeyword ( preproc , 0 , ""region"" ) || findKeyword ( preproc , 0 , ""endregion"" ) || findKeyword ( preproc , 0 , ""error"" ) || findKeyword ( preproc , 0 , ""warning"" ) || findKeyword ( preproc , 0 , ""line"" )"		632119	1		||			
ANR	632627	CallExpression	"findKeyword ( preproc , 0 , ""region"" )"		632119	0					
ANR	632628	Callee	findKeyword		632119	0					
ANR	632629	Identifier	findKeyword		632119	0					
ANR	632630	ArgumentList	preproc		632119	1					
ANR	632631	Argument	preproc		632119	0					
ANR	632632	Identifier	preproc		632119	0					
ANR	632633	Argument	0		632119	1					
ANR	632634	PrimaryExpression	0		632119	0					
ANR	632635	Argument	"""region"""		632119	2					
ANR	632636	PrimaryExpression	"""region"""		632119	0					
ANR	632637	OrExpression	"findKeyword ( preproc , 0 , ""endregion"" ) || findKeyword ( preproc , 0 , ""error"" ) || findKeyword ( preproc , 0 , ""warning"" ) || findKeyword ( preproc , 0 , ""line"" )"		632119	1		||			
ANR	632638	CallExpression	"findKeyword ( preproc , 0 , ""endregion"" )"		632119	0					
ANR	632639	Callee	findKeyword		632119	0					
ANR	632640	Identifier	findKeyword		632119	0					
ANR	632641	ArgumentList	preproc		632119	1					
ANR	632642	Argument	preproc		632119	0					
ANR	632643	Identifier	preproc		632119	0					
ANR	632644	Argument	0		632119	1					
ANR	632645	PrimaryExpression	0		632119	0					
ANR	632646	Argument	"""endregion"""		632119	2					
ANR	632647	PrimaryExpression	"""endregion"""		632119	0					
ANR	632648	OrExpression	"findKeyword ( preproc , 0 , ""error"" ) || findKeyword ( preproc , 0 , ""warning"" ) || findKeyword ( preproc , 0 , ""line"" )"		632119	1		||			
ANR	632649	CallExpression	"findKeyword ( preproc , 0 , ""error"" )"		632119	0					
ANR	632650	Callee	findKeyword		632119	0					
ANR	632651	Identifier	findKeyword		632119	0					
ANR	632652	ArgumentList	preproc		632119	1					
ANR	632653	Argument	preproc		632119	0					
ANR	632654	Identifier	preproc		632119	0					
ANR	632655	Argument	0		632119	1					
ANR	632656	PrimaryExpression	0		632119	0					
ANR	632657	Argument	"""error"""		632119	2					
ANR	632658	PrimaryExpression	"""error"""		632119	0					
ANR	632659	OrExpression	"findKeyword ( preproc , 0 , ""warning"" ) || findKeyword ( preproc , 0 , ""line"" )"		632119	1		||			
ANR	632660	CallExpression	"findKeyword ( preproc , 0 , ""warning"" )"		632119	0					
ANR	632661	Callee	findKeyword		632119	0					
ANR	632662	Identifier	findKeyword		632119	0					
ANR	632663	ArgumentList	preproc		632119	1					
ANR	632664	Argument	preproc		632119	0					
ANR	632665	Identifier	preproc		632119	0					
ANR	632666	Argument	0		632119	1					
ANR	632667	PrimaryExpression	0		632119	0					
ANR	632668	Argument	"""warning"""		632119	2					
ANR	632669	PrimaryExpression	"""warning"""		632119	0					
ANR	632670	CallExpression	"findKeyword ( preproc , 0 , ""line"" )"		632119	1					
ANR	632671	Callee	findKeyword		632119	0					
ANR	632672	Identifier	findKeyword		632119	0					
ANR	632673	ArgumentList	preproc		632119	1					
ANR	632674	Argument	preproc		632119	0					
ANR	632675	Identifier	preproc		632119	0					
ANR	632676	Argument	0		632119	1					
ANR	632677	PrimaryExpression	0		632119	0					
ANR	632678	Argument	"""line"""		632119	2					
ANR	632679	PrimaryExpression	"""line"""		632119	0					
ANR	632680	CompoundStatement		140:3:3796:3796	632119	1					
ANR	632681	ExpressionStatement	currentLine = rtrim ( currentLine )	589:4:17350:17382	632119	0	True				
ANR	632682	AssignmentExpression	currentLine = rtrim ( currentLine )		632119	0		=			
ANR	632683	Identifier	currentLine		632119	0					
ANR	632684	CallExpression	rtrim ( currentLine )		632119	1					
ANR	632685	Callee	rtrim		632119	0					
ANR	632686	Identifier	rtrim		632119	0					
ANR	632687	ArgumentList	currentLine		632119	1					
ANR	632688	Argument	currentLine		632119	0					
ANR	632689	Identifier	currentLine		632119	0					
ANR	632690	IfStatement	if ( formattedLine . length ( ) > 0 && formattedLine [ 0 ] == '{' )		632119	1					
ANR	632691	Condition	formattedLine . length ( ) > 0 && formattedLine [ 0 ] == '{'	591:8:17437:17489	632119	0	True				
ANR	632692	AndExpression	formattedLine . length ( ) > 0 && formattedLine [ 0 ] == '{'		632119	0		&&			
ANR	632693	RelationalExpression	formattedLine . length ( ) > 0		632119	0		>			
ANR	632694	CallExpression	formattedLine . length ( )		632119	0					
ANR	632695	Callee	formattedLine . length		632119	0					
ANR	632696	MemberAccess	formattedLine . length		632119	0					
ANR	632697	Identifier	formattedLine		632119	0					
ANR	632698	Identifier	length		632119	1					
ANR	632699	ArgumentList			632119	1					
ANR	632700	PrimaryExpression	0		632119	1					
ANR	632701	EqualityExpression	formattedLine [ 0 ] == '{'		632119	1		==			
ANR	632702	ArrayIndexing	formattedLine [ 0 ]		632119	0					
ANR	632703	Identifier	formattedLine		632119	0					
ANR	632704	PrimaryExpression	0		632119	1					
ANR	632705	PrimaryExpression	'{'		632119	1					
ANR	632706	CompoundStatement		144:4:3948:3948	632119	1					
ANR	632707	ExpressionStatement	isInLineBreak = true	593:5:17503:17523	632119	0	True				
ANR	632708	AssignmentExpression	isInLineBreak = true		632119	0		=			
ANR	632709	Identifier	isInLineBreak		632119	0					
ANR	632710	Identifier	true		632119	1					
ANR	632711	ExpressionStatement	isInBraceRunIn = false	594:5:17530:17552	632119	1	True				
ANR	632712	AssignmentExpression	isInBraceRunIn = false		632119	0		=			
ANR	632713	Identifier	isInBraceRunIn		632119	0					
ANR	632714	Identifier	false		632119	1					
ANR	632715	IfStatement	if ( previousCommandChar == '}' )		632119	2					
ANR	632716	Condition	previousCommandChar == '}'	596:8:17568:17593	632119	0	True				
ANR	632717	EqualityExpression	previousCommandChar == '}'		632119	0		==			
ANR	632718	Identifier	previousCommandChar		632119	0					
ANR	632719	PrimaryExpression	'}'		632119	1					
ANR	632720	ExpressionStatement	currentHeader = nullptr	597:5:17601:17624	632119	1	True				
ANR	632721	AssignmentExpression	currentHeader = nullptr		632119	0		=			
ANR	632722	Identifier	currentHeader		632119	0					
ANR	632723	Identifier	nullptr		632119	1					
ANR	632724	ExpressionStatement	isInLineComment = true	598:4:17630:17652	632119	3	True				
ANR	632725	AssignmentExpression	isInLineComment = true		632119	0		=			
ANR	632726	Identifier	isInLineComment		632119	0					
ANR	632727	Identifier	true		632119	1					
ANR	632728	ExpressionStatement	appendCurrentChar ( )	599:4:17658:17677	632119	4	True				
ANR	632729	CallExpression	appendCurrentChar ( )		632119	0					
ANR	632730	Callee	appendCurrentChar		632119	0					
ANR	632731	Identifier	appendCurrentChar		632119	0					
ANR	632732	ArgumentList			632119	1					
ANR	632733	ContinueStatement	continue ;	600:4:17683:17691	632119	5	True				
ANR	632734	IfStatement	if ( isInPreprocessor )		632119	8					
ANR	632735	Condition	isInPreprocessor	604:6:17709:17724	632119	0	True				
ANR	632736	Identifier	isInPreprocessor		632119	0					
ANR	632737	CompoundStatement		157:2:4181:4181	632119	1					
ANR	632738	ExpressionStatement	appendCurrentChar ( )	606:3:17734:17753	632119	0	True				
ANR	632739	CallExpression	appendCurrentChar ( )		632119	0					
ANR	632740	Callee	appendCurrentChar		632119	0					
ANR	632741	Identifier	appendCurrentChar		632119	0					
ANR	632742	ArgumentList			632119	1					
ANR	632743	ContinueStatement	continue ;	607:3:17758:17766	632119	1	True				
ANR	632744	IfStatement	if ( isInTemplate && shouldCloseTemplates )		632119	9					
ANR	632745	Condition	isInTemplate && shouldCloseTemplates	610:6:17779:17814	632119	0	True				
ANR	632746	AndExpression	isInTemplate && shouldCloseTemplates		632119	0		&&			
ANR	632747	Identifier	isInTemplate		632119	0					
ANR	632748	Identifier	shouldCloseTemplates		632119	1					
ANR	632749	CompoundStatement		163:2:4271:4271	632119	1					
ANR	632750	IfStatement	if ( previousNonWSChar == '>' && isWhiteSpace ( currentChar ) && peekNextChar ( ) == '>' )		632119	0					
ANR	632751	Condition	previousNonWSChar == '>' && isWhiteSpace ( currentChar ) && peekNextChar ( ) == '>'	612:7:17828:17905	632119	0	True				
ANR	632752	AndExpression	previousNonWSChar == '>' && isWhiteSpace ( currentChar ) && peekNextChar ( ) == '>'		632119	0		&&			
ANR	632753	EqualityExpression	previousNonWSChar == '>'		632119	0		==			
ANR	632754	Identifier	previousNonWSChar		632119	0					
ANR	632755	PrimaryExpression	'>'		632119	1					
ANR	632756	AndExpression	isWhiteSpace ( currentChar ) && peekNextChar ( ) == '>'		632119	1		&&			
ANR	632757	CallExpression	isWhiteSpace ( currentChar )		632119	0					
ANR	632758	Callee	isWhiteSpace		632119	0					
ANR	632759	Identifier	isWhiteSpace		632119	0					
ANR	632760	ArgumentList	currentChar		632119	1					
ANR	632761	Argument	currentChar		632119	0					
ANR	632762	Identifier	currentChar		632119	0					
ANR	632763	EqualityExpression	peekNextChar ( ) == '>'		632119	1		==			
ANR	632764	CallExpression	peekNextChar ( )		632119	0					
ANR	632765	Callee	peekNextChar		632119	0					
ANR	632766	Identifier	peekNextChar		632119	0					
ANR	632767	ArgumentList			632119	1					
ANR	632768	PrimaryExpression	'>'		632119	1					
ANR	632769	ContinueStatement	continue ;	613:4:17912:17920	632119	1	True				
ANR	632770	IfStatement	if ( shouldRemoveNextClosingBrace && currentChar == '}' )		632119	10					
ANR	632771	Condition	shouldRemoveNextClosingBrace && currentChar == '}'	616:6:17933:17982	632119	0	True				
ANR	632772	AndExpression	shouldRemoveNextClosingBrace && currentChar == '}'		632119	0		&&			
ANR	632773	Identifier	shouldRemoveNextClosingBrace		632119	0					
ANR	632774	EqualityExpression	currentChar == '}'		632119	1		==			
ANR	632775	Identifier	currentChar		632119	0					
ANR	632776	PrimaryExpression	'}'		632119	1					
ANR	632777	CompoundStatement		169:2:4439:4439	632119	1					
ANR	632778	ExpressionStatement	currentLine [ charNum ] = currentChar = ' '	618:3:17992:18032	632119	0	True				
ANR	632779	AssignmentExpression	currentLine [ charNum ] = currentChar = ' '		632119	0		=			
ANR	632780	ArrayIndexing	currentLine [ charNum ]		632119	0					
ANR	632781	Identifier	currentLine		632119	0					
ANR	632782	Identifier	charNum		632119	1					
ANR	632783	AssignmentExpression	currentChar = ' '		632119	1		=			
ANR	632784	Identifier	currentChar		632119	0					
ANR	632785	PrimaryExpression	' '		632119	1					
ANR	632786	ExpressionStatement	shouldRemoveNextClosingBrace = false	619:3:18037:18073	632119	1	True				
ANR	632787	AssignmentExpression	shouldRemoveNextClosingBrace = false		632119	0		=			
ANR	632788	Identifier	shouldRemoveNextClosingBrace		632119	0					
ANR	632789	Identifier	false		632119	1					
ANR	632790	ExpressionStatement	assert ( adjustChecksumIn ( - '}' ) )	620:3:18078:18108	632119	2	True				
ANR	632791	CallExpression	assert ( adjustChecksumIn ( - '}' ) )		632119	0					
ANR	632792	Callee	assert		632119	0					
ANR	632793	Identifier	assert		632119	0					
ANR	632794	ArgumentList	adjustChecksumIn ( - '}' )		632119	1					
ANR	632795	Argument	adjustChecksumIn ( - '}' )		632119	0					
ANR	632796	CallExpression	adjustChecksumIn ( - '}' )		632119	0					
ANR	632797	Callee	adjustChecksumIn		632119	0					
ANR	632798	Identifier	adjustChecksumIn		632119	0					
ANR	632799	ArgumentList	- '}'		632119	1					
ANR	632800	Argument	- '}'		632119	0					
ANR	632801	UnaryOperationExpression	- '}'		632119	0					
ANR	632802	UnaryOperator	-		632119	0					
ANR	632803	PrimaryExpression	'}'		632119	1					
ANR	632804	IfStatement	if ( isEmptyLine ( currentLine ) )		632119	3					
ANR	632805	Condition	isEmptyLine ( currentLine )	621:7:18117:18140	632119	0	True				
ANR	632806	CallExpression	isEmptyLine ( currentLine )		632119	0					
ANR	632807	Callee	isEmptyLine		632119	0					
ANR	632808	Identifier	isEmptyLine		632119	0					
ANR	632809	ArgumentList	currentLine		632119	1					
ANR	632810	Argument	currentLine		632119	0					
ANR	632811	Identifier	currentLine		632119	0					
ANR	632812	ContinueStatement	continue ;	622:4:18147:18155	632119	1	True				
ANR	632813	IfStatement	if ( isWhiteSpace ( currentChar ) )		632119	11					
ANR	632814	Condition	isWhiteSpace ( currentChar )	626:6:18223:18247	632119	0	True				
ANR	632815	CallExpression	isWhiteSpace ( currentChar )		632119	0					
ANR	632816	Callee	isWhiteSpace		632119	0					
ANR	632817	Identifier	isWhiteSpace		632119	0					
ANR	632818	ArgumentList	currentChar		632119	1					
ANR	632819	Argument	currentChar		632119	0					
ANR	632820	Identifier	currentChar		632119	0					
ANR	632821	CompoundStatement		179:2:4704:4704	632119	1					
ANR	632822	ExpressionStatement	appendCurrentChar ( )	628:3:18257:18276	632119	0	True				
ANR	632823	CallExpression	appendCurrentChar ( )		632119	0					
ANR	632824	Callee	appendCurrentChar		632119	0					
ANR	632825	Identifier	appendCurrentChar		632119	0					
ANR	632826	ArgumentList			632119	1					
ANR	632827	ContinueStatement	continue ;	629:3:18281:18289	632119	1	True				
ANR	632828	IfStatement	if ( currentChar == '#' )		632119	12					
ANR	632829	Condition	currentChar == '#'	637:6:18522:18539	632119	0	True				
ANR	632830	EqualityExpression	currentChar == '#'		632119	0		==			
ANR	632831	Identifier	currentChar		632119	0					
ANR	632832	PrimaryExpression	'#'		632119	1					
ANR	632833	CompoundStatement		190:2:4996:4996	632119	1					
ANR	632834	ExpressionStatement	isInPreprocessor = true	639:3:18549:18572	632119	0	True				
ANR	632835	AssignmentExpression	isInPreprocessor = true		632119	0		=			
ANR	632836	Identifier	isInPreprocessor		632119	0					
ANR	632837	Identifier	true		632119	1					
ANR	632838	IfStatement	if ( formattedLine . length ( ) > 0 && formattedLine [ 0 ] == '{' )		632119	1					
ANR	632839	Condition	formattedLine . length ( ) > 0 && formattedLine [ 0 ] == '{'	641:7:18604:18656	632119	0	True				
ANR	632840	AndExpression	formattedLine . length ( ) > 0 && formattedLine [ 0 ] == '{'		632119	0		&&			
ANR	632841	RelationalExpression	formattedLine . length ( ) > 0		632119	0		>			
ANR	632842	CallExpression	formattedLine . length ( )		632119	0					
ANR	632843	Callee	formattedLine . length		632119	0					
ANR	632844	MemberAccess	formattedLine . length		632119	0					
ANR	632845	Identifier	formattedLine		632119	0					
ANR	632846	Identifier	length		632119	1					
ANR	632847	ArgumentList			632119	1					
ANR	632848	PrimaryExpression	0		632119	1					
ANR	632849	EqualityExpression	formattedLine [ 0 ] == '{'		632119	1		==			
ANR	632850	ArrayIndexing	formattedLine [ 0 ]		632119	0					
ANR	632851	Identifier	formattedLine		632119	0					
ANR	632852	PrimaryExpression	0		632119	1					
ANR	632853	PrimaryExpression	'{'		632119	1					
ANR	632854	CompoundStatement		194:3:5114:5114	632119	1					
ANR	632855	ExpressionStatement	isInLineBreak = true	643:4:18668:18688	632119	0	True				
ANR	632856	AssignmentExpression	isInLineBreak = true		632119	0		=			
ANR	632857	Identifier	isInLineBreak		632119	0					
ANR	632858	Identifier	true		632119	1					
ANR	632859	ExpressionStatement	isInBraceRunIn = false	644:4:18694:18716	632119	1	True				
ANR	632860	AssignmentExpression	isInBraceRunIn = false		632119	0		=			
ANR	632861	Identifier	isInBraceRunIn		632119	0					
ANR	632862	Identifier	false		632119	1					
ANR	632863	ExpressionStatement	processPreprocessor ( )	646:3:18726:18747	632119	2	True				
ANR	632864	CallExpression	processPreprocessor ( )		632119	0					
ANR	632865	Callee	processPreprocessor		632119	0					
ANR	632866	Identifier	processPreprocessor		632119	0					
ANR	632867	ArgumentList			632119	1					
ANR	632868	IfStatement	"if ( shouldIndentPreprocBlock && ( isBraceType ( braceTypeStack -> back ( ) , NULL_TYPE ) || isBraceType ( braceTypeStack -> back ( ) , NAMESPACE_TYPE ) ) && ! foundClassHeader && ! isInClassInitializer && sourceIterator -> tellg ( ) > preprocBlockEnd )"		632119	3					
ANR	632869	Condition	"shouldIndentPreprocBlock && ( isBraceType ( braceTypeStack -> back ( ) , NULL_TYPE ) || isBraceType ( braceTypeStack -> back ( ) , NAMESPACE_TYPE ) ) && ! foundClassHeader && ! isInClassInitializer && sourceIterator -> tellg ( ) > preprocBlockEnd"	648:7:18804:19084	632119	0	True				
ANR	632870	AndExpression	"shouldIndentPreprocBlock && ( isBraceType ( braceTypeStack -> back ( ) , NULL_TYPE ) || isBraceType ( braceTypeStack -> back ( ) , NAMESPACE_TYPE ) ) && ! foundClassHeader && ! isInClassInitializer && sourceIterator -> tellg ( ) > preprocBlockEnd"		632119	0		&&			
ANR	632871	Identifier	shouldIndentPreprocBlock		632119	0					
ANR	632872	AndExpression	"( isBraceType ( braceTypeStack -> back ( ) , NULL_TYPE ) || isBraceType ( braceTypeStack -> back ( ) , NAMESPACE_TYPE ) ) && ! foundClassHeader && ! isInClassInitializer && sourceIterator -> tellg ( ) > preprocBlockEnd"		632119	1		&&			
ANR	632873	OrExpression	"isBraceType ( braceTypeStack -> back ( ) , NULL_TYPE ) || isBraceType ( braceTypeStack -> back ( ) , NAMESPACE_TYPE )"		632119	0		||			
ANR	632874	CallExpression	"isBraceType ( braceTypeStack -> back ( ) , NULL_TYPE )"		632119	0					
ANR	632875	Callee	isBraceType		632119	0					
ANR	632876	Identifier	isBraceType		632119	0					
ANR	632877	ArgumentList	braceTypeStack -> back ( )		632119	1					
ANR	632878	Argument	braceTypeStack -> back ( )		632119	0					
ANR	632879	CallExpression	braceTypeStack -> back ( )		632119	0					
ANR	632880	Callee	braceTypeStack -> back		632119	0					
ANR	632881	PtrMemberAccess	braceTypeStack -> back		632119	0					
ANR	632882	Identifier	braceTypeStack		632119	0					
ANR	632883	Identifier	back		632119	1					
ANR	632884	ArgumentList			632119	1					
ANR	632885	Argument	NULL_TYPE		632119	1					
ANR	632886	Identifier	NULL_TYPE		632119	0					
ANR	632887	CallExpression	"isBraceType ( braceTypeStack -> back ( ) , NAMESPACE_TYPE )"		632119	1					
ANR	632888	Callee	isBraceType		632119	0					
ANR	632889	Identifier	isBraceType		632119	0					
ANR	632890	ArgumentList	braceTypeStack -> back ( )		632119	1					
ANR	632891	Argument	braceTypeStack -> back ( )		632119	0					
ANR	632892	CallExpression	braceTypeStack -> back ( )		632119	0					
ANR	632893	Callee	braceTypeStack -> back		632119	0					
ANR	632894	PtrMemberAccess	braceTypeStack -> back		632119	0					
ANR	632895	Identifier	braceTypeStack		632119	0					
ANR	632896	Identifier	back		632119	1					
ANR	632897	ArgumentList			632119	1					
ANR	632898	Argument	NAMESPACE_TYPE		632119	1					
ANR	632899	Identifier	NAMESPACE_TYPE		632119	0					
ANR	632900	AndExpression	! foundClassHeader && ! isInClassInitializer && sourceIterator -> tellg ( ) > preprocBlockEnd		632119	1		&&			
ANR	632901	UnaryOperationExpression	! foundClassHeader		632119	0					
ANR	632902	UnaryOperator	!		632119	0					
ANR	632903	Identifier	foundClassHeader		632119	1					
ANR	632904	AndExpression	! isInClassInitializer && sourceIterator -> tellg ( ) > preprocBlockEnd		632119	1		&&			
ANR	632905	UnaryOperationExpression	! isInClassInitializer		632119	0					
ANR	632906	UnaryOperator	!		632119	0					
ANR	632907	Identifier	isInClassInitializer		632119	1					
ANR	632908	RelationalExpression	sourceIterator -> tellg ( ) > preprocBlockEnd		632119	1		>			
ANR	632909	CallExpression	sourceIterator -> tellg ( )		632119	0					
ANR	632910	Callee	sourceIterator -> tellg		632119	0					
ANR	632911	PtrMemberAccess	sourceIterator -> tellg		632119	0					
ANR	632912	Identifier	sourceIterator		632119	0					
ANR	632913	Identifier	tellg		632119	1					
ANR	632914	ArgumentList			632119	1					
ANR	632915	Identifier	preprocBlockEnd		632119	1					
ANR	632916	CompoundStatement		208:4:5590:5662	632119	1					
ANR	632917	IdentifierDeclStatement	string preproc = ASBeautifier :: extractPreprocessorStatement ( currentLine ) ;	656:4:19138:19210	632119	0	True				
ANR	632918	IdentifierDecl	preproc = ASBeautifier :: extractPreprocessorStatement ( currentLine )		632119	0					
ANR	632919	IdentifierDeclType	string		632119	0					
ANR	632920	Identifier	preproc		632119	1					
ANR	632921	AssignmentExpression	preproc = ASBeautifier :: extractPreprocessorStatement ( currentLine )		632119	2		=			
ANR	632922	Identifier	preproc		632119	0					
ANR	632923	CallExpression	ASBeautifier :: extractPreprocessorStatement ( currentLine )		632119	1					
ANR	632924	Callee	ASBeautifier :: extractPreprocessorStatement		632119	0					
ANR	632925	Identifier	ASBeautifier :: extractPreprocessorStatement		632119	0					
ANR	632926	ArgumentList	currentLine		632119	1					
ANR	632927	Argument	currentLine		632119	0					
ANR	632928	Identifier	currentLine		632119	0					
ANR	632929	IfStatement	"if ( preproc . length ( ) >= 2 && preproc . substr ( 0 , 2 ) == ""if"" )"		632119	1					
ANR	632930	Condition	"preproc . length ( ) >= 2 && preproc . substr ( 0 , 2 ) == ""if"""	657:8:19220:19272	632119	0	True				
ANR	632931	AndExpression	"preproc . length ( ) >= 2 && preproc . substr ( 0 , 2 ) == ""if"""		632119	0		&&			
ANR	632932	RelationalExpression	preproc . length ( ) >= 2		632119	0		>=			
ANR	632933	CallExpression	preproc . length ( )		632119	0					
ANR	632934	Callee	preproc . length		632119	0					
ANR	632935	MemberAccess	preproc . length		632119	0					
ANR	632936	Identifier	preproc		632119	0					
ANR	632937	Identifier	length		632119	1					
ANR	632938	ArgumentList			632119	1					
ANR	632939	PrimaryExpression	2		632119	1					
ANR	632940	EqualityExpression	"preproc . substr ( 0 , 2 ) == ""if"""		632119	1		==			
ANR	632941	CallExpression	"preproc . substr ( 0 , 2 )"		632119	0					
ANR	632942	Callee	preproc . substr		632119	0					
ANR	632943	MemberAccess	preproc . substr		632119	0					
ANR	632944	Identifier	preproc		632119	0					
ANR	632945	Identifier	substr		632119	1					
ANR	632946	ArgumentList	0		632119	1					
ANR	632947	Argument	0		632119	0					
ANR	632948	PrimaryExpression	0		632119	0					
ANR	632949	Argument	2		632119	1					
ANR	632950	PrimaryExpression	2		632119	0					
ANR	632951	PrimaryExpression	"""if"""		632119	1					
ANR	632952	CompoundStatement		210:4:5755:5755	632119	1					
ANR	632953	IfStatement	if ( isImmediatelyPostPreprocessor )		632119	0					
ANR	632954	Condition	isImmediatelyPostPreprocessor	659:9:19314:19342	632119	0	True				
ANR	632955	Identifier	isImmediatelyPostPreprocessor		632119	0					
ANR	632956	ExpressionStatement	breakLine ( )	660:6:19351:19362	632119	1	True				
ANR	632957	CallExpression	breakLine ( )		632119	0					
ANR	632958	Callee	breakLine		632119	0					
ANR	632959	Identifier	breakLine		632119	0					
ANR	632960	ArgumentList			632119	1					
ANR	632961	ExpressionStatement	"isIndentableProprocessorBlock = isIndentablePreprocessorBlock ( currentLine , charNum )"	661:5:19369:19452	632119	1	True				
ANR	632962	AssignmentExpression	"isIndentableProprocessorBlock = isIndentablePreprocessorBlock ( currentLine , charNum )"		632119	0		=			
ANR	632963	Identifier	isIndentableProprocessorBlock		632119	0					
ANR	632964	CallExpression	"isIndentablePreprocessorBlock ( currentLine , charNum )"		632119	1					
ANR	632965	Callee	isIndentablePreprocessorBlock		632119	0					
ANR	632966	Identifier	isIndentablePreprocessorBlock		632119	0					
ANR	632967	ArgumentList	currentLine		632119	1					
ANR	632968	Argument	currentLine		632119	0					
ANR	632969	Identifier	currentLine		632119	0					
ANR	632970	Argument	charNum		632119	1					
ANR	632971	Identifier	charNum		632119	0					
ANR	632972	ExpressionStatement	isIndentableProprocessor = isIndentableProprocessorBlock	662:5:19459:19515	632119	2	True				
ANR	632973	AssignmentExpression	isIndentableProprocessor = isIndentableProprocessorBlock		632119	0		=			
ANR	632974	Identifier	isIndentableProprocessor		632119	0					
ANR	632975	Identifier	isIndentableProprocessorBlock		632119	1					
ANR	632976	IfStatement	if ( isIndentableProprocessorBlock && charNum < ( int ) currentLine . length ( ) - 1 && isWhiteSpace ( currentLine [ charNum + 1 ] ) )		632119	4					
ANR	632977	Condition	isIndentableProprocessorBlock && charNum < ( int ) currentLine . length ( ) - 1 && isWhiteSpace ( currentLine [ charNum + 1 ] )	665:7:19535:19671	632119	0	True				
ANR	632978	AndExpression	isIndentableProprocessorBlock && charNum < ( int ) currentLine . length ( ) - 1 && isWhiteSpace ( currentLine [ charNum + 1 ] )		632119	0		&&			
ANR	632979	Identifier	isIndentableProprocessorBlock		632119	0					
ANR	632980	AndExpression	charNum < ( int ) currentLine . length ( ) - 1 && isWhiteSpace ( currentLine [ charNum + 1 ] )		632119	1		&&			
ANR	632981	RelationalExpression	charNum < ( int ) currentLine . length ( ) - 1		632119	0		<			
ANR	632982	Identifier	charNum		632119	0					
ANR	632983	AdditiveExpression	( int ) currentLine . length ( ) - 1		632119	1		-			
ANR	632984	CastExpression	( int ) currentLine . length ( )		632119	0					
ANR	632985	CastTarget	int		632119	0					
ANR	632986	CallExpression	currentLine . length ( )		632119	1					
ANR	632987	Callee	currentLine . length		632119	0					
ANR	632988	MemberAccess	currentLine . length		632119	0					
ANR	632989	Identifier	currentLine		632119	0					
ANR	632990	Identifier	length		632119	1					
ANR	632991	ArgumentList			632119	1					
ANR	632992	PrimaryExpression	1		632119	1					
ANR	632993	CallExpression	isWhiteSpace ( currentLine [ charNum + 1 ] )		632119	1					
ANR	632994	Callee	isWhiteSpace		632119	0					
ANR	632995	Identifier	isWhiteSpace		632119	0					
ANR	632996	ArgumentList	currentLine [ charNum + 1 ]		632119	1					
ANR	632997	Argument	currentLine [ charNum + 1 ]		632119	0					
ANR	632998	ArrayIndexing	currentLine [ charNum + 1 ]		632119	0					
ANR	632999	Identifier	currentLine		632119	0					
ANR	633000	AdditiveExpression	charNum + 1		632119	1		+			
ANR	633001	Identifier	charNum		632119	0					
ANR	633002	PrimaryExpression	1		632119	1					
ANR	633003	CompoundStatement		221:4:6135:6202	632119	1					
ANR	633004	IdentifierDeclStatement	"size_t nextText = currentLine . find_first_not_of ( "" \\t"" , charNum + 1 ) ;"	669:4:19683:19750	632119	0	True				
ANR	633005	IdentifierDecl	"nextText = currentLine . find_first_not_of ( "" \\t"" , charNum + 1 )"		632119	0					
ANR	633006	IdentifierDeclType	size_t		632119	0					
ANR	633007	Identifier	nextText		632119	1					
ANR	633008	AssignmentExpression	"nextText = currentLine . find_first_not_of ( "" \\t"" , charNum + 1 )"		632119	2		=			
ANR	633009	Identifier	nextText		632119	0					
ANR	633010	CallExpression	"currentLine . find_first_not_of ( "" \\t"" , charNum + 1 )"		632119	1					
ANR	633011	Callee	currentLine . find_first_not_of		632119	0					
ANR	633012	MemberAccess	currentLine . find_first_not_of		632119	0					
ANR	633013	Identifier	currentLine		632119	0					
ANR	633014	Identifier	find_first_not_of		632119	1					
ANR	633015	ArgumentList	""" \\t"""		632119	1					
ANR	633016	Argument	""" \\t"""		632119	0					
ANR	633017	PrimaryExpression	""" \\t"""		632119	0					
ANR	633018	Argument	charNum + 1		632119	1					
ANR	633019	AdditiveExpression	charNum + 1		632119	0		+			
ANR	633020	Identifier	charNum		632119	0					
ANR	633021	PrimaryExpression	1		632119	1					
ANR	633022	IfStatement	if ( nextText != string :: npos )		632119	1					
ANR	633023	Condition	nextText != string :: npos	670:8:19760:19783	632119	0	True				
ANR	633024	EqualityExpression	nextText != string :: npos		632119	0		!=			
ANR	633025	Identifier	nextText		632119	0					
ANR	633026	Identifier	string :: npos		632119	1					
ANR	633027	ExpressionStatement	"currentLine . erase ( charNum + 1 , nextText - charNum - 1 )"	671:5:19791:19845	632119	1	True				
ANR	633028	CallExpression	"currentLine . erase ( charNum + 1 , nextText - charNum - 1 )"		632119	0					
ANR	633029	Callee	currentLine . erase		632119	0					
ANR	633030	MemberAccess	currentLine . erase		632119	0					
ANR	633031	Identifier	currentLine		632119	0					
ANR	633032	Identifier	erase		632119	1					
ANR	633033	ArgumentList	charNum + 1		632119	1					
ANR	633034	Argument	charNum + 1		632119	0					
ANR	633035	AdditiveExpression	charNum + 1		632119	0		+			
ANR	633036	Identifier	charNum		632119	0					
ANR	633037	PrimaryExpression	1		632119	1					
ANR	633038	Argument	nextText - charNum - 1		632119	1					
ANR	633039	AdditiveExpression	nextText - charNum - 1		632119	0		-			
ANR	633040	Identifier	nextText		632119	0					
ANR	633041	AdditiveExpression	charNum - 1		632119	1		-			
ANR	633042	Identifier	charNum		632119	0					
ANR	633043	PrimaryExpression	1		632119	1					
ANR	633044	IfStatement	if ( isIndentableProprocessorBlock && sourceIterator -> tellg ( ) >= preprocBlockEnd )		632119	5					
ANR	633045	Condition	isIndentableProprocessorBlock && sourceIterator -> tellg ( ) >= preprocBlockEnd	673:7:19859:19944	632119	0	True				
ANR	633046	AndExpression	isIndentableProprocessorBlock && sourceIterator -> tellg ( ) >= preprocBlockEnd		632119	0		&&			
ANR	633047	Identifier	isIndentableProprocessorBlock		632119	0					
ANR	633048	RelationalExpression	sourceIterator -> tellg ( ) >= preprocBlockEnd		632119	1		>=			
ANR	633049	CallExpression	sourceIterator -> tellg ( )		632119	0					
ANR	633050	Callee	sourceIterator -> tellg		632119	0					
ANR	633051	PtrMemberAccess	sourceIterator -> tellg		632119	0					
ANR	633052	Identifier	sourceIterator		632119	0					
ANR	633053	Identifier	tellg		632119	1					
ANR	633054	ArgumentList			632119	1					
ANR	633055	Identifier	preprocBlockEnd		632119	1					
ANR	633056	ExpressionStatement	isIndentableProprocessorBlock = false	675:4:19951:19988	632119	1	True				
ANR	633057	AssignmentExpression	isIndentableProprocessorBlock = false		632119	0		=			
ANR	633058	Identifier	isIndentableProprocessorBlock		632119	0					
ANR	633059	Identifier	false		632119	1					
ANR	633060	IfStatement	if ( isImmediatelyPostComment )		632119	13					
ANR	633061	Condition	isImmediatelyPostComment	681:6:20087:20110	632119	0	True				
ANR	633062	Identifier	isImmediatelyPostComment		632119	0					
ANR	633063	CompoundStatement		234:2:6567:6567	632119	1					
ANR	633064	ExpressionStatement	caseHeaderFollowsComments = false	683:3:20120:20153	632119	0	True				
ANR	633065	AssignmentExpression	caseHeaderFollowsComments = false		632119	0		=			
ANR	633066	Identifier	caseHeaderFollowsComments		632119	0					
ANR	633067	Identifier	false		632119	1					
ANR	633068	ExpressionStatement	isImmediatelyPostComment = false	684:3:20158:20190	632119	1	True				
ANR	633069	AssignmentExpression	isImmediatelyPostComment = false		632119	0		=			
ANR	633070	Identifier	isImmediatelyPostComment		632119	0					
ANR	633071	Identifier	false		632119	1					
ANR	633072	ExpressionStatement	isCharImmediatelyPostComment = true	685:3:20195:20230	632119	2	True				
ANR	633073	AssignmentExpression	isCharImmediatelyPostComment = true		632119	0		=			
ANR	633074	Identifier	isCharImmediatelyPostComment		632119	0					
ANR	633075	Identifier	true		632119	1					
ANR	633076	IfStatement	if ( isImmediatelyPostLineComment )		632119	14					
ANR	633077	Condition	isImmediatelyPostLineComment	688:6:20243:20270	632119	0	True				
ANR	633078	Identifier	isImmediatelyPostLineComment		632119	0					
ANR	633079	CompoundStatement		241:2:6727:6727	632119	1					
ANR	633080	ExpressionStatement	caseHeaderFollowsComments = false	690:3:20280:20313	632119	0	True				
ANR	633081	AssignmentExpression	caseHeaderFollowsComments = false		632119	0		=			
ANR	633082	Identifier	caseHeaderFollowsComments		632119	0					
ANR	633083	Identifier	false		632119	1					
ANR	633084	ExpressionStatement	isImmediatelyPostLineComment = false	691:3:20318:20354	632119	1	True				
ANR	633085	AssignmentExpression	isImmediatelyPostLineComment = false		632119	0		=			
ANR	633086	Identifier	isImmediatelyPostLineComment		632119	0					
ANR	633087	Identifier	false		632119	1					
ANR	633088	ExpressionStatement	isCharImmediatelyPostLineComment = true	692:3:20359:20398	632119	2	True				
ANR	633089	AssignmentExpression	isCharImmediatelyPostLineComment = true		632119	0		=			
ANR	633090	Identifier	isCharImmediatelyPostLineComment		632119	0					
ANR	633091	Identifier	true		632119	1					
ANR	633092	IfStatement	if ( isImmediatelyPostReturn )		632119	15					
ANR	633093	Condition	isImmediatelyPostReturn	695:6:20411:20433	632119	0	True				
ANR	633094	Identifier	isImmediatelyPostReturn		632119	0					
ANR	633095	CompoundStatement		248:2:6890:6890	632119	1					
ANR	633096	ExpressionStatement	isImmediatelyPostReturn = false	697:3:20443:20474	632119	0	True				
ANR	633097	AssignmentExpression	isImmediatelyPostReturn = false		632119	0		=			
ANR	633098	Identifier	isImmediatelyPostReturn		632119	0					
ANR	633099	Identifier	false		632119	1					
ANR	633100	ExpressionStatement	isCharImmediatelyPostReturn = true	698:3:20479:20513	632119	1	True				
ANR	633101	AssignmentExpression	isCharImmediatelyPostReturn = true		632119	0		=			
ANR	633102	Identifier	isCharImmediatelyPostReturn		632119	0					
ANR	633103	Identifier	true		632119	1					
ANR	633104	IfStatement	if ( isImmediatelyPostThrow )		632119	16					
ANR	633105	Condition	isImmediatelyPostThrow	701:6:20526:20547	632119	0	True				
ANR	633106	Identifier	isImmediatelyPostThrow		632119	0					
ANR	633107	CompoundStatement		254:2:7004:7004	632119	1					
ANR	633108	ExpressionStatement	isImmediatelyPostThrow = false	703:3:20557:20587	632119	0	True				
ANR	633109	AssignmentExpression	isImmediatelyPostThrow = false		632119	0		=			
ANR	633110	Identifier	isImmediatelyPostThrow		632119	0					
ANR	633111	Identifier	false		632119	1					
ANR	633112	ExpressionStatement	isCharImmediatelyPostThrow = true	704:3:20592:20625	632119	1	True				
ANR	633113	AssignmentExpression	isCharImmediatelyPostThrow = true		632119	0		=			
ANR	633114	Identifier	isCharImmediatelyPostThrow		632119	0					
ANR	633115	Identifier	true		632119	1					
ANR	633116	IfStatement	if ( isImmediatelyPostNewDelete )		632119	17					
ANR	633117	Condition	isImmediatelyPostNewDelete	707:6:20638:20663	632119	0	True				
ANR	633118	Identifier	isImmediatelyPostNewDelete		632119	0					
ANR	633119	CompoundStatement		260:2:7120:7120	632119	1					
ANR	633120	ExpressionStatement	isImmediatelyPostNewDelete = false	709:3:20673:20707	632119	0	True				
ANR	633121	AssignmentExpression	isImmediatelyPostNewDelete = false		632119	0		=			
ANR	633122	Identifier	isImmediatelyPostNewDelete		632119	0					
ANR	633123	Identifier	false		632119	1					
ANR	633124	ExpressionStatement	isCharImmediatelyPostNewDelete = true	710:3:20712:20749	632119	1	True				
ANR	633125	AssignmentExpression	isCharImmediatelyPostNewDelete = true		632119	0		=			
ANR	633126	Identifier	isCharImmediatelyPostNewDelete		632119	0					
ANR	633127	Identifier	true		632119	1					
ANR	633128	IfStatement	if ( isImmediatelyPostOperator )		632119	18					
ANR	633129	Condition	isImmediatelyPostOperator	713:6:20762:20786	632119	0	True				
ANR	633130	Identifier	isImmediatelyPostOperator		632119	0					
ANR	633131	CompoundStatement		266:2:7243:7243	632119	1					
ANR	633132	ExpressionStatement	isImmediatelyPostOperator = false	715:3:20796:20829	632119	0	True				
ANR	633133	AssignmentExpression	isImmediatelyPostOperator = false		632119	0		=			
ANR	633134	Identifier	isImmediatelyPostOperator		632119	0					
ANR	633135	Identifier	false		632119	1					
ANR	633136	ExpressionStatement	isCharImmediatelyPostOperator = true	716:3:20834:20870	632119	1	True				
ANR	633137	AssignmentExpression	isCharImmediatelyPostOperator = true		632119	0		=			
ANR	633138	Identifier	isCharImmediatelyPostOperator		632119	0					
ANR	633139	Identifier	true		632119	1					
ANR	633140	IfStatement	if ( isImmediatelyPostTemplate )		632119	19					
ANR	633141	Condition	isImmediatelyPostTemplate	718:6:20882:20906	632119	0	True				
ANR	633142	Identifier	isImmediatelyPostTemplate		632119	0					
ANR	633143	CompoundStatement		271:2:7363:7363	632119	1					
ANR	633144	ExpressionStatement	isImmediatelyPostTemplate = false	720:3:20916:20949	632119	0	True				
ANR	633145	AssignmentExpression	isImmediatelyPostTemplate = false		632119	0		=			
ANR	633146	Identifier	isImmediatelyPostTemplate		632119	0					
ANR	633147	Identifier	false		632119	1					
ANR	633148	ExpressionStatement	isCharImmediatelyPostTemplate = true	721:3:20954:20990	632119	1	True				
ANR	633149	AssignmentExpression	isCharImmediatelyPostTemplate = true		632119	0		=			
ANR	633150	Identifier	isCharImmediatelyPostTemplate		632119	0					
ANR	633151	Identifier	true		632119	1					
ANR	633152	IfStatement	if ( isImmediatelyPostPointerOrReference )		632119	20					
ANR	633153	Condition	isImmediatelyPostPointerOrReference	723:6:21002:21036	632119	0	True				
ANR	633154	Identifier	isImmediatelyPostPointerOrReference		632119	0					
ANR	633155	CompoundStatement		276:2:7493:7493	632119	1					
ANR	633156	ExpressionStatement	isImmediatelyPostPointerOrReference = false	725:3:21046:21089	632119	0	True				
ANR	633157	AssignmentExpression	isImmediatelyPostPointerOrReference = false		632119	0		=			
ANR	633158	Identifier	isImmediatelyPostPointerOrReference		632119	0					
ANR	633159	Identifier	false		632119	1					
ANR	633160	ExpressionStatement	isCharImmediatelyPostPointerOrReference = true	726:3:21094:21140	632119	1	True				
ANR	633161	AssignmentExpression	isCharImmediatelyPostPointerOrReference = true		632119	0		=			
ANR	633162	Identifier	isCharImmediatelyPostPointerOrReference		632119	0					
ANR	633163	Identifier	true		632119	1					
ANR	633164	IfStatement	if ( isImmediatelyPostHeader )		632119	21					
ANR	633165	Condition	isImmediatelyPostHeader	730:6:21200:21222	632119	0	True				
ANR	633166	Identifier	isImmediatelyPostHeader		632119	0					
ANR	633167	CompoundStatement		283:2:7679:7679	632119	1					
ANR	633168	IfStatement	if ( currentChar != '{' && shouldAddBraces && ( shouldBreakOneLineStatements || ! isHeaderInMultiStatementLine ) && isOkToBreakBlock ( braceTypeStack -> back ( ) ) )		632119	0					
ANR	633169	Condition	currentChar != '{' && shouldAddBraces && ( shouldBreakOneLineStatements || ! isHeaderInMultiStatementLine ) && isOkToBreakBlock ( braceTypeStack -> back ( ) )	733:7:21265:21445	632119	0	True				
ANR	633170	AndExpression	currentChar != '{' && shouldAddBraces && ( shouldBreakOneLineStatements || ! isHeaderInMultiStatementLine ) && isOkToBreakBlock ( braceTypeStack -> back ( ) )		632119	0		&&			
ANR	633171	EqualityExpression	currentChar != '{'		632119	0		!=			
ANR	633172	Identifier	currentChar		632119	0					
ANR	633173	PrimaryExpression	'{'		632119	1					
ANR	633174	AndExpression	shouldAddBraces && ( shouldBreakOneLineStatements || ! isHeaderInMultiStatementLine ) && isOkToBreakBlock ( braceTypeStack -> back ( ) )		632119	1		&&			
ANR	633175	Identifier	shouldAddBraces		632119	0					
ANR	633176	AndExpression	( shouldBreakOneLineStatements || ! isHeaderInMultiStatementLine ) && isOkToBreakBlock ( braceTypeStack -> back ( ) )		632119	1		&&			
ANR	633177	OrExpression	shouldBreakOneLineStatements || ! isHeaderInMultiStatementLine		632119	0		||			
ANR	633178	Identifier	shouldBreakOneLineStatements		632119	0					
ANR	633179	UnaryOperationExpression	! isHeaderInMultiStatementLine		632119	1					
ANR	633180	UnaryOperator	!		632119	0					
ANR	633181	Identifier	isHeaderInMultiStatementLine		632119	1					
ANR	633182	CallExpression	isOkToBreakBlock ( braceTypeStack -> back ( ) )		632119	1					
ANR	633183	Callee	isOkToBreakBlock		632119	0					
ANR	633184	Identifier	isOkToBreakBlock		632119	0					
ANR	633185	ArgumentList	braceTypeStack -> back ( )		632119	1					
ANR	633186	Argument	braceTypeStack -> back ( )		632119	0					
ANR	633187	CallExpression	braceTypeStack -> back ( )		632119	0					
ANR	633188	Callee	braceTypeStack -> back		632119	0					
ANR	633189	PtrMemberAccess	braceTypeStack -> back		632119	0					
ANR	633190	Identifier	braceTypeStack		632119	0					
ANR	633191	Identifier	back		632119	1					
ANR	633192	ArgumentList			632119	1					
ANR	633193	CompoundStatement		290:4:7909:7950	632119	1					
ANR	633194	IdentifierDeclStatement	bool bracesAdded = addBracesToStatement ( ) ;	738:4:21457:21498	632119	0	True				
ANR	633195	IdentifierDecl	bracesAdded = addBracesToStatement ( )		632119	0					
ANR	633196	IdentifierDeclType	bool		632119	0					
ANR	633197	Identifier	bracesAdded		632119	1					
ANR	633198	AssignmentExpression	bracesAdded = addBracesToStatement ( )		632119	2		=			
ANR	633199	Identifier	bracesAdded		632119	0					
ANR	633200	CallExpression	addBracesToStatement ( )		632119	1					
ANR	633201	Callee	addBracesToStatement		632119	0					
ANR	633202	Identifier	addBracesToStatement		632119	0					
ANR	633203	ArgumentList			632119	1					
ANR	633204	IfStatement	if ( bracesAdded && ! shouldAddOneLineBraces )		632119	1					
ANR	633205	Condition	bracesAdded && ! shouldAddOneLineBraces	739:8:21508:21545	632119	0	True				
ANR	633206	AndExpression	bracesAdded && ! shouldAddOneLineBraces		632119	0		&&			
ANR	633207	Identifier	bracesAdded		632119	0					
ANR	633208	UnaryOperationExpression	! shouldAddOneLineBraces		632119	1					
ANR	633209	UnaryOperator	!		632119	0					
ANR	633210	Identifier	shouldAddOneLineBraces		632119	1					
ANR	633211	CompoundStatement		293:5:8011:8066	632119	1					
ANR	633212	IdentifierDeclStatement	"size_t firstText = currentLine . find_first_not_of ( "" \\t"" ) ;"	741:5:21559:21614	632119	0	True				
ANR	633213	IdentifierDecl	"firstText = currentLine . find_first_not_of ( "" \\t"" )"		632119	0					
ANR	633214	IdentifierDeclType	size_t		632119	0					
ANR	633215	Identifier	firstText		632119	1					
ANR	633216	AssignmentExpression	"firstText = currentLine . find_first_not_of ( "" \\t"" )"		632119	2		=			
ANR	633217	Identifier	firstText		632119	0					
ANR	633218	CallExpression	"currentLine . find_first_not_of ( "" \\t"" )"		632119	1					
ANR	633219	Callee	currentLine . find_first_not_of		632119	0					
ANR	633220	MemberAccess	currentLine . find_first_not_of		632119	0					
ANR	633221	Identifier	currentLine		632119	0					
ANR	633222	Identifier	find_first_not_of		632119	1					
ANR	633223	ArgumentList	""" \\t"""		632119	1					
ANR	633224	Argument	""" \\t"""		632119	0					
ANR	633225	PrimaryExpression	""" \\t"""		632119	0					
ANR	633226	ExpressionStatement	assert ( firstText != string :: npos )	742:5:21621:21654	632119	1	True				
ANR	633227	CallExpression	assert ( firstText != string :: npos )		632119	0					
ANR	633228	Callee	assert		632119	0					
ANR	633229	Identifier	assert		632119	0					
ANR	633230	ArgumentList	firstText != string :: npos		632119	1					
ANR	633231	Argument	firstText != string :: npos		632119	0					
ANR	633232	EqualityExpression	firstText != string :: npos		632119	0		!=			
ANR	633233	Identifier	firstText		632119	0					
ANR	633234	Identifier	string :: npos		632119	1					
ANR	633235	IfStatement	if ( ( int ) firstText == charNum || shouldBreakOneLineHeaders )		632119	2					
ANR	633236	Condition	( int ) firstText == charNum || shouldBreakOneLineHeaders	743:9:21665:21719	632119	0	True				
ANR	633237	OrExpression	( int ) firstText == charNum || shouldBreakOneLineHeaders		632119	0		||			
ANR	633238	EqualityExpression	( int ) firstText == charNum		632119	0		==			
ANR	633239	CastExpression	( int ) firstText		632119	0					
ANR	633240	CastTarget	int		632119	0					
ANR	633241	Identifier	firstText		632119	1					
ANR	633242	Identifier	charNum		632119	1					
ANR	633243	Identifier	shouldBreakOneLineHeaders		632119	1					
ANR	633244	ExpressionStatement	breakCurrentOneLineBlock = true	744:6:21728:21759	632119	1	True				
ANR	633245	AssignmentExpression	breakCurrentOneLineBlock = true		632119	0		=			
ANR	633246	Identifier	breakCurrentOneLineBlock		632119	0					
ANR	633247	Identifier	true		632119	1					
ANR	633248	ElseStatement	else		632119	0					
ANR	633249	IfStatement	if ( currentChar == '{' && shouldRemoveBraces )		632119	0					
ANR	633250	Condition	currentChar == '{' && shouldRemoveBraces	748:12:21815:21854	632119	0	True				
ANR	633251	AndExpression	currentChar == '{' && shouldRemoveBraces		632119	0		&&			
ANR	633252	EqualityExpression	currentChar == '{'		632119	0		==			
ANR	633253	Identifier	currentChar		632119	0					
ANR	633254	PrimaryExpression	'{'		632119	1					
ANR	633255	Identifier	shouldRemoveBraces		632119	1					
ANR	633256	CompoundStatement		302:4:8318:8366	632119	1					
ANR	633257	IdentifierDeclStatement	bool bracesRemoved = removeBracesFromStatement ( ) ;	750:4:21866:21914	632119	0	True				
ANR	633258	IdentifierDecl	bracesRemoved = removeBracesFromStatement ( )		632119	0					
ANR	633259	IdentifierDeclType	bool		632119	0					
ANR	633260	Identifier	bracesRemoved		632119	1					
ANR	633261	AssignmentExpression	bracesRemoved = removeBracesFromStatement ( )		632119	2		=			
ANR	633262	Identifier	bracesRemoved		632119	0					
ANR	633263	CallExpression	removeBracesFromStatement ( )		632119	1					
ANR	633264	Callee	removeBracesFromStatement		632119	0					
ANR	633265	Identifier	removeBracesFromStatement		632119	0					
ANR	633266	ArgumentList			632119	1					
ANR	633267	IfStatement	if ( bracesRemoved )		632119	1					
ANR	633268	Condition	bracesRemoved	751:8:21924:21936	632119	0	True				
ANR	633269	Identifier	bracesRemoved		632119	0					
ANR	633270	CompoundStatement		304:4:8395:8395	632119	1					
ANR	633271	ExpressionStatement	shouldRemoveNextClosingBrace = true	753:5:21950:21985	632119	0	True				
ANR	633272	AssignmentExpression	shouldRemoveNextClosingBrace = true		632119	0		=			
ANR	633273	Identifier	shouldRemoveNextClosingBrace		632119	0					
ANR	633274	Identifier	true		632119	1					
ANR	633275	IfStatement	if ( isBeforeAnyLineEndComment ( charNum ) )		632119	1					
ANR	633276	Condition	isBeforeAnyLineEndComment ( charNum )	754:9:21996:22029	632119	0	True				
ANR	633277	CallExpression	isBeforeAnyLineEndComment ( charNum )		632119	0					
ANR	633278	Callee	isBeforeAnyLineEndComment		632119	0					
ANR	633279	Identifier	isBeforeAnyLineEndComment		632119	0					
ANR	633280	ArgumentList	charNum		632119	1					
ANR	633281	Argument	charNum		632119	0					
ANR	633282	Identifier	charNum		632119	0					
ANR	633283	ExpressionStatement	spacePadNum --	755:6:22038:22051	632119	1	True				
ANR	633284	PostIncDecOperationExpression	spacePadNum --		632119	0					
ANR	633285	Identifier	spacePadNum		632119	0					
ANR	633286	IncDec	--		632119	1					
ANR	633287	ElseStatement	else		632119	0					
ANR	633288	IfStatement	"if ( shouldBreakOneLineBlocks || ( currentLineBeginsWithBrace && currentLine . find_first_not_of ( "" \\t"" ) != string :: npos ) )"		632119	0					
ANR	633289	Condition	"shouldBreakOneLineBlocks || ( currentLineBeginsWithBrace && currentLine . find_first_not_of ( "" \\t"" ) != string :: npos )"	756:14:22067:22210	632119	0	True				
ANR	633290	OrExpression	"shouldBreakOneLineBlocks || ( currentLineBeginsWithBrace && currentLine . find_first_not_of ( "" \\t"" ) != string :: npos )"		632119	0		||			
ANR	633291	Identifier	shouldBreakOneLineBlocks		632119	0					
ANR	633292	AndExpression	"currentLineBeginsWithBrace && currentLine . find_first_not_of ( "" \\t"" ) != string :: npos"		632119	1		&&			
ANR	633293	Identifier	currentLineBeginsWithBrace		632119	0					
ANR	633294	EqualityExpression	"currentLine . find_first_not_of ( "" \\t"" ) != string :: npos"		632119	1		!=			
ANR	633295	CallExpression	"currentLine . find_first_not_of ( "" \\t"" )"		632119	0					
ANR	633296	Callee	currentLine . find_first_not_of		632119	0					
ANR	633297	MemberAccess	currentLine . find_first_not_of		632119	0					
ANR	633298	Identifier	currentLine		632119	0					
ANR	633299	Identifier	find_first_not_of		632119	1					
ANR	633300	ArgumentList	""" \\t"""		632119	1					
ANR	633301	Argument	""" \\t"""		632119	0					
ANR	633302	PrimaryExpression	""" \\t"""		632119	0					
ANR	633303	Identifier	string :: npos		632119	1					
ANR	633304	ExpressionStatement	shouldBreakLineAtNextChar = true	759:6:22219:22251	632119	1	True				
ANR	633305	AssignmentExpression	shouldBreakLineAtNextChar = true		632119	0		=			
ANR	633306	Identifier	shouldBreakLineAtNextChar		632119	0					
ANR	633307	Identifier	true		632119	1					
ANR	633308	ContinueStatement	continue ;	760:5:22258:22266	632119	2	True				
ANR	633309	IfStatement	if ( shouldBreakElseIfs && currentHeader == & AS_ELSE && isOkToBreakBlock ( braceTypeStack -> back ( ) ) && ! isBeforeAnyComment ( ) && ( shouldBreakOneLineStatements || ! isHeaderInMultiStatementLine ) )		632119	1					
ANR	633310	Condition	shouldBreakElseIfs && currentHeader == & AS_ELSE && isOkToBreakBlock ( braceTypeStack -> back ( ) ) && ! isBeforeAnyComment ( ) && ( shouldBreakOneLineStatements || ! isHeaderInMultiStatementLine )	765:7:22344:22570	632119	0	True				
ANR	633311	AndExpression	shouldBreakElseIfs && currentHeader == & AS_ELSE && isOkToBreakBlock ( braceTypeStack -> back ( ) ) && ! isBeforeAnyComment ( ) && ( shouldBreakOneLineStatements || ! isHeaderInMultiStatementLine )		632119	0		&&			
ANR	633312	Identifier	shouldBreakElseIfs		632119	0					
ANR	633313	AndExpression	currentHeader == & AS_ELSE && isOkToBreakBlock ( braceTypeStack -> back ( ) ) && ! isBeforeAnyComment ( ) && ( shouldBreakOneLineStatements || ! isHeaderInMultiStatementLine )		632119	1		&&			
ANR	633314	EqualityExpression	currentHeader == & AS_ELSE		632119	0		==			
ANR	633315	Identifier	currentHeader		632119	0					
ANR	633316	UnaryOperationExpression	& AS_ELSE		632119	1					
ANR	633317	UnaryOperator	&		632119	0					
ANR	633318	Identifier	AS_ELSE		632119	1					
ANR	633319	AndExpression	isOkToBreakBlock ( braceTypeStack -> back ( ) ) && ! isBeforeAnyComment ( ) && ( shouldBreakOneLineStatements || ! isHeaderInMultiStatementLine )		632119	1		&&			
ANR	633320	CallExpression	isOkToBreakBlock ( braceTypeStack -> back ( ) )		632119	0					
ANR	633321	Callee	isOkToBreakBlock		632119	0					
ANR	633322	Identifier	isOkToBreakBlock		632119	0					
ANR	633323	ArgumentList	braceTypeStack -> back ( )		632119	1					
ANR	633324	Argument	braceTypeStack -> back ( )		632119	0					
ANR	633325	CallExpression	braceTypeStack -> back ( )		632119	0					
ANR	633326	Callee	braceTypeStack -> back		632119	0					
ANR	633327	PtrMemberAccess	braceTypeStack -> back		632119	0					
ANR	633328	Identifier	braceTypeStack		632119	0					
ANR	633329	Identifier	back		632119	1					
ANR	633330	ArgumentList			632119	1					
ANR	633331	AndExpression	! isBeforeAnyComment ( ) && ( shouldBreakOneLineStatements || ! isHeaderInMultiStatementLine )		632119	1		&&			
ANR	633332	UnaryOperationExpression	! isBeforeAnyComment ( )		632119	0					
ANR	633333	UnaryOperator	!		632119	0					
ANR	633334	CallExpression	isBeforeAnyComment ( )		632119	1					
ANR	633335	Callee	isBeforeAnyComment		632119	0					
ANR	633336	Identifier	isBeforeAnyComment		632119	0					
ANR	633337	ArgumentList			632119	1					
ANR	633338	OrExpression	shouldBreakOneLineStatements || ! isHeaderInMultiStatementLine		632119	1		||			
ANR	633339	Identifier	shouldBreakOneLineStatements		632119	0					
ANR	633340	UnaryOperationExpression	! isHeaderInMultiStatementLine		632119	1					
ANR	633341	UnaryOperator	!		632119	0					
ANR	633342	Identifier	isHeaderInMultiStatementLine		632119	1					
ANR	633343	CompoundStatement		323:4:9034:9093	632119	1					
ANR	633344	IdentifierDeclStatement	string nextText = peekNextText ( currentLine . substr ( charNum ) ) ;	771:4:22582:22641	632119	0	True				
ANR	633345	IdentifierDecl	nextText = peekNextText ( currentLine . substr ( charNum ) )		632119	0					
ANR	633346	IdentifierDeclType	string		632119	0					
ANR	633347	Identifier	nextText		632119	1					
ANR	633348	AssignmentExpression	nextText = peekNextText ( currentLine . substr ( charNum ) )		632119	2		=			
ANR	633349	Identifier	nextText		632119	0					
ANR	633350	CallExpression	peekNextText ( currentLine . substr ( charNum ) )		632119	1					
ANR	633351	Callee	peekNextText		632119	0					
ANR	633352	Identifier	peekNextText		632119	0					
ANR	633353	ArgumentList	currentLine . substr ( charNum )		632119	1					
ANR	633354	Argument	currentLine . substr ( charNum )		632119	0					
ANR	633355	CallExpression	currentLine . substr ( charNum )		632119	0					
ANR	633356	Callee	currentLine . substr		632119	0					
ANR	633357	MemberAccess	currentLine . substr		632119	0					
ANR	633358	Identifier	currentLine		632119	0					
ANR	633359	Identifier	substr		632119	1					
ANR	633360	ArgumentList	charNum		632119	1					
ANR	633361	Argument	charNum		632119	0					
ANR	633362	Identifier	charNum		632119	0					
ANR	633363	IfStatement	"if ( nextText . length ( ) > 0 && isCharPotentialHeader ( nextText , 0 ) && ASBase :: findHeader ( nextText , 0 , headers ) == & AS_IF )"		632119	1					
ANR	633364	Condition	"nextText . length ( ) > 0 && isCharPotentialHeader ( nextText , 0 ) && ASBase :: findHeader ( nextText , 0 , headers ) == & AS_IF"	772:8:22651:22787	632119	0	True				
ANR	633365	AndExpression	"nextText . length ( ) > 0 && isCharPotentialHeader ( nextText , 0 ) && ASBase :: findHeader ( nextText , 0 , headers ) == & AS_IF"		632119	0		&&			
ANR	633366	RelationalExpression	nextText . length ( ) > 0		632119	0		>			
ANR	633367	CallExpression	nextText . length ( )		632119	0					
ANR	633368	Callee	nextText . length		632119	0					
ANR	633369	MemberAccess	nextText . length		632119	0					
ANR	633370	Identifier	nextText		632119	0					
ANR	633371	Identifier	length		632119	1					
ANR	633372	ArgumentList			632119	1					
ANR	633373	PrimaryExpression	0		632119	1					
ANR	633374	AndExpression	"isCharPotentialHeader ( nextText , 0 ) && ASBase :: findHeader ( nextText , 0 , headers ) == & AS_IF"		632119	1		&&			
ANR	633375	CallExpression	"isCharPotentialHeader ( nextText , 0 )"		632119	0					
ANR	633376	Callee	isCharPotentialHeader		632119	0					
ANR	633377	Identifier	isCharPotentialHeader		632119	0					
ANR	633378	ArgumentList	nextText		632119	1					
ANR	633379	Argument	nextText		632119	0					
ANR	633380	Identifier	nextText		632119	0					
ANR	633381	Argument	0		632119	1					
ANR	633382	PrimaryExpression	0		632119	0					
ANR	633383	EqualityExpression	"ASBase :: findHeader ( nextText , 0 , headers ) == & AS_IF"		632119	1		==			
ANR	633384	CallExpression	"ASBase :: findHeader ( nextText , 0 , headers )"		632119	0					
ANR	633385	Callee	ASBase :: findHeader		632119	0					
ANR	633386	Identifier	ASBase :: findHeader		632119	0					
ANR	633387	ArgumentList	nextText		632119	1					
ANR	633388	Argument	nextText		632119	0					
ANR	633389	Identifier	nextText		632119	0					
ANR	633390	Argument	0		632119	1					
ANR	633391	PrimaryExpression	0		632119	0					
ANR	633392	Argument	headers		632119	2					
ANR	633393	Identifier	headers		632119	0					
ANR	633394	UnaryOperationExpression	& AS_IF		632119	1					
ANR	633395	UnaryOperator	&		632119	0					
ANR	633396	Identifier	AS_IF		632119	1					
ANR	633397	CompoundStatement		327:4:9246:9246	632119	1					
ANR	633398	ExpressionStatement	isInLineBreak = true	776:5:22801:22821	632119	0	True				
ANR	633399	AssignmentExpression	isInLineBreak = true		632119	0		=			
ANR	633400	Identifier	isInLineBreak		632119	0					
ANR	633401	Identifier	true		632119	1					
ANR	633402	IfStatement	if ( shouldBreakOneLineHeaders && peekNextChar ( ) != ' ' && ( shouldBreakOneLineStatements || ( ! isHeaderInMultiStatementLine && ! isMultiStatementLine ( ) ) ) && isOkToBreakBlock ( braceTypeStack -> back ( ) ) && ! isBeforeAnyComment ( ) )		632119	2					
ANR	633403	Condition	shouldBreakOneLineHeaders && peekNextChar ( ) != ' ' && ( shouldBreakOneLineStatements || ( ! isHeaderInMultiStatementLine && ! isMultiStatementLine ( ) ) ) && isOkToBreakBlock ( braceTypeStack -> back ( ) ) && ! isBeforeAnyComment ( )	781:7:22915:23207	632119	0	True				
ANR	633404	AndExpression	shouldBreakOneLineHeaders && peekNextChar ( ) != ' ' && ( shouldBreakOneLineStatements || ( ! isHeaderInMultiStatementLine && ! isMultiStatementLine ( ) ) ) && isOkToBreakBlock ( braceTypeStack -> back ( ) ) && ! isBeforeAnyComment ( )		632119	0		&&			
ANR	633405	Identifier	shouldBreakOneLineHeaders		632119	0					
ANR	633406	AndExpression	peekNextChar ( ) != ' ' && ( shouldBreakOneLineStatements || ( ! isHeaderInMultiStatementLine && ! isMultiStatementLine ( ) ) ) && isOkToBreakBlock ( braceTypeStack -> back ( ) ) && ! isBeforeAnyComment ( )		632119	1		&&			
ANR	633407	EqualityExpression	peekNextChar ( ) != ' '		632119	0		!=			
ANR	633408	CallExpression	peekNextChar ( )		632119	0					
ANR	633409	Callee	peekNextChar		632119	0					
ANR	633410	Identifier	peekNextChar		632119	0					
ANR	633411	ArgumentList			632119	1					
ANR	633412	PrimaryExpression	' '		632119	1					
ANR	633413	AndExpression	( shouldBreakOneLineStatements || ( ! isHeaderInMultiStatementLine && ! isMultiStatementLine ( ) ) ) && isOkToBreakBlock ( braceTypeStack -> back ( ) ) && ! isBeforeAnyComment ( )		632119	1		&&			
ANR	633414	OrExpression	shouldBreakOneLineStatements || ( ! isHeaderInMultiStatementLine && ! isMultiStatementLine ( ) )		632119	0		||			
ANR	633415	Identifier	shouldBreakOneLineStatements		632119	0					
ANR	633416	AndExpression	! isHeaderInMultiStatementLine && ! isMultiStatementLine ( )		632119	1		&&			
ANR	633417	UnaryOperationExpression	! isHeaderInMultiStatementLine		632119	0					
ANR	633418	UnaryOperator	!		632119	0					
ANR	633419	Identifier	isHeaderInMultiStatementLine		632119	1					
ANR	633420	UnaryOperationExpression	! isMultiStatementLine ( )		632119	1					
ANR	633421	UnaryOperator	!		632119	0					
ANR	633422	CallExpression	isMultiStatementLine ( )		632119	1					
ANR	633423	Callee	isMultiStatementLine		632119	0					
ANR	633424	Identifier	isMultiStatementLine		632119	0					
ANR	633425	ArgumentList			632119	1					
ANR	633426	AndExpression	isOkToBreakBlock ( braceTypeStack -> back ( ) ) && ! isBeforeAnyComment ( )		632119	1		&&			
ANR	633427	CallExpression	isOkToBreakBlock ( braceTypeStack -> back ( ) )		632119	0					
ANR	633428	Callee	isOkToBreakBlock		632119	0					
ANR	633429	Identifier	isOkToBreakBlock		632119	0					
ANR	633430	ArgumentList	braceTypeStack -> back ( )		632119	1					
ANR	633431	Argument	braceTypeStack -> back ( )		632119	0					
ANR	633432	CallExpression	braceTypeStack -> back ( )		632119	0					
ANR	633433	Callee	braceTypeStack -> back		632119	0					
ANR	633434	PtrMemberAccess	braceTypeStack -> back		632119	0					
ANR	633435	Identifier	braceTypeStack		632119	0					
ANR	633436	Identifier	back		632119	1					
ANR	633437	ArgumentList			632119	1					
ANR	633438	UnaryOperationExpression	! isBeforeAnyComment ( )		632119	1					
ANR	633439	UnaryOperator	!		632119	0					
ANR	633440	CallExpression	isBeforeAnyComment ( )		632119	1					
ANR	633441	Callee	isBeforeAnyComment		632119	0					
ANR	633442	Identifier	isBeforeAnyComment		632119	0					
ANR	633443	ArgumentList			632119	1					
ANR	633444	CompoundStatement		340:3:9665:9665	632119	1					
ANR	633445	IfStatement	if ( currentChar == '{' )		632119	0					
ANR	633446	Condition	currentChar == '{'	789:8:23223:23240	632119	0	True				
ANR	633447	EqualityExpression	currentChar == '{'		632119	0		==			
ANR	633448	Identifier	currentChar		632119	0					
ANR	633449	PrimaryExpression	'{'		632119	1					
ANR	633450	CompoundStatement		342:4:9699:9699	632119	1					
ANR	633451	IfStatement	if ( ! currentLineBeginsWithBrace )		632119	0					
ANR	633452	Condition	! currentLineBeginsWithBrace	791:9:23258:23284	632119	0	True				
ANR	633453	UnaryOperationExpression	! currentLineBeginsWithBrace		632119	0					
ANR	633454	UnaryOperator	!		632119	0					
ANR	633455	Identifier	currentLineBeginsWithBrace		632119	1					
ANR	633456	CompoundStatement		344:5:9744:9744	632119	1					
ANR	633457	IfStatement	"if ( isOneLineBlockReached ( currentLine , charNum ) == 3 )"		632119	0					
ANR	633458	Condition	"isOneLineBlockReached ( currentLine , charNum ) == 3"	793:10:23304:23351	632119	0	True				
ANR	633459	EqualityExpression	"isOneLineBlockReached ( currentLine , charNum ) == 3"		632119	0		==			
ANR	633460	CallExpression	"isOneLineBlockReached ( currentLine , charNum )"		632119	0					
ANR	633461	Callee	isOneLineBlockReached		632119	0					
ANR	633462	Identifier	isOneLineBlockReached		632119	0					
ANR	633463	ArgumentList	currentLine		632119	1					
ANR	633464	Argument	currentLine		632119	0					
ANR	633465	Identifier	currentLine		632119	0					
ANR	633466	Argument	charNum		632119	1					
ANR	633467	Identifier	charNum		632119	0					
ANR	633468	PrimaryExpression	3		632119	1					
ANR	633469	ExpressionStatement	isInLineBreak = false	794:7:23361:23382	632119	1	True				
ANR	633470	AssignmentExpression	isInLineBreak = false		632119	0		=			
ANR	633471	Identifier	isInLineBreak		632119	0					
ANR	633472	Identifier	false		632119	1					
ANR	633473	ElseStatement	else		632119	0					
ANR	633474	ExpressionStatement	breakCurrentOneLineBlock = true	796:7:23402:23433	632119	0	True				
ANR	633475	AssignmentExpression	breakCurrentOneLineBlock = true		632119	0		=			
ANR	633476	Identifier	breakCurrentOneLineBlock		632119	0					
ANR	633477	Identifier	true		632119	1					
ANR	633478	ElseStatement	else		632119	0					
ANR	633479	IfStatement	if ( currentHeader == & AS_ELSE )		632119	0					
ANR	633480	Condition	currentHeader == & AS_ELSE	799:13:23461:23485	632119	0	True				
ANR	633481	EqualityExpression	currentHeader == & AS_ELSE		632119	0		==			
ANR	633482	Identifier	currentHeader		632119	0					
ANR	633483	UnaryOperationExpression	& AS_ELSE		632119	1					
ANR	633484	UnaryOperator	&		632119	0					
ANR	633485	Identifier	AS_ELSE		632119	1					
ANR	633486	CompoundStatement		353:5:9951:10016	632119	1					
ANR	633487	IdentifierDeclStatement	"string nextText = peekNextText ( currentLine . substr ( charNum ) , true ) ;"	801:5:23499:23564	632119	0	True				
ANR	633488	IdentifierDecl	"nextText = peekNextText ( currentLine . substr ( charNum ) , true )"		632119	0					
ANR	633489	IdentifierDeclType	string		632119	0					
ANR	633490	Identifier	nextText		632119	1					
ANR	633491	AssignmentExpression	"nextText = peekNextText ( currentLine . substr ( charNum ) , true )"		632119	2		=			
ANR	633492	Identifier	nextText		632119	0					
ANR	633493	CallExpression	"peekNextText ( currentLine . substr ( charNum ) , true )"		632119	1					
ANR	633494	Callee	peekNextText		632119	0					
ANR	633495	Identifier	peekNextText		632119	0					
ANR	633496	ArgumentList	currentLine . substr ( charNum )		632119	1					
ANR	633497	Argument	currentLine . substr ( charNum )		632119	0					
ANR	633498	CallExpression	currentLine . substr ( charNum )		632119	0					
ANR	633499	Callee	currentLine . substr		632119	0					
ANR	633500	MemberAccess	currentLine . substr		632119	0					
ANR	633501	Identifier	currentLine		632119	0					
ANR	633502	Identifier	substr		632119	1					
ANR	633503	ArgumentList	charNum		632119	1					
ANR	633504	Argument	charNum		632119	0					
ANR	633505	Identifier	charNum		632119	0					
ANR	633506	Argument	true		632119	1					
ANR	633507	Identifier	true		632119	0					
ANR	633508	IfStatement	"if ( nextText . length ( ) > 0 && ( ( isCharPotentialHeader ( nextText , 0 ) && ASBase :: findHeader ( nextText , 0 , headers ) != & AS_IF ) || nextText [ 0 ] == '{' ) )"		632119	1					
ANR	633509	Condition	"nextText . length ( ) > 0 && ( ( isCharPotentialHeader ( nextText , 0 ) && ASBase :: findHeader ( nextText , 0 , headers ) != & AS_IF ) || nextText [ 0 ] == '{' )"	802:9:23575:23761	632119	0	True				
ANR	633510	AndExpression	"nextText . length ( ) > 0 && ( ( isCharPotentialHeader ( nextText , 0 ) && ASBase :: findHeader ( nextText , 0 , headers ) != & AS_IF ) || nextText [ 0 ] == '{' )"		632119	0		&&			
ANR	633511	RelationalExpression	nextText . length ( ) > 0		632119	0		>			
ANR	633512	CallExpression	nextText . length ( )		632119	0					
ANR	633513	Callee	nextText . length		632119	0					
ANR	633514	MemberAccess	nextText . length		632119	0					
ANR	633515	Identifier	nextText		632119	0					
ANR	633516	Identifier	length		632119	1					
ANR	633517	ArgumentList			632119	1					
ANR	633518	PrimaryExpression	0		632119	1					
ANR	633519	OrExpression	"( isCharPotentialHeader ( nextText , 0 ) && ASBase :: findHeader ( nextText , 0 , headers ) != & AS_IF ) || nextText [ 0 ] == '{'"		632119	1		||			
ANR	633520	AndExpression	"isCharPotentialHeader ( nextText , 0 ) && ASBase :: findHeader ( nextText , 0 , headers ) != & AS_IF"		632119	0		&&			
ANR	633521	CallExpression	"isCharPotentialHeader ( nextText , 0 )"		632119	0					
ANR	633522	Callee	isCharPotentialHeader		632119	0					
ANR	633523	Identifier	isCharPotentialHeader		632119	0					
ANR	633524	ArgumentList	nextText		632119	1					
ANR	633525	Argument	nextText		632119	0					
ANR	633526	Identifier	nextText		632119	0					
ANR	633527	Argument	0		632119	1					
ANR	633528	PrimaryExpression	0		632119	0					
ANR	633529	EqualityExpression	"ASBase :: findHeader ( nextText , 0 , headers ) != & AS_IF"		632119	1		!=			
ANR	633530	CallExpression	"ASBase :: findHeader ( nextText , 0 , headers )"		632119	0					
ANR	633531	Callee	ASBase :: findHeader		632119	0					
ANR	633532	Identifier	ASBase :: findHeader		632119	0					
ANR	633533	ArgumentList	nextText		632119	1					
ANR	633534	Argument	nextText		632119	0					
ANR	633535	Identifier	nextText		632119	0					
ANR	633536	Argument	0		632119	1					
ANR	633537	PrimaryExpression	0		632119	0					
ANR	633538	Argument	headers		632119	2					
ANR	633539	Identifier	headers		632119	0					
ANR	633540	UnaryOperationExpression	& AS_IF		632119	1					
ANR	633541	UnaryOperator	&		632119	0					
ANR	633542	Identifier	AS_IF		632119	1					
ANR	633543	EqualityExpression	nextText [ 0 ] == '{'		632119	1		==			
ANR	633544	ArrayIndexing	nextText [ 0 ]		632119	0					
ANR	633545	Identifier	nextText		632119	0					
ANR	633546	PrimaryExpression	0		632119	1					
ANR	633547	PrimaryExpression	'{'		632119	1					
ANR	633548	ExpressionStatement	isInLineBreak = true	806:6:23770:23790	632119	1	True				
ANR	633549	AssignmentExpression	isInLineBreak = true		632119	0		=			
ANR	633550	Identifier	isInLineBreak		632119	0					
ANR	633551	Identifier	true		632119	1					
ANR	633552	ElseStatement	else		632119	0					
ANR	633553	CompoundStatement		361:4:10263:10263	632119	0					
ANR	633554	ExpressionStatement	isInLineBreak = true	810:5:23818:23838	632119	0	True				
ANR	633555	AssignmentExpression	isInLineBreak = true		632119	0		=			
ANR	633556	Identifier	isInLineBreak		632119	0					
ANR	633557	Identifier	true		632119	1					
ANR	633558	ExpressionStatement	isImmediatelyPostHeader = false	814:3:23855:23886	632119	3	True				
ANR	633559	AssignmentExpression	isImmediatelyPostHeader = false		632119	0		=			
ANR	633560	Identifier	isImmediatelyPostHeader		632119	0					
ANR	633561	Identifier	false		632119	1					
ANR	633562	IfStatement	if ( passedSemicolon )		632119	22					
ANR	633563	Condition	passedSemicolon	817:6:23899:23913	632119	0	True				
ANR	633564	Identifier	passedSemicolon		632119	0					
ANR	633565	CompoundStatement		370:2:10408:10408	632119	1					
ANR	633566	ExpressionStatement	passedSemicolon = false	819:3:23961:23984	632119	0	True				
ANR	633567	AssignmentExpression	passedSemicolon = false		632119	0		=			
ANR	633568	Identifier	passedSemicolon		632119	0					
ANR	633569	Identifier	false		632119	1					
ANR	633570	IfStatement	if ( parenStack -> back ( ) == 0 && ! isCharImmediatelyPostComment && currentChar != ';' )		632119	1					
ANR	633571	Condition	parenStack -> back ( ) == 0 && ! isCharImmediatelyPostComment && currentChar != ';'	820:7:23993:24070	632119	0	True				
ANR	633572	AndExpression	parenStack -> back ( ) == 0 && ! isCharImmediatelyPostComment && currentChar != ';'		632119	0		&&			
ANR	633573	EqualityExpression	parenStack -> back ( ) == 0		632119	0		==			
ANR	633574	CallExpression	parenStack -> back ( )		632119	0					
ANR	633575	Callee	parenStack -> back		632119	0					
ANR	633576	PtrMemberAccess	parenStack -> back		632119	0					
ANR	633577	Identifier	parenStack		632119	0					
ANR	633578	Identifier	back		632119	1					
ANR	633579	ArgumentList			632119	1					
ANR	633580	PrimaryExpression	0		632119	1					
ANR	633581	AndExpression	! isCharImmediatelyPostComment && currentChar != ';'		632119	1		&&			
ANR	633582	UnaryOperationExpression	! isCharImmediatelyPostComment		632119	0					
ANR	633583	UnaryOperator	!		632119	0					
ANR	633584	Identifier	isCharImmediatelyPostComment		632119	1					
ANR	633585	EqualityExpression	currentChar != ';'		632119	1		!=			
ANR	633586	Identifier	currentChar		632119	0					
ANR	633587	PrimaryExpression	';'		632119	1					
ANR	633588	CompoundStatement		373:3:10540:10540	632119	1					
ANR	633589	IfStatement	"if ( isBraceType ( braceTypeStack -> back ( ) , SINGLE_LINE_TYPE ) )"		632119	0					
ANR	633590	Condition	"isBraceType ( braceTypeStack -> back ( ) , SINGLE_LINE_TYPE )"	823:8:24149:24201	632119	0	True				
ANR	633591	CallExpression	"isBraceType ( braceTypeStack -> back ( ) , SINGLE_LINE_TYPE )"		632119	0					
ANR	633592	Callee	isBraceType		632119	0					
ANR	633593	Identifier	isBraceType		632119	0					
ANR	633594	ArgumentList	braceTypeStack -> back ( )		632119	1					
ANR	633595	Argument	braceTypeStack -> back ( )		632119	0					
ANR	633596	CallExpression	braceTypeStack -> back ( )		632119	0					
ANR	633597	Callee	braceTypeStack -> back		632119	0					
ANR	633598	PtrMemberAccess	braceTypeStack -> back		632119	0					
ANR	633599	Identifier	braceTypeStack		632119	0					
ANR	633600	Identifier	back		632119	1					
ANR	633601	ArgumentList			632119	1					
ANR	633602	Argument	SINGLE_LINE_TYPE		632119	1					
ANR	633603	Identifier	SINGLE_LINE_TYPE		632119	0					
ANR	633604	CompoundStatement		377:5:10667:10718	632119	1					
ANR	633605	IdentifierDeclStatement	size_t blockEnd = currentLine . rfind ( AS_CLOSE_BRACE ) ;	825:5:24215:24266	632119	0	True				
ANR	633606	IdentifierDecl	blockEnd = currentLine . rfind ( AS_CLOSE_BRACE )		632119	0					
ANR	633607	IdentifierDeclType	size_t		632119	0					
ANR	633608	Identifier	blockEnd		632119	1					
ANR	633609	AssignmentExpression	blockEnd = currentLine . rfind ( AS_CLOSE_BRACE )		632119	2		=			
ANR	633610	Identifier	blockEnd		632119	0					
ANR	633611	CallExpression	currentLine . rfind ( AS_CLOSE_BRACE )		632119	1					
ANR	633612	Callee	currentLine . rfind		632119	0					
ANR	633613	MemberAccess	currentLine . rfind		632119	0					
ANR	633614	Identifier	currentLine		632119	0					
ANR	633615	Identifier	rfind		632119	1					
ANR	633616	ArgumentList	AS_CLOSE_BRACE		632119	1					
ANR	633617	Argument	AS_CLOSE_BRACE		632119	0					
ANR	633618	Identifier	AS_CLOSE_BRACE		632119	0					
ANR	633619	ExpressionStatement	assert ( blockEnd != string :: npos )	826:5:24273:24305	632119	1	True				
ANR	633620	CallExpression	assert ( blockEnd != string :: npos )		632119	0					
ANR	633621	Callee	assert		632119	0					
ANR	633622	Identifier	assert		632119	0					
ANR	633623	ArgumentList	blockEnd != string :: npos		632119	1					
ANR	633624	Argument	blockEnd != string :: npos		632119	0					
ANR	633625	EqualityExpression	blockEnd != string :: npos		632119	0		!=			
ANR	633626	Identifier	blockEnd		632119	0					
ANR	633627	Identifier	string :: npos		632119	1					
ANR	633628	IfStatement	if ( isBeforeAnyLineEndComment ( blockEnd ) )		632119	2					
ANR	633629	Condition	isBeforeAnyLineEndComment ( blockEnd )	828:9:24367:24401	632119	0	True				
ANR	633630	CallExpression	isBeforeAnyLineEndComment ( blockEnd )		632119	0					
ANR	633631	Callee	isBeforeAnyLineEndComment		632119	0					
ANR	633632	Identifier	isBeforeAnyLineEndComment		632119	0					
ANR	633633	ArgumentList	blockEnd		632119	1					
ANR	633634	Argument	blockEnd		632119	0					
ANR	633635	Identifier	blockEnd		632119	0					
ANR	633636	CompoundStatement		398:6:11523:11581	632119	1					
ANR	633637	IdentifierDeclStatement	"size_t commentStart = currentLine . find_first_not_of ( "" \\t"" , blockEnd + 1 ) ;"	830:6:24417:24489	632119	0	True				
ANR	633638	IdentifierDecl	"commentStart = currentLine . find_first_not_of ( "" \\t"" , blockEnd + 1 )"		632119	0					
ANR	633639	IdentifierDeclType	size_t		632119	0					
ANR	633640	Identifier	commentStart		632119	1					
ANR	633641	AssignmentExpression	"commentStart = currentLine . find_first_not_of ( "" \\t"" , blockEnd + 1 )"		632119	2		=			
ANR	633642	Identifier	commentStart		632119	0					
ANR	633643	CallExpression	"currentLine . find_first_not_of ( "" \\t"" , blockEnd + 1 )"		632119	1					
ANR	633644	Callee	currentLine . find_first_not_of		632119	0					
ANR	633645	MemberAccess	currentLine . find_first_not_of		632119	0					
ANR	633646	Identifier	currentLine		632119	0					
ANR	633647	Identifier	find_first_not_of		632119	1					
ANR	633648	ArgumentList	""" \\t"""		632119	1					
ANR	633649	Argument	""" \\t"""		632119	0					
ANR	633650	PrimaryExpression	""" \\t"""		632119	0					
ANR	633651	Argument	blockEnd + 1		632119	1					
ANR	633652	AdditiveExpression	blockEnd + 1		632119	0		+			
ANR	633653	Identifier	blockEnd		632119	0					
ANR	633654	PrimaryExpression	1		632119	1					
ANR	633655	ExpressionStatement	assert ( commentStart != string :: npos )	831:6:24497:24533	632119	1	True				
ANR	633656	CallExpression	assert ( commentStart != string :: npos )		632119	0					
ANR	633657	Callee	assert		632119	0					
ANR	633658	Identifier	assert		632119	0					
ANR	633659	ArgumentList	commentStart != string :: npos		632119	1					
ANR	633660	Argument	commentStart != string :: npos		632119	0					
ANR	633661	EqualityExpression	commentStart != string :: npos		632119	0		!=			
ANR	633662	Identifier	commentStart		632119	0					
ANR	633663	Identifier	string :: npos		632119	1					
ANR	633664	ExpressionStatement	"assert ( ( currentLine . compare ( commentStart , 2 , ""//"" ) == 0 ) || ( currentLine . compare ( commentStart , 2 , ""/*"" ) == 0 ) )"	832:6:24541:24664	632119	2	True				
ANR	633665	CallExpression	"assert ( ( currentLine . compare ( commentStart , 2 , ""//"" ) == 0 ) || ( currentLine . compare ( commentStart , 2 , ""/*"" ) == 0 ) )"		632119	0					
ANR	633666	Callee	assert		632119	0					
ANR	633667	Identifier	assert		632119	0					
ANR	633668	ArgumentList	"( currentLine . compare ( commentStart , 2 , ""//"" ) == 0 ) || ( currentLine . compare ( commentStart , 2 , ""/*"" ) == 0 )"		632119	1					
ANR	633669	Argument	"( currentLine . compare ( commentStart , 2 , ""//"" ) == 0 ) || ( currentLine . compare ( commentStart , 2 , ""/*"" ) == 0 )"		632119	0					
ANR	633670	OrExpression	"( currentLine . compare ( commentStart , 2 , ""//"" ) == 0 ) || ( currentLine . compare ( commentStart , 2 , ""/*"" ) == 0 )"		632119	0		||			
ANR	633671	EqualityExpression	"currentLine . compare ( commentStart , 2 , ""//"" ) == 0"		632119	0		==			
ANR	633672	CallExpression	"currentLine . compare ( commentStart , 2 , ""//"" )"		632119	0					
ANR	633673	Callee	currentLine . compare		632119	0					
ANR	633674	MemberAccess	currentLine . compare		632119	0					
ANR	633675	Identifier	currentLine		632119	0					
ANR	633676	Identifier	compare		632119	1					
ANR	633677	ArgumentList	commentStart		632119	1					
ANR	633678	Argument	commentStart		632119	0					
ANR	633679	Identifier	commentStart		632119	0					
ANR	633680	Argument	2		632119	1					
ANR	633681	PrimaryExpression	2		632119	0					
ANR	633682	Argument	"""//"""		632119	2					
ANR	633683	PrimaryExpression	"""//"""		632119	0					
ANR	633684	PrimaryExpression	0		632119	1					
ANR	633685	EqualityExpression	"currentLine . compare ( commentStart , 2 , ""/*"" ) == 0"		632119	1		==			
ANR	633686	CallExpression	"currentLine . compare ( commentStart , 2 , ""/*"" )"		632119	0					
ANR	633687	Callee	currentLine . compare		632119	0					
ANR	633688	MemberAccess	currentLine . compare		632119	0					
ANR	633689	Identifier	currentLine		632119	0					
ANR	633690	Identifier	compare		632119	1					
ANR	633691	ArgumentList	commentStart		632119	1					
ANR	633692	Argument	commentStart		632119	0					
ANR	633693	Identifier	commentStart		632119	0					
ANR	633694	Argument	2		632119	1					
ANR	633695	PrimaryExpression	2		632119	0					
ANR	633696	Argument	"""/*"""		632119	2					
ANR	633697	PrimaryExpression	"""/*"""		632119	0					
ANR	633698	PrimaryExpression	0		632119	1					
ANR	633699	ExpressionStatement	"formattedLine . append ( getIndentLength ( ) - 1 , ' ' )"	834:6:24672:24720	632119	3	True				
ANR	633700	CallExpression	"formattedLine . append ( getIndentLength ( ) - 1 , ' ' )"		632119	0					
ANR	633701	Callee	formattedLine . append		632119	0					
ANR	633702	MemberAccess	formattedLine . append		632119	0					
ANR	633703	Identifier	formattedLine		632119	0					
ANR	633704	Identifier	append		632119	1					
ANR	633705	ArgumentList	getIndentLength ( ) - 1		632119	1					
ANR	633706	Argument	getIndentLength ( ) - 1		632119	0					
ANR	633707	AdditiveExpression	getIndentLength ( ) - 1		632119	0		-			
ANR	633708	CallExpression	getIndentLength ( )		632119	0					
ANR	633709	Callee	getIndentLength		632119	0					
ANR	633710	Identifier	getIndentLength		632119	0					
ANR	633711	ArgumentList			632119	1					
ANR	633712	PrimaryExpression	1		632119	1					
ANR	633713	Argument	' '		632119	1					
ANR	633714	PrimaryExpression	' '		632119	0					
ANR	633715	IdentifierDeclStatement	int charNumSave = charNum ;	836:6:24752:24777	632119	4	True				
ANR	633716	IdentifierDecl	charNumSave = charNum		632119	0					
ANR	633717	IdentifierDeclType	int		632119	0					
ANR	633718	Identifier	charNumSave		632119	1					
ANR	633719	AssignmentExpression	charNumSave = charNum		632119	2		=			
ANR	633720	Identifier	charNum		632119	0					
ANR	633721	Identifier	charNum		632119	1					
ANR	633722	ExpressionStatement	charNum = commentStart	837:6:24785:24807	632119	5	True				
ANR	633723	AssignmentExpression	charNum = commentStart		632119	0		=			
ANR	633724	Identifier	charNum		632119	0					
ANR	633725	Identifier	commentStart		632119	1					
ANR	633726	WhileStatement	while ( charNum < ( int ) currentLine . length ( ) )		632119	6					
ANR	633727	Condition	charNum < ( int ) currentLine . length ( )	838:13:24822:24857	632119	0	True				
ANR	633728	RelationalExpression	charNum < ( int ) currentLine . length ( )		632119	0		<			
ANR	633729	Identifier	charNum		632119	0					
ANR	633730	CastExpression	( int ) currentLine . length ( )		632119	1					
ANR	633731	CastTarget	int		632119	0					
ANR	633732	CallExpression	currentLine . length ( )		632119	1					
ANR	633733	Callee	currentLine . length		632119	0					
ANR	633734	MemberAccess	currentLine . length		632119	0					
ANR	633735	Identifier	currentLine		632119	0					
ANR	633736	Identifier	length		632119	1					
ANR	633737	ArgumentList			632119	1					
ANR	633738	CompoundStatement		391:6:11318:11318	632119	1					
ANR	633739	ExpressionStatement	currentChar = currentLine [ charNum ]	840:7:24875:24909	632119	0	True				
ANR	633740	AssignmentExpression	currentChar = currentLine [ charNum ]		632119	0		=			
ANR	633741	Identifier	currentChar		632119	0					
ANR	633742	ArrayIndexing	currentLine [ charNum ]		632119	1					
ANR	633743	Identifier	currentLine		632119	0					
ANR	633744	Identifier	charNum		632119	1					
ANR	633745	IfStatement	if ( currentChar == '\\t' && shouldConvertTabs )		632119	1					
ANR	633746	Condition	currentChar == '\\t' && shouldConvertTabs	841:11:24922:24961	632119	0	True				
ANR	633747	AndExpression	currentChar == '\\t' && shouldConvertTabs		632119	0		&&			
ANR	633748	EqualityExpression	currentChar == '\\t'		632119	0		==			
ANR	633749	Identifier	currentChar		632119	0					
ANR	633750	PrimaryExpression	'\\t'		632119	1					
ANR	633751	Identifier	shouldConvertTabs		632119	1					
ANR	633752	ExpressionStatement	convertTabToSpaces ( )	842:8:24972:24992	632119	1	True				
ANR	633753	CallExpression	convertTabToSpaces ( )		632119	0					
ANR	633754	Callee	convertTabToSpaces		632119	0					
ANR	633755	Identifier	convertTabToSpaces		632119	0					
ANR	633756	ArgumentList			632119	1					
ANR	633757	ExpressionStatement	"formattedLine . append ( 1 , currentChar )"	843:7:25001:25037	632119	2	True				
ANR	633758	CallExpression	"formattedLine . append ( 1 , currentChar )"		632119	0					
ANR	633759	Callee	formattedLine . append		632119	0					
ANR	633760	MemberAccess	formattedLine . append		632119	0					
ANR	633761	Identifier	formattedLine		632119	0					
ANR	633762	Identifier	append		632119	1					
ANR	633763	ArgumentList	1		632119	1					
ANR	633764	Argument	1		632119	0					
ANR	633765	PrimaryExpression	1		632119	0					
ANR	633766	Argument	currentChar		632119	1					
ANR	633767	Identifier	currentChar		632119	0					
ANR	633768	ExpressionStatement	++ charNum	844:7:25046:25055	632119	3	True				
ANR	633769	UnaryExpression	++ charNum		632119	0					
ANR	633770	IncDec	++		632119	0					
ANR	633771	Identifier	charNum		632119	1					
ANR	633772	IdentifierDeclStatement	size_t commentLength = currentLine . length ( ) - commentStart ;	846:6:25071:25129	632119	7	True				
ANR	633773	IdentifierDecl	commentLength = currentLine . length ( ) - commentStart		632119	0					
ANR	633774	IdentifierDeclType	size_t		632119	0					
ANR	633775	Identifier	commentLength		632119	1					
ANR	633776	AssignmentExpression	commentLength = currentLine . length ( ) - commentStart		632119	2		=			
ANR	633777	Identifier	commentLength		632119	0					
ANR	633778	AdditiveExpression	currentLine . length ( ) - commentStart		632119	1		-			
ANR	633779	CallExpression	currentLine . length ( )		632119	0					
ANR	633780	Callee	currentLine . length		632119	0					
ANR	633781	MemberAccess	currentLine . length		632119	0					
ANR	633782	Identifier	currentLine		632119	0					
ANR	633783	Identifier	length		632119	1					
ANR	633784	ArgumentList			632119	1					
ANR	633785	Identifier	commentStart		632119	1					
ANR	633786	ExpressionStatement	"currentLine . erase ( commentStart , commentLength )"	847:6:25137:25183	632119	8	True				
ANR	633787	CallExpression	"currentLine . erase ( commentStart , commentLength )"		632119	0					
ANR	633788	Callee	currentLine . erase		632119	0					
ANR	633789	MemberAccess	currentLine . erase		632119	0					
ANR	633790	Identifier	currentLine		632119	0					
ANR	633791	Identifier	erase		632119	1					
ANR	633792	ArgumentList	commentStart		632119	1					
ANR	633793	Argument	commentStart		632119	0					
ANR	633794	Identifier	commentStart		632119	0					
ANR	633795	Argument	commentLength		632119	1					
ANR	633796	Identifier	commentLength		632119	0					
ANR	633797	ExpressionStatement	charNum = charNumSave	848:6:25191:25212	632119	9	True				
ANR	633798	AssignmentExpression	charNum = charNumSave		632119	0		=			
ANR	633799	Identifier	charNum		632119	0					
ANR	633800	Identifier	charNumSave		632119	1					
ANR	633801	ExpressionStatement	currentChar = currentLine [ charNum ]	849:6:25220:25254	632119	10	True				
ANR	633802	AssignmentExpression	currentChar = currentLine [ charNum ]		632119	0		=			
ANR	633803	Identifier	currentChar		632119	0					
ANR	633804	ArrayIndexing	currentLine [ charNum ]		632119	1					
ANR	633805	Identifier	currentLine		632119	0					
ANR	633806	Identifier	charNum		632119	1					
ANR	633807	ExpressionStatement	testForTimeToSplitFormattedLine ( )	850:6:25262:25295	632119	11	True				
ANR	633808	CallExpression	testForTimeToSplitFormattedLine ( )		632119	0					
ANR	633809	Callee	testForTimeToSplitFormattedLine		632119	0					
ANR	633810	Identifier	testForTimeToSplitFormattedLine		632119	0					
ANR	633811	ArgumentList			632119	1					
ANR	633812	ExpressionStatement	isInExecSQL = false	853:4:25314:25333	632119	1	True				
ANR	633813	AssignmentExpression	isInExecSQL = false		632119	0		=			
ANR	633814	Identifier	isInExecSQL		632119	0					
ANR	633815	Identifier	false		632119	1					
ANR	633816	ExpressionStatement	shouldReparseCurrentChar = true	854:4:25339:25370	632119	2	True				
ANR	633817	AssignmentExpression	shouldReparseCurrentChar = true		632119	0		=			
ANR	633818	Identifier	shouldReparseCurrentChar		632119	0					
ANR	633819	Identifier	true		632119	1					
ANR	633820	IfStatement	"if ( formattedLine . find_first_not_of ( "" \\t"" ) != string :: npos )"		632119	3					
ANR	633821	Condition	"formattedLine . find_first_not_of ( "" \\t"" ) != string :: npos"	855:8:25380:25433	632119	0	True				
ANR	633822	EqualityExpression	"formattedLine . find_first_not_of ( "" \\t"" ) != string :: npos"		632119	0		!=			
ANR	633823	CallExpression	"formattedLine . find_first_not_of ( "" \\t"" )"		632119	0					
ANR	633824	Callee	formattedLine . find_first_not_of		632119	0					
ANR	633825	MemberAccess	formattedLine . find_first_not_of		632119	0					
ANR	633826	Identifier	formattedLine		632119	0					
ANR	633827	Identifier	find_first_not_of		632119	1					
ANR	633828	ArgumentList	""" \\t"""		632119	1					
ANR	633829	Argument	""" \\t"""		632119	0					
ANR	633830	PrimaryExpression	""" \\t"""		632119	0					
ANR	633831	Identifier	string :: npos		632119	1					
ANR	633832	ExpressionStatement	isInLineBreak = true	856:5:25441:25461	632119	1	True				
ANR	633833	AssignmentExpression	isInLineBreak = true		632119	0		=			
ANR	633834	Identifier	isInLineBreak		632119	0					
ANR	633835	Identifier	true		632119	1					
ANR	633836	IfStatement	if ( needHeaderOpeningBrace )		632119	4					
ANR	633837	Condition	needHeaderOpeningBrace	857:8:25471:25492	632119	0	True				
ANR	633838	Identifier	needHeaderOpeningBrace		632119	0					
ANR	633839	CompoundStatement		410:4:11951:11951	632119	1					
ANR	633840	ExpressionStatement	isCharImmediatelyPostCloseBlock = true	859:5:25506:25544	632119	0	True				
ANR	633841	AssignmentExpression	isCharImmediatelyPostCloseBlock = true		632119	0		=			
ANR	633842	Identifier	isCharImmediatelyPostCloseBlock		632119	0					
ANR	633843	Identifier	true		632119	1					
ANR	633844	ExpressionStatement	needHeaderOpeningBrace = false	860:5:25551:25581	632119	1	True				
ANR	633845	AssignmentExpression	needHeaderOpeningBrace = false		632119	0		=			
ANR	633846	Identifier	needHeaderOpeningBrace		632119	0					
ANR	633847	Identifier	false		632119	1					
ANR	633848	ContinueStatement	continue ;	862:4:25593:25601	632119	5	True				
ANR	633849	IfStatement	if ( passedColon )		632119	23					
ANR	633850	Condition	passedColon	866:6:25619:25629	632119	0	True				
ANR	633851	Identifier	passedColon		632119	0					
ANR	633852	CompoundStatement		419:2:12086:12086	632119	1					
ANR	633853	ExpressionStatement	passedColon = false	868:3:25639:25658	632119	0	True				
ANR	633854	AssignmentExpression	passedColon = false		632119	0		=			
ANR	633855	Identifier	passedColon		632119	0					
ANR	633856	Identifier	false		632119	1					
ANR	633857	IfStatement	"if ( parenStack -> back ( ) == 0 && ! isBeforeAnyComment ( ) && ( formattedLine . find_first_not_of ( "" \\t"" ) != string :: npos ) )"		632119	1					
ANR	633858	Condition	"parenStack -> back ( ) == 0 && ! isBeforeAnyComment ( ) && ( formattedLine . find_first_not_of ( "" \\t"" ) != string :: npos )"	869:7:25667:25796	632119	0	True				
ANR	633859	AndExpression	"parenStack -> back ( ) == 0 && ! isBeforeAnyComment ( ) && ( formattedLine . find_first_not_of ( "" \\t"" ) != string :: npos )"		632119	0		&&			
ANR	633860	EqualityExpression	parenStack -> back ( ) == 0		632119	0		==			
ANR	633861	CallExpression	parenStack -> back ( )		632119	0					
ANR	633862	Callee	parenStack -> back		632119	0					
ANR	633863	PtrMemberAccess	parenStack -> back		632119	0					
ANR	633864	Identifier	parenStack		632119	0					
ANR	633865	Identifier	back		632119	1					
ANR	633866	ArgumentList			632119	1					
ANR	633867	PrimaryExpression	0		632119	1					
ANR	633868	AndExpression	"! isBeforeAnyComment ( ) && ( formattedLine . find_first_not_of ( "" \\t"" ) != string :: npos )"		632119	1		&&			
ANR	633869	UnaryOperationExpression	! isBeforeAnyComment ( )		632119	0					
ANR	633870	UnaryOperator	!		632119	0					
ANR	633871	CallExpression	isBeforeAnyComment ( )		632119	1					
ANR	633872	Callee	isBeforeAnyComment		632119	0					
ANR	633873	Identifier	isBeforeAnyComment		632119	0					
ANR	633874	ArgumentList			632119	1					
ANR	633875	EqualityExpression	"formattedLine . find_first_not_of ( "" \\t"" ) != string :: npos"		632119	1		!=			
ANR	633876	CallExpression	"formattedLine . find_first_not_of ( "" \\t"" )"		632119	0					
ANR	633877	Callee	formattedLine . find_first_not_of		632119	0					
ANR	633878	MemberAccess	formattedLine . find_first_not_of		632119	0					
ANR	633879	Identifier	formattedLine		632119	0					
ANR	633880	Identifier	find_first_not_of		632119	1					
ANR	633881	ArgumentList	""" \\t"""		632119	1					
ANR	633882	Argument	""" \\t"""		632119	0					
ANR	633883	PrimaryExpression	""" \\t"""		632119	0					
ANR	633884	Identifier	string :: npos		632119	1					
ANR	633885	CompoundStatement		424:3:12254:12254	632119	1					
ANR	633886	ExpressionStatement	shouldReparseCurrentChar = true	873:4:25808:25839	632119	0	True				
ANR	633887	AssignmentExpression	shouldReparseCurrentChar = true		632119	0		=			
ANR	633888	Identifier	shouldReparseCurrentChar		632119	0					
ANR	633889	Identifier	true		632119	1					
ANR	633890	ExpressionStatement	isInLineBreak = true	874:4:25845:25865	632119	1	True				
ANR	633891	AssignmentExpression	isInLineBreak = true		632119	0		=			
ANR	633892	Identifier	isInLineBreak		632119	0					
ANR	633893	Identifier	true		632119	1					
ANR	633894	ContinueStatement	continue ;	875:4:25871:25879	632119	2	True				
ANR	633895	IfStatement	if ( ! isInTemplate && currentChar == '<' )		632119	24					
ANR	633896	Condition	! isInTemplate && currentChar == '<'	880:6:25966:26000	632119	0	True				
ANR	633897	AndExpression	! isInTemplate && currentChar == '<'		632119	0		&&			
ANR	633898	UnaryOperationExpression	! isInTemplate		632119	0					
ANR	633899	UnaryOperator	!		632119	0					
ANR	633900	Identifier	isInTemplate		632119	1					
ANR	633901	EqualityExpression	currentChar == '<'		632119	1		==			
ANR	633902	Identifier	currentChar		632119	0					
ANR	633903	PrimaryExpression	'<'		632119	1					
ANR	633904	CompoundStatement		433:2:12457:12457	632119	1					
ANR	633905	ExpressionStatement	checkIfTemplateOpener ( )	882:3:26010:26033	632119	0	True				
ANR	633906	CallExpression	checkIfTemplateOpener ( )		632119	0					
ANR	633907	Callee	checkIfTemplateOpener		632119	0					
ANR	633908	Identifier	checkIfTemplateOpener		632119	0					
ANR	633909	ArgumentList			632119	1					
ANR	633910	IfStatement	if ( currentChar == '(' || currentChar == '[' || ( isInTemplate && currentChar == '<' ) )		632119	25					
ANR	633911	Condition	currentChar == '(' || currentChar == '[' || ( isInTemplate && currentChar == '<' )	886:6:26065:26144	632119	0	True				
ANR	633912	OrExpression	currentChar == '(' || currentChar == '[' || ( isInTemplate && currentChar == '<' )		632119	0		||			
ANR	633913	EqualityExpression	currentChar == '('		632119	0		==			
ANR	633914	Identifier	currentChar		632119	0					
ANR	633915	PrimaryExpression	'('		632119	1					
ANR	633916	OrExpression	currentChar == '[' || ( isInTemplate && currentChar == '<' )		632119	1		||			
ANR	633917	EqualityExpression	currentChar == '['		632119	0		==			
ANR	633918	Identifier	currentChar		632119	0					
ANR	633919	PrimaryExpression	'['		632119	1					
ANR	633920	AndExpression	isInTemplate && currentChar == '<'		632119	1		&&			
ANR	633921	Identifier	isInTemplate		632119	0					
ANR	633922	EqualityExpression	currentChar == '<'		632119	1		==			
ANR	633923	Identifier	currentChar		632119	0					
ANR	633924	PrimaryExpression	'<'		632119	1					
ANR	633925	CompoundStatement		439:2:12601:12601	632119	1					
ANR	633926	ExpressionStatement	questionMarkStack -> push_back ( foundQuestionMark )	888:3:26154:26201	632119	0	True				
ANR	633927	CallExpression	questionMarkStack -> push_back ( foundQuestionMark )		632119	0					
ANR	633928	Callee	questionMarkStack -> push_back		632119	0					
ANR	633929	PtrMemberAccess	questionMarkStack -> push_back		632119	0					
ANR	633930	Identifier	questionMarkStack		632119	0					
ANR	633931	Identifier	push_back		632119	1					
ANR	633932	ArgumentList	foundQuestionMark		632119	1					
ANR	633933	Argument	foundQuestionMark		632119	0					
ANR	633934	Identifier	foundQuestionMark		632119	0					
ANR	633935	ExpressionStatement	foundQuestionMark = false	889:3:26206:26231	632119	1	True				
ANR	633936	AssignmentExpression	foundQuestionMark = false		632119	0		=			
ANR	633937	Identifier	foundQuestionMark		632119	0					
ANR	633938	Identifier	false		632119	1					
ANR	633939	ExpressionStatement	parenStack -> back ( ) ++	890:3:26236:26256	632119	2	True				
ANR	633940	PostIncDecOperationExpression	parenStack -> back ( ) ++		632119	0					
ANR	633941	CallExpression	parenStack -> back ( )		632119	0					
ANR	633942	Callee	parenStack -> back		632119	0					
ANR	633943	PtrMemberAccess	parenStack -> back		632119	0					
ANR	633944	Identifier	parenStack		632119	0					
ANR	633945	Identifier	back		632119	1					
ANR	633946	ArgumentList			632119	1					
ANR	633947	IncDec	++		632119	1					
ANR	633948	IfStatement	if ( currentChar == '[' )		632119	3					
ANR	633949	Condition	currentChar == '['	891:7:26265:26282	632119	0	True				
ANR	633950	EqualityExpression	currentChar == '['		632119	0		==			
ANR	633951	Identifier	currentChar		632119	0					
ANR	633952	PrimaryExpression	'['		632119	1					
ANR	633953	CompoundStatement		444:3:12740:12740	632119	1					
ANR	633954	ExpressionStatement	++ squareBracketCount	893:4:26294:26314	632119	0	True				
ANR	633955	UnaryExpression	++ squareBracketCount		632119	0					
ANR	633956	IncDec	++		632119	0					
ANR	633957	Identifier	squareBracketCount		632119	1					
ANR	633958	IfStatement	if ( getAlignMethodColon ( ) && squareBracketCount == 1 && isCStyle ( ) )		632119	1					
ANR	633959	Condition	getAlignMethodColon ( ) && squareBracketCount == 1 && isCStyle ( )	894:8:26324:26385	632119	0	True				
ANR	633960	AndExpression	getAlignMethodColon ( ) && squareBracketCount == 1 && isCStyle ( )		632119	0		&&			
ANR	633961	CallExpression	getAlignMethodColon ( )		632119	0					
ANR	633962	Callee	getAlignMethodColon		632119	0					
ANR	633963	Identifier	getAlignMethodColon		632119	0					
ANR	633964	ArgumentList			632119	1					
ANR	633965	AndExpression	squareBracketCount == 1 && isCStyle ( )		632119	1		&&			
ANR	633966	EqualityExpression	squareBracketCount == 1		632119	0		==			
ANR	633967	Identifier	squareBracketCount		632119	0					
ANR	633968	PrimaryExpression	1		632119	1					
ANR	633969	CallExpression	isCStyle ( )		632119	1					
ANR	633970	Callee	isCStyle		632119	0					
ANR	633971	Identifier	isCStyle		632119	0					
ANR	633972	ArgumentList			632119	1					
ANR	633973	ExpressionStatement	objCColonAlign = findObjCColonAlignment ( )	895:5:26393:26434	632119	1	True				
ANR	633974	AssignmentExpression	objCColonAlign = findObjCColonAlignment ( )		632119	0		=			
ANR	633975	Identifier	objCColonAlign		632119	0					
ANR	633976	CallExpression	findObjCColonAlignment ( )		632119	1					
ANR	633977	Callee	findObjCColonAlignment		632119	0					
ANR	633978	Identifier	findObjCColonAlignment		632119	0					
ANR	633979	ArgumentList			632119	1					
ANR	633980	ElseStatement	else		632119	0					
ANR	633981	IfStatement	if ( currentChar == ')' || currentChar == ']' || ( isInTemplate && currentChar == '>' ) )		632119	0					
ANR	633982	Condition	currentChar == ')' || currentChar == ']' || ( isInTemplate && currentChar == '>' )	898:11:26456:26535	632119	0	True				
ANR	633983	OrExpression	currentChar == ')' || currentChar == ']' || ( isInTemplate && currentChar == '>' )		632119	0		||			
ANR	633984	EqualityExpression	currentChar == ')'		632119	0		==			
ANR	633985	Identifier	currentChar		632119	0					
ANR	633986	PrimaryExpression	')'		632119	1					
ANR	633987	OrExpression	currentChar == ']' || ( isInTemplate && currentChar == '>' )		632119	1		||			
ANR	633988	EqualityExpression	currentChar == ']'		632119	0		==			
ANR	633989	Identifier	currentChar		632119	0					
ANR	633990	PrimaryExpression	']'		632119	1					
ANR	633991	AndExpression	isInTemplate && currentChar == '>'		632119	1		&&			
ANR	633992	Identifier	isInTemplate		632119	0					
ANR	633993	EqualityExpression	currentChar == '>'		632119	1		==			
ANR	633994	Identifier	currentChar		632119	0					
ANR	633995	PrimaryExpression	'>'		632119	1					
ANR	633996	CompoundStatement		451:2:12992:12992	632119	1					
ANR	633997	ExpressionStatement	foundPreCommandHeader = false	900:3:26545:26574	632119	0	True				
ANR	633998	AssignmentExpression	foundPreCommandHeader = false		632119	0		=			
ANR	633999	Identifier	foundPreCommandHeader		632119	0					
ANR	634000	Identifier	false		632119	1					
ANR	634001	ExpressionStatement	parenStack -> back ( ) --	901:3:26579:26599	632119	1	True				
ANR	634002	PostIncDecOperationExpression	parenStack -> back ( ) --		632119	0					
ANR	634003	CallExpression	parenStack -> back ( )		632119	0					
ANR	634004	Callee	parenStack -> back		632119	0					
ANR	634005	PtrMemberAccess	parenStack -> back		632119	0					
ANR	634006	Identifier	parenStack		632119	0					
ANR	634007	Identifier	back		632119	1					
ANR	634008	ArgumentList			632119	1					
ANR	634009	IncDec	--		632119	1					
ANR	634010	IfStatement	if ( parenStack -> back ( ) < 0 )		632119	2					
ANR	634011	Condition	parenStack -> back ( ) < 0	903:7:26657:26678	632119	0	True				
ANR	634012	RelationalExpression	parenStack -> back ( ) < 0		632119	0		<			
ANR	634013	CallExpression	parenStack -> back ( )		632119	0					
ANR	634014	Callee	parenStack -> back		632119	0					
ANR	634015	PtrMemberAccess	parenStack -> back		632119	0					
ANR	634016	Identifier	parenStack		632119	0					
ANR	634017	Identifier	back		632119	1					
ANR	634018	ArgumentList			632119	1					
ANR	634019	PrimaryExpression	0		632119	1					
ANR	634020	ExpressionStatement	parenStack -> back ( ) = 0	904:4:26685:26707	632119	1	True				
ANR	634021	AssignmentExpression	parenStack -> back ( ) = 0		632119	0		=			
ANR	634022	CallExpression	parenStack -> back ( )		632119	0					
ANR	634023	Callee	parenStack -> back		632119	0					
ANR	634024	PtrMemberAccess	parenStack -> back		632119	0					
ANR	634025	Identifier	parenStack		632119	0					
ANR	634026	Identifier	back		632119	1					
ANR	634027	ArgumentList			632119	1					
ANR	634028	PrimaryExpression	0		632119	1					
ANR	634029	IfStatement	if ( ! questionMarkStack -> empty ( ) )		632119	3					
ANR	634030	Condition	! questionMarkStack -> empty ( )	905:7:26716:26742	632119	0	True				
ANR	634031	UnaryOperationExpression	! questionMarkStack -> empty ( )		632119	0					
ANR	634032	UnaryOperator	!		632119	0					
ANR	634033	CallExpression	questionMarkStack -> empty ( )		632119	1					
ANR	634034	Callee	questionMarkStack -> empty		632119	0					
ANR	634035	PtrMemberAccess	questionMarkStack -> empty		632119	0					
ANR	634036	Identifier	questionMarkStack		632119	0					
ANR	634037	Identifier	empty		632119	1					
ANR	634038	ArgumentList			632119	1					
ANR	634039	CompoundStatement		458:3:13200:13200	632119	1					
ANR	634040	ExpressionStatement	foundQuestionMark = questionMarkStack -> back ( )	907:4:26754:26799	632119	0	True				
ANR	634041	AssignmentExpression	foundQuestionMark = questionMarkStack -> back ( )		632119	0		=			
ANR	634042	Identifier	foundQuestionMark		632119	0					
ANR	634043	CallExpression	questionMarkStack -> back ( )		632119	1					
ANR	634044	Callee	questionMarkStack -> back		632119	0					
ANR	634045	PtrMemberAccess	questionMarkStack -> back		632119	0					
ANR	634046	Identifier	questionMarkStack		632119	0					
ANR	634047	Identifier	back		632119	1					
ANR	634048	ArgumentList			632119	1					
ANR	634049	ExpressionStatement	questionMarkStack -> pop_back ( )	908:4:26805:26834	632119	1	True				
ANR	634050	CallExpression	questionMarkStack -> pop_back ( )		632119	0					
ANR	634051	Callee	questionMarkStack -> pop_back		632119	0					
ANR	634052	PtrMemberAccess	questionMarkStack -> pop_back		632119	0					
ANR	634053	Identifier	questionMarkStack		632119	0					
ANR	634054	Identifier	pop_back		632119	1					
ANR	634055	ArgumentList			632119	1					
ANR	634056	IfStatement	if ( isInTemplate && currentChar == '>' )		632119	4					
ANR	634057	Condition	isInTemplate && currentChar == '>'	910:7:26848:26881	632119	0	True				
ANR	634058	AndExpression	isInTemplate && currentChar == '>'		632119	0		&&			
ANR	634059	Identifier	isInTemplate		632119	0					
ANR	634060	EqualityExpression	currentChar == '>'		632119	1		==			
ANR	634061	Identifier	currentChar		632119	0					
ANR	634062	PrimaryExpression	'>'		632119	1					
ANR	634063	CompoundStatement		463:3:13339:13339	632119	1					
ANR	634064	ExpressionStatement	templateDepth --	912:4:26893:26908	632119	0	True				
ANR	634065	PostIncDecOperationExpression	templateDepth --		632119	0					
ANR	634066	Identifier	templateDepth		632119	0					
ANR	634067	IncDec	--		632119	1					
ANR	634068	IfStatement	if ( templateDepth == 0 )		632119	1					
ANR	634069	Condition	templateDepth == 0	913:8:26918:26935	632119	0	True				
ANR	634070	EqualityExpression	templateDepth == 0		632119	0		==			
ANR	634071	Identifier	templateDepth		632119	0					
ANR	634072	PrimaryExpression	0		632119	1					
ANR	634073	CompoundStatement		466:4:13394:13394	632119	1					
ANR	634074	ExpressionStatement	isInTemplate = false	915:5:26949:26969	632119	0	True				
ANR	634075	AssignmentExpression	isInTemplate = false		632119	0		=			
ANR	634076	Identifier	isInTemplate		632119	0					
ANR	634077	Identifier	false		632119	1					
ANR	634078	ExpressionStatement	isImmediatelyPostTemplate = true	916:5:26976:27008	632119	1	True				
ANR	634079	AssignmentExpression	isImmediatelyPostTemplate = true		632119	0		=			
ANR	634080	Identifier	isImmediatelyPostTemplate		632119	0					
ANR	634081	Identifier	true		632119	1					
ANR	634082	IfStatement	if ( isInHeader && parenStack -> back ( ) == 0 )		632119	5					
ANR	634083	Condition	isInHeader && parenStack -> back ( ) == 0	921:7:27105:27141	632119	0	True				
ANR	634084	AndExpression	isInHeader && parenStack -> back ( ) == 0		632119	0		&&			
ANR	634085	Identifier	isInHeader		632119	0					
ANR	634086	EqualityExpression	parenStack -> back ( ) == 0		632119	1		==			
ANR	634087	CallExpression	parenStack -> back ( )		632119	0					
ANR	634088	Callee	parenStack -> back		632119	0					
ANR	634089	PtrMemberAccess	parenStack -> back		632119	0					
ANR	634090	Identifier	parenStack		632119	0					
ANR	634091	Identifier	back		632119	1					
ANR	634092	ArgumentList			632119	1					
ANR	634093	PrimaryExpression	0		632119	1					
ANR	634094	CompoundStatement		474:3:13599:13599	632119	1					
ANR	634095	ExpressionStatement	isInHeader = false	923:4:27153:27171	632119	0	True				
ANR	634096	AssignmentExpression	isInHeader = false		632119	0		=			
ANR	634097	Identifier	isInHeader		632119	0					
ANR	634098	Identifier	false		632119	1					
ANR	634099	ExpressionStatement	isImmediatelyPostHeader = true	924:4:27177:27207	632119	1	True				
ANR	634100	AssignmentExpression	isImmediatelyPostHeader = true		632119	0		=			
ANR	634101	Identifier	isImmediatelyPostHeader		632119	0					
ANR	634102	Identifier	true		632119	1					
ANR	634103	ExpressionStatement	foundQuestionMark = false	925:4:27213:27238	632119	2	True				
ANR	634104	AssignmentExpression	foundQuestionMark = false		632119	0		=			
ANR	634105	Identifier	foundQuestionMark		632119	0					
ANR	634106	Identifier	false		632119	1					
ANR	634107	IfStatement	if ( currentChar == ']' )		632119	6					
ANR	634108	Condition	currentChar == ']'	927:7:27252:27269	632119	0	True				
ANR	634109	EqualityExpression	currentChar == ']'		632119	0		==			
ANR	634110	Identifier	currentChar		632119	0					
ANR	634111	PrimaryExpression	']'		632119	1					
ANR	634112	CompoundStatement		480:3:13727:13727	632119	1					
ANR	634113	ExpressionStatement	-- squareBracketCount	929:4:27281:27301	632119	0	True				
ANR	634114	UnaryExpression	-- squareBracketCount		632119	0					
ANR	634115	IncDec	--		632119	0					
ANR	634116	Identifier	squareBracketCount		632119	1					
ANR	634117	IfStatement	if ( squareBracketCount <= 0 )		632119	1					
ANR	634118	Condition	squareBracketCount <= 0	930:8:27311:27333	632119	0	True				
ANR	634119	RelationalExpression	squareBracketCount <= 0		632119	0		<=			
ANR	634120	Identifier	squareBracketCount		632119	0					
ANR	634121	PrimaryExpression	0		632119	1					
ANR	634122	CompoundStatement		483:4:13792:13792	632119	1					
ANR	634123	ExpressionStatement	squareBracketCount = 0	932:5:27347:27369	632119	0	True				
ANR	634124	AssignmentExpression	squareBracketCount = 0		632119	0		=			
ANR	634125	Identifier	squareBracketCount		632119	0					
ANR	634126	PrimaryExpression	0		632119	1					
ANR	634127	ExpressionStatement	objCColonAlign = 0	933:5:27376:27394	632119	1	True				
ANR	634128	AssignmentExpression	objCColonAlign = 0		632119	0		=			
ANR	634129	Identifier	objCColonAlign		632119	0					
ANR	634130	PrimaryExpression	0		632119	1					
ANR	634131	IfStatement	if ( currentChar == ')' )		632119	7					
ANR	634132	Condition	currentChar == ')'	936:7:27414:27431	632119	0	True				
ANR	634133	EqualityExpression	currentChar == ')'		632119	0		==			
ANR	634134	Identifier	currentChar		632119	0					
ANR	634135	PrimaryExpression	')'		632119	1					
ANR	634136	CompoundStatement		489:3:13889:13889	632119	1					
ANR	634137	ExpressionStatement	foundCastOperator = false	938:4:27443:27468	632119	0	True				
ANR	634138	AssignmentExpression	foundCastOperator = false		632119	0		=			
ANR	634139	Identifier	foundCastOperator		632119	0					
ANR	634140	Identifier	false		632119	1					
ANR	634141	IfStatement	if ( parenStack -> back ( ) == 0 )		632119	1					
ANR	634142	Condition	parenStack -> back ( ) == 0	939:8:27478:27500	632119	0	True				
ANR	634143	EqualityExpression	parenStack -> back ( ) == 0		632119	0		==			
ANR	634144	CallExpression	parenStack -> back ( )		632119	0					
ANR	634145	Callee	parenStack -> back		632119	0					
ANR	634146	PtrMemberAccess	parenStack -> back		632119	0					
ANR	634147	Identifier	parenStack		632119	0					
ANR	634148	Identifier	back		632119	1					
ANR	634149	ArgumentList			632119	1					
ANR	634150	PrimaryExpression	0		632119	1					
ANR	634151	ExpressionStatement	endOfAsmReached = true	940:5:27508:27530	632119	1	True				
ANR	634152	AssignmentExpression	endOfAsmReached = true		632119	0		=			
ANR	634153	Identifier	endOfAsmReached		632119	0					
ANR	634154	Identifier	true		632119	1					
ANR	634155	IfStatement	if ( currentChar == '{' || currentChar == '}' )		632119	26					
ANR	634156	Condition	currentChar == '{' || currentChar == '}'	945:6:27567:27606	632119	0	True				
ANR	634157	OrExpression	currentChar == '{' || currentChar == '}'		632119	0		||			
ANR	634158	EqualityExpression	currentChar == '{'		632119	0		==			
ANR	634159	Identifier	currentChar		632119	0					
ANR	634160	PrimaryExpression	'{'		632119	1					
ANR	634161	EqualityExpression	currentChar == '}'		632119	1		==			
ANR	634162	Identifier	currentChar		632119	0					
ANR	634163	PrimaryExpression	'}'		632119	1					
ANR	634164	CompoundStatement		535:3:15409:15671	632119	1					
ANR	634165	IfStatement	if ( currentChar == '{' && ! appendOpeningBrace )		632119	0					
ANR	634166	Condition	currentChar == '{' && ! appendOpeningBrace	948:7:27693:27733	632119	0	True				
ANR	634167	AndExpression	currentChar == '{' && ! appendOpeningBrace		632119	0		&&			
ANR	634168	EqualityExpression	currentChar == '{'		632119	0		==			
ANR	634169	Identifier	currentChar		632119	0					
ANR	634170	PrimaryExpression	'{'		632119	1					
ANR	634171	UnaryOperationExpression	! appendOpeningBrace		632119	1					
ANR	634172	UnaryOperator	!		632119	0					
ANR	634173	Identifier	appendOpeningBrace		632119	1					
ANR	634174	CompoundStatement		502:4:14197:14236	632119	1					
ANR	634175	IdentifierDeclStatement	BraceType newBraceType = getBraceType ( ) ;	950:4:27745:27784	632119	0	True				
ANR	634176	IdentifierDecl	newBraceType = getBraceType ( )		632119	0					
ANR	634177	IdentifierDeclType	BraceType		632119	0					
ANR	634178	Identifier	newBraceType		632119	1					
ANR	634179	AssignmentExpression	newBraceType = getBraceType ( )		632119	2		=			
ANR	634180	Identifier	newBraceType		632119	0					
ANR	634181	CallExpression	getBraceType ( )		632119	1					
ANR	634182	Callee	getBraceType		632119	0					
ANR	634183	Identifier	getBraceType		632119	0					
ANR	634184	ArgumentList			632119	1					
ANR	634185	ExpressionStatement	breakCurrentOneLineBlock = false	951:4:27790:27822	632119	1	True				
ANR	634186	AssignmentExpression	breakCurrentOneLineBlock = false		632119	0		=			
ANR	634187	Identifier	breakCurrentOneLineBlock		632119	0					
ANR	634188	Identifier	false		632119	1					
ANR	634189	ExpressionStatement	foundNamespaceHeader = false	952:4:27828:27856	632119	2	True				
ANR	634190	AssignmentExpression	foundNamespaceHeader = false		632119	0		=			
ANR	634191	Identifier	foundNamespaceHeader		632119	0					
ANR	634192	Identifier	false		632119	1					
ANR	634193	ExpressionStatement	foundClassHeader = false	953:4:27862:27886	632119	3	True				
ANR	634194	AssignmentExpression	foundClassHeader = false		632119	0		=			
ANR	634195	Identifier	foundClassHeader		632119	0					
ANR	634196	Identifier	false		632119	1					
ANR	634197	ExpressionStatement	foundStructHeader = false	954:4:27892:27917	632119	4	True				
ANR	634198	AssignmentExpression	foundStructHeader = false		632119	0		=			
ANR	634199	Identifier	foundStructHeader		632119	0					
ANR	634200	Identifier	false		632119	1					
ANR	634201	ExpressionStatement	foundInterfaceHeader = false	955:4:27923:27951	632119	5	True				
ANR	634202	AssignmentExpression	foundInterfaceHeader = false		632119	0		=			
ANR	634203	Identifier	foundInterfaceHeader		632119	0					
ANR	634204	Identifier	false		632119	1					
ANR	634205	ExpressionStatement	foundPreDefinitionHeader = false	956:4:27957:27989	632119	6	True				
ANR	634206	AssignmentExpression	foundPreDefinitionHeader = false		632119	0		=			
ANR	634207	Identifier	foundPreDefinitionHeader		632119	0					
ANR	634208	Identifier	false		632119	1					
ANR	634209	ExpressionStatement	foundPreCommandHeader = false	957:4:27995:28024	632119	7	True				
ANR	634210	AssignmentExpression	foundPreCommandHeader = false		632119	0		=			
ANR	634211	Identifier	foundPreCommandHeader		632119	0					
ANR	634212	Identifier	false		632119	1					
ANR	634213	ExpressionStatement	foundPreCommandMacro = false	958:4:28030:28058	632119	8	True				
ANR	634214	AssignmentExpression	foundPreCommandMacro = false		632119	0		=			
ANR	634215	Identifier	foundPreCommandMacro		632119	0					
ANR	634216	Identifier	false		632119	1					
ANR	634217	ExpressionStatement	foundTrailingReturnType = false	959:4:28064:28095	632119	9	True				
ANR	634218	AssignmentExpression	foundTrailingReturnType = false		632119	0		=			
ANR	634219	Identifier	foundTrailingReturnType		632119	0					
ANR	634220	Identifier	false		632119	1					
ANR	634221	ExpressionStatement	isInPotentialCalculation = false	960:4:28101:28133	632119	10	True				
ANR	634222	AssignmentExpression	isInPotentialCalculation = false		632119	0		=			
ANR	634223	Identifier	isInPotentialCalculation		632119	0					
ANR	634224	Identifier	false		632119	1					
ANR	634225	ExpressionStatement	isInObjCMethodDefinition = false	961:4:28139:28171	632119	11	True				
ANR	634226	AssignmentExpression	isInObjCMethodDefinition = false		632119	0		=			
ANR	634227	Identifier	isInObjCMethodDefinition		632119	0					
ANR	634228	Identifier	false		632119	1					
ANR	634229	ExpressionStatement	isInObjCInterface = false	962:4:28177:28202	632119	12	True				
ANR	634230	AssignmentExpression	isInObjCInterface = false		632119	0		=			
ANR	634231	Identifier	isInObjCInterface		632119	0					
ANR	634232	Identifier	false		632119	1					
ANR	634233	ExpressionStatement	isInEnum = false	963:4:28208:28224	632119	13	True				
ANR	634234	AssignmentExpression	isInEnum = false		632119	0		=			
ANR	634235	Identifier	isInEnum		632119	0					
ANR	634236	Identifier	false		632119	1					
ANR	634237	ExpressionStatement	isJavaStaticConstructor = false	964:4:28230:28261	632119	14	True				
ANR	634238	AssignmentExpression	isJavaStaticConstructor = false		632119	0		=			
ANR	634239	Identifier	isJavaStaticConstructor		632119	0					
ANR	634240	Identifier	false		632119	1					
ANR	634241	ExpressionStatement	isCharImmediatelyPostNonInStmt = false	965:4:28267:28305	632119	15	True				
ANR	634242	AssignmentExpression	isCharImmediatelyPostNonInStmt = false		632119	0		=			
ANR	634243	Identifier	isCharImmediatelyPostNonInStmt		632119	0					
ANR	634244	Identifier	false		632119	1					
ANR	634245	ExpressionStatement	needHeaderOpeningBrace = false	966:4:28311:28341	632119	16	True				
ANR	634246	AssignmentExpression	needHeaderOpeningBrace = false		632119	0		=			
ANR	634247	Identifier	needHeaderOpeningBrace		632119	0					
ANR	634248	Identifier	false		632119	1					
ANR	634249	ExpressionStatement	shouldKeepLineUnbroken = false	967:4:28347:28377	632119	17	True				
ANR	634250	AssignmentExpression	shouldKeepLineUnbroken = false		632119	0		=			
ANR	634251	Identifier	shouldKeepLineUnbroken		632119	0					
ANR	634252	Identifier	false		632119	1					
ANR	634253	ExpressionStatement	objCColonAlign = 0	968:4:28383:28401	632119	18	True				
ANR	634254	AssignmentExpression	objCColonAlign = 0		632119	0		=			
ANR	634255	Identifier	objCColonAlign		632119	0					
ANR	634256	PrimaryExpression	0		632119	1					
ANR	634257	ExpressionStatement	"isPreviousBraceBlockRelated = ! isBraceType ( newBraceType , ARRAY_TYPE )"	970:4:28408:28476	632119	19	True				
ANR	634258	AssignmentExpression	"isPreviousBraceBlockRelated = ! isBraceType ( newBraceType , ARRAY_TYPE )"		632119	0		=			
ANR	634259	Identifier	isPreviousBraceBlockRelated		632119	0					
ANR	634260	UnaryOperationExpression	"! isBraceType ( newBraceType , ARRAY_TYPE )"		632119	1					
ANR	634261	UnaryOperator	!		632119	0					
ANR	634262	CallExpression	"isBraceType ( newBraceType , ARRAY_TYPE )"		632119	1					
ANR	634263	Callee	isBraceType		632119	0					
ANR	634264	Identifier	isBraceType		632119	0					
ANR	634265	ArgumentList	newBraceType		632119	1					
ANR	634266	Argument	newBraceType		632119	0					
ANR	634267	Identifier	newBraceType		632119	0					
ANR	634268	Argument	ARRAY_TYPE		632119	1					
ANR	634269	Identifier	ARRAY_TYPE		632119	0					
ANR	634270	ExpressionStatement	braceTypeStack -> emplace_back ( newBraceType )	971:4:28482:28524	632119	20	True				
ANR	634271	CallExpression	braceTypeStack -> emplace_back ( newBraceType )		632119	0					
ANR	634272	Callee	braceTypeStack -> emplace_back		632119	0					
ANR	634273	PtrMemberAccess	braceTypeStack -> emplace_back		632119	0					
ANR	634274	Identifier	braceTypeStack		632119	0					
ANR	634275	Identifier	emplace_back		632119	1					
ANR	634276	ArgumentList	newBraceType		632119	1					
ANR	634277	Argument	newBraceType		632119	0					
ANR	634278	Identifier	newBraceType		632119	0					
ANR	634279	ExpressionStatement	preBraceHeaderStack -> emplace_back ( currentHeader )	972:4:28530:28578	632119	21	True				
ANR	634280	CallExpression	preBraceHeaderStack -> emplace_back ( currentHeader )		632119	0					
ANR	634281	Callee	preBraceHeaderStack -> emplace_back		632119	0					
ANR	634282	PtrMemberAccess	preBraceHeaderStack -> emplace_back		632119	0					
ANR	634283	Identifier	preBraceHeaderStack		632119	0					
ANR	634284	Identifier	emplace_back		632119	1					
ANR	634285	ArgumentList	currentHeader		632119	1					
ANR	634286	Argument	currentHeader		632119	0					
ANR	634287	Identifier	currentHeader		632119	0					
ANR	634288	ExpressionStatement	currentHeader = nullptr	973:4:28584:28607	632119	22	True				
ANR	634289	AssignmentExpression	currentHeader = nullptr		632119	0		=			
ANR	634290	Identifier	currentHeader		632119	0					
ANR	634291	Identifier	nullptr		632119	1					
ANR	634292	ExpressionStatement	structStack -> push_back ( isInIndentableStruct )	974:4:28613:28657	632119	23	True				
ANR	634293	CallExpression	structStack -> push_back ( isInIndentableStruct )		632119	0					
ANR	634294	Callee	structStack -> push_back		632119	0					
ANR	634295	PtrMemberAccess	structStack -> push_back		632119	0					
ANR	634296	Identifier	structStack		632119	0					
ANR	634297	Identifier	push_back		632119	1					
ANR	634298	ArgumentList	isInIndentableStruct		632119	1					
ANR	634299	Argument	isInIndentableStruct		632119	0					
ANR	634300	Identifier	isInIndentableStruct		632119	0					
ANR	634301	IfStatement	"if ( isBraceType ( newBraceType , STRUCT_TYPE ) && isCStyle ( ) )"		632119	24					
ANR	634302	Condition	"isBraceType ( newBraceType , STRUCT_TYPE ) && isCStyle ( )"	975:8:28667:28718	632119	0	True				
ANR	634303	AndExpression	"isBraceType ( newBraceType , STRUCT_TYPE ) && isCStyle ( )"		632119	0		&&			
ANR	634304	CallExpression	"isBraceType ( newBraceType , STRUCT_TYPE )"		632119	0					
ANR	634305	Callee	isBraceType		632119	0					
ANR	634306	Identifier	isBraceType		632119	0					
ANR	634307	ArgumentList	newBraceType		632119	1					
ANR	634308	Argument	newBraceType		632119	0					
ANR	634309	Identifier	newBraceType		632119	0					
ANR	634310	Argument	STRUCT_TYPE		632119	1					
ANR	634311	Identifier	STRUCT_TYPE		632119	0					
ANR	634312	CallExpression	isCStyle ( )		632119	1					
ANR	634313	Callee	isCStyle		632119	0					
ANR	634314	Identifier	isCStyle		632119	0					
ANR	634315	ArgumentList			632119	1					
ANR	634316	ExpressionStatement	"isInIndentableStruct = isStructAccessModified ( currentLine , charNum )"	976:5:28726:28793	632119	1	True				
ANR	634317	AssignmentExpression	"isInIndentableStruct = isStructAccessModified ( currentLine , charNum )"		632119	0		=			
ANR	634318	Identifier	isInIndentableStruct		632119	0					
ANR	634319	CallExpression	"isStructAccessModified ( currentLine , charNum )"		632119	1					
ANR	634320	Callee	isStructAccessModified		632119	0					
ANR	634321	Identifier	isStructAccessModified		632119	0					
ANR	634322	ArgumentList	currentLine		632119	1					
ANR	634323	Argument	currentLine		632119	0					
ANR	634324	Identifier	currentLine		632119	0					
ANR	634325	Argument	charNum		632119	1					
ANR	634326	Identifier	charNum		632119	0					
ANR	634327	ElseStatement	else		632119	0					
ANR	634328	ExpressionStatement	isInIndentableStruct = false	978:5:28809:28837	632119	0	True				
ANR	634329	AssignmentExpression	isInIndentableStruct = false		632119	0		=			
ANR	634330	Identifier	isInIndentableStruct		632119	0					
ANR	634331	Identifier	false		632119	1					
ANR	634332	IdentifierDeclStatement	BraceType braceType = braceTypeStack -> back ( ) ;	982:3:28908:28952	632119	1	True				
ANR	634333	IdentifierDecl	braceType = braceTypeStack -> back ( )		632119	0					
ANR	634334	IdentifierDeclType	BraceType		632119	0					
ANR	634335	Identifier	braceType		632119	1					
ANR	634336	AssignmentExpression	braceType = braceTypeStack -> back ( )		632119	2		=			
ANR	634337	Identifier	braceType		632119	0					
ANR	634338	CallExpression	braceTypeStack -> back ( )		632119	1					
ANR	634339	Callee	braceTypeStack -> back		632119	0					
ANR	634340	PtrMemberAccess	braceTypeStack -> back		632119	0					
ANR	634341	Identifier	braceTypeStack		632119	0					
ANR	634342	Identifier	back		632119	1					
ANR	634343	ArgumentList			632119	1					
ANR	634344	IdentifierDeclStatement	"bool isOpeningArrayBrace = ( isBraceType ( braceType , ARRAY_TYPE ) && braceTypeStack -> size ( ) >= 2 && ! isBraceType ( ( * braceTypeStack ) [ braceTypeStack -> size ( ) - 2 ] , ARRAY_TYPE ) ) ;"	983:3:28957:29219	632119	2	True				
ANR	634345	IdentifierDecl	"isOpeningArrayBrace = ( isBraceType ( braceType , ARRAY_TYPE ) && braceTypeStack -> size ( ) >= 2 && ! isBraceType ( ( * braceTypeStack ) [ braceTypeStack -> size ( ) - 2 ] , ARRAY_TYPE ) )"		632119	0					
ANR	634346	IdentifierDeclType	bool		632119	0					
ANR	634347	Identifier	isOpeningArrayBrace		632119	1					
ANR	634348	AssignmentExpression	"isOpeningArrayBrace = ( isBraceType ( braceType , ARRAY_TYPE ) && braceTypeStack -> size ( ) >= 2 && ! isBraceType ( ( * braceTypeStack ) [ braceTypeStack -> size ( ) - 2 ] , ARRAY_TYPE ) )"		632119	2		=			
ANR	634349	Identifier	isOpeningArrayBrace		632119	0					
ANR	634350	AndExpression	"isBraceType ( braceType , ARRAY_TYPE ) && braceTypeStack -> size ( ) >= 2 && ! isBraceType ( ( * braceTypeStack ) [ braceTypeStack -> size ( ) - 2 ] , ARRAY_TYPE )"		632119	1		&&			
ANR	634351	CallExpression	"isBraceType ( braceType , ARRAY_TYPE )"		632119	0					
ANR	634352	Callee	isBraceType		632119	0					
ANR	634353	Identifier	isBraceType		632119	0					
ANR	634354	ArgumentList	braceType		632119	1					
ANR	634355	Argument	braceType		632119	0					
ANR	634356	Identifier	braceType		632119	0					
ANR	634357	Argument	ARRAY_TYPE		632119	1					
ANR	634358	Identifier	ARRAY_TYPE		632119	0					
ANR	634359	AndExpression	"braceTypeStack -> size ( ) >= 2 && ! isBraceType ( ( * braceTypeStack ) [ braceTypeStack -> size ( ) - 2 ] , ARRAY_TYPE )"		632119	1		&&			
ANR	634360	RelationalExpression	braceTypeStack -> size ( ) >= 2		632119	0		>=			
ANR	634361	CallExpression	braceTypeStack -> size ( )		632119	0					
ANR	634362	Callee	braceTypeStack -> size		632119	0					
ANR	634363	PtrMemberAccess	braceTypeStack -> size		632119	0					
ANR	634364	Identifier	braceTypeStack		632119	0					
ANR	634365	Identifier	size		632119	1					
ANR	634366	ArgumentList			632119	1					
ANR	634367	PrimaryExpression	2		632119	1					
ANR	634368	UnaryOperationExpression	"! isBraceType ( ( * braceTypeStack ) [ braceTypeStack -> size ( ) - 2 ] , ARRAY_TYPE )"		632119	1					
ANR	634369	UnaryOperator	!		632119	0					
ANR	634370	CallExpression	"isBraceType ( ( * braceTypeStack ) [ braceTypeStack -> size ( ) - 2 ] , ARRAY_TYPE )"		632119	1					
ANR	634371	Callee	isBraceType		632119	0					
ANR	634372	Identifier	isBraceType		632119	0					
ANR	634373	ArgumentList	( * braceTypeStack ) [ braceTypeStack -> size ( ) - 2 ]		632119	1					
ANR	634374	Argument	( * braceTypeStack ) [ braceTypeStack -> size ( ) - 2 ]		632119	0					
ANR	634375	ArrayIndexing	( * braceTypeStack ) [ braceTypeStack -> size ( ) - 2 ]		632119	0					
ANR	634376	UnaryOperationExpression	* braceTypeStack		632119	0					
ANR	634377	UnaryOperator	*		632119	0					
ANR	634378	Identifier	braceTypeStack		632119	1					
ANR	634379	AdditiveExpression	braceTypeStack -> size ( ) - 2		632119	1		-			
ANR	634380	CallExpression	braceTypeStack -> size ( )		632119	0					
ANR	634381	Callee	braceTypeStack -> size		632119	0					
ANR	634382	PtrMemberAccess	braceTypeStack -> size		632119	0					
ANR	634383	Identifier	braceTypeStack		632119	0					
ANR	634384	Identifier	size		632119	1					
ANR	634385	ArgumentList			632119	1					
ANR	634386	PrimaryExpression	2		632119	1					
ANR	634387	Argument	ARRAY_TYPE		632119	1					
ANR	634388	Identifier	ARRAY_TYPE		632119	0					
ANR	634389	IfStatement	if ( currentChar == '}' )		632119	3					
ANR	634390	Condition	currentChar == '}'	988:7:29229:29246	632119	0	True				
ANR	634391	EqualityExpression	currentChar == '}'		632119	0		==			
ANR	634392	Identifier	currentChar		632119	0					
ANR	634393	PrimaryExpression	'}'		632119	1					
ANR	634394	CompoundStatement		541:3:15704:15704	632119	1					
ANR	634395	ExpressionStatement	isAppendPostBlockEmptyLineRequested = false	993:4:29451:29494	632119	0	True				
ANR	634396	AssignmentExpression	isAppendPostBlockEmptyLineRequested = false		632119	0		=			
ANR	634397	Identifier	isAppendPostBlockEmptyLineRequested		632119	0					
ANR	634398	Identifier	false		632119	1					
ANR	634399	IfStatement	if ( isInAsm )		632119	1					
ANR	634400	Condition	isInAsm	994:8:29504:29510	632119	0	True				
ANR	634401	Identifier	isInAsm		632119	0					
ANR	634402	ExpressionStatement	endOfAsmReached = true	995:5:29518:29540	632119	1	True				
ANR	634403	AssignmentExpression	endOfAsmReached = true		632119	0		=			
ANR	634404	Identifier	endOfAsmReached		632119	0					
ANR	634405	Identifier	true		632119	1					
ANR	634406	ExpressionStatement	isInAsmOneLine = isInQuote = false	996:4:29546:29580	632119	2	True				
ANR	634407	AssignmentExpression	isInAsmOneLine = isInQuote = false		632119	0		=			
ANR	634408	Identifier	isInAsmOneLine		632119	0					
ANR	634409	AssignmentExpression	isInQuote = false		632119	1		=			
ANR	634410	Identifier	isInQuote		632119	0					
ANR	634411	Identifier	false		632119	1					
ANR	634412	ExpressionStatement	shouldKeepLineUnbroken = false	997:4:29586:29616	632119	3	True				
ANR	634413	AssignmentExpression	shouldKeepLineUnbroken = false		632119	0		=			
ANR	634414	Identifier	shouldKeepLineUnbroken		632119	0					
ANR	634415	Identifier	false		632119	1					
ANR	634416	ExpressionStatement	squareBracketCount = 0	998:4:29622:29644	632119	4	True				
ANR	634417	AssignmentExpression	squareBracketCount = 0		632119	0		=			
ANR	634418	Identifier	squareBracketCount		632119	0					
ANR	634419	PrimaryExpression	0		632119	1					
ANR	634420	IfStatement	if ( braceTypeStack -> size ( ) > 1 )		632119	5					
ANR	634421	Condition	braceTypeStack -> size ( ) > 1	1000:8:29655:29680	632119	0	True				
ANR	634422	RelationalExpression	braceTypeStack -> size ( ) > 1		632119	0		>			
ANR	634423	CallExpression	braceTypeStack -> size ( )		632119	0					
ANR	634424	Callee	braceTypeStack -> size		632119	0					
ANR	634425	PtrMemberAccess	braceTypeStack -> size		632119	0					
ANR	634426	Identifier	braceTypeStack		632119	0					
ANR	634427	Identifier	size		632119	1					
ANR	634428	ArgumentList			632119	1					
ANR	634429	PrimaryExpression	1		632119	1					
ANR	634430	CompoundStatement		553:4:16139:16139	632119	1					
ANR	634431	ExpressionStatement	previousBraceType = braceTypeStack -> back ( )	1002:5:29694:29736	632119	0	True				
ANR	634432	AssignmentExpression	previousBraceType = braceTypeStack -> back ( )		632119	0		=			
ANR	634433	Identifier	previousBraceType		632119	0					
ANR	634434	CallExpression	braceTypeStack -> back ( )		632119	1					
ANR	634435	Callee	braceTypeStack -> back		632119	0					
ANR	634436	PtrMemberAccess	braceTypeStack -> back		632119	0					
ANR	634437	Identifier	braceTypeStack		632119	0					
ANR	634438	Identifier	back		632119	1					
ANR	634439	ArgumentList			632119	1					
ANR	634440	ExpressionStatement	braceTypeStack -> pop_back ( )	1003:5:29743:29769	632119	1	True				
ANR	634441	CallExpression	braceTypeStack -> pop_back ( )		632119	0					
ANR	634442	Callee	braceTypeStack -> pop_back		632119	0					
ANR	634443	PtrMemberAccess	braceTypeStack -> pop_back		632119	0					
ANR	634444	Identifier	braceTypeStack		632119	0					
ANR	634445	Identifier	pop_back		632119	1					
ANR	634446	ArgumentList			632119	1					
ANR	634447	ExpressionStatement	"isPreviousBraceBlockRelated = ! isBraceType ( braceType , ARRAY_TYPE )"	1004:5:29776:29841	632119	2	True				
ANR	634448	AssignmentExpression	"isPreviousBraceBlockRelated = ! isBraceType ( braceType , ARRAY_TYPE )"		632119	0		=			
ANR	634449	Identifier	isPreviousBraceBlockRelated		632119	0					
ANR	634450	UnaryOperationExpression	"! isBraceType ( braceType , ARRAY_TYPE )"		632119	1					
ANR	634451	UnaryOperator	!		632119	0					
ANR	634452	CallExpression	"isBraceType ( braceType , ARRAY_TYPE )"		632119	1					
ANR	634453	Callee	isBraceType		632119	0					
ANR	634454	Identifier	isBraceType		632119	0					
ANR	634455	ArgumentList	braceType		632119	1					
ANR	634456	Argument	braceType		632119	0					
ANR	634457	Identifier	braceType		632119	0					
ANR	634458	Argument	ARRAY_TYPE		632119	1					
ANR	634459	Identifier	ARRAY_TYPE		632119	0					
ANR	634460	ElseStatement	else		632119	0					
ANR	634461	CompoundStatement		559:4:16314:16314	632119	0					
ANR	634462	ExpressionStatement	previousBraceType = NULL_TYPE	1008:5:29869:29898	632119	0	True				
ANR	634463	AssignmentExpression	previousBraceType = NULL_TYPE		632119	0		=			
ANR	634464	Identifier	previousBraceType		632119	0					
ANR	634465	Identifier	NULL_TYPE		632119	1					
ANR	634466	ExpressionStatement	isPreviousBraceBlockRelated = false	1009:5:29905:29940	632119	1	True				
ANR	634467	AssignmentExpression	isPreviousBraceBlockRelated = false		632119	0		=			
ANR	634468	Identifier	isPreviousBraceBlockRelated		632119	0					
ANR	634469	Identifier	false		632119	1					
ANR	634470	IfStatement	if ( ! preBraceHeaderStack -> empty ( ) )		632119	6					
ANR	634471	Condition	! preBraceHeaderStack -> empty ( )	1012:8:29957:29985	632119	0	True				
ANR	634472	UnaryOperationExpression	! preBraceHeaderStack -> empty ( )		632119	0					
ANR	634473	UnaryOperator	!		632119	0					
ANR	634474	CallExpression	preBraceHeaderStack -> empty ( )		632119	1					
ANR	634475	Callee	preBraceHeaderStack -> empty		632119	0					
ANR	634476	PtrMemberAccess	preBraceHeaderStack -> empty		632119	0					
ANR	634477	Identifier	preBraceHeaderStack		632119	0					
ANR	634478	Identifier	empty		632119	1					
ANR	634479	ArgumentList			632119	1					
ANR	634480	CompoundStatement		565:4:16444:16444	632119	1					
ANR	634481	ExpressionStatement	currentHeader = preBraceHeaderStack -> back ( )	1014:5:29999:30042	632119	0	True				
ANR	634482	AssignmentExpression	currentHeader = preBraceHeaderStack -> back ( )		632119	0		=			
ANR	634483	Identifier	currentHeader		632119	0					
ANR	634484	CallExpression	preBraceHeaderStack -> back ( )		632119	1					
ANR	634485	Callee	preBraceHeaderStack -> back		632119	0					
ANR	634486	PtrMemberAccess	preBraceHeaderStack -> back		632119	0					
ANR	634487	Identifier	preBraceHeaderStack		632119	0					
ANR	634488	Identifier	back		632119	1					
ANR	634489	ArgumentList			632119	1					
ANR	634490	ExpressionStatement	preBraceHeaderStack -> pop_back ( )	1015:5:30049:30080	632119	1	True				
ANR	634491	CallExpression	preBraceHeaderStack -> pop_back ( )		632119	0					
ANR	634492	Callee	preBraceHeaderStack -> pop_back		632119	0					
ANR	634493	PtrMemberAccess	preBraceHeaderStack -> pop_back		632119	0					
ANR	634494	Identifier	preBraceHeaderStack		632119	0					
ANR	634495	Identifier	pop_back		632119	1					
ANR	634496	ArgumentList			632119	1					
ANR	634497	ElseStatement	else		632119	0					
ANR	634498	ExpressionStatement	currentHeader = nullptr	1018:5:30102:30125	632119	0	True				
ANR	634499	AssignmentExpression	currentHeader = nullptr		632119	0		=			
ANR	634500	Identifier	currentHeader		632119	0					
ANR	634501	Identifier	nullptr		632119	1					
ANR	634502	IfStatement	if ( ! structStack -> empty ( ) )		632119	7					
ANR	634503	Condition	! structStack -> empty ( )	1020:8:30136:30156	632119	0	True				
ANR	634504	UnaryOperationExpression	! structStack -> empty ( )		632119	0					
ANR	634505	UnaryOperator	!		632119	0					
ANR	634506	CallExpression	structStack -> empty ( )		632119	1					
ANR	634507	Callee	structStack -> empty		632119	0					
ANR	634508	PtrMemberAccess	structStack -> empty		632119	0					
ANR	634509	Identifier	structStack		632119	0					
ANR	634510	Identifier	empty		632119	1					
ANR	634511	ArgumentList			632119	1					
ANR	634512	CompoundStatement		573:4:16615:16615	632119	1					
ANR	634513	ExpressionStatement	isInIndentableStruct = structStack -> back ( )	1022:5:30170:30212	632119	0	True				
ANR	634514	AssignmentExpression	isInIndentableStruct = structStack -> back ( )		632119	0		=			
ANR	634515	Identifier	isInIndentableStruct		632119	0					
ANR	634516	CallExpression	structStack -> back ( )		632119	1					
ANR	634517	Callee	structStack -> back		632119	0					
ANR	634518	PtrMemberAccess	structStack -> back		632119	0					
ANR	634519	Identifier	structStack		632119	0					
ANR	634520	Identifier	back		632119	1					
ANR	634521	ArgumentList			632119	1					
ANR	634522	ExpressionStatement	structStack -> pop_back ( )	1023:5:30219:30242	632119	1	True				
ANR	634523	CallExpression	structStack -> pop_back ( )		632119	0					
ANR	634524	Callee	structStack -> pop_back		632119	0					
ANR	634525	PtrMemberAccess	structStack -> pop_back		632119	0					
ANR	634526	Identifier	structStack		632119	0					
ANR	634527	Identifier	pop_back		632119	1					
ANR	634528	ArgumentList			632119	1					
ANR	634529	ElseStatement	else		632119	0					
ANR	634530	ExpressionStatement	isInIndentableStruct = false	1026:5:30264:30292	632119	0	True				
ANR	634531	AssignmentExpression	isInIndentableStruct = false		632119	0		=			
ANR	634532	Identifier	isInIndentableStruct		632119	0					
ANR	634533	Identifier	false		632119	1					
ANR	634534	IfStatement	"if ( isNonInStatementArray && ( ! isBraceType ( braceTypeStack -> back ( ) , ARRAY_TYPE ) || peekNextChar ( ) == ';' ) )"		632119	8					
ANR	634535	Condition	"isNonInStatementArray && ( ! isBraceType ( braceTypeStack -> back ( ) , ARRAY_TYPE ) || peekNextChar ( ) == ';' )"	1028:8:30303:30454	632119	0	True				
ANR	634536	AndExpression	"isNonInStatementArray && ( ! isBraceType ( braceTypeStack -> back ( ) , ARRAY_TYPE ) || peekNextChar ( ) == ';' )"		632119	0		&&			
ANR	634537	Identifier	isNonInStatementArray		632119	0					
ANR	634538	OrExpression	"! isBraceType ( braceTypeStack -> back ( ) , ARRAY_TYPE ) || peekNextChar ( ) == ';'"		632119	1		||			
ANR	634539	UnaryOperationExpression	"! isBraceType ( braceTypeStack -> back ( ) , ARRAY_TYPE )"		632119	0					
ANR	634540	UnaryOperator	!		632119	0					
ANR	634541	CallExpression	"isBraceType ( braceTypeStack -> back ( ) , ARRAY_TYPE )"		632119	1					
ANR	634542	Callee	isBraceType		632119	0					
ANR	634543	Identifier	isBraceType		632119	0					
ANR	634544	ArgumentList	braceTypeStack -> back ( )		632119	1					
ANR	634545	Argument	braceTypeStack -> back ( )		632119	0					
ANR	634546	CallExpression	braceTypeStack -> back ( )		632119	0					
ANR	634547	Callee	braceTypeStack -> back		632119	0					
ANR	634548	PtrMemberAccess	braceTypeStack -> back		632119	0					
ANR	634549	Identifier	braceTypeStack		632119	0					
ANR	634550	Identifier	back		632119	1					
ANR	634551	ArgumentList			632119	1					
ANR	634552	Argument	ARRAY_TYPE		632119	1					
ANR	634553	Identifier	ARRAY_TYPE		632119	0					
ANR	634554	EqualityExpression	peekNextChar ( ) == ';'		632119	1		==			
ANR	634555	CallExpression	peekNextChar ( )		632119	0					
ANR	634556	Callee	peekNextChar		632119	0					
ANR	634557	Identifier	peekNextChar		632119	0					
ANR	634558	ArgumentList			632119	1					
ANR	634559	PrimaryExpression	';'		632119	1					
ANR	634560	ExpressionStatement	isImmediatelyPostNonInStmt = true	1031:5:30498:30531	632119	1	True				
ANR	634561	AssignmentExpression	isImmediatelyPostNonInStmt = true		632119	0		=			
ANR	634562	Identifier	isImmediatelyPostNonInStmt		632119	0					
ANR	634563	Identifier	true		632119	1					
ANR	634564	IfStatement	"if ( ! shouldBreakOneLineStatements && ASBeautifier :: getNextWord ( currentLine , charNum ) == AS_ELSE )"		632119	9					
ANR	634565	Condition	"! shouldBreakOneLineStatements && ASBeautifier :: getNextWord ( currentLine , charNum ) == AS_ELSE"	1033:8:30542:30644	632119	0	True				
ANR	634566	AndExpression	"! shouldBreakOneLineStatements && ASBeautifier :: getNextWord ( currentLine , charNum ) == AS_ELSE"		632119	0		&&			
ANR	634567	UnaryOperationExpression	! shouldBreakOneLineStatements		632119	0					
ANR	634568	UnaryOperator	!		632119	0					
ANR	634569	Identifier	shouldBreakOneLineStatements		632119	1					
ANR	634570	EqualityExpression	"ASBeautifier :: getNextWord ( currentLine , charNum ) == AS_ELSE"		632119	1		==			
ANR	634571	CallExpression	"ASBeautifier :: getNextWord ( currentLine , charNum )"		632119	0					
ANR	634572	Callee	ASBeautifier :: getNextWord		632119	0					
ANR	634573	Identifier	ASBeautifier :: getNextWord		632119	0					
ANR	634574	ArgumentList	currentLine		632119	1					
ANR	634575	Argument	currentLine		632119	0					
ANR	634576	Identifier	currentLine		632119	0					
ANR	634577	Argument	charNum		632119	1					
ANR	634578	Identifier	charNum		632119	0					
ANR	634579	Identifier	AS_ELSE		632119	1					
ANR	634580	CompoundStatement		589:5:17167:17234	632119	1					
ANR	634581	IdentifierDeclStatement	"size_t nextText = currentLine . find_first_not_of ( "" \\t"" , charNum + 1 ) ;"	1037:5:30715:30782	632119	0	True				
ANR	634582	IdentifierDecl	"nextText = currentLine . find_first_not_of ( "" \\t"" , charNum + 1 )"		632119	0					
ANR	634583	IdentifierDeclType	size_t		632119	0					
ANR	634584	Identifier	nextText		632119	1					
ANR	634585	AssignmentExpression	"nextText = currentLine . find_first_not_of ( "" \\t"" , charNum + 1 )"		632119	2		=			
ANR	634586	Identifier	nextText		632119	0					
ANR	634587	CallExpression	"currentLine . find_first_not_of ( "" \\t"" , charNum + 1 )"		632119	1					
ANR	634588	Callee	currentLine . find_first_not_of		632119	0					
ANR	634589	MemberAccess	currentLine . find_first_not_of		632119	0					
ANR	634590	Identifier	currentLine		632119	0					
ANR	634591	Identifier	find_first_not_of		632119	1					
ANR	634592	ArgumentList	""" \\t"""		632119	1					
ANR	634593	Argument	""" \\t"""		632119	0					
ANR	634594	PrimaryExpression	""" \\t"""		632119	0					
ANR	634595	Argument	charNum + 1		632119	1					
ANR	634596	AdditiveExpression	charNum + 1		632119	0		+			
ANR	634597	Identifier	charNum		632119	0					
ANR	634598	PrimaryExpression	1		632119	1					
ANR	634599	IfStatement	"if ( ASBeautifier :: peekNextChar ( currentLine , nextText + 3 ) == ' ' )"		632119	1					
ANR	634600	Condition	"ASBeautifier :: peekNextChar ( currentLine , nextText + 3 ) == ' '"	1038:9:30793:30852	632119	0	True				
ANR	634601	EqualityExpression	"ASBeautifier :: peekNextChar ( currentLine , nextText + 3 ) == ' '"		632119	0		==			
ANR	634602	CallExpression	"ASBeautifier :: peekNextChar ( currentLine , nextText + 3 )"		632119	0					
ANR	634603	Callee	ASBeautifier :: peekNextChar		632119	0					
ANR	634604	Identifier	ASBeautifier :: peekNextChar		632119	0					
ANR	634605	ArgumentList	currentLine		632119	1					
ANR	634606	Argument	currentLine		632119	0					
ANR	634607	Identifier	currentLine		632119	0					
ANR	634608	Argument	nextText + 3		632119	1					
ANR	634609	AdditiveExpression	nextText + 3		632119	0		+			
ANR	634610	Identifier	nextText		632119	0					
ANR	634611	PrimaryExpression	3		632119	1					
ANR	634612	PrimaryExpression	' '		632119	1					
ANR	634613	ExpressionStatement	shouldBreakLineAtNextChar = true	1039:6:30861:30893	632119	1	True				
ANR	634614	AssignmentExpression	shouldBreakLineAtNextChar = true		632119	0		=			
ANR	634615	Identifier	shouldBreakLineAtNextChar		632119	0					
ANR	634616	Identifier	true		632119	1					
ANR	634617	ExpressionStatement	appendOpeningBrace = false	1044:3:30930:30956	632119	4	True				
ANR	634618	AssignmentExpression	appendOpeningBrace = false		632119	0		=			
ANR	634619	Identifier	appendOpeningBrace		632119	0					
ANR	634620	Identifier	false		632119	1					
ANR	634621	IfStatement	"if ( isBraceType ( braceType , ARRAY_TYPE ) )"		632119	5					
ANR	634622	Condition	"isBraceType ( braceType , ARRAY_TYPE )"	1045:7:30965:30998	632119	0	True				
ANR	634623	CallExpression	"isBraceType ( braceType , ARRAY_TYPE )"		632119	0					
ANR	634624	Callee	isBraceType		632119	0					
ANR	634625	Identifier	isBraceType		632119	0					
ANR	634626	ArgumentList	braceType		632119	1					
ANR	634627	Argument	braceType		632119	0					
ANR	634628	Identifier	braceType		632119	0					
ANR	634629	Argument	ARRAY_TYPE		632119	1					
ANR	634630	Identifier	ARRAY_TYPE		632119	0					
ANR	634631	CompoundStatement		598:3:17456:17456	632119	1					
ANR	634632	ExpressionStatement	"formatArrayBraces ( braceType , isOpeningArrayBrace )"	1047:4:31010:31059	632119	0	True				
ANR	634633	CallExpression	"formatArrayBraces ( braceType , isOpeningArrayBrace )"		632119	0					
ANR	634634	Callee	formatArrayBraces		632119	0					
ANR	634635	Identifier	formatArrayBraces		632119	0					
ANR	634636	ArgumentList	braceType		632119	1					
ANR	634637	Argument	braceType		632119	0					
ANR	634638	Identifier	braceType		632119	0					
ANR	634639	Argument	isOpeningArrayBrace		632119	1					
ANR	634640	Identifier	isOpeningArrayBrace		632119	0					
ANR	634641	ElseStatement	else		632119	0					
ANR	634642	CompoundStatement		602:3:17529:17529	632119	0					
ANR	634643	IfStatement	if ( currentChar == '{' )		632119	0					
ANR	634644	Condition	currentChar == '{'	1051:8:31087:31104	632119	0	True				
ANR	634645	EqualityExpression	currentChar == '{'		632119	0		==			
ANR	634646	Identifier	currentChar		632119	0					
ANR	634647	PrimaryExpression	'{'		632119	1					
ANR	634648	ExpressionStatement	formatOpeningBrace ( braceType )	1052:5:31112:31141	632119	1	True				
ANR	634649	CallExpression	formatOpeningBrace ( braceType )		632119	0					
ANR	634650	Callee	formatOpeningBrace		632119	0					
ANR	634651	Identifier	formatOpeningBrace		632119	0					
ANR	634652	ArgumentList	braceType		632119	1					
ANR	634653	Argument	braceType		632119	0					
ANR	634654	Identifier	braceType		632119	0					
ANR	634655	ElseStatement	else		632119	0					
ANR	634656	ExpressionStatement	formatClosingBrace ( braceType )	1054:5:31157:31186	632119	0	True				
ANR	634657	CallExpression	formatClosingBrace ( braceType )		632119	0					
ANR	634658	Callee	formatClosingBrace		632119	0					
ANR	634659	Identifier	formatClosingBrace		632119	0					
ANR	634660	ArgumentList	braceType		632119	1					
ANR	634661	Argument	braceType		632119	0					
ANR	634662	Identifier	braceType		632119	0					
ANR	634663	ContinueStatement	continue ;	1056:3:31196:31204	632119	6	True				
ANR	634664	IfStatement	"if ( ( ( ( previousCommandChar == '{' && isPreviousBraceBlockRelated ) || ( ( previousCommandChar == '}' && ! isImmediatelyPostEmptyBlock && isPreviousBraceBlockRelated && ! isPreviousCharPostComment && peekNextChar ( ) != ' ' && ! isBraceType ( previousBraceType , DEFINITION_TYPE ) ) && ! isBraceType ( braceTypeStack -> back ( ) , DEFINITION_TYPE ) ) ) && isOkToBreakBlock ( braceTypeStack -> back ( ) ) ) || ( previousCommandChar == '{' && isBraceType ( braceTypeStack -> back ( ) , ARRAY_TYPE ) && ! isBraceType ( braceTypeStack -> back ( ) , SINGLE_LINE_TYPE ) && isNonInStatementArray ) || ( formattingStyle == STYLE_PICO && ( previousCommandChar == '{' && isPreviousBraceBlockRelated ) && isBraceType ( braceTypeStack -> back ( ) , COMMAND_TYPE ) && isBraceType ( braceTypeStack -> back ( ) , SINGLE_LINE_TYPE ) && braceFormatMode == RUN_IN_MODE ) )"		632119	27					
ANR	634665	Condition	"( ( ( previousCommandChar == '{' && isPreviousBraceBlockRelated ) || ( ( previousCommandChar == '}' && ! isImmediatelyPostEmptyBlock && isPreviousBraceBlockRelated && ! isPreviousCharPostComment && peekNextChar ( ) != ' ' && ! isBraceType ( previousBraceType , DEFINITION_TYPE ) ) && ! isBraceType ( braceTypeStack -> back ( ) , DEFINITION_TYPE ) ) ) && isOkToBreakBlock ( braceTypeStack -> back ( ) ) ) || ( previousCommandChar == '{' && isBraceType ( braceTypeStack -> back ( ) , ARRAY_TYPE ) && ! isBraceType ( braceTypeStack -> back ( ) , SINGLE_LINE_TYPE ) && isNonInStatementArray ) || ( formattingStyle == STYLE_PICO && ( previousCommandChar == '{' && isPreviousBraceBlockRelated ) && isBraceType ( braceTypeStack -> back ( ) , COMMAND_TYPE ) && isBraceType ( braceTypeStack -> back ( ) , SINGLE_LINE_TYPE ) && braceFormatMode == RUN_IN_MODE )"	1059:6:31217:32391	632119	0	True				
ANR	634666	OrExpression	"( ( ( previousCommandChar == '{' && isPreviousBraceBlockRelated ) || ( ( previousCommandChar == '}' && ! isImmediatelyPostEmptyBlock && isPreviousBraceBlockRelated && ! isPreviousCharPostComment && peekNextChar ( ) != ' ' && ! isBraceType ( previousBraceType , DEFINITION_TYPE ) ) && ! isBraceType ( braceTypeStack -> back ( ) , DEFINITION_TYPE ) ) ) && isOkToBreakBlock ( braceTypeStack -> back ( ) ) ) || ( previousCommandChar == '{' && isBraceType ( braceTypeStack -> back ( ) , ARRAY_TYPE ) && ! isBraceType ( braceTypeStack -> back ( ) , SINGLE_LINE_TYPE ) && isNonInStatementArray ) || ( formattingStyle == STYLE_PICO && ( previousCommandChar == '{' && isPreviousBraceBlockRelated ) && isBraceType ( braceTypeStack -> back ( ) , COMMAND_TYPE ) && isBraceType ( braceTypeStack -> back ( ) , SINGLE_LINE_TYPE ) && braceFormatMode == RUN_IN_MODE )"		632119	0		||			
ANR	634667	AndExpression	"( ( previousCommandChar == '{' && isPreviousBraceBlockRelated ) || ( ( previousCommandChar == '}' && ! isImmediatelyPostEmptyBlock && isPreviousBraceBlockRelated && ! isPreviousCharPostComment && peekNextChar ( ) != ' ' && ! isBraceType ( previousBraceType , DEFINITION_TYPE ) ) && ! isBraceType ( braceTypeStack -> back ( ) , DEFINITION_TYPE ) ) ) && isOkToBreakBlock ( braceTypeStack -> back ( ) )"		632119	0		&&			
ANR	634668	OrExpression	"( previousCommandChar == '{' && isPreviousBraceBlockRelated ) || ( ( previousCommandChar == '}' && ! isImmediatelyPostEmptyBlock && isPreviousBraceBlockRelated && ! isPreviousCharPostComment && peekNextChar ( ) != ' ' && ! isBraceType ( previousBraceType , DEFINITION_TYPE ) ) && ! isBraceType ( braceTypeStack -> back ( ) , DEFINITION_TYPE ) )"		632119	0		||			
ANR	634669	AndExpression	previousCommandChar == '{' && isPreviousBraceBlockRelated		632119	0		&&			
ANR	634670	EqualityExpression	previousCommandChar == '{'		632119	0		==			
ANR	634671	Identifier	previousCommandChar		632119	0					
ANR	634672	PrimaryExpression	'{'		632119	1					
ANR	634673	Identifier	isPreviousBraceBlockRelated		632119	1					
ANR	634674	AndExpression	"( previousCommandChar == '}' && ! isImmediatelyPostEmptyBlock && isPreviousBraceBlockRelated && ! isPreviousCharPostComment && peekNextChar ( ) != ' ' && ! isBraceType ( previousBraceType , DEFINITION_TYPE ) ) && ! isBraceType ( braceTypeStack -> back ( ) , DEFINITION_TYPE )"		632119	1		&&			
ANR	634675	AndExpression	"previousCommandChar == '}' && ! isImmediatelyPostEmptyBlock && isPreviousBraceBlockRelated && ! isPreviousCharPostComment && peekNextChar ( ) != ' ' && ! isBraceType ( previousBraceType , DEFINITION_TYPE )"		632119	0		&&			
ANR	634676	EqualityExpression	previousCommandChar == '}'		632119	0		==			
ANR	634677	Identifier	previousCommandChar		632119	0					
ANR	634678	PrimaryExpression	'}'		632119	1					
ANR	634679	AndExpression	"! isImmediatelyPostEmptyBlock && isPreviousBraceBlockRelated && ! isPreviousCharPostComment && peekNextChar ( ) != ' ' && ! isBraceType ( previousBraceType , DEFINITION_TYPE )"		632119	1		&&			
ANR	634680	UnaryOperationExpression	! isImmediatelyPostEmptyBlock		632119	0					
ANR	634681	UnaryOperator	!		632119	0					
ANR	634682	Identifier	isImmediatelyPostEmptyBlock		632119	1					
ANR	634683	AndExpression	"isPreviousBraceBlockRelated && ! isPreviousCharPostComment && peekNextChar ( ) != ' ' && ! isBraceType ( previousBraceType , DEFINITION_TYPE )"		632119	1		&&			
ANR	634684	Identifier	isPreviousBraceBlockRelated		632119	0					
ANR	634685	AndExpression	"! isPreviousCharPostComment && peekNextChar ( ) != ' ' && ! isBraceType ( previousBraceType , DEFINITION_TYPE )"		632119	1		&&			
ANR	634686	UnaryOperationExpression	! isPreviousCharPostComment		632119	0					
ANR	634687	UnaryOperator	!		632119	0					
ANR	634688	Identifier	isPreviousCharPostComment		632119	1					
ANR	634689	AndExpression	"peekNextChar ( ) != ' ' && ! isBraceType ( previousBraceType , DEFINITION_TYPE )"		632119	1		&&			
ANR	634690	EqualityExpression	peekNextChar ( ) != ' '		632119	0		!=			
ANR	634691	CallExpression	peekNextChar ( )		632119	0					
ANR	634692	Callee	peekNextChar		632119	0					
ANR	634693	Identifier	peekNextChar		632119	0					
ANR	634694	ArgumentList			632119	1					
ANR	634695	PrimaryExpression	' '		632119	1					
ANR	634696	UnaryOperationExpression	"! isBraceType ( previousBraceType , DEFINITION_TYPE )"		632119	1					
ANR	634697	UnaryOperator	!		632119	0					
ANR	634698	CallExpression	"isBraceType ( previousBraceType , DEFINITION_TYPE )"		632119	1					
ANR	634699	Callee	isBraceType		632119	0					
ANR	634700	Identifier	isBraceType		632119	0					
ANR	634701	ArgumentList	previousBraceType		632119	1					
ANR	634702	Argument	previousBraceType		632119	0					
ANR	634703	Identifier	previousBraceType		632119	0					
ANR	634704	Argument	DEFINITION_TYPE		632119	1					
ANR	634705	Identifier	DEFINITION_TYPE		632119	0					
ANR	634706	UnaryOperationExpression	"! isBraceType ( braceTypeStack -> back ( ) , DEFINITION_TYPE )"		632119	1					
ANR	634707	UnaryOperator	!		632119	0					
ANR	634708	CallExpression	"isBraceType ( braceTypeStack -> back ( ) , DEFINITION_TYPE )"		632119	1					
ANR	634709	Callee	isBraceType		632119	0					
ANR	634710	Identifier	isBraceType		632119	0					
ANR	634711	ArgumentList	braceTypeStack -> back ( )		632119	1					
ANR	634712	Argument	braceTypeStack -> back ( )		632119	0					
ANR	634713	CallExpression	braceTypeStack -> back ( )		632119	0					
ANR	634714	Callee	braceTypeStack -> back		632119	0					
ANR	634715	PtrMemberAccess	braceTypeStack -> back		632119	0					
ANR	634716	Identifier	braceTypeStack		632119	0					
ANR	634717	Identifier	back		632119	1					
ANR	634718	ArgumentList			632119	1					
ANR	634719	Argument	DEFINITION_TYPE		632119	1					
ANR	634720	Identifier	DEFINITION_TYPE		632119	0					
ANR	634721	CallExpression	isOkToBreakBlock ( braceTypeStack -> back ( ) )		632119	1					
ANR	634722	Callee	isOkToBreakBlock		632119	0					
ANR	634723	Identifier	isOkToBreakBlock		632119	0					
ANR	634724	ArgumentList	braceTypeStack -> back ( )		632119	1					
ANR	634725	Argument	braceTypeStack -> back ( )		632119	0					
ANR	634726	CallExpression	braceTypeStack -> back ( )		632119	0					
ANR	634727	Callee	braceTypeStack -> back		632119	0					
ANR	634728	PtrMemberAccess	braceTypeStack -> back		632119	0					
ANR	634729	Identifier	braceTypeStack		632119	0					
ANR	634730	Identifier	back		632119	1					
ANR	634731	ArgumentList			632119	1					
ANR	634732	OrExpression	"( previousCommandChar == '{' && isBraceType ( braceTypeStack -> back ( ) , ARRAY_TYPE ) && ! isBraceType ( braceTypeStack -> back ( ) , SINGLE_LINE_TYPE ) && isNonInStatementArray ) || ( formattingStyle == STYLE_PICO && ( previousCommandChar == '{' && isPreviousBraceBlockRelated ) && isBraceType ( braceTypeStack -> back ( ) , COMMAND_TYPE ) && isBraceType ( braceTypeStack -> back ( ) , SINGLE_LINE_TYPE ) && braceFormatMode == RUN_IN_MODE )"		632119	1		||			
ANR	634733	AndExpression	"previousCommandChar == '{' && isBraceType ( braceTypeStack -> back ( ) , ARRAY_TYPE ) && ! isBraceType ( braceTypeStack -> back ( ) , SINGLE_LINE_TYPE ) && isNonInStatementArray"		632119	0		&&			
ANR	634734	EqualityExpression	previousCommandChar == '{'		632119	0		==			
ANR	634735	Identifier	previousCommandChar		632119	0					
ANR	634736	PrimaryExpression	'{'		632119	1					
ANR	634737	AndExpression	"isBraceType ( braceTypeStack -> back ( ) , ARRAY_TYPE ) && ! isBraceType ( braceTypeStack -> back ( ) , SINGLE_LINE_TYPE ) && isNonInStatementArray"		632119	1		&&			
ANR	634738	CallExpression	"isBraceType ( braceTypeStack -> back ( ) , ARRAY_TYPE )"		632119	0					
ANR	634739	Callee	isBraceType		632119	0					
ANR	634740	Identifier	isBraceType		632119	0					
ANR	634741	ArgumentList	braceTypeStack -> back ( )		632119	1					
ANR	634742	Argument	braceTypeStack -> back ( )		632119	0					
ANR	634743	CallExpression	braceTypeStack -> back ( )		632119	0					
ANR	634744	Callee	braceTypeStack -> back		632119	0					
ANR	634745	PtrMemberAccess	braceTypeStack -> back		632119	0					
ANR	634746	Identifier	braceTypeStack		632119	0					
ANR	634747	Identifier	back		632119	1					
ANR	634748	ArgumentList			632119	1					
ANR	634749	Argument	ARRAY_TYPE		632119	1					
ANR	634750	Identifier	ARRAY_TYPE		632119	0					
ANR	634751	AndExpression	"! isBraceType ( braceTypeStack -> back ( ) , SINGLE_LINE_TYPE ) && isNonInStatementArray"		632119	1		&&			
ANR	634752	UnaryOperationExpression	"! isBraceType ( braceTypeStack -> back ( ) , SINGLE_LINE_TYPE )"		632119	0					
ANR	634753	UnaryOperator	!		632119	0					
ANR	634754	CallExpression	"isBraceType ( braceTypeStack -> back ( ) , SINGLE_LINE_TYPE )"		632119	1					
ANR	634755	Callee	isBraceType		632119	0					
ANR	634756	Identifier	isBraceType		632119	0					
ANR	634757	ArgumentList	braceTypeStack -> back ( )		632119	1					
ANR	634758	Argument	braceTypeStack -> back ( )		632119	0					
ANR	634759	CallExpression	braceTypeStack -> back ( )		632119	0					
ANR	634760	Callee	braceTypeStack -> back		632119	0					
ANR	634761	PtrMemberAccess	braceTypeStack -> back		632119	0					
ANR	634762	Identifier	braceTypeStack		632119	0					
ANR	634763	Identifier	back		632119	1					
ANR	634764	ArgumentList			632119	1					
ANR	634765	Argument	SINGLE_LINE_TYPE		632119	1					
ANR	634766	Identifier	SINGLE_LINE_TYPE		632119	0					
ANR	634767	Identifier	isNonInStatementArray		632119	1					
ANR	634768	AndExpression	"formattingStyle == STYLE_PICO && ( previousCommandChar == '{' && isPreviousBraceBlockRelated ) && isBraceType ( braceTypeStack -> back ( ) , COMMAND_TYPE ) && isBraceType ( braceTypeStack -> back ( ) , SINGLE_LINE_TYPE ) && braceFormatMode == RUN_IN_MODE"		632119	1		&&			
ANR	634769	EqualityExpression	formattingStyle == STYLE_PICO		632119	0		==			
ANR	634770	Identifier	formattingStyle		632119	0					
ANR	634771	Identifier	STYLE_PICO		632119	1					
ANR	634772	AndExpression	"( previousCommandChar == '{' && isPreviousBraceBlockRelated ) && isBraceType ( braceTypeStack -> back ( ) , COMMAND_TYPE ) && isBraceType ( braceTypeStack -> back ( ) , SINGLE_LINE_TYPE ) && braceFormatMode == RUN_IN_MODE"		632119	1		&&			
ANR	634773	AndExpression	previousCommandChar == '{' && isPreviousBraceBlockRelated		632119	0		&&			
ANR	634774	EqualityExpression	previousCommandChar == '{'		632119	0		==			
ANR	634775	Identifier	previousCommandChar		632119	0					
ANR	634776	PrimaryExpression	'{'		632119	1					
ANR	634777	Identifier	isPreviousBraceBlockRelated		632119	1					
ANR	634778	AndExpression	"isBraceType ( braceTypeStack -> back ( ) , COMMAND_TYPE ) && isBraceType ( braceTypeStack -> back ( ) , SINGLE_LINE_TYPE ) && braceFormatMode == RUN_IN_MODE"		632119	1		&&			
ANR	634779	CallExpression	"isBraceType ( braceTypeStack -> back ( ) , COMMAND_TYPE )"		632119	0					
ANR	634780	Callee	isBraceType		632119	0					
ANR	634781	Identifier	isBraceType		632119	0					
ANR	634782	ArgumentList	braceTypeStack -> back ( )		632119	1					
ANR	634783	Argument	braceTypeStack -> back ( )		632119	0					
ANR	634784	CallExpression	braceTypeStack -> back ( )		632119	0					
ANR	634785	Callee	braceTypeStack -> back		632119	0					
ANR	634786	PtrMemberAccess	braceTypeStack -> back		632119	0					
ANR	634787	Identifier	braceTypeStack		632119	0					
ANR	634788	Identifier	back		632119	1					
ANR	634789	ArgumentList			632119	1					
ANR	634790	Argument	COMMAND_TYPE		632119	1					
ANR	634791	Identifier	COMMAND_TYPE		632119	0					
ANR	634792	AndExpression	"isBraceType ( braceTypeStack -> back ( ) , SINGLE_LINE_TYPE ) && braceFormatMode == RUN_IN_MODE"		632119	1		&&			
ANR	634793	CallExpression	"isBraceType ( braceTypeStack -> back ( ) , SINGLE_LINE_TYPE )"		632119	0					
ANR	634794	Callee	isBraceType		632119	0					
ANR	634795	Identifier	isBraceType		632119	0					
ANR	634796	ArgumentList	braceTypeStack -> back ( )		632119	1					
ANR	634797	Argument	braceTypeStack -> back ( )		632119	0					
ANR	634798	CallExpression	braceTypeStack -> back ( )		632119	0					
ANR	634799	Callee	braceTypeStack -> back		632119	0					
ANR	634800	PtrMemberAccess	braceTypeStack -> back		632119	0					
ANR	634801	Identifier	braceTypeStack		632119	0					
ANR	634802	Identifier	back		632119	1					
ANR	634803	ArgumentList			632119	1					
ANR	634804	Argument	SINGLE_LINE_TYPE		632119	1					
ANR	634805	Identifier	SINGLE_LINE_TYPE		632119	0					
ANR	634806	EqualityExpression	braceFormatMode == RUN_IN_MODE		632119	1		==			
ANR	634807	Identifier	braceFormatMode		632119	0					
ANR	634808	Identifier	RUN_IN_MODE		632119	1					
ANR	634809	CompoundStatement		632:2:18854:18854	632119	1					
ANR	634810	ExpressionStatement	isCharImmediatelyPostOpenBlock = ( previousCommandChar == '{' )	1081:3:32407:32468	632119	0	True				
ANR	634811	AssignmentExpression	isCharImmediatelyPostOpenBlock = ( previousCommandChar == '{' )		632119	0		=			
ANR	634812	Identifier	isCharImmediatelyPostOpenBlock		632119	0					
ANR	634813	EqualityExpression	previousCommandChar == '{'		632119	1		==			
ANR	634814	Identifier	previousCommandChar		632119	0					
ANR	634815	PrimaryExpression	'{'		632119	1					
ANR	634816	ExpressionStatement	isCharImmediatelyPostCloseBlock = ( previousCommandChar == '}' )	1082:3:32473:32535	632119	1	True				
ANR	634817	AssignmentExpression	isCharImmediatelyPostCloseBlock = ( previousCommandChar == '}' )		632119	0		=			
ANR	634818	Identifier	isCharImmediatelyPostCloseBlock		632119	0					
ANR	634819	EqualityExpression	previousCommandChar == '}'		632119	1		==			
ANR	634820	Identifier	previousCommandChar		632119	0					
ANR	634821	PrimaryExpression	'}'		632119	1					
ANR	634822	IfStatement	if ( isCharImmediatelyPostOpenBlock && ! isCharImmediatelyPostComment && ! isCharImmediatelyPostLineComment )		632119	2					
ANR	634823	Condition	isCharImmediatelyPostOpenBlock && ! isCharImmediatelyPostComment && ! isCharImmediatelyPostLineComment	1084:7:32545:32666	632119	0	True				
ANR	634824	AndExpression	isCharImmediatelyPostOpenBlock && ! isCharImmediatelyPostComment && ! isCharImmediatelyPostLineComment		632119	0		&&			
ANR	634825	Identifier	isCharImmediatelyPostOpenBlock		632119	0					
ANR	634826	AndExpression	! isCharImmediatelyPostComment && ! isCharImmediatelyPostLineComment		632119	1		&&			
ANR	634827	UnaryOperationExpression	! isCharImmediatelyPostComment		632119	0					
ANR	634828	UnaryOperator	!		632119	0					
ANR	634829	Identifier	isCharImmediatelyPostComment		632119	1					
ANR	634830	UnaryOperationExpression	! isCharImmediatelyPostLineComment		632119	1					
ANR	634831	UnaryOperator	!		632119	0					
ANR	634832	Identifier	isCharImmediatelyPostLineComment		632119	1					
ANR	634833	CompoundStatement		639:3:19124:19124	632119	1					
ANR	634834	ExpressionStatement	previousCommandChar = ' '	1088:4:32678:32703	632119	0	True				
ANR	634835	AssignmentExpression	previousCommandChar = ' '		632119	0		=			
ANR	634836	Identifier	previousCommandChar		632119	0					
ANR	634837	PrimaryExpression	' '		632119	1					
ANR	634838	IfStatement	if ( braceFormatMode == NONE_MODE )		632119	1					
ANR	634839	Condition	braceFormatMode == NONE_MODE	1090:8:32714:32741	632119	0	True				
ANR	634840	EqualityExpression	braceFormatMode == NONE_MODE		632119	0		==			
ANR	634841	Identifier	braceFormatMode		632119	0					
ANR	634842	Identifier	NONE_MODE		632119	1					
ANR	634843	CompoundStatement		643:4:19200:19200	632119	1					
ANR	634844	IfStatement	"if ( isBraceType ( braceTypeStack -> back ( ) , SINGLE_LINE_TYPE ) && ( isBraceType ( braceTypeStack -> back ( ) , BREAK_BLOCK_TYPE ) || shouldBreakOneLineBlocks ) )"		632119	0					
ANR	634845	Condition	"isBraceType ( braceTypeStack -> back ( ) , SINGLE_LINE_TYPE ) && ( isBraceType ( braceTypeStack -> back ( ) , BREAK_BLOCK_TYPE ) || shouldBreakOneLineBlocks )"	1092:9:32759:32928	632119	0	True				
ANR	634846	AndExpression	"isBraceType ( braceTypeStack -> back ( ) , SINGLE_LINE_TYPE ) && ( isBraceType ( braceTypeStack -> back ( ) , BREAK_BLOCK_TYPE ) || shouldBreakOneLineBlocks )"		632119	0		&&			
ANR	634847	CallExpression	"isBraceType ( braceTypeStack -> back ( ) , SINGLE_LINE_TYPE )"		632119	0					
ANR	634848	Callee	isBraceType		632119	0					
ANR	634849	Identifier	isBraceType		632119	0					
ANR	634850	ArgumentList	braceTypeStack -> back ( )		632119	1					
ANR	634851	Argument	braceTypeStack -> back ( )		632119	0					
ANR	634852	CallExpression	braceTypeStack -> back ( )		632119	0					
ANR	634853	Callee	braceTypeStack -> back		632119	0					
ANR	634854	PtrMemberAccess	braceTypeStack -> back		632119	0					
ANR	634855	Identifier	braceTypeStack		632119	0					
ANR	634856	Identifier	back		632119	1					
ANR	634857	ArgumentList			632119	1					
ANR	634858	Argument	SINGLE_LINE_TYPE		632119	1					
ANR	634859	Identifier	SINGLE_LINE_TYPE		632119	0					
ANR	634860	OrExpression	"isBraceType ( braceTypeStack -> back ( ) , BREAK_BLOCK_TYPE ) || shouldBreakOneLineBlocks"		632119	1		||			
ANR	634861	CallExpression	"isBraceType ( braceTypeStack -> back ( ) , BREAK_BLOCK_TYPE )"		632119	0					
ANR	634862	Callee	isBraceType		632119	0					
ANR	634863	Identifier	isBraceType		632119	0					
ANR	634864	ArgumentList	braceTypeStack -> back ( )		632119	1					
ANR	634865	Argument	braceTypeStack -> back ( )		632119	0					
ANR	634866	CallExpression	braceTypeStack -> back ( )		632119	0					
ANR	634867	Callee	braceTypeStack -> back		632119	0					
ANR	634868	PtrMemberAccess	braceTypeStack -> back		632119	0					
ANR	634869	Identifier	braceTypeStack		632119	0					
ANR	634870	Identifier	back		632119	1					
ANR	634871	ArgumentList			632119	1					
ANR	634872	Argument	BREAK_BLOCK_TYPE		632119	1					
ANR	634873	Identifier	BREAK_BLOCK_TYPE		632119	0					
ANR	634874	Identifier	shouldBreakOneLineBlocks		632119	1					
ANR	634875	ExpressionStatement	isInLineBreak = true	1095:6:32937:32957	632119	1	True				
ANR	634876	AssignmentExpression	isInLineBreak = true		632119	0		=			
ANR	634877	Identifier	isInLineBreak		632119	0					
ANR	634878	Identifier	true		632119	1					
ANR	634879	ElseStatement	else		632119	0					
ANR	634880	IfStatement	if ( currentLineBeginsWithBrace )		632119	0					
ANR	634881	Condition	currentLineBeginsWithBrace	1096:14:32973:32998	632119	0	True				
ANR	634882	Identifier	currentLineBeginsWithBrace		632119	0					
ANR	634883	ExpressionStatement	formatRunIn ( )	1097:6:33007:33020	632119	1	True				
ANR	634884	CallExpression	formatRunIn ( )		632119	0					
ANR	634885	Callee	formatRunIn		632119	0					
ANR	634886	Identifier	formatRunIn		632119	0					
ANR	634887	ArgumentList			632119	1					
ANR	634888	ElseStatement	else		632119	0					
ANR	634889	ExpressionStatement	breakLine ( )	1099:6:33038:33049	632119	0	True				
ANR	634890	CallExpression	breakLine ( )		632119	0					
ANR	634891	Callee	breakLine		632119	0					
ANR	634892	Identifier	breakLine		632119	0					
ANR	634893	ArgumentList			632119	1					
ANR	634894	ElseStatement	else		632119	0					
ANR	634895	IfStatement	if ( braceFormatMode == RUN_IN_MODE && currentChar != '#' )		632119	0					
ANR	634896	Condition	braceFormatMode == RUN_IN_MODE && currentChar != '#'	1101:13:33070:33134	632119	0	True				
ANR	634897	AndExpression	braceFormatMode == RUN_IN_MODE && currentChar != '#'		632119	0		&&			
ANR	634898	EqualityExpression	braceFormatMode == RUN_IN_MODE		632119	0		==			
ANR	634899	Identifier	braceFormatMode		632119	0					
ANR	634900	Identifier	RUN_IN_MODE		632119	1					
ANR	634901	EqualityExpression	currentChar != '#'		632119	1		!=			
ANR	634902	Identifier	currentChar		632119	0					
ANR	634903	PrimaryExpression	'#'		632119	1					
ANR	634904	ExpressionStatement	formatRunIn ( )	1103:5:33142:33155	632119	1	True				
ANR	634905	CallExpression	formatRunIn ( )		632119	0					
ANR	634906	Callee	formatRunIn		632119	0					
ANR	634907	Identifier	formatRunIn		632119	0					
ANR	634908	ArgumentList			632119	1					
ANR	634909	ElseStatement	else		632119	0					
ANR	634910	ExpressionStatement	isInLineBreak = true	1105:5:33171:33191	632119	0	True				
ANR	634911	AssignmentExpression	isInLineBreak = true		632119	0		=			
ANR	634912	Identifier	isInLineBreak		632119	0					
ANR	634913	Identifier	true		632119	1					
ANR	634914	ElseStatement	else		632119	0					
ANR	634915	IfStatement	if ( isCharImmediatelyPostCloseBlock && shouldBreakOneLineStatements && ! isCharImmediatelyPostComment && ( ( isLegalNameChar ( currentChar ) && currentChar != '.' ) || currentChar == '+' || currentChar == '-' || currentChar == '*' || currentChar == '&' || currentChar == '(' ) )		632119	0					
ANR	634916	Condition	isCharImmediatelyPostCloseBlock && shouldBreakOneLineStatements && ! isCharImmediatelyPostComment && ( ( isLegalNameChar ( currentChar ) && currentChar != '.' ) || currentChar == '+' || currentChar == '-' || currentChar == '*' || currentChar == '&' || currentChar == '(' )	1107:12:33210:33589	632119	0	True				
ANR	634917	AndExpression	isCharImmediatelyPostCloseBlock && shouldBreakOneLineStatements && ! isCharImmediatelyPostComment && ( ( isLegalNameChar ( currentChar ) && currentChar != '.' ) || currentChar == '+' || currentChar == '-' || currentChar == '*' || currentChar == '&' || currentChar == '(' )		632119	0		&&			
ANR	634918	Identifier	isCharImmediatelyPostCloseBlock		632119	0					
ANR	634919	AndExpression	shouldBreakOneLineStatements && ! isCharImmediatelyPostComment && ( ( isLegalNameChar ( currentChar ) && currentChar != '.' ) || currentChar == '+' || currentChar == '-' || currentChar == '*' || currentChar == '&' || currentChar == '(' )		632119	1		&&			
ANR	634920	Identifier	shouldBreakOneLineStatements		632119	0					
ANR	634921	AndExpression	! isCharImmediatelyPostComment && ( ( isLegalNameChar ( currentChar ) && currentChar != '.' ) || currentChar == '+' || currentChar == '-' || currentChar == '*' || currentChar == '&' || currentChar == '(' )		632119	1		&&			
ANR	634922	UnaryOperationExpression	! isCharImmediatelyPostComment		632119	0					
ANR	634923	UnaryOperator	!		632119	0					
ANR	634924	Identifier	isCharImmediatelyPostComment		632119	1					
ANR	634925	OrExpression	( isLegalNameChar ( currentChar ) && currentChar != '.' ) || currentChar == '+' || currentChar == '-' || currentChar == '*' || currentChar == '&' || currentChar == '('		632119	1		||			
ANR	634926	AndExpression	isLegalNameChar ( currentChar ) && currentChar != '.'		632119	0		&&			
ANR	634927	CallExpression	isLegalNameChar ( currentChar )		632119	0					
ANR	634928	Callee	isLegalNameChar		632119	0					
ANR	634929	Identifier	isLegalNameChar		632119	0					
ANR	634930	ArgumentList	currentChar		632119	1					
ANR	634931	Argument	currentChar		632119	0					
ANR	634932	Identifier	currentChar		632119	0					
ANR	634933	EqualityExpression	currentChar != '.'		632119	1		!=			
ANR	634934	Identifier	currentChar		632119	0					
ANR	634935	PrimaryExpression	'.'		632119	1					
ANR	634936	OrExpression	currentChar == '+' || currentChar == '-' || currentChar == '*' || currentChar == '&' || currentChar == '('		632119	1		||			
ANR	634937	EqualityExpression	currentChar == '+'		632119	0		==			
ANR	634938	Identifier	currentChar		632119	0					
ANR	634939	PrimaryExpression	'+'		632119	1					
ANR	634940	OrExpression	currentChar == '-' || currentChar == '*' || currentChar == '&' || currentChar == '('		632119	1		||			
ANR	634941	EqualityExpression	currentChar == '-'		632119	0		==			
ANR	634942	Identifier	currentChar		632119	0					
ANR	634943	PrimaryExpression	'-'		632119	1					
ANR	634944	OrExpression	currentChar == '*' || currentChar == '&' || currentChar == '('		632119	1		||			
ANR	634945	EqualityExpression	currentChar == '*'		632119	0		==			
ANR	634946	Identifier	currentChar		632119	0					
ANR	634947	PrimaryExpression	'*'		632119	1					
ANR	634948	OrExpression	currentChar == '&' || currentChar == '('		632119	1		||			
ANR	634949	EqualityExpression	currentChar == '&'		632119	0		==			
ANR	634950	Identifier	currentChar		632119	0					
ANR	634951	PrimaryExpression	'&'		632119	1					
ANR	634952	EqualityExpression	currentChar == '('		632119	1		==			
ANR	634953	Identifier	currentChar		632119	0					
ANR	634954	PrimaryExpression	'('		632119	1					
ANR	634955	CompoundStatement		668:3:20047:20047	632119	1					
ANR	634956	ExpressionStatement	previousCommandChar = ' '	1117:4:33601:33626	632119	0	True				
ANR	634957	AssignmentExpression	previousCommandChar = ' '		632119	0		=			
ANR	634958	Identifier	previousCommandChar		632119	0					
ANR	634959	PrimaryExpression	' '		632119	1					
ANR	634960	ExpressionStatement	isInLineBreak = true	1118:4:33632:33652	632119	1	True				
ANR	634961	AssignmentExpression	isInLineBreak = true		632119	0		=			
ANR	634962	Identifier	isInLineBreak		632119	0					
ANR	634963	Identifier	true		632119	1					
ANR	634964	ExpressionStatement	isImmediatelyPostEmptyBlock = false	1123:2:33698:33733	632119	28	True				
ANR	634965	AssignmentExpression	isImmediatelyPostEmptyBlock = false		632119	0		=			
ANR	634966	Identifier	isImmediatelyPostEmptyBlock		632119	0					
ANR	634967	Identifier	false		632119	1					
ANR	634968	IdentifierDeclStatement	"bool isPotentialHeader = isCharPotentialHeader ( currentLine , charNum ) ;"	1126:2:33760:33828	632119	29	True				
ANR	634969	IdentifierDecl	"isPotentialHeader = isCharPotentialHeader ( currentLine , charNum )"		632119	0					
ANR	634970	IdentifierDeclType	bool		632119	0					
ANR	634971	Identifier	isPotentialHeader		632119	1					
ANR	634972	AssignmentExpression	"isPotentialHeader = isCharPotentialHeader ( currentLine , charNum )"		632119	2		=			
ANR	634973	Identifier	isPotentialHeader		632119	0					
ANR	634974	CallExpression	"isCharPotentialHeader ( currentLine , charNum )"		632119	1					
ANR	634975	Callee	isCharPotentialHeader		632119	0					
ANR	634976	Identifier	isCharPotentialHeader		632119	0					
ANR	634977	ArgumentList	currentLine		632119	1					
ANR	634978	Argument	currentLine		632119	0					
ANR	634979	Identifier	currentLine		632119	0					
ANR	634980	Argument	charNum		632119	1					
ANR	634981	Identifier	charNum		632119	0					
ANR	634982	IfStatement	if ( isPotentialHeader && ! isInTemplate && squareBracketCount == 0 )		632119	30					
ANR	634983	Condition	isPotentialHeader && ! isInTemplate && squareBracketCount == 0	1128:6:33837:33897	632119	0	True				
ANR	634984	AndExpression	isPotentialHeader && ! isInTemplate && squareBracketCount == 0		632119	0		&&			
ANR	634985	Identifier	isPotentialHeader		632119	0					
ANR	634986	AndExpression	! isInTemplate && squareBracketCount == 0		632119	1		&&			
ANR	634987	UnaryOperationExpression	! isInTemplate		632119	0					
ANR	634988	UnaryOperator	!		632119	0					
ANR	634989	Identifier	isInTemplate		632119	1					
ANR	634990	EqualityExpression	squareBracketCount == 0		632119	1		==			
ANR	634991	Identifier	squareBracketCount		632119	0					
ANR	634992	PrimaryExpression	0		632119	1					
ANR	634993	CompoundStatement		681:2:20354:20354	632119	1					
ANR	634994	ExpressionStatement	isNonParenHeader = false	1130:3:33907:33931	632119	0	True				
ANR	634995	AssignmentExpression	isNonParenHeader = false		632119	0		=			
ANR	634996	Identifier	isNonParenHeader		632119	0					
ANR	634997	Identifier	false		632119	1					
ANR	634998	ExpressionStatement	foundClosingHeader = false	1131:3:33936:33962	632119	1	True				
ANR	634999	AssignmentExpression	foundClosingHeader = false		632119	0		=			
ANR	635000	Identifier	foundClosingHeader		632119	0					
ANR	635001	Identifier	false		632119	1					
ANR	635002	ExpressionStatement	newHeader = findHeader ( headers )	1133:3:33968:33999	632119	2	True				
ANR	635003	AssignmentExpression	newHeader = findHeader ( headers )		632119	0		=			
ANR	635004	Identifier	newHeader		632119	0					
ANR	635005	CallExpression	findHeader ( headers )		632119	1					
ANR	635006	Callee	findHeader		632119	0					
ANR	635007	Identifier	findHeader		632119	0					
ANR	635008	ArgumentList	headers		632119	1					
ANR	635009	Argument	headers		632119	0					
ANR	635010	Identifier	headers		632119	0					
ANR	635011	IfStatement	if ( isCStyle ( ) && ( newHeader == & AS_FOREVER || newHeader == & AS_FOREACH ) )		632119	3					
ANR	635012	Condition	isCStyle ( ) && ( newHeader == & AS_FOREVER || newHeader == & AS_FOREACH )	1136:7:34050:34128	632119	0	True				
ANR	635013	AndExpression	isCStyle ( ) && ( newHeader == & AS_FOREVER || newHeader == & AS_FOREACH )		632119	0		&&			
ANR	635014	CallExpression	isCStyle ( )		632119	0					
ANR	635015	Callee	isCStyle		632119	0					
ANR	635016	Identifier	isCStyle		632119	0					
ANR	635017	ArgumentList			632119	1					
ANR	635018	OrExpression	newHeader == & AS_FOREVER || newHeader == & AS_FOREACH		632119	1		||			
ANR	635019	EqualityExpression	newHeader == & AS_FOREVER		632119	0		==			
ANR	635020	Identifier	newHeader		632119	0					
ANR	635021	UnaryOperationExpression	& AS_FOREVER		632119	1					
ANR	635022	UnaryOperator	&		632119	0					
ANR	635023	Identifier	AS_FOREVER		632119	1					
ANR	635024	EqualityExpression	newHeader == & AS_FOREACH		632119	1		==			
ANR	635025	Identifier	newHeader		632119	0					
ANR	635026	UnaryOperationExpression	& AS_FOREACH		632119	1					
ANR	635027	UnaryOperator	&		632119	0					
ANR	635028	Identifier	AS_FOREACH		632119	1					
ANR	635029	CompoundStatement		690:3:20586:20586	632119	1					
ANR	635030	IfStatement	"if ( currentLine . find_first_of ( ""=;"" , charNum ) != string :: npos )"		632119	0					
ANR	635031	Condition	"currentLine . find_first_of ( ""=;"" , charNum ) != string :: npos"	1139:8:34144:34199	632119	0	True				
ANR	635032	EqualityExpression	"currentLine . find_first_of ( ""=;"" , charNum ) != string :: npos"		632119	0		!=			
ANR	635033	CallExpression	"currentLine . find_first_of ( ""=;"" , charNum )"		632119	0					
ANR	635034	Callee	currentLine . find_first_of		632119	0					
ANR	635035	MemberAccess	currentLine . find_first_of		632119	0					
ANR	635036	Identifier	currentLine		632119	0					
ANR	635037	Identifier	find_first_of		632119	1					
ANR	635038	ArgumentList	"""=;"""		632119	1					
ANR	635039	Argument	"""=;"""		632119	0					
ANR	635040	PrimaryExpression	"""=;"""		632119	0					
ANR	635041	Argument	charNum		632119	1					
ANR	635042	Identifier	charNum		632119	0					
ANR	635043	Identifier	string :: npos		632119	1					
ANR	635044	ExpressionStatement	newHeader = nullptr	1140:5:34207:34226	632119	1	True				
ANR	635045	AssignmentExpression	newHeader = nullptr		632119	0		=			
ANR	635046	Identifier	newHeader		632119	0					
ANR	635047	Identifier	nullptr		632119	1					
ANR	635048	IfStatement	if ( isJavaStyle ( ) && ( newHeader == & AS_SYNCHRONIZED ) )		632119	4					
ANR	635049	Condition	isJavaStyle ( ) && ( newHeader == & AS_SYNCHRONIZED )	1142:7:34240:34298	632119	0	True				
ANR	635050	AndExpression	isJavaStyle ( ) && ( newHeader == & AS_SYNCHRONIZED )		632119	0		&&			
ANR	635051	CallExpression	isJavaStyle ( )		632119	0					
ANR	635052	Callee	isJavaStyle		632119	0					
ANR	635053	Identifier	isJavaStyle		632119	0					
ANR	635054	ArgumentList			632119	1					
ANR	635055	EqualityExpression	newHeader == & AS_SYNCHRONIZED		632119	1		==			
ANR	635056	Identifier	newHeader		632119	0					
ANR	635057	UnaryOperationExpression	& AS_SYNCHRONIZED		632119	1					
ANR	635058	UnaryOperator	&		632119	0					
ANR	635059	Identifier	AS_SYNCHRONIZED		632119	1					
ANR	635060	CompoundStatement		696:3:20756:20756	632119	1					
ANR	635061	IfStatement	"if ( ! isBraceType ( braceTypeStack -> back ( ) , COMMAND_TYPE ) )"		632119	0					
ANR	635062	Condition	"! isBraceType ( braceTypeStack -> back ( ) , COMMAND_TYPE )"	1146:8:34375:34424	632119	0	True				
ANR	635063	UnaryOperationExpression	"! isBraceType ( braceTypeStack -> back ( ) , COMMAND_TYPE )"		632119	0					
ANR	635064	UnaryOperator	!		632119	0					
ANR	635065	CallExpression	"isBraceType ( braceTypeStack -> back ( ) , COMMAND_TYPE )"		632119	1					
ANR	635066	Callee	isBraceType		632119	0					
ANR	635067	Identifier	isBraceType		632119	0					
ANR	635068	ArgumentList	braceTypeStack -> back ( )		632119	1					
ANR	635069	Argument	braceTypeStack -> back ( )		632119	0					
ANR	635070	CallExpression	braceTypeStack -> back ( )		632119	0					
ANR	635071	Callee	braceTypeStack -> back		632119	0					
ANR	635072	PtrMemberAccess	braceTypeStack -> back		632119	0					
ANR	635073	Identifier	braceTypeStack		632119	0					
ANR	635074	Identifier	back		632119	1					
ANR	635075	ArgumentList			632119	1					
ANR	635076	Argument	COMMAND_TYPE		632119	1					
ANR	635077	Identifier	COMMAND_TYPE		632119	0					
ANR	635078	ExpressionStatement	newHeader = nullptr	1147:5:34432:34451	632119	1	True				
ANR	635079	AssignmentExpression	newHeader = nullptr		632119	0		=			
ANR	635080	Identifier	newHeader		632119	0					
ANR	635081	Identifier	nullptr		632119	1					
ANR	635082	ElseStatement	else		632119	0					
ANR	635083	IfStatement	"if ( newHeader == & AS_USING && ASBeautifier :: peekNextChar ( currentLine , charNum + ( * newHeader ) . length ( ) - 1 ) != '(' )"		632119	0					
ANR	635084	Condition	"newHeader == & AS_USING && ASBeautifier :: peekNextChar ( currentLine , charNum + ( * newHeader ) . length ( ) - 1 ) != '('"	1149:12:34470:34607	632119	0	True				
ANR	635085	AndExpression	"newHeader == & AS_USING && ASBeautifier :: peekNextChar ( currentLine , charNum + ( * newHeader ) . length ( ) - 1 ) != '('"		632119	0		&&			
ANR	635086	EqualityExpression	newHeader == & AS_USING		632119	0		==			
ANR	635087	Identifier	newHeader		632119	0					
ANR	635088	UnaryOperationExpression	& AS_USING		632119	1					
ANR	635089	UnaryOperator	&		632119	0					
ANR	635090	Identifier	AS_USING		632119	1					
ANR	635091	EqualityExpression	"ASBeautifier :: peekNextChar ( currentLine , charNum + ( * newHeader ) . length ( ) - 1 ) != '('"		632119	1		!=			
ANR	635092	CallExpression	"ASBeautifier :: peekNextChar ( currentLine , charNum + ( * newHeader ) . length ( ) - 1 )"		632119	0					
ANR	635093	Callee	ASBeautifier :: peekNextChar		632119	0					
ANR	635094	Identifier	ASBeautifier :: peekNextChar		632119	0					
ANR	635095	ArgumentList	currentLine		632119	1					
ANR	635096	Argument	currentLine		632119	0					
ANR	635097	Identifier	currentLine		632119	0					
ANR	635098	Argument	charNum + ( * newHeader ) . length ( ) - 1		632119	1					
ANR	635099	AdditiveExpression	charNum + ( * newHeader ) . length ( ) - 1		632119	0		+			
ANR	635100	Identifier	charNum		632119	0					
ANR	635101	AdditiveExpression	( * newHeader ) . length ( ) - 1		632119	1		-			
ANR	635102	CallExpression	( * newHeader ) . length ( )		632119	0					
ANR	635103	Callee	( * newHeader ) . length		632119	0					
ANR	635104	MemberAccess	( * newHeader ) . length		632119	0					
ANR	635105	UnaryOperationExpression	* newHeader		632119	0					
ANR	635106	UnaryOperator	*		632119	0					
ANR	635107	Identifier	newHeader		632119	1					
ANR	635108	Identifier	length		632119	1					
ANR	635109	ArgumentList			632119	1					
ANR	635110	PrimaryExpression	1		632119	1					
ANR	635111	PrimaryExpression	'('		632119	1					
ANR	635112	ExpressionStatement	newHeader = nullptr	1152:4:34614:34633	632119	1	True				
ANR	635113	AssignmentExpression	newHeader = nullptr		632119	0		=			
ANR	635114	Identifier	newHeader		632119	0					
ANR	635115	Identifier	nullptr		632119	1					
ANR	635116	IfStatement	if ( newHeader != nullptr )		632119	5					
ANR	635117	Condition	newHeader != nullptr	1154:7:34643:34662	632119	0	True				
ANR	635118	EqualityExpression	newHeader != nullptr		632119	0		!=			
ANR	635119	Identifier	newHeader		632119	0					
ANR	635120	Identifier	nullptr		632119	1					
ANR	635121	CompoundStatement		736:4:22361:22405	632119	1					
ANR	635122	ExpressionStatement	foundClosingHeader = isClosingHeader ( newHeader )	1156:4:34674:34721	632119	0	True				
ANR	635123	AssignmentExpression	foundClosingHeader = isClosingHeader ( newHeader )		632119	0		=			
ANR	635124	Identifier	foundClosingHeader		632119	0					
ANR	635125	CallExpression	isClosingHeader ( newHeader )		632119	1					
ANR	635126	Callee	isClosingHeader		632119	0					
ANR	635127	Identifier	isClosingHeader		632119	0					
ANR	635128	ArgumentList	newHeader		632119	1					
ANR	635129	Argument	newHeader		632119	0					
ANR	635130	Identifier	newHeader		632119	0					
ANR	635131	IfStatement	if ( ! foundClosingHeader )		632119	1					
ANR	635132	Condition	! foundClosingHeader	1158:8:34732:34750	632119	0	True				
ANR	635133	UnaryOperationExpression	! foundClosingHeader		632119	0					
ANR	635134	UnaryOperator	!		632119	0					
ANR	635135	Identifier	foundClosingHeader		632119	1					
ANR	635136	CompoundStatement		711:4:21209:21209	632119	1					
ANR	635137	IfStatement	if ( ( newHeader == & AS_WHILE && currentHeader == & AS_DO ) || ( newHeader == & _AS_FINALLY && currentHeader == & _AS_TRY ) || ( newHeader == & _AS_EXCEPT && currentHeader == & _AS_TRY ) )		632119	0					
ANR	635138	Condition	( newHeader == & AS_WHILE && currentHeader == & AS_DO ) || ( newHeader == & _AS_FINALLY && currentHeader == & _AS_TRY ) || ( newHeader == & _AS_EXCEPT && currentHeader == & _AS_TRY )	1161:9:34802:34997	632119	0	True				
ANR	635139	OrExpression	( newHeader == & AS_WHILE && currentHeader == & AS_DO ) || ( newHeader == & _AS_FINALLY && currentHeader == & _AS_TRY ) || ( newHeader == & _AS_EXCEPT && currentHeader == & _AS_TRY )		632119	0		||			
ANR	635140	AndExpression	newHeader == & AS_WHILE && currentHeader == & AS_DO		632119	0		&&			
ANR	635141	EqualityExpression	newHeader == & AS_WHILE		632119	0		==			
ANR	635142	Identifier	newHeader		632119	0					
ANR	635143	UnaryOperationExpression	& AS_WHILE		632119	1					
ANR	635144	UnaryOperator	&		632119	0					
ANR	635145	Identifier	AS_WHILE		632119	1					
ANR	635146	EqualityExpression	currentHeader == & AS_DO		632119	1		==			
ANR	635147	Identifier	currentHeader		632119	0					
ANR	635148	UnaryOperationExpression	& AS_DO		632119	1					
ANR	635149	UnaryOperator	&		632119	0					
ANR	635150	Identifier	AS_DO		632119	1					
ANR	635151	OrExpression	( newHeader == & _AS_FINALLY && currentHeader == & _AS_TRY ) || ( newHeader == & _AS_EXCEPT && currentHeader == & _AS_TRY )		632119	1		||			
ANR	635152	AndExpression	newHeader == & _AS_FINALLY && currentHeader == & _AS_TRY		632119	0		&&			
ANR	635153	EqualityExpression	newHeader == & _AS_FINALLY		632119	0		==			
ANR	635154	Identifier	newHeader		632119	0					
ANR	635155	UnaryOperationExpression	& _AS_FINALLY		632119	1					
ANR	635156	UnaryOperator	&		632119	0					
ANR	635157	Identifier	_AS_FINALLY		632119	1					
ANR	635158	EqualityExpression	currentHeader == & _AS_TRY		632119	1		==			
ANR	635159	Identifier	currentHeader		632119	0					
ANR	635160	UnaryOperationExpression	& _AS_TRY		632119	1					
ANR	635161	UnaryOperator	&		632119	0					
ANR	635162	Identifier	_AS_TRY		632119	1					
ANR	635163	AndExpression	newHeader == & _AS_EXCEPT && currentHeader == & _AS_TRY		632119	1		&&			
ANR	635164	EqualityExpression	newHeader == & _AS_EXCEPT		632119	0		==			
ANR	635165	Identifier	newHeader		632119	0					
ANR	635166	UnaryOperationExpression	& _AS_EXCEPT		632119	1					
ANR	635167	UnaryOperator	&		632119	0					
ANR	635168	Identifier	_AS_EXCEPT		632119	1					
ANR	635169	EqualityExpression	currentHeader == & _AS_TRY		632119	1		==			
ANR	635170	Identifier	currentHeader		632119	0					
ANR	635171	UnaryOperationExpression	& _AS_TRY		632119	1					
ANR	635172	UnaryOperator	&		632119	0					
ANR	635173	Identifier	_AS_TRY		632119	1					
ANR	635174	ExpressionStatement	foundClosingHeader = true	1164:6:35006:35031	632119	1	True				
ANR	635175	AssignmentExpression	foundClosingHeader = true		632119	0		=			
ANR	635176	Identifier	foundClosingHeader		632119	0					
ANR	635177	Identifier	true		632119	1					
ANR	635178	ElseStatement	else		632119	0					
ANR	635179	IfStatement	if ( isSharpStyle ( ) && previousNonWSChar == '}' && ( ( newHeader == & AS_SET && currentHeader == & AS_GET ) || ( newHeader == & AS_REMOVE && currentHeader == & AS_ADD ) ) && isOkToBreakBlock ( braceTypeStack -> back ( ) ) )		632119	0					
ANR	635180	Condition	isSharpStyle ( ) && previousNonWSChar == '}' && ( ( newHeader == & AS_SET && currentHeader == & AS_GET ) || ( newHeader == & AS_REMOVE && currentHeader == & AS_ADD ) ) && isOkToBreakBlock ( braceTypeStack -> back ( ) )	1166:14:35106:35364	632119	0	True				
ANR	635181	AndExpression	isSharpStyle ( ) && previousNonWSChar == '}' && ( ( newHeader == & AS_SET && currentHeader == & AS_GET ) || ( newHeader == & AS_REMOVE && currentHeader == & AS_ADD ) ) && isOkToBreakBlock ( braceTypeStack -> back ( ) )		632119	0		&&			
ANR	635182	CallExpression	isSharpStyle ( )		632119	0					
ANR	635183	Callee	isSharpStyle		632119	0					
ANR	635184	Identifier	isSharpStyle		632119	0					
ANR	635185	ArgumentList			632119	1					
ANR	635186	AndExpression	previousNonWSChar == '}' && ( ( newHeader == & AS_SET && currentHeader == & AS_GET ) || ( newHeader == & AS_REMOVE && currentHeader == & AS_ADD ) ) && isOkToBreakBlock ( braceTypeStack -> back ( ) )		632119	1		&&			
ANR	635187	EqualityExpression	previousNonWSChar == '}'		632119	0		==			
ANR	635188	Identifier	previousNonWSChar		632119	0					
ANR	635189	PrimaryExpression	'}'		632119	1					
ANR	635190	AndExpression	( ( newHeader == & AS_SET && currentHeader == & AS_GET ) || ( newHeader == & AS_REMOVE && currentHeader == & AS_ADD ) ) && isOkToBreakBlock ( braceTypeStack -> back ( ) )		632119	1		&&			
ANR	635191	OrExpression	( newHeader == & AS_SET && currentHeader == & AS_GET ) || ( newHeader == & AS_REMOVE && currentHeader == & AS_ADD )		632119	0		||			
ANR	635192	AndExpression	newHeader == & AS_SET && currentHeader == & AS_GET		632119	0		&&			
ANR	635193	EqualityExpression	newHeader == & AS_SET		632119	0		==			
ANR	635194	Identifier	newHeader		632119	0					
ANR	635195	UnaryOperationExpression	& AS_SET		632119	1					
ANR	635196	UnaryOperator	&		632119	0					
ANR	635197	Identifier	AS_SET		632119	1					
ANR	635198	EqualityExpression	currentHeader == & AS_GET		632119	1		==			
ANR	635199	Identifier	currentHeader		632119	0					
ANR	635200	UnaryOperationExpression	& AS_GET		632119	1					
ANR	635201	UnaryOperator	&		632119	0					
ANR	635202	Identifier	AS_GET		632119	1					
ANR	635203	AndExpression	newHeader == & AS_REMOVE && currentHeader == & AS_ADD		632119	1		&&			
ANR	635204	EqualityExpression	newHeader == & AS_REMOVE		632119	0		==			
ANR	635205	Identifier	newHeader		632119	0					
ANR	635206	UnaryOperationExpression	& AS_REMOVE		632119	1					
ANR	635207	UnaryOperator	&		632119	0					
ANR	635208	Identifier	AS_REMOVE		632119	1					
ANR	635209	EqualityExpression	currentHeader == & AS_ADD		632119	1		==			
ANR	635210	Identifier	currentHeader		632119	0					
ANR	635211	UnaryOperationExpression	& AS_ADD		632119	1					
ANR	635212	UnaryOperator	&		632119	0					
ANR	635213	Identifier	AS_ADD		632119	1					
ANR	635214	CallExpression	isOkToBreakBlock ( braceTypeStack -> back ( ) )		632119	1					
ANR	635215	Callee	isOkToBreakBlock		632119	0					
ANR	635216	Identifier	isOkToBreakBlock		632119	0					
ANR	635217	ArgumentList	braceTypeStack -> back ( )		632119	1					
ANR	635218	Argument	braceTypeStack -> back ( )		632119	0					
ANR	635219	CallExpression	braceTypeStack -> back ( )		632119	0					
ANR	635220	Callee	braceTypeStack -> back		632119	0					
ANR	635221	PtrMemberAccess	braceTypeStack -> back		632119	0					
ANR	635222	Identifier	braceTypeStack		632119	0					
ANR	635223	Identifier	back		632119	1					
ANR	635224	ArgumentList			632119	1					
ANR	635225	ExpressionStatement	isAppendPostBlockEmptyLineRequested = false	1171:6:35373:35416	632119	1	True				
ANR	635226	AssignmentExpression	isAppendPostBlockEmptyLineRequested = false		632119	0		=			
ANR	635227	Identifier	isAppendPostBlockEmptyLineRequested		632119	0					
ANR	635228	Identifier	false		632119	1					
ANR	635229	IfStatement	"if ( isSharpStyle ( ) && ( ( newHeader == & AS_SET && currentHeader == & AS_GET ) || ( newHeader == & AS_REMOVE && currentHeader == & AS_ADD ) ) && ! isBraceType ( braceTypeStack -> back ( ) , SINGLE_LINE_TYPE ) && currentLine [ currentLine . find_first_not_of ( "" \\t"" ) ] == '}' )"		632119	2					
ANR	635230	Condition	"isSharpStyle ( ) && ( ( newHeader == & AS_SET && currentHeader == & AS_GET ) || ( newHeader == & AS_REMOVE && currentHeader == & AS_ADD ) ) && ! isBraceType ( braceTypeStack -> back ( ) , SINGLE_LINE_TYPE ) && currentLine [ currentLine . find_first_not_of ( "" \\t"" ) ] == '}'"	1176:8:35562:35858	632119	0	True				
ANR	635231	AndExpression	"isSharpStyle ( ) && ( ( newHeader == & AS_SET && currentHeader == & AS_GET ) || ( newHeader == & AS_REMOVE && currentHeader == & AS_ADD ) ) && ! isBraceType ( braceTypeStack -> back ( ) , SINGLE_LINE_TYPE ) && currentLine [ currentLine . find_first_not_of ( "" \\t"" ) ] == '}'"		632119	0		&&			
ANR	635232	CallExpression	isSharpStyle ( )		632119	0					
ANR	635233	Callee	isSharpStyle		632119	0					
ANR	635234	Identifier	isSharpStyle		632119	0					
ANR	635235	ArgumentList			632119	1					
ANR	635236	AndExpression	"( ( newHeader == & AS_SET && currentHeader == & AS_GET ) || ( newHeader == & AS_REMOVE && currentHeader == & AS_ADD ) ) && ! isBraceType ( braceTypeStack -> back ( ) , SINGLE_LINE_TYPE ) && currentLine [ currentLine . find_first_not_of ( "" \\t"" ) ] == '}'"		632119	1		&&			
ANR	635237	OrExpression	( newHeader == & AS_SET && currentHeader == & AS_GET ) || ( newHeader == & AS_REMOVE && currentHeader == & AS_ADD )		632119	0		||			
ANR	635238	AndExpression	newHeader == & AS_SET && currentHeader == & AS_GET		632119	0		&&			
ANR	635239	EqualityExpression	newHeader == & AS_SET		632119	0		==			
ANR	635240	Identifier	newHeader		632119	0					
ANR	635241	UnaryOperationExpression	& AS_SET		632119	1					
ANR	635242	UnaryOperator	&		632119	0					
ANR	635243	Identifier	AS_SET		632119	1					
ANR	635244	EqualityExpression	currentHeader == & AS_GET		632119	1		==			
ANR	635245	Identifier	currentHeader		632119	0					
ANR	635246	UnaryOperationExpression	& AS_GET		632119	1					
ANR	635247	UnaryOperator	&		632119	0					
ANR	635248	Identifier	AS_GET		632119	1					
ANR	635249	AndExpression	newHeader == & AS_REMOVE && currentHeader == & AS_ADD		632119	1		&&			
ANR	635250	EqualityExpression	newHeader == & AS_REMOVE		632119	0		==			
ANR	635251	Identifier	newHeader		632119	0					
ANR	635252	UnaryOperationExpression	& AS_REMOVE		632119	1					
ANR	635253	UnaryOperator	&		632119	0					
ANR	635254	Identifier	AS_REMOVE		632119	1					
ANR	635255	EqualityExpression	currentHeader == & AS_ADD		632119	1		==			
ANR	635256	Identifier	currentHeader		632119	0					
ANR	635257	UnaryOperationExpression	& AS_ADD		632119	1					
ANR	635258	UnaryOperator	&		632119	0					
ANR	635259	Identifier	AS_ADD		632119	1					
ANR	635260	AndExpression	"! isBraceType ( braceTypeStack -> back ( ) , SINGLE_LINE_TYPE ) && currentLine [ currentLine . find_first_not_of ( "" \\t"" ) ] == '}'"		632119	1		&&			
ANR	635261	UnaryOperationExpression	"! isBraceType ( braceTypeStack -> back ( ) , SINGLE_LINE_TYPE )"		632119	0					
ANR	635262	UnaryOperator	!		632119	0					
ANR	635263	CallExpression	"isBraceType ( braceTypeStack -> back ( ) , SINGLE_LINE_TYPE )"		632119	1					
ANR	635264	Callee	isBraceType		632119	0					
ANR	635265	Identifier	isBraceType		632119	0					
ANR	635266	ArgumentList	braceTypeStack -> back ( )		632119	1					
ANR	635267	Argument	braceTypeStack -> back ( )		632119	0					
ANR	635268	CallExpression	braceTypeStack -> back ( )		632119	0					
ANR	635269	Callee	braceTypeStack -> back		632119	0					
ANR	635270	PtrMemberAccess	braceTypeStack -> back		632119	0					
ANR	635271	Identifier	braceTypeStack		632119	0					
ANR	635272	Identifier	back		632119	1					
ANR	635273	ArgumentList			632119	1					
ANR	635274	Argument	SINGLE_LINE_TYPE		632119	1					
ANR	635275	Identifier	SINGLE_LINE_TYPE		632119	0					
ANR	635276	EqualityExpression	"currentLine [ currentLine . find_first_not_of ( "" \\t"" ) ] == '}'"		632119	1		==			
ANR	635277	ArrayIndexing	"currentLine [ currentLine . find_first_not_of ( "" \\t"" ) ]"		632119	0					
ANR	635278	Identifier	currentLine		632119	0					
ANR	635279	CallExpression	"currentLine . find_first_not_of ( "" \\t"" )"		632119	1					
ANR	635280	Callee	currentLine . find_first_not_of		632119	0					
ANR	635281	MemberAccess	currentLine . find_first_not_of		632119	0					
ANR	635282	Identifier	currentLine		632119	0					
ANR	635283	Identifier	find_first_not_of		632119	1					
ANR	635284	ArgumentList	""" \\t"""		632119	1					
ANR	635285	Argument	""" \\t"""		632119	0					
ANR	635286	PrimaryExpression	""" \\t"""		632119	0					
ANR	635287	PrimaryExpression	'}'		632119	1					
ANR	635288	ExpressionStatement	isInLineBreak = true	1181:5:35866:35886	632119	1	True				
ANR	635289	AssignmentExpression	isInLineBreak = true		632119	0		=			
ANR	635290	Identifier	isInLineBreak		632119	0					
ANR	635291	Identifier	true		632119	1					
ANR	635292	IdentifierDeclStatement	const string * previousHeader = currentHeader ;	1184:4:35909:35953	632119	3	True				
ANR	635293	IdentifierDecl	* previousHeader = currentHeader		632119	0					
ANR	635294	IdentifierDeclType	const string *		632119	0					
ANR	635295	Identifier	previousHeader		632119	1					
ANR	635296	AssignmentExpression	* previousHeader = currentHeader		632119	2		=			
ANR	635297	Identifier	currentHeader		632119	0					
ANR	635298	Identifier	currentHeader		632119	1					
ANR	635299	ExpressionStatement	currentHeader = newHeader	1185:4:35959:35984	632119	4	True				
ANR	635300	AssignmentExpression	currentHeader = newHeader		632119	0		=			
ANR	635301	Identifier	currentHeader		632119	0					
ANR	635302	Identifier	newHeader		632119	1					
ANR	635303	ExpressionStatement	needHeaderOpeningBrace = true	1186:4:35990:36019	632119	5	True				
ANR	635304	AssignmentExpression	needHeaderOpeningBrace = true		632119	0		=			
ANR	635305	Identifier	needHeaderOpeningBrace		632119	0					
ANR	635306	Identifier	true		632119	1					
ANR	635307	IfStatement	if ( ( previousNonWSChar == ';' || previousNonWSChar == ':' ) && ! isInLineBreak && isOkToBreakBlock ( braceTypeStack -> back ( ) ) )		632119	6					
ANR	635308	Condition	( previousNonWSChar == ';' || previousNonWSChar == ':' ) && ! isInLineBreak && isOkToBreakBlock ( braceTypeStack -> back ( ) )	1189:8:36081:36220	632119	0	True				
ANR	635309	AndExpression	( previousNonWSChar == ';' || previousNonWSChar == ':' ) && ! isInLineBreak && isOkToBreakBlock ( braceTypeStack -> back ( ) )		632119	0		&&			
ANR	635310	OrExpression	previousNonWSChar == ';' || previousNonWSChar == ':'		632119	0		||			
ANR	635311	EqualityExpression	previousNonWSChar == ';'		632119	0		==			
ANR	635312	Identifier	previousNonWSChar		632119	0					
ANR	635313	PrimaryExpression	';'		632119	1					
ANR	635314	EqualityExpression	previousNonWSChar == ':'		632119	1		==			
ANR	635315	Identifier	previousNonWSChar		632119	0					
ANR	635316	PrimaryExpression	':'		632119	1					
ANR	635317	AndExpression	! isInLineBreak && isOkToBreakBlock ( braceTypeStack -> back ( ) )		632119	1		&&			
ANR	635318	UnaryOperationExpression	! isInLineBreak		632119	0					
ANR	635319	UnaryOperator	!		632119	0					
ANR	635320	Identifier	isInLineBreak		632119	1					
ANR	635321	CallExpression	isOkToBreakBlock ( braceTypeStack -> back ( ) )		632119	1					
ANR	635322	Callee	isOkToBreakBlock		632119	0					
ANR	635323	Identifier	isOkToBreakBlock		632119	0					
ANR	635324	ArgumentList	braceTypeStack -> back ( )		632119	1					
ANR	635325	Argument	braceTypeStack -> back ( )		632119	0					
ANR	635326	CallExpression	braceTypeStack -> back ( )		632119	0					
ANR	635327	Callee	braceTypeStack -> back		632119	0					
ANR	635328	PtrMemberAccess	braceTypeStack -> back		632119	0					
ANR	635329	Identifier	braceTypeStack		632119	0					
ANR	635330	Identifier	back		632119	1					
ANR	635331	ArgumentList			632119	1					
ANR	635332	CompoundStatement		744:4:22679:22679	632119	1					
ANR	635333	IfStatement	if ( maxCodeLength != string :: npos && previousHeader != & AS_CASE )		632119	0					
ANR	635334	Condition	maxCodeLength != string :: npos && previousHeader != & AS_CASE	1195:9:36350:36421	632119	0	True				
ANR	635335	AndExpression	maxCodeLength != string :: npos && previousHeader != & AS_CASE		632119	0		&&			
ANR	635336	EqualityExpression	maxCodeLength != string :: npos		632119	0		!=			
ANR	635337	Identifier	maxCodeLength		632119	0					
ANR	635338	Identifier	string :: npos		632119	1					
ANR	635339	EqualityExpression	previousHeader != & AS_CASE		632119	1		!=			
ANR	635340	Identifier	previousHeader		632119	0					
ANR	635341	UnaryOperationExpression	& AS_CASE		632119	1					
ANR	635342	UnaryOperator	&		632119	0					
ANR	635343	Identifier	AS_CASE		632119	1					
ANR	635344	ExpressionStatement	isInLineBreak = true	1197:6:36430:36450	632119	1	True				
ANR	635345	AssignmentExpression	isInLineBreak = true		632119	0		=			
ANR	635346	Identifier	isInLineBreak		632119	0					
ANR	635347	Identifier	true		632119	1					
ANR	635348	ElseStatement	else		632119	0					
ANR	635349	ExpressionStatement	isHeaderInMultiStatementLine = true	1199:6:36468:36503	632119	0	True				
ANR	635350	AssignmentExpression	isHeaderInMultiStatementLine = true		632119	0		=			
ANR	635351	Identifier	isHeaderInMultiStatementLine		632119	0					
ANR	635352	Identifier	true		632119	1					
ANR	635353	IfStatement	if ( foundClosingHeader && previousNonWSChar == '}' )		632119	7					
ANR	635354	Condition	foundClosingHeader && previousNonWSChar == '}'	1202:8:36520:36565	632119	0	True				
ANR	635355	AndExpression	foundClosingHeader && previousNonWSChar == '}'		632119	0		&&			
ANR	635356	Identifier	foundClosingHeader		632119	0					
ANR	635357	EqualityExpression	previousNonWSChar == '}'		632119	1		==			
ANR	635358	Identifier	previousNonWSChar		632119	0					
ANR	635359	PrimaryExpression	'}'		632119	1					
ANR	635360	CompoundStatement		755:4:23024:23024	632119	1					
ANR	635361	IfStatement	if ( isOkToBreakBlock ( braceTypeStack -> back ( ) ) )		632119	0					
ANR	635362	Condition	isOkToBreakBlock ( braceTypeStack -> back ( ) )	1204:9:36583:36622	632119	0	True				
ANR	635363	CallExpression	isOkToBreakBlock ( braceTypeStack -> back ( ) )		632119	0					
ANR	635364	Callee	isOkToBreakBlock		632119	0					
ANR	635365	Identifier	isOkToBreakBlock		632119	0					
ANR	635366	ArgumentList	braceTypeStack -> back ( )		632119	1					
ANR	635367	Argument	braceTypeStack -> back ( )		632119	0					
ANR	635368	CallExpression	braceTypeStack -> back ( )		632119	0					
ANR	635369	Callee	braceTypeStack -> back		632119	0					
ANR	635370	PtrMemberAccess	braceTypeStack -> back		632119	0					
ANR	635371	Identifier	braceTypeStack		632119	0					
ANR	635372	Identifier	back		632119	1					
ANR	635373	ArgumentList			632119	1					
ANR	635374	ExpressionStatement	isLineBreakBeforeClosingHeader ( )	1205:6:36631:36663	632119	1	True				
ANR	635375	CallExpression	isLineBreakBeforeClosingHeader ( )		632119	0					
ANR	635376	Callee	isLineBreakBeforeClosingHeader		632119	0					
ANR	635377	Identifier	isLineBreakBeforeClosingHeader		632119	0					
ANR	635378	ArgumentList			632119	1					
ANR	635379	IfStatement	if ( isInLineBreak )		632119	1					
ANR	635380	Condition	isInLineBreak	1208:9:36745:36757	632119	0	True				
ANR	635381	Identifier	isInLineBreak		632119	0					
ANR	635382	ExpressionStatement	nextLineSpacePadNum = getNextLineCommentAdjustment ( )	1209:6:36766:36818	632119	1	True				
ANR	635383	AssignmentExpression	nextLineSpacePadNum = getNextLineCommentAdjustment ( )		632119	0		=			
ANR	635384	Identifier	nextLineSpacePadNum		632119	0					
ANR	635385	CallExpression	getNextLineCommentAdjustment ( )		632119	1					
ANR	635386	Callee	getNextLineCommentAdjustment		632119	0					
ANR	635387	Identifier	getNextLineCommentAdjustment		632119	0					
ANR	635388	ArgumentList			632119	1					
ANR	635389	ElseStatement	else		632119	0					
ANR	635390	ExpressionStatement	spacePadNum = getCurrentLineCommentAdjustment ( )	1211:6:36836:36883	632119	0	True				
ANR	635391	AssignmentExpression	spacePadNum = getCurrentLineCommentAdjustment ( )		632119	0		=			
ANR	635392	Identifier	spacePadNum		632119	0					
ANR	635393	CallExpression	getCurrentLineCommentAdjustment ( )		632119	1					
ANR	635394	Callee	getCurrentLineCommentAdjustment		632119	0					
ANR	635395	Identifier	getCurrentLineCommentAdjustment		632119	0					
ANR	635396	ArgumentList			632119	1					
ANR	635397	ExpressionStatement	isNonParenHeader = findHeader ( nonParenHeaders ) != nullptr	1215:4:36949:37006	632119	8	True				
ANR	635398	AssignmentExpression	isNonParenHeader = findHeader ( nonParenHeaders ) != nullptr		632119	0		=			
ANR	635399	Identifier	isNonParenHeader		632119	0					
ANR	635400	EqualityExpression	findHeader ( nonParenHeaders ) != nullptr		632119	1		!=			
ANR	635401	CallExpression	findHeader ( nonParenHeaders )		632119	0					
ANR	635402	Callee	findHeader		632119	0					
ANR	635403	Identifier	findHeader		632119	0					
ANR	635404	ArgumentList	nonParenHeaders		632119	1					
ANR	635405	Argument	nonParenHeaders		632119	0					
ANR	635406	Identifier	nonParenHeaders		632119	0					
ANR	635407	Identifier	nullptr		632119	1					
ANR	635408	IfStatement	if ( isNonParenHeader && ( currentHeader == & AS_CATCH || currentHeader == & AS_CASE ) )		632119	9					
ANR	635409	Condition	isNonParenHeader && ( currentHeader == & AS_CATCH || currentHeader == & AS_CASE )	1217:8:37017:37121	632119	0	True				
ANR	635410	AndExpression	isNonParenHeader && ( currentHeader == & AS_CATCH || currentHeader == & AS_CASE )		632119	0		&&			
ANR	635411	Identifier	isNonParenHeader		632119	0					
ANR	635412	OrExpression	currentHeader == & AS_CATCH || currentHeader == & AS_CASE		632119	1		||			
ANR	635413	EqualityExpression	currentHeader == & AS_CATCH		632119	0		==			
ANR	635414	Identifier	currentHeader		632119	0					
ANR	635415	UnaryOperationExpression	& AS_CATCH		632119	1					
ANR	635416	UnaryOperator	&		632119	0					
ANR	635417	Identifier	AS_CATCH		632119	1					
ANR	635418	EqualityExpression	currentHeader == & AS_CASE		632119	1		==			
ANR	635419	Identifier	currentHeader		632119	0					
ANR	635420	UnaryOperationExpression	& AS_CASE		632119	1					
ANR	635421	UnaryOperator	&		632119	0					
ANR	635422	Identifier	AS_CASE		632119	1					
ANR	635423	CompoundStatement		773:5:23587:23640	632119	1					
ANR	635424	IdentifierDeclStatement	int startChar = charNum + currentHeader -> length ( ) - 1 ;	1221:5:37135:37188	632119	0	True				
ANR	635425	IdentifierDecl	startChar = charNum + currentHeader -> length ( ) - 1		632119	0					
ANR	635426	IdentifierDeclType	int		632119	0					
ANR	635427	Identifier	startChar		632119	1					
ANR	635428	AssignmentExpression	startChar = charNum + currentHeader -> length ( ) - 1		632119	2		=			
ANR	635429	Identifier	startChar		632119	0					
ANR	635430	AdditiveExpression	charNum + currentHeader -> length ( ) - 1		632119	1		+			
ANR	635431	Identifier	charNum		632119	0					
ANR	635432	AdditiveExpression	currentHeader -> length ( ) - 1		632119	1		-			
ANR	635433	CallExpression	currentHeader -> length ( )		632119	0					
ANR	635434	Callee	currentHeader -> length		632119	0					
ANR	635435	PtrMemberAccess	currentHeader -> length		632119	0					
ANR	635436	Identifier	currentHeader		632119	0					
ANR	635437	Identifier	length		632119	1					
ANR	635438	ArgumentList			632119	1					
ANR	635439	PrimaryExpression	1		632119	1					
ANR	635440	IfStatement	"if ( ASBeautifier :: peekNextChar ( currentLine , startChar ) == '(' )"		632119	1					
ANR	635441	Condition	"ASBeautifier :: peekNextChar ( currentLine , startChar ) == '('"	1222:9:37199:37255	632119	0	True				
ANR	635442	EqualityExpression	"ASBeautifier :: peekNextChar ( currentLine , startChar ) == '('"		632119	0		==			
ANR	635443	CallExpression	"ASBeautifier :: peekNextChar ( currentLine , startChar )"		632119	0					
ANR	635444	Callee	ASBeautifier :: peekNextChar		632119	0					
ANR	635445	Identifier	ASBeautifier :: peekNextChar		632119	0					
ANR	635446	ArgumentList	currentLine		632119	1					
ANR	635447	Argument	currentLine		632119	0					
ANR	635448	Identifier	currentLine		632119	0					
ANR	635449	Argument	startChar		632119	1					
ANR	635450	Identifier	startChar		632119	0					
ANR	635451	PrimaryExpression	'('		632119	1					
ANR	635452	ExpressionStatement	isNonParenHeader = false	1223:6:37264:37288	632119	1	True				
ANR	635453	AssignmentExpression	isNonParenHeader = false		632119	0		=			
ANR	635454	Identifier	isNonParenHeader		632119	0					
ANR	635455	Identifier	false		632119	1					
ANR	635456	IfStatement	if ( currentHeader == & AS_IF && previousHeader == & AS_ELSE && isInLineBreak && ! shouldBreakElseIfs && ! isCharImmediatelyPostLineComment && ! isImmediatelyPostPreprocessor )		632119	10					
ANR	635457	Condition	currentHeader == & AS_IF && previousHeader == & AS_ELSE && isInLineBreak && ! shouldBreakElseIfs && ! isCharImmediatelyPostLineComment && ! isImmediatelyPostPreprocessor	1227:8:37338:37561	632119	0	True				
ANR	635458	AndExpression	currentHeader == & AS_IF && previousHeader == & AS_ELSE && isInLineBreak && ! shouldBreakElseIfs && ! isCharImmediatelyPostLineComment && ! isImmediatelyPostPreprocessor		632119	0		&&			
ANR	635459	EqualityExpression	currentHeader == & AS_IF		632119	0		==			
ANR	635460	Identifier	currentHeader		632119	0					
ANR	635461	UnaryOperationExpression	& AS_IF		632119	1					
ANR	635462	UnaryOperator	&		632119	0					
ANR	635463	Identifier	AS_IF		632119	1					
ANR	635464	AndExpression	previousHeader == & AS_ELSE && isInLineBreak && ! shouldBreakElseIfs && ! isCharImmediatelyPostLineComment && ! isImmediatelyPostPreprocessor		632119	1		&&			
ANR	635465	EqualityExpression	previousHeader == & AS_ELSE		632119	0		==			
ANR	635466	Identifier	previousHeader		632119	0					
ANR	635467	UnaryOperationExpression	& AS_ELSE		632119	1					
ANR	635468	UnaryOperator	&		632119	0					
ANR	635469	Identifier	AS_ELSE		632119	1					
ANR	635470	AndExpression	isInLineBreak && ! shouldBreakElseIfs && ! isCharImmediatelyPostLineComment && ! isImmediatelyPostPreprocessor		632119	1		&&			
ANR	635471	Identifier	isInLineBreak		632119	0					
ANR	635472	AndExpression	! shouldBreakElseIfs && ! isCharImmediatelyPostLineComment && ! isImmediatelyPostPreprocessor		632119	1		&&			
ANR	635473	UnaryOperationExpression	! shouldBreakElseIfs		632119	0					
ANR	635474	UnaryOperator	!		632119	0					
ANR	635475	Identifier	shouldBreakElseIfs		632119	1					
ANR	635476	AndExpression	! isCharImmediatelyPostLineComment && ! isImmediatelyPostPreprocessor		632119	1		&&			
ANR	635477	UnaryOperationExpression	! isCharImmediatelyPostLineComment		632119	0					
ANR	635478	UnaryOperator	!		632119	0					
ANR	635479	Identifier	isCharImmediatelyPostLineComment		632119	1					
ANR	635480	UnaryOperationExpression	! isImmediatelyPostPreprocessor		632119	1					
ANR	635481	UnaryOperator	!		632119	0					
ANR	635482	Identifier	isImmediatelyPostPreprocessor		632119	1					
ANR	635483	CompoundStatement		787:5:24073:24148	632119	1					
ANR	635484	IdentifierDeclStatement	size_t start = formattedLine . length ( ) >= 6 ? formattedLine . length ( ) - 6 : 0 ;	1235:5:37621:37696	632119	0	True				
ANR	635485	IdentifierDecl	start = formattedLine . length ( ) >= 6 ? formattedLine . length ( ) - 6 : 0		632119	0					
ANR	635486	IdentifierDeclType	size_t		632119	0					
ANR	635487	Identifier	start		632119	1					
ANR	635488	AssignmentExpression	start = formattedLine . length ( ) >= 6 ? formattedLine . length ( ) - 6 : 0		632119	2		=			
ANR	635489	Identifier	start		632119	0					
ANR	635490	ConditionalExpression	formattedLine . length ( ) >= 6 ? formattedLine . length ( ) - 6 : 0		632119	1					
ANR	635491	Condition	formattedLine . length ( ) >= 6		632119	0					
ANR	635492	RelationalExpression	formattedLine . length ( ) >= 6		632119	0		>=			
ANR	635493	CallExpression	formattedLine . length ( )		632119	0					
ANR	635494	Callee	formattedLine . length		632119	0					
ANR	635495	MemberAccess	formattedLine . length		632119	0					
ANR	635496	Identifier	formattedLine		632119	0					
ANR	635497	Identifier	length		632119	1					
ANR	635498	ArgumentList			632119	1					
ANR	635499	PrimaryExpression	6		632119	1					
ANR	635500	AdditiveExpression	formattedLine . length ( ) - 6		632119	1		-			
ANR	635501	CallExpression	formattedLine . length ( )		632119	0					
ANR	635502	Callee	formattedLine . length		632119	0					
ANR	635503	MemberAccess	formattedLine . length		632119	0					
ANR	635504	Identifier	formattedLine		632119	0					
ANR	635505	Identifier	length		632119	1					
ANR	635506	ArgumentList			632119	1					
ANR	635507	PrimaryExpression	6		632119	1					
ANR	635508	PrimaryExpression	0		632119	2					
ANR	635509	IfStatement	"if ( formattedLine . find ( AS_ELSE , start ) != string :: npos )"		632119	1					
ANR	635510	Condition	"formattedLine . find ( AS_ELSE , start ) != string :: npos"	1236:9:37707:37756	632119	0	True				
ANR	635511	EqualityExpression	"formattedLine . find ( AS_ELSE , start ) != string :: npos"		632119	0		!=			
ANR	635512	CallExpression	"formattedLine . find ( AS_ELSE , start )"		632119	0					
ANR	635513	Callee	formattedLine . find		632119	0					
ANR	635514	MemberAccess	formattedLine . find		632119	0					
ANR	635515	Identifier	formattedLine		632119	0					
ANR	635516	Identifier	find		632119	1					
ANR	635517	ArgumentList	AS_ELSE		632119	1					
ANR	635518	Argument	AS_ELSE		632119	0					
ANR	635519	Identifier	AS_ELSE		632119	0					
ANR	635520	Argument	start		632119	1					
ANR	635521	Identifier	start		632119	0					
ANR	635522	Identifier	string :: npos		632119	1					
ANR	635523	CompoundStatement		789:5:24216:24216	632119	1					
ANR	635524	ExpressionStatement	appendSpacePad ( )	1238:6:37772:37788	632119	0	True				
ANR	635525	CallExpression	appendSpacePad ( )		632119	0					
ANR	635526	Callee	appendSpacePad		632119	0					
ANR	635527	Identifier	appendSpacePad		632119	0					
ANR	635528	ArgumentList			632119	1					
ANR	635529	ExpressionStatement	isInLineBreak = false	1239:6:37796:37817	632119	1	True				
ANR	635530	AssignmentExpression	isInLineBreak = false		632119	0		=			
ANR	635531	Identifier	isInLineBreak		632119	0					
ANR	635532	Identifier	false		632119	1					
ANR	635533	ExpressionStatement	appendSequence ( * currentHeader )	1243:4:37837:37867	632119	11	True				
ANR	635534	CallExpression	appendSequence ( * currentHeader )		632119	0					
ANR	635535	Callee	appendSequence		632119	0					
ANR	635536	Identifier	appendSequence		632119	0					
ANR	635537	ArgumentList	* currentHeader		632119	1					
ANR	635538	Argument	* currentHeader		632119	0					
ANR	635539	UnaryOperationExpression	* currentHeader		632119	0					
ANR	635540	UnaryOperator	*		632119	0					
ANR	635541	Identifier	currentHeader		632119	1					
ANR	635542	ExpressionStatement	goForward ( currentHeader -> length ( ) - 1 )	1244:4:37873:37911	632119	12	True				
ANR	635543	CallExpression	goForward ( currentHeader -> length ( ) - 1 )		632119	0					
ANR	635544	Callee	goForward		632119	0					
ANR	635545	Identifier	goForward		632119	0					
ANR	635546	ArgumentList	currentHeader -> length ( ) - 1		632119	1					
ANR	635547	Argument	currentHeader -> length ( ) - 1		632119	0					
ANR	635548	AdditiveExpression	currentHeader -> length ( ) - 1		632119	0		-			
ANR	635549	CallExpression	currentHeader -> length ( )		632119	0					
ANR	635550	Callee	currentHeader -> length		632119	0					
ANR	635551	PtrMemberAccess	currentHeader -> length		632119	0					
ANR	635552	Identifier	currentHeader		632119	0					
ANR	635553	Identifier	length		632119	1					
ANR	635554	ArgumentList			632119	1					
ANR	635555	PrimaryExpression	1		632119	1					
ANR	635556	IfStatement	if ( shouldPadHeader && ! isNonParenHeader && charNum < ( int ) currentLine . length ( ) - 1 && ! isWhiteSpace ( currentLine [ charNum + 1 ] ) )		632119	13					
ANR	635557	Condition	shouldPadHeader && ! isNonParenHeader && charNum < ( int ) currentLine . length ( ) - 1 && ! isWhiteSpace ( currentLine [ charNum + 1 ] )	1248:8:38131:38277	632119	0	True				
ANR	635558	AndExpression	shouldPadHeader && ! isNonParenHeader && charNum < ( int ) currentLine . length ( ) - 1 && ! isWhiteSpace ( currentLine [ charNum + 1 ] )		632119	0		&&			
ANR	635559	Identifier	shouldPadHeader		632119	0					
ANR	635560	AndExpression	! isNonParenHeader && charNum < ( int ) currentLine . length ( ) - 1 && ! isWhiteSpace ( currentLine [ charNum + 1 ] )		632119	1		&&			
ANR	635561	UnaryOperationExpression	! isNonParenHeader		632119	0					
ANR	635562	UnaryOperator	!		632119	0					
ANR	635563	Identifier	isNonParenHeader		632119	1					
ANR	635564	AndExpression	charNum < ( int ) currentLine . length ( ) - 1 && ! isWhiteSpace ( currentLine [ charNum + 1 ] )		632119	1		&&			
ANR	635565	RelationalExpression	charNum < ( int ) currentLine . length ( ) - 1		632119	0		<			
ANR	635566	Identifier	charNum		632119	0					
ANR	635567	AdditiveExpression	( int ) currentLine . length ( ) - 1		632119	1		-			
ANR	635568	CastExpression	( int ) currentLine . length ( )		632119	0					
ANR	635569	CastTarget	int		632119	0					
ANR	635570	CallExpression	currentLine . length ( )		632119	1					
ANR	635571	Callee	currentLine . length		632119	0					
ANR	635572	MemberAccess	currentLine . length		632119	0					
ANR	635573	Identifier	currentLine		632119	0					
ANR	635574	Identifier	length		632119	1					
ANR	635575	ArgumentList			632119	1					
ANR	635576	PrimaryExpression	1		632119	1					
ANR	635577	UnaryOperationExpression	! isWhiteSpace ( currentLine [ charNum + 1 ] )		632119	1					
ANR	635578	UnaryOperator	!		632119	0					
ANR	635579	CallExpression	isWhiteSpace ( currentLine [ charNum + 1 ] )		632119	1					
ANR	635580	Callee	isWhiteSpace		632119	0					
ANR	635581	Identifier	isWhiteSpace		632119	0					
ANR	635582	ArgumentList	currentLine [ charNum + 1 ]		632119	1					
ANR	635583	Argument	currentLine [ charNum + 1 ]		632119	0					
ANR	635584	ArrayIndexing	currentLine [ charNum + 1 ]		632119	0					
ANR	635585	Identifier	currentLine		632119	0					
ANR	635586	AdditiveExpression	charNum + 1		632119	1		+			
ANR	635587	Identifier	charNum		632119	0					
ANR	635588	PrimaryExpression	1		632119	1					
ANR	635589	ExpressionStatement	appendSpacePad ( )	1251:5:38285:38301	632119	1	True				
ANR	635590	CallExpression	appendSpacePad ( )		632119	0					
ANR	635591	Callee	appendSpacePad		632119	0					
ANR	635592	Identifier	appendSpacePad		632119	0					
ANR	635593	ArgumentList			632119	1					
ANR	635594	IfStatement	if ( currentHeader != & AS_CASE && currentHeader != & AS_DEFAULT && ! ( foundClosingHeader && currentHeader == & AS_WHILE ) )		632119	14					
ANR	635595	Condition	currentHeader != & AS_CASE && currentHeader != & AS_DEFAULT && ! ( foundClosingHeader && currentHeader == & AS_WHILE )	1257:8:38524:38647	632119	0	True				
ANR	635596	AndExpression	currentHeader != & AS_CASE && currentHeader != & AS_DEFAULT && ! ( foundClosingHeader && currentHeader == & AS_WHILE )		632119	0		&&			
ANR	635597	EqualityExpression	currentHeader != & AS_CASE		632119	0		!=			
ANR	635598	Identifier	currentHeader		632119	0					
ANR	635599	UnaryOperationExpression	& AS_CASE		632119	1					
ANR	635600	UnaryOperator	&		632119	0					
ANR	635601	Identifier	AS_CASE		632119	1					
ANR	635602	AndExpression	currentHeader != & AS_DEFAULT && ! ( foundClosingHeader && currentHeader == & AS_WHILE )		632119	1		&&			
ANR	635603	EqualityExpression	currentHeader != & AS_DEFAULT		632119	0		!=			
ANR	635604	Identifier	currentHeader		632119	0					
ANR	635605	UnaryOperationExpression	& AS_DEFAULT		632119	1					
ANR	635606	UnaryOperator	&		632119	0					
ANR	635607	Identifier	AS_DEFAULT		632119	1					
ANR	635608	UnaryOperationExpression	! ( foundClosingHeader && currentHeader == & AS_WHILE )		632119	1					
ANR	635609	UnaryOperator	!		632119	0					
ANR	635610	AndExpression	foundClosingHeader && currentHeader == & AS_WHILE		632119	1		&&			
ANR	635611	Identifier	foundClosingHeader		632119	0					
ANR	635612	EqualityExpression	currentHeader == & AS_WHILE		632119	1		==			
ANR	635613	Identifier	currentHeader		632119	0					
ANR	635614	UnaryOperationExpression	& AS_WHILE		632119	1					
ANR	635615	UnaryOperator	&		632119	0					
ANR	635616	Identifier	AS_WHILE		632119	1					
ANR	635617	CompoundStatement		811:4:25106:25106	632119	1					
ANR	635618	ExpressionStatement	isInHeader = true	1260:5:38661:38678	632119	0	True				
ANR	635619	AssignmentExpression	isInHeader = true		632119	0		=			
ANR	635620	Identifier	isInHeader		632119	0					
ANR	635621	Identifier	true		632119	1					
ANR	635622	IfStatement	if ( isNonParenHeader && ! isSharpStyleWithParen ( currentHeader ) )		632119	1					
ANR	635623	Condition	isNonParenHeader && ! isSharpStyleWithParen ( currentHeader )	1263:9:38762:38818	632119	0	True				
ANR	635624	AndExpression	isNonParenHeader && ! isSharpStyleWithParen ( currentHeader )		632119	0		&&			
ANR	635625	Identifier	isNonParenHeader		632119	0					
ANR	635626	UnaryOperationExpression	! isSharpStyleWithParen ( currentHeader )		632119	1					
ANR	635627	UnaryOperator	!		632119	0					
ANR	635628	CallExpression	isSharpStyleWithParen ( currentHeader )		632119	1					
ANR	635629	Callee	isSharpStyleWithParen		632119	0					
ANR	635630	Identifier	isSharpStyleWithParen		632119	0					
ANR	635631	ArgumentList	currentHeader		632119	1					
ANR	635632	Argument	currentHeader		632119	0					
ANR	635633	Identifier	currentHeader		632119	0					
ANR	635634	CompoundStatement		816:5:25278:25278	632119	1					
ANR	635635	ExpressionStatement	isImmediatelyPostHeader = true	1265:6:38834:38864	632119	0	True				
ANR	635636	AssignmentExpression	isImmediatelyPostHeader = true		632119	0		=			
ANR	635637	Identifier	isImmediatelyPostHeader		632119	0					
ANR	635638	Identifier	true		632119	1					
ANR	635639	ExpressionStatement	isInHeader = false	1266:6:38872:38890	632119	1	True				
ANR	635640	AssignmentExpression	isInHeader = false		632119	0		=			
ANR	635641	Identifier	isInHeader		632119	0					
ANR	635642	Identifier	false		632119	1					
ANR	635643	IfStatement	if ( shouldBreakBlocks && isOkToBreakBlock ( braceTypeStack -> back ( ) ) && ! isHeaderInMultiStatementLine )		632119	15					
ANR	635644	Condition	shouldBreakBlocks && isOkToBreakBlock ( braceTypeStack -> back ( ) ) && ! isHeaderInMultiStatementLine	1270:8:38914:39031	632119	0	True				
ANR	635645	AndExpression	shouldBreakBlocks && isOkToBreakBlock ( braceTypeStack -> back ( ) ) && ! isHeaderInMultiStatementLine		632119	0		&&			
ANR	635646	Identifier	shouldBreakBlocks		632119	0					
ANR	635647	AndExpression	isOkToBreakBlock ( braceTypeStack -> back ( ) ) && ! isHeaderInMultiStatementLine		632119	1		&&			
ANR	635648	CallExpression	isOkToBreakBlock ( braceTypeStack -> back ( ) )		632119	0					
ANR	635649	Callee	isOkToBreakBlock		632119	0					
ANR	635650	Identifier	isOkToBreakBlock		632119	0					
ANR	635651	ArgumentList	braceTypeStack -> back ( )		632119	1					
ANR	635652	Argument	braceTypeStack -> back ( )		632119	0					
ANR	635653	CallExpression	braceTypeStack -> back ( )		632119	0					
ANR	635654	Callee	braceTypeStack -> back		632119	0					
ANR	635655	PtrMemberAccess	braceTypeStack -> back		632119	0					
ANR	635656	Identifier	braceTypeStack		632119	0					
ANR	635657	Identifier	back		632119	1					
ANR	635658	ArgumentList			632119	1					
ANR	635659	UnaryOperationExpression	! isHeaderInMultiStatementLine		632119	1					
ANR	635660	UnaryOperator	!		632119	0					
ANR	635661	Identifier	isHeaderInMultiStatementLine		632119	1					
ANR	635662	CompoundStatement		825:4:25490:25490	632119	1					
ANR	635663	IfStatement	if ( previousHeader == nullptr && ! foundClosingHeader && ! isCharImmediatelyPostOpenBlock && ! isImmediatelyPostCommentOnly )		632119	0					
ANR	635664	Condition	previousHeader == nullptr && ! foundClosingHeader && ! isCharImmediatelyPostOpenBlock && ! isImmediatelyPostCommentOnly	1274:9:39049:39203	632119	0	True				
ANR	635665	AndExpression	previousHeader == nullptr && ! foundClosingHeader && ! isCharImmediatelyPostOpenBlock && ! isImmediatelyPostCommentOnly		632119	0		&&			
ANR	635666	EqualityExpression	previousHeader == nullptr		632119	0		==			
ANR	635667	Identifier	previousHeader		632119	0					
ANR	635668	Identifier	nullptr		632119	1					
ANR	635669	AndExpression	! foundClosingHeader && ! isCharImmediatelyPostOpenBlock && ! isImmediatelyPostCommentOnly		632119	1		&&			
ANR	635670	UnaryOperationExpression	! foundClosingHeader		632119	0					
ANR	635671	UnaryOperator	!		632119	0					
ANR	635672	Identifier	foundClosingHeader		632119	1					
ANR	635673	AndExpression	! isCharImmediatelyPostOpenBlock && ! isImmediatelyPostCommentOnly		632119	1		&&			
ANR	635674	UnaryOperationExpression	! isCharImmediatelyPostOpenBlock		632119	0					
ANR	635675	UnaryOperator	!		632119	0					
ANR	635676	Identifier	isCharImmediatelyPostOpenBlock		632119	1					
ANR	635677	UnaryOperationExpression	! isImmediatelyPostCommentOnly		632119	1					
ANR	635678	UnaryOperator	!		632119	0					
ANR	635679	Identifier	isImmediatelyPostCommentOnly		632119	1					
ANR	635680	CompoundStatement		830:5:25663:25663	632119	1					
ANR	635681	ExpressionStatement	isPrependPostBlockEmptyLineRequested = true	1279:6:39219:39262	632119	0	True				
ANR	635682	AssignmentExpression	isPrependPostBlockEmptyLineRequested = true		632119	0		=			
ANR	635683	Identifier	isPrependPostBlockEmptyLineRequested		632119	0					
ANR	635684	Identifier	true		632119	1					
ANR	635685	IfStatement	if ( isClosingHeader ( currentHeader ) || foundClosingHeader )		632119	1					
ANR	635686	Condition	isClosingHeader ( currentHeader ) || foundClosingHeader	1282:9:39281:39345	632119	0	True				
ANR	635687	OrExpression	isClosingHeader ( currentHeader ) || foundClosingHeader		632119	0		||			
ANR	635688	CallExpression	isClosingHeader ( currentHeader )		632119	0					
ANR	635689	Callee	isClosingHeader		632119	0					
ANR	635690	Identifier	isClosingHeader		632119	0					
ANR	635691	ArgumentList	currentHeader		632119	1					
ANR	635692	Argument	currentHeader		632119	0					
ANR	635693	Identifier	currentHeader		632119	0					
ANR	635694	Identifier	foundClosingHeader		632119	1					
ANR	635695	CompoundStatement		836:5:25805:25805	632119	1					
ANR	635696	ExpressionStatement	isPrependPostBlockEmptyLineRequested = false	1285:6:39361:39405	632119	0	True				
ANR	635697	AssignmentExpression	isPrependPostBlockEmptyLineRequested = false		632119	0		=			
ANR	635698	Identifier	isPrependPostBlockEmptyLineRequested		632119	0					
ANR	635699	Identifier	false		632119	1					
ANR	635700	IfStatement	if ( shouldBreakClosingHeaderBlocks && isCharImmediatelyPostCloseBlock && ! isImmediatelyPostCommentOnly && ! ( currentHeader == & AS_WHILE && foundClosingHeader ) )		632119	2					
ANR	635701	Condition	shouldBreakClosingHeaderBlocks && isCharImmediatelyPostCloseBlock && ! isImmediatelyPostCommentOnly && ! ( currentHeader == & AS_WHILE && foundClosingHeader )	1288:9:39424:39647	632119	0	True				
ANR	635702	AndExpression	shouldBreakClosingHeaderBlocks && isCharImmediatelyPostCloseBlock && ! isImmediatelyPostCommentOnly && ! ( currentHeader == & AS_WHILE && foundClosingHeader )		632119	0		&&			
ANR	635703	Identifier	shouldBreakClosingHeaderBlocks		632119	0					
ANR	635704	AndExpression	isCharImmediatelyPostCloseBlock && ! isImmediatelyPostCommentOnly && ! ( currentHeader == & AS_WHILE && foundClosingHeader )		632119	1		&&			
ANR	635705	Identifier	isCharImmediatelyPostCloseBlock		632119	0					
ANR	635706	AndExpression	! isImmediatelyPostCommentOnly && ! ( currentHeader == & AS_WHILE && foundClosingHeader )		632119	1		&&			
ANR	635707	UnaryOperationExpression	! isImmediatelyPostCommentOnly		632119	0					
ANR	635708	UnaryOperator	!		632119	0					
ANR	635709	Identifier	isImmediatelyPostCommentOnly		632119	1					
ANR	635710	UnaryOperationExpression	! ( currentHeader == & AS_WHILE && foundClosingHeader )		632119	1					
ANR	635711	UnaryOperator	!		632119	0					
ANR	635712	AndExpression	currentHeader == & AS_WHILE && foundClosingHeader		632119	1		&&			
ANR	635713	EqualityExpression	currentHeader == & AS_WHILE		632119	0		==			
ANR	635714	Identifier	currentHeader		632119	0					
ANR	635715	UnaryOperationExpression	& AS_WHILE		632119	1					
ANR	635716	UnaryOperator	&		632119	0					
ANR	635717	Identifier	AS_WHILE		632119	1					
ANR	635718	Identifier	foundClosingHeader		632119	1					
ANR	635719	CompoundStatement		845:5:26107:26107	632119	1					
ANR	635720	ExpressionStatement	isPrependPostBlockEmptyLineRequested = true	1294:6:39663:39706	632119	0	True				
ANR	635721	AssignmentExpression	isPrependPostBlockEmptyLineRequested = true		632119	0		=			
ANR	635722	Identifier	isPrependPostBlockEmptyLineRequested		632119	0					
ANR	635723	Identifier	true		632119	1					
ANR	635724	IfStatement	if ( currentHeader == & AS_CASE || currentHeader == & AS_DEFAULT )		632119	16					
ANR	635725	Condition	currentHeader == & AS_CASE || currentHeader == & AS_DEFAULT	1298:8:39730:39798	632119	0	True				
ANR	635726	OrExpression	currentHeader == & AS_CASE || currentHeader == & AS_DEFAULT		632119	0		||			
ANR	635727	EqualityExpression	currentHeader == & AS_CASE		632119	0		==			
ANR	635728	Identifier	currentHeader		632119	0					
ANR	635729	UnaryOperationExpression	& AS_CASE		632119	1					
ANR	635730	UnaryOperator	&		632119	0					
ANR	635731	Identifier	AS_CASE		632119	1					
ANR	635732	EqualityExpression	currentHeader == & AS_DEFAULT		632119	1		==			
ANR	635733	Identifier	currentHeader		632119	0					
ANR	635734	UnaryOperationExpression	& AS_DEFAULT		632119	1					
ANR	635735	UnaryOperator	&		632119	0					
ANR	635736	Identifier	AS_DEFAULT		632119	1					
ANR	635737	ExpressionStatement	isInCase = true	1300:5:39806:39821	632119	1	True				
ANR	635738	AssignmentExpression	isInCase = true		632119	0		=			
ANR	635739	Identifier	isInCase		632119	0					
ANR	635740	Identifier	true		632119	1					
ANR	635741	ContinueStatement	continue ;	1302:4:39828:39836	632119	17	True				
ANR	635742	ElseStatement	else		632119	0					
ANR	635743	IfStatement	if ( ( newHeader = findHeader ( preDefinitionHeaders ) ) != nullptr && parenStack -> back ( ) == 0 && ! isInEnum )		632119	0					
ANR	635744	Condition	( newHeader = findHeader ( preDefinitionHeaders ) ) != nullptr && parenStack -> back ( ) == 0 && ! isInEnum	1304:12:39855:39975	632119	0	True				
ANR	635745	AndExpression	( newHeader = findHeader ( preDefinitionHeaders ) ) != nullptr && parenStack -> back ( ) == 0 && ! isInEnum		632119	0		&&			
ANR	635746	EqualityExpression	( newHeader = findHeader ( preDefinitionHeaders ) ) != nullptr		632119	0		!=			
ANR	635747	AssignmentExpression	newHeader = findHeader ( preDefinitionHeaders )		632119	0		=			
ANR	635748	Identifier	newHeader		632119	0					
ANR	635749	CallExpression	findHeader ( preDefinitionHeaders )		632119	1					
ANR	635750	Callee	findHeader		632119	0					
ANR	635751	Identifier	findHeader		632119	0					
ANR	635752	ArgumentList	preDefinitionHeaders		632119	1					
ANR	635753	Argument	preDefinitionHeaders		632119	0					
ANR	635754	Identifier	preDefinitionHeaders		632119	0					
ANR	635755	Identifier	nullptr		632119	1					
ANR	635756	AndExpression	parenStack -> back ( ) == 0 && ! isInEnum		632119	1		&&			
ANR	635757	EqualityExpression	parenStack -> back ( ) == 0		632119	0		==			
ANR	635758	CallExpression	parenStack -> back ( )		632119	0					
ANR	635759	Callee	parenStack -> back		632119	0					
ANR	635760	PtrMemberAccess	parenStack -> back		632119	0					
ANR	635761	Identifier	parenStack		632119	0					
ANR	635762	Identifier	back		632119	1					
ANR	635763	ArgumentList			632119	1					
ANR	635764	PrimaryExpression	0		632119	1					
ANR	635765	UnaryOperationExpression	! isInEnum		632119	1					
ANR	635766	UnaryOperator	!		632119	0					
ANR	635767	Identifier	isInEnum		632119	1					
ANR	635768	CompoundStatement		859:3:26458:26458	632119	1					
ANR	635769	IfStatement	if ( newHeader == & AS_NAMESPACE || newHeader == & AS_MODULE )		632119	0					
ANR	635770	Condition	newHeader == & AS_NAMESPACE || newHeader == & AS_MODULE	1308:8:40016:40068	632119	0	True				
ANR	635771	OrExpression	newHeader == & AS_NAMESPACE || newHeader == & AS_MODULE		632119	0		||			
ANR	635772	EqualityExpression	newHeader == & AS_NAMESPACE		632119	0		==			
ANR	635773	Identifier	newHeader		632119	0					
ANR	635774	UnaryOperationExpression	& AS_NAMESPACE		632119	1					
ANR	635775	UnaryOperator	&		632119	0					
ANR	635776	Identifier	AS_NAMESPACE		632119	1					
ANR	635777	EqualityExpression	newHeader == & AS_MODULE		632119	1		==			
ANR	635778	Identifier	newHeader		632119	0					
ANR	635779	UnaryOperationExpression	& AS_MODULE		632119	1					
ANR	635780	UnaryOperator	&		632119	0					
ANR	635781	Identifier	AS_MODULE		632119	1					
ANR	635782	ExpressionStatement	foundNamespaceHeader = true	1309:5:40076:40103	632119	1	True				
ANR	635783	AssignmentExpression	foundNamespaceHeader = true		632119	0		=			
ANR	635784	Identifier	foundNamespaceHeader		632119	0					
ANR	635785	Identifier	true		632119	1					
ANR	635786	IfStatement	if ( newHeader == & AS_CLASS )		632119	1					
ANR	635787	Condition	newHeader == & AS_CLASS	1310:8:40113:40134	632119	0	True				
ANR	635788	EqualityExpression	newHeader == & AS_CLASS		632119	0		==			
ANR	635789	Identifier	newHeader		632119	0					
ANR	635790	UnaryOperationExpression	& AS_CLASS		632119	1					
ANR	635791	UnaryOperator	&		632119	0					
ANR	635792	Identifier	AS_CLASS		632119	1					
ANR	635793	ExpressionStatement	foundClassHeader = true	1311:5:40142:40165	632119	1	True				
ANR	635794	AssignmentExpression	foundClassHeader = true		632119	0		=			
ANR	635795	Identifier	foundClassHeader		632119	0					
ANR	635796	Identifier	true		632119	1					
ANR	635797	IfStatement	if ( newHeader == & AS_STRUCT )		632119	2					
ANR	635798	Condition	newHeader == & AS_STRUCT	1312:8:40175:40197	632119	0	True				
ANR	635799	EqualityExpression	newHeader == & AS_STRUCT		632119	0		==			
ANR	635800	Identifier	newHeader		632119	0					
ANR	635801	UnaryOperationExpression	& AS_STRUCT		632119	1					
ANR	635802	UnaryOperator	&		632119	0					
ANR	635803	Identifier	AS_STRUCT		632119	1					
ANR	635804	ExpressionStatement	foundStructHeader = true	1313:5:40205:40229	632119	1	True				
ANR	635805	AssignmentExpression	foundStructHeader = true		632119	0		=			
ANR	635806	Identifier	foundStructHeader		632119	0					
ANR	635807	Identifier	true		632119	1					
ANR	635808	IfStatement	if ( newHeader == & AS_INTERFACE )		632119	3					
ANR	635809	Condition	newHeader == & AS_INTERFACE	1314:8:40239:40264	632119	0	True				
ANR	635810	EqualityExpression	newHeader == & AS_INTERFACE		632119	0		==			
ANR	635811	Identifier	newHeader		632119	0					
ANR	635812	UnaryOperationExpression	& AS_INTERFACE		632119	1					
ANR	635813	UnaryOperator	&		632119	0					
ANR	635814	Identifier	AS_INTERFACE		632119	1					
ANR	635815	ExpressionStatement	foundInterfaceHeader = true	1315:5:40272:40299	632119	1	True				
ANR	635816	AssignmentExpression	foundInterfaceHeader = true		632119	0		=			
ANR	635817	Identifier	foundInterfaceHeader		632119	0					
ANR	635818	Identifier	true		632119	1					
ANR	635819	ExpressionStatement	foundPreDefinitionHeader = true	1316:4:40305:40336	632119	4	True				
ANR	635820	AssignmentExpression	foundPreDefinitionHeader = true		632119	0		=			
ANR	635821	Identifier	foundPreDefinitionHeader		632119	0					
ANR	635822	Identifier	true		632119	1					
ANR	635823	ExpressionStatement	appendSequence ( * newHeader )	1317:4:40342:40368	632119	5	True				
ANR	635824	CallExpression	appendSequence ( * newHeader )		632119	0					
ANR	635825	Callee	appendSequence		632119	0					
ANR	635826	Identifier	appendSequence		632119	0					
ANR	635827	ArgumentList	* newHeader		632119	1					
ANR	635828	Argument	* newHeader		632119	0					
ANR	635829	UnaryOperationExpression	* newHeader		632119	0					
ANR	635830	UnaryOperator	*		632119	0					
ANR	635831	Identifier	newHeader		632119	1					
ANR	635832	ExpressionStatement	goForward ( newHeader -> length ( ) - 1 )	1318:4:40374:40408	632119	6	True				
ANR	635833	CallExpression	goForward ( newHeader -> length ( ) - 1 )		632119	0					
ANR	635834	Callee	goForward		632119	0					
ANR	635835	Identifier	goForward		632119	0					
ANR	635836	ArgumentList	newHeader -> length ( ) - 1		632119	1					
ANR	635837	Argument	newHeader -> length ( ) - 1		632119	0					
ANR	635838	AdditiveExpression	newHeader -> length ( ) - 1		632119	0		-			
ANR	635839	CallExpression	newHeader -> length ( )		632119	0					
ANR	635840	Callee	newHeader -> length		632119	0					
ANR	635841	PtrMemberAccess	newHeader -> length		632119	0					
ANR	635842	Identifier	newHeader		632119	0					
ANR	635843	Identifier	length		632119	1					
ANR	635844	ArgumentList			632119	1					
ANR	635845	PrimaryExpression	1		632119	1					
ANR	635846	ContinueStatement	continue ;	1320:4:40415:40423	632119	7	True				
ANR	635847	ElseStatement	else		632119	0					
ANR	635848	IfStatement	if ( ( newHeader = findHeader ( preCommandHeaders ) ) != nullptr )		632119	0					
ANR	635849	Condition	( newHeader = findHeader ( preCommandHeaders ) ) != nullptr	1322:12:40442:40495	632119	0	True				
ANR	635850	EqualityExpression	( newHeader = findHeader ( preCommandHeaders ) ) != nullptr		632119	0		!=			
ANR	635851	AssignmentExpression	newHeader = findHeader ( preCommandHeaders )		632119	0		=			
ANR	635852	Identifier	newHeader		632119	0					
ANR	635853	CallExpression	findHeader ( preCommandHeaders )		632119	1					
ANR	635854	Callee	findHeader		632119	0					
ANR	635855	Identifier	findHeader		632119	0					
ANR	635856	ArgumentList	preCommandHeaders		632119	1					
ANR	635857	Argument	preCommandHeaders		632119	0					
ANR	635858	Identifier	preCommandHeaders		632119	0					
ANR	635859	Identifier	nullptr		632119	1					
ANR	635860	CompoundStatement		875:3:26953:26953	632119	1					
ANR	635861	IfStatement	if ( previousNonWSChar == ')' )		632119	0					
ANR	635862	Condition	previousNonWSChar == ')'	1325:8:40563:40586	632119	0	True				
ANR	635863	EqualityExpression	previousNonWSChar == ')'		632119	0		==			
ANR	635864	Identifier	previousNonWSChar		632119	0					
ANR	635865	PrimaryExpression	')'		632119	1					
ANR	635866	ExpressionStatement	foundPreCommandHeader = true	1326:5:40594:40622	632119	1	True				
ANR	635867	AssignmentExpression	foundPreCommandHeader = true		632119	0		=			
ANR	635868	Identifier	foundPreCommandHeader		632119	0					
ANR	635869	Identifier	true		632119	1					
ANR	635870	ElseStatement	else		632119	0					
ANR	635871	IfStatement	if ( ( newHeader = findHeader ( castOperators ) ) != nullptr )		632119	0					
ANR	635872	Condition	( newHeader = findHeader ( castOperators ) ) != nullptr	1328:12:40641:40690	632119	0	True				
ANR	635873	EqualityExpression	( newHeader = findHeader ( castOperators ) ) != nullptr		632119	0		!=			
ANR	635874	AssignmentExpression	newHeader = findHeader ( castOperators )		632119	0		=			
ANR	635875	Identifier	newHeader		632119	0					
ANR	635876	CallExpression	findHeader ( castOperators )		632119	1					
ANR	635877	Callee	findHeader		632119	0					
ANR	635878	Identifier	findHeader		632119	0					
ANR	635879	ArgumentList	castOperators		632119	1					
ANR	635880	Argument	castOperators		632119	0					
ANR	635881	Identifier	castOperators		632119	0					
ANR	635882	Identifier	nullptr		632119	1					
ANR	635883	CompoundStatement		881:3:27148:27148	632119	1					
ANR	635884	ExpressionStatement	foundCastOperator = true	1330:4:40702:40726	632119	0	True				
ANR	635885	AssignmentExpression	foundCastOperator = true		632119	0		=			
ANR	635886	Identifier	foundCastOperator		632119	0					
ANR	635887	Identifier	true		632119	1					
ANR	635888	ExpressionStatement	appendSequence ( * newHeader )	1331:4:40732:40758	632119	1	True				
ANR	635889	CallExpression	appendSequence ( * newHeader )		632119	0					
ANR	635890	Callee	appendSequence		632119	0					
ANR	635891	Identifier	appendSequence		632119	0					
ANR	635892	ArgumentList	* newHeader		632119	1					
ANR	635893	Argument	* newHeader		632119	0					
ANR	635894	UnaryOperationExpression	* newHeader		632119	0					
ANR	635895	UnaryOperator	*		632119	0					
ANR	635896	Identifier	newHeader		632119	1					
ANR	635897	ExpressionStatement	goForward ( newHeader -> length ( ) - 1 )	1332:4:40764:40798	632119	2	True				
ANR	635898	CallExpression	goForward ( newHeader -> length ( ) - 1 )		632119	0					
ANR	635899	Callee	goForward		632119	0					
ANR	635900	Identifier	goForward		632119	0					
ANR	635901	ArgumentList	newHeader -> length ( ) - 1		632119	1					
ANR	635902	Argument	newHeader -> length ( ) - 1		632119	0					
ANR	635903	AdditiveExpression	newHeader -> length ( ) - 1		632119	0		-			
ANR	635904	CallExpression	newHeader -> length ( )		632119	0					
ANR	635905	Callee	newHeader -> length		632119	0					
ANR	635906	PtrMemberAccess	newHeader -> length		632119	0					
ANR	635907	Identifier	newHeader		632119	0					
ANR	635908	Identifier	length		632119	1					
ANR	635909	ArgumentList			632119	1					
ANR	635910	PrimaryExpression	1		632119	1					
ANR	635911	ContinueStatement	continue ;	1333:4:40804:40812	632119	3	True				
ANR	635912	IfStatement	if ( isInLineBreak )		632119	31					
ANR	635913	Condition	isInLineBreak	1337:6:40872:40884	632119	0	True				
ANR	635914	Identifier	isInLineBreak		632119	0					
ANR	635915	CompoundStatement		890:2:27375:27375	632119	1					
ANR	635916	ExpressionStatement	breakLine ( )	1339:3:40928:40939	632119	0	True				
ANR	635917	CallExpression	breakLine ( )		632119	0					
ANR	635918	Callee	breakLine		632119	0					
ANR	635919	Identifier	breakLine		632119	0					
ANR	635920	ArgumentList			632119	1					
ANR	635921	IfStatement	if ( isInVirginLine )		632119	1					
ANR	635922	Condition	isInVirginLine	1340:7:40948:40961	632119	0	True				
ANR	635923	Identifier	isInVirginLine		632119	0					
ANR	635924	CompoundStatement		893:3:27449:27449	632119	1					
ANR	635925	ExpressionStatement	lineCommentNoBeautify = lineCommentNoIndent	1342:4:41003:41046	632119	0	True				
ANR	635926	AssignmentExpression	lineCommentNoBeautify = lineCommentNoIndent		632119	0		=			
ANR	635927	Identifier	lineCommentNoBeautify		632119	0					
ANR	635928	Identifier	lineCommentNoIndent		632119	1					
ANR	635929	ExpressionStatement	lineCommentNoIndent = false	1343:4:41052:41079	632119	1	True				
ANR	635930	AssignmentExpression	lineCommentNoIndent = false		632119	0		=			
ANR	635931	Identifier	lineCommentNoIndent		632119	0					
ANR	635932	Identifier	false		632119	1					
ANR	635933	IfStatement	if ( isImmediatelyPostPreprocessor )		632119	2					
ANR	635934	Condition	isImmediatelyPostPreprocessor	1344:8:41089:41117	632119	0	True				
ANR	635935	Identifier	isImmediatelyPostPreprocessor		632119	0					
ANR	635936	CompoundStatement		897:4:27576:27576	632119	1					
ANR	635937	ExpressionStatement	isInIndentablePreproc = isIndentableProprocessor	1346:5:41131:41179	632119	0	True				
ANR	635938	AssignmentExpression	isInIndentablePreproc = isIndentableProprocessor		632119	0		=			
ANR	635939	Identifier	isInIndentablePreproc		632119	0					
ANR	635940	Identifier	isIndentableProprocessor		632119	1					
ANR	635941	ExpressionStatement	isIndentableProprocessor = false	1347:5:41186:41218	632119	1	True				
ANR	635942	AssignmentExpression	isIndentableProprocessor = false		632119	0		=			
ANR	635943	Identifier	isIndentableProprocessor		632119	0					
ANR	635944	Identifier	false		632119	1					
ANR	635945	IfStatement	if ( previousNonWSChar == '}' || currentChar == ';' )		632119	32					
ANR	635946	Condition	previousNonWSChar == '}' || currentChar == ';'	1352:6:41242:41287	632119	0	True				
ANR	635947	OrExpression	previousNonWSChar == '}' || currentChar == ';'		632119	0		||			
ANR	635948	EqualityExpression	previousNonWSChar == '}'		632119	0		==			
ANR	635949	Identifier	previousNonWSChar		632119	0					
ANR	635950	PrimaryExpression	'}'		632119	1					
ANR	635951	EqualityExpression	currentChar == ';'		632119	1		==			
ANR	635952	Identifier	currentChar		632119	0					
ANR	635953	PrimaryExpression	';'		632119	1					
ANR	635954	CompoundStatement		905:2:27744:27744	632119	1					
ANR	635955	IfStatement	if ( currentChar == ';' )		632119	0					
ANR	635956	Condition	currentChar == ';'	1354:7:41301:41318	632119	0	True				
ANR	635957	EqualityExpression	currentChar == ';'		632119	0		==			
ANR	635958	Identifier	currentChar		632119	0					
ANR	635959	PrimaryExpression	';'		632119	1					
ANR	635960	CompoundStatement		907:3:27776:27776	632119	1					
ANR	635961	ExpressionStatement	squareBracketCount = 0	1356:4:41330:41352	632119	0	True				
ANR	635962	AssignmentExpression	squareBracketCount = 0		632119	0		=			
ANR	635963	Identifier	squareBracketCount		632119	0					
ANR	635964	PrimaryExpression	0		632119	1					
ANR	635965	IfStatement	"if ( ( ( shouldBreakOneLineStatements || isBraceType ( braceTypeStack -> back ( ) , SINGLE_LINE_TYPE ) ) && isOkToBreakBlock ( braceTypeStack -> back ( ) ) ) && ! ( attachClosingBraceMode && peekNextChar ( ) == '}' ) )"		632119	1					
ANR	635966	Condition	"( ( shouldBreakOneLineStatements || isBraceType ( braceTypeStack -> back ( ) , SINGLE_LINE_TYPE ) ) && isOkToBreakBlock ( braceTypeStack -> back ( ) ) ) && ! ( attachClosingBraceMode && peekNextChar ( ) == '}' )"	1358:8:41363:41585	632119	0	True				
ANR	635967	AndExpression	"( ( shouldBreakOneLineStatements || isBraceType ( braceTypeStack -> back ( ) , SINGLE_LINE_TYPE ) ) && isOkToBreakBlock ( braceTypeStack -> back ( ) ) ) && ! ( attachClosingBraceMode && peekNextChar ( ) == '}' )"		632119	0		&&			
ANR	635968	AndExpression	"( shouldBreakOneLineStatements || isBraceType ( braceTypeStack -> back ( ) , SINGLE_LINE_TYPE ) ) && isOkToBreakBlock ( braceTypeStack -> back ( ) )"		632119	0		&&			
ANR	635969	OrExpression	"shouldBreakOneLineStatements || isBraceType ( braceTypeStack -> back ( ) , SINGLE_LINE_TYPE )"		632119	0		||			
ANR	635970	Identifier	shouldBreakOneLineStatements		632119	0					
ANR	635971	CallExpression	"isBraceType ( braceTypeStack -> back ( ) , SINGLE_LINE_TYPE )"		632119	1					
ANR	635972	Callee	isBraceType		632119	0					
ANR	635973	Identifier	isBraceType		632119	0					
ANR	635974	ArgumentList	braceTypeStack -> back ( )		632119	1					
ANR	635975	Argument	braceTypeStack -> back ( )		632119	0					
ANR	635976	CallExpression	braceTypeStack -> back ( )		632119	0					
ANR	635977	Callee	braceTypeStack -> back		632119	0					
ANR	635978	PtrMemberAccess	braceTypeStack -> back		632119	0					
ANR	635979	Identifier	braceTypeStack		632119	0					
ANR	635980	Identifier	back		632119	1					
ANR	635981	ArgumentList			632119	1					
ANR	635982	Argument	SINGLE_LINE_TYPE		632119	1					
ANR	635983	Identifier	SINGLE_LINE_TYPE		632119	0					
ANR	635984	CallExpression	isOkToBreakBlock ( braceTypeStack -> back ( ) )		632119	1					
ANR	635985	Callee	isOkToBreakBlock		632119	0					
ANR	635986	Identifier	isOkToBreakBlock		632119	0					
ANR	635987	ArgumentList	braceTypeStack -> back ( )		632119	1					
ANR	635988	Argument	braceTypeStack -> back ( )		632119	0					
ANR	635989	CallExpression	braceTypeStack -> back ( )		632119	0					
ANR	635990	Callee	braceTypeStack -> back		632119	0					
ANR	635991	PtrMemberAccess	braceTypeStack -> back		632119	0					
ANR	635992	Identifier	braceTypeStack		632119	0					
ANR	635993	Identifier	back		632119	1					
ANR	635994	ArgumentList			632119	1					
ANR	635995	UnaryOperationExpression	! ( attachClosingBraceMode && peekNextChar ( ) == '}' )		632119	1					
ANR	635996	UnaryOperator	!		632119	0					
ANR	635997	AndExpression	attachClosingBraceMode && peekNextChar ( ) == '}'		632119	1		&&			
ANR	635998	Identifier	attachClosingBraceMode		632119	0					
ANR	635999	EqualityExpression	peekNextChar ( ) == '}'		632119	1		==			
ANR	636000	CallExpression	peekNextChar ( )		632119	0					
ANR	636001	Callee	peekNextChar		632119	0					
ANR	636002	Identifier	peekNextChar		632119	0					
ANR	636003	ArgumentList			632119	1					
ANR	636004	PrimaryExpression	'}'		632119	1					
ANR	636005	CompoundStatement		914:4:28044:28044	632119	1					
ANR	636006	ExpressionStatement	passedSemicolon = true	1363:5:41599:41621	632119	0	True				
ANR	636007	AssignmentExpression	passedSemicolon = true		632119	0		=			
ANR	636008	Identifier	passedSemicolon		632119	0					
ANR	636009	Identifier	true		632119	1					
ANR	636010	ElseStatement	else		632119	0					
ANR	636011	IfStatement	"if ( ! shouldBreakOneLineStatements && ASBeautifier :: getNextWord ( currentLine , charNum ) == AS_ELSE )"		632119	0					
ANR	636012	Condition	"! shouldBreakOneLineStatements && ASBeautifier :: getNextWord ( currentLine , charNum ) == AS_ELSE"	1365:13:41642:41745	632119	0	True				
ANR	636013	AndExpression	"! shouldBreakOneLineStatements && ASBeautifier :: getNextWord ( currentLine , charNum ) == AS_ELSE"		632119	0		&&			
ANR	636014	UnaryOperationExpression	! shouldBreakOneLineStatements		632119	0					
ANR	636015	UnaryOperator	!		632119	0					
ANR	636016	Identifier	shouldBreakOneLineStatements		632119	1					
ANR	636017	EqualityExpression	"ASBeautifier :: getNextWord ( currentLine , charNum ) == AS_ELSE"		632119	1		==			
ANR	636018	CallExpression	"ASBeautifier :: getNextWord ( currentLine , charNum )"		632119	0					
ANR	636019	Callee	ASBeautifier :: getNextWord		632119	0					
ANR	636020	Identifier	ASBeautifier :: getNextWord		632119	0					
ANR	636021	ArgumentList	currentLine		632119	1					
ANR	636022	Argument	currentLine		632119	0					
ANR	636023	Identifier	currentLine		632119	0					
ANR	636024	Argument	charNum		632119	1					
ANR	636025	Identifier	charNum		632119	0					
ANR	636026	Identifier	AS_ELSE		632119	1					
ANR	636027	CompoundStatement		921:5:28268:28335	632119	1					
ANR	636028	IdentifierDeclStatement	"size_t nextText = currentLine . find_first_not_of ( "" \\t"" , charNum + 1 ) ;"	1369:5:41816:41883	632119	0	True				
ANR	636029	IdentifierDecl	"nextText = currentLine . find_first_not_of ( "" \\t"" , charNum + 1 )"		632119	0					
ANR	636030	IdentifierDeclType	size_t		632119	0					
ANR	636031	Identifier	nextText		632119	1					
ANR	636032	AssignmentExpression	"nextText = currentLine . find_first_not_of ( "" \\t"" , charNum + 1 )"		632119	2		=			
ANR	636033	Identifier	nextText		632119	0					
ANR	636034	CallExpression	"currentLine . find_first_not_of ( "" \\t"" , charNum + 1 )"		632119	1					
ANR	636035	Callee	currentLine . find_first_not_of		632119	0					
ANR	636036	MemberAccess	currentLine . find_first_not_of		632119	0					
ANR	636037	Identifier	currentLine		632119	0					
ANR	636038	Identifier	find_first_not_of		632119	1					
ANR	636039	ArgumentList	""" \\t"""		632119	1					
ANR	636040	Argument	""" \\t"""		632119	0					
ANR	636041	PrimaryExpression	""" \\t"""		632119	0					
ANR	636042	Argument	charNum + 1		632119	1					
ANR	636043	AdditiveExpression	charNum + 1		632119	0		+			
ANR	636044	Identifier	charNum		632119	0					
ANR	636045	PrimaryExpression	1		632119	1					
ANR	636046	IfStatement	"if ( ASBeautifier :: peekNextChar ( currentLine , nextText + 3 ) == ' ' )"		632119	1					
ANR	636047	Condition	"ASBeautifier :: peekNextChar ( currentLine , nextText + 3 ) == ' '"	1370:9:41894:41953	632119	0	True				
ANR	636048	EqualityExpression	"ASBeautifier :: peekNextChar ( currentLine , nextText + 3 ) == ' '"		632119	0		==			
ANR	636049	CallExpression	"ASBeautifier :: peekNextChar ( currentLine , nextText + 3 )"		632119	0					
ANR	636050	Callee	ASBeautifier :: peekNextChar		632119	0					
ANR	636051	Identifier	ASBeautifier :: peekNextChar		632119	0					
ANR	636052	ArgumentList	currentLine		632119	1					
ANR	636053	Argument	currentLine		632119	0					
ANR	636054	Identifier	currentLine		632119	0					
ANR	636055	Argument	nextText + 3		632119	1					
ANR	636056	AdditiveExpression	nextText + 3		632119	0		+			
ANR	636057	Identifier	nextText		632119	0					
ANR	636058	PrimaryExpression	3		632119	1					
ANR	636059	PrimaryExpression	' '		632119	1					
ANR	636060	ExpressionStatement	passedSemicolon = true	1371:6:41962:41984	632119	1	True				
ANR	636061	AssignmentExpression	passedSemicolon = true		632119	0		=			
ANR	636062	Identifier	passedSemicolon		632119	0					
ANR	636063	Identifier	true		632119	1					
ANR	636064	IfStatement	if ( shouldBreakBlocks && currentHeader != nullptr && currentHeader != & AS_CASE && currentHeader != & AS_DEFAULT && ! isHeaderInMultiStatementLine && parenStack -> back ( ) == 0 )		632119	2					
ANR	636065	Condition	shouldBreakBlocks && currentHeader != nullptr && currentHeader != & AS_CASE && currentHeader != & AS_DEFAULT && ! isHeaderInMultiStatementLine && parenStack -> back ( ) == 0	1374:8:42001:42226	632119	0	True				
ANR	636066	AndExpression	shouldBreakBlocks && currentHeader != nullptr && currentHeader != & AS_CASE && currentHeader != & AS_DEFAULT && ! isHeaderInMultiStatementLine && parenStack -> back ( ) == 0		632119	0		&&			
ANR	636067	Identifier	shouldBreakBlocks		632119	0					
ANR	636068	AndExpression	currentHeader != nullptr && currentHeader != & AS_CASE && currentHeader != & AS_DEFAULT && ! isHeaderInMultiStatementLine && parenStack -> back ( ) == 0		632119	1		&&			
ANR	636069	EqualityExpression	currentHeader != nullptr		632119	0		!=			
ANR	636070	Identifier	currentHeader		632119	0					
ANR	636071	Identifier	nullptr		632119	1					
ANR	636072	AndExpression	currentHeader != & AS_CASE && currentHeader != & AS_DEFAULT && ! isHeaderInMultiStatementLine && parenStack -> back ( ) == 0		632119	1		&&			
ANR	636073	EqualityExpression	currentHeader != & AS_CASE		632119	0		!=			
ANR	636074	Identifier	currentHeader		632119	0					
ANR	636075	UnaryOperationExpression	& AS_CASE		632119	1					
ANR	636076	UnaryOperator	&		632119	0					
ANR	636077	Identifier	AS_CASE		632119	1					
ANR	636078	AndExpression	currentHeader != & AS_DEFAULT && ! isHeaderInMultiStatementLine && parenStack -> back ( ) == 0		632119	1		&&			
ANR	636079	EqualityExpression	currentHeader != & AS_DEFAULT		632119	0		!=			
ANR	636080	Identifier	currentHeader		632119	0					
ANR	636081	UnaryOperationExpression	& AS_DEFAULT		632119	1					
ANR	636082	UnaryOperator	&		632119	0					
ANR	636083	Identifier	AS_DEFAULT		632119	1					
ANR	636084	AndExpression	! isHeaderInMultiStatementLine && parenStack -> back ( ) == 0		632119	1		&&			
ANR	636085	UnaryOperationExpression	! isHeaderInMultiStatementLine		632119	0					
ANR	636086	UnaryOperator	!		632119	0					
ANR	636087	Identifier	isHeaderInMultiStatementLine		632119	1					
ANR	636088	EqualityExpression	parenStack -> back ( ) == 0		632119	1		==			
ANR	636089	CallExpression	parenStack -> back ( )		632119	0					
ANR	636090	Callee	parenStack -> back		632119	0					
ANR	636091	PtrMemberAccess	parenStack -> back		632119	0					
ANR	636092	Identifier	parenStack		632119	0					
ANR	636093	Identifier	back		632119	1					
ANR	636094	ArgumentList			632119	1					
ANR	636095	PrimaryExpression	0		632119	1					
ANR	636096	CompoundStatement		932:4:28685:28685	632119	1					
ANR	636097	ExpressionStatement	isAppendPostBlockEmptyLineRequested = true	1381:5:42240:42282	632119	0	True				
ANR	636098	AssignmentExpression	isAppendPostBlockEmptyLineRequested = true		632119	0		=			
ANR	636099	Identifier	isAppendPostBlockEmptyLineRequested		632119	0					
ANR	636100	Identifier	true		632119	1					
ANR	636101	IfStatement	if ( currentChar != ';' || ( needHeaderOpeningBrace && parenStack -> back ( ) == 0 ) )		632119	1					
ANR	636102	Condition	currentChar != ';' || ( needHeaderOpeningBrace && parenStack -> back ( ) == 0 )	1384:7:42302:42385	632119	0	True				
ANR	636103	OrExpression	currentChar != ';' || ( needHeaderOpeningBrace && parenStack -> back ( ) == 0 )		632119	0		||			
ANR	636104	EqualityExpression	currentChar != ';'		632119	0		!=			
ANR	636105	Identifier	currentChar		632119	0					
ANR	636106	PrimaryExpression	';'		632119	1					
ANR	636107	AndExpression	needHeaderOpeningBrace && parenStack -> back ( ) == 0		632119	1		&&			
ANR	636108	Identifier	needHeaderOpeningBrace		632119	0					
ANR	636109	EqualityExpression	parenStack -> back ( ) == 0		632119	1		==			
ANR	636110	CallExpression	parenStack -> back ( )		632119	0					
ANR	636111	Callee	parenStack -> back		632119	0					
ANR	636112	PtrMemberAccess	parenStack -> back		632119	0					
ANR	636113	Identifier	parenStack		632119	0					
ANR	636114	Identifier	back		632119	1					
ANR	636115	ArgumentList			632119	1					
ANR	636116	PrimaryExpression	0		632119	1					
ANR	636117	ExpressionStatement	currentHeader = nullptr	1386:4:42392:42415	632119	1	True				
ANR	636118	AssignmentExpression	currentHeader = nullptr		632119	0		=			
ANR	636119	Identifier	currentHeader		632119	0					
ANR	636120	Identifier	nullptr		632119	1					
ANR	636121	ExpressionStatement	resetEndOfStatement ( )	1387:3:42420:42441	632119	2	True				
ANR	636122	CallExpression	resetEndOfStatement ( )		632119	0					
ANR	636123	Callee	resetEndOfStatement		632119	0					
ANR	636124	Identifier	resetEndOfStatement		632119	0					
ANR	636125	ArgumentList			632119	1					
ANR	636126	IfStatement	if ( currentChar == ':' && previousChar != ':' && peekNextChar ( ) != ':' )		632119	33					
ANR	636127	Condition	currentChar == ':' && previousChar != ':' && peekNextChar ( ) != ':'	1390:6:42454:42567	632119	0	True				
ANR	636128	AndExpression	currentChar == ':' && previousChar != ':' && peekNextChar ( ) != ':'		632119	0		&&			
ANR	636129	EqualityExpression	currentChar == ':'		632119	0		==			
ANR	636130	Identifier	currentChar		632119	0					
ANR	636131	PrimaryExpression	':'		632119	1					
ANR	636132	AndExpression	previousChar != ':' && peekNextChar ( ) != ':'		632119	1		&&			
ANR	636133	EqualityExpression	previousChar != ':'		632119	0		!=			
ANR	636134	Identifier	previousChar		632119	0					
ANR	636135	PrimaryExpression	':'		632119	1					
ANR	636136	EqualityExpression	peekNextChar ( ) != ':'		632119	1		!=			
ANR	636137	CallExpression	peekNextChar ( )		632119	0					
ANR	636138	Callee	peekNextChar		632119	0					
ANR	636139	Identifier	peekNextChar		632119	0					
ANR	636140	ArgumentList			632119	1					
ANR	636141	PrimaryExpression	':'		632119	1					
ANR	636142	CompoundStatement		945:2:29049:29049	632119	1					
ANR	636143	IfStatement	if ( isInCase )		632119	0					
ANR	636144	Condition	isInCase	1394:7:42606:42613	632119	0	True				
ANR	636145	Identifier	isInCase		632119	0					
ANR	636146	CompoundStatement		947:3:29071:29071	632119	1					
ANR	636147	ExpressionStatement	isInCase = false	1396:4:42625:42641	632119	0	True				
ANR	636148	AssignmentExpression	isInCase = false		632119	0		=			
ANR	636149	Identifier	isInCase		632119	0					
ANR	636150	Identifier	false		632119	1					
ANR	636151	IfStatement	if ( shouldBreakOneLineStatements )		632119	1					
ANR	636152	Condition	shouldBreakOneLineStatements	1397:8:42651:42678	632119	0	True				
ANR	636153	Identifier	shouldBreakOneLineStatements		632119	0					
ANR	636154	ExpressionStatement	passedColon = true	1398:5:42686:42704	632119	1	True				
ANR	636155	AssignmentExpression	passedColon = true		632119	0		=			
ANR	636156	Identifier	passedColon		632119	0					
ANR	636157	Identifier	true		632119	1					
ANR	636158	ElseStatement	else		632119	0					
ANR	636159	IfStatement	if ( isCStyle ( ) && isOkToBreakBlock ( braceTypeStack -> back ( ) ) && shouldBreakOneLineStatements && ! foundQuestionMark && ! foundPreDefinitionHeader && previousCommandChar != ')' && ! foundPreCommandHeader && squareBracketCount == 0 && ! isInObjCMethodDefinition && ! isInObjCInterface && ! isInObjCSelector && ! isDigit ( peekNextChar ( ) ) && ! isInEnum && ! isInAsm && ! isInAsmOneLine && ! isInAsmBlock )		632119	0					
ANR	636160	Condition	isCStyle ( ) && isOkToBreakBlock ( braceTypeStack -> back ( ) ) && shouldBreakOneLineStatements && ! foundQuestionMark && ! foundPreDefinitionHeader && previousCommandChar != ')' && ! foundPreCommandHeader && squareBracketCount == 0 && ! isInObjCMethodDefinition && ! isInObjCInterface && ! isInObjCSelector && ! isDigit ( peekNextChar ( ) ) && ! isInEnum && ! isInAsm && ! isInAsmOneLine && ! isInAsmBlock	1400:12:42723:43754	632119	0	True				
ANR	636161	AndExpression	isCStyle ( ) && isOkToBreakBlock ( braceTypeStack -> back ( ) ) && shouldBreakOneLineStatements && ! foundQuestionMark && ! foundPreDefinitionHeader && previousCommandChar != ')' && ! foundPreCommandHeader && squareBracketCount == 0 && ! isInObjCMethodDefinition && ! isInObjCInterface && ! isInObjCSelector && ! isDigit ( peekNextChar ( ) ) && ! isInEnum && ! isInAsm && ! isInAsmOneLine && ! isInAsmBlock		632119	0		&&			
ANR	636162	CallExpression	isCStyle ( )		632119	0					
ANR	636163	Callee	isCStyle		632119	0					
ANR	636164	Identifier	isCStyle		632119	0					
ANR	636165	ArgumentList			632119	1					
ANR	636166	AndExpression	isOkToBreakBlock ( braceTypeStack -> back ( ) ) && shouldBreakOneLineStatements && ! foundQuestionMark && ! foundPreDefinitionHeader && previousCommandChar != ')' && ! foundPreCommandHeader && squareBracketCount == 0 && ! isInObjCMethodDefinition && ! isInObjCInterface && ! isInObjCSelector && ! isDigit ( peekNextChar ( ) ) && ! isInEnum && ! isInAsm && ! isInAsmOneLine && ! isInAsmBlock		632119	1		&&			
ANR	636167	CallExpression	isOkToBreakBlock ( braceTypeStack -> back ( ) )		632119	0					
ANR	636168	Callee	isOkToBreakBlock		632119	0					
ANR	636169	Identifier	isOkToBreakBlock		632119	0					
ANR	636170	ArgumentList	braceTypeStack -> back ( )		632119	1					
ANR	636171	Argument	braceTypeStack -> back ( )		632119	0					
ANR	636172	CallExpression	braceTypeStack -> back ( )		632119	0					
ANR	636173	Callee	braceTypeStack -> back		632119	0					
ANR	636174	PtrMemberAccess	braceTypeStack -> back		632119	0					
ANR	636175	Identifier	braceTypeStack		632119	0					
ANR	636176	Identifier	back		632119	1					
ANR	636177	ArgumentList			632119	1					
ANR	636178	AndExpression	shouldBreakOneLineStatements && ! foundQuestionMark && ! foundPreDefinitionHeader && previousCommandChar != ')' && ! foundPreCommandHeader && squareBracketCount == 0 && ! isInObjCMethodDefinition && ! isInObjCInterface && ! isInObjCSelector && ! isDigit ( peekNextChar ( ) ) && ! isInEnum && ! isInAsm && ! isInAsmOneLine && ! isInAsmBlock		632119	1		&&			
ANR	636179	Identifier	shouldBreakOneLineStatements		632119	0					
ANR	636180	AndExpression	! foundQuestionMark && ! foundPreDefinitionHeader && previousCommandChar != ')' && ! foundPreCommandHeader && squareBracketCount == 0 && ! isInObjCMethodDefinition && ! isInObjCInterface && ! isInObjCSelector && ! isDigit ( peekNextChar ( ) ) && ! isInEnum && ! isInAsm && ! isInAsmOneLine && ! isInAsmBlock		632119	1		&&			
ANR	636181	UnaryOperationExpression	! foundQuestionMark		632119	0					
ANR	636182	UnaryOperator	!		632119	0					
ANR	636183	Identifier	foundQuestionMark		632119	1					
ANR	636184	AndExpression	! foundPreDefinitionHeader && previousCommandChar != ')' && ! foundPreCommandHeader && squareBracketCount == 0 && ! isInObjCMethodDefinition && ! isInObjCInterface && ! isInObjCSelector && ! isDigit ( peekNextChar ( ) ) && ! isInEnum && ! isInAsm && ! isInAsmOneLine && ! isInAsmBlock		632119	1		&&			
ANR	636185	UnaryOperationExpression	! foundPreDefinitionHeader		632119	0					
ANR	636186	UnaryOperator	!		632119	0					
ANR	636187	Identifier	foundPreDefinitionHeader		632119	1					
ANR	636188	AndExpression	previousCommandChar != ')' && ! foundPreCommandHeader && squareBracketCount == 0 && ! isInObjCMethodDefinition && ! isInObjCInterface && ! isInObjCSelector && ! isDigit ( peekNextChar ( ) ) && ! isInEnum && ! isInAsm && ! isInAsmOneLine && ! isInAsmBlock		632119	1		&&			
ANR	636189	EqualityExpression	previousCommandChar != ')'		632119	0		!=			
ANR	636190	Identifier	previousCommandChar		632119	0					
ANR	636191	PrimaryExpression	')'		632119	1					
ANR	636192	AndExpression	! foundPreCommandHeader && squareBracketCount == 0 && ! isInObjCMethodDefinition && ! isInObjCInterface && ! isInObjCSelector && ! isDigit ( peekNextChar ( ) ) && ! isInEnum && ! isInAsm && ! isInAsmOneLine && ! isInAsmBlock		632119	1		&&			
ANR	636193	UnaryOperationExpression	! foundPreCommandHeader		632119	0					
ANR	636194	UnaryOperator	!		632119	0					
ANR	636195	Identifier	foundPreCommandHeader		632119	1					
ANR	636196	AndExpression	squareBracketCount == 0 && ! isInObjCMethodDefinition && ! isInObjCInterface && ! isInObjCSelector && ! isDigit ( peekNextChar ( ) ) && ! isInEnum && ! isInAsm && ! isInAsmOneLine && ! isInAsmBlock		632119	1		&&			
ANR	636197	EqualityExpression	squareBracketCount == 0		632119	0		==			
ANR	636198	Identifier	squareBracketCount		632119	0					
ANR	636199	PrimaryExpression	0		632119	1					
ANR	636200	AndExpression	! isInObjCMethodDefinition && ! isInObjCInterface && ! isInObjCSelector && ! isDigit ( peekNextChar ( ) ) && ! isInEnum && ! isInAsm && ! isInAsmOneLine && ! isInAsmBlock		632119	1		&&			
ANR	636201	UnaryOperationExpression	! isInObjCMethodDefinition		632119	0					
ANR	636202	UnaryOperator	!		632119	0					
ANR	636203	Identifier	isInObjCMethodDefinition		632119	1					
ANR	636204	AndExpression	! isInObjCInterface && ! isInObjCSelector && ! isDigit ( peekNextChar ( ) ) && ! isInEnum && ! isInAsm && ! isInAsmOneLine && ! isInAsmBlock		632119	1		&&			
ANR	636205	UnaryOperationExpression	! isInObjCInterface		632119	0					
ANR	636206	UnaryOperator	!		632119	0					
ANR	636207	Identifier	isInObjCInterface		632119	1					
ANR	636208	AndExpression	! isInObjCSelector && ! isDigit ( peekNextChar ( ) ) && ! isInEnum && ! isInAsm && ! isInAsmOneLine && ! isInAsmBlock		632119	1		&&			
ANR	636209	UnaryOperationExpression	! isInObjCSelector		632119	0					
ANR	636210	UnaryOperator	!		632119	0					
ANR	636211	Identifier	isInObjCSelector		632119	1					
ANR	636212	AndExpression	! isDigit ( peekNextChar ( ) ) && ! isInEnum && ! isInAsm && ! isInAsmOneLine && ! isInAsmBlock		632119	1		&&			
ANR	636213	UnaryOperationExpression	! isDigit ( peekNextChar ( ) )		632119	0					
ANR	636214	UnaryOperator	!		632119	0					
ANR	636215	CallExpression	isDigit ( peekNextChar ( ) )		632119	1					
ANR	636216	Callee	isDigit		632119	0					
ANR	636217	Identifier	isDigit		632119	0					
ANR	636218	ArgumentList	peekNextChar ( )		632119	1					
ANR	636219	Argument	peekNextChar ( )		632119	0					
ANR	636220	CallExpression	peekNextChar ( )		632119	0					
ANR	636221	Callee	peekNextChar		632119	0					
ANR	636222	Identifier	peekNextChar		632119	0					
ANR	636223	ArgumentList			632119	1					
ANR	636224	AndExpression	! isInEnum && ! isInAsm && ! isInAsmOneLine && ! isInAsmBlock		632119	1		&&			
ANR	636225	UnaryOperationExpression	! isInEnum		632119	0					
ANR	636226	UnaryOperator	!		632119	0					
ANR	636227	Identifier	isInEnum		632119	1					
ANR	636228	AndExpression	! isInAsm && ! isInAsmOneLine && ! isInAsmBlock		632119	1		&&			
ANR	636229	UnaryOperationExpression	! isInAsm		632119	0					
ANR	636230	UnaryOperator	!		632119	0					
ANR	636231	Identifier	isInAsm		632119	1					
ANR	636232	AndExpression	! isInAsmOneLine && ! isInAsmBlock		632119	1		&&			
ANR	636233	UnaryOperationExpression	! isInAsmOneLine		632119	0					
ANR	636234	UnaryOperator	!		632119	0					
ANR	636235	Identifier	isInAsmOneLine		632119	1					
ANR	636236	UnaryOperationExpression	! isInAsmBlock		632119	1					
ANR	636237	UnaryOperator	!		632119	0					
ANR	636238	Identifier	isInAsmBlock		632119	1					
ANR	636239	CompoundStatement		968:3:30254:30254	632119	1					
ANR	636240	ExpressionStatement	passedColon = true	1417:4:43808:43826	632119	0	True				
ANR	636241	AssignmentExpression	passedColon = true		632119	0		=			
ANR	636242	Identifier	passedColon		632119	0					
ANR	636243	Identifier	true		632119	1					
ANR	636244	IfStatement	if ( isCStyle ( ) && shouldPadMethodColon && ( squareBracketCount > 0 || isInObjCMethodDefinition || isInObjCSelector ) && ! foundQuestionMark )		632119	1					
ANR	636245	Condition	isCStyle ( ) && shouldPadMethodColon && ( squareBracketCount > 0 || isInObjCMethodDefinition || isInObjCSelector ) && ! foundQuestionMark	1420:7:43841:44005	632119	0	True				
ANR	636246	AndExpression	isCStyle ( ) && shouldPadMethodColon && ( squareBracketCount > 0 || isInObjCMethodDefinition || isInObjCSelector ) && ! foundQuestionMark		632119	0		&&			
ANR	636247	CallExpression	isCStyle ( )		632119	0					
ANR	636248	Callee	isCStyle		632119	0					
ANR	636249	Identifier	isCStyle		632119	0					
ANR	636250	ArgumentList			632119	1					
ANR	636251	AndExpression	shouldPadMethodColon && ( squareBracketCount > 0 || isInObjCMethodDefinition || isInObjCSelector ) && ! foundQuestionMark		632119	1		&&			
ANR	636252	Identifier	shouldPadMethodColon		632119	0					
ANR	636253	AndExpression	( squareBracketCount > 0 || isInObjCMethodDefinition || isInObjCSelector ) && ! foundQuestionMark		632119	1		&&			
ANR	636254	OrExpression	squareBracketCount > 0 || isInObjCMethodDefinition || isInObjCSelector		632119	0		||			
ANR	636255	RelationalExpression	squareBracketCount > 0		632119	0		>			
ANR	636256	Identifier	squareBracketCount		632119	0					
ANR	636257	PrimaryExpression	0		632119	1					
ANR	636258	OrExpression	isInObjCMethodDefinition || isInObjCSelector		632119	1		||			
ANR	636259	Identifier	isInObjCMethodDefinition		632119	0					
ANR	636260	Identifier	isInObjCSelector		632119	1					
ANR	636261	UnaryOperationExpression	! foundQuestionMark		632119	1					
ANR	636262	UnaryOperator	!		632119	0					
ANR	636263	Identifier	foundQuestionMark		632119	1					
ANR	636264	ExpressionStatement	padObjCMethodColon ( )	1424:4:44038:44058	632119	1	True				
ANR	636265	CallExpression	padObjCMethodColon ( )		632119	0					
ANR	636266	Callee	padObjCMethodColon		632119	0					
ANR	636267	Identifier	padObjCMethodColon		632119	0					
ANR	636268	ArgumentList			632119	1					
ANR	636269	IfStatement	if ( isInObjCInterface )		632119	2					
ANR	636270	Condition	isInObjCInterface	1426:7:44068:44084	632119	0	True				
ANR	636271	Identifier	isInObjCInterface		632119	0					
ANR	636272	CompoundStatement		979:3:30542:30542	632119	1					
ANR	636273	ExpressionStatement	appendSpacePad ( )	1428:4:44096:44112	632119	0	True				
ANR	636274	CallExpression	appendSpacePad ( )		632119	0					
ANR	636275	Callee	appendSpacePad		632119	0					
ANR	636276	Identifier	appendSpacePad		632119	0					
ANR	636277	ArgumentList			632119	1					
ANR	636278	IfStatement	if ( ( int ) currentLine . length ( ) > charNum + 1 && ! isWhiteSpace ( currentLine [ charNum + 1 ] ) )		632119	1					
ANR	636279	Condition	( int ) currentLine . length ( ) > charNum + 1 && ! isWhiteSpace ( currentLine [ charNum + 1 ] )	1429:8:44122:44216	632119	0	True				
ANR	636280	AndExpression	( int ) currentLine . length ( ) > charNum + 1 && ! isWhiteSpace ( currentLine [ charNum + 1 ] )		632119	0		&&			
ANR	636281	RelationalExpression	( int ) currentLine . length ( ) > charNum + 1		632119	0		>			
ANR	636282	CastExpression	( int ) currentLine . length ( )		632119	0					
ANR	636283	CastTarget	int		632119	0					
ANR	636284	CallExpression	currentLine . length ( )		632119	1					
ANR	636285	Callee	currentLine . length		632119	0					
ANR	636286	MemberAccess	currentLine . length		632119	0					
ANR	636287	Identifier	currentLine		632119	0					
ANR	636288	Identifier	length		632119	1					
ANR	636289	ArgumentList			632119	1					
ANR	636290	AdditiveExpression	charNum + 1		632119	1		+			
ANR	636291	Identifier	charNum		632119	0					
ANR	636292	PrimaryExpression	1		632119	1					
ANR	636293	UnaryOperationExpression	! isWhiteSpace ( currentLine [ charNum + 1 ] )		632119	1					
ANR	636294	UnaryOperator	!		632119	0					
ANR	636295	CallExpression	isWhiteSpace ( currentLine [ charNum + 1 ] )		632119	1					
ANR	636296	Callee	isWhiteSpace		632119	0					
ANR	636297	Identifier	isWhiteSpace		632119	0					
ANR	636298	ArgumentList	currentLine [ charNum + 1 ]		632119	1					
ANR	636299	Argument	currentLine [ charNum + 1 ]		632119	0					
ANR	636300	ArrayIndexing	currentLine [ charNum + 1 ]		632119	0					
ANR	636301	Identifier	currentLine		632119	0					
ANR	636302	AdditiveExpression	charNum + 1		632119	1		+			
ANR	636303	Identifier	charNum		632119	0					
ANR	636304	PrimaryExpression	1		632119	1					
ANR	636305	ExpressionStatement	"currentLine . insert ( charNum + 1 , "" "" )"	1431:5:44224:44260	632119	1	True				
ANR	636306	CallExpression	"currentLine . insert ( charNum + 1 , "" "" )"		632119	0					
ANR	636307	Callee	currentLine . insert		632119	0					
ANR	636308	MemberAccess	currentLine . insert		632119	0					
ANR	636309	Identifier	currentLine		632119	0					
ANR	636310	Identifier	insert		632119	1					
ANR	636311	ArgumentList	charNum + 1		632119	1					
ANR	636312	Argument	charNum + 1		632119	0					
ANR	636313	AdditiveExpression	charNum + 1		632119	0		+			
ANR	636314	Identifier	charNum		632119	0					
ANR	636315	PrimaryExpression	1		632119	1					
ANR	636316	Argument	""" """		632119	1					
ANR	636317	PrimaryExpression	""" """		632119	0					
ANR	636318	IfStatement	if ( isClassInitializer ( ) )		632119	3					
ANR	636319	Condition	isClassInitializer ( )	1434:7:44275:44294	632119	0	True				
ANR	636320	CallExpression	isClassInitializer ( )		632119	0					
ANR	636321	Callee	isClassInitializer		632119	0					
ANR	636322	Identifier	isClassInitializer		632119	0					
ANR	636323	ArgumentList			632119	1					
ANR	636324	ExpressionStatement	isInClassInitializer = true	1435:4:44301:44328	632119	1	True				
ANR	636325	AssignmentExpression	isInClassInitializer = true		632119	0		=			
ANR	636326	Identifier	isInClassInitializer		632119	0					
ANR	636327	Identifier	true		632119	1					
ANR	636328	IfStatement	if ( currentChar == '?' )		632119	34					
ANR	636329	Condition	currentChar == '?'	1438:6:44341:44358	632119	0	True				
ANR	636330	EqualityExpression	currentChar == '?'		632119	0		==			
ANR	636331	Identifier	currentChar		632119	0					
ANR	636332	PrimaryExpression	'?'		632119	1					
ANR	636333	ExpressionStatement	foundQuestionMark = true	1439:3:44364:44388	632119	1	True				
ANR	636334	AssignmentExpression	foundQuestionMark = true		632119	0		=			
ANR	636335	Identifier	foundQuestionMark		632119	0					
ANR	636336	Identifier	true		632119	1					
ANR	636337	IfStatement	if ( isPotentialHeader && ! isInTemplate )		632119	35					
ANR	636338	Condition	isPotentialHeader && ! isInTemplate	1441:6:44397:44430	632119	0	True				
ANR	636339	AndExpression	isPotentialHeader && ! isInTemplate		632119	0		&&			
ANR	636340	Identifier	isPotentialHeader		632119	0					
ANR	636341	UnaryOperationExpression	! isInTemplate		632119	1					
ANR	636342	UnaryOperator	!		632119	0					
ANR	636343	Identifier	isInTemplate		632119	1					
ANR	636344	CompoundStatement		1077:3:33582:33632	632119	1					
ANR	636345	IfStatement	"if ( findKeyword ( currentLine , charNum , AS_NEW ) || findKeyword ( currentLine , charNum , AS_DELETE ) )"		632119	0					
ANR	636346	Condition	"findKeyword ( currentLine , charNum , AS_NEW ) || findKeyword ( currentLine , charNum , AS_DELETE )"	1443:7:44444:44543	632119	0	True				
ANR	636347	OrExpression	"findKeyword ( currentLine , charNum , AS_NEW ) || findKeyword ( currentLine , charNum , AS_DELETE )"		632119	0		||			
ANR	636348	CallExpression	"findKeyword ( currentLine , charNum , AS_NEW )"		632119	0					
ANR	636349	Callee	findKeyword		632119	0					
ANR	636350	Identifier	findKeyword		632119	0					
ANR	636351	ArgumentList	currentLine		632119	1					
ANR	636352	Argument	currentLine		632119	0					
ANR	636353	Identifier	currentLine		632119	0					
ANR	636354	Argument	charNum		632119	1					
ANR	636355	Identifier	charNum		632119	0					
ANR	636356	Argument	AS_NEW		632119	2					
ANR	636357	Identifier	AS_NEW		632119	0					
ANR	636358	CallExpression	"findKeyword ( currentLine , charNum , AS_DELETE )"		632119	1					
ANR	636359	Callee	findKeyword		632119	0					
ANR	636360	Identifier	findKeyword		632119	0					
ANR	636361	ArgumentList	currentLine		632119	1					
ANR	636362	Argument	currentLine		632119	0					
ANR	636363	Identifier	currentLine		632119	0					
ANR	636364	Argument	charNum		632119	1					
ANR	636365	Identifier	charNum		632119	0					
ANR	636366	Argument	AS_DELETE		632119	2					
ANR	636367	Identifier	AS_DELETE		632119	0					
ANR	636368	CompoundStatement		997:3:31001:31001	632119	1					
ANR	636369	ExpressionStatement	isInPotentialCalculation = false	1446:4:44555:44587	632119	0	True				
ANR	636370	AssignmentExpression	isInPotentialCalculation = false		632119	0		=			
ANR	636371	Identifier	isInPotentialCalculation		632119	0					
ANR	636372	Identifier	false		632119	1					
ANR	636373	ExpressionStatement	isImmediatelyPostNewDelete = true	1447:4:44593:44626	632119	1	True				
ANR	636374	AssignmentExpression	isImmediatelyPostNewDelete = true		632119	0		=			
ANR	636375	Identifier	isImmediatelyPostNewDelete		632119	0					
ANR	636376	Identifier	true		632119	1					
ANR	636377	IfStatement	"if ( findKeyword ( currentLine , charNum , AS_RETURN ) )"		632119	1					
ANR	636378	Condition	"findKeyword ( currentLine , charNum , AS_RETURN )"	1450:7:44641:44684	632119	0	True				
ANR	636379	CallExpression	"findKeyword ( currentLine , charNum , AS_RETURN )"		632119	0					
ANR	636380	Callee	findKeyword		632119	0					
ANR	636381	Identifier	findKeyword		632119	0					
ANR	636382	ArgumentList	currentLine		632119	1					
ANR	636383	Argument	currentLine		632119	0					
ANR	636384	Identifier	currentLine		632119	0					
ANR	636385	Argument	charNum		632119	1					
ANR	636386	Identifier	charNum		632119	0					
ANR	636387	Argument	AS_RETURN		632119	2					
ANR	636388	Identifier	AS_RETURN		632119	0					
ANR	636389	CompoundStatement		1003:3:31142:31142	632119	1					
ANR	636390	ExpressionStatement	isInPotentialCalculation = true	1452:4:44696:44727	632119	0	True				
ANR	636391	AssignmentExpression	isInPotentialCalculation = true		632119	0		=			
ANR	636392	Identifier	isInPotentialCalculation		632119	0					
ANR	636393	Identifier	true		632119	1					
ANR	636394	ExpressionStatement	isImmediatelyPostReturn = true	1453:4:44768:44798	632119	1	True				
ANR	636395	AssignmentExpression	isImmediatelyPostReturn = true		632119	0		=			
ANR	636396	Identifier	isImmediatelyPostReturn		632119	0					
ANR	636397	Identifier	true		632119	1					
ANR	636398	IfStatement	"if ( findKeyword ( currentLine , charNum , AS_OPERATOR ) )"		632119	2					
ANR	636399	Condition	"findKeyword ( currentLine , charNum , AS_OPERATOR )"	1456:7:44813:44858	632119	0	True				
ANR	636400	CallExpression	"findKeyword ( currentLine , charNum , AS_OPERATOR )"		632119	0					
ANR	636401	Callee	findKeyword		632119	0					
ANR	636402	Identifier	findKeyword		632119	0					
ANR	636403	ArgumentList	currentLine		632119	1					
ANR	636404	Argument	currentLine		632119	0					
ANR	636405	Identifier	currentLine		632119	0					
ANR	636406	Argument	charNum		632119	1					
ANR	636407	Identifier	charNum		632119	0					
ANR	636408	Argument	AS_OPERATOR		632119	2					
ANR	636409	Identifier	AS_OPERATOR		632119	0					
ANR	636410	ExpressionStatement	isImmediatelyPostOperator = true	1457:4:44865:44897	632119	1	True				
ANR	636411	AssignmentExpression	isImmediatelyPostOperator = true		632119	0		=			
ANR	636412	Identifier	isImmediatelyPostOperator		632119	0					
ANR	636413	Identifier	true		632119	1					
ANR	636414	IfStatement	"if ( findKeyword ( currentLine , charNum , AS_ENUM ) )"		632119	3					
ANR	636415	Condition	"findKeyword ( currentLine , charNum , AS_ENUM )"	1459:7:44907:44948	632119	0	True				
ANR	636416	CallExpression	"findKeyword ( currentLine , charNum , AS_ENUM )"		632119	0					
ANR	636417	Callee	findKeyword		632119	0					
ANR	636418	Identifier	findKeyword		632119	0					
ANR	636419	ArgumentList	currentLine		632119	1					
ANR	636420	Argument	currentLine		632119	0					
ANR	636421	Identifier	currentLine		632119	0					
ANR	636422	Argument	charNum		632119	1					
ANR	636423	Identifier	charNum		632119	0					
ANR	636424	Argument	AS_ENUM		632119	2					
ANR	636425	Identifier	AS_ENUM		632119	0					
ANR	636426	CompoundStatement		1013:4:31412:31465	632119	1					
ANR	636427	IdentifierDeclStatement	"size_t firstNum = currentLine . find_first_of ( ""(){},/"" ) ;"	1461:4:44960:45013	632119	0	True				
ANR	636428	IdentifierDecl	"firstNum = currentLine . find_first_of ( ""(){},/"" )"		632119	0					
ANR	636429	IdentifierDeclType	size_t		632119	0					
ANR	636430	Identifier	firstNum		632119	1					
ANR	636431	AssignmentExpression	"firstNum = currentLine . find_first_of ( ""(){},/"" )"		632119	2		=			
ANR	636432	Identifier	firstNum		632119	0					
ANR	636433	CallExpression	"currentLine . find_first_of ( ""(){},/"" )"		632119	1					
ANR	636434	Callee	currentLine . find_first_of		632119	0					
ANR	636435	MemberAccess	currentLine . find_first_of		632119	0					
ANR	636436	Identifier	currentLine		632119	0					
ANR	636437	Identifier	find_first_of		632119	1					
ANR	636438	ArgumentList	"""(){},/"""		632119	1					
ANR	636439	Argument	"""(){},/"""		632119	0					
ANR	636440	PrimaryExpression	"""(){},/"""		632119	0					
ANR	636441	IfStatement	if ( firstNum == string :: npos || currentLine [ firstNum ] == '{' || currentLine [ firstNum ] == '/' )		632119	1					
ANR	636442	Condition	firstNum == string :: npos || currentLine [ firstNum ] == '{' || currentLine [ firstNum ] == '/'	1462:8:45023:45134	632119	0	True				
ANR	636443	OrExpression	firstNum == string :: npos || currentLine [ firstNum ] == '{' || currentLine [ firstNum ] == '/'		632119	0		||			
ANR	636444	EqualityExpression	firstNum == string :: npos		632119	0		==			
ANR	636445	Identifier	firstNum		632119	0					
ANR	636446	Identifier	string :: npos		632119	1					
ANR	636447	OrExpression	currentLine [ firstNum ] == '{' || currentLine [ firstNum ] == '/'		632119	1		||			
ANR	636448	EqualityExpression	currentLine [ firstNum ] == '{'		632119	0		==			
ANR	636449	ArrayIndexing	currentLine [ firstNum ]		632119	0					
ANR	636450	Identifier	currentLine		632119	0					
ANR	636451	Identifier	firstNum		632119	1					
ANR	636452	PrimaryExpression	'{'		632119	1					
ANR	636453	EqualityExpression	currentLine [ firstNum ] == '/'		632119	1		==			
ANR	636454	ArrayIndexing	currentLine [ firstNum ]		632119	0					
ANR	636455	Identifier	currentLine		632119	0					
ANR	636456	Identifier	firstNum		632119	1					
ANR	636457	PrimaryExpression	'/'		632119	1					
ANR	636458	ExpressionStatement	isInEnum = true	1465:5:45142:45157	632119	1	True				
ANR	636459	AssignmentExpression	isInEnum = true		632119	0		=			
ANR	636460	Identifier	isInEnum		632119	0					
ANR	636461	Identifier	true		632119	1					
ANR	636462	IfStatement	"if ( isCStyle ( ) && findKeyword ( currentLine , charNum , AS_THROW ) && previousCommandChar != ')' && ! foundPreCommandHeader )"		632119	4					
ANR	636463	Condition	"isCStyle ( ) && findKeyword ( currentLine , charNum , AS_THROW ) && previousCommandChar != ')' && ! foundPreCommandHeader"	1468:7:45172:45317	632119	0	True				
ANR	636464	AndExpression	"isCStyle ( ) && findKeyword ( currentLine , charNum , AS_THROW ) && previousCommandChar != ')' && ! foundPreCommandHeader"		632119	0		&&			
ANR	636465	CallExpression	isCStyle ( )		632119	0					
ANR	636466	Callee	isCStyle		632119	0					
ANR	636467	Identifier	isCStyle		632119	0					
ANR	636468	ArgumentList			632119	1					
ANR	636469	AndExpression	"findKeyword ( currentLine , charNum , AS_THROW ) && previousCommandChar != ')' && ! foundPreCommandHeader"		632119	1		&&			
ANR	636470	CallExpression	"findKeyword ( currentLine , charNum , AS_THROW )"		632119	0					
ANR	636471	Callee	findKeyword		632119	0					
ANR	636472	Identifier	findKeyword		632119	0					
ANR	636473	ArgumentList	currentLine		632119	1					
ANR	636474	Argument	currentLine		632119	0					
ANR	636475	Identifier	currentLine		632119	0					
ANR	636476	Argument	charNum		632119	1					
ANR	636477	Identifier	charNum		632119	0					
ANR	636478	Argument	AS_THROW		632119	2					
ANR	636479	Identifier	AS_THROW		632119	0					
ANR	636480	AndExpression	previousCommandChar != ')' && ! foundPreCommandHeader		632119	1		&&			
ANR	636481	EqualityExpression	previousCommandChar != ')'		632119	0		!=			
ANR	636482	Identifier	previousCommandChar		632119	0					
ANR	636483	PrimaryExpression	')'		632119	1					
ANR	636484	UnaryOperationExpression	! foundPreCommandHeader		632119	1					
ANR	636485	UnaryOperator	!		632119	0					
ANR	636486	Identifier	foundPreCommandHeader		632119	1					
ANR	636487	ExpressionStatement	isImmediatelyPostThrow = true	1472:4:45348:45377	632119	1	True				
ANR	636488	AssignmentExpression	isImmediatelyPostThrow = true		632119	0		=			
ANR	636489	Identifier	isImmediatelyPostThrow		632119	0					
ANR	636490	Identifier	true		632119	1					
ANR	636491	IfStatement	"if ( isCStyle ( ) && findKeyword ( currentLine , charNum , AS_EXTERN ) && isExternC ( ) )"		632119	5					
ANR	636492	Condition	"isCStyle ( ) && findKeyword ( currentLine , charNum , AS_EXTERN ) && isExternC ( )"	1474:7:45387:45459	632119	0	True				
ANR	636493	AndExpression	"isCStyle ( ) && findKeyword ( currentLine , charNum , AS_EXTERN ) && isExternC ( )"		632119	0		&&			
ANR	636494	CallExpression	isCStyle ( )		632119	0					
ANR	636495	Callee	isCStyle		632119	0					
ANR	636496	Identifier	isCStyle		632119	0					
ANR	636497	ArgumentList			632119	1					
ANR	636498	AndExpression	"findKeyword ( currentLine , charNum , AS_EXTERN ) && isExternC ( )"		632119	1		&&			
ANR	636499	CallExpression	"findKeyword ( currentLine , charNum , AS_EXTERN )"		632119	0					
ANR	636500	Callee	findKeyword		632119	0					
ANR	636501	Identifier	findKeyword		632119	0					
ANR	636502	ArgumentList	currentLine		632119	1					
ANR	636503	Argument	currentLine		632119	0					
ANR	636504	Identifier	currentLine		632119	0					
ANR	636505	Argument	charNum		632119	1					
ANR	636506	Identifier	charNum		632119	0					
ANR	636507	Argument	AS_EXTERN		632119	2					
ANR	636508	Identifier	AS_EXTERN		632119	0					
ANR	636509	CallExpression	isExternC ( )		632119	1					
ANR	636510	Callee	isExternC		632119	0					
ANR	636511	Identifier	isExternC		632119	0					
ANR	636512	ArgumentList			632119	1					
ANR	636513	ExpressionStatement	isInExternC = true	1475:4:45466:45484	632119	1	True				
ANR	636514	AssignmentExpression	isInExternC = true		632119	0		=			
ANR	636515	Identifier	isInExternC		632119	0					
ANR	636516	Identifier	true		632119	1					
ANR	636517	IfStatement	"if ( isCStyle ( ) && findKeyword ( currentLine , charNum , AS_AUTO ) && ( isBraceType ( braceTypeStack -> back ( ) , NULL_TYPE ) || isBraceType ( braceTypeStack -> back ( ) , NAMESPACE_TYPE ) || isBraceType ( braceTypeStack -> back ( ) , CLASS_TYPE ) ) )"		632119	6					
ANR	636518	Condition	"isCStyle ( ) && findKeyword ( currentLine , charNum , AS_AUTO ) && ( isBraceType ( braceTypeStack -> back ( ) , NULL_TYPE ) || isBraceType ( braceTypeStack -> back ( ) , NAMESPACE_TYPE ) || isBraceType ( braceTypeStack -> back ( ) , CLASS_TYPE ) )"	1477:7:45494:45748	632119	0	True				
ANR	636519	AndExpression	"isCStyle ( ) && findKeyword ( currentLine , charNum , AS_AUTO ) && ( isBraceType ( braceTypeStack -> back ( ) , NULL_TYPE ) || isBraceType ( braceTypeStack -> back ( ) , NAMESPACE_TYPE ) || isBraceType ( braceTypeStack -> back ( ) , CLASS_TYPE ) )"		632119	0		&&			
ANR	636520	CallExpression	isCStyle ( )		632119	0					
ANR	636521	Callee	isCStyle		632119	0					
ANR	636522	Identifier	isCStyle		632119	0					
ANR	636523	ArgumentList			632119	1					
ANR	636524	AndExpression	"findKeyword ( currentLine , charNum , AS_AUTO ) && ( isBraceType ( braceTypeStack -> back ( ) , NULL_TYPE ) || isBraceType ( braceTypeStack -> back ( ) , NAMESPACE_TYPE ) || isBraceType ( braceTypeStack -> back ( ) , CLASS_TYPE ) )"		632119	1		&&			
ANR	636525	CallExpression	"findKeyword ( currentLine , charNum , AS_AUTO )"		632119	0					
ANR	636526	Callee	findKeyword		632119	0					
ANR	636527	Identifier	findKeyword		632119	0					
ANR	636528	ArgumentList	currentLine		632119	1					
ANR	636529	Argument	currentLine		632119	0					
ANR	636530	Identifier	currentLine		632119	0					
ANR	636531	Argument	charNum		632119	1					
ANR	636532	Identifier	charNum		632119	0					
ANR	636533	Argument	AS_AUTO		632119	2					
ANR	636534	Identifier	AS_AUTO		632119	0					
ANR	636535	OrExpression	"isBraceType ( braceTypeStack -> back ( ) , NULL_TYPE ) || isBraceType ( braceTypeStack -> back ( ) , NAMESPACE_TYPE ) || isBraceType ( braceTypeStack -> back ( ) , CLASS_TYPE )"		632119	1		||			
ANR	636536	CallExpression	"isBraceType ( braceTypeStack -> back ( ) , NULL_TYPE )"		632119	0					
ANR	636537	Callee	isBraceType		632119	0					
ANR	636538	Identifier	isBraceType		632119	0					
ANR	636539	ArgumentList	braceTypeStack -> back ( )		632119	1					
ANR	636540	Argument	braceTypeStack -> back ( )		632119	0					
ANR	636541	CallExpression	braceTypeStack -> back ( )		632119	0					
ANR	636542	Callee	braceTypeStack -> back		632119	0					
ANR	636543	PtrMemberAccess	braceTypeStack -> back		632119	0					
ANR	636544	Identifier	braceTypeStack		632119	0					
ANR	636545	Identifier	back		632119	1					
ANR	636546	ArgumentList			632119	1					
ANR	636547	Argument	NULL_TYPE		632119	1					
ANR	636548	Identifier	NULL_TYPE		632119	0					
ANR	636549	OrExpression	"isBraceType ( braceTypeStack -> back ( ) , NAMESPACE_TYPE ) || isBraceType ( braceTypeStack -> back ( ) , CLASS_TYPE )"		632119	1		||			
ANR	636550	CallExpression	"isBraceType ( braceTypeStack -> back ( ) , NAMESPACE_TYPE )"		632119	0					
ANR	636551	Callee	isBraceType		632119	0					
ANR	636552	Identifier	isBraceType		632119	0					
ANR	636553	ArgumentList	braceTypeStack -> back ( )		632119	1					
ANR	636554	Argument	braceTypeStack -> back ( )		632119	0					
ANR	636555	CallExpression	braceTypeStack -> back ( )		632119	0					
ANR	636556	Callee	braceTypeStack -> back		632119	0					
ANR	636557	PtrMemberAccess	braceTypeStack -> back		632119	0					
ANR	636558	Identifier	braceTypeStack		632119	0					
ANR	636559	Identifier	back		632119	1					
ANR	636560	ArgumentList			632119	1					
ANR	636561	Argument	NAMESPACE_TYPE		632119	1					
ANR	636562	Identifier	NAMESPACE_TYPE		632119	0					
ANR	636563	CallExpression	"isBraceType ( braceTypeStack -> back ( ) , CLASS_TYPE )"		632119	1					
ANR	636564	Callee	isBraceType		632119	0					
ANR	636565	Identifier	isBraceType		632119	0					
ANR	636566	ArgumentList	braceTypeStack -> back ( )		632119	1					
ANR	636567	Argument	braceTypeStack -> back ( )		632119	0					
ANR	636568	CallExpression	braceTypeStack -> back ( )		632119	0					
ANR	636569	Callee	braceTypeStack -> back		632119	0					
ANR	636570	PtrMemberAccess	braceTypeStack -> back		632119	0					
ANR	636571	Identifier	braceTypeStack		632119	0					
ANR	636572	Identifier	back		632119	1					
ANR	636573	ArgumentList			632119	1					
ANR	636574	Argument	CLASS_TYPE		632119	1					
ANR	636575	Identifier	CLASS_TYPE		632119	0					
ANR	636576	ExpressionStatement	foundTrailingReturnType = true	1481:4:45755:45785	632119	1	True				
ANR	636577	AssignmentExpression	foundTrailingReturnType = true		632119	0		=			
ANR	636578	Identifier	foundTrailingReturnType		632119	0					
ANR	636579	Identifier	true		632119	1					
ANR	636580	IfStatement	"if ( isCStyle ( ) && findKeyword ( currentLine , charNum , AS_NS_DURING ) )"		632119	7					
ANR	636581	Condition	"isCStyle ( ) && findKeyword ( currentLine , charNum , AS_NS_DURING )"	1484:7:45854:45914	632119	0	True				
ANR	636582	AndExpression	"isCStyle ( ) && findKeyword ( currentLine , charNum , AS_NS_DURING )"		632119	0		&&			
ANR	636583	CallExpression	isCStyle ( )		632119	0					
ANR	636584	Callee	isCStyle		632119	0					
ANR	636585	Identifier	isCStyle		632119	0					
ANR	636586	ArgumentList			632119	1					
ANR	636587	CallExpression	"findKeyword ( currentLine , charNum , AS_NS_DURING )"		632119	1					
ANR	636588	Callee	findKeyword		632119	0					
ANR	636589	Identifier	findKeyword		632119	0					
ANR	636590	ArgumentList	currentLine		632119	1					
ANR	636591	Argument	currentLine		632119	0					
ANR	636592	Identifier	currentLine		632119	0					
ANR	636593	Argument	charNum		632119	1					
ANR	636594	Identifier	charNum		632119	0					
ANR	636595	Argument	AS_NS_DURING		632119	2					
ANR	636596	Identifier	AS_NS_DURING		632119	0					
ANR	636597	ExpressionStatement	foundPreCommandMacro = true	1485:4:45921:45948	632119	1	True				
ANR	636598	AssignmentExpression	foundPreCommandMacro = true		632119	0		=			
ANR	636599	Identifier	foundPreCommandMacro		632119	0					
ANR	636600	Identifier	true		632119	1					
ANR	636601	IfStatement	"if ( isCStyle ( ) && findKeyword ( currentLine , charNum , AS_NS_HANDLER ) )"		632119	8					
ANR	636602	Condition	"isCStyle ( ) && findKeyword ( currentLine , charNum , AS_NS_HANDLER )"	1486:7:45957:46018	632119	0	True				
ANR	636603	AndExpression	"isCStyle ( ) && findKeyword ( currentLine , charNum , AS_NS_HANDLER )"		632119	0		&&			
ANR	636604	CallExpression	isCStyle ( )		632119	0					
ANR	636605	Callee	isCStyle		632119	0					
ANR	636606	Identifier	isCStyle		632119	0					
ANR	636607	ArgumentList			632119	1					
ANR	636608	CallExpression	"findKeyword ( currentLine , charNum , AS_NS_HANDLER )"		632119	1					
ANR	636609	Callee	findKeyword		632119	0					
ANR	636610	Identifier	findKeyword		632119	0					
ANR	636611	ArgumentList	currentLine		632119	1					
ANR	636612	Argument	currentLine		632119	0					
ANR	636613	Identifier	currentLine		632119	0					
ANR	636614	Argument	charNum		632119	1					
ANR	636615	Identifier	charNum		632119	0					
ANR	636616	Argument	AS_NS_HANDLER		632119	2					
ANR	636617	Identifier	AS_NS_HANDLER		632119	0					
ANR	636618	ExpressionStatement	foundPreCommandMacro = true	1487:4:46025:46052	632119	1	True				
ANR	636619	AssignmentExpression	foundPreCommandMacro = true		632119	0		=			
ANR	636620	Identifier	foundPreCommandMacro		632119	0					
ANR	636621	Identifier	true		632119	1					
ANR	636622	IfStatement	"if ( isCStyle ( ) && isExecSQL ( currentLine , charNum ) )"		632119	9					
ANR	636623	Condition	"isCStyle ( ) && isExecSQL ( currentLine , charNum )"	1489:7:46062:46106	632119	0	True				
ANR	636624	AndExpression	"isCStyle ( ) && isExecSQL ( currentLine , charNum )"		632119	0		&&			
ANR	636625	CallExpression	isCStyle ( )		632119	0					
ANR	636626	Callee	isCStyle		632119	0					
ANR	636627	Identifier	isCStyle		632119	0					
ANR	636628	ArgumentList			632119	1					
ANR	636629	CallExpression	"isExecSQL ( currentLine , charNum )"		632119	1					
ANR	636630	Callee	isExecSQL		632119	0					
ANR	636631	Identifier	isExecSQL		632119	0					
ANR	636632	ArgumentList	currentLine		632119	1					
ANR	636633	Argument	currentLine		632119	0					
ANR	636634	Identifier	currentLine		632119	0					
ANR	636635	Argument	charNum		632119	1					
ANR	636636	Identifier	charNum		632119	0					
ANR	636637	ExpressionStatement	isInExecSQL = true	1490:4:46113:46131	632119	1	True				
ANR	636638	AssignmentExpression	isInExecSQL = true		632119	0		=			
ANR	636639	Identifier	isInExecSQL		632119	0					
ANR	636640	Identifier	true		632119	1					
ANR	636641	IfStatement	if ( isCStyle ( ) )		632119	10					
ANR	636642	Condition	isCStyle ( )	1492:7:46141:46150	632119	0	True				
ANR	636643	CallExpression	isCStyle ( )		632119	0					
ANR	636644	Callee	isCStyle		632119	0					
ANR	636645	Identifier	isCStyle		632119	0					
ANR	636646	ArgumentList			632119	1					
ANR	636647	CompoundStatement		1045:3:32608:32608	632119	1					
ANR	636648	IfStatement	"if ( findKeyword ( currentLine , charNum , AS_ASM ) || findKeyword ( currentLine , charNum , AS__ASM__ ) )"		632119	0					
ANR	636649	Condition	"findKeyword ( currentLine , charNum , AS_ASM ) || findKeyword ( currentLine , charNum , AS__ASM__ )"	1494:8:46166:46266	632119	0	True				
ANR	636650	OrExpression	"findKeyword ( currentLine , charNum , AS_ASM ) || findKeyword ( currentLine , charNum , AS__ASM__ )"		632119	0		||			
ANR	636651	CallExpression	"findKeyword ( currentLine , charNum , AS_ASM )"		632119	0					
ANR	636652	Callee	findKeyword		632119	0					
ANR	636653	Identifier	findKeyword		632119	0					
ANR	636654	ArgumentList	currentLine		632119	1					
ANR	636655	Argument	currentLine		632119	0					
ANR	636656	Identifier	currentLine		632119	0					
ANR	636657	Argument	charNum		632119	1					
ANR	636658	Identifier	charNum		632119	0					
ANR	636659	Argument	AS_ASM		632119	2					
ANR	636660	Identifier	AS_ASM		632119	0					
ANR	636661	CallExpression	"findKeyword ( currentLine , charNum , AS__ASM__ )"		632119	1					
ANR	636662	Callee	findKeyword		632119	0					
ANR	636663	Identifier	findKeyword		632119	0					
ANR	636664	ArgumentList	currentLine		632119	1					
ANR	636665	Argument	currentLine		632119	0					
ANR	636666	Identifier	currentLine		632119	0					
ANR	636667	Argument	charNum		632119	1					
ANR	636668	Identifier	charNum		632119	0					
ANR	636669	Argument	AS__ASM__		632119	2					
ANR	636670	Identifier	AS__ASM__		632119	0					
ANR	636671	CompoundStatement		1048:4:32725:32725	632119	1					
ANR	636672	ExpressionStatement	isInAsm = true	1497:5:46280:46294	632119	0	True				
ANR	636673	AssignmentExpression	isInAsm = true		632119	0		=			
ANR	636674	Identifier	isInAsm		632119	0					
ANR	636675	Identifier	true		632119	1					
ANR	636676	ElseStatement	else		632119	0					
ANR	636677	IfStatement	"if ( findKeyword ( currentLine , charNum , AS_MS_ASM ) || findKeyword ( currentLine , charNum , AS_MS__ASM ) )"		632119	0					
ANR	636678	Condition	"findKeyword ( currentLine , charNum , AS_MS_ASM ) || findKeyword ( currentLine , charNum , AS_MS__ASM )"	1499:13:46315:46443	632119	0	True				
ANR	636679	OrExpression	"findKeyword ( currentLine , charNum , AS_MS_ASM ) || findKeyword ( currentLine , charNum , AS_MS__ASM )"		632119	0		||			
ANR	636680	CallExpression	"findKeyword ( currentLine , charNum , AS_MS_ASM )"		632119	0					
ANR	636681	Callee	findKeyword		632119	0					
ANR	636682	Identifier	findKeyword		632119	0					
ANR	636683	ArgumentList	currentLine		632119	1					
ANR	636684	Argument	currentLine		632119	0					
ANR	636685	Identifier	currentLine		632119	0					
ANR	636686	Argument	charNum		632119	1					
ANR	636687	Identifier	charNum		632119	0					
ANR	636688	Argument	AS_MS_ASM		632119	2					
ANR	636689	Identifier	AS_MS_ASM		632119	0					
ANR	636690	CallExpression	"findKeyword ( currentLine , charNum , AS_MS__ASM )"		632119	1					
ANR	636691	Callee	findKeyword		632119	0					
ANR	636692	Identifier	findKeyword		632119	0					
ANR	636693	ArgumentList	currentLine		632119	1					
ANR	636694	Argument	currentLine		632119	0					
ANR	636695	Identifier	currentLine		632119	0					
ANR	636696	Argument	charNum		632119	1					
ANR	636697	Identifier	charNum		632119	0					
ANR	636698	Argument	AS_MS__ASM		632119	2					
ANR	636699	Identifier	AS_MS__ASM		632119	0					
ANR	636700	CompoundStatement		1058:5:32998:33066	632119	1					
ANR	636701	IdentifierDeclStatement	int index = 4 ;	1502:5:46457:46470	632119	0	True				
ANR	636702	IdentifierDecl	index = 4		632119	0					
ANR	636703	IdentifierDeclType	int		632119	0					
ANR	636704	Identifier	index		632119	1					
ANR	636705	AssignmentExpression	index = 4		632119	2		=			
ANR	636706	Identifier	index		632119	0					
ANR	636707	PrimaryExpression	4		632119	1					
ANR	636708	IfStatement	if ( peekNextChar ( ) == '_' )		632119	1					
ANR	636709	Condition	peekNextChar ( ) == '_'	1503:9:46481:46501	632119	0	True				
ANR	636710	EqualityExpression	peekNextChar ( ) == '_'		632119	0		==			
ANR	636711	CallExpression	peekNextChar ( )		632119	0					
ANR	636712	Callee	peekNextChar		632119	0					
ANR	636713	Identifier	peekNextChar		632119	0					
ANR	636714	ArgumentList			632119	1					
ANR	636715	PrimaryExpression	'_'		632119	1					
ANR	636716	ExpressionStatement	index = 5	1504:6:46529:46538	632119	1	True				
ANR	636717	AssignmentExpression	index = 5		632119	0		=			
ANR	636718	Identifier	index		632119	0					
ANR	636719	PrimaryExpression	5		632119	1					
ANR	636720	IdentifierDeclStatement	"char peekedChar = ASBase :: peekNextChar ( currentLine , charNum + index ) ;"	1506:5:46546:46614	632119	2	True				
ANR	636721	IdentifierDecl	"peekedChar = ASBase :: peekNextChar ( currentLine , charNum + index )"		632119	0					
ANR	636722	IdentifierDeclType	char		632119	0					
ANR	636723	Identifier	peekedChar		632119	1					
ANR	636724	AssignmentExpression	"peekedChar = ASBase :: peekNextChar ( currentLine , charNum + index )"		632119	2		=			
ANR	636725	Identifier	peekedChar		632119	0					
ANR	636726	CallExpression	"ASBase :: peekNextChar ( currentLine , charNum + index )"		632119	1					
ANR	636727	Callee	ASBase :: peekNextChar		632119	0					
ANR	636728	Identifier	ASBase :: peekNextChar		632119	0					
ANR	636729	ArgumentList	currentLine		632119	1					
ANR	636730	Argument	currentLine		632119	0					
ANR	636731	Identifier	currentLine		632119	0					
ANR	636732	Argument	charNum + index		632119	1					
ANR	636733	AdditiveExpression	charNum + index		632119	0		+			
ANR	636734	Identifier	charNum		632119	0					
ANR	636735	Identifier	index		632119	1					
ANR	636736	IfStatement	if ( peekedChar == '{' || peekedChar == ' ' )		632119	3					
ANR	636737	Condition	peekedChar == '{' || peekedChar == ' '	1507:9:46625:46662	632119	0	True				
ANR	636738	OrExpression	peekedChar == '{' || peekedChar == ' '		632119	0		||			
ANR	636739	EqualityExpression	peekedChar == '{'		632119	0		==			
ANR	636740	Identifier	peekedChar		632119	0					
ANR	636741	PrimaryExpression	'{'		632119	1					
ANR	636742	EqualityExpression	peekedChar == ' '		632119	1		==			
ANR	636743	Identifier	peekedChar		632119	0					
ANR	636744	PrimaryExpression	' '		632119	1					
ANR	636745	ExpressionStatement	isInAsmBlock = true	1508:6:46671:46690	632119	1	True				
ANR	636746	AssignmentExpression	isInAsmBlock = true		632119	0		=			
ANR	636747	Identifier	isInAsmBlock		632119	0					
ANR	636748	Identifier	true		632119	1					
ANR	636749	ElseStatement	else		632119	0					
ANR	636750	ExpressionStatement	isInAsmOneLine = true	1510:6:46708:46729	632119	0	True				
ANR	636751	AssignmentExpression	isInAsmOneLine = true		632119	0		=			
ANR	636752	Identifier	isInAsmOneLine		632119	0					
ANR	636753	Identifier	true		632119	1					
ANR	636754	IfStatement	"if ( isJavaStyle ( ) && ( findKeyword ( currentLine , charNum , AS_STATIC ) && isNextCharOpeningBrace ( charNum + 6 ) ) )"		632119	11					
ANR	636755	Condition	"isJavaStyle ( ) && ( findKeyword ( currentLine , charNum , AS_STATIC ) && isNextCharOpeningBrace ( charNum + 6 ) )"	1514:7:46750:46877	632119	0	True				
ANR	636756	AndExpression	"isJavaStyle ( ) && ( findKeyword ( currentLine , charNum , AS_STATIC ) && isNextCharOpeningBrace ( charNum + 6 ) )"		632119	0		&&			
ANR	636757	CallExpression	isJavaStyle ( )		632119	0					
ANR	636758	Callee	isJavaStyle		632119	0					
ANR	636759	Identifier	isJavaStyle		632119	0					
ANR	636760	ArgumentList			632119	1					
ANR	636761	AndExpression	"findKeyword ( currentLine , charNum , AS_STATIC ) && isNextCharOpeningBrace ( charNum + 6 )"		632119	1		&&			
ANR	636762	CallExpression	"findKeyword ( currentLine , charNum , AS_STATIC )"		632119	0					
ANR	636763	Callee	findKeyword		632119	0					
ANR	636764	Identifier	findKeyword		632119	0					
ANR	636765	ArgumentList	currentLine		632119	1					
ANR	636766	Argument	currentLine		632119	0					
ANR	636767	Identifier	currentLine		632119	0					
ANR	636768	Argument	charNum		632119	1					
ANR	636769	Identifier	charNum		632119	0					
ANR	636770	Argument	AS_STATIC		632119	2					
ANR	636771	Identifier	AS_STATIC		632119	0					
ANR	636772	CallExpression	isNextCharOpeningBrace ( charNum + 6 )		632119	1					
ANR	636773	Callee	isNextCharOpeningBrace		632119	0					
ANR	636774	Identifier	isNextCharOpeningBrace		632119	0					
ANR	636775	ArgumentList	charNum + 6		632119	1					
ANR	636776	Argument	charNum + 6		632119	0					
ANR	636777	AdditiveExpression	charNum + 6		632119	0		+			
ANR	636778	Identifier	charNum		632119	0					
ANR	636779	PrimaryExpression	6		632119	1					
ANR	636780	ExpressionStatement	isJavaStaticConstructor = true	1517:4:46884:46914	632119	1	True				
ANR	636781	AssignmentExpression	isJavaStaticConstructor = true		632119	0		=			
ANR	636782	Identifier	isJavaStaticConstructor		632119	0					
ANR	636783	Identifier	true		632119	1					
ANR	636784	IfStatement	"if ( isSharpStyle ( ) && ( findKeyword ( currentLine , charNum , AS_DELEGATE ) || findKeyword ( currentLine , charNum , AS_UNCHECKED ) ) )"		632119	12					
ANR	636785	Condition	"isSharpStyle ( ) && ( findKeyword ( currentLine , charNum , AS_DELEGATE ) || findKeyword ( currentLine , charNum , AS_UNCHECKED ) )"	1519:7:46924:47066	632119	0	True				
ANR	636786	AndExpression	"isSharpStyle ( ) && ( findKeyword ( currentLine , charNum , AS_DELEGATE ) || findKeyword ( currentLine , charNum , AS_UNCHECKED ) )"		632119	0		&&			
ANR	636787	CallExpression	isSharpStyle ( )		632119	0					
ANR	636788	Callee	isSharpStyle		632119	0					
ANR	636789	Identifier	isSharpStyle		632119	0					
ANR	636790	ArgumentList			632119	1					
ANR	636791	OrExpression	"findKeyword ( currentLine , charNum , AS_DELEGATE ) || findKeyword ( currentLine , charNum , AS_UNCHECKED )"		632119	1		||			
ANR	636792	CallExpression	"findKeyword ( currentLine , charNum , AS_DELEGATE )"		632119	0					
ANR	636793	Callee	findKeyword		632119	0					
ANR	636794	Identifier	findKeyword		632119	0					
ANR	636795	ArgumentList	currentLine		632119	1					
ANR	636796	Argument	currentLine		632119	0					
ANR	636797	Identifier	currentLine		632119	0					
ANR	636798	Argument	charNum		632119	1					
ANR	636799	Identifier	charNum		632119	0					
ANR	636800	Argument	AS_DELEGATE		632119	2					
ANR	636801	Identifier	AS_DELEGATE		632119	0					
ANR	636802	CallExpression	"findKeyword ( currentLine , charNum , AS_UNCHECKED )"		632119	1					
ANR	636803	Callee	findKeyword		632119	0					
ANR	636804	Identifier	findKeyword		632119	0					
ANR	636805	ArgumentList	currentLine		632119	1					
ANR	636806	Argument	currentLine		632119	0					
ANR	636807	Identifier	currentLine		632119	0					
ANR	636808	Argument	charNum		632119	1					
ANR	636809	Identifier	charNum		632119	0					
ANR	636810	Argument	AS_UNCHECKED		632119	2					
ANR	636811	Identifier	AS_UNCHECKED		632119	0					
ANR	636812	ExpressionStatement	isSharpDelegate = true	1522:4:47073:47095	632119	1	True				
ANR	636813	AssignmentExpression	isSharpDelegate = true		632119	0		=			
ANR	636814	Identifier	isSharpDelegate		632119	0					
ANR	636815	Identifier	true		632119	1					
ANR	636816	IdentifierDeclStatement	"string name = getCurrentWord ( currentLine , charNum ) ;"	1525:3:47130:47180	632119	13	True				
ANR	636817	IdentifierDecl	"name = getCurrentWord ( currentLine , charNum )"		632119	0					
ANR	636818	IdentifierDeclType	string		632119	0					
ANR	636819	Identifier	name		632119	1					
ANR	636820	AssignmentExpression	"name = getCurrentWord ( currentLine , charNum )"		632119	2		=			
ANR	636821	Identifier	name		632119	0					
ANR	636822	CallExpression	"getCurrentWord ( currentLine , charNum )"		632119	1					
ANR	636823	Callee	getCurrentWord		632119	0					
ANR	636824	Identifier	getCurrentWord		632119	0					
ANR	636825	ArgumentList	currentLine		632119	1					
ANR	636826	Argument	currentLine		632119	0					
ANR	636827	Identifier	currentLine		632119	0					
ANR	636828	Argument	charNum		632119	1					
ANR	636829	Identifier	charNum		632119	0					
ANR	636830	IfStatement	"if ( name == ""and"" || name == ""or"" )"		632119	14					
ANR	636831	Condition	"name == ""and"" || name == ""or"""	1527:7:47245:47273	632119	0	True				
ANR	636832	OrExpression	"name == ""and"" || name == ""or"""		632119	0		||			
ANR	636833	EqualityExpression	"name == ""and"""		632119	0		==			
ANR	636834	Identifier	name		632119	0					
ANR	636835	PrimaryExpression	"""and"""		632119	1					
ANR	636836	EqualityExpression	"name == ""or"""		632119	1		==			
ANR	636837	Identifier	name		632119	0					
ANR	636838	PrimaryExpression	"""or"""		632119	1					
ANR	636839	CompoundStatement		1080:3:33731:33731	632119	1					
ANR	636840	IfStatement	if ( shouldPadOperators && previousNonWSChar != ':' )		632119	0					
ANR	636841	Condition	shouldPadOperators && previousNonWSChar != ':'	1529:8:47289:47334	632119	0	True				
ANR	636842	AndExpression	shouldPadOperators && previousNonWSChar != ':'		632119	0		&&			
ANR	636843	Identifier	shouldPadOperators		632119	0					
ANR	636844	EqualityExpression	previousNonWSChar != ':'		632119	1		!=			
ANR	636845	Identifier	previousNonWSChar		632119	0					
ANR	636846	PrimaryExpression	':'		632119	1					
ANR	636847	CompoundStatement		1082:4:33793:33793	632119	1					
ANR	636848	ExpressionStatement	appendSpacePad ( )	1531:5:47348:47364	632119	0	True				
ANR	636849	CallExpression	appendSpacePad ( )		632119	0					
ANR	636850	Callee	appendSpacePad		632119	0					
ANR	636851	Identifier	appendSpacePad		632119	0					
ANR	636852	ArgumentList			632119	1					
ANR	636853	ExpressionStatement	appendOperator ( name )	1532:5:47371:47391	632119	1	True				
ANR	636854	CallExpression	appendOperator ( name )		632119	0					
ANR	636855	Callee	appendOperator		632119	0					
ANR	636856	Identifier	appendOperator		632119	0					
ANR	636857	ArgumentList	name		632119	1					
ANR	636858	Argument	name		632119	0					
ANR	636859	Identifier	name		632119	0					
ANR	636860	ExpressionStatement	goForward ( name . length ( ) - 1 )	1533:5:47398:47426	632119	2	True				
ANR	636861	CallExpression	goForward ( name . length ( ) - 1 )		632119	0					
ANR	636862	Callee	goForward		632119	0					
ANR	636863	Identifier	goForward		632119	0					
ANR	636864	ArgumentList	name . length ( ) - 1		632119	1					
ANR	636865	Argument	name . length ( ) - 1		632119	0					
ANR	636866	AdditiveExpression	name . length ( ) - 1		632119	0		-			
ANR	636867	CallExpression	name . length ( )		632119	0					
ANR	636868	Callee	name . length		632119	0					
ANR	636869	MemberAccess	name . length		632119	0					
ANR	636870	Identifier	name		632119	0					
ANR	636871	Identifier	length		632119	1					
ANR	636872	ArgumentList			632119	1					
ANR	636873	PrimaryExpression	1		632119	1					
ANR	636874	IfStatement	"if ( ! isBeforeAnyComment ( ) && ! ( currentLine . compare ( charNum + 1 , 1 , AS_SEMICOLON ) == 0 ) && ! ( currentLine . compare ( charNum + 1 , 2 , AS_SCOPE_RESOLUTION ) == 0 ) )"		632119	3					
ANR	636875	Condition	"! isBeforeAnyComment ( ) && ! ( currentLine . compare ( charNum + 1 , 1 , AS_SEMICOLON ) == 0 ) && ! ( currentLine . compare ( charNum + 1 , 2 , AS_SCOPE_RESOLUTION ) == 0 )"	1534:9:47437:47612	632119	0	True				
ANR	636876	AndExpression	"! isBeforeAnyComment ( ) && ! ( currentLine . compare ( charNum + 1 , 1 , AS_SEMICOLON ) == 0 ) && ! ( currentLine . compare ( charNum + 1 , 2 , AS_SCOPE_RESOLUTION ) == 0 )"		632119	0		&&			
ANR	636877	UnaryOperationExpression	! isBeforeAnyComment ( )		632119	0					
ANR	636878	UnaryOperator	!		632119	0					
ANR	636879	CallExpression	isBeforeAnyComment ( )		632119	1					
ANR	636880	Callee	isBeforeAnyComment		632119	0					
ANR	636881	Identifier	isBeforeAnyComment		632119	0					
ANR	636882	ArgumentList			632119	1					
ANR	636883	AndExpression	"! ( currentLine . compare ( charNum + 1 , 1 , AS_SEMICOLON ) == 0 ) && ! ( currentLine . compare ( charNum + 1 , 2 , AS_SCOPE_RESOLUTION ) == 0 )"		632119	1		&&			
ANR	636884	UnaryOperationExpression	"! ( currentLine . compare ( charNum + 1 , 1 , AS_SEMICOLON ) == 0 )"		632119	0					
ANR	636885	UnaryOperator	!		632119	0					
ANR	636886	EqualityExpression	"currentLine . compare ( charNum + 1 , 1 , AS_SEMICOLON ) == 0"		632119	1		==			
ANR	636887	CallExpression	"currentLine . compare ( charNum + 1 , 1 , AS_SEMICOLON )"		632119	0					
ANR	636888	Callee	currentLine . compare		632119	0					
ANR	636889	MemberAccess	currentLine . compare		632119	0					
ANR	636890	Identifier	currentLine		632119	0					
ANR	636891	Identifier	compare		632119	1					
ANR	636892	ArgumentList	charNum + 1		632119	1					
ANR	636893	Argument	charNum + 1		632119	0					
ANR	636894	AdditiveExpression	charNum + 1		632119	0		+			
ANR	636895	Identifier	charNum		632119	0					
ANR	636896	PrimaryExpression	1		632119	1					
ANR	636897	Argument	1		632119	1					
ANR	636898	PrimaryExpression	1		632119	0					
ANR	636899	Argument	AS_SEMICOLON		632119	2					
ANR	636900	Identifier	AS_SEMICOLON		632119	0					
ANR	636901	PrimaryExpression	0		632119	1					
ANR	636902	UnaryOperationExpression	"! ( currentLine . compare ( charNum + 1 , 2 , AS_SCOPE_RESOLUTION ) == 0 )"		632119	1					
ANR	636903	UnaryOperator	!		632119	0					
ANR	636904	EqualityExpression	"currentLine . compare ( charNum + 1 , 2 , AS_SCOPE_RESOLUTION ) == 0"		632119	1		==			
ANR	636905	CallExpression	"currentLine . compare ( charNum + 1 , 2 , AS_SCOPE_RESOLUTION )"		632119	0					
ANR	636906	Callee	currentLine . compare		632119	0					
ANR	636907	MemberAccess	currentLine . compare		632119	0					
ANR	636908	Identifier	currentLine		632119	0					
ANR	636909	Identifier	compare		632119	1					
ANR	636910	ArgumentList	charNum + 1		632119	1					
ANR	636911	Argument	charNum + 1		632119	0					
ANR	636912	AdditiveExpression	charNum + 1		632119	0		+			
ANR	636913	Identifier	charNum		632119	0					
ANR	636914	PrimaryExpression	1		632119	1					
ANR	636915	Argument	2		632119	1					
ANR	636916	PrimaryExpression	2		632119	0					
ANR	636917	Argument	AS_SCOPE_RESOLUTION		632119	2					
ANR	636918	Identifier	AS_SCOPE_RESOLUTION		632119	0					
ANR	636919	PrimaryExpression	0		632119	1					
ANR	636920	ExpressionStatement	appendSpaceAfter ( )	1537:6:47621:47639	632119	1	True				
ANR	636921	CallExpression	appendSpaceAfter ( )		632119	0					
ANR	636922	Callee	appendSpaceAfter		632119	0					
ANR	636923	Identifier	appendSpaceAfter		632119	0					
ANR	636924	ArgumentList			632119	1					
ANR	636925	ElseStatement	else		632119	0					
ANR	636926	CompoundStatement		1092:4:34112:34112	632119	0					
ANR	636927	ExpressionStatement	appendOperator ( name )	1541:5:47667:47687	632119	0	True				
ANR	636928	CallExpression	appendOperator ( name )		632119	0					
ANR	636929	Callee	appendOperator		632119	0					
ANR	636930	Identifier	appendOperator		632119	0					
ANR	636931	ArgumentList	name		632119	1					
ANR	636932	Argument	name		632119	0					
ANR	636933	Identifier	name		632119	0					
ANR	636934	ExpressionStatement	goForward ( name . length ( ) - 1 )	1542:5:47694:47722	632119	1	True				
ANR	636935	CallExpression	goForward ( name . length ( ) - 1 )		632119	0					
ANR	636936	Callee	goForward		632119	0					
ANR	636937	Identifier	goForward		632119	0					
ANR	636938	ArgumentList	name . length ( ) - 1		632119	1					
ANR	636939	Argument	name . length ( ) - 1		632119	0					
ANR	636940	AdditiveExpression	name . length ( ) - 1		632119	0		-			
ANR	636941	CallExpression	name . length ( )		632119	0					
ANR	636942	Callee	name . length		632119	0					
ANR	636943	MemberAccess	name . length		632119	0					
ANR	636944	Identifier	name		632119	0					
ANR	636945	Identifier	length		632119	1					
ANR	636946	ArgumentList			632119	1					
ANR	636947	PrimaryExpression	1		632119	1					
ANR	636948	ElseStatement	else		632119	0					
ANR	636949	CompoundStatement		1098:3:34198:34198	632119	0					
ANR	636950	ExpressionStatement	appendSequence ( name )	1547:4:47752:47772	632119	0	True				
ANR	636951	CallExpression	appendSequence ( name )		632119	0					
ANR	636952	Callee	appendSequence		632119	0					
ANR	636953	Identifier	appendSequence		632119	0					
ANR	636954	ArgumentList	name		632119	1					
ANR	636955	Argument	name		632119	0					
ANR	636956	Identifier	name		632119	0					
ANR	636957	ExpressionStatement	goForward ( name . length ( ) - 1 )	1548:4:47778:47806	632119	1	True				
ANR	636958	CallExpression	goForward ( name . length ( ) - 1 )		632119	0					
ANR	636959	Callee	goForward		632119	0					
ANR	636960	Identifier	goForward		632119	0					
ANR	636961	ArgumentList	name . length ( ) - 1		632119	1					
ANR	636962	Argument	name . length ( ) - 1		632119	0					
ANR	636963	AdditiveExpression	name . length ( ) - 1		632119	0		-			
ANR	636964	CallExpression	name . length ( )		632119	0					
ANR	636965	Callee	name . length		632119	0					
ANR	636966	MemberAccess	name . length		632119	0					
ANR	636967	Identifier	name		632119	0					
ANR	636968	Identifier	length		632119	1					
ANR	636969	ArgumentList			632119	1					
ANR	636970	PrimaryExpression	1		632119	1					
ANR	636971	ContinueStatement	continue ;	1551:3:47817:47825	632119	15	True				
ANR	636972	IfStatement	"if ( currentChar == '@' && isCharPotentialHeader ( currentLine , charNum + 1 ) && findKeyword ( currentLine , charNum + 1 , AS_INTERFACE ) && isBraceType ( braceTypeStack -> back ( ) , NULL_TYPE ) )"		632119	36					
ANR	636973	Condition	"currentChar == '@' && isCharPotentialHeader ( currentLine , charNum + 1 ) && findKeyword ( currentLine , charNum + 1 , AS_INTERFACE ) && isBraceType ( braceTypeStack -> back ( ) , NULL_TYPE )"	1557:6:47934:48137	632119	0	True				
ANR	636974	AndExpression	"currentChar == '@' && isCharPotentialHeader ( currentLine , charNum + 1 ) && findKeyword ( currentLine , charNum + 1 , AS_INTERFACE ) && isBraceType ( braceTypeStack -> back ( ) , NULL_TYPE )"		632119	0		&&			
ANR	636975	EqualityExpression	currentChar == '@'		632119	0		==			
ANR	636976	Identifier	currentChar		632119	0					
ANR	636977	PrimaryExpression	'@'		632119	1					
ANR	636978	AndExpression	"isCharPotentialHeader ( currentLine , charNum + 1 ) && findKeyword ( currentLine , charNum + 1 , AS_INTERFACE ) && isBraceType ( braceTypeStack -> back ( ) , NULL_TYPE )"		632119	1		&&			
ANR	636979	CallExpression	"isCharPotentialHeader ( currentLine , charNum + 1 )"		632119	0					
ANR	636980	Callee	isCharPotentialHeader		632119	0					
ANR	636981	Identifier	isCharPotentialHeader		632119	0					
ANR	636982	ArgumentList	currentLine		632119	1					
ANR	636983	Argument	currentLine		632119	0					
ANR	636984	Identifier	currentLine		632119	0					
ANR	636985	Argument	charNum + 1		632119	1					
ANR	636986	AdditiveExpression	charNum + 1		632119	0		+			
ANR	636987	Identifier	charNum		632119	0					
ANR	636988	PrimaryExpression	1		632119	1					
ANR	636989	AndExpression	"findKeyword ( currentLine , charNum + 1 , AS_INTERFACE ) && isBraceType ( braceTypeStack -> back ( ) , NULL_TYPE )"		632119	1		&&			
ANR	636990	CallExpression	"findKeyword ( currentLine , charNum + 1 , AS_INTERFACE )"		632119	0					
ANR	636991	Callee	findKeyword		632119	0					
ANR	636992	Identifier	findKeyword		632119	0					
ANR	636993	ArgumentList	currentLine		632119	1					
ANR	636994	Argument	currentLine		632119	0					
ANR	636995	Identifier	currentLine		632119	0					
ANR	636996	Argument	charNum + 1		632119	1					
ANR	636997	AdditiveExpression	charNum + 1		632119	0		+			
ANR	636998	Identifier	charNum		632119	0					
ANR	636999	PrimaryExpression	1		632119	1					
ANR	637000	Argument	AS_INTERFACE		632119	2					
ANR	637001	Identifier	AS_INTERFACE		632119	0					
ANR	637002	CallExpression	"isBraceType ( braceTypeStack -> back ( ) , NULL_TYPE )"		632119	1					
ANR	637003	Callee	isBraceType		632119	0					
ANR	637004	Identifier	isBraceType		632119	0					
ANR	637005	ArgumentList	braceTypeStack -> back ( )		632119	1					
ANR	637006	Argument	braceTypeStack -> back ( )		632119	0					
ANR	637007	CallExpression	braceTypeStack -> back ( )		632119	0					
ANR	637008	Callee	braceTypeStack -> back		632119	0					
ANR	637009	PtrMemberAccess	braceTypeStack -> back		632119	0					
ANR	637010	Identifier	braceTypeStack		632119	0					
ANR	637011	Identifier	back		632119	1					
ANR	637012	ArgumentList			632119	1					
ANR	637013	Argument	NULL_TYPE		632119	1					
ANR	637014	Identifier	NULL_TYPE		632119	0					
ANR	637015	CompoundStatement		1115:3:34628:34660	632119	1					
ANR	637016	ExpressionStatement	isInObjCInterface = true	1562:3:48147:48171	632119	0	True				
ANR	637017	AssignmentExpression	isInObjCInterface = true		632119	0		=			
ANR	637018	Identifier	isInObjCInterface		632119	0					
ANR	637019	Identifier	true		632119	1					
ANR	637020	IdentifierDeclStatement	string name = '@' + AS_INTERFACE ;	1563:3:48176:48208	632119	1	True				
ANR	637021	IdentifierDecl	name = '@' + AS_INTERFACE		632119	0					
ANR	637022	IdentifierDeclType	string		632119	0					
ANR	637023	Identifier	name		632119	1					
ANR	637024	AssignmentExpression	name = '@' + AS_INTERFACE		632119	2		=			
ANR	637025	Identifier	name		632119	0					
ANR	637026	AdditiveExpression	'@' + AS_INTERFACE		632119	1		+			
ANR	637027	PrimaryExpression	'@'		632119	0					
ANR	637028	Identifier	AS_INTERFACE		632119	1					
ANR	637029	ExpressionStatement	appendSequence ( name )	1564:3:48213:48233	632119	2	True				
ANR	637030	CallExpression	appendSequence ( name )		632119	0					
ANR	637031	Callee	appendSequence		632119	0					
ANR	637032	Identifier	appendSequence		632119	0					
ANR	637033	ArgumentList	name		632119	1					
ANR	637034	Argument	name		632119	0					
ANR	637035	Identifier	name		632119	0					
ANR	637036	ExpressionStatement	goForward ( name . length ( ) - 1 )	1565:3:48238:48266	632119	3	True				
ANR	637037	CallExpression	goForward ( name . length ( ) - 1 )		632119	0					
ANR	637038	Callee	goForward		632119	0					
ANR	637039	Identifier	goForward		632119	0					
ANR	637040	ArgumentList	name . length ( ) - 1		632119	1					
ANR	637041	Argument	name . length ( ) - 1		632119	0					
ANR	637042	AdditiveExpression	name . length ( ) - 1		632119	0		-			
ANR	637043	CallExpression	name . length ( )		632119	0					
ANR	637044	Callee	name . length		632119	0					
ANR	637045	MemberAccess	name . length		632119	0					
ANR	637046	Identifier	name		632119	0					
ANR	637047	Identifier	length		632119	1					
ANR	637048	ArgumentList			632119	1					
ANR	637049	PrimaryExpression	1		632119	1					
ANR	637050	ContinueStatement	continue ;	1566:3:48271:48279	632119	4	True				
ANR	637051	ElseStatement	else		632119	0					
ANR	637052	IfStatement	"if ( currentChar == '@' && isCharPotentialHeader ( currentLine , charNum + 1 ) && findKeyword ( currentLine , charNum + 1 , AS_SELECTOR ) )"		632119	0					
ANR	637053	Condition	"currentChar == '@' && isCharPotentialHeader ( currentLine , charNum + 1 ) && findKeyword ( currentLine , charNum + 1 , AS_SELECTOR )"	1568:11:48296:48440	632119	0	True				
ANR	637054	AndExpression	"currentChar == '@' && isCharPotentialHeader ( currentLine , charNum + 1 ) && findKeyword ( currentLine , charNum + 1 , AS_SELECTOR )"		632119	0		&&			
ANR	637055	EqualityExpression	currentChar == '@'		632119	0		==			
ANR	637056	Identifier	currentChar		632119	0					
ANR	637057	PrimaryExpression	'@'		632119	1					
ANR	637058	AndExpression	"isCharPotentialHeader ( currentLine , charNum + 1 ) && findKeyword ( currentLine , charNum + 1 , AS_SELECTOR )"		632119	1		&&			
ANR	637059	CallExpression	"isCharPotentialHeader ( currentLine , charNum + 1 )"		632119	0					
ANR	637060	Callee	isCharPotentialHeader		632119	0					
ANR	637061	Identifier	isCharPotentialHeader		632119	0					
ANR	637062	ArgumentList	currentLine		632119	1					
ANR	637063	Argument	currentLine		632119	0					
ANR	637064	Identifier	currentLine		632119	0					
ANR	637065	Argument	charNum + 1		632119	1					
ANR	637066	AdditiveExpression	charNum + 1		632119	0		+			
ANR	637067	Identifier	charNum		632119	0					
ANR	637068	PrimaryExpression	1		632119	1					
ANR	637069	CallExpression	"findKeyword ( currentLine , charNum + 1 , AS_SELECTOR )"		632119	1					
ANR	637070	Callee	findKeyword		632119	0					
ANR	637071	Identifier	findKeyword		632119	0					
ANR	637072	ArgumentList	currentLine		632119	1					
ANR	637073	Argument	currentLine		632119	0					
ANR	637074	Identifier	currentLine		632119	0					
ANR	637075	Argument	charNum + 1		632119	1					
ANR	637076	AdditiveExpression	charNum + 1		632119	0		+			
ANR	637077	Identifier	charNum		632119	0					
ANR	637078	PrimaryExpression	1		632119	1					
ANR	637079	Argument	AS_SELECTOR		632119	2					
ANR	637080	Identifier	AS_SELECTOR		632119	0					
ANR	637081	CompoundStatement		1125:3:34930:34961	632119	1					
ANR	637082	ExpressionStatement	isInObjCSelector = true	1572:3:48450:48473	632119	0	True				
ANR	637083	AssignmentExpression	isInObjCSelector = true		632119	0		=			
ANR	637084	Identifier	isInObjCSelector		632119	0					
ANR	637085	Identifier	true		632119	1					
ANR	637086	IdentifierDeclStatement	string name = '@' + AS_SELECTOR ;	1573:3:48478:48509	632119	1	True				
ANR	637087	IdentifierDecl	name = '@' + AS_SELECTOR		632119	0					
ANR	637088	IdentifierDeclType	string		632119	0					
ANR	637089	Identifier	name		632119	1					
ANR	637090	AssignmentExpression	name = '@' + AS_SELECTOR		632119	2		=			
ANR	637091	Identifier	name		632119	0					
ANR	637092	AdditiveExpression	'@' + AS_SELECTOR		632119	1		+			
ANR	637093	PrimaryExpression	'@'		632119	0					
ANR	637094	Identifier	AS_SELECTOR		632119	1					
ANR	637095	ExpressionStatement	appendSequence ( name )	1574:3:48514:48534	632119	2	True				
ANR	637096	CallExpression	appendSequence ( name )		632119	0					
ANR	637097	Callee	appendSequence		632119	0					
ANR	637098	Identifier	appendSequence		632119	0					
ANR	637099	ArgumentList	name		632119	1					
ANR	637100	Argument	name		632119	0					
ANR	637101	Identifier	name		632119	0					
ANR	637102	ExpressionStatement	goForward ( name . length ( ) - 1 )	1575:3:48539:48567	632119	3	True				
ANR	637103	CallExpression	goForward ( name . length ( ) - 1 )		632119	0					
ANR	637104	Callee	goForward		632119	0					
ANR	637105	Identifier	goForward		632119	0					
ANR	637106	ArgumentList	name . length ( ) - 1		632119	1					
ANR	637107	Argument	name . length ( ) - 1		632119	0					
ANR	637108	AdditiveExpression	name . length ( ) - 1		632119	0		-			
ANR	637109	CallExpression	name . length ( )		632119	0					
ANR	637110	Callee	name . length		632119	0					
ANR	637111	MemberAccess	name . length		632119	0					
ANR	637112	Identifier	name		632119	0					
ANR	637113	Identifier	length		632119	1					
ANR	637114	ArgumentList			632119	1					
ANR	637115	PrimaryExpression	1		632119	1					
ANR	637116	ContinueStatement	continue ;	1576:3:48572:48580	632119	4	True				
ANR	637117	ElseStatement	else		632119	0					
ANR	637118	IfStatement	"if ( ( currentChar == '-' || currentChar == '+' ) && ( int ) currentLine . find_first_not_of ( "" \\t"" ) == charNum && peekNextChar ( ) == '(' && isBraceType ( braceTypeStack -> back ( ) , NULL_TYPE ) && ! isInPotentialCalculation )"		632119	0					
ANR	637119	Condition	"( currentChar == '-' || currentChar == '+' ) && ( int ) currentLine . find_first_not_of ( "" \\t"" ) == charNum && peekNextChar ( ) == '(' && isBraceType ( braceTypeStack -> back ( ) , NULL_TYPE ) && ! isInPotentialCalculation"	1578:11:48597:48843	632119	0	True				
ANR	637120	AndExpression	"( currentChar == '-' || currentChar == '+' ) && ( int ) currentLine . find_first_not_of ( "" \\t"" ) == charNum && peekNextChar ( ) == '(' && isBraceType ( braceTypeStack -> back ( ) , NULL_TYPE ) && ! isInPotentialCalculation"		632119	0		&&			
ANR	637121	OrExpression	currentChar == '-' || currentChar == '+'		632119	0		||			
ANR	637122	EqualityExpression	currentChar == '-'		632119	0		==			
ANR	637123	Identifier	currentChar		632119	0					
ANR	637124	PrimaryExpression	'-'		632119	1					
ANR	637125	EqualityExpression	currentChar == '+'		632119	1		==			
ANR	637126	Identifier	currentChar		632119	0					
ANR	637127	PrimaryExpression	'+'		632119	1					
ANR	637128	AndExpression	"( int ) currentLine . find_first_not_of ( "" \\t"" ) == charNum && peekNextChar ( ) == '(' && isBraceType ( braceTypeStack -> back ( ) , NULL_TYPE ) && ! isInPotentialCalculation"		632119	1		&&			
ANR	637129	EqualityExpression	"( int ) currentLine . find_first_not_of ( "" \\t"" ) == charNum"		632119	0		==			
ANR	637130	CastExpression	"( int ) currentLine . find_first_not_of ( "" \\t"" )"		632119	0					
ANR	637131	CastTarget	int		632119	0					
ANR	637132	CallExpression	"currentLine . find_first_not_of ( "" \\t"" )"		632119	1					
ANR	637133	Callee	currentLine . find_first_not_of		632119	0					
ANR	637134	MemberAccess	currentLine . find_first_not_of		632119	0					
ANR	637135	Identifier	currentLine		632119	0					
ANR	637136	Identifier	find_first_not_of		632119	1					
ANR	637137	ArgumentList	""" \\t"""		632119	1					
ANR	637138	Argument	""" \\t"""		632119	0					
ANR	637139	PrimaryExpression	""" \\t"""		632119	0					
ANR	637140	Identifier	charNum		632119	1					
ANR	637141	AndExpression	"peekNextChar ( ) == '(' && isBraceType ( braceTypeStack -> back ( ) , NULL_TYPE ) && ! isInPotentialCalculation"		632119	1		&&			
ANR	637142	EqualityExpression	peekNextChar ( ) == '('		632119	0		==			
ANR	637143	CallExpression	peekNextChar ( )		632119	0					
ANR	637144	Callee	peekNextChar		632119	0					
ANR	637145	Identifier	peekNextChar		632119	0					
ANR	637146	ArgumentList			632119	1					
ANR	637147	PrimaryExpression	'('		632119	1					
ANR	637148	AndExpression	"isBraceType ( braceTypeStack -> back ( ) , NULL_TYPE ) && ! isInPotentialCalculation"		632119	1		&&			
ANR	637149	CallExpression	"isBraceType ( braceTypeStack -> back ( ) , NULL_TYPE )"		632119	0					
ANR	637150	Callee	isBraceType		632119	0					
ANR	637151	Identifier	isBraceType		632119	0					
ANR	637152	ArgumentList	braceTypeStack -> back ( )		632119	1					
ANR	637153	Argument	braceTypeStack -> back ( )		632119	0					
ANR	637154	CallExpression	braceTypeStack -> back ( )		632119	0					
ANR	637155	Callee	braceTypeStack -> back		632119	0					
ANR	637156	PtrMemberAccess	braceTypeStack -> back		632119	0					
ANR	637157	Identifier	braceTypeStack		632119	0					
ANR	637158	Identifier	back		632119	1					
ANR	637159	ArgumentList			632119	1					
ANR	637160	Argument	NULL_TYPE		632119	1					
ANR	637161	Identifier	NULL_TYPE		632119	0					
ANR	637162	UnaryOperationExpression	! isInPotentialCalculation		632119	1					
ANR	637163	UnaryOperator	!		632119	0					
ANR	637164	Identifier	isInPotentialCalculation		632119	1					
ANR	637165	CompoundStatement		1135:2:35300:35300	632119	1					
ANR	637166	ExpressionStatement	isInObjCMethodDefinition = true	1584:3:48853:48884	632119	0	True				
ANR	637167	AssignmentExpression	isInObjCMethodDefinition = true		632119	0		=			
ANR	637168	Identifier	isInObjCMethodDefinition		632119	0					
ANR	637169	Identifier	true		632119	1					
ANR	637170	ExpressionStatement	isImmediatelyPostObjCMethodPrefix = true	1585:3:48889:48929	632119	1	True				
ANR	637171	AssignmentExpression	isImmediatelyPostObjCMethodPrefix = true		632119	0		=			
ANR	637172	Identifier	isImmediatelyPostObjCMethodPrefix		632119	0					
ANR	637173	Identifier	true		632119	1					
ANR	637174	ExpressionStatement	isInObjCInterface = false	1586:3:48934:48959	632119	2	True				
ANR	637175	AssignmentExpression	isInObjCInterface = false		632119	0		=			
ANR	637176	Identifier	isInObjCInterface		632119	0					
ANR	637177	Identifier	false		632119	1					
ANR	637178	IfStatement	if ( getAlignMethodColon ( ) )		632119	3					
ANR	637179	Condition	getAlignMethodColon ( )	1587:7:48968:48988	632119	0	True				
ANR	637180	CallExpression	getAlignMethodColon ( )		632119	0					
ANR	637181	Callee	getAlignMethodColon		632119	0					
ANR	637182	Identifier	getAlignMethodColon		632119	0					
ANR	637183	ArgumentList			632119	1					
ANR	637184	ExpressionStatement	objCColonAlign = findObjCColonAlignment ( )	1588:4:48995:49036	632119	1	True				
ANR	637185	AssignmentExpression	objCColonAlign = findObjCColonAlignment ( )		632119	0		=			
ANR	637186	Identifier	objCColonAlign		632119	0					
ANR	637187	CallExpression	findObjCColonAlignment ( )		632119	1					
ANR	637188	Callee	findObjCColonAlignment		632119	0					
ANR	637189	Identifier	findObjCColonAlignment		632119	0					
ANR	637190	ArgumentList			632119	1					
ANR	637191	ExpressionStatement	appendCurrentChar ( )	1589:3:49041:49060	632119	4	True				
ANR	637192	CallExpression	appendCurrentChar ( )		632119	0					
ANR	637193	Callee	appendCurrentChar		632119	0					
ANR	637194	Identifier	appendCurrentChar		632119	0					
ANR	637195	ArgumentList			632119	1					
ANR	637196	ContinueStatement	continue ;	1590:3:49065:49073	632119	5	True				
ANR	637197	IdentifierDeclStatement	bool isPotentialOperator = isCharPotentialOperator ( currentChar ) ;	1595:2:49133:49196	632119	37	True				
ANR	637198	IdentifierDecl	isPotentialOperator = isCharPotentialOperator ( currentChar )		632119	0					
ANR	637199	IdentifierDeclType	bool		632119	0					
ANR	637200	Identifier	isPotentialOperator		632119	1					
ANR	637201	AssignmentExpression	isPotentialOperator = isCharPotentialOperator ( currentChar )		632119	2		=			
ANR	637202	Identifier	isPotentialOperator		632119	0					
ANR	637203	CallExpression	isCharPotentialOperator ( currentChar )		632119	1					
ANR	637204	Callee	isCharPotentialOperator		632119	0					
ANR	637205	Identifier	isCharPotentialOperator		632119	0					
ANR	637206	ArgumentList	currentChar		632119	1					
ANR	637207	Argument	currentChar		632119	0					
ANR	637208	Identifier	currentChar		632119	0					
ANR	637209	ExpressionStatement	newHeader = nullptr	1596:2:49200:49219	632119	38	True				
ANR	637210	AssignmentExpression	newHeader = nullptr		632119	0		=			
ANR	637211	Identifier	newHeader		632119	0					
ANR	637212	Identifier	nullptr		632119	1					
ANR	637213	IfStatement	if ( isPotentialOperator )		632119	39					
ANR	637214	Condition	isPotentialOperator	1598:6:49228:49246	632119	0	True				
ANR	637215	Identifier	isPotentialOperator		632119	0					
ANR	637216	CompoundStatement		1151:2:35703:35703	632119	1					
ANR	637217	ExpressionStatement	newHeader = findOperator ( operators )	1600:3:49256:49291	632119	0	True				
ANR	637218	AssignmentExpression	newHeader = findOperator ( operators )		632119	0		=			
ANR	637219	Identifier	newHeader		632119	0					
ANR	637220	CallExpression	findOperator ( operators )		632119	1					
ANR	637221	Callee	findOperator		632119	0					
ANR	637222	Identifier	findOperator		632119	0					
ANR	637223	ArgumentList	operators		632119	1					
ANR	637224	Argument	operators		632119	0					
ANR	637225	Identifier	operators		632119	0					
ANR	637226	IfStatement	if ( newHeader != nullptr && newHeader == & AS_GCC_MIN_ASSIGN && isJavaStyle ( ) && isInTemplate )		632119	1					
ANR	637227	Condition	newHeader != nullptr && newHeader == & AS_GCC_MIN_ASSIGN && isJavaStyle ( ) && isInTemplate	1603:7:49333:49453	632119	0	True				
ANR	637228	AndExpression	newHeader != nullptr && newHeader == & AS_GCC_MIN_ASSIGN && isJavaStyle ( ) && isInTemplate		632119	0		&&			
ANR	637229	EqualityExpression	newHeader != nullptr		632119	0		!=			
ANR	637230	Identifier	newHeader		632119	0					
ANR	637231	Identifier	nullptr		632119	1					
ANR	637232	AndExpression	newHeader == & AS_GCC_MIN_ASSIGN && isJavaStyle ( ) && isInTemplate		632119	1		&&			
ANR	637233	EqualityExpression	newHeader == & AS_GCC_MIN_ASSIGN		632119	0		==			
ANR	637234	Identifier	newHeader		632119	0					
ANR	637235	UnaryOperationExpression	& AS_GCC_MIN_ASSIGN		632119	1					
ANR	637236	UnaryOperator	&		632119	0					
ANR	637237	Identifier	AS_GCC_MIN_ASSIGN		632119	1					
ANR	637238	AndExpression	isJavaStyle ( ) && isInTemplate		632119	1		&&			
ANR	637239	CallExpression	isJavaStyle ( )		632119	0					
ANR	637240	Callee	isJavaStyle		632119	0					
ANR	637241	Identifier	isJavaStyle		632119	0					
ANR	637242	ArgumentList			632119	1					
ANR	637243	Identifier	isInTemplate		632119	1					
ANR	637244	ExpressionStatement	newHeader = nullptr	1607:4:49460:49479	632119	1	True				
ANR	637245	AssignmentExpression	newHeader = nullptr		632119	0		=			
ANR	637246	Identifier	newHeader		632119	0					
ANR	637247	Identifier	nullptr		632119	1					
ANR	637248	IfStatement	if ( newHeader != nullptr )		632119	2					
ANR	637249	Condition	newHeader != nullptr	1609:7:49489:49508	632119	0	True				
ANR	637250	EqualityExpression	newHeader != nullptr		632119	0		!=			
ANR	637251	Identifier	newHeader		632119	0					
ANR	637252	Identifier	nullptr		632119	1					
ANR	637253	CompoundStatement		1162:3:35966:35966	632119	1					
ANR	637254	IfStatement	if ( newHeader == & AS_LAMBDA )		632119	0					
ANR	637255	Condition	newHeader == & AS_LAMBDA	1611:8:49524:49546	632119	0	True				
ANR	637256	EqualityExpression	newHeader == & AS_LAMBDA		632119	0		==			
ANR	637257	Identifier	newHeader		632119	0					
ANR	637258	UnaryOperationExpression	& AS_LAMBDA		632119	1					
ANR	637259	UnaryOperator	&		632119	0					
ANR	637260	Identifier	AS_LAMBDA		632119	1					
ANR	637261	ExpressionStatement	foundPreCommandHeader = true	1612:5:49554:49582	632119	1	True				
ANR	637262	AssignmentExpression	foundPreCommandHeader = true		632119	0		=			
ANR	637263	Identifier	foundPreCommandHeader		632119	0					
ANR	637264	Identifier	true		632119	1					
ANR	637265	IfStatement	if ( isInTemplate && ( newHeader == & AS_GR_GR || newHeader == & AS_GR_GR_GR ) )		632119	1					
ANR	637266	Condition	isInTemplate && ( newHeader == & AS_GR_GR || newHeader == & AS_GR_GR_GR )	1615:8:49645:49713	632119	0	True				
ANR	637267	AndExpression	isInTemplate && ( newHeader == & AS_GR_GR || newHeader == & AS_GR_GR_GR )		632119	0		&&			
ANR	637268	Identifier	isInTemplate		632119	0					
ANR	637269	OrExpression	newHeader == & AS_GR_GR || newHeader == & AS_GR_GR_GR		632119	1		||			
ANR	637270	EqualityExpression	newHeader == & AS_GR_GR		632119	0		==			
ANR	637271	Identifier	newHeader		632119	0					
ANR	637272	UnaryOperationExpression	& AS_GR_GR		632119	1					
ANR	637273	UnaryOperator	&		632119	0					
ANR	637274	Identifier	AS_GR_GR		632119	1					
ANR	637275	EqualityExpression	newHeader == & AS_GR_GR_GR		632119	1		==			
ANR	637276	Identifier	newHeader		632119	0					
ANR	637277	UnaryOperationExpression	& AS_GR_GR_GR		632119	1					
ANR	637278	UnaryOperator	&		632119	0					
ANR	637279	Identifier	AS_GR_GR_GR		632119	1					
ANR	637280	ExpressionStatement	newHeader = & AS_GR	1616:5:49721:49739	632119	1	True				
ANR	637281	AssignmentExpression	newHeader = & AS_GR		632119	0		=			
ANR	637282	Identifier	newHeader		632119	0					
ANR	637283	UnaryOperationExpression	& AS_GR		632119	1					
ANR	637284	UnaryOperator	&		632119	0					
ANR	637285	Identifier	AS_GR		632119	1					
ANR	637286	IfStatement	if ( ! isInPotentialCalculation )		632119	2					
ANR	637287	Condition	! isInPotentialCalculation	1618:8:49750:49774	632119	0	True				
ANR	637288	UnaryOperationExpression	! isInPotentialCalculation		632119	0					
ANR	637289	UnaryOperator	!		632119	0					
ANR	637290	Identifier	isInPotentialCalculation		632119	1					
ANR	637291	CompoundStatement		1171:4:36233:36233	632119	1					
ANR	637292	IfStatement	"if ( find ( begin ( * assignmentOperators ) , end ( * assignmentOperators ) , newHeader ) != end ( * assignmentOperators ) )"		632119	0					
ANR	637293	Condition	"find ( begin ( * assignmentOperators ) , end ( * assignmentOperators ) , newHeader ) != end ( * assignmentOperators )"	1622:9:49916:50028	632119	0	True				
ANR	637294	EqualityExpression	"find ( begin ( * assignmentOperators ) , end ( * assignmentOperators ) , newHeader ) != end ( * assignmentOperators )"		632119	0		!=			
ANR	637295	CallExpression	"find ( begin ( * assignmentOperators ) , end ( * assignmentOperators ) , newHeader )"		632119	0					
ANR	637296	Callee	find		632119	0					
ANR	637297	Identifier	find		632119	0					
ANR	637298	ArgumentList	begin ( * assignmentOperators )		632119	1					
ANR	637299	Argument	begin ( * assignmentOperators )		632119	0					
ANR	637300	CallExpression	begin ( * assignmentOperators )		632119	0					
ANR	637301	Callee	begin		632119	0					
ANR	637302	Identifier	begin		632119	0					
ANR	637303	ArgumentList	* assignmentOperators		632119	1					
ANR	637304	Argument	* assignmentOperators		632119	0					
ANR	637305	UnaryOperationExpression	* assignmentOperators		632119	0					
ANR	637306	UnaryOperator	*		632119	0					
ANR	637307	Identifier	assignmentOperators		632119	1					
ANR	637308	Argument	end ( * assignmentOperators )		632119	1					
ANR	637309	CallExpression	end ( * assignmentOperators )		632119	0					
ANR	637310	Callee	end		632119	0					
ANR	637311	Identifier	end		632119	0					
ANR	637312	ArgumentList	* assignmentOperators		632119	1					
ANR	637313	Argument	* assignmentOperators		632119	0					
ANR	637314	UnaryOperationExpression	* assignmentOperators		632119	0					
ANR	637315	UnaryOperator	*		632119	0					
ANR	637316	Identifier	assignmentOperators		632119	1					
ANR	637317	Argument	newHeader		632119	2					
ANR	637318	Identifier	newHeader		632119	0					
ANR	637319	CallExpression	end ( * assignmentOperators )		632119	1					
ANR	637320	Callee	end		632119	0					
ANR	637321	Identifier	end		632119	0					
ANR	637322	ArgumentList	* assignmentOperators		632119	1					
ANR	637323	Argument	* assignmentOperators		632119	0					
ANR	637324	UnaryOperationExpression	* assignmentOperators		632119	0					
ANR	637325	UnaryOperator	*		632119	0					
ANR	637326	Identifier	assignmentOperators		632119	1					
ANR	637327	CompoundStatement		1178:6:36533:36565	632119	1					
ANR	637328	ExpressionStatement	foundPreCommandHeader = false	1625:6:50044:50073	632119	0	True				
ANR	637329	AssignmentExpression	foundPreCommandHeader = false		632119	0		=			
ANR	637330	Identifier	foundPreCommandHeader		632119	0					
ANR	637331	Identifier	false		632119	1					
ANR	637332	IdentifierDeclStatement	char peekedChar = peekNextChar ( ) ;	1626:6:50081:50113	632119	1	True				
ANR	637333	IdentifierDecl	peekedChar = peekNextChar ( )		632119	0					
ANR	637334	IdentifierDeclType	char		632119	0					
ANR	637335	Identifier	peekedChar		632119	1					
ANR	637336	AssignmentExpression	peekedChar = peekNextChar ( )		632119	2		=			
ANR	637337	Identifier	peekedChar		632119	0					
ANR	637338	CallExpression	peekNextChar ( )		632119	1					
ANR	637339	Callee	peekNextChar		632119	0					
ANR	637340	Identifier	peekNextChar		632119	0					
ANR	637341	ArgumentList			632119	1					
ANR	637342	ExpressionStatement	isInPotentialCalculation = ! ( newHeader == & AS_EQUAL && peekedChar == '*' ) && ! ( newHeader == & AS_EQUAL && peekedChar == '&' ) && ! isCharImmediatelyPostOperator	1627:6:50121:50344	632119	2	True				
ANR	637343	AssignmentExpression	isInPotentialCalculation = ! ( newHeader == & AS_EQUAL && peekedChar == '*' ) && ! ( newHeader == & AS_EQUAL && peekedChar == '&' ) && ! isCharImmediatelyPostOperator		632119	0		=			
ANR	637344	Identifier	isInPotentialCalculation		632119	0					
ANR	637345	AndExpression	! ( newHeader == & AS_EQUAL && peekedChar == '*' ) && ! ( newHeader == & AS_EQUAL && peekedChar == '&' ) && ! isCharImmediatelyPostOperator		632119	1		&&			
ANR	637346	UnaryOperationExpression	! ( newHeader == & AS_EQUAL && peekedChar == '*' )		632119	0					
ANR	637347	UnaryOperator	!		632119	0					
ANR	637348	AndExpression	newHeader == & AS_EQUAL && peekedChar == '*'		632119	1		&&			
ANR	637349	EqualityExpression	newHeader == & AS_EQUAL		632119	0		==			
ANR	637350	Identifier	newHeader		632119	0					
ANR	637351	UnaryOperationExpression	& AS_EQUAL		632119	1					
ANR	637352	UnaryOperator	&		632119	0					
ANR	637353	Identifier	AS_EQUAL		632119	1					
ANR	637354	EqualityExpression	peekedChar == '*'		632119	1		==			
ANR	637355	Identifier	peekedChar		632119	0					
ANR	637356	PrimaryExpression	'*'		632119	1					
ANR	637357	AndExpression	! ( newHeader == & AS_EQUAL && peekedChar == '&' ) && ! isCharImmediatelyPostOperator		632119	1		&&			
ANR	637358	UnaryOperationExpression	! ( newHeader == & AS_EQUAL && peekedChar == '&' )		632119	0					
ANR	637359	UnaryOperator	!		632119	0					
ANR	637360	AndExpression	newHeader == & AS_EQUAL && peekedChar == '&'		632119	1		&&			
ANR	637361	EqualityExpression	newHeader == & AS_EQUAL		632119	0		==			
ANR	637362	Identifier	newHeader		632119	0					
ANR	637363	UnaryOperationExpression	& AS_EQUAL		632119	1					
ANR	637364	UnaryOperator	&		632119	0					
ANR	637365	Identifier	AS_EQUAL		632119	1					
ANR	637366	EqualityExpression	peekedChar == '&'		632119	1		==			
ANR	637367	Identifier	peekedChar		632119	0					
ANR	637368	PrimaryExpression	'&'		632119	1					
ANR	637369	UnaryOperationExpression	! isCharImmediatelyPostOperator		632119	1					
ANR	637370	UnaryOperator	!		632119	0					
ANR	637371	Identifier	isCharImmediatelyPostOperator		632119	1					
ANR	637372	IfStatement	if ( newHeader != nullptr && ! isJavaStyle ( ) && ( newHeader == & AS_MULT || newHeader == & AS_BIT_AND || newHeader == & AS_BIT_XOR || newHeader == & AS_AND ) && isPointerOrReference ( ) )		632119	40					
ANR	637373	Condition	newHeader != nullptr && ! isJavaStyle ( ) && ( newHeader == & AS_MULT || newHeader == & AS_BIT_AND || newHeader == & AS_BIT_XOR || newHeader == & AS_AND ) && isPointerOrReference ( )	1637:6:50472:50704	632119	0	True				
ANR	637374	AndExpression	newHeader != nullptr && ! isJavaStyle ( ) && ( newHeader == & AS_MULT || newHeader == & AS_BIT_AND || newHeader == & AS_BIT_XOR || newHeader == & AS_AND ) && isPointerOrReference ( )		632119	0		&&			
ANR	637375	EqualityExpression	newHeader != nullptr		632119	0		!=			
ANR	637376	Identifier	newHeader		632119	0					
ANR	637377	Identifier	nullptr		632119	1					
ANR	637378	AndExpression	! isJavaStyle ( ) && ( newHeader == & AS_MULT || newHeader == & AS_BIT_AND || newHeader == & AS_BIT_XOR || newHeader == & AS_AND ) && isPointerOrReference ( )		632119	1		&&			
ANR	637379	UnaryOperationExpression	! isJavaStyle ( )		632119	0					
ANR	637380	UnaryOperator	!		632119	0					
ANR	637381	CallExpression	isJavaStyle ( )		632119	1					
ANR	637382	Callee	isJavaStyle		632119	0					
ANR	637383	Identifier	isJavaStyle		632119	0					
ANR	637384	ArgumentList			632119	1					
ANR	637385	AndExpression	( newHeader == & AS_MULT || newHeader == & AS_BIT_AND || newHeader == & AS_BIT_XOR || newHeader == & AS_AND ) && isPointerOrReference ( )		632119	1		&&			
ANR	637386	OrExpression	newHeader == & AS_MULT || newHeader == & AS_BIT_AND || newHeader == & AS_BIT_XOR || newHeader == & AS_AND		632119	0		||			
ANR	637387	EqualityExpression	newHeader == & AS_MULT		632119	0		==			
ANR	637388	Identifier	newHeader		632119	0					
ANR	637389	UnaryOperationExpression	& AS_MULT		632119	1					
ANR	637390	UnaryOperator	&		632119	0					
ANR	637391	Identifier	AS_MULT		632119	1					
ANR	637392	OrExpression	newHeader == & AS_BIT_AND || newHeader == & AS_BIT_XOR || newHeader == & AS_AND		632119	1		||			
ANR	637393	EqualityExpression	newHeader == & AS_BIT_AND		632119	0		==			
ANR	637394	Identifier	newHeader		632119	0					
ANR	637395	UnaryOperationExpression	& AS_BIT_AND		632119	1					
ANR	637396	UnaryOperator	&		632119	0					
ANR	637397	Identifier	AS_BIT_AND		632119	1					
ANR	637398	OrExpression	newHeader == & AS_BIT_XOR || newHeader == & AS_AND		632119	1		||			
ANR	637399	EqualityExpression	newHeader == & AS_BIT_XOR		632119	0		==			
ANR	637400	Identifier	newHeader		632119	0					
ANR	637401	UnaryOperationExpression	& AS_BIT_XOR		632119	1					
ANR	637402	UnaryOperator	&		632119	0					
ANR	637403	Identifier	AS_BIT_XOR		632119	1					
ANR	637404	EqualityExpression	newHeader == & AS_AND		632119	1		==			
ANR	637405	Identifier	newHeader		632119	0					
ANR	637406	UnaryOperationExpression	& AS_AND		632119	1					
ANR	637407	UnaryOperator	&		632119	0					
ANR	637408	Identifier	AS_AND		632119	1					
ANR	637409	CallExpression	isPointerOrReference ( )		632119	1					
ANR	637410	Callee	isPointerOrReference		632119	0					
ANR	637411	Identifier	isPointerOrReference		632119	0					
ANR	637412	ArgumentList			632119	1					
ANR	637413	CompoundStatement		1195:2:37161:37161	632119	1					
ANR	637414	IfStatement	if ( ! isDereferenceOrAddressOf ( ) && ! isOperatorPaddingDisabled ( ) )		632119	0					
ANR	637415	Condition	! isDereferenceOrAddressOf ( ) && ! isOperatorPaddingDisabled ( )	1644:7:50718:50776	632119	0	True				
ANR	637416	AndExpression	! isDereferenceOrAddressOf ( ) && ! isOperatorPaddingDisabled ( )		632119	0		&&			
ANR	637417	UnaryOperationExpression	! isDereferenceOrAddressOf ( )		632119	0					
ANR	637418	UnaryOperator	!		632119	0					
ANR	637419	CallExpression	isDereferenceOrAddressOf ( )		632119	1					
ANR	637420	Callee	isDereferenceOrAddressOf		632119	0					
ANR	637421	Identifier	isDereferenceOrAddressOf		632119	0					
ANR	637422	ArgumentList			632119	1					
ANR	637423	UnaryOperationExpression	! isOperatorPaddingDisabled ( )		632119	1					
ANR	637424	UnaryOperator	!		632119	0					
ANR	637425	CallExpression	isOperatorPaddingDisabled ( )		632119	1					
ANR	637426	Callee	isOperatorPaddingDisabled		632119	0					
ANR	637427	Identifier	isOperatorPaddingDisabled		632119	0					
ANR	637428	ArgumentList			632119	1					
ANR	637429	ExpressionStatement	formatPointerOrReference ( )	1645:4:50783:50809	632119	1	True				
ANR	637430	CallExpression	formatPointerOrReference ( )		632119	0					
ANR	637431	Callee	formatPointerOrReference		632119	0					
ANR	637432	Identifier	formatPointerOrReference		632119	0					
ANR	637433	ArgumentList			632119	1					
ANR	637434	ElseStatement	else		632119	0					
ANR	637435	CompoundStatement		1199:3:37274:37274	632119	0					
ANR	637436	ExpressionStatement	appendOperator ( * newHeader )	1648:4:50828:50854	632119	0	True				
ANR	637437	CallExpression	appendOperator ( * newHeader )		632119	0					
ANR	637438	Callee	appendOperator		632119	0					
ANR	637439	Identifier	appendOperator		632119	0					
ANR	637440	ArgumentList	* newHeader		632119	1					
ANR	637441	Argument	* newHeader		632119	0					
ANR	637442	UnaryOperationExpression	* newHeader		632119	0					
ANR	637443	UnaryOperator	*		632119	0					
ANR	637444	Identifier	newHeader		632119	1					
ANR	637445	ExpressionStatement	goForward ( newHeader -> length ( ) - 1 )	1649:4:50860:50894	632119	1	True				
ANR	637446	CallExpression	goForward ( newHeader -> length ( ) - 1 )		632119	0					
ANR	637447	Callee	goForward		632119	0					
ANR	637448	Identifier	goForward		632119	0					
ANR	637449	ArgumentList	newHeader -> length ( ) - 1		632119	1					
ANR	637450	Argument	newHeader -> length ( ) - 1		632119	0					
ANR	637451	AdditiveExpression	newHeader -> length ( ) - 1		632119	0		-			
ANR	637452	CallExpression	newHeader -> length ( )		632119	0					
ANR	637453	Callee	newHeader -> length		632119	0					
ANR	637454	PtrMemberAccess	newHeader -> length		632119	0					
ANR	637455	Identifier	newHeader		632119	0					
ANR	637456	Identifier	length		632119	1					
ANR	637457	ArgumentList			632119	1					
ANR	637458	PrimaryExpression	1		632119	1					
ANR	637459	ExpressionStatement	isImmediatelyPostPointerOrReference = true	1651:3:50904:50946	632119	1	True				
ANR	637460	AssignmentExpression	isImmediatelyPostPointerOrReference = true		632119	0		=			
ANR	637461	Identifier	isImmediatelyPostPointerOrReference		632119	0					
ANR	637462	Identifier	true		632119	1					
ANR	637463	ContinueStatement	continue ;	1652:3:50951:50959	632119	2	True				
ANR	637464	IfStatement	if ( shouldPadOperators && newHeader != nullptr && ! isOperatorPaddingDisabled ( ) )		632119	41					
ANR	637465	Condition	shouldPadOperators && newHeader != nullptr && ! isOperatorPaddingDisabled ( )	1655:6:50972:51045	632119	0	True				
ANR	637466	AndExpression	shouldPadOperators && newHeader != nullptr && ! isOperatorPaddingDisabled ( )		632119	0		&&			
ANR	637467	Identifier	shouldPadOperators		632119	0					
ANR	637468	AndExpression	newHeader != nullptr && ! isOperatorPaddingDisabled ( )		632119	1		&&			
ANR	637469	EqualityExpression	newHeader != nullptr		632119	0		!=			
ANR	637470	Identifier	newHeader		632119	0					
ANR	637471	Identifier	nullptr		632119	1					
ANR	637472	UnaryOperationExpression	! isOperatorPaddingDisabled ( )		632119	1					
ANR	637473	UnaryOperator	!		632119	0					
ANR	637474	CallExpression	isOperatorPaddingDisabled ( )		632119	1					
ANR	637475	Callee	isOperatorPaddingDisabled		632119	0					
ANR	637476	Identifier	isOperatorPaddingDisabled		632119	0					
ANR	637477	ArgumentList			632119	1					
ANR	637478	CompoundStatement		1208:2:37502:37502	632119	1					
ANR	637479	ExpressionStatement	padOperators ( newHeader )	1657:3:51055:51078	632119	0	True				
ANR	637480	CallExpression	padOperators ( newHeader )		632119	0					
ANR	637481	Callee	padOperators		632119	0					
ANR	637482	Identifier	padOperators		632119	0					
ANR	637483	ArgumentList	newHeader		632119	1					
ANR	637484	Argument	newHeader		632119	0					
ANR	637485	Identifier	newHeader		632119	0					
ANR	637486	ContinueStatement	continue ;	1658:3:51083:51091	632119	1	True				
ANR	637487	IfStatement	"if ( currentChar == ',' )"		632119	42					
ANR	637488	Condition	"currentChar == ','"	1662:6:51137:51154	632119	0	True				
ANR	637489	EqualityExpression	"currentChar == ','"		632119	0		==			
ANR	637490	Identifier	currentChar		632119	0					
ANR	637491	PrimaryExpression	"','"		632119	1					
ANR	637492	CompoundStatement		1217:3:37662:37715	632119	1					
ANR	637493	IdentifierDeclStatement	const size_t len = formattedLine . length ( ) ;	1664:3:51164:51205	632119	0	True				
ANR	637494	IdentifierDecl	len = formattedLine . length ( )		632119	0					
ANR	637495	IdentifierDeclType	const size_t		632119	0					
ANR	637496	Identifier	len		632119	1					
ANR	637497	AssignmentExpression	len = formattedLine . length ( )		632119	2		=			
ANR	637498	Identifier	len		632119	0					
ANR	637499	CallExpression	formattedLine . length ( )		632119	1					
ANR	637500	Callee	formattedLine . length		632119	0					
ANR	637501	MemberAccess	formattedLine . length		632119	0					
ANR	637502	Identifier	formattedLine		632119	0					
ANR	637503	Identifier	length		632119	1					
ANR	637504	ArgumentList			632119	1					
ANR	637505	IdentifierDeclStatement	size_t lastText = formattedLine . find_last_not_of ( ' ' ) ;	1665:3:51210:51263	632119	1	True				
ANR	637506	IdentifierDecl	lastText = formattedLine . find_last_not_of ( ' ' )		632119	0					
ANR	637507	IdentifierDeclType	size_t		632119	0					
ANR	637508	Identifier	lastText		632119	1					
ANR	637509	AssignmentExpression	lastText = formattedLine . find_last_not_of ( ' ' )		632119	2		=			
ANR	637510	Identifier	lastText		632119	0					
ANR	637511	CallExpression	formattedLine . find_last_not_of ( ' ' )		632119	1					
ANR	637512	Callee	formattedLine . find_last_not_of		632119	0					
ANR	637513	MemberAccess	formattedLine . find_last_not_of		632119	0					
ANR	637514	Identifier	formattedLine		632119	0					
ANR	637515	Identifier	find_last_not_of		632119	1					
ANR	637516	ArgumentList	' '		632119	1					
ANR	637517	Argument	' '		632119	0					
ANR	637518	PrimaryExpression	' '		632119	0					
ANR	637519	IfStatement	if ( lastText != string :: npos && lastText < len - 1 )		632119	2					
ANR	637520	Condition	lastText != string :: npos && lastText < len - 1	1666:7:51272:51317	632119	0	True				
ANR	637521	AndExpression	lastText != string :: npos && lastText < len - 1		632119	0		&&			
ANR	637522	EqualityExpression	lastText != string :: npos		632119	0		!=			
ANR	637523	Identifier	lastText		632119	0					
ANR	637524	Identifier	string :: npos		632119	1					
ANR	637525	RelationalExpression	lastText < len - 1		632119	1		<			
ANR	637526	Identifier	lastText		632119	0					
ANR	637527	AdditiveExpression	len - 1		632119	1		-			
ANR	637528	Identifier	len		632119	0					
ANR	637529	PrimaryExpression	1		632119	1					
ANR	637530	CompoundStatement		1221:4:37821:37857	632119	1					
ANR	637531	ExpressionStatement	formattedLine . resize ( lastText + 1 )	1668:4:51329:51363	632119	0	True				
ANR	637532	CallExpression	formattedLine . resize ( lastText + 1 )		632119	0					
ANR	637533	Callee	formattedLine . resize		632119	0					
ANR	637534	MemberAccess	formattedLine . resize		632119	0					
ANR	637535	Identifier	formattedLine		632119	0					
ANR	637536	Identifier	resize		632119	1					
ANR	637537	ArgumentList	lastText + 1		632119	1					
ANR	637538	Argument	lastText + 1		632119	0					
ANR	637539	AdditiveExpression	lastText + 1		632119	0		+			
ANR	637540	Identifier	lastText		632119	0					
ANR	637541	PrimaryExpression	1		632119	1					
ANR	637542	IdentifierDeclStatement	int size_diff = len - ( lastText + 1 ) ;	1669:4:51369:51405	632119	1	True				
ANR	637543	IdentifierDecl	size_diff = len - ( lastText + 1 )		632119	0					
ANR	637544	IdentifierDeclType	int		632119	0					
ANR	637545	Identifier	size_diff		632119	1					
ANR	637546	AssignmentExpression	size_diff = len - ( lastText + 1 )		632119	2		=			
ANR	637547	Identifier	size_diff		632119	0					
ANR	637548	AdditiveExpression	len - ( lastText + 1 )		632119	1		-			
ANR	637549	Identifier	len		632119	0					
ANR	637550	AdditiveExpression	lastText + 1		632119	1		+			
ANR	637551	Identifier	lastText		632119	0					
ANR	637552	PrimaryExpression	1		632119	1					
ANR	637553	ExpressionStatement	spacePadNum -= size_diff	1670:4:51411:51435	632119	2	True				
ANR	637554	AssignmentExpression	spacePadNum -= size_diff		632119	0		-=			
ANR	637555	Identifier	spacePadNum		632119	0					
ANR	637556	Identifier	size_diff		632119	1					
ANR	637557	IfStatement	"if ( currentChar == ';' || ( currentChar == ',' && ( shouldPadOperators || shouldPadCommas ) ) )"		632119	43					
ANR	637558	Condition	"currentChar == ';' || ( currentChar == ',' && ( shouldPadOperators || shouldPadCommas ) )"	1675:6:51485:51579	632119	0	True				
ANR	637559	OrExpression	"currentChar == ';' || ( currentChar == ',' && ( shouldPadOperators || shouldPadCommas ) )"		632119	0		||			
ANR	637560	EqualityExpression	currentChar == ';'		632119	0		==			
ANR	637561	Identifier	currentChar		632119	0					
ANR	637562	PrimaryExpression	';'		632119	1					
ANR	637563	AndExpression	"currentChar == ',' && ( shouldPadOperators || shouldPadCommas )"		632119	1		&&			
ANR	637564	EqualityExpression	"currentChar == ','"		632119	0		==			
ANR	637565	Identifier	currentChar		632119	0					
ANR	637566	PrimaryExpression	"','"		632119	1					
ANR	637567	OrExpression	shouldPadOperators || shouldPadCommas		632119	1		||			
ANR	637568	Identifier	shouldPadOperators		632119	0					
ANR	637569	Identifier	shouldPadCommas		632119	1					
ANR	637570	CompoundStatement		1230:3:38041:38060	632119	1					
ANR	637571	IdentifierDeclStatement	char nextChar = ' ' ;	1678:3:51589:51608	632119	0	True				
ANR	637572	IdentifierDecl	nextChar = ' '		632119	0					
ANR	637573	IdentifierDeclType	char		632119	0					
ANR	637574	Identifier	nextChar		632119	1					
ANR	637575	AssignmentExpression	nextChar = ' '		632119	2		=			
ANR	637576	Identifier	nextChar		632119	0					
ANR	637577	PrimaryExpression	' '		632119	1					
ANR	637578	IfStatement	if ( charNum + 1 < ( int ) currentLine . length ( ) )		632119	1					
ANR	637579	Condition	charNum + 1 < ( int ) currentLine . length ( )	1679:7:51617:51656	632119	0	True				
ANR	637580	RelationalExpression	charNum + 1 < ( int ) currentLine . length ( )		632119	0		<			
ANR	637581	AdditiveExpression	charNum + 1		632119	0		+			
ANR	637582	Identifier	charNum		632119	0					
ANR	637583	PrimaryExpression	1		632119	1					
ANR	637584	CastExpression	( int ) currentLine . length ( )		632119	1					
ANR	637585	CastTarget	int		632119	0					
ANR	637586	CallExpression	currentLine . length ( )		632119	1					
ANR	637587	Callee	currentLine . length		632119	0					
ANR	637588	MemberAccess	currentLine . length		632119	0					
ANR	637589	Identifier	currentLine		632119	0					
ANR	637590	Identifier	length		632119	1					
ANR	637591	ArgumentList			632119	1					
ANR	637592	ExpressionStatement	nextChar = currentLine [ charNum + 1 ]	1680:4:51663:51698	632119	1	True				
ANR	637593	AssignmentExpression	nextChar = currentLine [ charNum + 1 ]		632119	0		=			
ANR	637594	Identifier	nextChar		632119	0					
ANR	637595	ArrayIndexing	currentLine [ charNum + 1 ]		632119	1					
ANR	637596	Identifier	currentLine		632119	0					
ANR	637597	AdditiveExpression	charNum + 1		632119	1		+			
ANR	637598	Identifier	charNum		632119	0					
ANR	637599	PrimaryExpression	1		632119	1					
ANR	637600	IfStatement	if ( ! isWhiteSpace ( nextChar ) && nextChar != '}' && nextChar != ')' && nextChar != ']' && nextChar != '>' && nextChar != ';' && ! isBeforeAnyComment ( ) )		632119	2					
ANR	637601	Condition	! isWhiteSpace ( nextChar ) && nextChar != '}' && nextChar != ')' && nextChar != ']' && nextChar != '>' && nextChar != ';' && ! isBeforeAnyComment ( )	1681:7:51707:51915	632119	0	True				
ANR	637602	AndExpression	! isWhiteSpace ( nextChar ) && nextChar != '}' && nextChar != ')' && nextChar != ']' && nextChar != '>' && nextChar != ';' && ! isBeforeAnyComment ( )		632119	0		&&			
ANR	637603	UnaryOperationExpression	! isWhiteSpace ( nextChar )		632119	0					
ANR	637604	UnaryOperator	!		632119	0					
ANR	637605	CallExpression	isWhiteSpace ( nextChar )		632119	1					
ANR	637606	Callee	isWhiteSpace		632119	0					
ANR	637607	Identifier	isWhiteSpace		632119	0					
ANR	637608	ArgumentList	nextChar		632119	1					
ANR	637609	Argument	nextChar		632119	0					
ANR	637610	Identifier	nextChar		632119	0					
ANR	637611	AndExpression	nextChar != '}' && nextChar != ')' && nextChar != ']' && nextChar != '>' && nextChar != ';' && ! isBeforeAnyComment ( )		632119	1		&&			
ANR	637612	EqualityExpression	nextChar != '}'		632119	0		!=			
ANR	637613	Identifier	nextChar		632119	0					
ANR	637614	PrimaryExpression	'}'		632119	1					
ANR	637615	AndExpression	nextChar != ')' && nextChar != ']' && nextChar != '>' && nextChar != ';' && ! isBeforeAnyComment ( )		632119	1		&&			
ANR	637616	EqualityExpression	nextChar != ')'		632119	0		!=			
ANR	637617	Identifier	nextChar		632119	0					
ANR	637618	PrimaryExpression	')'		632119	1					
ANR	637619	AndExpression	nextChar != ']' && nextChar != '>' && nextChar != ';' && ! isBeforeAnyComment ( )		632119	1		&&			
ANR	637620	EqualityExpression	nextChar != ']'		632119	0		!=			
ANR	637621	Identifier	nextChar		632119	0					
ANR	637622	PrimaryExpression	']'		632119	1					
ANR	637623	AndExpression	nextChar != '>' && nextChar != ';' && ! isBeforeAnyComment ( )		632119	1		&&			
ANR	637624	EqualityExpression	nextChar != '>'		632119	0		!=			
ANR	637625	Identifier	nextChar		632119	0					
ANR	637626	PrimaryExpression	'>'		632119	1					
ANR	637627	AndExpression	nextChar != ';' && ! isBeforeAnyComment ( )		632119	1		&&			
ANR	637628	EqualityExpression	nextChar != ';'		632119	0		!=			
ANR	637629	Identifier	nextChar		632119	0					
ANR	637630	PrimaryExpression	';'		632119	1					
ANR	637631	UnaryOperationExpression	! isBeforeAnyComment ( )		632119	1					
ANR	637632	UnaryOperator	!		632119	0					
ANR	637633	CallExpression	isBeforeAnyComment ( )		632119	1					
ANR	637634	Callee	isBeforeAnyComment		632119	0					
ANR	637635	Identifier	isBeforeAnyComment		632119	0					
ANR	637636	ArgumentList			632119	1					
ANR	637637	CompoundStatement		1242:3:38451:38451	632119	1					
ANR	637638	ExpressionStatement	appendCurrentChar ( )	1691:4:52005:52024	632119	0	True				
ANR	637639	CallExpression	appendCurrentChar ( )		632119	0					
ANR	637640	Callee	appendCurrentChar		632119	0					
ANR	637641	Identifier	appendCurrentChar		632119	0					
ANR	637642	ArgumentList			632119	1					
ANR	637643	ExpressionStatement	appendSpaceAfter ( )	1692:4:52030:52048	632119	1	True				
ANR	637644	CallExpression	appendSpaceAfter ( )		632119	0					
ANR	637645	Callee	appendSpaceAfter		632119	0					
ANR	637646	Identifier	appendSpaceAfter		632119	0					
ANR	637647	ArgumentList			632119	1					
ANR	637648	ContinueStatement	continue ;	1693:4:52054:52062	632119	2	True				
ANR	637649	IfStatement	if ( currentChar == '(' || currentChar == ')' )		632119	44					
ANR	637650	Condition	currentChar == '(' || currentChar == ')'	1698:6:52096:52135	632119	0	True				
ANR	637651	OrExpression	currentChar == '(' || currentChar == ')'		632119	0		||			
ANR	637652	EqualityExpression	currentChar == '('		632119	0		==			
ANR	637653	Identifier	currentChar		632119	0					
ANR	637654	PrimaryExpression	'('		632119	1					
ANR	637655	EqualityExpression	currentChar == ')'		632119	1		==			
ANR	637656	Identifier	currentChar		632119	0					
ANR	637657	PrimaryExpression	')'		632119	1					
ANR	637658	CompoundStatement		1251:2:38592:38592	632119	1					
ANR	637659	IfStatement	if ( currentChar == '(' )		632119	0					
ANR	637660	Condition	currentChar == '('	1700:7:52149:52166	632119	0	True				
ANR	637661	EqualityExpression	currentChar == '('		632119	0		==			
ANR	637662	Identifier	currentChar		632119	0					
ANR	637663	PrimaryExpression	'('		632119	1					
ANR	637664	CompoundStatement		1253:3:38624:38624	632119	1					
ANR	637665	IfStatement	if ( shouldPadHeader && ( isCharImmediatelyPostReturn || isCharImmediatelyPostThrow || isCharImmediatelyPostNewDelete ) )		632119	0					
ANR	637666	Condition	shouldPadHeader && ( isCharImmediatelyPostReturn || isCharImmediatelyPostThrow || isCharImmediatelyPostNewDelete )	1702:8:52182:52337	632119	0	True				
ANR	637667	AndExpression	shouldPadHeader && ( isCharImmediatelyPostReturn || isCharImmediatelyPostThrow || isCharImmediatelyPostNewDelete )		632119	0		&&			
ANR	637668	Identifier	shouldPadHeader		632119	0					
ANR	637669	OrExpression	isCharImmediatelyPostReturn || isCharImmediatelyPostThrow || isCharImmediatelyPostNewDelete		632119	1		||			
ANR	637670	Identifier	isCharImmediatelyPostReturn		632119	0					
ANR	637671	OrExpression	isCharImmediatelyPostThrow || isCharImmediatelyPostNewDelete		632119	1		||			
ANR	637672	Identifier	isCharImmediatelyPostThrow		632119	0					
ANR	637673	Identifier	isCharImmediatelyPostNewDelete		632119	1					
ANR	637674	ExpressionStatement	appendSpacePad ( )	1706:5:52345:52361	632119	1	True				
ANR	637675	CallExpression	appendSpacePad ( )		632119	0					
ANR	637676	Callee	appendSpacePad		632119	0					
ANR	637677	Identifier	appendSpacePad		632119	0					
ANR	637678	ArgumentList			632119	1					
ANR	637679	IfStatement	if ( shouldPadParensOutside || shouldPadParensInside || shouldUnPadParens || shouldPadFirstParen )		632119	1					
ANR	637680	Condition	shouldPadParensOutside || shouldPadParensInside || shouldUnPadParens || shouldPadFirstParen	1709:7:52376:52466	632119	0	True				
ANR	637681	OrExpression	shouldPadParensOutside || shouldPadParensInside || shouldUnPadParens || shouldPadFirstParen		632119	0		||			
ANR	637682	Identifier	shouldPadParensOutside		632119	0					
ANR	637683	OrExpression	shouldPadParensInside || shouldUnPadParens || shouldPadFirstParen		632119	1		||			
ANR	637684	Identifier	shouldPadParensInside		632119	0					
ANR	637685	OrExpression	shouldUnPadParens || shouldPadFirstParen		632119	1		||			
ANR	637686	Identifier	shouldUnPadParens		632119	0					
ANR	637687	Identifier	shouldPadFirstParen		632119	1					
ANR	637688	ExpressionStatement	padParens ( )	1710:4:52473:52484	632119	1	True				
ANR	637689	CallExpression	padParens ( )		632119	0					
ANR	637690	Callee	padParens		632119	0					
ANR	637691	Identifier	padParens		632119	0					
ANR	637692	ArgumentList			632119	1					
ANR	637693	ElseStatement	else		632119	0					
ANR	637694	ExpressionStatement	appendCurrentChar ( )	1712:4:52498:52517	632119	0	True				
ANR	637695	CallExpression	appendCurrentChar ( )		632119	0					
ANR	637696	Callee	appendCurrentChar		632119	0					
ANR	637697	Identifier	appendCurrentChar		632119	0					
ANR	637698	ArgumentList			632119	1					
ANR	637699	IfStatement	if ( isInObjCMethodDefinition )		632119	2					
ANR	637700	Condition	isInObjCMethodDefinition	1714:7:52527:52550	632119	0	True				
ANR	637701	Identifier	isInObjCMethodDefinition		632119	0					
ANR	637702	CompoundStatement		1267:3:39008:39008	632119	1					
ANR	637703	IfStatement	if ( currentChar == '(' && isImmediatelyPostObjCMethodPrefix )		632119	0					
ANR	637704	Condition	currentChar == '(' && isImmediatelyPostObjCMethodPrefix	1716:8:52566:52620	632119	0	True				
ANR	637705	AndExpression	currentChar == '(' && isImmediatelyPostObjCMethodPrefix		632119	0		&&			
ANR	637706	EqualityExpression	currentChar == '('		632119	0		==			
ANR	637707	Identifier	currentChar		632119	0					
ANR	637708	PrimaryExpression	'('		632119	1					
ANR	637709	Identifier	isImmediatelyPostObjCMethodPrefix		632119	1					
ANR	637710	CompoundStatement		1269:4:39079:39079	632119	1					
ANR	637711	IfStatement	if ( shouldPadMethodPrefix || shouldUnPadMethodPrefix )		632119	0					
ANR	637712	Condition	shouldPadMethodPrefix || shouldUnPadMethodPrefix	1718:9:52638:52685	632119	0	True				
ANR	637713	OrExpression	shouldPadMethodPrefix || shouldUnPadMethodPrefix		632119	0		||			
ANR	637714	Identifier	shouldPadMethodPrefix		632119	0					
ANR	637715	Identifier	shouldUnPadMethodPrefix		632119	1					
ANR	637716	ExpressionStatement	padObjCMethodPrefix ( )	1719:6:52694:52715	632119	1	True				
ANR	637717	CallExpression	padObjCMethodPrefix ( )		632119	0					
ANR	637718	Callee	padObjCMethodPrefix		632119	0					
ANR	637719	Identifier	padObjCMethodPrefix		632119	0					
ANR	637720	ArgumentList			632119	1					
ANR	637721	ExpressionStatement	isImmediatelyPostObjCMethodPrefix = false	1720:5:52722:52763	632119	1	True				
ANR	637722	AssignmentExpression	isImmediatelyPostObjCMethodPrefix = false		632119	0		=			
ANR	637723	Identifier	isImmediatelyPostObjCMethodPrefix		632119	0					
ANR	637724	Identifier	false		632119	1					
ANR	637725	ExpressionStatement	isInObjCReturnType = true	1721:5:52770:52795	632119	2	True				
ANR	637726	AssignmentExpression	isInObjCReturnType = true		632119	0		=			
ANR	637727	Identifier	isInObjCReturnType		632119	0					
ANR	637728	Identifier	true		632119	1					
ANR	637729	ElseStatement	else		632119	0					
ANR	637730	IfStatement	if ( currentChar == ')' && isInObjCReturnType )		632119	0					
ANR	637731	Condition	currentChar == ')' && isInObjCReturnType	1723:13:52816:52855	632119	0	True				
ANR	637732	AndExpression	currentChar == ')' && isInObjCReturnType		632119	0		&&			
ANR	637733	EqualityExpression	currentChar == ')'		632119	0		==			
ANR	637734	Identifier	currentChar		632119	0					
ANR	637735	PrimaryExpression	')'		632119	1					
ANR	637736	Identifier	isInObjCReturnType		632119	1					
ANR	637737	CompoundStatement		1276:4:39314:39314	632119	1					
ANR	637738	IfStatement	if ( shouldPadReturnType || shouldUnPadReturnType )		632119	0					
ANR	637739	Condition	shouldPadReturnType || shouldUnPadReturnType	1725:9:52873:52916	632119	0	True				
ANR	637740	OrExpression	shouldPadReturnType || shouldUnPadReturnType		632119	0		||			
ANR	637741	Identifier	shouldPadReturnType		632119	0					
ANR	637742	Identifier	shouldUnPadReturnType		632119	1					
ANR	637743	ExpressionStatement	padObjCReturnType ( )	1726:6:52925:52944	632119	1	True				
ANR	637744	CallExpression	padObjCReturnType ( )		632119	0					
ANR	637745	Callee	padObjCReturnType		632119	0					
ANR	637746	Identifier	padObjCReturnType		632119	0					
ANR	637747	ArgumentList			632119	1					
ANR	637748	ExpressionStatement	isInObjCReturnType = false	1727:5:52951:52977	632119	1	True				
ANR	637749	AssignmentExpression	isInObjCReturnType = false		632119	0		=			
ANR	637750	Identifier	isInObjCReturnType		632119	0					
ANR	637751	Identifier	false		632119	1					
ANR	637752	ElseStatement	else		632119	0					
ANR	637753	IfStatement	if ( shouldPadParamType || shouldUnPadParamType )		632119	0					
ANR	637754	Condition	shouldPadParamType || shouldUnPadParamType	1729:13:52998:53039	632119	0	True				
ANR	637755	OrExpression	shouldPadParamType || shouldUnPadParamType		632119	0		||			
ANR	637756	Identifier	shouldPadParamType		632119	0					
ANR	637757	Identifier	shouldUnPadParamType		632119	1					
ANR	637758	ExpressionStatement	padObjCParamType ( )	1730:5:53047:53065	632119	1	True				
ANR	637759	CallExpression	padObjCParamType ( )		632119	0					
ANR	637760	Callee	padObjCParamType		632119	0					
ANR	637761	Identifier	padObjCParamType		632119	0					
ANR	637762	ArgumentList			632119	1					
ANR	637763	ContinueStatement	continue ;	1732:3:53075:53083	632119	3	True				
ANR	637764	IfStatement	if ( newHeader != nullptr )		632119	45					
ANR	637765	Condition	newHeader != nullptr	1736:6:53128:53147	632119	0	True				
ANR	637766	EqualityExpression	newHeader != nullptr		632119	0		!=			
ANR	637767	Identifier	newHeader		632119	0					
ANR	637768	Identifier	nullptr		632119	1					
ANR	637769	CompoundStatement		1289:2:39604:39604	632119	1					
ANR	637770	ExpressionStatement	appendOperator ( * newHeader )	1738:3:53157:53183	632119	0	True				
ANR	637771	CallExpression	appendOperator ( * newHeader )		632119	0					
ANR	637772	Callee	appendOperator		632119	0					
ANR	637773	Identifier	appendOperator		632119	0					
ANR	637774	ArgumentList	* newHeader		632119	1					
ANR	637775	Argument	* newHeader		632119	0					
ANR	637776	UnaryOperationExpression	* newHeader		632119	0					
ANR	637777	UnaryOperator	*		632119	0					
ANR	637778	Identifier	newHeader		632119	1					
ANR	637779	ExpressionStatement	goForward ( newHeader -> length ( ) - 1 )	1739:3:53188:53222	632119	1	True				
ANR	637780	CallExpression	goForward ( newHeader -> length ( ) - 1 )		632119	0					
ANR	637781	Callee	goForward		632119	0					
ANR	637782	Identifier	goForward		632119	0					
ANR	637783	ArgumentList	newHeader -> length ( ) - 1		632119	1					
ANR	637784	Argument	newHeader -> length ( ) - 1		632119	0					
ANR	637785	AdditiveExpression	newHeader -> length ( ) - 1		632119	0		-			
ANR	637786	CallExpression	newHeader -> length ( )		632119	0					
ANR	637787	Callee	newHeader -> length		632119	0					
ANR	637788	PtrMemberAccess	newHeader -> length		632119	0					
ANR	637789	Identifier	newHeader		632119	0					
ANR	637790	Identifier	length		632119	1					
ANR	637791	ArgumentList			632119	1					
ANR	637792	PrimaryExpression	1		632119	1					
ANR	637793	ContinueStatement	continue ;	1740:3:53227:53235	632119	2	True				
ANR	637794	ExpressionStatement	appendCurrentChar ( )	1743:2:53244:53263	632119	46	True				
ANR	637795	CallExpression	appendCurrentChar ( )		632119	0					
ANR	637796	Callee	appendCurrentChar		632119	0					
ANR	637797	Identifier	appendCurrentChar		632119	0					
ANR	637798	ArgumentList			632119	1					
ANR	637799	IdentifierDeclStatement	string beautifiedLine ;	1749:1:53417:53438	632119	9	True				
ANR	637800	IdentifierDecl	beautifiedLine		632119	0					
ANR	637801	IdentifierDeclType	string		632119	0					
ANR	637802	Identifier	beautifiedLine		632119	1					
ANR	637803	IdentifierDeclStatement	size_t readyFormattedLineLength = trim ( readyFormattedLine ) . length ( ) ;	1750:1:53441:53508	632119	10	True				
ANR	637804	IdentifierDecl	readyFormattedLineLength = trim ( readyFormattedLine ) . length ( )		632119	0					
ANR	637805	IdentifierDeclType	size_t		632119	0					
ANR	637806	Identifier	readyFormattedLineLength		632119	1					
ANR	637807	AssignmentExpression	readyFormattedLineLength = trim ( readyFormattedLine ) . length ( )		632119	2		=			
ANR	637808	Identifier	readyFormattedLineLength		632119	0					
ANR	637809	CallExpression	trim ( readyFormattedLine ) . length ( )		632119	1					
ANR	637810	Callee	trim ( readyFormattedLine ) . length		632119	0					
ANR	637811	MemberAccess	trim ( readyFormattedLine ) . length		632119	0					
ANR	637812	CallExpression	trim ( readyFormattedLine )		632119	0					
ANR	637813	Callee	trim		632119	0					
ANR	637814	Identifier	trim		632119	0					
ANR	637815	ArgumentList	readyFormattedLine		632119	1					
ANR	637816	Argument	readyFormattedLine		632119	0					
ANR	637817	Identifier	readyFormattedLine		632119	0					
ANR	637818	Identifier	length		632119	1					
ANR	637819	ArgumentList			632119	1					
ANR	637820	IdentifierDeclStatement	"bool isInNamespace = isBraceType ( braceTypeStack -> back ( ) , NAMESPACE_TYPE ) ;"	1751:1:53511:53583	632119	11	True				
ANR	637821	IdentifierDecl	"isInNamespace = isBraceType ( braceTypeStack -> back ( ) , NAMESPACE_TYPE )"		632119	0					
ANR	637822	IdentifierDeclType	bool		632119	0					
ANR	637823	Identifier	isInNamespace		632119	1					
ANR	637824	AssignmentExpression	"isInNamespace = isBraceType ( braceTypeStack -> back ( ) , NAMESPACE_TYPE )"		632119	2		=			
ANR	637825	Identifier	isInNamespace		632119	0					
ANR	637826	CallExpression	"isBraceType ( braceTypeStack -> back ( ) , NAMESPACE_TYPE )"		632119	1					
ANR	637827	Callee	isBraceType		632119	0					
ANR	637828	Identifier	isBraceType		632119	0					
ANR	637829	ArgumentList	braceTypeStack -> back ( )		632119	1					
ANR	637830	Argument	braceTypeStack -> back ( )		632119	0					
ANR	637831	CallExpression	braceTypeStack -> back ( )		632119	0					
ANR	637832	Callee	braceTypeStack -> back		632119	0					
ANR	637833	PtrMemberAccess	braceTypeStack -> back		632119	0					
ANR	637834	Identifier	braceTypeStack		632119	0					
ANR	637835	Identifier	back		632119	1					
ANR	637836	ArgumentList			632119	1					
ANR	637837	Argument	NAMESPACE_TYPE		632119	1					
ANR	637838	Identifier	NAMESPACE_TYPE		632119	0					
ANR	637839	IfStatement	if ( prependEmptyLine && readyFormattedLineLength > 0 && previousReadyFormattedLineLength > 0 )		632119	12					
ANR	637840	Condition	prependEmptyLine && readyFormattedLineLength > 0 && previousReadyFormattedLineLength > 0	1753:5:53591:53748	632119	0	True				
ANR	637841	AndExpression	prependEmptyLine && readyFormattedLineLength > 0 && previousReadyFormattedLineLength > 0		632119	0		&&			
ANR	637842	Identifier	prependEmptyLine		632119	0					
ANR	637843	AndExpression	readyFormattedLineLength > 0 && previousReadyFormattedLineLength > 0		632119	1		&&			
ANR	637844	RelationalExpression	readyFormattedLineLength > 0		632119	0		>			
ANR	637845	Identifier	readyFormattedLineLength		632119	0					
ANR	637846	PrimaryExpression	0		632119	1					
ANR	637847	RelationalExpression	previousReadyFormattedLineLength > 0		632119	1		>			
ANR	637848	Identifier	previousReadyFormattedLineLength		632119	0					
ANR	637849	PrimaryExpression	0		632119	1					
ANR	637850	CompoundStatement		1308:1:40204:40204	632119	1					
ANR	637851	ExpressionStatement	isLineReady = true	1757:2:53756:53774	632119	0	True				
ANR	637852	AssignmentExpression	isLineReady = true		632119	0		=			
ANR	637853	Identifier	isLineReady		632119	0					
ANR	637854	Identifier	true		632119	1					
ANR	637855	ExpressionStatement	"beautifiedLine = beautify ( """" )"	1758:2:53818:53847	632119	1	True				
ANR	637856	AssignmentExpression	"beautifiedLine = beautify ( """" )"		632119	0		=			
ANR	637857	Identifier	beautifiedLine		632119	0					
ANR	637858	CallExpression	"beautify ( """" )"		632119	1					
ANR	637859	Callee	beautify		632119	0					
ANR	637860	Identifier	beautify		632119	0					
ANR	637861	ArgumentList	""""""		632119	1					
ANR	637862	Argument	""""""		632119	0					
ANR	637863	PrimaryExpression	""""""		632119	0					
ANR	637864	ExpressionStatement	previousReadyFormattedLineLength = 0	1759:2:53851:53887	632119	2	True				
ANR	637865	AssignmentExpression	previousReadyFormattedLineLength = 0		632119	0		=			
ANR	637866	Identifier	previousReadyFormattedLineLength		632119	0					
ANR	637867	PrimaryExpression	0		632119	1					
ANR	637868	ExpressionStatement	"enhancer -> enhance ( beautifiedLine , isInNamespace , isInPreprocessorBeautify , isInBeautifySQL )"	1761:2:53934:54025	632119	3	True				
ANR	637869	CallExpression	"enhancer -> enhance ( beautifiedLine , isInNamespace , isInPreprocessorBeautify , isInBeautifySQL )"		632119	0					
ANR	637870	Callee	enhancer -> enhance		632119	0					
ANR	637871	PtrMemberAccess	enhancer -> enhance		632119	0					
ANR	637872	Identifier	enhancer		632119	0					
ANR	637873	Identifier	enhance		632119	1					
ANR	637874	ArgumentList	beautifiedLine		632119	1					
ANR	637875	Argument	beautifiedLine		632119	0					
ANR	637876	Identifier	beautifiedLine		632119	0					
ANR	637877	Argument	isInNamespace		632119	1					
ANR	637878	Identifier	isInNamespace		632119	0					
ANR	637879	Argument	isInPreprocessorBeautify		632119	2					
ANR	637880	Identifier	isInPreprocessorBeautify		632119	0					
ANR	637881	Argument	isInBeautifySQL		632119	3					
ANR	637882	Identifier	isInBeautifySQL		632119	0					
ANR	637883	ElseStatement	else		632119	0					
ANR	637884	CompoundStatement		1316:1:40527:40527	632119	0					
ANR	637885	ExpressionStatement	isLineReady = false	1765:2:54079:54098	632119	0	True				
ANR	637886	AssignmentExpression	isLineReady = false		632119	0		=			
ANR	637887	Identifier	isLineReady		632119	0					
ANR	637888	Identifier	false		632119	1					
ANR	637889	ExpressionStatement	runInIndentContinuation = runInIndentChars	1766:2:54102:54144	632119	1	True				
ANR	637890	AssignmentExpression	runInIndentContinuation = runInIndentChars		632119	0		=			
ANR	637891	Identifier	runInIndentContinuation		632119	0					
ANR	637892	Identifier	runInIndentChars		632119	1					
ANR	637893	ExpressionStatement	beautifiedLine = beautify ( readyFormattedLine )	1767:2:54148:54193	632119	2	True				
ANR	637894	AssignmentExpression	beautifiedLine = beautify ( readyFormattedLine )		632119	0		=			
ANR	637895	Identifier	beautifiedLine		632119	0					
ANR	637896	CallExpression	beautify ( readyFormattedLine )		632119	1					
ANR	637897	Callee	beautify		632119	0					
ANR	637898	Identifier	beautify		632119	0					
ANR	637899	ArgumentList	readyFormattedLine		632119	1					
ANR	637900	Argument	readyFormattedLine		632119	0					
ANR	637901	Identifier	readyFormattedLine		632119	0					
ANR	637902	ExpressionStatement	previousReadyFormattedLineLength = readyFormattedLineLength	1768:2:54197:54256	632119	3	True				
ANR	637903	AssignmentExpression	previousReadyFormattedLineLength = readyFormattedLineLength		632119	0		=			
ANR	637904	Identifier	previousReadyFormattedLineLength		632119	0					
ANR	637905	Identifier	readyFormattedLineLength		632119	1					
ANR	637906	IfStatement	if ( ! lineCommentNoBeautify && ! isFormattingModeOff )		632119	4					
ANR	637907	Condition	! lineCommentNoBeautify && ! isFormattingModeOff	1770:6:54324:54369	632119	0	True				
ANR	637908	AndExpression	! lineCommentNoBeautify && ! isFormattingModeOff		632119	0		&&			
ANR	637909	UnaryOperationExpression	! lineCommentNoBeautify		632119	0					
ANR	637910	UnaryOperator	!		632119	0					
ANR	637911	Identifier	lineCommentNoBeautify		632119	1					
ANR	637912	UnaryOperationExpression	! isFormattingModeOff		632119	1					
ANR	637913	UnaryOperator	!		632119	0					
ANR	637914	Identifier	isFormattingModeOff		632119	1					
ANR	637915	ExpressionStatement	"enhancer -> enhance ( beautifiedLine , isInNamespace , isInPreprocessorBeautify , isInBeautifySQL )"	1771:3:54375:54466	632119	1	True				
ANR	637916	CallExpression	"enhancer -> enhance ( beautifiedLine , isInNamespace , isInPreprocessorBeautify , isInBeautifySQL )"		632119	0					
ANR	637917	Callee	enhancer -> enhance		632119	0					
ANR	637918	PtrMemberAccess	enhancer -> enhance		632119	0					
ANR	637919	Identifier	enhancer		632119	0					
ANR	637920	Identifier	enhance		632119	1					
ANR	637921	ArgumentList	beautifiedLine		632119	1					
ANR	637922	Argument	beautifiedLine		632119	0					
ANR	637923	Identifier	beautifiedLine		632119	0					
ANR	637924	Argument	isInNamespace		632119	1					
ANR	637925	Identifier	isInNamespace		632119	0					
ANR	637926	Argument	isInPreprocessorBeautify		632119	2					
ANR	637927	Identifier	isInPreprocessorBeautify		632119	0					
ANR	637928	Argument	isInBeautifySQL		632119	3					
ANR	637929	Identifier	isInBeautifySQL		632119	0					
ANR	637930	ExpressionStatement	runInIndentChars = 0	1772:2:54470:54490	632119	5	True				
ANR	637931	AssignmentExpression	runInIndentChars = 0		632119	0		=			
ANR	637932	Identifier	runInIndentChars		632119	0					
ANR	637933	PrimaryExpression	0		632119	1					
ANR	637934	ExpressionStatement	lineCommentNoBeautify = lineCommentNoIndent	1773:2:54494:54537	632119	6	True				
ANR	637935	AssignmentExpression	lineCommentNoBeautify = lineCommentNoIndent		632119	0		=			
ANR	637936	Identifier	lineCommentNoBeautify		632119	0					
ANR	637937	Identifier	lineCommentNoIndent		632119	1					
ANR	637938	ExpressionStatement	lineCommentNoIndent = false	1774:2:54541:54568	632119	7	True				
ANR	637939	AssignmentExpression	lineCommentNoIndent = false		632119	0		=			
ANR	637940	Identifier	lineCommentNoIndent		632119	0					
ANR	637941	Identifier	false		632119	1					
ANR	637942	ExpressionStatement	isInIndentablePreproc = isIndentableProprocessor	1775:2:54572:54620	632119	8	True				
ANR	637943	AssignmentExpression	isInIndentablePreproc = isIndentableProprocessor		632119	0		=			
ANR	637944	Identifier	isInIndentablePreproc		632119	0					
ANR	637945	Identifier	isIndentableProprocessor		632119	1					
ANR	637946	ExpressionStatement	isIndentableProprocessor = false	1776:2:54624:54656	632119	9	True				
ANR	637947	AssignmentExpression	isIndentableProprocessor = false		632119	0		=			
ANR	637948	Identifier	isIndentableProprocessor		632119	0					
ANR	637949	Identifier	false		632119	1					
ANR	637950	ExpressionStatement	isElseHeaderIndent = elseHeaderFollowsComments	1777:2:54660:54706	632119	10	True				
ANR	637951	AssignmentExpression	isElseHeaderIndent = elseHeaderFollowsComments		632119	0		=			
ANR	637952	Identifier	isElseHeaderIndent		632119	0					
ANR	637953	Identifier	elseHeaderFollowsComments		632119	1					
ANR	637954	ExpressionStatement	isCaseHeaderCommentIndent = caseHeaderFollowsComments	1778:2:54710:54763	632119	11	True				
ANR	637955	AssignmentExpression	isCaseHeaderCommentIndent = caseHeaderFollowsComments		632119	0		=			
ANR	637956	Identifier	isCaseHeaderCommentIndent		632119	0					
ANR	637957	Identifier	caseHeaderFollowsComments		632119	1					
ANR	637958	ExpressionStatement	objCColonAlignSubsequent = objCColonAlign	1779:2:54767:54808	632119	12	True				
ANR	637959	AssignmentExpression	objCColonAlignSubsequent = objCColonAlign		632119	0		=			
ANR	637960	Identifier	objCColonAlignSubsequent		632119	0					
ANR	637961	Identifier	objCColonAlign		632119	1					
ANR	637962	IfStatement	if ( isCharImmediatelyPostNonInStmt )		632119	13					
ANR	637963	Condition	isCharImmediatelyPostNonInStmt	1780:6:54816:54845	632119	0	True				
ANR	637964	Identifier	isCharImmediatelyPostNonInStmt		632119	0					
ANR	637965	CompoundStatement		1333:2:41302:41302	632119	1					
ANR	637966	ExpressionStatement	isNonInStatementArray = false	1782:3:54855:54884	632119	0	True				
ANR	637967	AssignmentExpression	isNonInStatementArray = false		632119	0		=			
ANR	637968	Identifier	isNonInStatementArray		632119	0					
ANR	637969	Identifier	false		632119	1					
ANR	637970	ExpressionStatement	isCharImmediatelyPostNonInStmt = false	1783:3:54889:54927	632119	1	True				
ANR	637971	AssignmentExpression	isCharImmediatelyPostNonInStmt = false		632119	0		=			
ANR	637972	Identifier	isCharImmediatelyPostNonInStmt		632119	0					
ANR	637973	Identifier	false		632119	1					
ANR	637974	ExpressionStatement	isInPreprocessorBeautify = isInPreprocessor	1785:2:54935:54978	632119	14	True				
ANR	637975	AssignmentExpression	isInPreprocessorBeautify = isInPreprocessor		632119	0		=			
ANR	637976	Identifier	isInPreprocessorBeautify		632119	0					
ANR	637977	Identifier	isInPreprocessor		632119	1					
ANR	637978	ExpressionStatement	isInBeautifySQL = isInExecSQL	1786:2:55004:55033	632119	15	True				
ANR	637979	AssignmentExpression	isInBeautifySQL = isInExecSQL		632119	0		=			
ANR	637980	Identifier	isInBeautifySQL		632119	0					
ANR	637981	Identifier	isInExecSQL		632119	1					
ANR	637982	ExpressionStatement	prependEmptyLine = false	1789:1:55066:55090	632119	13	True				
ANR	637983	AssignmentExpression	prependEmptyLine = false		632119	0		=			
ANR	637984	Identifier	prependEmptyLine		632119	0					
ANR	637985	Identifier	false		632119	1					
ANR	637986	ExpressionStatement	assert ( computeChecksumOut ( beautifiedLine ) )	1790:1:55093:55135	632119	14	True				
ANR	637987	CallExpression	assert ( computeChecksumOut ( beautifiedLine ) )		632119	0					
ANR	637988	Callee	assert		632119	0					
ANR	637989	Identifier	assert		632119	0					
ANR	637990	ArgumentList	computeChecksumOut ( beautifiedLine )		632119	1					
ANR	637991	Argument	computeChecksumOut ( beautifiedLine )		632119	0					
ANR	637992	CallExpression	computeChecksumOut ( beautifiedLine )		632119	0					
ANR	637993	Callee	computeChecksumOut		632119	0					
ANR	637994	Identifier	computeChecksumOut		632119	0					
ANR	637995	ArgumentList	beautifiedLine		632119	1					
ANR	637996	Argument	beautifiedLine		632119	0					
ANR	637997	Identifier	beautifiedLine		632119	0					
ANR	637998	ReturnStatement	return beautifiedLine ;	1791:1:55138:55159	632119	15	True				
ANR	637999	Identifier	beautifiedLine		632119	0					
ANR	638000	ReturnType	string		632119	1					
ANR	638001	Identifier	ASFormatter :: nextLine		632119	2					
ANR	638002	ParameterList			632119	3					
ANR	638003	CFGEntryNode	ENTRY		632119		True				
ANR	638004	CFGExitNode	EXIT		632119		True				
ANR	638005	Symbol	foundClassHeader		632119						
ANR	638006	Symbol	shouldAddBraces		632119						
ANR	638007	Symbol	* formattedLine		632119						
ANR	638008	Symbol	& AS_BIT_XOR		632119						
ANR	638009	Symbol	AS_OPERATOR		632119						
ANR	638010	Symbol	ASBase :: findHeader		632119						
ANR	638011	Symbol	firstText		632119						
ANR	638012	Symbol	preDefinitionHeaders		632119						
ANR	638013	Symbol	formattedLine . find_last_not_of		632119						
ANR	638014	Symbol	lineIsEmpty		632119						
ANR	638015	Symbol	trim		632119						
ANR	638016	Symbol	formattingStyle		632119						
ANR	638017	Symbol	len		632119						
ANR	638018	Symbol	NAMESPACE_TYPE		632119						
ANR	638019	Symbol	* assignmentOperators		632119						
ANR	638020	Symbol	size_diff		632119						
ANR	638021	Symbol	isInEnum		632119						
ANR	638022	Symbol	isClassInitializer		632119						
ANR	638023	Symbol	shouldCloseTemplates		632119						
ANR	638024	Symbol	BREAK_BLOCK_TYPE		632119						
ANR	638025	Symbol	AS_MS_ASM		632119						
ANR	638026	Symbol	isFormattingModeOff		632119						
ANR	638027	Symbol	ASBeautifier :: getNextWord		632119						
ANR	638028	Symbol	shouldPadCommas		632119						
ANR	638029	Symbol	isPotentialOperator		632119						
ANR	638030	Symbol	needHeaderOpeningBrace		632119						
ANR	638031	Symbol	nextText		632119						
ANR	638032	Symbol	AS_MS__ASM		632119						
ANR	638033	Symbol	isInLineBreak		632119						
ANR	638034	Symbol	newHeader -> length		632119						
ANR	638035	Symbol	AS_STATIC		632119						
ANR	638036	Symbol	isIndentableProprocessor		632119						
ANR	638037	Symbol	attachClosingBraceMode		632119						
ANR	638038	Symbol	isInLineComment		632119						
ANR	638039	Symbol	& AS_WHILE		632119						
ANR	638040	Symbol	AS_DELEGATE		632119						
ANR	638041	Symbol	shouldReparseCurrentChar		632119						
ANR	638042	Symbol	& AS_SET		632119						
ANR	638043	Symbol	runInIndentChars		632119						
ANR	638044	Symbol	preprocBlockEnd		632119						
ANR	638045	Symbol	* parenStack		632119						
ANR	638046	Symbol	* questionMarkStack		632119						
ANR	638047	Symbol	nextChar		632119						
ANR	638048	Symbol	isInCase		632119						
ANR	638049	Symbol	parenStack		632119						
ANR	638050	Symbol	isImmediatelyPostLineComment		632119						
ANR	638051	Symbol	isInObjCSelector		632119						
ANR	638052	Symbol	isExecSQL		632119						
ANR	638053	Symbol	isCaseHeaderCommentIndent		632119						
ANR	638054	Symbol	* currentHeader		632119						
ANR	638055	Symbol	* firstNum		632119						
ANR	638056	Symbol	enhancer		632119						
ANR	638057	Symbol	isSharpStyle		632119						
ANR	638058	Symbol	isCharImmediatelyPostComment		632119						
ANR	638059	Symbol	isOpeningArrayBrace		632119						
ANR	638060	Symbol	* newHeader		632119						
ANR	638061	Symbol	shouldBreakClosingHeaderBlocks		632119						
ANR	638062	Symbol	& AS_MODULE		632119						
ANR	638063	Symbol	shouldUnPadMethodPrefix		632119						
ANR	638064	Symbol	isCharImmediatelyPostOpenBlock		632119						
ANR	638065	Symbol	AS_ELSE		632119						
ANR	638066	Symbol	& _AS_TRY		632119						
ANR	638067	Symbol	braceType		632119						
ANR	638068	Symbol	shouldPadParensInside		632119						
ANR	638069	Symbol	foundTrailingReturnType		632119						
ANR	638070	Symbol	castOperators		632119						
ANR	638071	Symbol	AS_NEW		632119						
ANR	638072	Symbol	charNum		632119						
ANR	638073	Symbol	passedSemicolon		632119						
ANR	638074	Symbol	isNonInStatementArray		632119						
ANR	638075	Symbol	isInObjCMethodDefinition		632119						
ANR	638076	Symbol	getAlignMethodColon		632119						
ANR	638077	Symbol	getIndentLength		632119						
ANR	638078	Symbol	& AS_SYNCHRONIZED		632119						
ANR	638079	Symbol	isAppendPostBlockEmptyLineRequested		632119						
ANR	638080	Symbol	bracesRemoved		632119						
ANR	638081	Symbol	& AS_REMOVE		632119						
ANR	638082	Symbol	isCharPotentialOperator		632119						
ANR	638083	Symbol	shouldPadMethodPrefix		632119						
ANR	638084	Symbol	appendOpeningBrace		632119						
ANR	638085	Symbol	isInObjCInterface		632119						
ANR	638086	Symbol	braceTypeStack -> back		632119						
ANR	638087	Symbol	shouldPadFirstParen		632119						
ANR	638088	Symbol	isImmediatelyPostObjCMethodPrefix		632119						
ANR	638089	Symbol	elseHeaderFollowsComments		632119						
ANR	638090	Symbol	isLineReady		632119						
ANR	638091	Symbol	parenStack -> back		632119						
ANR	638092	Symbol	ASBase :: peekNextChar		632119						
ANR	638093	Symbol	* currentLine . find_first_not_of		632119						
ANR	638094	Symbol	nonParenHeaders		632119						
ANR	638095	Symbol	shouldPadOperators		632119						
ANR	638096	Symbol	* nextText		632119						
ANR	638097	Symbol	& AS_DEFAULT		632119						
ANR	638098	Symbol	ASBeautifier :: peekNextChar		632119						
ANR	638099	Symbol	isImmediatelyPostPointerOrReference		632119						
ANR	638100	Symbol	isCharImmediatelyPostTemplate		632119						
ANR	638101	Symbol	foundCastOperator		632119						
ANR	638102	Symbol	getNextLineCommentAdjustment		632119						
ANR	638103	Symbol	AS_NS_DURING		632119						
ANR	638104	Symbol	isLegalNameChar		632119						
ANR	638105	Symbol	computeChecksumOut		632119						
ANR	638106	Symbol	isCharImmediatelyPostCloseBlock		632119						
ANR	638107	Symbol	foundClosingHeader		632119						
ANR	638108	Symbol	isPrependPostBlockEmptyLineRequested		632119						
ANR	638109	Symbol	newHeader		632119						
ANR	638110	Symbol	adjustChecksumIn		632119						
ANR	638111	Symbol	isVirgin		632119						
ANR	638112	Symbol	AS_DELETE		632119						
ANR	638113	Symbol	isHeaderInMultiStatementLine		632119						
ANR	638114	Symbol	shouldBreakOneLineHeaders		632119						
ANR	638115	Symbol	& AS_GR_GR_GR		632119						
ANR	638116	Symbol	shouldPadHeader		632119						
ANR	638117	Symbol	isBraceType		632119						
ANR	638118	Symbol	* braceTypeStack -> size		632119						
ANR	638119	Symbol	foundInterfaceHeader		632119						
ANR	638120	Symbol	& AS_CASE		632119						
ANR	638121	Symbol	peekedChar		632119						
ANR	638122	Symbol	formattedLine . find_first_not_of		632119						
ANR	638123	Symbol	getBraceType		632119						
ANR	638124	Symbol	CLASS_TYPE		632119						
ANR	638125	Symbol	sourceIterator		632119						
ANR	638126	Symbol	currentLine . find		632119						
ANR	638127	Symbol	shouldBreakOneLineStatements		632119						
ANR	638128	Symbol	currentLineBeginsWithBrace		632119						
ANR	638129	Symbol	& AS_NAMESPACE		632119						
ANR	638130	Symbol	isImmediatelyPostHeader		632119						
ANR	638131	Symbol	isInPreprocessorBeautify		632119						
ANR	638132	Symbol	isInClassInitializer		632119						
ANR	638133	Symbol	nextLineSpacePadNum		632119						
ANR	638134	Symbol	currentLine . rfind		632119						
ANR	638135	Symbol	isNonParenHeader		632119						
ANR	638136	Symbol	& AS_FOREVER		632119						
ANR	638137	Symbol	isInAsmOneLine		632119						
ANR	638138	Symbol	isDigit		632119						
ANR	638139	Symbol	name		632119						
ANR	638140	Symbol	& AS_AND		632119						
ANR	638141	Symbol	findKeyword		632119						
ANR	638142	Symbol	structStack -> empty		632119						
ANR	638143	Symbol	braceFormatMode		632119						
ANR	638144	Symbol	nullptr		632119						
ANR	638145	Symbol	isSharpStyleWithParen		632119						
ANR	638146	Symbol	structStack -> back		632119						
ANR	638147	Symbol	braceTypeStack		632119						
ANR	638148	Symbol	AS_INTERFACE		632119						
ANR	638149	Symbol	prependEmptyLine		632119						
ANR	638150	Symbol	previousReadyFormattedLineLength		632119						
ANR	638151	Symbol	isInHeader		632119						
ANR	638152	Symbol	isSharpDelegate		632119						
ANR	638153	Symbol	beautifiedLine		632119						
ANR	638154	Symbol	newBraceType		632119						
ANR	638155	Symbol	* sourceIterator		632119						
ANR	638156	Symbol	isImmediatelyPostComment		632119						
ANR	638157	Symbol	NONE_MODE		632119						
ANR	638158	Symbol	isPointerOrReference		632119						
ANR	638159	Symbol	isImmediatelyPostOperator		632119						
ANR	638160	Symbol	endOfAsmReached		632119						
ANR	638161	Symbol	currentLine . find_first_of		632119						
ANR	638162	Symbol	isInPreprocessor		632119						
ANR	638163	Symbol	currentLine . substr		632119						
ANR	638164	Symbol	isCharImmediatelyPostNonInStmt		632119						
ANR	638165	Symbol	end		632119						
ANR	638166	Symbol	isCharImmediatelyPostNewDelete		632119						
ANR	638167	Symbol	foundPreDefinitionHeader		632119						
ANR	638168	Symbol	* preBraceHeaderStack		632119						
ANR	638169	Symbol	currentLine		632119						
ANR	638170	Symbol	isImmediatelyPostReturn		632119						
ANR	638171	Symbol	headers		632119						
ANR	638172	Symbol	AS_UNCHECKED		632119						
ANR	638173	Symbol	isIndentablePreprocessorBlock		632119						
ANR	638174	Symbol	readyFormattedLine		632119						
ANR	638175	Symbol	getNextChar		632119						
ANR	638176	Symbol	& AS_MULT		632119						
ANR	638177	Symbol	false		632119						
ANR	638178	Symbol	start		632119						
ANR	638179	Symbol	passedColon		632119						
ANR	638180	Symbol	& AS_ELSE		632119						
ANR	638181	Symbol	AS_AUTO		632119						
ANR	638182	Symbol	currentLine . c_str		632119						
ANR	638183	Symbol	isInAsm		632119						
ANR	638184	Symbol	isCharImmediatelyPostPointerOrReference		632119						
ANR	638185	Symbol	previousBraceType		632119						
ANR	638186	Symbol	shouldPadParamType		632119						
ANR	638187	Symbol	isCharPotentialHeader		632119						
ANR	638188	Symbol	currentLine . length		632119						
ANR	638189	Symbol	foundNamespaceHeader		632119						
ANR	638190	Symbol	removeBracesFromStatement		632119						
ANR	638191	Symbol	AS_SCOPE_RESOLUTION		632119						
ANR	638192	Symbol	shouldPadReturnType		632119						
ANR	638193	Symbol	NULL_TYPE		632119						
ANR	638194	Symbol	commentLength		632119						
ANR	638195	Symbol	questionMarkStack -> back		632119						
ANR	638196	Symbol	preBraceHeaderStack -> empty		632119						
ANR	638197	Symbol	DEFINITION_TYPE		632119						
ANR	638198	Symbol	shouldPadMethodColon		632119						
ANR	638199	Symbol	preproc . length		632119						
ANR	638200	Symbol	shouldRemoveBraces		632119						
ANR	638201	Symbol	shouldBreakElseIfs		632119						
ANR	638202	Symbol	isPreviousBraceBlockRelated		632119						
ANR	638203	Symbol	beautify		632119						
ANR	638204	Symbol	shouldBreakBlocks		632119						
ANR	638205	Symbol	isWhiteSpace		632119						
ANR	638206	Symbol	lineIsLineCommentOnly		632119						
ANR	638207	Symbol	isCharImmediatelyPostOperator		632119						
ANR	638208	Symbol	STYLE_PICO		632119						
ANR	638209	Symbol	isCharImmediatelyPostLineComment		632119						
ANR	638210	Symbol	& AS_GR		632119						
ANR	638211	Symbol	isJavaStaticConstructor		632119						
ANR	638212	Symbol	& _AS_FINALLY		632119						
ANR	638213	Symbol	isMultiStatementLine		632119						
ANR	638214	Symbol	shouldUnPadParamType		632119						
ANR	638215	Symbol	peekNextChar		632119						
ANR	638216	Symbol	* braceTypeStack		632119						
ANR	638217	Symbol	spacePadNum		632119						
ANR	638218	Symbol	isInObjCReturnType		632119						
ANR	638219	Symbol	readyFormattedLineLength		632119						
ANR	638220	Symbol	previousCommandChar		632119						
ANR	638221	Symbol	index		632119						
ANR	638222	Symbol	AS_CLOSE_BRACE		632119						
ANR	638223	Symbol	braceTypeStack -> size		632119						
ANR	638224	Symbol	isInExecSQL		632119						
ANR	638225	Symbol	AS_NS_HANDLER		632119						
ANR	638226	Symbol	breakCurrentOneLineBlock		632119						
ANR	638227	Symbol	nextText . length		632119						
ANR	638228	Symbol	* charNum		632119						
ANR	638229	Symbol	findHeader		632119						
ANR	638230	Symbol	& AS_CATCH		632119						
ANR	638231	Symbol	isCStyle		632119						
ANR	638232	Symbol	( * newHeader ) . length		632119						
ANR	638233	Symbol	& _AS_EXCEPT		632119						
ANR	638234	Symbol	begin		632119						
ANR	638235	Symbol	shouldUnPadParens		632119						
ANR	638236	Symbol	& AS_GET		632119						
ANR	638237	Symbol	trim ( readyFormattedLine ) . length		632119						
ANR	638238	Symbol	isOneLineBlockReached		632119						
ANR	638239	Symbol	getCurrentWord		632119						
ANR	638240	Symbol	isEmptyLine		632119						
ANR	638241	Symbol	foundQuestionMark		632119						
ANR	638242	Symbol	preproc . substr		632119						
ANR	638243	Symbol	caseHeaderFollowsComments		632119						
ANR	638244	Symbol	isInNamespace		632119						
ANR	638245	Symbol	isInIndentableStruct		632119						
ANR	638246	Symbol	lineCommentNoBeautify		632119						
ANR	638247	Symbol	& AS_IF		632119						
ANR	638248	Symbol	& AS_STRUCT		632119						
ANR	638249	Symbol	isImmediatelyPostThrow		632119						
ANR	638250	Symbol	operators		632119						
ANR	638251	Symbol	isSequenceReached		632119						
ANR	638252	Symbol	isCharImmediatelyPostThrow		632119						
ANR	638253	Symbol	isDigitSeparator		632119						
ANR	638254	Symbol	currentHeader -> length		632119						
ANR	638255	Symbol	bracesAdded		632119						
ANR	638256	Symbol	SINGLE_LINE_TYPE		632119						
ANR	638257	Symbol	* * braceTypeStack		632119						
ANR	638258	Symbol	ASBeautifier :: extractPreprocessorStatement		632119						
ANR	638259	Symbol	& AS_GR_GR		632119						
ANR	638260	Symbol	* structStack		632119						
ANR	638261	Symbol	shouldBreakLineAtNextChar		632119						
ANR	638262	Symbol	AS_ASM		632119						
ANR	638263	Symbol	blockEnd		632119						
ANR	638264	Symbol	isDereferenceOrAddressOf		632119						
ANR	638265	Symbol	AS_RETURN		632119						
ANR	638266	Symbol	formattedLine		632119						
ANR	638267	Symbol	currentHeader		632119						
ANR	638268	Symbol	isImmediatelyPostEmptyBlock		632119						
ANR	638269	Symbol	foundPreCommandHeader		632119						
ANR	638270	Symbol	shouldRemoveNextClosingBrace		632119						
ANR	638271	Symbol	findObjCColonAlignment		632119						
ANR	638272	Symbol	isInBraceRunIn		632119						
ANR	638273	Symbol	squareBracketCount		632119						
ANR	638274	Symbol	peekNextText		632119						
ANR	638275	Symbol	shouldAddOneLineBraces		632119						
ANR	638276	Symbol	shouldKeepLineUnbroken		632119						
ANR	638277	Symbol	preBraceHeaderStack		632119						
ANR	638278	Symbol	isImmediatelyPostPreprocessor		632119						
ANR	638279	Symbol	preproc		632119						
ANR	638280	Symbol	commentStart		632119						
ANR	638281	Symbol	isInAsmBlock		632119						
ANR	638282	Symbol	AS__ASM__		632119						
ANR	638283	Symbol	& AS_BIT_AND		632119						
ANR	638284	Symbol	charNumSave		632119						
ANR	638285	Symbol	foundStructHeader		632119						
ANR	638286	Symbol	shouldBreakOneLineBlocks		632119						
ANR	638287	Symbol	RUN_IN_MODE		632119						
ANR	638288	Symbol	isExternC		632119						
ANR	638289	Symbol	isClosingHeader		632119						
ANR	638290	Symbol	isInQuote		632119						
ANR	638291	Symbol	STRUCT_TYPE		632119						
ANR	638292	Symbol	isInTemplate		632119						
ANR	638293	Symbol	firstNum		632119						
ANR	638294	Symbol	* currentLine		632119						
ANR	638295	Symbol	isBeforeAnyLineEndComment		632119						
ANR	638296	Symbol	& AS_FOREACH		632119						
ANR	638297	Symbol	find		632119						
ANR	638298	Symbol	shouldConvertTabs		632119						
ANR	638299	Symbol	structStack		632119						
ANR	638300	Symbol	isOkToBreakBlock		632119						
ANR	638301	Symbol	AS_ENUM		632119						
ANR	638302	Symbol	isInComment		632119						
ANR	638303	Symbol	findOperator		632119						
ANR	638304	Symbol	sourceIterator -> tellg		632119						
ANR	638305	Symbol	& AS_LAMBDA		632119						
ANR	638306	Symbol	currentChar		632119						
ANR	638307	Symbol	isImmediatelyPostCommentOnly		632119						
ANR	638308	Symbol	templateDepth		632119						
ANR	638309	Symbol	objCColonAlignSubsequent		632119						
ANR	638310	Symbol	COMMAND_TYPE		632119						
ANR	638311	Symbol	previousChar		632119						
ANR	638312	Symbol	lineIsCommentOnly		632119						
ANR	638313	Symbol	isStructAccessModified		632119						
ANR	638314	Symbol	isCharImmediatelyPostReturn		632119						
ANR	638315	Symbol	true		632119						
ANR	638316	Symbol	preCommandHeaders		632119						
ANR	638317	Symbol	& AS_DO		632119						
ANR	638318	Symbol	AS_SELECTOR		632119						
ANR	638319	Symbol	isImmediatelyPostNonInStmt		632119						
ANR	638320	Symbol	isInExternC		632119						
ANR	638321	Symbol	previousNonWSChar		632119						
ANR	638322	Symbol	AS_EXTERN		632119						
ANR	638323	Symbol	name . length		632119						
ANR	638324	Symbol	assignmentOperators		632119						
ANR	638325	Symbol	foundPreCommandMacro		632119						
ANR	638326	Symbol	maxCodeLength		632119						
ANR	638327	Symbol	isNextCharOpeningBrace		632119						
ANR	638328	Symbol	string :: npos		632119						
ANR	638329	Symbol	isOperatorPaddingDisabled		632119						
ANR	638330	Symbol	isPotentialHeader		632119						
ANR	638331	Symbol	shouldPadParensOutside		632119						
ANR	638332	Symbol	AS_SEMICOLON		632119						
ANR	638333	Symbol	isInBeautifySQL		632119						
ANR	638334	Symbol	isBeforeAnyComment		632119						
ANR	638335	Symbol	formattedLine . find		632119						
ANR	638336	Symbol	& AS_EQUAL		632119						
ANR	638337	Symbol	startChar		632119						
ANR	638338	Symbol	AS_THROW		632119						
ANR	638339	Symbol	& AS_INTERFACE		632119						
ANR	638340	Symbol	shouldUnPadReturnType		632119						
ANR	638341	Symbol	addBracesToStatement		632119						
ANR	638342	Symbol	objCColonAlign		632119						
ANR	638343	Symbol	currentLine . compare		632119						
ANR	638344	Symbol	isImmediatelyPostNewDelete		632119						
ANR	638345	Symbol	lastText		632119						
ANR	638346	Symbol	isPreviousCharPostComment		632119						
ANR	638347	Symbol	questionMarkStack		632119						
ANR	638348	Symbol	isIndentableProprocessorBlock		632119						
ANR	638349	Symbol	& AS_USING		632119						
ANR	638350	Symbol	rtrim		632119						
ANR	638351	Symbol	ARRAY_TYPE		632119						
ANR	638352	Symbol	isInIndentablePreproc		632119						
ANR	638353	Symbol	questionMarkStack -> empty		632119						
ANR	638354	Symbol	currentLine . find_first_not_of		632119						
ANR	638355	Symbol	getCurrentLineCommentAdjustment		632119						
ANR	638356	Symbol	isInPotentialCalculation		632119						
ANR	638357	Symbol	shouldIndentPreprocBlock		632119						
ANR	638358	Symbol	isImmediatelyPostTemplate		632119						
ANR	638359	Symbol	& AS_ADD		632119						
ANR	638360	Symbol	& AS_CLASS		632119						
ANR	638361	Symbol	& AS_GCC_MIN_ASSIGN		632119						
ANR	638362	Symbol	isInVirginLine		632119						
ANR	638363	Symbol	formattedLine . length		632119						
ANR	638364	Symbol	lineCommentNoIndent		632119						
ANR	638365	Symbol	isJavaStyle		632119						
ANR	638366	Symbol	previousHeader		632119						
ANR	638367	Symbol	isElseHeaderIndent		632119						
ANR	638368	Symbol	preBraceHeaderStack -> back		632119						
ANR	638369	Symbol	runInIndentContinuation		632119						
ANR	638370	Function	ASFormatter :: hasMoreLines	1799:0:55297:55365							
ANR	638371	FunctionDef	ASFormatter :: hasMoreLines ()		638370	0					
ANR	638372	CompoundStatement		1800:0:55336:55365	638370	0					
ANR	638373	ReturnStatement	return ! endOfCodeReached ;	1801:1:55339:55363	638370	0	True				
ANR	638374	UnaryOperationExpression	! endOfCodeReached		638370	0					
ANR	638375	UnaryOperator	!		638370	0					
ANR	638376	Identifier	endOfCodeReached		638370	1					
ANR	638377	ReturnType	bool		638370	1					
ANR	638378	Identifier	ASFormatter :: hasMoreLines		638370	2					
ANR	638379	ParameterList			638370	3					
ANR	638380	CFGEntryNode	ENTRY		638370		True				
ANR	638381	CFGExitNode	EXIT		638370		True				
ANR	638382	Symbol	endOfCodeReached		638370						
ANR	638383	Function	ASFormatter :: isBraceType	1807:0:55418:55564							
ANR	638384	FunctionDef	"ASFormatter :: isBraceType (BraceType a , BraceType b)"		638383	0					
ANR	638385	CompoundStatement		1808:0:55480:55564	638383	0					
ANR	638386	IfStatement	if ( a == NULL_TYPE || b == NULL_TYPE )		638383	0					
ANR	638387	Condition	a == NULL_TYPE || b == NULL_TYPE	1809:5:55487:55518	638383	0	True				
ANR	638388	OrExpression	a == NULL_TYPE || b == NULL_TYPE		638383	0		||			
ANR	638389	EqualityExpression	a == NULL_TYPE		638383	0		==			
ANR	638390	Identifier	a		638383	0					
ANR	638391	Identifier	NULL_TYPE		638383	1					
ANR	638392	EqualityExpression	b == NULL_TYPE		638383	1		==			
ANR	638393	Identifier	b		638383	0					
ANR	638394	Identifier	NULL_TYPE		638383	1					
ANR	638395	ReturnStatement	return ( a == b ) ;	1810:2:55523:55538	638383	1	True				
ANR	638396	EqualityExpression	a == b		638383	0		==			
ANR	638397	Identifier	a		638383	0					
ANR	638398	Identifier	b		638383	1					
ANR	638399	ReturnStatement	return ( ( a & b ) == b ) ;	1811:1:55541:55562	638383	1	True				
ANR	638400	EqualityExpression	( a & b ) == b		638383	0		==			
ANR	638401	BitAndExpression	a & b		638383	0		&			
ANR	638402	Identifier	a		638383	0					
ANR	638403	Identifier	b		638383	1					
ANR	638404	Identifier	b		638383	1					
ANR	638405	ReturnType	bool		638383	1					
ANR	638406	Identifier	ASFormatter :: isBraceType		638383	2					
ANR	638407	ParameterList	"BraceType a , BraceType b"		638383	3					
ANR	638408	Parameter	BraceType a	1807:30:55448:55458	638383	0	True				
ANR	638409	ParameterType	BraceType		638383	0					
ANR	638410	Identifier	a		638383	1					
ANR	638411	Parameter	BraceType b	1807:43:55461:55471	638383	1	True				
ANR	638412	ParameterType	BraceType		638383	0					
ANR	638413	Identifier	b		638383	1					
ANR	638414	CFGEntryNode	ENTRY		638383		True				
ANR	638415	CFGExitNode	EXIT		638383		True				
ANR	638416	Symbol	a		638383						
ANR	638417	Symbol	b		638383						
ANR	638418	Symbol	NULL_TYPE		638383						
ANR	638419	Function	ASFormatter :: setFormattingStyle	1819:0:55653:55737							
ANR	638420	FunctionDef	ASFormatter :: setFormattingStyle (FormatStyle style)		638419	0					
ANR	638421	CompoundStatement		1820:0:55709:55737	638419	0					
ANR	638422	ExpressionStatement	formattingStyle = style	1821:1:55712:55735	638419	0	True				
ANR	638423	AssignmentExpression	formattingStyle = style		638419	0		=			
ANR	638424	Identifier	formattingStyle		638419	0					
ANR	638425	Identifier	style		638419	1					
ANR	638426	ReturnType	void		638419	1					
ANR	638427	Identifier	ASFormatter :: setFormattingStyle		638419	2					
ANR	638428	ParameterList	FormatStyle style		638419	3					
ANR	638429	Parameter	FormatStyle style	1819:37:55690:55706	638419	0	True				
ANR	638430	ParameterType	FormatStyle		638419	0					
ANR	638431	Identifier	style		638419	1					
ANR	638432	CFGEntryNode	ENTRY		638419		True				
ANR	638433	CFGExitNode	EXIT		638419		True				
ANR	638434	Symbol	formattingStyle		638419						
ANR	638435	Symbol	style		638419						
ANR	638436	Function	ASFormatter :: setAddBracesMode	1832:0:55975:56050							
ANR	638437	FunctionDef	ASFormatter :: setAddBracesMode (bool state)		638436	0					
ANR	638438	CompoundStatement		1833:0:56022:56050	638436	0					
ANR	638439	ExpressionStatement	shouldAddBraces = state	1834:1:56025:56048	638436	0	True				
ANR	638440	AssignmentExpression	shouldAddBraces = state		638436	0		=			
ANR	638441	Identifier	shouldAddBraces		638436	0					
ANR	638442	Identifier	state		638436	1					
ANR	638443	ReturnType	void		638436	1					
ANR	638444	Identifier	ASFormatter :: setAddBracesMode		638436	2					
ANR	638445	ParameterList	bool state		638436	3					
ANR	638446	Parameter	bool state	1832:35:56010:56019	638436	0	True				
ANR	638447	ParameterType	bool		638436	0					
ANR	638448	Identifier	state		638436	1					
ANR	638449	CFGEntryNode	ENTRY		638436		True				
ANR	638450	CFGExitNode	EXIT		638436		True				
ANR	638451	Symbol	shouldAddBraces		638436						
ANR	638452	Symbol	state		638436						
ANR	638453	Function	ASFormatter :: setAddOneLineBracesMode	1845:0:56324:56439							
ANR	638454	FunctionDef	ASFormatter :: setAddOneLineBracesMode (bool state)		638453	0					
ANR	638455	CompoundStatement		1846:0:56378:56439	638453	0					
ANR	638456	ExpressionStatement	shouldAddBraces = state	1847:1:56381:56404	638453	0	True				
ANR	638457	AssignmentExpression	shouldAddBraces = state		638453	0		=			
ANR	638458	Identifier	shouldAddBraces		638453	0					
ANR	638459	Identifier	state		638453	1					
ANR	638460	ExpressionStatement	shouldAddOneLineBraces = state	1848:1:56407:56437	638453	1	True				
ANR	638461	AssignmentExpression	shouldAddOneLineBraces = state		638453	0		=			
ANR	638462	Identifier	shouldAddOneLineBraces		638453	0					
ANR	638463	Identifier	state		638453	1					
ANR	638464	ReturnType	void		638453	1					
ANR	638465	Identifier	ASFormatter :: setAddOneLineBracesMode		638453	2					
ANR	638466	ParameterList	bool state		638453	3					
ANR	638467	Parameter	bool state	1845:42:56366:56375	638453	0	True				
ANR	638468	ParameterType	bool		638453	0					
ANR	638469	Identifier	state		638453	1					
ANR	638470	CFGEntryNode	ENTRY		638453		True				
ANR	638471	CFGExitNode	EXIT		638453		True				
ANR	638472	Symbol	shouldAddBraces		638453						
ANR	638473	Symbol	state		638453						
ANR	638474	Symbol	shouldAddOneLineBraces		638453						
ANR	638475	Function	ASFormatter :: setRemoveBracesMode	1859:0:56691:56772							
ANR	638476	FunctionDef	ASFormatter :: setRemoveBracesMode (bool state)		638475	0					
ANR	638477	CompoundStatement		1860:0:56741:56772	638475	0					
ANR	638478	ExpressionStatement	shouldRemoveBraces = state	1861:1:56744:56770	638475	0	True				
ANR	638479	AssignmentExpression	shouldRemoveBraces = state		638475	0		=			
ANR	638480	Identifier	shouldRemoveBraces		638475	0					
ANR	638481	Identifier	state		638475	1					
ANR	638482	ReturnType	void		638475	1					
ANR	638483	Identifier	ASFormatter :: setRemoveBracesMode		638475	2					
ANR	638484	ParameterList	bool state		638475	3					
ANR	638485	Parameter	bool state	1859:38:56729:56738	638475	0	True				
ANR	638486	ParameterType	bool		638475	0					
ANR	638487	Identifier	state		638475	1					
ANR	638488	CFGEntryNode	ENTRY		638475		True				
ANR	638489	CFGExitNode	EXIT		638475		True				
ANR	638490	Symbol	shouldRemoveBraces		638475						
ANR	638491	Symbol	state		638475						
ANR	638492	Function	ASFormatter :: setAddBracketsMode	1867:0:56928:57005							
ANR	638493	FunctionDef	ASFormatter :: setAddBracketsMode (bool state)		638492	0					
ANR	638494	CompoundStatement		1868:0:56977:57005	638492	0					
ANR	638495	ExpressionStatement	setAddBracesMode ( state )	1869:1:56980:57003	638492	0	True				
ANR	638496	CallExpression	setAddBracesMode ( state )		638492	0					
ANR	638497	Callee	setAddBracesMode		638492	0					
ANR	638498	Identifier	setAddBracesMode		638492	0					
ANR	638499	ArgumentList	state		638492	1					
ANR	638500	Argument	state		638492	0					
ANR	638501	Identifier	state		638492	0					
ANR	638502	ReturnType	void		638492	1					
ANR	638503	Identifier	ASFormatter :: setAddBracketsMode		638492	2					
ANR	638504	ParameterList	bool state		638492	3					
ANR	638505	Parameter	bool state	1867:37:56965:56974	638492	0	True				
ANR	638506	ParameterType	bool		638492	0					
ANR	638507	Identifier	state		638492	1					
ANR	638508	CFGEntryNode	ENTRY		638492		True				
ANR	638509	CFGExitNode	EXIT		638492		True				
ANR	638510	Symbol	state		638492						
ANR	638511	Function	ASFormatter :: setAddOneLineBracketsMode	1875:0:57161:57252							
ANR	638512	FunctionDef	ASFormatter :: setAddOneLineBracketsMode (bool state)		638511	0					
ANR	638513	CompoundStatement		1876:0:57217:57252	638511	0					
ANR	638514	ExpressionStatement	setAddOneLineBracesMode ( state )	1877:1:57220:57250	638511	0	True				
ANR	638515	CallExpression	setAddOneLineBracesMode ( state )		638511	0					
ANR	638516	Callee	setAddOneLineBracesMode		638511	0					
ANR	638517	Identifier	setAddOneLineBracesMode		638511	0					
ANR	638518	ArgumentList	state		638511	1					
ANR	638519	Argument	state		638511	0					
ANR	638520	Identifier	state		638511	0					
ANR	638521	ReturnType	void		638511	1					
ANR	638522	Identifier	ASFormatter :: setAddOneLineBracketsMode		638511	2					
ANR	638523	ParameterList	bool state		638511	3					
ANR	638524	Parameter	bool state	1875:44:57205:57214	638511	0	True				
ANR	638525	ParameterType	bool		638511	0					
ANR	638526	Identifier	state		638511	1					
ANR	638527	CFGEntryNode	ENTRY		638511		True				
ANR	638528	CFGExitNode	EXIT		638511		True				
ANR	638529	Symbol	state		638511						
ANR	638530	Function	ASFormatter :: setRemoveBracketsMode	1883:0:57408:57491							
ANR	638531	FunctionDef	ASFormatter :: setRemoveBracketsMode (bool state)		638530	0					
ANR	638532	CompoundStatement		1884:0:57460:57491	638530	0					
ANR	638533	ExpressionStatement	setRemoveBracesMode ( state )	1885:1:57463:57489	638530	0	True				
ANR	638534	CallExpression	setRemoveBracesMode ( state )		638530	0					
ANR	638535	Callee	setRemoveBracesMode		638530	0					
ANR	638536	Identifier	setRemoveBracesMode		638530	0					
ANR	638537	ArgumentList	state		638530	1					
ANR	638538	Argument	state		638530	0					
ANR	638539	Identifier	state		638530	0					
ANR	638540	ReturnType	void		638530	1					
ANR	638541	Identifier	ASFormatter :: setRemoveBracketsMode		638530	2					
ANR	638542	ParameterList	bool state		638530	3					
ANR	638543	Parameter	bool state	1883:40:57448:57457	638530	0	True				
ANR	638544	ParameterType	bool		638530	0					
ANR	638545	Identifier	state		638530	1					
ANR	638546	CFGEntryNode	ENTRY		638530		True				
ANR	638547	CFGExitNode	EXIT		638530		True				
ANR	638548	Symbol	state		638530						
ANR	638549	Function	ASFormatter :: setBreakClosingHeaderBracketsMode	1891:0:57647:57754							
ANR	638550	FunctionDef	ASFormatter :: setBreakClosingHeaderBracketsMode (bool state)		638549	0					
ANR	638551	CompoundStatement		1892:0:57711:57754	638549	0					
ANR	638552	ExpressionStatement	setBreakClosingHeaderBracesMode ( state )	1893:1:57714:57752	638549	0	True				
ANR	638553	CallExpression	setBreakClosingHeaderBracesMode ( state )		638549	0					
ANR	638554	Callee	setBreakClosingHeaderBracesMode		638549	0					
ANR	638555	Identifier	setBreakClosingHeaderBracesMode		638549	0					
ANR	638556	ArgumentList	state		638549	1					
ANR	638557	Argument	state		638549	0					
ANR	638558	Identifier	state		638549	0					
ANR	638559	ReturnType	void		638549	1					
ANR	638560	Identifier	ASFormatter :: setBreakClosingHeaderBracketsMode		638549	2					
ANR	638561	ParameterList	bool state		638549	3					
ANR	638562	Parameter	bool state	1891:52:57699:57708	638549	0	True				
ANR	638563	ParameterType	bool		638549	0					
ANR	638564	Identifier	state		638549	1					
ANR	638565	CFGEntryNode	ENTRY		638549		True				
ANR	638566	CFGExitNode	EXIT		638549		True				
ANR	638567	Symbol	state		638549						
ANR	638568	Function	ASFormatter :: setBraceFormatMode	1903:0:57865:57945							
ANR	638569	FunctionDef	ASFormatter :: setBraceFormatMode (BraceMode mode)		638568	0					
ANR	638570	CompoundStatement		1904:0:57918:57945	638568	0					
ANR	638571	ExpressionStatement	braceFormatMode = mode	1905:1:57921:57943	638568	0	True				
ANR	638572	AssignmentExpression	braceFormatMode = mode		638568	0		=			
ANR	638573	Identifier	braceFormatMode		638568	0					
ANR	638574	Identifier	mode		638568	1					
ANR	638575	ReturnType	void		638568	1					
ANR	638576	Identifier	ASFormatter :: setBraceFormatMode		638568	2					
ANR	638577	ParameterList	BraceMode mode		638568	3					
ANR	638578	Parameter	BraceMode mode	1903:37:57902:57915	638568	0	True				
ANR	638579	ParameterType	BraceMode		638568	0					
ANR	638580	Identifier	mode		638568	1					
ANR	638581	CFGEntryNode	ENTRY		638568		True				
ANR	638582	CFGExitNode	EXIT		638568		True				
ANR	638583	Symbol	mode		638568						
ANR	638584	Symbol	braceFormatMode		638568						
ANR	638585	Function	ASFormatter :: setBreakAfterMode	1913:0:58057:58145							
ANR	638586	FunctionDef	ASFormatter :: setBreakAfterMode (bool state)		638585	0					
ANR	638587	CompoundStatement		1914:0:58105:58145	638585	0					
ANR	638588	ExpressionStatement	shouldBreakLineAfterLogical = state	1915:1:58108:58143	638585	0	True				
ANR	638589	AssignmentExpression	shouldBreakLineAfterLogical = state		638585	0		=			
ANR	638590	Identifier	shouldBreakLineAfterLogical		638585	0					
ANR	638591	Identifier	state		638585	1					
ANR	638592	ReturnType	void		638585	1					
ANR	638593	Identifier	ASFormatter :: setBreakAfterMode		638585	2					
ANR	638594	ParameterList	bool state		638585	3					
ANR	638595	Parameter	bool state	1913:36:58093:58102	638585	0	True				
ANR	638596	ParameterType	bool		638585	0					
ANR	638597	Identifier	state		638585	1					
ANR	638598	CFGEntryNode	ENTRY		638585		True				
ANR	638599	CFGExitNode	EXIT		638585		True				
ANR	638600	Symbol	shouldBreakLineAfterLogical		638585						
ANR	638601	Symbol	state		638585						
ANR	638602	Function	ASFormatter :: setBreakClosingHeaderBracesMode	1927:0:58492:58597							
ANR	638603	FunctionDef	ASFormatter :: setBreakClosingHeaderBracesMode (bool state)		638602	0					
ANR	638604	CompoundStatement		1928:0:58554:58597	638602	0					
ANR	638605	ExpressionStatement	shouldBreakClosingHeaderBraces = state	1929:1:58557:58595	638602	0	True				
ANR	638606	AssignmentExpression	shouldBreakClosingHeaderBraces = state		638602	0		=			
ANR	638607	Identifier	shouldBreakClosingHeaderBraces		638602	0					
ANR	638608	Identifier	state		638602	1					
ANR	638609	ReturnType	void		638602	1					
ANR	638610	Identifier	ASFormatter :: setBreakClosingHeaderBracesMode		638602	2					
ANR	638611	ParameterList	bool state		638602	3					
ANR	638612	Parameter	bool state	1927:50:58542:58551	638602	0	True				
ANR	638613	ParameterType	bool		638602	0					
ANR	638614	Identifier	state		638602	1					
ANR	638615	CFGEntryNode	ENTRY		638602		True				
ANR	638616	CFGExitNode	EXIT		638602		True				
ANR	638617	Symbol	shouldBreakClosingHeaderBraces		638602						
ANR	638618	Symbol	state		638602						
ANR	638619	Function	ASFormatter :: setBreakElseIfsMode	1940:0:58873:58954							
ANR	638620	FunctionDef	ASFormatter :: setBreakElseIfsMode (bool state)		638619	0					
ANR	638621	CompoundStatement		1941:0:58923:58954	638619	0					
ANR	638622	ExpressionStatement	shouldBreakElseIfs = state	1942:1:58926:58952	638619	0	True				
ANR	638623	AssignmentExpression	shouldBreakElseIfs = state		638619	0		=			
ANR	638624	Identifier	shouldBreakElseIfs		638619	0					
ANR	638625	Identifier	state		638619	1					
ANR	638626	ReturnType	void		638619	1					
ANR	638627	Identifier	ASFormatter :: setBreakElseIfsMode		638619	2					
ANR	638628	ParameterList	bool state		638619	3					
ANR	638629	Parameter	bool state	1940:38:58911:58920	638619	0	True				
ANR	638630	ParameterType	bool		638619	0					
ANR	638631	Identifier	state		638619	1					
ANR	638632	CFGEntryNode	ENTRY		638619		True				
ANR	638633	CFGExitNode	EXIT		638619		True				
ANR	638634	Symbol	shouldBreakElseIfs		638619						
ANR	638635	Symbol	state		638619						
ANR	638636	Function	ASFormatter :: setCommaPaddingMode	1953:0:59196:59274							
ANR	638637	FunctionDef	ASFormatter :: setCommaPaddingMode (bool state)		638636	0					
ANR	638638	CompoundStatement		1954:0:59246:59274	638636	0					
ANR	638639	ExpressionStatement	shouldPadCommas = state	1955:1:59249:59272	638636	0	True				
ANR	638640	AssignmentExpression	shouldPadCommas = state		638636	0		=			
ANR	638641	Identifier	shouldPadCommas		638636	0					
ANR	638642	Identifier	state		638636	1					
ANR	638643	ReturnType	void		638636	1					
ANR	638644	Identifier	ASFormatter :: setCommaPaddingMode		638636	2					
ANR	638645	ParameterList	bool state		638636	3					
ANR	638646	Parameter	bool state	1953:38:59234:59243	638636	0	True				
ANR	638647	ParameterType	bool		638636	0					
ANR	638648	Identifier	state		638636	1					
ANR	638649	CFGEntryNode	ENTRY		638636		True				
ANR	638650	CFGExitNode	EXIT		638636		True				
ANR	638651	Symbol	shouldPadCommas		638636						
ANR	638652	Symbol	state		638636						
ANR	638653	Function	ASFormatter :: setMaxCodeLength	1963:0:59362:59430							
ANR	638654	FunctionDef	ASFormatter :: setMaxCodeLength (int max)		638653	0					
ANR	638655	CompoundStatement		1964:0:59406:59430	638653	0					
ANR	638656	ExpressionStatement	maxCodeLength = max	1965:1:59409:59428	638653	0	True				
ANR	638657	AssignmentExpression	maxCodeLength = max		638653	0		=			
ANR	638658	Identifier	maxCodeLength		638653	0					
ANR	638659	Identifier	max		638653	1					
ANR	638660	ReturnType	void		638653	1					
ANR	638661	Identifier	ASFormatter :: setMaxCodeLength		638653	2					
ANR	638662	ParameterList	int max		638653	3					
ANR	638663	Parameter	int max	1963:35:59397:59403	638653	0	True				
ANR	638664	ParameterType	int		638653	0					
ANR	638665	Identifier	max		638653	1					
ANR	638666	CFGEntryNode	ENTRY		638653		True				
ANR	638667	CFGExitNode	EXIT		638653		True				
ANR	638668	Symbol	max		638653						
ANR	638669	Symbol	maxCodeLength		638653						
ANR	638670	Function	ASFormatter :: setOperatorPaddingMode	1976:0:59658:59742							
ANR	638671	FunctionDef	ASFormatter :: setOperatorPaddingMode (bool state)		638670	0					
ANR	638672	CompoundStatement		1977:0:59711:59742	638670	0					
ANR	638673	ExpressionStatement	shouldPadOperators = state	1978:1:59714:59740	638670	0	True				
ANR	638674	AssignmentExpression	shouldPadOperators = state		638670	0		=			
ANR	638675	Identifier	shouldPadOperators		638670	0					
ANR	638676	Identifier	state		638670	1					
ANR	638677	ReturnType	void		638670	1					
ANR	638678	Identifier	ASFormatter :: setOperatorPaddingMode		638670	2					
ANR	638679	ParameterList	bool state		638670	3					
ANR	638680	Parameter	bool state	1976:41:59699:59708	638670	0	True				
ANR	638681	ParameterType	bool		638670	0					
ANR	638682	Identifier	state		638670	1					
ANR	638683	CFGEntryNode	ENTRY		638670		True				
ANR	638684	CFGExitNode	EXIT		638670		True				
ANR	638685	Symbol	shouldPadOperators		638670						
ANR	638686	Symbol	state		638670						
ANR	638687	Function	ASFormatter :: setParensOutsidePaddingMode	1989:0:59985:60078							
ANR	638688	FunctionDef	ASFormatter :: setParensOutsidePaddingMode (bool state)		638687	0					
ANR	638689	CompoundStatement		1990:0:60043:60078	638687	0					
ANR	638690	ExpressionStatement	shouldPadParensOutside = state	1991:1:60046:60076	638687	0	True				
ANR	638691	AssignmentExpression	shouldPadParensOutside = state		638687	0		=			
ANR	638692	Identifier	shouldPadParensOutside		638687	0					
ANR	638693	Identifier	state		638687	1					
ANR	638694	ReturnType	void		638687	1					
ANR	638695	Identifier	ASFormatter :: setParensOutsidePaddingMode		638687	2					
ANR	638696	ParameterList	bool state		638687	3					
ANR	638697	Parameter	bool state	1989:46:60031:60040	638687	0	True				
ANR	638698	ParameterType	bool		638687	0					
ANR	638699	Identifier	state		638687	1					
ANR	638700	CFGEntryNode	ENTRY		638687		True				
ANR	638701	CFGExitNode	EXIT		638687		True				
ANR	638702	Symbol	state		638687						
ANR	638703	Symbol	shouldPadParensOutside		638687						
ANR	638704	Function	ASFormatter :: setParensInsidePaddingMode	2002:0:60320:60411							
ANR	638705	FunctionDef	ASFormatter :: setParensInsidePaddingMode (bool state)		638704	0					
ANR	638706	CompoundStatement		2003:0:60377:60411	638704	0					
ANR	638707	ExpressionStatement	shouldPadParensInside = state	2004:1:60380:60409	638704	0	True				
ANR	638708	AssignmentExpression	shouldPadParensInside = state		638704	0		=			
ANR	638709	Identifier	shouldPadParensInside		638704	0					
ANR	638710	Identifier	state		638704	1					
ANR	638711	ReturnType	void		638704	1					
ANR	638712	Identifier	ASFormatter :: setParensInsidePaddingMode		638704	2					
ANR	638713	ParameterList	bool state		638704	3					
ANR	638714	Parameter	bool state	2002:45:60365:60374	638704	0	True				
ANR	638715	ParameterType	bool		638704	0					
ANR	638716	Identifier	state		638704	1					
ANR	638717	CFGEntryNode	ENTRY		638704		True				
ANR	638718	CFGExitNode	EXIT		638704		True				
ANR	638719	Symbol	shouldPadParensInside		638704						
ANR	638720	Symbol	state		638704						
ANR	638721	Function	ASFormatter :: setParensFirstPaddingMode	2015:0:60668:60756							
ANR	638722	FunctionDef	ASFormatter :: setParensFirstPaddingMode (bool state)		638721	0					
ANR	638723	CompoundStatement		2016:0:60724:60756	638721	0					
ANR	638724	ExpressionStatement	shouldPadFirstParen = state	2017:1:60727:60754	638721	0	True				
ANR	638725	AssignmentExpression	shouldPadFirstParen = state		638721	0		=			
ANR	638726	Identifier	shouldPadFirstParen		638721	0					
ANR	638727	Identifier	state		638721	1					
ANR	638728	ReturnType	void		638721	1					
ANR	638729	Identifier	ASFormatter :: setParensFirstPaddingMode		638721	2					
ANR	638730	ParameterList	bool state		638721	3					
ANR	638731	Parameter	bool state	2015:44:60712:60721	638721	0	True				
ANR	638732	ParameterType	bool		638721	0					
ANR	638733	Identifier	state		638721	1					
ANR	638734	CFGEntryNode	ENTRY		638721		True				
ANR	638735	CFGExitNode	EXIT		638721		True				
ANR	638736	Symbol	shouldPadFirstParen		638721						
ANR	638737	Symbol	state		638721						
ANR	638738	Function	ASFormatter :: setParensHeaderPaddingMode	2028:0:60958:61043							
ANR	638739	FunctionDef	ASFormatter :: setParensHeaderPaddingMode (bool state)		638738	0					
ANR	638740	CompoundStatement		2029:0:61015:61043	638738	0					
ANR	638741	ExpressionStatement	shouldPadHeader = state	2030:1:61018:61041	638738	0	True				
ANR	638742	AssignmentExpression	shouldPadHeader = state		638738	0		=			
ANR	638743	Identifier	shouldPadHeader		638738	0					
ANR	638744	Identifier	state		638738	1					
ANR	638745	ReturnType	void		638738	1					
ANR	638746	Identifier	ASFormatter :: setParensHeaderPaddingMode		638738	2					
ANR	638747	ParameterList	bool state		638738	3					
ANR	638748	Parameter	bool state	2028:45:61003:61012	638738	0	True				
ANR	638749	ParameterType	bool		638738	0					
ANR	638750	Identifier	state		638738	1					
ANR	638751	CFGEntryNode	ENTRY		638738		True				
ANR	638752	CFGExitNode	EXIT		638738		True				
ANR	638753	Symbol	shouldPadHeader		638738						
ANR	638754	Symbol	state		638738						
ANR	638755	Function	ASFormatter :: setParensUnPaddingMode	2041:0:61292:61375							
ANR	638756	FunctionDef	ASFormatter :: setParensUnPaddingMode (bool state)		638755	0					
ANR	638757	CompoundStatement		2042:0:61345:61375	638755	0					
ANR	638758	ExpressionStatement	shouldUnPadParens = state	2043:1:61348:61373	638755	0	True				
ANR	638759	AssignmentExpression	shouldUnPadParens = state		638755	0		=			
ANR	638760	Identifier	shouldUnPadParens		638755	0					
ANR	638761	Identifier	state		638755	1					
ANR	638762	ReturnType	void		638755	1					
ANR	638763	Identifier	ASFormatter :: setParensUnPaddingMode		638755	2					
ANR	638764	ParameterList	bool state		638755	3					
ANR	638765	Parameter	bool state	2041:41:61333:61342	638755	0	True				
ANR	638766	ParameterType	bool		638755	0					
ANR	638767	Identifier	state		638755	1					
ANR	638768	CFGEntryNode	ENTRY		638755		True				
ANR	638769	CFGExitNode	EXIT		638755		True				
ANR	638770	Symbol	state		638755						
ANR	638771	Symbol	shouldUnPadParens		638755						
ANR	638772	Function	ASFormatter :: setPreprocBlockIndent	2052:0:61543:61632							
ANR	638773	FunctionDef	ASFormatter :: setPreprocBlockIndent (bool state)		638772	0					
ANR	638774	CompoundStatement		2053:0:61595:61632	638772	0					
ANR	638775	ExpressionStatement	shouldIndentPreprocBlock = state	2054:1:61598:61630	638772	0	True				
ANR	638776	AssignmentExpression	shouldIndentPreprocBlock = state		638772	0		=			
ANR	638777	Identifier	shouldIndentPreprocBlock		638772	0					
ANR	638778	Identifier	state		638772	1					
ANR	638779	ReturnType	void		638772	1					
ANR	638780	Identifier	ASFormatter :: setPreprocBlockIndent		638772	2					
ANR	638781	ParameterList	bool state		638772	3					
ANR	638782	Parameter	bool state	2052:40:61583:61592	638772	0	True				
ANR	638783	ParameterType	bool		638772	0					
ANR	638784	Identifier	state		638772	1					
ANR	638785	CFGEntryNode	ENTRY		638772		True				
ANR	638786	CFGExitNode	EXIT		638772		True				
ANR	638787	Symbol	shouldIndentPreprocBlock		638772						
ANR	638788	Symbol	state		638772						
ANR	638789	Function	ASFormatter :: setStripCommentPrefix	2065:0:61858:61947							
ANR	638790	FunctionDef	ASFormatter :: setStripCommentPrefix (bool state)		638789	0					
ANR	638791	CompoundStatement		2066:0:61910:61947	638789	0					
ANR	638792	ExpressionStatement	shouldStripCommentPrefix = state	2067:1:61913:61945	638789	0	True				
ANR	638793	AssignmentExpression	shouldStripCommentPrefix = state		638789	0		=			
ANR	638794	Identifier	shouldStripCommentPrefix		638789	0					
ANR	638795	Identifier	state		638789	1					
ANR	638796	ReturnType	void		638789	1					
ANR	638797	Identifier	ASFormatter :: setStripCommentPrefix		638789	2					
ANR	638798	ParameterList	bool state		638789	3					
ANR	638799	Parameter	bool state	2065:40:61898:61907	638789	0	True				
ANR	638800	ParameterType	bool		638789	0					
ANR	638801	Identifier	state		638789	1					
ANR	638802	CFGEntryNode	ENTRY		638789		True				
ANR	638803	CFGExitNode	EXIT		638789		True				
ANR	638804	Symbol	shouldStripCommentPrefix		638789						
ANR	638805	Symbol	state		638789						
ANR	638806	Function	ASFormatter :: setMethodPrefixPaddingMode	2078:0:62188:62279							
ANR	638807	FunctionDef	ASFormatter :: setMethodPrefixPaddingMode (bool state)		638806	0					
ANR	638808	CompoundStatement		2079:0:62245:62279	638806	0					
ANR	638809	ExpressionStatement	shouldPadMethodPrefix = state	2080:1:62248:62277	638806	0	True				
ANR	638810	AssignmentExpression	shouldPadMethodPrefix = state		638806	0		=			
ANR	638811	Identifier	shouldPadMethodPrefix		638806	0					
ANR	638812	Identifier	state		638806	1					
ANR	638813	ReturnType	void		638806	1					
ANR	638814	Identifier	ASFormatter :: setMethodPrefixPaddingMode		638806	2					
ANR	638815	ParameterList	bool state		638806	3					
ANR	638816	Parameter	bool state	2078:45:62233:62242	638806	0	True				
ANR	638817	ParameterType	bool		638806	0					
ANR	638818	Identifier	state		638806	1					
ANR	638819	CFGEntryNode	ENTRY		638806		True				
ANR	638820	CFGExitNode	EXIT		638806		True				
ANR	638821	Symbol	state		638806						
ANR	638822	Symbol	shouldPadMethodPrefix		638806						
ANR	638823	Function	ASFormatter :: setMethodPrefixUnPaddingMode	2091:0:62534:62629							
ANR	638824	FunctionDef	ASFormatter :: setMethodPrefixUnPaddingMode (bool state)		638823	0					
ANR	638825	CompoundStatement		2092:0:62593:62629	638823	0					
ANR	638826	ExpressionStatement	shouldUnPadMethodPrefix = state	2093:1:62596:62627	638823	0	True				
ANR	638827	AssignmentExpression	shouldUnPadMethodPrefix = state		638823	0		=			
ANR	638828	Identifier	shouldUnPadMethodPrefix		638823	0					
ANR	638829	Identifier	state		638823	1					
ANR	638830	ReturnType	void		638823	1					
ANR	638831	Identifier	ASFormatter :: setMethodPrefixUnPaddingMode		638823	2					
ANR	638832	ParameterList	bool state		638823	3					
ANR	638833	Parameter	bool state	2091:47:62581:62590	638823	0	True				
ANR	638834	ParameterType	bool		638823	0					
ANR	638835	Identifier	state		638823	1					
ANR	638836	CFGEntryNode	ENTRY		638823		True				
ANR	638837	CFGExitNode	EXIT		638823		True				
ANR	638838	Symbol	shouldUnPadMethodPrefix		638823						
ANR	638839	Symbol	state		638823						
ANR	638840	Function	ASFormatter :: setReturnTypePaddingMode	2097:0:62688:62775							
ANR	638841	FunctionDef	ASFormatter :: setReturnTypePaddingMode (bool state)		638840	0					
ANR	638842	CompoundStatement		2098:0:62743:62775	638840	0					
ANR	638843	ExpressionStatement	shouldPadReturnType = state	2099:1:62746:62773	638840	0	True				
ANR	638844	AssignmentExpression	shouldPadReturnType = state		638840	0		=			
ANR	638845	Identifier	shouldPadReturnType		638840	0					
ANR	638846	Identifier	state		638840	1					
ANR	638847	ReturnType	void		638840	1					
ANR	638848	Identifier	ASFormatter :: setReturnTypePaddingMode		638840	2					
ANR	638849	ParameterList	bool state		638840	3					
ANR	638850	Parameter	bool state	2097:43:62731:62740	638840	0	True				
ANR	638851	ParameterType	bool		638840	0					
ANR	638852	Identifier	state		638840	1					
ANR	638853	CFGEntryNode	ENTRY		638840		True				
ANR	638854	CFGExitNode	EXIT		638840		True				
ANR	638855	Symbol	shouldPadReturnType		638840						
ANR	638856	Symbol	state		638840						
ANR	638857	Function	ASFormatter :: setReturnTypeUnPaddingMode	2103:0:62836:62927							
ANR	638858	FunctionDef	ASFormatter :: setReturnTypeUnPaddingMode (bool state)		638857	0					
ANR	638859	CompoundStatement		2104:0:62893:62927	638857	0					
ANR	638860	ExpressionStatement	shouldUnPadReturnType = state	2105:1:62896:62925	638857	0	True				
ANR	638861	AssignmentExpression	shouldUnPadReturnType = state		638857	0		=			
ANR	638862	Identifier	shouldUnPadReturnType		638857	0					
ANR	638863	Identifier	state		638857	1					
ANR	638864	ReturnType	void		638857	1					
ANR	638865	Identifier	ASFormatter :: setReturnTypeUnPaddingMode		638857	2					
ANR	638866	ParameterList	bool state		638857	3					
ANR	638867	Parameter	bool state	2103:45:62881:62890	638857	0	True				
ANR	638868	ParameterType	bool		638857	0					
ANR	638869	Identifier	state		638857	1					
ANR	638870	CFGEntryNode	ENTRY		638857		True				
ANR	638871	CFGExitNode	EXIT		638857		True				
ANR	638872	Symbol	state		638857						
ANR	638873	Symbol	shouldUnPadReturnType		638857						
ANR	638874	Function	ASFormatter :: setParamTypePaddingMode	2109:0:62985:63070							
ANR	638875	FunctionDef	ASFormatter :: setParamTypePaddingMode (bool state)		638874	0					
ANR	638876	CompoundStatement		2110:0:63039:63070	638874	0					
ANR	638877	ExpressionStatement	shouldPadParamType = state	2111:1:63042:63068	638874	0	True				
ANR	638878	AssignmentExpression	shouldPadParamType = state		638874	0		=			
ANR	638879	Identifier	shouldPadParamType		638874	0					
ANR	638880	Identifier	state		638874	1					
ANR	638881	ReturnType	void		638874	1					
ANR	638882	Identifier	ASFormatter :: setParamTypePaddingMode		638874	2					
ANR	638883	ParameterList	bool state		638874	3					
ANR	638884	Parameter	bool state	2109:42:63027:63036	638874	0	True				
ANR	638885	ParameterType	bool		638874	0					
ANR	638886	Identifier	state		638874	1					
ANR	638887	CFGEntryNode	ENTRY		638874		True				
ANR	638888	CFGExitNode	EXIT		638874		True				
ANR	638889	Symbol	shouldPadParamType		638874						
ANR	638890	Symbol	state		638874						
ANR	638891	Function	ASFormatter :: setParamTypeUnPaddingMode	2115:0:63130:63219							
ANR	638892	FunctionDef	ASFormatter :: setParamTypeUnPaddingMode (bool state)		638891	0					
ANR	638893	CompoundStatement		2116:0:63186:63219	638891	0					
ANR	638894	ExpressionStatement	shouldUnPadParamType = state	2117:1:63189:63217	638891	0	True				
ANR	638895	AssignmentExpression	shouldUnPadParamType = state		638891	0		=			
ANR	638896	Identifier	shouldUnPadParamType		638891	0					
ANR	638897	Identifier	state		638891	1					
ANR	638898	ReturnType	void		638891	1					
ANR	638899	Identifier	ASFormatter :: setParamTypeUnPaddingMode		638891	2					
ANR	638900	ParameterList	bool state		638891	3					
ANR	638901	Parameter	bool state	2115:44:63174:63183	638891	0	True				
ANR	638902	ParameterType	bool		638891	0					
ANR	638903	Identifier	state		638891	1					
ANR	638904	CFGEntryNode	ENTRY		638891		True				
ANR	638905	CFGExitNode	EXIT		638891		True				
ANR	638906	Symbol	shouldUnPadParamType		638891						
ANR	638907	Symbol	state		638891						
ANR	638908	Function	ASFormatter :: setObjCColonPaddingMode	2125:0:63334:63453							
ANR	638909	FunctionDef	ASFormatter :: setObjCColonPaddingMode (ObjCColonPad mode)		638908	0					
ANR	638910	CompoundStatement		2126:0:63395:63453	638908	0					
ANR	638911	ExpressionStatement	shouldPadMethodColon = true	2127:1:63398:63425	638908	0	True				
ANR	638912	AssignmentExpression	shouldPadMethodColon = true		638908	0		=			
ANR	638913	Identifier	shouldPadMethodColon		638908	0					
ANR	638914	Identifier	true		638908	1					
ANR	638915	ExpressionStatement	objCColonPadMode = mode	2128:1:63428:63451	638908	1	True				
ANR	638916	AssignmentExpression	objCColonPadMode = mode		638908	0		=			
ANR	638917	Identifier	objCColonPadMode		638908	0					
ANR	638918	Identifier	mode		638908	1					
ANR	638919	ReturnType	void		638908	1					
ANR	638920	Identifier	ASFormatter :: setObjCColonPaddingMode		638908	2					
ANR	638921	ParameterList	ObjCColonPad mode		638908	3					
ANR	638922	Parameter	ObjCColonPad mode	2125:42:63376:63392	638908	0	True				
ANR	638923	ParameterType	ObjCColonPad		638908	0					
ANR	638924	Identifier	mode		638908	1					
ANR	638925	CFGEntryNode	ENTRY		638908		True				
ANR	638926	CFGExitNode	EXIT		638908		True				
ANR	638927	Symbol	mode		638908						
ANR	638928	Symbol	true		638908						
ANR	638929	Symbol	shouldPadMethodColon		638908						
ANR	638930	Symbol	objCColonPadMode		638908						
ANR	638931	Function	ASFormatter :: setAttachClosingBraceMode	2136:0:63566:63657							
ANR	638932	FunctionDef	ASFormatter :: setAttachClosingBraceMode (bool state)		638931	0					
ANR	638933	CompoundStatement		2137:0:63622:63657	638931	0					
ANR	638934	ExpressionStatement	attachClosingBraceMode = state	2138:1:63625:63655	638931	0	True				
ANR	638935	AssignmentExpression	attachClosingBraceMode = state		638931	0		=			
ANR	638936	Identifier	attachClosingBraceMode		638931	0					
ANR	638937	Identifier	state		638931	1					
ANR	638938	ReturnType	void		638931	1					
ANR	638939	Identifier	ASFormatter :: setAttachClosingBraceMode		638931	2					
ANR	638940	ParameterList	bool state		638931	3					
ANR	638941	Parameter	bool state	2136:44:63610:63619	638931	0	True				
ANR	638942	ParameterType	bool		638931	0					
ANR	638943	Identifier	state		638931	1					
ANR	638944	CFGEntryNode	ENTRY		638931		True				
ANR	638945	CFGExitNode	EXIT		638931		True				
ANR	638946	Symbol	state		638931						
ANR	638947	Symbol	attachClosingBraceMode		638931						
ANR	638948	Function	ASFormatter :: setAttachClass	2146:0:63773:63848							
ANR	638949	FunctionDef	ASFormatter :: setAttachClass (bool state)		638948	0					
ANR	638950	CompoundStatement		2147:0:63818:63848	638948	0					
ANR	638951	ExpressionStatement	shouldAttachClass = state	2148:1:63821:63846	638948	0	True				
ANR	638952	AssignmentExpression	shouldAttachClass = state		638948	0		=			
ANR	638953	Identifier	shouldAttachClass		638948	0					
ANR	638954	Identifier	state		638948	1					
ANR	638955	ReturnType	void		638948	1					
ANR	638956	Identifier	ASFormatter :: setAttachClass		638948	2					
ANR	638957	ParameterList	bool state		638948	3					
ANR	638958	Parameter	bool state	2146:33:63806:63815	638948	0	True				
ANR	638959	ParameterType	bool		638948	0					
ANR	638960	Identifier	state		638948	1					
ANR	638961	CFGEntryNode	ENTRY		638948		True				
ANR	638962	CFGExitNode	EXIT		638948		True				
ANR	638963	Symbol	state		638948						
ANR	638964	Symbol	shouldAttachClass		638948						
ANR	638965	Function	ASFormatter :: setAttachExternC	2156:0:63969:64048							
ANR	638966	FunctionDef	ASFormatter :: setAttachExternC (bool state)		638965	0					
ANR	638967	CompoundStatement		2157:0:64016:64048	638965	0					
ANR	638968	ExpressionStatement	shouldAttachExternC = state	2158:1:64019:64046	638965	0	True				
ANR	638969	AssignmentExpression	shouldAttachExternC = state		638965	0		=			
ANR	638970	Identifier	shouldAttachExternC		638965	0					
ANR	638971	Identifier	state		638965	1					
ANR	638972	ReturnType	void		638965	1					
ANR	638973	Identifier	ASFormatter :: setAttachExternC		638965	2					
ANR	638974	ParameterList	bool state		638965	3					
ANR	638975	Parameter	bool state	2156:35:64004:64013	638965	0	True				
ANR	638976	ParameterType	bool		638965	0					
ANR	638977	Identifier	state		638965	1					
ANR	638978	CFGEntryNode	ENTRY		638965		True				
ANR	638979	CFGExitNode	EXIT		638965		True				
ANR	638980	Symbol	shouldAttachExternC		638965						
ANR	638981	Symbol	state		638965						
ANR	638982	Function	ASFormatter :: setAttachNamespace	2166:0:64168:64251							
ANR	638983	FunctionDef	ASFormatter :: setAttachNamespace (bool state)		638982	0					
ANR	638984	CompoundStatement		2167:0:64217:64251	638982	0					
ANR	638985	ExpressionStatement	shouldAttachNamespace = state	2168:1:64220:64249	638982	0	True				
ANR	638986	AssignmentExpression	shouldAttachNamespace = state		638982	0		=			
ANR	638987	Identifier	shouldAttachNamespace		638982	0					
ANR	638988	Identifier	state		638982	1					
ANR	638989	ReturnType	void		638982	1					
ANR	638990	Identifier	ASFormatter :: setAttachNamespace		638982	2					
ANR	638991	ParameterList	bool state		638982	3					
ANR	638992	Parameter	bool state	2166:37:64205:64214	638982	0	True				
ANR	638993	ParameterType	bool		638982	0					
ANR	638994	Identifier	state		638982	1					
ANR	638995	CFGEntryNode	ENTRY		638982		True				
ANR	638996	CFGExitNode	EXIT		638982		True				
ANR	638997	Symbol	shouldAttachNamespace		638982						
ANR	638998	Symbol	state		638982						
ANR	638999	Function	ASFormatter :: setAttachInline	2176:0:64368:64445							
ANR	639000	FunctionDef	ASFormatter :: setAttachInline (bool state)		638999	0					
ANR	639001	CompoundStatement		2177:0:64414:64445	638999	0					
ANR	639002	ExpressionStatement	shouldAttachInline = state	2178:1:64417:64443	638999	0	True				
ANR	639003	AssignmentExpression	shouldAttachInline = state		638999	0		=			
ANR	639004	Identifier	shouldAttachInline		638999	0					
ANR	639005	Identifier	state		638999	1					
ANR	639006	ReturnType	void		638999	1					
ANR	639007	Identifier	ASFormatter :: setAttachInline		638999	2					
ANR	639008	ParameterList	bool state		638999	3					
ANR	639009	Parameter	bool state	2176:34:64402:64411	638999	0	True				
ANR	639010	ParameterType	bool		638999	0					
ANR	639011	Identifier	state		638999	1					
ANR	639012	CFGEntryNode	ENTRY		638999		True				
ANR	639013	CFGExitNode	EXIT		638999		True				
ANR	639014	Symbol	shouldAttachInline		638999						
ANR	639015	Symbol	state		638999						
ANR	639016	Function	ASFormatter :: setAttachClosingWhile	2181:0:64448:64537							
ANR	639017	FunctionDef	ASFormatter :: setAttachClosingWhile (bool state)		639016	0					
ANR	639018	CompoundStatement		2182:0:64500:64537	639016	0					
ANR	639019	ExpressionStatement	shouldAttachClosingWhile = state	2183:1:64503:64535	639016	0	True				
ANR	639020	AssignmentExpression	shouldAttachClosingWhile = state		639016	0		=			
ANR	639021	Identifier	shouldAttachClosingWhile		639016	0					
ANR	639022	Identifier	state		639016	1					
ANR	639023	ReturnType	void		639016	1					
ANR	639024	Identifier	ASFormatter :: setAttachClosingWhile		639016	2					
ANR	639025	ParameterList	bool state		639016	3					
ANR	639026	Parameter	bool state	2181:40:64488:64497	639016	0	True				
ANR	639027	ParameterType	bool		639016	0					
ANR	639028	Identifier	state		639016	1					
ANR	639029	CFGEntryNode	ENTRY		639016		True				
ANR	639030	CFGExitNode	EXIT		639016		True				
ANR	639031	Symbol	shouldAttachClosingWhile		639016						
ANR	639032	Symbol	state		639016						
ANR	639033	Function	ASFormatter :: setBreakOneLineBlocksMode	2191:0:64658:64751							
ANR	639034	FunctionDef	ASFormatter :: setBreakOneLineBlocksMode (bool state)		639033	0					
ANR	639035	CompoundStatement		2192:0:64714:64751	639033	0					
ANR	639036	ExpressionStatement	shouldBreakOneLineBlocks = state	2193:1:64717:64749	639033	0	True				
ANR	639037	AssignmentExpression	shouldBreakOneLineBlocks = state		639033	0		=			
ANR	639038	Identifier	shouldBreakOneLineBlocks		639033	0					
ANR	639039	Identifier	state		639033	1					
ANR	639040	ReturnType	void		639033	1					
ANR	639041	Identifier	ASFormatter :: setBreakOneLineBlocksMode		639033	2					
ANR	639042	ParameterList	bool state		639033	3					
ANR	639043	Parameter	bool state	2191:44:64702:64711	639033	0	True				
ANR	639044	ParameterType	bool		639033	0					
ANR	639045	Identifier	state		639033	1					
ANR	639046	CFGEntryNode	ENTRY		639033		True				
ANR	639047	CFGExitNode	EXIT		639033		True				
ANR	639048	Symbol	shouldBreakOneLineBlocks		639033						
ANR	639049	Symbol	state		639033						
ANR	639050	Function	ASFormatter :: setBreakOneLineHeadersMode	2199:0:64798:64893							
ANR	639051	FunctionDef	ASFormatter :: setBreakOneLineHeadersMode (bool state)		639050	0					
ANR	639052	CompoundStatement		2200:0:64855:64893	639050	0					
ANR	639053	ExpressionStatement	shouldBreakOneLineHeaders = state	2201:1:64858:64891	639050	0	True				
ANR	639054	AssignmentExpression	shouldBreakOneLineHeaders = state		639050	0		=			
ANR	639055	Identifier	shouldBreakOneLineHeaders		639050	0					
ANR	639056	Identifier	state		639050	1					
ANR	639057	ReturnType	void		639050	1					
ANR	639058	Identifier	ASFormatter :: setBreakOneLineHeadersMode		639050	2					
ANR	639059	ParameterList	bool state		639050	3					
ANR	639060	Parameter	bool state	2199:45:64843:64852	639050	0	True				
ANR	639061	ParameterType	bool		639050	0					
ANR	639062	Identifier	state		639050	1					
ANR	639063	CFGEntryNode	ENTRY		639050		True				
ANR	639064	CFGExitNode	EXIT		639050		True				
ANR	639065	Symbol	shouldBreakOneLineHeaders		639050						
ANR	639066	Symbol	state		639050						
ANR	639067	Function	ASFormatter :: setBreakOneLineStatementsMode	2209:0:65035:65136							
ANR	639068	FunctionDef	ASFormatter :: setBreakOneLineStatementsMode (bool state)		639067	0					
ANR	639069	CompoundStatement		2210:0:65095:65136	639067	0					
ANR	639070	ExpressionStatement	shouldBreakOneLineStatements = state	2211:1:65098:65134	639067	0	True				
ANR	639071	AssignmentExpression	shouldBreakOneLineStatements = state		639067	0		=			
ANR	639072	Identifier	shouldBreakOneLineStatements		639067	0					
ANR	639073	Identifier	state		639067	1					
ANR	639074	ReturnType	void		639067	1					
ANR	639075	Identifier	ASFormatter :: setBreakOneLineStatementsMode		639067	2					
ANR	639076	ParameterList	bool state		639067	3					
ANR	639077	Parameter	bool state	2209:48:65083:65092	639067	0	True				
ANR	639078	ParameterType	bool		639067	0					
ANR	639079	Identifier	state		639067	1					
ANR	639080	CFGEntryNode	ENTRY		639067		True				
ANR	639081	CFGExitNode	EXIT		639067		True				
ANR	639082	Symbol	shouldBreakOneLineStatements		639067						
ANR	639083	Symbol	state		639067						
ANR	639084	Function	ASFormatter :: setCloseTemplatesMode	2214:0:65139:65224							
ANR	639085	FunctionDef	ASFormatter :: setCloseTemplatesMode (bool state)		639084	0					
ANR	639086	CompoundStatement		2215:0:65191:65224	639084	0					
ANR	639087	ExpressionStatement	shouldCloseTemplates = state	2216:1:65194:65222	639084	0	True				
ANR	639088	AssignmentExpression	shouldCloseTemplates = state		639084	0		=			
ANR	639089	Identifier	shouldCloseTemplates		639084	0					
ANR	639090	Identifier	state		639084	1					
ANR	639091	ReturnType	void		639084	1					
ANR	639092	Identifier	ASFormatter :: setCloseTemplatesMode		639084	2					
ANR	639093	ParameterList	bool state		639084	3					
ANR	639094	Parameter	bool state	2214:40:65179:65188	639084	0	True				
ANR	639095	ParameterType	bool		639084	0					
ANR	639096	Identifier	state		639084	1					
ANR	639097	CFGEntryNode	ENTRY		639084		True				
ANR	639098	CFGExitNode	EXIT		639084		True				
ANR	639099	Symbol	shouldCloseTemplates		639084						
ANR	639100	Symbol	state		639084						
ANR	639101	Function	ASFormatter :: setTabSpaceConversionMode	2224:0:65341:65427							
ANR	639102	FunctionDef	ASFormatter :: setTabSpaceConversionMode (bool state)		639101	0					
ANR	639103	CompoundStatement		2225:0:65397:65427	639101	0					
ANR	639104	ExpressionStatement	shouldConvertTabs = state	2226:1:65400:65425	639101	0	True				
ANR	639105	AssignmentExpression	shouldConvertTabs = state		639101	0		=			
ANR	639106	Identifier	shouldConvertTabs		639101	0					
ANR	639107	Identifier	state		639101	1					
ANR	639108	ReturnType	void		639101	1					
ANR	639109	Identifier	ASFormatter :: setTabSpaceConversionMode		639101	2					
ANR	639110	ParameterList	bool state		639101	3					
ANR	639111	Parameter	bool state	2224:44:65385:65394	639101	0	True				
ANR	639112	ParameterType	bool		639101	0					
ANR	639113	Identifier	state		639101	1					
ANR	639114	CFGEntryNode	ENTRY		639101		True				
ANR	639115	CFGExitNode	EXIT		639101		True				
ANR	639116	Symbol	shouldConvertTabs		639101						
ANR	639117	Symbol	state		639101						
ANR	639118	Function	ASFormatter :: setIndentCol1CommentsMode	2234:0:65547:65640							
ANR	639119	FunctionDef	ASFormatter :: setIndentCol1CommentsMode (bool state)		639118	0					
ANR	639120	CompoundStatement		2235:0:65603:65640	639118	0					
ANR	639121	ExpressionStatement	shouldIndentCol1Comments = state	2236:1:65606:65638	639118	0	True				
ANR	639122	AssignmentExpression	shouldIndentCol1Comments = state		639118	0		=			
ANR	639123	Identifier	shouldIndentCol1Comments		639118	0					
ANR	639124	Identifier	state		639118	1					
ANR	639125	ReturnType	void		639118	1					
ANR	639126	Identifier	ASFormatter :: setIndentCol1CommentsMode		639118	2					
ANR	639127	ParameterList	bool state		639118	3					
ANR	639128	Parameter	bool state	2234:44:65591:65600	639118	0	True				
ANR	639129	ParameterType	bool		639118	0					
ANR	639130	Identifier	state		639118	1					
ANR	639131	CFGEntryNode	ENTRY		639118		True				
ANR	639132	CFGExitNode	EXIT		639118		True				
ANR	639133	Symbol	state		639118						
ANR	639134	Symbol	shouldIndentCol1Comments		639118						
ANR	639135	Function	ASFormatter :: setLineEndFormat	2244:0:65756:65828							
ANR	639136	FunctionDef	ASFormatter :: setLineEndFormat (LineEndFormat fmt)		639135	0					
ANR	639137	CompoundStatement		2245:0:65810:65828	639135	0					
ANR	639138	ExpressionStatement	lineEnd = fmt	2246:1:65813:65826	639135	0	True				
ANR	639139	AssignmentExpression	lineEnd = fmt		639135	0		=			
ANR	639140	Identifier	lineEnd		639135	0					
ANR	639141	Identifier	fmt		639135	1					
ANR	639142	ReturnType	void		639135	1					
ANR	639143	Identifier	ASFormatter :: setLineEndFormat		639135	2					
ANR	639144	ParameterList	LineEndFormat fmt		639135	3					
ANR	639145	Parameter	LineEndFormat fmt	2244:35:65791:65807	639135	0	True				
ANR	639146	ParameterType	LineEndFormat		639135	0					
ANR	639147	Identifier	fmt		639135	1					
ANR	639148	CFGEntryNode	ENTRY		639135		True				
ANR	639149	CFGExitNode	EXIT		639135		True				
ANR	639150	Symbol	fmt		639135						
ANR	639151	Symbol	lineEnd		639135						
ANR	639152	Function	ASFormatter :: setBreakBlocksMode	2254:0:65970:66049							
ANR	639153	FunctionDef	ASFormatter :: setBreakBlocksMode (bool state)		639152	0					
ANR	639154	CompoundStatement		2255:0:66019:66049	639152	0					
ANR	639155	ExpressionStatement	shouldBreakBlocks = state	2256:1:66022:66047	639152	0	True				
ANR	639156	AssignmentExpression	shouldBreakBlocks = state		639152	0		=			
ANR	639157	Identifier	shouldBreakBlocks		639152	0					
ANR	639158	Identifier	state		639152	1					
ANR	639159	ReturnType	void		639152	1					
ANR	639160	Identifier	ASFormatter :: setBreakBlocksMode		639152	2					
ANR	639161	ParameterList	bool state		639152	3					
ANR	639162	Parameter	bool state	2254:37:66007:66016	639152	0	True				
ANR	639163	ParameterType	bool		639152	0					
ANR	639164	Identifier	state		639152	1					
ANR	639165	CFGEntryNode	ENTRY		639152		True				
ANR	639166	CFGExitNode	EXIT		639152		True				
ANR	639167	Symbol	state		639152						
ANR	639168	Symbol	shouldBreakBlocks		639152						
ANR	639169	Function	ASFormatter :: setBreakClosingHeaderBlocksMode	2264:0:66227:66332							
ANR	639170	FunctionDef	ASFormatter :: setBreakClosingHeaderBlocksMode (bool state)		639169	0					
ANR	639171	CompoundStatement		2265:0:66289:66332	639169	0					
ANR	639172	ExpressionStatement	shouldBreakClosingHeaderBlocks = state	2266:1:66292:66330	639169	0	True				
ANR	639173	AssignmentExpression	shouldBreakClosingHeaderBlocks = state		639169	0		=			
ANR	639174	Identifier	shouldBreakClosingHeaderBlocks		639169	0					
ANR	639175	Identifier	state		639169	1					
ANR	639176	ReturnType	void		639169	1					
ANR	639177	Identifier	ASFormatter :: setBreakClosingHeaderBlocksMode		639169	2					
ANR	639178	ParameterList	bool state		639169	3					
ANR	639179	Parameter	bool state	2264:50:66277:66286	639169	0	True				
ANR	639180	ParameterType	bool		639169	0					
ANR	639181	Identifier	state		639169	1					
ANR	639182	CFGEntryNode	ENTRY		639169		True				
ANR	639183	CFGExitNode	EXIT		639169		True				
ANR	639184	Symbol	state		639169						
ANR	639185	Symbol	shouldBreakClosingHeaderBlocks		639169						
ANR	639186	Function	ASFormatter :: setDeleteEmptyLinesMode	2274:0:66443:66532							
ANR	639187	FunctionDef	ASFormatter :: setDeleteEmptyLinesMode (bool state)		639186	0					
ANR	639188	CompoundStatement		2275:0:66497:66532	639186	0					
ANR	639189	ExpressionStatement	shouldDeleteEmptyLines = state	2276:1:66500:66530	639186	0	True				
ANR	639190	AssignmentExpression	shouldDeleteEmptyLines = state		639186	0		=			
ANR	639191	Identifier	shouldDeleteEmptyLines		639186	0					
ANR	639192	Identifier	state		639186	1					
ANR	639193	ReturnType	void		639186	1					
ANR	639194	Identifier	ASFormatter :: setDeleteEmptyLinesMode		639186	2					
ANR	639195	ParameterList	bool state		639186	3					
ANR	639196	Parameter	bool state	2274:42:66485:66494	639186	0	True				
ANR	639197	ParameterType	bool		639186	0					
ANR	639198	Identifier	state		639186	1					
ANR	639199	CFGEntryNode	ENTRY		639186		True				
ANR	639200	CFGExitNode	EXIT		639186		True				
ANR	639201	Symbol	shouldDeleteEmptyLines		639186						
ANR	639202	Symbol	state		639186						
ANR	639203	Function	ASFormatter :: setPointerAlignment	2284:0:66622:66717							
ANR	639204	FunctionDef	ASFormatter :: setPointerAlignment (PointerAlign alignment)		639203	0					
ANR	639205	CompoundStatement		2285:0:66684:66717	639203	0					
ANR	639206	ExpressionStatement	pointerAlignment = alignment	2286:1:66687:66715	639203	0	True				
ANR	639207	AssignmentExpression	pointerAlignment = alignment		639203	0		=			
ANR	639208	Identifier	pointerAlignment		639203	0					
ANR	639209	Identifier	alignment		639203	1					
ANR	639210	ReturnType	void		639203	1					
ANR	639211	Identifier	ASFormatter :: setPointerAlignment		639203	2					
ANR	639212	ParameterList	PointerAlign alignment		639203	3					
ANR	639213	Parameter	PointerAlign alignment	2284:38:66660:66681	639203	0	True				
ANR	639214	ParameterType	PointerAlign		639203	0					
ANR	639215	Identifier	alignment		639203	1					
ANR	639216	CFGEntryNode	ENTRY		639203		True				
ANR	639217	CFGExitNode	EXIT		639203		True				
ANR	639218	Symbol	alignment		639203						
ANR	639219	Symbol	pointerAlignment		639203						
ANR	639220	Function	ASFormatter :: setReferenceAlignment	2289:0:66720:66821							
ANR	639221	FunctionDef	ASFormatter :: setReferenceAlignment (ReferenceAlign alignment)		639220	0					
ANR	639222	CompoundStatement		2290:0:66786:66821	639220	0					
ANR	639223	ExpressionStatement	referenceAlignment = alignment	2291:1:66789:66819	639220	0	True				
ANR	639224	AssignmentExpression	referenceAlignment = alignment		639220	0		=			
ANR	639225	Identifier	referenceAlignment		639220	0					
ANR	639226	Identifier	alignment		639220	1					
ANR	639227	ReturnType	void		639220	1					
ANR	639228	Identifier	ASFormatter :: setReferenceAlignment		639220	2					
ANR	639229	ParameterList	ReferenceAlign alignment		639220	3					
ANR	639230	Parameter	ReferenceAlign alignment	2289:40:66760:66783	639220	0	True				
ANR	639231	ParameterType	ReferenceAlign		639220	0					
ANR	639232	Identifier	alignment		639220	1					
ANR	639233	CFGEntryNode	ENTRY		639220		True				
ANR	639234	CFGExitNode	EXIT		639220		True				
ANR	639235	Symbol	referenceAlignment		639220						
ANR	639236	Symbol	alignment		639220						
ANR	639237	Function	ASFormatter :: goForward	2299:0:66925:66997							
ANR	639238	FunctionDef	ASFormatter :: goForward (int i)		639237	0					
ANR	639239	CompoundStatement		2300:0:66960:66997	639237	0					
ANR	639240	WhileStatement	while ( -- i >= 0 )		639237	0					
ANR	639241	Condition	-- i >= 0	2301:8:66970:66977	639237	0	True				
ANR	639242	RelationalExpression	-- i >= 0		639237	0		>=			
ANR	639243	UnaryExpression	-- i		639237	0					
ANR	639244	IncDec	--		639237	0					
ANR	639245	Identifier	i		639237	1					
ANR	639246	PrimaryExpression	0		639237	1					
ANR	639247	ExpressionStatement	getNextChar ( )	2302:2:66982:66995	639237	1	True				
ANR	639248	CallExpression	getNextChar ( )		639237	0					
ANR	639249	Callee	getNextChar		639237	0					
ANR	639250	Identifier	getNextChar		639237	0					
ANR	639251	ArgumentList			639237	1					
ANR	639252	ReturnType	void		639237	1					
ANR	639253	Identifier	ASFormatter :: goForward		639237	2					
ANR	639254	ParameterList	int i		639237	3					
ANR	639255	Parameter	int i	2299:28:66953:66957	639237	0	True				
ANR	639256	ParameterType	int		639237	0					
ANR	639257	Identifier	i		639237	1					
ANR	639258	CFGEntryNode	ENTRY		639237		True				
ANR	639259	CFGExitNode	EXIT		639237		True				
ANR	639260	Symbol	i		639237						
ANR	639261	Function	ASFormatter :: peekNextChar	2310:0:67091:67303							
ANR	639262	FunctionDef	ASFormatter :: peekNextChar ()		639261	0					
ANR	639263	CompoundStatement		2311:0:67130:67303	639261	0					
ANR	639264	IdentifierDeclStatement	char ch = ' ' ;	2312:1:67133:67146	639261	0	True				
ANR	639265	IdentifierDecl	ch = ' '		639261	0					
ANR	639266	IdentifierDeclType	char		639261	0					
ANR	639267	Identifier	ch		639261	1					
ANR	639268	AssignmentExpression	ch = ' '		639261	2		=			
ANR	639269	Identifier	ch		639261	0					
ANR	639270	PrimaryExpression	' '		639261	1					
ANR	639271	IdentifierDeclStatement	"size_t peekNum = currentLine . find_first_not_of ( "" \\t"" , charNum + 1 ) ;"	2313:1:67149:67215	639261	1	True				
ANR	639272	IdentifierDecl	"peekNum = currentLine . find_first_not_of ( "" \\t"" , charNum + 1 )"		639261	0					
ANR	639273	IdentifierDeclType	size_t		639261	0					
ANR	639274	Identifier	peekNum		639261	1					
ANR	639275	AssignmentExpression	"peekNum = currentLine . find_first_not_of ( "" \\t"" , charNum + 1 )"		639261	2		=			
ANR	639276	Identifier	peekNum		639261	0					
ANR	639277	CallExpression	"currentLine . find_first_not_of ( "" \\t"" , charNum + 1 )"		639261	1					
ANR	639278	Callee	currentLine . find_first_not_of		639261	0					
ANR	639279	MemberAccess	currentLine . find_first_not_of		639261	0					
ANR	639280	Identifier	currentLine		639261	0					
ANR	639281	Identifier	find_first_not_of		639261	1					
ANR	639282	ArgumentList	""" \\t"""		639261	1					
ANR	639283	Argument	""" \\t"""		639261	0					
ANR	639284	PrimaryExpression	""" \\t"""		639261	0					
ANR	639285	Argument	charNum + 1		639261	1					
ANR	639286	AdditiveExpression	charNum + 1		639261	0		+			
ANR	639287	Identifier	charNum		639261	0					
ANR	639288	PrimaryExpression	1		639261	1					
ANR	639289	IfStatement	if ( peekNum == string :: npos )		639261	2					
ANR	639290	Condition	peekNum == string :: npos	2315:5:67223:67245	639261	0	True				
ANR	639291	EqualityExpression	peekNum == string :: npos		639261	0		==			
ANR	639292	Identifier	peekNum		639261	0					
ANR	639293	Identifier	string :: npos		639261	1					
ANR	639294	ReturnStatement	return ch ;	2316:2:67250:67259	639261	1	True				
ANR	639295	Identifier	ch		639261	0					
ANR	639296	ExpressionStatement	ch = currentLine [ peekNum ]	2318:1:67263:67288	639261	3	True				
ANR	639297	AssignmentExpression	ch = currentLine [ peekNum ]		639261	0		=			
ANR	639298	Identifier	ch		639261	0					
ANR	639299	ArrayIndexing	currentLine [ peekNum ]		639261	1					
ANR	639300	Identifier	currentLine		639261	0					
ANR	639301	Identifier	peekNum		639261	1					
ANR	639302	ReturnStatement	return ch ;	2320:1:67292:67301	639261	4	True				
ANR	639303	Identifier	ch		639261	0					
ANR	639304	ReturnType	char		639261	1					
ANR	639305	Identifier	ASFormatter :: peekNextChar		639261	2					
ANR	639306	ParameterList			639261	3					
ANR	639307	CFGEntryNode	ENTRY		639261		True				
ANR	639308	CFGExitNode	EXIT		639261		True				
ANR	639309	Symbol	* currentLine		639261						
ANR	639310	Symbol	* peekNum		639261						
ANR	639311	Symbol	ch		639261						
ANR	639312	Symbol	string :: npos		639261						
ANR	639313	Symbol	charNum		639261						
ANR	639314	Symbol	currentLine . find_first_not_of		639261						
ANR	639315	Symbol	peekNum		639261						
ANR	639316	Symbol	currentLine		639261						
ANR	639317	Function	ASFormatter :: isBeforeComment	2328:0:67403:67684							
ANR	639318	FunctionDef	ASFormatter :: isBeforeComment ()		639317	0					
ANR	639319	CompoundStatement		2329:0:67445:67684	639317	0					
ANR	639320	IdentifierDeclStatement	bool foundComment = false ;	2330:1:67448:67473	639317	0	True				
ANR	639321	IdentifierDecl	foundComment = false		639317	0					
ANR	639322	IdentifierDeclType	bool		639317	0					
ANR	639323	Identifier	foundComment		639317	1					
ANR	639324	AssignmentExpression	foundComment = false		639317	2		=			
ANR	639325	Identifier	false		639317	0					
ANR	639326	Identifier	false		639317	1					
ANR	639327	IdentifierDeclStatement	"size_t peekNum = currentLine . find_first_not_of ( "" \\t"" , charNum + 1 ) ;"	2331:1:67476:67542	639317	1	True				
ANR	639328	IdentifierDecl	"peekNum = currentLine . find_first_not_of ( "" \\t"" , charNum + 1 )"		639317	0					
ANR	639329	IdentifierDeclType	size_t		639317	0					
ANR	639330	Identifier	peekNum		639317	1					
ANR	639331	AssignmentExpression	"peekNum = currentLine . find_first_not_of ( "" \\t"" , charNum + 1 )"		639317	2		=			
ANR	639332	Identifier	peekNum		639317	0					
ANR	639333	CallExpression	"currentLine . find_first_not_of ( "" \\t"" , charNum + 1 )"		639317	1					
ANR	639334	Callee	currentLine . find_first_not_of		639317	0					
ANR	639335	MemberAccess	currentLine . find_first_not_of		639317	0					
ANR	639336	Identifier	currentLine		639317	0					
ANR	639337	Identifier	find_first_not_of		639317	1					
ANR	639338	ArgumentList	""" \\t"""		639317	1					
ANR	639339	Argument	""" \\t"""		639317	0					
ANR	639340	PrimaryExpression	""" \\t"""		639317	0					
ANR	639341	Argument	charNum + 1		639317	1					
ANR	639342	AdditiveExpression	charNum + 1		639317	0		+			
ANR	639343	Identifier	charNum		639317	0					
ANR	639344	PrimaryExpression	1		639317	1					
ANR	639345	IfStatement	if ( peekNum == string :: npos )		639317	2					
ANR	639346	Condition	peekNum == string :: npos	2333:5:67550:67572	639317	0	True				
ANR	639347	EqualityExpression	peekNum == string :: npos		639317	0		==			
ANR	639348	Identifier	peekNum		639317	0					
ANR	639349	Identifier	string :: npos		639317	1					
ANR	639350	ReturnStatement	return foundComment ;	2334:2:67577:67596	639317	1	True				
ANR	639351	Identifier	foundComment		639317	0					
ANR	639352	ExpressionStatement	"foundComment = ( currentLine . compare ( peekNum , 2 , ""/*"" ) == 0 )"	2336:1:67600:67659	639317	3	True				
ANR	639353	AssignmentExpression	"foundComment = ( currentLine . compare ( peekNum , 2 , ""/*"" ) == 0 )"		639317	0		=			
ANR	639354	Identifier	foundComment		639317	0					
ANR	639355	EqualityExpression	"currentLine . compare ( peekNum , 2 , ""/*"" ) == 0"		639317	1		==			
ANR	639356	CallExpression	"currentLine . compare ( peekNum , 2 , ""/*"" )"		639317	0					
ANR	639357	Callee	currentLine . compare		639317	0					
ANR	639358	MemberAccess	currentLine . compare		639317	0					
ANR	639359	Identifier	currentLine		639317	0					
ANR	639360	Identifier	compare		639317	1					
ANR	639361	ArgumentList	peekNum		639317	1					
ANR	639362	Argument	peekNum		639317	0					
ANR	639363	Identifier	peekNum		639317	0					
ANR	639364	Argument	2		639317	1					
ANR	639365	PrimaryExpression	2		639317	0					
ANR	639366	Argument	"""/*"""		639317	2					
ANR	639367	PrimaryExpression	"""/*"""		639317	0					
ANR	639368	PrimaryExpression	0		639317	1					
ANR	639369	ReturnStatement	return foundComment ;	2338:1:67663:67682	639317	4	True				
ANR	639370	Identifier	foundComment		639317	0					
ANR	639371	ReturnType	bool		639317	1					
ANR	639372	Identifier	ASFormatter :: isBeforeComment		639317	2					
ANR	639373	ParameterList			639317	3					
ANR	639374	CFGEntryNode	ENTRY		639317		True				
ANR	639375	CFGExitNode	EXIT		639317		True				
ANR	639376	Symbol	foundComment		639317						
ANR	639377	Symbol	false		639317						
ANR	639378	Symbol	string :: npos		639317						
ANR	639379	Symbol	charNum		639317						
ANR	639380	Symbol	currentLine . find_first_not_of		639317						
ANR	639381	Symbol	currentLine . compare		639317						
ANR	639382	Symbol	currentLine		639317						
ANR	639383	Symbol	peekNum		639317						
ANR	639384	Function	ASFormatter :: isBeforeAnyComment	2346:0:67816:68163							
ANR	639385	FunctionDef	ASFormatter :: isBeforeAnyComment ()		639384	0					
ANR	639386	CompoundStatement		2347:0:67861:68163	639384	0					
ANR	639387	IdentifierDeclStatement	bool foundComment = false ;	2348:1:67864:67889	639384	0	True				
ANR	639388	IdentifierDecl	foundComment = false		639384	0					
ANR	639389	IdentifierDeclType	bool		639384	0					
ANR	639390	Identifier	foundComment		639384	1					
ANR	639391	AssignmentExpression	foundComment = false		639384	2		=			
ANR	639392	Identifier	false		639384	0					
ANR	639393	Identifier	false		639384	1					
ANR	639394	IdentifierDeclStatement	"size_t peekNum = currentLine . find_first_not_of ( "" \\t"" , charNum + 1 ) ;"	2349:1:67892:67958	639384	1	True				
ANR	639395	IdentifierDecl	"peekNum = currentLine . find_first_not_of ( "" \\t"" , charNum + 1 )"		639384	0					
ANR	639396	IdentifierDeclType	size_t		639384	0					
ANR	639397	Identifier	peekNum		639384	1					
ANR	639398	AssignmentExpression	"peekNum = currentLine . find_first_not_of ( "" \\t"" , charNum + 1 )"		639384	2		=			
ANR	639399	Identifier	peekNum		639384	0					
ANR	639400	CallExpression	"currentLine . find_first_not_of ( "" \\t"" , charNum + 1 )"		639384	1					
ANR	639401	Callee	currentLine . find_first_not_of		639384	0					
ANR	639402	MemberAccess	currentLine . find_first_not_of		639384	0					
ANR	639403	Identifier	currentLine		639384	0					
ANR	639404	Identifier	find_first_not_of		639384	1					
ANR	639405	ArgumentList	""" \\t"""		639384	1					
ANR	639406	Argument	""" \\t"""		639384	0					
ANR	639407	PrimaryExpression	""" \\t"""		639384	0					
ANR	639408	Argument	charNum + 1		639384	1					
ANR	639409	AdditiveExpression	charNum + 1		639384	0		+			
ANR	639410	Identifier	charNum		639384	0					
ANR	639411	PrimaryExpression	1		639384	1					
ANR	639412	IfStatement	if ( peekNum == string :: npos )		639384	2					
ANR	639413	Condition	peekNum == string :: npos	2351:5:67966:67988	639384	0	True				
ANR	639414	EqualityExpression	peekNum == string :: npos		639384	0		==			
ANR	639415	Identifier	peekNum		639384	0					
ANR	639416	Identifier	string :: npos		639384	1					
ANR	639417	ReturnStatement	return foundComment ;	2352:2:67993:68012	639384	1	True				
ANR	639418	Identifier	foundComment		639384	0					
ANR	639419	ExpressionStatement	"foundComment = ( currentLine . compare ( peekNum , 2 , ""/*"" ) == 0 || currentLine . compare ( peekNum , 2 , ""//"" ) == 0 )"	2354:1:68016:68138	639384	3	True				
ANR	639420	AssignmentExpression	"foundComment = ( currentLine . compare ( peekNum , 2 , ""/*"" ) == 0 || currentLine . compare ( peekNum , 2 , ""//"" ) == 0 )"		639384	0		=			
ANR	639421	Identifier	foundComment		639384	0					
ANR	639422	OrExpression	"currentLine . compare ( peekNum , 2 , ""/*"" ) == 0 || currentLine . compare ( peekNum , 2 , ""//"" ) == 0"		639384	1		||			
ANR	639423	EqualityExpression	"currentLine . compare ( peekNum , 2 , ""/*"" ) == 0"		639384	0		==			
ANR	639424	CallExpression	"currentLine . compare ( peekNum , 2 , ""/*"" )"		639384	0					
ANR	639425	Callee	currentLine . compare		639384	0					
ANR	639426	MemberAccess	currentLine . compare		639384	0					
ANR	639427	Identifier	currentLine		639384	0					
ANR	639428	Identifier	compare		639384	1					
ANR	639429	ArgumentList	peekNum		639384	1					
ANR	639430	Argument	peekNum		639384	0					
ANR	639431	Identifier	peekNum		639384	0					
ANR	639432	Argument	2		639384	1					
ANR	639433	PrimaryExpression	2		639384	0					
ANR	639434	Argument	"""/*"""		639384	2					
ANR	639435	PrimaryExpression	"""/*"""		639384	0					
ANR	639436	PrimaryExpression	0		639384	1					
ANR	639437	EqualityExpression	"currentLine . compare ( peekNum , 2 , ""//"" ) == 0"		639384	1		==			
ANR	639438	CallExpression	"currentLine . compare ( peekNum , 2 , ""//"" )"		639384	0					
ANR	639439	Callee	currentLine . compare		639384	0					
ANR	639440	MemberAccess	currentLine . compare		639384	0					
ANR	639441	Identifier	currentLine		639384	0					
ANR	639442	Identifier	compare		639384	1					
ANR	639443	ArgumentList	peekNum		639384	1					
ANR	639444	Argument	peekNum		639384	0					
ANR	639445	Identifier	peekNum		639384	0					
ANR	639446	Argument	2		639384	1					
ANR	639447	PrimaryExpression	2		639384	0					
ANR	639448	Argument	"""//"""		639384	2					
ANR	639449	PrimaryExpression	"""//"""		639384	0					
ANR	639450	PrimaryExpression	0		639384	1					
ANR	639451	ReturnStatement	return foundComment ;	2357:1:68142:68161	639384	4	True				
ANR	639452	Identifier	foundComment		639384	0					
ANR	639453	ReturnType	bool		639384	1					
ANR	639454	Identifier	ASFormatter :: isBeforeAnyComment		639384	2					
ANR	639455	ParameterList			639384	3					
ANR	639456	CFGEntryNode	ENTRY		639384		True				
ANR	639457	CFGExitNode	EXIT		639384		True				
ANR	639458	Symbol	foundComment		639384						
ANR	639459	Symbol	false		639384						
ANR	639460	Symbol	string :: npos		639384						
ANR	639461	Symbol	charNum		639384						
ANR	639462	Symbol	currentLine . find_first_not_of		639384						
ANR	639463	Symbol	currentLine . compare		639384						
ANR	639464	Symbol	peekNum		639384						
ANR	639465	Symbol	currentLine		639384						
ANR	639466	Function	ASFormatter :: isBeforeAnyLineEndComment	2366:0:68351:69032							
ANR	639467	FunctionDef	ASFormatter :: isBeforeAnyLineEndComment (int startPos)		639466	0					
ANR	639468	CompoundStatement		2367:0:68415:69032	639466	0					
ANR	639469	IdentifierDeclStatement	bool foundLineEndComment = false ;	2368:1:68418:68450	639466	0	True				
ANR	639470	IdentifierDecl	foundLineEndComment = false		639466	0					
ANR	639471	IdentifierDeclType	bool		639466	0					
ANR	639472	Identifier	foundLineEndComment		639466	1					
ANR	639473	AssignmentExpression	foundLineEndComment = false		639466	2		=			
ANR	639474	Identifier	false		639466	0					
ANR	639475	Identifier	false		639466	1					
ANR	639476	IdentifierDeclStatement	"size_t peekNum = currentLine . find_first_not_of ( "" \\t"" , startPos + 1 ) ;"	2369:1:68453:68520	639466	1	True				
ANR	639477	IdentifierDecl	"peekNum = currentLine . find_first_not_of ( "" \\t"" , startPos + 1 )"		639466	0					
ANR	639478	IdentifierDeclType	size_t		639466	0					
ANR	639479	Identifier	peekNum		639466	1					
ANR	639480	AssignmentExpression	"peekNum = currentLine . find_first_not_of ( "" \\t"" , startPos + 1 )"		639466	2		=			
ANR	639481	Identifier	peekNum		639466	0					
ANR	639482	CallExpression	"currentLine . find_first_not_of ( "" \\t"" , startPos + 1 )"		639466	1					
ANR	639483	Callee	currentLine . find_first_not_of		639466	0					
ANR	639484	MemberAccess	currentLine . find_first_not_of		639466	0					
ANR	639485	Identifier	currentLine		639466	0					
ANR	639486	Identifier	find_first_not_of		639466	1					
ANR	639487	ArgumentList	""" \\t"""		639466	1					
ANR	639488	Argument	""" \\t"""		639466	0					
ANR	639489	PrimaryExpression	""" \\t"""		639466	0					
ANR	639490	Argument	startPos + 1		639466	1					
ANR	639491	AdditiveExpression	startPos + 1		639466	0		+			
ANR	639492	Identifier	startPos		639466	0					
ANR	639493	PrimaryExpression	1		639466	1					
ANR	639494	IfStatement	if ( peekNum != string :: npos )		639466	2					
ANR	639495	Condition	peekNum != string :: npos	2371:5:68528:68550	639466	0	True				
ANR	639496	EqualityExpression	peekNum != string :: npos		639466	0		!=			
ANR	639497	Identifier	peekNum		639466	0					
ANR	639498	Identifier	string :: npos		639466	1					
ANR	639499	CompoundStatement		6:1:138:138	639466	1					
ANR	639500	IfStatement	"if ( currentLine . compare ( peekNum , 2 , ""//"" ) == 0 )"		639466	0					
ANR	639501	Condition	"currentLine . compare ( peekNum , 2 , ""//"" ) == 0"	2373:6:68562:68603	639466	0	True				
ANR	639502	EqualityExpression	"currentLine . compare ( peekNum , 2 , ""//"" ) == 0"		639466	0		==			
ANR	639503	CallExpression	"currentLine . compare ( peekNum , 2 , ""//"" )"		639466	0					
ANR	639504	Callee	currentLine . compare		639466	0					
ANR	639505	MemberAccess	currentLine . compare		639466	0					
ANR	639506	Identifier	currentLine		639466	0					
ANR	639507	Identifier	compare		639466	1					
ANR	639508	ArgumentList	peekNum		639466	1					
ANR	639509	Argument	peekNum		639466	0					
ANR	639510	Identifier	peekNum		639466	0					
ANR	639511	Argument	2		639466	1					
ANR	639512	PrimaryExpression	2		639466	0					
ANR	639513	Argument	"""//"""		639466	2					
ANR	639514	PrimaryExpression	"""//"""		639466	0					
ANR	639515	PrimaryExpression	0		639466	1					
ANR	639516	ExpressionStatement	foundLineEndComment = true	2374:3:68609:68635	639466	1	True				
ANR	639517	AssignmentExpression	foundLineEndComment = true		639466	0		=			
ANR	639518	Identifier	foundLineEndComment		639466	0					
ANR	639519	Identifier	true		639466	1					
ANR	639520	ElseStatement	else		639466	0					
ANR	639521	IfStatement	"if ( currentLine . compare ( peekNum , 2 , ""/*"" ) == 0 )"		639466	0					
ANR	639522	Condition	"currentLine . compare ( peekNum , 2 , ""/*"" ) == 0"	2375:11:68648:68689	639466	0	True				
ANR	639523	EqualityExpression	"currentLine . compare ( peekNum , 2 , ""/*"" ) == 0"		639466	0		==			
ANR	639524	CallExpression	"currentLine . compare ( peekNum , 2 , ""/*"" )"		639466	0					
ANR	639525	Callee	currentLine . compare		639466	0					
ANR	639526	MemberAccess	currentLine . compare		639466	0					
ANR	639527	Identifier	currentLine		639466	0					
ANR	639528	Identifier	compare		639466	1					
ANR	639529	ArgumentList	peekNum		639466	1					
ANR	639530	Argument	peekNum		639466	0					
ANR	639531	Identifier	peekNum		639466	0					
ANR	639532	Argument	2		639466	1					
ANR	639533	PrimaryExpression	2		639466	0					
ANR	639534	Argument	"""/*"""		639466	2					
ANR	639535	PrimaryExpression	"""/*"""		639466	0					
ANR	639536	PrimaryExpression	0		639466	1					
ANR	639537	CompoundStatement		12:3:347:398	639466	1					
ANR	639538	IdentifierDeclStatement	"size_t endNum = currentLine . find ( ""*/"" , peekNum + 2 ) ;"	2378:3:68763:68814	639466	0	True				
ANR	639539	IdentifierDecl	"endNum = currentLine . find ( ""*/"" , peekNum + 2 )"		639466	0					
ANR	639540	IdentifierDeclType	size_t		639466	0					
ANR	639541	Identifier	endNum		639466	1					
ANR	639542	AssignmentExpression	"endNum = currentLine . find ( ""*/"" , peekNum + 2 )"		639466	2		=			
ANR	639543	Identifier	endNum		639466	0					
ANR	639544	CallExpression	"currentLine . find ( ""*/"" , peekNum + 2 )"		639466	1					
ANR	639545	Callee	currentLine . find		639466	0					
ANR	639546	MemberAccess	currentLine . find		639466	0					
ANR	639547	Identifier	currentLine		639466	0					
ANR	639548	Identifier	find		639466	1					
ANR	639549	ArgumentList	"""*/"""		639466	1					
ANR	639550	Argument	"""*/"""		639466	0					
ANR	639551	PrimaryExpression	"""*/"""		639466	0					
ANR	639552	Argument	peekNum + 2		639466	1					
ANR	639553	AdditiveExpression	peekNum + 2		639466	0		+			
ANR	639554	Identifier	peekNum		639466	0					
ANR	639555	PrimaryExpression	2		639466	1					
ANR	639556	IfStatement	if ( endNum != string :: npos )		639466	1					
ANR	639557	Condition	endNum != string :: npos	2379:7:68823:68844	639466	0	True				
ANR	639558	EqualityExpression	endNum != string :: npos		639466	0		!=			
ANR	639559	Identifier	endNum		639466	0					
ANR	639560	Identifier	string :: npos		639466	1					
ANR	639561	CompoundStatement		15:4:440:506	639466	1					
ANR	639562	IdentifierDeclStatement	"size_t nextChar = currentLine . find_first_not_of ( "" \\t"" , endNum + 2 ) ;"	2381:4:68856:68922	639466	0	True				
ANR	639563	IdentifierDecl	"nextChar = currentLine . find_first_not_of ( "" \\t"" , endNum + 2 )"		639466	0					
ANR	639564	IdentifierDeclType	size_t		639466	0					
ANR	639565	Identifier	nextChar		639466	1					
ANR	639566	AssignmentExpression	"nextChar = currentLine . find_first_not_of ( "" \\t"" , endNum + 2 )"		639466	2		=			
ANR	639567	Identifier	nextChar		639466	0					
ANR	639568	CallExpression	"currentLine . find_first_not_of ( "" \\t"" , endNum + 2 )"		639466	1					
ANR	639569	Callee	currentLine . find_first_not_of		639466	0					
ANR	639570	MemberAccess	currentLine . find_first_not_of		639466	0					
ANR	639571	Identifier	currentLine		639466	0					
ANR	639572	Identifier	find_first_not_of		639466	1					
ANR	639573	ArgumentList	""" \\t"""		639466	1					
ANR	639574	Argument	""" \\t"""		639466	0					
ANR	639575	PrimaryExpression	""" \\t"""		639466	0					
ANR	639576	Argument	endNum + 2		639466	1					
ANR	639577	AdditiveExpression	endNum + 2		639466	0		+			
ANR	639578	Identifier	endNum		639466	0					
ANR	639579	PrimaryExpression	2		639466	1					
ANR	639580	IfStatement	if ( nextChar == string :: npos )		639466	1					
ANR	639581	Condition	nextChar == string :: npos	2382:8:68932:68955	639466	0	True				
ANR	639582	EqualityExpression	nextChar == string :: npos		639466	0		==			
ANR	639583	Identifier	nextChar		639466	0					
ANR	639584	Identifier	string :: npos		639466	1					
ANR	639585	ExpressionStatement	foundLineEndComment = true	2383:5:68963:68989	639466	1	True				
ANR	639586	AssignmentExpression	foundLineEndComment = true		639466	0		=			
ANR	639587	Identifier	foundLineEndComment		639466	0					
ANR	639588	Identifier	true		639466	1					
ANR	639589	ReturnStatement	return foundLineEndComment ;	2387:1:69004:69030	639466	3	True				
ANR	639590	Identifier	foundLineEndComment		639466	0					
ANR	639591	ReturnType	bool		639466	1					
ANR	639592	Identifier	ASFormatter :: isBeforeAnyLineEndComment		639466	2					
ANR	639593	ParameterList	int startPos		639466	3					
ANR	639594	Parameter	int startPos	2366:44:68395:68406	639466	0	True				
ANR	639595	ParameterType	int		639466	0					
ANR	639596	Identifier	startPos		639466	1					
ANR	639597	CFGEntryNode	ENTRY		639466		True				
ANR	639598	CFGExitNode	EXIT		639466		True				
ANR	639599	Symbol	currentLine . find		639466						
ANR	639600	Symbol	nextChar		639466						
ANR	639601	Symbol	false		639466						
ANR	639602	Symbol	string :: npos		639466						
ANR	639603	Symbol	true		639466						
ANR	639604	Symbol	currentLine . find_first_not_of		639466						
ANR	639605	Symbol	endNum		639466						
ANR	639606	Symbol	startPos		639466						
ANR	639607	Symbol	currentLine . compare		639466						
ANR	639608	Symbol	foundLineEndComment		639466						
ANR	639609	Symbol	currentLine		639466						
ANR	639610	Symbol	peekNum		639466						
ANR	639611	Function	ASFormatter :: isBeforeMultipleLineEndComments	2395:0:69177:69861							
ANR	639612	FunctionDef	ASFormatter :: isBeforeMultipleLineEndComments (int startPos)		639611	0					
ANR	639613	CompoundStatement		2396:0:69247:69861	639611	0					
ANR	639614	IdentifierDeclStatement	bool foundMultipleLineEndComment = false ;	2397:1:69250:69290	639611	0	True				
ANR	639615	IdentifierDecl	foundMultipleLineEndComment = false		639611	0					
ANR	639616	IdentifierDeclType	bool		639611	0					
ANR	639617	Identifier	foundMultipleLineEndComment		639611	1					
ANR	639618	AssignmentExpression	foundMultipleLineEndComment = false		639611	2		=			
ANR	639619	Identifier	false		639611	0					
ANR	639620	Identifier	false		639611	1					
ANR	639621	IdentifierDeclStatement	"size_t peekNum = currentLine . find_first_not_of ( "" \\t"" , startPos + 1 ) ;"	2398:1:69293:69360	639611	1	True				
ANR	639622	IdentifierDecl	"peekNum = currentLine . find_first_not_of ( "" \\t"" , startPos + 1 )"		639611	0					
ANR	639623	IdentifierDeclType	size_t		639611	0					
ANR	639624	Identifier	peekNum		639611	1					
ANR	639625	AssignmentExpression	"peekNum = currentLine . find_first_not_of ( "" \\t"" , startPos + 1 )"		639611	2		=			
ANR	639626	Identifier	peekNum		639611	0					
ANR	639627	CallExpression	"currentLine . find_first_not_of ( "" \\t"" , startPos + 1 )"		639611	1					
ANR	639628	Callee	currentLine . find_first_not_of		639611	0					
ANR	639629	MemberAccess	currentLine . find_first_not_of		639611	0					
ANR	639630	Identifier	currentLine		639611	0					
ANR	639631	Identifier	find_first_not_of		639611	1					
ANR	639632	ArgumentList	""" \\t"""		639611	1					
ANR	639633	Argument	""" \\t"""		639611	0					
ANR	639634	PrimaryExpression	""" \\t"""		639611	0					
ANR	639635	Argument	startPos + 1		639611	1					
ANR	639636	AdditiveExpression	startPos + 1		639611	0		+			
ANR	639637	Identifier	startPos		639611	0					
ANR	639638	PrimaryExpression	1		639611	1					
ANR	639639	IfStatement	if ( peekNum != string :: npos )		639611	2					
ANR	639640	Condition	peekNum != string :: npos	2400:5:69368:69390	639611	0	True				
ANR	639641	EqualityExpression	peekNum != string :: npos		639611	0		!=			
ANR	639642	Identifier	peekNum		639611	0					
ANR	639643	Identifier	string :: npos		639611	1					
ANR	639644	CompoundStatement		6:1:146:146	639611	1					
ANR	639645	IfStatement	"if ( currentLine . compare ( peekNum , 2 , ""/*"" ) == 0 )"		639611	0					
ANR	639646	Condition	"currentLine . compare ( peekNum , 2 , ""/*"" ) == 0"	2402:6:69402:69443	639611	0	True				
ANR	639647	EqualityExpression	"currentLine . compare ( peekNum , 2 , ""/*"" ) == 0"		639611	0		==			
ANR	639648	CallExpression	"currentLine . compare ( peekNum , 2 , ""/*"" )"		639611	0					
ANR	639649	Callee	currentLine . compare		639611	0					
ANR	639650	MemberAccess	currentLine . compare		639611	0					
ANR	639651	Identifier	currentLine		639611	0					
ANR	639652	Identifier	compare		639611	1					
ANR	639653	ArgumentList	peekNum		639611	1					
ANR	639654	Argument	peekNum		639611	0					
ANR	639655	Identifier	peekNum		639611	0					
ANR	639656	Argument	2		639611	1					
ANR	639657	PrimaryExpression	2		639611	0					
ANR	639658	Argument	"""/*"""		639611	2					
ANR	639659	PrimaryExpression	"""/*"""		639611	0					
ANR	639660	PrimaryExpression	0		639611	1					
ANR	639661	CompoundStatement		10:3:269:320	639611	1					
ANR	639662	IdentifierDeclStatement	"size_t endNum = currentLine . find ( ""*/"" , peekNum + 2 ) ;"	2405:3:69517:69568	639611	0	True				
ANR	639663	IdentifierDecl	"endNum = currentLine . find ( ""*/"" , peekNum + 2 )"		639611	0					
ANR	639664	IdentifierDeclType	size_t		639611	0					
ANR	639665	Identifier	endNum		639611	1					
ANR	639666	AssignmentExpression	"endNum = currentLine . find ( ""*/"" , peekNum + 2 )"		639611	2		=			
ANR	639667	Identifier	endNum		639611	0					
ANR	639668	CallExpression	"currentLine . find ( ""*/"" , peekNum + 2 )"		639611	1					
ANR	639669	Callee	currentLine . find		639611	0					
ANR	639670	MemberAccess	currentLine . find		639611	0					
ANR	639671	Identifier	currentLine		639611	0					
ANR	639672	Identifier	find		639611	1					
ANR	639673	ArgumentList	"""*/"""		639611	1					
ANR	639674	Argument	"""*/"""		639611	0					
ANR	639675	PrimaryExpression	"""*/"""		639611	0					
ANR	639676	Argument	peekNum + 2		639611	1					
ANR	639677	AdditiveExpression	peekNum + 2		639611	0		+			
ANR	639678	Identifier	peekNum		639611	0					
ANR	639679	PrimaryExpression	2		639611	1					
ANR	639680	IfStatement	if ( endNum != string :: npos )		639611	1					
ANR	639681	Condition	endNum != string :: npos	2406:7:69577:69598	639611	0	True				
ANR	639682	EqualityExpression	endNum != string :: npos		639611	0		!=			
ANR	639683	Identifier	endNum		639611	0					
ANR	639684	Identifier	string :: npos		639611	1					
ANR	639685	CompoundStatement		13:4:362:428	639611	1					
ANR	639686	IdentifierDeclStatement	"size_t nextChar = currentLine . find_first_not_of ( "" \\t"" , endNum + 2 ) ;"	2408:4:69610:69676	639611	0	True				
ANR	639687	IdentifierDecl	"nextChar = currentLine . find_first_not_of ( "" \\t"" , endNum + 2 )"		639611	0					
ANR	639688	IdentifierDeclType	size_t		639611	0					
ANR	639689	Identifier	nextChar		639611	1					
ANR	639690	AssignmentExpression	"nextChar = currentLine . find_first_not_of ( "" \\t"" , endNum + 2 )"		639611	2		=			
ANR	639691	Identifier	nextChar		639611	0					
ANR	639692	CallExpression	"currentLine . find_first_not_of ( "" \\t"" , endNum + 2 )"		639611	1					
ANR	639693	Callee	currentLine . find_first_not_of		639611	0					
ANR	639694	MemberAccess	currentLine . find_first_not_of		639611	0					
ANR	639695	Identifier	currentLine		639611	0					
ANR	639696	Identifier	find_first_not_of		639611	1					
ANR	639697	ArgumentList	""" \\t"""		639611	1					
ANR	639698	Argument	""" \\t"""		639611	0					
ANR	639699	PrimaryExpression	""" \\t"""		639611	0					
ANR	639700	Argument	endNum + 2		639611	1					
ANR	639701	AdditiveExpression	endNum + 2		639611	0		+			
ANR	639702	Identifier	endNum		639611	0					
ANR	639703	PrimaryExpression	2		639611	1					
ANR	639704	IfStatement	"if ( nextChar != string :: npos && currentLine . compare ( nextChar , 2 , ""//"" ) == 0 )"		639611	1					
ANR	639705	Condition	"nextChar != string :: npos && currentLine . compare ( nextChar , 2 , ""//"" ) == 0"	2409:8:69686:69768	639611	0	True				
ANR	639706	AndExpression	"nextChar != string :: npos && currentLine . compare ( nextChar , 2 , ""//"" ) == 0"		639611	0		&&			
ANR	639707	EqualityExpression	nextChar != string :: npos		639611	0		!=			
ANR	639708	Identifier	nextChar		639611	0					
ANR	639709	Identifier	string :: npos		639611	1					
ANR	639710	EqualityExpression	"currentLine . compare ( nextChar , 2 , ""//"" ) == 0"		639611	1		==			
ANR	639711	CallExpression	"currentLine . compare ( nextChar , 2 , ""//"" )"		639611	0					
ANR	639712	Callee	currentLine . compare		639611	0					
ANR	639713	MemberAccess	currentLine . compare		639611	0					
ANR	639714	Identifier	currentLine		639611	0					
ANR	639715	Identifier	compare		639611	1					
ANR	639716	ArgumentList	nextChar		639611	1					
ANR	639717	Argument	nextChar		639611	0					
ANR	639718	Identifier	nextChar		639611	0					
ANR	639719	Argument	2		639611	1					
ANR	639720	PrimaryExpression	2		639611	0					
ANR	639721	Argument	"""//"""		639611	2					
ANR	639722	PrimaryExpression	"""//"""		639611	0					
ANR	639723	PrimaryExpression	0		639611	1					
ANR	639724	ExpressionStatement	foundMultipleLineEndComment = true	2411:5:69776:69810	639611	1	True				
ANR	639725	AssignmentExpression	foundMultipleLineEndComment = true		639611	0		=			
ANR	639726	Identifier	foundMultipleLineEndComment		639611	0					
ANR	639727	Identifier	true		639611	1					
ANR	639728	ReturnStatement	return foundMultipleLineEndComment ;	2415:1:69825:69859	639611	3	True				
ANR	639729	Identifier	foundMultipleLineEndComment		639611	0					
ANR	639730	ReturnType	bool		639611	1					
ANR	639731	Identifier	ASFormatter :: isBeforeMultipleLineEndComments		639611	2					
ANR	639732	ParameterList	int startPos		639611	3					
ANR	639733	Parameter	int startPos	2395:50:69227:69238	639611	0	True				
ANR	639734	ParameterType	int		639611	0					
ANR	639735	Identifier	startPos		639611	1					
ANR	639736	CFGEntryNode	ENTRY		639611		True				
ANR	639737	CFGExitNode	EXIT		639611		True				
ANR	639738	Symbol	currentLine . find		639611						
ANR	639739	Symbol	foundMultipleLineEndComment		639611						
ANR	639740	Symbol	nextChar		639611						
ANR	639741	Symbol	false		639611						
ANR	639742	Symbol	string :: npos		639611						
ANR	639743	Symbol	true		639611						
ANR	639744	Symbol	currentLine . find_first_not_of		639611						
ANR	639745	Symbol	endNum		639611						
ANR	639746	Symbol	startPos		639611						
ANR	639747	Symbol	currentLine . compare		639611						
ANR	639748	Symbol	currentLine		639611						
ANR	639749	Symbol	peekNum		639611						
ANR	639750	Function	ASFormatter :: getNextChar	2424:0:70076:70838							
ANR	639751	FunctionDef	ASFormatter :: getNextChar ()		639750	0					
ANR	639752	CompoundStatement		2425:0:70108:70838	639750	0					
ANR	639753	ExpressionStatement	isInLineBreak = false	2426:1:70111:70132	639750	0	True				
ANR	639754	AssignmentExpression	isInLineBreak = false		639750	0		=			
ANR	639755	Identifier	isInLineBreak		639750	0					
ANR	639756	Identifier	false		639750	1					
ANR	639757	ExpressionStatement	previousChar = currentChar	2427:1:70135:70161	639750	1	True				
ANR	639758	AssignmentExpression	previousChar = currentChar		639750	0		=			
ANR	639759	Identifier	previousChar		639750	0					
ANR	639760	Identifier	currentChar		639750	1					
ANR	639761	IfStatement	if ( ! isWhiteSpace ( currentChar ) )		639750	2					
ANR	639762	Condition	! isWhiteSpace ( currentChar )	2429:5:70169:70194	639750	0	True				
ANR	639763	UnaryOperationExpression	! isWhiteSpace ( currentChar )		639750	0					
ANR	639764	UnaryOperator	!		639750	0					
ANR	639765	CallExpression	isWhiteSpace ( currentChar )		639750	1					
ANR	639766	Callee	isWhiteSpace		639750	0					
ANR	639767	Identifier	isWhiteSpace		639750	0					
ANR	639768	ArgumentList	currentChar		639750	1					
ANR	639769	Argument	currentChar		639750	0					
ANR	639770	Identifier	currentChar		639750	0					
ANR	639771	CompoundStatement		6:1:89:89	639750	1					
ANR	639772	ExpressionStatement	previousNonWSChar = currentChar	2431:2:70202:70233	639750	0	True				
ANR	639773	AssignmentExpression	previousNonWSChar = currentChar		639750	0		=			
ANR	639774	Identifier	previousNonWSChar		639750	0					
ANR	639775	Identifier	currentChar		639750	1					
ANR	639776	IfStatement	"if ( ! isInComment && ! isInLineComment && ! isInQuote && ! isImmediatelyPostComment && ! isImmediatelyPostLineComment && ! isInPreprocessor && ! isSequenceReached ( ""/*"" ) && ! isSequenceReached ( ""//"" ) )"		639750	1					
ANR	639777	Condition	"! isInComment && ! isInLineComment && ! isInQuote && ! isImmediatelyPostComment && ! isImmediatelyPostLineComment && ! isInPreprocessor && ! isSequenceReached ( ""/*"" ) && ! isSequenceReached ( ""//"" )"	2432:6:70241:70475	639750	0	True				
ANR	639778	AndExpression	"! isInComment && ! isInLineComment && ! isInQuote && ! isImmediatelyPostComment && ! isImmediatelyPostLineComment && ! isInPreprocessor && ! isSequenceReached ( ""/*"" ) && ! isSequenceReached ( ""//"" )"		639750	0		&&			
ANR	639779	UnaryOperationExpression	! isInComment		639750	0					
ANR	639780	UnaryOperator	!		639750	0					
ANR	639781	Identifier	isInComment		639750	1					
ANR	639782	AndExpression	"! isInLineComment && ! isInQuote && ! isImmediatelyPostComment && ! isImmediatelyPostLineComment && ! isInPreprocessor && ! isSequenceReached ( ""/*"" ) && ! isSequenceReached ( ""//"" )"		639750	1		&&			
ANR	639783	UnaryOperationExpression	! isInLineComment		639750	0					
ANR	639784	UnaryOperator	!		639750	0					
ANR	639785	Identifier	isInLineComment		639750	1					
ANR	639786	AndExpression	"! isInQuote && ! isImmediatelyPostComment && ! isImmediatelyPostLineComment && ! isInPreprocessor && ! isSequenceReached ( ""/*"" ) && ! isSequenceReached ( ""//"" )"		639750	1		&&			
ANR	639787	UnaryOperationExpression	! isInQuote		639750	0					
ANR	639788	UnaryOperator	!		639750	0					
ANR	639789	Identifier	isInQuote		639750	1					
ANR	639790	AndExpression	"! isImmediatelyPostComment && ! isImmediatelyPostLineComment && ! isInPreprocessor && ! isSequenceReached ( ""/*"" ) && ! isSequenceReached ( ""//"" )"		639750	1		&&			
ANR	639791	UnaryOperationExpression	! isImmediatelyPostComment		639750	0					
ANR	639792	UnaryOperator	!		639750	0					
ANR	639793	Identifier	isImmediatelyPostComment		639750	1					
ANR	639794	AndExpression	"! isImmediatelyPostLineComment && ! isInPreprocessor && ! isSequenceReached ( ""/*"" ) && ! isSequenceReached ( ""//"" )"		639750	1		&&			
ANR	639795	UnaryOperationExpression	! isImmediatelyPostLineComment		639750	0					
ANR	639796	UnaryOperator	!		639750	0					
ANR	639797	Identifier	isImmediatelyPostLineComment		639750	1					
ANR	639798	AndExpression	"! isInPreprocessor && ! isSequenceReached ( ""/*"" ) && ! isSequenceReached ( ""//"" )"		639750	1		&&			
ANR	639799	UnaryOperationExpression	! isInPreprocessor		639750	0					
ANR	639800	UnaryOperator	!		639750	0					
ANR	639801	Identifier	isInPreprocessor		639750	1					
ANR	639802	AndExpression	"! isSequenceReached ( ""/*"" ) && ! isSequenceReached ( ""//"" )"		639750	1		&&			
ANR	639803	UnaryOperationExpression	"! isSequenceReached ( ""/*"" )"		639750	0					
ANR	639804	UnaryOperator	!		639750	0					
ANR	639805	CallExpression	"isSequenceReached ( ""/*"" )"		639750	1					
ANR	639806	Callee	isSequenceReached		639750	0					
ANR	639807	Identifier	isSequenceReached		639750	0					
ANR	639808	ArgumentList	"""/*"""		639750	1					
ANR	639809	Argument	"""/*"""		639750	0					
ANR	639810	PrimaryExpression	"""/*"""		639750	0					
ANR	639811	UnaryOperationExpression	"! isSequenceReached ( ""//"" )"		639750	1					
ANR	639812	UnaryOperator	!		639750	0					
ANR	639813	CallExpression	"isSequenceReached ( ""//"" )"		639750	1					
ANR	639814	Callee	isSequenceReached		639750	0					
ANR	639815	Identifier	isSequenceReached		639750	0					
ANR	639816	ArgumentList	"""//"""		639750	1					
ANR	639817	Argument	"""//"""		639750	0					
ANR	639818	PrimaryExpression	"""//"""		639750	0					
ANR	639819	ExpressionStatement	previousCommandChar = currentChar	2438:3:70481:70514	639750	1	True				
ANR	639820	AssignmentExpression	previousCommandChar = currentChar		639750	0		=			
ANR	639821	Identifier	previousCommandChar		639750	0					
ANR	639822	Identifier	currentChar		639750	1					
ANR	639823	IfStatement	if ( charNum + 1 < ( int ) currentLine . length ( ) && ( ! isWhiteSpace ( peekNextChar ( ) ) || isInComment || isInLineComment ) )		639750	3					
ANR	639824	Condition	charNum + 1 < ( int ) currentLine . length ( ) && ( ! isWhiteSpace ( peekNextChar ( ) ) || isInComment || isInLineComment )	2441:5:70525:70642	639750	0	True				
ANR	639825	AndExpression	charNum + 1 < ( int ) currentLine . length ( ) && ( ! isWhiteSpace ( peekNextChar ( ) ) || isInComment || isInLineComment )		639750	0		&&			
ANR	639826	RelationalExpression	charNum + 1 < ( int ) currentLine . length ( )		639750	0		<			
ANR	639827	AdditiveExpression	charNum + 1		639750	0		+			
ANR	639828	Identifier	charNum		639750	0					
ANR	639829	PrimaryExpression	1		639750	1					
ANR	639830	CastExpression	( int ) currentLine . length ( )		639750	1					
ANR	639831	CastTarget	int		639750	0					
ANR	639832	CallExpression	currentLine . length ( )		639750	1					
ANR	639833	Callee	currentLine . length		639750	0					
ANR	639834	MemberAccess	currentLine . length		639750	0					
ANR	639835	Identifier	currentLine		639750	0					
ANR	639836	Identifier	length		639750	1					
ANR	639837	ArgumentList			639750	1					
ANR	639838	OrExpression	! isWhiteSpace ( peekNextChar ( ) ) || isInComment || isInLineComment		639750	1		||			
ANR	639839	UnaryOperationExpression	! isWhiteSpace ( peekNextChar ( ) )		639750	0					
ANR	639840	UnaryOperator	!		639750	0					
ANR	639841	CallExpression	isWhiteSpace ( peekNextChar ( ) )		639750	1					
ANR	639842	Callee	isWhiteSpace		639750	0					
ANR	639843	Identifier	isWhiteSpace		639750	0					
ANR	639844	ArgumentList	peekNextChar ( )		639750	1					
ANR	639845	Argument	peekNextChar ( )		639750	0					
ANR	639846	CallExpression	peekNextChar ( )		639750	0					
ANR	639847	Callee	peekNextChar		639750	0					
ANR	639848	Identifier	peekNextChar		639750	0					
ANR	639849	ArgumentList			639750	1					
ANR	639850	OrExpression	isInComment || isInLineComment		639750	1		||			
ANR	639851	Identifier	isInComment		639750	0					
ANR	639852	Identifier	isInLineComment		639750	1					
ANR	639853	CompoundStatement		19:1:537:537	639750	1					
ANR	639854	ExpressionStatement	currentChar = currentLine [ ++ charNum ]	2444:2:70650:70686	639750	0	True				
ANR	639855	AssignmentExpression	currentChar = currentLine [ ++ charNum ]		639750	0		=			
ANR	639856	Identifier	currentChar		639750	0					
ANR	639857	ArrayIndexing	currentLine [ ++ charNum ]		639750	1					
ANR	639858	Identifier	currentLine		639750	0					
ANR	639859	UnaryExpression	++ charNum		639750	1					
ANR	639860	IncDec	++		639750	0					
ANR	639861	Identifier	charNum		639750	1					
ANR	639862	IfStatement	if ( currentChar == '\\t' && shouldConvertTabs )		639750	1					
ANR	639863	Condition	currentChar == '\\t' && shouldConvertTabs	2446:6:70695:70734	639750	0	True				
ANR	639864	AndExpression	currentChar == '\\t' && shouldConvertTabs		639750	0		&&			
ANR	639865	EqualityExpression	currentChar == '\\t'		639750	0		==			
ANR	639866	Identifier	currentChar		639750	0					
ANR	639867	PrimaryExpression	'\\t'		639750	1					
ANR	639868	Identifier	shouldConvertTabs		639750	1					
ANR	639869	ExpressionStatement	convertTabToSpaces ( )	2447:3:70740:70760	639750	1	True				
ANR	639870	CallExpression	convertTabToSpaces ( )		639750	0					
ANR	639871	Callee	convertTabToSpaces		639750	0					
ANR	639872	Identifier	convertTabToSpaces		639750	0					
ANR	639873	ArgumentList			639750	1					
ANR	639874	ReturnStatement	return true ;	2449:2:70765:70776	639750	2	True				
ANR	639875	Identifier	true		639750	0					
ANR	639876	ReturnStatement	return getNextLine ( ) ;	2453:1:70816:70836	639750	4	True				
ANR	639877	CallExpression	getNextLine ( )		639750	0					
ANR	639878	Callee	getNextLine		639750	0					
ANR	639879	Identifier	getNextLine		639750	0					
ANR	639880	ArgumentList			639750	1					
ANR	639881	ReturnType	bool		639750	1					
ANR	639882	Identifier	ASFormatter :: getNextChar		639750	2					
ANR	639883	ParameterList			639750	3					
ANR	639884	CFGEntryNode	ENTRY		639750		True				
ANR	639885	CFGExitNode	EXIT		639750		True				
ANR	639886	Symbol	getNextLine		639750						
ANR	639887	Symbol	currentChar		639750						
ANR	639888	Symbol	previousNonWSChar		639750						
ANR	639889	Symbol	peekNextChar		639750						
ANR	639890	Symbol	isInLineBreak		639750						
ANR	639891	Symbol	false		639750						
ANR	639892	Symbol	previousCommandChar		639750						
ANR	639893	Symbol	isInQuote		639750						
ANR	639894	Symbol	isWhiteSpace		639750						
ANR	639895	Symbol	isInLineComment		639750						
ANR	639896	Symbol	isImmediatelyPostComment		639750						
ANR	639897	Symbol	* currentLine		639750						
ANR	639898	Symbol	previousChar		639750						
ANR	639899	Symbol	currentLine . length		639750						
ANR	639900	Symbol	isSequenceReached		639750						
ANR	639901	Symbol	* charNum		639750						
ANR	639902	Symbol	shouldConvertTabs		639750						
ANR	639903	Symbol	true		639750						
ANR	639904	Symbol	isImmediatelyPostLineComment		639750						
ANR	639905	Symbol	isInPreprocessor		639750						
ANR	639906	Symbol	charNum		639750						
ANR	639907	Symbol	isInComment		639750						
ANR	639908	Symbol	currentLine		639750						
ANR	639909	Function	ASFormatter :: getNextLine	2462:0:71054:73324							
ANR	639910	FunctionDef	ASFormatter :: getNextLine (bool emptyLineWasDeleted)		639909	0					
ANR	639911	CompoundStatement		2463:0:71120:73324	639909	0					
ANR	639912	IfStatement	if ( ! sourceIterator -> hasMoreLines ( ) )		639909	0					
ANR	639913	Condition	! sourceIterator -> hasMoreLines ( )	2464:5:71127:71157	639909	0	True				
ANR	639914	UnaryOperationExpression	! sourceIterator -> hasMoreLines ( )		639909	0					
ANR	639915	UnaryOperator	!		639909	0					
ANR	639916	CallExpression	sourceIterator -> hasMoreLines ( )		639909	1					
ANR	639917	Callee	sourceIterator -> hasMoreLines		639909	0					
ANR	639918	PtrMemberAccess	sourceIterator -> hasMoreLines		639909	0					
ANR	639919	Identifier	sourceIterator		639909	0					
ANR	639920	Identifier	hasMoreLines		639909	1					
ANR	639921	ArgumentList			639909	1					
ANR	639922	CompoundStatement		3:1:40:40	639909	1					
ANR	639923	ExpressionStatement	endOfCodeReached = true	2466:2:71165:71188	639909	0	True				
ANR	639924	AssignmentExpression	endOfCodeReached = true		639909	0		=			
ANR	639925	Identifier	endOfCodeReached		639909	0					
ANR	639926	Identifier	true		639909	1					
ANR	639927	ReturnStatement	return false ;	2467:2:71192:71204	639909	1	True				
ANR	639928	Identifier	false		639909	0					
ANR	639929	IfStatement	if ( appendOpeningBrace )		639909	1					
ANR	639930	Condition	appendOpeningBrace	2469:5:71214:71231	639909	0	True				
ANR	639931	Identifier	appendOpeningBrace		639909	0					
ANR	639932	ExpressionStatement	"currentLine = ""{"""	2470:2:71236:71253	639909	1	True				
ANR	639933	AssignmentExpression	"currentLine = ""{"""		639909	0		=			
ANR	639934	Identifier	currentLine		639909	0					
ANR	639935	PrimaryExpression	"""{"""		639909	1					
ANR	639936	ElseStatement	else		639909	0					
ANR	639937	CompoundStatement		10:1:198:198	639909	0					
ANR	639938	ExpressionStatement	currentLine = sourceIterator -> nextLine ( emptyLineWasDeleted )	2473:2:71323:71382	639909	0	True				
ANR	639939	AssignmentExpression	currentLine = sourceIterator -> nextLine ( emptyLineWasDeleted )		639909	0		=			
ANR	639940	Identifier	currentLine		639909	0					
ANR	639941	CallExpression	sourceIterator -> nextLine ( emptyLineWasDeleted )		639909	1					
ANR	639942	Callee	sourceIterator -> nextLine		639909	0					
ANR	639943	PtrMemberAccess	sourceIterator -> nextLine		639909	0					
ANR	639944	Identifier	sourceIterator		639909	0					
ANR	639945	Identifier	nextLine		639909	1					
ANR	639946	ArgumentList	emptyLineWasDeleted		639909	1					
ANR	639947	Argument	emptyLineWasDeleted		639909	0					
ANR	639948	Identifier	emptyLineWasDeleted		639909	0					
ANR	639949	ExpressionStatement	assert ( computeChecksumIn ( currentLine ) )	2474:2:71386:71424	639909	1	True				
ANR	639950	CallExpression	assert ( computeChecksumIn ( currentLine ) )		639909	0					
ANR	639951	Callee	assert		639909	0					
ANR	639952	Identifier	assert		639909	0					
ANR	639953	ArgumentList	computeChecksumIn ( currentLine )		639909	1					
ANR	639954	Argument	computeChecksumIn ( currentLine )		639909	0					
ANR	639955	CallExpression	computeChecksumIn ( currentLine )		639909	0					
ANR	639956	Callee	computeChecksumIn		639909	0					
ANR	639957	Identifier	computeChecksumIn		639909	0					
ANR	639958	ArgumentList	currentLine		639909	1					
ANR	639959	Argument	currentLine		639909	0					
ANR	639960	Identifier	currentLine		639909	0					
ANR	639961	ExpressionStatement	inLineNumber ++	2477:1:71463:71477	639909	2	True				
ANR	639962	PostIncDecOperationExpression	inLineNumber ++		639909	0					
ANR	639963	Identifier	inLineNumber		639909	0					
ANR	639964	IncDec	++		639909	1					
ANR	639965	IfStatement	if ( endOfAsmReached )		639909	3					
ANR	639966	Condition	endOfAsmReached	2478:5:71484:71498	639909	0	True				
ANR	639967	Identifier	endOfAsmReached		639909	0					
ANR	639968	ExpressionStatement	endOfAsmReached = isInAsmBlock = isInAsm = false	2479:2:71503:71551	639909	1	True				
ANR	639969	AssignmentExpression	endOfAsmReached = isInAsmBlock = isInAsm = false		639909	0		=			
ANR	639970	Identifier	endOfAsmReached		639909	0					
ANR	639971	AssignmentExpression	isInAsmBlock = isInAsm = false		639909	1		=			
ANR	639972	Identifier	isInAsmBlock		639909	0					
ANR	639973	AssignmentExpression	isInAsm = false		639909	1		=			
ANR	639974	Identifier	isInAsm		639909	0					
ANR	639975	Identifier	false		639909	1					
ANR	639976	ExpressionStatement	shouldKeepLineUnbroken = false	2480:1:71554:71584	639909	4	True				
ANR	639977	AssignmentExpression	shouldKeepLineUnbroken = false		639909	0		=			
ANR	639978	Identifier	shouldKeepLineUnbroken		639909	0					
ANR	639979	Identifier	false		639909	1					
ANR	639980	ExpressionStatement	isInCommentStartLine = false	2481:1:71587:71615	639909	5	True				
ANR	639981	AssignmentExpression	isInCommentStartLine = false		639909	0		=			
ANR	639982	Identifier	isInCommentStartLine		639909	0					
ANR	639983	Identifier	false		639909	1					
ANR	639984	ExpressionStatement	isInCase = false	2482:1:71618:71634	639909	6	True				
ANR	639985	AssignmentExpression	isInCase = false		639909	0		=			
ANR	639986	Identifier	isInCase		639909	0					
ANR	639987	Identifier	false		639909	1					
ANR	639988	ExpressionStatement	isInAsmOneLine = false	2483:1:71637:71659	639909	7	True				
ANR	639989	AssignmentExpression	isInAsmOneLine = false		639909	0		=			
ANR	639990	Identifier	isInAsmOneLine		639909	0					
ANR	639991	Identifier	false		639909	1					
ANR	639992	ExpressionStatement	isHeaderInMultiStatementLine = false	2484:1:71662:71698	639909	8	True				
ANR	639993	AssignmentExpression	isHeaderInMultiStatementLine = false		639909	0		=			
ANR	639994	Identifier	isHeaderInMultiStatementLine		639909	0					
ANR	639995	Identifier	false		639909	1					
ANR	639996	ExpressionStatement	isInQuoteContinuation = isInVerbatimQuote || haveLineContinuationChar	2485:1:71701:71770	639909	9	True				
ANR	639997	AssignmentExpression	isInQuoteContinuation = isInVerbatimQuote || haveLineContinuationChar		639909	0		=			
ANR	639998	Identifier	isInQuoteContinuation		639909	0					
ANR	639999	OrExpression	isInVerbatimQuote || haveLineContinuationChar		639909	1		||			
ANR	640000	Identifier	isInVerbatimQuote		639909	0					
ANR	640001	Identifier	haveLineContinuationChar		639909	1					
ANR	640002	ExpressionStatement	haveLineContinuationChar = false	2486:1:71773:71805	639909	10	True				
ANR	640003	AssignmentExpression	haveLineContinuationChar = false		639909	0		=			
ANR	640004	Identifier	haveLineContinuationChar		639909	0					
ANR	640005	Identifier	false		639909	1					
ANR	640006	ExpressionStatement	isImmediatelyPostEmptyLine = lineIsEmpty	2487:1:71808:71848	639909	11	True				
ANR	640007	AssignmentExpression	isImmediatelyPostEmptyLine = lineIsEmpty		639909	0		=			
ANR	640008	Identifier	isImmediatelyPostEmptyLine		639909	0					
ANR	640009	Identifier	lineIsEmpty		639909	1					
ANR	640010	ExpressionStatement	previousChar = ' '	2488:1:71851:71869	639909	12	True				
ANR	640011	AssignmentExpression	previousChar = ' '		639909	0		=			
ANR	640012	Identifier	previousChar		639909	0					
ANR	640013	PrimaryExpression	' '		639909	1					
ANR	640014	IfStatement	if ( currentLine . length ( ) == 0 )		639909	13					
ANR	640015	Condition	currentLine . length ( ) == 0	2490:5:71877:71901	639909	0	True				
ANR	640016	EqualityExpression	currentLine . length ( ) == 0		639909	0		==			
ANR	640017	CallExpression	currentLine . length ( )		639909	0					
ANR	640018	Callee	currentLine . length		639909	0					
ANR	640019	MemberAccess	currentLine . length		639909	0					
ANR	640020	Identifier	currentLine		639909	0					
ANR	640021	Identifier	length		639909	1					
ANR	640022	ArgumentList			639909	1					
ANR	640023	PrimaryExpression	0		639909	1					
ANR	640024	ExpressionStatement	"currentLine = string ( "" "" )"	2491:2:71906:71931	639909	1	True				
ANR	640025	AssignmentExpression	"currentLine = string ( "" "" )"		639909	0		=			
ANR	640026	Identifier	currentLine		639909	0					
ANR	640027	CallExpression	"string ( "" "" )"		639909	1					
ANR	640028	Callee	string		639909	0					
ANR	640029	Identifier	string		639909	0					
ANR	640030	ArgumentList	""" """		639909	1					
ANR	640031	Argument	""" """		639909	0					
ANR	640032	PrimaryExpression	""" """		639909	0					
ANR	640033	IfStatement	if ( ! isVirgin )		639909	14					
ANR	640034	Condition	! isVirgin	2494:5:72056:72064	639909	0	True				
ANR	640035	UnaryOperationExpression	! isVirgin		639909	0					
ANR	640036	UnaryOperator	!		639909	0					
ANR	640037	Identifier	isVirgin		639909	1					
ANR	640038	ExpressionStatement	isInLineBreak = true	2495:2:72069:72089	639909	1	True				
ANR	640039	AssignmentExpression	isInLineBreak = true		639909	0		=			
ANR	640040	Identifier	isInLineBreak		639909	0					
ANR	640041	Identifier	true		639909	1					
ANR	640042	ElseStatement	else		639909	0					
ANR	640043	ExpressionStatement	isVirgin = false	2497:2:72099:72115	639909	0	True				
ANR	640044	AssignmentExpression	isVirgin = false		639909	0		=			
ANR	640045	Identifier	isVirgin		639909	0					
ANR	640046	Identifier	false		639909	1					
ANR	640047	IfStatement	if ( isImmediatelyPostNonInStmt )		639909	15					
ANR	640048	Condition	isImmediatelyPostNonInStmt	2499:5:72123:72148	639909	0	True				
ANR	640049	Identifier	isImmediatelyPostNonInStmt		639909	0					
ANR	640050	CompoundStatement		38:1:1031:1031	639909	1					
ANR	640051	ExpressionStatement	isCharImmediatelyPostNonInStmt = true	2501:2:72156:72193	639909	0	True				
ANR	640052	AssignmentExpression	isCharImmediatelyPostNonInStmt = true		639909	0		=			
ANR	640053	Identifier	isCharImmediatelyPostNonInStmt		639909	0					
ANR	640054	Identifier	true		639909	1					
ANR	640055	ExpressionStatement	isImmediatelyPostNonInStmt = false	2502:2:72197:72231	639909	1	True				
ANR	640056	AssignmentExpression	isImmediatelyPostNonInStmt = false		639909	0		=			
ANR	640057	Identifier	isImmediatelyPostNonInStmt		639909	0					
ANR	640058	Identifier	false		639909	1					
ANR	640059	ExpressionStatement	isImmediatelyPostPreprocessor = isInPreprocessor	2507:1:72339:72387	639909	16	True				
ANR	640060	AssignmentExpression	isImmediatelyPostPreprocessor = isInPreprocessor		639909	0		=			
ANR	640061	Identifier	isImmediatelyPostPreprocessor		639909	0					
ANR	640062	Identifier	isInPreprocessor		639909	1					
ANR	640063	IfStatement	if ( ! isInComment && ( previousNonWSChar != '\\\\' || isEmptyLine ( currentLine ) ) )		639909	17					
ANR	640064	Condition	! isInComment && ( previousNonWSChar != '\\\\' || isEmptyLine ( currentLine ) )	2508:5:72394:72486	639909	0	True				
ANR	640065	AndExpression	! isInComment && ( previousNonWSChar != '\\\\' || isEmptyLine ( currentLine ) )		639909	0		&&			
ANR	640066	UnaryOperationExpression	! isInComment		639909	0					
ANR	640067	UnaryOperator	!		639909	0					
ANR	640068	Identifier	isInComment		639909	1					
ANR	640069	OrExpression	previousNonWSChar != '\\\\' || isEmptyLine ( currentLine )		639909	1		||			
ANR	640070	EqualityExpression	previousNonWSChar != '\\\\'		639909	0		!=			
ANR	640071	Identifier	previousNonWSChar		639909	0					
ANR	640072	PrimaryExpression	'\\\\'		639909	1					
ANR	640073	CallExpression	isEmptyLine ( currentLine )		639909	1					
ANR	640074	Callee	isEmptyLine		639909	0					
ANR	640075	Identifier	isEmptyLine		639909	0					
ANR	640076	ArgumentList	currentLine		639909	1					
ANR	640077	Argument	currentLine		639909	0					
ANR	640078	Identifier	currentLine		639909	0					
ANR	640079	ExpressionStatement	isInPreprocessor = false	2511:2:72491:72515	639909	1	True				
ANR	640080	AssignmentExpression	isInPreprocessor = false		639909	0		=			
ANR	640081	Identifier	isInPreprocessor		639909	0					
ANR	640082	Identifier	false		639909	1					
ANR	640083	IfStatement	if ( passedSemicolon )		639909	18					
ANR	640084	Condition	passedSemicolon	2513:5:72523:72537	639909	0	True				
ANR	640085	Identifier	passedSemicolon		639909	0					
ANR	640086	ExpressionStatement	isInExecSQL = false	2514:2:72542:72561	639909	1	True				
ANR	640087	AssignmentExpression	isInExecSQL = false		639909	0		=			
ANR	640088	Identifier	isInExecSQL		639909	0					
ANR	640089	Identifier	false		639909	1					
ANR	640090	ExpressionStatement	initNewLine ( )	2515:1:72564:72577	639909	19	True				
ANR	640091	CallExpression	initNewLine ( )		639909	0					
ANR	640092	Callee	initNewLine		639909	0					
ANR	640093	Identifier	initNewLine		639909	0					
ANR	640094	ArgumentList			639909	1					
ANR	640095	ExpressionStatement	currentChar = currentLine [ charNum ]	2517:1:72581:72615	639909	20	True				
ANR	640096	AssignmentExpression	currentChar = currentLine [ charNum ]		639909	0		=			
ANR	640097	Identifier	currentChar		639909	0					
ANR	640098	ArrayIndexing	currentLine [ charNum ]		639909	1					
ANR	640099	Identifier	currentLine		639909	0					
ANR	640100	Identifier	charNum		639909	1					
ANR	640101	IfStatement	if ( isInBraceRunIn && previousNonWSChar == '{' && ! isInComment )		639909	21					
ANR	640102	Condition	isInBraceRunIn && previousNonWSChar == '{' && ! isInComment	2518:5:72622:72679	639909	0	True				
ANR	640103	AndExpression	isInBraceRunIn && previousNonWSChar == '{' && ! isInComment		639909	0		&&			
ANR	640104	Identifier	isInBraceRunIn		639909	0					
ANR	640105	AndExpression	previousNonWSChar == '{' && ! isInComment		639909	1		&&			
ANR	640106	EqualityExpression	previousNonWSChar == '{'		639909	0		==			
ANR	640107	Identifier	previousNonWSChar		639909	0					
ANR	640108	PrimaryExpression	'{'		639909	1					
ANR	640109	UnaryOperationExpression	! isInComment		639909	1					
ANR	640110	UnaryOperator	!		639909	0					
ANR	640111	Identifier	isInComment		639909	1					
ANR	640112	ExpressionStatement	isInLineBreak = false	2519:2:72684:72705	639909	1	True				
ANR	640113	AssignmentExpression	isInLineBreak = false		639909	0		=			
ANR	640114	Identifier	isInLineBreak		639909	0					
ANR	640115	Identifier	false		639909	1					
ANR	640116	ExpressionStatement	isInBraceRunIn = false	2520:1:72708:72730	639909	22	True				
ANR	640117	AssignmentExpression	isInBraceRunIn = false		639909	0		=			
ANR	640118	Identifier	isInBraceRunIn		639909	0					
ANR	640119	Identifier	false		639909	1					
ANR	640120	IfStatement	if ( currentChar == '\\t' && shouldConvertTabs )		639909	23					
ANR	640121	Condition	currentChar == '\\t' && shouldConvertTabs	2522:5:72738:72777	639909	0	True				
ANR	640122	AndExpression	currentChar == '\\t' && shouldConvertTabs		639909	0		&&			
ANR	640123	EqualityExpression	currentChar == '\\t'		639909	0		==			
ANR	640124	Identifier	currentChar		639909	0					
ANR	640125	PrimaryExpression	'\\t'		639909	1					
ANR	640126	Identifier	shouldConvertTabs		639909	1					
ANR	640127	ExpressionStatement	convertTabToSpaces ( )	2523:2:72782:72802	639909	1	True				
ANR	640128	CallExpression	convertTabToSpaces ( )		639909	0					
ANR	640129	Callee	convertTabToSpaces		639909	0					
ANR	640130	Identifier	convertTabToSpaces		639909	0					
ANR	640131	ArgumentList			639909	1					
ANR	640132	IfStatement	"if ( shouldDeleteEmptyLines && lineIsEmpty && isBraceType ( ( * braceTypeStack ) [ braceTypeStack -> size ( ) - 1 ] , COMMAND_TYPE ) )"		639909	24					
ANR	640133	Condition	"shouldDeleteEmptyLines && lineIsEmpty && isBraceType ( ( * braceTypeStack ) [ braceTypeStack -> size ( ) - 1 ] , COMMAND_TYPE )"	2528:5:72961:73091	639909	0	True				
ANR	640134	AndExpression	"shouldDeleteEmptyLines && lineIsEmpty && isBraceType ( ( * braceTypeStack ) [ braceTypeStack -> size ( ) - 1 ] , COMMAND_TYPE )"		639909	0		&&			
ANR	640135	Identifier	shouldDeleteEmptyLines		639909	0					
ANR	640136	AndExpression	"lineIsEmpty && isBraceType ( ( * braceTypeStack ) [ braceTypeStack -> size ( ) - 1 ] , COMMAND_TYPE )"		639909	1		&&			
ANR	640137	Identifier	lineIsEmpty		639909	0					
ANR	640138	CallExpression	"isBraceType ( ( * braceTypeStack ) [ braceTypeStack -> size ( ) - 1 ] , COMMAND_TYPE )"		639909	1					
ANR	640139	Callee	isBraceType		639909	0					
ANR	640140	Identifier	isBraceType		639909	0					
ANR	640141	ArgumentList	( * braceTypeStack ) [ braceTypeStack -> size ( ) - 1 ]		639909	1					
ANR	640142	Argument	( * braceTypeStack ) [ braceTypeStack -> size ( ) - 1 ]		639909	0					
ANR	640143	ArrayIndexing	( * braceTypeStack ) [ braceTypeStack -> size ( ) - 1 ]		639909	0					
ANR	640144	UnaryOperationExpression	* braceTypeStack		639909	0					
ANR	640145	UnaryOperator	*		639909	0					
ANR	640146	Identifier	braceTypeStack		639909	1					
ANR	640147	AdditiveExpression	braceTypeStack -> size ( ) - 1		639909	1		-			
ANR	640148	CallExpression	braceTypeStack -> size ( )		639909	0					
ANR	640149	Callee	braceTypeStack -> size		639909	0					
ANR	640150	PtrMemberAccess	braceTypeStack -> size		639909	0					
ANR	640151	Identifier	braceTypeStack		639909	0					
ANR	640152	Identifier	size		639909	1					
ANR	640153	ArgumentList			639909	1					
ANR	640154	PrimaryExpression	1		639909	1					
ANR	640155	Argument	COMMAND_TYPE		639909	1					
ANR	640156	Identifier	COMMAND_TYPE		639909	0					
ANR	640157	CompoundStatement		69:1:1974:1974	639909	1					
ANR	640158	IfStatement	if ( ! shouldBreakBlocks || previousNonWSChar == '{' || ! commentAndHeaderFollows ( ) )		639909	0					
ANR	640159	Condition	! shouldBreakBlocks || previousNonWSChar == '{' || ! commentAndHeaderFollows ( )	2532:6:73103:73178	639909	0	True				
ANR	640160	OrExpression	! shouldBreakBlocks || previousNonWSChar == '{' || ! commentAndHeaderFollows ( )		639909	0		||			
ANR	640161	UnaryOperationExpression	! shouldBreakBlocks		639909	0					
ANR	640162	UnaryOperator	!		639909	0					
ANR	640163	Identifier	shouldBreakBlocks		639909	1					
ANR	640164	OrExpression	previousNonWSChar == '{' || ! commentAndHeaderFollows ( )		639909	1		||			
ANR	640165	EqualityExpression	previousNonWSChar == '{'		639909	0		==			
ANR	640166	Identifier	previousNonWSChar		639909	0					
ANR	640167	PrimaryExpression	'{'		639909	1					
ANR	640168	UnaryOperationExpression	! commentAndHeaderFollows ( )		639909	1					
ANR	640169	UnaryOperator	!		639909	0					
ANR	640170	CallExpression	commentAndHeaderFollows ( )		639909	1					
ANR	640171	Callee	commentAndHeaderFollows		639909	0					
ANR	640172	Identifier	commentAndHeaderFollows		639909	0					
ANR	640173	ArgumentList			639909	1					
ANR	640174	CompoundStatement		71:2:2062:2062	639909	1					
ANR	640175	ExpressionStatement	isInPreprocessor = isImmediatelyPostPreprocessor	2534:3:73188:73236	639909	0	True				
ANR	640176	AssignmentExpression	isInPreprocessor = isImmediatelyPostPreprocessor		639909	0		=			
ANR	640177	Identifier	isInPreprocessor		639909	0					
ANR	640178	Identifier	isImmediatelyPostPreprocessor		639909	1					
ANR	640179	ExpressionStatement	lineIsEmpty = false	2535:3:73253:73272	639909	1	True				
ANR	640180	AssignmentExpression	lineIsEmpty = false		639909	0		=			
ANR	640181	Identifier	lineIsEmpty		639909	0					
ANR	640182	Identifier	false		639909	1					
ANR	640183	ReturnStatement	return getNextLine ( true ) ;	2536:3:73277:73301	639909	2	True				
ANR	640184	CallExpression	getNextLine ( true )		639909	0					
ANR	640185	Callee	getNextLine		639909	0					
ANR	640186	Identifier	getNextLine		639909	0					
ANR	640187	ArgumentList	true		639909	1					
ANR	640188	Argument	true		639909	0					
ANR	640189	Identifier	true		639909	0					
ANR	640190	ReturnStatement	return true ;	2539:1:73311:73322	639909	25	True				
ANR	640191	Identifier	true		639909	0					
ANR	640192	ReturnType	bool		639909	1					
ANR	640193	Identifier	ASFormatter :: getNextLine		639909	2					
ANR	640194	ParameterList	bool emptyLineWasDeleted		639909	3					
ANR	640195	Parameter	bool emptyLineWasDeleted	2462:30:71084:71107	639909	0	True				
ANR	640196	ParameterType	bool		639909	0					
ANR	640197	Identifier	emptyLineWasDeleted		639909	1					
ANR	640198	CFGEntryNode	ENTRY		639909		True				
ANR	640199	CFGExitNode	EXIT		639909		True				
ANR	640200	Symbol	isInAsmBlock		639909						
ANR	640201	Symbol	shouldDeleteEmptyLines		639909						
ANR	640202	Symbol	isInVerbatimQuote		639909						
ANR	640203	Symbol	shouldBreakBlocks		639909						
ANR	640204	Symbol	isInQuoteContinuation		639909						
ANR	640205	Symbol	* currentLine		639909						
ANR	640206	Symbol	isVirgin		639909						
ANR	640207	Symbol	lineIsEmpty		639909						
ANR	640208	Symbol	isHeaderInMultiStatementLine		639909						
ANR	640209	Symbol	shouldConvertTabs		639909						
ANR	640210	Symbol	* braceTypeStack -> size		639909						
ANR	640211	Symbol	isBraceType		639909						
ANR	640212	Symbol	sourceIterator -> hasMoreLines		639909						
ANR	640213	Symbol	isInComment		639909						
ANR	640214	Symbol	sourceIterator		639909						
ANR	640215	Symbol	currentChar		639909						
ANR	640216	Symbol	endOfCodeReached		639909						
ANR	640217	Symbol	* braceTypeStack		639909						
ANR	640218	Symbol	isInLineBreak		639909						
ANR	640219	Symbol	braceTypeStack -> size		639909						
ANR	640220	Symbol	isInExecSQL		639909						
ANR	640221	Symbol	previousChar		639909						
ANR	640222	Symbol	COMMAND_TYPE		639909						
ANR	640223	Symbol	* charNum		639909						
ANR	640224	Symbol	inLineNumber		639909						
ANR	640225	Symbol	isInAsmOneLine		639909						
ANR	640226	Symbol	true		639909						
ANR	640227	Symbol	isInCase		639909						
ANR	640228	Symbol	getNextLine		639909						
ANR	640229	Symbol	isImmediatelyPostNonInStmt		639909						
ANR	640230	Symbol	isEmptyLine		639909						
ANR	640231	Symbol	previousNonWSChar		639909						
ANR	640232	Symbol	braceTypeStack		639909						
ANR	640233	Symbol	string		639909						
ANR	640234	Symbol	isImmediatelyPostEmptyLine		639909						
ANR	640235	Symbol	* sourceIterator		639909						
ANR	640236	Symbol	sourceIterator -> nextLine		639909						
ANR	640237	Symbol	isInCommentStartLine		639909						
ANR	640238	Symbol	endOfAsmReached		639909						
ANR	640239	Symbol	computeChecksumIn		639909						
ANR	640240	Symbol	* * braceTypeStack		639909						
ANR	640241	Symbol	isCharImmediatelyPostNonInStmt		639909						
ANR	640242	Symbol	isInPreprocessor		639909						
ANR	640243	Symbol	passedSemicolon		639909						
ANR	640244	Symbol	charNum		639909						
ANR	640245	Symbol	currentLine		639909						
ANR	640246	Symbol	false		639909						
ANR	640247	Symbol	commentAndHeaderFollows		639909						
ANR	640248	Symbol	appendOpeningBrace		639909						
ANR	640249	Symbol	isInAsm		639909						
ANR	640250	Symbol	currentLine . length		639909						
ANR	640251	Symbol	emptyLineWasDeleted		639909						
ANR	640252	Symbol	isInBraceRunIn		639909						
ANR	640253	Symbol	shouldKeepLineUnbroken		639909						
ANR	640254	Symbol	isImmediatelyPostPreprocessor		639909						
ANR	640255	Symbol	haveLineContinuationChar		639909						
ANR	640256	Function	ASFormatter :: initNewLine	2546:0:73469:76741							
ANR	640257	FunctionDef	ASFormatter :: initNewLine ()		640256	0					
ANR	640258	CompoundStatement		2547:0:73501:76741	640256	0					
ANR	640259	IdentifierDeclStatement	size_t len = currentLine . length ( ) ;	2548:1:73504:73537	640256	0	True				
ANR	640260	IdentifierDecl	len = currentLine . length ( )		640256	0					
ANR	640261	IdentifierDeclType	size_t		640256	0					
ANR	640262	Identifier	len		640256	1					
ANR	640263	AssignmentExpression	len = currentLine . length ( )		640256	2		=			
ANR	640264	Identifier	len		640256	0					
ANR	640265	CallExpression	currentLine . length ( )		640256	1					
ANR	640266	Callee	currentLine . length		640256	0					
ANR	640267	MemberAccess	currentLine . length		640256	0					
ANR	640268	Identifier	currentLine		640256	0					
ANR	640269	Identifier	length		640256	1					
ANR	640270	ArgumentList			640256	1					
ANR	640271	IdentifierDeclStatement	size_t tabSize = getTabLength ( ) ;	2549:1:73540:73571	640256	1	True				
ANR	640272	IdentifierDecl	tabSize = getTabLength ( )		640256	0					
ANR	640273	IdentifierDeclType	size_t		640256	0					
ANR	640274	Identifier	tabSize		640256	1					
ANR	640275	AssignmentExpression	tabSize = getTabLength ( )		640256	2		=			
ANR	640276	Identifier	tabSize		640256	0					
ANR	640277	CallExpression	getTabLength ( )		640256	1					
ANR	640278	Callee	getTabLength		640256	0					
ANR	640279	Identifier	getTabLength		640256	0					
ANR	640280	ArgumentList			640256	1					
ANR	640281	ExpressionStatement	charNum = 0	2550:1:73574:73585	640256	2	True				
ANR	640282	AssignmentExpression	charNum = 0		640256	0		=			
ANR	640283	Identifier	charNum		640256	0					
ANR	640284	PrimaryExpression	0		640256	1					
ANR	640285	IfStatement	if ( isInQuoteContinuation || ( isInPreprocessor && ! getPreprocDefineIndent ( ) ) )		640256	3					
ANR	640286	Condition	isInQuoteContinuation || ( isInPreprocessor && ! getPreprocDefineIndent ( ) )	2553:5:73614:73694	640256	0	True				
ANR	640287	OrExpression	isInQuoteContinuation || ( isInPreprocessor && ! getPreprocDefineIndent ( ) )		640256	0		||			
ANR	640288	Identifier	isInQuoteContinuation		640256	0					
ANR	640289	AndExpression	isInPreprocessor && ! getPreprocDefineIndent ( )		640256	1		&&			
ANR	640290	Identifier	isInPreprocessor		640256	0					
ANR	640291	UnaryOperationExpression	! getPreprocDefineIndent ( )		640256	1					
ANR	640292	UnaryOperator	!		640256	0					
ANR	640293	CallExpression	getPreprocDefineIndent ( )		640256	1					
ANR	640294	Callee	getPreprocDefineIndent		640256	0					
ANR	640295	Identifier	getPreprocDefineIndent		640256	0					
ANR	640296	ArgumentList			640256	1					
ANR	640297	ReturnStatement	return ;	2555:2:73699:73705	640256	1	True				
ANR	640298	IfStatement	if ( isInExecSQL )		640256	4					
ANR	640299	Condition	isInExecSQL	2559:5:73821:73831	640256	0	True				
ANR	640300	Identifier	isInExecSQL		640256	0					
ANR	640301	CompoundStatement		18:2:447:455	640256	1					
ANR	640302	IdentifierDeclStatement	size_t tabCount_ = 0 ;	2563:2:73925:73945	640256	0	True				
ANR	640303	IdentifierDecl	tabCount_ = 0		640256	0					
ANR	640304	IdentifierDeclType	size_t		640256	0					
ANR	640305	Identifier	tabCount_		640256	1					
ANR	640306	AssignmentExpression	tabCount_ = 0		640256	2		=			
ANR	640307	Identifier	tabCount_		640256	0					
ANR	640308	PrimaryExpression	0		640256	1					
ANR	640309	IdentifierDeclStatement	size_t i ;	2564:2:73949:73957	640256	1	True				
ANR	640310	IdentifierDecl	i		640256	0					
ANR	640311	IdentifierDeclType	size_t		640256	0					
ANR	640312	Identifier	i		640256	1					
ANR	640313	ForStatement	for ( i = 0 ; i < currentLine . length ( ) ; i ++ )		640256	2					
ANR	640314	ForInit	i = 0 ;	2565:7:73966:73971	640256	0	True				
ANR	640315	AssignmentExpression	i = 0		640256	0		=			
ANR	640316	Identifier	i		640256	0					
ANR	640317	PrimaryExpression	0		640256	1					
ANR	640318	Condition	i < currentLine . length ( )	2565:14:73973:73996	640256	1	True				
ANR	640319	RelationalExpression	i < currentLine . length ( )		640256	0		<			
ANR	640320	Identifier	i		640256	0					
ANR	640321	CallExpression	currentLine . length ( )		640256	1					
ANR	640322	Callee	currentLine . length		640256	0					
ANR	640323	MemberAccess	currentLine . length		640256	0					
ANR	640324	Identifier	currentLine		640256	0					
ANR	640325	Identifier	length		640256	1					
ANR	640326	ArgumentList			640256	1					
ANR	640327	PostIncDecOperationExpression	i ++	2565:40:73999:74001	640256	2	True				
ANR	640328	Identifier	i		640256	0					
ANR	640329	IncDec	++		640256	1					
ANR	640330	CompoundStatement		20:2:504:504	640256	3					
ANR	640331	IfStatement	if ( ! isWhiteSpace ( currentLine [ i ] ) )		640256	0					
ANR	640332	Condition	! isWhiteSpace ( currentLine [ i ] )	2567:7:74015:74043	640256	0	True				
ANR	640333	UnaryOperationExpression	! isWhiteSpace ( currentLine [ i ] )		640256	0					
ANR	640334	UnaryOperator	!		640256	0					
ANR	640335	CallExpression	isWhiteSpace ( currentLine [ i ] )		640256	1					
ANR	640336	Callee	isWhiteSpace		640256	0					
ANR	640337	Identifier	isWhiteSpace		640256	0					
ANR	640338	ArgumentList	currentLine [ i ]		640256	1					
ANR	640339	Argument	currentLine [ i ]		640256	0					
ANR	640340	ArrayIndexing	currentLine [ i ]		640256	0					
ANR	640341	Identifier	currentLine		640256	0					
ANR	640342	Identifier	i		640256	1					
ANR	640343	BreakStatement	break ;	2568:4:74073:74078	640256	1	True				
ANR	640344	IfStatement	if ( currentLine [ i ] == '\\t' )		640256	1					
ANR	640345	Condition	currentLine [ i ] == '\\t'	2569:7:74087:74108	640256	0	True				
ANR	640346	EqualityExpression	currentLine [ i ] == '\\t'		640256	0		==			
ANR	640347	ArrayIndexing	currentLine [ i ]		640256	0					
ANR	640348	Identifier	currentLine		640256	0					
ANR	640349	Identifier	i		640256	1					
ANR	640350	PrimaryExpression	'\\t'		640256	1					
ANR	640351	CompoundStatement		25:4:618:674	640256	1					
ANR	640352	IdentifierDeclStatement	size_t numSpaces = tabSize - ( ( tabCount_ + i ) % tabSize ) ;	2571:4:74120:74176	640256	0	True				
ANR	640353	IdentifierDecl	numSpaces = tabSize - ( ( tabCount_ + i ) % tabSize )		640256	0					
ANR	640354	IdentifierDeclType	size_t		640256	0					
ANR	640355	Identifier	numSpaces		640256	1					
ANR	640356	AssignmentExpression	numSpaces = tabSize - ( ( tabCount_ + i ) % tabSize )		640256	2		=			
ANR	640357	Identifier	numSpaces		640256	0					
ANR	640358	AdditiveExpression	tabSize - ( ( tabCount_ + i ) % tabSize )		640256	1		-			
ANR	640359	Identifier	tabSize		640256	0					
ANR	640360	MultiplicativeExpression	( tabCount_ + i ) % tabSize		640256	1		%			
ANR	640361	AdditiveExpression	tabCount_ + i		640256	0		+			
ANR	640362	Identifier	tabCount_		640256	0					
ANR	640363	Identifier	i		640256	1					
ANR	640364	Identifier	tabSize		640256	1					
ANR	640365	ExpressionStatement	"currentLine . replace ( i , 1 , numSpaces , ' ' )"	2572:4:74182:74223	640256	1	True				
ANR	640366	CallExpression	"currentLine . replace ( i , 1 , numSpaces , ' ' )"		640256	0					
ANR	640367	Callee	currentLine . replace		640256	0					
ANR	640368	MemberAccess	currentLine . replace		640256	0					
ANR	640369	Identifier	currentLine		640256	0					
ANR	640370	Identifier	replace		640256	1					
ANR	640371	ArgumentList	i		640256	1					
ANR	640372	Argument	i		640256	0					
ANR	640373	Identifier	i		640256	0					
ANR	640374	Argument	1		640256	1					
ANR	640375	PrimaryExpression	1		640256	0					
ANR	640376	Argument	numSpaces		640256	2					
ANR	640377	Identifier	numSpaces		640256	0					
ANR	640378	Argument	' '		640256	3					
ANR	640379	PrimaryExpression	' '		640256	0					
ANR	640380	ExpressionStatement	tabCount_ ++	2573:4:74229:74240	640256	2	True				
ANR	640381	PostIncDecOperationExpression	tabCount_ ++		640256	0					
ANR	640382	Identifier	tabCount_		640256	0					
ANR	640383	IncDec	++		640256	1					
ANR	640384	ExpressionStatement	i += tabSize - 1	2574:4:74246:74262	640256	3	True				
ANR	640385	AssignmentExpression	i += tabSize - 1		640256	0		+=			
ANR	640386	Identifier	i		640256	0					
ANR	640387	AdditiveExpression	tabSize - 1		640256	1		-			
ANR	640388	Identifier	tabSize		640256	0					
ANR	640389	PrimaryExpression	1		640256	1					
ANR	640390	ExpressionStatement	trimContinuationLine ( )	2578:2:74345:74367	640256	3	True				
ANR	640391	CallExpression	trimContinuationLine ( )		640256	0					
ANR	640392	Callee	trimContinuationLine		640256	0					
ANR	640393	Identifier	trimContinuationLine		640256	0					
ANR	640394	ArgumentList			640256	1					
ANR	640395	ReturnStatement	return ;	2579:2:74371:74377	640256	4	True				
ANR	640396	IfStatement	if ( isInComment )		640256	5					
ANR	640397	Condition	isInComment	2584:5:74499:74509	640256	0	True				
ANR	640398	Identifier	isInComment		640256	0					
ANR	640399	CompoundStatement		39:1:1011:1011	640256	1					
ANR	640400	IfStatement	if ( noTrimCommentContinuation )		640256	0					
ANR	640401	Condition	noTrimCommentContinuation	2586:6:74521:74545	640256	0	True				
ANR	640402	Identifier	noTrimCommentContinuation		640256	0					
ANR	640403	ExpressionStatement	leadingSpaces = tabIncrementIn = 0	2587:3:74551:74585	640256	1	True				
ANR	640404	AssignmentExpression	leadingSpaces = tabIncrementIn = 0		640256	0		=			
ANR	640405	Identifier	leadingSpaces		640256	0					
ANR	640406	AssignmentExpression	tabIncrementIn = 0		640256	1		=			
ANR	640407	Identifier	tabIncrementIn		640256	0					
ANR	640408	PrimaryExpression	0		640256	1					
ANR	640409	ExpressionStatement	trimContinuationLine ( )	2588:2:74589:74611	640256	1	True				
ANR	640410	CallExpression	trimContinuationLine ( )		640256	0					
ANR	640411	Callee	trimContinuationLine		640256	0					
ANR	640412	Identifier	trimContinuationLine		640256	0					
ANR	640413	ArgumentList			640256	1					
ANR	640414	ReturnStatement	return ;	2589:2:74615:74621	640256	2	True				
ANR	640415	ExpressionStatement	isImmediatelyPostCommentOnly = lineIsLineCommentOnly || lineEndsInCommentOnly	2593:1:74655:74732	640256	6	True				
ANR	640416	AssignmentExpression	isImmediatelyPostCommentOnly = lineIsLineCommentOnly || lineEndsInCommentOnly		640256	0		=			
ANR	640417	Identifier	isImmediatelyPostCommentOnly		640256	0					
ANR	640418	OrExpression	lineIsLineCommentOnly || lineEndsInCommentOnly		640256	1		||			
ANR	640419	Identifier	lineIsLineCommentOnly		640256	0					
ANR	640420	Identifier	lineEndsInCommentOnly		640256	1					
ANR	640421	ExpressionStatement	lineIsCommentOnly = false	2594:1:74735:74760	640256	7	True				
ANR	640422	AssignmentExpression	lineIsCommentOnly = false		640256	0		=			
ANR	640423	Identifier	lineIsCommentOnly		640256	0					
ANR	640424	Identifier	false		640256	1					
ANR	640425	ExpressionStatement	lineIsLineCommentOnly = false	2595:1:74763:74792	640256	8	True				
ANR	640426	AssignmentExpression	lineIsLineCommentOnly = false		640256	0		=			
ANR	640427	Identifier	lineIsLineCommentOnly		640256	0					
ANR	640428	Identifier	false		640256	1					
ANR	640429	ExpressionStatement	lineEndsInCommentOnly = false	2596:1:74795:74824	640256	9	True				
ANR	640430	AssignmentExpression	lineEndsInCommentOnly = false		640256	0		=			
ANR	640431	Identifier	lineEndsInCommentOnly		640256	0					
ANR	640432	Identifier	false		640256	1					
ANR	640433	ExpressionStatement	doesLineStartComment = false	2597:1:74827:74855	640256	10	True				
ANR	640434	AssignmentExpression	doesLineStartComment = false		640256	0		=			
ANR	640435	Identifier	doesLineStartComment		640256	0					
ANR	640436	Identifier	false		640256	1					
ANR	640437	ExpressionStatement	currentLineBeginsWithBrace = false	2598:1:74858:74892	640256	11	True				
ANR	640438	AssignmentExpression	currentLineBeginsWithBrace = false		640256	0		=			
ANR	640439	Identifier	currentLineBeginsWithBrace		640256	0					
ANR	640440	Identifier	false		640256	1					
ANR	640441	ExpressionStatement	lineIsEmpty = false	2599:1:74895:74914	640256	12	True				
ANR	640442	AssignmentExpression	lineIsEmpty = false		640256	0		=			
ANR	640443	Identifier	lineIsEmpty		640256	0					
ANR	640444	Identifier	false		640256	1					
ANR	640445	ExpressionStatement	currentLineFirstBraceNum = string :: npos	2600:1:74917:74956	640256	13	True				
ANR	640446	AssignmentExpression	currentLineFirstBraceNum = string :: npos		640256	0		=			
ANR	640447	Identifier	currentLineFirstBraceNum		640256	0					
ANR	640448	Identifier	string :: npos		640256	1					
ANR	640449	ExpressionStatement	tabIncrementIn = 0	2601:1:74959:74977	640256	14	True				
ANR	640450	AssignmentExpression	tabIncrementIn = 0		640256	0		=			
ANR	640451	Identifier	tabIncrementIn		640256	0					
ANR	640452	PrimaryExpression	0		640256	1					
ANR	640453	ForStatement	for ( charNum = 0 ; isWhiteSpace ( currentLine [ charNum ] ) && charNum + 1 < ( int ) len ; charNum ++ )		640256	15					
ANR	640454	ForInit	charNum = 0 ;	2605:6:75087:75098	640256	0	True				
ANR	640455	AssignmentExpression	charNum = 0		640256	0		=			
ANR	640456	Identifier	charNum		640256	0					
ANR	640457	PrimaryExpression	0		640256	1					
ANR	640458	Condition	isWhiteSpace ( currentLine [ charNum ] ) && charNum + 1 < ( int ) len	2605:19:75100:75160	640256	1	True				
ANR	640459	AndExpression	isWhiteSpace ( currentLine [ charNum ] ) && charNum + 1 < ( int ) len		640256	0		&&			
ANR	640460	CallExpression	isWhiteSpace ( currentLine [ charNum ] )		640256	0					
ANR	640461	Callee	isWhiteSpace		640256	0					
ANR	640462	Identifier	isWhiteSpace		640256	0					
ANR	640463	ArgumentList	currentLine [ charNum ]		640256	1					
ANR	640464	Argument	currentLine [ charNum ]		640256	0					
ANR	640465	ArrayIndexing	currentLine [ charNum ]		640256	0					
ANR	640466	Identifier	currentLine		640256	0					
ANR	640467	Identifier	charNum		640256	1					
ANR	640468	RelationalExpression	charNum + 1 < ( int ) len		640256	1		<			
ANR	640469	AdditiveExpression	charNum + 1		640256	0		+			
ANR	640470	Identifier	charNum		640256	0					
ANR	640471	PrimaryExpression	1		640256	1					
ANR	640472	CastExpression	( int ) len		640256	1					
ANR	640473	CastTarget	int		640256	0					
ANR	640474	Identifier	len		640256	1					
ANR	640475	PostIncDecOperationExpression	charNum ++	2605:82:75163:75171	640256	2	True				
ANR	640476	Identifier	charNum		640256	0					
ANR	640477	IncDec	++		640256	1					
ANR	640478	CompoundStatement		60:1:1673:1673	640256	3					
ANR	640479	IfStatement	if ( currentLine [ charNum ] == '\\t' && ! isInPreprocessor )		640256	0					
ANR	640480	Condition	currentLine [ charNum ] == '\\t' && ! isInPreprocessor	2607:6:75183:75231	640256	0	True				
ANR	640481	AndExpression	currentLine [ charNum ] == '\\t' && ! isInPreprocessor		640256	0		&&			
ANR	640482	EqualityExpression	currentLine [ charNum ] == '\\t'		640256	0		==			
ANR	640483	ArrayIndexing	currentLine [ charNum ]		640256	0					
ANR	640484	Identifier	currentLine		640256	0					
ANR	640485	Identifier	charNum		640256	1					
ANR	640486	PrimaryExpression	'\\t'		640256	1					
ANR	640487	UnaryOperationExpression	! isInPreprocessor		640256	1					
ANR	640488	UnaryOperator	!		640256	0					
ANR	640489	Identifier	isInPreprocessor		640256	1					
ANR	640490	ExpressionStatement	tabIncrementIn += tabSize - 1 - ( ( tabIncrementIn + charNum ) % tabSize )	2608:3:75237:75307	640256	1	True				
ANR	640491	AssignmentExpression	tabIncrementIn += tabSize - 1 - ( ( tabIncrementIn + charNum ) % tabSize )		640256	0		+=			
ANR	640492	Identifier	tabIncrementIn		640256	0					
ANR	640493	AdditiveExpression	tabSize - 1 - ( ( tabIncrementIn + charNum ) % tabSize )		640256	1		-			
ANR	640494	Identifier	tabSize		640256	0					
ANR	640495	AdditiveExpression	1 - ( ( tabIncrementIn + charNum ) % tabSize )		640256	1		-			
ANR	640496	PrimaryExpression	1		640256	0					
ANR	640497	MultiplicativeExpression	( tabIncrementIn + charNum ) % tabSize		640256	1		%			
ANR	640498	AdditiveExpression	tabIncrementIn + charNum		640256	0		+			
ANR	640499	Identifier	tabIncrementIn		640256	0					
ANR	640500	Identifier	charNum		640256	1					
ANR	640501	Identifier	tabSize		640256	1					
ANR	640502	ExpressionStatement	leadingSpaces = charNum + tabIncrementIn	2610:1:75313:75353	640256	16	True				
ANR	640503	AssignmentExpression	leadingSpaces = charNum + tabIncrementIn		640256	0		=			
ANR	640504	Identifier	leadingSpaces		640256	0					
ANR	640505	AdditiveExpression	charNum + tabIncrementIn		640256	1		+			
ANR	640506	Identifier	charNum		640256	0					
ANR	640507	Identifier	tabIncrementIn		640256	1					
ANR	640508	IfStatement	"if ( isSequenceReached ( ""/*"" ) )"		640256	17					
ANR	640509	Condition	"isSequenceReached ( ""/*"" )"	2612:5:75361:75383	640256	0	True				
ANR	640510	CallExpression	"isSequenceReached ( ""/*"" )"		640256	0					
ANR	640511	Callee	isSequenceReached		640256	0					
ANR	640512	Identifier	isSequenceReached		640256	0					
ANR	640513	ArgumentList	"""/*"""		640256	1					
ANR	640514	Argument	"""/*"""		640256	0					
ANR	640515	PrimaryExpression	"""/*"""		640256	0					
ANR	640516	CompoundStatement		67:1:1885:1885	640256	1					
ANR	640517	ExpressionStatement	doesLineStartComment = true	2614:2:75391:75418	640256	0	True				
ANR	640518	AssignmentExpression	doesLineStartComment = true		640256	0		=			
ANR	640519	Identifier	doesLineStartComment		640256	0					
ANR	640520	Identifier	true		640256	1					
ANR	640521	IfStatement	"if ( ( int ) currentLine . length ( ) > charNum + 2 && currentLine . find ( ""*/"" , charNum + 2 ) != string :: npos )"		640256	1					
ANR	640522	Condition	"( int ) currentLine . length ( ) > charNum + 2 && currentLine . find ( ""*/"" , charNum + 2 ) != string :: npos"	2615:6:75426:75530	640256	0	True				
ANR	640523	AndExpression	"( int ) currentLine . length ( ) > charNum + 2 && currentLine . find ( ""*/"" , charNum + 2 ) != string :: npos"		640256	0		&&			
ANR	640524	RelationalExpression	( int ) currentLine . length ( ) > charNum + 2		640256	0		>			
ANR	640525	CastExpression	( int ) currentLine . length ( )		640256	0					
ANR	640526	CastTarget	int		640256	0					
ANR	640527	CallExpression	currentLine . length ( )		640256	1					
ANR	640528	Callee	currentLine . length		640256	0					
ANR	640529	MemberAccess	currentLine . length		640256	0					
ANR	640530	Identifier	currentLine		640256	0					
ANR	640531	Identifier	length		640256	1					
ANR	640532	ArgumentList			640256	1					
ANR	640533	AdditiveExpression	charNum + 2		640256	1		+			
ANR	640534	Identifier	charNum		640256	0					
ANR	640535	PrimaryExpression	2		640256	1					
ANR	640536	EqualityExpression	"currentLine . find ( ""*/"" , charNum + 2 ) != string :: npos"		640256	1		!=			
ANR	640537	CallExpression	"currentLine . find ( ""*/"" , charNum + 2 )"		640256	0					
ANR	640538	Callee	currentLine . find		640256	0					
ANR	640539	MemberAccess	currentLine . find		640256	0					
ANR	640540	Identifier	currentLine		640256	0					
ANR	640541	Identifier	find		640256	1					
ANR	640542	ArgumentList	"""*/"""		640256	1					
ANR	640543	Argument	"""*/"""		640256	0					
ANR	640544	PrimaryExpression	"""*/"""		640256	0					
ANR	640545	Argument	charNum + 2		640256	1					
ANR	640546	AdditiveExpression	charNum + 2		640256	0		+			
ANR	640547	Identifier	charNum		640256	0					
ANR	640548	PrimaryExpression	2		640256	1					
ANR	640549	Identifier	string :: npos		640256	1					
ANR	640550	ExpressionStatement	lineIsCommentOnly = true	2617:3:75536:75560	640256	1	True				
ANR	640551	AssignmentExpression	lineIsCommentOnly = true		640256	0		=			
ANR	640552	Identifier	lineIsCommentOnly		640256	0					
ANR	640553	Identifier	true		640256	1					
ANR	640554	ElseStatement	else		640256	0					
ANR	640555	IfStatement	"if ( isSequenceReached ( ""//"" ) )"		640256	0					
ANR	640556	Condition	"isSequenceReached ( ""//"" )"	2619:10:75575:75597	640256	0	True				
ANR	640557	CallExpression	"isSequenceReached ( ""//"" )"		640256	0					
ANR	640558	Callee	isSequenceReached		640256	0					
ANR	640559	Identifier	isSequenceReached		640256	0					
ANR	640560	ArgumentList	"""//"""		640256	1					
ANR	640561	Argument	"""//"""		640256	0					
ANR	640562	PrimaryExpression	"""//"""		640256	0					
ANR	640563	CompoundStatement		74:1:2099:2099	640256	1					
ANR	640564	ExpressionStatement	lineIsLineCommentOnly = true	2621:2:75605:75633	640256	0	True				
ANR	640565	AssignmentExpression	lineIsLineCommentOnly = true		640256	0		=			
ANR	640566	Identifier	lineIsLineCommentOnly		640256	0					
ANR	640567	Identifier	true		640256	1					
ANR	640568	ElseStatement	else		640256	0					
ANR	640569	IfStatement	"if ( isSequenceReached ( ""{"" ) )"		640256	0					
ANR	640570	Condition	"isSequenceReached ( ""{"" )"	2623:10:75648:75669	640256	0	True				
ANR	640571	CallExpression	"isSequenceReached ( ""{"" )"		640256	0					
ANR	640572	Callee	isSequenceReached		640256	0					
ANR	640573	Identifier	isSequenceReached		640256	0					
ANR	640574	ArgumentList	"""{"""		640256	1					
ANR	640575	Argument	"""{"""		640256	0					
ANR	640576	PrimaryExpression	"""{"""		640256	0					
ANR	640577	CompoundStatement		81:2:2250:2318	640256	1					
ANR	640578	ExpressionStatement	currentLineBeginsWithBrace = true	2625:2:75677:75710	640256	0	True				
ANR	640579	AssignmentExpression	currentLineBeginsWithBrace = true		640256	0		=			
ANR	640580	Identifier	currentLineBeginsWithBrace		640256	0					
ANR	640581	Identifier	true		640256	1					
ANR	640582	ExpressionStatement	currentLineFirstBraceNum = charNum	2626:2:75714:75748	640256	1	True				
ANR	640583	AssignmentExpression	currentLineFirstBraceNum = charNum		640256	0		=			
ANR	640584	Identifier	currentLineFirstBraceNum		640256	0					
ANR	640585	Identifier	charNum		640256	1					
ANR	640586	IdentifierDeclStatement	"size_t firstText = currentLine . find_first_not_of ( "" \\t"" , charNum + 1 ) ;"	2627:2:75752:75820	640256	2	True				
ANR	640587	IdentifierDecl	"firstText = currentLine . find_first_not_of ( "" \\t"" , charNum + 1 )"		640256	0					
ANR	640588	IdentifierDeclType	size_t		640256	0					
ANR	640589	Identifier	firstText		640256	1					
ANR	640590	AssignmentExpression	"firstText = currentLine . find_first_not_of ( "" \\t"" , charNum + 1 )"		640256	2		=			
ANR	640591	Identifier	firstText		640256	0					
ANR	640592	CallExpression	"currentLine . find_first_not_of ( "" \\t"" , charNum + 1 )"		640256	1					
ANR	640593	Callee	currentLine . find_first_not_of		640256	0					
ANR	640594	MemberAccess	currentLine . find_first_not_of		640256	0					
ANR	640595	Identifier	currentLine		640256	0					
ANR	640596	Identifier	find_first_not_of		640256	1					
ANR	640597	ArgumentList	""" \\t"""		640256	1					
ANR	640598	Argument	""" \\t"""		640256	0					
ANR	640599	PrimaryExpression	""" \\t"""		640256	0					
ANR	640600	Argument	charNum + 1		640256	1					
ANR	640601	AdditiveExpression	charNum + 1		640256	0		+			
ANR	640602	Identifier	charNum		640256	0					
ANR	640603	PrimaryExpression	1		640256	1					
ANR	640604	IfStatement	if ( firstText != string :: npos )		640256	3					
ANR	640605	Condition	firstText != string :: npos	2628:6:75828:75852	640256	0	True				
ANR	640606	EqualityExpression	firstText != string :: npos		640256	0		!=			
ANR	640607	Identifier	firstText		640256	0					
ANR	640608	Identifier	string :: npos		640256	1					
ANR	640609	CompoundStatement		83:2:2355:2355	640256	1					
ANR	640610	IfStatement	"if ( currentLine . compare ( firstText , 2 , ""//"" ) == 0 )"		640256	0					
ANR	640611	Condition	"currentLine . compare ( firstText , 2 , ""//"" ) == 0"	2630:7:75866:75909	640256	0	True				
ANR	640612	EqualityExpression	"currentLine . compare ( firstText , 2 , ""//"" ) == 0"		640256	0		==			
ANR	640613	CallExpression	"currentLine . compare ( firstText , 2 , ""//"" )"		640256	0					
ANR	640614	Callee	currentLine . compare		640256	0					
ANR	640615	MemberAccess	currentLine . compare		640256	0					
ANR	640616	Identifier	currentLine		640256	0					
ANR	640617	Identifier	compare		640256	1					
ANR	640618	ArgumentList	firstText		640256	1					
ANR	640619	Argument	firstText		640256	0					
ANR	640620	Identifier	firstText		640256	0					
ANR	640621	Argument	2		640256	1					
ANR	640622	PrimaryExpression	2		640256	0					
ANR	640623	Argument	"""//"""		640256	2					
ANR	640624	PrimaryExpression	"""//"""		640256	0					
ANR	640625	PrimaryExpression	0		640256	1					
ANR	640626	ExpressionStatement	lineIsLineCommentOnly = true	2631:4:75916:75944	640256	1	True				
ANR	640627	AssignmentExpression	lineIsLineCommentOnly = true		640256	0		=			
ANR	640628	Identifier	lineIsLineCommentOnly		640256	0					
ANR	640629	Identifier	true		640256	1					
ANR	640630	ElseStatement	else		640256	0					
ANR	640631	IfStatement	"if ( currentLine . compare ( firstText , 2 , ""/*"" ) == 0 || isExecSQL ( currentLine , firstText ) )"		640256	0					
ANR	640632	Condition	"currentLine . compare ( firstText , 2 , ""/*"" ) == 0 || isExecSQL ( currentLine , firstText )"	2632:12:75958:76050	640256	0	True				
ANR	640633	OrExpression	"currentLine . compare ( firstText , 2 , ""/*"" ) == 0 || isExecSQL ( currentLine , firstText )"		640256	0		||			
ANR	640634	EqualityExpression	"currentLine . compare ( firstText , 2 , ""/*"" ) == 0"		640256	0		==			
ANR	640635	CallExpression	"currentLine . compare ( firstText , 2 , ""/*"" )"		640256	0					
ANR	640636	Callee	currentLine . compare		640256	0					
ANR	640637	MemberAccess	currentLine . compare		640256	0					
ANR	640638	Identifier	currentLine		640256	0					
ANR	640639	Identifier	compare		640256	1					
ANR	640640	ArgumentList	firstText		640256	1					
ANR	640641	Argument	firstText		640256	0					
ANR	640642	Identifier	firstText		640256	0					
ANR	640643	Argument	2		640256	1					
ANR	640644	PrimaryExpression	2		640256	0					
ANR	640645	Argument	"""/*"""		640256	2					
ANR	640646	PrimaryExpression	"""/*"""		640256	0					
ANR	640647	PrimaryExpression	0		640256	1					
ANR	640648	CallExpression	"isExecSQL ( currentLine , firstText )"		640256	1					
ANR	640649	Callee	isExecSQL		640256	0					
ANR	640650	Identifier	isExecSQL		640256	0					
ANR	640651	ArgumentList	currentLine		640256	1					
ANR	640652	Argument	currentLine		640256	0					
ANR	640653	Identifier	currentLine		640256	0					
ANR	640654	Argument	firstText		640256	1					
ANR	640655	Identifier	firstText		640256	0					
ANR	640656	CompoundStatement		90:4:2592:2600	640256	1					
ANR	640657	IdentifierDeclStatement	size_t j ;	2636:4:76094:76102	640256	0	True				
ANR	640658	IdentifierDecl	j		640256	0					
ANR	640659	IdentifierDeclType	size_t		640256	0					
ANR	640660	Identifier	j		640256	1					
ANR	640661	ForStatement	for ( j = charNum + 1 ; j < firstText && isWhiteSpace ( currentLine [ j ] ) ; j ++ )		640256	1					
ANR	640662	ForInit	j = charNum + 1 ;	2637:9:76113:76128	640256	0	True				
ANR	640663	AssignmentExpression	j = charNum + 1		640256	0		=			
ANR	640664	Identifier	j		640256	0					
ANR	640665	AdditiveExpression	charNum + 1		640256	1		+			
ANR	640666	Identifier	charNum		640256	0					
ANR	640667	PrimaryExpression	1		640256	1					
ANR	640668	Condition	j < firstText && isWhiteSpace ( currentLine [ j ] )	2637:26:76130:76174	640256	1	True				
ANR	640669	AndExpression	j < firstText && isWhiteSpace ( currentLine [ j ] )		640256	0		&&			
ANR	640670	RelationalExpression	j < firstText		640256	0		<			
ANR	640671	Identifier	j		640256	0					
ANR	640672	Identifier	firstText		640256	1					
ANR	640673	CallExpression	isWhiteSpace ( currentLine [ j ] )		640256	1					
ANR	640674	Callee	isWhiteSpace		640256	0					
ANR	640675	Identifier	isWhiteSpace		640256	0					
ANR	640676	ArgumentList	currentLine [ j ]		640256	1					
ANR	640677	Argument	currentLine [ j ]		640256	0					
ANR	640678	ArrayIndexing	currentLine [ j ]		640256	0					
ANR	640679	Identifier	currentLine		640256	0					
ANR	640680	Identifier	j		640256	1					
ANR	640681	PostIncDecOperationExpression	j ++	2637:73:76177:76179	640256	2	True				
ANR	640682	Identifier	j		640256	0					
ANR	640683	IncDec	++		640256	1					
ANR	640684	CompoundStatement		92:4:2684:2684	640256	3					
ANR	640685	IfStatement	if ( currentLine [ j ] == '\\t' )		640256	0					
ANR	640686	Condition	currentLine [ j ] == '\\t'	2639:9:76197:76218	640256	0	True				
ANR	640687	EqualityExpression	currentLine [ j ] == '\\t'		640256	0		==			
ANR	640688	ArrayIndexing	currentLine [ j ]		640256	0					
ANR	640689	Identifier	currentLine		640256	0					
ANR	640690	Identifier	j		640256	1					
ANR	640691	PrimaryExpression	'\\t'		640256	1					
ANR	640692	ExpressionStatement	tabIncrementIn += tabSize - 1 - ( ( tabIncrementIn + j ) % tabSize )	2640:6:76227:76291	640256	1	True				
ANR	640693	AssignmentExpression	tabIncrementIn += tabSize - 1 - ( ( tabIncrementIn + j ) % tabSize )		640256	0		+=			
ANR	640694	Identifier	tabIncrementIn		640256	0					
ANR	640695	AdditiveExpression	tabSize - 1 - ( ( tabIncrementIn + j ) % tabSize )		640256	1		-			
ANR	640696	Identifier	tabSize		640256	0					
ANR	640697	AdditiveExpression	1 - ( ( tabIncrementIn + j ) % tabSize )		640256	1		-			
ANR	640698	PrimaryExpression	1		640256	0					
ANR	640699	MultiplicativeExpression	( tabIncrementIn + j ) % tabSize		640256	1		%			
ANR	640700	AdditiveExpression	tabIncrementIn + j		640256	0		+			
ANR	640701	Identifier	tabIncrementIn		640256	0					
ANR	640702	Identifier	j		640256	1					
ANR	640703	Identifier	tabSize		640256	1					
ANR	640704	ExpressionStatement	leadingSpaces = j + tabIncrementIn	2642:4:76303:76337	640256	2	True				
ANR	640705	AssignmentExpression	leadingSpaces = j + tabIncrementIn		640256	0		=			
ANR	640706	Identifier	leadingSpaces		640256	0					
ANR	640707	AdditiveExpression	j + tabIncrementIn		640256	1		+			
ANR	640708	Identifier	j		640256	0					
ANR	640709	Identifier	tabIncrementIn		640256	1					
ANR	640710	IfStatement	"if ( currentLine . compare ( firstText , 2 , ""/*"" ) == 0 )"		640256	3					
ANR	640711	Condition	"currentLine . compare ( firstText , 2 , ""/*"" ) == 0"	2643:8:76347:76390	640256	0	True				
ANR	640712	EqualityExpression	"currentLine . compare ( firstText , 2 , ""/*"" ) == 0"		640256	0		==			
ANR	640713	CallExpression	"currentLine . compare ( firstText , 2 , ""/*"" )"		640256	0					
ANR	640714	Callee	currentLine . compare		640256	0					
ANR	640715	MemberAccess	currentLine . compare		640256	0					
ANR	640716	Identifier	currentLine		640256	0					
ANR	640717	Identifier	compare		640256	1					
ANR	640718	ArgumentList	firstText		640256	1					
ANR	640719	Argument	firstText		640256	0					
ANR	640720	Identifier	firstText		640256	0					
ANR	640721	Argument	2		640256	1					
ANR	640722	PrimaryExpression	2		640256	0					
ANR	640723	Argument	"""/*"""		640256	2					
ANR	640724	PrimaryExpression	"""/*"""		640256	0					
ANR	640725	PrimaryExpression	0		640256	1					
ANR	640726	ExpressionStatement	doesLineStartComment = true	2644:5:76398:76425	640256	1	True				
ANR	640727	AssignmentExpression	doesLineStartComment = true		640256	0		=			
ANR	640728	Identifier	doesLineStartComment		640256	0					
ANR	640729	Identifier	true		640256	1					
ANR	640730	ElseStatement	else		640256	0					
ANR	640731	IfStatement	if ( isWhiteSpace ( currentLine [ charNum ] ) && ! ( charNum + 1 < ( int ) currentLine . length ( ) ) )		640256	0					
ANR	640732	Condition	isWhiteSpace ( currentLine [ charNum ] ) && ! ( charNum + 1 < ( int ) currentLine . length ( ) )	2648:10:76449:76529	640256	0	True				
ANR	640733	AndExpression	isWhiteSpace ( currentLine [ charNum ] ) && ! ( charNum + 1 < ( int ) currentLine . length ( ) )		640256	0		&&			
ANR	640734	CallExpression	isWhiteSpace ( currentLine [ charNum ] )		640256	0					
ANR	640735	Callee	isWhiteSpace		640256	0					
ANR	640736	Identifier	isWhiteSpace		640256	0					
ANR	640737	ArgumentList	currentLine [ charNum ]		640256	1					
ANR	640738	Argument	currentLine [ charNum ]		640256	0					
ANR	640739	ArrayIndexing	currentLine [ charNum ]		640256	0					
ANR	640740	Identifier	currentLine		640256	0					
ANR	640741	Identifier	charNum		640256	1					
ANR	640742	UnaryOperationExpression	! ( charNum + 1 < ( int ) currentLine . length ( ) )		640256	1					
ANR	640743	UnaryOperator	!		640256	0					
ANR	640744	RelationalExpression	charNum + 1 < ( int ) currentLine . length ( )		640256	1		<			
ANR	640745	AdditiveExpression	charNum + 1		640256	0		+			
ANR	640746	Identifier	charNum		640256	0					
ANR	640747	PrimaryExpression	1		640256	1					
ANR	640748	CastExpression	( int ) currentLine . length ( )		640256	1					
ANR	640749	CastTarget	int		640256	0					
ANR	640750	CallExpression	currentLine . length ( )		640256	1					
ANR	640751	Callee	currentLine . length		640256	0					
ANR	640752	MemberAccess	currentLine . length		640256	0					
ANR	640753	Identifier	currentLine		640256	0					
ANR	640754	Identifier	length		640256	1					
ANR	640755	ArgumentList			640256	1					
ANR	640756	CompoundStatement		103:1:3031:3031	640256	1					
ANR	640757	ExpressionStatement	lineIsEmpty = true	2650:2:76537:76555	640256	0	True				
ANR	640758	AssignmentExpression	lineIsEmpty = true		640256	0		=			
ANR	640759	Identifier	lineIsEmpty		640256	0					
ANR	640760	Identifier	true		640256	1					
ANR	640761	IfStatement	if ( isInPreprocessor )		640256	18					
ANR	640762	Condition	isInPreprocessor	2654:5:76651:76666	640256	0	True				
ANR	640763	Identifier	isInPreprocessor		640256	0					
ANR	640764	CompoundStatement		109:1:3168:3168	640256	1					
ANR	640765	IfStatement	if ( ! doesLineStartComment )		640256	0					
ANR	640766	Condition	! doesLineStartComment	2656:6:76678:76698	640256	0	True				
ANR	640767	UnaryOperationExpression	! doesLineStartComment		640256	0					
ANR	640768	UnaryOperator	!		640256	0					
ANR	640769	Identifier	doesLineStartComment		640256	1					
ANR	640770	ExpressionStatement	leadingSpaces = 0	2657:3:76704:76721	640256	1	True				
ANR	640771	AssignmentExpression	leadingSpaces = 0		640256	0		=			
ANR	640772	Identifier	leadingSpaces		640256	0					
ANR	640773	PrimaryExpression	0		640256	1					
ANR	640774	ExpressionStatement	charNum = 0	2658:2:76725:76736	640256	1	True				
ANR	640775	AssignmentExpression	charNum = 0		640256	0		=			
ANR	640776	Identifier	charNum		640256	0					
ANR	640777	PrimaryExpression	0		640256	1					
ANR	640778	ReturnType	void		640256	1					
ANR	640779	Identifier	ASFormatter :: initNewLine		640256	2					
ANR	640780	ParameterList			640256	3					
ANR	640781	CFGEntryNode	ENTRY		640256		True				
ANR	640782	CFGExitNode	EXIT		640256		True				
ANR	640783	Symbol	numSpaces		640256						
ANR	640784	Symbol	string :: npos		640256						
ANR	640785	Symbol	isInQuoteContinuation		640256						
ANR	640786	Symbol	isWhiteSpace		640256						
ANR	640787	Symbol	firstText		640256						
ANR	640788	Symbol	* currentLine		640256						
ANR	640789	Symbol	tabSize		640256						
ANR	640790	Symbol	noTrimCommentContinuation		640256						
ANR	640791	Symbol	lineIsLineCommentOnly		640256						
ANR	640792	Symbol	lineIsEmpty		640256						
ANR	640793	Symbol	len		640256						
ANR	640794	Symbol	isSequenceReached		640256						
ANR	640795	Symbol	isInPreprocessor		640256						
ANR	640796	Symbol	charNum		640256						
ANR	640797	Symbol	getPreprocDefineIndent		640256						
ANR	640798	Symbol	isInComment		640256						
ANR	640799	Symbol	tabIncrementIn		640256						
ANR	640800	Symbol	currentLine . compare		640256						
ANR	640801	Symbol	currentLine		640256						
ANR	640802	Symbol	currentLine . find		640256						
ANR	640803	Symbol	currentLineBeginsWithBrace		640256						
ANR	640804	Symbol	isImmediatelyPostCommentOnly		640256						
ANR	640805	Symbol	doesLineStartComment		640256						
ANR	640806	Symbol	false		640256						
ANR	640807	Symbol	i		640256						
ANR	640808	Symbol	j		640256						
ANR	640809	Symbol	currentLine . find_first_not_of		640256						
ANR	640810	Symbol	lineEndsInCommentOnly		640256						
ANR	640811	Symbol	isInExecSQL		640256						
ANR	640812	Symbol	leadingSpaces		640256						
ANR	640813	Symbol	getTabLength		640256						
ANR	640814	Symbol	* i		640256						
ANR	640815	Symbol	* j		640256						
ANR	640816	Symbol	currentLine . length		640256						
ANR	640817	Symbol	lineIsCommentOnly		640256						
ANR	640818	Symbol	* charNum		640256						
ANR	640819	Symbol	true		640256						
ANR	640820	Symbol	isExecSQL		640256						
ANR	640821	Symbol	tabCount_		640256						
ANR	640822	Symbol	currentLineFirstBraceNum		640256						
ANR	640823	Function	ASFormatter :: appendChar	2669:0:76967:77406							
ANR	640824	FunctionDef	"ASFormatter :: appendChar (char ch , bool canBreakLine)"		640823	0					
ANR	640825	CompoundStatement		2670:0:77024:77406	640823	0					
ANR	640826	IfStatement	if ( canBreakLine && isInLineBreak )		640823	0					
ANR	640827	Condition	canBreakLine && isInLineBreak	2671:5:77031:77059	640823	0	True				
ANR	640828	AndExpression	canBreakLine && isInLineBreak		640823	0		&&			
ANR	640829	Identifier	canBreakLine		640823	0					
ANR	640830	Identifier	isInLineBreak		640823	1					
ANR	640831	ExpressionStatement	breakLine ( )	2672:2:77064:77075	640823	1	True				
ANR	640832	CallExpression	breakLine ( )		640823	0					
ANR	640833	Callee	breakLine		640823	0					
ANR	640834	Identifier	breakLine		640823	0					
ANR	640835	ArgumentList			640823	1					
ANR	640836	ExpressionStatement	"formattedLine . append ( 1 , ch )"	2674:1:77079:77106	640823	1	True				
ANR	640837	CallExpression	"formattedLine . append ( 1 , ch )"		640823	0					
ANR	640838	Callee	formattedLine . append		640823	0					
ANR	640839	MemberAccess	formattedLine . append		640823	0					
ANR	640840	Identifier	formattedLine		640823	0					
ANR	640841	Identifier	append		640823	1					
ANR	640842	ArgumentList	1		640823	1					
ANR	640843	Argument	1		640823	0					
ANR	640844	PrimaryExpression	1		640823	0					
ANR	640845	Argument	ch		640823	1					
ANR	640846	Identifier	ch		640823	0					
ANR	640847	ExpressionStatement	isImmediatelyPostCommentOnly = false	2675:1:77109:77145	640823	2	True				
ANR	640848	AssignmentExpression	isImmediatelyPostCommentOnly = false		640823	0		=			
ANR	640849	Identifier	isImmediatelyPostCommentOnly		640823	0					
ANR	640850	Identifier	false		640823	1					
ANR	640851	IfStatement	if ( maxCodeLength != string :: npos )		640823	3					
ANR	640852	Condition	maxCodeLength != string :: npos	2676:5:77152:77180	640823	0	True				
ANR	640853	EqualityExpression	maxCodeLength != string :: npos		640823	0		!=			
ANR	640854	Identifier	maxCodeLength		640823	0					
ANR	640855	Identifier	string :: npos		640823	1					
ANR	640856	CompoundStatement		8:1:159:159	640823	1					
ANR	640857	IfStatement	if ( isOkToSplitFormattedLine ( ) )		640823	0					
ANR	640858	Condition	isOkToSplitFormattedLine ( )	2679:6:77252:77277	640823	0	True				
ANR	640859	CallExpression	isOkToSplitFormattedLine ( )		640823	0					
ANR	640860	Callee	isOkToSplitFormattedLine		640823	0					
ANR	640861	Identifier	isOkToSplitFormattedLine		640823	0					
ANR	640862	ArgumentList			640823	1					
ANR	640863	ExpressionStatement	updateFormattedLineSplitPoints ( ch )	2680:3:77283:77317	640823	1	True				
ANR	640864	CallExpression	updateFormattedLineSplitPoints ( ch )		640823	0					
ANR	640865	Callee	updateFormattedLineSplitPoints		640823	0					
ANR	640866	Identifier	updateFormattedLineSplitPoints		640823	0					
ANR	640867	ArgumentList	ch		640823	1					
ANR	640868	Argument	ch		640823	0					
ANR	640869	Identifier	ch		640823	0					
ANR	640870	IfStatement	if ( formattedLine . length ( ) > maxCodeLength )		640823	1					
ANR	640871	Condition	formattedLine . length ( ) > maxCodeLength	2681:6:77325:77362	640823	0	True				
ANR	640872	RelationalExpression	formattedLine . length ( ) > maxCodeLength		640823	0		>			
ANR	640873	CallExpression	formattedLine . length ( )		640823	0					
ANR	640874	Callee	formattedLine . length		640823	0					
ANR	640875	MemberAccess	formattedLine . length		640823	0					
ANR	640876	Identifier	formattedLine		640823	0					
ANR	640877	Identifier	length		640823	1					
ANR	640878	ArgumentList			640823	1					
ANR	640879	Identifier	maxCodeLength		640823	1					
ANR	640880	ExpressionStatement	testForTimeToSplitFormattedLine ( )	2682:3:77368:77401	640823	1	True				
ANR	640881	CallExpression	testForTimeToSplitFormattedLine ( )		640823	0					
ANR	640882	Callee	testForTimeToSplitFormattedLine		640823	0					
ANR	640883	Identifier	testForTimeToSplitFormattedLine		640823	0					
ANR	640884	ArgumentList			640823	1					
ANR	640885	ReturnType	void		640823	1					
ANR	640886	Identifier	ASFormatter :: appendChar		640823	2					
ANR	640887	ParameterList	"char ch , bool canBreakLine"		640823	3					
ANR	640888	Parameter	char ch	2669:29:76996:77002	640823	0	True				
ANR	640889	ParameterType	char		640823	0					
ANR	640890	Identifier	ch		640823	1					
ANR	640891	Parameter	bool canBreakLine	2669:38:77005:77021	640823	1	True				
ANR	640892	ParameterType	bool		640823	0					
ANR	640893	Identifier	canBreakLine		640823	1					
ANR	640894	CFGEntryNode	ENTRY		640823		True				
ANR	640895	CFGExitNode	EXIT		640823		True				
ANR	640896	Symbol	formattedLine		640823						
ANR	640897	Symbol	isImmediatelyPostCommentOnly		640823						
ANR	640898	Symbol	canBreakLine		640823						
ANR	640899	Symbol	ch		640823						
ANR	640900	Symbol	formattedLine . length		640823						
ANR	640901	Symbol	isInLineBreak		640823						
ANR	640902	Symbol	maxCodeLength		640823						
ANR	640903	Symbol	false		640823						
ANR	640904	Symbol	string :: npos		640823						
ANR	640905	Symbol	isOkToSplitFormattedLine		640823						
ANR	640906	Function	ASFormatter :: appendSequence	2694:0:77696:77940							
ANR	640907	FunctionDef	"ASFormatter :: appendSequence (const string & sequence , bool canBreakLine)"		640906	0					
ANR	640908	CompoundStatement		2695:0:77772:77940	640906	0					
ANR	640909	IfStatement	if ( canBreakLine && isInLineBreak )		640906	0					
ANR	640910	Condition	canBreakLine && isInLineBreak	2696:5:77779:77807	640906	0	True				
ANR	640911	AndExpression	canBreakLine && isInLineBreak		640906	0		&&			
ANR	640912	Identifier	canBreakLine		640906	0					
ANR	640913	Identifier	isInLineBreak		640906	1					
ANR	640914	ExpressionStatement	breakLine ( )	2697:2:77812:77823	640906	1	True				
ANR	640915	CallExpression	breakLine ( )		640906	0					
ANR	640916	Callee	breakLine		640906	0					
ANR	640917	Identifier	breakLine		640906	0					
ANR	640918	ArgumentList			640906	1					
ANR	640919	ExpressionStatement	formattedLine . append ( sequence )	2698:1:77826:77856	640906	1	True				
ANR	640920	CallExpression	formattedLine . append ( sequence )		640906	0					
ANR	640921	Callee	formattedLine . append		640906	0					
ANR	640922	MemberAccess	formattedLine . append		640906	0					
ANR	640923	Identifier	formattedLine		640906	0					
ANR	640924	Identifier	append		640906	1					
ANR	640925	ArgumentList	sequence		640906	1					
ANR	640926	Argument	sequence		640906	0					
ANR	640927	Identifier	sequence		640906	0					
ANR	640928	IfStatement	if ( formattedLine . length ( ) > maxCodeLength )		640906	2					
ANR	640929	Condition	formattedLine . length ( ) > maxCodeLength	2699:5:77863:77900	640906	0	True				
ANR	640930	RelationalExpression	formattedLine . length ( ) > maxCodeLength		640906	0		>			
ANR	640931	CallExpression	formattedLine . length ( )		640906	0					
ANR	640932	Callee	formattedLine . length		640906	0					
ANR	640933	MemberAccess	formattedLine . length		640906	0					
ANR	640934	Identifier	formattedLine		640906	0					
ANR	640935	Identifier	length		640906	1					
ANR	640936	ArgumentList			640906	1					
ANR	640937	Identifier	maxCodeLength		640906	1					
ANR	640938	ExpressionStatement	testForTimeToSplitFormattedLine ( )	2700:2:77905:77938	640906	1	True				
ANR	640939	CallExpression	testForTimeToSplitFormattedLine ( )		640906	0					
ANR	640940	Callee	testForTimeToSplitFormattedLine		640906	0					
ANR	640941	Identifier	testForTimeToSplitFormattedLine		640906	0					
ANR	640942	ArgumentList			640906	1					
ANR	640943	ReturnType	void		640906	1					
ANR	640944	Identifier	ASFormatter :: appendSequence		640906	2					
ANR	640945	ParameterList	"const string & sequence , bool canBreakLine"		640906	3					
ANR	640946	Parameter	const string & sequence	2694:33:77729:77750	640906	0	True				
ANR	640947	ParameterType	const string &		640906	0					
ANR	640948	Identifier	sequence		640906	1					
ANR	640949	Parameter	bool canBreakLine	2694:57:77753:77769	640906	1	True				
ANR	640950	ParameterType	bool		640906	0					
ANR	640951	Identifier	canBreakLine		640906	1					
ANR	640952	CFGEntryNode	ENTRY		640906		True				
ANR	640953	CFGExitNode	EXIT		640906		True				
ANR	640954	Symbol	formattedLine		640906						
ANR	640955	Symbol	sequence		640906						
ANR	640956	Symbol	canBreakLine		640906						
ANR	640957	Symbol	formattedLine . length		640906						
ANR	640958	Symbol	isInLineBreak		640906						
ANR	640959	Symbol	maxCodeLength		640906						
ANR	640960	Function	ASFormatter :: appendOperator	2710:0:78174:78609							
ANR	640961	FunctionDef	"ASFormatter :: appendOperator (const string & sequence , bool canBreakLine)"		640960	0					
ANR	640962	CompoundStatement		2711:0:78250:78609	640960	0					
ANR	640963	IfStatement	if ( canBreakLine && isInLineBreak )		640960	0					
ANR	640964	Condition	canBreakLine && isInLineBreak	2712:5:78257:78285	640960	0	True				
ANR	640965	AndExpression	canBreakLine && isInLineBreak		640960	0		&&			
ANR	640966	Identifier	canBreakLine		640960	0					
ANR	640967	Identifier	isInLineBreak		640960	1					
ANR	640968	ExpressionStatement	breakLine ( )	2713:2:78290:78301	640960	1	True				
ANR	640969	CallExpression	breakLine ( )		640960	0					
ANR	640970	Callee	breakLine		640960	0					
ANR	640971	Identifier	breakLine		640960	0					
ANR	640972	ArgumentList			640960	1					
ANR	640973	ExpressionStatement	formattedLine . append ( sequence )	2714:1:78304:78334	640960	1	True				
ANR	640974	CallExpression	formattedLine . append ( sequence )		640960	0					
ANR	640975	Callee	formattedLine . append		640960	0					
ANR	640976	MemberAccess	formattedLine . append		640960	0					
ANR	640977	Identifier	formattedLine		640960	0					
ANR	640978	Identifier	append		640960	1					
ANR	640979	ArgumentList	sequence		640960	1					
ANR	640980	Argument	sequence		640960	0					
ANR	640981	Identifier	sequence		640960	0					
ANR	640982	IfStatement	if ( maxCodeLength != string :: npos )		640960	2					
ANR	640983	Condition	maxCodeLength != string :: npos	2715:5:78341:78369	640960	0	True				
ANR	640984	EqualityExpression	maxCodeLength != string :: npos		640960	0		!=			
ANR	640985	Identifier	maxCodeLength		640960	0					
ANR	640986	Identifier	string :: npos		640960	1					
ANR	640987	CompoundStatement		6:1:122:122	640960	1					
ANR	640988	IfStatement	if ( isOkToSplitFormattedLine ( ) )		640960	0					
ANR	640989	Condition	isOkToSplitFormattedLine ( )	2718:6:78441:78466	640960	0	True				
ANR	640990	CallExpression	isOkToSplitFormattedLine ( )		640960	0					
ANR	640991	Callee	isOkToSplitFormattedLine		640960	0					
ANR	640992	Identifier	isOkToSplitFormattedLine		640960	0					
ANR	640993	ArgumentList			640960	1					
ANR	640994	ExpressionStatement	updateFormattedLineSplitPointsOperator ( sequence )	2719:3:78472:78520	640960	1	True				
ANR	640995	CallExpression	updateFormattedLineSplitPointsOperator ( sequence )		640960	0					
ANR	640996	Callee	updateFormattedLineSplitPointsOperator		640960	0					
ANR	640997	Identifier	updateFormattedLineSplitPointsOperator		640960	0					
ANR	640998	ArgumentList	sequence		640960	1					
ANR	640999	Argument	sequence		640960	0					
ANR	641000	Identifier	sequence		640960	0					
ANR	641001	IfStatement	if ( formattedLine . length ( ) > maxCodeLength )		640960	1					
ANR	641002	Condition	formattedLine . length ( ) > maxCodeLength	2720:6:78528:78565	640960	0	True				
ANR	641003	RelationalExpression	formattedLine . length ( ) > maxCodeLength		640960	0		>			
ANR	641004	CallExpression	formattedLine . length ( )		640960	0					
ANR	641005	Callee	formattedLine . length		640960	0					
ANR	641006	MemberAccess	formattedLine . length		640960	0					
ANR	641007	Identifier	formattedLine		640960	0					
ANR	641008	Identifier	length		640960	1					
ANR	641009	ArgumentList			640960	1					
ANR	641010	Identifier	maxCodeLength		640960	1					
ANR	641011	ExpressionStatement	testForTimeToSplitFormattedLine ( )	2721:3:78571:78604	640960	1	True				
ANR	641012	CallExpression	testForTimeToSplitFormattedLine ( )		640960	0					
ANR	641013	Callee	testForTimeToSplitFormattedLine		640960	0					
ANR	641014	Identifier	testForTimeToSplitFormattedLine		640960	0					
ANR	641015	ArgumentList			640960	1					
ANR	641016	ReturnType	void		640960	1					
ANR	641017	Identifier	ASFormatter :: appendOperator		640960	2					
ANR	641018	ParameterList	"const string & sequence , bool canBreakLine"		640960	3					
ANR	641019	Parameter	const string & sequence	2710:33:78207:78228	640960	0	True				
ANR	641020	ParameterType	const string &		640960	0					
ANR	641021	Identifier	sequence		640960	1					
ANR	641022	Parameter	bool canBreakLine	2710:57:78231:78247	640960	1	True				
ANR	641023	ParameterType	bool		640960	0					
ANR	641024	Identifier	canBreakLine		640960	1					
ANR	641025	CFGEntryNode	ENTRY		640960		True				
ANR	641026	CFGExitNode	EXIT		640960		True				
ANR	641027	Symbol	formattedLine		640960						
ANR	641028	Symbol	sequence		640960						
ANR	641029	Symbol	canBreakLine		640960						
ANR	641030	Symbol	formattedLine . length		640960						
ANR	641031	Symbol	isInLineBreak		640960						
ANR	641032	Symbol	maxCodeLength		640960						
ANR	641033	Symbol	string :: npos		640960						
ANR	641034	Symbol	isOkToSplitFormattedLine		640960						
ANR	641035	Function	ASFormatter :: appendSpacePad	2729:0:78733:79183							
ANR	641036	FunctionDef	ASFormatter :: appendSpacePad ()		641035	0					
ANR	641037	CompoundStatement		2730:0:78768:79183	641035	0					
ANR	641038	IdentifierDeclStatement	int len = formattedLine . length ( ) ;	2731:1:78771:78803	641035	0	True				
ANR	641039	IdentifierDecl	len = formattedLine . length ( )		641035	0					
ANR	641040	IdentifierDeclType	int		641035	0					
ANR	641041	Identifier	len		641035	1					
ANR	641042	AssignmentExpression	len = formattedLine . length ( )		641035	2		=			
ANR	641043	Identifier	len		641035	0					
ANR	641044	CallExpression	formattedLine . length ( )		641035	1					
ANR	641045	Callee	formattedLine . length		641035	0					
ANR	641046	MemberAccess	formattedLine . length		641035	0					
ANR	641047	Identifier	formattedLine		641035	0					
ANR	641048	Identifier	length		641035	1					
ANR	641049	ArgumentList			641035	1					
ANR	641050	IfStatement	if ( len > 0 && ! isWhiteSpace ( formattedLine [ len - 1 ] ) )		641035	1					
ANR	641051	Condition	len > 0 && ! isWhiteSpace ( formattedLine [ len - 1 ] )	2732:5:78810:78857	641035	0	True				
ANR	641052	AndExpression	len > 0 && ! isWhiteSpace ( formattedLine [ len - 1 ] )		641035	0		&&			
ANR	641053	RelationalExpression	len > 0		641035	0		>			
ANR	641054	Identifier	len		641035	0					
ANR	641055	PrimaryExpression	0		641035	1					
ANR	641056	UnaryOperationExpression	! isWhiteSpace ( formattedLine [ len - 1 ] )		641035	1					
ANR	641057	UnaryOperator	!		641035	0					
ANR	641058	CallExpression	isWhiteSpace ( formattedLine [ len - 1 ] )		641035	1					
ANR	641059	Callee	isWhiteSpace		641035	0					
ANR	641060	Identifier	isWhiteSpace		641035	0					
ANR	641061	ArgumentList	formattedLine [ len - 1 ]		641035	1					
ANR	641062	Argument	formattedLine [ len - 1 ]		641035	0					
ANR	641063	ArrayIndexing	formattedLine [ len - 1 ]		641035	0					
ANR	641064	Identifier	formattedLine		641035	0					
ANR	641065	AdditiveExpression	len - 1		641035	1		-			
ANR	641066	Identifier	len		641035	0					
ANR	641067	PrimaryExpression	1		641035	1					
ANR	641068	CompoundStatement		4:1:92:92	641035	1					
ANR	641069	ExpressionStatement	"formattedLine . append ( 1 , ' ' )"	2734:2:78865:78893	641035	0	True				
ANR	641070	CallExpression	"formattedLine . append ( 1 , ' ' )"		641035	0					
ANR	641071	Callee	formattedLine . append		641035	0					
ANR	641072	MemberAccess	formattedLine . append		641035	0					
ANR	641073	Identifier	formattedLine		641035	0					
ANR	641074	Identifier	append		641035	1					
ANR	641075	ArgumentList	1		641035	1					
ANR	641076	Argument	1		641035	0					
ANR	641077	PrimaryExpression	1		641035	0					
ANR	641078	Argument	' '		641035	1					
ANR	641079	PrimaryExpression	' '		641035	0					
ANR	641080	ExpressionStatement	spacePadNum ++	2735:2:78897:78910	641035	1	True				
ANR	641081	PostIncDecOperationExpression	spacePadNum ++		641035	0					
ANR	641082	Identifier	spacePadNum		641035	0					
ANR	641083	IncDec	++		641035	1					
ANR	641084	IfStatement	if ( maxCodeLength != string :: npos )		641035	2					
ANR	641085	Condition	maxCodeLength != string :: npos	2736:6:78918:78946	641035	0	True				
ANR	641086	EqualityExpression	maxCodeLength != string :: npos		641035	0		!=			
ANR	641087	Identifier	maxCodeLength		641035	0					
ANR	641088	Identifier	string :: npos		641035	1					
ANR	641089	CompoundStatement		8:2:182:182	641035	1					
ANR	641090	IfStatement	if ( isOkToSplitFormattedLine ( ) )		641035	0					
ANR	641091	Condition	isOkToSplitFormattedLine ( )	2739:7:79021:79046	641035	0	True				
ANR	641092	CallExpression	isOkToSplitFormattedLine ( )		641035	0					
ANR	641093	Callee	isOkToSplitFormattedLine		641035	0					
ANR	641094	Identifier	isOkToSplitFormattedLine		641035	0					
ANR	641095	ArgumentList			641035	1					
ANR	641096	ExpressionStatement	updateFormattedLineSplitPoints ( ' ' )	2740:4:79053:79088	641035	1	True				
ANR	641097	CallExpression	updateFormattedLineSplitPoints ( ' ' )		641035	0					
ANR	641098	Callee	updateFormattedLineSplitPoints		641035	0					
ANR	641099	Identifier	updateFormattedLineSplitPoints		641035	0					
ANR	641100	ArgumentList	' '		641035	1					
ANR	641101	Argument	' '		641035	0					
ANR	641102	PrimaryExpression	' '		641035	0					
ANR	641103	IfStatement	if ( formattedLine . length ( ) > maxCodeLength )		641035	1					
ANR	641104	Condition	formattedLine . length ( ) > maxCodeLength	2741:7:79097:79134	641035	0	True				
ANR	641105	RelationalExpression	formattedLine . length ( ) > maxCodeLength		641035	0		>			
ANR	641106	CallExpression	formattedLine . length ( )		641035	0					
ANR	641107	Callee	formattedLine . length		641035	0					
ANR	641108	MemberAccess	formattedLine . length		641035	0					
ANR	641109	Identifier	formattedLine		641035	0					
ANR	641110	Identifier	length		641035	1					
ANR	641111	ArgumentList			641035	1					
ANR	641112	Identifier	maxCodeLength		641035	1					
ANR	641113	ExpressionStatement	testForTimeToSplitFormattedLine ( )	2742:4:79141:79174	641035	1	True				
ANR	641114	CallExpression	testForTimeToSplitFormattedLine ( )		641035	0					
ANR	641115	Callee	testForTimeToSplitFormattedLine		641035	0					
ANR	641116	Identifier	testForTimeToSplitFormattedLine		641035	0					
ANR	641117	ArgumentList			641035	1					
ANR	641118	ReturnType	void		641035	1					
ANR	641119	Identifier	ASFormatter :: appendSpacePad		641035	2					
ANR	641120	ParameterList			641035	3					
ANR	641121	CFGEntryNode	ENTRY		641035		True				
ANR	641122	CFGExitNode	EXIT		641035		True				
ANR	641123	Symbol	formattedLine		641035						
ANR	641124	Symbol	* formattedLine		641035						
ANR	641125	Symbol	len		641035						
ANR	641126	Symbol	formattedLine . length		641035						
ANR	641127	Symbol	spacePadNum		641035						
ANR	641128	Symbol	maxCodeLength		641035						
ANR	641129	Symbol	string :: npos		641035						
ANR	641130	Symbol	isOkToSplitFormattedLine		641035						
ANR	641131	Symbol	isWhiteSpace		641035						
ANR	641132	Symbol	* len		641035						
ANR	641133	Function	ASFormatter :: appendSpaceAfter	2751:0:79307:79769							
ANR	641134	FunctionDef	ASFormatter :: appendSpaceAfter ()		641133	0					
ANR	641135	CompoundStatement		2752:0:79344:79769	641133	0					
ANR	641136	IdentifierDeclStatement	int len = currentLine . length ( ) ;	2753:1:79347:79377	641133	0	True				
ANR	641137	IdentifierDecl	len = currentLine . length ( )		641133	0					
ANR	641138	IdentifierDeclType	int		641133	0					
ANR	641139	Identifier	len		641133	1					
ANR	641140	AssignmentExpression	len = currentLine . length ( )		641133	2		=			
ANR	641141	Identifier	len		641133	0					
ANR	641142	CallExpression	currentLine . length ( )		641133	1					
ANR	641143	Callee	currentLine . length		641133	0					
ANR	641144	MemberAccess	currentLine . length		641133	0					
ANR	641145	Identifier	currentLine		641133	0					
ANR	641146	Identifier	length		641133	1					
ANR	641147	ArgumentList			641133	1					
ANR	641148	IfStatement	if ( charNum + 1 < len && ! isWhiteSpace ( currentLine [ charNum + 1 ] ) )		641133	1					
ANR	641149	Condition	charNum + 1 < len && ! isWhiteSpace ( currentLine [ charNum + 1 ] )	2754:5:79384:79443	641133	0	True				
ANR	641150	AndExpression	charNum + 1 < len && ! isWhiteSpace ( currentLine [ charNum + 1 ] )		641133	0		&&			
ANR	641151	RelationalExpression	charNum + 1 < len		641133	0		<			
ANR	641152	AdditiveExpression	charNum + 1		641133	0		+			
ANR	641153	Identifier	charNum		641133	0					
ANR	641154	PrimaryExpression	1		641133	1					
ANR	641155	Identifier	len		641133	1					
ANR	641156	UnaryOperationExpression	! isWhiteSpace ( currentLine [ charNum + 1 ] )		641133	1					
ANR	641157	UnaryOperator	!		641133	0					
ANR	641158	CallExpression	isWhiteSpace ( currentLine [ charNum + 1 ] )		641133	1					
ANR	641159	Callee	isWhiteSpace		641133	0					
ANR	641160	Identifier	isWhiteSpace		641133	0					
ANR	641161	ArgumentList	currentLine [ charNum + 1 ]		641133	1					
ANR	641162	Argument	currentLine [ charNum + 1 ]		641133	0					
ANR	641163	ArrayIndexing	currentLine [ charNum + 1 ]		641133	0					
ANR	641164	Identifier	currentLine		641133	0					
ANR	641165	AdditiveExpression	charNum + 1		641133	1		+			
ANR	641166	Identifier	charNum		641133	0					
ANR	641167	PrimaryExpression	1		641133	1					
ANR	641168	CompoundStatement		4:1:102:102	641133	1					
ANR	641169	ExpressionStatement	"formattedLine . append ( 1 , ' ' )"	2756:2:79451:79479	641133	0	True				
ANR	641170	CallExpression	"formattedLine . append ( 1 , ' ' )"		641133	0					
ANR	641171	Callee	formattedLine . append		641133	0					
ANR	641172	MemberAccess	formattedLine . append		641133	0					
ANR	641173	Identifier	formattedLine		641133	0					
ANR	641174	Identifier	append		641133	1					
ANR	641175	ArgumentList	1		641133	1					
ANR	641176	Argument	1		641133	0					
ANR	641177	PrimaryExpression	1		641133	0					
ANR	641178	Argument	' '		641133	1					
ANR	641179	PrimaryExpression	' '		641133	0					
ANR	641180	ExpressionStatement	spacePadNum ++	2757:2:79483:79496	641133	1	True				
ANR	641181	PostIncDecOperationExpression	spacePadNum ++		641133	0					
ANR	641182	Identifier	spacePadNum		641133	0					
ANR	641183	IncDec	++		641133	1					
ANR	641184	IfStatement	if ( maxCodeLength != string :: npos )		641133	2					
ANR	641185	Condition	maxCodeLength != string :: npos	2758:6:79504:79532	641133	0	True				
ANR	641186	EqualityExpression	maxCodeLength != string :: npos		641133	0		!=			
ANR	641187	Identifier	maxCodeLength		641133	0					
ANR	641188	Identifier	string :: npos		641133	1					
ANR	641189	CompoundStatement		8:2:192:192	641133	1					
ANR	641190	IfStatement	if ( isOkToSplitFormattedLine ( ) )		641133	0					
ANR	641191	Condition	isOkToSplitFormattedLine ( )	2761:7:79607:79632	641133	0	True				
ANR	641192	CallExpression	isOkToSplitFormattedLine ( )		641133	0					
ANR	641193	Callee	isOkToSplitFormattedLine		641133	0					
ANR	641194	Identifier	isOkToSplitFormattedLine		641133	0					
ANR	641195	ArgumentList			641133	1					
ANR	641196	ExpressionStatement	updateFormattedLineSplitPoints ( ' ' )	2762:4:79639:79674	641133	1	True				
ANR	641197	CallExpression	updateFormattedLineSplitPoints ( ' ' )		641133	0					
ANR	641198	Callee	updateFormattedLineSplitPoints		641133	0					
ANR	641199	Identifier	updateFormattedLineSplitPoints		641133	0					
ANR	641200	ArgumentList	' '		641133	1					
ANR	641201	Argument	' '		641133	0					
ANR	641202	PrimaryExpression	' '		641133	0					
ANR	641203	IfStatement	if ( formattedLine . length ( ) > maxCodeLength )		641133	1					
ANR	641204	Condition	formattedLine . length ( ) > maxCodeLength	2763:7:79683:79720	641133	0	True				
ANR	641205	RelationalExpression	formattedLine . length ( ) > maxCodeLength		641133	0		>			
ANR	641206	CallExpression	formattedLine . length ( )		641133	0					
ANR	641207	Callee	formattedLine . length		641133	0					
ANR	641208	MemberAccess	formattedLine . length		641133	0					
ANR	641209	Identifier	formattedLine		641133	0					
ANR	641210	Identifier	length		641133	1					
ANR	641211	ArgumentList			641133	1					
ANR	641212	Identifier	maxCodeLength		641133	1					
ANR	641213	ExpressionStatement	testForTimeToSplitFormattedLine ( )	2764:4:79727:79760	641133	1	True				
ANR	641214	CallExpression	testForTimeToSplitFormattedLine ( )		641133	0					
ANR	641215	Callee	testForTimeToSplitFormattedLine		641133	0					
ANR	641216	Identifier	testForTimeToSplitFormattedLine		641133	0					
ANR	641217	ArgumentList			641133	1					
ANR	641218	ReturnType	void		641133	1					
ANR	641219	Identifier	ASFormatter :: appendSpaceAfter		641133	2					
ANR	641220	ParameterList			641133	3					
ANR	641221	CFGEntryNode	ENTRY		641133		True				
ANR	641222	CFGExitNode	EXIT		641133		True				
ANR	641223	Symbol	spacePadNum		641133						
ANR	641224	Symbol	maxCodeLength		641133						
ANR	641225	Symbol	string :: npos		641133						
ANR	641226	Symbol	isOkToSplitFormattedLine		641133						
ANR	641227	Symbol	isWhiteSpace		641133						
ANR	641228	Symbol	formattedLine		641133						
ANR	641229	Symbol	* currentLine		641133						
ANR	641230	Symbol	len		641133						
ANR	641231	Symbol	currentLine . length		641133						
ANR	641232	Symbol	* charNum		641133						
ANR	641233	Symbol	formattedLine . length		641133						
ANR	641234	Symbol	charNum		641133						
ANR	641235	Symbol	currentLine		641133						
ANR	641236	Function	ASFormatter :: breakLine	2772:0:79829:80474							
ANR	641237	FunctionDef	ASFormatter :: breakLine (bool isSplitLine)		641236	0					
ANR	641238	CompoundStatement		2773:0:79885:80474	641236	0					
ANR	641239	ExpressionStatement	isLineReady = true	2774:1:79888:79906	641236	0	True				
ANR	641240	AssignmentExpression	isLineReady = true		641236	0		=			
ANR	641241	Identifier	isLineReady		641236	0					
ANR	641242	Identifier	true		641236	1					
ANR	641243	ExpressionStatement	isInLineBreak = false	2775:1:79909:79930	641236	1	True				
ANR	641244	AssignmentExpression	isInLineBreak = false		641236	0		=			
ANR	641245	Identifier	isInLineBreak		641236	0					
ANR	641246	Identifier	false		641236	1					
ANR	641247	ExpressionStatement	spacePadNum = nextLineSpacePadNum	2776:1:79933:79966	641236	2	True				
ANR	641248	AssignmentExpression	spacePadNum = nextLineSpacePadNum		641236	0		=			
ANR	641249	Identifier	spacePadNum		641236	0					
ANR	641250	Identifier	nextLineSpacePadNum		641236	1					
ANR	641251	ExpressionStatement	nextLineSpacePadNum = 0	2777:1:79969:79992	641236	3	True				
ANR	641252	AssignmentExpression	nextLineSpacePadNum = 0		641236	0		=			
ANR	641253	Identifier	nextLineSpacePadNum		641236	0					
ANR	641254	PrimaryExpression	0		641236	1					
ANR	641255	ExpressionStatement	readyFormattedLine = formattedLine	2778:1:79995:80029	641236	4	True				
ANR	641256	AssignmentExpression	readyFormattedLine = formattedLine		641236	0		=			
ANR	641257	Identifier	readyFormattedLine		641236	0					
ANR	641258	Identifier	formattedLine		641236	1					
ANR	641259	ExpressionStatement	formattedLine . erase ( )	2779:1:80032:80053	641236	5	True				
ANR	641260	CallExpression	formattedLine . erase ( )		641236	0					
ANR	641261	Callee	formattedLine . erase		641236	0					
ANR	641262	MemberAccess	formattedLine . erase		641236	0					
ANR	641263	Identifier	formattedLine		641236	0					
ANR	641264	Identifier	erase		641236	1					
ANR	641265	ArgumentList			641236	1					
ANR	641266	ExpressionStatement	prependEmptyLine = isPrependPostBlockEmptyLineRequested	2781:1:80110:80165	641236	6	True				
ANR	641267	AssignmentExpression	prependEmptyLine = isPrependPostBlockEmptyLineRequested		641236	0		=			
ANR	641268	Identifier	prependEmptyLine		641236	0					
ANR	641269	Identifier	isPrependPostBlockEmptyLineRequested		641236	1					
ANR	641270	IfStatement	if ( ! isSplitLine )		641236	7					
ANR	641271	Condition	! isSplitLine	2783:5:80173:80184	641236	0	True				
ANR	641272	UnaryOperationExpression	! isSplitLine		641236	0					
ANR	641273	UnaryOperator	!		641236	0					
ANR	641274	Identifier	isSplitLine		641236	1					
ANR	641275	CompoundStatement		12:1:302:302	641236	1					
ANR	641276	ExpressionStatement	formattedLineCommentNum = string :: npos	2785:2:80192:80230	641236	0	True				
ANR	641277	AssignmentExpression	formattedLineCommentNum = string :: npos		641236	0		=			
ANR	641278	Identifier	formattedLineCommentNum		641236	0					
ANR	641279	Identifier	string :: npos		641236	1					
ANR	641280	ExpressionStatement	clearFormattedLineSplitPoints ( )	2786:2:80234:80265	641236	1	True				
ANR	641281	CallExpression	clearFormattedLineSplitPoints ( )		641236	0					
ANR	641282	Callee	clearFormattedLineSplitPoints		641236	0					
ANR	641283	Identifier	clearFormattedLineSplitPoints		641236	0					
ANR	641284	ArgumentList			641236	1					
ANR	641285	IfStatement	if ( isAppendPostBlockEmptyLineRequested )		641236	2					
ANR	641286	Condition	isAppendPostBlockEmptyLineRequested	2788:6:80274:80308	641236	0	True				
ANR	641287	Identifier	isAppendPostBlockEmptyLineRequested		641236	0					
ANR	641288	CompoundStatement		17:2:427:427	641236	1					
ANR	641289	ExpressionStatement	isAppendPostBlockEmptyLineRequested = false	2790:3:80318:80361	641236	0	True				
ANR	641290	AssignmentExpression	isAppendPostBlockEmptyLineRequested = false		641236	0		=			
ANR	641291	Identifier	isAppendPostBlockEmptyLineRequested		641236	0					
ANR	641292	Identifier	false		641236	1					
ANR	641293	ExpressionStatement	isPrependPostBlockEmptyLineRequested = true	2791:3:80366:80409	641236	1	True				
ANR	641294	AssignmentExpression	isPrependPostBlockEmptyLineRequested = true		641236	0		=			
ANR	641295	Identifier	isPrependPostBlockEmptyLineRequested		641236	0					
ANR	641296	Identifier	true		641236	1					
ANR	641297	ElseStatement	else		641236	0					
ANR	641298	ExpressionStatement	isPrependPostBlockEmptyLineRequested = false	2794:3:80425:80469	641236	0	True				
ANR	641299	AssignmentExpression	isPrependPostBlockEmptyLineRequested = false		641236	0		=			
ANR	641300	Identifier	isPrependPostBlockEmptyLineRequested		641236	0					
ANR	641301	Identifier	false		641236	1					
ANR	641302	ReturnType	void		641236	1					
ANR	641303	Identifier	ASFormatter :: breakLine		641236	2					
ANR	641304	ParameterList	bool isSplitLine		641236	3					
ANR	641305	Parameter	bool isSplitLine	2772:28:79857:79872	641236	0	True				
ANR	641306	ParameterType	bool		641236	0					
ANR	641307	Identifier	isSplitLine		641236	1					
ANR	641308	CFGEntryNode	ENTRY		641236		True				
ANR	641309	CFGExitNode	EXIT		641236		True				
ANR	641310	Symbol	formattedLineCommentNum		641236						
ANR	641311	Symbol	prependEmptyLine		641236						
ANR	641312	Symbol	readyFormattedLine		641236						
ANR	641313	Symbol	isAppendPostBlockEmptyLineRequested		641236						
ANR	641314	Symbol	isInLineBreak		641236						
ANR	641315	Symbol	spacePadNum		641236						
ANR	641316	Symbol	false		641236						
ANR	641317	Symbol	string :: npos		641236						
ANR	641318	Symbol	isPrependPostBlockEmptyLineRequested		641236						
ANR	641319	Symbol	formattedLine		641236						
ANR	641320	Symbol	nextLineSpacePadNum		641236						
ANR	641321	Symbol	isLineReady		641236						
ANR	641322	Symbol	isSplitLine		641236						
ANR	641323	Symbol	true		641236						
ANR	641324	Function	ASFormatter :: getBraceType	2809:0:80811:83733							
ANR	641325	FunctionDef	ASFormatter :: getBraceType ()		641324	0					
ANR	641326	CompoundStatement		2810:0:80849:83733	641324	0					
ANR	641327	ExpressionStatement	assert ( currentChar == '{' )	2811:1:80852:80878	641324	0	True				
ANR	641328	CallExpression	assert ( currentChar == '{' )		641324	0					
ANR	641329	Callee	assert		641324	0					
ANR	641330	Identifier	assert		641324	0					
ANR	641331	ArgumentList	currentChar == '{'		641324	1					
ANR	641332	Argument	currentChar == '{'		641324	0					
ANR	641333	EqualityExpression	currentChar == '{'		641324	0		==			
ANR	641334	Identifier	currentChar		641324	0					
ANR	641335	PrimaryExpression	'{'		641324	1					
ANR	641336	IdentifierDeclStatement	BraceType returnVal = NULL_TYPE ;	2813:1:80882:80913	641324	1	True				
ANR	641337	IdentifierDecl	returnVal = NULL_TYPE		641324	0					
ANR	641338	IdentifierDeclType	BraceType		641324	0					
ANR	641339	Identifier	returnVal		641324	1					
ANR	641340	AssignmentExpression	returnVal = NULL_TYPE		641324	2		=			
ANR	641341	Identifier	NULL_TYPE		641324	0					
ANR	641342	Identifier	NULL_TYPE		641324	1					
ANR	641343	IfStatement	"if ( ( previousNonWSChar == '=' || isBraceType ( braceTypeStack -> back ( ) , ARRAY_TYPE ) ) && previousCommandChar != ')' && ! isNonParenHeader )"		641324	2					
ANR	641344	Condition	"( previousNonWSChar == '=' || isBraceType ( braceTypeStack -> back ( ) , ARRAY_TYPE ) ) && previousCommandChar != ')' && ! isNonParenHeader"	2815:5:80921:81075	641324	0	True				
ANR	641345	AndExpression	"( previousNonWSChar == '=' || isBraceType ( braceTypeStack -> back ( ) , ARRAY_TYPE ) ) && previousCommandChar != ')' && ! isNonParenHeader"		641324	0		&&			
ANR	641346	OrExpression	"previousNonWSChar == '=' || isBraceType ( braceTypeStack -> back ( ) , ARRAY_TYPE )"		641324	0		||			
ANR	641347	EqualityExpression	previousNonWSChar == '='		641324	0		==			
ANR	641348	Identifier	previousNonWSChar		641324	0					
ANR	641349	PrimaryExpression	'='		641324	1					
ANR	641350	CallExpression	"isBraceType ( braceTypeStack -> back ( ) , ARRAY_TYPE )"		641324	1					
ANR	641351	Callee	isBraceType		641324	0					
ANR	641352	Identifier	isBraceType		641324	0					
ANR	641353	ArgumentList	braceTypeStack -> back ( )		641324	1					
ANR	641354	Argument	braceTypeStack -> back ( )		641324	0					
ANR	641355	CallExpression	braceTypeStack -> back ( )		641324	0					
ANR	641356	Callee	braceTypeStack -> back		641324	0					
ANR	641357	PtrMemberAccess	braceTypeStack -> back		641324	0					
ANR	641358	Identifier	braceTypeStack		641324	0					
ANR	641359	Identifier	back		641324	1					
ANR	641360	ArgumentList			641324	1					
ANR	641361	Argument	ARRAY_TYPE		641324	1					
ANR	641362	Identifier	ARRAY_TYPE		641324	0					
ANR	641363	AndExpression	previousCommandChar != ')' && ! isNonParenHeader		641324	1		&&			
ANR	641364	EqualityExpression	previousCommandChar != ')'		641324	0		!=			
ANR	641365	Identifier	previousCommandChar		641324	0					
ANR	641366	PrimaryExpression	')'		641324	1					
ANR	641367	UnaryOperationExpression	! isNonParenHeader		641324	1					
ANR	641368	UnaryOperator	!		641324	0					
ANR	641369	Identifier	isNonParenHeader		641324	1					
ANR	641370	ExpressionStatement	returnVal = ARRAY_TYPE	2819:2:81080:81102	641324	1	True				
ANR	641371	AssignmentExpression	returnVal = ARRAY_TYPE		641324	0		=			
ANR	641372	Identifier	returnVal		641324	0					
ANR	641373	Identifier	ARRAY_TYPE		641324	1					
ANR	641374	ElseStatement	else		641324	0					
ANR	641375	IfStatement	if ( foundPreDefinitionHeader && previousCommandChar != ')' )		641324	0					
ANR	641376	Condition	foundPreDefinitionHeader && previousCommandChar != ')'	2820:10:81114:81167	641324	0	True				
ANR	641377	AndExpression	foundPreDefinitionHeader && previousCommandChar != ')'		641324	0		&&			
ANR	641378	Identifier	foundPreDefinitionHeader		641324	0					
ANR	641379	EqualityExpression	previousCommandChar != ')'		641324	1		!=			
ANR	641380	Identifier	previousCommandChar		641324	0					
ANR	641381	PrimaryExpression	')'		641324	1					
ANR	641382	CompoundStatement		12:1:321:321	641324	1					
ANR	641383	ExpressionStatement	returnVal = DEFINITION_TYPE	2822:2:81175:81202	641324	0	True				
ANR	641384	AssignmentExpression	returnVal = DEFINITION_TYPE		641324	0		=			
ANR	641385	Identifier	returnVal		641324	0					
ANR	641386	Identifier	DEFINITION_TYPE		641324	1					
ANR	641387	IfStatement	if ( foundNamespaceHeader )		641324	1					
ANR	641388	Condition	foundNamespaceHeader	2823:6:81210:81229	641324	0	True				
ANR	641389	Identifier	foundNamespaceHeader		641324	0					
ANR	641390	ExpressionStatement	returnVal = ( BraceType ) ( returnVal | NAMESPACE_TYPE )	2824:3:81235:81286	641324	1	True				
ANR	641391	AssignmentExpression	returnVal = ( BraceType ) ( returnVal | NAMESPACE_TYPE )		641324	0		=			
ANR	641392	Identifier	returnVal		641324	0					
ANR	641393	CastExpression	( BraceType ) ( returnVal | NAMESPACE_TYPE )		641324	1					
ANR	641394	CastTarget	BraceType		641324	0					
ANR	641395	InclusiveOrExpression	returnVal | NAMESPACE_TYPE		641324	1		|			
ANR	641396	Identifier	returnVal		641324	0					
ANR	641397	Identifier	NAMESPACE_TYPE		641324	1					
ANR	641398	ElseStatement	else		641324	0					
ANR	641399	IfStatement	if ( foundClassHeader )		641324	0					
ANR	641400	Condition	foundClassHeader	2825:11:81299:81314	641324	0	True				
ANR	641401	Identifier	foundClassHeader		641324	0					
ANR	641402	ExpressionStatement	returnVal = ( BraceType ) ( returnVal | CLASS_TYPE )	2826:3:81320:81367	641324	1	True				
ANR	641403	AssignmentExpression	returnVal = ( BraceType ) ( returnVal | CLASS_TYPE )		641324	0		=			
ANR	641404	Identifier	returnVal		641324	0					
ANR	641405	CastExpression	( BraceType ) ( returnVal | CLASS_TYPE )		641324	1					
ANR	641406	CastTarget	BraceType		641324	0					
ANR	641407	InclusiveOrExpression	returnVal | CLASS_TYPE		641324	1		|			
ANR	641408	Identifier	returnVal		641324	0					
ANR	641409	Identifier	CLASS_TYPE		641324	1					
ANR	641410	ElseStatement	else		641324	0					
ANR	641411	IfStatement	if ( foundStructHeader )		641324	0					
ANR	641412	Condition	foundStructHeader	2827:11:81380:81396	641324	0	True				
ANR	641413	Identifier	foundStructHeader		641324	0					
ANR	641414	ExpressionStatement	returnVal = ( BraceType ) ( returnVal | STRUCT_TYPE )	2828:3:81402:81450	641324	1	True				
ANR	641415	AssignmentExpression	returnVal = ( BraceType ) ( returnVal | STRUCT_TYPE )		641324	0		=			
ANR	641416	Identifier	returnVal		641324	0					
ANR	641417	CastExpression	( BraceType ) ( returnVal | STRUCT_TYPE )		641324	1					
ANR	641418	CastTarget	BraceType		641324	0					
ANR	641419	InclusiveOrExpression	returnVal | STRUCT_TYPE		641324	1		|			
ANR	641420	Identifier	returnVal		641324	0					
ANR	641421	Identifier	STRUCT_TYPE		641324	1					
ANR	641422	ElseStatement	else		641324	0					
ANR	641423	IfStatement	if ( foundInterfaceHeader )		641324	0					
ANR	641424	Condition	foundInterfaceHeader	2829:11:81463:81482	641324	0	True				
ANR	641425	Identifier	foundInterfaceHeader		641324	0					
ANR	641426	ExpressionStatement	returnVal = ( BraceType ) ( returnVal | INTERFACE_TYPE )	2830:3:81488:81539	641324	1	True				
ANR	641427	AssignmentExpression	returnVal = ( BraceType ) ( returnVal | INTERFACE_TYPE )		641324	0		=			
ANR	641428	Identifier	returnVal		641324	0					
ANR	641429	CastExpression	( BraceType ) ( returnVal | INTERFACE_TYPE )		641324	1					
ANR	641430	CastTarget	BraceType		641324	0					
ANR	641431	InclusiveOrExpression	returnVal | INTERFACE_TYPE		641324	1		|			
ANR	641432	Identifier	returnVal		641324	0					
ANR	641433	Identifier	INTERFACE_TYPE		641324	1					
ANR	641434	ElseStatement	else		641324	0					
ANR	641435	IfStatement	if ( isInEnum )		641324	0					
ANR	641436	Condition	isInEnum	2832:10:81554:81561	641324	0	True				
ANR	641437	Identifier	isInEnum		641324	0					
ANR	641438	CompoundStatement		24:1:715:715	641324	1					
ANR	641439	ExpressionStatement	returnVal = ( BraceType ) ( ARRAY_TYPE | ENUM_TYPE )	2834:2:81569:81616	641324	0	True				
ANR	641440	AssignmentExpression	returnVal = ( BraceType ) ( ARRAY_TYPE | ENUM_TYPE )		641324	0		=			
ANR	641441	Identifier	returnVal		641324	0					
ANR	641442	CastExpression	( BraceType ) ( ARRAY_TYPE | ENUM_TYPE )		641324	1					
ANR	641443	CastTarget	BraceType		641324	0					
ANR	641444	InclusiveOrExpression	ARRAY_TYPE | ENUM_TYPE		641324	1		|			
ANR	641445	Identifier	ARRAY_TYPE		641324	0					
ANR	641446	Identifier	ENUM_TYPE		641324	1					
ANR	641447	ElseStatement	else		641324	0					
ANR	641448	CompoundStatement		29:2:782:1671	641324	0					
ANR	641449	IdentifierDeclStatement	bool isCommandType = ( foundPreCommandHeader || foundPreCommandMacro || ( currentHeader != nullptr && isNonParenHeader ) || ( previousCommandChar == ')' ) || ( previousCommandChar == ':' && ! foundQuestionMark ) || ( previousCommandChar == ';' ) || ( ( previousCommandChar == '{' || previousCommandChar == '}' ) && isPreviousBraceBlockRelated ) || ( isInClassInitializer && ( ! isLegalNameChar ( previousNonWSChar ) || foundPreCommandHeader ) ) || foundTrailingReturnType || isInObjCMethodDefinition || isInObjCInterface || isJavaStaticConstructor || isSharpDelegate ) ;	2838:2:81632:82521	641324	0	True				
ANR	641450	IdentifierDecl	isCommandType = ( foundPreCommandHeader || foundPreCommandMacro || ( currentHeader != nullptr && isNonParenHeader ) || ( previousCommandChar == ')' ) || ( previousCommandChar == ':' && ! foundQuestionMark ) || ( previousCommandChar == ';' ) || ( ( previousCommandChar == '{' || previousCommandChar == '}' ) && isPreviousBraceBlockRelated ) || ( isInClassInitializer && ( ! isLegalNameChar ( previousNonWSChar ) || foundPreCommandHeader ) ) || foundTrailingReturnType || isInObjCMethodDefinition || isInObjCInterface || isJavaStaticConstructor || isSharpDelegate )		641324	0					
ANR	641451	IdentifierDeclType	bool		641324	0					
ANR	641452	Identifier	isCommandType		641324	1					
ANR	641453	AssignmentExpression	isCommandType = ( foundPreCommandHeader || foundPreCommandMacro || ( currentHeader != nullptr && isNonParenHeader ) || ( previousCommandChar == ')' ) || ( previousCommandChar == ':' && ! foundQuestionMark ) || ( previousCommandChar == ';' ) || ( ( previousCommandChar == '{' || previousCommandChar == '}' ) && isPreviousBraceBlockRelated ) || ( isInClassInitializer && ( ! isLegalNameChar ( previousNonWSChar ) || foundPreCommandHeader ) ) || foundTrailingReturnType || isInObjCMethodDefinition || isInObjCInterface || isJavaStaticConstructor || isSharpDelegate )		641324	2		=			
ANR	641454	Identifier	isCommandType		641324	0					
ANR	641455	OrExpression	foundPreCommandHeader || foundPreCommandMacro || ( currentHeader != nullptr && isNonParenHeader ) || ( previousCommandChar == ')' ) || ( previousCommandChar == ':' && ! foundQuestionMark ) || ( previousCommandChar == ';' ) || ( ( previousCommandChar == '{' || previousCommandChar == '}' ) && isPreviousBraceBlockRelated ) || ( isInClassInitializer && ( ! isLegalNameChar ( previousNonWSChar ) || foundPreCommandHeader ) ) || foundTrailingReturnType || isInObjCMethodDefinition || isInObjCInterface || isJavaStaticConstructor || isSharpDelegate		641324	1		||			
ANR	641456	Identifier	foundPreCommandHeader		641324	0					
ANR	641457	OrExpression	foundPreCommandMacro || ( currentHeader != nullptr && isNonParenHeader ) || ( previousCommandChar == ')' ) || ( previousCommandChar == ':' && ! foundQuestionMark ) || ( previousCommandChar == ';' ) || ( ( previousCommandChar == '{' || previousCommandChar == '}' ) && isPreviousBraceBlockRelated ) || ( isInClassInitializer && ( ! isLegalNameChar ( previousNonWSChar ) || foundPreCommandHeader ) ) || foundTrailingReturnType || isInObjCMethodDefinition || isInObjCInterface || isJavaStaticConstructor || isSharpDelegate		641324	1		||			
ANR	641458	Identifier	foundPreCommandMacro		641324	0					
ANR	641459	OrExpression	( currentHeader != nullptr && isNonParenHeader ) || ( previousCommandChar == ')' ) || ( previousCommandChar == ':' && ! foundQuestionMark ) || ( previousCommandChar == ';' ) || ( ( previousCommandChar == '{' || previousCommandChar == '}' ) && isPreviousBraceBlockRelated ) || ( isInClassInitializer && ( ! isLegalNameChar ( previousNonWSChar ) || foundPreCommandHeader ) ) || foundTrailingReturnType || isInObjCMethodDefinition || isInObjCInterface || isJavaStaticConstructor || isSharpDelegate		641324	1		||			
ANR	641460	AndExpression	currentHeader != nullptr && isNonParenHeader		641324	0		&&			
ANR	641461	EqualityExpression	currentHeader != nullptr		641324	0		!=			
ANR	641462	Identifier	currentHeader		641324	0					
ANR	641463	Identifier	nullptr		641324	1					
ANR	641464	Identifier	isNonParenHeader		641324	1					
ANR	641465	OrExpression	( previousCommandChar == ')' ) || ( previousCommandChar == ':' && ! foundQuestionMark ) || ( previousCommandChar == ';' ) || ( ( previousCommandChar == '{' || previousCommandChar == '}' ) && isPreviousBraceBlockRelated ) || ( isInClassInitializer && ( ! isLegalNameChar ( previousNonWSChar ) || foundPreCommandHeader ) ) || foundTrailingReturnType || isInObjCMethodDefinition || isInObjCInterface || isJavaStaticConstructor || isSharpDelegate		641324	1		||			
ANR	641466	EqualityExpression	previousCommandChar == ')'		641324	0		==			
ANR	641467	Identifier	previousCommandChar		641324	0					
ANR	641468	PrimaryExpression	')'		641324	1					
ANR	641469	OrExpression	( previousCommandChar == ':' && ! foundQuestionMark ) || ( previousCommandChar == ';' ) || ( ( previousCommandChar == '{' || previousCommandChar == '}' ) && isPreviousBraceBlockRelated ) || ( isInClassInitializer && ( ! isLegalNameChar ( previousNonWSChar ) || foundPreCommandHeader ) ) || foundTrailingReturnType || isInObjCMethodDefinition || isInObjCInterface || isJavaStaticConstructor || isSharpDelegate		641324	1		||			
ANR	641470	AndExpression	previousCommandChar == ':' && ! foundQuestionMark		641324	0		&&			
ANR	641471	EqualityExpression	previousCommandChar == ':'		641324	0		==			
ANR	641472	Identifier	previousCommandChar		641324	0					
ANR	641473	PrimaryExpression	':'		641324	1					
ANR	641474	UnaryOperationExpression	! foundQuestionMark		641324	1					
ANR	641475	UnaryOperator	!		641324	0					
ANR	641476	Identifier	foundQuestionMark		641324	1					
ANR	641477	OrExpression	( previousCommandChar == ';' ) || ( ( previousCommandChar == '{' || previousCommandChar == '}' ) && isPreviousBraceBlockRelated ) || ( isInClassInitializer && ( ! isLegalNameChar ( previousNonWSChar ) || foundPreCommandHeader ) ) || foundTrailingReturnType || isInObjCMethodDefinition || isInObjCInterface || isJavaStaticConstructor || isSharpDelegate		641324	1		||			
ANR	641478	EqualityExpression	previousCommandChar == ';'		641324	0		==			
ANR	641479	Identifier	previousCommandChar		641324	0					
ANR	641480	PrimaryExpression	';'		641324	1					
ANR	641481	OrExpression	( ( previousCommandChar == '{' || previousCommandChar == '}' ) && isPreviousBraceBlockRelated ) || ( isInClassInitializer && ( ! isLegalNameChar ( previousNonWSChar ) || foundPreCommandHeader ) ) || foundTrailingReturnType || isInObjCMethodDefinition || isInObjCInterface || isJavaStaticConstructor || isSharpDelegate		641324	1		||			
ANR	641482	AndExpression	( previousCommandChar == '{' || previousCommandChar == '}' ) && isPreviousBraceBlockRelated		641324	0		&&			
ANR	641483	OrExpression	previousCommandChar == '{' || previousCommandChar == '}'		641324	0		||			
ANR	641484	EqualityExpression	previousCommandChar == '{'		641324	0		==			
ANR	641485	Identifier	previousCommandChar		641324	0					
ANR	641486	PrimaryExpression	'{'		641324	1					
ANR	641487	EqualityExpression	previousCommandChar == '}'		641324	1		==			
ANR	641488	Identifier	previousCommandChar		641324	0					
ANR	641489	PrimaryExpression	'}'		641324	1					
ANR	641490	Identifier	isPreviousBraceBlockRelated		641324	1					
ANR	641491	OrExpression	( isInClassInitializer && ( ! isLegalNameChar ( previousNonWSChar ) || foundPreCommandHeader ) ) || foundTrailingReturnType || isInObjCMethodDefinition || isInObjCInterface || isJavaStaticConstructor || isSharpDelegate		641324	1		||			
ANR	641492	AndExpression	isInClassInitializer && ( ! isLegalNameChar ( previousNonWSChar ) || foundPreCommandHeader )		641324	0		&&			
ANR	641493	Identifier	isInClassInitializer		641324	0					
ANR	641494	OrExpression	! isLegalNameChar ( previousNonWSChar ) || foundPreCommandHeader		641324	1		||			
ANR	641495	UnaryOperationExpression	! isLegalNameChar ( previousNonWSChar )		641324	0					
ANR	641496	UnaryOperator	!		641324	0					
ANR	641497	CallExpression	isLegalNameChar ( previousNonWSChar )		641324	1					
ANR	641498	Callee	isLegalNameChar		641324	0					
ANR	641499	Identifier	isLegalNameChar		641324	0					
ANR	641500	ArgumentList	previousNonWSChar		641324	1					
ANR	641501	Argument	previousNonWSChar		641324	0					
ANR	641502	Identifier	previousNonWSChar		641324	0					
ANR	641503	Identifier	foundPreCommandHeader		641324	1					
ANR	641504	OrExpression	foundTrailingReturnType || isInObjCMethodDefinition || isInObjCInterface || isJavaStaticConstructor || isSharpDelegate		641324	1		||			
ANR	641505	Identifier	foundTrailingReturnType		641324	0					
ANR	641506	OrExpression	isInObjCMethodDefinition || isInObjCInterface || isJavaStaticConstructor || isSharpDelegate		641324	1		||			
ANR	641507	Identifier	isInObjCMethodDefinition		641324	0					
ANR	641508	OrExpression	isInObjCInterface || isJavaStaticConstructor || isSharpDelegate		641324	1		||			
ANR	641509	Identifier	isInObjCInterface		641324	0					
ANR	641510	OrExpression	isJavaStaticConstructor || isSharpDelegate		641324	1		||			
ANR	641511	Identifier	isJavaStaticConstructor		641324	0					
ANR	641512	Identifier	isSharpDelegate		641324	1					
ANR	641513	IfStatement	if ( ! isCommandType && isSharpStyle ( ) && isNextWordSharpNonParenHeader ( charNum + 1 ) )		641324	1					
ANR	641514	Condition	! isCommandType && isSharpStyle ( ) && isNextWordSharpNonParenHeader ( charNum + 1 )	2855:6:82614:82691	641324	0	True				
ANR	641515	AndExpression	! isCommandType && isSharpStyle ( ) && isNextWordSharpNonParenHeader ( charNum + 1 )		641324	0		&&			
ANR	641516	UnaryOperationExpression	! isCommandType		641324	0					
ANR	641517	UnaryOperator	!		641324	0					
ANR	641518	Identifier	isCommandType		641324	1					
ANR	641519	AndExpression	isSharpStyle ( ) && isNextWordSharpNonParenHeader ( charNum + 1 )		641324	1		&&			
ANR	641520	CallExpression	isSharpStyle ( )		641324	0					
ANR	641521	Callee	isSharpStyle		641324	0					
ANR	641522	Identifier	isSharpStyle		641324	0					
ANR	641523	ArgumentList			641324	1					
ANR	641524	CallExpression	isNextWordSharpNonParenHeader ( charNum + 1 )		641324	1					
ANR	641525	Callee	isNextWordSharpNonParenHeader		641324	0					
ANR	641526	Identifier	isNextWordSharpNonParenHeader		641324	0					
ANR	641527	ArgumentList	charNum + 1		641324	1					
ANR	641528	Argument	charNum + 1		641324	0					
ANR	641529	AdditiveExpression	charNum + 1		641324	0		+			
ANR	641530	Identifier	charNum		641324	0					
ANR	641531	PrimaryExpression	1		641324	1					
ANR	641532	CompoundStatement		47:2:1846:1846	641324	1					
ANR	641533	ExpressionStatement	isCommandType = true	2857:3:82701:82721	641324	0	True				
ANR	641534	AssignmentExpression	isCommandType = true		641324	0		=			
ANR	641535	Identifier	isCommandType		641324	0					
ANR	641536	Identifier	true		641324	1					
ANR	641537	ExpressionStatement	isSharpAccessor = true	2858:3:82726:82748	641324	1	True				
ANR	641538	AssignmentExpression	isSharpAccessor = true		641324	0		=			
ANR	641539	Identifier	isSharpAccessor		641324	0					
ANR	641540	Identifier	true		641324	1					
ANR	641541	IfStatement	if ( isInExternC )		641324	2					
ANR	641542	Condition	isInExternC	2861:6:82761:82771	641324	0	True				
ANR	641543	Identifier	isInExternC		641324	0					
ANR	641544	ExpressionStatement	returnVal = ( isCommandType ? COMMAND_TYPE : EXTERN_TYPE )	2862:3:82777:82833	641324	1	True				
ANR	641545	AssignmentExpression	returnVal = ( isCommandType ? COMMAND_TYPE : EXTERN_TYPE )		641324	0		=			
ANR	641546	Identifier	returnVal		641324	0					
ANR	641547	ConditionalExpression	isCommandType ? COMMAND_TYPE : EXTERN_TYPE		641324	1					
ANR	641548	Condition	isCommandType		641324	0					
ANR	641549	Identifier	isCommandType		641324	0					
ANR	641550	Identifier	COMMAND_TYPE		641324	1					
ANR	641551	Identifier	EXTERN_TYPE		641324	2					
ANR	641552	ElseStatement	else		641324	0					
ANR	641553	ExpressionStatement	returnVal = ( isCommandType ? COMMAND_TYPE : ARRAY_TYPE )	2864:3:82845:82900	641324	0	True				
ANR	641554	AssignmentExpression	returnVal = ( isCommandType ? COMMAND_TYPE : ARRAY_TYPE )		641324	0		=			
ANR	641555	Identifier	returnVal		641324	0					
ANR	641556	ConditionalExpression	isCommandType ? COMMAND_TYPE : ARRAY_TYPE		641324	1					
ANR	641557	Condition	isCommandType		641324	0					
ANR	641558	Identifier	isCommandType		641324	0					
ANR	641559	Identifier	COMMAND_TYPE		641324	1					
ANR	641560	Identifier	ARRAY_TYPE		641324	2					
ANR	641561	IdentifierDeclStatement	"int foundOneLineBlock = isOneLineBlockReached ( currentLine , charNum ) ;"	2867:1:82907:82974	641324	3	True				
ANR	641562	IdentifierDecl	"foundOneLineBlock = isOneLineBlockReached ( currentLine , charNum )"		641324	0					
ANR	641563	IdentifierDeclType	int		641324	0					
ANR	641564	Identifier	foundOneLineBlock		641324	1					
ANR	641565	AssignmentExpression	"foundOneLineBlock = isOneLineBlockReached ( currentLine , charNum )"		641324	2		=			
ANR	641566	Identifier	foundOneLineBlock		641324	0					
ANR	641567	CallExpression	"isOneLineBlockReached ( currentLine , charNum )"		641324	1					
ANR	641568	Callee	isOneLineBlockReached		641324	0					
ANR	641569	Identifier	isOneLineBlockReached		641324	0					
ANR	641570	ArgumentList	currentLine		641324	1					
ANR	641571	Argument	currentLine		641324	0					
ANR	641572	Identifier	currentLine		641324	0					
ANR	641573	Argument	charNum		641324	1					
ANR	641574	Identifier	charNum		641324	0					
ANR	641575	IfStatement	if ( foundOneLineBlock == 2 && returnVal == COMMAND_TYPE )		641324	4					
ANR	641576	Condition	foundOneLineBlock == 2 && returnVal == COMMAND_TYPE	2869:5:82982:83032	641324	0	True				
ANR	641577	AndExpression	foundOneLineBlock == 2 && returnVal == COMMAND_TYPE		641324	0		&&			
ANR	641578	EqualityExpression	foundOneLineBlock == 2		641324	0		==			
ANR	641579	Identifier	foundOneLineBlock		641324	0					
ANR	641580	PrimaryExpression	2		641324	1					
ANR	641581	EqualityExpression	returnVal == COMMAND_TYPE		641324	1		==			
ANR	641582	Identifier	returnVal		641324	0					
ANR	641583	Identifier	COMMAND_TYPE		641324	1					
ANR	641584	ExpressionStatement	returnVal = ARRAY_TYPE	2870:2:83037:83059	641324	1	True				
ANR	641585	AssignmentExpression	returnVal = ARRAY_TYPE		641324	0		=			
ANR	641586	Identifier	returnVal		641324	0					
ANR	641587	Identifier	ARRAY_TYPE		641324	1					
ANR	641588	IfStatement	if ( foundOneLineBlock > 0 )		641324	5					
ANR	641589	Condition	foundOneLineBlock > 0	2872:5:83067:83087	641324	0	True				
ANR	641590	RelationalExpression	foundOneLineBlock > 0		641324	0		>			
ANR	641591	Identifier	foundOneLineBlock		641324	0					
ANR	641592	PrimaryExpression	0		641324	1					
ANR	641593	CompoundStatement		64:1:2241:2241	641324	1					
ANR	641594	ExpressionStatement	returnVal = ( BraceType ) ( returnVal | SINGLE_LINE_TYPE )	2874:2:83095:83149	641324	0	True				
ANR	641595	AssignmentExpression	returnVal = ( BraceType ) ( returnVal | SINGLE_LINE_TYPE )		641324	0		=			
ANR	641596	Identifier	returnVal		641324	0					
ANR	641597	CastExpression	( BraceType ) ( returnVal | SINGLE_LINE_TYPE )		641324	1					
ANR	641598	CastTarget	BraceType		641324	0					
ANR	641599	InclusiveOrExpression	returnVal | SINGLE_LINE_TYPE		641324	1		|			
ANR	641600	Identifier	returnVal		641324	0					
ANR	641601	Identifier	SINGLE_LINE_TYPE		641324	1					
ANR	641602	IfStatement	if ( breakCurrentOneLineBlock )		641324	1					
ANR	641603	Condition	breakCurrentOneLineBlock	2875:6:83157:83180	641324	0	True				
ANR	641604	Identifier	breakCurrentOneLineBlock		641324	0					
ANR	641605	ExpressionStatement	returnVal = ( BraceType ) ( returnVal | BREAK_BLOCK_TYPE )	2876:3:83186:83240	641324	1	True				
ANR	641606	AssignmentExpression	returnVal = ( BraceType ) ( returnVal | BREAK_BLOCK_TYPE )		641324	0		=			
ANR	641607	Identifier	returnVal		641324	0					
ANR	641608	CastExpression	( BraceType ) ( returnVal | BREAK_BLOCK_TYPE )		641324	1					
ANR	641609	CastTarget	BraceType		641324	0					
ANR	641610	InclusiveOrExpression	returnVal | BREAK_BLOCK_TYPE		641324	1		|			
ANR	641611	Identifier	returnVal		641324	0					
ANR	641612	Identifier	BREAK_BLOCK_TYPE		641324	1					
ANR	641613	IfStatement	if ( foundOneLineBlock == 3 )		641324	2					
ANR	641614	Condition	foundOneLineBlock == 3	2877:6:83248:83269	641324	0	True				
ANR	641615	EqualityExpression	foundOneLineBlock == 3		641324	0		==			
ANR	641616	Identifier	foundOneLineBlock		641324	0					
ANR	641617	PrimaryExpression	3		641324	1					
ANR	641618	ExpressionStatement	returnVal = ( BraceType ) ( returnVal | EMPTY_BLOCK_TYPE )	2878:3:83275:83328	641324	1	True				
ANR	641619	AssignmentExpression	returnVal = ( BraceType ) ( returnVal | EMPTY_BLOCK_TYPE )		641324	0		=			
ANR	641620	Identifier	returnVal		641324	0					
ANR	641621	CastExpression	( BraceType ) ( returnVal | EMPTY_BLOCK_TYPE )		641324	1					
ANR	641622	CastTarget	BraceType		641324	0					
ANR	641623	InclusiveOrExpression	returnVal | EMPTY_BLOCK_TYPE		641324	1		|			
ANR	641624	Identifier	returnVal		641324	0					
ANR	641625	Identifier	EMPTY_BLOCK_TYPE		641324	1					
ANR	641626	IfStatement	"if ( isBraceType ( returnVal , ARRAY_TYPE ) )"		641324	6					
ANR	641627	Condition	"isBraceType ( returnVal , ARRAY_TYPE )"	2881:5:83339:83372	641324	0	True				
ANR	641628	CallExpression	"isBraceType ( returnVal , ARRAY_TYPE )"		641324	0					
ANR	641629	Callee	isBraceType		641324	0					
ANR	641630	Identifier	isBraceType		641324	0					
ANR	641631	ArgumentList	returnVal		641324	1					
ANR	641632	Argument	returnVal		641324	0					
ANR	641633	Identifier	returnVal		641324	0					
ANR	641634	Argument	ARRAY_TYPE		641324	1					
ANR	641635	Identifier	ARRAY_TYPE		641324	0					
ANR	641636	CompoundStatement		73:1:2526:2526	641324	1					
ANR	641637	IfStatement	if ( isNonInStatementArrayBrace ( ) )		641324	0					
ANR	641638	Condition	isNonInStatementArrayBrace ( )	2883:6:83384:83411	641324	0	True				
ANR	641639	CallExpression	isNonInStatementArrayBrace ( )		641324	0					
ANR	641640	Callee	isNonInStatementArrayBrace		641324	0					
ANR	641641	Identifier	isNonInStatementArrayBrace		641324	0					
ANR	641642	ArgumentList			641324	1					
ANR	641643	CompoundStatement		75:2:2566:2566	641324	1					
ANR	641644	ExpressionStatement	returnVal = ( BraceType ) ( returnVal | ARRAY_NIS_TYPE )	2885:3:83421:83472	641324	0	True				
ANR	641645	AssignmentExpression	returnVal = ( BraceType ) ( returnVal | ARRAY_NIS_TYPE )		641324	0		=			
ANR	641646	Identifier	returnVal		641324	0					
ANR	641647	CastExpression	( BraceType ) ( returnVal | ARRAY_NIS_TYPE )		641324	1					
ANR	641648	CastTarget	BraceType		641324	0					
ANR	641649	InclusiveOrExpression	returnVal | ARRAY_NIS_TYPE		641324	1		|			
ANR	641650	Identifier	returnVal		641324	0					
ANR	641651	Identifier	ARRAY_NIS_TYPE		641324	1					
ANR	641652	ExpressionStatement	isNonInStatementArray = true	2886:3:83477:83505	641324	1	True				
ANR	641653	AssignmentExpression	isNonInStatementArray = true		641324	0		=			
ANR	641654	Identifier	isNonInStatementArray		641324	0					
ANR	641655	Identifier	true		641324	1					
ANR	641656	ExpressionStatement	isImmediatelyPostNonInStmt = false	2887:3:83510:83544	641324	2	True				
ANR	641657	AssignmentExpression	isImmediatelyPostNonInStmt = false		641324	0		=			
ANR	641658	Identifier	isImmediatelyPostNonInStmt		641324	0					
ANR	641659	Identifier	false		641324	1					
ANR	641660	ExpressionStatement	nonInStatementBrace = formattedLine . length ( ) - 1	2888:3:83570:83618	641324	3	True				
ANR	641661	AssignmentExpression	nonInStatementBrace = formattedLine . length ( ) - 1		641324	0		=			
ANR	641662	Identifier	nonInStatementBrace		641324	0					
ANR	641663	AdditiveExpression	formattedLine . length ( ) - 1		641324	1		-			
ANR	641664	CallExpression	formattedLine . length ( )		641324	0					
ANR	641665	Callee	formattedLine . length		641324	0					
ANR	641666	MemberAccess	formattedLine . length		641324	0					
ANR	641667	Identifier	formattedLine		641324	0					
ANR	641668	Identifier	length		641324	1					
ANR	641669	ArgumentList			641324	1					
ANR	641670	PrimaryExpression	1		641324	1					
ANR	641671	IfStatement	if ( isUniformInitializerBrace ( ) )		641324	1					
ANR	641672	Condition	isUniformInitializerBrace ( )	2890:6:83630:83656	641324	0	True				
ANR	641673	CallExpression	isUniformInitializerBrace ( )		641324	0					
ANR	641674	Callee	isUniformInitializerBrace		641324	0					
ANR	641675	Identifier	isUniformInitializerBrace		641324	0					
ANR	641676	ArgumentList			641324	1					
ANR	641677	ExpressionStatement	returnVal = ( BraceType ) ( returnVal | INIT_TYPE )	2891:3:83662:83708	641324	1	True				
ANR	641678	AssignmentExpression	returnVal = ( BraceType ) ( returnVal | INIT_TYPE )		641324	0		=			
ANR	641679	Identifier	returnVal		641324	0					
ANR	641680	CastExpression	( BraceType ) ( returnVal | INIT_TYPE )		641324	1					
ANR	641681	CastTarget	BraceType		641324	0					
ANR	641682	InclusiveOrExpression	returnVal | INIT_TYPE		641324	1		|			
ANR	641683	Identifier	returnVal		641324	0					
ANR	641684	Identifier	INIT_TYPE		641324	1					
ANR	641685	ReturnStatement	return returnVal ;	2894:1:83715:83731	641324	7	True				
ANR	641686	Identifier	returnVal		641324	0					
ANR	641687	ReturnType	BraceType		641324	1					
ANR	641688	Identifier	ASFormatter :: getBraceType		641324	2					
ANR	641689	ParameterList			641324	3					
ANR	641690	CFGEntryNode	ENTRY		641324		True				
ANR	641691	CFGExitNode	EXIT		641324		True				
ANR	641692	Symbol	foundClassHeader		641324						
ANR	641693	Symbol	foundStructHeader		641324						
ANR	641694	Symbol	isNextWordSharpNonParenHeader		641324						
ANR	641695	Symbol	isPreviousBraceBlockRelated		641324						
ANR	641696	Symbol	EMPTY_BLOCK_TYPE		641324						
ANR	641697	Symbol	isLegalNameChar		641324						
ANR	641698	Symbol	STRUCT_TYPE		641324						
ANR	641699	Symbol	returnVal		641324						
ANR	641700	Symbol	ARRAY_NIS_TYPE		641324						
ANR	641701	Symbol	NAMESPACE_TYPE		641324						
ANR	641702	Symbol	isNonInStatementArrayBrace		641324						
ANR	641703	Symbol	isInEnum		641324						
ANR	641704	Symbol	BREAK_BLOCK_TYPE		641324						
ANR	641705	Symbol	isBraceType		641324						
ANR	641706	Symbol	foundInterfaceHeader		641324						
ANR	641707	Symbol	isUniformInitializerBrace		641324						
ANR	641708	Symbol	CLASS_TYPE		641324						
ANR	641709	Symbol	isJavaStaticConstructor		641324						
ANR	641710	Symbol	currentChar		641324						
ANR	641711	Symbol	* braceTypeStack		641324						
ANR	641712	Symbol	previousCommandChar		641324						
ANR	641713	Symbol	isInClassInitializer		641324						
ANR	641714	Symbol	breakCurrentOneLineBlock		641324						
ANR	641715	Symbol	COMMAND_TYPE		641324						
ANR	641716	Symbol	isNonParenHeader		641324						
ANR	641717	Symbol	true		641324						
ANR	641718	Symbol	isSharpAccessor		641324						
ANR	641719	Symbol	EXTERN_TYPE		641324						
ANR	641720	Symbol	nullptr		641324						
ANR	641721	Symbol	isCommandType		641324						
ANR	641722	Symbol	isOneLineBlockReached		641324						
ANR	641723	Symbol	nonInStatementBrace		641324						
ANR	641724	Symbol	isInExternC		641324						
ANR	641725	Symbol	isImmediatelyPostNonInStmt		641324						
ANR	641726	Symbol	previousNonWSChar		641324						
ANR	641727	Symbol	braceTypeStack		641324						
ANR	641728	Symbol	foundQuestionMark		641324						
ANR	641729	Symbol	INTERFACE_TYPE		641324						
ANR	641730	Symbol	isSharpStyle		641324						
ANR	641731	Symbol	isSharpDelegate		641324						
ANR	641732	Symbol	foundPreCommandMacro		641324						
ANR	641733	Symbol	SINGLE_LINE_TYPE		641324						
ANR	641734	Symbol	foundPreDefinitionHeader		641324						
ANR	641735	Symbol	foundTrailingReturnType		641324						
ANR	641736	Symbol	charNum		641324						
ANR	641737	Symbol	foundOneLineBlock		641324						
ANR	641738	Symbol	isNonInStatementArray		641324						
ANR	641739	Symbol	isInObjCMethodDefinition		641324						
ANR	641740	Symbol	currentLine		641324						
ANR	641741	Symbol	ARRAY_TYPE		641324						
ANR	641742	Symbol	false		641324						
ANR	641743	Symbol	isInObjCInterface		641324						
ANR	641744	Symbol	braceTypeStack -> back		641324						
ANR	641745	Symbol	formattedLine		641324						
ANR	641746	Symbol	currentHeader		641324						
ANR	641747	Symbol	foundNamespaceHeader		641324						
ANR	641748	Symbol	formattedLine . length		641324						
ANR	641749	Symbol	INIT_TYPE		641324						
ANR	641750	Symbol	foundPreCommandHeader		641324						
ANR	641751	Symbol	NULL_TYPE		641324						
ANR	641752	Symbol	DEFINITION_TYPE		641324						
ANR	641753	Symbol	ENUM_TYPE		641324						
ANR	641754	Function	ASFormatter :: isClassInitializer	2902:0:83858:84566							
ANR	641755	FunctionDef	ASFormatter :: isClassInitializer ()		641754	0					
ANR	641756	CompoundStatement		2903:0:83903:84566	641754	0					
ANR	641757	ExpressionStatement	assert ( currentChar == ':' )	2904:1:83906:83932	641754	0	True				
ANR	641758	CallExpression	assert ( currentChar == ':' )		641754	0					
ANR	641759	Callee	assert		641754	0					
ANR	641760	Identifier	assert		641754	0					
ANR	641761	ArgumentList	currentChar == ':'		641754	1					
ANR	641762	Argument	currentChar == ':'		641754	0					
ANR	641763	EqualityExpression	currentChar == ':'		641754	0		==			
ANR	641764	Identifier	currentChar		641754	0					
ANR	641765	PrimaryExpression	':'		641754	1					
ANR	641766	ExpressionStatement	assert ( previousChar != ':' && peekNextChar ( ) != ':' )	2905:1:83935:83987	641754	1	True				
ANR	641767	CallExpression	assert ( previousChar != ':' && peekNextChar ( ) != ':' )		641754	0					
ANR	641768	Callee	assert		641754	0					
ANR	641769	Identifier	assert		641754	0					
ANR	641770	ArgumentList	previousChar != ':' && peekNextChar ( ) != ':'		641754	1					
ANR	641771	Argument	previousChar != ':' && peekNextChar ( ) != ':'		641754	0					
ANR	641772	AndExpression	previousChar != ':' && peekNextChar ( ) != ':'		641754	0		&&			
ANR	641773	EqualityExpression	previousChar != ':'		641754	0		!=			
ANR	641774	Identifier	previousChar		641754	0					
ANR	641775	PrimaryExpression	':'		641754	1					
ANR	641776	EqualityExpression	peekNextChar ( ) != ':'		641754	1		!=			
ANR	641777	CallExpression	peekNextChar ( )		641754	0					
ANR	641778	Callee	peekNextChar		641754	0					
ANR	641779	Identifier	peekNextChar		641754	0					
ANR	641780	ArgumentList			641754	1					
ANR	641781	PrimaryExpression	':'		641754	1					
ANR	641782	IdentifierDeclStatement	bool foundClassInitializer = false ;	2908:1:84074:84108	641754	2	True				
ANR	641783	IdentifierDecl	foundClassInitializer = false		641754	0					
ANR	641784	IdentifierDeclType	bool		641754	0					
ANR	641785	Identifier	foundClassInitializer		641754	1					
ANR	641786	AssignmentExpression	foundClassInitializer = false		641754	2		=			
ANR	641787	Identifier	false		641754	0					
ANR	641788	Identifier	false		641754	1					
ANR	641789	IfStatement	if ( foundQuestionMark )		641754	3					
ANR	641790	Condition	foundQuestionMark	2910:5:84116:84132	641754	0	True				
ANR	641791	Identifier	foundQuestionMark		641754	0					
ANR	641792	CompoundStatement		9:1:232:232	641754	1					
ANR	641793	ElseStatement	else		641754	0					
ANR	641794	IfStatement	if ( parenStack -> back ( ) > 0 )		641754	0					
ANR	641795	Condition	parenStack -> back ( ) > 0	2914:10:84175:84196	641754	0	True				
ANR	641796	RelationalExpression	parenStack -> back ( ) > 0		641754	0		>			
ANR	641797	CallExpression	parenStack -> back ( )		641754	0					
ANR	641798	Callee	parenStack -> back		641754	0					
ANR	641799	PtrMemberAccess	parenStack -> back		641754	0					
ANR	641800	Identifier	parenStack		641754	0					
ANR	641801	Identifier	back		641754	1					
ANR	641802	ArgumentList			641754	1					
ANR	641803	PrimaryExpression	0		641754	1					
ANR	641804	CompoundStatement		13:1:296:296	641754	1					
ANR	641805	ElseStatement	else		641754	0					
ANR	641806	IfStatement	if ( isInEnum )		641754	0					
ANR	641807	Condition	isInEnum	2919:10:84294:84301	641754	0	True				
ANR	641808	Identifier	isInEnum		641754	0					
ANR	641809	CompoundStatement		18:1:401:401	641754	1					
ANR	641810	ElseStatement	else		641754	0					
ANR	641811	IfStatement	if ( isCStyle ( ) && ! isInCase && ( previousCommandChar == ')' || foundPreCommandHeader ) )		641754	0					
ANR	641812	Condition	isCStyle ( ) && ! isInCase && ( previousCommandChar == ')' || foundPreCommandHeader )	2923:10:84356:84455	641754	0	True				
ANR	641813	AndExpression	isCStyle ( ) && ! isInCase && ( previousCommandChar == ')' || foundPreCommandHeader )		641754	0		&&			
ANR	641814	CallExpression	isCStyle ( )		641754	0					
ANR	641815	Callee	isCStyle		641754	0					
ANR	641816	Identifier	isCStyle		641754	0					
ANR	641817	ArgumentList			641754	1					
ANR	641818	AndExpression	! isInCase && ( previousCommandChar == ')' || foundPreCommandHeader )		641754	1		&&			
ANR	641819	UnaryOperationExpression	! isInCase		641754	0					
ANR	641820	UnaryOperator	!		641754	0					
ANR	641821	Identifier	isInCase		641754	1					
ANR	641822	OrExpression	previousCommandChar == ')' || foundPreCommandHeader		641754	1		||			
ANR	641823	EqualityExpression	previousCommandChar == ')'		641754	0		==			
ANR	641824	Identifier	previousCommandChar		641754	0					
ANR	641825	PrimaryExpression	')'		641754	1					
ANR	641826	Identifier	foundPreCommandHeader		641754	1					
ANR	641827	CompoundStatement		24:1:555:555	641754	1					
ANR	641828	ExpressionStatement	foundClassInitializer = true	2928:2:84502:84530	641754	0	True				
ANR	641829	AssignmentExpression	foundClassInitializer = true		641754	0		=			
ANR	641830	Identifier	foundClassInitializer		641754	0					
ANR	641831	Identifier	true		641754	1					
ANR	641832	ReturnStatement	return foundClassInitializer ;	2930:1:84536:84564	641754	4	True				
ANR	641833	Identifier	foundClassInitializer		641754	0					
ANR	641834	ReturnType	bool		641754	1					
ANR	641835	Identifier	ASFormatter :: isClassInitializer		641754	2					
ANR	641836	ParameterList			641754	3					
ANR	641837	CFGEntryNode	ENTRY		641754		True				
ANR	641838	CFGExitNode	EXIT		641754		True				
ANR	641839	Symbol	currentChar		641754						
ANR	641840	Symbol	foundClassInitializer		641754						
ANR	641841	Symbol	foundQuestionMark		641754						
ANR	641842	Symbol	peekNextChar		641754						
ANR	641843	Symbol	false		641754						
ANR	641844	Symbol	previousCommandChar		641754						
ANR	641845	Symbol	previousChar		641754						
ANR	641846	Symbol	parenStack -> back		641754						
ANR	641847	Symbol	* parenStack		641754						
ANR	641848	Symbol	foundPreCommandHeader		641754						
ANR	641849	Symbol	isInEnum		641754						
ANR	641850	Symbol	isInCase		641754						
ANR	641851	Symbol	true		641754						
ANR	641852	Symbol	parenStack		641754						
ANR	641853	Symbol	isCStyle		641754						
ANR	641854	Function	ASFormatter :: isEmptyLine	2938:0:84648:84761							
ANR	641855	FunctionDef	ASFormatter :: isEmptyLine (const string & line)		641854	0					
ANR	641856	CompoundStatement		2939:0:84704:84761	641854	0					
ANR	641857	ReturnStatement	"return line . find_first_not_of ( "" \\t"" ) == string :: npos ;"	2940:1:84707:84759	641854	0	True				
ANR	641858	EqualityExpression	"line . find_first_not_of ( "" \\t"" ) == string :: npos"		641854	0		==			
ANR	641859	CallExpression	"line . find_first_not_of ( "" \\t"" )"		641854	0					
ANR	641860	Callee	line . find_first_not_of		641854	0					
ANR	641861	MemberAccess	line . find_first_not_of		641854	0					
ANR	641862	Identifier	line		641854	0					
ANR	641863	Identifier	find_first_not_of		641854	1					
ANR	641864	ArgumentList	""" \\t"""		641854	1					
ANR	641865	Argument	""" \\t"""		641854	0					
ANR	641866	PrimaryExpression	""" \\t"""		641854	0					
ANR	641867	Identifier	string :: npos		641854	1					
ANR	641868	ReturnType	bool		641854	1					
ANR	641869	Identifier	ASFormatter :: isEmptyLine		641854	2					
ANR	641870	ParameterList	const string & line		641854	3					
ANR	641871	Parameter	const string & line	2938:30:84678:84695	641854	0	True				
ANR	641872	ParameterType	const string &		641854	0					
ANR	641873	Identifier	line		641854	1					
ANR	641874	CFGEntryNode	ENTRY		641854		True				
ANR	641875	CFGExitNode	EXIT		641854		True				
ANR	641876	Symbol	line		641854						
ANR	641877	Symbol	string :: npos		641854						
ANR	641878	Symbol	line . find_first_not_of		641854						
ANR	641879	Function	ASFormatter :: isExternC	2948:0:84885:85316							
ANR	641880	FunctionDef	ASFormatter :: isExternC ()		641879	0					
ANR	641881	CompoundStatement		2949:0:84921:85316	641879	0					
ANR	641882	ExpressionStatement	assert ( ! isWhiteSpace ( currentLine [ charNum ] ) )	2951:1:84958:85001	641879	0	True				
ANR	641883	CallExpression	assert ( ! isWhiteSpace ( currentLine [ charNum ] ) )		641879	0					
ANR	641884	Callee	assert		641879	0					
ANR	641885	Identifier	assert		641879	0					
ANR	641886	ArgumentList	! isWhiteSpace ( currentLine [ charNum ] )		641879	1					
ANR	641887	Argument	! isWhiteSpace ( currentLine [ charNum ] )		641879	0					
ANR	641888	UnaryOperationExpression	! isWhiteSpace ( currentLine [ charNum ] )		641879	0					
ANR	641889	UnaryOperator	!		641879	0					
ANR	641890	CallExpression	isWhiteSpace ( currentLine [ charNum ] )		641879	1					
ANR	641891	Callee	isWhiteSpace		641879	0					
ANR	641892	Identifier	isWhiteSpace		641879	0					
ANR	641893	ArgumentList	currentLine [ charNum ]		641879	1					
ANR	641894	Argument	currentLine [ charNum ]		641879	0					
ANR	641895	ArrayIndexing	currentLine [ charNum ]		641879	0					
ANR	641896	Identifier	currentLine		641879	0					
ANR	641897	Identifier	charNum		641879	1					
ANR	641898	IdentifierDeclStatement	"size_t startQuote = currentLine . find_first_of ( "" \\t\\"""" , charNum ) ;"	2952:1:85004:85067	641879	1	True				
ANR	641899	IdentifierDecl	"startQuote = currentLine . find_first_of ( "" \\t\\"""" , charNum )"		641879	0					
ANR	641900	IdentifierDeclType	size_t		641879	0					
ANR	641901	Identifier	startQuote		641879	1					
ANR	641902	AssignmentExpression	"startQuote = currentLine . find_first_of ( "" \\t\\"""" , charNum )"		641879	2		=			
ANR	641903	Identifier	startQuote		641879	0					
ANR	641904	CallExpression	"currentLine . find_first_of ( "" \\t\\"""" , charNum )"		641879	1					
ANR	641905	Callee	currentLine . find_first_of		641879	0					
ANR	641906	MemberAccess	currentLine . find_first_of		641879	0					
ANR	641907	Identifier	currentLine		641879	0					
ANR	641908	Identifier	find_first_of		641879	1					
ANR	641909	ArgumentList	""" \\t\\"""""		641879	1					
ANR	641910	Argument	""" \\t\\"""""		641879	0					
ANR	641911	PrimaryExpression	""" \\t\\"""""		641879	0					
ANR	641912	Argument	charNum		641879	1					
ANR	641913	Identifier	charNum		641879	0					
ANR	641914	IfStatement	if ( startQuote == string :: npos )		641879	2					
ANR	641915	Condition	startQuote == string :: npos	2953:5:85074:85099	641879	0	True				
ANR	641916	EqualityExpression	startQuote == string :: npos		641879	0		==			
ANR	641917	Identifier	startQuote		641879	0					
ANR	641918	Identifier	string :: npos		641879	1					
ANR	641919	ReturnStatement	return false ;	2954:2:85104:85116	641879	1	True				
ANR	641920	Identifier	false		641879	0					
ANR	641921	ExpressionStatement	"startQuote = currentLine . find_first_not_of ( "" \\t"" , startQuote )"	2955:1:85119:85180	641879	3	True				
ANR	641922	AssignmentExpression	"startQuote = currentLine . find_first_not_of ( "" \\t"" , startQuote )"		641879	0		=			
ANR	641923	Identifier	startQuote		641879	0					
ANR	641924	CallExpression	"currentLine . find_first_not_of ( "" \\t"" , startQuote )"		641879	1					
ANR	641925	Callee	currentLine . find_first_not_of		641879	0					
ANR	641926	MemberAccess	currentLine . find_first_not_of		641879	0					
ANR	641927	Identifier	currentLine		641879	0					
ANR	641928	Identifier	find_first_not_of		641879	1					
ANR	641929	ArgumentList	""" \\t"""		641879	1					
ANR	641930	Argument	""" \\t"""		641879	0					
ANR	641931	PrimaryExpression	""" \\t"""		641879	0					
ANR	641932	Argument	startQuote		641879	1					
ANR	641933	Identifier	startQuote		641879	0					
ANR	641934	IfStatement	if ( startQuote == string :: npos )		641879	4					
ANR	641935	Condition	startQuote == string :: npos	2956:5:85187:85212	641879	0	True				
ANR	641936	EqualityExpression	startQuote == string :: npos		641879	0		==			
ANR	641937	Identifier	startQuote		641879	0					
ANR	641938	Identifier	string :: npos		641879	1					
ANR	641939	ReturnStatement	return false ;	2957:2:85217:85229	641879	1	True				
ANR	641940	Identifier	false		641879	0					
ANR	641941	IfStatement	"if ( currentLine . compare ( startQuote , 3 , ""\\""C\\"""" ) != 0 )"		641879	5					
ANR	641942	Condition	"currentLine . compare ( startQuote , 3 , ""\\""C\\"""" ) != 0"	2958:5:85236:85283	641879	0	True				
ANR	641943	EqualityExpression	"currentLine . compare ( startQuote , 3 , ""\\""C\\"""" ) != 0"		641879	0		!=			
ANR	641944	CallExpression	"currentLine . compare ( startQuote , 3 , ""\\""C\\"""" )"		641879	0					
ANR	641945	Callee	currentLine . compare		641879	0					
ANR	641946	MemberAccess	currentLine . compare		641879	0					
ANR	641947	Identifier	currentLine		641879	0					
ANR	641948	Identifier	compare		641879	1					
ANR	641949	ArgumentList	startQuote		641879	1					
ANR	641950	Argument	startQuote		641879	0					
ANR	641951	Identifier	startQuote		641879	0					
ANR	641952	Argument	3		641879	1					
ANR	641953	PrimaryExpression	3		641879	0					
ANR	641954	Argument	"""\\""C\\"""""		641879	2					
ANR	641955	PrimaryExpression	"""\\""C\\"""""		641879	0					
ANR	641956	PrimaryExpression	0		641879	1					
ANR	641957	ReturnStatement	return false ;	2959:2:85288:85300	641879	1	True				
ANR	641958	Identifier	false		641879	0					
ANR	641959	ReturnStatement	return true ;	2960:1:85303:85314	641879	6	True				
ANR	641960	Identifier	true		641879	0					
ANR	641961	ReturnType	bool		641879	1					
ANR	641962	Identifier	ASFormatter :: isExternC		641879	2					
ANR	641963	ParameterList			641879	3					
ANR	641964	CFGEntryNode	ENTRY		641879		True				
ANR	641965	CFGExitNode	EXIT		641879		True				
ANR	641966	Symbol	* currentLine		641879						
ANR	641967	Symbol	* charNum		641879						
ANR	641968	Symbol	currentLine . find_first_of		641879						
ANR	641969	Symbol	string :: npos		641879						
ANR	641970	Symbol	false		641879						
ANR	641971	Symbol	true		641879						
ANR	641972	Symbol	charNum		641879						
ANR	641973	Symbol	startQuote		641879						
ANR	641974	Symbol	currentLine . find_first_not_of		641879						
ANR	641975	Symbol	isWhiteSpace		641879						
ANR	641976	Symbol	currentLine . compare		641879						
ANR	641977	Symbol	currentLine		641879						
ANR	641978	Function	ASFormatter :: isPointerOrReference	2972:0:85661:89926							
ANR	641979	FunctionDef	ASFormatter :: isPointerOrReference ()		641978	0					
ANR	641980	CompoundStatement		2973:0:85708:89926	641978	0					
ANR	641981	ExpressionStatement	assert ( currentChar == '*' || currentChar == '&' || currentChar == '^' )	2974:1:85711:85781	641978	0	True				
ANR	641982	CallExpression	assert ( currentChar == '*' || currentChar == '&' || currentChar == '^' )		641978	0					
ANR	641983	Callee	assert		641978	0					
ANR	641984	Identifier	assert		641978	0					
ANR	641985	ArgumentList	currentChar == '*' || currentChar == '&' || currentChar == '^'		641978	1					
ANR	641986	Argument	currentChar == '*' || currentChar == '&' || currentChar == '^'		641978	0					
ANR	641987	OrExpression	currentChar == '*' || currentChar == '&' || currentChar == '^'		641978	0		||			
ANR	641988	EqualityExpression	currentChar == '*'		641978	0		==			
ANR	641989	Identifier	currentChar		641978	0					
ANR	641990	PrimaryExpression	'*'		641978	1					
ANR	641991	OrExpression	currentChar == '&' || currentChar == '^'		641978	1		||			
ANR	641992	EqualityExpression	currentChar == '&'		641978	0		==			
ANR	641993	Identifier	currentChar		641978	0					
ANR	641994	PrimaryExpression	'&'		641978	1					
ANR	641995	EqualityExpression	currentChar == '^'		641978	1		==			
ANR	641996	Identifier	currentChar		641978	0					
ANR	641997	PrimaryExpression	'^'		641978	1					
ANR	641998	IfStatement	if ( isJavaStyle ( ) )		641978	1					
ANR	641999	Condition	isJavaStyle ( )	2976:5:85789:85801	641978	0	True				
ANR	642000	CallExpression	isJavaStyle ( )		641978	0					
ANR	642001	Callee	isJavaStyle		641978	0					
ANR	642002	Identifier	isJavaStyle		641978	0					
ANR	642003	ArgumentList			641978	1					
ANR	642004	ReturnStatement	return false ;	2977:2:85806:85818	641978	1	True				
ANR	642005	Identifier	false		641978	0					
ANR	642006	IfStatement	if ( isCharImmediatelyPostOperator )		641978	2					
ANR	642007	Condition	isCharImmediatelyPostOperator	2979:5:85826:85854	641978	0	True				
ANR	642008	Identifier	isCharImmediatelyPostOperator		641978	0					
ANR	642009	ReturnStatement	return false ;	2980:2:85859:85871	641978	1	True				
ANR	642010	Identifier	false		641978	0					
ANR	642011	IdentifierDeclStatement	"string lastWord = getPreviousWord ( currentLine , charNum ) ;"	2983:1:85921:85976	641978	3	True				
ANR	642012	IdentifierDecl	"lastWord = getPreviousWord ( currentLine , charNum )"		641978	0					
ANR	642013	IdentifierDeclType	string		641978	0					
ANR	642014	Identifier	lastWord		641978	1					
ANR	642015	AssignmentExpression	"lastWord = getPreviousWord ( currentLine , charNum )"		641978	2		=			
ANR	642016	Identifier	lastWord		641978	0					
ANR	642017	CallExpression	"getPreviousWord ( currentLine , charNum )"		641978	1					
ANR	642018	Callee	getPreviousWord		641978	0					
ANR	642019	Identifier	getPreviousWord		641978	0					
ANR	642020	ArgumentList	currentLine		641978	1					
ANR	642021	Argument	currentLine		641978	0					
ANR	642022	Identifier	currentLine		641978	0					
ANR	642023	Argument	charNum		641978	1					
ANR	642024	Identifier	charNum		641978	0					
ANR	642025	IfStatement	if ( lastWord . empty ( ) )		641978	4					
ANR	642026	Condition	lastWord . empty ( )	2984:5:85983:85998	641978	0	True				
ANR	642027	CallExpression	lastWord . empty ( )		641978	0					
ANR	642028	Callee	lastWord . empty		641978	0					
ANR	642029	MemberAccess	lastWord . empty		641978	0					
ANR	642030	Identifier	lastWord		641978	0					
ANR	642031	Identifier	empty		641978	1					
ANR	642032	ArgumentList			641978	1					
ANR	642033	ExpressionStatement	"lastWord = "" """	2985:2:86003:86017	641978	1	True				
ANR	642034	AssignmentExpression	"lastWord = "" """		641978	0		=			
ANR	642035	Identifier	lastWord		641978	0					
ANR	642036	PrimaryExpression	""" """		641978	1					
ANR	642037	IdentifierDeclStatement	string nextText = peekNextText ( currentLine . substr ( charNum + 1 ) ) ;	2988:1:86073:86136	641978	5	True				
ANR	642038	IdentifierDecl	nextText = peekNextText ( currentLine . substr ( charNum + 1 ) )		641978	0					
ANR	642039	IdentifierDeclType	string		641978	0					
ANR	642040	Identifier	nextText		641978	1					
ANR	642041	AssignmentExpression	nextText = peekNextText ( currentLine . substr ( charNum + 1 ) )		641978	2		=			
ANR	642042	Identifier	nextText		641978	0					
ANR	642043	CallExpression	peekNextText ( currentLine . substr ( charNum + 1 ) )		641978	1					
ANR	642044	Callee	peekNextText		641978	0					
ANR	642045	Identifier	peekNextText		641978	0					
ANR	642046	ArgumentList	currentLine . substr ( charNum + 1 )		641978	1					
ANR	642047	Argument	currentLine . substr ( charNum + 1 )		641978	0					
ANR	642048	CallExpression	currentLine . substr ( charNum + 1 )		641978	0					
ANR	642049	Callee	currentLine . substr		641978	0					
ANR	642050	MemberAccess	currentLine . substr		641978	0					
ANR	642051	Identifier	currentLine		641978	0					
ANR	642052	Identifier	substr		641978	1					
ANR	642053	ArgumentList	charNum + 1		641978	1					
ANR	642054	Argument	charNum + 1		641978	0					
ANR	642055	AdditiveExpression	charNum + 1		641978	0		+			
ANR	642056	Identifier	charNum		641978	0					
ANR	642057	PrimaryExpression	1		641978	1					
ANR	642058	IfStatement	if ( nextText . length ( ) == 0 )		641978	6					
ANR	642059	Condition	nextText . length ( ) == 0	2989:5:86143:86164	641978	0	True				
ANR	642060	EqualityExpression	nextText . length ( ) == 0		641978	0		==			
ANR	642061	CallExpression	nextText . length ( )		641978	0					
ANR	642062	Callee	nextText . length		641978	0					
ANR	642063	MemberAccess	nextText . length		641978	0					
ANR	642064	Identifier	nextText		641978	0					
ANR	642065	Identifier	length		641978	1					
ANR	642066	ArgumentList			641978	1					
ANR	642067	PrimaryExpression	0		641978	1					
ANR	642068	ExpressionStatement	"nextText = "" """	2990:2:86169:86183	641978	1	True				
ANR	642069	AssignmentExpression	"nextText = "" """		641978	0		=			
ANR	642070	Identifier	nextText		641978	0					
ANR	642071	PrimaryExpression	""" """		641978	1					
ANR	642072	IdentifierDeclStatement	char nextChar = nextText [ 0 ] ;	2991:1:86186:86213	641978	7	True				
ANR	642073	IdentifierDecl	nextChar = nextText [ 0 ]		641978	0					
ANR	642074	IdentifierDeclType	char		641978	0					
ANR	642075	Identifier	nextChar		641978	1					
ANR	642076	AssignmentExpression	nextChar = nextText [ 0 ]		641978	2		=			
ANR	642077	Identifier	nextChar		641978	0					
ANR	642078	ArrayIndexing	nextText [ 0 ]		641978	1					
ANR	642079	Identifier	nextText		641978	0					
ANR	642080	PrimaryExpression	0		641978	1					
ANR	642081	IfStatement	if ( isDigit ( lastWord [ 0 ] ) || isDigit ( nextChar ) || nextChar == '!' || nextChar == '~' )		641978	8					
ANR	642082	Condition	isDigit ( lastWord [ 0 ] ) || isDigit ( nextChar ) || nextChar == '!' || nextChar == '~'	2992:5:86220:86325	641978	0	True				
ANR	642083	OrExpression	isDigit ( lastWord [ 0 ] ) || isDigit ( nextChar ) || nextChar == '!' || nextChar == '~'		641978	0		||			
ANR	642084	CallExpression	isDigit ( lastWord [ 0 ] )		641978	0					
ANR	642085	Callee	isDigit		641978	0					
ANR	642086	Identifier	isDigit		641978	0					
ANR	642087	ArgumentList	lastWord [ 0 ]		641978	1					
ANR	642088	Argument	lastWord [ 0 ]		641978	0					
ANR	642089	ArrayIndexing	lastWord [ 0 ]		641978	0					
ANR	642090	Identifier	lastWord		641978	0					
ANR	642091	PrimaryExpression	0		641978	1					
ANR	642092	OrExpression	isDigit ( nextChar ) || nextChar == '!' || nextChar == '~'		641978	1		||			
ANR	642093	CallExpression	isDigit ( nextChar )		641978	0					
ANR	642094	Callee	isDigit		641978	0					
ANR	642095	Identifier	isDigit		641978	0					
ANR	642096	ArgumentList	nextChar		641978	1					
ANR	642097	Argument	nextChar		641978	0					
ANR	642098	Identifier	nextChar		641978	0					
ANR	642099	OrExpression	nextChar == '!' || nextChar == '~'		641978	1		||			
ANR	642100	EqualityExpression	nextChar == '!'		641978	0		==			
ANR	642101	Identifier	nextChar		641978	0					
ANR	642102	PrimaryExpression	'!'		641978	1					
ANR	642103	EqualityExpression	nextChar == '~'		641978	1		==			
ANR	642104	Identifier	nextChar		641978	0					
ANR	642105	PrimaryExpression	'~'		641978	1					
ANR	642106	ReturnStatement	return false ;	2996:2:86330:86342	641978	1	True				
ANR	642107	Identifier	false		641978	0					
ANR	642108	IfStatement	if ( currentChar == '*' && charNum < ( int ) currentLine . length ( ) - 1 && isWhiteSpace ( currentLine [ charNum + 1 ] ) && nextChar == '*' )		641978	9					
ANR	642109	Condition	currentChar == '*' && charNum < ( int ) currentLine . length ( ) - 1 && isWhiteSpace ( currentLine [ charNum + 1 ] ) && nextChar == '*'	2999:5:86401:86550	641978	0	True				
ANR	642110	AndExpression	currentChar == '*' && charNum < ( int ) currentLine . length ( ) - 1 && isWhiteSpace ( currentLine [ charNum + 1 ] ) && nextChar == '*'		641978	0		&&			
ANR	642111	EqualityExpression	currentChar == '*'		641978	0		==			
ANR	642112	Identifier	currentChar		641978	0					
ANR	642113	PrimaryExpression	'*'		641978	1					
ANR	642114	AndExpression	charNum < ( int ) currentLine . length ( ) - 1 && isWhiteSpace ( currentLine [ charNum + 1 ] ) && nextChar == '*'		641978	1		&&			
ANR	642115	RelationalExpression	charNum < ( int ) currentLine . length ( ) - 1		641978	0		<			
ANR	642116	Identifier	charNum		641978	0					
ANR	642117	AdditiveExpression	( int ) currentLine . length ( ) - 1		641978	1		-			
ANR	642118	CastExpression	( int ) currentLine . length ( )		641978	0					
ANR	642119	CastTarget	int		641978	0					
ANR	642120	CallExpression	currentLine . length ( )		641978	1					
ANR	642121	Callee	currentLine . length		641978	0					
ANR	642122	MemberAccess	currentLine . length		641978	0					
ANR	642123	Identifier	currentLine		641978	0					
ANR	642124	Identifier	length		641978	1					
ANR	642125	ArgumentList			641978	1					
ANR	642126	PrimaryExpression	1		641978	1					
ANR	642127	AndExpression	isWhiteSpace ( currentLine [ charNum + 1 ] ) && nextChar == '*'		641978	1		&&			
ANR	642128	CallExpression	isWhiteSpace ( currentLine [ charNum + 1 ] )		641978	0					
ANR	642129	Callee	isWhiteSpace		641978	0					
ANR	642130	Identifier	isWhiteSpace		641978	0					
ANR	642131	ArgumentList	currentLine [ charNum + 1 ]		641978	1					
ANR	642132	Argument	currentLine [ charNum + 1 ]		641978	0					
ANR	642133	ArrayIndexing	currentLine [ charNum + 1 ]		641978	0					
ANR	642134	Identifier	currentLine		641978	0					
ANR	642135	AdditiveExpression	charNum + 1		641978	1		+			
ANR	642136	Identifier	charNum		641978	0					
ANR	642137	PrimaryExpression	1		641978	1					
ANR	642138	EqualityExpression	nextChar == '*'		641978	1		==			
ANR	642139	Identifier	nextChar		641978	0					
ANR	642140	PrimaryExpression	'*'		641978	1					
ANR	642141	ReturnStatement	return false ;	3003:2:86555:86567	641978	1	True				
ANR	642142	Identifier	false		641978	0					
ANR	642143	IfStatement	if ( ( foundCastOperator && nextChar == '>' ) || isPointerOrReferenceVariable ( lastWord ) )		641978	10					
ANR	642144	Condition	( foundCastOperator && nextChar == '>' ) || isPointerOrReferenceVariable ( lastWord )	3005:5:86575:86663	641978	0	True				
ANR	642145	OrExpression	( foundCastOperator && nextChar == '>' ) || isPointerOrReferenceVariable ( lastWord )		641978	0		||			
ANR	642146	AndExpression	foundCastOperator && nextChar == '>'		641978	0		&&			
ANR	642147	Identifier	foundCastOperator		641978	0					
ANR	642148	EqualityExpression	nextChar == '>'		641978	1		==			
ANR	642149	Identifier	nextChar		641978	0					
ANR	642150	PrimaryExpression	'>'		641978	1					
ANR	642151	CallExpression	isPointerOrReferenceVariable ( lastWord )		641978	1					
ANR	642152	Callee	isPointerOrReferenceVariable		641978	0					
ANR	642153	Identifier	isPointerOrReferenceVariable		641978	0					
ANR	642154	ArgumentList	lastWord		641978	1					
ANR	642155	Argument	lastWord		641978	0					
ANR	642156	Identifier	lastWord		641978	0					
ANR	642157	ReturnStatement	return true ;	3007:2:86668:86679	641978	1	True				
ANR	642158	Identifier	true		641978	0					
ANR	642159	IfStatement	"if ( isInClassInitializer && previousNonWSChar != '(' && previousNonWSChar != '{' && previousCommandChar != ',' && nextChar != ')' && nextChar != '}' )"		641978	11					
ANR	642160	Condition	"isInClassInitializer && previousNonWSChar != '(' && previousNonWSChar != '{' && previousCommandChar != ',' && nextChar != ')' && nextChar != '}'"	3009:5:86687:86875	641978	0	True				
ANR	642161	AndExpression	"isInClassInitializer && previousNonWSChar != '(' && previousNonWSChar != '{' && previousCommandChar != ',' && nextChar != ')' && nextChar != '}'"		641978	0		&&			
ANR	642162	Identifier	isInClassInitializer		641978	0					
ANR	642163	AndExpression	"previousNonWSChar != '(' && previousNonWSChar != '{' && previousCommandChar != ',' && nextChar != ')' && nextChar != '}'"		641978	1		&&			
ANR	642164	EqualityExpression	previousNonWSChar != '('		641978	0		!=			
ANR	642165	Identifier	previousNonWSChar		641978	0					
ANR	642166	PrimaryExpression	'('		641978	1					
ANR	642167	AndExpression	"previousNonWSChar != '{' && previousCommandChar != ',' && nextChar != ')' && nextChar != '}'"		641978	1		&&			
ANR	642168	EqualityExpression	previousNonWSChar != '{'		641978	0		!=			
ANR	642169	Identifier	previousNonWSChar		641978	0					
ANR	642170	PrimaryExpression	'{'		641978	1					
ANR	642171	AndExpression	"previousCommandChar != ',' && nextChar != ')' && nextChar != '}'"		641978	1		&&			
ANR	642172	EqualityExpression	"previousCommandChar != ','"		641978	0		!=			
ANR	642173	Identifier	previousCommandChar		641978	0					
ANR	642174	PrimaryExpression	"','"		641978	1					
ANR	642175	AndExpression	nextChar != ')' && nextChar != '}'		641978	1		&&			
ANR	642176	EqualityExpression	nextChar != ')'		641978	0		!=			
ANR	642177	Identifier	nextChar		641978	0					
ANR	642178	PrimaryExpression	')'		641978	1					
ANR	642179	EqualityExpression	nextChar != '}'		641978	1		!=			
ANR	642180	Identifier	nextChar		641978	0					
ANR	642181	PrimaryExpression	'}'		641978	1					
ANR	642182	ReturnStatement	return false ;	3015:2:86880:86892	641978	1	True				
ANR	642183	Identifier	false		641978	0					
ANR	642184	IfStatement	if ( currentChar == '&' && nextChar == '&' )		641978	12					
ANR	642185	Condition	currentChar == '&' && nextChar == '&'	3018:5:86930:86966	641978	0	True				
ANR	642186	AndExpression	currentChar == '&' && nextChar == '&'		641978	0		&&			
ANR	642187	EqualityExpression	currentChar == '&'		641978	0		==			
ANR	642188	Identifier	currentChar		641978	0					
ANR	642189	PrimaryExpression	'&'		641978	1					
ANR	642190	EqualityExpression	nextChar == '&'		641978	1		==			
ANR	642191	Identifier	nextChar		641978	0					
ANR	642192	PrimaryExpression	'&'		641978	1					
ANR	642193	CompoundStatement		50:2:1313:1333	641978	1					
ANR	642194	IfStatement	if ( previousNonWSChar == '>' )		641978	0					
ANR	642195	Condition	previousNonWSChar == '>'	3020:6:86978:87001	641978	0	True				
ANR	642196	EqualityExpression	previousNonWSChar == '>'		641978	0		==			
ANR	642197	Identifier	previousNonWSChar		641978	0					
ANR	642198	PrimaryExpression	'>'		641978	1					
ANR	642199	ReturnStatement	return true ;	3021:3:87007:87018	641978	1	True				
ANR	642200	Identifier	true		641978	0					
ANR	642201	IdentifierDeclStatement	string followingText ;	3022:2:87022:87042	641978	1	True				
ANR	642202	IdentifierDecl	followingText		641978	0					
ANR	642203	IdentifierDeclType	string		641978	0					
ANR	642204	Identifier	followingText		641978	1					
ANR	642205	IfStatement	if ( ( int ) currentLine . length ( ) > charNum + 2 )		641978	2					
ANR	642206	Condition	( int ) currentLine . length ( ) > charNum + 2	3023:6:87050:87089	641978	0	True				
ANR	642207	RelationalExpression	( int ) currentLine . length ( ) > charNum + 2		641978	0		>			
ANR	642208	CastExpression	( int ) currentLine . length ( )		641978	0					
ANR	642209	CastTarget	int		641978	0					
ANR	642210	CallExpression	currentLine . length ( )		641978	1					
ANR	642211	Callee	currentLine . length		641978	0					
ANR	642212	MemberAccess	currentLine . length		641978	0					
ANR	642213	Identifier	currentLine		641978	0					
ANR	642214	Identifier	length		641978	1					
ANR	642215	ArgumentList			641978	1					
ANR	642216	AdditiveExpression	charNum + 2		641978	1		+			
ANR	642217	Identifier	charNum		641978	0					
ANR	642218	PrimaryExpression	2		641978	1					
ANR	642219	ExpressionStatement	followingText = peekNextText ( currentLine . substr ( charNum + 2 ) )	3024:3:87095:87156	641978	1	True				
ANR	642220	AssignmentExpression	followingText = peekNextText ( currentLine . substr ( charNum + 2 ) )		641978	0		=			
ANR	642221	Identifier	followingText		641978	0					
ANR	642222	CallExpression	peekNextText ( currentLine . substr ( charNum + 2 ) )		641978	1					
ANR	642223	Callee	peekNextText		641978	0					
ANR	642224	Identifier	peekNextText		641978	0					
ANR	642225	ArgumentList	currentLine . substr ( charNum + 2 )		641978	1					
ANR	642226	Argument	currentLine . substr ( charNum + 2 )		641978	0					
ANR	642227	CallExpression	currentLine . substr ( charNum + 2 )		641978	0					
ANR	642228	Callee	currentLine . substr		641978	0					
ANR	642229	MemberAccess	currentLine . substr		641978	0					
ANR	642230	Identifier	currentLine		641978	0					
ANR	642231	Identifier	substr		641978	1					
ANR	642232	ArgumentList	charNum + 2		641978	1					
ANR	642233	Argument	charNum + 2		641978	0					
ANR	642234	AdditiveExpression	charNum + 2		641978	0		+			
ANR	642235	Identifier	charNum		641978	0					
ANR	642236	PrimaryExpression	2		641978	1					
ANR	642237	IfStatement	if ( followingText . length ( ) > 0 && followingText [ 0 ] == ')' )		641978	3					
ANR	642238	Condition	followingText . length ( ) > 0 && followingText [ 0 ] == ')'	3025:6:87164:87216	641978	0	True				
ANR	642239	AndExpression	followingText . length ( ) > 0 && followingText [ 0 ] == ')'		641978	0		&&			
ANR	642240	RelationalExpression	followingText . length ( ) > 0		641978	0		>			
ANR	642241	CallExpression	followingText . length ( )		641978	0					
ANR	642242	Callee	followingText . length		641978	0					
ANR	642243	MemberAccess	followingText . length		641978	0					
ANR	642244	Identifier	followingText		641978	0					
ANR	642245	Identifier	length		641978	1					
ANR	642246	ArgumentList			641978	1					
ANR	642247	PrimaryExpression	0		641978	1					
ANR	642248	EqualityExpression	followingText [ 0 ] == ')'		641978	1		==			
ANR	642249	ArrayIndexing	followingText [ 0 ]		641978	0					
ANR	642250	Identifier	followingText		641978	0					
ANR	642251	PrimaryExpression	0		641978	1					
ANR	642252	PrimaryExpression	')'		641978	1					
ANR	642253	ReturnStatement	return true ;	3026:3:87222:87233	641978	1	True				
ANR	642254	Identifier	true		641978	0					
ANR	642255	IfStatement	if ( currentHeader != nullptr || isInPotentialCalculation )		641978	4					
ANR	642256	Condition	currentHeader != nullptr || isInPotentialCalculation	3027:6:87241:87292	641978	0	True				
ANR	642257	OrExpression	currentHeader != nullptr || isInPotentialCalculation		641978	0		||			
ANR	642258	EqualityExpression	currentHeader != nullptr		641978	0		!=			
ANR	642259	Identifier	currentHeader		641978	0					
ANR	642260	Identifier	nullptr		641978	1					
ANR	642261	Identifier	isInPotentialCalculation		641978	1					
ANR	642262	ReturnStatement	return false ;	3028:3:87298:87310	641978	1	True				
ANR	642263	Identifier	false		641978	0					
ANR	642264	IfStatement	"if ( parenStack -> back ( ) > 0 && isBraceType ( braceTypeStack -> back ( ) , COMMAND_TYPE ) )"		641978	5					
ANR	642265	Condition	"parenStack -> back ( ) > 0 && isBraceType ( braceTypeStack -> back ( ) , COMMAND_TYPE )"	3029:6:87318:87392	641978	0	True				
ANR	642266	AndExpression	"parenStack -> back ( ) > 0 && isBraceType ( braceTypeStack -> back ( ) , COMMAND_TYPE )"		641978	0		&&			
ANR	642267	RelationalExpression	parenStack -> back ( ) > 0		641978	0		>			
ANR	642268	CallExpression	parenStack -> back ( )		641978	0					
ANR	642269	Callee	parenStack -> back		641978	0					
ANR	642270	PtrMemberAccess	parenStack -> back		641978	0					
ANR	642271	Identifier	parenStack		641978	0					
ANR	642272	Identifier	back		641978	1					
ANR	642273	ArgumentList			641978	1					
ANR	642274	PrimaryExpression	0		641978	1					
ANR	642275	CallExpression	"isBraceType ( braceTypeStack -> back ( ) , COMMAND_TYPE )"		641978	1					
ANR	642276	Callee	isBraceType		641978	0					
ANR	642277	Identifier	isBraceType		641978	0					
ANR	642278	ArgumentList	braceTypeStack -> back ( )		641978	1					
ANR	642279	Argument	braceTypeStack -> back ( )		641978	0					
ANR	642280	CallExpression	braceTypeStack -> back ( )		641978	0					
ANR	642281	Callee	braceTypeStack -> back		641978	0					
ANR	642282	PtrMemberAccess	braceTypeStack -> back		641978	0					
ANR	642283	Identifier	braceTypeStack		641978	0					
ANR	642284	Identifier	back		641978	1					
ANR	642285	ArgumentList			641978	1					
ANR	642286	Argument	COMMAND_TYPE		641978	1					
ANR	642287	Identifier	COMMAND_TYPE		641978	0					
ANR	642288	ReturnStatement	return false ;	3030:3:87398:87410	641978	1	True				
ANR	642289	Identifier	false		641978	0					
ANR	642290	ReturnStatement	return true ;	3031:2:87414:87425	641978	6	True				
ANR	642291	Identifier	true		641978	0					
ANR	642292	IfStatement	if ( nextChar == '*' || previousNonWSChar == '=' || previousNonWSChar == '(' || previousNonWSChar == '[' || isCharImmediatelyPostReturn || isInTemplate || isCharImmediatelyPostTemplate || currentHeader == & AS_CATCH || currentHeader == & AS_FOREACH || currentHeader == & AS_QFOREACH )		641978	13					
ANR	642293	Condition	nextChar == '*' || previousNonWSChar == '=' || previousNonWSChar == '(' || previousNonWSChar == '[' || isCharImmediatelyPostReturn || isInTemplate || isCharImmediatelyPostTemplate || currentHeader == & AS_CATCH || currentHeader == & AS_FOREACH || currentHeader == & AS_QFOREACH	3033:5:87435:87789	641978	0	True				
ANR	642294	OrExpression	nextChar == '*' || previousNonWSChar == '=' || previousNonWSChar == '(' || previousNonWSChar == '[' || isCharImmediatelyPostReturn || isInTemplate || isCharImmediatelyPostTemplate || currentHeader == & AS_CATCH || currentHeader == & AS_FOREACH || currentHeader == & AS_QFOREACH		641978	0		||			
ANR	642295	EqualityExpression	nextChar == '*'		641978	0		==			
ANR	642296	Identifier	nextChar		641978	0					
ANR	642297	PrimaryExpression	'*'		641978	1					
ANR	642298	OrExpression	previousNonWSChar == '=' || previousNonWSChar == '(' || previousNonWSChar == '[' || isCharImmediatelyPostReturn || isInTemplate || isCharImmediatelyPostTemplate || currentHeader == & AS_CATCH || currentHeader == & AS_FOREACH || currentHeader == & AS_QFOREACH		641978	1		||			
ANR	642299	EqualityExpression	previousNonWSChar == '='		641978	0		==			
ANR	642300	Identifier	previousNonWSChar		641978	0					
ANR	642301	PrimaryExpression	'='		641978	1					
ANR	642302	OrExpression	previousNonWSChar == '(' || previousNonWSChar == '[' || isCharImmediatelyPostReturn || isInTemplate || isCharImmediatelyPostTemplate || currentHeader == & AS_CATCH || currentHeader == & AS_FOREACH || currentHeader == & AS_QFOREACH		641978	1		||			
ANR	642303	EqualityExpression	previousNonWSChar == '('		641978	0		==			
ANR	642304	Identifier	previousNonWSChar		641978	0					
ANR	642305	PrimaryExpression	'('		641978	1					
ANR	642306	OrExpression	previousNonWSChar == '[' || isCharImmediatelyPostReturn || isInTemplate || isCharImmediatelyPostTemplate || currentHeader == & AS_CATCH || currentHeader == & AS_FOREACH || currentHeader == & AS_QFOREACH		641978	1		||			
ANR	642307	EqualityExpression	previousNonWSChar == '['		641978	0		==			
ANR	642308	Identifier	previousNonWSChar		641978	0					
ANR	642309	PrimaryExpression	'['		641978	1					
ANR	642310	OrExpression	isCharImmediatelyPostReturn || isInTemplate || isCharImmediatelyPostTemplate || currentHeader == & AS_CATCH || currentHeader == & AS_FOREACH || currentHeader == & AS_QFOREACH		641978	1		||			
ANR	642311	Identifier	isCharImmediatelyPostReturn		641978	0					
ANR	642312	OrExpression	isInTemplate || isCharImmediatelyPostTemplate || currentHeader == & AS_CATCH || currentHeader == & AS_FOREACH || currentHeader == & AS_QFOREACH		641978	1		||			
ANR	642313	Identifier	isInTemplate		641978	0					
ANR	642314	OrExpression	isCharImmediatelyPostTemplate || currentHeader == & AS_CATCH || currentHeader == & AS_FOREACH || currentHeader == & AS_QFOREACH		641978	1		||			
ANR	642315	Identifier	isCharImmediatelyPostTemplate		641978	0					
ANR	642316	OrExpression	currentHeader == & AS_CATCH || currentHeader == & AS_FOREACH || currentHeader == & AS_QFOREACH		641978	1		||			
ANR	642317	EqualityExpression	currentHeader == & AS_CATCH		641978	0		==			
ANR	642318	Identifier	currentHeader		641978	0					
ANR	642319	UnaryOperationExpression	& AS_CATCH		641978	1					
ANR	642320	UnaryOperator	&		641978	0					
ANR	642321	Identifier	AS_CATCH		641978	1					
ANR	642322	OrExpression	currentHeader == & AS_FOREACH || currentHeader == & AS_QFOREACH		641978	1		||			
ANR	642323	EqualityExpression	currentHeader == & AS_FOREACH		641978	0		==			
ANR	642324	Identifier	currentHeader		641978	0					
ANR	642325	UnaryOperationExpression	& AS_FOREACH		641978	1					
ANR	642326	UnaryOperator	&		641978	0					
ANR	642327	Identifier	AS_FOREACH		641978	1					
ANR	642328	EqualityExpression	currentHeader == & AS_QFOREACH		641978	1		==			
ANR	642329	Identifier	currentHeader		641978	0					
ANR	642330	UnaryOperationExpression	& AS_QFOREACH		641978	1					
ANR	642331	UnaryOperator	&		641978	0					
ANR	642332	Identifier	AS_QFOREACH		641978	1					
ANR	642333	ReturnStatement	return true ;	3043:2:87794:87805	641978	1	True				
ANR	642334	Identifier	true		641978	0					
ANR	642335	IfStatement	"if ( isBraceType ( braceTypeStack -> back ( ) , ARRAY_TYPE ) && isLegalNameChar ( lastWord [ 0 ] ) && isLegalNameChar ( nextChar ) && previousNonWSChar != ')' )"		641978	14					
ANR	642336	Condition	"isBraceType ( braceTypeStack -> back ( ) , ARRAY_TYPE ) && isLegalNameChar ( lastWord [ 0 ] ) && isLegalNameChar ( nextChar ) && previousNonWSChar != ')'"	3045:5:87813:87975	641978	0	True				
ANR	642337	AndExpression	"isBraceType ( braceTypeStack -> back ( ) , ARRAY_TYPE ) && isLegalNameChar ( lastWord [ 0 ] ) && isLegalNameChar ( nextChar ) && previousNonWSChar != ')'"		641978	0		&&			
ANR	642338	CallExpression	"isBraceType ( braceTypeStack -> back ( ) , ARRAY_TYPE )"		641978	0					
ANR	642339	Callee	isBraceType		641978	0					
ANR	642340	Identifier	isBraceType		641978	0					
ANR	642341	ArgumentList	braceTypeStack -> back ( )		641978	1					
ANR	642342	Argument	braceTypeStack -> back ( )		641978	0					
ANR	642343	CallExpression	braceTypeStack -> back ( )		641978	0					
ANR	642344	Callee	braceTypeStack -> back		641978	0					
ANR	642345	PtrMemberAccess	braceTypeStack -> back		641978	0					
ANR	642346	Identifier	braceTypeStack		641978	0					
ANR	642347	Identifier	back		641978	1					
ANR	642348	ArgumentList			641978	1					
ANR	642349	Argument	ARRAY_TYPE		641978	1					
ANR	642350	Identifier	ARRAY_TYPE		641978	0					
ANR	642351	AndExpression	isLegalNameChar ( lastWord [ 0 ] ) && isLegalNameChar ( nextChar ) && previousNonWSChar != ')'		641978	1		&&			
ANR	642352	CallExpression	isLegalNameChar ( lastWord [ 0 ] )		641978	0					
ANR	642353	Callee	isLegalNameChar		641978	0					
ANR	642354	Identifier	isLegalNameChar		641978	0					
ANR	642355	ArgumentList	lastWord [ 0 ]		641978	1					
ANR	642356	Argument	lastWord [ 0 ]		641978	0					
ANR	642357	ArrayIndexing	lastWord [ 0 ]		641978	0					
ANR	642358	Identifier	lastWord		641978	0					
ANR	642359	PrimaryExpression	0		641978	1					
ANR	642360	AndExpression	isLegalNameChar ( nextChar ) && previousNonWSChar != ')'		641978	1		&&			
ANR	642361	CallExpression	isLegalNameChar ( nextChar )		641978	0					
ANR	642362	Callee	isLegalNameChar		641978	0					
ANR	642363	Identifier	isLegalNameChar		641978	0					
ANR	642364	ArgumentList	nextChar		641978	1					
ANR	642365	Argument	nextChar		641978	0					
ANR	642366	Identifier	nextChar		641978	0					
ANR	642367	EqualityExpression	previousNonWSChar != ')'		641978	1		!=			
ANR	642368	Identifier	previousNonWSChar		641978	0					
ANR	642369	PrimaryExpression	')'		641978	1					
ANR	642370	CompoundStatement		77:1:2270:2270	641978	1					
ANR	642371	IfStatement	if ( isArrayOperator ( ) )		641978	0					
ANR	642372	Condition	isArrayOperator ( )	3050:6:87987:88003	641978	0	True				
ANR	642373	CallExpression	isArrayOperator ( )		641978	0					
ANR	642374	Callee	isArrayOperator		641978	0					
ANR	642375	Identifier	isArrayOperator		641978	0					
ANR	642376	ArgumentList			641978	1					
ANR	642377	ReturnStatement	return false ;	3051:3:88009:88021	641978	1	True				
ANR	642378	Identifier	false		641978	0					
ANR	642379	IfStatement	if ( parenStack -> back ( ) > 0 && isLegalNameChar ( lastWord [ 0 ] ) && isLegalNameChar ( nextChar ) )		641978	15					
ANR	642380	Condition	parenStack -> back ( ) > 0 && isLegalNameChar ( lastWord [ 0 ] ) && isLegalNameChar ( nextChar )	3055:5:88066:88166	641978	0	True				
ANR	642381	AndExpression	parenStack -> back ( ) > 0 && isLegalNameChar ( lastWord [ 0 ] ) && isLegalNameChar ( nextChar )		641978	0		&&			
ANR	642382	RelationalExpression	parenStack -> back ( ) > 0		641978	0		>			
ANR	642383	CallExpression	parenStack -> back ( )		641978	0					
ANR	642384	Callee	parenStack -> back		641978	0					
ANR	642385	PtrMemberAccess	parenStack -> back		641978	0					
ANR	642386	Identifier	parenStack		641978	0					
ANR	642387	Identifier	back		641978	1					
ANR	642388	ArgumentList			641978	1					
ANR	642389	PrimaryExpression	0		641978	1					
ANR	642390	AndExpression	isLegalNameChar ( lastWord [ 0 ] ) && isLegalNameChar ( nextChar )		641978	1		&&			
ANR	642391	CallExpression	isLegalNameChar ( lastWord [ 0 ] )		641978	0					
ANR	642392	Callee	isLegalNameChar		641978	0					
ANR	642393	Identifier	isLegalNameChar		641978	0					
ANR	642394	ArgumentList	lastWord [ 0 ]		641978	1					
ANR	642395	Argument	lastWord [ 0 ]		641978	0					
ANR	642396	ArrayIndexing	lastWord [ 0 ]		641978	0					
ANR	642397	Identifier	lastWord		641978	0					
ANR	642398	PrimaryExpression	0		641978	1					
ANR	642399	CallExpression	isLegalNameChar ( nextChar )		641978	1					
ANR	642400	Callee	isLegalNameChar		641978	0					
ANR	642401	Identifier	isLegalNameChar		641978	0					
ANR	642402	ArgumentList	nextChar		641978	1					
ANR	642403	Argument	nextChar		641978	0					
ANR	642404	Identifier	nextChar		641978	0					
ANR	642405	CompoundStatement		89:2:2606:2662	641978	1					
ANR	642406	IdentifierDeclStatement	const string * followingOperator = getFollowingOperator ( ) ;	3061:2:88315:88371	641978	0	True				
ANR	642407	IdentifierDecl	* followingOperator = getFollowingOperator ( )		641978	0					
ANR	642408	IdentifierDeclType	const string *		641978	0					
ANR	642409	Identifier	followingOperator		641978	1					
ANR	642410	AssignmentExpression	* followingOperator = getFollowingOperator ( )		641978	2		=			
ANR	642411	Identifier	followingOperator		641978	0					
ANR	642412	CallExpression	getFollowingOperator ( )		641978	1					
ANR	642413	Callee	getFollowingOperator		641978	0					
ANR	642414	Identifier	getFollowingOperator		641978	0					
ANR	642415	ArgumentList			641978	1					
ANR	642416	IfStatement	if ( followingOperator != nullptr && followingOperator != & AS_MULT && followingOperator != & AS_BIT_AND )		641978	1					
ANR	642417	Condition	followingOperator != nullptr && followingOperator != & AS_MULT && followingOperator != & AS_BIT_AND	3062:6:88379:88495	641978	0	True				
ANR	642418	AndExpression	followingOperator != nullptr && followingOperator != & AS_MULT && followingOperator != & AS_BIT_AND		641978	0		&&			
ANR	642419	EqualityExpression	followingOperator != nullptr		641978	0		!=			
ANR	642420	Identifier	followingOperator		641978	0					
ANR	642421	Identifier	nullptr		641978	1					
ANR	642422	AndExpression	followingOperator != & AS_MULT && followingOperator != & AS_BIT_AND		641978	1		&&			
ANR	642423	EqualityExpression	followingOperator != & AS_MULT		641978	0		!=			
ANR	642424	Identifier	followingOperator		641978	0					
ANR	642425	UnaryOperationExpression	& AS_MULT		641978	1					
ANR	642426	UnaryOperator	&		641978	0					
ANR	642427	Identifier	AS_MULT		641978	1					
ANR	642428	EqualityExpression	followingOperator != & AS_BIT_AND		641978	1		!=			
ANR	642429	Identifier	followingOperator		641978	0					
ANR	642430	UnaryOperationExpression	& AS_BIT_AND		641978	1					
ANR	642431	UnaryOperator	&		641978	0					
ANR	642432	Identifier	AS_BIT_AND		641978	1					
ANR	642433	CompoundStatement		93:2:2791:2791	641978	1					
ANR	642434	IfStatement	if ( followingOperator == & AS_ASSIGN || followingOperator == & AS_COLON )		641978	0					
ANR	642435	Condition	followingOperator == & AS_ASSIGN || followingOperator == & AS_COLON	3066:7:88509:88573	641978	0	True				
ANR	642436	OrExpression	followingOperator == & AS_ASSIGN || followingOperator == & AS_COLON		641978	0		||			
ANR	642437	EqualityExpression	followingOperator == & AS_ASSIGN		641978	0		==			
ANR	642438	Identifier	followingOperator		641978	0					
ANR	642439	UnaryOperationExpression	& AS_ASSIGN		641978	1					
ANR	642440	UnaryOperator	&		641978	0					
ANR	642441	Identifier	AS_ASSIGN		641978	1					
ANR	642442	EqualityExpression	followingOperator == & AS_COLON		641978	1		==			
ANR	642443	Identifier	followingOperator		641978	0					
ANR	642444	UnaryOperationExpression	& AS_COLON		641978	1					
ANR	642445	UnaryOperator	&		641978	0					
ANR	642446	Identifier	AS_COLON		641978	1					
ANR	642447	ReturnStatement	return true ;	3067:4:88580:88591	641978	1	True				
ANR	642448	Identifier	true		641978	0					
ANR	642449	ReturnStatement	return false ;	3068:3:88596:88608	641978	1	True				
ANR	642450	Identifier	false		641978	0					
ANR	642451	IfStatement	"if ( isBraceType ( braceTypeStack -> back ( ) , COMMAND_TYPE ) || squareBracketCount > 0 )"		641978	2					
ANR	642452	Condition	"isBraceType ( braceTypeStack -> back ( ) , COMMAND_TYPE ) || squareBracketCount > 0"	3071:6:88621:88705	641978	0	True				
ANR	642453	OrExpression	"isBraceType ( braceTypeStack -> back ( ) , COMMAND_TYPE ) || squareBracketCount > 0"		641978	0		||			
ANR	642454	CallExpression	"isBraceType ( braceTypeStack -> back ( ) , COMMAND_TYPE )"		641978	0					
ANR	642455	Callee	isBraceType		641978	0					
ANR	642456	Identifier	isBraceType		641978	0					
ANR	642457	ArgumentList	braceTypeStack -> back ( )		641978	1					
ANR	642458	Argument	braceTypeStack -> back ( )		641978	0					
ANR	642459	CallExpression	braceTypeStack -> back ( )		641978	0					
ANR	642460	Callee	braceTypeStack -> back		641978	0					
ANR	642461	PtrMemberAccess	braceTypeStack -> back		641978	0					
ANR	642462	Identifier	braceTypeStack		641978	0					
ANR	642463	Identifier	back		641978	1					
ANR	642464	ArgumentList			641978	1					
ANR	642465	Argument	COMMAND_TYPE		641978	1					
ANR	642466	Identifier	COMMAND_TYPE		641978	0					
ANR	642467	RelationalExpression	squareBracketCount > 0		641978	1		>			
ANR	642468	Identifier	squareBracketCount		641978	0					
ANR	642469	PrimaryExpression	0		641978	1					
ANR	642470	ReturnStatement	return false ;	3073:3:88711:88723	641978	1	True				
ANR	642471	Identifier	false		641978	0					
ANR	642472	ReturnStatement	return true ;	3074:2:88727:88738	641978	3	True				
ANR	642473	Identifier	true		641978	0					
ANR	642474	IfStatement	"if ( parenStack -> back ( ) > 0 && nextChar == '(' && previousNonWSChar != ',' && previousNonWSChar != '(' && previousNonWSChar != '!' && previousNonWSChar != '&' && previousNonWSChar != '*' && previousNonWSChar != '|' )"		641978	16					
ANR	642475	Condition	"parenStack -> back ( ) > 0 && nextChar == '(' && previousNonWSChar != ',' && previousNonWSChar != '(' && previousNonWSChar != '!' && previousNonWSChar != '&' && previousNonWSChar != '*' && previousNonWSChar != '|'"	3078:5:88802:89073	641978	0	True				
ANR	642476	AndExpression	"parenStack -> back ( ) > 0 && nextChar == '(' && previousNonWSChar != ',' && previousNonWSChar != '(' && previousNonWSChar != '!' && previousNonWSChar != '&' && previousNonWSChar != '*' && previousNonWSChar != '|'"		641978	0		&&			
ANR	642477	RelationalExpression	parenStack -> back ( ) > 0		641978	0		>			
ANR	642478	CallExpression	parenStack -> back ( )		641978	0					
ANR	642479	Callee	parenStack -> back		641978	0					
ANR	642480	PtrMemberAccess	parenStack -> back		641978	0					
ANR	642481	Identifier	parenStack		641978	0					
ANR	642482	Identifier	back		641978	1					
ANR	642483	ArgumentList			641978	1					
ANR	642484	PrimaryExpression	0		641978	1					
ANR	642485	AndExpression	"nextChar == '(' && previousNonWSChar != ',' && previousNonWSChar != '(' && previousNonWSChar != '!' && previousNonWSChar != '&' && previousNonWSChar != '*' && previousNonWSChar != '|'"		641978	1		&&			
ANR	642486	EqualityExpression	nextChar == '('		641978	0		==			
ANR	642487	Identifier	nextChar		641978	0					
ANR	642488	PrimaryExpression	'('		641978	1					
ANR	642489	AndExpression	"previousNonWSChar != ',' && previousNonWSChar != '(' && previousNonWSChar != '!' && previousNonWSChar != '&' && previousNonWSChar != '*' && previousNonWSChar != '|'"		641978	1		&&			
ANR	642490	EqualityExpression	"previousNonWSChar != ','"		641978	0		!=			
ANR	642491	Identifier	previousNonWSChar		641978	0					
ANR	642492	PrimaryExpression	"','"		641978	1					
ANR	642493	AndExpression	previousNonWSChar != '(' && previousNonWSChar != '!' && previousNonWSChar != '&' && previousNonWSChar != '*' && previousNonWSChar != '|'		641978	1		&&			
ANR	642494	EqualityExpression	previousNonWSChar != '('		641978	0		!=			
ANR	642495	Identifier	previousNonWSChar		641978	0					
ANR	642496	PrimaryExpression	'('		641978	1					
ANR	642497	AndExpression	previousNonWSChar != '!' && previousNonWSChar != '&' && previousNonWSChar != '*' && previousNonWSChar != '|'		641978	1		&&			
ANR	642498	EqualityExpression	previousNonWSChar != '!'		641978	0		!=			
ANR	642499	Identifier	previousNonWSChar		641978	0					
ANR	642500	PrimaryExpression	'!'		641978	1					
ANR	642501	AndExpression	previousNonWSChar != '&' && previousNonWSChar != '*' && previousNonWSChar != '|'		641978	1		&&			
ANR	642502	EqualityExpression	previousNonWSChar != '&'		641978	0		!=			
ANR	642503	Identifier	previousNonWSChar		641978	0					
ANR	642504	PrimaryExpression	'&'		641978	1					
ANR	642505	AndExpression	previousNonWSChar != '*' && previousNonWSChar != '|'		641978	1		&&			
ANR	642506	EqualityExpression	previousNonWSChar != '*'		641978	0		!=			
ANR	642507	Identifier	previousNonWSChar		641978	0					
ANR	642508	PrimaryExpression	'*'		641978	1					
ANR	642509	EqualityExpression	previousNonWSChar != '|'		641978	1		!=			
ANR	642510	Identifier	previousNonWSChar		641978	0					
ANR	642511	PrimaryExpression	'|'		641978	1					
ANR	642512	ReturnStatement	return false ;	3086:2:89078:89090	641978	1	True				
ANR	642513	Identifier	false		641978	0					
ANR	642514	IfStatement	if ( nextChar == '-' || nextChar == '+' )		641978	17					
ANR	642515	Condition	nextChar == '-' || nextChar == '+'	3088:5:89098:89140	641978	0	True				
ANR	642516	OrExpression	nextChar == '-' || nextChar == '+'		641978	0		||			
ANR	642517	EqualityExpression	nextChar == '-'		641978	0		==			
ANR	642518	Identifier	nextChar		641978	0					
ANR	642519	PrimaryExpression	'-'		641978	1					
ANR	642520	EqualityExpression	nextChar == '+'		641978	1		==			
ANR	642521	Identifier	nextChar		641978	0					
ANR	642522	PrimaryExpression	'+'		641978	1					
ANR	642523	CompoundStatement		119:2:3439:3505	641978	1					
ANR	642524	IdentifierDeclStatement	"size_t nextNum = currentLine . find_first_not_of ( "" \\t"" , charNum + 1 ) ;"	3091:2:89148:89214	641978	0	True				
ANR	642525	IdentifierDecl	"nextNum = currentLine . find_first_not_of ( "" \\t"" , charNum + 1 )"		641978	0					
ANR	642526	IdentifierDeclType	size_t		641978	0					
ANR	642527	Identifier	nextNum		641978	1					
ANR	642528	AssignmentExpression	"nextNum = currentLine . find_first_not_of ( "" \\t"" , charNum + 1 )"		641978	2		=			
ANR	642529	Identifier	nextNum		641978	0					
ANR	642530	CallExpression	"currentLine . find_first_not_of ( "" \\t"" , charNum + 1 )"		641978	1					
ANR	642531	Callee	currentLine . find_first_not_of		641978	0					
ANR	642532	MemberAccess	currentLine . find_first_not_of		641978	0					
ANR	642533	Identifier	currentLine		641978	0					
ANR	642534	Identifier	find_first_not_of		641978	1					
ANR	642535	ArgumentList	""" \\t"""		641978	1					
ANR	642536	Argument	""" \\t"""		641978	0					
ANR	642537	PrimaryExpression	""" \\t"""		641978	0					
ANR	642538	Argument	charNum + 1		641978	1					
ANR	642539	AdditiveExpression	charNum + 1		641978	0		+			
ANR	642540	Identifier	charNum		641978	0					
ANR	642541	PrimaryExpression	1		641978	1					
ANR	642542	IfStatement	if ( nextNum != string :: npos )		641978	1					
ANR	642543	Condition	nextNum != string :: npos	3092:6:89222:89244	641978	0	True				
ANR	642544	EqualityExpression	nextNum != string :: npos		641978	0		!=			
ANR	642545	Identifier	nextNum		641978	0					
ANR	642546	Identifier	string :: npos		641978	1					
ANR	642547	CompoundStatement		121:2:3540:3540	641978	1					
ANR	642548	IfStatement	"if ( currentLine . compare ( nextNum , 2 , ""++"" ) != 0 && currentLine . compare ( nextNum , 2 , ""--"" ) != 0 )"		641978	0					
ANR	642549	Condition	"currentLine . compare ( nextNum , 2 , ""++"" ) != 0 && currentLine . compare ( nextNum , 2 , ""--"" ) != 0"	3094:7:89258:89356	641978	0	True				
ANR	642550	AndExpression	"currentLine . compare ( nextNum , 2 , ""++"" ) != 0 && currentLine . compare ( nextNum , 2 , ""--"" ) != 0"		641978	0		&&			
ANR	642551	EqualityExpression	"currentLine . compare ( nextNum , 2 , ""++"" ) != 0"		641978	0		!=			
ANR	642552	CallExpression	"currentLine . compare ( nextNum , 2 , ""++"" )"		641978	0					
ANR	642553	Callee	currentLine . compare		641978	0					
ANR	642554	MemberAccess	currentLine . compare		641978	0					
ANR	642555	Identifier	currentLine		641978	0					
ANR	642556	Identifier	compare		641978	1					
ANR	642557	ArgumentList	nextNum		641978	1					
ANR	642558	Argument	nextNum		641978	0					
ANR	642559	Identifier	nextNum		641978	0					
ANR	642560	Argument	2		641978	1					
ANR	642561	PrimaryExpression	2		641978	0					
ANR	642562	Argument	"""++"""		641978	2					
ANR	642563	PrimaryExpression	"""++"""		641978	0					
ANR	642564	PrimaryExpression	0		641978	1					
ANR	642565	EqualityExpression	"currentLine . compare ( nextNum , 2 , ""--"" ) != 0"		641978	1		!=			
ANR	642566	CallExpression	"currentLine . compare ( nextNum , 2 , ""--"" )"		641978	0					
ANR	642567	Callee	currentLine . compare		641978	0					
ANR	642568	MemberAccess	currentLine . compare		641978	0					
ANR	642569	Identifier	currentLine		641978	0					
ANR	642570	Identifier	compare		641978	1					
ANR	642571	ArgumentList	nextNum		641978	1					
ANR	642572	Argument	nextNum		641978	0					
ANR	642573	Identifier	nextNum		641978	0					
ANR	642574	Argument	2		641978	1					
ANR	642575	PrimaryExpression	2		641978	0					
ANR	642576	Argument	"""--"""		641978	2					
ANR	642577	PrimaryExpression	"""--"""		641978	0					
ANR	642578	PrimaryExpression	0		641978	1					
ANR	642579	ReturnStatement	return false ;	3096:4:89363:89375	641978	1	True				
ANR	642580	Identifier	false		641978	0					
ANR	642581	IdentifierDeclStatement	bool isPR = ( ! isInPotentialCalculation || ( ! isLegalNameChar ( previousNonWSChar ) && ! ( previousNonWSChar == ')' && nextChar == '(' ) && ! ( previousNonWSChar == ')' && currentChar == '*' && ! isImmediatelyPostCast ( ) ) && previousNonWSChar != ']' ) || ( ! isWhiteSpace ( nextChar ) && nextChar != '-' && nextChar != '(' && nextChar != '[' && ! isLegalNameChar ( nextChar ) ) ) ;	3100:1:89386:89909	641978	18	True				
ANR	642582	IdentifierDecl	isPR = ( ! isInPotentialCalculation || ( ! isLegalNameChar ( previousNonWSChar ) && ! ( previousNonWSChar == ')' && nextChar == '(' ) && ! ( previousNonWSChar == ')' && currentChar == '*' && ! isImmediatelyPostCast ( ) ) && previousNonWSChar != ']' ) || ( ! isWhiteSpace ( nextChar ) && nextChar != '-' && nextChar != '(' && nextChar != '[' && ! isLegalNameChar ( nextChar ) ) )		641978	0					
ANR	642583	IdentifierDeclType	bool		641978	0					
ANR	642584	Identifier	isPR		641978	1					
ANR	642585	AssignmentExpression	isPR = ( ! isInPotentialCalculation || ( ! isLegalNameChar ( previousNonWSChar ) && ! ( previousNonWSChar == ')' && nextChar == '(' ) && ! ( previousNonWSChar == ')' && currentChar == '*' && ! isImmediatelyPostCast ( ) ) && previousNonWSChar != ']' ) || ( ! isWhiteSpace ( nextChar ) && nextChar != '-' && nextChar != '(' && nextChar != '[' && ! isLegalNameChar ( nextChar ) ) )		641978	2		=			
ANR	642586	Identifier	isPR		641978	0					
ANR	642587	OrExpression	! isInPotentialCalculation || ( ! isLegalNameChar ( previousNonWSChar ) && ! ( previousNonWSChar == ')' && nextChar == '(' ) && ! ( previousNonWSChar == ')' && currentChar == '*' && ! isImmediatelyPostCast ( ) ) && previousNonWSChar != ']' ) || ( ! isWhiteSpace ( nextChar ) && nextChar != '-' && nextChar != '(' && nextChar != '[' && ! isLegalNameChar ( nextChar ) )		641978	1		||			
ANR	642588	UnaryOperationExpression	! isInPotentialCalculation		641978	0					
ANR	642589	UnaryOperator	!		641978	0					
ANR	642590	Identifier	isInPotentialCalculation		641978	1					
ANR	642591	OrExpression	( ! isLegalNameChar ( previousNonWSChar ) && ! ( previousNonWSChar == ')' && nextChar == '(' ) && ! ( previousNonWSChar == ')' && currentChar == '*' && ! isImmediatelyPostCast ( ) ) && previousNonWSChar != ']' ) || ( ! isWhiteSpace ( nextChar ) && nextChar != '-' && nextChar != '(' && nextChar != '[' && ! isLegalNameChar ( nextChar ) )		641978	1		||			
ANR	642592	AndExpression	! isLegalNameChar ( previousNonWSChar ) && ! ( previousNonWSChar == ')' && nextChar == '(' ) && ! ( previousNonWSChar == ')' && currentChar == '*' && ! isImmediatelyPostCast ( ) ) && previousNonWSChar != ']'		641978	0		&&			
ANR	642593	UnaryOperationExpression	! isLegalNameChar ( previousNonWSChar )		641978	0					
ANR	642594	UnaryOperator	!		641978	0					
ANR	642595	CallExpression	isLegalNameChar ( previousNonWSChar )		641978	1					
ANR	642596	Callee	isLegalNameChar		641978	0					
ANR	642597	Identifier	isLegalNameChar		641978	0					
ANR	642598	ArgumentList	previousNonWSChar		641978	1					
ANR	642599	Argument	previousNonWSChar		641978	0					
ANR	642600	Identifier	previousNonWSChar		641978	0					
ANR	642601	AndExpression	! ( previousNonWSChar == ')' && nextChar == '(' ) && ! ( previousNonWSChar == ')' && currentChar == '*' && ! isImmediatelyPostCast ( ) ) && previousNonWSChar != ']'		641978	1		&&			
ANR	642602	UnaryOperationExpression	! ( previousNonWSChar == ')' && nextChar == '(' )		641978	0					
ANR	642603	UnaryOperator	!		641978	0					
ANR	642604	AndExpression	previousNonWSChar == ')' && nextChar == '('		641978	1		&&			
ANR	642605	EqualityExpression	previousNonWSChar == ')'		641978	0		==			
ANR	642606	Identifier	previousNonWSChar		641978	0					
ANR	642607	PrimaryExpression	')'		641978	1					
ANR	642608	EqualityExpression	nextChar == '('		641978	1		==			
ANR	642609	Identifier	nextChar		641978	0					
ANR	642610	PrimaryExpression	'('		641978	1					
ANR	642611	AndExpression	! ( previousNonWSChar == ')' && currentChar == '*' && ! isImmediatelyPostCast ( ) ) && previousNonWSChar != ']'		641978	1		&&			
ANR	642612	UnaryOperationExpression	! ( previousNonWSChar == ')' && currentChar == '*' && ! isImmediatelyPostCast ( ) )		641978	0					
ANR	642613	UnaryOperator	!		641978	0					
ANR	642614	AndExpression	previousNonWSChar == ')' && currentChar == '*' && ! isImmediatelyPostCast ( )		641978	1		&&			
ANR	642615	EqualityExpression	previousNonWSChar == ')'		641978	0		==			
ANR	642616	Identifier	previousNonWSChar		641978	0					
ANR	642617	PrimaryExpression	')'		641978	1					
ANR	642618	AndExpression	currentChar == '*' && ! isImmediatelyPostCast ( )		641978	1		&&			
ANR	642619	EqualityExpression	currentChar == '*'		641978	0		==			
ANR	642620	Identifier	currentChar		641978	0					
ANR	642621	PrimaryExpression	'*'		641978	1					
ANR	642622	UnaryOperationExpression	! isImmediatelyPostCast ( )		641978	1					
ANR	642623	UnaryOperator	!		641978	0					
ANR	642624	CallExpression	isImmediatelyPostCast ( )		641978	1					
ANR	642625	Callee	isImmediatelyPostCast		641978	0					
ANR	642626	Identifier	isImmediatelyPostCast		641978	0					
ANR	642627	ArgumentList			641978	1					
ANR	642628	EqualityExpression	previousNonWSChar != ']'		641978	1		!=			
ANR	642629	Identifier	previousNonWSChar		641978	0					
ANR	642630	PrimaryExpression	']'		641978	1					
ANR	642631	AndExpression	! isWhiteSpace ( nextChar ) && nextChar != '-' && nextChar != '(' && nextChar != '[' && ! isLegalNameChar ( nextChar )		641978	1		&&			
ANR	642632	UnaryOperationExpression	! isWhiteSpace ( nextChar )		641978	0					
ANR	642633	UnaryOperator	!		641978	0					
ANR	642634	CallExpression	isWhiteSpace ( nextChar )		641978	1					
ANR	642635	Callee	isWhiteSpace		641978	0					
ANR	642636	Identifier	isWhiteSpace		641978	0					
ANR	642637	ArgumentList	nextChar		641978	1					
ANR	642638	Argument	nextChar		641978	0					
ANR	642639	Identifier	nextChar		641978	0					
ANR	642640	AndExpression	nextChar != '-' && nextChar != '(' && nextChar != '[' && ! isLegalNameChar ( nextChar )		641978	1		&&			
ANR	642641	EqualityExpression	nextChar != '-'		641978	0		!=			
ANR	642642	Identifier	nextChar		641978	0					
ANR	642643	PrimaryExpression	'-'		641978	1					
ANR	642644	AndExpression	nextChar != '(' && nextChar != '[' && ! isLegalNameChar ( nextChar )		641978	1		&&			
ANR	642645	EqualityExpression	nextChar != '('		641978	0		!=			
ANR	642646	Identifier	nextChar		641978	0					
ANR	642647	PrimaryExpression	'('		641978	1					
ANR	642648	AndExpression	nextChar != '[' && ! isLegalNameChar ( nextChar )		641978	1		&&			
ANR	642649	EqualityExpression	nextChar != '['		641978	0		!=			
ANR	642650	Identifier	nextChar		641978	0					
ANR	642651	PrimaryExpression	'['		641978	1					
ANR	642652	UnaryOperationExpression	! isLegalNameChar ( nextChar )		641978	1					
ANR	642653	UnaryOperator	!		641978	0					
ANR	642654	CallExpression	isLegalNameChar ( nextChar )		641978	1					
ANR	642655	Callee	isLegalNameChar		641978	0					
ANR	642656	Identifier	isLegalNameChar		641978	0					
ANR	642657	ArgumentList	nextChar		641978	1					
ANR	642658	Argument	nextChar		641978	0					
ANR	642659	Identifier	nextChar		641978	0					
ANR	642660	ReturnStatement	return isPR ;	3112:1:89913:89924	641978	19	True				
ANR	642661	Identifier	isPR		641978	0					
ANR	642662	ReturnType	bool		641978	1					
ANR	642663	Identifier	ASFormatter :: isPointerOrReference		641978	2					
ANR	642664	ParameterList			641978	3					
ANR	642665	CFGEntryNode	ENTRY		641978		True				
ANR	642666	CFGExitNode	EXIT		641978		True				
ANR	642667	Symbol	& AS_BIT_AND		641978						
ANR	642668	Symbol	nextNum		641978						
ANR	642669	Symbol	followingOperator		641978						
ANR	642670	Symbol	isLegalNameChar		641978						
ANR	642671	Symbol	isWhiteSpace		641978						
ANR	642672	Symbol	isInTemplate		641978						
ANR	642673	Symbol	getFollowingOperator		641978						
ANR	642674	Symbol	* currentLine		641978						
ANR	642675	Symbol	& AS_FOREACH		641978						
ANR	642676	Symbol	isCharImmediatelyPostOperator		641978						
ANR	642677	Symbol	isBraceType		641978						
ANR	642678	Symbol	isArrayOperator		641978						
ANR	642679	Symbol	& AS_COLON		641978						
ANR	642680	Symbol	isPR		641978						
ANR	642681	Symbol	followingText . length		641978						
ANR	642682	Symbol	currentChar		641978						
ANR	642683	Symbol	* braceTypeStack		641978						
ANR	642684	Symbol	nextText		641978						
ANR	642685	Symbol	previousCommandChar		641978						
ANR	642686	Symbol	isInClassInitializer		641978						
ANR	642687	Symbol	COMMAND_TYPE		641978						
ANR	642688	Symbol	nextText . length		641978						
ANR	642689	Symbol	* charNum		641978						
ANR	642690	Symbol	isCharImmediatelyPostReturn		641978						
ANR	642691	Symbol	nextChar		641978						
ANR	642692	Symbol	* parenStack		641978						
ANR	642693	Symbol	& AS_ASSIGN		641978						
ANR	642694	Symbol	isDigit		641978						
ANR	642695	Symbol	true		641978						
ANR	642696	Symbol	& AS_QFOREACH		641978						
ANR	642697	Symbol	parenStack		641978						
ANR	642698	Symbol	& AS_CATCH		641978						
ANR	642699	Symbol	nullptr		641978						
ANR	642700	Symbol	previousNonWSChar		641978						
ANR	642701	Symbol	braceTypeStack		641978						
ANR	642702	Symbol	lastWord		641978						
ANR	642703	Symbol	isImmediatelyPostCast		641978						
ANR	642704	Symbol	string :: npos		641978						
ANR	642705	Symbol	getPreviousWord		641978						
ANR	642706	Symbol	isPointerOrReferenceVariable		641978						
ANR	642707	Symbol	* followingText		641978						
ANR	642708	Symbol	currentLine . substr		641978						
ANR	642709	Symbol	charNum		641978						
ANR	642710	Symbol	followingText		641978						
ANR	642711	Symbol	currentLine . compare		641978						
ANR	642712	Symbol	currentLine		641978						
ANR	642713	Symbol	& AS_MULT		641978						
ANR	642714	Symbol	false		641978						
ANR	642715	Symbol	ARRAY_TYPE		641978						
ANR	642716	Symbol	* lastWord		641978						
ANR	642717	Symbol	currentLine . find_first_not_of		641978						
ANR	642718	Symbol	braceTypeStack -> back		641978						
ANR	642719	Symbol	isInPotentialCalculation		641978						
ANR	642720	Symbol	currentHeader		641978						
ANR	642721	Symbol	parenStack -> back		641978						
ANR	642722	Symbol	currentLine . length		641978						
ANR	642723	Symbol	isJavaStyle		641978						
ANR	642724	Symbol	* nextText		641978						
ANR	642725	Symbol	squareBracketCount		641978						
ANR	642726	Symbol	lastWord . empty		641978						
ANR	642727	Symbol	peekNextText		641978						
ANR	642728	Symbol	foundCastOperator		641978						
ANR	642729	Symbol	isCharImmediatelyPostTemplate		641978						
ANR	642730	Function	ASFormatter :: isDereferenceOrAddressOf	3123:0:90226:92485							
ANR	642731	FunctionDef	ASFormatter :: isDereferenceOrAddressOf ()		642730	0					
ANR	642732	CompoundStatement		3124:0:90277:92485	642730	0					
ANR	642733	ExpressionStatement	assert ( currentChar == '*' || currentChar == '&' || currentChar == '^' )	3125:1:90280:90350	642730	0	True				
ANR	642734	CallExpression	assert ( currentChar == '*' || currentChar == '&' || currentChar == '^' )		642730	0					
ANR	642735	Callee	assert		642730	0					
ANR	642736	Identifier	assert		642730	0					
ANR	642737	ArgumentList	currentChar == '*' || currentChar == '&' || currentChar == '^'		642730	1					
ANR	642738	Argument	currentChar == '*' || currentChar == '&' || currentChar == '^'		642730	0					
ANR	642739	OrExpression	currentChar == '*' || currentChar == '&' || currentChar == '^'		642730	0		||			
ANR	642740	EqualityExpression	currentChar == '*'		642730	0		==			
ANR	642741	Identifier	currentChar		642730	0					
ANR	642742	PrimaryExpression	'*'		642730	1					
ANR	642743	OrExpression	currentChar == '&' || currentChar == '^'		642730	1		||			
ANR	642744	EqualityExpression	currentChar == '&'		642730	0		==			
ANR	642745	Identifier	currentChar		642730	0					
ANR	642746	PrimaryExpression	'&'		642730	1					
ANR	642747	EqualityExpression	currentChar == '^'		642730	1		==			
ANR	642748	Identifier	currentChar		642730	0					
ANR	642749	PrimaryExpression	'^'		642730	1					
ANR	642750	IfStatement	if ( isCharImmediatelyPostTemplate )		642730	1					
ANR	642751	Condition	isCharImmediatelyPostTemplate	3127:5:90358:90386	642730	0	True				
ANR	642752	Identifier	isCharImmediatelyPostTemplate		642730	0					
ANR	642753	ReturnStatement	return false ;	3128:2:90391:90403	642730	1	True				
ANR	642754	Identifier	false		642730	0					
ANR	642755	IfStatement	"if ( previousNonWSChar == '=' || previousNonWSChar == ',' || previousNonWSChar == '.' || previousNonWSChar == '{' || previousNonWSChar == '>' || previousNonWSChar == '<' || previousNonWSChar == '?' || isCharImmediatelyPostLineComment || isCharImmediatelyPostComment || isCharImmediatelyPostReturn )"		642730	2					
ANR	642756	Condition	"previousNonWSChar == '=' || previousNonWSChar == ',' || previousNonWSChar == '.' || previousNonWSChar == '{' || previousNonWSChar == '>' || previousNonWSChar == '<' || previousNonWSChar == '?' || isCharImmediatelyPostLineComment || isCharImmediatelyPostComment || isCharImmediatelyPostReturn"	3130:5:90411:90782	642730	0	True				
ANR	642757	OrExpression	"previousNonWSChar == '=' || previousNonWSChar == ',' || previousNonWSChar == '.' || previousNonWSChar == '{' || previousNonWSChar == '>' || previousNonWSChar == '<' || previousNonWSChar == '?' || isCharImmediatelyPostLineComment || isCharImmediatelyPostComment || isCharImmediatelyPostReturn"		642730	0		||			
ANR	642758	EqualityExpression	previousNonWSChar == '='		642730	0		==			
ANR	642759	Identifier	previousNonWSChar		642730	0					
ANR	642760	PrimaryExpression	'='		642730	1					
ANR	642761	OrExpression	"previousNonWSChar == ',' || previousNonWSChar == '.' || previousNonWSChar == '{' || previousNonWSChar == '>' || previousNonWSChar == '<' || previousNonWSChar == '?' || isCharImmediatelyPostLineComment || isCharImmediatelyPostComment || isCharImmediatelyPostReturn"		642730	1		||			
ANR	642762	EqualityExpression	"previousNonWSChar == ','"		642730	0		==			
ANR	642763	Identifier	previousNonWSChar		642730	0					
ANR	642764	PrimaryExpression	"','"		642730	1					
ANR	642765	OrExpression	previousNonWSChar == '.' || previousNonWSChar == '{' || previousNonWSChar == '>' || previousNonWSChar == '<' || previousNonWSChar == '?' || isCharImmediatelyPostLineComment || isCharImmediatelyPostComment || isCharImmediatelyPostReturn		642730	1		||			
ANR	642766	EqualityExpression	previousNonWSChar == '.'		642730	0		==			
ANR	642767	Identifier	previousNonWSChar		642730	0					
ANR	642768	PrimaryExpression	'.'		642730	1					
ANR	642769	OrExpression	previousNonWSChar == '{' || previousNonWSChar == '>' || previousNonWSChar == '<' || previousNonWSChar == '?' || isCharImmediatelyPostLineComment || isCharImmediatelyPostComment || isCharImmediatelyPostReturn		642730	1		||			
ANR	642770	EqualityExpression	previousNonWSChar == '{'		642730	0		==			
ANR	642771	Identifier	previousNonWSChar		642730	0					
ANR	642772	PrimaryExpression	'{'		642730	1					
ANR	642773	OrExpression	previousNonWSChar == '>' || previousNonWSChar == '<' || previousNonWSChar == '?' || isCharImmediatelyPostLineComment || isCharImmediatelyPostComment || isCharImmediatelyPostReturn		642730	1		||			
ANR	642774	EqualityExpression	previousNonWSChar == '>'		642730	0		==			
ANR	642775	Identifier	previousNonWSChar		642730	0					
ANR	642776	PrimaryExpression	'>'		642730	1					
ANR	642777	OrExpression	previousNonWSChar == '<' || previousNonWSChar == '?' || isCharImmediatelyPostLineComment || isCharImmediatelyPostComment || isCharImmediatelyPostReturn		642730	1		||			
ANR	642778	EqualityExpression	previousNonWSChar == '<'		642730	0		==			
ANR	642779	Identifier	previousNonWSChar		642730	0					
ANR	642780	PrimaryExpression	'<'		642730	1					
ANR	642781	OrExpression	previousNonWSChar == '?' || isCharImmediatelyPostLineComment || isCharImmediatelyPostComment || isCharImmediatelyPostReturn		642730	1		||			
ANR	642782	EqualityExpression	previousNonWSChar == '?'		642730	0		==			
ANR	642783	Identifier	previousNonWSChar		642730	0					
ANR	642784	PrimaryExpression	'?'		642730	1					
ANR	642785	OrExpression	isCharImmediatelyPostLineComment || isCharImmediatelyPostComment || isCharImmediatelyPostReturn		642730	1		||			
ANR	642786	Identifier	isCharImmediatelyPostLineComment		642730	0					
ANR	642787	OrExpression	isCharImmediatelyPostComment || isCharImmediatelyPostReturn		642730	1		||			
ANR	642788	Identifier	isCharImmediatelyPostComment		642730	0					
ANR	642789	Identifier	isCharImmediatelyPostReturn		642730	1					
ANR	642790	ReturnStatement	return true ;	3140:2:90787:90798	642730	1	True				
ANR	642791	Identifier	true		642730	0					
ANR	642792	IdentifierDeclStatement	char nextChar = peekNextChar ( ) ;	3142:1:90802:90832	642730	3	True				
ANR	642793	IdentifierDecl	nextChar = peekNextChar ( )		642730	0					
ANR	642794	IdentifierDeclType	char		642730	0					
ANR	642795	Identifier	nextChar		642730	1					
ANR	642796	AssignmentExpression	nextChar = peekNextChar ( )		642730	2		=			
ANR	642797	Identifier	nextChar		642730	0					
ANR	642798	CallExpression	peekNextChar ( )		642730	1					
ANR	642799	Callee	peekNextChar		642730	0					
ANR	642800	Identifier	peekNextChar		642730	0					
ANR	642801	ArgumentList			642730	1					
ANR	642802	IfStatement	if ( currentChar == '*' && nextChar == '*' )		642730	4					
ANR	642803	Condition	currentChar == '*' && nextChar == '*'	3143:5:90839:90875	642730	0	True				
ANR	642804	AndExpression	currentChar == '*' && nextChar == '*'		642730	0		&&			
ANR	642805	EqualityExpression	currentChar == '*'		642730	0		==			
ANR	642806	Identifier	currentChar		642730	0					
ANR	642807	PrimaryExpression	'*'		642730	1					
ANR	642808	EqualityExpression	nextChar == '*'		642730	1		==			
ANR	642809	Identifier	nextChar		642730	0					
ANR	642810	PrimaryExpression	'*'		642730	1					
ANR	642811	CompoundStatement		21:1:601:601	642730	1					
ANR	642812	IfStatement	if ( previousNonWSChar == '(' )		642730	0					
ANR	642813	Condition	previousNonWSChar == '('	3145:6:90887:90910	642730	0	True				
ANR	642814	EqualityExpression	previousNonWSChar == '('		642730	0		==			
ANR	642815	Identifier	previousNonWSChar		642730	0					
ANR	642816	PrimaryExpression	'('		642730	1					
ANR	642817	ReturnStatement	return true ;	3146:3:90916:90927	642730	1	True				
ANR	642818	Identifier	true		642730	0					
ANR	642819	IfStatement	if ( ( int ) currentLine . length ( ) < charNum + 2 )		642730	1					
ANR	642820	Condition	( int ) currentLine . length ( ) < charNum + 2	3147:6:90935:90974	642730	0	True				
ANR	642821	RelationalExpression	( int ) currentLine . length ( ) < charNum + 2		642730	0		<			
ANR	642822	CastExpression	( int ) currentLine . length ( )		642730	0					
ANR	642823	CastTarget	int		642730	0					
ANR	642824	CallExpression	currentLine . length ( )		642730	1					
ANR	642825	Callee	currentLine . length		642730	0					
ANR	642826	MemberAccess	currentLine . length		642730	0					
ANR	642827	Identifier	currentLine		642730	0					
ANR	642828	Identifier	length		642730	1					
ANR	642829	ArgumentList			642730	1					
ANR	642830	AdditiveExpression	charNum + 2		642730	1		+			
ANR	642831	Identifier	charNum		642730	0					
ANR	642832	PrimaryExpression	2		642730	1					
ANR	642833	ReturnStatement	return true ;	3148:3:90980:90991	642730	1	True				
ANR	642834	Identifier	true		642730	0					
ANR	642835	ReturnStatement	return false ;	3149:2:90995:91007	642730	2	True				
ANR	642836	Identifier	false		642730	0					
ANR	642837	IfStatement	if ( currentChar == '&' && nextChar == '&' )		642730	5					
ANR	642838	Condition	currentChar == '&' && nextChar == '&'	3151:5:91017:91053	642730	0	True				
ANR	642839	AndExpression	currentChar == '&' && nextChar == '&'		642730	0		&&			
ANR	642840	EqualityExpression	currentChar == '&'		642730	0		==			
ANR	642841	Identifier	currentChar		642730	0					
ANR	642842	PrimaryExpression	'&'		642730	1					
ANR	642843	EqualityExpression	nextChar == '&'		642730	1		==			
ANR	642844	Identifier	nextChar		642730	0					
ANR	642845	PrimaryExpression	'&'		642730	1					
ANR	642846	CompoundStatement		29:1:779:779	642730	1					
ANR	642847	IfStatement	if ( previousNonWSChar == '(' || isInTemplate )		642730	0					
ANR	642848	Condition	previousNonWSChar == '(' || isInTemplate	3153:6:91065:91104	642730	0	True				
ANR	642849	OrExpression	previousNonWSChar == '(' || isInTemplate		642730	0		||			
ANR	642850	EqualityExpression	previousNonWSChar == '('		642730	0		==			
ANR	642851	Identifier	previousNonWSChar		642730	0					
ANR	642852	PrimaryExpression	'('		642730	1					
ANR	642853	Identifier	isInTemplate		642730	1					
ANR	642854	ReturnStatement	return true ;	3154:3:91110:91121	642730	1	True				
ANR	642855	Identifier	true		642730	0					
ANR	642856	IfStatement	if ( ( int ) currentLine . length ( ) < charNum + 2 )		642730	1					
ANR	642857	Condition	( int ) currentLine . length ( ) < charNum + 2	3155:6:91129:91168	642730	0	True				
ANR	642858	RelationalExpression	( int ) currentLine . length ( ) < charNum + 2		642730	0		<			
ANR	642859	CastExpression	( int ) currentLine . length ( )		642730	0					
ANR	642860	CastTarget	int		642730	0					
ANR	642861	CallExpression	currentLine . length ( )		642730	1					
ANR	642862	Callee	currentLine . length		642730	0					
ANR	642863	MemberAccess	currentLine . length		642730	0					
ANR	642864	Identifier	currentLine		642730	0					
ANR	642865	Identifier	length		642730	1					
ANR	642866	ArgumentList			642730	1					
ANR	642867	AdditiveExpression	charNum + 2		642730	1		+			
ANR	642868	Identifier	charNum		642730	0					
ANR	642869	PrimaryExpression	2		642730	1					
ANR	642870	ReturnStatement	return true ;	3156:3:91174:91185	642730	1	True				
ANR	642871	Identifier	true		642730	0					
ANR	642872	ReturnStatement	return false ;	3157:2:91189:91201	642730	2	True				
ANR	642873	Identifier	false		642730	0					
ANR	642874	IfStatement	"if ( charNum == ( int ) currentLine . find_first_not_of ( "" \\t"" ) && ( isBraceType ( braceTypeStack -> back ( ) , COMMAND_TYPE ) || parenStack -> back ( ) != 0 ) )"		642730	6					
ANR	642875	Condition	"charNum == ( int ) currentLine . find_first_not_of ( "" \\t"" ) && ( isBraceType ( braceTypeStack -> back ( ) , COMMAND_TYPE ) || parenStack -> back ( ) != 0 )"	3161:5:91245:91401	642730	0	True				
ANR	642876	AndExpression	"charNum == ( int ) currentLine . find_first_not_of ( "" \\t"" ) && ( isBraceType ( braceTypeStack -> back ( ) , COMMAND_TYPE ) || parenStack -> back ( ) != 0 )"		642730	0		&&			
ANR	642877	EqualityExpression	"charNum == ( int ) currentLine . find_first_not_of ( "" \\t"" )"		642730	0		==			
ANR	642878	Identifier	charNum		642730	0					
ANR	642879	CastExpression	"( int ) currentLine . find_first_not_of ( "" \\t"" )"		642730	1					
ANR	642880	CastTarget	int		642730	0					
ANR	642881	CallExpression	"currentLine . find_first_not_of ( "" \\t"" )"		642730	1					
ANR	642882	Callee	currentLine . find_first_not_of		642730	0					
ANR	642883	MemberAccess	currentLine . find_first_not_of		642730	0					
ANR	642884	Identifier	currentLine		642730	0					
ANR	642885	Identifier	find_first_not_of		642730	1					
ANR	642886	ArgumentList	""" \\t"""		642730	1					
ANR	642887	Argument	""" \\t"""		642730	0					
ANR	642888	PrimaryExpression	""" \\t"""		642730	0					
ANR	642889	OrExpression	"isBraceType ( braceTypeStack -> back ( ) , COMMAND_TYPE ) || parenStack -> back ( ) != 0"		642730	1		||			
ANR	642890	CallExpression	"isBraceType ( braceTypeStack -> back ( ) , COMMAND_TYPE )"		642730	0					
ANR	642891	Callee	isBraceType		642730	0					
ANR	642892	Identifier	isBraceType		642730	0					
ANR	642893	ArgumentList	braceTypeStack -> back ( )		642730	1					
ANR	642894	Argument	braceTypeStack -> back ( )		642730	0					
ANR	642895	CallExpression	braceTypeStack -> back ( )		642730	0					
ANR	642896	Callee	braceTypeStack -> back		642730	0					
ANR	642897	PtrMemberAccess	braceTypeStack -> back		642730	0					
ANR	642898	Identifier	braceTypeStack		642730	0					
ANR	642899	Identifier	back		642730	1					
ANR	642900	ArgumentList			642730	1					
ANR	642901	Argument	COMMAND_TYPE		642730	1					
ANR	642902	Identifier	COMMAND_TYPE		642730	0					
ANR	642903	EqualityExpression	parenStack -> back ( ) != 0		642730	1		!=			
ANR	642904	CallExpression	parenStack -> back ( )		642730	0					
ANR	642905	Callee	parenStack -> back		642730	0					
ANR	642906	PtrMemberAccess	parenStack -> back		642730	0					
ANR	642907	Identifier	parenStack		642730	0					
ANR	642908	Identifier	back		642730	1					
ANR	642909	ArgumentList			642730	1					
ANR	642910	PrimaryExpression	0		642730	1					
ANR	642911	ReturnStatement	return true ;	3164:2:91406:91417	642730	1	True				
ANR	642912	Identifier	true		642730	0					
ANR	642913	IdentifierDeclStatement	string nextText = peekNextText ( currentLine . substr ( charNum + 1 ) ) ;	3166:1:91421:91484	642730	7	True				
ANR	642914	IdentifierDecl	nextText = peekNextText ( currentLine . substr ( charNum + 1 ) )		642730	0					
ANR	642915	IdentifierDeclType	string		642730	0					
ANR	642916	Identifier	nextText		642730	1					
ANR	642917	AssignmentExpression	nextText = peekNextText ( currentLine . substr ( charNum + 1 ) )		642730	2		=			
ANR	642918	Identifier	nextText		642730	0					
ANR	642919	CallExpression	peekNextText ( currentLine . substr ( charNum + 1 ) )		642730	1					
ANR	642920	Callee	peekNextText		642730	0					
ANR	642921	Identifier	peekNextText		642730	0					
ANR	642922	ArgumentList	currentLine . substr ( charNum + 1 )		642730	1					
ANR	642923	Argument	currentLine . substr ( charNum + 1 )		642730	0					
ANR	642924	CallExpression	currentLine . substr ( charNum + 1 )		642730	0					
ANR	642925	Callee	currentLine . substr		642730	0					
ANR	642926	MemberAccess	currentLine . substr		642730	0					
ANR	642927	Identifier	currentLine		642730	0					
ANR	642928	Identifier	substr		642730	1					
ANR	642929	ArgumentList	charNum + 1		642730	1					
ANR	642930	Argument	charNum + 1		642730	0					
ANR	642931	AdditiveExpression	charNum + 1		642730	0		+			
ANR	642932	Identifier	charNum		642730	0					
ANR	642933	PrimaryExpression	1		642730	1					
ANR	642934	IfStatement	if ( nextText . length ( ) > 0 )		642730	8					
ANR	642935	Condition	nextText . length ( ) > 0	3167:5:91491:91511	642730	0	True				
ANR	642936	RelationalExpression	nextText . length ( ) > 0		642730	0		>			
ANR	642937	CallExpression	nextText . length ( )		642730	0					
ANR	642938	Callee	nextText . length		642730	0					
ANR	642939	MemberAccess	nextText . length		642730	0					
ANR	642940	Identifier	nextText		642730	0					
ANR	642941	Identifier	length		642730	1					
ANR	642942	ArgumentList			642730	1					
ANR	642943	PrimaryExpression	0		642730	1					
ANR	642944	CompoundStatement		45:1:1237:1237	642730	1					
ANR	642945	IfStatement	"if ( nextText [ 0 ] == ')' || nextText [ 0 ] == '>' || nextText [ 0 ] == ',' || nextText [ 0 ] == '=' )"		642730	0					
ANR	642946	Condition	"nextText [ 0 ] == ')' || nextText [ 0 ] == '>' || nextText [ 0 ] == ',' || nextText [ 0 ] == '='"	3169:6:91523:91616	642730	0	True				
ANR	642947	OrExpression	"nextText [ 0 ] == ')' || nextText [ 0 ] == '>' || nextText [ 0 ] == ',' || nextText [ 0 ] == '='"		642730	0		||			
ANR	642948	EqualityExpression	nextText [ 0 ] == ')'		642730	0		==			
ANR	642949	ArrayIndexing	nextText [ 0 ]		642730	0					
ANR	642950	Identifier	nextText		642730	0					
ANR	642951	PrimaryExpression	0		642730	1					
ANR	642952	PrimaryExpression	')'		642730	1					
ANR	642953	OrExpression	"nextText [ 0 ] == '>' || nextText [ 0 ] == ',' || nextText [ 0 ] == '='"		642730	1		||			
ANR	642954	EqualityExpression	nextText [ 0 ] == '>'		642730	0		==			
ANR	642955	ArrayIndexing	nextText [ 0 ]		642730	0					
ANR	642956	Identifier	nextText		642730	0					
ANR	642957	PrimaryExpression	0		642730	1					
ANR	642958	PrimaryExpression	'>'		642730	1					
ANR	642959	OrExpression	"nextText [ 0 ] == ',' || nextText [ 0 ] == '='"		642730	1		||			
ANR	642960	EqualityExpression	"nextText [ 0 ] == ','"		642730	0		==			
ANR	642961	ArrayIndexing	nextText [ 0 ]		642730	0					
ANR	642962	Identifier	nextText		642730	0					
ANR	642963	PrimaryExpression	0		642730	1					
ANR	642964	PrimaryExpression	"','"		642730	1					
ANR	642965	EqualityExpression	nextText [ 0 ] == '='		642730	1		==			
ANR	642966	ArrayIndexing	nextText [ 0 ]		642730	0					
ANR	642967	Identifier	nextText		642730	0					
ANR	642968	PrimaryExpression	0		642730	1					
ANR	642969	PrimaryExpression	'='		642730	1					
ANR	642970	ReturnStatement	return false ;	3171:3:91622:91634	642730	1	True				
ANR	642971	Identifier	false		642730	0					
ANR	642972	IfStatement	if ( nextText [ 0 ] == ';' )		642730	1					
ANR	642973	Condition	nextText [ 0 ] == ';'	3172:6:91642:91659	642730	0	True				
ANR	642974	EqualityExpression	nextText [ 0 ] == ';'		642730	0		==			
ANR	642975	ArrayIndexing	nextText [ 0 ]		642730	0					
ANR	642976	Identifier	nextText		642730	0					
ANR	642977	PrimaryExpression	0		642730	1					
ANR	642978	PrimaryExpression	';'		642730	1					
ANR	642979	ReturnStatement	return true ;	3173:3:91665:91676	642730	1	True				
ANR	642980	Identifier	true		642730	0					
ANR	642981	IfStatement	if ( ( currentChar == '*' && nextChar == '&' ) || ( previousNonWSChar == '*' && currentChar == '&' ) )		642730	9					
ANR	642982	Condition	( currentChar == '*' && nextChar == '&' ) || ( previousNonWSChar == '*' && currentChar == '&' )	3177:5:91744:91843	642730	0	True				
ANR	642983	OrExpression	( currentChar == '*' && nextChar == '&' ) || ( previousNonWSChar == '*' && currentChar == '&' )		642730	0		||			
ANR	642984	AndExpression	currentChar == '*' && nextChar == '&'		642730	0		&&			
ANR	642985	EqualityExpression	currentChar == '*'		642730	0		==			
ANR	642986	Identifier	currentChar		642730	0					
ANR	642987	PrimaryExpression	'*'		642730	1					
ANR	642988	EqualityExpression	nextChar == '&'		642730	1		==			
ANR	642989	Identifier	nextChar		642730	0					
ANR	642990	PrimaryExpression	'&'		642730	1					
ANR	642991	AndExpression	previousNonWSChar == '*' && currentChar == '&'		642730	1		&&			
ANR	642992	EqualityExpression	previousNonWSChar == '*'		642730	0		==			
ANR	642993	Identifier	previousNonWSChar		642730	0					
ANR	642994	PrimaryExpression	'*'		642730	1					
ANR	642995	EqualityExpression	currentChar == '&'		642730	1		==			
ANR	642996	Identifier	currentChar		642730	0					
ANR	642997	PrimaryExpression	'&'		642730	1					
ANR	642998	ReturnStatement	return false ;	3179:2:91848:91860	642730	1	True				
ANR	642999	Identifier	false		642730	0					
ANR	643000	IfStatement	"if ( ! isBraceType ( braceTypeStack -> back ( ) , COMMAND_TYPE ) && parenStack -> back ( ) == 0 )"		642730	10					
ANR	643001	Condition	"! isBraceType ( braceTypeStack -> back ( ) , COMMAND_TYPE ) && parenStack -> back ( ) == 0"	3181:5:91868:91953	642730	0	True				
ANR	643002	AndExpression	"! isBraceType ( braceTypeStack -> back ( ) , COMMAND_TYPE ) && parenStack -> back ( ) == 0"		642730	0		&&			
ANR	643003	UnaryOperationExpression	"! isBraceType ( braceTypeStack -> back ( ) , COMMAND_TYPE )"		642730	0					
ANR	643004	UnaryOperator	!		642730	0					
ANR	643005	CallExpression	"isBraceType ( braceTypeStack -> back ( ) , COMMAND_TYPE )"		642730	1					
ANR	643006	Callee	isBraceType		642730	0					
ANR	643007	Identifier	isBraceType		642730	0					
ANR	643008	ArgumentList	braceTypeStack -> back ( )		642730	1					
ANR	643009	Argument	braceTypeStack -> back ( )		642730	0					
ANR	643010	CallExpression	braceTypeStack -> back ( )		642730	0					
ANR	643011	Callee	braceTypeStack -> back		642730	0					
ANR	643012	PtrMemberAccess	braceTypeStack -> back		642730	0					
ANR	643013	Identifier	braceTypeStack		642730	0					
ANR	643014	Identifier	back		642730	1					
ANR	643015	ArgumentList			642730	1					
ANR	643016	Argument	COMMAND_TYPE		642730	1					
ANR	643017	Identifier	COMMAND_TYPE		642730	0					
ANR	643018	EqualityExpression	parenStack -> back ( ) == 0		642730	1		==			
ANR	643019	CallExpression	parenStack -> back ( )		642730	0					
ANR	643020	Callee	parenStack -> back		642730	0					
ANR	643021	PtrMemberAccess	parenStack -> back		642730	0					
ANR	643022	Identifier	parenStack		642730	0					
ANR	643023	Identifier	back		642730	1					
ANR	643024	ArgumentList			642730	1					
ANR	643025	PrimaryExpression	0		642730	1					
ANR	643026	ReturnStatement	return false ;	3183:2:91958:91970	642730	1	True				
ANR	643027	Identifier	false		642730	0					
ANR	643028	IdentifierDeclStatement	"string lastWord = getPreviousWord ( currentLine , charNum ) ;"	3185:1:91974:92029	642730	11	True				
ANR	643029	IdentifierDecl	"lastWord = getPreviousWord ( currentLine , charNum )"		642730	0					
ANR	643030	IdentifierDeclType	string		642730	0					
ANR	643031	Identifier	lastWord		642730	1					
ANR	643032	AssignmentExpression	"lastWord = getPreviousWord ( currentLine , charNum )"		642730	2		=			
ANR	643033	Identifier	lastWord		642730	0					
ANR	643034	CallExpression	"getPreviousWord ( currentLine , charNum )"		642730	1					
ANR	643035	Callee	getPreviousWord		642730	0					
ANR	643036	Identifier	getPreviousWord		642730	0					
ANR	643037	ArgumentList	currentLine		642730	1					
ANR	643038	Argument	currentLine		642730	0					
ANR	643039	Identifier	currentLine		642730	0					
ANR	643040	Argument	charNum		642730	1					
ANR	643041	Identifier	charNum		642730	0					
ANR	643042	IfStatement	"if ( lastWord == ""else"" || lastWord == ""delete"" )"		642730	12					
ANR	643043	Condition	"lastWord == ""else"" || lastWord == ""delete"""	3186:5:92036:92077	642730	0	True				
ANR	643044	OrExpression	"lastWord == ""else"" || lastWord == ""delete"""		642730	0		||			
ANR	643045	EqualityExpression	"lastWord == ""else"""		642730	0		==			
ANR	643046	Identifier	lastWord		642730	0					
ANR	643047	PrimaryExpression	"""else"""		642730	1					
ANR	643048	EqualityExpression	"lastWord == ""delete"""		642730	1		==			
ANR	643049	Identifier	lastWord		642730	0					
ANR	643050	PrimaryExpression	"""delete"""		642730	1					
ANR	643051	ReturnStatement	return true ;	3187:2:92082:92093	642730	1	True				
ANR	643052	Identifier	true		642730	0					
ANR	643053	IfStatement	if ( isPointerOrReferenceVariable ( lastWord ) )		642730	13					
ANR	643054	Condition	isPointerOrReferenceVariable ( lastWord )	3189:5:92101:92138	642730	0	True				
ANR	643055	CallExpression	isPointerOrReferenceVariable ( lastWord )		642730	0					
ANR	643056	Callee	isPointerOrReferenceVariable		642730	0					
ANR	643057	Identifier	isPointerOrReferenceVariable		642730	0					
ANR	643058	ArgumentList	lastWord		642730	1					
ANR	643059	Argument	lastWord		642730	0					
ANR	643060	Identifier	lastWord		642730	0					
ANR	643061	ReturnStatement	return false ;	3190:2:92143:92155	642730	1	True				
ANR	643062	Identifier	false		642730	0					
ANR	643063	IdentifierDeclStatement	bool isDA = ( ! ( isLegalNameChar ( previousNonWSChar ) || previousNonWSChar == '>' ) || ( nextText . length ( ) > 0 && ! isLegalNameChar ( nextText [ 0 ] ) && nextText [ 0 ] != '/' ) || ( ispunct ( ( unsigned char ) previousNonWSChar ) && previousNonWSChar != '.' ) || isCharImmediatelyPostReturn ) ;	3192:1:92159:92468	642730	14	True				
ANR	643064	IdentifierDecl	isDA = ( ! ( isLegalNameChar ( previousNonWSChar ) || previousNonWSChar == '>' ) || ( nextText . length ( ) > 0 && ! isLegalNameChar ( nextText [ 0 ] ) && nextText [ 0 ] != '/' ) || ( ispunct ( ( unsigned char ) previousNonWSChar ) && previousNonWSChar != '.' ) || isCharImmediatelyPostReturn )		642730	0					
ANR	643065	IdentifierDeclType	bool		642730	0					
ANR	643066	Identifier	isDA		642730	1					
ANR	643067	AssignmentExpression	isDA = ( ! ( isLegalNameChar ( previousNonWSChar ) || previousNonWSChar == '>' ) || ( nextText . length ( ) > 0 && ! isLegalNameChar ( nextText [ 0 ] ) && nextText [ 0 ] != '/' ) || ( ispunct ( ( unsigned char ) previousNonWSChar ) && previousNonWSChar != '.' ) || isCharImmediatelyPostReturn )		642730	2		=			
ANR	643068	Identifier	isDA		642730	0					
ANR	643069	OrExpression	! ( isLegalNameChar ( previousNonWSChar ) || previousNonWSChar == '>' ) || ( nextText . length ( ) > 0 && ! isLegalNameChar ( nextText [ 0 ] ) && nextText [ 0 ] != '/' ) || ( ispunct ( ( unsigned char ) previousNonWSChar ) && previousNonWSChar != '.' ) || isCharImmediatelyPostReturn		642730	1		||			
ANR	643070	UnaryOperationExpression	! ( isLegalNameChar ( previousNonWSChar ) || previousNonWSChar == '>' )		642730	0					
ANR	643071	UnaryOperator	!		642730	0					
ANR	643072	OrExpression	isLegalNameChar ( previousNonWSChar ) || previousNonWSChar == '>'		642730	1		||			
ANR	643073	CallExpression	isLegalNameChar ( previousNonWSChar )		642730	0					
ANR	643074	Callee	isLegalNameChar		642730	0					
ANR	643075	Identifier	isLegalNameChar		642730	0					
ANR	643076	ArgumentList	previousNonWSChar		642730	1					
ANR	643077	Argument	previousNonWSChar		642730	0					
ANR	643078	Identifier	previousNonWSChar		642730	0					
ANR	643079	EqualityExpression	previousNonWSChar == '>'		642730	1		==			
ANR	643080	Identifier	previousNonWSChar		642730	0					
ANR	643081	PrimaryExpression	'>'		642730	1					
ANR	643082	OrExpression	( nextText . length ( ) > 0 && ! isLegalNameChar ( nextText [ 0 ] ) && nextText [ 0 ] != '/' ) || ( ispunct ( ( unsigned char ) previousNonWSChar ) && previousNonWSChar != '.' ) || isCharImmediatelyPostReturn		642730	1		||			
ANR	643083	AndExpression	nextText . length ( ) > 0 && ! isLegalNameChar ( nextText [ 0 ] ) && nextText [ 0 ] != '/'		642730	0		&&			
ANR	643084	RelationalExpression	nextText . length ( ) > 0		642730	0		>			
ANR	643085	CallExpression	nextText . length ( )		642730	0					
ANR	643086	Callee	nextText . length		642730	0					
ANR	643087	MemberAccess	nextText . length		642730	0					
ANR	643088	Identifier	nextText		642730	0					
ANR	643089	Identifier	length		642730	1					
ANR	643090	ArgumentList			642730	1					
ANR	643091	PrimaryExpression	0		642730	1					
ANR	643092	AndExpression	! isLegalNameChar ( nextText [ 0 ] ) && nextText [ 0 ] != '/'		642730	1		&&			
ANR	643093	UnaryOperationExpression	! isLegalNameChar ( nextText [ 0 ] )		642730	0					
ANR	643094	UnaryOperator	!		642730	0					
ANR	643095	CallExpression	isLegalNameChar ( nextText [ 0 ] )		642730	1					
ANR	643096	Callee	isLegalNameChar		642730	0					
ANR	643097	Identifier	isLegalNameChar		642730	0					
ANR	643098	ArgumentList	nextText [ 0 ]		642730	1					
ANR	643099	Argument	nextText [ 0 ]		642730	0					
ANR	643100	ArrayIndexing	nextText [ 0 ]		642730	0					
ANR	643101	Identifier	nextText		642730	0					
ANR	643102	PrimaryExpression	0		642730	1					
ANR	643103	EqualityExpression	nextText [ 0 ] != '/'		642730	1		!=			
ANR	643104	ArrayIndexing	nextText [ 0 ]		642730	0					
ANR	643105	Identifier	nextText		642730	0					
ANR	643106	PrimaryExpression	0		642730	1					
ANR	643107	PrimaryExpression	'/'		642730	1					
ANR	643108	OrExpression	( ispunct ( ( unsigned char ) previousNonWSChar ) && previousNonWSChar != '.' ) || isCharImmediatelyPostReturn		642730	1		||			
ANR	643109	AndExpression	ispunct ( ( unsigned char ) previousNonWSChar ) && previousNonWSChar != '.'		642730	0		&&			
ANR	643110	CallExpression	ispunct ( ( unsigned char ) previousNonWSChar )		642730	0					
ANR	643111	Callee	ispunct		642730	0					
ANR	643112	Identifier	ispunct		642730	0					
ANR	643113	ArgumentList	( unsigned char ) previousNonWSChar		642730	1					
ANR	643114	Argument	( unsigned char ) previousNonWSChar		642730	0					
ANR	643115	CastExpression	( unsigned char ) previousNonWSChar		642730	0					
ANR	643116	CastTarget	unsigned char		642730	0					
ANR	643117	Identifier	previousNonWSChar		642730	1					
ANR	643118	EqualityExpression	previousNonWSChar != '.'		642730	1		!=			
ANR	643119	Identifier	previousNonWSChar		642730	0					
ANR	643120	PrimaryExpression	'.'		642730	1					
ANR	643121	Identifier	isCharImmediatelyPostReturn		642730	1					
ANR	643122	ReturnStatement	return isDA ;	3197:1:92472:92483	642730	15	True				
ANR	643123	Identifier	isDA		642730	0					
ANR	643124	ReturnType	bool		642730	1					
ANR	643125	Identifier	ASFormatter :: isDereferenceOrAddressOf		642730	2					
ANR	643126	ParameterList			642730	3					
ANR	643127	CFGEntryNode	ENTRY		642730		True				
ANR	643128	CFGExitNode	EXIT		642730		True				
ANR	643129	Symbol	previousNonWSChar		642730						
ANR	643130	Symbol	braceTypeStack		642730						
ANR	643131	Symbol	lastWord		642730						
ANR	643132	Symbol	isCharImmediatelyPostComment		642730						
ANR	643133	Symbol	isLegalNameChar		642730						
ANR	643134	Symbol	getPreviousWord		642730						
ANR	643135	Symbol	isInTemplate		642730						
ANR	643136	Symbol	isPointerOrReferenceVariable		642730						
ANR	643137	Symbol	isDA		642730						
ANR	643138	Symbol	isCharImmediatelyPostLineComment		642730						
ANR	643139	Symbol	isBraceType		642730						
ANR	643140	Symbol	currentLine . substr		642730						
ANR	643141	Symbol	charNum		642730						
ANR	643142	Symbol	ispunct		642730						
ANR	643143	Symbol	currentLine		642730						
ANR	643144	Symbol	currentChar		642730						
ANR	643145	Symbol	peekNextChar		642730						
ANR	643146	Symbol	* braceTypeStack		642730						
ANR	643147	Symbol	nextText		642730						
ANR	643148	Symbol	false		642730						
ANR	643149	Symbol	currentLine . find_first_not_of		642730						
ANR	643150	Symbol	braceTypeStack -> back		642730						
ANR	643151	Symbol	COMMAND_TYPE		642730						
ANR	643152	Symbol	parenStack -> back		642730						
ANR	643153	Symbol	nextText . length		642730						
ANR	643154	Symbol	currentLine . length		642730						
ANR	643155	Symbol	isCharImmediatelyPostReturn		642730						
ANR	643156	Symbol	nextChar		642730						
ANR	643157	Symbol	* parenStack		642730						
ANR	643158	Symbol	* nextText		642730						
ANR	643159	Symbol	true		642730						
ANR	643160	Symbol	parenStack		642730						
ANR	643161	Symbol	peekNextText		642730						
ANR	643162	Symbol	isCharImmediatelyPostTemplate		642730						
ANR	643163	Function	ASFormatter :: isPointerOrReferenceCentered	3208:0:92749:93608							
ANR	643164	FunctionDef	ASFormatter :: isPointerOrReferenceCentered ()		643163	0					
ANR	643165	CompoundStatement		3209:0:92804:93608	643163	0					
ANR	643166	ExpressionStatement	assert ( currentChar == '*' || currentChar == '&' || currentChar == '^' )	3210:1:92807:92877	643163	0	True				
ANR	643167	CallExpression	assert ( currentChar == '*' || currentChar == '&' || currentChar == '^' )		643163	0					
ANR	643168	Callee	assert		643163	0					
ANR	643169	Identifier	assert		643163	0					
ANR	643170	ArgumentList	currentChar == '*' || currentChar == '&' || currentChar == '^'		643163	1					
ANR	643171	Argument	currentChar == '*' || currentChar == '&' || currentChar == '^'		643163	0					
ANR	643172	OrExpression	currentChar == '*' || currentChar == '&' || currentChar == '^'		643163	0		||			
ANR	643173	EqualityExpression	currentChar == '*'		643163	0		==			
ANR	643174	Identifier	currentChar		643163	0					
ANR	643175	PrimaryExpression	'*'		643163	1					
ANR	643176	OrExpression	currentChar == '&' || currentChar == '^'		643163	1		||			
ANR	643177	EqualityExpression	currentChar == '&'		643163	0		==			
ANR	643178	Identifier	currentChar		643163	0					
ANR	643179	PrimaryExpression	'&'		643163	1					
ANR	643180	EqualityExpression	currentChar == '^'		643163	1		==			
ANR	643181	Identifier	currentChar		643163	0					
ANR	643182	PrimaryExpression	'^'		643163	1					
ANR	643183	IdentifierDeclStatement	int prNum = charNum ;	3212:1:92881:92900	643163	1	True				
ANR	643184	IdentifierDecl	prNum = charNum		643163	0					
ANR	643185	IdentifierDeclType	int		643163	0					
ANR	643186	Identifier	prNum		643163	1					
ANR	643187	AssignmentExpression	prNum = charNum		643163	2		=			
ANR	643188	Identifier	charNum		643163	0					
ANR	643189	Identifier	charNum		643163	1					
ANR	643190	IdentifierDeclStatement	int lineLength = ( int ) currentLine . length ( ) ;	3213:1:92903:92946	643163	2	True				
ANR	643191	IdentifierDecl	lineLength = ( int ) currentLine . length ( )		643163	0					
ANR	643192	IdentifierDeclType	int		643163	0					
ANR	643193	Identifier	lineLength		643163	1					
ANR	643194	AssignmentExpression	lineLength = ( int ) currentLine . length ( )		643163	2		=			
ANR	643195	Identifier	lineLength		643163	0					
ANR	643196	CastExpression	( int ) currentLine . length ( )		643163	1					
ANR	643197	CastTarget	int		643163	0					
ANR	643198	CallExpression	currentLine . length ( )		643163	1					
ANR	643199	Callee	currentLine . length		643163	0					
ANR	643200	MemberAccess	currentLine . length		643163	0					
ANR	643201	Identifier	currentLine		643163	0					
ANR	643202	Identifier	length		643163	1					
ANR	643203	ArgumentList			643163	1					
ANR	643204	IfStatement	if ( peekNextChar ( ) == ' ' )		643163	3					
ANR	643205	Condition	peekNextChar ( ) == ' '	3216:5:92980:93000	643163	0	True				
ANR	643206	EqualityExpression	peekNextChar ( ) == ' '		643163	0		==			
ANR	643207	CallExpression	peekNextChar ( )		643163	0					
ANR	643208	Callee	peekNextChar		643163	0					
ANR	643209	Identifier	peekNextChar		643163	0					
ANR	643210	ArgumentList			643163	1					
ANR	643211	PrimaryExpression	' '		643163	1					
ANR	643212	ReturnStatement	return false ;	3217:2:93005:93017	643163	1	True				
ANR	643213	Identifier	false		643163	0					
ANR	643214	IfStatement	if ( prNum < 1 || currentLine [ prNum - 1 ] != ' ' )		643163	4					
ANR	643215	Condition	prNum < 1 || currentLine [ prNum - 1 ] != ' '	3220:5:93048:93098	643163	0	True				
ANR	643216	OrExpression	prNum < 1 || currentLine [ prNum - 1 ] != ' '		643163	0		||			
ANR	643217	RelationalExpression	prNum < 1		643163	0		<			
ANR	643218	Identifier	prNum		643163	0					
ANR	643219	PrimaryExpression	1		643163	1					
ANR	643220	EqualityExpression	currentLine [ prNum - 1 ] != ' '		643163	1		!=			
ANR	643221	ArrayIndexing	currentLine [ prNum - 1 ]		643163	0					
ANR	643222	Identifier	currentLine		643163	0					
ANR	643223	AdditiveExpression	prNum - 1		643163	1		-			
ANR	643224	Identifier	prNum		643163	0					
ANR	643225	PrimaryExpression	1		643163	1					
ANR	643226	PrimaryExpression	' '		643163	1					
ANR	643227	ReturnStatement	return false ;	3222:2:93103:93115	643163	1	True				
ANR	643228	Identifier	false		643163	0					
ANR	643229	IfStatement	if ( prNum < 2 || currentLine [ prNum - 2 ] == ' ' )		643163	5					
ANR	643230	Condition	prNum < 2 || currentLine [ prNum - 2 ] == ' '	3225:5:93154:93204	643163	0	True				
ANR	643231	OrExpression	prNum < 2 || currentLine [ prNum - 2 ] == ' '		643163	0		||			
ANR	643232	RelationalExpression	prNum < 2		643163	0		<			
ANR	643233	Identifier	prNum		643163	0					
ANR	643234	PrimaryExpression	2		643163	1					
ANR	643235	EqualityExpression	currentLine [ prNum - 2 ] == ' '		643163	1		==			
ANR	643236	ArrayIndexing	currentLine [ prNum - 2 ]		643163	0					
ANR	643237	Identifier	currentLine		643163	0					
ANR	643238	AdditiveExpression	prNum - 2		643163	1		-			
ANR	643239	Identifier	prNum		643163	0					
ANR	643240	PrimaryExpression	2		643163	1					
ANR	643241	PrimaryExpression	' '		643163	1					
ANR	643242	ReturnStatement	return false ;	3227:2:93209:93221	643163	1	True				
ANR	643243	Identifier	false		643163	0					
ANR	643244	IfStatement	if ( prNum + 1 < lineLength && ( currentLine [ prNum + 1 ] == '*' || currentLine [ prNum + 1 ] == '&' ) )		643163	6					
ANR	643245	Condition	prNum + 1 < lineLength && ( currentLine [ prNum + 1 ] == '*' || currentLine [ prNum + 1 ] == '&' )	3230:5:93252:93350	643163	0	True				
ANR	643246	AndExpression	prNum + 1 < lineLength && ( currentLine [ prNum + 1 ] == '*' || currentLine [ prNum + 1 ] == '&' )		643163	0		&&			
ANR	643247	RelationalExpression	prNum + 1 < lineLength		643163	0		<			
ANR	643248	AdditiveExpression	prNum + 1		643163	0		+			
ANR	643249	Identifier	prNum		643163	0					
ANR	643250	PrimaryExpression	1		643163	1					
ANR	643251	Identifier	lineLength		643163	1					
ANR	643252	OrExpression	currentLine [ prNum + 1 ] == '*' || currentLine [ prNum + 1 ] == '&'		643163	1		||			
ANR	643253	EqualityExpression	currentLine [ prNum + 1 ] == '*'		643163	0		==			
ANR	643254	ArrayIndexing	currentLine [ prNum + 1 ]		643163	0					
ANR	643255	Identifier	currentLine		643163	0					
ANR	643256	AdditiveExpression	prNum + 1		643163	1		+			
ANR	643257	Identifier	prNum		643163	0					
ANR	643258	PrimaryExpression	1		643163	1					
ANR	643259	PrimaryExpression	'*'		643163	1					
ANR	643260	EqualityExpression	currentLine [ prNum + 1 ] == '&'		643163	1		==			
ANR	643261	ArrayIndexing	currentLine [ prNum + 1 ]		643163	0					
ANR	643262	Identifier	currentLine		643163	0					
ANR	643263	AdditiveExpression	prNum + 1		643163	1		+			
ANR	643264	Identifier	prNum		643163	0					
ANR	643265	PrimaryExpression	1		643163	1					
ANR	643266	PrimaryExpression	'&'		643163	1					
ANR	643267	ExpressionStatement	prNum ++	3232:2:93355:93362	643163	1	True				
ANR	643268	PostIncDecOperationExpression	prNum ++		643163	0					
ANR	643269	Identifier	prNum		643163	0					
ANR	643270	IncDec	++		643163	1					
ANR	643271	IfStatement	if ( prNum + 1 <= lineLength && currentLine [ prNum + 1 ] != ' ' )		643163	7					
ANR	643272	Condition	prNum + 1 <= lineLength && currentLine [ prNum + 1 ] != ' '	3235:5:93392:93456	643163	0	True				
ANR	643273	AndExpression	prNum + 1 <= lineLength && currentLine [ prNum + 1 ] != ' '		643163	0		&&			
ANR	643274	RelationalExpression	prNum + 1 <= lineLength		643163	0		<=			
ANR	643275	AdditiveExpression	prNum + 1		643163	0		+			
ANR	643276	Identifier	prNum		643163	0					
ANR	643277	PrimaryExpression	1		643163	1					
ANR	643278	Identifier	lineLength		643163	1					
ANR	643279	EqualityExpression	currentLine [ prNum + 1 ] != ' '		643163	1		!=			
ANR	643280	ArrayIndexing	currentLine [ prNum + 1 ]		643163	0					
ANR	643281	Identifier	currentLine		643163	0					
ANR	643282	AdditiveExpression	prNum + 1		643163	1		+			
ANR	643283	Identifier	prNum		643163	0					
ANR	643284	PrimaryExpression	1		643163	1					
ANR	643285	PrimaryExpression	' '		643163	1					
ANR	643286	ReturnStatement	return false ;	3237:2:93461:93473	643163	1	True				
ANR	643287	Identifier	false		643163	0					
ANR	643288	IfStatement	if ( prNum + 2 < lineLength && currentLine [ prNum + 2 ] == ' ' )		643163	8					
ANR	643289	Condition	prNum + 2 < lineLength && currentLine [ prNum + 2 ] == ' '	3240:5:93511:93574	643163	0	True				
ANR	643290	AndExpression	prNum + 2 < lineLength && currentLine [ prNum + 2 ] == ' '		643163	0		&&			
ANR	643291	RelationalExpression	prNum + 2 < lineLength		643163	0		<			
ANR	643292	AdditiveExpression	prNum + 2		643163	0		+			
ANR	643293	Identifier	prNum		643163	0					
ANR	643294	PrimaryExpression	2		643163	1					
ANR	643295	Identifier	lineLength		643163	1					
ANR	643296	EqualityExpression	currentLine [ prNum + 2 ] == ' '		643163	1		==			
ANR	643297	ArrayIndexing	currentLine [ prNum + 2 ]		643163	0					
ANR	643298	Identifier	currentLine		643163	0					
ANR	643299	AdditiveExpression	prNum + 2		643163	1		+			
ANR	643300	Identifier	prNum		643163	0					
ANR	643301	PrimaryExpression	2		643163	1					
ANR	643302	PrimaryExpression	' '		643163	1					
ANR	643303	ReturnStatement	return false ;	3242:2:93579:93591	643163	1	True				
ANR	643304	Identifier	false		643163	0					
ANR	643305	ReturnStatement	return true ;	3244:1:93595:93606	643163	9	True				
ANR	643306	Identifier	true		643163	0					
ANR	643307	ReturnType	bool		643163	1					
ANR	643308	Identifier	ASFormatter :: isPointerOrReferenceCentered		643163	2					
ANR	643309	ParameterList			643163	3					
ANR	643310	CFGEntryNode	ENTRY		643163		True				
ANR	643311	CFGExitNode	EXIT		643163		True				
ANR	643312	Symbol	currentChar		643163						
ANR	643313	Symbol	* currentLine		643163						
ANR	643314	Symbol	peekNextChar		643163						
ANR	643315	Symbol	currentLine . length		643163						
ANR	643316	Symbol	false		643163						
ANR	643317	Symbol	true		643163						
ANR	643318	Symbol	prNum		643163						
ANR	643319	Symbol	charNum		643163						
ANR	643320	Symbol	lineLength		643163						
ANR	643321	Symbol	* prNum		643163						
ANR	643322	Symbol	currentLine		643163						
ANR	643323	Function	ASFormatter :: isPointerOrReferenceVariable	3252:0:93749:94083							
ANR	643324	FunctionDef	ASFormatter :: isPointerOrReferenceVariable (const string & word)		643323	0					
ANR	643325	CompoundStatement		3253:0:93822:94083	643323	0					
ANR	643326	ReturnStatement	"return ( word == ""char"" || word == ""int"" || word == ""void"" || ( word . length ( ) >= 6 && word . compare ( word . length ( ) - 2 , 2 , ""_t"" ) == 0 ) || word == ""INT"" || word == ""VOID"" ) ;"	3254:1:93825:94081	643323	0	True				
ANR	643327	OrExpression	"word == ""char"" || word == ""int"" || word == ""void"" || ( word . length ( ) >= 6 && word . compare ( word . length ( ) - 2 , 2 , ""_t"" ) == 0 ) || word == ""INT"" || word == ""VOID"""		643323	0		||			
ANR	643328	EqualityExpression	"word == ""char"""		643323	0		==			
ANR	643329	Identifier	word		643323	0					
ANR	643330	PrimaryExpression	"""char"""		643323	1					
ANR	643331	OrExpression	"word == ""int"" || word == ""void"" || ( word . length ( ) >= 6 && word . compare ( word . length ( ) - 2 , 2 , ""_t"" ) == 0 ) || word == ""INT"" || word == ""VOID"""		643323	1		||			
ANR	643332	EqualityExpression	"word == ""int"""		643323	0		==			
ANR	643333	Identifier	word		643323	0					
ANR	643334	PrimaryExpression	"""int"""		643323	1					
ANR	643335	OrExpression	"word == ""void"" || ( word . length ( ) >= 6 && word . compare ( word . length ( ) - 2 , 2 , ""_t"" ) == 0 ) || word == ""INT"" || word == ""VOID"""		643323	1		||			
ANR	643336	EqualityExpression	"word == ""void"""		643323	0		==			
ANR	643337	Identifier	word		643323	0					
ANR	643338	PrimaryExpression	"""void"""		643323	1					
ANR	643339	OrExpression	"( word . length ( ) >= 6 && word . compare ( word . length ( ) - 2 , 2 , ""_t"" ) == 0 ) || word == ""INT"" || word == ""VOID"""		643323	1		||			
ANR	643340	AndExpression	"word . length ( ) >= 6 && word . compare ( word . length ( ) - 2 , 2 , ""_t"" ) == 0"		643323	0		&&			
ANR	643341	RelationalExpression	word . length ( ) >= 6		643323	0		>=			
ANR	643342	CallExpression	word . length ( )		643323	0					
ANR	643343	Callee	word . length		643323	0					
ANR	643344	MemberAccess	word . length		643323	0					
ANR	643345	Identifier	word		643323	0					
ANR	643346	Identifier	length		643323	1					
ANR	643347	ArgumentList			643323	1					
ANR	643348	PrimaryExpression	6		643323	1					
ANR	643349	EqualityExpression	"word . compare ( word . length ( ) - 2 , 2 , ""_t"" ) == 0"		643323	1		==			
ANR	643350	CallExpression	"word . compare ( word . length ( ) - 2 , 2 , ""_t"" )"		643323	0					
ANR	643351	Callee	word . compare		643323	0					
ANR	643352	MemberAccess	word . compare		643323	0					
ANR	643353	Identifier	word		643323	0					
ANR	643354	Identifier	compare		643323	1					
ANR	643355	ArgumentList	word . length ( ) - 2		643323	1					
ANR	643356	Argument	word . length ( ) - 2		643323	0					
ANR	643357	AdditiveExpression	word . length ( ) - 2		643323	0		-			
ANR	643358	CallExpression	word . length ( )		643323	0					
ANR	643359	Callee	word . length		643323	0					
ANR	643360	MemberAccess	word . length		643323	0					
ANR	643361	Identifier	word		643323	0					
ANR	643362	Identifier	length		643323	1					
ANR	643363	ArgumentList			643323	1					
ANR	643364	PrimaryExpression	2		643323	1					
ANR	643365	Argument	2		643323	1					
ANR	643366	PrimaryExpression	2		643323	0					
ANR	643367	Argument	"""_t"""		643323	2					
ANR	643368	PrimaryExpression	"""_t"""		643323	0					
ANR	643369	PrimaryExpression	0		643323	1					
ANR	643370	OrExpression	"word == ""INT"" || word == ""VOID"""		643323	1		||			
ANR	643371	EqualityExpression	"word == ""INT"""		643323	0		==			
ANR	643372	Identifier	word		643323	0					
ANR	643373	PrimaryExpression	"""INT"""		643323	1					
ANR	643374	EqualityExpression	"word == ""VOID"""		643323	1		==			
ANR	643375	Identifier	word		643323	0					
ANR	643376	PrimaryExpression	"""VOID"""		643323	1					
ANR	643377	ReturnType	bool		643323	1					
ANR	643378	Identifier	ASFormatter :: isPointerOrReferenceVariable		643323	2					
ANR	643379	ParameterList	const string & word		643323	3					
ANR	643380	Parameter	const string & word	3252:47:93796:93813	643323	0	True				
ANR	643381	ParameterType	const string &		643323	0					
ANR	643382	Identifier	word		643323	1					
ANR	643383	CFGEntryNode	ENTRY		643323		True				
ANR	643384	CFGExitNode	EXIT		643323		True				
ANR	643385	Symbol	word		643323						
ANR	643386	Symbol	word . compare		643323						
ANR	643387	Symbol	word . length		643323						
ANR	643388	Function	ASFormatter :: isUnaryOperator	3270:0:94322:94697							
ANR	643389	FunctionDef	ASFormatter :: isUnaryOperator ()		643388	0					
ANR	643390	CompoundStatement		3271:0:94364:94697	643388	0					
ANR	643391	ExpressionStatement	assert ( currentChar == '+' || currentChar == '-' )	3272:1:94367:94415	643388	0	True				
ANR	643392	CallExpression	assert ( currentChar == '+' || currentChar == '-' )		643388	0					
ANR	643393	Callee	assert		643388	0					
ANR	643394	Identifier	assert		643388	0					
ANR	643395	ArgumentList	currentChar == '+' || currentChar == '-'		643388	1					
ANR	643396	Argument	currentChar == '+' || currentChar == '-'		643388	0					
ANR	643397	OrExpression	currentChar == '+' || currentChar == '-'		643388	0		||			
ANR	643398	EqualityExpression	currentChar == '+'		643388	0		==			
ANR	643399	Identifier	currentChar		643388	0					
ANR	643400	PrimaryExpression	'+'		643388	1					
ANR	643401	EqualityExpression	currentChar == '-'		643388	1		==			
ANR	643402	Identifier	currentChar		643388	0					
ANR	643403	PrimaryExpression	'-'		643388	1					
ANR	643404	ReturnStatement	"return ( ( isCharImmediatelyPostReturn || ! isLegalNameChar ( previousCommandChar ) ) && previousCommandChar != '.' && previousCommandChar != '\\""' && previousCommandChar != '\\'' && previousCommandChar != ')' && previousCommandChar != ']' ) ;"	3274:1:94419:94695	643388	1	True				
ANR	643405	AndExpression	"( isCharImmediatelyPostReturn || ! isLegalNameChar ( previousCommandChar ) ) && previousCommandChar != '.' && previousCommandChar != '\\""' && previousCommandChar != '\\'' && previousCommandChar != ')' && previousCommandChar != ']'"		643388	0		&&			
ANR	643406	OrExpression	isCharImmediatelyPostReturn || ! isLegalNameChar ( previousCommandChar )		643388	0		||			
ANR	643407	Identifier	isCharImmediatelyPostReturn		643388	0					
ANR	643408	UnaryOperationExpression	! isLegalNameChar ( previousCommandChar )		643388	1					
ANR	643409	UnaryOperator	!		643388	0					
ANR	643410	CallExpression	isLegalNameChar ( previousCommandChar )		643388	1					
ANR	643411	Callee	isLegalNameChar		643388	0					
ANR	643412	Identifier	isLegalNameChar		643388	0					
ANR	643413	ArgumentList	previousCommandChar		643388	1					
ANR	643414	Argument	previousCommandChar		643388	0					
ANR	643415	Identifier	previousCommandChar		643388	0					
ANR	643416	AndExpression	"previousCommandChar != '.' && previousCommandChar != '\\""' && previousCommandChar != '\\'' && previousCommandChar != ')' && previousCommandChar != ']'"		643388	1		&&			
ANR	643417	EqualityExpression	previousCommandChar != '.'		643388	0		!=			
ANR	643418	Identifier	previousCommandChar		643388	0					
ANR	643419	PrimaryExpression	'.'		643388	1					
ANR	643420	AndExpression	"previousCommandChar != '\\""' && previousCommandChar != '\\'' && previousCommandChar != ')' && previousCommandChar != ']'"		643388	1		&&			
ANR	643421	EqualityExpression	"previousCommandChar != '\\""'"		643388	0		!=			
ANR	643422	Identifier	previousCommandChar		643388	0					
ANR	643423	PrimaryExpression	"'\\""'"		643388	1					
ANR	643424	AndExpression	previousCommandChar != '\\'' && previousCommandChar != ')' && previousCommandChar != ']'		643388	1		&&			
ANR	643425	EqualityExpression	previousCommandChar != '\\''		643388	0		!=			
ANR	643426	Identifier	previousCommandChar		643388	0					
ANR	643427	PrimaryExpression	'\\''		643388	1					
ANR	643428	AndExpression	previousCommandChar != ')' && previousCommandChar != ']'		643388	1		&&			
ANR	643429	EqualityExpression	previousCommandChar != ')'		643388	0		!=			
ANR	643430	Identifier	previousCommandChar		643388	0					
ANR	643431	PrimaryExpression	')'		643388	1					
ANR	643432	EqualityExpression	previousCommandChar != ']'		643388	1		!=			
ANR	643433	Identifier	previousCommandChar		643388	0					
ANR	643434	PrimaryExpression	']'		643388	1					
ANR	643435	ReturnType	bool		643388	1					
ANR	643436	Identifier	ASFormatter :: isUnaryOperator		643388	2					
ANR	643437	ParameterList			643388	3					
ANR	643438	CFGEntryNode	ENTRY		643388		True				
ANR	643439	CFGExitNode	EXIT		643388		True				
ANR	643440	Symbol	currentChar		643388						
ANR	643441	Symbol	isCharImmediatelyPostReturn		643388						
ANR	643442	Symbol	previousCommandChar		643388						
ANR	643443	Symbol	isLegalNameChar		643388						
ANR	643444	Function	ASFormatter :: isInSwitchStatement	3287:0:94848:95113							
ANR	643445	FunctionDef	ASFormatter :: isInSwitchStatement ()		643444	0					
ANR	643446	CompoundStatement		3288:0:94894:95113	643444	0					
ANR	643447	ExpressionStatement	assert ( isInLineComment || isInComment )	3289:1:94897:94935	643444	0	True				
ANR	643448	CallExpression	assert ( isInLineComment || isInComment )		643444	0					
ANR	643449	Callee	assert		643444	0					
ANR	643450	Identifier	assert		643444	0					
ANR	643451	ArgumentList	isInLineComment || isInComment		643444	1					
ANR	643452	Argument	isInLineComment || isInComment		643444	0					
ANR	643453	OrExpression	isInLineComment || isInComment		643444	0		||			
ANR	643454	Identifier	isInLineComment		643444	0					
ANR	643455	Identifier	isInComment		643444	1					
ANR	643456	IfStatement	if ( ! preBraceHeaderStack -> empty ( ) )		643444	1					
ANR	643457	Condition	! preBraceHeaderStack -> empty ( )	3290:5:94942:94970	643444	0	True				
ANR	643458	UnaryOperationExpression	! preBraceHeaderStack -> empty ( )		643444	0					
ANR	643459	UnaryOperator	!		643444	0					
ANR	643460	CallExpression	preBraceHeaderStack -> empty ( )		643444	1					
ANR	643461	Callee	preBraceHeaderStack -> empty		643444	0					
ANR	643462	PtrMemberAccess	preBraceHeaderStack -> empty		643444	0					
ANR	643463	Identifier	preBraceHeaderStack		643444	0					
ANR	643464	Identifier	empty		643444	1					
ANR	643465	ArgumentList			643444	1					
ANR	643466	ForStatement	for ( size_t i = 1 ; i < preBraceHeaderStack -> size ( ) ; i ++ )		643444	1					
ANR	643467	ForInit	size_t i = 1 ;	3291:7:94980:94992	643444	0	True				
ANR	643468	IdentifierDeclStatement	size_t i = 1 ;		643444	0					
ANR	643469	IdentifierDecl	i = 1		643444	0					
ANR	643470	IdentifierDeclType	size_t		643444	0					
ANR	643471	Identifier	i		643444	1					
ANR	643472	AssignmentExpression	i = 1		643444	2		=			
ANR	643473	Identifier	i		643444	0					
ANR	643474	PrimaryExpression	1		643444	1					
ANR	643475	Condition	i < preBraceHeaderStack -> size ( )	3291:21:94994:95024	643444	1	True				
ANR	643476	RelationalExpression	i < preBraceHeaderStack -> size ( )		643444	0		<			
ANR	643477	Identifier	i		643444	0					
ANR	643478	CallExpression	preBraceHeaderStack -> size ( )		643444	1					
ANR	643479	Callee	preBraceHeaderStack -> size		643444	0					
ANR	643480	PtrMemberAccess	preBraceHeaderStack -> size		643444	0					
ANR	643481	Identifier	preBraceHeaderStack		643444	0					
ANR	643482	Identifier	size		643444	1					
ANR	643483	ArgumentList			643444	1					
ANR	643484	PostIncDecOperationExpression	i ++	3291:54:95027:95029	643444	2	True				
ANR	643485	Identifier	i		643444	0					
ANR	643486	IncDec	++		643444	1					
ANR	643487	IfStatement	if ( preBraceHeaderStack -> at ( i ) == & AS_SWITCH )		643444	3					
ANR	643488	Condition	preBraceHeaderStack -> at ( i ) == & AS_SWITCH	3292:7:95039:95078	643444	0	True				
ANR	643489	EqualityExpression	preBraceHeaderStack -> at ( i ) == & AS_SWITCH		643444	0		==			
ANR	643490	CallExpression	preBraceHeaderStack -> at ( i )		643444	0					
ANR	643491	Callee	preBraceHeaderStack -> at		643444	0					
ANR	643492	PtrMemberAccess	preBraceHeaderStack -> at		643444	0					
ANR	643493	Identifier	preBraceHeaderStack		643444	0					
ANR	643494	Identifier	at		643444	1					
ANR	643495	ArgumentList	i		643444	1					
ANR	643496	Argument	i		643444	0					
ANR	643497	Identifier	i		643444	0					
ANR	643498	UnaryOperationExpression	& AS_SWITCH		643444	1					
ANR	643499	UnaryOperator	&		643444	0					
ANR	643500	Identifier	AS_SWITCH		643444	1					
ANR	643501	ReturnStatement	return true ;	3293:4:95085:95096	643444	1	True				
ANR	643502	Identifier	true		643444	0					
ANR	643503	ReturnStatement	return false ;	3294:1:95099:95111	643444	2	True				
ANR	643504	Identifier	false		643444	0					
ANR	643505	ReturnType	bool		643444	1					
ANR	643506	Identifier	ASFormatter :: isInSwitchStatement		643444	2					
ANR	643507	ParameterList			643444	3					
ANR	643508	CFGEntryNode	ENTRY		643444		True				
ANR	643509	CFGExitNode	EXIT		643444		True				
ANR	643510	Symbol	& AS_SWITCH		643444						
ANR	643511	Symbol	true		643444						
ANR	643512	Symbol	false		643444						
ANR	643513	Symbol	i		643444						
ANR	643514	Symbol	preBraceHeaderStack -> size		643444						
ANR	643515	Symbol	preBraceHeaderStack -> empty		643444						
ANR	643516	Symbol	* preBraceHeaderStack		643444						
ANR	643517	Symbol	preBraceHeaderStack		643444						
ANR	643518	Symbol	isInComment		643444						
ANR	643519	Symbol	isInLineComment		643444						
ANR	643520	Symbol	preBraceHeaderStack -> at		643444						
ANR	643521	Function	ASFormatter :: isInExponent	3303:0:95290:95678							
ANR	643522	FunctionDef	ASFormatter :: isInExponent ()		643521	0					
ANR	643523	CompoundStatement		3304:0:95329:95678	643521	0					
ANR	643524	ExpressionStatement	assert ( currentChar == '+' || currentChar == '-' )	3305:1:95332:95380	643521	0	True				
ANR	643525	CallExpression	assert ( currentChar == '+' || currentChar == '-' )		643521	0					
ANR	643526	Callee	assert		643521	0					
ANR	643527	Identifier	assert		643521	0					
ANR	643528	ArgumentList	currentChar == '+' || currentChar == '-'		643521	1					
ANR	643529	Argument	currentChar == '+' || currentChar == '-'		643521	0					
ANR	643530	OrExpression	currentChar == '+' || currentChar == '-'		643521	0		||			
ANR	643531	EqualityExpression	currentChar == '+'		643521	0		==			
ANR	643532	Identifier	currentChar		643521	0					
ANR	643533	PrimaryExpression	'+'		643521	1					
ANR	643534	EqualityExpression	currentChar == '-'		643521	1		==			
ANR	643535	Identifier	currentChar		643521	0					
ANR	643536	PrimaryExpression	'-'		643521	1					
ANR	643537	IfStatement	if ( charNum >= 2 )		643521	1					
ANR	643538	Condition	charNum >= 2	3307:5:95388:95399	643521	0	True				
ANR	643539	RelationalExpression	charNum >= 2		643521	0		>=			
ANR	643540	Identifier	charNum		643521	0					
ANR	643541	PrimaryExpression	2		643521	1					
ANR	643542	CompoundStatement		7:2:134:183	643521	1					
ANR	643543	IdentifierDeclStatement	char prevPrevFormattedChar = currentLine [ charNum - 2 ] ;	3309:2:95407:95460	643521	0	True				
ANR	643544	IdentifierDecl	prevPrevFormattedChar = currentLine [ charNum - 2 ]		643521	0					
ANR	643545	IdentifierDeclType	char		643521	0					
ANR	643546	Identifier	prevPrevFormattedChar		643521	1					
ANR	643547	AssignmentExpression	prevPrevFormattedChar = currentLine [ charNum - 2 ]		643521	2		=			
ANR	643548	Identifier	prevPrevFormattedChar		643521	0					
ANR	643549	ArrayIndexing	currentLine [ charNum - 2 ]		643521	1					
ANR	643550	Identifier	currentLine		643521	0					
ANR	643551	AdditiveExpression	charNum - 2		643521	1		-			
ANR	643552	Identifier	charNum		643521	0					
ANR	643553	PrimaryExpression	2		643521	1					
ANR	643554	IdentifierDeclStatement	char prevFormattedChar = currentLine [ charNum - 1 ] ;	3310:2:95464:95513	643521	1	True				
ANR	643555	IdentifierDecl	prevFormattedChar = currentLine [ charNum - 1 ]		643521	0					
ANR	643556	IdentifierDeclType	char		643521	0					
ANR	643557	Identifier	prevFormattedChar		643521	1					
ANR	643558	AssignmentExpression	prevFormattedChar = currentLine [ charNum - 1 ]		643521	2		=			
ANR	643559	Identifier	prevFormattedChar		643521	0					
ANR	643560	ArrayIndexing	currentLine [ charNum - 1 ]		643521	1					
ANR	643561	Identifier	currentLine		643521	0					
ANR	643562	AdditiveExpression	charNum - 1		643521	1		-			
ANR	643563	Identifier	charNum		643521	0					
ANR	643564	PrimaryExpression	1		643521	1					
ANR	643565	ReturnStatement	return ( ( prevFormattedChar == 'e' || prevFormattedChar == 'E' ) && ( prevPrevFormattedChar == '.' || isDigit ( prevPrevFormattedChar ) ) ) ;	3311:2:95517:95658	643521	2	True				
ANR	643566	AndExpression	( prevFormattedChar == 'e' || prevFormattedChar == 'E' ) && ( prevPrevFormattedChar == '.' || isDigit ( prevPrevFormattedChar ) )		643521	0		&&			
ANR	643567	OrExpression	prevFormattedChar == 'e' || prevFormattedChar == 'E'		643521	0		||			
ANR	643568	EqualityExpression	prevFormattedChar == 'e'		643521	0		==			
ANR	643569	Identifier	prevFormattedChar		643521	0					
ANR	643570	PrimaryExpression	'e'		643521	1					
ANR	643571	EqualityExpression	prevFormattedChar == 'E'		643521	1		==			
ANR	643572	Identifier	prevFormattedChar		643521	0					
ANR	643573	PrimaryExpression	'E'		643521	1					
ANR	643574	OrExpression	prevPrevFormattedChar == '.' || isDigit ( prevPrevFormattedChar )		643521	1		||			
ANR	643575	EqualityExpression	prevPrevFormattedChar == '.'		643521	0		==			
ANR	643576	Identifier	prevPrevFormattedChar		643521	0					
ANR	643577	PrimaryExpression	'.'		643521	1					
ANR	643578	CallExpression	isDigit ( prevPrevFormattedChar )		643521	1					
ANR	643579	Callee	isDigit		643521	0					
ANR	643580	Identifier	isDigit		643521	0					
ANR	643581	ArgumentList	prevPrevFormattedChar		643521	1					
ANR	643582	Argument	prevPrevFormattedChar		643521	0					
ANR	643583	Identifier	prevPrevFormattedChar		643521	0					
ANR	643584	ReturnStatement	return false ;	3314:1:95664:95676	643521	2	True				
ANR	643585	Identifier	false		643521	0					
ANR	643586	ReturnType	bool		643521	1					
ANR	643587	Identifier	ASFormatter :: isInExponent		643521	2					
ANR	643588	ParameterList			643521	3					
ANR	643589	CFGEntryNode	ENTRY		643521		True				
ANR	643590	CFGExitNode	EXIT		643521		True				
ANR	643591	Symbol	currentChar		643521						
ANR	643592	Symbol	* currentLine		643521						
ANR	643593	Symbol	prevFormattedChar		643521						
ANR	643594	Symbol	* charNum		643521						
ANR	643595	Symbol	prevPrevFormattedChar		643521						
ANR	643596	Symbol	isDigit		643521						
ANR	643597	Symbol	false		643521						
ANR	643598	Symbol	charNum		643521						
ANR	643599	Symbol	currentLine		643521						
ANR	643600	Function	ASFormatter :: isNonInStatementArrayBrace	3322:0:95806:96474							
ANR	643601	FunctionDef	ASFormatter :: isNonInStatementArrayBrace ()		643600	0					
ANR	643602	CompoundStatement		3323:0:95859:96474	643600	0					
ANR	643603	IdentifierDeclStatement	bool returnVal = false ;	3324:1:95862:95884	643600	0	True				
ANR	643604	IdentifierDecl	returnVal = false		643600	0					
ANR	643605	IdentifierDeclType	bool		643600	0					
ANR	643606	Identifier	returnVal		643600	1					
ANR	643607	AssignmentExpression	returnVal = false		643600	2		=			
ANR	643608	Identifier	false		643600	0					
ANR	643609	Identifier	false		643600	1					
ANR	643610	IdentifierDeclStatement	char nextChar = peekNextChar ( ) ;	3325:1:95887:95917	643600	1	True				
ANR	643611	IdentifierDecl	nextChar = peekNextChar ( )		643600	0					
ANR	643612	IdentifierDeclType	char		643600	0					
ANR	643613	Identifier	nextChar		643600	1					
ANR	643614	AssignmentExpression	nextChar = peekNextChar ( )		643600	2		=			
ANR	643615	Identifier	nextChar		643600	0					
ANR	643616	CallExpression	peekNextChar ( )		643600	1					
ANR	643617	Callee	peekNextChar		643600	0					
ANR	643618	Identifier	peekNextChar		643600	0					
ANR	643619	ArgumentList			643600	1					
ANR	643620	IfStatement	if ( currentLineBeginsWithBrace && charNum == ( int ) currentLineFirstBraceNum && nextChar != '}' )		643600	2					
ANR	643621	Condition	currentLineBeginsWithBrace && charNum == ( int ) currentLineFirstBraceNum && nextChar != '}'	3327:5:96002:96109	643600	0	True				
ANR	643622	AndExpression	currentLineBeginsWithBrace && charNum == ( int ) currentLineFirstBraceNum && nextChar != '}'		643600	0		&&			
ANR	643623	Identifier	currentLineBeginsWithBrace		643600	0					
ANR	643624	AndExpression	charNum == ( int ) currentLineFirstBraceNum && nextChar != '}'		643600	1		&&			
ANR	643625	EqualityExpression	charNum == ( int ) currentLineFirstBraceNum		643600	0		==			
ANR	643626	Identifier	charNum		643600	0					
ANR	643627	CastExpression	( int ) currentLineFirstBraceNum		643600	1					
ANR	643628	CastTarget	int		643600	0					
ANR	643629	Identifier	currentLineFirstBraceNum		643600	1					
ANR	643630	EqualityExpression	nextChar != '}'		643600	1		!=			
ANR	643631	Identifier	nextChar		643600	0					
ANR	643632	PrimaryExpression	'}'		643600	1					
ANR	643633	ExpressionStatement	returnVal = true	3330:2:96114:96130	643600	1	True				
ANR	643634	AssignmentExpression	returnVal = true		643600	0		=			
ANR	643635	Identifier	returnVal		643600	0					
ANR	643636	Identifier	true		643600	1					
ANR	643637	IfStatement	if ( isWhiteSpace ( nextChar ) || isBeforeAnyLineEndComment ( charNum ) || nextChar == '{' )		643600	3					
ANR	643638	Condition	isWhiteSpace ( nextChar ) || isBeforeAnyLineEndComment ( charNum ) || nextChar == '{'	3332:5:96211:96307	643600	0	True				
ANR	643639	OrExpression	isWhiteSpace ( nextChar ) || isBeforeAnyLineEndComment ( charNum ) || nextChar == '{'		643600	0		||			
ANR	643640	CallExpression	isWhiteSpace ( nextChar )		643600	0					
ANR	643641	Callee	isWhiteSpace		643600	0					
ANR	643642	Identifier	isWhiteSpace		643600	0					
ANR	643643	ArgumentList	nextChar		643600	1					
ANR	643644	Argument	nextChar		643600	0					
ANR	643645	Identifier	nextChar		643600	0					
ANR	643646	OrExpression	isBeforeAnyLineEndComment ( charNum ) || nextChar == '{'		643600	1		||			
ANR	643647	CallExpression	isBeforeAnyLineEndComment ( charNum )		643600	0					
ANR	643648	Callee	isBeforeAnyLineEndComment		643600	0					
ANR	643649	Identifier	isBeforeAnyLineEndComment		643600	0					
ANR	643650	ArgumentList	charNum		643600	1					
ANR	643651	Argument	charNum		643600	0					
ANR	643652	Identifier	charNum		643600	0					
ANR	643653	EqualityExpression	nextChar == '{'		643600	1		==			
ANR	643654	Identifier	nextChar		643600	0					
ANR	643655	PrimaryExpression	'{'		643600	1					
ANR	643656	ExpressionStatement	returnVal = true	3335:2:96312:96328	643600	1	True				
ANR	643657	AssignmentExpression	returnVal = true		643600	0		=			
ANR	643658	Identifier	returnVal		643600	0					
ANR	643659	Identifier	true		643600	1					
ANR	643660	IfStatement	if ( isJavaStyle ( ) && previousNonWSChar == ']' )		643600	4					
ANR	643661	Condition	isJavaStyle ( ) && previousNonWSChar == ']'	3338:5:96390:96430	643600	0	True				
ANR	643662	AndExpression	isJavaStyle ( ) && previousNonWSChar == ']'		643600	0		&&			
ANR	643663	CallExpression	isJavaStyle ( )		643600	0					
ANR	643664	Callee	isJavaStyle		643600	0					
ANR	643665	Identifier	isJavaStyle		643600	0					
ANR	643666	ArgumentList			643600	1					
ANR	643667	EqualityExpression	previousNonWSChar == ']'		643600	1		==			
ANR	643668	Identifier	previousNonWSChar		643600	0					
ANR	643669	PrimaryExpression	']'		643600	1					
ANR	643670	ExpressionStatement	returnVal = false	3339:2:96435:96452	643600	1	True				
ANR	643671	AssignmentExpression	returnVal = false		643600	0		=			
ANR	643672	Identifier	returnVal		643600	0					
ANR	643673	Identifier	false		643600	1					
ANR	643674	ReturnStatement	return returnVal ;	3341:1:96456:96472	643600	5	True				
ANR	643675	Identifier	returnVal		643600	0					
ANR	643676	ReturnType	bool		643600	1					
ANR	643677	Identifier	ASFormatter :: isNonInStatementArrayBrace		643600	2					
ANR	643678	ParameterList			643600	3					
ANR	643679	CFGEntryNode	ENTRY		643600		True				
ANR	643680	CFGExitNode	EXIT		643600		True				
ANR	643681	Symbol	isBeforeAnyLineEndComment		643600						
ANR	643682	Symbol	returnVal		643600						
ANR	643683	Symbol	currentLineBeginsWithBrace		643600						
ANR	643684	Symbol	previousNonWSChar		643600						
ANR	643685	Symbol	peekNextChar		643600						
ANR	643686	Symbol	nextChar		643600						
ANR	643687	Symbol	isJavaStyle		643600						
ANR	643688	Symbol	false		643600						
ANR	643689	Symbol	true		643600						
ANR	643690	Symbol	charNum		643600						
ANR	643691	Symbol	currentLineFirstBraceNum		643600						
ANR	643692	Symbol	isWhiteSpace		643600						
ANR	643693	Function	ASFormatter :: isOneLineBlockReached	3354:0:96913:98358							
ANR	643694	FunctionDef	"ASFormatter :: isOneLineBlockReached (const string & line , int startChar)"		643693	0					
ANR	643695	CompoundStatement		3355:0:96993:98358	643693	0					
ANR	643696	ExpressionStatement	assert ( line [ startChar ] == '{' )	3356:1:96996:97026	643693	0	True				
ANR	643697	CallExpression	assert ( line [ startChar ] == '{' )		643693	0					
ANR	643698	Callee	assert		643693	0					
ANR	643699	Identifier	assert		643693	0					
ANR	643700	ArgumentList	line [ startChar ] == '{'		643693	1					
ANR	643701	Argument	line [ startChar ] == '{'		643693	0					
ANR	643702	EqualityExpression	line [ startChar ] == '{'		643693	0		==			
ANR	643703	ArrayIndexing	line [ startChar ]		643693	0					
ANR	643704	Identifier	line		643693	0					
ANR	643705	Identifier	startChar		643693	1					
ANR	643706	PrimaryExpression	'{'		643693	1					
ANR	643707	IdentifierDeclStatement	bool isInComment_ = false ;	3358:1:97030:97055	643693	1	True				
ANR	643708	IdentifierDecl	isInComment_ = false		643693	0					
ANR	643709	IdentifierDeclType	bool		643693	0					
ANR	643710	Identifier	isInComment_		643693	1					
ANR	643711	AssignmentExpression	isInComment_ = false		643693	2		=			
ANR	643712	Identifier	false		643693	0					
ANR	643713	Identifier	false		643693	1					
ANR	643714	IdentifierDeclStatement	bool isInQuote_ = false ;	3359:1:97058:97081	643693	2	True				
ANR	643715	IdentifierDecl	isInQuote_ = false		643693	0					
ANR	643716	IdentifierDeclType	bool		643693	0					
ANR	643717	Identifier	isInQuote_		643693	1					
ANR	643718	AssignmentExpression	isInQuote_ = false		643693	2		=			
ANR	643719	Identifier	false		643693	0					
ANR	643720	Identifier	false		643693	1					
ANR	643721	IdentifierDeclStatement	bool hasText = false ;	3360:1:97084:97104	643693	3	True				
ANR	643722	IdentifierDecl	hasText = false		643693	0					
ANR	643723	IdentifierDeclType	bool		643693	0					
ANR	643724	Identifier	hasText		643693	1					
ANR	643725	AssignmentExpression	hasText = false		643693	2		=			
ANR	643726	Identifier	false		643693	0					
ANR	643727	Identifier	false		643693	1					
ANR	643728	IdentifierDeclStatement	int braceCount = 0 ;	3361:1:97107:97125	643693	4	True				
ANR	643729	IdentifierDecl	braceCount = 0		643693	0					
ANR	643730	IdentifierDeclType	int		643693	0					
ANR	643731	Identifier	braceCount		643693	1					
ANR	643732	AssignmentExpression	braceCount = 0		643693	2		=			
ANR	643733	Identifier	braceCount		643693	0					
ANR	643734	PrimaryExpression	0		643693	1					
ANR	643735	IdentifierDeclStatement	int lineLength = line . length ( ) ;	3362:1:97128:97158	643693	5	True				
ANR	643736	IdentifierDecl	lineLength = line . length ( )		643693	0					
ANR	643737	IdentifierDeclType	int		643693	0					
ANR	643738	Identifier	lineLength		643693	1					
ANR	643739	AssignmentExpression	lineLength = line . length ( )		643693	2		=			
ANR	643740	Identifier	lineLength		643693	0					
ANR	643741	CallExpression	line . length ( )		643693	1					
ANR	643742	Callee	line . length		643693	0					
ANR	643743	MemberAccess	line . length		643693	0					
ANR	643744	Identifier	line		643693	0					
ANR	643745	Identifier	length		643693	1					
ANR	643746	ArgumentList			643693	1					
ANR	643747	IdentifierDeclStatement	char quoteChar_ = ' ' ;	3363:1:97161:97182	643693	6	True				
ANR	643748	IdentifierDecl	quoteChar_ = ' '		643693	0					
ANR	643749	IdentifierDeclType	char		643693	0					
ANR	643750	Identifier	quoteChar_		643693	1					
ANR	643751	AssignmentExpression	quoteChar_ = ' '		643693	2		=			
ANR	643752	Identifier	quoteChar_		643693	0					
ANR	643753	PrimaryExpression	' '		643693	1					
ANR	643754	IdentifierDeclStatement	char ch = ' ' ;	3364:1:97185:97198	643693	7	True				
ANR	643755	IdentifierDecl	ch = ' '		643693	0					
ANR	643756	IdentifierDeclType	char		643693	0					
ANR	643757	Identifier	ch		643693	1					
ANR	643758	AssignmentExpression	ch = ' '		643693	2		=			
ANR	643759	Identifier	ch		643693	0					
ANR	643760	PrimaryExpression	' '		643693	1					
ANR	643761	IdentifierDeclStatement	char prevCh = ' ' ;	3365:1:97201:97218	643693	8	True				
ANR	643762	IdentifierDecl	prevCh = ' '		643693	0					
ANR	643763	IdentifierDeclType	char		643693	0					
ANR	643764	Identifier	prevCh		643693	1					
ANR	643765	AssignmentExpression	prevCh = ' '		643693	2		=			
ANR	643766	Identifier	prevCh		643693	0					
ANR	643767	PrimaryExpression	' '		643693	1					
ANR	643768	ForStatement	for ( int i = startChar ; i < lineLength ; ++ i )		643693	9					
ANR	643769	ForInit	int i = startChar ;	3367:6:97227:97244	643693	0	True				
ANR	643770	IdentifierDeclStatement	int i = startChar ;		643693	0					
ANR	643771	IdentifierDecl	i = startChar		643693	0					
ANR	643772	IdentifierDeclType	int		643693	0					
ANR	643773	Identifier	i		643693	1					
ANR	643774	AssignmentExpression	i = startChar		643693	2		=			
ANR	643775	Identifier	startChar		643693	0					
ANR	643776	Identifier	startChar		643693	1					
ANR	643777	Condition	i < lineLength	3367:25:97246:97259	643693	1	True				
ANR	643778	RelationalExpression	i < lineLength		643693	0		<			
ANR	643779	Identifier	i		643693	0					
ANR	643780	Identifier	lineLength		643693	1					
ANR	643781	UnaryExpression	++ i	3367:41:97262:97264	643693	2	True				
ANR	643782	IncDec	++		643693	0					
ANR	643783	Identifier	i		643693	1					
ANR	643784	CompoundStatement		14:1:274:274	643693	3					
ANR	643785	ExpressionStatement	ch = line [ i ]	3369:2:97272:97284	643693	0	True				
ANR	643786	AssignmentExpression	ch = line [ i ]		643693	0		=			
ANR	643787	Identifier	ch		643693	0					
ANR	643788	ArrayIndexing	line [ i ]		643693	1					
ANR	643789	Identifier	line		643693	0					
ANR	643790	Identifier	i		643693	1					
ANR	643791	IfStatement	if ( isInComment_ )		643693	1					
ANR	643792	Condition	isInComment_	3371:6:97293:97304	643693	0	True				
ANR	643793	Identifier	isInComment_		643693	0					
ANR	643794	CompoundStatement		18:2:315:315	643693	1					
ANR	643795	IfStatement	"if ( line . compare ( i , 2 , ""*/"" ) == 0 )"		643693	0					
ANR	643796	Condition	"line . compare ( i , 2 , ""*/"" ) == 0"	3373:7:97318:97346	643693	0	True				
ANR	643797	EqualityExpression	"line . compare ( i , 2 , ""*/"" ) == 0"		643693	0		==			
ANR	643798	CallExpression	"line . compare ( i , 2 , ""*/"" )"		643693	0					
ANR	643799	Callee	line . compare		643693	0					
ANR	643800	MemberAccess	line . compare		643693	0					
ANR	643801	Identifier	line		643693	0					
ANR	643802	Identifier	compare		643693	1					
ANR	643803	ArgumentList	i		643693	1					
ANR	643804	Argument	i		643693	0					
ANR	643805	Identifier	i		643693	0					
ANR	643806	Argument	2		643693	1					
ANR	643807	PrimaryExpression	2		643693	0					
ANR	643808	Argument	"""*/"""		643693	2					
ANR	643809	PrimaryExpression	"""*/"""		643693	0					
ANR	643810	PrimaryExpression	0		643693	1					
ANR	643811	CompoundStatement		20:3:358:358	643693	1					
ANR	643812	ExpressionStatement	isInComment_ = false	3375:4:97358:97378	643693	0	True				
ANR	643813	AssignmentExpression	isInComment_ = false		643693	0		=			
ANR	643814	Identifier	isInComment_		643693	0					
ANR	643815	Identifier	false		643693	1					
ANR	643816	ExpressionStatement	++ i	3376:4:97384:97387	643693	1	True				
ANR	643817	UnaryExpression	++ i		643693	0					
ANR	643818	IncDec	++		643693	0					
ANR	643819	Identifier	i		643693	1					
ANR	643820	ContinueStatement	continue ;	3378:3:97397:97405	643693	1	True				
ANR	643821	IfStatement	if ( ch == '\\\\' )		643693	2					
ANR	643822	Condition	ch == '\\\\'	3381:6:97418:97427	643693	0	True				
ANR	643823	EqualityExpression	ch == '\\\\'		643693	0		==			
ANR	643824	Identifier	ch		643693	0					
ANR	643825	PrimaryExpression	'\\\\'		643693	1					
ANR	643826	CompoundStatement		28:2:438:438	643693	1					
ANR	643827	ExpressionStatement	++ i	3383:3:97437:97440	643693	0	True				
ANR	643828	UnaryExpression	++ i		643693	0					
ANR	643829	IncDec	++		643693	0					
ANR	643830	Identifier	i		643693	1					
ANR	643831	ContinueStatement	continue ;	3384:3:97445:97453	643693	1	True				
ANR	643832	IfStatement	if ( isInQuote_ )		643693	3					
ANR	643833	Condition	isInQuote_	3387:6:97466:97475	643693	0	True				
ANR	643834	Identifier	isInQuote_		643693	0					
ANR	643835	CompoundStatement		34:2:486:486	643693	1					
ANR	643836	IfStatement	if ( ch == quoteChar_ )		643693	0					
ANR	643837	Condition	ch == quoteChar_	3389:7:97489:97504	643693	0	True				
ANR	643838	EqualityExpression	ch == quoteChar_		643693	0		==			
ANR	643839	Identifier	ch		643693	0					
ANR	643840	Identifier	quoteChar_		643693	1					
ANR	643841	ExpressionStatement	isInQuote_ = false	3390:4:97511:97529	643693	1	True				
ANR	643842	AssignmentExpression	isInQuote_ = false		643693	0		=			
ANR	643843	Identifier	isInQuote_		643693	0					
ANR	643844	Identifier	false		643693	1					
ANR	643845	ContinueStatement	continue ;	3391:3:97534:97542	643693	1	True				
ANR	643846	IfStatement	"if ( ch == '""' || ( ch == '\\'' && ! isDigitSeparator ( line , i ) ) )"		643693	4					
ANR	643847	Condition	"ch == '""' || ( ch == '\\'' && ! isDigitSeparator ( line , i ) )"	3394:6:97555:97619	643693	0	True				
ANR	643848	OrExpression	"ch == '""' || ( ch == '\\'' && ! isDigitSeparator ( line , i ) )"		643693	0		||			
ANR	643849	EqualityExpression	"ch == '""'"		643693	0		==			
ANR	643850	Identifier	ch		643693	0					
ANR	643851	PrimaryExpression	"'""'"		643693	1					
ANR	643852	AndExpression	"ch == '\\'' && ! isDigitSeparator ( line , i )"		643693	1		&&			
ANR	643853	EqualityExpression	ch == '\\''		643693	0		==			
ANR	643854	Identifier	ch		643693	0					
ANR	643855	PrimaryExpression	'\\''		643693	1					
ANR	643856	UnaryOperationExpression	"! isDigitSeparator ( line , i )"		643693	1					
ANR	643857	UnaryOperator	!		643693	0					
ANR	643858	CallExpression	"isDigitSeparator ( line , i )"		643693	1					
ANR	643859	Callee	isDigitSeparator		643693	0					
ANR	643860	Identifier	isDigitSeparator		643693	0					
ANR	643861	ArgumentList	line		643693	1					
ANR	643862	Argument	line		643693	0					
ANR	643863	Identifier	line		643693	0					
ANR	643864	Argument	i		643693	1					
ANR	643865	Identifier	i		643693	0					
ANR	643866	CompoundStatement		42:2:630:630	643693	1					
ANR	643867	ExpressionStatement	isInQuote_ = true	3397:3:97629:97646	643693	0	True				
ANR	643868	AssignmentExpression	isInQuote_ = true		643693	0		=			
ANR	643869	Identifier	isInQuote_		643693	0					
ANR	643870	Identifier	true		643693	1					
ANR	643871	ExpressionStatement	quoteChar_ = ch	3398:3:97651:97666	643693	1	True				
ANR	643872	AssignmentExpression	quoteChar_ = ch		643693	0		=			
ANR	643873	Identifier	quoteChar_		643693	0					
ANR	643874	Identifier	ch		643693	1					
ANR	643875	ContinueStatement	continue ;	3399:3:97671:97679	643693	2	True				
ANR	643876	IfStatement	"if ( line . compare ( i , 2 , ""//"" ) == 0 )"		643693	5					
ANR	643877	Condition	"line . compare ( i , 2 , ""//"" ) == 0"	3402:6:97692:97720	643693	0	True				
ANR	643878	EqualityExpression	"line . compare ( i , 2 , ""//"" ) == 0"		643693	0		==			
ANR	643879	CallExpression	"line . compare ( i , 2 , ""//"" )"		643693	0					
ANR	643880	Callee	line . compare		643693	0					
ANR	643881	MemberAccess	line . compare		643693	0					
ANR	643882	Identifier	line		643693	0					
ANR	643883	Identifier	compare		643693	1					
ANR	643884	ArgumentList	i		643693	1					
ANR	643885	Argument	i		643693	0					
ANR	643886	Identifier	i		643693	0					
ANR	643887	Argument	2		643693	1					
ANR	643888	PrimaryExpression	2		643693	0					
ANR	643889	Argument	"""//"""		643693	2					
ANR	643890	PrimaryExpression	"""//"""		643693	0					
ANR	643891	PrimaryExpression	0		643693	1					
ANR	643892	BreakStatement	break ;	3403:3:97726:97731	643693	1	True				
ANR	643893	IfStatement	"if ( line . compare ( i , 2 , ""/*"" ) == 0 )"		643693	6					
ANR	643894	Condition	"line . compare ( i , 2 , ""/*"" ) == 0"	3405:6:97740:97768	643693	0	True				
ANR	643895	EqualityExpression	"line . compare ( i , 2 , ""/*"" ) == 0"		643693	0		==			
ANR	643896	CallExpression	"line . compare ( i , 2 , ""/*"" )"		643693	0					
ANR	643897	Callee	line . compare		643693	0					
ANR	643898	MemberAccess	line . compare		643693	0					
ANR	643899	Identifier	line		643693	0					
ANR	643900	Identifier	compare		643693	1					
ANR	643901	ArgumentList	i		643693	1					
ANR	643902	Argument	i		643693	0					
ANR	643903	Identifier	i		643693	0					
ANR	643904	Argument	2		643693	1					
ANR	643905	PrimaryExpression	2		643693	0					
ANR	643906	Argument	"""/*"""		643693	2					
ANR	643907	PrimaryExpression	"""/*"""		643693	0					
ANR	643908	PrimaryExpression	0		643693	1					
ANR	643909	CompoundStatement		52:2:779:779	643693	1					
ANR	643910	ExpressionStatement	isInComment_ = true	3407:3:97778:97797	643693	0	True				
ANR	643911	AssignmentExpression	isInComment_ = true		643693	0		=			
ANR	643912	Identifier	isInComment_		643693	0					
ANR	643913	Identifier	true		643693	1					
ANR	643914	ExpressionStatement	++ i	3408:3:97802:97805	643693	1	True				
ANR	643915	UnaryExpression	++ i		643693	0					
ANR	643916	IncDec	++		643693	0					
ANR	643917	Identifier	i		643693	1					
ANR	643918	ContinueStatement	continue ;	3409:3:97810:97818	643693	2	True				
ANR	643919	IfStatement	if ( ch == '{' )		643693	7					
ANR	643920	Condition	ch == '{'	3412:6:97831:97839	643693	0	True				
ANR	643921	EqualityExpression	ch == '{'		643693	0		==			
ANR	643922	Identifier	ch		643693	0					
ANR	643923	PrimaryExpression	'{'		643693	1					
ANR	643924	CompoundStatement		59:2:850:850	643693	1					
ANR	643925	ExpressionStatement	++ braceCount	3414:3:97849:97861	643693	0	True				
ANR	643926	UnaryExpression	++ braceCount		643693	0					
ANR	643927	IncDec	++		643693	0					
ANR	643928	Identifier	braceCount		643693	1					
ANR	643929	ContinueStatement	continue ;	3415:3:97866:97874	643693	1	True				
ANR	643930	IfStatement	if ( ch == '}' )		643693	8					
ANR	643931	Condition	ch == '}'	3417:6:97886:97894	643693	0	True				
ANR	643932	EqualityExpression	ch == '}'		643693	0		==			
ANR	643933	Identifier	ch		643693	0					
ANR	643934	PrimaryExpression	'}'		643693	1					
ANR	643935	CompoundStatement		64:2:905:905	643693	1					
ANR	643936	ExpressionStatement	-- braceCount	3419:3:97904:97916	643693	0	True				
ANR	643937	UnaryExpression	-- braceCount		643693	0					
ANR	643938	IncDec	--		643693	0					
ANR	643939	Identifier	braceCount		643693	1					
ANR	643940	IfStatement	if ( braceCount == 0 )		643693	1					
ANR	643941	Condition	braceCount == 0	3420:7:97925:97939	643693	0	True				
ANR	643942	EqualityExpression	braceCount == 0		643693	0		==			
ANR	643943	Identifier	braceCount		643693	0					
ANR	643944	PrimaryExpression	0		643693	1					
ANR	643945	CompoundStatement		67:3:951:951	643693	1					
ANR	643946	IfStatement	if ( parenStack -> back ( ) == 0 && prevCh != '}' )		643693	0					
ANR	643947	Condition	parenStack -> back ( ) == 0 && prevCh != '}'	3423:8:97980:98019	643693	0	True				
ANR	643948	AndExpression	parenStack -> back ( ) == 0 && prevCh != '}'		643693	0		&&			
ANR	643949	EqualityExpression	parenStack -> back ( ) == 0		643693	0		==			
ANR	643950	CallExpression	parenStack -> back ( )		643693	0					
ANR	643951	Callee	parenStack -> back		643693	0					
ANR	643952	PtrMemberAccess	parenStack -> back		643693	0					
ANR	643953	Identifier	parenStack		643693	0					
ANR	643954	Identifier	back		643693	1					
ANR	643955	ArgumentList			643693	1					
ANR	643956	PrimaryExpression	0		643693	1					
ANR	643957	EqualityExpression	prevCh != '}'		643693	1		!=			
ANR	643958	Identifier	prevCh		643693	0					
ANR	643959	PrimaryExpression	'}'		643693	1					
ANR	643960	CompoundStatement		71:5:1039:1092	643693	1					
ANR	643961	IdentifierDeclStatement	"size_t peekNum = line . find_first_not_of ( "" \\t"" , i + 1 ) ;"	3425:5:98033:98086	643693	0	True				
ANR	643962	IdentifierDecl	"peekNum = line . find_first_not_of ( "" \\t"" , i + 1 )"		643693	0					
ANR	643963	IdentifierDeclType	size_t		643693	0					
ANR	643964	Identifier	peekNum		643693	1					
ANR	643965	AssignmentExpression	"peekNum = line . find_first_not_of ( "" \\t"" , i + 1 )"		643693	2		=			
ANR	643966	Identifier	peekNum		643693	0					
ANR	643967	CallExpression	"line . find_first_not_of ( "" \\t"" , i + 1 )"		643693	1					
ANR	643968	Callee	line . find_first_not_of		643693	0					
ANR	643969	MemberAccess	line . find_first_not_of		643693	0					
ANR	643970	Identifier	line		643693	0					
ANR	643971	Identifier	find_first_not_of		643693	1					
ANR	643972	ArgumentList	""" \\t"""		643693	1					
ANR	643973	Argument	""" \\t"""		643693	0					
ANR	643974	PrimaryExpression	""" \\t"""		643693	0					
ANR	643975	Argument	i + 1		643693	1					
ANR	643976	AdditiveExpression	i + 1		643693	0		+			
ANR	643977	Identifier	i		643693	0					
ANR	643978	PrimaryExpression	1		643693	1					
ANR	643979	IfStatement	"if ( peekNum != string :: npos && line [ peekNum ] == ',' )"		643693	1					
ANR	643980	Condition	"peekNum != string :: npos && line [ peekNum ] == ','"	3426:9:98097:98143	643693	0	True				
ANR	643981	AndExpression	"peekNum != string :: npos && line [ peekNum ] == ','"		643693	0		&&			
ANR	643982	EqualityExpression	peekNum != string :: npos		643693	0		!=			
ANR	643983	Identifier	peekNum		643693	0					
ANR	643984	Identifier	string :: npos		643693	1					
ANR	643985	EqualityExpression	"line [ peekNum ] == ','"		643693	1		==			
ANR	643986	ArrayIndexing	line [ peekNum ]		643693	0					
ANR	643987	Identifier	line		643693	0					
ANR	643988	Identifier	peekNum		643693	1					
ANR	643989	PrimaryExpression	"','"		643693	1					
ANR	643990	ReturnStatement	return 2 ;	3427:6:98152:98160	643693	1	True				
ANR	643991	PrimaryExpression	2		643693	0					
ANR	643992	IfStatement	if ( ! hasText )		643693	1					
ANR	643993	Condition	! hasText	3429:8:98176:98183	643693	0	True				
ANR	643994	UnaryOperationExpression	! hasText		643693	0					
ANR	643995	UnaryOperator	!		643693	0					
ANR	643996	Identifier	hasText		643693	1					
ANR	643997	ReturnStatement	return 3 ;	3430:5:98191:98199	643693	1	True				
ANR	643998	PrimaryExpression	3		643693	0					
ANR	643999	ReturnStatement	return 1 ;	3431:4:98226:98234	643693	2	True				
ANR	644000	PrimaryExpression	1		643693	0					
ANR	644001	IfStatement	if ( ch == ';' )		643693	9					
ANR	644002	Condition	ch == ';'	3434:6:98251:98259	643693	0	True				
ANR	644003	EqualityExpression	ch == ';'		643693	0		==			
ANR	644004	Identifier	ch		643693	0					
ANR	644005	PrimaryExpression	';'		643693	1					
ANR	644006	ContinueStatement	continue ;	3435:3:98265:98273	643693	1	True				
ANR	644007	IfStatement	if ( ! isWhiteSpace ( ch ) )		643693	10					
ANR	644008	Condition	! isWhiteSpace ( ch )	3436:6:98281:98297	643693	0	True				
ANR	644009	UnaryOperationExpression	! isWhiteSpace ( ch )		643693	0					
ANR	644010	UnaryOperator	!		643693	0					
ANR	644011	CallExpression	isWhiteSpace ( ch )		643693	1					
ANR	644012	Callee	isWhiteSpace		643693	0					
ANR	644013	Identifier	isWhiteSpace		643693	0					
ANR	644014	ArgumentList	ch		643693	1					
ANR	644015	Argument	ch		643693	0					
ANR	644016	Identifier	ch		643693	0					
ANR	644017	CompoundStatement		83:2:1308:1308	643693	1					
ANR	644018	ExpressionStatement	hasText = true	3438:3:98307:98321	643693	0	True				
ANR	644019	AssignmentExpression	hasText = true		643693	0		=			
ANR	644020	Identifier	hasText		643693	0					
ANR	644021	Identifier	true		643693	1					
ANR	644022	ExpressionStatement	prevCh = ch	3439:3:98326:98337	643693	1	True				
ANR	644023	AssignmentExpression	prevCh = ch		643693	0		=			
ANR	644024	Identifier	prevCh		643693	0					
ANR	644025	Identifier	ch		643693	1					
ANR	644026	ReturnStatement	return 0 ;	3443:1:98348:98356	643693	10	True				
ANR	644027	PrimaryExpression	0		643693	0					
ANR	644028	ReturnType	int		643693	1					
ANR	644029	Identifier	ASFormatter :: isOneLineBlockReached		643693	2					
ANR	644030	ParameterList	"const string & line , int startChar"		643693	3					
ANR	644031	Parameter	const string & line	3354:39:96952:96969	643693	0	True				
ANR	644032	ParameterType	const string &		643693	0					
ANR	644033	Identifier	line		643693	1					
ANR	644034	Parameter	int startChar	3354:59:96972:96984	643693	1	True				
ANR	644035	ParameterType	int		643693	0					
ANR	644036	Identifier	startChar		643693	1					
ANR	644037	CFGEntryNode	ENTRY		643693		True				
ANR	644038	CFGExitNode	EXIT		643693		True				
ANR	644039	Symbol	* peekNum		643693						
ANR	644040	Symbol	line		643693						
ANR	644041	Symbol	string :: npos		643693						
ANR	644042	Symbol	* line		643693						
ANR	644043	Symbol	isInComment_		643693						
ANR	644044	Symbol	quoteChar_		643693						
ANR	644045	Symbol	isWhiteSpace		643693						
ANR	644046	Symbol	startChar		643693						
ANR	644047	Symbol	isDigitSeparator		643693						
ANR	644048	Symbol	line . compare		643693						
ANR	644049	Symbol	* startChar		643693						
ANR	644050	Symbol	ch		643693						
ANR	644051	Symbol	false		643693						
ANR	644052	Symbol	i		643693						
ANR	644053	Symbol	isInQuote_		643693						
ANR	644054	Symbol	prevCh		643693						
ANR	644055	Symbol	hasText		643693						
ANR	644056	Symbol	lineLength		643693						
ANR	644057	Symbol	line . find_first_not_of		643693						
ANR	644058	Symbol	braceCount		643693						
ANR	644059	Symbol	* i		643693						
ANR	644060	Symbol	parenStack -> back		643693						
ANR	644061	Symbol	* parenStack		643693						
ANR	644062	Symbol	true		643693						
ANR	644063	Symbol	parenStack		643693						
ANR	644064	Symbol	line . length		643693						
ANR	644065	Symbol	peekNum		643693						
ANR	644066	Function	ASFormatter :: isNextWordSharpNonParenHeader	3453:0:98626:99142							
ANR	644067	FunctionDef	ASFormatter :: isNextWordSharpNonParenHeader (int startChar)		644066	0					
ANR	644068	CompoundStatement		3454:0:98695:99142	644066	0					
ANR	644069	IdentifierDeclStatement	string nextText = peekNextText ( currentLine . substr ( startChar ) ) ;	3456:1:98747:98808	644066	0	True				
ANR	644070	IdentifierDecl	nextText = peekNextText ( currentLine . substr ( startChar ) )		644066	0					
ANR	644071	IdentifierDeclType	string		644066	0					
ANR	644072	Identifier	nextText		644066	1					
ANR	644073	AssignmentExpression	nextText = peekNextText ( currentLine . substr ( startChar ) )		644066	2		=			
ANR	644074	Identifier	nextText		644066	0					
ANR	644075	CallExpression	peekNextText ( currentLine . substr ( startChar ) )		644066	1					
ANR	644076	Callee	peekNextText		644066	0					
ANR	644077	Identifier	peekNextText		644066	0					
ANR	644078	ArgumentList	currentLine . substr ( startChar )		644066	1					
ANR	644079	Argument	currentLine . substr ( startChar )		644066	0					
ANR	644080	CallExpression	currentLine . substr ( startChar )		644066	0					
ANR	644081	Callee	currentLine . substr		644066	0					
ANR	644082	MemberAccess	currentLine . substr		644066	0					
ANR	644083	Identifier	currentLine		644066	0					
ANR	644084	Identifier	substr		644066	1					
ANR	644085	ArgumentList	startChar		644066	1					
ANR	644086	Argument	startChar		644066	0					
ANR	644087	Identifier	startChar		644066	0					
ANR	644088	IfStatement	if ( nextText . length ( ) == 0 )		644066	1					
ANR	644089	Condition	nextText . length ( ) == 0	3457:5:98815:98836	644066	0	True				
ANR	644090	EqualityExpression	nextText . length ( ) == 0		644066	0		==			
ANR	644091	CallExpression	nextText . length ( )		644066	0					
ANR	644092	Callee	nextText . length		644066	0					
ANR	644093	MemberAccess	nextText . length		644066	0					
ANR	644094	Identifier	nextText		644066	0					
ANR	644095	Identifier	length		644066	1					
ANR	644096	ArgumentList			644066	1					
ANR	644097	PrimaryExpression	0		644066	1					
ANR	644098	ReturnStatement	return false ;	3458:2:98841:98853	644066	1	True				
ANR	644099	Identifier	false		644066	0					
ANR	644100	IfStatement	if ( nextText [ 0 ] == '[' )		644066	2					
ANR	644101	Condition	nextText [ 0 ] == '['	3459:5:98860:98877	644066	0	True				
ANR	644102	EqualityExpression	nextText [ 0 ] == '['		644066	0		==			
ANR	644103	ArrayIndexing	nextText [ 0 ]		644066	0					
ANR	644104	Identifier	nextText		644066	0					
ANR	644105	PrimaryExpression	0		644066	1					
ANR	644106	PrimaryExpression	'['		644066	1					
ANR	644107	ReturnStatement	return true ;	3460:2:98882:98893	644066	1	True				
ANR	644108	Identifier	true		644066	0					
ANR	644109	IfStatement	"if ( ! isCharPotentialHeader ( nextText , 0 ) )"		644066	3					
ANR	644110	Condition	"! isCharPotentialHeader ( nextText , 0 )"	3461:5:98900:98934	644066	0	True				
ANR	644111	UnaryOperationExpression	"! isCharPotentialHeader ( nextText , 0 )"		644066	0					
ANR	644112	UnaryOperator	!		644066	0					
ANR	644113	CallExpression	"isCharPotentialHeader ( nextText , 0 )"		644066	1					
ANR	644114	Callee	isCharPotentialHeader		644066	0					
ANR	644115	Identifier	isCharPotentialHeader		644066	0					
ANR	644116	ArgumentList	nextText		644066	1					
ANR	644117	Argument	nextText		644066	0					
ANR	644118	Identifier	nextText		644066	0					
ANR	644119	Argument	0		644066	1					
ANR	644120	PrimaryExpression	0		644066	0					
ANR	644121	ReturnStatement	return false ;	3462:2:98939:98951	644066	1	True				
ANR	644122	Identifier	false		644066	0					
ANR	644123	IfStatement	"if ( findKeyword ( nextText , 0 , AS_GET ) || findKeyword ( nextText , 0 , AS_SET ) || findKeyword ( nextText , 0 , AS_ADD ) || findKeyword ( nextText , 0 , AS_REMOVE ) )"		644066	4					
ANR	644124	Condition	"findKeyword ( nextText , 0 , AS_GET ) || findKeyword ( nextText , 0 , AS_SET ) || findKeyword ( nextText , 0 , AS_ADD ) || findKeyword ( nextText , 0 , AS_REMOVE )"	3463:5:98958:99109	644066	0	True				
ANR	644125	OrExpression	"findKeyword ( nextText , 0 , AS_GET ) || findKeyword ( nextText , 0 , AS_SET ) || findKeyword ( nextText , 0 , AS_ADD ) || findKeyword ( nextText , 0 , AS_REMOVE )"		644066	0		||			
ANR	644126	CallExpression	"findKeyword ( nextText , 0 , AS_GET )"		644066	0					
ANR	644127	Callee	findKeyword		644066	0					
ANR	644128	Identifier	findKeyword		644066	0					
ANR	644129	ArgumentList	nextText		644066	1					
ANR	644130	Argument	nextText		644066	0					
ANR	644131	Identifier	nextText		644066	0					
ANR	644132	Argument	0		644066	1					
ANR	644133	PrimaryExpression	0		644066	0					
ANR	644134	Argument	AS_GET		644066	2					
ANR	644135	Identifier	AS_GET		644066	0					
ANR	644136	OrExpression	"findKeyword ( nextText , 0 , AS_SET ) || findKeyword ( nextText , 0 , AS_ADD ) || findKeyword ( nextText , 0 , AS_REMOVE )"		644066	1		||			
ANR	644137	CallExpression	"findKeyword ( nextText , 0 , AS_SET )"		644066	0					
ANR	644138	Callee	findKeyword		644066	0					
ANR	644139	Identifier	findKeyword		644066	0					
ANR	644140	ArgumentList	nextText		644066	1					
ANR	644141	Argument	nextText		644066	0					
ANR	644142	Identifier	nextText		644066	0					
ANR	644143	Argument	0		644066	1					
ANR	644144	PrimaryExpression	0		644066	0					
ANR	644145	Argument	AS_SET		644066	2					
ANR	644146	Identifier	AS_SET		644066	0					
ANR	644147	OrExpression	"findKeyword ( nextText , 0 , AS_ADD ) || findKeyword ( nextText , 0 , AS_REMOVE )"		644066	1		||			
ANR	644148	CallExpression	"findKeyword ( nextText , 0 , AS_ADD )"		644066	0					
ANR	644149	Callee	findKeyword		644066	0					
ANR	644150	Identifier	findKeyword		644066	0					
ANR	644151	ArgumentList	nextText		644066	1					
ANR	644152	Argument	nextText		644066	0					
ANR	644153	Identifier	nextText		644066	0					
ANR	644154	Argument	0		644066	1					
ANR	644155	PrimaryExpression	0		644066	0					
ANR	644156	Argument	AS_ADD		644066	2					
ANR	644157	Identifier	AS_ADD		644066	0					
ANR	644158	CallExpression	"findKeyword ( nextText , 0 , AS_REMOVE )"		644066	1					
ANR	644159	Callee	findKeyword		644066	0					
ANR	644160	Identifier	findKeyword		644066	0					
ANR	644161	ArgumentList	nextText		644066	1					
ANR	644162	Argument	nextText		644066	0					
ANR	644163	Identifier	nextText		644066	0					
ANR	644164	Argument	0		644066	1					
ANR	644165	PrimaryExpression	0		644066	0					
ANR	644166	Argument	AS_REMOVE		644066	2					
ANR	644167	Identifier	AS_REMOVE		644066	0					
ANR	644168	ReturnStatement	return true ;	3465:2:99114:99125	644066	1	True				
ANR	644169	Identifier	true		644066	0					
ANR	644170	ReturnStatement	return false ;	3466:1:99128:99140	644066	5	True				
ANR	644171	Identifier	false		644066	0					
ANR	644172	ReturnType	bool		644066	1					
ANR	644173	Identifier	ASFormatter :: isNextWordSharpNonParenHeader		644066	2					
ANR	644174	ParameterList	int startChar		644066	3					
ANR	644175	Parameter	int startChar	3453:48:98674:98686	644066	0	True				
ANR	644176	ParameterType	int		644066	0					
ANR	644177	Identifier	startChar		644066	1					
ANR	644178	CFGEntryNode	ENTRY		644066		True				
ANR	644179	CFGExitNode	EXIT		644066		True				
ANR	644180	Symbol	AS_GET		644066						
ANR	644181	Symbol	nextText		644066						
ANR	644182	Symbol	false		644066						
ANR	644183	Symbol	isCharPotentialHeader		644066						
ANR	644184	Symbol	nextText . length		644066						
ANR	644185	Symbol	startChar		644066						
ANR	644186	Symbol	* nextText		644066						
ANR	644187	Symbol	true		644066						
ANR	644188	Symbol	findKeyword		644066						
ANR	644189	Symbol	currentLine . substr		644066						
ANR	644190	Symbol	peekNextText		644066						
ANR	644191	Symbol	AS_ADD		644066						
ANR	644192	Symbol	AS_SET		644066						
ANR	644193	Symbol	AS_REMOVE		644066						
ANR	644194	Symbol	currentLine		644066						
ANR	644195	Function	ASFormatter :: isNextCharOpeningBrace	3477:0:99453:99709							
ANR	644196	FunctionDef	ASFormatter :: isNextCharOpeningBrace (int startChar)		644195	0					
ANR	644197	CompoundStatement		3478:0:99515:99709	644195	0					
ANR	644198	IdentifierDeclStatement	bool retVal = false ;	3479:1:99518:99537	644195	0	True				
ANR	644199	IdentifierDecl	retVal = false		644195	0					
ANR	644200	IdentifierDeclType	bool		644195	0					
ANR	644201	Identifier	retVal		644195	1					
ANR	644202	AssignmentExpression	retVal = false		644195	2		=			
ANR	644203	Identifier	false		644195	0					
ANR	644204	Identifier	false		644195	1					
ANR	644205	IdentifierDeclStatement	string nextText = peekNextText ( currentLine . substr ( startChar ) ) ;	3480:1:99540:99601	644195	1	True				
ANR	644206	IdentifierDecl	nextText = peekNextText ( currentLine . substr ( startChar ) )		644195	0					
ANR	644207	IdentifierDeclType	string		644195	0					
ANR	644208	Identifier	nextText		644195	1					
ANR	644209	AssignmentExpression	nextText = peekNextText ( currentLine . substr ( startChar ) )		644195	2		=			
ANR	644210	Identifier	nextText		644195	0					
ANR	644211	CallExpression	peekNextText ( currentLine . substr ( startChar ) )		644195	1					
ANR	644212	Callee	peekNextText		644195	0					
ANR	644213	Identifier	peekNextText		644195	0					
ANR	644214	ArgumentList	currentLine . substr ( startChar )		644195	1					
ANR	644215	Argument	currentLine . substr ( startChar )		644195	0					
ANR	644216	CallExpression	currentLine . substr ( startChar )		644195	0					
ANR	644217	Callee	currentLine . substr		644195	0					
ANR	644218	MemberAccess	currentLine . substr		644195	0					
ANR	644219	Identifier	currentLine		644195	0					
ANR	644220	Identifier	substr		644195	1					
ANR	644221	ArgumentList	startChar		644195	1					
ANR	644222	Argument	startChar		644195	0					
ANR	644223	Identifier	startChar		644195	0					
ANR	644224	IfStatement	"if ( nextText . length ( ) > 0 && nextText . compare ( 0 , 1 , ""{"" ) == 0 )"		644195	2					
ANR	644225	Condition	"nextText . length ( ) > 0 && nextText . compare ( 0 , 1 , ""{"" ) == 0"	3481:5:99608:99673	644195	0	True				
ANR	644226	AndExpression	"nextText . length ( ) > 0 && nextText . compare ( 0 , 1 , ""{"" ) == 0"		644195	0		&&			
ANR	644227	RelationalExpression	nextText . length ( ) > 0		644195	0		>			
ANR	644228	CallExpression	nextText . length ( )		644195	0					
ANR	644229	Callee	nextText . length		644195	0					
ANR	644230	MemberAccess	nextText . length		644195	0					
ANR	644231	Identifier	nextText		644195	0					
ANR	644232	Identifier	length		644195	1					
ANR	644233	ArgumentList			644195	1					
ANR	644234	PrimaryExpression	0		644195	1					
ANR	644235	EqualityExpression	"nextText . compare ( 0 , 1 , ""{"" ) == 0"		644195	1		==			
ANR	644236	CallExpression	"nextText . compare ( 0 , 1 , ""{"" )"		644195	0					
ANR	644237	Callee	nextText . compare		644195	0					
ANR	644238	MemberAccess	nextText . compare		644195	0					
ANR	644239	Identifier	nextText		644195	0					
ANR	644240	Identifier	compare		644195	1					
ANR	644241	ArgumentList	0		644195	1					
ANR	644242	Argument	0		644195	0					
ANR	644243	PrimaryExpression	0		644195	0					
ANR	644244	Argument	1		644195	1					
ANR	644245	PrimaryExpression	1		644195	0					
ANR	644246	Argument	"""{"""		644195	2					
ANR	644247	PrimaryExpression	"""{"""		644195	0					
ANR	644248	PrimaryExpression	0		644195	1					
ANR	644249	ExpressionStatement	retVal = true	3483:2:99678:99691	644195	1	True				
ANR	644250	AssignmentExpression	retVal = true		644195	0		=			
ANR	644251	Identifier	retVal		644195	0					
ANR	644252	Identifier	true		644195	1					
ANR	644253	ReturnStatement	return retVal ;	3484:1:99694:99707	644195	3	True				
ANR	644254	Identifier	retVal		644195	0					
ANR	644255	ReturnType	bool		644195	1					
ANR	644256	Identifier	ASFormatter :: isNextCharOpeningBrace		644195	2					
ANR	644257	ParameterList	int startChar		644195	3					
ANR	644258	Parameter	int startChar	3477:41:99494:99506	644195	0	True				
ANR	644259	ParameterType	int		644195	0					
ANR	644260	Identifier	startChar		644195	1					
ANR	644261	CFGEntryNode	ENTRY		644195		True				
ANR	644262	CFGExitNode	EXIT		644195		True				
ANR	644263	Symbol	nextText . length		644195						
ANR	644264	Symbol	startChar		644195						
ANR	644265	Symbol	nextText		644195						
ANR	644266	Symbol	nextText . compare		644195						
ANR	644267	Symbol	false		644195						
ANR	644268	Symbol	true		644195						
ANR	644269	Symbol	currentLine . substr		644195						
ANR	644270	Symbol	peekNextText		644195						
ANR	644271	Symbol	retVal		644195						
ANR	644272	Symbol	currentLine		644195						
ANR	644273	Function	ASFormatter :: isOperatorPaddingDisabled	3493:0:99921:100512							
ANR	644274	FunctionDef	ASFormatter :: isOperatorPaddingDisabled ()		644273	0					
ANR	644275	CompoundStatement		3494:0:99973:100512	644273	0					
ANR	644276	IdentifierDeclStatement	"size_t commentStart = currentLine . find ( ""//"" , charNum ) ;"	3495:1:99976:100029	644273	0	True				
ANR	644277	IdentifierDecl	"commentStart = currentLine . find ( ""//"" , charNum )"		644273	0					
ANR	644278	IdentifierDeclType	size_t		644273	0					
ANR	644279	Identifier	commentStart		644273	1					
ANR	644280	AssignmentExpression	"commentStart = currentLine . find ( ""//"" , charNum )"		644273	2		=			
ANR	644281	Identifier	commentStart		644273	0					
ANR	644282	CallExpression	"currentLine . find ( ""//"" , charNum )"		644273	1					
ANR	644283	Callee	currentLine . find		644273	0					
ANR	644284	MemberAccess	currentLine . find		644273	0					
ANR	644285	Identifier	currentLine		644273	0					
ANR	644286	Identifier	find		644273	1					
ANR	644287	ArgumentList	"""//"""		644273	1					
ANR	644288	Argument	"""//"""		644273	0					
ANR	644289	PrimaryExpression	"""//"""		644273	0					
ANR	644290	Argument	charNum		644273	1					
ANR	644291	Identifier	charNum		644273	0					
ANR	644292	IfStatement	if ( commentStart == string :: npos )		644273	1					
ANR	644293	Condition	commentStart == string :: npos	3496:5:100036:100063	644273	0	True				
ANR	644294	EqualityExpression	commentStart == string :: npos		644273	0		==			
ANR	644295	Identifier	commentStart		644273	0					
ANR	644296	Identifier	string :: npos		644273	1					
ANR	644297	CompoundStatement		4:1:93:93	644273	1					
ANR	644298	ExpressionStatement	"commentStart = currentLine . find ( ""/*"" , charNum )"	3498:2:100071:100117	644273	0	True				
ANR	644299	AssignmentExpression	"commentStart = currentLine . find ( ""/*"" , charNum )"		644273	0		=			
ANR	644300	Identifier	commentStart		644273	0					
ANR	644301	CallExpression	"currentLine . find ( ""/*"" , charNum )"		644273	1					
ANR	644302	Callee	currentLine . find		644273	0					
ANR	644303	MemberAccess	currentLine . find		644273	0					
ANR	644304	Identifier	currentLine		644273	0					
ANR	644305	Identifier	find		644273	1					
ANR	644306	ArgumentList	"""/*"""		644273	1					
ANR	644307	Argument	"""/*"""		644273	0					
ANR	644308	PrimaryExpression	"""/*"""		644273	0					
ANR	644309	Argument	charNum		644273	1					
ANR	644310	Identifier	charNum		644273	0					
ANR	644311	IfStatement	if ( commentStart != string :: npos )		644273	1					
ANR	644312	Condition	commentStart != string :: npos	3500:6:100160:100187	644273	0	True				
ANR	644313	EqualityExpression	commentStart != string :: npos		644273	0		!=			
ANR	644314	Identifier	commentStart		644273	0					
ANR	644315	Identifier	string :: npos		644273	1					
ANR	644316	CompoundStatement		9:3:223:283	644273	1					
ANR	644317	IdentifierDeclStatement	"size_t commentEnd = currentLine . find ( ""*/"" , commentStart + 2 ) ;"	3502:3:100197:100257	644273	0	True				
ANR	644318	IdentifierDecl	"commentEnd = currentLine . find ( ""*/"" , commentStart + 2 )"		644273	0					
ANR	644319	IdentifierDeclType	size_t		644273	0					
ANR	644320	Identifier	commentEnd		644273	1					
ANR	644321	AssignmentExpression	"commentEnd = currentLine . find ( ""*/"" , commentStart + 2 )"		644273	2		=			
ANR	644322	Identifier	commentEnd		644273	0					
ANR	644323	CallExpression	"currentLine . find ( ""*/"" , commentStart + 2 )"		644273	1					
ANR	644324	Callee	currentLine . find		644273	0					
ANR	644325	MemberAccess	currentLine . find		644273	0					
ANR	644326	Identifier	currentLine		644273	0					
ANR	644327	Identifier	find		644273	1					
ANR	644328	ArgumentList	"""*/"""		644273	1					
ANR	644329	Argument	"""*/"""		644273	0					
ANR	644330	PrimaryExpression	"""*/"""		644273	0					
ANR	644331	Argument	commentStart + 2		644273	1					
ANR	644332	AdditiveExpression	commentStart + 2		644273	0		+			
ANR	644333	Identifier	commentStart		644273	0					
ANR	644334	PrimaryExpression	2		644273	1					
ANR	644335	IfStatement	if ( commentEnd == string :: npos )		644273	1					
ANR	644336	Condition	commentEnd == string :: npos	3503:7:100266:100291	644273	0	True				
ANR	644337	EqualityExpression	commentEnd == string :: npos		644273	0		==			
ANR	644338	Identifier	commentEnd		644273	0					
ANR	644339	Identifier	string :: npos		644273	1					
ANR	644340	ExpressionStatement	commentStart = string :: npos	3504:4:100298:100325	644273	1	True				
ANR	644341	AssignmentExpression	commentStart = string :: npos		644273	0		=			
ANR	644342	Identifier	commentStart		644273	0					
ANR	644343	Identifier	string :: npos		644273	1					
ANR	644344	IfStatement	if ( commentStart == string :: npos )		644273	2					
ANR	644345	Condition	commentStart == string :: npos	3507:5:100339:100366	644273	0	True				
ANR	644346	EqualityExpression	commentStart == string :: npos		644273	0		==			
ANR	644347	Identifier	commentStart		644273	0					
ANR	644348	Identifier	string :: npos		644273	1					
ANR	644349	ReturnStatement	return false ;	3508:2:100371:100383	644273	1	True				
ANR	644350	Identifier	false		644273	0					
ANR	644351	IdentifierDeclStatement	"size_t noPadStart = currentLine . find ( ""*NOPAD*"" , commentStart ) ;"	3509:1:100386:100447	644273	3	True				
ANR	644352	IdentifierDecl	"noPadStart = currentLine . find ( ""*NOPAD*"" , commentStart )"		644273	0					
ANR	644353	IdentifierDeclType	size_t		644273	0					
ANR	644354	Identifier	noPadStart		644273	1					
ANR	644355	AssignmentExpression	"noPadStart = currentLine . find ( ""*NOPAD*"" , commentStart )"		644273	2		=			
ANR	644356	Identifier	noPadStart		644273	0					
ANR	644357	CallExpression	"currentLine . find ( ""*NOPAD*"" , commentStart )"		644273	1					
ANR	644358	Callee	currentLine . find		644273	0					
ANR	644359	MemberAccess	currentLine . find		644273	0					
ANR	644360	Identifier	currentLine		644273	0					
ANR	644361	Identifier	find		644273	1					
ANR	644362	ArgumentList	"""*NOPAD*"""		644273	1					
ANR	644363	Argument	"""*NOPAD*"""		644273	0					
ANR	644364	PrimaryExpression	"""*NOPAD*"""		644273	0					
ANR	644365	Argument	commentStart		644273	1					
ANR	644366	Identifier	commentStart		644273	0					
ANR	644367	IfStatement	if ( noPadStart == string :: npos )		644273	4					
ANR	644368	Condition	noPadStart == string :: npos	3510:5:100454:100479	644273	0	True				
ANR	644369	EqualityExpression	noPadStart == string :: npos		644273	0		==			
ANR	644370	Identifier	noPadStart		644273	0					
ANR	644371	Identifier	string :: npos		644273	1					
ANR	644372	ReturnStatement	return false ;	3511:2:100484:100496	644273	1	True				
ANR	644373	Identifier	false		644273	0					
ANR	644374	ReturnStatement	return true ;	3512:1:100499:100510	644273	5	True				
ANR	644375	Identifier	true		644273	0					
ANR	644376	ReturnType	bool		644273	1					
ANR	644377	Identifier	ASFormatter :: isOperatorPaddingDisabled		644273	2					
ANR	644378	ParameterList			644273	3					
ANR	644379	CFGEntryNode	ENTRY		644273		True				
ANR	644380	CFGExitNode	EXIT		644273		True				
ANR	644381	Symbol	commentStart		644273						
ANR	644382	Symbol	currentLine . find		644273						
ANR	644383	Symbol	noPadStart		644273						
ANR	644384	Symbol	string :: npos		644273						
ANR	644385	Symbol	false		644273						
ANR	644386	Symbol	true		644273						
ANR	644387	Symbol	commentEnd		644273						
ANR	644388	Symbol	charNum		644273						
ANR	644389	Symbol	currentLine		644273						
ANR	644390	Function	ASFormatter :: isUniformInitializerBrace	3519:0:100648:100879							
ANR	644391	FunctionDef	ASFormatter :: isUniformInitializerBrace ()		644390	0					
ANR	644392	CompoundStatement		3520:0:100700:100879	644390	0					
ANR	644393	IfStatement	if ( isCStyle ( ) && ! isInEnum && ! isImmediatelyPostPreprocessor )		644390	0					
ANR	644394	Condition	isCStyle ( ) && ! isInEnum && ! isImmediatelyPostPreprocessor	3521:5:100707:100763	644390	0	True				
ANR	644395	AndExpression	isCStyle ( ) && ! isInEnum && ! isImmediatelyPostPreprocessor		644390	0		&&			
ANR	644396	CallExpression	isCStyle ( )		644390	0					
ANR	644397	Callee	isCStyle		644390	0					
ANR	644398	Identifier	isCStyle		644390	0					
ANR	644399	ArgumentList			644390	1					
ANR	644400	AndExpression	! isInEnum && ! isImmediatelyPostPreprocessor		644390	1		&&			
ANR	644401	UnaryOperationExpression	! isInEnum		644390	0					
ANR	644402	UnaryOperator	!		644390	0					
ANR	644403	Identifier	isInEnum		644390	1					
ANR	644404	UnaryOperationExpression	! isImmediatelyPostPreprocessor		644390	1					
ANR	644405	UnaryOperator	!		644390	0					
ANR	644406	Identifier	isImmediatelyPostPreprocessor		644390	1					
ANR	644407	CompoundStatement		3:1:66:66	644390	1					
ANR	644408	IfStatement	if ( isInClassInitializer || isLegalNameChar ( previousNonWSChar ) )		644390	0					
ANR	644409	Condition	isInClassInitializer || isLegalNameChar ( previousNonWSChar )	3523:6:100775:100842	644390	0	True				
ANR	644410	OrExpression	isInClassInitializer || isLegalNameChar ( previousNonWSChar )		644390	0		||			
ANR	644411	Identifier	isInClassInitializer		644390	0					
ANR	644412	CallExpression	isLegalNameChar ( previousNonWSChar )		644390	1					
ANR	644413	Callee	isLegalNameChar		644390	0					
ANR	644414	Identifier	isLegalNameChar		644390	0					
ANR	644415	ArgumentList	previousNonWSChar		644390	1					
ANR	644416	Argument	previousNonWSChar		644390	0					
ANR	644417	Identifier	previousNonWSChar		644390	0					
ANR	644418	ReturnStatement	return true ;	3525:3:100848:100859	644390	1	True				
ANR	644419	Identifier	true		644390	0					
ANR	644420	ReturnStatement	return false ;	3527:1:100865:100877	644390	1	True				
ANR	644421	Identifier	false		644390	0					
ANR	644422	ReturnType	bool		644390	1					
ANR	644423	Identifier	ASFormatter :: isUniformInitializerBrace		644390	2					
ANR	644424	ParameterList			644390	3					
ANR	644425	CFGEntryNode	ENTRY		644390		True				
ANR	644426	CFGExitNode	EXIT		644390		True				
ANR	644427	Symbol	isInClassInitializer		644390						
ANR	644428	Symbol	previousNonWSChar		644390						
ANR	644429	Symbol	isInEnum		644390						
ANR	644430	Symbol	true		644390						
ANR	644431	Symbol	false		644390						
ANR	644432	Symbol	isLegalNameChar		644390						
ANR	644433	Symbol	isCStyle		644390						
ANR	644434	Symbol	isImmediatelyPostPreprocessor		644390						
ANR	644435	Function	ASFormatter :: isMultiStatementLine	3533:0:100956:102173							
ANR	644436	FunctionDef	ASFormatter :: isMultiStatementLine ()		644435	0					
ANR	644437	CompoundStatement		3534:0:101003:102173	644435	0					
ANR	644438	ExpressionStatement	assert ( ( isImmediatelyPostHeader || foundClosingHeader ) )	3535:1:101006:101061	644435	0	True				
ANR	644439	CallExpression	assert ( ( isImmediatelyPostHeader || foundClosingHeader ) )		644435	0					
ANR	644440	Callee	assert		644435	0					
ANR	644441	Identifier	assert		644435	0					
ANR	644442	ArgumentList	isImmediatelyPostHeader || foundClosingHeader		644435	1					
ANR	644443	Argument	isImmediatelyPostHeader || foundClosingHeader		644435	0					
ANR	644444	OrExpression	isImmediatelyPostHeader || foundClosingHeader		644435	0		||			
ANR	644445	Identifier	isImmediatelyPostHeader		644435	0					
ANR	644446	Identifier	foundClosingHeader		644435	1					
ANR	644447	IdentifierDeclStatement	bool isInComment_ = false ;	3536:1:101064:101089	644435	1	True				
ANR	644448	IdentifierDecl	isInComment_ = false		644435	0					
ANR	644449	IdentifierDeclType	bool		644435	0					
ANR	644450	Identifier	isInComment_		644435	1					
ANR	644451	AssignmentExpression	isInComment_ = false		644435	2		=			
ANR	644452	Identifier	false		644435	0					
ANR	644453	Identifier	false		644435	1					
ANR	644454	IdentifierDeclStatement	bool isInQuote_ = false ;	3537:1:101092:101115	644435	2	True				
ANR	644455	IdentifierDecl	isInQuote_ = false		644435	0					
ANR	644456	IdentifierDeclType	bool		644435	0					
ANR	644457	Identifier	isInQuote_		644435	1					
ANR	644458	AssignmentExpression	isInQuote_ = false		644435	2		=			
ANR	644459	Identifier	false		644435	0					
ANR	644460	Identifier	false		644435	1					
ANR	644461	IdentifierDeclStatement	int semiCount_ = 0 ;	3538:1:101118:101137	644435	3	True				
ANR	644462	IdentifierDecl	semiCount_ = 0		644435	0					
ANR	644463	IdentifierDeclType	int		644435	0					
ANR	644464	Identifier	semiCount_		644435	1					
ANR	644465	AssignmentExpression	semiCount_ = 0		644435	2		=			
ANR	644466	Identifier	semiCount_		644435	0					
ANR	644467	PrimaryExpression	0		644435	1					
ANR	644468	IdentifierDeclStatement	int parenCount_ = 0 ;	3539:1:101140:101160	644435	4	True				
ANR	644469	IdentifierDecl	parenCount_ = 0		644435	0					
ANR	644470	IdentifierDeclType	int		644435	0					
ANR	644471	Identifier	parenCount_		644435	1					
ANR	644472	AssignmentExpression	parenCount_ = 0		644435	2		=			
ANR	644473	Identifier	parenCount_		644435	0					
ANR	644474	PrimaryExpression	0		644435	1					
ANR	644475	IdentifierDeclStatement	int braceCount_ = 0 ;	3540:1:101163:101183	644435	5	True				
ANR	644476	IdentifierDecl	braceCount_ = 0		644435	0					
ANR	644477	IdentifierDeclType	int		644435	0					
ANR	644478	Identifier	braceCount_		644435	1					
ANR	644479	AssignmentExpression	braceCount_ = 0		644435	2		=			
ANR	644480	Identifier	braceCount_		644435	0					
ANR	644481	PrimaryExpression	0		644435	1					
ANR	644482	ForStatement	for ( size_t i = 0 ; i < currentLine . length ( ) ; i ++ )		644435	6					
ANR	644483	ForInit	size_t i = 0 ;	3542:6:101192:101204	644435	0	True				
ANR	644484	IdentifierDeclStatement	size_t i = 0 ;		644435	0					
ANR	644485	IdentifierDecl	i = 0		644435	0					
ANR	644486	IdentifierDeclType	size_t		644435	0					
ANR	644487	Identifier	i		644435	1					
ANR	644488	AssignmentExpression	i = 0		644435	2		=			
ANR	644489	Identifier	i		644435	0					
ANR	644490	PrimaryExpression	0		644435	1					
ANR	644491	Condition	i < currentLine . length ( )	3542:20:101206:101229	644435	1	True				
ANR	644492	RelationalExpression	i < currentLine . length ( )		644435	0		<			
ANR	644493	Identifier	i		644435	0					
ANR	644494	CallExpression	currentLine . length ( )		644435	1					
ANR	644495	Callee	currentLine . length		644435	0					
ANR	644496	MemberAccess	currentLine . length		644435	0					
ANR	644497	Identifier	currentLine		644435	0					
ANR	644498	Identifier	length		644435	1					
ANR	644499	ArgumentList			644435	1					
ANR	644500	PostIncDecOperationExpression	i ++	3542:46:101232:101234	644435	2	True				
ANR	644501	Identifier	i		644435	0					
ANR	644502	IncDec	++		644435	1					
ANR	644503	CompoundStatement		10:1:234:234	644435	3					
ANR	644504	IfStatement	if ( isInComment_ )		644435	0					
ANR	644505	Condition	isInComment_	3544:6:101246:101257	644435	0	True				
ANR	644506	Identifier	isInComment_		644435	0					
ANR	644507	CompoundStatement		12:2:258:258	644435	1					
ANR	644508	IfStatement	"if ( currentLine . compare ( i , 2 , ""*/"" ) == 0 )"		644435	0					
ANR	644509	Condition	"currentLine . compare ( i , 2 , ""*/"" ) == 0"	3546:7:101271:101306	644435	0	True				
ANR	644510	EqualityExpression	"currentLine . compare ( i , 2 , ""*/"" ) == 0"		644435	0		==			
ANR	644511	CallExpression	"currentLine . compare ( i , 2 , ""*/"" )"		644435	0					
ANR	644512	Callee	currentLine . compare		644435	0					
ANR	644513	MemberAccess	currentLine . compare		644435	0					
ANR	644514	Identifier	currentLine		644435	0					
ANR	644515	Identifier	compare		644435	1					
ANR	644516	ArgumentList	i		644435	1					
ANR	644517	Argument	i		644435	0					
ANR	644518	Identifier	i		644435	0					
ANR	644519	Argument	2		644435	1					
ANR	644520	PrimaryExpression	2		644435	0					
ANR	644521	Argument	"""*/"""		644435	2					
ANR	644522	PrimaryExpression	"""*/"""		644435	0					
ANR	644523	PrimaryExpression	0		644435	1					
ANR	644524	CompoundStatement		14:3:308:308	644435	1					
ANR	644525	ExpressionStatement	isInComment_ = false	3548:4:101318:101338	644435	0	True				
ANR	644526	AssignmentExpression	isInComment_ = false		644435	0		=			
ANR	644527	Identifier	isInComment_		644435	0					
ANR	644528	Identifier	false		644435	1					
ANR	644529	ContinueStatement	continue ;	3549:4:101344:101352	644435	1	True				
ANR	644530	IfStatement	"if ( currentLine . compare ( i , 2 , ""/*"" ) == 0 )"		644435	1					
ANR	644531	Condition	"currentLine . compare ( i , 2 , ""/*"" ) == 0"	3552:6:101369:101404	644435	0	True				
ANR	644532	EqualityExpression	"currentLine . compare ( i , 2 , ""/*"" ) == 0"		644435	0		==			
ANR	644533	CallExpression	"currentLine . compare ( i , 2 , ""/*"" )"		644435	0					
ANR	644534	Callee	currentLine . compare		644435	0					
ANR	644535	MemberAccess	currentLine . compare		644435	0					
ANR	644536	Identifier	currentLine		644435	0					
ANR	644537	Identifier	compare		644435	1					
ANR	644538	ArgumentList	i		644435	1					
ANR	644539	Argument	i		644435	0					
ANR	644540	Identifier	i		644435	0					
ANR	644541	Argument	2		644435	1					
ANR	644542	PrimaryExpression	2		644435	0					
ANR	644543	Argument	"""/*"""		644435	2					
ANR	644544	PrimaryExpression	"""/*"""		644435	0					
ANR	644545	PrimaryExpression	0		644435	1					
ANR	644546	CompoundStatement		20:2:405:405	644435	1					
ANR	644547	ExpressionStatement	isInComment_ = true	3554:3:101414:101433	644435	0	True				
ANR	644548	AssignmentExpression	isInComment_ = true		644435	0		=			
ANR	644549	Identifier	isInComment_		644435	0					
ANR	644550	Identifier	true		644435	1					
ANR	644551	ContinueStatement	continue ;	3555:3:101438:101446	644435	1	True				
ANR	644552	IfStatement	"if ( currentLine . compare ( i , 2 , ""//"" ) == 0 )"		644435	2					
ANR	644553	Condition	"currentLine . compare ( i , 2 , ""//"" ) == 0"	3557:6:101458:101493	644435	0	True				
ANR	644554	EqualityExpression	"currentLine . compare ( i , 2 , ""//"" ) == 0"		644435	0		==			
ANR	644555	CallExpression	"currentLine . compare ( i , 2 , ""//"" )"		644435	0					
ANR	644556	Callee	currentLine . compare		644435	0					
ANR	644557	MemberAccess	currentLine . compare		644435	0					
ANR	644558	Identifier	currentLine		644435	0					
ANR	644559	Identifier	compare		644435	1					
ANR	644560	ArgumentList	i		644435	1					
ANR	644561	Argument	i		644435	0					
ANR	644562	Identifier	i		644435	0					
ANR	644563	Argument	2		644435	1					
ANR	644564	PrimaryExpression	2		644435	0					
ANR	644565	Argument	"""//"""		644435	2					
ANR	644566	PrimaryExpression	"""//"""		644435	0					
ANR	644567	PrimaryExpression	0		644435	1					
ANR	644568	ReturnStatement	return false ;	3558:3:101499:101511	644435	1	True				
ANR	644569	Identifier	false		644435	0					
ANR	644570	IfStatement	if ( isInQuote_ )		644435	3					
ANR	644571	Condition	isInQuote_	3559:6:101519:101528	644435	0	True				
ANR	644572	Identifier	isInQuote_		644435	0					
ANR	644573	CompoundStatement		27:2:529:529	644435	1					
ANR	644574	IfStatement	"if ( currentLine [ i ] == '""' || currentLine [ i ] == '\\'' )"		644435	0					
ANR	644575	Condition	"currentLine [ i ] == '""' || currentLine [ i ] == '\\''"	3561:7:101542:101588	644435	0	True				
ANR	644576	OrExpression	"currentLine [ i ] == '""' || currentLine [ i ] == '\\''"		644435	0		||			
ANR	644577	EqualityExpression	"currentLine [ i ] == '""'"		644435	0		==			
ANR	644578	ArrayIndexing	currentLine [ i ]		644435	0					
ANR	644579	Identifier	currentLine		644435	0					
ANR	644580	Identifier	i		644435	1					
ANR	644581	PrimaryExpression	"'""'"		644435	1					
ANR	644582	EqualityExpression	currentLine [ i ] == '\\''		644435	1		==			
ANR	644583	ArrayIndexing	currentLine [ i ]		644435	0					
ANR	644584	Identifier	currentLine		644435	0					
ANR	644585	Identifier	i		644435	1					
ANR	644586	PrimaryExpression	'\\''		644435	1					
ANR	644587	ExpressionStatement	isInQuote_ = false	3562:4:101595:101613	644435	1	True				
ANR	644588	AssignmentExpression	isInQuote_ = false		644435	0		=			
ANR	644589	Identifier	isInQuote_		644435	0					
ANR	644590	Identifier	false		644435	1					
ANR	644591	ContinueStatement	continue ;	3563:3:101618:101626	644435	1	True				
ANR	644592	IfStatement	"if ( currentLine [ i ] == '""' || currentLine [ i ] == '\\'' )"		644435	4					
ANR	644593	Condition	"currentLine [ i ] == '""' || currentLine [ i ] == '\\''"	3565:6:101638:101684	644435	0	True				
ANR	644594	OrExpression	"currentLine [ i ] == '""' || currentLine [ i ] == '\\''"		644435	0		||			
ANR	644595	EqualityExpression	"currentLine [ i ] == '""'"		644435	0		==			
ANR	644596	ArrayIndexing	currentLine [ i ]		644435	0					
ANR	644597	Identifier	currentLine		644435	0					
ANR	644598	Identifier	i		644435	1					
ANR	644599	PrimaryExpression	"'""'"		644435	1					
ANR	644600	EqualityExpression	currentLine [ i ] == '\\''		644435	1		==			
ANR	644601	ArrayIndexing	currentLine [ i ]		644435	0					
ANR	644602	Identifier	currentLine		644435	0					
ANR	644603	Identifier	i		644435	1					
ANR	644604	PrimaryExpression	'\\''		644435	1					
ANR	644605	CompoundStatement		33:2:685:685	644435	1					
ANR	644606	ExpressionStatement	isInQuote_ = true	3567:3:101694:101711	644435	0	True				
ANR	644607	AssignmentExpression	isInQuote_ = true		644435	0		=			
ANR	644608	Identifier	isInQuote_		644435	0					
ANR	644609	Identifier	true		644435	1					
ANR	644610	ContinueStatement	continue ;	3568:3:101716:101724	644435	1	True				
ANR	644611	IfStatement	if ( currentLine [ i ] == '(' )		644435	5					
ANR	644612	Condition	currentLine [ i ] == '('	3570:6:101736:101756	644435	0	True				
ANR	644613	EqualityExpression	currentLine [ i ] == '('		644435	0		==			
ANR	644614	ArrayIndexing	currentLine [ i ]		644435	0					
ANR	644615	Identifier	currentLine		644435	0					
ANR	644616	Identifier	i		644435	1					
ANR	644617	PrimaryExpression	'('		644435	1					
ANR	644618	CompoundStatement		38:2:757:757	644435	1					
ANR	644619	ExpressionStatement	++ parenCount_	3572:3:101766:101779	644435	0	True				
ANR	644620	UnaryExpression	++ parenCount_		644435	0					
ANR	644621	IncDec	++		644435	0					
ANR	644622	Identifier	parenCount_		644435	1					
ANR	644623	ContinueStatement	continue ;	3573:3:101784:101792	644435	1	True				
ANR	644624	IfStatement	if ( currentLine [ i ] == ')' )		644435	6					
ANR	644625	Condition	currentLine [ i ] == ')'	3575:6:101804:101824	644435	0	True				
ANR	644626	EqualityExpression	currentLine [ i ] == ')'		644435	0		==			
ANR	644627	ArrayIndexing	currentLine [ i ]		644435	0					
ANR	644628	Identifier	currentLine		644435	0					
ANR	644629	Identifier	i		644435	1					
ANR	644630	PrimaryExpression	')'		644435	1					
ANR	644631	CompoundStatement		43:2:825:825	644435	1					
ANR	644632	ExpressionStatement	-- parenCount_	3577:3:101834:101847	644435	0	True				
ANR	644633	UnaryExpression	-- parenCount_		644435	0					
ANR	644634	IncDec	--		644435	0					
ANR	644635	Identifier	parenCount_		644435	1					
ANR	644636	ContinueStatement	continue ;	3578:3:101852:101860	644435	1	True				
ANR	644637	IfStatement	if ( parenCount_ > 0 )		644435	7					
ANR	644638	Condition	parenCount_ > 0	3580:6:101872:101886	644435	0	True				
ANR	644639	RelationalExpression	parenCount_ > 0		644435	0		>			
ANR	644640	Identifier	parenCount_		644435	0					
ANR	644641	PrimaryExpression	0		644435	1					
ANR	644642	ContinueStatement	continue ;	3581:3:101892:101900	644435	1	True				
ANR	644643	IfStatement	if ( currentLine [ i ] == '{' )		644435	8					
ANR	644644	Condition	currentLine [ i ] == '{'	3582:6:101908:101928	644435	0	True				
ANR	644645	EqualityExpression	currentLine [ i ] == '{'		644435	0		==			
ANR	644646	ArrayIndexing	currentLine [ i ]		644435	0					
ANR	644647	Identifier	currentLine		644435	0					
ANR	644648	Identifier	i		644435	1					
ANR	644649	PrimaryExpression	'{'		644435	1					
ANR	644650	CompoundStatement		50:2:929:929	644435	1					
ANR	644651	ExpressionStatement	++ braceCount_	3584:3:101938:101951	644435	0	True				
ANR	644652	UnaryExpression	++ braceCount_		644435	0					
ANR	644653	IncDec	++		644435	0					
ANR	644654	Identifier	braceCount_		644435	1					
ANR	644655	IfStatement	if ( currentLine [ i ] == '}' )		644435	9					
ANR	644656	Condition	currentLine [ i ] == '}'	3586:6:101963:101983	644435	0	True				
ANR	644657	EqualityExpression	currentLine [ i ] == '}'		644435	0		==			
ANR	644658	ArrayIndexing	currentLine [ i ]		644435	0					
ANR	644659	Identifier	currentLine		644435	0					
ANR	644660	Identifier	i		644435	1					
ANR	644661	PrimaryExpression	'}'		644435	1					
ANR	644662	CompoundStatement		54:2:984:984	644435	1					
ANR	644663	ExpressionStatement	-- braceCount_	3588:3:101993:102006	644435	0	True				
ANR	644664	UnaryExpression	-- braceCount_		644435	0					
ANR	644665	IncDec	--		644435	0					
ANR	644666	Identifier	braceCount_		644435	1					
ANR	644667	IfStatement	if ( braceCount_ > 0 )		644435	10					
ANR	644668	Condition	braceCount_ > 0	3590:6:102018:102032	644435	0	True				
ANR	644669	RelationalExpression	braceCount_ > 0		644435	0		>			
ANR	644670	Identifier	braceCount_		644435	0					
ANR	644671	PrimaryExpression	0		644435	1					
ANR	644672	ContinueStatement	continue ;	3591:3:102038:102046	644435	1	True				
ANR	644673	IfStatement	if ( currentLine [ i ] == ';' )		644435	11					
ANR	644674	Condition	currentLine [ i ] == ';'	3592:6:102054:102074	644435	0	True				
ANR	644675	EqualityExpression	currentLine [ i ] == ';'		644435	0		==			
ANR	644676	ArrayIndexing	currentLine [ i ]		644435	0					
ANR	644677	Identifier	currentLine		644435	0					
ANR	644678	Identifier	i		644435	1					
ANR	644679	PrimaryExpression	';'		644435	1					
ANR	644680	CompoundStatement		60:2:1075:1075	644435	1					
ANR	644681	ExpressionStatement	++ semiCount_	3594:3:102084:102096	644435	0	True				
ANR	644682	UnaryExpression	++ semiCount_		644435	0					
ANR	644683	IncDec	++		644435	0					
ANR	644684	Identifier	semiCount_		644435	1					
ANR	644685	IfStatement	if ( semiCount_ > 1 )		644435	1					
ANR	644686	Condition	semiCount_ > 1	3595:7:102105:102118	644435	0	True				
ANR	644687	RelationalExpression	semiCount_ > 1		644435	0		>			
ANR	644688	Identifier	semiCount_		644435	0					
ANR	644689	PrimaryExpression	1		644435	1					
ANR	644690	ReturnStatement	return true ;	3596:4:102125:102136	644435	1	True				
ANR	644691	Identifier	true		644435	0					
ANR	644692	ContinueStatement	continue ;	3597:3:102141:102149	644435	2	True				
ANR	644693	ReturnStatement	return false ;	3600:1:102159:102171	644435	7	True				
ANR	644694	Identifier	false		644435	0					
ANR	644695	ReturnType	bool		644435	1					
ANR	644696	Identifier	ASFormatter :: isMultiStatementLine		644435	2					
ANR	644697	ParameterList			644435	3					
ANR	644698	CFGEntryNode	ENTRY		644435		True				
ANR	644699	CFGExitNode	EXIT		644435		True				
ANR	644700	Symbol	braceCount_		644435						
ANR	644701	Symbol	false		644435						
ANR	644702	Symbol	i		644435						
ANR	644703	Symbol	isImmediatelyPostHeader		644435						
ANR	644704	Symbol	isInComment_		644435						
ANR	644705	Symbol	isInQuote_		644435						
ANR	644706	Symbol	semiCount_		644435						
ANR	644707	Symbol	foundClosingHeader		644435						
ANR	644708	Symbol	* currentLine		644435						
ANR	644709	Symbol	* i		644435						
ANR	644710	Symbol	currentLine . length		644435						
ANR	644711	Symbol	true		644435						
ANR	644712	Symbol	parenCount_		644435						
ANR	644713	Symbol	currentLine . compare		644435						
ANR	644714	Symbol	currentLine		644435						
ANR	644715	Function	ASFormatter :: peekNextText	3609:0:102367:103809							
ANR	644716	FunctionDef	"ASFormatter :: peekNextText (const string & firstLine , bool endOnEmptyLine , shared_ptr < ASPeekStream > streamArg)"		644715	0					
ANR	644717	CompoundStatement		3612:0:102576:103809	644715	0					
ANR	644718	IdentifierDeclStatement	bool isFirstLine = true ;	3613:1:102579:102602	644715	0	True				
ANR	644719	IdentifierDecl	isFirstLine = true		644715	0					
ANR	644720	IdentifierDeclType	bool		644715	0					
ANR	644721	Identifier	isFirstLine		644715	1					
ANR	644722	AssignmentExpression	isFirstLine = true		644715	2		=			
ANR	644723	Identifier	true		644715	0					
ANR	644724	Identifier	true		644715	1					
ANR	644725	IdentifierDeclStatement	string nextLine_ = firstLine ;	3614:1:102605:102633	644715	1	True				
ANR	644726	IdentifierDecl	nextLine_ = firstLine		644715	0					
ANR	644727	IdentifierDeclType	string		644715	0					
ANR	644728	Identifier	nextLine_		644715	1					
ANR	644729	AssignmentExpression	nextLine_ = firstLine		644715	2		=			
ANR	644730	Identifier	firstLine		644715	0					
ANR	644731	Identifier	firstLine		644715	1					
ANR	644732	IdentifierDeclStatement	size_t firstChar = string :: npos ;	3615:1:102636:102667	644715	2	True				
ANR	644733	IdentifierDecl	firstChar = string :: npos		644715	0					
ANR	644734	IdentifierDeclType	size_t		644715	0					
ANR	644735	Identifier	firstChar		644715	1					
ANR	644736	AssignmentExpression	firstChar = string :: npos		644715	2		=			
ANR	644737	Identifier	string :: npos		644715	0					
ANR	644738	Identifier	string :: npos		644715	1					
ANR	644739	IdentifierDeclStatement	shared_ptr < ASPeekStream > stream = streamArg ;	3616:1:102670:102713	644715	3	True				
ANR	644740	IdentifierDecl	stream = streamArg		644715	0					
ANR	644741	IdentifierDeclType	shared_ptr < ASPeekStream >		644715	0					
ANR	644742	Identifier	stream		644715	1					
ANR	644743	AssignmentExpression	stream = streamArg		644715	2		=			
ANR	644744	Identifier	streamArg		644715	0					
ANR	644745	Identifier	streamArg		644715	1					
ANR	644746	IfStatement	if ( stream == nullptr )		644715	4					
ANR	644747	Condition	stream == nullptr	3617:5:102720:102736	644715	0	True				
ANR	644748	EqualityExpression	stream == nullptr		644715	0		==			
ANR	644749	Identifier	stream		644715	0					
ANR	644750	Identifier	nullptr		644715	1					
ANR	644751	ExpressionStatement	stream = make_shared < ASPeekStream > ( sourceIterator )	3618:2:102772:102822	644715	1	True				
ANR	644752	AssignmentExpression	stream = make_shared < ASPeekStream > ( sourceIterator )		644715	0		=			
ANR	644753	Identifier	stream		644715	0					
ANR	644754	RelationalExpression	make_shared < ASPeekStream > ( sourceIterator )		644715	1		<			
ANR	644755	Identifier	make_shared		644715	0					
ANR	644756	RelationalExpression	ASPeekStream > ( sourceIterator )		644715	1		>			
ANR	644757	Identifier	ASPeekStream		644715	0					
ANR	644758	Identifier	sourceIterator		644715	1					
ANR	644759	IdentifierDeclStatement	bool isInComment_ = false ;	3621:1:102885:102910	644715	5	True				
ANR	644760	IdentifierDecl	isInComment_ = false		644715	0					
ANR	644761	IdentifierDeclType	bool		644715	0					
ANR	644762	Identifier	isInComment_		644715	1					
ANR	644763	AssignmentExpression	isInComment_ = false		644715	2		=			
ANR	644764	Identifier	false		644715	0					
ANR	644765	Identifier	false		644715	1					
ANR	644766	WhileStatement	while ( stream -> hasMoreLines ( ) || isFirstLine )		644715	6					
ANR	644767	Condition	stream -> hasMoreLines ( ) || isFirstLine	3622:8:102920:102956	644715	0	True				
ANR	644768	OrExpression	stream -> hasMoreLines ( ) || isFirstLine		644715	0		||			
ANR	644769	CallExpression	stream -> hasMoreLines ( )		644715	0					
ANR	644770	Callee	stream -> hasMoreLines		644715	0					
ANR	644771	PtrMemberAccess	stream -> hasMoreLines		644715	0					
ANR	644772	Identifier	stream		644715	0					
ANR	644773	Identifier	hasMoreLines		644715	1					
ANR	644774	ArgumentList			644715	1					
ANR	644775	Identifier	isFirstLine		644715	1					
ANR	644776	CompoundStatement		12:1:383:383	644715	1					
ANR	644777	IfStatement	if ( isFirstLine )		644715	0					
ANR	644778	Condition	isFirstLine	3624:6:102968:102978	644715	0	True				
ANR	644779	Identifier	isFirstLine		644715	0					
ANR	644780	ExpressionStatement	isFirstLine = false	3625:3:102984:103003	644715	1	True				
ANR	644781	AssignmentExpression	isFirstLine = false		644715	0		=			
ANR	644782	Identifier	isFirstLine		644715	0					
ANR	644783	Identifier	false		644715	1					
ANR	644784	ElseStatement	else		644715	0					
ANR	644785	ExpressionStatement	nextLine_ = stream -> peekNextLine ( )	3627:3:103015:103049	644715	0	True				
ANR	644786	AssignmentExpression	nextLine_ = stream -> peekNextLine ( )		644715	0		=			
ANR	644787	Identifier	nextLine_		644715	0					
ANR	644788	CallExpression	stream -> peekNextLine ( )		644715	1					
ANR	644789	Callee	stream -> peekNextLine		644715	0					
ANR	644790	PtrMemberAccess	stream -> peekNextLine		644715	0					
ANR	644791	Identifier	stream		644715	0					
ANR	644792	Identifier	peekNextLine		644715	1					
ANR	644793	ArgumentList			644715	1					
ANR	644794	ExpressionStatement	"firstChar = nextLine_ . find_first_not_of ( "" \\t"" )"	3629:2:103054:103100	644715	1	True				
ANR	644795	AssignmentExpression	"firstChar = nextLine_ . find_first_not_of ( "" \\t"" )"		644715	0		=			
ANR	644796	Identifier	firstChar		644715	0					
ANR	644797	CallExpression	"nextLine_ . find_first_not_of ( "" \\t"" )"		644715	1					
ANR	644798	Callee	nextLine_ . find_first_not_of		644715	0					
ANR	644799	MemberAccess	nextLine_ . find_first_not_of		644715	0					
ANR	644800	Identifier	nextLine_		644715	0					
ANR	644801	Identifier	find_first_not_of		644715	1					
ANR	644802	ArgumentList	""" \\t"""		644715	1					
ANR	644803	Argument	""" \\t"""		644715	0					
ANR	644804	PrimaryExpression	""" \\t"""		644715	0					
ANR	644805	IfStatement	if ( firstChar == string :: npos )		644715	2					
ANR	644806	Condition	firstChar == string :: npos	3630:6:103108:103132	644715	0	True				
ANR	644807	EqualityExpression	firstChar == string :: npos		644715	0		==			
ANR	644808	Identifier	firstChar		644715	0					
ANR	644809	Identifier	string :: npos		644715	1					
ANR	644810	CompoundStatement		20:2:560:560	644715	1					
ANR	644811	IfStatement	if ( endOnEmptyLine && ! isInComment_ )		644715	0					
ANR	644812	Condition	endOnEmptyLine && ! isInComment_	3632:7:103146:103176	644715	0	True				
ANR	644813	AndExpression	endOnEmptyLine && ! isInComment_		644715	0		&&			
ANR	644814	Identifier	endOnEmptyLine		644715	0					
ANR	644815	UnaryOperationExpression	! isInComment_		644715	1					
ANR	644816	UnaryOperator	!		644715	0					
ANR	644817	Identifier	isInComment_		644715	1					
ANR	644818	BreakStatement	break ;	3633:4:103183:103188	644715	1	True				
ANR	644819	ContinueStatement	continue ;	3634:3:103193:103201	644715	1	True				
ANR	644820	IfStatement	"if ( nextLine_ . compare ( firstChar , 2 , ""/*"" ) == 0 )"		644715	3					
ANR	644821	Condition	"nextLine_ . compare ( firstChar , 2 , ""/*"" ) == 0"	3637:6:103214:103255	644715	0	True				
ANR	644822	EqualityExpression	"nextLine_ . compare ( firstChar , 2 , ""/*"" ) == 0"		644715	0		==			
ANR	644823	CallExpression	"nextLine_ . compare ( firstChar , 2 , ""/*"" )"		644715	0					
ANR	644824	Callee	nextLine_ . compare		644715	0					
ANR	644825	MemberAccess	nextLine_ . compare		644715	0					
ANR	644826	Identifier	nextLine_		644715	0					
ANR	644827	Identifier	compare		644715	1					
ANR	644828	ArgumentList	firstChar		644715	1					
ANR	644829	Argument	firstChar		644715	0					
ANR	644830	Identifier	firstChar		644715	0					
ANR	644831	Argument	2		644715	1					
ANR	644832	PrimaryExpression	2		644715	0					
ANR	644833	Argument	"""/*"""		644715	2					
ANR	644834	PrimaryExpression	"""/*"""		644715	0					
ANR	644835	PrimaryExpression	0		644715	1					
ANR	644836	CompoundStatement		27:2:683:683	644715	1					
ANR	644837	ExpressionStatement	firstChar += 2	3639:3:103265:103279	644715	0	True				
ANR	644838	AssignmentExpression	firstChar += 2		644715	0		+=			
ANR	644839	Identifier	firstChar		644715	0					
ANR	644840	PrimaryExpression	2		644715	1					
ANR	644841	ExpressionStatement	isInComment_ = true	3640:3:103284:103303	644715	1	True				
ANR	644842	AssignmentExpression	isInComment_ = true		644715	0		=			
ANR	644843	Identifier	isInComment_		644715	0					
ANR	644844	Identifier	true		644715	1					
ANR	644845	IfStatement	if ( isInComment_ )		644715	4					
ANR	644846	Condition	isInComment_	3643:6:103316:103327	644715	0	True				
ANR	644847	Identifier	isInComment_		644715	0					
ANR	644848	CompoundStatement		33:2:755:755	644715	1					
ANR	644849	ExpressionStatement	"firstChar = nextLine_ . find ( ""*/"" , firstChar )"	3645:3:103337:103380	644715	0	True				
ANR	644850	AssignmentExpression	"firstChar = nextLine_ . find ( ""*/"" , firstChar )"		644715	0		=			
ANR	644851	Identifier	firstChar		644715	0					
ANR	644852	CallExpression	"nextLine_ . find ( ""*/"" , firstChar )"		644715	1					
ANR	644853	Callee	nextLine_ . find		644715	0					
ANR	644854	MemberAccess	nextLine_ . find		644715	0					
ANR	644855	Identifier	nextLine_		644715	0					
ANR	644856	Identifier	find		644715	1					
ANR	644857	ArgumentList	"""*/"""		644715	1					
ANR	644858	Argument	"""*/"""		644715	0					
ANR	644859	PrimaryExpression	"""*/"""		644715	0					
ANR	644860	Argument	firstChar		644715	1					
ANR	644861	Identifier	firstChar		644715	0					
ANR	644862	IfStatement	if ( firstChar == string :: npos )		644715	1					
ANR	644863	Condition	firstChar == string :: npos	3646:7:103389:103413	644715	0	True				
ANR	644864	EqualityExpression	firstChar == string :: npos		644715	0		==			
ANR	644865	Identifier	firstChar		644715	0					
ANR	644866	Identifier	string :: npos		644715	1					
ANR	644867	ContinueStatement	continue ;	3647:4:103420:103428	644715	1	True				
ANR	644868	ExpressionStatement	firstChar += 2	3648:3:103433:103447	644715	2	True				
ANR	644869	AssignmentExpression	firstChar += 2		644715	0		+=			
ANR	644870	Identifier	firstChar		644715	0					
ANR	644871	PrimaryExpression	2		644715	1					
ANR	644872	ExpressionStatement	isInComment_ = false	3649:3:103452:103472	644715	3	True				
ANR	644873	AssignmentExpression	isInComment_ = false		644715	0		=			
ANR	644874	Identifier	isInComment_		644715	0					
ANR	644875	Identifier	false		644715	1					
ANR	644876	ExpressionStatement	"firstChar = nextLine_ . find_first_not_of ( "" \\t"" , firstChar )"	3650:3:103477:103534	644715	4	True				
ANR	644877	AssignmentExpression	"firstChar = nextLine_ . find_first_not_of ( "" \\t"" , firstChar )"		644715	0		=			
ANR	644878	Identifier	firstChar		644715	0					
ANR	644879	CallExpression	"nextLine_ . find_first_not_of ( "" \\t"" , firstChar )"		644715	1					
ANR	644880	Callee	nextLine_ . find_first_not_of		644715	0					
ANR	644881	MemberAccess	nextLine_ . find_first_not_of		644715	0					
ANR	644882	Identifier	nextLine_		644715	0					
ANR	644883	Identifier	find_first_not_of		644715	1					
ANR	644884	ArgumentList	""" \\t"""		644715	1					
ANR	644885	Argument	""" \\t"""		644715	0					
ANR	644886	PrimaryExpression	""" \\t"""		644715	0					
ANR	644887	Argument	firstChar		644715	1					
ANR	644888	Identifier	firstChar		644715	0					
ANR	644889	IfStatement	if ( firstChar == string :: npos )		644715	5					
ANR	644890	Condition	firstChar == string :: npos	3651:7:103543:103567	644715	0	True				
ANR	644891	EqualityExpression	firstChar == string :: npos		644715	0		==			
ANR	644892	Identifier	firstChar		644715	0					
ANR	644893	Identifier	string :: npos		644715	1					
ANR	644894	ContinueStatement	continue ;	3652:4:103574:103582	644715	1	True				
ANR	644895	IfStatement	"if ( nextLine_ . compare ( firstChar , 2 , ""//"" ) == 0 )"		644715	5					
ANR	644896	Condition	"nextLine_ . compare ( firstChar , 2 , ""//"" ) == 0"	3655:6:103595:103636	644715	0	True				
ANR	644897	EqualityExpression	"nextLine_ . compare ( firstChar , 2 , ""//"" ) == 0"		644715	0		==			
ANR	644898	CallExpression	"nextLine_ . compare ( firstChar , 2 , ""//"" )"		644715	0					
ANR	644899	Callee	nextLine_ . compare		644715	0					
ANR	644900	MemberAccess	nextLine_ . compare		644715	0					
ANR	644901	Identifier	nextLine_		644715	0					
ANR	644902	Identifier	compare		644715	1					
ANR	644903	ArgumentList	firstChar		644715	1					
ANR	644904	Argument	firstChar		644715	0					
ANR	644905	Identifier	firstChar		644715	0					
ANR	644906	Argument	2		644715	1					
ANR	644907	PrimaryExpression	2		644715	0					
ANR	644908	Argument	"""//"""		644715	2					
ANR	644909	PrimaryExpression	"""//"""		644715	0					
ANR	644910	PrimaryExpression	0		644715	1					
ANR	644911	ContinueStatement	continue ;	3656:3:103642:103650	644715	1	True				
ANR	644912	BreakStatement	break ;	3659:2:103680:103685	644715	6	True				
ANR	644913	IfStatement	if ( firstChar == string :: npos )		644715	7					
ANR	644914	Condition	firstChar == string :: npos	3662:5:103696:103720	644715	0	True				
ANR	644915	EqualityExpression	firstChar == string :: npos		644715	0		==			
ANR	644916	Identifier	firstChar		644715	0					
ANR	644917	Identifier	string :: npos		644715	1					
ANR	644918	ExpressionStatement	"nextLine_ = """""	3663:2:103725:103739	644715	1	True				
ANR	644919	AssignmentExpression	"nextLine_ = """""		644715	0		=			
ANR	644920	Identifier	nextLine_		644715	0					
ANR	644921	PrimaryExpression	""""""		644715	1					
ANR	644922	ElseStatement	else		644715	0					
ANR	644923	ExpressionStatement	nextLine_ = nextLine_ . substr ( firstChar )	3665:2:103749:103788	644715	0	True				
ANR	644924	AssignmentExpression	nextLine_ = nextLine_ . substr ( firstChar )		644715	0		=			
ANR	644925	Identifier	nextLine_		644715	0					
ANR	644926	CallExpression	nextLine_ . substr ( firstChar )		644715	1					
ANR	644927	Callee	nextLine_ . substr		644715	0					
ANR	644928	MemberAccess	nextLine_ . substr		644715	0					
ANR	644929	Identifier	nextLine_		644715	0					
ANR	644930	Identifier	substr		644715	1					
ANR	644931	ArgumentList	firstChar		644715	1					
ANR	644932	Argument	firstChar		644715	0					
ANR	644933	Identifier	firstChar		644715	0					
ANR	644934	ReturnStatement	return nextLine_ ;	3666:1:103791:103807	644715	8	True				
ANR	644935	Identifier	nextLine_		644715	0					
ANR	644936	ReturnType	string		644715	1					
ANR	644937	Identifier	ASFormatter :: peekNextText		644715	2					
ANR	644938	ParameterList	"const string & firstLine , bool endOnEmptyLine , shared_ptr < ASPeekStream > streamArg"		644715	3					
ANR	644939	Parameter	const string & firstLine	3609:33:102400:102422	644715	0	True				
ANR	644940	ParameterType	const string &		644715	0					
ANR	644941	Identifier	firstLine		644715	1					
ANR	644942	Parameter	bool endOnEmptyLine	3610:33:102458:102476	644715	1	True				
ANR	644943	ParameterType	bool		644715	0					
ANR	644944	Identifier	endOnEmptyLine		644715	1					
ANR	644945	Parameter	shared_ptr < ASPeekStream > streamArg	3611:33:102522:102555	644715	2	True				
ANR	644946	ParameterType	shared_ptr < ASPeekStream >		644715	0					
ANR	644947	Identifier	streamArg		644715	1					
ANR	644948	CFGEntryNode	ENTRY		644715		True				
ANR	644949	CFGExitNode	EXIT		644715		True				
ANR	644950	Symbol	firstChar		644715						
ANR	644951	Symbol	nextLine_ . find_first_not_of		644715						
ANR	644952	Symbol	nextLine_		644715						
ANR	644953	Symbol	nextLine_ . find		644715						
ANR	644954	Symbol	nextLine_ . substr		644715						
ANR	644955	Symbol	string :: npos		644715						
ANR	644956	Symbol	false		644715						
ANR	644957	Symbol	isInComment_		644715						
ANR	644958	Symbol	stream -> hasMoreLines		644715						
ANR	644959	Symbol	nextLine_ . compare		644715						
ANR	644960	Symbol	firstLine		644715						
ANR	644961	Symbol	make_shared		644715						
ANR	644962	Symbol	ASPeekStream		644715						
ANR	644963	Symbol	stream		644715						
ANR	644964	Symbol	endOnEmptyLine		644715						
ANR	644965	Symbol	true		644715						
ANR	644966	Symbol	* stream		644715						
ANR	644967	Symbol	streamArg		644715						
ANR	644968	Symbol	isFirstLine		644715						
ANR	644969	Symbol	nullptr		644715						
ANR	644970	Symbol	stream -> peekNextLine		644715						
ANR	644971	Symbol	sourceIterator		644715						
ANR	644972	Function	ASFormatter :: adjustComments	3674:0:103975:105208							
ANR	644973	FunctionDef	ASFormatter :: adjustComments ()		644972	0					
ANR	644974	CompoundStatement		3675:0:104010:105208	644972	0					
ANR	644975	ExpressionStatement	assert ( spacePadNum != 0 )	3676:1:104013:104037	644972	0	True				
ANR	644976	CallExpression	assert ( spacePadNum != 0 )		644972	0					
ANR	644977	Callee	assert		644972	0					
ANR	644978	Identifier	assert		644972	0					
ANR	644979	ArgumentList	spacePadNum != 0		644972	1					
ANR	644980	Argument	spacePadNum != 0		644972	0					
ANR	644981	EqualityExpression	spacePadNum != 0		644972	0		!=			
ANR	644982	Identifier	spacePadNum		644972	0					
ANR	644983	PrimaryExpression	0		644972	1					
ANR	644984	ExpressionStatement	"assert ( isSequenceReached ( ""//"" ) || isSequenceReached ( ""/*"" ) )"	3677:1:104040:104098	644972	1	True				
ANR	644985	CallExpression	"assert ( isSequenceReached ( ""//"" ) || isSequenceReached ( ""/*"" ) )"		644972	0					
ANR	644986	Callee	assert		644972	0					
ANR	644987	Identifier	assert		644972	0					
ANR	644988	ArgumentList	"isSequenceReached ( ""//"" ) || isSequenceReached ( ""/*"" )"		644972	1					
ANR	644989	Argument	"isSequenceReached ( ""//"" ) || isSequenceReached ( ""/*"" )"		644972	0					
ANR	644990	OrExpression	"isSequenceReached ( ""//"" ) || isSequenceReached ( ""/*"" )"		644972	0		||			
ANR	644991	CallExpression	"isSequenceReached ( ""//"" )"		644972	0					
ANR	644992	Callee	isSequenceReached		644972	0					
ANR	644993	Identifier	isSequenceReached		644972	0					
ANR	644994	ArgumentList	"""//"""		644972	1					
ANR	644995	Argument	"""//"""		644972	0					
ANR	644996	PrimaryExpression	"""//"""		644972	0					
ANR	644997	CallExpression	"isSequenceReached ( ""/*"" )"		644972	1					
ANR	644998	Callee	isSequenceReached		644972	0					
ANR	644999	Identifier	isSequenceReached		644972	0					
ANR	645000	ArgumentList	"""/*"""		644972	1					
ANR	645001	Argument	"""/*"""		644972	0					
ANR	645002	PrimaryExpression	"""/*"""		644972	0					
ANR	645003	IfStatement	"if ( isSequenceReached ( ""/*"" ) )"		644972	2					
ANR	645004	Condition	"isSequenceReached ( ""/*"" )"	3680:5:104174:104196	644972	0	True				
ANR	645005	CallExpression	"isSequenceReached ( ""/*"" )"		644972	0					
ANR	645006	Callee	isSequenceReached		644972	0					
ANR	645007	Identifier	isSequenceReached		644972	0					
ANR	645008	ArgumentList	"""/*"""		644972	1					
ANR	645009	Argument	"""/*"""		644972	0					
ANR	645010	PrimaryExpression	"""/*"""		644972	0					
ANR	645011	CompoundStatement		8:2:193:244	644972	1					
ANR	645012	IdentifierDeclStatement	"size_t endNum = currentLine . find ( ""*/"" , charNum + 2 ) ;"	3682:2:104204:104255	644972	0	True				
ANR	645013	IdentifierDecl	"endNum = currentLine . find ( ""*/"" , charNum + 2 )"		644972	0					
ANR	645014	IdentifierDeclType	size_t		644972	0					
ANR	645015	Identifier	endNum		644972	1					
ANR	645016	AssignmentExpression	"endNum = currentLine . find ( ""*/"" , charNum + 2 )"		644972	2		=			
ANR	645017	Identifier	endNum		644972	0					
ANR	645018	CallExpression	"currentLine . find ( ""*/"" , charNum + 2 )"		644972	1					
ANR	645019	Callee	currentLine . find		644972	0					
ANR	645020	MemberAccess	currentLine . find		644972	0					
ANR	645021	Identifier	currentLine		644972	0					
ANR	645022	Identifier	find		644972	1					
ANR	645023	ArgumentList	"""*/"""		644972	1					
ANR	645024	Argument	"""*/"""		644972	0					
ANR	645025	PrimaryExpression	"""*/"""		644972	0					
ANR	645026	Argument	charNum + 2		644972	1					
ANR	645027	AdditiveExpression	charNum + 2		644972	0		+			
ANR	645028	Identifier	charNum		644972	0					
ANR	645029	PrimaryExpression	2		644972	1					
ANR	645030	IfStatement	if ( endNum == string :: npos )		644972	1					
ANR	645031	Condition	endNum == string :: npos	3683:6:104263:104284	644972	0	True				
ANR	645032	EqualityExpression	endNum == string :: npos		644972	0		==			
ANR	645033	Identifier	endNum		644972	0					
ANR	645034	Identifier	string :: npos		644972	1					
ANR	645035	ReturnStatement	return ;	3684:3:104290:104296	644972	1	True				
ANR	645036	IfStatement	"if ( currentLine . find_first_not_of ( "" \\t"" , endNum + 2 ) != string :: npos )"		644972	2					
ANR	645037	Condition	"currentLine . find_first_not_of ( "" \\t"" , endNum + 2 ) != string :: npos"	3685:6:104304:104367	644972	0	True				
ANR	645038	EqualityExpression	"currentLine . find_first_not_of ( "" \\t"" , endNum + 2 ) != string :: npos"		644972	0		!=			
ANR	645039	CallExpression	"currentLine . find_first_not_of ( "" \\t"" , endNum + 2 )"		644972	0					
ANR	645040	Callee	currentLine . find_first_not_of		644972	0					
ANR	645041	MemberAccess	currentLine . find_first_not_of		644972	0					
ANR	645042	Identifier	currentLine		644972	0					
ANR	645043	Identifier	find_first_not_of		644972	1					
ANR	645044	ArgumentList	""" \\t"""		644972	1					
ANR	645045	Argument	""" \\t"""		644972	0					
ANR	645046	PrimaryExpression	""" \\t"""		644972	0					
ANR	645047	Argument	endNum + 2		644972	1					
ANR	645048	AdditiveExpression	endNum + 2		644972	0		+			
ANR	645049	Identifier	endNum		644972	0					
ANR	645050	PrimaryExpression	2		644972	1					
ANR	645051	Identifier	string :: npos		644972	1					
ANR	645052	ReturnStatement	return ;	3686:3:104373:104379	644972	1	True				
ANR	645053	IdentifierDeclStatement	size_t len = formattedLine . length ( ) ;	3689:1:104386:104421	644972	3	True				
ANR	645054	IdentifierDecl	len = formattedLine . length ( )		644972	0					
ANR	645055	IdentifierDeclType	size_t		644972	0					
ANR	645056	Identifier	len		644972	1					
ANR	645057	AssignmentExpression	len = formattedLine . length ( )		644972	2		=			
ANR	645058	Identifier	len		644972	0					
ANR	645059	CallExpression	formattedLine . length ( )		644972	1					
ANR	645060	Callee	formattedLine . length		644972	0					
ANR	645061	MemberAccess	formattedLine . length		644972	0					
ANR	645062	Identifier	formattedLine		644972	0					
ANR	645063	Identifier	length		644972	1					
ANR	645064	ArgumentList			644972	1					
ANR	645065	IfStatement	if ( formattedLine [ len - 1 ] == '\\t' )		644972	4					
ANR	645066	Condition	formattedLine [ len - 1 ] == '\\t'	3691:5:104451:104480	644972	0	True				
ANR	645067	EqualityExpression	formattedLine [ len - 1 ] == '\\t'		644972	0		==			
ANR	645068	ArrayIndexing	formattedLine [ len - 1 ]		644972	0					
ANR	645069	Identifier	formattedLine		644972	0					
ANR	645070	AdditiveExpression	len - 1		644972	1		-			
ANR	645071	Identifier	len		644972	0					
ANR	645072	PrimaryExpression	1		644972	1					
ANR	645073	PrimaryExpression	'\\t'		644972	1					
ANR	645074	ReturnStatement	return ;	3692:2:104485:104491	644972	1	True				
ANR	645075	IfStatement	if ( spacePadNum < 0 )		644972	5					
ANR	645076	Condition	spacePadNum < 0	3694:5:104564:104578	644972	0	True				
ANR	645077	RelationalExpression	spacePadNum < 0		644972	0		<			
ANR	645078	Identifier	spacePadNum		644972	0					
ANR	645079	PrimaryExpression	0		644972	1					
ANR	645080	CompoundStatement		22:2:575:600	644972	1					
ANR	645081	IdentifierDeclStatement	int adjust = - spacePadNum ;	3696:2:104586:104611	644972	0	True				
ANR	645082	IdentifierDecl	adjust = - spacePadNum		644972	0					
ANR	645083	IdentifierDeclType	int		644972	0					
ANR	645084	Identifier	adjust		644972	1					
ANR	645085	AssignmentExpression	adjust = - spacePadNum		644972	2		=			
ANR	645086	Identifier	adjust		644972	0					
ANR	645087	UnaryOperationExpression	- spacePadNum		644972	1					
ANR	645088	UnaryOperator	-		644972	0					
ANR	645089	Identifier	spacePadNum		644972	1					
ANR	645090	ExpressionStatement	"formattedLine . append ( adjust , ' ' )"	3697:2:104652:104685	644972	1	True				
ANR	645091	CallExpression	"formattedLine . append ( adjust , ' ' )"		644972	0					
ANR	645092	Callee	formattedLine . append		644972	0					
ANR	645093	MemberAccess	formattedLine . append		644972	0					
ANR	645094	Identifier	formattedLine		644972	0					
ANR	645095	Identifier	append		644972	1					
ANR	645096	ArgumentList	adjust		644972	1					
ANR	645097	Argument	adjust		644972	0					
ANR	645098	Identifier	adjust		644972	0					
ANR	645099	Argument	' '		644972	1					
ANR	645100	PrimaryExpression	' '		644972	0					
ANR	645101	ElseStatement	else		644972	0					
ANR	645102	IfStatement	if ( spacePadNum > 0 )		644972	0					
ANR	645103	Condition	spacePadNum > 0	3701:10:104841:104855	644972	0	True				
ANR	645104	RelationalExpression	spacePadNum > 0		644972	0		>			
ANR	645105	Identifier	spacePadNum		644972	0					
ANR	645106	PrimaryExpression	0		644972	1					
ANR	645107	CompoundStatement		30:2:880:933	644972	1					
ANR	645108	IdentifierDeclStatement	int adjust = spacePadNum ;	3703:2:104863:104887	644972	0	True				
ANR	645109	IdentifierDecl	adjust = spacePadNum		644972	0					
ANR	645110	IdentifierDeclType	int		644972	0					
ANR	645111	Identifier	adjust		644972	1					
ANR	645112	AssignmentExpression	adjust = spacePadNum		644972	2		=			
ANR	645113	Identifier	spacePadNum		644972	0					
ANR	645114	Identifier	spacePadNum		644972	1					
ANR	645115	IdentifierDeclStatement	size_t lastText = formattedLine . find_last_not_of ( ' ' ) ;	3704:2:104891:104944	644972	1	True				
ANR	645116	IdentifierDecl	lastText = formattedLine . find_last_not_of ( ' ' )		644972	0					
ANR	645117	IdentifierDeclType	size_t		644972	0					
ANR	645118	Identifier	lastText		644972	1					
ANR	645119	AssignmentExpression	lastText = formattedLine . find_last_not_of ( ' ' )		644972	2		=			
ANR	645120	Identifier	lastText		644972	0					
ANR	645121	CallExpression	formattedLine . find_last_not_of ( ' ' )		644972	1					
ANR	645122	Callee	formattedLine . find_last_not_of		644972	0					
ANR	645123	MemberAccess	formattedLine . find_last_not_of		644972	0					
ANR	645124	Identifier	formattedLine		644972	0					
ANR	645125	Identifier	find_last_not_of		644972	1					
ANR	645126	ArgumentList	' '		644972	1					
ANR	645127	Argument	' '		644972	0					
ANR	645128	PrimaryExpression	' '		644972	0					
ANR	645129	IfStatement	if ( lastText != string :: npos && lastText < len - adjust - 1 )		644972	2					
ANR	645130	Condition	lastText != string :: npos && lastText < len - adjust - 1	3705:6:104952:105016	644972	0	True				
ANR	645131	AndExpression	lastText != string :: npos && lastText < len - adjust - 1		644972	0		&&			
ANR	645132	EqualityExpression	lastText != string :: npos		644972	0		!=			
ANR	645133	Identifier	lastText		644972	0					
ANR	645134	Identifier	string :: npos		644972	1					
ANR	645135	RelationalExpression	lastText < len - adjust - 1		644972	1		<			
ANR	645136	Identifier	lastText		644972	0					
ANR	645137	AdditiveExpression	len - adjust - 1		644972	1		-			
ANR	645138	Identifier	len		644972	0					
ANR	645139	AdditiveExpression	adjust - 1		644972	1		-			
ANR	645140	Identifier	adjust		644972	0					
ANR	645141	PrimaryExpression	1		644972	1					
ANR	645142	ExpressionStatement	formattedLine . resize ( len - adjust )	3707:3:105022:105056	644972	1	True				
ANR	645143	CallExpression	formattedLine . resize ( len - adjust )		644972	0					
ANR	645144	Callee	formattedLine . resize		644972	0					
ANR	645145	MemberAccess	formattedLine . resize		644972	0					
ANR	645146	Identifier	formattedLine		644972	0					
ANR	645147	Identifier	resize		644972	1					
ANR	645148	ArgumentList	len - adjust		644972	1					
ANR	645149	Argument	len - adjust		644972	0					
ANR	645150	AdditiveExpression	len - adjust		644972	0		-			
ANR	645151	Identifier	len		644972	0					
ANR	645152	Identifier	adjust		644972	1					
ANR	645153	ElseStatement	else		644972	0					
ANR	645154	IfStatement	if ( len > lastText + 2 )		644972	0					
ANR	645155	Condition	len > lastText + 2	3708:11:105069:105086	644972	0	True				
ANR	645156	RelationalExpression	len > lastText + 2		644972	0		>			
ANR	645157	Identifier	len		644972	0					
ANR	645158	AdditiveExpression	lastText + 2		644972	1		+			
ANR	645159	Identifier	lastText		644972	0					
ANR	645160	PrimaryExpression	2		644972	1					
ANR	645161	ExpressionStatement	formattedLine . resize ( lastText + 2 )	3709:3:105092:105126	644972	1	True				
ANR	645162	CallExpression	formattedLine . resize ( lastText + 2 )		644972	0					
ANR	645163	Callee	formattedLine . resize		644972	0					
ANR	645164	MemberAccess	formattedLine . resize		644972	0					
ANR	645165	Identifier	formattedLine		644972	0					
ANR	645166	Identifier	resize		644972	1					
ANR	645167	ArgumentList	lastText + 2		644972	1					
ANR	645168	Argument	lastText + 2		644972	0					
ANR	645169	AdditiveExpression	lastText + 2		644972	0		+			
ANR	645170	Identifier	lastText		644972	0					
ANR	645171	PrimaryExpression	2		644972	1					
ANR	645172	ElseStatement	else		644972	0					
ANR	645173	IfStatement	if ( len < lastText + 2 )		644972	0					
ANR	645174	Condition	len < lastText + 2	3710:11:105139:105156	644972	0	True				
ANR	645175	RelationalExpression	len < lastText + 2		644972	0		<			
ANR	645176	Identifier	len		644972	0					
ANR	645177	AdditiveExpression	lastText + 2		644972	1		+			
ANR	645178	Identifier	lastText		644972	0					
ANR	645179	PrimaryExpression	2		644972	1					
ANR	645180	ExpressionStatement	"formattedLine . append ( len - lastText , ' ' )"	3711:3:105162:105203	644972	1	True				
ANR	645181	CallExpression	"formattedLine . append ( len - lastText , ' ' )"		644972	0					
ANR	645182	Callee	formattedLine . append		644972	0					
ANR	645183	MemberAccess	formattedLine . append		644972	0					
ANR	645184	Identifier	formattedLine		644972	0					
ANR	645185	Identifier	append		644972	1					
ANR	645186	ArgumentList	len - lastText		644972	1					
ANR	645187	Argument	len - lastText		644972	0					
ANR	645188	AdditiveExpression	len - lastText		644972	0		-			
ANR	645189	Identifier	len		644972	0					
ANR	645190	Identifier	lastText		644972	1					
ANR	645191	Argument	' '		644972	1					
ANR	645192	PrimaryExpression	' '		644972	0					
ANR	645193	ReturnType	void		644972	1					
ANR	645194	Identifier	ASFormatter :: adjustComments		644972	2					
ANR	645195	ParameterList			644972	3					
ANR	645196	CFGEntryNode	ENTRY		644972		True				
ANR	645197	CFGExitNode	EXIT		644972		True				
ANR	645198	Symbol	lastText		644972						
ANR	645199	Symbol	currentLine . find		644972						
ANR	645200	Symbol	* formattedLine		644972						
ANR	645201	Symbol	spacePadNum		644972						
ANR	645202	Symbol	string :: npos		644972						
ANR	645203	Symbol	currentLine . find_first_not_of		644972						
ANR	645204	Symbol	formattedLine		644972						
ANR	645205	Symbol	formattedLine . find_last_not_of		644972						
ANR	645206	Symbol	len		644972						
ANR	645207	Symbol	isSequenceReached		644972						
ANR	645208	Symbol	formattedLine . length		644972						
ANR	645209	Symbol	adjust		644972						
ANR	645210	Symbol	charNum		644972						
ANR	645211	Symbol	endNum		644972						
ANR	645212	Symbol	currentLine		644972						
ANR	645213	Symbol	* len		644972						
ANR	645214	Function	ASFormatter :: appendCharInsideComments	3720:0:105419:106506							
ANR	645215	FunctionDef	ASFormatter :: appendCharInsideComments ()		645214	0					
ANR	645216	CompoundStatement		3721:0:105464:106506	645214	0					
ANR	645217	IfStatement	if ( formattedLineCommentNum == string :: npos || formattedLineCommentNum == 0 )		645214	0					
ANR	645218	Condition	formattedLineCommentNum == string :: npos || formattedLineCommentNum == 0	3722:5:105471:105602	645214	0	True				
ANR	645219	OrExpression	formattedLineCommentNum == string :: npos || formattedLineCommentNum == 0		645214	0		||			
ANR	645220	EqualityExpression	formattedLineCommentNum == string :: npos		645214	0		==			
ANR	645221	Identifier	formattedLineCommentNum		645214	0					
ANR	645222	Identifier	string :: npos		645214	1					
ANR	645223	EqualityExpression	formattedLineCommentNum == 0		645214	1		==			
ANR	645224	Identifier	formattedLineCommentNum		645214	0					
ANR	645225	PrimaryExpression	0		645214	1					
ANR	645226	CompoundStatement		4:1:141:141	645214	1					
ANR	645227	ExpressionStatement	appendCurrentChar ( )	3725:2:105610:105629	645214	0	True				
ANR	645228	CallExpression	appendCurrentChar ( )		645214	0					
ANR	645229	Callee	appendCurrentChar		645214	0					
ANR	645230	Identifier	appendCurrentChar		645214	0					
ANR	645231	ArgumentList			645214	1					
ANR	645232	ReturnStatement	return ;	3726:2:105672:105678	645214	1	True				
ANR	645233	ExpressionStatement	"assert ( formattedLine . compare ( formattedLineCommentNum , 2 , ""//"" ) == 0 || formattedLine . compare ( formattedLineCommentNum , 2 , ""/*"" ) == 0 )"	3728:1:105684:105824	645214	1	True				
ANR	645234	CallExpression	"assert ( formattedLine . compare ( formattedLineCommentNum , 2 , ""//"" ) == 0 || formattedLine . compare ( formattedLineCommentNum , 2 , ""/*"" ) == 0 )"		645214	0					
ANR	645235	Callee	assert		645214	0					
ANR	645236	Identifier	assert		645214	0					
ANR	645237	ArgumentList	"formattedLine . compare ( formattedLineCommentNum , 2 , ""//"" ) == 0 || formattedLine . compare ( formattedLineCommentNum , 2 , ""/*"" ) == 0"		645214	1					
ANR	645238	Argument	"formattedLine . compare ( formattedLineCommentNum , 2 , ""//"" ) == 0 || formattedLine . compare ( formattedLineCommentNum , 2 , ""/*"" ) == 0"		645214	0					
ANR	645239	OrExpression	"formattedLine . compare ( formattedLineCommentNum , 2 , ""//"" ) == 0 || formattedLine . compare ( formattedLineCommentNum , 2 , ""/*"" ) == 0"		645214	0		||			
ANR	645240	EqualityExpression	"formattedLine . compare ( formattedLineCommentNum , 2 , ""//"" ) == 0"		645214	0		==			
ANR	645241	CallExpression	"formattedLine . compare ( formattedLineCommentNum , 2 , ""//"" )"		645214	0					
ANR	645242	Callee	formattedLine . compare		645214	0					
ANR	645243	MemberAccess	formattedLine . compare		645214	0					
ANR	645244	Identifier	formattedLine		645214	0					
ANR	645245	Identifier	compare		645214	1					
ANR	645246	ArgumentList	formattedLineCommentNum		645214	1					
ANR	645247	Argument	formattedLineCommentNum		645214	0					
ANR	645248	Identifier	formattedLineCommentNum		645214	0					
ANR	645249	Argument	2		645214	1					
ANR	645250	PrimaryExpression	2		645214	0					
ANR	645251	Argument	"""//"""		645214	2					
ANR	645252	PrimaryExpression	"""//"""		645214	0					
ANR	645253	PrimaryExpression	0		645214	1					
ANR	645254	EqualityExpression	"formattedLine . compare ( formattedLineCommentNum , 2 , ""/*"" ) == 0"		645214	1		==			
ANR	645255	CallExpression	"formattedLine . compare ( formattedLineCommentNum , 2 , ""/*"" )"		645214	0					
ANR	645256	Callee	formattedLine . compare		645214	0					
ANR	645257	MemberAccess	formattedLine . compare		645214	0					
ANR	645258	Identifier	formattedLine		645214	0					
ANR	645259	Identifier	compare		645214	1					
ANR	645260	ArgumentList	formattedLineCommentNum		645214	1					
ANR	645261	Argument	formattedLineCommentNum		645214	0					
ANR	645262	Identifier	formattedLineCommentNum		645214	0					
ANR	645263	Argument	2		645214	1					
ANR	645264	PrimaryExpression	2		645214	0					
ANR	645265	Argument	"""/*"""		645214	2					
ANR	645266	PrimaryExpression	"""/*"""		645214	0					
ANR	645267	PrimaryExpression	0		645214	1					
ANR	645268	IdentifierDeclStatement	size_t end = formattedLineCommentNum ;	3732:1:105865:105901	645214	2	True				
ANR	645269	IdentifierDecl	end = formattedLineCommentNum		645214	0					
ANR	645270	IdentifierDeclType	size_t		645214	0					
ANR	645271	Identifier	end		645214	1					
ANR	645272	AssignmentExpression	end = formattedLineCommentNum		645214	2		=			
ANR	645273	Identifier	formattedLineCommentNum		645214	0					
ANR	645274	Identifier	formattedLineCommentNum		645214	1					
ANR	645275	IdentifierDeclStatement	"size_t beg = formattedLine . find_last_not_of ( "" \\t"" , end - 1 ) ;"	3733:1:105904:105963	645214	3	True				
ANR	645276	IdentifierDecl	"beg = formattedLine . find_last_not_of ( "" \\t"" , end - 1 )"		645214	0					
ANR	645277	IdentifierDeclType	size_t		645214	0					
ANR	645278	Identifier	beg		645214	1					
ANR	645279	AssignmentExpression	"beg = formattedLine . find_last_not_of ( "" \\t"" , end - 1 )"		645214	2		=			
ANR	645280	Identifier	beg		645214	0					
ANR	645281	CallExpression	"formattedLine . find_last_not_of ( "" \\t"" , end - 1 )"		645214	1					
ANR	645282	Callee	formattedLine . find_last_not_of		645214	0					
ANR	645283	MemberAccess	formattedLine . find_last_not_of		645214	0					
ANR	645284	Identifier	formattedLine		645214	0					
ANR	645285	Identifier	find_last_not_of		645214	1					
ANR	645286	ArgumentList	""" \\t"""		645214	1					
ANR	645287	Argument	""" \\t"""		645214	0					
ANR	645288	PrimaryExpression	""" \\t"""		645214	0					
ANR	645289	Argument	end - 1		645214	1					
ANR	645290	AdditiveExpression	end - 1		645214	0		-			
ANR	645291	Identifier	end		645214	0					
ANR	645292	PrimaryExpression	1		645214	1					
ANR	645293	IfStatement	if ( beg == string :: npos )		645214	4					
ANR	645294	Condition	beg == string :: npos	3734:5:105970:105988	645214	0	True				
ANR	645295	EqualityExpression	beg == string :: npos		645214	0		==			
ANR	645296	Identifier	beg		645214	0					
ANR	645297	Identifier	string :: npos		645214	1					
ANR	645298	CompoundStatement		15:1:527:527	645214	1					
ANR	645299	ExpressionStatement	appendCurrentChar ( )	3736:2:105996:106015	645214	0	True				
ANR	645300	CallExpression	appendCurrentChar ( )		645214	0					
ANR	645301	Callee	appendCurrentChar		645214	0					
ANR	645302	Identifier	appendCurrentChar		645214	0					
ANR	645303	ArgumentList			645214	1					
ANR	645304	ReturnStatement	return ;	3737:2:106050:106056	645214	1	True				
ANR	645305	ExpressionStatement	beg ++	3739:1:106062:106067	645214	5	True				
ANR	645306	PostIncDecOperationExpression	beg ++		645214	0					
ANR	645307	Identifier	beg		645214	0					
ANR	645308	IncDec	++		645214	1					
ANR	645309	IfStatement	if ( end - beg < 3 )		645214	6					
ANR	645310	Condition	end - beg < 3	3742:5:106096:106108	645214	0	True				
ANR	645311	RelationalExpression	end - beg < 3		645214	0		<			
ANR	645312	AdditiveExpression	end - beg		645214	0		-			
ANR	645313	Identifier	end		645214	0					
ANR	645314	Identifier	beg		645214	1					
ANR	645315	PrimaryExpression	3		645214	1					
ANR	645316	ExpressionStatement	"formattedLine . insert ( beg , 3 - end + beg , ' ' )"	3743:2:106162:106207	645214	1	True				
ANR	645317	CallExpression	"formattedLine . insert ( beg , 3 - end + beg , ' ' )"		645214	0					
ANR	645318	Callee	formattedLine . insert		645214	0					
ANR	645319	MemberAccess	formattedLine . insert		645214	0					
ANR	645320	Identifier	formattedLine		645214	0					
ANR	645321	Identifier	insert		645214	1					
ANR	645322	ArgumentList	beg		645214	1					
ANR	645323	Argument	beg		645214	0					
ANR	645324	Identifier	beg		645214	0					
ANR	645325	Argument	3 - end + beg		645214	1					
ANR	645326	AdditiveExpression	3 - end + beg		645214	0		-			
ANR	645327	PrimaryExpression	3		645214	0					
ANR	645328	AdditiveExpression	end + beg		645214	1		+			
ANR	645329	Identifier	end		645214	0					
ANR	645330	Identifier	beg		645214	1					
ANR	645331	Argument	' '		645214	2					
ANR	645332	PrimaryExpression	' '		645214	0					
ANR	645333	IfStatement	if ( formattedLine [ beg ] == '\\t' )		645214	7					
ANR	645334	Condition	formattedLine [ beg ] == '\\t'	3744:5:106214:106239	645214	0	True				
ANR	645335	EqualityExpression	formattedLine [ beg ] == '\\t'		645214	0		==			
ANR	645336	ArrayIndexing	formattedLine [ beg ]		645214	0					
ANR	645337	Identifier	formattedLine		645214	0					
ANR	645338	Identifier	beg		645214	1					
ANR	645339	PrimaryExpression	'\\t'		645214	1					
ANR	645340	ExpressionStatement	"formattedLine . insert ( beg , 1 , ' ' )"	3745:2:106276:106309	645214	1	True				
ANR	645341	CallExpression	"formattedLine . insert ( beg , 1 , ' ' )"		645214	0					
ANR	645342	Callee	formattedLine . insert		645214	0					
ANR	645343	MemberAccess	formattedLine . insert		645214	0					
ANR	645344	Identifier	formattedLine		645214	0					
ANR	645345	Identifier	insert		645214	1					
ANR	645346	ArgumentList	beg		645214	1					
ANR	645347	Argument	beg		645214	0					
ANR	645348	Identifier	beg		645214	0					
ANR	645349	Argument	1		645214	1					
ANR	645350	PrimaryExpression	1		645214	0					
ANR	645351	Argument	' '		645214	2					
ANR	645352	PrimaryExpression	' '		645214	0					
ANR	645353	ExpressionStatement	formattedLine [ beg + 1 ] = currentChar	3746:1:106312:106348	645214	8	True				
ANR	645354	AssignmentExpression	formattedLine [ beg + 1 ] = currentChar		645214	0		=			
ANR	645355	ArrayIndexing	formattedLine [ beg + 1 ]		645214	0					
ANR	645356	Identifier	formattedLine		645214	0					
ANR	645357	AdditiveExpression	beg + 1		645214	1		+			
ANR	645358	Identifier	beg		645214	0					
ANR	645359	PrimaryExpression	1		645214	1					
ANR	645360	Identifier	currentChar		645214	1					
ANR	645361	ExpressionStatement	testForTimeToSplitFormattedLine ( )	3747:1:106351:106384	645214	9	True				
ANR	645362	CallExpression	testForTimeToSplitFormattedLine ( )		645214	0					
ANR	645363	Callee	testForTimeToSplitFormattedLine		645214	0					
ANR	645364	Identifier	testForTimeToSplitFormattedLine		645214	0					
ANR	645365	ArgumentList			645214	1					
ANR	645366	IfStatement	if ( isBeforeComment ( ) )		645214	10					
ANR	645367	Condition	isBeforeComment ( )	3749:5:106392:106408	645214	0	True				
ANR	645368	CallExpression	isBeforeComment ( )		645214	0					
ANR	645369	Callee	isBeforeComment		645214	0					
ANR	645370	Identifier	isBeforeComment		645214	0					
ANR	645371	ArgumentList			645214	1					
ANR	645372	ExpressionStatement	breakLine ( )	3750:2:106413:106424	645214	1	True				
ANR	645373	CallExpression	breakLine ( )		645214	0					
ANR	645374	Callee	breakLine		645214	0					
ANR	645375	Identifier	breakLine		645214	0					
ANR	645376	ArgumentList			645214	1					
ANR	645377	ElseStatement	else		645214	0					
ANR	645378	IfStatement	if ( isCharImmediatelyPostLineComment )		645214	0					
ANR	645379	Condition	isCharImmediatelyPostLineComment	3751:10:106436:106467	645214	0	True				
ANR	645380	Identifier	isCharImmediatelyPostLineComment		645214	0					
ANR	645381	ExpressionStatement	shouldBreakLineAtNextChar = true	3752:2:106472:106504	645214	1	True				
ANR	645382	AssignmentExpression	shouldBreakLineAtNextChar = true		645214	0		=			
ANR	645383	Identifier	shouldBreakLineAtNextChar		645214	0					
ANR	645384	Identifier	true		645214	1					
ANR	645385	ReturnType	void		645214	1					
ANR	645386	Identifier	ASFormatter :: appendCharInsideComments		645214	2					
ANR	645387	ParameterList			645214	3					
ANR	645388	CFGEntryNode	ENTRY		645214		True				
ANR	645389	CFGExitNode	EXIT		645214		True				
ANR	645390	Symbol	formattedLineCommentNum		645214						
ANR	645391	Symbol	currentChar		645214						
ANR	645392	Symbol	shouldBreakLineAtNextChar		645214						
ANR	645393	Symbol	* formattedLine		645214						
ANR	645394	Symbol	beg		645214						
ANR	645395	Symbol	string :: npos		645214						
ANR	645396	Symbol	formattedLine		645214						
ANR	645397	Symbol	* beg		645214						
ANR	645398	Symbol	formattedLine . find_last_not_of		645214						
ANR	645399	Symbol	isBeforeComment		645214						
ANR	645400	Symbol	formattedLine . compare		645214						
ANR	645401	Symbol	isCharImmediatelyPostLineComment		645214						
ANR	645402	Symbol	true		645214						
ANR	645403	Symbol	end		645214						
ANR	645404	Function	ASFormatter :: padOperators	3762:0:106772:110766							
ANR	645405	FunctionDef	ASFormatter :: padOperators (const string * newOperator)		645404	0					
ANR	645406	CompoundStatement		3763:0:106830:110766	645404	0					
ANR	645407	ExpressionStatement	assert ( shouldPadOperators )	3764:1:106833:106859	645404	0	True				
ANR	645408	CallExpression	assert ( shouldPadOperators )		645404	0					
ANR	645409	Callee	assert		645404	0					
ANR	645410	Identifier	assert		645404	0					
ANR	645411	ArgumentList	shouldPadOperators		645404	1					
ANR	645412	Argument	shouldPadOperators		645404	0					
ANR	645413	Identifier	shouldPadOperators		645404	0					
ANR	645414	ExpressionStatement	assert ( newOperator != nullptr )	3765:1:106862:106892	645404	1	True				
ANR	645415	CallExpression	assert ( newOperator != nullptr )		645404	0					
ANR	645416	Callee	assert		645404	0					
ANR	645417	Identifier	assert		645404	0					
ANR	645418	ArgumentList	newOperator != nullptr		645404	1					
ANR	645419	Argument	newOperator != nullptr		645404	0					
ANR	645420	EqualityExpression	newOperator != nullptr		645404	0		!=			
ANR	645421	Identifier	newOperator		645404	0					
ANR	645422	Identifier	nullptr		645404	1					
ANR	645423	IdentifierDeclStatement	"char nextNonWSChar = ASBase :: peekNextChar ( currentLine , charNum ) ;"	3767:1:106896:106959	645404	2	True				
ANR	645424	IdentifierDecl	"nextNonWSChar = ASBase :: peekNextChar ( currentLine , charNum )"		645404	0					
ANR	645425	IdentifierDeclType	char		645404	0					
ANR	645426	Identifier	nextNonWSChar		645404	1					
ANR	645427	AssignmentExpression	"nextNonWSChar = ASBase :: peekNextChar ( currentLine , charNum )"		645404	2		=			
ANR	645428	Identifier	nextNonWSChar		645404	0					
ANR	645429	CallExpression	"ASBase :: peekNextChar ( currentLine , charNum )"		645404	1					
ANR	645430	Callee	ASBase :: peekNextChar		645404	0					
ANR	645431	Identifier	ASBase :: peekNextChar		645404	0					
ANR	645432	ArgumentList	currentLine		645404	1					
ANR	645433	Argument	currentLine		645404	0					
ANR	645434	Identifier	currentLine		645404	0					
ANR	645435	Argument	charNum		645404	1					
ANR	645436	Identifier	charNum		645404	0					
ANR	645437	IdentifierDeclStatement	"bool shouldPad = ( newOperator != & AS_SCOPE_RESOLUTION && newOperator != & AS_PLUS_PLUS && newOperator != & AS_MINUS_MINUS && newOperator != & AS_NOT && newOperator != & AS_BIT_NOT && newOperator != & AS_ARROW && ! ( newOperator == & AS_COLON && ! foundQuestionMark && ( isInObjCMethodDefinition || isInObjCInterface || isInObjCSelector || squareBracketCount != 0 ) ) && ! ( newOperator == & AS_MINUS && isInExponent ( ) ) && ! ( newOperator == & AS_PLUS && isInExponent ( ) ) && ! ( ( newOperator == & AS_PLUS || newOperator == & AS_MINUS ) && ( previousNonWSChar == '(' || previousNonWSChar == '[' || previousNonWSChar == '=' || previousNonWSChar == ',' || previousNonWSChar == ':' || previousNonWSChar == '{' ) ) && ! ( newOperator == & AS_MULT && ( previousNonWSChar == '.' || previousNonWSChar == '>' ) ) && ! ( newOperator == & AS_MULT && peekNextChar ( ) == '>' ) && ! ( ( isInTemplate || isImmediatelyPostTemplate ) && ( newOperator == & AS_LS || newOperator == & AS_GR ) ) && ! ( newOperator == & AS_GCC_MIN_ASSIGN && ASBase :: peekNextChar ( currentLine , charNum + 1 ) == '>' ) && ! ( newOperator == & AS_GR && previousNonWSChar == '?' ) && ! ( newOperator == & AS_QUESTION && isJavaStyle ( ) && ( previousNonWSChar == '<' || nextNonWSChar == '>' || nextNonWSChar == '.' ) ) && ! ( newOperator == & AS_QUESTION && isSharpStyle ( ) && ( nextNonWSChar == '.' || nextNonWSChar == '[' ) ) && ! isCharImmediatelyPostOperator && ! isInCase && ! isInAsm && ! isInAsmOneLine && ! isInAsmBlock ) ;"	3768:1:106962:109678	645404	3	True				
ANR	645438	IdentifierDecl	"shouldPad = ( newOperator != & AS_SCOPE_RESOLUTION && newOperator != & AS_PLUS_PLUS && newOperator != & AS_MINUS_MINUS && newOperator != & AS_NOT && newOperator != & AS_BIT_NOT && newOperator != & AS_ARROW && ! ( newOperator == & AS_COLON && ! foundQuestionMark && ( isInObjCMethodDefinition || isInObjCInterface || isInObjCSelector || squareBracketCount != 0 ) ) && ! ( newOperator == & AS_MINUS && isInExponent ( ) ) && ! ( newOperator == & AS_PLUS && isInExponent ( ) ) && ! ( ( newOperator == & AS_PLUS || newOperator == & AS_MINUS ) && ( previousNonWSChar == '(' || previousNonWSChar == '[' || previousNonWSChar == '=' || previousNonWSChar == ',' || previousNonWSChar == ':' || previousNonWSChar == '{' ) ) && ! ( newOperator == & AS_MULT && ( previousNonWSChar == '.' || previousNonWSChar == '>' ) ) && ! ( newOperator == & AS_MULT && peekNextChar ( ) == '>' ) && ! ( ( isInTemplate || isImmediatelyPostTemplate ) && ( newOperator == & AS_LS || newOperator == & AS_GR ) ) && ! ( newOperator == & AS_GCC_MIN_ASSIGN && ASBase :: peekNextChar ( currentLine , charNum + 1 ) == '>' ) && ! ( newOperator == & AS_GR && previousNonWSChar == '?' ) && ! ( newOperator == & AS_QUESTION && isJavaStyle ( ) && ( previousNonWSChar == '<' || nextNonWSChar == '>' || nextNonWSChar == '.' ) ) && ! ( newOperator == & AS_QUESTION && isSharpStyle ( ) && ( nextNonWSChar == '.' || nextNonWSChar == '[' ) ) && ! isCharImmediatelyPostOperator && ! isInCase && ! isInAsm && ! isInAsmOneLine && ! isInAsmBlock )"		645404	0					
ANR	645439	IdentifierDeclType	bool		645404	0					
ANR	645440	Identifier	shouldPad		645404	1					
ANR	645441	AssignmentExpression	"shouldPad = ( newOperator != & AS_SCOPE_RESOLUTION && newOperator != & AS_PLUS_PLUS && newOperator != & AS_MINUS_MINUS && newOperator != & AS_NOT && newOperator != & AS_BIT_NOT && newOperator != & AS_ARROW && ! ( newOperator == & AS_COLON && ! foundQuestionMark && ( isInObjCMethodDefinition || isInObjCInterface || isInObjCSelector || squareBracketCount != 0 ) ) && ! ( newOperator == & AS_MINUS && isInExponent ( ) ) && ! ( newOperator == & AS_PLUS && isInExponent ( ) ) && ! ( ( newOperator == & AS_PLUS || newOperator == & AS_MINUS ) && ( previousNonWSChar == '(' || previousNonWSChar == '[' || previousNonWSChar == '=' || previousNonWSChar == ',' || previousNonWSChar == ':' || previousNonWSChar == '{' ) ) && ! ( newOperator == & AS_MULT && ( previousNonWSChar == '.' || previousNonWSChar == '>' ) ) && ! ( newOperator == & AS_MULT && peekNextChar ( ) == '>' ) && ! ( ( isInTemplate || isImmediatelyPostTemplate ) && ( newOperator == & AS_LS || newOperator == & AS_GR ) ) && ! ( newOperator == & AS_GCC_MIN_ASSIGN && ASBase :: peekNextChar ( currentLine , charNum + 1 ) == '>' ) && ! ( newOperator == & AS_GR && previousNonWSChar == '?' ) && ! ( newOperator == & AS_QUESTION && isJavaStyle ( ) && ( previousNonWSChar == '<' || nextNonWSChar == '>' || nextNonWSChar == '.' ) ) && ! ( newOperator == & AS_QUESTION && isSharpStyle ( ) && ( nextNonWSChar == '.' || nextNonWSChar == '[' ) ) && ! isCharImmediatelyPostOperator && ! isInCase && ! isInAsm && ! isInAsmOneLine && ! isInAsmBlock )"		645404	2		=			
ANR	645442	Identifier	shouldPad		645404	0					
ANR	645443	AndExpression	"newOperator != & AS_SCOPE_RESOLUTION && newOperator != & AS_PLUS_PLUS && newOperator != & AS_MINUS_MINUS && newOperator != & AS_NOT && newOperator != & AS_BIT_NOT && newOperator != & AS_ARROW && ! ( newOperator == & AS_COLON && ! foundQuestionMark && ( isInObjCMethodDefinition || isInObjCInterface || isInObjCSelector || squareBracketCount != 0 ) ) && ! ( newOperator == & AS_MINUS && isInExponent ( ) ) && ! ( newOperator == & AS_PLUS && isInExponent ( ) ) && ! ( ( newOperator == & AS_PLUS || newOperator == & AS_MINUS ) && ( previousNonWSChar == '(' || previousNonWSChar == '[' || previousNonWSChar == '=' || previousNonWSChar == ',' || previousNonWSChar == ':' || previousNonWSChar == '{' ) ) && ! ( newOperator == & AS_MULT && ( previousNonWSChar == '.' || previousNonWSChar == '>' ) ) && ! ( newOperator == & AS_MULT && peekNextChar ( ) == '>' ) && ! ( ( isInTemplate || isImmediatelyPostTemplate ) && ( newOperator == & AS_LS || newOperator == & AS_GR ) ) && ! ( newOperator == & AS_GCC_MIN_ASSIGN && ASBase :: peekNextChar ( currentLine , charNum + 1 ) == '>' ) && ! ( newOperator == & AS_GR && previousNonWSChar == '?' ) && ! ( newOperator == & AS_QUESTION && isJavaStyle ( ) && ( previousNonWSChar == '<' || nextNonWSChar == '>' || nextNonWSChar == '.' ) ) && ! ( newOperator == & AS_QUESTION && isSharpStyle ( ) && ( nextNonWSChar == '.' || nextNonWSChar == '[' ) ) && ! isCharImmediatelyPostOperator && ! isInCase && ! isInAsm && ! isInAsmOneLine && ! isInAsmBlock"		645404	1		&&			
ANR	645444	EqualityExpression	newOperator != & AS_SCOPE_RESOLUTION		645404	0		!=			
ANR	645445	Identifier	newOperator		645404	0					
ANR	645446	UnaryOperationExpression	& AS_SCOPE_RESOLUTION		645404	1					
ANR	645447	UnaryOperator	&		645404	0					
ANR	645448	Identifier	AS_SCOPE_RESOLUTION		645404	1					
ANR	645449	AndExpression	"newOperator != & AS_PLUS_PLUS && newOperator != & AS_MINUS_MINUS && newOperator != & AS_NOT && newOperator != & AS_BIT_NOT && newOperator != & AS_ARROW && ! ( newOperator == & AS_COLON && ! foundQuestionMark && ( isInObjCMethodDefinition || isInObjCInterface || isInObjCSelector || squareBracketCount != 0 ) ) && ! ( newOperator == & AS_MINUS && isInExponent ( ) ) && ! ( newOperator == & AS_PLUS && isInExponent ( ) ) && ! ( ( newOperator == & AS_PLUS || newOperator == & AS_MINUS ) && ( previousNonWSChar == '(' || previousNonWSChar == '[' || previousNonWSChar == '=' || previousNonWSChar == ',' || previousNonWSChar == ':' || previousNonWSChar == '{' ) ) && ! ( newOperator == & AS_MULT && ( previousNonWSChar == '.' || previousNonWSChar == '>' ) ) && ! ( newOperator == & AS_MULT && peekNextChar ( ) == '>' ) && ! ( ( isInTemplate || isImmediatelyPostTemplate ) && ( newOperator == & AS_LS || newOperator == & AS_GR ) ) && ! ( newOperator == & AS_GCC_MIN_ASSIGN && ASBase :: peekNextChar ( currentLine , charNum + 1 ) == '>' ) && ! ( newOperator == & AS_GR && previousNonWSChar == '?' ) && ! ( newOperator == & AS_QUESTION && isJavaStyle ( ) && ( previousNonWSChar == '<' || nextNonWSChar == '>' || nextNonWSChar == '.' ) ) && ! ( newOperator == & AS_QUESTION && isSharpStyle ( ) && ( nextNonWSChar == '.' || nextNonWSChar == '[' ) ) && ! isCharImmediatelyPostOperator && ! isInCase && ! isInAsm && ! isInAsmOneLine && ! isInAsmBlock"		645404	1		&&			
ANR	645450	EqualityExpression	newOperator != & AS_PLUS_PLUS		645404	0		!=			
ANR	645451	Identifier	newOperator		645404	0					
ANR	645452	UnaryOperationExpression	& AS_PLUS_PLUS		645404	1					
ANR	645453	UnaryOperator	&		645404	0					
ANR	645454	Identifier	AS_PLUS_PLUS		645404	1					
ANR	645455	AndExpression	"newOperator != & AS_MINUS_MINUS && newOperator != & AS_NOT && newOperator != & AS_BIT_NOT && newOperator != & AS_ARROW && ! ( newOperator == & AS_COLON && ! foundQuestionMark && ( isInObjCMethodDefinition || isInObjCInterface || isInObjCSelector || squareBracketCount != 0 ) ) && ! ( newOperator == & AS_MINUS && isInExponent ( ) ) && ! ( newOperator == & AS_PLUS && isInExponent ( ) ) && ! ( ( newOperator == & AS_PLUS || newOperator == & AS_MINUS ) && ( previousNonWSChar == '(' || previousNonWSChar == '[' || previousNonWSChar == '=' || previousNonWSChar == ',' || previousNonWSChar == ':' || previousNonWSChar == '{' ) ) && ! ( newOperator == & AS_MULT && ( previousNonWSChar == '.' || previousNonWSChar == '>' ) ) && ! ( newOperator == & AS_MULT && peekNextChar ( ) == '>' ) && ! ( ( isInTemplate || isImmediatelyPostTemplate ) && ( newOperator == & AS_LS || newOperator == & AS_GR ) ) && ! ( newOperator == & AS_GCC_MIN_ASSIGN && ASBase :: peekNextChar ( currentLine , charNum + 1 ) == '>' ) && ! ( newOperator == & AS_GR && previousNonWSChar == '?' ) && ! ( newOperator == & AS_QUESTION && isJavaStyle ( ) && ( previousNonWSChar == '<' || nextNonWSChar == '>' || nextNonWSChar == '.' ) ) && ! ( newOperator == & AS_QUESTION && isSharpStyle ( ) && ( nextNonWSChar == '.' || nextNonWSChar == '[' ) ) && ! isCharImmediatelyPostOperator && ! isInCase && ! isInAsm && ! isInAsmOneLine && ! isInAsmBlock"		645404	1		&&			
ANR	645456	EqualityExpression	newOperator != & AS_MINUS_MINUS		645404	0		!=			
ANR	645457	Identifier	newOperator		645404	0					
ANR	645458	UnaryOperationExpression	& AS_MINUS_MINUS		645404	1					
ANR	645459	UnaryOperator	&		645404	0					
ANR	645460	Identifier	AS_MINUS_MINUS		645404	1					
ANR	645461	AndExpression	"newOperator != & AS_NOT && newOperator != & AS_BIT_NOT && newOperator != & AS_ARROW && ! ( newOperator == & AS_COLON && ! foundQuestionMark && ( isInObjCMethodDefinition || isInObjCInterface || isInObjCSelector || squareBracketCount != 0 ) ) && ! ( newOperator == & AS_MINUS && isInExponent ( ) ) && ! ( newOperator == & AS_PLUS && isInExponent ( ) ) && ! ( ( newOperator == & AS_PLUS || newOperator == & AS_MINUS ) && ( previousNonWSChar == '(' || previousNonWSChar == '[' || previousNonWSChar == '=' || previousNonWSChar == ',' || previousNonWSChar == ':' || previousNonWSChar == '{' ) ) && ! ( newOperator == & AS_MULT && ( previousNonWSChar == '.' || previousNonWSChar == '>' ) ) && ! ( newOperator == & AS_MULT && peekNextChar ( ) == '>' ) && ! ( ( isInTemplate || isImmediatelyPostTemplate ) && ( newOperator == & AS_LS || newOperator == & AS_GR ) ) && ! ( newOperator == & AS_GCC_MIN_ASSIGN && ASBase :: peekNextChar ( currentLine , charNum + 1 ) == '>' ) && ! ( newOperator == & AS_GR && previousNonWSChar == '?' ) && ! ( newOperator == & AS_QUESTION && isJavaStyle ( ) && ( previousNonWSChar == '<' || nextNonWSChar == '>' || nextNonWSChar == '.' ) ) && ! ( newOperator == & AS_QUESTION && isSharpStyle ( ) && ( nextNonWSChar == '.' || nextNonWSChar == '[' ) ) && ! isCharImmediatelyPostOperator && ! isInCase && ! isInAsm && ! isInAsmOneLine && ! isInAsmBlock"		645404	1		&&			
ANR	645462	EqualityExpression	newOperator != & AS_NOT		645404	0		!=			
ANR	645463	Identifier	newOperator		645404	0					
ANR	645464	UnaryOperationExpression	& AS_NOT		645404	1					
ANR	645465	UnaryOperator	&		645404	0					
ANR	645466	Identifier	AS_NOT		645404	1					
ANR	645467	AndExpression	"newOperator != & AS_BIT_NOT && newOperator != & AS_ARROW && ! ( newOperator == & AS_COLON && ! foundQuestionMark && ( isInObjCMethodDefinition || isInObjCInterface || isInObjCSelector || squareBracketCount != 0 ) ) && ! ( newOperator == & AS_MINUS && isInExponent ( ) ) && ! ( newOperator == & AS_PLUS && isInExponent ( ) ) && ! ( ( newOperator == & AS_PLUS || newOperator == & AS_MINUS ) && ( previousNonWSChar == '(' || previousNonWSChar == '[' || previousNonWSChar == '=' || previousNonWSChar == ',' || previousNonWSChar == ':' || previousNonWSChar == '{' ) ) && ! ( newOperator == & AS_MULT && ( previousNonWSChar == '.' || previousNonWSChar == '>' ) ) && ! ( newOperator == & AS_MULT && peekNextChar ( ) == '>' ) && ! ( ( isInTemplate || isImmediatelyPostTemplate ) && ( newOperator == & AS_LS || newOperator == & AS_GR ) ) && ! ( newOperator == & AS_GCC_MIN_ASSIGN && ASBase :: peekNextChar ( currentLine , charNum + 1 ) == '>' ) && ! ( newOperator == & AS_GR && previousNonWSChar == '?' ) && ! ( newOperator == & AS_QUESTION && isJavaStyle ( ) && ( previousNonWSChar == '<' || nextNonWSChar == '>' || nextNonWSChar == '.' ) ) && ! ( newOperator == & AS_QUESTION && isSharpStyle ( ) && ( nextNonWSChar == '.' || nextNonWSChar == '[' ) ) && ! isCharImmediatelyPostOperator && ! isInCase && ! isInAsm && ! isInAsmOneLine && ! isInAsmBlock"		645404	1		&&			
ANR	645468	EqualityExpression	newOperator != & AS_BIT_NOT		645404	0		!=			
ANR	645469	Identifier	newOperator		645404	0					
ANR	645470	UnaryOperationExpression	& AS_BIT_NOT		645404	1					
ANR	645471	UnaryOperator	&		645404	0					
ANR	645472	Identifier	AS_BIT_NOT		645404	1					
ANR	645473	AndExpression	"newOperator != & AS_ARROW && ! ( newOperator == & AS_COLON && ! foundQuestionMark && ( isInObjCMethodDefinition || isInObjCInterface || isInObjCSelector || squareBracketCount != 0 ) ) && ! ( newOperator == & AS_MINUS && isInExponent ( ) ) && ! ( newOperator == & AS_PLUS && isInExponent ( ) ) && ! ( ( newOperator == & AS_PLUS || newOperator == & AS_MINUS ) && ( previousNonWSChar == '(' || previousNonWSChar == '[' || previousNonWSChar == '=' || previousNonWSChar == ',' || previousNonWSChar == ':' || previousNonWSChar == '{' ) ) && ! ( newOperator == & AS_MULT && ( previousNonWSChar == '.' || previousNonWSChar == '>' ) ) && ! ( newOperator == & AS_MULT && peekNextChar ( ) == '>' ) && ! ( ( isInTemplate || isImmediatelyPostTemplate ) && ( newOperator == & AS_LS || newOperator == & AS_GR ) ) && ! ( newOperator == & AS_GCC_MIN_ASSIGN && ASBase :: peekNextChar ( currentLine , charNum + 1 ) == '>' ) && ! ( newOperator == & AS_GR && previousNonWSChar == '?' ) && ! ( newOperator == & AS_QUESTION && isJavaStyle ( ) && ( previousNonWSChar == '<' || nextNonWSChar == '>' || nextNonWSChar == '.' ) ) && ! ( newOperator == & AS_QUESTION && isSharpStyle ( ) && ( nextNonWSChar == '.' || nextNonWSChar == '[' ) ) && ! isCharImmediatelyPostOperator && ! isInCase && ! isInAsm && ! isInAsmOneLine && ! isInAsmBlock"		645404	1		&&			
ANR	645474	EqualityExpression	newOperator != & AS_ARROW		645404	0		!=			
ANR	645475	Identifier	newOperator		645404	0					
ANR	645476	UnaryOperationExpression	& AS_ARROW		645404	1					
ANR	645477	UnaryOperator	&		645404	0					
ANR	645478	Identifier	AS_ARROW		645404	1					
ANR	645479	AndExpression	"! ( newOperator == & AS_COLON && ! foundQuestionMark && ( isInObjCMethodDefinition || isInObjCInterface || isInObjCSelector || squareBracketCount != 0 ) ) && ! ( newOperator == & AS_MINUS && isInExponent ( ) ) && ! ( newOperator == & AS_PLUS && isInExponent ( ) ) && ! ( ( newOperator == & AS_PLUS || newOperator == & AS_MINUS ) && ( previousNonWSChar == '(' || previousNonWSChar == '[' || previousNonWSChar == '=' || previousNonWSChar == ',' || previousNonWSChar == ':' || previousNonWSChar == '{' ) ) && ! ( newOperator == & AS_MULT && ( previousNonWSChar == '.' || previousNonWSChar == '>' ) ) && ! ( newOperator == & AS_MULT && peekNextChar ( ) == '>' ) && ! ( ( isInTemplate || isImmediatelyPostTemplate ) && ( newOperator == & AS_LS || newOperator == & AS_GR ) ) && ! ( newOperator == & AS_GCC_MIN_ASSIGN && ASBase :: peekNextChar ( currentLine , charNum + 1 ) == '>' ) && ! ( newOperator == & AS_GR && previousNonWSChar == '?' ) && ! ( newOperator == & AS_QUESTION && isJavaStyle ( ) && ( previousNonWSChar == '<' || nextNonWSChar == '>' || nextNonWSChar == '.' ) ) && ! ( newOperator == & AS_QUESTION && isSharpStyle ( ) && ( nextNonWSChar == '.' || nextNonWSChar == '[' ) ) && ! isCharImmediatelyPostOperator && ! isInCase && ! isInAsm && ! isInAsmOneLine && ! isInAsmBlock"		645404	1		&&			
ANR	645480	UnaryOperationExpression	! ( newOperator == & AS_COLON && ! foundQuestionMark && ( isInObjCMethodDefinition || isInObjCInterface || isInObjCSelector || squareBracketCount != 0 ) )		645404	0					
ANR	645481	UnaryOperator	!		645404	0					
ANR	645482	AndExpression	newOperator == & AS_COLON && ! foundQuestionMark && ( isInObjCMethodDefinition || isInObjCInterface || isInObjCSelector || squareBracketCount != 0 )		645404	1		&&			
ANR	645483	EqualityExpression	newOperator == & AS_COLON		645404	0		==			
ANR	645484	Identifier	newOperator		645404	0					
ANR	645485	UnaryOperationExpression	& AS_COLON		645404	1					
ANR	645486	UnaryOperator	&		645404	0					
ANR	645487	Identifier	AS_COLON		645404	1					
ANR	645488	AndExpression	! foundQuestionMark && ( isInObjCMethodDefinition || isInObjCInterface || isInObjCSelector || squareBracketCount != 0 )		645404	1		&&			
ANR	645489	UnaryOperationExpression	! foundQuestionMark		645404	0					
ANR	645490	UnaryOperator	!		645404	0					
ANR	645491	Identifier	foundQuestionMark		645404	1					
ANR	645492	OrExpression	isInObjCMethodDefinition || isInObjCInterface || isInObjCSelector || squareBracketCount != 0		645404	1		||			
ANR	645493	Identifier	isInObjCMethodDefinition		645404	0					
ANR	645494	OrExpression	isInObjCInterface || isInObjCSelector || squareBracketCount != 0		645404	1		||			
ANR	645495	Identifier	isInObjCInterface		645404	0					
ANR	645496	OrExpression	isInObjCSelector || squareBracketCount != 0		645404	1		||			
ANR	645497	Identifier	isInObjCSelector		645404	0					
ANR	645498	EqualityExpression	squareBracketCount != 0		645404	1		!=			
ANR	645499	Identifier	squareBracketCount		645404	0					
ANR	645500	PrimaryExpression	0		645404	1					
ANR	645501	AndExpression	"! ( newOperator == & AS_MINUS && isInExponent ( ) ) && ! ( newOperator == & AS_PLUS && isInExponent ( ) ) && ! ( ( newOperator == & AS_PLUS || newOperator == & AS_MINUS ) && ( previousNonWSChar == '(' || previousNonWSChar == '[' || previousNonWSChar == '=' || previousNonWSChar == ',' || previousNonWSChar == ':' || previousNonWSChar == '{' ) ) && ! ( newOperator == & AS_MULT && ( previousNonWSChar == '.' || previousNonWSChar == '>' ) ) && ! ( newOperator == & AS_MULT && peekNextChar ( ) == '>' ) && ! ( ( isInTemplate || isImmediatelyPostTemplate ) && ( newOperator == & AS_LS || newOperator == & AS_GR ) ) && ! ( newOperator == & AS_GCC_MIN_ASSIGN && ASBase :: peekNextChar ( currentLine , charNum + 1 ) == '>' ) && ! ( newOperator == & AS_GR && previousNonWSChar == '?' ) && ! ( newOperator == & AS_QUESTION && isJavaStyle ( ) && ( previousNonWSChar == '<' || nextNonWSChar == '>' || nextNonWSChar == '.' ) ) && ! ( newOperator == & AS_QUESTION && isSharpStyle ( ) && ( nextNonWSChar == '.' || nextNonWSChar == '[' ) ) && ! isCharImmediatelyPostOperator && ! isInCase && ! isInAsm && ! isInAsmOneLine && ! isInAsmBlock"		645404	1		&&			
ANR	645502	UnaryOperationExpression	! ( newOperator == & AS_MINUS && isInExponent ( ) )		645404	0					
ANR	645503	UnaryOperator	!		645404	0					
ANR	645504	AndExpression	newOperator == & AS_MINUS && isInExponent ( )		645404	1		&&			
ANR	645505	EqualityExpression	newOperator == & AS_MINUS		645404	0		==			
ANR	645506	Identifier	newOperator		645404	0					
ANR	645507	UnaryOperationExpression	& AS_MINUS		645404	1					
ANR	645508	UnaryOperator	&		645404	0					
ANR	645509	Identifier	AS_MINUS		645404	1					
ANR	645510	CallExpression	isInExponent ( )		645404	1					
ANR	645511	Callee	isInExponent		645404	0					
ANR	645512	Identifier	isInExponent		645404	0					
ANR	645513	ArgumentList			645404	1					
ANR	645514	AndExpression	"! ( newOperator == & AS_PLUS && isInExponent ( ) ) && ! ( ( newOperator == & AS_PLUS || newOperator == & AS_MINUS ) && ( previousNonWSChar == '(' || previousNonWSChar == '[' || previousNonWSChar == '=' || previousNonWSChar == ',' || previousNonWSChar == ':' || previousNonWSChar == '{' ) ) && ! ( newOperator == & AS_MULT && ( previousNonWSChar == '.' || previousNonWSChar == '>' ) ) && ! ( newOperator == & AS_MULT && peekNextChar ( ) == '>' ) && ! ( ( isInTemplate || isImmediatelyPostTemplate ) && ( newOperator == & AS_LS || newOperator == & AS_GR ) ) && ! ( newOperator == & AS_GCC_MIN_ASSIGN && ASBase :: peekNextChar ( currentLine , charNum + 1 ) == '>' ) && ! ( newOperator == & AS_GR && previousNonWSChar == '?' ) && ! ( newOperator == & AS_QUESTION && isJavaStyle ( ) && ( previousNonWSChar == '<' || nextNonWSChar == '>' || nextNonWSChar == '.' ) ) && ! ( newOperator == & AS_QUESTION && isSharpStyle ( ) && ( nextNonWSChar == '.' || nextNonWSChar == '[' ) ) && ! isCharImmediatelyPostOperator && ! isInCase && ! isInAsm && ! isInAsmOneLine && ! isInAsmBlock"		645404	1		&&			
ANR	645515	UnaryOperationExpression	! ( newOperator == & AS_PLUS && isInExponent ( ) )		645404	0					
ANR	645516	UnaryOperator	!		645404	0					
ANR	645517	AndExpression	newOperator == & AS_PLUS && isInExponent ( )		645404	1		&&			
ANR	645518	EqualityExpression	newOperator == & AS_PLUS		645404	0		==			
ANR	645519	Identifier	newOperator		645404	0					
ANR	645520	UnaryOperationExpression	& AS_PLUS		645404	1					
ANR	645521	UnaryOperator	&		645404	0					
ANR	645522	Identifier	AS_PLUS		645404	1					
ANR	645523	CallExpression	isInExponent ( )		645404	1					
ANR	645524	Callee	isInExponent		645404	0					
ANR	645525	Identifier	isInExponent		645404	0					
ANR	645526	ArgumentList			645404	1					
ANR	645527	AndExpression	"! ( ( newOperator == & AS_PLUS || newOperator == & AS_MINUS ) && ( previousNonWSChar == '(' || previousNonWSChar == '[' || previousNonWSChar == '=' || previousNonWSChar == ',' || previousNonWSChar == ':' || previousNonWSChar == '{' ) ) && ! ( newOperator == & AS_MULT && ( previousNonWSChar == '.' || previousNonWSChar == '>' ) ) && ! ( newOperator == & AS_MULT && peekNextChar ( ) == '>' ) && ! ( ( isInTemplate || isImmediatelyPostTemplate ) && ( newOperator == & AS_LS || newOperator == & AS_GR ) ) && ! ( newOperator == & AS_GCC_MIN_ASSIGN && ASBase :: peekNextChar ( currentLine , charNum + 1 ) == '>' ) && ! ( newOperator == & AS_GR && previousNonWSChar == '?' ) && ! ( newOperator == & AS_QUESTION && isJavaStyle ( ) && ( previousNonWSChar == '<' || nextNonWSChar == '>' || nextNonWSChar == '.' ) ) && ! ( newOperator == & AS_QUESTION && isSharpStyle ( ) && ( nextNonWSChar == '.' || nextNonWSChar == '[' ) ) && ! isCharImmediatelyPostOperator && ! isInCase && ! isInAsm && ! isInAsmOneLine && ! isInAsmBlock"		645404	1		&&			
ANR	645528	UnaryOperationExpression	"! ( ( newOperator == & AS_PLUS || newOperator == & AS_MINUS ) && ( previousNonWSChar == '(' || previousNonWSChar == '[' || previousNonWSChar == '=' || previousNonWSChar == ',' || previousNonWSChar == ':' || previousNonWSChar == '{' ) )"		645404	0					
ANR	645529	UnaryOperator	!		645404	0					
ANR	645530	AndExpression	"( newOperator == & AS_PLUS || newOperator == & AS_MINUS ) && ( previousNonWSChar == '(' || previousNonWSChar == '[' || previousNonWSChar == '=' || previousNonWSChar == ',' || previousNonWSChar == ':' || previousNonWSChar == '{' )"		645404	1		&&			
ANR	645531	OrExpression	newOperator == & AS_PLUS || newOperator == & AS_MINUS		645404	0		||			
ANR	645532	EqualityExpression	newOperator == & AS_PLUS		645404	0		==			
ANR	645533	Identifier	newOperator		645404	0					
ANR	645534	UnaryOperationExpression	& AS_PLUS		645404	1					
ANR	645535	UnaryOperator	&		645404	0					
ANR	645536	Identifier	AS_PLUS		645404	1					
ANR	645537	EqualityExpression	newOperator == & AS_MINUS		645404	1		==			
ANR	645538	Identifier	newOperator		645404	0					
ANR	645539	UnaryOperationExpression	& AS_MINUS		645404	1					
ANR	645540	UnaryOperator	&		645404	0					
ANR	645541	Identifier	AS_MINUS		645404	1					
ANR	645542	OrExpression	"previousNonWSChar == '(' || previousNonWSChar == '[' || previousNonWSChar == '=' || previousNonWSChar == ',' || previousNonWSChar == ':' || previousNonWSChar == '{'"		645404	1		||			
ANR	645543	EqualityExpression	previousNonWSChar == '('		645404	0		==			
ANR	645544	Identifier	previousNonWSChar		645404	0					
ANR	645545	PrimaryExpression	'('		645404	1					
ANR	645546	OrExpression	"previousNonWSChar == '[' || previousNonWSChar == '=' || previousNonWSChar == ',' || previousNonWSChar == ':' || previousNonWSChar == '{'"		645404	1		||			
ANR	645547	EqualityExpression	previousNonWSChar == '['		645404	0		==			
ANR	645548	Identifier	previousNonWSChar		645404	0					
ANR	645549	PrimaryExpression	'['		645404	1					
ANR	645550	OrExpression	"previousNonWSChar == '=' || previousNonWSChar == ',' || previousNonWSChar == ':' || previousNonWSChar == '{'"		645404	1		||			
ANR	645551	EqualityExpression	previousNonWSChar == '='		645404	0		==			
ANR	645552	Identifier	previousNonWSChar		645404	0					
ANR	645553	PrimaryExpression	'='		645404	1					
ANR	645554	OrExpression	"previousNonWSChar == ',' || previousNonWSChar == ':' || previousNonWSChar == '{'"		645404	1		||			
ANR	645555	EqualityExpression	"previousNonWSChar == ','"		645404	0		==			
ANR	645556	Identifier	previousNonWSChar		645404	0					
ANR	645557	PrimaryExpression	"','"		645404	1					
ANR	645558	OrExpression	previousNonWSChar == ':' || previousNonWSChar == '{'		645404	1		||			
ANR	645559	EqualityExpression	previousNonWSChar == ':'		645404	0		==			
ANR	645560	Identifier	previousNonWSChar		645404	0					
ANR	645561	PrimaryExpression	':'		645404	1					
ANR	645562	EqualityExpression	previousNonWSChar == '{'		645404	1		==			
ANR	645563	Identifier	previousNonWSChar		645404	0					
ANR	645564	PrimaryExpression	'{'		645404	1					
ANR	645565	AndExpression	"! ( newOperator == & AS_MULT && ( previousNonWSChar == '.' || previousNonWSChar == '>' ) ) && ! ( newOperator == & AS_MULT && peekNextChar ( ) == '>' ) && ! ( ( isInTemplate || isImmediatelyPostTemplate ) && ( newOperator == & AS_LS || newOperator == & AS_GR ) ) && ! ( newOperator == & AS_GCC_MIN_ASSIGN && ASBase :: peekNextChar ( currentLine , charNum + 1 ) == '>' ) && ! ( newOperator == & AS_GR && previousNonWSChar == '?' ) && ! ( newOperator == & AS_QUESTION && isJavaStyle ( ) && ( previousNonWSChar == '<' || nextNonWSChar == '>' || nextNonWSChar == '.' ) ) && ! ( newOperator == & AS_QUESTION && isSharpStyle ( ) && ( nextNonWSChar == '.' || nextNonWSChar == '[' ) ) && ! isCharImmediatelyPostOperator && ! isInCase && ! isInAsm && ! isInAsmOneLine && ! isInAsmBlock"		645404	1		&&			
ANR	645566	UnaryOperationExpression	! ( newOperator == & AS_MULT && ( previousNonWSChar == '.' || previousNonWSChar == '>' ) )		645404	0					
ANR	645567	UnaryOperator	!		645404	0					
ANR	645568	AndExpression	newOperator == & AS_MULT && ( previousNonWSChar == '.' || previousNonWSChar == '>' )		645404	1		&&			
ANR	645569	EqualityExpression	newOperator == & AS_MULT		645404	0		==			
ANR	645570	Identifier	newOperator		645404	0					
ANR	645571	UnaryOperationExpression	& AS_MULT		645404	1					
ANR	645572	UnaryOperator	&		645404	0					
ANR	645573	Identifier	AS_MULT		645404	1					
ANR	645574	OrExpression	previousNonWSChar == '.' || previousNonWSChar == '>'		645404	1		||			
ANR	645575	EqualityExpression	previousNonWSChar == '.'		645404	0		==			
ANR	645576	Identifier	previousNonWSChar		645404	0					
ANR	645577	PrimaryExpression	'.'		645404	1					
ANR	645578	EqualityExpression	previousNonWSChar == '>'		645404	1		==			
ANR	645579	Identifier	previousNonWSChar		645404	0					
ANR	645580	PrimaryExpression	'>'		645404	1					
ANR	645581	AndExpression	"! ( newOperator == & AS_MULT && peekNextChar ( ) == '>' ) && ! ( ( isInTemplate || isImmediatelyPostTemplate ) && ( newOperator == & AS_LS || newOperator == & AS_GR ) ) && ! ( newOperator == & AS_GCC_MIN_ASSIGN && ASBase :: peekNextChar ( currentLine , charNum + 1 ) == '>' ) && ! ( newOperator == & AS_GR && previousNonWSChar == '?' ) && ! ( newOperator == & AS_QUESTION && isJavaStyle ( ) && ( previousNonWSChar == '<' || nextNonWSChar == '>' || nextNonWSChar == '.' ) ) && ! ( newOperator == & AS_QUESTION && isSharpStyle ( ) && ( nextNonWSChar == '.' || nextNonWSChar == '[' ) ) && ! isCharImmediatelyPostOperator && ! isInCase && ! isInAsm && ! isInAsmOneLine && ! isInAsmBlock"		645404	1		&&			
ANR	645582	UnaryOperationExpression	! ( newOperator == & AS_MULT && peekNextChar ( ) == '>' )		645404	0					
ANR	645583	UnaryOperator	!		645404	0					
ANR	645584	AndExpression	newOperator == & AS_MULT && peekNextChar ( ) == '>'		645404	1		&&			
ANR	645585	EqualityExpression	newOperator == & AS_MULT		645404	0		==			
ANR	645586	Identifier	newOperator		645404	0					
ANR	645587	UnaryOperationExpression	& AS_MULT		645404	1					
ANR	645588	UnaryOperator	&		645404	0					
ANR	645589	Identifier	AS_MULT		645404	1					
ANR	645590	EqualityExpression	peekNextChar ( ) == '>'		645404	1		==			
ANR	645591	CallExpression	peekNextChar ( )		645404	0					
ANR	645592	Callee	peekNextChar		645404	0					
ANR	645593	Identifier	peekNextChar		645404	0					
ANR	645594	ArgumentList			645404	1					
ANR	645595	PrimaryExpression	'>'		645404	1					
ANR	645596	AndExpression	"! ( ( isInTemplate || isImmediatelyPostTemplate ) && ( newOperator == & AS_LS || newOperator == & AS_GR ) ) && ! ( newOperator == & AS_GCC_MIN_ASSIGN && ASBase :: peekNextChar ( currentLine , charNum + 1 ) == '>' ) && ! ( newOperator == & AS_GR && previousNonWSChar == '?' ) && ! ( newOperator == & AS_QUESTION && isJavaStyle ( ) && ( previousNonWSChar == '<' || nextNonWSChar == '>' || nextNonWSChar == '.' ) ) && ! ( newOperator == & AS_QUESTION && isSharpStyle ( ) && ( nextNonWSChar == '.' || nextNonWSChar == '[' ) ) && ! isCharImmediatelyPostOperator && ! isInCase && ! isInAsm && ! isInAsmOneLine && ! isInAsmBlock"		645404	1		&&			
ANR	645597	UnaryOperationExpression	! ( ( isInTemplate || isImmediatelyPostTemplate ) && ( newOperator == & AS_LS || newOperator == & AS_GR ) )		645404	0					
ANR	645598	UnaryOperator	!		645404	0					
ANR	645599	AndExpression	( isInTemplate || isImmediatelyPostTemplate ) && ( newOperator == & AS_LS || newOperator == & AS_GR )		645404	1		&&			
ANR	645600	OrExpression	isInTemplate || isImmediatelyPostTemplate		645404	0		||			
ANR	645601	Identifier	isInTemplate		645404	0					
ANR	645602	Identifier	isImmediatelyPostTemplate		645404	1					
ANR	645603	OrExpression	newOperator == & AS_LS || newOperator == & AS_GR		645404	1		||			
ANR	645604	EqualityExpression	newOperator == & AS_LS		645404	0		==			
ANR	645605	Identifier	newOperator		645404	0					
ANR	645606	UnaryOperationExpression	& AS_LS		645404	1					
ANR	645607	UnaryOperator	&		645404	0					
ANR	645608	Identifier	AS_LS		645404	1					
ANR	645609	EqualityExpression	newOperator == & AS_GR		645404	1		==			
ANR	645610	Identifier	newOperator		645404	0					
ANR	645611	UnaryOperationExpression	& AS_GR		645404	1					
ANR	645612	UnaryOperator	&		645404	0					
ANR	645613	Identifier	AS_GR		645404	1					
ANR	645614	AndExpression	"! ( newOperator == & AS_GCC_MIN_ASSIGN && ASBase :: peekNextChar ( currentLine , charNum + 1 ) == '>' ) && ! ( newOperator == & AS_GR && previousNonWSChar == '?' ) && ! ( newOperator == & AS_QUESTION && isJavaStyle ( ) && ( previousNonWSChar == '<' || nextNonWSChar == '>' || nextNonWSChar == '.' ) ) && ! ( newOperator == & AS_QUESTION && isSharpStyle ( ) && ( nextNonWSChar == '.' || nextNonWSChar == '[' ) ) && ! isCharImmediatelyPostOperator && ! isInCase && ! isInAsm && ! isInAsmOneLine && ! isInAsmBlock"		645404	1		&&			
ANR	645615	UnaryOperationExpression	"! ( newOperator == & AS_GCC_MIN_ASSIGN && ASBase :: peekNextChar ( currentLine , charNum + 1 ) == '>' )"		645404	0					
ANR	645616	UnaryOperator	!		645404	0					
ANR	645617	AndExpression	"newOperator == & AS_GCC_MIN_ASSIGN && ASBase :: peekNextChar ( currentLine , charNum + 1 ) == '>'"		645404	1		&&			
ANR	645618	EqualityExpression	newOperator == & AS_GCC_MIN_ASSIGN		645404	0		==			
ANR	645619	Identifier	newOperator		645404	0					
ANR	645620	UnaryOperationExpression	& AS_GCC_MIN_ASSIGN		645404	1					
ANR	645621	UnaryOperator	&		645404	0					
ANR	645622	Identifier	AS_GCC_MIN_ASSIGN		645404	1					
ANR	645623	EqualityExpression	"ASBase :: peekNextChar ( currentLine , charNum + 1 ) == '>'"		645404	1		==			
ANR	645624	CallExpression	"ASBase :: peekNextChar ( currentLine , charNum + 1 )"		645404	0					
ANR	645625	Callee	ASBase :: peekNextChar		645404	0					
ANR	645626	Identifier	ASBase :: peekNextChar		645404	0					
ANR	645627	ArgumentList	currentLine		645404	1					
ANR	645628	Argument	currentLine		645404	0					
ANR	645629	Identifier	currentLine		645404	0					
ANR	645630	Argument	charNum + 1		645404	1					
ANR	645631	AdditiveExpression	charNum + 1		645404	0		+			
ANR	645632	Identifier	charNum		645404	0					
ANR	645633	PrimaryExpression	1		645404	1					
ANR	645634	PrimaryExpression	'>'		645404	1					
ANR	645635	AndExpression	! ( newOperator == & AS_GR && previousNonWSChar == '?' ) && ! ( newOperator == & AS_QUESTION && isJavaStyle ( ) && ( previousNonWSChar == '<' || nextNonWSChar == '>' || nextNonWSChar == '.' ) ) && ! ( newOperator == & AS_QUESTION && isSharpStyle ( ) && ( nextNonWSChar == '.' || nextNonWSChar == '[' ) ) && ! isCharImmediatelyPostOperator && ! isInCase && ! isInAsm && ! isInAsmOneLine && ! isInAsmBlock		645404	1		&&			
ANR	645636	UnaryOperationExpression	! ( newOperator == & AS_GR && previousNonWSChar == '?' )		645404	0					
ANR	645637	UnaryOperator	!		645404	0					
ANR	645638	AndExpression	newOperator == & AS_GR && previousNonWSChar == '?'		645404	1		&&			
ANR	645639	EqualityExpression	newOperator == & AS_GR		645404	0		==			
ANR	645640	Identifier	newOperator		645404	0					
ANR	645641	UnaryOperationExpression	& AS_GR		645404	1					
ANR	645642	UnaryOperator	&		645404	0					
ANR	645643	Identifier	AS_GR		645404	1					
ANR	645644	EqualityExpression	previousNonWSChar == '?'		645404	1		==			
ANR	645645	Identifier	previousNonWSChar		645404	0					
ANR	645646	PrimaryExpression	'?'		645404	1					
ANR	645647	AndExpression	! ( newOperator == & AS_QUESTION && isJavaStyle ( ) && ( previousNonWSChar == '<' || nextNonWSChar == '>' || nextNonWSChar == '.' ) ) && ! ( newOperator == & AS_QUESTION && isSharpStyle ( ) && ( nextNonWSChar == '.' || nextNonWSChar == '[' ) ) && ! isCharImmediatelyPostOperator && ! isInCase && ! isInAsm && ! isInAsmOneLine && ! isInAsmBlock		645404	1		&&			
ANR	645648	UnaryOperationExpression	! ( newOperator == & AS_QUESTION && isJavaStyle ( ) && ( previousNonWSChar == '<' || nextNonWSChar == '>' || nextNonWSChar == '.' ) )		645404	0					
ANR	645649	UnaryOperator	!		645404	0					
ANR	645650	AndExpression	newOperator == & AS_QUESTION && isJavaStyle ( ) && ( previousNonWSChar == '<' || nextNonWSChar == '>' || nextNonWSChar == '.' )		645404	1		&&			
ANR	645651	EqualityExpression	newOperator == & AS_QUESTION		645404	0		==			
ANR	645652	Identifier	newOperator		645404	0					
ANR	645653	UnaryOperationExpression	& AS_QUESTION		645404	1					
ANR	645654	UnaryOperator	&		645404	0					
ANR	645655	Identifier	AS_QUESTION		645404	1					
ANR	645656	AndExpression	isJavaStyle ( ) && ( previousNonWSChar == '<' || nextNonWSChar == '>' || nextNonWSChar == '.' )		645404	1		&&			
ANR	645657	CallExpression	isJavaStyle ( )		645404	0					
ANR	645658	Callee	isJavaStyle		645404	0					
ANR	645659	Identifier	isJavaStyle		645404	0					
ANR	645660	ArgumentList			645404	1					
ANR	645661	OrExpression	previousNonWSChar == '<' || nextNonWSChar == '>' || nextNonWSChar == '.'		645404	1		||			
ANR	645662	EqualityExpression	previousNonWSChar == '<'		645404	0		==			
ANR	645663	Identifier	previousNonWSChar		645404	0					
ANR	645664	PrimaryExpression	'<'		645404	1					
ANR	645665	OrExpression	nextNonWSChar == '>' || nextNonWSChar == '.'		645404	1		||			
ANR	645666	EqualityExpression	nextNonWSChar == '>'		645404	0		==			
ANR	645667	Identifier	nextNonWSChar		645404	0					
ANR	645668	PrimaryExpression	'>'		645404	1					
ANR	645669	EqualityExpression	nextNonWSChar == '.'		645404	1		==			
ANR	645670	Identifier	nextNonWSChar		645404	0					
ANR	645671	PrimaryExpression	'.'		645404	1					
ANR	645672	AndExpression	! ( newOperator == & AS_QUESTION && isSharpStyle ( ) && ( nextNonWSChar == '.' || nextNonWSChar == '[' ) ) && ! isCharImmediatelyPostOperator && ! isInCase && ! isInAsm && ! isInAsmOneLine && ! isInAsmBlock		645404	1		&&			
ANR	645673	UnaryOperationExpression	! ( newOperator == & AS_QUESTION && isSharpStyle ( ) && ( nextNonWSChar == '.' || nextNonWSChar == '[' ) )		645404	0					
ANR	645674	UnaryOperator	!		645404	0					
ANR	645675	AndExpression	newOperator == & AS_QUESTION && isSharpStyle ( ) && ( nextNonWSChar == '.' || nextNonWSChar == '[' )		645404	1		&&			
ANR	645676	EqualityExpression	newOperator == & AS_QUESTION		645404	0		==			
ANR	645677	Identifier	newOperator		645404	0					
ANR	645678	UnaryOperationExpression	& AS_QUESTION		645404	1					
ANR	645679	UnaryOperator	&		645404	0					
ANR	645680	Identifier	AS_QUESTION		645404	1					
ANR	645681	AndExpression	isSharpStyle ( ) && ( nextNonWSChar == '.' || nextNonWSChar == '[' )		645404	1		&&			
ANR	645682	CallExpression	isSharpStyle ( )		645404	0					
ANR	645683	Callee	isSharpStyle		645404	0					
ANR	645684	Identifier	isSharpStyle		645404	0					
ANR	645685	ArgumentList			645404	1					
ANR	645686	OrExpression	nextNonWSChar == '.' || nextNonWSChar == '['		645404	1		||			
ANR	645687	EqualityExpression	nextNonWSChar == '.'		645404	0		==			
ANR	645688	Identifier	nextNonWSChar		645404	0					
ANR	645689	PrimaryExpression	'.'		645404	1					
ANR	645690	EqualityExpression	nextNonWSChar == '['		645404	1		==			
ANR	645691	Identifier	nextNonWSChar		645404	0					
ANR	645692	PrimaryExpression	'['		645404	1					
ANR	645693	AndExpression	! isCharImmediatelyPostOperator && ! isInCase && ! isInAsm && ! isInAsmOneLine && ! isInAsmBlock		645404	1		&&			
ANR	645694	UnaryOperationExpression	! isCharImmediatelyPostOperator		645404	0					
ANR	645695	UnaryOperator	!		645404	0					
ANR	645696	Identifier	isCharImmediatelyPostOperator		645404	1					
ANR	645697	AndExpression	! isInCase && ! isInAsm && ! isInAsmOneLine && ! isInAsmBlock		645404	1		&&			
ANR	645698	UnaryOperationExpression	! isInCase		645404	0					
ANR	645699	UnaryOperator	!		645404	0					
ANR	645700	Identifier	isInCase		645404	1					
ANR	645701	AndExpression	! isInAsm && ! isInAsmOneLine && ! isInAsmBlock		645404	1		&&			
ANR	645702	UnaryOperationExpression	! isInAsm		645404	0					
ANR	645703	UnaryOperator	!		645404	0					
ANR	645704	Identifier	isInAsm		645404	1					
ANR	645705	AndExpression	! isInAsmOneLine && ! isInAsmBlock		645404	1		&&			
ANR	645706	UnaryOperationExpression	! isInAsmOneLine		645404	0					
ANR	645707	UnaryOperator	!		645404	0					
ANR	645708	Identifier	isInAsmOneLine		645404	1					
ANR	645709	UnaryOperationExpression	! isInAsmBlock		645404	1					
ANR	645710	UnaryOperator	!		645404	0					
ANR	645711	Identifier	isInAsmBlock		645404	1					
ANR	645712	IfStatement	"if ( shouldPad && ! ( newOperator == & AS_COLON && ( ! foundQuestionMark && ! isInEnum ) && currentHeader != & AS_FOR ) && ! ( newOperator == & AS_QUESTION && isSharpStyle ( ) && currentLine . find ( ':' , charNum + 1 ) == string :: npos ) )"		645404	4					
ANR	645713	Condition	"shouldPad && ! ( newOperator == & AS_COLON && ( ! foundQuestionMark && ! isInEnum ) && currentHeader != & AS_FOR ) && ! ( newOperator == & AS_QUESTION && isSharpStyle ( ) && currentLine . find ( ':' , charNum + 1 ) == string :: npos )"	3815:5:109710:110008	645404	0	True				
ANR	645714	AndExpression	"shouldPad && ! ( newOperator == & AS_COLON && ( ! foundQuestionMark && ! isInEnum ) && currentHeader != & AS_FOR ) && ! ( newOperator == & AS_QUESTION && isSharpStyle ( ) && currentLine . find ( ':' , charNum + 1 ) == string :: npos )"		645404	0		&&			
ANR	645715	Identifier	shouldPad		645404	0					
ANR	645716	AndExpression	"! ( newOperator == & AS_COLON && ( ! foundQuestionMark && ! isInEnum ) && currentHeader != & AS_FOR ) && ! ( newOperator == & AS_QUESTION && isSharpStyle ( ) && currentLine . find ( ':' , charNum + 1 ) == string :: npos )"		645404	1		&&			
ANR	645717	UnaryOperationExpression	! ( newOperator == & AS_COLON && ( ! foundQuestionMark && ! isInEnum ) && currentHeader != & AS_FOR )		645404	0					
ANR	645718	UnaryOperator	!		645404	0					
ANR	645719	AndExpression	newOperator == & AS_COLON && ( ! foundQuestionMark && ! isInEnum ) && currentHeader != & AS_FOR		645404	1		&&			
ANR	645720	EqualityExpression	newOperator == & AS_COLON		645404	0		==			
ANR	645721	Identifier	newOperator		645404	0					
ANR	645722	UnaryOperationExpression	& AS_COLON		645404	1					
ANR	645723	UnaryOperator	&		645404	0					
ANR	645724	Identifier	AS_COLON		645404	1					
ANR	645725	AndExpression	( ! foundQuestionMark && ! isInEnum ) && currentHeader != & AS_FOR		645404	1		&&			
ANR	645726	AndExpression	! foundQuestionMark && ! isInEnum		645404	0		&&			
ANR	645727	UnaryOperationExpression	! foundQuestionMark		645404	0					
ANR	645728	UnaryOperator	!		645404	0					
ANR	645729	Identifier	foundQuestionMark		645404	1					
ANR	645730	UnaryOperationExpression	! isInEnum		645404	1					
ANR	645731	UnaryOperator	!		645404	0					
ANR	645732	Identifier	isInEnum		645404	1					
ANR	645733	EqualityExpression	currentHeader != & AS_FOR		645404	1		!=			
ANR	645734	Identifier	currentHeader		645404	0					
ANR	645735	UnaryOperationExpression	& AS_FOR		645404	1					
ANR	645736	UnaryOperator	&		645404	0					
ANR	645737	Identifier	AS_FOR		645404	1					
ANR	645738	UnaryOperationExpression	"! ( newOperator == & AS_QUESTION && isSharpStyle ( ) && currentLine . find ( ':' , charNum + 1 ) == string :: npos )"		645404	1					
ANR	645739	UnaryOperator	!		645404	0					
ANR	645740	AndExpression	"newOperator == & AS_QUESTION && isSharpStyle ( ) && currentLine . find ( ':' , charNum + 1 ) == string :: npos"		645404	1		&&			
ANR	645741	EqualityExpression	newOperator == & AS_QUESTION		645404	0		==			
ANR	645742	Identifier	newOperator		645404	0					
ANR	645743	UnaryOperationExpression	& AS_QUESTION		645404	1					
ANR	645744	UnaryOperator	&		645404	0					
ANR	645745	Identifier	AS_QUESTION		645404	1					
ANR	645746	AndExpression	"isSharpStyle ( ) && currentLine . find ( ':' , charNum + 1 ) == string :: npos"		645404	1		&&			
ANR	645747	CallExpression	isSharpStyle ( )		645404	0					
ANR	645748	Callee	isSharpStyle		645404	0					
ANR	645749	Identifier	isSharpStyle		645404	0					
ANR	645750	ArgumentList			645404	1					
ANR	645751	EqualityExpression	"currentLine . find ( ':' , charNum + 1 ) == string :: npos"		645404	1		==			
ANR	645752	CallExpression	"currentLine . find ( ':' , charNum + 1 )"		645404	0					
ANR	645753	Callee	currentLine . find		645404	0					
ANR	645754	MemberAccess	currentLine . find		645404	0					
ANR	645755	Identifier	currentLine		645404	0					
ANR	645756	Identifier	find		645404	1					
ANR	645757	ArgumentList	':'		645404	1					
ANR	645758	Argument	':'		645404	0					
ANR	645759	PrimaryExpression	':'		645404	0					
ANR	645760	Argument	charNum + 1		645404	1					
ANR	645761	AdditiveExpression	charNum + 1		645404	0		+			
ANR	645762	Identifier	charNum		645404	0					
ANR	645763	PrimaryExpression	1		645404	1					
ANR	645764	Identifier	string :: npos		645404	1					
ANR	645765	ExpressionStatement	appendSpacePad ( )	3821:2:110018:110034	645404	1	True				
ANR	645766	CallExpression	appendSpacePad ( )		645404	0					
ANR	645767	Callee	appendSpacePad		645404	0					
ANR	645768	Identifier	appendSpacePad		645404	0					
ANR	645769	ArgumentList			645404	1					
ANR	645770	ExpressionStatement	appendOperator ( * newOperator )	3822:1:110037:110065	645404	5	True				
ANR	645771	CallExpression	appendOperator ( * newOperator )		645404	0					
ANR	645772	Callee	appendOperator		645404	0					
ANR	645773	Identifier	appendOperator		645404	0					
ANR	645774	ArgumentList	* newOperator		645404	1					
ANR	645775	Argument	* newOperator		645404	0					
ANR	645776	UnaryOperationExpression	* newOperator		645404	0					
ANR	645777	UnaryOperator	*		645404	0					
ANR	645778	Identifier	newOperator		645404	1					
ANR	645779	ExpressionStatement	goForward ( newOperator -> length ( ) - 1 )	3823:1:110068:110104	645404	6	True				
ANR	645780	CallExpression	goForward ( newOperator -> length ( ) - 1 )		645404	0					
ANR	645781	Callee	goForward		645404	0					
ANR	645782	Identifier	goForward		645404	0					
ANR	645783	ArgumentList	newOperator -> length ( ) - 1		645404	1					
ANR	645784	Argument	newOperator -> length ( ) - 1		645404	0					
ANR	645785	AdditiveExpression	newOperator -> length ( ) - 1		645404	0		-			
ANR	645786	CallExpression	newOperator -> length ( )		645404	0					
ANR	645787	Callee	newOperator -> length		645404	0					
ANR	645788	PtrMemberAccess	newOperator -> length		645404	0					
ANR	645789	Identifier	newOperator		645404	0					
ANR	645790	Identifier	length		645404	1					
ANR	645791	ArgumentList			645404	1					
ANR	645792	PrimaryExpression	1		645404	1					
ANR	645793	ExpressionStatement	currentChar = ( * newOperator ) [ newOperator -> length ( ) - 1 ]	3825:1:110108:110163	645404	7	True				
ANR	645794	AssignmentExpression	currentChar = ( * newOperator ) [ newOperator -> length ( ) - 1 ]		645404	0		=			
ANR	645795	Identifier	currentChar		645404	0					
ANR	645796	ArrayIndexing	( * newOperator ) [ newOperator -> length ( ) - 1 ]		645404	1					
ANR	645797	UnaryOperationExpression	* newOperator		645404	0					
ANR	645798	UnaryOperator	*		645404	0					
ANR	645799	Identifier	newOperator		645404	1					
ANR	645800	AdditiveExpression	newOperator -> length ( ) - 1		645404	1		-			
ANR	645801	CallExpression	newOperator -> length ( )		645404	0					
ANR	645802	Callee	newOperator -> length		645404	0					
ANR	645803	PtrMemberAccess	newOperator -> length		645404	0					
ANR	645804	Identifier	newOperator		645404	0					
ANR	645805	Identifier	length		645404	1					
ANR	645806	ArgumentList			645404	1					
ANR	645807	PrimaryExpression	1		645404	1					
ANR	645808	IfStatement	"if ( shouldPad && ! isBeforeAnyComment ( ) && ! ( newOperator == & AS_PLUS && isUnaryOperator ( ) ) && ! ( newOperator == & AS_MINUS && isUnaryOperator ( ) ) && ! ( currentLine . compare ( charNum + 1 , 1 , AS_SEMICOLON ) == 0 ) && ! ( currentLine . compare ( charNum + 1 , 2 , AS_SCOPE_RESOLUTION ) == 0 ) && ! ( peekNextChar ( ) == ',' ) && ! ( newOperator == & AS_QUESTION && isSharpStyle ( ) && peekNextChar ( ) == '[' ) )"		645404	8					
ANR	645809	Condition	"shouldPad && ! isBeforeAnyComment ( ) && ! ( newOperator == & AS_PLUS && isUnaryOperator ( ) ) && ! ( newOperator == & AS_MINUS && isUnaryOperator ( ) ) && ! ( currentLine . compare ( charNum + 1 , 1 , AS_SEMICOLON ) == 0 ) && ! ( currentLine . compare ( charNum + 1 , 2 , AS_SCOPE_RESOLUTION ) == 0 ) && ! ( peekNextChar ( ) == ',' ) && ! ( newOperator == & AS_QUESTION && isSharpStyle ( ) && peekNextChar ( ) == '[' )"	3828:5:110247:110736	645404	0	True				
ANR	645810	AndExpression	"shouldPad && ! isBeforeAnyComment ( ) && ! ( newOperator == & AS_PLUS && isUnaryOperator ( ) ) && ! ( newOperator == & AS_MINUS && isUnaryOperator ( ) ) && ! ( currentLine . compare ( charNum + 1 , 1 , AS_SEMICOLON ) == 0 ) && ! ( currentLine . compare ( charNum + 1 , 2 , AS_SCOPE_RESOLUTION ) == 0 ) && ! ( peekNextChar ( ) == ',' ) && ! ( newOperator == & AS_QUESTION && isSharpStyle ( ) && peekNextChar ( ) == '[' )"		645404	0		&&			
ANR	645811	Identifier	shouldPad		645404	0					
ANR	645812	AndExpression	"! isBeforeAnyComment ( ) && ! ( newOperator == & AS_PLUS && isUnaryOperator ( ) ) && ! ( newOperator == & AS_MINUS && isUnaryOperator ( ) ) && ! ( currentLine . compare ( charNum + 1 , 1 , AS_SEMICOLON ) == 0 ) && ! ( currentLine . compare ( charNum + 1 , 2 , AS_SCOPE_RESOLUTION ) == 0 ) && ! ( peekNextChar ( ) == ',' ) && ! ( newOperator == & AS_QUESTION && isSharpStyle ( ) && peekNextChar ( ) == '[' )"		645404	1		&&			
ANR	645813	UnaryOperationExpression	! isBeforeAnyComment ( )		645404	0					
ANR	645814	UnaryOperator	!		645404	0					
ANR	645815	CallExpression	isBeforeAnyComment ( )		645404	1					
ANR	645816	Callee	isBeforeAnyComment		645404	0					
ANR	645817	Identifier	isBeforeAnyComment		645404	0					
ANR	645818	ArgumentList			645404	1					
ANR	645819	AndExpression	"! ( newOperator == & AS_PLUS && isUnaryOperator ( ) ) && ! ( newOperator == & AS_MINUS && isUnaryOperator ( ) ) && ! ( currentLine . compare ( charNum + 1 , 1 , AS_SEMICOLON ) == 0 ) && ! ( currentLine . compare ( charNum + 1 , 2 , AS_SCOPE_RESOLUTION ) == 0 ) && ! ( peekNextChar ( ) == ',' ) && ! ( newOperator == & AS_QUESTION && isSharpStyle ( ) && peekNextChar ( ) == '[' )"		645404	1		&&			
ANR	645820	UnaryOperationExpression	! ( newOperator == & AS_PLUS && isUnaryOperator ( ) )		645404	0					
ANR	645821	UnaryOperator	!		645404	0					
ANR	645822	AndExpression	newOperator == & AS_PLUS && isUnaryOperator ( )		645404	1		&&			
ANR	645823	EqualityExpression	newOperator == & AS_PLUS		645404	0		==			
ANR	645824	Identifier	newOperator		645404	0					
ANR	645825	UnaryOperationExpression	& AS_PLUS		645404	1					
ANR	645826	UnaryOperator	&		645404	0					
ANR	645827	Identifier	AS_PLUS		645404	1					
ANR	645828	CallExpression	isUnaryOperator ( )		645404	1					
ANR	645829	Callee	isUnaryOperator		645404	0					
ANR	645830	Identifier	isUnaryOperator		645404	0					
ANR	645831	ArgumentList			645404	1					
ANR	645832	AndExpression	"! ( newOperator == & AS_MINUS && isUnaryOperator ( ) ) && ! ( currentLine . compare ( charNum + 1 , 1 , AS_SEMICOLON ) == 0 ) && ! ( currentLine . compare ( charNum + 1 , 2 , AS_SCOPE_RESOLUTION ) == 0 ) && ! ( peekNextChar ( ) == ',' ) && ! ( newOperator == & AS_QUESTION && isSharpStyle ( ) && peekNextChar ( ) == '[' )"		645404	1		&&			
ANR	645833	UnaryOperationExpression	! ( newOperator == & AS_MINUS && isUnaryOperator ( ) )		645404	0					
ANR	645834	UnaryOperator	!		645404	0					
ANR	645835	AndExpression	newOperator == & AS_MINUS && isUnaryOperator ( )		645404	1		&&			
ANR	645836	EqualityExpression	newOperator == & AS_MINUS		645404	0		==			
ANR	645837	Identifier	newOperator		645404	0					
ANR	645838	UnaryOperationExpression	& AS_MINUS		645404	1					
ANR	645839	UnaryOperator	&		645404	0					
ANR	645840	Identifier	AS_MINUS		645404	1					
ANR	645841	CallExpression	isUnaryOperator ( )		645404	1					
ANR	645842	Callee	isUnaryOperator		645404	0					
ANR	645843	Identifier	isUnaryOperator		645404	0					
ANR	645844	ArgumentList			645404	1					
ANR	645845	AndExpression	"! ( currentLine . compare ( charNum + 1 , 1 , AS_SEMICOLON ) == 0 ) && ! ( currentLine . compare ( charNum + 1 , 2 , AS_SCOPE_RESOLUTION ) == 0 ) && ! ( peekNextChar ( ) == ',' ) && ! ( newOperator == & AS_QUESTION && isSharpStyle ( ) && peekNextChar ( ) == '[' )"		645404	1		&&			
ANR	645846	UnaryOperationExpression	"! ( currentLine . compare ( charNum + 1 , 1 , AS_SEMICOLON ) == 0 )"		645404	0					
ANR	645847	UnaryOperator	!		645404	0					
ANR	645848	EqualityExpression	"currentLine . compare ( charNum + 1 , 1 , AS_SEMICOLON ) == 0"		645404	1		==			
ANR	645849	CallExpression	"currentLine . compare ( charNum + 1 , 1 , AS_SEMICOLON )"		645404	0					
ANR	645850	Callee	currentLine . compare		645404	0					
ANR	645851	MemberAccess	currentLine . compare		645404	0					
ANR	645852	Identifier	currentLine		645404	0					
ANR	645853	Identifier	compare		645404	1					
ANR	645854	ArgumentList	charNum + 1		645404	1					
ANR	645855	Argument	charNum + 1		645404	0					
ANR	645856	AdditiveExpression	charNum + 1		645404	0		+			
ANR	645857	Identifier	charNum		645404	0					
ANR	645858	PrimaryExpression	1		645404	1					
ANR	645859	Argument	1		645404	1					
ANR	645860	PrimaryExpression	1		645404	0					
ANR	645861	Argument	AS_SEMICOLON		645404	2					
ANR	645862	Identifier	AS_SEMICOLON		645404	0					
ANR	645863	PrimaryExpression	0		645404	1					
ANR	645864	AndExpression	"! ( currentLine . compare ( charNum + 1 , 2 , AS_SCOPE_RESOLUTION ) == 0 ) && ! ( peekNextChar ( ) == ',' ) && ! ( newOperator == & AS_QUESTION && isSharpStyle ( ) && peekNextChar ( ) == '[' )"		645404	1		&&			
ANR	645865	UnaryOperationExpression	"! ( currentLine . compare ( charNum + 1 , 2 , AS_SCOPE_RESOLUTION ) == 0 )"		645404	0					
ANR	645866	UnaryOperator	!		645404	0					
ANR	645867	EqualityExpression	"currentLine . compare ( charNum + 1 , 2 , AS_SCOPE_RESOLUTION ) == 0"		645404	1		==			
ANR	645868	CallExpression	"currentLine . compare ( charNum + 1 , 2 , AS_SCOPE_RESOLUTION )"		645404	0					
ANR	645869	Callee	currentLine . compare		645404	0					
ANR	645870	MemberAccess	currentLine . compare		645404	0					
ANR	645871	Identifier	currentLine		645404	0					
ANR	645872	Identifier	compare		645404	1					
ANR	645873	ArgumentList	charNum + 1		645404	1					
ANR	645874	Argument	charNum + 1		645404	0					
ANR	645875	AdditiveExpression	charNum + 1		645404	0		+			
ANR	645876	Identifier	charNum		645404	0					
ANR	645877	PrimaryExpression	1		645404	1					
ANR	645878	Argument	2		645404	1					
ANR	645879	PrimaryExpression	2		645404	0					
ANR	645880	Argument	AS_SCOPE_RESOLUTION		645404	2					
ANR	645881	Identifier	AS_SCOPE_RESOLUTION		645404	0					
ANR	645882	PrimaryExpression	0		645404	1					
ANR	645883	AndExpression	"! ( peekNextChar ( ) == ',' ) && ! ( newOperator == & AS_QUESTION && isSharpStyle ( ) && peekNextChar ( ) == '[' )"		645404	1		&&			
ANR	645884	UnaryOperationExpression	"! ( peekNextChar ( ) == ',' )"		645404	0					
ANR	645885	UnaryOperator	!		645404	0					
ANR	645886	EqualityExpression	"peekNextChar ( ) == ','"		645404	1		==			
ANR	645887	CallExpression	peekNextChar ( )		645404	0					
ANR	645888	Callee	peekNextChar		645404	0					
ANR	645889	Identifier	peekNextChar		645404	0					
ANR	645890	ArgumentList			645404	1					
ANR	645891	PrimaryExpression	"','"		645404	1					
ANR	645892	UnaryOperationExpression	! ( newOperator == & AS_QUESTION && isSharpStyle ( ) && peekNextChar ( ) == '[' )		645404	1					
ANR	645893	UnaryOperator	!		645404	0					
ANR	645894	AndExpression	newOperator == & AS_QUESTION && isSharpStyle ( ) && peekNextChar ( ) == '['		645404	1		&&			
ANR	645895	EqualityExpression	newOperator == & AS_QUESTION		645404	0		==			
ANR	645896	Identifier	newOperator		645404	0					
ANR	645897	UnaryOperationExpression	& AS_QUESTION		645404	1					
ANR	645898	UnaryOperator	&		645404	0					
ANR	645899	Identifier	AS_QUESTION		645404	1					
ANR	645900	AndExpression	isSharpStyle ( ) && peekNextChar ( ) == '['		645404	1		&&			
ANR	645901	CallExpression	isSharpStyle ( )		645404	0					
ANR	645902	Callee	isSharpStyle		645404	0					
ANR	645903	Identifier	isSharpStyle		645404	0					
ANR	645904	ArgumentList			645404	1					
ANR	645905	EqualityExpression	peekNextChar ( ) == '['		645404	1		==			
ANR	645906	CallExpression	peekNextChar ( )		645404	0					
ANR	645907	Callee	peekNextChar		645404	0					
ANR	645908	Identifier	peekNextChar		645404	0					
ANR	645909	ArgumentList			645404	1					
ANR	645910	PrimaryExpression	'['		645404	1					
ANR	645911	ExpressionStatement	appendSpaceAfter ( )	3838:2:110746:110764	645404	1	True				
ANR	645912	CallExpression	appendSpaceAfter ( )		645404	0					
ANR	645913	Callee	appendSpaceAfter		645404	0					
ANR	645914	Identifier	appendSpaceAfter		645404	0					
ANR	645915	ArgumentList			645404	1					
ANR	645916	ReturnType	void		645404	1					
ANR	645917	Identifier	ASFormatter :: padOperators		645404	2					
ANR	645918	ParameterList	const string * newOperator		645404	3					
ANR	645919	Parameter	const string * newOperator	3762:31:106803:106827	645404	0	True				
ANR	645920	ParameterType	const string *		645404	0					
ANR	645921	Identifier	newOperator		645404	1					
ANR	645922	CFGEntryNode	ENTRY		645404		True				
ANR	645923	CFGExitNode	EXIT		645404		True				
ANR	645924	Symbol	isInAsmBlock		645404						
ANR	645925	Symbol	* * newOperator		645404						
ANR	645926	Symbol	& AS_FOR		645404						
ANR	645927	Symbol	& AS_MINUS_MINUS		645404						
ANR	645928	Symbol	isInTemplate		645404						
ANR	645929	Symbol	* newOperator -> length		645404						
ANR	645930	Symbol	isCharImmediatelyPostOperator		645404						
ANR	645931	Symbol	isInEnum		645404						
ANR	645932	Symbol	& AS_COLON		645404						
ANR	645933	Symbol	& AS_GR		645404						
ANR	645934	Symbol	& AS_BIT_NOT		645404						
ANR	645935	Symbol	currentLine . find		645404						
ANR	645936	Symbol	currentChar		645404						
ANR	645937	Symbol	peekNextChar		645404						
ANR	645938	Symbol	* newOperator		645404						
ANR	645939	Symbol	shouldPad		645404						
ANR	645940	Symbol	isInAsmOneLine		645404						
ANR	645941	Symbol	isInCase		645404						
ANR	645942	Symbol	& AS_LS		645404						
ANR	645943	Symbol	isInObjCSelector		645404						
ANR	645944	Symbol	& AS_NOT		645404						
ANR	645945	Symbol	nullptr		645404						
ANR	645946	Symbol	newOperator -> length		645404						
ANR	645947	Symbol	previousNonWSChar		645404						
ANR	645948	Symbol	nextNonWSChar		645404						
ANR	645949	Symbol	isInExponent		645404						
ANR	645950	Symbol	foundQuestionMark		645404						
ANR	645951	Symbol	isSharpStyle		645404						
ANR	645952	Symbol	isUnaryOperator		645404						
ANR	645953	Symbol	& AS_PLUS		645404						
ANR	645954	Symbol	string :: npos		645404						
ANR	645955	Symbol	& AS_ARROW		645404						
ANR	645956	Symbol	AS_SEMICOLON		645404						
ANR	645957	Symbol	& AS_QUESTION		645404						
ANR	645958	Symbol	isBeforeAnyComment		645404						
ANR	645959	Symbol	charNum		645404						
ANR	645960	Symbol	currentLine . compare		645404						
ANR	645961	Symbol	currentLine		645404						
ANR	645962	Symbol	isInObjCMethodDefinition		645404						
ANR	645963	Symbol	& AS_SCOPE_RESOLUTION		645404						
ANR	645964	Symbol	& AS_MULT		645404						
ANR	645965	Symbol	isInObjCInterface		645404						
ANR	645966	Symbol	isInAsm		645404						
ANR	645967	Symbol	isImmediatelyPostTemplate		645404						
ANR	645968	Symbol	& AS_PLUS_PLUS		645404						
ANR	645969	Symbol	currentHeader		645404						
ANR	645970	Symbol	ASBase :: peekNextChar		645404						
ANR	645971	Symbol	& AS_GCC_MIN_ASSIGN		645404						
ANR	645972	Symbol	newOperator		645404						
ANR	645973	Symbol	shouldPadOperators		645404						
ANR	645974	Symbol	isJavaStyle		645404						
ANR	645975	Symbol	AS_SCOPE_RESOLUTION		645404						
ANR	645976	Symbol	squareBracketCount		645404						
ANR	645977	Symbol	& AS_MINUS		645404						
ANR	645978	Function	ASFormatter :: formatPointerOrReference	3850:0:111137:112657							
ANR	645979	FunctionDef	ASFormatter :: formatPointerOrReference ()		645978	0					
ANR	645980	CompoundStatement		3851:0:111182:112657	645978	0					
ANR	645981	ExpressionStatement	assert ( currentChar == '*' || currentChar == '&' || currentChar == '^' )	3852:1:111185:111255	645978	0	True				
ANR	645982	CallExpression	assert ( currentChar == '*' || currentChar == '&' || currentChar == '^' )		645978	0					
ANR	645983	Callee	assert		645978	0					
ANR	645984	Identifier	assert		645978	0					
ANR	645985	ArgumentList	currentChar == '*' || currentChar == '&' || currentChar == '^'		645978	1					
ANR	645986	Argument	currentChar == '*' || currentChar == '&' || currentChar == '^'		645978	0					
ANR	645987	OrExpression	currentChar == '*' || currentChar == '&' || currentChar == '^'		645978	0		||			
ANR	645988	EqualityExpression	currentChar == '*'		645978	0		==			
ANR	645989	Identifier	currentChar		645978	0					
ANR	645990	PrimaryExpression	'*'		645978	1					
ANR	645991	OrExpression	currentChar == '&' || currentChar == '^'		645978	1		||			
ANR	645992	EqualityExpression	currentChar == '&'		645978	0		==			
ANR	645993	Identifier	currentChar		645978	0					
ANR	645994	PrimaryExpression	'&'		645978	1					
ANR	645995	EqualityExpression	currentChar == '^'		645978	1		==			
ANR	645996	Identifier	currentChar		645978	0					
ANR	645997	PrimaryExpression	'^'		645978	1					
ANR	645998	ExpressionStatement	assert ( ! isJavaStyle ( ) )	3853:1:111258:111280	645978	1	True				
ANR	645999	CallExpression	assert ( ! isJavaStyle ( ) )		645978	0					
ANR	646000	Callee	assert		645978	0					
ANR	646001	Identifier	assert		645978	0					
ANR	646002	ArgumentList	! isJavaStyle ( )		645978	1					
ANR	646003	Argument	! isJavaStyle ( )		645978	0					
ANR	646004	UnaryOperationExpression	! isJavaStyle ( )		645978	0					
ANR	646005	UnaryOperator	!		645978	0					
ANR	646006	CallExpression	isJavaStyle ( )		645978	1					
ANR	646007	Callee	isJavaStyle		645978	0					
ANR	646008	Identifier	isJavaStyle		645978	0					
ANR	646009	ArgumentList			645978	1					
ANR	646010	IdentifierDeclStatement	int pa = pointerAlignment ;	3855:1:111284:111309	645978	2	True				
ANR	646011	IdentifierDecl	pa = pointerAlignment		645978	0					
ANR	646012	IdentifierDeclType	int		645978	0					
ANR	646013	Identifier	pa		645978	1					
ANR	646014	AssignmentExpression	pa = pointerAlignment		645978	2		=			
ANR	646015	Identifier	pointerAlignment		645978	0					
ANR	646016	Identifier	pointerAlignment		645978	1					
ANR	646017	IdentifierDeclStatement	int ra = referenceAlignment ;	3856:1:111312:111339	645978	3	True				
ANR	646018	IdentifierDecl	ra = referenceAlignment		645978	0					
ANR	646019	IdentifierDeclType	int		645978	0					
ANR	646020	Identifier	ra		645978	1					
ANR	646021	AssignmentExpression	ra = referenceAlignment		645978	2		=			
ANR	646022	Identifier	referenceAlignment		645978	0					
ANR	646023	Identifier	referenceAlignment		645978	1					
ANR	646024	IdentifierDeclStatement	int itemAlignment = ( currentChar == '*' || currentChar == '^' ) ? pa : ( ( ra == REF_SAME_AS_PTR ) ? pa : ra ) ;	3857:1:111342:111447	645978	4	True				
ANR	646025	IdentifierDecl	itemAlignment = ( currentChar == '*' || currentChar == '^' ) ? pa : ( ( ra == REF_SAME_AS_PTR ) ? pa : ra )		645978	0					
ANR	646026	IdentifierDeclType	int		645978	0					
ANR	646027	Identifier	itemAlignment		645978	1					
ANR	646028	AssignmentExpression	itemAlignment = ( currentChar == '*' || currentChar == '^' ) ? pa : ( ( ra == REF_SAME_AS_PTR ) ? pa : ra )		645978	2		=			
ANR	646029	Identifier	itemAlignment		645978	0					
ANR	646030	ConditionalExpression	( currentChar == '*' || currentChar == '^' ) ? pa : ( ( ra == REF_SAME_AS_PTR ) ? pa : ra )		645978	1					
ANR	646031	Condition	currentChar == '*' || currentChar == '^'		645978	0					
ANR	646032	OrExpression	currentChar == '*' || currentChar == '^'		645978	0		||			
ANR	646033	EqualityExpression	currentChar == '*'		645978	0		==			
ANR	646034	Identifier	currentChar		645978	0					
ANR	646035	PrimaryExpression	'*'		645978	1					
ANR	646036	EqualityExpression	currentChar == '^'		645978	1		==			
ANR	646037	Identifier	currentChar		645978	0					
ANR	646038	PrimaryExpression	'^'		645978	1					
ANR	646039	Identifier	pa		645978	1					
ANR	646040	ConditionalExpression	( ra == REF_SAME_AS_PTR ) ? pa : ra		645978	2					
ANR	646041	Condition	ra == REF_SAME_AS_PTR		645978	0					
ANR	646042	EqualityExpression	ra == REF_SAME_AS_PTR		645978	0		==			
ANR	646043	Identifier	ra		645978	0					
ANR	646044	Identifier	REF_SAME_AS_PTR		645978	1					
ANR	646045	Identifier	pa		645978	1					
ANR	646046	Identifier	ra		645978	2					
ANR	646047	IdentifierDeclStatement	int ptrLength = 1 ;	3860:1:111475:111492	645978	5	True				
ANR	646048	IdentifierDecl	ptrLength = 1		645978	0					
ANR	646049	IdentifierDeclType	int		645978	0					
ANR	646050	Identifier	ptrLength		645978	1					
ANR	646051	AssignmentExpression	ptrLength = 1		645978	2		=			
ANR	646052	Identifier	ptrLength		645978	0					
ANR	646053	PrimaryExpression	1		645978	1					
ANR	646054	IdentifierDeclStatement	char peekedChar = peekNextChar ( ) ;	3861:1:111495:111527	645978	6	True				
ANR	646055	IdentifierDecl	peekedChar = peekNextChar ( )		645978	0					
ANR	646056	IdentifierDeclType	char		645978	0					
ANR	646057	Identifier	peekedChar		645978	1					
ANR	646058	AssignmentExpression	peekedChar = peekNextChar ( )		645978	2		=			
ANR	646059	Identifier	peekedChar		645978	0					
ANR	646060	CallExpression	peekNextChar ( )		645978	1					
ANR	646061	Callee	peekNextChar		645978	0					
ANR	646062	Identifier	peekNextChar		645978	0					
ANR	646063	ArgumentList			645978	1					
ANR	646064	IfStatement	if ( ( currentChar == '*' && peekedChar == '*' ) || ( currentChar == '&' && peekedChar == '&' ) )		645978	7					
ANR	646065	Condition	( currentChar == '*' && peekedChar == '*' ) || ( currentChar == '&' && peekedChar == '&' )	3862:5:111534:111628	645978	0	True				
ANR	646066	OrExpression	( currentChar == '*' && peekedChar == '*' ) || ( currentChar == '&' && peekedChar == '&' )		645978	0		||			
ANR	646067	AndExpression	currentChar == '*' && peekedChar == '*'		645978	0		&&			
ANR	646068	EqualityExpression	currentChar == '*'		645978	0		==			
ANR	646069	Identifier	currentChar		645978	0					
ANR	646070	PrimaryExpression	'*'		645978	1					
ANR	646071	EqualityExpression	peekedChar == '*'		645978	1		==			
ANR	646072	Identifier	peekedChar		645978	0					
ANR	646073	PrimaryExpression	'*'		645978	1					
ANR	646074	AndExpression	currentChar == '&' && peekedChar == '&'		645978	1		&&			
ANR	646075	EqualityExpression	currentChar == '&'		645978	0		==			
ANR	646076	Identifier	currentChar		645978	0					
ANR	646077	PrimaryExpression	'&'		645978	1					
ANR	646078	EqualityExpression	peekedChar == '&'		645978	1		==			
ANR	646079	Identifier	peekedChar		645978	0					
ANR	646080	PrimaryExpression	'&'		645978	1					
ANR	646081	CompoundStatement		16:2:470:537	645978	1					
ANR	646082	ExpressionStatement	ptrLength = 2	3865:2:111636:111649	645978	0	True				
ANR	646083	AssignmentExpression	ptrLength = 2		645978	0		=			
ANR	646084	Identifier	ptrLength		645978	0					
ANR	646085	PrimaryExpression	2		645978	1					
ANR	646086	IdentifierDeclStatement	"size_t nextChar = currentLine . find_first_not_of ( "" \\t"" , charNum + 2 ) ;"	3866:2:111653:111720	645978	1	True				
ANR	646087	IdentifierDecl	"nextChar = currentLine . find_first_not_of ( "" \\t"" , charNum + 2 )"		645978	0					
ANR	646088	IdentifierDeclType	size_t		645978	0					
ANR	646089	Identifier	nextChar		645978	1					
ANR	646090	AssignmentExpression	"nextChar = currentLine . find_first_not_of ( "" \\t"" , charNum + 2 )"		645978	2		=			
ANR	646091	Identifier	nextChar		645978	0					
ANR	646092	CallExpression	"currentLine . find_first_not_of ( "" \\t"" , charNum + 2 )"		645978	1					
ANR	646093	Callee	currentLine . find_first_not_of		645978	0					
ANR	646094	MemberAccess	currentLine . find_first_not_of		645978	0					
ANR	646095	Identifier	currentLine		645978	0					
ANR	646096	Identifier	find_first_not_of		645978	1					
ANR	646097	ArgumentList	""" \\t"""		645978	1					
ANR	646098	Argument	""" \\t"""		645978	0					
ANR	646099	PrimaryExpression	""" \\t"""		645978	0					
ANR	646100	Argument	charNum + 2		645978	1					
ANR	646101	AdditiveExpression	charNum + 2		645978	0		+			
ANR	646102	Identifier	charNum		645978	0					
ANR	646103	PrimaryExpression	2		645978	1					
ANR	646104	IfStatement	if ( nextChar == string :: npos )		645978	2					
ANR	646105	Condition	nextChar == string :: npos	3867:6:111728:111751	645978	0	True				
ANR	646106	EqualityExpression	nextChar == string :: npos		645978	0		==			
ANR	646107	Identifier	nextChar		645978	0					
ANR	646108	Identifier	string :: npos		645978	1					
ANR	646109	ExpressionStatement	peekedChar = ' '	3868:3:111757:111773	645978	1	True				
ANR	646110	AssignmentExpression	peekedChar = ' '		645978	0		=			
ANR	646111	Identifier	peekedChar		645978	0					
ANR	646112	PrimaryExpression	' '		645978	1					
ANR	646113	ElseStatement	else		645978	0					
ANR	646114	ExpressionStatement	peekedChar = currentLine [ nextChar ]	3870:3:111785:111819	645978	0	True				
ANR	646115	AssignmentExpression	peekedChar = currentLine [ nextChar ]		645978	0		=			
ANR	646116	Identifier	peekedChar		645978	0					
ANR	646117	ArrayIndexing	currentLine [ nextChar ]		645978	1					
ANR	646118	Identifier	currentLine		645978	0					
ANR	646119	Identifier	nextChar		645978	1					
ANR	646120	IfStatement	"if ( peekedChar == ')' || peekedChar == '>' || peekedChar == ',' )"		645978	8					
ANR	646121	Condition	"peekedChar == ')' || peekedChar == '>' || peekedChar == ','"	3873:5:111848:111906	645978	0	True				
ANR	646122	OrExpression	"peekedChar == ')' || peekedChar == '>' || peekedChar == ','"		645978	0		||			
ANR	646123	EqualityExpression	peekedChar == ')'		645978	0		==			
ANR	646124	Identifier	peekedChar		645978	0					
ANR	646125	PrimaryExpression	')'		645978	1					
ANR	646126	OrExpression	"peekedChar == '>' || peekedChar == ','"		645978	1		||			
ANR	646127	EqualityExpression	peekedChar == '>'		645978	0		==			
ANR	646128	Identifier	peekedChar		645978	0					
ANR	646129	PrimaryExpression	'>'		645978	1					
ANR	646130	EqualityExpression	"peekedChar == ','"		645978	1		==			
ANR	646131	Identifier	peekedChar		645978	0					
ANR	646132	PrimaryExpression	"','"		645978	1					
ANR	646133	CompoundStatement		24:1:727:727	645978	1					
ANR	646134	ExpressionStatement	formatPointerOrReferenceCast ( )	3875:2:111914:111944	645978	0	True				
ANR	646135	CallExpression	formatPointerOrReferenceCast ( )		645978	0					
ANR	646136	Callee	formatPointerOrReferenceCast		645978	0					
ANR	646137	Identifier	formatPointerOrReferenceCast		645978	0					
ANR	646138	ArgumentList			645978	1					
ANR	646139	ReturnStatement	return ;	3876:2:111948:111954	645978	1	True				
ANR	646140	IfStatement	if ( charNum > 0 && ! isWhiteSpace ( currentLine [ charNum - 1 ] ) && formattedLine . length ( ) > 0 && isWhiteSpace ( formattedLine [ formattedLine . length ( ) - 1 ] ) )		645978	9					
ANR	646141	Condition	charNum > 0 && ! isWhiteSpace ( currentLine [ charNum - 1 ] ) && formattedLine . length ( ) > 0 && isWhiteSpace ( formattedLine [ formattedLine . length ( ) - 1 ] )	3880:5:112008:112177	645978	0	True				
ANR	646142	AndExpression	charNum > 0 && ! isWhiteSpace ( currentLine [ charNum - 1 ] ) && formattedLine . length ( ) > 0 && isWhiteSpace ( formattedLine [ formattedLine . length ( ) - 1 ] )		645978	0		&&			
ANR	646143	RelationalExpression	charNum > 0		645978	0		>			
ANR	646144	Identifier	charNum		645978	0					
ANR	646145	PrimaryExpression	0		645978	1					
ANR	646146	AndExpression	! isWhiteSpace ( currentLine [ charNum - 1 ] ) && formattedLine . length ( ) > 0 && isWhiteSpace ( formattedLine [ formattedLine . length ( ) - 1 ] )		645978	1		&&			
ANR	646147	UnaryOperationExpression	! isWhiteSpace ( currentLine [ charNum - 1 ] )		645978	0					
ANR	646148	UnaryOperator	!		645978	0					
ANR	646149	CallExpression	isWhiteSpace ( currentLine [ charNum - 1 ] )		645978	1					
ANR	646150	Callee	isWhiteSpace		645978	0					
ANR	646151	Identifier	isWhiteSpace		645978	0					
ANR	646152	ArgumentList	currentLine [ charNum - 1 ]		645978	1					
ANR	646153	Argument	currentLine [ charNum - 1 ]		645978	0					
ANR	646154	ArrayIndexing	currentLine [ charNum - 1 ]		645978	0					
ANR	646155	Identifier	currentLine		645978	0					
ANR	646156	AdditiveExpression	charNum - 1		645978	1		-			
ANR	646157	Identifier	charNum		645978	0					
ANR	646158	PrimaryExpression	1		645978	1					
ANR	646159	AndExpression	formattedLine . length ( ) > 0 && isWhiteSpace ( formattedLine [ formattedLine . length ( ) - 1 ] )		645978	1		&&			
ANR	646160	RelationalExpression	formattedLine . length ( ) > 0		645978	0		>			
ANR	646161	CallExpression	formattedLine . length ( )		645978	0					
ANR	646162	Callee	formattedLine . length		645978	0					
ANR	646163	MemberAccess	formattedLine . length		645978	0					
ANR	646164	Identifier	formattedLine		645978	0					
ANR	646165	Identifier	length		645978	1					
ANR	646166	ArgumentList			645978	1					
ANR	646167	PrimaryExpression	0		645978	1					
ANR	646168	CallExpression	isWhiteSpace ( formattedLine [ formattedLine . length ( ) - 1 ] )		645978	1					
ANR	646169	Callee	isWhiteSpace		645978	0					
ANR	646170	Identifier	isWhiteSpace		645978	0					
ANR	646171	ArgumentList	formattedLine [ formattedLine . length ( ) - 1 ]		645978	1					
ANR	646172	Argument	formattedLine [ formattedLine . length ( ) - 1 ]		645978	0					
ANR	646173	ArrayIndexing	formattedLine [ formattedLine . length ( ) - 1 ]		645978	0					
ANR	646174	Identifier	formattedLine		645978	0					
ANR	646175	AdditiveExpression	formattedLine . length ( ) - 1		645978	1		-			
ANR	646176	CallExpression	formattedLine . length ( )		645978	0					
ANR	646177	Callee	formattedLine . length		645978	0					
ANR	646178	MemberAccess	formattedLine . length		645978	0					
ANR	646179	Identifier	formattedLine		645978	0					
ANR	646180	Identifier	length		645978	1					
ANR	646181	ArgumentList			645978	1					
ANR	646182	PrimaryExpression	1		645978	1					
ANR	646183	CompoundStatement		34:1:998:998	645978	1					
ANR	646184	ExpressionStatement	formattedLine . erase ( formattedLine . length ( ) - 1 )	3885:2:112185:112232	645978	0	True				
ANR	646185	CallExpression	formattedLine . erase ( formattedLine . length ( ) - 1 )		645978	0					
ANR	646186	Callee	formattedLine . erase		645978	0					
ANR	646187	MemberAccess	formattedLine . erase		645978	0					
ANR	646188	Identifier	formattedLine		645978	0					
ANR	646189	Identifier	erase		645978	1					
ANR	646190	ArgumentList	formattedLine . length ( ) - 1		645978	1					
ANR	646191	Argument	formattedLine . length ( ) - 1		645978	0					
ANR	646192	AdditiveExpression	formattedLine . length ( ) - 1		645978	0		-			
ANR	646193	CallExpression	formattedLine . length ( )		645978	0					
ANR	646194	Callee	formattedLine . length		645978	0					
ANR	646195	MemberAccess	formattedLine . length		645978	0					
ANR	646196	Identifier	formattedLine		645978	0					
ANR	646197	Identifier	length		645978	1					
ANR	646198	ArgumentList			645978	1					
ANR	646199	PrimaryExpression	1		645978	1					
ANR	646200	ExpressionStatement	spacePadNum --	3886:2:112236:112249	645978	1	True				
ANR	646201	PostIncDecOperationExpression	spacePadNum --		645978	0					
ANR	646202	Identifier	spacePadNum		645978	0					
ANR	646203	IncDec	--		645978	1					
ANR	646204	IfStatement	if ( itemAlignment == PTR_ALIGN_TYPE )		645978	10					
ANR	646205	Condition	itemAlignment == PTR_ALIGN_TYPE	3889:5:112260:112290	645978	0	True				
ANR	646206	EqualityExpression	itemAlignment == PTR_ALIGN_TYPE		645978	0		==			
ANR	646207	Identifier	itemAlignment		645978	0					
ANR	646208	Identifier	PTR_ALIGN_TYPE		645978	1					
ANR	646209	CompoundStatement		40:1:1111:1111	645978	1					
ANR	646210	ExpressionStatement	formatPointerOrReferenceToType ( )	3891:2:112298:112330	645978	0	True				
ANR	646211	CallExpression	formatPointerOrReferenceToType ( )		645978	0					
ANR	646212	Callee	formatPointerOrReferenceToType		645978	0					
ANR	646213	Identifier	formatPointerOrReferenceToType		645978	0					
ANR	646214	ArgumentList			645978	1					
ANR	646215	ElseStatement	else		645978	0					
ANR	646216	IfStatement	if ( itemAlignment == PTR_ALIGN_MIDDLE )		645978	0					
ANR	646217	Condition	itemAlignment == PTR_ALIGN_MIDDLE	3893:10:112345:112377	645978	0	True				
ANR	646218	EqualityExpression	itemAlignment == PTR_ALIGN_MIDDLE		645978	0		==			
ANR	646219	Identifier	itemAlignment		645978	0					
ANR	646220	Identifier	PTR_ALIGN_MIDDLE		645978	1					
ANR	646221	CompoundStatement		44:1:1198:1198	645978	1					
ANR	646222	ExpressionStatement	formatPointerOrReferenceToMiddle ( )	3895:2:112385:112419	645978	0	True				
ANR	646223	CallExpression	formatPointerOrReferenceToMiddle ( )		645978	0					
ANR	646224	Callee	formatPointerOrReferenceToMiddle		645978	0					
ANR	646225	Identifier	formatPointerOrReferenceToMiddle		645978	0					
ANR	646226	ArgumentList			645978	1					
ANR	646227	ElseStatement	else		645978	0					
ANR	646228	IfStatement	if ( itemAlignment == PTR_ALIGN_NAME )		645978	0					
ANR	646229	Condition	itemAlignment == PTR_ALIGN_NAME	3897:10:112434:112464	645978	0	True				
ANR	646230	EqualityExpression	itemAlignment == PTR_ALIGN_NAME		645978	0		==			
ANR	646231	Identifier	itemAlignment		645978	0					
ANR	646232	Identifier	PTR_ALIGN_NAME		645978	1					
ANR	646233	CompoundStatement		48:1:1285:1285	645978	1					
ANR	646234	ExpressionStatement	formatPointerOrReferenceToName ( )	3899:2:112472:112504	645978	0	True				
ANR	646235	CallExpression	formatPointerOrReferenceToName ( )		645978	0					
ANR	646236	Callee	formatPointerOrReferenceToName		645978	0					
ANR	646237	Identifier	formatPointerOrReferenceToName		645978	0					
ANR	646238	ArgumentList			645978	1					
ANR	646239	ElseStatement	else		645978	0					
ANR	646240	CompoundStatement		52:1:1371:1371	645978	0					
ANR	646241	ExpressionStatement	"formattedLine . append ( ptrLength , currentChar )"	3903:2:112558:112602	645978	0	True				
ANR	646242	CallExpression	"formattedLine . append ( ptrLength , currentChar )"		645978	0					
ANR	646243	Callee	formattedLine . append		645978	0					
ANR	646244	MemberAccess	formattedLine . append		645978	0					
ANR	646245	Identifier	formattedLine		645978	0					
ANR	646246	Identifier	append		645978	1					
ANR	646247	ArgumentList	ptrLength		645978	1					
ANR	646248	Argument	ptrLength		645978	0					
ANR	646249	Identifier	ptrLength		645978	0					
ANR	646250	Argument	currentChar		645978	1					
ANR	646251	Identifier	currentChar		645978	0					
ANR	646252	IfStatement	if ( ptrLength > 1 )		645978	1					
ANR	646253	Condition	ptrLength > 1	3904:6:112610:112622	645978	0	True				
ANR	646254	RelationalExpression	ptrLength > 1		645978	0		>			
ANR	646255	Identifier	ptrLength		645978	0					
ANR	646256	PrimaryExpression	1		645978	1					
ANR	646257	ExpressionStatement	goForward ( ptrLength - 1 )	3905:3:112628:112652	645978	1	True				
ANR	646258	CallExpression	goForward ( ptrLength - 1 )		645978	0					
ANR	646259	Callee	goForward		645978	0					
ANR	646260	Identifier	goForward		645978	0					
ANR	646261	ArgumentList	ptrLength - 1		645978	1					
ANR	646262	Argument	ptrLength - 1		645978	0					
ANR	646263	AdditiveExpression	ptrLength - 1		645978	0		-			
ANR	646264	Identifier	ptrLength		645978	0					
ANR	646265	PrimaryExpression	1		645978	1					
ANR	646266	ReturnType	void		645978	1					
ANR	646267	Identifier	ASFormatter :: formatPointerOrReference		645978	2					
ANR	646268	ParameterList			645978	3					
ANR	646269	CFGEntryNode	ENTRY		645978		True				
ANR	646270	CFGExitNode	EXIT		645978		True				
ANR	646271	Symbol	* formattedLine		645978						
ANR	646272	Symbol	ptrLength		645978						
ANR	646273	Symbol	string :: npos		645978						
ANR	646274	Symbol	* formattedLine . length		645978						
ANR	646275	Symbol	isWhiteSpace		645978						
ANR	646276	Symbol	* currentLine		645978						
ANR	646277	Symbol	REF_SAME_AS_PTR		645978						
ANR	646278	Symbol	charNum		645978						
ANR	646279	Symbol	peekedChar		645978						
ANR	646280	Symbol	pointerAlignment		645978						
ANR	646281	Symbol	itemAlignment		645978						
ANR	646282	Symbol	currentLine		645978						
ANR	646283	Symbol	currentChar		645978						
ANR	646284	Symbol	peekNextChar		645978						
ANR	646285	Symbol	PTR_ALIGN_NAME		645978						
ANR	646286	Symbol	* nextChar		645978						
ANR	646287	Symbol	spacePadNum		645978						
ANR	646288	Symbol	referenceAlignment		645978						
ANR	646289	Symbol	currentLine . find_first_not_of		645978						
ANR	646290	Symbol	ra		645978						
ANR	646291	Symbol	formattedLine		645978						
ANR	646292	Symbol	PTR_ALIGN_TYPE		645978						
ANR	646293	Symbol	pa		645978						
ANR	646294	Symbol	formattedLine . length		645978						
ANR	646295	Symbol	* charNum		645978						
ANR	646296	Symbol	isJavaStyle		645978						
ANR	646297	Symbol	nextChar		645978						
ANR	646298	Symbol	PTR_ALIGN_MIDDLE		645978						
ANR	646299	Function	ASFormatter :: formatPointerOrReferenceToType	3912:0:112718:114347							
ANR	646300	FunctionDef	ASFormatter :: formatPointerOrReferenceToType ()		646299	0					
ANR	646301	CompoundStatement		3913:0:112769:114347	646299	0					
ANR	646302	ExpressionStatement	assert ( currentChar == '*' || currentChar == '&' || currentChar == '^' )	3914:1:112772:112842	646299	0	True				
ANR	646303	CallExpression	assert ( currentChar == '*' || currentChar == '&' || currentChar == '^' )		646299	0					
ANR	646304	Callee	assert		646299	0					
ANR	646305	Identifier	assert		646299	0					
ANR	646306	ArgumentList	currentChar == '*' || currentChar == '&' || currentChar == '^'		646299	1					
ANR	646307	Argument	currentChar == '*' || currentChar == '&' || currentChar == '^'		646299	0					
ANR	646308	OrExpression	currentChar == '*' || currentChar == '&' || currentChar == '^'		646299	0		||			
ANR	646309	EqualityExpression	currentChar == '*'		646299	0		==			
ANR	646310	Identifier	currentChar		646299	0					
ANR	646311	PrimaryExpression	'*'		646299	1					
ANR	646312	OrExpression	currentChar == '&' || currentChar == '^'		646299	1		||			
ANR	646313	EqualityExpression	currentChar == '&'		646299	0		==			
ANR	646314	Identifier	currentChar		646299	0					
ANR	646315	PrimaryExpression	'&'		646299	1					
ANR	646316	EqualityExpression	currentChar == '^'		646299	1		==			
ANR	646317	Identifier	currentChar		646299	0					
ANR	646318	PrimaryExpression	'^'		646299	1					
ANR	646319	ExpressionStatement	assert ( ! isJavaStyle ( ) )	3915:1:112845:112867	646299	1	True				
ANR	646320	CallExpression	assert ( ! isJavaStyle ( ) )		646299	0					
ANR	646321	Callee	assert		646299	0					
ANR	646322	Identifier	assert		646299	0					
ANR	646323	ArgumentList	! isJavaStyle ( )		646299	1					
ANR	646324	Argument	! isJavaStyle ( )		646299	0					
ANR	646325	UnaryOperationExpression	! isJavaStyle ( )		646299	0					
ANR	646326	UnaryOperator	!		646299	0					
ANR	646327	CallExpression	isJavaStyle ( )		646299	1					
ANR	646328	Callee	isJavaStyle		646299	0					
ANR	646329	Identifier	isJavaStyle		646299	0					
ANR	646330	ArgumentList			646299	1					
ANR	646331	IdentifierDeclStatement	bool isOldPRCentered = isPointerOrReferenceCentered ( ) ;	3918:1:112906:112959	646299	2	True				
ANR	646332	IdentifierDecl	isOldPRCentered = isPointerOrReferenceCentered ( )		646299	0					
ANR	646333	IdentifierDeclType	bool		646299	0					
ANR	646334	Identifier	isOldPRCentered		646299	1					
ANR	646335	AssignmentExpression	isOldPRCentered = isPointerOrReferenceCentered ( )		646299	2		=			
ANR	646336	Identifier	isOldPRCentered		646299	0					
ANR	646337	CallExpression	isPointerOrReferenceCentered ( )		646299	1					
ANR	646338	Callee	isPointerOrReferenceCentered		646299	0					
ANR	646339	Identifier	isPointerOrReferenceCentered		646299	0					
ANR	646340	ArgumentList			646299	1					
ANR	646341	IdentifierDeclStatement	"size_t prevCh = formattedLine . find_last_not_of ( "" \\t"" ) ;"	3920:1:112963:113016	646299	3	True				
ANR	646342	IdentifierDecl	"prevCh = formattedLine . find_last_not_of ( "" \\t"" )"		646299	0					
ANR	646343	IdentifierDeclType	size_t		646299	0					
ANR	646344	Identifier	prevCh		646299	1					
ANR	646345	AssignmentExpression	"prevCh = formattedLine . find_last_not_of ( "" \\t"" )"		646299	2		=			
ANR	646346	Identifier	prevCh		646299	0					
ANR	646347	CallExpression	"formattedLine . find_last_not_of ( "" \\t"" )"		646299	1					
ANR	646348	Callee	formattedLine . find_last_not_of		646299	0					
ANR	646349	MemberAccess	formattedLine . find_last_not_of		646299	0					
ANR	646350	Identifier	formattedLine		646299	0					
ANR	646351	Identifier	find_last_not_of		646299	1					
ANR	646352	ArgumentList	""" \\t"""		646299	1					
ANR	646353	Argument	""" \\t"""		646299	0					
ANR	646354	PrimaryExpression	""" \\t"""		646299	0					
ANR	646355	IfStatement	if ( prevCh == string :: npos )		646299	4					
ANR	646356	Condition	prevCh == string :: npos	3921:5:113023:113044	646299	0	True				
ANR	646357	EqualityExpression	prevCh == string :: npos		646299	0		==			
ANR	646358	Identifier	prevCh		646299	0					
ANR	646359	Identifier	string :: npos		646299	1					
ANR	646360	ExpressionStatement	prevCh = 0	3922:2:113049:113059	646299	1	True				
ANR	646361	AssignmentExpression	prevCh = 0		646299	0		=			
ANR	646362	Identifier	prevCh		646299	0					
ANR	646363	PrimaryExpression	0		646299	1					
ANR	646364	IfStatement	if ( formattedLine . length ( ) == 0 || prevCh == formattedLine . length ( ) - 1 )		646299	5					
ANR	646365	Condition	formattedLine . length ( ) == 0 || prevCh == formattedLine . length ( ) - 1	3923:5:113066:113132	646299	0	True				
ANR	646366	OrExpression	formattedLine . length ( ) == 0 || prevCh == formattedLine . length ( ) - 1		646299	0		||			
ANR	646367	EqualityExpression	formattedLine . length ( ) == 0		646299	0		==			
ANR	646368	CallExpression	formattedLine . length ( )		646299	0					
ANR	646369	Callee	formattedLine . length		646299	0					
ANR	646370	MemberAccess	formattedLine . length		646299	0					
ANR	646371	Identifier	formattedLine		646299	0					
ANR	646372	Identifier	length		646299	1					
ANR	646373	ArgumentList			646299	1					
ANR	646374	PrimaryExpression	0		646299	1					
ANR	646375	EqualityExpression	prevCh == formattedLine . length ( ) - 1		646299	1		==			
ANR	646376	Identifier	prevCh		646299	0					
ANR	646377	AdditiveExpression	formattedLine . length ( ) - 1		646299	1		-			
ANR	646378	CallExpression	formattedLine . length ( )		646299	0					
ANR	646379	Callee	formattedLine . length		646299	0					
ANR	646380	MemberAccess	formattedLine . length		646299	0					
ANR	646381	Identifier	formattedLine		646299	0					
ANR	646382	Identifier	length		646299	1					
ANR	646383	ArgumentList			646299	1					
ANR	646384	PrimaryExpression	1		646299	1					
ANR	646385	ExpressionStatement	"formattedLine . append ( 1 , currentChar )"	3924:2:113137:113173	646299	1	True				
ANR	646386	CallExpression	"formattedLine . append ( 1 , currentChar )"		646299	0					
ANR	646387	Callee	formattedLine . append		646299	0					
ANR	646388	MemberAccess	formattedLine . append		646299	0					
ANR	646389	Identifier	formattedLine		646299	0					
ANR	646390	Identifier	append		646299	1					
ANR	646391	ArgumentList	1		646299	1					
ANR	646392	Argument	1		646299	0					
ANR	646393	PrimaryExpression	1		646299	0					
ANR	646394	Argument	currentChar		646299	1					
ANR	646395	Identifier	currentChar		646299	0					
ANR	646396	ElseStatement	else		646299	0					
ANR	646397	CompoundStatement		17:2:526:579	646299	0					
ANR	646398	IdentifierDeclStatement	"string charSave = formattedLine . substr ( prevCh + 1 , 1 ) ;"	3929:2:113296:113349	646299	0	True				
ANR	646399	IdentifierDecl	"charSave = formattedLine . substr ( prevCh + 1 , 1 )"		646299	0					
ANR	646400	IdentifierDeclType	string		646299	0					
ANR	646401	Identifier	charSave		646299	1					
ANR	646402	AssignmentExpression	"charSave = formattedLine . substr ( prevCh + 1 , 1 )"		646299	2		=			
ANR	646403	Identifier	charSave		646299	0					
ANR	646404	CallExpression	"formattedLine . substr ( prevCh + 1 , 1 )"		646299	1					
ANR	646405	Callee	formattedLine . substr		646299	0					
ANR	646406	MemberAccess	formattedLine . substr		646299	0					
ANR	646407	Identifier	formattedLine		646299	0					
ANR	646408	Identifier	substr		646299	1					
ANR	646409	ArgumentList	prevCh + 1		646299	1					
ANR	646410	Argument	prevCh + 1		646299	0					
ANR	646411	AdditiveExpression	prevCh + 1		646299	0		+			
ANR	646412	Identifier	prevCh		646299	0					
ANR	646413	PrimaryExpression	1		646299	1					
ANR	646414	Argument	1		646299	1					
ANR	646415	PrimaryExpression	1		646299	0					
ANR	646416	ExpressionStatement	formattedLine [ prevCh + 1 ] = currentChar	3930:2:113353:113392	646299	1	True				
ANR	646417	AssignmentExpression	formattedLine [ prevCh + 1 ] = currentChar		646299	0		=			
ANR	646418	ArrayIndexing	formattedLine [ prevCh + 1 ]		646299	0					
ANR	646419	Identifier	formattedLine		646299	0					
ANR	646420	AdditiveExpression	prevCh + 1		646299	1		+			
ANR	646421	Identifier	prevCh		646299	0					
ANR	646422	PrimaryExpression	1		646299	1					
ANR	646423	Identifier	currentChar		646299	1					
ANR	646424	ExpressionStatement	formattedLine . append ( charSave )	3931:2:113396:113426	646299	2	True				
ANR	646425	CallExpression	formattedLine . append ( charSave )		646299	0					
ANR	646426	Callee	formattedLine . append		646299	0					
ANR	646427	MemberAccess	formattedLine . append		646299	0					
ANR	646428	Identifier	formattedLine		646299	0					
ANR	646429	Identifier	append		646299	1					
ANR	646430	ArgumentList	charSave		646299	1					
ANR	646431	Argument	charSave		646299	0					
ANR	646432	Identifier	charSave		646299	0					
ANR	646433	IfStatement	"if ( isSequenceReached ( ""**"" ) || isSequenceReached ( ""&&"" ) )"		646299	6					
ANR	646434	Condition	"isSequenceReached ( ""**"" ) || isSequenceReached ( ""&&"" )"	3933:5:113436:113485	646299	0	True				
ANR	646435	OrExpression	"isSequenceReached ( ""**"" ) || isSequenceReached ( ""&&"" )"		646299	0		||			
ANR	646436	CallExpression	"isSequenceReached ( ""**"" )"		646299	0					
ANR	646437	Callee	isSequenceReached		646299	0					
ANR	646438	Identifier	isSequenceReached		646299	0					
ANR	646439	ArgumentList	"""**"""		646299	1					
ANR	646440	Argument	"""**"""		646299	0					
ANR	646441	PrimaryExpression	"""**"""		646299	0					
ANR	646442	CallExpression	"isSequenceReached ( ""&&"" )"		646299	1					
ANR	646443	Callee	isSequenceReached		646299	0					
ANR	646444	Identifier	isSequenceReached		646299	0					
ANR	646445	ArgumentList	"""&&"""		646299	1					
ANR	646446	Argument	"""&&"""		646299	0					
ANR	646447	PrimaryExpression	"""&&"""		646299	0					
ANR	646448	CompoundStatement		22:1:719:719	646299	1					
ANR	646449	IfStatement	if ( formattedLine . length ( ) == 1 )		646299	0					
ANR	646450	Condition	formattedLine . length ( ) == 1	3935:6:113497:113523	646299	0	True				
ANR	646451	EqualityExpression	formattedLine . length ( ) == 1		646299	0		==			
ANR	646452	CallExpression	formattedLine . length ( )		646299	0					
ANR	646453	Callee	formattedLine . length		646299	0					
ANR	646454	MemberAccess	formattedLine . length		646299	0					
ANR	646455	Identifier	formattedLine		646299	0					
ANR	646456	Identifier	length		646299	1					
ANR	646457	ArgumentList			646299	1					
ANR	646458	PrimaryExpression	1		646299	1					
ANR	646459	ExpressionStatement	"formattedLine . append ( 1 , currentChar )"	3936:3:113529:113565	646299	1	True				
ANR	646460	CallExpression	"formattedLine . append ( 1 , currentChar )"		646299	0					
ANR	646461	Callee	formattedLine . append		646299	0					
ANR	646462	MemberAccess	formattedLine . append		646299	0					
ANR	646463	Identifier	formattedLine		646299	0					
ANR	646464	Identifier	append		646299	1					
ANR	646465	ArgumentList	1		646299	1					
ANR	646466	Argument	1		646299	0					
ANR	646467	PrimaryExpression	1		646299	0					
ANR	646468	Argument	currentChar		646299	1					
ANR	646469	Identifier	currentChar		646299	0					
ANR	646470	ElseStatement	else		646299	0					
ANR	646471	ExpressionStatement	"formattedLine . insert ( prevCh + 2 , 1 , currentChar )"	3938:3:113577:113625	646299	0	True				
ANR	646472	CallExpression	"formattedLine . insert ( prevCh + 2 , 1 , currentChar )"		646299	0					
ANR	646473	Callee	formattedLine . insert		646299	0					
ANR	646474	MemberAccess	formattedLine . insert		646299	0					
ANR	646475	Identifier	formattedLine		646299	0					
ANR	646476	Identifier	insert		646299	1					
ANR	646477	ArgumentList	prevCh + 2		646299	1					
ANR	646478	Argument	prevCh + 2		646299	0					
ANR	646479	AdditiveExpression	prevCh + 2		646299	0		+			
ANR	646480	Identifier	prevCh		646299	0					
ANR	646481	PrimaryExpression	2		646299	1					
ANR	646482	Argument	1		646299	1					
ANR	646483	PrimaryExpression	1		646299	0					
ANR	646484	Argument	currentChar		646299	2					
ANR	646485	Identifier	currentChar		646299	0					
ANR	646486	ExpressionStatement	goForward ( 1 )	3939:2:113629:113641	646299	1	True				
ANR	646487	CallExpression	goForward ( 1 )		646299	0					
ANR	646488	Callee	goForward		646299	0					
ANR	646489	Identifier	goForward		646299	0					
ANR	646490	ArgumentList	1		646299	1					
ANR	646491	Argument	1		646299	0					
ANR	646492	PrimaryExpression	1		646299	0					
ANR	646493	IfStatement	if ( charNum < ( int ) currentLine . length ( ) - 1 && ! isWhiteSpace ( currentLine [ charNum + 1 ] ) && currentLine [ charNum + 1 ] != ')' )		646299	7					
ANR	646494	Condition	charNum < ( int ) currentLine . length ( ) - 1 && ! isWhiteSpace ( currentLine [ charNum + 1 ] ) && currentLine [ charNum + 1 ] != ')'	3942:5:113686:113821	646299	0	True				
ANR	646495	AndExpression	charNum < ( int ) currentLine . length ( ) - 1 && ! isWhiteSpace ( currentLine [ charNum + 1 ] ) && currentLine [ charNum + 1 ] != ')'		646299	0		&&			
ANR	646496	RelationalExpression	charNum < ( int ) currentLine . length ( ) - 1		646299	0		<			
ANR	646497	Identifier	charNum		646299	0					
ANR	646498	AdditiveExpression	( int ) currentLine . length ( ) - 1		646299	1		-			
ANR	646499	CastExpression	( int ) currentLine . length ( )		646299	0					
ANR	646500	CastTarget	int		646299	0					
ANR	646501	CallExpression	currentLine . length ( )		646299	1					
ANR	646502	Callee	currentLine . length		646299	0					
ANR	646503	MemberAccess	currentLine . length		646299	0					
ANR	646504	Identifier	currentLine		646299	0					
ANR	646505	Identifier	length		646299	1					
ANR	646506	ArgumentList			646299	1					
ANR	646507	PrimaryExpression	1		646299	1					
ANR	646508	AndExpression	! isWhiteSpace ( currentLine [ charNum + 1 ] ) && currentLine [ charNum + 1 ] != ')'		646299	1		&&			
ANR	646509	UnaryOperationExpression	! isWhiteSpace ( currentLine [ charNum + 1 ] )		646299	0					
ANR	646510	UnaryOperator	!		646299	0					
ANR	646511	CallExpression	isWhiteSpace ( currentLine [ charNum + 1 ] )		646299	1					
ANR	646512	Callee	isWhiteSpace		646299	0					
ANR	646513	Identifier	isWhiteSpace		646299	0					
ANR	646514	ArgumentList	currentLine [ charNum + 1 ]		646299	1					
ANR	646515	Argument	currentLine [ charNum + 1 ]		646299	0					
ANR	646516	ArrayIndexing	currentLine [ charNum + 1 ]		646299	0					
ANR	646517	Identifier	currentLine		646299	0					
ANR	646518	AdditiveExpression	charNum + 1		646299	1		+			
ANR	646519	Identifier	charNum		646299	0					
ANR	646520	PrimaryExpression	1		646299	1					
ANR	646521	EqualityExpression	currentLine [ charNum + 1 ] != ')'		646299	1		!=			
ANR	646522	ArrayIndexing	currentLine [ charNum + 1 ]		646299	0					
ANR	646523	Identifier	currentLine		646299	0					
ANR	646524	AdditiveExpression	charNum + 1		646299	1		+			
ANR	646525	Identifier	charNum		646299	0					
ANR	646526	PrimaryExpression	1		646299	1					
ANR	646527	PrimaryExpression	')'		646299	1					
ANR	646528	ExpressionStatement	appendSpacePad ( )	3945:2:113826:113842	646299	1	True				
ANR	646529	CallExpression	appendSpacePad ( )		646299	0					
ANR	646530	Callee	appendSpacePad		646299	0					
ANR	646531	Identifier	appendSpacePad		646299	0					
ANR	646532	ArgumentList			646299	1					
ANR	646533	IfStatement	if ( isOldPRCentered && isWhiteSpace ( formattedLine [ formattedLine . length ( ) - 1 ] ) )		646299	8					
ANR	646534	Condition	isOldPRCentered && isWhiteSpace ( formattedLine [ formattedLine . length ( ) - 1 ] )	3947:5:113909:113991	646299	0	True				
ANR	646535	AndExpression	isOldPRCentered && isWhiteSpace ( formattedLine [ formattedLine . length ( ) - 1 ] )		646299	0		&&			
ANR	646536	Identifier	isOldPRCentered		646299	0					
ANR	646537	CallExpression	isWhiteSpace ( formattedLine [ formattedLine . length ( ) - 1 ] )		646299	1					
ANR	646538	Callee	isWhiteSpace		646299	0					
ANR	646539	Identifier	isWhiteSpace		646299	0					
ANR	646540	ArgumentList	formattedLine [ formattedLine . length ( ) - 1 ]		646299	1					
ANR	646541	Argument	formattedLine [ formattedLine . length ( ) - 1 ]		646299	0					
ANR	646542	ArrayIndexing	formattedLine [ formattedLine . length ( ) - 1 ]		646299	0					
ANR	646543	Identifier	formattedLine		646299	0					
ANR	646544	AdditiveExpression	formattedLine . length ( ) - 1		646299	1		-			
ANR	646545	CallExpression	formattedLine . length ( )		646299	0					
ANR	646546	Callee	formattedLine . length		646299	0					
ANR	646547	MemberAccess	formattedLine . length		646299	0					
ANR	646548	Identifier	formattedLine		646299	0					
ANR	646549	Identifier	length		646299	1					
ANR	646550	ArgumentList			646299	1					
ANR	646551	PrimaryExpression	1		646299	1					
ANR	646552	CompoundStatement		37:1:1225:1225	646299	1					
ANR	646553	ExpressionStatement	"formattedLine . erase ( formattedLine . length ( ) - 1 , 1 )"	3950:2:113999:114049	646299	0	True				
ANR	646554	CallExpression	"formattedLine . erase ( formattedLine . length ( ) - 1 , 1 )"		646299	0					
ANR	646555	Callee	formattedLine . erase		646299	0					
ANR	646556	MemberAccess	formattedLine . erase		646299	0					
ANR	646557	Identifier	formattedLine		646299	0					
ANR	646558	Identifier	erase		646299	1					
ANR	646559	ArgumentList	formattedLine . length ( ) - 1		646299	1					
ANR	646560	Argument	formattedLine . length ( ) - 1		646299	0					
ANR	646561	AdditiveExpression	formattedLine . length ( ) - 1		646299	0		-			
ANR	646562	CallExpression	formattedLine . length ( )		646299	0					
ANR	646563	Callee	formattedLine . length		646299	0					
ANR	646564	MemberAccess	formattedLine . length		646299	0					
ANR	646565	Identifier	formattedLine		646299	0					
ANR	646566	Identifier	length		646299	1					
ANR	646567	ArgumentList			646299	1					
ANR	646568	PrimaryExpression	1		646299	1					
ANR	646569	Argument	1		646299	1					
ANR	646570	PrimaryExpression	1		646299	0					
ANR	646571	ExpressionStatement	spacePadNum --	3951:2:114053:114066	646299	1	True				
ANR	646572	PostIncDecOperationExpression	spacePadNum --		646299	0					
ANR	646573	Identifier	spacePadNum		646299	0					
ANR	646574	IncDec	--		646299	1					
ANR	646575	IfStatement	if ( maxCodeLength != string :: npos )		646299	9					
ANR	646576	Condition	maxCodeLength != string :: npos	3954:5:114117:114145	646299	0	True				
ANR	646577	EqualityExpression	maxCodeLength != string :: npos		646299	0		!=			
ANR	646578	Identifier	maxCodeLength		646299	0					
ANR	646579	Identifier	string :: npos		646299	1					
ANR	646580	CompoundStatement		44:2:1383:1424	646299	1					
ANR	646581	IdentifierDeclStatement	size_t index = formattedLine . length ( ) - 1 ;	3956:2:114153:114194	646299	0	True				
ANR	646582	IdentifierDecl	index = formattedLine . length ( ) - 1		646299	0					
ANR	646583	IdentifierDeclType	size_t		646299	0					
ANR	646584	Identifier	index		646299	1					
ANR	646585	AssignmentExpression	index = formattedLine . length ( ) - 1		646299	2		=			
ANR	646586	Identifier	index		646299	0					
ANR	646587	AdditiveExpression	formattedLine . length ( ) - 1		646299	1		-			
ANR	646588	CallExpression	formattedLine . length ( )		646299	0					
ANR	646589	Callee	formattedLine . length		646299	0					
ANR	646590	MemberAccess	formattedLine . length		646299	0					
ANR	646591	Identifier	formattedLine		646299	0					
ANR	646592	Identifier	length		646299	1					
ANR	646593	ArgumentList			646299	1					
ANR	646594	PrimaryExpression	1		646299	1					
ANR	646595	IfStatement	if ( isWhiteSpace ( formattedLine [ index ] ) )		646299	1					
ANR	646596	Condition	isWhiteSpace ( formattedLine [ index ] )	3957:6:114202:114235	646299	0	True				
ANR	646597	CallExpression	isWhiteSpace ( formattedLine [ index ] )		646299	0					
ANR	646598	Callee	isWhiteSpace		646299	0					
ANR	646599	Identifier	isWhiteSpace		646299	0					
ANR	646600	ArgumentList	formattedLine [ index ]		646299	1					
ANR	646601	Argument	formattedLine [ index ]		646299	0					
ANR	646602	ArrayIndexing	formattedLine [ index ]		646299	0					
ANR	646603	Identifier	formattedLine		646299	0					
ANR	646604	Identifier	index		646299	1					
ANR	646605	CompoundStatement		46:2:1470:1470	646299	1					
ANR	646606	ExpressionStatement	updateFormattedLineSplitPointsPointerOrReference ( index )	3959:3:114245:114300	646299	0	True				
ANR	646607	CallExpression	updateFormattedLineSplitPointsPointerOrReference ( index )		646299	0					
ANR	646608	Callee	updateFormattedLineSplitPointsPointerOrReference		646299	0					
ANR	646609	Identifier	updateFormattedLineSplitPointsPointerOrReference		646299	0					
ANR	646610	ArgumentList	index		646299	1					
ANR	646611	Argument	index		646299	0					
ANR	646612	Identifier	index		646299	0					
ANR	646613	ExpressionStatement	testForTimeToSplitFormattedLine ( )	3960:3:114305:114338	646299	1	True				
ANR	646614	CallExpression	testForTimeToSplitFormattedLine ( )		646299	0					
ANR	646615	Callee	testForTimeToSplitFormattedLine		646299	0					
ANR	646616	Identifier	testForTimeToSplitFormattedLine		646299	0					
ANR	646617	ArgumentList			646299	1					
ANR	646618	ReturnType	void		646299	1					
ANR	646619	Identifier	ASFormatter :: formatPointerOrReferenceToType		646299	2					
ANR	646620	ParameterList			646299	3					
ANR	646621	CFGEntryNode	ENTRY		646299		True				
ANR	646622	CFGExitNode	EXIT		646299		True				
ANR	646623	Symbol	isPointerOrReferenceCentered		646299						
ANR	646624	Symbol	* formattedLine		646299						
ANR	646625	Symbol	maxCodeLength		646299						
ANR	646626	Symbol	* index		646299						
ANR	646627	Symbol	string :: npos		646299						
ANR	646628	Symbol	* formattedLine . length		646299						
ANR	646629	Symbol	isWhiteSpace		646299						
ANR	646630	Symbol	* currentLine		646299						
ANR	646631	Symbol	formattedLine . find_last_not_of		646299						
ANR	646632	Symbol	isSequenceReached		646299						
ANR	646633	Symbol	charNum		646299						
ANR	646634	Symbol	formattedLine . substr		646299						
ANR	646635	Symbol	currentLine		646299						
ANR	646636	Symbol	currentChar		646299						
ANR	646637	Symbol	charSave		646299						
ANR	646638	Symbol	* prevCh		646299						
ANR	646639	Symbol	spacePadNum		646299						
ANR	646640	Symbol	index		646299						
ANR	646641	Symbol	prevCh		646299						
ANR	646642	Symbol	formattedLine		646299						
ANR	646643	Symbol	isOldPRCentered		646299						
ANR	646644	Symbol	currentLine . length		646299						
ANR	646645	Symbol	formattedLine . length		646299						
ANR	646646	Symbol	* charNum		646299						
ANR	646647	Symbol	isJavaStyle		646299						
ANR	646648	Function	ASFormatter :: formatPointerOrReferenceToMiddle	3968:0:114414:117883							
ANR	646649	FunctionDef	ASFormatter :: formatPointerOrReferenceToMiddle ()		646648	0					
ANR	646650	CompoundStatement		3969:0:114467:117883	646648	0					
ANR	646651	ExpressionStatement	assert ( currentChar == '*' || currentChar == '&' || currentChar == '^' )	3970:1:114470:114540	646648	0	True				
ANR	646652	CallExpression	assert ( currentChar == '*' || currentChar == '&' || currentChar == '^' )		646648	0					
ANR	646653	Callee	assert		646648	0					
ANR	646654	Identifier	assert		646648	0					
ANR	646655	ArgumentList	currentChar == '*' || currentChar == '&' || currentChar == '^'		646648	1					
ANR	646656	Argument	currentChar == '*' || currentChar == '&' || currentChar == '^'		646648	0					
ANR	646657	OrExpression	currentChar == '*' || currentChar == '&' || currentChar == '^'		646648	0		||			
ANR	646658	EqualityExpression	currentChar == '*'		646648	0		==			
ANR	646659	Identifier	currentChar		646648	0					
ANR	646660	PrimaryExpression	'*'		646648	1					
ANR	646661	OrExpression	currentChar == '&' || currentChar == '^'		646648	1		||			
ANR	646662	EqualityExpression	currentChar == '&'		646648	0		==			
ANR	646663	Identifier	currentChar		646648	0					
ANR	646664	PrimaryExpression	'&'		646648	1					
ANR	646665	EqualityExpression	currentChar == '^'		646648	1		==			
ANR	646666	Identifier	currentChar		646648	0					
ANR	646667	PrimaryExpression	'^'		646648	1					
ANR	646668	ExpressionStatement	assert ( ! isJavaStyle ( ) )	3971:1:114543:114565	646648	1	True				
ANR	646669	CallExpression	assert ( ! isJavaStyle ( ) )		646648	0					
ANR	646670	Callee	assert		646648	0					
ANR	646671	Identifier	assert		646648	0					
ANR	646672	ArgumentList	! isJavaStyle ( )		646648	1					
ANR	646673	Argument	! isJavaStyle ( )		646648	0					
ANR	646674	UnaryOperationExpression	! isJavaStyle ( )		646648	0					
ANR	646675	UnaryOperator	!		646648	0					
ANR	646676	CallExpression	isJavaStyle ( )		646648	1					
ANR	646677	Callee	isJavaStyle		646648	0					
ANR	646678	Identifier	isJavaStyle		646648	0					
ANR	646679	ArgumentList			646648	1					
ANR	646680	IdentifierDeclStatement	"size_t wsBefore = currentLine . find_last_not_of ( "" \\t"" , charNum - 1 ) ;"	3974:1:114607:114673	646648	2	True				
ANR	646681	IdentifierDecl	"wsBefore = currentLine . find_last_not_of ( "" \\t"" , charNum - 1 )"		646648	0					
ANR	646682	IdentifierDeclType	size_t		646648	0					
ANR	646683	Identifier	wsBefore		646648	1					
ANR	646684	AssignmentExpression	"wsBefore = currentLine . find_last_not_of ( "" \\t"" , charNum - 1 )"		646648	2		=			
ANR	646685	Identifier	wsBefore		646648	0					
ANR	646686	CallExpression	"currentLine . find_last_not_of ( "" \\t"" , charNum - 1 )"		646648	1					
ANR	646687	Callee	currentLine . find_last_not_of		646648	0					
ANR	646688	MemberAccess	currentLine . find_last_not_of		646648	0					
ANR	646689	Identifier	currentLine		646648	0					
ANR	646690	Identifier	find_last_not_of		646648	1					
ANR	646691	ArgumentList	""" \\t"""		646648	1					
ANR	646692	Argument	""" \\t"""		646648	0					
ANR	646693	PrimaryExpression	""" \\t"""		646648	0					
ANR	646694	Argument	charNum - 1		646648	1					
ANR	646695	AdditiveExpression	charNum - 1		646648	0		-			
ANR	646696	Identifier	charNum		646648	0					
ANR	646697	PrimaryExpression	1		646648	1					
ANR	646698	IfStatement	if ( wsBefore == string :: npos )		646648	3					
ANR	646699	Condition	wsBefore == string :: npos	3975:5:114680:114703	646648	0	True				
ANR	646700	EqualityExpression	wsBefore == string :: npos		646648	0		==			
ANR	646701	Identifier	wsBefore		646648	0					
ANR	646702	Identifier	string :: npos		646648	1					
ANR	646703	ExpressionStatement	wsBefore = 0	3976:2:114708:114720	646648	1	True				
ANR	646704	AssignmentExpression	wsBefore = 0		646648	0		=			
ANR	646705	Identifier	wsBefore		646648	0					
ANR	646706	PrimaryExpression	0		646648	1					
ANR	646707	ElseStatement	else		646648	0					
ANR	646708	ExpressionStatement	wsBefore = charNum - wsBefore - 1	3978:2:114730:114763	646648	0	True				
ANR	646709	AssignmentExpression	wsBefore = charNum - wsBefore - 1		646648	0		=			
ANR	646710	Identifier	wsBefore		646648	0					
ANR	646711	AdditiveExpression	charNum - wsBefore - 1		646648	1		-			
ANR	646712	Identifier	charNum		646648	0					
ANR	646713	AdditiveExpression	wsBefore - 1		646648	1		-			
ANR	646714	Identifier	wsBefore		646648	0					
ANR	646715	PrimaryExpression	1		646648	1					
ANR	646716	IdentifierDeclStatement	"string sequenceToInsert ( 1 , currentChar ) ;"	3979:1:114766:114805	646648	4	True				
ANR	646717	IdentifierDecl	"sequenceToInsert ( 1 , currentChar )"		646648	0					
ANR	646718	IdentifierDeclType	string		646648	0					
ANR	646719	Identifier	sequenceToInsert		646648	1					
ANR	646720	Expression	"1 , currentChar"		646648	2					
ANR	646721	PrimaryExpression	1		646648	0					
ANR	646722	Identifier	currentChar		646648	1					
ANR	646723	IfStatement	"if ( isSequenceReached ( ""**"" ) )"		646648	5					
ANR	646724	Condition	"isSequenceReached ( ""**"" )"	3980:5:114812:114834	646648	0	True				
ANR	646725	CallExpression	"isSequenceReached ( ""**"" )"		646648	0					
ANR	646726	Callee	isSequenceReached		646648	0					
ANR	646727	Identifier	isSequenceReached		646648	0					
ANR	646728	ArgumentList	"""**"""		646648	1					
ANR	646729	Argument	"""**"""		646648	0					
ANR	646730	PrimaryExpression	"""**"""		646648	0					
ANR	646731	CompoundStatement		13:1:370:370	646648	1					
ANR	646732	ExpressionStatement	"sequenceToInsert = ""**"""	3982:2:114842:114865	646648	0	True				
ANR	646733	AssignmentExpression	"sequenceToInsert = ""**"""		646648	0		=			
ANR	646734	Identifier	sequenceToInsert		646648	0					
ANR	646735	PrimaryExpression	"""**"""		646648	1					
ANR	646736	ExpressionStatement	goForward ( 1 )	3983:2:114869:114881	646648	1	True				
ANR	646737	CallExpression	goForward ( 1 )		646648	0					
ANR	646738	Callee	goForward		646648	0					
ANR	646739	Identifier	goForward		646648	0					
ANR	646740	ArgumentList	1		646648	1					
ANR	646741	Argument	1		646648	0					
ANR	646742	PrimaryExpression	1		646648	0					
ANR	646743	ElseStatement	else		646648	0					
ANR	646744	IfStatement	"if ( isSequenceReached ( ""&&"" ) )"		646648	0					
ANR	646745	Condition	"isSequenceReached ( ""&&"" )"	3985:10:114896:114918	646648	0	True				
ANR	646746	CallExpression	"isSequenceReached ( ""&&"" )"		646648	0					
ANR	646747	Callee	isSequenceReached		646648	0					
ANR	646748	Identifier	isSequenceReached		646648	0					
ANR	646749	ArgumentList	"""&&"""		646648	1					
ANR	646750	Argument	"""&&"""		646648	0					
ANR	646751	PrimaryExpression	"""&&"""		646648	0					
ANR	646752	CompoundStatement		18:1:454:454	646648	1					
ANR	646753	ExpressionStatement	"sequenceToInsert = ""&&"""	3987:2:114926:114949	646648	0	True				
ANR	646754	AssignmentExpression	"sequenceToInsert = ""&&"""		646648	0		=			
ANR	646755	Identifier	sequenceToInsert		646648	0					
ANR	646756	PrimaryExpression	"""&&"""		646648	1					
ANR	646757	ExpressionStatement	goForward ( 1 )	3988:2:114953:114965	646648	1	True				
ANR	646758	CallExpression	goForward ( 1 )		646648	0					
ANR	646759	Callee	goForward		646648	0					
ANR	646760	Identifier	goForward		646648	0					
ANR	646761	ArgumentList	1		646648	1					
ANR	646762	Argument	1		646648	0					
ANR	646763	PrimaryExpression	1		646648	0					
ANR	646764	ElseStatement	else		646648	0					
ANR	646765	IfStatement	if ( currentChar == '*' && peekNextChar ( ) == '&' && ( referenceAlignment == REF_ALIGN_TYPE || referenceAlignment == REF_ALIGN_MIDDLE || referenceAlignment == REF_SAME_AS_PTR ) )		646648	0					
ANR	646766	Condition	currentChar == '*' && peekNextChar ( ) == '&' && ( referenceAlignment == REF_ALIGN_TYPE || referenceAlignment == REF_ALIGN_MIDDLE || referenceAlignment == REF_SAME_AS_PTR )	3991:10:115042:115247	646648	0	True				
ANR	646767	AndExpression	currentChar == '*' && peekNextChar ( ) == '&' && ( referenceAlignment == REF_ALIGN_TYPE || referenceAlignment == REF_ALIGN_MIDDLE || referenceAlignment == REF_SAME_AS_PTR )		646648	0		&&			
ANR	646768	EqualityExpression	currentChar == '*'		646648	0		==			
ANR	646769	Identifier	currentChar		646648	0					
ANR	646770	PrimaryExpression	'*'		646648	1					
ANR	646771	AndExpression	peekNextChar ( ) == '&' && ( referenceAlignment == REF_ALIGN_TYPE || referenceAlignment == REF_ALIGN_MIDDLE || referenceAlignment == REF_SAME_AS_PTR )		646648	1		&&			
ANR	646772	EqualityExpression	peekNextChar ( ) == '&'		646648	0		==			
ANR	646773	CallExpression	peekNextChar ( )		646648	0					
ANR	646774	Callee	peekNextChar		646648	0					
ANR	646775	Identifier	peekNextChar		646648	0					
ANR	646776	ArgumentList			646648	1					
ANR	646777	PrimaryExpression	'&'		646648	1					
ANR	646778	OrExpression	referenceAlignment == REF_ALIGN_TYPE || referenceAlignment == REF_ALIGN_MIDDLE || referenceAlignment == REF_SAME_AS_PTR		646648	1		||			
ANR	646779	EqualityExpression	referenceAlignment == REF_ALIGN_TYPE		646648	0		==			
ANR	646780	Identifier	referenceAlignment		646648	0					
ANR	646781	Identifier	REF_ALIGN_TYPE		646648	1					
ANR	646782	OrExpression	referenceAlignment == REF_ALIGN_MIDDLE || referenceAlignment == REF_SAME_AS_PTR		646648	1		||			
ANR	646783	EqualityExpression	referenceAlignment == REF_ALIGN_MIDDLE		646648	0		==			
ANR	646784	Identifier	referenceAlignment		646648	0					
ANR	646785	Identifier	REF_ALIGN_MIDDLE		646648	1					
ANR	646786	EqualityExpression	referenceAlignment == REF_SAME_AS_PTR		646648	1		==			
ANR	646787	Identifier	referenceAlignment		646648	0					
ANR	646788	Identifier	REF_SAME_AS_PTR		646648	1					
ANR	646789	CompoundStatement		27:1:783:783	646648	1					
ANR	646790	ExpressionStatement	"sequenceToInsert = ""*&"""	3996:2:115255:115278	646648	0	True				
ANR	646791	AssignmentExpression	"sequenceToInsert = ""*&"""		646648	0		=			
ANR	646792	Identifier	sequenceToInsert		646648	0					
ANR	646793	PrimaryExpression	"""*&"""		646648	1					
ANR	646794	ExpressionStatement	goForward ( 1 )	3997:2:115282:115294	646648	1	True				
ANR	646795	CallExpression	goForward ( 1 )		646648	0					
ANR	646796	Callee	goForward		646648	0					
ANR	646797	Identifier	goForward		646648	0					
ANR	646798	ArgumentList	1		646648	1					
ANR	646799	Argument	1		646648	0					
ANR	646800	PrimaryExpression	1		646648	0					
ANR	646801	ForStatement	for ( size_t i = charNum ; i < currentLine . length ( ) - 1 && isWhiteSpace ( currentLine [ i ] ) ; i ++ )		646648	2					
ANR	646802	ForInit	size_t i = charNum ;	3998:7:115303:115321	646648	0	True				
ANR	646803	IdentifierDeclStatement	size_t i = charNum ;		646648	0					
ANR	646804	IdentifierDecl	i = charNum		646648	0					
ANR	646805	IdentifierDeclType	size_t		646648	0					
ANR	646806	Identifier	i		646648	1					
ANR	646807	AssignmentExpression	i = charNum		646648	2		=			
ANR	646808	Identifier	charNum		646648	0					
ANR	646809	Identifier	charNum		646648	1					
ANR	646810	Condition	i < currentLine . length ( ) - 1 && isWhiteSpace ( currentLine [ i ] )	3998:27:115323:115382	646648	1	True				
ANR	646811	AndExpression	i < currentLine . length ( ) - 1 && isWhiteSpace ( currentLine [ i ] )		646648	0		&&			
ANR	646812	RelationalExpression	i < currentLine . length ( ) - 1		646648	0		<			
ANR	646813	Identifier	i		646648	0					
ANR	646814	AdditiveExpression	currentLine . length ( ) - 1		646648	1		-			
ANR	646815	CallExpression	currentLine . length ( )		646648	0					
ANR	646816	Callee	currentLine . length		646648	0					
ANR	646817	MemberAccess	currentLine . length		646648	0					
ANR	646818	Identifier	currentLine		646648	0					
ANR	646819	Identifier	length		646648	1					
ANR	646820	ArgumentList			646648	1					
ANR	646821	PrimaryExpression	1		646648	1					
ANR	646822	CallExpression	isWhiteSpace ( currentLine [ i ] )		646648	1					
ANR	646823	Callee	isWhiteSpace		646648	0					
ANR	646824	Identifier	isWhiteSpace		646648	0					
ANR	646825	ArgumentList	currentLine [ i ]		646648	1					
ANR	646826	Argument	currentLine [ i ]		646648	0					
ANR	646827	ArrayIndexing	currentLine [ i ]		646648	0					
ANR	646828	Identifier	currentLine		646648	0					
ANR	646829	Identifier	i		646648	1					
ANR	646830	PostIncDecOperationExpression	i ++	3998:89:115385:115387	646648	2	True				
ANR	646831	Identifier	i		646648	0					
ANR	646832	IncDec	++		646648	1					
ANR	646833	ExpressionStatement	goForward ( 1 )	3999:3:115393:115405	646648	3	True				
ANR	646834	CallExpression	goForward ( 1 )		646648	0					
ANR	646835	Callee	goForward		646648	0					
ANR	646836	Identifier	goForward		646648	0					
ANR	646837	ArgumentList	1		646648	1					
ANR	646838	Argument	1		646648	0					
ANR	646839	PrimaryExpression	1		646648	0					
ANR	646840	IfStatement	if ( isBeforeAnyComment ( ) )		646648	6					
ANR	646841	Condition	isBeforeAnyComment ( )	4002:5:115468:115487	646648	0	True				
ANR	646842	CallExpression	isBeforeAnyComment ( )		646648	0					
ANR	646843	Callee	isBeforeAnyComment		646648	0					
ANR	646844	Identifier	isBeforeAnyComment		646648	0					
ANR	646845	ArgumentList			646648	1					
ANR	646846	CompoundStatement		35:1:1023:1023	646648	1					
ANR	646847	ExpressionStatement	appendSpacePad ( )	4004:2:115495:115511	646648	0	True				
ANR	646848	CallExpression	appendSpacePad ( )		646648	0					
ANR	646849	Callee	appendSpacePad		646648	0					
ANR	646850	Identifier	appendSpacePad		646648	0					
ANR	646851	ArgumentList			646648	1					
ANR	646852	ExpressionStatement	formattedLine . append ( sequenceToInsert )	4005:2:115515:115553	646648	1	True				
ANR	646853	CallExpression	formattedLine . append ( sequenceToInsert )		646648	0					
ANR	646854	Callee	formattedLine . append		646648	0					
ANR	646855	MemberAccess	formattedLine . append		646648	0					
ANR	646856	Identifier	formattedLine		646648	0					
ANR	646857	Identifier	append		646648	1					
ANR	646858	ArgumentList	sequenceToInsert		646648	1					
ANR	646859	Argument	sequenceToInsert		646648	0					
ANR	646860	Identifier	sequenceToInsert		646648	0					
ANR	646861	ExpressionStatement	appendSpaceAfter ( )	4006:2:115557:115575	646648	2	True				
ANR	646862	CallExpression	appendSpaceAfter ( )		646648	0					
ANR	646863	Callee	appendSpaceAfter		646648	0					
ANR	646864	Identifier	appendSpaceAfter		646648	0					
ANR	646865	ArgumentList			646648	1					
ANR	646866	ReturnStatement	return ;	4007:2:115579:115585	646648	3	True				
ANR	646867	IdentifierDeclStatement	bool isAfterScopeResolution = previousNonWSChar == ':' ;	4010:1:115622:115676	646648	7	True				
ANR	646868	IdentifierDecl	isAfterScopeResolution = previousNonWSChar == ':'		646648	0					
ANR	646869	IdentifierDeclType	bool		646648	0					
ANR	646870	Identifier	isAfterScopeResolution		646648	1					
ANR	646871	AssignmentExpression	isAfterScopeResolution = previousNonWSChar == ':'		646648	2		=			
ANR	646872	Identifier	isAfterScopeResolution		646648	0					
ANR	646873	EqualityExpression	previousNonWSChar == ':'		646648	1		==			
ANR	646874	Identifier	previousNonWSChar		646648	0					
ANR	646875	PrimaryExpression	':'		646648	1					
ANR	646876	IdentifierDeclStatement	size_t charNumSave = charNum ;	4011:1:115679:115707	646648	8	True				
ANR	646877	IdentifierDecl	charNumSave = charNum		646648	0					
ANR	646878	IdentifierDeclType	size_t		646648	0					
ANR	646879	Identifier	charNumSave		646648	1					
ANR	646880	AssignmentExpression	charNumSave = charNum		646648	2		=			
ANR	646881	Identifier	charNum		646648	0					
ANR	646882	Identifier	charNum		646648	1					
ANR	646883	IfStatement	"if ( currentLine . find_first_not_of ( "" \\t"" , charNum + 1 ) == string :: npos )"		646648	9					
ANR	646884	Condition	"currentLine . find_first_not_of ( "" \\t"" , charNum + 1 ) == string :: npos"	4013:5:115756:115820	646648	0	True				
ANR	646885	EqualityExpression	"currentLine . find_first_not_of ( "" \\t"" , charNum + 1 ) == string :: npos"		646648	0		==			
ANR	646886	CallExpression	"currentLine . find_first_not_of ( "" \\t"" , charNum + 1 )"		646648	0					
ANR	646887	Callee	currentLine . find_first_not_of		646648	0					
ANR	646888	MemberAccess	currentLine . find_first_not_of		646648	0					
ANR	646889	Identifier	currentLine		646648	0					
ANR	646890	Identifier	find_first_not_of		646648	1					
ANR	646891	ArgumentList	""" \\t"""		646648	1					
ANR	646892	Argument	""" \\t"""		646648	0					
ANR	646893	PrimaryExpression	""" \\t"""		646648	0					
ANR	646894	Argument	charNum + 1		646648	1					
ANR	646895	AdditiveExpression	charNum + 1		646648	0		+			
ANR	646896	Identifier	charNum		646648	0					
ANR	646897	PrimaryExpression	1		646648	1					
ANR	646898	Identifier	string :: npos		646648	1					
ANR	646899	CompoundStatement		46:1:1356:1356	646648	1					
ANR	646900	IfStatement	if ( wsBefore == 0 && ! isAfterScopeResolution )		646648	0					
ANR	646901	Condition	wsBefore == 0 && ! isAfterScopeResolution	4015:6:115832:115871	646648	0	True				
ANR	646902	AndExpression	wsBefore == 0 && ! isAfterScopeResolution		646648	0		&&			
ANR	646903	EqualityExpression	wsBefore == 0		646648	0		==			
ANR	646904	Identifier	wsBefore		646648	0					
ANR	646905	PrimaryExpression	0		646648	1					
ANR	646906	UnaryOperationExpression	! isAfterScopeResolution		646648	1					
ANR	646907	UnaryOperator	!		646648	0					
ANR	646908	Identifier	isAfterScopeResolution		646648	1					
ANR	646909	ExpressionStatement	"formattedLine . append ( 1 , ' ' )"	4016:3:115877:115905	646648	1	True				
ANR	646910	CallExpression	"formattedLine . append ( 1 , ' ' )"		646648	0					
ANR	646911	Callee	formattedLine . append		646648	0					
ANR	646912	MemberAccess	formattedLine . append		646648	0					
ANR	646913	Identifier	formattedLine		646648	0					
ANR	646914	Identifier	append		646648	1					
ANR	646915	ArgumentList	1		646648	1					
ANR	646916	Argument	1		646648	0					
ANR	646917	PrimaryExpression	1		646648	0					
ANR	646918	Argument	' '		646648	1					
ANR	646919	PrimaryExpression	' '		646648	0					
ANR	646920	ExpressionStatement	formattedLine . append ( sequenceToInsert )	4017:2:115909:115947	646648	1	True				
ANR	646921	CallExpression	formattedLine . append ( sequenceToInsert )		646648	0					
ANR	646922	Callee	formattedLine . append		646648	0					
ANR	646923	MemberAccess	formattedLine . append		646648	0					
ANR	646924	Identifier	formattedLine		646648	0					
ANR	646925	Identifier	append		646648	1					
ANR	646926	ArgumentList	sequenceToInsert		646648	1					
ANR	646927	Argument	sequenceToInsert		646648	0					
ANR	646928	Identifier	sequenceToInsert		646648	0					
ANR	646929	ReturnStatement	return ;	4018:2:115951:115957	646648	2	True				
ANR	646930	ForStatement	for ( size_t i = charNum + 1 ; i < currentLine . length ( ) && isWhiteSpace ( currentLine [ i ] ) ; i ++ )		646648	10					
ANR	646931	ForInit	size_t i = charNum + 1 ;	4023:6:116136:116158	646648	0	True				
ANR	646932	IdentifierDeclStatement	size_t i = charNum + 1 ;		646648	0					
ANR	646933	IdentifierDecl	i = charNum + 1		646648	0					
ANR	646934	IdentifierDeclType	size_t		646648	0					
ANR	646935	Identifier	i		646648	1					
ANR	646936	AssignmentExpression	i = charNum + 1		646648	2		=			
ANR	646937	Identifier	i		646648	0					
ANR	646938	AdditiveExpression	charNum + 1		646648	1		+			
ANR	646939	Identifier	charNum		646648	0					
ANR	646940	PrimaryExpression	1		646648	1					
ANR	646941	Condition	i < currentLine . length ( ) && isWhiteSpace ( currentLine [ i ] )	4023:30:116160:116215	646648	1	True				
ANR	646942	AndExpression	i < currentLine . length ( ) && isWhiteSpace ( currentLine [ i ] )		646648	0		&&			
ANR	646943	RelationalExpression	i < currentLine . length ( )		646648	0		<			
ANR	646944	Identifier	i		646648	0					
ANR	646945	CallExpression	currentLine . length ( )		646648	1					
ANR	646946	Callee	currentLine . length		646648	0					
ANR	646947	MemberAccess	currentLine . length		646648	0					
ANR	646948	Identifier	currentLine		646648	0					
ANR	646949	Identifier	length		646648	1					
ANR	646950	ArgumentList			646648	1					
ANR	646951	CallExpression	isWhiteSpace ( currentLine [ i ] )		646648	1					
ANR	646952	Callee	isWhiteSpace		646648	0					
ANR	646953	Identifier	isWhiteSpace		646648	0					
ANR	646954	ArgumentList	currentLine [ i ]		646648	1					
ANR	646955	Argument	currentLine [ i ]		646648	0					
ANR	646956	ArrayIndexing	currentLine [ i ]		646648	0					
ANR	646957	Identifier	currentLine		646648	0					
ANR	646958	Identifier	i		646648	1					
ANR	646959	PostIncDecOperationExpression	i ++	4023:88:116218:116220	646648	2	True				
ANR	646960	Identifier	i		646648	0					
ANR	646961	IncDec	++		646648	1					
ANR	646962	CompoundStatement		56:1:1756:1756	646648	3					
ANR	646963	ExpressionStatement	goForward ( 1 )	4025:2:116228:116240	646648	0	True				
ANR	646964	CallExpression	goForward ( 1 )		646648	0					
ANR	646965	Callee	goForward		646648	0					
ANR	646966	Identifier	goForward		646648	0					
ANR	646967	ArgumentList	1		646648	1					
ANR	646968	Argument	1		646648	0					
ANR	646969	PrimaryExpression	1		646648	0					
ANR	646970	IfStatement	if ( formattedLine . length ( ) > 0 )		646648	1					
ANR	646971	Condition	formattedLine . length ( ) > 0	4026:6:116248:116273	646648	0	True				
ANR	646972	RelationalExpression	formattedLine . length ( ) > 0		646648	0		>			
ANR	646973	CallExpression	formattedLine . length ( )		646648	0					
ANR	646974	Callee	formattedLine . length		646648	0					
ANR	646975	MemberAccess	formattedLine . length		646648	0					
ANR	646976	Identifier	formattedLine		646648	0					
ANR	646977	Identifier	length		646648	1					
ANR	646978	ArgumentList			646648	1					
ANR	646979	PrimaryExpression	0		646648	1					
ANR	646980	ExpressionStatement	"formattedLine . append ( 1 , currentLine [ i ] )"	4027:3:116279:116318	646648	1	True				
ANR	646981	CallExpression	"formattedLine . append ( 1 , currentLine [ i ] )"		646648	0					
ANR	646982	Callee	formattedLine . append		646648	0					
ANR	646983	MemberAccess	formattedLine . append		646648	0					
ANR	646984	Identifier	formattedLine		646648	0					
ANR	646985	Identifier	append		646648	1					
ANR	646986	ArgumentList	1		646648	1					
ANR	646987	Argument	1		646648	0					
ANR	646988	PrimaryExpression	1		646648	0					
ANR	646989	Argument	currentLine [ i ]		646648	1					
ANR	646990	ArrayIndexing	currentLine [ i ]		646648	0					
ANR	646991	Identifier	currentLine		646648	0					
ANR	646992	Identifier	i		646648	1					
ANR	646993	ElseStatement	else		646648	0					
ANR	646994	ExpressionStatement	spacePadNum --	4029:3:116330:116343	646648	0	True				
ANR	646995	PostIncDecOperationExpression	spacePadNum --		646648	0					
ANR	646996	Identifier	spacePadNum		646648	0					
ANR	646997	IncDec	--		646648	1					
ANR	646998	IdentifierDeclStatement	"size_t wsAfter = currentLine . find_first_not_of ( "" \\t"" , charNumSave + 1 ) ;"	4032:1:116378:116448	646648	11	True				
ANR	646999	IdentifierDecl	"wsAfter = currentLine . find_first_not_of ( "" \\t"" , charNumSave + 1 )"		646648	0					
ANR	647000	IdentifierDeclType	size_t		646648	0					
ANR	647001	Identifier	wsAfter		646648	1					
ANR	647002	AssignmentExpression	"wsAfter = currentLine . find_first_not_of ( "" \\t"" , charNumSave + 1 )"		646648	2		=			
ANR	647003	Identifier	wsAfter		646648	0					
ANR	647004	CallExpression	"currentLine . find_first_not_of ( "" \\t"" , charNumSave + 1 )"		646648	1					
ANR	647005	Callee	currentLine . find_first_not_of		646648	0					
ANR	647006	MemberAccess	currentLine . find_first_not_of		646648	0					
ANR	647007	Identifier	currentLine		646648	0					
ANR	647008	Identifier	find_first_not_of		646648	1					
ANR	647009	ArgumentList	""" \\t"""		646648	1					
ANR	647010	Argument	""" \\t"""		646648	0					
ANR	647011	PrimaryExpression	""" \\t"""		646648	0					
ANR	647012	Argument	charNumSave + 1		646648	1					
ANR	647013	AdditiveExpression	charNumSave + 1		646648	0		+			
ANR	647014	Identifier	charNumSave		646648	0					
ANR	647015	PrimaryExpression	1		646648	1					
ANR	647016	IfStatement	if ( wsAfter == string :: npos || isBeforeAnyComment ( ) )		646648	12					
ANR	647017	Condition	wsAfter == string :: npos || isBeforeAnyComment ( )	4033:5:116455:116501	646648	0	True				
ANR	647018	OrExpression	wsAfter == string :: npos || isBeforeAnyComment ( )		646648	0		||			
ANR	647019	EqualityExpression	wsAfter == string :: npos		646648	0		==			
ANR	647020	Identifier	wsAfter		646648	0					
ANR	647021	Identifier	string :: npos		646648	1					
ANR	647022	CallExpression	isBeforeAnyComment ( )		646648	1					
ANR	647023	Callee	isBeforeAnyComment		646648	0					
ANR	647024	Identifier	isBeforeAnyComment		646648	0					
ANR	647025	ArgumentList			646648	1					
ANR	647026	ExpressionStatement	wsAfter = 0	4034:2:116506:116517	646648	1	True				
ANR	647027	AssignmentExpression	wsAfter = 0		646648	0		=			
ANR	647028	Identifier	wsAfter		646648	0					
ANR	647029	PrimaryExpression	0		646648	1					
ANR	647030	ElseStatement	else		646648	0					
ANR	647031	ExpressionStatement	wsAfter = wsAfter - charNumSave - 1	4036:2:116527:116562	646648	0	True				
ANR	647032	AssignmentExpression	wsAfter = wsAfter - charNumSave - 1		646648	0		=			
ANR	647033	Identifier	wsAfter		646648	0					
ANR	647034	AdditiveExpression	wsAfter - charNumSave - 1		646648	1		-			
ANR	647035	Identifier	wsAfter		646648	0					
ANR	647036	AdditiveExpression	charNumSave - 1		646648	1		-			
ANR	647037	Identifier	charNumSave		646648	0					
ANR	647038	PrimaryExpression	1		646648	1					
ANR	647039	IfStatement	if ( isAfterScopeResolution )		646648	13					
ANR	647040	Condition	isAfterScopeResolution	4038:5:116631:116652	646648	0	True				
ANR	647041	Identifier	isAfterScopeResolution		646648	0					
ANR	647042	CompoundStatement		72:2:2192:2247	646648	1					
ANR	647043	IdentifierDeclStatement	"size_t lastText = formattedLine . find_last_not_of ( "" \\t"" ) ;"	4040:2:116660:116715	646648	0	True				
ANR	647044	IdentifierDecl	"lastText = formattedLine . find_last_not_of ( "" \\t"" )"		646648	0					
ANR	647045	IdentifierDeclType	size_t		646648	0					
ANR	647046	Identifier	lastText		646648	1					
ANR	647047	AssignmentExpression	"lastText = formattedLine . find_last_not_of ( "" \\t"" )"		646648	2		=			
ANR	647048	Identifier	lastText		646648	0					
ANR	647049	CallExpression	"formattedLine . find_last_not_of ( "" \\t"" )"		646648	1					
ANR	647050	Callee	formattedLine . find_last_not_of		646648	0					
ANR	647051	MemberAccess	formattedLine . find_last_not_of		646648	0					
ANR	647052	Identifier	formattedLine		646648	0					
ANR	647053	Identifier	find_last_not_of		646648	1					
ANR	647054	ArgumentList	""" \\t"""		646648	1					
ANR	647055	Argument	""" \\t"""		646648	0					
ANR	647056	PrimaryExpression	""" \\t"""		646648	0					
ANR	647057	ExpressionStatement	"formattedLine . insert ( lastText + 1 , sequenceToInsert )"	4041:2:116719:116771	646648	1	True				
ANR	647058	CallExpression	"formattedLine . insert ( lastText + 1 , sequenceToInsert )"		646648	0					
ANR	647059	Callee	formattedLine . insert		646648	0					
ANR	647060	MemberAccess	formattedLine . insert		646648	0					
ANR	647061	Identifier	formattedLine		646648	0					
ANR	647062	Identifier	insert		646648	1					
ANR	647063	ArgumentList	lastText + 1		646648	1					
ANR	647064	Argument	lastText + 1		646648	0					
ANR	647065	AdditiveExpression	lastText + 1		646648	0		+			
ANR	647066	Identifier	lastText		646648	0					
ANR	647067	PrimaryExpression	1		646648	1					
ANR	647068	Argument	sequenceToInsert		646648	1					
ANR	647069	Identifier	sequenceToInsert		646648	0					
ANR	647070	ExpressionStatement	appendSpacePad ( )	4042:2:116775:116791	646648	2	True				
ANR	647071	CallExpression	appendSpacePad ( )		646648	0					
ANR	647072	Callee	appendSpacePad		646648	0					
ANR	647073	Identifier	appendSpacePad		646648	0					
ANR	647074	ArgumentList			646648	1					
ANR	647075	ElseStatement	else		646648	0					
ANR	647076	IfStatement	if ( formattedLine . length ( ) > 0 )		646648	0					
ANR	647077	Condition	formattedLine . length ( ) > 0	4044:10:116806:116831	646648	0	True				
ANR	647078	RelationalExpression	formattedLine . length ( ) > 0		646648	0		>			
ANR	647079	CallExpression	formattedLine . length ( )		646648	0					
ANR	647080	Callee	formattedLine . length		646648	0					
ANR	647081	MemberAccess	formattedLine . length		646648	0					
ANR	647082	Identifier	formattedLine		646648	0					
ANR	647083	Identifier	length		646648	1					
ANR	647084	ArgumentList			646648	1					
ANR	647085	PrimaryExpression	0		646648	1					
ANR	647086	CompoundStatement		91:2:2756:2804	646648	1					
ANR	647087	IfStatement	if ( wsBefore + wsAfter < 2 )		646648	0					
ANR	647088	Condition	wsBefore + wsAfter < 2	4047:6:116896:116917	646648	0	True				
ANR	647089	RelationalExpression	wsBefore + wsAfter < 2		646648	0		<			
ANR	647090	AdditiveExpression	wsBefore + wsAfter		646648	0		+			
ANR	647091	Identifier	wsBefore		646648	0					
ANR	647092	Identifier	wsAfter		646648	1					
ANR	647093	PrimaryExpression	2		646648	1					
ANR	647094	CompoundStatement		81:3:2459:2508	646648	1					
ANR	647095	IdentifierDeclStatement	size_t charsToAppend = ( 2 - ( wsBefore + wsAfter ) ) ;	4049:3:116927:116976	646648	0	True				
ANR	647096	IdentifierDecl	charsToAppend = ( 2 - ( wsBefore + wsAfter ) )		646648	0					
ANR	647097	IdentifierDeclType	size_t		646648	0					
ANR	647098	Identifier	charsToAppend		646648	1					
ANR	647099	AssignmentExpression	charsToAppend = ( 2 - ( wsBefore + wsAfter ) )		646648	2		=			
ANR	647100	Identifier	charsToAppend		646648	0					
ANR	647101	AdditiveExpression	2 - ( wsBefore + wsAfter )		646648	1		-			
ANR	647102	PrimaryExpression	2		646648	0					
ANR	647103	AdditiveExpression	wsBefore + wsAfter		646648	1		+			
ANR	647104	Identifier	wsBefore		646648	0					
ANR	647105	Identifier	wsAfter		646648	1					
ANR	647106	ExpressionStatement	"formattedLine . append ( charsToAppend , ' ' )"	4050:3:116981:117021	646648	1	True				
ANR	647107	CallExpression	"formattedLine . append ( charsToAppend , ' ' )"		646648	0					
ANR	647108	Callee	formattedLine . append		646648	0					
ANR	647109	MemberAccess	formattedLine . append		646648	0					
ANR	647110	Identifier	formattedLine		646648	0					
ANR	647111	Identifier	append		646648	1					
ANR	647112	ArgumentList	charsToAppend		646648	1					
ANR	647113	Argument	charsToAppend		646648	0					
ANR	647114	Identifier	charsToAppend		646648	0					
ANR	647115	Argument	' '		646648	1					
ANR	647116	PrimaryExpression	' '		646648	0					
ANR	647117	ExpressionStatement	spacePadNum += charsToAppend	4051:3:117026:117054	646648	2	True				
ANR	647118	AssignmentExpression	spacePadNum += charsToAppend		646648	0		+=			
ANR	647119	Identifier	spacePadNum		646648	0					
ANR	647120	Identifier	charsToAppend		646648	1					
ANR	647121	IfStatement	if ( wsBefore == 0 )		646648	3					
ANR	647122	Condition	wsBefore == 0	4052:7:117063:117075	646648	0	True				
ANR	647123	EqualityExpression	wsBefore == 0		646648	0		==			
ANR	647124	Identifier	wsBefore		646648	0					
ANR	647125	PrimaryExpression	0		646648	1					
ANR	647126	ExpressionStatement	wsBefore ++	4053:4:117082:117092	646648	1	True				
ANR	647127	PostIncDecOperationExpression	wsBefore ++		646648	0					
ANR	647128	Identifier	wsBefore		646648	0					
ANR	647129	IncDec	++		646648	1					
ANR	647130	IfStatement	if ( wsAfter == 0 )		646648	4					
ANR	647131	Condition	wsAfter == 0	4054:7:117101:117112	646648	0	True				
ANR	647132	EqualityExpression	wsAfter == 0		646648	0		==			
ANR	647133	Identifier	wsAfter		646648	0					
ANR	647134	PrimaryExpression	0		646648	1					
ANR	647135	ExpressionStatement	wsAfter ++	4055:4:117119:117128	646648	1	True				
ANR	647136	PostIncDecOperationExpression	wsAfter ++		646648	0					
ANR	647137	Identifier	wsAfter		646648	0					
ANR	647138	IncDec	++		646648	1					
ANR	647139	IdentifierDeclStatement	size_t padAfter = ( wsBefore + wsAfter ) / 2 ;	4058:2:117178:117220	646648	1	True				
ANR	647140	IdentifierDecl	padAfter = ( wsBefore + wsAfter ) / 2		646648	0					
ANR	647141	IdentifierDeclType	size_t		646648	0					
ANR	647142	Identifier	padAfter		646648	1					
ANR	647143	AssignmentExpression	padAfter = ( wsBefore + wsAfter ) / 2		646648	2		=			
ANR	647144	Identifier	padAfter		646648	0					
ANR	647145	MultiplicativeExpression	( wsBefore + wsAfter ) / 2		646648	1		/			
ANR	647146	AdditiveExpression	wsBefore + wsAfter		646648	0		+			
ANR	647147	Identifier	wsBefore		646648	0					
ANR	647148	Identifier	wsAfter		646648	1					
ANR	647149	PrimaryExpression	2		646648	1					
ANR	647150	IdentifierDeclStatement	size_t index = formattedLine . length ( ) - padAfter ;	4059:2:117224:117272	646648	2	True				
ANR	647151	IdentifierDecl	index = formattedLine . length ( ) - padAfter		646648	0					
ANR	647152	IdentifierDeclType	size_t		646648	0					
ANR	647153	Identifier	index		646648	1					
ANR	647154	AssignmentExpression	index = formattedLine . length ( ) - padAfter		646648	2		=			
ANR	647155	Identifier	index		646648	0					
ANR	647156	AdditiveExpression	formattedLine . length ( ) - padAfter		646648	1		-			
ANR	647157	CallExpression	formattedLine . length ( )		646648	0					
ANR	647158	Callee	formattedLine . length		646648	0					
ANR	647159	MemberAccess	formattedLine . length		646648	0					
ANR	647160	Identifier	formattedLine		646648	0					
ANR	647161	Identifier	length		646648	1					
ANR	647162	ArgumentList			646648	1					
ANR	647163	Identifier	padAfter		646648	1					
ANR	647164	ExpressionStatement	"formattedLine . insert ( index , sequenceToInsert )"	4060:2:117276:117321	646648	3	True				
ANR	647165	CallExpression	"formattedLine . insert ( index , sequenceToInsert )"		646648	0					
ANR	647166	Callee	formattedLine . insert		646648	0					
ANR	647167	MemberAccess	formattedLine . insert		646648	0					
ANR	647168	Identifier	formattedLine		646648	0					
ANR	647169	Identifier	insert		646648	1					
ANR	647170	ArgumentList	index		646648	1					
ANR	647171	Argument	index		646648	0					
ANR	647172	Identifier	index		646648	0					
ANR	647173	Argument	sequenceToInsert		646648	1					
ANR	647174	Identifier	sequenceToInsert		646648	0					
ANR	647175	ElseStatement	else		646648	0					
ANR	647176	CompoundStatement		95:1:2896:2896	646648	0					
ANR	647177	ExpressionStatement	formattedLine . append ( sequenceToInsert )	4064:2:117368:117406	646648	0	True				
ANR	647178	CallExpression	formattedLine . append ( sequenceToInsert )		646648	0					
ANR	647179	Callee	formattedLine . append		646648	0					
ANR	647180	MemberAccess	formattedLine . append		646648	0					
ANR	647181	Identifier	formattedLine		646648	0					
ANR	647182	Identifier	append		646648	1					
ANR	647183	ArgumentList	sequenceToInsert		646648	1					
ANR	647184	Argument	sequenceToInsert		646648	0					
ANR	647185	Identifier	sequenceToInsert		646648	0					
ANR	647186	IfStatement	if ( wsAfter == 0 )		646648	1					
ANR	647187	Condition	wsAfter == 0	4065:6:117414:117425	646648	0	True				
ANR	647188	EqualityExpression	wsAfter == 0		646648	0		==			
ANR	647189	Identifier	wsAfter		646648	0					
ANR	647190	PrimaryExpression	0		646648	1					
ANR	647191	ExpressionStatement	wsAfter ++	4066:3:117431:117440	646648	1	True				
ANR	647192	PostIncDecOperationExpression	wsAfter ++		646648	0					
ANR	647193	Identifier	wsAfter		646648	0					
ANR	647194	IncDec	++		646648	1					
ANR	647195	ExpressionStatement	"formattedLine . append ( wsAfter , ' ' )"	4067:2:117444:117478	646648	2	True				
ANR	647196	CallExpression	"formattedLine . append ( wsAfter , ' ' )"		646648	0					
ANR	647197	Callee	formattedLine . append		646648	0					
ANR	647198	MemberAccess	formattedLine . append		646648	0					
ANR	647199	Identifier	formattedLine		646648	0					
ANR	647200	Identifier	append		646648	1					
ANR	647201	ArgumentList	wsAfter		646648	1					
ANR	647202	Argument	wsAfter		646648	0					
ANR	647203	Identifier	wsAfter		646648	0					
ANR	647204	Argument	' '		646648	1					
ANR	647205	PrimaryExpression	' '		646648	0					
ANR	647206	ExpressionStatement	spacePadNum += wsAfter	4068:2:117482:117504	646648	3	True				
ANR	647207	AssignmentExpression	spacePadNum += wsAfter		646648	0		+=			
ANR	647208	Identifier	spacePadNum		646648	0					
ANR	647209	Identifier	wsAfter		646648	1					
ANR	647210	IfStatement	if ( maxCodeLength != string :: npos && formattedLine . length ( ) > 0 )		646648	14					
ANR	647211	Condition	maxCodeLength != string :: npos && formattedLine . length ( ) > 0	4071:5:117573:117631	646648	0	True				
ANR	647212	AndExpression	maxCodeLength != string :: npos && formattedLine . length ( ) > 0		646648	0		&&			
ANR	647213	EqualityExpression	maxCodeLength != string :: npos		646648	0		!=			
ANR	647214	Identifier	maxCodeLength		646648	0					
ANR	647215	Identifier	string :: npos		646648	1					
ANR	647216	RelationalExpression	formattedLine . length ( ) > 0		646648	1		>			
ANR	647217	CallExpression	formattedLine . length ( )		646648	0					
ANR	647218	Callee	formattedLine . length		646648	0					
ANR	647219	MemberAccess	formattedLine . length		646648	0					
ANR	647220	Identifier	formattedLine		646648	0					
ANR	647221	Identifier	length		646648	1					
ANR	647222	ArgumentList			646648	1					
ANR	647223	PrimaryExpression	0		646648	1					
ANR	647224	CompoundStatement		105:2:3171:3223	646648	1					
ANR	647225	IdentifierDeclStatement	"size_t index = formattedLine . find_last_not_of ( "" \\t"" ) ;"	4073:2:117639:117691	646648	0	True				
ANR	647226	IdentifierDecl	"index = formattedLine . find_last_not_of ( "" \\t"" )"		646648	0					
ANR	647227	IdentifierDeclType	size_t		646648	0					
ANR	647228	Identifier	index		646648	1					
ANR	647229	AssignmentExpression	"index = formattedLine . find_last_not_of ( "" \\t"" )"		646648	2		=			
ANR	647230	Identifier	index		646648	0					
ANR	647231	CallExpression	"formattedLine . find_last_not_of ( "" \\t"" )"		646648	1					
ANR	647232	Callee	formattedLine . find_last_not_of		646648	0					
ANR	647233	MemberAccess	formattedLine . find_last_not_of		646648	0					
ANR	647234	Identifier	formattedLine		646648	0					
ANR	647235	Identifier	find_last_not_of		646648	1					
ANR	647236	ArgumentList	""" \\t"""		646648	1					
ANR	647237	Argument	""" \\t"""		646648	0					
ANR	647238	PrimaryExpression	""" \\t"""		646648	0					
ANR	647239	IfStatement	if ( index != string :: npos && ( index < formattedLine . length ( ) - 1 ) )		646648	1					
ANR	647240	Condition	index != string :: npos && ( index < formattedLine . length ( ) - 1 )	4074:6:117699:117759	646648	0	True				
ANR	647241	AndExpression	index != string :: npos && ( index < formattedLine . length ( ) - 1 )		646648	0		&&			
ANR	647242	EqualityExpression	index != string :: npos		646648	0		!=			
ANR	647243	Identifier	index		646648	0					
ANR	647244	Identifier	string :: npos		646648	1					
ANR	647245	RelationalExpression	index < formattedLine . length ( ) - 1		646648	1		<			
ANR	647246	Identifier	index		646648	0					
ANR	647247	AdditiveExpression	formattedLine . length ( ) - 1		646648	1		-			
ANR	647248	CallExpression	formattedLine . length ( )		646648	0					
ANR	647249	Callee	formattedLine . length		646648	0					
ANR	647250	MemberAccess	formattedLine . length		646648	0					
ANR	647251	Identifier	formattedLine		646648	0					
ANR	647252	Identifier	length		646648	1					
ANR	647253	ArgumentList			646648	1					
ANR	647254	PrimaryExpression	1		646648	1					
ANR	647255	CompoundStatement		107:2:3296:3296	646648	1					
ANR	647256	ExpressionStatement	index ++	4076:3:117769:117776	646648	0	True				
ANR	647257	PostIncDecOperationExpression	index ++		646648	0					
ANR	647258	Identifier	index		646648	0					
ANR	647259	IncDec	++		646648	1					
ANR	647260	ExpressionStatement	updateFormattedLineSplitPointsPointerOrReference ( index )	4077:3:117781:117836	646648	1	True				
ANR	647261	CallExpression	updateFormattedLineSplitPointsPointerOrReference ( index )		646648	0					
ANR	647262	Callee	updateFormattedLineSplitPointsPointerOrReference		646648	0					
ANR	647263	Identifier	updateFormattedLineSplitPointsPointerOrReference		646648	0					
ANR	647264	ArgumentList	index		646648	1					
ANR	647265	Argument	index		646648	0					
ANR	647266	Identifier	index		646648	0					
ANR	647267	ExpressionStatement	testForTimeToSplitFormattedLine ( )	4078:3:117841:117874	646648	2	True				
ANR	647268	CallExpression	testForTimeToSplitFormattedLine ( )		646648	0					
ANR	647269	Callee	testForTimeToSplitFormattedLine		646648	0					
ANR	647270	Identifier	testForTimeToSplitFormattedLine		646648	0					
ANR	647271	ArgumentList			646648	1					
ANR	647272	ReturnType	void		646648	1					
ANR	647273	Identifier	ASFormatter :: formatPointerOrReferenceToMiddle		646648	2					
ANR	647274	ParameterList			646648	3					
ANR	647275	CFGEntryNode	ENTRY		646648		True				
ANR	647276	CFGExitNode	EXIT		646648		True				
ANR	647277	Symbol	previousNonWSChar		646648						
ANR	647278	Symbol	charNumSave		646648						
ANR	647279	Symbol	charsToAppend		646648						
ANR	647280	Symbol	maxCodeLength		646648						
ANR	647281	Symbol	string :: npos		646648						
ANR	647282	Symbol	currentLine . find_last_not_of		646648						
ANR	647283	Symbol	wsBefore		646648						
ANR	647284	Symbol	isWhiteSpace		646648						
ANR	647285	Symbol	* currentLine		646648						
ANR	647286	Symbol	isAfterScopeResolution		646648						
ANR	647287	Symbol	formattedLine . find_last_not_of		646648						
ANR	647288	Symbol	isBeforeAnyComment		646648						
ANR	647289	Symbol	REF_SAME_AS_PTR		646648						
ANR	647290	Symbol	isSequenceReached		646648						
ANR	647291	Symbol	sequenceToInsert		646648						
ANR	647292	Symbol	REF_ALIGN_MIDDLE		646648						
ANR	647293	Symbol	charNum		646648						
ANR	647294	Symbol	currentLine		646648						
ANR	647295	Symbol	lastText		646648						
ANR	647296	Symbol	currentChar		646648						
ANR	647297	Symbol	padAfter		646648						
ANR	647298	Symbol	peekNextChar		646648						
ANR	647299	Symbol	wsAfter		646648						
ANR	647300	Symbol	spacePadNum		646648						
ANR	647301	Symbol	referenceAlignment		646648						
ANR	647302	Symbol	i		646648						
ANR	647303	Symbol	index		646648						
ANR	647304	Symbol	currentLine . find_first_not_of		646648						
ANR	647305	Symbol	REF_ALIGN_TYPE		646648						
ANR	647306	Symbol	formattedLine		646648						
ANR	647307	Symbol	* i		646648						
ANR	647308	Symbol	currentLine . length		646648						
ANR	647309	Symbol	formattedLine . length		646648						
ANR	647310	Symbol	isJavaStyle		646648						
ANR	647311	Function	ASFormatter :: formatPointerOrReferenceToName	4086:0:117944:121372							
ANR	647312	FunctionDef	ASFormatter :: formatPointerOrReferenceToName ()		647311	0					
ANR	647313	CompoundStatement		4087:0:117995:121372	647311	0					
ANR	647314	ExpressionStatement	assert ( currentChar == '*' || currentChar == '&' || currentChar == '^' )	4088:1:117998:118068	647311	0	True				
ANR	647315	CallExpression	assert ( currentChar == '*' || currentChar == '&' || currentChar == '^' )		647311	0					
ANR	647316	Callee	assert		647311	0					
ANR	647317	Identifier	assert		647311	0					
ANR	647318	ArgumentList	currentChar == '*' || currentChar == '&' || currentChar == '^'		647311	1					
ANR	647319	Argument	currentChar == '*' || currentChar == '&' || currentChar == '^'		647311	0					
ANR	647320	OrExpression	currentChar == '*' || currentChar == '&' || currentChar == '^'		647311	0		||			
ANR	647321	EqualityExpression	currentChar == '*'		647311	0		==			
ANR	647322	Identifier	currentChar		647311	0					
ANR	647323	PrimaryExpression	'*'		647311	1					
ANR	647324	OrExpression	currentChar == '&' || currentChar == '^'		647311	1		||			
ANR	647325	EqualityExpression	currentChar == '&'		647311	0		==			
ANR	647326	Identifier	currentChar		647311	0					
ANR	647327	PrimaryExpression	'&'		647311	1					
ANR	647328	EqualityExpression	currentChar == '^'		647311	1		==			
ANR	647329	Identifier	currentChar		647311	0					
ANR	647330	PrimaryExpression	'^'		647311	1					
ANR	647331	ExpressionStatement	assert ( ! isJavaStyle ( ) )	4089:1:118071:118093	647311	1	True				
ANR	647332	CallExpression	assert ( ! isJavaStyle ( ) )		647311	0					
ANR	647333	Callee	assert		647311	0					
ANR	647334	Identifier	assert		647311	0					
ANR	647335	ArgumentList	! isJavaStyle ( )		647311	1					
ANR	647336	Argument	! isJavaStyle ( )		647311	0					
ANR	647337	UnaryOperationExpression	! isJavaStyle ( )		647311	0					
ANR	647338	UnaryOperator	!		647311	0					
ANR	647339	CallExpression	isJavaStyle ( )		647311	1					
ANR	647340	Callee	isJavaStyle		647311	0					
ANR	647341	Identifier	isJavaStyle		647311	0					
ANR	647342	ArgumentList			647311	1					
ANR	647343	IdentifierDeclStatement	bool isOldPRCentered = isPointerOrReferenceCentered ( ) ;	4092:1:118132:118185	647311	2	True				
ANR	647344	IdentifierDecl	isOldPRCentered = isPointerOrReferenceCentered ( )		647311	0					
ANR	647345	IdentifierDeclType	bool		647311	0					
ANR	647346	Identifier	isOldPRCentered		647311	1					
ANR	647347	AssignmentExpression	isOldPRCentered = isPointerOrReferenceCentered ( )		647311	2		=			
ANR	647348	Identifier	isOldPRCentered		647311	0					
ANR	647349	CallExpression	isPointerOrReferenceCentered ( )		647311	1					
ANR	647350	Callee	isPointerOrReferenceCentered		647311	0					
ANR	647351	Identifier	isPointerOrReferenceCentered		647311	0					
ANR	647352	ArgumentList			647311	1					
ANR	647353	IdentifierDeclStatement	"size_t startNum = formattedLine . find_last_not_of ( "" \\t"" ) ;"	4094:1:118189:118244	647311	3	True				
ANR	647354	IdentifierDecl	"startNum = formattedLine . find_last_not_of ( "" \\t"" )"		647311	0					
ANR	647355	IdentifierDeclType	size_t		647311	0					
ANR	647356	Identifier	startNum		647311	1					
ANR	647357	AssignmentExpression	"startNum = formattedLine . find_last_not_of ( "" \\t"" )"		647311	2		=			
ANR	647358	Identifier	startNum		647311	0					
ANR	647359	CallExpression	"formattedLine . find_last_not_of ( "" \\t"" )"		647311	1					
ANR	647360	Callee	formattedLine . find_last_not_of		647311	0					
ANR	647361	MemberAccess	formattedLine . find_last_not_of		647311	0					
ANR	647362	Identifier	formattedLine		647311	0					
ANR	647363	Identifier	find_last_not_of		647311	1					
ANR	647364	ArgumentList	""" \\t"""		647311	1					
ANR	647365	Argument	""" \\t"""		647311	0					
ANR	647366	PrimaryExpression	""" \\t"""		647311	0					
ANR	647367	IfStatement	if ( startNum == string :: npos )		647311	4					
ANR	647368	Condition	startNum == string :: npos	4095:5:118251:118274	647311	0	True				
ANR	647369	EqualityExpression	startNum == string :: npos		647311	0		==			
ANR	647370	Identifier	startNum		647311	0					
ANR	647371	Identifier	string :: npos		647311	1					
ANR	647372	ExpressionStatement	startNum = 0	4096:2:118279:118291	647311	1	True				
ANR	647373	AssignmentExpression	startNum = 0		647311	0		=			
ANR	647374	Identifier	startNum		647311	0					
ANR	647375	PrimaryExpression	0		647311	1					
ANR	647376	IdentifierDeclStatement	"string sequenceToInsert ( 1 , currentChar ) ;"	4097:1:118294:118333	647311	5	True				
ANR	647377	IdentifierDecl	"sequenceToInsert ( 1 , currentChar )"		647311	0					
ANR	647378	IdentifierDeclType	string		647311	0					
ANR	647379	Identifier	sequenceToInsert		647311	1					
ANR	647380	Expression	"1 , currentChar"		647311	2					
ANR	647381	PrimaryExpression	1		647311	0					
ANR	647382	Identifier	currentChar		647311	1					
ANR	647383	IfStatement	"if ( isSequenceReached ( ""**"" ) )"		647311	6					
ANR	647384	Condition	"isSequenceReached ( ""**"" )"	4098:5:118340:118362	647311	0	True				
ANR	647385	CallExpression	"isSequenceReached ( ""**"" )"		647311	0					
ANR	647386	Callee	isSequenceReached		647311	0					
ANR	647387	Identifier	isSequenceReached		647311	0					
ANR	647388	ArgumentList	"""**"""		647311	1					
ANR	647389	Argument	"""**"""		647311	0					
ANR	647390	PrimaryExpression	"""**"""		647311	0					
ANR	647391	CompoundStatement		13:1:370:370	647311	1					
ANR	647392	ExpressionStatement	"sequenceToInsert = ""**"""	4100:2:118370:118393	647311	0	True				
ANR	647393	AssignmentExpression	"sequenceToInsert = ""**"""		647311	0		=			
ANR	647394	Identifier	sequenceToInsert		647311	0					
ANR	647395	PrimaryExpression	"""**"""		647311	1					
ANR	647396	ExpressionStatement	goForward ( 1 )	4101:2:118397:118409	647311	1	True				
ANR	647397	CallExpression	goForward ( 1 )		647311	0					
ANR	647398	Callee	goForward		647311	0					
ANR	647399	Identifier	goForward		647311	0					
ANR	647400	ArgumentList	1		647311	1					
ANR	647401	Argument	1		647311	0					
ANR	647402	PrimaryExpression	1		647311	0					
ANR	647403	ElseStatement	else		647311	0					
ANR	647404	IfStatement	"if ( isSequenceReached ( ""&&"" ) )"		647311	0					
ANR	647405	Condition	"isSequenceReached ( ""&&"" )"	4103:10:118424:118446	647311	0	True				
ANR	647406	CallExpression	"isSequenceReached ( ""&&"" )"		647311	0					
ANR	647407	Callee	isSequenceReached		647311	0					
ANR	647408	Identifier	isSequenceReached		647311	0					
ANR	647409	ArgumentList	"""&&"""		647311	1					
ANR	647410	Argument	"""&&"""		647311	0					
ANR	647411	PrimaryExpression	"""&&"""		647311	0					
ANR	647412	CompoundStatement		18:1:454:454	647311	1					
ANR	647413	ExpressionStatement	"sequenceToInsert = ""&&"""	4105:2:118454:118477	647311	0	True				
ANR	647414	AssignmentExpression	"sequenceToInsert = ""&&"""		647311	0		=			
ANR	647415	Identifier	sequenceToInsert		647311	0					
ANR	647416	PrimaryExpression	"""&&"""		647311	1					
ANR	647417	ExpressionStatement	goForward ( 1 )	4106:2:118481:118493	647311	1	True				
ANR	647418	CallExpression	goForward ( 1 )		647311	0					
ANR	647419	Callee	goForward		647311	0					
ANR	647420	Identifier	goForward		647311	0					
ANR	647421	ArgumentList	1		647311	1					
ANR	647422	Argument	1		647311	0					
ANR	647423	PrimaryExpression	1		647311	0					
ANR	647424	ElseStatement	else		647311	0					
ANR	647425	IfStatement	if ( currentChar == '*' && peekNextChar ( ) == '&' )		647311	0					
ANR	647426	Condition	currentChar == '*' && peekNextChar ( ) == '&'	4109:10:118557:118599	647311	0	True				
ANR	647427	AndExpression	currentChar == '*' && peekNextChar ( ) == '&'		647311	0		&&			
ANR	647428	EqualityExpression	currentChar == '*'		647311	0		==			
ANR	647429	Identifier	currentChar		647311	0					
ANR	647430	PrimaryExpression	'*'		647311	1					
ANR	647431	EqualityExpression	peekNextChar ( ) == '&'		647311	1		==			
ANR	647432	CallExpression	peekNextChar ( )		647311	0					
ANR	647433	Callee	peekNextChar		647311	0					
ANR	647434	Identifier	peekNextChar		647311	0					
ANR	647435	ArgumentList			647311	1					
ANR	647436	PrimaryExpression	'&'		647311	1					
ANR	647437	CompoundStatement		24:1:607:607	647311	1					
ANR	647438	ExpressionStatement	"sequenceToInsert = ""*&"""	4111:2:118607:118630	647311	0	True				
ANR	647439	AssignmentExpression	"sequenceToInsert = ""*&"""		647311	0		=			
ANR	647440	Identifier	sequenceToInsert		647311	0					
ANR	647441	PrimaryExpression	"""*&"""		647311	1					
ANR	647442	ExpressionStatement	goForward ( 1 )	4112:2:118634:118646	647311	1	True				
ANR	647443	CallExpression	goForward ( 1 )		647311	0					
ANR	647444	Callee	goForward		647311	0					
ANR	647445	Identifier	goForward		647311	0					
ANR	647446	ArgumentList	1		647311	1					
ANR	647447	Argument	1		647311	0					
ANR	647448	PrimaryExpression	1		647311	0					
ANR	647449	ForStatement	for ( size_t i = charNum ; i < currentLine . length ( ) - 1 && isWhiteSpace ( currentLine [ i ] ) ; i ++ )		647311	2					
ANR	647450	ForInit	size_t i = charNum ;	4113:7:118655:118673	647311	0	True				
ANR	647451	IdentifierDeclStatement	size_t i = charNum ;		647311	0					
ANR	647452	IdentifierDecl	i = charNum		647311	0					
ANR	647453	IdentifierDeclType	size_t		647311	0					
ANR	647454	Identifier	i		647311	1					
ANR	647455	AssignmentExpression	i = charNum		647311	2		=			
ANR	647456	Identifier	charNum		647311	0					
ANR	647457	Identifier	charNum		647311	1					
ANR	647458	Condition	i < currentLine . length ( ) - 1 && isWhiteSpace ( currentLine [ i ] )	4113:27:118675:118734	647311	1	True				
ANR	647459	AndExpression	i < currentLine . length ( ) - 1 && isWhiteSpace ( currentLine [ i ] )		647311	0		&&			
ANR	647460	RelationalExpression	i < currentLine . length ( ) - 1		647311	0		<			
ANR	647461	Identifier	i		647311	0					
ANR	647462	AdditiveExpression	currentLine . length ( ) - 1		647311	1		-			
ANR	647463	CallExpression	currentLine . length ( )		647311	0					
ANR	647464	Callee	currentLine . length		647311	0					
ANR	647465	MemberAccess	currentLine . length		647311	0					
ANR	647466	Identifier	currentLine		647311	0					
ANR	647467	Identifier	length		647311	1					
ANR	647468	ArgumentList			647311	1					
ANR	647469	PrimaryExpression	1		647311	1					
ANR	647470	CallExpression	isWhiteSpace ( currentLine [ i ] )		647311	1					
ANR	647471	Callee	isWhiteSpace		647311	0					
ANR	647472	Identifier	isWhiteSpace		647311	0					
ANR	647473	ArgumentList	currentLine [ i ]		647311	1					
ANR	647474	Argument	currentLine [ i ]		647311	0					
ANR	647475	ArrayIndexing	currentLine [ i ]		647311	0					
ANR	647476	Identifier	currentLine		647311	0					
ANR	647477	Identifier	i		647311	1					
ANR	647478	PostIncDecOperationExpression	i ++	4113:89:118737:118739	647311	2	True				
ANR	647479	Identifier	i		647311	0					
ANR	647480	IncDec	++		647311	1					
ANR	647481	ExpressionStatement	goForward ( 1 )	4114:3:118745:118757	647311	3	True				
ANR	647482	CallExpression	goForward ( 1 )		647311	0					
ANR	647483	Callee	goForward		647311	0					
ANR	647484	Identifier	goForward		647311	0					
ANR	647485	ArgumentList	1		647311	1					
ANR	647486	Argument	1		647311	0					
ANR	647487	PrimaryExpression	1		647311	0					
ANR	647488	IdentifierDeclStatement	char peekedChar = peekNextChar ( ) ;	4116:1:118763:118795	647311	7	True				
ANR	647489	IdentifierDecl	peekedChar = peekNextChar ( )		647311	0					
ANR	647490	IdentifierDeclType	char		647311	0					
ANR	647491	Identifier	peekedChar		647311	1					
ANR	647492	AssignmentExpression	peekedChar = peekNextChar ( )		647311	2		=			
ANR	647493	Identifier	peekedChar		647311	0					
ANR	647494	CallExpression	peekNextChar ( )		647311	1					
ANR	647495	Callee	peekNextChar		647311	0					
ANR	647496	Identifier	peekNextChar		647311	0					
ANR	647497	ArgumentList			647311	1					
ANR	647498	IdentifierDeclStatement	bool isAfterScopeResolution = previousNonWSChar == ':' ;	4117:1:118798:118852	647311	8	True				
ANR	647499	IdentifierDecl	isAfterScopeResolution = previousNonWSChar == ':'		647311	0					
ANR	647500	IdentifierDeclType	bool		647311	0					
ANR	647501	Identifier	isAfterScopeResolution		647311	1					
ANR	647502	AssignmentExpression	isAfterScopeResolution = previousNonWSChar == ':'		647311	2		=			
ANR	647503	Identifier	isAfterScopeResolution		647311	0					
ANR	647504	EqualityExpression	previousNonWSChar == ':'		647311	1		==			
ANR	647505	Identifier	previousNonWSChar		647311	0					
ANR	647506	PrimaryExpression	':'		647311	1					
ANR	647507	IfStatement	"if ( ! isBeforeAnyComment ( ) && ( int ) currentLine . find_first_not_of ( "" \\t"" , charNum + 1 ) > charNum )"		647311	9					
ANR	647508	Condition	"! isBeforeAnyComment ( ) && ( int ) currentLine . find_first_not_of ( "" \\t"" , charNum + 1 ) > charNum"	4119:5:118922:119020	647311	0	True				
ANR	647509	AndExpression	"! isBeforeAnyComment ( ) && ( int ) currentLine . find_first_not_of ( "" \\t"" , charNum + 1 ) > charNum"		647311	0		&&			
ANR	647510	UnaryOperationExpression	! isBeforeAnyComment ( )		647311	0					
ANR	647511	UnaryOperator	!		647311	0					
ANR	647512	CallExpression	isBeforeAnyComment ( )		647311	1					
ANR	647513	Callee	isBeforeAnyComment		647311	0					
ANR	647514	Identifier	isBeforeAnyComment		647311	0					
ANR	647515	ArgumentList			647311	1					
ANR	647516	RelationalExpression	"( int ) currentLine . find_first_not_of ( "" \\t"" , charNum + 1 ) > charNum"		647311	1		>			
ANR	647517	CastExpression	"( int ) currentLine . find_first_not_of ( "" \\t"" , charNum + 1 )"		647311	0					
ANR	647518	CastTarget	int		647311	0					
ANR	647519	CallExpression	"currentLine . find_first_not_of ( "" \\t"" , charNum + 1 )"		647311	1					
ANR	647520	Callee	currentLine . find_first_not_of		647311	0					
ANR	647521	MemberAccess	currentLine . find_first_not_of		647311	0					
ANR	647522	Identifier	currentLine		647311	0					
ANR	647523	Identifier	find_first_not_of		647311	1					
ANR	647524	ArgumentList	""" \\t"""		647311	1					
ANR	647525	Argument	""" \\t"""		647311	0					
ANR	647526	PrimaryExpression	""" \\t"""		647311	0					
ANR	647527	Argument	charNum + 1		647311	1					
ANR	647528	AdditiveExpression	charNum + 1		647311	0		+			
ANR	647529	Identifier	charNum		647311	0					
ANR	647530	PrimaryExpression	1		647311	1					
ANR	647531	Identifier	charNum		647311	1					
ANR	647532	CompoundStatement		35:1:1028:1028	647311	1					
ANR	647533	ForStatement	for ( size_t i = charNum + 1 ; i < currentLine . length ( ) && isWhiteSpace ( currentLine [ i ] ) ; i ++ )		647311	0					
ANR	647534	ForInit	size_t i = charNum + 1 ;	4125:7:119204:119226	647311	0	True				
ANR	647535	IdentifierDeclStatement	size_t i = charNum + 1 ;		647311	0					
ANR	647536	IdentifierDecl	i = charNum + 1		647311	0					
ANR	647537	IdentifierDeclType	size_t		647311	0					
ANR	647538	Identifier	i		647311	1					
ANR	647539	AssignmentExpression	i = charNum + 1		647311	2		=			
ANR	647540	Identifier	i		647311	0					
ANR	647541	AdditiveExpression	charNum + 1		647311	1		+			
ANR	647542	Identifier	charNum		647311	0					
ANR	647543	PrimaryExpression	1		647311	1					
ANR	647544	Condition	i < currentLine . length ( ) && isWhiteSpace ( currentLine [ i ] )	4125:31:119228:119283	647311	1	True				
ANR	647545	AndExpression	i < currentLine . length ( ) && isWhiteSpace ( currentLine [ i ] )		647311	0		&&			
ANR	647546	RelationalExpression	i < currentLine . length ( )		647311	0		<			
ANR	647547	Identifier	i		647311	0					
ANR	647548	CallExpression	currentLine . length ( )		647311	1					
ANR	647549	Callee	currentLine . length		647311	0					
ANR	647550	MemberAccess	currentLine . length		647311	0					
ANR	647551	Identifier	currentLine		647311	0					
ANR	647552	Identifier	length		647311	1					
ANR	647553	ArgumentList			647311	1					
ANR	647554	CallExpression	isWhiteSpace ( currentLine [ i ] )		647311	1					
ANR	647555	Callee	isWhiteSpace		647311	0					
ANR	647556	Identifier	isWhiteSpace		647311	0					
ANR	647557	ArgumentList	currentLine [ i ]		647311	1					
ANR	647558	Argument	currentLine [ i ]		647311	0					
ANR	647559	ArrayIndexing	currentLine [ i ]		647311	0					
ANR	647560	Identifier	currentLine		647311	0					
ANR	647561	Identifier	i		647311	1					
ANR	647562	PostIncDecOperationExpression	i ++	4125:89:119286:119288	647311	2	True				
ANR	647563	Identifier	i		647311	0					
ANR	647564	IncDec	++		647311	1					
ANR	647565	CompoundStatement		40:2:1297:1297	647311	3					
ANR	647566	IfStatement	if ( shouldPadParensOutside && peekedChar == '(' && ! isOldPRCentered )		647311	0					
ANR	647567	Condition	shouldPadParensOutside && peekedChar == '(' && ! isOldPRCentered	4128:7:119345:119407	647311	0	True				
ANR	647568	AndExpression	shouldPadParensOutside && peekedChar == '(' && ! isOldPRCentered		647311	0		&&			
ANR	647569	Identifier	shouldPadParensOutside		647311	0					
ANR	647570	AndExpression	peekedChar == '(' && ! isOldPRCentered		647311	1		&&			
ANR	647571	EqualityExpression	peekedChar == '('		647311	0		==			
ANR	647572	Identifier	peekedChar		647311	0					
ANR	647573	PrimaryExpression	'('		647311	1					
ANR	647574	UnaryOperationExpression	! isOldPRCentered		647311	1					
ANR	647575	UnaryOperator	!		647311	0					
ANR	647576	Identifier	isOldPRCentered		647311	1					
ANR	647577	CompoundStatement		45:4:1455:1520	647311	1					
ANR	647578	IdentifierDeclStatement	"size_t start = currentLine . find_first_not_of ( ""( \\t"" , charNum + 1 ) ;"	4131:4:119451:119516	647311	0	True				
ANR	647579	IdentifierDecl	"start = currentLine . find_first_not_of ( ""( \\t"" , charNum + 1 )"		647311	0					
ANR	647580	IdentifierDeclType	size_t		647311	0					
ANR	647581	Identifier	start		647311	1					
ANR	647582	AssignmentExpression	"start = currentLine . find_first_not_of ( ""( \\t"" , charNum + 1 )"		647311	2		=			
ANR	647583	Identifier	start		647311	0					
ANR	647584	CallExpression	"currentLine . find_first_not_of ( ""( \\t"" , charNum + 1 )"		647311	1					
ANR	647585	Callee	currentLine . find_first_not_of		647311	0					
ANR	647586	MemberAccess	currentLine . find_first_not_of		647311	0					
ANR	647587	Identifier	currentLine		647311	0					
ANR	647588	Identifier	find_first_not_of		647311	1					
ANR	647589	ArgumentList	"""( \\t"""		647311	1					
ANR	647590	Argument	"""( \\t"""		647311	0					
ANR	647591	PrimaryExpression	"""( \\t"""		647311	0					
ANR	647592	Argument	charNum + 1		647311	1					
ANR	647593	AdditiveExpression	charNum + 1		647311	0		+			
ANR	647594	Identifier	charNum		647311	0					
ANR	647595	PrimaryExpression	1		647311	1					
ANR	647596	IfStatement	if ( start != string :: npos && currentLine [ start ] != ')' )		647311	1					
ANR	647597	Condition	start != string :: npos && currentLine [ start ] != ')'	4132:8:119526:119575	647311	0	True				
ANR	647598	AndExpression	start != string :: npos && currentLine [ start ] != ')'		647311	0		&&			
ANR	647599	EqualityExpression	start != string :: npos		647311	0		!=			
ANR	647600	Identifier	start		647311	0					
ANR	647601	Identifier	string :: npos		647311	1					
ANR	647602	EqualityExpression	currentLine [ start ] != ')'		647311	1		!=			
ANR	647603	ArrayIndexing	currentLine [ start ]		647311	0					
ANR	647604	Identifier	currentLine		647311	0					
ANR	647605	Identifier	start		647311	1					
ANR	647606	PrimaryExpression	')'		647311	1					
ANR	647607	BreakStatement	break ;	4133:5:119583:119588	647311	1	True				
ANR	647608	ExpressionStatement	goForward ( 1 )	4135:3:119598:119610	647311	1	True				
ANR	647609	CallExpression	goForward ( 1 )		647311	0					
ANR	647610	Callee	goForward		647311	0					
ANR	647611	Identifier	goForward		647311	0					
ANR	647612	ArgumentList	1		647311	1					
ANR	647613	Argument	1		647311	0					
ANR	647614	PrimaryExpression	1		647311	0					
ANR	647615	IfStatement	if ( formattedLine . length ( ) > 0 )		647311	2					
ANR	647616	Condition	formattedLine . length ( ) > 0	4136:7:119619:119644	647311	0	True				
ANR	647617	RelationalExpression	formattedLine . length ( ) > 0		647311	0		>			
ANR	647618	CallExpression	formattedLine . length ( )		647311	0					
ANR	647619	Callee	formattedLine . length		647311	0					
ANR	647620	MemberAccess	formattedLine . length		647311	0					
ANR	647621	Identifier	formattedLine		647311	0					
ANR	647622	Identifier	length		647311	1					
ANR	647623	ArgumentList			647311	1					
ANR	647624	PrimaryExpression	0		647311	1					
ANR	647625	ExpressionStatement	"formattedLine . append ( 1 , currentLine [ i ] )"	4137:4:119651:119690	647311	1	True				
ANR	647626	CallExpression	"formattedLine . append ( 1 , currentLine [ i ] )"		647311	0					
ANR	647627	Callee	formattedLine . append		647311	0					
ANR	647628	MemberAccess	formattedLine . append		647311	0					
ANR	647629	Identifier	formattedLine		647311	0					
ANR	647630	Identifier	append		647311	1					
ANR	647631	ArgumentList	1		647311	1					
ANR	647632	Argument	1		647311	0					
ANR	647633	PrimaryExpression	1		647311	0					
ANR	647634	Argument	currentLine [ i ]		647311	1					
ANR	647635	ArrayIndexing	currentLine [ i ]		647311	0					
ANR	647636	Identifier	currentLine		647311	0					
ANR	647637	Identifier	i		647311	1					
ANR	647638	ElseStatement	else		647311	0					
ANR	647639	ExpressionStatement	spacePadNum --	4139:4:119704:119717	647311	0	True				
ANR	647640	PostIncDecOperationExpression	spacePadNum --		647311	0					
ANR	647641	Identifier	spacePadNum		647311	0					
ANR	647642	IncDec	--		647311	1					
ANR	647643	IfStatement	if ( isAfterScopeResolution )		647311	10					
ANR	647644	Condition	isAfterScopeResolution	4143:5:119778:119799	647311	0	True				
ANR	647645	Identifier	isAfterScopeResolution		647311	0					
ANR	647646	CompoundStatement		59:2:1811:1866	647311	1					
ANR	647647	IdentifierDeclStatement	"size_t lastText = formattedLine . find_last_not_of ( "" \\t"" ) ;"	4145:2:119807:119862	647311	0	True				
ANR	647648	IdentifierDecl	"lastText = formattedLine . find_last_not_of ( "" \\t"" )"		647311	0					
ANR	647649	IdentifierDeclType	size_t		647311	0					
ANR	647650	Identifier	lastText		647311	1					
ANR	647651	AssignmentExpression	"lastText = formattedLine . find_last_not_of ( "" \\t"" )"		647311	2		=			
ANR	647652	Identifier	lastText		647311	0					
ANR	647653	CallExpression	"formattedLine . find_last_not_of ( "" \\t"" )"		647311	1					
ANR	647654	Callee	formattedLine . find_last_not_of		647311	0					
ANR	647655	MemberAccess	formattedLine . find_last_not_of		647311	0					
ANR	647656	Identifier	formattedLine		647311	0					
ANR	647657	Identifier	find_last_not_of		647311	1					
ANR	647658	ArgumentList	""" \\t"""		647311	1					
ANR	647659	Argument	""" \\t"""		647311	0					
ANR	647660	PrimaryExpression	""" \\t"""		647311	0					
ANR	647661	IfStatement	if ( lastText != string :: npos && lastText + 1 < formattedLine . length ( ) )		647311	1					
ANR	647662	Condition	lastText != string :: npos && lastText + 1 < formattedLine . length ( )	4146:6:119870:119934	647311	0	True				
ANR	647663	AndExpression	lastText != string :: npos && lastText + 1 < formattedLine . length ( )		647311	0		&&			
ANR	647664	EqualityExpression	lastText != string :: npos		647311	0		!=			
ANR	647665	Identifier	lastText		647311	0					
ANR	647666	Identifier	string :: npos		647311	1					
ANR	647667	RelationalExpression	lastText + 1 < formattedLine . length ( )		647311	1		<			
ANR	647668	AdditiveExpression	lastText + 1		647311	0		+			
ANR	647669	Identifier	lastText		647311	0					
ANR	647670	PrimaryExpression	1		647311	1					
ANR	647671	CallExpression	formattedLine . length ( )		647311	1					
ANR	647672	Callee	formattedLine . length		647311	0					
ANR	647673	MemberAccess	formattedLine . length		647311	0					
ANR	647674	Identifier	formattedLine		647311	0					
ANR	647675	Identifier	length		647311	1					
ANR	647676	ArgumentList			647311	1					
ANR	647677	ExpressionStatement	formattedLine . erase ( lastText + 1 )	4147:3:119940:119973	647311	1	True				
ANR	647678	CallExpression	formattedLine . erase ( lastText + 1 )		647311	0					
ANR	647679	Callee	formattedLine . erase		647311	0					
ANR	647680	MemberAccess	formattedLine . erase		647311	0					
ANR	647681	Identifier	formattedLine		647311	0					
ANR	647682	Identifier	erase		647311	1					
ANR	647683	ArgumentList	lastText + 1		647311	1					
ANR	647684	Argument	lastText + 1		647311	0					
ANR	647685	AdditiveExpression	lastText + 1		647311	0		+			
ANR	647686	Identifier	lastText		647311	0					
ANR	647687	PrimaryExpression	1		647311	1					
ANR	647688	ElseStatement	else		647311	0					
ANR	647689	IfStatement	if ( formattedLine . length ( ) > 0 && ( formattedLine . length ( ) <= startNum + 1 || ! isWhiteSpace ( formattedLine [ startNum + 1 ] ) ) )		647311	0					
ANR	647690	Condition	formattedLine . length ( ) > 0 && ( formattedLine . length ( ) <= startNum + 1 || ! isWhiteSpace ( formattedLine [ startNum + 1 ] ) )	4150:10:120026:120165	647311	0	True				
ANR	647691	AndExpression	formattedLine . length ( ) > 0 && ( formattedLine . length ( ) <= startNum + 1 || ! isWhiteSpace ( formattedLine [ startNum + 1 ] ) )		647311	0		&&			
ANR	647692	RelationalExpression	formattedLine . length ( ) > 0		647311	0		>			
ANR	647693	CallExpression	formattedLine . length ( )		647311	0					
ANR	647694	Callee	formattedLine . length		647311	0					
ANR	647695	MemberAccess	formattedLine . length		647311	0					
ANR	647696	Identifier	formattedLine		647311	0					
ANR	647697	Identifier	length		647311	1					
ANR	647698	ArgumentList			647311	1					
ANR	647699	PrimaryExpression	0		647311	1					
ANR	647700	OrExpression	formattedLine . length ( ) <= startNum + 1 || ! isWhiteSpace ( formattedLine [ startNum + 1 ] )		647311	1		||			
ANR	647701	RelationalExpression	formattedLine . length ( ) <= startNum + 1		647311	0		<=			
ANR	647702	CallExpression	formattedLine . length ( )		647311	0					
ANR	647703	Callee	formattedLine . length		647311	0					
ANR	647704	MemberAccess	formattedLine . length		647311	0					
ANR	647705	Identifier	formattedLine		647311	0					
ANR	647706	Identifier	length		647311	1					
ANR	647707	ArgumentList			647311	1					
ANR	647708	AdditiveExpression	startNum + 1		647311	1		+			
ANR	647709	Identifier	startNum		647311	0					
ANR	647710	PrimaryExpression	1		647311	1					
ANR	647711	UnaryOperationExpression	! isWhiteSpace ( formattedLine [ startNum + 1 ] )		647311	1					
ANR	647712	UnaryOperator	!		647311	0					
ANR	647713	CallExpression	isWhiteSpace ( formattedLine [ startNum + 1 ] )		647311	1					
ANR	647714	Callee	isWhiteSpace		647311	0					
ANR	647715	Identifier	isWhiteSpace		647311	0					
ANR	647716	ArgumentList	formattedLine [ startNum + 1 ]		647311	1					
ANR	647717	Argument	formattedLine [ startNum + 1 ]		647311	0					
ANR	647718	ArrayIndexing	formattedLine [ startNum + 1 ]		647311	0					
ANR	647719	Identifier	formattedLine		647311	0					
ANR	647720	AdditiveExpression	startNum + 1		647311	1		+			
ANR	647721	Identifier	startNum		647311	0					
ANR	647722	PrimaryExpression	1		647311	1					
ANR	647723	CompoundStatement		67:1:2173:2173	647311	1					
ANR	647724	ExpressionStatement	"formattedLine . insert ( startNum + 1 , 1 , ' ' )"	4154:2:120173:120215	647311	0	True				
ANR	647725	CallExpression	"formattedLine . insert ( startNum + 1 , 1 , ' ' )"		647311	0					
ANR	647726	Callee	formattedLine . insert		647311	0					
ANR	647727	MemberAccess	formattedLine . insert		647311	0					
ANR	647728	Identifier	formattedLine		647311	0					
ANR	647729	Identifier	insert		647311	1					
ANR	647730	ArgumentList	startNum + 1		647311	1					
ANR	647731	Argument	startNum + 1		647311	0					
ANR	647732	AdditiveExpression	startNum + 1		647311	0		+			
ANR	647733	Identifier	startNum		647311	0					
ANR	647734	PrimaryExpression	1		647311	1					
ANR	647735	Argument	1		647311	1					
ANR	647736	PrimaryExpression	1		647311	0					
ANR	647737	Argument	' '		647311	2					
ANR	647738	PrimaryExpression	' '		647311	0					
ANR	647739	ExpressionStatement	spacePadNum ++	4155:2:120219:120232	647311	1	True				
ANR	647740	PostIncDecOperationExpression	spacePadNum ++		647311	0					
ANR	647741	Identifier	spacePadNum		647311	0					
ANR	647742	IncDec	++		647311	1					
ANR	647743	ExpressionStatement	"appendSequence ( sequenceToInsert , false )"	4157:1:120238:120277	647311	11	True				
ANR	647744	CallExpression	"appendSequence ( sequenceToInsert , false )"		647311	0					
ANR	647745	Callee	appendSequence		647311	0					
ANR	647746	Identifier	appendSequence		647311	0					
ANR	647747	ArgumentList	sequenceToInsert		647311	1					
ANR	647748	Argument	sequenceToInsert		647311	0					
ANR	647749	Identifier	sequenceToInsert		647311	0					
ANR	647750	Argument	false		647311	1					
ANR	647751	Identifier	false		647311	0					
ANR	647752	IfStatement	if ( isOldPRCentered && formattedLine . length ( ) > startNum + 1 && isWhiteSpace ( formattedLine [ startNum + 1 ] ) && ! isBeforeAnyComment ( ) )		647311	12					
ANR	647753	Condition	isOldPRCentered && formattedLine . length ( ) > startNum + 1 && isWhiteSpace ( formattedLine [ startNum + 1 ] ) && ! isBeforeAnyComment ( )	4159:5:120344:120496	647311	0	True				
ANR	647754	AndExpression	isOldPRCentered && formattedLine . length ( ) > startNum + 1 && isWhiteSpace ( formattedLine [ startNum + 1 ] ) && ! isBeforeAnyComment ( )		647311	0		&&			
ANR	647755	Identifier	isOldPRCentered		647311	0					
ANR	647756	AndExpression	formattedLine . length ( ) > startNum + 1 && isWhiteSpace ( formattedLine [ startNum + 1 ] ) && ! isBeforeAnyComment ( )		647311	1		&&			
ANR	647757	RelationalExpression	formattedLine . length ( ) > startNum + 1		647311	0		>			
ANR	647758	CallExpression	formattedLine . length ( )		647311	0					
ANR	647759	Callee	formattedLine . length		647311	0					
ANR	647760	MemberAccess	formattedLine . length		647311	0					
ANR	647761	Identifier	formattedLine		647311	0					
ANR	647762	Identifier	length		647311	1					
ANR	647763	ArgumentList			647311	1					
ANR	647764	AdditiveExpression	startNum + 1		647311	1		+			
ANR	647765	Identifier	startNum		647311	0					
ANR	647766	PrimaryExpression	1		647311	1					
ANR	647767	AndExpression	isWhiteSpace ( formattedLine [ startNum + 1 ] ) && ! isBeforeAnyComment ( )		647311	1		&&			
ANR	647768	CallExpression	isWhiteSpace ( formattedLine [ startNum + 1 ] )		647311	0					
ANR	647769	Callee	isWhiteSpace		647311	0					
ANR	647770	Identifier	isWhiteSpace		647311	0					
ANR	647771	ArgumentList	formattedLine [ startNum + 1 ]		647311	1					
ANR	647772	Argument	formattedLine [ startNum + 1 ]		647311	0					
ANR	647773	ArrayIndexing	formattedLine [ startNum + 1 ]		647311	0					
ANR	647774	Identifier	formattedLine		647311	0					
ANR	647775	AdditiveExpression	startNum + 1		647311	1		+			
ANR	647776	Identifier	startNum		647311	0					
ANR	647777	PrimaryExpression	1		647311	1					
ANR	647778	UnaryOperationExpression	! isBeforeAnyComment ( )		647311	1					
ANR	647779	UnaryOperator	!		647311	0					
ANR	647780	CallExpression	isBeforeAnyComment ( )		647311	1					
ANR	647781	Callee	isBeforeAnyComment		647311	0					
ANR	647782	Identifier	isBeforeAnyComment		647311	0					
ANR	647783	ArgumentList			647311	1					
ANR	647784	CompoundStatement		77:1:2504:2504	647311	1					
ANR	647785	ExpressionStatement	"formattedLine . erase ( startNum + 1 , 1 )"	4164:2:120504:120540	647311	0	True				
ANR	647786	CallExpression	"formattedLine . erase ( startNum + 1 , 1 )"		647311	0					
ANR	647787	Callee	formattedLine . erase		647311	0					
ANR	647788	MemberAccess	formattedLine . erase		647311	0					
ANR	647789	Identifier	formattedLine		647311	0					
ANR	647790	Identifier	erase		647311	1					
ANR	647791	ArgumentList	startNum + 1		647311	1					
ANR	647792	Argument	startNum + 1		647311	0					
ANR	647793	AdditiveExpression	startNum + 1		647311	0		+			
ANR	647794	Identifier	startNum		647311	0					
ANR	647795	PrimaryExpression	1		647311	1					
ANR	647796	Argument	1		647311	1					
ANR	647797	PrimaryExpression	1		647311	0					
ANR	647798	ExpressionStatement	spacePadNum --	4165:2:120544:120557	647311	1	True				
ANR	647799	PostIncDecOperationExpression	spacePadNum --		647311	0					
ANR	647800	Identifier	spacePadNum		647311	0					
ANR	647801	IncDec	--		647311	1					
ANR	647802	IfStatement	if ( peekedChar == '=' )		647311	13					
ANR	647803	Condition	peekedChar == '='	4168:5:120597:120613	647311	0	True				
ANR	647804	EqualityExpression	peekedChar == '='		647311	0		==			
ANR	647805	Identifier	peekedChar		647311	0					
ANR	647806	PrimaryExpression	'='		647311	1					
ANR	647807	CompoundStatement		83:1:2621:2621	647311	1					
ANR	647808	ExpressionStatement	appendSpaceAfter ( )	4170:2:120621:120639	647311	0	True				
ANR	647809	CallExpression	appendSpaceAfter ( )		647311	0					
ANR	647810	Callee	appendSpaceAfter		647311	0					
ANR	647811	Identifier	appendSpaceAfter		647311	0					
ANR	647812	ArgumentList			647311	1					
ANR	647813	IfStatement	if ( formattedLine . length ( ) > startNum && isWhiteSpace ( formattedLine [ startNum + 1 ] ) && isWhiteSpace ( formattedLine [ startNum + 2 ] ) )		647311	1					
ANR	647814	Condition	formattedLine . length ( ) > startNum && isWhiteSpace ( formattedLine [ startNum + 1 ] ) && isWhiteSpace ( formattedLine [ startNum + 2 ] )	4172:6:120694:120836	647311	0	True				
ANR	647815	AndExpression	formattedLine . length ( ) > startNum && isWhiteSpace ( formattedLine [ startNum + 1 ] ) && isWhiteSpace ( formattedLine [ startNum + 2 ] )		647311	0		&&			
ANR	647816	RelationalExpression	formattedLine . length ( ) > startNum		647311	0		>			
ANR	647817	CallExpression	formattedLine . length ( )		647311	0					
ANR	647818	Callee	formattedLine . length		647311	0					
ANR	647819	MemberAccess	formattedLine . length		647311	0					
ANR	647820	Identifier	formattedLine		647311	0					
ANR	647821	Identifier	length		647311	1					
ANR	647822	ArgumentList			647311	1					
ANR	647823	Identifier	startNum		647311	1					
ANR	647824	AndExpression	isWhiteSpace ( formattedLine [ startNum + 1 ] ) && isWhiteSpace ( formattedLine [ startNum + 2 ] )		647311	1		&&			
ANR	647825	CallExpression	isWhiteSpace ( formattedLine [ startNum + 1 ] )		647311	0					
ANR	647826	Callee	isWhiteSpace		647311	0					
ANR	647827	Identifier	isWhiteSpace		647311	0					
ANR	647828	ArgumentList	formattedLine [ startNum + 1 ]		647311	1					
ANR	647829	Argument	formattedLine [ startNum + 1 ]		647311	0					
ANR	647830	ArrayIndexing	formattedLine [ startNum + 1 ]		647311	0					
ANR	647831	Identifier	formattedLine		647311	0					
ANR	647832	AdditiveExpression	startNum + 1		647311	1		+			
ANR	647833	Identifier	startNum		647311	0					
ANR	647834	PrimaryExpression	1		647311	1					
ANR	647835	CallExpression	isWhiteSpace ( formattedLine [ startNum + 2 ] )		647311	1					
ANR	647836	Callee	isWhiteSpace		647311	0					
ANR	647837	Identifier	isWhiteSpace		647311	0					
ANR	647838	ArgumentList	formattedLine [ startNum + 2 ]		647311	1					
ANR	647839	Argument	formattedLine [ startNum + 2 ]		647311	0					
ANR	647840	ArrayIndexing	formattedLine [ startNum + 2 ]		647311	0					
ANR	647841	Identifier	formattedLine		647311	0					
ANR	647842	AdditiveExpression	startNum + 2		647311	1		+			
ANR	647843	Identifier	startNum		647311	0					
ANR	647844	PrimaryExpression	2		647311	1					
ANR	647845	CompoundStatement		89:2:2845:2845	647311	1					
ANR	647846	ExpressionStatement	"formattedLine . erase ( startNum + 1 , 1 )"	4176:3:120846:120882	647311	0	True				
ANR	647847	CallExpression	"formattedLine . erase ( startNum + 1 , 1 )"		647311	0					
ANR	647848	Callee	formattedLine . erase		647311	0					
ANR	647849	MemberAccess	formattedLine . erase		647311	0					
ANR	647850	Identifier	formattedLine		647311	0					
ANR	647851	Identifier	erase		647311	1					
ANR	647852	ArgumentList	startNum + 1		647311	1					
ANR	647853	Argument	startNum + 1		647311	0					
ANR	647854	AdditiveExpression	startNum + 1		647311	0		+			
ANR	647855	Identifier	startNum		647311	0					
ANR	647856	PrimaryExpression	1		647311	1					
ANR	647857	Argument	1		647311	1					
ANR	647858	PrimaryExpression	1		647311	0					
ANR	647859	ExpressionStatement	spacePadNum --	4177:3:120887:120900	647311	1	True				
ANR	647860	PostIncDecOperationExpression	spacePadNum --		647311	0					
ANR	647861	Identifier	spacePadNum		647311	0					
ANR	647862	IncDec	--		647311	1					
ANR	647863	IfStatement	if ( maxCodeLength != string :: npos )		647311	14					
ANR	647864	Condition	maxCodeLength != string :: npos	4181:5:120955:120983	647311	0	True				
ANR	647865	EqualityExpression	maxCodeLength != string :: npos		647311	0		!=			
ANR	647866	Identifier	maxCodeLength		647311	0					
ANR	647867	Identifier	string :: npos		647311	1					
ANR	647868	CompoundStatement		97:2:2995:3043	647311	1					
ANR	647869	IdentifierDeclStatement	"size_t index = formattedLine . find_last_of ( "" \\t"" ) ;"	4183:2:120991:121039	647311	0	True				
ANR	647870	IdentifierDecl	"index = formattedLine . find_last_of ( "" \\t"" )"		647311	0					
ANR	647871	IdentifierDeclType	size_t		647311	0					
ANR	647872	Identifier	index		647311	1					
ANR	647873	AssignmentExpression	"index = formattedLine . find_last_of ( "" \\t"" )"		647311	2		=			
ANR	647874	Identifier	index		647311	0					
ANR	647875	CallExpression	"formattedLine . find_last_of ( "" \\t"" )"		647311	1					
ANR	647876	Callee	formattedLine . find_last_of		647311	0					
ANR	647877	MemberAccess	formattedLine . find_last_of		647311	0					
ANR	647878	Identifier	formattedLine		647311	0					
ANR	647879	Identifier	find_last_of		647311	1					
ANR	647880	ArgumentList	""" \\t"""		647311	1					
ANR	647881	Argument	""" \\t"""		647311	0					
ANR	647882	PrimaryExpression	""" \\t"""		647311	0					
ANR	647883	IfStatement	if ( index != string :: npos && index < formattedLine . length ( ) - 1 && ( formattedLine [ index + 1 ] == '*' || formattedLine [ index + 1 ] == '&' || formattedLine [ index + 1 ] == '^' ) )		647311	1					
ANR	647884	Condition	index != string :: npos && index < formattedLine . length ( ) - 1 && ( formattedLine [ index + 1 ] == '*' || formattedLine [ index + 1 ] == '&' || formattedLine [ index + 1 ] == '^' )	4184:6:121047:121260	647311	0	True				
ANR	647885	AndExpression	index != string :: npos && index < formattedLine . length ( ) - 1 && ( formattedLine [ index + 1 ] == '*' || formattedLine [ index + 1 ] == '&' || formattedLine [ index + 1 ] == '^' )		647311	0		&&			
ANR	647886	EqualityExpression	index != string :: npos		647311	0		!=			
ANR	647887	Identifier	index		647311	0					
ANR	647888	Identifier	string :: npos		647311	1					
ANR	647889	AndExpression	index < formattedLine . length ( ) - 1 && ( formattedLine [ index + 1 ] == '*' || formattedLine [ index + 1 ] == '&' || formattedLine [ index + 1 ] == '^' )		647311	1		&&			
ANR	647890	RelationalExpression	index < formattedLine . length ( ) - 1		647311	0		<			
ANR	647891	Identifier	index		647311	0					
ANR	647892	AdditiveExpression	formattedLine . length ( ) - 1		647311	1		-			
ANR	647893	CallExpression	formattedLine . length ( )		647311	0					
ANR	647894	Callee	formattedLine . length		647311	0					
ANR	647895	MemberAccess	formattedLine . length		647311	0					
ANR	647896	Identifier	formattedLine		647311	0					
ANR	647897	Identifier	length		647311	1					
ANR	647898	ArgumentList			647311	1					
ANR	647899	PrimaryExpression	1		647311	1					
ANR	647900	OrExpression	formattedLine [ index + 1 ] == '*' || formattedLine [ index + 1 ] == '&' || formattedLine [ index + 1 ] == '^'		647311	1		||			
ANR	647901	EqualityExpression	formattedLine [ index + 1 ] == '*'		647311	0		==			
ANR	647902	ArrayIndexing	formattedLine [ index + 1 ]		647311	0					
ANR	647903	Identifier	formattedLine		647311	0					
ANR	647904	AdditiveExpression	index + 1		647311	1		+			
ANR	647905	Identifier	index		647311	0					
ANR	647906	PrimaryExpression	1		647311	1					
ANR	647907	PrimaryExpression	'*'		647311	1					
ANR	647908	OrExpression	formattedLine [ index + 1 ] == '&' || formattedLine [ index + 1 ] == '^'		647311	1		||			
ANR	647909	EqualityExpression	formattedLine [ index + 1 ] == '&'		647311	0		==			
ANR	647910	ArrayIndexing	formattedLine [ index + 1 ]		647311	0					
ANR	647911	Identifier	formattedLine		647311	0					
ANR	647912	AdditiveExpression	index + 1		647311	1		+			
ANR	647913	Identifier	index		647311	0					
ANR	647914	PrimaryExpression	1		647311	1					
ANR	647915	PrimaryExpression	'&'		647311	1					
ANR	647916	EqualityExpression	formattedLine [ index + 1 ] == '^'		647311	1		==			
ANR	647917	ArrayIndexing	formattedLine [ index + 1 ]		647311	0					
ANR	647918	Identifier	formattedLine		647311	0					
ANR	647919	AdditiveExpression	index + 1		647311	1		+			
ANR	647920	Identifier	index		647311	0					
ANR	647921	PrimaryExpression	1		647311	1					
ANR	647922	PrimaryExpression	'^'		647311	1					
ANR	647923	CompoundStatement		103:2:3269:3269	647311	1					
ANR	647924	ExpressionStatement	updateFormattedLineSplitPointsPointerOrReference ( index )	4190:3:121270:121325	647311	0	True				
ANR	647925	CallExpression	updateFormattedLineSplitPointsPointerOrReference ( index )		647311	0					
ANR	647926	Callee	updateFormattedLineSplitPointsPointerOrReference		647311	0					
ANR	647927	Identifier	updateFormattedLineSplitPointsPointerOrReference		647311	0					
ANR	647928	ArgumentList	index		647311	1					
ANR	647929	Argument	index		647311	0					
ANR	647930	Identifier	index		647311	0					
ANR	647931	ExpressionStatement	testForTimeToSplitFormattedLine ( )	4191:3:121330:121363	647311	1	True				
ANR	647932	CallExpression	testForTimeToSplitFormattedLine ( )		647311	0					
ANR	647933	Callee	testForTimeToSplitFormattedLine		647311	0					
ANR	647934	Identifier	testForTimeToSplitFormattedLine		647311	0					
ANR	647935	ArgumentList			647311	1					
ANR	647936	ReturnType	void		647311	1					
ANR	647937	Identifier	ASFormatter :: formatPointerOrReferenceToName		647311	2					
ANR	647938	ParameterList			647311	3					
ANR	647939	CFGEntryNode	ENTRY		647311		True				
ANR	647940	CFGExitNode	EXIT		647311		True				
ANR	647941	Symbol	isPointerOrReferenceCentered		647311						
ANR	647942	Symbol	previousNonWSChar		647311						
ANR	647943	Symbol	* formattedLine		647311						
ANR	647944	Symbol	* start		647311						
ANR	647945	Symbol	maxCodeLength		647311						
ANR	647946	Symbol	* index		647311						
ANR	647947	Symbol	string :: npos		647311						
ANR	647948	Symbol	shouldPadParensOutside		647311						
ANR	647949	Symbol	isWhiteSpace		647311						
ANR	647950	Symbol	* currentLine		647311						
ANR	647951	Symbol	formattedLine . find_last_not_of		647311						
ANR	647952	Symbol	isAfterScopeResolution		647311						
ANR	647953	Symbol	isBeforeAnyComment		647311						
ANR	647954	Symbol	isSequenceReached		647311						
ANR	647955	Symbol	sequenceToInsert		647311						
ANR	647956	Symbol	charNum		647311						
ANR	647957	Symbol	peekedChar		647311						
ANR	647958	Symbol	currentLine		647311						
ANR	647959	Symbol	lastText		647311						
ANR	647960	Symbol	currentChar		647311						
ANR	647961	Symbol	formattedLine . find_last_of		647311						
ANR	647962	Symbol	peekNextChar		647311						
ANR	647963	Symbol	spacePadNum		647311						
ANR	647964	Symbol	start		647311						
ANR	647965	Symbol	false		647311						
ANR	647966	Symbol	i		647311						
ANR	647967	Symbol	index		647311						
ANR	647968	Symbol	* startNum		647311						
ANR	647969	Symbol	currentLine . find_first_not_of		647311						
ANR	647970	Symbol	formattedLine		647311						
ANR	647971	Symbol	isOldPRCentered		647311						
ANR	647972	Symbol	* i		647311						
ANR	647973	Symbol	currentLine . length		647311						
ANR	647974	Symbol	formattedLine . length		647311						
ANR	647975	Symbol	isJavaStyle		647311						
ANR	647976	Symbol	startNum		647311						
ANR	647977	Function	ASFormatter :: formatPointerOrReferenceCast	4203:0:121620:123139							
ANR	647978	FunctionDef	ASFormatter :: formatPointerOrReferenceCast ()		647977	0					
ANR	647979	CompoundStatement		4204:0:121669:123139	647977	0					
ANR	647980	ExpressionStatement	assert ( currentChar == '*' || currentChar == '&' || currentChar == '^' )	4205:1:121672:121742	647977	0	True				
ANR	647981	CallExpression	assert ( currentChar == '*' || currentChar == '&' || currentChar == '^' )		647977	0					
ANR	647982	Callee	assert		647977	0					
ANR	647983	Identifier	assert		647977	0					
ANR	647984	ArgumentList	currentChar == '*' || currentChar == '&' || currentChar == '^'		647977	1					
ANR	647985	Argument	currentChar == '*' || currentChar == '&' || currentChar == '^'		647977	0					
ANR	647986	OrExpression	currentChar == '*' || currentChar == '&' || currentChar == '^'		647977	0		||			
ANR	647987	EqualityExpression	currentChar == '*'		647977	0		==			
ANR	647988	Identifier	currentChar		647977	0					
ANR	647989	PrimaryExpression	'*'		647977	1					
ANR	647990	OrExpression	currentChar == '&' || currentChar == '^'		647977	1		||			
ANR	647991	EqualityExpression	currentChar == '&'		647977	0		==			
ANR	647992	Identifier	currentChar		647977	0					
ANR	647993	PrimaryExpression	'&'		647977	1					
ANR	647994	EqualityExpression	currentChar == '^'		647977	1		==			
ANR	647995	Identifier	currentChar		647977	0					
ANR	647996	PrimaryExpression	'^'		647977	1					
ANR	647997	ExpressionStatement	assert ( ! isJavaStyle ( ) )	4206:1:121745:121767	647977	1	True				
ANR	647998	CallExpression	assert ( ! isJavaStyle ( ) )		647977	0					
ANR	647999	Callee	assert		647977	0					
ANR	648000	Identifier	assert		647977	0					
ANR	648001	ArgumentList	! isJavaStyle ( )		647977	1					
ANR	648002	Argument	! isJavaStyle ( )		647977	0					
ANR	648003	UnaryOperationExpression	! isJavaStyle ( )		647977	0					
ANR	648004	UnaryOperator	!		647977	0					
ANR	648005	CallExpression	isJavaStyle ( )		647977	1					
ANR	648006	Callee	isJavaStyle		647977	0					
ANR	648007	Identifier	isJavaStyle		647977	0					
ANR	648008	ArgumentList			647977	1					
ANR	648009	IdentifierDeclStatement	int pa = pointerAlignment ;	4208:1:121771:121796	647977	2	True				
ANR	648010	IdentifierDecl	pa = pointerAlignment		647977	0					
ANR	648011	IdentifierDeclType	int		647977	0					
ANR	648012	Identifier	pa		647977	1					
ANR	648013	AssignmentExpression	pa = pointerAlignment		647977	2		=			
ANR	648014	Identifier	pointerAlignment		647977	0					
ANR	648015	Identifier	pointerAlignment		647977	1					
ANR	648016	IdentifierDeclStatement	int ra = referenceAlignment ;	4209:1:121799:121826	647977	3	True				
ANR	648017	IdentifierDecl	ra = referenceAlignment		647977	0					
ANR	648018	IdentifierDeclType	int		647977	0					
ANR	648019	Identifier	ra		647977	1					
ANR	648020	AssignmentExpression	ra = referenceAlignment		647977	2		=			
ANR	648021	Identifier	referenceAlignment		647977	0					
ANR	648022	Identifier	referenceAlignment		647977	1					
ANR	648023	IdentifierDeclStatement	int itemAlignment = ( currentChar == '*' || currentChar == '^' ) ? pa : ( ( ra == REF_SAME_AS_PTR ) ? pa : ra ) ;	4210:1:121829:121934	647977	4	True				
ANR	648024	IdentifierDecl	itemAlignment = ( currentChar == '*' || currentChar == '^' ) ? pa : ( ( ra == REF_SAME_AS_PTR ) ? pa : ra )		647977	0					
ANR	648025	IdentifierDeclType	int		647977	0					
ANR	648026	Identifier	itemAlignment		647977	1					
ANR	648027	AssignmentExpression	itemAlignment = ( currentChar == '*' || currentChar == '^' ) ? pa : ( ( ra == REF_SAME_AS_PTR ) ? pa : ra )		647977	2		=			
ANR	648028	Identifier	itemAlignment		647977	0					
ANR	648029	ConditionalExpression	( currentChar == '*' || currentChar == '^' ) ? pa : ( ( ra == REF_SAME_AS_PTR ) ? pa : ra )		647977	1					
ANR	648030	Condition	currentChar == '*' || currentChar == '^'		647977	0					
ANR	648031	OrExpression	currentChar == '*' || currentChar == '^'		647977	0		||			
ANR	648032	EqualityExpression	currentChar == '*'		647977	0		==			
ANR	648033	Identifier	currentChar		647977	0					
ANR	648034	PrimaryExpression	'*'		647977	1					
ANR	648035	EqualityExpression	currentChar == '^'		647977	1		==			
ANR	648036	Identifier	currentChar		647977	0					
ANR	648037	PrimaryExpression	'^'		647977	1					
ANR	648038	Identifier	pa		647977	1					
ANR	648039	ConditionalExpression	( ra == REF_SAME_AS_PTR ) ? pa : ra		647977	2					
ANR	648040	Condition	ra == REF_SAME_AS_PTR		647977	0					
ANR	648041	EqualityExpression	ra == REF_SAME_AS_PTR		647977	0		==			
ANR	648042	Identifier	ra		647977	0					
ANR	648043	Identifier	REF_SAME_AS_PTR		647977	1					
ANR	648044	Identifier	pa		647977	1					
ANR	648045	Identifier	ra		647977	2					
ANR	648046	IdentifierDeclStatement	"string sequenceToInsert ( 1 , currentChar ) ;"	4212:1:121938:121977	647977	5	True				
ANR	648047	IdentifierDecl	"sequenceToInsert ( 1 , currentChar )"		647977	0					
ANR	648048	IdentifierDeclType	string		647977	0					
ANR	648049	Identifier	sequenceToInsert		647977	1					
ANR	648050	Expression	"1 , currentChar"		647977	2					
ANR	648051	PrimaryExpression	1		647977	0					
ANR	648052	Identifier	currentChar		647977	1					
ANR	648053	IfStatement	"if ( isSequenceReached ( ""**"" ) || isSequenceReached ( ""&&"" ) )"		647977	6					
ANR	648054	Condition	"isSequenceReached ( ""**"" ) || isSequenceReached ( ""&&"" )"	4213:5:121984:122033	647977	0	True				
ANR	648055	OrExpression	"isSequenceReached ( ""**"" ) || isSequenceReached ( ""&&"" )"		647977	0		||			
ANR	648056	CallExpression	"isSequenceReached ( ""**"" )"		647977	0					
ANR	648057	Callee	isSequenceReached		647977	0					
ANR	648058	Identifier	isSequenceReached		647977	0					
ANR	648059	ArgumentList	"""**"""		647977	1					
ANR	648060	Argument	"""**"""		647977	0					
ANR	648061	PrimaryExpression	"""**"""		647977	0					
ANR	648062	CallExpression	"isSequenceReached ( ""&&"" )"		647977	1					
ANR	648063	Callee	isSequenceReached		647977	0					
ANR	648064	Identifier	isSequenceReached		647977	0					
ANR	648065	ArgumentList	"""&&"""		647977	1					
ANR	648066	Argument	"""&&"""		647977	0					
ANR	648067	PrimaryExpression	"""&&"""		647977	0					
ANR	648068	CompoundStatement		11:1:367:367	647977	1					
ANR	648069	ExpressionStatement	goForward ( 1 )	4215:2:122041:122053	647977	0	True				
ANR	648070	CallExpression	goForward ( 1 )		647977	0					
ANR	648071	Callee	goForward		647977	0					
ANR	648072	Identifier	goForward		647977	0					
ANR	648073	ArgumentList	1		647977	1					
ANR	648074	Argument	1		647977	0					
ANR	648075	PrimaryExpression	1		647977	0					
ANR	648076	ExpressionStatement	"sequenceToInsert . append ( 1 , currentLine [ charNum ] )"	4216:2:122057:122105	647977	1	True				
ANR	648077	CallExpression	"sequenceToInsert . append ( 1 , currentLine [ charNum ] )"		647977	0					
ANR	648078	Callee	sequenceToInsert . append		647977	0					
ANR	648079	MemberAccess	sequenceToInsert . append		647977	0					
ANR	648080	Identifier	sequenceToInsert		647977	0					
ANR	648081	Identifier	append		647977	1					
ANR	648082	ArgumentList	1		647977	1					
ANR	648083	Argument	1		647977	0					
ANR	648084	PrimaryExpression	1		647977	0					
ANR	648085	Argument	currentLine [ charNum ]		647977	1					
ANR	648086	ArrayIndexing	currentLine [ charNum ]		647977	0					
ANR	648087	Identifier	currentLine		647977	0					
ANR	648088	Identifier	charNum		647977	1					
ANR	648089	IfStatement	if ( itemAlignment == PTR_ALIGN_NONE )		647977	7					
ANR	648090	Condition	itemAlignment == PTR_ALIGN_NONE	4218:5:122115:122145	647977	0	True				
ANR	648091	EqualityExpression	itemAlignment == PTR_ALIGN_NONE		647977	0		==			
ANR	648092	Identifier	itemAlignment		647977	0					
ANR	648093	Identifier	PTR_ALIGN_NONE		647977	1					
ANR	648094	CompoundStatement		16:1:479:479	647977	1					
ANR	648095	ExpressionStatement	"appendSequence ( sequenceToInsert , false )"	4220:2:122153:122192	647977	0	True				
ANR	648096	CallExpression	"appendSequence ( sequenceToInsert , false )"		647977	0					
ANR	648097	Callee	appendSequence		647977	0					
ANR	648098	Identifier	appendSequence		647977	0					
ANR	648099	ArgumentList	sequenceToInsert		647977	1					
ANR	648100	Argument	sequenceToInsert		647977	0					
ANR	648101	Identifier	sequenceToInsert		647977	0					
ANR	648102	Argument	false		647977	1					
ANR	648103	Identifier	false		647977	0					
ANR	648104	ReturnStatement	return ;	4221:2:122196:122202	647977	1	True				
ANR	648105	IdentifierDeclStatement	char prevCh = ' ' ;	4224:1:122240:122257	647977	8	True				
ANR	648106	IdentifierDecl	prevCh = ' '		647977	0					
ANR	648107	IdentifierDeclType	char		647977	0					
ANR	648108	Identifier	prevCh		647977	1					
ANR	648109	AssignmentExpression	prevCh = ' '		647977	2		=			
ANR	648110	Identifier	prevCh		647977	0					
ANR	648111	PrimaryExpression	' '		647977	1					
ANR	648112	IdentifierDeclStatement	"size_t prevNum = formattedLine . find_last_not_of ( "" \\t"" ) ;"	4225:1:122260:122314	647977	9	True				
ANR	648113	IdentifierDecl	"prevNum = formattedLine . find_last_not_of ( "" \\t"" )"		647977	0					
ANR	648114	IdentifierDeclType	size_t		647977	0					
ANR	648115	Identifier	prevNum		647977	1					
ANR	648116	AssignmentExpression	"prevNum = formattedLine . find_last_not_of ( "" \\t"" )"		647977	2		=			
ANR	648117	Identifier	prevNum		647977	0					
ANR	648118	CallExpression	"formattedLine . find_last_not_of ( "" \\t"" )"		647977	1					
ANR	648119	Callee	formattedLine . find_last_not_of		647977	0					
ANR	648120	MemberAccess	formattedLine . find_last_not_of		647977	0					
ANR	648121	Identifier	formattedLine		647977	0					
ANR	648122	Identifier	find_last_not_of		647977	1					
ANR	648123	ArgumentList	""" \\t"""		647977	1					
ANR	648124	Argument	""" \\t"""		647977	0					
ANR	648125	PrimaryExpression	""" \\t"""		647977	0					
ANR	648126	IfStatement	if ( prevNum != string :: npos )		647977	10					
ANR	648127	Condition	prevNum != string :: npos	4226:5:122321:122343	647977	0	True				
ANR	648128	EqualityExpression	prevNum != string :: npos		647977	0		!=			
ANR	648129	Identifier	prevNum		647977	0					
ANR	648130	Identifier	string :: npos		647977	1					
ANR	648131	CompoundStatement		24:1:677:677	647977	1					
ANR	648132	ExpressionStatement	prevCh = formattedLine [ prevNum ]	4228:2:122351:122382	647977	0	True				
ANR	648133	AssignmentExpression	prevCh = formattedLine [ prevNum ]		647977	0		=			
ANR	648134	Identifier	prevCh		647977	0					
ANR	648135	ArrayIndexing	formattedLine [ prevNum ]		647977	1					
ANR	648136	Identifier	formattedLine		647977	0					
ANR	648137	Identifier	prevNum		647977	1					
ANR	648138	IfStatement	if ( prevNum + 1 < formattedLine . length ( ) && isWhiteSpace ( formattedLine [ prevNum + 1 ] ) && prevCh != '(' )		647977	1					
ANR	648139	Condition	prevNum + 1 < formattedLine . length ( ) && isWhiteSpace ( formattedLine [ prevNum + 1 ] ) && prevCh != '('	4229:6:122390:122506	647977	0	True				
ANR	648140	AndExpression	prevNum + 1 < formattedLine . length ( ) && isWhiteSpace ( formattedLine [ prevNum + 1 ] ) && prevCh != '('		647977	0		&&			
ANR	648141	RelationalExpression	prevNum + 1 < formattedLine . length ( )		647977	0		<			
ANR	648142	AdditiveExpression	prevNum + 1		647977	0		+			
ANR	648143	Identifier	prevNum		647977	0					
ANR	648144	PrimaryExpression	1		647977	1					
ANR	648145	CallExpression	formattedLine . length ( )		647977	1					
ANR	648146	Callee	formattedLine . length		647977	0					
ANR	648147	MemberAccess	formattedLine . length		647977	0					
ANR	648148	Identifier	formattedLine		647977	0					
ANR	648149	Identifier	length		647977	1					
ANR	648150	ArgumentList			647977	1					
ANR	648151	AndExpression	isWhiteSpace ( formattedLine [ prevNum + 1 ] ) && prevCh != '('		647977	1		&&			
ANR	648152	CallExpression	isWhiteSpace ( formattedLine [ prevNum + 1 ] )		647977	0					
ANR	648153	Callee	isWhiteSpace		647977	0					
ANR	648154	Identifier	isWhiteSpace		647977	0					
ANR	648155	ArgumentList	formattedLine [ prevNum + 1 ]		647977	1					
ANR	648156	Argument	formattedLine [ prevNum + 1 ]		647977	0					
ANR	648157	ArrayIndexing	formattedLine [ prevNum + 1 ]		647977	0					
ANR	648158	Identifier	formattedLine		647977	0					
ANR	648159	AdditiveExpression	prevNum + 1		647977	1		+			
ANR	648160	Identifier	prevNum		647977	0					
ANR	648161	PrimaryExpression	1		647977	1					
ANR	648162	EqualityExpression	prevCh != '('		647977	1		!=			
ANR	648163	Identifier	prevCh		647977	0					
ANR	648164	PrimaryExpression	'('		647977	1					
ANR	648165	CompoundStatement		29:2:841:841	647977	1					
ANR	648166	ExpressionStatement	spacePadNum -= ( formattedLine . length ( ) - 1 - prevNum )	4233:3:122516:122569	647977	0	True				
ANR	648167	AssignmentExpression	spacePadNum -= ( formattedLine . length ( ) - 1 - prevNum )		647977	0		-=			
ANR	648168	Identifier	spacePadNum		647977	0					
ANR	648169	AdditiveExpression	formattedLine . length ( ) - 1 - prevNum		647977	1		-			
ANR	648170	CallExpression	formattedLine . length ( )		647977	0					
ANR	648171	Callee	formattedLine . length		647977	0					
ANR	648172	MemberAccess	formattedLine . length		647977	0					
ANR	648173	Identifier	formattedLine		647977	0					
ANR	648174	Identifier	length		647977	1					
ANR	648175	ArgumentList			647977	1					
ANR	648176	AdditiveExpression	1 - prevNum		647977	1		-			
ANR	648177	PrimaryExpression	1		647977	0					
ANR	648178	Identifier	prevNum		647977	1					
ANR	648179	ExpressionStatement	formattedLine . erase ( prevNum + 1 )	4234:3:122574:122606	647977	1	True				
ANR	648180	CallExpression	formattedLine . erase ( prevNum + 1 )		647977	0					
ANR	648181	Callee	formattedLine . erase		647977	0					
ANR	648182	MemberAccess	formattedLine . erase		647977	0					
ANR	648183	Identifier	formattedLine		647977	0					
ANR	648184	Identifier	erase		647977	1					
ANR	648185	ArgumentList	prevNum + 1		647977	1					
ANR	648186	Argument	prevNum + 1		647977	0					
ANR	648187	AdditiveExpression	prevNum + 1		647977	0		+			
ANR	648188	Identifier	prevNum		647977	0					
ANR	648189	PrimaryExpression	1		647977	1					
ANR	648190	IdentifierDeclStatement	bool isAfterScopeResolution = previousNonWSChar == ':' ;	4237:1:122616:122670	647977	11	True				
ANR	648191	IdentifierDecl	isAfterScopeResolution = previousNonWSChar == ':'		647977	0					
ANR	648192	IdentifierDeclType	bool		647977	0					
ANR	648193	Identifier	isAfterScopeResolution		647977	1					
ANR	648194	AssignmentExpression	isAfterScopeResolution = previousNonWSChar == ':'		647977	2		=			
ANR	648195	Identifier	isAfterScopeResolution		647977	0					
ANR	648196	EqualityExpression	previousNonWSChar == ':'		647977	1		==			
ANR	648197	Identifier	previousNonWSChar		647977	0					
ANR	648198	PrimaryExpression	':'		647977	1					
ANR	648199	IfStatement	if ( ( itemAlignment == PTR_ALIGN_MIDDLE || itemAlignment == PTR_ALIGN_NAME ) && ! isAfterScopeResolution && prevCh != '(' )		647977	12					
ANR	648200	Condition	( itemAlignment == PTR_ALIGN_MIDDLE || itemAlignment == PTR_ALIGN_NAME ) && ! isAfterScopeResolution && prevCh != '('	4238:5:122677:122799	647977	0	True				
ANR	648201	AndExpression	( itemAlignment == PTR_ALIGN_MIDDLE || itemAlignment == PTR_ALIGN_NAME ) && ! isAfterScopeResolution && prevCh != '('		647977	0		&&			
ANR	648202	OrExpression	itemAlignment == PTR_ALIGN_MIDDLE || itemAlignment == PTR_ALIGN_NAME		647977	0		||			
ANR	648203	EqualityExpression	itemAlignment == PTR_ALIGN_MIDDLE		647977	0		==			
ANR	648204	Identifier	itemAlignment		647977	0					
ANR	648205	Identifier	PTR_ALIGN_MIDDLE		647977	1					
ANR	648206	EqualityExpression	itemAlignment == PTR_ALIGN_NAME		647977	1		==			
ANR	648207	Identifier	itemAlignment		647977	0					
ANR	648208	Identifier	PTR_ALIGN_NAME		647977	1					
ANR	648209	AndExpression	! isAfterScopeResolution && prevCh != '('		647977	1		&&			
ANR	648210	UnaryOperationExpression	! isAfterScopeResolution		647977	0					
ANR	648211	UnaryOperator	!		647977	0					
ANR	648212	Identifier	isAfterScopeResolution		647977	1					
ANR	648213	EqualityExpression	prevCh != '('		647977	1		!=			
ANR	648214	Identifier	prevCh		647977	0					
ANR	648215	PrimaryExpression	'('		647977	1					
ANR	648216	CompoundStatement		37:1:1133:1133	647977	1					
ANR	648217	ExpressionStatement	appendSpacePad ( )	4241:2:122807:122823	647977	0	True				
ANR	648218	CallExpression	appendSpacePad ( )		647977	0					
ANR	648219	Callee	appendSpacePad		647977	0					
ANR	648220	Identifier	appendSpacePad		647977	0					
ANR	648221	ArgumentList			647977	1					
ANR	648222	IfStatement	if ( maxCodeLength != string :: npos && formattedLine . length ( ) > 0 )		647977	1					
ANR	648223	Condition	maxCodeLength != string :: npos && formattedLine . length ( ) > 0	4243:6:122902:122960	647977	0	True				
ANR	648224	AndExpression	maxCodeLength != string :: npos && formattedLine . length ( ) > 0		647977	0		&&			
ANR	648225	EqualityExpression	maxCodeLength != string :: npos		647977	0		!=			
ANR	648226	Identifier	maxCodeLength		647977	0					
ANR	648227	Identifier	string :: npos		647977	1					
ANR	648228	RelationalExpression	formattedLine . length ( ) > 0		647977	1		>			
ANR	648229	CallExpression	formattedLine . length ( )		647977	0					
ANR	648230	Callee	formattedLine . length		647977	0					
ANR	648231	MemberAccess	formattedLine . length		647977	0					
ANR	648232	Identifier	formattedLine		647977	0					
ANR	648233	Identifier	length		647977	1					
ANR	648234	ArgumentList			647977	1					
ANR	648235	PrimaryExpression	0		647977	1					
ANR	648236	ExpressionStatement	updateFormattedLineSplitPointsPointerOrReference ( formattedLine . length ( ) - 1 )	4244:3:122966:123042	647977	1	True				
ANR	648237	CallExpression	updateFormattedLineSplitPointsPointerOrReference ( formattedLine . length ( ) - 1 )		647977	0					
ANR	648238	Callee	updateFormattedLineSplitPointsPointerOrReference		647977	0					
ANR	648239	Identifier	updateFormattedLineSplitPointsPointerOrReference		647977	0					
ANR	648240	ArgumentList	formattedLine . length ( ) - 1		647977	1					
ANR	648241	Argument	formattedLine . length ( ) - 1		647977	0					
ANR	648242	AdditiveExpression	formattedLine . length ( ) - 1		647977	0		-			
ANR	648243	CallExpression	formattedLine . length ( )		647977	0					
ANR	648244	Callee	formattedLine . length		647977	0					
ANR	648245	MemberAccess	formattedLine . length		647977	0					
ANR	648246	Identifier	formattedLine		647977	0					
ANR	648247	Identifier	length		647977	1					
ANR	648248	ArgumentList			647977	1					
ANR	648249	PrimaryExpression	1		647977	1					
ANR	648250	ExpressionStatement	"appendSequence ( sequenceToInsert , false )"	4245:2:123046:123085	647977	2	True				
ANR	648251	CallExpression	"appendSequence ( sequenceToInsert , false )"		647977	0					
ANR	648252	Callee	appendSequence		647977	0					
ANR	648253	Identifier	appendSequence		647977	0					
ANR	648254	ArgumentList	sequenceToInsert		647977	1					
ANR	648255	Argument	sequenceToInsert		647977	0					
ANR	648256	Identifier	sequenceToInsert		647977	0					
ANR	648257	Argument	false		647977	1					
ANR	648258	Identifier	false		647977	0					
ANR	648259	ElseStatement	else		647977	0					
ANR	648260	ExpressionStatement	"appendSequence ( sequenceToInsert , false )"	4248:2:123098:123137	647977	0	True				
ANR	648261	CallExpression	"appendSequence ( sequenceToInsert , false )"		647977	0					
ANR	648262	Callee	appendSequence		647977	0					
ANR	648263	Identifier	appendSequence		647977	0					
ANR	648264	ArgumentList	sequenceToInsert		647977	1					
ANR	648265	Argument	sequenceToInsert		647977	0					
ANR	648266	Identifier	sequenceToInsert		647977	0					
ANR	648267	Argument	false		647977	1					
ANR	648268	Identifier	false		647977	0					
ANR	648269	ReturnType	void		647977	1					
ANR	648270	Identifier	ASFormatter :: formatPointerOrReferenceCast		647977	2					
ANR	648271	ParameterList			647977	3					
ANR	648272	CFGEntryNode	ENTRY		647977		True				
ANR	648273	CFGExitNode	EXIT		647977		True				
ANR	648274	Symbol	* formattedLine		647977						
ANR	648275	Symbol	previousNonWSChar		647977						
ANR	648276	Symbol	maxCodeLength		647977						
ANR	648277	Symbol	string :: npos		647977						
ANR	648278	Symbol	isWhiteSpace		647977						
ANR	648279	Symbol	* currentLine		647977						
ANR	648280	Symbol	formattedLine . find_last_not_of		647977						
ANR	648281	Symbol	isAfterScopeResolution		647977						
ANR	648282	Symbol	REF_SAME_AS_PTR		647977						
ANR	648283	Symbol	isSequenceReached		647977						
ANR	648284	Symbol	sequenceToInsert		647977						
ANR	648285	Symbol	prevNum		647977						
ANR	648286	Symbol	charNum		647977						
ANR	648287	Symbol	pointerAlignment		647977						
ANR	648288	Symbol	itemAlignment		647977						
ANR	648289	Symbol	currentLine		647977						
ANR	648290	Symbol	currentChar		647977						
ANR	648291	Symbol	PTR_ALIGN_NAME		647977						
ANR	648292	Symbol	spacePadNum		647977						
ANR	648293	Symbol	false		647977						
ANR	648294	Symbol	referenceAlignment		647977						
ANR	648295	Symbol	prevCh		647977						
ANR	648296	Symbol	ra		647977						
ANR	648297	Symbol	formattedLine		647977						
ANR	648298	Symbol	pa		647977						
ANR	648299	Symbol	PTR_ALIGN_NONE		647977						
ANR	648300	Symbol	* prevNum		647977						
ANR	648301	Symbol	* charNum		647977						
ANR	648302	Symbol	formattedLine . length		647977						
ANR	648303	Symbol	isJavaStyle		647977						
ANR	648304	Symbol	PTR_ALIGN_MIDDLE		647977						
ANR	648305	Function	ASFormatter :: padParens	4257:0:123378:129697							
ANR	648306	FunctionDef	ASFormatter :: padParens ()		648305	0					
ANR	648307	CompoundStatement		4258:0:123408:129697	648305	0					
ANR	648308	ExpressionStatement	assert ( currentChar == '(' || currentChar == ')' )	4259:1:123411:123459	648305	0	True				
ANR	648309	CallExpression	assert ( currentChar == '(' || currentChar == ')' )		648305	0					
ANR	648310	Callee	assert		648305	0					
ANR	648311	Identifier	assert		648305	0					
ANR	648312	ArgumentList	currentChar == '(' || currentChar == ')'		648305	1					
ANR	648313	Argument	currentChar == '(' || currentChar == ')'		648305	0					
ANR	648314	OrExpression	currentChar == '(' || currentChar == ')'		648305	0		||			
ANR	648315	EqualityExpression	currentChar == '('		648305	0		==			
ANR	648316	Identifier	currentChar		648305	0					
ANR	648317	PrimaryExpression	'('		648305	1					
ANR	648318	EqualityExpression	currentChar == ')'		648305	1		==			
ANR	648319	Identifier	currentChar		648305	0					
ANR	648320	PrimaryExpression	')'		648305	1					
ANR	648321	ExpressionStatement	assert ( shouldPadParensOutside || shouldPadParensInside || shouldUnPadParens || shouldPadFirstParen )	4260:1:123462:123561	648305	1	True				
ANR	648322	CallExpression	assert ( shouldPadParensOutside || shouldPadParensInside || shouldUnPadParens || shouldPadFirstParen )		648305	0					
ANR	648323	Callee	assert		648305	0					
ANR	648324	Identifier	assert		648305	0					
ANR	648325	ArgumentList	shouldPadParensOutside || shouldPadParensInside || shouldUnPadParens || shouldPadFirstParen		648305	1					
ANR	648326	Argument	shouldPadParensOutside || shouldPadParensInside || shouldUnPadParens || shouldPadFirstParen		648305	0					
ANR	648327	OrExpression	shouldPadParensOutside || shouldPadParensInside || shouldUnPadParens || shouldPadFirstParen		648305	0		||			
ANR	648328	Identifier	shouldPadParensOutside		648305	0					
ANR	648329	OrExpression	shouldPadParensInside || shouldUnPadParens || shouldPadFirstParen		648305	1		||			
ANR	648330	Identifier	shouldPadParensInside		648305	0					
ANR	648331	OrExpression	shouldUnPadParens || shouldPadFirstParen		648305	1		||			
ANR	648332	Identifier	shouldUnPadParens		648305	0					
ANR	648333	Identifier	shouldPadFirstParen		648305	1					
ANR	648334	IdentifierDeclStatement	int spacesOutsideToDelete = 0 ;	4262:1:123565:123594	648305	2	True				
ANR	648335	IdentifierDecl	spacesOutsideToDelete = 0		648305	0					
ANR	648336	IdentifierDeclType	int		648305	0					
ANR	648337	Identifier	spacesOutsideToDelete		648305	1					
ANR	648338	AssignmentExpression	spacesOutsideToDelete = 0		648305	2		=			
ANR	648339	Identifier	spacesOutsideToDelete		648305	0					
ANR	648340	PrimaryExpression	0		648305	1					
ANR	648341	IdentifierDeclStatement	int spacesInsideToDelete = 0 ;	4263:1:123597:123625	648305	3	True				
ANR	648342	IdentifierDecl	spacesInsideToDelete = 0		648305	0					
ANR	648343	IdentifierDeclType	int		648305	0					
ANR	648344	Identifier	spacesInsideToDelete		648305	1					
ANR	648345	AssignmentExpression	spacesInsideToDelete = 0		648305	2		=			
ANR	648346	Identifier	spacesInsideToDelete		648305	0					
ANR	648347	PrimaryExpression	0		648305	1					
ANR	648348	IfStatement	if ( currentChar == '(' )		648305	4					
ANR	648349	Condition	currentChar == '('	4265:5:123633:123650	648305	0	True				
ANR	648350	EqualityExpression	currentChar == '('		648305	0		==			
ANR	648351	Identifier	currentChar		648305	0					
ANR	648352	PrimaryExpression	'('		648305	1					
ANR	648353	CompoundStatement		139:2:4598:4636	648305	1					
ANR	648354	ExpressionStatement	spacesOutsideToDelete = formattedLine . length ( ) - 1	4267:2:123658:123708	648305	0	True				
ANR	648355	AssignmentExpression	spacesOutsideToDelete = formattedLine . length ( ) - 1		648305	0		=			
ANR	648356	Identifier	spacesOutsideToDelete		648305	0					
ANR	648357	AdditiveExpression	formattedLine . length ( ) - 1		648305	1		-			
ANR	648358	CallExpression	formattedLine . length ( )		648305	0					
ANR	648359	Callee	formattedLine . length		648305	0					
ANR	648360	MemberAccess	formattedLine . length		648305	0					
ANR	648361	Identifier	formattedLine		648305	0					
ANR	648362	Identifier	length		648305	1					
ANR	648363	ArgumentList			648305	1					
ANR	648364	PrimaryExpression	1		648305	1					
ANR	648365	ExpressionStatement	spacesInsideToDelete = 0	4268:2:123712:123736	648305	1	True				
ANR	648366	AssignmentExpression	spacesInsideToDelete = 0		648305	0		=			
ANR	648367	Identifier	spacesInsideToDelete		648305	0					
ANR	648368	PrimaryExpression	0		648305	1					
ANR	648369	IfStatement	if ( shouldUnPadParens )		648305	2					
ANR	648370	Condition	shouldUnPadParens	4271:6:123801:123817	648305	0	True				
ANR	648371	Identifier	shouldUnPadParens		648305	0					
ANR	648372	CompoundStatement		18:3:477:525	648305	1					
ANR	648373	IdentifierDeclStatement	char lastChar = ' ' ;	4273:3:123827:123846	648305	0	True				
ANR	648374	IdentifierDecl	lastChar = ' '		648305	0					
ANR	648375	IdentifierDeclType	char		648305	0					
ANR	648376	Identifier	lastChar		648305	1					
ANR	648377	AssignmentExpression	lastChar = ' '		648305	2		=			
ANR	648378	Identifier	lastChar		648305	0					
ANR	648379	PrimaryExpression	' '		648305	1					
ANR	648380	IdentifierDeclStatement	bool prevIsParenHeader = false ;	4274:3:123851:123881	648305	1	True				
ANR	648381	IdentifierDecl	prevIsParenHeader = false		648305	0					
ANR	648382	IdentifierDeclType	bool		648305	0					
ANR	648383	Identifier	prevIsParenHeader		648305	1					
ANR	648384	AssignmentExpression	prevIsParenHeader = false		648305	2		=			
ANR	648385	Identifier	false		648305	0					
ANR	648386	Identifier	false		648305	1					
ANR	648387	IdentifierDeclStatement	"size_t i = formattedLine . find_last_not_of ( "" \\t"" ) ;"	4275:3:123886:123934	648305	2	True				
ANR	648388	IdentifierDecl	"i = formattedLine . find_last_not_of ( "" \\t"" )"		648305	0					
ANR	648389	IdentifierDeclType	size_t		648305	0					
ANR	648390	Identifier	i		648305	1					
ANR	648391	AssignmentExpression	"i = formattedLine . find_last_not_of ( "" \\t"" )"		648305	2		=			
ANR	648392	Identifier	i		648305	0					
ANR	648393	CallExpression	"formattedLine . find_last_not_of ( "" \\t"" )"		648305	1					
ANR	648394	Callee	formattedLine . find_last_not_of		648305	0					
ANR	648395	MemberAccess	formattedLine . find_last_not_of		648305	0					
ANR	648396	Identifier	formattedLine		648305	0					
ANR	648397	Identifier	find_last_not_of		648305	1					
ANR	648398	ArgumentList	""" \\t"""		648305	1					
ANR	648399	Argument	""" \\t"""		648305	0					
ANR	648400	PrimaryExpression	""" \\t"""		648305	0					
ANR	648401	IfStatement	if ( i != string :: npos )		648305	3					
ANR	648402	Condition	i != string :: npos	4276:7:123943:123959	648305	0	True				
ANR	648403	EqualityExpression	i != string :: npos		648305	0		!=			
ANR	648404	Identifier	i		648305	0					
ANR	648405	Identifier	string :: npos		648305	1					
ANR	648406	CompoundStatement		20:3:556:556	648305	1					
ANR	648407	IfStatement	if ( formattedLine [ i ] == '{' )		648305	0					
ANR	648408	Condition	formattedLine [ i ] == '{'	4279:8:124043:124065	648305	0	True				
ANR	648409	EqualityExpression	formattedLine [ i ] == '{'		648305	0		==			
ANR	648410	ArrayIndexing	formattedLine [ i ]		648305	0					
ANR	648411	Identifier	formattedLine		648305	0					
ANR	648412	Identifier	i		648305	1					
ANR	648413	PrimaryExpression	'{'		648305	1					
ANR	648414	ExpressionStatement	spacesOutsideToDelete = 0	4280:5:124073:124098	648305	1	True				
ANR	648415	AssignmentExpression	spacesOutsideToDelete = 0		648305	0		=			
ANR	648416	Identifier	spacesOutsideToDelete		648305	0					
ANR	648417	PrimaryExpression	0		648305	1					
ANR	648418	ElseStatement	else		648305	0					
ANR	648419	IfStatement	if ( isCharImmediatelyPostPointerOrReference )		648305	0					
ANR	648420	Condition	isCharImmediatelyPostPointerOrReference	4281:13:124113:124151	648305	0	True				
ANR	648421	Identifier	isCharImmediatelyPostPointerOrReference		648305	0					
ANR	648422	ExpressionStatement	spacesOutsideToDelete = 0	4282:5:124159:124184	648305	1	True				
ANR	648423	AssignmentExpression	spacesOutsideToDelete = 0		648305	0		=			
ANR	648424	Identifier	spacesOutsideToDelete		648305	0					
ANR	648425	PrimaryExpression	0		648305	1					
ANR	648426	ElseStatement	else		648305	0					
ANR	648427	CompoundStatement		32:5:1007:1040	648305	0					
ANR	648428	ExpressionStatement	spacesOutsideToDelete -= i	4285:5:124206:124232	648305	0	True				
ANR	648429	AssignmentExpression	spacesOutsideToDelete -= i		648305	0		-=			
ANR	648430	Identifier	spacesOutsideToDelete		648305	0					
ANR	648431	Identifier	i		648305	1					
ANR	648432	ExpressionStatement	lastChar = formattedLine [ i ]	4286:5:124239:124266	648305	1	True				
ANR	648433	AssignmentExpression	lastChar = formattedLine [ i ]		648305	0		=			
ANR	648434	Identifier	lastChar		648305	0					
ANR	648435	ArrayIndexing	formattedLine [ i ]		648305	1					
ANR	648436	Identifier	formattedLine		648305	0					
ANR	648437	Identifier	i		648305	1					
ANR	648438	IdentifierDeclStatement	"string prevWord = getPreviousWord ( formattedLine , formattedLine . length ( ) ) ;"	4288:5:124337:124409	648305	2	True				
ANR	648439	IdentifierDecl	"prevWord = getPreviousWord ( formattedLine , formattedLine . length ( ) )"		648305	0					
ANR	648440	IdentifierDeclType	string		648305	0					
ANR	648441	Identifier	prevWord		648305	1					
ANR	648442	AssignmentExpression	"prevWord = getPreviousWord ( formattedLine , formattedLine . length ( ) )"		648305	2		=			
ANR	648443	Identifier	prevWord		648305	0					
ANR	648444	CallExpression	"getPreviousWord ( formattedLine , formattedLine . length ( ) )"		648305	1					
ANR	648445	Callee	getPreviousWord		648305	0					
ANR	648446	Identifier	getPreviousWord		648305	0					
ANR	648447	ArgumentList	formattedLine		648305	1					
ANR	648448	Argument	formattedLine		648305	0					
ANR	648449	Identifier	formattedLine		648305	0					
ANR	648450	Argument	formattedLine . length ( )		648305	1					
ANR	648451	CallExpression	formattedLine . length ( )		648305	0					
ANR	648452	Callee	formattedLine . length		648305	0					
ANR	648453	MemberAccess	formattedLine . length		648305	0					
ANR	648454	Identifier	formattedLine		648305	0					
ANR	648455	Identifier	length		648305	1					
ANR	648456	ArgumentList			648305	1					
ANR	648457	IdentifierDeclStatement	const string * prevWordH = nullptr ;	4289:5:124416:124449	648305	3	True				
ANR	648458	IdentifierDecl	* prevWordH = nullptr		648305	0					
ANR	648459	IdentifierDeclType	const string *		648305	0					
ANR	648460	Identifier	prevWordH		648305	1					
ANR	648461	AssignmentExpression	* prevWordH = nullptr		648305	2		=			
ANR	648462	Identifier	nullptr		648305	0					
ANR	648463	Identifier	nullptr		648305	1					
ANR	648464	IfStatement	"if ( shouldPadHeader && prevWord . length ( ) > 0 && isCharPotentialHeader ( prevWord , 0 ) )"		648305	4					
ANR	648465	Condition	"shouldPadHeader && prevWord . length ( ) > 0 && isCharPotentialHeader ( prevWord , 0 )"	4290:9:124460:124563	648305	0	True				
ANR	648466	AndExpression	"shouldPadHeader && prevWord . length ( ) > 0 && isCharPotentialHeader ( prevWord , 0 )"		648305	0		&&			
ANR	648467	Identifier	shouldPadHeader		648305	0					
ANR	648468	AndExpression	"prevWord . length ( ) > 0 && isCharPotentialHeader ( prevWord , 0 )"		648305	1		&&			
ANR	648469	RelationalExpression	prevWord . length ( ) > 0		648305	0		>			
ANR	648470	CallExpression	prevWord . length ( )		648305	0					
ANR	648471	Callee	prevWord . length		648305	0					
ANR	648472	MemberAccess	prevWord . length		648305	0					
ANR	648473	Identifier	prevWord		648305	0					
ANR	648474	Identifier	length		648305	1					
ANR	648475	ArgumentList			648305	1					
ANR	648476	PrimaryExpression	0		648305	1					
ANR	648477	CallExpression	"isCharPotentialHeader ( prevWord , 0 )"		648305	1					
ANR	648478	Callee	isCharPotentialHeader		648305	0					
ANR	648479	Identifier	isCharPotentialHeader		648305	0					
ANR	648480	ArgumentList	prevWord		648305	1					
ANR	648481	Argument	prevWord		648305	0					
ANR	648482	Identifier	prevWord		648305	0					
ANR	648483	Argument	0		648305	1					
ANR	648484	PrimaryExpression	0		648305	0					
ANR	648485	ExpressionStatement	"prevWordH = ASBase :: findHeader ( prevWord , 0 , headers )"	4293:6:124572:124624	648305	1	True				
ANR	648486	AssignmentExpression	"prevWordH = ASBase :: findHeader ( prevWord , 0 , headers )"		648305	0		=			
ANR	648487	Identifier	prevWordH		648305	0					
ANR	648488	CallExpression	"ASBase :: findHeader ( prevWord , 0 , headers )"		648305	1					
ANR	648489	Callee	ASBase :: findHeader		648305	0					
ANR	648490	Identifier	ASBase :: findHeader		648305	0					
ANR	648491	ArgumentList	prevWord		648305	1					
ANR	648492	Argument	prevWord		648305	0					
ANR	648493	Identifier	prevWord		648305	0					
ANR	648494	Argument	0		648305	1					
ANR	648495	PrimaryExpression	0		648305	0					
ANR	648496	Argument	headers		648305	2					
ANR	648497	Identifier	headers		648305	0					
ANR	648498	IfStatement	if ( prevWordH != nullptr )		648305	5					
ANR	648499	Condition	prevWordH != nullptr	4294:9:124635:124654	648305	0	True				
ANR	648500	EqualityExpression	prevWordH != nullptr		648305	0		!=			
ANR	648501	Identifier	prevWordH		648305	0					
ANR	648502	Identifier	nullptr		648305	1					
ANR	648503	ExpressionStatement	prevIsParenHeader = true	4295:6:124663:124687	648305	1	True				
ANR	648504	AssignmentExpression	prevIsParenHeader = true		648305	0		=			
ANR	648505	Identifier	prevIsParenHeader		648305	0					
ANR	648506	Identifier	true		648305	1					
ANR	648507	ElseStatement	else		648305	0					
ANR	648508	IfStatement	if ( prevWord == AS_RETURN )		648305	0					
ANR	648509	Condition	prevWord == AS_RETURN	4296:14:124703:124723	648305	0	True				
ANR	648510	EqualityExpression	prevWord == AS_RETURN		648305	0		==			
ANR	648511	Identifier	prevWord		648305	0					
ANR	648512	Identifier	AS_RETURN		648305	1					
ANR	648513	ExpressionStatement	prevIsParenHeader = true	4297:6:124748:124772	648305	1	True				
ANR	648514	AssignmentExpression	prevIsParenHeader = true		648305	0		=			
ANR	648515	Identifier	prevIsParenHeader		648305	0					
ANR	648516	Identifier	true		648305	1					
ANR	648517	ElseStatement	else		648305	0					
ANR	648518	IfStatement	if ( ( prevWord == AS_NEW || prevWord == AS_DELETE ) && shouldPadHeader )		648305	0					
ANR	648519	Condition	( prevWord == AS_NEW || prevWord == AS_DELETE ) && shouldPadHeader	4298:14:124788:124865	648305	0	True				
ANR	648520	AndExpression	( prevWord == AS_NEW || prevWord == AS_DELETE ) && shouldPadHeader		648305	0		&&			
ANR	648521	OrExpression	prevWord == AS_NEW || prevWord == AS_DELETE		648305	0		||			
ANR	648522	EqualityExpression	prevWord == AS_NEW		648305	0		==			
ANR	648523	Identifier	prevWord		648305	0					
ANR	648524	Identifier	AS_NEW		648305	1					
ANR	648525	EqualityExpression	prevWord == AS_DELETE		648305	1		==			
ANR	648526	Identifier	prevWord		648305	0					
ANR	648527	Identifier	AS_DELETE		648305	1					
ANR	648528	Identifier	shouldPadHeader		648305	1					
ANR	648529	ExpressionStatement	prevIsParenHeader = true	4300:6:124890:124914	648305	1	True				
ANR	648530	AssignmentExpression	prevIsParenHeader = true		648305	0		=			
ANR	648531	Identifier	prevIsParenHeader		648305	0					
ANR	648532	Identifier	true		648305	1					
ANR	648533	ElseStatement	else		648305	0					
ANR	648534	IfStatement	if ( isCStyle ( ) && prevWord == AS_THROW && shouldPadHeader )		648305	0					
ANR	648535	Condition	isCStyle ( ) && prevWord == AS_THROW && shouldPadHeader	4301:14:124930:124982	648305	0	True				
ANR	648536	AndExpression	isCStyle ( ) && prevWord == AS_THROW && shouldPadHeader		648305	0		&&			
ANR	648537	CallExpression	isCStyle ( )		648305	0					
ANR	648538	Callee	isCStyle		648305	0					
ANR	648539	Identifier	isCStyle		648305	0					
ANR	648540	ArgumentList			648305	1					
ANR	648541	AndExpression	prevWord == AS_THROW && shouldPadHeader		648305	1		&&			
ANR	648542	EqualityExpression	prevWord == AS_THROW		648305	0		==			
ANR	648543	Identifier	prevWord		648305	0					
ANR	648544	Identifier	AS_THROW		648305	1					
ANR	648545	Identifier	shouldPadHeader		648305	1					
ANR	648546	ExpressionStatement	prevIsParenHeader = true	4302:6:125006:125030	648305	1	True				
ANR	648547	AssignmentExpression	prevIsParenHeader = true		648305	0		=			
ANR	648548	Identifier	prevIsParenHeader		648305	0					
ANR	648549	Identifier	true		648305	1					
ANR	648550	ElseStatement	else		648305	0					
ANR	648551	IfStatement	"if ( prevWord == ""and"" || prevWord == ""or"" || prevWord == ""in"" )"		648305	0					
ANR	648552	Condition	"prevWord == ""and"" || prevWord == ""or"" || prevWord == ""in"""	4303:14:125046:125102	648305	0	True				
ANR	648553	OrExpression	"prevWord == ""and"" || prevWord == ""or"" || prevWord == ""in"""		648305	0		||			
ANR	648554	EqualityExpression	"prevWord == ""and"""		648305	0		==			
ANR	648555	Identifier	prevWord		648305	0					
ANR	648556	PrimaryExpression	"""and"""		648305	1					
ANR	648557	OrExpression	"prevWord == ""or"" || prevWord == ""in"""		648305	1		||			
ANR	648558	EqualityExpression	"prevWord == ""or"""		648305	0		==			
ANR	648559	Identifier	prevWord		648305	0					
ANR	648560	PrimaryExpression	"""or"""		648305	1					
ANR	648561	EqualityExpression	"prevWord == ""in"""		648305	1		==			
ANR	648562	Identifier	prevWord		648305	0					
ANR	648563	PrimaryExpression	"""in"""		648305	1					
ANR	648564	ExpressionStatement	prevIsParenHeader = true	4304:6:125127:125151	648305	1	True				
ANR	648565	AssignmentExpression	prevIsParenHeader = true		648305	0		=			
ANR	648566	Identifier	prevIsParenHeader		648305	0					
ANR	648567	Identifier	true		648305	1					
ANR	648568	ElseStatement	else		648305	0					
ANR	648569	IfStatement	"if ( prevWord == ""bool"" || prevWord == ""int"" || prevWord == ""void"" || prevWord == ""void*"" || prevWord == ""char"" || prevWord == ""char*"" || prevWord == ""long"" || prevWord == ""double"" || prevWord == ""float"" || ( prevWord . length ( ) >= 4 && prevWord . compare ( prevWord . length ( ) - 2 , 2 , ""_t"" ) == 0 ) || prevWord == ""Int32"" || prevWord == ""UInt32"" || prevWord == ""Int64"" || prevWord == ""UInt64"" || prevWord == ""BOOL"" || prevWord == ""DWORD"" || prevWord == ""HWND"" || prevWord == ""INT"" || prevWord == ""LPSTR"" || prevWord == ""VOID"" || prevWord == ""LPVOID"" )"		648305	0					
ANR	648570	Condition	"prevWord == ""bool"" || prevWord == ""int"" || prevWord == ""void"" || prevWord == ""void*"" || prevWord == ""char"" || prevWord == ""char*"" || prevWord == ""long"" || prevWord == ""double"" || prevWord == ""float"" || ( prevWord . length ( ) >= 4 && prevWord . compare ( prevWord . length ( ) - 2 , 2 , ""_t"" ) == 0 ) || prevWord == ""Int32"" || prevWord == ""UInt32"" || prevWord == ""Int64"" || prevWord == ""UInt64"" || prevWord == ""BOOL"" || prevWord == ""DWORD"" || prevWord == ""HWND"" || prevWord == ""INT"" || prevWord == ""LPSTR"" || prevWord == ""VOID"" || prevWord == ""LPVOID"""	4306:14:125197:126060	648305	0	True				
ANR	648571	OrExpression	"prevWord == ""bool"" || prevWord == ""int"" || prevWord == ""void"" || prevWord == ""void*"" || prevWord == ""char"" || prevWord == ""char*"" || prevWord == ""long"" || prevWord == ""double"" || prevWord == ""float"" || ( prevWord . length ( ) >= 4 && prevWord . compare ( prevWord . length ( ) - 2 , 2 , ""_t"" ) == 0 ) || prevWord == ""Int32"" || prevWord == ""UInt32"" || prevWord == ""Int64"" || prevWord == ""UInt64"" || prevWord == ""BOOL"" || prevWord == ""DWORD"" || prevWord == ""HWND"" || prevWord == ""INT"" || prevWord == ""LPSTR"" || prevWord == ""VOID"" || prevWord == ""LPVOID"""		648305	0		||			
ANR	648572	EqualityExpression	"prevWord == ""bool"""		648305	0		==			
ANR	648573	Identifier	prevWord		648305	0					
ANR	648574	PrimaryExpression	"""bool"""		648305	1					
ANR	648575	OrExpression	"prevWord == ""int"" || prevWord == ""void"" || prevWord == ""void*"" || prevWord == ""char"" || prevWord == ""char*"" || prevWord == ""long"" || prevWord == ""double"" || prevWord == ""float"" || ( prevWord . length ( ) >= 4 && prevWord . compare ( prevWord . length ( ) - 2 , 2 , ""_t"" ) == 0 ) || prevWord == ""Int32"" || prevWord == ""UInt32"" || prevWord == ""Int64"" || prevWord == ""UInt64"" || prevWord == ""BOOL"" || prevWord == ""DWORD"" || prevWord == ""HWND"" || prevWord == ""INT"" || prevWord == ""LPSTR"" || prevWord == ""VOID"" || prevWord == ""LPVOID"""		648305	1		||			
ANR	648576	EqualityExpression	"prevWord == ""int"""		648305	0		==			
ANR	648577	Identifier	prevWord		648305	0					
ANR	648578	PrimaryExpression	"""int"""		648305	1					
ANR	648579	OrExpression	"prevWord == ""void"" || prevWord == ""void*"" || prevWord == ""char"" || prevWord == ""char*"" || prevWord == ""long"" || prevWord == ""double"" || prevWord == ""float"" || ( prevWord . length ( ) >= 4 && prevWord . compare ( prevWord . length ( ) - 2 , 2 , ""_t"" ) == 0 ) || prevWord == ""Int32"" || prevWord == ""UInt32"" || prevWord == ""Int64"" || prevWord == ""UInt64"" || prevWord == ""BOOL"" || prevWord == ""DWORD"" || prevWord == ""HWND"" || prevWord == ""INT"" || prevWord == ""LPSTR"" || prevWord == ""VOID"" || prevWord == ""LPVOID"""		648305	1		||			
ANR	648580	EqualityExpression	"prevWord == ""void"""		648305	0		==			
ANR	648581	Identifier	prevWord		648305	0					
ANR	648582	PrimaryExpression	"""void"""		648305	1					
ANR	648583	OrExpression	"prevWord == ""void*"" || prevWord == ""char"" || prevWord == ""char*"" || prevWord == ""long"" || prevWord == ""double"" || prevWord == ""float"" || ( prevWord . length ( ) >= 4 && prevWord . compare ( prevWord . length ( ) - 2 , 2 , ""_t"" ) == 0 ) || prevWord == ""Int32"" || prevWord == ""UInt32"" || prevWord == ""Int64"" || prevWord == ""UInt64"" || prevWord == ""BOOL"" || prevWord == ""DWORD"" || prevWord == ""HWND"" || prevWord == ""INT"" || prevWord == ""LPSTR"" || prevWord == ""VOID"" || prevWord == ""LPVOID"""		648305	1		||			
ANR	648584	EqualityExpression	"prevWord == ""void*"""		648305	0		==			
ANR	648585	Identifier	prevWord		648305	0					
ANR	648586	PrimaryExpression	"""void*"""		648305	1					
ANR	648587	OrExpression	"prevWord == ""char"" || prevWord == ""char*"" || prevWord == ""long"" || prevWord == ""double"" || prevWord == ""float"" || ( prevWord . length ( ) >= 4 && prevWord . compare ( prevWord . length ( ) - 2 , 2 , ""_t"" ) == 0 ) || prevWord == ""Int32"" || prevWord == ""UInt32"" || prevWord == ""Int64"" || prevWord == ""UInt64"" || prevWord == ""BOOL"" || prevWord == ""DWORD"" || prevWord == ""HWND"" || prevWord == ""INT"" || prevWord == ""LPSTR"" || prevWord == ""VOID"" || prevWord == ""LPVOID"""		648305	1		||			
ANR	648588	EqualityExpression	"prevWord == ""char"""		648305	0		==			
ANR	648589	Identifier	prevWord		648305	0					
ANR	648590	PrimaryExpression	"""char"""		648305	1					
ANR	648591	OrExpression	"prevWord == ""char*"" || prevWord == ""long"" || prevWord == ""double"" || prevWord == ""float"" || ( prevWord . length ( ) >= 4 && prevWord . compare ( prevWord . length ( ) - 2 , 2 , ""_t"" ) == 0 ) || prevWord == ""Int32"" || prevWord == ""UInt32"" || prevWord == ""Int64"" || prevWord == ""UInt64"" || prevWord == ""BOOL"" || prevWord == ""DWORD"" || prevWord == ""HWND"" || prevWord == ""INT"" || prevWord == ""LPSTR"" || prevWord == ""VOID"" || prevWord == ""LPVOID"""		648305	1		||			
ANR	648592	EqualityExpression	"prevWord == ""char*"""		648305	0		==			
ANR	648593	Identifier	prevWord		648305	0					
ANR	648594	PrimaryExpression	"""char*"""		648305	1					
ANR	648595	OrExpression	"prevWord == ""long"" || prevWord == ""double"" || prevWord == ""float"" || ( prevWord . length ( ) >= 4 && prevWord . compare ( prevWord . length ( ) - 2 , 2 , ""_t"" ) == 0 ) || prevWord == ""Int32"" || prevWord == ""UInt32"" || prevWord == ""Int64"" || prevWord == ""UInt64"" || prevWord == ""BOOL"" || prevWord == ""DWORD"" || prevWord == ""HWND"" || prevWord == ""INT"" || prevWord == ""LPSTR"" || prevWord == ""VOID"" || prevWord == ""LPVOID"""		648305	1		||			
ANR	648596	EqualityExpression	"prevWord == ""long"""		648305	0		==			
ANR	648597	Identifier	prevWord		648305	0					
ANR	648598	PrimaryExpression	"""long"""		648305	1					
ANR	648599	OrExpression	"prevWord == ""double"" || prevWord == ""float"" || ( prevWord . length ( ) >= 4 && prevWord . compare ( prevWord . length ( ) - 2 , 2 , ""_t"" ) == 0 ) || prevWord == ""Int32"" || prevWord == ""UInt32"" || prevWord == ""Int64"" || prevWord == ""UInt64"" || prevWord == ""BOOL"" || prevWord == ""DWORD"" || prevWord == ""HWND"" || prevWord == ""INT"" || prevWord == ""LPSTR"" || prevWord == ""VOID"" || prevWord == ""LPVOID"""		648305	1		||			
ANR	648600	EqualityExpression	"prevWord == ""double"""		648305	0		==			
ANR	648601	Identifier	prevWord		648305	0					
ANR	648602	PrimaryExpression	"""double"""		648305	1					
ANR	648603	OrExpression	"prevWord == ""float"" || ( prevWord . length ( ) >= 4 && prevWord . compare ( prevWord . length ( ) - 2 , 2 , ""_t"" ) == 0 ) || prevWord == ""Int32"" || prevWord == ""UInt32"" || prevWord == ""Int64"" || prevWord == ""UInt64"" || prevWord == ""BOOL"" || prevWord == ""DWORD"" || prevWord == ""HWND"" || prevWord == ""INT"" || prevWord == ""LPSTR"" || prevWord == ""VOID"" || prevWord == ""LPVOID"""		648305	1		||			
ANR	648604	EqualityExpression	"prevWord == ""float"""		648305	0		==			
ANR	648605	Identifier	prevWord		648305	0					
ANR	648606	PrimaryExpression	"""float"""		648305	1					
ANR	648607	OrExpression	"( prevWord . length ( ) >= 4 && prevWord . compare ( prevWord . length ( ) - 2 , 2 , ""_t"" ) == 0 ) || prevWord == ""Int32"" || prevWord == ""UInt32"" || prevWord == ""Int64"" || prevWord == ""UInt64"" || prevWord == ""BOOL"" || prevWord == ""DWORD"" || prevWord == ""HWND"" || prevWord == ""INT"" || prevWord == ""LPSTR"" || prevWord == ""VOID"" || prevWord == ""LPVOID"""		648305	1		||			
ANR	648608	AndExpression	"prevWord . length ( ) >= 4 && prevWord . compare ( prevWord . length ( ) - 2 , 2 , ""_t"" ) == 0"		648305	0		&&			
ANR	648609	RelationalExpression	prevWord . length ( ) >= 4		648305	0		>=			
ANR	648610	CallExpression	prevWord . length ( )		648305	0					
ANR	648611	Callee	prevWord . length		648305	0					
ANR	648612	MemberAccess	prevWord . length		648305	0					
ANR	648613	Identifier	prevWord		648305	0					
ANR	648614	Identifier	length		648305	1					
ANR	648615	ArgumentList			648305	1					
ANR	648616	PrimaryExpression	4		648305	1					
ANR	648617	EqualityExpression	"prevWord . compare ( prevWord . length ( ) - 2 , 2 , ""_t"" ) == 0"		648305	1		==			
ANR	648618	CallExpression	"prevWord . compare ( prevWord . length ( ) - 2 , 2 , ""_t"" )"		648305	0					
ANR	648619	Callee	prevWord . compare		648305	0					
ANR	648620	MemberAccess	prevWord . compare		648305	0					
ANR	648621	Identifier	prevWord		648305	0					
ANR	648622	Identifier	compare		648305	1					
ANR	648623	ArgumentList	prevWord . length ( ) - 2		648305	1					
ANR	648624	Argument	prevWord . length ( ) - 2		648305	0					
ANR	648625	AdditiveExpression	prevWord . length ( ) - 2		648305	0		-			
ANR	648626	CallExpression	prevWord . length ( )		648305	0					
ANR	648627	Callee	prevWord . length		648305	0					
ANR	648628	MemberAccess	prevWord . length		648305	0					
ANR	648629	Identifier	prevWord		648305	0					
ANR	648630	Identifier	length		648305	1					
ANR	648631	ArgumentList			648305	1					
ANR	648632	PrimaryExpression	2		648305	1					
ANR	648633	Argument	2		648305	1					
ANR	648634	PrimaryExpression	2		648305	0					
ANR	648635	Argument	"""_t"""		648305	2					
ANR	648636	PrimaryExpression	"""_t"""		648305	0					
ANR	648637	PrimaryExpression	0		648305	1					
ANR	648638	OrExpression	"prevWord == ""Int32"" || prevWord == ""UInt32"" || prevWord == ""Int64"" || prevWord == ""UInt64"" || prevWord == ""BOOL"" || prevWord == ""DWORD"" || prevWord == ""HWND"" || prevWord == ""INT"" || prevWord == ""LPSTR"" || prevWord == ""VOID"" || prevWord == ""LPVOID"""		648305	1		||			
ANR	648639	EqualityExpression	"prevWord == ""Int32"""		648305	0		==			
ANR	648640	Identifier	prevWord		648305	0					
ANR	648641	PrimaryExpression	"""Int32"""		648305	1					
ANR	648642	OrExpression	"prevWord == ""UInt32"" || prevWord == ""Int64"" || prevWord == ""UInt64"" || prevWord == ""BOOL"" || prevWord == ""DWORD"" || prevWord == ""HWND"" || prevWord == ""INT"" || prevWord == ""LPSTR"" || prevWord == ""VOID"" || prevWord == ""LPVOID"""		648305	1		||			
ANR	648643	EqualityExpression	"prevWord == ""UInt32"""		648305	0		==			
ANR	648644	Identifier	prevWord		648305	0					
ANR	648645	PrimaryExpression	"""UInt32"""		648305	1					
ANR	648646	OrExpression	"prevWord == ""Int64"" || prevWord == ""UInt64"" || prevWord == ""BOOL"" || prevWord == ""DWORD"" || prevWord == ""HWND"" || prevWord == ""INT"" || prevWord == ""LPSTR"" || prevWord == ""VOID"" || prevWord == ""LPVOID"""		648305	1		||			
ANR	648647	EqualityExpression	"prevWord == ""Int64"""		648305	0		==			
ANR	648648	Identifier	prevWord		648305	0					
ANR	648649	PrimaryExpression	"""Int64"""		648305	1					
ANR	648650	OrExpression	"prevWord == ""UInt64"" || prevWord == ""BOOL"" || prevWord == ""DWORD"" || prevWord == ""HWND"" || prevWord == ""INT"" || prevWord == ""LPSTR"" || prevWord == ""VOID"" || prevWord == ""LPVOID"""		648305	1		||			
ANR	648651	EqualityExpression	"prevWord == ""UInt64"""		648305	0		==			
ANR	648652	Identifier	prevWord		648305	0					
ANR	648653	PrimaryExpression	"""UInt64"""		648305	1					
ANR	648654	OrExpression	"prevWord == ""BOOL"" || prevWord == ""DWORD"" || prevWord == ""HWND"" || prevWord == ""INT"" || prevWord == ""LPSTR"" || prevWord == ""VOID"" || prevWord == ""LPVOID"""		648305	1		||			
ANR	648655	EqualityExpression	"prevWord == ""BOOL"""		648305	0		==			
ANR	648656	Identifier	prevWord		648305	0					
ANR	648657	PrimaryExpression	"""BOOL"""		648305	1					
ANR	648658	OrExpression	"prevWord == ""DWORD"" || prevWord == ""HWND"" || prevWord == ""INT"" || prevWord == ""LPSTR"" || prevWord == ""VOID"" || prevWord == ""LPVOID"""		648305	1		||			
ANR	648659	EqualityExpression	"prevWord == ""DWORD"""		648305	0		==			
ANR	648660	Identifier	prevWord		648305	0					
ANR	648661	PrimaryExpression	"""DWORD"""		648305	1					
ANR	648662	OrExpression	"prevWord == ""HWND"" || prevWord == ""INT"" || prevWord == ""LPSTR"" || prevWord == ""VOID"" || prevWord == ""LPVOID"""		648305	1		||			
ANR	648663	EqualityExpression	"prevWord == ""HWND"""		648305	0		==			
ANR	648664	Identifier	prevWord		648305	0					
ANR	648665	PrimaryExpression	"""HWND"""		648305	1					
ANR	648666	OrExpression	"prevWord == ""INT"" || prevWord == ""LPSTR"" || prevWord == ""VOID"" || prevWord == ""LPVOID"""		648305	1		||			
ANR	648667	EqualityExpression	"prevWord == ""INT"""		648305	0		==			
ANR	648668	Identifier	prevWord		648305	0					
ANR	648669	PrimaryExpression	"""INT"""		648305	1					
ANR	648670	OrExpression	"prevWord == ""LPSTR"" || prevWord == ""VOID"" || prevWord == ""LPVOID"""		648305	1		||			
ANR	648671	EqualityExpression	"prevWord == ""LPSTR"""		648305	0		==			
ANR	648672	Identifier	prevWord		648305	0					
ANR	648673	PrimaryExpression	"""LPSTR"""		648305	1					
ANR	648674	OrExpression	"prevWord == ""VOID"" || prevWord == ""LPVOID"""		648305	1		||			
ANR	648675	EqualityExpression	"prevWord == ""VOID"""		648305	0		==			
ANR	648676	Identifier	prevWord		648305	0					
ANR	648677	PrimaryExpression	"""VOID"""		648305	1					
ANR	648678	EqualityExpression	"prevWord == ""LPVOID"""		648305	1		==			
ANR	648679	Identifier	prevWord		648305	0					
ANR	648680	PrimaryExpression	"""LPVOID"""		648305	1					
ANR	648681	CompoundStatement		72:5:2673:2673	648305	1					
ANR	648682	ExpressionStatement	prevIsParenHeader = true	4330:6:126090:126114	648305	0	True				
ANR	648683	AssignmentExpression	prevIsParenHeader = true		648305	0		=			
ANR	648684	Identifier	prevIsParenHeader		648305	0					
ANR	648685	Identifier	true		648305	1					
ANR	648686	IfStatement	if ( shouldPadParensOutside || prevIsParenHeader )		648305	4					
ANR	648687	Condition	shouldPadParensOutside || prevIsParenHeader	4335:7:126204:126246	648305	0	True				
ANR	648688	OrExpression	shouldPadParensOutside || prevIsParenHeader		648305	0		||			
ANR	648689	Identifier	shouldPadParensOutside		648305	0					
ANR	648690	Identifier	prevIsParenHeader		648305	1					
ANR	648691	ExpressionStatement	spacesOutsideToDelete --	4336:4:126253:126276	648305	1	True				
ANR	648692	PostIncDecOperationExpression	spacesOutsideToDelete --		648305	0					
ANR	648693	Identifier	spacesOutsideToDelete		648305	0					
ANR	648694	IncDec	--		648305	1					
ANR	648695	ElseStatement	else		648305	0					
ANR	648696	IfStatement	"if ( lastChar == '|' || lastChar == '&' || lastChar == ',' || ( lastChar == '(' && shouldPadParensInside ) || ( lastChar == '>' && ! foundCastOperator ) || lastChar == '<' || lastChar == '?' || lastChar == ':' || lastChar == ';' || lastChar == '=' || lastChar == '+' || lastChar == '-' || lastChar == '*' || lastChar == '/' || lastChar == '%' || lastChar == '^' )"		648305	0					
ANR	648697	Condition	"lastChar == '|' || lastChar == '&' || lastChar == ',' || ( lastChar == '(' && shouldPadParensInside ) || ( lastChar == '>' && ! foundCastOperator ) || lastChar == '<' || lastChar == '?' || lastChar == ':' || lastChar == ';' || lastChar == '=' || lastChar == '+' || lastChar == '-' || lastChar == '*' || lastChar == '/' || lastChar == '%' || lastChar == '^'"	4337:12:126290:126867	648305	0	True				
ANR	648698	OrExpression	"lastChar == '|' || lastChar == '&' || lastChar == ',' || ( lastChar == '(' && shouldPadParensInside ) || ( lastChar == '>' && ! foundCastOperator ) || lastChar == '<' || lastChar == '?' || lastChar == ':' || lastChar == ';' || lastChar == '=' || lastChar == '+' || lastChar == '-' || lastChar == '*' || lastChar == '/' || lastChar == '%' || lastChar == '^'"		648305	0		||			
ANR	648699	EqualityExpression	lastChar == '|'		648305	0		==			
ANR	648700	Identifier	lastChar		648305	0					
ANR	648701	PrimaryExpression	'|'		648305	1					
ANR	648702	OrExpression	"lastChar == '&' || lastChar == ',' || ( lastChar == '(' && shouldPadParensInside ) || ( lastChar == '>' && ! foundCastOperator ) || lastChar == '<' || lastChar == '?' || lastChar == ':' || lastChar == ';' || lastChar == '=' || lastChar == '+' || lastChar == '-' || lastChar == '*' || lastChar == '/' || lastChar == '%' || lastChar == '^'"		648305	1		||			
ANR	648703	EqualityExpression	lastChar == '&'		648305	0		==			
ANR	648704	Identifier	lastChar		648305	0					
ANR	648705	PrimaryExpression	'&'		648305	1					
ANR	648706	OrExpression	"lastChar == ',' || ( lastChar == '(' && shouldPadParensInside ) || ( lastChar == '>' && ! foundCastOperator ) || lastChar == '<' || lastChar == '?' || lastChar == ':' || lastChar == ';' || lastChar == '=' || lastChar == '+' || lastChar == '-' || lastChar == '*' || lastChar == '/' || lastChar == '%' || lastChar == '^'"		648305	1		||			
ANR	648707	EqualityExpression	"lastChar == ','"		648305	0		==			
ANR	648708	Identifier	lastChar		648305	0					
ANR	648709	PrimaryExpression	"','"		648305	1					
ANR	648710	OrExpression	( lastChar == '(' && shouldPadParensInside ) || ( lastChar == '>' && ! foundCastOperator ) || lastChar == '<' || lastChar == '?' || lastChar == ':' || lastChar == ';' || lastChar == '=' || lastChar == '+' || lastChar == '-' || lastChar == '*' || lastChar == '/' || lastChar == '%' || lastChar == '^'		648305	1		||			
ANR	648711	AndExpression	lastChar == '(' && shouldPadParensInside		648305	0		&&			
ANR	648712	EqualityExpression	lastChar == '('		648305	0		==			
ANR	648713	Identifier	lastChar		648305	0					
ANR	648714	PrimaryExpression	'('		648305	1					
ANR	648715	Identifier	shouldPadParensInside		648305	1					
ANR	648716	OrExpression	( lastChar == '>' && ! foundCastOperator ) || lastChar == '<' || lastChar == '?' || lastChar == ':' || lastChar == ';' || lastChar == '=' || lastChar == '+' || lastChar == '-' || lastChar == '*' || lastChar == '/' || lastChar == '%' || lastChar == '^'		648305	1		||			
ANR	648717	AndExpression	lastChar == '>' && ! foundCastOperator		648305	0		&&			
ANR	648718	EqualityExpression	lastChar == '>'		648305	0		==			
ANR	648719	Identifier	lastChar		648305	0					
ANR	648720	PrimaryExpression	'>'		648305	1					
ANR	648721	UnaryOperationExpression	! foundCastOperator		648305	1					
ANR	648722	UnaryOperator	!		648305	0					
ANR	648723	Identifier	foundCastOperator		648305	1					
ANR	648724	OrExpression	lastChar == '<' || lastChar == '?' || lastChar == ':' || lastChar == ';' || lastChar == '=' || lastChar == '+' || lastChar == '-' || lastChar == '*' || lastChar == '/' || lastChar == '%' || lastChar == '^'		648305	1		||			
ANR	648725	EqualityExpression	lastChar == '<'		648305	0		==			
ANR	648726	Identifier	lastChar		648305	0					
ANR	648727	PrimaryExpression	'<'		648305	1					
ANR	648728	OrExpression	lastChar == '?' || lastChar == ':' || lastChar == ';' || lastChar == '=' || lastChar == '+' || lastChar == '-' || lastChar == '*' || lastChar == '/' || lastChar == '%' || lastChar == '^'		648305	1		||			
ANR	648729	EqualityExpression	lastChar == '?'		648305	0		==			
ANR	648730	Identifier	lastChar		648305	0					
ANR	648731	PrimaryExpression	'?'		648305	1					
ANR	648732	OrExpression	lastChar == ':' || lastChar == ';' || lastChar == '=' || lastChar == '+' || lastChar == '-' || lastChar == '*' || lastChar == '/' || lastChar == '%' || lastChar == '^'		648305	1		||			
ANR	648733	EqualityExpression	lastChar == ':'		648305	0		==			
ANR	648734	Identifier	lastChar		648305	0					
ANR	648735	PrimaryExpression	':'		648305	1					
ANR	648736	OrExpression	lastChar == ';' || lastChar == '=' || lastChar == '+' || lastChar == '-' || lastChar == '*' || lastChar == '/' || lastChar == '%' || lastChar == '^'		648305	1		||			
ANR	648737	EqualityExpression	lastChar == ';'		648305	0		==			
ANR	648738	Identifier	lastChar		648305	0					
ANR	648739	PrimaryExpression	';'		648305	1					
ANR	648740	OrExpression	lastChar == '=' || lastChar == '+' || lastChar == '-' || lastChar == '*' || lastChar == '/' || lastChar == '%' || lastChar == '^'		648305	1		||			
ANR	648741	EqualityExpression	lastChar == '='		648305	0		==			
ANR	648742	Identifier	lastChar		648305	0					
ANR	648743	PrimaryExpression	'='		648305	1					
ANR	648744	OrExpression	lastChar == '+' || lastChar == '-' || lastChar == '*' || lastChar == '/' || lastChar == '%' || lastChar == '^'		648305	1		||			
ANR	648745	EqualityExpression	lastChar == '+'		648305	0		==			
ANR	648746	Identifier	lastChar		648305	0					
ANR	648747	PrimaryExpression	'+'		648305	1					
ANR	648748	OrExpression	lastChar == '-' || lastChar == '*' || lastChar == '/' || lastChar == '%' || lastChar == '^'		648305	1		||			
ANR	648749	EqualityExpression	lastChar == '-'		648305	0		==			
ANR	648750	Identifier	lastChar		648305	0					
ANR	648751	PrimaryExpression	'-'		648305	1					
ANR	648752	OrExpression	lastChar == '*' || lastChar == '/' || lastChar == '%' || lastChar == '^'		648305	1		||			
ANR	648753	EqualityExpression	lastChar == '*'		648305	0		==			
ANR	648754	Identifier	lastChar		648305	0					
ANR	648755	PrimaryExpression	'*'		648305	1					
ANR	648756	OrExpression	lastChar == '/' || lastChar == '%' || lastChar == '^'		648305	1		||			
ANR	648757	EqualityExpression	lastChar == '/'		648305	0		==			
ANR	648758	Identifier	lastChar		648305	0					
ANR	648759	PrimaryExpression	'/'		648305	1					
ANR	648760	OrExpression	lastChar == '%' || lastChar == '^'		648305	1		||			
ANR	648761	EqualityExpression	lastChar == '%'		648305	0		==			
ANR	648762	Identifier	lastChar		648305	0					
ANR	648763	PrimaryExpression	'%'		648305	1					
ANR	648764	EqualityExpression	lastChar == '^'		648305	1		==			
ANR	648765	Identifier	lastChar		648305	0					
ANR	648766	PrimaryExpression	'^'		648305	1					
ANR	648767	ExpressionStatement	spacesOutsideToDelete --	4354:4:126886:126909	648305	1	True				
ANR	648768	PostIncDecOperationExpression	spacesOutsideToDelete --		648305	0					
ANR	648769	Identifier	spacesOutsideToDelete		648305	0					
ANR	648770	IncDec	--		648305	1					
ANR	648771	IfStatement	if ( spacesOutsideToDelete > 0 )		648305	5					
ANR	648772	Condition	spacesOutsideToDelete > 0	4356:7:126919:126943	648305	0	True				
ANR	648773	RelationalExpression	spacesOutsideToDelete > 0		648305	0		>			
ANR	648774	Identifier	spacesOutsideToDelete		648305	0					
ANR	648775	PrimaryExpression	0		648305	1					
ANR	648776	CompoundStatement		100:3:3540:3540	648305	1					
ANR	648777	ExpressionStatement	"formattedLine . erase ( i + 1 , spacesOutsideToDelete )"	4358:4:126955:127004	648305	0	True				
ANR	648778	CallExpression	"formattedLine . erase ( i + 1 , spacesOutsideToDelete )"		648305	0					
ANR	648779	Callee	formattedLine . erase		648305	0					
ANR	648780	MemberAccess	formattedLine . erase		648305	0					
ANR	648781	Identifier	formattedLine		648305	0					
ANR	648782	Identifier	erase		648305	1					
ANR	648783	ArgumentList	i + 1		648305	1					
ANR	648784	Argument	i + 1		648305	0					
ANR	648785	AdditiveExpression	i + 1		648305	0		+			
ANR	648786	Identifier	i		648305	0					
ANR	648787	PrimaryExpression	1		648305	1					
ANR	648788	Argument	spacesOutsideToDelete		648305	1					
ANR	648789	Identifier	spacesOutsideToDelete		648305	0					
ANR	648790	ExpressionStatement	spacePadNum -= spacesOutsideToDelete	4359:4:127010:127046	648305	1	True				
ANR	648791	AssignmentExpression	spacePadNum -= spacesOutsideToDelete		648305	0		-=			
ANR	648792	Identifier	spacePadNum		648305	0					
ANR	648793	Identifier	spacesOutsideToDelete		648305	1					
ANR	648794	IdentifierDeclStatement	char peekedCharOutside = peekNextChar ( ) ;	4364:2:127088:127127	648305	3	True				
ANR	648795	IdentifierDecl	peekedCharOutside = peekNextChar ( )		648305	0					
ANR	648796	IdentifierDeclType	char		648305	0					
ANR	648797	Identifier	peekedCharOutside		648305	1					
ANR	648798	AssignmentExpression	peekedCharOutside = peekNextChar ( )		648305	2		=			
ANR	648799	Identifier	peekedCharOutside		648305	0					
ANR	648800	CallExpression	peekNextChar ( )		648305	1					
ANR	648801	Callee	peekNextChar		648305	0					
ANR	648802	Identifier	peekNextChar		648305	0					
ANR	648803	ArgumentList			648305	1					
ANR	648804	IfStatement	if ( shouldPadFirstParen && previousChar != '(' && peekedCharOutside != ')' )		648305	4					
ANR	648805	Condition	shouldPadFirstParen && previousChar != '(' && peekedCharOutside != ')'	4365:6:127135:127204	648305	0	True				
ANR	648806	AndExpression	shouldPadFirstParen && previousChar != '(' && peekedCharOutside != ')'		648305	0		&&			
ANR	648807	Identifier	shouldPadFirstParen		648305	0					
ANR	648808	AndExpression	previousChar != '(' && peekedCharOutside != ')'		648305	1		&&			
ANR	648809	EqualityExpression	previousChar != '('		648305	0		!=			
ANR	648810	Identifier	previousChar		648305	0					
ANR	648811	PrimaryExpression	'('		648305	1					
ANR	648812	EqualityExpression	peekedCharOutside != ')'		648305	1		!=			
ANR	648813	Identifier	peekedCharOutside		648305	0					
ANR	648814	PrimaryExpression	')'		648305	1					
ANR	648815	ExpressionStatement	appendSpacePad ( )	4366:3:127210:127226	648305	1	True				
ANR	648816	CallExpression	appendSpacePad ( )		648305	0					
ANR	648817	Callee	appendSpacePad		648305	0					
ANR	648818	Identifier	appendSpacePad		648305	0					
ANR	648819	ArgumentList			648305	1					
ANR	648820	ElseStatement	else		648305	0					
ANR	648821	IfStatement	if ( shouldPadParensOutside )		648305	0					
ANR	648822	Condition	shouldPadParensOutside	4367:11:127239:127260	648305	0	True				
ANR	648823	Identifier	shouldPadParensOutside		648305	0					
ANR	648824	CompoundStatement		111:2:3856:3856	648305	1					
ANR	648825	IfStatement	if ( ! ( currentChar == '(' && peekedCharOutside == ')' ) )		648305	0					
ANR	648826	Condition	! ( currentChar == '(' && peekedCharOutside == ')' )	4369:7:127274:127322	648305	0	True				
ANR	648827	UnaryOperationExpression	! ( currentChar == '(' && peekedCharOutside == ')' )		648305	0					
ANR	648828	UnaryOperator	!		648305	0					
ANR	648829	AndExpression	currentChar == '(' && peekedCharOutside == ')'		648305	1		&&			
ANR	648830	EqualityExpression	currentChar == '('		648305	0		==			
ANR	648831	Identifier	currentChar		648305	0					
ANR	648832	PrimaryExpression	'('		648305	1					
ANR	648833	EqualityExpression	peekedCharOutside == ')'		648305	1		==			
ANR	648834	Identifier	peekedCharOutside		648305	0					
ANR	648835	PrimaryExpression	')'		648305	1					
ANR	648836	ExpressionStatement	appendSpacePad ( )	4370:4:127329:127345	648305	1	True				
ANR	648837	CallExpression	appendSpacePad ( )		648305	0					
ANR	648838	Callee	appendSpacePad		648305	0					
ANR	648839	Identifier	appendSpacePad		648305	0					
ANR	648840	ArgumentList			648305	1					
ANR	648841	ExpressionStatement	appendCurrentChar ( )	4373:2:127354:127373	648305	5	True				
ANR	648842	CallExpression	appendCurrentChar ( )		648305	0					
ANR	648843	Callee	appendCurrentChar		648305	0					
ANR	648844	Identifier	appendCurrentChar		648305	0					
ANR	648845	ArgumentList			648305	1					
ANR	648846	IfStatement	if ( shouldUnPadParens )		648305	6					
ANR	648847	Condition	shouldUnPadParens	4376:6:127411:127427	648305	0	True				
ANR	648848	Identifier	shouldUnPadParens		648305	0					
ANR	648849	CompoundStatement		121:3:4028:4088	648305	1					
ANR	648850	IdentifierDeclStatement	"size_t j = currentLine . find_first_not_of ( "" \\t"" , charNum + 1 ) ;"	4378:3:127437:127497	648305	0	True				
ANR	648851	IdentifierDecl	"j = currentLine . find_first_not_of ( "" \\t"" , charNum + 1 )"		648305	0					
ANR	648852	IdentifierDeclType	size_t		648305	0					
ANR	648853	Identifier	j		648305	1					
ANR	648854	AssignmentExpression	"j = currentLine . find_first_not_of ( "" \\t"" , charNum + 1 )"		648305	2		=			
ANR	648855	Identifier	j		648305	0					
ANR	648856	CallExpression	"currentLine . find_first_not_of ( "" \\t"" , charNum + 1 )"		648305	1					
ANR	648857	Callee	currentLine . find_first_not_of		648305	0					
ANR	648858	MemberAccess	currentLine . find_first_not_of		648305	0					
ANR	648859	Identifier	currentLine		648305	0					
ANR	648860	Identifier	find_first_not_of		648305	1					
ANR	648861	ArgumentList	""" \\t"""		648305	1					
ANR	648862	Argument	""" \\t"""		648305	0					
ANR	648863	PrimaryExpression	""" \\t"""		648305	0					
ANR	648864	Argument	charNum + 1		648305	1					
ANR	648865	AdditiveExpression	charNum + 1		648305	0		+			
ANR	648866	Identifier	charNum		648305	0					
ANR	648867	PrimaryExpression	1		648305	1					
ANR	648868	IfStatement	if ( j != string :: npos )		648305	1					
ANR	648869	Condition	j != string :: npos	4379:7:127506:127522	648305	0	True				
ANR	648870	EqualityExpression	j != string :: npos		648305	0		!=			
ANR	648871	Identifier	j		648305	0					
ANR	648872	Identifier	string :: npos		648305	1					
ANR	648873	ExpressionStatement	spacesInsideToDelete = j - charNum - 1	4380:4:127529:127567	648305	1	True				
ANR	648874	AssignmentExpression	spacesInsideToDelete = j - charNum - 1		648305	0		=			
ANR	648875	Identifier	spacesInsideToDelete		648305	0					
ANR	648876	AdditiveExpression	j - charNum - 1		648305	1		-			
ANR	648877	Identifier	j		648305	0					
ANR	648878	AdditiveExpression	charNum - 1		648305	1		-			
ANR	648879	Identifier	charNum		648305	0					
ANR	648880	PrimaryExpression	1		648305	1					
ANR	648881	IfStatement	if ( shouldPadParensInside )		648305	2					
ANR	648882	Condition	shouldPadParensInside	4381:7:127576:127596	648305	0	True				
ANR	648883	Identifier	shouldPadParensInside		648305	0					
ANR	648884	ExpressionStatement	spacesInsideToDelete --	4382:4:127603:127625	648305	1	True				
ANR	648885	PostIncDecOperationExpression	spacesInsideToDelete --		648305	0					
ANR	648886	Identifier	spacesInsideToDelete		648305	0					
ANR	648887	IncDec	--		648305	1					
ANR	648888	IfStatement	if ( spacesInsideToDelete > 0 )		648305	3					
ANR	648889	Condition	spacesInsideToDelete > 0	4383:7:127634:127657	648305	0	True				
ANR	648890	RelationalExpression	spacesInsideToDelete > 0		648305	0		>			
ANR	648891	Identifier	spacesInsideToDelete		648305	0					
ANR	648892	PrimaryExpression	0		648305	1					
ANR	648893	CompoundStatement		127:3:4254:4254	648305	1					
ANR	648894	ExpressionStatement	"currentLine . erase ( charNum + 1 , spacesInsideToDelete )"	4385:4:127669:127721	648305	0	True				
ANR	648895	CallExpression	"currentLine . erase ( charNum + 1 , spacesInsideToDelete )"		648305	0					
ANR	648896	Callee	currentLine . erase		648305	0					
ANR	648897	MemberAccess	currentLine . erase		648305	0					
ANR	648898	Identifier	currentLine		648305	0					
ANR	648899	Identifier	erase		648305	1					
ANR	648900	ArgumentList	charNum + 1		648305	1					
ANR	648901	Argument	charNum + 1		648305	0					
ANR	648902	AdditiveExpression	charNum + 1		648305	0		+			
ANR	648903	Identifier	charNum		648305	0					
ANR	648904	PrimaryExpression	1		648305	1					
ANR	648905	Argument	spacesInsideToDelete		648305	1					
ANR	648906	Identifier	spacesInsideToDelete		648305	0					
ANR	648907	ExpressionStatement	spacePadNum -= spacesInsideToDelete	4386:4:127727:127762	648305	1	True				
ANR	648908	AssignmentExpression	spacePadNum -= spacesInsideToDelete		648305	0		-=			
ANR	648909	Identifier	spacePadNum		648305	0					
ANR	648910	Identifier	spacesInsideToDelete		648305	1					
ANR	648911	IfStatement	if ( shouldConvertTabs && ( int ) currentLine . length ( ) > charNum + 1 && currentLine [ charNum + 1 ] == '\\t' )		648305	4					
ANR	648912	Condition	shouldConvertTabs && ( int ) currentLine . length ( ) > charNum + 1 && currentLine [ charNum + 1 ] == '\\t'	4389:7:127816:127934	648305	0	True				
ANR	648913	AndExpression	shouldConvertTabs && ( int ) currentLine . length ( ) > charNum + 1 && currentLine [ charNum + 1 ] == '\\t'		648305	0		&&			
ANR	648914	Identifier	shouldConvertTabs		648305	0					
ANR	648915	AndExpression	( int ) currentLine . length ( ) > charNum + 1 && currentLine [ charNum + 1 ] == '\\t'		648305	1		&&			
ANR	648916	RelationalExpression	( int ) currentLine . length ( ) > charNum + 1		648305	0		>			
ANR	648917	CastExpression	( int ) currentLine . length ( )		648305	0					
ANR	648918	CastTarget	int		648305	0					
ANR	648919	CallExpression	currentLine . length ( )		648305	1					
ANR	648920	Callee	currentLine . length		648305	0					
ANR	648921	MemberAccess	currentLine . length		648305	0					
ANR	648922	Identifier	currentLine		648305	0					
ANR	648923	Identifier	length		648305	1					
ANR	648924	ArgumentList			648305	1					
ANR	648925	AdditiveExpression	charNum + 1		648305	1		+			
ANR	648926	Identifier	charNum		648305	0					
ANR	648927	PrimaryExpression	1		648305	1					
ANR	648928	EqualityExpression	currentLine [ charNum + 1 ] == '\\t'		648305	1		==			
ANR	648929	ArrayIndexing	currentLine [ charNum + 1 ]		648305	0					
ANR	648930	Identifier	currentLine		648305	0					
ANR	648931	AdditiveExpression	charNum + 1		648305	1		+			
ANR	648932	Identifier	charNum		648305	0					
ANR	648933	PrimaryExpression	1		648305	1					
ANR	648934	PrimaryExpression	'\\t'		648305	1					
ANR	648935	ExpressionStatement	currentLine [ charNum + 1 ] = ' '	4392:4:127941:127971	648305	1	True				
ANR	648936	AssignmentExpression	currentLine [ charNum + 1 ] = ' '		648305	0		=			
ANR	648937	ArrayIndexing	currentLine [ charNum + 1 ]		648305	0					
ANR	648938	Identifier	currentLine		648305	0					
ANR	648939	AdditiveExpression	charNum + 1		648305	1		+			
ANR	648940	Identifier	charNum		648305	0					
ANR	648941	PrimaryExpression	1		648305	1					
ANR	648942	PrimaryExpression	' '		648305	1					
ANR	648943	IdentifierDeclStatement	char peekedCharInside = peekNextChar ( ) ;	4396:2:128007:128045	648305	7	True				
ANR	648944	IdentifierDecl	peekedCharInside = peekNextChar ( )		648305	0					
ANR	648945	IdentifierDeclType	char		648305	0					
ANR	648946	Identifier	peekedCharInside		648305	1					
ANR	648947	AssignmentExpression	peekedCharInside = peekNextChar ( )		648305	2		=			
ANR	648948	Identifier	peekedCharInside		648305	0					
ANR	648949	CallExpression	peekNextChar ( )		648305	1					
ANR	648950	Callee	peekNextChar		648305	0					
ANR	648951	Identifier	peekNextChar		648305	0					
ANR	648952	ArgumentList			648305	1					
ANR	648953	IfStatement	if ( shouldPadParensInside )		648305	8					
ANR	648954	Condition	shouldPadParensInside	4397:6:128053:128073	648305	0	True				
ANR	648955	Identifier	shouldPadParensInside		648305	0					
ANR	648956	IfStatement	if ( ! ( currentChar == '(' && peekedCharInside == ')' ) )		648305	1					
ANR	648957	Condition	! ( currentChar == '(' && peekedCharInside == ')' )	4398:7:128083:128130	648305	0	True				
ANR	648958	UnaryOperationExpression	! ( currentChar == '(' && peekedCharInside == ')' )		648305	0					
ANR	648959	UnaryOperator	!		648305	0					
ANR	648960	AndExpression	currentChar == '(' && peekedCharInside == ')'		648305	1		&&			
ANR	648961	EqualityExpression	currentChar == '('		648305	0		==			
ANR	648962	Identifier	currentChar		648305	0					
ANR	648963	PrimaryExpression	'('		648305	1					
ANR	648964	EqualityExpression	peekedCharInside == ')'		648305	1		==			
ANR	648965	Identifier	peekedCharInside		648305	0					
ANR	648966	PrimaryExpression	')'		648305	1					
ANR	648967	ExpressionStatement	appendSpaceAfter ( )	4399:4:128137:128155	648305	1	True				
ANR	648968	CallExpression	appendSpaceAfter ( )		648305	0					
ANR	648969	Callee	appendSpaceAfter		648305	0					
ANR	648970	Identifier	appendSpaceAfter		648305	0					
ANR	648971	ArgumentList			648305	1					
ANR	648972	ElseStatement	else		648305	0					
ANR	648973	IfStatement	if ( currentChar == ')' )		648305	0					
ANR	648974	Condition	currentChar == ')'	4401:10:128170:128187	648305	0	True				
ANR	648975	EqualityExpression	currentChar == ')'		648305	0		==			
ANR	648976	Identifier	currentChar		648305	0					
ANR	648977	PrimaryExpression	')'		648305	1					
ANR	648978	CompoundStatement		188:2:5924:5963	648305	1					
ANR	648979	IfStatement	if ( shouldUnPadParens )		648305	0					
ANR	648980	Condition	shouldUnPadParens	4404:6:128229:128245	648305	0	True				
ANR	648981	Identifier	shouldUnPadParens		648305	0					
ANR	648982	CompoundStatement		150:3:4896:4944	648305	1					
ANR	648983	ExpressionStatement	spacesInsideToDelete = formattedLine . length ( )	4406:3:128255:128300	648305	0	True				
ANR	648984	AssignmentExpression	spacesInsideToDelete = formattedLine . length ( )		648305	0		=			
ANR	648985	Identifier	spacesInsideToDelete		648305	0					
ANR	648986	CallExpression	formattedLine . length ( )		648305	1					
ANR	648987	Callee	formattedLine . length		648305	0					
ANR	648988	MemberAccess	formattedLine . length		648305	0					
ANR	648989	Identifier	formattedLine		648305	0					
ANR	648990	Identifier	length		648305	1					
ANR	648991	ArgumentList			648305	1					
ANR	648992	IdentifierDeclStatement	"size_t i = formattedLine . find_last_not_of ( "" \\t"" ) ;"	4407:3:128305:128353	648305	1	True				
ANR	648993	IdentifierDecl	"i = formattedLine . find_last_not_of ( "" \\t"" )"		648305	0					
ANR	648994	IdentifierDeclType	size_t		648305	0					
ANR	648995	Identifier	i		648305	1					
ANR	648996	AssignmentExpression	"i = formattedLine . find_last_not_of ( "" \\t"" )"		648305	2		=			
ANR	648997	Identifier	i		648305	0					
ANR	648998	CallExpression	"formattedLine . find_last_not_of ( "" \\t"" )"		648305	1					
ANR	648999	Callee	formattedLine . find_last_not_of		648305	0					
ANR	649000	MemberAccess	formattedLine . find_last_not_of		648305	0					
ANR	649001	Identifier	formattedLine		648305	0					
ANR	649002	Identifier	find_last_not_of		648305	1					
ANR	649003	ArgumentList	""" \\t"""		648305	1					
ANR	649004	Argument	""" \\t"""		648305	0					
ANR	649005	PrimaryExpression	""" \\t"""		648305	0					
ANR	649006	IfStatement	if ( i != string :: npos )		648305	2					
ANR	649007	Condition	i != string :: npos	4408:7:128362:128378	648305	0	True				
ANR	649008	EqualityExpression	i != string :: npos		648305	0		!=			
ANR	649009	Identifier	i		648305	0					
ANR	649010	Identifier	string :: npos		648305	1					
ANR	649011	ExpressionStatement	spacesInsideToDelete = formattedLine . length ( ) - 1 - i	4409:4:128385:128438	648305	1	True				
ANR	649012	AssignmentExpression	spacesInsideToDelete = formattedLine . length ( ) - 1 - i		648305	0		=			
ANR	649013	Identifier	spacesInsideToDelete		648305	0					
ANR	649014	AdditiveExpression	formattedLine . length ( ) - 1 - i		648305	1		-			
ANR	649015	CallExpression	formattedLine . length ( )		648305	0					
ANR	649016	Callee	formattedLine . length		648305	0					
ANR	649017	MemberAccess	formattedLine . length		648305	0					
ANR	649018	Identifier	formattedLine		648305	0					
ANR	649019	Identifier	length		648305	1					
ANR	649020	ArgumentList			648305	1					
ANR	649021	AdditiveExpression	1 - i		648305	1		-			
ANR	649022	PrimaryExpression	1		648305	0					
ANR	649023	Identifier	i		648305	1					
ANR	649024	IfStatement	if ( shouldPadParensInside )		648305	3					
ANR	649025	Condition	shouldPadParensInside	4410:7:128447:128467	648305	0	True				
ANR	649026	Identifier	shouldPadParensInside		648305	0					
ANR	649027	ExpressionStatement	spacesInsideToDelete --	4411:4:128474:128496	648305	1	True				
ANR	649028	PostIncDecOperationExpression	spacesInsideToDelete --		648305	0					
ANR	649029	Identifier	spacesInsideToDelete		648305	0					
ANR	649030	IncDec	--		648305	1					
ANR	649031	IfStatement	if ( spacesInsideToDelete > 0 )		648305	4					
ANR	649032	Condition	spacesInsideToDelete > 0	4412:7:128505:128528	648305	0	True				
ANR	649033	RelationalExpression	spacesInsideToDelete > 0		648305	0		>			
ANR	649034	Identifier	spacesInsideToDelete		648305	0					
ANR	649035	PrimaryExpression	0		648305	1					
ANR	649036	CompoundStatement		156:3:5125:5125	648305	1					
ANR	649037	ExpressionStatement	"formattedLine . erase ( i + 1 , spacesInsideToDelete )"	4414:4:128540:128588	648305	0	True				
ANR	649038	CallExpression	"formattedLine . erase ( i + 1 , spacesInsideToDelete )"		648305	0					
ANR	649039	Callee	formattedLine . erase		648305	0					
ANR	649040	MemberAccess	formattedLine . erase		648305	0					
ANR	649041	Identifier	formattedLine		648305	0					
ANR	649042	Identifier	erase		648305	1					
ANR	649043	ArgumentList	i + 1		648305	1					
ANR	649044	Argument	i + 1		648305	0					
ANR	649045	AdditiveExpression	i + 1		648305	0		+			
ANR	649046	Identifier	i		648305	0					
ANR	649047	PrimaryExpression	1		648305	1					
ANR	649048	Argument	spacesInsideToDelete		648305	1					
ANR	649049	Identifier	spacesInsideToDelete		648305	0					
ANR	649050	ExpressionStatement	spacePadNum -= spacesInsideToDelete	4415:4:128594:128629	648305	1	True				
ANR	649051	AssignmentExpression	spacePadNum -= spacesInsideToDelete		648305	0		-=			
ANR	649052	Identifier	spacePadNum		648305	0					
ANR	649053	Identifier	spacesInsideToDelete		648305	1					
ANR	649054	IfStatement	if ( shouldPadParensInside )		648305	1					
ANR	649055	Condition	shouldPadParensInside	4420:6:128675:128695	648305	0	True				
ANR	649056	Identifier	shouldPadParensInside		648305	0					
ANR	649057	IfStatement	if ( ! ( previousChar == '(' && currentChar == ')' ) )		648305	1					
ANR	649058	Condition	! ( previousChar == '(' && currentChar == ')' )	4421:7:128705:128748	648305	0	True				
ANR	649059	UnaryOperationExpression	! ( previousChar == '(' && currentChar == ')' )		648305	0					
ANR	649060	UnaryOperator	!		648305	0					
ANR	649061	AndExpression	previousChar == '(' && currentChar == ')'		648305	1		&&			
ANR	649062	EqualityExpression	previousChar == '('		648305	0		==			
ANR	649063	Identifier	previousChar		648305	0					
ANR	649064	PrimaryExpression	'('		648305	1					
ANR	649065	EqualityExpression	currentChar == ')'		648305	1		==			
ANR	649066	Identifier	currentChar		648305	0					
ANR	649067	PrimaryExpression	')'		648305	1					
ANR	649068	ExpressionStatement	appendSpacePad ( )	4422:4:128755:128771	648305	1	True				
ANR	649069	CallExpression	appendSpacePad ( )		648305	0					
ANR	649070	Callee	appendSpacePad		648305	0					
ANR	649071	Identifier	appendSpacePad		648305	0					
ANR	649072	ArgumentList			648305	1					
ANR	649073	ExpressionStatement	appendCurrentChar ( )	4424:2:128776:128795	648305	2	True				
ANR	649074	CallExpression	appendCurrentChar ( )		648305	0					
ANR	649075	Callee	appendCurrentChar		648305	0					
ANR	649076	Identifier	appendCurrentChar		648305	0					
ANR	649077	ArgumentList			648305	1					
ANR	649078	IfStatement	if ( shouldUnPadParens )		648305	3					
ANR	649079	Condition	shouldUnPadParens	4428:6:128880:128896	648305	0	True				
ANR	649080	Identifier	shouldUnPadParens		648305	0					
ANR	649081	CompoundStatement		172:2:5492:5492	648305	1					
ANR	649082	IdentifierDeclStatement	char peekedCharOutside = peekNextChar ( ) ;	4445:2:129333:129372	648305	4	True				
ANR	649083	IdentifierDecl	peekedCharOutside = peekNextChar ( )		648305	0					
ANR	649084	IdentifierDeclType	char		648305	0					
ANR	649085	Identifier	peekedCharOutside		648305	1					
ANR	649086	AssignmentExpression	peekedCharOutside = peekNextChar ( )		648305	2		=			
ANR	649087	Identifier	peekedCharOutside		648305	0					
ANR	649088	CallExpression	peekNextChar ( )		648305	1					
ANR	649089	Callee	peekNextChar		648305	0					
ANR	649090	Identifier	peekNextChar		648305	0					
ANR	649091	ArgumentList			648305	1					
ANR	649092	IfStatement	if ( shouldPadParensOutside )		648305	5					
ANR	649093	Condition	shouldPadParensOutside	4446:6:129380:129401	648305	0	True				
ANR	649094	Identifier	shouldPadParensOutside		648305	0					
ANR	649095	IfStatement	"if ( peekedCharOutside != ';' && peekedCharOutside != ',' && peekedCharOutside != '.' && peekedCharOutside != '+' && peekedCharOutside != '-' && peekedCharOutside != ']' )"		648305	1					
ANR	649096	Condition	"peekedCharOutside != ';' && peekedCharOutside != ',' && peekedCharOutside != '.' && peekedCharOutside != '+' && peekedCharOutside != '-' && peekedCharOutside != ']'"	4447:7:129411:129667	648305	0	True				
ANR	649097	AndExpression	"peekedCharOutside != ';' && peekedCharOutside != ',' && peekedCharOutside != '.' && peekedCharOutside != '+' && peekedCharOutside != '-' && peekedCharOutside != ']'"		648305	0		&&			
ANR	649098	EqualityExpression	peekedCharOutside != ';'		648305	0		!=			
ANR	649099	Identifier	peekedCharOutside		648305	0					
ANR	649100	PrimaryExpression	';'		648305	1					
ANR	649101	AndExpression	"peekedCharOutside != ',' && peekedCharOutside != '.' && peekedCharOutside != '+' && peekedCharOutside != '-' && peekedCharOutside != ']'"		648305	1		&&			
ANR	649102	EqualityExpression	"peekedCharOutside != ','"		648305	0		!=			
ANR	649103	Identifier	peekedCharOutside		648305	0					
ANR	649104	PrimaryExpression	"','"		648305	1					
ANR	649105	AndExpression	peekedCharOutside != '.' && peekedCharOutside != '+' && peekedCharOutside != '-' && peekedCharOutside != ']'		648305	1		&&			
ANR	649106	EqualityExpression	peekedCharOutside != '.'		648305	0		!=			
ANR	649107	Identifier	peekedCharOutside		648305	0					
ANR	649108	PrimaryExpression	'.'		648305	1					
ANR	649109	AndExpression	peekedCharOutside != '+' && peekedCharOutside != '-' && peekedCharOutside != ']'		648305	1		&&			
ANR	649110	EqualityExpression	peekedCharOutside != '+'		648305	0		!=			
ANR	649111	Identifier	peekedCharOutside		648305	0					
ANR	649112	PrimaryExpression	'+'		648305	1					
ANR	649113	AndExpression	peekedCharOutside != '-' && peekedCharOutside != ']'		648305	1		&&			
ANR	649114	EqualityExpression	peekedCharOutside != '-'		648305	0		!=			
ANR	649115	Identifier	peekedCharOutside		648305	0					
ANR	649116	PrimaryExpression	'-'		648305	1					
ANR	649117	EqualityExpression	peekedCharOutside != ']'		648305	1		!=			
ANR	649118	Identifier	peekedCharOutside		648305	0					
ANR	649119	PrimaryExpression	']'		648305	1					
ANR	649120	ExpressionStatement	appendSpaceAfter ( )	4453:4:129674:129692	648305	1	True				
ANR	649121	CallExpression	appendSpaceAfter ( )		648305	0					
ANR	649122	Callee	appendSpaceAfter		648305	0					
ANR	649123	Identifier	appendSpaceAfter		648305	0					
ANR	649124	ArgumentList			648305	1					
ANR	649125	ReturnType	void		648305	1					
ANR	649126	Identifier	ASFormatter :: padParens		648305	2					
ANR	649127	ParameterList			648305	3					
ANR	649128	CFGEntryNode	ENTRY		648305		True				
ANR	649129	CFGExitNode	EXIT		648305		True				
ANR	649130	Symbol	* formattedLine		648305						
ANR	649131	Symbol	spacesInsideToDelete		648305						
ANR	649132	Symbol	string :: npos		648305						
ANR	649133	Symbol	ASBase :: findHeader		648305						
ANR	649134	Symbol	peekedCharInside		648305						
ANR	649135	Symbol	shouldPadParensOutside		648305						
ANR	649136	Symbol	getPreviousWord		648305						
ANR	649137	Symbol	* currentLine		648305						
ANR	649138	Symbol	formattedLine . find_last_not_of		648305						
ANR	649139	Symbol	AS_DELETE		648305						
ANR	649140	Symbol	prevWord		648305						
ANR	649141	Symbol	AS_THROW		648305						
ANR	649142	Symbol	shouldPadParensInside		648305						
ANR	649143	Symbol	shouldConvertTabs		648305						
ANR	649144	Symbol	spacesOutsideToDelete		648305						
ANR	649145	Symbol	shouldPadHeader		648305						
ANR	649146	Symbol	AS_NEW		648305						
ANR	649147	Symbol	charNum		648305						
ANR	649148	Symbol	currentLine		648305						
ANR	649149	Symbol	currentChar		648305						
ANR	649150	Symbol	headers		648305						
ANR	649151	Symbol	peekNextChar		648305						
ANR	649152	Symbol	prevIsParenHeader		648305						
ANR	649153	Symbol	spacePadNum		648305						
ANR	649154	Symbol	false		648305						
ANR	649155	Symbol	i		648305						
ANR	649156	Symbol	j		648305						
ANR	649157	Symbol	currentLine . find_first_not_of		648305						
ANR	649158	Symbol	prevWordH		648305						
ANR	649159	Symbol	AS_RETURN		648305						
ANR	649160	Symbol	shouldPadFirstParen		648305						
ANR	649161	Symbol	formattedLine		648305						
ANR	649162	Symbol	isCharImmediatelyPostPointerOrReference		648305						
ANR	649163	Symbol	previousChar		648305						
ANR	649164	Symbol	* i		648305						
ANR	649165	Symbol	isCharPotentialHeader		648305						
ANR	649166	Symbol	currentLine . length		648305						
ANR	649167	Symbol	formattedLine . length		648305						
ANR	649168	Symbol	* charNum		648305						
ANR	649169	Symbol	lastChar		648305						
ANR	649170	Symbol	true		648305						
ANR	649171	Symbol	prevWord . length		648305						
ANR	649172	Symbol	isCStyle		648305						
ANR	649173	Symbol	peekedCharOutside		648305						
ANR	649174	Symbol	shouldUnPadParens		648305						
ANR	649175	Symbol	nullptr		648305						
ANR	649176	Symbol	foundCastOperator		648305						
ANR	649177	Symbol	prevWord . compare		648305						
ANR	649178	Function	ASFormatter :: padObjCMethodPrefix	4462:0:129886:130704							
ANR	649179	FunctionDef	ASFormatter :: padObjCMethodPrefix ()		649178	0					
ANR	649180	CompoundStatement		4463:0:129926:130704	649178	0					
ANR	649181	ExpressionStatement	assert ( currentChar == '(' && isImmediatelyPostObjCMethodPrefix )	4464:1:129929:129992	649178	0	True				
ANR	649182	CallExpression	assert ( currentChar == '(' && isImmediatelyPostObjCMethodPrefix )		649178	0					
ANR	649183	Callee	assert		649178	0					
ANR	649184	Identifier	assert		649178	0					
ANR	649185	ArgumentList	currentChar == '(' && isImmediatelyPostObjCMethodPrefix		649178	1					
ANR	649186	Argument	currentChar == '(' && isImmediatelyPostObjCMethodPrefix		649178	0					
ANR	649187	AndExpression	currentChar == '(' && isImmediatelyPostObjCMethodPrefix		649178	0		&&			
ANR	649188	EqualityExpression	currentChar == '('		649178	0		==			
ANR	649189	Identifier	currentChar		649178	0					
ANR	649190	PrimaryExpression	'('		649178	1					
ANR	649191	Identifier	isImmediatelyPostObjCMethodPrefix		649178	1					
ANR	649192	ExpressionStatement	assert ( shouldPadMethodPrefix || shouldUnPadMethodPrefix )	4465:1:129995:130051	649178	1	True				
ANR	649193	CallExpression	assert ( shouldPadMethodPrefix || shouldUnPadMethodPrefix )		649178	0					
ANR	649194	Callee	assert		649178	0					
ANR	649195	Identifier	assert		649178	0					
ANR	649196	ArgumentList	shouldPadMethodPrefix || shouldUnPadMethodPrefix		649178	1					
ANR	649197	Argument	shouldPadMethodPrefix || shouldUnPadMethodPrefix		649178	0					
ANR	649198	OrExpression	shouldPadMethodPrefix || shouldUnPadMethodPrefix		649178	0		||			
ANR	649199	Identifier	shouldPadMethodPrefix		649178	0					
ANR	649200	Identifier	shouldUnPadMethodPrefix		649178	1					
ANR	649201	IdentifierDeclStatement	"size_t prefix = formattedLine . find_first_of ( ""+-"" ) ;"	4467:1:130055:130104	649178	2	True				
ANR	649202	IdentifierDecl	"prefix = formattedLine . find_first_of ( ""+-"" )"		649178	0					
ANR	649203	IdentifierDeclType	size_t		649178	0					
ANR	649204	Identifier	prefix		649178	1					
ANR	649205	AssignmentExpression	"prefix = formattedLine . find_first_of ( ""+-"" )"		649178	2		=			
ANR	649206	Identifier	prefix		649178	0					
ANR	649207	CallExpression	"formattedLine . find_first_of ( ""+-"" )"		649178	1					
ANR	649208	Callee	formattedLine . find_first_of		649178	0					
ANR	649209	MemberAccess	formattedLine . find_first_of		649178	0					
ANR	649210	Identifier	formattedLine		649178	0					
ANR	649211	Identifier	find_first_of		649178	1					
ANR	649212	ArgumentList	"""+-"""		649178	1					
ANR	649213	Argument	"""+-"""		649178	0					
ANR	649214	PrimaryExpression	"""+-"""		649178	0					
ANR	649215	IfStatement	if ( prefix == string :: npos )		649178	3					
ANR	649216	Condition	prefix == string :: npos	4468:5:130111:130132	649178	0	True				
ANR	649217	EqualityExpression	prefix == string :: npos		649178	0		==			
ANR	649218	Identifier	prefix		649178	0					
ANR	649219	Identifier	string :: npos		649178	1					
ANR	649220	ReturnStatement	return ;	4469:2:130137:130143	649178	1	True				
ANR	649221	IdentifierDeclStatement	size_t paren = formattedLine . find_first_of ( '(' ) ;	4470:1:130146:130193	649178	4	True				
ANR	649222	IdentifierDecl	paren = formattedLine . find_first_of ( '(' )		649178	0					
ANR	649223	IdentifierDeclType	size_t		649178	0					
ANR	649224	Identifier	paren		649178	1					
ANR	649225	AssignmentExpression	paren = formattedLine . find_first_of ( '(' )		649178	2		=			
ANR	649226	Identifier	paren		649178	0					
ANR	649227	CallExpression	formattedLine . find_first_of ( '(' )		649178	1					
ANR	649228	Callee	formattedLine . find_first_of		649178	0					
ANR	649229	MemberAccess	formattedLine . find_first_of		649178	0					
ANR	649230	Identifier	formattedLine		649178	0					
ANR	649231	Identifier	find_first_of		649178	1					
ANR	649232	ArgumentList	'('		649178	1					
ANR	649233	Argument	'('		649178	0					
ANR	649234	PrimaryExpression	'('		649178	0					
ANR	649235	IfStatement	if ( paren == string :: npos )		649178	5					
ANR	649236	Condition	paren == string :: npos	4471:5:130200:130220	649178	0	True				
ANR	649237	EqualityExpression	paren == string :: npos		649178	0		==			
ANR	649238	Identifier	paren		649178	0					
ANR	649239	Identifier	string :: npos		649178	1					
ANR	649240	ReturnStatement	return ;	4472:2:130225:130231	649178	1	True				
ANR	649241	IdentifierDeclStatement	int spaces = paren - prefix - 1 ;	4473:1:130234:130265	649178	6	True				
ANR	649242	IdentifierDecl	spaces = paren - prefix - 1		649178	0					
ANR	649243	IdentifierDeclType	int		649178	0					
ANR	649244	Identifier	spaces		649178	1					
ANR	649245	AssignmentExpression	spaces = paren - prefix - 1		649178	2		=			
ANR	649246	Identifier	spaces		649178	0					
ANR	649247	AdditiveExpression	paren - prefix - 1		649178	1		-			
ANR	649248	Identifier	paren		649178	0					
ANR	649249	AdditiveExpression	prefix - 1		649178	1		-			
ANR	649250	Identifier	prefix		649178	0					
ANR	649251	PrimaryExpression	1		649178	1					
ANR	649252	IfStatement	if ( shouldPadMethodPrefix )		649178	7					
ANR	649253	Condition	shouldPadMethodPrefix	4475:5:130273:130293	649178	0	True				
ANR	649254	Identifier	shouldPadMethodPrefix		649178	0					
ANR	649255	CompoundStatement		14:1:370:370	649178	1					
ANR	649256	IfStatement	if ( spaces == 0 )		649178	0					
ANR	649257	Condition	spaces == 0	4477:6:130305:130315	649178	0	True				
ANR	649258	EqualityExpression	spaces == 0		649178	0		==			
ANR	649259	Identifier	spaces		649178	0					
ANR	649260	PrimaryExpression	0		649178	1					
ANR	649261	CompoundStatement		16:2:393:393	649178	1					
ANR	649262	ExpressionStatement	"formattedLine . insert ( prefix + 1 , 1 , ' ' )"	4479:3:130325:130365	649178	0	True				
ANR	649263	CallExpression	"formattedLine . insert ( prefix + 1 , 1 , ' ' )"		649178	0					
ANR	649264	Callee	formattedLine . insert		649178	0					
ANR	649265	MemberAccess	formattedLine . insert		649178	0					
ANR	649266	Identifier	formattedLine		649178	0					
ANR	649267	Identifier	insert		649178	1					
ANR	649268	ArgumentList	prefix + 1		649178	1					
ANR	649269	Argument	prefix + 1		649178	0					
ANR	649270	AdditiveExpression	prefix + 1		649178	0		+			
ANR	649271	Identifier	prefix		649178	0					
ANR	649272	PrimaryExpression	1		649178	1					
ANR	649273	Argument	1		649178	1					
ANR	649274	PrimaryExpression	1		649178	0					
ANR	649275	Argument	' '		649178	2					
ANR	649276	PrimaryExpression	' '		649178	0					
ANR	649277	ExpressionStatement	spacePadNum += 1	4480:3:130370:130386	649178	1	True				
ANR	649278	AssignmentExpression	spacePadNum += 1		649178	0		+=			
ANR	649279	Identifier	spacePadNum		649178	0					
ANR	649280	PrimaryExpression	1		649178	1					
ANR	649281	ElseStatement	else		649178	0					
ANR	649282	IfStatement	if ( spaces > 1 )		649178	0					
ANR	649283	Condition	spaces > 1	4482:11:130403:130412	649178	0	True				
ANR	649284	RelationalExpression	spaces > 1		649178	0		>			
ANR	649285	Identifier	spaces		649178	0					
ANR	649286	PrimaryExpression	1		649178	1					
ANR	649287	CompoundStatement		21:2:490:490	649178	1					
ANR	649288	ExpressionStatement	"formattedLine . erase ( prefix + 1 , spaces - 1 )"	4484:3:130422:130465	649178	0	True				
ANR	649289	CallExpression	"formattedLine . erase ( prefix + 1 , spaces - 1 )"		649178	0					
ANR	649290	Callee	formattedLine . erase		649178	0					
ANR	649291	MemberAccess	formattedLine . erase		649178	0					
ANR	649292	Identifier	formattedLine		649178	0					
ANR	649293	Identifier	erase		649178	1					
ANR	649294	ArgumentList	prefix + 1		649178	1					
ANR	649295	Argument	prefix + 1		649178	0					
ANR	649296	AdditiveExpression	prefix + 1		649178	0		+			
ANR	649297	Identifier	prefix		649178	0					
ANR	649298	PrimaryExpression	1		649178	1					
ANR	649299	Argument	spaces - 1		649178	1					
ANR	649300	AdditiveExpression	spaces - 1		649178	0		-			
ANR	649301	Identifier	spaces		649178	0					
ANR	649302	PrimaryExpression	1		649178	1					
ANR	649303	ExpressionStatement	spacePadNum -= spaces - 1	4485:3:130470:130495	649178	1	True				
ANR	649304	AssignmentExpression	spacePadNum -= spaces - 1		649178	0		-=			
ANR	649305	Identifier	spacePadNum		649178	0					
ANR	649306	AdditiveExpression	spaces - 1		649178	1		-			
ANR	649307	Identifier	spaces		649178	0					
ANR	649308	PrimaryExpression	1		649178	1					
ANR	649309	ElseStatement	else		649178	0					
ANR	649310	IfStatement	if ( shouldUnPadMethodPrefix )		649178	0					
ANR	649311	Condition	shouldUnPadMethodPrefix	4489:10:130577:130599	649178	0	True				
ANR	649312	Identifier	shouldUnPadMethodPrefix		649178	0					
ANR	649313	CompoundStatement		28:1:676:676	649178	1					
ANR	649314	IfStatement	if ( spaces > 0 )		649178	0					
ANR	649315	Condition	spaces > 0	4491:6:130611:130620	649178	0	True				
ANR	649316	RelationalExpression	spaces > 0		649178	0		>			
ANR	649317	Identifier	spaces		649178	0					
ANR	649318	PrimaryExpression	0		649178	1					
ANR	649319	CompoundStatement		30:2:698:698	649178	1					
ANR	649320	ExpressionStatement	"formattedLine . erase ( prefix + 1 , spaces )"	4493:3:130630:130669	649178	0	True				
ANR	649321	CallExpression	"formattedLine . erase ( prefix + 1 , spaces )"		649178	0					
ANR	649322	Callee	formattedLine . erase		649178	0					
ANR	649323	MemberAccess	formattedLine . erase		649178	0					
ANR	649324	Identifier	formattedLine		649178	0					
ANR	649325	Identifier	erase		649178	1					
ANR	649326	ArgumentList	prefix + 1		649178	1					
ANR	649327	Argument	prefix + 1		649178	0					
ANR	649328	AdditiveExpression	prefix + 1		649178	0		+			
ANR	649329	Identifier	prefix		649178	0					
ANR	649330	PrimaryExpression	1		649178	1					
ANR	649331	Argument	spaces		649178	1					
ANR	649332	Identifier	spaces		649178	0					
ANR	649333	ExpressionStatement	spacePadNum -= spaces	4494:3:130674:130695	649178	1	True				
ANR	649334	AssignmentExpression	spacePadNum -= spaces		649178	0		-=			
ANR	649335	Identifier	spacePadNum		649178	0					
ANR	649336	Identifier	spaces		649178	1					
ANR	649337	ReturnType	void		649178	1					
ANR	649338	Identifier	ASFormatter :: padObjCMethodPrefix		649178	2					
ANR	649339	ParameterList			649178	3					
ANR	649340	CFGEntryNode	ENTRY		649178		True				
ANR	649341	CFGExitNode	EXIT		649178		True				
ANR	649342	Symbol	formattedLine		649178						
ANR	649343	Symbol	isImmediatelyPostObjCMethodPrefix		649178						
ANR	649344	Symbol	currentChar		649178						
ANR	649345	Symbol	shouldUnPadMethodPrefix		649178						
ANR	649346	Symbol	paren		649178						
ANR	649347	Symbol	formattedLine . find_first_of		649178						
ANR	649348	Symbol	prefix		649178						
ANR	649349	Symbol	spacePadNum		649178						
ANR	649350	Symbol	string :: npos		649178						
ANR	649351	Symbol	spaces		649178						
ANR	649352	Symbol	shouldPadMethodPrefix		649178						
ANR	649353	Function	ASFormatter :: padObjCReturnType	4504:0:130893:132062							
ANR	649354	FunctionDef	ASFormatter :: padObjCReturnType ()		649353	0					
ANR	649355	CompoundStatement		4505:0:130931:132062	649353	0					
ANR	649356	ExpressionStatement	assert ( currentChar == ')' && isInObjCReturnType )	4506:1:130934:130982	649353	0	True				
ANR	649357	CallExpression	assert ( currentChar == ')' && isInObjCReturnType )		649353	0					
ANR	649358	Callee	assert		649353	0					
ANR	649359	Identifier	assert		649353	0					
ANR	649360	ArgumentList	currentChar == ')' && isInObjCReturnType		649353	1					
ANR	649361	Argument	currentChar == ')' && isInObjCReturnType		649353	0					
ANR	649362	AndExpression	currentChar == ')' && isInObjCReturnType		649353	0		&&			
ANR	649363	EqualityExpression	currentChar == ')'		649353	0		==			
ANR	649364	Identifier	currentChar		649353	0					
ANR	649365	PrimaryExpression	')'		649353	1					
ANR	649366	Identifier	isInObjCReturnType		649353	1					
ANR	649367	ExpressionStatement	assert ( shouldPadReturnType || shouldUnPadReturnType )	4507:1:130985:131037	649353	1	True				
ANR	649368	CallExpression	assert ( shouldPadReturnType || shouldUnPadReturnType )		649353	0					
ANR	649369	Callee	assert		649353	0					
ANR	649370	Identifier	assert		649353	0					
ANR	649371	ArgumentList	shouldPadReturnType || shouldUnPadReturnType		649353	1					
ANR	649372	Argument	shouldPadReturnType || shouldUnPadReturnType		649353	0					
ANR	649373	OrExpression	shouldPadReturnType || shouldUnPadReturnType		649353	0		||			
ANR	649374	Identifier	shouldPadReturnType		649353	0					
ANR	649375	Identifier	shouldUnPadReturnType		649353	1					
ANR	649376	IdentifierDeclStatement	"size_t nextText = currentLine . find_first_not_of ( "" \\t"" , charNum + 1 ) ;"	4509:1:131041:131108	649353	2	True				
ANR	649377	IdentifierDecl	"nextText = currentLine . find_first_not_of ( "" \\t"" , charNum + 1 )"		649353	0					
ANR	649378	IdentifierDeclType	size_t		649353	0					
ANR	649379	Identifier	nextText		649353	1					
ANR	649380	AssignmentExpression	"nextText = currentLine . find_first_not_of ( "" \\t"" , charNum + 1 )"		649353	2		=			
ANR	649381	Identifier	nextText		649353	0					
ANR	649382	CallExpression	"currentLine . find_first_not_of ( "" \\t"" , charNum + 1 )"		649353	1					
ANR	649383	Callee	currentLine . find_first_not_of		649353	0					
ANR	649384	MemberAccess	currentLine . find_first_not_of		649353	0					
ANR	649385	Identifier	currentLine		649353	0					
ANR	649386	Identifier	find_first_not_of		649353	1					
ANR	649387	ArgumentList	""" \\t"""		649353	1					
ANR	649388	Argument	""" \\t"""		649353	0					
ANR	649389	PrimaryExpression	""" \\t"""		649353	0					
ANR	649390	Argument	charNum + 1		649353	1					
ANR	649391	AdditiveExpression	charNum + 1		649353	0		+			
ANR	649392	Identifier	charNum		649353	0					
ANR	649393	PrimaryExpression	1		649353	1					
ANR	649394	IfStatement	if ( nextText == string :: npos )		649353	3					
ANR	649395	Condition	nextText == string :: npos	4510:5:131115:131138	649353	0	True				
ANR	649396	EqualityExpression	nextText == string :: npos		649353	0		==			
ANR	649397	Identifier	nextText		649353	0					
ANR	649398	Identifier	string :: npos		649353	1					
ANR	649399	ReturnStatement	return ;	4511:2:131143:131149	649353	1	True				
ANR	649400	IdentifierDeclStatement	int spaces = nextText - charNum - 1 ;	4512:1:131152:131187	649353	4	True				
ANR	649401	IdentifierDecl	spaces = nextText - charNum - 1		649353	0					
ANR	649402	IdentifierDeclType	int		649353	0					
ANR	649403	Identifier	spaces		649353	1					
ANR	649404	AssignmentExpression	spaces = nextText - charNum - 1		649353	2		=			
ANR	649405	Identifier	spaces		649353	0					
ANR	649406	AdditiveExpression	nextText - charNum - 1		649353	1		-			
ANR	649407	Identifier	nextText		649353	0					
ANR	649408	AdditiveExpression	charNum - 1		649353	1		-			
ANR	649409	Identifier	charNum		649353	0					
ANR	649410	PrimaryExpression	1		649353	1					
ANR	649411	IfStatement	if ( shouldPadReturnType )		649353	5					
ANR	649412	Condition	shouldPadReturnType	4514:5:131195:131213	649353	0	True				
ANR	649413	Identifier	shouldPadReturnType		649353	0					
ANR	649414	CompoundStatement		11:1:285:285	649353	1					
ANR	649415	IfStatement	if ( spaces == 0 )		649353	0					
ANR	649416	Condition	spaces == 0	4516:6:131225:131235	649353	0	True				
ANR	649417	EqualityExpression	spaces == 0		649353	0		==			
ANR	649418	Identifier	spaces		649353	0					
ANR	649419	PrimaryExpression	0		649353	1					
ANR	649420	CompoundStatement		13:2:308:308	649353	1					
ANR	649421	IfStatement	if ( formattedLine [ formattedLine . length ( ) - 1 ] != ' ' )		649353	0					
ANR	649422	Condition	formattedLine [ formattedLine . length ( ) - 1 ] != ' '	4519:7:131304:131351	649353	0	True				
ANR	649423	EqualityExpression	formattedLine [ formattedLine . length ( ) - 1 ] != ' '		649353	0		!=			
ANR	649424	ArrayIndexing	formattedLine [ formattedLine . length ( ) - 1 ]		649353	0					
ANR	649425	Identifier	formattedLine		649353	0					
ANR	649426	AdditiveExpression	formattedLine . length ( ) - 1		649353	1		-			
ANR	649427	CallExpression	formattedLine . length ( )		649353	0					
ANR	649428	Callee	formattedLine . length		649353	0					
ANR	649429	MemberAccess	formattedLine . length		649353	0					
ANR	649430	Identifier	formattedLine		649353	0					
ANR	649431	Identifier	length		649353	1					
ANR	649432	ArgumentList			649353	1					
ANR	649433	PrimaryExpression	1		649353	1					
ANR	649434	PrimaryExpression	' '		649353	1					
ANR	649435	CompoundStatement		16:3:425:425	649353	1					
ANR	649436	ExpressionStatement	"formattedLine . append ( "" "" )"	4521:4:131363:131388	649353	0	True				
ANR	649437	CallExpression	"formattedLine . append ( "" "" )"		649353	0					
ANR	649438	Callee	formattedLine . append		649353	0					
ANR	649439	MemberAccess	formattedLine . append		649353	0					
ANR	649440	Identifier	formattedLine		649353	0					
ANR	649441	Identifier	append		649353	1					
ANR	649442	ArgumentList	""" """		649353	1					
ANR	649443	Argument	""" """		649353	0					
ANR	649444	PrimaryExpression	""" """		649353	0					
ANR	649445	ExpressionStatement	spacePadNum += 1	4522:4:131394:131410	649353	1	True				
ANR	649446	AssignmentExpression	spacePadNum += 1		649353	0		+=			
ANR	649447	Identifier	spacePadNum		649353	0					
ANR	649448	PrimaryExpression	1		649353	1					
ANR	649449	ElseStatement	else		649353	0					
ANR	649450	IfStatement	if ( spaces > 1 )		649353	0					
ANR	649451	Condition	spaces > 1	4525:11:131432:131441	649353	0	True				
ANR	649452	RelationalExpression	spaces > 1		649353	0		>			
ANR	649453	Identifier	spaces		649353	0					
ANR	649454	PrimaryExpression	1		649353	1					
ANR	649455	CompoundStatement		22:2:514:514	649353	1					
ANR	649456	ExpressionStatement	"currentLine . erase ( charNum + 1 , spaces - 1 )"	4528:3:131483:131525	649353	0	True				
ANR	649457	CallExpression	"currentLine . erase ( charNum + 1 , spaces - 1 )"		649353	0					
ANR	649458	Callee	currentLine . erase		649353	0					
ANR	649459	MemberAccess	currentLine . erase		649353	0					
ANR	649460	Identifier	currentLine		649353	0					
ANR	649461	Identifier	erase		649353	1					
ANR	649462	ArgumentList	charNum + 1		649353	1					
ANR	649463	Argument	charNum + 1		649353	0					
ANR	649464	AdditiveExpression	charNum + 1		649353	0		+			
ANR	649465	Identifier	charNum		649353	0					
ANR	649466	PrimaryExpression	1		649353	1					
ANR	649467	Argument	spaces - 1		649353	1					
ANR	649468	AdditiveExpression	spaces - 1		649353	0		-			
ANR	649469	Identifier	spaces		649353	0					
ANR	649470	PrimaryExpression	1		649353	1					
ANR	649471	ExpressionStatement	spacePadNum -= spaces - 1	4529:3:131530:131555	649353	1	True				
ANR	649472	AssignmentExpression	spacePadNum -= spaces - 1		649353	0		-=			
ANR	649473	Identifier	spacePadNum		649353	0					
ANR	649474	AdditiveExpression	spaces - 1		649353	1		-			
ANR	649475	Identifier	spaces		649353	0					
ANR	649476	PrimaryExpression	1		649353	1					
ANR	649477	ElseStatement	else		649353	0					
ANR	649478	IfStatement	if ( shouldUnPadReturnType )		649353	0					
ANR	649479	Condition	shouldUnPadReturnType	4533:10:131635:131655	649353	0	True				
ANR	649480	Identifier	shouldUnPadReturnType		649353	0					
ANR	649481	CompoundStatement		30:1:727:727	649353	1					
ANR	649482	IfStatement	if ( formattedLine [ formattedLine . length ( ) - 1 ] == ' ' )		649353	0					
ANR	649483	Condition	formattedLine [ formattedLine . length ( ) - 1 ] == ' '	4536:6:131721:131768	649353	0	True				
ANR	649484	EqualityExpression	formattedLine [ formattedLine . length ( ) - 1 ] == ' '		649353	0		==			
ANR	649485	ArrayIndexing	formattedLine [ formattedLine . length ( ) - 1 ]		649353	0					
ANR	649486	Identifier	formattedLine		649353	0					
ANR	649487	AdditiveExpression	formattedLine . length ( ) - 1		649353	1		-			
ANR	649488	CallExpression	formattedLine . length ( )		649353	0					
ANR	649489	Callee	formattedLine . length		649353	0					
ANR	649490	MemberAccess	formattedLine . length		649353	0					
ANR	649491	Identifier	formattedLine		649353	0					
ANR	649492	Identifier	length		649353	1					
ANR	649493	ArgumentList			649353	1					
ANR	649494	PrimaryExpression	1		649353	1					
ANR	649495	PrimaryExpression	' '		649353	1					
ANR	649496	CompoundStatement		35:3:903:955	649353	1					
ANR	649497	ExpressionStatement	spacePadNum -= formattedLine . length ( ) - 1 - nextText	4538:3:131778:131830	649353	0	True				
ANR	649498	AssignmentExpression	spacePadNum -= formattedLine . length ( ) - 1 - nextText		649353	0		-=			
ANR	649499	Identifier	spacePadNum		649353	0					
ANR	649500	AdditiveExpression	formattedLine . length ( ) - 1 - nextText		649353	1		-			
ANR	649501	CallExpression	formattedLine . length ( )		649353	0					
ANR	649502	Callee	formattedLine . length		649353	0					
ANR	649503	MemberAccess	formattedLine . length		649353	0					
ANR	649504	Identifier	formattedLine		649353	0					
ANR	649505	Identifier	length		649353	1					
ANR	649506	ArgumentList			649353	1					
ANR	649507	AdditiveExpression	1 - nextText		649353	1		-			
ANR	649508	PrimaryExpression	1		649353	0					
ANR	649509	Identifier	nextText		649353	1					
ANR	649510	IdentifierDeclStatement	"int lastText = formattedLine . find_last_not_of ( "" \\t"" ) ;"	4539:3:131835:131887	649353	1	True				
ANR	649511	IdentifierDecl	"lastText = formattedLine . find_last_not_of ( "" \\t"" )"		649353	0					
ANR	649512	IdentifierDeclType	int		649353	0					
ANR	649513	Identifier	lastText		649353	1					
ANR	649514	AssignmentExpression	"lastText = formattedLine . find_last_not_of ( "" \\t"" )"		649353	2		=			
ANR	649515	Identifier	lastText		649353	0					
ANR	649516	CallExpression	"formattedLine . find_last_not_of ( "" \\t"" )"		649353	1					
ANR	649517	Callee	formattedLine . find_last_not_of		649353	0					
ANR	649518	MemberAccess	formattedLine . find_last_not_of		649353	0					
ANR	649519	Identifier	formattedLine		649353	0					
ANR	649520	Identifier	find_last_not_of		649353	1					
ANR	649521	ArgumentList	""" \\t"""		649353	1					
ANR	649522	Argument	""" \\t"""		649353	0					
ANR	649523	PrimaryExpression	""" \\t"""		649353	0					
ANR	649524	ExpressionStatement	formattedLine . resize ( lastText + 1 )	4540:3:131892:131926	649353	2	True				
ANR	649525	CallExpression	formattedLine . resize ( lastText + 1 )		649353	0					
ANR	649526	Callee	formattedLine . resize		649353	0					
ANR	649527	MemberAccess	formattedLine . resize		649353	0					
ANR	649528	Identifier	formattedLine		649353	0					
ANR	649529	Identifier	resize		649353	1					
ANR	649530	ArgumentList	lastText + 1		649353	1					
ANR	649531	Argument	lastText + 1		649353	0					
ANR	649532	AdditiveExpression	lastText + 1		649353	0		+			
ANR	649533	Identifier	lastText		649353	0					
ANR	649534	PrimaryExpression	1		649353	1					
ANR	649535	IfStatement	if ( spaces > 0 )		649353	1					
ANR	649536	Condition	spaces > 0	4542:6:131938:131947	649353	0	True				
ANR	649537	RelationalExpression	spaces > 0		649353	0		>			
ANR	649538	Identifier	spaces		649353	0					
ANR	649539	PrimaryExpression	0		649353	1					
ANR	649540	CompoundStatement		39:2:1020:1020	649353	1					
ANR	649541	ExpressionStatement	"currentLine . erase ( charNum + 1 , spaces )"	4545:3:131989:132027	649353	0	True				
ANR	649542	CallExpression	"currentLine . erase ( charNum + 1 , spaces )"		649353	0					
ANR	649543	Callee	currentLine . erase		649353	0					
ANR	649544	MemberAccess	currentLine . erase		649353	0					
ANR	649545	Identifier	currentLine		649353	0					
ANR	649546	Identifier	erase		649353	1					
ANR	649547	ArgumentList	charNum + 1		649353	1					
ANR	649548	Argument	charNum + 1		649353	0					
ANR	649549	AdditiveExpression	charNum + 1		649353	0		+			
ANR	649550	Identifier	charNum		649353	0					
ANR	649551	PrimaryExpression	1		649353	1					
ANR	649552	Argument	spaces		649353	1					
ANR	649553	Identifier	spaces		649353	0					
ANR	649554	ExpressionStatement	spacePadNum -= spaces	4546:3:132032:132053	649353	1	True				
ANR	649555	AssignmentExpression	spacePadNum -= spaces		649353	0		-=			
ANR	649556	Identifier	spacePadNum		649353	0					
ANR	649557	Identifier	spaces		649353	1					
ANR	649558	ReturnType	void		649353	1					
ANR	649559	Identifier	ASFormatter :: padObjCReturnType		649353	2					
ANR	649560	ParameterList			649353	3					
ANR	649561	CFGEntryNode	ENTRY		649353		True				
ANR	649562	CFGExitNode	EXIT		649353		True				
ANR	649563	Symbol	lastText		649353						
ANR	649564	Symbol	currentChar		649353						
ANR	649565	Symbol	* formattedLine		649353						
ANR	649566	Symbol	nextText		649353						
ANR	649567	Symbol	spacePadNum		649353						
ANR	649568	Symbol	isInObjCReturnType		649353						
ANR	649569	Symbol	string :: npos		649353						
ANR	649570	Symbol	* formattedLine . length		649353						
ANR	649571	Symbol	currentLine . find_first_not_of		649353						
ANR	649572	Symbol	formattedLine		649353						
ANR	649573	Symbol	formattedLine . find_last_not_of		649353						
ANR	649574	Symbol	formattedLine . length		649353						
ANR	649575	Symbol	spaces		649353						
ANR	649576	Symbol	shouldPadReturnType		649353						
ANR	649577	Symbol	shouldUnPadReturnType		649353						
ANR	649578	Symbol	charNum		649353						
ANR	649579	Symbol	currentLine		649353						
ANR	649580	Function	ASFormatter :: padObjCParamType	4556:0:132251:134539							
ANR	649581	FunctionDef	ASFormatter :: padObjCParamType ()		649580	0					
ANR	649582	CompoundStatement		4557:0:132288:134539	649580	0					
ANR	649583	ExpressionStatement	assert ( ( currentChar == '(' || currentChar == ')' ) && isInObjCMethodDefinition )	4558:1:132291:132369	649580	0	True				
ANR	649584	CallExpression	assert ( ( currentChar == '(' || currentChar == ')' ) && isInObjCMethodDefinition )		649580	0					
ANR	649585	Callee	assert		649580	0					
ANR	649586	Identifier	assert		649580	0					
ANR	649587	ArgumentList	( currentChar == '(' || currentChar == ')' ) && isInObjCMethodDefinition		649580	1					
ANR	649588	Argument	( currentChar == '(' || currentChar == ')' ) && isInObjCMethodDefinition		649580	0					
ANR	649589	AndExpression	( currentChar == '(' || currentChar == ')' ) && isInObjCMethodDefinition		649580	0		&&			
ANR	649590	OrExpression	currentChar == '(' || currentChar == ')'		649580	0		||			
ANR	649591	EqualityExpression	currentChar == '('		649580	0		==			
ANR	649592	Identifier	currentChar		649580	0					
ANR	649593	PrimaryExpression	'('		649580	1					
ANR	649594	EqualityExpression	currentChar == ')'		649580	1		==			
ANR	649595	Identifier	currentChar		649580	0					
ANR	649596	PrimaryExpression	')'		649580	1					
ANR	649597	Identifier	isInObjCMethodDefinition		649580	1					
ANR	649598	ExpressionStatement	assert ( ! isImmediatelyPostObjCMethodPrefix && ! isInObjCReturnType )	4559:1:132372:132437	649580	1	True				
ANR	649599	CallExpression	assert ( ! isImmediatelyPostObjCMethodPrefix && ! isInObjCReturnType )		649580	0					
ANR	649600	Callee	assert		649580	0					
ANR	649601	Identifier	assert		649580	0					
ANR	649602	ArgumentList	! isImmediatelyPostObjCMethodPrefix && ! isInObjCReturnType		649580	1					
ANR	649603	Argument	! isImmediatelyPostObjCMethodPrefix && ! isInObjCReturnType		649580	0					
ANR	649604	AndExpression	! isImmediatelyPostObjCMethodPrefix && ! isInObjCReturnType		649580	0		&&			
ANR	649605	UnaryOperationExpression	! isImmediatelyPostObjCMethodPrefix		649580	0					
ANR	649606	UnaryOperator	!		649580	0					
ANR	649607	Identifier	isImmediatelyPostObjCMethodPrefix		649580	1					
ANR	649608	UnaryOperationExpression	! isInObjCReturnType		649580	1					
ANR	649609	UnaryOperator	!		649580	0					
ANR	649610	Identifier	isInObjCReturnType		649580	1					
ANR	649611	ExpressionStatement	assert ( shouldPadParamType || shouldUnPadParamType )	4560:1:132440:132490	649580	2	True				
ANR	649612	CallExpression	assert ( shouldPadParamType || shouldUnPadParamType )		649580	0					
ANR	649613	Callee	assert		649580	0					
ANR	649614	Identifier	assert		649580	0					
ANR	649615	ArgumentList	shouldPadParamType || shouldUnPadParamType		649580	1					
ANR	649616	Argument	shouldPadParamType || shouldUnPadParamType		649580	0					
ANR	649617	OrExpression	shouldPadParamType || shouldUnPadParamType		649580	0		||			
ANR	649618	Identifier	shouldPadParamType		649580	0					
ANR	649619	Identifier	shouldUnPadParamType		649580	1					
ANR	649620	IfStatement	if ( currentChar == '(' )		649580	3					
ANR	649621	Condition	currentChar == '('	4562:5:132498:132515	649580	0	True				
ANR	649622	EqualityExpression	currentChar == '('		649580	0		==			
ANR	649623	Identifier	currentChar		649580	0					
ANR	649624	PrimaryExpression	'('		649580	1					
ANR	649625	CompoundStatement		14:2:506:543	649580	1					
ANR	649626	IdentifierDeclStatement	size_t paramOpen = formattedLine . rfind ( '(' ) ;	4565:2:132594:132637	649580	0	True				
ANR	649627	IdentifierDecl	paramOpen = formattedLine . rfind ( '(' )		649580	0					
ANR	649628	IdentifierDeclType	size_t		649580	0					
ANR	649629	Identifier	paramOpen		649580	1					
ANR	649630	AssignmentExpression	paramOpen = formattedLine . rfind ( '(' )		649580	2		=			
ANR	649631	Identifier	paramOpen		649580	0					
ANR	649632	CallExpression	formattedLine . rfind ( '(' )		649580	1					
ANR	649633	Callee	formattedLine . rfind		649580	0					
ANR	649634	MemberAccess	formattedLine . rfind		649580	0					
ANR	649635	Identifier	formattedLine		649580	0					
ANR	649636	Identifier	rfind		649580	1					
ANR	649637	ArgumentList	'('		649580	1					
ANR	649638	Argument	'('		649580	0					
ANR	649639	PrimaryExpression	'('		649580	0					
ANR	649640	ExpressionStatement	assert ( paramOpen != string :: npos )	4566:2:132641:132674	649580	1	True				
ANR	649641	CallExpression	assert ( paramOpen != string :: npos )		649580	0					
ANR	649642	Callee	assert		649580	0					
ANR	649643	Identifier	assert		649580	0					
ANR	649644	ArgumentList	paramOpen != string :: npos		649580	1					
ANR	649645	Argument	paramOpen != string :: npos		649580	0					
ANR	649646	EqualityExpression	paramOpen != string :: npos		649580	0		!=			
ANR	649647	Identifier	paramOpen		649580	0					
ANR	649648	Identifier	string :: npos		649580	1					
ANR	649649	IdentifierDeclStatement	"size_t prevText = formattedLine . find_last_not_of ( "" \\t"" , paramOpen - 1 ) ;"	4567:2:132678:132748	649580	2	True				
ANR	649650	IdentifierDecl	"prevText = formattedLine . find_last_not_of ( "" \\t"" , paramOpen - 1 )"		649580	0					
ANR	649651	IdentifierDeclType	size_t		649580	0					
ANR	649652	Identifier	prevText		649580	1					
ANR	649653	AssignmentExpression	"prevText = formattedLine . find_last_not_of ( "" \\t"" , paramOpen - 1 )"		649580	2		=			
ANR	649654	Identifier	prevText		649580	0					
ANR	649655	CallExpression	"formattedLine . find_last_not_of ( "" \\t"" , paramOpen - 1 )"		649580	1					
ANR	649656	Callee	formattedLine . find_last_not_of		649580	0					
ANR	649657	MemberAccess	formattedLine . find_last_not_of		649580	0					
ANR	649658	Identifier	formattedLine		649580	0					
ANR	649659	Identifier	find_last_not_of		649580	1					
ANR	649660	ArgumentList	""" \\t"""		649580	1					
ANR	649661	Argument	""" \\t"""		649580	0					
ANR	649662	PrimaryExpression	""" \\t"""		649580	0					
ANR	649663	Argument	paramOpen - 1		649580	1					
ANR	649664	AdditiveExpression	paramOpen - 1		649580	0		-			
ANR	649665	Identifier	paramOpen		649580	0					
ANR	649666	PrimaryExpression	1		649580	1					
ANR	649667	IfStatement	if ( prevText == string :: npos )		649580	3					
ANR	649668	Condition	prevText == string :: npos	4568:6:132756:132779	649580	0	True				
ANR	649669	EqualityExpression	prevText == string :: npos		649580	0		==			
ANR	649670	Identifier	prevText		649580	0					
ANR	649671	Identifier	string :: npos		649580	1					
ANR	649672	ReturnStatement	return ;	4569:3:132785:132791	649580	1	True				
ANR	649673	IdentifierDeclStatement	int spaces = paramOpen - prevText - 1 ;	4570:2:132795:132832	649580	4	True				
ANR	649674	IdentifierDecl	spaces = paramOpen - prevText - 1		649580	0					
ANR	649675	IdentifierDeclType	int		649580	0					
ANR	649676	Identifier	spaces		649580	1					
ANR	649677	AssignmentExpression	spaces = paramOpen - prevText - 1		649580	2		=			
ANR	649678	Identifier	spaces		649580	0					
ANR	649679	AdditiveExpression	paramOpen - prevText - 1		649580	1		-			
ANR	649680	Identifier	paramOpen		649580	0					
ANR	649681	AdditiveExpression	prevText - 1		649580	1		-			
ANR	649682	Identifier	prevText		649580	0					
ANR	649683	PrimaryExpression	1		649580	1					
ANR	649684	IfStatement	if ( shouldPadParamType || objCColonPadMode == COLON_PAD_ALL || objCColonPadMode == COLON_PAD_AFTER )		649580	5					
ANR	649685	Condition	shouldPadParamType || objCColonPadMode == COLON_PAD_ALL || objCColonPadMode == COLON_PAD_AFTER	4572:6:132841:132954	649580	0	True				
ANR	649686	OrExpression	shouldPadParamType || objCColonPadMode == COLON_PAD_ALL || objCColonPadMode == COLON_PAD_AFTER		649580	0		||			
ANR	649687	Identifier	shouldPadParamType		649580	0					
ANR	649688	OrExpression	objCColonPadMode == COLON_PAD_ALL || objCColonPadMode == COLON_PAD_AFTER		649580	1		||			
ANR	649689	EqualityExpression	objCColonPadMode == COLON_PAD_ALL		649580	0		==			
ANR	649690	Identifier	objCColonPadMode		649580	0					
ANR	649691	Identifier	COLON_PAD_ALL		649580	1					
ANR	649692	EqualityExpression	objCColonPadMode == COLON_PAD_AFTER		649580	1		==			
ANR	649693	Identifier	objCColonPadMode		649580	0					
ANR	649694	Identifier	COLON_PAD_AFTER		649580	1					
ANR	649695	CompoundStatement		19:2:670:670	649580	1					
ANR	649696	IfStatement	if ( spaces == 0 )		649580	0					
ANR	649697	Condition	spaces == 0	4576:7:132968:132978	649580	0	True				
ANR	649698	EqualityExpression	spaces == 0		649580	0		==			
ANR	649699	Identifier	spaces		649580	0					
ANR	649700	PrimaryExpression	0		649580	1					
ANR	649701	CompoundStatement		21:3:695:695	649580	1					
ANR	649702	ExpressionStatement	"formattedLine . insert ( paramOpen , 1 , ' ' )"	4578:4:132990:133029	649580	0	True				
ANR	649703	CallExpression	"formattedLine . insert ( paramOpen , 1 , ' ' )"		649580	0					
ANR	649704	Callee	formattedLine . insert		649580	0					
ANR	649705	MemberAccess	formattedLine . insert		649580	0					
ANR	649706	Identifier	formattedLine		649580	0					
ANR	649707	Identifier	insert		649580	1					
ANR	649708	ArgumentList	paramOpen		649580	1					
ANR	649709	Argument	paramOpen		649580	0					
ANR	649710	Identifier	paramOpen		649580	0					
ANR	649711	Argument	1		649580	1					
ANR	649712	PrimaryExpression	1		649580	0					
ANR	649713	Argument	' '		649580	2					
ANR	649714	PrimaryExpression	' '		649580	0					
ANR	649715	ExpressionStatement	spacePadNum += 1	4579:4:133035:133051	649580	1	True				
ANR	649716	AssignmentExpression	spacePadNum += 1		649580	0		+=			
ANR	649717	Identifier	spacePadNum		649580	0					
ANR	649718	PrimaryExpression	1		649580	1					
ANR	649719	IfStatement	if ( spaces > 1 )		649580	1					
ANR	649720	Condition	spaces > 1	4581:7:133065:133074	649580	0	True				
ANR	649721	RelationalExpression	spaces > 1		649580	0		>			
ANR	649722	Identifier	spaces		649580	0					
ANR	649723	PrimaryExpression	1		649580	1					
ANR	649724	CompoundStatement		26:3:791:791	649580	1					
ANR	649725	ExpressionStatement	"formattedLine . erase ( prevText + 1 , spaces - 1 )"	4583:4:133086:133131	649580	0	True				
ANR	649726	CallExpression	"formattedLine . erase ( prevText + 1 , spaces - 1 )"		649580	0					
ANR	649727	Callee	formattedLine . erase		649580	0					
ANR	649728	MemberAccess	formattedLine . erase		649580	0					
ANR	649729	Identifier	formattedLine		649580	0					
ANR	649730	Identifier	erase		649580	1					
ANR	649731	ArgumentList	prevText + 1		649580	1					
ANR	649732	Argument	prevText + 1		649580	0					
ANR	649733	AdditiveExpression	prevText + 1		649580	0		+			
ANR	649734	Identifier	prevText		649580	0					
ANR	649735	PrimaryExpression	1		649580	1					
ANR	649736	Argument	spaces - 1		649580	1					
ANR	649737	AdditiveExpression	spaces - 1		649580	0		-			
ANR	649738	Identifier	spaces		649580	0					
ANR	649739	PrimaryExpression	1		649580	1					
ANR	649740	ExpressionStatement	spacePadNum -= spaces - 1	4584:4:133137:133162	649580	1	True				
ANR	649741	AssignmentExpression	spacePadNum -= spaces - 1		649580	0		-=			
ANR	649742	Identifier	spacePadNum		649580	0					
ANR	649743	AdditiveExpression	spaces - 1		649580	1		-			
ANR	649744	Identifier	spaces		649580	0					
ANR	649745	PrimaryExpression	1		649580	1					
ANR	649746	ElseStatement	else		649580	0					
ANR	649747	IfStatement	if ( shouldUnPadParamType || objCColonPadMode == COLON_PAD_NONE || objCColonPadMode == COLON_PAD_BEFORE )		649580	0					
ANR	649748	Condition	shouldUnPadParamType || objCColonPadMode == COLON_PAD_NONE || objCColonPadMode == COLON_PAD_BEFORE	4588:11:133245:133364	649580	0	True				
ANR	649749	OrExpression	shouldUnPadParamType || objCColonPadMode == COLON_PAD_NONE || objCColonPadMode == COLON_PAD_BEFORE		649580	0		||			
ANR	649750	Identifier	shouldUnPadParamType		649580	0					
ANR	649751	OrExpression	objCColonPadMode == COLON_PAD_NONE || objCColonPadMode == COLON_PAD_BEFORE		649580	1		||			
ANR	649752	EqualityExpression	objCColonPadMode == COLON_PAD_NONE		649580	0		==			
ANR	649753	Identifier	objCColonPadMode		649580	0					
ANR	649754	Identifier	COLON_PAD_NONE		649580	1					
ANR	649755	EqualityExpression	objCColonPadMode == COLON_PAD_BEFORE		649580	1		==			
ANR	649756	Identifier	objCColonPadMode		649580	0					
ANR	649757	Identifier	COLON_PAD_BEFORE		649580	1					
ANR	649758	CompoundStatement		35:2:1080:1080	649580	1					
ANR	649759	IfStatement	if ( spaces > 0 )		649580	0					
ANR	649760	Condition	spaces > 0	4592:7:133378:133387	649580	0	True				
ANR	649761	RelationalExpression	spaces > 0		649580	0		>			
ANR	649762	Identifier	spaces		649580	0					
ANR	649763	PrimaryExpression	0		649580	1					
ANR	649764	CompoundStatement		37:3:1104:1104	649580	1					
ANR	649765	ExpressionStatement	"formattedLine . erase ( prevText + 1 , spaces )"	4594:4:133399:133440	649580	0	True				
ANR	649766	CallExpression	"formattedLine . erase ( prevText + 1 , spaces )"		649580	0					
ANR	649767	Callee	formattedLine . erase		649580	0					
ANR	649768	MemberAccess	formattedLine . erase		649580	0					
ANR	649769	Identifier	formattedLine		649580	0					
ANR	649770	Identifier	erase		649580	1					
ANR	649771	ArgumentList	prevText + 1		649580	1					
ANR	649772	Argument	prevText + 1		649580	0					
ANR	649773	AdditiveExpression	prevText + 1		649580	0		+			
ANR	649774	Identifier	prevText		649580	0					
ANR	649775	PrimaryExpression	1		649580	1					
ANR	649776	Argument	spaces		649580	1					
ANR	649777	Identifier	spaces		649580	0					
ANR	649778	ExpressionStatement	spacePadNum -= spaces	4595:4:133446:133467	649580	1	True				
ANR	649779	AssignmentExpression	spacePadNum -= spaces		649580	0		-=			
ANR	649780	Identifier	spacePadNum		649580	0					
ANR	649781	Identifier	spaces		649580	1					
ANR	649782	ElseStatement	else		649580	0					
ANR	649783	IfStatement	if ( currentChar == ')' )		649580	0					
ANR	649784	Condition	currentChar == ')'	4599:10:133491:133508	649580	0	True				
ANR	649785	EqualityExpression	currentChar == ')'		649580	0		==			
ANR	649786	Identifier	currentChar		649580	0					
ANR	649787	PrimaryExpression	')'		649580	1					
ANR	649788	CompoundStatement		48:2:1341:1376	649580	1					
ANR	649789	IdentifierDeclStatement	"size_t nextText = currentLine . find_first_not_of ( "" \\t"" , charNum + 1 ) ;"	4601:2:133516:133583	649580	0	True				
ANR	649790	IdentifierDecl	"nextText = currentLine . find_first_not_of ( "" \\t"" , charNum + 1 )"		649580	0					
ANR	649791	IdentifierDeclType	size_t		649580	0					
ANR	649792	Identifier	nextText		649580	1					
ANR	649793	AssignmentExpression	"nextText = currentLine . find_first_not_of ( "" \\t"" , charNum + 1 )"		649580	2		=			
ANR	649794	Identifier	nextText		649580	0					
ANR	649795	CallExpression	"currentLine . find_first_not_of ( "" \\t"" , charNum + 1 )"		649580	1					
ANR	649796	Callee	currentLine . find_first_not_of		649580	0					
ANR	649797	MemberAccess	currentLine . find_first_not_of		649580	0					
ANR	649798	Identifier	currentLine		649580	0					
ANR	649799	Identifier	find_first_not_of		649580	1					
ANR	649800	ArgumentList	""" \\t"""		649580	1					
ANR	649801	Argument	""" \\t"""		649580	0					
ANR	649802	PrimaryExpression	""" \\t"""		649580	0					
ANR	649803	Argument	charNum + 1		649580	1					
ANR	649804	AdditiveExpression	charNum + 1		649580	0		+			
ANR	649805	Identifier	charNum		649580	0					
ANR	649806	PrimaryExpression	1		649580	1					
ANR	649807	IfStatement	if ( nextText == string :: npos )		649580	1					
ANR	649808	Condition	nextText == string :: npos	4602:6:133591:133614	649580	0	True				
ANR	649809	EqualityExpression	nextText == string :: npos		649580	0		==			
ANR	649810	Identifier	nextText		649580	0					
ANR	649811	Identifier	string :: npos		649580	1					
ANR	649812	ReturnStatement	return ;	4603:3:133620:133626	649580	1	True				
ANR	649813	IdentifierDeclStatement	int spaces = nextText - charNum - 1 ;	4604:2:133630:133665	649580	2	True				
ANR	649814	IdentifierDecl	spaces = nextText - charNum - 1		649580	0					
ANR	649815	IdentifierDeclType	int		649580	0					
ANR	649816	Identifier	spaces		649580	1					
ANR	649817	AssignmentExpression	spaces = nextText - charNum - 1		649580	2		=			
ANR	649818	Identifier	spaces		649580	0					
ANR	649819	AdditiveExpression	nextText - charNum - 1		649580	1		-			
ANR	649820	Identifier	nextText		649580	0					
ANR	649821	AdditiveExpression	charNum - 1		649580	1		-			
ANR	649822	Identifier	charNum		649580	0					
ANR	649823	PrimaryExpression	1		649580	1					
ANR	649824	IfStatement	if ( shouldPadParamType )		649580	3					
ANR	649825	Condition	shouldPadParamType	4606:6:133674:133691	649580	0	True				
ANR	649826	Identifier	shouldPadParamType		649580	0					
ANR	649827	CompoundStatement		51:2:1407:1407	649580	1					
ANR	649828	IfStatement	if ( spaces == 0 )		649580	0					
ANR	649829	Condition	spaces == 0	4608:7:133705:133715	649580	0	True				
ANR	649830	EqualityExpression	spaces == 0		649580	0		==			
ANR	649831	Identifier	spaces		649580	0					
ANR	649832	PrimaryExpression	0		649580	1					
ANR	649833	CompoundStatement		53:3:1432:1432	649580	1					
ANR	649834	IfStatement	if ( formattedLine [ formattedLine . length ( ) - 1 ] != ' ' )		649580	0					
ANR	649835	Condition	formattedLine [ formattedLine . length ( ) - 1 ] != ' '	4611:8:133787:133834	649580	0	True				
ANR	649836	EqualityExpression	formattedLine [ formattedLine . length ( ) - 1 ] != ' '		649580	0		!=			
ANR	649837	ArrayIndexing	formattedLine [ formattedLine . length ( ) - 1 ]		649580	0					
ANR	649838	Identifier	formattedLine		649580	0					
ANR	649839	AdditiveExpression	formattedLine . length ( ) - 1		649580	1		-			
ANR	649840	CallExpression	formattedLine . length ( )		649580	0					
ANR	649841	Callee	formattedLine . length		649580	0					
ANR	649842	MemberAccess	formattedLine . length		649580	0					
ANR	649843	Identifier	formattedLine		649580	0					
ANR	649844	Identifier	length		649580	1					
ANR	649845	ArgumentList			649580	1					
ANR	649846	PrimaryExpression	1		649580	1					
ANR	649847	PrimaryExpression	' '		649580	1					
ANR	649848	CompoundStatement		56:4:1552:1552	649580	1					
ANR	649849	ExpressionStatement	"formattedLine . append ( "" "" )"	4613:5:133848:133873	649580	0	True				
ANR	649850	CallExpression	"formattedLine . append ( "" "" )"		649580	0					
ANR	649851	Callee	formattedLine . append		649580	0					
ANR	649852	MemberAccess	formattedLine . append		649580	0					
ANR	649853	Identifier	formattedLine		649580	0					
ANR	649854	Identifier	append		649580	1					
ANR	649855	ArgumentList	""" """		649580	1					
ANR	649856	Argument	""" """		649580	0					
ANR	649857	PrimaryExpression	""" """		649580	0					
ANR	649858	ExpressionStatement	spacePadNum += 1	4614:5:133880:133896	649580	1	True				
ANR	649859	AssignmentExpression	spacePadNum += 1		649580	0		+=			
ANR	649860	Identifier	spacePadNum		649580	0					
ANR	649861	PrimaryExpression	1		649580	1					
ANR	649862	ElseStatement	else		649580	0					
ANR	649863	IfStatement	if ( spaces > 1 )		649580	0					
ANR	649864	Condition	spaces > 1	4617:12:133921:133930	649580	0	True				
ANR	649865	RelationalExpression	spaces > 1		649580	0		>			
ANR	649866	Identifier	spaces		649580	0					
ANR	649867	PrimaryExpression	1		649580	1					
ANR	649868	CompoundStatement		62:3:1647:1647	649580	1					
ANR	649869	ExpressionStatement	"currentLine . erase ( charNum + 1 , spaces - 1 )"	4620:4:133975:134017	649580	0	True				
ANR	649870	CallExpression	"currentLine . erase ( charNum + 1 , spaces - 1 )"		649580	0					
ANR	649871	Callee	currentLine . erase		649580	0					
ANR	649872	MemberAccess	currentLine . erase		649580	0					
ANR	649873	Identifier	currentLine		649580	0					
ANR	649874	Identifier	erase		649580	1					
ANR	649875	ArgumentList	charNum + 1		649580	1					
ANR	649876	Argument	charNum + 1		649580	0					
ANR	649877	AdditiveExpression	charNum + 1		649580	0		+			
ANR	649878	Identifier	charNum		649580	0					
ANR	649879	PrimaryExpression	1		649580	1					
ANR	649880	Argument	spaces - 1		649580	1					
ANR	649881	AdditiveExpression	spaces - 1		649580	0		-			
ANR	649882	Identifier	spaces		649580	0					
ANR	649883	PrimaryExpression	1		649580	1					
ANR	649884	ExpressionStatement	spacePadNum -= spaces - 1	4621:4:134023:134048	649580	1	True				
ANR	649885	AssignmentExpression	spacePadNum -= spaces - 1		649580	0		-=			
ANR	649886	Identifier	spacePadNum		649580	0					
ANR	649887	AdditiveExpression	spaces - 1		649580	1		-			
ANR	649888	Identifier	spaces		649580	0					
ANR	649889	PrimaryExpression	1		649580	1					
ANR	649890	ElseStatement	else		649580	0					
ANR	649891	IfStatement	if ( shouldUnPadParamType )		649580	0					
ANR	649892	Condition	shouldUnPadParamType	4625:11:134131:134150	649580	0	True				
ANR	649893	Identifier	shouldUnPadParamType		649580	0					
ANR	649894	CompoundStatement		70:2:1866:1866	649580	1					
ANR	649895	IfStatement	if ( formattedLine [ formattedLine . length ( ) - 1 ] == ' ' )		649580	0					
ANR	649896	Condition	formattedLine [ formattedLine . length ( ) - 1 ] == ' '	4628:7:134219:134266	649580	0	True				
ANR	649897	EqualityExpression	formattedLine [ formattedLine . length ( ) - 1 ] == ' '		649580	0		==			
ANR	649898	ArrayIndexing	formattedLine [ formattedLine . length ( ) - 1 ]		649580	0					
ANR	649899	Identifier	formattedLine		649580	0					
ANR	649900	AdditiveExpression	formattedLine . length ( ) - 1		649580	1		-			
ANR	649901	CallExpression	formattedLine . length ( )		649580	0					
ANR	649902	Callee	formattedLine . length		649580	0					
ANR	649903	MemberAccess	formattedLine . length		649580	0					
ANR	649904	Identifier	formattedLine		649580	0					
ANR	649905	Identifier	length		649580	1					
ANR	649906	ArgumentList			649580	1					
ANR	649907	PrimaryExpression	1		649580	1					
ANR	649908	PrimaryExpression	' '		649580	1					
ANR	649909	CompoundStatement		75:4:2011:2063	649580	1					
ANR	649910	ExpressionStatement	spacePadNum -= 1	4630:4:134278:134294	649580	0	True				
ANR	649911	AssignmentExpression	spacePadNum -= 1		649580	0		-=			
ANR	649912	Identifier	spacePadNum		649580	0					
ANR	649913	PrimaryExpression	1		649580	1					
ANR	649914	IdentifierDeclStatement	"int lastText = formattedLine . find_last_not_of ( "" \\t"" ) ;"	4631:4:134300:134352	649580	1	True				
ANR	649915	IdentifierDecl	"lastText = formattedLine . find_last_not_of ( "" \\t"" )"		649580	0					
ANR	649916	IdentifierDeclType	int		649580	0					
ANR	649917	Identifier	lastText		649580	1					
ANR	649918	AssignmentExpression	"lastText = formattedLine . find_last_not_of ( "" \\t"" )"		649580	2		=			
ANR	649919	Identifier	lastText		649580	0					
ANR	649920	CallExpression	"formattedLine . find_last_not_of ( "" \\t"" )"		649580	1					
ANR	649921	Callee	formattedLine . find_last_not_of		649580	0					
ANR	649922	MemberAccess	formattedLine . find_last_not_of		649580	0					
ANR	649923	Identifier	formattedLine		649580	0					
ANR	649924	Identifier	find_last_not_of		649580	1					
ANR	649925	ArgumentList	""" \\t"""		649580	1					
ANR	649926	Argument	""" \\t"""		649580	0					
ANR	649927	PrimaryExpression	""" \\t"""		649580	0					
ANR	649928	ExpressionStatement	formattedLine . resize ( lastText + 1 )	4632:4:134358:134392	649580	2	True				
ANR	649929	CallExpression	formattedLine . resize ( lastText + 1 )		649580	0					
ANR	649930	Callee	formattedLine . resize		649580	0					
ANR	649931	MemberAccess	formattedLine . resize		649580	0					
ANR	649932	Identifier	formattedLine		649580	0					
ANR	649933	Identifier	resize		649580	1					
ANR	649934	ArgumentList	lastText + 1		649580	1					
ANR	649935	Argument	lastText + 1		649580	0					
ANR	649936	AdditiveExpression	lastText + 1		649580	0		+			
ANR	649937	Identifier	lastText		649580	0					
ANR	649938	PrimaryExpression	1		649580	1					
ANR	649939	IfStatement	if ( spaces > 0 )		649580	1					
ANR	649940	Condition	spaces > 0	4634:7:134406:134415	649580	0	True				
ANR	649941	RelationalExpression	spaces > 0		649580	0		>			
ANR	649942	Identifier	spaces		649580	0					
ANR	649943	PrimaryExpression	0		649580	1					
ANR	649944	CompoundStatement		79:3:2132:2132	649580	1					
ANR	649945	ExpressionStatement	"currentLine . erase ( charNum + 1 , spaces )"	4637:4:134460:134498	649580	0	True				
ANR	649946	CallExpression	"currentLine . erase ( charNum + 1 , spaces )"		649580	0					
ANR	649947	Callee	currentLine . erase		649580	0					
ANR	649948	MemberAccess	currentLine . erase		649580	0					
ANR	649949	Identifier	currentLine		649580	0					
ANR	649950	Identifier	erase		649580	1					
ANR	649951	ArgumentList	charNum + 1		649580	1					
ANR	649952	Argument	charNum + 1		649580	0					
ANR	649953	AdditiveExpression	charNum + 1		649580	0		+			
ANR	649954	Identifier	charNum		649580	0					
ANR	649955	PrimaryExpression	1		649580	1					
ANR	649956	Argument	spaces		649580	1					
ANR	649957	Identifier	spaces		649580	0					
ANR	649958	ExpressionStatement	spacePadNum -= spaces	4638:4:134504:134525	649580	1	True				
ANR	649959	AssignmentExpression	spacePadNum -= spaces		649580	0		-=			
ANR	649960	Identifier	spacePadNum		649580	0					
ANR	649961	Identifier	spaces		649580	1					
ANR	649962	ReturnType	void		649580	1					
ANR	649963	Identifier	ASFormatter :: padObjCParamType		649580	2					
ANR	649964	ParameterList			649580	3					
ANR	649965	CFGEntryNode	ENTRY		649580		True				
ANR	649966	CFGExitNode	EXIT		649580		True				
ANR	649967	Symbol	COLON_PAD_BEFORE		649580						
ANR	649968	Symbol	* formattedLine		649580						
ANR	649969	Symbol	paramOpen		649580						
ANR	649970	Symbol	string :: npos		649580						
ANR	649971	Symbol	COLON_PAD_NONE		649580						
ANR	649972	Symbol	prevText		649580						
ANR	649973	Symbol	* formattedLine . length		649580						
ANR	649974	Symbol	objCColonPadMode		649580						
ANR	649975	Symbol	formattedLine . find_last_not_of		649580						
ANR	649976	Symbol	charNum		649580						
ANR	649977	Symbol	isInObjCMethodDefinition		649580						
ANR	649978	Symbol	currentLine		649580						
ANR	649979	Symbol	lastText		649580						
ANR	649980	Symbol	currentChar		649580						
ANR	649981	Symbol	shouldUnPadParamType		649580						
ANR	649982	Symbol	nextText		649580						
ANR	649983	Symbol	spacePadNum		649580						
ANR	649984	Symbol	isInObjCReturnType		649580						
ANR	649985	Symbol	COLON_PAD_ALL		649580						
ANR	649986	Symbol	currentLine . find_first_not_of		649580						
ANR	649987	Symbol	formattedLine		649580						
ANR	649988	Symbol	isImmediatelyPostObjCMethodPrefix		649580						
ANR	649989	Symbol	shouldPadParamType		649580						
ANR	649990	Symbol	formattedLine . rfind		649580						
ANR	649991	Symbol	formattedLine . length		649580						
ANR	649992	Symbol	spaces		649580						
ANR	649993	Symbol	COLON_PAD_AFTER		649580						
ANR	649994	Function	ASFormatter :: formatOpeningBrace	4652:0:134870:138835							
ANR	649995	FunctionDef	ASFormatter :: formatOpeningBrace (BraceType braceType)		649994	0					
ANR	649996	CompoundStatement		4653:0:134928:138835	649994	0					
ANR	649997	ExpressionStatement	"assert ( ! isBraceType ( braceType , ARRAY_TYPE ) )"	4654:1:134931:134974	649994	0	True				
ANR	649998	CallExpression	"assert ( ! isBraceType ( braceType , ARRAY_TYPE ) )"		649994	0					
ANR	649999	Callee	assert		649994	0					
ANR	650000	Identifier	assert		649994	0					
ANR	650001	ArgumentList	"! isBraceType ( braceType , ARRAY_TYPE )"		649994	1					
ANR	650002	Argument	"! isBraceType ( braceType , ARRAY_TYPE )"		649994	0					
ANR	650003	UnaryOperationExpression	"! isBraceType ( braceType , ARRAY_TYPE )"		649994	0					
ANR	650004	UnaryOperator	!		649994	0					
ANR	650005	CallExpression	"isBraceType ( braceType , ARRAY_TYPE )"		649994	1					
ANR	650006	Callee	isBraceType		649994	0					
ANR	650007	Identifier	isBraceType		649994	0					
ANR	650008	ArgumentList	braceType		649994	1					
ANR	650009	Argument	braceType		649994	0					
ANR	650010	Identifier	braceType		649994	0					
ANR	650011	Argument	ARRAY_TYPE		649994	1					
ANR	650012	Identifier	ARRAY_TYPE		649994	0					
ANR	650013	ExpressionStatement	assert ( currentChar == '{' )	4655:1:134977:135003	649994	1	True				
ANR	650014	CallExpression	assert ( currentChar == '{' )		649994	0					
ANR	650015	Callee	assert		649994	0					
ANR	650016	Identifier	assert		649994	0					
ANR	650017	ArgumentList	currentChar == '{'		649994	1					
ANR	650018	Argument	currentChar == '{'		649994	0					
ANR	650019	EqualityExpression	currentChar == '{'		649994	0		==			
ANR	650020	Identifier	currentChar		649994	0					
ANR	650021	PrimaryExpression	'{'		649994	1					
ANR	650022	ExpressionStatement	parenStack -> emplace_back ( 0 )	4657:1:135007:135034	649994	2	True				
ANR	650023	CallExpression	parenStack -> emplace_back ( 0 )		649994	0					
ANR	650024	Callee	parenStack -> emplace_back		649994	0					
ANR	650025	PtrMemberAccess	parenStack -> emplace_back		649994	0					
ANR	650026	Identifier	parenStack		649994	0					
ANR	650027	Identifier	emplace_back		649994	1					
ANR	650028	ArgumentList	0		649994	1					
ANR	650029	Argument	0		649994	0					
ANR	650030	PrimaryExpression	0		649994	0					
ANR	650031	IdentifierDeclStatement	bool breakBrace = isCurrentBraceBroken ( ) ;	4659:1:135038:135078	649994	3	True				
ANR	650032	IdentifierDecl	breakBrace = isCurrentBraceBroken ( )		649994	0					
ANR	650033	IdentifierDeclType	bool		649994	0					
ANR	650034	Identifier	breakBrace		649994	1					
ANR	650035	AssignmentExpression	breakBrace = isCurrentBraceBroken ( )		649994	2		=			
ANR	650036	Identifier	breakBrace		649994	0					
ANR	650037	CallExpression	isCurrentBraceBroken ( )		649994	1					
ANR	650038	Callee	isCurrentBraceBroken		649994	0					
ANR	650039	Identifier	isCurrentBraceBroken		649994	0					
ANR	650040	ArgumentList			649994	1					
ANR	650041	IfStatement	if ( breakBrace )		649994	4					
ANR	650042	Condition	breakBrace	4661:5:135086:135095	649994	0	True				
ANR	650043	Identifier	breakBrace		649994	0					
ANR	650044	CompoundStatement		10:1:170:170	649994	1					
ANR	650045	IfStatement	if ( isBeforeAnyComment ( ) && isOkToBreakBlock ( braceType ) )		649994	0					
ANR	650046	Condition	isBeforeAnyComment ( ) && isOkToBreakBlock ( braceType )	4663:6:135107:135157	649994	0	True				
ANR	650047	AndExpression	isBeforeAnyComment ( ) && isOkToBreakBlock ( braceType )		649994	0		&&			
ANR	650048	CallExpression	isBeforeAnyComment ( )		649994	0					
ANR	650049	Callee	isBeforeAnyComment		649994	0					
ANR	650050	Identifier	isBeforeAnyComment		649994	0					
ANR	650051	ArgumentList			649994	1					
ANR	650052	CallExpression	isOkToBreakBlock ( braceType )		649994	1					
ANR	650053	Callee	isOkToBreakBlock		649994	0					
ANR	650054	Identifier	isOkToBreakBlock		649994	0					
ANR	650055	ArgumentList	braceType		649994	1					
ANR	650056	Argument	braceType		649994	0					
ANR	650057	Identifier	braceType		649994	0					
ANR	650058	CompoundStatement		12:2:233:233	649994	1					
ANR	650059	IfStatement	if ( isBeforeAnyLineEndComment ( charNum ) && ! currentLineBeginsWithBrace )		649994	0					
ANR	650060	Condition	isBeforeAnyLineEndComment ( charNum ) && ! currentLineBeginsWithBrace	4666:7:135234:135298	649994	0	True				
ANR	650061	AndExpression	isBeforeAnyLineEndComment ( charNum ) && ! currentLineBeginsWithBrace		649994	0		&&			
ANR	650062	CallExpression	isBeforeAnyLineEndComment ( charNum )		649994	0					
ANR	650063	Callee	isBeforeAnyLineEndComment		649994	0					
ANR	650064	Identifier	isBeforeAnyLineEndComment		649994	0					
ANR	650065	ArgumentList	charNum		649994	1					
ANR	650066	Argument	charNum		649994	0					
ANR	650067	Identifier	charNum		649994	0					
ANR	650068	UnaryOperationExpression	! currentLineBeginsWithBrace		649994	1					
ANR	650069	UnaryOperator	!		649994	0					
ANR	650070	Identifier	currentLineBeginsWithBrace		649994	1					
ANR	650071	CompoundStatement		15:3:375:375	649994	1					
ANR	650072	ExpressionStatement	currentChar = ' '	4668:4:135310:135327	649994	0	True				
ANR	650073	AssignmentExpression	currentChar = ' '		649994	0		=			
ANR	650074	Identifier	currentChar		649994	0					
ANR	650075	PrimaryExpression	' '		649994	1					
ANR	650076	IfStatement	if ( parenStack -> size ( ) > 1 )		649994	1					
ANR	650077	Condition	parenStack -> size ( ) > 1	4669:8:135384:135405	649994	0	True				
ANR	650078	RelationalExpression	parenStack -> size ( ) > 1		649994	0		>			
ANR	650079	CallExpression	parenStack -> size ( )		649994	0					
ANR	650080	Callee	parenStack -> size		649994	0					
ANR	650081	PtrMemberAccess	parenStack -> size		649994	0					
ANR	650082	Identifier	parenStack		649994	0					
ANR	650083	Identifier	size		649994	1					
ANR	650084	ArgumentList			649994	1					
ANR	650085	PrimaryExpression	1		649994	1					
ANR	650086	ExpressionStatement	parenStack -> pop_back ( )	4670:5:135413:135435	649994	1	True				
ANR	650087	CallExpression	parenStack -> pop_back ( )		649994	0					
ANR	650088	Callee	parenStack -> pop_back		649994	0					
ANR	650089	PtrMemberAccess	parenStack -> pop_back		649994	0					
ANR	650090	Identifier	parenStack		649994	0					
ANR	650091	Identifier	pop_back		649994	1					
ANR	650092	ArgumentList			649994	1					
ANR	650093	ExpressionStatement	currentLine [ charNum ] = currentChar	4671:4:135441:135475	649994	2	True				
ANR	650094	AssignmentExpression	currentLine [ charNum ] = currentChar		649994	0		=			
ANR	650095	ArrayIndexing	currentLine [ charNum ]		649994	0					
ANR	650096	Identifier	currentLine		649994	0					
ANR	650097	Identifier	charNum		649994	1					
ANR	650098	Identifier	currentChar		649994	1					
ANR	650099	ExpressionStatement	appendOpeningBrace = true	4672:4:135481:135506	649994	3	True				
ANR	650100	AssignmentExpression	appendOpeningBrace = true		649994	0		=			
ANR	650101	Identifier	appendOpeningBrace		649994	0					
ANR	650102	Identifier	true		649994	1					
ANR	650103	ElseStatement	else		649994	0					
ANR	650104	IfStatement	if ( ! isBeforeMultipleLineEndComments ( charNum ) )		649994	0					
ANR	650105	Condition	! isBeforeMultipleLineEndComments ( charNum )	4675:12:135603:135643	649994	0	True				
ANR	650106	UnaryOperationExpression	! isBeforeMultipleLineEndComments ( charNum )		649994	0					
ANR	650107	UnaryOperator	!		649994	0					
ANR	650108	CallExpression	isBeforeMultipleLineEndComments ( charNum )		649994	1					
ANR	650109	Callee	isBeforeMultipleLineEndComments		649994	0					
ANR	650110	Identifier	isBeforeMultipleLineEndComments		649994	0					
ANR	650111	ArgumentList	charNum		649994	1					
ANR	650112	Argument	charNum		649994	0					
ANR	650113	Identifier	charNum		649994	0					
ANR	650114	ExpressionStatement	breakLine ( )	4676:4:135650:135661	649994	1	True				
ANR	650115	CallExpression	breakLine ( )		649994	0					
ANR	650116	Callee	breakLine		649994	0					
ANR	650117	Identifier	breakLine		649994	0					
ANR	650118	ArgumentList			649994	1					
ANR	650119	ElseStatement	else		649994	0					
ANR	650120	IfStatement	"if ( ! isBraceType ( braceType , SINGLE_LINE_TYPE ) )"		649994	0					
ANR	650121	Condition	"! isBraceType ( braceType , SINGLE_LINE_TYPE )"	4678:11:135678:135718	649994	0	True				
ANR	650122	UnaryOperationExpression	"! isBraceType ( braceType , SINGLE_LINE_TYPE )"		649994	0					
ANR	650123	UnaryOperator	!		649994	0					
ANR	650124	CallExpression	"isBraceType ( braceType , SINGLE_LINE_TYPE )"		649994	1					
ANR	650125	Callee	isBraceType		649994	0					
ANR	650126	Identifier	isBraceType		649994	0					
ANR	650127	ArgumentList	braceType		649994	1					
ANR	650128	Argument	braceType		649994	0					
ANR	650129	Identifier	braceType		649994	0					
ANR	650130	Argument	SINGLE_LINE_TYPE		649994	1					
ANR	650131	Identifier	SINGLE_LINE_TYPE		649994	0					
ANR	650132	CompoundStatement		27:2:794:794	649994	1					
ANR	650133	ExpressionStatement	formattedLine = rtrim ( formattedLine )	4680:3:135728:135764	649994	0	True				
ANR	650134	AssignmentExpression	formattedLine = rtrim ( formattedLine )		649994	0		=			
ANR	650135	Identifier	formattedLine		649994	0					
ANR	650136	CallExpression	rtrim ( formattedLine )		649994	1					
ANR	650137	Callee	rtrim		649994	0					
ANR	650138	Identifier	rtrim		649994	0					
ANR	650139	ArgumentList	formattedLine		649994	1					
ANR	650140	Argument	formattedLine		649994	0					
ANR	650141	Identifier	formattedLine		649994	0					
ANR	650142	ExpressionStatement	breakLine ( )	4681:3:135769:135780	649994	1	True				
ANR	650143	CallExpression	breakLine ( )		649994	0					
ANR	650144	Callee	breakLine		649994	0					
ANR	650145	Identifier	breakLine		649994	0					
ANR	650146	ArgumentList			649994	1					
ANR	650147	ElseStatement	else		649994	0					
ANR	650148	IfStatement	"if ( ( shouldBreakOneLineBlocks || isBraceType ( braceType , BREAK_BLOCK_TYPE ) ) && ! isBraceType ( braceType , EMPTY_BLOCK_TYPE ) )"		649994	0					
ANR	650149	Condition	"( shouldBreakOneLineBlocks || isBraceType ( braceType , BREAK_BLOCK_TYPE ) ) && ! isBraceType ( braceType , EMPTY_BLOCK_TYPE )"	4683:11:135797:135922	649994	0	True				
ANR	650150	AndExpression	"( shouldBreakOneLineBlocks || isBraceType ( braceType , BREAK_BLOCK_TYPE ) ) && ! isBraceType ( braceType , EMPTY_BLOCK_TYPE )"		649994	0		&&			
ANR	650151	OrExpression	"shouldBreakOneLineBlocks || isBraceType ( braceType , BREAK_BLOCK_TYPE )"		649994	0		||			
ANR	650152	Identifier	shouldBreakOneLineBlocks		649994	0					
ANR	650153	CallExpression	"isBraceType ( braceType , BREAK_BLOCK_TYPE )"		649994	1					
ANR	650154	Callee	isBraceType		649994	0					
ANR	650155	Identifier	isBraceType		649994	0					
ANR	650156	ArgumentList	braceType		649994	1					
ANR	650157	Argument	braceType		649994	0					
ANR	650158	Identifier	braceType		649994	0					
ANR	650159	Argument	BREAK_BLOCK_TYPE		649994	1					
ANR	650160	Identifier	BREAK_BLOCK_TYPE		649994	0					
ANR	650161	UnaryOperationExpression	"! isBraceType ( braceType , EMPTY_BLOCK_TYPE )"		649994	1					
ANR	650162	UnaryOperator	!		649994	0					
ANR	650163	CallExpression	"isBraceType ( braceType , EMPTY_BLOCK_TYPE )"		649994	1					
ANR	650164	Callee	isBraceType		649994	0					
ANR	650165	Identifier	isBraceType		649994	0					
ANR	650166	ArgumentList	braceType		649994	1					
ANR	650167	Argument	braceType		649994	0					
ANR	650168	Identifier	braceType		649994	0					
ANR	650169	Argument	EMPTY_BLOCK_TYPE		649994	1					
ANR	650170	Identifier	EMPTY_BLOCK_TYPE		649994	0					
ANR	650171	ExpressionStatement	breakLine ( )	4685:3:135928:135939	649994	1	True				
ANR	650172	CallExpression	breakLine ( )		649994	0					
ANR	650173	Callee	breakLine		649994	0					
ANR	650174	Identifier	breakLine		649994	0					
ANR	650175	ArgumentList			649994	1					
ANR	650176	ElseStatement	else		649994	0					
ANR	650177	IfStatement	if ( ! isInLineBreak )		649994	0					
ANR	650178	Condition	! isInLineBreak	4686:11:135952:135965	649994	0	True				
ANR	650179	UnaryOperationExpression	! isInLineBreak		649994	0					
ANR	650180	UnaryOperator	!		649994	0					
ANR	650181	Identifier	isInLineBreak		649994	1					
ANR	650182	ExpressionStatement	appendSpacePad ( )	4687:3:135971:135987	649994	1	True				
ANR	650183	CallExpression	appendSpacePad ( )		649994	0					
ANR	650184	Callee	appendSpacePad		649994	0					
ANR	650185	Identifier	appendSpacePad		649994	0					
ANR	650186	ArgumentList			649994	1					
ANR	650187	ExpressionStatement	appendCurrentChar ( )	4689:2:135992:136011	649994	1	True				
ANR	650188	CallExpression	appendCurrentChar ( )		649994	0					
ANR	650189	Callee	appendCurrentChar		649994	0					
ANR	650190	Identifier	appendCurrentChar		649994	0					
ANR	650191	ArgumentList			649994	1					
ANR	650192	IfStatement	if ( isBeforeComment ( ) && formattedLine . length ( ) > 0 && formattedLine [ 0 ] == '{' && isOkToBreakBlock ( braceType ) && ( braceFormatMode == BREAK_MODE || braceFormatMode == LINUX_MODE ) )		649994	2					
ANR	650193	Condition	isBeforeComment ( ) && formattedLine . length ( ) > 0 && formattedLine [ 0 ] == '{' && isOkToBreakBlock ( braceType ) && ( braceFormatMode == BREAK_MODE || braceFormatMode == LINUX_MODE )	4693:6:136115:136341	649994	0	True				
ANR	650194	AndExpression	isBeforeComment ( ) && formattedLine . length ( ) > 0 && formattedLine [ 0 ] == '{' && isOkToBreakBlock ( braceType ) && ( braceFormatMode == BREAK_MODE || braceFormatMode == LINUX_MODE )		649994	0		&&			
ANR	650195	CallExpression	isBeforeComment ( )		649994	0					
ANR	650196	Callee	isBeforeComment		649994	0					
ANR	650197	Identifier	isBeforeComment		649994	0					
ANR	650198	ArgumentList			649994	1					
ANR	650199	AndExpression	formattedLine . length ( ) > 0 && formattedLine [ 0 ] == '{' && isOkToBreakBlock ( braceType ) && ( braceFormatMode == BREAK_MODE || braceFormatMode == LINUX_MODE )		649994	1		&&			
ANR	650200	RelationalExpression	formattedLine . length ( ) > 0		649994	0		>			
ANR	650201	CallExpression	formattedLine . length ( )		649994	0					
ANR	650202	Callee	formattedLine . length		649994	0					
ANR	650203	MemberAccess	formattedLine . length		649994	0					
ANR	650204	Identifier	formattedLine		649994	0					
ANR	650205	Identifier	length		649994	1					
ANR	650206	ArgumentList			649994	1					
ANR	650207	PrimaryExpression	0		649994	1					
ANR	650208	AndExpression	formattedLine [ 0 ] == '{' && isOkToBreakBlock ( braceType ) && ( braceFormatMode == BREAK_MODE || braceFormatMode == LINUX_MODE )		649994	1		&&			
ANR	650209	EqualityExpression	formattedLine [ 0 ] == '{'		649994	0		==			
ANR	650210	ArrayIndexing	formattedLine [ 0 ]		649994	0					
ANR	650211	Identifier	formattedLine		649994	0					
ANR	650212	PrimaryExpression	0		649994	1					
ANR	650213	PrimaryExpression	'{'		649994	1					
ANR	650214	AndExpression	isOkToBreakBlock ( braceType ) && ( braceFormatMode == BREAK_MODE || braceFormatMode == LINUX_MODE )		649994	1		&&			
ANR	650215	CallExpression	isOkToBreakBlock ( braceType )		649994	0					
ANR	650216	Callee	isOkToBreakBlock		649994	0					
ANR	650217	Identifier	isOkToBreakBlock		649994	0					
ANR	650218	ArgumentList	braceType		649994	1					
ANR	650219	Argument	braceType		649994	0					
ANR	650220	Identifier	braceType		649994	0					
ANR	650221	OrExpression	braceFormatMode == BREAK_MODE || braceFormatMode == LINUX_MODE		649994	1		||			
ANR	650222	EqualityExpression	braceFormatMode == BREAK_MODE		649994	0		==			
ANR	650223	Identifier	braceFormatMode		649994	0					
ANR	650224	Identifier	BREAK_MODE		649994	1					
ANR	650225	EqualityExpression	braceFormatMode == LINUX_MODE		649994	1		==			
ANR	650226	Identifier	braceFormatMode		649994	0					
ANR	650227	Identifier	LINUX_MODE		649994	1					
ANR	650228	CompoundStatement		47:2:1417:1417	649994	1					
ANR	650229	ExpressionStatement	shouldBreakLineAtNextChar = true	4700:3:136351:136383	649994	0	True				
ANR	650230	AssignmentExpression	shouldBreakLineAtNextChar = true		649994	0		=			
ANR	650231	Identifier	shouldBreakLineAtNextChar		649994	0					
ANR	650232	Identifier	true		649994	1					
ANR	650233	ElseStatement	else		649994	0					
ANR	650234	CompoundStatement		52:1:1489:1489	649994	0					
ANR	650235	IfStatement	if ( isCharImmediatelyPostComment || isCharImmediatelyPostLineComment )		649994	0					
ANR	650236	Condition	isCharImmediatelyPostComment || isCharImmediatelyPostLineComment	4706:6:136468:136531	649994	0	True				
ANR	650237	OrExpression	isCharImmediatelyPostComment || isCharImmediatelyPostLineComment		649994	0		||			
ANR	650238	Identifier	isCharImmediatelyPostComment		649994	0					
ANR	650239	Identifier	isCharImmediatelyPostLineComment		649994	1					
ANR	650240	CompoundStatement		55:2:1607:1607	649994	1					
ANR	650241	IfStatement	if ( isOkToBreakBlock ( braceType ) && ! ( isCharImmediatelyPostComment && isCharImmediatelyPostLineComment ) && ! isImmediatelyPostPreprocessor && previousCommandChar != '{' && previousCommandChar != '}' && previousCommandChar != ';' )		649994	0					
ANR	650242	Condition	isOkToBreakBlock ( braceType ) && ! ( isCharImmediatelyPostComment && isCharImmediatelyPostLineComment ) && ! isImmediatelyPostPreprocessor && previousCommandChar != '{' && previousCommandChar != '}' && previousCommandChar != ';'	4708:7:136545:136989	649994	0	True				
ANR	650243	AndExpression	isOkToBreakBlock ( braceType ) && ! ( isCharImmediatelyPostComment && isCharImmediatelyPostLineComment ) && ! isImmediatelyPostPreprocessor && previousCommandChar != '{' && previousCommandChar != '}' && previousCommandChar != ';'		649994	0		&&			
ANR	650244	CallExpression	isOkToBreakBlock ( braceType )		649994	0					
ANR	650245	Callee	isOkToBreakBlock		649994	0					
ANR	650246	Identifier	isOkToBreakBlock		649994	0					
ANR	650247	ArgumentList	braceType		649994	1					
ANR	650248	Argument	braceType		649994	0					
ANR	650249	Identifier	braceType		649994	0					
ANR	650250	AndExpression	! ( isCharImmediatelyPostComment && isCharImmediatelyPostLineComment ) && ! isImmediatelyPostPreprocessor && previousCommandChar != '{' && previousCommandChar != '}' && previousCommandChar != ';'		649994	1		&&			
ANR	650251	UnaryOperationExpression	! ( isCharImmediatelyPostComment && isCharImmediatelyPostLineComment )		649994	0					
ANR	650252	UnaryOperator	!		649994	0					
ANR	650253	AndExpression	isCharImmediatelyPostComment && isCharImmediatelyPostLineComment		649994	1		&&			
ANR	650254	Identifier	isCharImmediatelyPostComment		649994	0					
ANR	650255	Identifier	isCharImmediatelyPostLineComment		649994	1					
ANR	650256	AndExpression	! isImmediatelyPostPreprocessor && previousCommandChar != '{' && previousCommandChar != '}' && previousCommandChar != ';'		649994	1		&&			
ANR	650257	UnaryOperationExpression	! isImmediatelyPostPreprocessor		649994	0					
ANR	650258	UnaryOperator	!		649994	0					
ANR	650259	Identifier	isImmediatelyPostPreprocessor		649994	1					
ANR	650260	AndExpression	previousCommandChar != '{' && previousCommandChar != '}' && previousCommandChar != ';'		649994	1		&&			
ANR	650261	EqualityExpression	previousCommandChar != '{'		649994	0		!=			
ANR	650262	Identifier	previousCommandChar		649994	0					
ANR	650263	PrimaryExpression	'{'		649994	1					
ANR	650264	AndExpression	previousCommandChar != '}' && previousCommandChar != ';'		649994	1		&&			
ANR	650265	EqualityExpression	previousCommandChar != '}'		649994	0		!=			
ANR	650266	Identifier	previousCommandChar		649994	0					
ANR	650267	PrimaryExpression	'}'		649994	1					
ANR	650268	EqualityExpression	previousCommandChar != ';'		649994	1		!=			
ANR	650269	Identifier	previousCommandChar		649994	0					
ANR	650270	PrimaryExpression	';'		649994	1					
ANR	650271	CompoundStatement		63:3:2086:2086	649994	1					
ANR	650272	ExpressionStatement	appendCharInsideComments ( )	4716:4:137021:137047	649994	0	True				
ANR	650273	CallExpression	appendCharInsideComments ( )		649994	0					
ANR	650274	Callee	appendCharInsideComments		649994	0					
ANR	650275	Identifier	appendCharInsideComments		649994	0					
ANR	650276	ArgumentList			649994	1					
ANR	650277	ElseStatement	else		649994	0					
ANR	650278	CompoundStatement		67:3:2136:2136	649994	0					
ANR	650279	ExpressionStatement	appendCurrentChar ( )	4720:4:137071:137090	649994	0	True				
ANR	650280	CallExpression	appendCurrentChar ( )		649994	0					
ANR	650281	Callee	appendCurrentChar		649994	0					
ANR	650282	Identifier	appendCurrentChar		649994	0					
ANR	650283	ArgumentList			649994	1					
ANR	650284	ElseStatement	else		649994	0					
ANR	650285	IfStatement	if ( previousCommandChar == '{' || ( previousCommandChar == '}' && ! isInClassInitializer ) || previousCommandChar == ';' )		649994	0					
ANR	650286	Condition	previousCommandChar == '{' || ( previousCommandChar == '}' && ! isInClassInitializer ) || previousCommandChar == ';'	4723:11:137131:137265	649994	0	True				
ANR	650287	OrExpression	previousCommandChar == '{' || ( previousCommandChar == '}' && ! isInClassInitializer ) || previousCommandChar == ';'		649994	0		||			
ANR	650288	EqualityExpression	previousCommandChar == '{'		649994	0		==			
ANR	650289	Identifier	previousCommandChar		649994	0					
ANR	650290	PrimaryExpression	'{'		649994	1					
ANR	650291	OrExpression	( previousCommandChar == '}' && ! isInClassInitializer ) || previousCommandChar == ';'		649994	1		||			
ANR	650292	AndExpression	previousCommandChar == '}' && ! isInClassInitializer		649994	0		&&			
ANR	650293	EqualityExpression	previousCommandChar == '}'		649994	0		==			
ANR	650294	Identifier	previousCommandChar		649994	0					
ANR	650295	PrimaryExpression	'}'		649994	1					
ANR	650296	UnaryOperationExpression	! isInClassInitializer		649994	1					
ANR	650297	UnaryOperator	!		649994	0					
ANR	650298	Identifier	isInClassInitializer		649994	1					
ANR	650299	EqualityExpression	previousCommandChar == ';'		649994	1		==			
ANR	650300	Identifier	previousCommandChar		649994	0					
ANR	650301	PrimaryExpression	';'		649994	1					
ANR	650302	CompoundStatement		74:2:2425:2425	649994	1					
ANR	650303	ExpressionStatement	appendCurrentChar ( )	4727:3:137359:137378	649994	0	True				
ANR	650304	CallExpression	appendCurrentChar ( )		649994	0					
ANR	650305	Callee	appendCurrentChar		649994	0					
ANR	650306	Identifier	appendCurrentChar		649994	0					
ANR	650307	ArgumentList			649994	1					
ANR	650308	ElseStatement	else		649994	0					
ANR	650309	CompoundStatement		78:2:2484:2484	649994	0					
ANR	650310	IfStatement	if ( isEmptyLine ( formattedLine ) )		649994	0					
ANR	650311	Condition	isEmptyLine ( formattedLine )	4732:7:137471:137496	649994	0	True				
ANR	650312	CallExpression	isEmptyLine ( formattedLine )		649994	0					
ANR	650313	Callee	isEmptyLine		649994	0					
ANR	650314	Identifier	isEmptyLine		649994	0					
ANR	650315	ArgumentList	formattedLine		649994	1					
ANR	650316	Argument	formattedLine		649994	0					
ANR	650317	Identifier	formattedLine		649994	0					
ANR	650318	ExpressionStatement	appendCurrentChar ( )	4733:4:137503:137522	649994	1	True				
ANR	650319	CallExpression	appendCurrentChar ( )		649994	0					
ANR	650320	Callee	appendCurrentChar		649994	0					
ANR	650321	Identifier	appendCurrentChar		649994	0					
ANR	650322	ArgumentList			649994	1					
ANR	650323	ElseStatement	else		649994	0					
ANR	650324	IfStatement	if ( isOkToBreakBlock ( braceType ) && ! ( isImmediatelyPostPreprocessor && currentLineBeginsWithBrace ) )		649994	0					
ANR	650325	Condition	isOkToBreakBlock ( braceType ) && ! ( isImmediatelyPostPreprocessor && currentLineBeginsWithBrace )	4734:12:137555:137676	649994	0	True				
ANR	650326	AndExpression	isOkToBreakBlock ( braceType ) && ! ( isImmediatelyPostPreprocessor && currentLineBeginsWithBrace )		649994	0		&&			
ANR	650327	CallExpression	isOkToBreakBlock ( braceType )		649994	0					
ANR	650328	Callee	isOkToBreakBlock		649994	0					
ANR	650329	Identifier	isOkToBreakBlock		649994	0					
ANR	650330	ArgumentList	braceType		649994	1					
ANR	650331	Argument	braceType		649994	0					
ANR	650332	Identifier	braceType		649994	0					
ANR	650333	UnaryOperationExpression	! ( isImmediatelyPostPreprocessor && currentLineBeginsWithBrace )		649994	1					
ANR	650334	UnaryOperator	!		649994	0					
ANR	650335	AndExpression	isImmediatelyPostPreprocessor && currentLineBeginsWithBrace		649994	1		&&			
ANR	650336	Identifier	isImmediatelyPostPreprocessor		649994	0					
ANR	650337	Identifier	currentLineBeginsWithBrace		649994	1					
ANR	650338	CompoundStatement		85:3:2753:2753	649994	1					
ANR	650339	IfStatement	"if ( ! isBraceType ( braceType , EMPTY_BLOCK_TYPE ) )"		649994	0					
ANR	650340	Condition	"! isBraceType ( braceType , EMPTY_BLOCK_TYPE )"	4738:8:137692:137732	649994	0	True				
ANR	650341	UnaryOperationExpression	"! isBraceType ( braceType , EMPTY_BLOCK_TYPE )"		649994	0					
ANR	650342	UnaryOperator	!		649994	0					
ANR	650343	CallExpression	"isBraceType ( braceType , EMPTY_BLOCK_TYPE )"		649994	1					
ANR	650344	Callee	isBraceType		649994	0					
ANR	650345	Identifier	isBraceType		649994	0					
ANR	650346	ArgumentList	braceType		649994	1					
ANR	650347	Argument	braceType		649994	0					
ANR	650348	Identifier	braceType		649994	0					
ANR	650349	Argument	EMPTY_BLOCK_TYPE		649994	1					
ANR	650350	Identifier	EMPTY_BLOCK_TYPE		649994	0					
ANR	650351	CompoundStatement		87:4:2810:2810	649994	1					
ANR	650352	ExpressionStatement	appendSpacePad ( )	4740:5:137746:137762	649994	0	True				
ANR	650353	CallExpression	appendSpacePad ( )		649994	0					
ANR	650354	Callee	appendSpacePad		649994	0					
ANR	650355	Identifier	appendSpacePad		649994	0					
ANR	650356	ArgumentList			649994	1					
ANR	650357	ExpressionStatement	appendCurrentChar ( false )	4741:5:137769:137793	649994	1	True				
ANR	650358	CallExpression	appendCurrentChar ( false )		649994	0					
ANR	650359	Callee	appendCurrentChar		649994	0					
ANR	650360	Identifier	appendCurrentChar		649994	0					
ANR	650361	ArgumentList	false		649994	1					
ANR	650362	Argument	false		649994	0					
ANR	650363	Identifier	false		649994	0					
ANR	650364	ExpressionStatement	testForTimeToSplitFormattedLine ( )	4742:5:137819:137852	649994	2	True				
ANR	650365	CallExpression	testForTimeToSplitFormattedLine ( )		649994	0					
ANR	650366	Callee	testForTimeToSplitFormattedLine		649994	0					
ANR	650367	Identifier	testForTimeToSplitFormattedLine		649994	0					
ANR	650368	ArgumentList			649994	1					
ANR	650369	IfStatement	if ( isBeforeComment ( ) && ! isBeforeMultipleLineEndComments ( charNum ) && ( ! isBeforeAnyLineEndComment ( charNum ) || currentLineBeginsWithBrace ) )		649994	3					
ANR	650370	Condition	isBeforeComment ( ) && ! isBeforeMultipleLineEndComments ( charNum ) && ( ! isBeforeAnyLineEndComment ( charNum ) || currentLineBeginsWithBrace )	4745:9:138003:138161	649994	0	True				
ANR	650371	AndExpression	isBeforeComment ( ) && ! isBeforeMultipleLineEndComments ( charNum ) && ( ! isBeforeAnyLineEndComment ( charNum ) || currentLineBeginsWithBrace )		649994	0		&&			
ANR	650372	CallExpression	isBeforeComment ( )		649994	0					
ANR	650373	Callee	isBeforeComment		649994	0					
ANR	650374	Identifier	isBeforeComment		649994	0					
ANR	650375	ArgumentList			649994	1					
ANR	650376	AndExpression	! isBeforeMultipleLineEndComments ( charNum ) && ( ! isBeforeAnyLineEndComment ( charNum ) || currentLineBeginsWithBrace )		649994	1		&&			
ANR	650377	UnaryOperationExpression	! isBeforeMultipleLineEndComments ( charNum )		649994	0					
ANR	650378	UnaryOperator	!		649994	0					
ANR	650379	CallExpression	isBeforeMultipleLineEndComments ( charNum )		649994	1					
ANR	650380	Callee	isBeforeMultipleLineEndComments		649994	0					
ANR	650381	Identifier	isBeforeMultipleLineEndComments		649994	0					
ANR	650382	ArgumentList	charNum		649994	1					
ANR	650383	Argument	charNum		649994	0					
ANR	650384	Identifier	charNum		649994	0					
ANR	650385	OrExpression	! isBeforeAnyLineEndComment ( charNum ) || currentLineBeginsWithBrace		649994	1		||			
ANR	650386	UnaryOperationExpression	! isBeforeAnyLineEndComment ( charNum )		649994	0					
ANR	650387	UnaryOperator	!		649994	0					
ANR	650388	CallExpression	isBeforeAnyLineEndComment ( charNum )		649994	1					
ANR	650389	Callee	isBeforeAnyLineEndComment		649994	0					
ANR	650390	Identifier	isBeforeAnyLineEndComment		649994	0					
ANR	650391	ArgumentList	charNum		649994	1					
ANR	650392	Argument	charNum		649994	0					
ANR	650393	Identifier	charNum		649994	0					
ANR	650394	Identifier	currentLineBeginsWithBrace		649994	1					
ANR	650395	CompoundStatement		96:5:3240:3240	649994	1					
ANR	650396	ExpressionStatement	shouldBreakLineAtNextChar = true	4749:6:138177:138209	649994	0	True				
ANR	650397	AssignmentExpression	shouldBreakLineAtNextChar = true		649994	0		=			
ANR	650398	Identifier	shouldBreakLineAtNextChar		649994	0					
ANR	650399	Identifier	true		649994	1					
ANR	650400	ExpressionStatement	"currentLine . insert ( charNum + 1 , charNum + 1 , ' ' )"	4750:6:138217:138266	649994	1	True				
ANR	650401	CallExpression	"currentLine . insert ( charNum + 1 , charNum + 1 , ' ' )"		649994	0					
ANR	650402	Callee	currentLine . insert		649994	0					
ANR	650403	MemberAccess	currentLine . insert		649994	0					
ANR	650404	Identifier	currentLine		649994	0					
ANR	650405	Identifier	insert		649994	1					
ANR	650406	ArgumentList	charNum + 1		649994	1					
ANR	650407	Argument	charNum + 1		649994	0					
ANR	650408	AdditiveExpression	charNum + 1		649994	0		+			
ANR	650409	Identifier	charNum		649994	0					
ANR	650410	PrimaryExpression	1		649994	1					
ANR	650411	Argument	charNum + 1		649994	1					
ANR	650412	AdditiveExpression	charNum + 1		649994	0		+			
ANR	650413	Identifier	charNum		649994	0					
ANR	650414	PrimaryExpression	1		649994	1					
ANR	650415	Argument	' '		649994	2					
ANR	650416	PrimaryExpression	' '		649994	0					
ANR	650417	ElseStatement	else		649994	0					
ANR	650418	IfStatement	if ( ! isBeforeAnyComment ( ) )		649994	0					
ANR	650419	Condition	! isBeforeAnyComment ( )	4752:14:138289:138309	649994	0	True				
ANR	650420	UnaryOperationExpression	! isBeforeAnyComment ( )		649994	0					
ANR	650421	UnaryOperator	!		649994	0					
ANR	650422	CallExpression	isBeforeAnyComment ( )		649994	1					
ANR	650423	Callee	isBeforeAnyComment		649994	0					
ANR	650424	Identifier	isBeforeAnyComment		649994	0					
ANR	650425	ArgumentList			649994	1					
ANR	650426	CompoundStatement		101:5:3414:3414	649994	1					
ANR	650427	ExpressionStatement	shouldBreakLineAtNextChar = true	4754:6:138351:138383	649994	0	True				
ANR	650428	AssignmentExpression	shouldBreakLineAtNextChar = true		649994	0		=			
ANR	650429	Identifier	shouldBreakLineAtNextChar		649994	0					
ANR	650430	Identifier	true		649994	1					
ANR	650431	ElseStatement	else		649994	0					
ANR	650432	CompoundStatement		106:4:3482:3482	649994	0					
ANR	650433	IfStatement	if ( currentLineBeginsWithBrace && charNum == ( int ) currentLineFirstBraceNum )		649994	0					
ANR	650434	Condition	currentLineBeginsWithBrace && charNum == ( int ) currentLineFirstBraceNum	4759:9:138422:138492	649994	0	True				
ANR	650435	AndExpression	currentLineBeginsWithBrace && charNum == ( int ) currentLineFirstBraceNum		649994	0		&&			
ANR	650436	Identifier	currentLineBeginsWithBrace		649994	0					
ANR	650437	EqualityExpression	charNum == ( int ) currentLineFirstBraceNum		649994	1		==			
ANR	650438	Identifier	charNum		649994	0					
ANR	650439	CastExpression	( int ) currentLineFirstBraceNum		649994	1					
ANR	650440	CastTarget	int		649994	0					
ANR	650441	Identifier	currentLineFirstBraceNum		649994	1					
ANR	650442	CompoundStatement		108:5:3571:3571	649994	1					
ANR	650443	ExpressionStatement	appendSpacePad ( )	4761:6:138508:138524	649994	0	True				
ANR	650444	CallExpression	appendSpacePad ( )		649994	0					
ANR	650445	Callee	appendSpacePad		649994	0					
ANR	650446	Identifier	appendSpacePad		649994	0					
ANR	650447	ArgumentList			649994	1					
ANR	650448	ExpressionStatement	appendCurrentChar ( false )	4762:6:138532:138556	649994	1	True				
ANR	650449	CallExpression	appendCurrentChar ( false )		649994	0					
ANR	650450	Callee	appendCurrentChar		649994	0					
ANR	650451	Identifier	appendCurrentChar		649994	0					
ANR	650452	ArgumentList	false		649994	1					
ANR	650453	Argument	false		649994	0					
ANR	650454	Identifier	false		649994	0					
ANR	650455	ExpressionStatement	shouldBreakLineAtNextChar = true	4763:6:138575:138607	649994	2	True				
ANR	650456	AssignmentExpression	shouldBreakLineAtNextChar = true		649994	0		=			
ANR	650457	Identifier	shouldBreakLineAtNextChar		649994	0					
ANR	650458	Identifier	true		649994	1					
ANR	650459	ElseStatement	else		649994	0					
ANR	650460	CompoundStatement		114:5:3702:3702	649994	0					
ANR	650461	ExpressionStatement	appendSpacePad ( )	4767:6:138639:138655	649994	0	True				
ANR	650462	CallExpression	appendSpacePad ( )		649994	0					
ANR	650463	Callee	appendSpacePad		649994	0					
ANR	650464	Identifier	appendSpacePad		649994	0					
ANR	650465	ArgumentList			649994	1					
ANR	650466	ExpressionStatement	appendCurrentChar ( )	4768:6:138663:138682	649994	1	True				
ANR	650467	CallExpression	appendCurrentChar ( )		649994	0					
ANR	650468	Callee	appendCurrentChar		649994	0					
ANR	650469	Identifier	appendCurrentChar		649994	0					
ANR	650470	ArgumentList			649994	1					
ANR	650471	ElseStatement	else		649994	0					
ANR	650472	CompoundStatement		121:3:3801:3801	649994	0					
ANR	650473	IfStatement	if ( ! isInLineBreak )		649994	0					
ANR	650474	Condition	! isInLineBreak	4774:8:138740:138753	649994	0	True				
ANR	650475	UnaryOperationExpression	! isInLineBreak		649994	0					
ANR	650476	UnaryOperator	!		649994	0					
ANR	650477	Identifier	isInLineBreak		649994	1					
ANR	650478	ExpressionStatement	appendSpacePad ( )	4775:5:138761:138777	649994	1	True				
ANR	650479	CallExpression	appendSpacePad ( )		649994	0					
ANR	650480	Callee	appendSpacePad		649994	0					
ANR	650481	Identifier	appendSpacePad		649994	0					
ANR	650482	ArgumentList			649994	1					
ANR	650483	ExpressionStatement	appendCurrentChar ( )	4776:4:138783:138802	649994	1	True				
ANR	650484	CallExpression	appendCurrentChar ( )		649994	0					
ANR	650485	Callee	appendCurrentChar		649994	0					
ANR	650486	Identifier	appendCurrentChar		649994	0					
ANR	650487	ArgumentList			649994	1					
ANR	650488	ReturnType	void		649994	1					
ANR	650489	Identifier	ASFormatter :: formatOpeningBrace		649994	2					
ANR	650490	ParameterList	BraceType braceType		649994	3					
ANR	650491	Parameter	BraceType braceType	4652:37:134907:134925	649994	0	True				
ANR	650492	ParameterType	BraceType		649994	0					
ANR	650493	Identifier	braceType		649994	1					
ANR	650494	CFGEntryNode	ENTRY		649994		True				
ANR	650495	CFGExitNode	EXIT		649994		True				
ANR	650496	Symbol	isEmptyLine		649994						
ANR	650497	Symbol	* formattedLine		649994						
ANR	650498	Symbol	shouldBreakOneLineBlocks		649994						
ANR	650499	Symbol	isCharImmediatelyPostComment		649994						
ANR	650500	Symbol	parenStack -> size		649994						
ANR	650501	Symbol	EMPTY_BLOCK_TYPE		649994						
ANR	650502	Symbol	LINUX_MODE		649994						
ANR	650503	Symbol	isBeforeAnyLineEndComment		649994						
ANR	650504	Symbol	* currentLine		649994						
ANR	650505	Symbol	isBeforeMultipleLineEndComments		649994						
ANR	650506	Symbol	isBeforeAnyComment		649994						
ANR	650507	Symbol	braceType		649994						
ANR	650508	Symbol	SINGLE_LINE_TYPE		649994						
ANR	650509	Symbol	BREAK_MODE		649994						
ANR	650510	Symbol	isCharImmediatelyPostLineComment		649994						
ANR	650511	Symbol	BREAK_BLOCK_TYPE		649994						
ANR	650512	Symbol	isBraceType		649994						
ANR	650513	Symbol	isOkToBreakBlock		649994						
ANR	650514	Symbol	charNum		649994						
ANR	650515	Symbol	currentLine		649994						
ANR	650516	Symbol	currentChar		649994						
ANR	650517	Symbol	shouldBreakLineAtNextChar		649994						
ANR	650518	Symbol	currentLineBeginsWithBrace		649994						
ANR	650519	Symbol	breakBrace		649994						
ANR	650520	Symbol	isInLineBreak		649994						
ANR	650521	Symbol	ARRAY_TYPE		649994						
ANR	650522	Symbol	rtrim		649994						
ANR	650523	Symbol	false		649994						
ANR	650524	Symbol	previousCommandChar		649994						
ANR	650525	Symbol	appendOpeningBrace		649994						
ANR	650526	Symbol	formattedLine		649994						
ANR	650527	Symbol	isInClassInitializer		649994						
ANR	650528	Symbol	isBeforeComment		649994						
ANR	650529	Symbol	* charNum		649994						
ANR	650530	Symbol	formattedLine . length		649994						
ANR	650531	Symbol	isCurrentBraceBroken		649994						
ANR	650532	Symbol	* parenStack		649994						
ANR	650533	Symbol	true		649994						
ANR	650534	Symbol	parenStack		649994						
ANR	650535	Symbol	braceFormatMode		649994						
ANR	650536	Symbol	isImmediatelyPostPreprocessor		649994						
ANR	650537	Symbol	currentLineFirstBraceNum		649994						
ANR	650538	Function	ASFormatter :: formatClosingBrace	4789:0:139067:141404							
ANR	650539	FunctionDef	ASFormatter :: formatClosingBrace (BraceType braceType)		650538	0					
ANR	650540	CompoundStatement		4790:0:139125:141404	650538	0					
ANR	650541	ExpressionStatement	"assert ( ! isBraceType ( braceType , ARRAY_TYPE ) )"	4791:1:139128:139171	650538	0	True				
ANR	650542	CallExpression	"assert ( ! isBraceType ( braceType , ARRAY_TYPE ) )"		650538	0					
ANR	650543	Callee	assert		650538	0					
ANR	650544	Identifier	assert		650538	0					
ANR	650545	ArgumentList	"! isBraceType ( braceType , ARRAY_TYPE )"		650538	1					
ANR	650546	Argument	"! isBraceType ( braceType , ARRAY_TYPE )"		650538	0					
ANR	650547	UnaryOperationExpression	"! isBraceType ( braceType , ARRAY_TYPE )"		650538	0					
ANR	650548	UnaryOperator	!		650538	0					
ANR	650549	CallExpression	"isBraceType ( braceType , ARRAY_TYPE )"		650538	1					
ANR	650550	Callee	isBraceType		650538	0					
ANR	650551	Identifier	isBraceType		650538	0					
ANR	650552	ArgumentList	braceType		650538	1					
ANR	650553	Argument	braceType		650538	0					
ANR	650554	Identifier	braceType		650538	0					
ANR	650555	Argument	ARRAY_TYPE		650538	1					
ANR	650556	Identifier	ARRAY_TYPE		650538	0					
ANR	650557	ExpressionStatement	assert ( currentChar == '}' )	4792:1:139174:139200	650538	1	True				
ANR	650558	CallExpression	assert ( currentChar == '}' )		650538	0					
ANR	650559	Callee	assert		650538	0					
ANR	650560	Identifier	assert		650538	0					
ANR	650561	ArgumentList	currentChar == '}'		650538	1					
ANR	650562	Argument	currentChar == '}'		650538	0					
ANR	650563	EqualityExpression	currentChar == '}'		650538	0		==			
ANR	650564	Identifier	currentChar		650538	0					
ANR	650565	PrimaryExpression	'}'		650538	1					
ANR	650566	IfStatement	if ( parenStack -> size ( ) > 1 )		650538	2					
ANR	650567	Condition	parenStack -> size ( ) > 1	4795:5:139246:139267	650538	0	True				
ANR	650568	RelationalExpression	parenStack -> size ( ) > 1		650538	0		>			
ANR	650569	CallExpression	parenStack -> size ( )		650538	0					
ANR	650570	Callee	parenStack -> size		650538	0					
ANR	650571	PtrMemberAccess	parenStack -> size		650538	0					
ANR	650572	Identifier	parenStack		650538	0					
ANR	650573	Identifier	size		650538	1					
ANR	650574	ArgumentList			650538	1					
ANR	650575	PrimaryExpression	1		650538	1					
ANR	650576	ExpressionStatement	parenStack -> pop_back ( )	4796:2:139272:139294	650538	1	True				
ANR	650577	CallExpression	parenStack -> pop_back ( )		650538	0					
ANR	650578	Callee	parenStack -> pop_back		650538	0					
ANR	650579	PtrMemberAccess	parenStack -> pop_back		650538	0					
ANR	650580	Identifier	parenStack		650538	0					
ANR	650581	Identifier	pop_back		650538	1					
ANR	650582	ArgumentList			650538	1					
ANR	650583	IfStatement	if ( previousCommandChar == '{' )		650538	3					
ANR	650584	Condition	previousCommandChar == '{'	4800:5:139460:139485	650538	0	True				
ANR	650585	EqualityExpression	previousCommandChar == '{'		650538	0		==			
ANR	650586	Identifier	previousCommandChar		650538	0					
ANR	650587	PrimaryExpression	'{'		650538	1					
ANR	650588	ExpressionStatement	isImmediatelyPostEmptyBlock = true	4801:2:139490:139524	650538	1	True				
ANR	650589	AssignmentExpression	isImmediatelyPostEmptyBlock = true		650538	0		=			
ANR	650590	Identifier	isImmediatelyPostEmptyBlock		650538	0					
ANR	650591	Identifier	true		650538	1					
ANR	650592	IfStatement	if ( attachClosingBraceMode )		650538	4					
ANR	650593	Condition	attachClosingBraceMode	4803:5:139532:139553	650538	0	True				
ANR	650594	Identifier	attachClosingBraceMode		650538	0					
ANR	650595	CompoundStatement		15:1:431:431	650538	1					
ANR	650596	IfStatement	"if ( ( isEmptyLine ( formattedLine ) || isCharImmediatelyPostLineComment || isCharImmediatelyPostComment || ( isImmediatelyPostPreprocessor && ( int ) currentLine . find_first_not_of ( "" \\t"" ) == charNum ) ) && ( ! isBraceType ( braceType , SINGLE_LINE_TYPE ) || isOkToBreakBlock ( braceType ) ) )"		650538	0					
ANR	650597	Condition	"( isEmptyLine ( formattedLine ) || isCharImmediatelyPostLineComment || isCharImmediatelyPostComment || ( isImmediatelyPostPreprocessor && ( int ) currentLine . find_first_not_of ( "" \\t"" ) == charNum ) ) && ( ! isBraceType ( braceType , SINGLE_LINE_TYPE ) || isOkToBreakBlock ( braceType ) )"	4806:6:139656:140229	650538	0	True				
ANR	650598	AndExpression	"( isEmptyLine ( formattedLine ) || isCharImmediatelyPostLineComment || isCharImmediatelyPostComment || ( isImmediatelyPostPreprocessor && ( int ) currentLine . find_first_not_of ( "" \\t"" ) == charNum ) ) && ( ! isBraceType ( braceType , SINGLE_LINE_TYPE ) || isOkToBreakBlock ( braceType ) )"		650538	0		&&			
ANR	650599	OrExpression	"isEmptyLine ( formattedLine ) || isCharImmediatelyPostLineComment || isCharImmediatelyPostComment || ( isImmediatelyPostPreprocessor && ( int ) currentLine . find_first_not_of ( "" \\t"" ) == charNum )"		650538	0		||			
ANR	650600	CallExpression	isEmptyLine ( formattedLine )		650538	0					
ANR	650601	Callee	isEmptyLine		650538	0					
ANR	650602	Identifier	isEmptyLine		650538	0					
ANR	650603	ArgumentList	formattedLine		650538	1					
ANR	650604	Argument	formattedLine		650538	0					
ANR	650605	Identifier	formattedLine		650538	0					
ANR	650606	OrExpression	"isCharImmediatelyPostLineComment || isCharImmediatelyPostComment || ( isImmediatelyPostPreprocessor && ( int ) currentLine . find_first_not_of ( "" \\t"" ) == charNum )"		650538	1		||			
ANR	650607	Identifier	isCharImmediatelyPostLineComment		650538	0					
ANR	650608	OrExpression	"isCharImmediatelyPostComment || ( isImmediatelyPostPreprocessor && ( int ) currentLine . find_first_not_of ( "" \\t"" ) == charNum )"		650538	1		||			
ANR	650609	Identifier	isCharImmediatelyPostComment		650538	0					
ANR	650610	AndExpression	"isImmediatelyPostPreprocessor && ( int ) currentLine . find_first_not_of ( "" \\t"" ) == charNum"		650538	1		&&			
ANR	650611	Identifier	isImmediatelyPostPreprocessor		650538	0					
ANR	650612	EqualityExpression	"( int ) currentLine . find_first_not_of ( "" \\t"" ) == charNum"		650538	1		==			
ANR	650613	CastExpression	"( int ) currentLine . find_first_not_of ( "" \\t"" )"		650538	0					
ANR	650614	CastTarget	int		650538	0					
ANR	650615	CallExpression	"currentLine . find_first_not_of ( "" \\t"" )"		650538	1					
ANR	650616	Callee	currentLine . find_first_not_of		650538	0					
ANR	650617	MemberAccess	currentLine . find_first_not_of		650538	0					
ANR	650618	Identifier	currentLine		650538	0					
ANR	650619	Identifier	find_first_not_of		650538	1					
ANR	650620	ArgumentList	""" \\t"""		650538	1					
ANR	650621	Argument	""" \\t"""		650538	0					
ANR	650622	PrimaryExpression	""" \\t"""		650538	0					
ANR	650623	Identifier	charNum		650538	1					
ANR	650624	OrExpression	"! isBraceType ( braceType , SINGLE_LINE_TYPE ) || isOkToBreakBlock ( braceType )"		650538	1		||			
ANR	650625	UnaryOperationExpression	"! isBraceType ( braceType , SINGLE_LINE_TYPE )"		650538	0					
ANR	650626	UnaryOperator	!		650538	0					
ANR	650627	CallExpression	"isBraceType ( braceType , SINGLE_LINE_TYPE )"		650538	1					
ANR	650628	Callee	isBraceType		650538	0					
ANR	650629	Identifier	isBraceType		650538	0					
ANR	650630	ArgumentList	braceType		650538	1					
ANR	650631	Argument	braceType		650538	0					
ANR	650632	Identifier	braceType		650538	0					
ANR	650633	Argument	SINGLE_LINE_TYPE		650538	1					
ANR	650634	Identifier	SINGLE_LINE_TYPE		650538	0					
ANR	650635	CallExpression	isOkToBreakBlock ( braceType )		650538	1					
ANR	650636	Callee	isOkToBreakBlock		650538	0					
ANR	650637	Identifier	isOkToBreakBlock		650538	0					
ANR	650638	ArgumentList	braceType		650538	1					
ANR	650639	Argument	braceType		650538	0					
ANR	650640	Identifier	braceType		650538	0					
ANR	650641	CompoundStatement		25:2:1108:1108	650538	1					
ANR	650642	ExpressionStatement	breakLine ( )	4815:3:140239:140250	650538	0	True				
ANR	650643	CallExpression	breakLine ( )		650538	0					
ANR	650644	Callee	breakLine		650538	0					
ANR	650645	Identifier	breakLine		650538	0					
ANR	650646	ArgumentList			650538	1					
ANR	650647	ExpressionStatement	appendCurrentChar ( )	4816:3:140255:140274	650538	1	True				
ANR	650648	CallExpression	appendCurrentChar ( )		650538	0					
ANR	650649	Callee	appendCurrentChar		650538	0					
ANR	650650	Identifier	appendCurrentChar		650538	0					
ANR	650651	ArgumentList			650538	1					
ANR	650652	ElseStatement	else		650538	0					
ANR	650653	CompoundStatement		30:2:1182:1182	650538	0					
ANR	650654	IfStatement	"if ( previousNonWSChar != '{' && ( ! isBraceType ( braceType , SINGLE_LINE_TYPE ) || isOkToBreakBlock ( braceType ) ) )"		650538	0					
ANR	650655	Condition	"previousNonWSChar != '{' && ( ! isBraceType ( braceType , SINGLE_LINE_TYPE ) || isOkToBreakBlock ( braceType ) )"	4820:7:140317:140444	650538	0	True				
ANR	650656	AndExpression	"previousNonWSChar != '{' && ( ! isBraceType ( braceType , SINGLE_LINE_TYPE ) || isOkToBreakBlock ( braceType ) )"		650538	0		&&			
ANR	650657	EqualityExpression	previousNonWSChar != '{'		650538	0		!=			
ANR	650658	Identifier	previousNonWSChar		650538	0					
ANR	650659	PrimaryExpression	'{'		650538	1					
ANR	650660	OrExpression	"! isBraceType ( braceType , SINGLE_LINE_TYPE ) || isOkToBreakBlock ( braceType )"		650538	1		||			
ANR	650661	UnaryOperationExpression	"! isBraceType ( braceType , SINGLE_LINE_TYPE )"		650538	0					
ANR	650662	UnaryOperator	!		650538	0					
ANR	650663	CallExpression	"isBraceType ( braceType , SINGLE_LINE_TYPE )"		650538	1					
ANR	650664	Callee	isBraceType		650538	0					
ANR	650665	Identifier	isBraceType		650538	0					
ANR	650666	ArgumentList	braceType		650538	1					
ANR	650667	Argument	braceType		650538	0					
ANR	650668	Identifier	braceType		650538	0					
ANR	650669	Argument	SINGLE_LINE_TYPE		650538	1					
ANR	650670	Identifier	SINGLE_LINE_TYPE		650538	0					
ANR	650671	CallExpression	isOkToBreakBlock ( braceType )		650538	1					
ANR	650672	Callee	isOkToBreakBlock		650538	0					
ANR	650673	Identifier	isOkToBreakBlock		650538	0					
ANR	650674	ArgumentList	braceType		650538	1					
ANR	650675	Argument	braceType		650538	0					
ANR	650676	Identifier	braceType		650538	0					
ANR	650677	ExpressionStatement	appendSpacePad ( )	4823:4:140451:140467	650538	1	True				
ANR	650678	CallExpression	appendSpacePad ( )		650538	0					
ANR	650679	Callee	appendSpacePad		650538	0					
ANR	650680	Identifier	appendSpacePad		650538	0					
ANR	650681	ArgumentList			650538	1					
ANR	650682	ExpressionStatement	appendCurrentChar ( false )	4824:3:140472:140496	650538	1	True				
ANR	650683	CallExpression	appendCurrentChar ( false )		650538	0					
ANR	650684	Callee	appendCurrentChar		650538	0					
ANR	650685	Identifier	appendCurrentChar		650538	0					
ANR	650686	ArgumentList	false		650538	1					
ANR	650687	Argument	false		650538	0					
ANR	650688	Identifier	false		650538	0					
ANR	650689	ElseStatement	else		650538	0					
ANR	650690	IfStatement	"if ( ! isBraceType ( braceType , EMPTY_BLOCK_TYPE ) && ( isBraceType ( braceType , BREAK_BLOCK_TYPE ) || isOkToBreakBlock ( braceType ) ) )"		650538	0					
ANR	650691	Condition	"! isBraceType ( braceType , EMPTY_BLOCK_TYPE ) && ( isBraceType ( braceType , BREAK_BLOCK_TYPE ) || isOkToBreakBlock ( braceType ) )"	4827:10:140527:140668	650538	0	True				
ANR	650692	AndExpression	"! isBraceType ( braceType , EMPTY_BLOCK_TYPE ) && ( isBraceType ( braceType , BREAK_BLOCK_TYPE ) || isOkToBreakBlock ( braceType ) )"		650538	0		&&			
ANR	650693	UnaryOperationExpression	"! isBraceType ( braceType , EMPTY_BLOCK_TYPE )"		650538	0					
ANR	650694	UnaryOperator	!		650538	0					
ANR	650695	CallExpression	"isBraceType ( braceType , EMPTY_BLOCK_TYPE )"		650538	1					
ANR	650696	Callee	isBraceType		650538	0					
ANR	650697	Identifier	isBraceType		650538	0					
ANR	650698	ArgumentList	braceType		650538	1					
ANR	650699	Argument	braceType		650538	0					
ANR	650700	Identifier	braceType		650538	0					
ANR	650701	Argument	EMPTY_BLOCK_TYPE		650538	1					
ANR	650702	Identifier	EMPTY_BLOCK_TYPE		650538	0					
ANR	650703	OrExpression	"isBraceType ( braceType , BREAK_BLOCK_TYPE ) || isOkToBreakBlock ( braceType )"		650538	1		||			
ANR	650704	CallExpression	"isBraceType ( braceType , BREAK_BLOCK_TYPE )"		650538	0					
ANR	650705	Callee	isBraceType		650538	0					
ANR	650706	Identifier	isBraceType		650538	0					
ANR	650707	ArgumentList	braceType		650538	1					
ANR	650708	Argument	braceType		650538	0					
ANR	650709	Identifier	braceType		650538	0					
ANR	650710	Argument	BREAK_BLOCK_TYPE		650538	1					
ANR	650711	Identifier	BREAK_BLOCK_TYPE		650538	0					
ANR	650712	CallExpression	isOkToBreakBlock ( braceType )		650538	1					
ANR	650713	Callee	isOkToBreakBlock		650538	0					
ANR	650714	Identifier	isOkToBreakBlock		650538	0					
ANR	650715	ArgumentList	braceType		650538	1					
ANR	650716	Argument	braceType		650538	0					
ANR	650717	Identifier	braceType		650538	0					
ANR	650718	CompoundStatement		41:1:1546:1546	650538	1					
ANR	650719	ExpressionStatement	breakLine ( )	4831:2:140676:140687	650538	0	True				
ANR	650720	CallExpression	breakLine ( )		650538	0					
ANR	650721	Callee	breakLine		650538	0					
ANR	650722	Identifier	breakLine		650538	0					
ANR	650723	ArgumentList			650538	1					
ANR	650724	ExpressionStatement	appendCurrentChar ( )	4832:2:140691:140710	650538	1	True				
ANR	650725	CallExpression	appendCurrentChar ( )		650538	0					
ANR	650726	Callee	appendCurrentChar		650538	0					
ANR	650727	Identifier	appendCurrentChar		650538	0					
ANR	650728	ArgumentList			650538	1					
ANR	650729	ElseStatement	else		650538	0					
ANR	650730	CompoundStatement		46:1:1596:1596	650538	0					
ANR	650731	ExpressionStatement	appendCurrentChar ( )	4836:2:140726:140745	650538	0	True				
ANR	650732	CallExpression	appendCurrentChar ( )		650538	0					
ANR	650733	Callee	appendCurrentChar		650538	0					
ANR	650734	Identifier	appendCurrentChar		650538	0					
ANR	650735	ArgumentList			650538	1					
ANR	650736	IfStatement	if ( isLegalNameChar ( peekNextChar ( ) ) )		650538	5					
ANR	650737	Condition	isLegalNameChar ( peekNextChar ( ) )	4840:5:140809:140839	650538	0	True				
ANR	650738	CallExpression	isLegalNameChar ( peekNextChar ( ) )		650538	0					
ANR	650739	Callee	isLegalNameChar		650538	0					
ANR	650740	Identifier	isLegalNameChar		650538	0					
ANR	650741	ArgumentList	peekNextChar ( )		650538	1					
ANR	650742	Argument	peekNextChar ( )		650538	0					
ANR	650743	CallExpression	peekNextChar ( )		650538	0					
ANR	650744	Callee	peekNextChar		650538	0					
ANR	650745	Identifier	peekNextChar		650538	0					
ANR	650746	ArgumentList			650538	1					
ANR	650747	ExpressionStatement	appendSpaceAfter ( )	4841:2:140844:140862	650538	1	True				
ANR	650748	CallExpression	appendSpaceAfter ( )		650538	0					
ANR	650749	Callee	appendSpaceAfter		650538	0					
ANR	650750	Identifier	appendSpaceAfter		650538	0					
ANR	650751	ArgumentList			650538	1					
ANR	650752	IfStatement	if ( shouldBreakBlocks && currentHeader != nullptr && ! isHeaderInMultiStatementLine && parenStack -> back ( ) == 0 )		650538	6					
ANR	650753	Condition	shouldBreakBlocks && currentHeader != nullptr && ! isHeaderInMultiStatementLine && parenStack -> back ( ) == 0	4843:5:140870:141001	650538	0	True				
ANR	650754	AndExpression	shouldBreakBlocks && currentHeader != nullptr && ! isHeaderInMultiStatementLine && parenStack -> back ( ) == 0		650538	0		&&			
ANR	650755	Identifier	shouldBreakBlocks		650538	0					
ANR	650756	AndExpression	currentHeader != nullptr && ! isHeaderInMultiStatementLine && parenStack -> back ( ) == 0		650538	1		&&			
ANR	650757	EqualityExpression	currentHeader != nullptr		650538	0		!=			
ANR	650758	Identifier	currentHeader		650538	0					
ANR	650759	Identifier	nullptr		650538	1					
ANR	650760	AndExpression	! isHeaderInMultiStatementLine && parenStack -> back ( ) == 0		650538	1		&&			
ANR	650761	UnaryOperationExpression	! isHeaderInMultiStatementLine		650538	0					
ANR	650762	UnaryOperator	!		650538	0					
ANR	650763	Identifier	isHeaderInMultiStatementLine		650538	1					
ANR	650764	EqualityExpression	parenStack -> back ( ) == 0		650538	1		==			
ANR	650765	CallExpression	parenStack -> back ( )		650538	0					
ANR	650766	Callee	parenStack -> back		650538	0					
ANR	650767	PtrMemberAccess	parenStack -> back		650538	0					
ANR	650768	Identifier	parenStack		650538	0					
ANR	650769	Identifier	back		650538	1					
ANR	650770	ArgumentList			650538	1					
ANR	650771	PrimaryExpression	0		650538	1					
ANR	650772	CompoundStatement		58:1:1879:1879	650538	1					
ANR	650773	IfStatement	if ( currentHeader == & AS_CASE || currentHeader == & AS_DEFAULT )		650538	0					
ANR	650774	Condition	currentHeader == & AS_CASE || currentHeader == & AS_DEFAULT	4848:6:141013:141069	650538	0	True				
ANR	650775	OrExpression	currentHeader == & AS_CASE || currentHeader == & AS_DEFAULT		650538	0		||			
ANR	650776	EqualityExpression	currentHeader == & AS_CASE		650538	0		==			
ANR	650777	Identifier	currentHeader		650538	0					
ANR	650778	UnaryOperationExpression	& AS_CASE		650538	1					
ANR	650779	UnaryOperator	&		650538	0					
ANR	650780	Identifier	AS_CASE		650538	1					
ANR	650781	EqualityExpression	currentHeader == & AS_DEFAULT		650538	1		==			
ANR	650782	Identifier	currentHeader		650538	0					
ANR	650783	UnaryOperationExpression	& AS_DEFAULT		650538	1					
ANR	650784	UnaryOperator	&		650538	0					
ANR	650785	Identifier	AS_DEFAULT		650538	1					
ANR	650786	CompoundStatement		62:3:2027:2090	650538	1					
ANR	650787	IdentifierDeclStatement	string nextText = peekNextText ( currentLine . substr ( charNum + 1 ) ) ;	4851:3:141153:141216	650538	0	True				
ANR	650788	IdentifierDecl	nextText = peekNextText ( currentLine . substr ( charNum + 1 ) )		650538	0					
ANR	650789	IdentifierDeclType	string		650538	0					
ANR	650790	Identifier	nextText		650538	1					
ANR	650791	AssignmentExpression	nextText = peekNextText ( currentLine . substr ( charNum + 1 ) )		650538	2		=			
ANR	650792	Identifier	nextText		650538	0					
ANR	650793	CallExpression	peekNextText ( currentLine . substr ( charNum + 1 ) )		650538	1					
ANR	650794	Callee	peekNextText		650538	0					
ANR	650795	Identifier	peekNextText		650538	0					
ANR	650796	ArgumentList	currentLine . substr ( charNum + 1 )		650538	1					
ANR	650797	Argument	currentLine . substr ( charNum + 1 )		650538	0					
ANR	650798	CallExpression	currentLine . substr ( charNum + 1 )		650538	0					
ANR	650799	Callee	currentLine . substr		650538	0					
ANR	650800	MemberAccess	currentLine . substr		650538	0					
ANR	650801	Identifier	currentLine		650538	0					
ANR	650802	Identifier	substr		650538	1					
ANR	650803	ArgumentList	charNum + 1		650538	1					
ANR	650804	Argument	charNum + 1		650538	0					
ANR	650805	AdditiveExpression	charNum + 1		650538	0		+			
ANR	650806	Identifier	charNum		650538	0					
ANR	650807	PrimaryExpression	1		650538	1					
ANR	650808	IfStatement	"if ( nextText . length ( ) > 0 && nextText . substr ( 0 , 5 ) != ""break"" )"		650538	1					
ANR	650809	Condition	"nextText . length ( ) > 0 && nextText . substr ( 0 , 5 ) != ""break"""	4852:7:141225:141292	650538	0	True				
ANR	650810	AndExpression	"nextText . length ( ) > 0 && nextText . substr ( 0 , 5 ) != ""break"""		650538	0		&&			
ANR	650811	RelationalExpression	nextText . length ( ) > 0		650538	0		>			
ANR	650812	CallExpression	nextText . length ( )		650538	0					
ANR	650813	Callee	nextText . length		650538	0					
ANR	650814	MemberAccess	nextText . length		650538	0					
ANR	650815	Identifier	nextText		650538	0					
ANR	650816	Identifier	length		650538	1					
ANR	650817	ArgumentList			650538	1					
ANR	650818	PrimaryExpression	0		650538	1					
ANR	650819	EqualityExpression	"nextText . substr ( 0 , 5 ) != ""break"""		650538	1		!=			
ANR	650820	CallExpression	"nextText . substr ( 0 , 5 )"		650538	0					
ANR	650821	Callee	nextText . substr		650538	0					
ANR	650822	MemberAccess	nextText . substr		650538	0					
ANR	650823	Identifier	nextText		650538	0					
ANR	650824	Identifier	substr		650538	1					
ANR	650825	ArgumentList	0		650538	1					
ANR	650826	Argument	0		650538	0					
ANR	650827	PrimaryExpression	0		650538	0					
ANR	650828	Argument	5		650538	1					
ANR	650829	PrimaryExpression	5		650538	0					
ANR	650830	PrimaryExpression	"""break"""		650538	1					
ANR	650831	ExpressionStatement	isAppendPostBlockEmptyLineRequested = true	4854:4:141299:141341	650538	1	True				
ANR	650832	AssignmentExpression	isAppendPostBlockEmptyLineRequested = true		650538	0		=			
ANR	650833	Identifier	isAppendPostBlockEmptyLineRequested		650538	0					
ANR	650834	Identifier	true		650538	1					
ANR	650835	ElseStatement	else		650538	0					
ANR	650836	ExpressionStatement	isAppendPostBlockEmptyLineRequested = true	4857:3:141357:141399	650538	0	True				
ANR	650837	AssignmentExpression	isAppendPostBlockEmptyLineRequested = true		650538	0		=			
ANR	650838	Identifier	isAppendPostBlockEmptyLineRequested		650538	0					
ANR	650839	Identifier	true		650538	1					
ANR	650840	ReturnType	void		650538	1					
ANR	650841	Identifier	ASFormatter :: formatClosingBrace		650538	2					
ANR	650842	ParameterList	BraceType braceType		650538	3					
ANR	650843	Parameter	BraceType braceType	4789:37:139104:139122	650538	0	True				
ANR	650844	ParameterType	BraceType		650538	0					
ANR	650845	Identifier	braceType		650538	1					
ANR	650846	CFGEntryNode	ENTRY		650538		True				
ANR	650847	CFGExitNode	EXIT		650538		True				
ANR	650848	Symbol	isEmptyLine		650538						
ANR	650849	Symbol	previousNonWSChar		650538						
ANR	650850	Symbol	isCharImmediatelyPostComment		650538						
ANR	650851	Symbol	parenStack -> size		650538						
ANR	650852	Symbol	EMPTY_BLOCK_TYPE		650538						
ANR	650853	Symbol	isLegalNameChar		650538						
ANR	650854	Symbol	shouldBreakBlocks		650538						
ANR	650855	Symbol	isHeaderInMultiStatementLine		650538						
ANR	650856	Symbol	braceType		650538						
ANR	650857	Symbol	isCharImmediatelyPostLineComment		650538						
ANR	650858	Symbol	SINGLE_LINE_TYPE		650538						
ANR	650859	Symbol	BREAK_BLOCK_TYPE		650538						
ANR	650860	Symbol	nextText . substr		650538						
ANR	650861	Symbol	isBraceType		650538						
ANR	650862	Symbol	currentLine . substr		650538						
ANR	650863	Symbol	isOkToBreakBlock		650538						
ANR	650864	Symbol	charNum		650538						
ANR	650865	Symbol	& AS_CASE		650538						
ANR	650866	Symbol	currentLine		650538						
ANR	650867	Symbol	currentChar		650538						
ANR	650868	Symbol	peekNextChar		650538						
ANR	650869	Symbol	isAppendPostBlockEmptyLineRequested		650538						
ANR	650870	Symbol	nextText		650538						
ANR	650871	Symbol	ARRAY_TYPE		650538						
ANR	650872	Symbol	false		650538						
ANR	650873	Symbol	previousCommandChar		650538						
ANR	650874	Symbol	currentLine . find_first_not_of		650538						
ANR	650875	Symbol	attachClosingBraceMode		650538						
ANR	650876	Symbol	formattedLine		650538						
ANR	650877	Symbol	currentHeader		650538						
ANR	650878	Symbol	isImmediatelyPostEmptyBlock		650538						
ANR	650879	Symbol	parenStack -> back		650538						
ANR	650880	Symbol	nextText . length		650538						
ANR	650881	Symbol	* parenStack		650538						
ANR	650882	Symbol	& AS_DEFAULT		650538						
ANR	650883	Symbol	true		650538						
ANR	650884	Symbol	parenStack		650538						
ANR	650885	Symbol	peekNextText		650538						
ANR	650886	Symbol	isImmediatelyPostPreprocessor		650538						
ANR	650887	Symbol	nullptr		650538						
ANR	650888	Function	ASFormatter :: formatArrayBraces	4871:0:141914:147697							
ANR	650889	FunctionDef	"ASFormatter :: formatArrayBraces (BraceType braceType , bool isOpeningArrayBrace)"		650888	0					
ANR	650890	CompoundStatement		4872:0:141997:147697	650888	0					
ANR	650891	ExpressionStatement	"assert ( isBraceType ( braceType , ARRAY_TYPE ) )"	4873:1:142000:142042	650888	0	True				
ANR	650892	CallExpression	"assert ( isBraceType ( braceType , ARRAY_TYPE ) )"		650888	0					
ANR	650893	Callee	assert		650888	0					
ANR	650894	Identifier	assert		650888	0					
ANR	650895	ArgumentList	"isBraceType ( braceType , ARRAY_TYPE )"		650888	1					
ANR	650896	Argument	"isBraceType ( braceType , ARRAY_TYPE )"		650888	0					
ANR	650897	CallExpression	"isBraceType ( braceType , ARRAY_TYPE )"		650888	0					
ANR	650898	Callee	isBraceType		650888	0					
ANR	650899	Identifier	isBraceType		650888	0					
ANR	650900	ArgumentList	braceType		650888	1					
ANR	650901	Argument	braceType		650888	0					
ANR	650902	Identifier	braceType		650888	0					
ANR	650903	Argument	ARRAY_TYPE		650888	1					
ANR	650904	Identifier	ARRAY_TYPE		650888	0					
ANR	650905	ExpressionStatement	assert ( currentChar == '{' || currentChar == '}' )	4874:1:142045:142093	650888	1	True				
ANR	650906	CallExpression	assert ( currentChar == '{' || currentChar == '}' )		650888	0					
ANR	650907	Callee	assert		650888	0					
ANR	650908	Identifier	assert		650888	0					
ANR	650909	ArgumentList	currentChar == '{' || currentChar == '}'		650888	1					
ANR	650910	Argument	currentChar == '{' || currentChar == '}'		650888	0					
ANR	650911	OrExpression	currentChar == '{' || currentChar == '}'		650888	0		||			
ANR	650912	EqualityExpression	currentChar == '{'		650888	0		==			
ANR	650913	Identifier	currentChar		650888	0					
ANR	650914	PrimaryExpression	'{'		650888	1					
ANR	650915	EqualityExpression	currentChar == '}'		650888	1		==			
ANR	650916	Identifier	currentChar		650888	0					
ANR	650917	PrimaryExpression	'}'		650888	1					
ANR	650918	IfStatement	if ( currentChar == '{' )		650888	2					
ANR	650919	Condition	currentChar == '{'	4876:5:142101:142118	650888	0	True				
ANR	650920	EqualityExpression	currentChar == '{'		650888	0		==			
ANR	650921	Identifier	currentChar		650888	0					
ANR	650922	PrimaryExpression	'{'		650888	1					
ANR	650923	CompoundStatement		6:1:124:124	650888	1					
ANR	650924	IfStatement	if ( isOpeningArrayBrace )		650888	0					
ANR	650925	Condition	isOpeningArrayBrace	4879:6:142181:142199	650888	0	True				
ANR	650926	Identifier	isOpeningArrayBrace		650888	0					
ANR	650927	CompoundStatement		9:2:206:206	650888	1					
ANR	650928	IfStatement	if ( braceFormatMode == ATTACH_MODE || braceFormatMode == LINUX_MODE )		650888	0					
ANR	650929	Condition	braceFormatMode == ATTACH_MODE || braceFormatMode == LINUX_MODE	4881:7:142213:142286	650888	0	True				
ANR	650930	OrExpression	braceFormatMode == ATTACH_MODE || braceFormatMode == LINUX_MODE		650888	0		||			
ANR	650931	EqualityExpression	braceFormatMode == ATTACH_MODE		650888	0		==			
ANR	650932	Identifier	braceFormatMode		650888	0					
ANR	650933	Identifier	ATTACH_MODE		650888	1					
ANR	650934	EqualityExpression	braceFormatMode == LINUX_MODE		650888	1		==			
ANR	650935	Identifier	braceFormatMode		650888	0					
ANR	650936	Identifier	LINUX_MODE		650888	1					
ANR	650937	CompoundStatement		12:3:294:294	650888	1					
ANR	650938	IfStatement	"if ( isBraceType ( braceType , ENUM_TYPE ) && formattingStyle == STYLE_MOZILLA )"		650888	0					
ANR	650939	Condition	"isBraceType ( braceType , ENUM_TYPE ) && formattingStyle == STYLE_MOZILLA"	4885:8:142334:142414	650888	0	True				
ANR	650940	AndExpression	"isBraceType ( braceType , ENUM_TYPE ) && formattingStyle == STYLE_MOZILLA"		650888	0		&&			
ANR	650941	CallExpression	"isBraceType ( braceType , ENUM_TYPE )"		650888	0					
ANR	650942	Callee	isBraceType		650888	0					
ANR	650943	Identifier	isBraceType		650888	0					
ANR	650944	ArgumentList	braceType		650888	1					
ANR	650945	Argument	braceType		650888	0					
ANR	650946	Identifier	braceType		650888	0					
ANR	650947	Argument	ENUM_TYPE		650888	1					
ANR	650948	Identifier	ENUM_TYPE		650888	0					
ANR	650949	EqualityExpression	formattingStyle == STYLE_MOZILLA		650888	1		==			
ANR	650950	Identifier	formattingStyle		650888	0					
ANR	650951	Identifier	STYLE_MOZILLA		650888	1					
ANR	650952	CompoundStatement		16:4:423:423	650888	1					
ANR	650953	ExpressionStatement	isInLineBreak = true	4888:5:142428:142448	650888	0	True				
ANR	650954	AssignmentExpression	isInLineBreak = true		650888	0		=			
ANR	650955	Identifier	isInLineBreak		650888	0					
ANR	650956	Identifier	true		650888	1					
ANR	650957	ExpressionStatement	appendCurrentChar ( )	4889:5:142455:142474	650888	1	True				
ANR	650958	CallExpression	appendCurrentChar ( )		650888	0					
ANR	650959	Callee	appendCurrentChar		650888	0					
ANR	650960	Identifier	appendCurrentChar		650888	0					
ANR	650961	ArgumentList			650888	1					
ANR	650962	ElseStatement	else		650888	0					
ANR	650963	IfStatement	if ( ( isImmediatelyPostPreprocessor || ( formattedLine . length ( ) > 0 && formattedLine [ formattedLine . length ( ) - 1 ] == '\\\\' ) ) && currentLineBeginsWithBrace )		650888	0					
ANR	650964	Condition	( isImmediatelyPostPreprocessor || ( formattedLine . length ( ) > 0 && formattedLine [ formattedLine . length ( ) - 1 ] == '\\\\' ) ) && currentLineBeginsWithBrace	4892:13:142586:142776	650888	0	True				
ANR	650965	AndExpression	( isImmediatelyPostPreprocessor || ( formattedLine . length ( ) > 0 && formattedLine [ formattedLine . length ( ) - 1 ] == '\\\\' ) ) && currentLineBeginsWithBrace		650888	0		&&			
ANR	650966	OrExpression	isImmediatelyPostPreprocessor || ( formattedLine . length ( ) > 0 && formattedLine [ formattedLine . length ( ) - 1 ] == '\\\\' )		650888	0		||			
ANR	650967	Identifier	isImmediatelyPostPreprocessor		650888	0					
ANR	650968	AndExpression	formattedLine . length ( ) > 0 && formattedLine [ formattedLine . length ( ) - 1 ] == '\\\\'		650888	1		&&			
ANR	650969	RelationalExpression	formattedLine . length ( ) > 0		650888	0		>			
ANR	650970	CallExpression	formattedLine . length ( )		650888	0					
ANR	650971	Callee	formattedLine . length		650888	0					
ANR	650972	MemberAccess	formattedLine . length		650888	0					
ANR	650973	Identifier	formattedLine		650888	0					
ANR	650974	Identifier	length		650888	1					
ANR	650975	ArgumentList			650888	1					
ANR	650976	PrimaryExpression	0		650888	1					
ANR	650977	EqualityExpression	formattedLine [ formattedLine . length ( ) - 1 ] == '\\\\'		650888	1		==			
ANR	650978	ArrayIndexing	formattedLine [ formattedLine . length ( ) - 1 ]		650888	0					
ANR	650979	Identifier	formattedLine		650888	0					
ANR	650980	AdditiveExpression	formattedLine . length ( ) - 1		650888	1		-			
ANR	650981	CallExpression	formattedLine . length ( )		650888	0					
ANR	650982	Callee	formattedLine . length		650888	0					
ANR	650983	MemberAccess	formattedLine . length		650888	0					
ANR	650984	Identifier	formattedLine		650888	0					
ANR	650985	Identifier	length		650888	1					
ANR	650986	ArgumentList			650888	1					
ANR	650987	PrimaryExpression	1		650888	1					
ANR	650988	PrimaryExpression	'\\\\'		650888	1					
ANR	650989	Identifier	currentLineBeginsWithBrace		650888	1					
ANR	650990	CompoundStatement		25:4:785:785	650888	1					
ANR	650991	ExpressionStatement	isInLineBreak = true	4897:5:142790:142810	650888	0	True				
ANR	650992	AssignmentExpression	isInLineBreak = true		650888	0		=			
ANR	650993	Identifier	isInLineBreak		650888	0					
ANR	650994	Identifier	true		650888	1					
ANR	650995	ExpressionStatement	appendCurrentChar ( )	4898:5:142817:142836	650888	1	True				
ANR	650996	CallExpression	appendCurrentChar ( )		650888	0					
ANR	650997	Callee	appendCurrentChar		650888	0					
ANR	650998	Identifier	appendCurrentChar		650888	0					
ANR	650999	ArgumentList			650888	1					
ANR	651000	ElseStatement	else		650888	0					
ANR	651001	IfStatement	if ( isCharImmediatelyPostComment )		650888	0					
ANR	651002	Condition	isCharImmediatelyPostComment	4900:13:142888:142915	650888	0	True				
ANR	651003	Identifier	isCharImmediatelyPostComment		650888	0					
ANR	651004	CompoundStatement		30:4:924:924	650888	1					
ANR	651005	ExpressionStatement	appendCurrentChar ( )	4903:5:142976:142995	650888	0	True				
ANR	651006	CallExpression	appendCurrentChar ( )		650888	0					
ANR	651007	Callee	appendCurrentChar		650888	0					
ANR	651008	Identifier	appendCurrentChar		650888	0					
ANR	651009	ArgumentList			650888	1					
ANR	651010	ElseStatement	else		650888	0					
ANR	651011	IfStatement	"if ( isCharImmediatelyPostLineComment && ! isBraceType ( braceType , SINGLE_LINE_TYPE ) )"		650888	0					
ANR	651012	Condition	"isCharImmediatelyPostLineComment && ! isBraceType ( braceType , SINGLE_LINE_TYPE )"	4905:13:143047:143123	650888	0	True				
ANR	651013	AndExpression	"isCharImmediatelyPostLineComment && ! isBraceType ( braceType , SINGLE_LINE_TYPE )"		650888	0		&&			
ANR	651014	Identifier	isCharImmediatelyPostLineComment		650888	0					
ANR	651015	UnaryOperationExpression	"! isBraceType ( braceType , SINGLE_LINE_TYPE )"		650888	1					
ANR	651016	UnaryOperator	!		650888	0					
ANR	651017	CallExpression	"isBraceType ( braceType , SINGLE_LINE_TYPE )"		650888	1					
ANR	651018	Callee	isBraceType		650888	0					
ANR	651019	Identifier	isBraceType		650888	0					
ANR	651020	ArgumentList	braceType		650888	1					
ANR	651021	Argument	braceType		650888	0					
ANR	651022	Identifier	braceType		650888	0					
ANR	651023	Argument	SINGLE_LINE_TYPE		650888	1					
ANR	651024	Identifier	SINGLE_LINE_TYPE		650888	0					
ANR	651025	CompoundStatement		35:4:1132:1132	650888	1					
ANR	651026	ExpressionStatement	appendCharInsideComments ( )	4907:5:143137:143163	650888	0	True				
ANR	651027	CallExpression	appendCharInsideComments ( )		650888	0					
ANR	651028	Callee	appendCharInsideComments		650888	0					
ANR	651029	Identifier	appendCharInsideComments		650888	0					
ANR	651030	ArgumentList			650888	1					
ANR	651031	ElseStatement	else		650888	0					
ANR	651032	CompoundStatement		39:4:1186:1186	650888	0					
ANR	651033	IfStatement	if ( isEmptyLine ( formattedLine ) )		650888	0					
ANR	651034	Condition	isEmptyLine ( formattedLine )	4912:9:143246:143271	650888	0	True				
ANR	651035	CallExpression	isEmptyLine ( formattedLine )		650888	0					
ANR	651036	Callee	isEmptyLine		650888	0					
ANR	651037	Identifier	isEmptyLine		650888	0					
ANR	651038	ArgumentList	formattedLine		650888	1					
ANR	651039	Argument	formattedLine		650888	0					
ANR	651040	Identifier	formattedLine		650888	0					
ANR	651041	ExpressionStatement	appendCurrentChar ( )	4913:6:143280:143299	650888	1	True				
ANR	651042	CallExpression	appendCurrentChar ( )		650888	0					
ANR	651043	Callee	appendCurrentChar		650888	0					
ANR	651044	Identifier	appendCurrentChar		650888	0					
ANR	651045	ArgumentList			650888	1					
ANR	651046	ElseStatement	else		650888	0					
ANR	651047	CompoundStatement		44:5:1345:1345	650888	0					
ANR	651048	IfStatement	"if ( currentLineBeginsWithBrace && ! isBraceType ( braceType , SINGLE_LINE_TYPE ) )"		650888	0					
ANR	651049	Condition	"currentLineBeginsWithBrace && ! isBraceType ( braceType , SINGLE_LINE_TYPE )"	4917:10:143404:143488	650888	0	True				
ANR	651050	AndExpression	"currentLineBeginsWithBrace && ! isBraceType ( braceType , SINGLE_LINE_TYPE )"		650888	0		&&			
ANR	651051	Identifier	currentLineBeginsWithBrace		650888	0					
ANR	651052	UnaryOperationExpression	"! isBraceType ( braceType , SINGLE_LINE_TYPE )"		650888	1					
ANR	651053	UnaryOperator	!		650888	0					
ANR	651054	CallExpression	"isBraceType ( braceType , SINGLE_LINE_TYPE )"		650888	1					
ANR	651055	Callee	isBraceType		650888	0					
ANR	651056	Identifier	isBraceType		650888	0					
ANR	651057	ArgumentList	braceType		650888	1					
ANR	651058	Argument	braceType		650888	0					
ANR	651059	Identifier	braceType		650888	0					
ANR	651060	Argument	SINGLE_LINE_TYPE		650888	1					
ANR	651061	Identifier	SINGLE_LINE_TYPE		650888	0					
ANR	651062	CompoundStatement		48:6:1499:1499	650888	1					
ANR	651063	ExpressionStatement	appendSpacePad ( )	4920:7:143506:143522	650888	0	True				
ANR	651064	CallExpression	appendSpacePad ( )		650888	0					
ANR	651065	Callee	appendSpacePad		650888	0					
ANR	651066	Identifier	appendSpacePad		650888	0					
ANR	651067	ArgumentList			650888	1					
ANR	651068	ExpressionStatement	appendCurrentChar ( false )	4921:7:143531:143555	650888	1	True				
ANR	651069	CallExpression	appendCurrentChar ( false )		650888	0					
ANR	651070	Callee	appendCurrentChar		650888	0					
ANR	651071	Identifier	appendCurrentChar		650888	0					
ANR	651072	ArgumentList	false		650888	1					
ANR	651073	Argument	false		650888	0					
ANR	651074	Identifier	false		650888	0					
ANR	651075	ExpressionStatement	testForTimeToSplitFormattedLine ( )	4923:7:143624:143657	650888	2	True				
ANR	651076	CallExpression	testForTimeToSplitFormattedLine ( )		650888	0					
ANR	651077	Callee	testForTimeToSplitFormattedLine		650888	0					
ANR	651078	Identifier	testForTimeToSplitFormattedLine		650888	0					
ANR	651079	ArgumentList			650888	1					
ANR	651080	IfStatement	if ( currentLineBeginsWithBrace && ( int ) currentLineFirstBraceNum == charNum )		650888	3					
ANR	651081	Condition	currentLineBeginsWithBrace && ( int ) currentLineFirstBraceNum == charNum	4925:11:143705:143790	650888	0	True				
ANR	651082	AndExpression	currentLineBeginsWithBrace && ( int ) currentLineFirstBraceNum == charNum		650888	0		&&			
ANR	651083	Identifier	currentLineBeginsWithBrace		650888	0					
ANR	651084	EqualityExpression	( int ) currentLineFirstBraceNum == charNum		650888	1		==			
ANR	651085	CastExpression	( int ) currentLineFirstBraceNum		650888	0					
ANR	651086	CastTarget	int		650888	0					
ANR	651087	Identifier	currentLineFirstBraceNum		650888	1					
ANR	651088	Identifier	charNum		650888	1					
ANR	651089	ExpressionStatement	shouldBreakLineAtNextChar = true	4927:8:143801:143833	650888	1	True				
ANR	651090	AssignmentExpression	shouldBreakLineAtNextChar = true		650888	0		=			
ANR	651091	Identifier	shouldBreakLineAtNextChar		650888	0					
ANR	651092	Identifier	true		650888	1					
ANR	651093	ElseStatement	else		650888	0					
ANR	651094	CompoundStatement		59:6:1862:1862	650888	0					
ANR	651095	IfStatement	if ( previousNonWSChar != '(' )		650888	0					
ANR	651096	Condition	previousNonWSChar != '('	4931:11:143873:143896	650888	0	True				
ANR	651097	EqualityExpression	previousNonWSChar != '('		650888	0		!=			
ANR	651098	Identifier	previousNonWSChar		650888	0					
ANR	651099	PrimaryExpression	'('		650888	1					
ANR	651100	CompoundStatement		61:7:1908:1908	650888	1					
ANR	651101	IfStatement	"if ( ! isBraceType ( braceType , INIT_TYPE ) )"		650888	0					
ANR	651102	Condition	"! isBraceType ( braceType , INIT_TYPE )"	4934:12:143976:144009	650888	0	True				
ANR	651103	UnaryOperationExpression	"! isBraceType ( braceType , INIT_TYPE )"		650888	0					
ANR	651104	UnaryOperator	!		650888	0					
ANR	651105	CallExpression	"isBraceType ( braceType , INIT_TYPE )"		650888	1					
ANR	651106	Callee	isBraceType		650888	0					
ANR	651107	Identifier	isBraceType		650888	0					
ANR	651108	ArgumentList	braceType		650888	1					
ANR	651109	Argument	braceType		650888	0					
ANR	651110	Identifier	braceType		650888	0					
ANR	651111	Argument	INIT_TYPE		650888	1					
ANR	651112	Identifier	INIT_TYPE		650888	0					
ANR	651113	ExpressionStatement	appendSpacePad ( )	4935:9:144021:144037	650888	1	True				
ANR	651114	CallExpression	appendSpacePad ( )		650888	0					
ANR	651115	Callee	appendSpacePad		650888	0					
ANR	651116	Identifier	appendSpacePad		650888	0					
ANR	651117	ArgumentList			650888	1					
ANR	651118	ExpressionStatement	appendCurrentChar ( )	4937:7:144055:144074	650888	1	True				
ANR	651119	CallExpression	appendCurrentChar ( )		650888	0					
ANR	651120	Callee	appendCurrentChar		650888	0					
ANR	651121	Identifier	appendCurrentChar		650888	0					
ANR	651122	ArgumentList			650888	1					
ANR	651123	ElseStatement	else		650888	0					
ANR	651124	IfStatement	if ( braceFormatMode == BREAK_MODE )		650888	0					
ANR	651125	Condition	braceFormatMode == BREAK_MODE	4942:12:144114:144142	650888	0	True				
ANR	651126	EqualityExpression	braceFormatMode == BREAK_MODE		650888	0		==			
ANR	651127	Identifier	braceFormatMode		650888	0					
ANR	651128	Identifier	BREAK_MODE		650888	1					
ANR	651129	CompoundStatement		72:3:2150:2150	650888	1					
ANR	651130	IfStatement	if ( isWhiteSpace ( peekNextChar ( ) ) && ! isInVirginLine )		650888	0					
ANR	651131	Condition	isWhiteSpace ( peekNextChar ( ) ) && ! isInVirginLine	4944:8:144158:144204	650888	0	True				
ANR	651132	AndExpression	isWhiteSpace ( peekNextChar ( ) ) && ! isInVirginLine		650888	0		&&			
ANR	651133	CallExpression	isWhiteSpace ( peekNextChar ( ) )		650888	0					
ANR	651134	Callee	isWhiteSpace		650888	0					
ANR	651135	Identifier	isWhiteSpace		650888	0					
ANR	651136	ArgumentList	peekNextChar ( )		650888	1					
ANR	651137	Argument	peekNextChar ( )		650888	0					
ANR	651138	CallExpression	peekNextChar ( )		650888	0					
ANR	651139	Callee	peekNextChar		650888	0					
ANR	651140	Identifier	peekNextChar		650888	0					
ANR	651141	ArgumentList			650888	1					
ANR	651142	UnaryOperationExpression	! isInVirginLine		650888	1					
ANR	651143	UnaryOperator	!		650888	0					
ANR	651144	Identifier	isInVirginLine		650888	1					
ANR	651145	ExpressionStatement	breakLine ( )	4945:5:144212:144223	650888	1	True				
ANR	651146	CallExpression	breakLine ( )		650888	0					
ANR	651147	Callee	breakLine		650888	0					
ANR	651148	Identifier	breakLine		650888	0					
ANR	651149	ArgumentList			650888	1					
ANR	651150	ElseStatement	else		650888	0					
ANR	651151	IfStatement	if ( isBeforeAnyComment ( ) )		650888	0					
ANR	651152	Condition	isBeforeAnyComment ( )	4946:13:144238:144257	650888	0	True				
ANR	651153	CallExpression	isBeforeAnyComment ( )		650888	0					
ANR	651154	Callee	isBeforeAnyComment		650888	0					
ANR	651155	Identifier	isBeforeAnyComment		650888	0					
ANR	651156	ArgumentList			650888	1					
ANR	651157	CompoundStatement		76:4:2266:2266	650888	1					
ANR	651158	IfStatement	if ( isBeforeAnyLineEndComment ( charNum ) && ! currentLineBeginsWithBrace )		650888	0					
ANR	651159	Condition	isBeforeAnyLineEndComment ( charNum ) && ! currentLineBeginsWithBrace	4949:9:144326:144390	650888	0	True				
ANR	651160	AndExpression	isBeforeAnyLineEndComment ( charNum ) && ! currentLineBeginsWithBrace		650888	0		&&			
ANR	651161	CallExpression	isBeforeAnyLineEndComment ( charNum )		650888	0					
ANR	651162	Callee	isBeforeAnyLineEndComment		650888	0					
ANR	651163	Identifier	isBeforeAnyLineEndComment		650888	0					
ANR	651164	ArgumentList	charNum		650888	1					
ANR	651165	Argument	charNum		650888	0					
ANR	651166	Identifier	charNum		650888	0					
ANR	651167	UnaryOperationExpression	! currentLineBeginsWithBrace		650888	1					
ANR	651168	UnaryOperator	!		650888	0					
ANR	651169	Identifier	currentLineBeginsWithBrace		650888	1					
ANR	651170	CompoundStatement		79:5:2400:2400	650888	1					
ANR	651171	ExpressionStatement	currentChar = ' '	4951:6:144406:144423	650888	0	True				
ANR	651172	AssignmentExpression	currentChar = ' '		650888	0		=			
ANR	651173	Identifier	currentChar		650888	0					
ANR	651174	PrimaryExpression	' '		650888	1					
ANR	651175	ExpressionStatement	appendOpeningBrace = true	4952:6:144476:144501	650888	1	True				
ANR	651176	AssignmentExpression	appendOpeningBrace = true		650888	0		=			
ANR	651177	Identifier	appendOpeningBrace		650888	0					
ANR	651178	Identifier	true		650888	1					
ANR	651179	IfStatement	if ( ! isInLineBreak && previousNonWSChar != '(' )		650888	1					
ANR	651180	Condition	! isInLineBreak && previousNonWSChar != '('	4955:8:144561:144602	650888	0	True				
ANR	651181	AndExpression	! isInLineBreak && previousNonWSChar != '('		650888	0		&&			
ANR	651182	UnaryOperationExpression	! isInLineBreak		650888	0					
ANR	651183	UnaryOperator	!		650888	0					
ANR	651184	Identifier	isInLineBreak		650888	1					
ANR	651185	EqualityExpression	previousNonWSChar != '('		650888	1		!=			
ANR	651186	Identifier	previousNonWSChar		650888	0					
ANR	651187	PrimaryExpression	'('		650888	1					
ANR	651188	CompoundStatement		85:4:2611:2611	650888	1					
ANR	651189	IfStatement	"if ( ! isBraceType ( braceType , INIT_TYPE ) )"		650888	0					
ANR	651190	Condition	"! isBraceType ( braceType , INIT_TYPE )"	4958:9:144673:144706	650888	0	True				
ANR	651191	UnaryOperationExpression	"! isBraceType ( braceType , INIT_TYPE )"		650888	0					
ANR	651192	UnaryOperator	!		650888	0					
ANR	651193	CallExpression	"isBraceType ( braceType , INIT_TYPE )"		650888	1					
ANR	651194	Callee	isBraceType		650888	0					
ANR	651195	Identifier	isBraceType		650888	0					
ANR	651196	ArgumentList	braceType		650888	1					
ANR	651197	Argument	braceType		650888	0					
ANR	651198	Identifier	braceType		650888	0					
ANR	651199	Argument	INIT_TYPE		650888	1					
ANR	651200	Identifier	INIT_TYPE		650888	0					
ANR	651201	ExpressionStatement	appendSpacePad ( )	4959:6:144715:144731	650888	1	True				
ANR	651202	CallExpression	appendSpacePad ( )		650888	0					
ANR	651203	Callee	appendSpacePad		650888	0					
ANR	651204	Identifier	appendSpacePad		650888	0					
ANR	651205	ArgumentList			650888	1					
ANR	651206	ExpressionStatement	appendCurrentChar ( )	4961:4:144743:144762	650888	2	True				
ANR	651207	CallExpression	appendCurrentChar ( )		650888	0					
ANR	651208	Callee	appendCurrentChar		650888	0					
ANR	651209	Identifier	appendCurrentChar		650888	0					
ANR	651210	ArgumentList			650888	1					
ANR	651211	IfStatement	"if ( currentLineBeginsWithBrace && ( int ) currentLineFirstBraceNum == charNum && ! isBraceType ( braceType , SINGLE_LINE_TYPE ) )"		650888	3					
ANR	651212	Condition	"currentLineBeginsWithBrace && ( int ) currentLineFirstBraceNum == charNum && ! isBraceType ( braceType , SINGLE_LINE_TYPE )"	4963:8:144773:144912	650888	0	True				
ANR	651213	AndExpression	"currentLineBeginsWithBrace && ( int ) currentLineFirstBraceNum == charNum && ! isBraceType ( braceType , SINGLE_LINE_TYPE )"		650888	0		&&			
ANR	651214	Identifier	currentLineBeginsWithBrace		650888	0					
ANR	651215	AndExpression	"( int ) currentLineFirstBraceNum == charNum && ! isBraceType ( braceType , SINGLE_LINE_TYPE )"		650888	1		&&			
ANR	651216	EqualityExpression	( int ) currentLineFirstBraceNum == charNum		650888	0		==			
ANR	651217	CastExpression	( int ) currentLineFirstBraceNum		650888	0					
ANR	651218	CastTarget	int		650888	0					
ANR	651219	Identifier	currentLineFirstBraceNum		650888	1					
ANR	651220	Identifier	charNum		650888	1					
ANR	651221	UnaryOperationExpression	"! isBraceType ( braceType , SINGLE_LINE_TYPE )"		650888	1					
ANR	651222	UnaryOperator	!		650888	0					
ANR	651223	CallExpression	"isBraceType ( braceType , SINGLE_LINE_TYPE )"		650888	1					
ANR	651224	Callee	isBraceType		650888	0					
ANR	651225	Identifier	isBraceType		650888	0					
ANR	651226	ArgumentList	braceType		650888	1					
ANR	651227	Argument	braceType		650888	0					
ANR	651228	Identifier	braceType		650888	0					
ANR	651229	Argument	SINGLE_LINE_TYPE		650888	1					
ANR	651230	Identifier	SINGLE_LINE_TYPE		650888	0					
ANR	651231	ExpressionStatement	shouldBreakLineAtNextChar = true	4966:5:144920:144952	650888	1	True				
ANR	651232	AssignmentExpression	shouldBreakLineAtNextChar = true		650888	0		=			
ANR	651233	Identifier	shouldBreakLineAtNextChar		650888	0					
ANR	651234	Identifier	true		650888	1					
ANR	651235	ElseStatement	else		650888	0					
ANR	651236	IfStatement	if ( braceFormatMode == RUN_IN_MODE )		650888	0					
ANR	651237	Condition	braceFormatMode == RUN_IN_MODE	4968:12:144971:145000	650888	0	True				
ANR	651238	EqualityExpression	braceFormatMode == RUN_IN_MODE		650888	0		==			
ANR	651239	Identifier	braceFormatMode		650888	0					
ANR	651240	Identifier	RUN_IN_MODE		650888	1					
ANR	651241	CompoundStatement		98:3:3008:3008	650888	1					
ANR	651242	IfStatement	if ( isWhiteSpace ( peekNextChar ( ) ) && ! isInVirginLine )		650888	0					
ANR	651243	Condition	isWhiteSpace ( peekNextChar ( ) ) && ! isInVirginLine	4970:8:145016:145062	650888	0	True				
ANR	651244	AndExpression	isWhiteSpace ( peekNextChar ( ) ) && ! isInVirginLine		650888	0		&&			
ANR	651245	CallExpression	isWhiteSpace ( peekNextChar ( ) )		650888	0					
ANR	651246	Callee	isWhiteSpace		650888	0					
ANR	651247	Identifier	isWhiteSpace		650888	0					
ANR	651248	ArgumentList	peekNextChar ( )		650888	1					
ANR	651249	Argument	peekNextChar ( )		650888	0					
ANR	651250	CallExpression	peekNextChar ( )		650888	0					
ANR	651251	Callee	peekNextChar		650888	0					
ANR	651252	Identifier	peekNextChar		650888	0					
ANR	651253	ArgumentList			650888	1					
ANR	651254	UnaryOperationExpression	! isInVirginLine		650888	1					
ANR	651255	UnaryOperator	!		650888	0					
ANR	651256	Identifier	isInVirginLine		650888	1					
ANR	651257	ExpressionStatement	breakLine ( )	4971:5:145070:145081	650888	1	True				
ANR	651258	CallExpression	breakLine ( )		650888	0					
ANR	651259	Callee	breakLine		650888	0					
ANR	651260	Identifier	breakLine		650888	0					
ANR	651261	ArgumentList			650888	1					
ANR	651262	ElseStatement	else		650888	0					
ANR	651263	IfStatement	if ( isBeforeAnyComment ( ) )		650888	0					
ANR	651264	Condition	isBeforeAnyComment ( )	4972:13:145096:145115	650888	0	True				
ANR	651265	CallExpression	isBeforeAnyComment ( )		650888	0					
ANR	651266	Callee	isBeforeAnyComment		650888	0					
ANR	651267	Identifier	isBeforeAnyComment		650888	0					
ANR	651268	ArgumentList			650888	1					
ANR	651269	CompoundStatement		102:4:3124:3124	650888	1					
ANR	651270	IfStatement	if ( isBeforeAnyLineEndComment ( charNum ) && ! currentLineBeginsWithBrace )		650888	0					
ANR	651271	Condition	isBeforeAnyLineEndComment ( charNum ) && ! currentLineBeginsWithBrace	4975:9:145184:145248	650888	0	True				
ANR	651272	AndExpression	isBeforeAnyLineEndComment ( charNum ) && ! currentLineBeginsWithBrace		650888	0		&&			
ANR	651273	CallExpression	isBeforeAnyLineEndComment ( charNum )		650888	0					
ANR	651274	Callee	isBeforeAnyLineEndComment		650888	0					
ANR	651275	Identifier	isBeforeAnyLineEndComment		650888	0					
ANR	651276	ArgumentList	charNum		650888	1					
ANR	651277	Argument	charNum		650888	0					
ANR	651278	Identifier	charNum		650888	0					
ANR	651279	UnaryOperationExpression	! currentLineBeginsWithBrace		650888	1					
ANR	651280	UnaryOperator	!		650888	0					
ANR	651281	Identifier	currentLineBeginsWithBrace		650888	1					
ANR	651282	CompoundStatement		105:5:3258:3258	650888	1					
ANR	651283	ExpressionStatement	currentChar = ' '	4977:6:145264:145281	650888	0	True				
ANR	651284	AssignmentExpression	currentChar = ' '		650888	0		=			
ANR	651285	Identifier	currentChar		650888	0					
ANR	651286	PrimaryExpression	' '		650888	1					
ANR	651287	ExpressionStatement	appendOpeningBrace = true	4978:6:145334:145359	650888	1	True				
ANR	651288	AssignmentExpression	appendOpeningBrace = true		650888	0		=			
ANR	651289	Identifier	appendOpeningBrace		650888	0					
ANR	651290	Identifier	true		650888	1					
ANR	651291	IfStatement	if ( ! isInLineBreak && previousNonWSChar != '(' )		650888	1					
ANR	651292	Condition	! isInLineBreak && previousNonWSChar != '('	4981:8:145419:145460	650888	0	True				
ANR	651293	AndExpression	! isInLineBreak && previousNonWSChar != '('		650888	0		&&			
ANR	651294	UnaryOperationExpression	! isInLineBreak		650888	0					
ANR	651295	UnaryOperator	!		650888	0					
ANR	651296	Identifier	isInLineBreak		650888	1					
ANR	651297	EqualityExpression	previousNonWSChar != '('		650888	1		!=			
ANR	651298	Identifier	previousNonWSChar		650888	0					
ANR	651299	PrimaryExpression	'('		650888	1					
ANR	651300	CompoundStatement		111:4:3469:3469	650888	1					
ANR	651301	IfStatement	"if ( ! isBraceType ( braceType , INIT_TYPE ) )"		650888	0					
ANR	651302	Condition	"! isBraceType ( braceType , INIT_TYPE )"	4984:9:145531:145564	650888	0	True				
ANR	651303	UnaryOperationExpression	"! isBraceType ( braceType , INIT_TYPE )"		650888	0					
ANR	651304	UnaryOperator	!		650888	0					
ANR	651305	CallExpression	"isBraceType ( braceType , INIT_TYPE )"		650888	1					
ANR	651306	Callee	isBraceType		650888	0					
ANR	651307	Identifier	isBraceType		650888	0					
ANR	651308	ArgumentList	braceType		650888	1					
ANR	651309	Argument	braceType		650888	0					
ANR	651310	Identifier	braceType		650888	0					
ANR	651311	Argument	INIT_TYPE		650888	1					
ANR	651312	Identifier	INIT_TYPE		650888	0					
ANR	651313	ExpressionStatement	appendSpacePad ( )	4985:6:145573:145589	650888	1	True				
ANR	651314	CallExpression	appendSpacePad ( )		650888	0					
ANR	651315	Callee	appendSpacePad		650888	0					
ANR	651316	Identifier	appendSpacePad		650888	0					
ANR	651317	ArgumentList			650888	1					
ANR	651318	ExpressionStatement	appendCurrentChar ( )	4987:4:145601:145620	650888	2	True				
ANR	651319	CallExpression	appendCurrentChar ( )		650888	0					
ANR	651320	Callee	appendCurrentChar		650888	0					
ANR	651321	Identifier	appendCurrentChar		650888	0					
ANR	651322	ArgumentList			650888	1					
ANR	651323	ElseStatement	else		650888	0					
ANR	651324	IfStatement	if ( braceFormatMode == NONE_MODE )		650888	0					
ANR	651325	Condition	braceFormatMode == NONE_MODE	4989:12:145639:145666	650888	0	True				
ANR	651326	EqualityExpression	braceFormatMode == NONE_MODE		650888	0		==			
ANR	651327	Identifier	braceFormatMode		650888	0					
ANR	651328	Identifier	NONE_MODE		650888	1					
ANR	651329	CompoundStatement		119:3:3674:3674	650888	1					
ANR	651330	IfStatement	if ( currentLineBeginsWithBrace && charNum == ( int ) currentLineFirstBraceNum )		650888	0					
ANR	651331	Condition	currentLineBeginsWithBrace && charNum == ( int ) currentLineFirstBraceNum	4991:8:145682:145764	650888	0	True				
ANR	651332	AndExpression	currentLineBeginsWithBrace && charNum == ( int ) currentLineFirstBraceNum		650888	0		&&			
ANR	651333	Identifier	currentLineBeginsWithBrace		650888	0					
ANR	651334	EqualityExpression	charNum == ( int ) currentLineFirstBraceNum		650888	1		==			
ANR	651335	Identifier	charNum		650888	0					
ANR	651336	CastExpression	( int ) currentLineFirstBraceNum		650888	1					
ANR	651337	CastTarget	int		650888	0					
ANR	651338	Identifier	currentLineFirstBraceNum		650888	1					
ANR	651339	CompoundStatement		122:4:3773:3773	650888	1					
ANR	651340	ExpressionStatement	appendCurrentChar ( )	4994:5:145778:145797	650888	0	True				
ANR	651341	CallExpression	appendCurrentChar ( )		650888	0					
ANR	651342	Callee	appendCurrentChar		650888	0					
ANR	651343	Identifier	appendCurrentChar		650888	0					
ANR	651344	ArgumentList			650888	1					
ANR	651345	ElseStatement	else		650888	0					
ANR	651346	CompoundStatement		126:4:3851:3851	650888	0					
ANR	651347	IfStatement	if ( previousNonWSChar != '(' )		650888	0					
ANR	651348	Condition	previousNonWSChar != '('	4998:9:145860:145883	650888	0	True				
ANR	651349	EqualityExpression	previousNonWSChar != '('		650888	0		!=			
ANR	651350	Identifier	previousNonWSChar		650888	0					
ANR	651351	PrimaryExpression	'('		650888	1					
ANR	651352	CompoundStatement		128:5:3893:3893	650888	1					
ANR	651353	IfStatement	"if ( ! isBraceType ( braceType , INIT_TYPE ) )"		650888	0					
ANR	651354	Condition	"! isBraceType ( braceType , INIT_TYPE )"	5001:10:145957:145990	650888	0	True				
ANR	651355	UnaryOperationExpression	"! isBraceType ( braceType , INIT_TYPE )"		650888	0					
ANR	651356	UnaryOperator	!		650888	0					
ANR	651357	CallExpression	"isBraceType ( braceType , INIT_TYPE )"		650888	1					
ANR	651358	Callee	isBraceType		650888	0					
ANR	651359	Identifier	isBraceType		650888	0					
ANR	651360	ArgumentList	braceType		650888	1					
ANR	651361	Argument	braceType		650888	0					
ANR	651362	Identifier	braceType		650888	0					
ANR	651363	Argument	INIT_TYPE		650888	1					
ANR	651364	Identifier	INIT_TYPE		650888	0					
ANR	651365	ExpressionStatement	appendSpacePad ( )	5002:7:146000:146016	650888	1	True				
ANR	651366	CallExpression	appendSpacePad ( )		650888	0					
ANR	651367	Callee	appendSpacePad		650888	0					
ANR	651368	Identifier	appendSpacePad		650888	0					
ANR	651369	ArgumentList			650888	1					
ANR	651370	ExpressionStatement	appendCurrentChar ( false )	5004:5:146030:146054	650888	1	True				
ANR	651371	CallExpression	appendCurrentChar ( false )		650888	0					
ANR	651372	Callee	appendCurrentChar		650888	0					
ANR	651373	Identifier	appendCurrentChar		650888	0					
ANR	651374	ArgumentList	false		650888	1					
ANR	651375	Argument	false		650888	0					
ANR	651376	Identifier	false		650888	0					
ANR	651377	ElseStatement	else		650888	0					
ANR	651378	CompoundStatement		138:2:4144:4144	650888	0					
ANR	651379	IfStatement	if ( braceFormatMode == RUN_IN_MODE )		650888	0					
ANR	651380	Condition	braceFormatMode == RUN_IN_MODE	5010:7:146151:146180	650888	0	True				
ANR	651381	EqualityExpression	braceFormatMode == RUN_IN_MODE		650888	0		==			
ANR	651382	Identifier	braceFormatMode		650888	0					
ANR	651383	Identifier	RUN_IN_MODE		650888	1					
ANR	651384	CompoundStatement		140:3:4188:4188	650888	1					
ANR	651385	IfStatement	"if ( previousNonWSChar == '{' && braceTypeStack -> size ( ) > 2 && ! isBraceType ( ( * braceTypeStack ) [ braceTypeStack -> size ( ) - 2 ] , SINGLE_LINE_TYPE ) )"		650888	0					
ANR	651386	Condition	"previousNonWSChar == '{' && braceTypeStack -> size ( ) > 2 && ! isBraceType ( ( * braceTypeStack ) [ braceTypeStack -> size ( ) - 2 ] , SINGLE_LINE_TYPE )"	5012:8:146196:146382	650888	0	True				
ANR	651387	AndExpression	"previousNonWSChar == '{' && braceTypeStack -> size ( ) > 2 && ! isBraceType ( ( * braceTypeStack ) [ braceTypeStack -> size ( ) - 2 ] , SINGLE_LINE_TYPE )"		650888	0		&&			
ANR	651388	EqualityExpression	previousNonWSChar == '{'		650888	0		==			
ANR	651389	Identifier	previousNonWSChar		650888	0					
ANR	651390	PrimaryExpression	'{'		650888	1					
ANR	651391	AndExpression	"braceTypeStack -> size ( ) > 2 && ! isBraceType ( ( * braceTypeStack ) [ braceTypeStack -> size ( ) - 2 ] , SINGLE_LINE_TYPE )"		650888	1		&&			
ANR	651392	RelationalExpression	braceTypeStack -> size ( ) > 2		650888	0		>			
ANR	651393	CallExpression	braceTypeStack -> size ( )		650888	0					
ANR	651394	Callee	braceTypeStack -> size		650888	0					
ANR	651395	PtrMemberAccess	braceTypeStack -> size		650888	0					
ANR	651396	Identifier	braceTypeStack		650888	0					
ANR	651397	Identifier	size		650888	1					
ANR	651398	ArgumentList			650888	1					
ANR	651399	PrimaryExpression	2		650888	1					
ANR	651400	UnaryOperationExpression	"! isBraceType ( ( * braceTypeStack ) [ braceTypeStack -> size ( ) - 2 ] , SINGLE_LINE_TYPE )"		650888	1					
ANR	651401	UnaryOperator	!		650888	0					
ANR	651402	CallExpression	"isBraceType ( ( * braceTypeStack ) [ braceTypeStack -> size ( ) - 2 ] , SINGLE_LINE_TYPE )"		650888	1					
ANR	651403	Callee	isBraceType		650888	0					
ANR	651404	Identifier	isBraceType		650888	0					
ANR	651405	ArgumentList	( * braceTypeStack ) [ braceTypeStack -> size ( ) - 2 ]		650888	1					
ANR	651406	Argument	( * braceTypeStack ) [ braceTypeStack -> size ( ) - 2 ]		650888	0					
ANR	651407	ArrayIndexing	( * braceTypeStack ) [ braceTypeStack -> size ( ) - 2 ]		650888	0					
ANR	651408	UnaryOperationExpression	* braceTypeStack		650888	0					
ANR	651409	UnaryOperator	*		650888	0					
ANR	651410	Identifier	braceTypeStack		650888	1					
ANR	651411	AdditiveExpression	braceTypeStack -> size ( ) - 2		650888	1		-			
ANR	651412	CallExpression	braceTypeStack -> size ( )		650888	0					
ANR	651413	Callee	braceTypeStack -> size		650888	0					
ANR	651414	PtrMemberAccess	braceTypeStack -> size		650888	0					
ANR	651415	Identifier	braceTypeStack		650888	0					
ANR	651416	Identifier	size		650888	1					
ANR	651417	ArgumentList			650888	1					
ANR	651418	PrimaryExpression	2		650888	1					
ANR	651419	Argument	SINGLE_LINE_TYPE		650888	1					
ANR	651420	Identifier	SINGLE_LINE_TYPE		650888	0					
ANR	651421	ExpressionStatement	formatArrayRunIn ( )	5016:5:146390:146408	650888	1	True				
ANR	651422	CallExpression	formatArrayRunIn ( )		650888	0					
ANR	651423	Callee	formatArrayRunIn		650888	0					
ANR	651424	Identifier	formatArrayRunIn		650888	0					
ANR	651425	ArgumentList			650888	1					
ANR	651426	ElseStatement	else		650888	0					
ANR	651427	IfStatement	"if ( ! isInLineBreak && ! isWhiteSpace ( peekNextChar ( ) ) && previousNonWSChar == '{' && braceTypeStack -> size ( ) > 2 && ! isBraceType ( ( * braceTypeStack ) [ braceTypeStack -> size ( ) - 2 ] , SINGLE_LINE_TYPE ) )"		650888	0					
ANR	651428	Condition	"! isInLineBreak && ! isWhiteSpace ( peekNextChar ( ) ) && previousNonWSChar == '{' && braceTypeStack -> size ( ) > 2 && ! isBraceType ( ( * braceTypeStack ) [ braceTypeStack -> size ( ) - 2 ] , SINGLE_LINE_TYPE )"	5018:12:146427:146688	650888	0	True				
ANR	651429	AndExpression	"! isInLineBreak && ! isWhiteSpace ( peekNextChar ( ) ) && previousNonWSChar == '{' && braceTypeStack -> size ( ) > 2 && ! isBraceType ( ( * braceTypeStack ) [ braceTypeStack -> size ( ) - 2 ] , SINGLE_LINE_TYPE )"		650888	0		&&			
ANR	651430	UnaryOperationExpression	! isInLineBreak		650888	0					
ANR	651431	UnaryOperator	!		650888	0					
ANR	651432	Identifier	isInLineBreak		650888	1					
ANR	651433	AndExpression	"! isWhiteSpace ( peekNextChar ( ) ) && previousNonWSChar == '{' && braceTypeStack -> size ( ) > 2 && ! isBraceType ( ( * braceTypeStack ) [ braceTypeStack -> size ( ) - 2 ] , SINGLE_LINE_TYPE )"		650888	1		&&			
ANR	651434	UnaryOperationExpression	! isWhiteSpace ( peekNextChar ( ) )		650888	0					
ANR	651435	UnaryOperator	!		650888	0					
ANR	651436	CallExpression	isWhiteSpace ( peekNextChar ( ) )		650888	1					
ANR	651437	Callee	isWhiteSpace		650888	0					
ANR	651438	Identifier	isWhiteSpace		650888	0					
ANR	651439	ArgumentList	peekNextChar ( )		650888	1					
ANR	651440	Argument	peekNextChar ( )		650888	0					
ANR	651441	CallExpression	peekNextChar ( )		650888	0					
ANR	651442	Callee	peekNextChar		650888	0					
ANR	651443	Identifier	peekNextChar		650888	0					
ANR	651444	ArgumentList			650888	1					
ANR	651445	AndExpression	"previousNonWSChar == '{' && braceTypeStack -> size ( ) > 2 && ! isBraceType ( ( * braceTypeStack ) [ braceTypeStack -> size ( ) - 2 ] , SINGLE_LINE_TYPE )"		650888	1		&&			
ANR	651446	EqualityExpression	previousNonWSChar == '{'		650888	0		==			
ANR	651447	Identifier	previousNonWSChar		650888	0					
ANR	651448	PrimaryExpression	'{'		650888	1					
ANR	651449	AndExpression	"braceTypeStack -> size ( ) > 2 && ! isBraceType ( ( * braceTypeStack ) [ braceTypeStack -> size ( ) - 2 ] , SINGLE_LINE_TYPE )"		650888	1		&&			
ANR	651450	RelationalExpression	braceTypeStack -> size ( ) > 2		650888	0		>			
ANR	651451	CallExpression	braceTypeStack -> size ( )		650888	0					
ANR	651452	Callee	braceTypeStack -> size		650888	0					
ANR	651453	PtrMemberAccess	braceTypeStack -> size		650888	0					
ANR	651454	Identifier	braceTypeStack		650888	0					
ANR	651455	Identifier	size		650888	1					
ANR	651456	ArgumentList			650888	1					
ANR	651457	PrimaryExpression	2		650888	1					
ANR	651458	UnaryOperationExpression	"! isBraceType ( ( * braceTypeStack ) [ braceTypeStack -> size ( ) - 2 ] , SINGLE_LINE_TYPE )"		650888	1					
ANR	651459	UnaryOperator	!		650888	0					
ANR	651460	CallExpression	"isBraceType ( ( * braceTypeStack ) [ braceTypeStack -> size ( ) - 2 ] , SINGLE_LINE_TYPE )"		650888	1					
ANR	651461	Callee	isBraceType		650888	0					
ANR	651462	Identifier	isBraceType		650888	0					
ANR	651463	ArgumentList	( * braceTypeStack ) [ braceTypeStack -> size ( ) - 2 ]		650888	1					
ANR	651464	Argument	( * braceTypeStack ) [ braceTypeStack -> size ( ) - 2 ]		650888	0					
ANR	651465	ArrayIndexing	( * braceTypeStack ) [ braceTypeStack -> size ( ) - 2 ]		650888	0					
ANR	651466	UnaryOperationExpression	* braceTypeStack		650888	0					
ANR	651467	UnaryOperator	*		650888	0					
ANR	651468	Identifier	braceTypeStack		650888	1					
ANR	651469	AdditiveExpression	braceTypeStack -> size ( ) - 2		650888	1		-			
ANR	651470	CallExpression	braceTypeStack -> size ( )		650888	0					
ANR	651471	Callee	braceTypeStack -> size		650888	0					
ANR	651472	PtrMemberAccess	braceTypeStack -> size		650888	0					
ANR	651473	Identifier	braceTypeStack		650888	0					
ANR	651474	Identifier	size		650888	1					
ANR	651475	ArgumentList			650888	1					
ANR	651476	PrimaryExpression	2		650888	1					
ANR	651477	Argument	SINGLE_LINE_TYPE		650888	1					
ANR	651478	Identifier	SINGLE_LINE_TYPE		650888	0					
ANR	651479	ExpressionStatement	formatArrayRunIn ( )	5024:4:146695:146713	650888	1	True				
ANR	651480	CallExpression	formatArrayRunIn ( )		650888	0					
ANR	651481	Callee	formatArrayRunIn		650888	0					
ANR	651482	Identifier	formatArrayRunIn		650888	0					
ANR	651483	ArgumentList			650888	1					
ANR	651484	ExpressionStatement	appendCurrentChar ( )	5026:3:146719:146738	650888	1	True				
ANR	651485	CallExpression	appendCurrentChar ( )		650888	0					
ANR	651486	Callee	appendCurrentChar		650888	0					
ANR	651487	Identifier	appendCurrentChar		650888	0					
ANR	651488	ArgumentList			650888	1					
ANR	651489	ElseStatement	else		650888	0					
ANR	651490	IfStatement	if ( currentChar == '}' )		650888	0					
ANR	651491	Condition	currentChar == '}'	5029:10:146757:146774	650888	0	True				
ANR	651492	EqualityExpression	currentChar == '}'		650888	0		==			
ANR	651493	Identifier	currentChar		650888	0					
ANR	651494	PrimaryExpression	'}'		650888	1					
ANR	651495	CompoundStatement		185:2:5573:5605	650888	1					
ANR	651496	IfStatement	if ( attachClosingBraceMode )		650888	0					
ANR	651497	Condition	attachClosingBraceMode	5031:6:146786:146807	650888	0	True				
ANR	651498	Identifier	attachClosingBraceMode		650888	0					
ANR	651499	CompoundStatement		161:2:4814:4814	650888	1					
ANR	651500	IfStatement	if ( isEmptyLine ( formattedLine ) || isImmediatelyPostPreprocessor || isCharImmediatelyPostLineComment || isCharImmediatelyPostComment )		650888	0					
ANR	651501	Condition	isEmptyLine ( formattedLine ) || isImmediatelyPostPreprocessor || isCharImmediatelyPostLineComment || isCharImmediatelyPostComment	5033:7:146821:147015	650888	0	True				
ANR	651502	OrExpression	isEmptyLine ( formattedLine ) || isImmediatelyPostPreprocessor || isCharImmediatelyPostLineComment || isCharImmediatelyPostComment		650888	0		||			
ANR	651503	CallExpression	isEmptyLine ( formattedLine )		650888	0					
ANR	651504	Callee	isEmptyLine		650888	0					
ANR	651505	Identifier	isEmptyLine		650888	0					
ANR	651506	ArgumentList	formattedLine		650888	1					
ANR	651507	Argument	formattedLine		650888	0					
ANR	651508	Identifier	formattedLine		650888	0					
ANR	651509	OrExpression	isImmediatelyPostPreprocessor || isCharImmediatelyPostLineComment || isCharImmediatelyPostComment		650888	1		||			
ANR	651510	Identifier	isImmediatelyPostPreprocessor		650888	0					
ANR	651511	OrExpression	isCharImmediatelyPostLineComment || isCharImmediatelyPostComment		650888	1		||			
ANR	651512	Identifier	isCharImmediatelyPostLineComment		650888	0					
ANR	651513	Identifier	isCharImmediatelyPostComment		650888	1					
ANR	651514	ExpressionStatement	appendCurrentChar ( )	5037:4:147022:147041	650888	1	True				
ANR	651515	CallExpression	appendCurrentChar ( )		650888	0					
ANR	651516	Callee	appendCurrentChar		650888	0					
ANR	651517	Identifier	appendCurrentChar		650888	0					
ANR	651518	ArgumentList			650888	1					
ANR	651519	ElseStatement	else		650888	0					
ANR	651520	CompoundStatement		168:3:5075:5075	650888	0					
ANR	651521	ExpressionStatement	appendSpacePad ( )	5040:4:147079:147095	650888	0	True				
ANR	651522	CallExpression	appendSpacePad ( )		650888	0					
ANR	651523	Callee	appendSpacePad		650888	0					
ANR	651524	Identifier	appendSpacePad		650888	0					
ANR	651525	ArgumentList			650888	1					
ANR	651526	ExpressionStatement	appendCurrentChar ( false )	5041:4:147101:147125	650888	1	True				
ANR	651527	CallExpression	appendCurrentChar ( false )		650888	0					
ANR	651528	Callee	appendCurrentChar		650888	0					
ANR	651529	Identifier	appendCurrentChar		650888	0					
ANR	651530	ArgumentList	false		650888	1					
ANR	651531	Argument	false		650888	0					
ANR	651532	Identifier	false		650888	0					
ANR	651533	ElseStatement	else		650888	0					
ANR	651534	CompoundStatement		174:2:5159:5159	650888	0					
ANR	651535	IfStatement	"if ( ! isBraceType ( braceType , INIT_TYPE ) && ( ! isBraceType ( braceType , SINGLE_LINE_TYPE ) || formattedLine . find ( '{' ) == string :: npos ) )"		650888	0					
ANR	651536	Condition	"! isBraceType ( braceType , INIT_TYPE ) && ( ! isBraceType ( braceType , SINGLE_LINE_TYPE ) || formattedLine . find ( '{' ) == string :: npos )"	5048:7:147311:147460	650888	0	True				
ANR	651537	AndExpression	"! isBraceType ( braceType , INIT_TYPE ) && ( ! isBraceType ( braceType , SINGLE_LINE_TYPE ) || formattedLine . find ( '{' ) == string :: npos )"		650888	0		&&			
ANR	651538	UnaryOperationExpression	"! isBraceType ( braceType , INIT_TYPE )"		650888	0					
ANR	651539	UnaryOperator	!		650888	0					
ANR	651540	CallExpression	"isBraceType ( braceType , INIT_TYPE )"		650888	1					
ANR	651541	Callee	isBraceType		650888	0					
ANR	651542	Identifier	isBraceType		650888	0					
ANR	651543	ArgumentList	braceType		650888	1					
ANR	651544	Argument	braceType		650888	0					
ANR	651545	Identifier	braceType		650888	0					
ANR	651546	Argument	INIT_TYPE		650888	1					
ANR	651547	Identifier	INIT_TYPE		650888	0					
ANR	651548	OrExpression	"! isBraceType ( braceType , SINGLE_LINE_TYPE ) || formattedLine . find ( '{' ) == string :: npos"		650888	1		||			
ANR	651549	UnaryOperationExpression	"! isBraceType ( braceType , SINGLE_LINE_TYPE )"		650888	0					
ANR	651550	UnaryOperator	!		650888	0					
ANR	651551	CallExpression	"isBraceType ( braceType , SINGLE_LINE_TYPE )"		650888	1					
ANR	651552	Callee	isBraceType		650888	0					
ANR	651553	Identifier	isBraceType		650888	0					
ANR	651554	ArgumentList	braceType		650888	1					
ANR	651555	Argument	braceType		650888	0					
ANR	651556	Identifier	braceType		650888	0					
ANR	651557	Argument	SINGLE_LINE_TYPE		650888	1					
ANR	651558	Identifier	SINGLE_LINE_TYPE		650888	0					
ANR	651559	EqualityExpression	formattedLine . find ( '{' ) == string :: npos		650888	1		==			
ANR	651560	CallExpression	formattedLine . find ( '{' )		650888	0					
ANR	651561	Callee	formattedLine . find		650888	0					
ANR	651562	MemberAccess	formattedLine . find		650888	0					
ANR	651563	Identifier	formattedLine		650888	0					
ANR	651564	Identifier	find		650888	1					
ANR	651565	ArgumentList	'{'		650888	1					
ANR	651566	Argument	'{'		650888	0					
ANR	651567	PrimaryExpression	'{'		650888	0					
ANR	651568	Identifier	string :: npos		650888	1					
ANR	651569	ExpressionStatement	breakLine ( )	5051:4:147467:147478	650888	1	True				
ANR	651570	CallExpression	breakLine ( )		650888	0					
ANR	651571	Callee	breakLine		650888	0					
ANR	651572	Identifier	breakLine		650888	0					
ANR	651573	ArgumentList			650888	1					
ANR	651574	ExpressionStatement	appendCurrentChar ( )	5052:3:147483:147502	650888	1	True				
ANR	651575	CallExpression	appendCurrentChar ( )		650888	0					
ANR	651576	Callee	appendCurrentChar		650888	0					
ANR	651577	Identifier	appendCurrentChar		650888	0					
ANR	651578	ArgumentList			650888	1					
ANR	651579	IdentifierDeclStatement	char peekedChar = peekNextChar ( ) ;	5056:2:147571:147603	650888	1	True				
ANR	651580	IdentifierDecl	peekedChar = peekNextChar ( )		650888	0					
ANR	651581	IdentifierDeclType	char		650888	0					
ANR	651582	Identifier	peekedChar		650888	1					
ANR	651583	AssignmentExpression	peekedChar = peekNextChar ( )		650888	2		=			
ANR	651584	Identifier	peekedChar		650888	0					
ANR	651585	CallExpression	peekNextChar ( )		650888	1					
ANR	651586	Callee	peekNextChar		650888	0					
ANR	651587	Identifier	peekNextChar		650888	0					
ANR	651588	ArgumentList			650888	1					
ANR	651589	IfStatement	if ( isLegalNameChar ( peekedChar ) || peekedChar == '[' )		650888	2					
ANR	651590	Condition	isLegalNameChar ( peekedChar ) || peekedChar == '['	5057:6:147611:147668	650888	0	True				
ANR	651591	OrExpression	isLegalNameChar ( peekedChar ) || peekedChar == '['		650888	0		||			
ANR	651592	CallExpression	isLegalNameChar ( peekedChar )		650888	0					
ANR	651593	Callee	isLegalNameChar		650888	0					
ANR	651594	Identifier	isLegalNameChar		650888	0					
ANR	651595	ArgumentList	peekedChar		650888	1					
ANR	651596	Argument	peekedChar		650888	0					
ANR	651597	Identifier	peekedChar		650888	0					
ANR	651598	EqualityExpression	peekedChar == '['		650888	1		==			
ANR	651599	Identifier	peekedChar		650888	0					
ANR	651600	PrimaryExpression	'['		650888	1					
ANR	651601	ExpressionStatement	appendSpaceAfter ( )	5059:3:147674:147692	650888	1	True				
ANR	651602	CallExpression	appendSpaceAfter ( )		650888	0					
ANR	651603	Callee	appendSpaceAfter		650888	0					
ANR	651604	Identifier	appendSpaceAfter		650888	0					
ANR	651605	ArgumentList			650888	1					
ANR	651606	ReturnType	void		650888	1					
ANR	651607	Identifier	ASFormatter :: formatArrayBraces		650888	2					
ANR	651608	ParameterList	"BraceType braceType , bool isOpeningArrayBrace"		650888	3					
ANR	651609	Parameter	BraceType braceType	4871:36:141950:141968	650888	0	True				
ANR	651610	ParameterType	BraceType		650888	0					
ANR	651611	Identifier	braceType		650888	1					
ANR	651612	Parameter	bool isOpeningArrayBrace	4871:57:141971:141994	650888	1	True				
ANR	651613	ParameterType	bool		650888	0					
ANR	651614	Identifier	isOpeningArrayBrace		650888	1					
ANR	651615	CFGEntryNode	ENTRY		650888		True				
ANR	651616	CFGExitNode	EXIT		650888		True				
ANR	651617	Symbol	isEmptyLine		650888						
ANR	651618	Symbol	* formattedLine		650888						
ANR	651619	Symbol	previousNonWSChar		650888						
ANR	651620	Symbol	braceTypeStack		650888						
ANR	651621	Symbol	RUN_IN_MODE		650888						
ANR	651622	Symbol	isCharImmediatelyPostComment		650888						
ANR	651623	Symbol	isOpeningArrayBrace		650888						
ANR	651624	Symbol	string :: npos		650888						
ANR	651625	Symbol	LINUX_MODE		650888						
ANR	651626	Symbol	isLegalNameChar		650888						
ANR	651627	Symbol	* formattedLine . length		650888						
ANR	651628	Symbol	isWhiteSpace		650888						
ANR	651629	Symbol	NONE_MODE		650888						
ANR	651630	Symbol	isBeforeAnyLineEndComment		650888						
ANR	651631	Symbol	isBeforeAnyComment		650888						
ANR	651632	Symbol	formattedLine . find		650888						
ANR	651633	Symbol	formattingStyle		650888						
ANR	651634	Symbol	ATTACH_MODE		650888						
ANR	651635	Symbol	braceType		650888						
ANR	651636	Symbol	isCharImmediatelyPostLineComment		650888						
ANR	651637	Symbol	SINGLE_LINE_TYPE		650888						
ANR	651638	Symbol	BREAK_MODE		650888						
ANR	651639	Symbol	STYLE_MOZILLA		650888						
ANR	651640	Symbol	* * braceTypeStack		650888						
ANR	651641	Symbol	isBraceType		650888						
ANR	651642	Symbol	* braceTypeStack -> size		650888						
ANR	651643	Symbol	charNum		650888						
ANR	651644	Symbol	peekedChar		650888						
ANR	651645	Symbol	currentChar		650888						
ANR	651646	Symbol	shouldBreakLineAtNextChar		650888						
ANR	651647	Symbol	currentLineBeginsWithBrace		650888						
ANR	651648	Symbol	peekNextChar		650888						
ANR	651649	Symbol	* braceTypeStack		650888						
ANR	651650	Symbol	isInLineBreak		650888						
ANR	651651	Symbol	ARRAY_TYPE		650888						
ANR	651652	Symbol	false		650888						
ANR	651653	Symbol	appendOpeningBrace		650888						
ANR	651654	Symbol	braceTypeStack -> size		650888						
ANR	651655	Symbol	attachClosingBraceMode		650888						
ANR	651656	Symbol	formattedLine		650888						
ANR	651657	Symbol	isInVirginLine		650888						
ANR	651658	Symbol	formattedLine . length		650888						
ANR	651659	Symbol	INIT_TYPE		650888						
ANR	651660	Symbol	true		650888						
ANR	651661	Symbol	braceFormatMode		650888						
ANR	651662	Symbol	ENUM_TYPE		650888						
ANR	651663	Symbol	isImmediatelyPostPreprocessor		650888						
ANR	651664	Symbol	currentLineFirstBraceNum		650888						
ANR	651665	Function	ASFormatter :: formatRunIn	5067:0:147833:151279							
ANR	651666	FunctionDef	ASFormatter :: formatRunIn ()		651665	0					
ANR	651667	CompoundStatement		5068:0:147865:151279	651665	0					
ANR	651668	ExpressionStatement	assert ( braceFormatMode == RUN_IN_MODE || braceFormatMode == NONE_MODE )	5069:1:147868:147938	651665	0	True				
ANR	651669	CallExpression	assert ( braceFormatMode == RUN_IN_MODE || braceFormatMode == NONE_MODE )		651665	0					
ANR	651670	Callee	assert		651665	0					
ANR	651671	Identifier	assert		651665	0					
ANR	651672	ArgumentList	braceFormatMode == RUN_IN_MODE || braceFormatMode == NONE_MODE		651665	1					
ANR	651673	Argument	braceFormatMode == RUN_IN_MODE || braceFormatMode == NONE_MODE		651665	0					
ANR	651674	OrExpression	braceFormatMode == RUN_IN_MODE || braceFormatMode == NONE_MODE		651665	0		||			
ANR	651675	EqualityExpression	braceFormatMode == RUN_IN_MODE		651665	0		==			
ANR	651676	Identifier	braceFormatMode		651665	0					
ANR	651677	Identifier	RUN_IN_MODE		651665	1					
ANR	651678	EqualityExpression	braceFormatMode == NONE_MODE		651665	1		==			
ANR	651679	Identifier	braceFormatMode		651665	0					
ANR	651680	Identifier	NONE_MODE		651665	1					
ANR	651681	IfStatement	if ( formattingStyle != STYLE_PICO && ! isOkToBreakBlock ( braceTypeStack -> back ( ) ) )		651665	1					
ANR	651682	Condition	formattingStyle != STYLE_PICO && ! isOkToBreakBlock ( braceTypeStack -> back ( ) )	5072:5:148013:148095	651665	0	True				
ANR	651683	AndExpression	formattingStyle != STYLE_PICO && ! isOkToBreakBlock ( braceTypeStack -> back ( ) )		651665	0		&&			
ANR	651684	EqualityExpression	formattingStyle != STYLE_PICO		651665	0		!=			
ANR	651685	Identifier	formattingStyle		651665	0					
ANR	651686	Identifier	STYLE_PICO		651665	1					
ANR	651687	UnaryOperationExpression	! isOkToBreakBlock ( braceTypeStack -> back ( ) )		651665	1					
ANR	651688	UnaryOperator	!		651665	0					
ANR	651689	CallExpression	isOkToBreakBlock ( braceTypeStack -> back ( ) )		651665	1					
ANR	651690	Callee	isOkToBreakBlock		651665	0					
ANR	651691	Identifier	isOkToBreakBlock		651665	0					
ANR	651692	ArgumentList	braceTypeStack -> back ( )		651665	1					
ANR	651693	Argument	braceTypeStack -> back ( )		651665	0					
ANR	651694	CallExpression	braceTypeStack -> back ( )		651665	0					
ANR	651695	Callee	braceTypeStack -> back		651665	0					
ANR	651696	PtrMemberAccess	braceTypeStack -> back		651665	0					
ANR	651697	Identifier	braceTypeStack		651665	0					
ANR	651698	Identifier	back		651665	1					
ANR	651699	ArgumentList			651665	1					
ANR	651700	ReturnStatement	return ;	5074:2:148100:148106	651665	1	True				
ANR	651701	IdentifierDeclStatement	"size_t lastText = formattedLine . find_last_not_of ( "" \\t"" ) ;"	5077:1:148162:148217	651665	2	True				
ANR	651702	IdentifierDecl	"lastText = formattedLine . find_last_not_of ( "" \\t"" )"		651665	0					
ANR	651703	IdentifierDeclType	size_t		651665	0					
ANR	651704	Identifier	lastText		651665	1					
ANR	651705	AssignmentExpression	"lastText = formattedLine . find_last_not_of ( "" \\t"" )"		651665	2		=			
ANR	651706	Identifier	lastText		651665	0					
ANR	651707	CallExpression	"formattedLine . find_last_not_of ( "" \\t"" )"		651665	1					
ANR	651708	Callee	formattedLine . find_last_not_of		651665	0					
ANR	651709	MemberAccess	formattedLine . find_last_not_of		651665	0					
ANR	651710	Identifier	formattedLine		651665	0					
ANR	651711	Identifier	find_last_not_of		651665	1					
ANR	651712	ArgumentList	""" \\t"""		651665	1					
ANR	651713	Argument	""" \\t"""		651665	0					
ANR	651714	PrimaryExpression	""" \\t"""		651665	0					
ANR	651715	IfStatement	if ( lastText == string :: npos || formattedLine [ lastText ] != '{' )		651665	3					
ANR	651716	Condition	lastText == string :: npos || formattedLine [ lastText ] != '{'	5078:5:148224:148281	651665	0	True				
ANR	651717	OrExpression	lastText == string :: npos || formattedLine [ lastText ] != '{'		651665	0		||			
ANR	651718	EqualityExpression	lastText == string :: npos		651665	0		==			
ANR	651719	Identifier	lastText		651665	0					
ANR	651720	Identifier	string :: npos		651665	1					
ANR	651721	EqualityExpression	formattedLine [ lastText ] != '{'		651665	1		!=			
ANR	651722	ArrayIndexing	formattedLine [ lastText ]		651665	0					
ANR	651723	Identifier	formattedLine		651665	0					
ANR	651724	Identifier	lastText		651665	1					
ANR	651725	PrimaryExpression	'{'		651665	1					
ANR	651726	ReturnStatement	return ;	5079:2:148286:148292	651665	1	True				
ANR	651727	IfStatement	"if ( formattedLine . find_first_not_of ( "" \\t{"" ) != string :: npos )"		651665	4					
ANR	651728	Condition	"formattedLine . find_first_not_of ( "" \\t{"" ) != string :: npos"	5082:5:148344:148398	651665	0	True				
ANR	651729	EqualityExpression	"formattedLine . find_first_not_of ( "" \\t{"" ) != string :: npos"		651665	0		!=			
ANR	651730	CallExpression	"formattedLine . find_first_not_of ( "" \\t{"" )"		651665	0					
ANR	651731	Callee	formattedLine . find_first_not_of		651665	0					
ANR	651732	MemberAccess	formattedLine . find_first_not_of		651665	0					
ANR	651733	Identifier	formattedLine		651665	0					
ANR	651734	Identifier	find_first_not_of		651665	1					
ANR	651735	ArgumentList	""" \\t{"""		651665	1					
ANR	651736	Argument	""" \\t{"""		651665	0					
ANR	651737	PrimaryExpression	""" \\t{"""		651665	0					
ANR	651738	Identifier	string :: npos		651665	1					
ANR	651739	ReturnStatement	return ;	5083:2:148403:148409	651665	1	True				
ANR	651740	IfStatement	"if ( isBraceType ( braceTypeStack -> back ( ) , NAMESPACE_TYPE ) )"		651665	5					
ANR	651741	Condition	"isBraceType ( braceTypeStack -> back ( ) , NAMESPACE_TYPE )"	5085:5:148427:148477	651665	0	True				
ANR	651742	CallExpression	"isBraceType ( braceTypeStack -> back ( ) , NAMESPACE_TYPE )"		651665	0					
ANR	651743	Callee	isBraceType		651665	0					
ANR	651744	Identifier	isBraceType		651665	0					
ANR	651745	ArgumentList	braceTypeStack -> back ( )		651665	1					
ANR	651746	Argument	braceTypeStack -> back ( )		651665	0					
ANR	651747	CallExpression	braceTypeStack -> back ( )		651665	0					
ANR	651748	Callee	braceTypeStack -> back		651665	0					
ANR	651749	PtrMemberAccess	braceTypeStack -> back		651665	0					
ANR	651750	Identifier	braceTypeStack		651665	0					
ANR	651751	Identifier	back		651665	1					
ANR	651752	ArgumentList			651665	1					
ANR	651753	Argument	NAMESPACE_TYPE		651665	1					
ANR	651754	Identifier	NAMESPACE_TYPE		651665	0					
ANR	651755	ReturnStatement	return ;	5086:2:148482:148488	651665	1	True				
ANR	651756	IdentifierDeclStatement	bool extraIndent = false ;	5088:1:148502:148526	651665	6	True				
ANR	651757	IdentifierDecl	extraIndent = false		651665	0					
ANR	651758	IdentifierDeclType	bool		651665	0					
ANR	651759	Identifier	extraIndent		651665	1					
ANR	651760	AssignmentExpression	extraIndent = false		651665	2		=			
ANR	651761	Identifier	false		651665	0					
ANR	651762	Identifier	false		651665	1					
ANR	651763	IdentifierDeclStatement	bool extraHalfIndent = false ;	5089:1:148529:148557	651665	7	True				
ANR	651764	IdentifierDecl	extraHalfIndent = false		651665	0					
ANR	651765	IdentifierDeclType	bool		651665	0					
ANR	651766	Identifier	extraHalfIndent		651665	1					
ANR	651767	AssignmentExpression	extraHalfIndent = false		651665	2		=			
ANR	651768	Identifier	false		651665	0					
ANR	651769	Identifier	false		651665	1					
ANR	651770	ExpressionStatement	isInLineBreak = true	5090:1:148560:148580	651665	8	True				
ANR	651771	AssignmentExpression	isInLineBreak = true		651665	0		=			
ANR	651772	Identifier	isInLineBreak		651665	0					
ANR	651773	Identifier	true		651665	1					
ANR	651774	IfStatement	"if ( isCStyle ( ) && isCharPotentialHeader ( currentLine , charNum ) && ( isBraceType ( braceTypeStack -> back ( ) , CLASS_TYPE ) || ( isBraceType ( braceTypeStack -> back ( ) , STRUCT_TYPE ) && isInIndentableStruct ) ) )"		651665	9					
ANR	651775	Condition	"isCStyle ( ) && isCharPotentialHeader ( currentLine , charNum ) && ( isBraceType ( braceTypeStack -> back ( ) , CLASS_TYPE ) || ( isBraceType ( braceTypeStack -> back ( ) , STRUCT_TYPE ) && isInIndentableStruct ) )"	5093:5:148646:148881	651665	0	True				
ANR	651776	AndExpression	"isCStyle ( ) && isCharPotentialHeader ( currentLine , charNum ) && ( isBraceType ( braceTypeStack -> back ( ) , CLASS_TYPE ) || ( isBraceType ( braceTypeStack -> back ( ) , STRUCT_TYPE ) && isInIndentableStruct ) )"		651665	0		&&			
ANR	651777	CallExpression	isCStyle ( )		651665	0					
ANR	651778	Callee	isCStyle		651665	0					
ANR	651779	Identifier	isCStyle		651665	0					
ANR	651780	ArgumentList			651665	1					
ANR	651781	AndExpression	"isCharPotentialHeader ( currentLine , charNum ) && ( isBraceType ( braceTypeStack -> back ( ) , CLASS_TYPE ) || ( isBraceType ( braceTypeStack -> back ( ) , STRUCT_TYPE ) && isInIndentableStruct ) )"		651665	1		&&			
ANR	651782	CallExpression	"isCharPotentialHeader ( currentLine , charNum )"		651665	0					
ANR	651783	Callee	isCharPotentialHeader		651665	0					
ANR	651784	Identifier	isCharPotentialHeader		651665	0					
ANR	651785	ArgumentList	currentLine		651665	1					
ANR	651786	Argument	currentLine		651665	0					
ANR	651787	Identifier	currentLine		651665	0					
ANR	651788	Argument	charNum		651665	1					
ANR	651789	Identifier	charNum		651665	0					
ANR	651790	OrExpression	"isBraceType ( braceTypeStack -> back ( ) , CLASS_TYPE ) || ( isBraceType ( braceTypeStack -> back ( ) , STRUCT_TYPE ) && isInIndentableStruct )"		651665	1		||			
ANR	651791	CallExpression	"isBraceType ( braceTypeStack -> back ( ) , CLASS_TYPE )"		651665	0					
ANR	651792	Callee	isBraceType		651665	0					
ANR	651793	Identifier	isBraceType		651665	0					
ANR	651794	ArgumentList	braceTypeStack -> back ( )		651665	1					
ANR	651795	Argument	braceTypeStack -> back ( )		651665	0					
ANR	651796	CallExpression	braceTypeStack -> back ( )		651665	0					
ANR	651797	Callee	braceTypeStack -> back		651665	0					
ANR	651798	PtrMemberAccess	braceTypeStack -> back		651665	0					
ANR	651799	Identifier	braceTypeStack		651665	0					
ANR	651800	Identifier	back		651665	1					
ANR	651801	ArgumentList			651665	1					
ANR	651802	Argument	CLASS_TYPE		651665	1					
ANR	651803	Identifier	CLASS_TYPE		651665	0					
ANR	651804	AndExpression	"isBraceType ( braceTypeStack -> back ( ) , STRUCT_TYPE ) && isInIndentableStruct"		651665	1		&&			
ANR	651805	CallExpression	"isBraceType ( braceTypeStack -> back ( ) , STRUCT_TYPE )"		651665	0					
ANR	651806	Callee	isBraceType		651665	0					
ANR	651807	Identifier	isBraceType		651665	0					
ANR	651808	ArgumentList	braceTypeStack -> back ( )		651665	1					
ANR	651809	Argument	braceTypeStack -> back ( )		651665	0					
ANR	651810	CallExpression	braceTypeStack -> back ( )		651665	0					
ANR	651811	Callee	braceTypeStack -> back		651665	0					
ANR	651812	PtrMemberAccess	braceTypeStack -> back		651665	0					
ANR	651813	Identifier	braceTypeStack		651665	0					
ANR	651814	Identifier	back		651665	1					
ANR	651815	ArgumentList			651665	1					
ANR	651816	Argument	STRUCT_TYPE		651665	1					
ANR	651817	Identifier	STRUCT_TYPE		651665	0					
ANR	651818	Identifier	isInIndentableStruct		651665	1					
ANR	651819	CompoundStatement		31:1:1019:1019	651665	1					
ANR	651820	IfStatement	"if ( findKeyword ( currentLine , charNum , AS_PUBLIC ) || findKeyword ( currentLine , charNum , AS_PRIVATE ) || findKeyword ( currentLine , charNum , AS_PROTECTED ) )"		651665	0					
ANR	651821	Condition	"findKeyword ( currentLine , charNum , AS_PUBLIC ) || findKeyword ( currentLine , charNum , AS_PRIVATE ) || findKeyword ( currentLine , charNum , AS_PROTECTED )"	5099:6:148893:149056	651665	0	True				
ANR	651822	OrExpression	"findKeyword ( currentLine , charNum , AS_PUBLIC ) || findKeyword ( currentLine , charNum , AS_PRIVATE ) || findKeyword ( currentLine , charNum , AS_PROTECTED )"		651665	0		||			
ANR	651823	CallExpression	"findKeyword ( currentLine , charNum , AS_PUBLIC )"		651665	0					
ANR	651824	Callee	findKeyword		651665	0					
ANR	651825	Identifier	findKeyword		651665	0					
ANR	651826	ArgumentList	currentLine		651665	1					
ANR	651827	Argument	currentLine		651665	0					
ANR	651828	Identifier	currentLine		651665	0					
ANR	651829	Argument	charNum		651665	1					
ANR	651830	Identifier	charNum		651665	0					
ANR	651831	Argument	AS_PUBLIC		651665	2					
ANR	651832	Identifier	AS_PUBLIC		651665	0					
ANR	651833	OrExpression	"findKeyword ( currentLine , charNum , AS_PRIVATE ) || findKeyword ( currentLine , charNum , AS_PROTECTED )"		651665	1		||			
ANR	651834	CallExpression	"findKeyword ( currentLine , charNum , AS_PRIVATE )"		651665	0					
ANR	651835	Callee	findKeyword		651665	0					
ANR	651836	Identifier	findKeyword		651665	0					
ANR	651837	ArgumentList	currentLine		651665	1					
ANR	651838	Argument	currentLine		651665	0					
ANR	651839	Identifier	currentLine		651665	0					
ANR	651840	Argument	charNum		651665	1					
ANR	651841	Identifier	charNum		651665	0					
ANR	651842	Argument	AS_PRIVATE		651665	2					
ANR	651843	Identifier	AS_PRIVATE		651665	0					
ANR	651844	CallExpression	"findKeyword ( currentLine , charNum , AS_PROTECTED )"		651665	1					
ANR	651845	Callee	findKeyword		651665	0					
ANR	651846	Identifier	findKeyword		651665	0					
ANR	651847	ArgumentList	currentLine		651665	1					
ANR	651848	Argument	currentLine		651665	0					
ANR	651849	Identifier	currentLine		651665	0					
ANR	651850	Argument	charNum		651665	1					
ANR	651851	Identifier	charNum		651665	0					
ANR	651852	Argument	AS_PROTECTED		651665	2					
ANR	651853	Identifier	AS_PROTECTED		651665	0					
ANR	651854	CompoundStatement		35:2:1195:1195	651665	1					
ANR	651855	IfStatement	if ( getModifierIndent ( ) )		651665	0					
ANR	651856	Condition	getModifierIndent ( )	5103:7:149070:149088	651665	0	True				
ANR	651857	CallExpression	getModifierIndent ( )		651665	0					
ANR	651858	Callee	getModifierIndent		651665	0					
ANR	651859	Identifier	getModifierIndent		651665	0					
ANR	651860	ArgumentList			651665	1					
ANR	651861	ExpressionStatement	extraHalfIndent = true	5104:4:149095:149117	651665	1	True				
ANR	651862	AssignmentExpression	extraHalfIndent = true		651665	0		=			
ANR	651863	Identifier	extraHalfIndent		651665	0					
ANR	651864	Identifier	true		651665	1					
ANR	651865	ElseStatement	else		651665	0					
ANR	651866	IfStatement	if ( ! getClassIndent ( ) )		651665	0					
ANR	651867	Condition	! getClassIndent ( )	5105:12:149131:149147	651665	0	True				
ANR	651868	UnaryOperationExpression	! getClassIndent ( )		651665	0					
ANR	651869	UnaryOperator	!		651665	0					
ANR	651870	CallExpression	getClassIndent ( )		651665	1					
ANR	651871	Callee	getClassIndent		651665	0					
ANR	651872	Identifier	getClassIndent		651665	0					
ANR	651873	ArgumentList			651665	1					
ANR	651874	ReturnStatement	return ;	5106:4:149154:149160	651665	1	True				
ANR	651875	ElseStatement	else		651665	0					
ANR	651876	IfStatement	if ( getClassIndent ( ) )		651665	0					
ANR	651877	Condition	getClassIndent ( )	5108:11:149187:149202	651665	0	True				
ANR	651878	CallExpression	getClassIndent ( )		651665	0					
ANR	651879	Callee	getClassIndent		651665	0					
ANR	651880	Identifier	getClassIndent		651665	0					
ANR	651881	ArgumentList			651665	1					
ANR	651882	ExpressionStatement	extraIndent = true	5109:3:149208:149226	651665	1	True				
ANR	651883	AssignmentExpression	extraIndent = true		651665	0		=			
ANR	651884	Identifier	extraIndent		651665	0					
ANR	651885	Identifier	true		651665	1					
ANR	651886	IfStatement	"if ( ! getSwitchIndent ( ) && isCharPotentialHeader ( currentLine , charNum ) && ( findKeyword ( currentLine , charNum , AS_CASE ) || findKeyword ( currentLine , charNum , AS_DEFAULT ) ) )"		651665	10					
ANR	651887	Condition	"! getSwitchIndent ( ) && isCharPotentialHeader ( currentLine , charNum ) && ( findKeyword ( currentLine , charNum , AS_CASE ) || findKeyword ( currentLine , charNum , AS_DEFAULT ) )"	5113:5:149298:149490	651665	0	True				
ANR	651888	AndExpression	"! getSwitchIndent ( ) && isCharPotentialHeader ( currentLine , charNum ) && ( findKeyword ( currentLine , charNum , AS_CASE ) || findKeyword ( currentLine , charNum , AS_DEFAULT ) )"		651665	0		&&			
ANR	651889	UnaryOperationExpression	! getSwitchIndent ( )		651665	0					
ANR	651890	UnaryOperator	!		651665	0					
ANR	651891	CallExpression	getSwitchIndent ( )		651665	1					
ANR	651892	Callee	getSwitchIndent		651665	0					
ANR	651893	Identifier	getSwitchIndent		651665	0					
ANR	651894	ArgumentList			651665	1					
ANR	651895	AndExpression	"isCharPotentialHeader ( currentLine , charNum ) && ( findKeyword ( currentLine , charNum , AS_CASE ) || findKeyword ( currentLine , charNum , AS_DEFAULT ) )"		651665	1		&&			
ANR	651896	CallExpression	"isCharPotentialHeader ( currentLine , charNum )"		651665	0					
ANR	651897	Callee	isCharPotentialHeader		651665	0					
ANR	651898	Identifier	isCharPotentialHeader		651665	0					
ANR	651899	ArgumentList	currentLine		651665	1					
ANR	651900	Argument	currentLine		651665	0					
ANR	651901	Identifier	currentLine		651665	0					
ANR	651902	Argument	charNum		651665	1					
ANR	651903	Identifier	charNum		651665	0					
ANR	651904	OrExpression	"findKeyword ( currentLine , charNum , AS_CASE ) || findKeyword ( currentLine , charNum , AS_DEFAULT )"		651665	1		||			
ANR	651905	CallExpression	"findKeyword ( currentLine , charNum , AS_CASE )"		651665	0					
ANR	651906	Callee	findKeyword		651665	0					
ANR	651907	Identifier	findKeyword		651665	0					
ANR	651908	ArgumentList	currentLine		651665	1					
ANR	651909	Argument	currentLine		651665	0					
ANR	651910	Identifier	currentLine		651665	0					
ANR	651911	Argument	charNum		651665	1					
ANR	651912	Identifier	charNum		651665	0					
ANR	651913	Argument	AS_CASE		651665	2					
ANR	651914	Identifier	AS_CASE		651665	0					
ANR	651915	CallExpression	"findKeyword ( currentLine , charNum , AS_DEFAULT )"		651665	1					
ANR	651916	Callee	findKeyword		651665	0					
ANR	651917	Identifier	findKeyword		651665	0					
ANR	651918	ArgumentList	currentLine		651665	1					
ANR	651919	Argument	currentLine		651665	0					
ANR	651920	Identifier	currentLine		651665	0					
ANR	651921	Argument	charNum		651665	1					
ANR	651922	Identifier	charNum		651665	0					
ANR	651923	Argument	AS_DEFAULT		651665	2					
ANR	651924	Identifier	AS_DEFAULT		651665	0					
ANR	651925	ReturnStatement	return ;	5117:2:149495:149501	651665	1	True				
ANR	651926	IfStatement	"if ( getSwitchIndent ( ) && ! preBraceHeaderStack -> empty ( ) && preBraceHeaderStack -> back ( ) == & AS_SWITCH && ( ( isLegalNameChar ( currentChar ) && ! findKeyword ( currentLine , charNum , AS_CASE ) ) ) )"		651665	11					
ANR	651927	Condition	"getSwitchIndent ( ) && ! preBraceHeaderStack -> empty ( ) && preBraceHeaderStack -> back ( ) == & AS_SWITCH && ( ( isLegalNameChar ( currentChar ) && ! findKeyword ( currentLine , charNum , AS_CASE ) ) )"	5120:5:149558:149776	651665	0	True				
ANR	651928	AndExpression	"getSwitchIndent ( ) && ! preBraceHeaderStack -> empty ( ) && preBraceHeaderStack -> back ( ) == & AS_SWITCH && ( ( isLegalNameChar ( currentChar ) && ! findKeyword ( currentLine , charNum , AS_CASE ) ) )"		651665	0		&&			
ANR	651929	CallExpression	getSwitchIndent ( )		651665	0					
ANR	651930	Callee	getSwitchIndent		651665	0					
ANR	651931	Identifier	getSwitchIndent		651665	0					
ANR	651932	ArgumentList			651665	1					
ANR	651933	AndExpression	"! preBraceHeaderStack -> empty ( ) && preBraceHeaderStack -> back ( ) == & AS_SWITCH && ( ( isLegalNameChar ( currentChar ) && ! findKeyword ( currentLine , charNum , AS_CASE ) ) )"		651665	1		&&			
ANR	651934	UnaryOperationExpression	! preBraceHeaderStack -> empty ( )		651665	0					
ANR	651935	UnaryOperator	!		651665	0					
ANR	651936	CallExpression	preBraceHeaderStack -> empty ( )		651665	1					
ANR	651937	Callee	preBraceHeaderStack -> empty		651665	0					
ANR	651938	PtrMemberAccess	preBraceHeaderStack -> empty		651665	0					
ANR	651939	Identifier	preBraceHeaderStack		651665	0					
ANR	651940	Identifier	empty		651665	1					
ANR	651941	ArgumentList			651665	1					
ANR	651942	AndExpression	"preBraceHeaderStack -> back ( ) == & AS_SWITCH && ( ( isLegalNameChar ( currentChar ) && ! findKeyword ( currentLine , charNum , AS_CASE ) ) )"		651665	1		&&			
ANR	651943	EqualityExpression	preBraceHeaderStack -> back ( ) == & AS_SWITCH		651665	0		==			
ANR	651944	CallExpression	preBraceHeaderStack -> back ( )		651665	0					
ANR	651945	Callee	preBraceHeaderStack -> back		651665	0					
ANR	651946	PtrMemberAccess	preBraceHeaderStack -> back		651665	0					
ANR	651947	Identifier	preBraceHeaderStack		651665	0					
ANR	651948	Identifier	back		651665	1					
ANR	651949	ArgumentList			651665	1					
ANR	651950	UnaryOperationExpression	& AS_SWITCH		651665	1					
ANR	651951	UnaryOperator	&		651665	0					
ANR	651952	Identifier	AS_SWITCH		651665	1					
ANR	651953	AndExpression	"isLegalNameChar ( currentChar ) && ! findKeyword ( currentLine , charNum , AS_CASE )"		651665	1		&&			
ANR	651954	CallExpression	isLegalNameChar ( currentChar )		651665	0					
ANR	651955	Callee	isLegalNameChar		651665	0					
ANR	651956	Identifier	isLegalNameChar		651665	0					
ANR	651957	ArgumentList	currentChar		651665	1					
ANR	651958	Argument	currentChar		651665	0					
ANR	651959	Identifier	currentChar		651665	0					
ANR	651960	UnaryOperationExpression	"! findKeyword ( currentLine , charNum , AS_CASE )"		651665	1					
ANR	651961	UnaryOperator	!		651665	0					
ANR	651962	CallExpression	"findKeyword ( currentLine , charNum , AS_CASE )"		651665	1					
ANR	651963	Callee	findKeyword		651665	0					
ANR	651964	Identifier	findKeyword		651665	0					
ANR	651965	ArgumentList	currentLine		651665	1					
ANR	651966	Argument	currentLine		651665	0					
ANR	651967	Identifier	currentLine		651665	0					
ANR	651968	Argument	charNum		651665	1					
ANR	651969	Identifier	charNum		651665	0					
ANR	651970	Argument	AS_CASE		651665	2					
ANR	651971	Identifier	AS_CASE		651665	0					
ANR	651972	ExpressionStatement	extraIndent = true	5125:2:149781:149799	651665	1	True				
ANR	651973	AssignmentExpression	extraIndent = true		651665	0		=			
ANR	651974	Identifier	extraIndent		651665	0					
ANR	651975	Identifier	true		651665	1					
ANR	651976	ExpressionStatement	isInLineBreak = false	5127:1:149803:149824	651665	12	True				
ANR	651977	AssignmentExpression	isInLineBreak = false		651665	0		=			
ANR	651978	Identifier	isInLineBreak		651665	0					
ANR	651979	Identifier	false		651665	1					
ANR	651980	IfStatement	"if ( formattedLine . length ( ) > lastText + 1 && formattedLine . find_first_not_of ( "" \\t"" , lastText + 1 ) == string :: npos )"		651665	13					
ANR	651981	Condition	"formattedLine . length ( ) > lastText + 1 && formattedLine . find_first_not_of ( "" \\t"" , lastText + 1 ) == string :: npos"	5129:5:149863:149980	651665	0	True				
ANR	651982	AndExpression	"formattedLine . length ( ) > lastText + 1 && formattedLine . find_first_not_of ( "" \\t"" , lastText + 1 ) == string :: npos"		651665	0		&&			
ANR	651983	RelationalExpression	formattedLine . length ( ) > lastText + 1		651665	0		>			
ANR	651984	CallExpression	formattedLine . length ( )		651665	0					
ANR	651985	Callee	formattedLine . length		651665	0					
ANR	651986	MemberAccess	formattedLine . length		651665	0					
ANR	651987	Identifier	formattedLine		651665	0					
ANR	651988	Identifier	length		651665	1					
ANR	651989	ArgumentList			651665	1					
ANR	651990	AdditiveExpression	lastText + 1		651665	1		+			
ANR	651991	Identifier	lastText		651665	0					
ANR	651992	PrimaryExpression	1		651665	1					
ANR	651993	EqualityExpression	"formattedLine . find_first_not_of ( "" \\t"" , lastText + 1 ) == string :: npos"		651665	1		==			
ANR	651994	CallExpression	"formattedLine . find_first_not_of ( "" \\t"" , lastText + 1 )"		651665	0					
ANR	651995	Callee	formattedLine . find_first_not_of		651665	0					
ANR	651996	MemberAccess	formattedLine . find_first_not_of		651665	0					
ANR	651997	Identifier	formattedLine		651665	0					
ANR	651998	Identifier	find_first_not_of		651665	1					
ANR	651999	ArgumentList	""" \\t"""		651665	1					
ANR	652000	Argument	""" \\t"""		651665	0					
ANR	652001	PrimaryExpression	""" \\t"""		651665	0					
ANR	652002	Argument	lastText + 1		651665	1					
ANR	652003	AdditiveExpression	lastText + 1		651665	0		+			
ANR	652004	Identifier	lastText		651665	0					
ANR	652005	PrimaryExpression	1		651665	1					
ANR	652006	Identifier	string :: npos		651665	1					
ANR	652007	ExpressionStatement	formattedLine . erase ( lastText + 1 )	5131:2:149985:150018	651665	1	True				
ANR	652008	CallExpression	formattedLine . erase ( lastText + 1 )		651665	0					
ANR	652009	Callee	formattedLine . erase		651665	0					
ANR	652010	MemberAccess	formattedLine . erase		651665	0					
ANR	652011	Identifier	formattedLine		651665	0					
ANR	652012	Identifier	erase		651665	1					
ANR	652013	ArgumentList	lastText + 1		651665	1					
ANR	652014	Argument	lastText + 1		651665	0					
ANR	652015	AdditiveExpression	lastText + 1		651665	0		+			
ANR	652016	Identifier	lastText		651665	0					
ANR	652017	PrimaryExpression	1		651665	1					
ANR	652018	IfStatement	if ( extraHalfIndent )		651665	14					
ANR	652019	Condition	extraHalfIndent	5133:5:150026:150040	651665	0	True				
ANR	652020	Identifier	extraHalfIndent		651665	0					
ANR	652021	CompoundStatement		68:2:2182:2219	651665	1					
ANR	652022	IdentifierDeclStatement	int indentLength_ = getIndentLength ( ) ;	5135:2:150048:150085	651665	0	True				
ANR	652023	IdentifierDecl	indentLength_ = getIndentLength ( )		651665	0					
ANR	652024	IdentifierDeclType	int		651665	0					
ANR	652025	Identifier	indentLength_		651665	1					
ANR	652026	AssignmentExpression	indentLength_ = getIndentLength ( )		651665	2		=			
ANR	652027	Identifier	indentLength_		651665	0					
ANR	652028	CallExpression	getIndentLength ( )		651665	1					
ANR	652029	Callee	getIndentLength		651665	0					
ANR	652030	Identifier	getIndentLength		651665	0					
ANR	652031	ArgumentList			651665	1					
ANR	652032	ExpressionStatement	runInIndentChars = indentLength_ / 2	5136:2:150089:150125	651665	1	True				
ANR	652033	AssignmentExpression	runInIndentChars = indentLength_ / 2		651665	0		=			
ANR	652034	Identifier	runInIndentChars		651665	0					
ANR	652035	MultiplicativeExpression	indentLength_ / 2		651665	1		/			
ANR	652036	Identifier	indentLength_		651665	0					
ANR	652037	PrimaryExpression	2		651665	1					
ANR	652038	ExpressionStatement	"formattedLine . append ( runInIndentChars - 1 , ' ' )"	5137:2:150129:150176	651665	2	True				
ANR	652039	CallExpression	"formattedLine . append ( runInIndentChars - 1 , ' ' )"		651665	0					
ANR	652040	Callee	formattedLine . append		651665	0					
ANR	652041	MemberAccess	formattedLine . append		651665	0					
ANR	652042	Identifier	formattedLine		651665	0					
ANR	652043	Identifier	append		651665	1					
ANR	652044	ArgumentList	runInIndentChars - 1		651665	1					
ANR	652045	Argument	runInIndentChars - 1		651665	0					
ANR	652046	AdditiveExpression	runInIndentChars - 1		651665	0		-			
ANR	652047	Identifier	runInIndentChars		651665	0					
ANR	652048	PrimaryExpression	1		651665	1					
ANR	652049	Argument	' '		651665	1					
ANR	652050	PrimaryExpression	' '		651665	0					
ANR	652051	ElseStatement	else		651665	0					
ANR	652052	IfStatement	if ( getForceTabIndentation ( ) && getIndentLength ( ) != getTabLength ( ) )		651665	0					
ANR	652053	Condition	getForceTabIndentation ( ) && getIndentLength ( ) != getTabLength ( )	5139:10:150191:150253	651665	0	True				
ANR	652054	AndExpression	getForceTabIndentation ( ) && getIndentLength ( ) != getTabLength ( )		651665	0		&&			
ANR	652055	CallExpression	getForceTabIndentation ( )		651665	0					
ANR	652056	Callee	getForceTabIndentation		651665	0					
ANR	652057	Identifier	getForceTabIndentation		651665	0					
ANR	652058	ArgumentList			651665	1					
ANR	652059	EqualityExpression	getIndentLength ( ) != getTabLength ( )		651665	1		!=			
ANR	652060	CallExpression	getIndentLength ( )		651665	0					
ANR	652061	Callee	getIndentLength		651665	0					
ANR	652062	Identifier	getIndentLength		651665	0					
ANR	652063	ArgumentList			651665	1					
ANR	652064	CallExpression	getTabLength ( )		651665	1					
ANR	652065	Callee	getTabLength		651665	0					
ANR	652066	Identifier	getTabLength		651665	0					
ANR	652067	ArgumentList			651665	1					
ANR	652068	CompoundStatement		82:2:2657:2703	651665	1					
ANR	652069	IdentifierDeclStatement	string indent ;	5142:2:150291:150304	651665	0	True				
ANR	652070	IdentifierDecl	indent		651665	0					
ANR	652071	IdentifierDeclType	string		651665	0					
ANR	652072	Identifier	indent		651665	1					
ANR	652073	IdentifierDeclStatement	int indentLength_ = getIndentLength ( ) ;	5143:2:150308:150345	651665	1	True				
ANR	652074	IdentifierDecl	indentLength_ = getIndentLength ( )		651665	0					
ANR	652075	IdentifierDeclType	int		651665	0					
ANR	652076	Identifier	indentLength_		651665	1					
ANR	652077	AssignmentExpression	indentLength_ = getIndentLength ( )		651665	2		=			
ANR	652078	Identifier	indentLength_		651665	0					
ANR	652079	CallExpression	getIndentLength ( )		651665	1					
ANR	652080	Callee	getIndentLength		651665	0					
ANR	652081	Identifier	getIndentLength		651665	0					
ANR	652082	ArgumentList			651665	1					
ANR	652083	IdentifierDeclStatement	int tabLength_ = getTabLength ( ) ;	5144:2:150349:150380	651665	2	True				
ANR	652084	IdentifierDecl	tabLength_ = getTabLength ( )		651665	0					
ANR	652085	IdentifierDeclType	int		651665	0					
ANR	652086	Identifier	tabLength_		651665	1					
ANR	652087	AssignmentExpression	tabLength_ = getTabLength ( )		651665	2		=			
ANR	652088	Identifier	tabLength_		651665	0					
ANR	652089	CallExpression	getTabLength ( )		651665	1					
ANR	652090	Callee	getTabLength		651665	0					
ANR	652091	Identifier	getTabLength		651665	0					
ANR	652092	ArgumentList			651665	1					
ANR	652093	ExpressionStatement	"indent . append ( indentLength_ , ' ' )"	5145:2:150384:150417	651665	3	True				
ANR	652094	CallExpression	"indent . append ( indentLength_ , ' ' )"		651665	0					
ANR	652095	Callee	indent . append		651665	0					
ANR	652096	MemberAccess	indent . append		651665	0					
ANR	652097	Identifier	indent		651665	0					
ANR	652098	Identifier	append		651665	1					
ANR	652099	ArgumentList	indentLength_		651665	1					
ANR	652100	Argument	indentLength_		651665	0					
ANR	652101	Identifier	indentLength_		651665	0					
ANR	652102	Argument	' '		651665	1					
ANR	652103	PrimaryExpression	' '		651665	0					
ANR	652104	IfStatement	if ( extraIndent )		651665	4					
ANR	652105	Condition	extraIndent	5146:6:150425:150435	651665	0	True				
ANR	652106	Identifier	extraIndent		651665	0					
ANR	652107	ExpressionStatement	"indent . append ( indentLength_ , ' ' )"	5147:3:150441:150474	651665	1	True				
ANR	652108	CallExpression	"indent . append ( indentLength_ , ' ' )"		651665	0					
ANR	652109	Callee	indent . append		651665	0					
ANR	652110	MemberAccess	indent . append		651665	0					
ANR	652111	Identifier	indent		651665	0					
ANR	652112	Identifier	append		651665	1					
ANR	652113	ArgumentList	indentLength_		651665	1					
ANR	652114	Argument	indentLength_		651665	0					
ANR	652115	Identifier	indentLength_		651665	0					
ANR	652116	Argument	' '		651665	1					
ANR	652117	PrimaryExpression	' '		651665	0					
ANR	652118	IdentifierDeclStatement	size_t tabCount = indent . length ( ) / tabLength_ ;	5149:2:150523:150569	651665	5	True				
ANR	652119	IdentifierDecl	tabCount = indent . length ( ) / tabLength_		651665	0					
ANR	652120	IdentifierDeclType	size_t		651665	0					
ANR	652121	Identifier	tabCount		651665	1					
ANR	652122	AssignmentExpression	tabCount = indent . length ( ) / tabLength_		651665	2		=			
ANR	652123	Identifier	tabCount		651665	0					
ANR	652124	MultiplicativeExpression	indent . length ( ) / tabLength_		651665	1		/			
ANR	652125	CallExpression	indent . length ( )		651665	0					
ANR	652126	Callee	indent . length		651665	0					
ANR	652127	MemberAccess	indent . length		651665	0					
ANR	652128	Identifier	indent		651665	0					
ANR	652129	Identifier	length		651665	1					
ANR	652130	ArgumentList			651665	1					
ANR	652131	Identifier	tabLength_		651665	1					
ANR	652132	ExpressionStatement	"indent . replace ( 0U , tabCount * tabLength_ , tabCount , '\\t' )"	5150:2:150599:150656	651665	6	True				
ANR	652133	CallExpression	"indent . replace ( 0U , tabCount * tabLength_ , tabCount , '\\t' )"		651665	0					
ANR	652134	Callee	indent . replace		651665	0					
ANR	652135	MemberAccess	indent . replace		651665	0					
ANR	652136	Identifier	indent		651665	0					
ANR	652137	Identifier	replace		651665	1					
ANR	652138	ArgumentList	0U		651665	1					
ANR	652139	Argument	0U		651665	0					
ANR	652140	PrimaryExpression	0U		651665	0					
ANR	652141	Argument	tabCount * tabLength_		651665	1					
ANR	652142	MultiplicativeExpression	tabCount * tabLength_		651665	0		*			
ANR	652143	Identifier	tabCount		651665	0					
ANR	652144	Identifier	tabLength_		651665	1					
ANR	652145	Argument	tabCount		651665	2					
ANR	652146	Identifier	tabCount		651665	0					
ANR	652147	Argument	'\\t'		651665	3					
ANR	652148	PrimaryExpression	'\\t'		651665	0					
ANR	652149	ExpressionStatement	runInIndentChars = indentLength_	5151:2:150660:150692	651665	7	True				
ANR	652150	AssignmentExpression	runInIndentChars = indentLength_		651665	0		=			
ANR	652151	Identifier	runInIndentChars		651665	0					
ANR	652152	Identifier	indentLength_		651665	1					
ANR	652153	IfStatement	if ( indent [ 0 ] == ' ' )		651665	8					
ANR	652154	Condition	indent [ 0 ] == ' '	5152:6:150700:150715	651665	0	True				
ANR	652155	EqualityExpression	indent [ 0 ] == ' '		651665	0		==			
ANR	652156	ArrayIndexing	indent [ 0 ]		651665	0					
ANR	652157	Identifier	indent		651665	0					
ANR	652158	PrimaryExpression	0		651665	1					
ANR	652159	PrimaryExpression	' '		651665	1					
ANR	652160	ExpressionStatement	"indent . erase ( 0 , 1 )"	5153:3:150742:150760	651665	1	True				
ANR	652161	CallExpression	"indent . erase ( 0 , 1 )"		651665	0					
ANR	652162	Callee	indent . erase		651665	0					
ANR	652163	MemberAccess	indent . erase		651665	0					
ANR	652164	Identifier	indent		651665	0					
ANR	652165	Identifier	erase		651665	1					
ANR	652166	ArgumentList	0		651665	1					
ANR	652167	Argument	0		651665	0					
ANR	652168	PrimaryExpression	0		651665	0					
ANR	652169	Argument	1		651665	1					
ANR	652170	PrimaryExpression	1		651665	0					
ANR	652171	ExpressionStatement	formattedLine . append ( indent )	5154:2:150764:150792	651665	9	True				
ANR	652172	CallExpression	formattedLine . append ( indent )		651665	0					
ANR	652173	Callee	formattedLine . append		651665	0					
ANR	652174	MemberAccess	formattedLine . append		651665	0					
ANR	652175	Identifier	formattedLine		651665	0					
ANR	652176	Identifier	append		651665	1					
ANR	652177	ArgumentList	indent		651665	1					
ANR	652178	Argument	indent		651665	0					
ANR	652179	Identifier	indent		651665	0					
ANR	652180	ElseStatement	else		651665	0					
ANR	652181	IfStatement	"if ( getIndentString ( ) == ""\\t"" )"		651665	0					
ANR	652182	Condition	"getIndentString ( ) == ""\\t"""	5156:10:150807:150831	651665	0	True				
ANR	652183	EqualityExpression	"getIndentString ( ) == ""\\t"""		651665	0		==			
ANR	652184	CallExpression	getIndentString ( )		651665	0					
ANR	652185	Callee	getIndentString		651665	0					
ANR	652186	Identifier	getIndentString		651665	0					
ANR	652187	ArgumentList			651665	1					
ANR	652188	PrimaryExpression	"""\\t"""		651665	1					
ANR	652189	CompoundStatement		90:1:2969:2969	651665	1					
ANR	652190	ExpressionStatement	"appendChar ( '\\t' , false )"	5158:2:150839:150862	651665	0	True				
ANR	652191	CallExpression	"appendChar ( '\\t' , false )"		651665	0					
ANR	652192	Callee	appendChar		651665	0					
ANR	652193	Identifier	appendChar		651665	0					
ANR	652194	ArgumentList	'\\t'		651665	1					
ANR	652195	Argument	'\\t'		651665	0					
ANR	652196	PrimaryExpression	'\\t'		651665	0					
ANR	652197	Argument	false		651665	1					
ANR	652198	Identifier	false		651665	0					
ANR	652199	ExpressionStatement	runInIndentChars = 2	5159:2:150866:150886	651665	1	True				
ANR	652200	AssignmentExpression	runInIndentChars = 2		651665	0		=			
ANR	652201	Identifier	runInIndentChars		651665	0					
ANR	652202	PrimaryExpression	2		651665	1					
ANR	652203	IfStatement	if ( extraIndent )		651665	2					
ANR	652204	Condition	extraIndent	5160:6:150923:150933	651665	0	True				
ANR	652205	Identifier	extraIndent		651665	0					
ANR	652206	CompoundStatement		94:2:3072:3072	651665	1					
ANR	652207	ExpressionStatement	"appendChar ( '\\t' , false )"	5162:3:150943:150966	651665	0	True				
ANR	652208	CallExpression	"appendChar ( '\\t' , false )"		651665	0					
ANR	652209	Callee	appendChar		651665	0					
ANR	652210	Identifier	appendChar		651665	0					
ANR	652211	ArgumentList	'\\t'		651665	1					
ANR	652212	Argument	'\\t'		651665	0					
ANR	652213	PrimaryExpression	'\\t'		651665	0					
ANR	652214	Argument	false		651665	1					
ANR	652215	Identifier	false		651665	0					
ANR	652216	ExpressionStatement	runInIndentChars ++	5163:3:150971:150989	651665	1	True				
ANR	652217	PostIncDecOperationExpression	runInIndentChars ++		651665	0					
ANR	652218	Identifier	runInIndentChars		651665	0					
ANR	652219	IncDec	++		651665	1					
ANR	652220	ElseStatement	else		651665	0					
ANR	652221	CompoundStatement		101:2:3153:3190	651665	0					
ANR	652222	IdentifierDeclStatement	int indentLength_ = getIndentLength ( ) ;	5168:2:151019:151056	651665	0	True				
ANR	652223	IdentifierDecl	indentLength_ = getIndentLength ( )		651665	0					
ANR	652224	IdentifierDeclType	int		651665	0					
ANR	652225	Identifier	indentLength_		651665	1					
ANR	652226	AssignmentExpression	indentLength_ = getIndentLength ( )		651665	2		=			
ANR	652227	Identifier	indentLength_		651665	0					
ANR	652228	CallExpression	getIndentLength ( )		651665	1					
ANR	652229	Callee	getIndentLength		651665	0					
ANR	652230	Identifier	getIndentLength		651665	0					
ANR	652231	ArgumentList			651665	1					
ANR	652232	ExpressionStatement	"formattedLine . append ( indentLength_ - 1 , ' ' )"	5169:2:151060:151104	651665	1	True				
ANR	652233	CallExpression	"formattedLine . append ( indentLength_ - 1 , ' ' )"		651665	0					
ANR	652234	Callee	formattedLine . append		651665	0					
ANR	652235	MemberAccess	formattedLine . append		651665	0					
ANR	652236	Identifier	formattedLine		651665	0					
ANR	652237	Identifier	append		651665	1					
ANR	652238	ArgumentList	indentLength_ - 1		651665	1					
ANR	652239	Argument	indentLength_ - 1		651665	0					
ANR	652240	AdditiveExpression	indentLength_ - 1		651665	0		-			
ANR	652241	Identifier	indentLength_		651665	0					
ANR	652242	PrimaryExpression	1		651665	1					
ANR	652243	Argument	' '		651665	1					
ANR	652244	PrimaryExpression	' '		651665	0					
ANR	652245	ExpressionStatement	runInIndentChars = indentLength_	5170:2:151108:151140	651665	2	True				
ANR	652246	AssignmentExpression	runInIndentChars = indentLength_		651665	0		=			
ANR	652247	Identifier	runInIndentChars		651665	0					
ANR	652248	Identifier	indentLength_		651665	1					
ANR	652249	IfStatement	if ( extraIndent )		651665	3					
ANR	652250	Condition	extraIndent	5171:6:151148:151158	651665	0	True				
ANR	652251	Identifier	extraIndent		651665	0					
ANR	652252	CompoundStatement		105:2:3297:3297	651665	1					
ANR	652253	ExpressionStatement	"formattedLine . append ( indentLength_ , ' ' )"	5173:3:151168:151208	651665	0	True				
ANR	652254	CallExpression	"formattedLine . append ( indentLength_ , ' ' )"		651665	0					
ANR	652255	Callee	formattedLine . append		651665	0					
ANR	652256	MemberAccess	formattedLine . append		651665	0					
ANR	652257	Identifier	formattedLine		651665	0					
ANR	652258	Identifier	append		651665	1					
ANR	652259	ArgumentList	indentLength_		651665	1					
ANR	652260	Argument	indentLength_		651665	0					
ANR	652261	Identifier	indentLength_		651665	0					
ANR	652262	Argument	' '		651665	1					
ANR	652263	PrimaryExpression	' '		651665	0					
ANR	652264	ExpressionStatement	runInIndentChars += indentLength_	5174:3:151213:151246	651665	1	True				
ANR	652265	AssignmentExpression	runInIndentChars += indentLength_		651665	0		+=			
ANR	652266	Identifier	runInIndentChars		651665	0					
ANR	652267	Identifier	indentLength_		651665	1					
ANR	652268	ExpressionStatement	isInBraceRunIn = true	5177:1:151256:151277	651665	15	True				
ANR	652269	AssignmentExpression	isInBraceRunIn = true		651665	0		=			
ANR	652270	Identifier	isInBraceRunIn		651665	0					
ANR	652271	Identifier	true		651665	1					
ANR	652272	ReturnType	void		651665	1					
ANR	652273	Identifier	ASFormatter :: formatRunIn		651665	2					
ANR	652274	ParameterList			651665	3					
ANR	652275	CFGEntryNode	ENTRY		651665		True				
ANR	652276	CFGExitNode	EXIT		651665		True				
ANR	652277	Symbol	* formattedLine		651665						
ANR	652278	Symbol	RUN_IN_MODE		651665						
ANR	652279	Symbol	* lastText		651665						
ANR	652280	Symbol	isLegalNameChar		651665						
ANR	652281	Symbol	STRUCT_TYPE		651665						
ANR	652282	Symbol	formattedLine . find_last_not_of		651665						
ANR	652283	Symbol	formattingStyle		651665						
ANR	652284	Symbol	NAMESPACE_TYPE		651665						
ANR	652285	Symbol	AS_PROTECTED		651665						
ANR	652286	Symbol	STYLE_PICO		651665						
ANR	652287	Symbol	isBraceType		651665						
ANR	652288	Symbol	isOkToBreakBlock		651665						
ANR	652289	Symbol	getClassIndent		651665						
ANR	652290	Symbol	formattedLine . find_first_not_of		651665						
ANR	652291	Symbol	CLASS_TYPE		651665						
ANR	652292	Symbol	tabCount		651665						
ANR	652293	Symbol	currentChar		651665						
ANR	652294	Symbol	AS_PRIVATE		651665						
ANR	652295	Symbol	* braceTypeStack		651665						
ANR	652296	Symbol	extraHalfIndent		651665						
ANR	652297	Symbol	extraIndent		651665						
ANR	652298	Symbol	isInLineBreak		651665						
ANR	652299	Symbol	getForceTabIndentation		651665						
ANR	652300	Symbol	indentLength_		651665						
ANR	652301	Symbol	runInIndentChars		651665						
ANR	652302	Symbol	AS_PUBLIC		651665						
ANR	652303	Symbol	true		651665						
ANR	652304	Symbol	findKeyword		651665						
ANR	652305	Symbol	braceFormatMode		651665						
ANR	652306	Symbol	isCStyle		651665						
ANR	652307	Symbol	tabLength_		651665						
ANR	652308	Symbol	* indent		651665						
ANR	652309	Symbol	getIndentString		651665						
ANR	652310	Symbol	braceTypeStack		651665						
ANR	652311	Symbol	indent		651665						
ANR	652312	Symbol	string :: npos		651665						
ANR	652313	Symbol	isInIndentableStruct		651665						
ANR	652314	Symbol	NONE_MODE		651665						
ANR	652315	Symbol	AS_DEFAULT		651665						
ANR	652316	Symbol	getModifierIndent		651665						
ANR	652317	Symbol	charNum		651665						
ANR	652318	Symbol	* preBraceHeaderStack		651665						
ANR	652319	Symbol	currentLine		651665						
ANR	652320	Symbol	lastText		651665						
ANR	652321	Symbol	getIndentLength		651665						
ANR	652322	Symbol	& AS_SWITCH		651665						
ANR	652323	Symbol	false		651665						
ANR	652324	Symbol	AS_CASE		651665						
ANR	652325	Symbol	getSwitchIndent		651665						
ANR	652326	Symbol	braceTypeStack -> back		651665						
ANR	652327	Symbol	formattedLine		651665						
ANR	652328	Symbol	getTabLength		651665						
ANR	652329	Symbol	isCharPotentialHeader		651665						
ANR	652330	Symbol	formattedLine . length		651665						
ANR	652331	Symbol	indent . length		651665						
ANR	652332	Symbol	preBraceHeaderStack -> empty		651665						
ANR	652333	Symbol	preBraceHeaderStack -> back		651665						
ANR	652334	Symbol	isInBraceRunIn		651665						
ANR	652335	Symbol	preBraceHeaderStack		651665						
ANR	652336	Function	ASFormatter :: formatArrayRunIn	5183:0:151352:152167							
ANR	652337	FunctionDef	ASFormatter :: formatArrayRunIn ()		652336	0					
ANR	652338	CompoundStatement		5184:0:151389:152167	652336	0					
ANR	652339	ExpressionStatement	"assert ( isBraceType ( braceTypeStack -> back ( ) , ARRAY_TYPE ) )"	5185:1:151392:151447	652336	0	True				
ANR	652340	CallExpression	"assert ( isBraceType ( braceTypeStack -> back ( ) , ARRAY_TYPE ) )"		652336	0					
ANR	652341	Callee	assert		652336	0					
ANR	652342	Identifier	assert		652336	0					
ANR	652343	ArgumentList	"isBraceType ( braceTypeStack -> back ( ) , ARRAY_TYPE )"		652336	1					
ANR	652344	Argument	"isBraceType ( braceTypeStack -> back ( ) , ARRAY_TYPE )"		652336	0					
ANR	652345	CallExpression	"isBraceType ( braceTypeStack -> back ( ) , ARRAY_TYPE )"		652336	0					
ANR	652346	Callee	isBraceType		652336	0					
ANR	652347	Identifier	isBraceType		652336	0					
ANR	652348	ArgumentList	braceTypeStack -> back ( )		652336	1					
ANR	652349	Argument	braceTypeStack -> back ( )		652336	0					
ANR	652350	CallExpression	braceTypeStack -> back ( )		652336	0					
ANR	652351	Callee	braceTypeStack -> back		652336	0					
ANR	652352	PtrMemberAccess	braceTypeStack -> back		652336	0					
ANR	652353	Identifier	braceTypeStack		652336	0					
ANR	652354	Identifier	back		652336	1					
ANR	652355	ArgumentList			652336	1					
ANR	652356	Argument	ARRAY_TYPE		652336	1					
ANR	652357	Identifier	ARRAY_TYPE		652336	0					
ANR	652358	IfStatement	"if ( formattedLine . find_first_not_of ( "" \\t{"" ) != string :: npos )"		652336	1					
ANR	652359	Condition	"formattedLine . find_first_not_of ( "" \\t{"" ) != string :: npos"	5188:5:151489:151543	652336	0	True				
ANR	652360	EqualityExpression	"formattedLine . find_first_not_of ( "" \\t{"" ) != string :: npos"		652336	0		!=			
ANR	652361	CallExpression	"formattedLine . find_first_not_of ( "" \\t{"" )"		652336	0					
ANR	652362	Callee	formattedLine . find_first_not_of		652336	0					
ANR	652363	MemberAccess	formattedLine . find_first_not_of		652336	0					
ANR	652364	Identifier	formattedLine		652336	0					
ANR	652365	Identifier	find_first_not_of		652336	1					
ANR	652366	ArgumentList	""" \\t{"""		652336	1					
ANR	652367	Argument	""" \\t{"""		652336	0					
ANR	652368	PrimaryExpression	""" \\t{"""		652336	0					
ANR	652369	Identifier	string :: npos		652336	1					
ANR	652370	ReturnStatement	return ;	5189:2:151548:151554	652336	1	True				
ANR	652371	IdentifierDeclStatement	"size_t lastText = formattedLine . find_last_not_of ( "" \\t"" ) ;"	5191:1:151558:151613	652336	2	True				
ANR	652372	IdentifierDecl	"lastText = formattedLine . find_last_not_of ( "" \\t"" )"		652336	0					
ANR	652373	IdentifierDeclType	size_t		652336	0					
ANR	652374	Identifier	lastText		652336	1					
ANR	652375	AssignmentExpression	"lastText = formattedLine . find_last_not_of ( "" \\t"" )"		652336	2		=			
ANR	652376	Identifier	lastText		652336	0					
ANR	652377	CallExpression	"formattedLine . find_last_not_of ( "" \\t"" )"		652336	1					
ANR	652378	Callee	formattedLine . find_last_not_of		652336	0					
ANR	652379	MemberAccess	formattedLine . find_last_not_of		652336	0					
ANR	652380	Identifier	formattedLine		652336	0					
ANR	652381	Identifier	find_last_not_of		652336	1					
ANR	652382	ArgumentList	""" \\t"""		652336	1					
ANR	652383	Argument	""" \\t"""		652336	0					
ANR	652384	PrimaryExpression	""" \\t"""		652336	0					
ANR	652385	IfStatement	if ( lastText == string :: npos || formattedLine [ lastText ] != '{' )		652336	3					
ANR	652386	Condition	lastText == string :: npos || formattedLine [ lastText ] != '{'	5192:5:151620:151677	652336	0	True				
ANR	652387	OrExpression	lastText == string :: npos || formattedLine [ lastText ] != '{'		652336	0		||			
ANR	652388	EqualityExpression	lastText == string :: npos		652336	0		==			
ANR	652389	Identifier	lastText		652336	0					
ANR	652390	Identifier	string :: npos		652336	1					
ANR	652391	EqualityExpression	formattedLine [ lastText ] != '{'		652336	1		!=			
ANR	652392	ArrayIndexing	formattedLine [ lastText ]		652336	0					
ANR	652393	Identifier	formattedLine		652336	0					
ANR	652394	Identifier	lastText		652336	1					
ANR	652395	PrimaryExpression	'{'		652336	1					
ANR	652396	ReturnStatement	return ;	5193:2:151682:151688	652336	1	True				
ANR	652397	IfStatement	"if ( formattedLine . length ( ) > lastText + 1 && formattedLine . find_first_not_of ( "" \\t"" , lastText + 1 ) == string :: npos )"		652336	4					
ANR	652398	Condition	"formattedLine . length ( ) > lastText + 1 && formattedLine . find_first_not_of ( "" \\t"" , lastText + 1 ) == string :: npos"	5196:5:151727:151844	652336	0	True				
ANR	652399	AndExpression	"formattedLine . length ( ) > lastText + 1 && formattedLine . find_first_not_of ( "" \\t"" , lastText + 1 ) == string :: npos"		652336	0		&&			
ANR	652400	RelationalExpression	formattedLine . length ( ) > lastText + 1		652336	0		>			
ANR	652401	CallExpression	formattedLine . length ( )		652336	0					
ANR	652402	Callee	formattedLine . length		652336	0					
ANR	652403	MemberAccess	formattedLine . length		652336	0					
ANR	652404	Identifier	formattedLine		652336	0					
ANR	652405	Identifier	length		652336	1					
ANR	652406	ArgumentList			652336	1					
ANR	652407	AdditiveExpression	lastText + 1		652336	1		+			
ANR	652408	Identifier	lastText		652336	0					
ANR	652409	PrimaryExpression	1		652336	1					
ANR	652410	EqualityExpression	"formattedLine . find_first_not_of ( "" \\t"" , lastText + 1 ) == string :: npos"		652336	1		==			
ANR	652411	CallExpression	"formattedLine . find_first_not_of ( "" \\t"" , lastText + 1 )"		652336	0					
ANR	652412	Callee	formattedLine . find_first_not_of		652336	0					
ANR	652413	MemberAccess	formattedLine . find_first_not_of		652336	0					
ANR	652414	Identifier	formattedLine		652336	0					
ANR	652415	Identifier	find_first_not_of		652336	1					
ANR	652416	ArgumentList	""" \\t"""		652336	1					
ANR	652417	Argument	""" \\t"""		652336	0					
ANR	652418	PrimaryExpression	""" \\t"""		652336	0					
ANR	652419	Argument	lastText + 1		652336	1					
ANR	652420	AdditiveExpression	lastText + 1		652336	0		+			
ANR	652421	Identifier	lastText		652336	0					
ANR	652422	PrimaryExpression	1		652336	1					
ANR	652423	Identifier	string :: npos		652336	1					
ANR	652424	ExpressionStatement	formattedLine . erase ( lastText + 1 )	5198:2:151849:151882	652336	1	True				
ANR	652425	CallExpression	formattedLine . erase ( lastText + 1 )		652336	0					
ANR	652426	Callee	formattedLine . erase		652336	0					
ANR	652427	MemberAccess	formattedLine . erase		652336	0					
ANR	652428	Identifier	formattedLine		652336	0					
ANR	652429	Identifier	erase		652336	1					
ANR	652430	ArgumentList	lastText + 1		652336	1					
ANR	652431	Argument	lastText + 1		652336	0					
ANR	652432	AdditiveExpression	lastText + 1		652336	0		+			
ANR	652433	Identifier	lastText		652336	0					
ANR	652434	PrimaryExpression	1		652336	1					
ANR	652435	IfStatement	"if ( getIndentString ( ) == ""\\t"" )"		652336	5					
ANR	652436	Condition	"getIndentString ( ) == ""\\t"""	5200:5:151890:151914	652336	0	True				
ANR	652437	EqualityExpression	"getIndentString ( ) == ""\\t"""		652336	0		==			
ANR	652438	CallExpression	getIndentString ( )		652336	0					
ANR	652439	Callee	getIndentString		652336	0					
ANR	652440	Identifier	getIndentString		652336	0					
ANR	652441	ArgumentList			652336	1					
ANR	652442	PrimaryExpression	"""\\t"""		652336	1					
ANR	652443	CompoundStatement		18:1:528:528	652336	1					
ANR	652444	ExpressionStatement	"appendChar ( '\\t' , false )"	5202:2:151922:151945	652336	0	True				
ANR	652445	CallExpression	"appendChar ( '\\t' , false )"		652336	0					
ANR	652446	Callee	appendChar		652336	0					
ANR	652447	Identifier	appendChar		652336	0					
ANR	652448	ArgumentList	'\\t'		652336	1					
ANR	652449	Argument	'\\t'		652336	0					
ANR	652450	PrimaryExpression	'\\t'		652336	0					
ANR	652451	Argument	false		652336	1					
ANR	652452	Identifier	false		652336	0					
ANR	652453	ExpressionStatement	runInIndentChars = 2	5203:2:151949:151969	652336	1	True				
ANR	652454	AssignmentExpression	runInIndentChars = 2		652336	0		=			
ANR	652455	Identifier	runInIndentChars		652336	0					
ANR	652456	PrimaryExpression	2		652336	1					
ANR	652457	ElseStatement	else		652336	0					
ANR	652458	CompoundStatement		24:2:624:654	652336	0					
ANR	652459	IdentifierDeclStatement	int indent = getIndentLength ( ) ;	5207:2:152014:152044	652336	0	True				
ANR	652460	IdentifierDecl	indent = getIndentLength ( )		652336	0					
ANR	652461	IdentifierDeclType	int		652336	0					
ANR	652462	Identifier	indent		652336	1					
ANR	652463	AssignmentExpression	indent = getIndentLength ( )		652336	2		=			
ANR	652464	Identifier	indent		652336	0					
ANR	652465	CallExpression	getIndentLength ( )		652336	1					
ANR	652466	Callee	getIndentLength		652336	0					
ANR	652467	Identifier	getIndentLength		652336	0					
ANR	652468	ArgumentList			652336	1					
ANR	652469	ExpressionStatement	"formattedLine . append ( indent - 1 , ' ' )"	5208:2:152048:152085	652336	1	True				
ANR	652470	CallExpression	"formattedLine . append ( indent - 1 , ' ' )"		652336	0					
ANR	652471	Callee	formattedLine . append		652336	0					
ANR	652472	MemberAccess	formattedLine . append		652336	0					
ANR	652473	Identifier	formattedLine		652336	0					
ANR	652474	Identifier	append		652336	1					
ANR	652475	ArgumentList	indent - 1		652336	1					
ANR	652476	Argument	indent - 1		652336	0					
ANR	652477	AdditiveExpression	indent - 1		652336	0		-			
ANR	652478	Identifier	indent		652336	0					
ANR	652479	PrimaryExpression	1		652336	1					
ANR	652480	Argument	' '		652336	1					
ANR	652481	PrimaryExpression	' '		652336	0					
ANR	652482	ExpressionStatement	runInIndentChars = indent	5209:2:152089:152114	652336	2	True				
ANR	652483	AssignmentExpression	runInIndentChars = indent		652336	0		=			
ANR	652484	Identifier	runInIndentChars		652336	0					
ANR	652485	Identifier	indent		652336	1					
ANR	652486	ExpressionStatement	isInBraceRunIn = true	5211:1:152120:152141	652336	6	True				
ANR	652487	AssignmentExpression	isInBraceRunIn = true		652336	0		=			
ANR	652488	Identifier	isInBraceRunIn		652336	0					
ANR	652489	Identifier	true		652336	1					
ANR	652490	ExpressionStatement	isInLineBreak = false	5212:1:152144:152165	652336	7	True				
ANR	652491	AssignmentExpression	isInLineBreak = false		652336	0		=			
ANR	652492	Identifier	isInLineBreak		652336	0					
ANR	652493	Identifier	false		652336	1					
ANR	652494	ReturnType	void		652336	1					
ANR	652495	Identifier	ASFormatter :: formatArrayRunIn		652336	2					
ANR	652496	ParameterList			652336	3					
ANR	652497	CFGEntryNode	ENTRY		652336		True				
ANR	652498	CFGExitNode	EXIT		652336		True				
ANR	652499	Symbol	lastText		652336						
ANR	652500	Symbol	getIndentString		652336						
ANR	652501	Symbol	* formattedLine		652336						
ANR	652502	Symbol	braceTypeStack		652336						
ANR	652503	Symbol	getIndentLength		652336						
ANR	652504	Symbol	* lastText		652336						
ANR	652505	Symbol	* braceTypeStack		652336						
ANR	652506	Symbol	indent		652336						
ANR	652507	Symbol	isInLineBreak		652336						
ANR	652508	Symbol	ARRAY_TYPE		652336						
ANR	652509	Symbol	string :: npos		652336						
ANR	652510	Symbol	false		652336						
ANR	652511	Symbol	braceTypeStack -> back		652336						
ANR	652512	Symbol	formattedLine		652336						
ANR	652513	Symbol	formattedLine . find_last_not_of		652336						
ANR	652514	Symbol	runInIndentChars		652336						
ANR	652515	Symbol	formattedLine . length		652336						
ANR	652516	Symbol	true		652336						
ANR	652517	Symbol	isBraceType		652336						
ANR	652518	Symbol	isInBraceRunIn		652336						
ANR	652519	Symbol	formattedLine . find_first_not_of		652336						
ANR	652520	Function	ASFormatter :: deleteContainer	5219:0:152284:152451							
ANR	652521	FunctionDef	ASFormatter :: deleteContainer (vector < BraceType > * & container)		652520	0					
ANR	652522	CompoundStatement		5220:0:152349:152451	652520	0					
ANR	652523	IfStatement	if ( container != nullptr )		652520	0					
ANR	652524	Condition	container != nullptr	5221:5:152356:152375	652520	0	True				
ANR	652525	EqualityExpression	container != nullptr		652520	0		!=			
ANR	652526	Identifier	container		652520	0					
ANR	652527	Identifier	nullptr		652520	1					
ANR	652528	CompoundStatement		3:1:29:29	652520	1					
ANR	652529	ExpressionStatement	container -> clear ( )	5223:2:152383:152401	652520	0	True				
ANR	652530	CallExpression	container -> clear ( )		652520	0					
ANR	652531	Callee	container -> clear		652520	0					
ANR	652532	PtrMemberAccess	container -> clear		652520	0					
ANR	652533	Identifier	container		652520	0					
ANR	652534	Identifier	clear		652520	1					
ANR	652535	ArgumentList			652520	1					
ANR	652536	Statement	delete	5224:2:152405:152410	652520	1	True				
ANR	652537	ExpressionStatement	container	5224:9:152412:152423	652520	2	True				
ANR	652538	Identifier	container		652520	0					
ANR	652539	ExpressionStatement	container = nullptr	5225:2:152427:152446	652520	3	True				
ANR	652540	AssignmentExpression	container = nullptr		652520	0		=			
ANR	652541	Identifier	container		652520	0					
ANR	652542	Identifier	nullptr		652520	1					
ANR	652543	ReturnType	void		652520	1					
ANR	652544	Identifier	ASFormatter :: deleteContainer		652520	2					
ANR	652545	ParameterList	vector < BraceType > * & container		652520	3					
ANR	652546	Parameter	vector < BraceType > * & container	5219:34:152318:152346	652520	0	True				
ANR	652547	ParameterType	vector < BraceType > * &		652520	0					
ANR	652548	Identifier	container		652520	1					
ANR	652549	CFGEntryNode	ENTRY		652520		True				
ANR	652550	CFGExitNode	EXIT		652520		True				
ANR	652551	Symbol	container		652520						
ANR	652552	Symbol	nullptr		652520						
ANR	652553	Function	ASFormatter :: deleteContainer	5234:0:152561:152732							
ANR	652554	FunctionDef	ASFormatter :: deleteContainer (T & container)		652553	0					
ANR	652555	CompoundStatement		5236:0:152630:152732	652553	0					
ANR	652556	IfStatement	if ( container != nullptr )		652553	0					
ANR	652557	Condition	container != nullptr	5237:5:152637:152656	652553	0	True				
ANR	652558	EqualityExpression	container != nullptr		652553	0		!=			
ANR	652559	Identifier	container		652553	0					
ANR	652560	Identifier	nullptr		652553	1					
ANR	652561	CompoundStatement		3:1:29:29	652553	1					
ANR	652562	ExpressionStatement	container -> clear ( )	5239:2:152664:152682	652553	0	True				
ANR	652563	CallExpression	container -> clear ( )		652553	0					
ANR	652564	Callee	container -> clear		652553	0					
ANR	652565	PtrMemberAccess	container -> clear		652553	0					
ANR	652566	Identifier	container		652553	0					
ANR	652567	Identifier	clear		652553	1					
ANR	652568	ArgumentList			652553	1					
ANR	652569	Statement	delete	5240:2:152686:152691	652553	1	True				
ANR	652570	ExpressionStatement	container	5240:9:152693:152704	652553	2	True				
ANR	652571	Identifier	container		652553	0					
ANR	652572	ExpressionStatement	container = nullptr	5241:2:152708:152727	652553	3	True				
ANR	652573	AssignmentExpression	container = nullptr		652553	0		=			
ANR	652574	Identifier	container		652553	0					
ANR	652575	Identifier	nullptr		652553	1					
ANR	652576	ReturnType	void		652553	1					
ANR	652577	Identifier	ASFormatter :: deleteContainer		652553	2					
ANR	652578	ParameterList	T & container		652553	3					
ANR	652579	Parameter	T & container	5235:34:152616:152627	652553	0	True				
ANR	652580	ParameterType	T &		652553	0					
ANR	652581	Identifier	container		652553	1					
ANR	652582	CFGEntryNode	ENTRY		652553		True				
ANR	652583	CFGExitNode	EXIT		652553		True				
ANR	652584	Symbol	container		652553						
ANR	652585	Symbol	nullptr		652553						
ANR	652586	Function	ASFormatter :: initContainer	5249:0:152843:153011							
ANR	652587	FunctionDef	"ASFormatter :: initContainer (vector < BraceType > * & container , vector < BraceType > * value)"		652586	0					
ANR	652588	CompoundStatement		5250:0:152932:153011	652586	0					
ANR	652589	IfStatement	if ( container != nullptr )		652586	0					
ANR	652590	Condition	container != nullptr	5251:5:152939:152958	652586	0	True				
ANR	652591	EqualityExpression	container != nullptr		652586	0		!=			
ANR	652592	Identifier	container		652586	0					
ANR	652593	Identifier	nullptr		652586	1					
ANR	652594	ExpressionStatement	deleteContainer ( container )	5252:2:152963:152989	652586	1	True				
ANR	652595	CallExpression	deleteContainer ( container )		652586	0					
ANR	652596	Callee	deleteContainer		652586	0					
ANR	652597	Identifier	deleteContainer		652586	0					
ANR	652598	ArgumentList	container		652586	1					
ANR	652599	Argument	container		652586	0					
ANR	652600	Identifier	container		652586	0					
ANR	652601	ExpressionStatement	container = value	5253:1:152992:153009	652586	1	True				
ANR	652602	AssignmentExpression	container = value		652586	0		=			
ANR	652603	Identifier	container		652586	0					
ANR	652604	Identifier	value		652586	1					
ANR	652605	ReturnType	void		652586	1					
ANR	652606	Identifier	ASFormatter :: initContainer		652586	2					
ANR	652607	ParameterList	"vector < BraceType > * & container , vector < BraceType > * value"		652586	3					
ANR	652608	Parameter	vector < BraceType > * & container	5249:32:152875:152903	652586	0	True				
ANR	652609	ParameterType	vector < BraceType > * &		652586	0					
ANR	652610	Identifier	container		652586	1					
ANR	652611	Parameter	vector < BraceType > * value	5249:63:152906:152929	652586	1	True				
ANR	652612	ParameterType	vector < BraceType > *		652586	0					
ANR	652613	Identifier	value		652586	1					
ANR	652614	CFGEntryNode	ENTRY		652586		True				
ANR	652615	CFGExitNode	EXIT		652586		True				
ANR	652616	Symbol	container		652586						
ANR	652617	Symbol	value		652586						
ANR	652618	Symbol	nullptr		652586						
ANR	652619	Function	ASFormatter :: initContainer	5261:0:153125:153397							
ANR	652620	FunctionDef	"ASFormatter :: initContainer (T & container , T value)"		652619	0					
ANR	652621	CompoundStatement		5263:0:153201:153397	652619	0					
ANR	652622	IfStatement	if ( container != nullptr )		652619	0					
ANR	652623	Condition	container != nullptr	5266:5:153325:153344	652619	0	True				
ANR	652624	EqualityExpression	container != nullptr		652619	0		!=			
ANR	652625	Identifier	container		652619	0					
ANR	652626	Identifier	nullptr		652619	1					
ANR	652627	ExpressionStatement	deleteContainer ( container )	5267:2:153349:153375	652619	1	True				
ANR	652628	CallExpression	deleteContainer ( container )		652619	0					
ANR	652629	Callee	deleteContainer		652619	0					
ANR	652630	Identifier	deleteContainer		652619	0					
ANR	652631	ArgumentList	container		652619	1					
ANR	652632	Argument	container		652619	0					
ANR	652633	Identifier	container		652619	0					
ANR	652634	ExpressionStatement	container = value	5268:1:153378:153395	652619	1	True				
ANR	652635	AssignmentExpression	container = value		652619	0		=			
ANR	652636	Identifier	container		652619	0					
ANR	652637	Identifier	value		652619	1					
ANR	652638	ReturnType	void		652619	1					
ANR	652639	Identifier	ASFormatter :: initContainer		652619	2					
ANR	652640	ParameterList	"T & container , T value"		652619	3					
ANR	652641	Parameter	T & container	5262:32:153178:153189	652619	0	True				
ANR	652642	ParameterType	T &		652619	0					
ANR	652643	Identifier	container		652619	1					
ANR	652644	Parameter	T value	5262:46:153192:153198	652619	1	True				
ANR	652645	ParameterType	T		652619	0					
ANR	652646	Identifier	value		652619	1					
ANR	652647	CFGEntryNode	ENTRY		652619		True				
ANR	652648	CFGExitNode	EXIT		652619		True				
ANR	652649	Symbol	container		652619						
ANR	652650	Symbol	value		652619						
ANR	652651	Symbol	nullptr		652619						
ANR	652652	Function	ASFormatter :: convertTabToSpaces	5279:0:153744:154091							
ANR	652653	FunctionDef	ASFormatter :: convertTabToSpaces ()		652652	0					
ANR	652654	CompoundStatement		5280:0:153783:154091	652652	0					
ANR	652655	ExpressionStatement	assert ( currentChar == '\\t' )	5281:1:153786:153813	652652	0	True				
ANR	652656	CallExpression	assert ( currentChar == '\\t' )		652652	0					
ANR	652657	Callee	assert		652652	0					
ANR	652658	Identifier	assert		652652	0					
ANR	652659	ArgumentList	currentChar == '\\t'		652652	1					
ANR	652660	Argument	currentChar == '\\t'		652652	0					
ANR	652661	EqualityExpression	currentChar == '\\t'		652652	0		==			
ANR	652662	Identifier	currentChar		652652	0					
ANR	652663	PrimaryExpression	'\\t'		652652	1					
ANR	652664	IfStatement	if ( isInQuote || isInQuoteContinuation )		652652	1					
ANR	652665	Condition	isInQuote || isInQuoteContinuation	5284:5:153853:153886	652652	0	True				
ANR	652666	OrExpression	isInQuote || isInQuoteContinuation		652652	0		||			
ANR	652667	Identifier	isInQuote		652652	0					
ANR	652668	Identifier	isInQuoteContinuation		652652	1					
ANR	652669	ReturnStatement	return ;	5285:2:153891:153897	652652	1	True				
ANR	652670	IdentifierDeclStatement	size_t tabSize = getTabLength ( ) ;	5287:1:153901:153932	652652	2	True				
ANR	652671	IdentifierDecl	tabSize = getTabLength ( )		652652	0					
ANR	652672	IdentifierDeclType	size_t		652652	0					
ANR	652673	Identifier	tabSize		652652	1					
ANR	652674	AssignmentExpression	tabSize = getTabLength ( )		652652	2		=			
ANR	652675	Identifier	tabSize		652652	0					
ANR	652676	CallExpression	getTabLength ( )		652652	1					
ANR	652677	Callee	getTabLength		652652	0					
ANR	652678	Identifier	getTabLength		652652	0					
ANR	652679	ArgumentList			652652	1					
ANR	652680	IdentifierDeclStatement	size_t numSpaces = tabSize - ( ( tabIncrementIn + charNum ) % tabSize ) ;	5288:1:153935:154002	652652	3	True				
ANR	652681	IdentifierDecl	numSpaces = tabSize - ( ( tabIncrementIn + charNum ) % tabSize )		652652	0					
ANR	652682	IdentifierDeclType	size_t		652652	0					
ANR	652683	Identifier	numSpaces		652652	1					
ANR	652684	AssignmentExpression	numSpaces = tabSize - ( ( tabIncrementIn + charNum ) % tabSize )		652652	2		=			
ANR	652685	Identifier	numSpaces		652652	0					
ANR	652686	AdditiveExpression	tabSize - ( ( tabIncrementIn + charNum ) % tabSize )		652652	1		-			
ANR	652687	Identifier	tabSize		652652	0					
ANR	652688	MultiplicativeExpression	( tabIncrementIn + charNum ) % tabSize		652652	1		%			
ANR	652689	AdditiveExpression	tabIncrementIn + charNum		652652	0		+			
ANR	652690	Identifier	tabIncrementIn		652652	0					
ANR	652691	Identifier	charNum		652652	1					
ANR	652692	Identifier	tabSize		652652	1					
ANR	652693	ExpressionStatement	"currentLine . replace ( charNum , 1 , numSpaces , ' ' )"	5289:1:154005:154052	652652	4	True				
ANR	652694	CallExpression	"currentLine . replace ( charNum , 1 , numSpaces , ' ' )"		652652	0					
ANR	652695	Callee	currentLine . replace		652652	0					
ANR	652696	MemberAccess	currentLine . replace		652652	0					
ANR	652697	Identifier	currentLine		652652	0					
ANR	652698	Identifier	replace		652652	1					
ANR	652699	ArgumentList	charNum		652652	1					
ANR	652700	Argument	charNum		652652	0					
ANR	652701	Identifier	charNum		652652	0					
ANR	652702	Argument	1		652652	1					
ANR	652703	PrimaryExpression	1		652652	0					
ANR	652704	Argument	numSpaces		652652	2					
ANR	652705	Identifier	numSpaces		652652	0					
ANR	652706	Argument	' '		652652	3					
ANR	652707	PrimaryExpression	' '		652652	0					
ANR	652708	ExpressionStatement	currentChar = currentLine [ charNum ]	5290:1:154055:154089	652652	5	True				
ANR	652709	AssignmentExpression	currentChar = currentLine [ charNum ]		652652	0		=			
ANR	652710	Identifier	currentChar		652652	0					
ANR	652711	ArrayIndexing	currentLine [ charNum ]		652652	1					
ANR	652712	Identifier	currentLine		652652	0					
ANR	652713	Identifier	charNum		652652	1					
ANR	652714	ReturnType	void		652652	1					
ANR	652715	Identifier	ASFormatter :: convertTabToSpaces		652652	2					
ANR	652716	ParameterList			652652	3					
ANR	652717	CFGEntryNode	ENTRY		652652		True				
ANR	652718	CFGExitNode	EXIT		652652		True				
ANR	652719	Symbol	currentChar		652652						
ANR	652720	Symbol	numSpaces		652652						
ANR	652721	Symbol	* currentLine		652652						
ANR	652722	Symbol	getTabLength		652652						
ANR	652723	Symbol	tabSize		652652						
ANR	652724	Symbol	* charNum		652652						
ANR	652725	Symbol	isInQuoteContinuation		652652						
ANR	652726	Symbol	charNum		652652						
ANR	652727	Symbol	isInQuote		652652						
ANR	652728	Symbol	tabIncrementIn		652652						
ANR	652729	Symbol	currentLine		652652						
ANR	652730	Function	ASFormatter :: isOkToBreakBlock	5296:0:154133:154782							
ANR	652731	FunctionDef	ASFormatter :: isOkToBreakBlock (BraceType braceType)		652730	0					
ANR	652732	CompoundStatement		5297:0:154195:154782	652730	0					
ANR	652733	IfStatement	"if ( isBraceType ( braceType , ARRAY_TYPE ) && isBraceType ( braceType , SINGLE_LINE_TYPE ) )"		652730	0					
ANR	652734	Condition	"isBraceType ( braceType , ARRAY_TYPE ) && isBraceType ( braceType , SINGLE_LINE_TYPE )"	5301:5:154397:154483	652730	0	True				
ANR	652735	AndExpression	"isBraceType ( braceType , ARRAY_TYPE ) && isBraceType ( braceType , SINGLE_LINE_TYPE )"		652730	0		&&			
ANR	652736	CallExpression	"isBraceType ( braceType , ARRAY_TYPE )"		652730	0					
ANR	652737	Callee	isBraceType		652730	0					
ANR	652738	Identifier	isBraceType		652730	0					
ANR	652739	ArgumentList	braceType		652730	1					
ANR	652740	Argument	braceType		652730	0					
ANR	652741	Identifier	braceType		652730	0					
ANR	652742	Argument	ARRAY_TYPE		652730	1					
ANR	652743	Identifier	ARRAY_TYPE		652730	0					
ANR	652744	CallExpression	"isBraceType ( braceType , SINGLE_LINE_TYPE )"		652730	1					
ANR	652745	Callee	isBraceType		652730	0					
ANR	652746	Identifier	isBraceType		652730	0					
ANR	652747	ArgumentList	braceType		652730	1					
ANR	652748	Argument	braceType		652730	0					
ANR	652749	Identifier	braceType		652730	0					
ANR	652750	Argument	SINGLE_LINE_TYPE		652730	1					
ANR	652751	Identifier	SINGLE_LINE_TYPE		652730	0					
ANR	652752	ReturnStatement	return false ;	5303:2:154488:154500	652730	1	True				
ANR	652753	Identifier	false		652730	0					
ANR	652754	IfStatement	"if ( isBraceType ( braceType , COMMAND_TYPE ) && isBraceType ( braceType , EMPTY_BLOCK_TYPE ) )"		652730	1					
ANR	652755	Condition	"isBraceType ( braceType , COMMAND_TYPE ) && isBraceType ( braceType , EMPTY_BLOCK_TYPE )"	5304:5:154507:154595	652730	0	True				
ANR	652756	AndExpression	"isBraceType ( braceType , COMMAND_TYPE ) && isBraceType ( braceType , EMPTY_BLOCK_TYPE )"		652730	0		&&			
ANR	652757	CallExpression	"isBraceType ( braceType , COMMAND_TYPE )"		652730	0					
ANR	652758	Callee	isBraceType		652730	0					
ANR	652759	Identifier	isBraceType		652730	0					
ANR	652760	ArgumentList	braceType		652730	1					
ANR	652761	Argument	braceType		652730	0					
ANR	652762	Identifier	braceType		652730	0					
ANR	652763	Argument	COMMAND_TYPE		652730	1					
ANR	652764	Identifier	COMMAND_TYPE		652730	0					
ANR	652765	CallExpression	"isBraceType ( braceType , EMPTY_BLOCK_TYPE )"		652730	1					
ANR	652766	Callee	isBraceType		652730	0					
ANR	652767	Identifier	isBraceType		652730	0					
ANR	652768	ArgumentList	braceType		652730	1					
ANR	652769	Argument	braceType		652730	0					
ANR	652770	Identifier	braceType		652730	0					
ANR	652771	Argument	EMPTY_BLOCK_TYPE		652730	1					
ANR	652772	Identifier	EMPTY_BLOCK_TYPE		652730	0					
ANR	652773	ReturnStatement	return false ;	5306:2:154600:154612	652730	1	True				
ANR	652774	Identifier	false		652730	0					
ANR	652775	IfStatement	"if ( ! isBraceType ( braceType , SINGLE_LINE_TYPE ) || isBraceType ( braceType , BREAK_BLOCK_TYPE ) || shouldBreakOneLineBlocks )"		652730	2					
ANR	652776	Condition	"! isBraceType ( braceType , SINGLE_LINE_TYPE ) || isBraceType ( braceType , BREAK_BLOCK_TYPE ) || shouldBreakOneLineBlocks"	5307:5:154619:154749	652730	0	True				
ANR	652777	OrExpression	"! isBraceType ( braceType , SINGLE_LINE_TYPE ) || isBraceType ( braceType , BREAK_BLOCK_TYPE ) || shouldBreakOneLineBlocks"		652730	0		||			
ANR	652778	UnaryOperationExpression	"! isBraceType ( braceType , SINGLE_LINE_TYPE )"		652730	0					
ANR	652779	UnaryOperator	!		652730	0					
ANR	652780	CallExpression	"isBraceType ( braceType , SINGLE_LINE_TYPE )"		652730	1					
ANR	652781	Callee	isBraceType		652730	0					
ANR	652782	Identifier	isBraceType		652730	0					
ANR	652783	ArgumentList	braceType		652730	1					
ANR	652784	Argument	braceType		652730	0					
ANR	652785	Identifier	braceType		652730	0					
ANR	652786	Argument	SINGLE_LINE_TYPE		652730	1					
ANR	652787	Identifier	SINGLE_LINE_TYPE		652730	0					
ANR	652788	OrExpression	"isBraceType ( braceType , BREAK_BLOCK_TYPE ) || shouldBreakOneLineBlocks"		652730	1		||			
ANR	652789	CallExpression	"isBraceType ( braceType , BREAK_BLOCK_TYPE )"		652730	0					
ANR	652790	Callee	isBraceType		652730	0					
ANR	652791	Identifier	isBraceType		652730	0					
ANR	652792	ArgumentList	braceType		652730	1					
ANR	652793	Argument	braceType		652730	0					
ANR	652794	Identifier	braceType		652730	0					
ANR	652795	Argument	BREAK_BLOCK_TYPE		652730	1					
ANR	652796	Identifier	BREAK_BLOCK_TYPE		652730	0					
ANR	652797	Identifier	shouldBreakOneLineBlocks		652730	1					
ANR	652798	ReturnStatement	return true ;	5310:2:154754:154765	652730	1	True				
ANR	652799	Identifier	true		652730	0					
ANR	652800	ReturnStatement	return false ;	5311:1:154768:154780	652730	3	True				
ANR	652801	Identifier	false		652730	0					
ANR	652802	ReturnType	bool		652730	1					
ANR	652803	Identifier	ASFormatter :: isOkToBreakBlock		652730	2					
ANR	652804	ParameterList	BraceType braceType		652730	3					
ANR	652805	Parameter	BraceType braceType	5296:35:154168:154186	652730	0	True				
ANR	652806	ParameterType	BraceType		652730	0					
ANR	652807	Identifier	braceType		652730	1					
ANR	652808	CFGEntryNode	ENTRY		652730		True				
ANR	652809	CFGExitNode	EXIT		652730		True				
ANR	652810	Symbol	COMMAND_TYPE		652730						
ANR	652811	Symbol	shouldBreakOneLineBlocks		652730						
ANR	652812	Symbol	braceType		652730						
ANR	652813	Symbol	EMPTY_BLOCK_TYPE		652730						
ANR	652814	Symbol	SINGLE_LINE_TYPE		652730						
ANR	652815	Symbol	ARRAY_TYPE		652730						
ANR	652816	Symbol	false		652730						
ANR	652817	Symbol	true		652730						
ANR	652818	Symbol	BREAK_BLOCK_TYPE		652730						
ANR	652819	Symbol	isBraceType		652730						
ANR	652820	Function	ASFormatter :: isSharpStyleWithParen	5317:0:154849:155043							
ANR	652821	FunctionDef	ASFormatter :: isSharpStyleWithParen (const string * header)		652820	0					
ANR	652822	CompoundStatement		5318:0:154917:155043	652820	0					
ANR	652823	ReturnStatement	return ( isSharpStyle ( ) && peekNextChar ( ) == '(' && ( header == & AS_CATCH || header == & AS_DELEGATE ) ) ;	5319:1:154920:155041	652820	0	True				
ANR	652824	AndExpression	isSharpStyle ( ) && peekNextChar ( ) == '(' && ( header == & AS_CATCH || header == & AS_DELEGATE )		652820	0		&&			
ANR	652825	CallExpression	isSharpStyle ( )		652820	0					
ANR	652826	Callee	isSharpStyle		652820	0					
ANR	652827	Identifier	isSharpStyle		652820	0					
ANR	652828	ArgumentList			652820	1					
ANR	652829	AndExpression	peekNextChar ( ) == '(' && ( header == & AS_CATCH || header == & AS_DELEGATE )		652820	1		&&			
ANR	652830	EqualityExpression	peekNextChar ( ) == '('		652820	0		==			
ANR	652831	CallExpression	peekNextChar ( )		652820	0					
ANR	652832	Callee	peekNextChar		652820	0					
ANR	652833	Identifier	peekNextChar		652820	0					
ANR	652834	ArgumentList			652820	1					
ANR	652835	PrimaryExpression	'('		652820	1					
ANR	652836	OrExpression	header == & AS_CATCH || header == & AS_DELEGATE		652820	1		||			
ANR	652837	EqualityExpression	header == & AS_CATCH		652820	0		==			
ANR	652838	Identifier	header		652820	0					
ANR	652839	UnaryOperationExpression	& AS_CATCH		652820	1					
ANR	652840	UnaryOperator	&		652820	0					
ANR	652841	Identifier	AS_CATCH		652820	1					
ANR	652842	EqualityExpression	header == & AS_DELEGATE		652820	1		==			
ANR	652843	Identifier	header		652820	0					
ANR	652844	UnaryOperationExpression	& AS_DELEGATE		652820	1					
ANR	652845	UnaryOperator	&		652820	0					
ANR	652846	Identifier	AS_DELEGATE		652820	1					
ANR	652847	ReturnType	bool		652820	1					
ANR	652848	Identifier	ASFormatter :: isSharpStyleWithParen		652820	2					
ANR	652849	ParameterList	const string * header		652820	3					
ANR	652850	Parameter	const string * header	5317:40:154889:154908	652820	0	True				
ANR	652851	ParameterType	const string *		652820	0					
ANR	652852	Identifier	header		652820	1					
ANR	652853	CFGEntryNode	ENTRY		652820		True				
ANR	652854	CFGExitNode	EXIT		652820		True				
ANR	652855	Symbol	& AS_DELEGATE		652820						
ANR	652856	Symbol	isSharpStyle		652820						
ANR	652857	Symbol	peekNextChar		652820						
ANR	652858	Symbol	header		652820						
ANR	652859	Symbol	& AS_CATCH		652820						
ANR	652860	Function	ASFormatter :: checkForHeaderFollowingComment	5329:0:155220:155779							
ANR	652861	FunctionDef	ASFormatter :: checkForHeaderFollowingComment (const string & firstLine)		652860	0					
ANR	652862	CompoundStatement		5330:0:155309:155779	652860	0					
ANR	652863	ExpressionStatement	assert ( isInComment || isInLineComment )	5331:1:155312:155350	652860	0	True				
ANR	652864	CallExpression	assert ( isInComment || isInLineComment )		652860	0					
ANR	652865	Callee	assert		652860	0					
ANR	652866	Identifier	assert		652860	0					
ANR	652867	ArgumentList	isInComment || isInLineComment		652860	1					
ANR	652868	Argument	isInComment || isInLineComment		652860	0					
ANR	652869	OrExpression	isInComment || isInLineComment		652860	0		||			
ANR	652870	Identifier	isInComment		652860	0					
ANR	652871	Identifier	isInLineComment		652860	1					
ANR	652872	ExpressionStatement	assert ( shouldBreakElseIfs || shouldBreakBlocks || isInSwitchStatement ( ) )	5332:1:155353:155425	652860	1	True				
ANR	652873	CallExpression	assert ( shouldBreakElseIfs || shouldBreakBlocks || isInSwitchStatement ( ) )		652860	0					
ANR	652874	Callee	assert		652860	0					
ANR	652875	Identifier	assert		652860	0					
ANR	652876	ArgumentList	shouldBreakElseIfs || shouldBreakBlocks || isInSwitchStatement ( )		652860	1					
ANR	652877	Argument	shouldBreakElseIfs || shouldBreakBlocks || isInSwitchStatement ( )		652860	0					
ANR	652878	OrExpression	shouldBreakElseIfs || shouldBreakBlocks || isInSwitchStatement ( )		652860	0		||			
ANR	652879	Identifier	shouldBreakElseIfs		652860	0					
ANR	652880	OrExpression	shouldBreakBlocks || isInSwitchStatement ( )		652860	1		||			
ANR	652881	Identifier	shouldBreakBlocks		652860	0					
ANR	652882	CallExpression	isInSwitchStatement ( )		652860	1					
ANR	652883	Callee	isInSwitchStatement		652860	0					
ANR	652884	Identifier	isInSwitchStatement		652860	0					
ANR	652885	ArgumentList			652860	1					
ANR	652886	IdentifierDeclStatement	bool endOnEmptyLine = ( currentHeader == nullptr ) ;	5334:1:155477:155525	652860	2	True				
ANR	652887	IdentifierDecl	endOnEmptyLine = ( currentHeader == nullptr )		652860	0					
ANR	652888	IdentifierDeclType	bool		652860	0					
ANR	652889	Identifier	endOnEmptyLine		652860	1					
ANR	652890	AssignmentExpression	endOnEmptyLine = ( currentHeader == nullptr )		652860	2		=			
ANR	652891	Identifier	endOnEmptyLine		652860	0					
ANR	652892	EqualityExpression	currentHeader == nullptr		652860	1		==			
ANR	652893	Identifier	currentHeader		652860	0					
ANR	652894	Identifier	nullptr		652860	1					
ANR	652895	IfStatement	if ( isInSwitchStatement ( ) )		652860	3					
ANR	652896	Condition	isInSwitchStatement ( )	5335:5:155532:155552	652860	0	True				
ANR	652897	CallExpression	isInSwitchStatement ( )		652860	0					
ANR	652898	Callee	isInSwitchStatement		652860	0					
ANR	652899	Identifier	isInSwitchStatement		652860	0					
ANR	652900	ArgumentList			652860	1					
ANR	652901	ExpressionStatement	endOnEmptyLine = false	5336:2:155557:155579	652860	1	True				
ANR	652902	AssignmentExpression	endOnEmptyLine = false		652860	0		=			
ANR	652903	Identifier	endOnEmptyLine		652860	0					
ANR	652904	Identifier	false		652860	1					
ANR	652905	IdentifierDeclStatement	"string nextText = peekNextText ( firstLine , endOnEmptyLine ) ;"	5337:1:155582:155639	652860	4	True				
ANR	652906	IdentifierDecl	"nextText = peekNextText ( firstLine , endOnEmptyLine )"		652860	0					
ANR	652907	IdentifierDeclType	string		652860	0					
ANR	652908	Identifier	nextText		652860	1					
ANR	652909	AssignmentExpression	"nextText = peekNextText ( firstLine , endOnEmptyLine )"		652860	2		=			
ANR	652910	Identifier	nextText		652860	0					
ANR	652911	CallExpression	"peekNextText ( firstLine , endOnEmptyLine )"		652860	1					
ANR	652912	Callee	peekNextText		652860	0					
ANR	652913	Identifier	peekNextText		652860	0					
ANR	652914	ArgumentList	firstLine		652860	1					
ANR	652915	Argument	firstLine		652860	0					
ANR	652916	Identifier	firstLine		652860	0					
ANR	652917	Argument	endOnEmptyLine		652860	1					
ANR	652918	Identifier	endOnEmptyLine		652860	0					
ANR	652919	IfStatement	"if ( nextText . length ( ) == 0 || ! isCharPotentialHeader ( nextText , 0 ) )"		652860	5					
ANR	652920	Condition	"nextText . length ( ) == 0 || ! isCharPotentialHeader ( nextText , 0 )"	5339:5:155647:155707	652860	0	True				
ANR	652921	OrExpression	"nextText . length ( ) == 0 || ! isCharPotentialHeader ( nextText , 0 )"		652860	0		||			
ANR	652922	EqualityExpression	nextText . length ( ) == 0		652860	0		==			
ANR	652923	CallExpression	nextText . length ( )		652860	0					
ANR	652924	Callee	nextText . length		652860	0					
ANR	652925	MemberAccess	nextText . length		652860	0					
ANR	652926	Identifier	nextText		652860	0					
ANR	652927	Identifier	length		652860	1					
ANR	652928	ArgumentList			652860	1					
ANR	652929	PrimaryExpression	0		652860	1					
ANR	652930	UnaryOperationExpression	"! isCharPotentialHeader ( nextText , 0 )"		652860	1					
ANR	652931	UnaryOperator	!		652860	0					
ANR	652932	CallExpression	"isCharPotentialHeader ( nextText , 0 )"		652860	1					
ANR	652933	Callee	isCharPotentialHeader		652860	0					
ANR	652934	Identifier	isCharPotentialHeader		652860	0					
ANR	652935	ArgumentList	nextText		652860	1					
ANR	652936	Argument	nextText		652860	0					
ANR	652937	Identifier	nextText		652860	0					
ANR	652938	Argument	0		652860	1					
ANR	652939	PrimaryExpression	0		652860	0					
ANR	652940	ReturnStatement	return nullptr ;	5340:2:155712:155726	652860	1	True				
ANR	652941	Identifier	nullptr		652860	0					
ANR	652942	ReturnStatement	"return ASBase :: findHeader ( nextText , 0 , headers ) ;"	5342:1:155730:155777	652860	6	True				
ANR	652943	CallExpression	"ASBase :: findHeader ( nextText , 0 , headers )"		652860	0					
ANR	652944	Callee	ASBase :: findHeader		652860	0					
ANR	652945	Identifier	ASBase :: findHeader		652860	0					
ANR	652946	ArgumentList	nextText		652860	1					
ANR	652947	Argument	nextText		652860	0					
ANR	652948	Identifier	nextText		652860	0					
ANR	652949	Argument	0		652860	1					
ANR	652950	PrimaryExpression	0		652860	0					
ANR	652951	Argument	headers		652860	2					
ANR	652952	Identifier	headers		652860	0					
ANR	652953	ReturnType	const string *		652860	1					
ANR	652954	Identifier	ASFormatter :: checkForHeaderFollowingComment		652860	2					
ANR	652955	ParameterList	const string & firstLine		652860	3					
ANR	652956	Parameter	const string & firstLine	5329:58:155278:155300	652860	0	True				
ANR	652957	ParameterType	const string &		652860	0					
ANR	652958	Identifier	firstLine		652860	1					
ANR	652959	CFGEntryNode	ENTRY		652860		True				
ANR	652960	CFGExitNode	EXIT		652860		True				
ANR	652961	Symbol	headers		652860						
ANR	652962	Symbol	shouldBreakElseIfs		652860						
ANR	652963	Symbol	nextText		652860						
ANR	652964	Symbol	false		652860						
ANR	652965	Symbol	ASBase :: findHeader		652860						
ANR	652966	Symbol	shouldBreakBlocks		652860						
ANR	652967	Symbol	firstLine		652860						
ANR	652968	Symbol	isInLineComment		652860						
ANR	652969	Symbol	currentHeader		652860						
ANR	652970	Symbol	isCharPotentialHeader		652860						
ANR	652971	Symbol	nextText . length		652860						
ANR	652972	Symbol	endOnEmptyLine		652860						
ANR	652973	Symbol	peekNextText		652860						
ANR	652974	Symbol	isInSwitchStatement		652860						
ANR	652975	Symbol	isInComment		652860						
ANR	652976	Symbol	nullptr		652860						
ANR	652977	Function	ASFormatter :: processPreprocessor	5352:0:155987:156612							
ANR	652978	FunctionDef	ASFormatter :: processPreprocessor ()		652977	0					
ANR	652979	CompoundStatement		5353:0:156027:156612	652977	0					
ANR	652980	ExpressionStatement	assert ( currentChar == '#' )	5354:1:156030:156056	652977	0	True				
ANR	652981	CallExpression	assert ( currentChar == '#' )		652977	0					
ANR	652982	Callee	assert		652977	0					
ANR	652983	Identifier	assert		652977	0					
ANR	652984	ArgumentList	currentChar == '#'		652977	1					
ANR	652985	Argument	currentChar == '#'		652977	0					
ANR	652986	EqualityExpression	currentChar == '#'		652977	0		==			
ANR	652987	Identifier	currentChar		652977	0					
ANR	652988	PrimaryExpression	'#'		652977	1					
ANR	652989	IdentifierDeclStatement	"const size_t preproc = currentLine . find_first_not_of ( "" \\t"" , charNum + 1 ) ;"	5356:1:156060:156132	652977	1	True				
ANR	652990	IdentifierDecl	"preproc = currentLine . find_first_not_of ( "" \\t"" , charNum + 1 )"		652977	0					
ANR	652991	IdentifierDeclType	const size_t		652977	0					
ANR	652992	Identifier	preproc		652977	1					
ANR	652993	AssignmentExpression	"preproc = currentLine . find_first_not_of ( "" \\t"" , charNum + 1 )"		652977	2		=			
ANR	652994	Identifier	preproc		652977	0					
ANR	652995	CallExpression	"currentLine . find_first_not_of ( "" \\t"" , charNum + 1 )"		652977	1					
ANR	652996	Callee	currentLine . find_first_not_of		652977	0					
ANR	652997	MemberAccess	currentLine . find_first_not_of		652977	0					
ANR	652998	Identifier	currentLine		652977	0					
ANR	652999	Identifier	find_first_not_of		652977	1					
ANR	653000	ArgumentList	""" \\t"""		652977	1					
ANR	653001	Argument	""" \\t"""		652977	0					
ANR	653002	PrimaryExpression	""" \\t"""		652977	0					
ANR	653003	Argument	charNum + 1		652977	1					
ANR	653004	AdditiveExpression	charNum + 1		652977	0		+			
ANR	653005	Identifier	charNum		652977	0					
ANR	653006	PrimaryExpression	1		652977	1					
ANR	653007	IfStatement	if ( preproc == string :: npos )		652977	2					
ANR	653008	Condition	preproc == string :: npos	5358:5:156140:156162	652977	0	True				
ANR	653009	EqualityExpression	preproc == string :: npos		652977	0		==			
ANR	653010	Identifier	preproc		652977	0					
ANR	653011	Identifier	string :: npos		652977	1					
ANR	653012	ReturnStatement	return ;	5359:2:156167:156173	652977	1	True				
ANR	653013	IfStatement	"if ( currentLine . compare ( preproc , 2 , ""if"" ) == 0 )"		652977	3					
ANR	653014	Condition	"currentLine . compare ( preproc , 2 , ""if"" ) == 0"	5361:5:156181:156222	652977	0	True				
ANR	653015	EqualityExpression	"currentLine . compare ( preproc , 2 , ""if"" ) == 0"		652977	0		==			
ANR	653016	CallExpression	"currentLine . compare ( preproc , 2 , ""if"" )"		652977	0					
ANR	653017	Callee	currentLine . compare		652977	0					
ANR	653018	MemberAccess	currentLine . compare		652977	0					
ANR	653019	Identifier	currentLine		652977	0					
ANR	653020	Identifier	compare		652977	1					
ANR	653021	ArgumentList	preproc		652977	1					
ANR	653022	Argument	preproc		652977	0					
ANR	653023	Identifier	preproc		652977	0					
ANR	653024	Argument	2		652977	1					
ANR	653025	PrimaryExpression	2		652977	0					
ANR	653026	Argument	"""if"""		652977	2					
ANR	653027	PrimaryExpression	"""if"""		652977	0					
ANR	653028	PrimaryExpression	0		652977	1					
ANR	653029	CompoundStatement		10:1:198:198	652977	1					
ANR	653030	ExpressionStatement	preprocBraceTypeStackSize = braceTypeStack -> size ( )	5363:2:156230:156280	652977	0	True				
ANR	653031	AssignmentExpression	preprocBraceTypeStackSize = braceTypeStack -> size ( )		652977	0		=			
ANR	653032	Identifier	preprocBraceTypeStackSize		652977	0					
ANR	653033	CallExpression	braceTypeStack -> size ( )		652977	1					
ANR	653034	Callee	braceTypeStack -> size		652977	0					
ANR	653035	PtrMemberAccess	braceTypeStack -> size		652977	0					
ANR	653036	Identifier	braceTypeStack		652977	0					
ANR	653037	Identifier	size		652977	1					
ANR	653038	ArgumentList			652977	1					
ANR	653039	ElseStatement	else		652977	0					
ANR	653040	IfStatement	"if ( currentLine . compare ( preproc , 4 , ""else"" ) == 0 )"		652977	0					
ANR	653041	Condition	"currentLine . compare ( preproc , 4 , ""else"" ) == 0"	5365:10:156295:156338	652977	0	True				
ANR	653042	EqualityExpression	"currentLine . compare ( preproc , 4 , ""else"" ) == 0"		652977	0		==			
ANR	653043	CallExpression	"currentLine . compare ( preproc , 4 , ""else"" )"		652977	0					
ANR	653044	Callee	currentLine . compare		652977	0					
ANR	653045	MemberAccess	currentLine . compare		652977	0					
ANR	653046	Identifier	currentLine		652977	0					
ANR	653047	Identifier	compare		652977	1					
ANR	653048	ArgumentList	preproc		652977	1					
ANR	653049	Argument	preproc		652977	0					
ANR	653050	Identifier	preproc		652977	0					
ANR	653051	Argument	4		652977	1					
ANR	653052	PrimaryExpression	4		652977	0					
ANR	653053	Argument	"""else"""		652977	2					
ANR	653054	PrimaryExpression	"""else"""		652977	0					
ANR	653055	PrimaryExpression	0		652977	1					
ANR	653056	CompoundStatement		14:1:314:314	652977	1					
ANR	653057	IfStatement	if ( preprocBraceTypeStackSize > 0 )		652977	0					
ANR	653058	Condition	preprocBraceTypeStackSize > 0	5369:6:156422:156450	652977	0	True				
ANR	653059	RelationalExpression	preprocBraceTypeStackSize > 0		652977	0		>			
ANR	653060	Identifier	preprocBraceTypeStackSize		652977	0					
ANR	653061	PrimaryExpression	0		652977	1					
ANR	653062	CompoundStatement		19:3:432:501	652977	1					
ANR	653063	IdentifierDeclStatement	int addedPreproc = braceTypeStack -> size ( ) - preprocBraceTypeStackSize ;	5371:3:156460:156529	652977	0	True				
ANR	653064	IdentifierDecl	addedPreproc = braceTypeStack -> size ( ) - preprocBraceTypeStackSize		652977	0					
ANR	653065	IdentifierDeclType	int		652977	0					
ANR	653066	Identifier	addedPreproc		652977	1					
ANR	653067	AssignmentExpression	addedPreproc = braceTypeStack -> size ( ) - preprocBraceTypeStackSize		652977	2		=			
ANR	653068	Identifier	addedPreproc		652977	0					
ANR	653069	AdditiveExpression	braceTypeStack -> size ( ) - preprocBraceTypeStackSize		652977	1		-			
ANR	653070	CallExpression	braceTypeStack -> size ( )		652977	0					
ANR	653071	Callee	braceTypeStack -> size		652977	0					
ANR	653072	PtrMemberAccess	braceTypeStack -> size		652977	0					
ANR	653073	Identifier	braceTypeStack		652977	0					
ANR	653074	Identifier	size		652977	1					
ANR	653075	ArgumentList			652977	1					
ANR	653076	Identifier	preprocBraceTypeStackSize		652977	1					
ANR	653077	ForStatement	for ( int i = 0 ; i < addedPreproc ; i ++ )		652977	1					
ANR	653078	ForInit	int i = 0 ;	5372:8:156539:156548	652977	0	True				
ANR	653079	IdentifierDeclStatement	int i = 0 ;		652977	0					
ANR	653080	IdentifierDecl	i = 0		652977	0					
ANR	653081	IdentifierDeclType	int		652977	0					
ANR	653082	Identifier	i		652977	1					
ANR	653083	AssignmentExpression	i = 0		652977	2		=			
ANR	653084	Identifier	i		652977	0					
ANR	653085	PrimaryExpression	0		652977	1					
ANR	653086	Condition	i < addedPreproc	5372:19:156550:156565	652977	1	True				
ANR	653087	RelationalExpression	i < addedPreproc		652977	0		<			
ANR	653088	Identifier	i		652977	0					
ANR	653089	Identifier	addedPreproc		652977	1					
ANR	653090	PostIncDecOperationExpression	i ++	5372:37:156568:156570	652977	2	True				
ANR	653091	Identifier	i		652977	0					
ANR	653092	IncDec	++		652977	1					
ANR	653093	ExpressionStatement	braceTypeStack -> pop_back ( )	5373:4:156577:156603	652977	3	True				
ANR	653094	CallExpression	braceTypeStack -> pop_back ( )		652977	0					
ANR	653095	Callee	braceTypeStack -> pop_back		652977	0					
ANR	653096	PtrMemberAccess	braceTypeStack -> pop_back		652977	0					
ANR	653097	Identifier	braceTypeStack		652977	0					
ANR	653098	Identifier	pop_back		652977	1					
ANR	653099	ArgumentList			652977	1					
ANR	653100	ReturnType	void		652977	1					
ANR	653101	Identifier	ASFormatter :: processPreprocessor		652977	2					
ANR	653102	ParameterList			652977	3					
ANR	653103	CFGEntryNode	ENTRY		652977		True				
ANR	653104	CFGExitNode	EXIT		652977		True				
ANR	653105	Symbol	currentChar		652977						
ANR	653106	Symbol	braceTypeStack		652977						
ANR	653107	Symbol	* braceTypeStack		652977						
ANR	653108	Symbol	string :: npos		652977						
ANR	653109	Symbol	i		652977						
ANR	653110	Symbol	currentLine . find_first_not_of		652977						
ANR	653111	Symbol	braceTypeStack -> size		652977						
ANR	653112	Symbol	addedPreproc		652977						
ANR	653113	Symbol	preprocBraceTypeStackSize		652977						
ANR	653114	Symbol	charNum		652977						
ANR	653115	Symbol	currentLine . compare		652977						
ANR	653116	Symbol	preproc		652977						
ANR	653117	Symbol	currentLine		652977						
ANR	653118	Function	ASFormatter :: commentAndHeaderFollows	5382:0:156719:157815							
ANR	653119	FunctionDef	ASFormatter :: commentAndHeaderFollows ()		653118	0					
ANR	653120	CompoundStatement		5383:0:156763:157815	653118	0					
ANR	653121	ExpressionStatement	assert ( shouldDeleteEmptyLines && shouldBreakBlocks )	5385:1:156840:156891	653118	0	True				
ANR	653122	CallExpression	assert ( shouldDeleteEmptyLines && shouldBreakBlocks )		653118	0					
ANR	653123	Callee	assert		653118	0					
ANR	653124	Identifier	assert		653118	0					
ANR	653125	ArgumentList	shouldDeleteEmptyLines && shouldBreakBlocks		653118	1					
ANR	653126	Argument	shouldDeleteEmptyLines && shouldBreakBlocks		653118	0					
ANR	653127	AndExpression	shouldDeleteEmptyLines && shouldBreakBlocks		653118	0		&&			
ANR	653128	Identifier	shouldDeleteEmptyLines		653118	0					
ANR	653129	Identifier	shouldBreakBlocks		653118	1					
ANR	653130	Statement	auto	5388:1:156926:156929	653118	1	True				
ANR	653131	ExpressionStatement	stream = make_shared < ASPeekStream > ( sourceIterator )	5388:6:156931:156981	653118	2	True				
ANR	653132	AssignmentExpression	stream = make_shared < ASPeekStream > ( sourceIterator )		653118	0		=			
ANR	653133	Identifier	stream		653118	0					
ANR	653134	RelationalExpression	make_shared < ASPeekStream > ( sourceIterator )		653118	1		<			
ANR	653135	Identifier	make_shared		653118	0					
ANR	653136	RelationalExpression	ASPeekStream > ( sourceIterator )		653118	1		>			
ANR	653137	Identifier	ASPeekStream		653118	0					
ANR	653138	Identifier	sourceIterator		653118	1					
ANR	653139	IfStatement	if ( ! stream -> hasMoreLines ( ) )		653118	3					
ANR	653140	Condition	! stream -> hasMoreLines ( )	5389:5:156988:157010	653118	0	True				
ANR	653141	UnaryOperationExpression	! stream -> hasMoreLines ( )		653118	0					
ANR	653142	UnaryOperator	!		653118	0					
ANR	653143	CallExpression	stream -> hasMoreLines ( )		653118	1					
ANR	653144	Callee	stream -> hasMoreLines		653118	0					
ANR	653145	PtrMemberAccess	stream -> hasMoreLines		653118	0					
ANR	653146	Identifier	stream		653118	0					
ANR	653147	Identifier	hasMoreLines		653118	1					
ANR	653148	ArgumentList			653118	1					
ANR	653149	ReturnStatement	return false ;	5390:2:157015:157027	653118	1	True				
ANR	653150	Identifier	false		653118	0					
ANR	653151	IdentifierDeclStatement	string nextLine_ = stream -> peekNextLine ( ) ;	5391:1:157030:157071	653118	4	True				
ANR	653152	IdentifierDecl	nextLine_ = stream -> peekNextLine ( )		653118	0					
ANR	653153	IdentifierDeclType	string		653118	0					
ANR	653154	Identifier	nextLine_		653118	1					
ANR	653155	AssignmentExpression	nextLine_ = stream -> peekNextLine ( )		653118	2		=			
ANR	653156	Identifier	nextLine_		653118	0					
ANR	653157	CallExpression	stream -> peekNextLine ( )		653118	1					
ANR	653158	Callee	stream -> peekNextLine		653118	0					
ANR	653159	PtrMemberAccess	stream -> peekNextLine		653118	0					
ANR	653160	Identifier	stream		653118	0					
ANR	653161	Identifier	peekNextLine		653118	1					
ANR	653162	ArgumentList			653118	1					
ANR	653163	IdentifierDeclStatement	"size_t firstChar = nextLine_ . find_first_not_of ( "" \\t"" ) ;"	5392:1:157074:157127	653118	5	True				
ANR	653164	IdentifierDecl	"firstChar = nextLine_ . find_first_not_of ( "" \\t"" )"		653118	0					
ANR	653165	IdentifierDeclType	size_t		653118	0					
ANR	653166	Identifier	firstChar		653118	1					
ANR	653167	AssignmentExpression	"firstChar = nextLine_ . find_first_not_of ( "" \\t"" )"		653118	2		=			
ANR	653168	Identifier	firstChar		653118	0					
ANR	653169	CallExpression	"nextLine_ . find_first_not_of ( "" \\t"" )"		653118	1					
ANR	653170	Callee	nextLine_ . find_first_not_of		653118	0					
ANR	653171	MemberAccess	nextLine_ . find_first_not_of		653118	0					
ANR	653172	Identifier	nextLine_		653118	0					
ANR	653173	Identifier	find_first_not_of		653118	1					
ANR	653174	ArgumentList	""" \\t"""		653118	1					
ANR	653175	Argument	""" \\t"""		653118	0					
ANR	653176	PrimaryExpression	""" \\t"""		653118	0					
ANR	653177	IfStatement	"if ( firstChar == string :: npos || ! ( nextLine_ . compare ( firstChar , 2 , ""//"" ) == 0 || nextLine_ . compare ( firstChar , 2 , ""/*"" ) == 0 ) )"		653118	6					
ANR	653178	Condition	"firstChar == string :: npos || ! ( nextLine_ . compare ( firstChar , 2 , ""//"" ) == 0 || nextLine_ . compare ( firstChar , 2 , ""/*"" ) == 0 )"	5393:5:157134:157276	653118	0	True				
ANR	653179	OrExpression	"firstChar == string :: npos || ! ( nextLine_ . compare ( firstChar , 2 , ""//"" ) == 0 || nextLine_ . compare ( firstChar , 2 , ""/*"" ) == 0 )"		653118	0		||			
ANR	653180	EqualityExpression	firstChar == string :: npos		653118	0		==			
ANR	653181	Identifier	firstChar		653118	0					
ANR	653182	Identifier	string :: npos		653118	1					
ANR	653183	UnaryOperationExpression	"! ( nextLine_ . compare ( firstChar , 2 , ""//"" ) == 0 || nextLine_ . compare ( firstChar , 2 , ""/*"" ) == 0 )"		653118	1					
ANR	653184	UnaryOperator	!		653118	0					
ANR	653185	OrExpression	"nextLine_ . compare ( firstChar , 2 , ""//"" ) == 0 || nextLine_ . compare ( firstChar , 2 , ""/*"" ) == 0"		653118	1		||			
ANR	653186	EqualityExpression	"nextLine_ . compare ( firstChar , 2 , ""//"" ) == 0"		653118	0		==			
ANR	653187	CallExpression	"nextLine_ . compare ( firstChar , 2 , ""//"" )"		653118	0					
ANR	653188	Callee	nextLine_ . compare		653118	0					
ANR	653189	MemberAccess	nextLine_ . compare		653118	0					
ANR	653190	Identifier	nextLine_		653118	0					
ANR	653191	Identifier	compare		653118	1					
ANR	653192	ArgumentList	firstChar		653118	1					
ANR	653193	Argument	firstChar		653118	0					
ANR	653194	Identifier	firstChar		653118	0					
ANR	653195	Argument	2		653118	1					
ANR	653196	PrimaryExpression	2		653118	0					
ANR	653197	Argument	"""//"""		653118	2					
ANR	653198	PrimaryExpression	"""//"""		653118	0					
ANR	653199	PrimaryExpression	0		653118	1					
ANR	653200	EqualityExpression	"nextLine_ . compare ( firstChar , 2 , ""/*"" ) == 0"		653118	1		==			
ANR	653201	CallExpression	"nextLine_ . compare ( firstChar , 2 , ""/*"" )"		653118	0					
ANR	653202	Callee	nextLine_ . compare		653118	0					
ANR	653203	MemberAccess	nextLine_ . compare		653118	0					
ANR	653204	Identifier	nextLine_		653118	0					
ANR	653205	Identifier	compare		653118	1					
ANR	653206	ArgumentList	firstChar		653118	1					
ANR	653207	Argument	firstChar		653118	0					
ANR	653208	Identifier	firstChar		653118	0					
ANR	653209	Argument	2		653118	1					
ANR	653210	PrimaryExpression	2		653118	0					
ANR	653211	Argument	"""/*"""		653118	2					
ANR	653212	PrimaryExpression	"""/*"""		653118	0					
ANR	653213	PrimaryExpression	0		653118	1					
ANR	653214	ReturnStatement	return false ;	5396:2:157281:157293	653118	1	True				
ANR	653215	Identifier	false		653118	0					
ANR	653216	IdentifierDeclStatement	"string nextText = peekNextText ( nextLine_ , false , stream ) ;"	5399:1:157343:157399	653118	7	True				
ANR	653217	IdentifierDecl	"nextText = peekNextText ( nextLine_ , false , stream )"		653118	0					
ANR	653218	IdentifierDeclType	string		653118	0					
ANR	653219	Identifier	nextText		653118	1					
ANR	653220	AssignmentExpression	"nextText = peekNextText ( nextLine_ , false , stream )"		653118	2		=			
ANR	653221	Identifier	nextText		653118	0					
ANR	653222	CallExpression	"peekNextText ( nextLine_ , false , stream )"		653118	1					
ANR	653223	Callee	peekNextText		653118	0					
ANR	653224	Identifier	peekNextText		653118	0					
ANR	653225	ArgumentList	nextLine_		653118	1					
ANR	653226	Argument	nextLine_		653118	0					
ANR	653227	Identifier	nextLine_		653118	0					
ANR	653228	Argument	false		653118	1					
ANR	653229	Identifier	false		653118	0					
ANR	653230	Argument	stream		653118	2					
ANR	653231	Identifier	stream		653118	0					
ANR	653232	IfStatement	"if ( nextText . length ( ) == 0 || ! isCharPotentialHeader ( nextText , 0 ) )"		653118	8					
ANR	653233	Condition	"nextText . length ( ) == 0 || ! isCharPotentialHeader ( nextText , 0 )"	5400:5:157406:157466	653118	0	True				
ANR	653234	OrExpression	"nextText . length ( ) == 0 || ! isCharPotentialHeader ( nextText , 0 )"		653118	0		||			
ANR	653235	EqualityExpression	nextText . length ( ) == 0		653118	0		==			
ANR	653236	CallExpression	nextText . length ( )		653118	0					
ANR	653237	Callee	nextText . length		653118	0					
ANR	653238	MemberAccess	nextText . length		653118	0					
ANR	653239	Identifier	nextText		653118	0					
ANR	653240	Identifier	length		653118	1					
ANR	653241	ArgumentList			653118	1					
ANR	653242	PrimaryExpression	0		653118	1					
ANR	653243	UnaryOperationExpression	"! isCharPotentialHeader ( nextText , 0 )"		653118	1					
ANR	653244	UnaryOperator	!		653118	0					
ANR	653245	CallExpression	"isCharPotentialHeader ( nextText , 0 )"		653118	1					
ANR	653246	Callee	isCharPotentialHeader		653118	0					
ANR	653247	Identifier	isCharPotentialHeader		653118	0					
ANR	653248	ArgumentList	nextText		653118	1					
ANR	653249	Argument	nextText		653118	0					
ANR	653250	Identifier	nextText		653118	0					
ANR	653251	Argument	0		653118	1					
ANR	653252	PrimaryExpression	0		653118	0					
ANR	653253	ReturnStatement	return false ;	5401:2:157471:157483	653118	1	True				
ANR	653254	Identifier	false		653118	0					
ANR	653255	IdentifierDeclStatement	"const string * newHeader = ASBase :: findHeader ( nextText , 0 , headers ) ;"	5403:1:157487:157553	653118	9	True				
ANR	653256	IdentifierDecl	"* newHeader = ASBase :: findHeader ( nextText , 0 , headers )"		653118	0					
ANR	653257	IdentifierDeclType	const string *		653118	0					
ANR	653258	Identifier	newHeader		653118	1					
ANR	653259	AssignmentExpression	"* newHeader = ASBase :: findHeader ( nextText , 0 , headers )"		653118	2		=			
ANR	653260	Identifier	newHeader		653118	0					
ANR	653261	CallExpression	"ASBase :: findHeader ( nextText , 0 , headers )"		653118	1					
ANR	653262	Callee	ASBase :: findHeader		653118	0					
ANR	653263	Identifier	ASBase :: findHeader		653118	0					
ANR	653264	ArgumentList	nextText		653118	1					
ANR	653265	Argument	nextText		653118	0					
ANR	653266	Identifier	nextText		653118	0					
ANR	653267	Argument	0		653118	1					
ANR	653268	PrimaryExpression	0		653118	0					
ANR	653269	Argument	headers		653118	2					
ANR	653270	Identifier	headers		653118	0					
ANR	653271	IfStatement	if ( newHeader == nullptr )		653118	10					
ANR	653272	Condition	newHeader == nullptr	5405:5:157561:157580	653118	0	True				
ANR	653273	EqualityExpression	newHeader == nullptr		653118	0		==			
ANR	653274	Identifier	newHeader		653118	0					
ANR	653275	Identifier	nullptr		653118	1					
ANR	653276	ReturnStatement	return false ;	5406:2:157585:157597	653118	1	True				
ANR	653277	Identifier	false		653118	0					
ANR	653278	IfStatement	if ( isClosingHeader ( newHeader ) && ! shouldBreakClosingHeaderBlocks )		653118	11					
ANR	653279	Condition	isClosingHeader ( newHeader ) && ! shouldBreakClosingHeaderBlocks	5409:5:157668:157728	653118	0	True				
ANR	653280	AndExpression	isClosingHeader ( newHeader ) && ! shouldBreakClosingHeaderBlocks		653118	0		&&			
ANR	653281	CallExpression	isClosingHeader ( newHeader )		653118	0					
ANR	653282	Callee	isClosingHeader		653118	0					
ANR	653283	Identifier	isClosingHeader		653118	0					
ANR	653284	ArgumentList	newHeader		653118	1					
ANR	653285	Argument	newHeader		653118	0					
ANR	653286	Identifier	newHeader		653118	0					
ANR	653287	UnaryOperationExpression	! shouldBreakClosingHeaderBlocks		653118	1					
ANR	653288	UnaryOperator	!		653118	0					
ANR	653289	Identifier	shouldBreakClosingHeaderBlocks		653118	1					
ANR	653290	CompoundStatement		28:1:968:968	653118	1					
ANR	653291	ExpressionStatement	isAppendPostBlockEmptyLineRequested = false	5411:2:157736:157779	653118	0	True				
ANR	653292	AssignmentExpression	isAppendPostBlockEmptyLineRequested = false		653118	0		=			
ANR	653293	Identifier	isAppendPostBlockEmptyLineRequested		653118	0					
ANR	653294	Identifier	false		653118	1					
ANR	653295	ReturnStatement	return false ;	5412:2:157783:157795	653118	1	True				
ANR	653296	Identifier	false		653118	0					
ANR	653297	ReturnStatement	return true ;	5415:1:157802:157813	653118	12	True				
ANR	653298	Identifier	true		653118	0					
ANR	653299	ReturnType	bool		653118	1					
ANR	653300	Identifier	ASFormatter :: commentAndHeaderFollows		653118	2					
ANR	653301	ParameterList			653118	3					
ANR	653302	CFGEntryNode	ENTRY		653118		True				
ANR	653303	CFGExitNode	EXIT		653118		True				
ANR	653304	Symbol	firstChar		653118						
ANR	653305	Symbol	shouldDeleteEmptyLines		653118						
ANR	653306	Symbol	nextLine_		653118						
ANR	653307	Symbol	string :: npos		653118						
ANR	653308	Symbol	ASBase :: findHeader		653118						
ANR	653309	Symbol	isClosingHeader		653118						
ANR	653310	Symbol	shouldBreakBlocks		653118						
ANR	653311	Symbol	shouldBreakClosingHeaderBlocks		653118						
ANR	653312	Symbol	newHeader		653118						
ANR	653313	Symbol	stream		653118						
ANR	653314	Symbol	stream -> peekNextLine		653118						
ANR	653315	Symbol	sourceIterator		653118						
ANR	653316	Symbol	headers		653118						
ANR	653317	Symbol	nextLine_ . find_first_not_of		653118						
ANR	653318	Symbol	isAppendPostBlockEmptyLineRequested		653118						
ANR	653319	Symbol	nextText		653118						
ANR	653320	Symbol	false		653118						
ANR	653321	Symbol	stream -> hasMoreLines		653118						
ANR	653322	Symbol	nextLine_ . compare		653118						
ANR	653323	Symbol	make_shared		653118						
ANR	653324	Symbol	ASPeekStream		653118						
ANR	653325	Symbol	isCharPotentialHeader		653118						
ANR	653326	Symbol	nextText . length		653118						
ANR	653327	Symbol	* stream		653118						
ANR	653328	Symbol	true		653118						
ANR	653329	Symbol	peekNextText		653118						
ANR	653330	Symbol	nullptr		653118						
ANR	653331	Function	ASFormatter :: isCurrentBraceBroken	5424:0:158029:160953							
ANR	653332	FunctionDef	ASFormatter :: isCurrentBraceBroken ()		653331	0					
ANR	653333	CompoundStatement		5425:0:158076:160953	653331	0					
ANR	653334	ExpressionStatement	assert ( braceTypeStack -> size ( ) > 1 )	5426:1:158079:158113	653331	0	True				
ANR	653335	CallExpression	assert ( braceTypeStack -> size ( ) > 1 )		653331	0					
ANR	653336	Callee	assert		653331	0					
ANR	653337	Identifier	assert		653331	0					
ANR	653338	ArgumentList	braceTypeStack -> size ( ) > 1		653331	1					
ANR	653339	Argument	braceTypeStack -> size ( ) > 1		653331	0					
ANR	653340	RelationalExpression	braceTypeStack -> size ( ) > 1		653331	0		>			
ANR	653341	CallExpression	braceTypeStack -> size ( )		653331	0					
ANR	653342	Callee	braceTypeStack -> size		653331	0					
ANR	653343	PtrMemberAccess	braceTypeStack -> size		653331	0					
ANR	653344	Identifier	braceTypeStack		653331	0					
ANR	653345	Identifier	size		653331	1					
ANR	653346	ArgumentList			653331	1					
ANR	653347	PrimaryExpression	1		653331	1					
ANR	653348	IdentifierDeclStatement	bool breakBrace = false ;	5428:1:158117:158140	653331	1	True				
ANR	653349	IdentifierDecl	breakBrace = false		653331	0					
ANR	653350	IdentifierDeclType	bool		653331	0					
ANR	653351	Identifier	breakBrace		653331	1					
ANR	653352	AssignmentExpression	breakBrace = false		653331	2		=			
ANR	653353	Identifier	false		653331	0					
ANR	653354	Identifier	false		653331	1					
ANR	653355	IdentifierDeclStatement	size_t stackEnd = braceTypeStack -> size ( ) - 1 ;	5429:1:158143:158187	653331	2	True				
ANR	653356	IdentifierDecl	stackEnd = braceTypeStack -> size ( ) - 1		653331	0					
ANR	653357	IdentifierDeclType	size_t		653331	0					
ANR	653358	Identifier	stackEnd		653331	1					
ANR	653359	AssignmentExpression	stackEnd = braceTypeStack -> size ( ) - 1		653331	2		=			
ANR	653360	Identifier	stackEnd		653331	0					
ANR	653361	AdditiveExpression	braceTypeStack -> size ( ) - 1		653331	1		-			
ANR	653362	CallExpression	braceTypeStack -> size ( )		653331	0					
ANR	653363	Callee	braceTypeStack -> size		653331	0					
ANR	653364	PtrMemberAccess	braceTypeStack -> size		653331	0					
ANR	653365	Identifier	braceTypeStack		653331	0					
ANR	653366	Identifier	size		653331	1					
ANR	653367	ArgumentList			653331	1					
ANR	653368	PrimaryExpression	1		653331	1					
ANR	653369	IfStatement	"if ( shouldAttachExternC && isBraceType ( ( * braceTypeStack ) [ stackEnd ] , EXTERN_TYPE ) )"		653331	3					
ANR	653370	Condition	"shouldAttachExternC && isBraceType ( ( * braceTypeStack ) [ stackEnd ] , EXTERN_TYPE )"	5432:5:158221:158305	653331	0	True				
ANR	653371	AndExpression	"shouldAttachExternC && isBraceType ( ( * braceTypeStack ) [ stackEnd ] , EXTERN_TYPE )"		653331	0		&&			
ANR	653372	Identifier	shouldAttachExternC		653331	0					
ANR	653373	CallExpression	"isBraceType ( ( * braceTypeStack ) [ stackEnd ] , EXTERN_TYPE )"		653331	1					
ANR	653374	Callee	isBraceType		653331	0					
ANR	653375	Identifier	isBraceType		653331	0					
ANR	653376	ArgumentList	( * braceTypeStack ) [ stackEnd ]		653331	1					
ANR	653377	Argument	( * braceTypeStack ) [ stackEnd ]		653331	0					
ANR	653378	ArrayIndexing	( * braceTypeStack ) [ stackEnd ]		653331	0					
ANR	653379	UnaryOperationExpression	* braceTypeStack		653331	0					
ANR	653380	UnaryOperator	*		653331	0					
ANR	653381	Identifier	braceTypeStack		653331	1					
ANR	653382	Identifier	stackEnd		653331	1					
ANR	653383	Argument	EXTERN_TYPE		653331	1					
ANR	653384	Identifier	EXTERN_TYPE		653331	0					
ANR	653385	CompoundStatement		10:1:232:232	653331	1					
ANR	653386	ReturnStatement	return false ;	5435:2:158313:158325	653331	0	True				
ANR	653387	Identifier	false		653331	0					
ANR	653388	IfStatement	"if ( shouldAttachNamespace && isBraceType ( ( * braceTypeStack ) [ stackEnd ] , NAMESPACE_TYPE ) )"		653331	4					
ANR	653389	Condition	"shouldAttachNamespace && isBraceType ( ( * braceTypeStack ) [ stackEnd ] , NAMESPACE_TYPE )"	5437:5:158335:158424	653331	0	True				
ANR	653390	AndExpression	"shouldAttachNamespace && isBraceType ( ( * braceTypeStack ) [ stackEnd ] , NAMESPACE_TYPE )"		653331	0		&&			
ANR	653391	Identifier	shouldAttachNamespace		653331	0					
ANR	653392	CallExpression	"isBraceType ( ( * braceTypeStack ) [ stackEnd ] , NAMESPACE_TYPE )"		653331	1					
ANR	653393	Callee	isBraceType		653331	0					
ANR	653394	Identifier	isBraceType		653331	0					
ANR	653395	ArgumentList	( * braceTypeStack ) [ stackEnd ]		653331	1					
ANR	653396	Argument	( * braceTypeStack ) [ stackEnd ]		653331	0					
ANR	653397	ArrayIndexing	( * braceTypeStack ) [ stackEnd ]		653331	0					
ANR	653398	UnaryOperationExpression	* braceTypeStack		653331	0					
ANR	653399	UnaryOperator	*		653331	0					
ANR	653400	Identifier	braceTypeStack		653331	1					
ANR	653401	Identifier	stackEnd		653331	1					
ANR	653402	Argument	NAMESPACE_TYPE		653331	1					
ANR	653403	Identifier	NAMESPACE_TYPE		653331	0					
ANR	653404	CompoundStatement		15:1:351:351	653331	1					
ANR	653405	ReturnStatement	return false ;	5440:2:158432:158444	653331	0	True				
ANR	653406	Identifier	false		653331	0					
ANR	653407	IfStatement	"if ( shouldAttachClass && ( isBraceType ( ( * braceTypeStack ) [ stackEnd ] , CLASS_TYPE ) || isBraceType ( ( * braceTypeStack ) [ stackEnd ] , INTERFACE_TYPE ) ) )"		653331	5					
ANR	653408	Condition	"shouldAttachClass && ( isBraceType ( ( * braceTypeStack ) [ stackEnd ] , CLASS_TYPE ) || isBraceType ( ( * braceTypeStack ) [ stackEnd ] , INTERFACE_TYPE ) )"	5442:5:158454:158610	653331	0	True				
ANR	653409	AndExpression	"shouldAttachClass && ( isBraceType ( ( * braceTypeStack ) [ stackEnd ] , CLASS_TYPE ) || isBraceType ( ( * braceTypeStack ) [ stackEnd ] , INTERFACE_TYPE ) )"		653331	0		&&			
ANR	653410	Identifier	shouldAttachClass		653331	0					
ANR	653411	OrExpression	"isBraceType ( ( * braceTypeStack ) [ stackEnd ] , CLASS_TYPE ) || isBraceType ( ( * braceTypeStack ) [ stackEnd ] , INTERFACE_TYPE )"		653331	1		||			
ANR	653412	CallExpression	"isBraceType ( ( * braceTypeStack ) [ stackEnd ] , CLASS_TYPE )"		653331	0					
ANR	653413	Callee	isBraceType		653331	0					
ANR	653414	Identifier	isBraceType		653331	0					
ANR	653415	ArgumentList	( * braceTypeStack ) [ stackEnd ]		653331	1					
ANR	653416	Argument	( * braceTypeStack ) [ stackEnd ]		653331	0					
ANR	653417	ArrayIndexing	( * braceTypeStack ) [ stackEnd ]		653331	0					
ANR	653418	UnaryOperationExpression	* braceTypeStack		653331	0					
ANR	653419	UnaryOperator	*		653331	0					
ANR	653420	Identifier	braceTypeStack		653331	1					
ANR	653421	Identifier	stackEnd		653331	1					
ANR	653422	Argument	CLASS_TYPE		653331	1					
ANR	653423	Identifier	CLASS_TYPE		653331	0					
ANR	653424	CallExpression	"isBraceType ( ( * braceTypeStack ) [ stackEnd ] , INTERFACE_TYPE )"		653331	1					
ANR	653425	Callee	isBraceType		653331	0					
ANR	653426	Identifier	isBraceType		653331	0					
ANR	653427	ArgumentList	( * braceTypeStack ) [ stackEnd ]		653331	1					
ANR	653428	Argument	( * braceTypeStack ) [ stackEnd ]		653331	0					
ANR	653429	ArrayIndexing	( * braceTypeStack ) [ stackEnd ]		653331	0					
ANR	653430	UnaryOperationExpression	* braceTypeStack		653331	0					
ANR	653431	UnaryOperator	*		653331	0					
ANR	653432	Identifier	braceTypeStack		653331	1					
ANR	653433	Identifier	stackEnd		653331	1					
ANR	653434	Argument	INTERFACE_TYPE		653331	1					
ANR	653435	Identifier	INTERFACE_TYPE		653331	0					
ANR	653436	CompoundStatement		21:1:537:537	653331	1					
ANR	653437	ReturnStatement	return false ;	5446:2:158618:158630	653331	0	True				
ANR	653438	Identifier	false		653331	0					
ANR	653439	IfStatement	"if ( shouldAttachInline && isCStyle ( ) && braceFormatMode != RUN_IN_MODE && ! ( currentLineBeginsWithBrace && peekNextChar ( ) == '/' ) && isBraceType ( ( * braceTypeStack ) [ stackEnd ] , COMMAND_TYPE ) )"		653331	6					
ANR	653440	Condition	"shouldAttachInline && isCStyle ( ) && braceFormatMode != RUN_IN_MODE && ! ( currentLineBeginsWithBrace && peekNextChar ( ) == '/' ) && isBraceType ( ( * braceTypeStack ) [ stackEnd ] , COMMAND_TYPE )"	5448:5:158640:158875	653331	0	True				
ANR	653441	AndExpression	"shouldAttachInline && isCStyle ( ) && braceFormatMode != RUN_IN_MODE && ! ( currentLineBeginsWithBrace && peekNextChar ( ) == '/' ) && isBraceType ( ( * braceTypeStack ) [ stackEnd ] , COMMAND_TYPE )"		653331	0		&&			
ANR	653442	Identifier	shouldAttachInline		653331	0					
ANR	653443	AndExpression	"isCStyle ( ) && braceFormatMode != RUN_IN_MODE && ! ( currentLineBeginsWithBrace && peekNextChar ( ) == '/' ) && isBraceType ( ( * braceTypeStack ) [ stackEnd ] , COMMAND_TYPE )"		653331	1		&&			
ANR	653444	CallExpression	isCStyle ( )		653331	0					
ANR	653445	Callee	isCStyle		653331	0					
ANR	653446	Identifier	isCStyle		653331	0					
ANR	653447	ArgumentList			653331	1					
ANR	653448	AndExpression	"braceFormatMode != RUN_IN_MODE && ! ( currentLineBeginsWithBrace && peekNextChar ( ) == '/' ) && isBraceType ( ( * braceTypeStack ) [ stackEnd ] , COMMAND_TYPE )"		653331	1		&&			
ANR	653449	EqualityExpression	braceFormatMode != RUN_IN_MODE		653331	0		!=			
ANR	653450	Identifier	braceFormatMode		653331	0					
ANR	653451	Identifier	RUN_IN_MODE		653331	1					
ANR	653452	AndExpression	"! ( currentLineBeginsWithBrace && peekNextChar ( ) == '/' ) && isBraceType ( ( * braceTypeStack ) [ stackEnd ] , COMMAND_TYPE )"		653331	1		&&			
ANR	653453	UnaryOperationExpression	! ( currentLineBeginsWithBrace && peekNextChar ( ) == '/' )		653331	0					
ANR	653454	UnaryOperator	!		653331	0					
ANR	653455	AndExpression	currentLineBeginsWithBrace && peekNextChar ( ) == '/'		653331	1		&&			
ANR	653456	Identifier	currentLineBeginsWithBrace		653331	0					
ANR	653457	EqualityExpression	peekNextChar ( ) == '/'		653331	1		==			
ANR	653458	CallExpression	peekNextChar ( )		653331	0					
ANR	653459	Callee	peekNextChar		653331	0					
ANR	653460	Identifier	peekNextChar		653331	0					
ANR	653461	ArgumentList			653331	1					
ANR	653462	PrimaryExpression	'/'		653331	1					
ANR	653463	CallExpression	"isBraceType ( ( * braceTypeStack ) [ stackEnd ] , COMMAND_TYPE )"		653331	1					
ANR	653464	Callee	isBraceType		653331	0					
ANR	653465	Identifier	isBraceType		653331	0					
ANR	653466	ArgumentList	( * braceTypeStack ) [ stackEnd ]		653331	1					
ANR	653467	Argument	( * braceTypeStack ) [ stackEnd ]		653331	0					
ANR	653468	ArrayIndexing	( * braceTypeStack ) [ stackEnd ]		653331	0					
ANR	653469	UnaryOperationExpression	* braceTypeStack		653331	0					
ANR	653470	UnaryOperator	*		653331	0					
ANR	653471	Identifier	braceTypeStack		653331	1					
ANR	653472	Identifier	stackEnd		653331	1					
ANR	653473	Argument	COMMAND_TYPE		653331	1					
ANR	653474	Identifier	COMMAND_TYPE		653331	0					
ANR	653475	CompoundStatement		30:2:806:814	653331	1					
ANR	653476	IdentifierDeclStatement	size_t i ;	5454:2:158883:158891	653331	0	True				
ANR	653477	IdentifierDecl	i		653331	0					
ANR	653478	IdentifierDeclType	size_t		653331	0					
ANR	653479	Identifier	i		653331	1					
ANR	653480	ForStatement	for ( i = 1 ; i < braceTypeStack -> size ( ) ; i ++ )		653331	1					
ANR	653481	ForInit	i = 1 ;	5455:7:158900:158905	653331	0	True				
ANR	653482	AssignmentExpression	i = 1		653331	0		=			
ANR	653483	Identifier	i		653331	0					
ANR	653484	PrimaryExpression	1		653331	1					
ANR	653485	Condition	i < braceTypeStack -> size ( )	5455:14:158907:158932	653331	1	True				
ANR	653486	RelationalExpression	i < braceTypeStack -> size ( )		653331	0		<			
ANR	653487	Identifier	i		653331	0					
ANR	653488	CallExpression	braceTypeStack -> size ( )		653331	1					
ANR	653489	Callee	braceTypeStack -> size		653331	0					
ANR	653490	PtrMemberAccess	braceTypeStack -> size		653331	0					
ANR	653491	Identifier	braceTypeStack		653331	0					
ANR	653492	Identifier	size		653331	1					
ANR	653493	ArgumentList			653331	1					
ANR	653494	PostIncDecOperationExpression	i ++	5455:42:158935:158937	653331	2	True				
ANR	653495	Identifier	i		653331	0					
ANR	653496	IncDec	++		653331	1					
ANR	653497	IfStatement	"if ( isBraceType ( ( * braceTypeStack ) [ i ] , CLASS_TYPE ) || isBraceType ( ( * braceTypeStack ) [ i ] , STRUCT_TYPE ) )"		653331	3					
ANR	653498	Condition	"isBraceType ( ( * braceTypeStack ) [ i ] , CLASS_TYPE ) || isBraceType ( ( * braceTypeStack ) [ i ] , STRUCT_TYPE )"	5456:7:158947:159052	653331	0	True				
ANR	653499	OrExpression	"isBraceType ( ( * braceTypeStack ) [ i ] , CLASS_TYPE ) || isBraceType ( ( * braceTypeStack ) [ i ] , STRUCT_TYPE )"		653331	0		||			
ANR	653500	CallExpression	"isBraceType ( ( * braceTypeStack ) [ i ] , CLASS_TYPE )"		653331	0					
ANR	653501	Callee	isBraceType		653331	0					
ANR	653502	Identifier	isBraceType		653331	0					
ANR	653503	ArgumentList	( * braceTypeStack ) [ i ]		653331	1					
ANR	653504	Argument	( * braceTypeStack ) [ i ]		653331	0					
ANR	653505	ArrayIndexing	( * braceTypeStack ) [ i ]		653331	0					
ANR	653506	UnaryOperationExpression	* braceTypeStack		653331	0					
ANR	653507	UnaryOperator	*		653331	0					
ANR	653508	Identifier	braceTypeStack		653331	1					
ANR	653509	Identifier	i		653331	1					
ANR	653510	Argument	CLASS_TYPE		653331	1					
ANR	653511	Identifier	CLASS_TYPE		653331	0					
ANR	653512	CallExpression	"isBraceType ( ( * braceTypeStack ) [ i ] , STRUCT_TYPE )"		653331	1					
ANR	653513	Callee	isBraceType		653331	0					
ANR	653514	Identifier	isBraceType		653331	0					
ANR	653515	ArgumentList	( * braceTypeStack ) [ i ]		653331	1					
ANR	653516	Argument	( * braceTypeStack ) [ i ]		653331	0					
ANR	653517	ArrayIndexing	( * braceTypeStack ) [ i ]		653331	0					
ANR	653518	UnaryOperationExpression	* braceTypeStack		653331	0					
ANR	653519	UnaryOperator	*		653331	0					
ANR	653520	Identifier	braceTypeStack		653331	1					
ANR	653521	Identifier	i		653331	1					
ANR	653522	Argument	STRUCT_TYPE		653331	1					
ANR	653523	Identifier	STRUCT_TYPE		653331	0					
ANR	653524	ReturnStatement	return false ;	5458:4:159059:159071	653331	1	True				
ANR	653525	Identifier	false		653331	0					
ANR	653526	IfStatement	"if ( isBraceType ( ( * braceTypeStack ) [ stackEnd ] , EXTERN_TYPE ) )"		653331	7					
ANR	653527	Condition	"isBraceType ( ( * braceTypeStack ) [ stackEnd ] , EXTERN_TYPE )"	5462:5:159099:159151	653331	0	True				
ANR	653528	CallExpression	"isBraceType ( ( * braceTypeStack ) [ stackEnd ] , EXTERN_TYPE )"		653331	0					
ANR	653529	Callee	isBraceType		653331	0					
ANR	653530	Identifier	isBraceType		653331	0					
ANR	653531	ArgumentList	( * braceTypeStack ) [ stackEnd ]		653331	1					
ANR	653532	Argument	( * braceTypeStack ) [ stackEnd ]		653331	0					
ANR	653533	ArrayIndexing	( * braceTypeStack ) [ stackEnd ]		653331	0					
ANR	653534	UnaryOperationExpression	* braceTypeStack		653331	0					
ANR	653535	UnaryOperator	*		653331	0					
ANR	653536	Identifier	braceTypeStack		653331	1					
ANR	653537	Identifier	stackEnd		653331	1					
ANR	653538	Argument	EXTERN_TYPE		653331	1					
ANR	653539	Identifier	EXTERN_TYPE		653331	0					
ANR	653540	CompoundStatement		39:1:1078:1078	653331	1					
ANR	653541	IfStatement	if ( currentLineBeginsWithBrace || braceFormatMode == RUN_IN_MODE )		653331	0					
ANR	653542	Condition	currentLineBeginsWithBrace || braceFormatMode == RUN_IN_MODE	5464:6:159163:159232	653331	0	True				
ANR	653543	OrExpression	currentLineBeginsWithBrace || braceFormatMode == RUN_IN_MODE		653331	0		||			
ANR	653544	Identifier	currentLineBeginsWithBrace		653331	0					
ANR	653545	EqualityExpression	braceFormatMode == RUN_IN_MODE		653331	1		==			
ANR	653546	Identifier	braceFormatMode		653331	0					
ANR	653547	Identifier	RUN_IN_MODE		653331	1					
ANR	653548	ExpressionStatement	breakBrace = true	5466:3:159238:159255	653331	1	True				
ANR	653549	AssignmentExpression	breakBrace = true		653331	0		=			
ANR	653550	Identifier	breakBrace		653331	0					
ANR	653551	Identifier	true		653331	1					
ANR	653552	ElseStatement	else		653331	0					
ANR	653553	IfStatement	if ( braceFormatMode == NONE_MODE )		653331	0					
ANR	653554	Condition	braceFormatMode == NONE_MODE	5468:10:159270:159297	653331	0	True				
ANR	653555	EqualityExpression	braceFormatMode == NONE_MODE		653331	0		==			
ANR	653556	Identifier	braceFormatMode		653331	0					
ANR	653557	Identifier	NONE_MODE		653331	1					
ANR	653558	CompoundStatement		45:1:1224:1224	653331	1					
ANR	653559	IfStatement	if ( currentLineBeginsWithBrace && ( int ) currentLineFirstBraceNum == charNum )		653331	0					
ANR	653560	Condition	currentLineBeginsWithBrace && ( int ) currentLineFirstBraceNum == charNum	5470:6:159309:159389	653331	0	True				
ANR	653561	AndExpression	currentLineBeginsWithBrace && ( int ) currentLineFirstBraceNum == charNum		653331	0		&&			
ANR	653562	Identifier	currentLineBeginsWithBrace		653331	0					
ANR	653563	EqualityExpression	( int ) currentLineFirstBraceNum == charNum		653331	1		==			
ANR	653564	CastExpression	( int ) currentLineFirstBraceNum		653331	0					
ANR	653565	CastTarget	int		653331	0					
ANR	653566	Identifier	currentLineFirstBraceNum		653331	1					
ANR	653567	Identifier	charNum		653331	1					
ANR	653568	ExpressionStatement	breakBrace = true	5472:3:159395:159412	653331	1	True				
ANR	653569	AssignmentExpression	breakBrace = true		653331	0		=			
ANR	653570	Identifier	breakBrace		653331	0					
ANR	653571	Identifier	true		653331	1					
ANR	653572	ElseStatement	else		653331	0					
ANR	653573	IfStatement	if ( braceFormatMode == BREAK_MODE || braceFormatMode == RUN_IN_MODE )		653331	0					
ANR	653574	Condition	braceFormatMode == BREAK_MODE || braceFormatMode == RUN_IN_MODE	5474:10:159427:159489	653331	0	True				
ANR	653575	OrExpression	braceFormatMode == BREAK_MODE || braceFormatMode == RUN_IN_MODE		653331	0		||			
ANR	653576	EqualityExpression	braceFormatMode == BREAK_MODE		653331	0		==			
ANR	653577	Identifier	braceFormatMode		653331	0					
ANR	653578	Identifier	BREAK_MODE		653331	1					
ANR	653579	EqualityExpression	braceFormatMode == RUN_IN_MODE		653331	1		==			
ANR	653580	Identifier	braceFormatMode		653331	0					
ANR	653581	Identifier	RUN_IN_MODE		653331	1					
ANR	653582	CompoundStatement		51:1:1416:1416	653331	1					
ANR	653583	ExpressionStatement	breakBrace = true	5476:2:159497:159514	653331	0	True				
ANR	653584	AssignmentExpression	breakBrace = true		653331	0		=			
ANR	653585	Identifier	breakBrace		653331	0					
ANR	653586	Identifier	true		653331	1					
ANR	653587	ElseStatement	else		653331	0					
ANR	653588	IfStatement	if ( braceFormatMode == LINUX_MODE )		653331	0					
ANR	653589	Condition	braceFormatMode == LINUX_MODE	5478:10:159529:159557	653331	0	True				
ANR	653590	EqualityExpression	braceFormatMode == LINUX_MODE		653331	0		==			
ANR	653591	Identifier	braceFormatMode		653331	0					
ANR	653592	Identifier	LINUX_MODE		653331	1					
ANR	653593	CompoundStatement		55:1:1484:1484	653331	1					
ANR	653594	IfStatement	"if ( isBraceType ( ( * braceTypeStack ) [ stackEnd ] , NAMESPACE_TYPE ) )"		653331	0					
ANR	653595	Condition	"isBraceType ( ( * braceTypeStack ) [ stackEnd ] , NAMESPACE_TYPE )"	5481:6:159621:159676	653331	0	True				
ANR	653596	CallExpression	"isBraceType ( ( * braceTypeStack ) [ stackEnd ] , NAMESPACE_TYPE )"		653331	0					
ANR	653597	Callee	isBraceType		653331	0					
ANR	653598	Identifier	isBraceType		653331	0					
ANR	653599	ArgumentList	( * braceTypeStack ) [ stackEnd ]		653331	1					
ANR	653600	Argument	( * braceTypeStack ) [ stackEnd ]		653331	0					
ANR	653601	ArrayIndexing	( * braceTypeStack ) [ stackEnd ]		653331	0					
ANR	653602	UnaryOperationExpression	* braceTypeStack		653331	0					
ANR	653603	UnaryOperator	*		653331	0					
ANR	653604	Identifier	braceTypeStack		653331	1					
ANR	653605	Identifier	stackEnd		653331	1					
ANR	653606	Argument	NAMESPACE_TYPE		653331	1					
ANR	653607	Identifier	NAMESPACE_TYPE		653331	0					
ANR	653608	CompoundStatement		58:2:1604:1604	653331	1					
ANR	653609	IfStatement	if ( formattingStyle != STYLE_STROUSTRUP && formattingStyle != STYLE_MOZILLA )		653331	0					
ANR	653610	Condition	formattingStyle != STYLE_STROUSTRUP && formattingStyle != STYLE_MOZILLA	5483:7:159690:159771	653331	0	True				
ANR	653611	AndExpression	formattingStyle != STYLE_STROUSTRUP && formattingStyle != STYLE_MOZILLA		653331	0		&&			
ANR	653612	EqualityExpression	formattingStyle != STYLE_STROUSTRUP		653331	0		!=			
ANR	653613	Identifier	formattingStyle		653331	0					
ANR	653614	Identifier	STYLE_STROUSTRUP		653331	1					
ANR	653615	EqualityExpression	formattingStyle != STYLE_MOZILLA		653331	1		!=			
ANR	653616	Identifier	formattingStyle		653331	0					
ANR	653617	Identifier	STYLE_MOZILLA		653331	1					
ANR	653618	ExpressionStatement	breakBrace = true	5485:4:159778:159795	653331	1	True				
ANR	653619	AssignmentExpression	breakBrace = true		653331	0		=			
ANR	653620	Identifier	breakBrace		653331	0					
ANR	653621	Identifier	true		653331	1					
ANR	653622	ElseStatement	else		653331	0					
ANR	653623	IfStatement	"if ( isBraceType ( ( * braceTypeStack ) [ stackEnd ] , CLASS_TYPE ) || isBraceType ( ( * braceTypeStack ) [ stackEnd ] , INTERFACE_TYPE ) )"		653331	0					
ANR	653624	Condition	"isBraceType ( ( * braceTypeStack ) [ stackEnd ] , CLASS_TYPE ) || isBraceType ( ( * braceTypeStack ) [ stackEnd ] , INTERFACE_TYPE )"	5488:11:159862:159984	653331	0	True				
ANR	653625	OrExpression	"isBraceType ( ( * braceTypeStack ) [ stackEnd ] , CLASS_TYPE ) || isBraceType ( ( * braceTypeStack ) [ stackEnd ] , INTERFACE_TYPE )"		653331	0		||			
ANR	653626	CallExpression	"isBraceType ( ( * braceTypeStack ) [ stackEnd ] , CLASS_TYPE )"		653331	0					
ANR	653627	Callee	isBraceType		653331	0					
ANR	653628	Identifier	isBraceType		653331	0					
ANR	653629	ArgumentList	( * braceTypeStack ) [ stackEnd ]		653331	1					
ANR	653630	Argument	( * braceTypeStack ) [ stackEnd ]		653331	0					
ANR	653631	ArrayIndexing	( * braceTypeStack ) [ stackEnd ]		653331	0					
ANR	653632	UnaryOperationExpression	* braceTypeStack		653331	0					
ANR	653633	UnaryOperator	*		653331	0					
ANR	653634	Identifier	braceTypeStack		653331	1					
ANR	653635	Identifier	stackEnd		653331	1					
ANR	653636	Argument	CLASS_TYPE		653331	1					
ANR	653637	Identifier	CLASS_TYPE		653331	0					
ANR	653638	CallExpression	"isBraceType ( ( * braceTypeStack ) [ stackEnd ] , INTERFACE_TYPE )"		653331	1					
ANR	653639	Callee	isBraceType		653331	0					
ANR	653640	Identifier	isBraceType		653331	0					
ANR	653641	ArgumentList	( * braceTypeStack ) [ stackEnd ]		653331	1					
ANR	653642	Argument	( * braceTypeStack ) [ stackEnd ]		653331	0					
ANR	653643	ArrayIndexing	( * braceTypeStack ) [ stackEnd ]		653331	0					
ANR	653644	UnaryOperationExpression	* braceTypeStack		653331	0					
ANR	653645	UnaryOperator	*		653331	0					
ANR	653646	Identifier	braceTypeStack		653331	1					
ANR	653647	Identifier	stackEnd		653331	1					
ANR	653648	Argument	INTERFACE_TYPE		653331	1					
ANR	653649	Identifier	INTERFACE_TYPE		653331	0					
ANR	653650	CompoundStatement		66:2:1912:1912	653331	1					
ANR	653651	IfStatement	if ( formattingStyle != STYLE_STROUSTRUP )		653331	0					
ANR	653652	Condition	formattingStyle != STYLE_STROUSTRUP	5491:7:159998:160032	653331	0	True				
ANR	653653	EqualityExpression	formattingStyle != STYLE_STROUSTRUP		653331	0		!=			
ANR	653654	Identifier	formattingStyle		653331	0					
ANR	653655	Identifier	STYLE_STROUSTRUP		653331	1					
ANR	653656	ExpressionStatement	breakBrace = true	5492:4:160039:160056	653331	1	True				
ANR	653657	AssignmentExpression	breakBrace = true		653331	0		=			
ANR	653658	Identifier	breakBrace		653331	0					
ANR	653659	Identifier	true		653331	1					
ANR	653660	ElseStatement	else		653331	0					
ANR	653661	IfStatement	"if ( isBraceType ( ( * braceTypeStack ) [ stackEnd ] , STRUCT_TYPE ) )"		653331	0					
ANR	653662	Condition	"isBraceType ( ( * braceTypeStack ) [ stackEnd ] , STRUCT_TYPE )"	5495:11:160145:160197	653331	0	True				
ANR	653663	CallExpression	"isBraceType ( ( * braceTypeStack ) [ stackEnd ] , STRUCT_TYPE )"		653331	0					
ANR	653664	Callee	isBraceType		653331	0					
ANR	653665	Identifier	isBraceType		653331	0					
ANR	653666	ArgumentList	( * braceTypeStack ) [ stackEnd ]		653331	1					
ANR	653667	Argument	( * braceTypeStack ) [ stackEnd ]		653331	0					
ANR	653668	ArrayIndexing	( * braceTypeStack ) [ stackEnd ]		653331	0					
ANR	653669	UnaryOperationExpression	* braceTypeStack		653331	0					
ANR	653670	UnaryOperator	*		653331	0					
ANR	653671	Identifier	braceTypeStack		653331	1					
ANR	653672	Identifier	stackEnd		653331	1					
ANR	653673	Argument	STRUCT_TYPE		653331	1					
ANR	653674	Identifier	STRUCT_TYPE		653331	0					
ANR	653675	CompoundStatement		72:2:2125:2125	653331	1					
ANR	653676	IfStatement	if ( formattingStyle == STYLE_MOZILLA )		653331	0					
ANR	653677	Condition	formattingStyle == STYLE_MOZILLA	5497:7:160211:160242	653331	0	True				
ANR	653678	EqualityExpression	formattingStyle == STYLE_MOZILLA		653331	0		==			
ANR	653679	Identifier	formattingStyle		653331	0					
ANR	653680	Identifier	STYLE_MOZILLA		653331	1					
ANR	653681	ExpressionStatement	breakBrace = true	5498:4:160249:160266	653331	1	True				
ANR	653682	AssignmentExpression	breakBrace = true		653331	0		=			
ANR	653683	Identifier	breakBrace		653331	0					
ANR	653684	Identifier	true		653331	1					
ANR	653685	ElseStatement	else		653331	0					
ANR	653686	IfStatement	"if ( isBraceType ( ( * braceTypeStack ) [ stackEnd ] , COMMAND_TYPE ) )"		653331	0					
ANR	653687	Condition	"isBraceType ( ( * braceTypeStack ) [ stackEnd ] , COMMAND_TYPE )"	5501:11:160324:160377	653331	0	True				
ANR	653688	CallExpression	"isBraceType ( ( * braceTypeStack ) [ stackEnd ] , COMMAND_TYPE )"		653331	0					
ANR	653689	Callee	isBraceType		653331	0					
ANR	653690	Identifier	isBraceType		653331	0					
ANR	653691	ArgumentList	( * braceTypeStack ) [ stackEnd ]		653331	1					
ANR	653692	Argument	( * braceTypeStack ) [ stackEnd ]		653331	0					
ANR	653693	ArrayIndexing	( * braceTypeStack ) [ stackEnd ]		653331	0					
ANR	653694	UnaryOperationExpression	* braceTypeStack		653331	0					
ANR	653695	UnaryOperator	*		653331	0					
ANR	653696	Identifier	braceTypeStack		653331	1					
ANR	653697	Identifier	stackEnd		653331	1					
ANR	653698	Argument	COMMAND_TYPE		653331	1					
ANR	653699	Identifier	COMMAND_TYPE		653331	0					
ANR	653700	CompoundStatement		78:2:2305:2305	653331	1					
ANR	653701	IfStatement	if ( stackEnd == 1 )		653331	0					
ANR	653702	Condition	stackEnd == 1	5503:7:160391:160403	653331	0	True				
ANR	653703	EqualityExpression	stackEnd == 1		653331	0		==			
ANR	653704	Identifier	stackEnd		653331	0					
ANR	653705	PrimaryExpression	1		653331	1					
ANR	653706	CompoundStatement		80:3:2332:2332	653331	1					
ANR	653707	ExpressionStatement	breakBrace = true	5505:4:160415:160432	653331	0	True				
ANR	653708	AssignmentExpression	breakBrace = true		653331	0		=			
ANR	653709	Identifier	breakBrace		653331	0					
ANR	653710	Identifier	true		653331	1					
ANR	653711	ElseStatement	else		653331	0					
ANR	653712	IfStatement	if ( stackEnd > 1 )		653331	0					
ANR	653713	Condition	stackEnd > 1	5507:12:160451:160462	653331	0	True				
ANR	653714	RelationalExpression	stackEnd > 1		653331	0		>			
ANR	653715	Identifier	stackEnd		653331	0					
ANR	653716	PrimaryExpression	1		653331	1					
ANR	653717	CompoundStatement		84:3:2391:2391	653331	1					
ANR	653718	IfStatement	"if ( isBraceType ( ( * braceTypeStack ) [ stackEnd - 1 ] , NAMESPACE_TYPE ) || isBraceType ( ( * braceTypeStack ) [ stackEnd - 1 ] , CLASS_TYPE ) || isBraceType ( ( * braceTypeStack ) [ stackEnd - 1 ] , ARRAY_TYPE ) || isBraceType ( ( * braceTypeStack ) [ stackEnd - 1 ] , STRUCT_TYPE ) || isBraceType ( ( * braceTypeStack ) [ stackEnd - 1 ] , EXTERN_TYPE ) )"		653331	0					
ANR	653719	Condition	"isBraceType ( ( * braceTypeStack ) [ stackEnd - 1 ] , NAMESPACE_TYPE ) || isBraceType ( ( * braceTypeStack ) [ stackEnd - 1 ] , CLASS_TYPE ) || isBraceType ( ( * braceTypeStack ) [ stackEnd - 1 ] , ARRAY_TYPE ) || isBraceType ( ( * braceTypeStack ) [ stackEnd - 1 ] , STRUCT_TYPE ) || isBraceType ( ( * braceTypeStack ) [ stackEnd - 1 ] , EXTERN_TYPE )"	5510:8:160533:160882	653331	0	True				
ANR	653720	OrExpression	"isBraceType ( ( * braceTypeStack ) [ stackEnd - 1 ] , NAMESPACE_TYPE ) || isBraceType ( ( * braceTypeStack ) [ stackEnd - 1 ] , CLASS_TYPE ) || isBraceType ( ( * braceTypeStack ) [ stackEnd - 1 ] , ARRAY_TYPE ) || isBraceType ( ( * braceTypeStack ) [ stackEnd - 1 ] , STRUCT_TYPE ) || isBraceType ( ( * braceTypeStack ) [ stackEnd - 1 ] , EXTERN_TYPE )"		653331	0		||			
ANR	653721	CallExpression	"isBraceType ( ( * braceTypeStack ) [ stackEnd - 1 ] , NAMESPACE_TYPE )"		653331	0					
ANR	653722	Callee	isBraceType		653331	0					
ANR	653723	Identifier	isBraceType		653331	0					
ANR	653724	ArgumentList	( * braceTypeStack ) [ stackEnd - 1 ]		653331	1					
ANR	653725	Argument	( * braceTypeStack ) [ stackEnd - 1 ]		653331	0					
ANR	653726	ArrayIndexing	( * braceTypeStack ) [ stackEnd - 1 ]		653331	0					
ANR	653727	UnaryOperationExpression	* braceTypeStack		653331	0					
ANR	653728	UnaryOperator	*		653331	0					
ANR	653729	Identifier	braceTypeStack		653331	1					
ANR	653730	AdditiveExpression	stackEnd - 1		653331	1		-			
ANR	653731	Identifier	stackEnd		653331	0					
ANR	653732	PrimaryExpression	1		653331	1					
ANR	653733	Argument	NAMESPACE_TYPE		653331	1					
ANR	653734	Identifier	NAMESPACE_TYPE		653331	0					
ANR	653735	OrExpression	"isBraceType ( ( * braceTypeStack ) [ stackEnd - 1 ] , CLASS_TYPE ) || isBraceType ( ( * braceTypeStack ) [ stackEnd - 1 ] , ARRAY_TYPE ) || isBraceType ( ( * braceTypeStack ) [ stackEnd - 1 ] , STRUCT_TYPE ) || isBraceType ( ( * braceTypeStack ) [ stackEnd - 1 ] , EXTERN_TYPE )"		653331	1		||			
ANR	653736	CallExpression	"isBraceType ( ( * braceTypeStack ) [ stackEnd - 1 ] , CLASS_TYPE )"		653331	0					
ANR	653737	Callee	isBraceType		653331	0					
ANR	653738	Identifier	isBraceType		653331	0					
ANR	653739	ArgumentList	( * braceTypeStack ) [ stackEnd - 1 ]		653331	1					
ANR	653740	Argument	( * braceTypeStack ) [ stackEnd - 1 ]		653331	0					
ANR	653741	ArrayIndexing	( * braceTypeStack ) [ stackEnd - 1 ]		653331	0					
ANR	653742	UnaryOperationExpression	* braceTypeStack		653331	0					
ANR	653743	UnaryOperator	*		653331	0					
ANR	653744	Identifier	braceTypeStack		653331	1					
ANR	653745	AdditiveExpression	stackEnd - 1		653331	1		-			
ANR	653746	Identifier	stackEnd		653331	0					
ANR	653747	PrimaryExpression	1		653331	1					
ANR	653748	Argument	CLASS_TYPE		653331	1					
ANR	653749	Identifier	CLASS_TYPE		653331	0					
ANR	653750	OrExpression	"isBraceType ( ( * braceTypeStack ) [ stackEnd - 1 ] , ARRAY_TYPE ) || isBraceType ( ( * braceTypeStack ) [ stackEnd - 1 ] , STRUCT_TYPE ) || isBraceType ( ( * braceTypeStack ) [ stackEnd - 1 ] , EXTERN_TYPE )"		653331	1		||			
ANR	653751	CallExpression	"isBraceType ( ( * braceTypeStack ) [ stackEnd - 1 ] , ARRAY_TYPE )"		653331	0					
ANR	653752	Callee	isBraceType		653331	0					
ANR	653753	Identifier	isBraceType		653331	0					
ANR	653754	ArgumentList	( * braceTypeStack ) [ stackEnd - 1 ]		653331	1					
ANR	653755	Argument	( * braceTypeStack ) [ stackEnd - 1 ]		653331	0					
ANR	653756	ArrayIndexing	( * braceTypeStack ) [ stackEnd - 1 ]		653331	0					
ANR	653757	UnaryOperationExpression	* braceTypeStack		653331	0					
ANR	653758	UnaryOperator	*		653331	0					
ANR	653759	Identifier	braceTypeStack		653331	1					
ANR	653760	AdditiveExpression	stackEnd - 1		653331	1		-			
ANR	653761	Identifier	stackEnd		653331	0					
ANR	653762	PrimaryExpression	1		653331	1					
ANR	653763	Argument	ARRAY_TYPE		653331	1					
ANR	653764	Identifier	ARRAY_TYPE		653331	0					
ANR	653765	OrExpression	"isBraceType ( ( * braceTypeStack ) [ stackEnd - 1 ] , STRUCT_TYPE ) || isBraceType ( ( * braceTypeStack ) [ stackEnd - 1 ] , EXTERN_TYPE )"		653331	1		||			
ANR	653766	CallExpression	"isBraceType ( ( * braceTypeStack ) [ stackEnd - 1 ] , STRUCT_TYPE )"		653331	0					
ANR	653767	Callee	isBraceType		653331	0					
ANR	653768	Identifier	isBraceType		653331	0					
ANR	653769	ArgumentList	( * braceTypeStack ) [ stackEnd - 1 ]		653331	1					
ANR	653770	Argument	( * braceTypeStack ) [ stackEnd - 1 ]		653331	0					
ANR	653771	ArrayIndexing	( * braceTypeStack ) [ stackEnd - 1 ]		653331	0					
ANR	653772	UnaryOperationExpression	* braceTypeStack		653331	0					
ANR	653773	UnaryOperator	*		653331	0					
ANR	653774	Identifier	braceTypeStack		653331	1					
ANR	653775	AdditiveExpression	stackEnd - 1		653331	1		-			
ANR	653776	Identifier	stackEnd		653331	0					
ANR	653777	PrimaryExpression	1		653331	1					
ANR	653778	Argument	STRUCT_TYPE		653331	1					
ANR	653779	Identifier	STRUCT_TYPE		653331	0					
ANR	653780	CallExpression	"isBraceType ( ( * braceTypeStack ) [ stackEnd - 1 ] , EXTERN_TYPE )"		653331	1					
ANR	653781	Callee	isBraceType		653331	0					
ANR	653782	Identifier	isBraceType		653331	0					
ANR	653783	ArgumentList	( * braceTypeStack ) [ stackEnd - 1 ]		653331	1					
ANR	653784	Argument	( * braceTypeStack ) [ stackEnd - 1 ]		653331	0					
ANR	653785	ArrayIndexing	( * braceTypeStack ) [ stackEnd - 1 ]		653331	0					
ANR	653786	UnaryOperationExpression	* braceTypeStack		653331	0					
ANR	653787	UnaryOperator	*		653331	0					
ANR	653788	Identifier	braceTypeStack		653331	1					
ANR	653789	AdditiveExpression	stackEnd - 1		653331	1		-			
ANR	653790	Identifier	stackEnd		653331	0					
ANR	653791	PrimaryExpression	1		653331	1					
ANR	653792	Argument	EXTERN_TYPE		653331	1					
ANR	653793	Identifier	EXTERN_TYPE		653331	0					
ANR	653794	CompoundStatement		91:4:2812:2812	653331	1					
ANR	653795	ExpressionStatement	breakBrace = true	5516:5:160896:160913	653331	0	True				
ANR	653796	AssignmentExpression	breakBrace = true		653331	0		=			
ANR	653797	Identifier	breakBrace		653331	0					
ANR	653798	Identifier	true		653331	1					
ANR	653799	ReturnStatement	return breakBrace ;	5521:1:160934:160951	653331	8	True				
ANR	653800	Identifier	breakBrace		653331	0					
ANR	653801	ReturnType	bool		653331	1					
ANR	653802	Identifier	ASFormatter :: isCurrentBraceBroken		653331	2					
ANR	653803	ParameterList			653331	3					
ANR	653804	CFGEntryNode	ENTRY		653331		True				
ANR	653805	CFGExitNode	EXIT		653331		True				
ANR	653806	Symbol	braceTypeStack		653331						
ANR	653807	Symbol	STYLE_STROUSTRUP		653331						
ANR	653808	Symbol	INTERFACE_TYPE		653331						
ANR	653809	Symbol	RUN_IN_MODE		653331						
ANR	653810	Symbol	shouldAttachNamespace		653331						
ANR	653811	Symbol	shouldAttachExternC		653331						
ANR	653812	Symbol	LINUX_MODE		653331						
ANR	653813	Symbol	shouldAttachClass		653331						
ANR	653814	Symbol	STRUCT_TYPE		653331						
ANR	653815	Symbol	NONE_MODE		653331						
ANR	653816	Symbol	formattingStyle		653331						
ANR	653817	Symbol	NAMESPACE_TYPE		653331						
ANR	653818	Symbol	* stackEnd		653331						
ANR	653819	Symbol	stackEnd		653331						
ANR	653820	Symbol	BREAK_MODE		653331						
ANR	653821	Symbol	* * braceTypeStack		653331						
ANR	653822	Symbol	STYLE_MOZILLA		653331						
ANR	653823	Symbol	isBraceType		653331						
ANR	653824	Symbol	charNum		653331						
ANR	653825	Symbol	CLASS_TYPE		653331						
ANR	653826	Symbol	shouldAttachInline		653331						
ANR	653827	Symbol	currentLineBeginsWithBrace		653331						
ANR	653828	Symbol	breakBrace		653331						
ANR	653829	Symbol	peekNextChar		653331						
ANR	653830	Symbol	* braceTypeStack		653331						
ANR	653831	Symbol	false		653331						
ANR	653832	Symbol	ARRAY_TYPE		653331						
ANR	653833	Symbol	i		653331						
ANR	653834	Symbol	braceTypeStack -> size		653331						
ANR	653835	Symbol	COMMAND_TYPE		653331						
ANR	653836	Symbol	* i		653331						
ANR	653837	Symbol	true		653331						
ANR	653838	Symbol	EXTERN_TYPE		653331						
ANR	653839	Symbol	braceFormatMode		653331						
ANR	653840	Symbol	isCStyle		653331						
ANR	653841	Symbol	currentLineFirstBraceNum		653331						
ANR	653842	Function	ASFormatter :: formatCommentBody	5528:0:161070:161485							
ANR	653843	FunctionDef	ASFormatter :: formatCommentBody ()		653842	0					
ANR	653844	CompoundStatement		5529:0:161108:161485	653842	0					
ANR	653845	ExpressionStatement	assert ( isInComment )	5530:1:161111:161130	653842	0	True				
ANR	653846	CallExpression	assert ( isInComment )		653842	0					
ANR	653847	Callee	assert		653842	0					
ANR	653848	Identifier	assert		653842	0					
ANR	653849	ArgumentList	isInComment		653842	1					
ANR	653850	Argument	isInComment		653842	0					
ANR	653851	Identifier	isInComment		653842	0					
ANR	653852	WhileStatement	while ( charNum < ( int ) currentLine . length ( ) )		653842	1					
ANR	653853	Condition	charNum < ( int ) currentLine . length ( )	5533:8:161164:161199	653842	0	True				
ANR	653854	RelationalExpression	charNum < ( int ) currentLine . length ( )		653842	0		<			
ANR	653855	Identifier	charNum		653842	0					
ANR	653856	CastExpression	( int ) currentLine . length ( )		653842	1					
ANR	653857	CastTarget	int		653842	0					
ANR	653858	CallExpression	currentLine . length ( )		653842	1					
ANR	653859	Callee	currentLine . length		653842	0					
ANR	653860	MemberAccess	currentLine . length		653842	0					
ANR	653861	Identifier	currentLine		653842	0					
ANR	653862	Identifier	length		653842	1					
ANR	653863	ArgumentList			653842	1					
ANR	653864	CompoundStatement		6:1:94:94	653842	1					
ANR	653865	ExpressionStatement	currentChar = currentLine [ charNum ]	5535:2:161207:161241	653842	0	True				
ANR	653866	AssignmentExpression	currentChar = currentLine [ charNum ]		653842	0		=			
ANR	653867	Identifier	currentChar		653842	0					
ANR	653868	ArrayIndexing	currentLine [ charNum ]		653842	1					
ANR	653869	Identifier	currentLine		653842	0					
ANR	653870	Identifier	charNum		653842	1					
ANR	653871	IfStatement	"if ( isSequenceReached ( ""*/"" ) )"		653842	1					
ANR	653872	Condition	"isSequenceReached ( ""*/"" )"	5536:6:161249:161271	653842	0	True				
ANR	653873	CallExpression	"isSequenceReached ( ""*/"" )"		653842	0					
ANR	653874	Callee	isSequenceReached		653842	0					
ANR	653875	Identifier	isSequenceReached		653842	0					
ANR	653876	ArgumentList	"""*/"""		653842	1					
ANR	653877	Argument	"""*/"""		653842	0					
ANR	653878	PrimaryExpression	"""*/"""		653842	0					
ANR	653879	CompoundStatement		9:2:167:167	653842	1					
ANR	653880	ExpressionStatement	formatCommentCloser ( )	5538:3:161281:161302	653842	0	True				
ANR	653881	CallExpression	formatCommentCloser ( )		653842	0					
ANR	653882	Callee	formatCommentCloser		653842	0					
ANR	653883	Identifier	formatCommentCloser		653842	0					
ANR	653884	ArgumentList			653842	1					
ANR	653885	BreakStatement	break ;	5539:3:161307:161312	653842	1	True				
ANR	653886	IfStatement	if ( currentChar == '\\t' && shouldConvertTabs )		653842	2					
ANR	653887	Condition	currentChar == '\\t' && shouldConvertTabs	5541:6:161324:161363	653842	0	True				
ANR	653888	AndExpression	currentChar == '\\t' && shouldConvertTabs		653842	0		&&			
ANR	653889	EqualityExpression	currentChar == '\\t'		653842	0		==			
ANR	653890	Identifier	currentChar		653842	0					
ANR	653891	PrimaryExpression	'\\t'		653842	1					
ANR	653892	Identifier	shouldConvertTabs		653842	1					
ANR	653893	ExpressionStatement	convertTabToSpaces ( )	5542:3:161369:161389	653842	1	True				
ANR	653894	CallExpression	convertTabToSpaces ( )		653842	0					
ANR	653895	Callee	convertTabToSpaces		653842	0					
ANR	653896	Identifier	convertTabToSpaces		653842	0					
ANR	653897	ArgumentList			653842	1					
ANR	653898	ExpressionStatement	appendCurrentChar ( )	5543:2:161393:161412	653842	3	True				
ANR	653899	CallExpression	appendCurrentChar ( )		653842	0					
ANR	653900	Callee	appendCurrentChar		653842	0					
ANR	653901	Identifier	appendCurrentChar		653842	0					
ANR	653902	ArgumentList			653842	1					
ANR	653903	ExpressionStatement	++ charNum	5544:2:161416:161425	653842	4	True				
ANR	653904	UnaryExpression	++ charNum		653842	0					
ANR	653905	IncDec	++		653842	0					
ANR	653906	Identifier	charNum		653842	1					
ANR	653907	IfStatement	if ( shouldStripCommentPrefix )		653842	2					
ANR	653908	Condition	shouldStripCommentPrefix	5546:5:161435:161458	653842	0	True				
ANR	653909	Identifier	shouldStripCommentPrefix		653842	0					
ANR	653910	ExpressionStatement	stripCommentPrefix ( )	5547:2:161463:161483	653842	1	True				
ANR	653911	CallExpression	stripCommentPrefix ( )		653842	0					
ANR	653912	Callee	stripCommentPrefix		653842	0					
ANR	653913	Identifier	stripCommentPrefix		653842	0					
ANR	653914	ArgumentList			653842	1					
ANR	653915	ReturnType	void		653842	1					
ANR	653916	Identifier	ASFormatter :: formatCommentBody		653842	2					
ANR	653917	ParameterList			653842	3					
ANR	653918	CFGEntryNode	ENTRY		653842		True				
ANR	653919	CFGExitNode	EXIT		653842		True				
ANR	653920	Symbol	currentChar		653842						
ANR	653921	Symbol	* currentLine		653842						
ANR	653922	Symbol	currentLine . length		653842						
ANR	653923	Symbol	* charNum		653842						
ANR	653924	Symbol	isSequenceReached		653842						
ANR	653925	Symbol	shouldConvertTabs		653842						
ANR	653926	Symbol	shouldStripCommentPrefix		653842						
ANR	653927	Symbol	charNum		653842						
ANR	653928	Symbol	isInComment		653842						
ANR	653929	Symbol	currentLine		653842						
ANR	653930	Function	ASFormatter :: formatCommentOpener	5555:0:161710:164600							
ANR	653931	FunctionDef	ASFormatter :: formatCommentOpener ()		653930	0					
ANR	653932	CompoundStatement		5556:0:161750:164600	653930	0					
ANR	653933	ExpressionStatement	"assert ( isSequenceReached ( ""/*"" ) )"	5557:1:161753:161784	653930	0	True				
ANR	653934	CallExpression	"assert ( isSequenceReached ( ""/*"" ) )"		653930	0					
ANR	653935	Callee	assert		653930	0					
ANR	653936	Identifier	assert		653930	0					
ANR	653937	ArgumentList	"isSequenceReached ( ""/*"" )"		653930	1					
ANR	653938	Argument	"isSequenceReached ( ""/*"" )"		653930	0					
ANR	653939	CallExpression	"isSequenceReached ( ""/*"" )"		653930	0					
ANR	653940	Callee	isSequenceReached		653930	0					
ANR	653941	Identifier	isSequenceReached		653930	0					
ANR	653942	ArgumentList	"""/*"""		653930	1					
ANR	653943	Argument	"""/*"""		653930	0					
ANR	653944	PrimaryExpression	"""/*"""		653930	0					
ANR	653945	ExpressionStatement	isInComment = isInCommentStartLine = true	5559:1:161788:161829	653930	1	True				
ANR	653946	AssignmentExpression	isInComment = isInCommentStartLine = true		653930	0		=			
ANR	653947	Identifier	isInComment		653930	0					
ANR	653948	AssignmentExpression	isInCommentStartLine = true		653930	1		=			
ANR	653949	Identifier	isInCommentStartLine		653930	0					
ANR	653950	Identifier	true		653930	1					
ANR	653951	ExpressionStatement	isImmediatelyPostLineComment = false	5560:1:161832:161868	653930	2	True				
ANR	653952	AssignmentExpression	isImmediatelyPostLineComment = false		653930	0		=			
ANR	653953	Identifier	isImmediatelyPostLineComment		653930	0					
ANR	653954	Identifier	false		653930	1					
ANR	653955	IfStatement	if ( previousNonWSChar == '}' )		653930	3					
ANR	653956	Condition	previousNonWSChar == '}'	5561:5:161875:161898	653930	0	True				
ANR	653957	EqualityExpression	previousNonWSChar == '}'		653930	0		==			
ANR	653958	Identifier	previousNonWSChar		653930	0					
ANR	653959	PrimaryExpression	'}'		653930	1					
ANR	653960	ExpressionStatement	resetEndOfStatement ( )	5562:2:161903:161924	653930	1	True				
ANR	653961	CallExpression	resetEndOfStatement ( )		653930	0					
ANR	653962	Callee	resetEndOfStatement		653930	0					
ANR	653963	Identifier	resetEndOfStatement		653930	0					
ANR	653964	ArgumentList			653930	1					
ANR	653965	IdentifierDeclStatement	const string * followingHeader = nullptr ;	5567:1:162121:162160	653930	4	True				
ANR	653966	IdentifierDecl	* followingHeader = nullptr		653930	0					
ANR	653967	IdentifierDeclType	const string *		653930	0					
ANR	653968	Identifier	followingHeader		653930	1					
ANR	653969	AssignmentExpression	* followingHeader = nullptr		653930	2		=			
ANR	653970	Identifier	nullptr		653930	0					
ANR	653971	Identifier	nullptr		653930	1					
ANR	653972	IfStatement	"if ( ( doesLineStartComment && ! isImmediatelyPostCommentOnly && isBraceType ( braceTypeStack -> back ( ) , COMMAND_TYPE ) ) && ( shouldBreakElseIfs || isInSwitchStatement ( ) || ( shouldBreakBlocks && ! isImmediatelyPostEmptyLine && previousCommandChar != '{' ) ) )"		653930	5					
ANR	653973	Condition	"( doesLineStartComment && ! isImmediatelyPostCommentOnly && isBraceType ( braceTypeStack -> back ( ) , COMMAND_TYPE ) ) && ( shouldBreakElseIfs || isInSwitchStatement ( ) || ( shouldBreakBlocks && ! isImmediatelyPostEmptyLine && previousCommandChar != '{' ) )"	5568:5:162167:162494	653930	0	True				
ANR	653974	AndExpression	"( doesLineStartComment && ! isImmediatelyPostCommentOnly && isBraceType ( braceTypeStack -> back ( ) , COMMAND_TYPE ) ) && ( shouldBreakElseIfs || isInSwitchStatement ( ) || ( shouldBreakBlocks && ! isImmediatelyPostEmptyLine && previousCommandChar != '{' ) )"		653930	0		&&			
ANR	653975	AndExpression	"doesLineStartComment && ! isImmediatelyPostCommentOnly && isBraceType ( braceTypeStack -> back ( ) , COMMAND_TYPE )"		653930	0		&&			
ANR	653976	Identifier	doesLineStartComment		653930	0					
ANR	653977	AndExpression	"! isImmediatelyPostCommentOnly && isBraceType ( braceTypeStack -> back ( ) , COMMAND_TYPE )"		653930	1		&&			
ANR	653978	UnaryOperationExpression	! isImmediatelyPostCommentOnly		653930	0					
ANR	653979	UnaryOperator	!		653930	0					
ANR	653980	Identifier	isImmediatelyPostCommentOnly		653930	1					
ANR	653981	CallExpression	"isBraceType ( braceTypeStack -> back ( ) , COMMAND_TYPE )"		653930	1					
ANR	653982	Callee	isBraceType		653930	0					
ANR	653983	Identifier	isBraceType		653930	0					
ANR	653984	ArgumentList	braceTypeStack -> back ( )		653930	1					
ANR	653985	Argument	braceTypeStack -> back ( )		653930	0					
ANR	653986	CallExpression	braceTypeStack -> back ( )		653930	0					
ANR	653987	Callee	braceTypeStack -> back		653930	0					
ANR	653988	PtrMemberAccess	braceTypeStack -> back		653930	0					
ANR	653989	Identifier	braceTypeStack		653930	0					
ANR	653990	Identifier	back		653930	1					
ANR	653991	ArgumentList			653930	1					
ANR	653992	Argument	COMMAND_TYPE		653930	1					
ANR	653993	Identifier	COMMAND_TYPE		653930	0					
ANR	653994	OrExpression	shouldBreakElseIfs || isInSwitchStatement ( ) || ( shouldBreakBlocks && ! isImmediatelyPostEmptyLine && previousCommandChar != '{' )		653930	1		||			
ANR	653995	Identifier	shouldBreakElseIfs		653930	0					
ANR	653996	OrExpression	isInSwitchStatement ( ) || ( shouldBreakBlocks && ! isImmediatelyPostEmptyLine && previousCommandChar != '{' )		653930	1		||			
ANR	653997	CallExpression	isInSwitchStatement ( )		653930	0					
ANR	653998	Callee	isInSwitchStatement		653930	0					
ANR	653999	Identifier	isInSwitchStatement		653930	0					
ANR	654000	ArgumentList			653930	1					
ANR	654001	AndExpression	shouldBreakBlocks && ! isImmediatelyPostEmptyLine && previousCommandChar != '{'		653930	1		&&			
ANR	654002	Identifier	shouldBreakBlocks		653930	0					
ANR	654003	AndExpression	! isImmediatelyPostEmptyLine && previousCommandChar != '{'		653930	1		&&			
ANR	654004	UnaryOperationExpression	! isImmediatelyPostEmptyLine		653930	0					
ANR	654005	UnaryOperator	!		653930	0					
ANR	654006	Identifier	isImmediatelyPostEmptyLine		653930	1					
ANR	654007	EqualityExpression	previousCommandChar != '{'		653930	1		!=			
ANR	654008	Identifier	previousCommandChar		653930	0					
ANR	654009	PrimaryExpression	'{'		653930	1					
ANR	654010	ExpressionStatement	followingHeader = checkForHeaderFollowingComment ( currentLine . substr ( charNum ) )	5576:2:162499:162576	653930	1	True				
ANR	654011	AssignmentExpression	followingHeader = checkForHeaderFollowingComment ( currentLine . substr ( charNum ) )		653930	0		=			
ANR	654012	Identifier	followingHeader		653930	0					
ANR	654013	CallExpression	checkForHeaderFollowingComment ( currentLine . substr ( charNum ) )		653930	1					
ANR	654014	Callee	checkForHeaderFollowingComment		653930	0					
ANR	654015	Identifier	checkForHeaderFollowingComment		653930	0					
ANR	654016	ArgumentList	currentLine . substr ( charNum )		653930	1					
ANR	654017	Argument	currentLine . substr ( charNum )		653930	0					
ANR	654018	CallExpression	currentLine . substr ( charNum )		653930	0					
ANR	654019	Callee	currentLine . substr		653930	0					
ANR	654020	MemberAccess	currentLine . substr		653930	0					
ANR	654021	Identifier	currentLine		653930	0					
ANR	654022	Identifier	substr		653930	1					
ANR	654023	ArgumentList	charNum		653930	1					
ANR	654024	Argument	charNum		653930	0					
ANR	654025	Identifier	charNum		653930	0					
ANR	654026	IfStatement	if ( spacePadNum != 0 && ! isInLineBreak )		653930	6					
ANR	654027	Condition	spacePadNum != 0 && ! isInLineBreak	5578:5:162584:162617	653930	0	True				
ANR	654028	AndExpression	spacePadNum != 0 && ! isInLineBreak		653930	0		&&			
ANR	654029	EqualityExpression	spacePadNum != 0		653930	0		!=			
ANR	654030	Identifier	spacePadNum		653930	0					
ANR	654031	PrimaryExpression	0		653930	1					
ANR	654032	UnaryOperationExpression	! isInLineBreak		653930	1					
ANR	654033	UnaryOperator	!		653930	0					
ANR	654034	Identifier	isInLineBreak		653930	1					
ANR	654035	ExpressionStatement	adjustComments ( )	5579:2:162622:162638	653930	1	True				
ANR	654036	CallExpression	adjustComments ( )		653930	0					
ANR	654037	Callee	adjustComments		653930	0					
ANR	654038	Identifier	adjustComments		653930	0					
ANR	654039	ArgumentList			653930	1					
ANR	654040	ExpressionStatement	formattedLineCommentNum = formattedLine . length ( )	5580:1:162641:162689	653930	7	True				
ANR	654041	AssignmentExpression	formattedLineCommentNum = formattedLine . length ( )		653930	0		=			
ANR	654042	Identifier	formattedLineCommentNum		653930	0					
ANR	654043	CallExpression	formattedLine . length ( )		653930	1					
ANR	654044	Callee	formattedLine . length		653930	0					
ANR	654045	MemberAccess	formattedLine . length		653930	0					
ANR	654046	Identifier	formattedLine		653930	0					
ANR	654047	Identifier	length		653930	1					
ANR	654048	ArgumentList			653930	1					
ANR	654049	IfStatement	if ( previousCommandChar == '{' && ! isImmediatelyPostComment && ! isImmediatelyPostLineComment )		653930	8					
ANR	654050	Condition	previousCommandChar == '{' && ! isImmediatelyPostComment && ! isImmediatelyPostLineComment	5583:5:162736:162841	653930	0	True				
ANR	654051	AndExpression	previousCommandChar == '{' && ! isImmediatelyPostComment && ! isImmediatelyPostLineComment		653930	0		&&			
ANR	654052	EqualityExpression	previousCommandChar == '{'		653930	0		==			
ANR	654053	Identifier	previousCommandChar		653930	0					
ANR	654054	PrimaryExpression	'{'		653930	1					
ANR	654055	AndExpression	! isImmediatelyPostComment && ! isImmediatelyPostLineComment		653930	1		&&			
ANR	654056	UnaryOperationExpression	! isImmediatelyPostComment		653930	0					
ANR	654057	UnaryOperator	!		653930	0					
ANR	654058	Identifier	isImmediatelyPostComment		653930	1					
ANR	654059	UnaryOperationExpression	! isImmediatelyPostLineComment		653930	1					
ANR	654060	UnaryOperator	!		653930	0					
ANR	654061	Identifier	isImmediatelyPostLineComment		653930	1					
ANR	654062	CompoundStatement		31:1:1094:1094	653930	1					
ANR	654063	IfStatement	"if ( isBraceType ( braceTypeStack -> back ( ) , NAMESPACE_TYPE ) )"		653930	0					
ANR	654064	Condition	"isBraceType ( braceTypeStack -> back ( ) , NAMESPACE_TYPE )"	5587:6:162853:162903	653930	0	True				
ANR	654065	CallExpression	"isBraceType ( braceTypeStack -> back ( ) , NAMESPACE_TYPE )"		653930	0					
ANR	654066	Callee	isBraceType		653930	0					
ANR	654067	Identifier	isBraceType		653930	0					
ANR	654068	ArgumentList	braceTypeStack -> back ( )		653930	1					
ANR	654069	Argument	braceTypeStack -> back ( )		653930	0					
ANR	654070	CallExpression	braceTypeStack -> back ( )		653930	0					
ANR	654071	Callee	braceTypeStack -> back		653930	0					
ANR	654072	PtrMemberAccess	braceTypeStack -> back		653930	0					
ANR	654073	Identifier	braceTypeStack		653930	0					
ANR	654074	Identifier	back		653930	1					
ANR	654075	ArgumentList			653930	1					
ANR	654076	Argument	NAMESPACE_TYPE		653930	1					
ANR	654077	Identifier	NAMESPACE_TYPE		653930	0					
ANR	654078	CompoundStatement		33:2:1157:1157	653930	1					
ANR	654079	ExpressionStatement	isInLineBreak = true	5590:3:162954:162974	653930	0	True				
ANR	654080	AssignmentExpression	isInLineBreak = true		653930	0		=			
ANR	654081	Identifier	isInLineBreak		653930	0					
ANR	654082	Identifier	true		653930	1					
ANR	654083	ElseStatement	else		653930	0					
ANR	654084	IfStatement	if ( braceFormatMode == NONE_MODE )		653930	0					
ANR	654085	Condition	braceFormatMode == NONE_MODE	5592:11:162991:163018	653930	0	True				
ANR	654086	EqualityExpression	braceFormatMode == NONE_MODE		653930	0		==			
ANR	654087	Identifier	braceFormatMode		653930	0					
ANR	654088	Identifier	NONE_MODE		653930	1					
ANR	654089	CompoundStatement		38:2:1272:1272	653930	1					
ANR	654090	IfStatement	if ( currentLineBeginsWithBrace )		653930	0					
ANR	654091	Condition	currentLineBeginsWithBrace	5595:7:163077:163102	653930	0	True				
ANR	654092	Identifier	currentLineBeginsWithBrace		653930	0					
ANR	654093	ExpressionStatement	formatRunIn ( )	5596:4:163109:163122	653930	1	True				
ANR	654094	CallExpression	formatRunIn ( )		653930	0					
ANR	654095	Callee	formatRunIn		653930	0					
ANR	654096	Identifier	formatRunIn		653930	0					
ANR	654097	ArgumentList			653930	1					
ANR	654098	ElseStatement	else		653930	0					
ANR	654099	IfStatement	if ( braceFormatMode == ATTACH_MODE )		653930	0					
ANR	654100	Condition	braceFormatMode == ATTACH_MODE	5598:11:163139:163168	653930	0	True				
ANR	654101	EqualityExpression	braceFormatMode == ATTACH_MODE		653930	0		==			
ANR	654102	Identifier	braceFormatMode		653930	0					
ANR	654103	Identifier	ATTACH_MODE		653930	1					
ANR	654104	CompoundStatement		44:2:1422:1422	653930	1					
ANR	654105	IfStatement	"if ( formattedLine . length ( ) > 0 && formattedLine [ 0 ] == '{' && ! isBraceType ( braceTypeStack -> back ( ) , SINGLE_LINE_TYPE ) )"		653930	0					
ANR	654106	Condition	"formattedLine . length ( ) > 0 && formattedLine [ 0 ] == '{' && ! isBraceType ( braceTypeStack -> back ( ) , SINGLE_LINE_TYPE )"	5601:7:163219:163340	653930	0	True				
ANR	654107	AndExpression	"formattedLine . length ( ) > 0 && formattedLine [ 0 ] == '{' && ! isBraceType ( braceTypeStack -> back ( ) , SINGLE_LINE_TYPE )"		653930	0		&&			
ANR	654108	RelationalExpression	formattedLine . length ( ) > 0		653930	0		>			
ANR	654109	CallExpression	formattedLine . length ( )		653930	0					
ANR	654110	Callee	formattedLine . length		653930	0					
ANR	654111	MemberAccess	formattedLine . length		653930	0					
ANR	654112	Identifier	formattedLine		653930	0					
ANR	654113	Identifier	length		653930	1					
ANR	654114	ArgumentList			653930	1					
ANR	654115	PrimaryExpression	0		653930	1					
ANR	654116	AndExpression	"formattedLine [ 0 ] == '{' && ! isBraceType ( braceTypeStack -> back ( ) , SINGLE_LINE_TYPE )"		653930	1		&&			
ANR	654117	EqualityExpression	formattedLine [ 0 ] == '{'		653930	0		==			
ANR	654118	ArrayIndexing	formattedLine [ 0 ]		653930	0					
ANR	654119	Identifier	formattedLine		653930	0					
ANR	654120	PrimaryExpression	0		653930	1					
ANR	654121	PrimaryExpression	'{'		653930	1					
ANR	654122	UnaryOperationExpression	"! isBraceType ( braceTypeStack -> back ( ) , SINGLE_LINE_TYPE )"		653930	1					
ANR	654123	UnaryOperator	!		653930	0					
ANR	654124	CallExpression	"isBraceType ( braceTypeStack -> back ( ) , SINGLE_LINE_TYPE )"		653930	1					
ANR	654125	Callee	isBraceType		653930	0					
ANR	654126	Identifier	isBraceType		653930	0					
ANR	654127	ArgumentList	braceTypeStack -> back ( )		653930	1					
ANR	654128	Argument	braceTypeStack -> back ( )		653930	0					
ANR	654129	CallExpression	braceTypeStack -> back ( )		653930	0					
ANR	654130	Callee	braceTypeStack -> back		653930	0					
ANR	654131	PtrMemberAccess	braceTypeStack -> back		653930	0					
ANR	654132	Identifier	braceTypeStack		653930	0					
ANR	654133	Identifier	back		653930	1					
ANR	654134	ArgumentList			653930	1					
ANR	654135	Argument	SINGLE_LINE_TYPE		653930	1					
ANR	654136	Identifier	SINGLE_LINE_TYPE		653930	0					
ANR	654137	ExpressionStatement	isInLineBreak = true	5603:4:163347:163367	653930	1	True				
ANR	654138	AssignmentExpression	isInLineBreak = true		653930	0		=			
ANR	654139	Identifier	isInLineBreak		653930	0					
ANR	654140	Identifier	true		653930	1					
ANR	654141	ElseStatement	else		653930	0					
ANR	654142	IfStatement	if ( braceFormatMode == RUN_IN_MODE )		653930	0					
ANR	654143	Condition	braceFormatMode == RUN_IN_MODE	5605:11:163384:163413	653930	0	True				
ANR	654144	EqualityExpression	braceFormatMode == RUN_IN_MODE		653930	0		==			
ANR	654145	Identifier	braceFormatMode		653930	0					
ANR	654146	Identifier	RUN_IN_MODE		653930	1					
ANR	654147	CompoundStatement		51:2:1667:1667	653930	1					
ANR	654148	IfStatement	if ( formattedLine . length ( ) > 0 && formattedLine [ 0 ] == '{' )		653930	0					
ANR	654149	Condition	formattedLine . length ( ) > 0 && formattedLine [ 0 ] == '{'	5608:7:163472:163524	653930	0	True				
ANR	654150	AndExpression	formattedLine . length ( ) > 0 && formattedLine [ 0 ] == '{'		653930	0		&&			
ANR	654151	RelationalExpression	formattedLine . length ( ) > 0		653930	0		>			
ANR	654152	CallExpression	formattedLine . length ( )		653930	0					
ANR	654153	Callee	formattedLine . length		653930	0					
ANR	654154	MemberAccess	formattedLine . length		653930	0					
ANR	654155	Identifier	formattedLine		653930	0					
ANR	654156	Identifier	length		653930	1					
ANR	654157	ArgumentList			653930	1					
ANR	654158	PrimaryExpression	0		653930	1					
ANR	654159	EqualityExpression	formattedLine [ 0 ] == '{'		653930	1		==			
ANR	654160	ArrayIndexing	formattedLine [ 0 ]		653930	0					
ANR	654161	Identifier	formattedLine		653930	0					
ANR	654162	PrimaryExpression	0		653930	1					
ANR	654163	PrimaryExpression	'{'		653930	1					
ANR	654164	ExpressionStatement	formatRunIn ( )	5609:4:163531:163544	653930	1	True				
ANR	654165	CallExpression	formatRunIn ( )		653930	0					
ANR	654166	Callee	formatRunIn		653930	0					
ANR	654167	Identifier	formatRunIn		653930	0					
ANR	654168	ArgumentList			653930	1					
ANR	654169	ElseStatement	else		653930	0					
ANR	654170	IfStatement	if ( ! doesLineStartComment )		653930	0					
ANR	654171	Condition	! doesLineStartComment	5612:10:163563:163583	653930	0	True				
ANR	654172	UnaryOperationExpression	! doesLineStartComment		653930	0					
ANR	654173	UnaryOperator	!		653930	0					
ANR	654174	Identifier	doesLineStartComment		653930	1					
ANR	654175	ExpressionStatement	noTrimCommentContinuation = true	5613:2:163588:163620	653930	1	True				
ANR	654176	AssignmentExpression	noTrimCommentContinuation = true		653930	0		=			
ANR	654177	Identifier	noTrimCommentContinuation		653930	0					
ANR	654178	Identifier	true		653930	1					
ANR	654179	IfStatement	if ( shouldBreakElseIfs && followingHeader == & AS_ELSE )		653930	9					
ANR	654180	Condition	shouldBreakElseIfs && followingHeader == & AS_ELSE	5616:5:163684:163732	653930	0	True				
ANR	654181	AndExpression	shouldBreakElseIfs && followingHeader == & AS_ELSE		653930	0		&&			
ANR	654182	Identifier	shouldBreakElseIfs		653930	0					
ANR	654183	EqualityExpression	followingHeader == & AS_ELSE		653930	1		==			
ANR	654184	Identifier	followingHeader		653930	0					
ANR	654185	UnaryOperationExpression	& AS_ELSE		653930	1					
ANR	654186	UnaryOperator	&		653930	0					
ANR	654187	Identifier	AS_ELSE		653930	1					
ANR	654188	ExpressionStatement	elseHeaderFollowsComments = true	5617:2:163737:163769	653930	1	True				
ANR	654189	AssignmentExpression	elseHeaderFollowsComments = true		653930	0		=			
ANR	654190	Identifier	elseHeaderFollowsComments		653930	0					
ANR	654191	Identifier	true		653930	1					
ANR	654192	IfStatement	if ( followingHeader == & AS_CASE || followingHeader == & AS_DEFAULT )		653930	10					
ANR	654193	Condition	followingHeader == & AS_CASE || followingHeader == & AS_DEFAULT	5618:5:163776:163836	653930	0	True				
ANR	654194	OrExpression	followingHeader == & AS_CASE || followingHeader == & AS_DEFAULT		653930	0		||			
ANR	654195	EqualityExpression	followingHeader == & AS_CASE		653930	0		==			
ANR	654196	Identifier	followingHeader		653930	0					
ANR	654197	UnaryOperationExpression	& AS_CASE		653930	1					
ANR	654198	UnaryOperator	&		653930	0					
ANR	654199	Identifier	AS_CASE		653930	1					
ANR	654200	EqualityExpression	followingHeader == & AS_DEFAULT		653930	1		==			
ANR	654201	Identifier	followingHeader		653930	0					
ANR	654202	UnaryOperationExpression	& AS_DEFAULT		653930	1					
ANR	654203	UnaryOperator	&		653930	0					
ANR	654204	Identifier	AS_DEFAULT		653930	1					
ANR	654205	ExpressionStatement	caseHeaderFollowsComments = true	5619:2:163841:163873	653930	1	True				
ANR	654206	AssignmentExpression	caseHeaderFollowsComments = true		653930	0		=			
ANR	654207	Identifier	caseHeaderFollowsComments		653930	0					
ANR	654208	Identifier	true		653930	1					
ANR	654209	ExpressionStatement	appendSequence ( AS_OPEN_COMMENT )	5622:1:163925:163956	653930	11	True				
ANR	654210	CallExpression	appendSequence ( AS_OPEN_COMMENT )		653930	0					
ANR	654211	Callee	appendSequence		653930	0					
ANR	654212	Identifier	appendSequence		653930	0					
ANR	654213	ArgumentList	AS_OPEN_COMMENT		653930	1					
ANR	654214	Argument	AS_OPEN_COMMENT		653930	0					
ANR	654215	Identifier	AS_OPEN_COMMENT		653930	0					
ANR	654216	ExpressionStatement	goForward ( 1 )	5623:1:163959:163971	653930	12	True				
ANR	654217	CallExpression	goForward ( 1 )		653930	0					
ANR	654218	Callee	goForward		653930	0					
ANR	654219	Identifier	goForward		653930	0					
ANR	654220	ArgumentList	1		653930	1					
ANR	654221	Argument	1		653930	0					
ANR	654222	PrimaryExpression	1		653930	0					
ANR	654223	IfStatement	if ( shouldBreakBlocks && followingHeader != nullptr && ! isImmediatelyPostEmptyLine && previousCommandChar != '{' )		653930	13					
ANR	654224	Condition	shouldBreakBlocks && followingHeader != nullptr && ! isImmediatelyPostEmptyLine && previousCommandChar != '{'	5629:5:164151:164285	653930	0	True				
ANR	654225	AndExpression	shouldBreakBlocks && followingHeader != nullptr && ! isImmediatelyPostEmptyLine && previousCommandChar != '{'		653930	0		&&			
ANR	654226	Identifier	shouldBreakBlocks		653930	0					
ANR	654227	AndExpression	followingHeader != nullptr && ! isImmediatelyPostEmptyLine && previousCommandChar != '{'		653930	1		&&			
ANR	654228	EqualityExpression	followingHeader != nullptr		653930	0		!=			
ANR	654229	Identifier	followingHeader		653930	0					
ANR	654230	Identifier	nullptr		653930	1					
ANR	654231	AndExpression	! isImmediatelyPostEmptyLine && previousCommandChar != '{'		653930	1		&&			
ANR	654232	UnaryOperationExpression	! isImmediatelyPostEmptyLine		653930	0					
ANR	654233	UnaryOperator	!		653930	0					
ANR	654234	Identifier	isImmediatelyPostEmptyLine		653930	1					
ANR	654235	EqualityExpression	previousCommandChar != '{'		653930	1		!=			
ANR	654236	Identifier	previousCommandChar		653930	0					
ANR	654237	PrimaryExpression	'{'		653930	1					
ANR	654238	CompoundStatement		78:1:2538:2538	653930	1					
ANR	654239	IfStatement	if ( isClosingHeader ( followingHeader ) )		653930	0					
ANR	654240	Condition	isClosingHeader ( followingHeader )	5634:6:164297:164328	653930	0	True				
ANR	654241	CallExpression	isClosingHeader ( followingHeader )		653930	0					
ANR	654242	Callee	isClosingHeader		653930	0					
ANR	654243	Identifier	isClosingHeader		653930	0					
ANR	654244	ArgumentList	followingHeader		653930	1					
ANR	654245	Argument	followingHeader		653930	0					
ANR	654246	Identifier	followingHeader		653930	0					
ANR	654247	CompoundStatement		80:2:2582:2582	653930	1					
ANR	654248	IfStatement	if ( ! shouldBreakClosingHeaderBlocks )		653930	0					
ANR	654249	Condition	! shouldBreakClosingHeaderBlocks	5636:7:164342:164372	653930	0	True				
ANR	654250	UnaryOperationExpression	! shouldBreakClosingHeaderBlocks		653930	0					
ANR	654251	UnaryOperator	!		653930	0					
ANR	654252	Identifier	shouldBreakClosingHeaderBlocks		653930	1					
ANR	654253	ExpressionStatement	isPrependPostBlockEmptyLineRequested = false	5637:4:164379:164423	653930	1	True				
ANR	654254	AssignmentExpression	isPrependPostBlockEmptyLineRequested = false		653930	0		=			
ANR	654255	Identifier	isPrependPostBlockEmptyLineRequested		653930	0					
ANR	654256	Identifier	false		653930	1					
ANR	654257	ElseStatement	else		653930	0					
ANR	654258	ExpressionStatement	isPrependPostBlockEmptyLineRequested = true	5641:3:164491:164534	653930	0	True				
ANR	654259	AssignmentExpression	isPrependPostBlockEmptyLineRequested = true		653930	0		=			
ANR	654260	Identifier	isPrependPostBlockEmptyLineRequested		653930	0					
ANR	654261	Identifier	true		653930	1					
ANR	654262	IfStatement	if ( previousCommandChar == '}' )		653930	14					
ANR	654263	Condition	previousCommandChar == '}'	5644:5:164545:164570	653930	0	True				
ANR	654264	EqualityExpression	previousCommandChar == '}'		653930	0		==			
ANR	654265	Identifier	previousCommandChar		653930	0					
ANR	654266	PrimaryExpression	'}'		653930	1					
ANR	654267	ExpressionStatement	currentHeader = nullptr	5645:2:164575:164598	653930	1	True				
ANR	654268	AssignmentExpression	currentHeader = nullptr		653930	0		=			
ANR	654269	Identifier	currentHeader		653930	0					
ANR	654270	Identifier	nullptr		653930	1					
ANR	654271	ReturnType	void		653930	1					
ANR	654272	Identifier	ASFormatter :: formatCommentOpener		653930	2					
ANR	654273	ParameterList			653930	3					
ANR	654274	CFGEntryNode	ENTRY		653930		True				
ANR	654275	CFGExitNode	EXIT		653930		True				
ANR	654276	Symbol	* formattedLine		653930						
ANR	654277	Symbol	RUN_IN_MODE		653930						
ANR	654278	Symbol	shouldBreakElseIfs		653930						
ANR	654279	Symbol	isClosingHeader		653930						
ANR	654280	Symbol	shouldBreakBlocks		653930						
ANR	654281	Symbol	isPrependPostBlockEmptyLineRequested		653930						
ANR	654282	Symbol	noTrimCommentContinuation		653930						
ANR	654283	Symbol	NAMESPACE_TYPE		653930						
ANR	654284	Symbol	ATTACH_MODE		653930						
ANR	654285	Symbol	AS_OPEN_COMMENT		653930						
ANR	654286	Symbol	isBraceType		653930						
ANR	654287	Symbol	& AS_CASE		653930						
ANR	654288	Symbol	isInComment		653930						
ANR	654289	Symbol	formattedLineCommentNum		653930						
ANR	654290	Symbol	currentLineBeginsWithBrace		653930						
ANR	654291	Symbol	isImmediatelyPostCommentOnly		653930						
ANR	654292	Symbol	* braceTypeStack		653930						
ANR	654293	Symbol	isInLineBreak		653930						
ANR	654294	Symbol	spacePadNum		653930						
ANR	654295	Symbol	previousCommandChar		653930						
ANR	654296	Symbol	checkForHeaderFollowingComment		653930						
ANR	654297	Symbol	COMMAND_TYPE		653930						
ANR	654298	Symbol	true		653930						
ANR	654299	Symbol	isImmediatelyPostLineComment		653930						
ANR	654300	Symbol	braceFormatMode		653930						
ANR	654301	Symbol	nullptr		653930						
ANR	654302	Symbol	previousNonWSChar		653930						
ANR	654303	Symbol	braceTypeStack		653930						
ANR	654304	Symbol	caseHeaderFollowsComments		653930						
ANR	654305	Symbol	isImmediatelyPostEmptyLine		653930						
ANR	654306	Symbol	shouldBreakClosingHeaderBlocks		653930						
ANR	654307	Symbol	isImmediatelyPostComment		653930						
ANR	654308	Symbol	NONE_MODE		653930						
ANR	654309	Symbol	followingHeader		653930						
ANR	654310	Symbol	isSequenceReached		653930						
ANR	654311	Symbol	isInCommentStartLine		653930						
ANR	654312	Symbol	SINGLE_LINE_TYPE		653930						
ANR	654313	Symbol	currentLine . substr		653930						
ANR	654314	Symbol	charNum		653930						
ANR	654315	Symbol	isInSwitchStatement		653930						
ANR	654316	Symbol	currentLine		653930						
ANR	654317	Symbol	doesLineStartComment		653930						
ANR	654318	Symbol	false		653930						
ANR	654319	Symbol	& AS_ELSE		653930						
ANR	654320	Symbol	braceTypeStack -> back		653930						
ANR	654321	Symbol	formattedLine		653930						
ANR	654322	Symbol	elseHeaderFollowsComments		653930						
ANR	654323	Symbol	currentHeader		653930						
ANR	654324	Symbol	formattedLine . length		653930						
ANR	654325	Symbol	& AS_DEFAULT		653930						
ANR	654326	Function	ASFormatter :: formatCommentCloser	5652:0:164706:165340							
ANR	654327	FunctionDef	ASFormatter :: formatCommentCloser ()		654326	0					
ANR	654328	CompoundStatement		5653:0:164746:165340	654326	0					
ANR	654329	ExpressionStatement	"assert ( isSequenceReached ( ""*/"" ) )"	5654:1:164749:164780	654326	0	True				
ANR	654330	CallExpression	"assert ( isSequenceReached ( ""*/"" ) )"		654326	0					
ANR	654331	Callee	assert		654326	0					
ANR	654332	Identifier	assert		654326	0					
ANR	654333	ArgumentList	"isSequenceReached ( ""*/"" )"		654326	1					
ANR	654334	Argument	"isSequenceReached ( ""*/"" )"		654326	0					
ANR	654335	CallExpression	"isSequenceReached ( ""*/"" )"		654326	0					
ANR	654336	Callee	isSequenceReached		654326	0					
ANR	654337	Identifier	isSequenceReached		654326	0					
ANR	654338	ArgumentList	"""*/"""		654326	1					
ANR	654339	Argument	"""*/"""		654326	0					
ANR	654340	PrimaryExpression	"""*/"""		654326	0					
ANR	654341	ExpressionStatement	isInComment = false	5655:1:164783:164802	654326	1	True				
ANR	654342	AssignmentExpression	isInComment = false		654326	0		=			
ANR	654343	Identifier	isInComment		654326	0					
ANR	654344	Identifier	false		654326	1					
ANR	654345	ExpressionStatement	noTrimCommentContinuation = false	5656:1:164805:164838	654326	2	True				
ANR	654346	AssignmentExpression	noTrimCommentContinuation = false		654326	0		=			
ANR	654347	Identifier	noTrimCommentContinuation		654326	0					
ANR	654348	Identifier	false		654326	1					
ANR	654349	ExpressionStatement	isImmediatelyPostComment = true	5657:1:164841:164872	654326	3	True				
ANR	654350	AssignmentExpression	isImmediatelyPostComment = true		654326	0		=			
ANR	654351	Identifier	isImmediatelyPostComment		654326	0					
ANR	654352	Identifier	true		654326	1					
ANR	654353	ExpressionStatement	appendSequence ( AS_CLOSE_COMMENT )	5658:1:164875:164907	654326	4	True				
ANR	654354	CallExpression	appendSequence ( AS_CLOSE_COMMENT )		654326	0					
ANR	654355	Callee	appendSequence		654326	0					
ANR	654356	Identifier	appendSequence		654326	0					
ANR	654357	ArgumentList	AS_CLOSE_COMMENT		654326	1					
ANR	654358	Argument	AS_CLOSE_COMMENT		654326	0					
ANR	654359	Identifier	AS_CLOSE_COMMENT		654326	0					
ANR	654360	ExpressionStatement	goForward ( 1 )	5659:1:164910:164922	654326	5	True				
ANR	654361	CallExpression	goForward ( 1 )		654326	0					
ANR	654362	Callee	goForward		654326	0					
ANR	654363	Identifier	goForward		654326	0					
ANR	654364	ArgumentList	1		654326	1					
ANR	654365	Argument	1		654326	0					
ANR	654366	PrimaryExpression	1		654326	0					
ANR	654367	IfStatement	"if ( doesLineStartComment && ( currentLine . find_first_not_of ( "" \\t"" , charNum + 1 ) == string :: npos ) )"		654326	6					
ANR	654368	Condition	"doesLineStartComment && ( currentLine . find_first_not_of ( "" \\t"" , charNum + 1 ) == string :: npos )"	5660:5:164929:165028	654326	0	True				
ANR	654369	AndExpression	"doesLineStartComment && ( currentLine . find_first_not_of ( "" \\t"" , charNum + 1 ) == string :: npos )"		654326	0		&&			
ANR	654370	Identifier	doesLineStartComment		654326	0					
ANR	654371	EqualityExpression	"currentLine . find_first_not_of ( "" \\t"" , charNum + 1 ) == string :: npos"		654326	1		==			
ANR	654372	CallExpression	"currentLine . find_first_not_of ( "" \\t"" , charNum + 1 )"		654326	0					
ANR	654373	Callee	currentLine . find_first_not_of		654326	0					
ANR	654374	MemberAccess	currentLine . find_first_not_of		654326	0					
ANR	654375	Identifier	currentLine		654326	0					
ANR	654376	Identifier	find_first_not_of		654326	1					
ANR	654377	ArgumentList	""" \\t"""		654326	1					
ANR	654378	Argument	""" \\t"""		654326	0					
ANR	654379	PrimaryExpression	""" \\t"""		654326	0					
ANR	654380	Argument	charNum + 1		654326	1					
ANR	654381	AdditiveExpression	charNum + 1		654326	0		+			
ANR	654382	Identifier	charNum		654326	0					
ANR	654383	PrimaryExpression	1		654326	1					
ANR	654384	Identifier	string :: npos		654326	1					
ANR	654385	ExpressionStatement	lineEndsInCommentOnly = true	5662:2:165033:165061	654326	1	True				
ANR	654386	AssignmentExpression	lineEndsInCommentOnly = true		654326	0		=			
ANR	654387	Identifier	lineEndsInCommentOnly		654326	0					
ANR	654388	Identifier	true		654326	1					
ANR	654389	IfStatement	"if ( peekNextChar ( ) == '}' && previousCommandChar != ';' && ! isBraceType ( braceTypeStack -> back ( ) , ARRAY_TYPE ) && ! isInPreprocessor && isOkToBreakBlock ( braceTypeStack -> back ( ) ) )"		654326	7					
ANR	654390	Condition	"peekNextChar ( ) == '}' && previousCommandChar != ';' && ! isBraceType ( braceTypeStack -> back ( ) , ARRAY_TYPE ) && ! isInPreprocessor && isOkToBreakBlock ( braceTypeStack -> back ( ) )"	5663:5:165068:165271	654326	0	True				
ANR	654391	AndExpression	"peekNextChar ( ) == '}' && previousCommandChar != ';' && ! isBraceType ( braceTypeStack -> back ( ) , ARRAY_TYPE ) && ! isInPreprocessor && isOkToBreakBlock ( braceTypeStack -> back ( ) )"		654326	0		&&			
ANR	654392	EqualityExpression	peekNextChar ( ) == '}'		654326	0		==			
ANR	654393	CallExpression	peekNextChar ( )		654326	0					
ANR	654394	Callee	peekNextChar		654326	0					
ANR	654395	Identifier	peekNextChar		654326	0					
ANR	654396	ArgumentList			654326	1					
ANR	654397	PrimaryExpression	'}'		654326	1					
ANR	654398	AndExpression	"previousCommandChar != ';' && ! isBraceType ( braceTypeStack -> back ( ) , ARRAY_TYPE ) && ! isInPreprocessor && isOkToBreakBlock ( braceTypeStack -> back ( ) )"		654326	1		&&			
ANR	654399	EqualityExpression	previousCommandChar != ';'		654326	0		!=			
ANR	654400	Identifier	previousCommandChar		654326	0					
ANR	654401	PrimaryExpression	';'		654326	1					
ANR	654402	AndExpression	"! isBraceType ( braceTypeStack -> back ( ) , ARRAY_TYPE ) && ! isInPreprocessor && isOkToBreakBlock ( braceTypeStack -> back ( ) )"		654326	1		&&			
ANR	654403	UnaryOperationExpression	"! isBraceType ( braceTypeStack -> back ( ) , ARRAY_TYPE )"		654326	0					
ANR	654404	UnaryOperator	!		654326	0					
ANR	654405	CallExpression	"isBraceType ( braceTypeStack -> back ( ) , ARRAY_TYPE )"		654326	1					
ANR	654406	Callee	isBraceType		654326	0					
ANR	654407	Identifier	isBraceType		654326	0					
ANR	654408	ArgumentList	braceTypeStack -> back ( )		654326	1					
ANR	654409	Argument	braceTypeStack -> back ( )		654326	0					
ANR	654410	CallExpression	braceTypeStack -> back ( )		654326	0					
ANR	654411	Callee	braceTypeStack -> back		654326	0					
ANR	654412	PtrMemberAccess	braceTypeStack -> back		654326	0					
ANR	654413	Identifier	braceTypeStack		654326	0					
ANR	654414	Identifier	back		654326	1					
ANR	654415	ArgumentList			654326	1					
ANR	654416	Argument	ARRAY_TYPE		654326	1					
ANR	654417	Identifier	ARRAY_TYPE		654326	0					
ANR	654418	AndExpression	! isInPreprocessor && isOkToBreakBlock ( braceTypeStack -> back ( ) )		654326	1		&&			
ANR	654419	UnaryOperationExpression	! isInPreprocessor		654326	0					
ANR	654420	UnaryOperator	!		654326	0					
ANR	654421	Identifier	isInPreprocessor		654326	1					
ANR	654422	CallExpression	isOkToBreakBlock ( braceTypeStack -> back ( ) )		654326	1					
ANR	654423	Callee	isOkToBreakBlock		654326	0					
ANR	654424	Identifier	isOkToBreakBlock		654326	0					
ANR	654425	ArgumentList	braceTypeStack -> back ( )		654326	1					
ANR	654426	Argument	braceTypeStack -> back ( )		654326	0					
ANR	654427	CallExpression	braceTypeStack -> back ( )		654326	0					
ANR	654428	Callee	braceTypeStack -> back		654326	0					
ANR	654429	PtrMemberAccess	braceTypeStack -> back		654326	0					
ANR	654430	Identifier	braceTypeStack		654326	0					
ANR	654431	Identifier	back		654326	1					
ANR	654432	ArgumentList			654326	1					
ANR	654433	CompoundStatement		16:1:528:528	654326	1					
ANR	654434	ExpressionStatement	isInLineBreak = true	5669:2:165279:165299	654326	0	True				
ANR	654435	AssignmentExpression	isInLineBreak = true		654326	0		=			
ANR	654436	Identifier	isInLineBreak		654326	0					
ANR	654437	Identifier	true		654326	1					
ANR	654438	ExpressionStatement	shouldBreakLineAtNextChar = true	5670:2:165303:165335	654326	1	True				
ANR	654439	AssignmentExpression	shouldBreakLineAtNextChar = true		654326	0		=			
ANR	654440	Identifier	shouldBreakLineAtNextChar		654326	0					
ANR	654441	Identifier	true		654326	1					
ANR	654442	ReturnType	void		654326	1					
ANR	654443	Identifier	ASFormatter :: formatCommentCloser		654326	2					
ANR	654444	ParameterList			654326	3					
ANR	654445	CFGEntryNode	ENTRY		654326		True				
ANR	654446	CFGExitNode	EXIT		654326		True				
ANR	654447	Symbol	shouldBreakLineAtNextChar		654326						
ANR	654448	Symbol	braceTypeStack		654326						
ANR	654449	Symbol	peekNextChar		654326						
ANR	654450	Symbol	* braceTypeStack		654326						
ANR	654451	Symbol	doesLineStartComment		654326						
ANR	654452	Symbol	isInLineBreak		654326						
ANR	654453	Symbol	false		654326						
ANR	654454	Symbol	string :: npos		654326						
ANR	654455	Symbol	ARRAY_TYPE		654326						
ANR	654456	Symbol	previousCommandChar		654326						
ANR	654457	Symbol	currentLine . find_first_not_of		654326						
ANR	654458	Symbol	lineEndsInCommentOnly		654326						
ANR	654459	Symbol	braceTypeStack -> back		654326						
ANR	654460	Symbol	isImmediatelyPostComment		654326						
ANR	654461	Symbol	noTrimCommentContinuation		654326						
ANR	654462	Symbol	AS_CLOSE_COMMENT		654326						
ANR	654463	Symbol	isSequenceReached		654326						
ANR	654464	Symbol	true		654326						
ANR	654465	Symbol	isBraceType		654326						
ANR	654466	Symbol	isInPreprocessor		654326						
ANR	654467	Symbol	isOkToBreakBlock		654326						
ANR	654468	Symbol	charNum		654326						
ANR	654469	Symbol	isInComment		654326						
ANR	654470	Symbol	currentLine		654326						
ANR	654471	Function	ASFormatter :: formatLineCommentBody	5678:0:165464:166089							
ANR	654472	FunctionDef	ASFormatter :: formatLineCommentBody ()		654471	0					
ANR	654473	CompoundStatement		5679:0:165506:166089	654471	0					
ANR	654474	ExpressionStatement	assert ( isInLineComment )	5680:1:165509:165532	654471	0	True				
ANR	654475	CallExpression	assert ( isInLineComment )		654471	0					
ANR	654476	Callee	assert		654471	0					
ANR	654477	Identifier	assert		654471	0					
ANR	654478	ArgumentList	isInLineComment		654471	1					
ANR	654479	Argument	isInLineComment		654471	0					
ANR	654480	Identifier	isInLineComment		654471	0					
ANR	654481	WhileStatement	while ( charNum < ( int ) currentLine . length ( ) )		654471	1					
ANR	654482	Condition	charNum < ( int ) currentLine . length ( )	5683:8:165566:165601	654471	0	True				
ANR	654483	RelationalExpression	charNum < ( int ) currentLine . length ( )		654471	0		<			
ANR	654484	Identifier	charNum		654471	0					
ANR	654485	CastExpression	( int ) currentLine . length ( )		654471	1					
ANR	654486	CastTarget	int		654471	0					
ANR	654487	CallExpression	currentLine . length ( )		654471	1					
ANR	654488	Callee	currentLine . length		654471	0					
ANR	654489	MemberAccess	currentLine . length		654471	0					
ANR	654490	Identifier	currentLine		654471	0					
ANR	654491	Identifier	length		654471	1					
ANR	654492	ArgumentList			654471	1					
ANR	654493	CompoundStatement		7:1:171:171	654471	1					
ANR	654494	ExpressionStatement	currentChar = currentLine [ charNum ]	5686:2:165682:165716	654471	0	True				
ANR	654495	AssignmentExpression	currentChar = currentLine [ charNum ]		654471	0		=			
ANR	654496	Identifier	currentChar		654471	0					
ANR	654497	ArrayIndexing	currentLine [ charNum ]		654471	1					
ANR	654498	Identifier	currentLine		654471	0					
ANR	654499	Identifier	charNum		654471	1					
ANR	654500	IfStatement	if ( currentChar == '\\t' && shouldConvertTabs )		654471	1					
ANR	654501	Condition	currentChar == '\\t' && shouldConvertTabs	5687:6:165724:165763	654471	0	True				
ANR	654502	AndExpression	currentChar == '\\t' && shouldConvertTabs		654471	0		&&			
ANR	654503	EqualityExpression	currentChar == '\\t'		654471	0		==			
ANR	654504	Identifier	currentChar		654471	0					
ANR	654505	PrimaryExpression	'\\t'		654471	1					
ANR	654506	Identifier	shouldConvertTabs		654471	1					
ANR	654507	ExpressionStatement	convertTabToSpaces ( )	5688:3:165769:165789	654471	1	True				
ANR	654508	CallExpression	convertTabToSpaces ( )		654471	0					
ANR	654509	Callee	convertTabToSpaces		654471	0					
ANR	654510	Identifier	convertTabToSpaces		654471	0					
ANR	654511	ArgumentList			654471	1					
ANR	654512	ExpressionStatement	appendCurrentChar ( )	5689:2:165793:165812	654471	2	True				
ANR	654513	CallExpression	appendCurrentChar ( )		654471	0					
ANR	654514	Callee	appendCurrentChar		654471	0					
ANR	654515	Identifier	appendCurrentChar		654471	0					
ANR	654516	ArgumentList			654471	1					
ANR	654517	ExpressionStatement	++ charNum	5690:2:165816:165825	654471	3	True				
ANR	654518	UnaryExpression	++ charNum		654471	0					
ANR	654519	IncDec	++		654471	0					
ANR	654520	Identifier	charNum		654471	1					
ANR	654521	IfStatement	if ( charNum == ( int ) currentLine . length ( ) )		654471	2					
ANR	654522	Condition	charNum == ( int ) currentLine . length ( )	5694:5:165900:165936	654471	0	True				
ANR	654523	EqualityExpression	charNum == ( int ) currentLine . length ( )		654471	0		==			
ANR	654524	Identifier	charNum		654471	0					
ANR	654525	CastExpression	( int ) currentLine . length ( )		654471	1					
ANR	654526	CastTarget	int		654471	0					
ANR	654527	CallExpression	currentLine . length ( )		654471	1					
ANR	654528	Callee	currentLine . length		654471	0					
ANR	654529	MemberAccess	currentLine . length		654471	0					
ANR	654530	Identifier	currentLine		654471	0					
ANR	654531	Identifier	length		654471	1					
ANR	654532	ArgumentList			654471	1					
ANR	654533	CompoundStatement		17:1:433:433	654471	1					
ANR	654534	ExpressionStatement	isInLineBreak = true	5696:2:165944:165964	654471	0	True				
ANR	654535	AssignmentExpression	isInLineBreak = true		654471	0		=			
ANR	654536	Identifier	isInLineBreak		654471	0					
ANR	654537	Identifier	true		654471	1					
ANR	654538	ExpressionStatement	isInLineComment = false	5697:2:165968:165991	654471	1	True				
ANR	654539	AssignmentExpression	isInLineComment = false		654471	0		=			
ANR	654540	Identifier	isInLineComment		654471	0					
ANR	654541	Identifier	false		654471	1					
ANR	654542	ExpressionStatement	isImmediatelyPostLineComment = true	5698:2:165995:166030	654471	2	True				
ANR	654543	AssignmentExpression	isImmediatelyPostLineComment = true		654471	0		=			
ANR	654544	Identifier	isImmediatelyPostLineComment		654471	0					
ANR	654545	Identifier	true		654471	1					
ANR	654546	ExpressionStatement	currentChar = 0	5699:2:166034:166049	654471	3	True				
ANR	654547	AssignmentExpression	currentChar = 0		654471	0		=			
ANR	654548	Identifier	currentChar		654471	0					
ANR	654549	PrimaryExpression	0		654471	1					
ANR	654550	ReturnType	void		654471	1					
ANR	654551	Identifier	ASFormatter :: formatLineCommentBody		654471	2					
ANR	654552	ParameterList			654471	3					
ANR	654553	CFGEntryNode	ENTRY		654471		True				
ANR	654554	CFGExitNode	EXIT		654471		True				
ANR	654555	Symbol	* currentLine		654471						
ANR	654556	Symbol	currentChar		654471						
ANR	654557	Symbol	currentLine . length		654471						
ANR	654558	Symbol	* charNum		654471						
ANR	654559	Symbol	shouldConvertTabs		654471						
ANR	654560	Symbol	isInLineBreak		654471						
ANR	654561	Symbol	true		654471						
ANR	654562	Symbol	false		654471						
ANR	654563	Symbol	isImmediatelyPostLineComment		654471						
ANR	654564	Symbol	charNum		654471						
ANR	654565	Symbol	isInLineComment		654471						
ANR	654566	Symbol	currentLine		654471						
ANR	654567	Function	ASFormatter :: formatLineCommentOpener	5708:0:166324:170048							
ANR	654568	FunctionDef	ASFormatter :: formatLineCommentOpener ()		654567	0					
ANR	654569	CompoundStatement		5709:0:166368:170048	654567	0					
ANR	654570	ExpressionStatement	"assert ( isSequenceReached ( ""//"" ) )"	5710:1:166371:166402	654567	0	True				
ANR	654571	CallExpression	"assert ( isSequenceReached ( ""//"" ) )"		654567	0					
ANR	654572	Callee	assert		654567	0					
ANR	654573	Identifier	assert		654567	0					
ANR	654574	ArgumentList	"isSequenceReached ( ""//"" )"		654567	1					
ANR	654575	Argument	"isSequenceReached ( ""//"" )"		654567	0					
ANR	654576	CallExpression	"isSequenceReached ( ""//"" )"		654567	0					
ANR	654577	Callee	isSequenceReached		654567	0					
ANR	654578	Identifier	isSequenceReached		654567	0					
ANR	654579	ArgumentList	"""//"""		654567	1					
ANR	654580	Argument	"""//"""		654567	0					
ANR	654581	PrimaryExpression	"""//"""		654567	0					
ANR	654582	IfStatement	if ( ( int ) currentLine . length ( ) > charNum + 2 && currentLine [ charNum + 2 ] == xf2 )		654567	1					
ANR	654583	Condition	( int ) currentLine . length ( ) > charNum + 2 && currentLine [ charNum + 2 ] == xf2	5712:5:166410:166495	654567	0	True				
ANR	654584	AndExpression	( int ) currentLine . length ( ) > charNum + 2 && currentLine [ charNum + 2 ] == xf2		654567	0		&&			
ANR	654585	RelationalExpression	( int ) currentLine . length ( ) > charNum + 2		654567	0		>			
ANR	654586	CastExpression	( int ) currentLine . length ( )		654567	0					
ANR	654587	CastTarget	int		654567	0					
ANR	654588	CallExpression	currentLine . length ( )		654567	1					
ANR	654589	Callee	currentLine . length		654567	0					
ANR	654590	MemberAccess	currentLine . length		654567	0					
ANR	654591	Identifier	currentLine		654567	0					
ANR	654592	Identifier	length		654567	1					
ANR	654593	ArgumentList			654567	1					
ANR	654594	AdditiveExpression	charNum + 2		654567	1		+			
ANR	654595	Identifier	charNum		654567	0					
ANR	654596	PrimaryExpression	2		654567	1					
ANR	654597	EqualityExpression	currentLine [ charNum + 2 ] == xf2		654567	1		==			
ANR	654598	ArrayIndexing	currentLine [ charNum + 2 ]		654567	0					
ANR	654599	Identifier	currentLine		654567	0					
ANR	654600	AdditiveExpression	charNum + 2		654567	1		+			
ANR	654601	Identifier	charNum		654567	0					
ANR	654602	PrimaryExpression	2		654567	1					
ANR	654603	Identifier	xf2		654567	1					
ANR	654604	ExpressionStatement	isAppendPostBlockEmptyLineRequested = false	5714:2:166538:166581	654567	1	True				
ANR	654605	AssignmentExpression	isAppendPostBlockEmptyLineRequested = false		654567	0		=			
ANR	654606	Identifier	isAppendPostBlockEmptyLineRequested		654567	0					
ANR	654607	Identifier	false		654567	1					
ANR	654608	ExpressionStatement	isInLineComment = true	5716:1:166585:166607	654567	2	True				
ANR	654609	AssignmentExpression	isInLineComment = true		654567	0		=			
ANR	654610	Identifier	isInLineComment		654567	0					
ANR	654611	Identifier	true		654567	1					
ANR	654612	ExpressionStatement	isCharImmediatelyPostComment = false	5717:1:166610:166646	654567	3	True				
ANR	654613	AssignmentExpression	isCharImmediatelyPostComment = false		654567	0		=			
ANR	654614	Identifier	isCharImmediatelyPostComment		654567	0					
ANR	654615	Identifier	false		654567	1					
ANR	654616	IfStatement	if ( previousNonWSChar == '}' )		654567	4					
ANR	654617	Condition	previousNonWSChar == '}'	5718:5:166653:166676	654567	0	True				
ANR	654618	EqualityExpression	previousNonWSChar == '}'		654567	0		==			
ANR	654619	Identifier	previousNonWSChar		654567	0					
ANR	654620	PrimaryExpression	'}'		654567	1					
ANR	654621	ExpressionStatement	resetEndOfStatement ( )	5719:2:166681:166702	654567	1	True				
ANR	654622	CallExpression	resetEndOfStatement ( )		654567	0					
ANR	654623	Callee	resetEndOfStatement		654567	0					
ANR	654624	Identifier	resetEndOfStatement		654567	0					
ANR	654625	ArgumentList			654567	1					
ANR	654626	IdentifierDeclStatement	const string * followingHeader = nullptr ;	5724:1:166899:166938	654567	5	True				
ANR	654627	IdentifierDecl	* followingHeader = nullptr		654567	0					
ANR	654628	IdentifierDeclType	const string *		654567	0					
ANR	654629	Identifier	followingHeader		654567	1					
ANR	654630	AssignmentExpression	* followingHeader = nullptr		654567	2		=			
ANR	654631	Identifier	nullptr		654567	0					
ANR	654632	Identifier	nullptr		654567	1					
ANR	654633	IfStatement	"if ( ( lineIsLineCommentOnly && ! isImmediatelyPostCommentOnly && isBraceType ( braceTypeStack -> back ( ) , COMMAND_TYPE ) ) && ( shouldBreakElseIfs || isInSwitchStatement ( ) || ( shouldBreakBlocks && ! isImmediatelyPostEmptyLine && previousCommandChar != '{' ) ) )"		654567	6					
ANR	654634	Condition	"( lineIsLineCommentOnly && ! isImmediatelyPostCommentOnly && isBraceType ( braceTypeStack -> back ( ) , COMMAND_TYPE ) ) && ( shouldBreakElseIfs || isInSwitchStatement ( ) || ( shouldBreakBlocks && ! isImmediatelyPostEmptyLine && previousCommandChar != '{' ) )"	5725:5:166945:167273	654567	0	True				
ANR	654635	AndExpression	"( lineIsLineCommentOnly && ! isImmediatelyPostCommentOnly && isBraceType ( braceTypeStack -> back ( ) , COMMAND_TYPE ) ) && ( shouldBreakElseIfs || isInSwitchStatement ( ) || ( shouldBreakBlocks && ! isImmediatelyPostEmptyLine && previousCommandChar != '{' ) )"		654567	0		&&			
ANR	654636	AndExpression	"lineIsLineCommentOnly && ! isImmediatelyPostCommentOnly && isBraceType ( braceTypeStack -> back ( ) , COMMAND_TYPE )"		654567	0		&&			
ANR	654637	Identifier	lineIsLineCommentOnly		654567	0					
ANR	654638	AndExpression	"! isImmediatelyPostCommentOnly && isBraceType ( braceTypeStack -> back ( ) , COMMAND_TYPE )"		654567	1		&&			
ANR	654639	UnaryOperationExpression	! isImmediatelyPostCommentOnly		654567	0					
ANR	654640	UnaryOperator	!		654567	0					
ANR	654641	Identifier	isImmediatelyPostCommentOnly		654567	1					
ANR	654642	CallExpression	"isBraceType ( braceTypeStack -> back ( ) , COMMAND_TYPE )"		654567	1					
ANR	654643	Callee	isBraceType		654567	0					
ANR	654644	Identifier	isBraceType		654567	0					
ANR	654645	ArgumentList	braceTypeStack -> back ( )		654567	1					
ANR	654646	Argument	braceTypeStack -> back ( )		654567	0					
ANR	654647	CallExpression	braceTypeStack -> back ( )		654567	0					
ANR	654648	Callee	braceTypeStack -> back		654567	0					
ANR	654649	PtrMemberAccess	braceTypeStack -> back		654567	0					
ANR	654650	Identifier	braceTypeStack		654567	0					
ANR	654651	Identifier	back		654567	1					
ANR	654652	ArgumentList			654567	1					
ANR	654653	Argument	COMMAND_TYPE		654567	1					
ANR	654654	Identifier	COMMAND_TYPE		654567	0					
ANR	654655	OrExpression	shouldBreakElseIfs || isInSwitchStatement ( ) || ( shouldBreakBlocks && ! isImmediatelyPostEmptyLine && previousCommandChar != '{' )		654567	1		||			
ANR	654656	Identifier	shouldBreakElseIfs		654567	0					
ANR	654657	OrExpression	isInSwitchStatement ( ) || ( shouldBreakBlocks && ! isImmediatelyPostEmptyLine && previousCommandChar != '{' )		654567	1		||			
ANR	654658	CallExpression	isInSwitchStatement ( )		654567	0					
ANR	654659	Callee	isInSwitchStatement		654567	0					
ANR	654660	Identifier	isInSwitchStatement		654567	0					
ANR	654661	ArgumentList			654567	1					
ANR	654662	AndExpression	shouldBreakBlocks && ! isImmediatelyPostEmptyLine && previousCommandChar != '{'		654567	1		&&			
ANR	654663	Identifier	shouldBreakBlocks		654567	0					
ANR	654664	AndExpression	! isImmediatelyPostEmptyLine && previousCommandChar != '{'		654567	1		&&			
ANR	654665	UnaryOperationExpression	! isImmediatelyPostEmptyLine		654567	0					
ANR	654666	UnaryOperator	!		654567	0					
ANR	654667	Identifier	isImmediatelyPostEmptyLine		654567	1					
ANR	654668	EqualityExpression	previousCommandChar != '{'		654567	1		!=			
ANR	654669	Identifier	previousCommandChar		654567	0					
ANR	654670	PrimaryExpression	'{'		654567	1					
ANR	654671	ExpressionStatement	followingHeader = checkForHeaderFollowingComment ( currentLine . substr ( charNum ) )	5733:2:167278:167355	654567	1	True				
ANR	654672	AssignmentExpression	followingHeader = checkForHeaderFollowingComment ( currentLine . substr ( charNum ) )		654567	0		=			
ANR	654673	Identifier	followingHeader		654567	0					
ANR	654674	CallExpression	checkForHeaderFollowingComment ( currentLine . substr ( charNum ) )		654567	1					
ANR	654675	Callee	checkForHeaderFollowingComment		654567	0					
ANR	654676	Identifier	checkForHeaderFollowingComment		654567	0					
ANR	654677	ArgumentList	currentLine . substr ( charNum )		654567	1					
ANR	654678	Argument	currentLine . substr ( charNum )		654567	0					
ANR	654679	CallExpression	currentLine . substr ( charNum )		654567	0					
ANR	654680	Callee	currentLine . substr		654567	0					
ANR	654681	MemberAccess	currentLine . substr		654567	0					
ANR	654682	Identifier	currentLine		654567	0					
ANR	654683	Identifier	substr		654567	1					
ANR	654684	ArgumentList	charNum		654567	1					
ANR	654685	Argument	charNum		654567	0					
ANR	654686	Identifier	charNum		654567	0					
ANR	654687	IfStatement	if ( ( ! shouldIndentCol1Comments && ! lineCommentNoIndent ) || foundNamespaceHeader )		654567	7					
ANR	654688	Condition	( ! shouldIndentCol1Comments && ! lineCommentNoIndent ) || foundNamespaceHeader	5737:5:167448:167531	654567	0	True				
ANR	654689	OrExpression	( ! shouldIndentCol1Comments && ! lineCommentNoIndent ) || foundNamespaceHeader		654567	0		||			
ANR	654690	AndExpression	! shouldIndentCol1Comments && ! lineCommentNoIndent		654567	0		&&			
ANR	654691	UnaryOperationExpression	! shouldIndentCol1Comments		654567	0					
ANR	654692	UnaryOperator	!		654567	0					
ANR	654693	Identifier	shouldIndentCol1Comments		654567	1					
ANR	654694	UnaryOperationExpression	! lineCommentNoIndent		654567	1					
ANR	654695	UnaryOperator	!		654567	0					
ANR	654696	Identifier	lineCommentNoIndent		654567	1					
ANR	654697	Identifier	foundNamespaceHeader		654567	1					
ANR	654698	CompoundStatement		31:1:1166:1166	654567	1					
ANR	654699	IfStatement	if ( charNum == 0 )		654567	0					
ANR	654700	Condition	charNum == 0	5740:6:167543:167554	654567	0	True				
ANR	654701	EqualityExpression	charNum == 0		654567	0		==			
ANR	654702	Identifier	charNum		654567	0					
ANR	654703	PrimaryExpression	0		654567	1					
ANR	654704	ExpressionStatement	lineCommentNoIndent = true	5741:3:167560:167586	654567	1	True				
ANR	654705	AssignmentExpression	lineCommentNoIndent = true		654567	0		=			
ANR	654706	Identifier	lineCommentNoIndent		654567	0					
ANR	654707	Identifier	true		654567	1					
ANR	654708	ElseStatement	else		654567	0					
ANR	654709	IfStatement	if ( charNum == 1 && currentLine [ 0 ] == ' ' )		654567	0					
ANR	654710	Condition	charNum == 1 && currentLine [ 0 ] == ' '	5742:11:167599:167635	654567	0	True				
ANR	654711	AndExpression	charNum == 1 && currentLine [ 0 ] == ' '		654567	0		&&			
ANR	654712	EqualityExpression	charNum == 1		654567	0		==			
ANR	654713	Identifier	charNum		654567	0					
ANR	654714	PrimaryExpression	1		654567	1					
ANR	654715	EqualityExpression	currentLine [ 0 ] == ' '		654567	1		==			
ANR	654716	ArrayIndexing	currentLine [ 0 ]		654567	0					
ANR	654717	Identifier	currentLine		654567	0					
ANR	654718	PrimaryExpression	0		654567	1					
ANR	654719	PrimaryExpression	' '		654567	1					
ANR	654720	ExpressionStatement	lineCommentNoIndent = true	5743:3:167641:167667	654567	1	True				
ANR	654721	AssignmentExpression	lineCommentNoIndent = true		654567	0		=			
ANR	654722	Identifier	lineCommentNoIndent		654567	0					
ANR	654723	Identifier	true		654567	1					
ANR	654724	IfStatement	if ( ! lineCommentNoIndent && spacePadNum != 0 && ! isInLineBreak )		654567	8					
ANR	654725	Condition	! lineCommentNoIndent && spacePadNum != 0 && ! isInLineBreak	5746:5:167726:167783	654567	0	True				
ANR	654726	AndExpression	! lineCommentNoIndent && spacePadNum != 0 && ! isInLineBreak		654567	0		&&			
ANR	654727	UnaryOperationExpression	! lineCommentNoIndent		654567	0					
ANR	654728	UnaryOperator	!		654567	0					
ANR	654729	Identifier	lineCommentNoIndent		654567	1					
ANR	654730	AndExpression	spacePadNum != 0 && ! isInLineBreak		654567	1		&&			
ANR	654731	EqualityExpression	spacePadNum != 0		654567	0		!=			
ANR	654732	Identifier	spacePadNum		654567	0					
ANR	654733	PrimaryExpression	0		654567	1					
ANR	654734	UnaryOperationExpression	! isInLineBreak		654567	1					
ANR	654735	UnaryOperator	!		654567	0					
ANR	654736	Identifier	isInLineBreak		654567	1					
ANR	654737	ExpressionStatement	adjustComments ( )	5747:2:167788:167804	654567	1	True				
ANR	654738	CallExpression	adjustComments ( )		654567	0					
ANR	654739	Callee	adjustComments		654567	0					
ANR	654740	Identifier	adjustComments		654567	0					
ANR	654741	ArgumentList			654567	1					
ANR	654742	ExpressionStatement	formattedLineCommentNum = formattedLine . length ( )	5748:1:167807:167855	654567	9	True				
ANR	654743	AssignmentExpression	formattedLineCommentNum = formattedLine . length ( )		654567	0		=			
ANR	654744	Identifier	formattedLineCommentNum		654567	0					
ANR	654745	CallExpression	formattedLine . length ( )		654567	1					
ANR	654746	Callee	formattedLine . length		654567	0					
ANR	654747	MemberAccess	formattedLine . length		654567	0					
ANR	654748	Identifier	formattedLine		654567	0					
ANR	654749	Identifier	length		654567	1					
ANR	654750	ArgumentList			654567	1					
ANR	654751	IfStatement	if ( previousCommandChar == '{' && ! isImmediatelyPostComment && ! isImmediatelyPostLineComment )		654567	10					
ANR	654752	Condition	previousCommandChar == '{' && ! isImmediatelyPostComment && ! isImmediatelyPostLineComment	5752:5:167933:168038	654567	0	True				
ANR	654753	AndExpression	previousCommandChar == '{' && ! isImmediatelyPostComment && ! isImmediatelyPostLineComment		654567	0		&&			
ANR	654754	EqualityExpression	previousCommandChar == '{'		654567	0		==			
ANR	654755	Identifier	previousCommandChar		654567	0					
ANR	654756	PrimaryExpression	'{'		654567	1					
ANR	654757	AndExpression	! isImmediatelyPostComment && ! isImmediatelyPostLineComment		654567	1		&&			
ANR	654758	UnaryOperationExpression	! isImmediatelyPostComment		654567	0					
ANR	654759	UnaryOperator	!		654567	0					
ANR	654760	Identifier	isImmediatelyPostComment		654567	1					
ANR	654761	UnaryOperationExpression	! isImmediatelyPostLineComment		654567	1					
ANR	654762	UnaryOperator	!		654567	0					
ANR	654763	Identifier	isImmediatelyPostLineComment		654567	1					
ANR	654764	CompoundStatement		47:1:1673:1673	654567	1					
ANR	654765	IfStatement	if ( braceFormatMode == NONE_MODE )		654567	0					
ANR	654766	Condition	braceFormatMode == NONE_MODE	5756:6:168050:168077	654567	0	True				
ANR	654767	EqualityExpression	braceFormatMode == NONE_MODE		654567	0		==			
ANR	654768	Identifier	braceFormatMode		654567	0					
ANR	654769	Identifier	NONE_MODE		654567	1					
ANR	654770	CompoundStatement		49:2:1713:1713	654567	1					
ANR	654771	IfStatement	if ( currentLineBeginsWithBrace )		654567	0					
ANR	654772	Condition	currentLineBeginsWithBrace	5758:7:168091:168116	654567	0	True				
ANR	654773	Identifier	currentLineBeginsWithBrace		654567	0					
ANR	654774	ExpressionStatement	formatRunIn ( )	5759:4:168123:168136	654567	1	True				
ANR	654775	CallExpression	formatRunIn ( )		654567	0					
ANR	654776	Callee	formatRunIn		654567	0					
ANR	654777	Identifier	formatRunIn		654567	0					
ANR	654778	ArgumentList			654567	1					
ANR	654779	ElseStatement	else		654567	0					
ANR	654780	IfStatement	if ( braceFormatMode == RUN_IN_MODE )		654567	0					
ANR	654781	Condition	braceFormatMode == RUN_IN_MODE	5761:11:168153:168182	654567	0	True				
ANR	654782	EqualityExpression	braceFormatMode == RUN_IN_MODE		654567	0		==			
ANR	654783	Identifier	braceFormatMode		654567	0					
ANR	654784	Identifier	RUN_IN_MODE		654567	1					
ANR	654785	CompoundStatement		54:2:1818:1818	654567	1					
ANR	654786	IfStatement	if ( ! lineCommentNoIndent )		654567	0					
ANR	654787	Condition	! lineCommentNoIndent	5763:7:168196:168215	654567	0	True				
ANR	654788	UnaryOperationExpression	! lineCommentNoIndent		654567	0					
ANR	654789	UnaryOperator	!		654567	0					
ANR	654790	Identifier	lineCommentNoIndent		654567	1					
ANR	654791	ExpressionStatement	formatRunIn ( )	5764:4:168222:168235	654567	1	True				
ANR	654792	CallExpression	formatRunIn ( )		654567	0					
ANR	654793	Callee	formatRunIn		654567	0					
ANR	654794	Identifier	formatRunIn		654567	0					
ANR	654795	ArgumentList			654567	1					
ANR	654796	ElseStatement	else		654567	0					
ANR	654797	ExpressionStatement	isInLineBreak = true	5766:4:168249:168269	654567	0	True				
ANR	654798	AssignmentExpression	isInLineBreak = true		654567	0		=			
ANR	654799	Identifier	isInLineBreak		654567	0					
ANR	654800	Identifier	true		654567	1					
ANR	654801	ElseStatement	else		654567	0					
ANR	654802	IfStatement	if ( braceFormatMode == BREAK_MODE )		654567	0					
ANR	654803	Condition	braceFormatMode == BREAK_MODE	5768:11:168286:168314	654567	0	True				
ANR	654804	EqualityExpression	braceFormatMode == BREAK_MODE		654567	0		==			
ANR	654805	Identifier	braceFormatMode		654567	0					
ANR	654806	Identifier	BREAK_MODE		654567	1					
ANR	654807	CompoundStatement		61:2:1950:1950	654567	1					
ANR	654808	IfStatement	if ( formattedLine . length ( ) > 0 && formattedLine [ 0 ] == '{' )		654567	0					
ANR	654809	Condition	formattedLine . length ( ) > 0 && formattedLine [ 0 ] == '{'	5770:7:168328:168380	654567	0	True				
ANR	654810	AndExpression	formattedLine . length ( ) > 0 && formattedLine [ 0 ] == '{'		654567	0		&&			
ANR	654811	RelationalExpression	formattedLine . length ( ) > 0		654567	0		>			
ANR	654812	CallExpression	formattedLine . length ( )		654567	0					
ANR	654813	Callee	formattedLine . length		654567	0					
ANR	654814	MemberAccess	formattedLine . length		654567	0					
ANR	654815	Identifier	formattedLine		654567	0					
ANR	654816	Identifier	length		654567	1					
ANR	654817	ArgumentList			654567	1					
ANR	654818	PrimaryExpression	0		654567	1					
ANR	654819	EqualityExpression	formattedLine [ 0 ] == '{'		654567	1		==			
ANR	654820	ArrayIndexing	formattedLine [ 0 ]		654567	0					
ANR	654821	Identifier	formattedLine		654567	0					
ANR	654822	PrimaryExpression	0		654567	1					
ANR	654823	PrimaryExpression	'{'		654567	1					
ANR	654824	ExpressionStatement	isInLineBreak = true	5771:4:168387:168407	654567	1	True				
ANR	654825	AssignmentExpression	isInLineBreak = true		654567	0		=			
ANR	654826	Identifier	isInLineBreak		654567	0					
ANR	654827	Identifier	true		654567	1					
ANR	654828	ElseStatement	else		654567	0					
ANR	654829	CompoundStatement		66:2:2053:2053	654567	0					
ANR	654830	IfStatement	if ( currentLineBeginsWithBrace )		654567	0					
ANR	654831	Condition	currentLineBeginsWithBrace	5775:7:168431:168456	654567	0	True				
ANR	654832	Identifier	currentLineBeginsWithBrace		654567	0					
ANR	654833	ExpressionStatement	isInLineBreak = true	5776:4:168463:168483	654567	1	True				
ANR	654834	AssignmentExpression	isInLineBreak = true		654567	0		=			
ANR	654835	Identifier	isInLineBreak		654567	0					
ANR	654836	Identifier	true		654567	1					
ANR	654837	IfStatement	if ( shouldBreakElseIfs && followingHeader == & AS_ELSE )		654567	11					
ANR	654838	Condition	shouldBreakElseIfs && followingHeader == & AS_ELSE	5781:5:168554:168602	654567	0	True				
ANR	654839	AndExpression	shouldBreakElseIfs && followingHeader == & AS_ELSE		654567	0		&&			
ANR	654840	Identifier	shouldBreakElseIfs		654567	0					
ANR	654841	EqualityExpression	followingHeader == & AS_ELSE		654567	1		==			
ANR	654842	Identifier	followingHeader		654567	0					
ANR	654843	UnaryOperationExpression	& AS_ELSE		654567	1					
ANR	654844	UnaryOperator	&		654567	0					
ANR	654845	Identifier	AS_ELSE		654567	1					
ANR	654846	ExpressionStatement	elseHeaderFollowsComments = true	5782:2:168607:168639	654567	1	True				
ANR	654847	AssignmentExpression	elseHeaderFollowsComments = true		654567	0		=			
ANR	654848	Identifier	elseHeaderFollowsComments		654567	0					
ANR	654849	Identifier	true		654567	1					
ANR	654850	IfStatement	if ( followingHeader == & AS_CASE || followingHeader == & AS_DEFAULT )		654567	12					
ANR	654851	Condition	followingHeader == & AS_CASE || followingHeader == & AS_DEFAULT	5783:5:168646:168706	654567	0	True				
ANR	654852	OrExpression	followingHeader == & AS_CASE || followingHeader == & AS_DEFAULT		654567	0		||			
ANR	654853	EqualityExpression	followingHeader == & AS_CASE		654567	0		==			
ANR	654854	Identifier	followingHeader		654567	0					
ANR	654855	UnaryOperationExpression	& AS_CASE		654567	1					
ANR	654856	UnaryOperator	&		654567	0					
ANR	654857	Identifier	AS_CASE		654567	1					
ANR	654858	EqualityExpression	followingHeader == & AS_DEFAULT		654567	1		==			
ANR	654859	Identifier	followingHeader		654567	0					
ANR	654860	UnaryOperationExpression	& AS_DEFAULT		654567	1					
ANR	654861	UnaryOperator	&		654567	0					
ANR	654862	Identifier	AS_DEFAULT		654567	1					
ANR	654863	ExpressionStatement	caseHeaderFollowsComments = true	5784:2:168711:168743	654567	1	True				
ANR	654864	AssignmentExpression	caseHeaderFollowsComments = true		654567	0		=			
ANR	654865	Identifier	caseHeaderFollowsComments		654567	0					
ANR	654866	Identifier	true		654567	1					
ANR	654867	ExpressionStatement	appendSequence ( AS_OPEN_LINE_COMMENT )	5787:1:168795:168831	654567	13	True				
ANR	654868	CallExpression	appendSequence ( AS_OPEN_LINE_COMMENT )		654567	0					
ANR	654869	Callee	appendSequence		654567	0					
ANR	654870	Identifier	appendSequence		654567	0					
ANR	654871	ArgumentList	AS_OPEN_LINE_COMMENT		654567	1					
ANR	654872	Argument	AS_OPEN_LINE_COMMENT		654567	0					
ANR	654873	Identifier	AS_OPEN_LINE_COMMENT		654567	0					
ANR	654874	ExpressionStatement	goForward ( 1 )	5788:1:168834:168846	654567	14	True				
ANR	654875	CallExpression	goForward ( 1 )		654567	0					
ANR	654876	Callee	goForward		654567	0					
ANR	654877	Identifier	goForward		654567	0					
ANR	654878	ArgumentList	1		654567	1					
ANR	654879	Argument	1		654567	0					
ANR	654880	PrimaryExpression	1		654567	0					
ANR	654881	IfStatement	if ( shouldBreakBlocks && followingHeader != nullptr && ! isImmediatelyPostEmptyLine && previousCommandChar != '{' )		654567	15					
ANR	654882	Condition	shouldBreakBlocks && followingHeader != nullptr && ! isImmediatelyPostEmptyLine && previousCommandChar != '{'	5794:5:169029:169163	654567	0	True				
ANR	654883	AndExpression	shouldBreakBlocks && followingHeader != nullptr && ! isImmediatelyPostEmptyLine && previousCommandChar != '{'		654567	0		&&			
ANR	654884	Identifier	shouldBreakBlocks		654567	0					
ANR	654885	AndExpression	followingHeader != nullptr && ! isImmediatelyPostEmptyLine && previousCommandChar != '{'		654567	1		&&			
ANR	654886	EqualityExpression	followingHeader != nullptr		654567	0		!=			
ANR	654887	Identifier	followingHeader		654567	0					
ANR	654888	Identifier	nullptr		654567	1					
ANR	654889	AndExpression	! isImmediatelyPostEmptyLine && previousCommandChar != '{'		654567	1		&&			
ANR	654890	UnaryOperationExpression	! isImmediatelyPostEmptyLine		654567	0					
ANR	654891	UnaryOperator	!		654567	0					
ANR	654892	Identifier	isImmediatelyPostEmptyLine		654567	1					
ANR	654893	EqualityExpression	previousCommandChar != '{'		654567	1		!=			
ANR	654894	Identifier	previousCommandChar		654567	0					
ANR	654895	PrimaryExpression	'{'		654567	1					
ANR	654896	CompoundStatement		90:1:2798:2798	654567	1					
ANR	654897	IfStatement	if ( isClosingHeader ( followingHeader ) )		654567	0					
ANR	654898	Condition	isClosingHeader ( followingHeader )	5799:6:169175:169206	654567	0	True				
ANR	654899	CallExpression	isClosingHeader ( followingHeader )		654567	0					
ANR	654900	Callee	isClosingHeader		654567	0					
ANR	654901	Identifier	isClosingHeader		654567	0					
ANR	654902	ArgumentList	followingHeader		654567	1					
ANR	654903	Argument	followingHeader		654567	0					
ANR	654904	Identifier	followingHeader		654567	0					
ANR	654905	CompoundStatement		92:2:2842:2842	654567	1					
ANR	654906	IfStatement	if ( ! shouldBreakClosingHeaderBlocks )		654567	0					
ANR	654907	Condition	! shouldBreakClosingHeaderBlocks	5801:7:169220:169250	654567	0	True				
ANR	654908	UnaryOperationExpression	! shouldBreakClosingHeaderBlocks		654567	0					
ANR	654909	UnaryOperator	!		654567	0					
ANR	654910	Identifier	shouldBreakClosingHeaderBlocks		654567	1					
ANR	654911	ExpressionStatement	isPrependPostBlockEmptyLineRequested = false	5802:4:169257:169301	654567	1	True				
ANR	654912	AssignmentExpression	isPrependPostBlockEmptyLineRequested = false		654567	0		=			
ANR	654913	Identifier	isPrependPostBlockEmptyLineRequested		654567	0					
ANR	654914	Identifier	false		654567	1					
ANR	654915	ElseStatement	else		654567	0					
ANR	654916	ExpressionStatement	isPrependPostBlockEmptyLineRequested = true	5806:3:169369:169412	654567	0	True				
ANR	654917	AssignmentExpression	isPrependPostBlockEmptyLineRequested = true		654567	0		=			
ANR	654918	Identifier	isPrependPostBlockEmptyLineRequested		654567	0					
ANR	654919	Identifier	true		654567	1					
ANR	654920	IfStatement	if ( previousCommandChar == '}' )		654567	16					
ANR	654921	Condition	previousCommandChar == '}'	5809:5:169423:169448	654567	0	True				
ANR	654922	EqualityExpression	previousCommandChar == '}'		654567	0		==			
ANR	654923	Identifier	previousCommandChar		654567	0					
ANR	654924	PrimaryExpression	'}'		654567	1					
ANR	654925	ExpressionStatement	currentHeader = nullptr	5810:2:169453:169476	654567	1	True				
ANR	654926	AssignmentExpression	currentHeader = nullptr		654567	0		=			
ANR	654927	Identifier	currentHeader		654567	0					
ANR	654928	Identifier	nullptr		654567	1					
ANR	654929	IfStatement	"if ( getIndentString ( ) == ""\\t"" && lineCommentNoIndent )"		654567	17					
ANR	654930	Condition	"getIndentString ( ) == ""\\t"" && lineCommentNoIndent"	5813:5:169559:169606	654567	0	True				
ANR	654931	AndExpression	"getIndentString ( ) == ""\\t"" && lineCommentNoIndent"		654567	0		&&			
ANR	654932	EqualityExpression	"getIndentString ( ) == ""\\t"""		654567	0		==			
ANR	654933	CallExpression	getIndentString ( )		654567	0					
ANR	654934	Callee	getIndentString		654567	0					
ANR	654935	Identifier	getIndentString		654567	0					
ANR	654936	ArgumentList			654567	1					
ANR	654937	PrimaryExpression	"""\\t"""		654567	1					
ANR	654938	Identifier	lineCommentNoIndent		654567	1					
ANR	654939	CompoundStatement		106:1:3241:3241	654567	1					
ANR	654940	WhileStatement	while ( charNum + 1 < ( int ) currentLine . length ( ) && currentLine [ charNum + 1 ] == '\\t' )		654567	0					
ANR	654941	Condition	charNum + 1 < ( int ) currentLine . length ( ) && currentLine [ charNum + 1 ] == '\\t'	5815:9:169621:169706	654567	0	True				
ANR	654942	AndExpression	charNum + 1 < ( int ) currentLine . length ( ) && currentLine [ charNum + 1 ] == '\\t'		654567	0		&&			
ANR	654943	RelationalExpression	charNum + 1 < ( int ) currentLine . length ( )		654567	0		<			
ANR	654944	AdditiveExpression	charNum + 1		654567	0		+			
ANR	654945	Identifier	charNum		654567	0					
ANR	654946	PrimaryExpression	1		654567	1					
ANR	654947	CastExpression	( int ) currentLine . length ( )		654567	1					
ANR	654948	CastTarget	int		654567	0					
ANR	654949	CallExpression	currentLine . length ( )		654567	1					
ANR	654950	Callee	currentLine . length		654567	0					
ANR	654951	MemberAccess	currentLine . length		654567	0					
ANR	654952	Identifier	currentLine		654567	0					
ANR	654953	Identifier	length		654567	1					
ANR	654954	ArgumentList			654567	1					
ANR	654955	EqualityExpression	currentLine [ charNum + 1 ] == '\\t'		654567	1		==			
ANR	654956	ArrayIndexing	currentLine [ charNum + 1 ]		654567	0					
ANR	654957	Identifier	currentLine		654567	0					
ANR	654958	AdditiveExpression	charNum + 1		654567	1		+			
ANR	654959	Identifier	charNum		654567	0					
ANR	654960	PrimaryExpression	1		654567	1					
ANR	654961	PrimaryExpression	'\\t'		654567	1					
ANR	654962	CompoundStatement		109:2:3342:3342	654567	1					
ANR	654963	ExpressionStatement	currentChar = currentLine [ ++ charNum ]	5818:3:169716:169752	654567	0	True				
ANR	654964	AssignmentExpression	currentChar = currentLine [ ++ charNum ]		654567	0		=			
ANR	654965	Identifier	currentChar		654567	0					
ANR	654966	ArrayIndexing	currentLine [ ++ charNum ]		654567	1					
ANR	654967	Identifier	currentLine		654567	0					
ANR	654968	UnaryExpression	++ charNum		654567	1					
ANR	654969	IncDec	++		654567	0					
ANR	654970	Identifier	charNum		654567	1					
ANR	654971	ExpressionStatement	appendCurrentChar ( )	5819:3:169757:169776	654567	1	True				
ANR	654972	CallExpression	appendCurrentChar ( )		654567	0					
ANR	654973	Callee	appendCurrentChar		654567	0					
ANR	654974	Identifier	appendCurrentChar		654567	0					
ANR	654975	ArgumentList			654567	1					
ANR	654976	IfStatement	if ( charNum + 1 == ( int ) currentLine . length ( ) )		654567	18					
ANR	654977	Condition	charNum + 1 == ( int ) currentLine . length ( )	5824:5:169855:169895	654567	0	True				
ANR	654978	EqualityExpression	charNum + 1 == ( int ) currentLine . length ( )		654567	0		==			
ANR	654979	AdditiveExpression	charNum + 1		654567	0		+			
ANR	654980	Identifier	charNum		654567	0					
ANR	654981	PrimaryExpression	1		654567	1					
ANR	654982	CastExpression	( int ) currentLine . length ( )		654567	1					
ANR	654983	CastTarget	int		654567	0					
ANR	654984	CallExpression	currentLine . length ( )		654567	1					
ANR	654985	Callee	currentLine . length		654567	0					
ANR	654986	MemberAccess	currentLine . length		654567	0					
ANR	654987	Identifier	currentLine		654567	0					
ANR	654988	Identifier	length		654567	1					
ANR	654989	ArgumentList			654567	1					
ANR	654990	CompoundStatement		117:1:3530:3530	654567	1					
ANR	654991	ExpressionStatement	isInLineBreak = true	5826:2:169903:169923	654567	0	True				
ANR	654992	AssignmentExpression	isInLineBreak = true		654567	0		=			
ANR	654993	Identifier	isInLineBreak		654567	0					
ANR	654994	Identifier	true		654567	1					
ANR	654995	ExpressionStatement	isInLineComment = false	5827:2:169927:169950	654567	1	True				
ANR	654996	AssignmentExpression	isInLineComment = false		654567	0		=			
ANR	654997	Identifier	isInLineComment		654567	0					
ANR	654998	Identifier	false		654567	1					
ANR	654999	ExpressionStatement	isImmediatelyPostLineComment = true	5828:2:169954:169989	654567	2	True				
ANR	655000	AssignmentExpression	isImmediatelyPostLineComment = true		654567	0		=			
ANR	655001	Identifier	isImmediatelyPostLineComment		654567	0					
ANR	655002	Identifier	true		654567	1					
ANR	655003	ExpressionStatement	currentChar = 0	5829:2:169993:170008	654567	3	True				
ANR	655004	AssignmentExpression	currentChar = 0		654567	0		=			
ANR	655005	Identifier	currentChar		654567	0					
ANR	655006	PrimaryExpression	0		654567	1					
ANR	655007	ReturnType	void		654567	1					
ANR	655008	Identifier	ASFormatter :: formatLineCommentOpener		654567	2					
ANR	655009	ParameterList			654567	3					
ANR	655010	CFGEntryNode	ENTRY		654567		True				
ANR	655011	CFGExitNode	EXIT		654567		True				
ANR	655012	Symbol	* formattedLine		654567						
ANR	655013	Symbol	RUN_IN_MODE		654567						
ANR	655014	Symbol	xf2		654567						
ANR	655015	Symbol	shouldBreakElseIfs		654567						
ANR	655016	Symbol	isClosingHeader		654567						
ANR	655017	Symbol	shouldBreakBlocks		654567						
ANR	655018	Symbol	isPrependPostBlockEmptyLineRequested		654567						
ANR	655019	Symbol	* currentLine		654567						
ANR	655020	Symbol	lineIsLineCommentOnly		654567						
ANR	655021	Symbol	isBraceType		654567						
ANR	655022	Symbol	& AS_CASE		654567						
ANR	655023	Symbol	formattedLineCommentNum		654567						
ANR	655024	Symbol	currentChar		654567						
ANR	655025	Symbol	currentLineBeginsWithBrace		654567						
ANR	655026	Symbol	isImmediatelyPostCommentOnly		654567						
ANR	655027	Symbol	* braceTypeStack		654567						
ANR	655028	Symbol	isInLineBreak		654567						
ANR	655029	Symbol	spacePadNum		654567						
ANR	655030	Symbol	previousCommandChar		654567						
ANR	655031	Symbol	checkForHeaderFollowingComment		654567						
ANR	655032	Symbol	shouldIndentCol1Comments		654567						
ANR	655033	Symbol	isInLineComment		654567						
ANR	655034	Symbol	COMMAND_TYPE		654567						
ANR	655035	Symbol	* charNum		654567						
ANR	655036	Symbol	true		654567						
ANR	655037	Symbol	isImmediatelyPostLineComment		654567						
ANR	655038	Symbol	braceFormatMode		654567						
ANR	655039	Symbol	nullptr		654567						
ANR	655040	Symbol	getIndentString		654567						
ANR	655041	Symbol	previousNonWSChar		654567						
ANR	655042	Symbol	braceTypeStack		654567						
ANR	655043	Symbol	isCharImmediatelyPostComment		654567						
ANR	655044	Symbol	caseHeaderFollowsComments		654567						
ANR	655045	Symbol	isImmediatelyPostEmptyLine		654567						
ANR	655046	Symbol	shouldBreakClosingHeaderBlocks		654567						
ANR	655047	Symbol	isImmediatelyPostComment		654567						
ANR	655048	Symbol	NONE_MODE		654567						
ANR	655049	Symbol	followingHeader		654567						
ANR	655050	Symbol	isSequenceReached		654567						
ANR	655051	Symbol	BREAK_MODE		654567						
ANR	655052	Symbol	currentLine . substr		654567						
ANR	655053	Symbol	charNum		654567						
ANR	655054	Symbol	isInSwitchStatement		654567						
ANR	655055	Symbol	currentLine		654567						
ANR	655056	Symbol	isAppendPostBlockEmptyLineRequested		654567						
ANR	655057	Symbol	false		654567						
ANR	655058	Symbol	AS_OPEN_LINE_COMMENT		654567						
ANR	655059	Symbol	& AS_ELSE		654567						
ANR	655060	Symbol	braceTypeStack -> back		654567						
ANR	655061	Symbol	formattedLine		654567						
ANR	655062	Symbol	elseHeaderFollowsComments		654567						
ANR	655063	Symbol	currentHeader		654567						
ANR	655064	Symbol	currentLine . length		654567						
ANR	655065	Symbol	foundNamespaceHeader		654567						
ANR	655066	Symbol	lineCommentNoIndent		654567						
ANR	655067	Symbol	formattedLine . length		654567						
ANR	655068	Symbol	& AS_DEFAULT		654567						
ANR	655069	Function	ASFormatter :: formatQuoteBody	5837:0:170163:171700							
ANR	655070	FunctionDef	ASFormatter :: formatQuoteBody ()		655069	0					
ANR	655071	CompoundStatement		5838:0:170199:171700	655069	0					
ANR	655072	ExpressionStatement	assert ( isInQuote )	5839:1:170202:170219	655069	0	True				
ANR	655073	CallExpression	assert ( isInQuote )		655069	0					
ANR	655074	Callee	assert		655069	0					
ANR	655075	Identifier	assert		655069	0					
ANR	655076	ArgumentList	isInQuote		655069	1					
ANR	655077	Argument	isInQuote		655069	0					
ANR	655078	Identifier	isInQuote		655069	0					
ANR	655079	IfStatement	if ( isSpecialChar )		655069	1					
ANR	655080	Condition	isSpecialChar	5841:5:170227:170239	655069	0	True				
ANR	655081	Identifier	isSpecialChar		655069	0					
ANR	655082	CompoundStatement		5:1:43:43	655069	1					
ANR	655083	ExpressionStatement	isSpecialChar = false	5843:2:170247:170268	655069	0	True				
ANR	655084	AssignmentExpression	isSpecialChar = false		655069	0		=			
ANR	655085	Identifier	isSpecialChar		655069	0					
ANR	655086	Identifier	false		655069	1					
ANR	655087	ElseStatement	else		655069	0					
ANR	655088	IfStatement	if ( currentChar == '\\\\' && ! isInVerbatimQuote )		655069	0					
ANR	655089	Condition	currentChar == '\\\\' && ! isInVerbatimQuote	5845:10:170283:170323	655069	0	True				
ANR	655090	AndExpression	currentChar == '\\\\' && ! isInVerbatimQuote		655069	0		&&			
ANR	655091	EqualityExpression	currentChar == '\\\\'		655069	0		==			
ANR	655092	Identifier	currentChar		655069	0					
ANR	655093	PrimaryExpression	'\\\\'		655069	1					
ANR	655094	UnaryOperationExpression	! isInVerbatimQuote		655069	1					
ANR	655095	UnaryOperator	!		655069	0					
ANR	655096	Identifier	isInVerbatimQuote		655069	1					
ANR	655097	CompoundStatement		9:1:127:127	655069	1					
ANR	655098	IfStatement	if ( peekNextChar ( ) == ' ' )		655069	0					
ANR	655099	Condition	peekNextChar ( ) == ' '	5847:6:170335:170355	655069	0	True				
ANR	655100	EqualityExpression	peekNextChar ( ) == ' '		655069	0		==			
ANR	655101	CallExpression	peekNextChar ( )		655069	0					
ANR	655102	Callee	peekNextChar		655069	0					
ANR	655103	Identifier	peekNextChar		655069	0					
ANR	655104	ArgumentList			655069	1					
ANR	655105	PrimaryExpression	' '		655069	1					
ANR	655106	ExpressionStatement	haveLineContinuationChar = true	5848:3:170404:170435	655069	1	True				
ANR	655107	AssignmentExpression	haveLineContinuationChar = true		655069	0		=			
ANR	655108	Identifier	haveLineContinuationChar		655069	0					
ANR	655109	Identifier	true		655069	1					
ANR	655110	ElseStatement	else		655069	0					
ANR	655111	ExpressionStatement	isSpecialChar = true	5850:3:170447:170467	655069	0	True				
ANR	655112	AssignmentExpression	isSpecialChar = true		655069	0		=			
ANR	655113	Identifier	isSpecialChar		655069	0					
ANR	655114	Identifier	true		655069	1					
ANR	655115	ElseStatement	else		655069	0					
ANR	655116	IfStatement	"if ( isInVerbatimQuote && currentChar == '""' )"		655069	0					
ANR	655117	Condition	"isInVerbatimQuote && currentChar == '""'"	5852:10:170482:170520	655069	0	True				
ANR	655118	AndExpression	"isInVerbatimQuote && currentChar == '""'"		655069	0		&&			
ANR	655119	Identifier	isInVerbatimQuote		655069	0					
ANR	655120	EqualityExpression	"currentChar == '""'"		655069	1		==			
ANR	655121	Identifier	currentChar		655069	0					
ANR	655122	PrimaryExpression	"'""'"		655069	1					
ANR	655123	CompoundStatement		16:1:324:324	655069	1					
ANR	655124	IfStatement	if ( isCStyle ( ) )		655069	0					
ANR	655125	Condition	isCStyle ( )	5854:6:170532:170541	655069	0	True				
ANR	655126	CallExpression	isCStyle ( )		655069	0					
ANR	655127	Callee	isCStyle		655069	0					
ANR	655128	Identifier	isCStyle		655069	0					
ANR	655129	ArgumentList			655069	1					
ANR	655130	CompoundStatement		20:3:394:435	655069	1					
ANR	655131	IdentifierDeclStatement	string delim = ')' + verbatimDelimiter ;	5856:3:170551:170589	655069	0	True				
ANR	655132	IdentifierDecl	delim = ')' + verbatimDelimiter		655069	0					
ANR	655133	IdentifierDeclType	string		655069	0					
ANR	655134	Identifier	delim		655069	1					
ANR	655135	AssignmentExpression	delim = ')' + verbatimDelimiter		655069	2		=			
ANR	655136	Identifier	delim		655069	0					
ANR	655137	AdditiveExpression	')' + verbatimDelimiter		655069	1		+			
ANR	655138	PrimaryExpression	')'		655069	0					
ANR	655139	Identifier	verbatimDelimiter		655069	1					
ANR	655140	IdentifierDeclStatement	int delimStart = charNum - delim . length ( ) ;	5857:3:170594:170635	655069	1	True				
ANR	655141	IdentifierDecl	delimStart = charNum - delim . length ( )		655069	0					
ANR	655142	IdentifierDeclType	int		655069	0					
ANR	655143	Identifier	delimStart		655069	1					
ANR	655144	AssignmentExpression	delimStart = charNum - delim . length ( )		655069	2		=			
ANR	655145	Identifier	delimStart		655069	0					
ANR	655146	AdditiveExpression	charNum - delim . length ( )		655069	1		-			
ANR	655147	Identifier	charNum		655069	0					
ANR	655148	CallExpression	delim . length ( )		655069	1					
ANR	655149	Callee	delim . length		655069	0					
ANR	655150	MemberAccess	delim . length		655069	0					
ANR	655151	Identifier	delim		655069	0					
ANR	655152	Identifier	length		655069	1					
ANR	655153	ArgumentList			655069	1					
ANR	655154	IfStatement	"if ( delimStart > 0 && currentLine . substr ( delimStart , delim . length ( ) ) == delim )"		655069	2					
ANR	655155	Condition	"delimStart > 0 && currentLine . substr ( delimStart , delim . length ( ) ) == delim"	5858:7:170644:170716	655069	0	True				
ANR	655156	AndExpression	"delimStart > 0 && currentLine . substr ( delimStart , delim . length ( ) ) == delim"		655069	0		&&			
ANR	655157	RelationalExpression	delimStart > 0		655069	0		>			
ANR	655158	Identifier	delimStart		655069	0					
ANR	655159	PrimaryExpression	0		655069	1					
ANR	655160	EqualityExpression	"currentLine . substr ( delimStart , delim . length ( ) ) == delim"		655069	1		==			
ANR	655161	CallExpression	"currentLine . substr ( delimStart , delim . length ( ) )"		655069	0					
ANR	655162	Callee	currentLine . substr		655069	0					
ANR	655163	MemberAccess	currentLine . substr		655069	0					
ANR	655164	Identifier	currentLine		655069	0					
ANR	655165	Identifier	substr		655069	1					
ANR	655166	ArgumentList	delimStart		655069	1					
ANR	655167	Argument	delimStart		655069	0					
ANR	655168	Identifier	delimStart		655069	0					
ANR	655169	Argument	delim . length ( )		655069	1					
ANR	655170	CallExpression	delim . length ( )		655069	0					
ANR	655171	Callee	delim . length		655069	0					
ANR	655172	MemberAccess	delim . length		655069	0					
ANR	655173	Identifier	delim		655069	0					
ANR	655174	Identifier	length		655069	1					
ANR	655175	ArgumentList			655069	1					
ANR	655176	Identifier	delim		655069	1					
ANR	655177	CompoundStatement		22:3:522:522	655069	1					
ANR	655178	ExpressionStatement	isInQuote = false	5860:4:170728:170745	655069	0	True				
ANR	655179	AssignmentExpression	isInQuote = false		655069	0		=			
ANR	655180	Identifier	isInQuote		655069	0					
ANR	655181	Identifier	false		655069	1					
ANR	655182	ExpressionStatement	isInVerbatimQuote = false	5861:4:170751:170776	655069	1	True				
ANR	655183	AssignmentExpression	isInVerbatimQuote = false		655069	0		=			
ANR	655184	Identifier	isInVerbatimQuote		655069	0					
ANR	655185	Identifier	false		655069	1					
ANR	655186	ElseStatement	else		655069	0					
ANR	655187	IfStatement	if ( isSharpStyle ( ) )		655069	0					
ANR	655188	Condition	isSharpStyle ( )	5864:11:170798:170811	655069	0	True				
ANR	655189	CallExpression	isSharpStyle ( )		655069	0					
ANR	655190	Callee	isSharpStyle		655069	0					
ANR	655191	Identifier	isSharpStyle		655069	0					
ANR	655192	ArgumentList			655069	1					
ANR	655193	CompoundStatement		28:2:616:616	655069	1					
ANR	655194	IfStatement	"if ( ( int ) currentLine . length ( ) > charNum + 1 && currentLine [ charNum + 1 ] == '""' )"		655069	0					
ANR	655195	Condition	"( int ) currentLine . length ( ) > charNum + 1 && currentLine [ charNum + 1 ] == '""'"	5866:7:170825:170910	655069	0	True				
ANR	655196	AndExpression	"( int ) currentLine . length ( ) > charNum + 1 && currentLine [ charNum + 1 ] == '""'"		655069	0		&&			
ANR	655197	RelationalExpression	( int ) currentLine . length ( ) > charNum + 1		655069	0		>			
ANR	655198	CastExpression	( int ) currentLine . length ( )		655069	0					
ANR	655199	CastTarget	int		655069	0					
ANR	655200	CallExpression	currentLine . length ( )		655069	1					
ANR	655201	Callee	currentLine . length		655069	0					
ANR	655202	MemberAccess	currentLine . length		655069	0					
ANR	655203	Identifier	currentLine		655069	0					
ANR	655204	Identifier	length		655069	1					
ANR	655205	ArgumentList			655069	1					
ANR	655206	AdditiveExpression	charNum + 1		655069	1		+			
ANR	655207	Identifier	charNum		655069	0					
ANR	655208	PrimaryExpression	1		655069	1					
ANR	655209	EqualityExpression	"currentLine [ charNum + 1 ] == '""'"		655069	1		==			
ANR	655210	ArrayIndexing	currentLine [ charNum + 1 ]		655069	0					
ANR	655211	Identifier	currentLine		655069	0					
ANR	655212	AdditiveExpression	charNum + 1		655069	1		+			
ANR	655213	Identifier	charNum		655069	0					
ANR	655214	PrimaryExpression	1		655069	1					
ANR	655215	PrimaryExpression	"'""'"		655069	1					
ANR	655216	CompoundStatement		31:3:746:746	655069	1					
ANR	655217	ExpressionStatement	"appendSequence ( ""\\""\\"""" )"	5869:4:170952:170974	655069	0	True				
ANR	655218	CallExpression	"appendSequence ( ""\\""\\"""" )"		655069	0					
ANR	655219	Callee	appendSequence		655069	0					
ANR	655220	Identifier	appendSequence		655069	0					
ANR	655221	ArgumentList	"""\\""\\"""""		655069	1					
ANR	655222	Argument	"""\\""\\"""""		655069	0					
ANR	655223	PrimaryExpression	"""\\""\\"""""		655069	0					
ANR	655224	ExpressionStatement	goForward ( 1 )	5870:4:170980:170992	655069	1	True				
ANR	655225	CallExpression	goForward ( 1 )		655069	0					
ANR	655226	Callee	goForward		655069	0					
ANR	655227	Identifier	goForward		655069	0					
ANR	655228	ArgumentList	1		655069	1					
ANR	655229	Argument	1		655069	0					
ANR	655230	PrimaryExpression	1		655069	0					
ANR	655231	ReturnStatement	return ;	5871:4:170998:171004	655069	2	True				
ANR	655232	ExpressionStatement	isInQuote = false	5873:3:171014:171031	655069	1	True				
ANR	655233	AssignmentExpression	isInQuote = false		655069	0		=			
ANR	655234	Identifier	isInQuote		655069	0					
ANR	655235	Identifier	false		655069	1					
ANR	655236	ExpressionStatement	isInVerbatimQuote = false	5874:3:171036:171061	655069	2	True				
ANR	655237	AssignmentExpression	isInVerbatimQuote = false		655069	0		=			
ANR	655238	Identifier	isInVerbatimQuote		655069	0					
ANR	655239	Identifier	false		655069	1					
ANR	655240	ElseStatement	else		655069	0					
ANR	655241	IfStatement	if ( quoteChar == currentChar )		655069	0					
ANR	655242	Condition	quoteChar == currentChar	5877:10:171080:171103	655069	0	True				
ANR	655243	EqualityExpression	quoteChar == currentChar		655069	0		==			
ANR	655244	Identifier	quoteChar		655069	0					
ANR	655245	Identifier	currentChar		655069	1					
ANR	655246	CompoundStatement		41:1:907:907	655069	1					
ANR	655247	ExpressionStatement	isInQuote = false	5879:2:171111:171128	655069	0	True				
ANR	655248	AssignmentExpression	isInQuote = false		655069	0		=			
ANR	655249	Identifier	isInQuote		655069	0					
ANR	655250	Identifier	false		655069	1					
ANR	655251	ExpressionStatement	appendCurrentChar ( )	5882:1:171135:171154	655069	2	True				
ANR	655252	CallExpression	appendCurrentChar ( )		655069	0					
ANR	655253	Callee	appendCurrentChar		655069	0					
ANR	655254	Identifier	appendCurrentChar		655069	0					
ANR	655255	ArgumentList			655069	1					
ANR	655256	IfStatement	if ( isInQuote && currentChar != '\\\\' )		655069	3					
ANR	655257	Condition	isInQuote && currentChar != '\\\\'	5886:5:171279:171310	655069	0	True				
ANR	655258	AndExpression	isInQuote && currentChar != '\\\\'		655069	0		&&			
ANR	655259	Identifier	isInQuote		655069	0					
ANR	655260	EqualityExpression	currentChar != '\\\\'		655069	1		!=			
ANR	655261	Identifier	currentChar		655069	0					
ANR	655262	PrimaryExpression	'\\\\'		655069	1					
ANR	655263	CompoundStatement		50:1:1114:1114	655069	1					
ANR	655264	WhileStatement	while ( charNum + 1 < ( int ) currentLine . length ( ) && currentLine [ charNum + 1 ] != quoteChar && currentLine [ charNum + 1 ] != '\\\\' )		655069	0					
ANR	655265	Condition	charNum + 1 < ( int ) currentLine . length ( ) && currentLine [ charNum + 1 ] != quoteChar && currentLine [ charNum + 1 ] != '\\\\'	5888:9:171325:171461	655069	0	True				
ANR	655266	AndExpression	charNum + 1 < ( int ) currentLine . length ( ) && currentLine [ charNum + 1 ] != quoteChar && currentLine [ charNum + 1 ] != '\\\\'		655069	0		&&			
ANR	655267	RelationalExpression	charNum + 1 < ( int ) currentLine . length ( )		655069	0		<			
ANR	655268	AdditiveExpression	charNum + 1		655069	0		+			
ANR	655269	Identifier	charNum		655069	0					
ANR	655270	PrimaryExpression	1		655069	1					
ANR	655271	CastExpression	( int ) currentLine . length ( )		655069	1					
ANR	655272	CastTarget	int		655069	0					
ANR	655273	CallExpression	currentLine . length ( )		655069	1					
ANR	655274	Callee	currentLine . length		655069	0					
ANR	655275	MemberAccess	currentLine . length		655069	0					
ANR	655276	Identifier	currentLine		655069	0					
ANR	655277	Identifier	length		655069	1					
ANR	655278	ArgumentList			655069	1					
ANR	655279	AndExpression	currentLine [ charNum + 1 ] != quoteChar && currentLine [ charNum + 1 ] != '\\\\'		655069	1		&&			
ANR	655280	EqualityExpression	currentLine [ charNum + 1 ] != quoteChar		655069	0		!=			
ANR	655281	ArrayIndexing	currentLine [ charNum + 1 ]		655069	0					
ANR	655282	Identifier	currentLine		655069	0					
ANR	655283	AdditiveExpression	charNum + 1		655069	1		+			
ANR	655284	Identifier	charNum		655069	0					
ANR	655285	PrimaryExpression	1		655069	1					
ANR	655286	Identifier	quoteChar		655069	1					
ANR	655287	EqualityExpression	currentLine [ charNum + 1 ] != '\\\\'		655069	1		!=			
ANR	655288	ArrayIndexing	currentLine [ charNum + 1 ]		655069	0					
ANR	655289	Identifier	currentLine		655069	0					
ANR	655290	AdditiveExpression	charNum + 1		655069	1		+			
ANR	655291	Identifier	charNum		655069	0					
ANR	655292	PrimaryExpression	1		655069	1					
ANR	655293	PrimaryExpression	'\\\\'		655069	1					
ANR	655294	CompoundStatement		54:2:1266:1266	655069	1					
ANR	655295	ExpressionStatement	currentChar = currentLine [ ++ charNum ]	5892:3:171471:171507	655069	0	True				
ANR	655296	AssignmentExpression	currentChar = currentLine [ ++ charNum ]		655069	0		=			
ANR	655297	Identifier	currentChar		655069	0					
ANR	655298	ArrayIndexing	currentLine [ ++ charNum ]		655069	1					
ANR	655299	Identifier	currentLine		655069	0					
ANR	655300	UnaryExpression	++ charNum		655069	1					
ANR	655301	IncDec	++		655069	0					
ANR	655302	Identifier	charNum		655069	1					
ANR	655303	ExpressionStatement	appendCurrentChar ( )	5893:3:171512:171531	655069	1	True				
ANR	655304	CallExpression	appendCurrentChar ( )		655069	0					
ANR	655305	Callee	appendCurrentChar		655069	0					
ANR	655306	Identifier	appendCurrentChar		655069	0					
ANR	655307	ArgumentList			655069	1					
ANR	655308	IfStatement	if ( charNum + 1 >= ( int ) currentLine . length ( ) && currentChar != '\\\\' && ! isInVerbatimQuote )		655069	4					
ANR	655309	Condition	charNum + 1 >= ( int ) currentLine . length ( ) && currentChar != '\\\\' && ! isInVerbatimQuote	5896:5:171545:171648	655069	0	True				
ANR	655310	AndExpression	charNum + 1 >= ( int ) currentLine . length ( ) && currentChar != '\\\\' && ! isInVerbatimQuote		655069	0		&&			
ANR	655311	RelationalExpression	charNum + 1 >= ( int ) currentLine . length ( )		655069	0		>=			
ANR	655312	AdditiveExpression	charNum + 1		655069	0		+			
ANR	655313	Identifier	charNum		655069	0					
ANR	655314	PrimaryExpression	1		655069	1					
ANR	655315	CastExpression	( int ) currentLine . length ( )		655069	1					
ANR	655316	CastTarget	int		655069	0					
ANR	655317	CallExpression	currentLine . length ( )		655069	1					
ANR	655318	Callee	currentLine . length		655069	0					
ANR	655319	MemberAccess	currentLine . length		655069	0					
ANR	655320	Identifier	currentLine		655069	0					
ANR	655321	Identifier	length		655069	1					
ANR	655322	ArgumentList			655069	1					
ANR	655323	AndExpression	currentChar != '\\\\' && ! isInVerbatimQuote		655069	1		&&			
ANR	655324	EqualityExpression	currentChar != '\\\\'		655069	0		!=			
ANR	655325	Identifier	currentChar		655069	0					
ANR	655326	PrimaryExpression	'\\\\'		655069	1					
ANR	655327	UnaryOperationExpression	! isInVerbatimQuote		655069	1					
ANR	655328	UnaryOperator	!		655069	0					
ANR	655329	Identifier	isInVerbatimQuote		655069	1					
ANR	655330	ExpressionStatement	isInQuote = false	5899:2:171653:171670	655069	1	True				
ANR	655331	AssignmentExpression	isInQuote = false		655069	0		=			
ANR	655332	Identifier	isInQuote		655069	0					
ANR	655333	Identifier	false		655069	1					
ANR	655334	ReturnType	void		655069	1					
ANR	655335	Identifier	ASFormatter :: formatQuoteBody		655069	2					
ANR	655336	ParameterList			655069	3					
ANR	655337	CFGEntryNode	ENTRY		655069		True				
ANR	655338	CFGExitNode	EXIT		655069		True				
ANR	655339	Symbol	currentChar		655069						
ANR	655340	Symbol	quoteChar		655069						
ANR	655341	Symbol	peekNextChar		655069						
ANR	655342	Symbol	isSharpStyle		655069						
ANR	655343	Symbol	isInVerbatimQuote		655069						
ANR	655344	Symbol	false		655069						
ANR	655345	Symbol	isSpecialChar		655069						
ANR	655346	Symbol	isInQuote		655069						
ANR	655347	Symbol	* currentLine		655069						
ANR	655348	Symbol	currentLine . length		655069						
ANR	655349	Symbol	delimStart		655069						
ANR	655350	Symbol	* charNum		655069						
ANR	655351	Symbol	true		655069						
ANR	655352	Symbol	currentLine . substr		655069						
ANR	655353	Symbol	delim . length		655069						
ANR	655354	Symbol	isCStyle		655069						
ANR	655355	Symbol	charNum		655069						
ANR	655356	Symbol	verbatimDelimiter		655069						
ANR	655357	Symbol	haveLineContinuationChar		655069						
ANR	655358	Symbol	delim		655069						
ANR	655359	Symbol	currentLine		655069						
ANR	655360	Function	ASFormatter :: formatQuoteOpener	5907:0:171921:173159							
ANR	655361	FunctionDef	ASFormatter :: formatQuoteOpener ()		655360	0					
ANR	655362	CompoundStatement		5908:0:171959:173159	655360	0					
ANR	655363	ExpressionStatement	"assert ( currentChar == '""' || ( currentChar == '\\'' && ! isDigitSeparator ( currentLine , charNum ) ) )"	5909:1:171962:172064	655360	0	True				
ANR	655364	CallExpression	"assert ( currentChar == '""' || ( currentChar == '\\'' && ! isDigitSeparator ( currentLine , charNum ) ) )"		655360	0					
ANR	655365	Callee	assert		655360	0					
ANR	655366	Identifier	assert		655360	0					
ANR	655367	ArgumentList	"currentChar == '""' || ( currentChar == '\\'' && ! isDigitSeparator ( currentLine , charNum ) )"		655360	1					
ANR	655368	Argument	"currentChar == '""' || ( currentChar == '\\'' && ! isDigitSeparator ( currentLine , charNum ) )"		655360	0					
ANR	655369	OrExpression	"currentChar == '""' || ( currentChar == '\\'' && ! isDigitSeparator ( currentLine , charNum ) )"		655360	0		||			
ANR	655370	EqualityExpression	"currentChar == '""'"		655360	0		==			
ANR	655371	Identifier	currentChar		655360	0					
ANR	655372	PrimaryExpression	"'""'"		655360	1					
ANR	655373	AndExpression	"currentChar == '\\'' && ! isDigitSeparator ( currentLine , charNum )"		655360	1		&&			
ANR	655374	EqualityExpression	currentChar == '\\''		655360	0		==			
ANR	655375	Identifier	currentChar		655360	0					
ANR	655376	PrimaryExpression	'\\''		655360	1					
ANR	655377	UnaryOperationExpression	"! isDigitSeparator ( currentLine , charNum )"		655360	1					
ANR	655378	UnaryOperator	!		655360	0					
ANR	655379	CallExpression	"isDigitSeparator ( currentLine , charNum )"		655360	1					
ANR	655380	Callee	isDigitSeparator		655360	0					
ANR	655381	Identifier	isDigitSeparator		655360	0					
ANR	655382	ArgumentList	currentLine		655360	1					
ANR	655383	Argument	currentLine		655360	0					
ANR	655384	Identifier	currentLine		655360	0					
ANR	655385	Argument	charNum		655360	1					
ANR	655386	Identifier	charNum		655360	0					
ANR	655387	ExpressionStatement	isInQuote = true	5912:1:172068:172084	655360	1	True				
ANR	655388	AssignmentExpression	isInQuote = true		655360	0		=			
ANR	655389	Identifier	isInQuote		655360	0					
ANR	655390	Identifier	true		655360	1					
ANR	655391	ExpressionStatement	quoteChar = currentChar	5913:1:172087:172110	655360	2	True				
ANR	655392	AssignmentExpression	quoteChar = currentChar		655360	0		=			
ANR	655393	Identifier	quoteChar		655360	0					
ANR	655394	Identifier	currentChar		655360	1					
ANR	655395	IfStatement	if ( isCStyle ( ) && previousChar == 'R' )		655360	3					
ANR	655396	Condition	isCStyle ( ) && previousChar == 'R'	5914:5:172117:172149	655360	0	True				
ANR	655397	AndExpression	isCStyle ( ) && previousChar == 'R'		655360	0		&&			
ANR	655398	CallExpression	isCStyle ( )		655360	0					
ANR	655399	Callee	isCStyle		655360	0					
ANR	655400	Identifier	isCStyle		655360	0					
ANR	655401	ArgumentList			655360	1					
ANR	655402	EqualityExpression	previousChar == 'R'		655360	1		==			
ANR	655403	Identifier	previousChar		655360	0					
ANR	655404	PrimaryExpression	'R'		655360	1					
ANR	655405	CompoundStatement		9:2:197:242	655360	1					
ANR	655406	IdentifierDeclStatement	"int parenPos = currentLine . find ( '(' , charNum ) ;"	5916:2:172157:172202	655360	0	True				
ANR	655407	IdentifierDecl	"parenPos = currentLine . find ( '(' , charNum )"		655360	0					
ANR	655408	IdentifierDeclType	int		655360	0					
ANR	655409	Identifier	parenPos		655360	1					
ANR	655410	AssignmentExpression	"parenPos = currentLine . find ( '(' , charNum )"		655360	2		=			
ANR	655411	Identifier	parenPos		655360	0					
ANR	655412	CallExpression	"currentLine . find ( '(' , charNum )"		655360	1					
ANR	655413	Callee	currentLine . find		655360	0					
ANR	655414	MemberAccess	currentLine . find		655360	0					
ANR	655415	Identifier	currentLine		655360	0					
ANR	655416	Identifier	find		655360	1					
ANR	655417	ArgumentList	'('		655360	1					
ANR	655418	Argument	'('		655360	0					
ANR	655419	PrimaryExpression	'('		655360	0					
ANR	655420	Argument	charNum		655360	1					
ANR	655421	Identifier	charNum		655360	0					
ANR	655422	IfStatement	if ( parenPos != - 1 )		655360	1					
ANR	655423	Condition	parenPos != - 1	5917:6:172210:172223	655360	0	True				
ANR	655424	EqualityExpression	parenPos != - 1		655360	0		!=			
ANR	655425	Identifier	parenPos		655360	0					
ANR	655426	UnaryOperationExpression	- 1		655360	1					
ANR	655427	UnaryOperator	-		655360	0					
ANR	655428	PrimaryExpression	1		655360	1					
ANR	655429	CompoundStatement		11:2:268:268	655360	1					
ANR	655430	ExpressionStatement	isInVerbatimQuote = true	5919:3:172233:172257	655360	0	True				
ANR	655431	AssignmentExpression	isInVerbatimQuote = true		655360	0		=			
ANR	655432	Identifier	isInVerbatimQuote		655360	0					
ANR	655433	Identifier	true		655360	1					
ANR	655434	ExpressionStatement	"verbatimDelimiter = currentLine . substr ( charNum + 1 , parenPos - charNum - 1 )"	5920:3:172262:172337	655360	1	True				
ANR	655435	AssignmentExpression	"verbatimDelimiter = currentLine . substr ( charNum + 1 , parenPos - charNum - 1 )"		655360	0		=			
ANR	655436	Identifier	verbatimDelimiter		655360	0					
ANR	655437	CallExpression	"currentLine . substr ( charNum + 1 , parenPos - charNum - 1 )"		655360	1					
ANR	655438	Callee	currentLine . substr		655360	0					
ANR	655439	MemberAccess	currentLine . substr		655360	0					
ANR	655440	Identifier	currentLine		655360	0					
ANR	655441	Identifier	substr		655360	1					
ANR	655442	ArgumentList	charNum + 1		655360	1					
ANR	655443	Argument	charNum + 1		655360	0					
ANR	655444	AdditiveExpression	charNum + 1		655360	0		+			
ANR	655445	Identifier	charNum		655360	0					
ANR	655446	PrimaryExpression	1		655360	1					
ANR	655447	Argument	parenPos - charNum - 1		655360	1					
ANR	655448	AdditiveExpression	parenPos - charNum - 1		655360	0		-			
ANR	655449	Identifier	parenPos		655360	0					
ANR	655450	AdditiveExpression	charNum - 1		655360	1		-			
ANR	655451	Identifier	charNum		655360	0					
ANR	655452	PrimaryExpression	1		655360	1					
ANR	655453	ElseStatement	else		655360	0					
ANR	655454	IfStatement	if ( isSharpStyle ( ) && previousChar == '@' )		655360	0					
ANR	655455	Condition	isSharpStyle ( ) && previousChar == '@'	5923:10:172356:172392	655360	0	True				
ANR	655456	AndExpression	isSharpStyle ( ) && previousChar == '@'		655360	0		&&			
ANR	655457	CallExpression	isSharpStyle ( )		655360	0					
ANR	655458	Callee	isSharpStyle		655360	0					
ANR	655459	Identifier	isSharpStyle		655360	0					
ANR	655460	ArgumentList			655360	1					
ANR	655461	EqualityExpression	previousChar == '@'		655360	1		==			
ANR	655462	Identifier	previousChar		655360	0					
ANR	655463	PrimaryExpression	'@'		655360	1					
ANR	655464	ExpressionStatement	isInVerbatimQuote = true	5924:2:172397:172421	655360	1	True				
ANR	655465	AssignmentExpression	isInVerbatimQuote = true		655360	0		=			
ANR	655466	Identifier	isInVerbatimQuote		655360	0					
ANR	655467	Identifier	true		655360	1					
ANR	655468	IfStatement	"if ( previousCommandChar == '{' && ! isImmediatelyPostComment && ! isImmediatelyPostLineComment && isNonInStatementArray && ! isBraceType ( braceTypeStack -> back ( ) , SINGLE_LINE_TYPE ) && ! isWhiteSpace ( peekNextChar ( ) ) )"		655360	4					
ANR	655469	Condition	"previousCommandChar == '{' && ! isImmediatelyPostComment && ! isImmediatelyPostLineComment && isNonInStatementArray && ! isBraceType ( braceTypeStack -> back ( ) , SINGLE_LINE_TYPE ) && ! isWhiteSpace ( peekNextChar ( ) )"	5927:5:172471:172719	655360	0	True				
ANR	655470	AndExpression	"previousCommandChar == '{' && ! isImmediatelyPostComment && ! isImmediatelyPostLineComment && isNonInStatementArray && ! isBraceType ( braceTypeStack -> back ( ) , SINGLE_LINE_TYPE ) && ! isWhiteSpace ( peekNextChar ( ) )"		655360	0		&&			
ANR	655471	EqualityExpression	previousCommandChar == '{'		655360	0		==			
ANR	655472	Identifier	previousCommandChar		655360	0					
ANR	655473	PrimaryExpression	'{'		655360	1					
ANR	655474	AndExpression	"! isImmediatelyPostComment && ! isImmediatelyPostLineComment && isNonInStatementArray && ! isBraceType ( braceTypeStack -> back ( ) , SINGLE_LINE_TYPE ) && ! isWhiteSpace ( peekNextChar ( ) )"		655360	1		&&			
ANR	655475	UnaryOperationExpression	! isImmediatelyPostComment		655360	0					
ANR	655476	UnaryOperator	!		655360	0					
ANR	655477	Identifier	isImmediatelyPostComment		655360	1					
ANR	655478	AndExpression	"! isImmediatelyPostLineComment && isNonInStatementArray && ! isBraceType ( braceTypeStack -> back ( ) , SINGLE_LINE_TYPE ) && ! isWhiteSpace ( peekNextChar ( ) )"		655360	1		&&			
ANR	655479	UnaryOperationExpression	! isImmediatelyPostLineComment		655360	0					
ANR	655480	UnaryOperator	!		655360	0					
ANR	655481	Identifier	isImmediatelyPostLineComment		655360	1					
ANR	655482	AndExpression	"isNonInStatementArray && ! isBraceType ( braceTypeStack -> back ( ) , SINGLE_LINE_TYPE ) && ! isWhiteSpace ( peekNextChar ( ) )"		655360	1		&&			
ANR	655483	Identifier	isNonInStatementArray		655360	0					
ANR	655484	AndExpression	"! isBraceType ( braceTypeStack -> back ( ) , SINGLE_LINE_TYPE ) && ! isWhiteSpace ( peekNextChar ( ) )"		655360	1		&&			
ANR	655485	UnaryOperationExpression	"! isBraceType ( braceTypeStack -> back ( ) , SINGLE_LINE_TYPE )"		655360	0					
ANR	655486	UnaryOperator	!		655360	0					
ANR	655487	CallExpression	"isBraceType ( braceTypeStack -> back ( ) , SINGLE_LINE_TYPE )"		655360	1					
ANR	655488	Callee	isBraceType		655360	0					
ANR	655489	Identifier	isBraceType		655360	0					
ANR	655490	ArgumentList	braceTypeStack -> back ( )		655360	1					
ANR	655491	Argument	braceTypeStack -> back ( )		655360	0					
ANR	655492	CallExpression	braceTypeStack -> back ( )		655360	0					
ANR	655493	Callee	braceTypeStack -> back		655360	0					
ANR	655494	PtrMemberAccess	braceTypeStack -> back		655360	0					
ANR	655495	Identifier	braceTypeStack		655360	0					
ANR	655496	Identifier	back		655360	1					
ANR	655497	ArgumentList			655360	1					
ANR	655498	Argument	SINGLE_LINE_TYPE		655360	1					
ANR	655499	Identifier	SINGLE_LINE_TYPE		655360	0					
ANR	655500	UnaryOperationExpression	! isWhiteSpace ( peekNextChar ( ) )		655360	1					
ANR	655501	UnaryOperator	!		655360	0					
ANR	655502	CallExpression	isWhiteSpace ( peekNextChar ( ) )		655360	1					
ANR	655503	Callee	isWhiteSpace		655360	0					
ANR	655504	Identifier	isWhiteSpace		655360	0					
ANR	655505	ArgumentList	peekNextChar ( )		655360	1					
ANR	655506	Argument	peekNextChar ( )		655360	0					
ANR	655507	CallExpression	peekNextChar ( )		655360	0					
ANR	655508	Callee	peekNextChar		655360	0					
ANR	655509	Identifier	peekNextChar		655360	0					
ANR	655510	ArgumentList			655360	1					
ANR	655511	CompoundStatement		26:1:763:763	655360	1					
ANR	655512	IfStatement	if ( braceFormatMode == NONE_MODE )		655360	0					
ANR	655513	Condition	braceFormatMode == NONE_MODE	5934:6:172731:172758	655360	0	True				
ANR	655514	EqualityExpression	braceFormatMode == NONE_MODE		655360	0		==			
ANR	655515	Identifier	braceFormatMode		655360	0					
ANR	655516	Identifier	NONE_MODE		655360	1					
ANR	655517	CompoundStatement		28:2:803:803	655360	1					
ANR	655518	IfStatement	if ( currentLineBeginsWithBrace )		655360	0					
ANR	655519	Condition	currentLineBeginsWithBrace	5936:7:172772:172797	655360	0	True				
ANR	655520	Identifier	currentLineBeginsWithBrace		655360	0					
ANR	655521	ExpressionStatement	formatRunIn ( )	5937:4:172804:172817	655360	1	True				
ANR	655522	CallExpression	formatRunIn ( )		655360	0					
ANR	655523	Callee	formatRunIn		655360	0					
ANR	655524	Identifier	formatRunIn		655360	0					
ANR	655525	ArgumentList			655360	1					
ANR	655526	ElseStatement	else		655360	0					
ANR	655527	IfStatement	if ( braceFormatMode == RUN_IN_MODE )		655360	0					
ANR	655528	Condition	braceFormatMode == RUN_IN_MODE	5939:11:172834:172863	655360	0	True				
ANR	655529	EqualityExpression	braceFormatMode == RUN_IN_MODE		655360	0		==			
ANR	655530	Identifier	braceFormatMode		655360	0					
ANR	655531	Identifier	RUN_IN_MODE		655360	1					
ANR	655532	CompoundStatement		33:2:908:908	655360	1					
ANR	655533	ExpressionStatement	formatRunIn ( )	5941:3:172873:172886	655360	0	True				
ANR	655534	CallExpression	formatRunIn ( )		655360	0					
ANR	655535	Callee	formatRunIn		655360	0					
ANR	655536	Identifier	formatRunIn		655360	0					
ANR	655537	ArgumentList			655360	1					
ANR	655538	ElseStatement	else		655360	0					
ANR	655539	IfStatement	if ( braceFormatMode == BREAK_MODE )		655360	0					
ANR	655540	Condition	braceFormatMode == BREAK_MODE	5943:11:172903:172931	655360	0	True				
ANR	655541	EqualityExpression	braceFormatMode == BREAK_MODE		655360	0		==			
ANR	655542	Identifier	braceFormatMode		655360	0					
ANR	655543	Identifier	BREAK_MODE		655360	1					
ANR	655544	CompoundStatement		37:2:976:976	655360	1					
ANR	655545	IfStatement	if ( formattedLine . length ( ) > 0 && formattedLine [ 0 ] == '{' )		655360	0					
ANR	655546	Condition	formattedLine . length ( ) > 0 && formattedLine [ 0 ] == '{'	5945:7:172945:172997	655360	0	True				
ANR	655547	AndExpression	formattedLine . length ( ) > 0 && formattedLine [ 0 ] == '{'		655360	0		&&			
ANR	655548	RelationalExpression	formattedLine . length ( ) > 0		655360	0		>			
ANR	655549	CallExpression	formattedLine . length ( )		655360	0					
ANR	655550	Callee	formattedLine . length		655360	0					
ANR	655551	MemberAccess	formattedLine . length		655360	0					
ANR	655552	Identifier	formattedLine		655360	0					
ANR	655553	Identifier	length		655360	1					
ANR	655554	ArgumentList			655360	1					
ANR	655555	PrimaryExpression	0		655360	1					
ANR	655556	EqualityExpression	formattedLine [ 0 ] == '{'		655360	1		==			
ANR	655557	ArrayIndexing	formattedLine [ 0 ]		655360	0					
ANR	655558	Identifier	formattedLine		655360	0					
ANR	655559	PrimaryExpression	0		655360	1					
ANR	655560	PrimaryExpression	'{'		655360	1					
ANR	655561	ExpressionStatement	isInLineBreak = true	5946:4:173004:173024	655360	1	True				
ANR	655562	AssignmentExpression	isInLineBreak = true		655360	0		=			
ANR	655563	Identifier	isInLineBreak		655360	0					
ANR	655564	Identifier	true		655360	1					
ANR	655565	ElseStatement	else		655360	0					
ANR	655566	CompoundStatement		42:2:1079:1079	655360	0					
ANR	655567	IfStatement	if ( currentLineBeginsWithBrace )		655360	0					
ANR	655568	Condition	currentLineBeginsWithBrace	5950:7:173048:173073	655360	0	True				
ANR	655569	Identifier	currentLineBeginsWithBrace		655360	0					
ANR	655570	ExpressionStatement	isInLineBreak = true	5951:4:173080:173100	655360	1	True				
ANR	655571	AssignmentExpression	isInLineBreak = true		655360	0		=			
ANR	655572	Identifier	isInLineBreak		655360	0					
ANR	655573	Identifier	true		655360	1					
ANR	655574	ExpressionStatement	previousCommandChar = ' '	5954:1:173110:173135	655360	5	True				
ANR	655575	AssignmentExpression	previousCommandChar = ' '		655360	0		=			
ANR	655576	Identifier	previousCommandChar		655360	0					
ANR	655577	PrimaryExpression	' '		655360	1					
ANR	655578	ExpressionStatement	appendCurrentChar ( )	5955:1:173138:173157	655360	6	True				
ANR	655579	CallExpression	appendCurrentChar ( )		655360	0					
ANR	655580	Callee	appendCurrentChar		655360	0					
ANR	655581	Identifier	appendCurrentChar		655360	0					
ANR	655582	ArgumentList			655360	1					
ANR	655583	ReturnType	void		655360	1					
ANR	655584	Identifier	ASFormatter :: formatQuoteOpener		655360	2					
ANR	655585	ParameterList			655360	3					
ANR	655586	CFGEntryNode	ENTRY		655360		True				
ANR	655587	CFGExitNode	EXIT		655360		True				
ANR	655588	Symbol	* formattedLine		655360						
ANR	655589	Symbol	braceTypeStack		655360						
ANR	655590	Symbol	isSharpStyle		655360						
ANR	655591	Symbol	RUN_IN_MODE		655360						
ANR	655592	Symbol	isInVerbatimQuote		655360						
ANR	655593	Symbol	isInQuote		655360						
ANR	655594	Symbol	isWhiteSpace		655360						
ANR	655595	Symbol	isImmediatelyPostComment		655360						
ANR	655596	Symbol	NONE_MODE		655360						
ANR	655597	Symbol	isDigitSeparator		655360						
ANR	655598	Symbol	SINGLE_LINE_TYPE		655360						
ANR	655599	Symbol	BREAK_MODE		655360						
ANR	655600	Symbol	currentLine . substr		655360						
ANR	655601	Symbol	isBraceType		655360						
ANR	655602	Symbol	charNum		655360						
ANR	655603	Symbol	verbatimDelimiter		655360						
ANR	655604	Symbol	isNonInStatementArray		655360						
ANR	655605	Symbol	currentLine		655360						
ANR	655606	Symbol	currentChar		655360						
ANR	655607	Symbol	quoteChar		655360						
ANR	655608	Symbol	currentLine . find		655360						
ANR	655609	Symbol	parenPos		655360						
ANR	655610	Symbol	currentLineBeginsWithBrace		655360						
ANR	655611	Symbol	peekNextChar		655360						
ANR	655612	Symbol	* braceTypeStack		655360						
ANR	655613	Symbol	isInLineBreak		655360						
ANR	655614	Symbol	previousCommandChar		655360						
ANR	655615	Symbol	braceTypeStack -> back		655360						
ANR	655616	Symbol	formattedLine		655360						
ANR	655617	Symbol	previousChar		655360						
ANR	655618	Symbol	formattedLine . length		655360						
ANR	655619	Symbol	true		655360						
ANR	655620	Symbol	isImmediatelyPostLineComment		655360						
ANR	655621	Symbol	isCStyle		655360						
ANR	655622	Symbol	braceFormatMode		655360						
ANR	655623	Function	ASFormatter :: getNextLineCommentAdjustment	5963:0:173357:173681							
ANR	655624	FunctionDef	ASFormatter :: getNextLineCommentAdjustment ()		655623	0					
ANR	655625	CompoundStatement		5964:0:173405:173681	655623	0					
ANR	655626	ExpressionStatement	assert ( foundClosingHeader && previousNonWSChar == '}' )	5965:1:173408:173462	655623	0	True				
ANR	655627	CallExpression	assert ( foundClosingHeader && previousNonWSChar == '}' )		655623	0					
ANR	655628	Callee	assert		655623	0					
ANR	655629	Identifier	assert		655623	0					
ANR	655630	ArgumentList	foundClosingHeader && previousNonWSChar == '}'		655623	1					
ANR	655631	Argument	foundClosingHeader && previousNonWSChar == '}'		655623	0					
ANR	655632	AndExpression	foundClosingHeader && previousNonWSChar == '}'		655623	0		&&			
ANR	655633	Identifier	foundClosingHeader		655623	0					
ANR	655634	EqualityExpression	previousNonWSChar == '}'		655623	1		==			
ANR	655635	Identifier	previousNonWSChar		655623	0					
ANR	655636	PrimaryExpression	'}'		655623	1					
ANR	655637	IfStatement	if ( charNum < 1 )		655623	1					
ANR	655638	Condition	charNum < 1	5966:5:173469:173479	655623	0	True				
ANR	655639	RelationalExpression	charNum < 1		655623	0		<			
ANR	655640	Identifier	charNum		655623	0					
ANR	655641	PrimaryExpression	1		655623	1					
ANR	655642	ReturnStatement	return 0 ;	5967:2:173511:173519	655623	1	True				
ANR	655643	PrimaryExpression	0		655623	0					
ANR	655644	IdentifierDeclStatement	"size_t lastBrace = currentLine . rfind ( '}' , charNum - 1 ) ;"	5968:1:173522:173576	655623	2	True				
ANR	655645	IdentifierDecl	"lastBrace = currentLine . rfind ( '}' , charNum - 1 )"		655623	0					
ANR	655646	IdentifierDeclType	size_t		655623	0					
ANR	655647	Identifier	lastBrace		655623	1					
ANR	655648	AssignmentExpression	"lastBrace = currentLine . rfind ( '}' , charNum - 1 )"		655623	2		=			
ANR	655649	Identifier	lastBrace		655623	0					
ANR	655650	CallExpression	"currentLine . rfind ( '}' , charNum - 1 )"		655623	1					
ANR	655651	Callee	currentLine . rfind		655623	0					
ANR	655652	MemberAccess	currentLine . rfind		655623	0					
ANR	655653	Identifier	currentLine		655623	0					
ANR	655654	Identifier	rfind		655623	1					
ANR	655655	ArgumentList	'}'		655623	1					
ANR	655656	Argument	'}'		655623	0					
ANR	655657	PrimaryExpression	'}'		655623	0					
ANR	655658	Argument	charNum - 1		655623	1					
ANR	655659	AdditiveExpression	charNum - 1		655623	0		-			
ANR	655660	Identifier	charNum		655623	0					
ANR	655661	PrimaryExpression	1		655623	1					
ANR	655662	IfStatement	if ( lastBrace != string :: npos )		655623	3					
ANR	655663	Condition	lastBrace != string :: npos	5969:5:173583:173607	655623	0	True				
ANR	655664	EqualityExpression	lastBrace != string :: npos		655623	0		!=			
ANR	655665	Identifier	lastBrace		655623	0					
ANR	655666	Identifier	string :: npos		655623	1					
ANR	655667	ReturnStatement	return ( lastBrace - charNum ) ;	5970:2:173612:173640	655623	1	True				
ANR	655668	AdditiveExpression	lastBrace - charNum		655623	0		-			
ANR	655669	Identifier	lastBrace		655623	0					
ANR	655670	Identifier	charNum		655623	1					
ANR	655671	ReturnStatement	return 0 ;	5971:1:173671:173679	655623	4	True				
ANR	655672	PrimaryExpression	0		655623	0					
ANR	655673	ReturnType	int		655623	1					
ANR	655674	Identifier	ASFormatter :: getNextLineCommentAdjustment		655623	2					
ANR	655675	ParameterList			655623	3					
ANR	655676	CFGEntryNode	ENTRY		655623		True				
ANR	655677	CFGExitNode	EXIT		655623		True				
ANR	655678	Symbol	previousNonWSChar		655623						
ANR	655679	Symbol	currentLine . rfind		655623						
ANR	655680	Symbol	string :: npos		655623						
ANR	655681	Symbol	lastBrace		655623						
ANR	655682	Symbol	charNum		655623						
ANR	655683	Symbol	foundClosingHeader		655623						
ANR	655684	Symbol	currentLine		655623						
ANR	655685	Function	ASFormatter :: getLineEndFormat	5975:0:173710:173781							
ANR	655686	FunctionDef	ASFormatter :: getLineEndFormat ()		655685	0					
ANR	655687	CompoundStatement		5976:0:173762:173781	655685	0					
ANR	655688	ReturnStatement	return lineEnd ;	5977:1:173765:173779	655685	0	True				
ANR	655689	Identifier	lineEnd		655685	0					
ANR	655690	ReturnType	LineEndFormat		655685	1					
ANR	655691	Identifier	ASFormatter :: getLineEndFormat		655685	2					
ANR	655692	ParameterList			655685	3					
ANR	655693	CFGEntryNode	ENTRY		655685		True				
ANR	655694	CFGExitNode	EXIT		655685		True				
ANR	655695	Symbol	lineEnd		655685						
ANR	655696	Function	ASFormatter :: getCurrentLineCommentAdjustment	5987:0:174081:174333							
ANR	655697	FunctionDef	ASFormatter :: getCurrentLineCommentAdjustment ()		655696	0					
ANR	655698	CompoundStatement		5988:0:174132:174333	655696	0					
ANR	655699	ExpressionStatement	assert ( foundClosingHeader && previousNonWSChar == '}' )	5989:1:174135:174189	655696	0	True				
ANR	655700	CallExpression	assert ( foundClosingHeader && previousNonWSChar == '}' )		655696	0					
ANR	655701	Callee	assert		655696	0					
ANR	655702	Identifier	assert		655696	0					
ANR	655703	ArgumentList	foundClosingHeader && previousNonWSChar == '}'		655696	1					
ANR	655704	Argument	foundClosingHeader && previousNonWSChar == '}'		655696	0					
ANR	655705	AndExpression	foundClosingHeader && previousNonWSChar == '}'		655696	0		&&			
ANR	655706	Identifier	foundClosingHeader		655696	0					
ANR	655707	EqualityExpression	previousNonWSChar == '}'		655696	1		==			
ANR	655708	Identifier	previousNonWSChar		655696	0					
ANR	655709	PrimaryExpression	'}'		655696	1					
ANR	655710	IfStatement	if ( charNum < 1 )		655696	1					
ANR	655711	Condition	charNum < 1	5990:5:174196:174206	655696	0	True				
ANR	655712	RelationalExpression	charNum < 1		655696	0		<			
ANR	655713	Identifier	charNum		655696	0					
ANR	655714	PrimaryExpression	1		655696	1					
ANR	655715	ReturnStatement	return 2 ;	5991:2:174211:174219	655696	1	True				
ANR	655716	PrimaryExpression	2		655696	0					
ANR	655717	IdentifierDeclStatement	"size_t lastBrace = currentLine . rfind ( '}' , charNum - 1 ) ;"	5992:1:174222:174276	655696	2	True				
ANR	655718	IdentifierDecl	"lastBrace = currentLine . rfind ( '}' , charNum - 1 )"		655696	0					
ANR	655719	IdentifierDeclType	size_t		655696	0					
ANR	655720	Identifier	lastBrace		655696	1					
ANR	655721	AssignmentExpression	"lastBrace = currentLine . rfind ( '}' , charNum - 1 )"		655696	2		=			
ANR	655722	Identifier	lastBrace		655696	0					
ANR	655723	CallExpression	"currentLine . rfind ( '}' , charNum - 1 )"		655696	1					
ANR	655724	Callee	currentLine . rfind		655696	0					
ANR	655725	MemberAccess	currentLine . rfind		655696	0					
ANR	655726	Identifier	currentLine		655696	0					
ANR	655727	Identifier	rfind		655696	1					
ANR	655728	ArgumentList	'}'		655696	1					
ANR	655729	Argument	'}'		655696	0					
ANR	655730	PrimaryExpression	'}'		655696	0					
ANR	655731	Argument	charNum - 1		655696	1					
ANR	655732	AdditiveExpression	charNum - 1		655696	0		-			
ANR	655733	Identifier	charNum		655696	0					
ANR	655734	PrimaryExpression	1		655696	1					
ANR	655735	IfStatement	if ( lastBrace == string :: npos )		655696	3					
ANR	655736	Condition	lastBrace == string :: npos	5993:5:174283:174307	655696	0	True				
ANR	655737	EqualityExpression	lastBrace == string :: npos		655696	0		==			
ANR	655738	Identifier	lastBrace		655696	0					
ANR	655739	Identifier	string :: npos		655696	1					
ANR	655740	ReturnStatement	return 2 ;	5994:2:174312:174320	655696	1	True				
ANR	655741	PrimaryExpression	2		655696	0					
ANR	655742	ReturnStatement	return 0 ;	5995:1:174323:174331	655696	4	True				
ANR	655743	PrimaryExpression	0		655696	0					
ANR	655744	ReturnType	int		655696	1					
ANR	655745	Identifier	ASFormatter :: getCurrentLineCommentAdjustment		655696	2					
ANR	655746	ParameterList			655696	3					
ANR	655747	CFGEntryNode	ENTRY		655696		True				
ANR	655748	CFGExitNode	EXIT		655696		True				
ANR	655749	Symbol	previousNonWSChar		655696						
ANR	655750	Symbol	currentLine . rfind		655696						
ANR	655751	Symbol	string :: npos		655696						
ANR	655752	Symbol	lastBrace		655696						
ANR	655753	Symbol	charNum		655696						
ANR	655754	Symbol	foundClosingHeader		655696						
ANR	655755	Symbol	currentLine		655696						
ANR	655756	Function	ASFormatter :: getPreviousWord	6004:0:174510:175030							
ANR	655757	FunctionDef	"ASFormatter :: getPreviousWord (const string & line , int currPos)"		655756	0					
ANR	655758	CompoundStatement		6005:0:174585:175030	655756	0					
ANR	655759	IfStatement	if ( currPos == 0 )		655756	0					
ANR	655760	Condition	currPos == 0	6007:5:174638:174649	655756	0	True				
ANR	655761	EqualityExpression	currPos == 0		655756	0		==			
ANR	655762	Identifier	currPos		655756	0					
ANR	655763	PrimaryExpression	0		655756	1					
ANR	655764	ReturnStatement	return string ( ) ;	6008:2:174654:174669	655756	1	True				
ANR	655765	CallExpression	string ( )		655756	0					
ANR	655766	Callee	string		655756	0					
ANR	655767	Identifier	string		655756	0					
ANR	655768	ArgumentList			655756	1					
ANR	655769	IdentifierDeclStatement	"size_t end = line . find_last_not_of ( "" \\t"" , currPos - 1 ) ;"	6010:1:174673:174727	655756	1	True				
ANR	655770	IdentifierDecl	"end = line . find_last_not_of ( "" \\t"" , currPos - 1 )"		655756	0					
ANR	655771	IdentifierDeclType	size_t		655756	0					
ANR	655772	Identifier	end		655756	1					
ANR	655773	AssignmentExpression	"end = line . find_last_not_of ( "" \\t"" , currPos - 1 )"		655756	2		=			
ANR	655774	Identifier	end		655756	0					
ANR	655775	CallExpression	"line . find_last_not_of ( "" \\t"" , currPos - 1 )"		655756	1					
ANR	655776	Callee	line . find_last_not_of		655756	0					
ANR	655777	MemberAccess	line . find_last_not_of		655756	0					
ANR	655778	Identifier	line		655756	0					
ANR	655779	Identifier	find_last_not_of		655756	1					
ANR	655780	ArgumentList	""" \\t"""		655756	1					
ANR	655781	Argument	""" \\t"""		655756	0					
ANR	655782	PrimaryExpression	""" \\t"""		655756	0					
ANR	655783	Argument	currPos - 1		655756	1					
ANR	655784	AdditiveExpression	currPos - 1		655756	0		-			
ANR	655785	Identifier	currPos		655756	0					
ANR	655786	PrimaryExpression	1		655756	1					
ANR	655787	IfStatement	if ( end == string :: npos || ! isLegalNameChar ( line [ end ] ) )		655756	2					
ANR	655788	Condition	end == string :: npos || ! isLegalNameChar ( line [ end ] )	6011:5:174734:174783	655756	0	True				
ANR	655789	OrExpression	end == string :: npos || ! isLegalNameChar ( line [ end ] )		655756	0		||			
ANR	655790	EqualityExpression	end == string :: npos		655756	0		==			
ANR	655791	Identifier	end		655756	0					
ANR	655792	Identifier	string :: npos		655756	1					
ANR	655793	UnaryOperationExpression	! isLegalNameChar ( line [ end ] )		655756	1					
ANR	655794	UnaryOperator	!		655756	0					
ANR	655795	CallExpression	isLegalNameChar ( line [ end ] )		655756	1					
ANR	655796	Callee	isLegalNameChar		655756	0					
ANR	655797	Identifier	isLegalNameChar		655756	0					
ANR	655798	ArgumentList	line [ end ]		655756	1					
ANR	655799	Argument	line [ end ]		655756	0					
ANR	655800	ArrayIndexing	line [ end ]		655756	0					
ANR	655801	Identifier	line		655756	0					
ANR	655802	Identifier	end		655756	1					
ANR	655803	ReturnStatement	return string ( ) ;	6012:2:174788:174803	655756	1	True				
ANR	655804	CallExpression	string ( )		655756	0					
ANR	655805	Callee	string		655756	0					
ANR	655806	Identifier	string		655756	0					
ANR	655807	ArgumentList			655756	1					
ANR	655808	IdentifierDeclStatement	int start ;	6014:1:174807:174816	655756	3	True				
ANR	655809	IdentifierDecl	start		655756	0					
ANR	655810	IdentifierDeclType	int		655756	0					
ANR	655811	Identifier	start		655756	1					
ANR	655812	ForStatement	for ( start = end ; start > - 1 ; start -- )		655756	4					
ANR	655813	ForInit	start = end ;	6015:6:174863:174874	655756	0	True				
ANR	655814	AssignmentExpression	start = end		655756	0		=			
ANR	655815	Identifier	start		655756	0					
ANR	655816	Identifier	end		655756	1					
ANR	655817	Condition	start > - 1	6015:19:174876:174885	655756	1	True				
ANR	655818	RelationalExpression	start > - 1		655756	0		>			
ANR	655819	Identifier	start		655756	0					
ANR	655820	UnaryOperationExpression	- 1		655756	1					
ANR	655821	UnaryOperator	-		655756	0					
ANR	655822	PrimaryExpression	1		655756	1					
ANR	655823	PostIncDecOperationExpression	start --	6015:31:174888:174894	655756	2	True				
ANR	655824	Identifier	start		655756	0					
ANR	655825	IncDec	--		655756	1					
ANR	655826	CompoundStatement		12:1:312:312	655756	3					
ANR	655827	IfStatement	if ( ! isLegalNameChar ( line [ start ] ) || line [ start ] == '.' )		655756	0					
ANR	655828	Condition	! isLegalNameChar ( line [ start ] ) || line [ start ] == '.'	6017:6:174906:174956	655756	0	True				
ANR	655829	OrExpression	! isLegalNameChar ( line [ start ] ) || line [ start ] == '.'		655756	0		||			
ANR	655830	UnaryOperationExpression	! isLegalNameChar ( line [ start ] )		655756	0					
ANR	655831	UnaryOperator	!		655756	0					
ANR	655832	CallExpression	isLegalNameChar ( line [ start ] )		655756	1					
ANR	655833	Callee	isLegalNameChar		655756	0					
ANR	655834	Identifier	isLegalNameChar		655756	0					
ANR	655835	ArgumentList	line [ start ]		655756	1					
ANR	655836	Argument	line [ start ]		655756	0					
ANR	655837	ArrayIndexing	line [ start ]		655756	0					
ANR	655838	Identifier	line		655756	0					
ANR	655839	Identifier	start		655756	1					
ANR	655840	EqualityExpression	line [ start ] == '.'		655756	1		==			
ANR	655841	ArrayIndexing	line [ start ]		655756	0					
ANR	655842	Identifier	line		655756	0					
ANR	655843	Identifier	start		655756	1					
ANR	655844	PrimaryExpression	'.'		655756	1					
ANR	655845	BreakStatement	break ;	6018:3:174962:174967	655756	1	True				
ANR	655846	ExpressionStatement	start ++	6020:1:174973:174980	655756	5	True				
ANR	655847	PostIncDecOperationExpression	start ++		655756	0					
ANR	655848	Identifier	start		655756	0					
ANR	655849	IncDec	++		655756	1					
ANR	655850	ReturnStatement	"return ( line . substr ( start , end - start + 1 ) ) ;"	6022:1:174984:175028	655756	6	True				
ANR	655851	CallExpression	"line . substr ( start , end - start + 1 )"		655756	0					
ANR	655852	Callee	line . substr		655756	0					
ANR	655853	MemberAccess	line . substr		655756	0					
ANR	655854	Identifier	line		655756	0					
ANR	655855	Identifier	substr		655756	1					
ANR	655856	ArgumentList	start		655756	1					
ANR	655857	Argument	start		655756	0					
ANR	655858	Identifier	start		655756	0					
ANR	655859	Argument	end - start + 1		655756	1					
ANR	655860	AdditiveExpression	end - start + 1		655756	0		-			
ANR	655861	Identifier	end		655756	0					
ANR	655862	AdditiveExpression	start + 1		655756	1		+			
ANR	655863	Identifier	start		655756	0					
ANR	655864	PrimaryExpression	1		655756	1					
ANR	655865	ReturnType	string		655756	1					
ANR	655866	Identifier	ASFormatter :: getPreviousWord		655756	2					
ANR	655867	ParameterList	"const string & line , int currPos"		655756	3					
ANR	655868	Parameter	const string & line	6004:36:174546:174563	655756	0	True				
ANR	655869	ParameterType	const string &		655756	0					
ANR	655870	Identifier	line		655756	1					
ANR	655871	Parameter	int currPos	6004:56:174566:174576	655756	1	True				
ANR	655872	ParameterType	int		655756	0					
ANR	655873	Identifier	currPos		655756	1					
ANR	655874	CFGEntryNode	ENTRY		655756		True				
ANR	655875	CFGExitNode	EXIT		655756		True				
ANR	655876	Symbol	string		655756						
ANR	655877	Symbol	line		655756						
ANR	655878	Symbol	line . substr		655756						
ANR	655879	Symbol	* start		655756						
ANR	655880	Symbol	string :: npos		655756						
ANR	655881	Symbol	start		655756						
ANR	655882	Symbol	currPos		655756						
ANR	655883	Symbol	end		655756						
ANR	655884	Symbol	isLegalNameChar		655756						
ANR	655885	Symbol	* end		655756						
ANR	655886	Symbol	* line		655756						
ANR	655887	Symbol	line . find_last_not_of		655756						
ANR	655888	Function	ASFormatter :: isLineBreakBeforeClosingHeader	6030:0:175196:176290							
ANR	655889	FunctionDef	ASFormatter :: isLineBreakBeforeClosingHeader ()		655888	0					
ANR	655890	CompoundStatement		6031:0:175247:176290	655888	0					
ANR	655891	ExpressionStatement	assert ( foundClosingHeader && previousNonWSChar == '}' )	6032:1:175250:175304	655888	0	True				
ANR	655892	CallExpression	assert ( foundClosingHeader && previousNonWSChar == '}' )		655888	0					
ANR	655893	Callee	assert		655888	0					
ANR	655894	Identifier	assert		655888	0					
ANR	655895	ArgumentList	foundClosingHeader && previousNonWSChar == '}'		655888	1					
ANR	655896	Argument	foundClosingHeader && previousNonWSChar == '}'		655888	0					
ANR	655897	AndExpression	foundClosingHeader && previousNonWSChar == '}'		655888	0		&&			
ANR	655898	Identifier	foundClosingHeader		655888	0					
ANR	655899	EqualityExpression	previousNonWSChar == '}'		655888	1		==			
ANR	655900	Identifier	previousNonWSChar		655888	0					
ANR	655901	PrimaryExpression	'}'		655888	1					
ANR	655902	IfStatement	if ( currentHeader == & AS_WHILE && shouldAttachClosingWhile )		655888	1					
ANR	655903	Condition	currentHeader == & AS_WHILE && shouldAttachClosingWhile	6034:5:175312:175365	655888	0	True				
ANR	655904	AndExpression	currentHeader == & AS_WHILE && shouldAttachClosingWhile		655888	0		&&			
ANR	655905	EqualityExpression	currentHeader == & AS_WHILE		655888	0		==			
ANR	655906	Identifier	currentHeader		655888	0					
ANR	655907	UnaryOperationExpression	& AS_WHILE		655888	1					
ANR	655908	UnaryOperator	&		655888	0					
ANR	655909	Identifier	AS_WHILE		655888	1					
ANR	655910	Identifier	shouldAttachClosingWhile		655888	1					
ANR	655911	CompoundStatement		5:1:121:121	655888	1					
ANR	655912	ExpressionStatement	appendClosingHeader ( )	6036:2:175373:175394	655888	0	True				
ANR	655913	CallExpression	appendClosingHeader ( )		655888	0					
ANR	655914	Callee	appendClosingHeader		655888	0					
ANR	655915	Identifier	appendClosingHeader		655888	0					
ANR	655916	ArgumentList			655888	1					
ANR	655917	ReturnStatement	return ;	6037:2:175398:175404	655888	1	True				
ANR	655918	IfStatement	if ( braceFormatMode == BREAK_MODE || braceFormatMode == RUN_IN_MODE || attachClosingBraceMode )		655888	2					
ANR	655919	Condition	braceFormatMode == BREAK_MODE || braceFormatMode == RUN_IN_MODE || attachClosingBraceMode	6040:5:175415:175521	655888	0	True				
ANR	655920	OrExpression	braceFormatMode == BREAK_MODE || braceFormatMode == RUN_IN_MODE || attachClosingBraceMode		655888	0		||			
ANR	655921	EqualityExpression	braceFormatMode == BREAK_MODE		655888	0		==			
ANR	655922	Identifier	braceFormatMode		655888	0					
ANR	655923	Identifier	BREAK_MODE		655888	1					
ANR	655924	OrExpression	braceFormatMode == RUN_IN_MODE || attachClosingBraceMode		655888	1		||			
ANR	655925	EqualityExpression	braceFormatMode == RUN_IN_MODE		655888	0		==			
ANR	655926	Identifier	braceFormatMode		655888	0					
ANR	655927	Identifier	RUN_IN_MODE		655888	1					
ANR	655928	Identifier	attachClosingBraceMode		655888	1					
ANR	655929	CompoundStatement		13:1:277:277	655888	1					
ANR	655930	ExpressionStatement	isInLineBreak = true	6044:2:175529:175549	655888	0	True				
ANR	655931	AssignmentExpression	isInLineBreak = true		655888	0		=			
ANR	655932	Identifier	isInLineBreak		655888	0					
ANR	655933	Identifier	true		655888	1					
ANR	655934	ElseStatement	else		655888	0					
ANR	655935	IfStatement	if ( braceFormatMode == NONE_MODE )		655888	0					
ANR	655936	Condition	braceFormatMode == NONE_MODE	6046:10:175564:175591	655888	0	True				
ANR	655937	EqualityExpression	braceFormatMode == NONE_MODE		655888	0		==			
ANR	655938	Identifier	braceFormatMode		655888	0					
ANR	655939	Identifier	NONE_MODE		655888	1					
ANR	655940	CompoundStatement		17:1:347:347	655888	1					
ANR	655941	IfStatement	if ( shouldBreakClosingHeaderBraces || getBraceIndent ( ) || getBlockIndent ( ) )		655888	0					
ANR	655942	Condition	shouldBreakClosingHeaderBraces || getBraceIndent ( ) || getBlockIndent ( )	6048:6:175603:175682	655888	0	True				
ANR	655943	OrExpression	shouldBreakClosingHeaderBraces || getBraceIndent ( ) || getBlockIndent ( )		655888	0		||			
ANR	655944	Identifier	shouldBreakClosingHeaderBraces		655888	0					
ANR	655945	OrExpression	getBraceIndent ( ) || getBlockIndent ( )		655888	1		||			
ANR	655946	CallExpression	getBraceIndent ( )		655888	0					
ANR	655947	Callee	getBraceIndent		655888	0					
ANR	655948	Identifier	getBraceIndent		655888	0					
ANR	655949	ArgumentList			655888	1					
ANR	655950	CallExpression	getBlockIndent ( )		655888	1					
ANR	655951	Callee	getBlockIndent		655888	0					
ANR	655952	Identifier	getBlockIndent		655888	0					
ANR	655953	ArgumentList			655888	1					
ANR	655954	CompoundStatement		20:2:439:439	655888	1					
ANR	655955	ExpressionStatement	isInLineBreak = true	6051:3:175692:175712	655888	0	True				
ANR	655956	AssignmentExpression	isInLineBreak = true		655888	0		=			
ANR	655957	Identifier	isInLineBreak		655888	0					
ANR	655958	Identifier	true		655888	1					
ANR	655959	ElseStatement	else		655888	0					
ANR	655960	CompoundStatement		27:3:536:583	655888	0					
ANR	655961	ExpressionStatement	appendSpacePad ( )	6055:3:175732:175748	655888	0	True				
ANR	655962	CallExpression	appendSpacePad ( )		655888	0					
ANR	655963	Callee	appendSpacePad		655888	0					
ANR	655964	Identifier	appendSpacePad		655888	0					
ANR	655965	ArgumentList			655888	1					
ANR	655966	IdentifierDeclStatement	"size_t i = currentLine . find_first_not_of ( "" \\t"" ) ;"	6057:3:175784:175831	655888	1	True				
ANR	655967	IdentifierDecl	"i = currentLine . find_first_not_of ( "" \\t"" )"		655888	0					
ANR	655968	IdentifierDeclType	size_t		655888	0					
ANR	655969	Identifier	i		655888	1					
ANR	655970	AssignmentExpression	"i = currentLine . find_first_not_of ( "" \\t"" )"		655888	2		=			
ANR	655971	Identifier	i		655888	0					
ANR	655972	CallExpression	"currentLine . find_first_not_of ( "" \\t"" )"		655888	1					
ANR	655973	Callee	currentLine . find_first_not_of		655888	0					
ANR	655974	MemberAccess	currentLine . find_first_not_of		655888	0					
ANR	655975	Identifier	currentLine		655888	0					
ANR	655976	Identifier	find_first_not_of		655888	1					
ANR	655977	ArgumentList	""" \\t"""		655888	1					
ANR	655978	Argument	""" \\t"""		655888	0					
ANR	655979	PrimaryExpression	""" \\t"""		655888	0					
ANR	655980	IfStatement	if ( i != string :: npos && currentLine [ i ] == '}' )		655888	2					
ANR	655981	Condition	i != string :: npos && currentLine [ i ] == '}'	6058:7:175840:175881	655888	0	True				
ANR	655982	AndExpression	i != string :: npos && currentLine [ i ] == '}'		655888	0		&&			
ANR	655983	EqualityExpression	i != string :: npos		655888	0		!=			
ANR	655984	Identifier	i		655888	0					
ANR	655985	Identifier	string :: npos		655888	1					
ANR	655986	EqualityExpression	currentLine [ i ] == '}'		655888	1		==			
ANR	655987	ArrayIndexing	currentLine [ i ]		655888	0					
ANR	655988	Identifier	currentLine		655888	0					
ANR	655989	Identifier	i		655888	1					
ANR	655990	PrimaryExpression	'}'		655888	1					
ANR	655991	ExpressionStatement	isInLineBreak = false	6059:4:175888:175909	655888	1	True				
ANR	655992	AssignmentExpression	isInLineBreak = false		655888	0		=			
ANR	655993	Identifier	isInLineBreak		655888	0					
ANR	655994	Identifier	false		655888	1					
ANR	655995	IfStatement	if ( shouldBreakBlocks )		655888	3					
ANR	655996	Condition	shouldBreakBlocks	6061:7:175919:175935	655888	0	True				
ANR	655997	Identifier	shouldBreakBlocks		655888	0					
ANR	655998	ExpressionStatement	isAppendPostBlockEmptyLineRequested = false	6062:4:175942:175985	655888	1	True				
ANR	655999	AssignmentExpression	isAppendPostBlockEmptyLineRequested = false		655888	0		=			
ANR	656000	Identifier	isAppendPostBlockEmptyLineRequested		655888	0					
ANR	656001	Identifier	false		655888	1					
ANR	656002	ElseStatement	else		655888	0					
ANR	656003	CompoundStatement		37:1:800:800	655888	0					
ANR	656004	IfStatement	if ( shouldBreakClosingHeaderBraces || getBraceIndent ( ) || getBlockIndent ( ) )		655888	0					
ANR	656005	Condition	shouldBreakClosingHeaderBraces || getBraceIndent ( ) || getBlockIndent ( )	6068:6:176056:176135	655888	0	True				
ANR	656006	OrExpression	shouldBreakClosingHeaderBraces || getBraceIndent ( ) || getBlockIndent ( )		655888	0		||			
ANR	656007	Identifier	shouldBreakClosingHeaderBraces		655888	0					
ANR	656008	OrExpression	getBraceIndent ( ) || getBlockIndent ( )		655888	1		||			
ANR	656009	CallExpression	getBraceIndent ( )		655888	0					
ANR	656010	Callee	getBraceIndent		655888	0					
ANR	656011	Identifier	getBraceIndent		655888	0					
ANR	656012	ArgumentList			655888	1					
ANR	656013	CallExpression	getBlockIndent ( )		655888	1					
ANR	656014	Callee	getBlockIndent		655888	0					
ANR	656015	Identifier	getBlockIndent		655888	0					
ANR	656016	ArgumentList			655888	1					
ANR	656017	CompoundStatement		40:2:892:892	655888	1					
ANR	656018	ExpressionStatement	isInLineBreak = true	6071:3:176145:176165	655888	0	True				
ANR	656019	AssignmentExpression	isInLineBreak = true		655888	0		=			
ANR	656020	Identifier	isInLineBreak		655888	0					
ANR	656021	Identifier	true		655888	1					
ANR	656022	ElseStatement	else		655888	0					
ANR	656023	CompoundStatement		44:2:932:932	655888	0					
ANR	656024	ExpressionStatement	appendClosingHeader ( )	6075:3:176185:176206	655888	0	True				
ANR	656025	CallExpression	appendClosingHeader ( )		655888	0					
ANR	656026	Callee	appendClosingHeader		655888	0					
ANR	656027	Identifier	appendClosingHeader		655888	0					
ANR	656028	ArgumentList			655888	1					
ANR	656029	IfStatement	if ( shouldBreakBlocks )		655888	1					
ANR	656030	Condition	shouldBreakBlocks	6076:7:176215:176231	655888	0	True				
ANR	656031	Identifier	shouldBreakBlocks		655888	0					
ANR	656032	ExpressionStatement	isAppendPostBlockEmptyLineRequested = false	6077:4:176238:176281	655888	1	True				
ANR	656033	AssignmentExpression	isAppendPostBlockEmptyLineRequested = false		655888	0		=			
ANR	656034	Identifier	isAppendPostBlockEmptyLineRequested		655888	0					
ANR	656035	Identifier	false		655888	1					
ANR	656036	ReturnType	void		655888	1					
ANR	656037	Identifier	ASFormatter :: isLineBreakBeforeClosingHeader		655888	2					
ANR	656038	ParameterList			655888	3					
ANR	656039	CFGEntryNode	ENTRY		655888		True				
ANR	656040	CFGExitNode	EXIT		655888		True				
ANR	656041	Symbol	previousNonWSChar		655888						
ANR	656042	Symbol	RUN_IN_MODE		655888						
ANR	656043	Symbol	isAppendPostBlockEmptyLineRequested		655888						
ANR	656044	Symbol	isInLineBreak		655888						
ANR	656045	Symbol	string :: npos		655888						
ANR	656046	Symbol	false		655888						
ANR	656047	Symbol	i		655888						
ANR	656048	Symbol	getBlockIndent		655888						
ANR	656049	Symbol	shouldBreakBlocks		655888						
ANR	656050	Symbol	currentLine . find_first_not_of		655888						
ANR	656051	Symbol	foundClosingHeader		655888						
ANR	656052	Symbol	attachClosingBraceMode		655888						
ANR	656053	Symbol	& AS_WHILE		655888						
ANR	656054	Symbol	NONE_MODE		655888						
ANR	656055	Symbol	* currentLine		655888						
ANR	656056	Symbol	shouldAttachClosingWhile		655888						
ANR	656057	Symbol	currentHeader		655888						
ANR	656058	Symbol	* i		655888						
ANR	656059	Symbol	getBraceIndent		655888						
ANR	656060	Symbol	shouldBreakClosingHeaderBraces		655888						
ANR	656061	Symbol	BREAK_MODE		655888						
ANR	656062	Symbol	true		655888						
ANR	656063	Symbol	braceFormatMode		655888						
ANR	656064	Symbol	currentLine		655888						
ANR	656065	Function	ASFormatter :: appendClosingHeader	6085:0:176371:176948							
ANR	656066	FunctionDef	ASFormatter :: appendClosingHeader ()		656065	0					
ANR	656067	CompoundStatement		6086:0:176411:176948	656065	0					
ANR	656068	IdentifierDeclStatement	bool previousLineIsEmpty = isEmptyLine ( formattedLine ) ;	6089:1:176512:176565	656065	0	True				
ANR	656069	IdentifierDecl	previousLineIsEmpty = isEmptyLine ( formattedLine )		656065	0					
ANR	656070	IdentifierDeclType	bool		656065	0					
ANR	656071	Identifier	previousLineIsEmpty		656065	1					
ANR	656072	AssignmentExpression	previousLineIsEmpty = isEmptyLine ( formattedLine )		656065	2		=			
ANR	656073	Identifier	previousLineIsEmpty		656065	0					
ANR	656074	CallExpression	isEmptyLine ( formattedLine )		656065	1					
ANR	656075	Callee	isEmptyLine		656065	0					
ANR	656076	Identifier	isEmptyLine		656065	0					
ANR	656077	ArgumentList	formattedLine		656065	1					
ANR	656078	Argument	formattedLine		656065	0					
ANR	656079	Identifier	formattedLine		656065	0					
ANR	656080	IdentifierDeclStatement	int previousLineIsOneLineBlock = 0 ;	6090:1:176568:176602	656065	1	True				
ANR	656081	IdentifierDecl	previousLineIsOneLineBlock = 0		656065	0					
ANR	656082	IdentifierDeclType	int		656065	0					
ANR	656083	Identifier	previousLineIsOneLineBlock		656065	1					
ANR	656084	AssignmentExpression	previousLineIsOneLineBlock = 0		656065	2		=			
ANR	656085	Identifier	previousLineIsOneLineBlock		656065	0					
ANR	656086	PrimaryExpression	0		656065	1					
ANR	656087	IdentifierDeclStatement	"size_t firstBrace = findNextChar ( formattedLine , '{' ) ;"	6091:1:176605:176657	656065	2	True				
ANR	656088	IdentifierDecl	"firstBrace = findNextChar ( formattedLine , '{' )"		656065	0					
ANR	656089	IdentifierDeclType	size_t		656065	0					
ANR	656090	Identifier	firstBrace		656065	1					
ANR	656091	AssignmentExpression	"firstBrace = findNextChar ( formattedLine , '{' )"		656065	2		=			
ANR	656092	Identifier	firstBrace		656065	0					
ANR	656093	CallExpression	"findNextChar ( formattedLine , '{' )"		656065	1					
ANR	656094	Callee	findNextChar		656065	0					
ANR	656095	Identifier	findNextChar		656065	0					
ANR	656096	ArgumentList	formattedLine		656065	1					
ANR	656097	Argument	formattedLine		656065	0					
ANR	656098	Identifier	formattedLine		656065	0					
ANR	656099	Argument	'{'		656065	1					
ANR	656100	PrimaryExpression	'{'		656065	0					
ANR	656101	IfStatement	if ( firstBrace != string :: npos )		656065	3					
ANR	656102	Condition	firstBrace != string :: npos	6092:5:176664:176689	656065	0	True				
ANR	656103	EqualityExpression	firstBrace != string :: npos		656065	0		!=			
ANR	656104	Identifier	firstBrace		656065	0					
ANR	656105	Identifier	string :: npos		656065	1					
ANR	656106	ExpressionStatement	"previousLineIsOneLineBlock = isOneLineBlockReached ( formattedLine , firstBrace )"	6093:2:176694:176771	656065	1	True				
ANR	656107	AssignmentExpression	"previousLineIsOneLineBlock = isOneLineBlockReached ( formattedLine , firstBrace )"		656065	0		=			
ANR	656108	Identifier	previousLineIsOneLineBlock		656065	0					
ANR	656109	CallExpression	"isOneLineBlockReached ( formattedLine , firstBrace )"		656065	1					
ANR	656110	Callee	isOneLineBlockReached		656065	0					
ANR	656111	Identifier	isOneLineBlockReached		656065	0					
ANR	656112	ArgumentList	formattedLine		656065	1					
ANR	656113	Argument	formattedLine		656065	0					
ANR	656114	Identifier	formattedLine		656065	0					
ANR	656115	Argument	firstBrace		656065	1					
ANR	656116	Identifier	firstBrace		656065	0					
ANR	656117	IfStatement	if ( ! previousLineIsEmpty && previousLineIsOneLineBlock == 0 )		656065	4					
ANR	656118	Condition	! previousLineIsEmpty && previousLineIsOneLineBlock == 0	6094:5:176778:176841	656065	0	True				
ANR	656119	AndExpression	! previousLineIsEmpty && previousLineIsOneLineBlock == 0		656065	0		&&			
ANR	656120	UnaryOperationExpression	! previousLineIsEmpty		656065	0					
ANR	656121	UnaryOperator	!		656065	0					
ANR	656122	Identifier	previousLineIsEmpty		656065	1					
ANR	656123	EqualityExpression	previousLineIsOneLineBlock == 0		656065	1		==			
ANR	656124	Identifier	previousLineIsOneLineBlock		656065	0					
ANR	656125	PrimaryExpression	0		656065	1					
ANR	656126	CompoundStatement		11:1:433:433	656065	1					
ANR	656127	ExpressionStatement	isInLineBreak = false	6097:2:176849:176870	656065	0	True				
ANR	656128	AssignmentExpression	isInLineBreak = false		656065	0		=			
ANR	656129	Identifier	isInLineBreak		656065	0					
ANR	656130	Identifier	false		656065	1					
ANR	656131	ExpressionStatement	appendSpacePad ( )	6098:2:176874:176890	656065	1	True				
ANR	656132	CallExpression	appendSpacePad ( )		656065	0					
ANR	656133	Callee	appendSpacePad		656065	0					
ANR	656134	Identifier	appendSpacePad		656065	0					
ANR	656135	ArgumentList			656065	1					
ANR	656136	ExpressionStatement	spacePadNum = 0	6099:2:176894:176909	656065	2	True				
ANR	656137	AssignmentExpression	spacePadNum = 0		656065	0		=			
ANR	656138	Identifier	spacePadNum		656065	0					
ANR	656139	PrimaryExpression	0		656065	1					
ANR	656140	ReturnType	void		656065	1					
ANR	656141	Identifier	ASFormatter :: appendClosingHeader		656065	2					
ANR	656142	ParameterList			656065	3					
ANR	656143	CFGEntryNode	ENTRY		656065		True				
ANR	656144	CFGExitNode	EXIT		656065		True				
ANR	656145	Symbol	formattedLine		656065						
ANR	656146	Symbol	isOneLineBlockReached		656065						
ANR	656147	Symbol	isEmptyLine		656065						
ANR	656148	Symbol	previousLineIsOneLineBlock		656065						
ANR	656149	Symbol	firstBrace		656065						
ANR	656150	Symbol	isInLineBreak		656065						
ANR	656151	Symbol	spacePadNum		656065						
ANR	656152	Symbol	string :: npos		656065						
ANR	656153	Symbol	false		656065						
ANR	656154	Symbol	previousLineIsEmpty		656065						
ANR	656155	Symbol	findNextChar		656065						
ANR	656156	Function	ASFormatter :: addBracesToStatement	6108:0:177122:178683							
ANR	656157	FunctionDef	ASFormatter :: addBracesToStatement ()		656156	0					
ANR	656158	CompoundStatement		6109:0:177163:178683	656156	0					
ANR	656159	ExpressionStatement	assert ( isImmediatelyPostHeader )	6110:1:177166:177197	656156	0	True				
ANR	656160	CallExpression	assert ( isImmediatelyPostHeader )		656156	0					
ANR	656161	Callee	assert		656156	0					
ANR	656162	Identifier	assert		656156	0					
ANR	656163	ArgumentList	isImmediatelyPostHeader		656156	1					
ANR	656164	Argument	isImmediatelyPostHeader		656156	0					
ANR	656165	Identifier	isImmediatelyPostHeader		656156	0					
ANR	656166	IfStatement	if ( currentHeader != & AS_IF && currentHeader != & AS_ELSE && currentHeader != & AS_FOR && currentHeader != & AS_WHILE && currentHeader != & AS_DO && currentHeader != & AS_FOREACH && currentHeader != & AS_QFOREACH && currentHeader != & AS_QFOREVER && currentHeader != & AS_FOREVER )		656156	1					
ANR	656167	Condition	currentHeader != & AS_IF && currentHeader != & AS_ELSE && currentHeader != & AS_FOR && currentHeader != & AS_WHILE && currentHeader != & AS_DO && currentHeader != & AS_FOREACH && currentHeader != & AS_QFOREACH && currentHeader != & AS_QFOREVER && currentHeader != & AS_FOREVER	6112:5:177205:177543	656156	0	True				
ANR	656168	AndExpression	currentHeader != & AS_IF && currentHeader != & AS_ELSE && currentHeader != & AS_FOR && currentHeader != & AS_WHILE && currentHeader != & AS_DO && currentHeader != & AS_FOREACH && currentHeader != & AS_QFOREACH && currentHeader != & AS_QFOREVER && currentHeader != & AS_FOREVER		656156	0		&&			
ANR	656169	EqualityExpression	currentHeader != & AS_IF		656156	0		!=			
ANR	656170	Identifier	currentHeader		656156	0					
ANR	656171	UnaryOperationExpression	& AS_IF		656156	1					
ANR	656172	UnaryOperator	&		656156	0					
ANR	656173	Identifier	AS_IF		656156	1					
ANR	656174	AndExpression	currentHeader != & AS_ELSE && currentHeader != & AS_FOR && currentHeader != & AS_WHILE && currentHeader != & AS_DO && currentHeader != & AS_FOREACH && currentHeader != & AS_QFOREACH && currentHeader != & AS_QFOREVER && currentHeader != & AS_FOREVER		656156	1		&&			
ANR	656175	EqualityExpression	currentHeader != & AS_ELSE		656156	0		!=			
ANR	656176	Identifier	currentHeader		656156	0					
ANR	656177	UnaryOperationExpression	& AS_ELSE		656156	1					
ANR	656178	UnaryOperator	&		656156	0					
ANR	656179	Identifier	AS_ELSE		656156	1					
ANR	656180	AndExpression	currentHeader != & AS_FOR && currentHeader != & AS_WHILE && currentHeader != & AS_DO && currentHeader != & AS_FOREACH && currentHeader != & AS_QFOREACH && currentHeader != & AS_QFOREVER && currentHeader != & AS_FOREVER		656156	1		&&			
ANR	656181	EqualityExpression	currentHeader != & AS_FOR		656156	0		!=			
ANR	656182	Identifier	currentHeader		656156	0					
ANR	656183	UnaryOperationExpression	& AS_FOR		656156	1					
ANR	656184	UnaryOperator	&		656156	0					
ANR	656185	Identifier	AS_FOR		656156	1					
ANR	656186	AndExpression	currentHeader != & AS_WHILE && currentHeader != & AS_DO && currentHeader != & AS_FOREACH && currentHeader != & AS_QFOREACH && currentHeader != & AS_QFOREVER && currentHeader != & AS_FOREVER		656156	1		&&			
ANR	656187	EqualityExpression	currentHeader != & AS_WHILE		656156	0		!=			
ANR	656188	Identifier	currentHeader		656156	0					
ANR	656189	UnaryOperationExpression	& AS_WHILE		656156	1					
ANR	656190	UnaryOperator	&		656156	0					
ANR	656191	Identifier	AS_WHILE		656156	1					
ANR	656192	AndExpression	currentHeader != & AS_DO && currentHeader != & AS_FOREACH && currentHeader != & AS_QFOREACH && currentHeader != & AS_QFOREVER && currentHeader != & AS_FOREVER		656156	1		&&			
ANR	656193	EqualityExpression	currentHeader != & AS_DO		656156	0		!=			
ANR	656194	Identifier	currentHeader		656156	0					
ANR	656195	UnaryOperationExpression	& AS_DO		656156	1					
ANR	656196	UnaryOperator	&		656156	0					
ANR	656197	Identifier	AS_DO		656156	1					
ANR	656198	AndExpression	currentHeader != & AS_FOREACH && currentHeader != & AS_QFOREACH && currentHeader != & AS_QFOREVER && currentHeader != & AS_FOREVER		656156	1		&&			
ANR	656199	EqualityExpression	currentHeader != & AS_FOREACH		656156	0		!=			
ANR	656200	Identifier	currentHeader		656156	0					
ANR	656201	UnaryOperationExpression	& AS_FOREACH		656156	1					
ANR	656202	UnaryOperator	&		656156	0					
ANR	656203	Identifier	AS_FOREACH		656156	1					
ANR	656204	AndExpression	currentHeader != & AS_QFOREACH && currentHeader != & AS_QFOREVER && currentHeader != & AS_FOREVER		656156	1		&&			
ANR	656205	EqualityExpression	currentHeader != & AS_QFOREACH		656156	0		!=			
ANR	656206	Identifier	currentHeader		656156	0					
ANR	656207	UnaryOperationExpression	& AS_QFOREACH		656156	1					
ANR	656208	UnaryOperator	&		656156	0					
ANR	656209	Identifier	AS_QFOREACH		656156	1					
ANR	656210	AndExpression	currentHeader != & AS_QFOREVER && currentHeader != & AS_FOREVER		656156	1		&&			
ANR	656211	EqualityExpression	currentHeader != & AS_QFOREVER		656156	0		!=			
ANR	656212	Identifier	currentHeader		656156	0					
ANR	656213	UnaryOperationExpression	& AS_QFOREVER		656156	1					
ANR	656214	UnaryOperator	&		656156	0					
ANR	656215	Identifier	AS_QFOREVER		656156	1					
ANR	656216	EqualityExpression	currentHeader != & AS_FOREVER		656156	1		!=			
ANR	656217	Identifier	currentHeader		656156	0					
ANR	656218	UnaryOperationExpression	& AS_FOREVER		656156	1					
ANR	656219	UnaryOperator	&		656156	0					
ANR	656220	Identifier	AS_FOREVER		656156	1					
ANR	656221	ReturnStatement	return false ;	6121:2:177548:177560	656156	1	True				
ANR	656222	Identifier	false		656156	0					
ANR	656223	IfStatement	if ( currentHeader == & AS_WHILE && foundClosingHeader )		656156	2					
ANR	656224	Condition	currentHeader == & AS_WHILE && foundClosingHeader	6123:5:177568:177615	656156	0	True				
ANR	656225	AndExpression	currentHeader == & AS_WHILE && foundClosingHeader		656156	0		&&			
ANR	656226	EqualityExpression	currentHeader == & AS_WHILE		656156	0		==			
ANR	656227	Identifier	currentHeader		656156	0					
ANR	656228	UnaryOperationExpression	& AS_WHILE		656156	1					
ANR	656229	UnaryOperator	&		656156	0					
ANR	656230	Identifier	AS_WHILE		656156	1					
ANR	656231	Identifier	foundClosingHeader		656156	1					
ANR	656232	ReturnStatement	return false ;	6124:2:177632:177644	656156	1	True				
ANR	656233	Identifier	false		656156	0					
ANR	656234	IfStatement	if ( currentChar == ';' )		656156	3					
ANR	656235	Condition	currentChar == ';'	6127:5:177688:177705	656156	0	True				
ANR	656236	EqualityExpression	currentChar == ';'		656156	0		==			
ANR	656237	Identifier	currentChar		656156	0					
ANR	656238	PrimaryExpression	';'		656156	1					
ANR	656239	ReturnStatement	return false ;	6128:2:177710:177722	656156	1	True				
ANR	656240	Identifier	false		656156	0					
ANR	656241	IfStatement	"if ( isCharPotentialHeader ( currentLine , charNum ) )"		656156	4					
ANR	656242	Condition	"isCharPotentialHeader ( currentLine , charNum )"	6131:5:177765:177807	656156	0	True				
ANR	656243	CallExpression	"isCharPotentialHeader ( currentLine , charNum )"		656156	0					
ANR	656244	Callee	isCharPotentialHeader		656156	0					
ANR	656245	Identifier	isCharPotentialHeader		656156	0					
ANR	656246	ArgumentList	currentLine		656156	1					
ANR	656247	Argument	currentLine		656156	0					
ANR	656248	Identifier	currentLine		656156	0					
ANR	656249	Argument	charNum		656156	1					
ANR	656250	Identifier	charNum		656156	0					
ANR	656251	IfStatement	if ( findHeader ( headers ) != nullptr )		656156	1					
ANR	656252	Condition	findHeader ( headers ) != nullptr	6132:6:177816:177845	656156	0	True				
ANR	656253	EqualityExpression	findHeader ( headers ) != nullptr		656156	0		!=			
ANR	656254	CallExpression	findHeader ( headers )		656156	0					
ANR	656255	Callee	findHeader		656156	0					
ANR	656256	Identifier	findHeader		656156	0					
ANR	656257	ArgumentList	headers		656156	1					
ANR	656258	Argument	headers		656156	0					
ANR	656259	Identifier	headers		656156	0					
ANR	656260	Identifier	nullptr		656156	1					
ANR	656261	ReturnStatement	return false ;	6133:3:177851:177863	656156	1	True				
ANR	656262	Identifier	false		656156	0					
ANR	656263	IdentifierDeclStatement	size_t nextSemiColon = charNum ;	6136:1:177896:177926	656156	5	True				
ANR	656264	IdentifierDecl	nextSemiColon = charNum		656156	0					
ANR	656265	IdentifierDeclType	size_t		656156	0					
ANR	656266	Identifier	nextSemiColon		656156	1					
ANR	656267	AssignmentExpression	nextSemiColon = charNum		656156	2		=			
ANR	656268	Identifier	charNum		656156	0					
ANR	656269	Identifier	charNum		656156	1					
ANR	656270	IfStatement	if ( currentChar != ';' )		656156	6					
ANR	656271	Condition	currentChar != ';'	6137:5:177933:177950	656156	0	True				
ANR	656272	EqualityExpression	currentChar != ';'		656156	0		!=			
ANR	656273	Identifier	currentChar		656156	0					
ANR	656274	PrimaryExpression	';'		656156	1					
ANR	656275	ExpressionStatement	"nextSemiColon = findNextChar ( currentLine , ';' , charNum + 1 )"	6138:2:177955:178014	656156	1	True				
ANR	656276	AssignmentExpression	"nextSemiColon = findNextChar ( currentLine , ';' , charNum + 1 )"		656156	0		=			
ANR	656277	Identifier	nextSemiColon		656156	0					
ANR	656278	CallExpression	"findNextChar ( currentLine , ';' , charNum + 1 )"		656156	1					
ANR	656279	Callee	findNextChar		656156	0					
ANR	656280	Identifier	findNextChar		656156	0					
ANR	656281	ArgumentList	currentLine		656156	1					
ANR	656282	Argument	currentLine		656156	0					
ANR	656283	Identifier	currentLine		656156	0					
ANR	656284	Argument	';'		656156	1					
ANR	656285	PrimaryExpression	';'		656156	0					
ANR	656286	Argument	charNum + 1		656156	2					
ANR	656287	AdditiveExpression	charNum + 1		656156	0		+			
ANR	656288	Identifier	charNum		656156	0					
ANR	656289	PrimaryExpression	1		656156	1					
ANR	656290	IfStatement	if ( nextSemiColon == string :: npos )		656156	7					
ANR	656291	Condition	nextSemiColon == string :: npos	6139:5:178021:178049	656156	0	True				
ANR	656292	EqualityExpression	nextSemiColon == string :: npos		656156	0		==			
ANR	656293	Identifier	nextSemiColon		656156	0					
ANR	656294	Identifier	string :: npos		656156	1					
ANR	656295	ReturnStatement	return false ;	6140:2:178054:178066	656156	1	True				
ANR	656296	Identifier	false		656156	0					
ANR	656297	IfStatement	if ( nextSemiColon == currentLine . length ( ) - 1 )		656156	8					
ANR	656298	Condition	nextSemiColon == currentLine . length ( ) - 1	6143:5:178128:178168	656156	0	True				
ANR	656299	EqualityExpression	nextSemiColon == currentLine . length ( ) - 1		656156	0		==			
ANR	656300	Identifier	nextSemiColon		656156	0					
ANR	656301	AdditiveExpression	currentLine . length ( ) - 1		656156	1		-			
ANR	656302	CallExpression	currentLine . length ( )		656156	0					
ANR	656303	Callee	currentLine . length		656156	0					
ANR	656304	MemberAccess	currentLine . length		656156	0					
ANR	656305	Identifier	currentLine		656156	0					
ANR	656306	Identifier	length		656156	1					
ANR	656307	ArgumentList			656156	1					
ANR	656308	PrimaryExpression	1		656156	1					
ANR	656309	ExpressionStatement	"currentLine . append ( "" }"" )"	6144:2:178173:178197	656156	1	True				
ANR	656310	CallExpression	"currentLine . append ( "" }"" )"		656156	0					
ANR	656311	Callee	currentLine . append		656156	0					
ANR	656312	MemberAccess	currentLine . append		656156	0					
ANR	656313	Identifier	currentLine		656156	0					
ANR	656314	Identifier	append		656156	1					
ANR	656315	ArgumentList	""" }"""		656156	1					
ANR	656316	Argument	""" }"""		656156	0					
ANR	656317	PrimaryExpression	""" }"""		656156	0					
ANR	656318	ElseStatement	else		656156	0					
ANR	656319	ExpressionStatement	"currentLine . insert ( nextSemiColon + 1 , "" }"" )"	6146:2:178207:178250	656156	0	True				
ANR	656320	CallExpression	"currentLine . insert ( nextSemiColon + 1 , "" }"" )"		656156	0					
ANR	656321	Callee	currentLine . insert		656156	0					
ANR	656322	MemberAccess	currentLine . insert		656156	0					
ANR	656323	Identifier	currentLine		656156	0					
ANR	656324	Identifier	insert		656156	1					
ANR	656325	ArgumentList	nextSemiColon + 1		656156	1					
ANR	656326	Argument	nextSemiColon + 1		656156	0					
ANR	656327	AdditiveExpression	nextSemiColon + 1		656156	0		+			
ANR	656328	Identifier	nextSemiColon		656156	0					
ANR	656329	PrimaryExpression	1		656156	1					
ANR	656330	Argument	""" }"""		656156	1					
ANR	656331	PrimaryExpression	""" }"""		656156	0					
ANR	656332	ExpressionStatement	"currentLine . insert ( charNum , ""{ "" )"	6148:1:178275:178308	656156	9	True				
ANR	656333	CallExpression	"currentLine . insert ( charNum , ""{ "" )"		656156	0					
ANR	656334	Callee	currentLine . insert		656156	0					
ANR	656335	MemberAccess	currentLine . insert		656156	0					
ANR	656336	Identifier	currentLine		656156	0					
ANR	656337	Identifier	insert		656156	1					
ANR	656338	ArgumentList	charNum		656156	1					
ANR	656339	Argument	charNum		656156	0					
ANR	656340	Identifier	charNum		656156	0					
ANR	656341	Argument	"""{ """		656156	1					
ANR	656342	PrimaryExpression	"""{ """		656156	0					
ANR	656343	ExpressionStatement	"assert ( computeChecksumIn ( ""{}"" ) )"	6149:1:178311:178342	656156	10	True				
ANR	656344	CallExpression	"assert ( computeChecksumIn ( ""{}"" ) )"		656156	0					
ANR	656345	Callee	assert		656156	0					
ANR	656346	Identifier	assert		656156	0					
ANR	656347	ArgumentList	"computeChecksumIn ( ""{}"" )"		656156	1					
ANR	656348	Argument	"computeChecksumIn ( ""{}"" )"		656156	0					
ANR	656349	CallExpression	"computeChecksumIn ( ""{}"" )"		656156	0					
ANR	656350	Callee	computeChecksumIn		656156	0					
ANR	656351	Identifier	computeChecksumIn		656156	0					
ANR	656352	ArgumentList	"""{}"""		656156	1					
ANR	656353	Argument	"""{}"""		656156	0					
ANR	656354	PrimaryExpression	"""{}"""		656156	0					
ANR	656355	ExpressionStatement	currentChar = '{'	6150:1:178345:178362	656156	11	True				
ANR	656356	AssignmentExpression	currentChar = '{'		656156	0		=			
ANR	656357	Identifier	currentChar		656156	0					
ANR	656358	PrimaryExpression	'{'		656156	1					
ANR	656359	IfStatement	"if ( ( int ) currentLine . find_first_not_of ( "" \\t"" ) == charNum )"		656156	12					
ANR	656360	Condition	"( int ) currentLine . find_first_not_of ( "" \\t"" ) == charNum"	6151:5:178369:178421	656156	0	True				
ANR	656361	EqualityExpression	"( int ) currentLine . find_first_not_of ( "" \\t"" ) == charNum"		656156	0		==			
ANR	656362	CastExpression	"( int ) currentLine . find_first_not_of ( "" \\t"" )"		656156	0					
ANR	656363	CastTarget	int		656156	0					
ANR	656364	CallExpression	"currentLine . find_first_not_of ( "" \\t"" )"		656156	1					
ANR	656365	Callee	currentLine . find_first_not_of		656156	0					
ANR	656366	MemberAccess	currentLine . find_first_not_of		656156	0					
ANR	656367	Identifier	currentLine		656156	0					
ANR	656368	Identifier	find_first_not_of		656156	1					
ANR	656369	ArgumentList	""" \\t"""		656156	1					
ANR	656370	Argument	""" \\t"""		656156	0					
ANR	656371	PrimaryExpression	""" \\t"""		656156	0					
ANR	656372	Identifier	charNum		656156	1					
ANR	656373	ExpressionStatement	currentLineBeginsWithBrace = true	6152:2:178426:178459	656156	1	True				
ANR	656374	AssignmentExpression	currentLineBeginsWithBrace = true		656156	0		=			
ANR	656375	Identifier	currentLineBeginsWithBrace		656156	0					
ANR	656376	Identifier	true		656156	1					
ANR	656377	IfStatement	if ( ! shouldAddOneLineBraces )		656156	13					
ANR	656378	Condition	! shouldAddOneLineBraces	6154:5:178490:178512	656156	0	True				
ANR	656379	UnaryOperationExpression	! shouldAddOneLineBraces		656156	0					
ANR	656380	UnaryOperator	!		656156	0					
ANR	656381	Identifier	shouldAddOneLineBraces		656156	1					
ANR	656382	CompoundStatement		48:2:1356:1411	656156	1					
ANR	656383	IdentifierDeclStatement	"size_t lastText = formattedLine . find_last_not_of ( "" \\t"" ) ;"	6156:2:178520:178575	656156	0	True				
ANR	656384	IdentifierDecl	"lastText = formattedLine . find_last_not_of ( "" \\t"" )"		656156	0					
ANR	656385	IdentifierDeclType	size_t		656156	0					
ANR	656386	Identifier	lastText		656156	1					
ANR	656387	AssignmentExpression	"lastText = formattedLine . find_last_not_of ( "" \\t"" )"		656156	2		=			
ANR	656388	Identifier	lastText		656156	0					
ANR	656389	CallExpression	"formattedLine . find_last_not_of ( "" \\t"" )"		656156	1					
ANR	656390	Callee	formattedLine . find_last_not_of		656156	0					
ANR	656391	MemberAccess	formattedLine . find_last_not_of		656156	0					
ANR	656392	Identifier	formattedLine		656156	0					
ANR	656393	Identifier	find_last_not_of		656156	1					
ANR	656394	ArgumentList	""" \\t"""		656156	1					
ANR	656395	Argument	""" \\t"""		656156	0					
ANR	656396	PrimaryExpression	""" \\t"""		656156	0					
ANR	656397	IfStatement	if ( ( formattedLine . length ( ) - 1 ) - lastText > 1 )		656156	1					
ANR	656398	Condition	( formattedLine . length ( ) - 1 ) - lastText > 1	6157:6:178583:178625	656156	0	True				
ANR	656399	RelationalExpression	( formattedLine . length ( ) - 1 ) - lastText > 1		656156	0		>			
ANR	656400	AdditiveExpression	( formattedLine . length ( ) - 1 ) - lastText		656156	0		-			
ANR	656401	AdditiveExpression	formattedLine . length ( ) - 1		656156	0		-			
ANR	656402	CallExpression	formattedLine . length ( )		656156	0					
ANR	656403	Callee	formattedLine . length		656156	0					
ANR	656404	MemberAccess	formattedLine . length		656156	0					
ANR	656405	Identifier	formattedLine		656156	0					
ANR	656406	Identifier	length		656156	1					
ANR	656407	ArgumentList			656156	1					
ANR	656408	PrimaryExpression	1		656156	1					
ANR	656409	Identifier	lastText		656156	1					
ANR	656410	PrimaryExpression	1		656156	1					
ANR	656411	ExpressionStatement	formattedLine . erase ( lastText + 1 )	6158:3:178631:178664	656156	1	True				
ANR	656412	CallExpression	formattedLine . erase ( lastText + 1 )		656156	0					
ANR	656413	Callee	formattedLine . erase		656156	0					
ANR	656414	MemberAccess	formattedLine . erase		656156	0					
ANR	656415	Identifier	formattedLine		656156	0					
ANR	656416	Identifier	erase		656156	1					
ANR	656417	ArgumentList	lastText + 1		656156	1					
ANR	656418	Argument	lastText + 1		656156	0					
ANR	656419	AdditiveExpression	lastText + 1		656156	0		+			
ANR	656420	Identifier	lastText		656156	0					
ANR	656421	PrimaryExpression	1		656156	1					
ANR	656422	ReturnStatement	return true ;	6160:1:178670:178681	656156	14	True				
ANR	656423	Identifier	true		656156	0					
ANR	656424	ReturnType	bool		656156	1					
ANR	656425	Identifier	ASFormatter :: addBracesToStatement		656156	2					
ANR	656426	ParameterList			656156	3					
ANR	656427	CFGEntryNode	ENTRY		656156		True				
ANR	656428	CFGExitNode	EXIT		656156		True				
ANR	656429	Symbol	string :: npos		656156						
ANR	656430	Symbol	& AS_FOR		656156						
ANR	656431	Symbol	foundClosingHeader		656156						
ANR	656432	Symbol	& AS_IF		656156						
ANR	656433	Symbol	formattedLine . find_last_not_of		656156						
ANR	656434	Symbol	& AS_FOREACH		656156						
ANR	656435	Symbol	computeChecksumIn		656156						
ANR	656436	Symbol	findNextChar		656156						
ANR	656437	Symbol	charNum		656156						
ANR	656438	Symbol	& AS_QFOREVER		656156						
ANR	656439	Symbol	currentLine		656156						
ANR	656440	Symbol	lastText		656156						
ANR	656441	Symbol	currentChar		656156						
ANR	656442	Symbol	headers		656156						
ANR	656443	Symbol	currentLineBeginsWithBrace		656156						
ANR	656444	Symbol	nextSemiColon		656156						
ANR	656445	Symbol	false		656156						
ANR	656446	Symbol	isImmediatelyPostHeader		656156						
ANR	656447	Symbol	& AS_ELSE		656156						
ANR	656448	Symbol	currentLine . find_first_not_of		656156						
ANR	656449	Symbol	& AS_WHILE		656156						
ANR	656450	Symbol	formattedLine		656156						
ANR	656451	Symbol	currentHeader		656156						
ANR	656452	Symbol	isCharPotentialHeader		656156						
ANR	656453	Symbol	& AS_FOREVER		656156						
ANR	656454	Symbol	currentLine . length		656156						
ANR	656455	Symbol	formattedLine . length		656156						
ANR	656456	Symbol	& AS_QFOREACH		656156						
ANR	656457	Symbol	findHeader		656156						
ANR	656458	Symbol	true		656156						
ANR	656459	Symbol	& AS_DO		656156						
ANR	656460	Symbol	shouldAddOneLineBraces		656156						
ANR	656461	Symbol	nullptr		656156						
ANR	656462	Function	ASFormatter :: removeBracesFromStatement	6168:0:178867:180911							
ANR	656463	FunctionDef	ASFormatter :: removeBracesFromStatement ()		656462	0					
ANR	656464	CompoundStatement		6169:0:178913:180911	656462	0					
ANR	656465	ExpressionStatement	assert ( isImmediatelyPostHeader )	6170:1:178916:178947	656462	0	True				
ANR	656466	CallExpression	assert ( isImmediatelyPostHeader )		656462	0					
ANR	656467	Callee	assert		656462	0					
ANR	656468	Identifier	assert		656462	0					
ANR	656469	ArgumentList	isImmediatelyPostHeader		656462	1					
ANR	656470	Argument	isImmediatelyPostHeader		656462	0					
ANR	656471	Identifier	isImmediatelyPostHeader		656462	0					
ANR	656472	ExpressionStatement	assert ( currentChar == '{' )	6171:1:178950:178976	656462	1	True				
ANR	656473	CallExpression	assert ( currentChar == '{' )		656462	0					
ANR	656474	Callee	assert		656462	0					
ANR	656475	Identifier	assert		656462	0					
ANR	656476	ArgumentList	currentChar == '{'		656462	1					
ANR	656477	Argument	currentChar == '{'		656462	0					
ANR	656478	EqualityExpression	currentChar == '{'		656462	0		==			
ANR	656479	Identifier	currentChar		656462	0					
ANR	656480	PrimaryExpression	'{'		656462	1					
ANR	656481	IfStatement	if ( currentHeader != & AS_IF && currentHeader != & AS_ELSE && currentHeader != & AS_FOR && currentHeader != & AS_WHILE && currentHeader != & AS_FOREACH )		656462	2					
ANR	656482	Condition	currentHeader != & AS_IF && currentHeader != & AS_ELSE && currentHeader != & AS_FOR && currentHeader != & AS_WHILE && currentHeader != & AS_FOREACH	6173:5:178984:179161	656462	0	True				
ANR	656483	AndExpression	currentHeader != & AS_IF && currentHeader != & AS_ELSE && currentHeader != & AS_FOR && currentHeader != & AS_WHILE && currentHeader != & AS_FOREACH		656462	0		&&			
ANR	656484	EqualityExpression	currentHeader != & AS_IF		656462	0		!=			
ANR	656485	Identifier	currentHeader		656462	0					
ANR	656486	UnaryOperationExpression	& AS_IF		656462	1					
ANR	656487	UnaryOperator	&		656462	0					
ANR	656488	Identifier	AS_IF		656462	1					
ANR	656489	AndExpression	currentHeader != & AS_ELSE && currentHeader != & AS_FOR && currentHeader != & AS_WHILE && currentHeader != & AS_FOREACH		656462	1		&&			
ANR	656490	EqualityExpression	currentHeader != & AS_ELSE		656462	0		!=			
ANR	656491	Identifier	currentHeader		656462	0					
ANR	656492	UnaryOperationExpression	& AS_ELSE		656462	1					
ANR	656493	UnaryOperator	&		656462	0					
ANR	656494	Identifier	AS_ELSE		656462	1					
ANR	656495	AndExpression	currentHeader != & AS_FOR && currentHeader != & AS_WHILE && currentHeader != & AS_FOREACH		656462	1		&&			
ANR	656496	EqualityExpression	currentHeader != & AS_FOR		656462	0		!=			
ANR	656497	Identifier	currentHeader		656462	0					
ANR	656498	UnaryOperationExpression	& AS_FOR		656462	1					
ANR	656499	UnaryOperator	&		656462	0					
ANR	656500	Identifier	AS_FOR		656462	1					
ANR	656501	AndExpression	currentHeader != & AS_WHILE && currentHeader != & AS_FOREACH		656462	1		&&			
ANR	656502	EqualityExpression	currentHeader != & AS_WHILE		656462	0		!=			
ANR	656503	Identifier	currentHeader		656462	0					
ANR	656504	UnaryOperationExpression	& AS_WHILE		656462	1					
ANR	656505	UnaryOperator	&		656462	0					
ANR	656506	Identifier	AS_WHILE		656462	1					
ANR	656507	EqualityExpression	currentHeader != & AS_FOREACH		656462	1		!=			
ANR	656508	Identifier	currentHeader		656462	0					
ANR	656509	UnaryOperationExpression	& AS_FOREACH		656462	1					
ANR	656510	UnaryOperator	&		656462	0					
ANR	656511	Identifier	AS_FOREACH		656462	1					
ANR	656512	ReturnStatement	return false ;	6178:2:179166:179178	656462	1	True				
ANR	656513	Identifier	false		656462	0					
ANR	656514	IfStatement	if ( currentHeader == & AS_WHILE && foundClosingHeader )		656462	3					
ANR	656515	Condition	currentHeader == & AS_WHILE && foundClosingHeader	6180:5:179186:179233	656462	0	True				
ANR	656516	AndExpression	currentHeader == & AS_WHILE && foundClosingHeader		656462	0		&&			
ANR	656517	EqualityExpression	currentHeader == & AS_WHILE		656462	0		==			
ANR	656518	Identifier	currentHeader		656462	0					
ANR	656519	UnaryOperationExpression	& AS_WHILE		656462	1					
ANR	656520	UnaryOperator	&		656462	0					
ANR	656521	Identifier	AS_WHILE		656462	1					
ANR	656522	Identifier	foundClosingHeader		656462	1					
ANR	656523	ReturnStatement	return false ;	6181:2:179250:179262	656462	1	True				
ANR	656524	Identifier	false		656462	0					
ANR	656525	IdentifierDeclStatement	bool isFirstLine = true ;	6183:1:179266:179289	656462	4	True				
ANR	656526	IdentifierDecl	isFirstLine = true		656462	0					
ANR	656527	IdentifierDeclType	bool		656462	0					
ANR	656528	Identifier	isFirstLine		656462	1					
ANR	656529	AssignmentExpression	isFirstLine = true		656462	2		=			
ANR	656530	Identifier	true		656462	0					
ANR	656531	Identifier	true		656462	1					
ANR	656532	IdentifierDeclStatement	string nextLine_ ;	6184:1:179292:179308	656462	5	True				
ANR	656533	IdentifierDecl	nextLine_		656462	0					
ANR	656534	IdentifierDeclType	string		656462	0					
ANR	656535	Identifier	nextLine_		656462	1					
ANR	656536	IfStatement	if ( ! isBeforeAnyLineEndComment ( charNum ) || currentLineBeginsWithBrace )		656462	6					
ANR	656537	Condition	! isBeforeAnyLineEndComment ( charNum ) || currentLineBeginsWithBrace	6186:5:179372:179436	656462	0	True				
ANR	656538	OrExpression	! isBeforeAnyLineEndComment ( charNum ) || currentLineBeginsWithBrace		656462	0		||			
ANR	656539	UnaryOperationExpression	! isBeforeAnyLineEndComment ( charNum )		656462	0					
ANR	656540	UnaryOperator	!		656462	0					
ANR	656541	CallExpression	isBeforeAnyLineEndComment ( charNum )		656462	1					
ANR	656542	Callee	isBeforeAnyLineEndComment		656462	0					
ANR	656543	Identifier	isBeforeAnyLineEndComment		656462	0					
ANR	656544	ArgumentList	charNum		656462	1					
ANR	656545	Argument	charNum		656462	0					
ANR	656546	Identifier	charNum		656462	0					
ANR	656547	Identifier	currentLineBeginsWithBrace		656462	1					
ANR	656548	ExpressionStatement	nextLine_ = currentLine . substr ( charNum + 1 )	6187:2:179441:179484	656462	1	True				
ANR	656549	AssignmentExpression	nextLine_ = currentLine . substr ( charNum + 1 )		656462	0		=			
ANR	656550	Identifier	nextLine_		656462	0					
ANR	656551	CallExpression	currentLine . substr ( charNum + 1 )		656462	1					
ANR	656552	Callee	currentLine . substr		656462	0					
ANR	656553	MemberAccess	currentLine . substr		656462	0					
ANR	656554	Identifier	currentLine		656462	0					
ANR	656555	Identifier	substr		656462	1					
ANR	656556	ArgumentList	charNum + 1		656462	1					
ANR	656557	Argument	charNum + 1		656462	0					
ANR	656558	AdditiveExpression	charNum + 1		656462	0		+			
ANR	656559	Identifier	charNum		656462	0					
ANR	656560	PrimaryExpression	1		656462	1					
ANR	656561	IdentifierDeclStatement	size_t nextChar = 0 ;	6188:1:179487:179506	656462	7	True				
ANR	656562	IdentifierDecl	nextChar = 0		656462	0					
ANR	656563	IdentifierDeclType	size_t		656462	0					
ANR	656564	Identifier	nextChar		656462	1					
ANR	656565	AssignmentExpression	nextChar = 0		656462	2		=			
ANR	656566	Identifier	nextChar		656462	0					
ANR	656567	PrimaryExpression	0		656462	1					
ANR	656568	IdentifierDeclStatement	ASPeekStream stream ( sourceIterator ) ;	6191:1:179544:179579	656462	8	True				
ANR	656569	IdentifierDecl	stream ( sourceIterator )		656462	0					
ANR	656570	IdentifierDeclType	ASPeekStream		656462	0					
ANR	656571	Identifier	stream		656462	1					
ANR	656572	Identifier	sourceIterator		656462	2					
ANR	656573	WhileStatement	while ( stream . hasMoreLines ( ) || isFirstLine )		656462	9					
ANR	656574	Condition	stream . hasMoreLines ( ) || isFirstLine	6192:8:179589:179624	656462	0	True				
ANR	656575	OrExpression	stream . hasMoreLines ( ) || isFirstLine		656462	0		||			
ANR	656576	CallExpression	stream . hasMoreLines ( )		656462	0					
ANR	656577	Callee	stream . hasMoreLines		656462	0					
ANR	656578	MemberAccess	stream . hasMoreLines		656462	0					
ANR	656579	Identifier	stream		656462	0					
ANR	656580	Identifier	hasMoreLines		656462	1					
ANR	656581	ArgumentList			656462	1					
ANR	656582	Identifier	isFirstLine		656462	1					
ANR	656583	CompoundStatement		25:1:714:714	656462	1					
ANR	656584	IfStatement	if ( isFirstLine )		656462	0					
ANR	656585	Condition	isFirstLine	6194:6:179636:179646	656462	0	True				
ANR	656586	Identifier	isFirstLine		656462	0					
ANR	656587	ExpressionStatement	isFirstLine = false	6195:3:179652:179671	656462	1	True				
ANR	656588	AssignmentExpression	isFirstLine = false		656462	0		=			
ANR	656589	Identifier	isFirstLine		656462	0					
ANR	656590	Identifier	false		656462	1					
ANR	656591	ElseStatement	else		656462	0					
ANR	656592	CompoundStatement		29:2:768:768	656462	0					
ANR	656593	ExpressionStatement	nextLine_ = stream . peekNextLine ( )	6198:3:179687:179720	656462	0	True				
ANR	656594	AssignmentExpression	nextLine_ = stream . peekNextLine ( )		656462	0		=			
ANR	656595	Identifier	nextLine_		656462	0					
ANR	656596	CallExpression	stream . peekNextLine ( )		656462	1					
ANR	656597	Callee	stream . peekNextLine		656462	0					
ANR	656598	MemberAccess	stream . peekNextLine		656462	0					
ANR	656599	Identifier	stream		656462	0					
ANR	656600	Identifier	peekNextLine		656462	1					
ANR	656601	ArgumentList			656462	1					
ANR	656602	ExpressionStatement	nextChar = 0	6199:3:179725:179737	656462	1	True				
ANR	656603	AssignmentExpression	nextChar = 0		656462	0		=			
ANR	656604	Identifier	nextChar		656462	0					
ANR	656605	PrimaryExpression	0		656462	1					
ANR	656606	ExpressionStatement	"nextChar = nextLine_ . find_first_not_of ( "" \\t"" , nextChar )"	6202:2:179746:179801	656462	1	True				
ANR	656607	AssignmentExpression	"nextChar = nextLine_ . find_first_not_of ( "" \\t"" , nextChar )"		656462	0		=			
ANR	656608	Identifier	nextChar		656462	0					
ANR	656609	CallExpression	"nextLine_ . find_first_not_of ( "" \\t"" , nextChar )"		656462	1					
ANR	656610	Callee	nextLine_ . find_first_not_of		656462	0					
ANR	656611	MemberAccess	nextLine_ . find_first_not_of		656462	0					
ANR	656612	Identifier	nextLine_		656462	0					
ANR	656613	Identifier	find_first_not_of		656462	1					
ANR	656614	ArgumentList	""" \\t"""		656462	1					
ANR	656615	Argument	""" \\t"""		656462	0					
ANR	656616	PrimaryExpression	""" \\t"""		656462	0					
ANR	656617	Argument	nextChar		656462	1					
ANR	656618	Identifier	nextChar		656462	0					
ANR	656619	IfStatement	if ( nextChar != string :: npos )		656462	2					
ANR	656620	Condition	nextChar != string :: npos	6203:6:179809:179832	656462	0	True				
ANR	656621	EqualityExpression	nextChar != string :: npos		656462	0		!=			
ANR	656622	Identifier	nextChar		656462	0					
ANR	656623	Identifier	string :: npos		656462	1					
ANR	656624	BreakStatement	break ;	6204:3:179838:179843	656462	1	True				
ANR	656625	IfStatement	"if ( ( nextLine_ . compare ( nextChar , 2 , ""/*"" ) == 0 ) || ( nextLine_ . compare ( nextChar , 2 , ""//"" ) == 0 ) || ( isCharPotentialHeader ( nextLine_ , nextChar ) && ASBase :: findHeader ( nextLine_ , nextChar , headers ) != nullptr ) )"		656462	10					
ANR	656626	Condition	"( nextLine_ . compare ( nextChar , 2 , ""/*"" ) == 0 ) || ( nextLine_ . compare ( nextChar , 2 , ""//"" ) == 0 ) || ( isCharPotentialHeader ( nextLine_ , nextChar ) && ASBase :: findHeader ( nextLine_ , nextChar , headers ) != nullptr )"	6208:5:179912:180143	656462	0	True				
ANR	656627	OrExpression	"( nextLine_ . compare ( nextChar , 2 , ""/*"" ) == 0 ) || ( nextLine_ . compare ( nextChar , 2 , ""//"" ) == 0 ) || ( isCharPotentialHeader ( nextLine_ , nextChar ) && ASBase :: findHeader ( nextLine_ , nextChar , headers ) != nullptr )"		656462	0		||			
ANR	656628	EqualityExpression	"nextLine_ . compare ( nextChar , 2 , ""/*"" ) == 0"		656462	0		==			
ANR	656629	CallExpression	"nextLine_ . compare ( nextChar , 2 , ""/*"" )"		656462	0					
ANR	656630	Callee	nextLine_ . compare		656462	0					
ANR	656631	MemberAccess	nextLine_ . compare		656462	0					
ANR	656632	Identifier	nextLine_		656462	0					
ANR	656633	Identifier	compare		656462	1					
ANR	656634	ArgumentList	nextChar		656462	1					
ANR	656635	Argument	nextChar		656462	0					
ANR	656636	Identifier	nextChar		656462	0					
ANR	656637	Argument	2		656462	1					
ANR	656638	PrimaryExpression	2		656462	0					
ANR	656639	Argument	"""/*"""		656462	2					
ANR	656640	PrimaryExpression	"""/*"""		656462	0					
ANR	656641	PrimaryExpression	0		656462	1					
ANR	656642	OrExpression	"( nextLine_ . compare ( nextChar , 2 , ""//"" ) == 0 ) || ( isCharPotentialHeader ( nextLine_ , nextChar ) && ASBase :: findHeader ( nextLine_ , nextChar , headers ) != nullptr )"		656462	1		||			
ANR	656643	EqualityExpression	"nextLine_ . compare ( nextChar , 2 , ""//"" ) == 0"		656462	0		==			
ANR	656644	CallExpression	"nextLine_ . compare ( nextChar , 2 , ""//"" )"		656462	0					
ANR	656645	Callee	nextLine_ . compare		656462	0					
ANR	656646	MemberAccess	nextLine_ . compare		656462	0					
ANR	656647	Identifier	nextLine_		656462	0					
ANR	656648	Identifier	compare		656462	1					
ANR	656649	ArgumentList	nextChar		656462	1					
ANR	656650	Argument	nextChar		656462	0					
ANR	656651	Identifier	nextChar		656462	0					
ANR	656652	Argument	2		656462	1					
ANR	656653	PrimaryExpression	2		656462	0					
ANR	656654	Argument	"""//"""		656462	2					
ANR	656655	PrimaryExpression	"""//"""		656462	0					
ANR	656656	PrimaryExpression	0		656462	1					
ANR	656657	AndExpression	"isCharPotentialHeader ( nextLine_ , nextChar ) && ASBase :: findHeader ( nextLine_ , nextChar , headers ) != nullptr"		656462	1		&&			
ANR	656658	CallExpression	"isCharPotentialHeader ( nextLine_ , nextChar )"		656462	0					
ANR	656659	Callee	isCharPotentialHeader		656462	0					
ANR	656660	Identifier	isCharPotentialHeader		656462	0					
ANR	656661	ArgumentList	nextLine_		656462	1					
ANR	656662	Argument	nextLine_		656462	0					
ANR	656663	Identifier	nextLine_		656462	0					
ANR	656664	Argument	nextChar		656462	1					
ANR	656665	Identifier	nextChar		656462	0					
ANR	656666	EqualityExpression	"ASBase :: findHeader ( nextLine_ , nextChar , headers ) != nullptr"		656462	1		!=			
ANR	656667	CallExpression	"ASBase :: findHeader ( nextLine_ , nextChar , headers )"		656462	0					
ANR	656668	Callee	ASBase :: findHeader		656462	0					
ANR	656669	Identifier	ASBase :: findHeader		656462	0					
ANR	656670	ArgumentList	nextLine_		656462	1					
ANR	656671	Argument	nextLine_		656462	0					
ANR	656672	Identifier	nextLine_		656462	0					
ANR	656673	Argument	nextChar		656462	1					
ANR	656674	Identifier	nextChar		656462	0					
ANR	656675	Argument	headers		656462	2					
ANR	656676	Identifier	headers		656462	0					
ANR	656677	Identifier	nullptr		656462	1					
ANR	656678	ReturnStatement	return false ;	6212:2:180148:180160	656462	1	True				
ANR	656679	Identifier	false		656462	0					
ANR	656680	IdentifierDeclStatement	size_t nextSemiColon = nextChar ;	6215:1:180193:180224	656462	11	True				
ANR	656681	IdentifierDecl	nextSemiColon = nextChar		656462	0					
ANR	656682	IdentifierDeclType	size_t		656462	0					
ANR	656683	Identifier	nextSemiColon		656462	1					
ANR	656684	AssignmentExpression	nextSemiColon = nextChar		656462	2		=			
ANR	656685	Identifier	nextChar		656462	0					
ANR	656686	Identifier	nextChar		656462	1					
ANR	656687	IfStatement	if ( nextLine_ [ nextChar ] != ';' )		656462	12					
ANR	656688	Condition	nextLine_ [ nextChar ] != ';'	6216:5:180231:180256	656462	0	True				
ANR	656689	EqualityExpression	nextLine_ [ nextChar ] != ';'		656462	0		!=			
ANR	656690	ArrayIndexing	nextLine_ [ nextChar ]		656462	0					
ANR	656691	Identifier	nextLine_		656462	0					
ANR	656692	Identifier	nextChar		656462	1					
ANR	656693	PrimaryExpression	';'		656462	1					
ANR	656694	ExpressionStatement	"nextSemiColon = findNextChar ( nextLine_ , ';' , nextChar + 1 )"	6217:2:180261:180319	656462	1	True				
ANR	656695	AssignmentExpression	"nextSemiColon = findNextChar ( nextLine_ , ';' , nextChar + 1 )"		656462	0		=			
ANR	656696	Identifier	nextSemiColon		656462	0					
ANR	656697	CallExpression	"findNextChar ( nextLine_ , ';' , nextChar + 1 )"		656462	1					
ANR	656698	Callee	findNextChar		656462	0					
ANR	656699	Identifier	findNextChar		656462	0					
ANR	656700	ArgumentList	nextLine_		656462	1					
ANR	656701	Argument	nextLine_		656462	0					
ANR	656702	Identifier	nextLine_		656462	0					
ANR	656703	Argument	';'		656462	1					
ANR	656704	PrimaryExpression	';'		656462	0					
ANR	656705	Argument	nextChar + 1		656462	2					
ANR	656706	AdditiveExpression	nextChar + 1		656462	0		+			
ANR	656707	Identifier	nextChar		656462	0					
ANR	656708	PrimaryExpression	1		656462	1					
ANR	656709	IfStatement	if ( nextSemiColon == string :: npos )		656462	13					
ANR	656710	Condition	nextSemiColon == string :: npos	6218:5:180326:180354	656462	0	True				
ANR	656711	EqualityExpression	nextSemiColon == string :: npos		656462	0		==			
ANR	656712	Identifier	nextSemiColon		656462	0					
ANR	656713	Identifier	string :: npos		656462	1					
ANR	656714	ReturnStatement	return false ;	6219:2:180359:180371	656462	1	True				
ANR	656715	Identifier	false		656462	0					
ANR	656716	ExpressionStatement	isFirstLine = true	6222:1:180402:180420	656462	14	True				
ANR	656717	AssignmentExpression	isFirstLine = true		656462	0		=			
ANR	656718	Identifier	isFirstLine		656462	0					
ANR	656719	Identifier	true		656462	1					
ANR	656720	ExpressionStatement	nextChar = nextSemiColon + 1	6223:1:180423:180451	656462	15	True				
ANR	656721	AssignmentExpression	nextChar = nextSemiColon + 1		656462	0		=			
ANR	656722	Identifier	nextChar		656462	0					
ANR	656723	AdditiveExpression	nextSemiColon + 1		656462	1		+			
ANR	656724	Identifier	nextSemiColon		656462	0					
ANR	656725	PrimaryExpression	1		656462	1					
ANR	656726	WhileStatement	while ( stream . hasMoreLines ( ) || isFirstLine )		656462	16					
ANR	656727	Condition	stream . hasMoreLines ( ) || isFirstLine	6224:8:180461:180496	656462	0	True				
ANR	656728	OrExpression	stream . hasMoreLines ( ) || isFirstLine		656462	0		||			
ANR	656729	CallExpression	stream . hasMoreLines ( )		656462	0					
ANR	656730	Callee	stream . hasMoreLines		656462	0					
ANR	656731	MemberAccess	stream . hasMoreLines		656462	0					
ANR	656732	Identifier	stream		656462	0					
ANR	656733	Identifier	hasMoreLines		656462	1					
ANR	656734	ArgumentList			656462	1					
ANR	656735	Identifier	isFirstLine		656462	1					
ANR	656736	CompoundStatement		57:1:1586:1586	656462	1					
ANR	656737	IfStatement	if ( isFirstLine )		656462	0					
ANR	656738	Condition	isFirstLine	6226:6:180508:180518	656462	0	True				
ANR	656739	Identifier	isFirstLine		656462	0					
ANR	656740	ExpressionStatement	isFirstLine = false	6227:3:180524:180543	656462	1	True				
ANR	656741	AssignmentExpression	isFirstLine = false		656462	0		=			
ANR	656742	Identifier	isFirstLine		656462	0					
ANR	656743	Identifier	false		656462	1					
ANR	656744	ElseStatement	else		656462	0					
ANR	656745	CompoundStatement		61:2:1640:1640	656462	0					
ANR	656746	ExpressionStatement	nextLine_ = stream . peekNextLine ( )	6230:3:180559:180592	656462	0	True				
ANR	656747	AssignmentExpression	nextLine_ = stream . peekNextLine ( )		656462	0		=			
ANR	656748	Identifier	nextLine_		656462	0					
ANR	656749	CallExpression	stream . peekNextLine ( )		656462	1					
ANR	656750	Callee	stream . peekNextLine		656462	0					
ANR	656751	MemberAccess	stream . peekNextLine		656462	0					
ANR	656752	Identifier	stream		656462	0					
ANR	656753	Identifier	peekNextLine		656462	1					
ANR	656754	ArgumentList			656462	1					
ANR	656755	ExpressionStatement	nextChar = 0	6231:3:180597:180609	656462	1	True				
ANR	656756	AssignmentExpression	nextChar = 0		656462	0		=			
ANR	656757	Identifier	nextChar		656462	0					
ANR	656758	PrimaryExpression	0		656462	1					
ANR	656759	ExpressionStatement	"nextChar = nextLine_ . find_first_not_of ( "" \\t"" , nextChar )"	6233:2:180617:180672	656462	1	True				
ANR	656760	AssignmentExpression	"nextChar = nextLine_ . find_first_not_of ( "" \\t"" , nextChar )"		656462	0		=			
ANR	656761	Identifier	nextChar		656462	0					
ANR	656762	CallExpression	"nextLine_ . find_first_not_of ( "" \\t"" , nextChar )"		656462	1					
ANR	656763	Callee	nextLine_ . find_first_not_of		656462	0					
ANR	656764	MemberAccess	nextLine_ . find_first_not_of		656462	0					
ANR	656765	Identifier	nextLine_		656462	0					
ANR	656766	Identifier	find_first_not_of		656462	1					
ANR	656767	ArgumentList	""" \\t"""		656462	1					
ANR	656768	Argument	""" \\t"""		656462	0					
ANR	656769	PrimaryExpression	""" \\t"""		656462	0					
ANR	656770	Argument	nextChar		656462	1					
ANR	656771	Identifier	nextChar		656462	0					
ANR	656772	IfStatement	if ( nextChar != string :: npos )		656462	2					
ANR	656773	Condition	nextChar != string :: npos	6234:6:180680:180703	656462	0	True				
ANR	656774	EqualityExpression	nextChar != string :: npos		656462	0		!=			
ANR	656775	Identifier	nextChar		656462	0					
ANR	656776	Identifier	string :: npos		656462	1					
ANR	656777	BreakStatement	break ;	6235:3:180709:180714	656462	1	True				
ANR	656778	IfStatement	if ( nextLine_ . length ( ) == 0 || nextLine_ [ nextChar ] != '}' )		656462	17					
ANR	656779	Condition	nextLine_ . length ( ) == 0 || nextLine_ [ nextChar ] != '}'	6237:5:180724:180776	656462	0	True				
ANR	656780	OrExpression	nextLine_ . length ( ) == 0 || nextLine_ [ nextChar ] != '}'		656462	0		||			
ANR	656781	EqualityExpression	nextLine_ . length ( ) == 0		656462	0		==			
ANR	656782	CallExpression	nextLine_ . length ( )		656462	0					
ANR	656783	Callee	nextLine_ . length		656462	0					
ANR	656784	MemberAccess	nextLine_ . length		656462	0					
ANR	656785	Identifier	nextLine_		656462	0					
ANR	656786	Identifier	length		656462	1					
ANR	656787	ArgumentList			656462	1					
ANR	656788	PrimaryExpression	0		656462	1					
ANR	656789	EqualityExpression	nextLine_ [ nextChar ] != '}'		656462	1		!=			
ANR	656790	ArrayIndexing	nextLine_ [ nextChar ]		656462	0					
ANR	656791	Identifier	nextLine_		656462	0					
ANR	656792	Identifier	nextChar		656462	1					
ANR	656793	PrimaryExpression	'}'		656462	1					
ANR	656794	ReturnStatement	return false ;	6238:2:180781:180793	656462	1	True				
ANR	656795	Identifier	false		656462	0					
ANR	656796	ExpressionStatement	currentLine [ charNum ] = currentChar = ' '	6241:1:180822:180862	656462	18	True				
ANR	656797	AssignmentExpression	currentLine [ charNum ] = currentChar = ' '		656462	0		=			
ANR	656798	ArrayIndexing	currentLine [ charNum ]		656462	0					
ANR	656799	Identifier	currentLine		656462	0					
ANR	656800	Identifier	charNum		656462	1					
ANR	656801	AssignmentExpression	currentChar = ' '		656462	1		=			
ANR	656802	Identifier	currentChar		656462	0					
ANR	656803	PrimaryExpression	' '		656462	1					
ANR	656804	ExpressionStatement	assert ( adjustChecksumIn ( - '{' ) )	6242:1:180865:180895	656462	19	True				
ANR	656805	CallExpression	assert ( adjustChecksumIn ( - '{' ) )		656462	0					
ANR	656806	Callee	assert		656462	0					
ANR	656807	Identifier	assert		656462	0					
ANR	656808	ArgumentList	adjustChecksumIn ( - '{' )		656462	1					
ANR	656809	Argument	adjustChecksumIn ( - '{' )		656462	0					
ANR	656810	CallExpression	adjustChecksumIn ( - '{' )		656462	0					
ANR	656811	Callee	adjustChecksumIn		656462	0					
ANR	656812	Identifier	adjustChecksumIn		656462	0					
ANR	656813	ArgumentList	- '{'		656462	1					
ANR	656814	Argument	- '{'		656462	0					
ANR	656815	UnaryOperationExpression	- '{'		656462	0					
ANR	656816	UnaryOperator	-		656462	0					
ANR	656817	PrimaryExpression	'{'		656462	1					
ANR	656818	ReturnStatement	return true ;	6243:1:180898:180909	656462	20	True				
ANR	656819	Identifier	true		656462	0					
ANR	656820	ReturnType	bool		656462	1					
ANR	656821	Identifier	ASFormatter :: removeBracesFromStatement		656462	2					
ANR	656822	ParameterList			656462	3					
ANR	656823	CFGEntryNode	ENTRY		656462		True				
ANR	656824	CFGExitNode	EXIT		656462		True				
ANR	656825	Symbol	nextLine_		656462						
ANR	656826	Symbol	string :: npos		656462						
ANR	656827	Symbol	& AS_FOR		656462						
ANR	656828	Symbol	stream . peekNextLine		656462						
ANR	656829	Symbol	ASBase :: findHeader		656462						
ANR	656830	Symbol	foundClosingHeader		656462						
ANR	656831	Symbol	adjustChecksumIn		656462						
ANR	656832	Symbol	isBeforeAnyLineEndComment		656462						
ANR	656833	Symbol	* currentLine		656462						
ANR	656834	Symbol	& AS_IF		656462						
ANR	656835	Symbol	stream		656462						
ANR	656836	Symbol	& AS_FOREACH		656462						
ANR	656837	Symbol	currentLine . substr		656462						
ANR	656838	Symbol	findNextChar		656462						
ANR	656839	Symbol	charNum		656462						
ANR	656840	Symbol	isFirstLine		656462						
ANR	656841	Symbol	currentLine		656462						
ANR	656842	Symbol	stream . hasMoreLines		656462						
ANR	656843	Symbol	currentChar		656462						
ANR	656844	Symbol	headers		656462						
ANR	656845	Symbol	currentLineBeginsWithBrace		656462						
ANR	656846	Symbol	nextLine_ . find_first_not_of		656462						
ANR	656847	Symbol	nextSemiColon		656462						
ANR	656848	Symbol	* nextChar		656462						
ANR	656849	Symbol	false		656462						
ANR	656850	Symbol	isImmediatelyPostHeader		656462						
ANR	656851	Symbol	nextLine_ . compare		656462						
ANR	656852	Symbol	& AS_ELSE		656462						
ANR	656853	Symbol	& AS_WHILE		656462						
ANR	656854	Symbol	* nextLine_		656462						
ANR	656855	Symbol	currentHeader		656462						
ANR	656856	Symbol	isCharPotentialHeader		656462						
ANR	656857	Symbol	* charNum		656462						
ANR	656858	Symbol	nextChar		656462						
ANR	656859	Symbol	true		656462						
ANR	656860	Symbol	nullptr		656462						
ANR	656861	Symbol	nextLine_ . length		656462						
ANR	656862	Function	ASFormatter :: findNextChar	6254:0:181213:182379							
ANR	656863	FunctionDef	"ASFormatter :: findNextChar (const string & line , char searchChar , int searchStart)"		656862	0					
ANR	656864	CompoundStatement		6255:0:181312:182379	656862	0					
ANR	656865	IdentifierDeclStatement	size_t i ;	6257:1:181344:181352	656862	0	True				
ANR	656866	IdentifierDecl	i		656862	0					
ANR	656867	IdentifierDeclType	size_t		656862	0					
ANR	656868	Identifier	i		656862	1					
ANR	656869	ForStatement	for ( i = searchStart ; i < line . length ( ) ; i ++ )		656862	1					
ANR	656870	ForInit	i = searchStart ;	6258:6:181360:181375	656862	0	True				
ANR	656871	AssignmentExpression	i = searchStart		656862	0		=			
ANR	656872	Identifier	i		656862	0					
ANR	656873	Identifier	searchStart		656862	1					
ANR	656874	Condition	i < line . length ( )	6258:23:181377:181393	656862	1	True				
ANR	656875	RelationalExpression	i < line . length ( )		656862	0		<			
ANR	656876	Identifier	i		656862	0					
ANR	656877	CallExpression	line . length ( )		656862	1					
ANR	656878	Callee	line . length		656862	0					
ANR	656879	MemberAccess	line . length		656862	0					
ANR	656880	Identifier	line		656862	0					
ANR	656881	Identifier	length		656862	1					
ANR	656882	ArgumentList			656862	1					
ANR	656883	PostIncDecOperationExpression	i ++	6258:42:181396:181398	656862	2	True				
ANR	656884	Identifier	i		656862	0					
ANR	656885	IncDec	++		656862	1					
ANR	656886	CompoundStatement		5:1:89:89	656862	3					
ANR	656887	IfStatement	"if ( line . compare ( i , 2 , ""//"" ) == 0 )"		656862	0					
ANR	656888	Condition	"line . compare ( i , 2 , ""//"" ) == 0"	6260:6:181410:181438	656862	0	True				
ANR	656889	EqualityExpression	"line . compare ( i , 2 , ""//"" ) == 0"		656862	0		==			
ANR	656890	CallExpression	"line . compare ( i , 2 , ""//"" )"		656862	0					
ANR	656891	Callee	line . compare		656862	0					
ANR	656892	MemberAccess	line . compare		656862	0					
ANR	656893	Identifier	line		656862	0					
ANR	656894	Identifier	compare		656862	1					
ANR	656895	ArgumentList	i		656862	1					
ANR	656896	Argument	i		656862	0					
ANR	656897	Identifier	i		656862	0					
ANR	656898	Argument	2		656862	1					
ANR	656899	PrimaryExpression	2		656862	0					
ANR	656900	Argument	"""//"""		656862	2					
ANR	656901	PrimaryExpression	"""//"""		656862	0					
ANR	656902	PrimaryExpression	0		656862	1					
ANR	656903	ReturnStatement	return string :: npos ;	6261:3:181444:181463	656862	1	True				
ANR	656904	Identifier	string :: npos		656862	0					
ANR	656905	IfStatement	"if ( line . compare ( i , 2 , ""/*"" ) == 0 )"		656862	1					
ANR	656906	Condition	"line . compare ( i , 2 , ""/*"" ) == 0"	6262:6:181471:181499	656862	0	True				
ANR	656907	EqualityExpression	"line . compare ( i , 2 , ""/*"" ) == 0"		656862	0		==			
ANR	656908	CallExpression	"line . compare ( i , 2 , ""/*"" )"		656862	0					
ANR	656909	Callee	line . compare		656862	0					
ANR	656910	MemberAccess	line . compare		656862	0					
ANR	656911	Identifier	line		656862	0					
ANR	656912	Identifier	compare		656862	1					
ANR	656913	ArgumentList	i		656862	1					
ANR	656914	Argument	i		656862	0					
ANR	656915	Identifier	i		656862	0					
ANR	656916	Argument	2		656862	1					
ANR	656917	PrimaryExpression	2		656862	0					
ANR	656918	Argument	"""/*"""		656862	2					
ANR	656919	PrimaryExpression	"""/*"""		656862	0					
ANR	656920	PrimaryExpression	0		656862	1					
ANR	656921	CompoundStatement		10:3:196:238	656862	1					
ANR	656922	IdentifierDeclStatement	"size_t endComment = line . find ( ""*/"" , i + 2 ) ;"	6264:3:181509:181551	656862	0	True				
ANR	656923	IdentifierDecl	"endComment = line . find ( ""*/"" , i + 2 )"		656862	0					
ANR	656924	IdentifierDeclType	size_t		656862	0					
ANR	656925	Identifier	endComment		656862	1					
ANR	656926	AssignmentExpression	"endComment = line . find ( ""*/"" , i + 2 )"		656862	2		=			
ANR	656927	Identifier	endComment		656862	0					
ANR	656928	CallExpression	"line . find ( ""*/"" , i + 2 )"		656862	1					
ANR	656929	Callee	line . find		656862	0					
ANR	656930	MemberAccess	line . find		656862	0					
ANR	656931	Identifier	line		656862	0					
ANR	656932	Identifier	find		656862	1					
ANR	656933	ArgumentList	"""*/"""		656862	1					
ANR	656934	Argument	"""*/"""		656862	0					
ANR	656935	PrimaryExpression	"""*/"""		656862	0					
ANR	656936	Argument	i + 2		656862	1					
ANR	656937	AdditiveExpression	i + 2		656862	0		+			
ANR	656938	Identifier	i		656862	0					
ANR	656939	PrimaryExpression	2		656862	1					
ANR	656940	IfStatement	if ( endComment == string :: npos )		656862	1					
ANR	656941	Condition	endComment == string :: npos	6265:7:181560:181585	656862	0	True				
ANR	656942	EqualityExpression	endComment == string :: npos		656862	0		==			
ANR	656943	Identifier	endComment		656862	0					
ANR	656944	Identifier	string :: npos		656862	1					
ANR	656945	ReturnStatement	return string :: npos ;	6266:4:181592:181611	656862	1	True				
ANR	656946	Identifier	string :: npos		656862	0					
ANR	656947	ExpressionStatement	i = endComment + 2	6267:3:181616:181634	656862	2	True				
ANR	656948	AssignmentExpression	i = endComment + 2		656862	0		=			
ANR	656949	Identifier	i		656862	0					
ANR	656950	AdditiveExpression	endComment + 2		656862	1		+			
ANR	656951	Identifier	endComment		656862	0					
ANR	656952	PrimaryExpression	2		656862	1					
ANR	656953	IfStatement	if ( i >= line . length ( ) )		656862	3					
ANR	656954	Condition	i >= line . length ( )	6268:7:181643:181660	656862	0	True				
ANR	656955	RelationalExpression	i >= line . length ( )		656862	0		>=			
ANR	656956	Identifier	i		656862	0					
ANR	656957	CallExpression	line . length ( )		656862	1					
ANR	656958	Callee	line . length		656862	0					
ANR	656959	MemberAccess	line . length		656862	0					
ANR	656960	Identifier	line		656862	0					
ANR	656961	Identifier	length		656862	1					
ANR	656962	ArgumentList			656862	1					
ANR	656963	ReturnStatement	return string :: npos ;	6269:4:181667:181686	656862	1	True				
ANR	656964	Identifier	string :: npos		656862	0					
ANR	656965	IfStatement	"if ( line [ i ] == '""' || ( line [ i ] == '\\'' && ! isDigitSeparator ( line , i ) ) )"		656862	2					
ANR	656966	Condition	"line [ i ] == '""' || ( line [ i ] == '\\'' && ! isDigitSeparator ( line , i ) )"	6271:6:181698:181772	656862	0	True				
ANR	656967	OrExpression	"line [ i ] == '""' || ( line [ i ] == '\\'' && ! isDigitSeparator ( line , i ) )"		656862	0		||			
ANR	656968	EqualityExpression	"line [ i ] == '""'"		656862	0		==			
ANR	656969	ArrayIndexing	line [ i ]		656862	0					
ANR	656970	Identifier	line		656862	0					
ANR	656971	Identifier	i		656862	1					
ANR	656972	PrimaryExpression	"'""'"		656862	1					
ANR	656973	AndExpression	"line [ i ] == '\\'' && ! isDigitSeparator ( line , i )"		656862	1		&&			
ANR	656974	EqualityExpression	line [ i ] == '\\''		656862	0		==			
ANR	656975	ArrayIndexing	line [ i ]		656862	0					
ANR	656976	Identifier	line		656862	0					
ANR	656977	Identifier	i		656862	1					
ANR	656978	PrimaryExpression	'\\''		656862	1					
ANR	656979	UnaryOperationExpression	"! isDigitSeparator ( line , i )"		656862	1					
ANR	656980	UnaryOperator	!		656862	0					
ANR	656981	CallExpression	"isDigitSeparator ( line , i )"		656862	1					
ANR	656982	Callee	isDigitSeparator		656862	0					
ANR	656983	Identifier	isDigitSeparator		656862	0					
ANR	656984	ArgumentList	line		656862	1					
ANR	656985	Argument	line		656862	0					
ANR	656986	Identifier	line		656862	0					
ANR	656987	Argument	i		656862	1					
ANR	656988	Identifier	i		656862	0					
ANR	656989	CompoundStatement		20:3:469:489	656862	1					
ANR	656990	IdentifierDeclStatement	char quote = line [ i ] ;	6274:3:181782:181802	656862	0	True				
ANR	656991	IdentifierDecl	quote = line [ i ]		656862	0					
ANR	656992	IdentifierDeclType	char		656862	0					
ANR	656993	Identifier	quote		656862	1					
ANR	656994	AssignmentExpression	quote = line [ i ]		656862	2		=			
ANR	656995	Identifier	quote		656862	0					
ANR	656996	ArrayIndexing	line [ i ]		656862	1					
ANR	656997	Identifier	line		656862	0					
ANR	656998	Identifier	i		656862	1					
ANR	656999	WhileStatement	while ( i < line . length ( ) )		656862	1					
ANR	657000	Condition	i < line . length ( )	6275:10:181814:181830	656862	0	True				
ANR	657001	RelationalExpression	i < line . length ( )		656862	0		<			
ANR	657002	Identifier	i		656862	0					
ANR	657003	CallExpression	line . length ( )		656862	1					
ANR	657004	Callee	line . length		656862	0					
ANR	657005	MemberAccess	line . length		656862	0					
ANR	657006	Identifier	line		656862	0					
ANR	657007	Identifier	length		656862	1					
ANR	657008	ArgumentList			656862	1					
ANR	657009	CompoundStatement		23:4:529:570	656862	1					
ANR	657010	IdentifierDeclStatement	"size_t endQuote = line . find ( quote , i + 1 ) ;"	6277:4:181842:181883	656862	0	True				
ANR	657011	IdentifierDecl	"endQuote = line . find ( quote , i + 1 )"		656862	0					
ANR	657012	IdentifierDeclType	size_t		656862	0					
ANR	657013	Identifier	endQuote		656862	1					
ANR	657014	AssignmentExpression	"endQuote = line . find ( quote , i + 1 )"		656862	2		=			
ANR	657015	Identifier	endQuote		656862	0					
ANR	657016	CallExpression	"line . find ( quote , i + 1 )"		656862	1					
ANR	657017	Callee	line . find		656862	0					
ANR	657018	MemberAccess	line . find		656862	0					
ANR	657019	Identifier	line		656862	0					
ANR	657020	Identifier	find		656862	1					
ANR	657021	ArgumentList	quote		656862	1					
ANR	657022	Argument	quote		656862	0					
ANR	657023	Identifier	quote		656862	0					
ANR	657024	Argument	i + 1		656862	1					
ANR	657025	AdditiveExpression	i + 1		656862	0		+			
ANR	657026	Identifier	i		656862	0					
ANR	657027	PrimaryExpression	1		656862	1					
ANR	657028	IfStatement	if ( endQuote == string :: npos )		656862	1					
ANR	657029	Condition	endQuote == string :: npos	6278:8:181893:181916	656862	0	True				
ANR	657030	EqualityExpression	endQuote == string :: npos		656862	0		==			
ANR	657031	Identifier	endQuote		656862	0					
ANR	657032	Identifier	string :: npos		656862	1					
ANR	657033	ReturnStatement	return string :: npos ;	6279:5:181924:181943	656862	1	True				
ANR	657034	Identifier	string :: npos		656862	0					
ANR	657035	ExpressionStatement	i = endQuote	6280:4:181949:181961	656862	2	True				
ANR	657036	AssignmentExpression	i = endQuote		656862	0		=			
ANR	657037	Identifier	i		656862	0					
ANR	657038	Identifier	endQuote		656862	1					
ANR	657039	IfStatement	if ( line [ endQuote - 1 ] != '\\\\' )		656862	3					
ANR	657040	Condition	line [ endQuote - 1 ] != '\\\\'	6281:8:181971:181996	656862	0	True				
ANR	657041	EqualityExpression	line [ endQuote - 1 ] != '\\\\'		656862	0		!=			
ANR	657042	ArrayIndexing	line [ endQuote - 1 ]		656862	0					
ANR	657043	Identifier	line		656862	0					
ANR	657044	AdditiveExpression	endQuote - 1		656862	1		-			
ANR	657045	Identifier	endQuote		656862	0					
ANR	657046	PrimaryExpression	1		656862	1					
ANR	657047	PrimaryExpression	'\\\\'		656862	1					
ANR	657048	BreakStatement	break ;	6282:5:182022:182027	656862	1	True				
ANR	657049	IfStatement	if ( line [ endQuote - 2 ] == '\\\\' )		656862	4					
ANR	657050	Condition	line [ endQuote - 2 ] == '\\\\'	6283:8:182037:182062	656862	0	True				
ANR	657051	EqualityExpression	line [ endQuote - 2 ] == '\\\\'		656862	0		==			
ANR	657052	ArrayIndexing	line [ endQuote - 2 ]		656862	0					
ANR	657053	Identifier	line		656862	0					
ANR	657054	AdditiveExpression	endQuote - 2		656862	1		-			
ANR	657055	Identifier	endQuote		656862	0					
ANR	657056	PrimaryExpression	2		656862	1					
ANR	657057	PrimaryExpression	'\\\\'		656862	1					
ANR	657058	BreakStatement	break ;	6284:5:182088:182093	656862	1	True				
ANR	657059	IfStatement	if ( line [ i ] == searchChar )		656862	3					
ANR	657060	Condition	line [ i ] == searchChar	6288:6:182111:182131	656862	0	True				
ANR	657061	EqualityExpression	line [ i ] == searchChar		656862	0		==			
ANR	657062	ArrayIndexing	line [ i ]		656862	0					
ANR	657063	Identifier	line		656862	0					
ANR	657064	Identifier	i		656862	1					
ANR	657065	Identifier	searchChar		656862	1					
ANR	657066	BreakStatement	break ;	6289:3:182137:182142	656862	1	True				
ANR	657067	IfStatement	if ( line [ i ] == '{' )		656862	4					
ANR	657068	Condition	line [ i ] == '{'	6293:6:182250:182263	656862	0	True				
ANR	657069	EqualityExpression	line [ i ] == '{'		656862	0		==			
ANR	657070	ArrayIndexing	line [ i ]		656862	0					
ANR	657071	Identifier	line		656862	0					
ANR	657072	Identifier	i		656862	1					
ANR	657073	PrimaryExpression	'{'		656862	1					
ANR	657074	ReturnStatement	return string :: npos ;	6294:3:182269:182288	656862	1	True				
ANR	657075	Identifier	string :: npos		656862	0					
ANR	657076	IfStatement	if ( i >= line . length ( ) )		656862	2					
ANR	657077	Condition	i >= line . length ( )	6296:5:182298:182315	656862	0	True				
ANR	657078	RelationalExpression	i >= line . length ( )		656862	0		>=			
ANR	657079	Identifier	i		656862	0					
ANR	657080	CallExpression	line . length ( )		656862	1					
ANR	657081	Callee	line . length		656862	0					
ANR	657082	MemberAccess	line . length		656862	0					
ANR	657083	Identifier	line		656862	0					
ANR	657084	Identifier	length		656862	1					
ANR	657085	ArgumentList			656862	1					
ANR	657086	ReturnStatement	return string :: npos ;	6297:2:182346:182365	656862	1	True				
ANR	657087	Identifier	string :: npos		656862	0					
ANR	657088	ReturnStatement	return i ;	6299:1:182369:182377	656862	3	True				
ANR	657089	Identifier	i		656862	0					
ANR	657090	ReturnType	size_t		656862	1					
ANR	657091	Identifier	ASFormatter :: findNextChar		656862	2					
ANR	657092	ParameterList	"const string & line , char searchChar , int searchStart"		656862	3					
ANR	657093	Parameter	const string & line	6254:33:181246:181263	656862	0	True				
ANR	657094	ParameterType	const string &		656862	0					
ANR	657095	Identifier	line		656862	1					
ANR	657096	Parameter	char searchChar	6254:53:181266:181280	656862	1	True				
ANR	657097	ParameterType	char		656862	0					
ANR	657098	Identifier	searchChar		656862	1					
ANR	657099	Parameter	int searchStart	6254:70:181283:181297	656862	2	True				
ANR	657100	ParameterType	int		656862	0					
ANR	657101	Identifier	searchStart		656862	1					
ANR	657102	CFGEntryNode	ENTRY		656862		True				
ANR	657103	CFGExitNode	EXIT		656862		True				
ANR	657104	Symbol	searchChar		656862						
ANR	657105	Symbol	line . compare		656862						
ANR	657106	Symbol	line . find		656862						
ANR	657107	Symbol	line		656862						
ANR	657108	Symbol	searchStart		656862						
ANR	657109	Symbol	string :: npos		656862						
ANR	657110	Symbol	i		656862						
ANR	657111	Symbol	* line		656862						
ANR	657112	Symbol	endComment		656862						
ANR	657113	Symbol	* i		656862						
ANR	657114	Symbol	quote		656862						
ANR	657115	Symbol	endQuote		656862						
ANR	657116	Symbol	isDigitSeparator		656862						
ANR	657117	Symbol	* endQuote		656862						
ANR	657118	Symbol	line . length		656862						
ANR	657119	Function	ASFormatter :: isStructAccessModified	6309:0:182632:184521							
ANR	657120	FunctionDef	"ASFormatter :: isStructAccessModified (const string & firstLine , size_t index)"		657119	0					
ANR	657121	CompoundStatement		6310:0:182718:184521	657119	0					
ANR	657122	ExpressionStatement	assert ( firstLine [ index ] == '{' )	6311:1:182721:182752	657119	0	True				
ANR	657123	CallExpression	assert ( firstLine [ index ] == '{' )		657119	0					
ANR	657124	Callee	assert		657119	0					
ANR	657125	Identifier	assert		657119	0					
ANR	657126	ArgumentList	firstLine [ index ] == '{'		657119	1					
ANR	657127	Argument	firstLine [ index ] == '{'		657119	0					
ANR	657128	EqualityExpression	firstLine [ index ] == '{'		657119	0		==			
ANR	657129	ArrayIndexing	firstLine [ index ]		657119	0					
ANR	657130	Identifier	firstLine		657119	0					
ANR	657131	Identifier	index		657119	1					
ANR	657132	PrimaryExpression	'{'		657119	1					
ANR	657133	ExpressionStatement	assert ( isCStyle ( ) )	6312:1:182755:182773	657119	1	True				
ANR	657134	CallExpression	assert ( isCStyle ( ) )		657119	0					
ANR	657135	Callee	assert		657119	0					
ANR	657136	Identifier	assert		657119	0					
ANR	657137	ArgumentList	isCStyle ( )		657119	1					
ANR	657138	Argument	isCStyle ( )		657119	0					
ANR	657139	CallExpression	isCStyle ( )		657119	0					
ANR	657140	Callee	isCStyle		657119	0					
ANR	657141	Identifier	isCStyle		657119	0					
ANR	657142	ArgumentList			657119	1					
ANR	657143	IdentifierDeclStatement	bool isFirstLine = true ;	6314:1:182777:182800	657119	2	True				
ANR	657144	IdentifierDecl	isFirstLine = true		657119	0					
ANR	657145	IdentifierDeclType	bool		657119	0					
ANR	657146	Identifier	isFirstLine		657119	1					
ANR	657147	AssignmentExpression	isFirstLine = true		657119	2		=			
ANR	657148	Identifier	true		657119	0					
ANR	657149	Identifier	true		657119	1					
ANR	657150	IdentifierDeclStatement	size_t braceCount = 1 ;	6315:1:182803:182824	657119	3	True				
ANR	657151	IdentifierDecl	braceCount = 1		657119	0					
ANR	657152	IdentifierDeclType	size_t		657119	0					
ANR	657153	Identifier	braceCount		657119	1					
ANR	657154	AssignmentExpression	braceCount = 1		657119	2		=			
ANR	657155	Identifier	braceCount		657119	0					
ANR	657156	PrimaryExpression	1		657119	1					
ANR	657157	IdentifierDeclStatement	string nextLine_ = firstLine . substr ( index + 1 ) ;	6316:1:182827:182873	657119	4	True				
ANR	657158	IdentifierDecl	nextLine_ = firstLine . substr ( index + 1 )		657119	0					
ANR	657159	IdentifierDeclType	string		657119	0					
ANR	657160	Identifier	nextLine_		657119	1					
ANR	657161	AssignmentExpression	nextLine_ = firstLine . substr ( index + 1 )		657119	2		=			
ANR	657162	Identifier	nextLine_		657119	0					
ANR	657163	CallExpression	firstLine . substr ( index + 1 )		657119	1					
ANR	657164	Callee	firstLine . substr		657119	0					
ANR	657165	MemberAccess	firstLine . substr		657119	0					
ANR	657166	Identifier	firstLine		657119	0					
ANR	657167	Identifier	substr		657119	1					
ANR	657168	ArgumentList	index + 1		657119	1					
ANR	657169	Argument	index + 1		657119	0					
ANR	657170	AdditiveExpression	index + 1		657119	0		+			
ANR	657171	Identifier	index		657119	0					
ANR	657172	PrimaryExpression	1		657119	1					
ANR	657173	IdentifierDeclStatement	ASPeekStream stream ( sourceIterator ) ;	6317:1:182876:182911	657119	5	True				
ANR	657174	IdentifierDecl	stream ( sourceIterator )		657119	0					
ANR	657175	IdentifierDeclType	ASPeekStream		657119	0					
ANR	657176	Identifier	stream		657119	1					
ANR	657177	Identifier	sourceIterator		657119	2					
ANR	657178	IdentifierDeclStatement	bool isInComment_ = false ;	6320:1:182985:183010	657119	6	True				
ANR	657179	IdentifierDecl	isInComment_ = false		657119	0					
ANR	657180	IdentifierDeclType	bool		657119	0					
ANR	657181	Identifier	isInComment_		657119	1					
ANR	657182	AssignmentExpression	isInComment_ = false		657119	2		=			
ANR	657183	Identifier	false		657119	0					
ANR	657184	Identifier	false		657119	1					
ANR	657185	IdentifierDeclStatement	bool isInQuote_ = false ;	6321:1:183013:183036	657119	7	True				
ANR	657186	IdentifierDecl	isInQuote_ = false		657119	0					
ANR	657187	IdentifierDeclType	bool		657119	0					
ANR	657188	Identifier	isInQuote_		657119	1					
ANR	657189	AssignmentExpression	isInQuote_ = false		657119	2		=			
ANR	657190	Identifier	false		657119	0					
ANR	657191	Identifier	false		657119	1					
ANR	657192	IdentifierDeclStatement	char quoteChar_ = ' ' ;	6322:1:183039:183060	657119	8	True				
ANR	657193	IdentifierDecl	quoteChar_ = ' '		657119	0					
ANR	657194	IdentifierDeclType	char		657119	0					
ANR	657195	Identifier	quoteChar_		657119	1					
ANR	657196	AssignmentExpression	quoteChar_ = ' '		657119	2		=			
ANR	657197	Identifier	quoteChar_		657119	0					
ANR	657198	PrimaryExpression	' '		657119	1					
ANR	657199	WhileStatement	while ( stream . hasMoreLines ( ) || isFirstLine )		657119	9					
ANR	657200	Condition	stream . hasMoreLines ( ) || isFirstLine	6323:8:183070:183105	657119	0	True				
ANR	657201	OrExpression	stream . hasMoreLines ( ) || isFirstLine		657119	0		||			
ANR	657202	CallExpression	stream . hasMoreLines ( )		657119	0					
ANR	657203	Callee	stream . hasMoreLines		657119	0					
ANR	657204	MemberAccess	stream . hasMoreLines		657119	0					
ANR	657205	Identifier	stream		657119	0					
ANR	657206	Identifier	hasMoreLines		657119	1					
ANR	657207	ArgumentList			657119	1					
ANR	657208	Identifier	isFirstLine		657119	1					
ANR	657209	CompoundStatement		15:1:390:390	657119	1					
ANR	657210	IfStatement	if ( isFirstLine )		657119	0					
ANR	657211	Condition	isFirstLine	6325:6:183117:183127	657119	0	True				
ANR	657212	Identifier	isFirstLine		657119	0					
ANR	657213	ExpressionStatement	isFirstLine = false	6326:3:183133:183152	657119	1	True				
ANR	657214	AssignmentExpression	isFirstLine = false		657119	0		=			
ANR	657215	Identifier	isFirstLine		657119	0					
ANR	657216	Identifier	false		657119	1					
ANR	657217	ElseStatement	else		657119	0					
ANR	657218	ExpressionStatement	nextLine_ = stream . peekNextLine ( )	6328:3:183164:183197	657119	0	True				
ANR	657219	AssignmentExpression	nextLine_ = stream . peekNextLine ( )		657119	0		=			
ANR	657220	Identifier	nextLine_		657119	0					
ANR	657221	CallExpression	stream . peekNextLine ( )		657119	1					
ANR	657222	Callee	stream . peekNextLine		657119	0					
ANR	657223	MemberAccess	stream . peekNextLine		657119	0					
ANR	657224	Identifier	stream		657119	0					
ANR	657225	Identifier	peekNextLine		657119	1					
ANR	657226	ArgumentList			657119	1					
ANR	657227	ForStatement	for ( size_t i = 0 ; i < nextLine_ . length ( ) ; i ++ )		657119	1					
ANR	657228	ForInit	size_t i = 0 ;	6330:7:183226:183238	657119	0	True				
ANR	657229	IdentifierDeclStatement	size_t i = 0 ;		657119	0					
ANR	657230	IdentifierDecl	i = 0		657119	0					
ANR	657231	IdentifierDeclType	size_t		657119	0					
ANR	657232	Identifier	i		657119	1					
ANR	657233	AssignmentExpression	i = 0		657119	2		=			
ANR	657234	Identifier	i		657119	0					
ANR	657235	PrimaryExpression	0		657119	1					
ANR	657236	Condition	i < nextLine_ . length ( )	6330:21:183240:183261	657119	1	True				
ANR	657237	RelationalExpression	i < nextLine_ . length ( )		657119	0		<			
ANR	657238	Identifier	i		657119	0					
ANR	657239	CallExpression	nextLine_ . length ( )		657119	1					
ANR	657240	Callee	nextLine_ . length		657119	0					
ANR	657241	MemberAccess	nextLine_ . length		657119	0					
ANR	657242	Identifier	nextLine_		657119	0					
ANR	657243	Identifier	length		657119	1					
ANR	657244	ArgumentList			657119	1					
ANR	657245	PostIncDecOperationExpression	i ++	6330:45:183264:183266	657119	2	True				
ANR	657246	Identifier	i		657119	0					
ANR	657247	IncDec	++		657119	1					
ANR	657248	CompoundStatement		22:2:552:552	657119	3					
ANR	657249	IfStatement	if ( isWhiteSpace ( nextLine_ [ i ] ) )		657119	0					
ANR	657250	Condition	isWhiteSpace ( nextLine_ [ i ] )	6332:7:183280:183305	657119	0	True				
ANR	657251	CallExpression	isWhiteSpace ( nextLine_ [ i ] )		657119	0					
ANR	657252	Callee	isWhiteSpace		657119	0					
ANR	657253	Identifier	isWhiteSpace		657119	0					
ANR	657254	ArgumentList	nextLine_ [ i ]		657119	1					
ANR	657255	Argument	nextLine_ [ i ]		657119	0					
ANR	657256	ArrayIndexing	nextLine_ [ i ]		657119	0					
ANR	657257	Identifier	nextLine_		657119	0					
ANR	657258	Identifier	i		657119	1					
ANR	657259	ContinueStatement	continue ;	6333:4:183312:183320	657119	1	True				
ANR	657260	IfStatement	"if ( nextLine_ . compare ( i , 2 , ""/*"" ) == 0 )"		657119	1					
ANR	657261	Condition	"nextLine_ . compare ( i , 2 , ""/*"" ) == 0"	6334:7:183329:183362	657119	0	True				
ANR	657262	EqualityExpression	"nextLine_ . compare ( i , 2 , ""/*"" ) == 0"		657119	0		==			
ANR	657263	CallExpression	"nextLine_ . compare ( i , 2 , ""/*"" )"		657119	0					
ANR	657264	Callee	nextLine_ . compare		657119	0					
ANR	657265	MemberAccess	nextLine_ . compare		657119	0					
ANR	657266	Identifier	nextLine_		657119	0					
ANR	657267	Identifier	compare		657119	1					
ANR	657268	ArgumentList	i		657119	1					
ANR	657269	Argument	i		657119	0					
ANR	657270	Identifier	i		657119	0					
ANR	657271	Argument	2		657119	1					
ANR	657272	PrimaryExpression	2		657119	0					
ANR	657273	Argument	"""/*"""		657119	2					
ANR	657274	PrimaryExpression	"""/*"""		657119	0					
ANR	657275	PrimaryExpression	0		657119	1					
ANR	657276	ExpressionStatement	isInComment_ = true	6335:4:183369:183388	657119	1	True				
ANR	657277	AssignmentExpression	isInComment_ = true		657119	0		=			
ANR	657278	Identifier	isInComment_		657119	0					
ANR	657279	Identifier	true		657119	1					
ANR	657280	IfStatement	if ( isInComment_ )		657119	2					
ANR	657281	Condition	isInComment_	6336:7:183397:183408	657119	0	True				
ANR	657282	Identifier	isInComment_		657119	0					
ANR	657283	CompoundStatement		28:3:695:695	657119	1					
ANR	657284	IfStatement	"if ( nextLine_ . compare ( i , 2 , ""*/"" ) == 0 )"		657119	0					
ANR	657285	Condition	"nextLine_ . compare ( i , 2 , ""*/"" ) == 0"	6338:8:183424:183457	657119	0	True				
ANR	657286	EqualityExpression	"nextLine_ . compare ( i , 2 , ""*/"" ) == 0"		657119	0		==			
ANR	657287	CallExpression	"nextLine_ . compare ( i , 2 , ""*/"" )"		657119	0					
ANR	657288	Callee	nextLine_ . compare		657119	0					
ANR	657289	MemberAccess	nextLine_ . compare		657119	0					
ANR	657290	Identifier	nextLine_		657119	0					
ANR	657291	Identifier	compare		657119	1					
ANR	657292	ArgumentList	i		657119	1					
ANR	657293	Argument	i		657119	0					
ANR	657294	Identifier	i		657119	0					
ANR	657295	Argument	2		657119	1					
ANR	657296	PrimaryExpression	2		657119	0					
ANR	657297	Argument	"""*/"""		657119	2					
ANR	657298	PrimaryExpression	"""*/"""		657119	0					
ANR	657299	PrimaryExpression	0		657119	1					
ANR	657300	CompoundStatement		30:4:745:745	657119	1					
ANR	657301	ExpressionStatement	isInComment_ = false	6340:5:183471:183491	657119	0	True				
ANR	657302	AssignmentExpression	isInComment_ = false		657119	0		=			
ANR	657303	Identifier	isInComment_		657119	0					
ANR	657304	Identifier	false		657119	1					
ANR	657305	ExpressionStatement	++ i	6341:5:183498:183501	657119	1	True				
ANR	657306	UnaryExpression	++ i		657119	0					
ANR	657307	IncDec	++		657119	0					
ANR	657308	Identifier	i		657119	1					
ANR	657309	ContinueStatement	continue ;	6343:4:183513:183521	657119	1	True				
ANR	657310	IfStatement	if ( nextLine_ [ i ] == '\\\\' )		657119	3					
ANR	657311	Condition	nextLine_ [ i ] == '\\\\'	6345:7:183535:183554	657119	0	True				
ANR	657312	EqualityExpression	nextLine_ [ i ] == '\\\\'		657119	0		==			
ANR	657313	ArrayIndexing	nextLine_ [ i ]		657119	0					
ANR	657314	Identifier	nextLine_		657119	0					
ANR	657315	Identifier	i		657119	1					
ANR	657316	PrimaryExpression	'\\\\'		657119	1					
ANR	657317	CompoundStatement		37:3:841:841	657119	1					
ANR	657318	ExpressionStatement	++ i	6347:4:183566:183569	657119	0	True				
ANR	657319	UnaryExpression	++ i		657119	0					
ANR	657320	IncDec	++		657119	0					
ANR	657321	Identifier	i		657119	1					
ANR	657322	ContinueStatement	continue ;	6348:4:183575:183583	657119	1	True				
ANR	657323	IfStatement	if ( isInQuote_ )		657119	4					
ANR	657324	Condition	isInQuote_	6351:7:183598:183607	657119	0	True				
ANR	657325	Identifier	isInQuote_		657119	0					
ANR	657326	CompoundStatement		43:3:894:894	657119	1					
ANR	657327	IfStatement	if ( nextLine_ [ i ] == quoteChar_ )		657119	0					
ANR	657328	Condition	nextLine_ [ i ] == quoteChar_	6353:8:183623:183648	657119	0	True				
ANR	657329	EqualityExpression	nextLine_ [ i ] == quoteChar_		657119	0		==			
ANR	657330	ArrayIndexing	nextLine_ [ i ]		657119	0					
ANR	657331	Identifier	nextLine_		657119	0					
ANR	657332	Identifier	i		657119	1					
ANR	657333	Identifier	quoteChar_		657119	1					
ANR	657334	ExpressionStatement	isInQuote_ = false	6354:5:183656:183674	657119	1	True				
ANR	657335	AssignmentExpression	isInQuote_ = false		657119	0		=			
ANR	657336	Identifier	isInQuote_		657119	0					
ANR	657337	Identifier	false		657119	1					
ANR	657338	ContinueStatement	continue ;	6355:4:183680:183688	657119	1	True				
ANR	657339	IfStatement	"if ( nextLine_ [ i ] == '""' || ( nextLine_ [ i ] == '\\'' && ! isDigitSeparator ( nextLine_ , i ) ) )"		657119	5					
ANR	657340	Condition	"nextLine_ [ i ] == '""' || ( nextLine_ [ i ] == '\\'' && ! isDigitSeparator ( nextLine_ , i ) )"	6358:7:183703:183793	657119	0	True				
ANR	657341	OrExpression	"nextLine_ [ i ] == '""' || ( nextLine_ [ i ] == '\\'' && ! isDigitSeparator ( nextLine_ , i ) )"		657119	0		||			
ANR	657342	EqualityExpression	"nextLine_ [ i ] == '""'"		657119	0		==			
ANR	657343	ArrayIndexing	nextLine_ [ i ]		657119	0					
ANR	657344	Identifier	nextLine_		657119	0					
ANR	657345	Identifier	i		657119	1					
ANR	657346	PrimaryExpression	"'""'"		657119	1					
ANR	657347	AndExpression	"nextLine_ [ i ] == '\\'' && ! isDigitSeparator ( nextLine_ , i )"		657119	1		&&			
ANR	657348	EqualityExpression	nextLine_ [ i ] == '\\''		657119	0		==			
ANR	657349	ArrayIndexing	nextLine_ [ i ]		657119	0					
ANR	657350	Identifier	nextLine_		657119	0					
ANR	657351	Identifier	i		657119	1					
ANR	657352	PrimaryExpression	'\\''		657119	1					
ANR	657353	UnaryOperationExpression	"! isDigitSeparator ( nextLine_ , i )"		657119	1					
ANR	657354	UnaryOperator	!		657119	0					
ANR	657355	CallExpression	"isDigitSeparator ( nextLine_ , i )"		657119	1					
ANR	657356	Callee	isDigitSeparator		657119	0					
ANR	657357	Identifier	isDigitSeparator		657119	0					
ANR	657358	ArgumentList	nextLine_		657119	1					
ANR	657359	Argument	nextLine_		657119	0					
ANR	657360	Identifier	nextLine_		657119	0					
ANR	657361	Argument	i		657119	1					
ANR	657362	Identifier	i		657119	0					
ANR	657363	CompoundStatement		51:3:1080:1080	657119	1					
ANR	657364	ExpressionStatement	isInQuote_ = true	6361:4:183805:183822	657119	0	True				
ANR	657365	AssignmentExpression	isInQuote_ = true		657119	0		=			
ANR	657366	Identifier	isInQuote_		657119	0					
ANR	657367	Identifier	true		657119	1					
ANR	657368	ExpressionStatement	quoteChar_ = nextLine_ [ i ]	6362:4:183828:183853	657119	1	True				
ANR	657369	AssignmentExpression	quoteChar_ = nextLine_ [ i ]		657119	0		=			
ANR	657370	Identifier	quoteChar_		657119	0					
ANR	657371	ArrayIndexing	nextLine_ [ i ]		657119	1					
ANR	657372	Identifier	nextLine_		657119	0					
ANR	657373	Identifier	i		657119	1					
ANR	657374	ContinueStatement	continue ;	6363:4:183859:183867	657119	2	True				
ANR	657375	IfStatement	"if ( nextLine_ . compare ( i , 2 , ""//"" ) == 0 )"		657119	6					
ANR	657376	Condition	"nextLine_ . compare ( i , 2 , ""//"" ) == 0"	6365:7:183881:183914	657119	0	True				
ANR	657377	EqualityExpression	"nextLine_ . compare ( i , 2 , ""//"" ) == 0"		657119	0		==			
ANR	657378	CallExpression	"nextLine_ . compare ( i , 2 , ""//"" )"		657119	0					
ANR	657379	Callee	nextLine_ . compare		657119	0					
ANR	657380	MemberAccess	nextLine_ . compare		657119	0					
ANR	657381	Identifier	nextLine_		657119	0					
ANR	657382	Identifier	compare		657119	1					
ANR	657383	ArgumentList	i		657119	1					
ANR	657384	Argument	i		657119	0					
ANR	657385	Identifier	i		657119	0					
ANR	657386	Argument	2		657119	1					
ANR	657387	PrimaryExpression	2		657119	0					
ANR	657388	Argument	"""//"""		657119	2					
ANR	657389	PrimaryExpression	"""//"""		657119	0					
ANR	657390	PrimaryExpression	0		657119	1					
ANR	657391	CompoundStatement		57:3:1201:1201	657119	1					
ANR	657392	ExpressionStatement	i = nextLine_ . length ( )	6367:4:183926:183948	657119	0	True				
ANR	657393	AssignmentExpression	i = nextLine_ . length ( )		657119	0		=			
ANR	657394	Identifier	i		657119	0					
ANR	657395	CallExpression	nextLine_ . length ( )		657119	1					
ANR	657396	Callee	nextLine_ . length		657119	0					
ANR	657397	MemberAccess	nextLine_ . length		657119	0					
ANR	657398	Identifier	nextLine_		657119	0					
ANR	657399	Identifier	length		657119	1					
ANR	657400	ArgumentList			657119	1					
ANR	657401	ContinueStatement	continue ;	6368:4:183954:183962	657119	1	True				
ANR	657402	IfStatement	if ( nextLine_ [ i ] == '{' )		657119	7					
ANR	657403	Condition	nextLine_ [ i ] == '{'	6371:7:183996:184014	657119	0	True				
ANR	657404	EqualityExpression	nextLine_ [ i ] == '{'		657119	0		==			
ANR	657405	ArrayIndexing	nextLine_ [ i ]		657119	0					
ANR	657406	Identifier	nextLine_		657119	0					
ANR	657407	Identifier	i		657119	1					
ANR	657408	PrimaryExpression	'{'		657119	1					
ANR	657409	ExpressionStatement	++ braceCount	6372:4:184021:184033	657119	1	True				
ANR	657410	UnaryExpression	++ braceCount		657119	0					
ANR	657411	IncDec	++		657119	0					
ANR	657412	Identifier	braceCount		657119	1					
ANR	657413	IfStatement	if ( nextLine_ [ i ] == '}' )		657119	8					
ANR	657414	Condition	nextLine_ [ i ] == '}'	6373:7:184042:184060	657119	0	True				
ANR	657415	EqualityExpression	nextLine_ [ i ] == '}'		657119	0		==			
ANR	657416	ArrayIndexing	nextLine_ [ i ]		657119	0					
ANR	657417	Identifier	nextLine_		657119	0					
ANR	657418	Identifier	i		657119	1					
ANR	657419	PrimaryExpression	'}'		657119	1					
ANR	657420	ExpressionStatement	-- braceCount	6374:4:184067:184079	657119	1	True				
ANR	657421	UnaryExpression	-- braceCount		657119	0					
ANR	657422	IncDec	--		657119	0					
ANR	657423	Identifier	braceCount		657119	1					
ANR	657424	IfStatement	if ( braceCount == 0 )		657119	9					
ANR	657425	Condition	braceCount == 0	6375:7:184088:184102	657119	0	True				
ANR	657426	EqualityExpression	braceCount == 0		657119	0		==			
ANR	657427	Identifier	braceCount		657119	0					
ANR	657428	PrimaryExpression	0		657119	1					
ANR	657429	ReturnStatement	return false ;	6376:4:184109:184121	657119	1	True				
ANR	657430	Identifier	false		657119	0					
ANR	657431	IfStatement	"if ( isCharPotentialHeader ( nextLine_ , i ) )"		657119	10					
ANR	657432	Condition	"isCharPotentialHeader ( nextLine_ , i )"	6378:7:184163:184197	657119	0	True				
ANR	657433	CallExpression	"isCharPotentialHeader ( nextLine_ , i )"		657119	0					
ANR	657434	Callee	isCharPotentialHeader		657119	0					
ANR	657435	Identifier	isCharPotentialHeader		657119	0					
ANR	657436	ArgumentList	nextLine_		657119	1					
ANR	657437	Argument	nextLine_		657119	0					
ANR	657438	Identifier	nextLine_		657119	0					
ANR	657439	Argument	i		657119	1					
ANR	657440	Identifier	i		657119	0					
ANR	657441	CompoundStatement		75:4:1662:1704	657119	1					
ANR	657442	IfStatement	"if ( findKeyword ( nextLine_ , i , AS_PUBLIC ) || findKeyword ( nextLine_ , i , AS_PRIVATE ) || findKeyword ( nextLine_ , i , AS_PROTECTED ) )"		657119	0					
ANR	657443	Condition	"findKeyword ( nextLine_ , i , AS_PUBLIC ) || findKeyword ( nextLine_ , i , AS_PRIVATE ) || findKeyword ( nextLine_ , i , AS_PROTECTED )"	6380:8:184213:184356	657119	0	True				
ANR	657444	OrExpression	"findKeyword ( nextLine_ , i , AS_PUBLIC ) || findKeyword ( nextLine_ , i , AS_PRIVATE ) || findKeyword ( nextLine_ , i , AS_PROTECTED )"		657119	0		||			
ANR	657445	CallExpression	"findKeyword ( nextLine_ , i , AS_PUBLIC )"		657119	0					
ANR	657446	Callee	findKeyword		657119	0					
ANR	657447	Identifier	findKeyword		657119	0					
ANR	657448	ArgumentList	nextLine_		657119	1					
ANR	657449	Argument	nextLine_		657119	0					
ANR	657450	Identifier	nextLine_		657119	0					
ANR	657451	Argument	i		657119	1					
ANR	657452	Identifier	i		657119	0					
ANR	657453	Argument	AS_PUBLIC		657119	2					
ANR	657454	Identifier	AS_PUBLIC		657119	0					
ANR	657455	OrExpression	"findKeyword ( nextLine_ , i , AS_PRIVATE ) || findKeyword ( nextLine_ , i , AS_PROTECTED )"		657119	1		||			
ANR	657456	CallExpression	"findKeyword ( nextLine_ , i , AS_PRIVATE )"		657119	0					
ANR	657457	Callee	findKeyword		657119	0					
ANR	657458	Identifier	findKeyword		657119	0					
ANR	657459	ArgumentList	nextLine_		657119	1					
ANR	657460	Argument	nextLine_		657119	0					
ANR	657461	Identifier	nextLine_		657119	0					
ANR	657462	Argument	i		657119	1					
ANR	657463	Identifier	i		657119	0					
ANR	657464	Argument	AS_PRIVATE		657119	2					
ANR	657465	Identifier	AS_PRIVATE		657119	0					
ANR	657466	CallExpression	"findKeyword ( nextLine_ , i , AS_PROTECTED )"		657119	1					
ANR	657467	Callee	findKeyword		657119	0					
ANR	657468	Identifier	findKeyword		657119	0					
ANR	657469	ArgumentList	nextLine_		657119	1					
ANR	657470	Argument	nextLine_		657119	0					
ANR	657471	Identifier	nextLine_		657119	0					
ANR	657472	Argument	i		657119	1					
ANR	657473	Identifier	i		657119	0					
ANR	657474	Argument	AS_PROTECTED		657119	2					
ANR	657475	Identifier	AS_PROTECTED		657119	0					
ANR	657476	ReturnStatement	return true ;	6383:5:184364:184375	657119	1	True				
ANR	657477	Identifier	true		657119	0					
ANR	657478	IdentifierDeclStatement	"string name = getCurrentWord ( nextLine_ , i ) ;"	6384:4:184381:184423	657119	1	True				
ANR	657479	IdentifierDecl	"name = getCurrentWord ( nextLine_ , i )"		657119	0					
ANR	657480	IdentifierDeclType	string		657119	0					
ANR	657481	Identifier	name		657119	1					
ANR	657482	AssignmentExpression	"name = getCurrentWord ( nextLine_ , i )"		657119	2		=			
ANR	657483	Identifier	name		657119	0					
ANR	657484	CallExpression	"getCurrentWord ( nextLine_ , i )"		657119	1					
ANR	657485	Callee	getCurrentWord		657119	0					
ANR	657486	Identifier	getCurrentWord		657119	0					
ANR	657487	ArgumentList	nextLine_		657119	1					
ANR	657488	Argument	nextLine_		657119	0					
ANR	657489	Identifier	nextLine_		657119	0					
ANR	657490	Argument	i		657119	1					
ANR	657491	Identifier	i		657119	0					
ANR	657492	ExpressionStatement	i += name . length ( ) - 1	6385:4:184429:184451	657119	2	True				
ANR	657493	AssignmentExpression	i += name . length ( ) - 1		657119	0		+=			
ANR	657494	Identifier	i		657119	0					
ANR	657495	AdditiveExpression	name . length ( ) - 1		657119	1		-			
ANR	657496	CallExpression	name . length ( )		657119	0					
ANR	657497	Callee	name . length		657119	0					
ANR	657498	MemberAccess	name . length		657119	0					
ANR	657499	Identifier	name		657119	0					
ANR	657500	Identifier	length		657119	1					
ANR	657501	ArgumentList			657119	1					
ANR	657502	PrimaryExpression	1		657119	1					
ANR	657503	ReturnStatement	return false ;	6390:1:184507:184519	657119	10	True				
ANR	657504	Identifier	false		657119	0					
ANR	657505	ReturnType	bool		657119	1					
ANR	657506	Identifier	ASFormatter :: isStructAccessModified		657119	2					
ANR	657507	ParameterList	"const string & firstLine , size_t index"		657119	3					
ANR	657508	Parameter	const string & firstLine	6309:41:182673:182695	657119	0	True				
ANR	657509	ParameterType	const string &		657119	0					
ANR	657510	Identifier	firstLine		657119	1					
ANR	657511	Parameter	size_t index	6309:66:182698:182709	657119	1	True				
ANR	657512	ParameterType	size_t		657119	0					
ANR	657513	Identifier	index		657119	1					
ANR	657514	CFGEntryNode	ENTRY		657119		True				
ANR	657515	CFGExitNode	EXIT		657119		True				
ANR	657516	Symbol	getCurrentWord		657119						
ANR	657517	Symbol	name . length		657119						
ANR	657518	Symbol	nextLine_		657119						
ANR	657519	Symbol	firstLine . substr		657119						
ANR	657520	Symbol	* index		657119						
ANR	657521	Symbol	stream . peekNextLine		657119						
ANR	657522	Symbol	isInComment_		657119						
ANR	657523	Symbol	quoteChar_		657119						
ANR	657524	Symbol	isWhiteSpace		657119						
ANR	657525	Symbol	* firstLine		657119						
ANR	657526	Symbol	stream		657119						
ANR	657527	Symbol	AS_PROTECTED		657119						
ANR	657528	Symbol	isDigitSeparator		657119						
ANR	657529	Symbol	isFirstLine		657119						
ANR	657530	Symbol	stream . hasMoreLines		657119						
ANR	657531	Symbol	AS_PRIVATE		657119						
ANR	657532	Symbol	false		657119						
ANR	657533	Symbol	index		657119						
ANR	657534	Symbol	i		657119						
ANR	657535	Symbol	nextLine_ . compare		657119						
ANR	657536	Symbol	isInQuote_		657119						
ANR	657537	Symbol	firstLine		657119						
ANR	657538	Symbol	* nextLine_		657119						
ANR	657539	Symbol	braceCount		657119						
ANR	657540	Symbol	* i		657119						
ANR	657541	Symbol	isCharPotentialHeader		657119						
ANR	657542	Symbol	AS_PUBLIC		657119						
ANR	657543	Symbol	true		657119						
ANR	657544	Symbol	name		657119						
ANR	657545	Symbol	findKeyword		657119						
ANR	657546	Symbol	isCStyle		657119						
ANR	657547	Symbol	nextLine_ . length		657119						
ANR	657548	Function	ASFormatter :: isIndentablePreprocessorBlock	6400:0:184765:189104							
ANR	657549	FunctionDef	"ASFormatter :: isIndentablePreprocessorBlock (const string & firstLine , size_t index)"		657548	0					
ANR	657550	CompoundStatement		6401:0:184852:189104	657548	0					
ANR	657551	ExpressionStatement	assert ( firstLine [ index ] == '#' )	6402:1:184855:184886	657548	0	True				
ANR	657552	CallExpression	assert ( firstLine [ index ] == '#' )		657548	0					
ANR	657553	Callee	assert		657548	0					
ANR	657554	Identifier	assert		657548	0					
ANR	657555	ArgumentList	firstLine [ index ] == '#'		657548	1					
ANR	657556	Argument	firstLine [ index ] == '#'		657548	0					
ANR	657557	EqualityExpression	firstLine [ index ] == '#'		657548	0		==			
ANR	657558	ArrayIndexing	firstLine [ index ]		657548	0					
ANR	657559	Identifier	firstLine		657548	0					
ANR	657560	Identifier	index		657548	1					
ANR	657561	PrimaryExpression	'#'		657548	1					
ANR	657562	IdentifierDeclStatement	bool isFirstLine = true ;	6404:1:184890:184913	657548	1	True				
ANR	657563	IdentifierDecl	isFirstLine = true		657548	0					
ANR	657564	IdentifierDeclType	bool		657548	0					
ANR	657565	Identifier	isFirstLine		657548	1					
ANR	657566	AssignmentExpression	isFirstLine = true		657548	2		=			
ANR	657567	Identifier	true		657548	0					
ANR	657568	Identifier	true		657548	1					
ANR	657569	IdentifierDeclStatement	bool isInIndentableBlock = false ;	6405:1:184916:184948	657548	2	True				
ANR	657570	IdentifierDecl	isInIndentableBlock = false		657548	0					
ANR	657571	IdentifierDeclType	bool		657548	0					
ANR	657572	Identifier	isInIndentableBlock		657548	1					
ANR	657573	AssignmentExpression	isInIndentableBlock = false		657548	2		=			
ANR	657574	Identifier	false		657548	0					
ANR	657575	Identifier	false		657548	1					
ANR	657576	IdentifierDeclStatement	bool blockContainsBraces = false ;	6406:1:184951:184983	657548	3	True				
ANR	657577	IdentifierDecl	blockContainsBraces = false		657548	0					
ANR	657578	IdentifierDeclType	bool		657548	0					
ANR	657579	Identifier	blockContainsBraces		657548	1					
ANR	657580	AssignmentExpression	blockContainsBraces = false		657548	2		=			
ANR	657581	Identifier	false		657548	0					
ANR	657582	Identifier	false		657548	1					
ANR	657583	IdentifierDeclStatement	bool blockContainsDefineContinuation = false ;	6407:1:184986:185030	657548	4	True				
ANR	657584	IdentifierDecl	blockContainsDefineContinuation = false		657548	0					
ANR	657585	IdentifierDeclType	bool		657548	0					
ANR	657586	Identifier	blockContainsDefineContinuation		657548	1					
ANR	657587	AssignmentExpression	blockContainsDefineContinuation = false		657548	2		=			
ANR	657588	Identifier	false		657548	0					
ANR	657589	Identifier	false		657548	1					
ANR	657590	IdentifierDeclStatement	bool isInClassConstructor = false ;	6408:1:185033:185066	657548	5	True				
ANR	657591	IdentifierDecl	isInClassConstructor = false		657548	0					
ANR	657592	IdentifierDeclType	bool		657548	0					
ANR	657593	Identifier	isInClassConstructor		657548	1					
ANR	657594	AssignmentExpression	isInClassConstructor = false		657548	2		=			
ANR	657595	Identifier	false		657548	0					
ANR	657596	Identifier	false		657548	1					
ANR	657597	IdentifierDeclStatement	bool isPotentialHeaderGuard = false ;	6409:1:185069:185104	657548	6	True				
ANR	657598	IdentifierDecl	isPotentialHeaderGuard = false		657548	0					
ANR	657599	IdentifierDeclType	bool		657548	0					
ANR	657600	Identifier	isPotentialHeaderGuard		657548	1					
ANR	657601	AssignmentExpression	isPotentialHeaderGuard = false		657548	2		=			
ANR	657602	Identifier	false		657548	0					
ANR	657603	Identifier	false		657548	1					
ANR	657604	IdentifierDeclStatement	bool isPotentialHeaderGuard2 = false ;	6410:1:185144:185180	657548	7	True				
ANR	657605	IdentifierDecl	isPotentialHeaderGuard2 = false		657548	0					
ANR	657606	IdentifierDeclType	bool		657548	0					
ANR	657607	Identifier	isPotentialHeaderGuard2		657548	1					
ANR	657608	AssignmentExpression	isPotentialHeaderGuard2 = false		657548	2		=			
ANR	657609	Identifier	false		657548	0					
ANR	657610	Identifier	false		657548	1					
ANR	657611	IdentifierDeclStatement	int numBlockIndents = 0 ;	6411:1:185221:185245	657548	8	True				
ANR	657612	IdentifierDecl	numBlockIndents = 0		657548	0					
ANR	657613	IdentifierDeclType	int		657548	0					
ANR	657614	Identifier	numBlockIndents		657548	1					
ANR	657615	AssignmentExpression	numBlockIndents = 0		657548	2		=			
ANR	657616	Identifier	numBlockIndents		657548	0					
ANR	657617	PrimaryExpression	0		657548	1					
ANR	657618	IdentifierDeclStatement	int lineParenCount = 0 ;	6412:1:185248:185271	657548	9	True				
ANR	657619	IdentifierDecl	lineParenCount = 0		657548	0					
ANR	657620	IdentifierDeclType	int		657548	0					
ANR	657621	Identifier	lineParenCount		657548	1					
ANR	657622	AssignmentExpression	lineParenCount = 0		657548	2		=			
ANR	657623	Identifier	lineParenCount		657548	0					
ANR	657624	PrimaryExpression	0		657548	1					
ANR	657625	IdentifierDeclStatement	string nextLine_ = firstLine . substr ( index ) ;	6413:1:185274:185316	657548	10	True				
ANR	657626	IdentifierDecl	nextLine_ = firstLine . substr ( index )		657548	0					
ANR	657627	IdentifierDeclType	string		657548	0					
ANR	657628	Identifier	nextLine_		657548	1					
ANR	657629	AssignmentExpression	nextLine_ = firstLine . substr ( index )		657548	2		=			
ANR	657630	Identifier	nextLine_		657548	0					
ANR	657631	CallExpression	firstLine . substr ( index )		657548	1					
ANR	657632	Callee	firstLine . substr		657548	0					
ANR	657633	MemberAccess	firstLine . substr		657548	0					
ANR	657634	Identifier	firstLine		657548	0					
ANR	657635	Identifier	substr		657548	1					
ANR	657636	ArgumentList	index		657548	1					
ANR	657637	Argument	index		657548	0					
ANR	657638	Identifier	index		657548	0					
ANR	657639	Statement	auto	6414:1:185319:185322	657548	11	True				
ANR	657640	ExpressionStatement	stream = make_shared < ASPeekStream > ( sourceIterator )	6414:6:185324:185374	657548	12	True				
ANR	657641	AssignmentExpression	stream = make_shared < ASPeekStream > ( sourceIterator )		657548	0		=			
ANR	657642	Identifier	stream		657548	0					
ANR	657643	RelationalExpression	make_shared < ASPeekStream > ( sourceIterator )		657548	1		<			
ANR	657644	Identifier	make_shared		657548	0					
ANR	657645	RelationalExpression	ASPeekStream > ( sourceIterator )		657548	1		>			
ANR	657646	Identifier	ASPeekStream		657548	0					
ANR	657647	Identifier	sourceIterator		657548	1					
ANR	657648	IdentifierDeclStatement	bool isInComment_ = false ;	6417:1:185440:185465	657548	13	True				
ANR	657649	IdentifierDecl	isInComment_ = false		657548	0					
ANR	657650	IdentifierDeclType	bool		657548	0					
ANR	657651	Identifier	isInComment_		657548	1					
ANR	657652	AssignmentExpression	isInComment_ = false		657548	2		=			
ANR	657653	Identifier	false		657548	0					
ANR	657654	Identifier	false		657548	1					
ANR	657655	IdentifierDeclStatement	bool isInQuote_ = false ;	6418:1:185468:185491	657548	14	True				
ANR	657656	IdentifierDecl	isInQuote_ = false		657548	0					
ANR	657657	IdentifierDeclType	bool		657548	0					
ANR	657658	Identifier	isInQuote_		657548	1					
ANR	657659	AssignmentExpression	isInQuote_ = false		657548	2		=			
ANR	657660	Identifier	false		657548	0					
ANR	657661	Identifier	false		657548	1					
ANR	657662	IdentifierDeclStatement	char quoteChar_ = ' ' ;	6419:1:185494:185515	657548	15	True				
ANR	657663	IdentifierDecl	quoteChar_ = ' '		657548	0					
ANR	657664	IdentifierDeclType	char		657548	0					
ANR	657665	Identifier	quoteChar_		657548	1					
ANR	657666	AssignmentExpression	quoteChar_ = ' '		657548	2		=			
ANR	657667	Identifier	quoteChar_		657548	0					
ANR	657668	PrimaryExpression	' '		657548	1					
ANR	657669	WhileStatement	while ( stream -> hasMoreLines ( ) || isFirstLine )		657548	16					
ANR	657670	Condition	stream -> hasMoreLines ( ) || isFirstLine	6420:8:185525:185561	657548	0	True				
ANR	657671	OrExpression	stream -> hasMoreLines ( ) || isFirstLine		657548	0		||			
ANR	657672	CallExpression	stream -> hasMoreLines ( )		657548	0					
ANR	657673	Callee	stream -> hasMoreLines		657548	0					
ANR	657674	PtrMemberAccess	stream -> hasMoreLines		657548	0					
ANR	657675	Identifier	stream		657548	0					
ANR	657676	Identifier	hasMoreLines		657548	1					
ANR	657677	ArgumentList			657548	1					
ANR	657678	Identifier	isFirstLine		657548	1					
ANR	657679	CompoundStatement		21:1:712:712	657548	1					
ANR	657680	IfStatement	if ( isFirstLine )		657548	0					
ANR	657681	Condition	isFirstLine	6422:6:185573:185583	657548	0	True				
ANR	657682	Identifier	isFirstLine		657548	0					
ANR	657683	ExpressionStatement	isFirstLine = false	6423:3:185589:185608	657548	1	True				
ANR	657684	AssignmentExpression	isFirstLine = false		657548	0		=			
ANR	657685	Identifier	isFirstLine		657548	0					
ANR	657686	Identifier	false		657548	1					
ANR	657687	ElseStatement	else		657548	0					
ANR	657688	ExpressionStatement	nextLine_ = stream -> peekNextLine ( )	6425:3:185620:185654	657548	0	True				
ANR	657689	AssignmentExpression	nextLine_ = stream -> peekNextLine ( )		657548	0		=			
ANR	657690	Identifier	nextLine_		657548	0					
ANR	657691	CallExpression	stream -> peekNextLine ( )		657548	1					
ANR	657692	Callee	stream -> peekNextLine		657548	0					
ANR	657693	PtrMemberAccess	stream -> peekNextLine		657548	0					
ANR	657694	Identifier	stream		657548	0					
ANR	657695	Identifier	peekNextLine		657548	1					
ANR	657696	ArgumentList			657548	1					
ANR	657697	ForStatement	for ( size_t i = 0 ; i < nextLine_ . length ( ) ; i ++ )		657548	1					
ANR	657698	ForInit	size_t i = 0 ;	6427:7:185683:185695	657548	0	True				
ANR	657699	IdentifierDeclStatement	size_t i = 0 ;		657548	0					
ANR	657700	IdentifierDecl	i = 0		657548	0					
ANR	657701	IdentifierDeclType	size_t		657548	0					
ANR	657702	Identifier	i		657548	1					
ANR	657703	AssignmentExpression	i = 0		657548	2		=			
ANR	657704	Identifier	i		657548	0					
ANR	657705	PrimaryExpression	0		657548	1					
ANR	657706	Condition	i < nextLine_ . length ( )	6427:21:185697:185718	657548	1	True				
ANR	657707	RelationalExpression	i < nextLine_ . length ( )		657548	0		<			
ANR	657708	Identifier	i		657548	0					
ANR	657709	CallExpression	nextLine_ . length ( )		657548	1					
ANR	657710	Callee	nextLine_ . length		657548	0					
ANR	657711	MemberAccess	nextLine_ . length		657548	0					
ANR	657712	Identifier	nextLine_		657548	0					
ANR	657713	Identifier	length		657548	1					
ANR	657714	ArgumentList			657548	1					
ANR	657715	PostIncDecOperationExpression	i ++	6427:45:185721:185723	657548	2	True				
ANR	657716	Identifier	i		657548	0					
ANR	657717	IncDec	++		657548	1					
ANR	657718	CompoundStatement		28:2:875:875	657548	3					
ANR	657719	IfStatement	if ( isWhiteSpace ( nextLine_ [ i ] ) )		657548	0					
ANR	657720	Condition	isWhiteSpace ( nextLine_ [ i ] )	6429:7:185737:185762	657548	0	True				
ANR	657721	CallExpression	isWhiteSpace ( nextLine_ [ i ] )		657548	0					
ANR	657722	Callee	isWhiteSpace		657548	0					
ANR	657723	Identifier	isWhiteSpace		657548	0					
ANR	657724	ArgumentList	nextLine_ [ i ]		657548	1					
ANR	657725	Argument	nextLine_ [ i ]		657548	0					
ANR	657726	ArrayIndexing	nextLine_ [ i ]		657548	0					
ANR	657727	Identifier	nextLine_		657548	0					
ANR	657728	Identifier	i		657548	1					
ANR	657729	ContinueStatement	continue ;	6430:4:185769:185777	657548	1	True				
ANR	657730	IfStatement	"if ( nextLine_ . compare ( i , 2 , ""/*"" ) == 0 )"		657548	1					
ANR	657731	Condition	"nextLine_ . compare ( i , 2 , ""/*"" ) == 0"	6431:7:185786:185819	657548	0	True				
ANR	657732	EqualityExpression	"nextLine_ . compare ( i , 2 , ""/*"" ) == 0"		657548	0		==			
ANR	657733	CallExpression	"nextLine_ . compare ( i , 2 , ""/*"" )"		657548	0					
ANR	657734	Callee	nextLine_ . compare		657548	0					
ANR	657735	MemberAccess	nextLine_ . compare		657548	0					
ANR	657736	Identifier	nextLine_		657548	0					
ANR	657737	Identifier	compare		657548	1					
ANR	657738	ArgumentList	i		657548	1					
ANR	657739	Argument	i		657548	0					
ANR	657740	Identifier	i		657548	0					
ANR	657741	Argument	2		657548	1					
ANR	657742	PrimaryExpression	2		657548	0					
ANR	657743	Argument	"""/*"""		657548	2					
ANR	657744	PrimaryExpression	"""/*"""		657548	0					
ANR	657745	PrimaryExpression	0		657548	1					
ANR	657746	ExpressionStatement	isInComment_ = true	6432:4:185826:185845	657548	1	True				
ANR	657747	AssignmentExpression	isInComment_ = true		657548	0		=			
ANR	657748	Identifier	isInComment_		657548	0					
ANR	657749	Identifier	true		657548	1					
ANR	657750	IfStatement	if ( isInComment_ )		657548	2					
ANR	657751	Condition	isInComment_	6433:7:185854:185865	657548	0	True				
ANR	657752	Identifier	isInComment_		657548	0					
ANR	657753	CompoundStatement		34:3:1018:1018	657548	1					
ANR	657754	IfStatement	"if ( nextLine_ . compare ( i , 2 , ""*/"" ) == 0 )"		657548	0					
ANR	657755	Condition	"nextLine_ . compare ( i , 2 , ""*/"" ) == 0"	6435:8:185881:185914	657548	0	True				
ANR	657756	EqualityExpression	"nextLine_ . compare ( i , 2 , ""*/"" ) == 0"		657548	0		==			
ANR	657757	CallExpression	"nextLine_ . compare ( i , 2 , ""*/"" )"		657548	0					
ANR	657758	Callee	nextLine_ . compare		657548	0					
ANR	657759	MemberAccess	nextLine_ . compare		657548	0					
ANR	657760	Identifier	nextLine_		657548	0					
ANR	657761	Identifier	compare		657548	1					
ANR	657762	ArgumentList	i		657548	1					
ANR	657763	Argument	i		657548	0					
ANR	657764	Identifier	i		657548	0					
ANR	657765	Argument	2		657548	1					
ANR	657766	PrimaryExpression	2		657548	0					
ANR	657767	Argument	"""*/"""		657548	2					
ANR	657768	PrimaryExpression	"""*/"""		657548	0					
ANR	657769	PrimaryExpression	0		657548	1					
ANR	657770	CompoundStatement		36:4:1068:1068	657548	1					
ANR	657771	ExpressionStatement	isInComment_ = false	6437:5:185928:185948	657548	0	True				
ANR	657772	AssignmentExpression	isInComment_ = false		657548	0		=			
ANR	657773	Identifier	isInComment_		657548	0					
ANR	657774	Identifier	false		657548	1					
ANR	657775	ExpressionStatement	++ i	6438:5:185955:185958	657548	1	True				
ANR	657776	UnaryExpression	++ i		657548	0					
ANR	657777	IncDec	++		657548	0					
ANR	657778	Identifier	i		657548	1					
ANR	657779	ContinueStatement	continue ;	6440:4:185970:185978	657548	1	True				
ANR	657780	IfStatement	if ( nextLine_ [ i ] == '\\\\' )		657548	3					
ANR	657781	Condition	nextLine_ [ i ] == '\\\\'	6442:7:185992:186011	657548	0	True				
ANR	657782	EqualityExpression	nextLine_ [ i ] == '\\\\'		657548	0		==			
ANR	657783	ArrayIndexing	nextLine_ [ i ]		657548	0					
ANR	657784	Identifier	nextLine_		657548	0					
ANR	657785	Identifier	i		657548	1					
ANR	657786	PrimaryExpression	'\\\\'		657548	1					
ANR	657787	CompoundStatement		43:3:1164:1164	657548	1					
ANR	657788	ExpressionStatement	++ i	6444:4:186023:186026	657548	0	True				
ANR	657789	UnaryExpression	++ i		657548	0					
ANR	657790	IncDec	++		657548	0					
ANR	657791	Identifier	i		657548	1					
ANR	657792	ContinueStatement	continue ;	6445:4:186032:186040	657548	1	True				
ANR	657793	IfStatement	if ( isInQuote_ )		657548	4					
ANR	657794	Condition	isInQuote_	6447:7:186054:186063	657548	0	True				
ANR	657795	Identifier	isInQuote_		657548	0					
ANR	657796	CompoundStatement		48:3:1216:1216	657548	1					
ANR	657797	IfStatement	if ( nextLine_ [ i ] == quoteChar_ )		657548	0					
ANR	657798	Condition	nextLine_ [ i ] == quoteChar_	6449:8:186079:186104	657548	0	True				
ANR	657799	EqualityExpression	nextLine_ [ i ] == quoteChar_		657548	0		==			
ANR	657800	ArrayIndexing	nextLine_ [ i ]		657548	0					
ANR	657801	Identifier	nextLine_		657548	0					
ANR	657802	Identifier	i		657548	1					
ANR	657803	Identifier	quoteChar_		657548	1					
ANR	657804	ExpressionStatement	isInQuote_ = false	6450:5:186112:186130	657548	1	True				
ANR	657805	AssignmentExpression	isInQuote_ = false		657548	0		=			
ANR	657806	Identifier	isInQuote_		657548	0					
ANR	657807	Identifier	false		657548	1					
ANR	657808	ContinueStatement	continue ;	6451:4:186136:186144	657548	1	True				
ANR	657809	IfStatement	"if ( nextLine_ [ i ] == '""' || ( nextLine_ [ i ] == '\\'' && ! isDigitSeparator ( nextLine_ , i ) ) )"		657548	5					
ANR	657810	Condition	"nextLine_ [ i ] == '""' || ( nextLine_ [ i ] == '\\'' && ! isDigitSeparator ( nextLine_ , i ) )"	6454:7:186159:186249	657548	0	True				
ANR	657811	OrExpression	"nextLine_ [ i ] == '""' || ( nextLine_ [ i ] == '\\'' && ! isDigitSeparator ( nextLine_ , i ) )"		657548	0		||			
ANR	657812	EqualityExpression	"nextLine_ [ i ] == '""'"		657548	0		==			
ANR	657813	ArrayIndexing	nextLine_ [ i ]		657548	0					
ANR	657814	Identifier	nextLine_		657548	0					
ANR	657815	Identifier	i		657548	1					
ANR	657816	PrimaryExpression	"'""'"		657548	1					
ANR	657817	AndExpression	"nextLine_ [ i ] == '\\'' && ! isDigitSeparator ( nextLine_ , i )"		657548	1		&&			
ANR	657818	EqualityExpression	nextLine_ [ i ] == '\\''		657548	0		==			
ANR	657819	ArrayIndexing	nextLine_ [ i ]		657548	0					
ANR	657820	Identifier	nextLine_		657548	0					
ANR	657821	Identifier	i		657548	1					
ANR	657822	PrimaryExpression	'\\''		657548	1					
ANR	657823	UnaryOperationExpression	"! isDigitSeparator ( nextLine_ , i )"		657548	1					
ANR	657824	UnaryOperator	!		657548	0					
ANR	657825	CallExpression	"isDigitSeparator ( nextLine_ , i )"		657548	1					
ANR	657826	Callee	isDigitSeparator		657548	0					
ANR	657827	Identifier	isDigitSeparator		657548	0					
ANR	657828	ArgumentList	nextLine_		657548	1					
ANR	657829	Argument	nextLine_		657548	0					
ANR	657830	Identifier	nextLine_		657548	0					
ANR	657831	Argument	i		657548	1					
ANR	657832	Identifier	i		657548	0					
ANR	657833	CompoundStatement		56:3:1402:1402	657548	1					
ANR	657834	ExpressionStatement	isInQuote_ = true	6457:4:186261:186278	657548	0	True				
ANR	657835	AssignmentExpression	isInQuote_ = true		657548	0		=			
ANR	657836	Identifier	isInQuote_		657548	0					
ANR	657837	Identifier	true		657548	1					
ANR	657838	ExpressionStatement	quoteChar_ = nextLine_ [ i ]	6458:4:186284:186309	657548	1	True				
ANR	657839	AssignmentExpression	quoteChar_ = nextLine_ [ i ]		657548	0		=			
ANR	657840	Identifier	quoteChar_		657548	0					
ANR	657841	ArrayIndexing	nextLine_ [ i ]		657548	1					
ANR	657842	Identifier	nextLine_		657548	0					
ANR	657843	Identifier	i		657548	1					
ANR	657844	ContinueStatement	continue ;	6459:4:186315:186323	657548	2	True				
ANR	657845	IfStatement	"if ( nextLine_ . compare ( i , 2 , ""//"" ) == 0 )"		657548	6					
ANR	657846	Condition	"nextLine_ . compare ( i , 2 , ""//"" ) == 0"	6461:7:186337:186370	657548	0	True				
ANR	657847	EqualityExpression	"nextLine_ . compare ( i , 2 , ""//"" ) == 0"		657548	0		==			
ANR	657848	CallExpression	"nextLine_ . compare ( i , 2 , ""//"" )"		657548	0					
ANR	657849	Callee	nextLine_ . compare		657548	0					
ANR	657850	MemberAccess	nextLine_ . compare		657548	0					
ANR	657851	Identifier	nextLine_		657548	0					
ANR	657852	Identifier	compare		657548	1					
ANR	657853	ArgumentList	i		657548	1					
ANR	657854	Argument	i		657548	0					
ANR	657855	Identifier	i		657548	0					
ANR	657856	Argument	2		657548	1					
ANR	657857	PrimaryExpression	2		657548	0					
ANR	657858	Argument	"""//"""		657548	2					
ANR	657859	PrimaryExpression	"""//"""		657548	0					
ANR	657860	PrimaryExpression	0		657548	1					
ANR	657861	CompoundStatement		62:3:1523:1523	657548	1					
ANR	657862	ExpressionStatement	i = nextLine_ . length ( )	6463:4:186382:186404	657548	0	True				
ANR	657863	AssignmentExpression	i = nextLine_ . length ( )		657548	0		=			
ANR	657864	Identifier	i		657548	0					
ANR	657865	CallExpression	nextLine_ . length ( )		657548	1					
ANR	657866	Callee	nextLine_ . length		657548	0					
ANR	657867	MemberAccess	nextLine_ . length		657548	0					
ANR	657868	Identifier	nextLine_		657548	0					
ANR	657869	Identifier	length		657548	1					
ANR	657870	ArgumentList			657548	1					
ANR	657871	ContinueStatement	continue ;	6464:4:186410:186418	657548	1	True				
ANR	657872	IfStatement	if ( nextLine_ [ i ] == '#' )		657548	7					
ANR	657873	Condition	nextLine_ [ i ] == '#'	6467:7:186468:186486	657548	0	True				
ANR	657874	EqualityExpression	nextLine_ [ i ] == '#'		657548	0		==			
ANR	657875	ArrayIndexing	nextLine_ [ i ]		657548	0					
ANR	657876	Identifier	nextLine_		657548	0					
ANR	657877	Identifier	i		657548	1					
ANR	657878	PrimaryExpression	'#'		657548	1					
ANR	657879	CompoundStatement		69:4:1645:1715	657548	1					
ANR	657880	IdentifierDeclStatement	string preproc = ASBeautifier :: extractPreprocessorStatement ( nextLine_ ) ;	6469:4:186498:186568	657548	0	True				
ANR	657881	IdentifierDecl	preproc = ASBeautifier :: extractPreprocessorStatement ( nextLine_ )		657548	0					
ANR	657882	IdentifierDeclType	string		657548	0					
ANR	657883	Identifier	preproc		657548	1					
ANR	657884	AssignmentExpression	preproc = ASBeautifier :: extractPreprocessorStatement ( nextLine_ )		657548	2		=			
ANR	657885	Identifier	preproc		657548	0					
ANR	657886	CallExpression	ASBeautifier :: extractPreprocessorStatement ( nextLine_ )		657548	1					
ANR	657887	Callee	ASBeautifier :: extractPreprocessorStatement		657548	0					
ANR	657888	Identifier	ASBeautifier :: extractPreprocessorStatement		657548	0					
ANR	657889	ArgumentList	nextLine_		657548	1					
ANR	657890	Argument	nextLine_		657548	0					
ANR	657891	Identifier	nextLine_		657548	0					
ANR	657892	IfStatement	"if ( preproc . length ( ) >= 2 && preproc . substr ( 0 , 2 ) == ""if"" )"		657548	1					
ANR	657893	Condition	"preproc . length ( ) >= 2 && preproc . substr ( 0 , 2 ) == ""if"""	6470:8:186578:186630	657548	0	True				
ANR	657894	AndExpression	"preproc . length ( ) >= 2 && preproc . substr ( 0 , 2 ) == ""if"""		657548	0		&&			
ANR	657895	RelationalExpression	preproc . length ( ) >= 2		657548	0		>=			
ANR	657896	CallExpression	preproc . length ( )		657548	0					
ANR	657897	Callee	preproc . length		657548	0					
ANR	657898	MemberAccess	preproc . length		657548	0					
ANR	657899	Identifier	preproc		657548	0					
ANR	657900	Identifier	length		657548	1					
ANR	657901	ArgumentList			657548	1					
ANR	657902	PrimaryExpression	2		657548	1					
ANR	657903	EqualityExpression	"preproc . substr ( 0 , 2 ) == ""if"""		657548	1		==			
ANR	657904	CallExpression	"preproc . substr ( 0 , 2 )"		657548	0					
ANR	657905	Callee	preproc . substr		657548	0					
ANR	657906	MemberAccess	preproc . substr		657548	0					
ANR	657907	Identifier	preproc		657548	0					
ANR	657908	Identifier	substr		657548	1					
ANR	657909	ArgumentList	0		657548	1					
ANR	657910	Argument	0		657548	0					
ANR	657911	PrimaryExpression	0		657548	0					
ANR	657912	Argument	2		657548	1					
ANR	657913	PrimaryExpression	2		657548	0					
ANR	657914	PrimaryExpression	"""if"""		657548	1					
ANR	657915	CompoundStatement		71:4:1808:1808	657548	1					
ANR	657916	ExpressionStatement	numBlockIndents += 1	6472:5:186668:186688	657548	0	True				
ANR	657917	AssignmentExpression	numBlockIndents += 1		657548	0		+=			
ANR	657918	Identifier	numBlockIndents		657548	0					
ANR	657919	PrimaryExpression	1		657548	1					
ANR	657920	ExpressionStatement	isInIndentableBlock = true	6473:5:186695:186721	657548	1	True				
ANR	657921	AssignmentExpression	isInIndentableBlock = true		657548	0		=			
ANR	657922	Identifier	isInIndentableBlock		657548	0					
ANR	657923	Identifier	true		657548	1					
ANR	657924	IfStatement	if ( ! processedFirstConditional )		657548	2					
ANR	657925	Condition	! processedFirstConditional	6475:9:186807:186832	657548	0	True				
ANR	657926	UnaryOperationExpression	! processedFirstConditional		657548	0					
ANR	657927	UnaryOperator	!		657548	0					
ANR	657928	Identifier	processedFirstConditional		657548	1					
ANR	657929	CompoundStatement		76:5:1987:1987	657548	1					
ANR	657930	ExpressionStatement	processedFirstConditional = true	6477:6:186848:186880	657548	0	True				
ANR	657931	AssignmentExpression	processedFirstConditional = true		657548	0		=			
ANR	657932	Identifier	processedFirstConditional		657548	0					
ANR	657933	Identifier	true		657548	1					
ANR	657934	ExpressionStatement	isFirstPreprocConditional = true	6478:6:186888:186920	657548	1	True				
ANR	657935	AssignmentExpression	isFirstPreprocConditional = true		657548	0		=			
ANR	657936	Identifier	isFirstPreprocConditional		657548	0					
ANR	657937	Identifier	true		657548	1					
ANR	657938	IfStatement	"if ( isNDefPreprocStatement ( nextLine_ , preproc ) )"		657548	2					
ANR	657939	Condition	"isNDefPreprocStatement ( nextLine_ , preproc )"	6479:10:186932:186973	657548	0	True				
ANR	657940	CallExpression	"isNDefPreprocStatement ( nextLine_ , preproc )"		657548	0					
ANR	657941	Callee	isNDefPreprocStatement		657548	0					
ANR	657942	Identifier	isNDefPreprocStatement		657548	0					
ANR	657943	ArgumentList	nextLine_		657548	1					
ANR	657944	Argument	nextLine_		657548	0					
ANR	657945	Identifier	nextLine_		657548	0					
ANR	657946	Argument	preproc		657548	1					
ANR	657947	Identifier	preproc		657548	0					
ANR	657948	ExpressionStatement	isPotentialHeaderGuard = true	6480:7:186983:187012	657548	1	True				
ANR	657949	AssignmentExpression	isPotentialHeaderGuard = true		657548	0		=			
ANR	657950	Identifier	isPotentialHeaderGuard		657548	0					
ANR	657951	Identifier	true		657548	1					
ANR	657952	ElseStatement	else		657548	0					
ANR	657953	IfStatement	"if ( preproc == ""endif"" )"		657548	0					
ANR	657954	Condition	"preproc == ""endif"""	6483:13:187040:187057	657548	0	True				
ANR	657955	EqualityExpression	"preproc == ""endif"""		657548	0		==			
ANR	657956	Identifier	preproc		657548	0					
ANR	657957	PrimaryExpression	"""endif"""		657548	1					
ANR	657958	CompoundStatement		84:4:2211:2211	657548	1					
ANR	657959	IfStatement	if ( numBlockIndents > 0 )		657548	0					
ANR	657960	Condition	numBlockIndents > 0	6485:9:187075:187093	657548	0	True				
ANR	657961	RelationalExpression	numBlockIndents > 0		657548	0		>			
ANR	657962	Identifier	numBlockIndents		657548	0					
ANR	657963	PrimaryExpression	0		657548	1					
ANR	657964	ExpressionStatement	numBlockIndents -= 1	6486:6:187102:187122	657548	1	True				
ANR	657965	AssignmentExpression	numBlockIndents -= 1		657548	0		-=			
ANR	657966	Identifier	numBlockIndents		657548	0					
ANR	657967	PrimaryExpression	1		657548	1					
ANR	657968	IfStatement	if ( numBlockIndents == 0 )		657548	1					
ANR	657969	Condition	numBlockIndents == 0	6488:9:187162:187181	657548	0	True				
ANR	657970	EqualityExpression	numBlockIndents == 0		657548	0		==			
ANR	657971	Identifier	numBlockIndents		657548	0					
ANR	657972	PrimaryExpression	0		657548	1					
ANR	657973	GotoStatement	goto EndOfWhileLoop ;	6489:6:187190:187209	657548	1	True				
ANR	657974	Identifier	EndOfWhileLoop		657548	0					
ANR	657975	ElseStatement	else		657548	0					
ANR	657976	IfStatement	"if ( preproc == ""define"" )"		657548	0					
ANR	657977	Condition	"preproc == ""define"""	6491:13:187230:187248	657548	0	True				
ANR	657978	EqualityExpression	"preproc == ""define"""		657548	0		==			
ANR	657979	Identifier	preproc		657548	0					
ANR	657980	PrimaryExpression	"""define"""		657548	1					
ANR	657981	CompoundStatement		92:4:2402:2402	657548	1					
ANR	657982	IfStatement	if ( nextLine_ [ nextLine_ . length ( ) - 1 ] == '\\\\' )		657548	0					
ANR	657983	Condition	nextLine_ [ nextLine_ . length ( ) - 1 ] == '\\\\'	6493:9:187266:187306	657548	0	True				
ANR	657984	EqualityExpression	nextLine_ [ nextLine_ . length ( ) - 1 ] == '\\\\'		657548	0		==			
ANR	657985	ArrayIndexing	nextLine_ [ nextLine_ . length ( ) - 1 ]		657548	0					
ANR	657986	Identifier	nextLine_		657548	0					
ANR	657987	AdditiveExpression	nextLine_ . length ( ) - 1		657548	1		-			
ANR	657988	CallExpression	nextLine_ . length ( )		657548	0					
ANR	657989	Callee	nextLine_ . length		657548	0					
ANR	657990	MemberAccess	nextLine_ . length		657548	0					
ANR	657991	Identifier	nextLine_		657548	0					
ANR	657992	Identifier	length		657548	1					
ANR	657993	ArgumentList			657548	1					
ANR	657994	PrimaryExpression	1		657548	1					
ANR	657995	PrimaryExpression	'\\\\'		657548	1					
ANR	657996	ExpressionStatement	blockContainsDefineContinuation = true	6494:6:187315:187353	657548	1	True				
ANR	657997	AssignmentExpression	blockContainsDefineContinuation = true		657548	0		=			
ANR	657998	Identifier	blockContainsDefineContinuation		657548	0					
ANR	657999	Identifier	true		657548	1					
ANR	658000	ElseStatement	else		657548	0					
ANR	658001	IfStatement	if ( isPotentialHeaderGuard && numBlockIndents == 1 )		657548	0					
ANR	658002	Condition	isPotentialHeaderGuard && numBlockIndents == 1	6496:14:187419:187464	657548	0	True				
ANR	658003	AndExpression	isPotentialHeaderGuard && numBlockIndents == 1		657548	0		&&			
ANR	658004	Identifier	isPotentialHeaderGuard		657548	0					
ANR	658005	EqualityExpression	numBlockIndents == 1		657548	1		==			
ANR	658006	Identifier	numBlockIndents		657548	0					
ANR	658007	PrimaryExpression	1		657548	1					
ANR	658008	ExpressionStatement	isPotentialHeaderGuard2 = true	6497:6:187473:187503	657548	1	True				
ANR	658009	AssignmentExpression	isPotentialHeaderGuard2 = true		657548	0		=			
ANR	658010	Identifier	isPotentialHeaderGuard2		657548	0					
ANR	658011	Identifier	true		657548	1					
ANR	658012	ExpressionStatement	i = nextLine_ . length ( )	6499:4:187515:187537	657548	2	True				
ANR	658013	AssignmentExpression	i = nextLine_ . length ( )		657548	0		=			
ANR	658014	Identifier	i		657548	0					
ANR	658015	CallExpression	nextLine_ . length ( )		657548	1					
ANR	658016	Callee	nextLine_ . length		657548	0					
ANR	658017	MemberAccess	nextLine_ . length		657548	0					
ANR	658018	Identifier	nextLine_		657548	0					
ANR	658019	Identifier	length		657548	1					
ANR	658020	ArgumentList			657548	1					
ANR	658021	ContinueStatement	continue ;	6500:4:187543:187551	657548	3	True				
ANR	658022	IfStatement	if ( nextLine_ [ i ] == '{' || nextLine_ [ i ] == '}' )		657548	8					
ANR	658023	Condition	nextLine_ [ i ] == '{' || nextLine_ [ i ] == '}'	6503:7:187589:187630	657548	0	True				
ANR	658024	OrExpression	nextLine_ [ i ] == '{' || nextLine_ [ i ] == '}'		657548	0		||			
ANR	658025	EqualityExpression	nextLine_ [ i ] == '{'		657548	0		==			
ANR	658026	ArrayIndexing	nextLine_ [ i ]		657548	0					
ANR	658027	Identifier	nextLine_		657548	0					
ANR	658028	Identifier	i		657548	1					
ANR	658029	PrimaryExpression	'{'		657548	1					
ANR	658030	EqualityExpression	nextLine_ [ i ] == '}'		657548	1		==			
ANR	658031	ArrayIndexing	nextLine_ [ i ]		657548	0					
ANR	658032	Identifier	nextLine_		657548	0					
ANR	658033	Identifier	i		657548	1					
ANR	658034	PrimaryExpression	'}'		657548	1					
ANR	658035	ExpressionStatement	blockContainsBraces = true	6504:4:187637:187663	657548	1	True				
ANR	658036	AssignmentExpression	blockContainsBraces = true		657548	0		=			
ANR	658037	Identifier	blockContainsBraces		657548	0					
ANR	658038	Identifier	true		657548	1					
ANR	658039	ElseStatement	else		657548	0					
ANR	658040	IfStatement	if ( nextLine_ [ i ] == '(' )		657548	0					
ANR	658041	Condition	nextLine_ [ i ] == '('	6505:12:187677:187695	657548	0	True				
ANR	658042	EqualityExpression	nextLine_ [ i ] == '('		657548	0		==			
ANR	658043	ArrayIndexing	nextLine_ [ i ]		657548	0					
ANR	658044	Identifier	nextLine_		657548	0					
ANR	658045	Identifier	i		657548	1					
ANR	658046	PrimaryExpression	'('		657548	1					
ANR	658047	ExpressionStatement	++ lineParenCount	6506:4:187702:187718	657548	1	True				
ANR	658048	UnaryExpression	++ lineParenCount		657548	0					
ANR	658049	IncDec	++		657548	0					
ANR	658050	Identifier	lineParenCount		657548	1					
ANR	658051	ElseStatement	else		657548	0					
ANR	658052	IfStatement	if ( nextLine_ [ i ] == ')' )		657548	0					
ANR	658053	Condition	nextLine_ [ i ] == ')'	6507:12:187732:187750	657548	0	True				
ANR	658054	EqualityExpression	nextLine_ [ i ] == ')'		657548	0		==			
ANR	658055	ArrayIndexing	nextLine_ [ i ]		657548	0					
ANR	658056	Identifier	nextLine_		657548	0					
ANR	658057	Identifier	i		657548	1					
ANR	658058	PrimaryExpression	')'		657548	1					
ANR	658059	ExpressionStatement	-- lineParenCount	6508:4:187757:187773	657548	1	True				
ANR	658060	UnaryExpression	-- lineParenCount		657548	0					
ANR	658061	IncDec	--		657548	0					
ANR	658062	Identifier	lineParenCount		657548	1					
ANR	658063	ElseStatement	else		657548	0					
ANR	658064	IfStatement	if ( nextLine_ [ i ] == ':' )		657548	0					
ANR	658065	Condition	nextLine_ [ i ] == ':'	6509:12:187787:187805	657548	0	True				
ANR	658066	EqualityExpression	nextLine_ [ i ] == ':'		657548	0		==			
ANR	658067	ArrayIndexing	nextLine_ [ i ]		657548	0					
ANR	658068	Identifier	nextLine_		657548	0					
ANR	658069	Identifier	i		657548	1					
ANR	658070	PrimaryExpression	':'		657548	1					
ANR	658071	CompoundStatement		110:3:2958:2958	657548	1					
ANR	658072	IfStatement	if ( nextLine_ . length ( ) > i && nextLine_ [ i + 1 ] == ':' )		657548	0					
ANR	658073	Condition	nextLine_ . length ( ) > i && nextLine_ [ i + 1 ] == ':'	6512:8:187843:187891	657548	0	True				
ANR	658074	AndExpression	nextLine_ . length ( ) > i && nextLine_ [ i + 1 ] == ':'		657548	0		&&			
ANR	658075	RelationalExpression	nextLine_ . length ( ) > i		657548	0		>			
ANR	658076	CallExpression	nextLine_ . length ( )		657548	0					
ANR	658077	Callee	nextLine_ . length		657548	0					
ANR	658078	MemberAccess	nextLine_ . length		657548	0					
ANR	658079	Identifier	nextLine_		657548	0					
ANR	658080	Identifier	length		657548	1					
ANR	658081	ArgumentList			657548	1					
ANR	658082	Identifier	i		657548	1					
ANR	658083	EqualityExpression	nextLine_ [ i + 1 ] == ':'		657548	1		==			
ANR	658084	ArrayIndexing	nextLine_ [ i + 1 ]		657548	0					
ANR	658085	Identifier	nextLine_		657548	0					
ANR	658086	AdditiveExpression	i + 1		657548	1		+			
ANR	658087	Identifier	i		657548	0					
ANR	658088	PrimaryExpression	1		657548	1					
ANR	658089	PrimaryExpression	':'		657548	1					
ANR	658090	ExpressionStatement	++ i	6513:5:187899:187902	657548	1	True				
ANR	658091	UnaryExpression	++ i		657548	0					
ANR	658092	IncDec	++		657548	0					
ANR	658093	Identifier	i		657548	1					
ANR	658094	ElseStatement	else		657548	0					
ANR	658095	ExpressionStatement	isInClassConstructor = true	6515:5:187918:187945	657548	0	True				
ANR	658096	AssignmentExpression	isInClassConstructor = true		657548	0		=			
ANR	658097	Identifier	isInClassConstructor		657548	0					
ANR	658098	Identifier	true		657548	1					
ANR	658099	IfStatement	if ( blockContainsBraces || isInClassConstructor || blockContainsDefineContinuation )		657548	9					
ANR	658100	Condition	blockContainsBraces || isInClassConstructor || blockContainsDefineContinuation	6518:7:188015:188092	657548	0	True				
ANR	658101	OrExpression	blockContainsBraces || isInClassConstructor || blockContainsDefineContinuation		657548	0		||			
ANR	658102	Identifier	blockContainsBraces		657548	0					
ANR	658103	OrExpression	isInClassConstructor || blockContainsDefineContinuation		657548	1		||			
ANR	658104	Identifier	isInClassConstructor		657548	0					
ANR	658105	Identifier	blockContainsDefineContinuation		657548	1					
ANR	658106	GotoStatement	goto EndOfWhileLoop ;	6519:4:188099:188118	657548	1	True				
ANR	658107	Identifier	EndOfWhileLoop		657548	0					
ANR	658108	IfStatement	if ( lineParenCount != 0 )		657548	2					
ANR	658109	Condition	lineParenCount != 0	6521:6:188162:188180	657548	0	True				
ANR	658110	EqualityExpression	lineParenCount != 0		657548	0		!=			
ANR	658111	Identifier	lineParenCount		657548	0					
ANR	658112	PrimaryExpression	0		657548	1					
ANR	658113	BreakStatement	break ;	6522:3:188186:188191	657548	1	True				
ANR	658114	Label	EndOfWhileLoop :	6524:0:188217:188231	657548	17	True				
ANR	658115	Identifier	EndOfWhileLoop		657548	0					
ANR	658116	ExpressionStatement	preprocBlockEnd = sourceIterator -> tellg ( )	6525:1:188234:188275	657548	18	True				
ANR	658117	AssignmentExpression	preprocBlockEnd = sourceIterator -> tellg ( )		657548	0		=			
ANR	658118	Identifier	preprocBlockEnd		657548	0					
ANR	658119	CallExpression	sourceIterator -> tellg ( )		657548	1					
ANR	658120	Callee	sourceIterator -> tellg		657548	0					
ANR	658121	PtrMemberAccess	sourceIterator -> tellg		657548	0					
ANR	658122	Identifier	sourceIterator		657548	0					
ANR	658123	Identifier	tellg		657548	1					
ANR	658124	ArgumentList			657548	1					
ANR	658125	IfStatement	if ( preprocBlockEnd < 0 )		657548	19					
ANR	658126	Condition	preprocBlockEnd < 0	6526:5:188282:188300	657548	0	True				
ANR	658127	RelationalExpression	preprocBlockEnd < 0		657548	0		<			
ANR	658128	Identifier	preprocBlockEnd		657548	0					
ANR	658129	PrimaryExpression	0		657548	1					
ANR	658130	ExpressionStatement	preprocBlockEnd = sourceIterator -> getStreamLength ( )	6527:2:188305:188356	657548	1	True				
ANR	658131	AssignmentExpression	preprocBlockEnd = sourceIterator -> getStreamLength ( )		657548	0		=			
ANR	658132	Identifier	preprocBlockEnd		657548	0					
ANR	658133	CallExpression	sourceIterator -> getStreamLength ( )		657548	1					
ANR	658134	Callee	sourceIterator -> getStreamLength		657548	0					
ANR	658135	PtrMemberAccess	sourceIterator -> getStreamLength		657548	0					
ANR	658136	Identifier	sourceIterator		657548	0					
ANR	658137	Identifier	getStreamLength		657548	1					
ANR	658138	ArgumentList			657548	1					
ANR	658139	IfStatement	if ( blockContainsBraces || isInClassConstructor || blockContainsDefineContinuation || lineParenCount != 0 || numBlockIndents != 0 )		657548	20					
ANR	658140	Condition	blockContainsBraces || isInClassConstructor || blockContainsDefineContinuation || lineParenCount != 0 || numBlockIndents != 0	6528:5:188363:188523	657548	0	True				
ANR	658141	OrExpression	blockContainsBraces || isInClassConstructor || blockContainsDefineContinuation || lineParenCount != 0 || numBlockIndents != 0		657548	0		||			
ANR	658142	Identifier	blockContainsBraces		657548	0					
ANR	658143	OrExpression	isInClassConstructor || blockContainsDefineContinuation || lineParenCount != 0 || numBlockIndents != 0		657548	1		||			
ANR	658144	Identifier	isInClassConstructor		657548	0					
ANR	658145	OrExpression	blockContainsDefineContinuation || lineParenCount != 0 || numBlockIndents != 0		657548	1		||			
ANR	658146	Identifier	blockContainsDefineContinuation		657548	0					
ANR	658147	OrExpression	lineParenCount != 0 || numBlockIndents != 0		657548	1		||			
ANR	658148	EqualityExpression	lineParenCount != 0		657548	0		!=			
ANR	658149	Identifier	lineParenCount		657548	0					
ANR	658150	PrimaryExpression	0		657548	1					
ANR	658151	EqualityExpression	numBlockIndents != 0		657548	1		!=			
ANR	658152	Identifier	numBlockIndents		657548	0					
ANR	658153	PrimaryExpression	0		657548	1					
ANR	658154	ExpressionStatement	isInIndentableBlock = false	6533:2:188528:188555	657548	1	True				
ANR	658155	AssignmentExpression	isInIndentableBlock = false		657548	0		=			
ANR	658156	Identifier	isInIndentableBlock		657548	0					
ANR	658157	Identifier	false		657548	1					
ANR	658158	IdentifierDeclStatement	"string nextText = peekNextText ( """" , false , stream ) ;"	6536:1:188631:188680	657548	21	True				
ANR	658159	IdentifierDecl	"nextText = peekNextText ( """" , false , stream )"		657548	0					
ANR	658160	IdentifierDeclType	string		657548	0					
ANR	658161	Identifier	nextText		657548	1					
ANR	658162	AssignmentExpression	"nextText = peekNextText ( """" , false , stream )"		657548	2		=			
ANR	658163	Identifier	nextText		657548	0					
ANR	658164	CallExpression	"peekNextText ( """" , false , stream )"		657548	1					
ANR	658165	Callee	peekNextText		657548	0					
ANR	658166	Identifier	peekNextText		657548	0					
ANR	658167	ArgumentList	""""""		657548	1					
ANR	658168	Argument	""""""		657548	0					
ANR	658169	PrimaryExpression	""""""		657548	0					
ANR	658170	Argument	false		657548	1					
ANR	658171	Identifier	false		657548	0					
ANR	658172	Argument	stream		657548	2					
ANR	658173	Identifier	stream		657548	0					
ANR	658174	IfStatement	if ( isFirstPreprocConditional )		657548	22					
ANR	658175	Condition	isFirstPreprocConditional	6538:5:188720:188744	657548	0	True				
ANR	658176	Identifier	isFirstPreprocConditional		657548	0					
ANR	658177	CompoundStatement		139:1:3895:3895	657548	1					
ANR	658178	ExpressionStatement	isFirstPreprocConditional = false	6540:2:188752:188785	657548	0	True				
ANR	658179	AssignmentExpression	isFirstPreprocConditional = false		657548	0		=			
ANR	658180	Identifier	isFirstPreprocConditional		657548	0					
ANR	658181	Identifier	false		657548	1					
ANR	658182	IfStatement	if ( nextText . empty ( ) && isPotentialHeaderGuard2 )		657548	1					
ANR	658183	Condition	nextText . empty ( ) && isPotentialHeaderGuard2	6541:6:188793:188835	657548	0	True				
ANR	658184	AndExpression	nextText . empty ( ) && isPotentialHeaderGuard2		657548	0		&&			
ANR	658185	CallExpression	nextText . empty ( )		657548	0					
ANR	658186	Callee	nextText . empty		657548	0					
ANR	658187	MemberAccess	nextText . empty		657548	0					
ANR	658188	Identifier	nextText		657548	0					
ANR	658189	Identifier	empty		657548	1					
ANR	658190	ArgumentList			657548	1					
ANR	658191	Identifier	isPotentialHeaderGuard2		657548	1					
ANR	658192	CompoundStatement		142:2:3987:3987	657548	1					
ANR	658193	ExpressionStatement	isInIndentableBlock = false	6543:3:188845:188872	657548	0	True				
ANR	658194	AssignmentExpression	isInIndentableBlock = false		657548	0		=			
ANR	658195	Identifier	isInIndentableBlock		657548	0					
ANR	658196	Identifier	false		657548	1					
ANR	658197	ExpressionStatement	preprocBlockEnd = 0	6544:3:188877:188896	657548	1	True				
ANR	658198	AssignmentExpression	preprocBlockEnd = 0		657548	0		=			
ANR	658199	Identifier	preprocBlockEnd		657548	0					
ANR	658200	PrimaryExpression	0		657548	1					
ANR	658201	IfStatement	if ( ! isInIndentableBlock )		657548	23					
ANR	658202	Condition	! isInIndentableBlock	6548:5:188979:188998	657548	0	True				
ANR	658203	UnaryOperationExpression	! isInIndentableBlock		657548	0					
ANR	658204	UnaryOperator	!		657548	0					
ANR	658205	Identifier	isInIndentableBlock		657548	1					
ANR	658206	ExpressionStatement	preprocBlockEnd = 0	6549:2:189003:189022	657548	1	True				
ANR	658207	AssignmentExpression	preprocBlockEnd = 0		657548	0		=			
ANR	658208	Identifier	preprocBlockEnd		657548	0					
ANR	658209	PrimaryExpression	0		657548	1					
ANR	658210	ReturnStatement	return isInIndentableBlock ;	6551:1:189076:189102	657548	24	True				
ANR	658211	Identifier	isInIndentableBlock		657548	0					
ANR	658212	ReturnType	bool		657548	1					
ANR	658213	Identifier	ASFormatter :: isIndentablePreprocessorBlock		657548	2					
ANR	658214	ParameterList	"const string & firstLine , size_t index"		657548	3					
ANR	658215	Parameter	const string & firstLine	6400:48:184813:184835	657548	0	True				
ANR	658216	ParameterType	const string &		657548	0					
ANR	658217	Identifier	firstLine		657548	1					
ANR	658218	Parameter	size_t index	6400:73:184838:184849	657548	1	True				
ANR	658219	ParameterType	size_t		657548	0					
ANR	658220	Identifier	index		657548	1					
ANR	658221	CFGEntryNode	ENTRY		657548		True				
ANR	658222	CFGExitNode	EXIT		657548		True				
ANR	658223	Symbol	preproc . length		657548						
ANR	658224	Symbol	firstLine . substr		657548						
ANR	658225	Symbol	* index		657548						
ANR	658226	Symbol	isInComment_		657548						
ANR	658227	Symbol	isWhiteSpace		657548						
ANR	658228	Symbol	blockContainsBraces		657548						
ANR	658229	Symbol	numBlockIndents		657548						
ANR	658230	Symbol	nextText . empty		657548						
ANR	658231	Symbol	isPotentialHeaderGuard		657548						
ANR	658232	Symbol	isFirstLine		657548						
ANR	658233	Symbol	stream -> peekNextLine		657548						
ANR	658234	Symbol	isInIndentableBlock		657548						
ANR	658235	Symbol	sourceIterator		657548						
ANR	658236	Symbol	sourceIterator -> tellg		657548						
ANR	658237	Symbol	isPotentialHeaderGuard2		657548						
ANR	658238	Symbol	blockContainsDefineContinuation		657548						
ANR	658239	Symbol	nextText		657548						
ANR	658240	Symbol	index		657548						
ANR	658241	Symbol	nextLine_ . compare		657548						
ANR	658242	Symbol	firstLine		657548						
ANR	658243	Symbol	* nextLine_ . length		657548						
ANR	658244	Symbol	sourceIterator -> getStreamLength		657548						
ANR	658245	Symbol	preprocBlockEnd		657548						
ANR	658246	Symbol	true		657548						
ANR	658247	Symbol	* stream		657548						
ANR	658248	Symbol	nextLine_ . length		657548						
ANR	658249	Symbol	nextLine_		657548						
ANR	658250	Symbol	isNDefPreprocStatement		657548						
ANR	658251	Symbol	preproc . substr		657548						
ANR	658252	Symbol	quoteChar_		657548						
ANR	658253	Symbol	lineParenCount		657548						
ANR	658254	Symbol	* sourceIterator		657548						
ANR	658255	Symbol	* firstLine		657548						
ANR	658256	Symbol	processedFirstConditional		657548						
ANR	658257	Symbol	stream		657548						
ANR	658258	Symbol	isDigitSeparator		657548						
ANR	658259	Symbol	ASBeautifier :: extractPreprocessorStatement		657548						
ANR	658260	Symbol	isInClassConstructor		657548						
ANR	658261	Symbol	false		657548						
ANR	658262	Symbol	i		657548						
ANR	658263	Symbol	stream -> hasMoreLines		657548						
ANR	658264	Symbol	isInQuote_		657548						
ANR	658265	Symbol	make_shared		657548						
ANR	658266	Symbol	ASPeekStream		657548						
ANR	658267	Symbol	* nextLine_		657548						
ANR	658268	Symbol	* i		657548						
ANR	658269	Symbol	isFirstPreprocConditional		657548						
ANR	658270	Symbol	peekNextText		657548						
ANR	658271	Symbol	preproc		657548						
ANR	658272	Function	ASFormatter :: isNDefPreprocStatement	6554:0:189107:189520							
ANR	658273	FunctionDef	"ASFormatter :: isNDefPreprocStatement (const string & nextLine_ , const string & preproc)"		658272	0					
ANR	658274	CompoundStatement		6555:0:189202:189520	658272	0					
ANR	658275	IfStatement	"if ( preproc == ""ifndef"" )"		658272	0					
ANR	658276	Condition	"preproc == ""ifndef"""	6556:5:189209:189227	658272	0	True				
ANR	658277	EqualityExpression	"preproc == ""ifndef"""		658272	0		==			
ANR	658278	Identifier	preproc		658272	0					
ANR	658279	PrimaryExpression	"""ifndef"""		658272	1					
ANR	658280	ReturnStatement	return true ;	6557:2:189232:189243	658272	1	True				
ANR	658281	Identifier	true		658272	0					
ANR	658282	IfStatement	"if ( preproc == ""if"" )"		658272	1					
ANR	658283	Condition	"preproc == ""if"""	6559:5:189275:189289	658272	0	True				
ANR	658284	EqualityExpression	"preproc == ""if"""		658272	0		==			
ANR	658285	Identifier	preproc		658272	0					
ANR	658286	PrimaryExpression	"""if"""		658272	1					
ANR	658287	CompoundStatement		7:2:94:124	658272	1					
ANR	658288	IdentifierDeclStatement	size_t i = nextLine_ . find ( '!' ) ;	6561:2:189297:189327	658272	0	True				
ANR	658289	IdentifierDecl	i = nextLine_ . find ( '!' )		658272	0					
ANR	658290	IdentifierDeclType	size_t		658272	0					
ANR	658291	Identifier	i		658272	1					
ANR	658292	AssignmentExpression	i = nextLine_ . find ( '!' )		658272	2		=			
ANR	658293	Identifier	i		658272	0					
ANR	658294	CallExpression	nextLine_ . find ( '!' )		658272	1					
ANR	658295	Callee	nextLine_ . find		658272	0					
ANR	658296	MemberAccess	nextLine_ . find		658272	0					
ANR	658297	Identifier	nextLine_		658272	0					
ANR	658298	Identifier	find		658272	1					
ANR	658299	ArgumentList	'!'		658272	1					
ANR	658300	Argument	'!'		658272	0					
ANR	658301	PrimaryExpression	'!'		658272	0					
ANR	658302	IfStatement	if ( i == string :: npos )		658272	1					
ANR	658303	Condition	i == string :: npos	6562:6:189335:189351	658272	0	True				
ANR	658304	EqualityExpression	i == string :: npos		658272	0		==			
ANR	658305	Identifier	i		658272	0					
ANR	658306	Identifier	string :: npos		658272	1					
ANR	658307	ReturnStatement	return false ;	6563:3:189357:189369	658272	1	True				
ANR	658308	Identifier	false		658272	0					
ANR	658309	ExpressionStatement	"i = nextLine_ . find_first_not_of ( "" \\t"" , ++ i )"	6564:2:189373:189416	658272	2	True				
ANR	658310	AssignmentExpression	"i = nextLine_ . find_first_not_of ( "" \\t"" , ++ i )"		658272	0		=			
ANR	658311	Identifier	i		658272	0					
ANR	658312	CallExpression	"nextLine_ . find_first_not_of ( "" \\t"" , ++ i )"		658272	1					
ANR	658313	Callee	nextLine_ . find_first_not_of		658272	0					
ANR	658314	MemberAccess	nextLine_ . find_first_not_of		658272	0					
ANR	658315	Identifier	nextLine_		658272	0					
ANR	658316	Identifier	find_first_not_of		658272	1					
ANR	658317	ArgumentList	""" \\t"""		658272	1					
ANR	658318	Argument	""" \\t"""		658272	0					
ANR	658319	PrimaryExpression	""" \\t"""		658272	0					
ANR	658320	Argument	++ i		658272	1					
ANR	658321	UnaryExpression	++ i		658272	0					
ANR	658322	IncDec	++		658272	0					
ANR	658323	Identifier	i		658272	1					
ANR	658324	IfStatement	"if ( i != string :: npos && nextLine_ . compare ( i , 7 , ""defined"" ) == 0 )"		658272	3					
ANR	658325	Condition	"i != string :: npos && nextLine_ . compare ( i , 7 , ""defined"" ) == 0"	6565:6:189424:189483	658272	0	True				
ANR	658326	AndExpression	"i != string :: npos && nextLine_ . compare ( i , 7 , ""defined"" ) == 0"		658272	0		&&			
ANR	658327	EqualityExpression	i != string :: npos		658272	0		!=			
ANR	658328	Identifier	i		658272	0					
ANR	658329	Identifier	string :: npos		658272	1					
ANR	658330	EqualityExpression	"nextLine_ . compare ( i , 7 , ""defined"" ) == 0"		658272	1		==			
ANR	658331	CallExpression	"nextLine_ . compare ( i , 7 , ""defined"" )"		658272	0					
ANR	658332	Callee	nextLine_ . compare		658272	0					
ANR	658333	MemberAccess	nextLine_ . compare		658272	0					
ANR	658334	Identifier	nextLine_		658272	0					
ANR	658335	Identifier	compare		658272	1					
ANR	658336	ArgumentList	i		658272	1					
ANR	658337	Argument	i		658272	0					
ANR	658338	Identifier	i		658272	0					
ANR	658339	Argument	7		658272	1					
ANR	658340	PrimaryExpression	7		658272	0					
ANR	658341	Argument	"""defined"""		658272	2					
ANR	658342	PrimaryExpression	"""defined"""		658272	0					
ANR	658343	PrimaryExpression	0		658272	1					
ANR	658344	ReturnStatement	return true ;	6566:3:189489:189500	658272	1	True				
ANR	658345	Identifier	true		658272	0					
ANR	658346	ReturnStatement	return false ;	6568:1:189506:189518	658272	2	True				
ANR	658347	Identifier	false		658272	0					
ANR	658348	ReturnType	bool		658272	1					
ANR	658349	Identifier	ASFormatter :: isNDefPreprocStatement		658272	2					
ANR	658350	ParameterList	"const string & nextLine_ , const string & preproc"		658272	3					
ANR	658351	Parameter	const string & nextLine_	6554:41:189148:189170	658272	0	True				
ANR	658352	ParameterType	const string &		658272	0					
ANR	658353	Identifier	nextLine_		658272	1					
ANR	658354	Parameter	const string & preproc	6554:66:189173:189193	658272	1	True				
ANR	658355	ParameterType	const string &		658272	0					
ANR	658356	Identifier	preproc		658272	1					
ANR	658357	CFGEntryNode	ENTRY		658272		True				
ANR	658358	CFGExitNode	EXIT		658272		True				
ANR	658359	Symbol	nextLine_ . find_first_not_of		658272						
ANR	658360	Symbol	nextLine_		658272						
ANR	658361	Symbol	nextLine_ . find		658272						
ANR	658362	Symbol	true		658272						
ANR	658363	Symbol	string :: npos		658272						
ANR	658364	Symbol	false		658272						
ANR	658365	Symbol	i		658272						
ANR	658366	Symbol	nextLine_ . compare		658272						
ANR	658367	Symbol	preproc		658272						
ANR	658368	Function	ASFormatter :: isExecSQL	6578:0:189750:190485							
ANR	658369	FunctionDef	"ASFormatter :: isExecSQL (const string & line , size_t index)"		658368	0					
ANR	658370	CompoundStatement		6579:0:189818:190485	658368	0					
ANR	658371	IfStatement	if ( line [ index ] != 'e' && line [ index ] != 'E' )		658368	0					
ANR	658372	Condition	line [ index ] != 'e' && line [ index ] != 'E'	6580:5:189825:189864	658368	0	True				
ANR	658373	AndExpression	line [ index ] != 'e' && line [ index ] != 'E'		658368	0		&&			
ANR	658374	EqualityExpression	line [ index ] != 'e'		658368	0		!=			
ANR	658375	ArrayIndexing	line [ index ]		658368	0					
ANR	658376	Identifier	line		658368	0					
ANR	658377	Identifier	index		658368	1					
ANR	658378	PrimaryExpression	'e'		658368	1					
ANR	658379	EqualityExpression	line [ index ] != 'E'		658368	1		!=			
ANR	658380	ArrayIndexing	line [ index ]		658368	0					
ANR	658381	Identifier	line		658368	0					
ANR	658382	Identifier	index		658368	1					
ANR	658383	PrimaryExpression	'E'		658368	1					
ANR	658384	ReturnStatement	return false ;	6581:2:189899:189911	658368	1	True				
ANR	658385	Identifier	false		658368	0					
ANR	658386	IdentifierDeclStatement	string word ;	6582:1:189914:189925	658368	1	True				
ANR	658387	IdentifierDecl	word		658368	0					
ANR	658388	IdentifierDeclType	string		658368	0					
ANR	658389	Identifier	word		658368	1					
ANR	658390	IfStatement	"if ( isCharPotentialHeader ( line , index ) )"		658368	2					
ANR	658391	Condition	"isCharPotentialHeader ( line , index )"	6583:5:189932:189965	658368	0	True				
ANR	658392	CallExpression	"isCharPotentialHeader ( line , index )"		658368	0					
ANR	658393	Callee	isCharPotentialHeader		658368	0					
ANR	658394	Identifier	isCharPotentialHeader		658368	0					
ANR	658395	ArgumentList	line		658368	1					
ANR	658396	Argument	line		658368	0					
ANR	658397	Identifier	line		658368	0					
ANR	658398	Argument	index		658368	1					
ANR	658399	Identifier	index		658368	0					
ANR	658400	ExpressionStatement	"word = getCurrentWord ( line , index )"	6584:2:189970:190004	658368	1	True				
ANR	658401	AssignmentExpression	"word = getCurrentWord ( line , index )"		658368	0		=			
ANR	658402	Identifier	word		658368	0					
ANR	658403	CallExpression	"getCurrentWord ( line , index )"		658368	1					
ANR	658404	Callee	getCurrentWord		658368	0					
ANR	658405	Identifier	getCurrentWord		658368	0					
ANR	658406	ArgumentList	line		658368	1					
ANR	658407	Argument	line		658368	0					
ANR	658408	Identifier	line		658368	0					
ANR	658409	Argument	index		658368	1					
ANR	658410	Identifier	index		658368	0					
ANR	658411	ForStatement	for ( size_t i = 0 ; i < word . length ( ) ; i ++ )		658368	3					
ANR	658412	ForInit	size_t i = 0 ;	6585:6:190012:190024	658368	0	True				
ANR	658413	IdentifierDeclStatement	size_t i = 0 ;		658368	0					
ANR	658414	IdentifierDecl	i = 0		658368	0					
ANR	658415	IdentifierDeclType	size_t		658368	0					
ANR	658416	Identifier	i		658368	1					
ANR	658417	AssignmentExpression	i = 0		658368	2		=			
ANR	658418	Identifier	i		658368	0					
ANR	658419	PrimaryExpression	0		658368	1					
ANR	658420	Condition	i < word . length ( )	6585:20:190026:190042	658368	1	True				
ANR	658421	RelationalExpression	i < word . length ( )		658368	0		<			
ANR	658422	Identifier	i		658368	0					
ANR	658423	CallExpression	word . length ( )		658368	1					
ANR	658424	Callee	word . length		658368	0					
ANR	658425	MemberAccess	word . length		658368	0					
ANR	658426	Identifier	word		658368	0					
ANR	658427	Identifier	length		658368	1					
ANR	658428	ArgumentList			658368	1					
ANR	658429	PostIncDecOperationExpression	i ++	6585:39:190045:190047	658368	2	True				
ANR	658430	Identifier	i		658368	0					
ANR	658431	IncDec	++		658368	1					
ANR	658432	ExpressionStatement	word [ i ] = ( char ) toupper ( word [ i ] )	6586:2:190052:190085	658368	3	True				
ANR	658433	AssignmentExpression	word [ i ] = ( char ) toupper ( word [ i ] )		658368	0		=			
ANR	658434	ArrayIndexing	word [ i ]		658368	0					
ANR	658435	Identifier	word		658368	0					
ANR	658436	Identifier	i		658368	1					
ANR	658437	CastExpression	( char ) toupper ( word [ i ] )		658368	1					
ANR	658438	CastTarget	char		658368	0					
ANR	658439	CallExpression	toupper ( word [ i ] )		658368	1					
ANR	658440	Callee	toupper		658368	0					
ANR	658441	Identifier	toupper		658368	0					
ANR	658442	ArgumentList	word [ i ]		658368	1					
ANR	658443	Argument	word [ i ]		658368	0					
ANR	658444	ArrayIndexing	word [ i ]		658368	0					
ANR	658445	Identifier	word		658368	0					
ANR	658446	Identifier	i		658368	1					
ANR	658447	IfStatement	"if ( word != ""EXEC"" )"		658368	4					
ANR	658448	Condition	"word != ""EXEC"""	6587:5:190092:190105	658368	0	True				
ANR	658449	EqualityExpression	"word != ""EXEC"""		658368	0		!=			
ANR	658450	Identifier	word		658368	0					
ANR	658451	PrimaryExpression	"""EXEC"""		658368	1					
ANR	658452	ReturnStatement	return false ;	6588:2:190110:190122	658368	1	True				
ANR	658453	Identifier	false		658368	0					
ANR	658454	IdentifierDeclStatement	size_t index2 = index + word . length ( ) ;	6589:1:190125:190162	658368	5	True				
ANR	658455	IdentifierDecl	index2 = index + word . length ( )		658368	0					
ANR	658456	IdentifierDeclType	size_t		658368	0					
ANR	658457	Identifier	index2		658368	1					
ANR	658458	AssignmentExpression	index2 = index + word . length ( )		658368	2		=			
ANR	658459	Identifier	index2		658368	0					
ANR	658460	AdditiveExpression	index + word . length ( )		658368	1		+			
ANR	658461	Identifier	index		658368	0					
ANR	658462	CallExpression	word . length ( )		658368	1					
ANR	658463	Callee	word . length		658368	0					
ANR	658464	MemberAccess	word . length		658368	0					
ANR	658465	Identifier	word		658368	0					
ANR	658466	Identifier	length		658368	1					
ANR	658467	ArgumentList			658368	1					
ANR	658468	ExpressionStatement	"index2 = line . find_first_not_of ( "" \\t"" , index2 )"	6590:1:190165:190211	658368	6	True				
ANR	658469	AssignmentExpression	"index2 = line . find_first_not_of ( "" \\t"" , index2 )"		658368	0		=			
ANR	658470	Identifier	index2		658368	0					
ANR	658471	CallExpression	"line . find_first_not_of ( "" \\t"" , index2 )"		658368	1					
ANR	658472	Callee	line . find_first_not_of		658368	0					
ANR	658473	MemberAccess	line . find_first_not_of		658368	0					
ANR	658474	Identifier	line		658368	0					
ANR	658475	Identifier	find_first_not_of		658368	1					
ANR	658476	ArgumentList	""" \\t"""		658368	1					
ANR	658477	Argument	""" \\t"""		658368	0					
ANR	658478	PrimaryExpression	""" \\t"""		658368	0					
ANR	658479	Argument	index2		658368	1					
ANR	658480	Identifier	index2		658368	0					
ANR	658481	IfStatement	if ( index2 == string :: npos )		658368	7					
ANR	658482	Condition	index2 == string :: npos	6591:5:190218:190239	658368	0	True				
ANR	658483	EqualityExpression	index2 == string :: npos		658368	0		==			
ANR	658484	Identifier	index2		658368	0					
ANR	658485	Identifier	string :: npos		658368	1					
ANR	658486	ReturnStatement	return false ;	6592:2:190244:190256	658368	1	True				
ANR	658487	Identifier	false		658368	0					
ANR	658488	ExpressionStatement	word . erase ( )	6593:1:190259:190271	658368	8	True				
ANR	658489	CallExpression	word . erase ( )		658368	0					
ANR	658490	Callee	word . erase		658368	0					
ANR	658491	MemberAccess	word . erase		658368	0					
ANR	658492	Identifier	word		658368	0					
ANR	658493	Identifier	erase		658368	1					
ANR	658494	ArgumentList			658368	1					
ANR	658495	IfStatement	"if ( isCharPotentialHeader ( line , index2 ) )"		658368	9					
ANR	658496	Condition	"isCharPotentialHeader ( line , index2 )"	6594:5:190278:190312	658368	0	True				
ANR	658497	CallExpression	"isCharPotentialHeader ( line , index2 )"		658368	0					
ANR	658498	Callee	isCharPotentialHeader		658368	0					
ANR	658499	Identifier	isCharPotentialHeader		658368	0					
ANR	658500	ArgumentList	line		658368	1					
ANR	658501	Argument	line		658368	0					
ANR	658502	Identifier	line		658368	0					
ANR	658503	Argument	index2		658368	1					
ANR	658504	Identifier	index2		658368	0					
ANR	658505	ExpressionStatement	"word = getCurrentWord ( line , index2 )"	6595:2:190317:190352	658368	1	True				
ANR	658506	AssignmentExpression	"word = getCurrentWord ( line , index2 )"		658368	0		=			
ANR	658507	Identifier	word		658368	0					
ANR	658508	CallExpression	"getCurrentWord ( line , index2 )"		658368	1					
ANR	658509	Callee	getCurrentWord		658368	0					
ANR	658510	Identifier	getCurrentWord		658368	0					
ANR	658511	ArgumentList	line		658368	1					
ANR	658512	Argument	line		658368	0					
ANR	658513	Identifier	line		658368	0					
ANR	658514	Argument	index2		658368	1					
ANR	658515	Identifier	index2		658368	0					
ANR	658516	ForStatement	for ( size_t i = 0 ; i < word . length ( ) ; i ++ )		658368	10					
ANR	658517	ForInit	size_t i = 0 ;	6596:6:190360:190372	658368	0	True				
ANR	658518	IdentifierDeclStatement	size_t i = 0 ;		658368	0					
ANR	658519	IdentifierDecl	i = 0		658368	0					
ANR	658520	IdentifierDeclType	size_t		658368	0					
ANR	658521	Identifier	i		658368	1					
ANR	658522	AssignmentExpression	i = 0		658368	2		=			
ANR	658523	Identifier	i		658368	0					
ANR	658524	PrimaryExpression	0		658368	1					
ANR	658525	Condition	i < word . length ( )	6596:20:190374:190390	658368	1	True				
ANR	658526	RelationalExpression	i < word . length ( )		658368	0		<			
ANR	658527	Identifier	i		658368	0					
ANR	658528	CallExpression	word . length ( )		658368	1					
ANR	658529	Callee	word . length		658368	0					
ANR	658530	MemberAccess	word . length		658368	0					
ANR	658531	Identifier	word		658368	0					
ANR	658532	Identifier	length		658368	1					
ANR	658533	ArgumentList			658368	1					
ANR	658534	PostIncDecOperationExpression	i ++	6596:39:190393:190395	658368	2	True				
ANR	658535	Identifier	i		658368	0					
ANR	658536	IncDec	++		658368	1					
ANR	658537	ExpressionStatement	word [ i ] = ( char ) toupper ( word [ i ] )	6597:2:190400:190433	658368	3	True				
ANR	658538	AssignmentExpression	word [ i ] = ( char ) toupper ( word [ i ] )		658368	0		=			
ANR	658539	ArrayIndexing	word [ i ]		658368	0					
ANR	658540	Identifier	word		658368	0					
ANR	658541	Identifier	i		658368	1					
ANR	658542	CastExpression	( char ) toupper ( word [ i ] )		658368	1					
ANR	658543	CastTarget	char		658368	0					
ANR	658544	CallExpression	toupper ( word [ i ] )		658368	1					
ANR	658545	Callee	toupper		658368	0					
ANR	658546	Identifier	toupper		658368	0					
ANR	658547	ArgumentList	word [ i ]		658368	1					
ANR	658548	Argument	word [ i ]		658368	0					
ANR	658549	ArrayIndexing	word [ i ]		658368	0					
ANR	658550	Identifier	word		658368	0					
ANR	658551	Identifier	i		658368	1					
ANR	658552	IfStatement	"if ( word != ""SQL"" )"		658368	11					
ANR	658553	Condition	"word != ""SQL"""	6598:5:190440:190452	658368	0	True				
ANR	658554	EqualityExpression	"word != ""SQL"""		658368	0		!=			
ANR	658555	Identifier	word		658368	0					
ANR	658556	PrimaryExpression	"""SQL"""		658368	1					
ANR	658557	ReturnStatement	return false ;	6599:2:190457:190469	658368	1	True				
ANR	658558	Identifier	false		658368	0					
ANR	658559	ReturnStatement	return true ;	6600:1:190472:190483	658368	12	True				
ANR	658560	Identifier	true		658368	0					
ANR	658561	ReturnType	bool		658368	1					
ANR	658562	Identifier	ASFormatter :: isExecSQL		658368	2					
ANR	658563	ParameterList	"const string & line , size_t index"		658368	3					
ANR	658564	Parameter	const string & line	6578:28:189778:189795	658368	0	True				
ANR	658565	ParameterType	const string &		658368	0					
ANR	658566	Identifier	line		658368	1					
ANR	658567	Parameter	size_t index	6578:48:189798:189809	658368	1	True				
ANR	658568	ParameterType	size_t		658368	0					
ANR	658569	Identifier	index		658368	1					
ANR	658570	CFGEntryNode	ENTRY		658368		True				
ANR	658571	CFGExitNode	EXIT		658368		True				
ANR	658572	Symbol	getCurrentWord		658368						
ANR	658573	Symbol	toupper		658368						
ANR	658574	Symbol	line		658368						
ANR	658575	Symbol	* word		658368						
ANR	658576	Symbol	* index		658368						
ANR	658577	Symbol	false		658368						
ANR	658578	Symbol	string :: npos		658368						
ANR	658579	Symbol	index		658368						
ANR	658580	Symbol	i		658368						
ANR	658581	Symbol	index2		658368						
ANR	658582	Symbol	* line		658368						
ANR	658583	Symbol	line . find_first_not_of		658368						
ANR	658584	Symbol	isCharPotentialHeader		658368						
ANR	658585	Symbol	* i		658368						
ANR	658586	Symbol	true		658368						
ANR	658587	Symbol	word		658368						
ANR	658588	Symbol	word . length		658368						
ANR	658589	Function	ASFormatter :: trimContinuationLine	6609:0:190654:191853							
ANR	658590	FunctionDef	ASFormatter :: trimContinuationLine ()		658589	0					
ANR	658591	CompoundStatement		6610:0:190695:191853	658589	0					
ANR	658592	IdentifierDeclStatement	size_t len = currentLine . length ( ) ;	6611:1:190698:190731	658589	0	True				
ANR	658593	IdentifierDecl	len = currentLine . length ( )		658589	0					
ANR	658594	IdentifierDeclType	size_t		658589	0					
ANR	658595	Identifier	len		658589	1					
ANR	658596	AssignmentExpression	len = currentLine . length ( )		658589	2		=			
ANR	658597	Identifier	len		658589	0					
ANR	658598	CallExpression	currentLine . length ( )		658589	1					
ANR	658599	Callee	currentLine . length		658589	0					
ANR	658600	MemberAccess	currentLine . length		658589	0					
ANR	658601	Identifier	currentLine		658589	0					
ANR	658602	Identifier	length		658589	1					
ANR	658603	ArgumentList			658589	1					
ANR	658604	IdentifierDeclStatement	size_t tabSize = getTabLength ( ) ;	6612:1:190734:190765	658589	1	True				
ANR	658605	IdentifierDecl	tabSize = getTabLength ( )		658589	0					
ANR	658606	IdentifierDeclType	size_t		658589	0					
ANR	658607	Identifier	tabSize		658589	1					
ANR	658608	AssignmentExpression	tabSize = getTabLength ( )		658589	2		=			
ANR	658609	Identifier	tabSize		658589	0					
ANR	658610	CallExpression	getTabLength ( )		658589	1					
ANR	658611	Callee	getTabLength		658589	0					
ANR	658612	Identifier	getTabLength		658589	0					
ANR	658613	ArgumentList			658589	1					
ANR	658614	ExpressionStatement	charNum = 0	6613:1:190768:190779	658589	2	True				
ANR	658615	AssignmentExpression	charNum = 0		658589	0		=			
ANR	658616	Identifier	charNum		658589	0					
ANR	658617	PrimaryExpression	0		658589	1					
ANR	658618	IfStatement	if ( leadingSpaces > 0 && len > 0 )		658589	3					
ANR	658619	Condition	leadingSpaces > 0 && len > 0	6615:5:190787:190814	658589	0	True				
ANR	658620	AndExpression	leadingSpaces > 0 && len > 0		658589	0		&&			
ANR	658621	RelationalExpression	leadingSpaces > 0		658589	0		>			
ANR	658622	Identifier	leadingSpaces		658589	0					
ANR	658623	PrimaryExpression	0		658589	1					
ANR	658624	RelationalExpression	len > 0		658589	1		>			
ANR	658625	Identifier	len		658589	0					
ANR	658626	PrimaryExpression	0		658589	1					
ANR	658627	CompoundStatement		9:2:138:172	658589	1					
ANR	658628	IdentifierDeclStatement	size_t i ;	6617:2:190822:190830	658589	0	True				
ANR	658629	IdentifierDecl	i		658589	0					
ANR	658630	IdentifierDeclType	size_t		658589	0					
ANR	658631	Identifier	i		658589	1					
ANR	658632	IdentifierDeclStatement	size_t continuationIncrementIn = 0 ;	6618:2:190834:190868	658589	1	True				
ANR	658633	IdentifierDecl	continuationIncrementIn = 0		658589	0					
ANR	658634	IdentifierDeclType	size_t		658589	0					
ANR	658635	Identifier	continuationIncrementIn		658589	1					
ANR	658636	AssignmentExpression	continuationIncrementIn = 0		658589	2		=			
ANR	658637	Identifier	continuationIncrementIn		658589	0					
ANR	658638	PrimaryExpression	0		658589	1					
ANR	658639	ForStatement	for ( i = 0 ; ( i < len ) && ( i + continuationIncrementIn < leadingSpaces ) ; i ++ )		658589	2					
ANR	658640	ForInit	i = 0 ;	6619:7:190877:190882	658589	0	True				
ANR	658641	AssignmentExpression	i = 0		658589	0		=			
ANR	658642	Identifier	i		658589	0					
ANR	658643	PrimaryExpression	0		658589	1					
ANR	658644	Condition	( i < len ) && ( i + continuationIncrementIn < leadingSpaces )	6619:14:190884:190941	658589	1	True				
ANR	658645	AndExpression	( i < len ) && ( i + continuationIncrementIn < leadingSpaces )		658589	0		&&			
ANR	658646	RelationalExpression	i < len		658589	0		<			
ANR	658647	Identifier	i		658589	0					
ANR	658648	Identifier	len		658589	1					
ANR	658649	RelationalExpression	i + continuationIncrementIn < leadingSpaces		658589	1		<			
ANR	658650	AdditiveExpression	i + continuationIncrementIn		658589	0		+			
ANR	658651	Identifier	i		658589	0					
ANR	658652	Identifier	continuationIncrementIn		658589	1					
ANR	658653	Identifier	leadingSpaces		658589	1					
ANR	658654	PostIncDecOperationExpression	i ++	6619:74:190944:190946	658589	2	True				
ANR	658655	Identifier	i		658589	0					
ANR	658656	IncDec	++		658589	1					
ANR	658657	CompoundStatement		11:2:255:255	658589	3					
ANR	658658	IfStatement	if ( ! isWhiteSpace ( currentLine [ i ] ) )		658589	0					
ANR	658659	Condition	! isWhiteSpace ( currentLine [ i ] )	6621:7:190960:190988	658589	0	True				
ANR	658660	UnaryOperationExpression	! isWhiteSpace ( currentLine [ i ] )		658589	0					
ANR	658661	UnaryOperator	!		658589	0					
ANR	658662	CallExpression	isWhiteSpace ( currentLine [ i ] )		658589	1					
ANR	658663	Callee	isWhiteSpace		658589	0					
ANR	658664	Identifier	isWhiteSpace		658589	0					
ANR	658665	ArgumentList	currentLine [ i ]		658589	1					
ANR	658666	Argument	currentLine [ i ]		658589	0					
ANR	658667	ArrayIndexing	currentLine [ i ]		658589	0					
ANR	658668	Identifier	currentLine		658589	0					
ANR	658669	Identifier	i		658589	1					
ANR	658670	CompoundStatement		13:3:324:324	658589	1					
ANR	658671	IfStatement	if ( i < continuationIncrementIn )		658589	0					
ANR	658672	Condition	i < continuationIncrementIn	6623:8:191030:191056	658589	0	True				
ANR	658673	RelationalExpression	i < continuationIncrementIn		658589	0		<			
ANR	658674	Identifier	i		658589	0					
ANR	658675	Identifier	continuationIncrementIn		658589	1					
ANR	658676	ExpressionStatement	leadingSpaces = i + tabIncrementIn	6624:5:191064:191098	658589	1	True				
ANR	658677	AssignmentExpression	leadingSpaces = i + tabIncrementIn		658589	0		=			
ANR	658678	Identifier	leadingSpaces		658589	0					
ANR	658679	AdditiveExpression	i + tabIncrementIn		658589	1		+			
ANR	658680	Identifier	i		658589	0					
ANR	658681	Identifier	tabIncrementIn		658589	1					
ANR	658682	ExpressionStatement	continuationIncrementIn = tabIncrementIn	6625:4:191104:191144	658589	1	True				
ANR	658683	AssignmentExpression	continuationIncrementIn = tabIncrementIn		658589	0		=			
ANR	658684	Identifier	continuationIncrementIn		658589	0					
ANR	658685	Identifier	tabIncrementIn		658589	1					
ANR	658686	BreakStatement	break ;	6626:4:191150:191155	658589	2	True				
ANR	658687	IfStatement	if ( currentLine [ i ] == '\\t' )		658589	1					
ANR	658688	Condition	currentLine [ i ] == '\\t'	6628:7:191169:191190	658589	0	True				
ANR	658689	EqualityExpression	currentLine [ i ] == '\\t'		658589	0		==			
ANR	658690	ArrayIndexing	currentLine [ i ]		658589	0					
ANR	658691	Identifier	currentLine		658589	0					
ANR	658692	Identifier	i		658589	1					
ANR	658693	PrimaryExpression	'\\t'		658589	1					
ANR	658694	ExpressionStatement	continuationIncrementIn += tabSize - 1 - ( ( continuationIncrementIn + i ) % tabSize )	6629:4:191197:191279	658589	1	True				
ANR	658695	AssignmentExpression	continuationIncrementIn += tabSize - 1 - ( ( continuationIncrementIn + i ) % tabSize )		658589	0		+=			
ANR	658696	Identifier	continuationIncrementIn		658589	0					
ANR	658697	AdditiveExpression	tabSize - 1 - ( ( continuationIncrementIn + i ) % tabSize )		658589	1		-			
ANR	658698	Identifier	tabSize		658589	0					
ANR	658699	AdditiveExpression	1 - ( ( continuationIncrementIn + i ) % tabSize )		658589	1		-			
ANR	658700	PrimaryExpression	1		658589	0					
ANR	658701	MultiplicativeExpression	( continuationIncrementIn + i ) % tabSize		658589	1		%			
ANR	658702	AdditiveExpression	continuationIncrementIn + i		658589	0		+			
ANR	658703	Identifier	continuationIncrementIn		658589	0					
ANR	658704	Identifier	i		658589	1					
ANR	658705	Identifier	tabSize		658589	1					
ANR	658706	IfStatement	if ( ( int ) continuationIncrementIn == tabIncrementIn )		658589	3					
ANR	658707	Condition	( int ) continuationIncrementIn == tabIncrementIn	6632:6:191292:191338	658589	0	True				
ANR	658708	EqualityExpression	( int ) continuationIncrementIn == tabIncrementIn		658589	0		==			
ANR	658709	CastExpression	( int ) continuationIncrementIn		658589	0					
ANR	658710	CastTarget	int		658589	0					
ANR	658711	Identifier	continuationIncrementIn		658589	1					
ANR	658712	Identifier	tabIncrementIn		658589	1					
ANR	658713	ExpressionStatement	charNum = i	6633:3:191344:191355	658589	1	True				
ANR	658714	AssignmentExpression	charNum = i		658589	0		=			
ANR	658715	Identifier	charNum		658589	0					
ANR	658716	Identifier	i		658589	1					
ANR	658717	ElseStatement	else		658589	0					
ANR	658718	CompoundStatement		29:3:751:771	658589	0					
ANR	658719	IdentifierDeclStatement	string newLine ;	6637:3:191428:191442	658589	0	True				
ANR	658720	IdentifierDecl	newLine		658589	0					
ANR	658721	IdentifierDeclType	string		658589	0					
ANR	658722	Identifier	newLine		658589	1					
ANR	658723	IdentifierDeclStatement	int leadingChars = 0 ;	6638:3:191447:191467	658589	1	True				
ANR	658724	IdentifierDecl	leadingChars = 0		658589	0					
ANR	658725	IdentifierDeclType	int		658589	0					
ANR	658726	Identifier	leadingChars		658589	1					
ANR	658727	AssignmentExpression	leadingChars = 0		658589	2		=			
ANR	658728	Identifier	leadingChars		658589	0					
ANR	658729	PrimaryExpression	0		658589	1					
ANR	658730	IfStatement	if ( ( int ) leadingSpaces > tabIncrementIn )		658589	2					
ANR	658731	Condition	( int ) leadingSpaces > tabIncrementIn	6639:7:191476:191511	658589	0	True				
ANR	658732	RelationalExpression	( int ) leadingSpaces > tabIncrementIn		658589	0		>			
ANR	658733	CastExpression	( int ) leadingSpaces		658589	0					
ANR	658734	CastTarget	int		658589	0					
ANR	658735	Identifier	leadingSpaces		658589	1					
ANR	658736	Identifier	tabIncrementIn		658589	1					
ANR	658737	ExpressionStatement	leadingChars = leadingSpaces - tabIncrementIn	6640:4:191518:191563	658589	1	True				
ANR	658738	AssignmentExpression	leadingChars = leadingSpaces - tabIncrementIn		658589	0		=			
ANR	658739	Identifier	leadingChars		658589	0					
ANR	658740	AdditiveExpression	leadingSpaces - tabIncrementIn		658589	1		-			
ANR	658741	Identifier	leadingSpaces		658589	0					
ANR	658742	Identifier	tabIncrementIn		658589	1					
ANR	658743	ExpressionStatement	"newLine . append ( leadingChars , ' ' )"	6641:3:191568:191601	658589	3	True				
ANR	658744	CallExpression	"newLine . append ( leadingChars , ' ' )"		658589	0					
ANR	658745	Callee	newLine . append		658589	0					
ANR	658746	MemberAccess	newLine . append		658589	0					
ANR	658747	Identifier	newLine		658589	0					
ANR	658748	Identifier	append		658589	1					
ANR	658749	ArgumentList	leadingChars		658589	1					
ANR	658750	Argument	leadingChars		658589	0					
ANR	658751	Identifier	leadingChars		658589	0					
ANR	658752	Argument	' '		658589	1					
ANR	658753	PrimaryExpression	' '		658589	0					
ANR	658754	ExpressionStatement	"newLine . append ( currentLine , i , len - i )"	6642:3:191606:191645	658589	4	True				
ANR	658755	CallExpression	"newLine . append ( currentLine , i , len - i )"		658589	0					
ANR	658756	Callee	newLine . append		658589	0					
ANR	658757	MemberAccess	newLine . append		658589	0					
ANR	658758	Identifier	newLine		658589	0					
ANR	658759	Identifier	append		658589	1					
ANR	658760	ArgumentList	currentLine		658589	1					
ANR	658761	Argument	currentLine		658589	0					
ANR	658762	Identifier	currentLine		658589	0					
ANR	658763	Argument	i		658589	1					
ANR	658764	Identifier	i		658589	0					
ANR	658765	Argument	len - i		658589	2					
ANR	658766	AdditiveExpression	len - i		658589	0		-			
ANR	658767	Identifier	len		658589	0					
ANR	658768	Identifier	i		658589	1					
ANR	658769	ExpressionStatement	currentLine = newLine	6643:3:191650:191671	658589	5	True				
ANR	658770	AssignmentExpression	currentLine = newLine		658589	0		=			
ANR	658771	Identifier	currentLine		658589	0					
ANR	658772	Identifier	newLine		658589	1					
ANR	658773	ExpressionStatement	charNum = leadingChars	6644:3:191676:191698	658589	6	True				
ANR	658774	AssignmentExpression	charNum = leadingChars		658589	0		=			
ANR	658775	Identifier	charNum		658589	0					
ANR	658776	Identifier	leadingChars		658589	1					
ANR	658777	IfStatement	if ( currentLine . length ( ) == 0 )		658589	7					
ANR	658778	Condition	currentLine . length ( ) == 0	6645:7:191707:191731	658589	0	True				
ANR	658779	EqualityExpression	currentLine . length ( ) == 0		658589	0		==			
ANR	658780	CallExpression	currentLine . length ( )		658589	0					
ANR	658781	Callee	currentLine . length		658589	0					
ANR	658782	MemberAccess	currentLine . length		658589	0					
ANR	658783	Identifier	currentLine		658589	0					
ANR	658784	Identifier	length		658589	1					
ANR	658785	ArgumentList			658589	1					
ANR	658786	PrimaryExpression	0		658589	1					
ANR	658787	ExpressionStatement	"currentLine = string ( "" "" )"	6646:4:191738:191763	658589	1	True				
ANR	658788	AssignmentExpression	"currentLine = string ( "" "" )"		658589	0		=			
ANR	658789	Identifier	currentLine		658589	0					
ANR	658790	CallExpression	"string ( "" "" )"		658589	1					
ANR	658791	Callee	string		658589	0					
ANR	658792	Identifier	string		658589	0					
ANR	658793	ArgumentList	""" """		658589	1					
ANR	658794	Argument	""" """		658589	0					
ANR	658795	PrimaryExpression	""" """		658589	0					
ANR	658796	IfStatement	if ( i >= len )		658589	4					
ANR	658797	Condition	i >= len	6648:6:191824:191831	658589	0	True				
ANR	658798	RelationalExpression	i >= len		658589	0		>=			
ANR	658799	Identifier	i		658589	0					
ANR	658800	Identifier	len		658589	1					
ANR	658801	ExpressionStatement	charNum = 0	6649:3:191837:191848	658589	1	True				
ANR	658802	AssignmentExpression	charNum = 0		658589	0		=			
ANR	658803	Identifier	charNum		658589	0					
ANR	658804	PrimaryExpression	0		658589	1					
ANR	658805	ReturnType	void		658589	1					
ANR	658806	Identifier	ASFormatter :: trimContinuationLine		658589	2					
ANR	658807	ParameterList			658589	3					
ANR	658808	CFGEntryNode	ENTRY		658589		True				
ANR	658809	CFGExitNode	EXIT		658589		True				
ANR	658810	Symbol	newLine		658589						
ANR	658811	Symbol	string		658589						
ANR	658812	Symbol	continuationIncrementIn		658589						
ANR	658813	Symbol	i		658589						
ANR	658814	Symbol	isWhiteSpace		658589						
ANR	658815	Symbol	leadingSpaces		658589						
ANR	658816	Symbol	* currentLine		658589						
ANR	658817	Symbol	getTabLength		658589						
ANR	658818	Symbol	tabSize		658589						
ANR	658819	Symbol	* i		658589						
ANR	658820	Symbol	len		658589						
ANR	658821	Symbol	currentLine . length		658589						
ANR	658822	Symbol	charNum		658589						
ANR	658823	Symbol	tabIncrementIn		658589						
ANR	658824	Symbol	currentLine		658589						
ANR	658825	Symbol	leadingChars		658589						
ANR	658826	Function	ASFormatter :: isClosingHeader	6658:0:191968:192128							
ANR	658827	FunctionDef	ASFormatter :: isClosingHeader (const string * header)		658826	0					
ANR	658828	CompoundStatement		6659:0:192030:192128	658826	0					
ANR	658829	ReturnStatement	return ( header == & AS_ELSE || header == & AS_CATCH || header == & AS_FINALLY ) ;	6660:1:192033:192126	658826	0	True				
ANR	658830	OrExpression	header == & AS_ELSE || header == & AS_CATCH || header == & AS_FINALLY		658826	0		||			
ANR	658831	EqualityExpression	header == & AS_ELSE		658826	0		==			
ANR	658832	Identifier	header		658826	0					
ANR	658833	UnaryOperationExpression	& AS_ELSE		658826	1					
ANR	658834	UnaryOperator	&		658826	0					
ANR	658835	Identifier	AS_ELSE		658826	1					
ANR	658836	OrExpression	header == & AS_CATCH || header == & AS_FINALLY		658826	1		||			
ANR	658837	EqualityExpression	header == & AS_CATCH		658826	0		==			
ANR	658838	Identifier	header		658826	0					
ANR	658839	UnaryOperationExpression	& AS_CATCH		658826	1					
ANR	658840	UnaryOperator	&		658826	0					
ANR	658841	Identifier	AS_CATCH		658826	1					
ANR	658842	EqualityExpression	header == & AS_FINALLY		658826	1		==			
ANR	658843	Identifier	header		658826	0					
ANR	658844	UnaryOperationExpression	& AS_FINALLY		658826	1					
ANR	658845	UnaryOperator	&		658826	0					
ANR	658846	Identifier	AS_FINALLY		658826	1					
ANR	658847	ReturnType	bool		658826	1					
ANR	658848	Identifier	ASFormatter :: isClosingHeader		658826	2					
ANR	658849	ParameterList	const string * header		658826	3					
ANR	658850	Parameter	const string * header	6658:34:192002:192021	658826	0	True				
ANR	658851	ParameterType	const string *		658826	0					
ANR	658852	Identifier	header		658826	1					
ANR	658853	CFGEntryNode	ENTRY		658826		True				
ANR	658854	CFGExitNode	EXIT		658826		True				
ANR	658855	Symbol	header		658826						
ANR	658856	Symbol	& AS_CATCH		658826						
ANR	658857	Symbol	& AS_FINALLY		658826						
ANR	658858	Symbol	& AS_ELSE		658826						
ANR	658859	Function	ASFormatter :: isImmediatelyPostCast	6670:0:192300:193073							
ANR	658860	FunctionDef	ASFormatter :: isImmediatelyPostCast ()		658859	0					
ANR	658861	CompoundStatement		6671:0:192348:193073	658859	0					
ANR	658862	ExpressionStatement	assert ( previousNonWSChar == ')' && currentChar == '*' )	6672:1:192351:192405	658859	0	True				
ANR	658863	CallExpression	assert ( previousNonWSChar == ')' && currentChar == '*' )		658859	0					
ANR	658864	Callee	assert		658859	0					
ANR	658865	Identifier	assert		658859	0					
ANR	658866	ArgumentList	previousNonWSChar == ')' && currentChar == '*'		658859	1					
ANR	658867	Argument	previousNonWSChar == ')' && currentChar == '*'		658859	0					
ANR	658868	AndExpression	previousNonWSChar == ')' && currentChar == '*'		658859	0		&&			
ANR	658869	EqualityExpression	previousNonWSChar == ')'		658859	0		==			
ANR	658870	Identifier	previousNonWSChar		658859	0					
ANR	658871	PrimaryExpression	')'		658859	1					
ANR	658872	EqualityExpression	currentChar == '*'		658859	1		==			
ANR	658873	Identifier	currentChar		658859	0					
ANR	658874	PrimaryExpression	'*'		658859	1					
ANR	658875	IdentifierDeclStatement	string line ;	6674:1:192478:192489	658859	1	True				
ANR	658876	IdentifierDecl	line		658859	0					
ANR	658877	IdentifierDeclType	string		658859	0					
ANR	658878	Identifier	line		658859	1					
ANR	658879	IdentifierDeclStatement	"size_t paren = currentLine . rfind ( ')' , charNum ) ;"	6675:1:192530:192576	658859	2	True				
ANR	658880	IdentifierDecl	"paren = currentLine . rfind ( ')' , charNum )"		658859	0					
ANR	658881	IdentifierDeclType	size_t		658859	0					
ANR	658882	Identifier	paren		658859	1					
ANR	658883	AssignmentExpression	"paren = currentLine . rfind ( ')' , charNum )"		658859	2		=			
ANR	658884	Identifier	paren		658859	0					
ANR	658885	CallExpression	"currentLine . rfind ( ')' , charNum )"		658859	1					
ANR	658886	Callee	currentLine . rfind		658859	0					
ANR	658887	MemberAccess	currentLine . rfind		658859	0					
ANR	658888	Identifier	currentLine		658859	0					
ANR	658889	Identifier	rfind		658859	1					
ANR	658890	ArgumentList	')'		658859	1					
ANR	658891	Argument	')'		658859	0					
ANR	658892	PrimaryExpression	')'		658859	0					
ANR	658893	Argument	charNum		658859	1					
ANR	658894	Identifier	charNum		658859	0					
ANR	658895	IfStatement	if ( paren != string :: npos )		658859	3					
ANR	658896	Condition	paren != string :: npos	6676:5:192583:192603	658859	0	True				
ANR	658897	EqualityExpression	paren != string :: npos		658859	0		!=			
ANR	658898	Identifier	paren		658859	0					
ANR	658899	Identifier	string :: npos		658859	1					
ANR	658900	ExpressionStatement	line = currentLine	6677:2:192608:192626	658859	1	True				
ANR	658901	AssignmentExpression	line = currentLine		658859	0		=			
ANR	658902	Identifier	line		658859	0					
ANR	658903	Identifier	currentLine		658859	1					
ANR	658904	ElseStatement	else		658859	0					
ANR	658905	CompoundStatement		10:1:344:344	658859	0					
ANR	658906	ExpressionStatement	line = readyFormattedLine	6681:2:192697:192722	658859	0	True				
ANR	658907	AssignmentExpression	line = readyFormattedLine		658859	0		=			
ANR	658908	Identifier	line		658859	0					
ANR	658909	Identifier	readyFormattedLine		658859	1					
ANR	658910	ExpressionStatement	paren = line . rfind ( ')' )	6682:2:192726:192749	658859	1	True				
ANR	658911	AssignmentExpression	paren = line . rfind ( ')' )		658859	0		=			
ANR	658912	Identifier	paren		658859	0					
ANR	658913	CallExpression	line . rfind ( ')' )		658859	1					
ANR	658914	Callee	line . rfind		658859	0					
ANR	658915	MemberAccess	line . rfind		658859	0					
ANR	658916	Identifier	line		658859	0					
ANR	658917	Identifier	rfind		658859	1					
ANR	658918	ArgumentList	')'		658859	1					
ANR	658919	Argument	')'		658859	0					
ANR	658920	PrimaryExpression	')'		658859	0					
ANR	658921	IfStatement	if ( paren == string :: npos )		658859	2					
ANR	658922	Condition	paren == string :: npos	6683:6:192757:192777	658859	0	True				
ANR	658923	EqualityExpression	paren == string :: npos		658859	0		==			
ANR	658924	Identifier	paren		658859	0					
ANR	658925	Identifier	string :: npos		658859	1					
ANR	658926	ReturnStatement	return false ;	6684:3:192783:192795	658859	1	True				
ANR	658927	Identifier	false		658859	0					
ANR	658928	IfStatement	if ( paren == 0 )		658859	4					
ANR	658929	Condition	paren == 0	6686:5:192805:192814	658859	0	True				
ANR	658930	EqualityExpression	paren == 0		658859	0		==			
ANR	658931	Identifier	paren		658859	0					
ANR	658932	PrimaryExpression	0		658859	1					
ANR	658933	ReturnStatement	return false ;	6687:2:192819:192831	658859	1	True				
ANR	658934	Identifier	false		658859	0					
ANR	658935	IdentifierDeclStatement	"size_t lastChar = line . find_last_not_of ( "" \\t"" , paren - 1 ) ;"	6690:1:192882:192939	658859	5	True				
ANR	658936	IdentifierDecl	"lastChar = line . find_last_not_of ( "" \\t"" , paren - 1 )"		658859	0					
ANR	658937	IdentifierDeclType	size_t		658859	0					
ANR	658938	Identifier	lastChar		658859	1					
ANR	658939	AssignmentExpression	"lastChar = line . find_last_not_of ( "" \\t"" , paren - 1 )"		658859	2		=			
ANR	658940	Identifier	lastChar		658859	0					
ANR	658941	CallExpression	"line . find_last_not_of ( "" \\t"" , paren - 1 )"		658859	1					
ANR	658942	Callee	line . find_last_not_of		658859	0					
ANR	658943	MemberAccess	line . find_last_not_of		658859	0					
ANR	658944	Identifier	line		658859	0					
ANR	658945	Identifier	find_last_not_of		658859	1					
ANR	658946	ArgumentList	""" \\t"""		658859	1					
ANR	658947	Argument	""" \\t"""		658859	0					
ANR	658948	PrimaryExpression	""" \\t"""		658859	0					
ANR	658949	Argument	paren - 1		658859	1					
ANR	658950	AdditiveExpression	paren - 1		658859	0		-			
ANR	658951	Identifier	paren		658859	0					
ANR	658952	PrimaryExpression	1		658859	1					
ANR	658953	IfStatement	if ( lastChar == string :: npos )		658859	6					
ANR	658954	Condition	lastChar == string :: npos	6691:5:192946:192969	658859	0	True				
ANR	658955	EqualityExpression	lastChar == string :: npos		658859	0		==			
ANR	658956	Identifier	lastChar		658859	0					
ANR	658957	Identifier	string :: npos		658859	1					
ANR	658958	ReturnStatement	return false ;	6692:2:192974:192986	658859	1	True				
ANR	658959	Identifier	false		658859	0					
ANR	658960	IfStatement	if ( line [ lastChar ] == '*' )		658859	7					
ANR	658961	Condition	line [ lastChar ] == '*'	6694:5:193020:193040	658859	0	True				
ANR	658962	EqualityExpression	line [ lastChar ] == '*'		658859	0		==			
ANR	658963	ArrayIndexing	line [ lastChar ]		658859	0					
ANR	658964	Identifier	line		658859	0					
ANR	658965	Identifier	lastChar		658859	1					
ANR	658966	PrimaryExpression	'*'		658859	1					
ANR	658967	ReturnStatement	return true ;	6695:2:193045:193056	658859	1	True				
ANR	658968	Identifier	true		658859	0					
ANR	658969	ReturnStatement	return false ;	6696:1:193059:193071	658859	8	True				
ANR	658970	Identifier	false		658859	0					
ANR	658971	ReturnType	bool		658859	1					
ANR	658972	Identifier	ASFormatter :: isImmediatelyPostCast		658859	2					
ANR	658973	ParameterList			658859	3					
ANR	658974	CFGEntryNode	ENTRY		658859		True				
ANR	658975	CFGExitNode	EXIT		658859		True				
ANR	658976	Symbol	currentChar		658859						
ANR	658977	Symbol	previousNonWSChar		658859						
ANR	658978	Symbol	readyFormattedLine		658859						
ANR	658979	Symbol	line		658859						
ANR	658980	Symbol	string :: npos		658859						
ANR	658981	Symbol	false		658859						
ANR	658982	Symbol	* line		658859						
ANR	658983	Symbol	line . find_last_not_of		658859						
ANR	658984	Symbol	line . rfind		658859						
ANR	658985	Symbol	paren		658859						
ANR	658986	Symbol	currentLine . rfind		658859						
ANR	658987	Symbol	lastChar		658859						
ANR	658988	Symbol	* lastChar		658859						
ANR	658989	Symbol	true		658859						
ANR	658990	Symbol	charNum		658859						
ANR	658991	Symbol	currentLine		658859						
ANR	658992	Function	ASFormatter :: checkIfTemplateOpener	6703:0:193207:196818							
ANR	658993	FunctionDef	ASFormatter :: checkIfTemplateOpener ()		658992	0					
ANR	658994	CompoundStatement		6704:0:193249:196818	658992	0					
ANR	658995	ExpressionStatement	assert ( ! isInTemplate && currentChar == '<' )	6705:1:193252:193295	658992	0	True				
ANR	658996	CallExpression	assert ( ! isInTemplate && currentChar == '<' )		658992	0					
ANR	658997	Callee	assert		658992	0					
ANR	658998	Identifier	assert		658992	0					
ANR	658999	ArgumentList	! isInTemplate && currentChar == '<'		658992	1					
ANR	659000	Argument	! isInTemplate && currentChar == '<'		658992	0					
ANR	659001	AndExpression	! isInTemplate && currentChar == '<'		658992	0		&&			
ANR	659002	UnaryOperationExpression	! isInTemplate		658992	0					
ANR	659003	UnaryOperator	!		658992	0					
ANR	659004	Identifier	isInTemplate		658992	1					
ANR	659005	EqualityExpression	currentChar == '<'		658992	1		==			
ANR	659006	Identifier	currentChar		658992	0					
ANR	659007	PrimaryExpression	'<'		658992	1					
ANR	659008	IdentifierDeclStatement	"size_t firstChar = currentLine . find_first_not_of ( ""< \\t"" , charNum ) ;"	6708:1:193343:193408	658992	1	True				
ANR	659009	IdentifierDecl	"firstChar = currentLine . find_first_not_of ( ""< \\t"" , charNum )"		658992	0					
ANR	659010	IdentifierDeclType	size_t		658992	0					
ANR	659011	Identifier	firstChar		658992	1					
ANR	659012	AssignmentExpression	"firstChar = currentLine . find_first_not_of ( ""< \\t"" , charNum )"		658992	2		=			
ANR	659013	Identifier	firstChar		658992	0					
ANR	659014	CallExpression	"currentLine . find_first_not_of ( ""< \\t"" , charNum )"		658992	1					
ANR	659015	Callee	currentLine . find_first_not_of		658992	0					
ANR	659016	MemberAccess	currentLine . find_first_not_of		658992	0					
ANR	659017	Identifier	currentLine		658992	0					
ANR	659018	Identifier	find_first_not_of		658992	1					
ANR	659019	ArgumentList	"""< \\t"""		658992	1					
ANR	659020	Argument	"""< \\t"""		658992	0					
ANR	659021	PrimaryExpression	"""< \\t"""		658992	0					
ANR	659022	Argument	charNum		658992	1					
ANR	659023	Identifier	charNum		658992	0					
ANR	659024	IfStatement	if ( firstChar == string :: npos || currentLine [ firstChar ] == '=' )		658992	2					
ANR	659025	Condition	firstChar == string :: npos || currentLine [ firstChar ] == '='	6709:5:193415:193481	658992	0	True				
ANR	659026	OrExpression	firstChar == string :: npos || currentLine [ firstChar ] == '='		658992	0		||			
ANR	659027	EqualityExpression	firstChar == string :: npos		658992	0		==			
ANR	659028	Identifier	firstChar		658992	0					
ANR	659029	Identifier	string :: npos		658992	1					
ANR	659030	EqualityExpression	currentLine [ firstChar ] == '='		658992	1		==			
ANR	659031	ArrayIndexing	currentLine [ firstChar ]		658992	0					
ANR	659032	Identifier	currentLine		658992	0					
ANR	659033	Identifier	firstChar		658992	1					
ANR	659034	PrimaryExpression	'='		658992	1					
ANR	659035	CompoundStatement		8:1:235:235	658992	1					
ANR	659036	ExpressionStatement	isInTemplate = false	6713:2:193529:193549	658992	0	True				
ANR	659037	AssignmentExpression	isInTemplate = false		658992	0		=			
ANR	659038	Identifier	isInTemplate		658992	0					
ANR	659039	Identifier	false		658992	1					
ANR	659040	ReturnStatement	return ;	6714:2:193553:193559	658992	1	True				
ANR	659041	IdentifierDeclStatement	bool isFirstLine = true ;	6717:1:193566:193589	658992	3	True				
ANR	659042	IdentifierDecl	isFirstLine = true		658992	0					
ANR	659043	IdentifierDeclType	bool		658992	0					
ANR	659044	Identifier	isFirstLine		658992	1					
ANR	659045	AssignmentExpression	isFirstLine = true		658992	2		=			
ANR	659046	Identifier	true		658992	0					
ANR	659047	Identifier	true		658992	1					
ANR	659048	IdentifierDeclStatement	int parenDepth_ = 0 ;	6718:1:193592:193611	658992	4	True				
ANR	659049	IdentifierDecl	parenDepth_ = 0		658992	0					
ANR	659050	IdentifierDeclType	int		658992	0					
ANR	659051	Identifier	parenDepth_		658992	1					
ANR	659052	AssignmentExpression	parenDepth_ = 0		658992	2		=			
ANR	659053	Identifier	parenDepth_		658992	0					
ANR	659054	PrimaryExpression	0		658992	1					
ANR	659055	IdentifierDeclStatement	int maxTemplateDepth = 0 ;	6719:1:193614:193638	658992	5	True				
ANR	659056	IdentifierDecl	maxTemplateDepth = 0		658992	0					
ANR	659057	IdentifierDeclType	int		658992	0					
ANR	659058	Identifier	maxTemplateDepth		658992	1					
ANR	659059	AssignmentExpression	maxTemplateDepth = 0		658992	2		=			
ANR	659060	Identifier	maxTemplateDepth		658992	0					
ANR	659061	PrimaryExpression	0		658992	1					
ANR	659062	ExpressionStatement	templateDepth = 0	6720:1:193641:193658	658992	6	True				
ANR	659063	AssignmentExpression	templateDepth = 0		658992	0		=			
ANR	659064	Identifier	templateDepth		658992	0					
ANR	659065	PrimaryExpression	0		658992	1					
ANR	659066	IdentifierDeclStatement	string nextLine_ = currentLine . substr ( charNum ) ;	6721:1:193661:193707	658992	7	True				
ANR	659067	IdentifierDecl	nextLine_ = currentLine . substr ( charNum )		658992	0					
ANR	659068	IdentifierDeclType	string		658992	0					
ANR	659069	Identifier	nextLine_		658992	1					
ANR	659070	AssignmentExpression	nextLine_ = currentLine . substr ( charNum )		658992	2		=			
ANR	659071	Identifier	nextLine_		658992	0					
ANR	659072	CallExpression	currentLine . substr ( charNum )		658992	1					
ANR	659073	Callee	currentLine . substr		658992	0					
ANR	659074	MemberAccess	currentLine . substr		658992	0					
ANR	659075	Identifier	currentLine		658992	0					
ANR	659076	Identifier	substr		658992	1					
ANR	659077	ArgumentList	charNum		658992	1					
ANR	659078	Argument	charNum		658992	0					
ANR	659079	Identifier	charNum		658992	0					
ANR	659080	IdentifierDeclStatement	ASPeekStream stream ( sourceIterator ) ;	6722:1:193710:193745	658992	8	True				
ANR	659081	IdentifierDecl	stream ( sourceIterator )		658992	0					
ANR	659082	IdentifierDeclType	ASPeekStream		658992	0					
ANR	659083	Identifier	stream		658992	1					
ANR	659084	Identifier	sourceIterator		658992	2					
ANR	659085	IdentifierDeclStatement	bool isInComment_ = false ;	6725:1:193811:193836	658992	9	True				
ANR	659086	IdentifierDecl	isInComment_ = false		658992	0					
ANR	659087	IdentifierDeclType	bool		658992	0					
ANR	659088	Identifier	isInComment_		658992	1					
ANR	659089	AssignmentExpression	isInComment_ = false		658992	2		=			
ANR	659090	Identifier	false		658992	0					
ANR	659091	Identifier	false		658992	1					
ANR	659092	IdentifierDeclStatement	bool isInQuote_ = false ;	6726:1:193839:193862	658992	10	True				
ANR	659093	IdentifierDecl	isInQuote_ = false		658992	0					
ANR	659094	IdentifierDeclType	bool		658992	0					
ANR	659095	Identifier	isInQuote_		658992	1					
ANR	659096	AssignmentExpression	isInQuote_ = false		658992	2		=			
ANR	659097	Identifier	false		658992	0					
ANR	659098	Identifier	false		658992	1					
ANR	659099	IdentifierDeclStatement	char quoteChar_ = ' ' ;	6727:1:193865:193886	658992	11	True				
ANR	659100	IdentifierDecl	quoteChar_ = ' '		658992	0					
ANR	659101	IdentifierDeclType	char		658992	0					
ANR	659102	Identifier	quoteChar_		658992	1					
ANR	659103	AssignmentExpression	quoteChar_ = ' '		658992	2		=			
ANR	659104	Identifier	quoteChar_		658992	0					
ANR	659105	PrimaryExpression	' '		658992	1					
ANR	659106	WhileStatement	while ( stream . hasMoreLines ( ) || isFirstLine )		658992	12					
ANR	659107	Condition	stream . hasMoreLines ( ) || isFirstLine	6728:8:193896:193931	658992	0	True				
ANR	659108	OrExpression	stream . hasMoreLines ( ) || isFirstLine		658992	0		||			
ANR	659109	CallExpression	stream . hasMoreLines ( )		658992	0					
ANR	659110	Callee	stream . hasMoreLines		658992	0					
ANR	659111	MemberAccess	stream . hasMoreLines		658992	0					
ANR	659112	Identifier	stream		658992	0					
ANR	659113	Identifier	hasMoreLines		658992	1					
ANR	659114	ArgumentList			658992	1					
ANR	659115	Identifier	isFirstLine		658992	1					
ANR	659116	CompoundStatement		26:1:685:685	658992	1					
ANR	659117	IfStatement	if ( isFirstLine )		658992	0					
ANR	659118	Condition	isFirstLine	6730:6:193943:193953	658992	0	True				
ANR	659119	Identifier	isFirstLine		658992	0					
ANR	659120	ExpressionStatement	isFirstLine = false	6731:3:193959:193978	658992	1	True				
ANR	659121	AssignmentExpression	isFirstLine = false		658992	0		=			
ANR	659122	Identifier	isFirstLine		658992	0					
ANR	659123	Identifier	false		658992	1					
ANR	659124	ElseStatement	else		658992	0					
ANR	659125	ExpressionStatement	nextLine_ = stream . peekNextLine ( )	6733:3:193990:194023	658992	0	True				
ANR	659126	AssignmentExpression	nextLine_ = stream . peekNextLine ( )		658992	0		=			
ANR	659127	Identifier	nextLine_		658992	0					
ANR	659128	CallExpression	stream . peekNextLine ( )		658992	1					
ANR	659129	Callee	stream . peekNextLine		658992	0					
ANR	659130	MemberAccess	stream . peekNextLine		658992	0					
ANR	659131	Identifier	stream		658992	0					
ANR	659132	Identifier	peekNextLine		658992	1					
ANR	659133	ArgumentList			658992	1					
ANR	659134	ForStatement	for ( size_t i = 0 ; i < nextLine_ . length ( ) ; i ++ )		658992	1					
ANR	659135	ForInit	size_t i = 0 ;	6735:7:194052:194064	658992	0	True				
ANR	659136	IdentifierDeclStatement	size_t i = 0 ;		658992	0					
ANR	659137	IdentifierDecl	i = 0		658992	0					
ANR	659138	IdentifierDeclType	size_t		658992	0					
ANR	659139	Identifier	i		658992	1					
ANR	659140	AssignmentExpression	i = 0		658992	2		=			
ANR	659141	Identifier	i		658992	0					
ANR	659142	PrimaryExpression	0		658992	1					
ANR	659143	Condition	i < nextLine_ . length ( )	6735:21:194066:194087	658992	1	True				
ANR	659144	RelationalExpression	i < nextLine_ . length ( )		658992	0		<			
ANR	659145	Identifier	i		658992	0					
ANR	659146	CallExpression	nextLine_ . length ( )		658992	1					
ANR	659147	Callee	nextLine_ . length		658992	0					
ANR	659148	MemberAccess	nextLine_ . length		658992	0					
ANR	659149	Identifier	nextLine_		658992	0					
ANR	659150	Identifier	length		658992	1					
ANR	659151	ArgumentList			658992	1					
ANR	659152	PostIncDecOperationExpression	i ++	6735:45:194090:194092	658992	2	True				
ANR	659153	Identifier	i		658992	0					
ANR	659154	IncDec	++		658992	1					
ANR	659155	CompoundStatement		139:3:3456:3498	658992	3					
ANR	659156	IdentifierDeclStatement	char currentChar_ = nextLine_ [ i ] ;	6737:3:194102:194134	658992	0	True				
ANR	659157	IdentifierDecl	currentChar_ = nextLine_ [ i ]		658992	0					
ANR	659158	IdentifierDeclType	char		658992	0					
ANR	659159	Identifier	currentChar_		658992	1					
ANR	659160	AssignmentExpression	currentChar_ = nextLine_ [ i ]		658992	2		=			
ANR	659161	Identifier	currentChar_		658992	0					
ANR	659162	ArrayIndexing	nextLine_ [ i ]		658992	1					
ANR	659163	Identifier	nextLine_		658992	0					
ANR	659164	Identifier	i		658992	1					
ANR	659165	IfStatement	if ( isWhiteSpace ( currentChar_ ) )		658992	1					
ANR	659166	Condition	isWhiteSpace ( currentChar_ )	6738:7:194143:194168	658992	0	True				
ANR	659167	CallExpression	isWhiteSpace ( currentChar_ )		658992	0					
ANR	659168	Callee	isWhiteSpace		658992	0					
ANR	659169	Identifier	isWhiteSpace		658992	0					
ANR	659170	ArgumentList	currentChar_		658992	1					
ANR	659171	Argument	currentChar_		658992	0					
ANR	659172	Identifier	currentChar_		658992	0					
ANR	659173	ContinueStatement	continue ;	6739:4:194175:194183	658992	1	True				
ANR	659174	IfStatement	"if ( nextLine_ . compare ( i , 2 , ""/*"" ) == 0 )"		658992	2					
ANR	659175	Condition	"nextLine_ . compare ( i , 2 , ""/*"" ) == 0"	6740:7:194192:194225	658992	0	True				
ANR	659176	EqualityExpression	"nextLine_ . compare ( i , 2 , ""/*"" ) == 0"		658992	0		==			
ANR	659177	CallExpression	"nextLine_ . compare ( i , 2 , ""/*"" )"		658992	0					
ANR	659178	Callee	nextLine_ . compare		658992	0					
ANR	659179	MemberAccess	nextLine_ . compare		658992	0					
ANR	659180	Identifier	nextLine_		658992	0					
ANR	659181	Identifier	compare		658992	1					
ANR	659182	ArgumentList	i		658992	1					
ANR	659183	Argument	i		658992	0					
ANR	659184	Identifier	i		658992	0					
ANR	659185	Argument	2		658992	1					
ANR	659186	PrimaryExpression	2		658992	0					
ANR	659187	Argument	"""/*"""		658992	2					
ANR	659188	PrimaryExpression	"""/*"""		658992	0					
ANR	659189	PrimaryExpression	0		658992	1					
ANR	659190	ExpressionStatement	isInComment_ = true	6741:4:194232:194251	658992	1	True				
ANR	659191	AssignmentExpression	isInComment_ = true		658992	0		=			
ANR	659192	Identifier	isInComment_		658992	0					
ANR	659193	Identifier	true		658992	1					
ANR	659194	IfStatement	if ( isInComment_ )		658992	3					
ANR	659195	Condition	isInComment_	6742:7:194260:194271	658992	0	True				
ANR	659196	Identifier	isInComment_		658992	0					
ANR	659197	CompoundStatement		40:3:1027:1027	658992	1					
ANR	659198	IfStatement	"if ( nextLine_ . compare ( i , 2 , ""*/"" ) == 0 )"		658992	0					
ANR	659199	Condition	"nextLine_ . compare ( i , 2 , ""*/"" ) == 0"	6744:8:194287:194320	658992	0	True				
ANR	659200	EqualityExpression	"nextLine_ . compare ( i , 2 , ""*/"" ) == 0"		658992	0		==			
ANR	659201	CallExpression	"nextLine_ . compare ( i , 2 , ""*/"" )"		658992	0					
ANR	659202	Callee	nextLine_ . compare		658992	0					
ANR	659203	MemberAccess	nextLine_ . compare		658992	0					
ANR	659204	Identifier	nextLine_		658992	0					
ANR	659205	Identifier	compare		658992	1					
ANR	659206	ArgumentList	i		658992	1					
ANR	659207	Argument	i		658992	0					
ANR	659208	Identifier	i		658992	0					
ANR	659209	Argument	2		658992	1					
ANR	659210	PrimaryExpression	2		658992	0					
ANR	659211	Argument	"""*/"""		658992	2					
ANR	659212	PrimaryExpression	"""*/"""		658992	0					
ANR	659213	PrimaryExpression	0		658992	1					
ANR	659214	CompoundStatement		42:4:1077:1077	658992	1					
ANR	659215	ExpressionStatement	isInComment_ = false	6746:5:194334:194354	658992	0	True				
ANR	659216	AssignmentExpression	isInComment_ = false		658992	0		=			
ANR	659217	Identifier	isInComment_		658992	0					
ANR	659218	Identifier	false		658992	1					
ANR	659219	ExpressionStatement	++ i	6747:5:194361:194364	658992	1	True				
ANR	659220	UnaryExpression	++ i		658992	0					
ANR	659221	IncDec	++		658992	0					
ANR	659222	Identifier	i		658992	1					
ANR	659223	ContinueStatement	continue ;	6749:4:194376:194384	658992	1	True				
ANR	659224	IfStatement	if ( currentChar_ == '\\\\' )		658992	4					
ANR	659225	Condition	currentChar_ == '\\\\'	6751:7:194398:194417	658992	0	True				
ANR	659226	EqualityExpression	currentChar_ == '\\\\'		658992	0		==			
ANR	659227	Identifier	currentChar_		658992	0					
ANR	659228	PrimaryExpression	'\\\\'		658992	1					
ANR	659229	CompoundStatement		49:3:1173:1173	658992	1					
ANR	659230	ExpressionStatement	++ i	6753:4:194429:194432	658992	0	True				
ANR	659231	UnaryExpression	++ i		658992	0					
ANR	659232	IncDec	++		658992	0					
ANR	659233	Identifier	i		658992	1					
ANR	659234	ContinueStatement	continue ;	6754:4:194438:194446	658992	1	True				
ANR	659235	IfStatement	if ( isInQuote_ )		658992	5					
ANR	659236	Condition	isInQuote_	6757:7:194461:194470	658992	0	True				
ANR	659237	Identifier	isInQuote_		658992	0					
ANR	659238	CompoundStatement		55:3:1226:1226	658992	1					
ANR	659239	IfStatement	if ( currentChar_ == quoteChar_ )		658992	0					
ANR	659240	Condition	currentChar_ == quoteChar_	6759:8:194486:194511	658992	0	True				
ANR	659241	EqualityExpression	currentChar_ == quoteChar_		658992	0		==			
ANR	659242	Identifier	currentChar_		658992	0					
ANR	659243	Identifier	quoteChar_		658992	1					
ANR	659244	ExpressionStatement	isInQuote_ = false	6760:5:194519:194537	658992	1	True				
ANR	659245	AssignmentExpression	isInQuote_ = false		658992	0		=			
ANR	659246	Identifier	isInQuote_		658992	0					
ANR	659247	Identifier	false		658992	1					
ANR	659248	ContinueStatement	continue ;	6761:4:194543:194551	658992	1	True				
ANR	659249	IfStatement	"if ( currentChar_ == '""' || ( currentChar_ == '\\'' && ! isDigitSeparator ( nextLine_ , i ) ) )"		658992	6					
ANR	659250	Condition	"currentChar_ == '""' || ( currentChar_ == '\\'' && ! isDigitSeparator ( nextLine_ , i ) )"	6764:7:194566:194656	658992	0	True				
ANR	659251	OrExpression	"currentChar_ == '""' || ( currentChar_ == '\\'' && ! isDigitSeparator ( nextLine_ , i ) )"		658992	0		||			
ANR	659252	EqualityExpression	"currentChar_ == '""'"		658992	0		==			
ANR	659253	Identifier	currentChar_		658992	0					
ANR	659254	PrimaryExpression	"'""'"		658992	1					
ANR	659255	AndExpression	"currentChar_ == '\\'' && ! isDigitSeparator ( nextLine_ , i )"		658992	1		&&			
ANR	659256	EqualityExpression	currentChar_ == '\\''		658992	0		==			
ANR	659257	Identifier	currentChar_		658992	0					
ANR	659258	PrimaryExpression	'\\''		658992	1					
ANR	659259	UnaryOperationExpression	"! isDigitSeparator ( nextLine_ , i )"		658992	1					
ANR	659260	UnaryOperator	!		658992	0					
ANR	659261	CallExpression	"isDigitSeparator ( nextLine_ , i )"		658992	1					
ANR	659262	Callee	isDigitSeparator		658992	0					
ANR	659263	Identifier	isDigitSeparator		658992	0					
ANR	659264	ArgumentList	nextLine_		658992	1					
ANR	659265	Argument	nextLine_		658992	0					
ANR	659266	Identifier	nextLine_		658992	0					
ANR	659267	Argument	i		658992	1					
ANR	659268	Identifier	i		658992	0					
ANR	659269	CompoundStatement		63:3:1412:1412	658992	1					
ANR	659270	ExpressionStatement	isInQuote_ = true	6767:4:194668:194685	658992	0	True				
ANR	659271	AssignmentExpression	isInQuote_ = true		658992	0		=			
ANR	659272	Identifier	isInQuote_		658992	0					
ANR	659273	Identifier	true		658992	1					
ANR	659274	ExpressionStatement	quoteChar_ = currentChar_	6768:4:194691:194716	658992	1	True				
ANR	659275	AssignmentExpression	quoteChar_ = currentChar_		658992	0		=			
ANR	659276	Identifier	quoteChar_		658992	0					
ANR	659277	Identifier	currentChar_		658992	1					
ANR	659278	ContinueStatement	continue ;	6769:4:194722:194730	658992	2	True				
ANR	659279	IfStatement	"if ( nextLine_ . compare ( i , 2 , ""//"" ) == 0 )"		658992	7					
ANR	659280	Condition	"nextLine_ . compare ( i , 2 , ""//"" ) == 0"	6771:7:194744:194777	658992	0	True				
ANR	659281	EqualityExpression	"nextLine_ . compare ( i , 2 , ""//"" ) == 0"		658992	0		==			
ANR	659282	CallExpression	"nextLine_ . compare ( i , 2 , ""//"" )"		658992	0					
ANR	659283	Callee	nextLine_ . compare		658992	0					
ANR	659284	MemberAccess	nextLine_ . compare		658992	0					
ANR	659285	Identifier	nextLine_		658992	0					
ANR	659286	Identifier	compare		658992	1					
ANR	659287	ArgumentList	i		658992	1					
ANR	659288	Argument	i		658992	0					
ANR	659289	Identifier	i		658992	0					
ANR	659290	Argument	2		658992	1					
ANR	659291	PrimaryExpression	2		658992	0					
ANR	659292	Argument	"""//"""		658992	2					
ANR	659293	PrimaryExpression	"""//"""		658992	0					
ANR	659294	PrimaryExpression	0		658992	1					
ANR	659295	CompoundStatement		69:3:1533:1533	658992	1					
ANR	659296	ExpressionStatement	i = nextLine_ . length ( )	6773:4:194789:194811	658992	0	True				
ANR	659297	AssignmentExpression	i = nextLine_ . length ( )		658992	0		=			
ANR	659298	Identifier	i		658992	0					
ANR	659299	CallExpression	nextLine_ . length ( )		658992	1					
ANR	659300	Callee	nextLine_ . length		658992	0					
ANR	659301	MemberAccess	nextLine_ . length		658992	0					
ANR	659302	Identifier	nextLine_		658992	0					
ANR	659303	Identifier	length		658992	1					
ANR	659304	ArgumentList			658992	1					
ANR	659305	ContinueStatement	continue ;	6774:4:194817:194825	658992	1	True				
ANR	659306	IfStatement	if ( currentChar_ == '<' )		658992	8					
ANR	659307	Condition	currentChar_ == '<'	6778:7:194872:194890	658992	0	True				
ANR	659308	EqualityExpression	currentChar_ == '<'		658992	0		==			
ANR	659309	Identifier	currentChar_		658992	0					
ANR	659310	PrimaryExpression	'<'		658992	1					
ANR	659311	CompoundStatement		76:3:1646:1646	658992	1					
ANR	659312	ExpressionStatement	++ templateDepth	6780:4:194902:194917	658992	0	True				
ANR	659313	UnaryExpression	++ templateDepth		658992	0					
ANR	659314	IncDec	++		658992	0					
ANR	659315	Identifier	templateDepth		658992	1					
ANR	659316	ExpressionStatement	++ maxTemplateDepth	6781:4:194923:194941	658992	1	True				
ANR	659317	UnaryExpression	++ maxTemplateDepth		658992	0					
ANR	659318	IncDec	++		658992	0					
ANR	659319	Identifier	maxTemplateDepth		658992	1					
ANR	659320	ContinueStatement	continue ;	6782:4:194947:194955	658992	2	True				
ANR	659321	ElseStatement	else		658992	0					
ANR	659322	IfStatement	if ( currentChar_ == '>' )		658992	0					
ANR	659323	Condition	currentChar_ == '>'	6784:12:194974:194992	658992	0	True				
ANR	659324	EqualityExpression	currentChar_ == '>'		658992	0		==			
ANR	659325	Identifier	currentChar_		658992	0					
ANR	659326	PrimaryExpression	'>'		658992	1					
ANR	659327	CompoundStatement		82:3:1748:1748	658992	1					
ANR	659328	ExpressionStatement	-- templateDepth	6786:4:195004:195019	658992	0	True				
ANR	659329	UnaryExpression	-- templateDepth		658992	0					
ANR	659330	IncDec	--		658992	0					
ANR	659331	Identifier	templateDepth		658992	1					
ANR	659332	IfStatement	if ( templateDepth == 0 )		658992	1					
ANR	659333	Condition	templateDepth == 0	6787:8:195029:195046	658992	0	True				
ANR	659334	EqualityExpression	templateDepth == 0		658992	0		==			
ANR	659335	Identifier	templateDepth		658992	0					
ANR	659336	PrimaryExpression	0		658992	1					
ANR	659337	CompoundStatement		85:4:1803:1803	658992	1					
ANR	659338	IfStatement	if ( parenDepth_ == 0 )		658992	0					
ANR	659339	Condition	parenDepth_ == 0	6789:9:195064:195079	658992	0	True				
ANR	659340	EqualityExpression	parenDepth_ == 0		658992	0		==			
ANR	659341	Identifier	parenDepth_		658992	0					
ANR	659342	PrimaryExpression	0		658992	1					
ANR	659343	CompoundStatement		87:5:1837:1837	658992	1					
ANR	659344	ExpressionStatement	isInTemplate = true	6792:6:195124:195143	658992	0	True				
ANR	659345	AssignmentExpression	isInTemplate = true		658992	0		=			
ANR	659346	Identifier	isInTemplate		658992	0					
ANR	659347	Identifier	true		658992	1					
ANR	659348	ExpressionStatement	templateDepth = maxTemplateDepth	6793:6:195151:195183	658992	1	True				
ANR	659349	AssignmentExpression	templateDepth = maxTemplateDepth		658992	0		=			
ANR	659350	Identifier	templateDepth		658992	0					
ANR	659351	Identifier	maxTemplateDepth		658992	1					
ANR	659352	ReturnStatement	return ;	6795:5:195197:195203	658992	1	True				
ANR	659353	ContinueStatement	continue ;	6797:4:195215:195223	658992	2	True				
ANR	659354	ElseStatement	else		658992	0					
ANR	659355	IfStatement	if ( currentChar_ == '(' || currentChar_ == ')' )		658992	0					
ANR	659356	Condition	currentChar_ == '(' || currentChar_ == ')'	6799:12:195242:195283	658992	0	True				
ANR	659357	OrExpression	currentChar_ == '(' || currentChar_ == ')'		658992	0		||			
ANR	659358	EqualityExpression	currentChar_ == '('		658992	0		==			
ANR	659359	Identifier	currentChar_		658992	0					
ANR	659360	PrimaryExpression	'('		658992	1					
ANR	659361	EqualityExpression	currentChar_ == ')'		658992	1		==			
ANR	659362	Identifier	currentChar_		658992	0					
ANR	659363	PrimaryExpression	')'		658992	1					
ANR	659364	CompoundStatement		97:3:2039:2039	658992	1					
ANR	659365	IfStatement	if ( currentChar_ == '(' )		658992	0					
ANR	659366	Condition	currentChar_ == '('	6801:8:195299:195317	658992	0	True				
ANR	659367	EqualityExpression	currentChar_ == '('		658992	0		==			
ANR	659368	Identifier	currentChar_		658992	0					
ANR	659369	PrimaryExpression	'('		658992	1					
ANR	659370	ExpressionStatement	++ parenDepth_	6802:5:195325:195338	658992	1	True				
ANR	659371	UnaryExpression	++ parenDepth_		658992	0					
ANR	659372	IncDec	++		658992	0					
ANR	659373	Identifier	parenDepth_		658992	1					
ANR	659374	ElseStatement	else		658992	0					
ANR	659375	ExpressionStatement	-- parenDepth_	6804:5:195354:195367	658992	0	True				
ANR	659376	UnaryExpression	-- parenDepth_		658992	0					
ANR	659377	IncDec	--		658992	0					
ANR	659378	Identifier	parenDepth_		658992	1					
ANR	659379	IfStatement	if ( parenDepth_ >= 0 )		658992	1					
ANR	659380	Condition	parenDepth_ >= 0	6805:8:195377:195392	658992	0	True				
ANR	659381	RelationalExpression	parenDepth_ >= 0		658992	0		>=			
ANR	659382	Identifier	parenDepth_		658992	0					
ANR	659383	PrimaryExpression	0		658992	1					
ANR	659384	ContinueStatement	continue ;	6806:5:195400:195408	658992	1	True				
ANR	659385	ExpressionStatement	isInTemplate = false	6808:4:195456:195476	658992	2	True				
ANR	659386	AssignmentExpression	isInTemplate = false		658992	0		=			
ANR	659387	Identifier	isInTemplate		658992	0					
ANR	659388	Identifier	false		658992	1					
ANR	659389	ExpressionStatement	templateDepth = 0	6809:4:195482:195499	658992	3	True				
ANR	659390	AssignmentExpression	templateDepth = 0		658992	0		=			
ANR	659391	Identifier	templateDepth		658992	0					
ANR	659392	PrimaryExpression	0		658992	1					
ANR	659393	ReturnStatement	return ;	6810:4:195505:195511	658992	4	True				
ANR	659394	ElseStatement	else		658992	0					
ANR	659395	IfStatement	"if ( nextLine_ . compare ( i , 2 , AS_AND ) == 0 || nextLine_ . compare ( i , 2 , AS_OR ) == 0 )"		658992	0					
ANR	659396	Condition	"nextLine_ . compare ( i , 2 , AS_AND ) == 0 || nextLine_ . compare ( i , 2 , AS_OR ) == 0"	6812:12:195530:195616	658992	0	True				
ANR	659397	OrExpression	"nextLine_ . compare ( i , 2 , AS_AND ) == 0 || nextLine_ . compare ( i , 2 , AS_OR ) == 0"		658992	0		||			
ANR	659398	EqualityExpression	"nextLine_ . compare ( i , 2 , AS_AND ) == 0"		658992	0		==			
ANR	659399	CallExpression	"nextLine_ . compare ( i , 2 , AS_AND )"		658992	0					
ANR	659400	Callee	nextLine_ . compare		658992	0					
ANR	659401	MemberAccess	nextLine_ . compare		658992	0					
ANR	659402	Identifier	nextLine_		658992	0					
ANR	659403	Identifier	compare		658992	1					
ANR	659404	ArgumentList	i		658992	1					
ANR	659405	Argument	i		658992	0					
ANR	659406	Identifier	i		658992	0					
ANR	659407	Argument	2		658992	1					
ANR	659408	PrimaryExpression	2		658992	0					
ANR	659409	Argument	AS_AND		658992	2					
ANR	659410	Identifier	AS_AND		658992	0					
ANR	659411	PrimaryExpression	0		658992	1					
ANR	659412	EqualityExpression	"nextLine_ . compare ( i , 2 , AS_OR ) == 0"		658992	1		==			
ANR	659413	CallExpression	"nextLine_ . compare ( i , 2 , AS_OR )"		658992	0					
ANR	659414	Callee	nextLine_ . compare		658992	0					
ANR	659415	MemberAccess	nextLine_ . compare		658992	0					
ANR	659416	Identifier	nextLine_		658992	0					
ANR	659417	Identifier	compare		658992	1					
ANR	659418	ArgumentList	i		658992	1					
ANR	659419	Argument	i		658992	0					
ANR	659420	Identifier	i		658992	0					
ANR	659421	Argument	2		658992	1					
ANR	659422	PrimaryExpression	2		658992	0					
ANR	659423	Argument	AS_OR		658992	2					
ANR	659424	Identifier	AS_OR		658992	0					
ANR	659425	PrimaryExpression	0		658992	1					
ANR	659426	CompoundStatement		111:3:2372:2372	658992	1					
ANR	659427	ExpressionStatement	isInTemplate = false	6816:4:195670:195690	658992	0	True				
ANR	659428	AssignmentExpression	isInTemplate = false		658992	0		=			
ANR	659429	Identifier	isInTemplate		658992	0					
ANR	659430	Identifier	false		658992	1					
ANR	659431	ExpressionStatement	templateDepth = 0	6817:4:195696:195713	658992	1	True				
ANR	659432	AssignmentExpression	templateDepth = 0		658992	0		=			
ANR	659433	Identifier	templateDepth		658992	0					
ANR	659434	PrimaryExpression	0		658992	1					
ANR	659435	ReturnStatement	return ;	6818:4:195719:195725	658992	2	True				
ANR	659436	ElseStatement	else		658992	0					
ANR	659437	IfStatement	"if ( currentChar_ == ',' || currentChar_ == '&' || currentChar_ == '*' || currentChar_ == '^' || currentChar_ == ':' || currentChar_ == '=' || currentChar_ == '[' || currentChar_ == ']' || currentChar_ == '(' || currentChar_ == ')' || ( isJavaStyle ( ) && currentChar_ == '?' ) )"		658992	0					
ANR	659438	Condition	"currentChar_ == ',' || currentChar_ == '&' || currentChar_ == '*' || currentChar_ == '^' || currentChar_ == ':' || currentChar_ == '=' || currentChar_ == '[' || currentChar_ == ']' || currentChar_ == '(' || currentChar_ == ')' || ( isJavaStyle ( ) && currentChar_ == '?' )"	6820:12:195744:196488	658992	0	True				
ANR	659439	OrExpression	"currentChar_ == ',' || currentChar_ == '&' || currentChar_ == '*' || currentChar_ == '^' || currentChar_ == ':' || currentChar_ == '=' || currentChar_ == '[' || currentChar_ == ']' || currentChar_ == '(' || currentChar_ == ')' || ( isJavaStyle ( ) && currentChar_ == '?' )"		658992	0		||			
ANR	659440	EqualityExpression	"currentChar_ == ','"		658992	0		==			
ANR	659441	Identifier	currentChar_		658992	0					
ANR	659442	PrimaryExpression	"','"		658992	1					
ANR	659443	OrExpression	currentChar_ == '&' || currentChar_ == '*' || currentChar_ == '^' || currentChar_ == ':' || currentChar_ == '=' || currentChar_ == '[' || currentChar_ == ']' || currentChar_ == '(' || currentChar_ == ')' || ( isJavaStyle ( ) && currentChar_ == '?' )		658992	1		||			
ANR	659444	EqualityExpression	currentChar_ == '&'		658992	0		==			
ANR	659445	Identifier	currentChar_		658992	0					
ANR	659446	PrimaryExpression	'&'		658992	1					
ANR	659447	OrExpression	currentChar_ == '*' || currentChar_ == '^' || currentChar_ == ':' || currentChar_ == '=' || currentChar_ == '[' || currentChar_ == ']' || currentChar_ == '(' || currentChar_ == ')' || ( isJavaStyle ( ) && currentChar_ == '?' )		658992	1		||			
ANR	659448	EqualityExpression	currentChar_ == '*'		658992	0		==			
ANR	659449	Identifier	currentChar_		658992	0					
ANR	659450	PrimaryExpression	'*'		658992	1					
ANR	659451	OrExpression	currentChar_ == '^' || currentChar_ == ':' || currentChar_ == '=' || currentChar_ == '[' || currentChar_ == ']' || currentChar_ == '(' || currentChar_ == ')' || ( isJavaStyle ( ) && currentChar_ == '?' )		658992	1		||			
ANR	659452	EqualityExpression	currentChar_ == '^'		658992	0		==			
ANR	659453	Identifier	currentChar_		658992	0					
ANR	659454	PrimaryExpression	'^'		658992	1					
ANR	659455	OrExpression	currentChar_ == ':' || currentChar_ == '=' || currentChar_ == '[' || currentChar_ == ']' || currentChar_ == '(' || currentChar_ == ')' || ( isJavaStyle ( ) && currentChar_ == '?' )		658992	1		||			
ANR	659456	EqualityExpression	currentChar_ == ':'		658992	0		==			
ANR	659457	Identifier	currentChar_		658992	0					
ANR	659458	PrimaryExpression	':'		658992	1					
ANR	659459	OrExpression	currentChar_ == '=' || currentChar_ == '[' || currentChar_ == ']' || currentChar_ == '(' || currentChar_ == ')' || ( isJavaStyle ( ) && currentChar_ == '?' )		658992	1		||			
ANR	659460	EqualityExpression	currentChar_ == '='		658992	0		==			
ANR	659461	Identifier	currentChar_		658992	0					
ANR	659462	PrimaryExpression	'='		658992	1					
ANR	659463	OrExpression	currentChar_ == '[' || currentChar_ == ']' || currentChar_ == '(' || currentChar_ == ')' || ( isJavaStyle ( ) && currentChar_ == '?' )		658992	1		||			
ANR	659464	EqualityExpression	currentChar_ == '['		658992	0		==			
ANR	659465	Identifier	currentChar_		658992	0					
ANR	659466	PrimaryExpression	'['		658992	1					
ANR	659467	OrExpression	currentChar_ == ']' || currentChar_ == '(' || currentChar_ == ')' || ( isJavaStyle ( ) && currentChar_ == '?' )		658992	1		||			
ANR	659468	EqualityExpression	currentChar_ == ']'		658992	0		==			
ANR	659469	Identifier	currentChar_		658992	0					
ANR	659470	PrimaryExpression	']'		658992	1					
ANR	659471	OrExpression	currentChar_ == '(' || currentChar_ == ')' || ( isJavaStyle ( ) && currentChar_ == '?' )		658992	1		||			
ANR	659472	EqualityExpression	currentChar_ == '('		658992	0		==			
ANR	659473	Identifier	currentChar_		658992	0					
ANR	659474	PrimaryExpression	'('		658992	1					
ANR	659475	OrExpression	currentChar_ == ')' || ( isJavaStyle ( ) && currentChar_ == '?' )		658992	1		||			
ANR	659476	EqualityExpression	currentChar_ == ')'		658992	0		==			
ANR	659477	Identifier	currentChar_		658992	0					
ANR	659478	PrimaryExpression	')'		658992	1					
ANR	659479	AndExpression	isJavaStyle ( ) && currentChar_ == '?'		658992	1		&&			
ANR	659480	CallExpression	isJavaStyle ( )		658992	0					
ANR	659481	Callee	isJavaStyle		658992	0					
ANR	659482	Identifier	isJavaStyle		658992	0					
ANR	659483	ArgumentList			658992	1					
ANR	659484	EqualityExpression	currentChar_ == '?'		658992	1		==			
ANR	659485	Identifier	currentChar_		658992	0					
ANR	659486	PrimaryExpression	'?'		658992	1					
ANR	659487	CompoundStatement		129:3:3275:3275	658992	1					
ANR	659488	ContinueStatement	continue ;	6833:4:196531:196539	658992	0	True				
ANR	659489	ElseStatement	else		658992	0					
ANR	659490	IfStatement	if ( ! isLegalNameChar ( currentChar_ ) )		658992	0					
ANR	659491	Condition	! isLegalNameChar ( currentChar_ )	6835:12:196558:196587	658992	0	True				
ANR	659492	UnaryOperationExpression	! isLegalNameChar ( currentChar_ )		658992	0					
ANR	659493	UnaryOperator	!		658992	0					
ANR	659494	CallExpression	isLegalNameChar ( currentChar_ )		658992	1					
ANR	659495	Callee	isLegalNameChar		658992	0					
ANR	659496	Identifier	isLegalNameChar		658992	0					
ANR	659497	ArgumentList	currentChar_		658992	1					
ANR	659498	Argument	currentChar_		658992	0					
ANR	659499	Identifier	currentChar_		658992	0					
ANR	659500	CompoundStatement		133:3:3343:3343	658992	1					
ANR	659501	ExpressionStatement	isInTemplate = false	6838:4:196641:196661	658992	0	True				
ANR	659502	AssignmentExpression	isInTemplate = false		658992	0		=			
ANR	659503	Identifier	isInTemplate		658992	0					
ANR	659504	Identifier	false		658992	1					
ANR	659505	ExpressionStatement	templateDepth = 0	6839:4:196667:196684	658992	1	True				
ANR	659506	AssignmentExpression	templateDepth = 0		658992	0		=			
ANR	659507	Identifier	templateDepth		658992	0					
ANR	659508	PrimaryExpression	0		658992	1					
ANR	659509	ReturnStatement	return ;	6840:4:196690:196696	658992	2	True				
ANR	659510	IdentifierDeclStatement	"string name = getCurrentWord ( nextLine_ , i ) ;"	6842:3:196706:196748	658992	9	True				
ANR	659511	IdentifierDecl	"name = getCurrentWord ( nextLine_ , i )"		658992	0					
ANR	659512	IdentifierDeclType	string		658992	0					
ANR	659513	Identifier	name		658992	1					
ANR	659514	AssignmentExpression	"name = getCurrentWord ( nextLine_ , i )"		658992	2		=			
ANR	659515	Identifier	name		658992	0					
ANR	659516	CallExpression	"getCurrentWord ( nextLine_ , i )"		658992	1					
ANR	659517	Callee	getCurrentWord		658992	0					
ANR	659518	Identifier	getCurrentWord		658992	0					
ANR	659519	ArgumentList	nextLine_		658992	1					
ANR	659520	Argument	nextLine_		658992	0					
ANR	659521	Identifier	nextLine_		658992	0					
ANR	659522	Argument	i		658992	1					
ANR	659523	Identifier	i		658992	0					
ANR	659524	ExpressionStatement	i += name . length ( ) - 1	6843:3:196753:196775	658992	10	True				
ANR	659525	AssignmentExpression	i += name . length ( ) - 1		658992	0		+=			
ANR	659526	Identifier	i		658992	0					
ANR	659527	AdditiveExpression	name . length ( ) - 1		658992	1		-			
ANR	659528	CallExpression	name . length ( )		658992	0					
ANR	659529	Callee	name . length		658992	0					
ANR	659530	MemberAccess	name . length		658992	0					
ANR	659531	Identifier	name		658992	0					
ANR	659532	Identifier	length		658992	1					
ANR	659533	ArgumentList			658992	1					
ANR	659534	PrimaryExpression	1		658992	1					
ANR	659535	ReturnType	void		658992	1					
ANR	659536	Identifier	ASFormatter :: checkIfTemplateOpener		658992	2					
ANR	659537	ParameterList			658992	3					
ANR	659538	CFGEntryNode	ENTRY		658992		True				
ANR	659539	CFGExitNode	EXIT		658992		True				
ANR	659540	Symbol	firstChar		658992						
ANR	659541	Symbol	getCurrentWord		658992						
ANR	659542	Symbol	AS_AND		658992						
ANR	659543	Symbol	name . length		658992						
ANR	659544	Symbol	nextLine_		658992						
ANR	659545	Symbol	string :: npos		658992						
ANR	659546	Symbol	stream . peekNextLine		658992						
ANR	659547	Symbol	isLegalNameChar		658992						
ANR	659548	Symbol	parenDepth_		658992						
ANR	659549	Symbol	isInComment_		658992						
ANR	659550	Symbol	quoteChar_		658992						
ANR	659551	Symbol	isInTemplate		658992						
ANR	659552	Symbol	isWhiteSpace		658992						
ANR	659553	Symbol	* currentLine		658992						
ANR	659554	Symbol	stream		658992						
ANR	659555	Symbol	isDigitSeparator		658992						
ANR	659556	Symbol	currentLine . substr		658992						
ANR	659557	Symbol	charNum		658992						
ANR	659558	Symbol	isFirstLine		658992						
ANR	659559	Symbol	currentLine		658992						
ANR	659560	Symbol	stream . hasMoreLines		658992						
ANR	659561	Symbol	currentChar		658992						
ANR	659562	Symbol	false		658992						
ANR	659563	Symbol	templateDepth		658992						
ANR	659564	Symbol	* firstChar		658992						
ANR	659565	Symbol	i		658992						
ANR	659566	Symbol	nextLine_ . compare		658992						
ANR	659567	Symbol	AS_OR		658992						
ANR	659568	Symbol	isInQuote_		658992						
ANR	659569	Symbol	currentLine . find_first_not_of		658992						
ANR	659570	Symbol	currentChar_		658992						
ANR	659571	Symbol	* nextLine_		658992						
ANR	659572	Symbol	maxTemplateDepth		658992						
ANR	659573	Symbol	* i		658992						
ANR	659574	Symbol	isJavaStyle		658992						
ANR	659575	Symbol	true		658992						
ANR	659576	Symbol	name		658992						
ANR	659577	Symbol	nextLine_ . length		658992						
ANR	659578	Function	ASFormatter :: updateFormattedLineSplitPoints	6848:0:196821:200205							
ANR	659579	FunctionDef	ASFormatter :: updateFormattedLineSplitPoints (char appendedChar)		659578	0					
ANR	659580	CompoundStatement		6849:0:196889:200205	659578	0					
ANR	659581	ExpressionStatement	assert ( maxCodeLength != string :: npos )	6850:1:196892:196929	659578	0	True				
ANR	659582	CallExpression	assert ( maxCodeLength != string :: npos )		659578	0					
ANR	659583	Callee	assert		659578	0					
ANR	659584	Identifier	assert		659578	0					
ANR	659585	ArgumentList	maxCodeLength != string :: npos		659578	1					
ANR	659586	Argument	maxCodeLength != string :: npos		659578	0					
ANR	659587	EqualityExpression	maxCodeLength != string :: npos		659578	0		!=			
ANR	659588	Identifier	maxCodeLength		659578	0					
ANR	659589	Identifier	string :: npos		659578	1					
ANR	659590	ExpressionStatement	assert ( formattedLine . length ( ) > 0 )	6851:1:196932:196966	659578	1	True				
ANR	659591	CallExpression	assert ( formattedLine . length ( ) > 0 )		659578	0					
ANR	659592	Callee	assert		659578	0					
ANR	659593	Identifier	assert		659578	0					
ANR	659594	ArgumentList	formattedLine . length ( ) > 0		659578	1					
ANR	659595	Argument	formattedLine . length ( ) > 0		659578	0					
ANR	659596	RelationalExpression	formattedLine . length ( ) > 0		659578	0		>			
ANR	659597	CallExpression	formattedLine . length ( )		659578	0					
ANR	659598	Callee	formattedLine . length		659578	0					
ANR	659599	MemberAccess	formattedLine . length		659578	0					
ANR	659600	Identifier	formattedLine		659578	0					
ANR	659601	Identifier	length		659578	1					
ANR	659602	ArgumentList			659578	1					
ANR	659603	PrimaryExpression	0		659578	1					
ANR	659604	IfStatement	if ( ! isOkToSplitFormattedLine ( ) )		659578	2					
ANR	659605	Condition	! isOkToSplitFormattedLine ( )	6853:5:196974:197000	659578	0	True				
ANR	659606	UnaryOperationExpression	! isOkToSplitFormattedLine ( )		659578	0					
ANR	659607	UnaryOperator	!		659578	0					
ANR	659608	CallExpression	isOkToSplitFormattedLine ( )		659578	1					
ANR	659609	Callee	isOkToSplitFormattedLine		659578	0					
ANR	659610	Identifier	isOkToSplitFormattedLine		659578	0					
ANR	659611	ArgumentList			659578	1					
ANR	659612	ReturnStatement	return ;	6854:2:197005:197011	659578	1	True				
ANR	659613	IdentifierDeclStatement	char nextChar = peekNextChar ( ) ;	6856:1:197015:197045	659578	3	True				
ANR	659614	IdentifierDecl	nextChar = peekNextChar ( )		659578	0					
ANR	659615	IdentifierDeclType	char		659578	0					
ANR	659616	Identifier	nextChar		659578	1					
ANR	659617	AssignmentExpression	nextChar = peekNextChar ( )		659578	2		=			
ANR	659618	Identifier	nextChar		659578	0					
ANR	659619	CallExpression	peekNextChar ( )		659578	1					
ANR	659620	Callee	peekNextChar		659578	0					
ANR	659621	Identifier	peekNextChar		659578	0					
ANR	659622	ArgumentList			659578	1					
ANR	659623	IfStatement	if ( nextChar == '/' )		659578	4					
ANR	659624	Condition	nextChar == '/'	6859:5:197099:197113	659578	0	True				
ANR	659625	EqualityExpression	nextChar == '/'		659578	0		==			
ANR	659626	Identifier	nextChar		659578	0					
ANR	659627	PrimaryExpression	'/'		659578	1					
ANR	659628	ReturnStatement	return ;	6860:2:197118:197124	659578	1	True				
ANR	659629	IfStatement	if ( appendedChar == '{' || appendedChar == '}' || previousNonWSChar == '{' || previousNonWSChar == '}' || nextChar == '{' || nextChar == '}' || currentChar == '{' || currentChar == '}' )		659578	5					
ANR	659630	Condition	appendedChar == '{' || appendedChar == '}' || previousNonWSChar == '{' || previousNonWSChar == '}' || nextChar == '{' || nextChar == '}' || currentChar == '{' || currentChar == '}'	6863:5:197172:197378	659578	0	True				
ANR	659631	OrExpression	appendedChar == '{' || appendedChar == '}' || previousNonWSChar == '{' || previousNonWSChar == '}' || nextChar == '{' || nextChar == '}' || currentChar == '{' || currentChar == '}'		659578	0		||			
ANR	659632	EqualityExpression	appendedChar == '{'		659578	0		==			
ANR	659633	Identifier	appendedChar		659578	0					
ANR	659634	PrimaryExpression	'{'		659578	1					
ANR	659635	OrExpression	appendedChar == '}' || previousNonWSChar == '{' || previousNonWSChar == '}' || nextChar == '{' || nextChar == '}' || currentChar == '{' || currentChar == '}'		659578	1		||			
ANR	659636	EqualityExpression	appendedChar == '}'		659578	0		==			
ANR	659637	Identifier	appendedChar		659578	0					
ANR	659638	PrimaryExpression	'}'		659578	1					
ANR	659639	OrExpression	previousNonWSChar == '{' || previousNonWSChar == '}' || nextChar == '{' || nextChar == '}' || currentChar == '{' || currentChar == '}'		659578	1		||			
ANR	659640	EqualityExpression	previousNonWSChar == '{'		659578	0		==			
ANR	659641	Identifier	previousNonWSChar		659578	0					
ANR	659642	PrimaryExpression	'{'		659578	1					
ANR	659643	OrExpression	previousNonWSChar == '}' || nextChar == '{' || nextChar == '}' || currentChar == '{' || currentChar == '}'		659578	1		||			
ANR	659644	EqualityExpression	previousNonWSChar == '}'		659578	0		==			
ANR	659645	Identifier	previousNonWSChar		659578	0					
ANR	659646	PrimaryExpression	'}'		659578	1					
ANR	659647	OrExpression	nextChar == '{' || nextChar == '}' || currentChar == '{' || currentChar == '}'		659578	1		||			
ANR	659648	EqualityExpression	nextChar == '{'		659578	0		==			
ANR	659649	Identifier	nextChar		659578	0					
ANR	659650	PrimaryExpression	'{'		659578	1					
ANR	659651	OrExpression	nextChar == '}' || currentChar == '{' || currentChar == '}'		659578	1		||			
ANR	659652	EqualityExpression	nextChar == '}'		659578	0		==			
ANR	659653	Identifier	nextChar		659578	0					
ANR	659654	PrimaryExpression	'}'		659578	1					
ANR	659655	OrExpression	currentChar == '{' || currentChar == '}'		659578	1		||			
ANR	659656	EqualityExpression	currentChar == '{'		659578	0		==			
ANR	659657	Identifier	currentChar		659578	0					
ANR	659658	PrimaryExpression	'{'		659578	1					
ANR	659659	EqualityExpression	currentChar == '}'		659578	1		==			
ANR	659660	Identifier	currentChar		659578	0					
ANR	659661	PrimaryExpression	'}'		659578	1					
ANR	659662	ReturnStatement	return ;	6867:2:197426:197432	659578	1	True				
ANR	659663	IfStatement	if ( appendedChar == '[' || appendedChar == ']' || previousNonWSChar == '[' || nextChar == '[' || nextChar == ']' )		659578	6					
ANR	659664	Condition	appendedChar == '[' || appendedChar == ']' || previousNonWSChar == '[' || nextChar == '[' || nextChar == ']'	6870:5:197486:197611	659578	0	True				
ANR	659665	OrExpression	appendedChar == '[' || appendedChar == ']' || previousNonWSChar == '[' || nextChar == '[' || nextChar == ']'		659578	0		||			
ANR	659666	EqualityExpression	appendedChar == '['		659578	0		==			
ANR	659667	Identifier	appendedChar		659578	0					
ANR	659668	PrimaryExpression	'['		659578	1					
ANR	659669	OrExpression	appendedChar == ']' || previousNonWSChar == '[' || nextChar == '[' || nextChar == ']'		659578	1		||			
ANR	659670	EqualityExpression	appendedChar == ']'		659578	0		==			
ANR	659671	Identifier	appendedChar		659578	0					
ANR	659672	PrimaryExpression	']'		659578	1					
ANR	659673	OrExpression	previousNonWSChar == '[' || nextChar == '[' || nextChar == ']'		659578	1		||			
ANR	659674	EqualityExpression	previousNonWSChar == '['		659578	0		==			
ANR	659675	Identifier	previousNonWSChar		659578	0					
ANR	659676	PrimaryExpression	'['		659578	1					
ANR	659677	OrExpression	nextChar == '[' || nextChar == ']'		659578	1		||			
ANR	659678	EqualityExpression	nextChar == '['		659578	0		==			
ANR	659679	Identifier	nextChar		659578	0					
ANR	659680	PrimaryExpression	'['		659578	1					
ANR	659681	EqualityExpression	nextChar == ']'		659578	1		==			
ANR	659682	Identifier	nextChar		659578	0					
ANR	659683	PrimaryExpression	']'		659578	1					
ANR	659684	ReturnStatement	return ;	6873:2:197616:197622	659578	1	True				
ANR	659685	IfStatement	if ( isWhiteSpace ( appendedChar ) )		659578	7					
ANR	659686	Condition	isWhiteSpace ( appendedChar )	6875:5:197630:197655	659578	0	True				
ANR	659687	CallExpression	isWhiteSpace ( appendedChar )		659578	0					
ANR	659688	Callee	isWhiteSpace		659578	0					
ANR	659689	Identifier	isWhiteSpace		659578	0					
ANR	659690	ArgumentList	appendedChar		659578	1					
ANR	659691	Argument	appendedChar		659578	0					
ANR	659692	Identifier	appendedChar		659578	0					
ANR	659693	CompoundStatement		28:1:769:769	659578	1					
ANR	659694	IfStatement	if ( nextChar != ')' && nextChar != '(' && nextChar != '/' && nextChar != ':' && currentChar != ')' && currentChar != '(' && previousNonWSChar != '(' && ! ( nextChar == '*' && ! isCharPotentialOperator ( previousNonWSChar ) && pointerAlignment == PTR_ALIGN_TYPE ) && ! ( nextChar == '&' && ! isCharPotentialOperator ( previousNonWSChar ) && ( referenceAlignment == REF_ALIGN_TYPE || ( referenceAlignment == REF_SAME_AS_PTR && pointerAlignment == PTR_ALIGN_TYPE ) ) ) )		659578	0					
ANR	659695	Condition	nextChar != ')' && nextChar != '(' && nextChar != '/' && nextChar != ':' && currentChar != ')' && currentChar != '(' && previousNonWSChar != '(' && ! ( nextChar == '*' && ! isCharPotentialOperator ( previousNonWSChar ) && pointerAlignment == PTR_ALIGN_TYPE ) && ! ( nextChar == '&' && ! isCharPotentialOperator ( previousNonWSChar ) && ( referenceAlignment == REF_ALIGN_TYPE || ( referenceAlignment == REF_SAME_AS_PTR && pointerAlignment == PTR_ALIGN_TYPE ) ) )	6877:6:197667:198597	659578	0	True				
ANR	659696	AndExpression	nextChar != ')' && nextChar != '(' && nextChar != '/' && nextChar != ':' && currentChar != ')' && currentChar != '(' && previousNonWSChar != '(' && ! ( nextChar == '*' && ! isCharPotentialOperator ( previousNonWSChar ) && pointerAlignment == PTR_ALIGN_TYPE ) && ! ( nextChar == '&' && ! isCharPotentialOperator ( previousNonWSChar ) && ( referenceAlignment == REF_ALIGN_TYPE || ( referenceAlignment == REF_SAME_AS_PTR && pointerAlignment == PTR_ALIGN_TYPE ) ) )		659578	0		&&			
ANR	659697	EqualityExpression	nextChar != ')'		659578	0		!=			
ANR	659698	Identifier	nextChar		659578	0					
ANR	659699	PrimaryExpression	')'		659578	1					
ANR	659700	AndExpression	nextChar != '(' && nextChar != '/' && nextChar != ':' && currentChar != ')' && currentChar != '(' && previousNonWSChar != '(' && ! ( nextChar == '*' && ! isCharPotentialOperator ( previousNonWSChar ) && pointerAlignment == PTR_ALIGN_TYPE ) && ! ( nextChar == '&' && ! isCharPotentialOperator ( previousNonWSChar ) && ( referenceAlignment == REF_ALIGN_TYPE || ( referenceAlignment == REF_SAME_AS_PTR && pointerAlignment == PTR_ALIGN_TYPE ) ) )		659578	1		&&			
ANR	659701	EqualityExpression	nextChar != '('		659578	0		!=			
ANR	659702	Identifier	nextChar		659578	0					
ANR	659703	PrimaryExpression	'('		659578	1					
ANR	659704	AndExpression	nextChar != '/' && nextChar != ':' && currentChar != ')' && currentChar != '(' && previousNonWSChar != '(' && ! ( nextChar == '*' && ! isCharPotentialOperator ( previousNonWSChar ) && pointerAlignment == PTR_ALIGN_TYPE ) && ! ( nextChar == '&' && ! isCharPotentialOperator ( previousNonWSChar ) && ( referenceAlignment == REF_ALIGN_TYPE || ( referenceAlignment == REF_SAME_AS_PTR && pointerAlignment == PTR_ALIGN_TYPE ) ) )		659578	1		&&			
ANR	659705	EqualityExpression	nextChar != '/'		659578	0		!=			
ANR	659706	Identifier	nextChar		659578	0					
ANR	659707	PrimaryExpression	'/'		659578	1					
ANR	659708	AndExpression	nextChar != ':' && currentChar != ')' && currentChar != '(' && previousNonWSChar != '(' && ! ( nextChar == '*' && ! isCharPotentialOperator ( previousNonWSChar ) && pointerAlignment == PTR_ALIGN_TYPE ) && ! ( nextChar == '&' && ! isCharPotentialOperator ( previousNonWSChar ) && ( referenceAlignment == REF_ALIGN_TYPE || ( referenceAlignment == REF_SAME_AS_PTR && pointerAlignment == PTR_ALIGN_TYPE ) ) )		659578	1		&&			
ANR	659709	EqualityExpression	nextChar != ':'		659578	0		!=			
ANR	659710	Identifier	nextChar		659578	0					
ANR	659711	PrimaryExpression	':'		659578	1					
ANR	659712	AndExpression	currentChar != ')' && currentChar != '(' && previousNonWSChar != '(' && ! ( nextChar == '*' && ! isCharPotentialOperator ( previousNonWSChar ) && pointerAlignment == PTR_ALIGN_TYPE ) && ! ( nextChar == '&' && ! isCharPotentialOperator ( previousNonWSChar ) && ( referenceAlignment == REF_ALIGN_TYPE || ( referenceAlignment == REF_SAME_AS_PTR && pointerAlignment == PTR_ALIGN_TYPE ) ) )		659578	1		&&			
ANR	659713	EqualityExpression	currentChar != ')'		659578	0		!=			
ANR	659714	Identifier	currentChar		659578	0					
ANR	659715	PrimaryExpression	')'		659578	1					
ANR	659716	AndExpression	currentChar != '(' && previousNonWSChar != '(' && ! ( nextChar == '*' && ! isCharPotentialOperator ( previousNonWSChar ) && pointerAlignment == PTR_ALIGN_TYPE ) && ! ( nextChar == '&' && ! isCharPotentialOperator ( previousNonWSChar ) && ( referenceAlignment == REF_ALIGN_TYPE || ( referenceAlignment == REF_SAME_AS_PTR && pointerAlignment == PTR_ALIGN_TYPE ) ) )		659578	1		&&			
ANR	659717	EqualityExpression	currentChar != '('		659578	0		!=			
ANR	659718	Identifier	currentChar		659578	0					
ANR	659719	PrimaryExpression	'('		659578	1					
ANR	659720	AndExpression	previousNonWSChar != '(' && ! ( nextChar == '*' && ! isCharPotentialOperator ( previousNonWSChar ) && pointerAlignment == PTR_ALIGN_TYPE ) && ! ( nextChar == '&' && ! isCharPotentialOperator ( previousNonWSChar ) && ( referenceAlignment == REF_ALIGN_TYPE || ( referenceAlignment == REF_SAME_AS_PTR && pointerAlignment == PTR_ALIGN_TYPE ) ) )		659578	1		&&			
ANR	659721	EqualityExpression	previousNonWSChar != '('		659578	0		!=			
ANR	659722	Identifier	previousNonWSChar		659578	0					
ANR	659723	PrimaryExpression	'('		659578	1					
ANR	659724	AndExpression	! ( nextChar == '*' && ! isCharPotentialOperator ( previousNonWSChar ) && pointerAlignment == PTR_ALIGN_TYPE ) && ! ( nextChar == '&' && ! isCharPotentialOperator ( previousNonWSChar ) && ( referenceAlignment == REF_ALIGN_TYPE || ( referenceAlignment == REF_SAME_AS_PTR && pointerAlignment == PTR_ALIGN_TYPE ) ) )		659578	1		&&			
ANR	659725	UnaryOperationExpression	! ( nextChar == '*' && ! isCharPotentialOperator ( previousNonWSChar ) && pointerAlignment == PTR_ALIGN_TYPE )		659578	0					
ANR	659726	UnaryOperator	!		659578	0					
ANR	659727	AndExpression	nextChar == '*' && ! isCharPotentialOperator ( previousNonWSChar ) && pointerAlignment == PTR_ALIGN_TYPE		659578	1		&&			
ANR	659728	EqualityExpression	nextChar == '*'		659578	0		==			
ANR	659729	Identifier	nextChar		659578	0					
ANR	659730	PrimaryExpression	'*'		659578	1					
ANR	659731	AndExpression	! isCharPotentialOperator ( previousNonWSChar ) && pointerAlignment == PTR_ALIGN_TYPE		659578	1		&&			
ANR	659732	UnaryOperationExpression	! isCharPotentialOperator ( previousNonWSChar )		659578	0					
ANR	659733	UnaryOperator	!		659578	0					
ANR	659734	CallExpression	isCharPotentialOperator ( previousNonWSChar )		659578	1					
ANR	659735	Callee	isCharPotentialOperator		659578	0					
ANR	659736	Identifier	isCharPotentialOperator		659578	0					
ANR	659737	ArgumentList	previousNonWSChar		659578	1					
ANR	659738	Argument	previousNonWSChar		659578	0					
ANR	659739	Identifier	previousNonWSChar		659578	0					
ANR	659740	EqualityExpression	pointerAlignment == PTR_ALIGN_TYPE		659578	1		==			
ANR	659741	Identifier	pointerAlignment		659578	0					
ANR	659742	Identifier	PTR_ALIGN_TYPE		659578	1					
ANR	659743	UnaryOperationExpression	! ( nextChar == '&' && ! isCharPotentialOperator ( previousNonWSChar ) && ( referenceAlignment == REF_ALIGN_TYPE || ( referenceAlignment == REF_SAME_AS_PTR && pointerAlignment == PTR_ALIGN_TYPE ) ) )		659578	1					
ANR	659744	UnaryOperator	!		659578	0					
ANR	659745	AndExpression	nextChar == '&' && ! isCharPotentialOperator ( previousNonWSChar ) && ( referenceAlignment == REF_ALIGN_TYPE || ( referenceAlignment == REF_SAME_AS_PTR && pointerAlignment == PTR_ALIGN_TYPE ) )		659578	1		&&			
ANR	659746	EqualityExpression	nextChar == '&'		659578	0		==			
ANR	659747	Identifier	nextChar		659578	0					
ANR	659748	PrimaryExpression	'&'		659578	1					
ANR	659749	AndExpression	! isCharPotentialOperator ( previousNonWSChar ) && ( referenceAlignment == REF_ALIGN_TYPE || ( referenceAlignment == REF_SAME_AS_PTR && pointerAlignment == PTR_ALIGN_TYPE ) )		659578	1		&&			
ANR	659750	UnaryOperationExpression	! isCharPotentialOperator ( previousNonWSChar )		659578	0					
ANR	659751	UnaryOperator	!		659578	0					
ANR	659752	CallExpression	isCharPotentialOperator ( previousNonWSChar )		659578	1					
ANR	659753	Callee	isCharPotentialOperator		659578	0					
ANR	659754	Identifier	isCharPotentialOperator		659578	0					
ANR	659755	ArgumentList	previousNonWSChar		659578	1					
ANR	659756	Argument	previousNonWSChar		659578	0					
ANR	659757	Identifier	previousNonWSChar		659578	0					
ANR	659758	OrExpression	referenceAlignment == REF_ALIGN_TYPE || ( referenceAlignment == REF_SAME_AS_PTR && pointerAlignment == PTR_ALIGN_TYPE )		659578	1		||			
ANR	659759	EqualityExpression	referenceAlignment == REF_ALIGN_TYPE		659578	0		==			
ANR	659760	Identifier	referenceAlignment		659578	0					
ANR	659761	Identifier	REF_ALIGN_TYPE		659578	1					
ANR	659762	AndExpression	referenceAlignment == REF_SAME_AS_PTR && pointerAlignment == PTR_ALIGN_TYPE		659578	1		&&			
ANR	659763	EqualityExpression	referenceAlignment == REF_SAME_AS_PTR		659578	0		==			
ANR	659764	Identifier	referenceAlignment		659578	0					
ANR	659765	Identifier	REF_SAME_AS_PTR		659578	1					
ANR	659766	EqualityExpression	pointerAlignment == PTR_ALIGN_TYPE		659578	1		==			
ANR	659767	Identifier	pointerAlignment		659578	0					
ANR	659768	Identifier	PTR_ALIGN_TYPE		659578	1					
ANR	659769	CompoundStatement		45:2:1718:1718	659578	1					
ANR	659770	IfStatement	if ( formattedLine . length ( ) - 1 <= maxCodeLength )		659578	0					
ANR	659771	Condition	formattedLine . length ( ) - 1 <= maxCodeLength	6894:7:198617:198659	659578	0	True				
ANR	659772	RelationalExpression	formattedLine . length ( ) - 1 <= maxCodeLength		659578	0		<=			
ANR	659773	AdditiveExpression	formattedLine . length ( ) - 1		659578	0		-			
ANR	659774	CallExpression	formattedLine . length ( )		659578	0					
ANR	659775	Callee	formattedLine . length		659578	0					
ANR	659776	MemberAccess	formattedLine . length		659578	0					
ANR	659777	Identifier	formattedLine		659578	0					
ANR	659778	Identifier	length		659578	1					
ANR	659779	ArgumentList			659578	1					
ANR	659780	PrimaryExpression	1		659578	1					
ANR	659781	Identifier	maxCodeLength		659578	1					
ANR	659782	ExpressionStatement	maxWhiteSpace = formattedLine . length ( ) - 1	6895:4:198666:198708	659578	1	True				
ANR	659783	AssignmentExpression	maxWhiteSpace = formattedLine . length ( ) - 1		659578	0		=			
ANR	659784	Identifier	maxWhiteSpace		659578	0					
ANR	659785	AdditiveExpression	formattedLine . length ( ) - 1		659578	1		-			
ANR	659786	CallExpression	formattedLine . length ( )		659578	0					
ANR	659787	Callee	formattedLine . length		659578	0					
ANR	659788	MemberAccess	formattedLine . length		659578	0					
ANR	659789	Identifier	formattedLine		659578	0					
ANR	659790	Identifier	length		659578	1					
ANR	659791	ArgumentList			659578	1					
ANR	659792	PrimaryExpression	1		659578	1					
ANR	659793	ElseStatement	else		659578	0					
ANR	659794	ExpressionStatement	maxWhiteSpacePending = formattedLine . length ( ) - 1	6897:4:198722:198771	659578	0	True				
ANR	659795	AssignmentExpression	maxWhiteSpacePending = formattedLine . length ( ) - 1		659578	0		=			
ANR	659796	Identifier	maxWhiteSpacePending		659578	0					
ANR	659797	AdditiveExpression	formattedLine . length ( ) - 1		659578	1		-			
ANR	659798	CallExpression	formattedLine . length ( )		659578	0					
ANR	659799	Callee	formattedLine . length		659578	0					
ANR	659800	MemberAccess	formattedLine . length		659578	0					
ANR	659801	Identifier	formattedLine		659578	0					
ANR	659802	Identifier	length		659578	1					
ANR	659803	ArgumentList			659578	1					
ANR	659804	PrimaryExpression	1		659578	1					
ANR	659805	ElseStatement	else		659578	0					
ANR	659806	IfStatement	if ( appendedChar == ')' )		659578	0					
ANR	659807	Condition	appendedChar == ')'	6901:10:198867:198885	659578	0	True				
ANR	659808	EqualityExpression	appendedChar == ')'		659578	0		==			
ANR	659809	Identifier	appendedChar		659578	0					
ANR	659810	PrimaryExpression	')'		659578	1					
ANR	659811	CompoundStatement		54:1:1999:1999	659578	1					
ANR	659812	IfStatement	"if ( nextChar != ')' && nextChar != ' ' && nextChar != ';' && nextChar != ',' && nextChar != '.' && ! ( nextChar == '-' && pointerSymbolFollows ( ) ) )"		659578	0					
ANR	659813	Condition	"nextChar != ')' && nextChar != ' ' && nextChar != ';' && nextChar != ',' && nextChar != '.' && ! ( nextChar == '-' && pointerSymbolFollows ( ) )"	6903:6:198897:199085	659578	0	True				
ANR	659814	AndExpression	"nextChar != ')' && nextChar != ' ' && nextChar != ';' && nextChar != ',' && nextChar != '.' && ! ( nextChar == '-' && pointerSymbolFollows ( ) )"		659578	0		&&			
ANR	659815	EqualityExpression	nextChar != ')'		659578	0		!=			
ANR	659816	Identifier	nextChar		659578	0					
ANR	659817	PrimaryExpression	')'		659578	1					
ANR	659818	AndExpression	"nextChar != ' ' && nextChar != ';' && nextChar != ',' && nextChar != '.' && ! ( nextChar == '-' && pointerSymbolFollows ( ) )"		659578	1		&&			
ANR	659819	EqualityExpression	nextChar != ' '		659578	0		!=			
ANR	659820	Identifier	nextChar		659578	0					
ANR	659821	PrimaryExpression	' '		659578	1					
ANR	659822	AndExpression	"nextChar != ';' && nextChar != ',' && nextChar != '.' && ! ( nextChar == '-' && pointerSymbolFollows ( ) )"		659578	1		&&			
ANR	659823	EqualityExpression	nextChar != ';'		659578	0		!=			
ANR	659824	Identifier	nextChar		659578	0					
ANR	659825	PrimaryExpression	';'		659578	1					
ANR	659826	AndExpression	"nextChar != ',' && nextChar != '.' && ! ( nextChar == '-' && pointerSymbolFollows ( ) )"		659578	1		&&			
ANR	659827	EqualityExpression	"nextChar != ','"		659578	0		!=			
ANR	659828	Identifier	nextChar		659578	0					
ANR	659829	PrimaryExpression	"','"		659578	1					
ANR	659830	AndExpression	nextChar != '.' && ! ( nextChar == '-' && pointerSymbolFollows ( ) )		659578	1		&&			
ANR	659831	EqualityExpression	nextChar != '.'		659578	0		!=			
ANR	659832	Identifier	nextChar		659578	0					
ANR	659833	PrimaryExpression	'.'		659578	1					
ANR	659834	UnaryOperationExpression	! ( nextChar == '-' && pointerSymbolFollows ( ) )		659578	1					
ANR	659835	UnaryOperator	!		659578	0					
ANR	659836	AndExpression	nextChar == '-' && pointerSymbolFollows ( )		659578	1		&&			
ANR	659837	EqualityExpression	nextChar == '-'		659578	0		==			
ANR	659838	Identifier	nextChar		659578	0					
ANR	659839	PrimaryExpression	'-'		659578	1					
ANR	659840	CallExpression	pointerSymbolFollows ( )		659578	1					
ANR	659841	Callee	pointerSymbolFollows		659578	0					
ANR	659842	Identifier	pointerSymbolFollows		659578	0					
ANR	659843	ArgumentList			659578	1					
ANR	659844	CompoundStatement		61:2:2216:2216	659578	1					
ANR	659845	IfStatement	if ( formattedLine . length ( ) <= maxCodeLength )		659578	0					
ANR	659846	Condition	formattedLine . length ( ) <= maxCodeLength	6910:7:199115:199153	659578	0	True				
ANR	659847	RelationalExpression	formattedLine . length ( ) <= maxCodeLength		659578	0		<=			
ANR	659848	CallExpression	formattedLine . length ( )		659578	0					
ANR	659849	Callee	formattedLine . length		659578	0					
ANR	659850	MemberAccess	formattedLine . length		659578	0					
ANR	659851	Identifier	formattedLine		659578	0					
ANR	659852	Identifier	length		659578	1					
ANR	659853	ArgumentList			659578	1					
ANR	659854	Identifier	maxCodeLength		659578	1					
ANR	659855	ExpressionStatement	maxWhiteSpace = formattedLine . length ( )	6911:4:199160:199198	659578	1	True				
ANR	659856	AssignmentExpression	maxWhiteSpace = formattedLine . length ( )		659578	0		=			
ANR	659857	Identifier	maxWhiteSpace		659578	0					
ANR	659858	CallExpression	formattedLine . length ( )		659578	1					
ANR	659859	Callee	formattedLine . length		659578	0					
ANR	659860	MemberAccess	formattedLine . length		659578	0					
ANR	659861	Identifier	formattedLine		659578	0					
ANR	659862	Identifier	length		659578	1					
ANR	659863	ArgumentList			659578	1					
ANR	659864	ElseStatement	else		659578	0					
ANR	659865	ExpressionStatement	maxWhiteSpacePending = formattedLine . length ( )	6913:4:199212:199257	659578	0	True				
ANR	659866	AssignmentExpression	maxWhiteSpacePending = formattedLine . length ( )		659578	0		=			
ANR	659867	Identifier	maxWhiteSpacePending		659578	0					
ANR	659868	CallExpression	formattedLine . length ( )		659578	1					
ANR	659869	Callee	formattedLine . length		659578	0					
ANR	659870	MemberAccess	formattedLine . length		659578	0					
ANR	659871	Identifier	formattedLine		659578	0					
ANR	659872	Identifier	length		659578	1					
ANR	659873	ArgumentList			659578	1					
ANR	659874	ElseStatement	else		659578	0					
ANR	659875	IfStatement	"if ( appendedChar == ',' )"		659578	0					
ANR	659876	Condition	"appendedChar == ','"	6917:10:199322:199340	659578	0	True				
ANR	659877	EqualityExpression	"appendedChar == ','"		659578	0		==			
ANR	659878	Identifier	appendedChar		659578	0					
ANR	659879	PrimaryExpression	"','"		659578	1					
ANR	659880	CompoundStatement		70:1:2454:2454	659578	1					
ANR	659881	IfStatement	if ( formattedLine . length ( ) <= maxCodeLength )		659578	0					
ANR	659882	Condition	formattedLine . length ( ) <= maxCodeLength	6919:6:199352:199390	659578	0	True				
ANR	659883	RelationalExpression	formattedLine . length ( ) <= maxCodeLength		659578	0		<=			
ANR	659884	CallExpression	formattedLine . length ( )		659578	0					
ANR	659885	Callee	formattedLine . length		659578	0					
ANR	659886	MemberAccess	formattedLine . length		659578	0					
ANR	659887	Identifier	formattedLine		659578	0					
ANR	659888	Identifier	length		659578	1					
ANR	659889	ArgumentList			659578	1					
ANR	659890	Identifier	maxCodeLength		659578	1					
ANR	659891	ExpressionStatement	maxComma = formattedLine . length ( )	6920:3:199396:199429	659578	1	True				
ANR	659892	AssignmentExpression	maxComma = formattedLine . length ( )		659578	0		=			
ANR	659893	Identifier	maxComma		659578	0					
ANR	659894	CallExpression	formattedLine . length ( )		659578	1					
ANR	659895	Callee	formattedLine . length		659578	0					
ANR	659896	MemberAccess	formattedLine . length		659578	0					
ANR	659897	Identifier	formattedLine		659578	0					
ANR	659898	Identifier	length		659578	1					
ANR	659899	ArgumentList			659578	1					
ANR	659900	ElseStatement	else		659578	0					
ANR	659901	ExpressionStatement	maxCommaPending = formattedLine . length ( )	6922:3:199441:199481	659578	0	True				
ANR	659902	AssignmentExpression	maxCommaPending = formattedLine . length ( )		659578	0		=			
ANR	659903	Identifier	maxCommaPending		659578	0					
ANR	659904	CallExpression	formattedLine . length ( )		659578	1					
ANR	659905	Callee	formattedLine . length		659578	0					
ANR	659906	MemberAccess	formattedLine . length		659578	0					
ANR	659907	Identifier	formattedLine		659578	0					
ANR	659908	Identifier	length		659578	1					
ANR	659909	ArgumentList			659578	1					
ANR	659910	ElseStatement	else		659578	0					
ANR	659911	IfStatement	if ( appendedChar == '(' )		659578	0					
ANR	659912	Condition	appendedChar == '('	6924:10:199496:199514	659578	0	True				
ANR	659913	EqualityExpression	appendedChar == '('		659578	0		==			
ANR	659914	Identifier	appendedChar		659578	0					
ANR	659915	PrimaryExpression	'('		659578	1					
ANR	659916	CompoundStatement		77:1:2628:2628	659578	1					
ANR	659917	IfStatement	"if ( nextChar != ')' && nextChar != '(' && nextChar != '""' && nextChar != '\\'' )"		659578	0					
ANR	659918	Condition	"nextChar != ')' && nextChar != '(' && nextChar != '""' && nextChar != '\\''"	6926:6:199526:199598	659578	0	True				
ANR	659919	AndExpression	"nextChar != ')' && nextChar != '(' && nextChar != '""' && nextChar != '\\''"		659578	0		&&			
ANR	659920	EqualityExpression	nextChar != ')'		659578	0		!=			
ANR	659921	Identifier	nextChar		659578	0					
ANR	659922	PrimaryExpression	')'		659578	1					
ANR	659923	AndExpression	"nextChar != '(' && nextChar != '""' && nextChar != '\\''"		659578	1		&&			
ANR	659924	EqualityExpression	nextChar != '('		659578	0		!=			
ANR	659925	Identifier	nextChar		659578	0					
ANR	659926	PrimaryExpression	'('		659578	1					
ANR	659927	AndExpression	"nextChar != '""' && nextChar != '\\''"		659578	1		&&			
ANR	659928	EqualityExpression	"nextChar != '""'"		659578	0		!=			
ANR	659929	Identifier	nextChar		659578	0					
ANR	659930	PrimaryExpression	"'""'"		659578	1					
ANR	659931	EqualityExpression	nextChar != '\\''		659578	1		!=			
ANR	659932	Identifier	nextChar		659578	0					
ANR	659933	PrimaryExpression	'\\''		659578	1					
ANR	659934	CompoundStatement		81:3:2760:2775	659578	1					
ANR	659935	IdentifierDeclStatement	size_t parenNum ;	6929:3:199650:199665	659578	0	True				
ANR	659936	IdentifierDecl	parenNum		659578	0					
ANR	659937	IdentifierDeclType	size_t		659578	0					
ANR	659938	Identifier	parenNum		659578	1					
ANR	659939	IfStatement	if ( isCharPotentialOperator ( previousNonWSChar ) )		659578	1					
ANR	659940	Condition	isCharPotentialOperator ( previousNonWSChar )	6930:7:199674:199715	659578	0	True				
ANR	659941	CallExpression	isCharPotentialOperator ( previousNonWSChar )		659578	0					
ANR	659942	Callee	isCharPotentialOperator		659578	0					
ANR	659943	Identifier	isCharPotentialOperator		659578	0					
ANR	659944	ArgumentList	previousNonWSChar		659578	1					
ANR	659945	Argument	previousNonWSChar		659578	0					
ANR	659946	Identifier	previousNonWSChar		659578	0					
ANR	659947	ExpressionStatement	parenNum = formattedLine . length ( ) - 1	6931:4:199722:199759	659578	1	True				
ANR	659948	AssignmentExpression	parenNum = formattedLine . length ( ) - 1		659578	0		=			
ANR	659949	Identifier	parenNum		659578	0					
ANR	659950	AdditiveExpression	formattedLine . length ( ) - 1		659578	1		-			
ANR	659951	CallExpression	formattedLine . length ( )		659578	0					
ANR	659952	Callee	formattedLine . length		659578	0					
ANR	659953	MemberAccess	formattedLine . length		659578	0					
ANR	659954	Identifier	formattedLine		659578	0					
ANR	659955	Identifier	length		659578	1					
ANR	659956	ArgumentList			659578	1					
ANR	659957	PrimaryExpression	1		659578	1					
ANR	659958	ElseStatement	else		659578	0					
ANR	659959	ExpressionStatement	parenNum = formattedLine . length ( )	6933:4:199773:199806	659578	0	True				
ANR	659960	AssignmentExpression	parenNum = formattedLine . length ( )		659578	0		=			
ANR	659961	Identifier	parenNum		659578	0					
ANR	659962	CallExpression	formattedLine . length ( )		659578	1					
ANR	659963	Callee	formattedLine . length		659578	0					
ANR	659964	MemberAccess	formattedLine . length		659578	0					
ANR	659965	Identifier	formattedLine		659578	0					
ANR	659966	Identifier	length		659578	1					
ANR	659967	ArgumentList			659578	1					
ANR	659968	IfStatement	if ( formattedLine . length ( ) <= maxCodeLength )		659578	2					
ANR	659969	Condition	formattedLine . length ( ) <= maxCodeLength	6934:7:199815:199853	659578	0	True				
ANR	659970	RelationalExpression	formattedLine . length ( ) <= maxCodeLength		659578	0		<=			
ANR	659971	CallExpression	formattedLine . length ( )		659578	0					
ANR	659972	Callee	formattedLine . length		659578	0					
ANR	659973	MemberAccess	formattedLine . length		659578	0					
ANR	659974	Identifier	formattedLine		659578	0					
ANR	659975	Identifier	length		659578	1					
ANR	659976	ArgumentList			659578	1					
ANR	659977	Identifier	maxCodeLength		659578	1					
ANR	659978	ExpressionStatement	maxParen = parenNum	6935:4:199860:199879	659578	1	True				
ANR	659979	AssignmentExpression	maxParen = parenNum		659578	0		=			
ANR	659980	Identifier	maxParen		659578	0					
ANR	659981	Identifier	parenNum		659578	1					
ANR	659982	ElseStatement	else		659578	0					
ANR	659983	ExpressionStatement	maxParenPending = parenNum	6937:4:199893:199919	659578	0	True				
ANR	659984	AssignmentExpression	maxParenPending = parenNum		659578	0		=			
ANR	659985	Identifier	maxParenPending		659578	0					
ANR	659986	Identifier	parenNum		659578	1					
ANR	659987	ElseStatement	else		659578	0					
ANR	659988	IfStatement	if ( appendedChar == ';' )		659578	0					
ANR	659989	Condition	appendedChar == ';'	6940:10:199938:199956	659578	0	True				
ANR	659990	EqualityExpression	appendedChar == ';'		659578	0		==			
ANR	659991	Identifier	appendedChar		659578	0					
ANR	659992	PrimaryExpression	';'		659578	1					
ANR	659993	CompoundStatement		93:1:3070:3070	659578	1					
ANR	659994	IfStatement	if ( nextChar != ' ' && nextChar != '}' && nextChar != '/' )		659578	0					
ANR	659995	Condition	nextChar != ' ' && nextChar != '}' && nextChar != '/'	6942:6:199968:200021	659578	0	True				
ANR	659996	AndExpression	nextChar != ' ' && nextChar != '}' && nextChar != '/'		659578	0		&&			
ANR	659997	EqualityExpression	nextChar != ' '		659578	0		!=			
ANR	659998	Identifier	nextChar		659578	0					
ANR	659999	PrimaryExpression	' '		659578	1					
ANR	660000	AndExpression	nextChar != '}' && nextChar != '/'		659578	1		&&			
ANR	660001	EqualityExpression	nextChar != '}'		659578	0		!=			
ANR	660002	Identifier	nextChar		659578	0					
ANR	660003	PrimaryExpression	'}'		659578	1					
ANR	660004	EqualityExpression	nextChar != '/'		659578	1		!=			
ANR	660005	Identifier	nextChar		659578	0					
ANR	660006	PrimaryExpression	'/'		659578	1					
ANR	660007	CompoundStatement		95:2:3167:3167	659578	1					
ANR	660008	IfStatement	if ( formattedLine . length ( ) <= maxCodeLength )		659578	0					
ANR	660009	Condition	formattedLine . length ( ) <= maxCodeLength	6944:7:200066:200104	659578	0	True				
ANR	660010	RelationalExpression	formattedLine . length ( ) <= maxCodeLength		659578	0		<=			
ANR	660011	CallExpression	formattedLine . length ( )		659578	0					
ANR	660012	Callee	formattedLine . length		659578	0					
ANR	660013	MemberAccess	formattedLine . length		659578	0					
ANR	660014	Identifier	formattedLine		659578	0					
ANR	660015	Identifier	length		659578	1					
ANR	660016	ArgumentList			659578	1					
ANR	660017	Identifier	maxCodeLength		659578	1					
ANR	660018	ExpressionStatement	maxSemi = formattedLine . length ( )	6945:4:200111:200143	659578	1	True				
ANR	660019	AssignmentExpression	maxSemi = formattedLine . length ( )		659578	0		=			
ANR	660020	Identifier	maxSemi		659578	0					
ANR	660021	CallExpression	formattedLine . length ( )		659578	1					
ANR	660022	Callee	formattedLine . length		659578	0					
ANR	660023	MemberAccess	formattedLine . length		659578	0					
ANR	660024	Identifier	formattedLine		659578	0					
ANR	660025	Identifier	length		659578	1					
ANR	660026	ArgumentList			659578	1					
ANR	660027	ElseStatement	else		659578	0					
ANR	660028	ExpressionStatement	maxSemiPending = formattedLine . length ( )	6947:4:200157:200196	659578	0	True				
ANR	660029	AssignmentExpression	maxSemiPending = formattedLine . length ( )		659578	0		=			
ANR	660030	Identifier	maxSemiPending		659578	0					
ANR	660031	CallExpression	formattedLine . length ( )		659578	1					
ANR	660032	Callee	formattedLine . length		659578	0					
ANR	660033	MemberAccess	formattedLine . length		659578	0					
ANR	660034	Identifier	formattedLine		659578	0					
ANR	660035	Identifier	length		659578	1					
ANR	660036	ArgumentList			659578	1					
ANR	660037	ReturnType	void		659578	1					
ANR	660038	Identifier	ASFormatter :: updateFormattedLineSplitPoints		659578	2					
ANR	660039	ParameterList	char appendedChar		659578	3					
ANR	660040	Parameter	char appendedChar	6848:49:196870:196886	659578	0	True				
ANR	660041	ParameterType	char		659578	0					
ANR	660042	Identifier	appendedChar		659578	1					
ANR	660043	CFGEntryNode	ENTRY		659578		True				
ANR	660044	CFGExitNode	EXIT		659578		True				
ANR	660045	Symbol	previousNonWSChar		659578						
ANR	660046	Symbol	maxSemiPending		659578						
ANR	660047	Symbol	appendedChar		659578						
ANR	660048	Symbol	maxCodeLength		659578						
ANR	660049	Symbol	string :: npos		659578						
ANR	660050	Symbol	isOkToSplitFormattedLine		659578						
ANR	660051	Symbol	maxCommaPending		659578						
ANR	660052	Symbol	isWhiteSpace		659578						
ANR	660053	Symbol	REF_SAME_AS_PTR		659578						
ANR	660054	Symbol	maxComma		659578						
ANR	660055	Symbol	parenNum		659578						
ANR	660056	Symbol	pointerAlignment		659578						
ANR	660057	Symbol	maxWhiteSpacePending		659578						
ANR	660058	Symbol	currentChar		659578						
ANR	660059	Symbol	pointerSymbolFollows		659578						
ANR	660060	Symbol	peekNextChar		659578						
ANR	660061	Symbol	referenceAlignment		659578						
ANR	660062	Symbol	isCharPotentialOperator		659578						
ANR	660063	Symbol	formattedLine		659578						
ANR	660064	Symbol	PTR_ALIGN_TYPE		659578						
ANR	660065	Symbol	REF_ALIGN_TYPE		659578						
ANR	660066	Symbol	maxParen		659578						
ANR	660067	Symbol	formattedLine . length		659578						
ANR	660068	Symbol	nextChar		659578						
ANR	660069	Symbol	maxParenPending		659578						
ANR	660070	Symbol	maxWhiteSpace		659578						
ANR	660071	Symbol	maxSemi		659578						
ANR	660072	Function	ASFormatter :: updateFormattedLineSplitPointsOperator	6952:0:200208:203193							
ANR	660073	FunctionDef	ASFormatter :: updateFormattedLineSplitPointsOperator (const string & sequence)		660072	0					
ANR	660074	CompoundStatement		6953:0:200289:203193	660072	0					
ANR	660075	ExpressionStatement	assert ( maxCodeLength != string :: npos )	6954:1:200292:200329	660072	0	True				
ANR	660076	CallExpression	assert ( maxCodeLength != string :: npos )		660072	0					
ANR	660077	Callee	assert		660072	0					
ANR	660078	Identifier	assert		660072	0					
ANR	660079	ArgumentList	maxCodeLength != string :: npos		660072	1					
ANR	660080	Argument	maxCodeLength != string :: npos		660072	0					
ANR	660081	EqualityExpression	maxCodeLength != string :: npos		660072	0		!=			
ANR	660082	Identifier	maxCodeLength		660072	0					
ANR	660083	Identifier	string :: npos		660072	1					
ANR	660084	ExpressionStatement	assert ( formattedLine . length ( ) > 0 )	6955:1:200332:200366	660072	1	True				
ANR	660085	CallExpression	assert ( formattedLine . length ( ) > 0 )		660072	0					
ANR	660086	Callee	assert		660072	0					
ANR	660087	Identifier	assert		660072	0					
ANR	660088	ArgumentList	formattedLine . length ( ) > 0		660072	1					
ANR	660089	Argument	formattedLine . length ( ) > 0		660072	0					
ANR	660090	RelationalExpression	formattedLine . length ( ) > 0		660072	0		>			
ANR	660091	CallExpression	formattedLine . length ( )		660072	0					
ANR	660092	Callee	formattedLine . length		660072	0					
ANR	660093	MemberAccess	formattedLine . length		660072	0					
ANR	660094	Identifier	formattedLine		660072	0					
ANR	660095	Identifier	length		660072	1					
ANR	660096	ArgumentList			660072	1					
ANR	660097	PrimaryExpression	0		660072	1					
ANR	660098	IfStatement	if ( ! isOkToSplitFormattedLine ( ) )		660072	2					
ANR	660099	Condition	! isOkToSplitFormattedLine ( )	6957:5:200374:200400	660072	0	True				
ANR	660100	UnaryOperationExpression	! isOkToSplitFormattedLine ( )		660072	0					
ANR	660101	UnaryOperator	!		660072	0					
ANR	660102	CallExpression	isOkToSplitFormattedLine ( )		660072	1					
ANR	660103	Callee	isOkToSplitFormattedLine		660072	0					
ANR	660104	Identifier	isOkToSplitFormattedLine		660072	0					
ANR	660105	ArgumentList			660072	1					
ANR	660106	ReturnStatement	return ;	6958:2:200405:200411	660072	1	True				
ANR	660107	IdentifierDeclStatement	char nextChar = peekNextChar ( ) ;	6960:1:200415:200445	660072	3	True				
ANR	660108	IdentifierDecl	nextChar = peekNextChar ( )		660072	0					
ANR	660109	IdentifierDeclType	char		660072	0					
ANR	660110	Identifier	nextChar		660072	1					
ANR	660111	AssignmentExpression	nextChar = peekNextChar ( )		660072	2		=			
ANR	660112	Identifier	nextChar		660072	0					
ANR	660113	CallExpression	peekNextChar ( )		660072	1					
ANR	660114	Callee	peekNextChar		660072	0					
ANR	660115	Identifier	peekNextChar		660072	0					
ANR	660116	ArgumentList			660072	1					
ANR	660117	IfStatement	if ( nextChar == '/' )		660072	4					
ANR	660118	Condition	nextChar == '/'	6963:5:200499:200513	660072	0	True				
ANR	660119	EqualityExpression	nextChar == '/'		660072	0		==			
ANR	660120	Identifier	nextChar		660072	0					
ANR	660121	PrimaryExpression	'/'		660072	1					
ANR	660122	ReturnStatement	return ;	6964:2:200518:200524	660072	1	True				
ANR	660123	IfStatement	"if ( sequence == ""||"" || sequence == ""&&"" || sequence == ""or"" || sequence == ""and"" )"		660072	5					
ANR	660124	Condition	"sequence == ""||"" || sequence == ""&&"" || sequence == ""or"" || sequence == ""and"""	6967:5:200566:200642	660072	0	True				
ANR	660125	OrExpression	"sequence == ""||"" || sequence == ""&&"" || sequence == ""or"" || sequence == ""and"""		660072	0		||			
ANR	660126	EqualityExpression	"sequence == ""||"""		660072	0		==			
ANR	660127	Identifier	sequence		660072	0					
ANR	660128	PrimaryExpression	"""||"""		660072	1					
ANR	660129	OrExpression	"sequence == ""&&"" || sequence == ""or"" || sequence == ""and"""		660072	1		||			
ANR	660130	EqualityExpression	"sequence == ""&&"""		660072	0		==			
ANR	660131	Identifier	sequence		660072	0					
ANR	660132	PrimaryExpression	"""&&"""		660072	1					
ANR	660133	OrExpression	"sequence == ""or"" || sequence == ""and"""		660072	1		||			
ANR	660134	EqualityExpression	"sequence == ""or"""		660072	0		==			
ANR	660135	Identifier	sequence		660072	0					
ANR	660136	PrimaryExpression	"""or"""		660072	1					
ANR	660137	EqualityExpression	"sequence == ""and"""		660072	1		==			
ANR	660138	Identifier	sequence		660072	0					
ANR	660139	PrimaryExpression	"""and"""		660072	1					
ANR	660140	CompoundStatement		16:1:356:356	660072	1					
ANR	660141	IfStatement	if ( shouldBreakLineAfterLogical )		660072	0					
ANR	660142	Condition	shouldBreakLineAfterLogical	6969:6:200654:200680	660072	0	True				
ANR	660143	Identifier	shouldBreakLineAfterLogical		660072	0					
ANR	660144	CompoundStatement		18:2:395:395	660072	1					
ANR	660145	IfStatement	if ( formattedLine . length ( ) <= maxCodeLength )		660072	0					
ANR	660146	Condition	formattedLine . length ( ) <= maxCodeLength	6971:7:200694:200732	660072	0	True				
ANR	660147	RelationalExpression	formattedLine . length ( ) <= maxCodeLength		660072	0		<=			
ANR	660148	CallExpression	formattedLine . length ( )		660072	0					
ANR	660149	Callee	formattedLine . length		660072	0					
ANR	660150	MemberAccess	formattedLine . length		660072	0					
ANR	660151	Identifier	formattedLine		660072	0					
ANR	660152	Identifier	length		660072	1					
ANR	660153	ArgumentList			660072	1					
ANR	660154	Identifier	maxCodeLength		660072	1					
ANR	660155	ExpressionStatement	maxAndOr = formattedLine . length ( )	6972:4:200739:200772	660072	1	True				
ANR	660156	AssignmentExpression	maxAndOr = formattedLine . length ( )		660072	0		=			
ANR	660157	Identifier	maxAndOr		660072	0					
ANR	660158	CallExpression	formattedLine . length ( )		660072	1					
ANR	660159	Callee	formattedLine . length		660072	0					
ANR	660160	MemberAccess	formattedLine . length		660072	0					
ANR	660161	Identifier	formattedLine		660072	0					
ANR	660162	Identifier	length		660072	1					
ANR	660163	ArgumentList			660072	1					
ANR	660164	ElseStatement	else		660072	0					
ANR	660165	ExpressionStatement	maxAndOrPending = formattedLine . length ( )	6974:4:200786:200826	660072	0	True				
ANR	660166	AssignmentExpression	maxAndOrPending = formattedLine . length ( )		660072	0		=			
ANR	660167	Identifier	maxAndOrPending		660072	0					
ANR	660168	CallExpression	formattedLine . length ( )		660072	1					
ANR	660169	Callee	formattedLine . length		660072	0					
ANR	660170	MemberAccess	formattedLine . length		660072	0					
ANR	660171	Identifier	formattedLine		660072	0					
ANR	660172	Identifier	length		660072	1					
ANR	660173	ArgumentList			660072	1					
ANR	660174	ElseStatement	else		660072	0					
ANR	660175	CompoundStatement		27:3:603:644	660072	0					
ANR	660176	IdentifierDeclStatement	size_t sequenceLength = sequence . length ( ) ;	6979:3:200893:200934	660072	0	True				
ANR	660177	IdentifierDecl	sequenceLength = sequence . length ( )		660072	0					
ANR	660178	IdentifierDeclType	size_t		660072	0					
ANR	660179	Identifier	sequenceLength		660072	1					
ANR	660180	AssignmentExpression	sequenceLength = sequence . length ( )		660072	2		=			
ANR	660181	Identifier	sequenceLength		660072	0					
ANR	660182	CallExpression	sequence . length ( )		660072	1					
ANR	660183	Callee	sequence . length		660072	0					
ANR	660184	MemberAccess	sequence . length		660072	0					
ANR	660185	Identifier	sequence		660072	0					
ANR	660186	Identifier	length		660072	1					
ANR	660187	ArgumentList			660072	1					
ANR	660188	IfStatement	if ( formattedLine . length ( ) > sequenceLength && isWhiteSpace ( formattedLine [ formattedLine . length ( ) - sequenceLength - 1 ] ) )		660072	1					
ANR	660189	Condition	formattedLine . length ( ) > sequenceLength && isWhiteSpace ( formattedLine [ formattedLine . length ( ) - sequenceLength - 1 ] )	6980:7:200943:201068	660072	0	True				
ANR	660190	AndExpression	formattedLine . length ( ) > sequenceLength && isWhiteSpace ( formattedLine [ formattedLine . length ( ) - sequenceLength - 1 ] )		660072	0		&&			
ANR	660191	RelationalExpression	formattedLine . length ( ) > sequenceLength		660072	0		>			
ANR	660192	CallExpression	formattedLine . length ( )		660072	0					
ANR	660193	Callee	formattedLine . length		660072	0					
ANR	660194	MemberAccess	formattedLine . length		660072	0					
ANR	660195	Identifier	formattedLine		660072	0					
ANR	660196	Identifier	length		660072	1					
ANR	660197	ArgumentList			660072	1					
ANR	660198	Identifier	sequenceLength		660072	1					
ANR	660199	CallExpression	isWhiteSpace ( formattedLine [ formattedLine . length ( ) - sequenceLength - 1 ] )		660072	1					
ANR	660200	Callee	isWhiteSpace		660072	0					
ANR	660201	Identifier	isWhiteSpace		660072	0					
ANR	660202	ArgumentList	formattedLine [ formattedLine . length ( ) - sequenceLength - 1 ]		660072	1					
ANR	660203	Argument	formattedLine [ formattedLine . length ( ) - sequenceLength - 1 ]		660072	0					
ANR	660204	ArrayIndexing	formattedLine [ formattedLine . length ( ) - sequenceLength - 1 ]		660072	0					
ANR	660205	Identifier	formattedLine		660072	0					
ANR	660206	AdditiveExpression	formattedLine . length ( ) - sequenceLength - 1		660072	1		-			
ANR	660207	CallExpression	formattedLine . length ( )		660072	0					
ANR	660208	Callee	formattedLine . length		660072	0					
ANR	660209	MemberAccess	formattedLine . length		660072	0					
ANR	660210	Identifier	formattedLine		660072	0					
ANR	660211	Identifier	length		660072	1					
ANR	660212	ArgumentList			660072	1					
ANR	660213	AdditiveExpression	sequenceLength - 1		660072	1		-			
ANR	660214	Identifier	sequenceLength		660072	0					
ANR	660215	PrimaryExpression	1		660072	1					
ANR	660216	ExpressionStatement	sequenceLength ++	6982:4:201075:201091	660072	1	True				
ANR	660217	PostIncDecOperationExpression	sequenceLength ++		660072	0					
ANR	660218	Identifier	sequenceLength		660072	0					
ANR	660219	IncDec	++		660072	1					
ANR	660220	IfStatement	if ( formattedLine . length ( ) - sequenceLength <= maxCodeLength )		660072	2					
ANR	660221	Condition	formattedLine . length ( ) - sequenceLength <= maxCodeLength	6983:7:201100:201155	660072	0	True				
ANR	660222	RelationalExpression	formattedLine . length ( ) - sequenceLength <= maxCodeLength		660072	0		<=			
ANR	660223	AdditiveExpression	formattedLine . length ( ) - sequenceLength		660072	0		-			
ANR	660224	CallExpression	formattedLine . length ( )		660072	0					
ANR	660225	Callee	formattedLine . length		660072	0					
ANR	660226	MemberAccess	formattedLine . length		660072	0					
ANR	660227	Identifier	formattedLine		660072	0					
ANR	660228	Identifier	length		660072	1					
ANR	660229	ArgumentList			660072	1					
ANR	660230	Identifier	sequenceLength		660072	1					
ANR	660231	Identifier	maxCodeLength		660072	1					
ANR	660232	ExpressionStatement	maxAndOr = formattedLine . length ( ) - sequenceLength	6984:4:201162:201212	660072	1	True				
ANR	660233	AssignmentExpression	maxAndOr = formattedLine . length ( ) - sequenceLength		660072	0		=			
ANR	660234	Identifier	maxAndOr		660072	0					
ANR	660235	AdditiveExpression	formattedLine . length ( ) - sequenceLength		660072	1		-			
ANR	660236	CallExpression	formattedLine . length ( )		660072	0					
ANR	660237	Callee	formattedLine . length		660072	0					
ANR	660238	MemberAccess	formattedLine . length		660072	0					
ANR	660239	Identifier	formattedLine		660072	0					
ANR	660240	Identifier	length		660072	1					
ANR	660241	ArgumentList			660072	1					
ANR	660242	Identifier	sequenceLength		660072	1					
ANR	660243	ElseStatement	else		660072	0					
ANR	660244	ExpressionStatement	maxAndOrPending = formattedLine . length ( ) - sequenceLength	6986:4:201226:201283	660072	0	True				
ANR	660245	AssignmentExpression	maxAndOrPending = formattedLine . length ( ) - sequenceLength		660072	0		=			
ANR	660246	Identifier	maxAndOrPending		660072	0					
ANR	660247	AdditiveExpression	formattedLine . length ( ) - sequenceLength		660072	1		-			
ANR	660248	CallExpression	formattedLine . length ( )		660072	0					
ANR	660249	Callee	formattedLine . length		660072	0					
ANR	660250	MemberAccess	formattedLine . length		660072	0					
ANR	660251	Identifier	formattedLine		660072	0					
ANR	660252	Identifier	length		660072	1					
ANR	660253	ArgumentList			660072	1					
ANR	660254	Identifier	sequenceLength		660072	1					
ANR	660255	ElseStatement	else		660072	0					
ANR	660256	IfStatement	"if ( sequence == ""=="" || sequence == ""!="" || sequence == "">="" || sequence == ""<="" )"		660072	0					
ANR	660257	Condition	"sequence == ""=="" || sequence == ""!="" || sequence == "">="" || sequence == ""<="""	6990:10:201380:201455	660072	0	True				
ANR	660258	OrExpression	"sequence == ""=="" || sequence == ""!="" || sequence == "">="" || sequence == ""<="""		660072	0		||			
ANR	660259	EqualityExpression	"sequence == ""=="""		660072	0		==			
ANR	660260	Identifier	sequence		660072	0					
ANR	660261	PrimaryExpression	"""=="""		660072	1					
ANR	660262	OrExpression	"sequence == ""!="" || sequence == "">="" || sequence == ""<="""		660072	1		||			
ANR	660263	EqualityExpression	"sequence == ""!="""		660072	0		==			
ANR	660264	Identifier	sequence		660072	0					
ANR	660265	PrimaryExpression	"""!="""		660072	1					
ANR	660266	OrExpression	"sequence == "">="" || sequence == ""<="""		660072	1		||			
ANR	660267	EqualityExpression	"sequence == "">="""		660072	0		==			
ANR	660268	Identifier	sequence		660072	0					
ANR	660269	PrimaryExpression	""">="""		660072	1					
ANR	660270	EqualityExpression	"sequence == ""<="""		660072	1		==			
ANR	660271	Identifier	sequence		660072	0					
ANR	660272	PrimaryExpression	"""<="""		660072	1					
ANR	660273	CompoundStatement		39:1:1169:1169	660072	1					
ANR	660274	IfStatement	if ( formattedLine . length ( ) <= maxCodeLength )		660072	0					
ANR	660275	Condition	formattedLine . length ( ) <= maxCodeLength	6992:6:201467:201505	660072	0	True				
ANR	660276	RelationalExpression	formattedLine . length ( ) <= maxCodeLength		660072	0		<=			
ANR	660277	CallExpression	formattedLine . length ( )		660072	0					
ANR	660278	Callee	formattedLine . length		660072	0					
ANR	660279	MemberAccess	formattedLine . length		660072	0					
ANR	660280	Identifier	formattedLine		660072	0					
ANR	660281	Identifier	length		660072	1					
ANR	660282	ArgumentList			660072	1					
ANR	660283	Identifier	maxCodeLength		660072	1					
ANR	660284	ExpressionStatement	maxWhiteSpace = formattedLine . length ( )	6993:3:201511:201549	660072	1	True				
ANR	660285	AssignmentExpression	maxWhiteSpace = formattedLine . length ( )		660072	0		=			
ANR	660286	Identifier	maxWhiteSpace		660072	0					
ANR	660287	CallExpression	formattedLine . length ( )		660072	1					
ANR	660288	Callee	formattedLine . length		660072	0					
ANR	660289	MemberAccess	formattedLine . length		660072	0					
ANR	660290	Identifier	formattedLine		660072	0					
ANR	660291	Identifier	length		660072	1					
ANR	660292	ArgumentList			660072	1					
ANR	660293	ElseStatement	else		660072	0					
ANR	660294	ExpressionStatement	maxWhiteSpacePending = formattedLine . length ( )	6995:3:201561:201606	660072	0	True				
ANR	660295	AssignmentExpression	maxWhiteSpacePending = formattedLine . length ( )		660072	0		=			
ANR	660296	Identifier	maxWhiteSpacePending		660072	0					
ANR	660297	CallExpression	formattedLine . length ( )		660072	1					
ANR	660298	Callee	formattedLine . length		660072	0					
ANR	660299	MemberAccess	formattedLine . length		660072	0					
ANR	660300	Identifier	formattedLine		660072	0					
ANR	660301	Identifier	length		660072	1					
ANR	660302	ArgumentList			660072	1					
ANR	660303	ElseStatement	else		660072	0					
ANR	660304	IfStatement	"if ( sequence == ""+"" || sequence == ""-"" || sequence == ""?"" )"		660072	0					
ANR	660305	Condition	"sequence == ""+"" || sequence == ""-"" || sequence == ""?"""	6998:10:201703:201755	660072	0	True				
ANR	660306	OrExpression	"sequence == ""+"" || sequence == ""-"" || sequence == ""?"""		660072	0		||			
ANR	660307	EqualityExpression	"sequence == ""+"""		660072	0		==			
ANR	660308	Identifier	sequence		660072	0					
ANR	660309	PrimaryExpression	"""+"""		660072	1					
ANR	660310	OrExpression	"sequence == ""-"" || sequence == ""?"""		660072	1		||			
ANR	660311	EqualityExpression	"sequence == ""-"""		660072	0		==			
ANR	660312	Identifier	sequence		660072	0					
ANR	660313	PrimaryExpression	"""-"""		660072	1					
ANR	660314	EqualityExpression	"sequence == ""?"""		660072	1		==			
ANR	660315	Identifier	sequence		660072	0					
ANR	660316	PrimaryExpression	"""?"""		660072	1					
ANR	660317	CompoundStatement		47:1:1469:1469	660072	1					
ANR	660318	IfStatement	"if ( charNum > 0 && ! ( sequence == ""+"" && isInExponent ( ) ) && ! ( sequence == ""-"" && isInExponent ( ) ) && ( isLegalNameChar ( currentLine [ charNum - 1 ] ) || currentLine [ charNum - 1 ] == ')' || currentLine [ charNum - 1 ] == ']' || currentLine [ charNum - 1 ] == '\\""' ) )"		660072	0					
ANR	660319	Condition	"charNum > 0 && ! ( sequence == ""+"" && isInExponent ( ) ) && ! ( sequence == ""-"" && isInExponent ( ) ) && ( isLegalNameChar ( currentLine [ charNum - 1 ] ) || currentLine [ charNum - 1 ] == ')' || currentLine [ charNum - 1 ] == ']' || currentLine [ charNum - 1 ] == '\\""' )"	7000:6:201767:202083	660072	0	True				
ANR	660320	AndExpression	"charNum > 0 && ! ( sequence == ""+"" && isInExponent ( ) ) && ! ( sequence == ""-"" && isInExponent ( ) ) && ( isLegalNameChar ( currentLine [ charNum - 1 ] ) || currentLine [ charNum - 1 ] == ')' || currentLine [ charNum - 1 ] == ']' || currentLine [ charNum - 1 ] == '\\""' )"		660072	0		&&			
ANR	660321	RelationalExpression	charNum > 0		660072	0		>			
ANR	660322	Identifier	charNum		660072	0					
ANR	660323	PrimaryExpression	0		660072	1					
ANR	660324	AndExpression	"! ( sequence == ""+"" && isInExponent ( ) ) && ! ( sequence == ""-"" && isInExponent ( ) ) && ( isLegalNameChar ( currentLine [ charNum - 1 ] ) || currentLine [ charNum - 1 ] == ')' || currentLine [ charNum - 1 ] == ']' || currentLine [ charNum - 1 ] == '\\""' )"		660072	1		&&			
ANR	660325	UnaryOperationExpression	"! ( sequence == ""+"" && isInExponent ( ) )"		660072	0					
ANR	660326	UnaryOperator	!		660072	0					
ANR	660327	AndExpression	"sequence == ""+"" && isInExponent ( )"		660072	1		&&			
ANR	660328	EqualityExpression	"sequence == ""+"""		660072	0		==			
ANR	660329	Identifier	sequence		660072	0					
ANR	660330	PrimaryExpression	"""+"""		660072	1					
ANR	660331	CallExpression	isInExponent ( )		660072	1					
ANR	660332	Callee	isInExponent		660072	0					
ANR	660333	Identifier	isInExponent		660072	0					
ANR	660334	ArgumentList			660072	1					
ANR	660335	AndExpression	"! ( sequence == ""-"" && isInExponent ( ) ) && ( isLegalNameChar ( currentLine [ charNum - 1 ] ) || currentLine [ charNum - 1 ] == ')' || currentLine [ charNum - 1 ] == ']' || currentLine [ charNum - 1 ] == '\\""' )"		660072	1		&&			
ANR	660336	UnaryOperationExpression	"! ( sequence == ""-"" && isInExponent ( ) )"		660072	0					
ANR	660337	UnaryOperator	!		660072	0					
ANR	660338	AndExpression	"sequence == ""-"" && isInExponent ( )"		660072	1		&&			
ANR	660339	EqualityExpression	"sequence == ""-"""		660072	0		==			
ANR	660340	Identifier	sequence		660072	0					
ANR	660341	PrimaryExpression	"""-"""		660072	1					
ANR	660342	CallExpression	isInExponent ( )		660072	1					
ANR	660343	Callee	isInExponent		660072	0					
ANR	660344	Identifier	isInExponent		660072	0					
ANR	660345	ArgumentList			660072	1					
ANR	660346	OrExpression	"isLegalNameChar ( currentLine [ charNum - 1 ] ) || currentLine [ charNum - 1 ] == ')' || currentLine [ charNum - 1 ] == ']' || currentLine [ charNum - 1 ] == '\\""'"		660072	1		||			
ANR	660347	CallExpression	isLegalNameChar ( currentLine [ charNum - 1 ] )		660072	0					
ANR	660348	Callee	isLegalNameChar		660072	0					
ANR	660349	Identifier	isLegalNameChar		660072	0					
ANR	660350	ArgumentList	currentLine [ charNum - 1 ]		660072	1					
ANR	660351	Argument	currentLine [ charNum - 1 ]		660072	0					
ANR	660352	ArrayIndexing	currentLine [ charNum - 1 ]		660072	0					
ANR	660353	Identifier	currentLine		660072	0					
ANR	660354	AdditiveExpression	charNum - 1		660072	1		-			
ANR	660355	Identifier	charNum		660072	0					
ANR	660356	PrimaryExpression	1		660072	1					
ANR	660357	OrExpression	"currentLine [ charNum - 1 ] == ')' || currentLine [ charNum - 1 ] == ']' || currentLine [ charNum - 1 ] == '\\""'"		660072	1		||			
ANR	660358	EqualityExpression	currentLine [ charNum - 1 ] == ')'		660072	0		==			
ANR	660359	ArrayIndexing	currentLine [ charNum - 1 ]		660072	0					
ANR	660360	Identifier	currentLine		660072	0					
ANR	660361	AdditiveExpression	charNum - 1		660072	1		-			
ANR	660362	Identifier	charNum		660072	0					
ANR	660363	PrimaryExpression	1		660072	1					
ANR	660364	PrimaryExpression	')'		660072	1					
ANR	660365	OrExpression	"currentLine [ charNum - 1 ] == ']' || currentLine [ charNum - 1 ] == '\\""'"		660072	1		||			
ANR	660366	EqualityExpression	currentLine [ charNum - 1 ] == ']'		660072	0		==			
ANR	660367	ArrayIndexing	currentLine [ charNum - 1 ]		660072	0					
ANR	660368	Identifier	currentLine		660072	0					
ANR	660369	AdditiveExpression	charNum - 1		660072	1		-			
ANR	660370	Identifier	charNum		660072	0					
ANR	660371	PrimaryExpression	1		660072	1					
ANR	660372	PrimaryExpression	']'		660072	1					
ANR	660373	EqualityExpression	"currentLine [ charNum - 1 ] == '\\""'"		660072	1		==			
ANR	660374	ArrayIndexing	currentLine [ charNum - 1 ]		660072	0					
ANR	660375	Identifier	currentLine		660072	0					
ANR	660376	AdditiveExpression	charNum - 1		660072	1		-			
ANR	660377	Identifier	charNum		660072	0					
ANR	660378	PrimaryExpression	1		660072	1					
ANR	660379	PrimaryExpression	"'\\""'"		660072	1					
ANR	660380	CompoundStatement		55:2:1798:1798	660072	1					
ANR	660381	IfStatement	if ( formattedLine . length ( ) - 1 <= maxCodeLength )		660072	0					
ANR	660382	Condition	formattedLine . length ( ) - 1 <= maxCodeLength	7008:7:202097:202139	660072	0	True				
ANR	660383	RelationalExpression	formattedLine . length ( ) - 1 <= maxCodeLength		660072	0		<=			
ANR	660384	AdditiveExpression	formattedLine . length ( ) - 1		660072	0		-			
ANR	660385	CallExpression	formattedLine . length ( )		660072	0					
ANR	660386	Callee	formattedLine . length		660072	0					
ANR	660387	MemberAccess	formattedLine . length		660072	0					
ANR	660388	Identifier	formattedLine		660072	0					
ANR	660389	Identifier	length		660072	1					
ANR	660390	ArgumentList			660072	1					
ANR	660391	PrimaryExpression	1		660072	1					
ANR	660392	Identifier	maxCodeLength		660072	1					
ANR	660393	ExpressionStatement	maxWhiteSpace = formattedLine . length ( ) - 1	7009:4:202146:202188	660072	1	True				
ANR	660394	AssignmentExpression	maxWhiteSpace = formattedLine . length ( ) - 1		660072	0		=			
ANR	660395	Identifier	maxWhiteSpace		660072	0					
ANR	660396	AdditiveExpression	formattedLine . length ( ) - 1		660072	1		-			
ANR	660397	CallExpression	formattedLine . length ( )		660072	0					
ANR	660398	Callee	formattedLine . length		660072	0					
ANR	660399	MemberAccess	formattedLine . length		660072	0					
ANR	660400	Identifier	formattedLine		660072	0					
ANR	660401	Identifier	length		660072	1					
ANR	660402	ArgumentList			660072	1					
ANR	660403	PrimaryExpression	1		660072	1					
ANR	660404	ElseStatement	else		660072	0					
ANR	660405	ExpressionStatement	maxWhiteSpacePending = formattedLine . length ( ) - 1	7011:4:202202:202251	660072	0	True				
ANR	660406	AssignmentExpression	maxWhiteSpacePending = formattedLine . length ( ) - 1		660072	0		=			
ANR	660407	Identifier	maxWhiteSpacePending		660072	0					
ANR	660408	AdditiveExpression	formattedLine . length ( ) - 1		660072	1		-			
ANR	660409	CallExpression	formattedLine . length ( )		660072	0					
ANR	660410	Callee	formattedLine . length		660072	0					
ANR	660411	MemberAccess	formattedLine . length		660072	0					
ANR	660412	Identifier	formattedLine		660072	0					
ANR	660413	Identifier	length		660072	1					
ANR	660414	ArgumentList			660072	1					
ANR	660415	PrimaryExpression	1		660072	1					
ANR	660416	ElseStatement	else		660072	0					
ANR	660417	IfStatement	"if ( sequence == ""="" || sequence == "":"" )"		660072	0					
ANR	660418	Condition	"sequence == ""="" || sequence == "":"""	7015:10:202359:202392	660072	0	True				
ANR	660419	OrExpression	"sequence == ""="" || sequence == "":"""		660072	0		||			
ANR	660420	EqualityExpression	"sequence == ""="""		660072	0		==			
ANR	660421	Identifier	sequence		660072	0					
ANR	660422	PrimaryExpression	"""="""		660072	1					
ANR	660423	EqualityExpression	"sequence == "":"""		660072	1		==			
ANR	660424	Identifier	sequence		660072	0					
ANR	660425	PrimaryExpression	""":"""		660072	1					
ANR	660426	CompoundStatement		67:2:2221:2242	660072	1					
ANR	660427	IdentifierDeclStatement	size_t splitPoint = 0 ;	7019:2:202511:202532	660072	0	True				
ANR	660428	IdentifierDecl	splitPoint = 0		660072	0					
ANR	660429	IdentifierDeclType	size_t		660072	0					
ANR	660430	Identifier	splitPoint		660072	1					
ANR	660431	AssignmentExpression	splitPoint = 0		660072	2		=			
ANR	660432	Identifier	splitPoint		660072	0					
ANR	660433	PrimaryExpression	0		660072	1					
ANR	660434	IfStatement	if ( formattedLine . length ( ) < maxCodeLength )		660072	1					
ANR	660435	Condition	formattedLine . length ( ) < maxCodeLength	7020:6:202540:202577	660072	0	True				
ANR	660436	RelationalExpression	formattedLine . length ( ) < maxCodeLength		660072	0		<			
ANR	660437	CallExpression	formattedLine . length ( )		660072	0					
ANR	660438	Callee	formattedLine . length		660072	0					
ANR	660439	MemberAccess	formattedLine . length		660072	0					
ANR	660440	Identifier	formattedLine		660072	0					
ANR	660441	Identifier	length		660072	1					
ANR	660442	ArgumentList			660072	1					
ANR	660443	Identifier	maxCodeLength		660072	1					
ANR	660444	ExpressionStatement	splitPoint = formattedLine . length ( )	7021:3:202583:202618	660072	1	True				
ANR	660445	AssignmentExpression	splitPoint = formattedLine . length ( )		660072	0		=			
ANR	660446	Identifier	splitPoint		660072	0					
ANR	660447	CallExpression	formattedLine . length ( )		660072	1					
ANR	660448	Callee	formattedLine . length		660072	0					
ANR	660449	MemberAccess	formattedLine . length		660072	0					
ANR	660450	Identifier	formattedLine		660072	0					
ANR	660451	Identifier	length		660072	1					
ANR	660452	ArgumentList			660072	1					
ANR	660453	ElseStatement	else		660072	0					
ANR	660454	ExpressionStatement	splitPoint = formattedLine . length ( ) - 1	7023:3:202630:202669	660072	0	True				
ANR	660455	AssignmentExpression	splitPoint = formattedLine . length ( ) - 1		660072	0		=			
ANR	660456	Identifier	splitPoint		660072	0					
ANR	660457	AdditiveExpression	formattedLine . length ( ) - 1		660072	1		-			
ANR	660458	CallExpression	formattedLine . length ( )		660072	0					
ANR	660459	Callee	formattedLine . length		660072	0					
ANR	660460	MemberAccess	formattedLine . length		660072	0					
ANR	660461	Identifier	formattedLine		660072	0					
ANR	660462	Identifier	length		660072	1					
ANR	660463	ArgumentList			660072	1					
ANR	660464	PrimaryExpression	1		660072	1					
ANR	660465	IfStatement	if ( previousNonWSChar == ']' )		660072	2					
ANR	660466	Condition	previousNonWSChar == ']'	7025:6:202708:202731	660072	0	True				
ANR	660467	EqualityExpression	previousNonWSChar == ']'		660072	0		==			
ANR	660468	Identifier	previousNonWSChar		660072	0					
ANR	660469	PrimaryExpression	']'		660072	1					
ANR	660470	CompoundStatement		74:2:2446:2446	660072	1					
ANR	660471	IfStatement	if ( formattedLine . length ( ) - 1 <= maxCodeLength )		660072	0					
ANR	660472	Condition	formattedLine . length ( ) - 1 <= maxCodeLength	7027:7:202745:202787	660072	0	True				
ANR	660473	RelationalExpression	formattedLine . length ( ) - 1 <= maxCodeLength		660072	0		<=			
ANR	660474	AdditiveExpression	formattedLine . length ( ) - 1		660072	0		-			
ANR	660475	CallExpression	formattedLine . length ( )		660072	0					
ANR	660476	Callee	formattedLine . length		660072	0					
ANR	660477	MemberAccess	formattedLine . length		660072	0					
ANR	660478	Identifier	formattedLine		660072	0					
ANR	660479	Identifier	length		660072	1					
ANR	660480	ArgumentList			660072	1					
ANR	660481	PrimaryExpression	1		660072	1					
ANR	660482	Identifier	maxCodeLength		660072	1					
ANR	660483	ExpressionStatement	maxWhiteSpace = splitPoint	7028:4:202794:202820	660072	1	True				
ANR	660484	AssignmentExpression	maxWhiteSpace = splitPoint		660072	0		=			
ANR	660485	Identifier	maxWhiteSpace		660072	0					
ANR	660486	Identifier	splitPoint		660072	1					
ANR	660487	ElseStatement	else		660072	0					
ANR	660488	ExpressionStatement	maxWhiteSpacePending = splitPoint	7030:4:202834:202867	660072	0	True				
ANR	660489	AssignmentExpression	maxWhiteSpacePending = splitPoint		660072	0		=			
ANR	660490	Identifier	maxWhiteSpacePending		660072	0					
ANR	660491	Identifier	splitPoint		660072	1					
ANR	660492	ElseStatement	else		660072	0					
ANR	660493	IfStatement	if ( charNum > 0 && ( isLegalNameChar ( currentLine [ charNum - 1 ] ) || currentLine [ charNum - 1 ] == ')' || currentLine [ charNum - 1 ] == ']' ) )		660072	0					
ANR	660494	Condition	charNum > 0 && ( isLegalNameChar ( currentLine [ charNum - 1 ] ) || currentLine [ charNum - 1 ] == ')' || currentLine [ charNum - 1 ] == ']' )	7032:11:202884:203052	660072	0	True				
ANR	660495	AndExpression	charNum > 0 && ( isLegalNameChar ( currentLine [ charNum - 1 ] ) || currentLine [ charNum - 1 ] == ')' || currentLine [ charNum - 1 ] == ']' )		660072	0		&&			
ANR	660496	RelationalExpression	charNum > 0		660072	0		>			
ANR	660497	Identifier	charNum		660072	0					
ANR	660498	PrimaryExpression	0		660072	1					
ANR	660499	OrExpression	isLegalNameChar ( currentLine [ charNum - 1 ] ) || currentLine [ charNum - 1 ] == ')' || currentLine [ charNum - 1 ] == ']'		660072	1		||			
ANR	660500	CallExpression	isLegalNameChar ( currentLine [ charNum - 1 ] )		660072	0					
ANR	660501	Callee	isLegalNameChar		660072	0					
ANR	660502	Identifier	isLegalNameChar		660072	0					
ANR	660503	ArgumentList	currentLine [ charNum - 1 ]		660072	1					
ANR	660504	Argument	currentLine [ charNum - 1 ]		660072	0					
ANR	660505	ArrayIndexing	currentLine [ charNum - 1 ]		660072	0					
ANR	660506	Identifier	currentLine		660072	0					
ANR	660507	AdditiveExpression	charNum - 1		660072	1		-			
ANR	660508	Identifier	charNum		660072	0					
ANR	660509	PrimaryExpression	1		660072	1					
ANR	660510	OrExpression	currentLine [ charNum - 1 ] == ')' || currentLine [ charNum - 1 ] == ']'		660072	1		||			
ANR	660511	EqualityExpression	currentLine [ charNum - 1 ] == ')'		660072	0		==			
ANR	660512	ArrayIndexing	currentLine [ charNum - 1 ]		660072	0					
ANR	660513	Identifier	currentLine		660072	0					
ANR	660514	AdditiveExpression	charNum - 1		660072	1		-			
ANR	660515	Identifier	charNum		660072	0					
ANR	660516	PrimaryExpression	1		660072	1					
ANR	660517	PrimaryExpression	')'		660072	1					
ANR	660518	EqualityExpression	currentLine [ charNum - 1 ] == ']'		660072	1		==			
ANR	660519	ArrayIndexing	currentLine [ charNum - 1 ]		660072	0					
ANR	660520	Identifier	currentLine		660072	0					
ANR	660521	AdditiveExpression	charNum - 1		660072	1		-			
ANR	660522	Identifier	charNum		660072	0					
ANR	660523	PrimaryExpression	1		660072	1					
ANR	660524	PrimaryExpression	']'		660072	1					
ANR	660525	CompoundStatement		84:2:2767:2767	660072	1					
ANR	660526	IfStatement	if ( formattedLine . length ( ) <= maxCodeLength )		660072	0					
ANR	660527	Condition	formattedLine . length ( ) <= maxCodeLength	7037:7:203066:203104	660072	0	True				
ANR	660528	RelationalExpression	formattedLine . length ( ) <= maxCodeLength		660072	0		<=			
ANR	660529	CallExpression	formattedLine . length ( )		660072	0					
ANR	660530	Callee	formattedLine . length		660072	0					
ANR	660531	MemberAccess	formattedLine . length		660072	0					
ANR	660532	Identifier	formattedLine		660072	0					
ANR	660533	Identifier	length		660072	1					
ANR	660534	ArgumentList			660072	1					
ANR	660535	Identifier	maxCodeLength		660072	1					
ANR	660536	ExpressionStatement	maxWhiteSpace = splitPoint	7038:4:203111:203137	660072	1	True				
ANR	660537	AssignmentExpression	maxWhiteSpace = splitPoint		660072	0		=			
ANR	660538	Identifier	maxWhiteSpace		660072	0					
ANR	660539	Identifier	splitPoint		660072	1					
ANR	660540	ElseStatement	else		660072	0					
ANR	660541	ExpressionStatement	maxWhiteSpacePending = splitPoint	7040:4:203151:203184	660072	0	True				
ANR	660542	AssignmentExpression	maxWhiteSpacePending = splitPoint		660072	0		=			
ANR	660543	Identifier	maxWhiteSpacePending		660072	0					
ANR	660544	Identifier	splitPoint		660072	1					
ANR	660545	ReturnType	void		660072	1					
ANR	660546	Identifier	ASFormatter :: updateFormattedLineSplitPointsOperator		660072	2					
ANR	660547	ParameterList	const string & sequence		660072	3					
ANR	660548	Parameter	const string & sequence	6952:57:200265:200286	660072	0	True				
ANR	660549	ParameterType	const string &		660072	0					
ANR	660550	Identifier	sequence		660072	1					
ANR	660551	CFGEntryNode	ENTRY		660072		True				
ANR	660552	CFGExitNode	EXIT		660072		True				
ANR	660553	Symbol	* formattedLine		660072						
ANR	660554	Symbol	previousNonWSChar		660072						
ANR	660555	Symbol	isInExponent		660072						
ANR	660556	Symbol	sequenceLength		660072						
ANR	660557	Symbol	maxCodeLength		660072						
ANR	660558	Symbol	string :: npos		660072						
ANR	660559	Symbol	isOkToSplitFormattedLine		660072						
ANR	660560	Symbol	sequence . length		660072						
ANR	660561	Symbol	isLegalNameChar		660072						
ANR	660562	Symbol	* formattedLine . length		660072						
ANR	660563	Symbol	isWhiteSpace		660072						
ANR	660564	Symbol	* currentLine		660072						
ANR	660565	Symbol	charNum		660072						
ANR	660566	Symbol	currentLine		660072						
ANR	660567	Symbol	maxWhiteSpacePending		660072						
ANR	660568	Symbol	* sequenceLength		660072						
ANR	660569	Symbol	peekNextChar		660072						
ANR	660570	Symbol	formattedLine		660072						
ANR	660571	Symbol	sequence		660072						
ANR	660572	Symbol	formattedLine . length		660072						
ANR	660573	Symbol	* charNum		660072						
ANR	660574	Symbol	nextChar		660072						
ANR	660575	Symbol	shouldBreakLineAfterLogical		660072						
ANR	660576	Symbol	maxWhiteSpace		660072						
ANR	660577	Symbol	maxAndOr		660072						
ANR	660578	Symbol	maxAndOrPending		660072						
ANR	660579	Symbol	splitPoint		660072						
ANR	660580	Function	ASFormatter :: updateFormattedLineSplitPointsPointerOrReference	7049:0:203343:203738							
ANR	660581	FunctionDef	ASFormatter :: updateFormattedLineSplitPointsPointerOrReference (size_t index)		660580	0					
ANR	660582	CompoundStatement		7050:0:203424:203738	660580	0					
ANR	660583	ExpressionStatement	assert ( maxCodeLength != string :: npos )	7051:1:203427:203464	660580	0	True				
ANR	660584	CallExpression	assert ( maxCodeLength != string :: npos )		660580	0					
ANR	660585	Callee	assert		660580	0					
ANR	660586	Identifier	assert		660580	0					
ANR	660587	ArgumentList	maxCodeLength != string :: npos		660580	1					
ANR	660588	Argument	maxCodeLength != string :: npos		660580	0					
ANR	660589	EqualityExpression	maxCodeLength != string :: npos		660580	0		!=			
ANR	660590	Identifier	maxCodeLength		660580	0					
ANR	660591	Identifier	string :: npos		660580	1					
ANR	660592	ExpressionStatement	assert ( formattedLine . length ( ) > 0 )	7052:1:203467:203501	660580	1	True				
ANR	660593	CallExpression	assert ( formattedLine . length ( ) > 0 )		660580	0					
ANR	660594	Callee	assert		660580	0					
ANR	660595	Identifier	assert		660580	0					
ANR	660596	ArgumentList	formattedLine . length ( ) > 0		660580	1					
ANR	660597	Argument	formattedLine . length ( ) > 0		660580	0					
ANR	660598	RelationalExpression	formattedLine . length ( ) > 0		660580	0		>			
ANR	660599	CallExpression	formattedLine . length ( )		660580	0					
ANR	660600	Callee	formattedLine . length		660580	0					
ANR	660601	MemberAccess	formattedLine . length		660580	0					
ANR	660602	Identifier	formattedLine		660580	0					
ANR	660603	Identifier	length		660580	1					
ANR	660604	ArgumentList			660580	1					
ANR	660605	PrimaryExpression	0		660580	1					
ANR	660606	ExpressionStatement	assert ( index < formattedLine . length ( ) )	7053:1:203504:203542	660580	2	True				
ANR	660607	CallExpression	assert ( index < formattedLine . length ( ) )		660580	0					
ANR	660608	Callee	assert		660580	0					
ANR	660609	Identifier	assert		660580	0					
ANR	660610	ArgumentList	index < formattedLine . length ( )		660580	1					
ANR	660611	Argument	index < formattedLine . length ( )		660580	0					
ANR	660612	RelationalExpression	index < formattedLine . length ( )		660580	0		<			
ANR	660613	Identifier	index		660580	0					
ANR	660614	CallExpression	formattedLine . length ( )		660580	1					
ANR	660615	Callee	formattedLine . length		660580	0					
ANR	660616	MemberAccess	formattedLine . length		660580	0					
ANR	660617	Identifier	formattedLine		660580	0					
ANR	660618	Identifier	length		660580	1					
ANR	660619	ArgumentList			660580	1					
ANR	660620	IfStatement	if ( ! isOkToSplitFormattedLine ( ) )		660580	3					
ANR	660621	Condition	! isOkToSplitFormattedLine ( )	7055:5:203550:203576	660580	0	True				
ANR	660622	UnaryOperationExpression	! isOkToSplitFormattedLine ( )		660580	0					
ANR	660623	UnaryOperator	!		660580	0					
ANR	660624	CallExpression	isOkToSplitFormattedLine ( )		660580	1					
ANR	660625	Callee	isOkToSplitFormattedLine		660580	0					
ANR	660626	Identifier	isOkToSplitFormattedLine		660580	0					
ANR	660627	ArgumentList			660580	1					
ANR	660628	ReturnStatement	return ;	7056:2:203581:203587	660580	1	True				
ANR	660629	IfStatement	if ( index < maxWhiteSpace )		660580	4					
ANR	660630	Condition	index < maxWhiteSpace	7058:5:203595:203615	660580	0	True				
ANR	660631	RelationalExpression	index < maxWhiteSpace		660580	0		<			
ANR	660632	Identifier	index		660580	0					
ANR	660633	Identifier	maxWhiteSpace		660580	1					
ANR	660634	ReturnStatement	return ;	7059:2:203637:203643	660580	1	True				
ANR	660635	IfStatement	if ( index <= maxCodeLength )		660580	5					
ANR	660636	Condition	index <= maxCodeLength	7061:5:203651:203672	660580	0	True				
ANR	660637	RelationalExpression	index <= maxCodeLength		660580	0		<=			
ANR	660638	Identifier	index		660580	0					
ANR	660639	Identifier	maxCodeLength		660580	1					
ANR	660640	ExpressionStatement	maxWhiteSpace = index	7062:2:203677:203698	660580	1	True				
ANR	660641	AssignmentExpression	maxWhiteSpace = index		660580	0		=			
ANR	660642	Identifier	maxWhiteSpace		660580	0					
ANR	660643	Identifier	index		660580	1					
ANR	660644	ElseStatement	else		660580	0					
ANR	660645	ExpressionStatement	maxWhiteSpacePending = index	7064:2:203708:203736	660580	0	True				
ANR	660646	AssignmentExpression	maxWhiteSpacePending = index		660580	0		=			
ANR	660647	Identifier	maxWhiteSpacePending		660580	0					
ANR	660648	Identifier	index		660580	1					
ANR	660649	ReturnType	void		660580	1					
ANR	660650	Identifier	ASFormatter :: updateFormattedLineSplitPointsPointerOrReference		660580	2					
ANR	660651	ParameterList	size_t index		660580	3					
ANR	660652	Parameter	size_t index	7049:67:203410:203421	660580	0	True				
ANR	660653	ParameterType	size_t		660580	0					
ANR	660654	Identifier	index		660580	1					
ANR	660655	CFGEntryNode	ENTRY		660580		True				
ANR	660656	CFGExitNode	EXIT		660580		True				
ANR	660657	Symbol	formattedLine		660580						
ANR	660658	Symbol	maxWhiteSpacePending		660580						
ANR	660659	Symbol	formattedLine . length		660580						
ANR	660660	Symbol	maxCodeLength		660580						
ANR	660661	Symbol	string :: npos		660580						
ANR	660662	Symbol	index		660580						
ANR	660663	Symbol	isOkToSplitFormattedLine		660580						
ANR	660664	Symbol	maxWhiteSpace		660580						
ANR	660665	Function	ASFormatter :: isOkToSplitFormattedLine	7067:0:203741:204512							
ANR	660666	FunctionDef	ASFormatter :: isOkToSplitFormattedLine ()		660665	0					
ANR	660667	CompoundStatement		7068:0:203786:204512	660665	0					
ANR	660668	ExpressionStatement	assert ( maxCodeLength != string :: npos )	7069:1:203789:203826	660665	0	True				
ANR	660669	CallExpression	assert ( maxCodeLength != string :: npos )		660665	0					
ANR	660670	Callee	assert		660665	0					
ANR	660671	Identifier	assert		660665	0					
ANR	660672	ArgumentList	maxCodeLength != string :: npos		660665	1					
ANR	660673	Argument	maxCodeLength != string :: npos		660665	0					
ANR	660674	EqualityExpression	maxCodeLength != string :: npos		660665	0		!=			
ANR	660675	Identifier	maxCodeLength		660665	0					
ANR	660676	Identifier	string :: npos		660665	1					
ANR	660677	IfStatement	if ( shouldKeepLineUnbroken || isInLineComment || isInComment || isInQuote || isInCase || isInPreprocessor || isInExecSQL || isInAsm || isInAsmOneLine || isInAsmBlock || isInTemplate )		660665	1					
ANR	660678	Condition	shouldKeepLineUnbroken || isInLineComment || isInComment || isInQuote || isInCase || isInPreprocessor || isInExecSQL || isInAsm || isInAsmOneLine || isInAsmBlock || isInTemplate	7071:5:203865:204113	660665	0	True				
ANR	660679	OrExpression	shouldKeepLineUnbroken || isInLineComment || isInComment || isInQuote || isInCase || isInPreprocessor || isInExecSQL || isInAsm || isInAsmOneLine || isInAsmBlock || isInTemplate		660665	0		||			
ANR	660680	Identifier	shouldKeepLineUnbroken		660665	0					
ANR	660681	OrExpression	isInLineComment || isInComment || isInQuote || isInCase || isInPreprocessor || isInExecSQL || isInAsm || isInAsmOneLine || isInAsmBlock || isInTemplate		660665	1		||			
ANR	660682	Identifier	isInLineComment		660665	0					
ANR	660683	OrExpression	isInComment || isInQuote || isInCase || isInPreprocessor || isInExecSQL || isInAsm || isInAsmOneLine || isInAsmBlock || isInTemplate		660665	1		||			
ANR	660684	Identifier	isInComment		660665	0					
ANR	660685	OrExpression	isInQuote || isInCase || isInPreprocessor || isInExecSQL || isInAsm || isInAsmOneLine || isInAsmBlock || isInTemplate		660665	1		||			
ANR	660686	Identifier	isInQuote		660665	0					
ANR	660687	OrExpression	isInCase || isInPreprocessor || isInExecSQL || isInAsm || isInAsmOneLine || isInAsmBlock || isInTemplate		660665	1		||			
ANR	660688	Identifier	isInCase		660665	0					
ANR	660689	OrExpression	isInPreprocessor || isInExecSQL || isInAsm || isInAsmOneLine || isInAsmBlock || isInTemplate		660665	1		||			
ANR	660690	Identifier	isInPreprocessor		660665	0					
ANR	660691	OrExpression	isInExecSQL || isInAsm || isInAsmOneLine || isInAsmBlock || isInTemplate		660665	1		||			
ANR	660692	Identifier	isInExecSQL		660665	0					
ANR	660693	OrExpression	isInAsm || isInAsmOneLine || isInAsmBlock || isInTemplate		660665	1		||			
ANR	660694	Identifier	isInAsm		660665	0					
ANR	660695	OrExpression	isInAsmOneLine || isInAsmBlock || isInTemplate		660665	1		||			
ANR	660696	Identifier	isInAsmOneLine		660665	0					
ANR	660697	OrExpression	isInAsmBlock || isInTemplate		660665	1		||			
ANR	660698	Identifier	isInAsmBlock		660665	0					
ANR	660699	Identifier	isInTemplate		660665	1					
ANR	660700	ReturnStatement	return false ;	7080:2:204118:204130	660665	1	True				
ANR	660701	Identifier	false		660665	0					
ANR	660702	IfStatement	if ( ! isOkToBreakBlock ( braceTypeStack -> back ( ) ) && currentChar != '{' )		660665	2					
ANR	660703	Condition	! isOkToBreakBlock ( braceTypeStack -> back ( ) ) && currentChar != '{'	7082:5:204138:204200	660665	0	True				
ANR	660704	AndExpression	! isOkToBreakBlock ( braceTypeStack -> back ( ) ) && currentChar != '{'		660665	0		&&			
ANR	660705	UnaryOperationExpression	! isOkToBreakBlock ( braceTypeStack -> back ( ) )		660665	0					
ANR	660706	UnaryOperator	!		660665	0					
ANR	660707	CallExpression	isOkToBreakBlock ( braceTypeStack -> back ( ) )		660665	1					
ANR	660708	Callee	isOkToBreakBlock		660665	0					
ANR	660709	Identifier	isOkToBreakBlock		660665	0					
ANR	660710	ArgumentList	braceTypeStack -> back ( )		660665	1					
ANR	660711	Argument	braceTypeStack -> back ( )		660665	0					
ANR	660712	CallExpression	braceTypeStack -> back ( )		660665	0					
ANR	660713	Callee	braceTypeStack -> back		660665	0					
ANR	660714	PtrMemberAccess	braceTypeStack -> back		660665	0					
ANR	660715	Identifier	braceTypeStack		660665	0					
ANR	660716	Identifier	back		660665	1					
ANR	660717	ArgumentList			660665	1					
ANR	660718	EqualityExpression	currentChar != '{'		660665	1		!=			
ANR	660719	Identifier	currentChar		660665	0					
ANR	660720	PrimaryExpression	'{'		660665	1					
ANR	660721	CompoundStatement		16:1:417:417	660665	1					
ANR	660722	ExpressionStatement	shouldKeepLineUnbroken = true	7084:2:204208:204237	660665	0	True				
ANR	660723	AssignmentExpression	shouldKeepLineUnbroken = true		660665	0		=			
ANR	660724	Identifier	shouldKeepLineUnbroken		660665	0					
ANR	660725	Identifier	true		660665	1					
ANR	660726	ExpressionStatement	clearFormattedLineSplitPoints ( )	7085:2:204241:204272	660665	1	True				
ANR	660727	CallExpression	clearFormattedLineSplitPoints ( )		660665	0					
ANR	660728	Callee	clearFormattedLineSplitPoints		660665	0					
ANR	660729	Identifier	clearFormattedLineSplitPoints		660665	0					
ANR	660730	ArgumentList			660665	1					
ANR	660731	ReturnStatement	return false ;	7086:2:204276:204288	660665	2	True				
ANR	660732	Identifier	false		660665	0					
ANR	660733	IfStatement	"if ( isBraceType ( braceTypeStack -> back ( ) , ARRAY_TYPE ) )"		660665	3					
ANR	660734	Condition	"isBraceType ( braceTypeStack -> back ( ) , ARRAY_TYPE )"	7088:5:204298:204344	660665	0	True				
ANR	660735	CallExpression	"isBraceType ( braceTypeStack -> back ( ) , ARRAY_TYPE )"		660665	0					
ANR	660736	Callee	isBraceType		660665	0					
ANR	660737	Identifier	isBraceType		660665	0					
ANR	660738	ArgumentList	braceTypeStack -> back ( )		660665	1					
ANR	660739	Argument	braceTypeStack -> back ( )		660665	0					
ANR	660740	CallExpression	braceTypeStack -> back ( )		660665	0					
ANR	660741	Callee	braceTypeStack -> back		660665	0					
ANR	660742	PtrMemberAccess	braceTypeStack -> back		660665	0					
ANR	660743	Identifier	braceTypeStack		660665	0					
ANR	660744	Identifier	back		660665	1					
ANR	660745	ArgumentList			660665	1					
ANR	660746	Argument	ARRAY_TYPE		660665	1					
ANR	660747	Identifier	ARRAY_TYPE		660665	0					
ANR	660748	CompoundStatement		22:1:561:561	660665	1					
ANR	660749	ExpressionStatement	shouldKeepLineUnbroken = true	7090:2:204352:204381	660665	0	True				
ANR	660750	AssignmentExpression	shouldKeepLineUnbroken = true		660665	0		=			
ANR	660751	Identifier	shouldKeepLineUnbroken		660665	0					
ANR	660752	Identifier	true		660665	1					
ANR	660753	IfStatement	"if ( ! isBraceType ( braceTypeStack -> back ( ) , ARRAY_NIS_TYPE ) )"		660665	1					
ANR	660754	Condition	"! isBraceType ( braceTypeStack -> back ( ) , ARRAY_NIS_TYPE )"	7091:6:204389:204440	660665	0	True				
ANR	660755	UnaryOperationExpression	"! isBraceType ( braceTypeStack -> back ( ) , ARRAY_NIS_TYPE )"		660665	0					
ANR	660756	UnaryOperator	!		660665	0					
ANR	660757	CallExpression	"isBraceType ( braceTypeStack -> back ( ) , ARRAY_NIS_TYPE )"		660665	1					
ANR	660758	Callee	isBraceType		660665	0					
ANR	660759	Identifier	isBraceType		660665	0					
ANR	660760	ArgumentList	braceTypeStack -> back ( )		660665	1					
ANR	660761	Argument	braceTypeStack -> back ( )		660665	0					
ANR	660762	CallExpression	braceTypeStack -> back ( )		660665	0					
ANR	660763	Callee	braceTypeStack -> back		660665	0					
ANR	660764	PtrMemberAccess	braceTypeStack -> back		660665	0					
ANR	660765	Identifier	braceTypeStack		660665	0					
ANR	660766	Identifier	back		660665	1					
ANR	660767	ArgumentList			660665	1					
ANR	660768	Argument	ARRAY_NIS_TYPE		660665	1					
ANR	660769	Identifier	ARRAY_NIS_TYPE		660665	0					
ANR	660770	ExpressionStatement	clearFormattedLineSplitPoints ( )	7092:3:204446:204477	660665	1	True				
ANR	660771	CallExpression	clearFormattedLineSplitPoints ( )		660665	0					
ANR	660772	Callee	clearFormattedLineSplitPoints		660665	0					
ANR	660773	Identifier	clearFormattedLineSplitPoints		660665	0					
ANR	660774	ArgumentList			660665	1					
ANR	660775	ReturnStatement	return false ;	7093:2:204481:204493	660665	2	True				
ANR	660776	Identifier	false		660665	0					
ANR	660777	ReturnStatement	return true ;	7095:1:204499:204510	660665	4	True				
ANR	660778	Identifier	true		660665	0					
ANR	660779	ReturnType	bool		660665	1					
ANR	660780	Identifier	ASFormatter :: isOkToSplitFormattedLine		660665	2					
ANR	660781	ParameterList			660665	3					
ANR	660782	CFGEntryNode	ENTRY		660665		True				
ANR	660783	CFGExitNode	EXIT		660665		True				
ANR	660784	Symbol	isInAsmBlock		660665						
ANR	660785	Symbol	currentChar		660665						
ANR	660786	Symbol	braceTypeStack		660665						
ANR	660787	Symbol	* braceTypeStack		660665						
ANR	660788	Symbol	maxCodeLength		660665						
ANR	660789	Symbol	string :: npos		660665						
ANR	660790	Symbol	false		660665						
ANR	660791	Symbol	ARRAY_TYPE		660665						
ANR	660792	Symbol	isInQuote		660665						
ANR	660793	Symbol	isInTemplate		660665						
ANR	660794	Symbol	braceTypeStack -> back		660665						
ANR	660795	Symbol	isInLineComment		660665						
ANR	660796	Symbol	isInExecSQL		660665						
ANR	660797	Symbol	isInAsm		660665						
ANR	660798	Symbol	ARRAY_NIS_TYPE		660665						
ANR	660799	Symbol	isInAsmOneLine		660665						
ANR	660800	Symbol	isInCase		660665						
ANR	660801	Symbol	true		660665						
ANR	660802	Symbol	isInPreprocessor		660665						
ANR	660803	Symbol	isBraceType		660665						
ANR	660804	Symbol	isOkToBreakBlock		660665						
ANR	660805	Symbol	shouldKeepLineUnbroken		660665						
ANR	660806	Symbol	isInComment		660665						
ANR	660807	Function	ASFormatter :: testForTimeToSplitFormattedLine	7100:0:204573:207678							
ANR	660808	FunctionDef	ASFormatter :: testForTimeToSplitFormattedLine ()		660807	0					
ANR	660809	CompoundStatement		7101:0:204625:207678	660807	0					
ANR	660810	IfStatement	if ( formattedLine . length ( ) > maxCodeLength && ! isLineReady )		660807	0					
ANR	660811	Condition	formattedLine . length ( ) > maxCodeLength && ! isLineReady	7104:5:204698:204751	660807	0	True				
ANR	660812	AndExpression	formattedLine . length ( ) > maxCodeLength && ! isLineReady		660807	0		&&			
ANR	660813	RelationalExpression	formattedLine . length ( ) > maxCodeLength		660807	0		>			
ANR	660814	CallExpression	formattedLine . length ( )		660807	0					
ANR	660815	Callee	formattedLine . length		660807	0					
ANR	660816	MemberAccess	formattedLine . length		660807	0					
ANR	660817	Identifier	formattedLine		660807	0					
ANR	660818	Identifier	length		660807	1					
ANR	660819	ArgumentList			660807	1					
ANR	660820	Identifier	maxCodeLength		660807	1					
ANR	660821	UnaryOperationExpression	! isLineReady		660807	1					
ANR	660822	UnaryOperator	!		660807	0					
ANR	660823	Identifier	isLineReady		660807	1					
ANR	660824	CompoundStatement		6:2:133:182	660807	1					
ANR	660825	IdentifierDeclStatement	size_t splitPoint = findFormattedLineSplitPoint ( ) ;	7106:2:204759:204808	660807	0	True				
ANR	660826	IdentifierDecl	splitPoint = findFormattedLineSplitPoint ( )		660807	0					
ANR	660827	IdentifierDeclType	size_t		660807	0					
ANR	660828	Identifier	splitPoint		660807	1					
ANR	660829	AssignmentExpression	splitPoint = findFormattedLineSplitPoint ( )		660807	2		=			
ANR	660830	Identifier	splitPoint		660807	0					
ANR	660831	CallExpression	findFormattedLineSplitPoint ( )		660807	1					
ANR	660832	Callee	findFormattedLineSplitPoint		660807	0					
ANR	660833	Identifier	findFormattedLineSplitPoint		660807	0					
ANR	660834	ArgumentList			660807	1					
ANR	660835	IfStatement	if ( splitPoint > 0 && splitPoint < formattedLine . length ( ) )		660807	1					
ANR	660836	Condition	splitPoint > 0 && splitPoint < formattedLine . length ( )	7107:6:204816:204868	660807	0	True				
ANR	660837	AndExpression	splitPoint > 0 && splitPoint < formattedLine . length ( )		660807	0		&&			
ANR	660838	RelationalExpression	splitPoint > 0		660807	0		>			
ANR	660839	Identifier	splitPoint		660807	0					
ANR	660840	PrimaryExpression	0		660807	1					
ANR	660841	RelationalExpression	splitPoint < formattedLine . length ( )		660807	1		<			
ANR	660842	Identifier	splitPoint		660807	0					
ANR	660843	CallExpression	formattedLine . length ( )		660807	1					
ANR	660844	Callee	formattedLine . length		660807	0					
ANR	660845	MemberAccess	formattedLine . length		660807	0					
ANR	660846	Identifier	formattedLine		660807	0					
ANR	660847	Identifier	length		660807	1					
ANR	660848	ArgumentList			660807	1					
ANR	660849	CompoundStatement		55:3:2012:2069	660807	1					
ANR	660850	IdentifierDeclStatement	string splitLine = formattedLine . substr ( splitPoint ) ;	7109:3:204878:204929	660807	0	True				
ANR	660851	IdentifierDecl	splitLine = formattedLine . substr ( splitPoint )		660807	0					
ANR	660852	IdentifierDeclType	string		660807	0					
ANR	660853	Identifier	splitLine		660807	1					
ANR	660854	AssignmentExpression	splitLine = formattedLine . substr ( splitPoint )		660807	2		=			
ANR	660855	Identifier	splitLine		660807	0					
ANR	660856	CallExpression	formattedLine . substr ( splitPoint )		660807	1					
ANR	660857	Callee	formattedLine . substr		660807	0					
ANR	660858	MemberAccess	formattedLine . substr		660807	0					
ANR	660859	Identifier	formattedLine		660807	0					
ANR	660860	Identifier	substr		660807	1					
ANR	660861	ArgumentList	splitPoint		660807	1					
ANR	660862	Argument	splitPoint		660807	0					
ANR	660863	Identifier	splitPoint		660807	0					
ANR	660864	ExpressionStatement	"formattedLine = formattedLine . substr ( 0 , splitPoint )"	7110:3:204934:204985	660807	1	True				
ANR	660865	AssignmentExpression	"formattedLine = formattedLine . substr ( 0 , splitPoint )"		660807	0		=			
ANR	660866	Identifier	formattedLine		660807	0					
ANR	660867	CallExpression	"formattedLine . substr ( 0 , splitPoint )"		660807	1					
ANR	660868	Callee	formattedLine . substr		660807	0					
ANR	660869	MemberAccess	formattedLine . substr		660807	0					
ANR	660870	Identifier	formattedLine		660807	0					
ANR	660871	Identifier	substr		660807	1					
ANR	660872	ArgumentList	0		660807	1					
ANR	660873	Argument	0		660807	0					
ANR	660874	PrimaryExpression	0		660807	0					
ANR	660875	Argument	splitPoint		660807	1					
ANR	660876	Identifier	splitPoint		660807	0					
ANR	660877	ExpressionStatement	breakLine ( true )	7111:3:204990:205005	660807	2	True				
ANR	660878	CallExpression	breakLine ( true )		660807	0					
ANR	660879	Callee	breakLine		660807	0					
ANR	660880	Identifier	breakLine		660807	0					
ANR	660881	ArgumentList	true		660807	1					
ANR	660882	Argument	true		660807	0					
ANR	660883	Identifier	true		660807	0					
ANR	660884	ExpressionStatement	formattedLine = splitLine	7112:3:205010:205035	660807	3	True				
ANR	660885	AssignmentExpression	formattedLine = splitLine		660807	0		=			
ANR	660886	Identifier	formattedLine		660807	0					
ANR	660887	Identifier	splitLine		660807	1					
ANR	660888	IdentifierDeclStatement	"string nextWord = ASBeautifier :: getNextWord ( currentLine , charNum - 1 ) ;"	7114:3:205108:205177	660807	4	True				
ANR	660889	IdentifierDecl	"nextWord = ASBeautifier :: getNextWord ( currentLine , charNum - 1 )"		660807	0					
ANR	660890	IdentifierDeclType	string		660807	0					
ANR	660891	Identifier	nextWord		660807	1					
ANR	660892	AssignmentExpression	"nextWord = ASBeautifier :: getNextWord ( currentLine , charNum - 1 )"		660807	2		=			
ANR	660893	Identifier	nextWord		660807	0					
ANR	660894	CallExpression	"ASBeautifier :: getNextWord ( currentLine , charNum - 1 )"		660807	1					
ANR	660895	Callee	ASBeautifier :: getNextWord		660807	0					
ANR	660896	Identifier	ASBeautifier :: getNextWord		660807	0					
ANR	660897	ArgumentList	currentLine		660807	1					
ANR	660898	Argument	currentLine		660807	0					
ANR	660899	Identifier	currentLine		660807	0					
ANR	660900	Argument	charNum - 1		660807	1					
ANR	660901	AdditiveExpression	charNum - 1		660807	0		-			
ANR	660902	Identifier	charNum		660807	0					
ANR	660903	PrimaryExpression	1		660807	1					
ANR	660904	IfStatement	"if ( isAppendPostBlockEmptyLineRequested && ( nextWord == ""break"" || nextWord == ""continue"" ) )"		660807	5					
ANR	660905	Condition	"isAppendPostBlockEmptyLineRequested && ( nextWord == ""break"" || nextWord == ""continue"" )"	7115:7:205186:205282	660807	0	True				
ANR	660906	AndExpression	"isAppendPostBlockEmptyLineRequested && ( nextWord == ""break"" || nextWord == ""continue"" )"		660807	0		&&			
ANR	660907	Identifier	isAppendPostBlockEmptyLineRequested		660807	0					
ANR	660908	OrExpression	"nextWord == ""break"" || nextWord == ""continue"""		660807	1		||			
ANR	660909	EqualityExpression	"nextWord == ""break"""		660807	0		==			
ANR	660910	Identifier	nextWord		660807	0					
ANR	660911	PrimaryExpression	"""break"""		660807	1					
ANR	660912	EqualityExpression	"nextWord == ""continue"""		660807	1		==			
ANR	660913	Identifier	nextWord		660807	0					
ANR	660914	PrimaryExpression	"""continue"""		660807	1					
ANR	660915	CompoundStatement		17:3:662:662	660807	1					
ANR	660916	ExpressionStatement	isAppendPostBlockEmptyLineRequested = false	7118:4:205294:205337	660807	0	True				
ANR	660917	AssignmentExpression	isAppendPostBlockEmptyLineRequested = false		660807	0		=			
ANR	660918	Identifier	isAppendPostBlockEmptyLineRequested		660807	0					
ANR	660919	Identifier	false		660807	1					
ANR	660920	ExpressionStatement	isPrependPostBlockEmptyLineRequested = true	7119:4:205343:205386	660807	1	True				
ANR	660921	AssignmentExpression	isPrependPostBlockEmptyLineRequested = true		660807	0		=			
ANR	660922	Identifier	isPrependPostBlockEmptyLineRequested		660807	0					
ANR	660923	Identifier	true		660807	1					
ANR	660924	ElseStatement	else		660807	0					
ANR	660925	ExpressionStatement	isPrependPostBlockEmptyLineRequested = false	7122:4:205405:205449	660807	0	True				
ANR	660926	AssignmentExpression	isPrependPostBlockEmptyLineRequested = false		660807	0		=			
ANR	660927	Identifier	isPrependPostBlockEmptyLineRequested		660807	0					
ANR	660928	Identifier	false		660807	1					
ANR	660929	ExpressionStatement	maxAndOr = ( maxAndOr > splitPoint ) ? ( maxAndOr - splitPoint ) : 0	7124:3:205484:205548	660807	6	True				
ANR	660930	AssignmentExpression	maxAndOr = ( maxAndOr > splitPoint ) ? ( maxAndOr - splitPoint ) : 0		660807	0		=			
ANR	660931	Identifier	maxAndOr		660807	0					
ANR	660932	ConditionalExpression	( maxAndOr > splitPoint ) ? ( maxAndOr - splitPoint ) : 0		660807	1					
ANR	660933	Condition	maxAndOr > splitPoint		660807	0					
ANR	660934	RelationalExpression	maxAndOr > splitPoint		660807	0		>			
ANR	660935	Identifier	maxAndOr		660807	0					
ANR	660936	Identifier	splitPoint		660807	1					
ANR	660937	AdditiveExpression	maxAndOr - splitPoint		660807	1		-			
ANR	660938	Identifier	maxAndOr		660807	0					
ANR	660939	Identifier	splitPoint		660807	1					
ANR	660940	PrimaryExpression	0		660807	2					
ANR	660941	ExpressionStatement	maxSemi = ( maxSemi > splitPoint ) ? ( maxSemi - splitPoint ) : 0	7125:3:205553:205614	660807	7	True				
ANR	660942	AssignmentExpression	maxSemi = ( maxSemi > splitPoint ) ? ( maxSemi - splitPoint ) : 0		660807	0		=			
ANR	660943	Identifier	maxSemi		660807	0					
ANR	660944	ConditionalExpression	( maxSemi > splitPoint ) ? ( maxSemi - splitPoint ) : 0		660807	1					
ANR	660945	Condition	maxSemi > splitPoint		660807	0					
ANR	660946	RelationalExpression	maxSemi > splitPoint		660807	0		>			
ANR	660947	Identifier	maxSemi		660807	0					
ANR	660948	Identifier	splitPoint		660807	1					
ANR	660949	AdditiveExpression	maxSemi - splitPoint		660807	1		-			
ANR	660950	Identifier	maxSemi		660807	0					
ANR	660951	Identifier	splitPoint		660807	1					
ANR	660952	PrimaryExpression	0		660807	2					
ANR	660953	ExpressionStatement	maxComma = ( maxComma > splitPoint ) ? ( maxComma - splitPoint ) : 0	7126:3:205619:205683	660807	8	True				
ANR	660954	AssignmentExpression	maxComma = ( maxComma > splitPoint ) ? ( maxComma - splitPoint ) : 0		660807	0		=			
ANR	660955	Identifier	maxComma		660807	0					
ANR	660956	ConditionalExpression	( maxComma > splitPoint ) ? ( maxComma - splitPoint ) : 0		660807	1					
ANR	660957	Condition	maxComma > splitPoint		660807	0					
ANR	660958	RelationalExpression	maxComma > splitPoint		660807	0		>			
ANR	660959	Identifier	maxComma		660807	0					
ANR	660960	Identifier	splitPoint		660807	1					
ANR	660961	AdditiveExpression	maxComma - splitPoint		660807	1		-			
ANR	660962	Identifier	maxComma		660807	0					
ANR	660963	Identifier	splitPoint		660807	1					
ANR	660964	PrimaryExpression	0		660807	2					
ANR	660965	ExpressionStatement	maxParen = ( maxParen > splitPoint ) ? ( maxParen - splitPoint ) : 0	7127:3:205688:205752	660807	9	True				
ANR	660966	AssignmentExpression	maxParen = ( maxParen > splitPoint ) ? ( maxParen - splitPoint ) : 0		660807	0		=			
ANR	660967	Identifier	maxParen		660807	0					
ANR	660968	ConditionalExpression	( maxParen > splitPoint ) ? ( maxParen - splitPoint ) : 0		660807	1					
ANR	660969	Condition	maxParen > splitPoint		660807	0					
ANR	660970	RelationalExpression	maxParen > splitPoint		660807	0		>			
ANR	660971	Identifier	maxParen		660807	0					
ANR	660972	Identifier	splitPoint		660807	1					
ANR	660973	AdditiveExpression	maxParen - splitPoint		660807	1		-			
ANR	660974	Identifier	maxParen		660807	0					
ANR	660975	Identifier	splitPoint		660807	1					
ANR	660976	PrimaryExpression	0		660807	2					
ANR	660977	ExpressionStatement	maxWhiteSpace = ( maxWhiteSpace > splitPoint ) ? ( maxWhiteSpace - splitPoint ) : 0	7128:3:205757:205836	660807	10	True				
ANR	660978	AssignmentExpression	maxWhiteSpace = ( maxWhiteSpace > splitPoint ) ? ( maxWhiteSpace - splitPoint ) : 0		660807	0		=			
ANR	660979	Identifier	maxWhiteSpace		660807	0					
ANR	660980	ConditionalExpression	( maxWhiteSpace > splitPoint ) ? ( maxWhiteSpace - splitPoint ) : 0		660807	1					
ANR	660981	Condition	maxWhiteSpace > splitPoint		660807	0					
ANR	660982	RelationalExpression	maxWhiteSpace > splitPoint		660807	0		>			
ANR	660983	Identifier	maxWhiteSpace		660807	0					
ANR	660984	Identifier	splitPoint		660807	1					
ANR	660985	AdditiveExpression	maxWhiteSpace - splitPoint		660807	1		-			
ANR	660986	Identifier	maxWhiteSpace		660807	0					
ANR	660987	Identifier	splitPoint		660807	1					
ANR	660988	PrimaryExpression	0		660807	2					
ANR	660989	IfStatement	if ( maxSemiPending > 0 )		660807	11					
ANR	660990	Condition	maxSemiPending > 0	7129:7:205845:205862	660807	0	True				
ANR	660991	RelationalExpression	maxSemiPending > 0		660807	0		>			
ANR	660992	Identifier	maxSemiPending		660807	0					
ANR	660993	PrimaryExpression	0		660807	1					
ANR	660994	CompoundStatement		30:3:1242:1242	660807	1					
ANR	660995	ExpressionStatement	maxSemi = ( maxSemiPending > splitPoint ) ? ( maxSemiPending - splitPoint ) : 0	7131:4:205874:205949	660807	0	True				
ANR	660996	AssignmentExpression	maxSemi = ( maxSemiPending > splitPoint ) ? ( maxSemiPending - splitPoint ) : 0		660807	0		=			
ANR	660997	Identifier	maxSemi		660807	0					
ANR	660998	ConditionalExpression	( maxSemiPending > splitPoint ) ? ( maxSemiPending - splitPoint ) : 0		660807	1					
ANR	660999	Condition	maxSemiPending > splitPoint		660807	0					
ANR	661000	RelationalExpression	maxSemiPending > splitPoint		660807	0		>			
ANR	661001	Identifier	maxSemiPending		660807	0					
ANR	661002	Identifier	splitPoint		660807	1					
ANR	661003	AdditiveExpression	maxSemiPending - splitPoint		660807	1		-			
ANR	661004	Identifier	maxSemiPending		660807	0					
ANR	661005	Identifier	splitPoint		660807	1					
ANR	661006	PrimaryExpression	0		660807	2					
ANR	661007	ExpressionStatement	maxSemiPending = 0	7132:4:205955:205973	660807	1	True				
ANR	661008	AssignmentExpression	maxSemiPending = 0		660807	0		=			
ANR	661009	Identifier	maxSemiPending		660807	0					
ANR	661010	PrimaryExpression	0		660807	1					
ANR	661011	IfStatement	if ( maxAndOrPending > 0 )		660807	12					
ANR	661012	Condition	maxAndOrPending > 0	7134:7:205987:206005	660807	0	True				
ANR	661013	RelationalExpression	maxAndOrPending > 0		660807	0		>			
ANR	661014	Identifier	maxAndOrPending		660807	0					
ANR	661015	PrimaryExpression	0		660807	1					
ANR	661016	CompoundStatement		35:3:1385:1385	660807	1					
ANR	661017	ExpressionStatement	maxAndOr = ( maxAndOrPending > splitPoint ) ? ( maxAndOrPending - splitPoint ) : 0	7136:4:206017:206095	660807	0	True				
ANR	661018	AssignmentExpression	maxAndOr = ( maxAndOrPending > splitPoint ) ? ( maxAndOrPending - splitPoint ) : 0		660807	0		=			
ANR	661019	Identifier	maxAndOr		660807	0					
ANR	661020	ConditionalExpression	( maxAndOrPending > splitPoint ) ? ( maxAndOrPending - splitPoint ) : 0		660807	1					
ANR	661021	Condition	maxAndOrPending > splitPoint		660807	0					
ANR	661022	RelationalExpression	maxAndOrPending > splitPoint		660807	0		>			
ANR	661023	Identifier	maxAndOrPending		660807	0					
ANR	661024	Identifier	splitPoint		660807	1					
ANR	661025	AdditiveExpression	maxAndOrPending - splitPoint		660807	1		-			
ANR	661026	Identifier	maxAndOrPending		660807	0					
ANR	661027	Identifier	splitPoint		660807	1					
ANR	661028	PrimaryExpression	0		660807	2					
ANR	661029	ExpressionStatement	maxAndOrPending = 0	7137:4:206101:206120	660807	1	True				
ANR	661030	AssignmentExpression	maxAndOrPending = 0		660807	0		=			
ANR	661031	Identifier	maxAndOrPending		660807	0					
ANR	661032	PrimaryExpression	0		660807	1					
ANR	661033	IfStatement	if ( maxCommaPending > 0 )		660807	13					
ANR	661034	Condition	maxCommaPending > 0	7139:7:206134:206152	660807	0	True				
ANR	661035	RelationalExpression	maxCommaPending > 0		660807	0		>			
ANR	661036	Identifier	maxCommaPending		660807	0					
ANR	661037	PrimaryExpression	0		660807	1					
ANR	661038	CompoundStatement		40:3:1532:1532	660807	1					
ANR	661039	ExpressionStatement	maxComma = ( maxCommaPending > splitPoint ) ? ( maxCommaPending - splitPoint ) : 0	7141:4:206164:206242	660807	0	True				
ANR	661040	AssignmentExpression	maxComma = ( maxCommaPending > splitPoint ) ? ( maxCommaPending - splitPoint ) : 0		660807	0		=			
ANR	661041	Identifier	maxComma		660807	0					
ANR	661042	ConditionalExpression	( maxCommaPending > splitPoint ) ? ( maxCommaPending - splitPoint ) : 0		660807	1					
ANR	661043	Condition	maxCommaPending > splitPoint		660807	0					
ANR	661044	RelationalExpression	maxCommaPending > splitPoint		660807	0		>			
ANR	661045	Identifier	maxCommaPending		660807	0					
ANR	661046	Identifier	splitPoint		660807	1					
ANR	661047	AdditiveExpression	maxCommaPending - splitPoint		660807	1		-			
ANR	661048	Identifier	maxCommaPending		660807	0					
ANR	661049	Identifier	splitPoint		660807	1					
ANR	661050	PrimaryExpression	0		660807	2					
ANR	661051	ExpressionStatement	maxCommaPending = 0	7142:4:206248:206267	660807	1	True				
ANR	661052	AssignmentExpression	maxCommaPending = 0		660807	0		=			
ANR	661053	Identifier	maxCommaPending		660807	0					
ANR	661054	PrimaryExpression	0		660807	1					
ANR	661055	IfStatement	if ( maxParenPending > 0 )		660807	14					
ANR	661056	Condition	maxParenPending > 0	7144:7:206281:206299	660807	0	True				
ANR	661057	RelationalExpression	maxParenPending > 0		660807	0		>			
ANR	661058	Identifier	maxParenPending		660807	0					
ANR	661059	PrimaryExpression	0		660807	1					
ANR	661060	CompoundStatement		45:3:1679:1679	660807	1					
ANR	661061	ExpressionStatement	maxParen = ( maxParenPending > splitPoint ) ? ( maxParenPending - splitPoint ) : 0	7146:4:206311:206389	660807	0	True				
ANR	661062	AssignmentExpression	maxParen = ( maxParenPending > splitPoint ) ? ( maxParenPending - splitPoint ) : 0		660807	0		=			
ANR	661063	Identifier	maxParen		660807	0					
ANR	661064	ConditionalExpression	( maxParenPending > splitPoint ) ? ( maxParenPending - splitPoint ) : 0		660807	1					
ANR	661065	Condition	maxParenPending > splitPoint		660807	0					
ANR	661066	RelationalExpression	maxParenPending > splitPoint		660807	0		>			
ANR	661067	Identifier	maxParenPending		660807	0					
ANR	661068	Identifier	splitPoint		660807	1					
ANR	661069	AdditiveExpression	maxParenPending - splitPoint		660807	1		-			
ANR	661070	Identifier	maxParenPending		660807	0					
ANR	661071	Identifier	splitPoint		660807	1					
ANR	661072	PrimaryExpression	0		660807	2					
ANR	661073	ExpressionStatement	maxParenPending = 0	7147:4:206395:206414	660807	1	True				
ANR	661074	AssignmentExpression	maxParenPending = 0		660807	0		=			
ANR	661075	Identifier	maxParenPending		660807	0					
ANR	661076	PrimaryExpression	0		660807	1					
ANR	661077	IfStatement	if ( maxWhiteSpacePending > 0 )		660807	15					
ANR	661078	Condition	maxWhiteSpacePending > 0	7149:7:206428:206451	660807	0	True				
ANR	661079	RelationalExpression	maxWhiteSpacePending > 0		660807	0		>			
ANR	661080	Identifier	maxWhiteSpacePending		660807	0					
ANR	661081	PrimaryExpression	0		660807	1					
ANR	661082	CompoundStatement		50:3:1831:1831	660807	1					
ANR	661083	ExpressionStatement	maxWhiteSpace = ( maxWhiteSpacePending > splitPoint ) ? ( maxWhiteSpacePending - splitPoint ) : 0	7151:4:206463:206556	660807	0	True				
ANR	661084	AssignmentExpression	maxWhiteSpace = ( maxWhiteSpacePending > splitPoint ) ? ( maxWhiteSpacePending - splitPoint ) : 0		660807	0		=			
ANR	661085	Identifier	maxWhiteSpace		660807	0					
ANR	661086	ConditionalExpression	( maxWhiteSpacePending > splitPoint ) ? ( maxWhiteSpacePending - splitPoint ) : 0		660807	1					
ANR	661087	Condition	maxWhiteSpacePending > splitPoint		660807	0					
ANR	661088	RelationalExpression	maxWhiteSpacePending > splitPoint		660807	0		>			
ANR	661089	Identifier	maxWhiteSpacePending		660807	0					
ANR	661090	Identifier	splitPoint		660807	1					
ANR	661091	AdditiveExpression	maxWhiteSpacePending - splitPoint		660807	1		-			
ANR	661092	Identifier	maxWhiteSpacePending		660807	0					
ANR	661093	Identifier	splitPoint		660807	1					
ANR	661094	PrimaryExpression	0		660807	2					
ANR	661095	ExpressionStatement	maxWhiteSpacePending = 0	7152:4:206562:206586	660807	1	True				
ANR	661096	AssignmentExpression	maxWhiteSpacePending = 0		660807	0		=			
ANR	661097	Identifier	maxWhiteSpacePending		660807	0					
ANR	661098	PrimaryExpression	0		660807	1					
ANR	661099	IdentifierDeclStatement	"size_t firstText = formattedLine . find_first_not_of ( "" \\t"" ) ;"	7155:3:206638:206695	660807	16	True				
ANR	661100	IdentifierDecl	"firstText = formattedLine . find_first_not_of ( "" \\t"" )"		660807	0					
ANR	661101	IdentifierDeclType	size_t		660807	0					
ANR	661102	Identifier	firstText		660807	1					
ANR	661103	AssignmentExpression	"firstText = formattedLine . find_first_not_of ( "" \\t"" )"		660807	2		=			
ANR	661104	Identifier	firstText		660807	0					
ANR	661105	CallExpression	"formattedLine . find_first_not_of ( "" \\t"" )"		660807	1					
ANR	661106	Callee	formattedLine . find_first_not_of		660807	0					
ANR	661107	MemberAccess	formattedLine . find_first_not_of		660807	0					
ANR	661108	Identifier	formattedLine		660807	0					
ANR	661109	Identifier	find_first_not_of		660807	1					
ANR	661110	ArgumentList	""" \\t"""		660807	1					
ANR	661111	Argument	""" \\t"""		660807	0					
ANR	661112	PrimaryExpression	""" \\t"""		660807	0					
ANR	661113	IfStatement	if ( firstText == string :: npos && formattedLine . length ( ) > 0 )		660807	17					
ANR	661114	Condition	firstText == string :: npos && formattedLine . length ( ) > 0	7156:7:206704:206758	660807	0	True				
ANR	661115	AndExpression	firstText == string :: npos && formattedLine . length ( ) > 0		660807	0		&&			
ANR	661116	EqualityExpression	firstText == string :: npos		660807	0		==			
ANR	661117	Identifier	firstText		660807	0					
ANR	661118	Identifier	string :: npos		660807	1					
ANR	661119	RelationalExpression	formattedLine . length ( ) > 0		660807	1		>			
ANR	661120	CallExpression	formattedLine . length ( )		660807	0					
ANR	661121	Callee	formattedLine . length		660807	0					
ANR	661122	MemberAccess	formattedLine . length		660807	0					
ANR	661123	Identifier	formattedLine		660807	0					
ANR	661124	Identifier	length		660807	1					
ANR	661125	ArgumentList			660807	1					
ANR	661126	PrimaryExpression	0		660807	1					
ANR	661127	CompoundStatement		57:3:2138:2138	660807	1					
ANR	661128	ExpressionStatement	formattedLine . erase ( )	7158:4:206770:206791	660807	0	True				
ANR	661129	CallExpression	formattedLine . erase ( )		660807	0					
ANR	661130	Callee	formattedLine . erase		660807	0					
ANR	661131	MemberAccess	formattedLine . erase		660807	0					
ANR	661132	Identifier	formattedLine		660807	0					
ANR	661133	Identifier	erase		660807	1					
ANR	661134	ArgumentList			660807	1					
ANR	661135	ExpressionStatement	clearFormattedLineSplitPoints ( )	7159:4:206797:206828	660807	1	True				
ANR	661136	CallExpression	clearFormattedLineSplitPoints ( )		660807	0					
ANR	661137	Callee	clearFormattedLineSplitPoints		660807	0					
ANR	661138	Identifier	clearFormattedLineSplitPoints		660807	0					
ANR	661139	ArgumentList			660807	1					
ANR	661140	IfStatement	if ( isWhiteSpace ( currentChar ) )		660807	2					
ANR	661141	Condition	isWhiteSpace ( currentChar )	7160:8:206838:206862	660807	0	True				
ANR	661142	CallExpression	isWhiteSpace ( currentChar )		660807	0					
ANR	661143	Callee	isWhiteSpace		660807	0					
ANR	661144	Identifier	isWhiteSpace		660807	0					
ANR	661145	ArgumentList	currentChar		660807	1					
ANR	661146	Argument	currentChar		660807	0					
ANR	661147	Identifier	currentChar		660807	0					
ANR	661148	ForStatement	for ( size_t i = charNum + 1 ; i < currentLine . length ( ) && isWhiteSpace ( currentLine [ i ] ) ; i ++ )		660807	1					
ANR	661149	ForInit	size_t i = charNum + 1 ;	7161:10:206875:206897	660807	0	True				
ANR	661150	IdentifierDeclStatement	size_t i = charNum + 1 ;		660807	0					
ANR	661151	IdentifierDecl	i = charNum + 1		660807	0					
ANR	661152	IdentifierDeclType	size_t		660807	0					
ANR	661153	Identifier	i		660807	1					
ANR	661154	AssignmentExpression	i = charNum + 1		660807	2		=			
ANR	661155	Identifier	i		660807	0					
ANR	661156	AdditiveExpression	charNum + 1		660807	1		+			
ANR	661157	Identifier	charNum		660807	0					
ANR	661158	PrimaryExpression	1		660807	1					
ANR	661159	Condition	i < currentLine . length ( ) && isWhiteSpace ( currentLine [ i ] )	7161:34:206899:206954	660807	1	True				
ANR	661160	AndExpression	i < currentLine . length ( ) && isWhiteSpace ( currentLine [ i ] )		660807	0		&&			
ANR	661161	RelationalExpression	i < currentLine . length ( )		660807	0		<			
ANR	661162	Identifier	i		660807	0					
ANR	661163	CallExpression	currentLine . length ( )		660807	1					
ANR	661164	Callee	currentLine . length		660807	0					
ANR	661165	MemberAccess	currentLine . length		660807	0					
ANR	661166	Identifier	currentLine		660807	0					
ANR	661167	Identifier	length		660807	1					
ANR	661168	ArgumentList			660807	1					
ANR	661169	CallExpression	isWhiteSpace ( currentLine [ i ] )		660807	1					
ANR	661170	Callee	isWhiteSpace		660807	0					
ANR	661171	Identifier	isWhiteSpace		660807	0					
ANR	661172	ArgumentList	currentLine [ i ]		660807	1					
ANR	661173	Argument	currentLine [ i ]		660807	0					
ANR	661174	ArrayIndexing	currentLine [ i ]		660807	0					
ANR	661175	Identifier	currentLine		660807	0					
ANR	661176	Identifier	i		660807	1					
ANR	661177	PostIncDecOperationExpression	i ++	7161:92:206957:206959	660807	2	True				
ANR	661178	Identifier	i		660807	0					
ANR	661179	IncDec	++		660807	1					
ANR	661180	ExpressionStatement	goForward ( 1 )	7162:6:206968:206980	660807	3	True				
ANR	661181	CallExpression	goForward ( 1 )		660807	0					
ANR	661182	Callee	goForward		660807	0					
ANR	661183	Identifier	goForward		660807	0					
ANR	661184	ArgumentList	1		660807	1					
ANR	661185	Argument	1		660807	0					
ANR	661186	PrimaryExpression	1		660807	0					
ANR	661187	ElseStatement	else		660807	0					
ANR	661188	IfStatement	if ( firstText > 0 )		660807	0					
ANR	661189	Condition	firstText > 0	7164:12:206999:207011	660807	0	True				
ANR	661190	RelationalExpression	firstText > 0		660807	0		>			
ANR	661191	Identifier	firstText		660807	0					
ANR	661192	PrimaryExpression	0		660807	1					
ANR	661193	CompoundStatement		65:3:2391:2391	660807	1					
ANR	661194	ExpressionStatement	"formattedLine . erase ( 0 , firstText )"	7166:4:207023:207056	660807	0	True				
ANR	661195	CallExpression	"formattedLine . erase ( 0 , firstText )"		660807	0					
ANR	661196	Callee	formattedLine . erase		660807	0					
ANR	661197	MemberAccess	formattedLine . erase		660807	0					
ANR	661198	Identifier	formattedLine		660807	0					
ANR	661199	Identifier	erase		660807	1					
ANR	661200	ArgumentList	0		660807	1					
ANR	661201	Argument	0		660807	0					
ANR	661202	PrimaryExpression	0		660807	0					
ANR	661203	Argument	firstText		660807	1					
ANR	661204	Identifier	firstText		660807	0					
ANR	661205	ExpressionStatement	maxSemi = ( maxSemi > firstText ) ? ( maxSemi - firstText ) : 0	7167:4:207062:207121	660807	1	True				
ANR	661206	AssignmentExpression	maxSemi = ( maxSemi > firstText ) ? ( maxSemi - firstText ) : 0		660807	0		=			
ANR	661207	Identifier	maxSemi		660807	0					
ANR	661208	ConditionalExpression	( maxSemi > firstText ) ? ( maxSemi - firstText ) : 0		660807	1					
ANR	661209	Condition	maxSemi > firstText		660807	0					
ANR	661210	RelationalExpression	maxSemi > firstText		660807	0		>			
ANR	661211	Identifier	maxSemi		660807	0					
ANR	661212	Identifier	firstText		660807	1					
ANR	661213	AdditiveExpression	maxSemi - firstText		660807	1		-			
ANR	661214	Identifier	maxSemi		660807	0					
ANR	661215	Identifier	firstText		660807	1					
ANR	661216	PrimaryExpression	0		660807	2					
ANR	661217	ExpressionStatement	maxAndOr = ( maxAndOr > firstText ) ? ( maxAndOr - firstText ) : 0	7168:4:207127:207189	660807	2	True				
ANR	661218	AssignmentExpression	maxAndOr = ( maxAndOr > firstText ) ? ( maxAndOr - firstText ) : 0		660807	0		=			
ANR	661219	Identifier	maxAndOr		660807	0					
ANR	661220	ConditionalExpression	( maxAndOr > firstText ) ? ( maxAndOr - firstText ) : 0		660807	1					
ANR	661221	Condition	maxAndOr > firstText		660807	0					
ANR	661222	RelationalExpression	maxAndOr > firstText		660807	0		>			
ANR	661223	Identifier	maxAndOr		660807	0					
ANR	661224	Identifier	firstText		660807	1					
ANR	661225	AdditiveExpression	maxAndOr - firstText		660807	1		-			
ANR	661226	Identifier	maxAndOr		660807	0					
ANR	661227	Identifier	firstText		660807	1					
ANR	661228	PrimaryExpression	0		660807	2					
ANR	661229	ExpressionStatement	maxComma = ( maxComma > firstText ) ? ( maxComma - firstText ) : 0	7169:4:207195:207257	660807	3	True				
ANR	661230	AssignmentExpression	maxComma = ( maxComma > firstText ) ? ( maxComma - firstText ) : 0		660807	0		=			
ANR	661231	Identifier	maxComma		660807	0					
ANR	661232	ConditionalExpression	( maxComma > firstText ) ? ( maxComma - firstText ) : 0		660807	1					
ANR	661233	Condition	maxComma > firstText		660807	0					
ANR	661234	RelationalExpression	maxComma > firstText		660807	0		>			
ANR	661235	Identifier	maxComma		660807	0					
ANR	661236	Identifier	firstText		660807	1					
ANR	661237	AdditiveExpression	maxComma - firstText		660807	1		-			
ANR	661238	Identifier	maxComma		660807	0					
ANR	661239	Identifier	firstText		660807	1					
ANR	661240	PrimaryExpression	0		660807	2					
ANR	661241	ExpressionStatement	maxParen = ( maxParen > firstText ) ? ( maxParen - firstText ) : 0	7170:4:207263:207325	660807	4	True				
ANR	661242	AssignmentExpression	maxParen = ( maxParen > firstText ) ? ( maxParen - firstText ) : 0		660807	0		=			
ANR	661243	Identifier	maxParen		660807	0					
ANR	661244	ConditionalExpression	( maxParen > firstText ) ? ( maxParen - firstText ) : 0		660807	1					
ANR	661245	Condition	maxParen > firstText		660807	0					
ANR	661246	RelationalExpression	maxParen > firstText		660807	0		>			
ANR	661247	Identifier	maxParen		660807	0					
ANR	661248	Identifier	firstText		660807	1					
ANR	661249	AdditiveExpression	maxParen - firstText		660807	1		-			
ANR	661250	Identifier	maxParen		660807	0					
ANR	661251	Identifier	firstText		660807	1					
ANR	661252	PrimaryExpression	0		660807	2					
ANR	661253	ExpressionStatement	maxWhiteSpace = ( maxWhiteSpace > firstText ) ? ( maxWhiteSpace - firstText ) : 0	7171:4:207331:207408	660807	5	True				
ANR	661254	AssignmentExpression	maxWhiteSpace = ( maxWhiteSpace > firstText ) ? ( maxWhiteSpace - firstText ) : 0		660807	0		=			
ANR	661255	Identifier	maxWhiteSpace		660807	0					
ANR	661256	ConditionalExpression	( maxWhiteSpace > firstText ) ? ( maxWhiteSpace - firstText ) : 0		660807	1					
ANR	661257	Condition	maxWhiteSpace > firstText		660807	0					
ANR	661258	RelationalExpression	maxWhiteSpace > firstText		660807	0		>			
ANR	661259	Identifier	maxWhiteSpace		660807	0					
ANR	661260	Identifier	firstText		660807	1					
ANR	661261	AdditiveExpression	maxWhiteSpace - firstText		660807	1		-			
ANR	661262	Identifier	maxWhiteSpace		660807	0					
ANR	661263	Identifier	firstText		660807	1					
ANR	661264	PrimaryExpression	0		660807	2					
ANR	661265	IfStatement	if ( formattedLineCommentNum != string :: npos )		660807	18					
ANR	661266	Condition	formattedLineCommentNum != string :: npos	7174:7:207458:207496	660807	0	True				
ANR	661267	EqualityExpression	formattedLineCommentNum != string :: npos		660807	0		!=			
ANR	661268	Identifier	formattedLineCommentNum		660807	0					
ANR	661269	Identifier	string :: npos		660807	1					
ANR	661270	CompoundStatement		75:3:2876:2876	660807	1					
ANR	661271	ExpressionStatement	"formattedLineCommentNum = formattedLine . find ( ""//"" )"	7176:4:207508:207558	660807	0	True				
ANR	661272	AssignmentExpression	"formattedLineCommentNum = formattedLine . find ( ""//"" )"		660807	0		=			
ANR	661273	Identifier	formattedLineCommentNum		660807	0					
ANR	661274	CallExpression	"formattedLine . find ( ""//"" )"		660807	1					
ANR	661275	Callee	formattedLine . find		660807	0					
ANR	661276	MemberAccess	formattedLine . find		660807	0					
ANR	661277	Identifier	formattedLine		660807	0					
ANR	661278	Identifier	find		660807	1					
ANR	661279	ArgumentList	"""//"""		660807	1					
ANR	661280	Argument	"""//"""		660807	0					
ANR	661281	PrimaryExpression	"""//"""		660807	0					
ANR	661282	IfStatement	if ( formattedLineCommentNum == string :: npos )		660807	1					
ANR	661283	Condition	formattedLineCommentNum == string :: npos	7177:8:207568:207606	660807	0	True				
ANR	661284	EqualityExpression	formattedLineCommentNum == string :: npos		660807	0		==			
ANR	661285	Identifier	formattedLineCommentNum		660807	0					
ANR	661286	Identifier	string :: npos		660807	1					
ANR	661287	ExpressionStatement	"formattedLineCommentNum = formattedLine . find ( ""/*"" )"	7178:5:207614:207664	660807	1	True				
ANR	661288	AssignmentExpression	"formattedLineCommentNum = formattedLine . find ( ""/*"" )"		660807	0		=			
ANR	661289	Identifier	formattedLineCommentNum		660807	0					
ANR	661290	CallExpression	"formattedLine . find ( ""/*"" )"		660807	1					
ANR	661291	Callee	formattedLine . find		660807	0					
ANR	661292	MemberAccess	formattedLine . find		660807	0					
ANR	661293	Identifier	formattedLine		660807	0					
ANR	661294	Identifier	find		660807	1					
ANR	661295	ArgumentList	"""/*"""		660807	1					
ANR	661296	Argument	"""/*"""		660807	0					
ANR	661297	PrimaryExpression	"""/*"""		660807	0					
ANR	661298	ReturnType	void		660807	1					
ANR	661299	Identifier	ASFormatter :: testForTimeToSplitFormattedLine		660807	2					
ANR	661300	ParameterList			660807	3					
ANR	661301	CFGEntryNode	ENTRY		660807		True				
ANR	661302	CFGExitNode	EXIT		660807		True				
ANR	661303	Symbol	maxSemiPending		660807						
ANR	661304	Symbol	maxCodeLength		660807						
ANR	661305	Symbol	string :: npos		660807						
ANR	661306	Symbol	maxCommaPending		660807						
ANR	661307	Symbol	isPrependPostBlockEmptyLineRequested		660807						
ANR	661308	Symbol	isWhiteSpace		660807						
ANR	661309	Symbol	firstText		660807						
ANR	661310	Symbol	* currentLine		660807						
ANR	661311	Symbol	formattedLine . find		660807						
ANR	661312	Symbol	maxComma		660807						
ANR	661313	Symbol	charNum		660807						
ANR	661314	Symbol	ASBeautifier :: getNextWord		660807						
ANR	661315	Symbol	formattedLine . find_first_not_of		660807						
ANR	661316	Symbol	formattedLine . substr		660807						
ANR	661317	Symbol	currentLine		660807						
ANR	661318	Symbol	maxWhiteSpacePending		660807						
ANR	661319	Symbol	formattedLineCommentNum		660807						
ANR	661320	Symbol	currentChar		660807						
ANR	661321	Symbol	isAppendPostBlockEmptyLineRequested		660807						
ANR	661322	Symbol	false		660807						
ANR	661323	Symbol	i		660807						
ANR	661324	Symbol	findFormattedLineSplitPoint		660807						
ANR	661325	Symbol	formattedLine		660807						
ANR	661326	Symbol	maxParen		660807						
ANR	661327	Symbol	* i		660807						
ANR	661328	Symbol	isLineReady		660807						
ANR	661329	Symbol	nextWord		660807						
ANR	661330	Symbol	currentLine . length		660807						
ANR	661331	Symbol	formattedLine . length		660807						
ANR	661332	Symbol	splitLine		660807						
ANR	661333	Symbol	true		660807						
ANR	661334	Symbol	maxParenPending		660807						
ANR	661335	Symbol	maxWhiteSpace		660807						
ANR	661336	Symbol	maxSemi		660807						
ANR	661337	Symbol	splitPoint		660807						
ANR	661338	Symbol	maxAndOr		660807						
ANR	661339	Symbol	maxAndOrPending		660807						
ANR	661340	Function	ASFormatter :: findFormattedLineSplitPoint	7184:0:207681:209631							
ANR	661341	FunctionDef	ASFormatter :: findFormattedLineSplitPoint ()		661340	0					
ANR	661342	CompoundStatement		7185:0:207737:209631	661340	0					
ANR	661343	ExpressionStatement	assert ( maxCodeLength != string :: npos )	7186:1:207740:207777	661340	0	True				
ANR	661344	CallExpression	assert ( maxCodeLength != string :: npos )		661340	0					
ANR	661345	Callee	assert		661340	0					
ANR	661346	Identifier	assert		661340	0					
ANR	661347	ArgumentList	maxCodeLength != string :: npos		661340	1					
ANR	661348	Argument	maxCodeLength != string :: npos		661340	0					
ANR	661349	EqualityExpression	maxCodeLength != string :: npos		661340	0		!=			
ANR	661350	Identifier	maxCodeLength		661340	0					
ANR	661351	Identifier	string :: npos		661340	1					
ANR	661352	IdentifierDeclStatement	size_t minCodeLength = 10 ;	7188:1:207809:207834	661340	1	True				
ANR	661353	IdentifierDecl	minCodeLength = 10		661340	0					
ANR	661354	IdentifierDeclType	size_t		661340	0					
ANR	661355	Identifier	minCodeLength		661340	1					
ANR	661356	AssignmentExpression	minCodeLength = 10		661340	2		=			
ANR	661357	Identifier	minCodeLength		661340	0					
ANR	661358	PrimaryExpression	10		661340	1					
ANR	661359	IdentifierDeclStatement	size_t splitPoint = 0 ;	7189:1:207837:207858	661340	2	True				
ANR	661360	IdentifierDecl	splitPoint = 0		661340	0					
ANR	661361	IdentifierDeclType	size_t		661340	0					
ANR	661362	Identifier	splitPoint		661340	1					
ANR	661363	AssignmentExpression	splitPoint = 0		661340	2		=			
ANR	661364	Identifier	splitPoint		661340	0					
ANR	661365	PrimaryExpression	0		661340	1					
ANR	661366	ExpressionStatement	splitPoint = maxSemi	7190:1:207861:207881	661340	3	True				
ANR	661367	AssignmentExpression	splitPoint = maxSemi		661340	0		=			
ANR	661368	Identifier	splitPoint		661340	0					
ANR	661369	Identifier	maxSemi		661340	1					
ANR	661370	IfStatement	if ( maxAndOr >= minCodeLength )		661340	4					
ANR	661371	Condition	maxAndOr >= minCodeLength	7191:5:207888:207912	661340	0	True				
ANR	661372	RelationalExpression	maxAndOr >= minCodeLength		661340	0		>=			
ANR	661373	Identifier	maxAndOr		661340	0					
ANR	661374	Identifier	minCodeLength		661340	1					
ANR	661375	ExpressionStatement	splitPoint = maxAndOr	7192:2:207917:207938	661340	1	True				
ANR	661376	AssignmentExpression	splitPoint = maxAndOr		661340	0		=			
ANR	661377	Identifier	splitPoint		661340	0					
ANR	661378	Identifier	maxAndOr		661340	1					
ANR	661379	IfStatement	if ( splitPoint < minCodeLength )		661340	5					
ANR	661380	Condition	splitPoint < minCodeLength	7193:5:207945:207970	661340	0	True				
ANR	661381	RelationalExpression	splitPoint < minCodeLength		661340	0		<			
ANR	661382	Identifier	splitPoint		661340	0					
ANR	661383	Identifier	minCodeLength		661340	1					
ANR	661384	CompoundStatement		10:1:236:236	661340	1					
ANR	661385	ExpressionStatement	splitPoint = maxWhiteSpace	7195:2:207978:208004	661340	0	True				
ANR	661386	AssignmentExpression	splitPoint = maxWhiteSpace		661340	0		=			
ANR	661387	Identifier	splitPoint		661340	0					
ANR	661388	Identifier	maxWhiteSpace		661340	1					
ANR	661389	IfStatement	if ( maxParen > splitPoint || maxParen >= maxCodeLength * .7 )		661340	1					
ANR	661390	Condition	maxParen > splitPoint || maxParen >= maxCodeLength * .7	7197:6:208059:208123	661340	0	True				
ANR	661391	OrExpression	maxParen > splitPoint || maxParen >= maxCodeLength * .7		661340	0		||			
ANR	661392	RelationalExpression	maxParen > splitPoint		661340	0		>			
ANR	661393	Identifier	maxParen		661340	0					
ANR	661394	Identifier	splitPoint		661340	1					
ANR	661395	RelationalExpression	maxParen >= maxCodeLength * .7		661340	1		>=			
ANR	661396	Identifier	maxParen		661340	0					
ANR	661397	MultiplicativeExpression	maxCodeLength * .7		661340	1		*			
ANR	661398	Identifier	maxCodeLength		661340	0					
ANR	661399	PrimaryExpression	.7		661340	1					
ANR	661400	ExpressionStatement	splitPoint = maxParen	7199:3:208129:208150	661340	1	True				
ANR	661401	AssignmentExpression	splitPoint = maxParen		661340	0		=			
ANR	661402	Identifier	splitPoint		661340	0					
ANR	661403	Identifier	maxParen		661340	1					
ANR	661404	IfStatement	if ( maxComma > splitPoint || maxComma >= maxCodeLength * .3 )		661340	2					
ANR	661405	Condition	maxComma > splitPoint || maxComma >= maxCodeLength * .3	7202:6:208269:208333	661340	0	True				
ANR	661406	OrExpression	maxComma > splitPoint || maxComma >= maxCodeLength * .3		661340	0		||			
ANR	661407	RelationalExpression	maxComma > splitPoint		661340	0		>			
ANR	661408	Identifier	maxComma		661340	0					
ANR	661409	Identifier	splitPoint		661340	1					
ANR	661410	RelationalExpression	maxComma >= maxCodeLength * .3		661340	1		>=			
ANR	661411	Identifier	maxComma		661340	0					
ANR	661412	MultiplicativeExpression	maxCodeLength * .3		661340	1		*			
ANR	661413	Identifier	maxCodeLength		661340	0					
ANR	661414	PrimaryExpression	.3		661340	1					
ANR	661415	ExpressionStatement	splitPoint = maxComma	7204:3:208339:208360	661340	1	True				
ANR	661416	AssignmentExpression	splitPoint = maxComma		661340	0		=			
ANR	661417	Identifier	splitPoint		661340	0					
ANR	661418	Identifier	maxComma		661340	1					
ANR	661419	IfStatement	if ( splitPoint < minCodeLength )		661340	6					
ANR	661420	Condition	splitPoint < minCodeLength	7207:5:208427:208452	661340	0	True				
ANR	661421	RelationalExpression	splitPoint < minCodeLength		661340	0		<			
ANR	661422	Identifier	splitPoint		661340	0					
ANR	661423	Identifier	minCodeLength		661340	1					
ANR	661424	CompoundStatement		24:1:718:718	661340	1					
ANR	661425	ExpressionStatement	splitPoint = string :: npos	7209:2:208460:208485	661340	0	True				
ANR	661426	AssignmentExpression	splitPoint = string :: npos		661340	0		=			
ANR	661427	Identifier	splitPoint		661340	0					
ANR	661428	Identifier	string :: npos		661340	1					
ANR	661429	IfStatement	if ( maxSemiPending > 0 && maxSemiPending < splitPoint )		661340	1					
ANR	661430	Condition	maxSemiPending > 0 && maxSemiPending < splitPoint	7210:6:208493:208541	661340	0	True				
ANR	661431	AndExpression	maxSemiPending > 0 && maxSemiPending < splitPoint		661340	0		&&			
ANR	661432	RelationalExpression	maxSemiPending > 0		661340	0		>			
ANR	661433	Identifier	maxSemiPending		661340	0					
ANR	661434	PrimaryExpression	0		661340	1					
ANR	661435	RelationalExpression	maxSemiPending < splitPoint		661340	1		<			
ANR	661436	Identifier	maxSemiPending		661340	0					
ANR	661437	Identifier	splitPoint		661340	1					
ANR	661438	ExpressionStatement	splitPoint = maxSemiPending	7211:3:208547:208574	661340	1	True				
ANR	661439	AssignmentExpression	splitPoint = maxSemiPending		661340	0		=			
ANR	661440	Identifier	splitPoint		661340	0					
ANR	661441	Identifier	maxSemiPending		661340	1					
ANR	661442	IfStatement	if ( maxAndOrPending > 0 && maxAndOrPending < splitPoint )		661340	2					
ANR	661443	Condition	maxAndOrPending > 0 && maxAndOrPending < splitPoint	7212:6:208582:208632	661340	0	True				
ANR	661444	AndExpression	maxAndOrPending > 0 && maxAndOrPending < splitPoint		661340	0		&&			
ANR	661445	RelationalExpression	maxAndOrPending > 0		661340	0		>			
ANR	661446	Identifier	maxAndOrPending		661340	0					
ANR	661447	PrimaryExpression	0		661340	1					
ANR	661448	RelationalExpression	maxAndOrPending < splitPoint		661340	1		<			
ANR	661449	Identifier	maxAndOrPending		661340	0					
ANR	661450	Identifier	splitPoint		661340	1					
ANR	661451	ExpressionStatement	splitPoint = maxAndOrPending	7213:3:208638:208666	661340	1	True				
ANR	661452	AssignmentExpression	splitPoint = maxAndOrPending		661340	0		=			
ANR	661453	Identifier	splitPoint		661340	0					
ANR	661454	Identifier	maxAndOrPending		661340	1					
ANR	661455	IfStatement	if ( maxCommaPending > 0 && maxCommaPending < splitPoint )		661340	3					
ANR	661456	Condition	maxCommaPending > 0 && maxCommaPending < splitPoint	7214:6:208674:208724	661340	0	True				
ANR	661457	AndExpression	maxCommaPending > 0 && maxCommaPending < splitPoint		661340	0		&&			
ANR	661458	RelationalExpression	maxCommaPending > 0		661340	0		>			
ANR	661459	Identifier	maxCommaPending		661340	0					
ANR	661460	PrimaryExpression	0		661340	1					
ANR	661461	RelationalExpression	maxCommaPending < splitPoint		661340	1		<			
ANR	661462	Identifier	maxCommaPending		661340	0					
ANR	661463	Identifier	splitPoint		661340	1					
ANR	661464	ExpressionStatement	splitPoint = maxCommaPending	7215:3:208730:208758	661340	1	True				
ANR	661465	AssignmentExpression	splitPoint = maxCommaPending		661340	0		=			
ANR	661466	Identifier	splitPoint		661340	0					
ANR	661467	Identifier	maxCommaPending		661340	1					
ANR	661468	IfStatement	if ( maxParenPending > 0 && maxParenPending < splitPoint )		661340	4					
ANR	661469	Condition	maxParenPending > 0 && maxParenPending < splitPoint	7216:6:208766:208816	661340	0	True				
ANR	661470	AndExpression	maxParenPending > 0 && maxParenPending < splitPoint		661340	0		&&			
ANR	661471	RelationalExpression	maxParenPending > 0		661340	0		>			
ANR	661472	Identifier	maxParenPending		661340	0					
ANR	661473	PrimaryExpression	0		661340	1					
ANR	661474	RelationalExpression	maxParenPending < splitPoint		661340	1		<			
ANR	661475	Identifier	maxParenPending		661340	0					
ANR	661476	Identifier	splitPoint		661340	1					
ANR	661477	ExpressionStatement	splitPoint = maxParenPending	7217:3:208822:208850	661340	1	True				
ANR	661478	AssignmentExpression	splitPoint = maxParenPending		661340	0		=			
ANR	661479	Identifier	splitPoint		661340	0					
ANR	661480	Identifier	maxParenPending		661340	1					
ANR	661481	IfStatement	if ( maxWhiteSpacePending > 0 && maxWhiteSpacePending < splitPoint )		661340	5					
ANR	661482	Condition	maxWhiteSpacePending > 0 && maxWhiteSpacePending < splitPoint	7218:6:208858:208918	661340	0	True				
ANR	661483	AndExpression	maxWhiteSpacePending > 0 && maxWhiteSpacePending < splitPoint		661340	0		&&			
ANR	661484	RelationalExpression	maxWhiteSpacePending > 0		661340	0		>			
ANR	661485	Identifier	maxWhiteSpacePending		661340	0					
ANR	661486	PrimaryExpression	0		661340	1					
ANR	661487	RelationalExpression	maxWhiteSpacePending < splitPoint		661340	1		<			
ANR	661488	Identifier	maxWhiteSpacePending		661340	0					
ANR	661489	Identifier	splitPoint		661340	1					
ANR	661490	ExpressionStatement	splitPoint = maxWhiteSpacePending	7219:3:208924:208957	661340	1	True				
ANR	661491	AssignmentExpression	splitPoint = maxWhiteSpacePending		661340	0		=			
ANR	661492	Identifier	splitPoint		661340	0					
ANR	661493	Identifier	maxWhiteSpacePending		661340	1					
ANR	661494	IfStatement	if ( splitPoint == string :: npos )		661340	6					
ANR	661495	Condition	splitPoint == string :: npos	7220:6:208965:208990	661340	0	True				
ANR	661496	EqualityExpression	splitPoint == string :: npos		661340	0		==			
ANR	661497	Identifier	splitPoint		661340	0					
ANR	661498	Identifier	string :: npos		661340	1					
ANR	661499	ExpressionStatement	splitPoint = 0	7221:3:208996:209010	661340	1	True				
ANR	661500	AssignmentExpression	splitPoint = 0		661340	0		=			
ANR	661501	Identifier	splitPoint		661340	0					
ANR	661502	PrimaryExpression	0		661340	1					
ANR	661503	ElseStatement	else		661340	0					
ANR	661504	IfStatement	if ( formattedLine . length ( ) - splitPoint > maxCodeLength )		661340	0					
ANR	661505	Condition	formattedLine . length ( ) - splitPoint > maxCodeLength	7224:10:209071:209121	661340	0	True				
ANR	661506	RelationalExpression	formattedLine . length ( ) - splitPoint > maxCodeLength		661340	0		>			
ANR	661507	AdditiveExpression	formattedLine . length ( ) - splitPoint		661340	0		-			
ANR	661508	CallExpression	formattedLine . length ( )		661340	0					
ANR	661509	Callee	formattedLine . length		661340	0					
ANR	661510	MemberAccess	formattedLine . length		661340	0					
ANR	661511	Identifier	formattedLine		661340	0					
ANR	661512	Identifier	length		661340	1					
ANR	661513	ArgumentList			661340	1					
ANR	661514	Identifier	splitPoint		661340	1					
ANR	661515	Identifier	maxCodeLength		661340	1					
ANR	661516	CompoundStatement		43:2:1446:1463	661340	1					
ANR	661517	IdentifierDeclStatement	size_t newCharNum ;	7227:2:209184:209201	661340	0	True				
ANR	661518	IdentifierDecl	newCharNum		661340	0					
ANR	661519	IdentifierDeclType	size_t		661340	0					
ANR	661520	Identifier	newCharNum		661340	1					
ANR	661521	IfStatement	"if ( isCharPotentialHeader ( currentLine , charNum ) )"		661340	1					
ANR	661522	Condition	"isCharPotentialHeader ( currentLine , charNum )"	7228:6:209209:209251	661340	0	True				
ANR	661523	CallExpression	"isCharPotentialHeader ( currentLine , charNum )"		661340	0					
ANR	661524	Callee	isCharPotentialHeader		661340	0					
ANR	661525	Identifier	isCharPotentialHeader		661340	0					
ANR	661526	ArgumentList	currentLine		661340	1					
ANR	661527	Argument	currentLine		661340	0					
ANR	661528	Identifier	currentLine		661340	0					
ANR	661529	Argument	charNum		661340	1					
ANR	661530	Identifier	charNum		661340	0					
ANR	661531	ExpressionStatement	"newCharNum = getCurrentWord ( currentLine , charNum ) . length ( ) + charNum"	7229:3:209257:209325	661340	1	True				
ANR	661532	AssignmentExpression	"newCharNum = getCurrentWord ( currentLine , charNum ) . length ( ) + charNum"		661340	0		=			
ANR	661533	Identifier	newCharNum		661340	0					
ANR	661534	AdditiveExpression	"getCurrentWord ( currentLine , charNum ) . length ( ) + charNum"		661340	1		+			
ANR	661535	CallExpression	"getCurrentWord ( currentLine , charNum ) . length ( )"		661340	0					
ANR	661536	Callee	"getCurrentWord ( currentLine , charNum ) . length"		661340	0					
ANR	661537	MemberAccess	"getCurrentWord ( currentLine , charNum ) . length"		661340	0					
ANR	661538	CallExpression	"getCurrentWord ( currentLine , charNum )"		661340	0					
ANR	661539	Callee	getCurrentWord		661340	0					
ANR	661540	Identifier	getCurrentWord		661340	0					
ANR	661541	ArgumentList	currentLine		661340	1					
ANR	661542	Argument	currentLine		661340	0					
ANR	661543	Identifier	currentLine		661340	0					
ANR	661544	Argument	charNum		661340	1					
ANR	661545	Identifier	charNum		661340	0					
ANR	661546	Identifier	length		661340	1					
ANR	661547	ArgumentList			661340	1					
ANR	661548	Identifier	charNum		661340	1					
ANR	661549	ElseStatement	else		661340	0					
ANR	661550	ExpressionStatement	newCharNum = charNum + 2	7231:3:209337:209361	661340	0	True				
ANR	661551	AssignmentExpression	newCharNum = charNum + 2		661340	0		=			
ANR	661552	Identifier	newCharNum		661340	0					
ANR	661553	AdditiveExpression	charNum + 2		661340	1		+			
ANR	661554	Identifier	charNum		661340	0					
ANR	661555	PrimaryExpression	2		661340	1					
ANR	661556	IfStatement	if ( newCharNum + 1 > currentLine . length ( ) )		661340	2					
ANR	661557	Condition	newCharNum + 1 > currentLine . length ( )	7232:6:209369:209405	661340	0	True				
ANR	661558	RelationalExpression	newCharNum + 1 > currentLine . length ( )		661340	0		>			
ANR	661559	AdditiveExpression	newCharNum + 1		661340	0		+			
ANR	661560	Identifier	newCharNum		661340	0					
ANR	661561	PrimaryExpression	1		661340	1					
ANR	661562	CallExpression	currentLine . length ( )		661340	1					
ANR	661563	Callee	currentLine . length		661340	0					
ANR	661564	MemberAccess	currentLine . length		661340	0					
ANR	661565	Identifier	currentLine		661340	0					
ANR	661566	Identifier	length		661340	1					
ANR	661567	ArgumentList			661340	1					
ANR	661568	CompoundStatement		49:2:1672:1672	661340	1					
ANR	661569	IfStatement	if ( maxWhiteSpace > splitPoint + 3 )		661340	0					
ANR	661570	Condition	maxWhiteSpace > splitPoint + 3	7235:7:209482:209511	661340	0	True				
ANR	661571	RelationalExpression	maxWhiteSpace > splitPoint + 3		661340	0		>			
ANR	661572	Identifier	maxWhiteSpace		661340	0					
ANR	661573	AdditiveExpression	splitPoint + 3		661340	1		+			
ANR	661574	Identifier	splitPoint		661340	0					
ANR	661575	PrimaryExpression	3		661340	1					
ANR	661576	ExpressionStatement	splitPoint = maxWhiteSpace	7236:4:209518:209544	661340	1	True				
ANR	661577	AssignmentExpression	splitPoint = maxWhiteSpace		661340	0		=			
ANR	661578	Identifier	splitPoint		661340	0					
ANR	661579	Identifier	maxWhiteSpace		661340	1					
ANR	661580	IfStatement	if ( maxParen > splitPoint )		661340	1					
ANR	661581	Condition	maxParen > splitPoint	7237:7:209553:209573	661340	0	True				
ANR	661582	RelationalExpression	maxParen > splitPoint		661340	0		>			
ANR	661583	Identifier	maxParen		661340	0					
ANR	661584	Identifier	splitPoint		661340	1					
ANR	661585	ExpressionStatement	splitPoint = maxParen	7238:4:209580:209601	661340	1	True				
ANR	661586	AssignmentExpression	splitPoint = maxParen		661340	0		=			
ANR	661587	Identifier	splitPoint		661340	0					
ANR	661588	Identifier	maxParen		661340	1					
ANR	661589	ReturnStatement	return splitPoint ;	7242:1:209612:209629	661340	7	True				
ANR	661590	Identifier	splitPoint		661340	0					
ANR	661591	ReturnType	size_t		661340	1					
ANR	661592	Identifier	ASFormatter :: findFormattedLineSplitPoint		661340	2					
ANR	661593	ParameterList			661340	3					
ANR	661594	CFGEntryNode	ENTRY		661340		True				
ANR	661595	CFGExitNode	EXIT		661340		True				
ANR	661596	Symbol	maxWhiteSpacePending		661340						
ANR	661597	Symbol	getCurrentWord		661340						
ANR	661598	Symbol	maxSemiPending		661340						
ANR	661599	Symbol	maxCodeLength		661340						
ANR	661600	Symbol	string :: npos		661340						
ANR	661601	Symbol	maxCommaPending		661340						
ANR	661602	Symbol	minCodeLength		661340						
ANR	661603	Symbol	newCharNum		661340						
ANR	661604	Symbol	formattedLine		661340						
ANR	661605	Symbol	maxParen		661340						
ANR	661606	Symbol	isCharPotentialHeader		661340						
ANR	661607	Symbol	currentLine . length		661340						
ANR	661608	Symbol	formattedLine . length		661340						
ANR	661609	Symbol	"getCurrentWord ( currentLine , charNum ) . length"		661340						
ANR	661610	Symbol	maxComma		661340						
ANR	661611	Symbol	maxParenPending		661340						
ANR	661612	Symbol	maxWhiteSpace		661340						
ANR	661613	Symbol	charNum		661340						
ANR	661614	Symbol	maxSemi		661340						
ANR	661615	Symbol	splitPoint		661340						
ANR	661616	Symbol	maxAndOr		661340						
ANR	661617	Symbol	maxAndOrPending		661340						
ANR	661618	Symbol	currentLine		661340						
ANR	661619	Function	ASFormatter :: clearFormattedLineSplitPoints	7245:0:209634:209879							
ANR	661620	FunctionDef	ASFormatter :: clearFormattedLineSplitPoints ()		661619	0					
ANR	661621	CompoundStatement		7246:0:209684:209879	661619	0					
ANR	661622	ExpressionStatement	maxSemi = 0	7247:1:209687:209698	661619	0	True				
ANR	661623	AssignmentExpression	maxSemi = 0		661619	0		=			
ANR	661624	Identifier	maxSemi		661619	0					
ANR	661625	PrimaryExpression	0		661619	1					
ANR	661626	ExpressionStatement	maxAndOr = 0	7248:1:209701:209713	661619	1	True				
ANR	661627	AssignmentExpression	maxAndOr = 0		661619	0		=			
ANR	661628	Identifier	maxAndOr		661619	0					
ANR	661629	PrimaryExpression	0		661619	1					
ANR	661630	ExpressionStatement	maxComma = 0	7249:1:209716:209728	661619	2	True				
ANR	661631	AssignmentExpression	maxComma = 0		661619	0		=			
ANR	661632	Identifier	maxComma		661619	0					
ANR	661633	PrimaryExpression	0		661619	1					
ANR	661634	ExpressionStatement	maxParen = 0	7250:1:209731:209743	661619	3	True				
ANR	661635	AssignmentExpression	maxParen = 0		661619	0		=			
ANR	661636	Identifier	maxParen		661619	0					
ANR	661637	PrimaryExpression	0		661619	1					
ANR	661638	ExpressionStatement	maxWhiteSpace = 0	7251:1:209746:209763	661619	4	True				
ANR	661639	AssignmentExpression	maxWhiteSpace = 0		661619	0		=			
ANR	661640	Identifier	maxWhiteSpace		661619	0					
ANR	661641	PrimaryExpression	0		661619	1					
ANR	661642	ExpressionStatement	maxSemiPending = 0	7252:1:209766:209784	661619	5	True				
ANR	661643	AssignmentExpression	maxSemiPending = 0		661619	0		=			
ANR	661644	Identifier	maxSemiPending		661619	0					
ANR	661645	PrimaryExpression	0		661619	1					
ANR	661646	ExpressionStatement	maxAndOrPending = 0	7253:1:209787:209806	661619	6	True				
ANR	661647	AssignmentExpression	maxAndOrPending = 0		661619	0		=			
ANR	661648	Identifier	maxAndOrPending		661619	0					
ANR	661649	PrimaryExpression	0		661619	1					
ANR	661650	ExpressionStatement	maxCommaPending = 0	7254:1:209809:209828	661619	7	True				
ANR	661651	AssignmentExpression	maxCommaPending = 0		661619	0		=			
ANR	661652	Identifier	maxCommaPending		661619	0					
ANR	661653	PrimaryExpression	0		661619	1					
ANR	661654	ExpressionStatement	maxParenPending = 0	7255:1:209831:209850	661619	8	True				
ANR	661655	AssignmentExpression	maxParenPending = 0		661619	0		=			
ANR	661656	Identifier	maxParenPending		661619	0					
ANR	661657	PrimaryExpression	0		661619	1					
ANR	661658	ExpressionStatement	maxWhiteSpacePending = 0	7256:1:209853:209877	661619	9	True				
ANR	661659	AssignmentExpression	maxWhiteSpacePending = 0		661619	0		=			
ANR	661660	Identifier	maxWhiteSpacePending		661619	0					
ANR	661661	PrimaryExpression	0		661619	1					
ANR	661662	ReturnType	void		661619	1					
ANR	661663	Identifier	ASFormatter :: clearFormattedLineSplitPoints		661619	2					
ANR	661664	ParameterList			661619	3					
ANR	661665	CFGEntryNode	ENTRY		661619		True				
ANR	661666	CFGExitNode	EXIT		661619		True				
ANR	661667	Symbol	maxWhiteSpacePending		661619						
ANR	661668	Symbol	maxParen		661619						
ANR	661669	Symbol	maxSemiPending		661619						
ANR	661670	Symbol	maxComma		661619						
ANR	661671	Symbol	maxCommaPending		661619						
ANR	661672	Symbol	maxParenPending		661619						
ANR	661673	Symbol	maxWhiteSpace		661619						
ANR	661674	Symbol	maxSemi		661619						
ANR	661675	Symbol	maxAndOr		661619						
ANR	661676	Symbol	maxAndOrPending		661619						
ANR	661677	Function	ASFormatter :: pointerSymbolFollows	7262:0:209952:210176							
ANR	661678	FunctionDef	ASFormatter :: pointerSymbolFollows ()		661677	0					
ANR	661679	CompoundStatement		7263:0:209999:210176	661677	0					
ANR	661680	IdentifierDeclStatement	"size_t peekNum = currentLine . find_first_not_of ( "" \\t"" , charNum + 1 ) ;"	7264:1:210002:210068	661677	0	True				
ANR	661681	IdentifierDecl	"peekNum = currentLine . find_first_not_of ( "" \\t"" , charNum + 1 )"		661677	0					
ANR	661682	IdentifierDeclType	size_t		661677	0					
ANR	661683	Identifier	peekNum		661677	1					
ANR	661684	AssignmentExpression	"peekNum = currentLine . find_first_not_of ( "" \\t"" , charNum + 1 )"		661677	2		=			
ANR	661685	Identifier	peekNum		661677	0					
ANR	661686	CallExpression	"currentLine . find_first_not_of ( "" \\t"" , charNum + 1 )"		661677	1					
ANR	661687	Callee	currentLine . find_first_not_of		661677	0					
ANR	661688	MemberAccess	currentLine . find_first_not_of		661677	0					
ANR	661689	Identifier	currentLine		661677	0					
ANR	661690	Identifier	find_first_not_of		661677	1					
ANR	661691	ArgumentList	""" \\t"""		661677	1					
ANR	661692	Argument	""" \\t"""		661677	0					
ANR	661693	PrimaryExpression	""" \\t"""		661677	0					
ANR	661694	Argument	charNum + 1		661677	1					
ANR	661695	AdditiveExpression	charNum + 1		661677	0		+			
ANR	661696	Identifier	charNum		661677	0					
ANR	661697	PrimaryExpression	1		661677	1					
ANR	661698	IfStatement	"if ( peekNum == string :: npos || currentLine . compare ( peekNum , 2 , ""->"" ) != 0 )"		661677	1					
ANR	661699	Condition	"peekNum == string :: npos || currentLine . compare ( peekNum , 2 , ""->"" ) != 0"	7265:5:210075:210143	661677	0	True				
ANR	661700	OrExpression	"peekNum == string :: npos || currentLine . compare ( peekNum , 2 , ""->"" ) != 0"		661677	0		||			
ANR	661701	EqualityExpression	peekNum == string :: npos		661677	0		==			
ANR	661702	Identifier	peekNum		661677	0					
ANR	661703	Identifier	string :: npos		661677	1					
ANR	661704	EqualityExpression	"currentLine . compare ( peekNum , 2 , ""->"" ) != 0"		661677	1		!=			
ANR	661705	CallExpression	"currentLine . compare ( peekNum , 2 , ""->"" )"		661677	0					
ANR	661706	Callee	currentLine . compare		661677	0					
ANR	661707	MemberAccess	currentLine . compare		661677	0					
ANR	661708	Identifier	currentLine		661677	0					
ANR	661709	Identifier	compare		661677	1					
ANR	661710	ArgumentList	peekNum		661677	1					
ANR	661711	Argument	peekNum		661677	0					
ANR	661712	Identifier	peekNum		661677	0					
ANR	661713	Argument	2		661677	1					
ANR	661714	PrimaryExpression	2		661677	0					
ANR	661715	Argument	"""->"""		661677	2					
ANR	661716	PrimaryExpression	"""->"""		661677	0					
ANR	661717	PrimaryExpression	0		661677	1					
ANR	661718	ReturnStatement	return false ;	7266:2:210148:210160	661677	1	True				
ANR	661719	Identifier	false		661677	0					
ANR	661720	ReturnStatement	return true ;	7267:1:210163:210174	661677	2	True				
ANR	661721	Identifier	true		661677	0					
ANR	661722	ReturnType	bool		661677	1					
ANR	661723	Identifier	ASFormatter :: pointerSymbolFollows		661677	2					
ANR	661724	ParameterList			661677	3					
ANR	661725	CFGEntryNode	ENTRY		661677		True				
ANR	661726	CFGExitNode	EXIT		661677		True				
ANR	661727	Symbol	string :: npos		661677						
ANR	661728	Symbol	false		661677						
ANR	661729	Symbol	true		661677						
ANR	661730	Symbol	charNum		661677						
ANR	661731	Symbol	currentLine . find_first_not_of		661677						
ANR	661732	Symbol	currentLine . compare		661677						
ANR	661733	Symbol	currentLine		661677						
ANR	661734	Symbol	peekNum		661677						
ANR	661735	Function	ASFormatter :: computeChecksumIn	7274:0:210280:210484							
ANR	661736	FunctionDef	ASFormatter :: computeChecksumIn (const string & currentLine_)		661735	0					
ANR	661737	CompoundStatement		7275:0:210344:210484	661735	0					
ANR	661738	ForStatement	for ( size_t i = 0 ; i < currentLine_ . length ( ) ; i ++ )		661735	0					
ANR	661739	ForInit	size_t i = 0 ;	7276:6:210352:210364	661735	0	True				
ANR	661740	IdentifierDeclStatement	size_t i = 0 ;		661735	0					
ANR	661741	IdentifierDecl	i = 0		661735	0					
ANR	661742	IdentifierDeclType	size_t		661735	0					
ANR	661743	Identifier	i		661735	1					
ANR	661744	AssignmentExpression	i = 0		661735	2		=			
ANR	661745	Identifier	i		661735	0					
ANR	661746	PrimaryExpression	0		661735	1					
ANR	661747	Condition	i < currentLine_ . length ( )	7276:20:210366:210390	661735	1	True				
ANR	661748	RelationalExpression	i < currentLine_ . length ( )		661735	0		<			
ANR	661749	Identifier	i		661735	0					
ANR	661750	CallExpression	currentLine_ . length ( )		661735	1					
ANR	661751	Callee	currentLine_ . length		661735	0					
ANR	661752	MemberAccess	currentLine_ . length		661735	0					
ANR	661753	Identifier	currentLine_		661735	0					
ANR	661754	Identifier	length		661735	1					
ANR	661755	ArgumentList			661735	1					
ANR	661756	PostIncDecOperationExpression	i ++	7276:47:210393:210395	661735	2	True				
ANR	661757	Identifier	i		661735	0					
ANR	661758	IncDec	++		661735	1					
ANR	661759	IfStatement	if ( ! isWhiteSpace ( currentLine_ [ i ] ) )		661735	3					
ANR	661760	Condition	! isWhiteSpace ( currentLine_ [ i ] )	7277:6:210404:210433	661735	0	True				
ANR	661761	UnaryOperationExpression	! isWhiteSpace ( currentLine_ [ i ] )		661735	0					
ANR	661762	UnaryOperator	!		661735	0					
ANR	661763	CallExpression	isWhiteSpace ( currentLine_ [ i ] )		661735	1					
ANR	661764	Callee	isWhiteSpace		661735	0					
ANR	661765	Identifier	isWhiteSpace		661735	0					
ANR	661766	ArgumentList	currentLine_ [ i ]		661735	1					
ANR	661767	Argument	currentLine_ [ i ]		661735	0					
ANR	661768	ArrayIndexing	currentLine_ [ i ]		661735	0					
ANR	661769	Identifier	currentLine_		661735	0					
ANR	661770	Identifier	i		661735	1					
ANR	661771	ExpressionStatement	checksumIn += currentLine_ [ i ]	7278:3:210439:210468	661735	1	True				
ANR	661772	AssignmentExpression	checksumIn += currentLine_ [ i ]		661735	0		+=			
ANR	661773	Identifier	checksumIn		661735	0					
ANR	661774	ArrayIndexing	currentLine_ [ i ]		661735	1					
ANR	661775	Identifier	currentLine_		661735	0					
ANR	661776	Identifier	i		661735	1					
ANR	661777	ReturnStatement	return true ;	7279:1:210471:210482	661735	1	True				
ANR	661778	Identifier	true		661735	0					
ANR	661779	ReturnType	bool		661735	1					
ANR	661780	Identifier	ASFormatter :: computeChecksumIn		661735	2					
ANR	661781	ParameterList	const string & currentLine_		661735	3					
ANR	661782	Parameter	const string & currentLine_	7274:36:210316:210341	661735	0	True				
ANR	661783	ParameterType	const string &		661735	0					
ANR	661784	Identifier	currentLine_		661735	1					
ANR	661785	CFGEntryNode	ENTRY		661735		True				
ANR	661786	CFGExitNode	EXIT		661735		True				
ANR	661787	Symbol	* i		661735						
ANR	661788	Symbol	currentLine_ . length		661735						
ANR	661789	Symbol	true		661735						
ANR	661790	Symbol	i		661735						
ANR	661791	Symbol	* currentLine_		661735						
ANR	661792	Symbol	checksumIn		661735						
ANR	661793	Symbol	isWhiteSpace		661735						
ANR	661794	Symbol	currentLine_		661735						
ANR	661795	Function	ASFormatter :: adjustChecksumIn	7286:0:210605:210699							
ANR	661796	FunctionDef	ASFormatter :: adjustChecksumIn (int adjustment)		661795	0					
ANR	661797	CompoundStatement		7287:0:210656:210699	661795	0					
ANR	661798	ExpressionStatement	checksumIn += adjustment	7288:1:210659:210683	661795	0	True				
ANR	661799	AssignmentExpression	checksumIn += adjustment		661795	0		+=			
ANR	661800	Identifier	checksumIn		661795	0					
ANR	661801	Identifier	adjustment		661795	1					
ANR	661802	ReturnStatement	return true ;	7289:1:210686:210697	661795	1	True				
ANR	661803	Identifier	true		661795	0					
ANR	661804	ReturnType	bool		661795	1					
ANR	661805	Identifier	ASFormatter :: adjustChecksumIn		661795	2					
ANR	661806	ParameterList	int adjustment		661795	3					
ANR	661807	Parameter	int adjustment	7286:35:210640:210653	661795	0	True				
ANR	661808	ParameterType	int		661795	0					
ANR	661809	Identifier	adjustment		661795	1					
ANR	661810	CFGEntryNode	ENTRY		661795		True				
ANR	661811	CFGExitNode	EXIT		661795		True				
ANR	661812	Symbol	true		661795						
ANR	661813	Symbol	adjustment		661795						
ANR	661814	Symbol	checksumIn		661795						
ANR	661815	Function	ASFormatter :: getChecksumIn	7297:0:210786:210850							
ANR	661816	FunctionDef	ASFormatter :: getChecksumIn ()		661815	0					
ANR	661817	CompoundStatement		7298:0:210828:210850	661815	0					
ANR	661818	ReturnStatement	return checksumIn ;	7299:1:210831:210848	661815	0	True				
ANR	661819	Identifier	checksumIn		661815	0					
ANR	661820	ReturnType	size_t		661815	1					
ANR	661821	Identifier	ASFormatter :: getChecksumIn		661815	2					
ANR	661822	ParameterList			661815	3					
ANR	661823	CFGEntryNode	ENTRY		661815		True				
ANR	661824	CFGExitNode	EXIT		661815		True				
ANR	661825	Symbol	checksumIn		661815						
ANR	661826	Function	ASFormatter :: computeChecksumOut	7306:0:210955:211169							
ANR	661827	FunctionDef	ASFormatter :: computeChecksumOut (const string & beautifiedLine)		661826	0					
ANR	661828	CompoundStatement		7307:0:211022:211169	661826	0					
ANR	661829	ForStatement	for ( size_t i = 0 ; i < beautifiedLine . length ( ) ; i ++ )		661826	0					
ANR	661830	ForInit	size_t i = 0 ;	7308:6:211030:211042	661826	0	True				
ANR	661831	IdentifierDeclStatement	size_t i = 0 ;		661826	0					
ANR	661832	IdentifierDecl	i = 0		661826	0					
ANR	661833	IdentifierDeclType	size_t		661826	0					
ANR	661834	Identifier	i		661826	1					
ANR	661835	AssignmentExpression	i = 0		661826	2		=			
ANR	661836	Identifier	i		661826	0					
ANR	661837	PrimaryExpression	0		661826	1					
ANR	661838	Condition	i < beautifiedLine . length ( )	7308:20:211044:211070	661826	1	True				
ANR	661839	RelationalExpression	i < beautifiedLine . length ( )		661826	0		<			
ANR	661840	Identifier	i		661826	0					
ANR	661841	CallExpression	beautifiedLine . length ( )		661826	1					
ANR	661842	Callee	beautifiedLine . length		661826	0					
ANR	661843	MemberAccess	beautifiedLine . length		661826	0					
ANR	661844	Identifier	beautifiedLine		661826	0					
ANR	661845	Identifier	length		661826	1					
ANR	661846	ArgumentList			661826	1					
ANR	661847	PostIncDecOperationExpression	i ++	7308:49:211073:211075	661826	2	True				
ANR	661848	Identifier	i		661826	0					
ANR	661849	IncDec	++		661826	1					
ANR	661850	IfStatement	if ( ! isWhiteSpace ( beautifiedLine [ i ] ) )		661826	3					
ANR	661851	Condition	! isWhiteSpace ( beautifiedLine [ i ] )	7309:6:211084:211115	661826	0	True				
ANR	661852	UnaryOperationExpression	! isWhiteSpace ( beautifiedLine [ i ] )		661826	0					
ANR	661853	UnaryOperator	!		661826	0					
ANR	661854	CallExpression	isWhiteSpace ( beautifiedLine [ i ] )		661826	1					
ANR	661855	Callee	isWhiteSpace		661826	0					
ANR	661856	Identifier	isWhiteSpace		661826	0					
ANR	661857	ArgumentList	beautifiedLine [ i ]		661826	1					
ANR	661858	Argument	beautifiedLine [ i ]		661826	0					
ANR	661859	ArrayIndexing	beautifiedLine [ i ]		661826	0					
ANR	661860	Identifier	beautifiedLine		661826	0					
ANR	661861	Identifier	i		661826	1					
ANR	661862	ExpressionStatement	checksumOut += beautifiedLine [ i ]	7310:3:211121:211153	661826	1	True				
ANR	661863	AssignmentExpression	checksumOut += beautifiedLine [ i ]		661826	0		+=			
ANR	661864	Identifier	checksumOut		661826	0					
ANR	661865	ArrayIndexing	beautifiedLine [ i ]		661826	1					
ANR	661866	Identifier	beautifiedLine		661826	0					
ANR	661867	Identifier	i		661826	1					
ANR	661868	ReturnStatement	return true ;	7311:1:211156:211167	661826	1	True				
ANR	661869	Identifier	true		661826	0					
ANR	661870	ReturnType	bool		661826	1					
ANR	661871	Identifier	ASFormatter :: computeChecksumOut		661826	2					
ANR	661872	ParameterList	const string & beautifiedLine		661826	3					
ANR	661873	Parameter	const string & beautifiedLine	7306:37:210992:211019	661826	0	True				
ANR	661874	ParameterType	const string &		661826	0					
ANR	661875	Identifier	beautifiedLine		661826	1					
ANR	661876	CFGEntryNode	ENTRY		661826		True				
ANR	661877	CFGExitNode	EXIT		661826		True				
ANR	661878	Symbol	beautifiedLine . length		661826						
ANR	661879	Symbol	* i		661826						
ANR	661880	Symbol	true		661826						
ANR	661881	Symbol	beautifiedLine		661826						
ANR	661882	Symbol	i		661826						
ANR	661883	Symbol	checksumOut		661826						
ANR	661884	Symbol	isWhiteSpace		661826						
ANR	661885	Symbol	* beautifiedLine		661826						
ANR	661886	Function	ASFormatter :: getIsLineReady	7317:0:211238:211302							
ANR	661887	FunctionDef	ASFormatter :: getIsLineReady ()		661886	0					
ANR	661888	CompoundStatement		7318:0:211279:211302	661886	0					
ANR	661889	ReturnStatement	return isLineReady ;	7319:1:211282:211300	661886	0	True				
ANR	661890	Identifier	isLineReady		661886	0					
ANR	661891	ReturnType	bool		661886	1					
ANR	661892	Identifier	ASFormatter :: getIsLineReady		661886	2					
ANR	661893	ParameterList			661886	3					
ANR	661894	CFGEntryNode	ENTRY		661886		True				
ANR	661895	CFGExitNode	EXIT		661886		True				
ANR	661896	Symbol	isLineReady		661886						
ANR	661897	Function	ASFormatter :: getChecksumOut	7327:0:211391:211457							
ANR	661898	FunctionDef	ASFormatter :: getChecksumOut ()		661897	0					
ANR	661899	CompoundStatement		7328:0:211434:211457	661897	0					
ANR	661900	ReturnStatement	return checksumOut ;	7329:1:211437:211455	661897	0	True				
ANR	661901	Identifier	checksumOut		661897	0					
ANR	661902	ReturnType	size_t		661897	1					
ANR	661903	Identifier	ASFormatter :: getChecksumOut		661897	2					
ANR	661904	ParameterList			661897	3					
ANR	661905	CFGEntryNode	ENTRY		661897		True				
ANR	661906	CFGExitNode	EXIT		661897		True				
ANR	661907	Symbol	checksumOut		661897						
ANR	661908	Function	ASFormatter :: getChecksumDiff	7336:0:211531:211608							
ANR	661909	FunctionDef	ASFormatter :: getChecksumDiff ()		661908	0					
ANR	661910	CompoundStatement		7337:0:211572:211608	661908	0					
ANR	661911	ReturnStatement	return checksumOut - checksumIn ;	7338:1:211575:211606	661908	0	True				
ANR	661912	AdditiveExpression	checksumOut - checksumIn		661908	0		-			
ANR	661913	Identifier	checksumOut		661908	0					
ANR	661914	Identifier	checksumIn		661908	1					
ANR	661915	ReturnType	int		661908	1					
ANR	661916	Identifier	ASFormatter :: getChecksumDiff		661908	2					
ANR	661917	ParameterList			661908	3					
ANR	661918	CFGEntryNode	ENTRY		661908		True				
ANR	661919	CFGExitNode	EXIT		661908		True				
ANR	661920	Symbol	checksumOut		661908						
ANR	661921	Symbol	checksumIn		661908						
ANR	661922	Function	ASFormatter :: getFormatterFileType	7342:0:211631:211706							
ANR	661923	FunctionDef	ASFormatter :: getFormatterFileType ()		661922	0					
ANR	661924	CompoundStatement		7343:0:211677:211706	661922	0					
ANR	661925	ReturnStatement	return formatterFileType ;	7344:1:211680:211704	661922	0	True				
ANR	661926	Identifier	formatterFileType		661922	0					
ANR	661927	ReturnType	int		661922	1					
ANR	661928	Identifier	ASFormatter :: getFormatterFileType		661922	2					
ANR	661929	ParameterList			661922	3					
ANR	661930	CFGEntryNode	ENTRY		661922		True				
ANR	661931	CFGExitNode	EXIT		661922		True				
ANR	661932	Symbol	formatterFileType		661922						
ANR	661933	Function	ASFormatter :: getFollowingOperator	7349:0:211795:212534							
ANR	661934	FunctionDef	ASFormatter :: getFollowingOperator ()		661933	0					
ANR	661935	CompoundStatement		7350:0:211851:212534	661933	0					
ANR	661936	IdentifierDeclStatement	"size_t nextNum = currentLine . find_first_not_of ( "" \\t"" , charNum + 1 ) ;"	7352:1:211873:211939	661933	0	True				
ANR	661937	IdentifierDecl	"nextNum = currentLine . find_first_not_of ( "" \\t"" , charNum + 1 )"		661933	0					
ANR	661938	IdentifierDeclType	size_t		661933	0					
ANR	661939	Identifier	nextNum		661933	1					
ANR	661940	AssignmentExpression	"nextNum = currentLine . find_first_not_of ( "" \\t"" , charNum + 1 )"		661933	2		=			
ANR	661941	Identifier	nextNum		661933	0					
ANR	661942	CallExpression	"currentLine . find_first_not_of ( "" \\t"" , charNum + 1 )"		661933	1					
ANR	661943	Callee	currentLine . find_first_not_of		661933	0					
ANR	661944	MemberAccess	currentLine . find_first_not_of		661933	0					
ANR	661945	Identifier	currentLine		661933	0					
ANR	661946	Identifier	find_first_not_of		661933	1					
ANR	661947	ArgumentList	""" \\t"""		661933	1					
ANR	661948	Argument	""" \\t"""		661933	0					
ANR	661949	PrimaryExpression	""" \\t"""		661933	0					
ANR	661950	Argument	charNum + 1		661933	1					
ANR	661951	AdditiveExpression	charNum + 1		661933	0		+			
ANR	661952	Identifier	charNum		661933	0					
ANR	661953	PrimaryExpression	1		661933	1					
ANR	661954	IfStatement	if ( nextNum == string :: npos )		661933	1					
ANR	661955	Condition	nextNum == string :: npos	7353:5:211946:211968	661933	0	True				
ANR	661956	EqualityExpression	nextNum == string :: npos		661933	0		==			
ANR	661957	Identifier	nextNum		661933	0					
ANR	661958	Identifier	string :: npos		661933	1					
ANR	661959	ReturnStatement	return nullptr ;	7354:2:211973:211987	661933	1	True				
ANR	661960	Identifier	nullptr		661933	0					
ANR	661961	IfStatement	if ( ! isLegalNameChar ( currentLine [ nextNum ] ) )		661933	2					
ANR	661962	Condition	! isLegalNameChar ( currentLine [ nextNum ] )	7356:5:211995:212032	661933	0	True				
ANR	661963	UnaryOperationExpression	! isLegalNameChar ( currentLine [ nextNum ] )		661933	0					
ANR	661964	UnaryOperator	!		661933	0					
ANR	661965	CallExpression	isLegalNameChar ( currentLine [ nextNum ] )		661933	1					
ANR	661966	Callee	isLegalNameChar		661933	0					
ANR	661967	Identifier	isLegalNameChar		661933	0					
ANR	661968	ArgumentList	currentLine [ nextNum ]		661933	1					
ANR	661969	Argument	currentLine [ nextNum ]		661933	0					
ANR	661970	ArrayIndexing	currentLine [ nextNum ]		661933	0					
ANR	661971	Identifier	currentLine		661933	0					
ANR	661972	Identifier	nextNum		661933	1					
ANR	661973	ReturnStatement	return nullptr ;	7357:2:212037:212051	661933	1	True				
ANR	661974	Identifier	nullptr		661933	0					
ANR	661975	WhileStatement	while ( nextNum < currentLine . length ( ) )		661933	3					
ANR	661976	Condition	nextNum < currentLine . length ( )	7360:8:212104:212133	661933	0	True				
ANR	661977	RelationalExpression	nextNum < currentLine . length ( )		661933	0		<			
ANR	661978	Identifier	nextNum		661933	0					
ANR	661979	CallExpression	currentLine . length ( )		661933	1					
ANR	661980	Callee	currentLine . length		661933	0					
ANR	661981	MemberAccess	currentLine . length		661933	0					
ANR	661982	Identifier	currentLine		661933	0					
ANR	661983	Identifier	length		661933	1					
ANR	661984	ArgumentList			661933	1					
ANR	661985	CompoundStatement		12:1:285:285	661933	1					
ANR	661986	IfStatement	if ( ! isLegalNameChar ( currentLine [ nextNum ] ) && ! isWhiteSpace ( currentLine [ nextNum ] ) )		661933	0					
ANR	661987	Condition	! isLegalNameChar ( currentLine [ nextNum ] ) && ! isWhiteSpace ( currentLine [ nextNum ] )	7362:6:212145:212231	661933	0	True				
ANR	661988	AndExpression	! isLegalNameChar ( currentLine [ nextNum ] ) && ! isWhiteSpace ( currentLine [ nextNum ] )		661933	0		&&			
ANR	661989	UnaryOperationExpression	! isLegalNameChar ( currentLine [ nextNum ] )		661933	0					
ANR	661990	UnaryOperator	!		661933	0					
ANR	661991	CallExpression	isLegalNameChar ( currentLine [ nextNum ] )		661933	1					
ANR	661992	Callee	isLegalNameChar		661933	0					
ANR	661993	Identifier	isLegalNameChar		661933	0					
ANR	661994	ArgumentList	currentLine [ nextNum ]		661933	1					
ANR	661995	Argument	currentLine [ nextNum ]		661933	0					
ANR	661996	ArrayIndexing	currentLine [ nextNum ]		661933	0					
ANR	661997	Identifier	currentLine		661933	0					
ANR	661998	Identifier	nextNum		661933	1					
ANR	661999	UnaryOperationExpression	! isWhiteSpace ( currentLine [ nextNum ] )		661933	1					
ANR	662000	UnaryOperator	!		661933	0					
ANR	662001	CallExpression	isWhiteSpace ( currentLine [ nextNum ] )		661933	1					
ANR	662002	Callee	isWhiteSpace		661933	0					
ANR	662003	Identifier	isWhiteSpace		661933	0					
ANR	662004	ArgumentList	currentLine [ nextNum ]		661933	1					
ANR	662005	Argument	currentLine [ nextNum ]		661933	0					
ANR	662006	ArrayIndexing	currentLine [ nextNum ]		661933	0					
ANR	662007	Identifier	currentLine		661933	0					
ANR	662008	Identifier	nextNum		661933	1					
ANR	662009	BreakStatement	break ;	7364:3:212237:212242	661933	1	True				
ANR	662010	ExpressionStatement	nextNum ++	7365:2:212246:212255	661933	1	True				
ANR	662011	PostIncDecOperationExpression	nextNum ++		661933	0					
ANR	662012	Identifier	nextNum		661933	0					
ANR	662013	IncDec	++		661933	1					
ANR	662014	IfStatement	if ( nextNum >= currentLine . length ( ) || ! isCharPotentialOperator ( currentLine [ nextNum ] ) || currentLine [ nextNum ] == '/' )		661933	4					
ANR	662015	Condition	nextNum >= currentLine . length ( ) || ! isCharPotentialOperator ( currentLine [ nextNum ] ) || currentLine [ nextNum ] == '/'	7368:5:212266:212395	661933	0	True				
ANR	662016	OrExpression	nextNum >= currentLine . length ( ) || ! isCharPotentialOperator ( currentLine [ nextNum ] ) || currentLine [ nextNum ] == '/'		661933	0		||			
ANR	662017	RelationalExpression	nextNum >= currentLine . length ( )		661933	0		>=			
ANR	662018	Identifier	nextNum		661933	0					
ANR	662019	CallExpression	currentLine . length ( )		661933	1					
ANR	662020	Callee	currentLine . length		661933	0					
ANR	662021	MemberAccess	currentLine . length		661933	0					
ANR	662022	Identifier	currentLine		661933	0					
ANR	662023	Identifier	length		661933	1					
ANR	662024	ArgumentList			661933	1					
ANR	662025	OrExpression	! isCharPotentialOperator ( currentLine [ nextNum ] ) || currentLine [ nextNum ] == '/'		661933	1		||			
ANR	662026	UnaryOperationExpression	! isCharPotentialOperator ( currentLine [ nextNum ] )		661933	0					
ANR	662027	UnaryOperator	!		661933	0					
ANR	662028	CallExpression	isCharPotentialOperator ( currentLine [ nextNum ] )		661933	1					
ANR	662029	Callee	isCharPotentialOperator		661933	0					
ANR	662030	Identifier	isCharPotentialOperator		661933	0					
ANR	662031	ArgumentList	currentLine [ nextNum ]		661933	1					
ANR	662032	Argument	currentLine [ nextNum ]		661933	0					
ANR	662033	ArrayIndexing	currentLine [ nextNum ]		661933	0					
ANR	662034	Identifier	currentLine		661933	0					
ANR	662035	Identifier	nextNum		661933	1					
ANR	662036	EqualityExpression	currentLine [ nextNum ] == '/'		661933	1		==			
ANR	662037	ArrayIndexing	currentLine [ nextNum ]		661933	0					
ANR	662038	Identifier	currentLine		661933	0					
ANR	662039	Identifier	nextNum		661933	1					
ANR	662040	PrimaryExpression	'/'		661933	1					
ANR	662041	ReturnStatement	return nullptr ;	7371:2:212412:212426	661933	1	True				
ANR	662042	Identifier	nullptr		661933	0					
ANR	662043	IdentifierDeclStatement	"const string * newOperator = ASBase :: findOperator ( currentLine , nextNum , operators ) ;"	7373:1:212430:212511	661933	5	True				
ANR	662044	IdentifierDecl	"* newOperator = ASBase :: findOperator ( currentLine , nextNum , operators )"		661933	0					
ANR	662045	IdentifierDeclType	const string *		661933	0					
ANR	662046	Identifier	newOperator		661933	1					
ANR	662047	AssignmentExpression	"* newOperator = ASBase :: findOperator ( currentLine , nextNum , operators )"		661933	2		=			
ANR	662048	Identifier	newOperator		661933	0					
ANR	662049	CallExpression	"ASBase :: findOperator ( currentLine , nextNum , operators )"		661933	1					
ANR	662050	Callee	ASBase :: findOperator		661933	0					
ANR	662051	Identifier	ASBase :: findOperator		661933	0					
ANR	662052	ArgumentList	currentLine		661933	1					
ANR	662053	Argument	currentLine		661933	0					
ANR	662054	Identifier	currentLine		661933	0					
ANR	662055	Argument	nextNum		661933	1					
ANR	662056	Identifier	nextNum		661933	0					
ANR	662057	Argument	operators		661933	2					
ANR	662058	Identifier	operators		661933	0					
ANR	662059	ReturnStatement	return newOperator ;	7374:1:212514:212532	661933	6	True				
ANR	662060	Identifier	newOperator		661933	0					
ANR	662061	ReturnType	const string *		661933	1					
ANR	662062	Identifier	ASFormatter :: getFollowingOperator		661933	2					
ANR	662063	ParameterList			661933	3					
ANR	662064	CFGEntryNode	ENTRY		661933		True				
ANR	662065	CFGExitNode	EXIT		661933		True				
ANR	662066	Symbol	nextNum		661933						
ANR	662067	Symbol	string :: npos		661933						
ANR	662068	Symbol	* nextNum		661933						
ANR	662069	Symbol	isLegalNameChar		661933						
ANR	662070	Symbol	isCharPotentialOperator		661933						
ANR	662071	Symbol	currentLine . find_first_not_of		661933						
ANR	662072	Symbol	isWhiteSpace		661933						
ANR	662073	Symbol	* currentLine		661933						
ANR	662074	Symbol	currentLine . length		661933						
ANR	662075	Symbol	operators		661933						
ANR	662076	Symbol	newOperator		661933						
ANR	662077	Symbol	ASBase :: findOperator		661933						
ANR	662078	Symbol	charNum		661933						
ANR	662079	Symbol	nullptr		661933						
ANR	662080	Symbol	currentLine		661933						
ANR	662081	Function	ASFormatter :: isArrayOperator	7378:0:212621:213436							
ANR	662082	FunctionDef	ASFormatter :: isArrayOperator ()		662081	0					
ANR	662083	CompoundStatement		7379:0:212663:213436	662081	0					
ANR	662084	ExpressionStatement	assert ( currentChar == '*' || currentChar == '&' || currentChar == '^' )	7380:1:212666:212736	662081	0	True				
ANR	662085	CallExpression	assert ( currentChar == '*' || currentChar == '&' || currentChar == '^' )		662081	0					
ANR	662086	Callee	assert		662081	0					
ANR	662087	Identifier	assert		662081	0					
ANR	662088	ArgumentList	currentChar == '*' || currentChar == '&' || currentChar == '^'		662081	1					
ANR	662089	Argument	currentChar == '*' || currentChar == '&' || currentChar == '^'		662081	0					
ANR	662090	OrExpression	currentChar == '*' || currentChar == '&' || currentChar == '^'		662081	0		||			
ANR	662091	EqualityExpression	currentChar == '*'		662081	0		==			
ANR	662092	Identifier	currentChar		662081	0					
ANR	662093	PrimaryExpression	'*'		662081	1					
ANR	662094	OrExpression	currentChar == '&' || currentChar == '^'		662081	1		||			
ANR	662095	EqualityExpression	currentChar == '&'		662081	0		==			
ANR	662096	Identifier	currentChar		662081	0					
ANR	662097	PrimaryExpression	'&'		662081	1					
ANR	662098	EqualityExpression	currentChar == '^'		662081	1		==			
ANR	662099	Identifier	currentChar		662081	0					
ANR	662100	PrimaryExpression	'^'		662081	1					
ANR	662101	ExpressionStatement	"assert ( isBraceType ( braceTypeStack -> back ( ) , ARRAY_TYPE ) )"	7381:1:212739:212794	662081	1	True				
ANR	662102	CallExpression	"assert ( isBraceType ( braceTypeStack -> back ( ) , ARRAY_TYPE ) )"		662081	0					
ANR	662103	Callee	assert		662081	0					
ANR	662104	Identifier	assert		662081	0					
ANR	662105	ArgumentList	"isBraceType ( braceTypeStack -> back ( ) , ARRAY_TYPE )"		662081	1					
ANR	662106	Argument	"isBraceType ( braceTypeStack -> back ( ) , ARRAY_TYPE )"		662081	0					
ANR	662107	CallExpression	"isBraceType ( braceTypeStack -> back ( ) , ARRAY_TYPE )"		662081	0					
ANR	662108	Callee	isBraceType		662081	0					
ANR	662109	Identifier	isBraceType		662081	0					
ANR	662110	ArgumentList	braceTypeStack -> back ( )		662081	1					
ANR	662111	Argument	braceTypeStack -> back ( )		662081	0					
ANR	662112	CallExpression	braceTypeStack -> back ( )		662081	0					
ANR	662113	Callee	braceTypeStack -> back		662081	0					
ANR	662114	PtrMemberAccess	braceTypeStack -> back		662081	0					
ANR	662115	Identifier	braceTypeStack		662081	0					
ANR	662116	Identifier	back		662081	1					
ANR	662117	ArgumentList			662081	1					
ANR	662118	Argument	ARRAY_TYPE		662081	1					
ANR	662119	Identifier	ARRAY_TYPE		662081	0					
ANR	662120	IdentifierDeclStatement	"size_t nextNum = currentLine . find_first_not_of ( "" \\t"" , charNum + 1 ) ;"	7384:1:212817:212883	662081	2	True				
ANR	662121	IdentifierDecl	"nextNum = currentLine . find_first_not_of ( "" \\t"" , charNum + 1 )"		662081	0					
ANR	662122	IdentifierDeclType	size_t		662081	0					
ANR	662123	Identifier	nextNum		662081	1					
ANR	662124	AssignmentExpression	"nextNum = currentLine . find_first_not_of ( "" \\t"" , charNum + 1 )"		662081	2		=			
ANR	662125	Identifier	nextNum		662081	0					
ANR	662126	CallExpression	"currentLine . find_first_not_of ( "" \\t"" , charNum + 1 )"		662081	1					
ANR	662127	Callee	currentLine . find_first_not_of		662081	0					
ANR	662128	MemberAccess	currentLine . find_first_not_of		662081	0					
ANR	662129	Identifier	currentLine		662081	0					
ANR	662130	Identifier	find_first_not_of		662081	1					
ANR	662131	ArgumentList	""" \\t"""		662081	1					
ANR	662132	Argument	""" \\t"""		662081	0					
ANR	662133	PrimaryExpression	""" \\t"""		662081	0					
ANR	662134	Argument	charNum + 1		662081	1					
ANR	662135	AdditiveExpression	charNum + 1		662081	0		+			
ANR	662136	Identifier	charNum		662081	0					
ANR	662137	PrimaryExpression	1		662081	1					
ANR	662138	IfStatement	if ( nextNum == string :: npos )		662081	3					
ANR	662139	Condition	nextNum == string :: npos	7385:5:212890:212912	662081	0	True				
ANR	662140	EqualityExpression	nextNum == string :: npos		662081	0		==			
ANR	662141	Identifier	nextNum		662081	0					
ANR	662142	Identifier	string :: npos		662081	1					
ANR	662143	ReturnStatement	return false ;	7386:2:212917:212929	662081	1	True				
ANR	662144	Identifier	false		662081	0					
ANR	662145	IfStatement	if ( ! isLegalNameChar ( currentLine [ nextNum ] ) )		662081	4					
ANR	662146	Condition	! isLegalNameChar ( currentLine [ nextNum ] )	7388:5:212937:212974	662081	0	True				
ANR	662147	UnaryOperationExpression	! isLegalNameChar ( currentLine [ nextNum ] )		662081	0					
ANR	662148	UnaryOperator	!		662081	0					
ANR	662149	CallExpression	isLegalNameChar ( currentLine [ nextNum ] )		662081	1					
ANR	662150	Callee	isLegalNameChar		662081	0					
ANR	662151	Identifier	isLegalNameChar		662081	0					
ANR	662152	ArgumentList	currentLine [ nextNum ]		662081	1					
ANR	662153	Argument	currentLine [ nextNum ]		662081	0					
ANR	662154	ArrayIndexing	currentLine [ nextNum ]		662081	0					
ANR	662155	Identifier	currentLine		662081	0					
ANR	662156	Identifier	nextNum		662081	1					
ANR	662157	ReturnStatement	return false ;	7389:2:212979:212991	662081	1	True				
ANR	662158	Identifier	false		662081	0					
ANR	662159	WhileStatement	while ( nextNum < currentLine . length ( ) )		662081	5					
ANR	662160	Condition	nextNum < currentLine . length ( )	7392:8:213044:213073	662081	0	True				
ANR	662161	RelationalExpression	nextNum < currentLine . length ( )		662081	0		<			
ANR	662162	Identifier	nextNum		662081	0					
ANR	662163	CallExpression	currentLine . length ( )		662081	1					
ANR	662164	Callee	currentLine . length		662081	0					
ANR	662165	MemberAccess	currentLine . length		662081	0					
ANR	662166	Identifier	currentLine		662081	0					
ANR	662167	Identifier	length		662081	1					
ANR	662168	ArgumentList			662081	1					
ANR	662169	CompoundStatement		15:1:413:413	662081	1					
ANR	662170	IfStatement	if ( ! isLegalNameChar ( currentLine [ nextNum ] ) && ! isWhiteSpace ( currentLine [ nextNum ] ) )		662081	0					
ANR	662171	Condition	! isLegalNameChar ( currentLine [ nextNum ] ) && ! isWhiteSpace ( currentLine [ nextNum ] )	7394:6:213085:213171	662081	0	True				
ANR	662172	AndExpression	! isLegalNameChar ( currentLine [ nextNum ] ) && ! isWhiteSpace ( currentLine [ nextNum ] )		662081	0		&&			
ANR	662173	UnaryOperationExpression	! isLegalNameChar ( currentLine [ nextNum ] )		662081	0					
ANR	662174	UnaryOperator	!		662081	0					
ANR	662175	CallExpression	isLegalNameChar ( currentLine [ nextNum ] )		662081	1					
ANR	662176	Callee	isLegalNameChar		662081	0					
ANR	662177	Identifier	isLegalNameChar		662081	0					
ANR	662178	ArgumentList	currentLine [ nextNum ]		662081	1					
ANR	662179	Argument	currentLine [ nextNum ]		662081	0					
ANR	662180	ArrayIndexing	currentLine [ nextNum ]		662081	0					
ANR	662181	Identifier	currentLine		662081	0					
ANR	662182	Identifier	nextNum		662081	1					
ANR	662183	UnaryOperationExpression	! isWhiteSpace ( currentLine [ nextNum ] )		662081	1					
ANR	662184	UnaryOperator	!		662081	0					
ANR	662185	CallExpression	isWhiteSpace ( currentLine [ nextNum ] )		662081	1					
ANR	662186	Callee	isWhiteSpace		662081	0					
ANR	662187	Identifier	isWhiteSpace		662081	0					
ANR	662188	ArgumentList	currentLine [ nextNum ]		662081	1					
ANR	662189	Argument	currentLine [ nextNum ]		662081	0					
ANR	662190	ArrayIndexing	currentLine [ nextNum ]		662081	0					
ANR	662191	Identifier	currentLine		662081	0					
ANR	662192	Identifier	nextNum		662081	1					
ANR	662193	BreakStatement	break ;	7396:3:213177:213182	662081	1	True				
ANR	662194	ExpressionStatement	nextNum ++	7397:2:213186:213195	662081	1	True				
ANR	662195	PostIncDecOperationExpression	nextNum ++		662081	0					
ANR	662196	Identifier	nextNum		662081	0					
ANR	662197	IncDec	++		662081	1					
ANR	662198	IfStatement	"if ( currentLine [ nextNum ] == ',' || currentLine [ nextNum ] == '}' || currentLine [ nextNum ] == ')' || currentLine [ nextNum ] == '(' )"		662081	6					
ANR	662199	Condition	"currentLine [ nextNum ] == ',' || currentLine [ nextNum ] == '}' || currentLine [ nextNum ] == ')' || currentLine [ nextNum ] == '('"	7401:5:213257:213403	662081	0	True				
ANR	662200	OrExpression	"currentLine [ nextNum ] == ',' || currentLine [ nextNum ] == '}' || currentLine [ nextNum ] == ')' || currentLine [ nextNum ] == '('"		662081	0		||			
ANR	662201	EqualityExpression	"currentLine [ nextNum ] == ','"		662081	0		==			
ANR	662202	ArrayIndexing	currentLine [ nextNum ]		662081	0					
ANR	662203	Identifier	currentLine		662081	0					
ANR	662204	Identifier	nextNum		662081	1					
ANR	662205	PrimaryExpression	"','"		662081	1					
ANR	662206	OrExpression	currentLine [ nextNum ] == '}' || currentLine [ nextNum ] == ')' || currentLine [ nextNum ] == '('		662081	1		||			
ANR	662207	EqualityExpression	currentLine [ nextNum ] == '}'		662081	0		==			
ANR	662208	ArrayIndexing	currentLine [ nextNum ]		662081	0					
ANR	662209	Identifier	currentLine		662081	0					
ANR	662210	Identifier	nextNum		662081	1					
ANR	662211	PrimaryExpression	'}'		662081	1					
ANR	662212	OrExpression	currentLine [ nextNum ] == ')' || currentLine [ nextNum ] == '('		662081	1		||			
ANR	662213	EqualityExpression	currentLine [ nextNum ] == ')'		662081	0		==			
ANR	662214	ArrayIndexing	currentLine [ nextNum ]		662081	0					
ANR	662215	Identifier	currentLine		662081	0					
ANR	662216	Identifier	nextNum		662081	1					
ANR	662217	PrimaryExpression	')'		662081	1					
ANR	662218	EqualityExpression	currentLine [ nextNum ] == '('		662081	1		==			
ANR	662219	ArrayIndexing	currentLine [ nextNum ]		662081	0					
ANR	662220	Identifier	currentLine		662081	0					
ANR	662221	Identifier	nextNum		662081	1					
ANR	662222	PrimaryExpression	'('		662081	1					
ANR	662223	ReturnStatement	return true ;	7405:2:213408:213419	662081	1	True				
ANR	662224	Identifier	true		662081	0					
ANR	662225	ReturnStatement	return false ;	7406:1:213422:213434	662081	7	True				
ANR	662226	Identifier	false		662081	0					
ANR	662227	ReturnType	bool		662081	1					
ANR	662228	Identifier	ASFormatter :: isArrayOperator		662081	2					
ANR	662229	ParameterList			662081	3					
ANR	662230	CFGEntryNode	ENTRY		662081		True				
ANR	662231	CFGExitNode	EXIT		662081		True				
ANR	662232	Symbol	currentChar		662081						
ANR	662233	Symbol	braceTypeStack		662081						
ANR	662234	Symbol	nextNum		662081						
ANR	662235	Symbol	* braceTypeStack		662081						
ANR	662236	Symbol	ARRAY_TYPE		662081						
ANR	662237	Symbol	string :: npos		662081						
ANR	662238	Symbol	false		662081						
ANR	662239	Symbol	isLegalNameChar		662081						
ANR	662240	Symbol	* nextNum		662081						
ANR	662241	Symbol	currentLine . find_first_not_of		662081						
ANR	662242	Symbol	braceTypeStack -> back		662081						
ANR	662243	Symbol	isWhiteSpace		662081						
ANR	662244	Symbol	* currentLine		662081						
ANR	662245	Symbol	currentLine . length		662081						
ANR	662246	Symbol	true		662081						
ANR	662247	Symbol	isBraceType		662081						
ANR	662248	Symbol	charNum		662081						
ANR	662249	Symbol	currentLine		662081						
ANR	662250	Function	ASFormatter :: resetEndOfStatement	7410:0:213503:214200							
ANR	662251	FunctionDef	ASFormatter :: resetEndOfStatement ()		662250	0					
ANR	662252	CompoundStatement		7411:0:213543:214200	662250	0					
ANR	662253	ExpressionStatement	foundQuestionMark = false	7412:1:213546:213571	662250	0	True				
ANR	662254	AssignmentExpression	foundQuestionMark = false		662250	0		=			
ANR	662255	Identifier	foundQuestionMark		662250	0					
ANR	662256	Identifier	false		662250	1					
ANR	662257	ExpressionStatement	foundNamespaceHeader = false	7413:1:213574:213602	662250	1	True				
ANR	662258	AssignmentExpression	foundNamespaceHeader = false		662250	0		=			
ANR	662259	Identifier	foundNamespaceHeader		662250	0					
ANR	662260	Identifier	false		662250	1					
ANR	662261	ExpressionStatement	foundClassHeader = false	7414:1:213605:213629	662250	2	True				
ANR	662262	AssignmentExpression	foundClassHeader = false		662250	0		=			
ANR	662263	Identifier	foundClassHeader		662250	0					
ANR	662264	Identifier	false		662250	1					
ANR	662265	ExpressionStatement	foundStructHeader = false	7415:1:213632:213657	662250	3	True				
ANR	662266	AssignmentExpression	foundStructHeader = false		662250	0		=			
ANR	662267	Identifier	foundStructHeader		662250	0					
ANR	662268	Identifier	false		662250	1					
ANR	662269	ExpressionStatement	foundInterfaceHeader = false	7416:1:213660:213688	662250	4	True				
ANR	662270	AssignmentExpression	foundInterfaceHeader = false		662250	0		=			
ANR	662271	Identifier	foundInterfaceHeader		662250	0					
ANR	662272	Identifier	false		662250	1					
ANR	662273	ExpressionStatement	foundPreDefinitionHeader = false	7417:1:213691:213723	662250	5	True				
ANR	662274	AssignmentExpression	foundPreDefinitionHeader = false		662250	0		=			
ANR	662275	Identifier	foundPreDefinitionHeader		662250	0					
ANR	662276	Identifier	false		662250	1					
ANR	662277	ExpressionStatement	foundPreCommandHeader = false	7418:1:213726:213755	662250	6	True				
ANR	662278	AssignmentExpression	foundPreCommandHeader = false		662250	0		=			
ANR	662279	Identifier	foundPreCommandHeader		662250	0					
ANR	662280	Identifier	false		662250	1					
ANR	662281	ExpressionStatement	foundPreCommandMacro = false	7419:1:213758:213786	662250	7	True				
ANR	662282	AssignmentExpression	foundPreCommandMacro = false		662250	0		=			
ANR	662283	Identifier	foundPreCommandMacro		662250	0					
ANR	662284	Identifier	false		662250	1					
ANR	662285	ExpressionStatement	foundTrailingReturnType = false	7420:1:213789:213820	662250	8	True				
ANR	662286	AssignmentExpression	foundTrailingReturnType = false		662250	0		=			
ANR	662287	Identifier	foundTrailingReturnType		662250	0					
ANR	662288	Identifier	false		662250	1					
ANR	662289	ExpressionStatement	foundCastOperator = false	7421:1:213823:213848	662250	9	True				
ANR	662290	AssignmentExpression	foundCastOperator = false		662250	0		=			
ANR	662291	Identifier	foundCastOperator		662250	0					
ANR	662292	Identifier	false		662250	1					
ANR	662293	ExpressionStatement	isInPotentialCalculation = false	7422:1:213851:213883	662250	10	True				
ANR	662294	AssignmentExpression	isInPotentialCalculation = false		662250	0		=			
ANR	662295	Identifier	isInPotentialCalculation		662250	0					
ANR	662296	Identifier	false		662250	1					
ANR	662297	ExpressionStatement	isSharpAccessor = false	7423:1:213886:213909	662250	11	True				
ANR	662298	AssignmentExpression	isSharpAccessor = false		662250	0		=			
ANR	662299	Identifier	isSharpAccessor		662250	0					
ANR	662300	Identifier	false		662250	1					
ANR	662301	ExpressionStatement	isSharpDelegate = false	7424:1:213912:213935	662250	12	True				
ANR	662302	AssignmentExpression	isSharpDelegate = false		662250	0		=			
ANR	662303	Identifier	isSharpDelegate		662250	0					
ANR	662304	Identifier	false		662250	1					
ANR	662305	ExpressionStatement	isInObjCMethodDefinition = false	7425:1:213938:213970	662250	13	True				
ANR	662306	AssignmentExpression	isInObjCMethodDefinition = false		662250	0		=			
ANR	662307	Identifier	isInObjCMethodDefinition		662250	0					
ANR	662308	Identifier	false		662250	1					
ANR	662309	ExpressionStatement	isInObjCInterface = false	7426:1:213973:213998	662250	14	True				
ANR	662310	AssignmentExpression	isInObjCInterface = false		662250	0		=			
ANR	662311	Identifier	isInObjCInterface		662250	0					
ANR	662312	Identifier	false		662250	1					
ANR	662313	ExpressionStatement	isInObjCSelector = false	7427:1:214001:214025	662250	15	True				
ANR	662314	AssignmentExpression	isInObjCSelector = false		662250	0		=			
ANR	662315	Identifier	isInObjCSelector		662250	0					
ANR	662316	Identifier	false		662250	1					
ANR	662317	ExpressionStatement	isInEnum = false	7428:1:214028:214044	662250	16	True				
ANR	662318	AssignmentExpression	isInEnum = false		662250	0		=			
ANR	662319	Identifier	isInEnum		662250	0					
ANR	662320	Identifier	false		662250	1					
ANR	662321	ExpressionStatement	isInExternC = false	7429:1:214047:214066	662250	17	True				
ANR	662322	AssignmentExpression	isInExternC = false		662250	0		=			
ANR	662323	Identifier	isInExternC		662250	0					
ANR	662324	Identifier	false		662250	1					
ANR	662325	ExpressionStatement	elseHeaderFollowsComments = false	7430:1:214069:214102	662250	18	True				
ANR	662326	AssignmentExpression	elseHeaderFollowsComments = false		662250	0		=			
ANR	662327	Identifier	elseHeaderFollowsComments		662250	0					
ANR	662328	Identifier	false		662250	1					
ANR	662329	ExpressionStatement	nonInStatementBrace = 0	7431:1:214105:214128	662250	19	True				
ANR	662330	AssignmentExpression	nonInStatementBrace = 0		662250	0		=			
ANR	662331	Identifier	nonInStatementBrace		662250	0					
ANR	662332	PrimaryExpression	0		662250	1					
ANR	662333	WhileStatement	while ( ! questionMarkStack -> empty ( ) )		662250	20					
ANR	662334	Condition	! questionMarkStack -> empty ( )	7432:8:214138:214164	662250	0	True				
ANR	662335	UnaryOperationExpression	! questionMarkStack -> empty ( )		662250	0					
ANR	662336	UnaryOperator	!		662250	0					
ANR	662337	CallExpression	questionMarkStack -> empty ( )		662250	1					
ANR	662338	Callee	questionMarkStack -> empty		662250	0					
ANR	662339	PtrMemberAccess	questionMarkStack -> empty		662250	0					
ANR	662340	Identifier	questionMarkStack		662250	0					
ANR	662341	Identifier	empty		662250	1					
ANR	662342	ArgumentList			662250	1					
ANR	662343	ExpressionStatement	questionMarkStack -> pop_back ( )	7433:2:214169:214198	662250	1	True				
ANR	662344	CallExpression	questionMarkStack -> pop_back ( )		662250	0					
ANR	662345	Callee	questionMarkStack -> pop_back		662250	0					
ANR	662346	PtrMemberAccess	questionMarkStack -> pop_back		662250	0					
ANR	662347	Identifier	questionMarkStack		662250	0					
ANR	662348	Identifier	pop_back		662250	1					
ANR	662349	ArgumentList			662250	1					
ANR	662350	ReturnType	void		662250	1					
ANR	662351	Identifier	ASFormatter :: resetEndOfStatement		662250	2					
ANR	662352	ParameterList			662250	3					
ANR	662353	CFGEntryNode	ENTRY		662250		True				
ANR	662354	CFGExitNode	EXIT		662250		True				
ANR	662355	Symbol	nonInStatementBrace		662250						
ANR	662356	Symbol	foundClassHeader		662250						
ANR	662357	Symbol	isInExternC		662250						
ANR	662358	Symbol	foundStructHeader		662250						
ANR	662359	Symbol	questionMarkStack		662250						
ANR	662360	Symbol	foundQuestionMark		662250						
ANR	662361	Symbol	isSharpDelegate		662250						
ANR	662362	Symbol	foundPreCommandMacro		662250						
ANR	662363	Symbol	false		662250						
ANR	662364	Symbol	questionMarkStack -> empty		662250						
ANR	662365	Symbol	isInObjCInterface		662250						
ANR	662366	Symbol	isInPotentialCalculation		662250						
ANR	662367	Symbol	elseHeaderFollowsComments		662250						
ANR	662368	Symbol	foundNamespaceHeader		662250						
ANR	662369	Symbol	foundPreCommandHeader		662250						
ANR	662370	Symbol	* questionMarkStack		662250						
ANR	662371	Symbol	isInEnum		662250						
ANR	662372	Symbol	isSharpAccessor		662250						
ANR	662373	Symbol	isInObjCSelector		662250						
ANR	662374	Symbol	foundInterfaceHeader		662250						
ANR	662375	Symbol	foundPreDefinitionHeader		662250						
ANR	662376	Symbol	foundTrailingReturnType		662250						
ANR	662377	Symbol	foundCastOperator		662250						
ANR	662378	Symbol	isInObjCMethodDefinition		662250						
ANR	662379	Function	ASFormatter :: findObjCColonAlignment	7437:0:214284:217173							
ANR	662380	FunctionDef	ASFormatter :: findObjCColonAlignment ()		662379	0					
ANR	662381	CompoundStatement		7438:0:214332:217173	662379	0					
ANR	662382	ExpressionStatement	assert ( currentChar == '+' || currentChar == '-' || currentChar == '[' )	7439:1:214335:214405	662379	0	True				
ANR	662383	CallExpression	assert ( currentChar == '+' || currentChar == '-' || currentChar == '[' )		662379	0					
ANR	662384	Callee	assert		662379	0					
ANR	662385	Identifier	assert		662379	0					
ANR	662386	ArgumentList	currentChar == '+' || currentChar == '-' || currentChar == '['		662379	1					
ANR	662387	Argument	currentChar == '+' || currentChar == '-' || currentChar == '['		662379	0					
ANR	662388	OrExpression	currentChar == '+' || currentChar == '-' || currentChar == '['		662379	0		||			
ANR	662389	EqualityExpression	currentChar == '+'		662379	0		==			
ANR	662390	Identifier	currentChar		662379	0					
ANR	662391	PrimaryExpression	'+'		662379	1					
ANR	662392	OrExpression	currentChar == '-' || currentChar == '['		662379	1		||			
ANR	662393	EqualityExpression	currentChar == '-'		662379	0		==			
ANR	662394	Identifier	currentChar		662379	0					
ANR	662395	PrimaryExpression	'-'		662379	1					
ANR	662396	EqualityExpression	currentChar == '['		662379	1		==			
ANR	662397	Identifier	currentChar		662379	0					
ANR	662398	PrimaryExpression	'['		662379	1					
ANR	662399	ExpressionStatement	assert ( getAlignMethodColon ( ) )	7440:1:214408:214437	662379	1	True				
ANR	662400	CallExpression	assert ( getAlignMethodColon ( ) )		662379	0					
ANR	662401	Callee	assert		662379	0					
ANR	662402	Identifier	assert		662379	0					
ANR	662403	ArgumentList	getAlignMethodColon ( )		662379	1					
ANR	662404	Argument	getAlignMethodColon ( )		662379	0					
ANR	662405	CallExpression	getAlignMethodColon ( )		662379	0					
ANR	662406	Callee	getAlignMethodColon		662379	0					
ANR	662407	Identifier	getAlignMethodColon		662379	0					
ANR	662408	ArgumentList			662379	1					
ANR	662409	IdentifierDeclStatement	bool isFirstLine = true ;	7442:1:214441:214464	662379	2	True				
ANR	662410	IdentifierDecl	isFirstLine = true		662379	0					
ANR	662411	IdentifierDeclType	bool		662379	0					
ANR	662412	Identifier	isFirstLine		662379	1					
ANR	662413	AssignmentExpression	isFirstLine = true		662379	2		=			
ANR	662414	Identifier	true		662379	0					
ANR	662415	Identifier	true		662379	1					
ANR	662416	IdentifierDeclStatement	bool haveFirstColon = false ;	7443:1:214467:214494	662379	3	True				
ANR	662417	IdentifierDecl	haveFirstColon = false		662379	0					
ANR	662418	IdentifierDeclType	bool		662379	0					
ANR	662419	Identifier	haveFirstColon		662379	1					
ANR	662420	AssignmentExpression	haveFirstColon = false		662379	2		=			
ANR	662421	Identifier	false		662379	0					
ANR	662422	Identifier	false		662379	1					
ANR	662423	IdentifierDeclStatement	bool foundMethodColon = false ;	7444:1:214497:214526	662379	4	True				
ANR	662424	IdentifierDecl	foundMethodColon = false		662379	0					
ANR	662425	IdentifierDeclType	bool		662379	0					
ANR	662426	Identifier	foundMethodColon		662379	1					
ANR	662427	AssignmentExpression	foundMethodColon = false		662379	2		=			
ANR	662428	Identifier	false		662379	0					
ANR	662429	Identifier	false		662379	1					
ANR	662430	IdentifierDeclStatement	bool isInComment_ = false ;	7445:1:214529:214554	662379	5	True				
ANR	662431	IdentifierDecl	isInComment_ = false		662379	0					
ANR	662432	IdentifierDeclType	bool		662379	0					
ANR	662433	Identifier	isInComment_		662379	1					
ANR	662434	AssignmentExpression	isInComment_ = false		662379	2		=			
ANR	662435	Identifier	false		662379	0					
ANR	662436	Identifier	false		662379	1					
ANR	662437	IdentifierDeclStatement	bool isInQuote_ = false ;	7446:1:214557:214580	662379	6	True				
ANR	662438	IdentifierDecl	isInQuote_ = false		662379	0					
ANR	662439	IdentifierDeclType	bool		662379	0					
ANR	662440	Identifier	isInQuote_		662379	1					
ANR	662441	AssignmentExpression	isInQuote_ = false		662379	2		=			
ANR	662442	Identifier	false		662379	0					
ANR	662443	Identifier	false		662379	1					
ANR	662444	IdentifierDeclStatement	char quoteChar_ = ' ' ;	7447:1:214583:214604	662379	7	True				
ANR	662445	IdentifierDecl	quoteChar_ = ' '		662379	0					
ANR	662446	IdentifierDeclType	char		662379	0					
ANR	662447	Identifier	quoteChar_		662379	1					
ANR	662448	AssignmentExpression	quoteChar_ = ' '		662379	2		=			
ANR	662449	Identifier	quoteChar_		662379	0					
ANR	662450	PrimaryExpression	' '		662379	1					
ANR	662451	IdentifierDeclStatement	int sqBracketCount = 0 ;	7448:1:214607:214630	662379	8	True				
ANR	662452	IdentifierDecl	sqBracketCount = 0		662379	0					
ANR	662453	IdentifierDeclType	int		662379	0					
ANR	662454	Identifier	sqBracketCount		662379	1					
ANR	662455	AssignmentExpression	sqBracketCount = 0		662379	2		=			
ANR	662456	Identifier	sqBracketCount		662379	0					
ANR	662457	PrimaryExpression	0		662379	1					
ANR	662458	IdentifierDeclStatement	int colonAdjust = 0 ;	7449:1:214633:214653	662379	9	True				
ANR	662459	IdentifierDecl	colonAdjust = 0		662379	0					
ANR	662460	IdentifierDeclType	int		662379	0					
ANR	662461	Identifier	colonAdjust		662379	1					
ANR	662462	AssignmentExpression	colonAdjust = 0		662379	2		=			
ANR	662463	Identifier	colonAdjust		662379	0					
ANR	662464	PrimaryExpression	0		662379	1					
ANR	662465	IdentifierDeclStatement	int colonAlign = 0 ;	7450:1:214656:214675	662379	10	True				
ANR	662466	IdentifierDecl	colonAlign = 0		662379	0					
ANR	662467	IdentifierDeclType	int		662379	0					
ANR	662468	Identifier	colonAlign		662379	1					
ANR	662469	AssignmentExpression	colonAlign = 0		662379	2		=			
ANR	662470	Identifier	colonAlign		662379	0					
ANR	662471	PrimaryExpression	0		662379	1					
ANR	662472	IdentifierDeclStatement	string nextLine_ = currentLine ;	7451:1:214678:214708	662379	11	True				
ANR	662473	IdentifierDecl	nextLine_ = currentLine		662379	0					
ANR	662474	IdentifierDeclType	string		662379	0					
ANR	662475	Identifier	nextLine_		662379	1					
ANR	662476	AssignmentExpression	nextLine_ = currentLine		662379	2		=			
ANR	662477	Identifier	currentLine		662379	0					
ANR	662478	Identifier	currentLine		662379	1					
ANR	662479	IdentifierDeclStatement	ASPeekStream stream ( sourceIterator ) ;	7452:1:214711:214746	662379	12	True				
ANR	662480	IdentifierDecl	stream ( sourceIterator )		662379	0					
ANR	662481	IdentifierDeclType	ASPeekStream		662379	0					
ANR	662482	Identifier	stream		662379	1					
ANR	662483	Identifier	sourceIterator		662379	2					
ANR	662484	WhileStatement	while ( sourceIterator -> hasMoreLines ( ) || isFirstLine )		662379	13					
ANR	662485	Condition	sourceIterator -> hasMoreLines ( ) || isFirstLine	7455:8:214776:214820	662379	0	True				
ANR	662486	OrExpression	sourceIterator -> hasMoreLines ( ) || isFirstLine		662379	0		||			
ANR	662487	CallExpression	sourceIterator -> hasMoreLines ( )		662379	0					
ANR	662488	Callee	sourceIterator -> hasMoreLines		662379	0					
ANR	662489	PtrMemberAccess	sourceIterator -> hasMoreLines		662379	0					
ANR	662490	Identifier	sourceIterator		662379	0					
ANR	662491	Identifier	hasMoreLines		662379	1					
ANR	662492	ArgumentList			662379	1					
ANR	662493	Identifier	isFirstLine		662379	1					
ANR	662494	CompoundStatement		19:1:491:491	662379	1					
ANR	662495	IfStatement	if ( ! isFirstLine )		662379	0					
ANR	662496	Condition	! isFirstLine	7457:6:214832:214843	662379	0	True				
ANR	662497	UnaryOperationExpression	! isFirstLine		662379	0					
ANR	662498	UnaryOperator	!		662379	0					
ANR	662499	Identifier	isFirstLine		662379	1					
ANR	662500	ExpressionStatement	nextLine_ = stream . peekNextLine ( )	7458:3:214849:214882	662379	1	True				
ANR	662501	AssignmentExpression	nextLine_ = stream . peekNextLine ( )		662379	0		=			
ANR	662502	Identifier	nextLine_		662379	0					
ANR	662503	CallExpression	stream . peekNextLine ( )		662379	1					
ANR	662504	Callee	stream . peekNextLine		662379	0					
ANR	662505	MemberAccess	stream . peekNextLine		662379	0					
ANR	662506	Identifier	stream		662379	0					
ANR	662507	Identifier	peekNextLine		662379	1					
ANR	662508	ArgumentList			662379	1					
ANR	662509	ExpressionStatement	haveFirstColon = false	7460:2:214906:214928	662379	1	True				
ANR	662510	AssignmentExpression	haveFirstColon = false		662379	0		=			
ANR	662511	Identifier	haveFirstColon		662379	0					
ANR	662512	Identifier	false		662379	1					
ANR	662513	ExpressionStatement	nextLine_ = ASBeautifier :: trim ( nextLine_ )	7461:2:214932:214973	662379	2	True				
ANR	662514	AssignmentExpression	nextLine_ = ASBeautifier :: trim ( nextLine_ )		662379	0		=			
ANR	662515	Identifier	nextLine_		662379	0					
ANR	662516	CallExpression	ASBeautifier :: trim ( nextLine_ )		662379	1					
ANR	662517	Callee	ASBeautifier :: trim		662379	0					
ANR	662518	Identifier	ASBeautifier :: trim		662379	0					
ANR	662519	ArgumentList	nextLine_		662379	1					
ANR	662520	Argument	nextLine_		662379	0					
ANR	662521	Identifier	nextLine_		662379	0					
ANR	662522	ForStatement	for ( size_t i = 0 ; i < nextLine_ . length ( ) ; i ++ )		662379	3					
ANR	662523	ForInit	size_t i = 0 ;	7462:7:214982:214994	662379	0	True				
ANR	662524	IdentifierDeclStatement	size_t i = 0 ;		662379	0					
ANR	662525	IdentifierDecl	i = 0		662379	0					
ANR	662526	IdentifierDeclType	size_t		662379	0					
ANR	662527	Identifier	i		662379	1					
ANR	662528	AssignmentExpression	i = 0		662379	2		=			
ANR	662529	Identifier	i		662379	0					
ANR	662530	PrimaryExpression	0		662379	1					
ANR	662531	Condition	i < nextLine_ . length ( )	7462:21:214996:215017	662379	1	True				
ANR	662532	RelationalExpression	i < nextLine_ . length ( )		662379	0		<			
ANR	662533	Identifier	i		662379	0					
ANR	662534	CallExpression	nextLine_ . length ( )		662379	1					
ANR	662535	Callee	nextLine_ . length		662379	0					
ANR	662536	MemberAccess	nextLine_ . length		662379	0					
ANR	662537	Identifier	nextLine_		662379	0					
ANR	662538	Identifier	length		662379	1					
ANR	662539	ArgumentList			662379	1					
ANR	662540	PostIncDecOperationExpression	i ++	7462:45:215020:215022	662379	2	True				
ANR	662541	Identifier	i		662379	0					
ANR	662542	IncDec	++		662379	1					
ANR	662543	CompoundStatement		26:2:694:694	662379	3					
ANR	662544	IfStatement	if ( isWhiteSpace ( nextLine_ [ i ] ) )		662379	0					
ANR	662545	Condition	isWhiteSpace ( nextLine_ [ i ] )	7464:7:215036:215061	662379	0	True				
ANR	662546	CallExpression	isWhiteSpace ( nextLine_ [ i ] )		662379	0					
ANR	662547	Callee	isWhiteSpace		662379	0					
ANR	662548	Identifier	isWhiteSpace		662379	0					
ANR	662549	ArgumentList	nextLine_ [ i ]		662379	1					
ANR	662550	Argument	nextLine_ [ i ]		662379	0					
ANR	662551	ArrayIndexing	nextLine_ [ i ]		662379	0					
ANR	662552	Identifier	nextLine_		662379	0					
ANR	662553	Identifier	i		662379	1					
ANR	662554	ContinueStatement	continue ;	7465:4:215068:215076	662379	1	True				
ANR	662555	IfStatement	"if ( nextLine_ . compare ( i , 2 , ""/*"" ) == 0 )"		662379	1					
ANR	662556	Condition	"nextLine_ . compare ( i , 2 , ""/*"" ) == 0"	7466:7:215085:215118	662379	0	True				
ANR	662557	EqualityExpression	"nextLine_ . compare ( i , 2 , ""/*"" ) == 0"		662379	0		==			
ANR	662558	CallExpression	"nextLine_ . compare ( i , 2 , ""/*"" )"		662379	0					
ANR	662559	Callee	nextLine_ . compare		662379	0					
ANR	662560	MemberAccess	nextLine_ . compare		662379	0					
ANR	662561	Identifier	nextLine_		662379	0					
ANR	662562	Identifier	compare		662379	1					
ANR	662563	ArgumentList	i		662379	1					
ANR	662564	Argument	i		662379	0					
ANR	662565	Identifier	i		662379	0					
ANR	662566	Argument	2		662379	1					
ANR	662567	PrimaryExpression	2		662379	0					
ANR	662568	Argument	"""/*"""		662379	2					
ANR	662569	PrimaryExpression	"""/*"""		662379	0					
ANR	662570	PrimaryExpression	0		662379	1					
ANR	662571	ExpressionStatement	isInComment_ = true	7467:4:215125:215144	662379	1	True				
ANR	662572	AssignmentExpression	isInComment_ = true		662379	0		=			
ANR	662573	Identifier	isInComment_		662379	0					
ANR	662574	Identifier	true		662379	1					
ANR	662575	IfStatement	if ( isInComment_ )		662379	2					
ANR	662576	Condition	isInComment_	7468:7:215153:215164	662379	0	True				
ANR	662577	Identifier	isInComment_		662379	0					
ANR	662578	CompoundStatement		32:3:837:837	662379	1					
ANR	662579	IfStatement	"if ( nextLine_ . compare ( i , 2 , ""*/"" ) == 0 )"		662379	0					
ANR	662580	Condition	"nextLine_ . compare ( i , 2 , ""*/"" ) == 0"	7470:8:215180:215213	662379	0	True				
ANR	662581	EqualityExpression	"nextLine_ . compare ( i , 2 , ""*/"" ) == 0"		662379	0		==			
ANR	662582	CallExpression	"nextLine_ . compare ( i , 2 , ""*/"" )"		662379	0					
ANR	662583	Callee	nextLine_ . compare		662379	0					
ANR	662584	MemberAccess	nextLine_ . compare		662379	0					
ANR	662585	Identifier	nextLine_		662379	0					
ANR	662586	Identifier	compare		662379	1					
ANR	662587	ArgumentList	i		662379	1					
ANR	662588	Argument	i		662379	0					
ANR	662589	Identifier	i		662379	0					
ANR	662590	Argument	2		662379	1					
ANR	662591	PrimaryExpression	2		662379	0					
ANR	662592	Argument	"""*/"""		662379	2					
ANR	662593	PrimaryExpression	"""*/"""		662379	0					
ANR	662594	PrimaryExpression	0		662379	1					
ANR	662595	CompoundStatement		34:4:887:887	662379	1					
ANR	662596	ExpressionStatement	isInComment_ = false	7472:5:215227:215247	662379	0	True				
ANR	662597	AssignmentExpression	isInComment_ = false		662379	0		=			
ANR	662598	Identifier	isInComment_		662379	0					
ANR	662599	Identifier	false		662379	1					
ANR	662600	ExpressionStatement	++ i	7473:5:215254:215257	662379	1	True				
ANR	662601	UnaryExpression	++ i		662379	0					
ANR	662602	IncDec	++		662379	0					
ANR	662603	Identifier	i		662379	1					
ANR	662604	ContinueStatement	continue ;	7475:4:215269:215277	662379	1	True				
ANR	662605	IfStatement	if ( nextLine_ [ i ] == '\\\\' )		662379	3					
ANR	662606	Condition	nextLine_ [ i ] == '\\\\'	7477:7:215291:215310	662379	0	True				
ANR	662607	EqualityExpression	nextLine_ [ i ] == '\\\\'		662379	0		==			
ANR	662608	ArrayIndexing	nextLine_ [ i ]		662379	0					
ANR	662609	Identifier	nextLine_		662379	0					
ANR	662610	Identifier	i		662379	1					
ANR	662611	PrimaryExpression	'\\\\'		662379	1					
ANR	662612	CompoundStatement		41:3:983:983	662379	1					
ANR	662613	ExpressionStatement	++ i	7479:4:215322:215325	662379	0	True				
ANR	662614	UnaryExpression	++ i		662379	0					
ANR	662615	IncDec	++		662379	0					
ANR	662616	Identifier	i		662379	1					
ANR	662617	ContinueStatement	continue ;	7480:4:215331:215339	662379	1	True				
ANR	662618	IfStatement	if ( isInQuote_ )		662379	4					
ANR	662619	Condition	isInQuote_	7482:7:215353:215362	662379	0	True				
ANR	662620	Identifier	isInQuote_		662379	0					
ANR	662621	CompoundStatement		46:3:1035:1035	662379	1					
ANR	662622	IfStatement	if ( nextLine_ [ i ] == quoteChar_ )		662379	0					
ANR	662623	Condition	nextLine_ [ i ] == quoteChar_	7484:8:215378:215403	662379	0	True				
ANR	662624	EqualityExpression	nextLine_ [ i ] == quoteChar_		662379	0		==			
ANR	662625	ArrayIndexing	nextLine_ [ i ]		662379	0					
ANR	662626	Identifier	nextLine_		662379	0					
ANR	662627	Identifier	i		662379	1					
ANR	662628	Identifier	quoteChar_		662379	1					
ANR	662629	ExpressionStatement	isInQuote_ = false	7485:5:215411:215429	662379	1	True				
ANR	662630	AssignmentExpression	isInQuote_ = false		662379	0		=			
ANR	662631	Identifier	isInQuote_		662379	0					
ANR	662632	Identifier	false		662379	1					
ANR	662633	ContinueStatement	continue ;	7486:4:215435:215443	662379	1	True				
ANR	662634	IfStatement	"if ( nextLine_ [ i ] == '""' || ( nextLine_ [ i ] == '\\'' && ! isDigitSeparator ( nextLine_ , i ) ) )"		662379	5					
ANR	662635	Condition	"nextLine_ [ i ] == '""' || ( nextLine_ [ i ] == '\\'' && ! isDigitSeparator ( nextLine_ , i ) )"	7489:7:215458:215548	662379	0	True				
ANR	662636	OrExpression	"nextLine_ [ i ] == '""' || ( nextLine_ [ i ] == '\\'' && ! isDigitSeparator ( nextLine_ , i ) )"		662379	0		||			
ANR	662637	EqualityExpression	"nextLine_ [ i ] == '""'"		662379	0		==			
ANR	662638	ArrayIndexing	nextLine_ [ i ]		662379	0					
ANR	662639	Identifier	nextLine_		662379	0					
ANR	662640	Identifier	i		662379	1					
ANR	662641	PrimaryExpression	"'""'"		662379	1					
ANR	662642	AndExpression	"nextLine_ [ i ] == '\\'' && ! isDigitSeparator ( nextLine_ , i )"		662379	1		&&			
ANR	662643	EqualityExpression	nextLine_ [ i ] == '\\''		662379	0		==			
ANR	662644	ArrayIndexing	nextLine_ [ i ]		662379	0					
ANR	662645	Identifier	nextLine_		662379	0					
ANR	662646	Identifier	i		662379	1					
ANR	662647	PrimaryExpression	'\\''		662379	1					
ANR	662648	UnaryOperationExpression	"! isDigitSeparator ( nextLine_ , i )"		662379	1					
ANR	662649	UnaryOperator	!		662379	0					
ANR	662650	CallExpression	"isDigitSeparator ( nextLine_ , i )"		662379	1					
ANR	662651	Callee	isDigitSeparator		662379	0					
ANR	662652	Identifier	isDigitSeparator		662379	0					
ANR	662653	ArgumentList	nextLine_		662379	1					
ANR	662654	Argument	nextLine_		662379	0					
ANR	662655	Identifier	nextLine_		662379	0					
ANR	662656	Argument	i		662379	1					
ANR	662657	Identifier	i		662379	0					
ANR	662658	CompoundStatement		54:3:1221:1221	662379	1					
ANR	662659	ExpressionStatement	isInQuote_ = true	7492:4:215560:215577	662379	0	True				
ANR	662660	AssignmentExpression	isInQuote_ = true		662379	0		=			
ANR	662661	Identifier	isInQuote_		662379	0					
ANR	662662	Identifier	true		662379	1					
ANR	662663	ExpressionStatement	quoteChar_ = nextLine_ [ i ]	7493:4:215583:215608	662379	1	True				
ANR	662664	AssignmentExpression	quoteChar_ = nextLine_ [ i ]		662379	0		=			
ANR	662665	Identifier	quoteChar_		662379	0					
ANR	662666	ArrayIndexing	nextLine_ [ i ]		662379	1					
ANR	662667	Identifier	nextLine_		662379	0					
ANR	662668	Identifier	i		662379	1					
ANR	662669	ContinueStatement	continue ;	7494:4:215614:215622	662379	2	True				
ANR	662670	IfStatement	"if ( nextLine_ . compare ( i , 2 , ""//"" ) == 0 )"		662379	6					
ANR	662671	Condition	"nextLine_ . compare ( i , 2 , ""//"" ) == 0"	7496:7:215636:215669	662379	0	True				
ANR	662672	EqualityExpression	"nextLine_ . compare ( i , 2 , ""//"" ) == 0"		662379	0		==			
ANR	662673	CallExpression	"nextLine_ . compare ( i , 2 , ""//"" )"		662379	0					
ANR	662674	Callee	nextLine_ . compare		662379	0					
ANR	662675	MemberAccess	nextLine_ . compare		662379	0					
ANR	662676	Identifier	nextLine_		662379	0					
ANR	662677	Identifier	compare		662379	1					
ANR	662678	ArgumentList	i		662379	1					
ANR	662679	Argument	i		662379	0					
ANR	662680	Identifier	i		662379	0					
ANR	662681	Argument	2		662379	1					
ANR	662682	PrimaryExpression	2		662379	0					
ANR	662683	Argument	"""//"""		662379	2					
ANR	662684	PrimaryExpression	"""//"""		662379	0					
ANR	662685	PrimaryExpression	0		662379	1					
ANR	662686	CompoundStatement		60:3:1342:1342	662379	1					
ANR	662687	ExpressionStatement	i = nextLine_ . length ( )	7498:4:215681:215703	662379	0	True				
ANR	662688	AssignmentExpression	i = nextLine_ . length ( )		662379	0		=			
ANR	662689	Identifier	i		662379	0					
ANR	662690	CallExpression	nextLine_ . length ( )		662379	1					
ANR	662691	Callee	nextLine_ . length		662379	0					
ANR	662692	MemberAccess	nextLine_ . length		662379	0					
ANR	662693	Identifier	nextLine_		662379	0					
ANR	662694	Identifier	length		662379	1					
ANR	662695	ArgumentList			662379	1					
ANR	662696	ContinueStatement	continue ;	7499:4:215709:215717	662379	1	True				
ANR	662697	IfStatement	if ( ( nextLine_ [ i ] == '{' && ( currentChar == '-' || currentChar == '+' ) ) || nextLine_ [ i ] == ';' )		662379	7					
ANR	662698	Condition	( nextLine_ [ i ] == '{' && ( currentChar == '-' || currentChar == '+' ) ) || nextLine_ [ i ] == ';'	7502:7:215762:215862	662379	0	True				
ANR	662699	OrExpression	( nextLine_ [ i ] == '{' && ( currentChar == '-' || currentChar == '+' ) ) || nextLine_ [ i ] == ';'		662379	0		||			
ANR	662700	AndExpression	nextLine_ [ i ] == '{' && ( currentChar == '-' || currentChar == '+' )		662379	0		&&			
ANR	662701	EqualityExpression	nextLine_ [ i ] == '{'		662379	0		==			
ANR	662702	ArrayIndexing	nextLine_ [ i ]		662379	0					
ANR	662703	Identifier	nextLine_		662379	0					
ANR	662704	Identifier	i		662379	1					
ANR	662705	PrimaryExpression	'{'		662379	1					
ANR	662706	OrExpression	currentChar == '-' || currentChar == '+'		662379	1		||			
ANR	662707	EqualityExpression	currentChar == '-'		662379	0		==			
ANR	662708	Identifier	currentChar		662379	0					
ANR	662709	PrimaryExpression	'-'		662379	1					
ANR	662710	EqualityExpression	currentChar == '+'		662379	1		==			
ANR	662711	Identifier	currentChar		662379	0					
ANR	662712	PrimaryExpression	'+'		662379	1					
ANR	662713	EqualityExpression	nextLine_ [ i ] == ';'		662379	1		==			
ANR	662714	ArrayIndexing	nextLine_ [ i ]		662379	0					
ANR	662715	Identifier	nextLine_		662379	0					
ANR	662716	Identifier	i		662379	1					
ANR	662717	PrimaryExpression	';'		662379	1					
ANR	662718	GotoStatement	goto EndOfWhileLoop ;	7504:4:215869:215888	662379	1	True				
ANR	662719	Identifier	EndOfWhileLoop		662379	0					
ANR	662720	IfStatement	if ( nextLine_ [ i ] == ']' )		662379	8					
ANR	662721	Condition	nextLine_ [ i ] == ']'	7505:7:215931:215949	662379	0	True				
ANR	662722	EqualityExpression	nextLine_ [ i ] == ']'		662379	0		==			
ANR	662723	ArrayIndexing	nextLine_ [ i ]		662379	0					
ANR	662724	Identifier	nextLine_		662379	0					
ANR	662725	Identifier	i		662379	1					
ANR	662726	PrimaryExpression	']'		662379	1					
ANR	662727	CompoundStatement		69:3:1622:1622	662379	1					
ANR	662728	ExpressionStatement	-- sqBracketCount	7507:4:215961:215977	662379	0	True				
ANR	662729	UnaryExpression	-- sqBracketCount		662379	0					
ANR	662730	IncDec	--		662379	0					
ANR	662731	Identifier	sqBracketCount		662379	1					
ANR	662732	IfStatement	if ( sqBracketCount == 0 )		662379	1					
ANR	662733	Condition	sqBracketCount == 0	7508:8:215987:216005	662379	0	True				
ANR	662734	EqualityExpression	sqBracketCount == 0		662379	0		==			
ANR	662735	Identifier	sqBracketCount		662379	0					
ANR	662736	PrimaryExpression	0		662379	1					
ANR	662737	GotoStatement	goto EndOfWhileLoop ;	7509:5:216013:216032	662379	1	True				
ANR	662738	Identifier	EndOfWhileLoop		662379	0					
ANR	662739	IfStatement	if ( nextLine_ [ i ] == '[' )		662379	9					
ANR	662740	Condition	nextLine_ [ i ] == '['	7511:7:216070:216088	662379	0	True				
ANR	662741	EqualityExpression	nextLine_ [ i ] == '['		662379	0		==			
ANR	662742	ArrayIndexing	nextLine_ [ i ]		662379	0					
ANR	662743	Identifier	nextLine_		662379	0					
ANR	662744	Identifier	i		662379	1					
ANR	662745	PrimaryExpression	'['		662379	1					
ANR	662746	ExpressionStatement	++ sqBracketCount	7512:4:216095:216111	662379	1	True				
ANR	662747	UnaryExpression	++ sqBracketCount		662379	0					
ANR	662748	IncDec	++		662379	0					
ANR	662749	Identifier	sqBracketCount		662379	1					
ANR	662750	IfStatement	if ( isFirstLine )		662379	10					
ANR	662751	Condition	isFirstLine	7513:7:216120:216130	662379	0	True				
ANR	662752	Identifier	isFirstLine		662379	0					
ANR	662753	ContinueStatement	continue ;	7514:4:216185:216193	662379	1	True				
ANR	662754	IfStatement	if ( sqBracketCount > 1 )		662379	11					
ANR	662755	Condition	sqBracketCount > 1	7515:7:216202:216219	662379	0	True				
ANR	662756	RelationalExpression	sqBracketCount > 1		662379	0		>			
ANR	662757	Identifier	sqBracketCount		662379	0					
ANR	662758	PrimaryExpression	1		662379	1					
ANR	662759	ContinueStatement	continue ;	7516:4:216226:216234	662379	1	True				
ANR	662760	IfStatement	if ( haveFirstColon )		662379	12					
ANR	662761	Condition	haveFirstColon	7517:7:216243:216256	662379	0	True				
ANR	662762	Identifier	haveFirstColon		662379	0					
ANR	662763	ContinueStatement	continue ;	7518:4:216292:216300	662379	1	True				
ANR	662764	IfStatement	if ( nextLine_ [ i ] == ':' )		662379	13					
ANR	662765	Condition	nextLine_ [ i ] == ':'	7520:7:216340:216358	662379	0	True				
ANR	662766	EqualityExpression	nextLine_ [ i ] == ':'		662379	0		==			
ANR	662767	ArrayIndexing	nextLine_ [ i ]		662379	0					
ANR	662768	Identifier	nextLine_		662379	0					
ANR	662769	Identifier	i		662379	1					
ANR	662770	PrimaryExpression	':'		662379	1					
ANR	662771	CompoundStatement		100:4:2580:2615	662379	1					
ANR	662772	ExpressionStatement	haveFirstColon = true	7522:4:216370:216391	662379	0	True				
ANR	662773	AssignmentExpression	haveFirstColon = true		662379	0		=			
ANR	662774	Identifier	haveFirstColon		662379	0					
ANR	662775	Identifier	true		662379	1					
ANR	662776	ExpressionStatement	foundMethodColon = true	7523:4:216397:216420	662379	1	True				
ANR	662777	AssignmentExpression	foundMethodColon = true		662379	0		=			
ANR	662778	Identifier	foundMethodColon		662379	0					
ANR	662779	Identifier	true		662379	1					
ANR	662780	IfStatement	if ( shouldPadMethodColon )		662379	2					
ANR	662781	Condition	shouldPadMethodColon	7524:8:216430:216449	662379	0	True				
ANR	662782	Identifier	shouldPadMethodColon		662379	0					
ANR	662783	CompoundStatement		93:5:2278:2306	662379	1					
ANR	662784	IdentifierDeclStatement	int spacesStart ;	7526:5:216463:216478	662379	0	True				
ANR	662785	IdentifierDecl	spacesStart		662379	0					
ANR	662786	IdentifierDeclType	int		662379	0					
ANR	662787	Identifier	spacesStart		662379	1					
ANR	662788	ForStatement	for ( spacesStart = i ; spacesStart > 0 ; spacesStart -- )		662379	1					
ANR	662789	ForInit	spacesStart = i ;	7527:10:216490:216505	662379	0	True				
ANR	662790	AssignmentExpression	spacesStart = i		662379	0		=			
ANR	662791	Identifier	spacesStart		662379	0					
ANR	662792	Identifier	i		662379	1					
ANR	662793	Condition	spacesStart > 0	7527:27:216507:216521	662379	1	True				
ANR	662794	RelationalExpression	spacesStart > 0		662379	0		>			
ANR	662795	Identifier	spacesStart		662379	0					
ANR	662796	PrimaryExpression	0		662379	1					
ANR	662797	PostIncDecOperationExpression	spacesStart --	7527:44:216524:216536	662379	2	True				
ANR	662798	Identifier	spacesStart		662379	0					
ANR	662799	IncDec	--		662379	1					
ANR	662800	IfStatement	if ( ! isWhiteSpace ( nextLine_ [ spacesStart - 1 ] ) )		662379	3					
ANR	662801	Condition	! isWhiteSpace ( nextLine_ [ spacesStart - 1 ] )	7528:10:216549:216589	662379	0	True				
ANR	662802	UnaryOperationExpression	! isWhiteSpace ( nextLine_ [ spacesStart - 1 ] )		662379	0					
ANR	662803	UnaryOperator	!		662379	0					
ANR	662804	CallExpression	isWhiteSpace ( nextLine_ [ spacesStart - 1 ] )		662379	1					
ANR	662805	Callee	isWhiteSpace		662379	0					
ANR	662806	Identifier	isWhiteSpace		662379	0					
ANR	662807	ArgumentList	nextLine_ [ spacesStart - 1 ]		662379	1					
ANR	662808	Argument	nextLine_ [ spacesStart - 1 ]		662379	0					
ANR	662809	ArrayIndexing	nextLine_ [ spacesStart - 1 ]		662379	0					
ANR	662810	Identifier	nextLine_		662379	0					
ANR	662811	AdditiveExpression	spacesStart - 1		662379	1		-			
ANR	662812	Identifier	spacesStart		662379	0					
ANR	662813	PrimaryExpression	1		662379	1					
ANR	662814	BreakStatement	break ;	7529:7:216599:216604	662379	1	True				
ANR	662815	IdentifierDeclStatement	int spaces = i - spacesStart ;	7530:5:216611:216639	662379	2	True				
ANR	662816	IdentifierDecl	spaces = i - spacesStart		662379	0					
ANR	662817	IdentifierDeclType	int		662379	0					
ANR	662818	Identifier	spaces		662379	1					
ANR	662819	AssignmentExpression	spaces = i - spacesStart		662379	2		=			
ANR	662820	Identifier	spaces		662379	0					
ANR	662821	AdditiveExpression	i - spacesStart		662379	1		-			
ANR	662822	Identifier	i		662379	0					
ANR	662823	Identifier	spacesStart		662379	1					
ANR	662824	IfStatement	if ( objCColonPadMode == COLON_PAD_ALL || objCColonPadMode == COLON_PAD_BEFORE )		662379	3					
ANR	662825	Condition	objCColonPadMode == COLON_PAD_ALL || objCColonPadMode == COLON_PAD_BEFORE	7531:9:216650:216722	662379	0	True				
ANR	662826	OrExpression	objCColonPadMode == COLON_PAD_ALL || objCColonPadMode == COLON_PAD_BEFORE		662379	0		||			
ANR	662827	EqualityExpression	objCColonPadMode == COLON_PAD_ALL		662379	0		==			
ANR	662828	Identifier	objCColonPadMode		662379	0					
ANR	662829	Identifier	COLON_PAD_ALL		662379	1					
ANR	662830	EqualityExpression	objCColonPadMode == COLON_PAD_BEFORE		662379	1		==			
ANR	662831	Identifier	objCColonPadMode		662379	0					
ANR	662832	Identifier	COLON_PAD_BEFORE		662379	1					
ANR	662833	ExpressionStatement	colonAdjust = 1 - spaces	7532:6:216731:216755	662379	1	True				
ANR	662834	AssignmentExpression	colonAdjust = 1 - spaces		662379	0		=			
ANR	662835	Identifier	colonAdjust		662379	0					
ANR	662836	AdditiveExpression	1 - spaces		662379	1		-			
ANR	662837	PrimaryExpression	1		662379	0					
ANR	662838	Identifier	spaces		662379	1					
ANR	662839	ElseStatement	else		662379	0					
ANR	662840	IfStatement	if ( objCColonPadMode == COLON_PAD_NONE || objCColonPadMode == COLON_PAD_AFTER )		662379	0					
ANR	662841	Condition	objCColonPadMode == COLON_PAD_NONE || objCColonPadMode == COLON_PAD_AFTER	7533:14:216771:216843	662379	0	True				
ANR	662842	OrExpression	objCColonPadMode == COLON_PAD_NONE || objCColonPadMode == COLON_PAD_AFTER		662379	0		||			
ANR	662843	EqualityExpression	objCColonPadMode == COLON_PAD_NONE		662379	0		==			
ANR	662844	Identifier	objCColonPadMode		662379	0					
ANR	662845	Identifier	COLON_PAD_NONE		662379	1					
ANR	662846	EqualityExpression	objCColonPadMode == COLON_PAD_AFTER		662379	1		==			
ANR	662847	Identifier	objCColonPadMode		662379	0					
ANR	662848	Identifier	COLON_PAD_AFTER		662379	1					
ANR	662849	ExpressionStatement	colonAdjust = 0 - spaces	7534:6:216852:216876	662379	1	True				
ANR	662850	AssignmentExpression	colonAdjust = 0 - spaces		662379	0		=			
ANR	662851	Identifier	colonAdjust		662379	0					
ANR	662852	AdditiveExpression	0 - spaces		662379	1		-			
ANR	662853	PrimaryExpression	0		662379	0					
ANR	662854	Identifier	spaces		662379	1					
ANR	662855	IdentifierDeclStatement	int colonPosition = i + colonAdjust ;	7537:4:216913:216948	662379	3	True				
ANR	662856	IdentifierDecl	colonPosition = i + colonAdjust		662379	0					
ANR	662857	IdentifierDeclType	int		662379	0					
ANR	662858	Identifier	colonPosition		662379	1					
ANR	662859	AssignmentExpression	colonPosition = i + colonAdjust		662379	2		=			
ANR	662860	Identifier	colonPosition		662379	0					
ANR	662861	AdditiveExpression	i + colonAdjust		662379	1		+			
ANR	662862	Identifier	i		662379	0					
ANR	662863	Identifier	colonAdjust		662379	1					
ANR	662864	IfStatement	if ( colonPosition > colonAlign )		662379	4					
ANR	662865	Condition	colonPosition > colonAlign	7538:8:216958:216983	662379	0	True				
ANR	662866	RelationalExpression	colonPosition > colonAlign		662379	0		>			
ANR	662867	Identifier	colonPosition		662379	0					
ANR	662868	Identifier	colonAlign		662379	1					
ANR	662869	ExpressionStatement	colonAlign = colonPosition	7539:5:216991:217017	662379	1	True				
ANR	662870	AssignmentExpression	colonAlign = colonPosition		662379	0		=			
ANR	662871	Identifier	colonAlign		662379	0					
ANR	662872	Identifier	colonPosition		662379	1					
ANR	662873	ExpressionStatement	isFirstLine = false	7542:2:217049:217068	662379	4	True				
ANR	662874	AssignmentExpression	isFirstLine = false		662379	0		=			
ANR	662875	Identifier	isFirstLine		662379	0					
ANR	662876	Identifier	false		662379	1					
ANR	662877	Label	EndOfWhileLoop :	7544:0:217094:217108	662379	14	True				
ANR	662878	Identifier	EndOfWhileLoop		662379	0					
ANR	662879	IfStatement	if ( ! foundMethodColon )		662379	15					
ANR	662880	Condition	! foundMethodColon	7545:5:217115:217131	662379	0	True				
ANR	662881	UnaryOperationExpression	! foundMethodColon		662379	0					
ANR	662882	UnaryOperator	!		662379	0					
ANR	662883	Identifier	foundMethodColon		662379	1					
ANR	662884	ExpressionStatement	colonAlign = - 1	7546:2:217136:217151	662379	1	True				
ANR	662885	AssignmentExpression	colonAlign = - 1		662379	0		=			
ANR	662886	Identifier	colonAlign		662379	0					
ANR	662887	UnaryOperationExpression	- 1		662379	1					
ANR	662888	UnaryOperator	-		662379	0					
ANR	662889	PrimaryExpression	1		662379	1					
ANR	662890	ReturnStatement	return colonAlign ;	7547:1:217154:217171	662379	16	True				
ANR	662891	Identifier	colonAlign		662379	0					
ANR	662892	ReturnType	int		662379	1					
ANR	662893	Identifier	ASFormatter :: findObjCColonAlignment		662379	2					
ANR	662894	ParameterList			662379	3					
ANR	662895	CFGEntryNode	ENTRY		662379		True				
ANR	662896	CFGExitNode	EXIT		662379		True				
ANR	662897	Symbol	COLON_PAD_BEFORE		662379						
ANR	662898	Symbol	nextLine_		662379						
ANR	662899	Symbol	colonAlign		662379						
ANR	662900	Symbol	COLON_PAD_NONE		662379						
ANR	662901	Symbol	stream . peekNextLine		662379						
ANR	662902	Symbol	isInComment_		662379						
ANR	662903	Symbol	quoteChar_		662379						
ANR	662904	Symbol	* sourceIterator		662379						
ANR	662905	Symbol	isWhiteSpace		662379						
ANR	662906	Symbol	objCColonPadMode		662379						
ANR	662907	Symbol	spacesStart		662379						
ANR	662908	Symbol	* spacesStart		662379						
ANR	662909	Symbol	stream		662379						
ANR	662910	Symbol	isDigitSeparator		662379						
ANR	662911	Symbol	colonAdjust		662379						
ANR	662912	Symbol	ASBeautifier :: trim		662379						
ANR	662913	Symbol	haveFirstColon		662379						
ANR	662914	Symbol	isFirstLine		662379						
ANR	662915	Symbol	sourceIterator -> hasMoreLines		662379						
ANR	662916	Symbol	currentLine		662379						
ANR	662917	Symbol	sourceIterator		662379						
ANR	662918	Symbol	getAlignMethodColon		662379						
ANR	662919	Symbol	currentChar		662379						
ANR	662920	Symbol	false		662379						
ANR	662921	Symbol	COLON_PAD_ALL		662379						
ANR	662922	Symbol	i		662379						
ANR	662923	Symbol	nextLine_ . compare		662379						
ANR	662924	Symbol	isInQuote_		662379						
ANR	662925	Symbol	foundMethodColon		662379						
ANR	662926	Symbol	* nextLine_		662379						
ANR	662927	Symbol	colonPosition		662379						
ANR	662928	Symbol	* i		662379						
ANR	662929	Symbol	sqBracketCount		662379						
ANR	662930	Symbol	true		662379						
ANR	662931	Symbol	spaces		662379						
ANR	662932	Symbol	shouldPadMethodColon		662379						
ANR	662933	Symbol	COLON_PAD_AFTER		662379						
ANR	662934	Symbol	nextLine_ . length		662379						
ANR	662935	Function	ASFormatter :: padObjCMethodColon	7551:0:217211:218813							
ANR	662936	FunctionDef	ASFormatter :: padObjCMethodColon ()		662935	0					
ANR	662937	CompoundStatement		7552:0:217250:218813	662935	0					
ANR	662938	ExpressionStatement	assert ( currentChar == ':' )	7553:1:217253:217279	662935	0	True				
ANR	662939	CallExpression	assert ( currentChar == ':' )		662935	0					
ANR	662940	Callee	assert		662935	0					
ANR	662941	Identifier	assert		662935	0					
ANR	662942	ArgumentList	currentChar == ':'		662935	1					
ANR	662943	Argument	currentChar == ':'		662935	0					
ANR	662944	EqualityExpression	currentChar == ':'		662935	0		==			
ANR	662945	Identifier	currentChar		662935	0					
ANR	662946	PrimaryExpression	':'		662935	1					
ANR	662947	IdentifierDeclStatement	int commentAdjust = 0 ;	7554:1:217282:217303	662935	1	True				
ANR	662948	IdentifierDecl	commentAdjust = 0		662935	0					
ANR	662949	IdentifierDeclType	int		662935	0					
ANR	662950	Identifier	commentAdjust		662935	1					
ANR	662951	AssignmentExpression	commentAdjust = 0		662935	2		=			
ANR	662952	Identifier	commentAdjust		662935	0					
ANR	662953	PrimaryExpression	0		662935	1					
ANR	662954	IdentifierDeclStatement	char nextChar = peekNextChar ( ) ;	7555:1:217306:217336	662935	2	True				
ANR	662955	IdentifierDecl	nextChar = peekNextChar ( )		662935	0					
ANR	662956	IdentifierDeclType	char		662935	0					
ANR	662957	Identifier	nextChar		662935	1					
ANR	662958	AssignmentExpression	nextChar = peekNextChar ( )		662935	2		=			
ANR	662959	Identifier	nextChar		662935	0					
ANR	662960	CallExpression	peekNextChar ( )		662935	1					
ANR	662961	Callee	peekNextChar		662935	0					
ANR	662962	Identifier	peekNextChar		662935	0					
ANR	662963	ArgumentList			662935	1					
ANR	662964	IfStatement	if ( objCColonPadMode == COLON_PAD_NONE || objCColonPadMode == COLON_PAD_AFTER || nextChar == ')' )		662935	3					
ANR	662965	Condition	objCColonPadMode == COLON_PAD_NONE || objCColonPadMode == COLON_PAD_AFTER || nextChar == ')'	7556:5:217343:217452	662935	0	True				
ANR	662966	OrExpression	objCColonPadMode == COLON_PAD_NONE || objCColonPadMode == COLON_PAD_AFTER || nextChar == ')'		662935	0		||			
ANR	662967	EqualityExpression	objCColonPadMode == COLON_PAD_NONE		662935	0		==			
ANR	662968	Identifier	objCColonPadMode		662935	0					
ANR	662969	Identifier	COLON_PAD_NONE		662935	1					
ANR	662970	OrExpression	objCColonPadMode == COLON_PAD_AFTER || nextChar == ')'		662935	1		||			
ANR	662971	EqualityExpression	objCColonPadMode == COLON_PAD_AFTER		662935	0		==			
ANR	662972	Identifier	objCColonPadMode		662935	0					
ANR	662973	Identifier	COLON_PAD_AFTER		662935	1					
ANR	662974	EqualityExpression	nextChar == ')'		662935	1		==			
ANR	662975	Identifier	nextChar		662935	0					
ANR	662976	PrimaryExpression	')'		662935	1					
ANR	662977	CompoundStatement		8:1:205:205	662935	1					
ANR	662978	ForStatement	for ( int i = formattedLine . length ( ) - 1 ; ( i > - 1 ) && isWhiteSpace ( formattedLine [ i ] ) ; i -- )		662935	0					
ANR	662979	ForInit	int i = formattedLine . length ( ) - 1 ;	7561:7:217491:217525	662935	0	True				
ANR	662980	IdentifierDeclStatement	int i = formattedLine . length ( ) - 1 ;		662935	0					
ANR	662981	IdentifierDecl	i = formattedLine . length ( ) - 1		662935	0					
ANR	662982	IdentifierDeclType	int		662935	0					
ANR	662983	Identifier	i		662935	1					
ANR	662984	AssignmentExpression	i = formattedLine . length ( ) - 1		662935	2		=			
ANR	662985	Identifier	i		662935	0					
ANR	662986	AdditiveExpression	formattedLine . length ( ) - 1		662935	1		-			
ANR	662987	CallExpression	formattedLine . length ( )		662935	0					
ANR	662988	Callee	formattedLine . length		662935	0					
ANR	662989	MemberAccess	formattedLine . length		662935	0					
ANR	662990	Identifier	formattedLine		662935	0					
ANR	662991	Identifier	length		662935	1					
ANR	662992	ArgumentList			662935	1					
ANR	662993	PrimaryExpression	1		662935	1					
ANR	662994	Condition	( i > - 1 ) && isWhiteSpace ( formattedLine [ i ] )	7561:43:217527:217568	662935	1	True				
ANR	662995	AndExpression	( i > - 1 ) && isWhiteSpace ( formattedLine [ i ] )		662935	0		&&			
ANR	662996	RelationalExpression	i > - 1		662935	0		>			
ANR	662997	Identifier	i		662935	0					
ANR	662998	UnaryOperationExpression	- 1		662935	1					
ANR	662999	UnaryOperator	-		662935	0					
ANR	663000	PrimaryExpression	1		662935	1					
ANR	663001	CallExpression	isWhiteSpace ( formattedLine [ i ] )		662935	1					
ANR	663002	Callee	isWhiteSpace		662935	0					
ANR	663003	Identifier	isWhiteSpace		662935	0					
ANR	663004	ArgumentList	formattedLine [ i ]		662935	1					
ANR	663005	Argument	formattedLine [ i ]		662935	0					
ANR	663006	ArrayIndexing	formattedLine [ i ]		662935	0					
ANR	663007	Identifier	formattedLine		662935	0					
ANR	663008	Identifier	i		662935	1					
ANR	663009	PostIncDecOperationExpression	i --	7561:87:217571:217573	662935	2	True				
ANR	663010	Identifier	i		662935	0					
ANR	663011	IncDec	--		662935	1					
ANR	663012	CompoundStatement		11:2:327:327	662935	3					
ANR	663013	ExpressionStatement	formattedLine . erase ( i )	7563:3:217583:217605	662935	0	True				
ANR	663014	CallExpression	formattedLine . erase ( i )		662935	0					
ANR	663015	Callee	formattedLine . erase		662935	0					
ANR	663016	MemberAccess	formattedLine . erase		662935	0					
ANR	663017	Identifier	formattedLine		662935	0					
ANR	663018	Identifier	erase		662935	1					
ANR	663019	ArgumentList	i		662935	1					
ANR	663020	Argument	i		662935	0					
ANR	663021	Identifier	i		662935	0					
ANR	663022	ExpressionStatement	-- commentAdjust	7564:3:217610:217625	662935	1	True				
ANR	663023	UnaryExpression	-- commentAdjust		662935	0					
ANR	663024	IncDec	--		662935	0					
ANR	663025	Identifier	commentAdjust		662935	1					
ANR	663026	ElseStatement	else		662935	0					
ANR	663027	CompoundStatement		17:1:390:390	662935	0					
ANR	663028	ForStatement	for ( int i = formattedLine . length ( ) - 1 ; ( i > 0 ) && isWhiteSpace ( formattedLine [ i ] ) ; i -- )		662935	0					
ANR	663029	ForInit	int i = formattedLine . length ( ) - 1 ;	7570:7:217672:217706	662935	0	True				
ANR	663030	IdentifierDeclStatement	int i = formattedLine . length ( ) - 1 ;		662935	0					
ANR	663031	IdentifierDecl	i = formattedLine . length ( ) - 1		662935	0					
ANR	663032	IdentifierDeclType	int		662935	0					
ANR	663033	Identifier	i		662935	1					
ANR	663034	AssignmentExpression	i = formattedLine . length ( ) - 1		662935	2		=			
ANR	663035	Identifier	i		662935	0					
ANR	663036	AdditiveExpression	formattedLine . length ( ) - 1		662935	1		-			
ANR	663037	CallExpression	formattedLine . length ( )		662935	0					
ANR	663038	Callee	formattedLine . length		662935	0					
ANR	663039	MemberAccess	formattedLine . length		662935	0					
ANR	663040	Identifier	formattedLine		662935	0					
ANR	663041	Identifier	length		662935	1					
ANR	663042	ArgumentList			662935	1					
ANR	663043	PrimaryExpression	1		662935	1					
ANR	663044	Condition	( i > 0 ) && isWhiteSpace ( formattedLine [ i ] )	7570:43:217708:217748	662935	1	True				
ANR	663045	AndExpression	( i > 0 ) && isWhiteSpace ( formattedLine [ i ] )		662935	0		&&			
ANR	663046	RelationalExpression	i > 0		662935	0		>			
ANR	663047	Identifier	i		662935	0					
ANR	663048	PrimaryExpression	0		662935	1					
ANR	663049	CallExpression	isWhiteSpace ( formattedLine [ i ] )		662935	1					
ANR	663050	Callee	isWhiteSpace		662935	0					
ANR	663051	Identifier	isWhiteSpace		662935	0					
ANR	663052	ArgumentList	formattedLine [ i ]		662935	1					
ANR	663053	Argument	formattedLine [ i ]		662935	0					
ANR	663054	ArrayIndexing	formattedLine [ i ]		662935	0					
ANR	663055	Identifier	formattedLine		662935	0					
ANR	663056	Identifier	i		662935	1					
ANR	663057	PostIncDecOperationExpression	i --	7570:86:217751:217753	662935	2	True				
ANR	663058	Identifier	i		662935	0					
ANR	663059	IncDec	--		662935	1					
ANR	663060	IfStatement	if ( isWhiteSpace ( formattedLine [ i - 1 ] ) )		662935	3					
ANR	663061	Condition	isWhiteSpace ( formattedLine [ i - 1 ] )	7571:7:217763:217796	662935	0	True				
ANR	663062	CallExpression	isWhiteSpace ( formattedLine [ i - 1 ] )		662935	0					
ANR	663063	Callee	isWhiteSpace		662935	0					
ANR	663064	Identifier	isWhiteSpace		662935	0					
ANR	663065	ArgumentList	formattedLine [ i - 1 ]		662935	1					
ANR	663066	Argument	formattedLine [ i - 1 ]		662935	0					
ANR	663067	ArrayIndexing	formattedLine [ i - 1 ]		662935	0					
ANR	663068	Identifier	formattedLine		662935	0					
ANR	663069	AdditiveExpression	i - 1		662935	1		-			
ANR	663070	Identifier	i		662935	0					
ANR	663071	PrimaryExpression	1		662935	1					
ANR	663072	CompoundStatement		21:3:551:551	662935	1					
ANR	663073	ExpressionStatement	formattedLine . erase ( i )	7573:4:217808:217830	662935	0	True				
ANR	663074	CallExpression	formattedLine . erase ( i )		662935	0					
ANR	663075	Callee	formattedLine . erase		662935	0					
ANR	663076	MemberAccess	formattedLine . erase		662935	0					
ANR	663077	Identifier	formattedLine		662935	0					
ANR	663078	Identifier	erase		662935	1					
ANR	663079	ArgumentList	i		662935	1					
ANR	663080	Argument	i		662935	0					
ANR	663081	Identifier	i		662935	0					
ANR	663082	ExpressionStatement	-- commentAdjust	7574:4:217836:217851	662935	1	True				
ANR	663083	UnaryExpression	-- commentAdjust		662935	0					
ANR	663084	IncDec	--		662935	0					
ANR	663085	Identifier	commentAdjust		662935	1					
ANR	663086	ExpressionStatement	appendSpacePad ( )	7576:2:217860:217876	662935	1	True				
ANR	663087	CallExpression	appendSpacePad ( )		662935	0					
ANR	663088	Callee	appendSpacePad		662935	0					
ANR	663089	Identifier	appendSpacePad		662935	0					
ANR	663090	ArgumentList			662935	1					
ANR	663091	IfStatement	if ( objCColonPadMode == COLON_PAD_NONE || objCColonPadMode == COLON_PAD_BEFORE || nextChar == ')' )		662935	4					
ANR	663092	Condition	objCColonPadMode == COLON_PAD_NONE || objCColonPadMode == COLON_PAD_BEFORE || nextChar == ')'	7578:5:217886:217996	662935	0	True				
ANR	663093	OrExpression	objCColonPadMode == COLON_PAD_NONE || objCColonPadMode == COLON_PAD_BEFORE || nextChar == ')'		662935	0		||			
ANR	663094	EqualityExpression	objCColonPadMode == COLON_PAD_NONE		662935	0		==			
ANR	663095	Identifier	objCColonPadMode		662935	0					
ANR	663096	Identifier	COLON_PAD_NONE		662935	1					
ANR	663097	OrExpression	objCColonPadMode == COLON_PAD_BEFORE || nextChar == ')'		662935	1		||			
ANR	663098	EqualityExpression	objCColonPadMode == COLON_PAD_BEFORE		662935	0		==			
ANR	663099	Identifier	objCColonPadMode		662935	0					
ANR	663100	Identifier	COLON_PAD_BEFORE		662935	1					
ANR	663101	EqualityExpression	nextChar == ')'		662935	1		==			
ANR	663102	Identifier	nextChar		662935	0					
ANR	663103	PrimaryExpression	')'		662935	1					
ANR	663104	CompoundStatement		35:2:919:954	662935	1					
ANR	663105	IdentifierDeclStatement	"int nextText = currentLine . find_first_not_of ( "" \\t"" , charNum + 1 ) ;"	7583:2:218029:218093	662935	0	True				
ANR	663106	IdentifierDecl	"nextText = currentLine . find_first_not_of ( "" \\t"" , charNum + 1 )"		662935	0					
ANR	663107	IdentifierDeclType	int		662935	0					
ANR	663108	Identifier	nextText		662935	1					
ANR	663109	AssignmentExpression	"nextText = currentLine . find_first_not_of ( "" \\t"" , charNum + 1 )"		662935	2		=			
ANR	663110	Identifier	nextText		662935	0					
ANR	663111	CallExpression	"currentLine . find_first_not_of ( "" \\t"" , charNum + 1 )"		662935	1					
ANR	663112	Callee	currentLine . find_first_not_of		662935	0					
ANR	663113	MemberAccess	currentLine . find_first_not_of		662935	0					
ANR	663114	Identifier	currentLine		662935	0					
ANR	663115	Identifier	find_first_not_of		662935	1					
ANR	663116	ArgumentList	""" \\t"""		662935	1					
ANR	663117	Argument	""" \\t"""		662935	0					
ANR	663118	PrimaryExpression	""" \\t"""		662935	0					
ANR	663119	Argument	charNum + 1		662935	1					
ANR	663120	AdditiveExpression	charNum + 1		662935	0		+			
ANR	663121	Identifier	charNum		662935	0					
ANR	663122	PrimaryExpression	1		662935	1					
ANR	663123	IfStatement	if ( nextText == ( int ) string :: npos )		662935	1					
ANR	663124	Condition	nextText == ( int ) string :: npos	7584:6:218101:218129	662935	0	True				
ANR	663125	EqualityExpression	nextText == ( int ) string :: npos		662935	0		==			
ANR	663126	Identifier	nextText		662935	0					
ANR	663127	CastExpression	( int ) string :: npos		662935	1					
ANR	663128	CastTarget	int		662935	0					
ANR	663129	Identifier	string :: npos		662935	1					
ANR	663130	ExpressionStatement	nextText = currentLine . length ( )	7585:3:218135:218166	662935	1	True				
ANR	663131	AssignmentExpression	nextText = currentLine . length ( )		662935	0		=			
ANR	663132	Identifier	nextText		662935	0					
ANR	663133	CallExpression	currentLine . length ( )		662935	1					
ANR	663134	Callee	currentLine . length		662935	0					
ANR	663135	MemberAccess	currentLine . length		662935	0					
ANR	663136	Identifier	currentLine		662935	0					
ANR	663137	Identifier	length		662935	1					
ANR	663138	ArgumentList			662935	1					
ANR	663139	IdentifierDeclStatement	int spaces = nextText - charNum - 1 ;	7586:2:218170:218205	662935	2	True				
ANR	663140	IdentifierDecl	spaces = nextText - charNum - 1		662935	0					
ANR	663141	IdentifierDeclType	int		662935	0					
ANR	663142	Identifier	spaces		662935	1					
ANR	663143	AssignmentExpression	spaces = nextText - charNum - 1		662935	2		=			
ANR	663144	Identifier	spaces		662935	0					
ANR	663145	AdditiveExpression	nextText - charNum - 1		662935	1		-			
ANR	663146	Identifier	nextText		662935	0					
ANR	663147	AdditiveExpression	charNum - 1		662935	1		-			
ANR	663148	Identifier	charNum		662935	0					
ANR	663149	PrimaryExpression	1		662935	1					
ANR	663150	IfStatement	if ( spaces > 0 )		662935	3					
ANR	663151	Condition	spaces > 0	7587:6:218213:218222	662935	0	True				
ANR	663152	RelationalExpression	spaces > 0		662935	0		>			
ANR	663153	Identifier	spaces		662935	0					
ANR	663154	PrimaryExpression	0		662935	1					
ANR	663155	CompoundStatement		37:2:976:976	662935	1					
ANR	663156	ExpressionStatement	"currentLine . erase ( charNum + 1 , spaces )"	7590:3:218264:218302	662935	0	True				
ANR	663157	CallExpression	"currentLine . erase ( charNum + 1 , spaces )"		662935	0					
ANR	663158	Callee	currentLine . erase		662935	0					
ANR	663159	MemberAccess	currentLine . erase		662935	0					
ANR	663160	Identifier	currentLine		662935	0					
ANR	663161	Identifier	erase		662935	1					
ANR	663162	ArgumentList	charNum + 1		662935	1					
ANR	663163	Argument	charNum + 1		662935	0					
ANR	663164	AdditiveExpression	charNum + 1		662935	0		+			
ANR	663165	Identifier	charNum		662935	0					
ANR	663166	PrimaryExpression	1		662935	1					
ANR	663167	Argument	spaces		662935	1					
ANR	663168	Identifier	spaces		662935	0					
ANR	663169	ExpressionStatement	spacePadNum -= spaces	7591:3:218307:218328	662935	1	True				
ANR	663170	AssignmentExpression	spacePadNum -= spaces		662935	0		-=			
ANR	663171	Identifier	spacePadNum		662935	0					
ANR	663172	Identifier	spaces		662935	1					
ANR	663173	ElseStatement	else		662935	0					
ANR	663174	CompoundStatement		49:2:1259:1294	662935	0					
ANR	663175	IdentifierDeclStatement	"int nextText = currentLine . find_first_not_of ( "" \\t"" , charNum + 1 ) ;"	7597:2:218369:218433	662935	0	True				
ANR	663176	IdentifierDecl	"nextText = currentLine . find_first_not_of ( "" \\t"" , charNum + 1 )"		662935	0					
ANR	663177	IdentifierDeclType	int		662935	0					
ANR	663178	Identifier	nextText		662935	1					
ANR	663179	AssignmentExpression	"nextText = currentLine . find_first_not_of ( "" \\t"" , charNum + 1 )"		662935	2		=			
ANR	663180	Identifier	nextText		662935	0					
ANR	663181	CallExpression	"currentLine . find_first_not_of ( "" \\t"" , charNum + 1 )"		662935	1					
ANR	663182	Callee	currentLine . find_first_not_of		662935	0					
ANR	663183	MemberAccess	currentLine . find_first_not_of		662935	0					
ANR	663184	Identifier	currentLine		662935	0					
ANR	663185	Identifier	find_first_not_of		662935	1					
ANR	663186	ArgumentList	""" \\t"""		662935	1					
ANR	663187	Argument	""" \\t"""		662935	0					
ANR	663188	PrimaryExpression	""" \\t"""		662935	0					
ANR	663189	Argument	charNum + 1		662935	1					
ANR	663190	AdditiveExpression	charNum + 1		662935	0		+			
ANR	663191	Identifier	charNum		662935	0					
ANR	663192	PrimaryExpression	1		662935	1					
ANR	663193	IfStatement	if ( nextText == ( int ) string :: npos )		662935	1					
ANR	663194	Condition	nextText == ( int ) string :: npos	7598:6:218441:218469	662935	0	True				
ANR	663195	EqualityExpression	nextText == ( int ) string :: npos		662935	0		==			
ANR	663196	Identifier	nextText		662935	0					
ANR	663197	CastExpression	( int ) string :: npos		662935	1					
ANR	663198	CastTarget	int		662935	0					
ANR	663199	Identifier	string :: npos		662935	1					
ANR	663200	ExpressionStatement	nextText = currentLine . length ( )	7599:3:218475:218506	662935	1	True				
ANR	663201	AssignmentExpression	nextText = currentLine . length ( )		662935	0		=			
ANR	663202	Identifier	nextText		662935	0					
ANR	663203	CallExpression	currentLine . length ( )		662935	1					
ANR	663204	Callee	currentLine . length		662935	0					
ANR	663205	MemberAccess	currentLine . length		662935	0					
ANR	663206	Identifier	currentLine		662935	0					
ANR	663207	Identifier	length		662935	1					
ANR	663208	ArgumentList			662935	1					
ANR	663209	IdentifierDeclStatement	int spaces = nextText - charNum - 1 ;	7600:2:218510:218545	662935	2	True				
ANR	663210	IdentifierDecl	spaces = nextText - charNum - 1		662935	0					
ANR	663211	IdentifierDeclType	int		662935	0					
ANR	663212	Identifier	spaces		662935	1					
ANR	663213	AssignmentExpression	spaces = nextText - charNum - 1		662935	2		=			
ANR	663214	Identifier	spaces		662935	0					
ANR	663215	AdditiveExpression	nextText - charNum - 1		662935	1		-			
ANR	663216	Identifier	nextText		662935	0					
ANR	663217	AdditiveExpression	charNum - 1		662935	1		-			
ANR	663218	Identifier	charNum		662935	0					
ANR	663219	PrimaryExpression	1		662935	1					
ANR	663220	IfStatement	if ( spaces == 0 )		662935	3					
ANR	663221	Condition	spaces == 0	7601:6:218553:218563	662935	0	True				
ANR	663222	EqualityExpression	spaces == 0		662935	0		==			
ANR	663223	Identifier	spaces		662935	0					
ANR	663224	PrimaryExpression	0		662935	1					
ANR	663225	CompoundStatement		51:2:1317:1317	662935	1					
ANR	663226	ExpressionStatement	"currentLine . insert ( charNum + 1 , 1 , ' ' )"	7603:3:218573:218612	662935	0	True				
ANR	663227	CallExpression	"currentLine . insert ( charNum + 1 , 1 , ' ' )"		662935	0					
ANR	663228	Callee	currentLine . insert		662935	0					
ANR	663229	MemberAccess	currentLine . insert		662935	0					
ANR	663230	Identifier	currentLine		662935	0					
ANR	663231	Identifier	insert		662935	1					
ANR	663232	ArgumentList	charNum + 1		662935	1					
ANR	663233	Argument	charNum + 1		662935	0					
ANR	663234	AdditiveExpression	charNum + 1		662935	0		+			
ANR	663235	Identifier	charNum		662935	0					
ANR	663236	PrimaryExpression	1		662935	1					
ANR	663237	Argument	1		662935	1					
ANR	663238	PrimaryExpression	1		662935	0					
ANR	663239	Argument	' '		662935	2					
ANR	663240	PrimaryExpression	' '		662935	0					
ANR	663241	ExpressionStatement	spacePadNum += 1	7604:3:218617:218633	662935	1	True				
ANR	663242	AssignmentExpression	spacePadNum += 1		662935	0		+=			
ANR	663243	Identifier	spacePadNum		662935	0					
ANR	663244	PrimaryExpression	1		662935	1					
ANR	663245	ElseStatement	else		662935	0					
ANR	663246	IfStatement	if ( spaces > 1 )		662935	0					
ANR	663247	Condition	spaces > 1	7606:11:218650:218659	662935	0	True				
ANR	663248	RelationalExpression	spaces > 1		662935	0		>			
ANR	663249	Identifier	spaces		662935	0					
ANR	663250	PrimaryExpression	1		662935	1					
ANR	663251	CompoundStatement		56:2:1413:1413	662935	1					
ANR	663252	ExpressionStatement	"currentLine . erase ( charNum + 1 , spaces - 1 )"	7609:3:218701:218743	662935	0	True				
ANR	663253	CallExpression	"currentLine . erase ( charNum + 1 , spaces - 1 )"		662935	0					
ANR	663254	Callee	currentLine . erase		662935	0					
ANR	663255	MemberAccess	currentLine . erase		662935	0					
ANR	663256	Identifier	currentLine		662935	0					
ANR	663257	Identifier	erase		662935	1					
ANR	663258	ArgumentList	charNum + 1		662935	1					
ANR	663259	Argument	charNum + 1		662935	0					
ANR	663260	AdditiveExpression	charNum + 1		662935	0		+			
ANR	663261	Identifier	charNum		662935	0					
ANR	663262	PrimaryExpression	1		662935	1					
ANR	663263	Argument	spaces - 1		662935	1					
ANR	663264	AdditiveExpression	spaces - 1		662935	0		-			
ANR	663265	Identifier	spaces		662935	0					
ANR	663266	PrimaryExpression	1		662935	1					
ANR	663267	ExpressionStatement	spacePadNum -= spaces - 1	7610:3:218748:218773	662935	1	True				
ANR	663268	AssignmentExpression	spacePadNum -= spaces - 1		662935	0		-=			
ANR	663269	Identifier	spacePadNum		662935	0					
ANR	663270	AdditiveExpression	spaces - 1		662935	1		-			
ANR	663271	Identifier	spaces		662935	0					
ANR	663272	PrimaryExpression	1		662935	1					
ANR	663273	ExpressionStatement	spacePadNum += commentAdjust	7613:1:218783:218811	662935	5	True				
ANR	663274	AssignmentExpression	spacePadNum += commentAdjust		662935	0		+=			
ANR	663275	Identifier	spacePadNum		662935	0					
ANR	663276	Identifier	commentAdjust		662935	1					
ANR	663277	ReturnType	void		662935	1					
ANR	663278	Identifier	ASFormatter :: padObjCMethodColon		662935	2					
ANR	663279	ParameterList			662935	3					
ANR	663280	CFGEntryNode	ENTRY		662935		True				
ANR	663281	CFGExitNode	EXIT		662935		True				
ANR	663282	Symbol	currentChar		662935						
ANR	663283	Symbol	* formattedLine		662935						
ANR	663284	Symbol	COLON_PAD_BEFORE		662935						
ANR	663285	Symbol	peekNextChar		662935						
ANR	663286	Symbol	nextText		662935						
ANR	663287	Symbol	commentAdjust		662935						
ANR	663288	Symbol	spacePadNum		662935						
ANR	663289	Symbol	COLON_PAD_NONE		662935						
ANR	663290	Symbol	string :: npos		662935						
ANR	663291	Symbol	i		662935						
ANR	663292	Symbol	currentLine . find_first_not_of		662935						
ANR	663293	Symbol	objCColonPadMode		662935						
ANR	663294	Symbol	isWhiteSpace		662935						
ANR	663295	Symbol	formattedLine		662935						
ANR	663296	Symbol	* i		662935						
ANR	663297	Symbol	currentLine . length		662935						
ANR	663298	Symbol	formattedLine . length		662935						
ANR	663299	Symbol	nextChar		662935						
ANR	663300	Symbol	spaces		662935						
ANR	663301	Symbol	charNum		662935						
ANR	663302	Symbol	COLON_PAD_AFTER		662935						
ANR	663303	Symbol	currentLine		662935						
ANR	663304	Function	ASFormatter :: stripCommentPrefix	7617:0:218890:221580							
ANR	663305	FunctionDef	ASFormatter :: stripCommentPrefix ()		663304	0					
ANR	663306	CompoundStatement		7618:0:218929:221580	663304	0					
ANR	663307	IdentifierDeclStatement	"int firstChar = formattedLine . find_first_not_of ( "" \\t"" ) ;"	7619:1:218932:218986	663304	0	True				
ANR	663308	IdentifierDecl	"firstChar = formattedLine . find_first_not_of ( "" \\t"" )"		663304	0					
ANR	663309	IdentifierDeclType	int		663304	0					
ANR	663310	Identifier	firstChar		663304	1					
ANR	663311	AssignmentExpression	"firstChar = formattedLine . find_first_not_of ( "" \\t"" )"		663304	2		=			
ANR	663312	Identifier	firstChar		663304	0					
ANR	663313	CallExpression	"formattedLine . find_first_not_of ( "" \\t"" )"		663304	1					
ANR	663314	Callee	formattedLine . find_first_not_of		663304	0					
ANR	663315	MemberAccess	formattedLine . find_first_not_of		663304	0					
ANR	663316	Identifier	formattedLine		663304	0					
ANR	663317	Identifier	find_first_not_of		663304	1					
ANR	663318	ArgumentList	""" \\t"""		663304	1					
ANR	663319	Argument	""" \\t"""		663304	0					
ANR	663320	PrimaryExpression	""" \\t"""		663304	0					
ANR	663321	IfStatement	if ( firstChar < 0 )		663304	1					
ANR	663322	Condition	firstChar < 0	7620:5:218993:219005	663304	0	True				
ANR	663323	RelationalExpression	firstChar < 0		663304	0		<			
ANR	663324	Identifier	firstChar		663304	0					
ANR	663325	PrimaryExpression	0		663304	1					
ANR	663326	ReturnStatement	return ;	7621:2:219010:219016	663304	1	True				
ANR	663327	IfStatement	if ( isInCommentStartLine )		663304	2					
ANR	663328	Condition	isInCommentStartLine	7623:5:219024:219043	663304	0	True				
ANR	663329	Identifier	isInCommentStartLine		663304	0					
ANR	663330	CompoundStatement		27:2:860:915	663304	1					
ANR	663331	IfStatement	"if ( formattedLine . compare ( firstChar , 2 , ""/*"" ) != 0 )"		663304	0					
ANR	663332	Condition	"formattedLine . compare ( firstChar , 2 , ""/*"" ) != 0"	7626:6:219095:219140	663304	0	True				
ANR	663333	EqualityExpression	"formattedLine . compare ( firstChar , 2 , ""/*"" ) != 0"		663304	0		!=			
ANR	663334	CallExpression	"formattedLine . compare ( firstChar , 2 , ""/*"" )"		663304	0					
ANR	663335	Callee	formattedLine . compare		663304	0					
ANR	663336	MemberAccess	formattedLine . compare		663304	0					
ANR	663337	Identifier	formattedLine		663304	0					
ANR	663338	Identifier	compare		663304	1					
ANR	663339	ArgumentList	firstChar		663304	1					
ANR	663340	Argument	firstChar		663304	0					
ANR	663341	Identifier	firstChar		663304	0					
ANR	663342	Argument	2		663304	1					
ANR	663343	PrimaryExpression	2		663304	0					
ANR	663344	Argument	"""/*"""		663304	2					
ANR	663345	PrimaryExpression	"""/*"""		663304	0					
ANR	663346	PrimaryExpression	0		663304	1					
ANR	663347	ReturnStatement	return ;	7627:3:219146:219152	663304	1	True				
ANR	663348	IdentifierDeclStatement	int commentOpener = firstChar ;	7628:2:219156:219185	663304	1	True				
ANR	663349	IdentifierDecl	commentOpener = firstChar		663304	0					
ANR	663350	IdentifierDeclType	int		663304	0					
ANR	663351	Identifier	commentOpener		663304	1					
ANR	663352	AssignmentExpression	commentOpener = firstChar		663304	2		=			
ANR	663353	Identifier	firstChar		663304	0					
ANR	663354	Identifier	firstChar		663304	1					
ANR	663355	IdentifierDeclStatement	"int commentEnd = formattedLine . find ( ""*/"" , firstChar + 2 ) ;"	7630:2:219222:219278	663304	2	True				
ANR	663356	IdentifierDecl	"commentEnd = formattedLine . find ( ""*/"" , firstChar + 2 )"		663304	0					
ANR	663357	IdentifierDeclType	int		663304	0					
ANR	663358	Identifier	commentEnd		663304	1					
ANR	663359	AssignmentExpression	"commentEnd = formattedLine . find ( ""*/"" , firstChar + 2 )"		663304	2		=			
ANR	663360	Identifier	commentEnd		663304	0					
ANR	663361	CallExpression	"formattedLine . find ( ""*/"" , firstChar + 2 )"		663304	1					
ANR	663362	Callee	formattedLine . find		663304	0					
ANR	663363	MemberAccess	formattedLine . find		663304	0					
ANR	663364	Identifier	formattedLine		663304	0					
ANR	663365	Identifier	find		663304	1					
ANR	663366	ArgumentList	"""*/"""		663304	1					
ANR	663367	Argument	"""*/"""		663304	0					
ANR	663368	PrimaryExpression	"""*/"""		663304	0					
ANR	663369	Argument	firstChar + 2		663304	1					
ANR	663370	AdditiveExpression	firstChar + 2		663304	0		+			
ANR	663371	Identifier	firstChar		663304	0					
ANR	663372	PrimaryExpression	2		663304	1					
ANR	663373	IfStatement	if ( commentEnd != - 1 )		663304	3					
ANR	663374	Condition	commentEnd != - 1	7631:6:219286:219301	663304	0	True				
ANR	663375	EqualityExpression	commentEnd != - 1		663304	0		!=			
ANR	663376	Identifier	commentEnd		663304	0					
ANR	663377	UnaryOperationExpression	- 1		663304	1					
ANR	663378	UnaryOperator	-		663304	0					
ANR	663379	PrimaryExpression	1		663304	1					
ANR	663380	ReturnStatement	return ;	7632:3:219307:219313	663304	1	True				
ANR	663381	IdentifierDeclStatement	"int followingText = formattedLine . find_first_not_of ( "" \\t"" , commentOpener + 2 ) ;"	7634:2:219386:219463	663304	4	True				
ANR	663382	IdentifierDecl	"followingText = formattedLine . find_first_not_of ( "" \\t"" , commentOpener + 2 )"		663304	0					
ANR	663383	IdentifierDeclType	int		663304	0					
ANR	663384	Identifier	followingText		663304	1					
ANR	663385	AssignmentExpression	"followingText = formattedLine . find_first_not_of ( "" \\t"" , commentOpener + 2 )"		663304	2		=			
ANR	663386	Identifier	followingText		663304	0					
ANR	663387	CallExpression	"formattedLine . find_first_not_of ( "" \\t"" , commentOpener + 2 )"		663304	1					
ANR	663388	Callee	formattedLine . find_first_not_of		663304	0					
ANR	663389	MemberAccess	formattedLine . find_first_not_of		663304	0					
ANR	663390	Identifier	formattedLine		663304	0					
ANR	663391	Identifier	find_first_not_of		663304	1					
ANR	663392	ArgumentList	""" \\t"""		663304	1					
ANR	663393	Argument	""" \\t"""		663304	0					
ANR	663394	PrimaryExpression	""" \\t"""		663304	0					
ANR	663395	Argument	commentOpener + 2		663304	1					
ANR	663396	AdditiveExpression	commentOpener + 2		663304	0		+			
ANR	663397	Identifier	commentOpener		663304	0					
ANR	663398	PrimaryExpression	2		663304	1					
ANR	663399	IfStatement	if ( followingText < 0 )		663304	5					
ANR	663400	Condition	followingText < 0	7635:6:219471:219487	663304	0	True				
ANR	663401	RelationalExpression	followingText < 0		663304	0		<			
ANR	663402	Identifier	followingText		663304	0					
ANR	663403	PrimaryExpression	0		663304	1					
ANR	663404	ReturnStatement	return ;	7636:3:219493:219499	663304	1	True				
ANR	663405	IfStatement	if ( formattedLine [ followingText ] == '*' || formattedLine [ followingText ] == '!' )		663304	6					
ANR	663406	Condition	formattedLine [ followingText ] == '*' || formattedLine [ followingText ] == '!'	7637:6:219507:219580	663304	0	True				
ANR	663407	OrExpression	formattedLine [ followingText ] == '*' || formattedLine [ followingText ] == '!'		663304	0		||			
ANR	663408	EqualityExpression	formattedLine [ followingText ] == '*'		663304	0		==			
ANR	663409	ArrayIndexing	formattedLine [ followingText ]		663304	0					
ANR	663410	Identifier	formattedLine		663304	0					
ANR	663411	Identifier	followingText		663304	1					
ANR	663412	PrimaryExpression	'*'		663304	1					
ANR	663413	EqualityExpression	formattedLine [ followingText ] == '!'		663304	1		==			
ANR	663414	ArrayIndexing	formattedLine [ followingText ]		663304	0					
ANR	663415	Identifier	formattedLine		663304	0					
ANR	663416	Identifier	followingText		663304	1					
ANR	663417	PrimaryExpression	'!'		663304	1					
ANR	663418	ExpressionStatement	"followingText = formattedLine . find_first_not_of ( "" \\t"" , followingText + 1 )"	7638:3:219586:219659	663304	1	True				
ANR	663419	AssignmentExpression	"followingText = formattedLine . find_first_not_of ( "" \\t"" , followingText + 1 )"		663304	0		=			
ANR	663420	Identifier	followingText		663304	0					
ANR	663421	CallExpression	"formattedLine . find_first_not_of ( "" \\t"" , followingText + 1 )"		663304	1					
ANR	663422	Callee	formattedLine . find_first_not_of		663304	0					
ANR	663423	MemberAccess	formattedLine . find_first_not_of		663304	0					
ANR	663424	Identifier	formattedLine		663304	0					
ANR	663425	Identifier	find_first_not_of		663304	1					
ANR	663426	ArgumentList	""" \\t"""		663304	1					
ANR	663427	Argument	""" \\t"""		663304	0					
ANR	663428	PrimaryExpression	""" \\t"""		663304	0					
ANR	663429	Argument	followingText + 1		663304	1					
ANR	663430	AdditiveExpression	followingText + 1		663304	0		+			
ANR	663431	Identifier	followingText		663304	0					
ANR	663432	PrimaryExpression	1		663304	1					
ANR	663433	IfStatement	if ( followingText < 0 )		663304	7					
ANR	663434	Condition	followingText < 0	7639:6:219667:219683	663304	0	True				
ANR	663435	RelationalExpression	followingText < 0		663304	0		<			
ANR	663436	Identifier	followingText		663304	0					
ANR	663437	PrimaryExpression	0		663304	1					
ANR	663438	ReturnStatement	return ;	7640:3:219689:219695	663304	1	True				
ANR	663439	IfStatement	if ( formattedLine [ followingText ] == '*' )		663304	8					
ANR	663440	Condition	formattedLine [ followingText ] == '*'	7641:6:219703:219737	663304	0	True				
ANR	663441	EqualityExpression	formattedLine [ followingText ] == '*'		663304	0		==			
ANR	663442	ArrayIndexing	formattedLine [ followingText ]		663304	0					
ANR	663443	Identifier	formattedLine		663304	0					
ANR	663444	Identifier	followingText		663304	1					
ANR	663445	PrimaryExpression	'*'		663304	1					
ANR	663446	ReturnStatement	return ;	7642:3:219743:219749	663304	1	True				
ANR	663447	IdentifierDeclStatement	int indentLen = getIndentLength ( ) ;	7643:2:219753:219786	663304	9	True				
ANR	663448	IdentifierDecl	indentLen = getIndentLength ( )		663304	0					
ANR	663449	IdentifierDeclType	int		663304	0					
ANR	663450	Identifier	indentLen		663304	1					
ANR	663451	AssignmentExpression	indentLen = getIndentLength ( )		663304	2		=			
ANR	663452	Identifier	indentLen		663304	0					
ANR	663453	CallExpression	getIndentLength ( )		663304	1					
ANR	663454	Callee	getIndentLength		663304	0					
ANR	663455	Identifier	getIndentLength		663304	0					
ANR	663456	ArgumentList			663304	1					
ANR	663457	IdentifierDeclStatement	int followingTextIndent = followingText - commentOpener ;	7644:2:219790:219845	663304	10	True				
ANR	663458	IdentifierDecl	followingTextIndent = followingText - commentOpener		663304	0					
ANR	663459	IdentifierDeclType	int		663304	0					
ANR	663460	Identifier	followingTextIndent		663304	1					
ANR	663461	AssignmentExpression	followingTextIndent = followingText - commentOpener		663304	2		=			
ANR	663462	Identifier	followingTextIndent		663304	0					
ANR	663463	AdditiveExpression	followingText - commentOpener		663304	1		-			
ANR	663464	Identifier	followingText		663304	0					
ANR	663465	Identifier	commentOpener		663304	1					
ANR	663466	IfStatement	if ( followingTextIndent < indentLen )		663304	11					
ANR	663467	Condition	followingTextIndent < indentLen	7645:6:219853:219883	663304	0	True				
ANR	663468	RelationalExpression	followingTextIndent < indentLen		663304	0		<			
ANR	663469	Identifier	followingTextIndent		663304	0					
ANR	663470	Identifier	indentLen		663304	1					
ANR	663471	CompoundStatement		30:3:963:1022	663304	1					
ANR	663472	IdentifierDeclStatement	"string stringToInsert ( indentLen - followingTextIndent , ' ' ) ;"	7647:3:219893:219952	663304	0	True				
ANR	663473	IdentifierDecl	"stringToInsert ( indentLen - followingTextIndent , ' ' )"		663304	0					
ANR	663474	IdentifierDeclType	string		663304	0					
ANR	663475	Identifier	stringToInsert		663304	1					
ANR	663476	Expression	"indentLen - followingTextIndent , ' '"		663304	2					
ANR	663477	AdditiveExpression	indentLen - followingTextIndent		663304	0		-			
ANR	663478	Identifier	indentLen		663304	0					
ANR	663479	Identifier	followingTextIndent		663304	1					
ANR	663480	PrimaryExpression	' '		663304	1					
ANR	663481	ExpressionStatement	"formattedLine . insert ( followingText , stringToInsert )"	7648:3:219957:220008	663304	1	True				
ANR	663482	CallExpression	"formattedLine . insert ( followingText , stringToInsert )"		663304	0					
ANR	663483	Callee	formattedLine . insert		663304	0					
ANR	663484	MemberAccess	formattedLine . insert		663304	0					
ANR	663485	Identifier	formattedLine		663304	0					
ANR	663486	Identifier	insert		663304	1					
ANR	663487	ArgumentList	followingText		663304	1					
ANR	663488	Argument	followingText		663304	0					
ANR	663489	Identifier	followingText		663304	0					
ANR	663490	Argument	stringToInsert		663304	1					
ANR	663491	Identifier	stringToInsert		663304	0					
ANR	663492	ReturnStatement	return ;	7650:2:220016:220022	663304	12	True				
ANR	663493	IfStatement	if ( formattedLine [ firstChar ] == '*' )		663304	3					
ANR	663494	Condition	formattedLine [ firstChar ] == '*'	7653:5:220070:220100	663304	0	True				
ANR	663495	EqualityExpression	formattedLine [ firstChar ] == '*'		663304	0		==			
ANR	663496	ArrayIndexing	formattedLine [ firstChar ]		663304	0					
ANR	663497	Identifier	formattedLine		663304	0					
ANR	663498	Identifier	firstChar		663304	1					
ANR	663499	PrimaryExpression	'*'		663304	1					
ANR	663500	CompoundStatement		37:1:1174:1174	663304	1					
ANR	663501	IfStatement	"if ( formattedLine . compare ( firstChar , 2 , ""*/"" ) == 0 )"		663304	0					
ANR	663502	Condition	"formattedLine . compare ( firstChar , 2 , ""*/"" ) == 0"	7655:6:220112:220157	663304	0	True				
ANR	663503	EqualityExpression	"formattedLine . compare ( firstChar , 2 , ""*/"" ) == 0"		663304	0		==			
ANR	663504	CallExpression	"formattedLine . compare ( firstChar , 2 , ""*/"" )"		663304	0					
ANR	663505	Callee	formattedLine . compare		663304	0					
ANR	663506	MemberAccess	formattedLine . compare		663304	0					
ANR	663507	Identifier	formattedLine		663304	0					
ANR	663508	Identifier	compare		663304	1					
ANR	663509	ArgumentList	firstChar		663304	1					
ANR	663510	Argument	firstChar		663304	0					
ANR	663511	Identifier	firstChar		663304	0					
ANR	663512	Argument	2		663304	1					
ANR	663513	PrimaryExpression	2		663304	0					
ANR	663514	Argument	"""*/"""		663304	2					
ANR	663515	PrimaryExpression	"""*/"""		663304	0					
ANR	663516	PrimaryExpression	0		663304	1					
ANR	663517	CompoundStatement		39:2:1232:1232	663304	1					
ANR	663518	ExpressionStatement	"formattedLine = ""*/"""	7658:3:220205:220225	663304	0	True				
ANR	663519	AssignmentExpression	"formattedLine = ""*/"""		663304	0		=			
ANR	663520	Identifier	formattedLine		663304	0					
ANR	663521	PrimaryExpression	"""*/"""		663304	1					
ANR	663522	ElseStatement	else		663304	0					
ANR	663523	CompoundStatement		73:3:2110:2162	663304	0					
ANR	663524	IdentifierDeclStatement	"int secondChar = formattedLine . find_first_not_of ( "" \\t"" , firstChar + 1 ) ;"	7663:3:220284:220354	663304	0	True				
ANR	663525	IdentifierDecl	"secondChar = formattedLine . find_first_not_of ( "" \\t"" , firstChar + 1 )"		663304	0					
ANR	663526	IdentifierDeclType	int		663304	0					
ANR	663527	Identifier	secondChar		663304	1					
ANR	663528	AssignmentExpression	"secondChar = formattedLine . find_first_not_of ( "" \\t"" , firstChar + 1 )"		663304	2		=			
ANR	663529	Identifier	secondChar		663304	0					
ANR	663530	CallExpression	"formattedLine . find_first_not_of ( "" \\t"" , firstChar + 1 )"		663304	1					
ANR	663531	Callee	formattedLine . find_first_not_of		663304	0					
ANR	663532	MemberAccess	formattedLine . find_first_not_of		663304	0					
ANR	663533	Identifier	formattedLine		663304	0					
ANR	663534	Identifier	find_first_not_of		663304	1					
ANR	663535	ArgumentList	""" \\t"""		663304	1					
ANR	663536	Argument	""" \\t"""		663304	0					
ANR	663537	PrimaryExpression	""" \\t"""		663304	0					
ANR	663538	Argument	firstChar + 1		663304	1					
ANR	663539	AdditiveExpression	firstChar + 1		663304	0		+			
ANR	663540	Identifier	firstChar		663304	0					
ANR	663541	PrimaryExpression	1		663304	1					
ANR	663542	IfStatement	if ( secondChar < 0 )		663304	1					
ANR	663543	Condition	secondChar < 0	7664:7:220363:220376	663304	0	True				
ANR	663544	RelationalExpression	secondChar < 0		663304	0		<			
ANR	663545	Identifier	secondChar		663304	0					
ANR	663546	PrimaryExpression	0		663304	1					
ANR	663547	CompoundStatement		48:3:1452:1452	663304	1					
ANR	663548	ExpressionStatement	adjustChecksumIn ( - '*' )	7666:4:220388:220410	663304	0	True				
ANR	663549	CallExpression	adjustChecksumIn ( - '*' )		663304	0					
ANR	663550	Callee	adjustChecksumIn		663304	0					
ANR	663551	Identifier	adjustChecksumIn		663304	0					
ANR	663552	ArgumentList	- '*'		663304	1					
ANR	663553	Argument	- '*'		663304	0					
ANR	663554	UnaryOperationExpression	- '*'		663304	0					
ANR	663555	UnaryOperator	-		663304	0					
ANR	663556	PrimaryExpression	'*'		663304	1					
ANR	663557	ExpressionStatement	formattedLine . erase ( )	7667:4:220416:220437	663304	1	True				
ANR	663558	CallExpression	formattedLine . erase ( )		663304	0					
ANR	663559	Callee	formattedLine . erase		663304	0					
ANR	663560	MemberAccess	formattedLine . erase		663304	0					
ANR	663561	Identifier	formattedLine		663304	0					
ANR	663562	Identifier	erase		663304	1					
ANR	663563	ArgumentList			663304	1					
ANR	663564	ReturnStatement	return ;	7668:4:220443:220449	663304	2	True				
ANR	663565	IfStatement	if ( formattedLine [ secondChar ] == '*' )		663304	2					
ANR	663566	Condition	formattedLine [ secondChar ] == '*'	7670:7:220463:220494	663304	0	True				
ANR	663567	EqualityExpression	formattedLine [ secondChar ] == '*'		663304	0		==			
ANR	663568	ArrayIndexing	formattedLine [ secondChar ]		663304	0					
ANR	663569	Identifier	formattedLine		663304	0					
ANR	663570	Identifier	secondChar		663304	1					
ANR	663571	PrimaryExpression	'*'		663304	1					
ANR	663572	ReturnStatement	return ;	7671:4:220501:220507	663304	1	True				
ANR	663573	IdentifierDeclStatement	int indentLen = getIndentLength ( ) ;	7673:3:220542:220575	663304	3	True				
ANR	663574	IdentifierDecl	indentLen = getIndentLength ( )		663304	0					
ANR	663575	IdentifierDeclType	int		663304	0					
ANR	663576	Identifier	indentLen		663304	1					
ANR	663577	AssignmentExpression	indentLen = getIndentLength ( )		663304	2		=			
ANR	663578	Identifier	indentLen		663304	0					
ANR	663579	CallExpression	getIndentLength ( )		663304	1					
ANR	663580	Callee	getIndentLength		663304	0					
ANR	663581	Identifier	getIndentLength		663304	0					
ANR	663582	ArgumentList			663304	1					
ANR	663583	ExpressionStatement	adjustChecksumIn ( - '*' )	7674:3:220580:220602	663304	4	True				
ANR	663584	CallExpression	adjustChecksumIn ( - '*' )		663304	0					
ANR	663585	Callee	adjustChecksumIn		663304	0					
ANR	663586	Identifier	adjustChecksumIn		663304	0					
ANR	663587	ArgumentList	- '*'		663304	1					
ANR	663588	Argument	- '*'		663304	0					
ANR	663589	UnaryOperationExpression	- '*'		663304	0					
ANR	663590	UnaryOperator	-		663304	0					
ANR	663591	PrimaryExpression	'*'		663304	1					
ANR	663592	IfStatement	"if ( formattedLine . substr ( 0 , secondChar ) . find ( '\\t' ) != string :: npos )"		663304	5					
ANR	663593	Condition	"formattedLine . substr ( 0 , secondChar ) . find ( '\\t' ) != string :: npos"	7676:7:220657:220718	663304	0	True				
ANR	663594	EqualityExpression	"formattedLine . substr ( 0 , secondChar ) . find ( '\\t' ) != string :: npos"		663304	0		!=			
ANR	663595	CallExpression	"formattedLine . substr ( 0 , secondChar ) . find ( '\\t' )"		663304	0					
ANR	663596	Callee	"formattedLine . substr ( 0 , secondChar ) . find"		663304	0					
ANR	663597	MemberAccess	"formattedLine . substr ( 0 , secondChar ) . find"		663304	0					
ANR	663598	CallExpression	"formattedLine . substr ( 0 , secondChar )"		663304	0					
ANR	663599	Callee	formattedLine . substr		663304	0					
ANR	663600	MemberAccess	formattedLine . substr		663304	0					
ANR	663601	Identifier	formattedLine		663304	0					
ANR	663602	Identifier	substr		663304	1					
ANR	663603	ArgumentList	0		663304	1					
ANR	663604	Argument	0		663304	0					
ANR	663605	PrimaryExpression	0		663304	0					
ANR	663606	Argument	secondChar		663304	1					
ANR	663607	Identifier	secondChar		663304	0					
ANR	663608	Identifier	find		663304	1					
ANR	663609	ArgumentList	'\\t'		663304	1					
ANR	663610	Argument	'\\t'		663304	0					
ANR	663611	PrimaryExpression	'\\t'		663304	0					
ANR	663612	Identifier	string :: npos		663304	1					
ANR	663613	CompoundStatement		60:3:1794:1794	663304	1					
ANR	663614	ExpressionStatement	"formattedLine . erase ( firstChar , 1 )"	7678:4:220730:220763	663304	0	True				
ANR	663615	CallExpression	"formattedLine . erase ( firstChar , 1 )"		663304	0					
ANR	663616	Callee	formattedLine . erase		663304	0					
ANR	663617	MemberAccess	formattedLine . erase		663304	0					
ANR	663618	Identifier	formattedLine		663304	0					
ANR	663619	Identifier	erase		663304	1					
ANR	663620	ArgumentList	firstChar		663304	1					
ANR	663621	Argument	firstChar		663304	0					
ANR	663622	Identifier	firstChar		663304	0					
ANR	663623	Argument	1		663304	1					
ANR	663624	PrimaryExpression	1		663304	0					
ANR	663625	ElseStatement	else		663304	0					
ANR	663626	CompoundStatement		65:4:1857:1879	663304	0					
ANR	663627	IdentifierDeclStatement	int spacesToInsert = 0 ;	7682:4:220787:220809	663304	0	True				
ANR	663628	IdentifierDecl	spacesToInsert = 0		663304	0					
ANR	663629	IdentifierDeclType	int		663304	0					
ANR	663630	Identifier	spacesToInsert		663304	1					
ANR	663631	AssignmentExpression	spacesToInsert = 0		663304	2		=			
ANR	663632	Identifier	spacesToInsert		663304	0					
ANR	663633	PrimaryExpression	0		663304	1					
ANR	663634	IfStatement	if ( secondChar >= indentLen )		663304	1					
ANR	663635	Condition	secondChar >= indentLen	7683:8:220819:220841	663304	0	True				
ANR	663636	RelationalExpression	secondChar >= indentLen		663304	0		>=			
ANR	663637	Identifier	secondChar		663304	0					
ANR	663638	Identifier	indentLen		663304	1					
ANR	663639	ExpressionStatement	spacesToInsert = secondChar	7684:5:220849:220876	663304	1	True				
ANR	663640	AssignmentExpression	spacesToInsert = secondChar		663304	0		=			
ANR	663641	Identifier	spacesToInsert		663304	0					
ANR	663642	Identifier	secondChar		663304	1					
ANR	663643	ElseStatement	else		663304	0					
ANR	663644	ExpressionStatement	spacesToInsert = indentLen	7686:5:220892:220918	663304	0	True				
ANR	663645	AssignmentExpression	spacesToInsert = indentLen		663304	0		=			
ANR	663646	Identifier	spacesToInsert		663304	0					
ANR	663647	Identifier	indentLen		663304	1					
ANR	663648	ExpressionStatement	"formattedLine = string ( spacesToInsert , ' ' ) + formattedLine . substr ( secondChar )"	7687:4:220924:221002	663304	2	True				
ANR	663649	AssignmentExpression	"formattedLine = string ( spacesToInsert , ' ' ) + formattedLine . substr ( secondChar )"		663304	0		=			
ANR	663650	Identifier	formattedLine		663304	0					
ANR	663651	AdditiveExpression	"string ( spacesToInsert , ' ' ) + formattedLine . substr ( secondChar )"		663304	1		+			
ANR	663652	CallExpression	"string ( spacesToInsert , ' ' )"		663304	0					
ANR	663653	Callee	string		663304	0					
ANR	663654	Identifier	string		663304	0					
ANR	663655	ArgumentList	spacesToInsert		663304	1					
ANR	663656	Argument	spacesToInsert		663304	0					
ANR	663657	Identifier	spacesToInsert		663304	0					
ANR	663658	Argument	' '		663304	1					
ANR	663659	PrimaryExpression	' '		663304	0					
ANR	663660	CallExpression	formattedLine . substr ( secondChar )		663304	1					
ANR	663661	Callee	formattedLine . substr		663304	0					
ANR	663662	MemberAccess	formattedLine . substr		663304	0					
ANR	663663	Identifier	formattedLine		663304	0					
ANR	663664	Identifier	substr		663304	1					
ANR	663665	ArgumentList	secondChar		663304	1					
ANR	663666	Argument	secondChar		663304	0					
ANR	663667	Identifier	secondChar		663304	0					
ANR	663668	IdentifierDeclStatement	"int lastChar = formattedLine . find_last_not_of ( "" \\t"" ) ;"	7690:3:221040:221092	663304	6	True				
ANR	663669	IdentifierDecl	"lastChar = formattedLine . find_last_not_of ( "" \\t"" )"		663304	0					
ANR	663670	IdentifierDeclType	int		663304	0					
ANR	663671	Identifier	lastChar		663304	1					
ANR	663672	AssignmentExpression	"lastChar = formattedLine . find_last_not_of ( "" \\t"" )"		663304	2		=			
ANR	663673	Identifier	lastChar		663304	0					
ANR	663674	CallExpression	"formattedLine . find_last_not_of ( "" \\t"" )"		663304	1					
ANR	663675	Callee	formattedLine . find_last_not_of		663304	0					
ANR	663676	MemberAccess	formattedLine . find_last_not_of		663304	0					
ANR	663677	Identifier	formattedLine		663304	0					
ANR	663678	Identifier	find_last_not_of		663304	1					
ANR	663679	ArgumentList	""" \\t"""		663304	1					
ANR	663680	Argument	""" \\t"""		663304	0					
ANR	663681	PrimaryExpression	""" \\t"""		663304	0					
ANR	663682	IfStatement	if ( lastChar > - 1 && formattedLine [ lastChar ] == '*' )		663304	7					
ANR	663683	Condition	lastChar > - 1 && formattedLine [ lastChar ] == '*'	7691:7:221101:221147	663304	0	True				
ANR	663684	AndExpression	lastChar > - 1 && formattedLine [ lastChar ] == '*'		663304	0		&&			
ANR	663685	RelationalExpression	lastChar > - 1		663304	0		>			
ANR	663686	Identifier	lastChar		663304	0					
ANR	663687	UnaryOperationExpression	- 1		663304	1					
ANR	663688	UnaryOperator	-		663304	0					
ANR	663689	PrimaryExpression	1		663304	1					
ANR	663690	EqualityExpression	formattedLine [ lastChar ] == '*'		663304	1		==			
ANR	663691	ArrayIndexing	formattedLine [ lastChar ]		663304	0					
ANR	663692	Identifier	formattedLine		663304	0					
ANR	663693	Identifier	lastChar		663304	1					
ANR	663694	PrimaryExpression	'*'		663304	1					
ANR	663695	CompoundStatement		75:3:2223:2223	663304	1					
ANR	663696	ExpressionStatement	adjustChecksumIn ( - '*' )	7693:4:221159:221181	663304	0	True				
ANR	663697	CallExpression	adjustChecksumIn ( - '*' )		663304	0					
ANR	663698	Callee	adjustChecksumIn		663304	0					
ANR	663699	Identifier	adjustChecksumIn		663304	0					
ANR	663700	ArgumentList	- '*'		663304	1					
ANR	663701	Argument	- '*'		663304	0					
ANR	663702	UnaryOperationExpression	- '*'		663304	0					
ANR	663703	UnaryOperator	-		663304	0					
ANR	663704	PrimaryExpression	'*'		663304	1					
ANR	663705	ExpressionStatement	formattedLine [ lastChar ] = ' '	7694:4:221187:221216	663304	1	True				
ANR	663706	AssignmentExpression	formattedLine [ lastChar ] = ' '		663304	0		=			
ANR	663707	ArrayIndexing	formattedLine [ lastChar ]		663304	0					
ANR	663708	Identifier	formattedLine		663304	0					
ANR	663709	Identifier	lastChar		663304	1					
ANR	663710	PrimaryExpression	' '		663304	1					
ANR	663711	ElseStatement	else		663304	0					
ANR	663712	CompoundStatement		82:1:2307:2307	663304	0					
ANR	663713	IfStatement	"if ( formattedLine . substr ( 0 , firstChar ) . find ( '\\t' ) == string :: npos )"		663304	0					
ANR	663714	Condition	"formattedLine . substr ( 0 , firstChar ) . find ( '\\t' ) == string :: npos"	7702:6:221315:221375	663304	0	True				
ANR	663715	EqualityExpression	"formattedLine . substr ( 0 , firstChar ) . find ( '\\t' ) == string :: npos"		663304	0		==			
ANR	663716	CallExpression	"formattedLine . substr ( 0 , firstChar ) . find ( '\\t' )"		663304	0					
ANR	663717	Callee	"formattedLine . substr ( 0 , firstChar ) . find"		663304	0					
ANR	663718	MemberAccess	"formattedLine . substr ( 0 , firstChar ) . find"		663304	0					
ANR	663719	CallExpression	"formattedLine . substr ( 0 , firstChar )"		663304	0					
ANR	663720	Callee	formattedLine . substr		663304	0					
ANR	663721	MemberAccess	formattedLine . substr		663304	0					
ANR	663722	Identifier	formattedLine		663304	0					
ANR	663723	Identifier	substr		663304	1					
ANR	663724	ArgumentList	0		663304	1					
ANR	663725	Argument	0		663304	0					
ANR	663726	PrimaryExpression	0		663304	0					
ANR	663727	Argument	firstChar		663304	1					
ANR	663728	Identifier	firstChar		663304	0					
ANR	663729	Identifier	find		663304	1					
ANR	663730	ArgumentList	'\\t'		663304	1					
ANR	663731	Argument	'\\t'		663304	0					
ANR	663732	PrimaryExpression	'\\t'		663304	0					
ANR	663733	Identifier	string :: npos		663304	1					
ANR	663734	CompoundStatement		87:3:2455:2488	663304	1					
ANR	663735	IdentifierDeclStatement	int indentLen = getIndentLength ( ) ;	7704:3:221385:221418	663304	0	True				
ANR	663736	IdentifierDecl	indentLen = getIndentLength ( )		663304	0					
ANR	663737	IdentifierDeclType	int		663304	0					
ANR	663738	Identifier	indentLen		663304	1					
ANR	663739	AssignmentExpression	indentLen = getIndentLength ( )		663304	2		=			
ANR	663740	Identifier	indentLen		663304	0					
ANR	663741	CallExpression	getIndentLength ( )		663304	1					
ANR	663742	Callee	getIndentLength		663304	0					
ANR	663743	Identifier	getIndentLength		663304	0					
ANR	663744	ArgumentList			663304	1					
ANR	663745	IfStatement	if ( firstChar < indentLen )		663304	1					
ANR	663746	Condition	firstChar < indentLen	7705:7:221427:221447	663304	0	True				
ANR	663747	RelationalExpression	firstChar < indentLen		663304	0		<			
ANR	663748	Identifier	firstChar		663304	0					
ANR	663749	Identifier	indentLen		663304	1					
ANR	663750	CompoundStatement		90:4:2529:2566	663304	1					
ANR	663751	IdentifierDeclStatement	"string stringToInsert ( indentLen , ' ' ) ;"	7707:4:221459:221496	663304	0	True				
ANR	663752	IdentifierDecl	"stringToInsert ( indentLen , ' ' )"		663304	0					
ANR	663753	IdentifierDeclType	string		663304	0					
ANR	663754	Identifier	stringToInsert		663304	1					
ANR	663755	Expression	"indentLen , ' '"		663304	2					
ANR	663756	Identifier	indentLen		663304	0					
ANR	663757	PrimaryExpression	' '		663304	1					
ANR	663758	ExpressionStatement	formattedLine = stringToInsert + formattedLine . substr ( firstChar )	7708:4:221502:221566	663304	1	True				
ANR	663759	AssignmentExpression	formattedLine = stringToInsert + formattedLine . substr ( firstChar )		663304	0		=			
ANR	663760	Identifier	formattedLine		663304	0					
ANR	663761	AdditiveExpression	stringToInsert + formattedLine . substr ( firstChar )		663304	1		+			
ANR	663762	Identifier	stringToInsert		663304	0					
ANR	663763	CallExpression	formattedLine . substr ( firstChar )		663304	1					
ANR	663764	Callee	formattedLine . substr		663304	0					
ANR	663765	MemberAccess	formattedLine . substr		663304	0					
ANR	663766	Identifier	formattedLine		663304	0					
ANR	663767	Identifier	substr		663304	1					
ANR	663768	ArgumentList	firstChar		663304	1					
ANR	663769	Argument	firstChar		663304	0					
ANR	663770	Identifier	firstChar		663304	0					
ANR	663771	ReturnType	void		663304	1					
ANR	663772	Identifier	ASFormatter :: stripCommentPrefix		663304	2					
ANR	663773	ParameterList			663304	3					
ANR	663774	CFGEntryNode	ENTRY		663304		True				
ANR	663775	CFGExitNode	EXIT		663304		True				
ANR	663776	Symbol	firstChar		663304						
ANR	663777	Symbol	* formattedLine		663304						
ANR	663778	Symbol	string		663304						
ANR	663779	Symbol	string :: npos		663304						
ANR	663780	Symbol	stringToInsert		663304						
ANR	663781	Symbol	* followingText		663304						
ANR	663782	Symbol	secondChar		663304						
ANR	663783	Symbol	formattedLine . find_last_not_of		663304						
ANR	663784	Symbol	formattedLine . find		663304						
ANR	663785	Symbol	isInCommentStartLine		663304						
ANR	663786	Symbol	indentLen		663304						
ANR	663787	Symbol	* secondChar		663304						
ANR	663788	Symbol	* lastChar		663304						
ANR	663789	Symbol	spacesToInsert		663304						
ANR	663790	Symbol	followingTextIndent		663304						
ANR	663791	Symbol	"formattedLine . substr ( 0 , firstChar ) . find"		663304						
ANR	663792	Symbol	formattedLine . find_first_not_of		663304						
ANR	663793	Symbol	followingText		663304						
ANR	663794	Symbol	formattedLine . substr		663304						
ANR	663795	Symbol	commentOpener		663304						
ANR	663796	Symbol	getIndentLength		663304						
ANR	663797	Symbol	* firstChar		663304						
ANR	663798	Symbol	"formattedLine . substr ( 0 , secondChar ) . find"		663304						
ANR	663799	Symbol	commentEnd		663304						
ANR	663800	Symbol	formattedLine		663304						
ANR	663801	Symbol	formattedLine . compare		663304						
ANR	663802	Symbol	lastChar		663304						
