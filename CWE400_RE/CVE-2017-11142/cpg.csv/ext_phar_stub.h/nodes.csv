command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	1200418	File	data/converged/CVE-2017-11142_php-src/ext_phar_stub.h								
ANR	1200419	Function	phar_get_stub	21:0:1144:8793							
ANR	1200420	FunctionDef	"phar_get_stub (const char * index_php , const char * web , size_t * len , char * * stub , const int name_len , const int web_len TSRMLS_DC)"		1200419	0					
ANR	1200421	CompoundStatement		22:0:1292:8793	1200419	0					
ANR	1200422	Statement	static	23:1:1295:1300	1200419	0	True				
ANR	1200423	IdentifierDeclStatement	"const char newstub0 [ ] = ""<?php\\n\\n$web = '"" ;"	23:8:1302:1345	1200419	1	True				
ANR	1200424	IdentifierDecl	"newstub0 [ ] = ""<?php\\n\\n$web = '"""		1200419	0					
ANR	1200425	IdentifierDeclType	const char [ ]		1200419	0					
ANR	1200426	Identifier	newstub0		1200419	1					
ANR	1200427	AssignmentExpression	"newstub0 [ ] = ""<?php\\n\\n$web = '"""		1200419	2		=			
ANR	1200428	Identifier	newstub0		1200419	0					
ANR	1200429	PrimaryExpression	"""<?php\\n\\n$web = '"""		1200419	1					
ANR	1200430	Statement	static	24:1:1348:1353	1200419	2	True				
ANR	1200431	IdentifierDeclStatement	"const char newstub1_0 [ ] = ""';\\n\\nif (in_array('phar', stream_get_wrappers()) && class_exists('Phar', 0)) {\\nPhar::interceptFileFuncs();\\nset_include_path('phar://' . __FILE__ . PATH_SEPARATOR . get_include_path());\\nPhar::webPhar(null, $web);\\ninclude 'phar://' . __FILE__ . '/' . Extract_Phar::START;\\nreturn;\\n}\\n\\nif (@(isset($_SERVER['REQUEST_URI']) && isset($_SERVER['REQUEST_METHOD']) && ($_SERVER['REQUEST_METHOD'] == 'GET' || $_SERVER['REQUEST_METHOD'] == 'POST'))) {\\nExtract_Phar::go(true);\\n$mimes = array(\\n'phps' => 2,\\n'c' => 'text/plain',\\n'cc' => 'text/plain',\\n'cpp' => 'text/plain',\\n'c++' => 'text/plain',\\n'dtd' => 'text/plain',\\n'h' => 'text/plain',\\n'log' => 'text/plain',\\n'rng' => 'text/plain',\\n'txt' => 'text/plain',\\n'xsd' => 'text/plain',\\n'php' => 1,\\n'inc' => 1,\\n'avi' => 'video/avi',\\n'bmp' => 'image/bmp',\\n'css' => 'text/css',\\n'gif' => 'image/gif',\\n'htm' => 'text/html',\\n'html' => 'text/html',\\n'htmls' => 'text/html',\\n'ico' => 'image/x-ico',\\n'jpe' => 'image/jpeg',\\n'jpg' => 'image/jpeg',\\n'jpeg' => 'image/jpeg',\\n'js' => 'application/x-javascript',\\n'midi' => 'audio/midi',\\n'mid' => 'audio/midi',\\n'mod' => 'audio/mod',\\n'mov' => 'movie/quicktime',\\n'mp3' => 'audio/mp3',\\n'mpg' => 'video/mpeg',\\n'mpeg' => 'video/mpeg',\\n'pdf' => 'application/pdf',\\n'png' => 'image/png',\\n'swf' => 'application/shockwave-flash',\\n'tif' => 'image/tiff',\\n'tiff' => 'image/tiff',\\n'wav' => 'audio/wav',\\n'xbm' => 'image/xbm',\\n'xml' => 'text/xml',\\n);\\n\\nheader(\\""Cache-Control: no-cache, must-revalidate\\"");\\nheader(\\""Pragma: no-cache\\"");\\n\\n$basename = basename(__FILE__);\\nif (!strpos($_SERVER['REQUEST_URI'], $basename)) {\\nchdir(Extract_Phar::$temp);\\ninclude $web;\\nreturn;\\n}\\n$pt = substr($_SERVER['REQUEST_URI'], strpos($_SERVER['REQUEST_URI'], $basename) + strlen($basename));\\nif (!$pt || $pt == '/') {\\n$pt = $web;\\nheader('HTTP/1.1 301 Moved Permanently');\\nheader('Location: ' . $_SERVER['REQUEST_URI'] . '/' . $pt);\\nexit;\\n}\\n$a = realpath(Extract_Phar::$temp . DIRECTORY_SEPARATOR . $pt);\\nif (!$a || strlen(dirname($a)) < strlen("" ;"	24:8:1355:3429	1200419	3	True				
ANR	1200432	IdentifierDecl	"newstub1_0 [ ] = ""';\\n\\nif (in_array('phar', stream_get_wrappers()) && class_exists('Phar', 0)) {\\nPhar::interceptFileFuncs();\\nset_include_path('phar://' . __FILE__ . PATH_SEPARATOR . get_include_path());\\nPhar::webPhar(null, $web);\\ninclude 'phar://' . __FILE__ . '/' . Extract_Phar::START;\\nreturn;\\n}\\n\\nif (@(isset($_SERVER['REQUEST_URI']) && isset($_SERVER['REQUEST_METHOD']) && ($_SERVER['REQUEST_METHOD'] == 'GET' || $_SERVER['REQUEST_METHOD'] == 'POST'))) {\\nExtract_Phar::go(true);\\n$mimes = array(\\n'phps' => 2,\\n'c' => 'text/plain',\\n'cc' => 'text/plain',\\n'cpp' => 'text/plain',\\n'c++' => 'text/plain',\\n'dtd' => 'text/plain',\\n'h' => 'text/plain',\\n'log' => 'text/plain',\\n'rng' => 'text/plain',\\n'txt' => 'text/plain',\\n'xsd' => 'text/plain',\\n'php' => 1,\\n'inc' => 1,\\n'avi' => 'video/avi',\\n'bmp' => 'image/bmp',\\n'css' => 'text/css',\\n'gif' => 'image/gif',\\n'htm' => 'text/html',\\n'html' => 'text/html',\\n'htmls' => 'text/html',\\n'ico' => 'image/x-ico',\\n'jpe' => 'image/jpeg',\\n'jpg' => 'image/jpeg',\\n'jpeg' => 'image/jpeg',\\n'js' => 'application/x-javascript',\\n'midi' => 'audio/midi',\\n'mid' => 'audio/midi',\\n'mod' => 'audio/mod',\\n'mov' => 'movie/quicktime',\\n'mp3' => 'audio/mp3',\\n'mpg' => 'video/mpeg',\\n'mpeg' => 'video/mpeg',\\n'pdf' => 'application/pdf',\\n'png' => 'image/png',\\n'swf' => 'application/shockwave-flash',\\n'tif' => 'image/tiff',\\n'tiff' => 'image/tiff',\\n'wav' => 'audio/wav',\\n'xbm' => 'image/xbm',\\n'xml' => 'text/xml',\\n);\\n\\nheader(\\""Cache-Control: no-cache, must-revalidate\\"");\\nheader(\\""Pragma: no-cache\\"");\\n\\n$basename = basename(__FILE__);\\nif (!strpos($_SERVER['REQUEST_URI'], $basename)) {\\nchdir(Extract_Phar::$temp);\\ninclude $web;\\nreturn;\\n}\\n$pt = substr($_SERVER['REQUEST_URI'], strpos($_SERVER['REQUEST_URI'], $basename) + strlen($basename));\\nif (!$pt || $pt == '/') {\\n$pt = $web;\\nheader('HTTP/1.1 301 Moved Permanently');\\nheader('Location: ' . $_SERVER['REQUEST_URI'] . '/' . $pt);\\nexit;\\n}\\n$a = realpath(Extract_Phar::$temp . DIRECTORY_SEPARATOR . $pt);\\nif (!$a || strlen(dirname($a)) < strlen("""		1200419	0					
ANR	1200433	IdentifierDeclType	const char [ ]		1200419	0					
ANR	1200434	Identifier	newstub1_0		1200419	1					
ANR	1200435	AssignmentExpression	"newstub1_0 [ ] = ""';\\n\\nif (in_array('phar', stream_get_wrappers()) && class_exists('Phar', 0)) {\\nPhar::interceptFileFuncs();\\nset_include_path('phar://' . __FILE__ . PATH_SEPARATOR . get_include_path());\\nPhar::webPhar(null, $web);\\ninclude 'phar://' . __FILE__ . '/' . Extract_Phar::START;\\nreturn;\\n}\\n\\nif (@(isset($_SERVER['REQUEST_URI']) && isset($_SERVER['REQUEST_METHOD']) && ($_SERVER['REQUEST_METHOD'] == 'GET' || $_SERVER['REQUEST_METHOD'] == 'POST'))) {\\nExtract_Phar::go(true);\\n$mimes = array(\\n'phps' => 2,\\n'c' => 'text/plain',\\n'cc' => 'text/plain',\\n'cpp' => 'text/plain',\\n'c++' => 'text/plain',\\n'dtd' => 'text/plain',\\n'h' => 'text/plain',\\n'log' => 'text/plain',\\n'rng' => 'text/plain',\\n'txt' => 'text/plain',\\n'xsd' => 'text/plain',\\n'php' => 1,\\n'inc' => 1,\\n'avi' => 'video/avi',\\n'bmp' => 'image/bmp',\\n'css' => 'text/css',\\n'gif' => 'image/gif',\\n'htm' => 'text/html',\\n'html' => 'text/html',\\n'htmls' => 'text/html',\\n'ico' => 'image/x-ico',\\n'jpe' => 'image/jpeg',\\n'jpg' => 'image/jpeg',\\n'jpeg' => 'image/jpeg',\\n'js' => 'application/x-javascript',\\n'midi' => 'audio/midi',\\n'mid' => 'audio/midi',\\n'mod' => 'audio/mod',\\n'mov' => 'movie/quicktime',\\n'mp3' => 'audio/mp3',\\n'mpg' => 'video/mpeg',\\n'mpeg' => 'video/mpeg',\\n'pdf' => 'application/pdf',\\n'png' => 'image/png',\\n'swf' => 'application/shockwave-flash',\\n'tif' => 'image/tiff',\\n'tiff' => 'image/tiff',\\n'wav' => 'audio/wav',\\n'xbm' => 'image/xbm',\\n'xml' => 'text/xml',\\n);\\n\\nheader(\\""Cache-Control: no-cache, must-revalidate\\"");\\nheader(\\""Pragma: no-cache\\"");\\n\\n$basename = basename(__FILE__);\\nif (!strpos($_SERVER['REQUEST_URI'], $basename)) {\\nchdir(Extract_Phar::$temp);\\ninclude $web;\\nreturn;\\n}\\n$pt = substr($_SERVER['REQUEST_URI'], strpos($_SERVER['REQUEST_URI'], $basename) + strlen($basename));\\nif (!$pt || $pt == '/') {\\n$pt = $web;\\nheader('HTTP/1.1 301 Moved Permanently');\\nheader('Location: ' . $_SERVER['REQUEST_URI'] . '/' . $pt);\\nexit;\\n}\\n$a = realpath(Extract_Phar::$temp . DIRECTORY_SEPARATOR . $pt);\\nif (!$a || strlen(dirname($a)) < strlen("""		1200419	2		=			
ANR	1200436	Identifier	newstub1_0		1200419	0					
ANR	1200437	PrimaryExpression	"""';\\n\\nif (in_array('phar', stream_get_wrappers()) && class_exists('Phar', 0)) {\\nPhar::interceptFileFuncs();\\nset_include_path('phar://' . __FILE__ . PATH_SEPARATOR . get_include_path());\\nPhar::webPhar(null, $web);\\ninclude 'phar://' . __FILE__ . '/' . Extract_Phar::START;\\nreturn;\\n}\\n\\nif (@(isset($_SERVER['REQUEST_URI']) && isset($_SERVER['REQUEST_METHOD']) && ($_SERVER['REQUEST_METHOD'] == 'GET' || $_SERVER['REQUEST_METHOD'] == 'POST'))) {\\nExtract_Phar::go(true);\\n$mimes = array(\\n'phps' => 2,\\n'c' => 'text/plain',\\n'cc' => 'text/plain',\\n'cpp' => 'text/plain',\\n'c++' => 'text/plain',\\n'dtd' => 'text/plain',\\n'h' => 'text/plain',\\n'log' => 'text/plain',\\n'rng' => 'text/plain',\\n'txt' => 'text/plain',\\n'xsd' => 'text/plain',\\n'php' => 1,\\n'inc' => 1,\\n'avi' => 'video/avi',\\n'bmp' => 'image/bmp',\\n'css' => 'text/css',\\n'gif' => 'image/gif',\\n'htm' => 'text/html',\\n'html' => 'text/html',\\n'htmls' => 'text/html',\\n'ico' => 'image/x-ico',\\n'jpe' => 'image/jpeg',\\n'jpg' => 'image/jpeg',\\n'jpeg' => 'image/jpeg',\\n'js' => 'application/x-javascript',\\n'midi' => 'audio/midi',\\n'mid' => 'audio/midi',\\n'mod' => 'audio/mod',\\n'mov' => 'movie/quicktime',\\n'mp3' => 'audio/mp3',\\n'mpg' => 'video/mpeg',\\n'mpeg' => 'video/mpeg',\\n'pdf' => 'application/pdf',\\n'png' => 'image/png',\\n'swf' => 'application/shockwave-flash',\\n'tif' => 'image/tiff',\\n'tiff' => 'image/tiff',\\n'wav' => 'audio/wav',\\n'xbm' => 'image/xbm',\\n'xml' => 'text/xml',\\n);\\n\\nheader(\\""Cache-Control: no-cache, must-revalidate\\"");\\nheader(\\""Pragma: no-cache\\"");\\n\\n$basename = basename(__FILE__);\\nif (!strpos($_SERVER['REQUEST_URI'], $basename)) {\\nchdir(Extract_Phar::$temp);\\ninclude $web;\\nreturn;\\n}\\n$pt = substr($_SERVER['REQUEST_URI'], strpos($_SERVER['REQUEST_URI'], $basename) + strlen($basename));\\nif (!$pt || $pt == '/') {\\n$pt = $web;\\nheader('HTTP/1.1 301 Moved Permanently');\\nheader('Location: ' . $_SERVER['REQUEST_URI'] . '/' . $pt);\\nexit;\\n}\\n$a = realpath(Extract_Phar::$temp . DIRECTORY_SEPARATOR . $pt);\\nif (!$a || strlen(dirname($a)) < strlen("""		1200419	1					
ANR	1200438	Statement	static	25:1:3432:3437	1200419	4	True				
ANR	1200439	IdentifierDeclStatement	"const char newstub1_1 [ ] = ""Extract_Phar::$temp)) {\\nheader('HTTP/1.0 404 Not Found');\\necho \\""<html>\\\\n <head>\\\\n  <title>File Not Found<title>\\\\n </head>\\\\n <body>\\\\n  <h1>404 - File \\"", $pt, \\"" Not Found</h1>\\\\n </body>\\\\n</html>\\"";\\nexit;\\n}\\n$b = pathinfo($a);\\nif (!isset($b['extension'])) {\\nheader('Content-Type: text/plain');\\nheader('Content-Length: ' . filesize($a));\\nreadfile($a);\\nexit;\\n}\\nif (isset($mimes[$b['extension']])) {\\nif ($mimes[$b['extension']] === 1) {\\ninclude $a;\\nexit;\\n}\\nif ($mimes[$b['extension']] === 2) {\\nhighlight_file($a);\\nexit;\\n}\\nheader('Content-Type: ' .$mimes[$b['extension']]);\\nheader('Content-Length: ' . filesize($a));\\nreadfile($a);\\nexit;\\n}\\n}\\n\\nclass Extract_Phar\\n{\\nstatic $temp;\\nstatic $origdir;\\nconst GZ = 0x1000;\\nconst BZ2 = 0x2000;\\nconst MASK = 0x3000;\\nconst START = '"" ;"	25:8:3439:4273	1200419	5	True				
ANR	1200440	IdentifierDecl	"newstub1_1 [ ] = ""Extract_Phar::$temp)) {\\nheader('HTTP/1.0 404 Not Found');\\necho \\""<html>\\\\n <head>\\\\n  <title>File Not Found<title>\\\\n </head>\\\\n <body>\\\\n  <h1>404 - File \\"", $pt, \\"" Not Found</h1>\\\\n </body>\\\\n</html>\\"";\\nexit;\\n}\\n$b = pathinfo($a);\\nif (!isset($b['extension'])) {\\nheader('Content-Type: text/plain');\\nheader('Content-Length: ' . filesize($a));\\nreadfile($a);\\nexit;\\n}\\nif (isset($mimes[$b['extension']])) {\\nif ($mimes[$b['extension']] === 1) {\\ninclude $a;\\nexit;\\n}\\nif ($mimes[$b['extension']] === 2) {\\nhighlight_file($a);\\nexit;\\n}\\nheader('Content-Type: ' .$mimes[$b['extension']]);\\nheader('Content-Length: ' . filesize($a));\\nreadfile($a);\\nexit;\\n}\\n}\\n\\nclass Extract_Phar\\n{\\nstatic $temp;\\nstatic $origdir;\\nconst GZ = 0x1000;\\nconst BZ2 = 0x2000;\\nconst MASK = 0x3000;\\nconst START = '"""		1200419	0					
ANR	1200441	IdentifierDeclType	const char [ ]		1200419	0					
ANR	1200442	Identifier	newstub1_1		1200419	1					
ANR	1200443	AssignmentExpression	"newstub1_1 [ ] = ""Extract_Phar::$temp)) {\\nheader('HTTP/1.0 404 Not Found');\\necho \\""<html>\\\\n <head>\\\\n  <title>File Not Found<title>\\\\n </head>\\\\n <body>\\\\n  <h1>404 - File \\"", $pt, \\"" Not Found</h1>\\\\n </body>\\\\n</html>\\"";\\nexit;\\n}\\n$b = pathinfo($a);\\nif (!isset($b['extension'])) {\\nheader('Content-Type: text/plain');\\nheader('Content-Length: ' . filesize($a));\\nreadfile($a);\\nexit;\\n}\\nif (isset($mimes[$b['extension']])) {\\nif ($mimes[$b['extension']] === 1) {\\ninclude $a;\\nexit;\\n}\\nif ($mimes[$b['extension']] === 2) {\\nhighlight_file($a);\\nexit;\\n}\\nheader('Content-Type: ' .$mimes[$b['extension']]);\\nheader('Content-Length: ' . filesize($a));\\nreadfile($a);\\nexit;\\n}\\n}\\n\\nclass Extract_Phar\\n{\\nstatic $temp;\\nstatic $origdir;\\nconst GZ = 0x1000;\\nconst BZ2 = 0x2000;\\nconst MASK = 0x3000;\\nconst START = '"""		1200419	2		=			
ANR	1200444	Identifier	newstub1_1		1200419	0					
ANR	1200445	PrimaryExpression	"""Extract_Phar::$temp)) {\\nheader('HTTP/1.0 404 Not Found');\\necho \\""<html>\\\\n <head>\\\\n  <title>File Not Found<title>\\\\n </head>\\\\n <body>\\\\n  <h1>404 - File \\"", $pt, \\"" Not Found</h1>\\\\n </body>\\\\n</html>\\"";\\nexit;\\n}\\n$b = pathinfo($a);\\nif (!isset($b['extension'])) {\\nheader('Content-Type: text/plain');\\nheader('Content-Length: ' . filesize($a));\\nreadfile($a);\\nexit;\\n}\\nif (isset($mimes[$b['extension']])) {\\nif ($mimes[$b['extension']] === 1) {\\ninclude $a;\\nexit;\\n}\\nif ($mimes[$b['extension']] === 2) {\\nhighlight_file($a);\\nexit;\\n}\\nheader('Content-Type: ' .$mimes[$b['extension']]);\\nheader('Content-Length: ' . filesize($a));\\nreadfile($a);\\nexit;\\n}\\n}\\n\\nclass Extract_Phar\\n{\\nstatic $temp;\\nstatic $origdir;\\nconst GZ = 0x1000;\\nconst BZ2 = 0x2000;\\nconst MASK = 0x3000;\\nconst START = '"""		1200419	1					
ANR	1200446	Statement	static	26:1:4276:4281	1200419	6	True				
ANR	1200447	IdentifierDeclStatement	"const char newstub2 [ ] = ""';\\nconst LEN = "" ;"	26:8:4283:4325	1200419	7	True				
ANR	1200448	IdentifierDecl	"newstub2 [ ] = ""';\\nconst LEN = """		1200419	0					
ANR	1200449	IdentifierDeclType	const char [ ]		1200419	0					
ANR	1200450	Identifier	newstub2		1200419	1					
ANR	1200451	AssignmentExpression	"newstub2 [ ] = ""';\\nconst LEN = """		1200419	2		=			
ANR	1200452	Identifier	newstub2		1200419	0					
ANR	1200453	PrimaryExpression	"""';\\nconst LEN = """		1200419	1					
ANR	1200454	Statement	static	27:1:4328:4333	1200419	8	True				
ANR	1200455	IdentifierDeclStatement	"const char newstub3_0 [ ] = "";\\n\\nstatic function go($return = false)\\n{\\n$fp = fopen(__FILE__, 'rb');\\nfseek($fp, self::LEN);\\n$L = unpack('V', $a = (binary)fread($fp, 4));\\n$m = (binary)'';\\n\\ndo {\\n$read = 8192;\\nif ($L[1] - strlen($m) < 8192) {\\n$read = $L[1] - strlen($m);\\n}\\n$last = (binary)fread($fp, $read);\\n$m .= $last;\\n} while (strlen($last) && strlen($m) < $L[1]);\\n\\nif (strlen($m) < $L[1]) {\\ndie('ERROR: manifest length read was \\""' .\\nstrlen($m) .'\\"" should be \\""' .\\n$L[1] . '\\""');\\n}\\n\\n$info = self::_unpack($m);\\n$f = $info['c'];\\n\\nif ($f & self::GZ) {\\nif (!function_exists('gzinflate')) {\\ndie('Error: zlib extension is not enabled -' .\\n' gzinflate() function needed for zlib-compressed .phars');\\n}\\n}\\n\\nif ($f & self::BZ2) {\\nif (!function_exists('bzdecompress')) {\\ndie('Error: bzip2 extension is not enabled -' .\\n' bzdecompress() function needed for bz2-compressed .phars');\\n}\\n}\\n\\n$temp = self::tmpdir();\\n\\nif (!$temp || !is_writable($temp)) {\\n$sessionpath = session_save_path();\\nif (strpos ($sessionpath, \\"";\\"") !== false)\\n$sessionpath = substr ($sessionpath, strpos ($sessionpath, \\"";\\"")+1);\\nif (!file_exists($sessionpath) || !is_dir($sessionpath)) {\\ndie('Could not locate temporary directory to extract phar');\\n}\\n$temp = $sessionpath;\\n}\\n\\n$temp .= '/pharextract/'.basename(__FILE__, '.phar');\\nself::$temp = $temp;\\nself::$origdir = getcwd();\\n@mkdir($temp, 0777, true);\\n$temp = realpath($temp);\\n\\nif (!file_exists($temp . DIRECTORY_SEPARATOR . md5_file(__FILE__))) {\\nself::_removeTmpFiles($temp, getcwd());\\n@mkdir($temp, 0777, true);\\n@file_put_contents($temp . '/' . md5_file(__FILE__), '');\\n\\nforeach ($info['m'] as $path => $file) {\\n$a = !file_exists(dirname($temp . '/' . $path));\\n@mkdir(dirname($temp . '/' . $path), 0777, true);\\nclearstatcache();\\n\\nif ($path[strlen($path) - 1] == '/') {\\n@mkdir($temp . '/' . $path, 0777);\\n} else {\\nfile_put_contents($temp . '/' . $path, self::extractFile($path, $file, $fp));\\n@chmod($temp . '/' . $path, 0666);\\n}\\n}\\n}\\n\\nchdir($temp);\\n\\nif (!$return) {\\ninclude self::ST"" ;"	27:8:4335:6409	1200419	9	True				
ANR	1200456	IdentifierDecl	"newstub3_0 [ ] = "";\\n\\nstatic function go($return = false)\\n{\\n$fp = fopen(__FILE__, 'rb');\\nfseek($fp, self::LEN);\\n$L = unpack('V', $a = (binary)fread($fp, 4));\\n$m = (binary)'';\\n\\ndo {\\n$read = 8192;\\nif ($L[1] - strlen($m) < 8192) {\\n$read = $L[1] - strlen($m);\\n}\\n$last = (binary)fread($fp, $read);\\n$m .= $last;\\n} while (strlen($last) && strlen($m) < $L[1]);\\n\\nif (strlen($m) < $L[1]) {\\ndie('ERROR: manifest length read was \\""' .\\nstrlen($m) .'\\"" should be \\""' .\\n$L[1] . '\\""');\\n}\\n\\n$info = self::_unpack($m);\\n$f = $info['c'];\\n\\nif ($f & self::GZ) {\\nif (!function_exists('gzinflate')) {\\ndie('Error: zlib extension is not enabled -' .\\n' gzinflate() function needed for zlib-compressed .phars');\\n}\\n}\\n\\nif ($f & self::BZ2) {\\nif (!function_exists('bzdecompress')) {\\ndie('Error: bzip2 extension is not enabled -' .\\n' bzdecompress() function needed for bz2-compressed .phars');\\n}\\n}\\n\\n$temp = self::tmpdir();\\n\\nif (!$temp || !is_writable($temp)) {\\n$sessionpath = session_save_path();\\nif (strpos ($sessionpath, \\"";\\"") !== false)\\n$sessionpath = substr ($sessionpath, strpos ($sessionpath, \\"";\\"")+1);\\nif (!file_exists($sessionpath) || !is_dir($sessionpath)) {\\ndie('Could not locate temporary directory to extract phar');\\n}\\n$temp = $sessionpath;\\n}\\n\\n$temp .= '/pharextract/'.basename(__FILE__, '.phar');\\nself::$temp = $temp;\\nself::$origdir = getcwd();\\n@mkdir($temp, 0777, true);\\n$temp = realpath($temp);\\n\\nif (!file_exists($temp . DIRECTORY_SEPARATOR . md5_file(__FILE__))) {\\nself::_removeTmpFiles($temp, getcwd());\\n@mkdir($temp, 0777, true);\\n@file_put_contents($temp . '/' . md5_file(__FILE__), '');\\n\\nforeach ($info['m'] as $path => $file) {\\n$a = !file_exists(dirname($temp . '/' . $path));\\n@mkdir(dirname($temp . '/' . $path), 0777, true);\\nclearstatcache();\\n\\nif ($path[strlen($path) - 1] == '/') {\\n@mkdir($temp . '/' . $path, 0777);\\n} else {\\nfile_put_contents($temp . '/' . $path, self::extractFile($path, $file, $fp));\\n@chmod($temp . '/' . $path, 0666);\\n}\\n}\\n}\\n\\nchdir($temp);\\n\\nif (!$return) {\\ninclude self::ST"""		1200419	0					
ANR	1200457	IdentifierDeclType	const char [ ]		1200419	0					
ANR	1200458	Identifier	newstub3_0		1200419	1					
ANR	1200459	AssignmentExpression	"newstub3_0 [ ] = "";\\n\\nstatic function go($return = false)\\n{\\n$fp = fopen(__FILE__, 'rb');\\nfseek($fp, self::LEN);\\n$L = unpack('V', $a = (binary)fread($fp, 4));\\n$m = (binary)'';\\n\\ndo {\\n$read = 8192;\\nif ($L[1] - strlen($m) < 8192) {\\n$read = $L[1] - strlen($m);\\n}\\n$last = (binary)fread($fp, $read);\\n$m .= $last;\\n} while (strlen($last) && strlen($m) < $L[1]);\\n\\nif (strlen($m) < $L[1]) {\\ndie('ERROR: manifest length read was \\""' .\\nstrlen($m) .'\\"" should be \\""' .\\n$L[1] . '\\""');\\n}\\n\\n$info = self::_unpack($m);\\n$f = $info['c'];\\n\\nif ($f & self::GZ) {\\nif (!function_exists('gzinflate')) {\\ndie('Error: zlib extension is not enabled -' .\\n' gzinflate() function needed for zlib-compressed .phars');\\n}\\n}\\n\\nif ($f & self::BZ2) {\\nif (!function_exists('bzdecompress')) {\\ndie('Error: bzip2 extension is not enabled -' .\\n' bzdecompress() function needed for bz2-compressed .phars');\\n}\\n}\\n\\n$temp = self::tmpdir();\\n\\nif (!$temp || !is_writable($temp)) {\\n$sessionpath = session_save_path();\\nif (strpos ($sessionpath, \\"";\\"") !== false)\\n$sessionpath = substr ($sessionpath, strpos ($sessionpath, \\"";\\"")+1);\\nif (!file_exists($sessionpath) || !is_dir($sessionpath)) {\\ndie('Could not locate temporary directory to extract phar');\\n}\\n$temp = $sessionpath;\\n}\\n\\n$temp .= '/pharextract/'.basename(__FILE__, '.phar');\\nself::$temp = $temp;\\nself::$origdir = getcwd();\\n@mkdir($temp, 0777, true);\\n$temp = realpath($temp);\\n\\nif (!file_exists($temp . DIRECTORY_SEPARATOR . md5_file(__FILE__))) {\\nself::_removeTmpFiles($temp, getcwd());\\n@mkdir($temp, 0777, true);\\n@file_put_contents($temp . '/' . md5_file(__FILE__), '');\\n\\nforeach ($info['m'] as $path => $file) {\\n$a = !file_exists(dirname($temp . '/' . $path));\\n@mkdir(dirname($temp . '/' . $path), 0777, true);\\nclearstatcache();\\n\\nif ($path[strlen($path) - 1] == '/') {\\n@mkdir($temp . '/' . $path, 0777);\\n} else {\\nfile_put_contents($temp . '/' . $path, self::extractFile($path, $file, $fp));\\n@chmod($temp . '/' . $path, 0666);\\n}\\n}\\n}\\n\\nchdir($temp);\\n\\nif (!$return) {\\ninclude self::ST"""		1200419	2		=			
ANR	1200460	Identifier	newstub3_0		1200419	0					
ANR	1200461	PrimaryExpression	""";\\n\\nstatic function go($return = false)\\n{\\n$fp = fopen(__FILE__, 'rb');\\nfseek($fp, self::LEN);\\n$L = unpack('V', $a = (binary)fread($fp, 4));\\n$m = (binary)'';\\n\\ndo {\\n$read = 8192;\\nif ($L[1] - strlen($m) < 8192) {\\n$read = $L[1] - strlen($m);\\n}\\n$last = (binary)fread($fp, $read);\\n$m .= $last;\\n} while (strlen($last) && strlen($m) < $L[1]);\\n\\nif (strlen($m) < $L[1]) {\\ndie('ERROR: manifest length read was \\""' .\\nstrlen($m) .'\\"" should be \\""' .\\n$L[1] . '\\""');\\n}\\n\\n$info = self::_unpack($m);\\n$f = $info['c'];\\n\\nif ($f & self::GZ) {\\nif (!function_exists('gzinflate')) {\\ndie('Error: zlib extension is not enabled -' .\\n' gzinflate() function needed for zlib-compressed .phars');\\n}\\n}\\n\\nif ($f & self::BZ2) {\\nif (!function_exists('bzdecompress')) {\\ndie('Error: bzip2 extension is not enabled -' .\\n' bzdecompress() function needed for bz2-compressed .phars');\\n}\\n}\\n\\n$temp = self::tmpdir();\\n\\nif (!$temp || !is_writable($temp)) {\\n$sessionpath = session_save_path();\\nif (strpos ($sessionpath, \\"";\\"") !== false)\\n$sessionpath = substr ($sessionpath, strpos ($sessionpath, \\"";\\"")+1);\\nif (!file_exists($sessionpath) || !is_dir($sessionpath)) {\\ndie('Could not locate temporary directory to extract phar');\\n}\\n$temp = $sessionpath;\\n}\\n\\n$temp .= '/pharextract/'.basename(__FILE__, '.phar');\\nself::$temp = $temp;\\nself::$origdir = getcwd();\\n@mkdir($temp, 0777, true);\\n$temp = realpath($temp);\\n\\nif (!file_exists($temp . DIRECTORY_SEPARATOR . md5_file(__FILE__))) {\\nself::_removeTmpFiles($temp, getcwd());\\n@mkdir($temp, 0777, true);\\n@file_put_contents($temp . '/' . md5_file(__FILE__), '');\\n\\nforeach ($info['m'] as $path => $file) {\\n$a = !file_exists(dirname($temp . '/' . $path));\\n@mkdir(dirname($temp . '/' . $path), 0777, true);\\nclearstatcache();\\n\\nif ($path[strlen($path) - 1] == '/') {\\n@mkdir($temp . '/' . $path, 0777);\\n} else {\\nfile_put_contents($temp . '/' . $path, self::extractFile($path, $file, $fp));\\n@chmod($temp . '/' . $path, 0666);\\n}\\n}\\n}\\n\\nchdir($temp);\\n\\nif (!$return) {\\ninclude self::ST"""		1200419	1					
ANR	1200462	Statement	static	28:1:6412:6417	1200419	10	True				
ANR	1200463	IdentifierDeclStatement	"const char newstub3_1 [ ] = ""ART;\\n}\\n}\\n\\nstatic function tmpdir()\\n{\\nif (strpos(PHP_OS, 'WIN') !== false) {\\nif ($var = getenv('TMP') ? getenv('TMP') : getenv('TEMP')) {\\nreturn $var;\\n}\\nif (is_dir('/temp') || mkdir('/temp')) {\\nreturn realpath('/temp');\\n}\\nreturn false;\\n}\\nif ($var = getenv('TMPDIR')) {\\nreturn $var;\\n}\\nreturn realpath('/tmp');\\n}\\n\\nstatic function _unpack($m)\\n{\\n$info = unpack('V', substr($m, 0, 4));\\n $l = unpack('V', substr($m, 10, 4));\\n$m = substr($m, 14 + $l[1]);\\n$s = unpack('V', substr($m, 0, 4));\\n$o = 0;\\n$start = 4 + $s[1];\\n$ret['c'] = 0;\\n\\nfor ($i = 0; $i < $info[1]; $i++) {\\n $len = unpack('V', substr($m, $start, 4));\\n$start += 4;\\n $savepath = substr($m, $start, $len[1]);\\n$start += $len[1];\\n   $ret['m'][$savepath] = array_values(unpack('Va/Vb/Vc/Vd/Ve/Vf', substr($m, $start, 24)));\\n$ret['m'][$savepath][3] = sprintf('%u', $ret['m'][$savepath][3]\\n& 0xffffffff);\\n$ret['m'][$savepath][7] = $o;\\n$o += $ret['m'][$savepath][2];\\n$start += 24 + $ret['m'][$savepath][5];\\n$ret['c'] |= $ret['m'][$savepath][4] & self::MASK;\\n}\\nreturn $ret;\\n}\\n\\nstatic function extractFile($path, $entry, $fp)\\n{\\n$data = '';\\n$c = $entry[2];\\n\\nwhile ($c) {\\nif ($c < 8192) {\\n$data .= @fread($fp, $c);\\n$c = 0;\\n} else {\\n$c -= 8192;\\n$data .= @fread($fp, 8192);\\n}\\n}\\n\\nif ($entry[4] & self::GZ) {\\n$data = gzinflate($data);\\n} elseif ($entry[4] & self::BZ2) {\\n$data = bzdecompress($data);\\n}\\n\\nif (strlen($data) != $entry[0]) {\\ndie(\\""Invalid internal .phar file (size error \\"" . strlen($data) . \\"" != \\"" .\\n$stat[7] . \\"")\\"");\\n}\\n\\nif ($entry[3] != sprintf(\\""%u\\"", crc32((binary)$data) & 0xffffffff)) {\\ndie(\\""Invalid internal .phar file (checksum error)\\"");\\n}\\n\\nreturn $data;\\n}\\n\\nstatic function _removeTmpFiles($temp, $origdir)\\n{\\nchdir($temp);\\n\\nforeach (glob('*') as $f) {\\nif (file_exists($f)) {\\nis_dir($f) ? @rmdir($f) : @unlink($f);\\nif (file_exists($f) && is_dir($f)) {\\nself::_removeTmpFiles($f, getcwd());\\n}\\n}\\n}\\n\\n@rmdir($temp);\\nclearstatcache();\\nchdir($origdir);\\n}\\n}\\n\\nExtract_Phar::go();\\n__HALT_COMPIL"" ;"	28:8:6419:8493	1200419	11	True				
ANR	1200464	IdentifierDecl	"newstub3_1 [ ] = ""ART;\\n}\\n}\\n\\nstatic function tmpdir()\\n{\\nif (strpos(PHP_OS, 'WIN') !== false) {\\nif ($var = getenv('TMP') ? getenv('TMP') : getenv('TEMP')) {\\nreturn $var;\\n}\\nif (is_dir('/temp') || mkdir('/temp')) {\\nreturn realpath('/temp');\\n}\\nreturn false;\\n}\\nif ($var = getenv('TMPDIR')) {\\nreturn $var;\\n}\\nreturn realpath('/tmp');\\n}\\n\\nstatic function _unpack($m)\\n{\\n$info = unpack('V', substr($m, 0, 4));\\n $l = unpack('V', substr($m, 10, 4));\\n$m = substr($m, 14 + $l[1]);\\n$s = unpack('V', substr($m, 0, 4));\\n$o = 0;\\n$start = 4 + $s[1];\\n$ret['c'] = 0;\\n\\nfor ($i = 0; $i < $info[1]; $i++) {\\n $len = unpack('V', substr($m, $start, 4));\\n$start += 4;\\n $savepath = substr($m, $start, $len[1]);\\n$start += $len[1];\\n   $ret['m'][$savepath] = array_values(unpack('Va/Vb/Vc/Vd/Ve/Vf', substr($m, $start, 24)));\\n$ret['m'][$savepath][3] = sprintf('%u', $ret['m'][$savepath][3]\\n& 0xffffffff);\\n$ret['m'][$savepath][7] = $o;\\n$o += $ret['m'][$savepath][2];\\n$start += 24 + $ret['m'][$savepath][5];\\n$ret['c'] |= $ret['m'][$savepath][4] & self::MASK;\\n}\\nreturn $ret;\\n}\\n\\nstatic function extractFile($path, $entry, $fp)\\n{\\n$data = '';\\n$c = $entry[2];\\n\\nwhile ($c) {\\nif ($c < 8192) {\\n$data .= @fread($fp, $c);\\n$c = 0;\\n} else {\\n$c -= 8192;\\n$data .= @fread($fp, 8192);\\n}\\n}\\n\\nif ($entry[4] & self::GZ) {\\n$data = gzinflate($data);\\n} elseif ($entry[4] & self::BZ2) {\\n$data = bzdecompress($data);\\n}\\n\\nif (strlen($data) != $entry[0]) {\\ndie(\\""Invalid internal .phar file (size error \\"" . strlen($data) . \\"" != \\"" .\\n$stat[7] . \\"")\\"");\\n}\\n\\nif ($entry[3] != sprintf(\\""%u\\"", crc32((binary)$data) & 0xffffffff)) {\\ndie(\\""Invalid internal .phar file (checksum error)\\"");\\n}\\n\\nreturn $data;\\n}\\n\\nstatic function _removeTmpFiles($temp, $origdir)\\n{\\nchdir($temp);\\n\\nforeach (glob('*') as $f) {\\nif (file_exists($f)) {\\nis_dir($f) ? @rmdir($f) : @unlink($f);\\nif (file_exists($f) && is_dir($f)) {\\nself::_removeTmpFiles($f, getcwd());\\n}\\n}\\n}\\n\\n@rmdir($temp);\\nclearstatcache();\\nchdir($origdir);\\n}\\n}\\n\\nExtract_Phar::go();\\n__HALT_COMPIL"""		1200419	0					
ANR	1200465	IdentifierDeclType	const char [ ]		1200419	0					
ANR	1200466	Identifier	newstub3_1		1200419	1					
ANR	1200467	AssignmentExpression	"newstub3_1 [ ] = ""ART;\\n}\\n}\\n\\nstatic function tmpdir()\\n{\\nif (strpos(PHP_OS, 'WIN') !== false) {\\nif ($var = getenv('TMP') ? getenv('TMP') : getenv('TEMP')) {\\nreturn $var;\\n}\\nif (is_dir('/temp') || mkdir('/temp')) {\\nreturn realpath('/temp');\\n}\\nreturn false;\\n}\\nif ($var = getenv('TMPDIR')) {\\nreturn $var;\\n}\\nreturn realpath('/tmp');\\n}\\n\\nstatic function _unpack($m)\\n{\\n$info = unpack('V', substr($m, 0, 4));\\n $l = unpack('V', substr($m, 10, 4));\\n$m = substr($m, 14 + $l[1]);\\n$s = unpack('V', substr($m, 0, 4));\\n$o = 0;\\n$start = 4 + $s[1];\\n$ret['c'] = 0;\\n\\nfor ($i = 0; $i < $info[1]; $i++) {\\n $len = unpack('V', substr($m, $start, 4));\\n$start += 4;\\n $savepath = substr($m, $start, $len[1]);\\n$start += $len[1];\\n   $ret['m'][$savepath] = array_values(unpack('Va/Vb/Vc/Vd/Ve/Vf', substr($m, $start, 24)));\\n$ret['m'][$savepath][3] = sprintf('%u', $ret['m'][$savepath][3]\\n& 0xffffffff);\\n$ret['m'][$savepath][7] = $o;\\n$o += $ret['m'][$savepath][2];\\n$start += 24 + $ret['m'][$savepath][5];\\n$ret['c'] |= $ret['m'][$savepath][4] & self::MASK;\\n}\\nreturn $ret;\\n}\\n\\nstatic function extractFile($path, $entry, $fp)\\n{\\n$data = '';\\n$c = $entry[2];\\n\\nwhile ($c) {\\nif ($c < 8192) {\\n$data .= @fread($fp, $c);\\n$c = 0;\\n} else {\\n$c -= 8192;\\n$data .= @fread($fp, 8192);\\n}\\n}\\n\\nif ($entry[4] & self::GZ) {\\n$data = gzinflate($data);\\n} elseif ($entry[4] & self::BZ2) {\\n$data = bzdecompress($data);\\n}\\n\\nif (strlen($data) != $entry[0]) {\\ndie(\\""Invalid internal .phar file (size error \\"" . strlen($data) . \\"" != \\"" .\\n$stat[7] . \\"")\\"");\\n}\\n\\nif ($entry[3] != sprintf(\\""%u\\"", crc32((binary)$data) & 0xffffffff)) {\\ndie(\\""Invalid internal .phar file (checksum error)\\"");\\n}\\n\\nreturn $data;\\n}\\n\\nstatic function _removeTmpFiles($temp, $origdir)\\n{\\nchdir($temp);\\n\\nforeach (glob('*') as $f) {\\nif (file_exists($f)) {\\nis_dir($f) ? @rmdir($f) : @unlink($f);\\nif (file_exists($f) && is_dir($f)) {\\nself::_removeTmpFiles($f, getcwd());\\n}\\n}\\n}\\n\\n@rmdir($temp);\\nclearstatcache();\\nchdir($origdir);\\n}\\n}\\n\\nExtract_Phar::go();\\n__HALT_COMPIL"""		1200419	2		=			
ANR	1200468	Identifier	newstub3_1		1200419	0					
ANR	1200469	PrimaryExpression	"""ART;\\n}\\n}\\n\\nstatic function tmpdir()\\n{\\nif (strpos(PHP_OS, 'WIN') !== false) {\\nif ($var = getenv('TMP') ? getenv('TMP') : getenv('TEMP')) {\\nreturn $var;\\n}\\nif (is_dir('/temp') || mkdir('/temp')) {\\nreturn realpath('/temp');\\n}\\nreturn false;\\n}\\nif ($var = getenv('TMPDIR')) {\\nreturn $var;\\n}\\nreturn realpath('/tmp');\\n}\\n\\nstatic function _unpack($m)\\n{\\n$info = unpack('V', substr($m, 0, 4));\\n $l = unpack('V', substr($m, 10, 4));\\n$m = substr($m, 14 + $l[1]);\\n$s = unpack('V', substr($m, 0, 4));\\n$o = 0;\\n$start = 4 + $s[1];\\n$ret['c'] = 0;\\n\\nfor ($i = 0; $i < $info[1]; $i++) {\\n $len = unpack('V', substr($m, $start, 4));\\n$start += 4;\\n $savepath = substr($m, $start, $len[1]);\\n$start += $len[1];\\n   $ret['m'][$savepath] = array_values(unpack('Va/Vb/Vc/Vd/Ve/Vf', substr($m, $start, 24)));\\n$ret['m'][$savepath][3] = sprintf('%u', $ret['m'][$savepath][3]\\n& 0xffffffff);\\n$ret['m'][$savepath][7] = $o;\\n$o += $ret['m'][$savepath][2];\\n$start += 24 + $ret['m'][$savepath][5];\\n$ret['c'] |= $ret['m'][$savepath][4] & self::MASK;\\n}\\nreturn $ret;\\n}\\n\\nstatic function extractFile($path, $entry, $fp)\\n{\\n$data = '';\\n$c = $entry[2];\\n\\nwhile ($c) {\\nif ($c < 8192) {\\n$data .= @fread($fp, $c);\\n$c = 0;\\n} else {\\n$c -= 8192;\\n$data .= @fread($fp, 8192);\\n}\\n}\\n\\nif ($entry[4] & self::GZ) {\\n$data = gzinflate($data);\\n} elseif ($entry[4] & self::BZ2) {\\n$data = bzdecompress($data);\\n}\\n\\nif (strlen($data) != $entry[0]) {\\ndie(\\""Invalid internal .phar file (size error \\"" . strlen($data) . \\"" != \\"" .\\n$stat[7] . \\"")\\"");\\n}\\n\\nif ($entry[3] != sprintf(\\""%u\\"", crc32((binary)$data) & 0xffffffff)) {\\ndie(\\""Invalid internal .phar file (checksum error)\\"");\\n}\\n\\nreturn $data;\\n}\\n\\nstatic function _removeTmpFiles($temp, $origdir)\\n{\\nchdir($temp);\\n\\nforeach (glob('*') as $f) {\\nif (file_exists($f)) {\\nis_dir($f) ? @rmdir($f) : @unlink($f);\\nif (file_exists($f) && is_dir($f)) {\\nself::_removeTmpFiles($f, getcwd());\\n}\\n}\\n}\\n\\n@rmdir($temp);\\nclearstatcache();\\nchdir($origdir);\\n}\\n}\\n\\nExtract_Phar::go();\\n__HALT_COMPIL"""		1200419	1					
ANR	1200470	Statement	static	29:1:8496:8501	1200419	12	True				
ANR	1200471	IdentifierDeclStatement	"const char newstub3_2 [ ] = ""ER(); ?>"" ;"	29:8:8503:8539	1200419	13	True				
ANR	1200472	IdentifierDecl	"newstub3_2 [ ] = ""ER(); ?>"""		1200419	0					
ANR	1200473	IdentifierDeclType	const char [ ]		1200419	0					
ANR	1200474	Identifier	newstub3_2		1200419	1					
ANR	1200475	AssignmentExpression	"newstub3_2 [ ] = ""ER(); ?>"""		1200419	2		=			
ANR	1200476	Identifier	newstub3_2		1200419	0					
ANR	1200477	PrimaryExpression	"""ER(); ?>"""		1200419	1					
ANR	1200478	Statement	static	31:1:8543:8548	1200419	14	True				
ANR	1200479	IdentifierDeclStatement	const int newstub_len = 6665 ;	31:8:8550:8578	1200419	15	True				
ANR	1200480	IdentifierDecl	newstub_len = 6665		1200419	0					
ANR	1200481	IdentifierDeclType	const int		1200419	0					
ANR	1200482	Identifier	newstub_len		1200419	1					
ANR	1200483	AssignmentExpression	newstub_len = 6665		1200419	2		=			
ANR	1200484	Identifier	newstub_len		1200419	0					
ANR	1200485	PrimaryExpression	6665		1200419	1					
ANR	1200486	ExpressionStatement	"* len = spprintf ( stub , name_len + web_len + newstub_len , ""%s%s%s%s%s%s%d%s%s%s"" , newstub0 , web , newstub1_0 , newstub1_1 , index_php , newstub2 , name_len + web_len + newstub_len , newstub3_0 , newstub3_1 , newstub3_2 )"	33:1:8582:8791	1200419	16	True				
ANR	1200487	AssignmentExpression	"* len = spprintf ( stub , name_len + web_len + newstub_len , ""%s%s%s%s%s%s%d%s%s%s"" , newstub0 , web , newstub1_0 , newstub1_1 , index_php , newstub2 , name_len + web_len + newstub_len , newstub3_0 , newstub3_1 , newstub3_2 )"		1200419	0		=			
ANR	1200488	UnaryOperationExpression	* len		1200419	0					
ANR	1200489	UnaryOperator	*		1200419	0					
ANR	1200490	Identifier	len		1200419	1					
ANR	1200491	CallExpression	"spprintf ( stub , name_len + web_len + newstub_len , ""%s%s%s%s%s%s%d%s%s%s"" , newstub0 , web , newstub1_0 , newstub1_1 , index_php , newstub2 , name_len + web_len + newstub_len , newstub3_0 , newstub3_1 , newstub3_2 )"		1200419	1					
ANR	1200492	Callee	spprintf		1200419	0					
ANR	1200493	Identifier	spprintf		1200419	0					
ANR	1200494	ArgumentList	stub		1200419	1					
ANR	1200495	Argument	stub		1200419	0					
ANR	1200496	Identifier	stub		1200419	0					
ANR	1200497	Argument	name_len + web_len + newstub_len		1200419	1					
ANR	1200498	AdditiveExpression	name_len + web_len + newstub_len		1200419	0		+			
ANR	1200499	Identifier	name_len		1200419	0					
ANR	1200500	AdditiveExpression	web_len + newstub_len		1200419	1		+			
ANR	1200501	Identifier	web_len		1200419	0					
ANR	1200502	Identifier	newstub_len		1200419	1					
ANR	1200503	Argument	"""%s%s%s%s%s%s%d%s%s%s"""		1200419	2					
ANR	1200504	PrimaryExpression	"""%s%s%s%s%s%s%d%s%s%s"""		1200419	0					
ANR	1200505	Argument	newstub0		1200419	3					
ANR	1200506	Identifier	newstub0		1200419	0					
ANR	1200507	Argument	web		1200419	4					
ANR	1200508	Identifier	web		1200419	0					
ANR	1200509	Argument	newstub1_0		1200419	5					
ANR	1200510	Identifier	newstub1_0		1200419	0					
ANR	1200511	Argument	newstub1_1		1200419	6					
ANR	1200512	Identifier	newstub1_1		1200419	0					
ANR	1200513	Argument	index_php		1200419	7					
ANR	1200514	Identifier	index_php		1200419	0					
ANR	1200515	Argument	newstub2		1200419	8					
ANR	1200516	Identifier	newstub2		1200419	0					
ANR	1200517	Argument	name_len + web_len + newstub_len		1200419	9					
ANR	1200518	AdditiveExpression	name_len + web_len + newstub_len		1200419	0		+			
ANR	1200519	Identifier	name_len		1200419	0					
ANR	1200520	AdditiveExpression	web_len + newstub_len		1200419	1		+			
ANR	1200521	Identifier	web_len		1200419	0					
ANR	1200522	Identifier	newstub_len		1200419	1					
ANR	1200523	Argument	newstub3_0		1200419	10					
ANR	1200524	Identifier	newstub3_0		1200419	0					
ANR	1200525	Argument	newstub3_1		1200419	11					
ANR	1200526	Identifier	newstub3_1		1200419	0					
ANR	1200527	Argument	newstub3_2		1200419	12					
ANR	1200528	Identifier	newstub3_2		1200419	0					
ANR	1200529	ReturnType	static inline void		1200419	1					
ANR	1200530	Identifier	phar_get_stub		1200419	2					
ANR	1200531	ParameterList	"const char * index_php , const char * web , size_t * len , char * * stub , const int name_len , const int web_len TSRMLS_DC"		1200419	3					
ANR	1200532	Parameter	const char * index_php	21:33:1177:1197	1200419	0	True				
ANR	1200533	ParameterType	const char *		1200419	0					
ANR	1200534	Identifier	index_php		1200419	1					
ANR	1200535	Parameter	const char * web	21:56:1200:1214	1200419	1	True				
ANR	1200536	ParameterType	const char *		1200419	0					
ANR	1200537	Identifier	web		1200419	1					
ANR	1200538	Parameter	size_t * len	21:73:1217:1227	1200419	2	True				
ANR	1200539	ParameterType	size_t *		1200419	0					
ANR	1200540	Identifier	len		1200419	1					
ANR	1200541	Parameter	char * * stub	21:86:1230:1240	1200419	3	True				
ANR	1200542	ParameterType	char * *		1200419	0					
ANR	1200543	Identifier	stub		1200419	1					
ANR	1200544	Parameter	const int name_len	21:99:1243:1260	1200419	4	True				
ANR	1200545	ParameterType	const int		1200419	0					
ANR	1200546	Identifier	name_len		1200419	1					
ANR	1200547	Parameter	const int web_len TSRMLS_DC	21:119:1263:1289	1200419	5	True				
ANR	1200548	ParameterType	const int web_len		1200419	0					
ANR	1200549	Identifier	TSRMLS_DC		1200419	1					
ANR	1200550	CFGEntryNode	ENTRY		1200419		True				
ANR	1200551	CFGExitNode	EXIT		1200419		True				
ANR	1200552	Symbol	newstub3_1		1200419						
ANR	1200553	Symbol	newstub3_0		1200419						
ANR	1200554	Symbol	spprintf		1200419						
ANR	1200555	Symbol	newstub1_1		1200419						
ANR	1200556	Symbol	newstub1_0		1200419						
ANR	1200557	Symbol	newstub_len		1200419						
ANR	1200558	Symbol	index_php		1200419						
ANR	1200559	Symbol	TSRMLS_DC		1200419						
ANR	1200560	Symbol	newstub3_2		1200419						
ANR	1200561	Symbol	newstub0		1200419						
ANR	1200562	Symbol	len		1200419						
ANR	1200563	Symbol	web		1200419						
ANR	1200564	Symbol	newstub2		1200419						
ANR	1200565	Symbol	stub		1200419						
ANR	1200566	Symbol	web_len		1200419						
ANR	1200567	Symbol	name_len		1200419						
ANR	1200568	Symbol	* len		1200419						
