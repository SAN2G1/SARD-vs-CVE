command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	1293914	File	data/converged/CVE-2017-11142_php-src/ext_sockets_conversions.c								
ANR	1293915	DeclStmt									
ANR	1293916	Decl							unsigned short	unsigned short	sa_family_t
ANR	1293917	ClassDef	_ser_context	70:0:1752:1953							
ANR	1293918	DeclStmt									
ANR	1293919	Decl							HashTable	HashTable	params
ANR	1293920	DeclStmt									
ANR	1293921	Decl							struct err_s	struct err_s	err
ANR	1293922	DeclStmt									
ANR	1293923	Decl							zend_llist	zend_llist	keys
ANR	1293924	Decl							zend_llist	zend_llist	allocations
ANR	1293925	DeclStmt									
ANR	1293926	Decl							php_socket	php_socket *	sock
ANR	1293927	ClassDef	_res_context	78:0:1956:2075							
ANR	1293928	DeclStmt									
ANR	1293929	Decl							HashTable	HashTable	params
ANR	1293930	DeclStmt									
ANR	1293931	Decl							struct err_s	struct err_s	err
ANR	1293932	DeclStmt									
ANR	1293933	Decl							zend_llist	zend_llist	keys
ANR	1293934	ClassDef	<unnamed>	84:8:2087:2471							
ANR	1293935	DeclStmt									
ANR	1293936	Decl							const char	const char *	name
ANR	1293937	DeclStmt									
ANR	1293938	Decl							unsigned	unsigned	name_size
ANR	1293939	DeclStmt									
ANR	1293940	Decl							int	int	required
ANR	1293941	DeclStmt									
ANR	1293942	Decl							size_t	size_t	field_offset
ANR	1293943	DeclStmt									
ANR	1293944	Decl							from_zval_write_field	from_zval_write_field *	from_zval
ANR	1293945	DeclStmt									
ANR	1293946	Decl							to_zval_read_field	to_zval_read_field *	to_zval
ANR	1293947	DeclStmt									
ANR	1293948	Decl									field_descriptor
ANR	1293949	DeclStmt									
ANR	1293950	Decl							const struct key_value	const struct key_value [ ]	empty_key_value_list
ANR	1293951	Function	param_get_bool	107:0:2664:2862							
ANR	1293952	FunctionDef	"param_get_bool (void * ctx , const char * key , int def)"		1293951	0					
ANR	1293953	CompoundStatement		108:0:2727:2862	1293951	0					
ANR	1293954	IdentifierDeclStatement	int * * elem ;	109:1:2730:2740	1293951	0	True				
ANR	1293955	IdentifierDecl	* * elem		1293951	0					
ANR	1293956	IdentifierDeclType	int * *		1293951	0					
ANR	1293957	Identifier	elem		1293951	1					
ANR	1293958	IfStatement	"if ( zend_hash_find ( ctx , key , strlen ( key ) + 1 , ( void * * ) & elem ) == SUCCESS )"		1293951	1					
ANR	1293959	Condition	"zend_hash_find ( ctx , key , strlen ( key ) + 1 , ( void * * ) & elem ) == SUCCESS"	110:5:2747:2813	1293951	0	True				
ANR	1293960	EqualityExpression	"zend_hash_find ( ctx , key , strlen ( key ) + 1 , ( void * * ) & elem ) == SUCCESS"		1293951	0		==			
ANR	1293961	CallExpression	"zend_hash_find ( ctx , key , strlen ( key ) + 1 , ( void * * ) & elem )"		1293951	0					
ANR	1293962	Callee	zend_hash_find		1293951	0					
ANR	1293963	Identifier	zend_hash_find		1293951	0					
ANR	1293964	ArgumentList	ctx		1293951	1					
ANR	1293965	Argument	ctx		1293951	0					
ANR	1293966	Identifier	ctx		1293951	0					
ANR	1293967	Argument	key		1293951	1					
ANR	1293968	Identifier	key		1293951	0					
ANR	1293969	Argument	strlen ( key ) + 1		1293951	2					
ANR	1293970	AdditiveExpression	strlen ( key ) + 1		1293951	0		+			
ANR	1293971	CallExpression	strlen ( key )		1293951	0					
ANR	1293972	Callee	strlen		1293951	0					
ANR	1293973	Identifier	strlen		1293951	0					
ANR	1293974	ArgumentList	key		1293951	1					
ANR	1293975	Argument	key		1293951	0					
ANR	1293976	Identifier	key		1293951	0					
ANR	1293977	PrimaryExpression	1		1293951	1					
ANR	1293978	Argument	( void * * ) & elem		1293951	3					
ANR	1293979	CastExpression	( void * * ) & elem		1293951	0					
ANR	1293980	CastTarget	void * *		1293951	0					
ANR	1293981	UnaryOperationExpression	& elem		1293951	1					
ANR	1293982	UnaryOperator	&		1293951	0					
ANR	1293983	Identifier	elem		1293951	1					
ANR	1293984	Identifier	SUCCESS		1293951	1					
ANR	1293985	CompoundStatement		3:74:88:88	1293951	1					
ANR	1293986	ReturnStatement	return * * elem ;	111:2:2820:2833	1293951	0	True				
ANR	1293987	UnaryOperationExpression	* * elem		1293951	0					
ANR	1293988	UnaryOperator	*		1293951	0					
ANR	1293989	UnaryOperationExpression	* elem		1293951	1					
ANR	1293990	UnaryOperator	*		1293951	0					
ANR	1293991	Identifier	elem		1293951	1					
ANR	1293992	ElseStatement	else		1293951	0					
ANR	1293993	CompoundStatement		5:8:115:115	1293951	0					
ANR	1293994	ReturnStatement	return def ;	113:2:2847:2857	1293951	0	True				
ANR	1293995	Identifier	def		1293951	0					
ANR	1293996	ReturnType	static int		1293951	1					
ANR	1293997	Identifier	param_get_bool		1293951	2					
ANR	1293998	ParameterList	"void * ctx , const char * key , int def"		1293951	3					
ANR	1293999	Parameter	void * ctx	107:26:2690:2698	1293951	0	True				
ANR	1294000	ParameterType	void *		1293951	0					
ANR	1294001	Identifier	ctx		1293951	1					
ANR	1294002	Parameter	const char * key	107:37:2701:2715	1293951	1	True				
ANR	1294003	ParameterType	const char *		1293951	0					
ANR	1294004	Identifier	key		1293951	1					
ANR	1294005	Parameter	int def	107:54:2718:2724	1293951	2	True				
ANR	1294006	ParameterType	int		1293951	0					
ANR	1294007	Identifier	def		1293951	1					
ANR	1294008	CFGEntryNode	ENTRY		1293951		True				
ANR	1294009	CFGExitNode	EXIT		1293951		True				
ANR	1294010	Symbol	elem		1293951						
ANR	1294011	Symbol	zend_hash_find		1293951						
ANR	1294012	Symbol	strlen		1293951						
ANR	1294013	Symbol	& elem		1293951						
ANR	1294014	Symbol	SUCCESS		1293951						
ANR	1294015	Symbol	def		1293951						
ANR	1294016	Symbol	ctx		1293951						
ANR	1294017	Symbol	* elem		1293951						
ANR	1294018	Symbol	* * elem		1293951						
ANR	1294019	Symbol	key		1293951						
ANR	1294020	Function	accounted_emalloc	118:0:2878:3052							
ANR	1294021	FunctionDef	"accounted_emalloc (size_t alloc_size , ser_context * ctx)"		1294020	0					
ANR	1294022	CompoundStatement		119:0:2953:3052	1294020	0					
ANR	1294023	IdentifierDeclStatement	void * ret = emalloc ( alloc_size ) ;	120:1:2956:2987	1294020	0	True				
ANR	1294024	IdentifierDecl	* ret = emalloc ( alloc_size )		1294020	0					
ANR	1294025	IdentifierDeclType	void *		1294020	0					
ANR	1294026	Identifier	ret		1294020	1					
ANR	1294027	AssignmentExpression	* ret = emalloc ( alloc_size )		1294020	2		=			
ANR	1294028	Identifier	ret		1294020	0					
ANR	1294029	CallExpression	emalloc ( alloc_size )		1294020	1					
ANR	1294030	Callee	emalloc		1294020	0					
ANR	1294031	Identifier	emalloc		1294020	0					
ANR	1294032	ArgumentList	alloc_size		1294020	1					
ANR	1294033	Argument	alloc_size		1294020	0					
ANR	1294034	Identifier	alloc_size		1294020	0					
ANR	1294035	ExpressionStatement	"zend_llist_add_element ( & ctx -> allocations , & ret )"	121:1:2990:3037	1294020	1	True				
ANR	1294036	CallExpression	"zend_llist_add_element ( & ctx -> allocations , & ret )"		1294020	0					
ANR	1294037	Callee	zend_llist_add_element		1294020	0					
ANR	1294038	Identifier	zend_llist_add_element		1294020	0					
ANR	1294039	ArgumentList	& ctx -> allocations		1294020	1					
ANR	1294040	Argument	& ctx -> allocations		1294020	0					
ANR	1294041	UnaryOperationExpression	& ctx -> allocations		1294020	0					
ANR	1294042	UnaryOperator	&		1294020	0					
ANR	1294043	PtrMemberAccess	ctx -> allocations		1294020	1					
ANR	1294044	Identifier	ctx		1294020	0					
ANR	1294045	Identifier	allocations		1294020	1					
ANR	1294046	Argument	& ret		1294020	1					
ANR	1294047	UnaryOperationExpression	& ret		1294020	0					
ANR	1294048	UnaryOperator	&		1294020	0					
ANR	1294049	Identifier	ret		1294020	1					
ANR	1294050	ReturnStatement	return ret ;	122:1:3040:3050	1294020	2	True				
ANR	1294051	Identifier	ret		1294020	0					
ANR	1294052	ReturnType	static inline void *		1294020	1					
ANR	1294053	Identifier	accounted_emalloc		1294020	2					
ANR	1294054	ParameterList	"size_t alloc_size , ser_context * ctx"		1294020	3					
ANR	1294055	Parameter	size_t alloc_size	118:38:2916:2932	1294020	0	True				
ANR	1294056	ParameterType	size_t		1294020	0					
ANR	1294057	Identifier	alloc_size		1294020	1					
ANR	1294058	Parameter	ser_context * ctx	118:57:2935:2950	1294020	1	True				
ANR	1294059	ParameterType	ser_context *		1294020	0					
ANR	1294060	Identifier	ctx		1294020	1					
ANR	1294061	CFGEntryNode	ENTRY		1294020		True				
ANR	1294062	CFGExitNode	EXIT		1294020		True				
ANR	1294063	Symbol	ret		1294020						
ANR	1294064	Symbol	& ret		1294020						
ANR	1294065	Symbol	& ctx -> allocations		1294020						
ANR	1294066	Symbol	emalloc		1294020						
ANR	1294067	Symbol	ctx		1294020						
ANR	1294068	Symbol	alloc_size		1294020						
ANR	1294069	Function	accounted_ecalloc	124:0:3054:3249							
ANR	1294070	FunctionDef	"accounted_ecalloc (size_t nmemb , size_t alloc_size , ser_context * ctx)"		1294069	0					
ANR	1294071	CompoundStatement		125:0:3143:3249	1294069	0					
ANR	1294072	IdentifierDeclStatement	"void * ret = ecalloc ( nmemb , alloc_size ) ;"	126:1:3146:3184	1294069	0	True				
ANR	1294073	IdentifierDecl	"* ret = ecalloc ( nmemb , alloc_size )"		1294069	0					
ANR	1294074	IdentifierDeclType	void *		1294069	0					
ANR	1294075	Identifier	ret		1294069	1					
ANR	1294076	AssignmentExpression	"* ret = ecalloc ( nmemb , alloc_size )"		1294069	2		=			
ANR	1294077	Identifier	ret		1294069	0					
ANR	1294078	CallExpression	"ecalloc ( nmemb , alloc_size )"		1294069	1					
ANR	1294079	Callee	ecalloc		1294069	0					
ANR	1294080	Identifier	ecalloc		1294069	0					
ANR	1294081	ArgumentList	nmemb		1294069	1					
ANR	1294082	Argument	nmemb		1294069	0					
ANR	1294083	Identifier	nmemb		1294069	0					
ANR	1294084	Argument	alloc_size		1294069	1					
ANR	1294085	Identifier	alloc_size		1294069	0					
ANR	1294086	ExpressionStatement	"zend_llist_add_element ( & ctx -> allocations , & ret )"	127:1:3187:3234	1294069	1	True				
ANR	1294087	CallExpression	"zend_llist_add_element ( & ctx -> allocations , & ret )"		1294069	0					
ANR	1294088	Callee	zend_llist_add_element		1294069	0					
ANR	1294089	Identifier	zend_llist_add_element		1294069	0					
ANR	1294090	ArgumentList	& ctx -> allocations		1294069	1					
ANR	1294091	Argument	& ctx -> allocations		1294069	0					
ANR	1294092	UnaryOperationExpression	& ctx -> allocations		1294069	0					
ANR	1294093	UnaryOperator	&		1294069	0					
ANR	1294094	PtrMemberAccess	ctx -> allocations		1294069	1					
ANR	1294095	Identifier	ctx		1294069	0					
ANR	1294096	Identifier	allocations		1294069	1					
ANR	1294097	Argument	& ret		1294069	1					
ANR	1294098	UnaryOperationExpression	& ret		1294069	0					
ANR	1294099	UnaryOperator	&		1294069	0					
ANR	1294100	Identifier	ret		1294069	1					
ANR	1294101	ReturnStatement	return ret ;	128:1:3237:3247	1294069	2	True				
ANR	1294102	Identifier	ret		1294069	0					
ANR	1294103	ReturnType	static inline void *		1294069	1					
ANR	1294104	Identifier	accounted_ecalloc		1294069	2					
ANR	1294105	ParameterList	"size_t nmemb , size_t alloc_size , ser_context * ctx"		1294069	3					
ANR	1294106	Parameter	size_t nmemb	124:38:3092:3103	1294069	0	True				
ANR	1294107	ParameterType	size_t		1294069	0					
ANR	1294108	Identifier	nmemb		1294069	1					
ANR	1294109	Parameter	size_t alloc_size	124:52:3106:3122	1294069	1	True				
ANR	1294110	ParameterType	size_t		1294069	0					
ANR	1294111	Identifier	alloc_size		1294069	1					
ANR	1294112	Parameter	ser_context * ctx	124:71:3125:3140	1294069	2	True				
ANR	1294113	ParameterType	ser_context *		1294069	0					
ANR	1294114	Identifier	ctx		1294069	1					
ANR	1294115	CFGEntryNode	ENTRY		1294069		True				
ANR	1294116	CFGExitNode	EXIT		1294069		True				
ANR	1294117	Symbol	ret		1294069						
ANR	1294118	Symbol	& ret		1294069						
ANR	1294119	Symbol	& ctx -> allocations		1294069						
ANR	1294120	Symbol	ctx		1294069						
ANR	1294121	Symbol	ecalloc		1294069						
ANR	1294122	Symbol	nmemb		1294069						
ANR	1294123	Symbol	alloc_size		1294069						
ANR	1294124	Function	accounted_safe_ecalloc	130:0:3251:3528							
ANR	1294125	FunctionDef	"accounted_safe_ecalloc (size_t nmemb , size_t alloc_size , size_t offset , ser_context * ctx)"		1294124	0					
ANR	1294126	CompoundStatement		131:0:3360:3528	1294124	0					
ANR	1294127	IdentifierDeclStatement	"void * ret = safe_emalloc ( nmemb , alloc_size , offset ) ;"	132:1:3363:3414	1294124	0	True				
ANR	1294128	IdentifierDecl	"* ret = safe_emalloc ( nmemb , alloc_size , offset )"		1294124	0					
ANR	1294129	IdentifierDeclType	void *		1294124	0					
ANR	1294130	Identifier	ret		1294124	1					
ANR	1294131	AssignmentExpression	"* ret = safe_emalloc ( nmemb , alloc_size , offset )"		1294124	2		=			
ANR	1294132	Identifier	ret		1294124	0					
ANR	1294133	CallExpression	"safe_emalloc ( nmemb , alloc_size , offset )"		1294124	1					
ANR	1294134	Callee	safe_emalloc		1294124	0					
ANR	1294135	Identifier	safe_emalloc		1294124	0					
ANR	1294136	ArgumentList	nmemb		1294124	1					
ANR	1294137	Argument	nmemb		1294124	0					
ANR	1294138	Identifier	nmemb		1294124	0					
ANR	1294139	Argument	alloc_size		1294124	1					
ANR	1294140	Identifier	alloc_size		1294124	0					
ANR	1294141	Argument	offset		1294124	2					
ANR	1294142	Identifier	offset		1294124	0					
ANR	1294143	ExpressionStatement	"memset ( ret , '\\0' , nmemb * alloc_size + offset )"	133:1:3417:3463	1294124	1	True				
ANR	1294144	CallExpression	"memset ( ret , '\\0' , nmemb * alloc_size + offset )"		1294124	0					
ANR	1294145	Callee	memset		1294124	0					
ANR	1294146	Identifier	memset		1294124	0					
ANR	1294147	ArgumentList	ret		1294124	1					
ANR	1294148	Argument	ret		1294124	0					
ANR	1294149	Identifier	ret		1294124	0					
ANR	1294150	Argument	'\\0'		1294124	1					
ANR	1294151	PrimaryExpression	'\\0'		1294124	0					
ANR	1294152	Argument	nmemb * alloc_size + offset		1294124	2					
ANR	1294153	AdditiveExpression	nmemb * alloc_size + offset		1294124	0		+			
ANR	1294154	MultiplicativeExpression	nmemb * alloc_size		1294124	0		*			
ANR	1294155	Identifier	nmemb		1294124	0					
ANR	1294156	Identifier	alloc_size		1294124	1					
ANR	1294157	Identifier	offset		1294124	1					
ANR	1294158	ExpressionStatement	"zend_llist_add_element ( & ctx -> allocations , & ret )"	134:1:3466:3513	1294124	2	True				
ANR	1294159	CallExpression	"zend_llist_add_element ( & ctx -> allocations , & ret )"		1294124	0					
ANR	1294160	Callee	zend_llist_add_element		1294124	0					
ANR	1294161	Identifier	zend_llist_add_element		1294124	0					
ANR	1294162	ArgumentList	& ctx -> allocations		1294124	1					
ANR	1294163	Argument	& ctx -> allocations		1294124	0					
ANR	1294164	UnaryOperationExpression	& ctx -> allocations		1294124	0					
ANR	1294165	UnaryOperator	&		1294124	0					
ANR	1294166	PtrMemberAccess	ctx -> allocations		1294124	1					
ANR	1294167	Identifier	ctx		1294124	0					
ANR	1294168	Identifier	allocations		1294124	1					
ANR	1294169	Argument	& ret		1294124	1					
ANR	1294170	UnaryOperationExpression	& ret		1294124	0					
ANR	1294171	UnaryOperator	&		1294124	0					
ANR	1294172	Identifier	ret		1294124	1					
ANR	1294173	ReturnStatement	return ret ;	135:1:3516:3526	1294124	3	True				
ANR	1294174	Identifier	ret		1294124	0					
ANR	1294175	ReturnType	static inline void *		1294124	1					
ANR	1294176	Identifier	accounted_safe_ecalloc		1294124	2					
ANR	1294177	ParameterList	"size_t nmemb , size_t alloc_size , size_t offset , ser_context * ctx"		1294124	3					
ANR	1294178	Parameter	size_t nmemb	130:43:3294:3305	1294124	0	True				
ANR	1294179	ParameterType	size_t		1294124	0					
ANR	1294180	Identifier	nmemb		1294124	1					
ANR	1294181	Parameter	size_t alloc_size	130:57:3308:3324	1294124	1	True				
ANR	1294182	ParameterType	size_t		1294124	0					
ANR	1294183	Identifier	alloc_size		1294124	1					
ANR	1294184	Parameter	size_t offset	130:76:3327:3339	1294124	2	True				
ANR	1294185	ParameterType	size_t		1294124	0					
ANR	1294186	Identifier	offset		1294124	1					
ANR	1294187	Parameter	ser_context * ctx	130:91:3342:3357	1294124	3	True				
ANR	1294188	ParameterType	ser_context *		1294124	0					
ANR	1294189	Identifier	ctx		1294124	1					
ANR	1294190	CFGEntryNode	ENTRY		1294124		True				
ANR	1294191	CFGExitNode	EXIT		1294124		True				
ANR	1294192	Symbol	ret		1294124						
ANR	1294193	Symbol	& ret		1294124						
ANR	1294194	Symbol	& ctx -> allocations		1294124						
ANR	1294195	Symbol	offset		1294124						
ANR	1294196	Symbol	ctx		1294124						
ANR	1294197	Symbol	nmemb		1294124						
ANR	1294198	Symbol	safe_emalloc		1294124						
ANR	1294199	Symbol	alloc_size		1294124						
ANR	1294200	Function	do_from_to_zval_err	139:0:3544:4442							
ANR	1294201	FunctionDef	"do_from_to_zval_err (struct err_s * err , zend_llist * keys , const char * what_conv , const char * fmt , va_list ap)"		1294200	0					
ANR	1294202	CompoundStatement		144:0:3697:4442	1294200	0					
ANR	1294203	IdentifierDeclStatement	smart_str path = { 0 } ;	145:1:3700:3722	1294200	0	True				
ANR	1294204	IdentifierDecl	path = { 0 }		1294200	0					
ANR	1294205	IdentifierDeclType	smart_str		1294200	0					
ANR	1294206	Identifier	path		1294200	1					
ANR	1294207	AssignmentExpression	path = { 0 }		1294200	2		=			
ANR	1294208	Identifier	path		1294200	0					
ANR	1294209	InitializerList	0		1294200	1					
ANR	1294210	PrimaryExpression	0		1294200	0					
ANR	1294211	IdentifierDeclStatement	const char * * node ;	146:1:3725:3744	1294200	1	True				
ANR	1294212	IdentifierDecl	* * node		1294200	0					
ANR	1294213	IdentifierDeclType	const char * *		1294200	0					
ANR	1294214	Identifier	node		1294200	1					
ANR	1294215	IdentifierDeclStatement	char * user_msg ;	147:1:3747:3764	1294200	2	True				
ANR	1294216	IdentifierDecl	* user_msg		1294200	0					
ANR	1294217	IdentifierDeclType	char *		1294200	0					
ANR	1294218	Identifier	user_msg		1294200	1					
ANR	1294219	IdentifierDeclStatement	int user_msg_size ;	148:1:3767:3788	1294200	3	True				
ANR	1294220	IdentifierDecl	user_msg_size		1294200	0					
ANR	1294221	IdentifierDeclType	int		1294200	0					
ANR	1294222	Identifier	user_msg_size		1294200	1					
ANR	1294223	IdentifierDeclStatement	zend_llist_position pos ;	149:1:3791:3814	1294200	4	True				
ANR	1294224	IdentifierDecl	pos		1294200	0					
ANR	1294225	IdentifierDeclType	zend_llist_position		1294200	0					
ANR	1294226	Identifier	pos		1294200	1					
ANR	1294227	IfStatement	if ( err -> has_error )		1294200	5					
ANR	1294228	Condition	err -> has_error	151:5:3822:3835	1294200	0	True				
ANR	1294229	PtrMemberAccess	err -> has_error		1294200	0					
ANR	1294230	Identifier	err		1294200	0					
ANR	1294231	Identifier	has_error		1294200	1					
ANR	1294232	CompoundStatement		8:21:140:140	1294200	1					
ANR	1294233	ReturnStatement	return ;	152:2:3842:3848	1294200	0	True				
ANR	1294234	ForStatement	"for ( node = zend_llist_get_first_ex ( keys , & pos ) ; node != NULL ; node = zend_llist_get_next_ex ( keys , & pos ) )"		1294200	6					
ANR	1294235	ForInit	"node = zend_llist_get_first_ex ( keys , & pos ) ;"	155:6:3860:3902	1294200	0	True				
ANR	1294236	AssignmentExpression	"node = zend_llist_get_first_ex ( keys , & pos )"		1294200	0		=			
ANR	1294237	Identifier	node		1294200	0					
ANR	1294238	CallExpression	"zend_llist_get_first_ex ( keys , & pos )"		1294200	1					
ANR	1294239	Callee	zend_llist_get_first_ex		1294200	0					
ANR	1294240	Identifier	zend_llist_get_first_ex		1294200	0					
ANR	1294241	ArgumentList	keys		1294200	1					
ANR	1294242	Argument	keys		1294200	0					
ANR	1294243	Identifier	keys		1294200	0					
ANR	1294244	Argument	& pos		1294200	1					
ANR	1294245	UnaryOperationExpression	& pos		1294200	0					
ANR	1294246	UnaryOperator	&		1294200	0					
ANR	1294247	Identifier	pos		1294200	1					
ANR	1294248	Condition	node != NULL	156:3:3907:3918	1294200	1	True				
ANR	1294249	EqualityExpression	node != NULL		1294200	0		!=			
ANR	1294250	Identifier	node		1294200	0					
ANR	1294251	Identifier	NULL		1294200	1					
ANR	1294252	AssignmentExpression	"node = zend_llist_get_next_ex ( keys , & pos )"	157:3:3924:3964	1294200	2	True	=			
ANR	1294253	Identifier	node		1294200	0					
ANR	1294254	CallExpression	"zend_llist_get_next_ex ( keys , & pos )"		1294200	1					
ANR	1294255	Callee	zend_llist_get_next_ex		1294200	0					
ANR	1294256	Identifier	zend_llist_get_next_ex		1294200	0					
ANR	1294257	ArgumentList	keys		1294200	1					
ANR	1294258	Argument	keys		1294200	0					
ANR	1294259	Identifier	keys		1294200	0					
ANR	1294260	Argument	& pos		1294200	1					
ANR	1294261	UnaryOperationExpression	& pos		1294200	0					
ANR	1294262	UnaryOperator	&		1294200	0					
ANR	1294263	Identifier	pos		1294200	1					
ANR	1294264	CompoundStatement		14:46:269:269	1294200	3					
ANR	1294265	ExpressionStatement	"smart_str_appends ( & path , * node )"	158:2:3971:4002	1294200	0	True				
ANR	1294266	CallExpression	"smart_str_appends ( & path , * node )"		1294200	0					
ANR	1294267	Callee	smart_str_appends		1294200	0					
ANR	1294268	Identifier	smart_str_appends		1294200	0					
ANR	1294269	ArgumentList	& path		1294200	1					
ANR	1294270	Argument	& path		1294200	0					
ANR	1294271	UnaryOperationExpression	& path		1294200	0					
ANR	1294272	UnaryOperator	&		1294200	0					
ANR	1294273	Identifier	path		1294200	1					
ANR	1294274	Argument	* node		1294200	1					
ANR	1294275	UnaryOperationExpression	* node		1294200	0					
ANR	1294276	UnaryOperator	*		1294200	0					
ANR	1294277	Identifier	node		1294200	1					
ANR	1294278	ExpressionStatement	"smart_str_appends ( & path , "" > "" )"	159:2:4006:4037	1294200	1	True				
ANR	1294279	CallExpression	"smart_str_appends ( & path , "" > "" )"		1294200	0					
ANR	1294280	Callee	smart_str_appends		1294200	0					
ANR	1294281	Identifier	smart_str_appends		1294200	0					
ANR	1294282	ArgumentList	& path		1294200	1					
ANR	1294283	Argument	& path		1294200	0					
ANR	1294284	UnaryOperationExpression	& path		1294200	0					
ANR	1294285	UnaryOperator	&		1294200	0					
ANR	1294286	Identifier	path		1294200	1					
ANR	1294287	Argument	""" > """		1294200	1					
ANR	1294288	PrimaryExpression	""" > """		1294200	0					
ANR	1294289	IfStatement	if ( path . len > 3 )		1294200	7					
ANR	1294290	Condition	path . len > 3	162:5:4048:4059	1294200	0	True				
ANR	1294291	RelationalExpression	path . len > 3		1294200	0		>			
ANR	1294292	MemberAccess	path . len		1294200	0					
ANR	1294293	Identifier	path		1294200	0					
ANR	1294294	Identifier	len		1294200	1					
ANR	1294295	PrimaryExpression	3		1294200	1					
ANR	1294296	CompoundStatement		19:19:364:364	1294200	1					
ANR	1294297	ExpressionStatement	path . len -= 3	163:2:4066:4079	1294200	0	True				
ANR	1294298	AssignmentExpression	path . len -= 3		1294200	0		-=			
ANR	1294299	MemberAccess	path . len		1294200	0					
ANR	1294300	Identifier	path		1294200	0					
ANR	1294301	Identifier	len		1294200	1					
ANR	1294302	PrimaryExpression	3		1294200	1					
ANR	1294303	ExpressionStatement	smart_str_0 ( & path )	165:1:4085:4103	1294200	8	True				
ANR	1294304	CallExpression	smart_str_0 ( & path )		1294200	0					
ANR	1294305	Callee	smart_str_0		1294200	0					
ANR	1294306	Identifier	smart_str_0		1294200	0					
ANR	1294307	ArgumentList	& path		1294200	1					
ANR	1294308	Argument	& path		1294200	0					
ANR	1294309	UnaryOperationExpression	& path		1294200	0					
ANR	1294310	UnaryOperator	&		1294200	0					
ANR	1294311	Identifier	path		1294200	1					
ANR	1294312	ExpressionStatement	"user_msg_size = vspprintf ( & user_msg , 0 , fmt , ap )"	167:1:4107:4155	1294200	9	True				
ANR	1294313	AssignmentExpression	"user_msg_size = vspprintf ( & user_msg , 0 , fmt , ap )"		1294200	0		=			
ANR	1294314	Identifier	user_msg_size		1294200	0					
ANR	1294315	CallExpression	"vspprintf ( & user_msg , 0 , fmt , ap )"		1294200	1					
ANR	1294316	Callee	vspprintf		1294200	0					
ANR	1294317	Identifier	vspprintf		1294200	0					
ANR	1294318	ArgumentList	& user_msg		1294200	1					
ANR	1294319	Argument	& user_msg		1294200	0					
ANR	1294320	UnaryOperationExpression	& user_msg		1294200	0					
ANR	1294321	UnaryOperator	&		1294200	0					
ANR	1294322	Identifier	user_msg		1294200	1					
ANR	1294323	Argument	0		1294200	1					
ANR	1294324	PrimaryExpression	0		1294200	0					
ANR	1294325	Argument	fmt		1294200	2					
ANR	1294326	Identifier	fmt		1294200	0					
ANR	1294327	Argument	ap		1294200	3					
ANR	1294328	Identifier	ap		1294200	0					
ANR	1294329	ExpressionStatement	err -> has_error = 1	169:1:4159:4177	1294200	10	True				
ANR	1294330	AssignmentExpression	err -> has_error = 1		1294200	0		=			
ANR	1294331	PtrMemberAccess	err -> has_error		1294200	0					
ANR	1294332	Identifier	err		1294200	0					
ANR	1294333	Identifier	has_error		1294200	1					
ANR	1294334	PrimaryExpression	1		1294200	1					
ANR	1294335	ExpressionStatement	err -> level = E_WARNING	170:1:4180:4202	1294200	11	True				
ANR	1294336	AssignmentExpression	err -> level = E_WARNING		1294200	0		=			
ANR	1294337	PtrMemberAccess	err -> level		1294200	0					
ANR	1294338	Identifier	err		1294200	0					
ANR	1294339	Identifier	level		1294200	1					
ANR	1294340	Identifier	E_WARNING		1294200	1					
ANR	1294341	ExpressionStatement	"spprintf ( & err -> msg , 0 , ""error converting %s data (path: %s): %.*s"" , what_conv , path . c && path . c != '\\0' ? path . c : ""unavailable"" , user_msg_size , user_msg )"	171:1:4205:4368	1294200	12	True				
ANR	1294342	CallExpression	"spprintf ( & err -> msg , 0 , ""error converting %s data (path: %s): %.*s"" , what_conv , path . c && path . c != '\\0' ? path . c : ""unavailable"" , user_msg_size , user_msg )"		1294200	0					
ANR	1294343	Callee	spprintf		1294200	0					
ANR	1294344	Identifier	spprintf		1294200	0					
ANR	1294345	ArgumentList	& err -> msg		1294200	1					
ANR	1294346	Argument	& err -> msg		1294200	0					
ANR	1294347	UnaryOperationExpression	& err -> msg		1294200	0					
ANR	1294348	UnaryOperator	&		1294200	0					
ANR	1294349	PtrMemberAccess	err -> msg		1294200	1					
ANR	1294350	Identifier	err		1294200	0					
ANR	1294351	Identifier	msg		1294200	1					
ANR	1294352	Argument	0		1294200	1					
ANR	1294353	PrimaryExpression	0		1294200	0					
ANR	1294354	Argument	"""error converting %s data (path: %s): %.*s"""		1294200	2					
ANR	1294355	PrimaryExpression	"""error converting %s data (path: %s): %.*s"""		1294200	0					
ANR	1294356	Argument	what_conv		1294200	3					
ANR	1294357	Identifier	what_conv		1294200	0					
ANR	1294358	Argument	"path . c && path . c != '\\0' ? path . c : ""unavailable"""		1294200	4					
ANR	1294359	ConditionalExpression	"path . c && path . c != '\\0' ? path . c : ""unavailable"""		1294200	0					
ANR	1294360	Condition	path . c && path . c != '\\0'		1294200	0					
ANR	1294361	AndExpression	path . c && path . c != '\\0'		1294200	0		&&			
ANR	1294362	MemberAccess	path . c		1294200	0					
ANR	1294363	Identifier	path		1294200	0					
ANR	1294364	Identifier	c		1294200	1					
ANR	1294365	EqualityExpression	path . c != '\\0'		1294200	1		!=			
ANR	1294366	MemberAccess	path . c		1294200	0					
ANR	1294367	Identifier	path		1294200	0					
ANR	1294368	Identifier	c		1294200	1					
ANR	1294369	PrimaryExpression	'\\0'		1294200	1					
ANR	1294370	MemberAccess	path . c		1294200	1					
ANR	1294371	Identifier	path		1294200	0					
ANR	1294372	Identifier	c		1294200	1					
ANR	1294373	PrimaryExpression	"""unavailable"""		1294200	2					
ANR	1294374	Argument	user_msg_size		1294200	5					
ANR	1294375	Identifier	user_msg_size		1294200	0					
ANR	1294376	Argument	user_msg		1294200	6					
ANR	1294377	Identifier	user_msg		1294200	0					
ANR	1294378	ExpressionStatement	err -> should_free = 1	175:1:4371:4391	1294200	13	True				
ANR	1294379	AssignmentExpression	err -> should_free = 1		1294200	0		=			
ANR	1294380	PtrMemberAccess	err -> should_free		1294200	0					
ANR	1294381	Identifier	err		1294200	0					
ANR	1294382	Identifier	should_free		1294200	1					
ANR	1294383	PrimaryExpression	1		1294200	1					
ANR	1294384	ExpressionStatement	efree ( user_msg )	177:1:4395:4410	1294200	14	True				
ANR	1294385	CallExpression	efree ( user_msg )		1294200	0					
ANR	1294386	Callee	efree		1294200	0					
ANR	1294387	Identifier	efree		1294200	0					
ANR	1294388	ArgumentList	user_msg		1294200	1					
ANR	1294389	Argument	user_msg		1294200	0					
ANR	1294390	Identifier	user_msg		1294200	0					
ANR	1294391	ExpressionStatement	"smart_str_free_ex ( & path , 0 )"	178:1:4413:4440	1294200	15	True				
ANR	1294392	CallExpression	"smart_str_free_ex ( & path , 0 )"		1294200	0					
ANR	1294393	Callee	smart_str_free_ex		1294200	0					
ANR	1294394	Identifier	smart_str_free_ex		1294200	0					
ANR	1294395	ArgumentList	& path		1294200	1					
ANR	1294396	Argument	& path		1294200	0					
ANR	1294397	UnaryOperationExpression	& path		1294200	0					
ANR	1294398	UnaryOperator	&		1294200	0					
ANR	1294399	Identifier	path		1294200	1					
ANR	1294400	Argument	0		1294200	1					
ANR	1294401	PrimaryExpression	0		1294200	0					
ANR	1294402	ReturnType	static void		1294200	1					
ANR	1294403	Identifier	do_from_to_zval_err		1294200	2					
ANR	1294404	ParameterList	"struct err_s * err , zend_llist * keys , const char * what_conv , const char * fmt , va_list ap"		1294200	3					
ANR	1294405	Parameter	struct err_s * err	139:32:3576:3592	1294200	0	True				
ANR	1294406	ParameterType	struct err_s *		1294200	0					
ANR	1294407	Identifier	err		1294200	1					
ANR	1294408	Parameter	zend_llist * keys	140:8:3603:3618	1294200	1	True				
ANR	1294409	ParameterType	zend_llist *		1294200	0					
ANR	1294410	Identifier	keys		1294200	1					
ANR	1294411	Parameter	const char * what_conv	141:8:3629:3649	1294200	2	True				
ANR	1294412	ParameterType	const char *		1294200	0					
ANR	1294413	Identifier	what_conv		1294200	1					
ANR	1294414	Parameter	const char * fmt	142:8:3660:3674	1294200	3	True				
ANR	1294415	ParameterType	const char *		1294200	0					
ANR	1294416	Identifier	fmt		1294200	1					
ANR	1294417	Parameter	va_list ap	143:8:3685:3694	1294200	4	True				
ANR	1294418	ParameterType	va_list		1294200	0					
ANR	1294419	Identifier	ap		1294200	1					
ANR	1294420	CFGEntryNode	ENTRY		1294200		True				
ANR	1294421	CFGExitNode	EXIT		1294200		True				
ANR	1294422	Symbol	keys		1294200						
ANR	1294423	Symbol	fmt		1294200						
ANR	1294424	Symbol	path . c		1294200						
ANR	1294425	Symbol	& path		1294200						
ANR	1294426	Symbol	& user_msg		1294200						
ANR	1294427	Symbol	E_WARNING		1294200						
ANR	1294428	Symbol	path		1294200						
ANR	1294429	Symbol	err -> has_error		1294200						
ANR	1294430	Symbol	pos		1294200						
ANR	1294431	Symbol	zend_llist_get_next_ex		1294200						
ANR	1294432	Symbol	* node		1294200						
ANR	1294433	Symbol	& err -> msg		1294200						
ANR	1294434	Symbol	NULL		1294200						
ANR	1294435	Symbol	err		1294200						
ANR	1294436	Symbol	what_conv		1294200						
ANR	1294437	Symbol	vspprintf		1294200						
ANR	1294438	Symbol	ap		1294200						
ANR	1294439	Symbol	user_msg		1294200						
ANR	1294440	Symbol	user_msg_size		1294200						
ANR	1294441	Symbol	* err		1294200						
ANR	1294442	Symbol	node		1294200						
ANR	1294443	Symbol	err -> level		1294200						
ANR	1294444	Symbol	path . len		1294200						
ANR	1294445	Symbol	zend_llist_get_first_ex		1294200						
ANR	1294446	Symbol	& pos		1294200						
ANR	1294447	Symbol	err -> should_free		1294200						
ANR	1294448	Function	do_from_zval_err	181:0:4480:4660							
ANR	1294449	FunctionDef	"do_from_zval_err (ser_context * ctx , const char * fmt)"		1294448	0					
ANR	1294450	CompoundStatement		182:0:4549:4660	1294448	0					
ANR	1294451	IdentifierDeclStatement	va_list ap ;	183:1:4552:4562	1294448	0	True				
ANR	1294452	IdentifierDecl	ap		1294448	0					
ANR	1294453	IdentifierDeclType	va_list		1294448	0					
ANR	1294454	Identifier	ap		1294448	1					
ANR	1294455	ExpressionStatement	"va_start ( ap , fmt )"	185:1:4566:4583	1294448	1	True				
ANR	1294456	CallExpression	"va_start ( ap , fmt )"		1294448	0					
ANR	1294457	Callee	va_start		1294448	0					
ANR	1294458	Identifier	va_start		1294448	0					
ANR	1294459	ArgumentList	ap		1294448	1					
ANR	1294460	Argument	ap		1294448	0					
ANR	1294461	Identifier	ap		1294448	0					
ANR	1294462	Argument	fmt		1294448	1					
ANR	1294463	Identifier	fmt		1294448	0					
ANR	1294464	ExpressionStatement	"do_from_to_zval_err ( & ctx -> err , & ctx -> keys , ""user"" , fmt , ap )"	186:1:4586:4645	1294448	2	True				
ANR	1294465	CallExpression	"do_from_to_zval_err ( & ctx -> err , & ctx -> keys , ""user"" , fmt , ap )"		1294448	0					
ANR	1294466	Callee	do_from_to_zval_err		1294448	0					
ANR	1294467	Identifier	do_from_to_zval_err		1294448	0					
ANR	1294468	ArgumentList	& ctx -> err		1294448	1					
ANR	1294469	Argument	& ctx -> err		1294448	0					
ANR	1294470	UnaryOperationExpression	& ctx -> err		1294448	0					
ANR	1294471	UnaryOperator	&		1294448	0					
ANR	1294472	PtrMemberAccess	ctx -> err		1294448	1					
ANR	1294473	Identifier	ctx		1294448	0					
ANR	1294474	Identifier	err		1294448	1					
ANR	1294475	Argument	& ctx -> keys		1294448	1					
ANR	1294476	UnaryOperationExpression	& ctx -> keys		1294448	0					
ANR	1294477	UnaryOperator	&		1294448	0					
ANR	1294478	PtrMemberAccess	ctx -> keys		1294448	1					
ANR	1294479	Identifier	ctx		1294448	0					
ANR	1294480	Identifier	keys		1294448	1					
ANR	1294481	Argument	"""user"""		1294448	2					
ANR	1294482	PrimaryExpression	"""user"""		1294448	0					
ANR	1294483	Argument	fmt		1294448	3					
ANR	1294484	Identifier	fmt		1294448	0					
ANR	1294485	Argument	ap		1294448	4					
ANR	1294486	Identifier	ap		1294448	0					
ANR	1294487	ExpressionStatement	va_end ( ap )	187:1:4648:4658	1294448	3	True				
ANR	1294488	CallExpression	va_end ( ap )		1294448	0					
ANR	1294489	Callee	va_end		1294448	0					
ANR	1294490	Identifier	va_end		1294448	0					
ANR	1294491	ArgumentList	ap		1294448	1					
ANR	1294492	Argument	ap		1294448	0					
ANR	1294493	Identifier	ap		1294448	0					
ANR	1294494	ReturnType	static void		1294448	1					
ANR	1294495	Identifier	do_from_zval_err		1294448	2					
ANR	1294496	ParameterList	"ser_context * ctx , const char * fmt"		1294448	3					
ANR	1294497	Parameter	ser_context * ctx	181:29:4509:4524	1294448	0	True				
ANR	1294498	ParameterType	ser_context *		1294448	0					
ANR	1294499	Identifier	ctx		1294448	1					
ANR	1294500	Parameter	const char * fmt	181:47:4527:4541	1294448	1	True				
ANR	1294501	ParameterType	const char *		1294448	0					
ANR	1294502	Identifier	fmt		1294448	1					
ANR	1294503	CFGEntryNode	ENTRY		1294448		True				
ANR	1294504	CFGExitNode	EXIT		1294448		True				
ANR	1294505	Symbol	& ctx -> keys		1294448						
ANR	1294506	Symbol	ctx		1294448						
ANR	1294507	Symbol	fmt		1294448						
ANR	1294508	Symbol	ap		1294448						
ANR	1294509	Symbol	& ctx -> err		1294448						
ANR	1294510	Function	do_to_zval_err	190:0:4698:4878							
ANR	1294511	FunctionDef	"do_to_zval_err (res_context * ctx , const char * fmt)"		1294510	0					
ANR	1294512	CompoundStatement		191:0:4765:4878	1294510	0					
ANR	1294513	IdentifierDeclStatement	va_list ap ;	192:1:4768:4778	1294510	0	True				
ANR	1294514	IdentifierDecl	ap		1294510	0					
ANR	1294515	IdentifierDeclType	va_list		1294510	0					
ANR	1294516	Identifier	ap		1294510	1					
ANR	1294517	ExpressionStatement	"va_start ( ap , fmt )"	194:1:4782:4799	1294510	1	True				
ANR	1294518	CallExpression	"va_start ( ap , fmt )"		1294510	0					
ANR	1294519	Callee	va_start		1294510	0					
ANR	1294520	Identifier	va_start		1294510	0					
ANR	1294521	ArgumentList	ap		1294510	1					
ANR	1294522	Argument	ap		1294510	0					
ANR	1294523	Identifier	ap		1294510	0					
ANR	1294524	Argument	fmt		1294510	1					
ANR	1294525	Identifier	fmt		1294510	0					
ANR	1294526	ExpressionStatement	"do_from_to_zval_err ( & ctx -> err , & ctx -> keys , ""native"" , fmt , ap )"	195:1:4802:4863	1294510	2	True				
ANR	1294527	CallExpression	"do_from_to_zval_err ( & ctx -> err , & ctx -> keys , ""native"" , fmt , ap )"		1294510	0					
ANR	1294528	Callee	do_from_to_zval_err		1294510	0					
ANR	1294529	Identifier	do_from_to_zval_err		1294510	0					
ANR	1294530	ArgumentList	& ctx -> err		1294510	1					
ANR	1294531	Argument	& ctx -> err		1294510	0					
ANR	1294532	UnaryOperationExpression	& ctx -> err		1294510	0					
ANR	1294533	UnaryOperator	&		1294510	0					
ANR	1294534	PtrMemberAccess	ctx -> err		1294510	1					
ANR	1294535	Identifier	ctx		1294510	0					
ANR	1294536	Identifier	err		1294510	1					
ANR	1294537	Argument	& ctx -> keys		1294510	1					
ANR	1294538	UnaryOperationExpression	& ctx -> keys		1294510	0					
ANR	1294539	UnaryOperator	&		1294510	0					
ANR	1294540	PtrMemberAccess	ctx -> keys		1294510	1					
ANR	1294541	Identifier	ctx		1294510	0					
ANR	1294542	Identifier	keys		1294510	1					
ANR	1294543	Argument	"""native"""		1294510	2					
ANR	1294544	PrimaryExpression	"""native"""		1294510	0					
ANR	1294545	Argument	fmt		1294510	3					
ANR	1294546	Identifier	fmt		1294510	0					
ANR	1294547	Argument	ap		1294510	4					
ANR	1294548	Identifier	ap		1294510	0					
ANR	1294549	ExpressionStatement	va_end ( ap )	196:1:4866:4876	1294510	3	True				
ANR	1294550	CallExpression	va_end ( ap )		1294510	0					
ANR	1294551	Callee	va_end		1294510	0					
ANR	1294552	Identifier	va_end		1294510	0					
ANR	1294553	ArgumentList	ap		1294510	1					
ANR	1294554	Argument	ap		1294510	0					
ANR	1294555	Identifier	ap		1294510	0					
ANR	1294556	ReturnType	static void		1294510	1					
ANR	1294557	Identifier	do_to_zval_err		1294510	2					
ANR	1294558	ParameterList	"res_context * ctx , const char * fmt"		1294510	3					
ANR	1294559	Parameter	res_context * ctx	190:27:4725:4740	1294510	0	True				
ANR	1294560	ParameterType	res_context *		1294510	0					
ANR	1294561	Identifier	ctx		1294510	1					
ANR	1294562	Parameter	const char * fmt	190:45:4743:4757	1294510	1	True				
ANR	1294563	ParameterType	const char *		1294510	0					
ANR	1294564	Identifier	fmt		1294510	1					
ANR	1294565	CFGEntryNode	ENTRY		1294510		True				
ANR	1294566	CFGExitNode	EXIT		1294510		True				
ANR	1294567	Symbol	& ctx -> keys		1294510						
ANR	1294568	Symbol	ctx		1294510						
ANR	1294569	Symbol	fmt		1294510						
ANR	1294570	Symbol	ap		1294510						
ANR	1294571	Symbol	& ctx -> err		1294510						
ANR	1294572	Function	allocations_dispose	208:0:5078:5210							
ANR	1294573	FunctionDef	allocations_dispose (zend_llist * * allocations)		1294572	0					
ANR	1294574	CompoundStatement		209:0:5129:5210	1294572	0					
ANR	1294575	ExpressionStatement	zend_llist_destroy ( * allocations )	210:1:5132:5164	1294572	0	True				
ANR	1294576	CallExpression	zend_llist_destroy ( * allocations )		1294572	0					
ANR	1294577	Callee	zend_llist_destroy		1294572	0					
ANR	1294578	Identifier	zend_llist_destroy		1294572	0					
ANR	1294579	ArgumentList	* allocations		1294572	1					
ANR	1294580	Argument	* allocations		1294572	0					
ANR	1294581	UnaryOperationExpression	* allocations		1294572	0					
ANR	1294582	UnaryOperator	*		1294572	0					
ANR	1294583	Identifier	allocations		1294572	1					
ANR	1294584	ExpressionStatement	efree ( * allocations )	211:1:5167:5186	1294572	1	True				
ANR	1294585	CallExpression	efree ( * allocations )		1294572	0					
ANR	1294586	Callee	efree		1294572	0					
ANR	1294587	Identifier	efree		1294572	0					
ANR	1294588	ArgumentList	* allocations		1294572	1					
ANR	1294589	Argument	* allocations		1294572	0					
ANR	1294590	UnaryOperationExpression	* allocations		1294572	0					
ANR	1294591	UnaryOperator	*		1294572	0					
ANR	1294592	Identifier	allocations		1294572	1					
ANR	1294593	ExpressionStatement	* allocations = NULL	212:1:5189:5208	1294572	2	True				
ANR	1294594	AssignmentExpression	* allocations = NULL		1294572	0		=			
ANR	1294595	UnaryOperationExpression	* allocations		1294572	0					
ANR	1294596	UnaryOperator	*		1294572	0					
ANR	1294597	Identifier	allocations		1294572	1					
ANR	1294598	Identifier	NULL		1294572	1					
ANR	1294599	ReturnType	void		1294572	1					
ANR	1294600	Identifier	allocations_dispose		1294572	2					
ANR	1294601	ParameterList	zend_llist * * allocations		1294572	3					
ANR	1294602	Parameter	zend_llist * * allocations	208:25:5103:5126	1294572	0	True				
ANR	1294603	ParameterType	zend_llist * *		1294572	0					
ANR	1294604	Identifier	allocations		1294572	1					
ANR	1294605	CFGEntryNode	ENTRY		1294572		True				
ANR	1294606	CFGExitNode	EXIT		1294572		True				
ANR	1294607	Symbol	NULL		1294572						
ANR	1294608	Symbol	allocations		1294572						
ANR	1294609	Symbol	* allocations		1294572						
ANR	1294610	Function	from_array_iterate	215:0:5213:6052							
ANR	1294611	FunctionDef	"from_array_iterate (const zval * arr , void ( * func ) ( zval * * elem , unsigned i , void * * args , ser_context * ctx ) , void * * args , ser_context * ctx)"		1294610	0					
ANR	1294612	CompoundStatement		219:0:5399:6052	1294610	0					
ANR	1294613	IdentifierDeclStatement	HashPosition pos ;	220:1:5402:5418	1294610	0	True				
ANR	1294614	IdentifierDecl	pos		1294610	0					
ANR	1294615	IdentifierDeclType	HashPosition		1294610	0					
ANR	1294616	Identifier	pos		1294610	1					
ANR	1294617	IdentifierDeclStatement	unsigned i ;	221:1:5421:5432	1294610	1	True				
ANR	1294618	IdentifierDecl	i		1294610	0					
ANR	1294619	IdentifierDeclType	unsigned		1294610	0					
ANR	1294620	Identifier	i		1294610	1					
ANR	1294621	IdentifierDeclStatement	zval * * elem ;	222:1:5435:5448	1294610	2	True				
ANR	1294622	IdentifierDecl	* * elem		1294610	0					
ANR	1294623	IdentifierDeclType	zval * *		1294610	0					
ANR	1294624	Identifier	elem		1294610	1					
ANR	1294625	IdentifierDeclStatement	"char buf [ sizeof ( ""element #4294967295"" ) ] ;"	223:1:5451:5492	1294610	3	True				
ANR	1294626	IdentifierDecl	"buf [ sizeof ( ""element #4294967295"" ) ]"		1294610	0					
ANR	1294627	IdentifierDeclType	"char [ sizeof ( ""element #4294967295"" ) ]"		1294610	0					
ANR	1294628	Identifier	buf		1294610	1					
ANR	1294629	SizeofExpression	"sizeof ( ""element #4294967295"" )"		1294610	2					
ANR	1294630	Sizeof	sizeof		1294610	0					
ANR	1294631	PrimaryExpression	"""element #4294967295"""		1294610	1					
ANR	1294632	IdentifierDeclStatement	char * bufp = buf ;	224:1:5495:5513	1294610	4	True				
ANR	1294633	IdentifierDecl	* bufp = buf		1294610	0					
ANR	1294634	IdentifierDeclType	char *		1294610	0					
ANR	1294635	Identifier	bufp		1294610	1					
ANR	1294636	AssignmentExpression	* bufp = buf		1294610	2		=			
ANR	1294637	Identifier	buf		1294610	0					
ANR	1294638	Identifier	buf		1294610	1					
ANR	1294639	ForStatement	"for ( zend_hash_internal_pointer_reset_ex ( Z_ARRVAL_P ( arr ) , & pos ) , i = 1 ; ! ctx -> err . has_error && zend_hash_get_current_data_ex ( Z_ARRVAL_P ( arr ) , ( void * * ) & elem , & pos ) == SUCCESS ; zend_hash_move_forward_ex ( Z_ARRVAL_P ( arr ) , & pos ) , i ++ )"		1294610	5					
ANR	1294640	ForInit	"zend_hash_internal_pointer_reset_ex ( Z_ARRVAL_P ( arr ) , & pos ) , i = 1 ;"	227:9:5559:5624	1294610	0	True				
ANR	1294641	Expression	"zend_hash_internal_pointer_reset_ex ( Z_ARRVAL_P ( arr ) , & pos ) , i = 1"		1294610	0					
ANR	1294642	CallExpression	"zend_hash_internal_pointer_reset_ex ( Z_ARRVAL_P ( arr ) , & pos )"		1294610	0					
ANR	1294643	Callee	zend_hash_internal_pointer_reset_ex		1294610	0					
ANR	1294644	Identifier	zend_hash_internal_pointer_reset_ex		1294610	0					
ANR	1294645	ArgumentList	Z_ARRVAL_P ( arr )		1294610	1					
ANR	1294646	Argument	Z_ARRVAL_P ( arr )		1294610	0					
ANR	1294647	CallExpression	Z_ARRVAL_P ( arr )		1294610	0					
ANR	1294648	Callee	Z_ARRVAL_P		1294610	0					
ANR	1294649	Identifier	Z_ARRVAL_P		1294610	0					
ANR	1294650	ArgumentList	arr		1294610	1					
ANR	1294651	Argument	arr		1294610	0					
ANR	1294652	Identifier	arr		1294610	0					
ANR	1294653	Argument	& pos		1294610	1					
ANR	1294654	UnaryOperationExpression	& pos		1294610	0					
ANR	1294655	UnaryOperator	&		1294610	0					
ANR	1294656	Identifier	pos		1294610	1					
ANR	1294657	AssignmentExpression	i = 1		1294610	1		=			
ANR	1294658	Identifier	i		1294610	0					
ANR	1294659	PrimaryExpression	1		1294610	1					
ANR	1294660	Condition	"! ctx -> err . has_error && zend_hash_get_current_data_ex ( Z_ARRVAL_P ( arr ) , ( void * * ) & elem , & pos ) == SUCCESS"	228:3:5629:5733	1294610	1	True				
ANR	1294661	AndExpression	"! ctx -> err . has_error && zend_hash_get_current_data_ex ( Z_ARRVAL_P ( arr ) , ( void * * ) & elem , & pos ) == SUCCESS"		1294610	0		&&			
ANR	1294662	UnaryOperationExpression	! ctx -> err . has_error		1294610	0					
ANR	1294663	UnaryOperator	!		1294610	0					
ANR	1294664	MemberAccess	ctx -> err . has_error		1294610	1					
ANR	1294665	PtrMemberAccess	ctx -> err		1294610	0					
ANR	1294666	Identifier	ctx		1294610	0					
ANR	1294667	Identifier	err		1294610	1					
ANR	1294668	Identifier	has_error		1294610	1					
ANR	1294669	EqualityExpression	"zend_hash_get_current_data_ex ( Z_ARRVAL_P ( arr ) , ( void * * ) & elem , & pos ) == SUCCESS"		1294610	1		==			
ANR	1294670	CallExpression	"zend_hash_get_current_data_ex ( Z_ARRVAL_P ( arr ) , ( void * * ) & elem , & pos )"		1294610	0					
ANR	1294671	Callee	zend_hash_get_current_data_ex		1294610	0					
ANR	1294672	Identifier	zend_hash_get_current_data_ex		1294610	0					
ANR	1294673	ArgumentList	Z_ARRVAL_P ( arr )		1294610	1					
ANR	1294674	Argument	Z_ARRVAL_P ( arr )		1294610	0					
ANR	1294675	CallExpression	Z_ARRVAL_P ( arr )		1294610	0					
ANR	1294676	Callee	Z_ARRVAL_P		1294610	0					
ANR	1294677	Identifier	Z_ARRVAL_P		1294610	0					
ANR	1294678	ArgumentList	arr		1294610	1					
ANR	1294679	Argument	arr		1294610	0					
ANR	1294680	Identifier	arr		1294610	0					
ANR	1294681	Argument	( void * * ) & elem		1294610	1					
ANR	1294682	CastExpression	( void * * ) & elem		1294610	0					
ANR	1294683	CastTarget	void * *		1294610	0					
ANR	1294684	UnaryOperationExpression	& elem		1294610	1					
ANR	1294685	UnaryOperator	&		1294610	0					
ANR	1294686	Identifier	elem		1294610	1					
ANR	1294687	Argument	& pos		1294610	2					
ANR	1294688	UnaryOperationExpression	& pos		1294610	0					
ANR	1294689	UnaryOperator	&		1294610	0					
ANR	1294690	Identifier	pos		1294610	1					
ANR	1294691	Identifier	SUCCESS		1294610	1					
ANR	1294692	Expression	"zend_hash_move_forward_ex ( Z_ARRVAL_P ( arr ) , & pos ) , i ++"	230:3:5739:5791	1294610	2	True				
ANR	1294693	CallExpression	"zend_hash_move_forward_ex ( Z_ARRVAL_P ( arr ) , & pos )"		1294610	0					
ANR	1294694	Callee	zend_hash_move_forward_ex		1294610	0					
ANR	1294695	Identifier	zend_hash_move_forward_ex		1294610	0					
ANR	1294696	ArgumentList	Z_ARRVAL_P ( arr )		1294610	1					
ANR	1294697	Argument	Z_ARRVAL_P ( arr )		1294610	0					
ANR	1294698	CallExpression	Z_ARRVAL_P ( arr )		1294610	0					
ANR	1294699	Callee	Z_ARRVAL_P		1294610	0					
ANR	1294700	Identifier	Z_ARRVAL_P		1294610	0					
ANR	1294701	ArgumentList	arr		1294610	1					
ANR	1294702	Argument	arr		1294610	0					
ANR	1294703	Identifier	arr		1294610	0					
ANR	1294704	Argument	& pos		1294610	1					
ANR	1294705	UnaryOperationExpression	& pos		1294610	0					
ANR	1294706	UnaryOperator	&		1294610	0					
ANR	1294707	Identifier	pos		1294610	1					
ANR	1294708	PostIncDecOperationExpression	i ++		1294610	1					
ANR	1294709	Identifier	i		1294610	0					
ANR	1294710	IncDec	++		1294610	1					
ANR	1294711	CompoundStatement		12:58:394:394	1294610	3					
ANR	1294712	IfStatement	"if ( snprintf ( buf , sizeof ( buf ) , ""element #%u"" , i ) >= sizeof ( buf ) )"		1294610	0					
ANR	1294713	Condition	"snprintf ( buf , sizeof ( buf ) , ""element #%u"" , i ) >= sizeof ( buf )"	231:6:5802:5860	1294610	0	True				
ANR	1294714	RelationalExpression	"snprintf ( buf , sizeof ( buf ) , ""element #%u"" , i ) >= sizeof ( buf )"		1294610	0		>=			
ANR	1294715	CallExpression	"snprintf ( buf , sizeof ( buf ) , ""element #%u"" , i )"		1294610	0					
ANR	1294716	Callee	snprintf		1294610	0					
ANR	1294717	Identifier	snprintf		1294610	0					
ANR	1294718	ArgumentList	buf		1294610	1					
ANR	1294719	Argument	buf		1294610	0					
ANR	1294720	Identifier	buf		1294610	0					
ANR	1294721	Argument	sizeof ( buf )		1294610	1					
ANR	1294722	SizeofExpression	sizeof ( buf )		1294610	0					
ANR	1294723	Sizeof	sizeof		1294610	0					
ANR	1294724	SizeofOperand	buf		1294610	1					
ANR	1294725	Argument	"""element #%u"""		1294610	2					
ANR	1294726	PrimaryExpression	"""element #%u"""		1294610	0					
ANR	1294727	Argument	i		1294610	3					
ANR	1294728	Identifier	i		1294610	0					
ANR	1294729	SizeofExpression	sizeof ( buf )		1294610	1					
ANR	1294730	Sizeof	sizeof		1294610	0					
ANR	1294731	SizeofOperand	buf		1294610	1					
ANR	1294732	CompoundStatement		13:67:463:463	1294610	1					
ANR	1294733	ExpressionStatement	"memcpy ( buf , ""element"" , sizeof ( ""element"" ) )"	232:3:5868:5909	1294610	0	True				
ANR	1294734	CallExpression	"memcpy ( buf , ""element"" , sizeof ( ""element"" ) )"		1294610	0					
ANR	1294735	Callee	memcpy		1294610	0					
ANR	1294736	Identifier	memcpy		1294610	0					
ANR	1294737	ArgumentList	buf		1294610	1					
ANR	1294738	Argument	buf		1294610	0					
ANR	1294739	Identifier	buf		1294610	0					
ANR	1294740	Argument	"""element"""		1294610	1					
ANR	1294741	PrimaryExpression	"""element"""		1294610	0					
ANR	1294742	Argument	"sizeof ( ""element"" )"		1294610	2					
ANR	1294743	SizeofExpression	"sizeof ( ""element"" )"		1294610	0					
ANR	1294744	Sizeof	sizeof		1294610	0					
ANR	1294745	PrimaryExpression	"""element"""		1294610	1					
ANR	1294746	ExpressionStatement	"zend_llist_add_element ( & ctx -> keys , & bufp )"	234:2:5917:5958	1294610	1	True				
ANR	1294747	CallExpression	"zend_llist_add_element ( & ctx -> keys , & bufp )"		1294610	0					
ANR	1294748	Callee	zend_llist_add_element		1294610	0					
ANR	1294749	Identifier	zend_llist_add_element		1294610	0					
ANR	1294750	ArgumentList	& ctx -> keys		1294610	1					
ANR	1294751	Argument	& ctx -> keys		1294610	0					
ANR	1294752	UnaryOperationExpression	& ctx -> keys		1294610	0					
ANR	1294753	UnaryOperator	&		1294610	0					
ANR	1294754	PtrMemberAccess	ctx -> keys		1294610	1					
ANR	1294755	Identifier	ctx		1294610	0					
ANR	1294756	Identifier	keys		1294610	1					
ANR	1294757	Argument	& bufp		1294610	1					
ANR	1294758	UnaryOperationExpression	& bufp		1294610	0					
ANR	1294759	UnaryOperator	&		1294610	0					
ANR	1294760	Identifier	bufp		1294610	1					
ANR	1294761	ExpressionStatement	"func ( elem , i , args , ctx )"	236:2:5963:5987	1294610	2	True				
ANR	1294762	CallExpression	"func ( elem , i , args , ctx )"		1294610	0					
ANR	1294763	Callee	func		1294610	0					
ANR	1294764	Identifier	func		1294610	0					
ANR	1294765	ArgumentList	elem		1294610	1					
ANR	1294766	Argument	elem		1294610	0					
ANR	1294767	Identifier	elem		1294610	0					
ANR	1294768	Argument	i		1294610	1					
ANR	1294769	Identifier	i		1294610	0					
ANR	1294770	Argument	args		1294610	2					
ANR	1294771	Identifier	args		1294610	0					
ANR	1294772	Argument	ctx		1294610	3					
ANR	1294773	Identifier	ctx		1294610	0					
ANR	1294774	ExpressionStatement	zend_llist_remove_tail ( & ctx -> keys )	238:2:5992:6026	1294610	3	True				
ANR	1294775	CallExpression	zend_llist_remove_tail ( & ctx -> keys )		1294610	0					
ANR	1294776	Callee	zend_llist_remove_tail		1294610	0					
ANR	1294777	Identifier	zend_llist_remove_tail		1294610	0					
ANR	1294778	ArgumentList	& ctx -> keys		1294610	1					
ANR	1294779	Argument	& ctx -> keys		1294610	0					
ANR	1294780	UnaryOperationExpression	& ctx -> keys		1294610	0					
ANR	1294781	UnaryOperator	&		1294610	0					
ANR	1294782	PtrMemberAccess	ctx -> keys		1294610	1					
ANR	1294783	Identifier	ctx		1294610	0					
ANR	1294784	Identifier	keys		1294610	1					
ANR	1294785	ReturnStatement	return i - 1 ;	241:4:6039:6050	1294610	6	True				
ANR	1294786	AdditiveExpression	i - 1		1294610	0		-			
ANR	1294787	Identifier	i		1294610	0					
ANR	1294788	PrimaryExpression	1		1294610	1					
ANR	1294789	ReturnType	static unsigned		1294610	1					
ANR	1294790	Identifier	from_array_iterate		1294610	2					
ANR	1294791	ParameterList	"const zval * arr , void ( * func ) ( zval * * elem , unsigned i , void * * args , ser_context * ctx ) , void * * args , ser_context * ctx"		1294610	3					
ANR	1294792	Parameter	const zval * arr	215:35:5248:5262	1294610	0	True				
ANR	1294793	ParameterType	const zval *		1294610	0					
ANR	1294794	Identifier	arr		1294610	1					
ANR	1294795	Parameter	"void ( * func ) ( zval * * elem , unsigned i , void * * args , ser_context * ctx )"	216:11:5276:5343	1294610	1	True				
ANR	1294796	ParameterType	"(( zval * * elem , unsigned i , void * * args , ser_context * ctx ) void) *"		1294610	0					
ANR	1294797	Identifier	func		1294610	1					
ANR	1294798	Parameter	void * * args	217:11:5357:5367	1294610	2	True				
ANR	1294799	ParameterType	void * *		1294610	0					
ANR	1294800	Identifier	args		1294610	1					
ANR	1294801	Parameter	ser_context * ctx	218:11:5381:5396	1294610	3	True				
ANR	1294802	ParameterType	ser_context *		1294610	0					
ANR	1294803	Identifier	ctx		1294610	1					
ANR	1294804	CFGEntryNode	ENTRY		1294610		True				
ANR	1294805	CFGExitNode	EXIT		1294610		True				
ANR	1294806	Symbol	arr		1294610						
ANR	1294807	Symbol	elem		1294610						
ANR	1294808	Symbol	zend_hash_get_current_data_ex		1294610						
ANR	1294809	Symbol	SUCCESS		1294610						
ANR	1294810	Symbol	& elem		1294610						
ANR	1294811	Symbol	& ctx -> keys		1294610						
ANR	1294812	Symbol	ctx		1294610						
ANR	1294813	Symbol	ctx -> err . has_error		1294610						
ANR	1294814	Symbol	i		1294610						
ANR	1294815	Symbol	ctx -> err		1294610						
ANR	1294816	Symbol	* ctx		1294610						
ANR	1294817	Symbol	args		1294610						
ANR	1294818	Symbol	buf		1294610						
ANR	1294819	Symbol	bufp		1294610						
ANR	1294820	Symbol	func		1294610						
ANR	1294821	Symbol	pos		1294610						
ANR	1294822	Symbol	Z_ARRVAL_P		1294610						
ANR	1294823	Symbol	& pos		1294610						
ANR	1294824	Symbol	& bufp		1294610						
ANR	1294825	Symbol	snprintf		1294610						
ANR	1294826	Function	from_zval_write_aggregation	245:0:6092:7048							
ANR	1294827	FunctionDef	"from_zval_write_aggregation (const zval * container , char * structure , const field_descriptor * descriptors , ser_context * ctx)"		1294826	0					
ANR	1294828	CompoundStatement		249:0:6257:7048	1294826	0					
ANR	1294829	IdentifierDeclStatement	const field_descriptor * descr ;	250:1:6260:6289	1294826	0	True				
ANR	1294830	IdentifierDecl	* descr		1294826	0					
ANR	1294831	IdentifierDeclType	const field_descriptor *		1294826	0					
ANR	1294832	Identifier	descr		1294826	1					
ANR	1294833	IdentifierDeclStatement	zval * * elem ;	251:1:6292:6307	1294826	1	True				
ANR	1294834	IdentifierDecl	* * elem		1294826	0					
ANR	1294835	IdentifierDeclType	zval * *		1294826	0					
ANR	1294836	Identifier	elem		1294826	1					
ANR	1294837	IfStatement	if ( Z_TYPE_P ( container ) != IS_ARRAY )		1294826	2					
ANR	1294838	Condition	Z_TYPE_P ( container ) != IS_ARRAY	253:5:6315:6345	1294826	0	True				
ANR	1294839	EqualityExpression	Z_TYPE_P ( container ) != IS_ARRAY		1294826	0		!=			
ANR	1294840	CallExpression	Z_TYPE_P ( container )		1294826	0					
ANR	1294841	Callee	Z_TYPE_P		1294826	0					
ANR	1294842	Identifier	Z_TYPE_P		1294826	0					
ANR	1294843	ArgumentList	container		1294826	1					
ANR	1294844	Argument	container		1294826	0					
ANR	1294845	Identifier	container		1294826	0					
ANR	1294846	Identifier	IS_ARRAY		1294826	1					
ANR	1294847	CompoundStatement		5:38:90:90	1294826	1					
ANR	1294848	ExpressionStatement	"do_from_zval_err ( ctx , ""%s"" , ""expected an array here"" )"	254:2:6352:6405	1294826	0	True				
ANR	1294849	CallExpression	"do_from_zval_err ( ctx , ""%s"" , ""expected an array here"" )"		1294826	0					
ANR	1294850	Callee	do_from_zval_err		1294826	0					
ANR	1294851	Identifier	do_from_zval_err		1294826	0					
ANR	1294852	ArgumentList	ctx		1294826	1					
ANR	1294853	Argument	ctx		1294826	0					
ANR	1294854	Identifier	ctx		1294826	0					
ANR	1294855	Argument	"""%s"""		1294826	1					
ANR	1294856	PrimaryExpression	"""%s"""		1294826	0					
ANR	1294857	Argument	"""expected an array here"""		1294826	2					
ANR	1294858	PrimaryExpression	"""expected an array here"""		1294826	0					
ANR	1294859	ForStatement	for ( descr = descriptors ; descr -> name != NULL && ! ctx -> err . has_error ; descr ++ )		1294826	3					
ANR	1294860	ForInit	descr = descriptors ;	257:6:6417:6436	1294826	0	True				
ANR	1294861	AssignmentExpression	descr = descriptors		1294826	0		=			
ANR	1294862	Identifier	descr		1294826	0					
ANR	1294863	Identifier	descriptors		1294826	1					
ANR	1294864	Condition	descr -> name != NULL && ! ctx -> err . has_error	257:27:6438:6479	1294826	1	True				
ANR	1294865	AndExpression	descr -> name != NULL && ! ctx -> err . has_error		1294826	0		&&			
ANR	1294866	EqualityExpression	descr -> name != NULL		1294826	0		!=			
ANR	1294867	PtrMemberAccess	descr -> name		1294826	0					
ANR	1294868	Identifier	descr		1294826	0					
ANR	1294869	Identifier	name		1294826	1					
ANR	1294870	Identifier	NULL		1294826	1					
ANR	1294871	UnaryOperationExpression	! ctx -> err . has_error		1294826	1					
ANR	1294872	UnaryOperator	!		1294826	0					
ANR	1294873	MemberAccess	ctx -> err . has_error		1294826	1					
ANR	1294874	PtrMemberAccess	ctx -> err		1294826	0					
ANR	1294875	Identifier	ctx		1294826	0					
ANR	1294876	Identifier	err		1294826	1					
ANR	1294877	Identifier	has_error		1294826	1					
ANR	1294878	PostIncDecOperationExpression	descr ++	257:71:6482:6488	1294826	2	True				
ANR	1294879	Identifier	descr		1294826	0					
ANR	1294880	IncDec	++		1294826	1					
ANR	1294881	CompoundStatement		9:80:233:233	1294826	3					
ANR	1294882	IfStatement	"if ( zend_hash_find ( Z_ARRVAL_P ( container ) , descr -> name , descr -> name_size , ( void * * ) & elem ) == SUCCESS )"		1294826	0					
ANR	1294883	Condition	"zend_hash_find ( Z_ARRVAL_P ( container ) , descr -> name , descr -> name_size , ( void * * ) & elem ) == SUCCESS"	258:6:6499:6596	1294826	0	True				
ANR	1294884	EqualityExpression	"zend_hash_find ( Z_ARRVAL_P ( container ) , descr -> name , descr -> name_size , ( void * * ) & elem ) == SUCCESS"		1294826	0		==			
ANR	1294885	CallExpression	"zend_hash_find ( Z_ARRVAL_P ( container ) , descr -> name , descr -> name_size , ( void * * ) & elem )"		1294826	0					
ANR	1294886	Callee	zend_hash_find		1294826	0					
ANR	1294887	Identifier	zend_hash_find		1294826	0					
ANR	1294888	ArgumentList	Z_ARRVAL_P ( container )		1294826	1					
ANR	1294889	Argument	Z_ARRVAL_P ( container )		1294826	0					
ANR	1294890	CallExpression	Z_ARRVAL_P ( container )		1294826	0					
ANR	1294891	Callee	Z_ARRVAL_P		1294826	0					
ANR	1294892	Identifier	Z_ARRVAL_P		1294826	0					
ANR	1294893	ArgumentList	container		1294826	1					
ANR	1294894	Argument	container		1294826	0					
ANR	1294895	Identifier	container		1294826	0					
ANR	1294896	Argument	descr -> name		1294826	1					
ANR	1294897	PtrMemberAccess	descr -> name		1294826	0					
ANR	1294898	Identifier	descr		1294826	0					
ANR	1294899	Identifier	name		1294826	1					
ANR	1294900	Argument	descr -> name_size		1294826	2					
ANR	1294901	PtrMemberAccess	descr -> name_size		1294826	0					
ANR	1294902	Identifier	descr		1294826	0					
ANR	1294903	Identifier	name_size		1294826	1					
ANR	1294904	Argument	( void * * ) & elem		1294826	3					
ANR	1294905	CastExpression	( void * * ) & elem		1294826	0					
ANR	1294906	CastTarget	void * *		1294826	0					
ANR	1294907	UnaryOperationExpression	& elem		1294826	1					
ANR	1294908	UnaryOperator	&		1294826	0					
ANR	1294909	Identifier	elem		1294826	1					
ANR	1294910	Identifier	SUCCESS		1294826	1					
ANR	1294911	CompoundStatement		11:62:341:341	1294826	1					
ANR	1294912	IfStatement	if ( descr -> from_zval == NULL )		1294826	0					
ANR	1294913	Condition	descr -> from_zval == NULL	261:7:6609:6632	1294826	0	True				
ANR	1294914	EqualityExpression	descr -> from_zval == NULL		1294826	0		==			
ANR	1294915	PtrMemberAccess	descr -> from_zval		1294826	0					
ANR	1294916	Identifier	descr		1294826	0					
ANR	1294917	Identifier	from_zval		1294826	1					
ANR	1294918	Identifier	NULL		1294826	1					
ANR	1294919	CompoundStatement		13:33:377:377	1294826	1					
ANR	1294920	Statement	do_from_zval_err	262:4:6641:6656	1294826	0	True				
ANR	1294921	Statement	(	262:20:6657:6657	1294826	1	True				
ANR	1294922	Statement	ctx	262:21:6658:6660	1294826	2	True				
ANR	1294923	Statement	","	262:24:6661:6661	1294826	3	True				
ANR	1294924	Statement	"""No information on how to convert value """	262:26:6663:6703	1294826	4	True				
ANR	1294925	Statement	"""of key '%s'"""	263:6:6711:6723	1294826	5	True				
ANR	1294926	Statement	","	263:19:6724:6724	1294826	6	True				
ANR	1294927	Statement	descr	263:21:6726:6730	1294826	7	True				
ANR	1294928	Statement	->	263:26:6731:6732	1294826	8	True				
ANR	1294929	Statement	name	263:28:6733:6736	1294826	9	True				
ANR	1294930	Statement	)	263:32:6737:6737	1294826	10	True				
ANR	1294931	ExpressionStatement		263:33:6738:6738	1294826	11	True				
ANR	1294932	BreakStatement	break ;	264:4:6744:6749	1294826	12	True				
ANR	1294933	ExpressionStatement	"zend_llist_add_element ( & ctx -> keys , ( void * ) & descr -> name )"	267:3:6760:6815	1294826	1	True				
ANR	1294934	CallExpression	"zend_llist_add_element ( & ctx -> keys , ( void * ) & descr -> name )"		1294826	0					
ANR	1294935	Callee	zend_llist_add_element		1294826	0					
ANR	1294936	Identifier	zend_llist_add_element		1294826	0					
ANR	1294937	ArgumentList	& ctx -> keys		1294826	1					
ANR	1294938	Argument	& ctx -> keys		1294826	0					
ANR	1294939	UnaryOperationExpression	& ctx -> keys		1294826	0					
ANR	1294940	UnaryOperator	&		1294826	0					
ANR	1294941	PtrMemberAccess	ctx -> keys		1294826	1					
ANR	1294942	Identifier	ctx		1294826	0					
ANR	1294943	Identifier	keys		1294826	1					
ANR	1294944	Argument	( void * ) & descr -> name		1294826	1					
ANR	1294945	CastExpression	( void * ) & descr -> name		1294826	0					
ANR	1294946	CastTarget	void *		1294826	0					
ANR	1294947	UnaryOperationExpression	& descr -> name		1294826	1					
ANR	1294948	UnaryOperator	&		1294826	0					
ANR	1294949	PtrMemberAccess	descr -> name		1294826	1					
ANR	1294950	Identifier	descr		1294826	0					
ANR	1294951	Identifier	name		1294826	1					
ANR	1294952	ExpressionStatement	"descr -> from_zval ( * elem , ( ( char * ) structure ) + descr -> field_offset , ctx )"	268:3:6820:6890	1294826	2	True				
ANR	1294953	CallExpression	"descr -> from_zval ( * elem , ( ( char * ) structure ) + descr -> field_offset , ctx )"		1294826	0					
ANR	1294954	Callee	descr -> from_zval		1294826	0					
ANR	1294955	PtrMemberAccess	descr -> from_zval		1294826	0					
ANR	1294956	Identifier	descr		1294826	0					
ANR	1294957	Identifier	from_zval		1294826	1					
ANR	1294958	ArgumentList	* elem		1294826	1					
ANR	1294959	Argument	* elem		1294826	0					
ANR	1294960	UnaryOperationExpression	* elem		1294826	0					
ANR	1294961	UnaryOperator	*		1294826	0					
ANR	1294962	Identifier	elem		1294826	1					
ANR	1294963	Argument	( ( char * ) structure ) + descr -> field_offset		1294826	1					
ANR	1294964	AdditiveExpression	( ( char * ) structure ) + descr -> field_offset		1294826	0		+			
ANR	1294965	CastExpression	( char * ) structure		1294826	0					
ANR	1294966	CastTarget	char *		1294826	0					
ANR	1294967	Identifier	structure		1294826	1					
ANR	1294968	PtrMemberAccess	descr -> field_offset		1294826	1					
ANR	1294969	Identifier	descr		1294826	0					
ANR	1294970	Identifier	field_offset		1294826	1					
ANR	1294971	Argument	ctx		1294826	2					
ANR	1294972	Identifier	ctx		1294826	0					
ANR	1294973	ExpressionStatement	zend_llist_remove_tail ( & ctx -> keys )	269:3:6895:6929	1294826	3	True				
ANR	1294974	CallExpression	zend_llist_remove_tail ( & ctx -> keys )		1294826	0					
ANR	1294975	Callee	zend_llist_remove_tail		1294826	0					
ANR	1294976	Identifier	zend_llist_remove_tail		1294826	0					
ANR	1294977	ArgumentList	& ctx -> keys		1294826	1					
ANR	1294978	Argument	& ctx -> keys		1294826	0					
ANR	1294979	UnaryOperationExpression	& ctx -> keys		1294826	0					
ANR	1294980	UnaryOperator	&		1294826	0					
ANR	1294981	PtrMemberAccess	ctx -> keys		1294826	1					
ANR	1294982	Identifier	ctx		1294826	0					
ANR	1294983	Identifier	keys		1294826	1					
ANR	1294984	ElseStatement	else		1294826	0					
ANR	1294985	IfStatement	if ( descr -> required )		1294826	0					
ANR	1294986	Condition	descr -> required	271:13:6945:6959	1294826	0	True				
ANR	1294987	PtrMemberAccess	descr -> required		1294826	0					
ANR	1294988	Identifier	descr		1294826	0					
ANR	1294989	Identifier	required		1294826	1					
ANR	1294990	CompoundStatement		23:30:704:704	1294826	1					
ANR	1294991	ExpressionStatement	"do_from_zval_err ( ctx , ""The key '%s' is required"" , descr -> name )"	272:3:6967:7029	1294826	0	True				
ANR	1294992	CallExpression	"do_from_zval_err ( ctx , ""The key '%s' is required"" , descr -> name )"		1294826	0					
ANR	1294993	Callee	do_from_zval_err		1294826	0					
ANR	1294994	Identifier	do_from_zval_err		1294826	0					
ANR	1294995	ArgumentList	ctx		1294826	1					
ANR	1294996	Argument	ctx		1294826	0					
ANR	1294997	Identifier	ctx		1294826	0					
ANR	1294998	Argument	"""The key '%s' is required"""		1294826	1					
ANR	1294999	PrimaryExpression	"""The key '%s' is required"""		1294826	0					
ANR	1295000	Argument	descr -> name		1294826	2					
ANR	1295001	PtrMemberAccess	descr -> name		1294826	0					
ANR	1295002	Identifier	descr		1294826	0					
ANR	1295003	Identifier	name		1294826	1					
ANR	1295004	BreakStatement	break ;	273:3:7034:7039	1294826	1	True				
ANR	1295005	ReturnType	static void		1294826	1					
ANR	1295006	Identifier	from_zval_write_aggregation		1294826	2					
ANR	1295007	ParameterList	"const zval * container , char * structure , const field_descriptor * descriptors , ser_context * ctx"		1294826	3					
ANR	1295008	Parameter	const zval * container	245:40:6132:6152	1294826	0	True				
ANR	1295009	ParameterType	const zval *		1294826	0					
ANR	1295010	Identifier	container		1294826	1					
ANR	1295011	Parameter	char * structure	246:10:6165:6179	1294826	1	True				
ANR	1295012	ParameterType	char *		1294826	0					
ANR	1295013	Identifier	structure		1294826	1					
ANR	1295014	Parameter	const field_descriptor * descriptors	247:10:6192:6226	1294826	2	True				
ANR	1295015	ParameterType	const field_descriptor *		1294826	0					
ANR	1295016	Identifier	descriptors		1294826	1					
ANR	1295017	Parameter	ser_context * ctx	248:10:6239:6254	1294826	3	True				
ANR	1295018	ParameterType	ser_context *		1294826	0					
ANR	1295019	Identifier	ctx		1294826	1					
ANR	1295020	CFGEntryNode	ENTRY		1294826		True				
ANR	1295021	CFGExitNode	EXIT		1294826		True				
ANR	1295022	Symbol	container		1294826						
ANR	1295023	Symbol	& elem		1294826						
ANR	1295024	Symbol	& ctx -> keys		1294826						
ANR	1295025	Symbol	descr -> field_offset		1294826						
ANR	1295026	Symbol	& descr -> name		1294826						
ANR	1295027	Symbol	ctx -> err		1294826						
ANR	1295028	Symbol	descr -> from_zval		1294826						
ANR	1295029	Symbol	descriptors		1294826						
ANR	1295030	Symbol	zend_hash_find		1294826						
ANR	1295031	Symbol	IS_ARRAY		1294826						
ANR	1295032	Symbol	descr -> name_size		1294826						
ANR	1295033	Symbol	* descr		1294826						
ANR	1295034	Symbol	* elem		1294826						
ANR	1295035	Symbol	Z_ARRVAL_P		1294826						
ANR	1295036	Symbol	elem		1294826						
ANR	1295037	Symbol	NULL		1294826						
ANR	1295038	Symbol	SUCCESS		1294826						
ANR	1295039	Symbol	ctx		1294826						
ANR	1295040	Symbol	ctx -> err . has_error		1294826						
ANR	1295041	Symbol	descr -> required		1294826						
ANR	1295042	Symbol	Z_TYPE_P		1294826						
ANR	1295043	Symbol	structure		1294826						
ANR	1295044	Symbol	* ctx		1294826						
ANR	1295045	Symbol	descr		1294826						
ANR	1295046	Symbol	descr -> name		1294826						
ANR	1295047	Function	to_zval_read_aggregation	277:0:7050:7861							
ANR	1295048	FunctionDef	"to_zval_read_aggregation (const char * structure , zval * zarr , const field_descriptor * descriptors , res_context * ctx)"		1295047	0					
ANR	1295049	CompoundStatement		281:0:7231:7861	1295047	0					
ANR	1295050	IdentifierDeclStatement	const field_descriptor * descr ;	282:1:7234:7263	1295047	0	True				
ANR	1295051	IdentifierDecl	* descr		1295047	0					
ANR	1295052	IdentifierDeclType	const field_descriptor *		1295047	0					
ANR	1295053	Identifier	descr		1295047	1					
ANR	1295054	ExpressionStatement	assert ( Z_TYPE_P ( zarr ) == IS_ARRAY )	284:1:7267:7301	1295047	1	True				
ANR	1295055	CallExpression	assert ( Z_TYPE_P ( zarr ) == IS_ARRAY )		1295047	0					
ANR	1295056	Callee	assert		1295047	0					
ANR	1295057	Identifier	assert		1295047	0					
ANR	1295058	ArgumentList	Z_TYPE_P ( zarr ) == IS_ARRAY		1295047	1					
ANR	1295059	Argument	Z_TYPE_P ( zarr ) == IS_ARRAY		1295047	0					
ANR	1295060	EqualityExpression	Z_TYPE_P ( zarr ) == IS_ARRAY		1295047	0		==			
ANR	1295061	CallExpression	Z_TYPE_P ( zarr )		1295047	0					
ANR	1295062	Callee	Z_TYPE_P		1295047	0					
ANR	1295063	Identifier	Z_TYPE_P		1295047	0					
ANR	1295064	ArgumentList	zarr		1295047	1					
ANR	1295065	Argument	zarr		1295047	0					
ANR	1295066	Identifier	zarr		1295047	0					
ANR	1295067	Identifier	IS_ARRAY		1295047	1					
ANR	1295068	ExpressionStatement	assert ( Z_ARRVAL_P ( zarr ) != NULL )	285:1:7304:7336	1295047	2	True				
ANR	1295069	CallExpression	assert ( Z_ARRVAL_P ( zarr ) != NULL )		1295047	0					
ANR	1295070	Callee	assert		1295047	0					
ANR	1295071	Identifier	assert		1295047	0					
ANR	1295072	ArgumentList	Z_ARRVAL_P ( zarr ) != NULL		1295047	1					
ANR	1295073	Argument	Z_ARRVAL_P ( zarr ) != NULL		1295047	0					
ANR	1295074	EqualityExpression	Z_ARRVAL_P ( zarr ) != NULL		1295047	0		!=			
ANR	1295075	CallExpression	Z_ARRVAL_P ( zarr )		1295047	0					
ANR	1295076	Callee	Z_ARRVAL_P		1295047	0					
ANR	1295077	Identifier	Z_ARRVAL_P		1295047	0					
ANR	1295078	ArgumentList	zarr		1295047	1					
ANR	1295079	Argument	zarr		1295047	0					
ANR	1295080	Identifier	zarr		1295047	0					
ANR	1295081	Identifier	NULL		1295047	1					
ANR	1295082	ForStatement	for ( descr = descriptors ; descr -> name != NULL && ! ctx -> err . has_error ; descr ++ )		1295047	3					
ANR	1295083	ForInit	descr = descriptors ;	287:6:7345:7364	1295047	0	True				
ANR	1295084	AssignmentExpression	descr = descriptors		1295047	0		=			
ANR	1295085	Identifier	descr		1295047	0					
ANR	1295086	Identifier	descriptors		1295047	1					
ANR	1295087	Condition	descr -> name != NULL && ! ctx -> err . has_error	287:27:7366:7407	1295047	1	True				
ANR	1295088	AndExpression	descr -> name != NULL && ! ctx -> err . has_error		1295047	0		&&			
ANR	1295089	EqualityExpression	descr -> name != NULL		1295047	0		!=			
ANR	1295090	PtrMemberAccess	descr -> name		1295047	0					
ANR	1295091	Identifier	descr		1295047	0					
ANR	1295092	Identifier	name		1295047	1					
ANR	1295093	Identifier	NULL		1295047	1					
ANR	1295094	UnaryOperationExpression	! ctx -> err . has_error		1295047	1					
ANR	1295095	UnaryOperator	!		1295047	0					
ANR	1295096	MemberAccess	ctx -> err . has_error		1295047	1					
ANR	1295097	PtrMemberAccess	ctx -> err		1295047	0					
ANR	1295098	Identifier	ctx		1295047	0					
ANR	1295099	Identifier	err		1295047	1					
ANR	1295100	Identifier	has_error		1295047	1					
ANR	1295101	PostIncDecOperationExpression	descr ++	287:71:7410:7416	1295047	2	True				
ANR	1295102	Identifier	descr		1295047	0					
ANR	1295103	IncDec	++		1295047	1					
ANR	1295104	CompoundStatement		8:2:191:203	1295047	3					
ANR	1295105	IdentifierDeclStatement	zval * new_zv ;	288:2:7423:7435	1295047	0	True				
ANR	1295106	IdentifierDecl	* new_zv		1295047	0					
ANR	1295107	IdentifierDeclType	zval *		1295047	0					
ANR	1295108	Identifier	new_zv		1295047	1					
ANR	1295109	IfStatement	if ( descr -> to_zval == NULL )		1295047	1					
ANR	1295110	Condition	descr -> to_zval == NULL	290:6:7444:7465	1295047	0	True				
ANR	1295111	EqualityExpression	descr -> to_zval == NULL		1295047	0		==			
ANR	1295112	PtrMemberAccess	descr -> to_zval		1295047	0					
ANR	1295113	Identifier	descr		1295047	0					
ANR	1295114	Identifier	to_zval		1295047	1					
ANR	1295115	Identifier	NULL		1295047	1					
ANR	1295116	CompoundStatement		10:30:236:236	1295047	1					
ANR	1295117	Statement	do_to_zval_err	291:3:7473:7486	1295047	0	True				
ANR	1295118	Statement	(	291:17:7487:7487	1295047	1	True				
ANR	1295119	Statement	ctx	291:18:7488:7490	1295047	2	True				
ANR	1295120	Statement	","	291:21:7491:7491	1295047	3	True				
ANR	1295121	Statement	"""No information on how to convert native """	291:23:7493:7534	1295047	4	True				
ANR	1295122	Statement	"""field into value for key '%s'"""	292:5:7541:7571	1295047	5	True				
ANR	1295123	Statement	","	292:36:7572:7572	1295047	6	True				
ANR	1295124	Statement	descr	292:38:7574:7578	1295047	7	True				
ANR	1295125	Statement	->	292:43:7579:7580	1295047	8	True				
ANR	1295126	Statement	name	292:45:7581:7584	1295047	9	True				
ANR	1295127	Statement	)	292:49:7585:7585	1295047	10	True				
ANR	1295128	ExpressionStatement		292:50:7586:7586	1295047	11	True				
ANR	1295129	BreakStatement	break ;	293:3:7591:7596	1295047	12	True				
ANR	1295130	ExpressionStatement	ALLOC_INIT_ZVAL ( new_zv )	296:2:7605:7628	1295047	2	True				
ANR	1295131	CallExpression	ALLOC_INIT_ZVAL ( new_zv )		1295047	0					
ANR	1295132	Callee	ALLOC_INIT_ZVAL		1295047	0					
ANR	1295133	Identifier	ALLOC_INIT_ZVAL		1295047	0					
ANR	1295134	ArgumentList	new_zv		1295047	1					
ANR	1295135	Argument	new_zv		1295047	0					
ANR	1295136	Identifier	new_zv		1295047	0					
ANR	1295137	ExpressionStatement	"add_assoc_zval_ex ( zarr , descr -> name , descr -> name_size , new_zv )"	297:2:7632:7694	1295047	3	True				
ANR	1295138	CallExpression	"add_assoc_zval_ex ( zarr , descr -> name , descr -> name_size , new_zv )"		1295047	0					
ANR	1295139	Callee	add_assoc_zval_ex		1295047	0					
ANR	1295140	Identifier	add_assoc_zval_ex		1295047	0					
ANR	1295141	ArgumentList	zarr		1295047	1					
ANR	1295142	Argument	zarr		1295047	0					
ANR	1295143	Identifier	zarr		1295047	0					
ANR	1295144	Argument	descr -> name		1295047	1					
ANR	1295145	PtrMemberAccess	descr -> name		1295047	0					
ANR	1295146	Identifier	descr		1295047	0					
ANR	1295147	Identifier	name		1295047	1					
ANR	1295148	Argument	descr -> name_size		1295047	2					
ANR	1295149	PtrMemberAccess	descr -> name_size		1295047	0					
ANR	1295150	Identifier	descr		1295047	0					
ANR	1295151	Identifier	name_size		1295047	1					
ANR	1295152	Argument	new_zv		1295047	3					
ANR	1295153	Identifier	new_zv		1295047	0					
ANR	1295154	ExpressionStatement	"zend_llist_add_element ( & ctx -> keys , ( void * ) & descr -> name )"	299:2:7699:7754	1295047	4	True				
ANR	1295155	CallExpression	"zend_llist_add_element ( & ctx -> keys , ( void * ) & descr -> name )"		1295047	0					
ANR	1295156	Callee	zend_llist_add_element		1295047	0					
ANR	1295157	Identifier	zend_llist_add_element		1295047	0					
ANR	1295158	ArgumentList	& ctx -> keys		1295047	1					
ANR	1295159	Argument	& ctx -> keys		1295047	0					
ANR	1295160	UnaryOperationExpression	& ctx -> keys		1295047	0					
ANR	1295161	UnaryOperator	&		1295047	0					
ANR	1295162	PtrMemberAccess	ctx -> keys		1295047	1					
ANR	1295163	Identifier	ctx		1295047	0					
ANR	1295164	Identifier	keys		1295047	1					
ANR	1295165	Argument	( void * ) & descr -> name		1295047	1					
ANR	1295166	CastExpression	( void * ) & descr -> name		1295047	0					
ANR	1295167	CastTarget	void *		1295047	0					
ANR	1295168	UnaryOperationExpression	& descr -> name		1295047	1					
ANR	1295169	UnaryOperator	&		1295047	0					
ANR	1295170	PtrMemberAccess	descr -> name		1295047	1					
ANR	1295171	Identifier	descr		1295047	0					
ANR	1295172	Identifier	name		1295047	1					
ANR	1295173	ExpressionStatement	"descr -> to_zval ( structure + descr -> field_offset , new_zv , ctx )"	300:2:7758:7818	1295047	5	True				
ANR	1295174	CallExpression	"descr -> to_zval ( structure + descr -> field_offset , new_zv , ctx )"		1295047	0					
ANR	1295175	Callee	descr -> to_zval		1295047	0					
ANR	1295176	PtrMemberAccess	descr -> to_zval		1295047	0					
ANR	1295177	Identifier	descr		1295047	0					
ANR	1295178	Identifier	to_zval		1295047	1					
ANR	1295179	ArgumentList	structure + descr -> field_offset		1295047	1					
ANR	1295180	Argument	structure + descr -> field_offset		1295047	0					
ANR	1295181	AdditiveExpression	structure + descr -> field_offset		1295047	0		+			
ANR	1295182	Identifier	structure		1295047	0					
ANR	1295183	PtrMemberAccess	descr -> field_offset		1295047	1					
ANR	1295184	Identifier	descr		1295047	0					
ANR	1295185	Identifier	field_offset		1295047	1					
ANR	1295186	Argument	new_zv		1295047	1					
ANR	1295187	Identifier	new_zv		1295047	0					
ANR	1295188	Argument	ctx		1295047	2					
ANR	1295189	Identifier	ctx		1295047	0					
ANR	1295190	ExpressionStatement	zend_llist_remove_tail ( & ctx -> keys )	301:2:7822:7856	1295047	6	True				
ANR	1295191	CallExpression	zend_llist_remove_tail ( & ctx -> keys )		1295047	0					
ANR	1295192	Callee	zend_llist_remove_tail		1295047	0					
ANR	1295193	Identifier	zend_llist_remove_tail		1295047	0					
ANR	1295194	ArgumentList	& ctx -> keys		1295047	1					
ANR	1295195	Argument	& ctx -> keys		1295047	0					
ANR	1295196	UnaryOperationExpression	& ctx -> keys		1295047	0					
ANR	1295197	UnaryOperator	&		1295047	0					
ANR	1295198	PtrMemberAccess	ctx -> keys		1295047	1					
ANR	1295199	Identifier	ctx		1295047	0					
ANR	1295200	Identifier	keys		1295047	1					
ANR	1295201	ReturnType	static void		1295047	1					
ANR	1295202	Identifier	to_zval_read_aggregation		1295047	2					
ANR	1295203	ParameterList	"const char * structure , zval * zarr , const field_descriptor * descriptors , res_context * ctx"		1295047	3					
ANR	1295204	Parameter	const char * structure	277:37:7087:7107	1295047	0	True				
ANR	1295205	ParameterType	const char *		1295047	0					
ANR	1295206	Identifier	structure		1295047	1					
ANR	1295207	Parameter	zval * zarr	278:10:7120:7129	1295047	1	True				
ANR	1295208	ParameterType	zval *		1295047	0					
ANR	1295209	Identifier	zarr		1295047	1					
ANR	1295210	Parameter	const field_descriptor * descriptors	279:10:7166:7200	1295047	2	True				
ANR	1295211	ParameterType	const field_descriptor *		1295047	0					
ANR	1295212	Identifier	descriptors		1295047	1					
ANR	1295213	Parameter	res_context * ctx	280:10:7213:7228	1295047	3	True				
ANR	1295214	ParameterType	res_context *		1295047	0					
ANR	1295215	Identifier	ctx		1295047	1					
ANR	1295216	CFGEntryNode	ENTRY		1295047		True				
ANR	1295217	CFGExitNode	EXIT		1295047		True				
ANR	1295218	Symbol	new_zv		1295047						
ANR	1295219	Symbol	NULL		1295047						
ANR	1295220	Symbol	& ctx -> keys		1295047						
ANR	1295221	Symbol	ctx		1295047						
ANR	1295222	Symbol	descr -> to_zval		1295047						
ANR	1295223	Symbol	ctx -> err . has_error		1295047						
ANR	1295224	Symbol	descr -> field_offset		1295047						
ANR	1295225	Symbol	Z_TYPE_P		1295047						
ANR	1295226	Symbol	& descr -> name		1295047						
ANR	1295227	Symbol	structure		1295047						
ANR	1295228	Symbol	* ctx		1295047						
ANR	1295229	Symbol	ctx -> err		1295047						
ANR	1295230	Symbol	descriptors		1295047						
ANR	1295231	Symbol	descr		1295047						
ANR	1295232	Symbol	IS_ARRAY		1295047						
ANR	1295233	Symbol	descr -> name		1295047						
ANR	1295234	Symbol	descr -> name_size		1295047						
ANR	1295235	Symbol	* descr		1295047						
ANR	1295236	Symbol	Z_ARRVAL_P		1295047						
ANR	1295237	Symbol	zarr		1295047						
ANR	1295238	Function	from_zval_integer_common	306:0:7895:9170							
ANR	1295239	FunctionDef	"from_zval_integer_common (const zval * arr_value , ser_context * ctx)"		1295238	0					
ANR	1295240	CompoundStatement		307:0:7973:9170	1295238	0					
ANR	1295241	IdentifierDeclStatement	long ret = 0 ;	308:1:7976:7988	1295238	0	True				
ANR	1295242	IdentifierDecl	ret = 0		1295238	0					
ANR	1295243	IdentifierDeclType	long		1295238	0					
ANR	1295244	Identifier	ret		1295238	1					
ANR	1295245	AssignmentExpression	ret = 0		1295238	2		=			
ANR	1295246	Identifier	ret		1295238	0					
ANR	1295247	PrimaryExpression	0		1295238	1					
ANR	1295248	IdentifierDeclStatement	zval lzval = zval_used_for_init ;	309:1:7991:8022	1295238	1	True				
ANR	1295249	IdentifierDecl	lzval = zval_used_for_init		1295238	0					
ANR	1295250	IdentifierDeclType	zval		1295238	0					
ANR	1295251	Identifier	lzval		1295238	1					
ANR	1295252	AssignmentExpression	lzval = zval_used_for_init		1295238	2		=			
ANR	1295253	Identifier	zval_used_for_init		1295238	0					
ANR	1295254	Identifier	zval_used_for_init		1295238	1					
ANR	1295255	IfStatement	if ( Z_TYPE_P ( arr_value ) != IS_LONG )		1295238	2					
ANR	1295256	Condition	Z_TYPE_P ( arr_value ) != IS_LONG	311:5:8030:8059	1295238	0	True				
ANR	1295257	EqualityExpression	Z_TYPE_P ( arr_value ) != IS_LONG		1295238	0		!=			
ANR	1295258	CallExpression	Z_TYPE_P ( arr_value )		1295238	0					
ANR	1295259	Callee	Z_TYPE_P		1295238	0					
ANR	1295260	Identifier	Z_TYPE_P		1295238	0					
ANR	1295261	ArgumentList	arr_value		1295238	1					
ANR	1295262	Argument	arr_value		1295238	0					
ANR	1295263	Identifier	arr_value		1295238	0					
ANR	1295264	Identifier	IS_LONG		1295238	1					
ANR	1295265	CompoundStatement		5:37:88:88	1295238	1					
ANR	1295266	ExpressionStatement	"ZVAL_COPY_VALUE ( & lzval , arr_value )"	312:2:8066:8100	1295238	0	True				
ANR	1295267	CallExpression	"ZVAL_COPY_VALUE ( & lzval , arr_value )"		1295238	0					
ANR	1295268	Callee	ZVAL_COPY_VALUE		1295238	0					
ANR	1295269	Identifier	ZVAL_COPY_VALUE		1295238	0					
ANR	1295270	ArgumentList	& lzval		1295238	1					
ANR	1295271	Argument	& lzval		1295238	0					
ANR	1295272	UnaryOperationExpression	& lzval		1295238	0					
ANR	1295273	UnaryOperator	&		1295238	0					
ANR	1295274	Identifier	lzval		1295238	1					
ANR	1295275	Argument	arr_value		1295238	1					
ANR	1295276	Identifier	arr_value		1295238	0					
ANR	1295277	ExpressionStatement	zval_copy_ctor ( & lzval )	313:2:8104:8126	1295238	1	True				
ANR	1295278	CallExpression	zval_copy_ctor ( & lzval )		1295238	0					
ANR	1295279	Callee	zval_copy_ctor		1295238	0					
ANR	1295280	Identifier	zval_copy_ctor		1295238	0					
ANR	1295281	ArgumentList	& lzval		1295238	1					
ANR	1295282	Argument	& lzval		1295238	0					
ANR	1295283	UnaryOperationExpression	& lzval		1295238	0					
ANR	1295284	UnaryOperator	&		1295238	0					
ANR	1295285	Identifier	lzval		1295238	1					
ANR	1295286	ExpressionStatement	arr_value = & lzval	314:2:8130:8148	1295238	2	True				
ANR	1295287	AssignmentExpression	arr_value = & lzval		1295238	0		=			
ANR	1295288	Identifier	arr_value		1295238	0					
ANR	1295289	UnaryOperationExpression	& lzval		1295238	1					
ANR	1295290	UnaryOperator	&		1295238	0					
ANR	1295291	Identifier	lzval		1295238	1					
ANR	1295292	SwitchStatement	switch ( Z_TYPE_P ( arr_value ) )		1295238	3					
ANR	1295293	Condition	Z_TYPE_P ( arr_value )	317:9:8163:8181	1295238	0	True				
ANR	1295294	CallExpression	Z_TYPE_P ( arr_value )		1295238	0					
ANR	1295295	Callee	Z_TYPE_P		1295238	0					
ANR	1295296	Identifier	Z_TYPE_P		1295238	0					
ANR	1295297	ArgumentList	arr_value		1295238	1					
ANR	1295298	Argument	arr_value		1295238	0					
ANR	1295299	Identifier	arr_value		1295238	0					
ANR	1295300	CompoundStatement		11:30:210:210	1295238	1					
ANR	1295301	Label	case IS_LONG :	318:1:8187:8199	1295238	0	True				
ANR	1295302	Identifier	IS_LONG		1295238	0					
ANR	1295303	Label	long_case :	319:0:8201:8210	1295238	1	True				
ANR	1295304	Identifier	long_case		1295238	0					
ANR	1295305	ExpressionStatement	ret = Z_LVAL_P ( arr_value )	320:2:8214:8239	1295238	2	True				
ANR	1295306	AssignmentExpression	ret = Z_LVAL_P ( arr_value )		1295238	0		=			
ANR	1295307	Identifier	ret		1295238	0					
ANR	1295308	CallExpression	Z_LVAL_P ( arr_value )		1295238	1					
ANR	1295309	Callee	Z_LVAL_P		1295238	0					
ANR	1295310	Identifier	Z_LVAL_P		1295238	0					
ANR	1295311	ArgumentList	arr_value		1295238	1					
ANR	1295312	Argument	arr_value		1295238	0					
ANR	1295313	Identifier	arr_value		1295238	0					
ANR	1295314	BreakStatement	break ;	321:2:8243:8248	1295238	3	True				
ANR	1295315	Label	case IS_DOUBLE :	324:1:8296:8310	1295238	4	True				
ANR	1295316	Identifier	IS_DOUBLE		1295238	0					
ANR	1295317	Label	double_case :	325:0:8312:8323	1295238	5	True				
ANR	1295318	Identifier	double_case		1295238	0					
ANR	1295319	ExpressionStatement	convert_to_long ( & lzval )	326:2:8327:8350	1295238	6	True				
ANR	1295320	CallExpression	convert_to_long ( & lzval )		1295238	0					
ANR	1295321	Callee	convert_to_long		1295238	0					
ANR	1295322	Identifier	convert_to_long		1295238	0					
ANR	1295323	ArgumentList	& lzval		1295238	1					
ANR	1295324	Argument	& lzval		1295238	0					
ANR	1295325	UnaryOperationExpression	& lzval		1295238	0					
ANR	1295326	UnaryOperator	&		1295238	0					
ANR	1295327	Identifier	lzval		1295238	1					
ANR	1295328	GotoStatement	goto long_case ;	327:2:8354:8368	1295238	7	True				
ANR	1295329	Identifier	long_case		1295238	0					
ANR	1295330	Label	case IS_OBJECT :	329:1:8372:8386	1295238	8	True				
ANR	1295331	Identifier	IS_OBJECT		1295238	0					
ANR	1295332	Label	case IS_STRING :	330:1:8389:8403	1295238	9	True				
ANR	1295333	Identifier	IS_STRING		1295238	0					
ANR	1295334	CompoundStatement		26:2:448:459	1295238	10					
ANR	1295335	IdentifierDeclStatement	long lval ;	331:2:8409:8418	1295238	0	True				
ANR	1295336	IdentifierDecl	lval		1295238	0					
ANR	1295337	IdentifierDeclType	long		1295238	0					
ANR	1295338	Identifier	lval		1295238	1					
ANR	1295339	IdentifierDeclStatement	double dval ;	332:2:8422:8433	1295238	1	True				
ANR	1295340	IdentifierDecl	dval		1295238	0					
ANR	1295341	IdentifierDeclType	double		1295238	0					
ANR	1295342	Identifier	dval		1295238	1					
ANR	1295343	ExpressionStatement	convert_to_string ( & lzval )	334:2:8438:8463	1295238	2	True				
ANR	1295344	CallExpression	convert_to_string ( & lzval )		1295238	0					
ANR	1295345	Callee	convert_to_string		1295238	0					
ANR	1295346	Identifier	convert_to_string		1295238	0					
ANR	1295347	ArgumentList	& lzval		1295238	1					
ANR	1295348	Argument	& lzval		1295238	0					
ANR	1295349	UnaryOperationExpression	& lzval		1295238	0					
ANR	1295350	UnaryOperator	&		1295238	0					
ANR	1295351	Identifier	lzval		1295238	1					
ANR	1295352	SwitchStatement	"switch ( is_numeric_string ( Z_STRVAL ( lzval ) , Z_STRLEN ( lzval ) , & lval , & dval , 0 ) )"		1295238	3					
ANR	1295353	Condition	"is_numeric_string ( Z_STRVAL ( lzval ) , Z_STRLEN ( lzval ) , & lval , & dval , 0 )"	336:10:8476:8543	1295238	0	True				
ANR	1295354	CallExpression	"is_numeric_string ( Z_STRVAL ( lzval ) , Z_STRLEN ( lzval ) , & lval , & dval , 0 )"		1295238	0					
ANR	1295355	Callee	is_numeric_string		1295238	0					
ANR	1295356	Identifier	is_numeric_string		1295238	0					
ANR	1295357	ArgumentList	Z_STRVAL ( lzval )		1295238	1					
ANR	1295358	Argument	Z_STRVAL ( lzval )		1295238	0					
ANR	1295359	CallExpression	Z_STRVAL ( lzval )		1295238	0					
ANR	1295360	Callee	Z_STRVAL		1295238	0					
ANR	1295361	Identifier	Z_STRVAL		1295238	0					
ANR	1295362	ArgumentList	lzval		1295238	1					
ANR	1295363	Argument	lzval		1295238	0					
ANR	1295364	Identifier	lzval		1295238	0					
ANR	1295365	Argument	Z_STRLEN ( lzval )		1295238	1					
ANR	1295366	CallExpression	Z_STRLEN ( lzval )		1295238	0					
ANR	1295367	Callee	Z_STRLEN		1295238	0					
ANR	1295368	Identifier	Z_STRLEN		1295238	0					
ANR	1295369	ArgumentList	lzval		1295238	1					
ANR	1295370	Argument	lzval		1295238	0					
ANR	1295371	Identifier	lzval		1295238	0					
ANR	1295372	Argument	& lval		1295238	2					
ANR	1295373	UnaryOperationExpression	& lval		1295238	0					
ANR	1295374	UnaryOperator	&		1295238	0					
ANR	1295375	Identifier	lval		1295238	1					
ANR	1295376	Argument	& dval		1295238	3					
ANR	1295377	UnaryOperationExpression	& dval		1295238	0					
ANR	1295378	UnaryOperator	&		1295238	0					
ANR	1295379	Identifier	dval		1295238	1					
ANR	1295380	Argument	0		1295238	4					
ANR	1295381	PrimaryExpression	0		1295238	0					
ANR	1295382	CompoundStatement		30:80:572:572	1295238	1					
ANR	1295383	Label	case IS_DOUBLE :	337:2:8550:8564	1295238	0	True				
ANR	1295384	Identifier	IS_DOUBLE		1295238	0					
ANR	1295385	ExpressionStatement	zval_dtor ( & lzval )	338:3:8569:8586	1295238	1	True				
ANR	1295386	CallExpression	zval_dtor ( & lzval )		1295238	0					
ANR	1295387	Callee	zval_dtor		1295238	0					
ANR	1295388	Identifier	zval_dtor		1295238	0					
ANR	1295389	ArgumentList	& lzval		1295238	1					
ANR	1295390	Argument	& lzval		1295238	0					
ANR	1295391	UnaryOperationExpression	& lzval		1295238	0					
ANR	1295392	UnaryOperator	&		1295238	0					
ANR	1295393	Identifier	lzval		1295238	1					
ANR	1295394	ExpressionStatement	Z_TYPE ( lzval ) = IS_DOUBLE	339:3:8591:8616	1295238	2	True				
ANR	1295395	AssignmentExpression	Z_TYPE ( lzval ) = IS_DOUBLE		1295238	0		=			
ANR	1295396	CallExpression	Z_TYPE ( lzval )		1295238	0					
ANR	1295397	Callee	Z_TYPE		1295238	0					
ANR	1295398	Identifier	Z_TYPE		1295238	0					
ANR	1295399	ArgumentList	lzval		1295238	1					
ANR	1295400	Argument	lzval		1295238	0					
ANR	1295401	Identifier	lzval		1295238	0					
ANR	1295402	Identifier	IS_DOUBLE		1295238	1					
ANR	1295403	ExpressionStatement	Z_DVAL ( lzval ) = dval	340:3:8621:8641	1295238	3	True				
ANR	1295404	AssignmentExpression	Z_DVAL ( lzval ) = dval		1295238	0		=			
ANR	1295405	CallExpression	Z_DVAL ( lzval )		1295238	0					
ANR	1295406	Callee	Z_DVAL		1295238	0					
ANR	1295407	Identifier	Z_DVAL		1295238	0					
ANR	1295408	ArgumentList	lzval		1295238	1					
ANR	1295409	Argument	lzval		1295238	0					
ANR	1295410	Identifier	lzval		1295238	0					
ANR	1295411	Identifier	dval		1295238	1					
ANR	1295412	GotoStatement	goto double_case ;	341:3:8646:8662	1295238	4	True				
ANR	1295413	Identifier	double_case		1295238	0					
ANR	1295414	Label	case IS_LONG :	343:2:8667:8679	1295238	5	True				
ANR	1295415	Identifier	IS_LONG		1295238	0					
ANR	1295416	ExpressionStatement	zval_dtor ( & lzval )	344:3:8684:8701	1295238	6	True				
ANR	1295417	CallExpression	zval_dtor ( & lzval )		1295238	0					
ANR	1295418	Callee	zval_dtor		1295238	0					
ANR	1295419	Identifier	zval_dtor		1295238	0					
ANR	1295420	ArgumentList	& lzval		1295238	1					
ANR	1295421	Argument	& lzval		1295238	0					
ANR	1295422	UnaryOperationExpression	& lzval		1295238	0					
ANR	1295423	UnaryOperator	&		1295238	0					
ANR	1295424	Identifier	lzval		1295238	1					
ANR	1295425	ExpressionStatement	Z_TYPE ( lzval ) = IS_LONG	345:3:8706:8729	1295238	7	True				
ANR	1295426	AssignmentExpression	Z_TYPE ( lzval ) = IS_LONG		1295238	0		=			
ANR	1295427	CallExpression	Z_TYPE ( lzval )		1295238	0					
ANR	1295428	Callee	Z_TYPE		1295238	0					
ANR	1295429	Identifier	Z_TYPE		1295238	0					
ANR	1295430	ArgumentList	lzval		1295238	1					
ANR	1295431	Argument	lzval		1295238	0					
ANR	1295432	Identifier	lzval		1295238	0					
ANR	1295433	Identifier	IS_LONG		1295238	1					
ANR	1295434	ExpressionStatement	Z_LVAL ( lzval ) = lval	346:3:8734:8754	1295238	8	True				
ANR	1295435	AssignmentExpression	Z_LVAL ( lzval ) = lval		1295238	0		=			
ANR	1295436	CallExpression	Z_LVAL ( lzval )		1295238	0					
ANR	1295437	Callee	Z_LVAL		1295238	0					
ANR	1295438	Identifier	Z_LVAL		1295238	0					
ANR	1295439	ArgumentList	lzval		1295238	1					
ANR	1295440	Argument	lzval		1295238	0					
ANR	1295441	Identifier	lzval		1295238	0					
ANR	1295442	Identifier	lval		1295238	1					
ANR	1295443	GotoStatement	goto long_case ;	347:3:8759:8773	1295238	9	True				
ANR	1295444	Identifier	long_case		1295238	0					
ANR	1295445	Statement	do_from_zval_err	351:2:8837:8852	1295238	4	True				
ANR	1295446	Statement	(	351:18:8853:8853	1295238	5	True				
ANR	1295447	Statement	ctx	351:19:8854:8856	1295238	6	True				
ANR	1295448	Statement	","	351:22:8857:8857	1295238	7	True				
ANR	1295449	Statement	"""expected an integer, but got a non numeric """	351:24:8859:8903	1295238	8	True				
ANR	1295450	Statement	"""string (possibly from a converted object): '%s'"""	352:4:8909:8957	1295238	9	True				
ANR	1295451	Statement	","	352:53:8958:8958	1295238	10	True				
ANR	1295452	Statement	Z_STRVAL_P	352:55:8960:8969	1295238	11	True				
ANR	1295453	Statement	(	352:65:8970:8970	1295238	12	True				
ANR	1295454	Statement	arr_value	352:66:8971:8979	1295238	13	True				
ANR	1295455	Statement	)	352:75:8980:8980	1295238	14	True				
ANR	1295456	Statement	)	352:76:8981:8981	1295238	15	True				
ANR	1295457	ExpressionStatement		352:77:8982:8982	1295238	16	True				
ANR	1295458	BreakStatement	break ;	353:2:8986:8991	1295238	17	True				
ANR	1295459	Label	default :	356:1:8998:9005	1295238	11	True				
ANR	1295460	Identifier	default		1295238	0					
ANR	1295461	Statement	do_from_zval_err	357:2:9009:9024	1295238	12	True				
ANR	1295462	Statement	(	357:18:9025:9025	1295238	13	True				
ANR	1295463	Statement	ctx	357:19:9026:9028	1295238	14	True				
ANR	1295464	Statement	","	357:22:9029:9029	1295238	15	True				
ANR	1295465	Statement	"""%s"""	357:24:9031:9034	1295238	16	True				
ANR	1295466	Statement	","	357:28:9035:9035	1295238	17	True				
ANR	1295467	Statement	"""expected an integer, either of a PHP """	357:30:9037:9075	1295238	18	True				
ANR	1295468	Statement	"""integer type or of a convertible type"""	358:4:9081:9119	1295238	19	True				
ANR	1295469	Statement	)	358:43:9120:9120	1295238	20	True				
ANR	1295470	ExpressionStatement		358:44:9121:9121	1295238	21	True				
ANR	1295471	BreakStatement	break ;	359:2:9125:9130	1295238	22	True				
ANR	1295472	ExpressionStatement	zval_dtor ( & lzval )	362:1:9137:9154	1295238	4	True				
ANR	1295473	CallExpression	zval_dtor ( & lzval )		1295238	0					
ANR	1295474	Callee	zval_dtor		1295238	0					
ANR	1295475	Identifier	zval_dtor		1295238	0					
ANR	1295476	ArgumentList	& lzval		1295238	1					
ANR	1295477	Argument	& lzval		1295238	0					
ANR	1295478	UnaryOperationExpression	& lzval		1295238	0					
ANR	1295479	UnaryOperator	&		1295238	0					
ANR	1295480	Identifier	lzval		1295238	1					
ANR	1295481	ReturnStatement	return ret ;	364:1:9158:9168	1295238	5	True				
ANR	1295482	Identifier	ret		1295238	0					
ANR	1295483	ReturnType	static long		1295238	1					
ANR	1295484	Identifier	from_zval_integer_common		1295238	2					
ANR	1295485	ParameterList	"const zval * arr_value , ser_context * ctx"		1295238	3					
ANR	1295486	Parameter	const zval * arr_value	306:37:7932:7952	1295238	0	True				
ANR	1295487	ParameterType	const zval *		1295238	0					
ANR	1295488	Identifier	arr_value		1295238	1					
ANR	1295489	Parameter	ser_context * ctx	306:60:7955:7970	1295238	1	True				
ANR	1295490	ParameterType	ser_context *		1295238	0					
ANR	1295491	Identifier	ctx		1295238	1					
ANR	1295492	CFGEntryNode	ENTRY		1295238		True				
ANR	1295493	CFGExitNode	EXIT		1295238		True				
ANR	1295494	Symbol	ret		1295238						
ANR	1295495	Symbol	& lval		1295238						
ANR	1295496	Symbol	zval_used_for_init		1295238						
ANR	1295497	Symbol	ctx		1295238						
ANR	1295498	Symbol	lval		1295238						
ANR	1295499	Symbol	Z_LVAL		1295238						
ANR	1295500	Symbol	Z_TYPE		1295238						
ANR	1295501	Symbol	& lzval		1295238						
ANR	1295502	Symbol	Z_STRLEN		1295238						
ANR	1295503	Symbol	Z_TYPE_P		1295238						
ANR	1295504	Symbol	Z_DVAL		1295238						
ANR	1295505	Symbol	Z_LVAL_P		1295238						
ANR	1295506	Symbol	arr_value		1295238						
ANR	1295507	Symbol	dval		1295238						
ANR	1295508	Symbol	is_numeric_string		1295238						
ANR	1295509	Symbol	IS_LONG		1295238						
ANR	1295510	Symbol	Z_STRVAL		1295238						
ANR	1295511	Symbol	lzval		1295238						
ANR	1295512	Symbol	IS_DOUBLE		1295238						
ANR	1295513	Symbol	& dval		1295238						
ANR	1295514	Function	from_zval_write_int	366:0:9172:9572							
ANR	1295515	FunctionDef	"from_zval_write_int (const zval * arr_value , char * field , ser_context * ctx)"		1295514	0					
ANR	1295516	CompoundStatement		367:0:9251:9572	1295514	0					
ANR	1295517	IdentifierDeclStatement	long lval ;	368:1:9254:9263	1295514	0	True				
ANR	1295518	IdentifierDecl	lval		1295514	0					
ANR	1295519	IdentifierDeclType	long		1295514	0					
ANR	1295520	Identifier	lval		1295514	1					
ANR	1295521	IdentifierDeclStatement	int ival ;	369:1:9266:9274	1295514	1	True				
ANR	1295522	IdentifierDecl	ival		1295514	0					
ANR	1295523	IdentifierDeclType	int		1295514	0					
ANR	1295524	Identifier	ival		1295514	1					
ANR	1295525	ExpressionStatement	"lval = from_zval_integer_common ( arr_value , ctx )"	371:1:9278:9325	1295514	2	True				
ANR	1295526	AssignmentExpression	"lval = from_zval_integer_common ( arr_value , ctx )"		1295514	0		=			
ANR	1295527	Identifier	lval		1295514	0					
ANR	1295528	CallExpression	"from_zval_integer_common ( arr_value , ctx )"		1295514	1					
ANR	1295529	Callee	from_zval_integer_common		1295514	0					
ANR	1295530	Identifier	from_zval_integer_common		1295514	0					
ANR	1295531	ArgumentList	arr_value		1295514	1					
ANR	1295532	Argument	arr_value		1295514	0					
ANR	1295533	Identifier	arr_value		1295514	0					
ANR	1295534	Argument	ctx		1295514	1					
ANR	1295535	Identifier	ctx		1295514	0					
ANR	1295536	IfStatement	if ( ctx -> err . has_error )		1295514	3					
ANR	1295537	Condition	ctx -> err . has_error	372:5:9332:9349	1295514	0	True				
ANR	1295538	MemberAccess	ctx -> err . has_error		1295514	0					
ANR	1295539	PtrMemberAccess	ctx -> err		1295514	0					
ANR	1295540	Identifier	ctx		1295514	0					
ANR	1295541	Identifier	err		1295514	1					
ANR	1295542	Identifier	has_error		1295514	1					
ANR	1295543	CompoundStatement		6:25:100:100	1295514	1					
ANR	1295544	ReturnStatement	return ;	373:2:9356:9362	1295514	0	True				
ANR	1295545	IfStatement	if ( lval > INT_MAX || lval < INT_MIN )		1295514	4					
ANR	1295546	Condition	lval > INT_MAX || lval < INT_MIN	376:5:9373:9404	1295514	0	True				
ANR	1295547	OrExpression	lval > INT_MAX || lval < INT_MIN		1295514	0		||			
ANR	1295548	RelationalExpression	lval > INT_MAX		1295514	0		>			
ANR	1295549	Identifier	lval		1295514	0					
ANR	1295550	Identifier	INT_MAX		1295514	1					
ANR	1295551	RelationalExpression	lval < INT_MIN		1295514	1		<			
ANR	1295552	Identifier	lval		1295514	0					
ANR	1295553	Identifier	INT_MIN		1295514	1					
ANR	1295554	CompoundStatement		10:39:155:155	1295514	1					
ANR	1295555	Statement	do_from_zval_err	377:2:9411:9426	1295514	0	True				
ANR	1295556	Statement	(	377:18:9427:9427	1295514	1	True				
ANR	1295557	Statement	ctx	377:19:9428:9430	1295514	2	True				
ANR	1295558	Statement	","	377:22:9431:9431	1295514	3	True				
ANR	1295559	Statement	"""%s"""	377:24:9433:9436	1295514	4	True				
ANR	1295560	Statement	","	377:28:9437:9437	1295514	5	True				
ANR	1295561	Statement	"""given PHP integer is out of bounds """	377:30:9439:9475	1295514	6	True				
ANR	1295562	Statement	"""for a native int"""	378:4:9481:9498	1295514	7	True				
ANR	1295563	Statement	)	378:22:9499:9499	1295514	8	True				
ANR	1295564	ExpressionStatement		378:23:9500:9500	1295514	9	True				
ANR	1295565	ReturnStatement	return ;	379:2:9504:9510	1295514	10	True				
ANR	1295566	ExpressionStatement	ival = ( int ) lval	382:1:9517:9533	1295514	5	True				
ANR	1295567	AssignmentExpression	ival = ( int ) lval		1295514	0		=			
ANR	1295568	Identifier	ival		1295514	0					
ANR	1295569	CastExpression	( int ) lval		1295514	1					
ANR	1295570	CastTarget	int		1295514	0					
ANR	1295571	Identifier	lval		1295514	1					
ANR	1295572	ExpressionStatement	"memcpy ( field , & ival , sizeof ( ival ) )"	383:1:9536:9570	1295514	6	True				
ANR	1295573	CallExpression	"memcpy ( field , & ival , sizeof ( ival ) )"		1295514	0					
ANR	1295574	Callee	memcpy		1295514	0					
ANR	1295575	Identifier	memcpy		1295514	0					
ANR	1295576	ArgumentList	field		1295514	1					
ANR	1295577	Argument	field		1295514	0					
ANR	1295578	Identifier	field		1295514	0					
ANR	1295579	Argument	& ival		1295514	1					
ANR	1295580	UnaryOperationExpression	& ival		1295514	0					
ANR	1295581	UnaryOperator	&		1295514	0					
ANR	1295582	Identifier	ival		1295514	1					
ANR	1295583	Argument	sizeof ( ival )		1295514	2					
ANR	1295584	SizeofExpression	sizeof ( ival )		1295514	0					
ANR	1295585	Sizeof	sizeof		1295514	0					
ANR	1295586	SizeofOperand	ival		1295514	1					
ANR	1295587	ReturnType	void		1295514	1					
ANR	1295588	Identifier	from_zval_write_int		1295514	2					
ANR	1295589	ParameterList	"const zval * arr_value , char * field , ser_context * ctx"		1295514	3					
ANR	1295590	Parameter	const zval * arr_value	366:25:9197:9217	1295514	0	True				
ANR	1295591	ParameterType	const zval *		1295514	0					
ANR	1295592	Identifier	arr_value		1295514	1					
ANR	1295593	Parameter	char * field	366:48:9220:9230	1295514	1	True				
ANR	1295594	ParameterType	char *		1295514	0					
ANR	1295595	Identifier	field		1295514	1					
ANR	1295596	Parameter	ser_context * ctx	366:61:9233:9248	1295514	2	True				
ANR	1295597	ParameterType	ser_context *		1295514	0					
ANR	1295598	Identifier	ctx		1295514	1					
ANR	1295599	CFGEntryNode	ENTRY		1295514		True				
ANR	1295600	CFGExitNode	EXIT		1295514		True				
ANR	1295601	Symbol	arr_value		1295514						
ANR	1295602	Symbol	field		1295514						
ANR	1295603	Symbol	ctx		1295514						
ANR	1295604	Symbol	lval		1295514						
ANR	1295605	Symbol	ctx -> err . has_error		1295514						
ANR	1295606	Symbol	INT_MAX		1295514						
ANR	1295607	Symbol	ival		1295514						
ANR	1295608	Symbol	from_zval_integer_common		1295514						
ANR	1295609	Symbol	ctx -> err		1295514						
ANR	1295610	Symbol	* ctx		1295514						
ANR	1295611	Symbol	INT_MIN		1295514						
ANR	1295612	Symbol	& ival		1295514						
ANR	1295613	Function	from_zval_write_uint32	385:0:9574:10042							
ANR	1295614	FunctionDef	"from_zval_write_uint32 (const zval * arr_value , char * field , ser_context * ctx)"		1295613	0					
ANR	1295615	CompoundStatement		386:0:9663:10042	1295613	0					
ANR	1295616	IdentifierDeclStatement	long lval ;	387:1:9666:9675	1295613	0	True				
ANR	1295617	IdentifierDecl	lval		1295613	0					
ANR	1295618	IdentifierDeclType	long		1295613	0					
ANR	1295619	Identifier	lval		1295613	1					
ANR	1295620	IdentifierDeclStatement	uint32_t ival ;	388:1:9678:9691	1295613	1	True				
ANR	1295621	IdentifierDecl	ival		1295613	0					
ANR	1295622	IdentifierDeclType	uint32_t		1295613	0					
ANR	1295623	Identifier	ival		1295613	1					
ANR	1295624	ExpressionStatement	"lval = from_zval_integer_common ( arr_value , ctx )"	390:1:9695:9742	1295613	2	True				
ANR	1295625	AssignmentExpression	"lval = from_zval_integer_common ( arr_value , ctx )"		1295613	0		=			
ANR	1295626	Identifier	lval		1295613	0					
ANR	1295627	CallExpression	"from_zval_integer_common ( arr_value , ctx )"		1295613	1					
ANR	1295628	Callee	from_zval_integer_common		1295613	0					
ANR	1295629	Identifier	from_zval_integer_common		1295613	0					
ANR	1295630	ArgumentList	arr_value		1295613	1					
ANR	1295631	Argument	arr_value		1295613	0					
ANR	1295632	Identifier	arr_value		1295613	0					
ANR	1295633	Argument	ctx		1295613	1					
ANR	1295634	Identifier	ctx		1295613	0					
ANR	1295635	IfStatement	if ( ctx -> err . has_error )		1295613	3					
ANR	1295636	Condition	ctx -> err . has_error	391:5:9749:9766	1295613	0	True				
ANR	1295637	MemberAccess	ctx -> err . has_error		1295613	0					
ANR	1295638	PtrMemberAccess	ctx -> err		1295613	0					
ANR	1295639	Identifier	ctx		1295613	0					
ANR	1295640	Identifier	err		1295613	1					
ANR	1295641	Identifier	has_error		1295613	1					
ANR	1295642	CompoundStatement		6:25:105:105	1295613	1					
ANR	1295643	ReturnStatement	return ;	392:2:9773:9779	1295613	0	True				
ANR	1295644	IfStatement	if ( sizeof ( long ) > sizeof ( uint32_t ) && ( lval < 0 || lval > 0xFFFFFFFF ) )		1295613	4					
ANR	1295645	Condition	sizeof ( long ) > sizeof ( uint32_t ) && ( lval < 0 || lval > 0xFFFFFFFF )	395:5:9790:9855	1295613	0	True				
ANR	1295646	AndExpression	sizeof ( long ) > sizeof ( uint32_t ) && ( lval < 0 || lval > 0xFFFFFFFF )		1295613	0		&&			
ANR	1295647	RelationalExpression	sizeof ( long ) > sizeof ( uint32_t )		1295613	0		>			
ANR	1295648	SizeofExpression	sizeof ( long )		1295613	0					
ANR	1295649	Sizeof	sizeof		1295613	0					
ANR	1295650	SizeofOperand	long		1295613	1					
ANR	1295651	SizeofExpression	sizeof ( uint32_t )		1295613	1					
ANR	1295652	Sizeof	sizeof		1295613	0					
ANR	1295653	SizeofOperand	uint32_t		1295613	1					
ANR	1295654	OrExpression	lval < 0 || lval > 0xFFFFFFFF		1295613	1		||			
ANR	1295655	RelationalExpression	lval < 0		1295613	0		<			
ANR	1295656	Identifier	lval		1295613	0					
ANR	1295657	PrimaryExpression	0		1295613	1					
ANR	1295658	RelationalExpression	lval > 0xFFFFFFFF		1295613	1		>			
ANR	1295659	Identifier	lval		1295613	0					
ANR	1295660	PrimaryExpression	0xFFFFFFFF		1295613	1					
ANR	1295661	CompoundStatement		10:73:194:194	1295613	1					
ANR	1295662	Statement	do_from_zval_err	396:2:9862:9877	1295613	0	True				
ANR	1295663	Statement	(	396:18:9878:9878	1295613	1	True				
ANR	1295664	Statement	ctx	396:19:9879:9881	1295613	2	True				
ANR	1295665	Statement	","	396:22:9882:9882	1295613	3	True				
ANR	1295666	Statement	"""%s"""	396:24:9884:9887	1295613	4	True				
ANR	1295667	Statement	","	396:28:9888:9888	1295613	5	True				
ANR	1295668	Statement	"""given PHP integer is out of bounds """	396:30:9890:9926	1295613	6	True				
ANR	1295669	Statement	"""for an unsigned 32-bit integer"""	397:4:9932:9963	1295613	7	True				
ANR	1295670	Statement	)	397:36:9964:9964	1295613	8	True				
ANR	1295671	ExpressionStatement		397:37:9965:9965	1295613	9	True				
ANR	1295672	ReturnStatement	return ;	398:2:9969:9975	1295613	10	True				
ANR	1295673	ExpressionStatement	ival = ( uint32_t ) lval	401:1:9982:10003	1295613	5	True				
ANR	1295674	AssignmentExpression	ival = ( uint32_t ) lval		1295613	0		=			
ANR	1295675	Identifier	ival		1295613	0					
ANR	1295676	CastExpression	( uint32_t ) lval		1295613	1					
ANR	1295677	CastTarget	uint32_t		1295613	0					
ANR	1295678	Identifier	lval		1295613	1					
ANR	1295679	ExpressionStatement	"memcpy ( field , & ival , sizeof ( ival ) )"	402:1:10006:10040	1295613	6	True				
ANR	1295680	CallExpression	"memcpy ( field , & ival , sizeof ( ival ) )"		1295613	0					
ANR	1295681	Callee	memcpy		1295613	0					
ANR	1295682	Identifier	memcpy		1295613	0					
ANR	1295683	ArgumentList	field		1295613	1					
ANR	1295684	Argument	field		1295613	0					
ANR	1295685	Identifier	field		1295613	0					
ANR	1295686	Argument	& ival		1295613	1					
ANR	1295687	UnaryOperationExpression	& ival		1295613	0					
ANR	1295688	UnaryOperator	&		1295613	0					
ANR	1295689	Identifier	ival		1295613	1					
ANR	1295690	Argument	sizeof ( ival )		1295613	2					
ANR	1295691	SizeofExpression	sizeof ( ival )		1295613	0					
ANR	1295692	Sizeof	sizeof		1295613	0					
ANR	1295693	SizeofOperand	ival		1295613	1					
ANR	1295694	ReturnType	static void		1295613	1					
ANR	1295695	Identifier	from_zval_write_uint32		1295613	2					
ANR	1295696	ParameterList	"const zval * arr_value , char * field , ser_context * ctx"		1295613	3					
ANR	1295697	Parameter	const zval * arr_value	385:35:9609:9629	1295613	0	True				
ANR	1295698	ParameterType	const zval *		1295613	0					
ANR	1295699	Identifier	arr_value		1295613	1					
ANR	1295700	Parameter	char * field	385:58:9632:9642	1295613	1	True				
ANR	1295701	ParameterType	char *		1295613	0					
ANR	1295702	Identifier	field		1295613	1					
ANR	1295703	Parameter	ser_context * ctx	385:71:9645:9660	1295613	2	True				
ANR	1295704	ParameterType	ser_context *		1295613	0					
ANR	1295705	Identifier	ctx		1295613	1					
ANR	1295706	CFGEntryNode	ENTRY		1295613		True				
ANR	1295707	CFGExitNode	EXIT		1295613		True				
ANR	1295708	Symbol	arr_value		1295613						
ANR	1295709	Symbol	field		1295613						
ANR	1295710	Symbol	ctx		1295613						
ANR	1295711	Symbol	lval		1295613						
ANR	1295712	Symbol	ctx -> err . has_error		1295613						
ANR	1295713	Symbol	ival		1295613						
ANR	1295714	Symbol	from_zval_integer_common		1295613						
ANR	1295715	Symbol	ctx -> err		1295613						
ANR	1295716	Symbol	* ctx		1295613						
ANR	1295717	Symbol	& ival		1295613						
ANR	1295718	Function	from_zval_write_net_uint16	404:0:10044:10482							
ANR	1295719	FunctionDef	"from_zval_write_net_uint16 (const zval * arr_value , char * field , ser_context * ctx)"		1295718	0					
ANR	1295720	CompoundStatement		405:0:10137:10482	1295718	0					
ANR	1295721	IdentifierDeclStatement	long lval ;	406:1:10140:10149	1295718	0	True				
ANR	1295722	IdentifierDecl	lval		1295718	0					
ANR	1295723	IdentifierDeclType	long		1295718	0					
ANR	1295724	Identifier	lval		1295718	1					
ANR	1295725	IdentifierDeclStatement	uint16_t ival ;	407:1:10152:10165	1295718	1	True				
ANR	1295726	IdentifierDecl	ival		1295718	0					
ANR	1295727	IdentifierDeclType	uint16_t		1295718	0					
ANR	1295728	Identifier	ival		1295718	1					
ANR	1295729	ExpressionStatement	"lval = from_zval_integer_common ( arr_value , ctx )"	409:1:10169:10216	1295718	2	True				
ANR	1295730	AssignmentExpression	"lval = from_zval_integer_common ( arr_value , ctx )"		1295718	0		=			
ANR	1295731	Identifier	lval		1295718	0					
ANR	1295732	CallExpression	"from_zval_integer_common ( arr_value , ctx )"		1295718	1					
ANR	1295733	Callee	from_zval_integer_common		1295718	0					
ANR	1295734	Identifier	from_zval_integer_common		1295718	0					
ANR	1295735	ArgumentList	arr_value		1295718	1					
ANR	1295736	Argument	arr_value		1295718	0					
ANR	1295737	Identifier	arr_value		1295718	0					
ANR	1295738	Argument	ctx		1295718	1					
ANR	1295739	Identifier	ctx		1295718	0					
ANR	1295740	IfStatement	if ( ctx -> err . has_error )		1295718	3					
ANR	1295741	Condition	ctx -> err . has_error	410:5:10223:10240	1295718	0	True				
ANR	1295742	MemberAccess	ctx -> err . has_error		1295718	0					
ANR	1295743	PtrMemberAccess	ctx -> err		1295718	0					
ANR	1295744	Identifier	ctx		1295718	0					
ANR	1295745	Identifier	err		1295718	1					
ANR	1295746	Identifier	has_error		1295718	1					
ANR	1295747	CompoundStatement		6:25:105:105	1295718	1					
ANR	1295748	ReturnStatement	return ;	411:2:10247:10253	1295718	0	True				
ANR	1295749	IfStatement	if ( lval < 0 || lval > 0xFFFF )		1295718	4					
ANR	1295750	Condition	lval < 0 || lval > 0xFFFF	414:5:10264:10288	1295718	0	True				
ANR	1295751	OrExpression	lval < 0 || lval > 0xFFFF		1295718	0		||			
ANR	1295752	RelationalExpression	lval < 0		1295718	0		<			
ANR	1295753	Identifier	lval		1295718	0					
ANR	1295754	PrimaryExpression	0		1295718	1					
ANR	1295755	RelationalExpression	lval > 0xFFFF		1295718	1		>			
ANR	1295756	Identifier	lval		1295718	0					
ANR	1295757	PrimaryExpression	0xFFFF		1295718	1					
ANR	1295758	CompoundStatement		10:32:153:153	1295718	1					
ANR	1295759	Statement	do_from_zval_err	415:2:10295:10310	1295718	0	True				
ANR	1295760	Statement	(	415:18:10311:10311	1295718	1	True				
ANR	1295761	Statement	ctx	415:19:10312:10314	1295718	2	True				
ANR	1295762	Statement	","	415:22:10315:10315	1295718	3	True				
ANR	1295763	Statement	"""%s"""	415:24:10317:10320	1295718	4	True				
ANR	1295764	Statement	","	415:28:10321:10321	1295718	5	True				
ANR	1295765	Statement	"""given PHP integer is out of bounds """	415:30:10323:10359	1295718	6	True				
ANR	1295766	Statement	"""for an unsigned 16-bit integer"""	416:4:10365:10396	1295718	7	True				
ANR	1295767	Statement	)	416:36:10397:10397	1295718	8	True				
ANR	1295768	ExpressionStatement		416:37:10398:10398	1295718	9	True				
ANR	1295769	ReturnStatement	return ;	417:2:10402:10408	1295718	10	True				
ANR	1295770	ExpressionStatement	ival = htons ( ( uint16_t ) lval )	420:1:10415:10443	1295718	5	True				
ANR	1295771	AssignmentExpression	ival = htons ( ( uint16_t ) lval )		1295718	0		=			
ANR	1295772	Identifier	ival		1295718	0					
ANR	1295773	CallExpression	htons ( ( uint16_t ) lval )		1295718	1					
ANR	1295774	Callee	htons		1295718	0					
ANR	1295775	Identifier	htons		1295718	0					
ANR	1295776	ArgumentList	( uint16_t ) lval		1295718	1					
ANR	1295777	Argument	( uint16_t ) lval		1295718	0					
ANR	1295778	CastExpression	( uint16_t ) lval		1295718	0					
ANR	1295779	CastTarget	uint16_t		1295718	0					
ANR	1295780	Identifier	lval		1295718	1					
ANR	1295781	ExpressionStatement	"memcpy ( field , & ival , sizeof ( ival ) )"	421:1:10446:10480	1295718	6	True				
ANR	1295782	CallExpression	"memcpy ( field , & ival , sizeof ( ival ) )"		1295718	0					
ANR	1295783	Callee	memcpy		1295718	0					
ANR	1295784	Identifier	memcpy		1295718	0					
ANR	1295785	ArgumentList	field		1295718	1					
ANR	1295786	Argument	field		1295718	0					
ANR	1295787	Identifier	field		1295718	0					
ANR	1295788	Argument	& ival		1295718	1					
ANR	1295789	UnaryOperationExpression	& ival		1295718	0					
ANR	1295790	UnaryOperator	&		1295718	0					
ANR	1295791	Identifier	ival		1295718	1					
ANR	1295792	Argument	sizeof ( ival )		1295718	2					
ANR	1295793	SizeofExpression	sizeof ( ival )		1295718	0					
ANR	1295794	Sizeof	sizeof		1295718	0					
ANR	1295795	SizeofOperand	ival		1295718	1					
ANR	1295796	ReturnType	static void		1295718	1					
ANR	1295797	Identifier	from_zval_write_net_uint16		1295718	2					
ANR	1295798	ParameterList	"const zval * arr_value , char * field , ser_context * ctx"		1295718	3					
ANR	1295799	Parameter	const zval * arr_value	404:39:10083:10103	1295718	0	True				
ANR	1295800	ParameterType	const zval *		1295718	0					
ANR	1295801	Identifier	arr_value		1295718	1					
ANR	1295802	Parameter	char * field	404:62:10106:10116	1295718	1	True				
ANR	1295803	ParameterType	char *		1295718	0					
ANR	1295804	Identifier	field		1295718	1					
ANR	1295805	Parameter	ser_context * ctx	404:75:10119:10134	1295718	2	True				
ANR	1295806	ParameterType	ser_context *		1295718	0					
ANR	1295807	Identifier	ctx		1295718	1					
ANR	1295808	CFGEntryNode	ENTRY		1295718		True				
ANR	1295809	CFGExitNode	EXIT		1295718		True				
ANR	1295810	Symbol	arr_value		1295718						
ANR	1295811	Symbol	field		1295718						
ANR	1295812	Symbol	ctx		1295718						
ANR	1295813	Symbol	lval		1295718						
ANR	1295814	Symbol	htons		1295718						
ANR	1295815	Symbol	ctx -> err . has_error		1295718						
ANR	1295816	Symbol	ival		1295718						
ANR	1295817	Symbol	from_zval_integer_common		1295718						
ANR	1295818	Symbol	* ctx		1295718						
ANR	1295819	Symbol	ctx -> err		1295718						
ANR	1295820	Symbol	& ival		1295718						
ANR	1295821	Function	from_zval_write_sa_family	423:0:10484:10952							
ANR	1295822	FunctionDef	"from_zval_write_sa_family (const zval * arr_value , char * field , ser_context * ctx)"		1295821	0					
ANR	1295823	CompoundStatement		424:0:10576:10952	1295821	0					
ANR	1295824	IdentifierDeclStatement	long lval ;	425:1:10579:10588	1295821	0	True				
ANR	1295825	IdentifierDecl	lval		1295821	0					
ANR	1295826	IdentifierDeclType	long		1295821	0					
ANR	1295827	Identifier	lval		1295821	1					
ANR	1295828	IdentifierDeclStatement	sa_family_t ival ;	426:1:10591:10607	1295821	1	True				
ANR	1295829	IdentifierDecl	ival		1295821	0					
ANR	1295830	IdentifierDeclType	sa_family_t		1295821	0					
ANR	1295831	Identifier	ival		1295821	1					
ANR	1295832	ExpressionStatement	"lval = from_zval_integer_common ( arr_value , ctx )"	428:1:10611:10658	1295821	2	True				
ANR	1295833	AssignmentExpression	"lval = from_zval_integer_common ( arr_value , ctx )"		1295821	0		=			
ANR	1295834	Identifier	lval		1295821	0					
ANR	1295835	CallExpression	"from_zval_integer_common ( arr_value , ctx )"		1295821	1					
ANR	1295836	Callee	from_zval_integer_common		1295821	0					
ANR	1295837	Identifier	from_zval_integer_common		1295821	0					
ANR	1295838	ArgumentList	arr_value		1295821	1					
ANR	1295839	Argument	arr_value		1295821	0					
ANR	1295840	Identifier	arr_value		1295821	0					
ANR	1295841	Argument	ctx		1295821	1					
ANR	1295842	Identifier	ctx		1295821	0					
ANR	1295843	IfStatement	if ( ctx -> err . has_error )		1295821	3					
ANR	1295844	Condition	ctx -> err . has_error	429:5:10665:10682	1295821	0	True				
ANR	1295845	MemberAccess	ctx -> err . has_error		1295821	0					
ANR	1295846	PtrMemberAccess	ctx -> err		1295821	0					
ANR	1295847	Identifier	ctx		1295821	0					
ANR	1295848	Identifier	err		1295821	1					
ANR	1295849	Identifier	has_error		1295821	1					
ANR	1295850	CompoundStatement		6:25:108:108	1295821	1					
ANR	1295851	ReturnStatement	return ;	430:2:10689:10695	1295821	0	True				
ANR	1295852	IfStatement	if ( lval < 0 || lval > ( sa_family_t ) - 1 )		1295821	4					
ANR	1295853	Condition	lval < 0 || lval > ( sa_family_t ) - 1	433:5:10706:10739	1295821	0	True				
ANR	1295854	OrExpression	lval < 0 || lval > ( sa_family_t ) - 1		1295821	0		||			
ANR	1295855	RelationalExpression	lval < 0		1295821	0		<			
ANR	1295856	Identifier	lval		1295821	0					
ANR	1295857	PrimaryExpression	0		1295821	1					
ANR	1295858	RelationalExpression	lval > ( sa_family_t ) - 1		1295821	1		>			
ANR	1295859	Identifier	lval		1295821	0					
ANR	1295860	CastExpression	( sa_family_t ) - 1		1295821	1					
ANR	1295861	CastTarget	sa_family_t		1295821	0					
ANR	1295862	UnaryOperationExpression	- 1		1295821	1					
ANR	1295863	UnaryOperator	-		1295821	0					
ANR	1295864	PrimaryExpression	1		1295821	1					
ANR	1295865	CompoundStatement		10:41:165:165	1295821	1					
ANR	1295866	Statement	do_from_zval_err	434:2:10776:10791	1295821	0	True				
ANR	1295867	Statement	(	434:18:10792:10792	1295821	1	True				
ANR	1295868	Statement	ctx	434:19:10793:10795	1295821	2	True				
ANR	1295869	Statement	","	434:22:10796:10796	1295821	3	True				
ANR	1295870	Statement	"""%s"""	434:24:10798:10801	1295821	4	True				
ANR	1295871	Statement	","	434:28:10802:10802	1295821	5	True				
ANR	1295872	Statement	"""given PHP integer is out of bounds """	434:30:10804:10840	1295821	6	True				
ANR	1295873	Statement	"""for a sa_family_t value"""	435:4:10846:10870	1295821	7	True				
ANR	1295874	Statement	)	435:29:10871:10871	1295821	8	True				
ANR	1295875	ExpressionStatement		435:30:10872:10872	1295821	9	True				
ANR	1295876	ReturnStatement	return ;	436:2:10876:10882	1295821	10	True				
ANR	1295877	ExpressionStatement	ival = ( sa_family_t ) lval	439:1:10889:10913	1295821	5	True				
ANR	1295878	AssignmentExpression	ival = ( sa_family_t ) lval		1295821	0		=			
ANR	1295879	Identifier	ival		1295821	0					
ANR	1295880	CastExpression	( sa_family_t ) lval		1295821	1					
ANR	1295881	CastTarget	sa_family_t		1295821	0					
ANR	1295882	Identifier	lval		1295821	1					
ANR	1295883	ExpressionStatement	"memcpy ( field , & ival , sizeof ( ival ) )"	440:1:10916:10950	1295821	6	True				
ANR	1295884	CallExpression	"memcpy ( field , & ival , sizeof ( ival ) )"		1295821	0					
ANR	1295885	Callee	memcpy		1295821	0					
ANR	1295886	Identifier	memcpy		1295821	0					
ANR	1295887	ArgumentList	field		1295821	1					
ANR	1295888	Argument	field		1295821	0					
ANR	1295889	Identifier	field		1295821	0					
ANR	1295890	Argument	& ival		1295821	1					
ANR	1295891	UnaryOperationExpression	& ival		1295821	0					
ANR	1295892	UnaryOperator	&		1295821	0					
ANR	1295893	Identifier	ival		1295821	1					
ANR	1295894	Argument	sizeof ( ival )		1295821	2					
ANR	1295895	SizeofExpression	sizeof ( ival )		1295821	0					
ANR	1295896	Sizeof	sizeof		1295821	0					
ANR	1295897	SizeofOperand	ival		1295821	1					
ANR	1295898	ReturnType	static void		1295821	1					
ANR	1295899	Identifier	from_zval_write_sa_family		1295821	2					
ANR	1295900	ParameterList	"const zval * arr_value , char * field , ser_context * ctx"		1295821	3					
ANR	1295901	Parameter	const zval * arr_value	423:38:10522:10542	1295821	0	True				
ANR	1295902	ParameterType	const zval *		1295821	0					
ANR	1295903	Identifier	arr_value		1295821	1					
ANR	1295904	Parameter	char * field	423:61:10545:10555	1295821	1	True				
ANR	1295905	ParameterType	char *		1295821	0					
ANR	1295906	Identifier	field		1295821	1					
ANR	1295907	Parameter	ser_context * ctx	423:74:10558:10573	1295821	2	True				
ANR	1295908	ParameterType	ser_context *		1295821	0					
ANR	1295909	Identifier	ctx		1295821	1					
ANR	1295910	CFGEntryNode	ENTRY		1295821		True				
ANR	1295911	CFGExitNode	EXIT		1295821		True				
ANR	1295912	Symbol	arr_value		1295821						
ANR	1295913	Symbol	field		1295821						
ANR	1295914	Symbol	ctx		1295821						
ANR	1295915	Symbol	lval		1295821						
ANR	1295916	Symbol	ctx -> err . has_error		1295821						
ANR	1295917	Symbol	ival		1295821						
ANR	1295918	Symbol	from_zval_integer_common		1295821						
ANR	1295919	Symbol	* ctx		1295821						
ANR	1295920	Symbol	ctx -> err		1295821						
ANR	1295921	Symbol	& ival		1295821						
ANR	1295922	Function	from_zval_write_pid_t	442:0:10954:11389							
ANR	1295923	FunctionDef	"from_zval_write_pid_t (const zval * arr_value , char * field , ser_context * ctx)"		1295922	0					
ANR	1295924	CompoundStatement		443:0:11042:11389	1295922	0					
ANR	1295925	IdentifierDeclStatement	long lval ;	444:1:11045:11054	1295922	0	True				
ANR	1295926	IdentifierDecl	lval		1295922	0					
ANR	1295927	IdentifierDeclType	long		1295922	0					
ANR	1295928	Identifier	lval		1295922	1					
ANR	1295929	IdentifierDeclStatement	pid_t ival ;	445:1:11057:11067	1295922	1	True				
ANR	1295930	IdentifierDecl	ival		1295922	0					
ANR	1295931	IdentifierDeclType	pid_t		1295922	0					
ANR	1295932	Identifier	ival		1295922	1					
ANR	1295933	ExpressionStatement	"lval = from_zval_integer_common ( arr_value , ctx )"	447:1:11071:11118	1295922	2	True				
ANR	1295934	AssignmentExpression	"lval = from_zval_integer_common ( arr_value , ctx )"		1295922	0		=			
ANR	1295935	Identifier	lval		1295922	0					
ANR	1295936	CallExpression	"from_zval_integer_common ( arr_value , ctx )"		1295922	1					
ANR	1295937	Callee	from_zval_integer_common		1295922	0					
ANR	1295938	Identifier	from_zval_integer_common		1295922	0					
ANR	1295939	ArgumentList	arr_value		1295922	1					
ANR	1295940	Argument	arr_value		1295922	0					
ANR	1295941	Identifier	arr_value		1295922	0					
ANR	1295942	Argument	ctx		1295922	1					
ANR	1295943	Identifier	ctx		1295922	0					
ANR	1295944	IfStatement	if ( ctx -> err . has_error )		1295922	3					
ANR	1295945	Condition	ctx -> err . has_error	448:5:11125:11142	1295922	0	True				
ANR	1295946	MemberAccess	ctx -> err . has_error		1295922	0					
ANR	1295947	PtrMemberAccess	ctx -> err		1295922	0					
ANR	1295948	Identifier	ctx		1295922	0					
ANR	1295949	Identifier	err		1295922	1					
ANR	1295950	Identifier	has_error		1295922	1					
ANR	1295951	CompoundStatement		6:25:102:102	1295922	1					
ANR	1295952	ReturnStatement	return ;	449:2:11149:11155	1295922	0	True				
ANR	1295953	IfStatement	if ( lval < 0 || ( pid_t ) lval != lval )		1295922	4					
ANR	1295954	Condition	lval < 0 || ( pid_t ) lval != lval	452:5:11166:11196	1295922	0	True				
ANR	1295955	OrExpression	lval < 0 || ( pid_t ) lval != lval		1295922	0		||			
ANR	1295956	RelationalExpression	lval < 0		1295922	0		<			
ANR	1295957	Identifier	lval		1295922	0					
ANR	1295958	PrimaryExpression	0		1295922	1					
ANR	1295959	EqualityExpression	( pid_t ) lval != lval		1295922	1		!=			
ANR	1295960	CastExpression	( pid_t ) lval		1295922	0					
ANR	1295961	CastTarget	pid_t		1295922	0					
ANR	1295962	Identifier	lval		1295922	1					
ANR	1295963	Identifier	lval		1295922	1					
ANR	1295964	CompoundStatement		10:38:156:156	1295922	1					
ANR	1295965	Statement	do_from_zval_err	453:2:11225:11240	1295922	0	True				
ANR	1295966	Statement	(	453:18:11241:11241	1295922	1	True				
ANR	1295967	Statement	ctx	453:19:11242:11244	1295922	2	True				
ANR	1295968	Statement	","	453:22:11245:11245	1295922	3	True				
ANR	1295969	Statement	"""%s"""	453:24:11247:11250	1295922	4	True				
ANR	1295970	Statement	","	453:28:11251:11251	1295922	5	True				
ANR	1295971	Statement	"""given PHP integer is out of bounds """	453:30:11253:11289	1295922	6	True				
ANR	1295972	Statement	"""for a pid_t value"""	454:4:11295:11313	1295922	7	True				
ANR	1295973	Statement	)	454:23:11314:11314	1295922	8	True				
ANR	1295974	ExpressionStatement		454:24:11315:11315	1295922	9	True				
ANR	1295975	ReturnStatement	return ;	455:2:11319:11325	1295922	10	True				
ANR	1295976	ExpressionStatement	ival = ( pid_t ) lval	458:1:11332:11350	1295922	5	True				
ANR	1295977	AssignmentExpression	ival = ( pid_t ) lval		1295922	0		=			
ANR	1295978	Identifier	ival		1295922	0					
ANR	1295979	CastExpression	( pid_t ) lval		1295922	1					
ANR	1295980	CastTarget	pid_t		1295922	0					
ANR	1295981	Identifier	lval		1295922	1					
ANR	1295982	ExpressionStatement	"memcpy ( field , & ival , sizeof ( ival ) )"	459:1:11353:11387	1295922	6	True				
ANR	1295983	CallExpression	"memcpy ( field , & ival , sizeof ( ival ) )"		1295922	0					
ANR	1295984	Callee	memcpy		1295922	0					
ANR	1295985	Identifier	memcpy		1295922	0					
ANR	1295986	ArgumentList	field		1295922	1					
ANR	1295987	Argument	field		1295922	0					
ANR	1295988	Identifier	field		1295922	0					
ANR	1295989	Argument	& ival		1295922	1					
ANR	1295990	UnaryOperationExpression	& ival		1295922	0					
ANR	1295991	UnaryOperator	&		1295922	0					
ANR	1295992	Identifier	ival		1295922	1					
ANR	1295993	Argument	sizeof ( ival )		1295922	2					
ANR	1295994	SizeofExpression	sizeof ( ival )		1295922	0					
ANR	1295995	Sizeof	sizeof		1295922	0					
ANR	1295996	SizeofOperand	ival		1295922	1					
ANR	1295997	ReturnType	static void		1295922	1					
ANR	1295998	Identifier	from_zval_write_pid_t		1295922	2					
ANR	1295999	ParameterList	"const zval * arr_value , char * field , ser_context * ctx"		1295922	3					
ANR	1296000	Parameter	const zval * arr_value	442:34:10988:11008	1295922	0	True				
ANR	1296001	ParameterType	const zval *		1295922	0					
ANR	1296002	Identifier	arr_value		1295922	1					
ANR	1296003	Parameter	char * field	442:57:11011:11021	1295922	1	True				
ANR	1296004	ParameterType	char *		1295922	0					
ANR	1296005	Identifier	field		1295922	1					
ANR	1296006	Parameter	ser_context * ctx	442:70:11024:11039	1295922	2	True				
ANR	1296007	ParameterType	ser_context *		1295922	0					
ANR	1296008	Identifier	ctx		1295922	1					
ANR	1296009	CFGEntryNode	ENTRY		1295922		True				
ANR	1296010	CFGExitNode	EXIT		1295922		True				
ANR	1296011	Symbol	arr_value		1295922						
ANR	1296012	Symbol	field		1295922						
ANR	1296013	Symbol	ctx		1295922						
ANR	1296014	Symbol	lval		1295922						
ANR	1296015	Symbol	ctx -> err . has_error		1295922						
ANR	1296016	Symbol	ival		1295922						
ANR	1296017	Symbol	from_zval_integer_common		1295922						
ANR	1296018	Symbol	ctx -> err		1295922						
ANR	1296019	Symbol	* ctx		1295922						
ANR	1296020	Symbol	& ival		1295922						
ANR	1296021	Function	from_zval_write_uid_t	461:0:11391:12117							
ANR	1296022	FunctionDef	"from_zval_write_uid_t (const zval * arr_value , char * field , ser_context * ctx)"		1296021	0					
ANR	1296023	CompoundStatement		462:0:11479:12117	1296021	0					
ANR	1296024	IdentifierDeclStatement	long lval ;	463:1:11482:11491	1296021	0	True				
ANR	1296025	IdentifierDecl	lval		1296021	0					
ANR	1296026	IdentifierDeclType	long		1296021	0					
ANR	1296027	Identifier	lval		1296021	1					
ANR	1296028	IdentifierDeclStatement	uid_t ival ;	464:1:11494:11504	1296021	1	True				
ANR	1296029	IdentifierDecl	ival		1296021	0					
ANR	1296030	IdentifierDeclType	uid_t		1296021	0					
ANR	1296031	Identifier	ival		1296021	1					
ANR	1296032	ExpressionStatement	"lval = from_zval_integer_common ( arr_value , ctx )"	466:1:11508:11555	1296021	2	True				
ANR	1296033	AssignmentExpression	"lval = from_zval_integer_common ( arr_value , ctx )"		1296021	0		=			
ANR	1296034	Identifier	lval		1296021	0					
ANR	1296035	CallExpression	"from_zval_integer_common ( arr_value , ctx )"		1296021	1					
ANR	1296036	Callee	from_zval_integer_common		1296021	0					
ANR	1296037	Identifier	from_zval_integer_common		1296021	0					
ANR	1296038	ArgumentList	arr_value		1296021	1					
ANR	1296039	Argument	arr_value		1296021	0					
ANR	1296040	Identifier	arr_value		1296021	0					
ANR	1296041	Argument	ctx		1296021	1					
ANR	1296042	Identifier	ctx		1296021	0					
ANR	1296043	IfStatement	if ( ctx -> err . has_error )		1296021	3					
ANR	1296044	Condition	ctx -> err . has_error	467:5:11562:11579	1296021	0	True				
ANR	1296045	MemberAccess	ctx -> err . has_error		1296021	0					
ANR	1296046	PtrMemberAccess	ctx -> err		1296021	0					
ANR	1296047	Identifier	ctx		1296021	0					
ANR	1296048	Identifier	err		1296021	1					
ANR	1296049	Identifier	has_error		1296021	1					
ANR	1296050	CompoundStatement		6:25:102:102	1296021	1					
ANR	1296051	ReturnStatement	return ;	468:2:11586:11592	1296021	0	True				
ANR	1296052	IfStatement	if ( ( uid_t ) - 1 > ( uid_t ) 0 )		1296021	4					
ANR	1296053	Condition	( uid_t ) - 1 > ( uid_t ) 0	472:5:11663:11682	1296021	0	True				
ANR	1296054	RelationalExpression	( uid_t ) - 1 > ( uid_t ) 0		1296021	0		>			
ANR	1296055	CastExpression	( uid_t ) - 1		1296021	0					
ANR	1296056	CastTarget	uid_t		1296021	0					
ANR	1296057	UnaryOperationExpression	- 1		1296021	1					
ANR	1296058	UnaryOperator	-		1296021	0					
ANR	1296059	PrimaryExpression	1		1296021	1					
ANR	1296060	CastExpression	( uid_t ) 0		1296021	1					
ANR	1296061	CastTarget	uid_t		1296021	0					
ANR	1296062	PrimaryExpression	0		1296021	1					
ANR	1296063	CompoundStatement		11:27:205:205	1296021	1					
ANR	1296064	IfStatement	if ( sizeof ( long ) > sizeof ( uid_t ) && ( lval < 0 || ( uid_t ) lval != lval ) )		1296021	0					
ANR	1296065	Condition	sizeof ( long ) > sizeof ( uid_t ) && ( lval < 0 || ( uid_t ) lval != lval )	473:6:11693:11757	1296021	0	True				
ANR	1296066	AndExpression	sizeof ( long ) > sizeof ( uid_t ) && ( lval < 0 || ( uid_t ) lval != lval )		1296021	0		&&			
ANR	1296067	RelationalExpression	sizeof ( long ) > sizeof ( uid_t )		1296021	0		>			
ANR	1296068	SizeofExpression	sizeof ( long )		1296021	0					
ANR	1296069	Sizeof	sizeof		1296021	0					
ANR	1296070	SizeofOperand	long		1296021	1					
ANR	1296071	SizeofExpression	sizeof ( uid_t )		1296021	1					
ANR	1296072	Sizeof	sizeof		1296021	0					
ANR	1296073	SizeofOperand	uid_t		1296021	1					
ANR	1296074	OrExpression	lval < 0 || ( uid_t ) lval != lval		1296021	1		||			
ANR	1296075	RelationalExpression	lval < 0		1296021	0		<			
ANR	1296076	Identifier	lval		1296021	0					
ANR	1296077	PrimaryExpression	0		1296021	1					
ANR	1296078	EqualityExpression	( uid_t ) lval != lval		1296021	1		!=			
ANR	1296079	CastExpression	( uid_t ) lval		1296021	0					
ANR	1296080	CastTarget	uid_t		1296021	0					
ANR	1296081	Identifier	lval		1296021	1					
ANR	1296082	Identifier	lval		1296021	1					
ANR	1296083	CompoundStatement		12:73:280:280	1296021	1					
ANR	1296084	Statement	do_from_zval_err	474:3:11765:11780	1296021	0	True				
ANR	1296085	Statement	(	474:19:11781:11781	1296021	1	True				
ANR	1296086	Statement	ctx	474:20:11782:11784	1296021	2	True				
ANR	1296087	Statement	","	474:23:11785:11785	1296021	3	True				
ANR	1296088	Statement	"""%s"""	474:25:11787:11790	1296021	4	True				
ANR	1296089	Statement	","	474:29:11791:11791	1296021	5	True				
ANR	1296090	Statement	"""given PHP integer is out of bounds """	474:31:11793:11829	1296021	6	True				
ANR	1296091	Statement	"""for a uid_t value"""	475:5:11836:11854	1296021	7	True				
ANR	1296092	Statement	)	475:24:11855:11855	1296021	8	True				
ANR	1296093	ExpressionStatement		475:25:11856:11856	1296021	9	True				
ANR	1296094	ReturnStatement	return ;	476:3:11861:11867	1296021	10	True				
ANR	1296095	ElseStatement	else		1296021	0					
ANR	1296096	CompoundStatement		17:8:401:401	1296021	0					
ANR	1296097	IfStatement	if ( sizeof ( long ) > sizeof ( uid_t ) && ( uid_t ) lval != lval )		1296021	0					
ANR	1296098	Condition	sizeof ( long ) > sizeof ( uid_t ) && ( uid_t ) lval != lval	479:6:11889:11939	1296021	0	True				
ANR	1296099	AndExpression	sizeof ( long ) > sizeof ( uid_t ) && ( uid_t ) lval != lval		1296021	0		&&			
ANR	1296100	RelationalExpression	sizeof ( long ) > sizeof ( uid_t )		1296021	0		>			
ANR	1296101	SizeofExpression	sizeof ( long )		1296021	0					
ANR	1296102	Sizeof	sizeof		1296021	0					
ANR	1296103	SizeofOperand	long		1296021	1					
ANR	1296104	SizeofExpression	sizeof ( uid_t )		1296021	1					
ANR	1296105	Sizeof	sizeof		1296021	0					
ANR	1296106	SizeofOperand	uid_t		1296021	1					
ANR	1296107	EqualityExpression	( uid_t ) lval != lval		1296021	1		!=			
ANR	1296108	CastExpression	( uid_t ) lval		1296021	0					
ANR	1296109	CastTarget	uid_t		1296021	0					
ANR	1296110	Identifier	lval		1296021	1					
ANR	1296111	Identifier	lval		1296021	1					
ANR	1296112	CompoundStatement		18:59:462:462	1296021	1					
ANR	1296113	Statement	do_from_zval_err	480:3:11947:11962	1296021	0	True				
ANR	1296114	Statement	(	480:19:11963:11963	1296021	1	True				
ANR	1296115	Statement	ctx	480:20:11964:11966	1296021	2	True				
ANR	1296116	Statement	","	480:23:11967:11967	1296021	3	True				
ANR	1296117	Statement	"""%s"""	480:25:11969:11972	1296021	4	True				
ANR	1296118	Statement	","	480:29:11973:11973	1296021	5	True				
ANR	1296119	Statement	"""given PHP integer is out of bounds """	480:31:11975:12011	1296021	6	True				
ANR	1296120	Statement	"""for a uid_t value"""	481:5:12018:12036	1296021	7	True				
ANR	1296121	Statement	)	481:24:12037:12037	1296021	8	True				
ANR	1296122	ExpressionStatement		481:25:12038:12038	1296021	9	True				
ANR	1296123	ReturnStatement	return ;	482:3:12043:12049	1296021	10	True				
ANR	1296124	ExpressionStatement	ival = ( uid_t ) lval	486:1:12060:12078	1296021	5	True				
ANR	1296125	AssignmentExpression	ival = ( uid_t ) lval		1296021	0		=			
ANR	1296126	Identifier	ival		1296021	0					
ANR	1296127	CastExpression	( uid_t ) lval		1296021	1					
ANR	1296128	CastTarget	uid_t		1296021	0					
ANR	1296129	Identifier	lval		1296021	1					
ANR	1296130	ExpressionStatement	"memcpy ( field , & ival , sizeof ( ival ) )"	487:1:12081:12115	1296021	6	True				
ANR	1296131	CallExpression	"memcpy ( field , & ival , sizeof ( ival ) )"		1296021	0					
ANR	1296132	Callee	memcpy		1296021	0					
ANR	1296133	Identifier	memcpy		1296021	0					
ANR	1296134	ArgumentList	field		1296021	1					
ANR	1296135	Argument	field		1296021	0					
ANR	1296136	Identifier	field		1296021	0					
ANR	1296137	Argument	& ival		1296021	1					
ANR	1296138	UnaryOperationExpression	& ival		1296021	0					
ANR	1296139	UnaryOperator	&		1296021	0					
ANR	1296140	Identifier	ival		1296021	1					
ANR	1296141	Argument	sizeof ( ival )		1296021	2					
ANR	1296142	SizeofExpression	sizeof ( ival )		1296021	0					
ANR	1296143	Sizeof	sizeof		1296021	0					
ANR	1296144	SizeofOperand	ival		1296021	1					
ANR	1296145	ReturnType	static void		1296021	1					
ANR	1296146	Identifier	from_zval_write_uid_t		1296021	2					
ANR	1296147	ParameterList	"const zval * arr_value , char * field , ser_context * ctx"		1296021	3					
ANR	1296148	Parameter	const zval * arr_value	461:34:11425:11445	1296021	0	True				
ANR	1296149	ParameterType	const zval *		1296021	0					
ANR	1296150	Identifier	arr_value		1296021	1					
ANR	1296151	Parameter	char * field	461:57:11448:11458	1296021	1	True				
ANR	1296152	ParameterType	char *		1296021	0					
ANR	1296153	Identifier	field		1296021	1					
ANR	1296154	Parameter	ser_context * ctx	461:70:11461:11476	1296021	2	True				
ANR	1296155	ParameterType	ser_context *		1296021	0					
ANR	1296156	Identifier	ctx		1296021	1					
ANR	1296157	CFGEntryNode	ENTRY		1296021		True				
ANR	1296158	CFGExitNode	EXIT		1296021		True				
ANR	1296159	Symbol	arr_value		1296021						
ANR	1296160	Symbol	field		1296021						
ANR	1296161	Symbol	ctx		1296021						
ANR	1296162	Symbol	lval		1296021						
ANR	1296163	Symbol	ctx -> err . has_error		1296021						
ANR	1296164	Symbol	ival		1296021						
ANR	1296165	Symbol	from_zval_integer_common		1296021						
ANR	1296166	Symbol	* ctx		1296021						
ANR	1296167	Symbol	ctx -> err		1296021						
ANR	1296168	Symbol	& ival		1296021						
ANR	1296169	Function	to_zval_read_int	490:0:12120:12266							
ANR	1296170	FunctionDef	"to_zval_read_int (const char * data , zval * zv , res_context * ctx)"		1296169	0					
ANR	1296171	CompoundStatement		491:0:12188:12266	1296169	0					
ANR	1296172	IdentifierDeclStatement	int ival ;	492:1:12191:12199	1296169	0	True				
ANR	1296173	IdentifierDecl	ival		1296169	0					
ANR	1296174	IdentifierDeclType	int		1296169	0					
ANR	1296175	Identifier	ival		1296169	1					
ANR	1296176	ExpressionStatement	"memcpy ( & ival , data , sizeof ( ival ) )"	493:1:12202:12235	1296169	1	True				
ANR	1296177	CallExpression	"memcpy ( & ival , data , sizeof ( ival ) )"		1296169	0					
ANR	1296178	Callee	memcpy		1296169	0					
ANR	1296179	Identifier	memcpy		1296169	0					
ANR	1296180	ArgumentList	& ival		1296169	1					
ANR	1296181	Argument	& ival		1296169	0					
ANR	1296182	UnaryOperationExpression	& ival		1296169	0					
ANR	1296183	UnaryOperator	&		1296169	0					
ANR	1296184	Identifier	ival		1296169	1					
ANR	1296185	Argument	data		1296169	1					
ANR	1296186	Identifier	data		1296169	0					
ANR	1296187	Argument	sizeof ( ival )		1296169	2					
ANR	1296188	SizeofExpression	sizeof ( ival )		1296169	0					
ANR	1296189	Sizeof	sizeof		1296169	0					
ANR	1296190	SizeofOperand	ival		1296169	1					
ANR	1296191	ExpressionStatement	"ZVAL_LONG ( zv , ( long ) ival )"	495:1:12239:12264	1296169	2	True				
ANR	1296192	CallExpression	"ZVAL_LONG ( zv , ( long ) ival )"		1296169	0					
ANR	1296193	Callee	ZVAL_LONG		1296169	0					
ANR	1296194	Identifier	ZVAL_LONG		1296169	0					
ANR	1296195	ArgumentList	zv		1296169	1					
ANR	1296196	Argument	zv		1296169	0					
ANR	1296197	Identifier	zv		1296169	0					
ANR	1296198	Argument	( long ) ival		1296169	1					
ANR	1296199	CastExpression	( long ) ival		1296169	0					
ANR	1296200	CastTarget	long		1296169	0					
ANR	1296201	Identifier	ival		1296169	1					
ANR	1296202	ReturnType	void		1296169	1					
ANR	1296203	Identifier	to_zval_read_int		1296169	2					
ANR	1296204	ParameterList	"const char * data , zval * zv , res_context * ctx"		1296169	3					
ANR	1296205	Parameter	const char * data	490:22:12142:12157	1296169	0	True				
ANR	1296206	ParameterType	const char *		1296169	0					
ANR	1296207	Identifier	data		1296169	1					
ANR	1296208	Parameter	zval * zv	490:40:12160:12167	1296169	1	True				
ANR	1296209	ParameterType	zval *		1296169	0					
ANR	1296210	Identifier	zv		1296169	1					
ANR	1296211	Parameter	res_context * ctx	490:50:12170:12185	1296169	2	True				
ANR	1296212	ParameterType	res_context *		1296169	0					
ANR	1296213	Identifier	ctx		1296169	1					
ANR	1296214	CFGEntryNode	ENTRY		1296169		True				
ANR	1296215	CFGExitNode	EXIT		1296169		True				
ANR	1296216	Symbol	data		1296169						
ANR	1296217	Symbol	ctx		1296169						
ANR	1296218	Symbol	ival		1296169						
ANR	1296219	Symbol	zv		1296169						
ANR	1296220	Symbol	& ival		1296169						
ANR	1296221	Function	to_zval_read_unsigned	497:0:12268:12431							
ANR	1296222	FunctionDef	"to_zval_read_unsigned (const char * data , zval * zv , res_context * ctx)"		1296221	0					
ANR	1296223	CompoundStatement		498:0:12348:12431	1296221	0					
ANR	1296224	IdentifierDeclStatement	unsigned ival ;	499:1:12351:12364	1296221	0	True				
ANR	1296225	IdentifierDecl	ival		1296221	0					
ANR	1296226	IdentifierDeclType	unsigned		1296221	0					
ANR	1296227	Identifier	ival		1296221	1					
ANR	1296228	ExpressionStatement	"memcpy ( & ival , data , sizeof ( ival ) )"	500:1:12367:12400	1296221	1	True				
ANR	1296229	CallExpression	"memcpy ( & ival , data , sizeof ( ival ) )"		1296221	0					
ANR	1296230	Callee	memcpy		1296221	0					
ANR	1296231	Identifier	memcpy		1296221	0					
ANR	1296232	ArgumentList	& ival		1296221	1					
ANR	1296233	Argument	& ival		1296221	0					
ANR	1296234	UnaryOperationExpression	& ival		1296221	0					
ANR	1296235	UnaryOperator	&		1296221	0					
ANR	1296236	Identifier	ival		1296221	1					
ANR	1296237	Argument	data		1296221	1					
ANR	1296238	Identifier	data		1296221	0					
ANR	1296239	Argument	sizeof ( ival )		1296221	2					
ANR	1296240	SizeofExpression	sizeof ( ival )		1296221	0					
ANR	1296241	Sizeof	sizeof		1296221	0					
ANR	1296242	SizeofOperand	ival		1296221	1					
ANR	1296243	ExpressionStatement	"ZVAL_LONG ( zv , ( long ) ival )"	502:1:12404:12429	1296221	2	True				
ANR	1296244	CallExpression	"ZVAL_LONG ( zv , ( long ) ival )"		1296221	0					
ANR	1296245	Callee	ZVAL_LONG		1296221	0					
ANR	1296246	Identifier	ZVAL_LONG		1296221	0					
ANR	1296247	ArgumentList	zv		1296221	1					
ANR	1296248	Argument	zv		1296221	0					
ANR	1296249	Identifier	zv		1296221	0					
ANR	1296250	Argument	( long ) ival		1296221	1					
ANR	1296251	CastExpression	( long ) ival		1296221	0					
ANR	1296252	CastTarget	long		1296221	0					
ANR	1296253	Identifier	ival		1296221	1					
ANR	1296254	ReturnType	static void		1296221	1					
ANR	1296255	Identifier	to_zval_read_unsigned		1296221	2					
ANR	1296256	ParameterList	"const char * data , zval * zv , res_context * ctx"		1296221	3					
ANR	1296257	Parameter	const char * data	497:34:12302:12317	1296221	0	True				
ANR	1296258	ParameterType	const char *		1296221	0					
ANR	1296259	Identifier	data		1296221	1					
ANR	1296260	Parameter	zval * zv	497:52:12320:12327	1296221	1	True				
ANR	1296261	ParameterType	zval *		1296221	0					
ANR	1296262	Identifier	zv		1296221	1					
ANR	1296263	Parameter	res_context * ctx	497:62:12330:12345	1296221	2	True				
ANR	1296264	ParameterType	res_context *		1296221	0					
ANR	1296265	Identifier	ctx		1296221	1					
ANR	1296266	CFGEntryNode	ENTRY		1296221		True				
ANR	1296267	CFGExitNode	EXIT		1296221		True				
ANR	1296268	Symbol	data		1296221						
ANR	1296269	Symbol	ctx		1296221						
ANR	1296270	Symbol	ival		1296221						
ANR	1296271	Symbol	zv		1296221						
ANR	1296272	Symbol	& ival		1296221						
ANR	1296273	Function	to_zval_read_net_uint16	504:0:12433:12605							
ANR	1296274	FunctionDef	"to_zval_read_net_uint16 (const char * data , zval * zv , res_context * ctx)"		1296273	0					
ANR	1296275	CompoundStatement		505:0:12515:12605	1296273	0					
ANR	1296276	IdentifierDeclStatement	uint16_t ival ;	506:1:12518:12531	1296273	0	True				
ANR	1296277	IdentifierDecl	ival		1296273	0					
ANR	1296278	IdentifierDeclType	uint16_t		1296273	0					
ANR	1296279	Identifier	ival		1296273	1					
ANR	1296280	ExpressionStatement	"memcpy ( & ival , data , sizeof ( ival ) )"	507:1:12534:12567	1296273	1	True				
ANR	1296281	CallExpression	"memcpy ( & ival , data , sizeof ( ival ) )"		1296273	0					
ANR	1296282	Callee	memcpy		1296273	0					
ANR	1296283	Identifier	memcpy		1296273	0					
ANR	1296284	ArgumentList	& ival		1296273	1					
ANR	1296285	Argument	& ival		1296273	0					
ANR	1296286	UnaryOperationExpression	& ival		1296273	0					
ANR	1296287	UnaryOperator	&		1296273	0					
ANR	1296288	Identifier	ival		1296273	1					
ANR	1296289	Argument	data		1296273	1					
ANR	1296290	Identifier	data		1296273	0					
ANR	1296291	Argument	sizeof ( ival )		1296273	2					
ANR	1296292	SizeofExpression	sizeof ( ival )		1296273	0					
ANR	1296293	Sizeof	sizeof		1296273	0					
ANR	1296294	SizeofOperand	ival		1296273	1					
ANR	1296295	ExpressionStatement	"ZVAL_LONG ( zv , ( long ) ntohs ( ival ) )"	509:1:12571:12603	1296273	2	True				
ANR	1296296	CallExpression	"ZVAL_LONG ( zv , ( long ) ntohs ( ival ) )"		1296273	0					
ANR	1296297	Callee	ZVAL_LONG		1296273	0					
ANR	1296298	Identifier	ZVAL_LONG		1296273	0					
ANR	1296299	ArgumentList	zv		1296273	1					
ANR	1296300	Argument	zv		1296273	0					
ANR	1296301	Identifier	zv		1296273	0					
ANR	1296302	Argument	( long ) ntohs ( ival )		1296273	1					
ANR	1296303	CastExpression	( long ) ntohs ( ival )		1296273	0					
ANR	1296304	CastTarget	long		1296273	0					
ANR	1296305	CallExpression	ntohs ( ival )		1296273	1					
ANR	1296306	Callee	ntohs		1296273	0					
ANR	1296307	Identifier	ntohs		1296273	0					
ANR	1296308	ArgumentList	ival		1296273	1					
ANR	1296309	Argument	ival		1296273	0					
ANR	1296310	Identifier	ival		1296273	0					
ANR	1296311	ReturnType	static void		1296273	1					
ANR	1296312	Identifier	to_zval_read_net_uint16		1296273	2					
ANR	1296313	ParameterList	"const char * data , zval * zv , res_context * ctx"		1296273	3					
ANR	1296314	Parameter	const char * data	504:36:12469:12484	1296273	0	True				
ANR	1296315	ParameterType	const char *		1296273	0					
ANR	1296316	Identifier	data		1296273	1					
ANR	1296317	Parameter	zval * zv	504:54:12487:12494	1296273	1	True				
ANR	1296318	ParameterType	zval *		1296273	0					
ANR	1296319	Identifier	zv		1296273	1					
ANR	1296320	Parameter	res_context * ctx	504:64:12497:12512	1296273	2	True				
ANR	1296321	ParameterType	res_context *		1296273	0					
ANR	1296322	Identifier	ctx		1296273	1					
ANR	1296323	CFGEntryNode	ENTRY		1296273		True				
ANR	1296324	CFGExitNode	EXIT		1296273		True				
ANR	1296325	Symbol	ntohs		1296273						
ANR	1296326	Symbol	data		1296273						
ANR	1296327	Symbol	ctx		1296273						
ANR	1296328	Symbol	ival		1296273						
ANR	1296329	Symbol	zv		1296273						
ANR	1296330	Symbol	& ival		1296273						
ANR	1296331	Function	to_zval_read_uint32	511:0:12607:12768							
ANR	1296332	FunctionDef	"to_zval_read_uint32 (const char * data , zval * zv , res_context * ctx)"		1296331	0					
ANR	1296333	CompoundStatement		512:0:12685:12768	1296331	0					
ANR	1296334	IdentifierDeclStatement	uint32_t ival ;	513:1:12688:12701	1296331	0	True				
ANR	1296335	IdentifierDecl	ival		1296331	0					
ANR	1296336	IdentifierDeclType	uint32_t		1296331	0					
ANR	1296337	Identifier	ival		1296331	1					
ANR	1296338	ExpressionStatement	"memcpy ( & ival , data , sizeof ( ival ) )"	514:1:12704:12737	1296331	1	True				
ANR	1296339	CallExpression	"memcpy ( & ival , data , sizeof ( ival ) )"		1296331	0					
ANR	1296340	Callee	memcpy		1296331	0					
ANR	1296341	Identifier	memcpy		1296331	0					
ANR	1296342	ArgumentList	& ival		1296331	1					
ANR	1296343	Argument	& ival		1296331	0					
ANR	1296344	UnaryOperationExpression	& ival		1296331	0					
ANR	1296345	UnaryOperator	&		1296331	0					
ANR	1296346	Identifier	ival		1296331	1					
ANR	1296347	Argument	data		1296331	1					
ANR	1296348	Identifier	data		1296331	0					
ANR	1296349	Argument	sizeof ( ival )		1296331	2					
ANR	1296350	SizeofExpression	sizeof ( ival )		1296331	0					
ANR	1296351	Sizeof	sizeof		1296331	0					
ANR	1296352	SizeofOperand	ival		1296331	1					
ANR	1296353	ExpressionStatement	"ZVAL_LONG ( zv , ( long ) ival )"	516:1:12741:12766	1296331	2	True				
ANR	1296354	CallExpression	"ZVAL_LONG ( zv , ( long ) ival )"		1296331	0					
ANR	1296355	Callee	ZVAL_LONG		1296331	0					
ANR	1296356	Identifier	ZVAL_LONG		1296331	0					
ANR	1296357	ArgumentList	zv		1296331	1					
ANR	1296358	Argument	zv		1296331	0					
ANR	1296359	Identifier	zv		1296331	0					
ANR	1296360	Argument	( long ) ival		1296331	1					
ANR	1296361	CastExpression	( long ) ival		1296331	0					
ANR	1296362	CastTarget	long		1296331	0					
ANR	1296363	Identifier	ival		1296331	1					
ANR	1296364	ReturnType	static void		1296331	1					
ANR	1296365	Identifier	to_zval_read_uint32		1296331	2					
ANR	1296366	ParameterList	"const char * data , zval * zv , res_context * ctx"		1296331	3					
ANR	1296367	Parameter	const char * data	511:32:12639:12654	1296331	0	True				
ANR	1296368	ParameterType	const char *		1296331	0					
ANR	1296369	Identifier	data		1296331	1					
ANR	1296370	Parameter	zval * zv	511:50:12657:12664	1296331	1	True				
ANR	1296371	ParameterType	zval *		1296331	0					
ANR	1296372	Identifier	zv		1296331	1					
ANR	1296373	Parameter	res_context * ctx	511:60:12667:12682	1296331	2	True				
ANR	1296374	ParameterType	res_context *		1296331	0					
ANR	1296375	Identifier	ctx		1296331	1					
ANR	1296376	CFGEntryNode	ENTRY		1296331		True				
ANR	1296377	CFGExitNode	EXIT		1296331		True				
ANR	1296378	Symbol	data		1296331						
ANR	1296379	Symbol	ctx		1296331						
ANR	1296380	Symbol	ival		1296331						
ANR	1296381	Symbol	zv		1296331						
ANR	1296382	Symbol	& ival		1296331						
ANR	1296383	Function	to_zval_read_sa_family	518:0:12770:12937							
ANR	1296384	FunctionDef	"to_zval_read_sa_family (const char * data , zval * zv , res_context * ctx)"		1296383	0					
ANR	1296385	CompoundStatement		519:0:12851:12937	1296383	0					
ANR	1296386	IdentifierDeclStatement	sa_family_t ival ;	520:1:12854:12870	1296383	0	True				
ANR	1296387	IdentifierDecl	ival		1296383	0					
ANR	1296388	IdentifierDeclType	sa_family_t		1296383	0					
ANR	1296389	Identifier	ival		1296383	1					
ANR	1296390	ExpressionStatement	"memcpy ( & ival , data , sizeof ( ival ) )"	521:1:12873:12906	1296383	1	True				
ANR	1296391	CallExpression	"memcpy ( & ival , data , sizeof ( ival ) )"		1296383	0					
ANR	1296392	Callee	memcpy		1296383	0					
ANR	1296393	Identifier	memcpy		1296383	0					
ANR	1296394	ArgumentList	& ival		1296383	1					
ANR	1296395	Argument	& ival		1296383	0					
ANR	1296396	UnaryOperationExpression	& ival		1296383	0					
ANR	1296397	UnaryOperator	&		1296383	0					
ANR	1296398	Identifier	ival		1296383	1					
ANR	1296399	Argument	data		1296383	1					
ANR	1296400	Identifier	data		1296383	0					
ANR	1296401	Argument	sizeof ( ival )		1296383	2					
ANR	1296402	SizeofExpression	sizeof ( ival )		1296383	0					
ANR	1296403	Sizeof	sizeof		1296383	0					
ANR	1296404	SizeofOperand	ival		1296383	1					
ANR	1296405	ExpressionStatement	"ZVAL_LONG ( zv , ( long ) ival )"	523:1:12910:12935	1296383	2	True				
ANR	1296406	CallExpression	"ZVAL_LONG ( zv , ( long ) ival )"		1296383	0					
ANR	1296407	Callee	ZVAL_LONG		1296383	0					
ANR	1296408	Identifier	ZVAL_LONG		1296383	0					
ANR	1296409	ArgumentList	zv		1296383	1					
ANR	1296410	Argument	zv		1296383	0					
ANR	1296411	Identifier	zv		1296383	0					
ANR	1296412	Argument	( long ) ival		1296383	1					
ANR	1296413	CastExpression	( long ) ival		1296383	0					
ANR	1296414	CastTarget	long		1296383	0					
ANR	1296415	Identifier	ival		1296383	1					
ANR	1296416	ReturnType	static void		1296383	1					
ANR	1296417	Identifier	to_zval_read_sa_family		1296383	2					
ANR	1296418	ParameterList	"const char * data , zval * zv , res_context * ctx"		1296383	3					
ANR	1296419	Parameter	const char * data	518:35:12805:12820	1296383	0	True				
ANR	1296420	ParameterType	const char *		1296383	0					
ANR	1296421	Identifier	data		1296383	1					
ANR	1296422	Parameter	zval * zv	518:53:12823:12830	1296383	1	True				
ANR	1296423	ParameterType	zval *		1296383	0					
ANR	1296424	Identifier	zv		1296383	1					
ANR	1296425	Parameter	res_context * ctx	518:63:12833:12848	1296383	2	True				
ANR	1296426	ParameterType	res_context *		1296383	0					
ANR	1296427	Identifier	ctx		1296383	1					
ANR	1296428	CFGEntryNode	ENTRY		1296383		True				
ANR	1296429	CFGExitNode	EXIT		1296383		True				
ANR	1296430	Symbol	data		1296383						
ANR	1296431	Symbol	ctx		1296383						
ANR	1296432	Symbol	ival		1296383						
ANR	1296433	Symbol	zv		1296383						
ANR	1296434	Symbol	& ival		1296383						
ANR	1296435	Function	to_zval_read_pid_t	525:0:12939:13096							
ANR	1296436	FunctionDef	"to_zval_read_pid_t (const char * data , zval * zv , res_context * ctx)"		1296435	0					
ANR	1296437	CompoundStatement		526:0:13016:13096	1296435	0					
ANR	1296438	IdentifierDeclStatement	pid_t ival ;	527:1:13019:13029	1296435	0	True				
ANR	1296439	IdentifierDecl	ival		1296435	0					
ANR	1296440	IdentifierDeclType	pid_t		1296435	0					
ANR	1296441	Identifier	ival		1296435	1					
ANR	1296442	ExpressionStatement	"memcpy ( & ival , data , sizeof ( ival ) )"	528:1:13032:13065	1296435	1	True				
ANR	1296443	CallExpression	"memcpy ( & ival , data , sizeof ( ival ) )"		1296435	0					
ANR	1296444	Callee	memcpy		1296435	0					
ANR	1296445	Identifier	memcpy		1296435	0					
ANR	1296446	ArgumentList	& ival		1296435	1					
ANR	1296447	Argument	& ival		1296435	0					
ANR	1296448	UnaryOperationExpression	& ival		1296435	0					
ANR	1296449	UnaryOperator	&		1296435	0					
ANR	1296450	Identifier	ival		1296435	1					
ANR	1296451	Argument	data		1296435	1					
ANR	1296452	Identifier	data		1296435	0					
ANR	1296453	Argument	sizeof ( ival )		1296435	2					
ANR	1296454	SizeofExpression	sizeof ( ival )		1296435	0					
ANR	1296455	Sizeof	sizeof		1296435	0					
ANR	1296456	SizeofOperand	ival		1296435	1					
ANR	1296457	ExpressionStatement	"ZVAL_LONG ( zv , ( long ) ival )"	530:1:13069:13094	1296435	2	True				
ANR	1296458	CallExpression	"ZVAL_LONG ( zv , ( long ) ival )"		1296435	0					
ANR	1296459	Callee	ZVAL_LONG		1296435	0					
ANR	1296460	Identifier	ZVAL_LONG		1296435	0					
ANR	1296461	ArgumentList	zv		1296435	1					
ANR	1296462	Argument	zv		1296435	0					
ANR	1296463	Identifier	zv		1296435	0					
ANR	1296464	Argument	( long ) ival		1296435	1					
ANR	1296465	CastExpression	( long ) ival		1296435	0					
ANR	1296466	CastTarget	long		1296435	0					
ANR	1296467	Identifier	ival		1296435	1					
ANR	1296468	ReturnType	static void		1296435	1					
ANR	1296469	Identifier	to_zval_read_pid_t		1296435	2					
ANR	1296470	ParameterList	"const char * data , zval * zv , res_context * ctx"		1296435	3					
ANR	1296471	Parameter	const char * data	525:31:12970:12985	1296435	0	True				
ANR	1296472	ParameterType	const char *		1296435	0					
ANR	1296473	Identifier	data		1296435	1					
ANR	1296474	Parameter	zval * zv	525:49:12988:12995	1296435	1	True				
ANR	1296475	ParameterType	zval *		1296435	0					
ANR	1296476	Identifier	zv		1296435	1					
ANR	1296477	Parameter	res_context * ctx	525:59:12998:13013	1296435	2	True				
ANR	1296478	ParameterType	res_context *		1296435	0					
ANR	1296479	Identifier	ctx		1296435	1					
ANR	1296480	CFGEntryNode	ENTRY		1296435		True				
ANR	1296481	CFGExitNode	EXIT		1296435		True				
ANR	1296482	Symbol	data		1296435						
ANR	1296483	Symbol	ctx		1296435						
ANR	1296484	Symbol	ival		1296435						
ANR	1296485	Symbol	zv		1296435						
ANR	1296486	Symbol	& ival		1296435						
ANR	1296487	Function	to_zval_read_uid_t	532:0:13098:13255							
ANR	1296488	FunctionDef	"to_zval_read_uid_t (const char * data , zval * zv , res_context * ctx)"		1296487	0					
ANR	1296489	CompoundStatement		533:0:13175:13255	1296487	0					
ANR	1296490	IdentifierDeclStatement	uid_t ival ;	534:1:13178:13188	1296487	0	True				
ANR	1296491	IdentifierDecl	ival		1296487	0					
ANR	1296492	IdentifierDeclType	uid_t		1296487	0					
ANR	1296493	Identifier	ival		1296487	1					
ANR	1296494	ExpressionStatement	"memcpy ( & ival , data , sizeof ( ival ) )"	535:1:13191:13224	1296487	1	True				
ANR	1296495	CallExpression	"memcpy ( & ival , data , sizeof ( ival ) )"		1296487	0					
ANR	1296496	Callee	memcpy		1296487	0					
ANR	1296497	Identifier	memcpy		1296487	0					
ANR	1296498	ArgumentList	& ival		1296487	1					
ANR	1296499	Argument	& ival		1296487	0					
ANR	1296500	UnaryOperationExpression	& ival		1296487	0					
ANR	1296501	UnaryOperator	&		1296487	0					
ANR	1296502	Identifier	ival		1296487	1					
ANR	1296503	Argument	data		1296487	1					
ANR	1296504	Identifier	data		1296487	0					
ANR	1296505	Argument	sizeof ( ival )		1296487	2					
ANR	1296506	SizeofExpression	sizeof ( ival )		1296487	0					
ANR	1296507	Sizeof	sizeof		1296487	0					
ANR	1296508	SizeofOperand	ival		1296487	1					
ANR	1296509	ExpressionStatement	"ZVAL_LONG ( zv , ( long ) ival )"	537:1:13228:13253	1296487	2	True				
ANR	1296510	CallExpression	"ZVAL_LONG ( zv , ( long ) ival )"		1296487	0					
ANR	1296511	Callee	ZVAL_LONG		1296487	0					
ANR	1296512	Identifier	ZVAL_LONG		1296487	0					
ANR	1296513	ArgumentList	zv		1296487	1					
ANR	1296514	Argument	zv		1296487	0					
ANR	1296515	Identifier	zv		1296487	0					
ANR	1296516	Argument	( long ) ival		1296487	1					
ANR	1296517	CastExpression	( long ) ival		1296487	0					
ANR	1296518	CastTarget	long		1296487	0					
ANR	1296519	Identifier	ival		1296487	1					
ANR	1296520	ReturnType	static void		1296487	1					
ANR	1296521	Identifier	to_zval_read_uid_t		1296487	2					
ANR	1296522	ParameterList	"const char * data , zval * zv , res_context * ctx"		1296487	3					
ANR	1296523	Parameter	const char * data	532:31:13129:13144	1296487	0	True				
ANR	1296524	ParameterType	const char *		1296487	0					
ANR	1296525	Identifier	data		1296487	1					
ANR	1296526	Parameter	zval * zv	532:49:13147:13154	1296487	1	True				
ANR	1296527	ParameterType	zval *		1296487	0					
ANR	1296528	Identifier	zv		1296487	1					
ANR	1296529	Parameter	res_context * ctx	532:59:13157:13172	1296487	2	True				
ANR	1296530	ParameterType	res_context *		1296487	0					
ANR	1296531	Identifier	ctx		1296487	1					
ANR	1296532	CFGEntryNode	ENTRY		1296487		True				
ANR	1296533	CFGExitNode	EXIT		1296487		True				
ANR	1296534	Symbol	data		1296487						
ANR	1296535	Symbol	ctx		1296487						
ANR	1296536	Symbol	ival		1296487						
ANR	1296537	Symbol	zv		1296487						
ANR	1296538	Symbol	& ival		1296487						
ANR	1296539	Function	from_zval_write_sin_addr	541:0:13289:14010							
ANR	1296540	FunctionDef	"from_zval_write_sin_addr (const zval * zaddr_str , char * inaddr , ser_context * ctx)"		1296539	0					
ANR	1296541	CompoundStatement		542:0:13381:14010	1296539	0					
ANR	1296542	IdentifierDeclStatement	int res ;	543:1:13384:13395	1296539	0	True				
ANR	1296543	IdentifierDecl	res		1296539	0					
ANR	1296544	IdentifierDeclType	int		1296539	0					
ANR	1296545	Identifier	res		1296539	1					
ANR	1296546	IdentifierDeclStatement	struct sockaddr_in saddr = { 0 } ;	544:1:13398:13428	1296539	1	True				
ANR	1296547	IdentifierDecl	saddr = { 0 }		1296539	0					
ANR	1296548	IdentifierDeclType	struct sockaddr_in		1296539	0					
ANR	1296549	Identifier	saddr		1296539	1					
ANR	1296550	AssignmentExpression	saddr = { 0 }		1296539	2		=			
ANR	1296551	Identifier	saddr		1296539	0					
ANR	1296552	InitializerList	0		1296539	1					
ANR	1296553	PrimaryExpression	0		1296539	0					
ANR	1296554	IdentifierDeclStatement	zval lzval = zval_used_for_init ;	545:1:13431:13465	1296539	2	True				
ANR	1296555	IdentifierDecl	lzval = zval_used_for_init		1296539	0					
ANR	1296556	IdentifierDeclType	zval		1296539	0					
ANR	1296557	Identifier	lzval		1296539	1					
ANR	1296558	AssignmentExpression	lzval = zval_used_for_init		1296539	2		=			
ANR	1296559	Identifier	zval_used_for_init		1296539	0					
ANR	1296560	Identifier	zval_used_for_init		1296539	1					
ANR	1296561	ExpressionStatement	TSRMLS_FETCH ( )	546:1:13468:13482	1296539	3	True				
ANR	1296562	CallExpression	TSRMLS_FETCH ( )		1296539	0					
ANR	1296563	Callee	TSRMLS_FETCH		1296539	0					
ANR	1296564	Identifier	TSRMLS_FETCH		1296539	0					
ANR	1296565	ArgumentList			1296539	1					
ANR	1296566	IfStatement	if ( Z_TYPE_P ( zaddr_str ) != IS_STRING )		1296539	4					
ANR	1296567	Condition	Z_TYPE_P ( zaddr_str ) != IS_STRING	548:5:13490:13521	1296539	0	True				
ANR	1296568	EqualityExpression	Z_TYPE_P ( zaddr_str ) != IS_STRING		1296539	0		!=			
ANR	1296569	CallExpression	Z_TYPE_P ( zaddr_str )		1296539	0					
ANR	1296570	Callee	Z_TYPE_P		1296539	0					
ANR	1296571	Identifier	Z_TYPE_P		1296539	0					
ANR	1296572	ArgumentList	zaddr_str		1296539	1					
ANR	1296573	Argument	zaddr_str		1296539	0					
ANR	1296574	Identifier	zaddr_str		1296539	0					
ANR	1296575	Identifier	IS_STRING		1296539	1					
ANR	1296576	CompoundStatement		7:39:142:142	1296539	1					
ANR	1296577	ExpressionStatement	"ZVAL_COPY_VALUE ( & lzval , zaddr_str )"	549:2:13528:13562	1296539	0	True				
ANR	1296578	CallExpression	"ZVAL_COPY_VALUE ( & lzval , zaddr_str )"		1296539	0					
ANR	1296579	Callee	ZVAL_COPY_VALUE		1296539	0					
ANR	1296580	Identifier	ZVAL_COPY_VALUE		1296539	0					
ANR	1296581	ArgumentList	& lzval		1296539	1					
ANR	1296582	Argument	& lzval		1296539	0					
ANR	1296583	UnaryOperationExpression	& lzval		1296539	0					
ANR	1296584	UnaryOperator	&		1296539	0					
ANR	1296585	Identifier	lzval		1296539	1					
ANR	1296586	Argument	zaddr_str		1296539	1					
ANR	1296587	Identifier	zaddr_str		1296539	0					
ANR	1296588	ExpressionStatement	zval_copy_ctor ( & lzval )	550:2:13566:13588	1296539	1	True				
ANR	1296589	CallExpression	zval_copy_ctor ( & lzval )		1296539	0					
ANR	1296590	Callee	zval_copy_ctor		1296539	0					
ANR	1296591	Identifier	zval_copy_ctor		1296539	0					
ANR	1296592	ArgumentList	& lzval		1296539	1					
ANR	1296593	Argument	& lzval		1296539	0					
ANR	1296594	UnaryOperationExpression	& lzval		1296539	0					
ANR	1296595	UnaryOperator	&		1296539	0					
ANR	1296596	Identifier	lzval		1296539	1					
ANR	1296597	ExpressionStatement	convert_to_string ( & lzval )	551:2:13592:13617	1296539	2	True				
ANR	1296598	CallExpression	convert_to_string ( & lzval )		1296539	0					
ANR	1296599	Callee	convert_to_string		1296539	0					
ANR	1296600	Identifier	convert_to_string		1296539	0					
ANR	1296601	ArgumentList	& lzval		1296539	1					
ANR	1296602	Argument	& lzval		1296539	0					
ANR	1296603	UnaryOperationExpression	& lzval		1296539	0					
ANR	1296604	UnaryOperator	&		1296539	0					
ANR	1296605	Identifier	lzval		1296539	1					
ANR	1296606	ExpressionStatement	zaddr_str = & lzval	552:2:13621:13639	1296539	3	True				
ANR	1296607	AssignmentExpression	zaddr_str = & lzval		1296539	0		=			
ANR	1296608	Identifier	zaddr_str		1296539	0					
ANR	1296609	UnaryOperationExpression	& lzval		1296539	1					
ANR	1296610	UnaryOperator	&		1296539	0					
ANR	1296611	Identifier	lzval		1296539	1					
ANR	1296612	Statement	res	555:1:13646:13648	1296539	5	True				
ANR	1296613	Statement	=	555:5:13650:13650	1296539	6	True				
ANR	1296614	Statement	php_set_inet_addr	555:7:13652:13668	1296539	7	True				
ANR	1296615	Statement	(	555:24:13669:13669	1296539	8	True				
ANR	1296616	Statement	&	555:25:13670:13670	1296539	9	True				
ANR	1296617	Statement	saddr	555:26:13671:13675	1296539	10	True				
ANR	1296618	Statement	","	555:31:13676:13676	1296539	11	True				
ANR	1296619	Statement	Z_STRVAL_P	555:33:13678:13687	1296539	12	True				
ANR	1296620	Statement	(	555:43:13688:13688	1296539	13	True				
ANR	1296621	Statement	zaddr_str	555:44:13689:13697	1296539	14	True				
ANR	1296622	Statement	)	555:53:13698:13698	1296539	15	True				
ANR	1296623	Statement	","	555:54:13699:13699	1296539	16	True				
ANR	1296624	Statement	ctx	555:56:13701:13703	1296539	17	True				
ANR	1296625	Statement	->	555:59:13704:13705	1296539	18	True				
ANR	1296626	Statement	sock	555:61:13706:13709	1296539	19	True				
ANR	1296627	Statement	TSRMLS_CC	555:66:13711:13719	1296539	20	True				
ANR	1296628	Statement	)	555:75:13720:13720	1296539	21	True				
ANR	1296629	ExpressionStatement		555:76:13721:13721	1296539	22	True				
ANR	1296630	IfStatement	if ( res )		1296539	23					
ANR	1296631	Condition	res	556:5:13728:13730	1296539	0	True				
ANR	1296632	Identifier	res		1296539	0					
ANR	1296633	CompoundStatement		15:10:351:351	1296539	1					
ANR	1296634	ExpressionStatement	"memcpy ( inaddr , & saddr . sin_addr , sizeof saddr . sin_addr )"	557:2:13737:13791	1296539	0	True				
ANR	1296635	CallExpression	"memcpy ( inaddr , & saddr . sin_addr , sizeof saddr . sin_addr )"		1296539	0					
ANR	1296636	Callee	memcpy		1296539	0					
ANR	1296637	Identifier	memcpy		1296539	0					
ANR	1296638	ArgumentList	inaddr		1296539	1					
ANR	1296639	Argument	inaddr		1296539	0					
ANR	1296640	Identifier	inaddr		1296539	0					
ANR	1296641	Argument	& saddr . sin_addr		1296539	1					
ANR	1296642	UnaryOperationExpression	& saddr . sin_addr		1296539	0					
ANR	1296643	UnaryOperator	&		1296539	0					
ANR	1296644	MemberAccess	saddr . sin_addr		1296539	1					
ANR	1296645	Identifier	saddr		1296539	0					
ANR	1296646	Identifier	sin_addr		1296539	1					
ANR	1296647	Argument	sizeof saddr . sin_addr		1296539	2					
ANR	1296648	SizeofExpression	sizeof saddr . sin_addr		1296539	0					
ANR	1296649	Sizeof	sizeof		1296539	0					
ANR	1296650	MemberAccess	saddr . sin_addr		1296539	1					
ANR	1296651	Identifier	saddr		1296539	0					
ANR	1296652	Identifier	sin_addr		1296539	1					
ANR	1296653	ElseStatement	else		1296539	0					
ANR	1296654	CompoundStatement		17:8:419:419	1296539	0					
ANR	1296655	Statement	do_from_zval_err	560:2:13873:13888	1296539	0	True				
ANR	1296656	Statement	(	560:18:13889:13889	1296539	1	True				
ANR	1296657	Statement	ctx	560:19:13890:13892	1296539	2	True				
ANR	1296658	Statement	","	560:22:13893:13893	1296539	3	True				
ANR	1296659	Statement	"""could not resolve address '%s' to get an AF_INET """	560:24:13895:13945	1296539	4	True				
ANR	1296660	Statement	"""address"""	561:4:13951:13959	1296539	5	True				
ANR	1296661	Statement	","	561:13:13960:13960	1296539	6	True				
ANR	1296662	Statement	Z_STRVAL_P	561:15:13962:13971	1296539	7	True				
ANR	1296663	Statement	(	561:25:13972:13972	1296539	8	True				
ANR	1296664	Statement	zaddr_str	561:26:13973:13981	1296539	9	True				
ANR	1296665	Statement	)	561:35:13982:13982	1296539	10	True				
ANR	1296666	Statement	)	561:36:13983:13983	1296539	11	True				
ANR	1296667	ExpressionStatement		561:37:13984:13984	1296539	12	True				
ANR	1296668	ExpressionStatement	zval_dtor ( & lzval )	564:1:13991:14008	1296539	24	True				
ANR	1296669	CallExpression	zval_dtor ( & lzval )		1296539	0					
ANR	1296670	Callee	zval_dtor		1296539	0					
ANR	1296671	Identifier	zval_dtor		1296539	0					
ANR	1296672	ArgumentList	& lzval		1296539	1					
ANR	1296673	Argument	& lzval		1296539	0					
ANR	1296674	UnaryOperationExpression	& lzval		1296539	0					
ANR	1296675	UnaryOperator	&		1296539	0					
ANR	1296676	Identifier	lzval		1296539	1					
ANR	1296677	ReturnType	static void		1296539	1					
ANR	1296678	Identifier	from_zval_write_sin_addr		1296539	2					
ANR	1296679	ParameterList	"const zval * zaddr_str , char * inaddr , ser_context * ctx"		1296539	3					
ANR	1296680	Parameter	const zval * zaddr_str	541:37:13326:13346	1296539	0	True				
ANR	1296681	ParameterType	const zval *		1296539	0					
ANR	1296682	Identifier	zaddr_str		1296539	1					
ANR	1296683	Parameter	char * inaddr	541:60:13349:13360	1296539	1	True				
ANR	1296684	ParameterType	char *		1296539	0					
ANR	1296685	Identifier	inaddr		1296539	1					
ANR	1296686	Parameter	ser_context * ctx	541:74:13363:13378	1296539	2	True				
ANR	1296687	ParameterType	ser_context *		1296539	0					
ANR	1296688	Identifier	ctx		1296539	1					
ANR	1296689	CFGEntryNode	ENTRY		1296539		True				
ANR	1296690	CFGExitNode	EXIT		1296539		True				
ANR	1296691	Symbol	& saddr		1296539						
ANR	1296692	Symbol	res		1296539						
ANR	1296693	Symbol	& saddr . sin_addr		1296539						
ANR	1296694	Symbol	zval_used_for_init		1296539						
ANR	1296695	Symbol	ctx		1296539						
ANR	1296696	Symbol	saddr		1296539						
ANR	1296697	Symbol	saddr . sin_addr		1296539						
ANR	1296698	Symbol	& lzval		1296539						
ANR	1296699	Symbol	zaddr_str		1296539						
ANR	1296700	Symbol	Z_TYPE_P		1296539						
ANR	1296701	Symbol	lzval		1296539						
ANR	1296702	Symbol	IS_STRING		1296539						
ANR	1296703	Symbol	inaddr		1296539						
ANR	1296704	Function	to_zval_read_sin_addr	566:0:14012:14486							
ANR	1296705	FunctionDef	"to_zval_read_sin_addr (const char * data , zval * zv , res_context * ctx)"		1296704	0					
ANR	1296706	CompoundStatement		567:0:14092:14486	1296704	0					
ANR	1296707	IdentifierDeclStatement	const struct in_addr * addr = ( const struct in_addr * ) data ;	568:1:14095:14152	1296704	0	True				
ANR	1296708	IdentifierDecl	* addr = ( const struct in_addr * ) data		1296704	0					
ANR	1296709	IdentifierDeclType	const struct in_addr *		1296704	0					
ANR	1296710	Identifier	addr		1296704	1					
ANR	1296711	AssignmentExpression	* addr = ( const struct in_addr * ) data		1296704	2		=			
ANR	1296712	Identifier	addr		1296704	0					
ANR	1296713	CastExpression	( const struct in_addr * ) data		1296704	1					
ANR	1296714	CastTarget	const struct in_addr *		1296704	0					
ANR	1296715	Identifier	data		1296704	1					
ANR	1296716	IdentifierDeclStatement	socklen_t size = INET_ADDRSTRLEN ;	569:1:14155:14187	1296704	1	True				
ANR	1296717	IdentifierDecl	size = INET_ADDRSTRLEN		1296704	0					
ANR	1296718	IdentifierDeclType	socklen_t		1296704	0					
ANR	1296719	Identifier	size		1296704	1					
ANR	1296720	AssignmentExpression	size = INET_ADDRSTRLEN		1296704	2		=			
ANR	1296721	Identifier	INET_ADDRSTRLEN		1296704	0					
ANR	1296722	Identifier	INET_ADDRSTRLEN		1296704	1					
ANR	1296723	ExpressionStatement	Z_TYPE_P ( zv ) = IS_STRING	571:1:14191:14215	1296704	2	True				
ANR	1296724	AssignmentExpression	Z_TYPE_P ( zv ) = IS_STRING		1296704	0		=			
ANR	1296725	CallExpression	Z_TYPE_P ( zv )		1296704	0					
ANR	1296726	Callee	Z_TYPE_P		1296704	0					
ANR	1296727	Identifier	Z_TYPE_P		1296704	0					
ANR	1296728	ArgumentList	zv		1296704	1					
ANR	1296729	Argument	zv		1296704	0					
ANR	1296730	Identifier	zv		1296704	0					
ANR	1296731	Identifier	IS_STRING		1296704	1					
ANR	1296732	ExpressionStatement	"Z_STRVAL_P ( zv ) = ecalloc ( 1 , size )"	572:1:14218:14251	1296704	3	True				
ANR	1296733	AssignmentExpression	"Z_STRVAL_P ( zv ) = ecalloc ( 1 , size )"		1296704	0		=			
ANR	1296734	CallExpression	Z_STRVAL_P ( zv )		1296704	0					
ANR	1296735	Callee	Z_STRVAL_P		1296704	0					
ANR	1296736	Identifier	Z_STRVAL_P		1296704	0					
ANR	1296737	ArgumentList	zv		1296704	1					
ANR	1296738	Argument	zv		1296704	0					
ANR	1296739	Identifier	zv		1296704	0					
ANR	1296740	CallExpression	"ecalloc ( 1 , size )"		1296704	1					
ANR	1296741	Callee	ecalloc		1296704	0					
ANR	1296742	Identifier	ecalloc		1296704	0					
ANR	1296743	ArgumentList	1		1296704	1					
ANR	1296744	Argument	1		1296704	0					
ANR	1296745	PrimaryExpression	1		1296704	0					
ANR	1296746	Argument	size		1296704	1					
ANR	1296747	Identifier	size		1296704	0					
ANR	1296748	ExpressionStatement	Z_STRLEN_P ( zv ) = 0	573:1:14254:14272	1296704	4	True				
ANR	1296749	AssignmentExpression	Z_STRLEN_P ( zv ) = 0		1296704	0		=			
ANR	1296750	CallExpression	Z_STRLEN_P ( zv )		1296704	0					
ANR	1296751	Callee	Z_STRLEN_P		1296704	0					
ANR	1296752	Identifier	Z_STRLEN_P		1296704	0					
ANR	1296753	ArgumentList	zv		1296704	1					
ANR	1296754	Argument	zv		1296704	0					
ANR	1296755	Identifier	zv		1296704	0					
ANR	1296756	PrimaryExpression	0		1296704	1					
ANR	1296757	IfStatement	"if ( inet_ntop ( AF_INET , addr , Z_STRVAL_P ( zv ) , size ) == NULL )"		1296704	5					
ANR	1296758	Condition	"inet_ntop ( AF_INET , addr , Z_STRVAL_P ( zv ) , size ) == NULL"	575:5:14280:14333	1296704	0	True				
ANR	1296759	EqualityExpression	"inet_ntop ( AF_INET , addr , Z_STRVAL_P ( zv ) , size ) == NULL"		1296704	0		==			
ANR	1296760	CallExpression	"inet_ntop ( AF_INET , addr , Z_STRVAL_P ( zv ) , size )"		1296704	0					
ANR	1296761	Callee	inet_ntop		1296704	0					
ANR	1296762	Identifier	inet_ntop		1296704	0					
ANR	1296763	ArgumentList	AF_INET		1296704	1					
ANR	1296764	Argument	AF_INET		1296704	0					
ANR	1296765	Identifier	AF_INET		1296704	0					
ANR	1296766	Argument	addr		1296704	1					
ANR	1296767	Identifier	addr		1296704	0					
ANR	1296768	Argument	Z_STRVAL_P ( zv )		1296704	2					
ANR	1296769	CallExpression	Z_STRVAL_P ( zv )		1296704	0					
ANR	1296770	Callee	Z_STRVAL_P		1296704	0					
ANR	1296771	Identifier	Z_STRVAL_P		1296704	0					
ANR	1296772	ArgumentList	zv		1296704	1					
ANR	1296773	Argument	zv		1296704	0					
ANR	1296774	Identifier	zv		1296704	0					
ANR	1296775	Argument	size		1296704	3					
ANR	1296776	Identifier	size		1296704	0					
ANR	1296777	Identifier	NULL		1296704	1					
ANR	1296778	CompoundStatement		9:61:243:243	1296704	1					
ANR	1296779	Statement	do_to_zval_err	576:2:14340:14353	1296704	0	True				
ANR	1296780	Statement	(	576:16:14354:14354	1296704	1	True				
ANR	1296781	Statement	ctx	576:17:14355:14357	1296704	2	True				
ANR	1296782	Statement	","	576:20:14358:14358	1296704	3	True				
ANR	1296783	Statement	"""could not convert IPv4 address to string """	576:22:14360:14402	1296704	4	True				
ANR	1296784	Statement	"""(errno %d)"""	577:4:14408:14419	1296704	5	True				
ANR	1296785	Statement	","	577:16:14420:14420	1296704	6	True				
ANR	1296786	Statement	errno	577:18:14422:14426	1296704	7	True				
ANR	1296787	Statement	)	577:23:14427:14427	1296704	8	True				
ANR	1296788	ExpressionStatement		577:24:14428:14428	1296704	9	True				
ANR	1296789	ReturnStatement	return ;	578:2:14432:14438	1296704	10	True				
ANR	1296790	ExpressionStatement	Z_STRLEN_P ( zv ) = strlen ( Z_STRVAL_P ( zv ) )	581:1:14445:14484	1296704	6	True				
ANR	1296791	AssignmentExpression	Z_STRLEN_P ( zv ) = strlen ( Z_STRVAL_P ( zv ) )		1296704	0		=			
ANR	1296792	CallExpression	Z_STRLEN_P ( zv )		1296704	0					
ANR	1296793	Callee	Z_STRLEN_P		1296704	0					
ANR	1296794	Identifier	Z_STRLEN_P		1296704	0					
ANR	1296795	ArgumentList	zv		1296704	1					
ANR	1296796	Argument	zv		1296704	0					
ANR	1296797	Identifier	zv		1296704	0					
ANR	1296798	CallExpression	strlen ( Z_STRVAL_P ( zv ) )		1296704	1					
ANR	1296799	Callee	strlen		1296704	0					
ANR	1296800	Identifier	strlen		1296704	0					
ANR	1296801	ArgumentList	Z_STRVAL_P ( zv )		1296704	1					
ANR	1296802	Argument	Z_STRVAL_P ( zv )		1296704	0					
ANR	1296803	CallExpression	Z_STRVAL_P ( zv )		1296704	0					
ANR	1296804	Callee	Z_STRVAL_P		1296704	0					
ANR	1296805	Identifier	Z_STRVAL_P		1296704	0					
ANR	1296806	ArgumentList	zv		1296704	1					
ANR	1296807	Argument	zv		1296704	0					
ANR	1296808	Identifier	zv		1296704	0					
ANR	1296809	ReturnType	static void		1296704	1					
ANR	1296810	Identifier	to_zval_read_sin_addr		1296704	2					
ANR	1296811	ParameterList	"const char * data , zval * zv , res_context * ctx"		1296704	3					
ANR	1296812	Parameter	const char * data	566:34:14046:14061	1296704	0	True				
ANR	1296813	ParameterType	const char *		1296704	0					
ANR	1296814	Identifier	data		1296704	1					
ANR	1296815	Parameter	zval * zv	566:52:14064:14071	1296704	1	True				
ANR	1296816	ParameterType	zval *		1296704	0					
ANR	1296817	Identifier	zv		1296704	1					
ANR	1296818	Parameter	res_context * ctx	566:62:14074:14089	1296704	2	True				
ANR	1296819	ParameterType	res_context *		1296704	0					
ANR	1296820	Identifier	ctx		1296704	1					
ANR	1296821	CFGEntryNode	ENTRY		1296704		True				
ANR	1296822	CFGExitNode	EXIT		1296704		True				
ANR	1296823	Symbol	NULL		1296704						
ANR	1296824	Symbol	data		1296704						
ANR	1296825	Symbol	ctx		1296704						
ANR	1296826	Symbol	INET_ADDRSTRLEN		1296704						
ANR	1296827	Symbol	AF_INET		1296704						
ANR	1296828	Symbol	Z_TYPE_P		1296704						
ANR	1296829	Symbol	Z_STRVAL_P		1296704						
ANR	1296830	Symbol	strlen		1296704						
ANR	1296831	Symbol	size		1296704						
ANR	1296832	Symbol	ecalloc		1296704						
ANR	1296833	Symbol	Z_STRLEN_P		1296704						
ANR	1296834	Symbol	inet_ntop		1296704						
ANR	1296835	Symbol	IS_STRING		1296704						
ANR	1296836	Symbol	zv		1296704						
ANR	1296837	Symbol	addr		1296704						
ANR	1296838	DeclStmt									
ANR	1296839	Decl							const field_descriptor	const field_descriptor [ ]	descriptors_sockaddr_in
ANR	1296840	Function	from_zval_write_sockaddr_in	589:0:14929:15109							
ANR	1296841	FunctionDef	"from_zval_write_sockaddr_in (const zval * container , char * sockaddr , ser_context * ctx)"		1296840	0					
ANR	1296842	CompoundStatement		590:0:15026:15109	1296840	0					
ANR	1296843	ExpressionStatement	"from_zval_write_aggregation ( container , sockaddr , descriptors_sockaddr_in , ctx )"	591:1:15029:15107	1296840	0	True				
ANR	1296844	CallExpression	"from_zval_write_aggregation ( container , sockaddr , descriptors_sockaddr_in , ctx )"		1296840	0					
ANR	1296845	Callee	from_zval_write_aggregation		1296840	0					
ANR	1296846	Identifier	from_zval_write_aggregation		1296840	0					
ANR	1296847	ArgumentList	container		1296840	1					
ANR	1296848	Argument	container		1296840	0					
ANR	1296849	Identifier	container		1296840	0					
ANR	1296850	Argument	sockaddr		1296840	1					
ANR	1296851	Identifier	sockaddr		1296840	0					
ANR	1296852	Argument	descriptors_sockaddr_in		1296840	2					
ANR	1296853	Identifier	descriptors_sockaddr_in		1296840	0					
ANR	1296854	Argument	ctx		1296840	3					
ANR	1296855	Identifier	ctx		1296840	0					
ANR	1296856	ReturnType	static void		1296840	1					
ANR	1296857	Identifier	from_zval_write_sockaddr_in		1296840	2					
ANR	1296858	ParameterList	"const zval * container , char * sockaddr , ser_context * ctx"		1296840	3					
ANR	1296859	Parameter	const zval * container	589:40:14969:14989	1296840	0	True				
ANR	1296860	ParameterType	const zval *		1296840	0					
ANR	1296861	Identifier	container		1296840	1					
ANR	1296862	Parameter	char * sockaddr	589:63:14992:15005	1296840	1	True				
ANR	1296863	ParameterType	char *		1296840	0					
ANR	1296864	Identifier	sockaddr		1296840	1					
ANR	1296865	Parameter	ser_context * ctx	589:79:15008:15023	1296840	2	True				
ANR	1296866	ParameterType	ser_context *		1296840	0					
ANR	1296867	Identifier	ctx		1296840	1					
ANR	1296868	CFGEntryNode	ENTRY		1296840		True				
ANR	1296869	CFGExitNode	EXIT		1296840		True				
ANR	1296870	Symbol	container		1296840						
ANR	1296871	Symbol	ctx		1296840						
ANR	1296872	Symbol	sockaddr		1296840						
ANR	1296873	Symbol	descriptors_sockaddr_in		1296840						
ANR	1296874	Function	to_zval_read_sockaddr_in	593:0:15111:15263							
ANR	1296875	FunctionDef	"to_zval_read_sockaddr_in (const char * data , zval * zv , res_context * ctx)"		1296874	0					
ANR	1296876	CompoundStatement		594:0:15194:15263	1296874	0					
ANR	1296877	ExpressionStatement	"to_zval_read_aggregation ( data , zv , descriptors_sockaddr_in , ctx )"	595:1:15197:15261	1296874	0	True				
ANR	1296878	CallExpression	"to_zval_read_aggregation ( data , zv , descriptors_sockaddr_in , ctx )"		1296874	0					
ANR	1296879	Callee	to_zval_read_aggregation		1296874	0					
ANR	1296880	Identifier	to_zval_read_aggregation		1296874	0					
ANR	1296881	ArgumentList	data		1296874	1					
ANR	1296882	Argument	data		1296874	0					
ANR	1296883	Identifier	data		1296874	0					
ANR	1296884	Argument	zv		1296874	1					
ANR	1296885	Identifier	zv		1296874	0					
ANR	1296886	Argument	descriptors_sockaddr_in		1296874	2					
ANR	1296887	Identifier	descriptors_sockaddr_in		1296874	0					
ANR	1296888	Argument	ctx		1296874	3					
ANR	1296889	Identifier	ctx		1296874	0					
ANR	1296890	ReturnType	static void		1296874	1					
ANR	1296891	Identifier	to_zval_read_sockaddr_in		1296874	2					
ANR	1296892	ParameterList	"const char * data , zval * zv , res_context * ctx"		1296874	3					
ANR	1296893	Parameter	const char * data	593:37:15148:15163	1296874	0	True				
ANR	1296894	ParameterType	const char *		1296874	0					
ANR	1296895	Identifier	data		1296874	1					
ANR	1296896	Parameter	zval * zv	593:55:15166:15173	1296874	1	True				
ANR	1296897	ParameterType	zval *		1296874	0					
ANR	1296898	Identifier	zv		1296874	1					
ANR	1296899	Parameter	res_context * ctx	593:65:15176:15191	1296874	2	True				
ANR	1296900	ParameterType	res_context *		1296874	0					
ANR	1296901	Identifier	ctx		1296874	1					
ANR	1296902	CFGEntryNode	ENTRY		1296874		True				
ANR	1296903	CFGExitNode	EXIT		1296874		True				
ANR	1296904	Symbol	data		1296874						
ANR	1296905	Symbol	ctx		1296874						
ANR	1296906	Symbol	descriptors_sockaddr_in		1296874						
ANR	1296907	Symbol	zv		1296874						
ANR	1296908	Function	from_zval_write_sin6_addr	598:0:15279:16011							
ANR	1296909	FunctionDef	"from_zval_write_sin6_addr (const zval * zaddr_str , char * addr6 , ser_context * ctx)"		1296908	0					
ANR	1296910	CompoundStatement		599:0:15371:16011	1296908	0					
ANR	1296911	IdentifierDeclStatement	int res ;	600:1:15374:15385	1296908	0	True				
ANR	1296912	IdentifierDecl	res		1296908	0					
ANR	1296913	IdentifierDeclType	int		1296908	0					
ANR	1296914	Identifier	res		1296908	1					
ANR	1296915	IdentifierDeclStatement	struct sockaddr_in6 saddr6 = { 0 } ;	601:1:15388:15420	1296908	1	True				
ANR	1296916	IdentifierDecl	saddr6 = { 0 }		1296908	0					
ANR	1296917	IdentifierDeclType	struct sockaddr_in6		1296908	0					
ANR	1296918	Identifier	saddr6		1296908	1					
ANR	1296919	AssignmentExpression	saddr6 = { 0 }		1296908	2		=			
ANR	1296920	Identifier	saddr6		1296908	0					
ANR	1296921	InitializerList	0		1296908	1					
ANR	1296922	PrimaryExpression	0		1296908	0					
ANR	1296923	IdentifierDeclStatement	zval lzval = zval_used_for_init ;	602:1:15423:15457	1296908	2	True				
ANR	1296924	IdentifierDecl	lzval = zval_used_for_init		1296908	0					
ANR	1296925	IdentifierDeclType	zval		1296908	0					
ANR	1296926	Identifier	lzval		1296908	1					
ANR	1296927	AssignmentExpression	lzval = zval_used_for_init		1296908	2		=			
ANR	1296928	Identifier	zval_used_for_init		1296908	0					
ANR	1296929	Identifier	zval_used_for_init		1296908	1					
ANR	1296930	ExpressionStatement	TSRMLS_FETCH ( )	603:1:15460:15474	1296908	3	True				
ANR	1296931	CallExpression	TSRMLS_FETCH ( )		1296908	0					
ANR	1296932	Callee	TSRMLS_FETCH		1296908	0					
ANR	1296933	Identifier	TSRMLS_FETCH		1296908	0					
ANR	1296934	ArgumentList			1296908	1					
ANR	1296935	IfStatement	if ( Z_TYPE_P ( zaddr_str ) != IS_STRING )		1296908	4					
ANR	1296936	Condition	Z_TYPE_P ( zaddr_str ) != IS_STRING	605:5:15482:15513	1296908	0	True				
ANR	1296937	EqualityExpression	Z_TYPE_P ( zaddr_str ) != IS_STRING		1296908	0		!=			
ANR	1296938	CallExpression	Z_TYPE_P ( zaddr_str )		1296908	0					
ANR	1296939	Callee	Z_TYPE_P		1296908	0					
ANR	1296940	Identifier	Z_TYPE_P		1296908	0					
ANR	1296941	ArgumentList	zaddr_str		1296908	1					
ANR	1296942	Argument	zaddr_str		1296908	0					
ANR	1296943	Identifier	zaddr_str		1296908	0					
ANR	1296944	Identifier	IS_STRING		1296908	1					
ANR	1296945	CompoundStatement		7:39:144:144	1296908	1					
ANR	1296946	ExpressionStatement	"ZVAL_COPY_VALUE ( & lzval , zaddr_str )"	606:2:15520:15554	1296908	0	True				
ANR	1296947	CallExpression	"ZVAL_COPY_VALUE ( & lzval , zaddr_str )"		1296908	0					
ANR	1296948	Callee	ZVAL_COPY_VALUE		1296908	0					
ANR	1296949	Identifier	ZVAL_COPY_VALUE		1296908	0					
ANR	1296950	ArgumentList	& lzval		1296908	1					
ANR	1296951	Argument	& lzval		1296908	0					
ANR	1296952	UnaryOperationExpression	& lzval		1296908	0					
ANR	1296953	UnaryOperator	&		1296908	0					
ANR	1296954	Identifier	lzval		1296908	1					
ANR	1296955	Argument	zaddr_str		1296908	1					
ANR	1296956	Identifier	zaddr_str		1296908	0					
ANR	1296957	ExpressionStatement	zval_copy_ctor ( & lzval )	607:2:15558:15580	1296908	1	True				
ANR	1296958	CallExpression	zval_copy_ctor ( & lzval )		1296908	0					
ANR	1296959	Callee	zval_copy_ctor		1296908	0					
ANR	1296960	Identifier	zval_copy_ctor		1296908	0					
ANR	1296961	ArgumentList	& lzval		1296908	1					
ANR	1296962	Argument	& lzval		1296908	0					
ANR	1296963	UnaryOperationExpression	& lzval		1296908	0					
ANR	1296964	UnaryOperator	&		1296908	0					
ANR	1296965	Identifier	lzval		1296908	1					
ANR	1296966	ExpressionStatement	convert_to_string ( & lzval )	608:2:15584:15609	1296908	2	True				
ANR	1296967	CallExpression	convert_to_string ( & lzval )		1296908	0					
ANR	1296968	Callee	convert_to_string		1296908	0					
ANR	1296969	Identifier	convert_to_string		1296908	0					
ANR	1296970	ArgumentList	& lzval		1296908	1					
ANR	1296971	Argument	& lzval		1296908	0					
ANR	1296972	UnaryOperationExpression	& lzval		1296908	0					
ANR	1296973	UnaryOperator	&		1296908	0					
ANR	1296974	Identifier	lzval		1296908	1					
ANR	1296975	ExpressionStatement	zaddr_str = & lzval	609:2:15613:15631	1296908	3	True				
ANR	1296976	AssignmentExpression	zaddr_str = & lzval		1296908	0		=			
ANR	1296977	Identifier	zaddr_str		1296908	0					
ANR	1296978	UnaryOperationExpression	& lzval		1296908	1					
ANR	1296979	UnaryOperator	&		1296908	0					
ANR	1296980	Identifier	lzval		1296908	1					
ANR	1296981	Statement	res	612:1:15638:15640	1296908	5	True				
ANR	1296982	Statement	=	612:5:15642:15642	1296908	6	True				
ANR	1296983	Statement	php_set_inet6_addr	612:7:15644:15661	1296908	7	True				
ANR	1296984	Statement	(	612:25:15662:15662	1296908	8	True				
ANR	1296985	Statement	&	612:26:15663:15663	1296908	9	True				
ANR	1296986	Statement	saddr6	612:27:15664:15669	1296908	10	True				
ANR	1296987	Statement	","	612:33:15670:15670	1296908	11	True				
ANR	1296988	Statement	Z_STRVAL_P	613:3:15675:15684	1296908	12	True				
ANR	1296989	Statement	(	613:13:15685:15685	1296908	13	True				
ANR	1296990	Statement	zaddr_str	613:14:15686:15694	1296908	14	True				
ANR	1296991	Statement	)	613:23:15695:15695	1296908	15	True				
ANR	1296992	Statement	","	613:24:15696:15696	1296908	16	True				
ANR	1296993	Statement	ctx	613:26:15698:15700	1296908	17	True				
ANR	1296994	Statement	->	613:29:15701:15702	1296908	18	True				
ANR	1296995	Statement	sock	613:31:15703:15706	1296908	19	True				
ANR	1296996	Statement	TSRMLS_CC	613:36:15708:15716	1296908	20	True				
ANR	1296997	Statement	)	613:45:15717:15717	1296908	21	True				
ANR	1296998	ExpressionStatement		613:46:15718:15718	1296908	22	True				
ANR	1296999	IfStatement	if ( res )		1296908	23					
ANR	1297000	Condition	res	614:5:15725:15727	1296908	0	True				
ANR	1297001	Identifier	res		1296908	0					
ANR	1297002	CompoundStatement		16:10:358:358	1296908	1					
ANR	1297003	ExpressionStatement	"memcpy ( addr6 , & saddr6 . sin6_addr , sizeof saddr6 . sin6_addr )"	615:2:15734:15791	1296908	0	True				
ANR	1297004	CallExpression	"memcpy ( addr6 , & saddr6 . sin6_addr , sizeof saddr6 . sin6_addr )"		1296908	0					
ANR	1297005	Callee	memcpy		1296908	0					
ANR	1297006	Identifier	memcpy		1296908	0					
ANR	1297007	ArgumentList	addr6		1296908	1					
ANR	1297008	Argument	addr6		1296908	0					
ANR	1297009	Identifier	addr6		1296908	0					
ANR	1297010	Argument	& saddr6 . sin6_addr		1296908	1					
ANR	1297011	UnaryOperationExpression	& saddr6 . sin6_addr		1296908	0					
ANR	1297012	UnaryOperator	&		1296908	0					
ANR	1297013	MemberAccess	saddr6 . sin6_addr		1296908	1					
ANR	1297014	Identifier	saddr6		1296908	0					
ANR	1297015	Identifier	sin6_addr		1296908	1					
ANR	1297016	Argument	sizeof saddr6 . sin6_addr		1296908	2					
ANR	1297017	SizeofExpression	sizeof saddr6 . sin6_addr		1296908	0					
ANR	1297018	Sizeof	sizeof		1296908	0					
ANR	1297019	MemberAccess	saddr6 . sin6_addr		1296908	1					
ANR	1297020	Identifier	saddr6		1296908	0					
ANR	1297021	Identifier	sin6_addr		1296908	1					
ANR	1297022	ElseStatement	else		1296908	0					
ANR	1297023	CompoundStatement		18:8:429:429	1296908	0					
ANR	1297024	Statement	do_from_zval_err	618:2:15873:15888	1296908	0	True				
ANR	1297025	Statement	(	618:18:15889:15889	1296908	1	True				
ANR	1297026	Statement	ctx	618:19:15890:15892	1296908	2	True				
ANR	1297027	Statement	","	618:22:15893:15893	1296908	3	True				
ANR	1297028	Statement	"""could not resolve address '%s' to get an AF_INET6 """	618:24:15895:15946	1296908	4	True				
ANR	1297029	Statement	"""address"""	619:4:15952:15960	1296908	5	True				
ANR	1297030	Statement	","	619:13:15961:15961	1296908	6	True				
ANR	1297031	Statement	Z_STRVAL_P	619:15:15963:15972	1296908	7	True				
ANR	1297032	Statement	(	619:25:15973:15973	1296908	8	True				
ANR	1297033	Statement	zaddr_str	619:26:15974:15982	1296908	9	True				
ANR	1297034	Statement	)	619:35:15983:15983	1296908	10	True				
ANR	1297035	Statement	)	619:36:15984:15984	1296908	11	True				
ANR	1297036	ExpressionStatement		619:37:15985:15985	1296908	12	True				
ANR	1297037	ExpressionStatement	zval_dtor ( & lzval )	622:1:15992:16009	1296908	24	True				
ANR	1297038	CallExpression	zval_dtor ( & lzval )		1296908	0					
ANR	1297039	Callee	zval_dtor		1296908	0					
ANR	1297040	Identifier	zval_dtor		1296908	0					
ANR	1297041	ArgumentList	& lzval		1296908	1					
ANR	1297042	Argument	& lzval		1296908	0					
ANR	1297043	UnaryOperationExpression	& lzval		1296908	0					
ANR	1297044	UnaryOperator	&		1296908	0					
ANR	1297045	Identifier	lzval		1296908	1					
ANR	1297046	ReturnType	static void		1296908	1					
ANR	1297047	Identifier	from_zval_write_sin6_addr		1296908	2					
ANR	1297048	ParameterList	"const zval * zaddr_str , char * addr6 , ser_context * ctx"		1296908	3					
ANR	1297049	Parameter	const zval * zaddr_str	598:38:15317:15337	1296908	0	True				
ANR	1297050	ParameterType	const zval *		1296908	0					
ANR	1297051	Identifier	zaddr_str		1296908	1					
ANR	1297052	Parameter	char * addr6	598:61:15340:15350	1296908	1	True				
ANR	1297053	ParameterType	char *		1296908	0					
ANR	1297054	Identifier	addr6		1296908	1					
ANR	1297055	Parameter	ser_context * ctx	598:74:15353:15368	1296908	2	True				
ANR	1297056	ParameterType	ser_context *		1296908	0					
ANR	1297057	Identifier	ctx		1296908	1					
ANR	1297058	CFGEntryNode	ENTRY		1296908		True				
ANR	1297059	CFGExitNode	EXIT		1296908		True				
ANR	1297060	Symbol	addr6		1296908						
ANR	1297061	Symbol	res		1296908						
ANR	1297062	Symbol	zval_used_for_init		1296908						
ANR	1297063	Symbol	ctx		1296908						
ANR	1297064	Symbol	& lzval		1296908						
ANR	1297065	Symbol	zaddr_str		1296908						
ANR	1297066	Symbol	Z_TYPE_P		1296908						
ANR	1297067	Symbol	saddr6		1296908						
ANR	1297068	Symbol	& saddr6 . sin6_addr		1296908						
ANR	1297069	Symbol	lzval		1296908						
ANR	1297070	Symbol	IS_STRING		1296908						
ANR	1297071	Symbol	& saddr6		1296908						
ANR	1297072	Symbol	saddr6 . sin6_addr		1296908						
ANR	1297073	Function	to_zval_read_sin6_addr	624:0:16013:16492							
ANR	1297074	FunctionDef	"to_zval_read_sin6_addr (const char * data , zval * zv , res_context * ctx)"		1297073	0					
ANR	1297075	CompoundStatement		625:0:16094:16492	1297073	0					
ANR	1297076	IdentifierDeclStatement	const struct in6_addr * addr = ( const struct in6_addr * ) data ;	626:1:16097:16156	1297073	0	True				
ANR	1297077	IdentifierDecl	* addr = ( const struct in6_addr * ) data		1297073	0					
ANR	1297078	IdentifierDeclType	const struct in6_addr *		1297073	0					
ANR	1297079	Identifier	addr		1297073	1					
ANR	1297080	AssignmentExpression	* addr = ( const struct in6_addr * ) data		1297073	2		=			
ANR	1297081	Identifier	addr		1297073	0					
ANR	1297082	CastExpression	( const struct in6_addr * ) data		1297073	1					
ANR	1297083	CastTarget	const struct in6_addr *		1297073	0					
ANR	1297084	Identifier	data		1297073	1					
ANR	1297085	IdentifierDeclStatement	socklen_t size = INET6_ADDRSTRLEN ;	627:1:16159:16192	1297073	1	True				
ANR	1297086	IdentifierDecl	size = INET6_ADDRSTRLEN		1297073	0					
ANR	1297087	IdentifierDeclType	socklen_t		1297073	0					
ANR	1297088	Identifier	size		1297073	1					
ANR	1297089	AssignmentExpression	size = INET6_ADDRSTRLEN		1297073	2		=			
ANR	1297090	Identifier	INET6_ADDRSTRLEN		1297073	0					
ANR	1297091	Identifier	INET6_ADDRSTRLEN		1297073	1					
ANR	1297092	ExpressionStatement	Z_TYPE_P ( zv ) = IS_STRING	629:1:16196:16220	1297073	2	True				
ANR	1297093	AssignmentExpression	Z_TYPE_P ( zv ) = IS_STRING		1297073	0		=			
ANR	1297094	CallExpression	Z_TYPE_P ( zv )		1297073	0					
ANR	1297095	Callee	Z_TYPE_P		1297073	0					
ANR	1297096	Identifier	Z_TYPE_P		1297073	0					
ANR	1297097	ArgumentList	zv		1297073	1					
ANR	1297098	Argument	zv		1297073	0					
ANR	1297099	Identifier	zv		1297073	0					
ANR	1297100	Identifier	IS_STRING		1297073	1					
ANR	1297101	ExpressionStatement	"Z_STRVAL_P ( zv ) = ecalloc ( 1 , size )"	630:1:16223:16256	1297073	3	True				
ANR	1297102	AssignmentExpression	"Z_STRVAL_P ( zv ) = ecalloc ( 1 , size )"		1297073	0		=			
ANR	1297103	CallExpression	Z_STRVAL_P ( zv )		1297073	0					
ANR	1297104	Callee	Z_STRVAL_P		1297073	0					
ANR	1297105	Identifier	Z_STRVAL_P		1297073	0					
ANR	1297106	ArgumentList	zv		1297073	1					
ANR	1297107	Argument	zv		1297073	0					
ANR	1297108	Identifier	zv		1297073	0					
ANR	1297109	CallExpression	"ecalloc ( 1 , size )"		1297073	1					
ANR	1297110	Callee	ecalloc		1297073	0					
ANR	1297111	Identifier	ecalloc		1297073	0					
ANR	1297112	ArgumentList	1		1297073	1					
ANR	1297113	Argument	1		1297073	0					
ANR	1297114	PrimaryExpression	1		1297073	0					
ANR	1297115	Argument	size		1297073	1					
ANR	1297116	Identifier	size		1297073	0					
ANR	1297117	ExpressionStatement	Z_STRLEN_P ( zv ) = 0	631:1:16259:16277	1297073	4	True				
ANR	1297118	AssignmentExpression	Z_STRLEN_P ( zv ) = 0		1297073	0		=			
ANR	1297119	CallExpression	Z_STRLEN_P ( zv )		1297073	0					
ANR	1297120	Callee	Z_STRLEN_P		1297073	0					
ANR	1297121	Identifier	Z_STRLEN_P		1297073	0					
ANR	1297122	ArgumentList	zv		1297073	1					
ANR	1297123	Argument	zv		1297073	0					
ANR	1297124	Identifier	zv		1297073	0					
ANR	1297125	PrimaryExpression	0		1297073	1					
ANR	1297126	IfStatement	"if ( inet_ntop ( AF_INET6 , addr , Z_STRVAL_P ( zv ) , size ) == NULL )"		1297073	5					
ANR	1297127	Condition	"inet_ntop ( AF_INET6 , addr , Z_STRVAL_P ( zv ) , size ) == NULL"	633:5:16285:16339	1297073	0	True				
ANR	1297128	EqualityExpression	"inet_ntop ( AF_INET6 , addr , Z_STRVAL_P ( zv ) , size ) == NULL"		1297073	0		==			
ANR	1297129	CallExpression	"inet_ntop ( AF_INET6 , addr , Z_STRVAL_P ( zv ) , size )"		1297073	0					
ANR	1297130	Callee	inet_ntop		1297073	0					
ANR	1297131	Identifier	inet_ntop		1297073	0					
ANR	1297132	ArgumentList	AF_INET6		1297073	1					
ANR	1297133	Argument	AF_INET6		1297073	0					
ANR	1297134	Identifier	AF_INET6		1297073	0					
ANR	1297135	Argument	addr		1297073	1					
ANR	1297136	Identifier	addr		1297073	0					
ANR	1297137	Argument	Z_STRVAL_P ( zv )		1297073	2					
ANR	1297138	CallExpression	Z_STRVAL_P ( zv )		1297073	0					
ANR	1297139	Callee	Z_STRVAL_P		1297073	0					
ANR	1297140	Identifier	Z_STRVAL_P		1297073	0					
ANR	1297141	ArgumentList	zv		1297073	1					
ANR	1297142	Argument	zv		1297073	0					
ANR	1297143	Identifier	zv		1297073	0					
ANR	1297144	Argument	size		1297073	3					
ANR	1297145	Identifier	size		1297073	0					
ANR	1297146	Identifier	NULL		1297073	1					
ANR	1297147	CompoundStatement		9:62:247:247	1297073	1					
ANR	1297148	Statement	do_to_zval_err	634:2:16346:16359	1297073	0	True				
ANR	1297149	Statement	(	634:16:16360:16360	1297073	1	True				
ANR	1297150	Statement	ctx	634:17:16361:16363	1297073	2	True				
ANR	1297151	Statement	","	634:20:16364:16364	1297073	3	True				
ANR	1297152	Statement	"""could not convert IPv6 address to string """	634:22:16366:16408	1297073	4	True				
ANR	1297153	Statement	"""(errno %d)"""	635:4:16414:16425	1297073	5	True				
ANR	1297154	Statement	","	635:16:16426:16426	1297073	6	True				
ANR	1297155	Statement	errno	635:18:16428:16432	1297073	7	True				
ANR	1297156	Statement	)	635:23:16433:16433	1297073	8	True				
ANR	1297157	ExpressionStatement		635:24:16434:16434	1297073	9	True				
ANR	1297158	ReturnStatement	return ;	636:2:16438:16444	1297073	10	True				
ANR	1297159	ExpressionStatement	Z_STRLEN_P ( zv ) = strlen ( Z_STRVAL_P ( zv ) )	639:1:16451:16490	1297073	6	True				
ANR	1297160	AssignmentExpression	Z_STRLEN_P ( zv ) = strlen ( Z_STRVAL_P ( zv ) )		1297073	0		=			
ANR	1297161	CallExpression	Z_STRLEN_P ( zv )		1297073	0					
ANR	1297162	Callee	Z_STRLEN_P		1297073	0					
ANR	1297163	Identifier	Z_STRLEN_P		1297073	0					
ANR	1297164	ArgumentList	zv		1297073	1					
ANR	1297165	Argument	zv		1297073	0					
ANR	1297166	Identifier	zv		1297073	0					
ANR	1297167	CallExpression	strlen ( Z_STRVAL_P ( zv ) )		1297073	1					
ANR	1297168	Callee	strlen		1297073	0					
ANR	1297169	Identifier	strlen		1297073	0					
ANR	1297170	ArgumentList	Z_STRVAL_P ( zv )		1297073	1					
ANR	1297171	Argument	Z_STRVAL_P ( zv )		1297073	0					
ANR	1297172	CallExpression	Z_STRVAL_P ( zv )		1297073	0					
ANR	1297173	Callee	Z_STRVAL_P		1297073	0					
ANR	1297174	Identifier	Z_STRVAL_P		1297073	0					
ANR	1297175	ArgumentList	zv		1297073	1					
ANR	1297176	Argument	zv		1297073	0					
ANR	1297177	Identifier	zv		1297073	0					
ANR	1297178	ReturnType	static void		1297073	1					
ANR	1297179	Identifier	to_zval_read_sin6_addr		1297073	2					
ANR	1297180	ParameterList	"const char * data , zval * zv , res_context * ctx"		1297073	3					
ANR	1297181	Parameter	const char * data	624:35:16048:16063	1297073	0	True				
ANR	1297182	ParameterType	const char *		1297073	0					
ANR	1297183	Identifier	data		1297073	1					
ANR	1297184	Parameter	zval * zv	624:53:16066:16073	1297073	1	True				
ANR	1297185	ParameterType	zval *		1297073	0					
ANR	1297186	Identifier	zv		1297073	1					
ANR	1297187	Parameter	res_context * ctx	624:63:16076:16091	1297073	2	True				
ANR	1297188	ParameterType	res_context *		1297073	0					
ANR	1297189	Identifier	ctx		1297073	1					
ANR	1297190	CFGEntryNode	ENTRY		1297073		True				
ANR	1297191	CFGExitNode	EXIT		1297073		True				
ANR	1297192	Symbol	NULL		1297073						
ANR	1297193	Symbol	data		1297073						
ANR	1297194	Symbol	ctx		1297073						
ANR	1297195	Symbol	INET6_ADDRSTRLEN		1297073						
ANR	1297196	Symbol	Z_TYPE_P		1297073						
ANR	1297197	Symbol	Z_STRVAL_P		1297073						
ANR	1297198	Symbol	AF_INET6		1297073						
ANR	1297199	Symbol	strlen		1297073						
ANR	1297200	Symbol	size		1297073						
ANR	1297201	Symbol	ecalloc		1297073						
ANR	1297202	Symbol	Z_STRLEN_P		1297073						
ANR	1297203	Symbol	inet_ntop		1297073						
ANR	1297204	Symbol	IS_STRING		1297073						
ANR	1297205	Symbol	zv		1297073						
ANR	1297206	Symbol	addr		1297073						
ANR	1297207	DeclStmt									
ANR	1297208	Decl							const field_descriptor	const field_descriptor [ ]	descriptors_sockaddr_in6
ANR	1297209	Function	from_zval_write_sockaddr_in6	649:0:17204:17388							
ANR	1297210	FunctionDef	"from_zval_write_sockaddr_in6 (const zval * container , char * sockaddr6 , ser_context * ctx)"		1297209	0					
ANR	1297211	CompoundStatement		650:0:17303:17388	1297209	0					
ANR	1297212	ExpressionStatement	"from_zval_write_aggregation ( container , sockaddr6 , descriptors_sockaddr_in6 , ctx )"	651:1:17306:17386	1297209	0	True				
ANR	1297213	CallExpression	"from_zval_write_aggregation ( container , sockaddr6 , descriptors_sockaddr_in6 , ctx )"		1297209	0					
ANR	1297214	Callee	from_zval_write_aggregation		1297209	0					
ANR	1297215	Identifier	from_zval_write_aggregation		1297209	0					
ANR	1297216	ArgumentList	container		1297209	1					
ANR	1297217	Argument	container		1297209	0					
ANR	1297218	Identifier	container		1297209	0					
ANR	1297219	Argument	sockaddr6		1297209	1					
ANR	1297220	Identifier	sockaddr6		1297209	0					
ANR	1297221	Argument	descriptors_sockaddr_in6		1297209	2					
ANR	1297222	Identifier	descriptors_sockaddr_in6		1297209	0					
ANR	1297223	Argument	ctx		1297209	3					
ANR	1297224	Identifier	ctx		1297209	0					
ANR	1297225	ReturnType	static void		1297209	1					
ANR	1297226	Identifier	from_zval_write_sockaddr_in6		1297209	2					
ANR	1297227	ParameterList	"const zval * container , char * sockaddr6 , ser_context * ctx"		1297209	3					
ANR	1297228	Parameter	const zval * container	649:41:17245:17265	1297209	0	True				
ANR	1297229	ParameterType	const zval *		1297209	0					
ANR	1297230	Identifier	container		1297209	1					
ANR	1297231	Parameter	char * sockaddr6	649:64:17268:17282	1297209	1	True				
ANR	1297232	ParameterType	char *		1297209	0					
ANR	1297233	Identifier	sockaddr6		1297209	1					
ANR	1297234	Parameter	ser_context * ctx	649:81:17285:17300	1297209	2	True				
ANR	1297235	ParameterType	ser_context *		1297209	0					
ANR	1297236	Identifier	ctx		1297209	1					
ANR	1297237	CFGEntryNode	ENTRY		1297209		True				
ANR	1297238	CFGExitNode	EXIT		1297209		True				
ANR	1297239	Symbol	container		1297209						
ANR	1297240	Symbol	sockaddr6		1297209						
ANR	1297241	Symbol	ctx		1297209						
ANR	1297242	Symbol	descriptors_sockaddr_in6		1297209						
ANR	1297243	Function	to_zval_read_sockaddr_in6	653:0:17390:17544							
ANR	1297244	FunctionDef	"to_zval_read_sockaddr_in6 (const char * data , zval * zv , res_context * ctx)"		1297243	0					
ANR	1297245	CompoundStatement		654:0:17474:17544	1297243	0					
ANR	1297246	ExpressionStatement	"to_zval_read_aggregation ( data , zv , descriptors_sockaddr_in6 , ctx )"	655:1:17477:17542	1297243	0	True				
ANR	1297247	CallExpression	"to_zval_read_aggregation ( data , zv , descriptors_sockaddr_in6 , ctx )"		1297243	0					
ANR	1297248	Callee	to_zval_read_aggregation		1297243	0					
ANR	1297249	Identifier	to_zval_read_aggregation		1297243	0					
ANR	1297250	ArgumentList	data		1297243	1					
ANR	1297251	Argument	data		1297243	0					
ANR	1297252	Identifier	data		1297243	0					
ANR	1297253	Argument	zv		1297243	1					
ANR	1297254	Identifier	zv		1297243	0					
ANR	1297255	Argument	descriptors_sockaddr_in6		1297243	2					
ANR	1297256	Identifier	descriptors_sockaddr_in6		1297243	0					
ANR	1297257	Argument	ctx		1297243	3					
ANR	1297258	Identifier	ctx		1297243	0					
ANR	1297259	ReturnType	static void		1297243	1					
ANR	1297260	Identifier	to_zval_read_sockaddr_in6		1297243	2					
ANR	1297261	ParameterList	"const char * data , zval * zv , res_context * ctx"		1297243	3					
ANR	1297262	Parameter	const char * data	653:38:17428:17443	1297243	0	True				
ANR	1297263	ParameterType	const char *		1297243	0					
ANR	1297264	Identifier	data		1297243	1					
ANR	1297265	Parameter	zval * zv	653:56:17446:17453	1297243	1	True				
ANR	1297266	ParameterType	zval *		1297243	0					
ANR	1297267	Identifier	zv		1297243	1					
ANR	1297268	Parameter	res_context * ctx	653:66:17456:17471	1297243	2	True				
ANR	1297269	ParameterType	res_context *		1297243	0					
ANR	1297270	Identifier	ctx		1297243	1					
ANR	1297271	CFGEntryNode	ENTRY		1297243		True				
ANR	1297272	CFGExitNode	EXIT		1297243		True				
ANR	1297273	Symbol	data		1297243						
ANR	1297274	Symbol	ctx		1297243						
ANR	1297275	Symbol	zv		1297243						
ANR	1297276	Symbol	descriptors_sockaddr_in6		1297243						
ANR	1297277	Function	from_zval_write_sun_path	658:0:17569:18522							
ANR	1297278	FunctionDef	"from_zval_write_sun_path (const zval * path , char * sockaddr_un_c , ser_context * ctx)"		1297277	0					
ANR	1297279	CompoundStatement		659:0:17663:18522	1297277	0					
ANR	1297280	IdentifierDeclStatement	zval lzval = zval_used_for_init ;	660:1:17666:17700	1297277	0	True				
ANR	1297281	IdentifierDecl	lzval = zval_used_for_init		1297277	0					
ANR	1297282	IdentifierDeclType	zval		1297277	0					
ANR	1297283	Identifier	lzval		1297277	1					
ANR	1297284	AssignmentExpression	lzval = zval_used_for_init		1297277	2		=			
ANR	1297285	Identifier	zval_used_for_init		1297277	0					
ANR	1297286	Identifier	zval_used_for_init		1297277	1					
ANR	1297287	IdentifierDeclStatement	struct sockaddr_un * saddr = ( struct sockaddr_un * ) sockaddr_un_c ;	661:1:17703:17765	1297277	1	True				
ANR	1297288	IdentifierDecl	* saddr = ( struct sockaddr_un * ) sockaddr_un_c		1297277	0					
ANR	1297289	IdentifierDeclType	struct sockaddr_un *		1297277	0					
ANR	1297290	Identifier	saddr		1297277	1					
ANR	1297291	AssignmentExpression	* saddr = ( struct sockaddr_un * ) sockaddr_un_c		1297277	2		=			
ANR	1297292	Identifier	saddr		1297277	0					
ANR	1297293	CastExpression	( struct sockaddr_un * ) sockaddr_un_c		1297277	1					
ANR	1297294	CastTarget	struct sockaddr_un *		1297277	0					
ANR	1297295	Identifier	sockaddr_un_c		1297277	1					
ANR	1297296	IfStatement	if ( Z_TYPE_P ( path ) != IS_STRING )		1297277	2					
ANR	1297297	Condition	Z_TYPE_P ( path ) != IS_STRING	663:5:17773:17799	1297277	0	True				
ANR	1297298	EqualityExpression	Z_TYPE_P ( path ) != IS_STRING		1297277	0		!=			
ANR	1297299	CallExpression	Z_TYPE_P ( path )		1297277	0					
ANR	1297300	Callee	Z_TYPE_P		1297277	0					
ANR	1297301	Identifier	Z_TYPE_P		1297277	0					
ANR	1297302	ArgumentList	path		1297277	1					
ANR	1297303	Argument	path		1297277	0					
ANR	1297304	Identifier	path		1297277	0					
ANR	1297305	Identifier	IS_STRING		1297277	1					
ANR	1297306	CompoundStatement		5:34:138:138	1297277	1					
ANR	1297307	ExpressionStatement	"ZVAL_COPY_VALUE ( & lzval , path )"	664:2:17806:17835	1297277	0	True				
ANR	1297308	CallExpression	"ZVAL_COPY_VALUE ( & lzval , path )"		1297277	0					
ANR	1297309	Callee	ZVAL_COPY_VALUE		1297277	0					
ANR	1297310	Identifier	ZVAL_COPY_VALUE		1297277	0					
ANR	1297311	ArgumentList	& lzval		1297277	1					
ANR	1297312	Argument	& lzval		1297277	0					
ANR	1297313	UnaryOperationExpression	& lzval		1297277	0					
ANR	1297314	UnaryOperator	&		1297277	0					
ANR	1297315	Identifier	lzval		1297277	1					
ANR	1297316	Argument	path		1297277	1					
ANR	1297317	Identifier	path		1297277	0					
ANR	1297318	ExpressionStatement	zval_copy_ctor ( & lzval )	665:2:17839:17861	1297277	1	True				
ANR	1297319	CallExpression	zval_copy_ctor ( & lzval )		1297277	0					
ANR	1297320	Callee	zval_copy_ctor		1297277	0					
ANR	1297321	Identifier	zval_copy_ctor		1297277	0					
ANR	1297322	ArgumentList	& lzval		1297277	1					
ANR	1297323	Argument	& lzval		1297277	0					
ANR	1297324	UnaryOperationExpression	& lzval		1297277	0					
ANR	1297325	UnaryOperator	&		1297277	0					
ANR	1297326	Identifier	lzval		1297277	1					
ANR	1297327	ExpressionStatement	convert_to_string ( & lzval )	666:2:17865:17890	1297277	2	True				
ANR	1297328	CallExpression	convert_to_string ( & lzval )		1297277	0					
ANR	1297329	Callee	convert_to_string		1297277	0					
ANR	1297330	Identifier	convert_to_string		1297277	0					
ANR	1297331	ArgumentList	& lzval		1297277	1					
ANR	1297332	Argument	& lzval		1297277	0					
ANR	1297333	UnaryOperationExpression	& lzval		1297277	0					
ANR	1297334	UnaryOperator	&		1297277	0					
ANR	1297335	Identifier	lzval		1297277	1					
ANR	1297336	ExpressionStatement	path = & lzval	667:2:17894:17907	1297277	3	True				
ANR	1297337	AssignmentExpression	path = & lzval		1297277	0		=			
ANR	1297338	Identifier	path		1297277	0					
ANR	1297339	UnaryOperationExpression	& lzval		1297277	1					
ANR	1297340	UnaryOperator	&		1297277	0					
ANR	1297341	Identifier	lzval		1297277	1					
ANR	1297342	IfStatement	if ( Z_STRLEN_P ( path ) == 0 )		1297277	3					
ANR	1297343	Condition	Z_STRLEN_P ( path ) == 0	673:5:18107:18127	1297277	0	True				
ANR	1297344	EqualityExpression	Z_STRLEN_P ( path ) == 0		1297277	0		==			
ANR	1297345	CallExpression	Z_STRLEN_P ( path )		1297277	0					
ANR	1297346	Callee	Z_STRLEN_P		1297277	0					
ANR	1297347	Identifier	Z_STRLEN_P		1297277	0					
ANR	1297348	ArgumentList	path		1297277	1					
ANR	1297349	Argument	path		1297277	0					
ANR	1297350	Identifier	path		1297277	0					
ANR	1297351	PrimaryExpression	0		1297277	1					
ANR	1297352	CompoundStatement		15:28:466:466	1297277	1					
ANR	1297353	ExpressionStatement	"do_from_zval_err ( ctx , ""%s"" , ""the path is cannot be empty"" )"	674:2:18134:18192	1297277	0	True				
ANR	1297354	CallExpression	"do_from_zval_err ( ctx , ""%s"" , ""the path is cannot be empty"" )"		1297277	0					
ANR	1297355	Callee	do_from_zval_err		1297277	0					
ANR	1297356	Identifier	do_from_zval_err		1297277	0					
ANR	1297357	ArgumentList	ctx		1297277	1					
ANR	1297358	Argument	ctx		1297277	0					
ANR	1297359	Identifier	ctx		1297277	0					
ANR	1297360	Argument	"""%s"""		1297277	1					
ANR	1297361	PrimaryExpression	"""%s"""		1297277	0					
ANR	1297362	Argument	"""the path is cannot be empty"""		1297277	2					
ANR	1297363	PrimaryExpression	"""the path is cannot be empty"""		1297277	0					
ANR	1297364	ReturnStatement	return ;	675:2:18196:18202	1297277	1	True				
ANR	1297365	IfStatement	if ( Z_STRLEN_P ( path ) >= sizeof ( saddr -> sun_path ) )		1297277	4					
ANR	1297366	Condition	Z_STRLEN_P ( path ) >= sizeof ( saddr -> sun_path )	677:5:18212:18254	1297277	0	True				
ANR	1297367	RelationalExpression	Z_STRLEN_P ( path ) >= sizeof ( saddr -> sun_path )		1297277	0		>=			
ANR	1297368	CallExpression	Z_STRLEN_P ( path )		1297277	0					
ANR	1297369	Callee	Z_STRLEN_P		1297277	0					
ANR	1297370	Identifier	Z_STRLEN_P		1297277	0					
ANR	1297371	ArgumentList	path		1297277	1					
ANR	1297372	Argument	path		1297277	0					
ANR	1297373	Identifier	path		1297277	0					
ANR	1297374	SizeofExpression	sizeof ( saddr -> sun_path )		1297277	1					
ANR	1297375	Sizeof	sizeof		1297277	0					
ANR	1297376	PtrMemberAccess	saddr -> sun_path		1297277	1					
ANR	1297377	Identifier	saddr		1297277	0					
ANR	1297378	Identifier	sun_path		1297277	1					
ANR	1297379	CompoundStatement		19:50:593:593	1297277	1					
ANR	1297380	Statement	do_from_zval_err	678:2:18261:18276	1297277	0	True				
ANR	1297381	Statement	(	678:18:18277:18277	1297277	1	True				
ANR	1297382	Statement	ctx	678:19:18278:18280	1297277	2	True				
ANR	1297383	Statement	","	678:22:18281:18281	1297277	3	True				
ANR	1297384	Statement	"""the path is too long, the maximum permitted """	678:24:18283:18328	1297277	4	True				
ANR	1297385	Statement	"""length is %ld"""	679:4:18334:18348	1297277	5	True				
ANR	1297386	Statement	","	679:19:18349:18349	1297277	6	True				
ANR	1297387	Statement	sizeof	679:21:18351:18356	1297277	7	True				
ANR	1297388	Statement	(	679:27:18357:18357	1297277	8	True				
ANR	1297389	Statement	saddr	679:28:18358:18362	1297277	9	True				
ANR	1297390	Statement	->	679:33:18363:18364	1297277	10	True				
ANR	1297391	Statement	sun_path	679:35:18365:18372	1297277	11	True				
ANR	1297392	Statement	)	679:43:18373:18373	1297277	12	True				
ANR	1297393	Statement	-	679:45:18375:18375	1297277	13	True				
ANR	1297394	Statement	1	679:47:18377:18377	1297277	14	True				
ANR	1297395	Statement	)	679:48:18378:18378	1297277	15	True				
ANR	1297396	ExpressionStatement		679:49:18379:18379	1297277	16	True				
ANR	1297397	ReturnStatement	return ;	680:2:18383:18389	1297277	17	True				
ANR	1297398	ExpressionStatement	"memcpy ( & saddr -> sun_path , Z_STRVAL_P ( path ) , Z_STRLEN_P ( path ) )"	683:1:18396:18456	1297277	5	True				
ANR	1297399	CallExpression	"memcpy ( & saddr -> sun_path , Z_STRVAL_P ( path ) , Z_STRLEN_P ( path ) )"		1297277	0					
ANR	1297400	Callee	memcpy		1297277	0					
ANR	1297401	Identifier	memcpy		1297277	0					
ANR	1297402	ArgumentList	& saddr -> sun_path		1297277	1					
ANR	1297403	Argument	& saddr -> sun_path		1297277	0					
ANR	1297404	UnaryOperationExpression	& saddr -> sun_path		1297277	0					
ANR	1297405	UnaryOperator	&		1297277	0					
ANR	1297406	PtrMemberAccess	saddr -> sun_path		1297277	1					
ANR	1297407	Identifier	saddr		1297277	0					
ANR	1297408	Identifier	sun_path		1297277	1					
ANR	1297409	Argument	Z_STRVAL_P ( path )		1297277	1					
ANR	1297410	CallExpression	Z_STRVAL_P ( path )		1297277	0					
ANR	1297411	Callee	Z_STRVAL_P		1297277	0					
ANR	1297412	Identifier	Z_STRVAL_P		1297277	0					
ANR	1297413	ArgumentList	path		1297277	1					
ANR	1297414	Argument	path		1297277	0					
ANR	1297415	Identifier	path		1297277	0					
ANR	1297416	Argument	Z_STRLEN_P ( path )		1297277	2					
ANR	1297417	CallExpression	Z_STRLEN_P ( path )		1297277	0					
ANR	1297418	Callee	Z_STRLEN_P		1297277	0					
ANR	1297419	Identifier	Z_STRLEN_P		1297277	0					
ANR	1297420	ArgumentList	path		1297277	1					
ANR	1297421	Argument	path		1297277	0					
ANR	1297422	Identifier	path		1297277	0					
ANR	1297423	ExpressionStatement	saddr -> sun_path [ Z_STRLEN_P ( path ) ] = '\\0'	684:1:18459:18499	1297277	6	True				
ANR	1297424	AssignmentExpression	saddr -> sun_path [ Z_STRLEN_P ( path ) ] = '\\0'		1297277	0		=			
ANR	1297425	ArrayIndexing	saddr -> sun_path [ Z_STRLEN_P ( path ) ]		1297277	0					
ANR	1297426	PtrMemberAccess	saddr -> sun_path		1297277	0					
ANR	1297427	Identifier	saddr		1297277	0					
ANR	1297428	Identifier	sun_path		1297277	1					
ANR	1297429	CallExpression	Z_STRLEN_P ( path )		1297277	1					
ANR	1297430	Callee	Z_STRLEN_P		1297277	0					
ANR	1297431	Identifier	Z_STRLEN_P		1297277	0					
ANR	1297432	ArgumentList	path		1297277	1					
ANR	1297433	Argument	path		1297277	0					
ANR	1297434	Identifier	path		1297277	0					
ANR	1297435	PrimaryExpression	'\\0'		1297277	1					
ANR	1297436	ExpressionStatement	zval_dtor ( & lzval )	686:1:18503:18520	1297277	7	True				
ANR	1297437	CallExpression	zval_dtor ( & lzval )		1297277	0					
ANR	1297438	Callee	zval_dtor		1297277	0					
ANR	1297439	Identifier	zval_dtor		1297277	0					
ANR	1297440	ArgumentList	& lzval		1297277	1					
ANR	1297441	Argument	& lzval		1297277	0					
ANR	1297442	UnaryOperationExpression	& lzval		1297277	0					
ANR	1297443	UnaryOperator	&		1297277	0					
ANR	1297444	Identifier	lzval		1297277	1					
ANR	1297445	ReturnType	static void		1297277	1					
ANR	1297446	Identifier	from_zval_write_sun_path		1297277	2					
ANR	1297447	ParameterList	"const zval * path , char * sockaddr_un_c , ser_context * ctx"		1297277	3					
ANR	1297448	Parameter	const zval * path	658:37:17606:17621	1297277	0	True				
ANR	1297449	ParameterType	const zval *		1297277	0					
ANR	1297450	Identifier	path		1297277	1					
ANR	1297451	Parameter	char * sockaddr_un_c	658:55:17624:17642	1297277	1	True				
ANR	1297452	ParameterType	char *		1297277	0					
ANR	1297453	Identifier	sockaddr_un_c		1297277	1					
ANR	1297454	Parameter	ser_context * ctx	658:76:17645:17660	1297277	2	True				
ANR	1297455	ParameterType	ser_context *		1297277	0					
ANR	1297456	Identifier	ctx		1297277	1					
ANR	1297457	CFGEntryNode	ENTRY		1297277		True				
ANR	1297458	CFGExitNode	EXIT		1297277		True				
ANR	1297459	Symbol	saddr -> sun_path		1297277						
ANR	1297460	Symbol	zval_used_for_init		1297277						
ANR	1297461	Symbol	ctx		1297277						
ANR	1297462	Symbol	saddr		1297277						
ANR	1297463	Symbol	& lzval		1297277						
ANR	1297464	Symbol	Z_TYPE_P		1297277						
ANR	1297465	Symbol	* saddr		1297277						
ANR	1297466	Symbol	* saddr -> sun_path		1297277						
ANR	1297467	Symbol	* Z_STRLEN_P		1297277						
ANR	1297468	Symbol	Z_STRVAL_P		1297277						
ANR	1297469	Symbol	path		1297277						
ANR	1297470	Symbol	sockaddr_un_c		1297277						
ANR	1297471	Symbol	lzval		1297277						
ANR	1297472	Symbol	Z_STRLEN_P		1297277						
ANR	1297473	Symbol	* * saddr		1297277						
ANR	1297474	Symbol	IS_STRING		1297277						
ANR	1297475	Symbol	& saddr -> sun_path		1297277						
ANR	1297476	Function	to_zval_read_sun_path	688:0:18524:18918							
ANR	1297477	FunctionDef	"to_zval_read_sun_path (const char * data , zval * zv , res_context * ctx)"		1297476	0					
ANR	1297478	CompoundStatement		688:80:18604:18918	1297476	0					
ANR	1297479	IdentifierDeclStatement	struct sockaddr_un * saddr = ( struct sockaddr_un * ) data ;	689:1:18607:18660	1297476	0	True				
ANR	1297480	IdentifierDecl	* saddr = ( struct sockaddr_un * ) data		1297476	0					
ANR	1297481	IdentifierDeclType	struct sockaddr_un *		1297476	0					
ANR	1297482	Identifier	saddr		1297476	1					
ANR	1297483	AssignmentExpression	* saddr = ( struct sockaddr_un * ) data		1297476	2		=			
ANR	1297484	Identifier	saddr		1297476	0					
ANR	1297485	CastExpression	( struct sockaddr_un * ) data		1297476	1					
ANR	1297486	CastTarget	struct sockaddr_un *		1297476	0					
ANR	1297487	Identifier	data		1297476	1					
ANR	1297488	IdentifierDeclStatement	char * nul_pos ;	690:1:18663:18676	1297476	1	True				
ANR	1297489	IdentifierDecl	* nul_pos		1297476	0					
ANR	1297490	IdentifierDeclType	char *		1297476	0					
ANR	1297491	Identifier	nul_pos		1297476	1					
ANR	1297492	ExpressionStatement	"nul_pos = memchr ( & saddr -> sun_path , '\\0' , sizeof ( saddr -> sun_path ) )"	692:1:18680:18745	1297476	2	True				
ANR	1297493	AssignmentExpression	"nul_pos = memchr ( & saddr -> sun_path , '\\0' , sizeof ( saddr -> sun_path ) )"		1297476	0		=			
ANR	1297494	Identifier	nul_pos		1297476	0					
ANR	1297495	CallExpression	"memchr ( & saddr -> sun_path , '\\0' , sizeof ( saddr -> sun_path ) )"		1297476	1					
ANR	1297496	Callee	memchr		1297476	0					
ANR	1297497	Identifier	memchr		1297476	0					
ANR	1297498	ArgumentList	& saddr -> sun_path		1297476	1					
ANR	1297499	Argument	& saddr -> sun_path		1297476	0					
ANR	1297500	UnaryOperationExpression	& saddr -> sun_path		1297476	0					
ANR	1297501	UnaryOperator	&		1297476	0					
ANR	1297502	PtrMemberAccess	saddr -> sun_path		1297476	1					
ANR	1297503	Identifier	saddr		1297476	0					
ANR	1297504	Identifier	sun_path		1297476	1					
ANR	1297505	Argument	'\\0'		1297476	1					
ANR	1297506	PrimaryExpression	'\\0'		1297476	0					
ANR	1297507	Argument	sizeof ( saddr -> sun_path )		1297476	2					
ANR	1297508	SizeofExpression	sizeof ( saddr -> sun_path )		1297476	0					
ANR	1297509	Sizeof	sizeof		1297476	0					
ANR	1297510	PtrMemberAccess	saddr -> sun_path		1297476	1					
ANR	1297511	Identifier	saddr		1297476	0					
ANR	1297512	Identifier	sun_path		1297476	1					
ANR	1297513	IfStatement	if ( nul_pos == NULL )		1297476	3					
ANR	1297514	Condition	nul_pos == NULL	693:5:18752:18766	1297476	0	True				
ANR	1297515	EqualityExpression	nul_pos == NULL		1297476	0		==			
ANR	1297516	Identifier	nul_pos		1297476	0					
ANR	1297517	Identifier	NULL		1297476	1					
ANR	1297518	CompoundStatement		6:22:164:164	1297476	1					
ANR	1297519	ExpressionStatement	"do_to_zval_err ( ctx , ""could not find a NUL in the path"" )"	694:2:18773:18828	1297476	0	True				
ANR	1297520	CallExpression	"do_to_zval_err ( ctx , ""could not find a NUL in the path"" )"		1297476	0					
ANR	1297521	Callee	do_to_zval_err		1297476	0					
ANR	1297522	Identifier	do_to_zval_err		1297476	0					
ANR	1297523	ArgumentList	ctx		1297476	1					
ANR	1297524	Argument	ctx		1297476	0					
ANR	1297525	Identifier	ctx		1297476	0					
ANR	1297526	Argument	"""could not find a NUL in the path"""		1297476	1					
ANR	1297527	PrimaryExpression	"""could not find a NUL in the path"""		1297476	0					
ANR	1297528	ReturnStatement	return ;	695:2:18832:18838	1297476	1	True				
ANR	1297529	ExpressionStatement	"ZVAL_STRINGL ( zv , saddr -> sun_path , nul_pos - ( char * ) & saddr -> sun_path , 1 )"	698:1:18845:18916	1297476	4	True				
ANR	1297530	CallExpression	"ZVAL_STRINGL ( zv , saddr -> sun_path , nul_pos - ( char * ) & saddr -> sun_path , 1 )"		1297476	0					
ANR	1297531	Callee	ZVAL_STRINGL		1297476	0					
ANR	1297532	Identifier	ZVAL_STRINGL		1297476	0					
ANR	1297533	ArgumentList	zv		1297476	1					
ANR	1297534	Argument	zv		1297476	0					
ANR	1297535	Identifier	zv		1297476	0					
ANR	1297536	Argument	saddr -> sun_path		1297476	1					
ANR	1297537	PtrMemberAccess	saddr -> sun_path		1297476	0					
ANR	1297538	Identifier	saddr		1297476	0					
ANR	1297539	Identifier	sun_path		1297476	1					
ANR	1297540	Argument	nul_pos - ( char * ) & saddr -> sun_path		1297476	2					
ANR	1297541	AdditiveExpression	nul_pos - ( char * ) & saddr -> sun_path		1297476	0		-			
ANR	1297542	Identifier	nul_pos		1297476	0					
ANR	1297543	CastExpression	( char * ) & saddr -> sun_path		1297476	1					
ANR	1297544	CastTarget	char *		1297476	0					
ANR	1297545	UnaryOperationExpression	& saddr -> sun_path		1297476	1					
ANR	1297546	UnaryOperator	&		1297476	0					
ANR	1297547	PtrMemberAccess	saddr -> sun_path		1297476	1					
ANR	1297548	Identifier	saddr		1297476	0					
ANR	1297549	Identifier	sun_path		1297476	1					
ANR	1297550	Argument	1		1297476	3					
ANR	1297551	PrimaryExpression	1		1297476	0					
ANR	1297552	ReturnType	static void		1297476	1					
ANR	1297553	Identifier	to_zval_read_sun_path		1297476	2					
ANR	1297554	ParameterList	"const char * data , zval * zv , res_context * ctx"		1297476	3					
ANR	1297555	Parameter	const char * data	688:34:18558:18573	1297476	0	True				
ANR	1297556	ParameterType	const char *		1297476	0					
ANR	1297557	Identifier	data		1297476	1					
ANR	1297558	Parameter	zval * zv	688:52:18576:18583	1297476	1	True				
ANR	1297559	ParameterType	zval *		1297476	0					
ANR	1297560	Identifier	zv		1297476	1					
ANR	1297561	Parameter	res_context * ctx	688:62:18586:18601	1297476	2	True				
ANR	1297562	ParameterType	res_context *		1297476	0					
ANR	1297563	Identifier	ctx		1297476	1					
ANR	1297564	CFGEntryNode	ENTRY		1297476		True				
ANR	1297565	CFGExitNode	EXIT		1297476		True				
ANR	1297566	Symbol	saddr -> sun_path		1297476						
ANR	1297567	Symbol	NULL		1297476						
ANR	1297568	Symbol	data		1297476						
ANR	1297569	Symbol	ctx		1297476						
ANR	1297570	Symbol	saddr		1297476						
ANR	1297571	Symbol	nul_pos		1297476						
ANR	1297572	Symbol	memchr		1297476						
ANR	1297573	Symbol	zv		1297476						
ANR	1297574	Symbol	* saddr		1297476						
ANR	1297575	Symbol	& saddr -> sun_path		1297476						
ANR	1297576	DeclStmt									
ANR	1297577	Decl							const field_descriptor	const field_descriptor [ ]	descriptors_sockaddr_un
ANR	1297578	Function	from_zval_write_sockaddr_un	705:0:19200:19380							
ANR	1297579	FunctionDef	"from_zval_write_sockaddr_un (const zval * container , char * sockaddr , ser_context * ctx)"		1297578	0					
ANR	1297580	CompoundStatement		706:0:19297:19380	1297578	0					
ANR	1297581	ExpressionStatement	"from_zval_write_aggregation ( container , sockaddr , descriptors_sockaddr_un , ctx )"	707:1:19300:19378	1297578	0	True				
ANR	1297582	CallExpression	"from_zval_write_aggregation ( container , sockaddr , descriptors_sockaddr_un , ctx )"		1297578	0					
ANR	1297583	Callee	from_zval_write_aggregation		1297578	0					
ANR	1297584	Identifier	from_zval_write_aggregation		1297578	0					
ANR	1297585	ArgumentList	container		1297578	1					
ANR	1297586	Argument	container		1297578	0					
ANR	1297587	Identifier	container		1297578	0					
ANR	1297588	Argument	sockaddr		1297578	1					
ANR	1297589	Identifier	sockaddr		1297578	0					
ANR	1297590	Argument	descriptors_sockaddr_un		1297578	2					
ANR	1297591	Identifier	descriptors_sockaddr_un		1297578	0					
ANR	1297592	Argument	ctx		1297578	3					
ANR	1297593	Identifier	ctx		1297578	0					
ANR	1297594	ReturnType	static void		1297578	1					
ANR	1297595	Identifier	from_zval_write_sockaddr_un		1297578	2					
ANR	1297596	ParameterList	"const zval * container , char * sockaddr , ser_context * ctx"		1297578	3					
ANR	1297597	Parameter	const zval * container	705:40:19240:19260	1297578	0	True				
ANR	1297598	ParameterType	const zval *		1297578	0					
ANR	1297599	Identifier	container		1297578	1					
ANR	1297600	Parameter	char * sockaddr	705:63:19263:19276	1297578	1	True				
ANR	1297601	ParameterType	char *		1297578	0					
ANR	1297602	Identifier	sockaddr		1297578	1					
ANR	1297603	Parameter	ser_context * ctx	705:79:19279:19294	1297578	2	True				
ANR	1297604	ParameterType	ser_context *		1297578	0					
ANR	1297605	Identifier	ctx		1297578	1					
ANR	1297606	CFGEntryNode	ENTRY		1297578		True				
ANR	1297607	CFGExitNode	EXIT		1297578		True				
ANR	1297608	Symbol	container		1297578						
ANR	1297609	Symbol	descriptors_sockaddr_un		1297578						
ANR	1297610	Symbol	ctx		1297578						
ANR	1297611	Symbol	sockaddr		1297578						
ANR	1297612	Function	to_zval_read_sockaddr_un	709:0:19382:19534							
ANR	1297613	FunctionDef	"to_zval_read_sockaddr_un (const char * data , zval * zv , res_context * ctx)"		1297612	0					
ANR	1297614	CompoundStatement		710:0:19465:19534	1297612	0					
ANR	1297615	ExpressionStatement	"to_zval_read_aggregation ( data , zv , descriptors_sockaddr_un , ctx )"	711:1:19468:19532	1297612	0	True				
ANR	1297616	CallExpression	"to_zval_read_aggregation ( data , zv , descriptors_sockaddr_un , ctx )"		1297612	0					
ANR	1297617	Callee	to_zval_read_aggregation		1297612	0					
ANR	1297618	Identifier	to_zval_read_aggregation		1297612	0					
ANR	1297619	ArgumentList	data		1297612	1					
ANR	1297620	Argument	data		1297612	0					
ANR	1297621	Identifier	data		1297612	0					
ANR	1297622	Argument	zv		1297612	1					
ANR	1297623	Identifier	zv		1297612	0					
ANR	1297624	Argument	descriptors_sockaddr_un		1297612	2					
ANR	1297625	Identifier	descriptors_sockaddr_un		1297612	0					
ANR	1297626	Argument	ctx		1297612	3					
ANR	1297627	Identifier	ctx		1297612	0					
ANR	1297628	ReturnType	static void		1297612	1					
ANR	1297629	Identifier	to_zval_read_sockaddr_un		1297612	2					
ANR	1297630	ParameterList	"const char * data , zval * zv , res_context * ctx"		1297612	3					
ANR	1297631	Parameter	const char * data	709:37:19419:19434	1297612	0	True				
ANR	1297632	ParameterType	const char *		1297612	0					
ANR	1297633	Identifier	data		1297612	1					
ANR	1297634	Parameter	zval * zv	709:55:19437:19444	1297612	1	True				
ANR	1297635	ParameterType	zval *		1297612	0					
ANR	1297636	Identifier	zv		1297612	1					
ANR	1297637	Parameter	res_context * ctx	709:65:19447:19462	1297612	2	True				
ANR	1297638	ParameterType	res_context *		1297612	0					
ANR	1297639	Identifier	ctx		1297612	1					
ANR	1297640	CFGEntryNode	ENTRY		1297612		True				
ANR	1297641	CFGExitNode	EXIT		1297612		True				
ANR	1297642	Symbol	data		1297612						
ANR	1297643	Symbol	descriptors_sockaddr_un		1297612						
ANR	1297644	Symbol	ctx		1297612						
ANR	1297645	Symbol	zv		1297612						
ANR	1297646	Function	from_zval_write_sockaddr_aux	713:0:19536:22416							
ANR	1297647	FunctionDef	"from_zval_write_sockaddr_aux (const zval * container , struct sockaddr * * sockaddr_ptr , socklen_t * sockaddr_len , ser_context * ctx)"		1297646	0					
ANR	1297648	CompoundStatement		717:0:19708:22416	1297646	0					
ANR	1297649	IdentifierDeclStatement	int family ;	718:1:19711:19722	1297646	0	True				
ANR	1297650	IdentifierDecl	family		1297646	0					
ANR	1297651	IdentifierDeclType	int		1297646	0					
ANR	1297652	Identifier	family		1297646	1					
ANR	1297653	IdentifierDeclStatement	zval * * elem ;	719:1:19725:19736	1297646	1	True				
ANR	1297654	IdentifierDecl	* * elem		1297646	0					
ANR	1297655	IdentifierDeclType	zval * *		1297646	0					
ANR	1297656	Identifier	elem		1297646	1					
ANR	1297657	IdentifierDeclStatement	int fill_sockaddr ;	720:1:19739:19757	1297646	2	True				
ANR	1297658	IdentifierDecl	fill_sockaddr		1297646	0					
ANR	1297659	IdentifierDeclType	int		1297646	0					
ANR	1297660	Identifier	fill_sockaddr		1297646	1					
ANR	1297661	IfStatement	if ( Z_TYPE_P ( container ) != IS_ARRAY )		1297646	3					
ANR	1297662	Condition	Z_TYPE_P ( container ) != IS_ARRAY	722:5:19765:19795	1297646	0	True				
ANR	1297663	EqualityExpression	Z_TYPE_P ( container ) != IS_ARRAY		1297646	0		!=			
ANR	1297664	CallExpression	Z_TYPE_P ( container )		1297646	0					
ANR	1297665	Callee	Z_TYPE_P		1297646	0					
ANR	1297666	Identifier	Z_TYPE_P		1297646	0					
ANR	1297667	ArgumentList	container		1297646	1					
ANR	1297668	Argument	container		1297646	0					
ANR	1297669	Identifier	container		1297646	0					
ANR	1297670	Identifier	IS_ARRAY		1297646	1					
ANR	1297671	CompoundStatement		6:38:89:89	1297646	1					
ANR	1297672	ExpressionStatement	"do_from_zval_err ( ctx , ""%s"" , ""expected an array here"" )"	723:2:19802:19855	1297646	0	True				
ANR	1297673	CallExpression	"do_from_zval_err ( ctx , ""%s"" , ""expected an array here"" )"		1297646	0					
ANR	1297674	Callee	do_from_zval_err		1297646	0					
ANR	1297675	Identifier	do_from_zval_err		1297646	0					
ANR	1297676	ArgumentList	ctx		1297646	1					
ANR	1297677	Argument	ctx		1297646	0					
ANR	1297678	Identifier	ctx		1297646	0					
ANR	1297679	Argument	"""%s"""		1297646	1					
ANR	1297680	PrimaryExpression	"""%s"""		1297646	0					
ANR	1297681	Argument	"""expected an array here"""		1297646	2					
ANR	1297682	PrimaryExpression	"""expected an array here"""		1297646	0					
ANR	1297683	ReturnStatement	return ;	724:2:19859:19865	1297646	1	True				
ANR	1297684	ExpressionStatement	"fill_sockaddr = param_get_bool ( ctx , KEY_FILL_SOCKADDR , 1 )"	727:1:19872:19929	1297646	4	True				
ANR	1297685	AssignmentExpression	"fill_sockaddr = param_get_bool ( ctx , KEY_FILL_SOCKADDR , 1 )"		1297646	0		=			
ANR	1297686	Identifier	fill_sockaddr		1297646	0					
ANR	1297687	CallExpression	"param_get_bool ( ctx , KEY_FILL_SOCKADDR , 1 )"		1297646	1					
ANR	1297688	Callee	param_get_bool		1297646	0					
ANR	1297689	Identifier	param_get_bool		1297646	0					
ANR	1297690	ArgumentList	ctx		1297646	1					
ANR	1297691	Argument	ctx		1297646	0					
ANR	1297692	Identifier	ctx		1297646	0					
ANR	1297693	Argument	KEY_FILL_SOCKADDR		1297646	1					
ANR	1297694	Identifier	KEY_FILL_SOCKADDR		1297646	0					
ANR	1297695	Argument	1		1297646	2					
ANR	1297696	PrimaryExpression	1		1297646	0					
ANR	1297697	IfStatement	"if ( zend_hash_find ( Z_ARRVAL_P ( container ) , ""family"" , sizeof ( ""family"" ) , ( void * * ) & elem ) == SUCCESS && Z_TYPE_PP ( elem ) != IS_NULL )"		1297646	5					
ANR	1297698	Condition	"zend_hash_find ( Z_ARRVAL_P ( container ) , ""family"" , sizeof ( ""family"" ) , ( void * * ) & elem ) == SUCCESS && Z_TYPE_PP ( elem ) != IS_NULL"	729:5:19937:20060	1297646	0	True				
ANR	1297699	AndExpression	"zend_hash_find ( Z_ARRVAL_P ( container ) , ""family"" , sizeof ( ""family"" ) , ( void * * ) & elem ) == SUCCESS && Z_TYPE_PP ( elem ) != IS_NULL"		1297646	0		&&			
ANR	1297700	EqualityExpression	"zend_hash_find ( Z_ARRVAL_P ( container ) , ""family"" , sizeof ( ""family"" ) , ( void * * ) & elem ) == SUCCESS"		1297646	0		==			
ANR	1297701	CallExpression	"zend_hash_find ( Z_ARRVAL_P ( container ) , ""family"" , sizeof ( ""family"" ) , ( void * * ) & elem )"		1297646	0					
ANR	1297702	Callee	zend_hash_find		1297646	0					
ANR	1297703	Identifier	zend_hash_find		1297646	0					
ANR	1297704	ArgumentList	Z_ARRVAL_P ( container )		1297646	1					
ANR	1297705	Argument	Z_ARRVAL_P ( container )		1297646	0					
ANR	1297706	CallExpression	Z_ARRVAL_P ( container )		1297646	0					
ANR	1297707	Callee	Z_ARRVAL_P		1297646	0					
ANR	1297708	Identifier	Z_ARRVAL_P		1297646	0					
ANR	1297709	ArgumentList	container		1297646	1					
ANR	1297710	Argument	container		1297646	0					
ANR	1297711	Identifier	container		1297646	0					
ANR	1297712	Argument	"""family"""		1297646	1					
ANR	1297713	PrimaryExpression	"""family"""		1297646	0					
ANR	1297714	Argument	"sizeof ( ""family"" )"		1297646	2					
ANR	1297715	SizeofExpression	"sizeof ( ""family"" )"		1297646	0					
ANR	1297716	Sizeof	sizeof		1297646	0					
ANR	1297717	PrimaryExpression	"""family"""		1297646	1					
ANR	1297718	Argument	( void * * ) & elem		1297646	3					
ANR	1297719	CastExpression	( void * * ) & elem		1297646	0					
ANR	1297720	CastTarget	void * *		1297646	0					
ANR	1297721	UnaryOperationExpression	& elem		1297646	1					
ANR	1297722	UnaryOperator	&		1297646	0					
ANR	1297723	Identifier	elem		1297646	1					
ANR	1297724	Identifier	SUCCESS		1297646	1					
ANR	1297725	EqualityExpression	Z_TYPE_PP ( elem ) != IS_NULL		1297646	1		!=			
ANR	1297726	CallExpression	Z_TYPE_PP ( elem )		1297646	0					
ANR	1297727	Callee	Z_TYPE_PP		1297646	0					
ANR	1297728	Identifier	Z_TYPE_PP		1297646	0					
ANR	1297729	ArgumentList	elem		1297646	1					
ANR	1297730	Argument	elem		1297646	0					
ANR	1297731	Identifier	elem		1297646	0					
ANR	1297732	Identifier	IS_NULL		1297646	1					
ANR	1297733	CompoundStatement		15:2:358:385	1297646	1					
ANR	1297734	IdentifierDeclStatement	"const char * node = ""family"" ;"	731:2:20067:20094	1297646	0	True				
ANR	1297735	IdentifierDecl	"* node = ""family"""		1297646	0					
ANR	1297736	IdentifierDeclType	const char *		1297646	0					
ANR	1297737	Identifier	node		1297646	1					
ANR	1297738	AssignmentExpression	"* node = ""family"""		1297646	2		=			
ANR	1297739	Identifier	node		1297646	0					
ANR	1297740	PrimaryExpression	"""family"""		1297646	1					
ANR	1297741	ExpressionStatement	"zend_llist_add_element ( & ctx -> keys , & node )"	732:2:20098:20139	1297646	1	True				
ANR	1297742	CallExpression	"zend_llist_add_element ( & ctx -> keys , & node )"		1297646	0					
ANR	1297743	Callee	zend_llist_add_element		1297646	0					
ANR	1297744	Identifier	zend_llist_add_element		1297646	0					
ANR	1297745	ArgumentList	& ctx -> keys		1297646	1					
ANR	1297746	Argument	& ctx -> keys		1297646	0					
ANR	1297747	UnaryOperationExpression	& ctx -> keys		1297646	0					
ANR	1297748	UnaryOperator	&		1297646	0					
ANR	1297749	PtrMemberAccess	ctx -> keys		1297646	1					
ANR	1297750	Identifier	ctx		1297646	0					
ANR	1297751	Identifier	keys		1297646	1					
ANR	1297752	Argument	& node		1297646	1					
ANR	1297753	UnaryOperationExpression	& node		1297646	0					
ANR	1297754	UnaryOperator	&		1297646	0					
ANR	1297755	Identifier	node		1297646	1					
ANR	1297756	ExpressionStatement	"from_zval_write_int ( * elem , ( char * ) & family , ctx )"	733:2:20143:20190	1297646	2	True				
ANR	1297757	CallExpression	"from_zval_write_int ( * elem , ( char * ) & family , ctx )"		1297646	0					
ANR	1297758	Callee	from_zval_write_int		1297646	0					
ANR	1297759	Identifier	from_zval_write_int		1297646	0					
ANR	1297760	ArgumentList	* elem		1297646	1					
ANR	1297761	Argument	* elem		1297646	0					
ANR	1297762	UnaryOperationExpression	* elem		1297646	0					
ANR	1297763	UnaryOperator	*		1297646	0					
ANR	1297764	Identifier	elem		1297646	1					
ANR	1297765	Argument	( char * ) & family		1297646	1					
ANR	1297766	CastExpression	( char * ) & family		1297646	0					
ANR	1297767	CastTarget	char *		1297646	0					
ANR	1297768	UnaryOperationExpression	& family		1297646	1					
ANR	1297769	UnaryOperator	&		1297646	0					
ANR	1297770	Identifier	family		1297646	1					
ANR	1297771	Argument	ctx		1297646	2					
ANR	1297772	Identifier	ctx		1297646	0					
ANR	1297773	ExpressionStatement	zend_llist_remove_tail ( & ctx -> keys )	734:2:20194:20228	1297646	3	True				
ANR	1297774	CallExpression	zend_llist_remove_tail ( & ctx -> keys )		1297646	0					
ANR	1297775	Callee	zend_llist_remove_tail		1297646	0					
ANR	1297776	Identifier	zend_llist_remove_tail		1297646	0					
ANR	1297777	ArgumentList	& ctx -> keys		1297646	1					
ANR	1297778	Argument	& ctx -> keys		1297646	0					
ANR	1297779	UnaryOperationExpression	& ctx -> keys		1297646	0					
ANR	1297780	UnaryOperator	&		1297646	0					
ANR	1297781	PtrMemberAccess	ctx -> keys		1297646	1					
ANR	1297782	Identifier	ctx		1297646	0					
ANR	1297783	Identifier	keys		1297646	1					
ANR	1297784	ElseStatement	else		1297646	0					
ANR	1297785	CompoundStatement		19:8:529:529	1297646	0					
ANR	1297786	ExpressionStatement	family = ctx -> sock -> type	736:2:20242:20266	1297646	0	True				
ANR	1297787	AssignmentExpression	family = ctx -> sock -> type		1297646	0		=			
ANR	1297788	Identifier	family		1297646	0					
ANR	1297789	PtrMemberAccess	ctx -> sock -> type		1297646	1					
ANR	1297790	PtrMemberAccess	ctx -> sock		1297646	0					
ANR	1297791	Identifier	ctx		1297646	0					
ANR	1297792	Identifier	sock		1297646	1					
ANR	1297793	Identifier	type		1297646	1					
ANR	1297794	SwitchStatement	switch ( family )		1297646	6					
ANR	1297795	Condition	family	739:9:20281:20286	1297646	0	True				
ANR	1297796	Identifier	family		1297646	0					
ANR	1297797	CompoundStatement		23:17:580:580	1297646	1					
ANR	1297798	Label	case AF_INET :	740:1:20292:20304	1297646	0	True				
ANR	1297799	Identifier	AF_INET		1297646	0					
ANR	1297800	IfStatement	if ( ctx -> sock -> type != AF_INET && ctx -> sock -> type != AF_INET6 )		1297646	1					
ANR	1297801	Condition	ctx -> sock -> type != AF_INET && ctx -> sock -> type != AF_INET6	742:6:20381:20437	1297646	0	True				
ANR	1297802	AndExpression	ctx -> sock -> type != AF_INET && ctx -> sock -> type != AF_INET6		1297646	0		&&			
ANR	1297803	EqualityExpression	ctx -> sock -> type != AF_INET		1297646	0		!=			
ANR	1297804	PtrMemberAccess	ctx -> sock -> type		1297646	0					
ANR	1297805	PtrMemberAccess	ctx -> sock		1297646	0					
ANR	1297806	Identifier	ctx		1297646	0					
ANR	1297807	Identifier	sock		1297646	1					
ANR	1297808	Identifier	type		1297646	1					
ANR	1297809	Identifier	AF_INET		1297646	1					
ANR	1297810	EqualityExpression	ctx -> sock -> type != AF_INET6		1297646	1		!=			
ANR	1297811	PtrMemberAccess	ctx -> sock -> type		1297646	0					
ANR	1297812	PtrMemberAccess	ctx -> sock		1297646	0					
ANR	1297813	Identifier	ctx		1297646	0					
ANR	1297814	Identifier	sock		1297646	1					
ANR	1297815	Identifier	type		1297646	1					
ANR	1297816	Identifier	AF_INET6		1297646	1					
ANR	1297817	CompoundStatement		26:65:731:731	1297646	1					
ANR	1297818	Statement	do_from_zval_err	743:3:20445:20460	1297646	0	True				
ANR	1297819	Statement	(	743:19:20461:20461	1297646	1	True				
ANR	1297820	Statement	ctx	743:20:20462:20464	1297646	2	True				
ANR	1297821	Statement	","	743:23:20465:20465	1297646	3	True				
ANR	1297822	Statement	"""the specified family (number %d) is not """	743:25:20467:20508	1297646	4	True				
ANR	1297823	Statement	"""supported on this socket"""	744:5:20515:20540	1297646	5	True				
ANR	1297824	Statement	","	744:31:20541:20541	1297646	6	True				
ANR	1297825	Statement	family	744:33:20543:20548	1297646	7	True				
ANR	1297826	Statement	)	744:39:20549:20549	1297646	8	True				
ANR	1297827	ExpressionStatement		744:40:20550:20550	1297646	9	True				
ANR	1297828	ReturnStatement	return ;	745:3:20555:20561	1297646	10	True				
ANR	1297829	ExpressionStatement	"* sockaddr_ptr = accounted_ecalloc ( 1 , sizeof ( struct sockaddr_in ) , ctx )"	747:2:20569:20638	1297646	2	True				
ANR	1297830	AssignmentExpression	"* sockaddr_ptr = accounted_ecalloc ( 1 , sizeof ( struct sockaddr_in ) , ctx )"		1297646	0		=			
ANR	1297831	UnaryOperationExpression	* sockaddr_ptr		1297646	0					
ANR	1297832	UnaryOperator	*		1297646	0					
ANR	1297833	Identifier	sockaddr_ptr		1297646	1					
ANR	1297834	CallExpression	"accounted_ecalloc ( 1 , sizeof ( struct sockaddr_in ) , ctx )"		1297646	1					
ANR	1297835	Callee	accounted_ecalloc		1297646	0					
ANR	1297836	Identifier	accounted_ecalloc		1297646	0					
ANR	1297837	ArgumentList	1		1297646	1					
ANR	1297838	Argument	1		1297646	0					
ANR	1297839	PrimaryExpression	1		1297646	0					
ANR	1297840	Argument	sizeof ( struct sockaddr_in )		1297646	1					
ANR	1297841	SizeofExpression	sizeof ( struct sockaddr_in )		1297646	0					
ANR	1297842	Sizeof	sizeof		1297646	0					
ANR	1297843	SizeofOperand	struct sockaddr_in		1297646	1					
ANR	1297844	Argument	ctx		1297646	2					
ANR	1297845	Identifier	ctx		1297646	0					
ANR	1297846	ExpressionStatement	* sockaddr_len = sizeof ( struct sockaddr_in )	748:2:20642:20684	1297646	3	True				
ANR	1297847	AssignmentExpression	* sockaddr_len = sizeof ( struct sockaddr_in )		1297646	0		=			
ANR	1297848	UnaryOperationExpression	* sockaddr_len		1297646	0					
ANR	1297849	UnaryOperator	*		1297646	0					
ANR	1297850	Identifier	sockaddr_len		1297646	1					
ANR	1297851	SizeofExpression	sizeof ( struct sockaddr_in )		1297646	1					
ANR	1297852	Sizeof	sizeof		1297646	0					
ANR	1297853	SizeofOperand	struct sockaddr_in		1297646	1					
ANR	1297854	IfStatement	if ( fill_sockaddr )		1297646	4					
ANR	1297855	Condition	fill_sockaddr	749:6:20692:20704	1297646	0	True				
ANR	1297856	Identifier	fill_sockaddr		1297646	0					
ANR	1297857	CompoundStatement		33:21:998:998	1297646	1					
ANR	1297858	ExpressionStatement	"from_zval_write_sockaddr_in ( container , ( char * ) * sockaddr_ptr , ctx )"	750:3:20712:20777	1297646	0	True				
ANR	1297859	CallExpression	"from_zval_write_sockaddr_in ( container , ( char * ) * sockaddr_ptr , ctx )"		1297646	0					
ANR	1297860	Callee	from_zval_write_sockaddr_in		1297646	0					
ANR	1297861	Identifier	from_zval_write_sockaddr_in		1297646	0					
ANR	1297862	ArgumentList	container		1297646	1					
ANR	1297863	Argument	container		1297646	0					
ANR	1297864	Identifier	container		1297646	0					
ANR	1297865	Argument	( char * ) * sockaddr_ptr		1297646	1					
ANR	1297866	CastExpression	( char * ) * sockaddr_ptr		1297646	0					
ANR	1297867	CastTarget	char *		1297646	0					
ANR	1297868	UnaryOperationExpression	* sockaddr_ptr		1297646	1					
ANR	1297869	UnaryOperator	*		1297646	0					
ANR	1297870	Identifier	sockaddr_ptr		1297646	1					
ANR	1297871	Argument	ctx		1297646	2					
ANR	1297872	Identifier	ctx		1297646	0					
ANR	1297873	ExpressionStatement	( * sockaddr_ptr ) -> sa_family = AF_INET	751:3:20782:20818	1297646	1	True				
ANR	1297874	AssignmentExpression	( * sockaddr_ptr ) -> sa_family = AF_INET		1297646	0		=			
ANR	1297875	PtrMemberAccess	( * sockaddr_ptr ) -> sa_family		1297646	0					
ANR	1297876	UnaryOperationExpression	* sockaddr_ptr		1297646	0					
ANR	1297877	UnaryOperator	*		1297646	0					
ANR	1297878	Identifier	sockaddr_ptr		1297646	1					
ANR	1297879	Identifier	sa_family		1297646	1					
ANR	1297880	Identifier	AF_INET		1297646	1					
ANR	1297881	BreakStatement	break ;	753:2:20826:20831	1297646	5	True				
ANR	1297882	Label	case AF_INET6 :	756:1:20849:20862	1297646	6	True				
ANR	1297883	Identifier	AF_INET6		1297646	0					
ANR	1297884	IfStatement	if ( ctx -> sock -> type != AF_INET6 )		1297646	7					
ANR	1297885	Condition	ctx -> sock -> type != AF_INET6	757:6:20870:20896	1297646	0	True				
ANR	1297886	EqualityExpression	ctx -> sock -> type != AF_INET6		1297646	0		!=			
ANR	1297887	PtrMemberAccess	ctx -> sock -> type		1297646	0					
ANR	1297888	PtrMemberAccess	ctx -> sock		1297646	0					
ANR	1297889	Identifier	ctx		1297646	0					
ANR	1297890	Identifier	sock		1297646	1					
ANR	1297891	Identifier	type		1297646	1					
ANR	1297892	Identifier	AF_INET6		1297646	1					
ANR	1297893	CompoundStatement		41:35:1190:1190	1297646	1					
ANR	1297894	Statement	do_from_zval_err	758:3:20904:20919	1297646	0	True				
ANR	1297895	Statement	(	758:19:20920:20920	1297646	1	True				
ANR	1297896	Statement	ctx	758:20:20921:20923	1297646	2	True				
ANR	1297897	Statement	","	758:23:20924:20924	1297646	3	True				
ANR	1297898	Statement	"""the specified family (AF_INET6) is not """	758:25:20926:20966	1297646	4	True				
ANR	1297899	Statement	"""supported on this socket"""	759:5:20973:20998	1297646	5	True				
ANR	1297900	Statement	)	759:31:20999:20999	1297646	6	True				
ANR	1297901	ExpressionStatement		759:32:21000:21000	1297646	7	True				
ANR	1297902	ReturnStatement	return ;	760:3:21005:21011	1297646	8	True				
ANR	1297903	ExpressionStatement	"* sockaddr_ptr = accounted_ecalloc ( 1 , sizeof ( struct sockaddr_in6 ) , ctx )"	762:2:21019:21089	1297646	8	True				
ANR	1297904	AssignmentExpression	"* sockaddr_ptr = accounted_ecalloc ( 1 , sizeof ( struct sockaddr_in6 ) , ctx )"		1297646	0		=			
ANR	1297905	UnaryOperationExpression	* sockaddr_ptr		1297646	0					
ANR	1297906	UnaryOperator	*		1297646	0					
ANR	1297907	Identifier	sockaddr_ptr		1297646	1					
ANR	1297908	CallExpression	"accounted_ecalloc ( 1 , sizeof ( struct sockaddr_in6 ) , ctx )"		1297646	1					
ANR	1297909	Callee	accounted_ecalloc		1297646	0					
ANR	1297910	Identifier	accounted_ecalloc		1297646	0					
ANR	1297911	ArgumentList	1		1297646	1					
ANR	1297912	Argument	1		1297646	0					
ANR	1297913	PrimaryExpression	1		1297646	0					
ANR	1297914	Argument	sizeof ( struct sockaddr_in6 )		1297646	1					
ANR	1297915	SizeofExpression	sizeof ( struct sockaddr_in6 )		1297646	0					
ANR	1297916	Sizeof	sizeof		1297646	0					
ANR	1297917	SizeofOperand	struct sockaddr_in6		1297646	1					
ANR	1297918	Argument	ctx		1297646	2					
ANR	1297919	Identifier	ctx		1297646	0					
ANR	1297920	ExpressionStatement	* sockaddr_len = sizeof ( struct sockaddr_in6 )	763:2:21093:21136	1297646	9	True				
ANR	1297921	AssignmentExpression	* sockaddr_len = sizeof ( struct sockaddr_in6 )		1297646	0		=			
ANR	1297922	UnaryOperationExpression	* sockaddr_len		1297646	0					
ANR	1297923	UnaryOperator	*		1297646	0					
ANR	1297924	Identifier	sockaddr_len		1297646	1					
ANR	1297925	SizeofExpression	sizeof ( struct sockaddr_in6 )		1297646	1					
ANR	1297926	Sizeof	sizeof		1297646	0					
ANR	1297927	SizeofOperand	struct sockaddr_in6		1297646	1					
ANR	1297928	IfStatement	if ( fill_sockaddr )		1297646	10					
ANR	1297929	Condition	fill_sockaddr	764:6:21144:21156	1297646	0	True				
ANR	1297930	Identifier	fill_sockaddr		1297646	0					
ANR	1297931	CompoundStatement		48:21:1450:1450	1297646	1					
ANR	1297932	ExpressionStatement	"from_zval_write_sockaddr_in6 ( container , ( char * ) * sockaddr_ptr , ctx )"	765:3:21164:21230	1297646	0	True				
ANR	1297933	CallExpression	"from_zval_write_sockaddr_in6 ( container , ( char * ) * sockaddr_ptr , ctx )"		1297646	0					
ANR	1297934	Callee	from_zval_write_sockaddr_in6		1297646	0					
ANR	1297935	Identifier	from_zval_write_sockaddr_in6		1297646	0					
ANR	1297936	ArgumentList	container		1297646	1					
ANR	1297937	Argument	container		1297646	0					
ANR	1297938	Identifier	container		1297646	0					
ANR	1297939	Argument	( char * ) * sockaddr_ptr		1297646	1					
ANR	1297940	CastExpression	( char * ) * sockaddr_ptr		1297646	0					
ANR	1297941	CastTarget	char *		1297646	0					
ANR	1297942	UnaryOperationExpression	* sockaddr_ptr		1297646	1					
ANR	1297943	UnaryOperator	*		1297646	0					
ANR	1297944	Identifier	sockaddr_ptr		1297646	1					
ANR	1297945	Argument	ctx		1297646	2					
ANR	1297946	Identifier	ctx		1297646	0					
ANR	1297947	ExpressionStatement	( * sockaddr_ptr ) -> sa_family = AF_INET6	766:3:21235:21272	1297646	1	True				
ANR	1297948	AssignmentExpression	( * sockaddr_ptr ) -> sa_family = AF_INET6		1297646	0		=			
ANR	1297949	PtrMemberAccess	( * sockaddr_ptr ) -> sa_family		1297646	0					
ANR	1297950	UnaryOperationExpression	* sockaddr_ptr		1297646	0					
ANR	1297951	UnaryOperator	*		1297646	0					
ANR	1297952	Identifier	sockaddr_ptr		1297646	1					
ANR	1297953	Identifier	sa_family		1297646	1					
ANR	1297954	Identifier	AF_INET6		1297646	1					
ANR	1297955	BreakStatement	break ;	768:2:21280:21285	1297646	11	True				
ANR	1297956	Label	case AF_UNIX :	771:1:21312:21324	1297646	12	True				
ANR	1297957	Identifier	AF_UNIX		1297646	0					
ANR	1297958	IfStatement	if ( ctx -> sock -> type != AF_UNIX )		1297646	13					
ANR	1297959	Condition	ctx -> sock -> type != AF_UNIX	772:6:21332:21357	1297646	0	True				
ANR	1297960	EqualityExpression	ctx -> sock -> type != AF_UNIX		1297646	0		!=			
ANR	1297961	PtrMemberAccess	ctx -> sock -> type		1297646	0					
ANR	1297962	PtrMemberAccess	ctx -> sock		1297646	0					
ANR	1297963	Identifier	ctx		1297646	0					
ANR	1297964	Identifier	sock		1297646	1					
ANR	1297965	Identifier	type		1297646	1					
ANR	1297966	Identifier	AF_UNIX		1297646	1					
ANR	1297967	CompoundStatement		56:34:1651:1651	1297646	1					
ANR	1297968	Statement	do_from_zval_err	773:3:21365:21380	1297646	0	True				
ANR	1297969	Statement	(	773:19:21381:21381	1297646	1	True				
ANR	1297970	Statement	ctx	773:20:21382:21384	1297646	2	True				
ANR	1297971	Statement	","	773:23:21385:21385	1297646	3	True				
ANR	1297972	Statement	"""the specified family (AF_UNIX) is not """	773:25:21387:21426	1297646	4	True				
ANR	1297973	Statement	"""supported on this socket"""	774:5:21433:21458	1297646	5	True				
ANR	1297974	Statement	)	774:31:21459:21459	1297646	6	True				
ANR	1297975	ExpressionStatement		774:32:21460:21460	1297646	7	True				
ANR	1297976	ReturnStatement	return ;	775:3:21465:21471	1297646	8	True				
ANR	1297977	ExpressionStatement	"* sockaddr_ptr = accounted_ecalloc ( 1 , sizeof ( struct sockaddr_un ) , ctx )"	777:2:21479:21548	1297646	14	True				
ANR	1297978	AssignmentExpression	"* sockaddr_ptr = accounted_ecalloc ( 1 , sizeof ( struct sockaddr_un ) , ctx )"		1297646	0		=			
ANR	1297979	UnaryOperationExpression	* sockaddr_ptr		1297646	0					
ANR	1297980	UnaryOperator	*		1297646	0					
ANR	1297981	Identifier	sockaddr_ptr		1297646	1					
ANR	1297982	CallExpression	"accounted_ecalloc ( 1 , sizeof ( struct sockaddr_un ) , ctx )"		1297646	1					
ANR	1297983	Callee	accounted_ecalloc		1297646	0					
ANR	1297984	Identifier	accounted_ecalloc		1297646	0					
ANR	1297985	ArgumentList	1		1297646	1					
ANR	1297986	Argument	1		1297646	0					
ANR	1297987	PrimaryExpression	1		1297646	0					
ANR	1297988	Argument	sizeof ( struct sockaddr_un )		1297646	1					
ANR	1297989	SizeofExpression	sizeof ( struct sockaddr_un )		1297646	0					
ANR	1297990	Sizeof	sizeof		1297646	0					
ANR	1297991	SizeofOperand	struct sockaddr_un		1297646	1					
ANR	1297992	Argument	ctx		1297646	2					
ANR	1297993	Identifier	ctx		1297646	0					
ANR	1297994	IfStatement	if ( fill_sockaddr )		1297646	15					
ANR	1297995	Condition	fill_sockaddr	778:6:21556:21568	1297646	0	True				
ANR	1297996	Identifier	fill_sockaddr		1297646	0					
ANR	1297997	CompoundStatement		63:3:1867:1931	1297646	1					
ANR	1297998	IdentifierDeclStatement	struct sockaddr_un * sock_un = ( struct sockaddr_un * ) * sockaddr_ptr ;	779:3:21576:21640	1297646	0	True				
ANR	1297999	IdentifierDecl	* sock_un = ( struct sockaddr_un * ) * sockaddr_ptr		1297646	0					
ANR	1298000	IdentifierDeclType	struct sockaddr_un *		1297646	0					
ANR	1298001	Identifier	sock_un		1297646	1					
ANR	1298002	AssignmentExpression	* sock_un = ( struct sockaddr_un * ) * sockaddr_ptr		1297646	2		=			
ANR	1298003	Identifier	sock_un		1297646	0					
ANR	1298004	CastExpression	( struct sockaddr_un * ) * sockaddr_ptr		1297646	1					
ANR	1298005	CastTarget	struct sockaddr_un *		1297646	0					
ANR	1298006	UnaryOperationExpression	* sockaddr_ptr		1297646	1					
ANR	1298007	UnaryOperator	*		1297646	0					
ANR	1298008	Identifier	sockaddr_ptr		1297646	1					
ANR	1298009	ExpressionStatement	"from_zval_write_sockaddr_un ( container , ( char * ) * sockaddr_ptr , ctx )"	781:3:21646:21711	1297646	1	True				
ANR	1298010	CallExpression	"from_zval_write_sockaddr_un ( container , ( char * ) * sockaddr_ptr , ctx )"		1297646	0					
ANR	1298011	Callee	from_zval_write_sockaddr_un		1297646	0					
ANR	1298012	Identifier	from_zval_write_sockaddr_un		1297646	0					
ANR	1298013	ArgumentList	container		1297646	1					
ANR	1298014	Argument	container		1297646	0					
ANR	1298015	Identifier	container		1297646	0					
ANR	1298016	Argument	( char * ) * sockaddr_ptr		1297646	1					
ANR	1298017	CastExpression	( char * ) * sockaddr_ptr		1297646	0					
ANR	1298018	CastTarget	char *		1297646	0					
ANR	1298019	UnaryOperationExpression	* sockaddr_ptr		1297646	1					
ANR	1298020	UnaryOperator	*		1297646	0					
ANR	1298021	Identifier	sockaddr_ptr		1297646	1					
ANR	1298022	Argument	ctx		1297646	2					
ANR	1298023	Identifier	ctx		1297646	0					
ANR	1298024	ExpressionStatement	( * sockaddr_ptr ) -> sa_family = AF_UNIX	782:3:21716:21752	1297646	2	True				
ANR	1298025	AssignmentExpression	( * sockaddr_ptr ) -> sa_family = AF_UNIX		1297646	0		=			
ANR	1298026	PtrMemberAccess	( * sockaddr_ptr ) -> sa_family		1297646	0					
ANR	1298027	UnaryOperationExpression	* sockaddr_ptr		1297646	0					
ANR	1298028	UnaryOperator	*		1297646	0					
ANR	1298029	Identifier	sockaddr_ptr		1297646	1					
ANR	1298030	Identifier	sa_family		1297646	1					
ANR	1298031	Identifier	AF_UNIX		1297646	1					
ANR	1298032	Statement	*	788:3:22039:22039	1297646	3	True				
ANR	1298033	Statement	sockaddr_len	788:4:22040:22051	1297646	4	True				
ANR	1298034	Statement	=	788:17:22053:22053	1297646	5	True				
ANR	1298035	Statement	offsetof	788:19:22055:22062	1297646	6	True				
ANR	1298036	Statement	(	788:27:22063:22063	1297646	7	True				
ANR	1298037	Statement	struct	788:28:22064:22069	1297646	8	True				
ANR	1298038	Statement	sockaddr_un	788:35:22071:22081	1297646	9	True				
ANR	1298039	Statement	","	788:46:22082:22082	1297646	10	True				
ANR	1298040	Statement	sun_path	788:48:22084:22091	1297646	11	True				
ANR	1298041	Statement	)	788:56:22092:22092	1297646	12	True				
ANR	1298042	ExpressionStatement	+ ( sock_un -> sun_path [ 0 ] == '\\0' ? ( 1 + strlen ( & sock_un -> sun_path [ 1 ] ) ) : strlen ( sock_un -> sun_path ) )	788:58:22094:22207	1297646	13	True				
ANR	1298043	UnaryOperationExpression	+ ( sock_un -> sun_path [ 0 ] == '\\0' ? ( 1 + strlen ( & sock_un -> sun_path [ 1 ] ) ) : strlen ( sock_un -> sun_path ) )		1297646	0					
ANR	1298044	UnaryOperator	+		1297646	0					
ANR	1298045	ConditionalExpression	sock_un -> sun_path [ 0 ] == '\\0' ? ( 1 + strlen ( & sock_un -> sun_path [ 1 ] ) ) : strlen ( sock_un -> sun_path )		1297646	1					
ANR	1298046	Condition	sock_un -> sun_path [ 0 ] == '\\0'		1297646	0					
ANR	1298047	EqualityExpression	sock_un -> sun_path [ 0 ] == '\\0'		1297646	0		==			
ANR	1298048	ArrayIndexing	sock_un -> sun_path [ 0 ]		1297646	0					
ANR	1298049	PtrMemberAccess	sock_un -> sun_path		1297646	0					
ANR	1298050	Identifier	sock_un		1297646	0					
ANR	1298051	Identifier	sun_path		1297646	1					
ANR	1298052	PrimaryExpression	0		1297646	1					
ANR	1298053	PrimaryExpression	'\\0'		1297646	1					
ANR	1298054	AdditiveExpression	1 + strlen ( & sock_un -> sun_path [ 1 ] )		1297646	1		+			
ANR	1298055	PrimaryExpression	1		1297646	0					
ANR	1298056	CallExpression	strlen ( & sock_un -> sun_path [ 1 ] )		1297646	1					
ANR	1298057	Callee	strlen		1297646	0					
ANR	1298058	Identifier	strlen		1297646	0					
ANR	1298059	ArgumentList	& sock_un -> sun_path [ 1 ]		1297646	1					
ANR	1298060	Argument	& sock_un -> sun_path [ 1 ]		1297646	0					
ANR	1298061	UnaryOperationExpression	& sock_un -> sun_path [ 1 ]		1297646	0					
ANR	1298062	UnaryOperator	&		1297646	0					
ANR	1298063	ArrayIndexing	sock_un -> sun_path [ 1 ]		1297646	1					
ANR	1298064	PtrMemberAccess	sock_un -> sun_path		1297646	0					
ANR	1298065	Identifier	sock_un		1297646	0					
ANR	1298066	Identifier	sun_path		1297646	1					
ANR	1298067	PrimaryExpression	1		1297646	1					
ANR	1298068	CallExpression	strlen ( sock_un -> sun_path )		1297646	2					
ANR	1298069	Callee	strlen		1297646	0					
ANR	1298070	Identifier	strlen		1297646	0					
ANR	1298071	ArgumentList	sock_un -> sun_path		1297646	1					
ANR	1298072	Argument	sock_un -> sun_path		1297646	0					
ANR	1298073	PtrMemberAccess	sock_un -> sun_path		1297646	0					
ANR	1298074	Identifier	sock_un		1297646	0					
ANR	1298075	Identifier	sun_path		1297646	1					
ANR	1298076	ElseStatement	else		1297646	0					
ANR	1298077	CompoundStatement		76:9:2509:2509	1297646	0					
ANR	1298078	ExpressionStatement	* sockaddr_len = sizeof ( struct sockaddr_un )	793:3:22223:22265	1297646	0	True				
ANR	1298079	AssignmentExpression	* sockaddr_len = sizeof ( struct sockaddr_un )		1297646	0		=			
ANR	1298080	UnaryOperationExpression	* sockaddr_len		1297646	0					
ANR	1298081	UnaryOperator	*		1297646	0					
ANR	1298082	Identifier	sockaddr_len		1297646	1					
ANR	1298083	SizeofExpression	sizeof ( struct sockaddr_un )		1297646	1					
ANR	1298084	Sizeof	sizeof		1297646	0					
ANR	1298085	SizeofOperand	struct sockaddr_un		1297646	1					
ANR	1298086	BreakStatement	break ;	795:2:22273:22278	1297646	16	True				
ANR	1298087	Label	default :	797:1:22282:22289	1297646	17	True				
ANR	1298088	Identifier	default		1297646	0					
ANR	1298089	Statement	do_from_zval_err	798:2:22293:22308	1297646	18	True				
ANR	1298090	Statement	(	798:18:22309:22309	1297646	19	True				
ANR	1298091	Statement	ctx	798:19:22310:22312	1297646	20	True				
ANR	1298092	Statement	","	798:22:22313:22313	1297646	21	True				
ANR	1298093	Statement	"""%s"""	798:24:22315:22318	1297646	22	True				
ANR	1298094	Statement	","	798:28:22319:22319	1297646	23	True				
ANR	1298095	Statement	"""the only families currently supported are """	798:30:22321:22364	1297646	24	True				
ANR	1298096	Statement	"""AF_INET, AF_INET6 and AF_UNIX"""	799:4:22370:22400	1297646	25	True				
ANR	1298097	Statement	)	799:35:22401:22401	1297646	26	True				
ANR	1298098	ExpressionStatement		799:36:22402:22402	1297646	27	True				
ANR	1298099	BreakStatement	break ;	800:2:22406:22411	1297646	28	True				
ANR	1298100	ReturnType	static void		1297646	1					
ANR	1298101	Identifier	from_zval_write_sockaddr_aux		1297646	2					
ANR	1298102	ParameterList	"const zval * container , struct sockaddr * * sockaddr_ptr , socklen_t * sockaddr_len , ser_context * ctx"		1297646	3					
ANR	1298103	Parameter	const zval * container	713:41:19577:19597	1297646	0	True				
ANR	1298104	ParameterType	const zval *		1297646	0					
ANR	1298105	Identifier	container		1297646	1					
ANR	1298106	Parameter	struct sockaddr * * sockaddr_ptr	714:11:19611:19640	1297646	1	True				
ANR	1298107	ParameterType	struct sockaddr * *		1297646	0					
ANR	1298108	Identifier	sockaddr_ptr		1297646	1					
ANR	1298109	Parameter	socklen_t * sockaddr_len	715:11:19654:19676	1297646	2	True				
ANR	1298110	ParameterType	socklen_t *		1297646	0					
ANR	1298111	Identifier	sockaddr_len		1297646	1					
ANR	1298112	Parameter	ser_context * ctx	716:11:19690:19705	1297646	3	True				
ANR	1298113	ParameterType	ser_context *		1297646	0					
ANR	1298114	Identifier	ctx		1297646	1					
ANR	1298115	CFGEntryNode	ENTRY		1297646		True				
ANR	1298116	CFGExitNode	EXIT		1297646		True				
ANR	1298117	Symbol	container		1297646						
ANR	1298118	Symbol	param_get_bool		1297646						
ANR	1298119	Symbol	& elem		1297646						
ANR	1298120	Symbol	& ctx -> keys		1297646						
ANR	1298121	Symbol	* sock_un -> sun_path		1297646						
ANR	1298122	Symbol	* ctx -> sock		1297646						
ANR	1298123	Symbol	* * sock_un		1297646						
ANR	1298124	Symbol	* sockaddr_ptr		1297646						
ANR	1298125	Symbol	sock_un		1297646						
ANR	1298126	Symbol	KEY_FILL_SOCKADDR		1297646						
ANR	1298127	Symbol	zend_hash_find		1297646						
ANR	1298128	Symbol	Z_TYPE_PP		1297646						
ANR	1298129	Symbol	accounted_ecalloc		1297646						
ANR	1298130	Symbol	& family		1297646						
ANR	1298131	Symbol	IS_NULL		1297646						
ANR	1298132	Symbol	IS_ARRAY		1297646						
ANR	1298133	Symbol	* sockaddr_len		1297646						
ANR	1298134	Symbol	sock_un -> sun_path		1297646						
ANR	1298135	Symbol	fill_sockaddr		1297646						
ANR	1298136	Symbol	sockaddr_len		1297646						
ANR	1298137	Symbol	* elem		1297646						
ANR	1298138	Symbol	Z_ARRVAL_P		1297646						
ANR	1298139	Symbol	ctx -> sock -> type		1297646						
ANR	1298140	Symbol	( * sockaddr_ptr ) -> sa_family		1297646						
ANR	1298141	Symbol	elem		1297646						
ANR	1298142	Symbol	* * sockaddr_ptr		1297646						
ANR	1298143	Symbol	SUCCESS		1297646						
ANR	1298144	Symbol	* sock_un		1297646						
ANR	1298145	Symbol	ctx		1297646						
ANR	1298146	Symbol	AF_UNIX		1297646						
ANR	1298147	Symbol	AF_INET		1297646						
ANR	1298148	Symbol	Z_TYPE_P		1297646						
ANR	1298149	Symbol	* ctx		1297646						
ANR	1298150	Symbol	AF_INET6		1297646						
ANR	1298151	Symbol	node		1297646						
ANR	1298152	Symbol	& node		1297646						
ANR	1298153	Symbol	sockaddr_ptr		1297646						
ANR	1298154	Symbol	ctx -> sock		1297646						
ANR	1298155	Symbol	* * ctx		1297646						
ANR	1298156	Symbol	family		1297646						
ANR	1298157	Function	to_zval_read_sockaddr_aux	803:0:22418:23083							
ANR	1298158	FunctionDef	"to_zval_read_sockaddr_aux (const char * sockaddr_c , zval * zv , res_context * ctx)"		1298157	0					
ANR	1298159	CompoundStatement		804:0:22508:23083	1298157	0					
ANR	1298160	IdentifierDeclStatement	const struct sockaddr * saddr = ( struct sockaddr * ) sockaddr_c ;	805:1:22511:22571	1298157	0	True				
ANR	1298161	IdentifierDecl	* saddr = ( struct sockaddr * ) sockaddr_c		1298157	0					
ANR	1298162	IdentifierDeclType	const struct sockaddr *		1298157	0					
ANR	1298163	Identifier	saddr		1298157	1					
ANR	1298164	AssignmentExpression	* saddr = ( struct sockaddr * ) sockaddr_c		1298157	2		=			
ANR	1298165	Identifier	saddr		1298157	0					
ANR	1298166	CastExpression	( struct sockaddr * ) sockaddr_c		1298157	1					
ANR	1298167	CastTarget	struct sockaddr *		1298157	0					
ANR	1298168	Identifier	sockaddr_c		1298157	1					
ANR	1298169	IfStatement	if ( saddr -> sa_family == 0 )		1298157	1					
ANR	1298170	Condition	saddr -> sa_family == 0	807:5:22579:22599	1298157	0	True				
ANR	1298171	EqualityExpression	saddr -> sa_family == 0		1298157	0		==			
ANR	1298172	PtrMemberAccess	saddr -> sa_family		1298157	0					
ANR	1298173	Identifier	saddr		1298157	0					
ANR	1298174	Identifier	sa_family		1298157	1					
ANR	1298175	PrimaryExpression	0		1298157	1					
ANR	1298176	CompoundStatement		4:28:93:93	1298157	1					
ANR	1298177	ExpressionStatement	ZVAL_NULL ( zv )	808:2:22606:22619	1298157	0	True				
ANR	1298178	CallExpression	ZVAL_NULL ( zv )		1298157	0					
ANR	1298179	Callee	ZVAL_NULL		1298157	0					
ANR	1298180	Identifier	ZVAL_NULL		1298157	0					
ANR	1298181	ArgumentList	zv		1298157	1					
ANR	1298182	Argument	zv		1298157	0					
ANR	1298183	Identifier	zv		1298157	0					
ANR	1298184	ReturnStatement	return ;	809:2:22623:22629	1298157	1	True				
ANR	1298185	ExpressionStatement	array_init ( zv )	812:1:22636:22650	1298157	2	True				
ANR	1298186	CallExpression	array_init ( zv )		1298157	0					
ANR	1298187	Callee	array_init		1298157	0					
ANR	1298188	Identifier	array_init		1298157	0					
ANR	1298189	ArgumentList	zv		1298157	1					
ANR	1298190	Argument	zv		1298157	0					
ANR	1298191	Identifier	zv		1298157	0					
ANR	1298192	SwitchStatement	switch ( saddr -> sa_family )		1298157	3					
ANR	1298193	Condition	saddr -> sa_family	814:9:22662:22677	1298157	0	True				
ANR	1298194	PtrMemberAccess	saddr -> sa_family		1298157	0					
ANR	1298195	Identifier	saddr		1298157	0					
ANR	1298196	Identifier	sa_family		1298157	1					
ANR	1298197	CompoundStatement		11:27:171:171	1298157	1					
ANR	1298198	Label	case AF_INET :	815:1:22683:22695	1298157	0	True				
ANR	1298199	Identifier	AF_INET		1298157	0					
ANR	1298200	ExpressionStatement	"to_zval_read_sockaddr_in ( sockaddr_c , zv , ctx )"	816:2:22699:22744	1298157	1	True				
ANR	1298201	CallExpression	"to_zval_read_sockaddr_in ( sockaddr_c , zv , ctx )"		1298157	0					
ANR	1298202	Callee	to_zval_read_sockaddr_in		1298157	0					
ANR	1298203	Identifier	to_zval_read_sockaddr_in		1298157	0					
ANR	1298204	ArgumentList	sockaddr_c		1298157	1					
ANR	1298205	Argument	sockaddr_c		1298157	0					
ANR	1298206	Identifier	sockaddr_c		1298157	0					
ANR	1298207	Argument	zv		1298157	1					
ANR	1298208	Identifier	zv		1298157	0					
ANR	1298209	Argument	ctx		1298157	2					
ANR	1298210	Identifier	ctx		1298157	0					
ANR	1298211	BreakStatement	break ;	817:2:22748:22753	1298157	2	True				
ANR	1298212	Label	case AF_INET6 :	820:1:22771:22784	1298157	3	True				
ANR	1298213	Identifier	AF_INET6		1298157	0					
ANR	1298214	ExpressionStatement	"to_zval_read_sockaddr_in6 ( sockaddr_c , zv , ctx )"	821:2:22788:22834	1298157	4	True				
ANR	1298215	CallExpression	"to_zval_read_sockaddr_in6 ( sockaddr_c , zv , ctx )"		1298157	0					
ANR	1298216	Callee	to_zval_read_sockaddr_in6		1298157	0					
ANR	1298217	Identifier	to_zval_read_sockaddr_in6		1298157	0					
ANR	1298218	ArgumentList	sockaddr_c		1298157	1					
ANR	1298219	Argument	sockaddr_c		1298157	0					
ANR	1298220	Identifier	sockaddr_c		1298157	0					
ANR	1298221	Argument	zv		1298157	1					
ANR	1298222	Identifier	zv		1298157	0					
ANR	1298223	Argument	ctx		1298157	2					
ANR	1298224	Identifier	ctx		1298157	0					
ANR	1298225	BreakStatement	break ;	822:2:22838:22843	1298157	5	True				
ANR	1298226	Label	case AF_UNIX :	825:1:22870:22882	1298157	6	True				
ANR	1298227	Identifier	AF_UNIX		1298157	0					
ANR	1298228	ExpressionStatement	"to_zval_read_sockaddr_un ( sockaddr_c , zv , ctx )"	826:2:22886:22931	1298157	7	True				
ANR	1298229	CallExpression	"to_zval_read_sockaddr_un ( sockaddr_c , zv , ctx )"		1298157	0					
ANR	1298230	Callee	to_zval_read_sockaddr_un		1298157	0					
ANR	1298231	Identifier	to_zval_read_sockaddr_un		1298157	0					
ANR	1298232	ArgumentList	sockaddr_c		1298157	1					
ANR	1298233	Argument	sockaddr_c		1298157	0					
ANR	1298234	Identifier	sockaddr_c		1298157	0					
ANR	1298235	Argument	zv		1298157	1					
ANR	1298236	Identifier	zv		1298157	0					
ANR	1298237	Argument	ctx		1298157	2					
ANR	1298238	Identifier	ctx		1298157	0					
ANR	1298239	BreakStatement	break ;	827:2:22935:22940	1298157	8	True				
ANR	1298240	Label	default :	829:1:22944:22951	1298157	9	True				
ANR	1298241	Identifier	default		1298157	0					
ANR	1298242	Statement	do_to_zval_err	830:2:22955:22968	1298157	10	True				
ANR	1298243	Statement	(	830:16:22969:22969	1298157	11	True				
ANR	1298244	Statement	ctx	830:17:22970:22972	1298157	12	True				
ANR	1298245	Statement	","	830:20:22973:22973	1298157	13	True				
ANR	1298246	Statement	"""cannot read struct sockaddr with family %d; """	830:22:22975:23020	1298157	14	True				
ANR	1298247	Statement	"""not supported"""	831:4:23026:23040	1298157	15	True				
ANR	1298248	Statement	","	831:19:23041:23041	1298157	16	True				
ANR	1298249	Statement	(	832:4:23047:23047	1298157	17	True				
ANR	1298250	Statement	int	832:5:23048:23050	1298157	18	True				
ANR	1298251	Statement	)	832:8:23051:23051	1298157	19	True				
ANR	1298252	Statement	saddr	832:9:23052:23056	1298157	20	True				
ANR	1298253	Statement	->	832:14:23057:23058	1298157	21	True				
ANR	1298254	Statement	sa_family	832:16:23059:23067	1298157	22	True				
ANR	1298255	Statement	)	832:25:23068:23068	1298157	23	True				
ANR	1298256	ExpressionStatement		832:26:23069:23069	1298157	24	True				
ANR	1298257	BreakStatement	break ;	833:2:23073:23078	1298157	25	True				
ANR	1298258	ReturnType	static void		1298157	1					
ANR	1298259	Identifier	to_zval_read_sockaddr_aux		1298157	2					
ANR	1298260	ParameterList	"const char * sockaddr_c , zval * zv , res_context * ctx"		1298157	3					
ANR	1298261	Parameter	const char * sockaddr_c	803:38:22456:22477	1298157	0	True				
ANR	1298262	ParameterType	const char *		1298157	0					
ANR	1298263	Identifier	sockaddr_c		1298157	1					
ANR	1298264	Parameter	zval * zv	803:62:22480:22487	1298157	1	True				
ANR	1298265	ParameterType	zval *		1298157	0					
ANR	1298266	Identifier	zv		1298157	1					
ANR	1298267	Parameter	res_context * ctx	803:72:22490:22505	1298157	2	True				
ANR	1298268	ParameterType	res_context *		1298157	0					
ANR	1298269	Identifier	ctx		1298157	1					
ANR	1298270	CFGEntryNode	ENTRY		1298157		True				
ANR	1298271	CFGExitNode	EXIT		1298157		True				
ANR	1298272	Symbol	sockaddr_c		1298157						
ANR	1298273	Symbol	ctx		1298157						
ANR	1298274	Symbol	saddr		1298157						
ANR	1298275	Symbol	zv		1298157						
ANR	1298276	Symbol	* saddr		1298157						
ANR	1298277	Symbol	saddr -> sa_family		1298157						
ANR	1298278	Function	from_zval_write_control	847:0:23402:25611							
ANR	1298279	FunctionDef	"from_zval_write_control (const zval * arr , void * * control_buf , zend_llist_element * alloc , size_t * control_len , size_t * offset , ser_context * ctx)"		1298278	0					
ANR	1298280	CompoundStatement		853:0:23615:25611	1298278	0					
ANR	1298281	IdentifierDeclStatement	struct cmsghdr * cmsghdr ;	854:1:23618:23642	1298278	0	True				
ANR	1298282	IdentifierDecl	* cmsghdr		1298278	0					
ANR	1298283	IdentifierDeclType	struct cmsghdr *		1298278	0					
ANR	1298284	Identifier	cmsghdr		1298278	1					
ANR	1298285	IdentifierDeclStatement	"int level , type ;"	855:1:23645:23670	1298278	1	True				
ANR	1298286	IdentifierDecl	level		1298278	0					
ANR	1298287	IdentifierDeclType	int		1298278	0					
ANR	1298288	Identifier	level		1298278	1					
ANR	1298289	IdentifierDecl	type		1298278	1					
ANR	1298290	IdentifierDeclType	int		1298278	0					
ANR	1298291	Identifier	type		1298278	1					
ANR	1298292	IdentifierDeclStatement	"size_t data_len , req_space , space_left ;"	857:1:23673:23726	1298278	2	True				
ANR	1298293	IdentifierDecl	data_len		1298278	0					
ANR	1298294	IdentifierDeclType	size_t		1298278	0					
ANR	1298295	Identifier	data_len		1298278	1					
ANR	1298296	IdentifierDecl	req_space		1298278	1					
ANR	1298297	IdentifierDeclType	size_t		1298278	0					
ANR	1298298	Identifier	req_space		1298278	1					
ANR	1298299	IdentifierDecl	space_left		1298278	2					
ANR	1298300	IdentifierDeclType	size_t		1298278	0					
ANR	1298301	Identifier	space_left		1298278	1					
ANR	1298302	IdentifierDeclStatement	ancillary_reg_entry * entry ;	860:1:23729:23755	1298278	3	True				
ANR	1298303	IdentifierDecl	* entry		1298278	0					
ANR	1298304	IdentifierDeclType	ancillary_reg_entry *		1298278	0					
ANR	1298305	Identifier	entry		1298278	1					
ANR	1298306	Statement	static	862:1:23759:23764	1298278	4	True				
ANR	1298307	IdentifierDeclStatement	"const field_descriptor descriptor_level [ ] = { { ""level"" , sizeof ( ""level"" ) , 0 , 0 , from_zval_write_int , 0 } , { 0 } } ;"	862:8:23766:23882	1298278	5	True				
ANR	1298308	IdentifierDecl	"descriptor_level [ ] = { { ""level"" , sizeof ( ""level"" ) , 0 , 0 , from_zval_write_int , 0 } , { 0 } }"		1298278	0					
ANR	1298309	IdentifierDeclType	const field_descriptor [ ]		1298278	0					
ANR	1298310	Identifier	descriptor_level		1298278	1					
ANR	1298311	AssignmentExpression	"descriptor_level [ ] = { { ""level"" , sizeof ( ""level"" ) , 0 , 0 , from_zval_write_int , 0 } , { 0 } }"		1298278	2		=			
ANR	1298312	Identifier	descriptor_level		1298278	0					
ANR	1298313	InitializerList	"""level"""		1298278	1					
ANR	1298314	InitializerList	"""level"""		1298278	0					
ANR	1298315	PrimaryExpression	"""level"""		1298278	0					
ANR	1298316	SizeofExpression	"sizeof ( ""level"" )"		1298278	1					
ANR	1298317	Sizeof	sizeof		1298278	0					
ANR	1298318	PrimaryExpression	"""level"""		1298278	1					
ANR	1298319	PrimaryExpression	0		1298278	2					
ANR	1298320	PrimaryExpression	0		1298278	3					
ANR	1298321	Identifier	from_zval_write_int		1298278	4					
ANR	1298322	PrimaryExpression	0		1298278	5					
ANR	1298323	InitializerList	0		1298278	1					
ANR	1298324	PrimaryExpression	0		1298278	0					
ANR	1298325	Statement	static	866:1:23885:23890	1298278	6	True				
ANR	1298326	IdentifierDeclStatement	"const field_descriptor descriptor_type [ ] = { { ""type"" , sizeof ( ""type"" ) , 0 , 0 , from_zval_write_int , 0 } , { 0 } } ;"	866:8:23892:24005	1298278	7	True				
ANR	1298327	IdentifierDecl	"descriptor_type [ ] = { { ""type"" , sizeof ( ""type"" ) , 0 , 0 , from_zval_write_int , 0 } , { 0 } }"		1298278	0					
ANR	1298328	IdentifierDeclType	const field_descriptor [ ]		1298278	0					
ANR	1298329	Identifier	descriptor_type		1298278	1					
ANR	1298330	AssignmentExpression	"descriptor_type [ ] = { { ""type"" , sizeof ( ""type"" ) , 0 , 0 , from_zval_write_int , 0 } , { 0 } }"		1298278	2		=			
ANR	1298331	Identifier	descriptor_type		1298278	0					
ANR	1298332	InitializerList	"""type"""		1298278	1					
ANR	1298333	InitializerList	"""type"""		1298278	0					
ANR	1298334	PrimaryExpression	"""type"""		1298278	0					
ANR	1298335	SizeofExpression	"sizeof ( ""type"" )"		1298278	1					
ANR	1298336	Sizeof	sizeof		1298278	0					
ANR	1298337	PrimaryExpression	"""type"""		1298278	1					
ANR	1298338	PrimaryExpression	0		1298278	2					
ANR	1298339	PrimaryExpression	0		1298278	3					
ANR	1298340	Identifier	from_zval_write_int		1298278	4					
ANR	1298341	PrimaryExpression	0		1298278	5					
ANR	1298342	InitializerList	0		1298278	1					
ANR	1298343	PrimaryExpression	0		1298278	0					
ANR	1298344	IdentifierDeclStatement	"field_descriptor descriptor_data [ ] = { { ""data"" , sizeof ( ""data"" ) , 0 , 0 , 0 , 0 } , { 0 } } ;"	870:1:24008:24097	1298278	8	True				
ANR	1298345	IdentifierDecl	"descriptor_data [ ] = { { ""data"" , sizeof ( ""data"" ) , 0 , 0 , 0 , 0 } , { 0 } }"		1298278	0					
ANR	1298346	IdentifierDeclType	field_descriptor [ ]		1298278	0					
ANR	1298347	Identifier	descriptor_data		1298278	1					
ANR	1298348	AssignmentExpression	"descriptor_data [ ] = { { ""data"" , sizeof ( ""data"" ) , 0 , 0 , 0 , 0 } , { 0 } }"		1298278	2		=			
ANR	1298349	Identifier	descriptor_data		1298278	0					
ANR	1298350	InitializerList	"""data"""		1298278	1					
ANR	1298351	InitializerList	"""data"""		1298278	0					
ANR	1298352	PrimaryExpression	"""data"""		1298278	0					
ANR	1298353	SizeofExpression	"sizeof ( ""data"" )"		1298278	1					
ANR	1298354	Sizeof	sizeof		1298278	0					
ANR	1298355	PrimaryExpression	"""data"""		1298278	1					
ANR	1298356	PrimaryExpression	0		1298278	2					
ANR	1298357	PrimaryExpression	0		1298278	3					
ANR	1298358	PrimaryExpression	0		1298278	4					
ANR	1298359	PrimaryExpression	0		1298278	5					
ANR	1298360	InitializerList	0		1298278	1					
ANR	1298361	PrimaryExpression	0		1298278	0					
ANR	1298362	ExpressionStatement	"from_zval_write_aggregation ( arr , ( char * ) & level , descriptor_level , ctx )"	875:1:24101:24172	1298278	9	True				
ANR	1298363	CallExpression	"from_zval_write_aggregation ( arr , ( char * ) & level , descriptor_level , ctx )"		1298278	0					
ANR	1298364	Callee	from_zval_write_aggregation		1298278	0					
ANR	1298365	Identifier	from_zval_write_aggregation		1298278	0					
ANR	1298366	ArgumentList	arr		1298278	1					
ANR	1298367	Argument	arr		1298278	0					
ANR	1298368	Identifier	arr		1298278	0					
ANR	1298369	Argument	( char * ) & level		1298278	1					
ANR	1298370	CastExpression	( char * ) & level		1298278	0					
ANR	1298371	CastTarget	char *		1298278	0					
ANR	1298372	UnaryOperationExpression	& level		1298278	1					
ANR	1298373	UnaryOperator	&		1298278	0					
ANR	1298374	Identifier	level		1298278	1					
ANR	1298375	Argument	descriptor_level		1298278	2					
ANR	1298376	Identifier	descriptor_level		1298278	0					
ANR	1298377	Argument	ctx		1298278	3					
ANR	1298378	Identifier	ctx		1298278	0					
ANR	1298379	IfStatement	if ( ctx -> err . has_error )		1298278	10					
ANR	1298380	Condition	ctx -> err . has_error	876:5:24179:24196	1298278	0	True				
ANR	1298381	MemberAccess	ctx -> err . has_error		1298278	0					
ANR	1298382	PtrMemberAccess	ctx -> err		1298278	0					
ANR	1298383	Identifier	ctx		1298278	0					
ANR	1298384	Identifier	err		1298278	1					
ANR	1298385	Identifier	has_error		1298278	1					
ANR	1298386	CompoundStatement		24:25:583:583	1298278	1					
ANR	1298387	ReturnStatement	return ;	877:2:24203:24209	1298278	0	True				
ANR	1298388	ExpressionStatement	"from_zval_write_aggregation ( arr , ( char * ) & type , descriptor_type , ctx )"	879:1:24215:24284	1298278	11	True				
ANR	1298389	CallExpression	"from_zval_write_aggregation ( arr , ( char * ) & type , descriptor_type , ctx )"		1298278	0					
ANR	1298390	Callee	from_zval_write_aggregation		1298278	0					
ANR	1298391	Identifier	from_zval_write_aggregation		1298278	0					
ANR	1298392	ArgumentList	arr		1298278	1					
ANR	1298393	Argument	arr		1298278	0					
ANR	1298394	Identifier	arr		1298278	0					
ANR	1298395	Argument	( char * ) & type		1298278	1					
ANR	1298396	CastExpression	( char * ) & type		1298278	0					
ANR	1298397	CastTarget	char *		1298278	0					
ANR	1298398	UnaryOperationExpression	& type		1298278	1					
ANR	1298399	UnaryOperator	&		1298278	0					
ANR	1298400	Identifier	type		1298278	1					
ANR	1298401	Argument	descriptor_type		1298278	2					
ANR	1298402	Identifier	descriptor_type		1298278	0					
ANR	1298403	Argument	ctx		1298278	3					
ANR	1298404	Identifier	ctx		1298278	0					
ANR	1298405	IfStatement	if ( ctx -> err . has_error )		1298278	12					
ANR	1298406	Condition	ctx -> err . has_error	880:5:24291:24308	1298278	0	True				
ANR	1298407	MemberAccess	ctx -> err . has_error		1298278	0					
ANR	1298408	PtrMemberAccess	ctx -> err		1298278	0					
ANR	1298409	Identifier	ctx		1298278	0					
ANR	1298410	Identifier	err		1298278	1					
ANR	1298411	Identifier	has_error		1298278	1					
ANR	1298412	CompoundStatement		28:25:695:695	1298278	1					
ANR	1298413	ReturnStatement	return ;	881:2:24315:24321	1298278	0	True				
ANR	1298414	ExpressionStatement	"entry = get_ancillary_reg_entry ( level , type )"	884:1:24328:24372	1298278	13	True				
ANR	1298415	AssignmentExpression	"entry = get_ancillary_reg_entry ( level , type )"		1298278	0		=			
ANR	1298416	Identifier	entry		1298278	0					
ANR	1298417	CallExpression	"get_ancillary_reg_entry ( level , type )"		1298278	1					
ANR	1298418	Callee	get_ancillary_reg_entry		1298278	0					
ANR	1298419	Identifier	get_ancillary_reg_entry		1298278	0					
ANR	1298420	ArgumentList	level		1298278	1					
ANR	1298421	Argument	level		1298278	0					
ANR	1298422	Identifier	level		1298278	0					
ANR	1298423	Argument	type		1298278	1					
ANR	1298424	Identifier	type		1298278	0					
ANR	1298425	IfStatement	if ( entry == NULL )		1298278	14					
ANR	1298426	Condition	entry == NULL	885:5:24379:24391	1298278	0	True				
ANR	1298427	EqualityExpression	entry == NULL		1298278	0		==			
ANR	1298428	Identifier	entry		1298278	0					
ANR	1298429	Identifier	NULL		1298278	1					
ANR	1298430	CompoundStatement		33:20:778:778	1298278	1					
ANR	1298431	ExpressionStatement	"do_from_zval_err ( ctx , ""cmsghdr with level %d and type %d not supported"" , level , type )"	886:2:24398:24487	1298278	0	True				
ANR	1298432	CallExpression	"do_from_zval_err ( ctx , ""cmsghdr with level %d and type %d not supported"" , level , type )"		1298278	0					
ANR	1298433	Callee	do_from_zval_err		1298278	0					
ANR	1298434	Identifier	do_from_zval_err		1298278	0					
ANR	1298435	ArgumentList	ctx		1298278	1					
ANR	1298436	Argument	ctx		1298278	0					
ANR	1298437	Identifier	ctx		1298278	0					
ANR	1298438	Argument	"""cmsghdr with level %d and type %d not supported"""		1298278	1					
ANR	1298439	PrimaryExpression	"""cmsghdr with level %d and type %d not supported"""		1298278	0					
ANR	1298440	Argument	level		1298278	2					
ANR	1298441	Identifier	level		1298278	0					
ANR	1298442	Argument	type		1298278	3					
ANR	1298443	Identifier	type		1298278	0					
ANR	1298444	ReturnStatement	return ;	888:2:24491:24497	1298278	1	True				
ANR	1298445	IfStatement	if ( entry -> calc_space )		1298278	15					
ANR	1298446	Condition	entry -> calc_space	891:5:24508:24524	1298278	0	True				
ANR	1298447	PtrMemberAccess	entry -> calc_space		1298278	0					
ANR	1298448	Identifier	entry		1298278	0					
ANR	1298449	Identifier	calc_space		1298278	1					
ANR	1298450	CompoundStatement		40:2:915:931	1298278	1					
ANR	1298451	IdentifierDeclStatement	zval * * data_elem ;	892:2:24531:24547	1298278	0	True				
ANR	1298452	IdentifierDecl	* * data_elem		1298278	0					
ANR	1298453	IdentifierDeclType	zval * *		1298278	0					
ANR	1298454	Identifier	data_elem		1298278	1					
ANR	1298455	IfStatement	"if ( zend_hash_find ( Z_ARRVAL_P ( arr ) , ""data"" , sizeof ( ""data"" ) , ( void * * ) & data_elem ) == FAILURE )"		1298278	1					
ANR	1298456	Condition	"zend_hash_find ( Z_ARRVAL_P ( arr ) , ""data"" , sizeof ( ""data"" ) , ( void * * ) & data_elem ) == FAILURE"	894:6:24598:24687	1298278	0	True				
ANR	1298457	EqualityExpression	"zend_hash_find ( Z_ARRVAL_P ( arr ) , ""data"" , sizeof ( ""data"" ) , ( void * * ) & data_elem ) == FAILURE"		1298278	0		==			
ANR	1298458	CallExpression	"zend_hash_find ( Z_ARRVAL_P ( arr ) , ""data"" , sizeof ( ""data"" ) , ( void * * ) & data_elem )"		1298278	0					
ANR	1298459	Callee	zend_hash_find		1298278	0					
ANR	1298460	Identifier	zend_hash_find		1298278	0					
ANR	1298461	ArgumentList	Z_ARRVAL_P ( arr )		1298278	1					
ANR	1298462	Argument	Z_ARRVAL_P ( arr )		1298278	0					
ANR	1298463	CallExpression	Z_ARRVAL_P ( arr )		1298278	0					
ANR	1298464	Callee	Z_ARRVAL_P		1298278	0					
ANR	1298465	Identifier	Z_ARRVAL_P		1298278	0					
ANR	1298466	ArgumentList	arr		1298278	1					
ANR	1298467	Argument	arr		1298278	0					
ANR	1298468	Identifier	arr		1298278	0					
ANR	1298469	Argument	"""data"""		1298278	1					
ANR	1298470	PrimaryExpression	"""data"""		1298278	0					
ANR	1298471	Argument	"sizeof ( ""data"" )"		1298278	2					
ANR	1298472	SizeofExpression	"sizeof ( ""data"" )"		1298278	0					
ANR	1298473	Sizeof	sizeof		1298278	0					
ANR	1298474	PrimaryExpression	"""data"""		1298278	1					
ANR	1298475	Argument	( void * * ) & data_elem		1298278	3					
ANR	1298476	CastExpression	( void * * ) & data_elem		1298278	0					
ANR	1298477	CastTarget	void * *		1298278	0					
ANR	1298478	UnaryOperationExpression	& data_elem		1298278	1					
ANR	1298479	UnaryOperator	&		1298278	0					
ANR	1298480	Identifier	data_elem		1298278	1					
ANR	1298481	Identifier	FAILURE		1298278	1					
ANR	1298482	CompoundStatement		43:36:1074:1074	1298278	1					
ANR	1298483	ExpressionStatement	"do_from_zval_err ( ctx , ""cmsghdr should have a 'data' element here"" )"	896:3:24695:24761	1298278	0	True				
ANR	1298484	CallExpression	"do_from_zval_err ( ctx , ""cmsghdr should have a 'data' element here"" )"		1298278	0					
ANR	1298485	Callee	do_from_zval_err		1298278	0					
ANR	1298486	Identifier	do_from_zval_err		1298278	0					
ANR	1298487	ArgumentList	ctx		1298278	1					
ANR	1298488	Argument	ctx		1298278	0					
ANR	1298489	Identifier	ctx		1298278	0					
ANR	1298490	Argument	"""cmsghdr should have a 'data' element here"""		1298278	1					
ANR	1298491	PrimaryExpression	"""cmsghdr should have a 'data' element here"""		1298278	0					
ANR	1298492	ReturnStatement	return ;	897:3:24766:24772	1298278	1	True				
ANR	1298493	ExpressionStatement	"data_len = entry -> calc_space ( * data_elem , ctx )"	899:2:24780:24825	1298278	2	True				
ANR	1298494	AssignmentExpression	"data_len = entry -> calc_space ( * data_elem , ctx )"		1298278	0		=			
ANR	1298495	Identifier	data_len		1298278	0					
ANR	1298496	CallExpression	"entry -> calc_space ( * data_elem , ctx )"		1298278	1					
ANR	1298497	Callee	entry -> calc_space		1298278	0					
ANR	1298498	PtrMemberAccess	entry -> calc_space		1298278	0					
ANR	1298499	Identifier	entry		1298278	0					
ANR	1298500	Identifier	calc_space		1298278	1					
ANR	1298501	ArgumentList	* data_elem		1298278	1					
ANR	1298502	Argument	* data_elem		1298278	0					
ANR	1298503	UnaryOperationExpression	* data_elem		1298278	0					
ANR	1298504	UnaryOperator	*		1298278	0					
ANR	1298505	Identifier	data_elem		1298278	1					
ANR	1298506	Argument	ctx		1298278	1					
ANR	1298507	Identifier	ctx		1298278	0					
ANR	1298508	IfStatement	if ( ctx -> err . has_error )		1298278	3					
ANR	1298509	Condition	ctx -> err . has_error	900:6:24833:24850	1298278	0	True				
ANR	1298510	MemberAccess	ctx -> err . has_error		1298278	0					
ANR	1298511	PtrMemberAccess	ctx -> err		1298278	0					
ANR	1298512	Identifier	ctx		1298278	0					
ANR	1298513	Identifier	err		1298278	1					
ANR	1298514	Identifier	has_error		1298278	1					
ANR	1298515	CompoundStatement		48:26:1237:1237	1298278	1					
ANR	1298516	ReturnStatement	return ;	901:3:24858:24864	1298278	0	True				
ANR	1298517	ElseStatement	else		1298278	0					
ANR	1298518	CompoundStatement		51:8:1262:1262	1298278	0					
ANR	1298519	ExpressionStatement	data_len = entry -> size	904:2:24882:24904	1298278	0	True				
ANR	1298520	AssignmentExpression	data_len = entry -> size		1298278	0		=			
ANR	1298521	Identifier	data_len		1298278	0					
ANR	1298522	PtrMemberAccess	entry -> size		1298278	1					
ANR	1298523	Identifier	entry		1298278	0					
ANR	1298524	Identifier	size		1298278	1					
ANR	1298525	ExpressionStatement	req_space = CMSG_SPACE ( data_len )	906:1:24910:24942	1298278	16	True				
ANR	1298526	AssignmentExpression	req_space = CMSG_SPACE ( data_len )		1298278	0		=			
ANR	1298527	Identifier	req_space		1298278	0					
ANR	1298528	CallExpression	CMSG_SPACE ( data_len )		1298278	1					
ANR	1298529	Callee	CMSG_SPACE		1298278	0					
ANR	1298530	Identifier	CMSG_SPACE		1298278	0					
ANR	1298531	ArgumentList	data_len		1298278	1					
ANR	1298532	Argument	data_len		1298278	0					
ANR	1298533	Identifier	data_len		1298278	0					
ANR	1298534	ExpressionStatement	space_left = * control_len - * offset	907:1:24945:24980	1298278	17	True				
ANR	1298535	AssignmentExpression	space_left = * control_len - * offset		1298278	0		=			
ANR	1298536	Identifier	space_left		1298278	0					
ANR	1298537	AdditiveExpression	* control_len - * offset		1298278	1		-			
ANR	1298538	UnaryOperationExpression	* control_len		1298278	0					
ANR	1298539	UnaryOperator	*		1298278	0					
ANR	1298540	Identifier	control_len		1298278	1					
ANR	1298541	UnaryOperationExpression	* offset		1298278	1					
ANR	1298542	UnaryOperator	*		1298278	0					
ANR	1298543	Identifier	offset		1298278	1					
ANR	1298544	ExpressionStatement	assert ( * control_len >= * offset )	908:1:24983:25014	1298278	18	True				
ANR	1298545	CallExpression	assert ( * control_len >= * offset )		1298278	0					
ANR	1298546	Callee	assert		1298278	0					
ANR	1298547	Identifier	assert		1298278	0					
ANR	1298548	ArgumentList	* control_len >= * offset		1298278	1					
ANR	1298549	Argument	* control_len >= * offset		1298278	0					
ANR	1298550	RelationalExpression	* control_len >= * offset		1298278	0		>=			
ANR	1298551	UnaryOperationExpression	* control_len		1298278	0					
ANR	1298552	UnaryOperator	*		1298278	0					
ANR	1298553	Identifier	control_len		1298278	1					
ANR	1298554	UnaryOperationExpression	* offset		1298278	1					
ANR	1298555	UnaryOperator	*		1298278	0					
ANR	1298556	Identifier	offset		1298278	1					
ANR	1298557	IfStatement	if ( space_left < req_space )		1298278	19					
ANR	1298558	Condition	space_left < req_space	910:5:25022:25043	1298278	0	True				
ANR	1298559	RelationalExpression	space_left < req_space		1298278	0		<			
ANR	1298560	Identifier	space_left		1298278	0					
ANR	1298561	Identifier	req_space		1298278	1					
ANR	1298562	CompoundStatement		58:29:1430:1430	1298278	1					
ANR	1298563	ExpressionStatement	"* control_buf = safe_erealloc ( * control_buf , 2 , req_space , * control_len )"	911:2:25050:25120	1298278	0	True				
ANR	1298564	AssignmentExpression	"* control_buf = safe_erealloc ( * control_buf , 2 , req_space , * control_len )"		1298278	0		=			
ANR	1298565	UnaryOperationExpression	* control_buf		1298278	0					
ANR	1298566	UnaryOperator	*		1298278	0					
ANR	1298567	Identifier	control_buf		1298278	1					
ANR	1298568	CallExpression	"safe_erealloc ( * control_buf , 2 , req_space , * control_len )"		1298278	1					
ANR	1298569	Callee	safe_erealloc		1298278	0					
ANR	1298570	Identifier	safe_erealloc		1298278	0					
ANR	1298571	ArgumentList	* control_buf		1298278	1					
ANR	1298572	Argument	* control_buf		1298278	0					
ANR	1298573	UnaryOperationExpression	* control_buf		1298278	0					
ANR	1298574	UnaryOperator	*		1298278	0					
ANR	1298575	Identifier	control_buf		1298278	1					
ANR	1298576	Argument	2		1298278	1					
ANR	1298577	PrimaryExpression	2		1298278	0					
ANR	1298578	Argument	req_space		1298278	2					
ANR	1298579	Identifier	req_space		1298278	0					
ANR	1298580	Argument	* control_len		1298278	3					
ANR	1298581	UnaryOperationExpression	* control_len		1298278	0					
ANR	1298582	UnaryOperator	*		1298278	0					
ANR	1298583	Identifier	control_len		1298278	1					
ANR	1298584	ExpressionStatement	* control_len += 2 * req_space	912:2:25124:25153	1298278	1	True				
ANR	1298585	AssignmentExpression	* control_len += 2 * req_space		1298278	0		+=			
ANR	1298586	UnaryOperationExpression	* control_len		1298278	0					
ANR	1298587	UnaryOperator	*		1298278	0					
ANR	1298588	Identifier	control_len		1298278	1					
ANR	1298589	MultiplicativeExpression	2 * req_space		1298278	1		*			
ANR	1298590	PrimaryExpression	2		1298278	0					
ANR	1298591	Identifier	req_space		1298278	1					
ANR	1298592	ExpressionStatement	"memset ( ( char * ) * control_buf + * offset , '\\0' , * control_len - * offset )"	913:2:25157:25225	1298278	2	True				
ANR	1298593	CallExpression	"memset ( ( char * ) * control_buf + * offset , '\\0' , * control_len - * offset )"		1298278	0					
ANR	1298594	Callee	memset		1298278	0					
ANR	1298595	Identifier	memset		1298278	0					
ANR	1298596	ArgumentList	( char * ) * control_buf + * offset		1298278	1					
ANR	1298597	Argument	( char * ) * control_buf + * offset		1298278	0					
ANR	1298598	AdditiveExpression	( char * ) * control_buf + * offset		1298278	0		+			
ANR	1298599	CastExpression	( char * ) * control_buf		1298278	0					
ANR	1298600	CastTarget	char *		1298278	0					
ANR	1298601	UnaryOperationExpression	* control_buf		1298278	1					
ANR	1298602	UnaryOperator	*		1298278	0					
ANR	1298603	Identifier	control_buf		1298278	1					
ANR	1298604	UnaryOperationExpression	* offset		1298278	1					
ANR	1298605	UnaryOperator	*		1298278	0					
ANR	1298606	Identifier	offset		1298278	1					
ANR	1298607	Argument	'\\0'		1298278	1					
ANR	1298608	PrimaryExpression	'\\0'		1298278	0					
ANR	1298609	Argument	* control_len - * offset		1298278	2					
ANR	1298610	AdditiveExpression	* control_len - * offset		1298278	0		-			
ANR	1298611	UnaryOperationExpression	* control_len		1298278	0					
ANR	1298612	UnaryOperator	*		1298278	0					
ANR	1298613	Identifier	control_len		1298278	1					
ANR	1298614	UnaryOperationExpression	* offset		1298278	1					
ANR	1298615	UnaryOperator	*		1298278	0					
ANR	1298616	Identifier	offset		1298278	1					
ANR	1298617	ExpressionStatement	"memcpy ( & alloc -> data , control_buf , sizeof * control_buf )"	914:2:25229:25283	1298278	3	True				
ANR	1298618	CallExpression	"memcpy ( & alloc -> data , control_buf , sizeof * control_buf )"		1298278	0					
ANR	1298619	Callee	memcpy		1298278	0					
ANR	1298620	Identifier	memcpy		1298278	0					
ANR	1298621	ArgumentList	& alloc -> data		1298278	1					
ANR	1298622	Argument	& alloc -> data		1298278	0					
ANR	1298623	UnaryOperationExpression	& alloc -> data		1298278	0					
ANR	1298624	UnaryOperator	&		1298278	0					
ANR	1298625	PtrMemberAccess	alloc -> data		1298278	1					
ANR	1298626	Identifier	alloc		1298278	0					
ANR	1298627	Identifier	data		1298278	1					
ANR	1298628	Argument	control_buf		1298278	1					
ANR	1298629	Identifier	control_buf		1298278	0					
ANR	1298630	Argument	sizeof * control_buf		1298278	2					
ANR	1298631	SizeofExpression	sizeof * control_buf		1298278	0					
ANR	1298632	Sizeof	sizeof		1298278	0					
ANR	1298633	UnaryOperationExpression	* control_buf		1298278	1					
ANR	1298634	UnaryOperator	*		1298278	0					
ANR	1298635	Identifier	control_buf		1298278	1					
ANR	1298636	ExpressionStatement	cmsghdr = ( struct cmsghdr * ) ( ( ( char * ) * control_buf ) + * offset )	917:1:25290:25350	1298278	20	True				
ANR	1298637	AssignmentExpression	cmsghdr = ( struct cmsghdr * ) ( ( ( char * ) * control_buf ) + * offset )		1298278	0		=			
ANR	1298638	Identifier	cmsghdr		1298278	0					
ANR	1298639	CastExpression	( struct cmsghdr * ) ( ( ( char * ) * control_buf ) + * offset )		1298278	1					
ANR	1298640	CastTarget	struct cmsghdr *		1298278	0					
ANR	1298641	AdditiveExpression	( ( char * ) * control_buf ) + * offset		1298278	1		+			
ANR	1298642	CastExpression	( char * ) * control_buf		1298278	0					
ANR	1298643	CastTarget	char *		1298278	0					
ANR	1298644	UnaryOperationExpression	* control_buf		1298278	1					
ANR	1298645	UnaryOperator	*		1298278	0					
ANR	1298646	Identifier	control_buf		1298278	1					
ANR	1298647	UnaryOperationExpression	* offset		1298278	1					
ANR	1298648	UnaryOperator	*		1298278	0					
ANR	1298649	Identifier	offset		1298278	1					
ANR	1298650	ExpressionStatement	cmsghdr -> cmsg_level = level	918:1:25353:25380	1298278	21	True				
ANR	1298651	AssignmentExpression	cmsghdr -> cmsg_level = level		1298278	0		=			
ANR	1298652	PtrMemberAccess	cmsghdr -> cmsg_level		1298278	0					
ANR	1298653	Identifier	cmsghdr		1298278	0					
ANR	1298654	Identifier	cmsg_level		1298278	1					
ANR	1298655	Identifier	level		1298278	1					
ANR	1298656	ExpressionStatement	cmsghdr -> cmsg_type = type	919:1:25383:25408	1298278	22	True				
ANR	1298657	AssignmentExpression	cmsghdr -> cmsg_type = type		1298278	0		=			
ANR	1298658	PtrMemberAccess	cmsghdr -> cmsg_type		1298278	0					
ANR	1298659	Identifier	cmsghdr		1298278	0					
ANR	1298660	Identifier	cmsg_type		1298278	1					
ANR	1298661	Identifier	type		1298278	1					
ANR	1298662	ExpressionStatement	cmsghdr -> cmsg_len = CMSG_LEN ( data_len )	920:1:25411:25449	1298278	23	True				
ANR	1298663	AssignmentExpression	cmsghdr -> cmsg_len = CMSG_LEN ( data_len )		1298278	0		=			
ANR	1298664	PtrMemberAccess	cmsghdr -> cmsg_len		1298278	0					
ANR	1298665	Identifier	cmsghdr		1298278	0					
ANR	1298666	Identifier	cmsg_len		1298278	1					
ANR	1298667	CallExpression	CMSG_LEN ( data_len )		1298278	1					
ANR	1298668	Callee	CMSG_LEN		1298278	0					
ANR	1298669	Identifier	CMSG_LEN		1298278	0					
ANR	1298670	ArgumentList	data_len		1298278	1					
ANR	1298671	Argument	data_len		1298278	0					
ANR	1298672	Identifier	data_len		1298278	0					
ANR	1298673	ExpressionStatement	descriptor_data [ 0 ] . from_zval = entry -> from_array	922:1:25453:25501	1298278	24	True				
ANR	1298674	AssignmentExpression	descriptor_data [ 0 ] . from_zval = entry -> from_array		1298278	0		=			
ANR	1298675	MemberAccess	descriptor_data [ 0 ] . from_zval		1298278	0					
ANR	1298676	ArrayIndexing	descriptor_data [ 0 ]		1298278	0					
ANR	1298677	Identifier	descriptor_data		1298278	0					
ANR	1298678	PrimaryExpression	0		1298278	1					
ANR	1298679	Identifier	from_zval		1298278	1					
ANR	1298680	PtrMemberAccess	entry -> from_array		1298278	1					
ANR	1298681	Identifier	entry		1298278	0					
ANR	1298682	Identifier	from_array		1298278	1					
ANR	1298683	ExpressionStatement	"from_zval_write_aggregation ( arr , ( char * ) CMSG_DATA ( cmsghdr ) , descriptor_data , ctx )"	923:1:25504:25585	1298278	25	True				
ANR	1298684	CallExpression	"from_zval_write_aggregation ( arr , ( char * ) CMSG_DATA ( cmsghdr ) , descriptor_data , ctx )"		1298278	0					
ANR	1298685	Callee	from_zval_write_aggregation		1298278	0					
ANR	1298686	Identifier	from_zval_write_aggregation		1298278	0					
ANR	1298687	ArgumentList	arr		1298278	1					
ANR	1298688	Argument	arr		1298278	0					
ANR	1298689	Identifier	arr		1298278	0					
ANR	1298690	Argument	( char * ) CMSG_DATA ( cmsghdr )		1298278	1					
ANR	1298691	CastExpression	( char * ) CMSG_DATA ( cmsghdr )		1298278	0					
ANR	1298692	CastTarget	char *		1298278	0					
ANR	1298693	CallExpression	CMSG_DATA ( cmsghdr )		1298278	1					
ANR	1298694	Callee	CMSG_DATA		1298278	0					
ANR	1298695	Identifier	CMSG_DATA		1298278	0					
ANR	1298696	ArgumentList	cmsghdr		1298278	1					
ANR	1298697	Argument	cmsghdr		1298278	0					
ANR	1298698	Identifier	cmsghdr		1298278	0					
ANR	1298699	Argument	descriptor_data		1298278	2					
ANR	1298700	Identifier	descriptor_data		1298278	0					
ANR	1298701	Argument	ctx		1298278	3					
ANR	1298702	Identifier	ctx		1298278	0					
ANR	1298703	ExpressionStatement	* offset += req_space	925:1:25589:25609	1298278	26	True				
ANR	1298704	AssignmentExpression	* offset += req_space		1298278	0		+=			
ANR	1298705	UnaryOperationExpression	* offset		1298278	0					
ANR	1298706	UnaryOperator	*		1298278	0					
ANR	1298707	Identifier	offset		1298278	1					
ANR	1298708	Identifier	req_space		1298278	1					
ANR	1298709	ReturnType	static void		1298278	1					
ANR	1298710	Identifier	from_zval_write_control		1298278	2					
ANR	1298711	ParameterList	"const zval * arr , void * * control_buf , zend_llist_element * alloc , size_t * control_len , size_t * offset , ser_context * ctx"		1298278	3					
ANR	1298712	Parameter	const zval * arr	847:36:23438:23454	1298278	0	True				
ANR	1298713	ParameterType	const zval *		1298278	0					
ANR	1298714	Identifier	arr		1298278	1					
ANR	1298715	Parameter	void * * control_buf	848:9:23466:23486	1298278	1	True				
ANR	1298716	ParameterType	void * *		1298278	0					
ANR	1298717	Identifier	control_buf		1298278	1					
ANR	1298718	Parameter	zend_llist_element * alloc	849:9:23498:23522	1298278	2	True				
ANR	1298719	ParameterType	zend_llist_element *		1298278	0					
ANR	1298720	Identifier	alloc		1298278	1					
ANR	1298721	Parameter	size_t * control_len	850:9:23534:23555	1298278	3	True				
ANR	1298722	ParameterType	size_t *		1298278	0					
ANR	1298723	Identifier	control_len		1298278	1					
ANR	1298724	Parameter	size_t * offset	851:9:23567:23583	1298278	4	True				
ANR	1298725	ParameterType	size_t *		1298278	0					
ANR	1298726	Identifier	offset		1298278	1					
ANR	1298727	Parameter	ser_context * ctx	852:9:23595:23612	1298278	5	True				
ANR	1298728	ParameterType	ser_context *		1298278	0					
ANR	1298729	Identifier	ctx		1298278	1					
ANR	1298730	CFGEntryNode	ENTRY		1298278		True				
ANR	1298731	CFGExitNode	EXIT		1298278		True				
ANR	1298732	Symbol	descriptor_data		1298278						
ANR	1298733	Symbol	CMSG_DATA		1298278						
ANR	1298734	Symbol	* control_len		1298278						
ANR	1298735	Symbol	cmsghdr -> cmsg_level		1298278						
ANR	1298736	Symbol	descriptor_type		1298278						
ANR	1298737	Symbol	* data_elem		1298278						
ANR	1298738	Symbol	type		1298278						
ANR	1298739	Symbol	ctx -> err		1298278						
ANR	1298740	Symbol	* descriptor_data		1298278						
ANR	1298741	Symbol	zend_hash_find		1298278						
ANR	1298742	Symbol	CMSG_LEN		1298278						
ANR	1298743	Symbol	entry -> from_array		1298278						
ANR	1298744	Symbol	data_elem		1298278						
ANR	1298745	Symbol	entry -> calc_space		1298278						
ANR	1298746	Symbol	CMSG_SPACE		1298278						
ANR	1298747	Symbol	control_buf		1298278						
ANR	1298748	Symbol	Z_ARRVAL_P		1298278						
ANR	1298749	Symbol	& alloc -> data		1298278						
ANR	1298750	Symbol	* entry		1298278						
ANR	1298751	Symbol	arr		1298278						
ANR	1298752	Symbol	* control_buf		1298278						
ANR	1298753	Symbol	& level		1298278						
ANR	1298754	Symbol	NULL		1298278						
ANR	1298755	Symbol	offset		1298278						
ANR	1298756	Symbol	level		1298278						
ANR	1298757	Symbol	& type		1298278						
ANR	1298758	Symbol	ctx		1298278						
ANR	1298759	Symbol	safe_erealloc		1298278						
ANR	1298760	Symbol	data_len		1298278						
ANR	1298761	Symbol	ctx -> err . has_error		1298278						
ANR	1298762	Symbol	descriptor_data [ 0 ] . from_zval		1298278						
ANR	1298763	Symbol	FAILURE		1298278						
ANR	1298764	Symbol	* ctx		1298278						
ANR	1298765	Symbol	* cmsghdr		1298278						
ANR	1298766	Symbol	space_left		1298278						
ANR	1298767	Symbol	req_space		1298278						
ANR	1298768	Symbol	entry		1298278						
ANR	1298769	Symbol	get_ancillary_reg_entry		1298278						
ANR	1298770	Symbol	from_zval_write_int		1298278						
ANR	1298771	Symbol	cmsghdr -> cmsg_len		1298278						
ANR	1298772	Symbol	entry -> size		1298278						
ANR	1298773	Symbol	cmsghdr		1298278						
ANR	1298774	Symbol	cmsghdr -> cmsg_type		1298278						
ANR	1298775	Symbol	descriptor_level		1298278						
ANR	1298776	Symbol	* offset		1298278						
ANR	1298777	Symbol	control_len		1298278						
ANR	1298778	Symbol	& data_elem		1298278						
ANR	1298779	Symbol	alloc		1298278						
ANR	1298780	Function	from_zval_write_control_array	927:0:25613:27076							
ANR	1298781	FunctionDef	"from_zval_write_control_array (const zval * arr , char * msghdr_c , ser_context * ctx)"		1298780	0					
ANR	1298782	CompoundStatement		928:0:25706:27076	1298780	0					
ANR	1298783	IdentifierDeclStatement	HashPosition pos ;	929:1:25709:25726	1298780	0	True				
ANR	1298784	IdentifierDecl	pos		1298780	0					
ANR	1298785	IdentifierDeclType	HashPosition		1298780	0					
ANR	1298786	Identifier	pos		1298780	1					
ANR	1298787	IdentifierDeclStatement	"char buf [ sizeof ( ""element #4294967295"" ) ] ;"	930:1:25729:25771	1298780	1	True				
ANR	1298788	IdentifierDecl	"buf [ sizeof ( ""element #4294967295"" ) ]"		1298780	0					
ANR	1298789	IdentifierDeclType	"char [ sizeof ( ""element #4294967295"" ) ]"		1298780	0					
ANR	1298790	Identifier	buf		1298780	1					
ANR	1298791	SizeofExpression	"sizeof ( ""element #4294967295"" )"		1298780	2					
ANR	1298792	Sizeof	sizeof		1298780	0					
ANR	1298793	PrimaryExpression	"""element #4294967295"""		1298780	1					
ANR	1298794	IdentifierDeclStatement	char * bufp = buf ;	931:1:25774:25793	1298780	2	True				
ANR	1298795	IdentifierDecl	* bufp = buf		1298780	0					
ANR	1298796	IdentifierDeclType	char *		1298780	0					
ANR	1298797	Identifier	bufp		1298780	1					
ANR	1298798	AssignmentExpression	* bufp = buf		1298780	2		=			
ANR	1298799	Identifier	buf		1298780	0					
ANR	1298800	Identifier	buf		1298780	1					
ANR	1298801	IdentifierDeclStatement	zval * * elem ;	932:1:25796:25810	1298780	3	True				
ANR	1298802	IdentifierDecl	* * elem		1298780	0					
ANR	1298803	IdentifierDeclType	zval * *		1298780	0					
ANR	1298804	Identifier	elem		1298780	1					
ANR	1298805	IdentifierDeclStatement	uint32_t i ;	933:1:25813:25825	1298780	4	True				
ANR	1298806	IdentifierDecl	i		1298780	0					
ANR	1298807	IdentifierDeclType	uint32_t		1298780	0					
ANR	1298808	Identifier	i		1298780	1					
ANR	1298809	IdentifierDeclStatement	int num_elems ;	934:1:25828:25845	1298780	5	True				
ANR	1298810	IdentifierDecl	num_elems		1298780	0					
ANR	1298811	IdentifierDeclType	int		1298780	0					
ANR	1298812	Identifier	num_elems		1298780	1					
ANR	1298813	IdentifierDeclStatement	void * control_buf ;	935:1:25848:25868	1298780	6	True				
ANR	1298814	IdentifierDecl	* control_buf		1298780	0					
ANR	1298815	IdentifierDeclType	void *		1298780	0					
ANR	1298816	Identifier	control_buf		1298780	1					
ANR	1298817	IdentifierDeclStatement	zend_llist_element * alloc ;	936:1:25871:25896	1298780	7	True				
ANR	1298818	IdentifierDecl	* alloc		1298780	0					
ANR	1298819	IdentifierDeclType	zend_llist_element *		1298780	0					
ANR	1298820	Identifier	alloc		1298780	1					
ANR	1298821	IdentifierDeclStatement	"size_t control_len , cur_offset ;"	937:1:25899:25938	1298780	8	True				
ANR	1298822	IdentifierDecl	control_len		1298780	0					
ANR	1298823	IdentifierDeclType	size_t		1298780	0					
ANR	1298824	Identifier	control_len		1298780	1					
ANR	1298825	IdentifierDecl	cur_offset		1298780	1					
ANR	1298826	IdentifierDeclType	size_t		1298780	0					
ANR	1298827	Identifier	cur_offset		1298780	1					
ANR	1298828	IdentifierDeclStatement	struct msghdr * msg = ( struct msghdr * ) msghdr_c ;	939:1:25941:25987	1298780	9	True				
ANR	1298829	IdentifierDecl	* msg = ( struct msghdr * ) msghdr_c		1298780	0					
ANR	1298830	IdentifierDeclType	struct msghdr *		1298780	0					
ANR	1298831	Identifier	msg		1298780	1					
ANR	1298832	AssignmentExpression	* msg = ( struct msghdr * ) msghdr_c		1298780	2		=			
ANR	1298833	Identifier	msg		1298780	0					
ANR	1298834	CastExpression	( struct msghdr * ) msghdr_c		1298780	1					
ANR	1298835	CastTarget	struct msghdr *		1298780	0					
ANR	1298836	Identifier	msghdr_c		1298780	1					
ANR	1298837	IfStatement	if ( Z_TYPE_P ( arr ) != IS_ARRAY )		1298780	10					
ANR	1298838	Condition	Z_TYPE_P ( arr ) != IS_ARRAY	941:5:25995:26019	1298780	0	True				
ANR	1298839	EqualityExpression	Z_TYPE_P ( arr ) != IS_ARRAY		1298780	0		!=			
ANR	1298840	CallExpression	Z_TYPE_P ( arr )		1298780	0					
ANR	1298841	Callee	Z_TYPE_P		1298780	0					
ANR	1298842	Identifier	Z_TYPE_P		1298780	0					
ANR	1298843	ArgumentList	arr		1298780	1					
ANR	1298844	Argument	arr		1298780	0					
ANR	1298845	Identifier	arr		1298780	0					
ANR	1298846	Identifier	IS_ARRAY		1298780	1					
ANR	1298847	CompoundStatement		14:32:315:315	1298780	1					
ANR	1298848	ExpressionStatement	"do_from_zval_err ( ctx , ""%s"" , ""expected an array here"" )"	942:2:26026:26079	1298780	0	True				
ANR	1298849	CallExpression	"do_from_zval_err ( ctx , ""%s"" , ""expected an array here"" )"		1298780	0					
ANR	1298850	Callee	do_from_zval_err		1298780	0					
ANR	1298851	Identifier	do_from_zval_err		1298780	0					
ANR	1298852	ArgumentList	ctx		1298780	1					
ANR	1298853	Argument	ctx		1298780	0					
ANR	1298854	Identifier	ctx		1298780	0					
ANR	1298855	Argument	"""%s"""		1298780	1					
ANR	1298856	PrimaryExpression	"""%s"""		1298780	0					
ANR	1298857	Argument	"""expected an array here"""		1298780	2					
ANR	1298858	PrimaryExpression	"""expected an array here"""		1298780	0					
ANR	1298859	ReturnStatement	return ;	943:2:26083:26089	1298780	1	True				
ANR	1298860	ExpressionStatement	num_elems = zend_hash_num_elements ( Z_ARRVAL_P ( arr ) )	946:1:26096:26147	1298780	11	True				
ANR	1298861	AssignmentExpression	num_elems = zend_hash_num_elements ( Z_ARRVAL_P ( arr ) )		1298780	0		=			
ANR	1298862	Identifier	num_elems		1298780	0					
ANR	1298863	CallExpression	zend_hash_num_elements ( Z_ARRVAL_P ( arr ) )		1298780	1					
ANR	1298864	Callee	zend_hash_num_elements		1298780	0					
ANR	1298865	Identifier	zend_hash_num_elements		1298780	0					
ANR	1298866	ArgumentList	Z_ARRVAL_P ( arr )		1298780	1					
ANR	1298867	Argument	Z_ARRVAL_P ( arr )		1298780	0					
ANR	1298868	CallExpression	Z_ARRVAL_P ( arr )		1298780	0					
ANR	1298869	Callee	Z_ARRVAL_P		1298780	0					
ANR	1298870	Identifier	Z_ARRVAL_P		1298780	0					
ANR	1298871	ArgumentList	arr		1298780	1					
ANR	1298872	Argument	arr		1298780	0					
ANR	1298873	Identifier	arr		1298780	0					
ANR	1298874	IfStatement	if ( num_elems == 0 )		1298780	12					
ANR	1298875	Condition	num_elems == 0	947:5:26154:26167	1298780	0	True				
ANR	1298876	EqualityExpression	num_elems == 0		1298780	0		==			
ANR	1298877	Identifier	num_elems		1298780	0					
ANR	1298878	PrimaryExpression	0		1298780	1					
ANR	1298879	CompoundStatement		20:21:463:463	1298780	1					
ANR	1298880	ReturnStatement	return ;	948:2:26174:26180	1298780	0	True				
ANR	1298881	ExpressionStatement	"control_buf = accounted_safe_ecalloc ( num_elems , CMSG_SPACE ( 20 ) , 0 , ctx )"	952:1:26228:26299	1298780	13	True				
ANR	1298882	AssignmentExpression	"control_buf = accounted_safe_ecalloc ( num_elems , CMSG_SPACE ( 20 ) , 0 , ctx )"		1298780	0		=			
ANR	1298883	Identifier	control_buf		1298780	0					
ANR	1298884	CallExpression	"accounted_safe_ecalloc ( num_elems , CMSG_SPACE ( 20 ) , 0 , ctx )"		1298780	1					
ANR	1298885	Callee	accounted_safe_ecalloc		1298780	0					
ANR	1298886	Identifier	accounted_safe_ecalloc		1298780	0					
ANR	1298887	ArgumentList	num_elems		1298780	1					
ANR	1298888	Argument	num_elems		1298780	0					
ANR	1298889	Identifier	num_elems		1298780	0					
ANR	1298890	Argument	CMSG_SPACE ( 20 )		1298780	1					
ANR	1298891	CallExpression	CMSG_SPACE ( 20 )		1298780	0					
ANR	1298892	Callee	CMSG_SPACE		1298780	0					
ANR	1298893	Identifier	CMSG_SPACE		1298780	0					
ANR	1298894	ArgumentList	20		1298780	1					
ANR	1298895	Argument	20		1298780	0					
ANR	1298896	PrimaryExpression	20		1298780	0					
ANR	1298897	Argument	0		1298780	2					
ANR	1298898	PrimaryExpression	0		1298780	0					
ANR	1298899	Argument	ctx		1298780	3					
ANR	1298900	Identifier	ctx		1298780	0					
ANR	1298901	ExpressionStatement	alloc = ctx -> allocations . tail	953:1:26302:26332	1298780	14	True				
ANR	1298902	AssignmentExpression	alloc = ctx -> allocations . tail		1298780	0		=			
ANR	1298903	Identifier	alloc		1298780	0					
ANR	1298904	MemberAccess	ctx -> allocations . tail		1298780	1					
ANR	1298905	PtrMemberAccess	ctx -> allocations		1298780	0					
ANR	1298906	Identifier	ctx		1298780	0					
ANR	1298907	Identifier	allocations		1298780	1					
ANR	1298908	Identifier	tail		1298780	1					
ANR	1298909	ExpressionStatement	control_len = ( size_t ) num_elems * CMSG_SPACE ( 20 )	954:1:26335:26383	1298780	15	True				
ANR	1298910	AssignmentExpression	control_len = ( size_t ) num_elems * CMSG_SPACE ( 20 )		1298780	0		=			
ANR	1298911	Identifier	control_len		1298780	0					
ANR	1298912	MultiplicativeExpression	( size_t ) num_elems * CMSG_SPACE ( 20 )		1298780	1		*			
ANR	1298913	CastExpression	( size_t ) num_elems		1298780	0					
ANR	1298914	CastTarget	size_t		1298780	0					
ANR	1298915	Identifier	num_elems		1298780	1					
ANR	1298916	CallExpression	CMSG_SPACE ( 20 )		1298780	1					
ANR	1298917	Callee	CMSG_SPACE		1298780	0					
ANR	1298918	Identifier	CMSG_SPACE		1298780	0					
ANR	1298919	ArgumentList	20		1298780	1					
ANR	1298920	Argument	20		1298780	0					
ANR	1298921	PrimaryExpression	20		1298780	0					
ANR	1298922	ExpressionStatement	cur_offset = 0	955:1:26386:26400	1298780	16	True				
ANR	1298923	AssignmentExpression	cur_offset = 0		1298780	0		=			
ANR	1298924	Identifier	cur_offset		1298780	0					
ANR	1298925	PrimaryExpression	0		1298780	1					
ANR	1298926	ForStatement	"for ( zend_hash_internal_pointer_reset_ex ( Z_ARRVAL_P ( arr ) , & pos ) , i = 0 ; ! ctx -> err . has_error && zend_hash_get_current_data_ex ( Z_ARRVAL_P ( arr ) , ( void * * ) & elem , & pos ) == SUCCESS ; zend_hash_move_forward_ex ( Z_ARRVAL_P ( arr ) , & pos ) )"		1298780	17					
ANR	1298927	ForInit	"zend_hash_internal_pointer_reset_ex ( Z_ARRVAL_P ( arr ) , & pos ) , i = 0 ;"	957:9:26412:26477	1298780	0	True				
ANR	1298928	Expression	"zend_hash_internal_pointer_reset_ex ( Z_ARRVAL_P ( arr ) , & pos ) , i = 0"		1298780	0					
ANR	1298929	CallExpression	"zend_hash_internal_pointer_reset_ex ( Z_ARRVAL_P ( arr ) , & pos )"		1298780	0					
ANR	1298930	Callee	zend_hash_internal_pointer_reset_ex		1298780	0					
ANR	1298931	Identifier	zend_hash_internal_pointer_reset_ex		1298780	0					
ANR	1298932	ArgumentList	Z_ARRVAL_P ( arr )		1298780	1					
ANR	1298933	Argument	Z_ARRVAL_P ( arr )		1298780	0					
ANR	1298934	CallExpression	Z_ARRVAL_P ( arr )		1298780	0					
ANR	1298935	Callee	Z_ARRVAL_P		1298780	0					
ANR	1298936	Identifier	Z_ARRVAL_P		1298780	0					
ANR	1298937	ArgumentList	arr		1298780	1					
ANR	1298938	Argument	arr		1298780	0					
ANR	1298939	Identifier	arr		1298780	0					
ANR	1298940	Argument	& pos		1298780	1					
ANR	1298941	UnaryOperationExpression	& pos		1298780	0					
ANR	1298942	UnaryOperator	&		1298780	0					
ANR	1298943	Identifier	pos		1298780	1					
ANR	1298944	AssignmentExpression	i = 0		1298780	1		=			
ANR	1298945	Identifier	i		1298780	0					
ANR	1298946	PrimaryExpression	0		1298780	1					
ANR	1298947	Condition	"! ctx -> err . has_error && zend_hash_get_current_data_ex ( Z_ARRVAL_P ( arr ) , ( void * * ) & elem , & pos ) == SUCCESS"	958:3:26482:26586	1298780	1	True				
ANR	1298948	AndExpression	"! ctx -> err . has_error && zend_hash_get_current_data_ex ( Z_ARRVAL_P ( arr ) , ( void * * ) & elem , & pos ) == SUCCESS"		1298780	0		&&			
ANR	1298949	UnaryOperationExpression	! ctx -> err . has_error		1298780	0					
ANR	1298950	UnaryOperator	!		1298780	0					
ANR	1298951	MemberAccess	ctx -> err . has_error		1298780	1					
ANR	1298952	PtrMemberAccess	ctx -> err		1298780	0					
ANR	1298953	Identifier	ctx		1298780	0					
ANR	1298954	Identifier	err		1298780	1					
ANR	1298955	Identifier	has_error		1298780	1					
ANR	1298956	EqualityExpression	"zend_hash_get_current_data_ex ( Z_ARRVAL_P ( arr ) , ( void * * ) & elem , & pos ) == SUCCESS"		1298780	1		==			
ANR	1298957	CallExpression	"zend_hash_get_current_data_ex ( Z_ARRVAL_P ( arr ) , ( void * * ) & elem , & pos )"		1298780	0					
ANR	1298958	Callee	zend_hash_get_current_data_ex		1298780	0					
ANR	1298959	Identifier	zend_hash_get_current_data_ex		1298780	0					
ANR	1298960	ArgumentList	Z_ARRVAL_P ( arr )		1298780	1					
ANR	1298961	Argument	Z_ARRVAL_P ( arr )		1298780	0					
ANR	1298962	CallExpression	Z_ARRVAL_P ( arr )		1298780	0					
ANR	1298963	Callee	Z_ARRVAL_P		1298780	0					
ANR	1298964	Identifier	Z_ARRVAL_P		1298780	0					
ANR	1298965	ArgumentList	arr		1298780	1					
ANR	1298966	Argument	arr		1298780	0					
ANR	1298967	Identifier	arr		1298780	0					
ANR	1298968	Argument	( void * * ) & elem		1298780	1					
ANR	1298969	CastExpression	( void * * ) & elem		1298780	0					
ANR	1298970	CastTarget	void * *		1298780	0					
ANR	1298971	UnaryOperationExpression	& elem		1298780	1					
ANR	1298972	UnaryOperator	&		1298780	0					
ANR	1298973	Identifier	elem		1298780	1					
ANR	1298974	Argument	& pos		1298780	2					
ANR	1298975	UnaryOperationExpression	& pos		1298780	0					
ANR	1298976	UnaryOperator	&		1298780	0					
ANR	1298977	Identifier	pos		1298780	1					
ANR	1298978	Identifier	SUCCESS		1298780	1					
ANR	1298979	CallExpression	"zend_hash_move_forward_ex ( Z_ARRVAL_P ( arr ) , & pos )"	960:3:26592:26639	1298780	2	True				
ANR	1298980	Callee	zend_hash_move_forward_ex		1298780	0					
ANR	1298981	Identifier	zend_hash_move_forward_ex		1298780	0					
ANR	1298982	ArgumentList	Z_ARRVAL_P ( arr )		1298780	1					
ANR	1298983	Argument	Z_ARRVAL_P ( arr )		1298780	0					
ANR	1298984	CallExpression	Z_ARRVAL_P ( arr )		1298780	0					
ANR	1298985	Callee	Z_ARRVAL_P		1298780	0					
ANR	1298986	Identifier	Z_ARRVAL_P		1298780	0					
ANR	1298987	ArgumentList	arr		1298780	1					
ANR	1298988	Argument	arr		1298780	0					
ANR	1298989	Identifier	arr		1298780	0					
ANR	1298990	Argument	& pos		1298780	1					
ANR	1298991	UnaryOperationExpression	& pos		1298780	0					
ANR	1298992	UnaryOperator	&		1298780	0					
ANR	1298993	Identifier	pos		1298780	1					
ANR	1298994	CompoundStatement		33:53:935:935	1298780	3					
ANR	1298995	IfStatement	"if ( snprintf ( buf , sizeof ( buf ) , ""element #%u"" , ( unsigned ) i ++ ) >= sizeof ( buf ) )"		1298780	0					
ANR	1298996	Condition	"snprintf ( buf , sizeof ( buf ) , ""element #%u"" , ( unsigned ) i ++ ) >= sizeof ( buf )"	962:6:26651:26721	1298780	0	True				
ANR	1298997	RelationalExpression	"snprintf ( buf , sizeof ( buf ) , ""element #%u"" , ( unsigned ) i ++ ) >= sizeof ( buf )"		1298780	0		>=			
ANR	1298998	CallExpression	"snprintf ( buf , sizeof ( buf ) , ""element #%u"" , ( unsigned ) i ++ )"		1298780	0					
ANR	1298999	Callee	snprintf		1298780	0					
ANR	1299000	Identifier	snprintf		1298780	0					
ANR	1299001	ArgumentList	buf		1298780	1					
ANR	1299002	Argument	buf		1298780	0					
ANR	1299003	Identifier	buf		1298780	0					
ANR	1299004	Argument	sizeof ( buf )		1298780	1					
ANR	1299005	SizeofExpression	sizeof ( buf )		1298780	0					
ANR	1299006	Sizeof	sizeof		1298780	0					
ANR	1299007	SizeofOperand	buf		1298780	1					
ANR	1299008	Argument	"""element #%u"""		1298780	2					
ANR	1299009	PrimaryExpression	"""element #%u"""		1298780	0					
ANR	1299010	Argument	( unsigned ) i ++		1298780	3					
ANR	1299011	CastExpression	( unsigned ) i ++		1298780	0					
ANR	1299012	CastTarget	unsigned		1298780	0					
ANR	1299013	PostIncDecOperationExpression	i ++		1298780	1					
ANR	1299014	Identifier	i		1298780	0					
ANR	1299015	IncDec	++		1298780	1					
ANR	1299016	SizeofExpression	sizeof ( buf )		1298780	1					
ANR	1299017	Sizeof	sizeof		1298780	0					
ANR	1299018	SizeofOperand	buf		1298780	1					
ANR	1299019	CompoundStatement		35:79:1017:1017	1298780	1					
ANR	1299020	ExpressionStatement	"memcpy ( buf , ""element"" , sizeof ( ""element"" ) )"	963:3:26729:26770	1298780	0	True				
ANR	1299021	CallExpression	"memcpy ( buf , ""element"" , sizeof ( ""element"" ) )"		1298780	0					
ANR	1299022	Callee	memcpy		1298780	0					
ANR	1299023	Identifier	memcpy		1298780	0					
ANR	1299024	ArgumentList	buf		1298780	1					
ANR	1299025	Argument	buf		1298780	0					
ANR	1299026	Identifier	buf		1298780	0					
ANR	1299027	Argument	"""element"""		1298780	1					
ANR	1299028	PrimaryExpression	"""element"""		1298780	0					
ANR	1299029	Argument	"sizeof ( ""element"" )"		1298780	2					
ANR	1299030	SizeofExpression	"sizeof ( ""element"" )"		1298780	0					
ANR	1299031	Sizeof	sizeof		1298780	0					
ANR	1299032	PrimaryExpression	"""element"""		1298780	1					
ANR	1299033	ExpressionStatement	"zend_llist_add_element ( & ctx -> keys , & bufp )"	965:2:26778:26819	1298780	1	True				
ANR	1299034	CallExpression	"zend_llist_add_element ( & ctx -> keys , & bufp )"		1298780	0					
ANR	1299035	Callee	zend_llist_add_element		1298780	0					
ANR	1299036	Identifier	zend_llist_add_element		1298780	0					
ANR	1299037	ArgumentList	& ctx -> keys		1298780	1					
ANR	1299038	Argument	& ctx -> keys		1298780	0					
ANR	1299039	UnaryOperationExpression	& ctx -> keys		1298780	0					
ANR	1299040	UnaryOperator	&		1298780	0					
ANR	1299041	PtrMemberAccess	ctx -> keys		1298780	1					
ANR	1299042	Identifier	ctx		1298780	0					
ANR	1299043	Identifier	keys		1298780	1					
ANR	1299044	Argument	& bufp		1298780	1					
ANR	1299045	UnaryOperationExpression	& bufp		1298780	0					
ANR	1299046	UnaryOperator	&		1298780	0					
ANR	1299047	Identifier	bufp		1298780	1					
ANR	1299048	ExpressionStatement	"from_zval_write_control ( * elem , & control_buf , alloc , & control_len , & cur_offset , ctx )"	967:2:26824:26911	1298780	2	True				
ANR	1299049	CallExpression	"from_zval_write_control ( * elem , & control_buf , alloc , & control_len , & cur_offset , ctx )"		1298780	0					
ANR	1299050	Callee	from_zval_write_control		1298780	0					
ANR	1299051	Identifier	from_zval_write_control		1298780	0					
ANR	1299052	ArgumentList	* elem		1298780	1					
ANR	1299053	Argument	* elem		1298780	0					
ANR	1299054	UnaryOperationExpression	* elem		1298780	0					
ANR	1299055	UnaryOperator	*		1298780	0					
ANR	1299056	Identifier	elem		1298780	1					
ANR	1299057	Argument	& control_buf		1298780	1					
ANR	1299058	UnaryOperationExpression	& control_buf		1298780	0					
ANR	1299059	UnaryOperator	&		1298780	0					
ANR	1299060	Identifier	control_buf		1298780	1					
ANR	1299061	Argument	alloc		1298780	2					
ANR	1299062	Identifier	alloc		1298780	0					
ANR	1299063	Argument	& control_len		1298780	3					
ANR	1299064	UnaryOperationExpression	& control_len		1298780	0					
ANR	1299065	UnaryOperator	&		1298780	0					
ANR	1299066	Identifier	control_len		1298780	1					
ANR	1299067	Argument	& cur_offset		1298780	4					
ANR	1299068	UnaryOperationExpression	& cur_offset		1298780	0					
ANR	1299069	UnaryOperator	&		1298780	0					
ANR	1299070	Identifier	cur_offset		1298780	1					
ANR	1299071	Argument	ctx		1298780	5					
ANR	1299072	Identifier	ctx		1298780	0					
ANR	1299073	ExpressionStatement	zend_llist_remove_tail ( & ctx -> keys )	970:2:26916:26950	1298780	3	True				
ANR	1299074	CallExpression	zend_llist_remove_tail ( & ctx -> keys )		1298780	0					
ANR	1299075	Callee	zend_llist_remove_tail		1298780	0					
ANR	1299076	Identifier	zend_llist_remove_tail		1298780	0					
ANR	1299077	ArgumentList	& ctx -> keys		1298780	1					
ANR	1299078	Argument	& ctx -> keys		1298780	0					
ANR	1299079	UnaryOperationExpression	& ctx -> keys		1298780	0					
ANR	1299080	UnaryOperator	&		1298780	0					
ANR	1299081	PtrMemberAccess	ctx -> keys		1298780	1					
ANR	1299082	Identifier	ctx		1298780	0					
ANR	1299083	Identifier	keys		1298780	1					
ANR	1299084	ExpressionStatement	msg -> msg_control = control_buf	973:4:26963:26993	1298780	18	True				
ANR	1299085	AssignmentExpression	msg -> msg_control = control_buf		1298780	0		=			
ANR	1299086	PtrMemberAccess	msg -> msg_control		1298780	0					
ANR	1299087	Identifier	msg		1298780	0					
ANR	1299088	Identifier	msg_control		1298780	1					
ANR	1299089	Identifier	control_buf		1298780	1					
ANR	1299090	ExpressionStatement	msg -> msg_controllen = cur_offset	974:4:26999:27031	1298780	19	True				
ANR	1299091	AssignmentExpression	msg -> msg_controllen = cur_offset		1298780	0		=			
ANR	1299092	PtrMemberAccess	msg -> msg_controllen		1298780	0					
ANR	1299093	Identifier	msg		1298780	0					
ANR	1299094	Identifier	msg_controllen		1298780	1					
ANR	1299095	Identifier	cur_offset		1298780	1					
ANR	1299096	ReturnType	static void		1298780	1					
ANR	1299097	Identifier	from_zval_write_control_array		1298780	2					
ANR	1299098	ParameterList	"const zval * arr , char * msghdr_c , ser_context * ctx"		1298780	3					
ANR	1299099	Parameter	const zval * arr	927:42:25655:25669	1298780	0	True				
ANR	1299100	ParameterType	const zval *		1298780	0					
ANR	1299101	Identifier	arr		1298780	1					
ANR	1299102	Parameter	char * msghdr_c	927:59:25672:25685	1298780	1	True				
ANR	1299103	ParameterType	char *		1298780	0					
ANR	1299104	Identifier	msghdr_c		1298780	1					
ANR	1299105	Parameter	ser_context * ctx	927:75:25688:25703	1298780	2	True				
ANR	1299106	ParameterType	ser_context *		1298780	0					
ANR	1299107	Identifier	ctx		1298780	1					
ANR	1299108	CFGEntryNode	ENTRY		1298780		True				
ANR	1299109	CFGExitNode	EXIT		1298780		True				
ANR	1299110	Symbol	msg		1298780						
ANR	1299111	Symbol	msghdr_c		1298780						
ANR	1299112	Symbol	& elem		1298780						
ANR	1299113	Symbol	zend_hash_get_current_data_ex		1298780						
ANR	1299114	Symbol	& ctx -> keys		1298780						
ANR	1299115	Symbol	accounted_safe_ecalloc		1298780						
ANR	1299116	Symbol	msg -> msg_control		1298780						
ANR	1299117	Symbol	ctx -> err		1298780						
ANR	1299118	Symbol	pos		1298780						
ANR	1299119	Symbol	IS_ARRAY		1298780						
ANR	1299120	Symbol	& control_len		1298780						
ANR	1299121	Symbol	CMSG_SPACE		1298780						
ANR	1299122	Symbol	control_buf		1298780						
ANR	1299123	Symbol	ctx -> allocations		1298780						
ANR	1299124	Symbol	* elem		1298780						
ANR	1299125	Symbol	Z_ARRVAL_P		1298780						
ANR	1299126	Symbol	msg -> msg_controllen		1298780						
ANR	1299127	Symbol	& bufp		1298780						
ANR	1299128	Symbol	snprintf		1298780						
ANR	1299129	Symbol	arr		1298780						
ANR	1299130	Symbol	elem		1298780						
ANR	1299131	Symbol	SUCCESS		1298780						
ANR	1299132	Symbol	& cur_offset		1298780						
ANR	1299133	Symbol	zend_hash_num_elements		1298780						
ANR	1299134	Symbol	ctx		1298780						
ANR	1299135	Symbol	cur_offset		1298780						
ANR	1299136	Symbol	ctx -> err . has_error		1298780						
ANR	1299137	Symbol	i		1298780						
ANR	1299138	Symbol	* msg		1298780						
ANR	1299139	Symbol	Z_TYPE_P		1298780						
ANR	1299140	Symbol	* ctx		1298780						
ANR	1299141	Symbol	ctx -> allocations . tail		1298780						
ANR	1299142	Symbol	buf		1298780						
ANR	1299143	Symbol	bufp		1298780						
ANR	1299144	Symbol	& control_buf		1298780						
ANR	1299145	Symbol	control_len		1298780						
ANR	1299146	Symbol	alloc		1298780						
ANR	1299147	Symbol	num_elems		1298780						
ANR	1299148	Symbol	& pos		1298780						
ANR	1299149	Function	to_zval_read_cmsg_data	976:0:27078:28168							
ANR	1299150	FunctionDef	"to_zval_read_cmsg_data (const char * cmsghdr_c , zval * zv , res_context * ctx)"		1299149	0					
ANR	1299151	CompoundStatement		977:0:27164:28168	1299149	0					
ANR	1299152	IdentifierDeclStatement	const struct cmsghdr * cmsg = ( const struct cmsghdr * ) cmsghdr_c ;	978:1:27167:27229	1299149	0	True				
ANR	1299153	IdentifierDecl	* cmsg = ( const struct cmsghdr * ) cmsghdr_c		1299149	0					
ANR	1299154	IdentifierDeclType	const struct cmsghdr *		1299149	0					
ANR	1299155	Identifier	cmsg		1299149	1					
ANR	1299156	AssignmentExpression	* cmsg = ( const struct cmsghdr * ) cmsghdr_c		1299149	2		=			
ANR	1299157	Identifier	cmsg		1299149	0					
ANR	1299158	CastExpression	( const struct cmsghdr * ) cmsghdr_c		1299149	1					
ANR	1299159	CastTarget	const struct cmsghdr *		1299149	0					
ANR	1299160	Identifier	cmsghdr_c		1299149	1					
ANR	1299161	IdentifierDeclStatement	ancillary_reg_entry * entry ;	979:1:27232:27259	1299149	1	True				
ANR	1299162	IdentifierDecl	* entry		1299149	0					
ANR	1299163	IdentifierDeclType	ancillary_reg_entry *		1299149	0					
ANR	1299164	Identifier	entry		1299149	1					
ANR	1299165	IdentifierDeclStatement	"size_t len , * len_p = & len ;"	980:1:27262:27298	1299149	2	True				
ANR	1299166	IdentifierDecl	len		1299149	0					
ANR	1299167	IdentifierDeclType	size_t		1299149	0					
ANR	1299168	Identifier	len		1299149	1					
ANR	1299169	IdentifierDecl	* len_p = & len		1299149	1					
ANR	1299170	IdentifierDeclType	size_t *		1299149	0					
ANR	1299171	Identifier	len_p		1299149	1					
ANR	1299172	AssignmentExpression	* len_p = & len		1299149	2		=			
ANR	1299173	Identifier	len_p		1299149	0					
ANR	1299174	UnaryOperationExpression	& len		1299149	1					
ANR	1299175	UnaryOperator	&		1299149	0					
ANR	1299176	Identifier	len		1299149	1					
ANR	1299177	ExpressionStatement	"entry = get_ancillary_reg_entry ( cmsg -> cmsg_level , cmsg -> cmsg_type )"	983:1:27302:27368	1299149	3	True				
ANR	1299178	AssignmentExpression	"entry = get_ancillary_reg_entry ( cmsg -> cmsg_level , cmsg -> cmsg_type )"		1299149	0		=			
ANR	1299179	Identifier	entry		1299149	0					
ANR	1299180	CallExpression	"get_ancillary_reg_entry ( cmsg -> cmsg_level , cmsg -> cmsg_type )"		1299149	1					
ANR	1299181	Callee	get_ancillary_reg_entry		1299149	0					
ANR	1299182	Identifier	get_ancillary_reg_entry		1299149	0					
ANR	1299183	ArgumentList	cmsg -> cmsg_level		1299149	1					
ANR	1299184	Argument	cmsg -> cmsg_level		1299149	0					
ANR	1299185	PtrMemberAccess	cmsg -> cmsg_level		1299149	0					
ANR	1299186	Identifier	cmsg		1299149	0					
ANR	1299187	Identifier	cmsg_level		1299149	1					
ANR	1299188	Argument	cmsg -> cmsg_type		1299149	1					
ANR	1299189	PtrMemberAccess	cmsg -> cmsg_type		1299149	0					
ANR	1299190	Identifier	cmsg		1299149	0					
ANR	1299191	Identifier	cmsg_type		1299149	1					
ANR	1299192	IfStatement	if ( entry == NULL )		1299149	4					
ANR	1299193	Condition	entry == NULL	984:5:27375:27387	1299149	0	True				
ANR	1299194	EqualityExpression	entry == NULL		1299149	0		==			
ANR	1299195	Identifier	entry		1299149	0					
ANR	1299196	Identifier	NULL		1299149	1					
ANR	1299197	CompoundStatement		8:20:225:225	1299149	1					
ANR	1299198	ExpressionStatement	"do_to_zval_err ( ctx , ""cmsghdr with level %d and type %d not supported"" , cmsg -> cmsg_level , cmsg -> cmsg_type )"	985:2:27394:27503	1299149	0	True				
ANR	1299199	CallExpression	"do_to_zval_err ( ctx , ""cmsghdr with level %d and type %d not supported"" , cmsg -> cmsg_level , cmsg -> cmsg_type )"		1299149	0					
ANR	1299200	Callee	do_to_zval_err		1299149	0					
ANR	1299201	Identifier	do_to_zval_err		1299149	0					
ANR	1299202	ArgumentList	ctx		1299149	1					
ANR	1299203	Argument	ctx		1299149	0					
ANR	1299204	Identifier	ctx		1299149	0					
ANR	1299205	Argument	"""cmsghdr with level %d and type %d not supported"""		1299149	1					
ANR	1299206	PrimaryExpression	"""cmsghdr with level %d and type %d not supported"""		1299149	0					
ANR	1299207	Argument	cmsg -> cmsg_level		1299149	2					
ANR	1299208	PtrMemberAccess	cmsg -> cmsg_level		1299149	0					
ANR	1299209	Identifier	cmsg		1299149	0					
ANR	1299210	Identifier	cmsg_level		1299149	1					
ANR	1299211	Argument	cmsg -> cmsg_type		1299149	3					
ANR	1299212	PtrMemberAccess	cmsg -> cmsg_type		1299149	0					
ANR	1299213	Identifier	cmsg		1299149	0					
ANR	1299214	Identifier	cmsg_type		1299149	1					
ANR	1299215	ReturnStatement	return ;	987:2:27507:27513	1299149	1	True				
ANR	1299216	IfStatement	if ( CMSG_LEN ( entry -> size ) > cmsg -> cmsg_len )		1299149	5					
ANR	1299217	Condition	CMSG_LEN ( entry -> size ) > cmsg -> cmsg_len	989:5:27523:27560	1299149	0	True				
ANR	1299218	RelationalExpression	CMSG_LEN ( entry -> size ) > cmsg -> cmsg_len		1299149	0		>			
ANR	1299219	CallExpression	CMSG_LEN ( entry -> size )		1299149	0					
ANR	1299220	Callee	CMSG_LEN		1299149	0					
ANR	1299221	Identifier	CMSG_LEN		1299149	0					
ANR	1299222	ArgumentList	entry -> size		1299149	1					
ANR	1299223	Argument	entry -> size		1299149	0					
ANR	1299224	PtrMemberAccess	entry -> size		1299149	0					
ANR	1299225	Identifier	entry		1299149	0					
ANR	1299226	Identifier	size		1299149	1					
ANR	1299227	PtrMemberAccess	cmsg -> cmsg_len		1299149	1					
ANR	1299228	Identifier	cmsg		1299149	0					
ANR	1299229	Identifier	cmsg_len		1299149	1					
ANR	1299230	CompoundStatement		13:45:398:398	1299149	1					
ANR	1299231	Statement	do_to_zval_err	990:2:27567:27580	1299149	0	True				
ANR	1299232	Statement	(	990:16:27581:27581	1299149	1	True				
ANR	1299233	Statement	ctx	990:17:27582:27584	1299149	2	True				
ANR	1299234	Statement	","	990:20:27585:27585	1299149	3	True				
ANR	1299235	Statement	"""the cmsghdr structure is unexpectedly small; """	990:22:27587:27633	1299149	4	True				
ANR	1299236	Statement	"""expected a length of at least %ld, but got %ld"""	991:4:27639:27686	1299149	5	True				
ANR	1299237	Statement	","	991:52:27687:27687	1299149	6	True				
ANR	1299238	Statement	(	992:4:27693:27693	1299149	7	True				
ANR	1299239	Statement	long	992:5:27694:27697	1299149	8	True				
ANR	1299240	Statement	)	992:9:27698:27698	1299149	9	True				
ANR	1299241	Statement	CMSG_LEN	992:10:27699:27706	1299149	10	True				
ANR	1299242	Statement	(	992:18:27707:27707	1299149	11	True				
ANR	1299243	Statement	entry	992:19:27708:27712	1299149	12	True				
ANR	1299244	Statement	->	992:24:27713:27714	1299149	13	True				
ANR	1299245	Statement	size	992:26:27715:27718	1299149	14	True				
ANR	1299246	Statement	)	992:30:27719:27719	1299149	15	True				
ANR	1299247	Statement	","	992:31:27720:27720	1299149	16	True				
ANR	1299248	Statement	(	992:33:27722:27722	1299149	17	True				
ANR	1299249	Statement	long	992:34:27723:27726	1299149	18	True				
ANR	1299250	Statement	)	992:38:27727:27727	1299149	19	True				
ANR	1299251	Statement	cmsg	992:39:27728:27731	1299149	20	True				
ANR	1299252	Statement	->	992:43:27732:27733	1299149	21	True				
ANR	1299253	Statement	cmsg_len	992:45:27734:27741	1299149	22	True				
ANR	1299254	Statement	)	992:53:27742:27742	1299149	23	True				
ANR	1299255	ExpressionStatement		992:54:27743:27743	1299149	24	True				
ANR	1299256	ReturnStatement	return ;	993:2:27747:27753	1299149	25	True				
ANR	1299257	ExpressionStatement	len = ( size_t ) cmsg -> cmsg_len	996:1:27760:27788	1299149	6	True				
ANR	1299258	AssignmentExpression	len = ( size_t ) cmsg -> cmsg_len		1299149	0		=			
ANR	1299259	Identifier	len		1299149	0					
ANR	1299260	CastExpression	( size_t ) cmsg -> cmsg_len		1299149	1					
ANR	1299261	CastTarget	size_t		1299149	0					
ANR	1299262	PtrMemberAccess	cmsg -> cmsg_len		1299149	1					
ANR	1299263	Identifier	cmsg		1299149	0					
ANR	1299264	Identifier	cmsg_len		1299149	1					
ANR	1299265	IfStatement	"if ( zend_hash_add ( & ctx -> params , KEY_CMSG_LEN , sizeof ( KEY_CMSG_LEN ) , & len_p , sizeof ( len_p ) , NULL ) == FAILURE )"		1299149	7					
ANR	1299266	Condition	"zend_hash_add ( & ctx -> params , KEY_CMSG_LEN , sizeof ( KEY_CMSG_LEN ) , & len_p , sizeof ( len_p ) , NULL ) == FAILURE"	997:5:27849:27954	1299149	0	True				
ANR	1299267	EqualityExpression	"zend_hash_add ( & ctx -> params , KEY_CMSG_LEN , sizeof ( KEY_CMSG_LEN ) , & len_p , sizeof ( len_p ) , NULL ) == FAILURE"		1299149	0		==			
ANR	1299268	CallExpression	"zend_hash_add ( & ctx -> params , KEY_CMSG_LEN , sizeof ( KEY_CMSG_LEN ) , & len_p , sizeof ( len_p ) , NULL )"		1299149	0					
ANR	1299269	Callee	zend_hash_add		1299149	0					
ANR	1299270	Identifier	zend_hash_add		1299149	0					
ANR	1299271	ArgumentList	& ctx -> params		1299149	1					
ANR	1299272	Argument	& ctx -> params		1299149	0					
ANR	1299273	UnaryOperationExpression	& ctx -> params		1299149	0					
ANR	1299274	UnaryOperator	&		1299149	0					
ANR	1299275	PtrMemberAccess	ctx -> params		1299149	1					
ANR	1299276	Identifier	ctx		1299149	0					
ANR	1299277	Identifier	params		1299149	1					
ANR	1299278	Argument	KEY_CMSG_LEN		1299149	1					
ANR	1299279	Identifier	KEY_CMSG_LEN		1299149	0					
ANR	1299280	Argument	sizeof ( KEY_CMSG_LEN )		1299149	2					
ANR	1299281	SizeofExpression	sizeof ( KEY_CMSG_LEN )		1299149	0					
ANR	1299282	Sizeof	sizeof		1299149	0					
ANR	1299283	SizeofOperand	KEY_CMSG_LEN		1299149	1					
ANR	1299284	Argument	& len_p		1299149	3					
ANR	1299285	UnaryOperationExpression	& len_p		1299149	0					
ANR	1299286	UnaryOperator	&		1299149	0					
ANR	1299287	Identifier	len_p		1299149	1					
ANR	1299288	Argument	sizeof ( len_p )		1299149	4					
ANR	1299289	SizeofExpression	sizeof ( len_p )		1299149	0					
ANR	1299290	Sizeof	sizeof		1299149	0					
ANR	1299291	SizeofOperand	len_p		1299149	1					
ANR	1299292	Argument	NULL		1299149	5					
ANR	1299293	Identifier	NULL		1299149	0					
ANR	1299294	Identifier	FAILURE		1299149	1					
ANR	1299295	CompoundStatement		22:44:792:792	1299149	1					
ANR	1299296	Statement	do_to_zval_err	999:2:27961:27974	1299149	0	True				
ANR	1299297	Statement	(	999:16:27975:27975	1299149	1	True				
ANR	1299298	Statement	ctx	999:17:27976:27978	1299149	2	True				
ANR	1299299	Statement	","	999:20:27979:27979	1299149	3	True				
ANR	1299300	Statement	"""%s"""	999:22:27981:27984	1299149	4	True				
ANR	1299301	Statement	","	999:26:27985:27985	1299149	5	True				
ANR	1299302	Statement	"""could not set parameter """	999:28:27987:28012	1299149	6	True				
ANR	1299303	Statement	KEY_CMSG_LEN	999:55:28014:28025	1299149	7	True				
ANR	1299304	Statement	)	999:67:28026:28026	1299149	8	True				
ANR	1299305	ExpressionStatement		999:68:28027:28027	1299149	9	True				
ANR	1299306	ReturnStatement	return ;	1000:2:28031:28037	1299149	10	True				
ANR	1299307	ExpressionStatement	"entry -> to_array ( ( const char * ) CMSG_DATA ( cmsg ) , zv , ctx )"	1003:1:28044:28099	1299149	8	True				
ANR	1299308	CallExpression	"entry -> to_array ( ( const char * ) CMSG_DATA ( cmsg ) , zv , ctx )"		1299149	0					
ANR	1299309	Callee	entry -> to_array		1299149	0					
ANR	1299310	PtrMemberAccess	entry -> to_array		1299149	0					
ANR	1299311	Identifier	entry		1299149	0					
ANR	1299312	Identifier	to_array		1299149	1					
ANR	1299313	ArgumentList	( const char * ) CMSG_DATA ( cmsg )		1299149	1					
ANR	1299314	Argument	( const char * ) CMSG_DATA ( cmsg )		1299149	0					
ANR	1299315	CastExpression	( const char * ) CMSG_DATA ( cmsg )		1299149	0					
ANR	1299316	CastTarget	const char *		1299149	0					
ANR	1299317	CallExpression	CMSG_DATA ( cmsg )		1299149	1					
ANR	1299318	Callee	CMSG_DATA		1299149	0					
ANR	1299319	Identifier	CMSG_DATA		1299149	0					
ANR	1299320	ArgumentList	cmsg		1299149	1					
ANR	1299321	Argument	cmsg		1299149	0					
ANR	1299322	Identifier	cmsg		1299149	0					
ANR	1299323	Argument	zv		1299149	1					
ANR	1299324	Identifier	zv		1299149	0					
ANR	1299325	Argument	ctx		1299149	2					
ANR	1299326	Identifier	ctx		1299149	0					
ANR	1299327	ExpressionStatement	"zend_hash_del ( & ctx -> params , KEY_CMSG_LEN , sizeof ( KEY_CMSG_LEN ) )"	1005:1:28103:28166	1299149	9	True				
ANR	1299328	CallExpression	"zend_hash_del ( & ctx -> params , KEY_CMSG_LEN , sizeof ( KEY_CMSG_LEN ) )"		1299149	0					
ANR	1299329	Callee	zend_hash_del		1299149	0					
ANR	1299330	Identifier	zend_hash_del		1299149	0					
ANR	1299331	ArgumentList	& ctx -> params		1299149	1					
ANR	1299332	Argument	& ctx -> params		1299149	0					
ANR	1299333	UnaryOperationExpression	& ctx -> params		1299149	0					
ANR	1299334	UnaryOperator	&		1299149	0					
ANR	1299335	PtrMemberAccess	ctx -> params		1299149	1					
ANR	1299336	Identifier	ctx		1299149	0					
ANR	1299337	Identifier	params		1299149	1					
ANR	1299338	Argument	KEY_CMSG_LEN		1299149	1					
ANR	1299339	Identifier	KEY_CMSG_LEN		1299149	0					
ANR	1299340	Argument	sizeof ( KEY_CMSG_LEN )		1299149	2					
ANR	1299341	SizeofExpression	sizeof ( KEY_CMSG_LEN )		1299149	0					
ANR	1299342	Sizeof	sizeof		1299149	0					
ANR	1299343	SizeofOperand	KEY_CMSG_LEN		1299149	1					
ANR	1299344	ReturnType	static void		1299149	1					
ANR	1299345	Identifier	to_zval_read_cmsg_data		1299149	2					
ANR	1299346	ParameterList	"const char * cmsghdr_c , zval * zv , res_context * ctx"		1299149	3					
ANR	1299347	Parameter	const char * cmsghdr_c	976:35:27113:27133	1299149	0	True				
ANR	1299348	ParameterType	const char *		1299149	0					
ANR	1299349	Identifier	cmsghdr_c		1299149	1					
ANR	1299350	Parameter	zval * zv	976:58:27136:27143	1299149	1	True				
ANR	1299351	ParameterType	zval *		1299149	0					
ANR	1299352	Identifier	zv		1299149	1					
ANR	1299353	Parameter	res_context * ctx	976:68:27146:27161	1299149	2	True				
ANR	1299354	ParameterType	res_context *		1299149	0					
ANR	1299355	Identifier	ctx		1299149	1					
ANR	1299356	CFGEntryNode	ENTRY		1299149		True				
ANR	1299357	CFGExitNode	EXIT		1299149		True				
ANR	1299358	Symbol	CMSG_DATA		1299149						
ANR	1299359	Symbol	NULL		1299149						
ANR	1299360	Symbol	& len_p		1299149						
ANR	1299361	Symbol	ctx		1299149						
ANR	1299362	Symbol	len_p		1299149						
ANR	1299363	Symbol	* cmsg		1299149						
ANR	1299364	Symbol	cmsg -> cmsg_level		1299149						
ANR	1299365	Symbol	FAILURE		1299149						
ANR	1299366	Symbol	cmsg		1299149						
ANR	1299367	Symbol	entry		1299149						
ANR	1299368	Symbol	get_ancillary_reg_entry		1299149						
ANR	1299369	Symbol	CMSG_LEN		1299149						
ANR	1299370	Symbol	cmsghdr_c		1299149						
ANR	1299371	Symbol	cmsg -> cmsg_type		1299149						
ANR	1299372	Symbol	len		1299149						
ANR	1299373	Symbol	entry -> size		1299149						
ANR	1299374	Symbol	zend_hash_add		1299149						
ANR	1299375	Symbol	KEY_CMSG_LEN		1299149						
ANR	1299376	Symbol	& ctx -> params		1299149						
ANR	1299377	Symbol	zv		1299149						
ANR	1299378	Symbol	& len		1299149						
ANR	1299379	Symbol	cmsg -> cmsg_len		1299149						
ANR	1299380	Symbol	* entry		1299149						
ANR	1299381	Function	to_zval_read_control	1007:0:28170:28734							
ANR	1299382	FunctionDef	"to_zval_read_control (const char * cmsghdr_c , zval * zv , res_context * ctx)"		1299381	0					
ANR	1299383	CompoundStatement		1008:0:28254:28734	1299381	0					
ANR	1299384	Statement	static	1010:1:28323:28328	1299381	0	True				
ANR	1299385	Statement	const	1010:8:28330:28334	1299381	1	True				
ANR	1299386	Statement	field_descriptor	1010:14:28336:28351	1299381	2	True				
ANR	1299387	Statement	descriptors	1010:31:28353:28363	1299381	3	True				
ANR	1299388	Statement	[	1010:42:28364:28364	1299381	4	True				
ANR	1299389	Statement	]	1010:43:28365:28365	1299381	5	True				
ANR	1299390	Statement	=	1010:45:28367:28367	1299381	6	True				
ANR	1299391	CompoundStatement		3:47:114:114	1299381	7					
ANR	1299392	CompoundStatement		4:3:119:119	1299381	0					
ANR	1299393	Statement	"""level"""	1011:4:28375:28381	1299381	0	True				
ANR	1299394	Statement	","	1011:11:28382:28382	1299381	1	True				
ANR	1299395	Statement	sizeof	1011:13:28384:28389	1299381	2	True				
ANR	1299396	Statement	(	1011:19:28390:28390	1299381	3	True				
ANR	1299397	Statement	"""level"""	1011:20:28391:28397	1299381	4	True				
ANR	1299398	Statement	)	1011:27:28398:28398	1299381	5	True				
ANR	1299399	Statement	","	1011:28:28399:28399	1299381	6	True				
ANR	1299400	Statement	0	1011:30:28401:28401	1299381	7	True				
ANR	1299401	Statement	","	1011:31:28402:28402	1299381	8	True				
ANR	1299402	Statement	offsetof	1011:33:28404:28411	1299381	9	True				
ANR	1299403	Statement	(	1011:41:28412:28412	1299381	10	True				
ANR	1299404	Statement	struct	1011:42:28413:28418	1299381	11	True				
ANR	1299405	Statement	cmsghdr	1011:49:28420:28426	1299381	12	True				
ANR	1299406	Statement	","	1011:56:28427:28427	1299381	13	True				
ANR	1299407	Statement	cmsg_level	1011:58:28429:28438	1299381	14	True				
ANR	1299408	Statement	)	1011:68:28439:28439	1299381	15	True				
ANR	1299409	Statement	","	1011:69:28440:28440	1299381	16	True				
ANR	1299410	Statement	0	1011:71:28442:28442	1299381	17	True				
ANR	1299411	Statement	","	1011:72:28443:28443	1299381	18	True				
ANR	1299412	Statement	to_zval_read_int	1011:74:28445:28460	1299381	19	True				
ANR	1299413	Statement	","	1011:91:28462:28462	1299381	1	True				
ANR	1299414	CompoundStatement		5:3:212:212	1299381	2					
ANR	1299415	Statement	"""type"""	1012:4:28468:28473	1299381	0	True				
ANR	1299416	Statement	","	1012:10:28474:28474	1299381	1	True				
ANR	1299417	Statement	sizeof	1012:12:28476:28481	1299381	2	True				
ANR	1299418	Statement	(	1012:18:28482:28482	1299381	3	True				
ANR	1299419	Statement	"""type"""	1012:19:28483:28488	1299381	4	True				
ANR	1299420	Statement	)	1012:25:28489:28489	1299381	5	True				
ANR	1299421	Statement	","	1012:26:28490:28490	1299381	6	True				
ANR	1299422	Statement	0	1012:28:28492:28492	1299381	7	True				
ANR	1299423	Statement	","	1012:29:28493:28493	1299381	8	True				
ANR	1299424	Statement	offsetof	1012:31:28495:28502	1299381	9	True				
ANR	1299425	Statement	(	1012:39:28503:28503	1299381	10	True				
ANR	1299426	Statement	struct	1012:40:28504:28509	1299381	11	True				
ANR	1299427	Statement	cmsghdr	1012:47:28511:28517	1299381	12	True				
ANR	1299428	Statement	","	1012:54:28518:28518	1299381	13	True				
ANR	1299429	Statement	cmsg_type	1012:56:28520:28528	1299381	14	True				
ANR	1299430	Statement	)	1012:65:28529:28529	1299381	15	True				
ANR	1299431	Statement	","	1012:66:28530:28530	1299381	16	True				
ANR	1299432	Statement	0	1012:68:28532:28532	1299381	17	True				
ANR	1299433	Statement	","	1012:69:28533:28533	1299381	18	True				
ANR	1299434	Statement	to_zval_read_int	1012:71:28535:28550	1299381	19	True				
ANR	1299435	Statement	","	1012:88:28552:28552	1299381	3	True				
ANR	1299436	CompoundStatement		6:3:302:302	1299381	4					
ANR	1299437	Statement	"""data"""	1013:4:28558:28563	1299381	0	True				
ANR	1299438	Statement	","	1013:10:28564:28564	1299381	1	True				
ANR	1299439	Statement	sizeof	1013:12:28566:28571	1299381	2	True				
ANR	1299440	Statement	(	1013:18:28572:28572	1299381	3	True				
ANR	1299441	Statement	"""data"""	1013:19:28573:28578	1299381	4	True				
ANR	1299442	Statement	)	1013:25:28579:28579	1299381	5	True				
ANR	1299443	Statement	","	1013:26:28580:28580	1299381	6	True				
ANR	1299444	Statement	0	1013:28:28582:28582	1299381	7	True				
ANR	1299445	Statement	","	1013:29:28583:28583	1299381	8	True				
ANR	1299446	Statement	0	1013:31:28585:28585	1299381	9	True				
ANR	1299447	Statement	","	1013:53:28607:28607	1299381	10	True				
ANR	1299448	Statement	0	1013:55:28609:28609	1299381	11	True				
ANR	1299449	Statement	","	1013:56:28610:28610	1299381	12	True				
ANR	1299450	Statement	to_zval_read_cmsg_data	1013:58:28612:28633	1299381	13	True				
ANR	1299451	Statement	","	1013:81:28635:28635	1299381	5	True				
ANR	1299452	CompoundStatement		7:3:385:385	1299381	6					
ANR	1299453	Statement	0	1014:4:28641:28641	1299381	0	True				
ANR	1299454	ExpressionStatement		1015:2:28646:28646	1299381	8	True				
ANR	1299455	ExpressionStatement	"array_init_size ( zv , 3 )"	1017:1:28650:28672	1299381	9	True				
ANR	1299456	CallExpression	"array_init_size ( zv , 3 )"		1299381	0					
ANR	1299457	Callee	array_init_size		1299381	0					
ANR	1299458	Identifier	array_init_size		1299381	0					
ANR	1299459	ArgumentList	zv		1299381	1					
ANR	1299460	Argument	zv		1299381	0					
ANR	1299461	Identifier	zv		1299381	0					
ANR	1299462	Argument	3		1299381	1					
ANR	1299463	PrimaryExpression	3		1299381	0					
ANR	1299464	ExpressionStatement	"to_zval_read_aggregation ( cmsghdr_c , zv , descriptors , ctx )"	1018:1:28675:28732	1299381	10	True				
ANR	1299465	CallExpression	"to_zval_read_aggregation ( cmsghdr_c , zv , descriptors , ctx )"		1299381	0					
ANR	1299466	Callee	to_zval_read_aggregation		1299381	0					
ANR	1299467	Identifier	to_zval_read_aggregation		1299381	0					
ANR	1299468	ArgumentList	cmsghdr_c		1299381	1					
ANR	1299469	Argument	cmsghdr_c		1299381	0					
ANR	1299470	Identifier	cmsghdr_c		1299381	0					
ANR	1299471	Argument	zv		1299381	1					
ANR	1299472	Identifier	zv		1299381	0					
ANR	1299473	Argument	descriptors		1299381	2					
ANR	1299474	Identifier	descriptors		1299381	0					
ANR	1299475	Argument	ctx		1299381	3					
ANR	1299476	Identifier	ctx		1299381	0					
ANR	1299477	ReturnType	static void		1299381	1					
ANR	1299478	Identifier	to_zval_read_control		1299381	2					
ANR	1299479	ParameterList	"const char * cmsghdr_c , zval * zv , res_context * ctx"		1299381	3					
ANR	1299480	Parameter	const char * cmsghdr_c	1007:33:28203:28223	1299381	0	True				
ANR	1299481	ParameterType	const char *		1299381	0					
ANR	1299482	Identifier	cmsghdr_c		1299381	1					
ANR	1299483	Parameter	zval * zv	1007:56:28226:28233	1299381	1	True				
ANR	1299484	ParameterType	zval *		1299381	0					
ANR	1299485	Identifier	zv		1299381	1					
ANR	1299486	Parameter	res_context * ctx	1007:66:28236:28251	1299381	2	True				
ANR	1299487	ParameterType	res_context *		1299381	0					
ANR	1299488	Identifier	ctx		1299381	1					
ANR	1299489	CFGEntryNode	ENTRY		1299381		True				
ANR	1299490	CFGExitNode	EXIT		1299381		True				
ANR	1299491	Symbol	descriptors		1299381						
ANR	1299492	Symbol	cmsghdr_c		1299381						
ANR	1299493	Symbol	ctx		1299381						
ANR	1299494	Symbol	zv		1299381						
ANR	1299495	Function	to_zval_read_control_array	1020:0:28736:29652							
ANR	1299496	FunctionDef	"to_zval_read_control_array (const char * msghdr_c , zval * zv , res_context * ctx)"		1299495	0					
ANR	1299497	CompoundStatement		1021:0:28825:29652	1299495	0					
ANR	1299498	IdentifierDeclStatement	struct msghdr * msg = ( struct msghdr * ) msghdr_c ;	1022:1:28828:28874	1299495	0	True				
ANR	1299499	IdentifierDecl	* msg = ( struct msghdr * ) msghdr_c		1299495	0					
ANR	1299500	IdentifierDeclType	struct msghdr *		1299495	0					
ANR	1299501	Identifier	msg		1299495	1					
ANR	1299502	AssignmentExpression	* msg = ( struct msghdr * ) msghdr_c		1299495	2		=			
ANR	1299503	Identifier	msg		1299495	0					
ANR	1299504	CastExpression	( struct msghdr * ) msghdr_c		1299495	1					
ANR	1299505	CastTarget	struct msghdr *		1299495	0					
ANR	1299506	Identifier	msghdr_c		1299495	1					
ANR	1299507	IdentifierDeclStatement	struct cmsghdr * cmsg ;	1023:1:28877:28897	1299495	1	True				
ANR	1299508	IdentifierDecl	* cmsg		1299495	0					
ANR	1299509	IdentifierDeclType	struct cmsghdr *		1299495	0					
ANR	1299510	Identifier	cmsg		1299495	1					
ANR	1299511	IdentifierDeclStatement	"char buf [ sizeof ( ""element #4294967295"" ) ] ;"	1024:1:28900:28941	1299495	2	True				
ANR	1299512	IdentifierDecl	"buf [ sizeof ( ""element #4294967295"" ) ]"		1299495	0					
ANR	1299513	IdentifierDeclType	"char [ sizeof ( ""element #4294967295"" ) ]"		1299495	0					
ANR	1299514	Identifier	buf		1299495	1					
ANR	1299515	SizeofExpression	"sizeof ( ""element #4294967295"" )"		1299495	2					
ANR	1299516	Sizeof	sizeof		1299495	0					
ANR	1299517	PrimaryExpression	"""element #4294967295"""		1299495	1					
ANR	1299518	IdentifierDeclStatement	char * bufp = buf ;	1025:1:28944:28962	1299495	3	True				
ANR	1299519	IdentifierDecl	* bufp = buf		1299495	0					
ANR	1299520	IdentifierDeclType	char *		1299495	0					
ANR	1299521	Identifier	bufp		1299495	1					
ANR	1299522	AssignmentExpression	* bufp = buf		1299495	2		=			
ANR	1299523	Identifier	buf		1299495	0					
ANR	1299524	Identifier	buf		1299495	1					
ANR	1299525	IdentifierDeclStatement	uint32_t i = 1 ;	1026:1:28965:28980	1299495	4	True				
ANR	1299526	IdentifierDecl	i = 1		1299495	0					
ANR	1299527	IdentifierDeclType	uint32_t		1299495	0					
ANR	1299528	Identifier	i		1299495	1					
ANR	1299529	AssignmentExpression	i = 1		1299495	2		=			
ANR	1299530	Identifier	i		1299495	0					
ANR	1299531	PrimaryExpression	1		1299495	1					
ANR	1299532	ExpressionStatement	array_init ( zv )	1035:1:29178:29192	1299495	5	True				
ANR	1299533	CallExpression	array_init ( zv )		1299495	0					
ANR	1299534	Callee	array_init		1299495	0					
ANR	1299535	Identifier	array_init		1299495	0					
ANR	1299536	ArgumentList	zv		1299495	1					
ANR	1299537	Argument	zv		1299495	0					
ANR	1299538	Identifier	zv		1299495	0					
ANR	1299539	ForStatement	"for ( cmsg = CMSG_FIRSTHDR ( msg ) ; cmsg != NULL && ! ctx -> err . has_error ; cmsg = CMSG_NXTHDR ( msg , cmsg ) )"		1299495	6					
ANR	1299540	ForInit	cmsg = CMSG_FIRSTHDR ( msg ) ;	1037:6:29201:29226	1299495	0	True				
ANR	1299541	AssignmentExpression	cmsg = CMSG_FIRSTHDR ( msg )		1299495	0		=			
ANR	1299542	Identifier	cmsg		1299495	0					
ANR	1299543	CallExpression	CMSG_FIRSTHDR ( msg )		1299495	1					
ANR	1299544	Callee	CMSG_FIRSTHDR		1299495	0					
ANR	1299545	Identifier	CMSG_FIRSTHDR		1299495	0					
ANR	1299546	ArgumentList	msg		1299495	1					
ANR	1299547	Argument	msg		1299495	0					
ANR	1299548	Identifier	msg		1299495	0					
ANR	1299549	Condition	cmsg != NULL && ! ctx -> err . has_error	1038:3:29231:29265	1299495	1	True				
ANR	1299550	AndExpression	cmsg != NULL && ! ctx -> err . has_error		1299495	0		&&			
ANR	1299551	EqualityExpression	cmsg != NULL		1299495	0		!=			
ANR	1299552	Identifier	cmsg		1299495	0					
ANR	1299553	Identifier	NULL		1299495	1					
ANR	1299554	UnaryOperationExpression	! ctx -> err . has_error		1299495	1					
ANR	1299555	UnaryOperator	!		1299495	0					
ANR	1299556	MemberAccess	ctx -> err . has_error		1299495	1					
ANR	1299557	PtrMemberAccess	ctx -> err		1299495	0					
ANR	1299558	Identifier	ctx		1299495	0					
ANR	1299559	Identifier	err		1299495	1					
ANR	1299560	Identifier	has_error		1299495	1					
ANR	1299561	AssignmentExpression	"cmsg = CMSG_NXTHDR ( msg , cmsg )"	1039:3:29271:29299	1299495	2	True	=			
ANR	1299562	Identifier	cmsg		1299495	0					
ANR	1299563	CallExpression	"CMSG_NXTHDR ( msg , cmsg )"		1299495	1					
ANR	1299564	Callee	CMSG_NXTHDR		1299495	0					
ANR	1299565	Identifier	CMSG_NXTHDR		1299495	0					
ANR	1299566	ArgumentList	msg		1299495	1					
ANR	1299567	Argument	msg		1299495	0					
ANR	1299568	Identifier	msg		1299495	0					
ANR	1299569	Argument	cmsg		1299495	1					
ANR	1299570	Identifier	cmsg		1299495	0					
ANR	1299571	CompoundStatement		20:2:480:490	1299495	3					
ANR	1299572	IdentifierDeclStatement	zval * elem ;	1040:2:29306:29316	1299495	0	True				
ANR	1299573	IdentifierDecl	* elem		1299495	0					
ANR	1299574	IdentifierDeclType	zval *		1299495	0					
ANR	1299575	Identifier	elem		1299495	1					
ANR	1299576	ExpressionStatement	ALLOC_INIT_ZVAL ( elem )	1042:2:29321:29342	1299495	1	True				
ANR	1299577	CallExpression	ALLOC_INIT_ZVAL ( elem )		1299495	0					
ANR	1299578	Callee	ALLOC_INIT_ZVAL		1299495	0					
ANR	1299579	Identifier	ALLOC_INIT_ZVAL		1299495	0					
ANR	1299580	ArgumentList	elem		1299495	1					
ANR	1299581	Argument	elem		1299495	0					
ANR	1299582	Identifier	elem		1299495	0					
ANR	1299583	ExpressionStatement	"add_next_index_zval ( zv , elem )"	1043:2:29346:29375	1299495	2	True				
ANR	1299584	CallExpression	"add_next_index_zval ( zv , elem )"		1299495	0					
ANR	1299585	Callee	add_next_index_zval		1299495	0					
ANR	1299586	Identifier	add_next_index_zval		1299495	0					
ANR	1299587	ArgumentList	zv		1299495	1					
ANR	1299588	Argument	zv		1299495	0					
ANR	1299589	Identifier	zv		1299495	0					
ANR	1299590	Argument	elem		1299495	1					
ANR	1299591	Identifier	elem		1299495	0					
ANR	1299592	IfStatement	"if ( snprintf ( buf , sizeof ( buf ) , ""element #%u"" , ( unsigned ) i ++ ) >= sizeof ( buf ) )"		1299495	3					
ANR	1299593	Condition	"snprintf ( buf , sizeof ( buf ) , ""element #%u"" , ( unsigned ) i ++ ) >= sizeof ( buf )"	1045:6:29384:29454	1299495	0	True				
ANR	1299594	RelationalExpression	"snprintf ( buf , sizeof ( buf ) , ""element #%u"" , ( unsigned ) i ++ ) >= sizeof ( buf )"		1299495	0		>=			
ANR	1299595	CallExpression	"snprintf ( buf , sizeof ( buf ) , ""element #%u"" , ( unsigned ) i ++ )"		1299495	0					
ANR	1299596	Callee	snprintf		1299495	0					
ANR	1299597	Identifier	snprintf		1299495	0					
ANR	1299598	ArgumentList	buf		1299495	1					
ANR	1299599	Argument	buf		1299495	0					
ANR	1299600	Identifier	buf		1299495	0					
ANR	1299601	Argument	sizeof ( buf )		1299495	1					
ANR	1299602	SizeofExpression	sizeof ( buf )		1299495	0					
ANR	1299603	Sizeof	sizeof		1299495	0					
ANR	1299604	SizeofOperand	buf		1299495	1					
ANR	1299605	Argument	"""element #%u"""		1299495	2					
ANR	1299606	PrimaryExpression	"""element #%u"""		1299495	0					
ANR	1299607	Argument	( unsigned ) i ++		1299495	3					
ANR	1299608	CastExpression	( unsigned ) i ++		1299495	0					
ANR	1299609	CastTarget	unsigned		1299495	0					
ANR	1299610	PostIncDecOperationExpression	i ++		1299495	1					
ANR	1299611	Identifier	i		1299495	0					
ANR	1299612	IncDec	++		1299495	1					
ANR	1299613	SizeofExpression	sizeof ( buf )		1299495	1					
ANR	1299614	Sizeof	sizeof		1299495	0					
ANR	1299615	SizeofOperand	buf		1299495	1					
ANR	1299616	CompoundStatement		25:79:631:631	1299495	1					
ANR	1299617	ExpressionStatement	"memcpy ( buf , ""element"" , sizeof ( ""element"" ) )"	1046:3:29462:29503	1299495	0	True				
ANR	1299618	CallExpression	"memcpy ( buf , ""element"" , sizeof ( ""element"" ) )"		1299495	0					
ANR	1299619	Callee	memcpy		1299495	0					
ANR	1299620	Identifier	memcpy		1299495	0					
ANR	1299621	ArgumentList	buf		1299495	1					
ANR	1299622	Argument	buf		1299495	0					
ANR	1299623	Identifier	buf		1299495	0					
ANR	1299624	Argument	"""element"""		1299495	1					
ANR	1299625	PrimaryExpression	"""element"""		1299495	0					
ANR	1299626	Argument	"sizeof ( ""element"" )"		1299495	2					
ANR	1299627	SizeofExpression	"sizeof ( ""element"" )"		1299495	0					
ANR	1299628	Sizeof	sizeof		1299495	0					
ANR	1299629	PrimaryExpression	"""element"""		1299495	1					
ANR	1299630	ExpressionStatement	"zend_llist_add_element ( & ctx -> keys , & bufp )"	1048:2:29511:29552	1299495	4	True				
ANR	1299631	CallExpression	"zend_llist_add_element ( & ctx -> keys , & bufp )"		1299495	0					
ANR	1299632	Callee	zend_llist_add_element		1299495	0					
ANR	1299633	Identifier	zend_llist_add_element		1299495	0					
ANR	1299634	ArgumentList	& ctx -> keys		1299495	1					
ANR	1299635	Argument	& ctx -> keys		1299495	0					
ANR	1299636	UnaryOperationExpression	& ctx -> keys		1299495	0					
ANR	1299637	UnaryOperator	&		1299495	0					
ANR	1299638	PtrMemberAccess	ctx -> keys		1299495	1					
ANR	1299639	Identifier	ctx		1299495	0					
ANR	1299640	Identifier	keys		1299495	1					
ANR	1299641	Argument	& bufp		1299495	1					
ANR	1299642	UnaryOperationExpression	& bufp		1299495	0					
ANR	1299643	UnaryOperator	&		1299495	0					
ANR	1299644	Identifier	bufp		1299495	1					
ANR	1299645	ExpressionStatement	"to_zval_read_control ( ( const char * ) cmsg , elem , ctx )"	1050:2:29557:29608	1299495	5	True				
ANR	1299646	CallExpression	"to_zval_read_control ( ( const char * ) cmsg , elem , ctx )"		1299495	0					
ANR	1299647	Callee	to_zval_read_control		1299495	0					
ANR	1299648	Identifier	to_zval_read_control		1299495	0					
ANR	1299649	ArgumentList	( const char * ) cmsg		1299495	1					
ANR	1299650	Argument	( const char * ) cmsg		1299495	0					
ANR	1299651	CastExpression	( const char * ) cmsg		1299495	0					
ANR	1299652	CastTarget	const char *		1299495	0					
ANR	1299653	Identifier	cmsg		1299495	1					
ANR	1299654	Argument	elem		1299495	1					
ANR	1299655	Identifier	elem		1299495	0					
ANR	1299656	Argument	ctx		1299495	2					
ANR	1299657	Identifier	ctx		1299495	0					
ANR	1299658	ExpressionStatement	zend_llist_remove_tail ( & ctx -> keys )	1052:2:29613:29647	1299495	6	True				
ANR	1299659	CallExpression	zend_llist_remove_tail ( & ctx -> keys )		1299495	0					
ANR	1299660	Callee	zend_llist_remove_tail		1299495	0					
ANR	1299661	Identifier	zend_llist_remove_tail		1299495	0					
ANR	1299662	ArgumentList	& ctx -> keys		1299495	1					
ANR	1299663	Argument	& ctx -> keys		1299495	0					
ANR	1299664	UnaryOperationExpression	& ctx -> keys		1299495	0					
ANR	1299665	UnaryOperator	&		1299495	0					
ANR	1299666	PtrMemberAccess	ctx -> keys		1299495	1					
ANR	1299667	Identifier	ctx		1299495	0					
ANR	1299668	Identifier	keys		1299495	1					
ANR	1299669	ReturnType	static void		1299495	1					
ANR	1299670	Identifier	to_zval_read_control_array		1299495	2					
ANR	1299671	ParameterList	"const char * msghdr_c , zval * zv , res_context * ctx"		1299495	3					
ANR	1299672	Parameter	const char * msghdr_c	1020:39:28775:28794	1299495	0	True				
ANR	1299673	ParameterType	const char *		1299495	0					
ANR	1299674	Identifier	msghdr_c		1299495	1					
ANR	1299675	Parameter	zval * zv	1020:61:28797:28804	1299495	1	True				
ANR	1299676	ParameterType	zval *		1299495	0					
ANR	1299677	Identifier	zv		1299495	1					
ANR	1299678	Parameter	res_context * ctx	1020:71:28807:28822	1299495	2	True				
ANR	1299679	ParameterType	res_context *		1299495	0					
ANR	1299680	Identifier	ctx		1299495	1					
ANR	1299681	CFGEntryNode	ENTRY		1299495		True				
ANR	1299682	CFGExitNode	EXIT		1299495		True				
ANR	1299683	Symbol	msg		1299495						
ANR	1299684	Symbol	elem		1299495						
ANR	1299685	Symbol	msghdr_c		1299495						
ANR	1299686	Symbol	NULL		1299495						
ANR	1299687	Symbol	& ctx -> keys		1299495						
ANR	1299688	Symbol	CMSG_FIRSTHDR		1299495						
ANR	1299689	Symbol	ctx		1299495						
ANR	1299690	Symbol	ctx -> err . has_error		1299495						
ANR	1299691	Symbol	i		1299495						
ANR	1299692	Symbol	* ctx		1299495						
ANR	1299693	Symbol	ctx -> err		1299495						
ANR	1299694	Symbol	cmsg		1299495						
ANR	1299695	Symbol	buf		1299495						
ANR	1299696	Symbol	bufp		1299495						
ANR	1299697	Symbol	CMSG_NXTHDR		1299495						
ANR	1299698	Symbol	zv		1299495						
ANR	1299699	Symbol	& bufp		1299495						
ANR	1299700	Symbol	snprintf		1299495						
ANR	1299701	Function	from_zval_write_name	1057:0:29684:30024							
ANR	1299702	FunctionDef	"from_zval_write_name (const zval * zname_arr , char * msghdr_c , ser_context * ctx)"		1299701	0					
ANR	1299703	CompoundStatement		1058:0:29774:30024	1299701	0					
ANR	1299704	IdentifierDeclStatement	struct sockaddr * sockaddr ;	1059:1:29777:29802	1299701	0	True				
ANR	1299705	IdentifierDecl	* sockaddr		1299701	0					
ANR	1299706	IdentifierDeclType	struct sockaddr *		1299701	0					
ANR	1299707	Identifier	sockaddr		1299701	1					
ANR	1299708	IdentifierDeclStatement	socklen_t sockaddr_len ;	1060:1:29805:29828	1299701	1	True				
ANR	1299709	IdentifierDecl	sockaddr_len		1299701	0					
ANR	1299710	IdentifierDeclType	socklen_t		1299701	0					
ANR	1299711	Identifier	sockaddr_len		1299701	1					
ANR	1299712	IdentifierDeclStatement	struct msghdr * msghdr = ( struct msghdr * ) msghdr_c ;	1061:1:29831:29880	1299701	2	True				
ANR	1299713	IdentifierDecl	* msghdr = ( struct msghdr * ) msghdr_c		1299701	0					
ANR	1299714	IdentifierDeclType	struct msghdr *		1299701	0					
ANR	1299715	Identifier	msghdr		1299701	1					
ANR	1299716	AssignmentExpression	* msghdr = ( struct msghdr * ) msghdr_c		1299701	2		=			
ANR	1299717	Identifier	msghdr		1299701	0					
ANR	1299718	CastExpression	( struct msghdr * ) msghdr_c		1299701	1					
ANR	1299719	CastTarget	struct msghdr *		1299701	0					
ANR	1299720	Identifier	msghdr_c		1299701	1					
ANR	1299721	ExpressionStatement	"from_zval_write_sockaddr_aux ( zname_arr , & sockaddr , & sockaddr_len , ctx )"	1063:1:29884:29954	1299701	3	True				
ANR	1299722	CallExpression	"from_zval_write_sockaddr_aux ( zname_arr , & sockaddr , & sockaddr_len , ctx )"		1299701	0					
ANR	1299723	Callee	from_zval_write_sockaddr_aux		1299701	0					
ANR	1299724	Identifier	from_zval_write_sockaddr_aux		1299701	0					
ANR	1299725	ArgumentList	zname_arr		1299701	1					
ANR	1299726	Argument	zname_arr		1299701	0					
ANR	1299727	Identifier	zname_arr		1299701	0					
ANR	1299728	Argument	& sockaddr		1299701	1					
ANR	1299729	UnaryOperationExpression	& sockaddr		1299701	0					
ANR	1299730	UnaryOperator	&		1299701	0					
ANR	1299731	Identifier	sockaddr		1299701	1					
ANR	1299732	Argument	& sockaddr_len		1299701	2					
ANR	1299733	UnaryOperationExpression	& sockaddr_len		1299701	0					
ANR	1299734	UnaryOperator	&		1299701	0					
ANR	1299735	Identifier	sockaddr_len		1299701	1					
ANR	1299736	Argument	ctx		1299701	3					
ANR	1299737	Identifier	ctx		1299701	0					
ANR	1299738	ExpressionStatement	msghdr -> msg_name = sockaddr	1065:1:29958:29985	1299701	4	True				
ANR	1299739	AssignmentExpression	msghdr -> msg_name = sockaddr		1299701	0		=			
ANR	1299740	PtrMemberAccess	msghdr -> msg_name		1299701	0					
ANR	1299741	Identifier	msghdr		1299701	0					
ANR	1299742	Identifier	msg_name		1299701	1					
ANR	1299743	Identifier	sockaddr		1299701	1					
ANR	1299744	ExpressionStatement	msghdr -> msg_namelen = sockaddr_len	1066:1:29988:30022	1299701	5	True				
ANR	1299745	AssignmentExpression	msghdr -> msg_namelen = sockaddr_len		1299701	0		=			
ANR	1299746	PtrMemberAccess	msghdr -> msg_namelen		1299701	0					
ANR	1299747	Identifier	msghdr		1299701	0					
ANR	1299748	Identifier	msg_namelen		1299701	1					
ANR	1299749	Identifier	sockaddr_len		1299701	1					
ANR	1299750	ReturnType	static void		1299701	1					
ANR	1299751	Identifier	from_zval_write_name		1299701	2					
ANR	1299752	ParameterList	"const zval * zname_arr , char * msghdr_c , ser_context * ctx"		1299701	3					
ANR	1299753	Parameter	const zval * zname_arr	1057:33:29717:29737	1299701	0	True				
ANR	1299754	ParameterType	const zval *		1299701	0					
ANR	1299755	Identifier	zname_arr		1299701	1					
ANR	1299756	Parameter	char * msghdr_c	1057:56:29740:29753	1299701	1	True				
ANR	1299757	ParameterType	char *		1299701	0					
ANR	1299758	Identifier	msghdr_c		1299701	1					
ANR	1299759	Parameter	ser_context * ctx	1057:72:29756:29771	1299701	2	True				
ANR	1299760	ParameterType	ser_context *		1299701	0					
ANR	1299761	Identifier	ctx		1299701	1					
ANR	1299762	CFGEntryNode	ENTRY		1299701		True				
ANR	1299763	CFGExitNode	EXIT		1299701		True				
ANR	1299764	Symbol	msghdr		1299701						
ANR	1299765	Symbol	zname_arr		1299701						
ANR	1299766	Symbol	msghdr_c		1299701						
ANR	1299767	Symbol	msghdr -> msg_name		1299701						
ANR	1299768	Symbol	ctx		1299701						
ANR	1299769	Symbol	* msghdr		1299701						
ANR	1299770	Symbol	& sockaddr_len		1299701						
ANR	1299771	Symbol	sockaddr		1299701						
ANR	1299772	Symbol	sockaddr_len		1299701						
ANR	1299773	Symbol	& sockaddr		1299701						
ANR	1299774	Symbol	msghdr -> msg_namelen		1299701						
ANR	1299775	Function	to_zval_read_name	1068:0:30026:30247							
ANR	1299776	FunctionDef	"to_zval_read_name (const char * sockaddr_p , zval * zv , res_context * ctx)"		1299775	0					
ANR	1299777	CompoundStatement		1069:0:30108:30247	1299775	0					
ANR	1299778	IdentifierDeclStatement	void * name = ( void * ) * ( void * * ) sockaddr_p ;	1070:1:30111:30150	1299775	0	True				
ANR	1299779	IdentifierDecl	* name = ( void * ) * ( void * * ) sockaddr_p		1299775	0					
ANR	1299780	IdentifierDeclType	void *		1299775	0					
ANR	1299781	Identifier	name		1299775	1					
ANR	1299782	AssignmentExpression	* name = ( void * ) * ( void * * ) sockaddr_p		1299775	2		=			
ANR	1299783	Identifier	name		1299775	0					
ANR	1299784	CastExpression	( void * ) * ( void * * ) sockaddr_p		1299775	1					
ANR	1299785	CastTarget	void *		1299775	0					
ANR	1299786	UnaryOperationExpression	* ( void * * ) sockaddr_p		1299775	1					
ANR	1299787	UnaryOperator	*		1299775	0					
ANR	1299788	CastExpression	( void * * ) sockaddr_p		1299775	1					
ANR	1299789	CastTarget	void * *		1299775	0					
ANR	1299790	Identifier	sockaddr_p		1299775	1					
ANR	1299791	IfStatement	if ( name == NULL )		1299775	1					
ANR	1299792	Condition	name == NULL	1071:5:30157:30168	1299775	0	True				
ANR	1299793	EqualityExpression	name == NULL		1299775	0		==			
ANR	1299794	Identifier	name		1299775	0					
ANR	1299795	Identifier	NULL		1299775	1					
ANR	1299796	CompoundStatement		3:19:62:62	1299775	1					
ANR	1299797	ExpressionStatement	ZVAL_NULL ( zv )	1072:2:30175:30188	1299775	0	True				
ANR	1299798	CallExpression	ZVAL_NULL ( zv )		1299775	0					
ANR	1299799	Callee	ZVAL_NULL		1299775	0					
ANR	1299800	Identifier	ZVAL_NULL		1299775	0					
ANR	1299801	ArgumentList	zv		1299775	1					
ANR	1299802	Argument	zv		1299775	0					
ANR	1299803	Identifier	zv		1299775	0					
ANR	1299804	ElseStatement	else		1299775	0					
ANR	1299805	CompoundStatement		5:8:89:89	1299775	0					
ANR	1299806	ExpressionStatement	"to_zval_read_sockaddr_aux ( name , zv , ctx )"	1074:2:30202:30242	1299775	0	True				
ANR	1299807	CallExpression	"to_zval_read_sockaddr_aux ( name , zv , ctx )"		1299775	0					
ANR	1299808	Callee	to_zval_read_sockaddr_aux		1299775	0					
ANR	1299809	Identifier	to_zval_read_sockaddr_aux		1299775	0					
ANR	1299810	ArgumentList	name		1299775	1					
ANR	1299811	Argument	name		1299775	0					
ANR	1299812	Identifier	name		1299775	0					
ANR	1299813	Argument	zv		1299775	1					
ANR	1299814	Identifier	zv		1299775	0					
ANR	1299815	Argument	ctx		1299775	2					
ANR	1299816	Identifier	ctx		1299775	0					
ANR	1299817	ReturnType	static void		1299775	1					
ANR	1299818	Identifier	to_zval_read_name		1299775	2					
ANR	1299819	ParameterList	"const char * sockaddr_p , zval * zv , res_context * ctx"		1299775	3					
ANR	1299820	Parameter	const char * sockaddr_p	1068:30:30056:30077	1299775	0	True				
ANR	1299821	ParameterType	const char *		1299775	0					
ANR	1299822	Identifier	sockaddr_p		1299775	1					
ANR	1299823	Parameter	zval * zv	1068:54:30080:30087	1299775	1	True				
ANR	1299824	ParameterType	zval *		1299775	0					
ANR	1299825	Identifier	zv		1299775	1					
ANR	1299826	Parameter	res_context * ctx	1068:64:30090:30105	1299775	2	True				
ANR	1299827	ParameterType	res_context *		1299775	0					
ANR	1299828	Identifier	ctx		1299775	1					
ANR	1299829	CFGEntryNode	ENTRY		1299775		True				
ANR	1299830	CFGExitNode	EXIT		1299775		True				
ANR	1299831	Symbol	* ( void * * ) sockaddr_p		1299775						
ANR	1299832	Symbol	NULL		1299775						
ANR	1299833	Symbol	ctx		1299775						
ANR	1299834	Symbol	* sockaddr_p		1299775						
ANR	1299835	Symbol	name		1299775						
ANR	1299836	Symbol	sockaddr_p		1299775						
ANR	1299837	Symbol	zv		1299775						
ANR	1299838	Function	from_zval_write_msghdr_buffer_size	1077:0:30249:30892							
ANR	1299839	FunctionDef	"from_zval_write_msghdr_buffer_size (const zval * elem , char * msghdr_c , ser_context * ctx)"		1299838	0					
ANR	1299840	CompoundStatement		1078:0:30348:30892	1299838	0					
ANR	1299841	IdentifierDeclStatement	long lval ;	1079:1:30351:30360	1299838	0	True				
ANR	1299842	IdentifierDecl	lval		1299838	0					
ANR	1299843	IdentifierDeclType	long		1299838	0					
ANR	1299844	Identifier	lval		1299838	1					
ANR	1299845	IdentifierDeclStatement	struct msghdr * msghdr = ( struct msghdr * ) msghdr_c ;	1080:1:30363:30412	1299838	1	True				
ANR	1299846	IdentifierDecl	* msghdr = ( struct msghdr * ) msghdr_c		1299838	0					
ANR	1299847	IdentifierDeclType	struct msghdr *		1299838	0					
ANR	1299848	Identifier	msghdr		1299838	1					
ANR	1299849	AssignmentExpression	* msghdr = ( struct msghdr * ) msghdr_c		1299838	2		=			
ANR	1299850	Identifier	msghdr		1299838	0					
ANR	1299851	CastExpression	( struct msghdr * ) msghdr_c		1299838	1					
ANR	1299852	CastTarget	struct msghdr *		1299838	0					
ANR	1299853	Identifier	msghdr_c		1299838	1					
ANR	1299854	ExpressionStatement	"lval = from_zval_integer_common ( elem , ctx )"	1082:1:30416:30458	1299838	2	True				
ANR	1299855	AssignmentExpression	"lval = from_zval_integer_common ( elem , ctx )"		1299838	0		=			
ANR	1299856	Identifier	lval		1299838	0					
ANR	1299857	CallExpression	"from_zval_integer_common ( elem , ctx )"		1299838	1					
ANR	1299858	Callee	from_zval_integer_common		1299838	0					
ANR	1299859	Identifier	from_zval_integer_common		1299838	0					
ANR	1299860	ArgumentList	elem		1299838	1					
ANR	1299861	Argument	elem		1299838	0					
ANR	1299862	Identifier	elem		1299838	0					
ANR	1299863	Argument	ctx		1299838	1					
ANR	1299864	Identifier	ctx		1299838	0					
ANR	1299865	IfStatement	if ( ctx -> err . has_error )		1299838	3					
ANR	1299866	Condition	ctx -> err . has_error	1083:5:30465:30482	1299838	0	True				
ANR	1299867	MemberAccess	ctx -> err . has_error		1299838	0					
ANR	1299868	PtrMemberAccess	ctx -> err		1299838	0					
ANR	1299869	Identifier	ctx		1299838	0					
ANR	1299870	Identifier	err		1299838	1					
ANR	1299871	Identifier	has_error		1299838	1					
ANR	1299872	CompoundStatement		6:25:136:136	1299838	1					
ANR	1299873	ReturnStatement	return ;	1084:2:30489:30495	1299838	0	True				
ANR	1299874	IfStatement	if ( lval < 0 || lval > MAX_USER_BUFF_SIZE )		1299838	4					
ANR	1299875	Condition	lval < 0 || lval > MAX_USER_BUFF_SIZE	1087:5:30506:30542	1299838	0	True				
ANR	1299876	OrExpression	lval < 0 || lval > MAX_USER_BUFF_SIZE		1299838	0		||			
ANR	1299877	RelationalExpression	lval < 0		1299838	0		<			
ANR	1299878	Identifier	lval		1299838	0					
ANR	1299879	PrimaryExpression	0		1299838	1					
ANR	1299880	RelationalExpression	lval > MAX_USER_BUFF_SIZE		1299838	1		>			
ANR	1299881	Identifier	lval		1299838	0					
ANR	1299882	Identifier	MAX_USER_BUFF_SIZE		1299838	1					
ANR	1299883	CompoundStatement		10:44:196:196	1299838	1					
ANR	1299884	Statement	do_from_zval_err	1088:2:30549:30564	1299838	0	True				
ANR	1299885	Statement	(	1088:18:30565:30565	1299838	1	True				
ANR	1299886	Statement	ctx	1088:19:30566:30568	1299838	2	True				
ANR	1299887	Statement	","	1088:22:30569:30569	1299838	3	True				
ANR	1299888	Statement	"""the buffer size must be between 1 and %ld; """	1088:24:30571:30615	1299838	4	True				
ANR	1299889	Statement	"""given %ld"""	1089:4:30621:30631	1299838	5	True				
ANR	1299890	Statement	","	1089:15:30632:30632	1299838	6	True				
ANR	1299891	Statement	(	1089:17:30634:30634	1299838	7	True				
ANR	1299892	Statement	long	1089:18:30635:30638	1299838	8	True				
ANR	1299893	Statement	)	1089:22:30639:30639	1299838	9	True				
ANR	1299894	Statement	MAX_USER_BUFF_SIZE	1089:23:30640:30657	1299838	10	True				
ANR	1299895	Statement	","	1089:41:30658:30658	1299838	11	True				
ANR	1299896	Statement	lval	1089:43:30660:30663	1299838	12	True				
ANR	1299897	Statement	)	1089:47:30664:30664	1299838	13	True				
ANR	1299898	ExpressionStatement		1089:48:30665:30665	1299838	14	True				
ANR	1299899	ReturnStatement	return ;	1090:2:30669:30675	1299838	15	True				
ANR	1299900	ExpressionStatement	msghdr -> msg_iovlen = 1	1093:1:30682:30704	1299838	5	True				
ANR	1299901	AssignmentExpression	msghdr -> msg_iovlen = 1		1299838	0		=			
ANR	1299902	PtrMemberAccess	msghdr -> msg_iovlen		1299838	0					
ANR	1299903	Identifier	msghdr		1299838	0					
ANR	1299904	Identifier	msg_iovlen		1299838	1					
ANR	1299905	PrimaryExpression	1		1299838	1					
ANR	1299906	ExpressionStatement	"msghdr -> msg_iov = accounted_emalloc ( sizeof ( * msghdr -> msg_iov ) * 1 , ctx )"	1094:1:30707:30777	1299838	6	True				
ANR	1299907	AssignmentExpression	"msghdr -> msg_iov = accounted_emalloc ( sizeof ( * msghdr -> msg_iov ) * 1 , ctx )"		1299838	0		=			
ANR	1299908	PtrMemberAccess	msghdr -> msg_iov		1299838	0					
ANR	1299909	Identifier	msghdr		1299838	0					
ANR	1299910	Identifier	msg_iov		1299838	1					
ANR	1299911	CallExpression	"accounted_emalloc ( sizeof ( * msghdr -> msg_iov ) * 1 , ctx )"		1299838	1					
ANR	1299912	Callee	accounted_emalloc		1299838	0					
ANR	1299913	Identifier	accounted_emalloc		1299838	0					
ANR	1299914	ArgumentList	sizeof ( * msghdr -> msg_iov ) * 1		1299838	1					
ANR	1299915	Argument	sizeof ( * msghdr -> msg_iov ) * 1		1299838	0					
ANR	1299916	MultiplicativeExpression	sizeof ( * msghdr -> msg_iov ) * 1		1299838	0		*			
ANR	1299917	SizeofExpression	sizeof ( * msghdr -> msg_iov )		1299838	0					
ANR	1299918	Sizeof	sizeof		1299838	0					
ANR	1299919	UnaryOperationExpression	* msghdr -> msg_iov		1299838	1					
ANR	1299920	UnaryOperator	*		1299838	0					
ANR	1299921	PtrMemberAccess	msghdr -> msg_iov		1299838	1					
ANR	1299922	Identifier	msghdr		1299838	0					
ANR	1299923	Identifier	msg_iov		1299838	1					
ANR	1299924	PrimaryExpression	1		1299838	1					
ANR	1299925	Argument	ctx		1299838	1					
ANR	1299926	Identifier	ctx		1299838	0					
ANR	1299927	ExpressionStatement	"msghdr -> msg_iov [ 0 ] . iov_base = accounted_emalloc ( ( size_t ) lval , ctx )"	1095:1:30780:30846	1299838	7	True				
ANR	1299928	AssignmentExpression	"msghdr -> msg_iov [ 0 ] . iov_base = accounted_emalloc ( ( size_t ) lval , ctx )"		1299838	0		=			
ANR	1299929	MemberAccess	msghdr -> msg_iov [ 0 ] . iov_base		1299838	0					
ANR	1299930	ArrayIndexing	msghdr -> msg_iov [ 0 ]		1299838	0					
ANR	1299931	PtrMemberAccess	msghdr -> msg_iov		1299838	0					
ANR	1299932	Identifier	msghdr		1299838	0					
ANR	1299933	Identifier	msg_iov		1299838	1					
ANR	1299934	PrimaryExpression	0		1299838	1					
ANR	1299935	Identifier	iov_base		1299838	1					
ANR	1299936	CallExpression	"accounted_emalloc ( ( size_t ) lval , ctx )"		1299838	1					
ANR	1299937	Callee	accounted_emalloc		1299838	0					
ANR	1299938	Identifier	accounted_emalloc		1299838	0					
ANR	1299939	ArgumentList	( size_t ) lval		1299838	1					
ANR	1299940	Argument	( size_t ) lval		1299838	0					
ANR	1299941	CastExpression	( size_t ) lval		1299838	0					
ANR	1299942	CastTarget	size_t		1299838	0					
ANR	1299943	Identifier	lval		1299838	1					
ANR	1299944	Argument	ctx		1299838	1					
ANR	1299945	Identifier	ctx		1299838	0					
ANR	1299946	ExpressionStatement	msghdr -> msg_iov [ 0 ] . iov_len = ( size_t ) lval	1096:1:30849:30890	1299838	8	True				
ANR	1299947	AssignmentExpression	msghdr -> msg_iov [ 0 ] . iov_len = ( size_t ) lval		1299838	0		=			
ANR	1299948	MemberAccess	msghdr -> msg_iov [ 0 ] . iov_len		1299838	0					
ANR	1299949	ArrayIndexing	msghdr -> msg_iov [ 0 ]		1299838	0					
ANR	1299950	PtrMemberAccess	msghdr -> msg_iov		1299838	0					
ANR	1299951	Identifier	msghdr		1299838	0					
ANR	1299952	Identifier	msg_iov		1299838	1					
ANR	1299953	PrimaryExpression	0		1299838	1					
ANR	1299954	Identifier	iov_len		1299838	1					
ANR	1299955	CastExpression	( size_t ) lval		1299838	1					
ANR	1299956	CastTarget	size_t		1299838	0					
ANR	1299957	Identifier	lval		1299838	1					
ANR	1299958	ReturnType	static void		1299838	1					
ANR	1299959	Identifier	from_zval_write_msghdr_buffer_size		1299838	2					
ANR	1299960	ParameterList	"const zval * elem , char * msghdr_c , ser_context * ctx"		1299838	3					
ANR	1299961	Parameter	const zval * elem	1077:47:30296:30311	1299838	0	True				
ANR	1299962	ParameterType	const zval *		1299838	0					
ANR	1299963	Identifier	elem		1299838	1					
ANR	1299964	Parameter	char * msghdr_c	1077:65:30314:30327	1299838	1	True				
ANR	1299965	ParameterType	char *		1299838	0					
ANR	1299966	Identifier	msghdr_c		1299838	1					
ANR	1299967	Parameter	ser_context * ctx	1077:81:30330:30345	1299838	2	True				
ANR	1299968	ParameterType	ser_context *		1299838	0					
ANR	1299969	Identifier	ctx		1299838	1					
ANR	1299970	CFGEntryNode	ENTRY		1299838		True				
ANR	1299971	CFGExitNode	EXIT		1299838		True				
ANR	1299972	Symbol	elem		1299838						
ANR	1299973	Symbol	msghdr_c		1299838						
ANR	1299974	Symbol	ctx		1299838						
ANR	1299975	Symbol	lval		1299838						
ANR	1299976	Symbol	msghdr -> msg_iovlen		1299838						
ANR	1299977	Symbol	ctx -> err . has_error		1299838						
ANR	1299978	Symbol	from_zval_integer_common		1299838						
ANR	1299979	Symbol	msghdr -> msg_iov [ 0 ] . iov_len		1299838						
ANR	1299980	Symbol	* ctx		1299838						
ANR	1299981	Symbol	ctx -> err		1299838						
ANR	1299982	Symbol	msghdr		1299838						
ANR	1299983	Symbol	msghdr -> msg_iov [ 0 ] . iov_base		1299838						
ANR	1299984	Symbol	* msghdr -> msg_iov		1299838						
ANR	1299985	Symbol	MAX_USER_BUFF_SIZE		1299838						
ANR	1299986	Symbol	msghdr -> msg_iov		1299838						
ANR	1299987	Symbol	* msghdr		1299838						
ANR	1299988	Symbol	* * msghdr		1299838						
ANR	1299989	Symbol	accounted_emalloc		1299838						
ANR	1299990	Function	from_zval_write_iov_array_aux	1098:0:30894:31301							
ANR	1299991	FunctionDef	"from_zval_write_iov_array_aux (zval * * elem , unsigned i , void * * args , ser_context * ctx)"		1299990	0					
ANR	1299992	CompoundStatement		1099:0:30992:31301	1299990	0					
ANR	1299993	IdentifierDeclStatement	struct msghdr * msg = args [ 0 ] ;	1100:1:30995:31023	1299990	0	True				
ANR	1299994	IdentifierDecl	* msg = args [ 0 ]		1299990	0					
ANR	1299995	IdentifierDeclType	struct msghdr *		1299990	0					
ANR	1299996	Identifier	msg		1299990	1					
ANR	1299997	AssignmentExpression	* msg = args [ 0 ]		1299990	2		=			
ANR	1299998	Identifier	msg		1299990	0					
ANR	1299999	ArrayIndexing	args [ 0 ]		1299990	1					
ANR	1300000	Identifier	args		1299990	0					
ANR	1300001	PrimaryExpression	0		1299990	1					
ANR	1300002	IdentifierDeclStatement	size_t len ;	1101:1:31026:31038	1299990	1	True				
ANR	1300003	IdentifierDecl	len		1299990	0					
ANR	1300004	IdentifierDeclType	size_t		1299990	0					
ANR	1300005	Identifier	len		1299990	1					
ANR	1300006	ExpressionStatement	zval_add_ref ( elem )	1103:1:31042:31060	1299990	2	True				
ANR	1300007	CallExpression	zval_add_ref ( elem )		1299990	0					
ANR	1300008	Callee	zval_add_ref		1299990	0					
ANR	1300009	Identifier	zval_add_ref		1299990	0					
ANR	1300010	ArgumentList	elem		1299990	1					
ANR	1300011	Argument	elem		1299990	0					
ANR	1300012	Identifier	elem		1299990	0					
ANR	1300013	ExpressionStatement	convert_to_string_ex ( elem )	1104:1:31063:31089	1299990	3	True				
ANR	1300014	CallExpression	convert_to_string_ex ( elem )		1299990	0					
ANR	1300015	Callee	convert_to_string_ex		1299990	0					
ANR	1300016	Identifier	convert_to_string_ex		1299990	0					
ANR	1300017	ArgumentList	elem		1299990	1					
ANR	1300018	Argument	elem		1299990	0					
ANR	1300019	Identifier	elem		1299990	0					
ANR	1300020	ExpressionStatement	len = Z_STRLEN_PP ( elem )	1106:1:31093:31116	1299990	4	True				
ANR	1300021	AssignmentExpression	len = Z_STRLEN_PP ( elem )		1299990	0		=			
ANR	1300022	Identifier	len		1299990	0					
ANR	1300023	CallExpression	Z_STRLEN_PP ( elem )		1299990	1					
ANR	1300024	Callee	Z_STRLEN_PP		1299990	0					
ANR	1300025	Identifier	Z_STRLEN_PP		1299990	0					
ANR	1300026	ArgumentList	elem		1299990	1					
ANR	1300027	Argument	elem		1299990	0					
ANR	1300028	Identifier	elem		1299990	0					
ANR	1300029	ExpressionStatement	"msg -> msg_iov [ i - 1 ] . iov_base = accounted_emalloc ( len , ctx )"	1107:1:31119:31177	1299990	5	True				
ANR	1300030	AssignmentExpression	"msg -> msg_iov [ i - 1 ] . iov_base = accounted_emalloc ( len , ctx )"		1299990	0		=			
ANR	1300031	MemberAccess	msg -> msg_iov [ i - 1 ] . iov_base		1299990	0					
ANR	1300032	ArrayIndexing	msg -> msg_iov [ i - 1 ]		1299990	0					
ANR	1300033	PtrMemberAccess	msg -> msg_iov		1299990	0					
ANR	1300034	Identifier	msg		1299990	0					
ANR	1300035	Identifier	msg_iov		1299990	1					
ANR	1300036	AdditiveExpression	i - 1		1299990	1		-			
ANR	1300037	Identifier	i		1299990	0					
ANR	1300038	PrimaryExpression	1		1299990	1					
ANR	1300039	Identifier	iov_base		1299990	1					
ANR	1300040	CallExpression	"accounted_emalloc ( len , ctx )"		1299990	1					
ANR	1300041	Callee	accounted_emalloc		1299990	0					
ANR	1300042	Identifier	accounted_emalloc		1299990	0					
ANR	1300043	ArgumentList	len		1299990	1					
ANR	1300044	Argument	len		1299990	0					
ANR	1300045	Identifier	len		1299990	0					
ANR	1300046	Argument	ctx		1299990	1					
ANR	1300047	Identifier	ctx		1299990	0					
ANR	1300048	ExpressionStatement	msg -> msg_iov [ i - 1 ] . iov_len = len	1108:1:31180:31213	1299990	6	True				
ANR	1300049	AssignmentExpression	msg -> msg_iov [ i - 1 ] . iov_len = len		1299990	0		=			
ANR	1300050	MemberAccess	msg -> msg_iov [ i - 1 ] . iov_len		1299990	0					
ANR	1300051	ArrayIndexing	msg -> msg_iov [ i - 1 ]		1299990	0					
ANR	1300052	PtrMemberAccess	msg -> msg_iov		1299990	0					
ANR	1300053	Identifier	msg		1299990	0					
ANR	1300054	Identifier	msg_iov		1299990	1					
ANR	1300055	AdditiveExpression	i - 1		1299990	1		-			
ANR	1300056	Identifier	i		1299990	0					
ANR	1300057	PrimaryExpression	1		1299990	1					
ANR	1300058	Identifier	iov_len		1299990	1					
ANR	1300059	Identifier	len		1299990	1					
ANR	1300060	ExpressionStatement	"memcpy ( msg -> msg_iov [ i - 1 ] . iov_base , Z_STRVAL_PP ( elem ) , len )"	1109:1:31216:31276	1299990	7	True				
ANR	1300061	CallExpression	"memcpy ( msg -> msg_iov [ i - 1 ] . iov_base , Z_STRVAL_PP ( elem ) , len )"		1299990	0					
ANR	1300062	Callee	memcpy		1299990	0					
ANR	1300063	Identifier	memcpy		1299990	0					
ANR	1300064	ArgumentList	msg -> msg_iov [ i - 1 ] . iov_base		1299990	1					
ANR	1300065	Argument	msg -> msg_iov [ i - 1 ] . iov_base		1299990	0					
ANR	1300066	MemberAccess	msg -> msg_iov [ i - 1 ] . iov_base		1299990	0					
ANR	1300067	ArrayIndexing	msg -> msg_iov [ i - 1 ]		1299990	0					
ANR	1300068	PtrMemberAccess	msg -> msg_iov		1299990	0					
ANR	1300069	Identifier	msg		1299990	0					
ANR	1300070	Identifier	msg_iov		1299990	1					
ANR	1300071	AdditiveExpression	i - 1		1299990	1		-			
ANR	1300072	Identifier	i		1299990	0					
ANR	1300073	PrimaryExpression	1		1299990	1					
ANR	1300074	Identifier	iov_base		1299990	1					
ANR	1300075	Argument	Z_STRVAL_PP ( elem )		1299990	1					
ANR	1300076	CallExpression	Z_STRVAL_PP ( elem )		1299990	0					
ANR	1300077	Callee	Z_STRVAL_PP		1299990	0					
ANR	1300078	Identifier	Z_STRVAL_PP		1299990	0					
ANR	1300079	ArgumentList	elem		1299990	1					
ANR	1300080	Argument	elem		1299990	0					
ANR	1300081	Identifier	elem		1299990	0					
ANR	1300082	Argument	len		1299990	2					
ANR	1300083	Identifier	len		1299990	0					
ANR	1300084	ExpressionStatement	zval_ptr_dtor ( elem )	1111:1:31280:31299	1299990	8	True				
ANR	1300085	CallExpression	zval_ptr_dtor ( elem )		1299990	0					
ANR	1300086	Callee	zval_ptr_dtor		1299990	0					
ANR	1300087	Identifier	zval_ptr_dtor		1299990	0					
ANR	1300088	ArgumentList	elem		1299990	1					
ANR	1300089	Argument	elem		1299990	0					
ANR	1300090	Identifier	elem		1299990	0					
ANR	1300091	ReturnType	static void		1299990	1					
ANR	1300092	Identifier	from_zval_write_iov_array_aux		1299990	2					
ANR	1300093	ParameterList	"zval * * elem , unsigned i , void * * args , ser_context * ctx"		1299990	3					
ANR	1300094	Parameter	zval * * elem	1098:42:30936:30946	1299990	0	True				
ANR	1300095	ParameterType	zval * *		1299990	0					
ANR	1300096	Identifier	elem		1299990	1					
ANR	1300097	Parameter	unsigned i	1098:55:30949:30958	1299990	1	True				
ANR	1300098	ParameterType	unsigned		1299990	0					
ANR	1300099	Identifier	i		1299990	1					
ANR	1300100	Parameter	void * * args	1098:67:30961:30971	1299990	2	True				
ANR	1300101	ParameterType	void * *		1299990	0					
ANR	1300102	Identifier	args		1299990	1					
ANR	1300103	Parameter	ser_context * ctx	1098:80:30974:30989	1299990	3	True				
ANR	1300104	ParameterType	ser_context *		1299990	0					
ANR	1300105	Identifier	ctx		1299990	1					
ANR	1300106	CFGEntryNode	ENTRY		1299990		True				
ANR	1300107	CFGExitNode	EXIT		1299990		True				
ANR	1300108	Symbol	elem		1299990						
ANR	1300109	Symbol	msg		1299990						
ANR	1300110	Symbol	ctx		1299990						
ANR	1300111	Symbol	i		1299990						
ANR	1300112	Symbol	msg -> msg_iov [ i - 1 ] . iov_len		1299990						
ANR	1300113	Symbol	* msg		1299990						
ANR	1300114	Symbol	* msg -> msg_iov		1299990						
ANR	1300115	Symbol	Z_STRLEN_PP		1299990						
ANR	1300116	Symbol	* args		1299990						
ANR	1300117	Symbol	args		1299990						
ANR	1300118	Symbol	* i		1299990						
ANR	1300119	Symbol	len		1299990						
ANR	1300120	Symbol	* * msg		1299990						
ANR	1300121	Symbol	Z_STRVAL_PP		1299990						
ANR	1300122	Symbol	msg -> msg_iov		1299990						
ANR	1300123	Symbol	msg -> msg_iov [ i - 1 ] . iov_base		1299990						
ANR	1300124	Symbol	accounted_emalloc		1299990						
ANR	1300125	Function	from_zval_write_iov_array	1113:0:31303:31852							
ANR	1300126	FunctionDef	"from_zval_write_iov_array (const zval * arr , char * msghdr_c , ser_context * ctx)"		1300125	0					
ANR	1300127	CompoundStatement		1114:0:31392:31852	1300125	0					
ANR	1300128	IdentifierDeclStatement	int num_elem ;	1115:1:31395:31410	1300125	0	True				
ANR	1300129	IdentifierDecl	num_elem		1300125	0					
ANR	1300130	IdentifierDeclType	int		1300125	0					
ANR	1300131	Identifier	num_elem		1300125	1					
ANR	1300132	IdentifierDeclStatement	struct msghdr * msg = ( struct msghdr * ) msghdr_c ;	1116:1:31413:31458	1300125	1	True				
ANR	1300133	IdentifierDecl	* msg = ( struct msghdr * ) msghdr_c		1300125	0					
ANR	1300134	IdentifierDeclType	struct msghdr *		1300125	0					
ANR	1300135	Identifier	msg		1300125	1					
ANR	1300136	AssignmentExpression	* msg = ( struct msghdr * ) msghdr_c		1300125	2		=			
ANR	1300137	Identifier	msg		1300125	0					
ANR	1300138	CastExpression	( struct msghdr * ) msghdr_c		1300125	1					
ANR	1300139	CastTarget	struct msghdr *		1300125	0					
ANR	1300140	Identifier	msghdr_c		1300125	1					
ANR	1300141	IfStatement	if ( Z_TYPE_P ( arr ) != IS_ARRAY )		1300125	2					
ANR	1300142	Condition	Z_TYPE_P ( arr ) != IS_ARRAY	1118:5:31466:31490	1300125	0	True				
ANR	1300143	EqualityExpression	Z_TYPE_P ( arr ) != IS_ARRAY		1300125	0		!=			
ANR	1300144	CallExpression	Z_TYPE_P ( arr )		1300125	0					
ANR	1300145	Callee	Z_TYPE_P		1300125	0					
ANR	1300146	Identifier	Z_TYPE_P		1300125	0					
ANR	1300147	ArgumentList	arr		1300125	1					
ANR	1300148	Argument	arr		1300125	0					
ANR	1300149	Identifier	arr		1300125	0					
ANR	1300150	Identifier	IS_ARRAY		1300125	1					
ANR	1300151	CompoundStatement		5:32:100:100	1300125	1					
ANR	1300152	ExpressionStatement	"do_from_zval_err ( ctx , ""%s"" , ""expected an array here"" )"	1119:2:31497:31550	1300125	0	True				
ANR	1300153	CallExpression	"do_from_zval_err ( ctx , ""%s"" , ""expected an array here"" )"		1300125	0					
ANR	1300154	Callee	do_from_zval_err		1300125	0					
ANR	1300155	Identifier	do_from_zval_err		1300125	0					
ANR	1300156	ArgumentList	ctx		1300125	1					
ANR	1300157	Argument	ctx		1300125	0					
ANR	1300158	Identifier	ctx		1300125	0					
ANR	1300159	Argument	"""%s"""		1300125	1					
ANR	1300160	PrimaryExpression	"""%s"""		1300125	0					
ANR	1300161	Argument	"""expected an array here"""		1300125	2					
ANR	1300162	PrimaryExpression	"""expected an array here"""		1300125	0					
ANR	1300163	ReturnStatement	return ;	1120:2:31554:31560	1300125	1	True				
ANR	1300164	ExpressionStatement	num_elem = zend_hash_num_elements ( Z_ARRVAL_P ( arr ) )	1123:1:31567:31617	1300125	3	True				
ANR	1300165	AssignmentExpression	num_elem = zend_hash_num_elements ( Z_ARRVAL_P ( arr ) )		1300125	0		=			
ANR	1300166	Identifier	num_elem		1300125	0					
ANR	1300167	CallExpression	zend_hash_num_elements ( Z_ARRVAL_P ( arr ) )		1300125	1					
ANR	1300168	Callee	zend_hash_num_elements		1300125	0					
ANR	1300169	Identifier	zend_hash_num_elements		1300125	0					
ANR	1300170	ArgumentList	Z_ARRVAL_P ( arr )		1300125	1					
ANR	1300171	Argument	Z_ARRVAL_P ( arr )		1300125	0					
ANR	1300172	CallExpression	Z_ARRVAL_P ( arr )		1300125	0					
ANR	1300173	Callee	Z_ARRVAL_P		1300125	0					
ANR	1300174	Identifier	Z_ARRVAL_P		1300125	0					
ANR	1300175	ArgumentList	arr		1300125	1					
ANR	1300176	Argument	arr		1300125	0					
ANR	1300177	Identifier	arr		1300125	0					
ANR	1300178	IfStatement	if ( num_elem == 0 )		1300125	4					
ANR	1300179	Condition	num_elem == 0	1124:5:31624:31636	1300125	0	True				
ANR	1300180	EqualityExpression	num_elem == 0		1300125	0		==			
ANR	1300181	Identifier	num_elem		1300125	0					
ANR	1300182	PrimaryExpression	0		1300125	1					
ANR	1300183	CompoundStatement		11:20:246:246	1300125	1					
ANR	1300184	ReturnStatement	return ;	1125:2:31643:31649	1300125	0	True				
ANR	1300185	ExpressionStatement	"msg -> msg_iov = accounted_safe_ecalloc ( num_elem , sizeof * msg -> msg_iov , 0 , ctx )"	1128:1:31656:31733	1300125	5	True				
ANR	1300186	AssignmentExpression	"msg -> msg_iov = accounted_safe_ecalloc ( num_elem , sizeof * msg -> msg_iov , 0 , ctx )"		1300125	0		=			
ANR	1300187	PtrMemberAccess	msg -> msg_iov		1300125	0					
ANR	1300188	Identifier	msg		1300125	0					
ANR	1300189	Identifier	msg_iov		1300125	1					
ANR	1300190	CallExpression	"accounted_safe_ecalloc ( num_elem , sizeof * msg -> msg_iov , 0 , ctx )"		1300125	1					
ANR	1300191	Callee	accounted_safe_ecalloc		1300125	0					
ANR	1300192	Identifier	accounted_safe_ecalloc		1300125	0					
ANR	1300193	ArgumentList	num_elem		1300125	1					
ANR	1300194	Argument	num_elem		1300125	0					
ANR	1300195	Identifier	num_elem		1300125	0					
ANR	1300196	Argument	sizeof * msg -> msg_iov		1300125	1					
ANR	1300197	SizeofExpression	sizeof * msg -> msg_iov		1300125	0					
ANR	1300198	Sizeof	sizeof		1300125	0					
ANR	1300199	UnaryOperationExpression	* msg -> msg_iov		1300125	1					
ANR	1300200	UnaryOperator	*		1300125	0					
ANR	1300201	PtrMemberAccess	msg -> msg_iov		1300125	1					
ANR	1300202	Identifier	msg		1300125	0					
ANR	1300203	Identifier	msg_iov		1300125	1					
ANR	1300204	Argument	0		1300125	2					
ANR	1300205	PrimaryExpression	0		1300125	0					
ANR	1300206	Argument	ctx		1300125	3					
ANR	1300207	Identifier	ctx		1300125	0					
ANR	1300208	ExpressionStatement	msg -> msg_iovlen = ( size_t ) num_elem	1129:1:31736:31770	1300125	6	True				
ANR	1300209	AssignmentExpression	msg -> msg_iovlen = ( size_t ) num_elem		1300125	0		=			
ANR	1300210	PtrMemberAccess	msg -> msg_iovlen		1300125	0					
ANR	1300211	Identifier	msg		1300125	0					
ANR	1300212	Identifier	msg_iovlen		1300125	1					
ANR	1300213	CastExpression	( size_t ) num_elem		1300125	1					
ANR	1300214	CastTarget	size_t		1300125	0					
ANR	1300215	Identifier	num_elem		1300125	1					
ANR	1300216	ExpressionStatement	"from_array_iterate ( arr , from_zval_write_iov_array_aux , ( void * * ) & msg , ctx )"	1131:4:31777:31850	1300125	7	True				
ANR	1300217	CallExpression	"from_array_iterate ( arr , from_zval_write_iov_array_aux , ( void * * ) & msg , ctx )"		1300125	0					
ANR	1300218	Callee	from_array_iterate		1300125	0					
ANR	1300219	Identifier	from_array_iterate		1300125	0					
ANR	1300220	ArgumentList	arr		1300125	1					
ANR	1300221	Argument	arr		1300125	0					
ANR	1300222	Identifier	arr		1300125	0					
ANR	1300223	Argument	from_zval_write_iov_array_aux		1300125	1					
ANR	1300224	Identifier	from_zval_write_iov_array_aux		1300125	0					
ANR	1300225	Argument	( void * * ) & msg		1300125	2					
ANR	1300226	CastExpression	( void * * ) & msg		1300125	0					
ANR	1300227	CastTarget	void * *		1300125	0					
ANR	1300228	UnaryOperationExpression	& msg		1300125	1					
ANR	1300229	UnaryOperator	&		1300125	0					
ANR	1300230	Identifier	msg		1300125	1					
ANR	1300231	Argument	ctx		1300125	3					
ANR	1300232	Identifier	ctx		1300125	0					
ANR	1300233	ReturnType	static void		1300125	1					
ANR	1300234	Identifier	from_zval_write_iov_array		1300125	2					
ANR	1300235	ParameterList	"const zval * arr , char * msghdr_c , ser_context * ctx"		1300125	3					
ANR	1300236	Parameter	const zval * arr	1113:38:31341:31355	1300125	0	True				
ANR	1300237	ParameterType	const zval *		1300125	0					
ANR	1300238	Identifier	arr		1300125	1					
ANR	1300239	Parameter	char * msghdr_c	1113:55:31358:31371	1300125	1	True				
ANR	1300240	ParameterType	char *		1300125	0					
ANR	1300241	Identifier	msghdr_c		1300125	1					
ANR	1300242	Parameter	ser_context * ctx	1113:71:31374:31389	1300125	2	True				
ANR	1300243	ParameterType	ser_context *		1300125	0					
ANR	1300244	Identifier	ctx		1300125	1					
ANR	1300245	CFGEntryNode	ENTRY		1300125		True				
ANR	1300246	CFGExitNode	EXIT		1300125		True				
ANR	1300247	Symbol	arr		1300125						
ANR	1300248	Symbol	msg		1300125						
ANR	1300249	Symbol	& msg		1300125						
ANR	1300250	Symbol	msghdr_c		1300125						
ANR	1300251	Symbol	zend_hash_num_elements		1300125						
ANR	1300252	Symbol	ctx		1300125						
ANR	1300253	Symbol	* msg		1300125						
ANR	1300254	Symbol	num_elem		1300125						
ANR	1300255	Symbol	Z_TYPE_P		1300125						
ANR	1300256	Symbol	accounted_safe_ecalloc		1300125						
ANR	1300257	Symbol	* msg -> msg_iov		1300125						
ANR	1300258	Symbol	IS_ARRAY		1300125						
ANR	1300259	Symbol	* * msg		1300125						
ANR	1300260	Symbol	from_zval_write_iov_array_aux		1300125						
ANR	1300261	Symbol	msg -> msg_iov		1300125						
ANR	1300262	Symbol	Z_ARRVAL_P		1300125						
ANR	1300263	Symbol	msg -> msg_iovlen		1300125						
ANR	1300264	Function	from_zval_write_controllen	1133:0:31854:32362							
ANR	1300265	FunctionDef	"from_zval_write_controllen (const zval * elem , char * msghdr_c , ser_context * ctx)"		1300264	0					
ANR	1300266	CompoundStatement		1134:0:31945:32362	1300264	0					
ANR	1300267	IdentifierDeclStatement	struct msghdr * msghdr = ( struct msghdr * ) msghdr_c ;	1135:1:31948:31997	1300264	0	True				
ANR	1300268	IdentifierDecl	* msghdr = ( struct msghdr * ) msghdr_c		1300264	0					
ANR	1300269	IdentifierDeclType	struct msghdr *		1300264	0					
ANR	1300270	Identifier	msghdr		1300264	1					
ANR	1300271	AssignmentExpression	* msghdr = ( struct msghdr * ) msghdr_c		1300264	2		=			
ANR	1300272	Identifier	msghdr		1300264	0					
ANR	1300273	CastExpression	( struct msghdr * ) msghdr_c		1300264	1					
ANR	1300274	CastTarget	struct msghdr *		1300264	0					
ANR	1300275	Identifier	msghdr_c		1300264	1					
ANR	1300276	IdentifierDeclStatement	uint32_t len ;	1136:1:32000:32012	1300264	1	True				
ANR	1300277	IdentifierDecl	len		1300264	0					
ANR	1300278	IdentifierDeclType	uint32_t		1300264	0					
ANR	1300279	Identifier	len		1300264	1					
ANR	1300280	ExpressionStatement	"from_zval_write_uint32 ( elem , ( char * ) & len , ctx )"	1141:1:32127:32173	1300264	2	True				
ANR	1300281	CallExpression	"from_zval_write_uint32 ( elem , ( char * ) & len , ctx )"		1300264	0					
ANR	1300282	Callee	from_zval_write_uint32		1300264	0					
ANR	1300283	Identifier	from_zval_write_uint32		1300264	0					
ANR	1300284	ArgumentList	elem		1300264	1					
ANR	1300285	Argument	elem		1300264	0					
ANR	1300286	Identifier	elem		1300264	0					
ANR	1300287	Argument	( char * ) & len		1300264	1					
ANR	1300288	CastExpression	( char * ) & len		1300264	0					
ANR	1300289	CastTarget	char *		1300264	0					
ANR	1300290	UnaryOperationExpression	& len		1300264	1					
ANR	1300291	UnaryOperator	&		1300264	0					
ANR	1300292	Identifier	len		1300264	1					
ANR	1300293	Argument	ctx		1300264	2					
ANR	1300294	Identifier	ctx		1300264	0					
ANR	1300295	IfStatement	if ( ! ctx -> err . has_error && len == 0 )		1300264	3					
ANR	1300296	Condition	! ctx -> err . has_error && len == 0	1142:5:32180:32210	1300264	0	True				
ANR	1300297	AndExpression	! ctx -> err . has_error && len == 0		1300264	0		&&			
ANR	1300298	UnaryOperationExpression	! ctx -> err . has_error		1300264	0					
ANR	1300299	UnaryOperator	!		1300264	0					
ANR	1300300	MemberAccess	ctx -> err . has_error		1300264	1					
ANR	1300301	PtrMemberAccess	ctx -> err		1300264	0					
ANR	1300302	Identifier	ctx		1300264	0					
ANR	1300303	Identifier	err		1300264	1					
ANR	1300304	Identifier	has_error		1300264	1					
ANR	1300305	EqualityExpression	len == 0		1300264	1		==			
ANR	1300306	Identifier	len		1300264	0					
ANR	1300307	PrimaryExpression	0		1300264	1					
ANR	1300308	CompoundStatement		9:38:267:267	1300264	1					
ANR	1300309	ExpressionStatement	"do_from_zval_err ( ctx , ""controllen cannot be 0"" )"	1143:2:32217:32264	1300264	0	True				
ANR	1300310	CallExpression	"do_from_zval_err ( ctx , ""controllen cannot be 0"" )"		1300264	0					
ANR	1300311	Callee	do_from_zval_err		1300264	0					
ANR	1300312	Identifier	do_from_zval_err		1300264	0					
ANR	1300313	ArgumentList	ctx		1300264	1					
ANR	1300314	Argument	ctx		1300264	0					
ANR	1300315	Identifier	ctx		1300264	0					
ANR	1300316	Argument	"""controllen cannot be 0"""		1300264	1					
ANR	1300317	PrimaryExpression	"""controllen cannot be 0"""		1300264	0					
ANR	1300318	ReturnStatement	return ;	1144:2:32268:32274	1300264	1	True				
ANR	1300319	ExpressionStatement	"msghdr -> msg_control = accounted_emalloc ( len , ctx )"	1146:1:32280:32329	1300264	4	True				
ANR	1300320	AssignmentExpression	"msghdr -> msg_control = accounted_emalloc ( len , ctx )"		1300264	0		=			
ANR	1300321	PtrMemberAccess	msghdr -> msg_control		1300264	0					
ANR	1300322	Identifier	msghdr		1300264	0					
ANR	1300323	Identifier	msg_control		1300264	1					
ANR	1300324	CallExpression	"accounted_emalloc ( len , ctx )"		1300264	1					
ANR	1300325	Callee	accounted_emalloc		1300264	0					
ANR	1300326	Identifier	accounted_emalloc		1300264	0					
ANR	1300327	ArgumentList	len		1300264	1					
ANR	1300328	Argument	len		1300264	0					
ANR	1300329	Identifier	len		1300264	0					
ANR	1300330	Argument	ctx		1300264	1					
ANR	1300331	Identifier	ctx		1300264	0					
ANR	1300332	ExpressionStatement	msghdr -> msg_controllen = len	1147:1:32332:32360	1300264	5	True				
ANR	1300333	AssignmentExpression	msghdr -> msg_controllen = len		1300264	0		=			
ANR	1300334	PtrMemberAccess	msghdr -> msg_controllen		1300264	0					
ANR	1300335	Identifier	msghdr		1300264	0					
ANR	1300336	Identifier	msg_controllen		1300264	1					
ANR	1300337	Identifier	len		1300264	1					
ANR	1300338	ReturnType	static void		1300264	1					
ANR	1300339	Identifier	from_zval_write_controllen		1300264	2					
ANR	1300340	ParameterList	"const zval * elem , char * msghdr_c , ser_context * ctx"		1300264	3					
ANR	1300341	Parameter	const zval * elem	1133:39:31893:31908	1300264	0	True				
ANR	1300342	ParameterType	const zval *		1300264	0					
ANR	1300343	Identifier	elem		1300264	1					
ANR	1300344	Parameter	char * msghdr_c	1133:57:31911:31924	1300264	1	True				
ANR	1300345	ParameterType	char *		1300264	0					
ANR	1300346	Identifier	msghdr_c		1300264	1					
ANR	1300347	Parameter	ser_context * ctx	1133:73:31927:31942	1300264	2	True				
ANR	1300348	ParameterType	ser_context *		1300264	0					
ANR	1300349	Identifier	ctx		1300264	1					
ANR	1300350	CFGEntryNode	ENTRY		1300264		True				
ANR	1300351	CFGExitNode	EXIT		1300264		True				
ANR	1300352	Symbol	elem		1300264						
ANR	1300353	Symbol	msghdr_c		1300264						
ANR	1300354	Symbol	ctx		1300264						
ANR	1300355	Symbol	msghdr -> msg_control		1300264						
ANR	1300356	Symbol	ctx -> err . has_error		1300264						
ANR	1300357	Symbol	ctx -> err		1300264						
ANR	1300358	Symbol	* ctx		1300264						
ANR	1300359	Symbol	msghdr -> msg_controllen		1300264						
ANR	1300360	Symbol	msghdr		1300264						
ANR	1300361	Symbol	len		1300264						
ANR	1300362	Symbol	* msghdr		1300264						
ANR	1300363	Symbol	& len		1300264						
ANR	1300364	Symbol	accounted_emalloc		1300264						
ANR	1300365	Function	from_zval_write_msghdr_send	1149:0:32364:32784							
ANR	1300366	FunctionDef	"from_zval_write_msghdr_send (const zval * container , char * msghdr_c , ser_context * ctx)"		1300365	0					
ANR	1300367	CompoundStatement		1150:0:32454:32784	1300365	0					
ANR	1300368	Statement	static	1151:1:32457:32462	1300365	0	True				
ANR	1300369	IdentifierDeclStatement	"const field_descriptor descriptors [ ] = { { ""name"" , sizeof ( ""name"" ) , 0 , 0 , from_zval_write_name , 0 } , { ""iov"" , sizeof ( ""iov"" ) , 0 , 0 , from_zval_write_iov_array , 0 } , { ""control"" , sizeof ( ""control"" ) , 0 , 0 , from_zval_write_control_array , 0 } , { 0 } } ;"	1151:8:32464:32712	1300365	1	True				
ANR	1300370	IdentifierDecl	"descriptors [ ] = { { ""name"" , sizeof ( ""name"" ) , 0 , 0 , from_zval_write_name , 0 } , { ""iov"" , sizeof ( ""iov"" ) , 0 , 0 , from_zval_write_iov_array , 0 } , { ""control"" , sizeof ( ""control"" ) , 0 , 0 , from_zval_write_control_array , 0 } , { 0 } }"		1300365	0					
ANR	1300371	IdentifierDeclType	const field_descriptor [ ]		1300365	0					
ANR	1300372	Identifier	descriptors		1300365	1					
ANR	1300373	AssignmentExpression	"descriptors [ ] = { { ""name"" , sizeof ( ""name"" ) , 0 , 0 , from_zval_write_name , 0 } , { ""iov"" , sizeof ( ""iov"" ) , 0 , 0 , from_zval_write_iov_array , 0 } , { ""control"" , sizeof ( ""control"" ) , 0 , 0 , from_zval_write_control_array , 0 } , { 0 } }"		1300365	2		=			
ANR	1300374	Identifier	descriptors		1300365	0					
ANR	1300375	InitializerList	"""name"""		1300365	1					
ANR	1300376	InitializerList	"""name"""		1300365	0					
ANR	1300377	PrimaryExpression	"""name"""		1300365	0					
ANR	1300378	SizeofExpression	"sizeof ( ""name"" )"		1300365	1					
ANR	1300379	Sizeof	sizeof		1300365	0					
ANR	1300380	PrimaryExpression	"""name"""		1300365	1					
ANR	1300381	PrimaryExpression	0		1300365	2					
ANR	1300382	PrimaryExpression	0		1300365	3					
ANR	1300383	Identifier	from_zval_write_name		1300365	4					
ANR	1300384	PrimaryExpression	0		1300365	5					
ANR	1300385	InitializerList	"""iov"""		1300365	1					
ANR	1300386	PrimaryExpression	"""iov"""		1300365	0					
ANR	1300387	SizeofExpression	"sizeof ( ""iov"" )"		1300365	1					
ANR	1300388	Sizeof	sizeof		1300365	0					
ANR	1300389	PrimaryExpression	"""iov"""		1300365	1					
ANR	1300390	PrimaryExpression	0		1300365	2					
ANR	1300391	PrimaryExpression	0		1300365	3					
ANR	1300392	Identifier	from_zval_write_iov_array		1300365	4					
ANR	1300393	PrimaryExpression	0		1300365	5					
ANR	1300394	InitializerList	"""control"""		1300365	2					
ANR	1300395	PrimaryExpression	"""control"""		1300365	0					
ANR	1300396	SizeofExpression	"sizeof ( ""control"" )"		1300365	1					
ANR	1300397	Sizeof	sizeof		1300365	0					
ANR	1300398	PrimaryExpression	"""control"""		1300365	1					
ANR	1300399	PrimaryExpression	0		1300365	2					
ANR	1300400	PrimaryExpression	0		1300365	3					
ANR	1300401	Identifier	from_zval_write_control_array		1300365	4					
ANR	1300402	PrimaryExpression	0		1300365	5					
ANR	1300403	InitializerList	0		1300365	3					
ANR	1300404	PrimaryExpression	0		1300365	0					
ANR	1300405	ExpressionStatement	"from_zval_write_aggregation ( container , msghdr_c , descriptors , ctx )"	1158:1:32716:32782	1300365	2	True				
ANR	1300406	CallExpression	"from_zval_write_aggregation ( container , msghdr_c , descriptors , ctx )"		1300365	0					
ANR	1300407	Callee	from_zval_write_aggregation		1300365	0					
ANR	1300408	Identifier	from_zval_write_aggregation		1300365	0					
ANR	1300409	ArgumentList	container		1300365	1					
ANR	1300410	Argument	container		1300365	0					
ANR	1300411	Identifier	container		1300365	0					
ANR	1300412	Argument	msghdr_c		1300365	1					
ANR	1300413	Identifier	msghdr_c		1300365	0					
ANR	1300414	Argument	descriptors		1300365	2					
ANR	1300415	Identifier	descriptors		1300365	0					
ANR	1300416	Argument	ctx		1300365	3					
ANR	1300417	Identifier	ctx		1300365	0					
ANR	1300418	ReturnType	void		1300365	1					
ANR	1300419	Identifier	from_zval_write_msghdr_send		1300365	2					
ANR	1300420	ParameterList	"const zval * container , char * msghdr_c , ser_context * ctx"		1300365	3					
ANR	1300421	Parameter	const zval * container	1149:33:32397:32417	1300365	0	True				
ANR	1300422	ParameterType	const zval *		1300365	0					
ANR	1300423	Identifier	container		1300365	1					
ANR	1300424	Parameter	char * msghdr_c	1149:56:32420:32433	1300365	1	True				
ANR	1300425	ParameterType	char *		1300365	0					
ANR	1300426	Identifier	msghdr_c		1300365	1					
ANR	1300427	Parameter	ser_context * ctx	1149:72:32436:32451	1300365	2	True				
ANR	1300428	ParameterType	ser_context *		1300365	0					
ANR	1300429	Identifier	ctx		1300365	1					
ANR	1300430	CFGEntryNode	ENTRY		1300365		True				
ANR	1300431	CFGExitNode	EXIT		1300365		True				
ANR	1300432	Symbol	container		1300365						
ANR	1300433	Symbol	msghdr_c		1300365						
ANR	1300434	Symbol	descriptors		1300365						
ANR	1300435	Symbol	from_zval_write_iov_array		1300365						
ANR	1300436	Symbol	ctx		1300365						
ANR	1300437	Symbol	from_zval_write_control_array		1300365						
ANR	1300438	Symbol	from_zval_write_name		1300365						
ANR	1300439	Function	from_zval_write_msghdr_recv	1160:0:32786:34416							
ANR	1300440	FunctionDef	"from_zval_write_msghdr_recv (const zval * container , char * msghdr_c , ser_context * ctx)"		1300439	0					
ANR	1300441	CompoundStatement		1161:0:32876:34416	1300439	0					
ANR	1300442	Statement	static	1176:1:33344:33349	1300439	0	True				
ANR	1300443	IdentifierDeclStatement	"const field_descriptor descriptors [ ] = { { ""name"" , sizeof ( ""name"" ) , 0 , 0 , from_zval_write_name , 0 } , { ""buffer_size"" , sizeof ( ""buffer_size"" ) , 0 , 0 , from_zval_write_msghdr_buffer_size , 0 } , { ""controllen"" , sizeof ( ""controllen"" ) , 1 , 0 , from_zval_write_controllen , 0 } , { 0 } } ;"	1176:8:33351:33627	1300439	1	True				
ANR	1300444	IdentifierDecl	"descriptors [ ] = { { ""name"" , sizeof ( ""name"" ) , 0 , 0 , from_zval_write_name , 0 } , { ""buffer_size"" , sizeof ( ""buffer_size"" ) , 0 , 0 , from_zval_write_msghdr_buffer_size , 0 } , { ""controllen"" , sizeof ( ""controllen"" ) , 1 , 0 , from_zval_write_controllen , 0 } , { 0 } }"		1300439	0					
ANR	1300445	IdentifierDeclType	const field_descriptor [ ]		1300439	0					
ANR	1300446	Identifier	descriptors		1300439	1					
ANR	1300447	AssignmentExpression	"descriptors [ ] = { { ""name"" , sizeof ( ""name"" ) , 0 , 0 , from_zval_write_name , 0 } , { ""buffer_size"" , sizeof ( ""buffer_size"" ) , 0 , 0 , from_zval_write_msghdr_buffer_size , 0 } , { ""controllen"" , sizeof ( ""controllen"" ) , 1 , 0 , from_zval_write_controllen , 0 } , { 0 } }"		1300439	2		=			
ANR	1300448	Identifier	descriptors		1300439	0					
ANR	1300449	InitializerList	"""name"""		1300439	1					
ANR	1300450	InitializerList	"""name"""		1300439	0					
ANR	1300451	PrimaryExpression	"""name"""		1300439	0					
ANR	1300452	SizeofExpression	"sizeof ( ""name"" )"		1300439	1					
ANR	1300453	Sizeof	sizeof		1300439	0					
ANR	1300454	PrimaryExpression	"""name"""		1300439	1					
ANR	1300455	PrimaryExpression	0		1300439	2					
ANR	1300456	PrimaryExpression	0		1300439	3					
ANR	1300457	Identifier	from_zval_write_name		1300439	4					
ANR	1300458	PrimaryExpression	0		1300439	5					
ANR	1300459	InitializerList	"""buffer_size"""		1300439	1					
ANR	1300460	PrimaryExpression	"""buffer_size"""		1300439	0					
ANR	1300461	SizeofExpression	"sizeof ( ""buffer_size"" )"		1300439	1					
ANR	1300462	Sizeof	sizeof		1300439	0					
ANR	1300463	PrimaryExpression	"""buffer_size"""		1300439	1					
ANR	1300464	PrimaryExpression	0		1300439	2					
ANR	1300465	PrimaryExpression	0		1300439	3					
ANR	1300466	Identifier	from_zval_write_msghdr_buffer_size		1300439	4					
ANR	1300467	PrimaryExpression	0		1300439	5					
ANR	1300468	InitializerList	"""controllen"""		1300439	2					
ANR	1300469	PrimaryExpression	"""controllen"""		1300439	0					
ANR	1300470	SizeofExpression	"sizeof ( ""controllen"" )"		1300439	1					
ANR	1300471	Sizeof	sizeof		1300439	0					
ANR	1300472	PrimaryExpression	"""controllen"""		1300439	1					
ANR	1300473	PrimaryExpression	1		1300439	2					
ANR	1300474	PrimaryExpression	0		1300439	3					
ANR	1300475	Identifier	from_zval_write_controllen		1300439	4					
ANR	1300476	PrimaryExpression	0		1300439	5					
ANR	1300477	InitializerList	0		1300439	3					
ANR	1300478	PrimaryExpression	0		1300439	0					
ANR	1300479	IdentifierDeclStatement	struct msghdr * msghdr = ( struct msghdr * ) msghdr_c ;	1182:1:33630:33680	1300439	2	True				
ANR	1300480	IdentifierDecl	* msghdr = ( struct msghdr * ) msghdr_c		1300439	0					
ANR	1300481	IdentifierDeclType	struct msghdr *		1300439	0					
ANR	1300482	Identifier	msghdr		1300439	1					
ANR	1300483	AssignmentExpression	* msghdr = ( struct msghdr * ) msghdr_c		1300439	2		=			
ANR	1300484	Identifier	msghdr		1300439	0					
ANR	1300485	CastExpression	( struct msghdr * ) msghdr_c		1300439	1					
ANR	1300486	CastTarget	struct msghdr *		1300439	0					
ANR	1300487	Identifier	msghdr_c		1300439	1					
ANR	1300488	IdentifierDeclStatement	"const int falsev = 0 , * falsevp = & falsev ;"	1183:1:33683:33729	1300439	3	True				
ANR	1300489	IdentifierDecl	falsev = 0		1300439	0					
ANR	1300490	IdentifierDeclType	const int		1300439	0					
ANR	1300491	Identifier	falsev		1300439	1					
ANR	1300492	AssignmentExpression	falsev = 0		1300439	2		=			
ANR	1300493	Identifier	falsev		1300439	0					
ANR	1300494	PrimaryExpression	0		1300439	1					
ANR	1300495	IdentifierDecl	* falsevp = & falsev		1300439	1					
ANR	1300496	IdentifierDeclType	const int *		1300439	0					
ANR	1300497	Identifier	falsevp		1300439	1					
ANR	1300498	AssignmentExpression	* falsevp = & falsev		1300439	2		=			
ANR	1300499	Identifier	falsevp		1300439	0					
ANR	1300500	UnaryOperationExpression	& falsev		1300439	1					
ANR	1300501	UnaryOperator	&		1300439	0					
ANR	1300502	Identifier	falsev		1300439	1					
ANR	1300503	IfStatement	"if ( zend_hash_add ( & ctx -> params , KEY_FILL_SOCKADDR , sizeof ( KEY_FILL_SOCKADDR ) , ( void * ) & falsevp , sizeof ( falsevp ) , NULL ) == FAILURE )"		1300439	4					
ANR	1300504	Condition	"zend_hash_add ( & ctx -> params , KEY_FILL_SOCKADDR , sizeof ( KEY_FILL_SOCKADDR ) , ( void * ) & falsevp , sizeof ( falsevp ) , NULL ) == FAILURE"	1186:5:33737:33863	1300439	0	True				
ANR	1300505	EqualityExpression	"zend_hash_add ( & ctx -> params , KEY_FILL_SOCKADDR , sizeof ( KEY_FILL_SOCKADDR ) , ( void * ) & falsevp , sizeof ( falsevp ) , NULL ) == FAILURE"		1300439	0		==			
ANR	1300506	CallExpression	"zend_hash_add ( & ctx -> params , KEY_FILL_SOCKADDR , sizeof ( KEY_FILL_SOCKADDR ) , ( void * ) & falsevp , sizeof ( falsevp ) , NULL )"		1300439	0					
ANR	1300507	Callee	zend_hash_add		1300439	0					
ANR	1300508	Identifier	zend_hash_add		1300439	0					
ANR	1300509	ArgumentList	& ctx -> params		1300439	1					
ANR	1300510	Argument	& ctx -> params		1300439	0					
ANR	1300511	UnaryOperationExpression	& ctx -> params		1300439	0					
ANR	1300512	UnaryOperator	&		1300439	0					
ANR	1300513	PtrMemberAccess	ctx -> params		1300439	1					
ANR	1300514	Identifier	ctx		1300439	0					
ANR	1300515	Identifier	params		1300439	1					
ANR	1300516	Argument	KEY_FILL_SOCKADDR		1300439	1					
ANR	1300517	Identifier	KEY_FILL_SOCKADDR		1300439	0					
ANR	1300518	Argument	sizeof ( KEY_FILL_SOCKADDR )		1300439	2					
ANR	1300519	SizeofExpression	sizeof ( KEY_FILL_SOCKADDR )		1300439	0					
ANR	1300520	Sizeof	sizeof		1300439	0					
ANR	1300521	SizeofOperand	KEY_FILL_SOCKADDR		1300439	1					
ANR	1300522	Argument	( void * ) & falsevp		1300439	3					
ANR	1300523	CastExpression	( void * ) & falsevp		1300439	0					
ANR	1300524	CastTarget	void *		1300439	0					
ANR	1300525	UnaryOperationExpression	& falsevp		1300439	1					
ANR	1300526	UnaryOperator	&		1300439	0					
ANR	1300527	Identifier	falsevp		1300439	1					
ANR	1300528	Argument	sizeof ( falsevp )		1300439	4					
ANR	1300529	SizeofExpression	sizeof ( falsevp )		1300439	0					
ANR	1300530	Sizeof	sizeof		1300439	0					
ANR	1300531	SizeofOperand	falsevp		1300439	1					
ANR	1300532	Argument	NULL		1300439	5					
ANR	1300533	Identifier	NULL		1300439	0					
ANR	1300534	Identifier	FAILURE		1300439	1					
ANR	1300535	CompoundStatement		27:55:989:989	1300439	1					
ANR	1300536	ExpressionStatement	"do_from_zval_err ( ctx , ""could not add fill_sockaddr; this is a bug"" )"	1188:2:33870:33937	1300439	0	True				
ANR	1300537	CallExpression	"do_from_zval_err ( ctx , ""could not add fill_sockaddr; this is a bug"" )"		1300439	0					
ANR	1300538	Callee	do_from_zval_err		1300439	0					
ANR	1300539	Identifier	do_from_zval_err		1300439	0					
ANR	1300540	ArgumentList	ctx		1300439	1					
ANR	1300541	Argument	ctx		1300439	0					
ANR	1300542	Identifier	ctx		1300439	0					
ANR	1300543	Argument	"""could not add fill_sockaddr; this is a bug"""		1300439	1					
ANR	1300544	PrimaryExpression	"""could not add fill_sockaddr; this is a bug"""		1300439	0					
ANR	1300545	ReturnStatement	return ;	1189:2:33941:33947	1300439	1	True				
ANR	1300546	ExpressionStatement	"from_zval_write_aggregation ( container , msghdr_c , descriptors , ctx )"	1192:1:33954:34020	1300439	5	True				
ANR	1300547	CallExpression	"from_zval_write_aggregation ( container , msghdr_c , descriptors , ctx )"		1300439	0					
ANR	1300548	Callee	from_zval_write_aggregation		1300439	0					
ANR	1300549	Identifier	from_zval_write_aggregation		1300439	0					
ANR	1300550	ArgumentList	container		1300439	1					
ANR	1300551	Argument	container		1300439	0					
ANR	1300552	Identifier	container		1300439	0					
ANR	1300553	Argument	msghdr_c		1300439	1					
ANR	1300554	Identifier	msghdr_c		1300439	0					
ANR	1300555	Argument	descriptors		1300439	2					
ANR	1300556	Identifier	descriptors		1300439	0					
ANR	1300557	Argument	ctx		1300439	3					
ANR	1300558	Identifier	ctx		1300439	0					
ANR	1300559	ExpressionStatement	"zend_hash_del ( & ctx -> params , KEY_FILL_SOCKADDR , sizeof ( KEY_FILL_SOCKADDR ) )"	1194:1:34024:34097	1300439	6	True				
ANR	1300560	CallExpression	"zend_hash_del ( & ctx -> params , KEY_FILL_SOCKADDR , sizeof ( KEY_FILL_SOCKADDR ) )"		1300439	0					
ANR	1300561	Callee	zend_hash_del		1300439	0					
ANR	1300562	Identifier	zend_hash_del		1300439	0					
ANR	1300563	ArgumentList	& ctx -> params		1300439	1					
ANR	1300564	Argument	& ctx -> params		1300439	0					
ANR	1300565	UnaryOperationExpression	& ctx -> params		1300439	0					
ANR	1300566	UnaryOperator	&		1300439	0					
ANR	1300567	PtrMemberAccess	ctx -> params		1300439	1					
ANR	1300568	Identifier	ctx		1300439	0					
ANR	1300569	Identifier	params		1300439	1					
ANR	1300570	Argument	KEY_FILL_SOCKADDR		1300439	1					
ANR	1300571	Identifier	KEY_FILL_SOCKADDR		1300439	0					
ANR	1300572	Argument	sizeof ( KEY_FILL_SOCKADDR )		1300439	2					
ANR	1300573	SizeofExpression	sizeof ( KEY_FILL_SOCKADDR )		1300439	0					
ANR	1300574	Sizeof	sizeof		1300439	0					
ANR	1300575	SizeofOperand	KEY_FILL_SOCKADDR		1300439	1					
ANR	1300576	IfStatement	if ( ctx -> err . has_error )		1300439	7					
ANR	1300577	Condition	ctx -> err . has_error	1195:5:34104:34121	1300439	0	True				
ANR	1300578	MemberAccess	ctx -> err . has_error		1300439	0					
ANR	1300579	PtrMemberAccess	ctx -> err		1300439	0					
ANR	1300580	Identifier	ctx		1300439	0					
ANR	1300581	Identifier	err		1300439	1					
ANR	1300582	Identifier	has_error		1300439	1					
ANR	1300583	CompoundStatement		35:25:1247:1247	1300439	1					
ANR	1300584	ReturnStatement	return ;	1196:2:34128:34134	1300439	0	True				
ANR	1300585	IfStatement	if ( msghdr -> msg_iovlen == 0 )		1300439	8					
ANR	1300586	Condition	msghdr -> msg_iovlen == 0	1199:5:34145:34167	1300439	0	True				
ANR	1300587	EqualityExpression	msghdr -> msg_iovlen == 0		1300439	0		==			
ANR	1300588	PtrMemberAccess	msghdr -> msg_iovlen		1300439	0					
ANR	1300589	Identifier	msghdr		1300439	0					
ANR	1300590	Identifier	msg_iovlen		1300439	1					
ANR	1300591	PrimaryExpression	0		1300439	1					
ANR	1300592	CompoundStatement		39:30:1293:1293	1300439	1					
ANR	1300593	ExpressionStatement	msghdr -> msg_iovlen = 1	1200:2:34174:34196	1300439	0	True				
ANR	1300594	AssignmentExpression	msghdr -> msg_iovlen = 1		1300439	0		=			
ANR	1300595	PtrMemberAccess	msghdr -> msg_iovlen		1300439	0					
ANR	1300596	Identifier	msghdr		1300439	0					
ANR	1300597	Identifier	msg_iovlen		1300439	1					
ANR	1300598	PrimaryExpression	1		1300439	1					
ANR	1300599	ExpressionStatement	"msghdr -> msg_iov = accounted_emalloc ( sizeof ( * msghdr -> msg_iov ) * 1 , ctx )"	1201:2:34200:34270	1300439	1	True				
ANR	1300600	AssignmentExpression	"msghdr -> msg_iov = accounted_emalloc ( sizeof ( * msghdr -> msg_iov ) * 1 , ctx )"		1300439	0		=			
ANR	1300601	PtrMemberAccess	msghdr -> msg_iov		1300439	0					
ANR	1300602	Identifier	msghdr		1300439	0					
ANR	1300603	Identifier	msg_iov		1300439	1					
ANR	1300604	CallExpression	"accounted_emalloc ( sizeof ( * msghdr -> msg_iov ) * 1 , ctx )"		1300439	1					
ANR	1300605	Callee	accounted_emalloc		1300439	0					
ANR	1300606	Identifier	accounted_emalloc		1300439	0					
ANR	1300607	ArgumentList	sizeof ( * msghdr -> msg_iov ) * 1		1300439	1					
ANR	1300608	Argument	sizeof ( * msghdr -> msg_iov ) * 1		1300439	0					
ANR	1300609	MultiplicativeExpression	sizeof ( * msghdr -> msg_iov ) * 1		1300439	0		*			
ANR	1300610	SizeofExpression	sizeof ( * msghdr -> msg_iov )		1300439	0					
ANR	1300611	Sizeof	sizeof		1300439	0					
ANR	1300612	UnaryOperationExpression	* msghdr -> msg_iov		1300439	1					
ANR	1300613	UnaryOperator	*		1300439	0					
ANR	1300614	PtrMemberAccess	msghdr -> msg_iov		1300439	1					
ANR	1300615	Identifier	msghdr		1300439	0					
ANR	1300616	Identifier	msg_iov		1300439	1					
ANR	1300617	PrimaryExpression	1		1300439	1					
ANR	1300618	Argument	ctx		1300439	1					
ANR	1300619	Identifier	ctx		1300439	0					
ANR	1300620	ExpressionStatement	"msghdr -> msg_iov [ 0 ] . iov_base = accounted_emalloc ( ( size_t ) DEFAULT_BUFF_SIZE , ctx )"	1202:2:34274:34353	1300439	2	True				
ANR	1300621	AssignmentExpression	"msghdr -> msg_iov [ 0 ] . iov_base = accounted_emalloc ( ( size_t ) DEFAULT_BUFF_SIZE , ctx )"		1300439	0		=			
ANR	1300622	MemberAccess	msghdr -> msg_iov [ 0 ] . iov_base		1300439	0					
ANR	1300623	ArrayIndexing	msghdr -> msg_iov [ 0 ]		1300439	0					
ANR	1300624	PtrMemberAccess	msghdr -> msg_iov		1300439	0					
ANR	1300625	Identifier	msghdr		1300439	0					
ANR	1300626	Identifier	msg_iov		1300439	1					
ANR	1300627	PrimaryExpression	0		1300439	1					
ANR	1300628	Identifier	iov_base		1300439	1					
ANR	1300629	CallExpression	"accounted_emalloc ( ( size_t ) DEFAULT_BUFF_SIZE , ctx )"		1300439	1					
ANR	1300630	Callee	accounted_emalloc		1300439	0					
ANR	1300631	Identifier	accounted_emalloc		1300439	0					
ANR	1300632	ArgumentList	( size_t ) DEFAULT_BUFF_SIZE		1300439	1					
ANR	1300633	Argument	( size_t ) DEFAULT_BUFF_SIZE		1300439	0					
ANR	1300634	CastExpression	( size_t ) DEFAULT_BUFF_SIZE		1300439	0					
ANR	1300635	CastTarget	size_t		1300439	0					
ANR	1300636	Identifier	DEFAULT_BUFF_SIZE		1300439	1					
ANR	1300637	Argument	ctx		1300439	1					
ANR	1300638	Identifier	ctx		1300439	0					
ANR	1300639	ExpressionStatement	msghdr -> msg_iov [ 0 ] . iov_len = ( size_t ) DEFAULT_BUFF_SIZE	1203:2:34357:34411	1300439	3	True				
ANR	1300640	AssignmentExpression	msghdr -> msg_iov [ 0 ] . iov_len = ( size_t ) DEFAULT_BUFF_SIZE		1300439	0		=			
ANR	1300641	MemberAccess	msghdr -> msg_iov [ 0 ] . iov_len		1300439	0					
ANR	1300642	ArrayIndexing	msghdr -> msg_iov [ 0 ]		1300439	0					
ANR	1300643	PtrMemberAccess	msghdr -> msg_iov		1300439	0					
ANR	1300644	Identifier	msghdr		1300439	0					
ANR	1300645	Identifier	msg_iov		1300439	1					
ANR	1300646	PrimaryExpression	0		1300439	1					
ANR	1300647	Identifier	iov_len		1300439	1					
ANR	1300648	CastExpression	( size_t ) DEFAULT_BUFF_SIZE		1300439	1					
ANR	1300649	CastTarget	size_t		1300439	0					
ANR	1300650	Identifier	DEFAULT_BUFF_SIZE		1300439	1					
ANR	1300651	ReturnType	void		1300439	1					
ANR	1300652	Identifier	from_zval_write_msghdr_recv		1300439	2					
ANR	1300653	ParameterList	"const zval * container , char * msghdr_c , ser_context * ctx"		1300439	3					
ANR	1300654	Parameter	const zval * container	1160:33:32819:32839	1300439	0	True				
ANR	1300655	ParameterType	const zval *		1300439	0					
ANR	1300656	Identifier	container		1300439	1					
ANR	1300657	Parameter	char * msghdr_c	1160:56:32842:32855	1300439	1	True				
ANR	1300658	ParameterType	char *		1300439	0					
ANR	1300659	Identifier	msghdr_c		1300439	1					
ANR	1300660	Parameter	ser_context * ctx	1160:72:32858:32873	1300439	2	True				
ANR	1300661	ParameterType	ser_context *		1300439	0					
ANR	1300662	Identifier	ctx		1300439	1					
ANR	1300663	CFGEntryNode	ENTRY		1300439		True				
ANR	1300664	CFGExitNode	EXIT		1300439		True				
ANR	1300665	Symbol	container		1300439						
ANR	1300666	Symbol	msghdr_c		1300439						
ANR	1300667	Symbol	msghdr -> msg_iovlen		1300439						
ANR	1300668	Symbol	from_zval_write_controllen		1300439						
ANR	1300669	Symbol	from_zval_write_name		1300439						
ANR	1300670	Symbol	ctx -> err		1300439						
ANR	1300671	Symbol	msghdr		1300439						
ANR	1300672	Symbol	descriptors		1300439						
ANR	1300673	Symbol	KEY_FILL_SOCKADDR		1300439						
ANR	1300674	Symbol	msghdr -> msg_iov [ 0 ] . iov_base		1300439						
ANR	1300675	Symbol	* msghdr -> msg_iov		1300439						
ANR	1300676	Symbol	& falsevp		1300439						
ANR	1300677	Symbol	msghdr -> msg_iov		1300439						
ANR	1300678	Symbol	* * msghdr		1300439						
ANR	1300679	Symbol	accounted_emalloc		1300439						
ANR	1300680	Symbol	& falsev		1300439						
ANR	1300681	Symbol	NULL		1300439						
ANR	1300682	Symbol	ctx		1300439						
ANR	1300683	Symbol	from_zval_write_msghdr_buffer_size		1300439						
ANR	1300684	Symbol	ctx -> err . has_error		1300439						
ANR	1300685	Symbol	falsev		1300439						
ANR	1300686	Symbol	msghdr -> msg_iov [ 0 ] . iov_len		1300439						
ANR	1300687	Symbol	FAILURE		1300439						
ANR	1300688	Symbol	* ctx		1300439						
ANR	1300689	Symbol	falsevp		1300439						
ANR	1300690	Symbol	zend_hash_add		1300439						
ANR	1300691	Symbol	DEFAULT_BUFF_SIZE		1300439						
ANR	1300692	Symbol	* msghdr		1300439						
ANR	1300693	Symbol	& ctx -> params		1300439						
ANR	1300694	Function	to_zval_read_iov	1207:0:34419:35417							
ANR	1300695	FunctionDef	"to_zval_read_iov (const char * msghdr_c , zval * zv , res_context * ctx)"		1300694	0					
ANR	1300696	CompoundStatement		1208:0:34498:35417	1300694	0					
ANR	1300697	IdentifierDeclStatement	const struct msghdr * msghdr = ( const struct msghdr * ) msghdr_c ;	1209:1:34501:34562	1300694	0	True				
ANR	1300698	IdentifierDecl	* msghdr = ( const struct msghdr * ) msghdr_c		1300694	0					
ANR	1300699	IdentifierDeclType	const struct msghdr *		1300694	0					
ANR	1300700	Identifier	msghdr		1300694	1					
ANR	1300701	AssignmentExpression	* msghdr = ( const struct msghdr * ) msghdr_c		1300694	2		=			
ANR	1300702	Identifier	msghdr		1300694	0					
ANR	1300703	CastExpression	( const struct msghdr * ) msghdr_c		1300694	1					
ANR	1300704	CastTarget	const struct msghdr *		1300694	0					
ANR	1300705	Identifier	msghdr_c		1300694	1					
ANR	1300706	IdentifierDeclStatement	size_t iovlen = msghdr -> msg_iovlen ;	1210:1:34565:34602	1300694	1	True				
ANR	1300707	IdentifierDecl	iovlen = msghdr -> msg_iovlen		1300694	0					
ANR	1300708	IdentifierDeclType	size_t		1300694	0					
ANR	1300709	Identifier	iovlen		1300694	1					
ANR	1300710	AssignmentExpression	iovlen = msghdr -> msg_iovlen		1300694	2		=			
ANR	1300711	Identifier	iovlen		1300694	0					
ANR	1300712	PtrMemberAccess	msghdr -> msg_iovlen		1300694	1					
ANR	1300713	Identifier	msghdr		1300694	0					
ANR	1300714	Identifier	msg_iovlen		1300694	1					
ANR	1300715	IdentifierDeclStatement	"ssize_t * * recvmsg_ret , bytes_left ;"	1211:1:34605:34647	1300694	2	True				
ANR	1300716	IdentifierDecl	* * recvmsg_ret		1300694	0					
ANR	1300717	IdentifierDeclType	ssize_t * *		1300694	0					
ANR	1300718	Identifier	recvmsg_ret		1300694	1					
ANR	1300719	IdentifierDecl	bytes_left		1300694	1					
ANR	1300720	IdentifierDeclType	ssize_t		1300694	0					
ANR	1300721	Identifier	bytes_left		1300694	1					
ANR	1300722	IdentifierDeclStatement	uint i ;	1213:1:34650:34659	1300694	3	True				
ANR	1300723	IdentifierDecl	i		1300694	0					
ANR	1300724	IdentifierDeclType	uint		1300694	0					
ANR	1300725	Identifier	i		1300694	1					
ANR	1300726	IfStatement	if ( iovlen > UINT_MAX )		1300694	4					
ANR	1300727	Condition	iovlen > UINT_MAX	1215:5:34667:34683	1300694	0	True				
ANR	1300728	RelationalExpression	iovlen > UINT_MAX		1300694	0		>			
ANR	1300729	Identifier	iovlen		1300694	0					
ANR	1300730	Identifier	UINT_MAX		1300694	1					
ANR	1300731	CompoundStatement		8:24:187:187	1300694	1					
ANR	1300732	ExpressionStatement	"do_to_zval_err ( ctx , ""unexpectedly large value for iov_len: %lu"" , ( unsigned long ) iovlen )"	1216:2:34690:34781	1300694	0	True				
ANR	1300733	CallExpression	"do_to_zval_err ( ctx , ""unexpectedly large value for iov_len: %lu"" , ( unsigned long ) iovlen )"		1300694	0					
ANR	1300734	Callee	do_to_zval_err		1300694	0					
ANR	1300735	Identifier	do_to_zval_err		1300694	0					
ANR	1300736	ArgumentList	ctx		1300694	1					
ANR	1300737	Argument	ctx		1300694	0					
ANR	1300738	Identifier	ctx		1300694	0					
ANR	1300739	Argument	"""unexpectedly large value for iov_len: %lu"""		1300694	1					
ANR	1300740	PrimaryExpression	"""unexpectedly large value for iov_len: %lu"""		1300694	0					
ANR	1300741	Argument	( unsigned long ) iovlen		1300694	2					
ANR	1300742	CastExpression	( unsigned long ) iovlen		1300694	0					
ANR	1300743	CastTarget	unsigned long		1300694	0					
ANR	1300744	Identifier	iovlen		1300694	1					
ANR	1300745	ExpressionStatement	"array_init_size ( zv , ( uint ) iovlen )"	1219:1:34787:34820	1300694	5	True				
ANR	1300746	CallExpression	"array_init_size ( zv , ( uint ) iovlen )"		1300694	0					
ANR	1300747	Callee	array_init_size		1300694	0					
ANR	1300748	Identifier	array_init_size		1300694	0					
ANR	1300749	ArgumentList	zv		1300694	1					
ANR	1300750	Argument	zv		1300694	0					
ANR	1300751	Identifier	zv		1300694	0					
ANR	1300752	Argument	( uint ) iovlen		1300694	1					
ANR	1300753	CastExpression	( uint ) iovlen		1300694	0					
ANR	1300754	CastTarget	uint		1300694	0					
ANR	1300755	Identifier	iovlen		1300694	1					
ANR	1300756	IfStatement	"if ( zend_hash_find ( & ctx -> params , KEY_RECVMSG_RET , sizeof ( KEY_RECVMSG_RET ) , ( void * * ) & recvmsg_ret ) == FAILURE )"		1300694	6					
ANR	1300757	Condition	"zend_hash_find ( & ctx -> params , KEY_RECVMSG_RET , sizeof ( KEY_RECVMSG_RET ) , ( void * * ) & recvmsg_ret ) == FAILURE"	1221:5:34828:34933	1300694	0	True				
ANR	1300758	EqualityExpression	"zend_hash_find ( & ctx -> params , KEY_RECVMSG_RET , sizeof ( KEY_RECVMSG_RET ) , ( void * * ) & recvmsg_ret ) == FAILURE"		1300694	0		==			
ANR	1300759	CallExpression	"zend_hash_find ( & ctx -> params , KEY_RECVMSG_RET , sizeof ( KEY_RECVMSG_RET ) , ( void * * ) & recvmsg_ret )"		1300694	0					
ANR	1300760	Callee	zend_hash_find		1300694	0					
ANR	1300761	Identifier	zend_hash_find		1300694	0					
ANR	1300762	ArgumentList	& ctx -> params		1300694	1					
ANR	1300763	Argument	& ctx -> params		1300694	0					
ANR	1300764	UnaryOperationExpression	& ctx -> params		1300694	0					
ANR	1300765	UnaryOperator	&		1300694	0					
ANR	1300766	PtrMemberAccess	ctx -> params		1300694	1					
ANR	1300767	Identifier	ctx		1300694	0					
ANR	1300768	Identifier	params		1300694	1					
ANR	1300769	Argument	KEY_RECVMSG_RET		1300694	1					
ANR	1300770	Identifier	KEY_RECVMSG_RET		1300694	0					
ANR	1300771	Argument	sizeof ( KEY_RECVMSG_RET )		1300694	2					
ANR	1300772	SizeofExpression	sizeof ( KEY_RECVMSG_RET )		1300694	0					
ANR	1300773	Sizeof	sizeof		1300694	0					
ANR	1300774	SizeofOperand	KEY_RECVMSG_RET		1300694	1					
ANR	1300775	Argument	( void * * ) & recvmsg_ret		1300694	3					
ANR	1300776	CastExpression	( void * * ) & recvmsg_ret		1300694	0					
ANR	1300777	CastTarget	void * *		1300694	0					
ANR	1300778	UnaryOperationExpression	& recvmsg_ret		1300694	1					
ANR	1300779	UnaryOperator	&		1300694	0					
ANR	1300780	Identifier	recvmsg_ret		1300694	1					
ANR	1300781	Identifier	FAILURE		1300694	1					
ANR	1300782	CompoundStatement		15:37:437:437	1300694	1					
ANR	1300783	ExpressionStatement	"do_to_zval_err ( ctx , ""recvmsg_ret not found in params. This is a bug"" )"	1223:2:34940:35009	1300694	0	True				
ANR	1300784	CallExpression	"do_to_zval_err ( ctx , ""recvmsg_ret not found in params. This is a bug"" )"		1300694	0					
ANR	1300785	Callee	do_to_zval_err		1300694	0					
ANR	1300786	Identifier	do_to_zval_err		1300694	0					
ANR	1300787	ArgumentList	ctx		1300694	1					
ANR	1300788	Argument	ctx		1300694	0					
ANR	1300789	Identifier	ctx		1300694	0					
ANR	1300790	Argument	"""recvmsg_ret not found in params. This is a bug"""		1300694	1					
ANR	1300791	PrimaryExpression	"""recvmsg_ret not found in params. This is a bug"""		1300694	0					
ANR	1300792	ReturnStatement	return ;	1224:2:35013:35019	1300694	1	True				
ANR	1300793	ExpressionStatement	bytes_left = * * recvmsg_ret	1226:1:35025:35051	1300694	7	True				
ANR	1300794	AssignmentExpression	bytes_left = * * recvmsg_ret		1300694	0		=			
ANR	1300795	Identifier	bytes_left		1300694	0					
ANR	1300796	UnaryOperationExpression	* * recvmsg_ret		1300694	1					
ANR	1300797	UnaryOperator	*		1300694	0					
ANR	1300798	UnaryOperationExpression	* recvmsg_ret		1300694	1					
ANR	1300799	UnaryOperator	*		1300694	0					
ANR	1300800	Identifier	recvmsg_ret		1300694	1					
ANR	1300801	ForStatement	for ( i = 0 ; bytes_left > 0 && i < ( uint ) iovlen ; i ++ )		1300694	8					
ANR	1300802	ForInit	i = 0 ;	1228:6:35060:35065	1300694	0	True				
ANR	1300803	AssignmentExpression	i = 0		1300694	0		=			
ANR	1300804	Identifier	i		1300694	0					
ANR	1300805	PrimaryExpression	0		1300694	1					
ANR	1300806	Condition	bytes_left > 0 && i < ( uint ) iovlen	1228:13:35067:35100	1300694	1	True				
ANR	1300807	AndExpression	bytes_left > 0 && i < ( uint ) iovlen		1300694	0		&&			
ANR	1300808	RelationalExpression	bytes_left > 0		1300694	0		>			
ANR	1300809	Identifier	bytes_left		1300694	0					
ANR	1300810	PrimaryExpression	0		1300694	1					
ANR	1300811	RelationalExpression	i < ( uint ) iovlen		1300694	1		<			
ANR	1300812	Identifier	i		1300694	0					
ANR	1300813	CastExpression	( uint ) iovlen		1300694	1					
ANR	1300814	CastTarget	uint		1300694	0					
ANR	1300815	Identifier	iovlen		1300694	1					
ANR	1300816	PostIncDecOperationExpression	i ++	1228:49:35103:35105	1300694	2	True				
ANR	1300817	Identifier	i		1300694	0					
ANR	1300818	IncDec	++		1300694	1					
ANR	1300819	CompoundStatement		24:2:696:731	1300694	3					
ANR	1300820	IdentifierDeclStatement	zval * elem ;	1229:2:35112:35122	1300694	0	True				
ANR	1300821	IdentifierDecl	* elem		1300694	0					
ANR	1300822	IdentifierDeclType	zval *		1300694	0					
ANR	1300823	Identifier	elem		1300694	1					
ANR	1300824	IdentifierDeclStatement	"size_t len = MIN ( msghdr -> msg_iov [ i ] . iov_len , ( size_t ) bytes_left ) ;"	1230:2:35126:35191	1300694	1	True				
ANR	1300825	IdentifierDecl	"len = MIN ( msghdr -> msg_iov [ i ] . iov_len , ( size_t ) bytes_left )"		1300694	0					
ANR	1300826	IdentifierDeclType	size_t		1300694	0					
ANR	1300827	Identifier	len		1300694	1					
ANR	1300828	AssignmentExpression	"len = MIN ( msghdr -> msg_iov [ i ] . iov_len , ( size_t ) bytes_left )"		1300694	2		=			
ANR	1300829	Identifier	len		1300694	0					
ANR	1300830	CallExpression	"MIN ( msghdr -> msg_iov [ i ] . iov_len , ( size_t ) bytes_left )"		1300694	1					
ANR	1300831	Callee	MIN		1300694	0					
ANR	1300832	Identifier	MIN		1300694	0					
ANR	1300833	ArgumentList	msghdr -> msg_iov [ i ] . iov_len		1300694	1					
ANR	1300834	Argument	msghdr -> msg_iov [ i ] . iov_len		1300694	0					
ANR	1300835	MemberAccess	msghdr -> msg_iov [ i ] . iov_len		1300694	0					
ANR	1300836	ArrayIndexing	msghdr -> msg_iov [ i ]		1300694	0					
ANR	1300837	PtrMemberAccess	msghdr -> msg_iov		1300694	0					
ANR	1300838	Identifier	msghdr		1300694	0					
ANR	1300839	Identifier	msg_iov		1300694	1					
ANR	1300840	Identifier	i		1300694	1					
ANR	1300841	Identifier	iov_len		1300694	1					
ANR	1300842	Argument	( size_t ) bytes_left		1300694	1					
ANR	1300843	CastExpression	( size_t ) bytes_left		1300694	0					
ANR	1300844	CastTarget	size_t		1300694	0					
ANR	1300845	Identifier	bytes_left		1300694	1					
ANR	1300846	IdentifierDeclStatement	"char * buf = safe_emalloc ( 1 , len , 1 ) ;"	1231:2:35195:35230	1300694	2	True				
ANR	1300847	IdentifierDecl	"* buf = safe_emalloc ( 1 , len , 1 )"		1300694	0					
ANR	1300848	IdentifierDeclType	char *		1300694	0					
ANR	1300849	Identifier	buf		1300694	1					
ANR	1300850	AssignmentExpression	"* buf = safe_emalloc ( 1 , len , 1 )"		1300694	2		=			
ANR	1300851	Identifier	buf		1300694	0					
ANR	1300852	CallExpression	"safe_emalloc ( 1 , len , 1 )"		1300694	1					
ANR	1300853	Callee	safe_emalloc		1300694	0					
ANR	1300854	Identifier	safe_emalloc		1300694	0					
ANR	1300855	ArgumentList	1		1300694	1					
ANR	1300856	Argument	1		1300694	0					
ANR	1300857	PrimaryExpression	1		1300694	0					
ANR	1300858	Argument	len		1300694	1					
ANR	1300859	Identifier	len		1300694	0					
ANR	1300860	Argument	1		1300694	2					
ANR	1300861	PrimaryExpression	1		1300694	0					
ANR	1300862	ExpressionStatement	MAKE_STD_ZVAL ( elem )	1233:2:35235:35254	1300694	3	True				
ANR	1300863	CallExpression	MAKE_STD_ZVAL ( elem )		1300694	0					
ANR	1300864	Callee	MAKE_STD_ZVAL		1300694	0					
ANR	1300865	Identifier	MAKE_STD_ZVAL		1300694	0					
ANR	1300866	ArgumentList	elem		1300694	1					
ANR	1300867	Argument	elem		1300694	0					
ANR	1300868	Identifier	elem		1300694	0					
ANR	1300869	ExpressionStatement	"memcpy ( buf , msghdr -> msg_iov [ i ] . iov_base , len )"	1234:2:35258:35303	1300694	4	True				
ANR	1300870	CallExpression	"memcpy ( buf , msghdr -> msg_iov [ i ] . iov_base , len )"		1300694	0					
ANR	1300871	Callee	memcpy		1300694	0					
ANR	1300872	Identifier	memcpy		1300694	0					
ANR	1300873	ArgumentList	buf		1300694	1					
ANR	1300874	Argument	buf		1300694	0					
ANR	1300875	Identifier	buf		1300694	0					
ANR	1300876	Argument	msghdr -> msg_iov [ i ] . iov_base		1300694	1					
ANR	1300877	MemberAccess	msghdr -> msg_iov [ i ] . iov_base		1300694	0					
ANR	1300878	ArrayIndexing	msghdr -> msg_iov [ i ]		1300694	0					
ANR	1300879	PtrMemberAccess	msghdr -> msg_iov		1300694	0					
ANR	1300880	Identifier	msghdr		1300694	0					
ANR	1300881	Identifier	msg_iov		1300694	1					
ANR	1300882	Identifier	i		1300694	1					
ANR	1300883	Identifier	iov_base		1300694	1					
ANR	1300884	Argument	len		1300694	2					
ANR	1300885	Identifier	len		1300694	0					
ANR	1300886	ExpressionStatement	buf [ len ] = '\\0'	1235:2:35307:35322	1300694	5	True				
ANR	1300887	AssignmentExpression	buf [ len ] = '\\0'		1300694	0		=			
ANR	1300888	ArrayIndexing	buf [ len ]		1300694	0					
ANR	1300889	Identifier	buf		1300694	0					
ANR	1300890	Identifier	len		1300694	1					
ANR	1300891	PrimaryExpression	'\\0'		1300694	1					
ANR	1300892	ExpressionStatement	"ZVAL_STRINGL ( elem , buf , len , 0 )"	1237:2:35327:35358	1300694	6	True				
ANR	1300893	CallExpression	"ZVAL_STRINGL ( elem , buf , len , 0 )"		1300694	0					
ANR	1300894	Callee	ZVAL_STRINGL		1300694	0					
ANR	1300895	Identifier	ZVAL_STRINGL		1300694	0					
ANR	1300896	ArgumentList	elem		1300694	1					
ANR	1300897	Argument	elem		1300694	0					
ANR	1300898	Identifier	elem		1300694	0					
ANR	1300899	Argument	buf		1300694	1					
ANR	1300900	Identifier	buf		1300694	0					
ANR	1300901	Argument	len		1300694	2					
ANR	1300902	Identifier	len		1300694	0					
ANR	1300903	Argument	0		1300694	3					
ANR	1300904	PrimaryExpression	0		1300694	0					
ANR	1300905	ExpressionStatement	"add_next_index_zval ( zv , elem )"	1238:2:35362:35391	1300694	7	True				
ANR	1300906	CallExpression	"add_next_index_zval ( zv , elem )"		1300694	0					
ANR	1300907	Callee	add_next_index_zval		1300694	0					
ANR	1300908	Identifier	add_next_index_zval		1300694	0					
ANR	1300909	ArgumentList	zv		1300694	1					
ANR	1300910	Argument	zv		1300694	0					
ANR	1300911	Identifier	zv		1300694	0					
ANR	1300912	Argument	elem		1300694	1					
ANR	1300913	Identifier	elem		1300694	0					
ANR	1300914	ExpressionStatement	bytes_left -= len	1239:2:35395:35412	1300694	8	True				
ANR	1300915	AssignmentExpression	bytes_left -= len		1300694	0		-=			
ANR	1300916	Identifier	bytes_left		1300694	0					
ANR	1300917	Identifier	len		1300694	1					
ANR	1300918	ReturnType	static void		1300694	1					
ANR	1300919	Identifier	to_zval_read_iov		1300694	2					
ANR	1300920	ParameterList	"const char * msghdr_c , zval * zv , res_context * ctx"		1300694	3					
ANR	1300921	Parameter	const char * msghdr_c	1207:29:34448:34467	1300694	0	True				
ANR	1300922	ParameterType	const char *		1300694	0					
ANR	1300923	Identifier	msghdr_c		1300694	1					
ANR	1300924	Parameter	zval * zv	1207:51:34470:34477	1300694	1	True				
ANR	1300925	ParameterType	zval *		1300694	0					
ANR	1300926	Identifier	zv		1300694	1					
ANR	1300927	Parameter	res_context * ctx	1207:61:34480:34495	1300694	2	True				
ANR	1300928	ParameterType	res_context *		1300694	0					
ANR	1300929	Identifier	ctx		1300694	1					
ANR	1300930	CFGEntryNode	ENTRY		1300694		True				
ANR	1300931	CFGExitNode	EXIT		1300694		True				
ANR	1300932	Symbol	msghdr_c		1300694						
ANR	1300933	Symbol	iovlen		1300694						
ANR	1300934	Symbol	msghdr -> msg_iovlen		1300694						
ANR	1300935	Symbol	* * recvmsg_ret		1300694						
ANR	1300936	Symbol	UINT_MAX		1300694						
ANR	1300937	Symbol	msghdr		1300694						
ANR	1300938	Symbol	msghdr -> msg_iov [ i ] . iov_len		1300694						
ANR	1300939	Symbol	zend_hash_find		1300694						
ANR	1300940	Symbol	recvmsg_ret		1300694						
ANR	1300941	Symbol	* msghdr -> msg_iov		1300694						
ANR	1300942	Symbol	& recvmsg_ret		1300694						
ANR	1300943	Symbol	len		1300694						
ANR	1300944	Symbol	msghdr -> msg_iov		1300694						
ANR	1300945	Symbol	* * msghdr		1300694						
ANR	1300946	Symbol	elem		1300694						
ANR	1300947	Symbol	* buf		1300694						
ANR	1300948	Symbol	* recvmsg_ret		1300694						
ANR	1300949	Symbol	bytes_left		1300694						
ANR	1300950	Symbol	ctx		1300694						
ANR	1300951	Symbol	KEY_RECVMSG_RET		1300694						
ANR	1300952	Symbol	i		1300694						
ANR	1300953	Symbol	msghdr -> msg_iov [ i ] . iov_base		1300694						
ANR	1300954	Symbol	FAILURE		1300694						
ANR	1300955	Symbol	buf		1300694						
ANR	1300956	Symbol	* i		1300694						
ANR	1300957	Symbol	MIN		1300694						
ANR	1300958	Symbol	* msghdr		1300694						
ANR	1300959	Symbol	& ctx -> params		1300694						
ANR	1300960	Symbol	zv		1300694						
ANR	1300961	Symbol	safe_emalloc		1300694						
ANR	1300962	Symbol	* len		1300694						
ANR	1300963	Function	to_zval_read_msghdr	1242:0:35419:35948							
ANR	1300964	FunctionDef	"to_zval_read_msghdr (const char * msghdr_c , zval * zv , res_context * ctx)"		1300963	0					
ANR	1300965	CompoundStatement		1243:0:35494:35948	1300963	0					
ANR	1300966	Statement	static	1244:1:35497:35502	1300963	0	True				
ANR	1300967	Statement	const	1244:8:35504:35508	1300963	1	True				
ANR	1300968	Statement	field_descriptor	1244:14:35510:35525	1300963	2	True				
ANR	1300969	Statement	descriptors	1244:31:35527:35537	1300963	3	True				
ANR	1300970	Statement	[	1244:42:35538:35538	1300963	4	True				
ANR	1300971	Statement	]	1244:43:35539:35539	1300963	5	True				
ANR	1300972	Statement	=	1244:45:35541:35541	1300963	6	True				
ANR	1300973	CompoundStatement		2:47:48:48	1300963	7					
ANR	1300974	CompoundStatement		3:3:53:53	1300963	0					
ANR	1300975	Statement	"""name"""	1245:4:35549:35554	1300963	0	True				
ANR	1300976	Statement	","	1245:10:35555:35555	1300963	1	True				
ANR	1300977	Statement	sizeof	1245:12:35557:35562	1300963	2	True				
ANR	1300978	Statement	(	1245:18:35563:35563	1300963	3	True				
ANR	1300979	Statement	"""name"""	1245:19:35564:35569	1300963	4	True				
ANR	1300980	Statement	)	1245:25:35570:35570	1300963	5	True				
ANR	1300981	Statement	","	1245:26:35571:35571	1300963	6	True				
ANR	1300982	Statement	0	1245:28:35573:35573	1300963	7	True				
ANR	1300983	Statement	","	1245:29:35574:35574	1300963	8	True				
ANR	1300984	Statement	offsetof	1245:31:35576:35583	1300963	9	True				
ANR	1300985	Statement	(	1245:39:35584:35584	1300963	10	True				
ANR	1300986	Statement	struct	1245:40:35585:35590	1300963	11	True				
ANR	1300987	Statement	msghdr	1245:47:35592:35597	1300963	12	True				
ANR	1300988	Statement	","	1245:53:35598:35598	1300963	13	True				
ANR	1300989	Statement	msg_name	1245:55:35600:35607	1300963	14	True				
ANR	1300990	Statement	)	1245:63:35608:35608	1300963	15	True				
ANR	1300991	Statement	","	1245:64:35609:35609	1300963	16	True				
ANR	1300992	Statement	0	1245:66:35611:35611	1300963	17	True				
ANR	1300993	Statement	","	1245:67:35612:35612	1300963	18	True				
ANR	1300994	Statement	to_zval_read_name	1245:69:35614:35630	1300963	19	True				
ANR	1300995	Statement	","	1245:87:35632:35632	1300963	1	True				
ANR	1300996	CompoundStatement		4:3:142:142	1300963	2					
ANR	1300997	Statement	"""control"""	1246:4:35638:35646	1300963	0	True				
ANR	1300998	Statement	","	1246:13:35647:35647	1300963	1	True				
ANR	1300999	Statement	sizeof	1246:15:35649:35654	1300963	2	True				
ANR	1301000	Statement	(	1246:21:35655:35655	1300963	3	True				
ANR	1301001	Statement	"""control"""	1246:22:35656:35664	1300963	4	True				
ANR	1301002	Statement	)	1246:31:35665:35665	1300963	5	True				
ANR	1301003	Statement	","	1246:32:35666:35666	1300963	6	True				
ANR	1301004	Statement	0	1246:34:35668:35668	1300963	7	True				
ANR	1301005	Statement	","	1246:35:35669:35669	1300963	8	True				
ANR	1301006	Statement	0	1246:37:35671:35671	1300963	9	True				
ANR	1301007	Statement	","	1246:38:35672:35672	1300963	10	True				
ANR	1301008	Statement	0	1246:40:35674:35674	1300963	11	True				
ANR	1301009	Statement	","	1246:41:35675:35675	1300963	12	True				
ANR	1301010	Statement	to_zval_read_control_array	1246:43:35677:35702	1300963	13	True				
ANR	1301011	Statement	","	1246:70:35704:35704	1300963	3	True				
ANR	1301012	CompoundStatement		5:3:214:214	1300963	4					
ANR	1301013	Statement	"""iov"""	1247:4:35710:35714	1300963	0	True				
ANR	1301014	Statement	","	1247:9:35715:35715	1300963	1	True				
ANR	1301015	Statement	sizeof	1247:11:35717:35722	1300963	2	True				
ANR	1301016	Statement	(	1247:17:35723:35723	1300963	3	True				
ANR	1301017	Statement	"""iov"""	1247:18:35724:35728	1300963	4	True				
ANR	1301018	Statement	)	1247:23:35729:35729	1300963	5	True				
ANR	1301019	Statement	","	1247:24:35730:35730	1300963	6	True				
ANR	1301020	Statement	0	1247:26:35732:35732	1300963	7	True				
ANR	1301021	Statement	","	1247:27:35733:35733	1300963	8	True				
ANR	1301022	Statement	0	1247:29:35735:35735	1300963	9	True				
ANR	1301023	Statement	","	1247:30:35736:35736	1300963	10	True				
ANR	1301024	Statement	0	1247:32:35738:35738	1300963	11	True				
ANR	1301025	Statement	","	1247:33:35739:35739	1300963	12	True				
ANR	1301026	Statement	to_zval_read_iov	1247:35:35741:35756	1300963	13	True				
ANR	1301027	Statement	","	1247:52:35758:35758	1300963	5	True				
ANR	1301028	CompoundStatement		6:3:268:268	1300963	6					
ANR	1301029	Statement	"""flags"""	1248:4:35764:35770	1300963	0	True				
ANR	1301030	Statement	","	1248:11:35771:35771	1300963	1	True				
ANR	1301031	Statement	sizeof	1248:13:35773:35778	1300963	2	True				
ANR	1301032	Statement	(	1248:19:35779:35779	1300963	3	True				
ANR	1301033	Statement	"""flags"""	1248:20:35780:35786	1300963	4	True				
ANR	1301034	Statement	)	1248:27:35787:35787	1300963	5	True				
ANR	1301035	Statement	","	1248:28:35788:35788	1300963	6	True				
ANR	1301036	Statement	0	1248:30:35790:35790	1300963	7	True				
ANR	1301037	Statement	","	1248:31:35791:35791	1300963	8	True				
ANR	1301038	Statement	offsetof	1248:33:35793:35800	1300963	9	True				
ANR	1301039	Statement	(	1248:41:35801:35801	1300963	10	True				
ANR	1301040	Statement	struct	1248:42:35802:35807	1300963	11	True				
ANR	1301041	Statement	msghdr	1248:49:35809:35814	1300963	12	True				
ANR	1301042	Statement	","	1248:55:35815:35815	1300963	13	True				
ANR	1301043	Statement	msg_flags	1248:57:35817:35825	1300963	14	True				
ANR	1301044	Statement	)	1248:66:35826:35826	1300963	15	True				
ANR	1301045	Statement	","	1248:67:35827:35827	1300963	16	True				
ANR	1301046	Statement	0	1248:69:35829:35829	1300963	17	True				
ANR	1301047	Statement	","	1248:70:35830:35830	1300963	18	True				
ANR	1301048	Statement	to_zval_read_int	1248:72:35832:35847	1300963	19	True				
ANR	1301049	Statement	","	1248:89:35849:35849	1300963	7	True				
ANR	1301050	CompoundStatement		7:3:359:359	1300963	8					
ANR	1301051	Statement	0	1249:4:35855:35855	1300963	0	True				
ANR	1301052	ExpressionStatement		1250:2:35860:35860	1300963	8	True				
ANR	1301053	ExpressionStatement	"array_init_size ( zv , 4 )"	1252:1:35864:35886	1300963	9	True				
ANR	1301054	CallExpression	"array_init_size ( zv , 4 )"		1300963	0					
ANR	1301055	Callee	array_init_size		1300963	0					
ANR	1301056	Identifier	array_init_size		1300963	0					
ANR	1301057	ArgumentList	zv		1300963	1					
ANR	1301058	Argument	zv		1300963	0					
ANR	1301059	Identifier	zv		1300963	0					
ANR	1301060	Argument	4		1300963	1					
ANR	1301061	PrimaryExpression	4		1300963	0					
ANR	1301062	ExpressionStatement	"to_zval_read_aggregation ( msghdr_c , zv , descriptors , ctx )"	1254:1:35890:35946	1300963	10	True				
ANR	1301063	CallExpression	"to_zval_read_aggregation ( msghdr_c , zv , descriptors , ctx )"		1300963	0					
ANR	1301064	Callee	to_zval_read_aggregation		1300963	0					
ANR	1301065	Identifier	to_zval_read_aggregation		1300963	0					
ANR	1301066	ArgumentList	msghdr_c		1300963	1					
ANR	1301067	Argument	msghdr_c		1300963	0					
ANR	1301068	Identifier	msghdr_c		1300963	0					
ANR	1301069	Argument	zv		1300963	1					
ANR	1301070	Identifier	zv		1300963	0					
ANR	1301071	Argument	descriptors		1300963	2					
ANR	1301072	Identifier	descriptors		1300963	0					
ANR	1301073	Argument	ctx		1300963	3					
ANR	1301074	Identifier	ctx		1300963	0					
ANR	1301075	ReturnType	void		1300963	1					
ANR	1301076	Identifier	to_zval_read_msghdr		1300963	2					
ANR	1301077	ParameterList	"const char * msghdr_c , zval * zv , res_context * ctx"		1300963	3					
ANR	1301078	Parameter	const char * msghdr_c	1242:25:35444:35463	1300963	0	True				
ANR	1301079	ParameterType	const char *		1300963	0					
ANR	1301080	Identifier	msghdr_c		1300963	1					
ANR	1301081	Parameter	zval * zv	1242:47:35466:35473	1300963	1	True				
ANR	1301082	ParameterType	zval *		1300963	0					
ANR	1301083	Identifier	zv		1300963	1					
ANR	1301084	Parameter	res_context * ctx	1242:57:35476:35491	1300963	2	True				
ANR	1301085	ParameterType	res_context *		1300963	0					
ANR	1301086	Identifier	ctx		1300963	1					
ANR	1301087	CFGEntryNode	ENTRY		1300963		True				
ANR	1301088	CFGExitNode	EXIT		1300963		True				
ANR	1301089	Symbol	msghdr_c		1300963						
ANR	1301090	Symbol	descriptors		1300963						
ANR	1301091	Symbol	ctx		1300963						
ANR	1301092	Symbol	zv		1300963						
ANR	1301093	Function	from_zval_write_ifindex	1258:0:35982:37691							
ANR	1301094	FunctionDef	"from_zval_write_ifindex (const zval * zv , char * uinteger , ser_context * ctx)"		1301093	0					
ANR	1301095	CompoundStatement		1259:0:36068:37691	1301093	0					
ANR	1301096	IdentifierDeclStatement	unsigned ret = 0 ;	1260:1:36071:36087	1301093	0	True				
ANR	1301097	IdentifierDecl	ret = 0		1301093	0					
ANR	1301098	IdentifierDeclType	unsigned		1301093	0					
ANR	1301099	Identifier	ret		1301093	1					
ANR	1301100	AssignmentExpression	ret = 0		1301093	2		=			
ANR	1301101	Identifier	ret		1301093	0					
ANR	1301102	PrimaryExpression	0		1301093	1					
ANR	1301103	IdentifierDeclStatement	zval lzval = zval_used_for_init ;	1261:1:36090:36122	1301093	1	True				
ANR	1301104	IdentifierDecl	lzval = zval_used_for_init		1301093	0					
ANR	1301105	IdentifierDeclType	zval		1301093	0					
ANR	1301106	Identifier	lzval		1301093	1					
ANR	1301107	AssignmentExpression	lzval = zval_used_for_init		1301093	2		=			
ANR	1301108	Identifier	zval_used_for_init		1301093	0					
ANR	1301109	Identifier	zval_used_for_init		1301093	1					
ANR	1301110	IfStatement	if ( Z_TYPE_P ( zv ) == IS_LONG )		1301093	2					
ANR	1301111	Condition	Z_TYPE_P ( zv ) == IS_LONG	1263:5:36130:36152	1301093	0	True				
ANR	1301112	EqualityExpression	Z_TYPE_P ( zv ) == IS_LONG		1301093	0		==			
ANR	1301113	CallExpression	Z_TYPE_P ( zv )		1301093	0					
ANR	1301114	Callee	Z_TYPE_P		1301093	0					
ANR	1301115	Identifier	Z_TYPE_P		1301093	0					
ANR	1301116	ArgumentList	zv		1301093	1					
ANR	1301117	Argument	zv		1301093	0					
ANR	1301118	Identifier	zv		1301093	0					
ANR	1301119	Identifier	IS_LONG		1301093	1					
ANR	1301120	CompoundStatement		5:30:86:86	1301093	1					
ANR	1301121	IfStatement	if ( Z_LVAL_P ( zv ) < 0 || Z_LVAL_P ( zv ) > UINT_MAX )		1301093	0					
ANR	1301122	Condition	Z_LVAL_P ( zv ) < 0 || Z_LVAL_P ( zv ) > UINT_MAX	1264:6:36163:36205	1301093	0	True				
ANR	1301123	OrExpression	Z_LVAL_P ( zv ) < 0 || Z_LVAL_P ( zv ) > UINT_MAX		1301093	0		||			
ANR	1301124	RelationalExpression	Z_LVAL_P ( zv ) < 0		1301093	0		<			
ANR	1301125	CallExpression	Z_LVAL_P ( zv )		1301093	0					
ANR	1301126	Callee	Z_LVAL_P		1301093	0					
ANR	1301127	Identifier	Z_LVAL_P		1301093	0					
ANR	1301128	ArgumentList	zv		1301093	1					
ANR	1301129	Argument	zv		1301093	0					
ANR	1301130	Identifier	zv		1301093	0					
ANR	1301131	PrimaryExpression	0		1301093	1					
ANR	1301132	RelationalExpression	Z_LVAL_P ( zv ) > UINT_MAX		1301093	1		>			
ANR	1301133	CallExpression	Z_LVAL_P ( zv )		1301093	0					
ANR	1301134	Callee	Z_LVAL_P		1301093	0					
ANR	1301135	Identifier	Z_LVAL_P		1301093	0					
ANR	1301136	ArgumentList	zv		1301093	1					
ANR	1301137	Argument	zv		1301093	0					
ANR	1301138	Identifier	zv		1301093	0					
ANR	1301139	Identifier	UINT_MAX		1301093	1					
ANR	1301140	CompoundStatement		6:51:139:139	1301093	1					
ANR	1301141	Statement	do_from_zval_err	1265:3:36251:36266	1301093	0	True				
ANR	1301142	Statement	(	1265:19:36267:36267	1301093	1	True				
ANR	1301143	Statement	ctx	1265:20:36268:36270	1301093	2	True				
ANR	1301144	Statement	","	1265:23:36271:36271	1301093	3	True				
ANR	1301145	Statement	"""the interface index cannot be negative or """	1265:25:36273:36316	1301093	4	True				
ANR	1301146	Statement	"""larger than %u; given %ld"""	1266:5:36323:36349	1301093	5	True				
ANR	1301147	Statement	","	1266:32:36350:36350	1301093	6	True				
ANR	1301148	Statement	UINT_MAX	1266:34:36352:36359	1301093	7	True				
ANR	1301149	Statement	","	1266:42:36360:36360	1301093	8	True				
ANR	1301150	Statement	Z_LVAL_P	1266:44:36362:36369	1301093	9	True				
ANR	1301151	Statement	(	1266:52:36370:36370	1301093	10	True				
ANR	1301152	Statement	zv	1266:53:36371:36372	1301093	11	True				
ANR	1301153	Statement	)	1266:55:36373:36373	1301093	12	True				
ANR	1301154	Statement	)	1266:56:36374:36374	1301093	13	True				
ANR	1301155	ExpressionStatement		1266:57:36375:36375	1301093	14	True				
ANR	1301156	ElseStatement	else		1301093	0					
ANR	1301157	CompoundStatement		9:9:317:317	1301093	0					
ANR	1301158	ExpressionStatement	ret = ( unsigned ) Z_LVAL_P ( zv )	1268:3:36391:36419	1301093	0	True				
ANR	1301159	AssignmentExpression	ret = ( unsigned ) Z_LVAL_P ( zv )		1301093	0		=			
ANR	1301160	Identifier	ret		1301093	0					
ANR	1301161	CastExpression	( unsigned ) Z_LVAL_P ( zv )		1301093	1					
ANR	1301162	CastTarget	unsigned		1301093	0					
ANR	1301163	CallExpression	Z_LVAL_P ( zv )		1301093	1					
ANR	1301164	Callee	Z_LVAL_P		1301093	0					
ANR	1301165	Identifier	Z_LVAL_P		1301093	0					
ANR	1301166	ArgumentList	zv		1301093	1					
ANR	1301167	Argument	zv		1301093	0					
ANR	1301168	Identifier	zv		1301093	0					
ANR	1301169	ElseStatement	else		1301093	0					
ANR	1301170	CompoundStatement		12:8:364:364	1301093	0					
ANR	1301171	IfStatement	if ( Z_TYPE_P ( zv ) != IS_STRING )		1301093	0					
ANR	1301172	Condition	Z_TYPE_P ( zv ) != IS_STRING	1271:6:36441:36465	1301093	0	True				
ANR	1301173	EqualityExpression	Z_TYPE_P ( zv ) != IS_STRING		1301093	0		!=			
ANR	1301174	CallExpression	Z_TYPE_P ( zv )		1301093	0					
ANR	1301175	Callee	Z_TYPE_P		1301093	0					
ANR	1301176	Identifier	Z_TYPE_P		1301093	0					
ANR	1301177	ArgumentList	zv		1301093	1					
ANR	1301178	Argument	zv		1301093	0					
ANR	1301179	Identifier	zv		1301093	0					
ANR	1301180	Identifier	IS_STRING		1301093	1					
ANR	1301181	CompoundStatement		13:33:399:399	1301093	1					
ANR	1301182	ExpressionStatement	"ZVAL_COPY_VALUE ( & lzval , zv )"	1272:3:36473:36500	1301093	0	True				
ANR	1301183	CallExpression	"ZVAL_COPY_VALUE ( & lzval , zv )"		1301093	0					
ANR	1301184	Callee	ZVAL_COPY_VALUE		1301093	0					
ANR	1301185	Identifier	ZVAL_COPY_VALUE		1301093	0					
ANR	1301186	ArgumentList	& lzval		1301093	1					
ANR	1301187	Argument	& lzval		1301093	0					
ANR	1301188	UnaryOperationExpression	& lzval		1301093	0					
ANR	1301189	UnaryOperator	&		1301093	0					
ANR	1301190	Identifier	lzval		1301093	1					
ANR	1301191	Argument	zv		1301093	1					
ANR	1301192	Identifier	zv		1301093	0					
ANR	1301193	ExpressionStatement	zval_copy_ctor ( & lzval )	1273:3:36505:36527	1301093	1	True				
ANR	1301194	CallExpression	zval_copy_ctor ( & lzval )		1301093	0					
ANR	1301195	Callee	zval_copy_ctor		1301093	0					
ANR	1301196	Identifier	zval_copy_ctor		1301093	0					
ANR	1301197	ArgumentList	& lzval		1301093	1					
ANR	1301198	Argument	& lzval		1301093	0					
ANR	1301199	UnaryOperationExpression	& lzval		1301093	0					
ANR	1301200	UnaryOperator	&		1301093	0					
ANR	1301201	Identifier	lzval		1301093	1					
ANR	1301202	ExpressionStatement	convert_to_string ( & lzval )	1274:3:36532:36557	1301093	2	True				
ANR	1301203	CallExpression	convert_to_string ( & lzval )		1301093	0					
ANR	1301204	Callee	convert_to_string		1301093	0					
ANR	1301205	Identifier	convert_to_string		1301093	0					
ANR	1301206	ArgumentList	& lzval		1301093	1					
ANR	1301207	Argument	& lzval		1301093	0					
ANR	1301208	UnaryOperationExpression	& lzval		1301093	0					
ANR	1301209	UnaryOperator	&		1301093	0					
ANR	1301210	Identifier	lzval		1301093	1					
ANR	1301211	ExpressionStatement	zv = & lzval	1275:3:36562:36573	1301093	3	True				
ANR	1301212	AssignmentExpression	zv = & lzval		1301093	0		=			
ANR	1301213	Identifier	zv		1301093	0					
ANR	1301214	UnaryOperationExpression	& lzval		1301093	1					
ANR	1301215	UnaryOperator	&		1301093	0					
ANR	1301216	Identifier	lzval		1301093	1					
ANR	1301217	ExpressionStatement	ret = if_nametoindex ( Z_STRVAL_P ( zv ) )	1279:2:36606:36642	1301093	1	True				
ANR	1301218	AssignmentExpression	ret = if_nametoindex ( Z_STRVAL_P ( zv ) )		1301093	0		=			
ANR	1301219	Identifier	ret		1301093	0					
ANR	1301220	CallExpression	if_nametoindex ( Z_STRVAL_P ( zv ) )		1301093	1					
ANR	1301221	Callee	if_nametoindex		1301093	0					
ANR	1301222	Identifier	if_nametoindex		1301093	0					
ANR	1301223	ArgumentList	Z_STRVAL_P ( zv )		1301093	1					
ANR	1301224	Argument	Z_STRVAL_P ( zv )		1301093	0					
ANR	1301225	CallExpression	Z_STRVAL_P ( zv )		1301093	0					
ANR	1301226	Callee	Z_STRVAL_P		1301093	0					
ANR	1301227	Identifier	Z_STRVAL_P		1301093	0					
ANR	1301228	ArgumentList	zv		1301093	1					
ANR	1301229	Argument	zv		1301093	0					
ANR	1301230	Identifier	zv		1301093	0					
ANR	1301231	IfStatement	if ( ret == 0 )		1301093	2					
ANR	1301232	Condition	ret == 0	1280:6:36650:36657	1301093	0	True				
ANR	1301233	EqualityExpression	ret == 0		1301093	0		==			
ANR	1301234	Identifier	ret		1301093	0					
ANR	1301235	PrimaryExpression	0		1301093	1					
ANR	1301236	CompoundStatement		22:16:591:591	1301093	1					
ANR	1301237	Statement	do_from_zval_err	1281:3:36665:36680	1301093	0	True				
ANR	1301238	Statement	(	1281:19:36681:36681	1301093	1	True				
ANR	1301239	Statement	ctx	1281:20:36682:36684	1301093	2	True				
ANR	1301240	Statement	","	1281:23:36685:36685	1301093	3	True				
ANR	1301241	Statement	"""no interface with name \\""%s\\"" could be """	1281:25:36687:36727	1301093	4	True				
ANR	1301242	Statement	"""found"""	1282:5:36734:36740	1301093	5	True				
ANR	1301243	Statement	","	1282:12:36741:36741	1301093	6	True				
ANR	1301244	Statement	Z_STRVAL_P	1282:14:36743:36752	1301093	7	True				
ANR	1301245	Statement	(	1282:24:36753:36753	1301093	8	True				
ANR	1301246	Statement	zv	1282:25:36754:36755	1301093	9	True				
ANR	1301247	Statement	)	1282:27:36756:36756	1301093	10	True				
ANR	1301248	Statement	)	1282:28:36757:36757	1301093	11	True				
ANR	1301249	ExpressionStatement		1282:29:36758:36758	1301093	12	True				
ANR	1301250	IfStatement	if ( ! ctx -> err . has_error )		1301093	3					
ANR	1301251	Condition	! ctx -> err . has_error	1311:5:37605:37623	1301093	0	True				
ANR	1301252	UnaryOperationExpression	! ctx -> err . has_error		1301093	0					
ANR	1301253	UnaryOperator	!		1301093	0					
ANR	1301254	MemberAccess	ctx -> err . has_error		1301093	1					
ANR	1301255	PtrMemberAccess	ctx -> err		1301093	0					
ANR	1301256	Identifier	ctx		1301093	0					
ANR	1301257	Identifier	err		1301093	1					
ANR	1301258	Identifier	has_error		1301093	1					
ANR	1301259	CompoundStatement		53:26:1557:1557	1301093	1					
ANR	1301260	ExpressionStatement	"memcpy ( uinteger , & ret , sizeof ( ret ) )"	1312:2:37630:37665	1301093	0	True				
ANR	1301261	CallExpression	"memcpy ( uinteger , & ret , sizeof ( ret ) )"		1301093	0					
ANR	1301262	Callee	memcpy		1301093	0					
ANR	1301263	Identifier	memcpy		1301093	0					
ANR	1301264	ArgumentList	uinteger		1301093	1					
ANR	1301265	Argument	uinteger		1301093	0					
ANR	1301266	Identifier	uinteger		1301093	0					
ANR	1301267	Argument	& ret		1301093	1					
ANR	1301268	UnaryOperationExpression	& ret		1301093	0					
ANR	1301269	UnaryOperator	&		1301093	0					
ANR	1301270	Identifier	ret		1301093	1					
ANR	1301271	Argument	sizeof ( ret )		1301093	2					
ANR	1301272	SizeofExpression	sizeof ( ret )		1301093	0					
ANR	1301273	Sizeof	sizeof		1301093	0					
ANR	1301274	SizeofOperand	ret		1301093	1					
ANR	1301275	ExpressionStatement	zval_dtor ( & lzval )	1315:1:37672:37689	1301093	4	True				
ANR	1301276	CallExpression	zval_dtor ( & lzval )		1301093	0					
ANR	1301277	Callee	zval_dtor		1301093	0					
ANR	1301278	Identifier	zval_dtor		1301093	0					
ANR	1301279	ArgumentList	& lzval		1301093	1					
ANR	1301280	Argument	& lzval		1301093	0					
ANR	1301281	UnaryOperationExpression	& lzval		1301093	0					
ANR	1301282	UnaryOperator	&		1301093	0					
ANR	1301283	Identifier	lzval		1301093	1					
ANR	1301284	ReturnType	static void		1301093	1					
ANR	1301285	Identifier	from_zval_write_ifindex		1301093	2					
ANR	1301286	ParameterList	"const zval * zv , char * uinteger , ser_context * ctx"		1301093	3					
ANR	1301287	Parameter	const zval * zv	1258:36:36018:36031	1301093	0	True				
ANR	1301288	ParameterType	const zval *		1301093	0					
ANR	1301289	Identifier	zv		1301093	1					
ANR	1301290	Parameter	char * uinteger	1258:52:36034:36047	1301093	1	True				
ANR	1301291	ParameterType	char *		1301093	0					
ANR	1301292	Identifier	uinteger		1301093	1					
ANR	1301293	Parameter	ser_context * ctx	1258:68:36050:36065	1301093	2	True				
ANR	1301294	ParameterType	ser_context *		1301093	0					
ANR	1301295	Identifier	ctx		1301093	1					
ANR	1301296	CFGEntryNode	ENTRY		1301093		True				
ANR	1301297	CFGExitNode	EXIT		1301093		True				
ANR	1301298	Symbol	ret		1301093						
ANR	1301299	Symbol	& ret		1301093						
ANR	1301300	Symbol	zval_used_for_init		1301093						
ANR	1301301	Symbol	ctx		1301093						
ANR	1301302	Symbol	ctx -> err . has_error		1301093						
ANR	1301303	Symbol	if_nametoindex		1301093						
ANR	1301304	Symbol	& lzval		1301093						
ANR	1301305	Symbol	Z_TYPE_P		1301093						
ANR	1301306	Symbol	Z_STRVAL_P		1301093						
ANR	1301307	Symbol	ctx -> err		1301093						
ANR	1301308	Symbol	* ctx		1301093						
ANR	1301309	Symbol	UINT_MAX		1301093						
ANR	1301310	Symbol	Z_LVAL_P		1301093						
ANR	1301311	Symbol	uinteger		1301093						
ANR	1301312	Symbol	IS_LONG		1301093						
ANR	1301313	Symbol	lzval		1301093						
ANR	1301314	Symbol	IS_STRING		1301093						
ANR	1301315	Symbol	zv		1301093						
ANR	1301316	DeclStmt									
ANR	1301317	Decl							const field_descriptor	const field_descriptor [ ]	descriptors_in6_pktinfo
ANR	1301318	Function	from_zval_write_in6_pktinfo	1325:0:38095:38278							
ANR	1301319	FunctionDef	"from_zval_write_in6_pktinfo (const zval * container , char * in6_pktinfo_c , ser_context * ctx)"		1301318	0					
ANR	1301320	CompoundStatement		1326:0:38190:38278	1301318	0					
ANR	1301321	ExpressionStatement	"from_zval_write_aggregation ( container , in6_pktinfo_c , descriptors_in6_pktinfo , ctx )"	1327:1:38193:38276	1301318	0	True				
ANR	1301322	CallExpression	"from_zval_write_aggregation ( container , in6_pktinfo_c , descriptors_in6_pktinfo , ctx )"		1301318	0					
ANR	1301323	Callee	from_zval_write_aggregation		1301318	0					
ANR	1301324	Identifier	from_zval_write_aggregation		1301318	0					
ANR	1301325	ArgumentList	container		1301318	1					
ANR	1301326	Argument	container		1301318	0					
ANR	1301327	Identifier	container		1301318	0					
ANR	1301328	Argument	in6_pktinfo_c		1301318	1					
ANR	1301329	Identifier	in6_pktinfo_c		1301318	0					
ANR	1301330	Argument	descriptors_in6_pktinfo		1301318	2					
ANR	1301331	Identifier	descriptors_in6_pktinfo		1301318	0					
ANR	1301332	Argument	ctx		1301318	3					
ANR	1301333	Identifier	ctx		1301318	0					
ANR	1301334	ReturnType	void		1301318	1					
ANR	1301335	Identifier	from_zval_write_in6_pktinfo		1301318	2					
ANR	1301336	ParameterList	"const zval * container , char * in6_pktinfo_c , ser_context * ctx"		1301318	3					
ANR	1301337	Parameter	const zval * container	1325:33:38128:38148	1301318	0	True				
ANR	1301338	ParameterType	const zval *		1301318	0					
ANR	1301339	Identifier	container		1301318	1					
ANR	1301340	Parameter	char * in6_pktinfo_c	1325:56:38151:38169	1301318	1	True				
ANR	1301341	ParameterType	char *		1301318	0					
ANR	1301342	Identifier	in6_pktinfo_c		1301318	1					
ANR	1301343	Parameter	ser_context * ctx	1325:77:38172:38187	1301318	2	True				
ANR	1301344	ParameterType	ser_context *		1301318	0					
ANR	1301345	Identifier	ctx		1301318	1					
ANR	1301346	CFGEntryNode	ENTRY		1301318		True				
ANR	1301347	CFGExitNode	EXIT		1301318		True				
ANR	1301348	Symbol	container		1301318						
ANR	1301349	Symbol	in6_pktinfo_c		1301318						
ANR	1301350	Symbol	descriptors_in6_pktinfo		1301318						
ANR	1301351	Symbol	ctx		1301318						
ANR	1301352	Function	to_zval_read_in6_pktinfo	1329:0:38280:38451							
ANR	1301353	FunctionDef	"to_zval_read_in6_pktinfo (const char * data , zval * zv , res_context * ctx)"		1301352	0					
ANR	1301354	CompoundStatement		1330:0:38356:38451	1301352	0					
ANR	1301355	ExpressionStatement	"array_init_size ( zv , 2 )"	1331:1:38359:38381	1301352	0	True				
ANR	1301356	CallExpression	"array_init_size ( zv , 2 )"		1301352	0					
ANR	1301357	Callee	array_init_size		1301352	0					
ANR	1301358	Identifier	array_init_size		1301352	0					
ANR	1301359	ArgumentList	zv		1301352	1					
ANR	1301360	Argument	zv		1301352	0					
ANR	1301361	Identifier	zv		1301352	0					
ANR	1301362	Argument	2		1301352	1					
ANR	1301363	PrimaryExpression	2		1301352	0					
ANR	1301364	ExpressionStatement	"to_zval_read_aggregation ( data , zv , descriptors_in6_pktinfo , ctx )"	1333:1:38385:38449	1301352	1	True				
ANR	1301365	CallExpression	"to_zval_read_aggregation ( data , zv , descriptors_in6_pktinfo , ctx )"		1301352	0					
ANR	1301366	Callee	to_zval_read_aggregation		1301352	0					
ANR	1301367	Identifier	to_zval_read_aggregation		1301352	0					
ANR	1301368	ArgumentList	data		1301352	1					
ANR	1301369	Argument	data		1301352	0					
ANR	1301370	Identifier	data		1301352	0					
ANR	1301371	Argument	zv		1301352	1					
ANR	1301372	Identifier	zv		1301352	0					
ANR	1301373	Argument	descriptors_in6_pktinfo		1301352	2					
ANR	1301374	Identifier	descriptors_in6_pktinfo		1301352	0					
ANR	1301375	Argument	ctx		1301352	3					
ANR	1301376	Identifier	ctx		1301352	0					
ANR	1301377	ReturnType	void		1301352	1					
ANR	1301378	Identifier	to_zval_read_in6_pktinfo		1301352	2					
ANR	1301379	ParameterList	"const char * data , zval * zv , res_context * ctx"		1301352	3					
ANR	1301380	Parameter	const char * data	1329:30:38310:38325	1301352	0	True				
ANR	1301381	ParameterType	const char *		1301352	0					
ANR	1301382	Identifier	data		1301352	1					
ANR	1301383	Parameter	zval * zv	1329:48:38328:38335	1301352	1	True				
ANR	1301384	ParameterType	zval *		1301352	0					
ANR	1301385	Identifier	zv		1301352	1					
ANR	1301386	Parameter	res_context * ctx	1329:58:38338:38353	1301352	2	True				
ANR	1301387	ParameterType	res_context *		1301352	0					
ANR	1301388	Identifier	ctx		1301352	1					
ANR	1301389	CFGEntryNode	ENTRY		1301352		True				
ANR	1301390	CFGExitNode	EXIT		1301352		True				
ANR	1301391	Symbol	descriptors_in6_pktinfo		1301352						
ANR	1301392	Symbol	data		1301352						
ANR	1301393	Symbol	ctx		1301352						
ANR	1301394	Symbol	zv		1301352						
ANR	1301395	DeclStmt									
ANR	1301396	Decl							const field_descriptor	const field_descriptor [ ]	descriptors_ucred
ANR	1301397	Function	from_zval_write_ucred	1346:0:38933:39092							
ANR	1301398	FunctionDef	"from_zval_write_ucred (const zval * container , char * ucred_c , ser_context * ctx)"		1301397	0					
ANR	1301399	CompoundStatement		1347:0:39016:39092	1301397	0					
ANR	1301400	ExpressionStatement	"from_zval_write_aggregation ( container , ucred_c , descriptors_ucred , ctx )"	1348:1:39019:39090	1301397	0	True				
ANR	1301401	CallExpression	"from_zval_write_aggregation ( container , ucred_c , descriptors_ucred , ctx )"		1301397	0					
ANR	1301402	Callee	from_zval_write_aggregation		1301397	0					
ANR	1301403	Identifier	from_zval_write_aggregation		1301397	0					
ANR	1301404	ArgumentList	container		1301397	1					
ANR	1301405	Argument	container		1301397	0					
ANR	1301406	Identifier	container		1301397	0					
ANR	1301407	Argument	ucred_c		1301397	1					
ANR	1301408	Identifier	ucred_c		1301397	0					
ANR	1301409	Argument	descriptors_ucred		1301397	2					
ANR	1301410	Identifier	descriptors_ucred		1301397	0					
ANR	1301411	Argument	ctx		1301397	3					
ANR	1301412	Identifier	ctx		1301397	0					
ANR	1301413	ReturnType	void		1301397	1					
ANR	1301414	Identifier	from_zval_write_ucred		1301397	2					
ANR	1301415	ParameterList	"const zval * container , char * ucred_c , ser_context * ctx"		1301397	3					
ANR	1301416	Parameter	const zval * container	1346:27:38960:38980	1301397	0	True				
ANR	1301417	ParameterType	const zval *		1301397	0					
ANR	1301418	Identifier	container		1301397	1					
ANR	1301419	Parameter	char * ucred_c	1346:50:38983:38995	1301397	1	True				
ANR	1301420	ParameterType	char *		1301397	0					
ANR	1301421	Identifier	ucred_c		1301397	1					
ANR	1301422	Parameter	ser_context * ctx	1346:65:38998:39013	1301397	2	True				
ANR	1301423	ParameterType	ser_context *		1301397	0					
ANR	1301424	Identifier	ctx		1301397	1					
ANR	1301425	CFGEntryNode	ENTRY		1301397		True				
ANR	1301426	CFGExitNode	EXIT		1301397		True				
ANR	1301427	Symbol	container		1301397						
ANR	1301428	Symbol	ctx		1301397						
ANR	1301429	Symbol	ucred_c		1301397						
ANR	1301430	Symbol	descriptors_ucred		1301397						
ANR	1301431	Function	to_zval_read_ucred	1350:0:39094:39253							
ANR	1301432	FunctionDef	"to_zval_read_ucred (const char * data , zval * zv , res_context * ctx)"		1301431	0					
ANR	1301433	CompoundStatement		1351:0:39164:39253	1301431	0					
ANR	1301434	ExpressionStatement	"array_init_size ( zv , 3 )"	1352:1:39167:39189	1301431	0	True				
ANR	1301435	CallExpression	"array_init_size ( zv , 3 )"		1301431	0					
ANR	1301436	Callee	array_init_size		1301431	0					
ANR	1301437	Identifier	array_init_size		1301431	0					
ANR	1301438	ArgumentList	zv		1301431	1					
ANR	1301439	Argument	zv		1301431	0					
ANR	1301440	Identifier	zv		1301431	0					
ANR	1301441	Argument	3		1301431	1					
ANR	1301442	PrimaryExpression	3		1301431	0					
ANR	1301443	ExpressionStatement	"to_zval_read_aggregation ( data , zv , descriptors_ucred , ctx )"	1354:1:39193:39251	1301431	1	True				
ANR	1301444	CallExpression	"to_zval_read_aggregation ( data , zv , descriptors_ucred , ctx )"		1301431	0					
ANR	1301445	Callee	to_zval_read_aggregation		1301431	0					
ANR	1301446	Identifier	to_zval_read_aggregation		1301431	0					
ANR	1301447	ArgumentList	data		1301431	1					
ANR	1301448	Argument	data		1301431	0					
ANR	1301449	Identifier	data		1301431	0					
ANR	1301450	Argument	zv		1301431	1					
ANR	1301451	Identifier	zv		1301431	0					
ANR	1301452	Argument	descriptors_ucred		1301431	2					
ANR	1301453	Identifier	descriptors_ucred		1301431	0					
ANR	1301454	Argument	ctx		1301431	3					
ANR	1301455	Identifier	ctx		1301431	0					
ANR	1301456	ReturnType	void		1301431	1					
ANR	1301457	Identifier	to_zval_read_ucred		1301431	2					
ANR	1301458	ParameterList	"const char * data , zval * zv , res_context * ctx"		1301431	3					
ANR	1301459	Parameter	const char * data	1350:24:39118:39133	1301431	0	True				
ANR	1301460	ParameterType	const char *		1301431	0					
ANR	1301461	Identifier	data		1301431	1					
ANR	1301462	Parameter	zval * zv	1350:42:39136:39143	1301431	1	True				
ANR	1301463	ParameterType	zval *		1301431	0					
ANR	1301464	Identifier	zv		1301431	1					
ANR	1301465	Parameter	res_context * ctx	1350:52:39146:39161	1301431	2	True				
ANR	1301466	ParameterType	res_context *		1301431	0					
ANR	1301467	Identifier	ctx		1301431	1					
ANR	1301468	CFGEntryNode	ENTRY		1301431		True				
ANR	1301469	CFGExitNode	EXIT		1301431		True				
ANR	1301470	Symbol	data		1301431						
ANR	1301471	Symbol	ctx		1301431						
ANR	1301472	Symbol	descriptors_ucred		1301431						
ANR	1301473	Symbol	zv		1301431						
ANR	1301474	Function	calculate_scm_rights_space	1360:0:39314:39761							
ANR	1301475	FunctionDef	"calculate_scm_rights_space (const zval * arr , ser_context * ctx)"		1301474	0					
ANR	1301476	CompoundStatement		1361:0:39383:39761	1301474	0					
ANR	1301477	IdentifierDeclStatement	int num_elems ;	1362:1:39386:39399	1301474	0	True				
ANR	1301478	IdentifierDecl	num_elems		1301474	0					
ANR	1301479	IdentifierDeclType	int		1301474	0					
ANR	1301480	Identifier	num_elems		1301474	1					
ANR	1301481	IfStatement	if ( Z_TYPE_P ( arr ) != IS_ARRAY )		1301474	1					
ANR	1301482	Condition	Z_TYPE_P ( arr ) != IS_ARRAY	1364:5:39407:39431	1301474	0	True				
ANR	1301483	EqualityExpression	Z_TYPE_P ( arr ) != IS_ARRAY		1301474	0		!=			
ANR	1301484	CallExpression	Z_TYPE_P ( arr )		1301474	0					
ANR	1301485	Callee	Z_TYPE_P		1301474	0					
ANR	1301486	Identifier	Z_TYPE_P		1301474	0					
ANR	1301487	ArgumentList	arr		1301474	1					
ANR	1301488	Argument	arr		1301474	0					
ANR	1301489	Identifier	arr		1301474	0					
ANR	1301490	Identifier	IS_ARRAY		1301474	1					
ANR	1301491	CompoundStatement		4:32:50:50	1301474	1					
ANR	1301492	ExpressionStatement	"do_from_zval_err ( ctx , ""%s"" , ""expected an array here"" )"	1365:2:39438:39491	1301474	0	True				
ANR	1301493	CallExpression	"do_from_zval_err ( ctx , ""%s"" , ""expected an array here"" )"		1301474	0					
ANR	1301494	Callee	do_from_zval_err		1301474	0					
ANR	1301495	Identifier	do_from_zval_err		1301474	0					
ANR	1301496	ArgumentList	ctx		1301474	1					
ANR	1301497	Argument	ctx		1301474	0					
ANR	1301498	Identifier	ctx		1301474	0					
ANR	1301499	Argument	"""%s"""		1301474	1					
ANR	1301500	PrimaryExpression	"""%s"""		1301474	0					
ANR	1301501	Argument	"""expected an array here"""		1301474	2					
ANR	1301502	PrimaryExpression	"""expected an array here"""		1301474	0					
ANR	1301503	ReturnStatement	return ( size_t ) - 1 ;	1366:2:39495:39512	1301474	1	True				
ANR	1301504	CastExpression	( size_t ) - 1		1301474	0					
ANR	1301505	CastTarget	size_t		1301474	0					
ANR	1301506	UnaryOperationExpression	- 1		1301474	1					
ANR	1301507	UnaryOperator	-		1301474	0					
ANR	1301508	PrimaryExpression	1		1301474	1					
ANR	1301509	ExpressionStatement	num_elems = zend_hash_num_elements ( Z_ARRVAL_P ( arr ) )	1369:1:39519:39570	1301474	2	True				
ANR	1301510	AssignmentExpression	num_elems = zend_hash_num_elements ( Z_ARRVAL_P ( arr ) )		1301474	0		=			
ANR	1301511	Identifier	num_elems		1301474	0					
ANR	1301512	CallExpression	zend_hash_num_elements ( Z_ARRVAL_P ( arr ) )		1301474	1					
ANR	1301513	Callee	zend_hash_num_elements		1301474	0					
ANR	1301514	Identifier	zend_hash_num_elements		1301474	0					
ANR	1301515	ArgumentList	Z_ARRVAL_P ( arr )		1301474	1					
ANR	1301516	Argument	Z_ARRVAL_P ( arr )		1301474	0					
ANR	1301517	CallExpression	Z_ARRVAL_P ( arr )		1301474	0					
ANR	1301518	Callee	Z_ARRVAL_P		1301474	0					
ANR	1301519	Identifier	Z_ARRVAL_P		1301474	0					
ANR	1301520	ArgumentList	arr		1301474	1					
ANR	1301521	Argument	arr		1301474	0					
ANR	1301522	Identifier	arr		1301474	0					
ANR	1301523	IfStatement	if ( num_elems == 0 )		1301474	3					
ANR	1301524	Condition	num_elems == 0	1370:5:39577:39590	1301474	0	True				
ANR	1301525	EqualityExpression	num_elems == 0		1301474	0		==			
ANR	1301526	Identifier	num_elems		1301474	0					
ANR	1301527	PrimaryExpression	0		1301474	1					
ANR	1301528	CompoundStatement		10:21:209:209	1301474	1					
ANR	1301529	ExpressionStatement	"do_from_zval_err ( ctx , ""%s"" , ""expected at least one element in this array"" )"	1371:2:39597:39671	1301474	0	True				
ANR	1301530	CallExpression	"do_from_zval_err ( ctx , ""%s"" , ""expected at least one element in this array"" )"		1301474	0					
ANR	1301531	Callee	do_from_zval_err		1301474	0					
ANR	1301532	Identifier	do_from_zval_err		1301474	0					
ANR	1301533	ArgumentList	ctx		1301474	1					
ANR	1301534	Argument	ctx		1301474	0					
ANR	1301535	Identifier	ctx		1301474	0					
ANR	1301536	Argument	"""%s"""		1301474	1					
ANR	1301537	PrimaryExpression	"""%s"""		1301474	0					
ANR	1301538	Argument	"""expected at least one element in this array"""		1301474	2					
ANR	1301539	PrimaryExpression	"""expected at least one element in this array"""		1301474	0					
ANR	1301540	ReturnStatement	return ( size_t ) - 1 ;	1372:2:39675:39692	1301474	1	True				
ANR	1301541	CastExpression	( size_t ) - 1		1301474	0					
ANR	1301542	CastTarget	size_t		1301474	0					
ANR	1301543	UnaryOperationExpression	- 1		1301474	1					
ANR	1301544	UnaryOperator	-		1301474	0					
ANR	1301545	PrimaryExpression	1		1301474	1					
ANR	1301546	ReturnStatement	return zend_hash_num_elements ( Z_ARRVAL_P ( arr ) ) * sizeof ( int ) ;	1375:1:39699:39759	1301474	4	True				
ANR	1301547	MultiplicativeExpression	zend_hash_num_elements ( Z_ARRVAL_P ( arr ) ) * sizeof ( int )		1301474	0		*			
ANR	1301548	CallExpression	zend_hash_num_elements ( Z_ARRVAL_P ( arr ) )		1301474	0					
ANR	1301549	Callee	zend_hash_num_elements		1301474	0					
ANR	1301550	Identifier	zend_hash_num_elements		1301474	0					
ANR	1301551	ArgumentList	Z_ARRVAL_P ( arr )		1301474	1					
ANR	1301552	Argument	Z_ARRVAL_P ( arr )		1301474	0					
ANR	1301553	CallExpression	Z_ARRVAL_P ( arr )		1301474	0					
ANR	1301554	Callee	Z_ARRVAL_P		1301474	0					
ANR	1301555	Identifier	Z_ARRVAL_P		1301474	0					
ANR	1301556	ArgumentList	arr		1301474	1					
ANR	1301557	Argument	arr		1301474	0					
ANR	1301558	Identifier	arr		1301474	0					
ANR	1301559	SizeofExpression	sizeof ( int )		1301474	1					
ANR	1301560	Sizeof	sizeof		1301474	0					
ANR	1301561	SizeofOperand	int		1301474	1					
ANR	1301562	ReturnType	size_t		1301474	1					
ANR	1301563	Identifier	calculate_scm_rights_space		1301474	2					
ANR	1301564	ParameterList	"const zval * arr , ser_context * ctx"		1301474	3					
ANR	1301565	Parameter	const zval * arr	1360:34:39348:39362	1301474	0	True				
ANR	1301566	ParameterType	const zval *		1301474	0					
ANR	1301567	Identifier	arr		1301474	1					
ANR	1301568	Parameter	ser_context * ctx	1360:51:39365:39380	1301474	1	True				
ANR	1301569	ParameterType	ser_context *		1301474	0					
ANR	1301570	Identifier	ctx		1301474	1					
ANR	1301571	CFGEntryNode	ENTRY		1301474		True				
ANR	1301572	CFGExitNode	EXIT		1301474		True				
ANR	1301573	Symbol	arr		1301474						
ANR	1301574	Symbol	IS_ARRAY		1301474						
ANR	1301575	Symbol	zend_hash_num_elements		1301474						
ANR	1301576	Symbol	ctx		1301474						
ANR	1301577	Symbol	Z_TYPE_P		1301474						
ANR	1301578	Symbol	Z_ARRVAL_P		1301474						
ANR	1301579	Symbol	num_elems		1301474						
ANR	1301580	Function	from_zval_write_fd_array_aux	1377:0:39763:40626							
ANR	1301581	FunctionDef	"from_zval_write_fd_array_aux (zval * * elem , unsigned i , void * * args , ser_context * ctx)"		1301580	0					
ANR	1301582	CompoundStatement		1378:0:39860:40626	1301580	0					
ANR	1301583	IdentifierDeclStatement	int * iarr = args [ 0 ] ;	1379:1:39863:39882	1301580	0	True				
ANR	1301584	IdentifierDecl	* iarr = args [ 0 ]		1301580	0					
ANR	1301585	IdentifierDeclType	int *		1301580	0					
ANR	1301586	Identifier	iarr		1301580	1					
ANR	1301587	AssignmentExpression	* iarr = args [ 0 ]		1301580	2		=			
ANR	1301588	Identifier	iarr		1301580	0					
ANR	1301589	ArrayIndexing	args [ 0 ]		1301580	1					
ANR	1301590	Identifier	args		1301580	0					
ANR	1301591	PrimaryExpression	0		1301580	1					
ANR	1301592	ExpressionStatement	TSRMLS_FETCH ( )	1380:1:39885:39899	1301580	1	True				
ANR	1301593	CallExpression	TSRMLS_FETCH ( )		1301580	0					
ANR	1301594	Callee	TSRMLS_FETCH		1301580	0					
ANR	1301595	Identifier	TSRMLS_FETCH		1301580	0					
ANR	1301596	ArgumentList			1301580	1					
ANR	1301597	IfStatement	if ( Z_TYPE_PP ( elem ) == IS_RESOURCE )		1301580	2					
ANR	1301598	Condition	Z_TYPE_PP ( elem ) == IS_RESOURCE	1382:5:39907:39936	1301580	0	True				
ANR	1301599	EqualityExpression	Z_TYPE_PP ( elem ) == IS_RESOURCE		1301580	0		==			
ANR	1301600	CallExpression	Z_TYPE_PP ( elem )		1301580	0					
ANR	1301601	Callee	Z_TYPE_PP		1301580	0					
ANR	1301602	Identifier	Z_TYPE_PP		1301580	0					
ANR	1301603	ArgumentList	elem		1301580	1					
ANR	1301604	Argument	elem		1301580	0					
ANR	1301605	Identifier	elem		1301580	0					
ANR	1301606	Identifier	IS_RESOURCE		1301580	1					
ANR	1301607	CompoundStatement		7:2:104:120	1301580	1					
ANR	1301608	IdentifierDeclStatement	php_stream * stream ;	1383:2:39943:39961	1301580	0	True				
ANR	1301609	IdentifierDecl	* stream		1301580	0					
ANR	1301610	IdentifierDeclType	php_stream *		1301580	0					
ANR	1301611	Identifier	stream		1301580	1					
ANR	1301612	IdentifierDeclStatement	php_socket * sock ;	1384:2:39965:39981	1301580	1	True				
ANR	1301613	IdentifierDecl	* sock		1301580	0					
ANR	1301614	IdentifierDeclType	php_socket *		1301580	0					
ANR	1301615	Identifier	sock		1301580	1					
ANR	1301616	Statement	ZEND_FETCH_RESOURCE_NO_RETURN	1386:2:39986:40014	1301580	2	True				
ANR	1301617	Statement	(	1386:31:40015:40015	1301580	3	True				
ANR	1301618	Statement	sock	1386:32:40016:40019	1301580	4	True				
ANR	1301619	Statement	","	1386:36:40020:40020	1301580	5	True				
ANR	1301620	Statement	php_socket	1386:38:40022:40031	1301580	6	True				
ANR	1301621	Statement	*	1386:49:40033:40033	1301580	7	True				
ANR	1301622	Statement	","	1386:50:40034:40034	1301580	8	True				
ANR	1301623	Statement	elem	1386:52:40036:40039	1301580	9	True				
ANR	1301624	Statement	","	1386:56:40040:40040	1301580	10	True				
ANR	1301625	Statement	-	1386:58:40042:40042	1301580	11	True				
ANR	1301626	Statement	1	1386:59:40043:40043	1301580	12	True				
ANR	1301627	Statement	","	1386:60:40044:40044	1301580	13	True				
ANR	1301628	Statement	NULL	1387:4:40050:40053	1301580	14	True				
ANR	1301629	Statement	","	1387:8:40054:40054	1301580	15	True				
ANR	1301630	Statement	php_sockets_le_socket	1387:10:40056:40076	1301580	16	True				
ANR	1301631	Statement	(	1387:31:40077:40077	1301580	17	True				
ANR	1301632	Statement	)	1387:32:40078:40078	1301580	18	True				
ANR	1301633	Statement	)	1387:33:40079:40079	1301580	19	True				
ANR	1301634	ExpressionStatement		1387:34:40080:40080	1301580	20	True				
ANR	1301635	IfStatement	if ( sock )		1301580	21					
ANR	1301636	Condition	sock	1388:6:40088:40091	1301580	0	True				
ANR	1301637	Identifier	sock		1301580	0					
ANR	1301638	CompoundStatement		11:12:233:233	1301580	1					
ANR	1301639	ExpressionStatement	iarr [ i ] = sock -> bsd_socket	1389:3:40099:40125	1301580	0	True				
ANR	1301640	AssignmentExpression	iarr [ i ] = sock -> bsd_socket		1301580	0		=			
ANR	1301641	ArrayIndexing	iarr [ i ]		1301580	0					
ANR	1301642	Identifier	iarr		1301580	0					
ANR	1301643	Identifier	i		1301580	1					
ANR	1301644	PtrMemberAccess	sock -> bsd_socket		1301580	1					
ANR	1301645	Identifier	sock		1301580	0					
ANR	1301646	Identifier	bsd_socket		1301580	1					
ANR	1301647	ReturnStatement	return ;	1390:3:40130:40136	1301580	1	True				
ANR	1301648	Statement	ZEND_FETCH_RESOURCE2_NO_RETURN	1393:2:40145:40174	1301580	22	True				
ANR	1301649	Statement	(	1393:32:40175:40175	1301580	23	True				
ANR	1301650	Statement	stream	1393:33:40176:40181	1301580	24	True				
ANR	1301651	Statement	","	1393:39:40182:40182	1301580	25	True				
ANR	1301652	Statement	php_stream	1393:41:40184:40193	1301580	26	True				
ANR	1301653	Statement	*	1393:52:40195:40195	1301580	27	True				
ANR	1301654	Statement	","	1393:53:40196:40196	1301580	28	True				
ANR	1301655	Statement	elem	1393:55:40198:40201	1301580	29	True				
ANR	1301656	Statement	","	1393:59:40202:40202	1301580	30	True				
ANR	1301657	Statement	-	1393:61:40204:40204	1301580	31	True				
ANR	1301658	Statement	1	1393:62:40205:40205	1301580	32	True				
ANR	1301659	Statement	","	1393:63:40206:40206	1301580	33	True				
ANR	1301660	Statement	NULL	1394:4:40212:40215	1301580	34	True				
ANR	1301661	Statement	","	1394:8:40216:40216	1301580	35	True				
ANR	1301662	Statement	php_file_le_stream	1394:10:40218:40235	1301580	36	True				
ANR	1301663	Statement	(	1394:28:40236:40236	1301580	37	True				
ANR	1301664	Statement	)	1394:29:40237:40237	1301580	38	True				
ANR	1301665	Statement	","	1394:30:40238:40238	1301580	39	True				
ANR	1301666	Statement	php_file_le_pstream	1394:32:40240:40258	1301580	40	True				
ANR	1301667	Statement	(	1394:51:40259:40259	1301580	41	True				
ANR	1301668	Statement	)	1394:52:40260:40260	1301580	42	True				
ANR	1301669	Statement	)	1394:53:40261:40261	1301580	43	True				
ANR	1301670	ExpressionStatement		1394:54:40262:40262	1301580	44	True				
ANR	1301671	IfStatement	if ( stream == NULL )		1301580	45					
ANR	1301672	Condition	stream == NULL	1395:6:40270:40283	1301580	0	True				
ANR	1301673	EqualityExpression	stream == NULL		1301580	0		==			
ANR	1301674	Identifier	stream		1301580	0					
ANR	1301675	Identifier	NULL		1301580	1					
ANR	1301676	CompoundStatement		18:22:425:425	1301580	1					
ANR	1301677	ExpressionStatement	"do_from_zval_err ( ctx , ""resource is not a stream or a socket"" )"	1396:3:40291:40352	1301580	0	True				
ANR	1301678	CallExpression	"do_from_zval_err ( ctx , ""resource is not a stream or a socket"" )"		1301580	0					
ANR	1301679	Callee	do_from_zval_err		1301580	0					
ANR	1301680	Identifier	do_from_zval_err		1301580	0					
ANR	1301681	ArgumentList	ctx		1301580	1					
ANR	1301682	Argument	ctx		1301580	0					
ANR	1301683	Identifier	ctx		1301580	0					
ANR	1301684	Argument	"""resource is not a stream or a socket"""		1301580	1					
ANR	1301685	PrimaryExpression	"""resource is not a stream or a socket"""		1301580	0					
ANR	1301686	ReturnStatement	return ;	1397:3:40357:40363	1301580	1	True				
ANR	1301687	IfStatement	"if ( php_stream_cast ( stream , PHP_STREAM_AS_FD , ( void * * ) & iarr [ i - 1 ] , REPORT_ERRORS ) == FAILURE )"		1301580	46					
ANR	1301688	Condition	"php_stream_cast ( stream , PHP_STREAM_AS_FD , ( void * * ) & iarr [ i - 1 ] , REPORT_ERRORS ) == FAILURE"	1400:6:40376:40469	1301580	0	True				
ANR	1301689	EqualityExpression	"php_stream_cast ( stream , PHP_STREAM_AS_FD , ( void * * ) & iarr [ i - 1 ] , REPORT_ERRORS ) == FAILURE"		1301580	0		==			
ANR	1301690	CallExpression	"php_stream_cast ( stream , PHP_STREAM_AS_FD , ( void * * ) & iarr [ i - 1 ] , REPORT_ERRORS )"		1301580	0					
ANR	1301691	Callee	php_stream_cast		1301580	0					
ANR	1301692	Identifier	php_stream_cast		1301580	0					
ANR	1301693	ArgumentList	stream		1301580	1					
ANR	1301694	Argument	stream		1301580	0					
ANR	1301695	Identifier	stream		1301580	0					
ANR	1301696	Argument	PHP_STREAM_AS_FD		1301580	1					
ANR	1301697	Identifier	PHP_STREAM_AS_FD		1301580	0					
ANR	1301698	Argument	( void * * ) & iarr [ i - 1 ]		1301580	2					
ANR	1301699	CastExpression	( void * * ) & iarr [ i - 1 ]		1301580	0					
ANR	1301700	CastTarget	void * *		1301580	0					
ANR	1301701	UnaryOperationExpression	& iarr [ i - 1 ]		1301580	1					
ANR	1301702	UnaryOperator	&		1301580	0					
ANR	1301703	ArrayIndexing	iarr [ i - 1 ]		1301580	1					
ANR	1301704	Identifier	iarr		1301580	0					
ANR	1301705	AdditiveExpression	i - 1		1301580	1		-			
ANR	1301706	Identifier	i		1301580	0					
ANR	1301707	PrimaryExpression	1		1301580	1					
ANR	1301708	Argument	REPORT_ERRORS		1301580	3					
ANR	1301709	Identifier	REPORT_ERRORS		1301580	0					
ANR	1301710	Identifier	FAILURE		1301580	1					
ANR	1301711	CompoundStatement		24:31:611:611	1301580	1					
ANR	1301712	ExpressionStatement	"do_from_zval_err ( ctx , ""cast stream to file descriptor failed"" )"	1402:3:40477:40539	1301580	0	True				
ANR	1301713	CallExpression	"do_from_zval_err ( ctx , ""cast stream to file descriptor failed"" )"		1301580	0					
ANR	1301714	Callee	do_from_zval_err		1301580	0					
ANR	1301715	Identifier	do_from_zval_err		1301580	0					
ANR	1301716	ArgumentList	ctx		1301580	1					
ANR	1301717	Argument	ctx		1301580	0					
ANR	1301718	Identifier	ctx		1301580	0					
ANR	1301719	Argument	"""cast stream to file descriptor failed"""		1301580	1					
ANR	1301720	PrimaryExpression	"""cast stream to file descriptor failed"""		1301580	0					
ANR	1301721	ReturnStatement	return ;	1403:3:40544:40550	1301580	1	True				
ANR	1301722	ElseStatement	else		1301580	0					
ANR	1301723	CompoundStatement		28:8:703:703	1301580	0					
ANR	1301724	ExpressionStatement	"do_from_zval_err ( ctx , ""expected a resource variable"" )"	1406:2:40568:40621	1301580	0	True				
ANR	1301725	CallExpression	"do_from_zval_err ( ctx , ""expected a resource variable"" )"		1301580	0					
ANR	1301726	Callee	do_from_zval_err		1301580	0					
ANR	1301727	Identifier	do_from_zval_err		1301580	0					
ANR	1301728	ArgumentList	ctx		1301580	1					
ANR	1301729	Argument	ctx		1301580	0					
ANR	1301730	Identifier	ctx		1301580	0					
ANR	1301731	Argument	"""expected a resource variable"""		1301580	1					
ANR	1301732	PrimaryExpression	"""expected a resource variable"""		1301580	0					
ANR	1301733	ReturnType	static void		1301580	1					
ANR	1301734	Identifier	from_zval_write_fd_array_aux		1301580	2					
ANR	1301735	ParameterList	"zval * * elem , unsigned i , void * * args , ser_context * ctx"		1301580	3					
ANR	1301736	Parameter	zval * * elem	1377:41:39804:39814	1301580	0	True				
ANR	1301737	ParameterType	zval * *		1301580	0					
ANR	1301738	Identifier	elem		1301580	1					
ANR	1301739	Parameter	unsigned i	1377:54:39817:39826	1301580	1	True				
ANR	1301740	ParameterType	unsigned		1301580	0					
ANR	1301741	Identifier	i		1301580	1					
ANR	1301742	Parameter	void * * args	1377:66:39829:39839	1301580	2	True				
ANR	1301743	ParameterType	void * *		1301580	0					
ANR	1301744	Identifier	args		1301580	1					
ANR	1301745	Parameter	ser_context * ctx	1377:79:39842:39857	1301580	3	True				
ANR	1301746	ParameterType	ser_context *		1301580	0					
ANR	1301747	Identifier	ctx		1301580	1					
ANR	1301748	CFGEntryNode	ENTRY		1301580		True				
ANR	1301749	CFGExitNode	EXIT		1301580		True				
ANR	1301750	Symbol	elem		1301580						
ANR	1301751	Symbol	NULL		1301580						
ANR	1301752	Symbol	ctx		1301580						
ANR	1301753	Symbol	sock -> bsd_socket		1301580						
ANR	1301754	Symbol	php_stream_cast		1301580						
ANR	1301755	Symbol	i		1301580						
ANR	1301756	Symbol	iarr		1301580						
ANR	1301757	Symbol	PHP_STREAM_AS_FD		1301580						
ANR	1301758	Symbol	FAILURE		1301580						
ANR	1301759	Symbol	* args		1301580						
ANR	1301760	Symbol	args		1301580						
ANR	1301761	Symbol	Z_TYPE_PP		1301580						
ANR	1301762	Symbol	sock		1301580						
ANR	1301763	Symbol	* iarr		1301580						
ANR	1301764	Symbol	* i		1301580						
ANR	1301765	Symbol	REPORT_ERRORS		1301580						
ANR	1301766	Symbol	stream		1301580						
ANR	1301767	Symbol	IS_RESOURCE		1301580						
ANR	1301768	Symbol	* sock		1301580						
ANR	1301769	Function	from_zval_write_fd_array	1409:0:40628:40897							
ANR	1301770	FunctionDef	"from_zval_write_fd_array (const zval * arr , char * int_arr , ser_context * ctx)"		1301769	0					
ANR	1301771	CompoundStatement		1410:0:40708:40897	1301769	0					
ANR	1301772	IfStatement	if ( Z_TYPE_P ( arr ) != IS_ARRAY )		1301769	0					
ANR	1301773	Condition	Z_TYPE_P ( arr ) != IS_ARRAY	1411:5:40715:40739	1301769	0	True				
ANR	1301774	EqualityExpression	Z_TYPE_P ( arr ) != IS_ARRAY		1301769	0		!=			
ANR	1301775	CallExpression	Z_TYPE_P ( arr )		1301769	0					
ANR	1301776	Callee	Z_TYPE_P		1301769	0					
ANR	1301777	Identifier	Z_TYPE_P		1301769	0					
ANR	1301778	ArgumentList	arr		1301769	1					
ANR	1301779	Argument	arr		1301769	0					
ANR	1301780	Identifier	arr		1301769	0					
ANR	1301781	Identifier	IS_ARRAY		1301769	1					
ANR	1301782	CompoundStatement		2:32:33:33	1301769	1					
ANR	1301783	ExpressionStatement	"do_from_zval_err ( ctx , ""%s"" , ""expected an array here"" )"	1412:2:40746:40799	1301769	0	True				
ANR	1301784	CallExpression	"do_from_zval_err ( ctx , ""%s"" , ""expected an array here"" )"		1301769	0					
ANR	1301785	Callee	do_from_zval_err		1301769	0					
ANR	1301786	Identifier	do_from_zval_err		1301769	0					
ANR	1301787	ArgumentList	ctx		1301769	1					
ANR	1301788	Argument	ctx		1301769	0					
ANR	1301789	Identifier	ctx		1301769	0					
ANR	1301790	Argument	"""%s"""		1301769	1					
ANR	1301791	PrimaryExpression	"""%s"""		1301769	0					
ANR	1301792	Argument	"""expected an array here"""		1301769	2					
ANR	1301793	PrimaryExpression	"""expected an array here"""		1301769	0					
ANR	1301794	ReturnStatement	return ;	1413:2:40803:40809	1301769	1	True				
ANR	1301795	ExpressionStatement	"from_array_iterate ( arr , & from_zval_write_fd_array_aux , ( void * * ) & int_arr , ctx )"	1416:3:40818:40895	1301769	1	True				
ANR	1301796	CallExpression	"from_array_iterate ( arr , & from_zval_write_fd_array_aux , ( void * * ) & int_arr , ctx )"		1301769	0					
ANR	1301797	Callee	from_array_iterate		1301769	0					
ANR	1301798	Identifier	from_array_iterate		1301769	0					
ANR	1301799	ArgumentList	arr		1301769	1					
ANR	1301800	Argument	arr		1301769	0					
ANR	1301801	Identifier	arr		1301769	0					
ANR	1301802	Argument	& from_zval_write_fd_array_aux		1301769	1					
ANR	1301803	UnaryOperationExpression	& from_zval_write_fd_array_aux		1301769	0					
ANR	1301804	UnaryOperator	&		1301769	0					
ANR	1301805	Identifier	from_zval_write_fd_array_aux		1301769	1					
ANR	1301806	Argument	( void * * ) & int_arr		1301769	2					
ANR	1301807	CastExpression	( void * * ) & int_arr		1301769	0					
ANR	1301808	CastTarget	void * *		1301769	0					
ANR	1301809	UnaryOperationExpression	& int_arr		1301769	1					
ANR	1301810	UnaryOperator	&		1301769	0					
ANR	1301811	Identifier	int_arr		1301769	1					
ANR	1301812	Argument	ctx		1301769	3					
ANR	1301813	Identifier	ctx		1301769	0					
ANR	1301814	ReturnType	void		1301769	1					
ANR	1301815	Identifier	from_zval_write_fd_array		1301769	2					
ANR	1301816	ParameterList	"const zval * arr , char * int_arr , ser_context * ctx"		1301769	3					
ANR	1301817	Parameter	const zval * arr	1409:30:40658:40672	1301769	0	True				
ANR	1301818	ParameterType	const zval *		1301769	0					
ANR	1301819	Identifier	arr		1301769	1					
ANR	1301820	Parameter	char * int_arr	1409:47:40675:40687	1301769	1	True				
ANR	1301821	ParameterType	char *		1301769	0					
ANR	1301822	Identifier	int_arr		1301769	1					
ANR	1301823	Parameter	ser_context * ctx	1409:62:40690:40705	1301769	2	True				
ANR	1301824	ParameterType	ser_context *		1301769	0					
ANR	1301825	Identifier	ctx		1301769	1					
ANR	1301826	CFGEntryNode	ENTRY		1301769		True				
ANR	1301827	CFGExitNode	EXIT		1301769		True				
ANR	1301828	Symbol	arr		1301769						
ANR	1301829	Symbol	int_arr		1301769						
ANR	1301830	Symbol	IS_ARRAY		1301769						
ANR	1301831	Symbol	ctx		1301769						
ANR	1301832	Symbol	& int_arr		1301769						
ANR	1301833	Symbol	Z_TYPE_P		1301769						
ANR	1301834	Symbol	& from_zval_write_fd_array_aux		1301769						
ANR	1301835	Function	to_zval_read_fd_array	1418:0:40899:42368							
ANR	1301836	FunctionDef	"to_zval_read_fd_array (const char * data , zval * zv , res_context * ctx)"		1301835	0					
ANR	1301837	CompoundStatement		1419:0:40972:42368	1301835	0					
ANR	1301838	IdentifierDeclStatement	size_t * * cmsg_len ;	1420:1:40975:40994	1301835	0	True				
ANR	1301839	IdentifierDecl	* * cmsg_len		1301835	0					
ANR	1301840	IdentifierDeclType	size_t * *		1301835	0					
ANR	1301841	Identifier	cmsg_len		1301835	1					
ANR	1301842	IdentifierDeclStatement	"int num_elems , i ;"	1421:1:40997:41021	1301835	1	True				
ANR	1301843	IdentifierDecl	num_elems		1301835	0					
ANR	1301844	IdentifierDeclType	int		1301835	0					
ANR	1301845	Identifier	num_elems		1301835	1					
ANR	1301846	IdentifierDecl	i		1301835	1					
ANR	1301847	IdentifierDeclType	int		1301835	0					
ANR	1301848	Identifier	i		1301835	1					
ANR	1301849	IdentifierDeclStatement	struct cmsghdr * dummy_cmsg = 0 ;	1423:1:41024:41054	1301835	2	True				
ANR	1301850	IdentifierDecl	* dummy_cmsg = 0		1301835	0					
ANR	1301851	IdentifierDeclType	struct cmsghdr *		1301835	0					
ANR	1301852	Identifier	dummy_cmsg		1301835	1					
ANR	1301853	AssignmentExpression	* dummy_cmsg = 0		1301835	2		=			
ANR	1301854	Identifier	dummy_cmsg		1301835	0					
ANR	1301855	PrimaryExpression	0		1301835	1					
ANR	1301856	IdentifierDeclStatement	size_t data_offset ;	1424:1:41057:41077	1301835	3	True				
ANR	1301857	IdentifierDecl	data_offset		1301835	0					
ANR	1301858	IdentifierDeclType	size_t		1301835	0					
ANR	1301859	Identifier	data_offset		1301835	1					
ANR	1301860	ExpressionStatement	TSRMLS_FETCH ( )	1425:1:41080:41094	1301835	4	True				
ANR	1301861	CallExpression	TSRMLS_FETCH ( )		1301835	0					
ANR	1301862	Callee	TSRMLS_FETCH		1301835	0					
ANR	1301863	Identifier	TSRMLS_FETCH		1301835	0					
ANR	1301864	ArgumentList			1301835	1					
ANR	1301865	ExpressionStatement	data_offset = ( unsigned char * ) CMSG_DATA ( dummy_cmsg ) - ( unsigned char * ) dummy_cmsg	1427:1:41098:41183	1301835	5	True				
ANR	1301866	AssignmentExpression	data_offset = ( unsigned char * ) CMSG_DATA ( dummy_cmsg ) - ( unsigned char * ) dummy_cmsg		1301835	0		=			
ANR	1301867	Identifier	data_offset		1301835	0					
ANR	1301868	AdditiveExpression	( unsigned char * ) CMSG_DATA ( dummy_cmsg ) - ( unsigned char * ) dummy_cmsg		1301835	1		-			
ANR	1301869	CastExpression	( unsigned char * ) CMSG_DATA ( dummy_cmsg )		1301835	0					
ANR	1301870	CastTarget	unsigned char *		1301835	0					
ANR	1301871	CallExpression	CMSG_DATA ( dummy_cmsg )		1301835	1					
ANR	1301872	Callee	CMSG_DATA		1301835	0					
ANR	1301873	Identifier	CMSG_DATA		1301835	0					
ANR	1301874	ArgumentList	dummy_cmsg		1301835	1					
ANR	1301875	Argument	dummy_cmsg		1301835	0					
ANR	1301876	Identifier	dummy_cmsg		1301835	0					
ANR	1301877	CastExpression	( unsigned char * ) dummy_cmsg		1301835	1					
ANR	1301878	CastTarget	unsigned char *		1301835	0					
ANR	1301879	Identifier	dummy_cmsg		1301835	1					
ANR	1301880	IfStatement	"if ( zend_hash_find ( & ctx -> params , KEY_CMSG_LEN , sizeof ( KEY_CMSG_LEN ) , ( void * * ) & cmsg_len ) == FAILURE )"		1301835	6					
ANR	1301881	Condition	"zend_hash_find ( & ctx -> params , KEY_CMSG_LEN , sizeof ( KEY_CMSG_LEN ) , ( void * * ) & cmsg_len ) == FAILURE"	1430:5:41191:41288	1301835	0	True				
ANR	1301882	EqualityExpression	"zend_hash_find ( & ctx -> params , KEY_CMSG_LEN , sizeof ( KEY_CMSG_LEN ) , ( void * * ) & cmsg_len ) == FAILURE"		1301835	0		==			
ANR	1301883	CallExpression	"zend_hash_find ( & ctx -> params , KEY_CMSG_LEN , sizeof ( KEY_CMSG_LEN ) , ( void * * ) & cmsg_len )"		1301835	0					
ANR	1301884	Callee	zend_hash_find		1301835	0					
ANR	1301885	Identifier	zend_hash_find		1301835	0					
ANR	1301886	ArgumentList	& ctx -> params		1301835	1					
ANR	1301887	Argument	& ctx -> params		1301835	0					
ANR	1301888	UnaryOperationExpression	& ctx -> params		1301835	0					
ANR	1301889	UnaryOperator	&		1301835	0					
ANR	1301890	PtrMemberAccess	ctx -> params		1301835	1					
ANR	1301891	Identifier	ctx		1301835	0					
ANR	1301892	Identifier	params		1301835	1					
ANR	1301893	Argument	KEY_CMSG_LEN		1301835	1					
ANR	1301894	Identifier	KEY_CMSG_LEN		1301835	0					
ANR	1301895	Argument	sizeof ( KEY_CMSG_LEN )		1301835	2					
ANR	1301896	SizeofExpression	sizeof ( KEY_CMSG_LEN )		1301835	0					
ANR	1301897	Sizeof	sizeof		1301835	0					
ANR	1301898	SizeofOperand	KEY_CMSG_LEN		1301835	1					
ANR	1301899	Argument	( void * * ) & cmsg_len		1301835	3					
ANR	1301900	CastExpression	( void * * ) & cmsg_len		1301835	0					
ANR	1301901	CastTarget	void * *		1301835	0					
ANR	1301902	UnaryOperationExpression	& cmsg_len		1301835	1					
ANR	1301903	UnaryOperator	&		1301835	0					
ANR	1301904	Identifier	cmsg_len		1301835	1					
ANR	1301905	Identifier	FAILURE		1301835	1					
ANR	1301906	CompoundStatement		13:35:318:318	1301835	1					
ANR	1301907	Statement	do_to_zval_err	1432:2:41295:41308	1301835	0	True				
ANR	1301908	Statement	(	1432:16:41309:41309	1301835	1	True				
ANR	1301909	Statement	ctx	1432:17:41310:41312	1301835	2	True				
ANR	1301910	Statement	","	1432:20:41313:41313	1301835	3	True				
ANR	1301911	Statement	"""could not get value of parameter """	1432:22:41315:41349	1301835	4	True				
ANR	1301912	Statement	KEY_CMSG_LEN	1432:58:41351:41362	1301835	5	True				
ANR	1301913	Statement	)	1432:70:41363:41363	1301835	6	True				
ANR	1301914	ExpressionStatement		1432:71:41364:41364	1301835	7	True				
ANR	1301915	ReturnStatement	return ;	1433:2:41368:41374	1301835	8	True				
ANR	1301916	IfStatement	if ( * * cmsg_len < data_offset )		1301835	7					
ANR	1301917	Condition	* * cmsg_len < data_offset	1436:5:41385:41408	1301835	0	True				
ANR	1301918	RelationalExpression	* * cmsg_len < data_offset		1301835	0		<			
ANR	1301919	UnaryOperationExpression	* * cmsg_len		1301835	0					
ANR	1301920	UnaryOperator	*		1301835	0					
ANR	1301921	UnaryOperationExpression	* cmsg_len		1301835	1					
ANR	1301922	UnaryOperator	*		1301835	0					
ANR	1301923	Identifier	cmsg_len		1301835	1					
ANR	1301924	Identifier	data_offset		1301835	1					
ANR	1301925	CompoundStatement		18:31:438:438	1301835	1					
ANR	1301926	Statement	do_to_zval_err	1437:2:41415:41428	1301835	0	True				
ANR	1301927	Statement	(	1437:16:41429:41429	1301835	1	True				
ANR	1301928	Statement	ctx	1437:17:41430:41432	1301835	2	True				
ANR	1301929	Statement	","	1437:20:41433:41433	1301835	3	True				
ANR	1301930	Statement	"""length of cmsg is smaller than its data member """	1437:22:41435:41483	1301835	4	True				
ANR	1301931	Statement	"""offset (%ld vs %ld)"""	1438:4:41489:41509	1301835	5	True				
ANR	1301932	Statement	","	1438:25:41510:41510	1301835	6	True				
ANR	1301933	Statement	(	1438:27:41512:41512	1301835	7	True				
ANR	1301934	Statement	long	1438:28:41513:41516	1301835	8	True				
ANR	1301935	Statement	)	1438:32:41517:41517	1301835	9	True				
ANR	1301936	Statement	*	1438:33:41518:41518	1301835	10	True				
ANR	1301937	Statement	*	1438:34:41519:41519	1301835	11	True				
ANR	1301938	Statement	cmsg_len	1438:35:41520:41527	1301835	12	True				
ANR	1301939	Statement	","	1438:43:41528:41528	1301835	13	True				
ANR	1301940	Statement	(	1438:45:41530:41530	1301835	14	True				
ANR	1301941	Statement	long	1438:46:41531:41534	1301835	15	True				
ANR	1301942	Statement	)	1438:50:41535:41535	1301835	16	True				
ANR	1301943	Statement	data_offset	1438:51:41536:41546	1301835	17	True				
ANR	1301944	Statement	)	1438:62:41547:41547	1301835	18	True				
ANR	1301945	ExpressionStatement		1438:63:41548:41548	1301835	19	True				
ANR	1301946	ReturnStatement	return ;	1439:2:41552:41558	1301835	20	True				
ANR	1301947	ExpressionStatement	num_elems = ( * * cmsg_len - data_offset ) / sizeof ( int )	1441:1:41564:41616	1301835	8	True				
ANR	1301948	AssignmentExpression	num_elems = ( * * cmsg_len - data_offset ) / sizeof ( int )		1301835	0		=			
ANR	1301949	Identifier	num_elems		1301835	0					
ANR	1301950	MultiplicativeExpression	( * * cmsg_len - data_offset ) / sizeof ( int )		1301835	1		/			
ANR	1301951	AdditiveExpression	* * cmsg_len - data_offset		1301835	0		-			
ANR	1301952	UnaryOperationExpression	* * cmsg_len		1301835	0					
ANR	1301953	UnaryOperator	*		1301835	0					
ANR	1301954	UnaryOperationExpression	* cmsg_len		1301835	1					
ANR	1301955	UnaryOperator	*		1301835	0					
ANR	1301956	Identifier	cmsg_len		1301835	1					
ANR	1301957	Identifier	data_offset		1301835	1					
ANR	1301958	SizeofExpression	sizeof ( int )		1301835	1					
ANR	1301959	Sizeof	sizeof		1301835	0					
ANR	1301960	SizeofOperand	int		1301835	1					
ANR	1301961	ExpressionStatement	"array_init_size ( zv , num_elems )"	1443:1:41620:41650	1301835	9	True				
ANR	1301962	CallExpression	"array_init_size ( zv , num_elems )"		1301835	0					
ANR	1301963	Callee	array_init_size		1301835	0					
ANR	1301964	Identifier	array_init_size		1301835	0					
ANR	1301965	ArgumentList	zv		1301835	1					
ANR	1301966	Argument	zv		1301835	0					
ANR	1301967	Identifier	zv		1301835	0					
ANR	1301968	Argument	num_elems		1301835	1					
ANR	1301969	Identifier	num_elems		1301835	0					
ANR	1301970	ForStatement	for ( i = 0 ; i < num_elems ; i ++ )		1301835	10					
ANR	1301971	ForInit	i = 0 ;	1445:6:41659:41664	1301835	0	True				
ANR	1301972	AssignmentExpression	i = 0		1301835	0		=			
ANR	1301973	Identifier	i		1301835	0					
ANR	1301974	PrimaryExpression	0		1301835	1					
ANR	1301975	Condition	i < num_elems	1445:13:41666:41678	1301835	1	True				
ANR	1301976	RelationalExpression	i < num_elems		1301835	0		<			
ANR	1301977	Identifier	i		1301835	0					
ANR	1301978	Identifier	num_elems		1301835	1					
ANR	1301979	PostIncDecOperationExpression	i ++	1445:28:41681:41683	1301835	2	True				
ANR	1301980	Identifier	i		1301835	0					
ANR	1301981	IncDec	++		1301835	1					
ANR	1301982	CompoundStatement		30:2:744:763	1301835	3					
ANR	1301983	IdentifierDeclStatement	zval * elem ;	1446:2:41690:41701	1301835	0	True				
ANR	1301984	IdentifierDecl	* elem		1301835	0					
ANR	1301985	IdentifierDeclType	zval *		1301835	0					
ANR	1301986	Identifier	elem		1301835	1					
ANR	1301987	IdentifierDeclStatement	int fd ;	1447:2:41705:41713	1301835	1	True				
ANR	1301988	IdentifierDecl	fd		1301835	0					
ANR	1301989	IdentifierDeclType	int		1301835	0					
ANR	1301990	Identifier	fd		1301835	1					
ANR	1301991	IdentifierDeclStatement	struct stat statbuf ;	1448:2:41717:41736	1301835	2	True				
ANR	1301992	IdentifierDecl	statbuf		1301835	0					
ANR	1301993	IdentifierDeclType	struct stat		1301835	0					
ANR	1301994	Identifier	statbuf		1301835	1					
ANR	1301995	ExpressionStatement	MAKE_STD_ZVAL ( elem )	1450:2:41741:41760	1301835	3	True				
ANR	1301996	CallExpression	MAKE_STD_ZVAL ( elem )		1301835	0					
ANR	1301997	Callee	MAKE_STD_ZVAL		1301835	0					
ANR	1301998	Identifier	MAKE_STD_ZVAL		1301835	0					
ANR	1301999	ArgumentList	elem		1301835	1					
ANR	1302000	Argument	elem		1301835	0					
ANR	1302001	Identifier	elem		1301835	0					
ANR	1302002	ExpressionStatement	fd = * ( ( int * ) data + i )	1452:2:41765:41788	1301835	4	True				
ANR	1302003	AssignmentExpression	fd = * ( ( int * ) data + i )		1301835	0		=			
ANR	1302004	Identifier	fd		1301835	0					
ANR	1302005	UnaryOperationExpression	* ( ( int * ) data + i )		1301835	1					
ANR	1302006	UnaryOperator	*		1301835	0					
ANR	1302007	AdditiveExpression	( int * ) data + i		1301835	1		+			
ANR	1302008	CastExpression	( int * ) data		1301835	0					
ANR	1302009	CastTarget	int *		1301835	0					
ANR	1302010	Identifier	data		1301835	1					
ANR	1302011	Identifier	i		1301835	1					
ANR	1302012	IfStatement	"if ( fstat ( fd , & statbuf ) == - 1 )"		1301835	5					
ANR	1302013	Condition	"fstat ( fd , & statbuf ) == - 1"	1455:6:41840:41864	1301835	0	True				
ANR	1302014	EqualityExpression	"fstat ( fd , & statbuf ) == - 1"		1301835	0		==			
ANR	1302015	CallExpression	"fstat ( fd , & statbuf )"		1301835	0					
ANR	1302016	Callee	fstat		1301835	0					
ANR	1302017	Identifier	fstat		1301835	0					
ANR	1302018	ArgumentList	fd		1301835	1					
ANR	1302019	Argument	fd		1301835	0					
ANR	1302020	Identifier	fd		1301835	0					
ANR	1302021	Argument	& statbuf		1301835	1					
ANR	1302022	UnaryOperationExpression	& statbuf		1301835	0					
ANR	1302023	UnaryOperator	&		1301835	0					
ANR	1302024	Identifier	statbuf		1301835	1					
ANR	1302025	UnaryOperationExpression	- 1		1301835	1					
ANR	1302026	UnaryOperator	-		1301835	0					
ANR	1302027	PrimaryExpression	1		1301835	1					
ANR	1302028	CompoundStatement		37:33:894:894	1301835	1					
ANR	1302029	Statement	do_to_zval_err	1456:3:41872:41885	1301835	0	True				
ANR	1302030	Statement	(	1456:17:41886:41886	1301835	1	True				
ANR	1302031	Statement	ctx	1456:18:41887:41889	1301835	2	True				
ANR	1302032	Statement	","	1456:21:41890:41890	1301835	3	True				
ANR	1302033	Statement	"""error creating resource for received file """	1456:23:41892:41935	1301835	4	True				
ANR	1302034	Statement	"""descriptor %d: fstat() call failed with errno %d"""	1457:5:41942:41991	1301835	5	True				
ANR	1302035	Statement	","	1457:55:41992:41992	1301835	6	True				
ANR	1302036	Statement	fd	1457:57:41994:41995	1301835	7	True				
ANR	1302037	Statement	","	1457:59:41996:41996	1301835	8	True				
ANR	1302038	Statement	errno	1457:61:41998:42002	1301835	9	True				
ANR	1302039	Statement	)	1457:66:42003:42003	1301835	10	True				
ANR	1302040	ExpressionStatement		1457:67:42004:42004	1301835	11	True				
ANR	1302041	ExpressionStatement	efree ( elem )	1458:3:42009:42020	1301835	12	True				
ANR	1302042	CallExpression	efree ( elem )		1301835	0					
ANR	1302043	Callee	efree		1301835	0					
ANR	1302044	Identifier	efree		1301835	0					
ANR	1302045	ArgumentList	elem		1301835	1					
ANR	1302046	Argument	elem		1301835	0					
ANR	1302047	Identifier	elem		1301835	0					
ANR	1302048	ReturnStatement	return ;	1459:3:42025:42031	1301835	13	True				
ANR	1302049	IfStatement	if ( S_ISSOCK ( statbuf . st_mode ) )		1301835	6					
ANR	1302050	Condition	S_ISSOCK ( statbuf . st_mode )	1461:6:42043:42067	1301835	0	True				
ANR	1302051	CallExpression	S_ISSOCK ( statbuf . st_mode )		1301835	0					
ANR	1302052	Callee	S_ISSOCK		1301835	0					
ANR	1302053	Identifier	S_ISSOCK		1301835	0					
ANR	1302054	ArgumentList	statbuf . st_mode		1301835	1					
ANR	1302055	Argument	statbuf . st_mode		1301835	0					
ANR	1302056	MemberAccess	statbuf . st_mode		1301835	0					
ANR	1302057	Identifier	statbuf		1301835	0					
ANR	1302058	Identifier	st_mode		1301835	1					
ANR	1302059	CompoundStatement		43:33:1097:1097	1301835	1					
ANR	1302060	Statement	php_socket	1462:3:42075:42084	1301835	0	True				
ANR	1302061	Statement	*	1462:14:42086:42086	1301835	1	True				
ANR	1302062	Statement	sock	1462:15:42087:42090	1301835	2	True				
ANR	1302063	Statement	=	1462:20:42092:42092	1301835	3	True				
ANR	1302064	Statement	socket_import_file_descriptor	1462:22:42094:42122	1301835	4	True				
ANR	1302065	Statement	(	1462:51:42123:42123	1301835	5	True				
ANR	1302066	Statement	fd	1462:52:42124:42125	1301835	6	True				
ANR	1302067	Statement	TSRMLS_CC	1462:55:42127:42135	1301835	7	True				
ANR	1302068	Statement	)	1462:64:42136:42136	1301835	8	True				
ANR	1302069	ExpressionStatement		1462:65:42137:42137	1301835	9	True				
ANR	1302070	Statement	zend_register_resource	1463:3:42142:42163	1301835	10	True				
ANR	1302071	Statement	(	1463:25:42164:42164	1301835	11	True				
ANR	1302072	Statement	elem	1463:26:42165:42168	1301835	12	True				
ANR	1302073	Statement	","	1463:30:42169:42169	1301835	13	True				
ANR	1302074	Statement	sock	1463:32:42171:42174	1301835	14	True				
ANR	1302075	Statement	","	1463:36:42175:42175	1301835	15	True				
ANR	1302076	Statement	php_sockets_le_socket	1463:38:42177:42197	1301835	16	True				
ANR	1302077	Statement	(	1463:59:42198:42198	1301835	17	True				
ANR	1302078	Statement	)	1463:60:42199:42199	1301835	18	True				
ANR	1302079	Statement	TSRMLS_CC	1463:62:42201:42209	1301835	19	True				
ANR	1302080	Statement	)	1463:71:42210:42210	1301835	20	True				
ANR	1302081	ExpressionStatement		1463:72:42211:42211	1301835	21	True				
ANR	1302082	ElseStatement	else		1301835	0					
ANR	1302083	CompoundStatement		47:3:1254:1315	1301835	0					
ANR	1302084	IdentifierDeclStatement	"php_stream * stream = php_stream_fopen_from_fd ( fd , ""rw"" , NULL ) ;"	1465:3:42227:42288	1301835	0	True				
ANR	1302085	IdentifierDecl	"* stream = php_stream_fopen_from_fd ( fd , ""rw"" , NULL )"		1301835	0					
ANR	1302086	IdentifierDeclType	php_stream *		1301835	0					
ANR	1302087	Identifier	stream		1301835	1					
ANR	1302088	AssignmentExpression	"* stream = php_stream_fopen_from_fd ( fd , ""rw"" , NULL )"		1301835	2		=			
ANR	1302089	Identifier	stream		1301835	0					
ANR	1302090	CallExpression	"php_stream_fopen_from_fd ( fd , ""rw"" , NULL )"		1301835	1					
ANR	1302091	Callee	php_stream_fopen_from_fd		1301835	0					
ANR	1302092	Identifier	php_stream_fopen_from_fd		1301835	0					
ANR	1302093	ArgumentList	fd		1301835	1					
ANR	1302094	Argument	fd		1301835	0					
ANR	1302095	Identifier	fd		1301835	0					
ANR	1302096	Argument	"""rw"""		1301835	1					
ANR	1302097	PrimaryExpression	"""rw"""		1301835	0					
ANR	1302098	Argument	NULL		1301835	2					
ANR	1302099	Identifier	NULL		1301835	0					
ANR	1302100	ExpressionStatement	"php_stream_to_zval ( stream , elem )"	1466:3:42293:42325	1301835	1	True				
ANR	1302101	CallExpression	"php_stream_to_zval ( stream , elem )"		1301835	0					
ANR	1302102	Callee	php_stream_to_zval		1301835	0					
ANR	1302103	Identifier	php_stream_to_zval		1301835	0					
ANR	1302104	ArgumentList	stream		1301835	1					
ANR	1302105	Argument	stream		1301835	0					
ANR	1302106	Identifier	stream		1301835	0					
ANR	1302107	Argument	elem		1301835	1					
ANR	1302108	Identifier	elem		1301835	0					
ANR	1302109	ExpressionStatement	"add_next_index_zval ( zv , elem )"	1469:2:42334:42363	1301835	7	True				
ANR	1302110	CallExpression	"add_next_index_zval ( zv , elem )"		1301835	0					
ANR	1302111	Callee	add_next_index_zval		1301835	0					
ANR	1302112	Identifier	add_next_index_zval		1301835	0					
ANR	1302113	ArgumentList	zv		1301835	1					
ANR	1302114	Argument	zv		1301835	0					
ANR	1302115	Identifier	zv		1301835	0					
ANR	1302116	Argument	elem		1301835	1					
ANR	1302117	Identifier	elem		1301835	0					
ANR	1302118	ReturnType	void		1301835	1					
ANR	1302119	Identifier	to_zval_read_fd_array		1301835	2					
ANR	1302120	ParameterList	"const char * data , zval * zv , res_context * ctx"		1301835	3					
ANR	1302121	Parameter	const char * data	1418:27:40926:40941	1301835	0	True				
ANR	1302122	ParameterType	const char *		1301835	0					
ANR	1302123	Identifier	data		1301835	1					
ANR	1302124	Parameter	zval * zv	1418:45:40944:40951	1301835	1	True				
ANR	1302125	ParameterType	zval *		1301835	0					
ANR	1302126	Identifier	zv		1301835	1					
ANR	1302127	Parameter	res_context * ctx	1418:55:40954:40969	1301835	2	True				
ANR	1302128	ParameterType	res_context *		1301835	0					
ANR	1302129	Identifier	ctx		1301835	1					
ANR	1302130	CFGEntryNode	ENTRY		1301835		True				
ANR	1302131	CFGExitNode	EXIT		1301835		True				
ANR	1302132	Symbol	CMSG_DATA		1301835						
ANR	1302133	Symbol	* cmsg_len		1301835						
ANR	1302134	Symbol	data		1301835						
ANR	1302135	Symbol	php_stream_fopen_from_fd		1301835						
ANR	1302136	Symbol	* * cmsg_len		1301835						
ANR	1302137	Symbol	zend_hash_find		1301835						
ANR	1302138	Symbol	stream		1301835						
ANR	1302139	Symbol	& statbuf		1301835						
ANR	1302140	Symbol	elem		1301835						
ANR	1302141	Symbol	statbuf . st_mode		1301835						
ANR	1302142	Symbol	S_ISSOCK		1301835						
ANR	1302143	Symbol	NULL		1301835						
ANR	1302144	Symbol	cmsg_len		1301835						
ANR	1302145	Symbol	ctx		1301835						
ANR	1302146	Symbol	i		1301835						
ANR	1302147	Symbol	fstat		1301835						
ANR	1302148	Symbol	& cmsg_len		1301835						
ANR	1302149	Symbol	* ( ( int * ) data + i )		1301835						
ANR	1302150	Symbol	data_offset		1301835						
ANR	1302151	Symbol	FAILURE		1301835						
ANR	1302152	Symbol	* i		1301835						
ANR	1302153	Symbol	statbuf		1301835						
ANR	1302154	Symbol	KEY_CMSG_LEN		1301835						
ANR	1302155	Symbol	dummy_cmsg		1301835						
ANR	1302156	Symbol	& ctx -> params		1301835						
ANR	1302157	Symbol	zv		1301835						
ANR	1302158	Symbol	num_elems		1301835						
ANR	1302159	Symbol	* data		1301835						
ANR	1302160	Symbol	fd		1301835						
ANR	1302161	Function	free_from_zval_allocation	1475:0:42412:42505							
ANR	1302162	FunctionDef	free_from_zval_allocation (void * alloc_ptr_ptr)		1302161	0					
ANR	1302163	CompoundStatement		1476:0:42471:42505	1302161	0					
ANR	1302164	ExpressionStatement	efree ( * ( void * * ) alloc_ptr_ptr )	1477:1:42474:42503	1302161	0	True				
ANR	1302165	CallExpression	efree ( * ( void * * ) alloc_ptr_ptr )		1302161	0					
ANR	1302166	Callee	efree		1302161	0					
ANR	1302167	Identifier	efree		1302161	0					
ANR	1302168	ArgumentList	* ( void * * ) alloc_ptr_ptr		1302161	1					
ANR	1302169	Argument	* ( void * * ) alloc_ptr_ptr		1302161	0					
ANR	1302170	UnaryOperationExpression	* ( void * * ) alloc_ptr_ptr		1302161	0					
ANR	1302171	UnaryOperator	*		1302161	0					
ANR	1302172	CastExpression	( void * * ) alloc_ptr_ptr		1302161	1					
ANR	1302173	CastTarget	void * *		1302161	0					
ANR	1302174	Identifier	alloc_ptr_ptr		1302161	1					
ANR	1302175	ReturnType	static void		1302161	1					
ANR	1302176	Identifier	free_from_zval_allocation		1302161	2					
ANR	1302177	ParameterList	void * alloc_ptr_ptr		1302161	3					
ANR	1302178	Parameter	void * alloc_ptr_ptr	1475:38:42450:42468	1302161	0	True				
ANR	1302179	ParameterType	void *		1302161	0					
ANR	1302180	Identifier	alloc_ptr_ptr		1302161	1					
ANR	1302181	CFGEntryNode	ENTRY		1302161		True				
ANR	1302182	CFGExitNode	EXIT		1302161		True				
ANR	1302183	Symbol	alloc_ptr_ptr		1302161						
ANR	1302184	Symbol	* ( void * * ) alloc_ptr_ptr		1302161						
ANR	1302185	Symbol	* alloc_ptr_ptr		1302161						
ANR	1302186	Function	from_zval_run_conversions	1479:0:42507:43630							
ANR	1302187	FunctionDef	"from_zval_run_conversions (const zval * container , php_socket * sock , from_zval_write_field * writer , size_t struct_size , const char * top_name , zend_llist * * allocations , struct err_s * err)"		1302186	0					
ANR	1302188	CompoundStatement		1486:0:42782:43630	1302186	0					
ANR	1302189	IdentifierDeclStatement	ser_context ctx = { { 0 } } ;	1487:1:42785:42808	1302186	0	True				
ANR	1302190	IdentifierDecl	ctx = { { 0 } }		1302186	0					
ANR	1302191	IdentifierDeclType	ser_context		1302186	0					
ANR	1302192	Identifier	ctx		1302186	1					
ANR	1302193	AssignmentExpression	ctx = { { 0 } }		1302186	2		=			
ANR	1302194	Identifier	ctx		1302186	0					
ANR	1302195	InitializerList	0		1302186	1					
ANR	1302196	InitializerList	0		1302186	0					
ANR	1302197	PrimaryExpression	0		1302186	0					
ANR	1302198	IdentifierDeclStatement	char * structure = NULL ;	1488:1:42811:42833	1302186	1	True				
ANR	1302199	IdentifierDecl	* structure = NULL		1302186	0					
ANR	1302200	IdentifierDeclType	char *		1302186	0					
ANR	1302201	Identifier	structure		1302186	1					
ANR	1302202	AssignmentExpression	* structure = NULL		1302186	2		=			
ANR	1302203	Identifier	NULL		1302186	0					
ANR	1302204	Identifier	NULL		1302186	1					
ANR	1302205	ExpressionStatement	* allocations = NULL	1490:1:42837:42856	1302186	2	True				
ANR	1302206	AssignmentExpression	* allocations = NULL		1302186	0		=			
ANR	1302207	UnaryOperationExpression	* allocations		1302186	0					
ANR	1302208	UnaryOperator	*		1302186	0					
ANR	1302209	Identifier	allocations		1302186	1					
ANR	1302210	Identifier	NULL		1302186	1					
ANR	1302211	IfStatement	if ( err -> has_error )		1302186	3					
ANR	1302212	Condition	err -> has_error	1492:5:42864:42877	1302186	0	True				
ANR	1302213	PtrMemberAccess	err -> has_error		1302186	0					
ANR	1302214	Identifier	err		1302186	0					
ANR	1302215	Identifier	has_error		1302186	1					
ANR	1302216	CompoundStatement		7:21:97:97	1302186	1					
ANR	1302217	ReturnStatement	return NULL ;	1493:2:42884:42895	1302186	0	True				
ANR	1302218	Identifier	NULL		1302186	0					
ANR	1302219	ExpressionStatement	"zend_hash_init ( & ctx . params , 8 , NULL , NULL , 0 )"	1496:1:42902:42947	1302186	4	True				
ANR	1302220	CallExpression	"zend_hash_init ( & ctx . params , 8 , NULL , NULL , 0 )"		1302186	0					
ANR	1302221	Callee	zend_hash_init		1302186	0					
ANR	1302222	Identifier	zend_hash_init		1302186	0					
ANR	1302223	ArgumentList	& ctx . params		1302186	1					
ANR	1302224	Argument	& ctx . params		1302186	0					
ANR	1302225	UnaryOperationExpression	& ctx . params		1302186	0					
ANR	1302226	UnaryOperator	&		1302186	0					
ANR	1302227	MemberAccess	ctx . params		1302186	1					
ANR	1302228	Identifier	ctx		1302186	0					
ANR	1302229	Identifier	params		1302186	1					
ANR	1302230	Argument	8		1302186	1					
ANR	1302231	PrimaryExpression	8		1302186	0					
ANR	1302232	Argument	NULL		1302186	2					
ANR	1302233	Identifier	NULL		1302186	0					
ANR	1302234	Argument	NULL		1302186	3					
ANR	1302235	Identifier	NULL		1302186	0					
ANR	1302236	Argument	0		1302186	4					
ANR	1302237	PrimaryExpression	0		1302186	0					
ANR	1302238	ExpressionStatement	"zend_llist_init ( & ctx . keys , sizeof ( const char * ) , NULL , 0 )"	1497:1:42950:43007	1302186	5	True				
ANR	1302239	CallExpression	"zend_llist_init ( & ctx . keys , sizeof ( const char * ) , NULL , 0 )"		1302186	0					
ANR	1302240	Callee	zend_llist_init		1302186	0					
ANR	1302241	Identifier	zend_llist_init		1302186	0					
ANR	1302242	ArgumentList	& ctx . keys		1302186	1					
ANR	1302243	Argument	& ctx . keys		1302186	0					
ANR	1302244	UnaryOperationExpression	& ctx . keys		1302186	0					
ANR	1302245	UnaryOperator	&		1302186	0					
ANR	1302246	MemberAccess	ctx . keys		1302186	1					
ANR	1302247	Identifier	ctx		1302186	0					
ANR	1302248	Identifier	keys		1302186	1					
ANR	1302249	Argument	sizeof ( const char * )		1302186	1					
ANR	1302250	SizeofExpression	sizeof ( const char * )		1302186	0					
ANR	1302251	Sizeof	sizeof		1302186	0					
ANR	1302252	SizeofOperand	const char *		1302186	1					
ANR	1302253	Argument	NULL		1302186	2					
ANR	1302254	Identifier	NULL		1302186	0					
ANR	1302255	Argument	0		1302186	3					
ANR	1302256	PrimaryExpression	0		1302186	0					
ANR	1302257	ExpressionStatement	"zend_llist_init ( & ctx . allocations , sizeof ( void * ) , & free_from_zval_allocation , 0 )"	1498:1:43010:43090	1302186	6	True				
ANR	1302258	CallExpression	"zend_llist_init ( & ctx . allocations , sizeof ( void * ) , & free_from_zval_allocation , 0 )"		1302186	0					
ANR	1302259	Callee	zend_llist_init		1302186	0					
ANR	1302260	Identifier	zend_llist_init		1302186	0					
ANR	1302261	ArgumentList	& ctx . allocations		1302186	1					
ANR	1302262	Argument	& ctx . allocations		1302186	0					
ANR	1302263	UnaryOperationExpression	& ctx . allocations		1302186	0					
ANR	1302264	UnaryOperator	&		1302186	0					
ANR	1302265	MemberAccess	ctx . allocations		1302186	1					
ANR	1302266	Identifier	ctx		1302186	0					
ANR	1302267	Identifier	allocations		1302186	1					
ANR	1302268	Argument	sizeof ( void * )		1302186	1					
ANR	1302269	SizeofExpression	sizeof ( void * )		1302186	0					
ANR	1302270	Sizeof	sizeof		1302186	0					
ANR	1302271	SizeofOperand	void *		1302186	1					
ANR	1302272	Argument	& free_from_zval_allocation		1302186	2					
ANR	1302273	UnaryOperationExpression	& free_from_zval_allocation		1302186	0					
ANR	1302274	UnaryOperator	&		1302186	0					
ANR	1302275	Identifier	free_from_zval_allocation		1302186	1					
ANR	1302276	Argument	0		1302186	3					
ANR	1302277	PrimaryExpression	0		1302186	0					
ANR	1302278	ExpressionStatement	ctx . sock = sock	1499:1:43093:43108	1302186	7	True				
ANR	1302279	AssignmentExpression	ctx . sock = sock		1302186	0		=			
ANR	1302280	MemberAccess	ctx . sock		1302186	0					
ANR	1302281	Identifier	ctx		1302186	0					
ANR	1302282	Identifier	sock		1302186	1					
ANR	1302283	Identifier	sock		1302186	1					
ANR	1302284	ExpressionStatement	"structure = ecalloc ( 1 , struct_size )"	1501:1:43112:43147	1302186	8	True				
ANR	1302285	AssignmentExpression	"structure = ecalloc ( 1 , struct_size )"		1302186	0		=			
ANR	1302286	Identifier	structure		1302186	0					
ANR	1302287	CallExpression	"ecalloc ( 1 , struct_size )"		1302186	1					
ANR	1302288	Callee	ecalloc		1302186	0					
ANR	1302289	Identifier	ecalloc		1302186	0					
ANR	1302290	ArgumentList	1		1302186	1					
ANR	1302291	Argument	1		1302186	0					
ANR	1302292	PrimaryExpression	1		1302186	0					
ANR	1302293	Argument	struct_size		1302186	1					
ANR	1302294	Identifier	struct_size		1302186	0					
ANR	1302295	ExpressionStatement	"zend_llist_add_element ( & ctx . keys , & top_name )"	1503:1:43151:43195	1302186	9	True				
ANR	1302296	CallExpression	"zend_llist_add_element ( & ctx . keys , & top_name )"		1302186	0					
ANR	1302297	Callee	zend_llist_add_element		1302186	0					
ANR	1302298	Identifier	zend_llist_add_element		1302186	0					
ANR	1302299	ArgumentList	& ctx . keys		1302186	1					
ANR	1302300	Argument	& ctx . keys		1302186	0					
ANR	1302301	UnaryOperationExpression	& ctx . keys		1302186	0					
ANR	1302302	UnaryOperator	&		1302186	0					
ANR	1302303	MemberAccess	ctx . keys		1302186	1					
ANR	1302304	Identifier	ctx		1302186	0					
ANR	1302305	Identifier	keys		1302186	1					
ANR	1302306	Argument	& top_name		1302186	1					
ANR	1302307	UnaryOperationExpression	& top_name		1302186	0					
ANR	1302308	UnaryOperator	&		1302186	0					
ANR	1302309	Identifier	top_name		1302186	1					
ANR	1302310	ExpressionStatement	"zend_llist_add_element ( & ctx . allocations , & structure )"	1504:1:43198:43250	1302186	10	True				
ANR	1302311	CallExpression	"zend_llist_add_element ( & ctx . allocations , & structure )"		1302186	0					
ANR	1302312	Callee	zend_llist_add_element		1302186	0					
ANR	1302313	Identifier	zend_llist_add_element		1302186	0					
ANR	1302314	ArgumentList	& ctx . allocations		1302186	1					
ANR	1302315	Argument	& ctx . allocations		1302186	0					
ANR	1302316	UnaryOperationExpression	& ctx . allocations		1302186	0					
ANR	1302317	UnaryOperator	&		1302186	0					
ANR	1302318	MemberAccess	ctx . allocations		1302186	1					
ANR	1302319	Identifier	ctx		1302186	0					
ANR	1302320	Identifier	allocations		1302186	1					
ANR	1302321	Argument	& structure		1302186	1					
ANR	1302322	UnaryOperationExpression	& structure		1302186	0					
ANR	1302323	UnaryOperator	&		1302186	0					
ANR	1302324	Identifier	structure		1302186	1					
ANR	1302325	ExpressionStatement	"writer ( container , structure , & ctx )"	1507:1:43271:43305	1302186	11	True				
ANR	1302326	CallExpression	"writer ( container , structure , & ctx )"		1302186	0					
ANR	1302327	Callee	writer		1302186	0					
ANR	1302328	Identifier	writer		1302186	0					
ANR	1302329	ArgumentList	container		1302186	1					
ANR	1302330	Argument	container		1302186	0					
ANR	1302331	Identifier	container		1302186	0					
ANR	1302332	Argument	structure		1302186	1					
ANR	1302333	Identifier	structure		1302186	0					
ANR	1302334	Argument	& ctx		1302186	2					
ANR	1302335	UnaryOperationExpression	& ctx		1302186	0					
ANR	1302336	UnaryOperator	&		1302186	0					
ANR	1302337	Identifier	ctx		1302186	1					
ANR	1302338	IfStatement	if ( ctx . err . has_error )		1302186	12					
ANR	1302339	Condition	ctx . err . has_error	1509:5:43313:43329	1302186	0	True				
ANR	1302340	MemberAccess	ctx . err . has_error		1302186	0					
ANR	1302341	MemberAccess	ctx . err		1302186	0					
ANR	1302342	Identifier	ctx		1302186	0					
ANR	1302343	Identifier	err		1302186	1					
ANR	1302344	Identifier	has_error		1302186	1					
ANR	1302345	CompoundStatement		24:24:549:549	1302186	1					
ANR	1302346	ExpressionStatement	zend_llist_destroy ( & ctx . allocations )	1510:2:43336:43372	1302186	0	True				
ANR	1302347	CallExpression	zend_llist_destroy ( & ctx . allocations )		1302186	0					
ANR	1302348	Callee	zend_llist_destroy		1302186	0					
ANR	1302349	Identifier	zend_llist_destroy		1302186	0					
ANR	1302350	ArgumentList	& ctx . allocations		1302186	1					
ANR	1302351	Argument	& ctx . allocations		1302186	0					
ANR	1302352	UnaryOperationExpression	& ctx . allocations		1302186	0					
ANR	1302353	UnaryOperator	&		1302186	0					
ANR	1302354	MemberAccess	ctx . allocations		1302186	1					
ANR	1302355	Identifier	ctx		1302186	0					
ANR	1302356	Identifier	allocations		1302186	1					
ANR	1302357	ExpressionStatement	structure = NULL	1511:2:43412:43428	1302186	1	True				
ANR	1302358	AssignmentExpression	structure = NULL		1302186	0		=			
ANR	1302359	Identifier	structure		1302186	0					
ANR	1302360	Identifier	NULL		1302186	1					
ANR	1302361	ExpressionStatement	* err = ctx . err	1512:2:43432:43446	1302186	2	True				
ANR	1302362	AssignmentExpression	* err = ctx . err		1302186	0		=			
ANR	1302363	UnaryOperationExpression	* err		1302186	0					
ANR	1302364	UnaryOperator	*		1302186	0					
ANR	1302365	Identifier	err		1302186	1					
ANR	1302366	MemberAccess	ctx . err		1302186	1					
ANR	1302367	Identifier	ctx		1302186	0					
ANR	1302368	Identifier	err		1302186	1					
ANR	1302369	ElseStatement	else		1302186	0					
ANR	1302370	CompoundStatement		28:8:673:673	1302186	0					
ANR	1302371	ExpressionStatement	* allocations = emalloc ( sizeof * * allocations )	1514:2:43460:43504	1302186	0	True				
ANR	1302372	AssignmentExpression	* allocations = emalloc ( sizeof * * allocations )		1302186	0		=			
ANR	1302373	UnaryOperationExpression	* allocations		1302186	0					
ANR	1302374	UnaryOperator	*		1302186	0					
ANR	1302375	Identifier	allocations		1302186	1					
ANR	1302376	CallExpression	emalloc ( sizeof * * allocations )		1302186	1					
ANR	1302377	Callee	emalloc		1302186	0					
ANR	1302378	Identifier	emalloc		1302186	0					
ANR	1302379	ArgumentList	sizeof * * allocations		1302186	1					
ANR	1302380	Argument	sizeof * * allocations		1302186	0					
ANR	1302381	SizeofExpression	sizeof * * allocations		1302186	0					
ANR	1302382	Sizeof	sizeof		1302186	0					
ANR	1302383	UnaryOperationExpression	* * allocations		1302186	1					
ANR	1302384	UnaryOperator	*		1302186	0					
ANR	1302385	UnaryOperationExpression	* allocations		1302186	1					
ANR	1302386	UnaryOperator	*		1302186	0					
ANR	1302387	Identifier	allocations		1302186	1					
ANR	1302388	ExpressionStatement	* * allocations = ctx . allocations	1515:2:43508:43539	1302186	1	True				
ANR	1302389	AssignmentExpression	* * allocations = ctx . allocations		1302186	0		=			
ANR	1302390	UnaryOperationExpression	* * allocations		1302186	0					
ANR	1302391	UnaryOperator	*		1302186	0					
ANR	1302392	UnaryOperationExpression	* allocations		1302186	1					
ANR	1302393	UnaryOperator	*		1302186	0					
ANR	1302394	Identifier	allocations		1302186	1					
ANR	1302395	MemberAccess	ctx . allocations		1302186	1					
ANR	1302396	Identifier	ctx		1302186	0					
ANR	1302397	Identifier	allocations		1302186	1					
ANR	1302398	ExpressionStatement	zend_llist_destroy ( & ctx . keys )	1518:1:43546:43575	1302186	13	True				
ANR	1302399	CallExpression	zend_llist_destroy ( & ctx . keys )		1302186	0					
ANR	1302400	Callee	zend_llist_destroy		1302186	0					
ANR	1302401	Identifier	zend_llist_destroy		1302186	0					
ANR	1302402	ArgumentList	& ctx . keys		1302186	1					
ANR	1302403	Argument	& ctx . keys		1302186	0					
ANR	1302404	UnaryOperationExpression	& ctx . keys		1302186	0					
ANR	1302405	UnaryOperator	&		1302186	0					
ANR	1302406	MemberAccess	ctx . keys		1302186	1					
ANR	1302407	Identifier	ctx		1302186	0					
ANR	1302408	Identifier	keys		1302186	1					
ANR	1302409	ExpressionStatement	zend_hash_destroy ( & ctx . params )	1519:1:43578:43608	1302186	14	True				
ANR	1302410	CallExpression	zend_hash_destroy ( & ctx . params )		1302186	0					
ANR	1302411	Callee	zend_hash_destroy		1302186	0					
ANR	1302412	Identifier	zend_hash_destroy		1302186	0					
ANR	1302413	ArgumentList	& ctx . params		1302186	1					
ANR	1302414	Argument	& ctx . params		1302186	0					
ANR	1302415	UnaryOperationExpression	& ctx . params		1302186	0					
ANR	1302416	UnaryOperator	&		1302186	0					
ANR	1302417	MemberAccess	ctx . params		1302186	1					
ANR	1302418	Identifier	ctx		1302186	0					
ANR	1302419	Identifier	params		1302186	1					
ANR	1302420	ReturnStatement	return structure ;	1521:1:43612:43628	1302186	15	True				
ANR	1302421	Identifier	structure		1302186	0					
ANR	1302422	ReturnType	void *		1302186	1					
ANR	1302423	Identifier	from_zval_run_conversions		1302186	2					
ANR	1302424	ParameterList	"const zval * container , php_socket * sock , from_zval_write_field * writer , size_t struct_size , const char * top_name , zend_llist * * allocations , struct err_s * err"		1302186	3					
ANR	1302425	Parameter	const zval * container	1479:32:42539:42561	1302186	0	True				
ANR	1302426	ParameterType	const zval *		1302186	0					
ANR	1302427	Identifier	container		1302186	1					
ANR	1302428	Parameter	php_socket * sock	1480:8:42572:42589	1302186	1	True				
ANR	1302429	ParameterType	php_socket *		1302186	0					
ANR	1302430	Identifier	sock		1302186	1					
ANR	1302431	Parameter	from_zval_write_field * writer	1481:8:42600:42628	1302186	2	True				
ANR	1302432	ParameterType	from_zval_write_field *		1302186	0					
ANR	1302433	Identifier	writer		1302186	1					
ANR	1302434	Parameter	size_t struct_size	1482:8:42639:42659	1302186	3	True				
ANR	1302435	ParameterType	size_t		1302186	0					
ANR	1302436	Identifier	struct_size		1302186	1					
ANR	1302437	Parameter	const char * top_name	1483:8:42670:42691	1302186	4	True				
ANR	1302438	ParameterType	const char *		1302186	0					
ANR	1302439	Identifier	top_name		1302186	1					
ANR	1302440	Parameter	zend_llist * * allocations	1484:8:42702:42727	1302186	5	True				
ANR	1302441	ParameterType	zend_llist * *		1302186	0					
ANR	1302442	Identifier	allocations		1302186	1					
ANR	1302443	Parameter	struct err_s * err	1485:8:42748:42766	1302186	6	True				
ANR	1302444	ParameterType	struct err_s *		1302186	0					
ANR	1302445	Identifier	err		1302186	1					
ANR	1302446	CFGEntryNode	ENTRY		1302186		True				
ANR	1302447	CFGExitNode	EXIT		1302186		True				
ANR	1302448	Symbol	container		1302186						
ANR	1302449	Symbol	& ctx . allocations		1302186						
ANR	1302450	Symbol	& structure		1302186						
ANR	1302451	Symbol	& ctx		1302186						
ANR	1302452	Symbol	ctx . allocations		1302186						
ANR	1302453	Symbol	& ctx . params		1302186						
ANR	1302454	Symbol	err -> has_error		1302186						
ANR	1302455	Symbol	& free_from_zval_allocation		1302186						
ANR	1302456	Symbol	emalloc		1302186						
ANR	1302457	Symbol	* * allocations		1302186						
ANR	1302458	Symbol	allocations		1302186						
ANR	1302459	Symbol	ecalloc		1302186						
ANR	1302460	Symbol	top_name		1302186						
ANR	1302461	Symbol	& ctx . keys		1302186						
ANR	1302462	Symbol	NULL		1302186						
ANR	1302463	Symbol	err		1302186						
ANR	1302464	Symbol	ctx . err		1302186						
ANR	1302465	Symbol	ctx		1302186						
ANR	1302466	Symbol	* allocations		1302186						
ANR	1302467	Symbol	ctx . err . has_error		1302186						
ANR	1302468	Symbol	structure		1302186						
ANR	1302469	Symbol	* err		1302186						
ANR	1302470	Symbol	sock		1302186						
ANR	1302471	Symbol	& top_name		1302186						
ANR	1302472	Symbol	struct_size		1302186						
ANR	1302473	Symbol	ctx . sock		1302186						
ANR	1302474	Symbol	writer		1302186						
ANR	1302475	Function	to_zval_run_conversions	1523:0:43632:44510							
ANR	1302476	FunctionDef	"to_zval_run_conversions (const char * structure , to_zval_read_field * reader , const char * top_name , const struct key_value * key_value_pairs , struct err_s * err)"		1302475	0					
ANR	1302477	CompoundStatement		1528:0:43831:44510	1302475	0					
ANR	1302478	IdentifierDeclStatement	"res_context ctx = { { 0 } , { 0 } } ;"	1529:1:43834:43865	1302475	0	True				
ANR	1302479	IdentifierDecl	"ctx = { { 0 } , { 0 } }"		1302475	0					
ANR	1302480	IdentifierDeclType	res_context		1302475	0					
ANR	1302481	Identifier	ctx		1302475	1					
ANR	1302482	AssignmentExpression	"ctx = { { 0 } , { 0 } }"		1302475	2		=			
ANR	1302483	Identifier	ctx		1302475	0					
ANR	1302484	InitializerList	0		1302475	1					
ANR	1302485	InitializerList	0		1302475	0					
ANR	1302486	PrimaryExpression	0		1302475	0					
ANR	1302487	InitializerList	0		1302475	1					
ANR	1302488	PrimaryExpression	0		1302475	0					
ANR	1302489	IdentifierDeclStatement	const struct key_value * kv ;	1530:1:43868:43894	1302475	1	True				
ANR	1302490	IdentifierDecl	* kv		1302475	0					
ANR	1302491	IdentifierDeclType	const struct key_value *		1302475	0					
ANR	1302492	Identifier	kv		1302475	1					
ANR	1302493	IdentifierDeclStatement	zval * zv = NULL ;	1531:1:43897:43916	1302475	2	True				
ANR	1302494	IdentifierDecl	* zv = NULL		1302475	0					
ANR	1302495	IdentifierDeclType	zval *		1302475	0					
ANR	1302496	Identifier	zv		1302475	1					
ANR	1302497	AssignmentExpression	* zv = NULL		1302475	2		=			
ANR	1302498	Identifier	NULL		1302475	0					
ANR	1302499	Identifier	NULL		1302475	1					
ANR	1302500	IfStatement	if ( err -> has_error )		1302475	3					
ANR	1302501	Condition	err -> has_error	1533:5:43924:43937	1302475	0	True				
ANR	1302502	PtrMemberAccess	err -> has_error		1302475	0					
ANR	1302503	Identifier	err		1302475	0					
ANR	1302504	Identifier	has_error		1302475	1					
ANR	1302505	CompoundStatement		6:21:108:108	1302475	1					
ANR	1302506	ReturnStatement	return NULL ;	1534:2:43944:43955	1302475	0	True				
ANR	1302507	Identifier	NULL		1302475	0					
ANR	1302508	ExpressionStatement	ALLOC_INIT_ZVAL ( zv )	1537:1:43962:43981	1302475	4	True				
ANR	1302509	CallExpression	ALLOC_INIT_ZVAL ( zv )		1302475	0					
ANR	1302510	Callee	ALLOC_INIT_ZVAL		1302475	0					
ANR	1302511	Identifier	ALLOC_INIT_ZVAL		1302475	0					
ANR	1302512	ArgumentList	zv		1302475	1					
ANR	1302513	Argument	zv		1302475	0					
ANR	1302514	Identifier	zv		1302475	0					
ANR	1302515	ExpressionStatement	"zend_llist_init ( & ctx . keys , sizeof ( const char * ) , NULL , 0 )"	1539:1:43985:44042	1302475	5	True				
ANR	1302516	CallExpression	"zend_llist_init ( & ctx . keys , sizeof ( const char * ) , NULL , 0 )"		1302475	0					
ANR	1302517	Callee	zend_llist_init		1302475	0					
ANR	1302518	Identifier	zend_llist_init		1302475	0					
ANR	1302519	ArgumentList	& ctx . keys		1302475	1					
ANR	1302520	Argument	& ctx . keys		1302475	0					
ANR	1302521	UnaryOperationExpression	& ctx . keys		1302475	0					
ANR	1302522	UnaryOperator	&		1302475	0					
ANR	1302523	MemberAccess	ctx . keys		1302475	1					
ANR	1302524	Identifier	ctx		1302475	0					
ANR	1302525	Identifier	keys		1302475	1					
ANR	1302526	Argument	sizeof ( const char * )		1302475	1					
ANR	1302527	SizeofExpression	sizeof ( const char * )		1302475	0					
ANR	1302528	Sizeof	sizeof		1302475	0					
ANR	1302529	SizeofOperand	const char *		1302475	1					
ANR	1302530	Argument	NULL		1302475	2					
ANR	1302531	Identifier	NULL		1302475	0					
ANR	1302532	Argument	0		1302475	3					
ANR	1302533	PrimaryExpression	0		1302475	0					
ANR	1302534	ExpressionStatement	"zend_llist_add_element ( & ctx . keys , & top_name )"	1540:1:44045:44089	1302475	6	True				
ANR	1302535	CallExpression	"zend_llist_add_element ( & ctx . keys , & top_name )"		1302475	0					
ANR	1302536	Callee	zend_llist_add_element		1302475	0					
ANR	1302537	Identifier	zend_llist_add_element		1302475	0					
ANR	1302538	ArgumentList	& ctx . keys		1302475	1					
ANR	1302539	Argument	& ctx . keys		1302475	0					
ANR	1302540	UnaryOperationExpression	& ctx . keys		1302475	0					
ANR	1302541	UnaryOperator	&		1302475	0					
ANR	1302542	MemberAccess	ctx . keys		1302475	1					
ANR	1302543	Identifier	ctx		1302475	0					
ANR	1302544	Identifier	keys		1302475	1					
ANR	1302545	Argument	& top_name		1302475	1					
ANR	1302546	UnaryOperationExpression	& top_name		1302475	0					
ANR	1302547	UnaryOperator	&		1302475	0					
ANR	1302548	Identifier	top_name		1302475	1					
ANR	1302549	ExpressionStatement	"zend_hash_init ( & ctx . params , 8 , NULL , NULL , 0 )"	1542:1:44093:44138	1302475	7	True				
ANR	1302550	CallExpression	"zend_hash_init ( & ctx . params , 8 , NULL , NULL , 0 )"		1302475	0					
ANR	1302551	Callee	zend_hash_init		1302475	0					
ANR	1302552	Identifier	zend_hash_init		1302475	0					
ANR	1302553	ArgumentList	& ctx . params		1302475	1					
ANR	1302554	Argument	& ctx . params		1302475	0					
ANR	1302555	UnaryOperationExpression	& ctx . params		1302475	0					
ANR	1302556	UnaryOperator	&		1302475	0					
ANR	1302557	MemberAccess	ctx . params		1302475	1					
ANR	1302558	Identifier	ctx		1302475	0					
ANR	1302559	Identifier	params		1302475	1					
ANR	1302560	Argument	8		1302475	1					
ANR	1302561	PrimaryExpression	8		1302475	0					
ANR	1302562	Argument	NULL		1302475	2					
ANR	1302563	Identifier	NULL		1302475	0					
ANR	1302564	Argument	NULL		1302475	3					
ANR	1302565	Identifier	NULL		1302475	0					
ANR	1302566	Argument	0		1302475	4					
ANR	1302567	PrimaryExpression	0		1302475	0					
ANR	1302568	ForStatement	for ( kv = key_value_pairs ; kv -> key != NULL ; kv ++ )		1302475	8					
ANR	1302569	ForInit	kv = key_value_pairs ;	1543:6:44146:44166	1302475	0	True				
ANR	1302570	AssignmentExpression	kv = key_value_pairs		1302475	0		=			
ANR	1302571	Identifier	kv		1302475	0					
ANR	1302572	Identifier	key_value_pairs		1302475	1					
ANR	1302573	Condition	kv -> key != NULL	1543:28:44168:44182	1302475	1	True				
ANR	1302574	EqualityExpression	kv -> key != NULL		1302475	0		!=			
ANR	1302575	PtrMemberAccess	kv -> key		1302475	0					
ANR	1302576	Identifier	kv		1302475	0					
ANR	1302577	Identifier	key		1302475	1					
ANR	1302578	Identifier	NULL		1302475	1					
ANR	1302579	PostIncDecOperationExpression	kv ++	1543:45:44185:44188	1302475	2	True				
ANR	1302580	Identifier	kv		1302475	0					
ANR	1302581	IncDec	++		1302475	1					
ANR	1302582	CompoundStatement		16:51:359:359	1302475	3					
ANR	1302583	ExpressionStatement	"zend_hash_update ( & ctx . params , kv -> key , kv -> key_size , ( void * ) & kv -> value , sizeof ( kv -> value ) , NULL )"	1544:2:44195:44295	1302475	0	True				
ANR	1302584	CallExpression	"zend_hash_update ( & ctx . params , kv -> key , kv -> key_size , ( void * ) & kv -> value , sizeof ( kv -> value ) , NULL )"		1302475	0					
ANR	1302585	Callee	zend_hash_update		1302475	0					
ANR	1302586	Identifier	zend_hash_update		1302475	0					
ANR	1302587	ArgumentList	& ctx . params		1302475	1					
ANR	1302588	Argument	& ctx . params		1302475	0					
ANR	1302589	UnaryOperationExpression	& ctx . params		1302475	0					
ANR	1302590	UnaryOperator	&		1302475	0					
ANR	1302591	MemberAccess	ctx . params		1302475	1					
ANR	1302592	Identifier	ctx		1302475	0					
ANR	1302593	Identifier	params		1302475	1					
ANR	1302594	Argument	kv -> key		1302475	1					
ANR	1302595	PtrMemberAccess	kv -> key		1302475	0					
ANR	1302596	Identifier	kv		1302475	0					
ANR	1302597	Identifier	key		1302475	1					
ANR	1302598	Argument	kv -> key_size		1302475	2					
ANR	1302599	PtrMemberAccess	kv -> key_size		1302475	0					
ANR	1302600	Identifier	kv		1302475	0					
ANR	1302601	Identifier	key_size		1302475	1					
ANR	1302602	Argument	( void * ) & kv -> value		1302475	3					
ANR	1302603	CastExpression	( void * ) & kv -> value		1302475	0					
ANR	1302604	CastTarget	void *		1302475	0					
ANR	1302605	UnaryOperationExpression	& kv -> value		1302475	1					
ANR	1302606	UnaryOperator	&		1302475	0					
ANR	1302607	PtrMemberAccess	kv -> value		1302475	1					
ANR	1302608	Identifier	kv		1302475	0					
ANR	1302609	Identifier	value		1302475	1					
ANR	1302610	Argument	sizeof ( kv -> value )		1302475	4					
ANR	1302611	SizeofExpression	sizeof ( kv -> value )		1302475	0					
ANR	1302612	Sizeof	sizeof		1302475	0					
ANR	1302613	PtrMemberAccess	kv -> value		1302475	1					
ANR	1302614	Identifier	kv		1302475	0					
ANR	1302615	Identifier	value		1302475	1					
ANR	1302616	Argument	NULL		1302475	5					
ANR	1302617	Identifier	NULL		1302475	0					
ANR	1302618	ExpressionStatement	"reader ( structure , zv , & ctx )"	1549:1:44319:44346	1302475	9	True				
ANR	1302619	CallExpression	"reader ( structure , zv , & ctx )"		1302475	0					
ANR	1302620	Callee	reader		1302475	0					
ANR	1302621	Identifier	reader		1302475	0					
ANR	1302622	ArgumentList	structure		1302475	1					
ANR	1302623	Argument	structure		1302475	0					
ANR	1302624	Identifier	structure		1302475	0					
ANR	1302625	Argument	zv		1302475	1					
ANR	1302626	Identifier	zv		1302475	0					
ANR	1302627	Argument	& ctx		1302475	2					
ANR	1302628	UnaryOperationExpression	& ctx		1302475	0					
ANR	1302629	UnaryOperator	&		1302475	0					
ANR	1302630	Identifier	ctx		1302475	1					
ANR	1302631	IfStatement	if ( ctx . err . has_error )		1302475	10					
ANR	1302632	Condition	ctx . err . has_error	1551:5:44354:44370	1302475	0	True				
ANR	1302633	MemberAccess	ctx . err . has_error		1302475	0					
ANR	1302634	MemberAccess	ctx . err		1302475	0					
ANR	1302635	Identifier	ctx		1302475	0					
ANR	1302636	Identifier	err		1302475	1					
ANR	1302637	Identifier	has_error		1302475	1					
ANR	1302638	CompoundStatement		24:24:541:541	1302475	1					
ANR	1302639	ExpressionStatement	zval_ptr_dtor ( & zv )	1552:2:44377:44395	1302475	0	True				
ANR	1302640	CallExpression	zval_ptr_dtor ( & zv )		1302475	0					
ANR	1302641	Callee	zval_ptr_dtor		1302475	0					
ANR	1302642	Identifier	zval_ptr_dtor		1302475	0					
ANR	1302643	ArgumentList	& zv		1302475	1					
ANR	1302644	Argument	& zv		1302475	0					
ANR	1302645	UnaryOperationExpression	& zv		1302475	0					
ANR	1302646	UnaryOperator	&		1302475	0					
ANR	1302647	Identifier	zv		1302475	1					
ANR	1302648	ExpressionStatement	zv = NULL	1553:2:44399:44408	1302475	1	True				
ANR	1302649	AssignmentExpression	zv = NULL		1302475	0		=			
ANR	1302650	Identifier	zv		1302475	0					
ANR	1302651	Identifier	NULL		1302475	1					
ANR	1302652	ExpressionStatement	* err = ctx . err	1554:2:44412:44426	1302475	2	True				
ANR	1302653	AssignmentExpression	* err = ctx . err		1302475	0		=			
ANR	1302654	UnaryOperationExpression	* err		1302475	0					
ANR	1302655	UnaryOperator	*		1302475	0					
ANR	1302656	Identifier	err		1302475	1					
ANR	1302657	MemberAccess	ctx . err		1302475	1					
ANR	1302658	Identifier	ctx		1302475	0					
ANR	1302659	Identifier	err		1302475	1					
ANR	1302660	ExpressionStatement	zend_llist_destroy ( & ctx . keys )	1557:1:44433:44462	1302475	11	True				
ANR	1302661	CallExpression	zend_llist_destroy ( & ctx . keys )		1302475	0					
ANR	1302662	Callee	zend_llist_destroy		1302475	0					
ANR	1302663	Identifier	zend_llist_destroy		1302475	0					
ANR	1302664	ArgumentList	& ctx . keys		1302475	1					
ANR	1302665	Argument	& ctx . keys		1302475	0					
ANR	1302666	UnaryOperationExpression	& ctx . keys		1302475	0					
ANR	1302667	UnaryOperator	&		1302475	0					
ANR	1302668	MemberAccess	ctx . keys		1302475	1					
ANR	1302669	Identifier	ctx		1302475	0					
ANR	1302670	Identifier	keys		1302475	1					
ANR	1302671	ExpressionStatement	zend_hash_destroy ( & ctx . params )	1558:1:44465:44495	1302475	12	True				
ANR	1302672	CallExpression	zend_hash_destroy ( & ctx . params )		1302475	0					
ANR	1302673	Callee	zend_hash_destroy		1302475	0					
ANR	1302674	Identifier	zend_hash_destroy		1302475	0					
ANR	1302675	ArgumentList	& ctx . params		1302475	1					
ANR	1302676	Argument	& ctx . params		1302475	0					
ANR	1302677	UnaryOperationExpression	& ctx . params		1302475	0					
ANR	1302678	UnaryOperator	&		1302475	0					
ANR	1302679	MemberAccess	ctx . params		1302475	1					
ANR	1302680	Identifier	ctx		1302475	0					
ANR	1302681	Identifier	params		1302475	1					
ANR	1302682	ReturnStatement	return zv ;	1560:1:44499:44508	1302475	13	True				
ANR	1302683	Identifier	zv		1302475	0					
ANR	1302684	ReturnType	zval *		1302475	1					
ANR	1302685	Identifier	to_zval_run_conversions		1302475	2					
ANR	1302686	ParameterList	"const char * structure , to_zval_read_field * reader , const char * top_name , const struct key_value * key_value_pairs , struct err_s * err"		1302475	3					
ANR	1302687	Parameter	const char * structure	1523:30:43662:43682	1302475	0	True				
ANR	1302688	ParameterType	const char *		1302475	0					
ANR	1302689	Identifier	structure		1302475	1					
ANR	1302690	Parameter	to_zval_read_field * reader	1524:9:43694:43719	1302475	1	True				
ANR	1302691	ParameterType	to_zval_read_field *		1302475	0					
ANR	1302692	Identifier	reader		1302475	1					
ANR	1302693	Parameter	const char * top_name	1525:9:43731:43750	1302475	2	True				
ANR	1302694	ParameterType	const char *		1302475	0					
ANR	1302695	Identifier	top_name		1302475	1					
ANR	1302696	Parameter	const struct key_value * key_value_pairs	1526:9:43762:43800	1302475	3	True				
ANR	1302697	ParameterType	const struct key_value *		1302475	0					
ANR	1302698	Identifier	key_value_pairs		1302475	1					
ANR	1302699	Parameter	struct err_s * err	1527:9:43812:43828	1302475	4	True				
ANR	1302700	ParameterType	struct err_s *		1302475	0					
ANR	1302701	Identifier	err		1302475	1					
ANR	1302702	CFGEntryNode	ENTRY		1302475		True				
ANR	1302703	CFGExitNode	EXIT		1302475		True				
ANR	1302704	Symbol	NULL		1302475						
ANR	1302705	Symbol	err		1302475						
ANR	1302706	Symbol	ctx . err		1302475						
ANR	1302707	Symbol	reader		1302475						
ANR	1302708	Symbol	ctx		1302475						
ANR	1302709	Symbol	ctx . err . has_error		1302475						
ANR	1302710	Symbol	& zv		1302475						
ANR	1302711	Symbol	& ctx		1302475						
ANR	1302712	Symbol	kv -> value		1302475						
ANR	1302713	Symbol	key_value_pairs		1302475						
ANR	1302714	Symbol	kv		1302475						
ANR	1302715	Symbol	structure		1302475						
ANR	1302716	Symbol	kv -> key_size		1302475						
ANR	1302717	Symbol	& ctx . params		1302475						
ANR	1302718	Symbol	* err		1302475						
ANR	1302719	Symbol	err -> has_error		1302475						
ANR	1302720	Symbol	& top_name		1302475						
ANR	1302721	Symbol	* kv		1302475						
ANR	1302722	Symbol	kv -> key		1302475						
ANR	1302723	Symbol	& kv -> value		1302475						
ANR	1302724	Symbol	zv		1302475						
ANR	1302725	Symbol	top_name		1302475						
ANR	1302726	Symbol	& ctx . keys		1302475						
