command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	104248	File	data/converged/CVE-2017-11142_php-src/Zend_zend_operators.h								
ANR	104249	DeclStmt									
ANR	104250	Decl							ZEND_API zend_bool	"ZEND_API zend_bool ( const zend_class_entry * instance_ce , const zend_class_entry * ce , zend_bool interfaces_only TSRMLS_DC )"	instanceof_function_ex
ANR	104251	Function	zend_dval_to_lval	77:0:3639:4050							
ANR	104252	FunctionDef	zend_dval_to_lval (double d)		104251	0					
ANR	104253	CompoundStatement		78:0:3698:4050	104251	0					
ANR	104254	IfStatement	if ( d > LONG_MAX || d < LONG_MIN )		104251	0					
ANR	104255	Condition	d > LONG_MAX || d < LONG_MIN	79:5:3705:3732	104251	0	True				
ANR	104256	OrExpression	d > LONG_MAX || d < LONG_MIN		104251	0		||			
ANR	104257	RelationalExpression	d > LONG_MAX		104251	0		>			
ANR	104258	Identifier	d		104251	0					
ANR	104259	Identifier	LONG_MAX		104251	1					
ANR	104260	RelationalExpression	d < LONG_MIN		104251	1		<			
ANR	104261	Identifier	d		104251	0					
ANR	104262	Identifier	LONG_MIN		104251	1					
ANR	104263	CompoundStatement		3:2:40:82	104251	1					
ANR	104264	IdentifierDeclStatement	"double two_pow_32 = pow ( 2. , 32. ) , dmod ;"	80:2:3739:3781	104251	0	True				
ANR	104265	IdentifierDecl	"two_pow_32 = pow ( 2. , 32. )"		104251	0					
ANR	104266	IdentifierDeclType	double		104251	0					
ANR	104267	Identifier	two_pow_32		104251	1					
ANR	104268	AssignmentExpression	"two_pow_32 = pow ( 2. , 32. )"		104251	2		=			
ANR	104269	Identifier	two_pow_32		104251	0					
ANR	104270	CallExpression	"pow ( 2. , 32. )"		104251	1					
ANR	104271	Callee	pow		104251	0					
ANR	104272	Identifier	pow		104251	0					
ANR	104273	ArgumentList	2.		104251	1					
ANR	104274	Argument	2.		104251	0					
ANR	104275	PrimaryExpression	2.		104251	0					
ANR	104276	Argument	32.		104251	1					
ANR	104277	PrimaryExpression	32.		104251	0					
ANR	104278	IdentifierDecl	dmod		104251	1					
ANR	104279	IdentifierDeclType	double		104251	0					
ANR	104280	Identifier	dmod		104251	1					
ANR	104281	ExpressionStatement	"dmod = fmod ( d , two_pow_32 )"	83:2:3786:3812	104251	1	True				
ANR	104282	AssignmentExpression	"dmod = fmod ( d , two_pow_32 )"		104251	0		=			
ANR	104283	Identifier	dmod		104251	0					
ANR	104284	CallExpression	"fmod ( d , two_pow_32 )"		104251	1					
ANR	104285	Callee	fmod		104251	0					
ANR	104286	Identifier	fmod		104251	0					
ANR	104287	ArgumentList	d		104251	1					
ANR	104288	Argument	d		104251	0					
ANR	104289	Identifier	d		104251	0					
ANR	104290	Argument	two_pow_32		104251	1					
ANR	104291	Identifier	two_pow_32		104251	0					
ANR	104292	IfStatement	if ( dmod < 0 )		104251	2					
ANR	104293	Condition	dmod < 0	84:6:3820:3827	104251	0	True				
ANR	104294	RelationalExpression	dmod < 0		104251	0		<			
ANR	104295	Identifier	dmod		104251	0					
ANR	104296	PrimaryExpression	0		104251	1					
ANR	104297	CompoundStatement		7:16:131:131	104251	1					
ANR	104298	ExpressionStatement	dmod = ceil ( dmod ) + two_pow_32	87:3:3958:3988	104251	0	True				
ANR	104299	AssignmentExpression	dmod = ceil ( dmod ) + two_pow_32		104251	0		=			
ANR	104300	Identifier	dmod		104251	0					
ANR	104301	AdditiveExpression	ceil ( dmod ) + two_pow_32		104251	1		+			
ANR	104302	CallExpression	ceil ( dmod )		104251	0					
ANR	104303	Callee	ceil		104251	0					
ANR	104304	Identifier	ceil		104251	0					
ANR	104305	ArgumentList	dmod		104251	1					
ANR	104306	Argument	dmod		104251	0					
ANR	104307	Identifier	dmod		104251	0					
ANR	104308	Identifier	two_pow_32		104251	1					
ANR	104309	ReturnStatement	return ( long ) ( unsigned long ) dmod ;	89:2:3996:4028	104251	3	True				
ANR	104310	CastExpression	( long ) ( unsigned long ) dmod		104251	0					
ANR	104311	CastTarget	long		104251	0					
ANR	104312	CastExpression	( unsigned long ) dmod		104251	1					
ANR	104313	CastTarget	unsigned long		104251	0					
ANR	104314	Identifier	dmod		104251	1					
ANR	104315	ReturnStatement	return ( long ) d ;	91:1:4034:4048	104251	1	True				
ANR	104316	CastExpression	( long ) d		104251	0					
ANR	104317	CastTarget	long		104251	0					
ANR	104318	Identifier	d		104251	1					
ANR	104319	ReturnType	static zend_always_inline long		104251	1					
ANR	104320	Identifier	zend_dval_to_lval		104251	2					
ANR	104321	ParameterList	double d		104251	3					
ANR	104322	Parameter	double d	77:49:3688:3695	104251	0	True				
ANR	104323	ParameterType	double		104251	0					
ANR	104324	Identifier	d		104251	1					
ANR	104325	CFGEntryNode	ENTRY		104251		True				
ANR	104326	CFGExitNode	EXIT		104251		True				
ANR	104327	Symbol	dmod		104251						
ANR	104328	Symbol	two_pow_32		104251						
ANR	104329	Symbol	d		104251						
ANR	104330	Symbol	LONG_MAX		104251						
ANR	104331	Symbol	pow		104251						
ANR	104332	Symbol	LONG_MIN		104251						
ANR	104333	Symbol	ceil		104251						
ANR	104334	Symbol	fmod		104251						
ANR	104335	Function	zend_dval_to_lval	94:0:4058:4512							
ANR	104336	FunctionDef	zend_dval_to_lval (double d)		104335	0					
ANR	104337	CompoundStatement		95:0:4117:4512	104335	0					
ANR	104338	IfStatement	if ( d >= LONG_MAX || d < LONG_MIN )		104335	0					
ANR	104339	Condition	d >= LONG_MAX || d < LONG_MIN	97:5:4178:4206	104335	0	True				
ANR	104340	OrExpression	d >= LONG_MAX || d < LONG_MIN		104335	0		||			
ANR	104341	RelationalExpression	d >= LONG_MAX		104335	0		>=			
ANR	104342	Identifier	d		104335	0					
ANR	104343	Identifier	LONG_MAX		104335	1					
ANR	104344	RelationalExpression	d < LONG_MIN		104335	1		<			
ANR	104345	Identifier	d		104335	0					
ANR	104346	Identifier	LONG_MIN		104335	1					
ANR	104347	CompoundStatement		4:2:95:137	104335	1					
ANR	104348	IdentifierDeclStatement	"double two_pow_64 = pow ( 2. , 64. ) , dmod ;"	98:2:4213:4255	104335	0	True				
ANR	104349	IdentifierDecl	"two_pow_64 = pow ( 2. , 64. )"		104335	0					
ANR	104350	IdentifierDeclType	double		104335	0					
ANR	104351	Identifier	two_pow_64		104335	1					
ANR	104352	AssignmentExpression	"two_pow_64 = pow ( 2. , 64. )"		104335	2		=			
ANR	104353	Identifier	two_pow_64		104335	0					
ANR	104354	CallExpression	"pow ( 2. , 64. )"		104335	1					
ANR	104355	Callee	pow		104335	0					
ANR	104356	Identifier	pow		104335	0					
ANR	104357	ArgumentList	2.		104335	1					
ANR	104358	Argument	2.		104335	0					
ANR	104359	PrimaryExpression	2.		104335	0					
ANR	104360	Argument	64.		104335	1					
ANR	104361	PrimaryExpression	64.		104335	0					
ANR	104362	IdentifierDecl	dmod		104335	1					
ANR	104363	IdentifierDeclType	double		104335	0					
ANR	104364	Identifier	dmod		104335	1					
ANR	104365	ExpressionStatement	"dmod = fmod ( d , two_pow_64 )"	101:2:4260:4286	104335	1	True				
ANR	104366	AssignmentExpression	"dmod = fmod ( d , two_pow_64 )"		104335	0		=			
ANR	104367	Identifier	dmod		104335	0					
ANR	104368	CallExpression	"fmod ( d , two_pow_64 )"		104335	1					
ANR	104369	Callee	fmod		104335	0					
ANR	104370	Identifier	fmod		104335	0					
ANR	104371	ArgumentList	d		104335	1					
ANR	104372	Argument	d		104335	0					
ANR	104373	Identifier	d		104335	0					
ANR	104374	Argument	two_pow_64		104335	1					
ANR	104375	Identifier	two_pow_64		104335	0					
ANR	104376	IfStatement	if ( dmod < 0 )		104335	2					
ANR	104377	Condition	dmod < 0	102:6:4294:4301	104335	0	True				
ANR	104378	RelationalExpression	dmod < 0		104335	0		<			
ANR	104379	Identifier	dmod		104335	0					
ANR	104380	PrimaryExpression	0		104335	1					
ANR	104381	CompoundStatement		8:16:186:186	104335	1					
ANR	104382	ExpressionStatement	dmod += two_pow_64	105:3:4432:4450	104335	0	True				
ANR	104383	AssignmentExpression	dmod += two_pow_64		104335	0		+=			
ANR	104384	Identifier	dmod		104335	0					
ANR	104385	Identifier	two_pow_64		104335	1					
ANR	104386	ReturnStatement	return ( long ) ( unsigned long ) dmod ;	107:2:4458:4490	104335	3	True				
ANR	104387	CastExpression	( long ) ( unsigned long ) dmod		104335	0					
ANR	104388	CastTarget	long		104335	0					
ANR	104389	CastExpression	( unsigned long ) dmod		104335	1					
ANR	104390	CastTarget	unsigned long		104335	0					
ANR	104391	Identifier	dmod		104335	1					
ANR	104392	ReturnStatement	return ( long ) d ;	109:1:4496:4510	104335	1	True				
ANR	104393	CastExpression	( long ) d		104335	0					
ANR	104394	CastTarget	long		104335	0					
ANR	104395	Identifier	d		104335	1					
ANR	104396	ReturnType	static zend_always_inline long		104335	1					
ANR	104397	Identifier	zend_dval_to_lval		104335	2					
ANR	104398	ParameterList	double d		104335	3					
ANR	104399	Parameter	double d	94:49:4107:4114	104335	0	True				
ANR	104400	ParameterType	double		104335	0					
ANR	104401	Identifier	d		104335	1					
ANR	104402	CFGEntryNode	ENTRY		104335		True				
ANR	104403	CFGExitNode	EXIT		104335		True				
ANR	104404	Symbol	dmod		104335						
ANR	104405	Symbol	two_pow_64		104335						
ANR	104406	Symbol	d		104335						
ANR	104407	Symbol	LONG_MAX		104335						
ANR	104408	Symbol	pow		104335						
ANR	104409	Symbol	LONG_MIN		104335						
ANR	104410	Symbol	fmod		104335						
ANR	104411	Function	is_numeric_string_ex	132:0:5477:8613							
ANR	104412	FunctionDef	"is_numeric_string_ex (const char * str , int length , long * lval , double * dval , int allow_errors , int * oflow_info)"		104411	0					
ANR	104413	CompoundStatement		133:0:5613:8613	104411	0					
ANR	104414	IdentifierDeclStatement	const char * ptr ;	134:1:5616:5631	104411	0	True				
ANR	104415	IdentifierDecl	* ptr		104411	0					
ANR	104416	IdentifierDeclType	const char *		104411	0					
ANR	104417	Identifier	ptr		104411	1					
ANR	104418	IdentifierDeclStatement	"int base = 10 , digits = 0 , dp_or_e = 0 ;"	135:1:5634:5672	104411	1	True				
ANR	104419	IdentifierDecl	base = 10		104411	0					
ANR	104420	IdentifierDeclType	int		104411	0					
ANR	104421	Identifier	base		104411	1					
ANR	104422	AssignmentExpression	base = 10		104411	2		=			
ANR	104423	Identifier	base		104411	0					
ANR	104424	PrimaryExpression	10		104411	1					
ANR	104425	IdentifierDecl	digits = 0		104411	1					
ANR	104426	IdentifierDeclType	int		104411	0					
ANR	104427	Identifier	digits		104411	1					
ANR	104428	AssignmentExpression	digits = 0		104411	2		=			
ANR	104429	Identifier	digits		104411	0					
ANR	104430	PrimaryExpression	0		104411	1					
ANR	104431	IdentifierDecl	dp_or_e = 0		104411	2					
ANR	104432	IdentifierDeclType	int		104411	0					
ANR	104433	Identifier	dp_or_e		104411	1					
ANR	104434	AssignmentExpression	dp_or_e = 0		104411	2		=			
ANR	104435	Identifier	dp_or_e		104411	0					
ANR	104436	PrimaryExpression	0		104411	1					
ANR	104437	IdentifierDeclStatement	double local_dval = 0.0 ;	136:1:5675:5698	104411	2	True				
ANR	104438	IdentifierDecl	local_dval = 0.0		104411	0					
ANR	104439	IdentifierDeclType	double		104411	0					
ANR	104440	Identifier	local_dval		104411	1					
ANR	104441	AssignmentExpression	local_dval = 0.0		104411	2		=			
ANR	104442	Identifier	local_dval		104411	0					
ANR	104443	PrimaryExpression	0.0		104411	1					
ANR	104444	IdentifierDeclStatement	zend_uchar type ;	137:1:5701:5716	104411	3	True				
ANR	104445	IdentifierDecl	type		104411	0					
ANR	104446	IdentifierDeclType	zend_uchar		104411	0					
ANR	104447	Identifier	type		104411	1					
ANR	104448	IfStatement	if ( ! length )		104411	4					
ANR	104449	Condition	! length	139:5:5724:5730	104411	0	True				
ANR	104450	UnaryOperationExpression	! length		104411	0					
ANR	104451	UnaryOperator	!		104411	0					
ANR	104452	Identifier	length		104411	1					
ANR	104453	CompoundStatement		7:14:119:119	104411	1					
ANR	104454	ReturnStatement	return 0 ;	140:2:5737:5745	104411	0	True				
ANR	104455	PrimaryExpression	0		104411	0					
ANR	104456	IfStatement	if ( oflow_info != NULL )		104411	5					
ANR	104457	Condition	oflow_info != NULL	143:5:5756:5773	104411	0	True				
ANR	104458	EqualityExpression	oflow_info != NULL		104411	0		!=			
ANR	104459	Identifier	oflow_info		104411	0					
ANR	104460	Identifier	NULL		104411	1					
ANR	104461	CompoundStatement		11:25:162:162	104411	1					
ANR	104462	ExpressionStatement	* oflow_info = 0	144:2:5780:5795	104411	0	True				
ANR	104463	AssignmentExpression	* oflow_info = 0		104411	0		=			
ANR	104464	UnaryOperationExpression	* oflow_info		104411	0					
ANR	104465	UnaryOperator	*		104411	0					
ANR	104466	Identifier	oflow_info		104411	1					
ANR	104467	PrimaryExpression	0		104411	1					
ANR	104468	WhileStatement	while ( * str == ' ' || * str == '\\t' || * str == '\\n' || * str == '\\r' || * str == '\\v' || * str == '\\f' )		104411	6					
ANR	104469	Condition	* str == ' ' || * str == '\\t' || * str == '\\n' || * str == '\\r' || * str == '\\v' || * str == '\\f'	149:8:5888:5978	104411	0	True				
ANR	104470	OrExpression	* str == ' ' || * str == '\\t' || * str == '\\n' || * str == '\\r' || * str == '\\v' || * str == '\\f'		104411	0		||			
ANR	104471	EqualityExpression	* str == ' '		104411	0		==			
ANR	104472	UnaryOperationExpression	* str		104411	0					
ANR	104473	UnaryOperator	*		104411	0					
ANR	104474	Identifier	str		104411	1					
ANR	104475	PrimaryExpression	' '		104411	1					
ANR	104476	OrExpression	* str == '\\t' || * str == '\\n' || * str == '\\r' || * str == '\\v' || * str == '\\f'		104411	1		||			
ANR	104477	EqualityExpression	* str == '\\t'		104411	0		==			
ANR	104478	UnaryOperationExpression	* str		104411	0					
ANR	104479	UnaryOperator	*		104411	0					
ANR	104480	Identifier	str		104411	1					
ANR	104481	PrimaryExpression	'\\t'		104411	1					
ANR	104482	OrExpression	* str == '\\n' || * str == '\\r' || * str == '\\v' || * str == '\\f'		104411	1		||			
ANR	104483	EqualityExpression	* str == '\\n'		104411	0		==			
ANR	104484	UnaryOperationExpression	* str		104411	0					
ANR	104485	UnaryOperator	*		104411	0					
ANR	104486	Identifier	str		104411	1					
ANR	104487	PrimaryExpression	'\\n'		104411	1					
ANR	104488	OrExpression	* str == '\\r' || * str == '\\v' || * str == '\\f'		104411	1		||			
ANR	104489	EqualityExpression	* str == '\\r'		104411	0		==			
ANR	104490	UnaryOperationExpression	* str		104411	0					
ANR	104491	UnaryOperator	*		104411	0					
ANR	104492	Identifier	str		104411	1					
ANR	104493	PrimaryExpression	'\\r'		104411	1					
ANR	104494	OrExpression	* str == '\\v' || * str == '\\f'		104411	1		||			
ANR	104495	EqualityExpression	* str == '\\v'		104411	0		==			
ANR	104496	UnaryOperationExpression	* str		104411	0					
ANR	104497	UnaryOperator	*		104411	0					
ANR	104498	Identifier	str		104411	1					
ANR	104499	PrimaryExpression	'\\v'		104411	1					
ANR	104500	EqualityExpression	* str == '\\f'		104411	1		==			
ANR	104501	UnaryOperationExpression	* str		104411	0					
ANR	104502	UnaryOperator	*		104411	0					
ANR	104503	Identifier	str		104411	1					
ANR	104504	PrimaryExpression	'\\f'		104411	1					
ANR	104505	CompoundStatement		17:101:367:367	104411	1					
ANR	104506	ExpressionStatement	str ++	150:2:5985:5990	104411	0	True				
ANR	104507	PostIncDecOperationExpression	str ++		104411	0					
ANR	104508	Identifier	str		104411	0					
ANR	104509	IncDec	++		104411	1					
ANR	104510	ExpressionStatement	length --	151:2:5994:6002	104411	1	True				
ANR	104511	PostIncDecOperationExpression	length --		104411	0					
ANR	104512	Identifier	length		104411	0					
ANR	104513	IncDec	--		104411	1					
ANR	104514	ExpressionStatement	ptr = str	153:1:6008:6017	104411	7	True				
ANR	104515	AssignmentExpression	ptr = str		104411	0		=			
ANR	104516	Identifier	ptr		104411	0					
ANR	104517	Identifier	str		104411	1					
ANR	104518	IfStatement	if ( * ptr == '-' || * ptr == '+' )		104411	8					
ANR	104519	Condition	* ptr == '-' || * ptr == '+'	155:5:6025:6050	104411	0	True				
ANR	104520	OrExpression	* ptr == '-' || * ptr == '+'		104411	0		||			
ANR	104521	EqualityExpression	* ptr == '-'		104411	0		==			
ANR	104522	UnaryOperationExpression	* ptr		104411	0					
ANR	104523	UnaryOperator	*		104411	0					
ANR	104524	Identifier	ptr		104411	1					
ANR	104525	PrimaryExpression	'-'		104411	1					
ANR	104526	EqualityExpression	* ptr == '+'		104411	1		==			
ANR	104527	UnaryOperationExpression	* ptr		104411	0					
ANR	104528	UnaryOperator	*		104411	0					
ANR	104529	Identifier	ptr		104411	1					
ANR	104530	PrimaryExpression	'+'		104411	1					
ANR	104531	CompoundStatement		23:33:439:439	104411	1					
ANR	104532	ExpressionStatement	ptr ++	156:2:6057:6062	104411	0	True				
ANR	104533	PostIncDecOperationExpression	ptr ++		104411	0					
ANR	104534	Identifier	ptr		104411	0					
ANR	104535	IncDec	++		104411	1					
ANR	104536	IfStatement	if ( ZEND_IS_DIGIT ( * ptr ) )		104411	9					
ANR	104537	Condition	ZEND_IS_DIGIT ( * ptr )	159:5:6073:6091	104411	0	True				
ANR	104538	CallExpression	ZEND_IS_DIGIT ( * ptr )		104411	0					
ANR	104539	Callee	ZEND_IS_DIGIT		104411	0					
ANR	104540	Identifier	ZEND_IS_DIGIT		104411	0					
ANR	104541	ArgumentList	* ptr		104411	1					
ANR	104542	Argument	* ptr		104411	0					
ANR	104543	UnaryOperationExpression	* ptr		104411	0					
ANR	104544	UnaryOperator	*		104411	0					
ANR	104545	Identifier	ptr		104411	1					
ANR	104546	CompoundStatement		27:26:480:480	104411	1					
ANR	104547	IfStatement	if ( length > 2 && * str == '0' && ( str [ 1 ] == 'x' || str [ 1 ] == 'X' ) )		104411	0					
ANR	104548	Condition	length > 2 && * str == '0' && ( str [ 1 ] == 'x' || str [ 1 ] == 'X' )	162:6:6201:6261	104411	0	True				
ANR	104549	AndExpression	length > 2 && * str == '0' && ( str [ 1 ] == 'x' || str [ 1 ] == 'X' )		104411	0		&&			
ANR	104550	RelationalExpression	length > 2		104411	0		>			
ANR	104551	Identifier	length		104411	0					
ANR	104552	PrimaryExpression	2		104411	1					
ANR	104553	AndExpression	* str == '0' && ( str [ 1 ] == 'x' || str [ 1 ] == 'X' )		104411	1		&&			
ANR	104554	EqualityExpression	* str == '0'		104411	0		==			
ANR	104555	UnaryOperationExpression	* str		104411	0					
ANR	104556	UnaryOperator	*		104411	0					
ANR	104557	Identifier	str		104411	1					
ANR	104558	PrimaryExpression	'0'		104411	1					
ANR	104559	OrExpression	str [ 1 ] == 'x' || str [ 1 ] == 'X'		104411	1		||			
ANR	104560	EqualityExpression	str [ 1 ] == 'x'		104411	0		==			
ANR	104561	ArrayIndexing	str [ 1 ]		104411	0					
ANR	104562	Identifier	str		104411	0					
ANR	104563	PrimaryExpression	1		104411	1					
ANR	104564	PrimaryExpression	'x'		104411	1					
ANR	104565	EqualityExpression	str [ 1 ] == 'X'		104411	1		==			
ANR	104566	ArrayIndexing	str [ 1 ]		104411	0					
ANR	104567	Identifier	str		104411	0					
ANR	104568	PrimaryExpression	1		104411	1					
ANR	104569	PrimaryExpression	'X'		104411	1					
ANR	104570	CompoundStatement		30:69:650:650	104411	1					
ANR	104571	ExpressionStatement	base = 16	163:3:6269:6278	104411	0	True				
ANR	104572	AssignmentExpression	base = 16		104411	0		=			
ANR	104573	Identifier	base		104411	0					
ANR	104574	PrimaryExpression	16		104411	1					
ANR	104575	ExpressionStatement	ptr += 2	164:3:6283:6291	104411	1	True				
ANR	104576	AssignmentExpression	ptr += 2		104411	0		+=			
ANR	104577	Identifier	ptr		104411	0					
ANR	104578	PrimaryExpression	2		104411	1					
ANR	104579	WhileStatement	while ( * ptr == '0' )		104411	1					
ANR	104580	Condition	* ptr == '0'	168:9:6335:6345	104411	0	True				
ANR	104581	EqualityExpression	* ptr == '0'		104411	0		==			
ANR	104582	UnaryOperationExpression	* ptr		104411	0					
ANR	104583	UnaryOperator	*		104411	0					
ANR	104584	Identifier	ptr		104411	1					
ANR	104585	PrimaryExpression	'0'		104411	1					
ANR	104586	CompoundStatement		36:22:734:734	104411	1					
ANR	104587	ExpressionStatement	ptr ++	169:3:6353:6358	104411	0	True				
ANR	104588	PostIncDecOperationExpression	ptr ++		104411	0					
ANR	104589	Identifier	ptr		104411	0					
ANR	104590	IncDec	++		104411	1					
ANR	104591	ForStatement	"for ( type = IS_LONG ; ! ( digits >= MAX_LENGTH_OF_LONG && ( dval || allow_errors == 1 ) ) ; digits ++ , ptr ++ )"		104411	2					
ANR	104592	ForInit	type = IS_LONG ;	175:7:6585:6599	104411	0	True				
ANR	104593	AssignmentExpression	type = IS_LONG		104411	0		=			
ANR	104594	Identifier	type		104411	0					
ANR	104595	Identifier	IS_LONG		104411	1					
ANR	104596	Condition	! ( digits >= MAX_LENGTH_OF_LONG && ( dval || allow_errors == 1 ) )	175:23:6601:6662	104411	1	True				
ANR	104597	UnaryOperationExpression	! ( digits >= MAX_LENGTH_OF_LONG && ( dval || allow_errors == 1 ) )		104411	0					
ANR	104598	UnaryOperator	!		104411	0					
ANR	104599	AndExpression	digits >= MAX_LENGTH_OF_LONG && ( dval || allow_errors == 1 )		104411	1		&&			
ANR	104600	RelationalExpression	digits >= MAX_LENGTH_OF_LONG		104411	0		>=			
ANR	104601	Identifier	digits		104411	0					
ANR	104602	Identifier	MAX_LENGTH_OF_LONG		104411	1					
ANR	104603	OrExpression	dval || allow_errors == 1		104411	1		||			
ANR	104604	Identifier	dval		104411	0					
ANR	104605	EqualityExpression	allow_errors == 1		104411	1		==			
ANR	104606	Identifier	allow_errors		104411	0					
ANR	104607	PrimaryExpression	1		104411	1					
ANR	104608	Expression	"digits ++ , ptr ++"	175:87:6665:6679	104411	2	True				
ANR	104609	PostIncDecOperationExpression	digits ++		104411	0					
ANR	104610	Identifier	digits		104411	0					
ANR	104611	IncDec	++		104411	1					
ANR	104612	PostIncDecOperationExpression	ptr ++		104411	1					
ANR	104613	Identifier	ptr		104411	0					
ANR	104614	IncDec	++		104411	1					
ANR	104615	CompoundStatement		43:104:1068:1068	104411	3					
ANR	104616	Label	check_digits :	176:0:6684:6696	104411	0	True				
ANR	104617	Identifier	check_digits		104411	0					
ANR	104618	IfStatement	if ( ZEND_IS_DIGIT ( * ptr ) || ( base == 16 && ZEND_IS_XDIGIT ( * ptr ) ) )		104411	1					
ANR	104619	Condition	ZEND_IS_DIGIT ( * ptr ) || ( base == 16 && ZEND_IS_XDIGIT ( * ptr ) )	177:7:6705:6763	104411	0	True				
ANR	104620	OrExpression	ZEND_IS_DIGIT ( * ptr ) || ( base == 16 && ZEND_IS_XDIGIT ( * ptr ) )		104411	0		||			
ANR	104621	CallExpression	ZEND_IS_DIGIT ( * ptr )		104411	0					
ANR	104622	Callee	ZEND_IS_DIGIT		104411	0					
ANR	104623	Identifier	ZEND_IS_DIGIT		104411	0					
ANR	104624	ArgumentList	* ptr		104411	1					
ANR	104625	Argument	* ptr		104411	0					
ANR	104626	UnaryOperationExpression	* ptr		104411	0					
ANR	104627	UnaryOperator	*		104411	0					
ANR	104628	Identifier	ptr		104411	1					
ANR	104629	AndExpression	base == 16 && ZEND_IS_XDIGIT ( * ptr )		104411	1		&&			
ANR	104630	EqualityExpression	base == 16		104411	0		==			
ANR	104631	Identifier	base		104411	0					
ANR	104632	PrimaryExpression	16		104411	1					
ANR	104633	CallExpression	ZEND_IS_XDIGIT ( * ptr )		104411	1					
ANR	104634	Callee	ZEND_IS_XDIGIT		104411	0					
ANR	104635	Identifier	ZEND_IS_XDIGIT		104411	0					
ANR	104636	ArgumentList	* ptr		104411	1					
ANR	104637	Argument	* ptr		104411	0					
ANR	104638	UnaryOperationExpression	* ptr		104411	0					
ANR	104639	UnaryOperator	*		104411	0					
ANR	104640	Identifier	ptr		104411	1					
ANR	104641	CompoundStatement		45:68:1152:1152	104411	1					
ANR	104642	ContinueStatement	continue ;	178:4:6772:6780	104411	0	True				
ANR	104643	ElseStatement	else		104411	0					
ANR	104644	IfStatement	if ( base == 10 )		104411	0					
ANR	104645	Condition	base == 10	179:14:6796:6805	104411	0	True				
ANR	104646	EqualityExpression	base == 10		104411	0		==			
ANR	104647	Identifier	base		104411	0					
ANR	104648	PrimaryExpression	10		104411	1					
ANR	104649	CompoundStatement		47:26:1194:1194	104411	1					
ANR	104650	IfStatement	if ( * ptr == '.' && dp_or_e < 1 )		104411	0					
ANR	104651	Condition	* ptr == '.' && dp_or_e < 1	180:8:6818:6843	104411	0	True				
ANR	104652	AndExpression	* ptr == '.' && dp_or_e < 1		104411	0		&&			
ANR	104653	EqualityExpression	* ptr == '.'		104411	0		==			
ANR	104654	UnaryOperationExpression	* ptr		104411	0					
ANR	104655	UnaryOperator	*		104411	0					
ANR	104656	Identifier	ptr		104411	1					
ANR	104657	PrimaryExpression	'.'		104411	1					
ANR	104658	RelationalExpression	dp_or_e < 1		104411	1		<			
ANR	104659	Identifier	dp_or_e		104411	0					
ANR	104660	PrimaryExpression	1		104411	1					
ANR	104661	CompoundStatement		48:36:1232:1232	104411	1					
ANR	104662	GotoStatement	goto process_double ;	181:5:6853:6872	104411	0	True				
ANR	104663	Identifier	process_double		104411	0					
ANR	104664	ElseStatement	else		104411	0					
ANR	104665	IfStatement	if ( ( * ptr == 'e' || * ptr == 'E' ) && dp_or_e < 2 )		104411	0					
ANR	104666	Condition	( * ptr == 'e' || * ptr == 'E' ) && dp_or_e < 2	182:15:6889:6931	104411	0	True				
ANR	104667	AndExpression	( * ptr == 'e' || * ptr == 'E' ) && dp_or_e < 2		104411	0		&&			
ANR	104668	OrExpression	* ptr == 'e' || * ptr == 'E'		104411	0		||			
ANR	104669	EqualityExpression	* ptr == 'e'		104411	0		==			
ANR	104670	UnaryOperationExpression	* ptr		104411	0					
ANR	104671	UnaryOperator	*		104411	0					
ANR	104672	Identifier	ptr		104411	1					
ANR	104673	PrimaryExpression	'e'		104411	1					
ANR	104674	EqualityExpression	* ptr == 'E'		104411	1		==			
ANR	104675	UnaryOperationExpression	* ptr		104411	0					
ANR	104676	UnaryOperator	*		104411	0					
ANR	104677	Identifier	ptr		104411	1					
ANR	104678	PrimaryExpression	'E'		104411	1					
ANR	104679	RelationalExpression	dp_or_e < 2		104411	1		<			
ANR	104680	Identifier	dp_or_e		104411	0					
ANR	104681	PrimaryExpression	2		104411	1					
ANR	104682	CompoundStatement		51:5:1327:1350	104411	1					
ANR	104683	IdentifierDeclStatement	const char * e = ptr + 1 ;	183:5:6941:6964	104411	0	True				
ANR	104684	IdentifierDecl	* e = ptr + 1		104411	0					
ANR	104685	IdentifierDeclType	const char *		104411	0					
ANR	104686	Identifier	e		104411	1					
ANR	104687	AssignmentExpression	* e = ptr + 1		104411	2		=			
ANR	104688	Identifier	e		104411	0					
ANR	104689	AdditiveExpression	ptr + 1		104411	1		+			
ANR	104690	Identifier	ptr		104411	0					
ANR	104691	PrimaryExpression	1		104411	1					
ANR	104692	IfStatement	if ( * e == '-' || * e == '+' )		104411	1					
ANR	104693	Condition	* e == '-' || * e == '+'	185:9:6976:6997	104411	0	True				
ANR	104694	OrExpression	* e == '-' || * e == '+'		104411	0		||			
ANR	104695	EqualityExpression	* e == '-'		104411	0		==			
ANR	104696	UnaryOperationExpression	* e		104411	0					
ANR	104697	UnaryOperator	*		104411	0					
ANR	104698	Identifier	e		104411	1					
ANR	104699	PrimaryExpression	'-'		104411	1					
ANR	104700	EqualityExpression	* e == '+'		104411	1		==			
ANR	104701	UnaryOperationExpression	* e		104411	0					
ANR	104702	UnaryOperator	*		104411	0					
ANR	104703	Identifier	e		104411	1					
ANR	104704	PrimaryExpression	'+'		104411	1					
ANR	104705	CompoundStatement		53:33:1386:1386	104411	1					
ANR	104706	ExpressionStatement	ptr = e ++	186:6:7008:7017	104411	0	True				
ANR	104707	AssignmentExpression	ptr = e ++		104411	0		=			
ANR	104708	Identifier	ptr		104411	0					
ANR	104709	PostIncDecOperationExpression	e ++		104411	1					
ANR	104710	Identifier	e		104411	0					
ANR	104711	IncDec	++		104411	1					
ANR	104712	IfStatement	if ( ZEND_IS_DIGIT ( * e ) )		104411	2					
ANR	104713	Condition	ZEND_IS_DIGIT ( * e )	188:9:7035:7051	104411	0	True				
ANR	104714	CallExpression	ZEND_IS_DIGIT ( * e )		104411	0					
ANR	104715	Callee	ZEND_IS_DIGIT		104411	0					
ANR	104716	Identifier	ZEND_IS_DIGIT		104411	0					
ANR	104717	ArgumentList	* e		104411	1					
ANR	104718	Argument	* e		104411	0					
ANR	104719	UnaryOperationExpression	* e		104411	0					
ANR	104720	UnaryOperator	*		104411	0					
ANR	104721	Identifier	e		104411	1					
ANR	104722	CompoundStatement		56:28:1440:1440	104411	1					
ANR	104723	GotoStatement	goto process_double ;	189:6:7062:7081	104411	0	True				
ANR	104724	Identifier	process_double		104411	0					
ANR	104725	BreakStatement	break ;	194:3:7105:7110	104411	2	True				
ANR	104726	IfStatement	if ( base == 10 )		104411	3					
ANR	104727	Condition	base == 10	197:6:7123:7132	104411	0	True				
ANR	104728	EqualityExpression	base == 10		104411	0		==			
ANR	104729	Identifier	base		104411	0					
ANR	104730	PrimaryExpression	10		104411	1					
ANR	104731	CompoundStatement		65:18:1521:1521	104411	1					
ANR	104732	IfStatement	if ( digits >= MAX_LENGTH_OF_LONG )		104411	0					
ANR	104733	Condition	digits >= MAX_LENGTH_OF_LONG	198:7:7144:7171	104411	0	True				
ANR	104734	RelationalExpression	digits >= MAX_LENGTH_OF_LONG		104411	0		>=			
ANR	104735	Identifier	digits		104411	0					
ANR	104736	Identifier	MAX_LENGTH_OF_LONG		104411	1					
ANR	104737	CompoundStatement		66:37:1560:1560	104411	1					
ANR	104738	IfStatement	if ( oflow_info != NULL )		104411	0					
ANR	104739	Condition	oflow_info != NULL	199:8:7184:7201	104411	0	True				
ANR	104740	EqualityExpression	oflow_info != NULL		104411	0		!=			
ANR	104741	Identifier	oflow_info		104411	0					
ANR	104742	Identifier	NULL		104411	1					
ANR	104743	CompoundStatement		67:28:1590:1590	104411	1					
ANR	104744	ExpressionStatement	* oflow_info = * str == '-' ? - 1 : 1	200:5:7211:7245	104411	0	True				
ANR	104745	AssignmentExpression	* oflow_info = * str == '-' ? - 1 : 1		104411	0		=			
ANR	104746	UnaryOperationExpression	* oflow_info		104411	0					
ANR	104747	UnaryOperator	*		104411	0					
ANR	104748	Identifier	oflow_info		104411	1					
ANR	104749	ConditionalExpression	* str == '-' ? - 1 : 1		104411	1					
ANR	104750	Condition	* str == '-'		104411	0					
ANR	104751	EqualityExpression	* str == '-'		104411	0		==			
ANR	104752	UnaryOperationExpression	* str		104411	0					
ANR	104753	UnaryOperator	*		104411	0					
ANR	104754	Identifier	str		104411	1					
ANR	104755	PrimaryExpression	'-'		104411	1					
ANR	104756	UnaryOperationExpression	- 1		104411	1					
ANR	104757	UnaryOperator	-		104411	0					
ANR	104758	PrimaryExpression	1		104411	1					
ANR	104759	PrimaryExpression	1		104411	2					
ANR	104760	ExpressionStatement	dp_or_e = - 1	202:4:7257:7269	104411	1	True				
ANR	104761	AssignmentExpression	dp_or_e = - 1		104411	0		=			
ANR	104762	Identifier	dp_or_e		104411	0					
ANR	104763	UnaryOperationExpression	- 1		104411	1					
ANR	104764	UnaryOperator	-		104411	0					
ANR	104765	PrimaryExpression	1		104411	1					
ANR	104766	GotoStatement	goto process_double ;	203:4:7275:7294	104411	2	True				
ANR	104767	Identifier	process_double		104411	0					
ANR	104768	ElseStatement	else		104411	0					
ANR	104769	IfStatement	if ( ! ( digits < SIZEOF_LONG * 2 || ( digits == SIZEOF_LONG * 2 && ptr [ - digits ] <= '7' ) ) )		104411	0					
ANR	104770	Condition	! ( digits < SIZEOF_LONG * 2 || ( digits == SIZEOF_LONG * 2 && ptr [ - digits ] <= '7' ) )	205:13:7314:7394	104411	0	True				
ANR	104771	UnaryOperationExpression	! ( digits < SIZEOF_LONG * 2 || ( digits == SIZEOF_LONG * 2 && ptr [ - digits ] <= '7' ) )		104411	0					
ANR	104772	UnaryOperator	!		104411	0					
ANR	104773	OrExpression	digits < SIZEOF_LONG * 2 || ( digits == SIZEOF_LONG * 2 && ptr [ - digits ] <= '7' )		104411	1		||			
ANR	104774	RelationalExpression	digits < SIZEOF_LONG * 2		104411	0		<			
ANR	104775	Identifier	digits		104411	0					
ANR	104776	MultiplicativeExpression	SIZEOF_LONG * 2		104411	1		*			
ANR	104777	Identifier	SIZEOF_LONG		104411	0					
ANR	104778	PrimaryExpression	2		104411	1					
ANR	104779	AndExpression	digits == SIZEOF_LONG * 2 && ptr [ - digits ] <= '7'		104411	1		&&			
ANR	104780	EqualityExpression	digits == SIZEOF_LONG * 2		104411	0		==			
ANR	104781	Identifier	digits		104411	0					
ANR	104782	MultiplicativeExpression	SIZEOF_LONG * 2		104411	1		*			
ANR	104783	Identifier	SIZEOF_LONG		104411	0					
ANR	104784	PrimaryExpression	2		104411	1					
ANR	104785	RelationalExpression	ptr [ - digits ] <= '7'		104411	1		<=			
ANR	104786	ArrayIndexing	ptr [ - digits ]		104411	0					
ANR	104787	Identifier	ptr		104411	0					
ANR	104788	UnaryOperationExpression	- digits		104411	1					
ANR	104789	UnaryOperator	-		104411	0					
ANR	104790	Identifier	digits		104411	1					
ANR	104791	PrimaryExpression	'7'		104411	1					
ANR	104792	CompoundStatement		73:96:1783:1783	104411	1					
ANR	104793	IfStatement	if ( dval )		104411	0					
ANR	104794	Condition	dval	206:7:7406:7409	104411	0	True				
ANR	104795	Identifier	dval		104411	0					
ANR	104796	CompoundStatement		74:13:1798:1798	104411	1					
ANR	104797	ExpressionStatement	"local_dval = zend_hex_strtod ( str , & ptr )"	207:4:7418:7457	104411	0	True				
ANR	104798	AssignmentExpression	"local_dval = zend_hex_strtod ( str , & ptr )"		104411	0		=			
ANR	104799	Identifier	local_dval		104411	0					
ANR	104800	CallExpression	"zend_hex_strtod ( str , & ptr )"		104411	1					
ANR	104801	Callee	zend_hex_strtod		104411	0					
ANR	104802	Identifier	zend_hex_strtod		104411	0					
ANR	104803	ArgumentList	str		104411	1					
ANR	104804	Argument	str		104411	0					
ANR	104805	Identifier	str		104411	0					
ANR	104806	Argument	& ptr		104411	1					
ANR	104807	UnaryOperationExpression	& ptr		104411	0					
ANR	104808	UnaryOperator	&		104411	0					
ANR	104809	Identifier	ptr		104411	1					
ANR	104810	IfStatement	if ( oflow_info != NULL )		104411	1					
ANR	104811	Condition	oflow_info != NULL	209:7:7471:7488	104411	0	True				
ANR	104812	EqualityExpression	oflow_info != NULL		104411	0		!=			
ANR	104813	Identifier	oflow_info		104411	0					
ANR	104814	Identifier	NULL		104411	1					
ANR	104815	CompoundStatement		77:27:1877:1877	104411	1					
ANR	104816	ExpressionStatement	* oflow_info = 1	210:4:7497:7512	104411	0	True				
ANR	104817	AssignmentExpression	* oflow_info = 1		104411	0		=			
ANR	104818	UnaryOperationExpression	* oflow_info		104411	0					
ANR	104819	UnaryOperator	*		104411	0					
ANR	104820	Identifier	oflow_info		104411	1					
ANR	104821	PrimaryExpression	1		104411	1					
ANR	104822	ExpressionStatement	type = IS_DOUBLE	212:3:7522:7538	104411	2	True				
ANR	104823	AssignmentExpression	type = IS_DOUBLE		104411	0		=			
ANR	104824	Identifier	type		104411	0					
ANR	104825	Identifier	IS_DOUBLE		104411	1					
ANR	104826	ElseStatement	else		104411	0					
ANR	104827	IfStatement	if ( * ptr == '.' && ZEND_IS_DIGIT ( ptr [ 1 ] ) )		104411	0					
ANR	104828	Condition	* ptr == '.' && ZEND_IS_DIGIT ( ptr [ 1 ] )	214:12:7556:7591	104411	0	True				
ANR	104829	AndExpression	* ptr == '.' && ZEND_IS_DIGIT ( ptr [ 1 ] )		104411	0		&&			
ANR	104830	EqualityExpression	* ptr == '.'		104411	0		==			
ANR	104831	UnaryOperationExpression	* ptr		104411	0					
ANR	104832	UnaryOperator	*		104411	0					
ANR	104833	Identifier	ptr		104411	1					
ANR	104834	PrimaryExpression	'.'		104411	1					
ANR	104835	CallExpression	ZEND_IS_DIGIT ( ptr [ 1 ] )		104411	1					
ANR	104836	Callee	ZEND_IS_DIGIT		104411	0					
ANR	104837	Identifier	ZEND_IS_DIGIT		104411	0					
ANR	104838	ArgumentList	ptr [ 1 ]		104411	1					
ANR	104839	Argument	ptr [ 1 ]		104411	0					
ANR	104840	ArrayIndexing	ptr [ 1 ]		104411	0					
ANR	104841	Identifier	ptr		104411	0					
ANR	104842	PrimaryExpression	1		104411	1					
ANR	104843	CompoundStatement		82:50:1980:1980	104411	1					
ANR	104844	Label	process_double :	215:0:7596:7610	104411	0	True				
ANR	104845	Identifier	process_double		104411	0					
ANR	104846	ExpressionStatement	type = IS_DOUBLE	216:2:7614:7630	104411	1	True				
ANR	104847	AssignmentExpression	type = IS_DOUBLE		104411	0		=			
ANR	104848	Identifier	type		104411	0					
ANR	104849	Identifier	IS_DOUBLE		104411	1					
ANR	104850	IfStatement	if ( dval )		104411	2					
ANR	104851	Condition	dval	220:6:7761:7764	104411	0	True				
ANR	104852	Identifier	dval		104411	0					
ANR	104853	CompoundStatement		88:12:2153:2153	104411	1					
ANR	104854	ExpressionStatement	"local_dval = zend_strtod ( str , & ptr )"	221:3:7772:7807	104411	0	True				
ANR	104855	AssignmentExpression	"local_dval = zend_strtod ( str , & ptr )"		104411	0		=			
ANR	104856	Identifier	local_dval		104411	0					
ANR	104857	CallExpression	"zend_strtod ( str , & ptr )"		104411	1					
ANR	104858	Callee	zend_strtod		104411	0					
ANR	104859	Identifier	zend_strtod		104411	0					
ANR	104860	ArgumentList	str		104411	1					
ANR	104861	Argument	str		104411	0					
ANR	104862	Identifier	str		104411	0					
ANR	104863	Argument	& ptr		104411	1					
ANR	104864	UnaryOperationExpression	& ptr		104411	0					
ANR	104865	UnaryOperator	&		104411	0					
ANR	104866	Identifier	ptr		104411	1					
ANR	104867	ElseStatement	else		104411	0					
ANR	104868	IfStatement	if ( allow_errors != 1 && dp_or_e != - 1 )		104411	0					
ANR	104869	Condition	allow_errors != 1 && dp_or_e != - 1	222:13:7822:7855	104411	0	True				
ANR	104870	AndExpression	allow_errors != 1 && dp_or_e != - 1		104411	0		&&			
ANR	104871	EqualityExpression	allow_errors != 1		104411	0		!=			
ANR	104872	Identifier	allow_errors		104411	0					
ANR	104873	PrimaryExpression	1		104411	1					
ANR	104874	EqualityExpression	dp_or_e != - 1		104411	1		!=			
ANR	104875	Identifier	dp_or_e		104411	0					
ANR	104876	UnaryOperationExpression	- 1		104411	1					
ANR	104877	UnaryOperator	-		104411	0					
ANR	104878	PrimaryExpression	1		104411	1					
ANR	104879	CompoundStatement		90:49:2244:2244	104411	1					
ANR	104880	ExpressionStatement	dp_or_e = ( * ptr ++ == '.' ) ? 1 : 2	223:3:7863:7896	104411	0	True				
ANR	104881	AssignmentExpression	dp_or_e = ( * ptr ++ == '.' ) ? 1 : 2		104411	0		=			
ANR	104882	Identifier	dp_or_e		104411	0					
ANR	104883	ConditionalExpression	( * ptr ++ == '.' ) ? 1 : 2		104411	1					
ANR	104884	Condition	* ptr ++ == '.'		104411	0					
ANR	104885	EqualityExpression	* ptr ++ == '.'		104411	0		==			
ANR	104886	UnaryOperationExpression	* ptr ++		104411	0					
ANR	104887	UnaryOperator	*		104411	0					
ANR	104888	PostIncDecOperationExpression	ptr ++		104411	1					
ANR	104889	Identifier	ptr		104411	0					
ANR	104890	IncDec	++		104411	1					
ANR	104891	PrimaryExpression	'.'		104411	1					
ANR	104892	PrimaryExpression	1		104411	1					
ANR	104893	PrimaryExpression	2		104411	2					
ANR	104894	GotoStatement	goto check_digits ;	224:3:7901:7918	104411	1	True				
ANR	104895	Identifier	check_digits		104411	0					
ANR	104896	ElseStatement	else		104411	0					
ANR	104897	CompoundStatement		94:8:2318:2318	104411	0					
ANR	104898	ReturnStatement	return 0 ;	227:2:7936:7944	104411	0	True				
ANR	104899	PrimaryExpression	0		104411	0					
ANR	104900	IfStatement	if ( ptr != str + length )		104411	10					
ANR	104901	Condition	ptr != str + length	230:5:7955:7973	104411	0	True				
ANR	104902	EqualityExpression	ptr != str + length		104411	0		!=			
ANR	104903	Identifier	ptr		104411	0					
ANR	104904	AdditiveExpression	str + length		104411	1		+			
ANR	104905	Identifier	str		104411	0					
ANR	104906	Identifier	length		104411	1					
ANR	104907	CompoundStatement		98:26:2362:2362	104411	1					
ANR	104908	IfStatement	if ( ! allow_errors )		104411	0					
ANR	104909	Condition	! allow_errors	231:6:7984:7996	104411	0	True				
ANR	104910	UnaryOperationExpression	! allow_errors		104411	0					
ANR	104911	UnaryOperator	!		104411	0					
ANR	104912	Identifier	allow_errors		104411	1					
ANR	104913	CompoundStatement		99:21:2385:2385	104411	1					
ANR	104914	ReturnStatement	return 0 ;	232:3:8004:8012	104411	0	True				
ANR	104915	PrimaryExpression	0		104411	0					
ANR	104916	IfStatement	if ( allow_errors == - 1 )		104411	1					
ANR	104917	Condition	allow_errors == - 1	234:6:8024:8041	104411	0	True				
ANR	104918	EqualityExpression	allow_errors == - 1		104411	0		==			
ANR	104919	Identifier	allow_errors		104411	0					
ANR	104920	UnaryOperationExpression	- 1		104411	1					
ANR	104921	UnaryOperator	-		104411	0					
ANR	104922	PrimaryExpression	1		104411	1					
ANR	104923	CompoundStatement		102:26:2430:2430	104411	1					
ANR	104924	ExpressionStatement	"zend_error ( E_NOTICE , ""A non well formed numeric value encountered"" )"	235:3:8049:8116	104411	0	True				
ANR	104925	CallExpression	"zend_error ( E_NOTICE , ""A non well formed numeric value encountered"" )"		104411	0					
ANR	104926	Callee	zend_error		104411	0					
ANR	104927	Identifier	zend_error		104411	0					
ANR	104928	ArgumentList	E_NOTICE		104411	1					
ANR	104929	Argument	E_NOTICE		104411	0					
ANR	104930	Identifier	E_NOTICE		104411	0					
ANR	104931	Argument	"""A non well formed numeric value encountered"""		104411	1					
ANR	104932	PrimaryExpression	"""A non well formed numeric value encountered"""		104411	0					
ANR	104933	IfStatement	if ( type == IS_LONG )		104411	11					
ANR	104934	Condition	type == IS_LONG	239:5:8131:8145	104411	0	True				
ANR	104935	EqualityExpression	type == IS_LONG		104411	0		==			
ANR	104936	Identifier	type		104411	0					
ANR	104937	Identifier	IS_LONG		104411	1					
ANR	104938	CompoundStatement		107:22:2534:2534	104411	1					
ANR	104939	IfStatement	if ( digits == MAX_LENGTH_OF_LONG - 1 )		104411	0					
ANR	104940	Condition	digits == MAX_LENGTH_OF_LONG - 1	240:6:8156:8187	104411	0	True				
ANR	104941	EqualityExpression	digits == MAX_LENGTH_OF_LONG - 1		104411	0		==			
ANR	104942	Identifier	digits		104411	0					
ANR	104943	AdditiveExpression	MAX_LENGTH_OF_LONG - 1		104411	1		-			
ANR	104944	Identifier	MAX_LENGTH_OF_LONG		104411	0					
ANR	104945	PrimaryExpression	1		104411	1					
ANR	104946	CompoundStatement		109:3:2581:2629	104411	1					
ANR	104947	IdentifierDeclStatement	"int cmp = strcmp ( & ptr [ - digits ] , long_min_digits ) ;"	241:3:8195:8243	104411	0	True				
ANR	104948	IdentifierDecl	"cmp = strcmp ( & ptr [ - digits ] , long_min_digits )"		104411	0					
ANR	104949	IdentifierDeclType	int		104411	0					
ANR	104950	Identifier	cmp		104411	1					
ANR	104951	AssignmentExpression	"cmp = strcmp ( & ptr [ - digits ] , long_min_digits )"		104411	2		=			
ANR	104952	Identifier	cmp		104411	0					
ANR	104953	CallExpression	"strcmp ( & ptr [ - digits ] , long_min_digits )"		104411	1					
ANR	104954	Callee	strcmp		104411	0					
ANR	104955	Identifier	strcmp		104411	0					
ANR	104956	ArgumentList	& ptr [ - digits ]		104411	1					
ANR	104957	Argument	& ptr [ - digits ]		104411	0					
ANR	104958	UnaryOperationExpression	& ptr [ - digits ]		104411	0					
ANR	104959	UnaryOperator	&		104411	0					
ANR	104960	ArrayIndexing	ptr [ - digits ]		104411	1					
ANR	104961	Identifier	ptr		104411	0					
ANR	104962	UnaryOperationExpression	- digits		104411	1					
ANR	104963	UnaryOperator	-		104411	0					
ANR	104964	Identifier	digits		104411	1					
ANR	104965	Argument	long_min_digits		104411	1					
ANR	104966	Identifier	long_min_digits		104411	0					
ANR	104967	IfStatement	if ( ! ( cmp < 0 || ( cmp == 0 && * str == '-' ) ) )		104411	1					
ANR	104968	Condition	! ( cmp < 0 || ( cmp == 0 && * str == '-' ) )	243:7:8253:8291	104411	0	True				
ANR	104969	UnaryOperationExpression	! ( cmp < 0 || ( cmp == 0 && * str == '-' ) )		104411	0					
ANR	104970	UnaryOperator	!		104411	0					
ANR	104971	OrExpression	cmp < 0 || ( cmp == 0 && * str == '-' )		104411	1		||			
ANR	104972	RelationalExpression	cmp < 0		104411	0		<			
ANR	104973	Identifier	cmp		104411	0					
ANR	104974	PrimaryExpression	0		104411	1					
ANR	104975	AndExpression	cmp == 0 && * str == '-'		104411	1		&&			
ANR	104976	EqualityExpression	cmp == 0		104411	0		==			
ANR	104977	Identifier	cmp		104411	0					
ANR	104978	PrimaryExpression	0		104411	1					
ANR	104979	EqualityExpression	* str == '-'		104411	1		==			
ANR	104980	UnaryOperationExpression	* str		104411	0					
ANR	104981	UnaryOperator	*		104411	0					
ANR	104982	Identifier	str		104411	1					
ANR	104983	PrimaryExpression	'-'		104411	1					
ANR	104984	CompoundStatement		111:48:2680:2680	104411	1					
ANR	104985	IfStatement	if ( dval )		104411	0					
ANR	104986	Condition	dval	244:8:8304:8307	104411	0	True				
ANR	104987	Identifier	dval		104411	0					
ANR	104988	CompoundStatement		112:14:2696:2696	104411	1					
ANR	104989	ExpressionStatement	"* dval = zend_strtod ( str , NULL )"	245:5:8317:8347	104411	0	True				
ANR	104990	AssignmentExpression	"* dval = zend_strtod ( str , NULL )"		104411	0		=			
ANR	104991	UnaryOperationExpression	* dval		104411	0					
ANR	104992	UnaryOperator	*		104411	0					
ANR	104993	Identifier	dval		104411	1					
ANR	104994	CallExpression	"zend_strtod ( str , NULL )"		104411	1					
ANR	104995	Callee	zend_strtod		104411	0					
ANR	104996	Identifier	zend_strtod		104411	0					
ANR	104997	ArgumentList	str		104411	1					
ANR	104998	Argument	str		104411	0					
ANR	104999	Identifier	str		104411	0					
ANR	105000	Argument	NULL		104411	1					
ANR	105001	Identifier	NULL		104411	0					
ANR	105002	IfStatement	if ( oflow_info != NULL )		104411	1					
ANR	105003	Condition	oflow_info != NULL	247:8:8363:8380	104411	0	True				
ANR	105004	EqualityExpression	oflow_info != NULL		104411	0		!=			
ANR	105005	Identifier	oflow_info		104411	0					
ANR	105006	Identifier	NULL		104411	1					
ANR	105007	CompoundStatement		115:28:2769:2769	104411	1					
ANR	105008	ExpressionStatement	* oflow_info = * str == '-' ? - 1 : 1	248:5:8390:8424	104411	0	True				
ANR	105009	AssignmentExpression	* oflow_info = * str == '-' ? - 1 : 1		104411	0		=			
ANR	105010	UnaryOperationExpression	* oflow_info		104411	0					
ANR	105011	UnaryOperator	*		104411	0					
ANR	105012	Identifier	oflow_info		104411	1					
ANR	105013	ConditionalExpression	* str == '-' ? - 1 : 1		104411	1					
ANR	105014	Condition	* str == '-'		104411	0					
ANR	105015	EqualityExpression	* str == '-'		104411	0		==			
ANR	105016	UnaryOperationExpression	* str		104411	0					
ANR	105017	UnaryOperator	*		104411	0					
ANR	105018	Identifier	str		104411	1					
ANR	105019	PrimaryExpression	'-'		104411	1					
ANR	105020	UnaryOperationExpression	- 1		104411	1					
ANR	105021	UnaryOperator	-		104411	0					
ANR	105022	PrimaryExpression	1		104411	1					
ANR	105023	PrimaryExpression	1		104411	2					
ANR	105024	ReturnStatement	return IS_DOUBLE ;	251:4:8437:8453	104411	2	True				
ANR	105025	Identifier	IS_DOUBLE		104411	0					
ANR	105026	IfStatement	if ( lval )		104411	1					
ANR	105027	Condition	lval	255:6:8471:8474	104411	0	True				
ANR	105028	Identifier	lval		104411	0					
ANR	105029	CompoundStatement		123:12:2863:2863	104411	1					
ANR	105030	ExpressionStatement	"* lval = strtol ( str , NULL , base )"	256:3:8482:8513	104411	0	True				
ANR	105031	AssignmentExpression	"* lval = strtol ( str , NULL , base )"		104411	0		=			
ANR	105032	UnaryOperationExpression	* lval		104411	0					
ANR	105033	UnaryOperator	*		104411	0					
ANR	105034	Identifier	lval		104411	1					
ANR	105035	CallExpression	"strtol ( str , NULL , base )"		104411	1					
ANR	105036	Callee	strtol		104411	0					
ANR	105037	Identifier	strtol		104411	0					
ANR	105038	ArgumentList	str		104411	1					
ANR	105039	Argument	str		104411	0					
ANR	105040	Identifier	str		104411	0					
ANR	105041	Argument	NULL		104411	1					
ANR	105042	Identifier	NULL		104411	0					
ANR	105043	Argument	base		104411	2					
ANR	105044	Identifier	base		104411	0					
ANR	105045	ReturnStatement	return IS_LONG ;	259:2:8522:8536	104411	2	True				
ANR	105046	Identifier	IS_LONG		104411	0					
ANR	105047	ElseStatement	else		104411	0					
ANR	105048	CompoundStatement		128:8:2932:2932	104411	0					
ANR	105049	IfStatement	if ( dval )		104411	0					
ANR	105050	Condition	dval	261:6:8554:8557	104411	0	True				
ANR	105051	Identifier	dval		104411	0					
ANR	105052	CompoundStatement		129:12:2946:2946	104411	1					
ANR	105053	ExpressionStatement	* dval = local_dval	262:3:8565:8583	104411	0	True				
ANR	105054	AssignmentExpression	* dval = local_dval		104411	0		=			
ANR	105055	UnaryOperationExpression	* dval		104411	0					
ANR	105056	UnaryOperator	*		104411	0					
ANR	105057	Identifier	dval		104411	1					
ANR	105058	Identifier	local_dval		104411	1					
ANR	105059	ReturnStatement	return IS_DOUBLE ;	265:2:8592:8608	104411	1	True				
ANR	105060	Identifier	IS_DOUBLE		104411	0					
ANR	105061	ReturnType	static inline zend_uchar		104411	1					
ANR	105062	Identifier	is_numeric_string_ex		104411	2					
ANR	105063	ParameterList	"const char * str , int length , long * lval , double * dval , int allow_errors , int * oflow_info"		104411	3					
ANR	105064	Parameter	const char * str	132:46:5523:5537	104411	0	True				
ANR	105065	ParameterType	const char *		104411	0					
ANR	105066	Identifier	str		104411	1					
ANR	105067	Parameter	int length	132:63:5540:5549	104411	1	True				
ANR	105068	ParameterType	int		104411	0					
ANR	105069	Identifier	length		104411	1					
ANR	105070	Parameter	long * lval	132:75:5552:5561	104411	2	True				
ANR	105071	ParameterType	long *		104411	0					
ANR	105072	Identifier	lval		104411	1					
ANR	105073	Parameter	double * dval	132:87:5564:5575	104411	3	True				
ANR	105074	ParameterType	double *		104411	0					
ANR	105075	Identifier	dval		104411	1					
ANR	105076	Parameter	int allow_errors	132:101:5578:5593	104411	4	True				
ANR	105077	ParameterType	int		104411	0					
ANR	105078	Identifier	allow_errors		104411	1					
ANR	105079	Parameter	int * oflow_info	132:119:5596:5610	104411	5	True				
ANR	105080	ParameterType	int *		104411	0					
ANR	105081	Identifier	oflow_info		104411	1					
ANR	105082	CFGEntryNode	ENTRY		104411		True				
ANR	105083	CFGExitNode	EXIT		104411		True				
ANR	105084	Symbol	allow_errors		104411						
ANR	105085	Symbol	lval		104411						
ANR	105086	Symbol	cmp		104411						
ANR	105087	Symbol	ZEND_IS_DIGIT		104411						
ANR	105088	Symbol	* digits		104411						
ANR	105089	Symbol	* lval		104411						
ANR	105090	Symbol	type		104411						
ANR	105091	Symbol	zend_strtod		104411						
ANR	105092	Symbol	dval		104411						
ANR	105093	Symbol	long_min_digits		104411						
ANR	105094	Symbol	& ptr		104411						
ANR	105095	Symbol	strtol		104411						
ANR	105096	Symbol	IS_LONG		104411						
ANR	105097	Symbol	* ptr		104411						
ANR	105098	Symbol	* str		104411						
ANR	105099	Symbol	dp_or_e		104411						
ANR	105100	Symbol	strcmp		104411						
ANR	105101	Symbol	* oflow_info		104411						
ANR	105102	Symbol	NULL		104411						
ANR	105103	Symbol	e		104411						
ANR	105104	Symbol	ZEND_IS_XDIGIT		104411						
ANR	105105	Symbol	* ptr ++		104411						
ANR	105106	Symbol	length		104411						
ANR	105107	Symbol	MAX_LENGTH_OF_LONG		104411						
ANR	105108	Symbol	E_NOTICE		104411						
ANR	105109	Symbol	* dval		104411						
ANR	105110	Symbol	ptr		104411						
ANR	105111	Symbol	* e		104411						
ANR	105112	Symbol	str		104411						
ANR	105113	Symbol	zend_hex_strtod		104411						
ANR	105114	Symbol	SIZEOF_LONG		104411						
ANR	105115	Symbol	IS_DOUBLE		104411						
ANR	105116	Symbol	digits		104411						
ANR	105117	Symbol	oflow_info		104411						
ANR	105118	Symbol	base		104411						
ANR	105119	Symbol	local_dval		104411						
ANR	105120	Function	is_numeric_string	269:0:8616:8812							
ANR	105121	FunctionDef	"is_numeric_string (const char * str , int length , long * lval , double * dval , int allow_errors)"		105120	0					
ANR	105122	CompoundStatement		269:116:8732:8812	105120	0					
ANR	105123	ReturnStatement	"return is_numeric_string_ex ( str , length , lval , dval , allow_errors , NULL ) ;"	270:4:8738:8810	105120	0	True				
ANR	105124	CallExpression	"is_numeric_string_ex ( str , length , lval , dval , allow_errors , NULL )"		105120	0					
ANR	105125	Callee	is_numeric_string_ex		105120	0					
ANR	105126	Identifier	is_numeric_string_ex		105120	0					
ANR	105127	ArgumentList	str		105120	1					
ANR	105128	Argument	str		105120	0					
ANR	105129	Identifier	str		105120	0					
ANR	105130	Argument	length		105120	1					
ANR	105131	Identifier	length		105120	0					
ANR	105132	Argument	lval		105120	2					
ANR	105133	Identifier	lval		105120	0					
ANR	105134	Argument	dval		105120	3					
ANR	105135	Identifier	dval		105120	0					
ANR	105136	Argument	allow_errors		105120	4					
ANR	105137	Identifier	allow_errors		105120	0					
ANR	105138	Argument	NULL		105120	5					
ANR	105139	Identifier	NULL		105120	0					
ANR	105140	ReturnType	static inline zend_uchar		105120	1					
ANR	105141	Identifier	is_numeric_string		105120	2					
ANR	105142	ParameterList	"const char * str , int length , long * lval , double * dval , int allow_errors"		105120	3					
ANR	105143	Parameter	const char * str	269:43:8659:8673	105120	0	True				
ANR	105144	ParameterType	const char *		105120	0					
ANR	105145	Identifier	str		105120	1					
ANR	105146	Parameter	int length	269:60:8676:8685	105120	1	True				
ANR	105147	ParameterType	int		105120	0					
ANR	105148	Identifier	length		105120	1					
ANR	105149	Parameter	long * lval	269:72:8688:8697	105120	2	True				
ANR	105150	ParameterType	long *		105120	0					
ANR	105151	Identifier	lval		105120	1					
ANR	105152	Parameter	double * dval	269:84:8700:8711	105120	3	True				
ANR	105153	ParameterType	double *		105120	0					
ANR	105154	Identifier	dval		105120	1					
ANR	105155	Parameter	int allow_errors	269:98:8714:8729	105120	4	True				
ANR	105156	ParameterType	int		105120	0					
ANR	105157	Identifier	allow_errors		105120	1					
ANR	105158	CFGEntryNode	ENTRY		105120		True				
ANR	105159	CFGExitNode	EXIT		105120		True				
ANR	105160	Symbol	str		105120						
ANR	105161	Symbol	dval		105120						
ANR	105162	Symbol	NULL		105120						
ANR	105163	Symbol	allow_errors		105120						
ANR	105164	Symbol	lval		105120						
ANR	105165	Symbol	length		105120						
ANR	105166	Symbol	is_numeric_string_ex		105120						
ANR	105167	Function	zend_memnstr	273:0:8815:9371							
ANR	105168	FunctionDef	"zend_memnstr (const char * haystack , const char * needle , int needle_len , char * end)"		105167	0					
ANR	105169	CompoundStatement		275:0:8924:9371	105167	0					
ANR	105170	IdentifierDeclStatement	const char * p = haystack ;	276:1:8927:8951	105167	0	True				
ANR	105171	IdentifierDecl	* p = haystack		105167	0					
ANR	105172	IdentifierDeclType	const char *		105167	0					
ANR	105173	Identifier	p		105167	1					
ANR	105174	AssignmentExpression	* p = haystack		105167	2		=			
ANR	105175	Identifier	haystack		105167	0					
ANR	105176	Identifier	haystack		105167	1					
ANR	105177	IdentifierDeclStatement	const char ne = needle [ needle_len - 1 ] ;	277:1:8954:8990	105167	1	True				
ANR	105178	IdentifierDecl	ne = needle [ needle_len - 1 ]		105167	0					
ANR	105179	IdentifierDeclType	const char		105167	0					
ANR	105180	Identifier	ne		105167	1					
ANR	105181	AssignmentExpression	ne = needle [ needle_len - 1 ]		105167	2		=			
ANR	105182	Identifier	ne		105167	0					
ANR	105183	ArrayIndexing	needle [ needle_len - 1 ]		105167	1					
ANR	105184	Identifier	needle		105167	0					
ANR	105185	AdditiveExpression	needle_len - 1		105167	1		-			
ANR	105186	Identifier	needle_len		105167	0					
ANR	105187	PrimaryExpression	1		105167	1					
ANR	105188	IfStatement	if ( needle_len == 1 )		105167	2					
ANR	105189	Condition	needle_len == 1	279:5:8998:9012	105167	0	True				
ANR	105190	EqualityExpression	needle_len == 1		105167	0		==			
ANR	105191	Identifier	needle_len		105167	0					
ANR	105192	PrimaryExpression	1		105167	1					
ANR	105193	CompoundStatement		5:22:90:90	105167	1					
ANR	105194	ReturnStatement	"return ( char * ) memchr ( p , * needle , ( end - p ) ) ;"	280:2:9019:9061	105167	0	True				
ANR	105195	CastExpression	"( char * ) memchr ( p , * needle , ( end - p ) )"		105167	0					
ANR	105196	CastTarget	char *		105167	0					
ANR	105197	CallExpression	"memchr ( p , * needle , ( end - p ) )"		105167	1					
ANR	105198	Callee	memchr		105167	0					
ANR	105199	Identifier	memchr		105167	0					
ANR	105200	ArgumentList	p		105167	1					
ANR	105201	Argument	p		105167	0					
ANR	105202	Identifier	p		105167	0					
ANR	105203	Argument	* needle		105167	1					
ANR	105204	UnaryOperationExpression	* needle		105167	0					
ANR	105205	UnaryOperator	*		105167	0					
ANR	105206	Identifier	needle		105167	1					
ANR	105207	Argument	end - p		105167	2					
ANR	105208	AdditiveExpression	end - p		105167	0		-			
ANR	105209	Identifier	end		105167	0					
ANR	105210	Identifier	p		105167	1					
ANR	105211	IfStatement	if ( needle_len > end - haystack )		105167	3					
ANR	105212	Condition	needle_len > end - haystack	283:5:9072:9096	105167	0	True				
ANR	105213	RelationalExpression	needle_len > end - haystack		105167	0		>			
ANR	105214	Identifier	needle_len		105167	0					
ANR	105215	AdditiveExpression	end - haystack		105167	1		-			
ANR	105216	Identifier	end		105167	0					
ANR	105217	Identifier	haystack		105167	1					
ANR	105218	CompoundStatement		9:32:174:174	105167	1					
ANR	105219	ReturnStatement	return NULL ;	284:2:9103:9114	105167	0	True				
ANR	105220	Identifier	NULL		105167	0					
ANR	105221	ExpressionStatement	end -= needle_len	287:1:9121:9138	105167	4	True				
ANR	105222	AssignmentExpression	end -= needle_len		105167	0		-=			
ANR	105223	Identifier	end		105167	0					
ANR	105224	Identifier	needle_len		105167	1					
ANR	105225	WhileStatement	while ( p <= end )		105167	5					
ANR	105226	Condition	p <= end	289:8:9149:9156	105167	0	True				
ANR	105227	RelationalExpression	p <= end		105167	0		<=			
ANR	105228	Identifier	p		105167	0					
ANR	105229	Identifier	end		105167	1					
ANR	105230	CompoundStatement		15:18:234:234	105167	1					
ANR	105231	IfStatement	"if ( ( p = ( char * ) memchr ( p , * needle , ( end - p + 1 ) ) ) && ne == p [ needle_len - 1 ] )"		105167	0					
ANR	105232	Condition	"( p = ( char * ) memchr ( p , * needle , ( end - p + 1 ) ) ) && ne == p [ needle_len - 1 ]"	290:6:9167:9234	105167	0	True				
ANR	105233	AndExpression	"( p = ( char * ) memchr ( p , * needle , ( end - p + 1 ) ) ) && ne == p [ needle_len - 1 ]"		105167	0		&&			
ANR	105234	AssignmentExpression	"p = ( char * ) memchr ( p , * needle , ( end - p + 1 ) )"		105167	0		=			
ANR	105235	Identifier	p		105167	0					
ANR	105236	CastExpression	"( char * ) memchr ( p , * needle , ( end - p + 1 ) )"		105167	1					
ANR	105237	CastTarget	char *		105167	0					
ANR	105238	CallExpression	"memchr ( p , * needle , ( end - p + 1 ) )"		105167	1					
ANR	105239	Callee	memchr		105167	0					
ANR	105240	Identifier	memchr		105167	0					
ANR	105241	ArgumentList	p		105167	1					
ANR	105242	Argument	p		105167	0					
ANR	105243	Identifier	p		105167	0					
ANR	105244	Argument	* needle		105167	1					
ANR	105245	UnaryOperationExpression	* needle		105167	0					
ANR	105246	UnaryOperator	*		105167	0					
ANR	105247	Identifier	needle		105167	1					
ANR	105248	Argument	end - p + 1		105167	2					
ANR	105249	AdditiveExpression	end - p + 1		105167	0		-			
ANR	105250	Identifier	end		105167	0					
ANR	105251	AdditiveExpression	p + 1		105167	1		+			
ANR	105252	Identifier	p		105167	0					
ANR	105253	PrimaryExpression	1		105167	1					
ANR	105254	EqualityExpression	ne == p [ needle_len - 1 ]		105167	1		==			
ANR	105255	Identifier	ne		105167	0					
ANR	105256	ArrayIndexing	p [ needle_len - 1 ]		105167	1					
ANR	105257	Identifier	p		105167	0					
ANR	105258	AdditiveExpression	needle_len - 1		105167	1		-			
ANR	105259	Identifier	needle_len		105167	0					
ANR	105260	PrimaryExpression	1		105167	1					
ANR	105261	CompoundStatement		16:76:312:312	105167	1					
ANR	105262	IfStatement	"if ( ! memcmp ( needle , p , needle_len - 1 ) )"		105167	0					
ANR	105263	Condition	"! memcmp ( needle , p , needle_len - 1 )"	291:7:9246:9277	105167	0	True				
ANR	105264	UnaryOperationExpression	"! memcmp ( needle , p , needle_len - 1 )"		105167	0					
ANR	105265	UnaryOperator	!		105167	0					
ANR	105266	CallExpression	"memcmp ( needle , p , needle_len - 1 )"		105167	1					
ANR	105267	Callee	memcmp		105167	0					
ANR	105268	Identifier	memcmp		105167	0					
ANR	105269	ArgumentList	needle		105167	1					
ANR	105270	Argument	needle		105167	0					
ANR	105271	Identifier	needle		105167	0					
ANR	105272	Argument	p		105167	1					
ANR	105273	Identifier	p		105167	0					
ANR	105274	Argument	needle_len - 1		105167	2					
ANR	105275	AdditiveExpression	needle_len - 1		105167	0		-			
ANR	105276	Identifier	needle_len		105167	0					
ANR	105277	PrimaryExpression	1		105167	1					
ANR	105278	CompoundStatement		17:41:355:355	105167	1					
ANR	105279	ReturnStatement	return p ;	292:4:9286:9294	105167	0	True				
ANR	105280	Identifier	p		105167	0					
ANR	105281	IfStatement	if ( p == NULL )		105167	1					
ANR	105282	Condition	p == NULL	296:6:9312:9320	105167	0	True				
ANR	105283	EqualityExpression	p == NULL		105167	0		==			
ANR	105284	Identifier	p		105167	0					
ANR	105285	Identifier	NULL		105167	1					
ANR	105286	CompoundStatement		22:17:398:398	105167	1					
ANR	105287	ReturnStatement	return NULL ;	297:3:9328:9339	105167	0	True				
ANR	105288	Identifier	NULL		105167	0					
ANR	105289	ExpressionStatement	p ++	300:2:9348:9351	105167	2	True				
ANR	105290	PostIncDecOperationExpression	p ++		105167	0					
ANR	105291	Identifier	p		105167	0					
ANR	105292	IncDec	++		105167	1					
ANR	105293	ReturnStatement	return NULL ;	303:1:9358:9369	105167	6	True				
ANR	105294	Identifier	NULL		105167	0					
ANR	105295	ReturnType	static inline const char *		105167	1					
ANR	105296	Identifier	zend_memnstr		105167	2					
ANR	105297	ParameterList	"const char * haystack , const char * needle , int needle_len , char * end"		105167	3					
ANR	105298	Parameter	const char * haystack	274:13:8855:8874	105167	0	True				
ANR	105299	ParameterType	const char *		105167	0					
ANR	105300	Identifier	haystack		105167	1					
ANR	105301	Parameter	const char * needle	274:35:8877:8894	105167	1	True				
ANR	105302	ParameterType	const char *		105167	0					
ANR	105303	Identifier	needle		105167	1					
ANR	105304	Parameter	int needle_len	274:55:8897:8910	105167	2	True				
ANR	105305	ParameterType	int		105167	0					
ANR	105306	Identifier	needle_len		105167	1					
ANR	105307	Parameter	char * end	274:71:8913:8921	105167	3	True				
ANR	105308	ParameterType	char *		105167	0					
ANR	105309	Identifier	end		105167	1					
ANR	105310	CFGEntryNode	ENTRY		105167		True				
ANR	105311	CFGExitNode	EXIT		105167		True				
ANR	105312	Symbol	p		105167						
ANR	105313	Symbol	haystack		105167						
ANR	105314	Symbol	NULL		105167						
ANR	105315	Symbol	memcmp		105167						
ANR	105316	Symbol	ne		105167						
ANR	105317	Symbol	* needle		105167						
ANR	105318	Symbol	end		105167						
ANR	105319	Symbol	memchr		105167						
ANR	105320	Symbol	* p		105167						
ANR	105321	Symbol	needle		105167						
ANR	105322	Symbol	* needle_len		105167						
ANR	105323	Symbol	needle_len		105167						
ANR	105324	Function	zend_memrchr	306:0:9374:9685							
ANR	105325	FunctionDef	"zend_memrchr (const void * s , int c , size_t n)"		105324	0					
ANR	105326	CompoundStatement		307:0:9445:9685	105324	0					
ANR	105327	Statement	register	308:1:9448:9455	105324	0	True				
ANR	105328	IdentifierDeclStatement	const unsigned char * e ;	308:10:9457:9479	105324	1	True				
ANR	105329	IdentifierDecl	* e		105324	0					
ANR	105330	IdentifierDeclType	const unsigned char *		105324	0					
ANR	105331	Identifier	e		105324	1					
ANR	105332	IfStatement	if ( n <= 0 )		105324	2					
ANR	105333	Condition	n <= 0	310:5:9487:9492	105324	0	True				
ANR	105334	RelationalExpression	n <= 0		105324	0		<=			
ANR	105335	Identifier	n		105324	0					
ANR	105336	PrimaryExpression	0		105324	1					
ANR	105337	CompoundStatement		4:13:49:49	105324	1					
ANR	105338	ReturnStatement	return NULL ;	311:2:9499:9510	105324	0	True				
ANR	105339	Identifier	NULL		105324	0					
ANR	105340	ForStatement	for ( e = ( const unsigned char * ) s + n - 1 ; e >= ( const unsigned char * ) s ; e -- )		105324	3					
ANR	105341	ForInit	e = ( const unsigned char * ) s + n - 1 ;	314:6:9522:9558	105324	0	True				
ANR	105342	AssignmentExpression	e = ( const unsigned char * ) s + n - 1		105324	0		=			
ANR	105343	Identifier	e		105324	0					
ANR	105344	AdditiveExpression	( const unsigned char * ) s + n - 1		105324	1		+			
ANR	105345	CastExpression	( const unsigned char * ) s		105324	0					
ANR	105346	CastTarget	const unsigned char *		105324	0					
ANR	105347	Identifier	s		105324	1					
ANR	105348	AdditiveExpression	n - 1		105324	1		-			
ANR	105349	Identifier	n		105324	0					
ANR	105350	PrimaryExpression	1		105324	1					
ANR	105351	Condition	e >= ( const unsigned char * ) s	314:44:9560:9588	105324	1	True				
ANR	105352	RelationalExpression	e >= ( const unsigned char * ) s		105324	0		>=			
ANR	105353	Identifier	e		105324	0					
ANR	105354	CastExpression	( const unsigned char * ) s		105324	1					
ANR	105355	CastTarget	const unsigned char *		105324	0					
ANR	105356	Identifier	s		105324	1					
ANR	105357	PostIncDecOperationExpression	e --	314:75:9591:9593	105324	2	True				
ANR	105358	Identifier	e		105324	0					
ANR	105359	IncDec	--		105324	1					
ANR	105360	CompoundStatement		8:80:150:150	105324	3					
ANR	105361	IfStatement	if ( * e == ( const unsigned char ) c )		105324	0					
ANR	105362	Condition	* e == ( const unsigned char ) c	315:6:9604:9631	105324	0	True				
ANR	105363	EqualityExpression	* e == ( const unsigned char ) c		105324	0		==			
ANR	105364	UnaryOperationExpression	* e		105324	0					
ANR	105365	UnaryOperator	*		105324	0					
ANR	105366	Identifier	e		105324	1					
ANR	105367	CastExpression	( const unsigned char ) c		105324	1					
ANR	105368	CastTarget	const unsigned char		105324	0					
ANR	105369	Identifier	c		105324	1					
ANR	105370	CompoundStatement		9:36:188:188	105324	1					
ANR	105371	ReturnStatement	return ( const void * ) e ;	316:3:9639:9661	105324	0	True				
ANR	105372	CastExpression	( const void * ) e		105324	0					
ANR	105373	CastTarget	const void *		105324	0					
ANR	105374	Identifier	e		105324	1					
ANR	105375	ReturnStatement	return NULL ;	320:1:9672:9683	105324	4	True				
ANR	105376	Identifier	NULL		105324	0					
ANR	105377	ReturnType	static inline const void *		105324	1					
ANR	105378	Identifier	zend_memrchr		105324	2					
ANR	105379	ParameterList	"const void * s , int c , size_t n"		105324	3					
ANR	105380	Parameter	const void * s	306:39:9413:9425	105324	0	True				
ANR	105381	ParameterType	const void *		105324	0					
ANR	105382	Identifier	s		105324	1					
ANR	105383	Parameter	int c	306:54:9428:9432	105324	1	True				
ANR	105384	ParameterType	int		105324	0					
ANR	105385	Identifier	c		105324	1					
ANR	105386	Parameter	size_t n	306:61:9435:9442	105324	2	True				
ANR	105387	ParameterType	size_t		105324	0					
ANR	105388	Identifier	n		105324	1					
ANR	105389	CFGEntryNode	ENTRY		105324		True				
ANR	105390	CFGExitNode	EXIT		105324		True				
ANR	105391	Symbol	s		105324						
ANR	105392	Symbol	c		105324						
ANR	105393	Symbol	NULL		105324						
ANR	105394	Symbol	e		105324						
ANR	105395	Symbol	n		105324						
ANR	105396	Symbol	* e		105324						
ANR	105397	DeclStmt									
ANR	105398	Decl							ZEND_API int	ZEND_API int ( zval * op1 )	increment_function
ANR	105399	DeclStmt									
ANR	105400	Decl							ZEND_API int	ZEND_API int ( zval * op2 )	decrement_function
ANR	105401	DeclStmt									
ANR	105402	Decl							ZEND_API void	ZEND_API void ( zval * op )	convert_to_long
ANR	105403	DeclStmt									
ANR	105404	Decl							ZEND_API void	ZEND_API void ( zval * op )	convert_to_double
ANR	105405	DeclStmt									
ANR	105406	Decl							ZEND_API void	"ZEND_API void ( zval * op , int base )"	convert_to_long_base
ANR	105407	DeclStmt									
ANR	105408	Decl							ZEND_API void	ZEND_API void ( zval * op )	convert_to_null
ANR	105409	DeclStmt									
ANR	105410	Decl							ZEND_API void	ZEND_API void ( zval * op )	convert_to_boolean
ANR	105411	DeclStmt									
ANR	105412	Decl							ZEND_API void	ZEND_API void ( zval * op )	convert_to_array
ANR	105413	DeclStmt									
ANR	105414	Decl							ZEND_API void	ZEND_API void ( zval * op )	convert_to_object
ANR	105415	DeclStmt									
ANR	105416	Decl							ZEND_API int	"ZEND_API int ( zval * result , const zval * op1 , const zval * op2 )"	add_char_to_string
ANR	105417	DeclStmt									
ANR	105418	Decl							ZEND_API int	"ZEND_API int ( zval * result , const zval * op1 , const zval * op2 )"	add_string_to_string
ANR	105419	DeclStmt									
ANR	105420	Decl							ZEND_API double	"ZEND_API double ( const char * number , zend_uint length )"	zend_string_to_double
ANR	105421	DeclStmt									
ANR	105422	Decl							ZEND_API int	ZEND_API int ( zval * op )	zval_is_true
ANR	105423	DeclStmt									
ANR	105424	Decl							ZEND_API int	"ZEND_API int ( zval * result , zval * op1 , zval * op2 , zend_bool case_insensitive TSRMLS_DC )"	string_compare_function_ex
ANR	105425	DeclStmt									
ANR	105426	Decl							ZEND_API void	"ZEND_API void ( char * str , unsigned int length )"	zend_str_tolower
ANR	105427	DeclStmt									
ANR	105428	Decl							ZEND_API char	"ZEND_API char * ( char * dest , const char * source , unsigned int length )"	zend_str_tolower_copy
ANR	105429	DeclStmt									
ANR	105430	Decl							ZEND_API char	"ZEND_API char * ( const char * source , unsigned int length )"	zend_str_tolower_dup
ANR	105431	DeclStmt									
ANR	105432	Decl							ZEND_API int	"ZEND_API int ( zval * s1 , zval * s2 )"	zend_binary_zval_strcmp
ANR	105433	DeclStmt									
ANR	105434	Decl							ZEND_API int	"ZEND_API int ( zval * s1 , zval * s2 , zval * s3 )"	zend_binary_zval_strncmp
ANR	105435	DeclStmt									
ANR	105436	Decl							ZEND_API int	"ZEND_API int ( zval * s1 , zval * s2 )"	zend_binary_zval_strcasecmp
ANR	105437	DeclStmt									
ANR	105438	Decl							ZEND_API int	"ZEND_API int ( zval * s1 , zval * s2 , zval * s3 )"	zend_binary_zval_strncasecmp
ANR	105439	DeclStmt									
ANR	105440	Decl							ZEND_API int	"ZEND_API int ( const char * s1 , uint len1 , const char * s2 , uint len2 )"	zend_binary_strcmp
ANR	105441	DeclStmt									
ANR	105442	Decl							ZEND_API int	"ZEND_API int ( const char * s1 , uint len1 , const char * s2 , uint len2 , uint length )"	zend_binary_strncmp
ANR	105443	DeclStmt									
ANR	105444	Decl							ZEND_API int	"ZEND_API int ( const char * s1 , uint len1 , const char * s2 , uint len2 )"	zend_binary_strcasecmp
ANR	105445	DeclStmt									
ANR	105446	Decl							ZEND_API int	"ZEND_API int ( const char * s1 , uint len1 , const char * s2 , uint len2 , uint length )"	zend_binary_strncasecmp
ANR	105447	DeclStmt									
ANR	105448	Decl							ZEND_API int	"ZEND_API int ( const char * s1 , uint len1 , const char * s2 , uint len2 , uint length )"	zend_binary_strncasecmp_l
ANR	105449	DeclStmt									
ANR	105450	Decl							ZEND_API void	"ZEND_API void ( zval * result , zval * s1 , zval * s2 )"	zendi_smart_strcmp
ANR	105451	DeclStmt									
ANR	105452	Decl							ZEND_API int	"ZEND_API int ( const char * str , int str_len )"	zend_atoi
ANR	105453	DeclStmt									
ANR	105454	Decl							ZEND_API long	"ZEND_API long ( const char * str , int str_len )"	zend_atol
ANR	105455	DeclStmt									
ANR	105456	Decl							convert_to_	convert_to_	lower_type
ANR	105457	DeclStmt									
ANR	105458	Decl							ZEND_API void	ZEND_API void ( void )	zend_update_current_locale
ANR	105459	Function	fast_increment_function	510:0:17909:18815							
ANR	105460	FunctionDef	fast_increment_function (zval * op1)		105459	0					
ANR	105461	CompoundStatement		511:0:17974:18815	105459	0					
ANR	105462	IfStatement	if ( EXPECTED ( Z_TYPE_P ( op1 ) == IS_LONG ) )		105459	0					
ANR	105463	Condition	EXPECTED ( Z_TYPE_P ( op1 ) == IS_LONG )	512:5:17981:18014	105459	0	True				
ANR	105464	CallExpression	EXPECTED ( Z_TYPE_P ( op1 ) == IS_LONG )		105459	0					
ANR	105465	Callee	EXPECTED		105459	0					
ANR	105466	Identifier	EXPECTED		105459	0					
ANR	105467	ArgumentList	Z_TYPE_P ( op1 ) == IS_LONG		105459	1					
ANR	105468	Argument	Z_TYPE_P ( op1 ) == IS_LONG		105459	0					
ANR	105469	EqualityExpression	Z_TYPE_P ( op1 ) == IS_LONG		105459	0		==			
ANR	105470	CallExpression	Z_TYPE_P ( op1 )		105459	0					
ANR	105471	Callee	Z_TYPE_P		105459	0					
ANR	105472	Identifier	Z_TYPE_P		105459	0					
ANR	105473	ArgumentList	op1		105459	1					
ANR	105474	Argument	op1		105459	0					
ANR	105475	Identifier	op1		105459	0					
ANR	105476	Identifier	IS_LONG		105459	1					
ANR	105477	CompoundStatement		2:41:42:42	105459	1					
ANR	105478	Statement	__asm__	514:2:18064:18070	105459	0	True				
ANR	105479	Statement	(	514:9:18071:18071	105459	1	True				
ANR	105480	Statement	"""incl (%0)\\n\\t"""	515:3:18076:18090	105459	2	True				
ANR	105481	Statement	"""jno  0f\\n\\t"""	516:3:18095:18107	105459	3	True				
ANR	105482	Statement	"""movl $0x0, (%0)\\n\\t"""	517:3:18112:18132	105459	4	True				
ANR	105483	Statement	"""movl $0x41e00000, 0x4(%0)\\n\\t"""	518:3:18137:18167	105459	5	True				
ANR	105484	Statement	"""movb %1, %c2(%0)\\n"""	519:3:18172:18191	105459	6	True				
ANR	105485	Statement	"""0:"""	520:3:18196:18199	105459	7	True				
ANR	105486	Statement	:	521:3:18204:18204	105459	8	True				
ANR	105487	Statement	:	522:3:18209:18209	105459	9	True				
ANR	105488	Statement	"""r"""	522:5:18211:18213	105459	10	True				
ANR	105489	Statement	(	522:8:18214:18214	105459	11	True				
ANR	105490	Statement	&	522:9:18215:18215	105459	12	True				
ANR	105491	Statement	op1	522:10:18216:18218	105459	13	True				
ANR	105492	Statement	->	522:13:18219:18220	105459	14	True				
ANR	105493	Statement	value	522:15:18221:18225	105459	15	True				
ANR	105494	Statement	)	522:20:18226:18226	105459	16	True				
ANR	105495	Statement	","	522:21:18227:18227	105459	17	True				
ANR	105496	Statement	"""n"""	523:5:18234:18236	105459	18	True				
ANR	105497	Statement	(	523:8:18237:18237	105459	19	True				
ANR	105498	Statement	IS_DOUBLE	523:9:18238:18246	105459	20	True				
ANR	105499	Statement	)	523:18:18247:18247	105459	21	True				
ANR	105500	Statement	","	523:19:18248:18248	105459	22	True				
ANR	105501	Statement	"""n"""	524:5:18255:18257	105459	23	True				
ANR	105502	Statement	(	524:8:18258:18258	105459	24	True				
ANR	105503	Statement	ZVAL_OFFSETOF_TYPE	524:9:18259:18276	105459	25	True				
ANR	105504	Statement	)	524:27:18277:18277	105459	26	True				
ANR	105505	Statement	:	525:3:18282:18282	105459	27	True				
ANR	105506	Statement	"""cc"""	525:5:18284:18287	105459	28	True				
ANR	105507	Statement	)	525:9:18288:18288	105459	29	True				
ANR	105508	ExpressionStatement		525:10:18289:18289	105459	30	True				
ANR	105509	ReturnStatement	return SUCCESS ;	548:2:18763:18777	105459	31	True				
ANR	105510	Identifier	SUCCESS		105459	0					
ANR	105511	ReturnStatement	return increment_function ( op1 ) ;	550:1:18783:18813	105459	1	True				
ANR	105512	CallExpression	increment_function ( op1 )		105459	0					
ANR	105513	Callee	increment_function		105459	0					
ANR	105514	Identifier	increment_function		105459	0					
ANR	105515	ArgumentList	op1		105459	1					
ANR	105516	Argument	op1		105459	0					
ANR	105517	Identifier	op1		105459	0					
ANR	105518	ReturnType	static zend_always_inline int		105459	1					
ANR	105519	Identifier	fast_increment_function		105459	2					
ANR	105520	ParameterList	zval * op1		105459	3					
ANR	105521	Parameter	zval * op1	510:54:17963:17971	105459	0	True				
ANR	105522	ParameterType	zval *		105459	0					
ANR	105523	Identifier	op1		105459	1					
ANR	105524	CFGEntryNode	ENTRY		105459		True				
ANR	105525	CFGExitNode	EXIT		105459		True				
ANR	105526	Symbol	op1		105459						
ANR	105527	Symbol	SUCCESS		105459						
ANR	105528	Symbol	IS_LONG		105459						
ANR	105529	Symbol	increment_function		105459						
ANR	105530	Symbol	Z_TYPE_P		105459						
ANR	105531	Symbol	EXPECTED		105459						
ANR	105532	Function	fast_decrement_function	553:0:18818:19736							
ANR	105533	FunctionDef	fast_decrement_function (zval * op1)		105532	0					
ANR	105534	CompoundStatement		554:0:18883:19736	105532	0					
ANR	105535	IfStatement	if ( EXPECTED ( Z_TYPE_P ( op1 ) == IS_LONG ) )		105532	0					
ANR	105536	Condition	EXPECTED ( Z_TYPE_P ( op1 ) == IS_LONG )	555:5:18890:18923	105532	0	True				
ANR	105537	CallExpression	EXPECTED ( Z_TYPE_P ( op1 ) == IS_LONG )		105532	0					
ANR	105538	Callee	EXPECTED		105532	0					
ANR	105539	Identifier	EXPECTED		105532	0					
ANR	105540	ArgumentList	Z_TYPE_P ( op1 ) == IS_LONG		105532	1					
ANR	105541	Argument	Z_TYPE_P ( op1 ) == IS_LONG		105532	0					
ANR	105542	EqualityExpression	Z_TYPE_P ( op1 ) == IS_LONG		105532	0		==			
ANR	105543	CallExpression	Z_TYPE_P ( op1 )		105532	0					
ANR	105544	Callee	Z_TYPE_P		105532	0					
ANR	105545	Identifier	Z_TYPE_P		105532	0					
ANR	105546	ArgumentList	op1		105532	1					
ANR	105547	Argument	op1		105532	0					
ANR	105548	Identifier	op1		105532	0					
ANR	105549	Identifier	IS_LONG		105532	1					
ANR	105550	CompoundStatement		2:41:42:42	105532	1					
ANR	105551	Statement	__asm__	557:2:18973:18979	105532	0	True				
ANR	105552	Statement	(	557:9:18980:18980	105532	1	True				
ANR	105553	Statement	"""decl (%0)\\n\\t"""	558:3:18985:18999	105532	2	True				
ANR	105554	Statement	"""jno  0f\\n\\t"""	559:3:19004:19016	105532	3	True				
ANR	105555	Statement	"""movl $0x00200000, (%0)\\n\\t"""	560:3:19021:19048	105532	4	True				
ANR	105556	Statement	"""movl $0xc1e00000, 0x4(%0)\\n\\t"""	561:3:19053:19083	105532	5	True				
ANR	105557	Statement	"""movb %1,%c2(%0)\\n"""	562:3:19088:19106	105532	6	True				
ANR	105558	Statement	"""0:"""	563:3:19111:19114	105532	7	True				
ANR	105559	Statement	:	564:3:19119:19119	105532	8	True				
ANR	105560	Statement	:	565:3:19124:19124	105532	9	True				
ANR	105561	Statement	"""r"""	565:5:19126:19128	105532	10	True				
ANR	105562	Statement	(	565:8:19129:19129	105532	11	True				
ANR	105563	Statement	&	565:9:19130:19130	105532	12	True				
ANR	105564	Statement	op1	565:10:19131:19133	105532	13	True				
ANR	105565	Statement	->	565:13:19134:19135	105532	14	True				
ANR	105566	Statement	value	565:15:19136:19140	105532	15	True				
ANR	105567	Statement	)	565:20:19141:19141	105532	16	True				
ANR	105568	Statement	","	565:21:19142:19142	105532	17	True				
ANR	105569	Statement	"""n"""	566:5:19149:19151	105532	18	True				
ANR	105570	Statement	(	566:8:19152:19152	105532	19	True				
ANR	105571	Statement	IS_DOUBLE	566:9:19153:19161	105532	20	True				
ANR	105572	Statement	)	566:18:19162:19162	105532	21	True				
ANR	105573	Statement	","	566:19:19163:19163	105532	22	True				
ANR	105574	Statement	"""n"""	567:5:19170:19172	105532	23	True				
ANR	105575	Statement	(	567:8:19173:19173	105532	24	True				
ANR	105576	Statement	ZVAL_OFFSETOF_TYPE	567:9:19174:19191	105532	25	True				
ANR	105577	Statement	)	567:27:19192:19192	105532	26	True				
ANR	105578	Statement	:	568:3:19197:19197	105532	27	True				
ANR	105579	Statement	"""cc"""	568:5:19199:19202	105532	28	True				
ANR	105580	Statement	)	568:9:19203:19203	105532	29	True				
ANR	105581	ExpressionStatement		568:10:19204:19204	105532	30	True				
ANR	105582	ReturnStatement	return SUCCESS ;	591:2:19684:19698	105532	31	True				
ANR	105583	Identifier	SUCCESS		105532	0					
ANR	105584	ReturnStatement	return decrement_function ( op1 ) ;	593:1:19704:19734	105532	1	True				
ANR	105585	CallExpression	decrement_function ( op1 )		105532	0					
ANR	105586	Callee	decrement_function		105532	0					
ANR	105587	Identifier	decrement_function		105532	0					
ANR	105588	ArgumentList	op1		105532	1					
ANR	105589	Argument	op1		105532	0					
ANR	105590	Identifier	op1		105532	0					
ANR	105591	ReturnType	static zend_always_inline int		105532	1					
ANR	105592	Identifier	fast_decrement_function		105532	2					
ANR	105593	ParameterList	zval * op1		105532	3					
ANR	105594	Parameter	zval * op1	553:54:18872:18880	105532	0	True				
ANR	105595	ParameterType	zval *		105532	0					
ANR	105596	Identifier	op1		105532	1					
ANR	105597	CFGEntryNode	ENTRY		105532		True				
ANR	105598	CFGExitNode	EXIT		105532		True				
ANR	105599	Symbol	op1		105532						
ANR	105600	Symbol	SUCCESS		105532						
ANR	105601	Symbol	decrement_function		105532						
ANR	105602	Symbol	IS_LONG		105532						
ANR	105603	Symbol	Z_TYPE_P		105532						
ANR	105604	Symbol	EXPECTED		105532						
ANR	105605	DeclStmt									
ANR	105606	Decl							long	long	overflow
