command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	86511	File	data/converged/CVE-2017-11142_php-src/Zend_zend_language_scanner.c								
ANR	86512	DeclStmt									
ANR	86513	Decl							ZEND_API ts_rsrc_id	ZEND_API ts_rsrc_id	language_scanner_globals_id
ANR	86514	DeclStmt									
ANR	86515	Decl							ZEND_API zend_php_scanner_globals	ZEND_API zend_php_scanner_globals	language_scanner_globals
ANR	86516	DeclStmt									
ANR	86517	Decl							char	char *	p
ANR	86518	Decl							char	char *	boundary
ANR	86519	Function	encoding_filter_script_to_internal	128:0:4565:5032							
ANR	86520	FunctionDef	"encoding_filter_script_to_internal (unsigned char * * to , size_t * to_length , const unsigned char * from , size_t from_length TSRMLS_DC)"		86519	0					
ANR	86521	CompoundStatement		129:0:4711:5032	86519	0					
ANR	86522	IdentifierDeclStatement	const zend_encoding * internal_encoding = zend_multibyte_get_internal_encoding ( TSRMLS_C ) ;	130:1:4715:4802	86519	0	True				
ANR	86523	IdentifierDecl	* internal_encoding = zend_multibyte_get_internal_encoding ( TSRMLS_C )		86519	0					
ANR	86524	IdentifierDeclType	const zend_encoding *		86519	0					
ANR	86525	Identifier	internal_encoding		86519	1					
ANR	86526	AssignmentExpression	* internal_encoding = zend_multibyte_get_internal_encoding ( TSRMLS_C )		86519	2		=			
ANR	86527	Identifier	internal_encoding		86519	0					
ANR	86528	CallExpression	zend_multibyte_get_internal_encoding ( TSRMLS_C )		86519	1					
ANR	86529	Callee	zend_multibyte_get_internal_encoding		86519	0					
ANR	86530	Identifier	zend_multibyte_get_internal_encoding		86519	0					
ANR	86531	ArgumentList	TSRMLS_C		86519	1					
ANR	86532	Argument	TSRMLS_C		86519	0					
ANR	86533	Identifier	TSRMLS_C		86519	0					
ANR	86534	ExpressionStatement	assert ( internal_encoding && zend_multibyte_check_lexer_compatibility ( internal_encoding ) )	131:1:4806:4894	86519	1	True				
ANR	86535	CallExpression	assert ( internal_encoding && zend_multibyte_check_lexer_compatibility ( internal_encoding ) )		86519	0					
ANR	86536	Callee	assert		86519	0					
ANR	86537	Identifier	assert		86519	0					
ANR	86538	ArgumentList	internal_encoding && zend_multibyte_check_lexer_compatibility ( internal_encoding )		86519	1					
ANR	86539	Argument	internal_encoding && zend_multibyte_check_lexer_compatibility ( internal_encoding )		86519	0					
ANR	86540	AndExpression	internal_encoding && zend_multibyte_check_lexer_compatibility ( internal_encoding )		86519	0		&&			
ANR	86541	Identifier	internal_encoding		86519	0					
ANR	86542	CallExpression	zend_multibyte_check_lexer_compatibility ( internal_encoding )		86519	1					
ANR	86543	Callee	zend_multibyte_check_lexer_compatibility		86519	0					
ANR	86544	Identifier	zend_multibyte_check_lexer_compatibility		86519	0					
ANR	86545	ArgumentList	internal_encoding		86519	1					
ANR	86546	Argument	internal_encoding		86519	0					
ANR	86547	Identifier	internal_encoding		86519	0					
ANR	86548	Statement	return	132:1:4898:4903	86519	2	True				
ANR	86549	Statement	zend_multibyte_encoding_converter	132:8:4905:4937	86519	3	True				
ANR	86550	Statement	(	132:41:4938:4938	86519	4	True				
ANR	86551	Statement	to	132:42:4939:4940	86519	5	True				
ANR	86552	Statement	","	132:44:4941:4941	86519	6	True				
ANR	86553	Statement	to_length	132:46:4943:4951	86519	7	True				
ANR	86554	Statement	","	132:55:4952:4952	86519	8	True				
ANR	86555	Statement	from	132:57:4954:4957	86519	9	True				
ANR	86556	Statement	","	132:61:4958:4958	86519	10	True				
ANR	86557	Statement	from_length	132:63:4960:4970	86519	11	True				
ANR	86558	Statement	","	132:74:4971:4971	86519	12	True				
ANR	86559	Statement	internal_encoding	132:76:4973:4989	86519	13	True				
ANR	86560	Statement	","	132:93:4990:4990	86519	14	True				
ANR	86561	Statement	LANG_SCNG	132:95:4992:5000	86519	15	True				
ANR	86562	Statement	(	132:104:5001:5001	86519	16	True				
ANR	86563	Statement	script_encoding	132:105:5002:5016	86519	17	True				
ANR	86564	Statement	)	132:120:5017:5017	86519	18	True				
ANR	86565	Statement	TSRMLS_CC	132:122:5019:5027	86519	19	True				
ANR	86566	Statement	)	132:131:5028:5028	86519	20	True				
ANR	86567	ExpressionStatement		132:132:5029:5029	86519	21	True				
ANR	86568	ReturnType	static size_t		86519	1					
ANR	86569	Identifier	encoding_filter_script_to_internal		86519	2					
ANR	86570	ParameterList	"unsigned char * * to , size_t * to_length , const unsigned char * from , size_t from_length TSRMLS_DC"		86519	3					
ANR	86571	Parameter	unsigned char * * to	128:49:4614:4631	86519	0	True				
ANR	86572	ParameterType	unsigned char * *		86519	0					
ANR	86573	Identifier	to		86519	1					
ANR	86574	Parameter	size_t * to_length	128:69:4634:4650	86519	1	True				
ANR	86575	ParameterType	size_t *		86519	0					
ANR	86576	Identifier	to_length		86519	1					
ANR	86577	Parameter	const unsigned char * from	128:88:4653:4677	86519	2	True				
ANR	86578	ParameterType	const unsigned char *		86519	0					
ANR	86579	Identifier	from		86519	1					
ANR	86580	Parameter	size_t from_length TSRMLS_DC	128:115:4680:4707	86519	3	True				
ANR	86581	ParameterType	size_t from_length		86519	0					
ANR	86582	Identifier	TSRMLS_DC		86519	1					
ANR	86583	CFGEntryNode	ENTRY		86519		True				
ANR	86584	CFGExitNode	EXIT		86519		True				
ANR	86585	Symbol	zend_multibyte_check_lexer_compatibility		86519						
ANR	86586	Symbol	TSRMLS_C		86519						
ANR	86587	Symbol	to_length		86519						
ANR	86588	Symbol	from		86519						
ANR	86589	Symbol	to		86519						
ANR	86590	Symbol	TSRMLS_DC		86519						
ANR	86591	Symbol	internal_encoding		86519						
ANR	86592	Symbol	zend_multibyte_get_internal_encoding		86519						
ANR	86593	Function	encoding_filter_script_to_intermediate	135:0:5037:5336							
ANR	86594	FunctionDef	"encoding_filter_script_to_intermediate (unsigned char * * to , size_t * to_length , const unsigned char * from , size_t from_length TSRMLS_DC)"		86593	0					
ANR	86595	CompoundStatement		136:0:5187:5336	86593	0					
ANR	86596	Statement	return	137:1:5191:5196	86593	0	True				
ANR	86597	Statement	zend_multibyte_encoding_converter	137:8:5198:5230	86593	1	True				
ANR	86598	Statement	(	137:41:5231:5231	86593	2	True				
ANR	86599	Statement	to	137:42:5232:5233	86593	3	True				
ANR	86600	Statement	","	137:44:5234:5234	86593	4	True				
ANR	86601	Statement	to_length	137:46:5236:5244	86593	5	True				
ANR	86602	Statement	","	137:55:5245:5245	86593	6	True				
ANR	86603	Statement	from	137:57:5247:5250	86593	7	True				
ANR	86604	Statement	","	137:61:5251:5251	86593	8	True				
ANR	86605	Statement	from_length	137:63:5253:5263	86593	9	True				
ANR	86606	Statement	","	137:74:5264:5264	86593	10	True				
ANR	86607	Statement	zend_multibyte_encoding_utf8	137:76:5266:5293	86593	11	True				
ANR	86608	Statement	","	137:104:5294:5294	86593	12	True				
ANR	86609	Statement	LANG_SCNG	137:106:5296:5304	86593	13	True				
ANR	86610	Statement	(	137:115:5305:5305	86593	14	True				
ANR	86611	Statement	script_encoding	137:116:5306:5320	86593	15	True				
ANR	86612	Statement	)	137:131:5321:5321	86593	16	True				
ANR	86613	Statement	TSRMLS_CC	137:133:5323:5331	86593	17	True				
ANR	86614	Statement	)	137:142:5332:5332	86593	18	True				
ANR	86615	ExpressionStatement		137:143:5333:5333	86593	19	True				
ANR	86616	ReturnType	static size_t		86593	1					
ANR	86617	Identifier	encoding_filter_script_to_intermediate		86593	2					
ANR	86618	ParameterList	"unsigned char * * to , size_t * to_length , const unsigned char * from , size_t from_length TSRMLS_DC"		86593	3					
ANR	86619	Parameter	unsigned char * * to	135:53:5090:5107	86593	0	True				
ANR	86620	ParameterType	unsigned char * *		86593	0					
ANR	86621	Identifier	to		86593	1					
ANR	86622	Parameter	size_t * to_length	135:73:5110:5126	86593	1	True				
ANR	86623	ParameterType	size_t *		86593	0					
ANR	86624	Identifier	to_length		86593	1					
ANR	86625	Parameter	const unsigned char * from	135:92:5129:5153	86593	2	True				
ANR	86626	ParameterType	const unsigned char *		86593	0					
ANR	86627	Identifier	from		86593	1					
ANR	86628	Parameter	size_t from_length TSRMLS_DC	135:119:5156:5183	86593	3	True				
ANR	86629	ParameterType	size_t from_length		86593	0					
ANR	86630	Identifier	TSRMLS_DC		86593	1					
ANR	86631	CFGEntryNode	ENTRY		86593		True				
ANR	86632	CFGExitNode	EXIT		86593		True				
ANR	86633	Symbol	to_length		86593						
ANR	86634	Symbol	from		86593						
ANR	86635	Symbol	to		86593						
ANR	86636	Symbol	TSRMLS_DC		86593						
ANR	86637	Function	encoding_filter_intermediate_to_script	140:0:5341:5641							
ANR	86638	FunctionDef	"encoding_filter_intermediate_to_script (unsigned char * * to , size_t * to_length , const unsigned char * from , size_t from_length TSRMLS_DC)"		86637	0					
ANR	86639	CompoundStatement		141:0:5491:5641	86637	0					
ANR	86640	Statement	return	142:1:5495:5500	86637	0	True				
ANR	86641	Statement	zend_multibyte_encoding_converter	142:8:5502:5534	86637	1	True				
ANR	86642	Statement	(	142:41:5535:5535	86637	2	True				
ANR	86643	Statement	to	142:42:5536:5537	86637	3	True				
ANR	86644	Statement	","	142:44:5538:5538	86637	4	True				
ANR	86645	Statement	to_length	142:46:5540:5548	86637	5	True				
ANR	86646	Statement	","	142:55:5549:5549	86637	6	True				
ANR	86647	Statement	from	142:57:5551:5554	86637	7	True				
ANR	86648	Statement	","	142:61:5555:5555	86637	8	True				
ANR	86649	Statement	from_length	142:63:5557:5567	86637	9	True				
ANR	86650	Statement	","	142:74:5568:5568	86637	10	True				
ANR	86651	Statement	LANG_SCNG	143:0:5571:5579	86637	11	True				
ANR	86652	Statement	(	143:9:5580:5580	86637	12	True				
ANR	86653	Statement	script_encoding	143:10:5581:5595	86637	13	True				
ANR	86654	Statement	)	143:25:5596:5596	86637	14	True				
ANR	86655	Statement	","	143:26:5597:5597	86637	15	True				
ANR	86656	Statement	zend_multibyte_encoding_utf8	143:28:5599:5626	86637	16	True				
ANR	86657	Statement	TSRMLS_CC	143:57:5628:5636	86637	17	True				
ANR	86658	Statement	)	143:66:5637:5637	86637	18	True				
ANR	86659	ExpressionStatement		143:67:5638:5638	86637	19	True				
ANR	86660	ReturnType	static size_t		86637	1					
ANR	86661	Identifier	encoding_filter_intermediate_to_script		86637	2					
ANR	86662	ParameterList	"unsigned char * * to , size_t * to_length , const unsigned char * from , size_t from_length TSRMLS_DC"		86637	3					
ANR	86663	Parameter	unsigned char * * to	140:53:5394:5411	86637	0	True				
ANR	86664	ParameterType	unsigned char * *		86637	0					
ANR	86665	Identifier	to		86637	1					
ANR	86666	Parameter	size_t * to_length	140:73:5414:5430	86637	1	True				
ANR	86667	ParameterType	size_t *		86637	0					
ANR	86668	Identifier	to_length		86637	1					
ANR	86669	Parameter	const unsigned char * from	140:92:5433:5457	86637	2	True				
ANR	86670	ParameterType	const unsigned char *		86637	0					
ANR	86671	Identifier	from		86637	1					
ANR	86672	Parameter	size_t from_length TSRMLS_DC	140:119:5460:5487	86637	3	True				
ANR	86673	ParameterType	size_t from_length		86637	0					
ANR	86674	Identifier	TSRMLS_DC		86637	1					
ANR	86675	CFGEntryNode	ENTRY		86637		True				
ANR	86676	CFGExitNode	EXIT		86637		True				
ANR	86677	Symbol	to_length		86637						
ANR	86678	Symbol	from		86637						
ANR	86679	Symbol	to		86637						
ANR	86680	Symbol	TSRMLS_DC		86637						
ANR	86681	Function	encoding_filter_intermediate_to_internal	146:0:5646:6122							
ANR	86682	FunctionDef	"encoding_filter_intermediate_to_internal (unsigned char * * to , size_t * to_length , const unsigned char * from , size_t from_length TSRMLS_DC)"		86681	0					
ANR	86683	CompoundStatement		147:0:5798:6122	86681	0					
ANR	86684	IdentifierDeclStatement	const zend_encoding * internal_encoding = zend_multibyte_get_internal_encoding ( TSRMLS_C ) ;	148:1:5802:5889	86681	0	True				
ANR	86685	IdentifierDecl	* internal_encoding = zend_multibyte_get_internal_encoding ( TSRMLS_C )		86681	0					
ANR	86686	IdentifierDeclType	const zend_encoding *		86681	0					
ANR	86687	Identifier	internal_encoding		86681	1					
ANR	86688	AssignmentExpression	* internal_encoding = zend_multibyte_get_internal_encoding ( TSRMLS_C )		86681	2		=			
ANR	86689	Identifier	internal_encoding		86681	0					
ANR	86690	CallExpression	zend_multibyte_get_internal_encoding ( TSRMLS_C )		86681	1					
ANR	86691	Callee	zend_multibyte_get_internal_encoding		86681	0					
ANR	86692	Identifier	zend_multibyte_get_internal_encoding		86681	0					
ANR	86693	ArgumentList	TSRMLS_C		86681	1					
ANR	86694	Argument	TSRMLS_C		86681	0					
ANR	86695	Identifier	TSRMLS_C		86681	0					
ANR	86696	ExpressionStatement	assert ( internal_encoding && zend_multibyte_check_lexer_compatibility ( internal_encoding ) )	149:1:5893:5981	86681	1	True				
ANR	86697	CallExpression	assert ( internal_encoding && zend_multibyte_check_lexer_compatibility ( internal_encoding ) )		86681	0					
ANR	86698	Callee	assert		86681	0					
ANR	86699	Identifier	assert		86681	0					
ANR	86700	ArgumentList	internal_encoding && zend_multibyte_check_lexer_compatibility ( internal_encoding )		86681	1					
ANR	86701	Argument	internal_encoding && zend_multibyte_check_lexer_compatibility ( internal_encoding )		86681	0					
ANR	86702	AndExpression	internal_encoding && zend_multibyte_check_lexer_compatibility ( internal_encoding )		86681	0		&&			
ANR	86703	Identifier	internal_encoding		86681	0					
ANR	86704	CallExpression	zend_multibyte_check_lexer_compatibility ( internal_encoding )		86681	1					
ANR	86705	Callee	zend_multibyte_check_lexer_compatibility		86681	0					
ANR	86706	Identifier	zend_multibyte_check_lexer_compatibility		86681	0					
ANR	86707	ArgumentList	internal_encoding		86681	1					
ANR	86708	Argument	internal_encoding		86681	0					
ANR	86709	Identifier	internal_encoding		86681	0					
ANR	86710	Statement	return	150:1:5985:5990	86681	2	True				
ANR	86711	Statement	zend_multibyte_encoding_converter	150:8:5992:6024	86681	3	True				
ANR	86712	Statement	(	150:41:6025:6025	86681	4	True				
ANR	86713	Statement	to	150:42:6026:6027	86681	5	True				
ANR	86714	Statement	","	150:44:6028:6028	86681	6	True				
ANR	86715	Statement	to_length	150:46:6030:6038	86681	7	True				
ANR	86716	Statement	","	150:55:6039:6039	86681	8	True				
ANR	86717	Statement	from	150:57:6041:6044	86681	9	True				
ANR	86718	Statement	","	150:61:6045:6045	86681	10	True				
ANR	86719	Statement	from_length	150:63:6047:6057	86681	11	True				
ANR	86720	Statement	","	150:74:6058:6058	86681	12	True				
ANR	86721	Statement	internal_encoding	151:0:6061:6077	86681	13	True				
ANR	86722	Statement	","	151:17:6078:6078	86681	14	True				
ANR	86723	Statement	zend_multibyte_encoding_utf8	151:19:6080:6107	86681	15	True				
ANR	86724	Statement	TSRMLS_CC	151:48:6109:6117	86681	16	True				
ANR	86725	Statement	)	151:57:6118:6118	86681	17	True				
ANR	86726	ExpressionStatement		151:58:6119:6119	86681	18	True				
ANR	86727	ReturnType	static size_t		86681	1					
ANR	86728	Identifier	encoding_filter_intermediate_to_internal		86681	2					
ANR	86729	ParameterList	"unsigned char * * to , size_t * to_length , const unsigned char * from , size_t from_length TSRMLS_DC"		86681	3					
ANR	86730	Parameter	unsigned char * * to	146:55:5701:5718	86681	0	True				
ANR	86731	ParameterType	unsigned char * *		86681	0					
ANR	86732	Identifier	to		86681	1					
ANR	86733	Parameter	size_t * to_length	146:75:5721:5737	86681	1	True				
ANR	86734	ParameterType	size_t *		86681	0					
ANR	86735	Identifier	to_length		86681	1					
ANR	86736	Parameter	const unsigned char * from	146:94:5740:5764	86681	2	True				
ANR	86737	ParameterType	const unsigned char *		86681	0					
ANR	86738	Identifier	from		86681	1					
ANR	86739	Parameter	size_t from_length TSRMLS_DC	146:121:5767:5794	86681	3	True				
ANR	86740	ParameterType	size_t from_length		86681	0					
ANR	86741	Identifier	TSRMLS_DC		86681	1					
ANR	86742	CFGEntryNode	ENTRY		86681		True				
ANR	86743	CFGExitNode	EXIT		86681		True				
ANR	86744	Symbol	zend_multibyte_check_lexer_compatibility		86681						
ANR	86745	Symbol	TSRMLS_C		86681						
ANR	86746	Symbol	to_length		86681						
ANR	86747	Symbol	from		86681						
ANR	86748	Symbol	to		86681						
ANR	86749	Symbol	TSRMLS_DC		86681						
ANR	86750	Symbol	internal_encoding		86681						
ANR	86751	Symbol	zend_multibyte_get_internal_encoding		86681						
ANR	86752	Function	_yy_push_state	155:0:6129:6294							
ANR	86753	FunctionDef	_yy_push_state (int new_state TSRMLS_DC)		86752	0					
ANR	86754	CompoundStatement		156:0:6182:6294	86752	0					
ANR	86755	ExpressionStatement	"zend_stack_push ( & SCNG ( state_stack ) , ( void * ) & YYGETCONDITION ( ) , sizeof ( int ) )"	157:1:6186:6262	86752	0	True				
ANR	86756	CallExpression	"zend_stack_push ( & SCNG ( state_stack ) , ( void * ) & YYGETCONDITION ( ) , sizeof ( int ) )"		86752	0					
ANR	86757	Callee	zend_stack_push		86752	0					
ANR	86758	Identifier	zend_stack_push		86752	0					
ANR	86759	ArgumentList	& SCNG ( state_stack )		86752	1					
ANR	86760	Argument	& SCNG ( state_stack )		86752	0					
ANR	86761	UnaryOperationExpression	& SCNG ( state_stack )		86752	0					
ANR	86762	UnaryOperator	&		86752	0					
ANR	86763	CallExpression	SCNG ( state_stack )		86752	1					
ANR	86764	Callee	SCNG		86752	0					
ANR	86765	Identifier	SCNG		86752	0					
ANR	86766	ArgumentList	state_stack		86752	1					
ANR	86767	Argument	state_stack		86752	0					
ANR	86768	Identifier	state_stack		86752	0					
ANR	86769	Argument	( void * ) & YYGETCONDITION ( )		86752	1					
ANR	86770	CastExpression	( void * ) & YYGETCONDITION ( )		86752	0					
ANR	86771	CastTarget	void *		86752	0					
ANR	86772	UnaryOperationExpression	& YYGETCONDITION ( )		86752	1					
ANR	86773	UnaryOperator	&		86752	0					
ANR	86774	CallExpression	YYGETCONDITION ( )		86752	1					
ANR	86775	Callee	YYGETCONDITION		86752	0					
ANR	86776	Identifier	YYGETCONDITION		86752	0					
ANR	86777	ArgumentList			86752	1					
ANR	86778	Argument	sizeof ( int )		86752	2					
ANR	86779	SizeofExpression	sizeof ( int )		86752	0					
ANR	86780	Sizeof	sizeof		86752	0					
ANR	86781	SizeofOperand	int		86752	1					
ANR	86782	ExpressionStatement	YYSETCONDITION ( new_state )	158:1:6266:6291	86752	1	True				
ANR	86783	CallExpression	YYSETCONDITION ( new_state )		86752	0					
ANR	86784	Callee	YYSETCONDITION		86752	0					
ANR	86785	Identifier	YYSETCONDITION		86752	0					
ANR	86786	ArgumentList	new_state		86752	1					
ANR	86787	Argument	new_state		86752	0					
ANR	86788	Identifier	new_state		86752	0					
ANR	86789	ReturnType	static void		86752	1					
ANR	86790	Identifier	_yy_push_state		86752	2					
ANR	86791	ParameterList	int new_state TSRMLS_DC		86752	3					
ANR	86792	Parameter	int new_state TSRMLS_DC	155:27:6156:6178	86752	0	True				
ANR	86793	ParameterType	int new_state		86752	0					
ANR	86794	Identifier	TSRMLS_DC		86752	1					
ANR	86795	CFGEntryNode	ENTRY		86752		True				
ANR	86796	CFGExitNode	EXIT		86752		True				
ANR	86797	Symbol	& SCNG		86752						
ANR	86798	Symbol	new_state		86752						
ANR	86799	Symbol	state_stack		86752						
ANR	86800	Symbol	TSRMLS_DC		86752						
ANR	86801	Symbol	& YYGETCONDITION		86752						
ANR	86802	DeclStmt									
ANR	86803	Decl							int	int *	stack_state
ANR	86804	Function	yy_scan_buffer	171:0:6576:6774							
ANR	86805	FunctionDef	"yy_scan_buffer (char * str , unsigned int len TSRMLS_DC)"		86804	0					
ANR	86806	CompoundStatement		172:0:6643:6774	86804	0					
ANR	86807	ExpressionStatement	YYCURSOR = ( YYCTYPE * ) str	173:1:6647:6677	86804	0	True				
ANR	86808	AssignmentExpression	YYCURSOR = ( YYCTYPE * ) str		86804	0		=			
ANR	86809	Identifier	YYCURSOR		86804	0					
ANR	86810	CastExpression	( YYCTYPE * ) str		86804	1					
ANR	86811	CastTarget	YYCTYPE *		86804	0					
ANR	86812	Identifier	str		86804	1					
ANR	86813	ExpressionStatement	YYLIMIT = YYCURSOR + len	174:1:6681:6712	86804	1	True				
ANR	86814	AssignmentExpression	YYLIMIT = YYCURSOR + len		86804	0		=			
ANR	86815	Identifier	YYLIMIT		86804	0					
ANR	86816	AdditiveExpression	YYCURSOR + len		86804	1		+			
ANR	86817	Identifier	YYCURSOR		86804	0					
ANR	86818	Identifier	len		86804	1					
ANR	86819	IfStatement	if ( ! SCNG ( yy_start ) )		86804	2					
ANR	86820	Condition	! SCNG ( yy_start )	175:5:6720:6734	86804	0	True				
ANR	86821	UnaryOperationExpression	! SCNG ( yy_start )		86804	0					
ANR	86822	UnaryOperator	!		86804	0					
ANR	86823	CallExpression	SCNG ( yy_start )		86804	1					
ANR	86824	Callee	SCNG		86804	0					
ANR	86825	Identifier	SCNG		86804	0					
ANR	86826	ArgumentList	yy_start		86804	1					
ANR	86827	Argument	yy_start		86804	0					
ANR	86828	Identifier	yy_start		86804	0					
ANR	86829	CompoundStatement		4:22:93:93	86804	1					
ANR	86830	ExpressionStatement	SCNG ( yy_start ) = YYCURSOR	176:2:6742:6767	86804	0	True				
ANR	86831	AssignmentExpression	SCNG ( yy_start ) = YYCURSOR		86804	0		=			
ANR	86832	CallExpression	SCNG ( yy_start )		86804	0					
ANR	86833	Callee	SCNG		86804	0					
ANR	86834	Identifier	SCNG		86804	0					
ANR	86835	ArgumentList	yy_start		86804	1					
ANR	86836	Argument	yy_start		86804	0					
ANR	86837	Identifier	yy_start		86804	0					
ANR	86838	Identifier	YYCURSOR		86804	1					
ANR	86839	ReturnType	static void		86804	1					
ANR	86840	Identifier	yy_scan_buffer		86804	2					
ANR	86841	ParameterList	"char * str , unsigned int len TSRMLS_DC"		86804	3					
ANR	86842	Parameter	char * str	171:27:6603:6611	86804	0	True				
ANR	86843	ParameterType	char *		86804	0					
ANR	86844	Identifier	str		86804	1					
ANR	86845	Parameter	unsigned int len TSRMLS_DC	171:38:6614:6639	86804	1	True				
ANR	86846	ParameterType	unsigned int len		86804	0					
ANR	86847	Identifier	TSRMLS_DC		86804	1					
ANR	86848	CFGEntryNode	ENTRY		86804		True				
ANR	86849	CFGExitNode	EXIT		86804		True				
ANR	86850	Symbol	str		86804						
ANR	86851	Symbol	YYLIMIT		86804						
ANR	86852	Symbol	len		86804						
ANR	86853	Symbol	yy_start		86804						
ANR	86854	Symbol	YYCURSOR		86804						
ANR	86855	Symbol	TSRMLS_DC		86804						
ANR	86856	Symbol	SCNG		86804						
ANR	86857	Function	heredoc_label_dtor	189:0:6985:7088							
ANR	86858	FunctionDef	heredoc_label_dtor (zend_heredoc_label * heredoc_label)		86857	0					
ANR	86859	CompoundStatement		189:66:7051:7088	86857	0					
ANR	86860	ExpressionStatement	efree ( heredoc_label -> label )	190:4:7058:7085	86857	0	True				
ANR	86861	CallExpression	efree ( heredoc_label -> label )		86857	0					
ANR	86862	Callee	efree		86857	0					
ANR	86863	Identifier	efree		86857	0					
ANR	86864	ArgumentList	heredoc_label -> label		86857	1					
ANR	86865	Argument	heredoc_label -> label		86857	0					
ANR	86866	PtrMemberAccess	heredoc_label -> label		86857	0					
ANR	86867	Identifier	heredoc_label		86857	0					
ANR	86868	Identifier	label		86857	1					
ANR	86869	ReturnType	static void		86857	1					
ANR	86870	Identifier	heredoc_label_dtor		86857	2					
ANR	86871	ParameterList	zend_heredoc_label * heredoc_label		86857	3					
ANR	86872	Parameter	zend_heredoc_label * heredoc_label	189:31:7016:7048	86857	0	True				
ANR	86873	ParameterType	zend_heredoc_label *		86857	0					
ANR	86874	Identifier	heredoc_label		86857	1					
ANR	86875	CFGEntryNode	ENTRY		86857		True				
ANR	86876	CFGExitNode	EXIT		86857		True				
ANR	86877	Symbol	heredoc_label -> label		86857						
ANR	86878	Symbol	heredoc_label		86857						
ANR	86879	Symbol	* heredoc_label		86857						
ANR	86880	Function	zend_multibyte_detect_utf_encoding	283:0:10332:11342							
ANR	86881	FunctionDef	"zend_multibyte_detect_utf_encoding (const unsigned char * script , size_t script_size TSRMLS_DC)"		86880	0					
ANR	86882	CompoundStatement		284:0:10455:11342	86880	0					
ANR	86883	IdentifierDeclStatement	const unsigned char * p ;	285:1:10459:10481	86880	0	True				
ANR	86884	IdentifierDecl	* p		86880	0					
ANR	86885	IdentifierDeclType	const unsigned char *		86880	0					
ANR	86886	Identifier	p		86880	1					
ANR	86887	IdentifierDeclStatement	int wchar_size = 2 ;	286:1:10485:10503	86880	1	True				
ANR	86888	IdentifierDecl	wchar_size = 2		86880	0					
ANR	86889	IdentifierDeclType	int		86880	0					
ANR	86890	Identifier	wchar_size		86880	1					
ANR	86891	AssignmentExpression	wchar_size = 2		86880	2		=			
ANR	86892	Identifier	wchar_size		86880	0					
ANR	86893	PrimaryExpression	2		86880	1					
ANR	86894	IdentifierDeclStatement	int le = 0 ;	287:1:10507:10517	86880	2	True				
ANR	86895	IdentifierDecl	le = 0		86880	0					
ANR	86896	IdentifierDeclType	int		86880	0					
ANR	86897	Identifier	le		86880	1					
ANR	86898	AssignmentExpression	le = 0		86880	2		=			
ANR	86899	Identifier	le		86880	0					
ANR	86900	PrimaryExpression	0		86880	1					
ANR	86901	ExpressionStatement	p = script	290:1:10549:10559	86880	3	True				
ANR	86902	AssignmentExpression	p = script		86880	0		=			
ANR	86903	Identifier	p		86880	0					
ANR	86904	Identifier	script		86880	1					
ANR	86905	WhileStatement	while ( ( p - script ) < script_size )		86880	4					
ANR	86906	Condition	( p - script ) < script_size	291:8:10570:10593	86880	0	True				
ANR	86907	RelationalExpression	( p - script ) < script_size		86880	0		<			
ANR	86908	AdditiveExpression	p - script		86880	0		-			
ANR	86909	Identifier	p		86880	0					
ANR	86910	Identifier	script		86880	1					
ANR	86911	Identifier	script_size		86880	1					
ANR	86912	CompoundStatement		8:34:140:140	86880	1					
ANR	86913	ExpressionStatement	"p = memchr ( p , 0 , script_size - ( p - script ) - 2 )"	292:2:10601:10643	86880	0	True				
ANR	86914	AssignmentExpression	"p = memchr ( p , 0 , script_size - ( p - script ) - 2 )"		86880	0		=			
ANR	86915	Identifier	p		86880	0					
ANR	86916	CallExpression	"memchr ( p , 0 , script_size - ( p - script ) - 2 )"		86880	1					
ANR	86917	Callee	memchr		86880	0					
ANR	86918	Identifier	memchr		86880	0					
ANR	86919	ArgumentList	p		86880	1					
ANR	86920	Argument	p		86880	0					
ANR	86921	Identifier	p		86880	0					
ANR	86922	Argument	0		86880	1					
ANR	86923	PrimaryExpression	0		86880	0					
ANR	86924	Argument	script_size - ( p - script ) - 2		86880	2					
ANR	86925	AdditiveExpression	script_size - ( p - script ) - 2		86880	0		-			
ANR	86926	Identifier	script_size		86880	0					
ANR	86927	AdditiveExpression	( p - script ) - 2		86880	1		-			
ANR	86928	AdditiveExpression	p - script		86880	0		-			
ANR	86929	Identifier	p		86880	0					
ANR	86930	Identifier	script		86880	1					
ANR	86931	PrimaryExpression	2		86880	1					
ANR	86932	IfStatement	if ( ! p )		86880	1					
ANR	86933	Condition	! p	293:6:10652:10653	86880	0	True				
ANR	86934	UnaryOperationExpression	! p		86880	0					
ANR	86935	UnaryOperator	!		86880	0					
ANR	86936	Identifier	p		86880	1					
ANR	86937	CompoundStatement		10:10:200:200	86880	1					
ANR	86938	BreakStatement	break ;	294:3:10662:10667	86880	0	True				
ANR	86939	IfStatement	if ( * ( p + 1 ) == '\\0' && * ( p + 2 ) == '\\0' )		86880	2					
ANR	86940	Condition	* ( p + 1 ) == '\\0' && * ( p + 2 ) == '\\0'	296:6:10681:10712	86880	0	True				
ANR	86941	AndExpression	* ( p + 1 ) == '\\0' && * ( p + 2 ) == '\\0'		86880	0		&&			
ANR	86942	EqualityExpression	* ( p + 1 ) == '\\0'		86880	0		==			
ANR	86943	UnaryOperationExpression	* ( p + 1 )		86880	0					
ANR	86944	UnaryOperator	*		86880	0					
ANR	86945	AdditiveExpression	p + 1		86880	1		+			
ANR	86946	Identifier	p		86880	0					
ANR	86947	PrimaryExpression	1		86880	1					
ANR	86948	PrimaryExpression	'\\0'		86880	1					
ANR	86949	EqualityExpression	* ( p + 2 ) == '\\0'		86880	1		==			
ANR	86950	UnaryOperationExpression	* ( p + 2 )		86880	0					
ANR	86951	UnaryOperator	*		86880	0					
ANR	86952	AdditiveExpression	p + 2		86880	1		+			
ANR	86953	Identifier	p		86880	0					
ANR	86954	PrimaryExpression	2		86880	1					
ANR	86955	PrimaryExpression	'\\0'		86880	1					
ANR	86956	CompoundStatement		13:40:259:259	86880	1					
ANR	86957	ExpressionStatement	wchar_size = 4	297:3:10721:10735	86880	0	True				
ANR	86958	AssignmentExpression	wchar_size = 4		86880	0		=			
ANR	86959	Identifier	wchar_size		86880	0					
ANR	86960	PrimaryExpression	4		86880	1					
ANR	86961	BreakStatement	break ;	298:3:10741:10746	86880	1	True				
ANR	86962	ExpressionStatement	p += 4	302:2:10826:10832	86880	3	True				
ANR	86963	AssignmentExpression	p += 4		86880	0		+=			
ANR	86964	Identifier	p		86880	0					
ANR	86965	PrimaryExpression	4		86880	1					
ANR	86966	ExpressionStatement	p = script	306:1:10860:10870	86880	5	True				
ANR	86967	AssignmentExpression	p = script		86880	0		=			
ANR	86968	Identifier	p		86880	0					
ANR	86969	Identifier	script		86880	1					
ANR	86970	WhileStatement	while ( ( p - script ) < script_size )		86880	6					
ANR	86971	Condition	( p - script ) < script_size	307:8:10881:10904	86880	0	True				
ANR	86972	RelationalExpression	( p - script ) < script_size		86880	0		<			
ANR	86973	AdditiveExpression	p - script		86880	0		-			
ANR	86974	Identifier	p		86880	0					
ANR	86975	Identifier	script		86880	1					
ANR	86976	Identifier	script_size		86880	1					
ANR	86977	CompoundStatement		24:34:451:451	86880	1					
ANR	86978	IfStatement	if ( * p == '\\0' && * ( p + wchar_size - 1 ) != '\\0' )		86880	0					
ANR	86979	Condition	* p == '\\0' && * ( p + wchar_size - 1 ) != '\\0'	308:6:10916:10954	86880	0	True				
ANR	86980	AndExpression	* p == '\\0' && * ( p + wchar_size - 1 ) != '\\0'		86880	0		&&			
ANR	86981	EqualityExpression	* p == '\\0'		86880	0		==			
ANR	86982	UnaryOperationExpression	* p		86880	0					
ANR	86983	UnaryOperator	*		86880	0					
ANR	86984	Identifier	p		86880	1					
ANR	86985	PrimaryExpression	'\\0'		86880	1					
ANR	86986	EqualityExpression	* ( p + wchar_size - 1 ) != '\\0'		86880	1		!=			
ANR	86987	UnaryOperationExpression	* ( p + wchar_size - 1 )		86880	0					
ANR	86988	UnaryOperator	*		86880	0					
ANR	86989	AdditiveExpression	p + wchar_size - 1		86880	1		+			
ANR	86990	Identifier	p		86880	0					
ANR	86991	AdditiveExpression	wchar_size - 1		86880	1		-			
ANR	86992	Identifier	wchar_size		86880	0					
ANR	86993	PrimaryExpression	1		86880	1					
ANR	86994	PrimaryExpression	'\\0'		86880	1					
ANR	86995	CompoundStatement		25:47:501:501	86880	1					
ANR	86996	ExpressionStatement	le = 0	310:3:10976:10982	86880	0	True				
ANR	86997	AssignmentExpression	le = 0		86880	0		=			
ANR	86998	Identifier	le		86880	0					
ANR	86999	PrimaryExpression	0		86880	1					
ANR	87000	BreakStatement	break ;	311:3:10988:10993	86880	1	True				
ANR	87001	ElseStatement	else		86880	0					
ANR	87002	IfStatement	if ( * p != '\\0' && * ( p + wchar_size - 1 ) == '\\0' )		86880	0					
ANR	87003	Condition	* p != '\\0' && * ( p + wchar_size - 1 ) == '\\0'	312:13:11009:11047	86880	0	True				
ANR	87004	AndExpression	* p != '\\0' && * ( p + wchar_size - 1 ) == '\\0'		86880	0		&&			
ANR	87005	EqualityExpression	* p != '\\0'		86880	0		!=			
ANR	87006	UnaryOperationExpression	* p		86880	0					
ANR	87007	UnaryOperator	*		86880	0					
ANR	87008	Identifier	p		86880	1					
ANR	87009	PrimaryExpression	'\\0'		86880	1					
ANR	87010	EqualityExpression	* ( p + wchar_size - 1 ) == '\\0'		86880	1		==			
ANR	87011	UnaryOperationExpression	* ( p + wchar_size - 1 )		86880	0					
ANR	87012	UnaryOperator	*		86880	0					
ANR	87013	AdditiveExpression	p + wchar_size - 1		86880	1		+			
ANR	87014	Identifier	p		86880	0					
ANR	87015	AdditiveExpression	wchar_size - 1		86880	1		-			
ANR	87016	Identifier	wchar_size		86880	0					
ANR	87017	PrimaryExpression	1		86880	1					
ANR	87018	PrimaryExpression	'\\0'		86880	1					
ANR	87019	CompoundStatement		29:54:594:594	86880	1					
ANR	87020	ExpressionStatement	le = 1	314:3:11070:11076	86880	0	True				
ANR	87021	AssignmentExpression	le = 1		86880	0		=			
ANR	87022	Identifier	le		86880	0					
ANR	87023	PrimaryExpression	1		86880	1					
ANR	87024	BreakStatement	break ;	315:3:11082:11087	86880	1	True				
ANR	87025	ExpressionStatement	p += wchar_size	317:2:11097:11112	86880	1	True				
ANR	87026	AssignmentExpression	p += wchar_size		86880	0		+=			
ANR	87027	Identifier	p		86880	0					
ANR	87028	Identifier	wchar_size		86880	1					
ANR	87029	IfStatement	if ( wchar_size == 2 )		86880	7					
ANR	87030	Condition	wchar_size == 2	320:5:11126:11140	86880	0	True				
ANR	87031	EqualityExpression	wchar_size == 2		86880	0		==			
ANR	87032	Identifier	wchar_size		86880	0					
ANR	87033	PrimaryExpression	2		86880	1					
ANR	87034	CompoundStatement		37:22:687:687	86880	1					
ANR	87035	ReturnStatement	return le ? zend_multibyte_encoding_utf16le : zend_multibyte_encoding_utf16be ;	321:2:11148:11225	86880	0	True				
ANR	87036	ConditionalExpression	le ? zend_multibyte_encoding_utf16le : zend_multibyte_encoding_utf16be		86880	0					
ANR	87037	Condition	le		86880	0					
ANR	87038	Identifier	le		86880	0					
ANR	87039	Identifier	zend_multibyte_encoding_utf16le		86880	1					
ANR	87040	Identifier	zend_multibyte_encoding_utf16be		86880	2					
ANR	87041	ElseStatement	else		86880	0					
ANR	87042	CompoundStatement		39:8:780:780	86880	0					
ANR	87043	ReturnStatement	return le ? zend_multibyte_encoding_utf32le : zend_multibyte_encoding_utf32be ;	323:2:11241:11318	86880	0	True				
ANR	87044	ConditionalExpression	le ? zend_multibyte_encoding_utf32le : zend_multibyte_encoding_utf32be		86880	0					
ANR	87045	Condition	le		86880	0					
ANR	87046	Identifier	le		86880	0					
ANR	87047	Identifier	zend_multibyte_encoding_utf32le		86880	1					
ANR	87048	Identifier	zend_multibyte_encoding_utf32be		86880	2					
ANR	87049	ReturnStatement	return NULL ;	326:1:11328:11339	86880	8	True				
ANR	87050	Identifier	NULL		86880	0					
ANR	87051	ReturnType	static const zend_encoding *		86880	1					
ANR	87052	Identifier	zend_multibyte_detect_utf_encoding		86880	2					
ANR	87053	ParameterList	"const unsigned char * script , size_t script_size TSRMLS_DC"		86880	3					
ANR	87054	Parameter	const unsigned char * script	283:63:10395:10421	86880	0	True				
ANR	87055	ParameterType	const unsigned char *		86880	0					
ANR	87056	Identifier	script		86880	1					
ANR	87057	Parameter	size_t script_size TSRMLS_DC	283:92:10424:10451	86880	1	True				
ANR	87058	ParameterType	size_t script_size		86880	0					
ANR	87059	Identifier	TSRMLS_DC		86880	1					
ANR	87060	CFGEntryNode	ENTRY		86880		True				
ANR	87061	CFGExitNode	EXIT		86880		True				
ANR	87062	Symbol	script_size		86880						
ANR	87063	Symbol	NULL		86880						
ANR	87064	Symbol	* ( p + 2 )		86880						
ANR	87065	Symbol	* ( p + wchar_size - 1 )		86880						
ANR	87066	Symbol	zend_multibyte_encoding_utf16le		86880						
ANR	87067	Symbol	zend_multibyte_encoding_utf32be		86880						
ANR	87068	Symbol	* ( p + 1 )		86880						
ANR	87069	Symbol	* wchar_size		86880						
ANR	87070	Symbol	TSRMLS_DC		86880						
ANR	87071	Symbol	script		86880						
ANR	87072	Symbol	p		86880						
ANR	87073	Symbol	zend_multibyte_encoding_utf16be		86880						
ANR	87074	Symbol	wchar_size		86880						
ANR	87075	Symbol	le		86880						
ANR	87076	Symbol	memchr		86880						
ANR	87077	Symbol	* p		86880						
ANR	87078	Symbol	zend_multibyte_encoding_utf32le		86880						
ANR	87079	DeclStmt									
ANR	87080	Decl							const zend_encoding	const zend_encoding *	script_encoding
ANR	87081	DeclStmt									
ANR	87082	Decl							int	int	bom_size
ANR	87083	DeclStmt									
ANR	87084	Decl							unsigned char	unsigned char *	pos1
ANR	87085	Decl							unsigned char	unsigned char *	pos2
ANR	87086	DeclStmt									
ANR	87087	Decl							const zend_encoding	const zend_encoding *	script_encoding
ANR	87088	DeclStmt									
ANR	87089	Decl							const zend_encoding	const zend_encoding *	internal_encoding
ANR	87090	DeclStmt									
ANR	87091	Decl							const zend_encoding	const zend_encoding *	script_encoding
ANR	87092	DeclStmt									
ANR	87093	Decl							const char	const char *	file_path
ANR	87094	DeclStmt									
ANR	87095	Decl							char	char *	buf
ANR	87096	DeclStmt									
ANR	87097	Decl							size_t	size_t	size
ANR	87098	Decl							size_t	size_t	offset
ANR	87099	DeclStmt									
ANR	87100	Decl							zend_file_handle	zend_file_handle *	fh
ANR	87101	DeclStmt									
ANR	87102	Decl							size_t	size_t	diff
ANR	87103	Function	compile_file	555:0:18797:20642							
ANR	87104	FunctionDef	"compile_file (zend_file_handle * file_handle , int type TSRMLS_DC)"		87103	0					
ANR	87105	CompoundStatement		556:0:18886:20642	87103	0					
ANR	87106	IdentifierDeclStatement	zend_lex_state original_lex_state ;	557:1:18890:18923	87103	0	True				
ANR	87107	IdentifierDecl	original_lex_state		87103	0					
ANR	87108	IdentifierDeclType	zend_lex_state		87103	0					
ANR	87109	Identifier	original_lex_state		87103	1					
ANR	87110	IdentifierDeclStatement	zend_op_array * op_array = ( zend_op_array * ) emalloc ( sizeof ( zend_op_array ) ) ;	558:1:18927:19001	87103	1	True				
ANR	87111	IdentifierDecl	* op_array = ( zend_op_array * ) emalloc ( sizeof ( zend_op_array ) )		87103	0					
ANR	87112	IdentifierDeclType	zend_op_array *		87103	0					
ANR	87113	Identifier	op_array		87103	1					
ANR	87114	AssignmentExpression	* op_array = ( zend_op_array * ) emalloc ( sizeof ( zend_op_array ) )		87103	2		=			
ANR	87115	Identifier	op_array		87103	0					
ANR	87116	CastExpression	( zend_op_array * ) emalloc ( sizeof ( zend_op_array ) )		87103	1					
ANR	87117	CastTarget	zend_op_array *		87103	0					
ANR	87118	CallExpression	emalloc ( sizeof ( zend_op_array ) )		87103	1					
ANR	87119	Callee	emalloc		87103	0					
ANR	87120	Identifier	emalloc		87103	0					
ANR	87121	ArgumentList	sizeof ( zend_op_array )		87103	1					
ANR	87122	Argument	sizeof ( zend_op_array )		87103	0					
ANR	87123	SizeofExpression	sizeof ( zend_op_array )		87103	0					
ANR	87124	Sizeof	sizeof		87103	0					
ANR	87125	SizeofOperand	zend_op_array		87103	1					
ANR	87126	IdentifierDeclStatement	zend_op_array * original_active_op_array = CG ( active_op_array ) ;	559:1:19005:19066	87103	2	True				
ANR	87127	IdentifierDecl	* original_active_op_array = CG ( active_op_array )		87103	0					
ANR	87128	IdentifierDeclType	zend_op_array *		87103	0					
ANR	87129	Identifier	original_active_op_array		87103	1					
ANR	87130	AssignmentExpression	* original_active_op_array = CG ( active_op_array )		87103	2		=			
ANR	87131	Identifier	original_active_op_array		87103	0					
ANR	87132	CallExpression	CG ( active_op_array )		87103	1					
ANR	87133	Callee	CG		87103	0					
ANR	87134	Identifier	CG		87103	0					
ANR	87135	ArgumentList	active_op_array		87103	1					
ANR	87136	Argument	active_op_array		87103	0					
ANR	87137	Identifier	active_op_array		87103	0					
ANR	87138	IdentifierDeclStatement	zend_op_array * retval = NULL ;	560:1:19070:19096	87103	3	True				
ANR	87139	IdentifierDecl	* retval = NULL		87103	0					
ANR	87140	IdentifierDeclType	zend_op_array *		87103	0					
ANR	87141	Identifier	retval		87103	1					
ANR	87142	AssignmentExpression	* retval = NULL		87103	2		=			
ANR	87143	Identifier	NULL		87103	0					
ANR	87144	Identifier	NULL		87103	1					
ANR	87145	IdentifierDeclStatement	int compiler_result ;	561:1:19100:19119	87103	4	True				
ANR	87146	IdentifierDecl	compiler_result		87103	0					
ANR	87147	IdentifierDeclType	int		87103	0					
ANR	87148	Identifier	compiler_result		87103	1					
ANR	87149	IdentifierDeclStatement	zend_bool compilation_successful = 0 ;	562:1:19123:19157	87103	5	True				
ANR	87150	IdentifierDecl	compilation_successful = 0		87103	0					
ANR	87151	IdentifierDeclType	zend_bool		87103	0					
ANR	87152	Identifier	compilation_successful		87103	1					
ANR	87153	AssignmentExpression	compilation_successful = 0		87103	2		=			
ANR	87154	Identifier	compilation_successful		87103	0					
ANR	87155	PrimaryExpression	0		87103	1					
ANR	87156	IdentifierDeclStatement	znode retval_znode ;	563:1:19161:19179	87103	6	True				
ANR	87157	IdentifierDecl	retval_znode		87103	0					
ANR	87158	IdentifierDeclType	znode		87103	0					
ANR	87159	Identifier	retval_znode		87103	1					
ANR	87160	IdentifierDeclStatement	zend_bool original_in_compilation = CG ( in_compilation ) ;	564:1:19183:19237	87103	7	True				
ANR	87161	IdentifierDecl	original_in_compilation = CG ( in_compilation )		87103	0					
ANR	87162	IdentifierDeclType	zend_bool		87103	0					
ANR	87163	Identifier	original_in_compilation		87103	1					
ANR	87164	AssignmentExpression	original_in_compilation = CG ( in_compilation )		87103	2		=			
ANR	87165	Identifier	original_in_compilation		87103	0					
ANR	87166	CallExpression	CG ( in_compilation )		87103	1					
ANR	87167	Callee	CG		87103	0					
ANR	87168	Identifier	CG		87103	0					
ANR	87169	ArgumentList	in_compilation		87103	1					
ANR	87170	Argument	in_compilation		87103	0					
ANR	87171	Identifier	in_compilation		87103	0					
ANR	87172	ExpressionStatement	retval_znode . op_type = IS_CONST	566:1:19243:19274	87103	8	True				
ANR	87173	AssignmentExpression	retval_znode . op_type = IS_CONST		87103	0		=			
ANR	87174	MemberAccess	retval_znode . op_type		87103	0					
ANR	87175	Identifier	retval_znode		87103	0					
ANR	87176	Identifier	op_type		87103	1					
ANR	87177	Identifier	IS_CONST		87103	1					
ANR	87178	ExpressionStatement	INIT_PZVAL ( & retval_znode . u . constant )	567:1:19278:19314	87103	9	True				
ANR	87179	CallExpression	INIT_PZVAL ( & retval_znode . u . constant )		87103	0					
ANR	87180	Callee	INIT_PZVAL		87103	0					
ANR	87181	Identifier	INIT_PZVAL		87103	0					
ANR	87182	ArgumentList	& retval_znode . u . constant		87103	1					
ANR	87183	Argument	& retval_znode . u . constant		87103	0					
ANR	87184	UnaryOperationExpression	& retval_znode . u . constant		87103	0					
ANR	87185	UnaryOperator	&		87103	0					
ANR	87186	MemberAccess	retval_znode . u . constant		87103	1					
ANR	87187	MemberAccess	retval_znode . u		87103	0					
ANR	87188	Identifier	retval_znode		87103	0					
ANR	87189	Identifier	u		87103	1					
ANR	87190	Identifier	constant		87103	1					
ANR	87191	ExpressionStatement	"ZVAL_LONG ( & retval_znode . u . constant , 1 )"	568:1:19318:19356	87103	10	True				
ANR	87192	CallExpression	"ZVAL_LONG ( & retval_znode . u . constant , 1 )"		87103	0					
ANR	87193	Callee	ZVAL_LONG		87103	0					
ANR	87194	Identifier	ZVAL_LONG		87103	0					
ANR	87195	ArgumentList	& retval_znode . u . constant		87103	1					
ANR	87196	Argument	& retval_znode . u . constant		87103	0					
ANR	87197	UnaryOperationExpression	& retval_znode . u . constant		87103	0					
ANR	87198	UnaryOperator	&		87103	0					
ANR	87199	MemberAccess	retval_znode . u . constant		87103	1					
ANR	87200	MemberAccess	retval_znode . u		87103	0					
ANR	87201	Identifier	retval_znode		87103	0					
ANR	87202	Identifier	u		87103	1					
ANR	87203	Identifier	constant		87103	1					
ANR	87204	Argument	1		87103	1					
ANR	87205	PrimaryExpression	1		87103	0					
ANR	87206	Statement	zend_save_lexical_state	570:1:19362:19384	87103	11	True				
ANR	87207	Statement	(	570:24:19385:19385	87103	12	True				
ANR	87208	Statement	&	570:25:19386:19386	87103	13	True				
ANR	87209	Statement	original_lex_state	570:26:19387:19404	87103	14	True				
ANR	87210	Statement	TSRMLS_CC	570:45:19406:19414	87103	15	True				
ANR	87211	Statement	)	570:54:19415:19415	87103	16	True				
ANR	87212	ExpressionStatement		570:55:19416:19416	87103	17	True				
ANR	87213	ExpressionStatement	retval = op_array	572:1:19422:19439	87103	18	True				
ANR	87214	AssignmentExpression	retval = op_array		87103	0		=			
ANR	87215	Identifier	retval		87103	0					
ANR	87216	Identifier	op_array		87103	1					
ANR	87217	Statement	if	574:1:19468:19469	87103	19	True				
ANR	87218	Statement	(	574:4:19471:19471	87103	20	True				
ANR	87219	Statement	open_file_for_scanning	574:5:19472:19493	87103	21	True				
ANR	87220	Statement	(	574:27:19494:19494	87103	22	True				
ANR	87221	Statement	file_handle	574:28:19495:19505	87103	23	True				
ANR	87222	Statement	TSRMLS_CC	574:40:19507:19515	87103	24	True				
ANR	87223	Statement	)	574:49:19516:19516	87103	25	True				
ANR	87224	Statement	==	574:50:19517:19518	87103	26	True				
ANR	87225	Statement	FAILURE	574:52:19519:19525	87103	27	True				
ANR	87226	Statement	)	574:59:19526:19526	87103	28	True				
ANR	87227	CompoundStatement		19:61:641:641	87103	29					
ANR	87228	IfStatement	if ( type == ZEND_REQUIRE )		87103	0					
ANR	87229	Condition	type == ZEND_REQUIRE	575:6:19537:19554	87103	0	True				
ANR	87230	EqualityExpression	type == ZEND_REQUIRE		87103	0		==			
ANR	87231	Identifier	type		87103	0					
ANR	87232	Identifier	ZEND_REQUIRE		87103	1					
ANR	87233	CompoundStatement		20:26:670:670	87103	1					
ANR	87234	Statement	zend_message_dispatcher	576:3:19563:19585	87103	0	True				
ANR	87235	Statement	(	576:26:19586:19586	87103	1	True				
ANR	87236	Statement	ZMSG_FAILED_REQUIRE_FOPEN	576:27:19587:19611	87103	2	True				
ANR	87237	Statement	","	576:52:19612:19612	87103	3	True				
ANR	87238	Statement	file_handle	576:54:19614:19624	87103	4	True				
ANR	87239	Statement	->	576:65:19625:19626	87103	5	True				
ANR	87240	Statement	filename	576:67:19627:19634	87103	6	True				
ANR	87241	Statement	TSRMLS_CC	576:76:19636:19644	87103	7	True				
ANR	87242	Statement	)	576:85:19645:19645	87103	8	True				
ANR	87243	ExpressionStatement		576:86:19646:19646	87103	9	True				
ANR	87244	ExpressionStatement	zend_bailout ( )	577:3:19652:19666	87103	10	True				
ANR	87245	CallExpression	zend_bailout ( )		87103	0					
ANR	87246	Callee	zend_bailout		87103	0					
ANR	87247	Identifier	zend_bailout		87103	0					
ANR	87248	ArgumentList			87103	1					
ANR	87249	ElseStatement	else		87103	0					
ANR	87250	CompoundStatement		23:9:791:791	87103	0					
ANR	87251	Statement	zend_message_dispatcher	579:3:19684:19706	87103	0	True				
ANR	87252	Statement	(	579:26:19707:19707	87103	1	True				
ANR	87253	Statement	ZMSG_FAILED_INCLUDE_FOPEN	579:27:19708:19732	87103	2	True				
ANR	87254	Statement	","	579:52:19733:19733	87103	3	True				
ANR	87255	Statement	file_handle	579:54:19735:19745	87103	4	True				
ANR	87256	Statement	->	579:65:19746:19747	87103	5	True				
ANR	87257	Statement	filename	579:67:19748:19755	87103	6	True				
ANR	87258	Statement	TSRMLS_CC	579:76:19757:19765	87103	7	True				
ANR	87259	Statement	)	579:85:19766:19766	87103	8	True				
ANR	87260	ExpressionStatement		579:86:19767:19767	87103	9	True				
ANR	87261	ExpressionStatement	compilation_successful = 0	581:2:19777:19801	87103	1	True				
ANR	87262	AssignmentExpression	compilation_successful = 0		87103	0		=			
ANR	87263	Identifier	compilation_successful		87103	0					
ANR	87264	PrimaryExpression	0		87103	1					
ANR	87265	ReturnType	ZEND_API zend_op_array *		87103	1					
ANR	87266	Identifier	compile_file		87103	2					
ANR	87267	ParameterList	"zend_file_handle * file_handle , int type TSRMLS_DC"		87103	3					
ANR	87268	Parameter	zend_file_handle * file_handle	555:37:18834:18862	87103	0	True				
ANR	87269	ParameterType	zend_file_handle *		87103	0					
ANR	87270	Identifier	file_handle		87103	1					
ANR	87271	Parameter	int type TSRMLS_DC	555:68:18865:18882	87103	1	True				
ANR	87272	ParameterType	int type		87103	0					
ANR	87273	Identifier	TSRMLS_DC		87103	1					
ANR	87274	CFGEntryNode	ENTRY		87103		True				
ANR	87275	CFGExitNode	EXIT		87103		True				
ANR	87276	Symbol	& retval_znode . u . constant		87103						
ANR	87277	Symbol	IS_CONST		87103						
ANR	87278	Symbol	NULL		87103						
ANR	87279	Symbol	original_in_compilation		87103						
ANR	87280	Symbol	original_active_op_array		87103						
ANR	87281	Symbol	CG		87103						
ANR	87282	Symbol	active_op_array		87103						
ANR	87283	Symbol	retval_znode . op_type		87103						
ANR	87284	Symbol	retval_znode . u		87103						
ANR	87285	Symbol	type		87103						
ANR	87286	Symbol	file_handle		87103						
ANR	87287	Symbol	TSRMLS_DC		87103						
ANR	87288	Symbol	retval		87103						
ANR	87289	Symbol	compiler_result		87103						
ANR	87290	Symbol	in_compilation		87103						
ANR	87291	Symbol	emalloc		87103						
ANR	87292	Symbol	& retval_znode . u		87103						
ANR	87293	Symbol	ZEND_REQUIRE		87103						
ANR	87294	Symbol	& retval_znode		87103						
ANR	87295	Symbol	original_lex_state		87103						
ANR	87296	Symbol	compilation_successful		87103						
ANR	87297	Symbol	op_array		87103						
ANR	87298	Symbol	retval_znode		87103						
ANR	87299	DeclStmt									
ANR	87300	Decl							zend_file_handle	zend_file_handle	file_handle
ANR	87301	DeclStmt									
ANR	87302	Decl							zval	zval	tmp
ANR	87303	DeclStmt									
ANR	87304	Decl							zend_op_array	zend_op_array *	retval
ANR	87305	DeclStmt									
ANR	87306	Decl							char	char *	opened_path
ANR	87307	DeclStmt									
ANR	87308	Decl							int	int	dummy
ANR	87309	DeclStmt									
ANR	87310	Decl							char	char *	buf
ANR	87311	DeclStmt									
ANR	87312	Decl							size_t	size_t	size
ANR	87313	DeclStmt									
ANR	87314	Decl							size_t	size_t	offset
ANR	87315	DeclStmt									
ANR	87316	Decl							size_t	size_t	original_offset
ANR	87317	Decl							size_t	size_t	length
ANR	87318	DeclStmt									
ANR	87319	Decl							unsigned char	unsigned char *	p
ANR	87320	DeclStmt									
ANR	87321	Decl							zend_lex_state	zend_lex_state	original_lex_state
ANR	87322	DeclStmt									
ANR	87323	Decl							zend_op_array	zend_op_array *	op_array
ANR	87324	DeclStmt									
ANR	87325	Decl							zend_op_array	zend_op_array *	original_active_op_array
ANR	87326	DeclStmt									
ANR	87327	Decl							zend_op_array	zend_op_array *	retval
ANR	87328	DeclStmt									
ANR	87329	Decl							zval	zval	tmp
ANR	87330	DeclStmt									
ANR	87331	Decl							int	int	compiler_result
ANR	87332	DeclStmt									
ANR	87333	Decl							zend_bool	zend_bool	original_in_compilation
ANR	87334	DeclStmt									
ANR	87335	Decl							zend_bool	zend_bool	orig_interactive
ANR	87336	DeclStmt									
ANR	87337	Decl							zend_lex_state	zend_lex_state	original_lex_state
ANR	87338	DeclStmt									
ANR	87339	Decl							zend_file_handle	zend_file_handle	file_handle
ANR	87340	DeclStmt									
ANR	87341	Decl							zend_lex_state	zend_lex_state	original_lex_state
ANR	87342	DeclStmt									
ANR	87343	Decl							zval	zval	tmp
ANR	87344	DeclStmt									
ANR	87345	Decl							size_t	size_t	length
ANR	87346	DeclStmt									
ANR	87347	Decl							unsigned char	unsigned char *	new_yy_start
ANR	87348	DeclStmt									
ANR	87349	Decl							size_t	size_t	sz
ANR	87350	Function	zend_scan_escape_string	872:0:28644:31129							
ANR	87351	FunctionDef	"zend_scan_escape_string (zval * zendlval , char * str , int len , char quote_type TSRMLS_DC)"		87350	0					
ANR	87352	CompoundStatement		873:0:28744:31129	87350	0					
ANR	87353	Statement	register	874:1:28748:28755	87350	0	True				
ANR	87354	IdentifierDeclStatement	"char * s , * t ;"	874:10:28757:28768	87350	1	True				
ANR	87355	IdentifierDecl	* s		87350	0					
ANR	87356	IdentifierDeclType	char *		87350	0					
ANR	87357	Identifier	s		87350	1					
ANR	87358	IdentifierDecl	* t		87350	1					
ANR	87359	IdentifierDeclType	char *		87350	0					
ANR	87360	Identifier	t		87350	1					
ANR	87361	IdentifierDeclStatement	char * end ;	875:1:28772:28781	87350	2	True				
ANR	87362	IdentifierDecl	* end		87350	0					
ANR	87363	IdentifierDeclType	char *		87350	0					
ANR	87364	Identifier	end		87350	1					
ANR	87365	ExpressionStatement	"ZVAL_STRINGL ( zendlval , str , len , 1 )"	877:1:28787:28822	87350	3	True				
ANR	87366	CallExpression	"ZVAL_STRINGL ( zendlval , str , len , 1 )"		87350	0					
ANR	87367	Callee	ZVAL_STRINGL		87350	0					
ANR	87368	Identifier	ZVAL_STRINGL		87350	0					
ANR	87369	ArgumentList	zendlval		87350	1					
ANR	87370	Argument	zendlval		87350	0					
ANR	87371	Identifier	zendlval		87350	0					
ANR	87372	Argument	str		87350	1					
ANR	87373	Identifier	str		87350	0					
ANR	87374	Argument	len		87350	2					
ANR	87375	Identifier	len		87350	0					
ANR	87376	Argument	1		87350	3					
ANR	87377	PrimaryExpression	1		87350	0					
ANR	87378	ExpressionStatement	s = t = Z_STRVAL_P ( zendlval )	880:1:28861:28889	87350	4	True				
ANR	87379	AssignmentExpression	s = t = Z_STRVAL_P ( zendlval )		87350	0		=			
ANR	87380	Identifier	s		87350	0					
ANR	87381	AssignmentExpression	t = Z_STRVAL_P ( zendlval )		87350	1		=			
ANR	87382	Identifier	t		87350	0					
ANR	87383	CallExpression	Z_STRVAL_P ( zendlval )		87350	1					
ANR	87384	Callee	Z_STRVAL_P		87350	0					
ANR	87385	Identifier	Z_STRVAL_P		87350	0					
ANR	87386	ArgumentList	zendlval		87350	1					
ANR	87387	Argument	zendlval		87350	0					
ANR	87388	Identifier	zendlval		87350	0					
ANR	87389	ExpressionStatement	end = s + Z_STRLEN_P ( zendlval )	881:1:28893:28921	87350	5	True				
ANR	87390	AssignmentExpression	end = s + Z_STRLEN_P ( zendlval )		87350	0		=			
ANR	87391	Identifier	end		87350	0					
ANR	87392	AdditiveExpression	s + Z_STRLEN_P ( zendlval )		87350	1		+			
ANR	87393	Identifier	s		87350	0					
ANR	87394	CallExpression	Z_STRLEN_P ( zendlval )		87350	1					
ANR	87395	Callee	Z_STRLEN_P		87350	0					
ANR	87396	Identifier	Z_STRLEN_P		87350	0					
ANR	87397	ArgumentList	zendlval		87350	1					
ANR	87398	Argument	zendlval		87350	0					
ANR	87399	Identifier	zendlval		87350	0					
ANR	87400	WhileStatement	while ( s < end )		87350	6					
ANR	87401	Condition	s < end	882:8:28932:28936	87350	0	True				
ANR	87402	RelationalExpression	s < end		87350	0		<			
ANR	87403	Identifier	s		87350	0					
ANR	87404	Identifier	end		87350	1					
ANR	87405	CompoundStatement		10:15:194:194	87350	1					
ANR	87406	IfStatement	if ( * s == '\\\\' )		87350	0					
ANR	87407	Condition	* s == '\\\\'	883:6:28948:28955	87350	0	True				
ANR	87408	EqualityExpression	* s == '\\\\'		87350	0		==			
ANR	87409	UnaryOperationExpression	* s		87350	0					
ANR	87410	UnaryOperator	*		87350	0					
ANR	87411	Identifier	s		87350	1					
ANR	87412	PrimaryExpression	'\\\\'		87350	1					
ANR	87413	CompoundStatement		11:16:213:213	87350	1					
ANR	87414	ExpressionStatement	s ++	884:3:28964:28967	87350	0	True				
ANR	87415	PostIncDecOperationExpression	s ++		87350	0					
ANR	87416	Identifier	s		87350	0					
ANR	87417	IncDec	++		87350	1					
ANR	87418	IfStatement	if ( s >= end )		87350	1					
ANR	87419	Condition	s >= end	885:7:28977:28984	87350	0	True				
ANR	87420	RelationalExpression	s >= end		87350	0		>=			
ANR	87421	Identifier	s		87350	0					
ANR	87422	Identifier	end		87350	1					
ANR	87423	CompoundStatement		13:17:242:242	87350	1					
ANR	87424	ExpressionStatement	* t ++ = '\\\\'	886:4:28994:29005	87350	0	True				
ANR	87425	AssignmentExpression	* t ++ = '\\\\'		87350	0		=			
ANR	87426	UnaryOperationExpression	* t ++		87350	0					
ANR	87427	UnaryOperator	*		87350	0					
ANR	87428	PostIncDecOperationExpression	t ++		87350	1					
ANR	87429	Identifier	t		87350	0					
ANR	87430	IncDec	++		87350	1					
ANR	87431	PrimaryExpression	'\\\\'		87350	1					
ANR	87432	BreakStatement	break ;	887:4:29012:29017	87350	1	True				
ANR	87433	SwitchStatement	switch ( * s )		87350	2					
ANR	87434	Condition	* s	890:10:29038:29039	87350	0	True				
ANR	87435	UnaryOperationExpression	* s		87350	0					
ANR	87436	UnaryOperator	*		87350	0					
ANR	87437	Identifier	s		87350	1					
ANR	87438	CompoundStatement		18:14:297:297	87350	1					
ANR	87439	Label	case 'n' :	891:4:29049:29057	87350	0	True				
ANR	87440	ExpressionStatement	* t ++ = '\\n'	892:5:29065:29076	87350	1	True				
ANR	87441	AssignmentExpression	* t ++ = '\\n'		87350	0		=			
ANR	87442	UnaryOperationExpression	* t ++		87350	0					
ANR	87443	UnaryOperator	*		87350	0					
ANR	87444	PostIncDecOperationExpression	t ++		87350	1					
ANR	87445	Identifier	t		87350	0					
ANR	87446	IncDec	++		87350	1					
ANR	87447	PrimaryExpression	'\\n'		87350	1					
ANR	87448	ExpressionStatement	Z_STRLEN_P ( zendlval ) --	893:5:29084:29106	87350	2	True				
ANR	87449	PostIncDecOperationExpression	Z_STRLEN_P ( zendlval ) --		87350	0					
ANR	87450	CallExpression	Z_STRLEN_P ( zendlval )		87350	0					
ANR	87451	Callee	Z_STRLEN_P		87350	0					
ANR	87452	Identifier	Z_STRLEN_P		87350	0					
ANR	87453	ArgumentList	zendlval		87350	1					
ANR	87454	Argument	zendlval		87350	0					
ANR	87455	Identifier	zendlval		87350	0					
ANR	87456	IncDec	--		87350	1					
ANR	87457	BreakStatement	break ;	894:5:29114:29119	87350	3	True				
ANR	87458	Label	case 'r' :	895:4:29126:29134	87350	4	True				
ANR	87459	ExpressionStatement	* t ++ = '\\r'	896:5:29142:29153	87350	5	True				
ANR	87460	AssignmentExpression	* t ++ = '\\r'		87350	0		=			
ANR	87461	UnaryOperationExpression	* t ++		87350	0					
ANR	87462	UnaryOperator	*		87350	0					
ANR	87463	PostIncDecOperationExpression	t ++		87350	1					
ANR	87464	Identifier	t		87350	0					
ANR	87465	IncDec	++		87350	1					
ANR	87466	PrimaryExpression	'\\r'		87350	1					
ANR	87467	ExpressionStatement	Z_STRLEN_P ( zendlval ) --	897:5:29161:29183	87350	6	True				
ANR	87468	PostIncDecOperationExpression	Z_STRLEN_P ( zendlval ) --		87350	0					
ANR	87469	CallExpression	Z_STRLEN_P ( zendlval )		87350	0					
ANR	87470	Callee	Z_STRLEN_P		87350	0					
ANR	87471	Identifier	Z_STRLEN_P		87350	0					
ANR	87472	ArgumentList	zendlval		87350	1					
ANR	87473	Argument	zendlval		87350	0					
ANR	87474	Identifier	zendlval		87350	0					
ANR	87475	IncDec	--		87350	1					
ANR	87476	BreakStatement	break ;	898:5:29191:29196	87350	7	True				
ANR	87477	Label	case 't' :	899:4:29203:29211	87350	8	True				
ANR	87478	ExpressionStatement	* t ++ = '\\t'	900:5:29219:29230	87350	9	True				
ANR	87479	AssignmentExpression	* t ++ = '\\t'		87350	0		=			
ANR	87480	UnaryOperationExpression	* t ++		87350	0					
ANR	87481	UnaryOperator	*		87350	0					
ANR	87482	PostIncDecOperationExpression	t ++		87350	1					
ANR	87483	Identifier	t		87350	0					
ANR	87484	IncDec	++		87350	1					
ANR	87485	PrimaryExpression	'\\t'		87350	1					
ANR	87486	ExpressionStatement	Z_STRLEN_P ( zendlval ) --	901:5:29238:29260	87350	10	True				
ANR	87487	PostIncDecOperationExpression	Z_STRLEN_P ( zendlval ) --		87350	0					
ANR	87488	CallExpression	Z_STRLEN_P ( zendlval )		87350	0					
ANR	87489	Callee	Z_STRLEN_P		87350	0					
ANR	87490	Identifier	Z_STRLEN_P		87350	0					
ANR	87491	ArgumentList	zendlval		87350	1					
ANR	87492	Argument	zendlval		87350	0					
ANR	87493	Identifier	zendlval		87350	0					
ANR	87494	IncDec	--		87350	1					
ANR	87495	BreakStatement	break ;	902:5:29268:29273	87350	11	True				
ANR	87496	Label	case 'f' :	903:4:29280:29288	87350	12	True				
ANR	87497	ExpressionStatement	* t ++ = '\\f'	904:5:29296:29307	87350	13	True				
ANR	87498	AssignmentExpression	* t ++ = '\\f'		87350	0		=			
ANR	87499	UnaryOperationExpression	* t ++		87350	0					
ANR	87500	UnaryOperator	*		87350	0					
ANR	87501	PostIncDecOperationExpression	t ++		87350	1					
ANR	87502	Identifier	t		87350	0					
ANR	87503	IncDec	++		87350	1					
ANR	87504	PrimaryExpression	'\\f'		87350	1					
ANR	87505	ExpressionStatement	Z_STRLEN_P ( zendlval ) --	905:5:29315:29337	87350	14	True				
ANR	87506	PostIncDecOperationExpression	Z_STRLEN_P ( zendlval ) --		87350	0					
ANR	87507	CallExpression	Z_STRLEN_P ( zendlval )		87350	0					
ANR	87508	Callee	Z_STRLEN_P		87350	0					
ANR	87509	Identifier	Z_STRLEN_P		87350	0					
ANR	87510	ArgumentList	zendlval		87350	1					
ANR	87511	Argument	zendlval		87350	0					
ANR	87512	Identifier	zendlval		87350	0					
ANR	87513	IncDec	--		87350	1					
ANR	87514	BreakStatement	break ;	906:5:29345:29350	87350	15	True				
ANR	87515	Label	case 'v' :	907:4:29357:29365	87350	16	True				
ANR	87516	ExpressionStatement	* t ++ = '\\v'	908:5:29373:29384	87350	17	True				
ANR	87517	AssignmentExpression	* t ++ = '\\v'		87350	0		=			
ANR	87518	UnaryOperationExpression	* t ++		87350	0					
ANR	87519	UnaryOperator	*		87350	0					
ANR	87520	PostIncDecOperationExpression	t ++		87350	1					
ANR	87521	Identifier	t		87350	0					
ANR	87522	IncDec	++		87350	1					
ANR	87523	PrimaryExpression	'\\v'		87350	1					
ANR	87524	ExpressionStatement	Z_STRLEN_P ( zendlval ) --	909:5:29392:29414	87350	18	True				
ANR	87525	PostIncDecOperationExpression	Z_STRLEN_P ( zendlval ) --		87350	0					
ANR	87526	CallExpression	Z_STRLEN_P ( zendlval )		87350	0					
ANR	87527	Callee	Z_STRLEN_P		87350	0					
ANR	87528	Identifier	Z_STRLEN_P		87350	0					
ANR	87529	ArgumentList	zendlval		87350	1					
ANR	87530	Argument	zendlval		87350	0					
ANR	87531	Identifier	zendlval		87350	0					
ANR	87532	IncDec	--		87350	1					
ANR	87533	BreakStatement	break ;	910:5:29422:29427	87350	19	True				
ANR	87534	Label	case 'e' :	911:4:29434:29442	87350	20	True				
ANR	87535	ExpressionStatement	* t ++ = VK_ESCAPE	913:5:29468:29484	87350	21	True				
ANR	87536	AssignmentExpression	* t ++ = VK_ESCAPE		87350	0		=			
ANR	87537	UnaryOperationExpression	* t ++		87350	0					
ANR	87538	UnaryOperator	*		87350	0					
ANR	87539	PostIncDecOperationExpression	t ++		87350	1					
ANR	87540	Identifier	t		87350	0					
ANR	87541	IncDec	++		87350	1					
ANR	87542	Identifier	VK_ESCAPE		87350	1					
ANR	87543	ExpressionStatement	Z_STRLEN_P ( zendlval ) --	917:5:29526:29548	87350	22	True				
ANR	87544	PostIncDecOperationExpression	Z_STRLEN_P ( zendlval ) --		87350	0					
ANR	87545	CallExpression	Z_STRLEN_P ( zendlval )		87350	0					
ANR	87546	Callee	Z_STRLEN_P		87350	0					
ANR	87547	Identifier	Z_STRLEN_P		87350	0					
ANR	87548	ArgumentList	zendlval		87350	1					
ANR	87549	Argument	zendlval		87350	0					
ANR	87550	Identifier	zendlval		87350	0					
ANR	87551	IncDec	--		87350	1					
ANR	87552	BreakStatement	break ;	918:5:29556:29561	87350	23	True				
ANR	87553	Label	"case '""' :"	919:4:29568:29576	87350	24	True				
ANR	87554	Label	case '`' :	920:4:29583:29591	87350	25	True				
ANR	87555	IfStatement	if ( * s != quote_type )		87350	26					
ANR	87556	Condition	* s != quote_type	921:9:29603:29618	87350	0	True				
ANR	87557	EqualityExpression	* s != quote_type		87350	0		!=			
ANR	87558	UnaryOperationExpression	* s		87350	0					
ANR	87559	UnaryOperator	*		87350	0					
ANR	87560	Identifier	s		87350	1					
ANR	87561	Identifier	quote_type		87350	1					
ANR	87562	CompoundStatement		49:27:876:876	87350	1					
ANR	87563	ExpressionStatement	* t ++ = '\\\\'	922:6:29630:29641	87350	0	True				
ANR	87564	AssignmentExpression	* t ++ = '\\\\'		87350	0		=			
ANR	87565	UnaryOperationExpression	* t ++		87350	0					
ANR	87566	UnaryOperator	*		87350	0					
ANR	87567	PostIncDecOperationExpression	t ++		87350	1					
ANR	87568	Identifier	t		87350	0					
ANR	87569	IncDec	++		87350	1					
ANR	87570	PrimaryExpression	'\\\\'		87350	1					
ANR	87571	ExpressionStatement	* t ++ = * s	923:6:29650:29659	87350	1	True				
ANR	87572	AssignmentExpression	* t ++ = * s		87350	0		=			
ANR	87573	UnaryOperationExpression	* t ++		87350	0					
ANR	87574	UnaryOperator	*		87350	0					
ANR	87575	PostIncDecOperationExpression	t ++		87350	1					
ANR	87576	Identifier	t		87350	0					
ANR	87577	IncDec	++		87350	1					
ANR	87578	UnaryOperationExpression	* s		87350	1					
ANR	87579	UnaryOperator	*		87350	0					
ANR	87580	Identifier	s		87350	1					
ANR	87581	BreakStatement	break ;	924:6:29668:29673	87350	2	True				
ANR	87582	Label	case '\\\\' :	926:4:29688:29697	87350	27	True				
ANR	87583	Label	case '$' :	927:4:29704:29712	87350	28	True				
ANR	87584	ExpressionStatement	* t ++ = * s	928:5:29720:29729	87350	29	True				
ANR	87585	AssignmentExpression	* t ++ = * s		87350	0		=			
ANR	87586	UnaryOperationExpression	* t ++		87350	0					
ANR	87587	UnaryOperator	*		87350	0					
ANR	87588	PostIncDecOperationExpression	t ++		87350	1					
ANR	87589	Identifier	t		87350	0					
ANR	87590	IncDec	++		87350	1					
ANR	87591	UnaryOperationExpression	* s		87350	1					
ANR	87592	UnaryOperator	*		87350	0					
ANR	87593	Identifier	s		87350	1					
ANR	87594	ExpressionStatement	Z_STRLEN_P ( zendlval ) --	929:5:29737:29759	87350	30	True				
ANR	87595	PostIncDecOperationExpression	Z_STRLEN_P ( zendlval ) --		87350	0					
ANR	87596	CallExpression	Z_STRLEN_P ( zendlval )		87350	0					
ANR	87597	Callee	Z_STRLEN_P		87350	0					
ANR	87598	Identifier	Z_STRLEN_P		87350	0					
ANR	87599	ArgumentList	zendlval		87350	1					
ANR	87600	Argument	zendlval		87350	0					
ANR	87601	Identifier	zendlval		87350	0					
ANR	87602	IncDec	--		87350	1					
ANR	87603	BreakStatement	break ;	930:5:29767:29772	87350	31	True				
ANR	87604	Label	case 'x' :	931:4:29779:29787	87350	32	True				
ANR	87605	Label	case 'X' :	932:4:29794:29802	87350	33	True				
ANR	87606	IfStatement	if ( ZEND_IS_HEX ( * ( s + 1 ) ) )		87350	34					
ANR	87607	Condition	ZEND_IS_HEX ( * ( s + 1 ) )	933:9:29814:29832	87350	0	True				
ANR	87608	CallExpression	ZEND_IS_HEX ( * ( s + 1 ) )		87350	0					
ANR	87609	Callee	ZEND_IS_HEX		87350	0					
ANR	87610	Identifier	ZEND_IS_HEX		87350	0					
ANR	87611	ArgumentList	* ( s + 1 )		87350	1					
ANR	87612	Argument	* ( s + 1 )		87350	0					
ANR	87613	UnaryOperationExpression	* ( s + 1 )		87350	0					
ANR	87614	UnaryOperator	*		87350	0					
ANR	87615	AdditiveExpression	s + 1		87350	1		+			
ANR	87616	Identifier	s		87350	0					
ANR	87617	PrimaryExpression	1		87350	1					
ANR	87618	CompoundStatement		62:6:1099:1128	87350	1					
ANR	87619	IdentifierDeclStatement	"char hex_buf [ 3 ] = { 0 , 0 , 0 } ;"	934:6:29844:29873	87350	0	True				
ANR	87620	IdentifierDecl	"hex_buf [ 3 ] = { 0 , 0 , 0 }"		87350	0					
ANR	87621	IdentifierDeclType	char [ 3 ]		87350	0					
ANR	87622	Identifier	hex_buf		87350	1					
ANR	87623	PrimaryExpression	3		87350	2					
ANR	87624	AssignmentExpression	"hex_buf [ 3 ] = { 0 , 0 , 0 }"		87350	3		=			
ANR	87625	Identifier	hex_buf		87350	0					
ANR	87626	InitializerList	0		87350	1					
ANR	87627	PrimaryExpression	0		87350	0					
ANR	87628	PrimaryExpression	0		87350	1					
ANR	87629	PrimaryExpression	0		87350	2					
ANR	87630	ExpressionStatement	Z_STRLEN_P ( zendlval ) --	936:6:29884:29906	87350	1	True				
ANR	87631	PostIncDecOperationExpression	Z_STRLEN_P ( zendlval ) --		87350	0					
ANR	87632	CallExpression	Z_STRLEN_P ( zendlval )		87350	0					
ANR	87633	Callee	Z_STRLEN_P		87350	0					
ANR	87634	Identifier	Z_STRLEN_P		87350	0					
ANR	87635	ArgumentList	zendlval		87350	1					
ANR	87636	Argument	zendlval		87350	0					
ANR	87637	Identifier	zendlval		87350	0					
ANR	87638	IncDec	--		87350	1					
ANR	87639	ExpressionStatement	hex_buf [ 0 ] = * ( ++ s )	938:6:29935:29954	87350	2	True				
ANR	87640	AssignmentExpression	hex_buf [ 0 ] = * ( ++ s )		87350	0		=			
ANR	87641	ArrayIndexing	hex_buf [ 0 ]		87350	0					
ANR	87642	Identifier	hex_buf		87350	0					
ANR	87643	PrimaryExpression	0		87350	1					
ANR	87644	UnaryOperationExpression	* ( ++ s )		87350	1					
ANR	87645	UnaryOperator	*		87350	0					
ANR	87646	UnaryExpression	++ s		87350	1					
ANR	87647	IncDec	++		87350	0					
ANR	87648	Identifier	s		87350	1					
ANR	87649	ExpressionStatement	Z_STRLEN_P ( zendlval ) --	939:6:29963:29985	87350	3	True				
ANR	87650	PostIncDecOperationExpression	Z_STRLEN_P ( zendlval ) --		87350	0					
ANR	87651	CallExpression	Z_STRLEN_P ( zendlval )		87350	0					
ANR	87652	Callee	Z_STRLEN_P		87350	0					
ANR	87653	Identifier	Z_STRLEN_P		87350	0					
ANR	87654	ArgumentList	zendlval		87350	1					
ANR	87655	Argument	zendlval		87350	0					
ANR	87656	Identifier	zendlval		87350	0					
ANR	87657	IncDec	--		87350	1					
ANR	87658	IfStatement	if ( ZEND_IS_HEX ( * ( s + 1 ) ) )		87350	4					
ANR	87659	Condition	ZEND_IS_HEX ( * ( s + 1 ) )	940:10:29998:30016	87350	0	True				
ANR	87660	CallExpression	ZEND_IS_HEX ( * ( s + 1 ) )		87350	0					
ANR	87661	Callee	ZEND_IS_HEX		87350	0					
ANR	87662	Identifier	ZEND_IS_HEX		87350	0					
ANR	87663	ArgumentList	* ( s + 1 )		87350	1					
ANR	87664	Argument	* ( s + 1 )		87350	0					
ANR	87665	UnaryOperationExpression	* ( s + 1 )		87350	0					
ANR	87666	UnaryOperator	*		87350	0					
ANR	87667	AdditiveExpression	s + 1		87350	1		+			
ANR	87668	Identifier	s		87350	0					
ANR	87669	PrimaryExpression	1		87350	1					
ANR	87670	CompoundStatement		68:31:1274:1274	87350	1					
ANR	87671	ExpressionStatement	hex_buf [ 1 ] = * ( ++ s )	941:7:30029:30048	87350	0	True				
ANR	87672	AssignmentExpression	hex_buf [ 1 ] = * ( ++ s )		87350	0		=			
ANR	87673	ArrayIndexing	hex_buf [ 1 ]		87350	0					
ANR	87674	Identifier	hex_buf		87350	0					
ANR	87675	PrimaryExpression	1		87350	1					
ANR	87676	UnaryOperationExpression	* ( ++ s )		87350	1					
ANR	87677	UnaryOperator	*		87350	0					
ANR	87678	UnaryExpression	++ s		87350	1					
ANR	87679	IncDec	++		87350	0					
ANR	87680	Identifier	s		87350	1					
ANR	87681	ExpressionStatement	Z_STRLEN_P ( zendlval ) --	942:7:30058:30080	87350	1	True				
ANR	87682	PostIncDecOperationExpression	Z_STRLEN_P ( zendlval ) --		87350	0					
ANR	87683	CallExpression	Z_STRLEN_P ( zendlval )		87350	0					
ANR	87684	Callee	Z_STRLEN_P		87350	0					
ANR	87685	Identifier	Z_STRLEN_P		87350	0					
ANR	87686	ArgumentList	zendlval		87350	1					
ANR	87687	Argument	zendlval		87350	0					
ANR	87688	Identifier	zendlval		87350	0					
ANR	87689	IncDec	--		87350	1					
ANR	87690	ExpressionStatement	"* t ++ = ( char ) strtol ( hex_buf , NULL , 16 )"	944:6:30098:30137	87350	5	True				
ANR	87691	AssignmentExpression	"* t ++ = ( char ) strtol ( hex_buf , NULL , 16 )"		87350	0		=			
ANR	87692	UnaryOperationExpression	* t ++		87350	0					
ANR	87693	UnaryOperator	*		87350	0					
ANR	87694	PostIncDecOperationExpression	t ++		87350	1					
ANR	87695	Identifier	t		87350	0					
ANR	87696	IncDec	++		87350	1					
ANR	87697	CastExpression	"( char ) strtol ( hex_buf , NULL , 16 )"		87350	1					
ANR	87698	CastTarget	char		87350	0					
ANR	87699	CallExpression	"strtol ( hex_buf , NULL , 16 )"		87350	1					
ANR	87700	Callee	strtol		87350	0					
ANR	87701	Identifier	strtol		87350	0					
ANR	87702	ArgumentList	hex_buf		87350	1					
ANR	87703	Argument	hex_buf		87350	0					
ANR	87704	Identifier	hex_buf		87350	0					
ANR	87705	Argument	NULL		87350	1					
ANR	87706	Identifier	NULL		87350	0					
ANR	87707	Argument	16		87350	2					
ANR	87708	PrimaryExpression	16		87350	0					
ANR	87709	ElseStatement	else		87350	0					
ANR	87710	CompoundStatement		73:12:1407:1407	87350	0					
ANR	87711	ExpressionStatement	* t ++ = '\\\\'	946:6:30161:30172	87350	0	True				
ANR	87712	AssignmentExpression	* t ++ = '\\\\'		87350	0		=			
ANR	87713	UnaryOperationExpression	* t ++		87350	0					
ANR	87714	UnaryOperator	*		87350	0					
ANR	87715	PostIncDecOperationExpression	t ++		87350	1					
ANR	87716	Identifier	t		87350	0					
ANR	87717	IncDec	++		87350	1					
ANR	87718	PrimaryExpression	'\\\\'		87350	1					
ANR	87719	ExpressionStatement	* t ++ = * s	947:6:30181:30190	87350	1	True				
ANR	87720	AssignmentExpression	* t ++ = * s		87350	0		=			
ANR	87721	UnaryOperationExpression	* t ++		87350	0					
ANR	87722	UnaryOperator	*		87350	0					
ANR	87723	PostIncDecOperationExpression	t ++		87350	1					
ANR	87724	Identifier	t		87350	0					
ANR	87725	IncDec	++		87350	1					
ANR	87726	UnaryOperationExpression	* s		87350	1					
ANR	87727	UnaryOperator	*		87350	0					
ANR	87728	Identifier	s		87350	1					
ANR	87729	BreakStatement	break ;	949:5:30206:30211	87350	35	True				
ANR	87730	Label	default :	950:4:30218:30225	87350	36	True				
ANR	87731	Identifier	default		87350	0					
ANR	87732	IfStatement	if ( ZEND_IS_OCT ( * s ) )		87350	37					
ANR	87733	Condition	ZEND_IS_OCT ( * s )	952:9:30268:30282	87350	0	True				
ANR	87734	CallExpression	ZEND_IS_OCT ( * s )		87350	0					
ANR	87735	Callee	ZEND_IS_OCT		87350	0					
ANR	87736	Identifier	ZEND_IS_OCT		87350	0					
ANR	87737	ArgumentList	* s		87350	1					
ANR	87738	Argument	* s		87350	0					
ANR	87739	UnaryOperationExpression	* s		87350	0					
ANR	87740	UnaryOperator	*		87350	0					
ANR	87741	Identifier	s		87350	1					
ANR	87742	CompoundStatement		81:6:1549:1583	87350	1					
ANR	87743	IdentifierDeclStatement	"char octal_buf [ 4 ] = { 0 , 0 , 0 , 0 } ;"	953:6:30294:30328	87350	0	True				
ANR	87744	IdentifierDecl	"octal_buf [ 4 ] = { 0 , 0 , 0 , 0 }"		87350	0					
ANR	87745	IdentifierDeclType	char [ 4 ]		87350	0					
ANR	87746	Identifier	octal_buf		87350	1					
ANR	87747	PrimaryExpression	4		87350	2					
ANR	87748	AssignmentExpression	"octal_buf [ 4 ] = { 0 , 0 , 0 , 0 }"		87350	3		=			
ANR	87749	Identifier	octal_buf		87350	0					
ANR	87750	InitializerList	0		87350	1					
ANR	87751	PrimaryExpression	0		87350	0					
ANR	87752	PrimaryExpression	0		87350	1					
ANR	87753	PrimaryExpression	0		87350	2					
ANR	87754	PrimaryExpression	0		87350	3					
ANR	87755	ExpressionStatement	octal_buf [ 0 ] = * s	955:6:30339:30356	87350	1	True				
ANR	87756	AssignmentExpression	octal_buf [ 0 ] = * s		87350	0		=			
ANR	87757	ArrayIndexing	octal_buf [ 0 ]		87350	0					
ANR	87758	Identifier	octal_buf		87350	0					
ANR	87759	PrimaryExpression	0		87350	1					
ANR	87760	UnaryOperationExpression	* s		87350	1					
ANR	87761	UnaryOperator	*		87350	0					
ANR	87762	Identifier	s		87350	1					
ANR	87763	ExpressionStatement	Z_STRLEN_P ( zendlval ) --	956:6:30365:30387	87350	2	True				
ANR	87764	PostIncDecOperationExpression	Z_STRLEN_P ( zendlval ) --		87350	0					
ANR	87765	CallExpression	Z_STRLEN_P ( zendlval )		87350	0					
ANR	87766	Callee	Z_STRLEN_P		87350	0					
ANR	87767	Identifier	Z_STRLEN_P		87350	0					
ANR	87768	ArgumentList	zendlval		87350	1					
ANR	87769	Argument	zendlval		87350	0					
ANR	87770	Identifier	zendlval		87350	0					
ANR	87771	IncDec	--		87350	1					
ANR	87772	IfStatement	if ( ZEND_IS_OCT ( * ( s + 1 ) ) )		87350	3					
ANR	87773	Condition	ZEND_IS_OCT ( * ( s + 1 ) )	957:10:30400:30418	87350	0	True				
ANR	87774	CallExpression	ZEND_IS_OCT ( * ( s + 1 ) )		87350	0					
ANR	87775	Callee	ZEND_IS_OCT		87350	0					
ANR	87776	Identifier	ZEND_IS_OCT		87350	0					
ANR	87777	ArgumentList	* ( s + 1 )		87350	1					
ANR	87778	Argument	* ( s + 1 )		87350	0					
ANR	87779	UnaryOperationExpression	* ( s + 1 )		87350	0					
ANR	87780	UnaryOperator	*		87350	0					
ANR	87781	AdditiveExpression	s + 1		87350	1		+			
ANR	87782	Identifier	s		87350	0					
ANR	87783	PrimaryExpression	1		87350	1					
ANR	87784	CompoundStatement		85:31:1676:1676	87350	1					
ANR	87785	ExpressionStatement	octal_buf [ 1 ] = * ( ++ s )	958:7:30431:30452	87350	0	True				
ANR	87786	AssignmentExpression	octal_buf [ 1 ] = * ( ++ s )		87350	0		=			
ANR	87787	ArrayIndexing	octal_buf [ 1 ]		87350	0					
ANR	87788	Identifier	octal_buf		87350	0					
ANR	87789	PrimaryExpression	1		87350	1					
ANR	87790	UnaryOperationExpression	* ( ++ s )		87350	1					
ANR	87791	UnaryOperator	*		87350	0					
ANR	87792	UnaryExpression	++ s		87350	1					
ANR	87793	IncDec	++		87350	0					
ANR	87794	Identifier	s		87350	1					
ANR	87795	ExpressionStatement	Z_STRLEN_P ( zendlval ) --	959:7:30462:30484	87350	1	True				
ANR	87796	PostIncDecOperationExpression	Z_STRLEN_P ( zendlval ) --		87350	0					
ANR	87797	CallExpression	Z_STRLEN_P ( zendlval )		87350	0					
ANR	87798	Callee	Z_STRLEN_P		87350	0					
ANR	87799	Identifier	Z_STRLEN_P		87350	0					
ANR	87800	ArgumentList	zendlval		87350	1					
ANR	87801	Argument	zendlval		87350	0					
ANR	87802	Identifier	zendlval		87350	0					
ANR	87803	IncDec	--		87350	1					
ANR	87804	IfStatement	if ( ZEND_IS_OCT ( * ( s + 1 ) ) )		87350	2					
ANR	87805	Condition	ZEND_IS_OCT ( * ( s + 1 ) )	960:11:30498:30516	87350	0	True				
ANR	87806	CallExpression	ZEND_IS_OCT ( * ( s + 1 ) )		87350	0					
ANR	87807	Callee	ZEND_IS_OCT		87350	0					
ANR	87808	Identifier	ZEND_IS_OCT		87350	0					
ANR	87809	ArgumentList	* ( s + 1 )		87350	1					
ANR	87810	Argument	* ( s + 1 )		87350	0					
ANR	87811	UnaryOperationExpression	* ( s + 1 )		87350	0					
ANR	87812	UnaryOperator	*		87350	0					
ANR	87813	AdditiveExpression	s + 1		87350	1		+			
ANR	87814	Identifier	s		87350	0					
ANR	87815	PrimaryExpression	1		87350	1					
ANR	87816	CompoundStatement		88:32:1774:1774	87350	1					
ANR	87817	ExpressionStatement	octal_buf [ 2 ] = * ( ++ s )	961:8:30530:30551	87350	0	True				
ANR	87818	AssignmentExpression	octal_buf [ 2 ] = * ( ++ s )		87350	0		=			
ANR	87819	ArrayIndexing	octal_buf [ 2 ]		87350	0					
ANR	87820	Identifier	octal_buf		87350	0					
ANR	87821	PrimaryExpression	2		87350	1					
ANR	87822	UnaryOperationExpression	* ( ++ s )		87350	1					
ANR	87823	UnaryOperator	*		87350	0					
ANR	87824	UnaryExpression	++ s		87350	1					
ANR	87825	IncDec	++		87350	0					
ANR	87826	Identifier	s		87350	1					
ANR	87827	ExpressionStatement	Z_STRLEN_P ( zendlval ) --	962:8:30562:30584	87350	1	True				
ANR	87828	PostIncDecOperationExpression	Z_STRLEN_P ( zendlval ) --		87350	0					
ANR	87829	CallExpression	Z_STRLEN_P ( zendlval )		87350	0					
ANR	87830	Callee	Z_STRLEN_P		87350	0					
ANR	87831	Identifier	Z_STRLEN_P		87350	0					
ANR	87832	ArgumentList	zendlval		87350	1					
ANR	87833	Argument	zendlval		87350	0					
ANR	87834	Identifier	zendlval		87350	0					
ANR	87835	IncDec	--		87350	1					
ANR	87836	ExpressionStatement	"* t ++ = ( char ) strtol ( octal_buf , NULL , 8 )"	965:6:30612:30652	87350	4	True				
ANR	87837	AssignmentExpression	"* t ++ = ( char ) strtol ( octal_buf , NULL , 8 )"		87350	0		=			
ANR	87838	UnaryOperationExpression	* t ++		87350	0					
ANR	87839	UnaryOperator	*		87350	0					
ANR	87840	PostIncDecOperationExpression	t ++		87350	1					
ANR	87841	Identifier	t		87350	0					
ANR	87842	IncDec	++		87350	1					
ANR	87843	CastExpression	"( char ) strtol ( octal_buf , NULL , 8 )"		87350	1					
ANR	87844	CastTarget	char		87350	0					
ANR	87845	CallExpression	"strtol ( octal_buf , NULL , 8 )"		87350	1					
ANR	87846	Callee	strtol		87350	0					
ANR	87847	Identifier	strtol		87350	0					
ANR	87848	ArgumentList	octal_buf		87350	1					
ANR	87849	Argument	octal_buf		87350	0					
ANR	87850	Identifier	octal_buf		87350	0					
ANR	87851	Argument	NULL		87350	1					
ANR	87852	Identifier	NULL		87350	0					
ANR	87853	Argument	8		87350	2					
ANR	87854	PrimaryExpression	8		87350	0					
ANR	87855	ElseStatement	else		87350	0					
ANR	87856	CompoundStatement		94:12:1922:1922	87350	0					
ANR	87857	ExpressionStatement	* t ++ = '\\\\'	967:6:30676:30687	87350	0	True				
ANR	87858	AssignmentExpression	* t ++ = '\\\\'		87350	0		=			
ANR	87859	UnaryOperationExpression	* t ++		87350	0					
ANR	87860	UnaryOperator	*		87350	0					
ANR	87861	PostIncDecOperationExpression	t ++		87350	1					
ANR	87862	Identifier	t		87350	0					
ANR	87863	IncDec	++		87350	1					
ANR	87864	PrimaryExpression	'\\\\'		87350	1					
ANR	87865	ExpressionStatement	* t ++ = * s	968:6:30696:30705	87350	1	True				
ANR	87866	AssignmentExpression	* t ++ = * s		87350	0		=			
ANR	87867	UnaryOperationExpression	* t ++		87350	0					
ANR	87868	UnaryOperator	*		87350	0					
ANR	87869	PostIncDecOperationExpression	t ++		87350	1					
ANR	87870	Identifier	t		87350	0					
ANR	87871	IncDec	++		87350	1					
ANR	87872	UnaryOperationExpression	* s		87350	1					
ANR	87873	UnaryOperator	*		87350	0					
ANR	87874	Identifier	s		87350	1					
ANR	87875	BreakStatement	break ;	970:5:30721:30726	87350	38	True				
ANR	87876	ElseStatement	else		87350	0					
ANR	87877	CompoundStatement		100:9:1999:1999	87350	0					
ANR	87878	ExpressionStatement	* t ++ = * s	973:3:30750:30759	87350	0	True				
ANR	87879	AssignmentExpression	* t ++ = * s		87350	0		=			
ANR	87880	UnaryOperationExpression	* t ++		87350	0					
ANR	87881	UnaryOperator	*		87350	0					
ANR	87882	PostIncDecOperationExpression	t ++		87350	1					
ANR	87883	Identifier	t		87350	0					
ANR	87884	IncDec	++		87350	1					
ANR	87885	UnaryOperationExpression	* s		87350	1					
ANR	87886	UnaryOperator	*		87350	0					
ANR	87887	Identifier	s		87350	1					
ANR	87888	IfStatement	if ( * s == '\\n' || ( * s == '\\r' && ( * ( s + 1 ) != '\\n' ) ) )		87350	1					
ANR	87889	Condition	* s == '\\n' || ( * s == '\\r' && ( * ( s + 1 ) != '\\n' ) )	976:6:30775:30820	87350	0	True				
ANR	87890	OrExpression	* s == '\\n' || ( * s == '\\r' && ( * ( s + 1 ) != '\\n' ) )		87350	0		||			
ANR	87891	EqualityExpression	* s == '\\n'		87350	0		==			
ANR	87892	UnaryOperationExpression	* s		87350	0					
ANR	87893	UnaryOperator	*		87350	0					
ANR	87894	Identifier	s		87350	1					
ANR	87895	PrimaryExpression	'\\n'		87350	1					
ANR	87896	AndExpression	* s == '\\r' && ( * ( s + 1 ) != '\\n' )		87350	1		&&			
ANR	87897	EqualityExpression	* s == '\\r'		87350	0		==			
ANR	87898	UnaryOperationExpression	* s		87350	0					
ANR	87899	UnaryOperator	*		87350	0					
ANR	87900	Identifier	s		87350	1					
ANR	87901	PrimaryExpression	'\\r'		87350	1					
ANR	87902	EqualityExpression	* ( s + 1 ) != '\\n'		87350	1		!=			
ANR	87903	UnaryOperationExpression	* ( s + 1 )		87350	0					
ANR	87904	UnaryOperator	*		87350	0					
ANR	87905	AdditiveExpression	s + 1		87350	1		+			
ANR	87906	Identifier	s		87350	0					
ANR	87907	PrimaryExpression	1		87350	1					
ANR	87908	PrimaryExpression	'\\n'		87350	1					
ANR	87909	CompoundStatement		104:54:2078:2078	87350	1					
ANR	87910	ExpressionStatement	CG ( zend_lineno ) ++	977:3:30829:30846	87350	0	True				
ANR	87911	PostIncDecOperationExpression	CG ( zend_lineno ) ++		87350	0					
ANR	87912	CallExpression	CG ( zend_lineno )		87350	0					
ANR	87913	Callee	CG		87350	0					
ANR	87914	Identifier	CG		87350	0					
ANR	87915	ArgumentList	zend_lineno		87350	1					
ANR	87916	Argument	zend_lineno		87350	0					
ANR	87917	Identifier	zend_lineno		87350	0					
ANR	87918	IncDec	++		87350	1					
ANR	87919	ExpressionStatement	s ++	979:2:30856:30859	87350	2	True				
ANR	87920	PostIncDecOperationExpression	s ++		87350	0					
ANR	87921	Identifier	s		87350	0					
ANR	87922	IncDec	++		87350	1					
ANR	87923	ExpressionStatement	* t = 0	981:1:30867:30873	87350	7	True				
ANR	87924	AssignmentExpression	* t = 0		87350	0		=			
ANR	87925	UnaryOperationExpression	* t		87350	0					
ANR	87926	UnaryOperator	*		87350	0					
ANR	87927	Identifier	t		87350	1					
ANR	87928	PrimaryExpression	0		87350	1					
ANR	87929	IfStatement	if ( SCNG ( output_filter ) )		87350	8					
ANR	87930	Condition	SCNG ( output_filter )	982:5:30881:30899	87350	0	True				
ANR	87931	CallExpression	SCNG ( output_filter )		87350	0					
ANR	87932	Callee	SCNG		87350	0					
ANR	87933	Identifier	SCNG		87350	0					
ANR	87934	ArgumentList	output_filter		87350	1					
ANR	87935	Argument	output_filter		87350	0					
ANR	87936	Identifier	output_filter		87350	0					
ANR	87937	CompoundStatement		111:2:2162:2175	87350	1					
ANR	87938	IdentifierDeclStatement	size_t sz = 0 ;	983:2:30907:30920	87350	0	True				
ANR	87939	IdentifierDecl	sz = 0		87350	0					
ANR	87940	IdentifierDeclType	size_t		87350	0					
ANR	87941	Identifier	sz		87350	1					
ANR	87942	AssignmentExpression	sz = 0		87350	2		=			
ANR	87943	Identifier	sz		87350	0					
ANR	87944	PrimaryExpression	0		87350	1					
ANR	87945	ExpressionStatement	s = Z_STRVAL_P ( zendlval )	984:2:30925:30949	87350	1	True				
ANR	87946	AssignmentExpression	s = Z_STRVAL_P ( zendlval )		87350	0		=			
ANR	87947	Identifier	s		87350	0					
ANR	87948	CallExpression	Z_STRVAL_P ( zendlval )		87350	1					
ANR	87949	Callee	Z_STRVAL_P		87350	0					
ANR	87950	Identifier	Z_STRVAL_P		87350	0					
ANR	87951	ArgumentList	zendlval		87350	1					
ANR	87952	Argument	zendlval		87350	0					
ANR	87953	Identifier	zendlval		87350	0					
ANR	87954	Statement	SCNG	985:2:30954:30957	87350	2	True				
ANR	87955	Statement	(	985:6:30958:30958	87350	3	True				
ANR	87956	Statement	output_filter	985:7:30959:30971	87350	4	True				
ANR	87957	Statement	)	985:20:30972:30972	87350	5	True				
ANR	87958	Statement	(	985:21:30973:30973	87350	6	True				
ANR	87959	Statement	(	985:22:30974:30974	87350	7	True				
ANR	87960	Statement	unsigned	985:23:30975:30982	87350	8	True				
ANR	87961	Statement	char	985:32:30984:30987	87350	9	True				
ANR	87962	Statement	*	985:37:30989:30989	87350	10	True				
ANR	87963	Statement	*	985:38:30990:30990	87350	11	True				
ANR	87964	Statement	)	985:39:30991:30991	87350	12	True				
ANR	87965	Statement	&	985:40:30992:30992	87350	13	True				
ANR	87966	Statement	Z_STRVAL_P	985:41:30993:31002	87350	14	True				
ANR	87967	Statement	(	985:51:31003:31003	87350	15	True				
ANR	87968	Statement	zendlval	985:52:31004:31011	87350	16	True				
ANR	87969	Statement	)	985:60:31012:31012	87350	17	True				
ANR	87970	Statement	","	985:61:31013:31013	87350	18	True				
ANR	87971	Statement	&	985:63:31015:31015	87350	19	True				
ANR	87972	Statement	sz	985:64:31016:31017	87350	20	True				
ANR	87973	Statement	","	985:66:31018:31018	87350	21	True				
ANR	87974	Statement	(	985:68:31020:31020	87350	22	True				
ANR	87975	Statement	unsigned	985:69:31021:31028	87350	23	True				
ANR	87976	Statement	char	985:78:31030:31033	87350	24	True				
ANR	87977	Statement	*	985:83:31035:31035	87350	25	True				
ANR	87978	Statement	)	985:84:31036:31036	87350	26	True				
ANR	87979	Statement	s	985:85:31037:31037	87350	27	True				
ANR	87980	Statement	","	985:86:31038:31038	87350	28	True				
ANR	87981	Statement	(	985:88:31040:31040	87350	29	True				
ANR	87982	Statement	size_t	985:89:31041:31046	87350	30	True				
ANR	87983	Statement	)	985:95:31047:31047	87350	31	True				
ANR	87984	Statement	Z_STRLEN_P	985:96:31048:31057	87350	32	True				
ANR	87985	Statement	(	985:106:31058:31058	87350	33	True				
ANR	87986	Statement	zendlval	985:107:31059:31066	87350	34	True				
ANR	87987	Statement	)	985:115:31067:31067	87350	35	True				
ANR	87988	Statement	TSRMLS_CC	985:117:31069:31077	87350	36	True				
ANR	87989	Statement	)	985:126:31078:31078	87350	37	True				
ANR	87990	ExpressionStatement		985:127:31079:31079	87350	38	True				
ANR	87991	ExpressionStatement	Z_STRLEN_P ( zendlval ) = sz	986:2:31084:31109	87350	39	True				
ANR	87992	AssignmentExpression	Z_STRLEN_P ( zendlval ) = sz		87350	0		=			
ANR	87993	CallExpression	Z_STRLEN_P ( zendlval )		87350	0					
ANR	87994	Callee	Z_STRLEN_P		87350	0					
ANR	87995	Identifier	Z_STRLEN_P		87350	0					
ANR	87996	ArgumentList	zendlval		87350	1					
ANR	87997	Argument	zendlval		87350	0					
ANR	87998	Identifier	zendlval		87350	0					
ANR	87999	Identifier	sz		87350	1					
ANR	88000	ExpressionStatement	efree ( s )	987:2:31114:31122	87350	40	True				
ANR	88001	CallExpression	efree ( s )		87350	0					
ANR	88002	Callee	efree		87350	0					
ANR	88003	Identifier	efree		87350	0					
ANR	88004	ArgumentList	s		87350	1					
ANR	88005	Argument	s		87350	0					
ANR	88006	Identifier	s		87350	0					
ANR	88007	ReturnType	static void		87350	1					
ANR	88008	Identifier	zend_scan_escape_string		87350	2					
ANR	88009	ParameterList	"zval * zendlval , char * str , int len , char quote_type TSRMLS_DC"		87350	3					
ANR	88010	Parameter	zval * zendlval	872:36:28680:28693	87350	0	True				
ANR	88011	ParameterType	zval *		87350	0					
ANR	88012	Identifier	zendlval		87350	1					
ANR	88013	Parameter	char * str	872:52:28696:28704	87350	1	True				
ANR	88014	ParameterType	char *		87350	0					
ANR	88015	Identifier	str		87350	1					
ANR	88016	Parameter	int len	872:63:28707:28713	87350	2	True				
ANR	88017	ParameterType	int		87350	0					
ANR	88018	Identifier	len		87350	1					
ANR	88019	Parameter	char quote_type TSRMLS_DC	872:72:28716:28740	87350	3	True				
ANR	88020	ParameterType	char quote_type		87350	0					
ANR	88021	Identifier	TSRMLS_DC		87350	1					
ANR	88022	CFGEntryNode	ENTRY		87350		True				
ANR	88023	CFGExitNode	EXIT		87350		True				
ANR	88024	Symbol	octal_buf		87350						
ANR	88025	Symbol	TSRMLS_DC		87350						
ANR	88026	Symbol	* hex_buf		87350						
ANR	88027	Symbol	ZEND_IS_OCT		87350						
ANR	88028	Symbol	len		87350						
ANR	88029	Symbol	* ( s + 1 )		87350						
ANR	88030	Symbol	strtol		87350						
ANR	88031	Symbol	zend_lineno		87350						
ANR	88032	Symbol	end		87350						
ANR	88033	Symbol	Z_STRLEN_P		87350						
ANR	88034	Symbol	zendlval		87350						
ANR	88035	Symbol	VK_ESCAPE		87350						
ANR	88036	Symbol	ZEND_IS_HEX		87350						
ANR	88037	Symbol	* t ++		87350						
ANR	88038	Symbol	* octal_buf		87350						
ANR	88039	Symbol	NULL		87350						
ANR	88040	Symbol	CG		87350						
ANR	88041	Symbol	hex_buf		87350						
ANR	88042	Symbol	sz		87350						
ANR	88043	Symbol	quote_type		87350						
ANR	88044	Symbol	Z_STRVAL_P		87350						
ANR	88045	Symbol	SCNG		87350						
ANR	88046	Symbol	str		87350						
ANR	88047	Symbol	s		87350						
ANR	88048	Symbol	t		87350						
ANR	88049	Symbol	* ( ++ s )		87350						
ANR	88050	Symbol	output_filter		87350						
ANR	88051	Symbol	* s		87350						
ANR	88052	Symbol	* t		87350						
ANR	88053	DeclStmt									
ANR	88054	Decl							YYCTYPE	YYCTYPE	yych
ANR	88055	DeclStmt									
ANR	88056	Decl							unsigned int	unsigned int	yyaccept
ANR	88057	DeclStmt									
ANR	88058	Decl							const unsigned char	const unsigned char [ ]	yybm
ANR	88059	DeclStmt									
ANR	88060	Decl							YYCTYPE	YYCTYPE *	ptr
ANR	88061	DeclStmt									
ANR	88062	Decl							int	int	readsize
ANR	88063	DeclStmt									
ANR	88064	Decl							size_t	size_t	sz
ANR	88065	DeclStmt									
ANR	88066	Decl							YYCTYPE	YYCTYPE *	bracket
ANR	88067	DeclStmt									
ANR	88068	Decl							const unsigned char	const unsigned char [ ]	yybm
ANR	88069	DeclStmt									
ANR	88070	Decl							const unsigned char	const unsigned char [ ]	yybm
ANR	88071	DeclStmt									
ANR	88072	Decl							zend_heredoc_label	zend_heredoc_label *	heredoc_label
ANR	88073	DeclStmt									
ANR	88074	Decl							const unsigned char	const unsigned char [ ]	yybm
ANR	88075	DeclStmt									
ANR	88076	Decl							int	int	newline
ANR	88077	DeclStmt									
ANR	88078	Decl							zend_heredoc_label	zend_heredoc_label *	heredoc_label
ANR	88079	DeclStmt									
ANR	88080	Decl							YYCTYPE	YYCTYPE *	end
ANR	88081	DeclStmt									
ANR	88082	Decl							const unsigned char	const unsigned char [ ]	yybm
ANR	88083	DeclStmt									
ANR	88084	Decl							char	char *	s
ANR	88085	Decl							char	char *	t
ANR	88086	DeclStmt									
ANR	88087	Decl							char	char *	end
ANR	88088	DeclStmt									
ANR	88089	Decl							int	int	bprefix
ANR	88090	DeclStmt									
ANR	88091	Decl							size_t	size_t	sz
ANR	88092	DeclStmt									
ANR	88093	Decl							int	int	bprefix
ANR	88094	DeclStmt									
ANR	88095	Decl							char	char *	bin
ANR	88096	DeclStmt									
ANR	88097	Decl							int	int	len
ANR	88098	DeclStmt									
ANR	88099	Decl							char	char *	hex
ANR	88100	DeclStmt									
ANR	88101	Decl							int	int	len
ANR	88102	DeclStmt									
ANR	88103	Decl							int	int	doc_com
ANR	88104	DeclStmt									
ANR	88105	Decl							char	char *	s
ANR	88106	DeclStmt									
ANR	88107	Decl							int	int	bprefix
ANR	88108	DeclStmt									
ANR	88109	Decl							zend_heredoc_label	zend_heredoc_label *	heredoc_label
ANR	88110	DeclStmt									
ANR	88111	Decl							YYCTYPE	YYCTYPE *	end
ANR	88112	DeclStmt									
ANR	88113	Decl							char	char *	filename
ANR	88114	DeclStmt									
ANR	88115	Decl							const size_t	const size_t	filename_len
ANR	88116	DeclStmt									
ANR	88117	Decl							char	char *	dirname
ANR	88118	DeclStmt									
ANR	88119	Decl							const char	const char *	class_name
ANR	88120	DeclStmt									
ANR	88121	Decl							const char	const char *	func_name
ANR	88122	DeclStmt									
ANR	88123	Decl							zend_op_array	zend_op_array *	op_array
ANR	88124	DeclStmt									
ANR	88125	Decl							char	char *	filename
ANR	88126	DeclStmt									
ANR	88127	Decl							zend_class_entry	zend_class_entry *	ce
ANR	88128	DeclStmt									
ANR	88129	Decl							zend_class_entry	zend_class_entry *	ce
ANR	88130	DeclStmt									
ANR	88131	Decl							const unsigned char	const unsigned char [ ]	yybm
ANR	88132	DeclStmt									
ANR	88133	Decl							const unsigned char	const unsigned char [ ]	yybm
ANR	88134	DeclStmt									
ANR	88135	Decl							int	int	newline
ANR	88136	DeclStmt									
ANR	88137	Decl							zend_heredoc_label	zend_heredoc_label *	heredoc_label
ANR	88138	DeclStmt									
ANR	88139	Decl							YYCTYPE	YYCTYPE *	end
ANR	88140	DeclStmt									
ANR	88141	Decl							const unsigned char	const unsigned char [ ]	yybm
