command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	11368	File	data/converged/CVE-2017-11142_php-src/Zend_zend_API.c								
ANR	11369	DeclStmt									
ANR	11370	Decl							ZEND_API HashTable	ZEND_API HashTable	module_registry
ANR	11371	DeclStmt									
ANR	11372	Decl							zend_module_entry	zend_module_entry * *	module_request_startup_handlers
ANR	11373	DeclStmt									
ANR	11374	Decl							zend_module_entry	zend_module_entry * *	module_request_shutdown_handlers
ANR	11375	DeclStmt									
ANR	11376	Decl							zend_module_entry	zend_module_entry * *	module_post_deactivate_handlers
ANR	11377	DeclStmt									
ANR	11378	Decl							zend_class_entry	zend_class_entry * *	class_cleanup_handlers
ANR	11379	Function	zend_get_parameters	45:0:1954:2721							
ANR	11380	FunctionDef	"zend_get_parameters (int ht , int param_count)"		11379	0					
ANR	11381	CompoundStatement		46:0:2027:2721	11379	0					
ANR	11382	IdentifierDeclStatement	void * * p ;	47:1:2030:2038	11379	0	True				
ANR	11383	IdentifierDecl	* * p		11379	0					
ANR	11384	IdentifierDeclType	void * *		11379	0					
ANR	11385	Identifier	p		11379	1					
ANR	11386	IdentifierDeclStatement	int arg_count ;	48:1:2041:2054	11379	1	True				
ANR	11387	IdentifierDecl	arg_count		11379	0					
ANR	11388	IdentifierDeclType	int		11379	0					
ANR	11389	Identifier	arg_count		11379	1					
ANR	11390	IdentifierDeclStatement	va_list ptr ;	49:1:2057:2068	11379	2	True				
ANR	11391	IdentifierDecl	ptr		11379	0					
ANR	11392	IdentifierDeclType	va_list		11379	0					
ANR	11393	Identifier	ptr		11379	1					
ANR	11394	IdentifierDeclStatement	"zval * * param , * param_ptr ;"	50:1:2071:2095	11379	3	True				
ANR	11395	IdentifierDecl	* * param		11379	0					
ANR	11396	IdentifierDeclType	zval * *		11379	0					
ANR	11397	Identifier	param		11379	1					
ANR	11398	IdentifierDecl	* param_ptr		11379	1					
ANR	11399	IdentifierDeclType	zval *		11379	0					
ANR	11400	Identifier	param_ptr		11379	1					
ANR	11401	ExpressionStatement	TSRMLS_FETCH ( )	51:1:2098:2112	11379	4	True				
ANR	11402	CallExpression	TSRMLS_FETCH ( )		11379	0					
ANR	11403	Callee	TSRMLS_FETCH		11379	0					
ANR	11404	Identifier	TSRMLS_FETCH		11379	0					
ANR	11405	ArgumentList			11379	1					
ANR	11406	ExpressionStatement	p = zend_vm_stack_top ( TSRMLS_C ) - 1	53:1:2116:2151	11379	5	True				
ANR	11407	AssignmentExpression	p = zend_vm_stack_top ( TSRMLS_C ) - 1		11379	0		=			
ANR	11408	Identifier	p		11379	0					
ANR	11409	AdditiveExpression	zend_vm_stack_top ( TSRMLS_C ) - 1		11379	1		-			
ANR	11410	CallExpression	zend_vm_stack_top ( TSRMLS_C )		11379	0					
ANR	11411	Callee	zend_vm_stack_top		11379	0					
ANR	11412	Identifier	zend_vm_stack_top		11379	0					
ANR	11413	ArgumentList	TSRMLS_C		11379	1					
ANR	11414	Argument	TSRMLS_C		11379	0					
ANR	11415	Identifier	TSRMLS_C		11379	0					
ANR	11416	PrimaryExpression	1		11379	1					
ANR	11417	ExpressionStatement	arg_count = ( int ) ( zend_uintptr_t ) * p	54:1:2154:2190	11379	6	True				
ANR	11418	AssignmentExpression	arg_count = ( int ) ( zend_uintptr_t ) * p		11379	0		=			
ANR	11419	Identifier	arg_count		11379	0					
ANR	11420	CastExpression	( int ) ( zend_uintptr_t ) * p		11379	1					
ANR	11421	CastTarget	int		11379	0					
ANR	11422	CastExpression	( zend_uintptr_t ) * p		11379	1					
ANR	11423	CastTarget	zend_uintptr_t		11379	0					
ANR	11424	UnaryOperationExpression	* p		11379	1					
ANR	11425	UnaryOperator	*		11379	0					
ANR	11426	Identifier	p		11379	1					
ANR	11427	IfStatement	if ( param_count > arg_count )		11379	7					
ANR	11428	Condition	param_count > arg_count	56:5:2198:2218	11379	0	True				
ANR	11429	RelationalExpression	param_count > arg_count		11379	0		>			
ANR	11430	Identifier	param_count		11379	0					
ANR	11431	Identifier	arg_count		11379	1					
ANR	11432	CompoundStatement		11:28:193:193	11379	1					
ANR	11433	ReturnStatement	return FAILURE ;	57:2:2225:2239	11379	0	True				
ANR	11434	Identifier	FAILURE		11379	0					
ANR	11435	ExpressionStatement	"va_start ( ptr , param_count )"	60:1:2246:2272	11379	8	True				
ANR	11436	CallExpression	"va_start ( ptr , param_count )"		11379	0					
ANR	11437	Callee	va_start		11379	0					
ANR	11438	Identifier	va_start		11379	0					
ANR	11439	ArgumentList	ptr		11379	1					
ANR	11440	Argument	ptr		11379	0					
ANR	11441	Identifier	ptr		11379	0					
ANR	11442	Argument	param_count		11379	1					
ANR	11443	Identifier	param_count		11379	0					
ANR	11444	WhileStatement	while ( param_count -- > 0 )		11379	9					
ANR	11445	Condition	param_count -- > 0	62:8:2283:2297	11379	0	True				
ANR	11446	RelationalExpression	param_count -- > 0		11379	0		>			
ANR	11447	PostIncDecOperationExpression	param_count --		11379	0					
ANR	11448	Identifier	param_count		11379	0					
ANR	11449	IncDec	--		11379	1					
ANR	11450	PrimaryExpression	0		11379	1					
ANR	11451	CompoundStatement		17:25:272:272	11379	1					
ANR	11452	Statement	param	63:2:2304:2308	11379	0	True				
ANR	11453	Statement	=	63:8:2310:2310	11379	1	True				
ANR	11454	Statement	va_arg	63:10:2312:2317	11379	2	True				
ANR	11455	Statement	(	63:16:2318:2318	11379	3	True				
ANR	11456	Statement	ptr	63:17:2319:2321	11379	4	True				
ANR	11457	Statement	","	63:20:2322:2322	11379	5	True				
ANR	11458	Statement	zval	63:22:2324:2327	11379	6	True				
ANR	11459	Statement	*	63:27:2329:2329	11379	7	True				
ANR	11460	Statement	*	63:28:2330:2330	11379	8	True				
ANR	11461	Statement	)	63:29:2331:2331	11379	9	True				
ANR	11462	ExpressionStatement		63:30:2332:2332	11379	10	True				
ANR	11463	ExpressionStatement	param_ptr = * ( p - arg_count )	64:2:2336:2362	11379	11	True				
ANR	11464	AssignmentExpression	param_ptr = * ( p - arg_count )		11379	0		=			
ANR	11465	Identifier	param_ptr		11379	0					
ANR	11466	UnaryOperationExpression	* ( p - arg_count )		11379	1					
ANR	11467	UnaryOperator	*		11379	0					
ANR	11468	AdditiveExpression	p - arg_count		11379	1		-			
ANR	11469	Identifier	p		11379	0					
ANR	11470	Identifier	arg_count		11379	1					
ANR	11471	IfStatement	if ( ! PZVAL_IS_REF ( param_ptr ) && Z_REFCOUNT_P ( param_ptr ) > 1 )		11379	12					
ANR	11472	Condition	! PZVAL_IS_REF ( param_ptr ) && Z_REFCOUNT_P ( param_ptr ) > 1	65:6:2370:2424	11379	0	True				
ANR	11473	AndExpression	! PZVAL_IS_REF ( param_ptr ) && Z_REFCOUNT_P ( param_ptr ) > 1		11379	0		&&			
ANR	11474	UnaryOperationExpression	! PZVAL_IS_REF ( param_ptr )		11379	0					
ANR	11475	UnaryOperator	!		11379	0					
ANR	11476	CallExpression	PZVAL_IS_REF ( param_ptr )		11379	1					
ANR	11477	Callee	PZVAL_IS_REF		11379	0					
ANR	11478	Identifier	PZVAL_IS_REF		11379	0					
ANR	11479	ArgumentList	param_ptr		11379	1					
ANR	11480	Argument	param_ptr		11379	0					
ANR	11481	Identifier	param_ptr		11379	0					
ANR	11482	RelationalExpression	Z_REFCOUNT_P ( param_ptr ) > 1		11379	1		>			
ANR	11483	CallExpression	Z_REFCOUNT_P ( param_ptr )		11379	0					
ANR	11484	Callee	Z_REFCOUNT_P		11379	0					
ANR	11485	Identifier	Z_REFCOUNT_P		11379	0					
ANR	11486	ArgumentList	param_ptr		11379	1					
ANR	11487	Argument	param_ptr		11379	0					
ANR	11488	Identifier	param_ptr		11379	0					
ANR	11489	PrimaryExpression	1		11379	1					
ANR	11490	CompoundStatement		21:3:404:417	11379	1					
ANR	11491	IdentifierDeclStatement	zval * new_tmp ;	66:3:2432:2445	11379	0	True				
ANR	11492	IdentifierDecl	* new_tmp		11379	0					
ANR	11493	IdentifierDeclType	zval *		11379	0					
ANR	11494	Identifier	new_tmp		11379	1					
ANR	11495	ExpressionStatement	ALLOC_ZVAL ( new_tmp )	68:3:2451:2470	11379	1	True				
ANR	11496	CallExpression	ALLOC_ZVAL ( new_tmp )		11379	0					
ANR	11497	Callee	ALLOC_ZVAL		11379	0					
ANR	11498	Identifier	ALLOC_ZVAL		11379	0					
ANR	11499	ArgumentList	new_tmp		11379	1					
ANR	11500	Argument	new_tmp		11379	0					
ANR	11501	Identifier	new_tmp		11379	0					
ANR	11502	ExpressionStatement	* new_tmp = * param_ptr	69:3:2475:2496	11379	2	True				
ANR	11503	AssignmentExpression	* new_tmp = * param_ptr		11379	0		=			
ANR	11504	UnaryOperationExpression	* new_tmp		11379	0					
ANR	11505	UnaryOperator	*		11379	0					
ANR	11506	Identifier	new_tmp		11379	1					
ANR	11507	UnaryOperationExpression	* param_ptr		11379	1					
ANR	11508	UnaryOperator	*		11379	0					
ANR	11509	Identifier	param_ptr		11379	1					
ANR	11510	ExpressionStatement	zval_copy_ctor ( new_tmp )	70:3:2501:2524	11379	3	True				
ANR	11511	CallExpression	zval_copy_ctor ( new_tmp )		11379	0					
ANR	11512	Callee	zval_copy_ctor		11379	0					
ANR	11513	Identifier	zval_copy_ctor		11379	0					
ANR	11514	ArgumentList	new_tmp		11379	1					
ANR	11515	Argument	new_tmp		11379	0					
ANR	11516	Identifier	new_tmp		11379	0					
ANR	11517	ExpressionStatement	INIT_PZVAL ( new_tmp )	71:3:2529:2548	11379	4	True				
ANR	11518	CallExpression	INIT_PZVAL ( new_tmp )		11379	0					
ANR	11519	Callee	INIT_PZVAL		11379	0					
ANR	11520	Identifier	INIT_PZVAL		11379	0					
ANR	11521	ArgumentList	new_tmp		11379	1					
ANR	11522	Argument	new_tmp		11379	0					
ANR	11523	Identifier	new_tmp		11379	0					
ANR	11524	ExpressionStatement	param_ptr = new_tmp	72:3:2553:2572	11379	5	True				
ANR	11525	AssignmentExpression	param_ptr = new_tmp		11379	0		=			
ANR	11526	Identifier	param_ptr		11379	0					
ANR	11527	Identifier	new_tmp		11379	1					
ANR	11528	ExpressionStatement	Z_DELREF_P ( ( zval * ) * ( p - arg_count ) )	73:3:2577:2612	11379	6	True				
ANR	11529	CallExpression	Z_DELREF_P ( ( zval * ) * ( p - arg_count ) )		11379	0					
ANR	11530	Callee	Z_DELREF_P		11379	0					
ANR	11531	Identifier	Z_DELREF_P		11379	0					
ANR	11532	ArgumentList	( zval * ) * ( p - arg_count )		11379	1					
ANR	11533	Argument	( zval * ) * ( p - arg_count )		11379	0					
ANR	11534	CastExpression	( zval * ) * ( p - arg_count )		11379	0					
ANR	11535	CastTarget	zval *		11379	0					
ANR	11536	UnaryOperationExpression	* ( p - arg_count )		11379	1					
ANR	11537	UnaryOperator	*		11379	0					
ANR	11538	AdditiveExpression	p - arg_count		11379	1		-			
ANR	11539	Identifier	p		11379	0					
ANR	11540	Identifier	arg_count		11379	1					
ANR	11541	ExpressionStatement	* ( p - arg_count ) = param_ptr	74:3:2617:2643	11379	7	True				
ANR	11542	AssignmentExpression	* ( p - arg_count ) = param_ptr		11379	0		=			
ANR	11543	UnaryOperationExpression	* ( p - arg_count )		11379	0					
ANR	11544	UnaryOperator	*		11379	0					
ANR	11545	AdditiveExpression	p - arg_count		11379	1		-			
ANR	11546	Identifier	p		11379	0					
ANR	11547	Identifier	arg_count		11379	1					
ANR	11548	Identifier	param_ptr		11379	1					
ANR	11549	ExpressionStatement	* param = param_ptr	76:2:2651:2669	11379	13	True				
ANR	11550	AssignmentExpression	* param = param_ptr		11379	0		=			
ANR	11551	UnaryOperationExpression	* param		11379	0					
ANR	11552	UnaryOperator	*		11379	0					
ANR	11553	Identifier	param		11379	1					
ANR	11554	Identifier	param_ptr		11379	1					
ANR	11555	ExpressionStatement	arg_count --	77:2:2673:2684	11379	14	True				
ANR	11556	PostIncDecOperationExpression	arg_count --		11379	0					
ANR	11557	Identifier	arg_count		11379	0					
ANR	11558	IncDec	--		11379	1					
ANR	11559	ExpressionStatement	va_end ( ptr )	79:1:2690:2701	11379	10	True				
ANR	11560	CallExpression	va_end ( ptr )		11379	0					
ANR	11561	Callee	va_end		11379	0					
ANR	11562	Identifier	va_end		11379	0					
ANR	11563	ArgumentList	ptr		11379	1					
ANR	11564	Argument	ptr		11379	0					
ANR	11565	Identifier	ptr		11379	0					
ANR	11566	ReturnStatement	return SUCCESS ;	81:1:2705:2719	11379	11	True				
ANR	11567	Identifier	SUCCESS		11379	0					
ANR	11568	ReturnType	ZEND_API int		11379	1					
ANR	11569	Identifier	zend_get_parameters		11379	2					
ANR	11570	ParameterList	"int ht , int param_count"		11379	3					
ANR	11571	Parameter	int ht	45:33:1987:1992	11379	0	True				
ANR	11572	ParameterType	int		11379	0					
ANR	11573	Identifier	ht		11379	1					
ANR	11574	Parameter	int param_count	45:41:1995:2009	11379	1	True				
ANR	11575	ParameterType	int		11379	0					
ANR	11576	Identifier	param_count		11379	1					
ANR	11577	CFGEntryNode	ENTRY		11379		True				
ANR	11578	CFGExitNode	EXIT		11379		True				
ANR	11579	Symbol	* new_tmp		11379						
ANR	11580	Symbol	SUCCESS		11379						
ANR	11581	Symbol	zend_vm_stack_top		11379						
ANR	11582	Symbol	param_count		11379						
ANR	11583	Symbol	param_ptr		11379						
ANR	11584	Symbol	* ( p - arg_count )		11379						
ANR	11585	Symbol	PZVAL_IS_REF		11379						
ANR	11586	Symbol	* param_ptr		11379						
ANR	11587	Symbol	ht		11379						
ANR	11588	Symbol	FAILURE		11379						
ANR	11589	Symbol	Z_REFCOUNT_P		11379						
ANR	11590	Symbol	ptr		11379						
ANR	11591	Symbol	* param		11379						
ANR	11592	Symbol	p		11379						
ANR	11593	Symbol	TSRMLS_C		11379						
ANR	11594	Symbol	param		11379						
ANR	11595	Symbol	new_tmp		11379						
ANR	11596	Symbol	* p		11379						
ANR	11597	Symbol	* arg_count		11379						
ANR	11598	Symbol	arg_count		11379						
ANR	11599	DeclStmt									
ANR	11600	Decl							void	void * *	p
ANR	11601	DeclStmt									
ANR	11602	Decl							int	int	arg_count
ANR	11603	DeclStmt									
ANR	11604	Decl							zval	zval *	param_ptr
ANR	11605	DeclStmt									
ANR	11606	Decl							zval	zval *	new_tmp
ANR	11607	Function	zend_get_parameters_ex	121:0:3544:3981							
ANR	11608	FunctionDef	zend_get_parameters_ex (int param_count)		11607	0					
ANR	11609	CompoundStatement		122:0:3612:3981	11607	0					
ANR	11610	IdentifierDeclStatement	void * * p ;	123:1:3615:3623	11607	0	True				
ANR	11611	IdentifierDecl	* * p		11607	0					
ANR	11612	IdentifierDeclType	void * *		11607	0					
ANR	11613	Identifier	p		11607	1					
ANR	11614	IdentifierDeclStatement	int arg_count ;	124:1:3626:3639	11607	1	True				
ANR	11615	IdentifierDecl	arg_count		11607	0					
ANR	11616	IdentifierDeclType	int		11607	0					
ANR	11617	Identifier	arg_count		11607	1					
ANR	11618	IdentifierDeclStatement	va_list ptr ;	125:1:3642:3653	11607	2	True				
ANR	11619	IdentifierDecl	ptr		11607	0					
ANR	11620	IdentifierDeclType	va_list		11607	0					
ANR	11621	Identifier	ptr		11607	1					
ANR	11622	IdentifierDeclStatement	zval * * * param ;	126:1:3656:3669	11607	3	True				
ANR	11623	IdentifierDecl	* * * param		11607	0					
ANR	11624	IdentifierDeclType	zval * * *		11607	0					
ANR	11625	Identifier	param		11607	1					
ANR	11626	ExpressionStatement	TSRMLS_FETCH ( )	127:1:3672:3686	11607	4	True				
ANR	11627	CallExpression	TSRMLS_FETCH ( )		11607	0					
ANR	11628	Callee	TSRMLS_FETCH		11607	0					
ANR	11629	Identifier	TSRMLS_FETCH		11607	0					
ANR	11630	ArgumentList			11607	1					
ANR	11631	ExpressionStatement	p = zend_vm_stack_top ( TSRMLS_C ) - 1	129:1:3690:3725	11607	5	True				
ANR	11632	AssignmentExpression	p = zend_vm_stack_top ( TSRMLS_C ) - 1		11607	0		=			
ANR	11633	Identifier	p		11607	0					
ANR	11634	AdditiveExpression	zend_vm_stack_top ( TSRMLS_C ) - 1		11607	1		-			
ANR	11635	CallExpression	zend_vm_stack_top ( TSRMLS_C )		11607	0					
ANR	11636	Callee	zend_vm_stack_top		11607	0					
ANR	11637	Identifier	zend_vm_stack_top		11607	0					
ANR	11638	ArgumentList	TSRMLS_C		11607	1					
ANR	11639	Argument	TSRMLS_C		11607	0					
ANR	11640	Identifier	TSRMLS_C		11607	0					
ANR	11641	PrimaryExpression	1		11607	1					
ANR	11642	ExpressionStatement	arg_count = ( int ) ( zend_uintptr_t ) * p	130:1:3728:3764	11607	6	True				
ANR	11643	AssignmentExpression	arg_count = ( int ) ( zend_uintptr_t ) * p		11607	0		=			
ANR	11644	Identifier	arg_count		11607	0					
ANR	11645	CastExpression	( int ) ( zend_uintptr_t ) * p		11607	1					
ANR	11646	CastTarget	int		11607	0					
ANR	11647	CastExpression	( zend_uintptr_t ) * p		11607	1					
ANR	11648	CastTarget	zend_uintptr_t		11607	0					
ANR	11649	UnaryOperationExpression	* p		11607	1					
ANR	11650	UnaryOperator	*		11607	0					
ANR	11651	Identifier	p		11607	1					
ANR	11652	IfStatement	if ( param_count > arg_count )		11607	7					
ANR	11653	Condition	param_count > arg_count	132:5:3772:3792	11607	0	True				
ANR	11654	RelationalExpression	param_count > arg_count		11607	0		>			
ANR	11655	Identifier	param_count		11607	0					
ANR	11656	Identifier	arg_count		11607	1					
ANR	11657	CompoundStatement		11:28:182:182	11607	1					
ANR	11658	ReturnStatement	return FAILURE ;	133:2:3799:3813	11607	0	True				
ANR	11659	Identifier	FAILURE		11607	0					
ANR	11660	ExpressionStatement	"va_start ( ptr , param_count )"	136:1:3820:3846	11607	8	True				
ANR	11661	CallExpression	"va_start ( ptr , param_count )"		11607	0					
ANR	11662	Callee	va_start		11607	0					
ANR	11663	Identifier	va_start		11607	0					
ANR	11664	ArgumentList	ptr		11607	1					
ANR	11665	Argument	ptr		11607	0					
ANR	11666	Identifier	ptr		11607	0					
ANR	11667	Argument	param_count		11607	1					
ANR	11668	Identifier	param_count		11607	0					
ANR	11669	WhileStatement	while ( param_count -- > 0 )		11607	9					
ANR	11670	Condition	param_count -- > 0	137:8:3856:3870	11607	0	True				
ANR	11671	RelationalExpression	param_count -- > 0		11607	0		>			
ANR	11672	PostIncDecOperationExpression	param_count --		11607	0					
ANR	11673	Identifier	param_count		11607	0					
ANR	11674	IncDec	--		11607	1					
ANR	11675	PrimaryExpression	0		11607	1					
ANR	11676	CompoundStatement		16:25:260:260	11607	1					
ANR	11677	Statement	param	138:2:3877:3881	11607	0	True				
ANR	11678	Statement	=	138:8:3883:3883	11607	1	True				
ANR	11679	Statement	va_arg	138:10:3885:3890	11607	2	True				
ANR	11680	Statement	(	138:16:3891:3891	11607	3	True				
ANR	11681	Statement	ptr	138:17:3892:3894	11607	4	True				
ANR	11682	Statement	","	138:20:3895:3895	11607	5	True				
ANR	11683	Statement	zval	138:22:3897:3900	11607	6	True				
ANR	11684	Statement	*	138:27:3902:3902	11607	7	True				
ANR	11685	Statement	*	138:28:3903:3903	11607	8	True				
ANR	11686	Statement	*	138:29:3904:3904	11607	9	True				
ANR	11687	Statement	)	138:30:3905:3905	11607	10	True				
ANR	11688	ExpressionStatement		138:31:3906:3906	11607	11	True				
ANR	11689	ExpressionStatement	* param = ( zval * * ) p - ( arg_count -- )	139:2:3910:3944	11607	12	True				
ANR	11690	AssignmentExpression	* param = ( zval * * ) p - ( arg_count -- )		11607	0		=			
ANR	11691	UnaryOperationExpression	* param		11607	0					
ANR	11692	UnaryOperator	*		11607	0					
ANR	11693	Identifier	param		11607	1					
ANR	11694	AdditiveExpression	( zval * * ) p - ( arg_count -- )		11607	1		-			
ANR	11695	CastExpression	( zval * * ) p		11607	0					
ANR	11696	CastTarget	zval * *		11607	0					
ANR	11697	Identifier	p		11607	1					
ANR	11698	PostIncDecOperationExpression	arg_count --		11607	1					
ANR	11699	Identifier	arg_count		11607	0					
ANR	11700	IncDec	--		11607	1					
ANR	11701	ExpressionStatement	va_end ( ptr )	141:1:3950:3961	11607	10	True				
ANR	11702	CallExpression	va_end ( ptr )		11607	0					
ANR	11703	Callee	va_end		11607	0					
ANR	11704	Identifier	va_end		11607	0					
ANR	11705	ArgumentList	ptr		11607	1					
ANR	11706	Argument	ptr		11607	0					
ANR	11707	Identifier	ptr		11607	0					
ANR	11708	ReturnStatement	return SUCCESS ;	143:1:3965:3979	11607	11	True				
ANR	11709	Identifier	SUCCESS		11607	0					
ANR	11710	ReturnType	ZEND_API int		11607	1					
ANR	11711	Identifier	zend_get_parameters_ex		11607	2					
ANR	11712	ParameterList	int param_count		11607	3					
ANR	11713	Parameter	int param_count	121:36:3580:3594	11607	0	True				
ANR	11714	ParameterType	int		11607	0					
ANR	11715	Identifier	param_count		11607	1					
ANR	11716	CFGEntryNode	ENTRY		11607		True				
ANR	11717	CFGExitNode	EXIT		11607		True				
ANR	11718	Symbol	p		11607						
ANR	11719	Symbol	TSRMLS_C		11607						
ANR	11720	Symbol	SUCCESS		11607						
ANR	11721	Symbol	zend_vm_stack_top		11607						
ANR	11722	Symbol	param_count		11607						
ANR	11723	Symbol	param		11607						
ANR	11724	Symbol	* p		11607						
ANR	11725	Symbol	FAILURE		11607						
ANR	11726	Symbol	arg_count		11607						
ANR	11727	Symbol	ptr		11607						
ANR	11728	Symbol	* param		11607						
ANR	11729	DeclStmt									
ANR	11730	Decl							void	void * *	p
ANR	11731	DeclStmt									
ANR	11732	Decl							int	int	arg_count
ANR	11733	DeclStmt									
ANR	11734	Decl							zval	zval * *	value
ANR	11735	DeclStmt									
ANR	11736	Decl							void	void * *	p
ANR	11737	DeclStmt									
ANR	11738	Decl							int	int	arg_count
ANR	11739	DeclStmt									
ANR	11740	Decl							zval	zval * *	param
ANR	11741	DeclStmt									
ANR	11742	Decl							const char	const char *	space
ANR	11743	DeclStmt									
ANR	11744	Decl							const char	const char *	class_name
ANR	11745	Function	zend_get_type_by_const	202:0:5154:5607							
ANR	11746	FunctionDef	zend_get_type_by_const (int type)		11745	0					
ANR	11747	CompoundStatement		203:0:5212:5607	11745	0					
ANR	11748	SwitchStatement	switch ( type )		11745	0					
ANR	11749	Condition	type	204:8:5222:5225	11745	0	True				
ANR	11750	Identifier	type		11745	0					
ANR	11751	CompoundStatement		2:14:15:15	11745	1					
ANR	11752	Label	case IS_BOOL :	205:2:5232:5244	11745	0	True				
ANR	11753	Identifier	IS_BOOL		11745	0					
ANR	11754	ReturnStatement	"return ""boolean"" ;"	206:3:5249:5265	11745	1	True				
ANR	11755	PrimaryExpression	"""boolean"""		11745	0					
ANR	11756	Label	case IS_LONG :	207:2:5269:5281	11745	2	True				
ANR	11757	Identifier	IS_LONG		11745	0					
ANR	11758	ReturnStatement	"return ""integer"" ;"	208:3:5286:5302	11745	3	True				
ANR	11759	PrimaryExpression	"""integer"""		11745	0					
ANR	11760	Label	case IS_DOUBLE :	209:2:5306:5320	11745	4	True				
ANR	11761	Identifier	IS_DOUBLE		11745	0					
ANR	11762	ReturnStatement	"return ""double"" ;"	210:3:5325:5340	11745	5	True				
ANR	11763	PrimaryExpression	"""double"""		11745	0					
ANR	11764	Label	case IS_STRING :	211:2:5344:5358	11745	6	True				
ANR	11765	Identifier	IS_STRING		11745	0					
ANR	11766	ReturnStatement	"return ""string"" ;"	212:3:5363:5378	11745	7	True				
ANR	11767	PrimaryExpression	"""string"""		11745	0					
ANR	11768	Label	case IS_OBJECT :	213:2:5382:5396	11745	8	True				
ANR	11769	Identifier	IS_OBJECT		11745	0					
ANR	11770	ReturnStatement	"return ""object"" ;"	214:3:5401:5416	11745	9	True				
ANR	11771	PrimaryExpression	"""object"""		11745	0					
ANR	11772	Label	case IS_RESOURCE :	215:2:5420:5436	11745	10	True				
ANR	11773	Identifier	IS_RESOURCE		11745	0					
ANR	11774	ReturnStatement	"return ""resource"" ;"	216:3:5441:5458	11745	11	True				
ANR	11775	PrimaryExpression	"""resource"""		11745	0					
ANR	11776	Label	case IS_NULL :	217:2:5462:5474	11745	12	True				
ANR	11777	Identifier	IS_NULL		11745	0					
ANR	11778	ReturnStatement	"return ""null"" ;"	218:3:5479:5492	11745	13	True				
ANR	11779	PrimaryExpression	"""null"""		11745	0					
ANR	11780	Label	case IS_CALLABLE :	219:2:5496:5512	11745	14	True				
ANR	11781	Identifier	IS_CALLABLE		11745	0					
ANR	11782	ReturnStatement	"return ""callable"" ;"	220:3:5517:5534	11745	15	True				
ANR	11783	PrimaryExpression	"""callable"""		11745	0					
ANR	11784	Label	case IS_ARRAY :	221:2:5538:5551	11745	16	True				
ANR	11785	Identifier	IS_ARRAY		11745	0					
ANR	11786	ReturnStatement	"return ""array"" ;"	222:3:5556:5570	11745	17	True				
ANR	11787	PrimaryExpression	"""array"""		11745	0					
ANR	11788	Label	default :	223:2:5574:5581	11745	18	True				
ANR	11789	Identifier	default		11745	0					
ANR	11790	ReturnStatement	"return ""unknown"" ;"	224:3:5586:5602	11745	19	True				
ANR	11791	PrimaryExpression	"""unknown"""		11745	0					
ANR	11792	ReturnType	ZEND_API char *		11745	1					
ANR	11793	Identifier	zend_get_type_by_const		11745	2					
ANR	11794	ParameterList	int type		11745	3					
ANR	11795	Parameter	int type	202:38:5192:5199	11745	0	True				
ANR	11796	ParameterType	int		11745	0					
ANR	11797	Identifier	type		11745	1					
ANR	11798	CFGEntryNode	ENTRY		11745		True				
ANR	11799	CFGExitNode	EXIT		11745		True				
ANR	11800	Symbol	type		11745						
ANR	11801	Function	zend_zval_type_name	229:0:5620:5731							
ANR	11802	FunctionDef	zend_zval_type_name (const zval * arg)		11801	0					
ANR	11803	CompoundStatement		230:0:5682:5731	11801	0					
ANR	11804	ReturnStatement	return zend_get_type_by_const ( Z_TYPE_P ( arg ) ) ;	231:1:5685:5729	11801	0	True				
ANR	11805	CallExpression	zend_get_type_by_const ( Z_TYPE_P ( arg ) )		11801	0					
ANR	11806	Callee	zend_get_type_by_const		11801	0					
ANR	11807	Identifier	zend_get_type_by_const		11801	0					
ANR	11808	ArgumentList	Z_TYPE_P ( arg )		11801	1					
ANR	11809	Argument	Z_TYPE_P ( arg )		11801	0					
ANR	11810	CallExpression	Z_TYPE_P ( arg )		11801	0					
ANR	11811	Callee	Z_TYPE_P		11801	0					
ANR	11812	Identifier	Z_TYPE_P		11801	0					
ANR	11813	ArgumentList	arg		11801	1					
ANR	11814	Argument	arg		11801	0					
ANR	11815	Identifier	arg		11801	0					
ANR	11816	ReturnType	ZEND_API char *		11801	1					
ANR	11817	Identifier	zend_zval_type_name		11801	2					
ANR	11818	ParameterList	const zval * arg		11801	3					
ANR	11819	Parameter	const zval * arg	229:35:5655:5669	11801	0	True				
ANR	11820	ParameterType	const zval *		11801	0					
ANR	11821	Identifier	arg		11801	1					
ANR	11822	CFGEntryNode	ENTRY		11801		True				
ANR	11823	CFGExitNode	EXIT		11801		True				
ANR	11824	Symbol	zend_get_type_by_const		11801						
ANR	11825	Symbol	arg		11801						
ANR	11826	Symbol	Z_TYPE_P		11801						
ANR	11827	DeclStmt									
ANR	11828	Decl							zend_class_entry	zend_class_entry *	ce
ANR	11829	Function	parse_arg_object_to_string	261:0:6567:7731							
ANR	11830	FunctionDef	"parse_arg_object_to_string (zval * * arg , char * * p , int * pl , int type TSRMLS_DC)"		11829	0					
ANR	11831	CompoundStatement		262:0:6666:7731	11829	0					
ANR	11832	IfStatement	"if ( Z_OBJ_HANDLER_PP ( arg , cast_object ) )"		11829	0					
ANR	11833	Condition	"Z_OBJ_HANDLER_PP ( arg , cast_object )"	263:5:6673:6706	11829	0	True				
ANR	11834	CallExpression	"Z_OBJ_HANDLER_PP ( arg , cast_object )"		11829	0					
ANR	11835	Callee	Z_OBJ_HANDLER_PP		11829	0					
ANR	11836	Identifier	Z_OBJ_HANDLER_PP		11829	0					
ANR	11837	ArgumentList	arg		11829	1					
ANR	11838	Argument	arg		11829	0					
ANR	11839	Identifier	arg		11829	0					
ANR	11840	Argument	cast_object		11829	1					
ANR	11841	Identifier	cast_object		11829	0					
ANR	11842	CompoundStatement		3:2:46:55	11829	1					
ANR	11843	IdentifierDeclStatement	zval * obj ;	264:2:6713:6722	11829	0	True				
ANR	11844	IdentifierDecl	* obj		11829	0					
ANR	11845	IdentifierDeclType	zval *		11829	0					
ANR	11846	Identifier	obj		11829	1					
ANR	11847	ExpressionStatement	MAKE_STD_ZVAL ( obj )	265:2:6726:6744	11829	1	True				
ANR	11848	CallExpression	MAKE_STD_ZVAL ( obj )		11829	0					
ANR	11849	Callee	MAKE_STD_ZVAL		11829	0					
ANR	11850	Identifier	MAKE_STD_ZVAL		11829	0					
ANR	11851	ArgumentList	obj		11829	1					
ANR	11852	Argument	obj		11829	0					
ANR	11853	Identifier	obj		11829	0					
ANR	11854	Statement	if	266:2:6748:6749	11829	2	True				
ANR	11855	Statement	(	266:5:6751:6751	11829	3	True				
ANR	11856	Statement	Z_OBJ_HANDLER_P	266:6:6752:6766	11829	4	True				
ANR	11857	Statement	(	266:21:6767:6767	11829	5	True				
ANR	11858	Statement	*	266:22:6768:6768	11829	6	True				
ANR	11859	Statement	arg	266:23:6769:6771	11829	7	True				
ANR	11860	Statement	","	266:26:6772:6772	11829	8	True				
ANR	11861	Statement	cast_object	266:28:6774:6784	11829	9	True				
ANR	11862	Statement	)	266:39:6785:6785	11829	10	True				
ANR	11863	Statement	(	266:40:6786:6786	11829	11	True				
ANR	11864	Statement	*	266:41:6787:6787	11829	12	True				
ANR	11865	Statement	arg	266:42:6788:6790	11829	13	True				
ANR	11866	Statement	","	266:45:6791:6791	11829	14	True				
ANR	11867	Statement	obj	266:47:6793:6795	11829	15	True				
ANR	11868	Statement	","	266:50:6796:6796	11829	16	True				
ANR	11869	Statement	type	266:52:6798:6801	11829	17	True				
ANR	11870	Statement	TSRMLS_CC	266:57:6803:6811	11829	18	True				
ANR	11871	Statement	)	266:66:6812:6812	11829	19	True				
ANR	11872	Statement	==	266:68:6814:6815	11829	20	True				
ANR	11873	Statement	SUCCESS	266:71:6817:6823	11829	21	True				
ANR	11874	Statement	)	266:78:6824:6824	11829	22	True				
ANR	11875	CompoundStatement		5:80:159:159	11829	23					
ANR	11876	ExpressionStatement	zval_ptr_dtor ( arg )	267:3:6831:6849	11829	0	True				
ANR	11877	CallExpression	zval_ptr_dtor ( arg )		11829	0					
ANR	11878	Callee	zval_ptr_dtor		11829	0					
ANR	11879	Identifier	zval_ptr_dtor		11829	0					
ANR	11880	ArgumentList	arg		11829	1					
ANR	11881	Argument	arg		11829	0					
ANR	11882	Identifier	arg		11829	0					
ANR	11883	ExpressionStatement	* arg = obj	268:3:6854:6864	11829	1	True				
ANR	11884	AssignmentExpression	* arg = obj		11829	0		=			
ANR	11885	UnaryOperationExpression	* arg		11829	0					
ANR	11886	UnaryOperator	*		11829	0					
ANR	11887	Identifier	arg		11829	1					
ANR	11888	Identifier	obj		11829	1					
ANR	11889	ExpressionStatement	* pl = Z_STRLEN_PP ( arg )	269:3:6869:6891	11829	2	True				
ANR	11890	AssignmentExpression	* pl = Z_STRLEN_PP ( arg )		11829	0		=			
ANR	11891	UnaryOperationExpression	* pl		11829	0					
ANR	11892	UnaryOperator	*		11829	0					
ANR	11893	Identifier	pl		11829	1					
ANR	11894	CallExpression	Z_STRLEN_PP ( arg )		11829	1					
ANR	11895	Callee	Z_STRLEN_PP		11829	0					
ANR	11896	Identifier	Z_STRLEN_PP		11829	0					
ANR	11897	ArgumentList	arg		11829	1					
ANR	11898	Argument	arg		11829	0					
ANR	11899	Identifier	arg		11829	0					
ANR	11900	ExpressionStatement	* p = Z_STRVAL_PP ( arg )	270:3:6896:6917	11829	3	True				
ANR	11901	AssignmentExpression	* p = Z_STRVAL_PP ( arg )		11829	0		=			
ANR	11902	UnaryOperationExpression	* p		11829	0					
ANR	11903	UnaryOperator	*		11829	0					
ANR	11904	Identifier	p		11829	1					
ANR	11905	CallExpression	Z_STRVAL_PP ( arg )		11829	1					
ANR	11906	Callee	Z_STRVAL_PP		11829	0					
ANR	11907	Identifier	Z_STRVAL_PP		11829	0					
ANR	11908	ArgumentList	arg		11829	1					
ANR	11909	Argument	arg		11829	0					
ANR	11910	Identifier	arg		11829	0					
ANR	11911	ReturnStatement	return SUCCESS ;	271:3:6922:6936	11829	4	True				
ANR	11912	Identifier	SUCCESS		11829	0					
ANR	11913	ExpressionStatement	efree ( obj )	273:2:6944:6954	11829	24	True				
ANR	11914	CallExpression	efree ( obj )		11829	0					
ANR	11915	Callee	efree		11829	0					
ANR	11916	Identifier	efree		11829	0					
ANR	11917	ArgumentList	obj		11829	1					
ANR	11918	Argument	obj		11829	0					
ANR	11919	Identifier	obj		11829	0					
ANR	11920	IfStatement	"if ( Z_OBJ_HT_PP ( arg ) == & std_object_handlers || ! Z_OBJ_HANDLER_PP ( arg , cast_object ) )"		11829	1					
ANR	11921	Condition	"Z_OBJ_HT_PP ( arg ) == & std_object_handlers || ! Z_OBJ_HANDLER_PP ( arg , cast_object )"	276:5:6992:7070	11829	0	True				
ANR	11922	OrExpression	"Z_OBJ_HT_PP ( arg ) == & std_object_handlers || ! Z_OBJ_HANDLER_PP ( arg , cast_object )"		11829	0		||			
ANR	11923	EqualityExpression	Z_OBJ_HT_PP ( arg ) == & std_object_handlers		11829	0		==			
ANR	11924	CallExpression	Z_OBJ_HT_PP ( arg )		11829	0					
ANR	11925	Callee	Z_OBJ_HT_PP		11829	0					
ANR	11926	Identifier	Z_OBJ_HT_PP		11829	0					
ANR	11927	ArgumentList	arg		11829	1					
ANR	11928	Argument	arg		11829	0					
ANR	11929	Identifier	arg		11829	0					
ANR	11930	UnaryOperationExpression	& std_object_handlers		11829	1					
ANR	11931	UnaryOperator	&		11829	0					
ANR	11932	Identifier	std_object_handlers		11829	1					
ANR	11933	UnaryOperationExpression	"! Z_OBJ_HANDLER_PP ( arg , cast_object )"		11829	1					
ANR	11934	UnaryOperator	!		11829	0					
ANR	11935	CallExpression	"Z_OBJ_HANDLER_PP ( arg , cast_object )"		11829	1					
ANR	11936	Callee	Z_OBJ_HANDLER_PP		11829	0					
ANR	11937	Identifier	Z_OBJ_HANDLER_PP		11829	0					
ANR	11938	ArgumentList	arg		11829	1					
ANR	11939	Argument	arg		11829	0					
ANR	11940	Identifier	arg		11829	0					
ANR	11941	Argument	cast_object		11829	1					
ANR	11942	Identifier	cast_object		11829	0					
ANR	11943	CompoundStatement		15:86:406:406	11829	1					
ANR	11944	ExpressionStatement	SEPARATE_ZVAL_IF_NOT_REF ( arg )	277:2:7077:7106	11829	0	True				
ANR	11945	CallExpression	SEPARATE_ZVAL_IF_NOT_REF ( arg )		11829	0					
ANR	11946	Callee	SEPARATE_ZVAL_IF_NOT_REF		11829	0					
ANR	11947	Identifier	SEPARATE_ZVAL_IF_NOT_REF		11829	0					
ANR	11948	ArgumentList	arg		11829	1					
ANR	11949	Argument	arg		11829	0					
ANR	11950	Identifier	arg		11829	0					
ANR	11951	Statement	if	278:2:7110:7111	11829	1	True				
ANR	11952	Statement	(	278:5:7113:7113	11829	2	True				
ANR	11953	Statement	zend_std_cast_object_tostring	278:6:7114:7142	11829	3	True				
ANR	11954	Statement	(	278:35:7143:7143	11829	4	True				
ANR	11955	Statement	*	278:36:7144:7144	11829	5	True				
ANR	11956	Statement	arg	278:37:7145:7147	11829	6	True				
ANR	11957	Statement	","	278:40:7148:7148	11829	7	True				
ANR	11958	Statement	*	278:42:7150:7150	11829	8	True				
ANR	11959	Statement	arg	278:43:7151:7153	11829	9	True				
ANR	11960	Statement	","	278:46:7154:7154	11829	10	True				
ANR	11961	Statement	type	278:48:7156:7159	11829	11	True				
ANR	11962	Statement	TSRMLS_CC	278:53:7161:7169	11829	12	True				
ANR	11963	Statement	)	278:62:7170:7170	11829	13	True				
ANR	11964	Statement	==	278:64:7172:7173	11829	14	True				
ANR	11965	Statement	SUCCESS	278:67:7175:7181	11829	15	True				
ANR	11966	Statement	)	278:74:7182:7182	11829	16	True				
ANR	11967	CompoundStatement		17:76:517:517	11829	17					
ANR	11968	ExpressionStatement	* pl = Z_STRLEN_PP ( arg )	279:3:7189:7211	11829	0	True				
ANR	11969	AssignmentExpression	* pl = Z_STRLEN_PP ( arg )		11829	0		=			
ANR	11970	UnaryOperationExpression	* pl		11829	0					
ANR	11971	UnaryOperator	*		11829	0					
ANR	11972	Identifier	pl		11829	1					
ANR	11973	CallExpression	Z_STRLEN_PP ( arg )		11829	1					
ANR	11974	Callee	Z_STRLEN_PP		11829	0					
ANR	11975	Identifier	Z_STRLEN_PP		11829	0					
ANR	11976	ArgumentList	arg		11829	1					
ANR	11977	Argument	arg		11829	0					
ANR	11978	Identifier	arg		11829	0					
ANR	11979	ExpressionStatement	* p = Z_STRVAL_PP ( arg )	280:3:7216:7237	11829	1	True				
ANR	11980	AssignmentExpression	* p = Z_STRVAL_PP ( arg )		11829	0		=			
ANR	11981	UnaryOperationExpression	* p		11829	0					
ANR	11982	UnaryOperator	*		11829	0					
ANR	11983	Identifier	p		11829	1					
ANR	11984	CallExpression	Z_STRVAL_PP ( arg )		11829	1					
ANR	11985	Callee	Z_STRVAL_PP		11829	0					
ANR	11986	Identifier	Z_STRVAL_PP		11829	0					
ANR	11987	ArgumentList	arg		11829	1					
ANR	11988	Argument	arg		11829	0					
ANR	11989	Identifier	arg		11829	0					
ANR	11990	ReturnStatement	return SUCCESS ;	281:3:7242:7256	11829	2	True				
ANR	11991	Identifier	SUCCESS		11829	0					
ANR	11992	IfStatement	"if ( ! Z_OBJ_HANDLER_PP ( arg , cast_object ) && Z_OBJ_HANDLER_PP ( arg , get ) )"		11829	2					
ANR	11993	Condition	"! Z_OBJ_HANDLER_PP ( arg , cast_object ) && Z_OBJ_HANDLER_PP ( arg , get )"	284:5:7270:7334	11829	0	True				
ANR	11994	AndExpression	"! Z_OBJ_HANDLER_PP ( arg , cast_object ) && Z_OBJ_HANDLER_PP ( arg , get )"		11829	0		&&			
ANR	11995	UnaryOperationExpression	"! Z_OBJ_HANDLER_PP ( arg , cast_object )"		11829	0					
ANR	11996	UnaryOperator	!		11829	0					
ANR	11997	CallExpression	"Z_OBJ_HANDLER_PP ( arg , cast_object )"		11829	1					
ANR	11998	Callee	Z_OBJ_HANDLER_PP		11829	0					
ANR	11999	Identifier	Z_OBJ_HANDLER_PP		11829	0					
ANR	12000	ArgumentList	arg		11829	1					
ANR	12001	Argument	arg		11829	0					
ANR	12002	Identifier	arg		11829	0					
ANR	12003	Argument	cast_object		11829	1					
ANR	12004	Identifier	cast_object		11829	0					
ANR	12005	CallExpression	"Z_OBJ_HANDLER_PP ( arg , get )"		11829	1					
ANR	12006	Callee	Z_OBJ_HANDLER_PP		11829	0					
ANR	12007	Identifier	Z_OBJ_HANDLER_PP		11829	0					
ANR	12008	ArgumentList	arg		11829	1					
ANR	12009	Argument	arg		11829	0					
ANR	12010	Identifier	arg		11829	0					
ANR	12011	Argument	get		11829	1					
ANR	12012	Identifier	get		11829	0					
ANR	12013	CompoundStatement		24:2:674:686	11829	1					
ANR	12014	IdentifierDeclStatement	int use_copy ;	285:2:7341:7353	11829	0	True				
ANR	12015	IdentifierDecl	use_copy		11829	0					
ANR	12016	IdentifierDeclType	int		11829	0					
ANR	12017	Identifier	use_copy		11829	1					
ANR	12018	Statement	zval	286:2:7357:7360	11829	1	True				
ANR	12019	Statement	*	286:7:7362:7362	11829	2	True				
ANR	12020	Statement	z	286:8:7363:7363	11829	3	True				
ANR	12021	Statement	=	286:10:7365:7365	11829	4	True				
ANR	12022	Statement	Z_OBJ_HANDLER_PP	286:12:7367:7382	11829	5	True				
ANR	12023	Statement	(	286:28:7383:7383	11829	6	True				
ANR	12024	Statement	arg	286:29:7384:7386	11829	7	True				
ANR	12025	Statement	","	286:32:7387:7387	11829	8	True				
ANR	12026	Statement	get	286:34:7389:7391	11829	9	True				
ANR	12027	Statement	)	286:37:7392:7392	11829	10	True				
ANR	12028	Statement	(	286:38:7393:7393	11829	11	True				
ANR	12029	Statement	*	286:39:7394:7394	11829	12	True				
ANR	12030	Statement	arg	286:40:7395:7397	11829	13	True				
ANR	12031	Statement	TSRMLS_CC	286:44:7399:7407	11829	14	True				
ANR	12032	Statement	)	286:53:7408:7408	11829	15	True				
ANR	12033	ExpressionStatement		286:54:7409:7409	11829	16	True				
ANR	12034	ExpressionStatement	Z_ADDREF_P ( z )	287:2:7413:7426	11829	17	True				
ANR	12035	CallExpression	Z_ADDREF_P ( z )		11829	0					
ANR	12036	Callee	Z_ADDREF_P		11829	0					
ANR	12037	Identifier	Z_ADDREF_P		11829	0					
ANR	12038	ArgumentList	z		11829	1					
ANR	12039	Argument	z		11829	0					
ANR	12040	Identifier	z		11829	0					
ANR	12041	IfStatement	if ( Z_TYPE_P ( z ) != IS_OBJECT )		11829	18					
ANR	12042	Condition	Z_TYPE_P ( z ) != IS_OBJECT	288:5:7433:7456	11829	0	True				
ANR	12043	EqualityExpression	Z_TYPE_P ( z ) != IS_OBJECT		11829	0		!=			
ANR	12044	CallExpression	Z_TYPE_P ( z )		11829	0					
ANR	12045	Callee	Z_TYPE_P		11829	0					
ANR	12046	Identifier	Z_TYPE_P		11829	0					
ANR	12047	ArgumentList	z		11829	1					
ANR	12048	Argument	z		11829	0					
ANR	12049	Identifier	z		11829	0					
ANR	12050	Identifier	IS_OBJECT		11829	1					
ANR	12051	CompoundStatement		27:31:792:792	11829	1					
ANR	12052	ExpressionStatement	zval_dtor ( * arg )	289:3:7464:7479	11829	0	True				
ANR	12053	CallExpression	zval_dtor ( * arg )		11829	0					
ANR	12054	Callee	zval_dtor		11829	0					
ANR	12055	Identifier	zval_dtor		11829	0					
ANR	12056	ArgumentList	* arg		11829	1					
ANR	12057	Argument	* arg		11829	0					
ANR	12058	UnaryOperationExpression	* arg		11829	0					
ANR	12059	UnaryOperator	*		11829	0					
ANR	12060	Identifier	arg		11829	1					
ANR	12061	ExpressionStatement	Z_TYPE_P ( * arg ) = IS_NULL	290:3:7484:7508	11829	1	True				
ANR	12062	AssignmentExpression	Z_TYPE_P ( * arg ) = IS_NULL		11829	0		=			
ANR	12063	CallExpression	Z_TYPE_P ( * arg )		11829	0					
ANR	12064	Callee	Z_TYPE_P		11829	0					
ANR	12065	Identifier	Z_TYPE_P		11829	0					
ANR	12066	ArgumentList	* arg		11829	1					
ANR	12067	Argument	* arg		11829	0					
ANR	12068	UnaryOperationExpression	* arg		11829	0					
ANR	12069	UnaryOperator	*		11829	0					
ANR	12070	Identifier	arg		11829	1					
ANR	12071	Identifier	IS_NULL		11829	1					
ANR	12072	ExpressionStatement	"zend_make_printable_zval ( z , * arg , & use_copy )"	291:3:7513:7557	11829	2	True				
ANR	12073	CallExpression	"zend_make_printable_zval ( z , * arg , & use_copy )"		11829	0					
ANR	12074	Callee	zend_make_printable_zval		11829	0					
ANR	12075	Identifier	zend_make_printable_zval		11829	0					
ANR	12076	ArgumentList	z		11829	1					
ANR	12077	Argument	z		11829	0					
ANR	12078	Identifier	z		11829	0					
ANR	12079	Argument	* arg		11829	1					
ANR	12080	UnaryOperationExpression	* arg		11829	0					
ANR	12081	UnaryOperator	*		11829	0					
ANR	12082	Identifier	arg		11829	1					
ANR	12083	Argument	& use_copy		11829	2					
ANR	12084	UnaryOperationExpression	& use_copy		11829	0					
ANR	12085	UnaryOperator	&		11829	0					
ANR	12086	Identifier	use_copy		11829	1					
ANR	12087	IfStatement	if ( ! use_copy )		11829	3					
ANR	12088	Condition	! use_copy	292:7:7566:7574	11829	0	True				
ANR	12089	UnaryOperationExpression	! use_copy		11829	0					
ANR	12090	UnaryOperator	!		11829	0					
ANR	12091	Identifier	use_copy		11829	1					
ANR	12092	CompoundStatement		31:18:910:910	11829	1					
ANR	12093	ExpressionStatement	"ZVAL_ZVAL ( * arg , z , 1 , 1 )"	293:4:7583:7607	11829	0	True				
ANR	12094	CallExpression	"ZVAL_ZVAL ( * arg , z , 1 , 1 )"		11829	0					
ANR	12095	Callee	ZVAL_ZVAL		11829	0					
ANR	12096	Identifier	ZVAL_ZVAL		11829	0					
ANR	12097	ArgumentList	* arg		11829	1					
ANR	12098	Argument	* arg		11829	0					
ANR	12099	UnaryOperationExpression	* arg		11829	0					
ANR	12100	UnaryOperator	*		11829	0					
ANR	12101	Identifier	arg		11829	1					
ANR	12102	Argument	z		11829	1					
ANR	12103	Identifier	z		11829	0					
ANR	12104	Argument	1		11829	2					
ANR	12105	PrimaryExpression	1		11829	0					
ANR	12106	Argument	1		11829	3					
ANR	12107	PrimaryExpression	1		11829	0					
ANR	12108	ExpressionStatement	* pl = Z_STRLEN_PP ( arg )	295:3:7617:7639	11829	4	True				
ANR	12109	AssignmentExpression	* pl = Z_STRLEN_PP ( arg )		11829	0		=			
ANR	12110	UnaryOperationExpression	* pl		11829	0					
ANR	12111	UnaryOperator	*		11829	0					
ANR	12112	Identifier	pl		11829	1					
ANR	12113	CallExpression	Z_STRLEN_PP ( arg )		11829	1					
ANR	12114	Callee	Z_STRLEN_PP		11829	0					
ANR	12115	Identifier	Z_STRLEN_PP		11829	0					
ANR	12116	ArgumentList	arg		11829	1					
ANR	12117	Argument	arg		11829	0					
ANR	12118	Identifier	arg		11829	0					
ANR	12119	ExpressionStatement	* p = Z_STRVAL_PP ( arg )	296:3:7644:7665	11829	5	True				
ANR	12120	AssignmentExpression	* p = Z_STRVAL_PP ( arg )		11829	0		=			
ANR	12121	UnaryOperationExpression	* p		11829	0					
ANR	12122	UnaryOperator	*		11829	0					
ANR	12123	Identifier	p		11829	1					
ANR	12124	CallExpression	Z_STRVAL_PP ( arg )		11829	1					
ANR	12125	Callee	Z_STRVAL_PP		11829	0					
ANR	12126	Identifier	Z_STRVAL_PP		11829	0					
ANR	12127	ArgumentList	arg		11829	1					
ANR	12128	Argument	arg		11829	0					
ANR	12129	Identifier	arg		11829	0					
ANR	12130	ReturnStatement	return SUCCESS ;	297:3:7670:7684	11829	6	True				
ANR	12131	Identifier	SUCCESS		11829	0					
ANR	12132	ExpressionStatement	zval_ptr_dtor ( & z )	299:2:7692:7709	11829	19	True				
ANR	12133	CallExpression	zval_ptr_dtor ( & z )		11829	0					
ANR	12134	Callee	zval_ptr_dtor		11829	0					
ANR	12135	Identifier	zval_ptr_dtor		11829	0					
ANR	12136	ArgumentList	& z		11829	1					
ANR	12137	Argument	& z		11829	0					
ANR	12138	UnaryOperationExpression	& z		11829	0					
ANR	12139	UnaryOperator	&		11829	0					
ANR	12140	Identifier	z		11829	1					
ANR	12141	ReturnStatement	return FAILURE ;	301:1:7715:7729	11829	3	True				
ANR	12142	Identifier	FAILURE		11829	0					
ANR	12143	ReturnType	static int		11829	1					
ANR	12144	Identifier	parse_arg_object_to_string		11829	2					
ANR	12145	ParameterList	"zval * * arg , char * * p , int * pl , int type TSRMLS_DC"		11829	3					
ANR	12146	Parameter	zval * * arg	261:38:6605:6614	11829	0	True				
ANR	12147	ParameterType	zval * *		11829	0					
ANR	12148	Identifier	arg		11829	1					
ANR	12149	Parameter	char * * p	261:50:6617:6624	11829	1	True				
ANR	12150	ParameterType	char * *		11829	0					
ANR	12151	Identifier	p		11829	1					
ANR	12152	Parameter	int * pl	261:60:6627:6633	11829	2	True				
ANR	12153	ParameterType	int *		11829	0					
ANR	12154	Identifier	pl		11829	1					
ANR	12155	Parameter	int type TSRMLS_DC	261:69:6636:6653	11829	3	True				
ANR	12156	ParameterType	int type		11829	0					
ANR	12157	Identifier	TSRMLS_DC		11829	1					
ANR	12158	CFGEntryNode	ENTRY		11829		True				
ANR	12159	CFGExitNode	EXIT		11829		True				
ANR	12160	Symbol	& z		11829						
ANR	12161	Symbol	* pl		11829						
ANR	12162	Symbol	SUCCESS		11829						
ANR	12163	Symbol	cast_object		11829						
ANR	12164	Symbol	& use_copy		11829						
ANR	12165	Symbol	Z_TYPE_P		11829						
ANR	12166	Symbol	TSRMLS_DC		11829						
ANR	12167	Symbol	Z_STRLEN_PP		11829						
ANR	12168	Symbol	FAILURE		11829						
ANR	12169	Symbol	p		11829						
ANR	12170	Symbol	IS_NULL		11829						
ANR	12171	Symbol	use_copy		11829						
ANR	12172	Symbol	Z_OBJ_HANDLER_PP		11829						
ANR	12173	Symbol	obj		11829						
ANR	12174	Symbol	arg		11829						
ANR	12175	Symbol	get		11829						
ANR	12176	Symbol	Z_STRVAL_PP		11829						
ANR	12177	Symbol	* p		11829						
ANR	12178	Symbol	z		11829						
ANR	12179	Symbol	pl		11829						
ANR	12180	Symbol	IS_OBJECT		11829						
ANR	12181	Symbol	Z_OBJ_HT_PP		11829						
ANR	12182	Symbol	& std_object_handlers		11829						
ANR	12183	Symbol	* arg		11829						
ANR	12184	DeclStmt									
ANR	12185	Decl							const char	const char *	spec_walk
ANR	12186	DeclStmt									
ANR	12187	Decl							char	char	c
ANR	12188	DeclStmt									
ANR	12189	Decl							int	int	check_null
ANR	12190	DeclStmt									
ANR	12191	Decl							long	long *	p
ANR	12192	DeclStmt									
ANR	12193	Decl							zend_bool	zend_bool *	p
ANR	12194	DeclStmt									
ANR	12195	Decl							double	double	d
ANR	12196	DeclStmt									
ANR	12197	Decl							int	int	type
ANR	12198	DeclStmt									
ANR	12199	Decl							double	double *	p
ANR	12200	DeclStmt									
ANR	12201	Decl							zend_bool	zend_bool *	p
ANR	12202	DeclStmt									
ANR	12203	Decl							long	long	l
ANR	12204	DeclStmt									
ANR	12205	Decl							int	int	type
ANR	12206	DeclStmt									
ANR	12207	Decl							char	char * *	p
ANR	12208	DeclStmt									
ANR	12209	Decl							int	int *	pl
ANR	12210	DeclStmt									
ANR	12211	Decl							zend_bool	zend_bool *	p
ANR	12212	DeclStmt									
ANR	12213	Decl							zend_bool	zend_bool *	p
ANR	12214	DeclStmt									
ANR	12215	Decl							zval	zval * *	p
ANR	12216	DeclStmt									
ANR	12217	Decl							zval	zval * *	p
ANR	12218	DeclStmt									
ANR	12219	Decl							HashTable	HashTable * *	p
ANR	12220	DeclStmt									
ANR	12221	Decl							zval	zval * *	p
ANR	12222	DeclStmt									
ANR	12223	Decl							zval	zval * *	p
ANR	12224	DeclStmt									
ANR	12225	Decl							zend_class_entry	zend_class_entry *	ce
ANR	12226	DeclStmt									
ANR	12227	Decl							zend_class_entry	zend_class_entry * *	lookup
ANR	12228	Decl							zend_class_entry	zend_class_entry * *	pce
ANR	12229	DeclStmt									
ANR	12230	Decl							zend_class_entry	zend_class_entry *	ce_base
ANR	12231	DeclStmt									
ANR	12232	Decl							zend_fcall_info	zend_fcall_info *	fci
ANR	12233	DeclStmt									
ANR	12234	Decl							zend_fcall_info_cache	zend_fcall_info_cache *	fcc
ANR	12235	DeclStmt									
ANR	12236	Decl							char	char *	is_callable_error
ANR	12237	DeclStmt									
ANR	12238	Decl							zval	zval * *	p
ANR	12239	DeclStmt									
ANR	12240	Decl							zval	zval * * *	p
ANR	12241	Function	zend_parse_arg	685:0:15547:16461							
ANR	12242	FunctionDef	"zend_parse_arg (int arg_num , zval * * arg , va_list * va , const char * * spec , int quiet TSRMLS_DC)"		12241	0					
ANR	12243	CompoundStatement		686:0:15661:16461	12241	0					
ANR	12244	IdentifierDeclStatement	const char * expected_type = NULL ;	687:1:15664:15696	12241	0	True				
ANR	12245	IdentifierDecl	* expected_type = NULL		12241	0					
ANR	12246	IdentifierDeclType	const char *		12241	0					
ANR	12247	Identifier	expected_type		12241	1					
ANR	12248	AssignmentExpression	* expected_type = NULL		12241	2		=			
ANR	12249	Identifier	NULL		12241	0					
ANR	12250	Identifier	NULL		12241	1					
ANR	12251	IdentifierDeclStatement	char * error = NULL ;	688:1:15699:15717	12241	1	True				
ANR	12252	IdentifierDecl	* error = NULL		12241	0					
ANR	12253	IdentifierDeclType	char *		12241	0					
ANR	12254	Identifier	error		12241	1					
ANR	12255	AssignmentExpression	* error = NULL		12241	2		=			
ANR	12256	Identifier	NULL		12241	0					
ANR	12257	Identifier	NULL		12241	1					
ANR	12258	IdentifierDeclStatement	int severity = E_WARNING ;	689:1:15720:15744	12241	2	True				
ANR	12259	IdentifierDecl	severity = E_WARNING		12241	0					
ANR	12260	IdentifierDeclType	int		12241	0					
ANR	12261	Identifier	severity		12241	1					
ANR	12262	AssignmentExpression	severity = E_WARNING		12241	2		=			
ANR	12263	Identifier	E_WARNING		12241	0					
ANR	12264	Identifier	E_WARNING		12241	1					
ANR	12265	Statement	expected_type	691:1:15748:15760	12241	3	True				
ANR	12266	Statement	=	691:15:15762:15762	12241	4	True				
ANR	12267	Statement	zend_parse_arg_impl	691:17:15764:15782	12241	5	True				
ANR	12268	Statement	(	691:36:15783:15783	12241	6	True				
ANR	12269	Statement	arg_num	691:37:15784:15790	12241	7	True				
ANR	12270	Statement	","	691:44:15791:15791	12241	8	True				
ANR	12271	Statement	arg	691:46:15793:15795	12241	9	True				
ANR	12272	Statement	","	691:49:15796:15796	12241	10	True				
ANR	12273	Statement	va	691:51:15798:15799	12241	11	True				
ANR	12274	Statement	","	691:53:15800:15800	12241	12	True				
ANR	12275	Statement	spec	691:55:15802:15805	12241	13	True				
ANR	12276	Statement	","	691:59:15806:15806	12241	14	True				
ANR	12277	Statement	&	691:61:15808:15808	12241	15	True				
ANR	12278	Statement	error	691:62:15809:15813	12241	16	True				
ANR	12279	Statement	","	691:67:15814:15814	12241	17	True				
ANR	12280	Statement	&	691:69:15816:15816	12241	18	True				
ANR	12281	Statement	severity	691:70:15817:15824	12241	19	True				
ANR	12282	Statement	TSRMLS_CC	691:79:15826:15834	12241	20	True				
ANR	12283	Statement	)	691:88:15835:15835	12241	21	True				
ANR	12284	ExpressionStatement		691:89:15836:15836	12241	22	True				
ANR	12285	IfStatement	if ( expected_type )		12241	23					
ANR	12286	Condition	expected_type	692:5:15843:15855	12241	0	True				
ANR	12287	Identifier	expected_type		12241	0					
ANR	12288	CompoundStatement		7:20:196:196	12241	1					
ANR	12289	IfStatement	if ( ! quiet && ( * expected_type || error ) )		12241	0					
ANR	12290	Condition	! quiet && ( * expected_type || error )	693:6:15866:15900	12241	0	True				
ANR	12291	AndExpression	! quiet && ( * expected_type || error )		12241	0		&&			
ANR	12292	UnaryOperationExpression	! quiet		12241	0					
ANR	12293	UnaryOperator	!		12241	0					
ANR	12294	Identifier	quiet		12241	1					
ANR	12295	OrExpression	* expected_type || error		12241	1		||			
ANR	12296	UnaryOperationExpression	* expected_type		12241	0					
ANR	12297	UnaryOperator	*		12241	0					
ANR	12298	Identifier	expected_type		12241	1					
ANR	12299	Identifier	error		12241	1					
ANR	12300	CompoundStatement		9:3:246:263	12241	1					
ANR	12301	IdentifierDeclStatement	const char * space ;	694:3:15908:15925	12241	0	True				
ANR	12302	IdentifierDecl	* space		12241	0					
ANR	12303	IdentifierDeclType	const char *		12241	0					
ANR	12304	Identifier	space		12241	1					
ANR	12305	Statement	const	695:3:15930:15934	12241	1	True				
ANR	12306	Statement	char	695:9:15936:15939	12241	2	True				
ANR	12307	Statement	*	695:14:15941:15941	12241	3	True				
ANR	12308	Statement	class_name	695:15:15942:15951	12241	4	True				
ANR	12309	Statement	=	695:26:15953:15953	12241	5	True				
ANR	12310	Statement	get_active_class_name	695:28:15955:15975	12241	6	True				
ANR	12311	Statement	(	695:49:15976:15976	12241	7	True				
ANR	12312	Statement	&	695:50:15977:15977	12241	8	True				
ANR	12313	Statement	space	695:51:15978:15982	12241	9	True				
ANR	12314	Statement	TSRMLS_CC	695:57:15984:15992	12241	10	True				
ANR	12315	Statement	)	695:66:15993:15993	12241	11	True				
ANR	12316	ExpressionStatement		695:67:15994:15994	12241	12	True				
ANR	12317	IfStatement	if ( error )		12241	13					
ANR	12318	Condition	error	697:7:16004:16008	12241	0	True				
ANR	12319	Identifier	error		12241	0					
ANR	12320	CompoundStatement		12:14:349:349	12241	1					
ANR	12321	ExpressionStatement	"zend_error ( severity , ""%s%s%s() expects parameter %d %s"" , class_name , space , get_active_function_name ( TSRMLS_C ) , arg_num , error )"	698:4:16017:16150	12241	0	True				
ANR	12322	CallExpression	"zend_error ( severity , ""%s%s%s() expects parameter %d %s"" , class_name , space , get_active_function_name ( TSRMLS_C ) , arg_num , error )"		12241	0					
ANR	12323	Callee	zend_error		12241	0					
ANR	12324	Identifier	zend_error		12241	0					
ANR	12325	ArgumentList	severity		12241	1					
ANR	12326	Argument	severity		12241	0					
ANR	12327	Identifier	severity		12241	0					
ANR	12328	Argument	"""%s%s%s() expects parameter %d %s"""		12241	1					
ANR	12329	PrimaryExpression	"""%s%s%s() expects parameter %d %s"""		12241	0					
ANR	12330	Argument	class_name		12241	2					
ANR	12331	Identifier	class_name		12241	0					
ANR	12332	Argument	space		12241	3					
ANR	12333	Identifier	space		12241	0					
ANR	12334	Argument	get_active_function_name ( TSRMLS_C )		12241	4					
ANR	12335	CallExpression	get_active_function_name ( TSRMLS_C )		12241	0					
ANR	12336	Callee	get_active_function_name		12241	0					
ANR	12337	Identifier	get_active_function_name		12241	0					
ANR	12338	ArgumentList	TSRMLS_C		12241	1					
ANR	12339	Argument	TSRMLS_C		12241	0					
ANR	12340	Identifier	TSRMLS_C		12241	0					
ANR	12341	Argument	arg_num		12241	5					
ANR	12342	Identifier	arg_num		12241	0					
ANR	12343	Argument	error		12241	6					
ANR	12344	Identifier	error		12241	0					
ANR	12345	ExpressionStatement	efree ( error )	700:4:16156:16168	12241	1	True				
ANR	12346	CallExpression	efree ( error )		12241	0					
ANR	12347	Callee	efree		12241	0					
ANR	12348	Identifier	efree		12241	0					
ANR	12349	ArgumentList	error		12241	1					
ANR	12350	Argument	error		12241	0					
ANR	12351	Identifier	error		12241	0					
ANR	12352	ElseStatement	else		12241	0					
ANR	12353	CompoundStatement		16:10:518:518	12241	0					
ANR	12354	ExpressionStatement	"zend_error ( severity , ""%s%s%s() expects parameter %d to be %s, %s given"" , class_name , space , get_active_function_name ( TSRMLS_C ) , arg_num , expected_type , zend_zval_type_name ( * arg ) )"	702:4:16186:16376	12241	0	True				
ANR	12355	CallExpression	"zend_error ( severity , ""%s%s%s() expects parameter %d to be %s, %s given"" , class_name , space , get_active_function_name ( TSRMLS_C ) , arg_num , expected_type , zend_zval_type_name ( * arg ) )"		12241	0					
ANR	12356	Callee	zend_error		12241	0					
ANR	12357	Identifier	zend_error		12241	0					
ANR	12358	ArgumentList	severity		12241	1					
ANR	12359	Argument	severity		12241	0					
ANR	12360	Identifier	severity		12241	0					
ANR	12361	Argument	"""%s%s%s() expects parameter %d to be %s, %s given"""		12241	1					
ANR	12362	PrimaryExpression	"""%s%s%s() expects parameter %d to be %s, %s given"""		12241	0					
ANR	12363	Argument	class_name		12241	2					
ANR	12364	Identifier	class_name		12241	0					
ANR	12365	Argument	space		12241	3					
ANR	12366	Identifier	space		12241	0					
ANR	12367	Argument	get_active_function_name ( TSRMLS_C )		12241	4					
ANR	12368	CallExpression	get_active_function_name ( TSRMLS_C )		12241	0					
ANR	12369	Callee	get_active_function_name		12241	0					
ANR	12370	Identifier	get_active_function_name		12241	0					
ANR	12371	ArgumentList	TSRMLS_C		12241	1					
ANR	12372	Argument	TSRMLS_C		12241	0					
ANR	12373	Identifier	TSRMLS_C		12241	0					
ANR	12374	Argument	arg_num		12241	5					
ANR	12375	Identifier	arg_num		12241	0					
ANR	12376	Argument	expected_type		12241	6					
ANR	12377	Identifier	expected_type		12241	0					
ANR	12378	Argument	zend_zval_type_name ( * arg )		12241	7					
ANR	12379	CallExpression	zend_zval_type_name ( * arg )		12241	0					
ANR	12380	Callee	zend_zval_type_name		12241	0					
ANR	12381	Identifier	zend_zval_type_name		12241	0					
ANR	12382	ArgumentList	* arg		12241	1					
ANR	12383	Argument	* arg		12241	0					
ANR	12384	UnaryOperationExpression	* arg		12241	0					
ANR	12385	UnaryOperator	*		12241	0					
ANR	12386	Identifier	arg		12241	1					
ANR	12387	IfStatement	if ( severity != E_STRICT )		12241	1					
ANR	12388	Condition	severity != E_STRICT	707:6:16393:16412	12241	0	True				
ANR	12389	EqualityExpression	severity != E_STRICT		12241	0		!=			
ANR	12390	Identifier	severity		12241	0					
ANR	12391	Identifier	E_STRICT		12241	1					
ANR	12392	CompoundStatement		22:28:753:753	12241	1					
ANR	12393	ReturnStatement	return FAILURE ;	708:3:16420:16434	12241	0	True				
ANR	12394	Identifier	FAILURE		12241	0					
ANR	12395	ReturnStatement	return SUCCESS ;	712:1:16445:16459	12241	24	True				
ANR	12396	Identifier	SUCCESS		12241	0					
ANR	12397	ReturnType	static int		12241	1					
ANR	12398	Identifier	zend_parse_arg		12241	2					
ANR	12399	ParameterList	"int arg_num , zval * * arg , va_list * va , const char * * spec , int quiet TSRMLS_DC"		12241	3					
ANR	12400	Parameter	int arg_num	685:26:15573:15583	12241	0	True				
ANR	12401	ParameterType	int		12241	0					
ANR	12402	Identifier	arg_num		12241	1					
ANR	12403	Parameter	zval * * arg	685:39:15586:15595	12241	1	True				
ANR	12404	ParameterType	zval * *		12241	0					
ANR	12405	Identifier	arg		12241	1					
ANR	12406	Parameter	va_list * va	685:51:15598:15608	12241	2	True				
ANR	12407	ParameterType	va_list *		12241	0					
ANR	12408	Identifier	va		12241	1					
ANR	12409	Parameter	const char * * spec	685:64:15611:15627	12241	3	True				
ANR	12410	ParameterType	const char * *		12241	0					
ANR	12411	Identifier	spec		12241	1					
ANR	12412	Parameter	int quiet TSRMLS_DC	685:83:15630:15648	12241	4	True				
ANR	12413	ParameterType	int quiet		12241	0					
ANR	12414	Identifier	TSRMLS_DC		12241	1					
ANR	12415	CFGEntryNode	ENTRY		12241		True				
ANR	12416	CFGExitNode	EXIT		12241		True				
ANR	12417	Symbol	arg_num		12241						
ANR	12418	Symbol	severity		12241						
ANR	12419	Symbol	NULL		12241						
ANR	12420	Symbol	SUCCESS		12241						
ANR	12421	Symbol	expected_type		12241						
ANR	12422	Symbol	get_active_function_name		12241						
ANR	12423	Symbol	* expected_type		12241						
ANR	12424	Symbol	E_STRICT		12241						
ANR	12425	Symbol	va		12241						
ANR	12426	Symbol	error		12241						
ANR	12427	Symbol	zend_zval_type_name		12241						
ANR	12428	Symbol	TSRMLS_DC		12241						
ANR	12429	Symbol	FAILURE		12241						
ANR	12430	Symbol	spec		12241						
ANR	12431	Symbol	space		12241						
ANR	12432	Symbol	E_WARNING		12241						
ANR	12433	Symbol	TSRMLS_C		12241						
ANR	12434	Symbol	arg		12241						
ANR	12435	Symbol	quiet		12241						
ANR	12436	Symbol	class_name		12241						
ANR	12437	Symbol	* arg		12241						
ANR	12438	Function	zend_parse_parameter	716:0:16474:16763							
ANR	12439	FunctionDef	"zend_parse_parameter (int flags , int arg_num TSRMLS_DC , zval * * arg , const char * spec)"		12438	0					
ANR	12440	CompoundStatement		717:0:16577:16763	12438	0					
ANR	12441	IdentifierDeclStatement	va_list va ;	718:1:16580:16590	12438	0	True				
ANR	12442	IdentifierDecl	va		12438	0					
ANR	12443	IdentifierDeclType	va_list		12438	0					
ANR	12444	Identifier	va		12438	1					
ANR	12445	IdentifierDeclStatement	int ret ;	719:1:16593:16600	12438	1	True				
ANR	12446	IdentifierDecl	ret		12438	0					
ANR	12447	IdentifierDeclType	int		12438	0					
ANR	12448	Identifier	ret		12438	1					
ANR	12449	IdentifierDeclStatement	int quiet = flags & ZEND_PARSE_PARAMS_QUIET ;	720:1:16603:16646	12438	2	True				
ANR	12450	IdentifierDecl	quiet = flags & ZEND_PARSE_PARAMS_QUIET		12438	0					
ANR	12451	IdentifierDeclType	int		12438	0					
ANR	12452	Identifier	quiet		12438	1					
ANR	12453	AssignmentExpression	quiet = flags & ZEND_PARSE_PARAMS_QUIET		12438	2		=			
ANR	12454	Identifier	quiet		12438	0					
ANR	12455	BitAndExpression	flags & ZEND_PARSE_PARAMS_QUIET		12438	1		&			
ANR	12456	Identifier	flags		12438	0					
ANR	12457	Identifier	ZEND_PARSE_PARAMS_QUIET		12438	1					
ANR	12458	ExpressionStatement	"va_start ( va , spec )"	722:1:16650:16668	12438	3	True				
ANR	12459	CallExpression	"va_start ( va , spec )"		12438	0					
ANR	12460	Callee	va_start		12438	0					
ANR	12461	Identifier	va_start		12438	0					
ANR	12462	ArgumentList	va		12438	1					
ANR	12463	Argument	va		12438	0					
ANR	12464	Identifier	va		12438	0					
ANR	12465	Argument	spec		12438	1					
ANR	12466	Identifier	spec		12438	0					
ANR	12467	Statement	ret	723:1:16671:16673	12438	4	True				
ANR	12468	Statement	=	723:5:16675:16675	12438	5	True				
ANR	12469	Statement	zend_parse_arg	723:7:16677:16690	12438	6	True				
ANR	12470	Statement	(	723:21:16691:16691	12438	7	True				
ANR	12471	Statement	arg_num	723:22:16692:16698	12438	8	True				
ANR	12472	Statement	","	723:29:16699:16699	12438	9	True				
ANR	12473	Statement	arg	723:31:16701:16703	12438	10	True				
ANR	12474	Statement	","	723:34:16704:16704	12438	11	True				
ANR	12475	Statement	&	723:36:16706:16706	12438	12	True				
ANR	12476	Statement	va	723:37:16707:16708	12438	13	True				
ANR	12477	Statement	","	723:39:16709:16709	12438	14	True				
ANR	12478	Statement	&	723:41:16711:16711	12438	15	True				
ANR	12479	Statement	spec	723:42:16712:16715	12438	16	True				
ANR	12480	Statement	","	723:46:16716:16716	12438	17	True				
ANR	12481	Statement	quiet	723:48:16718:16722	12438	18	True				
ANR	12482	Statement	TSRMLS_CC	723:54:16724:16732	12438	19	True				
ANR	12483	Statement	)	723:63:16733:16733	12438	20	True				
ANR	12484	ExpressionStatement		723:64:16734:16734	12438	21	True				
ANR	12485	ExpressionStatement	va_end ( va )	724:1:16737:16747	12438	22	True				
ANR	12486	CallExpression	va_end ( va )		12438	0					
ANR	12487	Callee	va_end		12438	0					
ANR	12488	Identifier	va_end		12438	0					
ANR	12489	ArgumentList	va		12438	1					
ANR	12490	Argument	va		12438	0					
ANR	12491	Identifier	va		12438	0					
ANR	12492	ReturnStatement	return ret ;	726:1:16751:16761	12438	23	True				
ANR	12493	Identifier	ret		12438	0					
ANR	12494	ReturnType	ZEND_API int		12438	1					
ANR	12495	Identifier	zend_parse_parameter		12438	2					
ANR	12496	ParameterList	"int flags , int arg_num TSRMLS_DC , zval * * arg , const char * spec"		12438	3					
ANR	12497	Parameter	int flags	716:34:16508:16516	12438	0	True				
ANR	12498	ParameterType	int		12438	0					
ANR	12499	Identifier	flags		12438	1					
ANR	12500	Parameter	int arg_num TSRMLS_DC	716:45:16519:16539	12438	1	True				
ANR	12501	ParameterType	int arg_num		12438	0					
ANR	12502	Identifier	TSRMLS_DC		12438	1					
ANR	12503	Parameter	zval * * arg	716:68:16542:16551	12438	2	True				
ANR	12504	ParameterType	zval * *		12438	0					
ANR	12505	Identifier	arg		12438	1					
ANR	12506	Parameter	const char * spec	716:80:16554:16569	12438	3	True				
ANR	12507	ParameterType	const char *		12438	0					
ANR	12508	Identifier	spec		12438	1					
ANR	12509	CFGEntryNode	ENTRY		12438		True				
ANR	12510	CFGExitNode	EXIT		12438		True				
ANR	12511	Symbol	ret		12438						
ANR	12512	Symbol	arg		12438						
ANR	12513	Symbol	flags		12438						
ANR	12514	Symbol	ZEND_PARSE_PARAMS_QUIET		12438						
ANR	12515	Symbol	va		12438						
ANR	12516	Symbol	quiet		12438						
ANR	12517	Symbol	TSRMLS_DC		12438						
ANR	12518	Symbol	spec		12438						
ANR	12519	Function	zend_parse_va_args	729:0:16766:21083							
ANR	12520	FunctionDef	"zend_parse_va_args (int num_args , const char * type_spec , va_list * va , int flags TSRMLS_DC)"		12519	0					
ANR	12521	CompoundStatement		730:0:16877:21083	12519	0					
ANR	12522	IdentifierDeclStatement	const char * spec_walk ;	731:1:16880:16902	12519	0	True				
ANR	12523	IdentifierDecl	* spec_walk		12519	0					
ANR	12524	IdentifierDeclType	const char *		12519	0					
ANR	12525	Identifier	spec_walk		12519	1					
ANR	12526	IdentifierDeclStatement	"int c , i ;"	732:1:16905:16913	12519	1	True				
ANR	12527	IdentifierDecl	c		12519	0					
ANR	12528	IdentifierDeclType	int		12519	0					
ANR	12529	Identifier	c		12519	1					
ANR	12530	IdentifierDecl	i		12519	1					
ANR	12531	IdentifierDeclType	int		12519	0					
ANR	12532	Identifier	i		12519	1					
ANR	12533	IdentifierDeclStatement	int min_num_args = - 1 ;	733:1:16916:16937	12519	2	True				
ANR	12534	IdentifierDecl	min_num_args = - 1		12519	0					
ANR	12535	IdentifierDeclType	int		12519	0					
ANR	12536	Identifier	min_num_args		12519	1					
ANR	12537	AssignmentExpression	min_num_args = - 1		12519	2		=			
ANR	12538	Identifier	min_num_args		12519	0					
ANR	12539	UnaryOperationExpression	- 1		12519	1					
ANR	12540	UnaryOperator	-		12519	0					
ANR	12541	PrimaryExpression	1		12519	1					
ANR	12542	IdentifierDeclStatement	int max_num_args = 0 ;	734:1:16940:16960	12519	3	True				
ANR	12543	IdentifierDecl	max_num_args = 0		12519	0					
ANR	12544	IdentifierDeclType	int		12519	0					
ANR	12545	Identifier	max_num_args		12519	1					
ANR	12546	AssignmentExpression	max_num_args = 0		12519	2		=			
ANR	12547	Identifier	max_num_args		12519	0					
ANR	12548	PrimaryExpression	0		12519	1					
ANR	12549	IdentifierDeclStatement	int post_varargs = 0 ;	735:1:16963:16983	12519	4	True				
ANR	12550	IdentifierDecl	post_varargs = 0		12519	0					
ANR	12551	IdentifierDeclType	int		12519	0					
ANR	12552	Identifier	post_varargs		12519	1					
ANR	12553	AssignmentExpression	post_varargs = 0		12519	2		=			
ANR	12554	Identifier	post_varargs		12519	0					
ANR	12555	PrimaryExpression	0		12519	1					
ANR	12556	IdentifierDeclStatement	zval * * arg ;	736:1:16986:16996	12519	5	True				
ANR	12557	IdentifierDecl	* * arg		12519	0					
ANR	12558	IdentifierDeclType	zval * *		12519	0					
ANR	12559	Identifier	arg		12519	1					
ANR	12560	IdentifierDeclStatement	int arg_count ;	737:1:16999:17012	12519	6	True				
ANR	12561	IdentifierDecl	arg_count		12519	0					
ANR	12562	IdentifierDeclType	int		12519	0					
ANR	12563	Identifier	arg_count		12519	1					
ANR	12564	IdentifierDeclStatement	int quiet = flags & ZEND_PARSE_PARAMS_QUIET ;	738:1:17015:17058	12519	7	True				
ANR	12565	IdentifierDecl	quiet = flags & ZEND_PARSE_PARAMS_QUIET		12519	0					
ANR	12566	IdentifierDeclType	int		12519	0					
ANR	12567	Identifier	quiet		12519	1					
ANR	12568	AssignmentExpression	quiet = flags & ZEND_PARSE_PARAMS_QUIET		12519	2		=			
ANR	12569	Identifier	quiet		12519	0					
ANR	12570	BitAndExpression	flags & ZEND_PARSE_PARAMS_QUIET		12519	1		&			
ANR	12571	Identifier	flags		12519	0					
ANR	12572	Identifier	ZEND_PARSE_PARAMS_QUIET		12519	1					
ANR	12573	IdentifierDeclStatement	zend_bool have_varargs = 0 ;	739:1:17061:17087	12519	8	True				
ANR	12574	IdentifierDecl	have_varargs = 0		12519	0					
ANR	12575	IdentifierDeclType	zend_bool		12519	0					
ANR	12576	Identifier	have_varargs		12519	1					
ANR	12577	AssignmentExpression	have_varargs = 0		12519	2		=			
ANR	12578	Identifier	have_varargs		12519	0					
ANR	12579	PrimaryExpression	0		12519	1					
ANR	12580	IdentifierDeclStatement	zval * * * * varargs = NULL ;	740:1:17090:17113	12519	9	True				
ANR	12581	IdentifierDecl	* * * * varargs = NULL		12519	0					
ANR	12582	IdentifierDeclType	zval * * * *		12519	0					
ANR	12583	Identifier	varargs		12519	1					
ANR	12584	AssignmentExpression	* * * * varargs = NULL		12519	2		=			
ANR	12585	Identifier	NULL		12519	0					
ANR	12586	Identifier	NULL		12519	1					
ANR	12587	IdentifierDeclStatement	int * n_varargs = NULL ;	741:1:17116:17137	12519	10	True				
ANR	12588	IdentifierDecl	* n_varargs = NULL		12519	0					
ANR	12589	IdentifierDeclType	int *		12519	0					
ANR	12590	Identifier	n_varargs		12519	1					
ANR	12591	AssignmentExpression	* n_varargs = NULL		12519	2		=			
ANR	12592	Identifier	NULL		12519	0					
ANR	12593	Identifier	NULL		12519	1					
ANR	12594	ForStatement	for ( spec_walk = type_spec ; * spec_walk ; spec_walk ++ )		12519	11					
ANR	12595	ForInit	spec_walk = type_spec ;	743:6:17146:17167	12519	0	True				
ANR	12596	AssignmentExpression	spec_walk = type_spec		12519	0		=			
ANR	12597	Identifier	spec_walk		12519	0					
ANR	12598	Identifier	type_spec		12519	1					
ANR	12599	Condition	* spec_walk	743:29:17169:17178	12519	1	True				
ANR	12600	UnaryOperationExpression	* spec_walk		12519	0					
ANR	12601	UnaryOperator	*		12519	0					
ANR	12602	Identifier	spec_walk		12519	1					
ANR	12603	PostIncDecOperationExpression	spec_walk ++	743:41:17181:17191	12519	2	True				
ANR	12604	Identifier	spec_walk		12519	0					
ANR	12605	IncDec	++		12519	1					
ANR	12606	CompoundStatement		14:54:316:316	12519	3					
ANR	12607	ExpressionStatement	c = * spec_walk	744:2:17198:17212	12519	0	True				
ANR	12608	AssignmentExpression	c = * spec_walk		12519	0		=			
ANR	12609	Identifier	c		12519	0					
ANR	12610	UnaryOperationExpression	* spec_walk		12519	1					
ANR	12611	UnaryOperator	*		12519	0					
ANR	12612	Identifier	spec_walk		12519	1					
ANR	12613	SwitchStatement	switch ( c )		12519	1					
ANR	12614	Condition	c	745:10:17224:17224	12519	0	True				
ANR	12615	Identifier	c		12519	0					
ANR	12616	CompoundStatement		16:13:349:349	12519	1					
ANR	12617	Label	case 'l' :	746:3:17232:17240	12519	0	True				
ANR	12618	Label	case 'd' :	746:13:17242:17250	12519	1	True				
ANR	12619	Label	case 's' :	747:3:17255:17263	12519	2	True				
ANR	12620	Label	case 'b' :	747:13:17265:17273	12519	3	True				
ANR	12621	Label	case 'r' :	748:3:17278:17286	12519	4	True				
ANR	12622	Label	case 'a' :	748:13:17288:17296	12519	5	True				
ANR	12623	Label	case 'o' :	749:3:17301:17309	12519	6	True				
ANR	12624	Label	case 'O' :	749:13:17311:17319	12519	7	True				
ANR	12625	Label	case 'z' :	750:3:17324:17332	12519	8	True				
ANR	12626	Label	case 'Z' :	750:13:17334:17342	12519	9	True				
ANR	12627	Label	case 'C' :	751:3:17347:17355	12519	10	True				
ANR	12628	Label	case 'h' :	751:13:17357:17365	12519	11	True				
ANR	12629	Label	case 'f' :	752:3:17370:17378	12519	12	True				
ANR	12630	Label	case 'A' :	752:13:17380:17388	12519	13	True				
ANR	12631	Label	case 'H' :	753:3:17393:17401	12519	14	True				
ANR	12632	Label	case 'p' :	753:13:17403:17411	12519	15	True				
ANR	12633	ExpressionStatement	max_num_args ++	754:4:17417:17431	12519	16	True				
ANR	12634	PostIncDecOperationExpression	max_num_args ++		12519	0					
ANR	12635	Identifier	max_num_args		12519	0					
ANR	12636	IncDec	++		12519	1					
ANR	12637	BreakStatement	break ;	755:4:17437:17442	12519	17	True				
ANR	12638	Label	case '|' :	757:3:17448:17456	12519	18	True				
ANR	12639	ExpressionStatement	min_num_args = max_num_args	758:4:17462:17489	12519	19	True				
ANR	12640	AssignmentExpression	min_num_args = max_num_args		12519	0		=			
ANR	12641	Identifier	min_num_args		12519	0					
ANR	12642	Identifier	max_num_args		12519	1					
ANR	12643	BreakStatement	break ;	759:4:17495:17500	12519	20	True				
ANR	12644	Label	case '/' :	761:3:17506:17514	12519	21	True				
ANR	12645	Label	case '!' :	762:3:17519:17527	12519	22	True				
ANR	12646	BreakStatement	break ;	764:4:17548:17553	12519	23	True				
ANR	12647	Label	case '*' :	766:3:17559:17567	12519	24	True				
ANR	12648	Label	case '+' :	767:3:17572:17580	12519	25	True				
ANR	12649	IfStatement	if ( have_varargs )		12519	26					
ANR	12650	Condition	have_varargs	768:8:17590:17601	12519	0	True				
ANR	12651	Identifier	have_varargs		12519	0					
ANR	12652	CompoundStatement		39:22:726:726	12519	1					
ANR	12653	IfStatement	if ( ! quiet )		12519	0					
ANR	12654	Condition	! quiet	769:9:17615:17620	12519	0	True				
ANR	12655	UnaryOperationExpression	! quiet		12519	0					
ANR	12656	UnaryOperator	!		12519	0					
ANR	12657	Identifier	quiet		12519	1					
ANR	12658	CompoundStatement		42:6:843:940	12519	1					
ANR	12659	IdentifierDeclStatement	zend_function * active_function = EG ( current_execute_data ) -> function_state . function ;	770:6:17631:17713	12519	0	True				
ANR	12660	IdentifierDecl	* active_function = EG ( current_execute_data ) -> function_state . function		12519	0					
ANR	12661	IdentifierDeclType	zend_function *		12519	0					
ANR	12662	Identifier	active_function		12519	1					
ANR	12663	AssignmentExpression	* active_function = EG ( current_execute_data ) -> function_state . function		12519	2		=			
ANR	12664	Identifier	active_function		12519	0					
ANR	12665	MemberAccess	EG ( current_execute_data ) -> function_state . function		12519	1					
ANR	12666	PtrMemberAccess	EG ( current_execute_data ) -> function_state		12519	0					
ANR	12667	CallExpression	EG ( current_execute_data )		12519	0					
ANR	12668	Callee	EG		12519	0					
ANR	12669	Identifier	EG		12519	0					
ANR	12670	ArgumentList	current_execute_data		12519	1					
ANR	12671	Argument	current_execute_data		12519	0					
ANR	12672	Identifier	current_execute_data		12519	0					
ANR	12673	Identifier	function_state		12519	1					
ANR	12674	Identifier	function		12519	1					
ANR	12675	IdentifierDeclStatement	"const char * class_name = active_function -> common . scope ? active_function -> common . scope -> name : """" ;"	771:6:17721:17818	12519	1	True				
ANR	12676	IdentifierDecl	"* class_name = active_function -> common . scope ? active_function -> common . scope -> name : """""		12519	0					
ANR	12677	IdentifierDeclType	const char *		12519	0					
ANR	12678	Identifier	class_name		12519	1					
ANR	12679	AssignmentExpression	"* class_name = active_function -> common . scope ? active_function -> common . scope -> name : """""		12519	2		=			
ANR	12680	Identifier	class_name		12519	0					
ANR	12681	ConditionalExpression	"active_function -> common . scope ? active_function -> common . scope -> name : """""		12519	1					
ANR	12682	Condition	active_function -> common . scope		12519	0					
ANR	12683	MemberAccess	active_function -> common . scope		12519	0					
ANR	12684	PtrMemberAccess	active_function -> common		12519	0					
ANR	12685	Identifier	active_function		12519	0					
ANR	12686	Identifier	common		12519	1					
ANR	12687	Identifier	scope		12519	1					
ANR	12688	PtrMemberAccess	active_function -> common . scope -> name		12519	1					
ANR	12689	MemberAccess	active_function -> common . scope		12519	0					
ANR	12690	PtrMemberAccess	active_function -> common		12519	0					
ANR	12691	Identifier	active_function		12519	0					
ANR	12692	Identifier	common		12519	1					
ANR	12693	Identifier	scope		12519	1					
ANR	12694	Identifier	name		12519	1					
ANR	12695	PrimaryExpression	""""""		12519	2					
ANR	12696	ExpressionStatement	"zend_error ( E_WARNING , ""%s%s%s(): only one varargs specifier (* or +) is permitted"" , class_name , class_name [ 0 ] ? ""::"" : """" , active_function -> common . function_name )"	772:6:17826:18011	12519	2	True				
ANR	12697	CallExpression	"zend_error ( E_WARNING , ""%s%s%s(): only one varargs specifier (* or +) is permitted"" , class_name , class_name [ 0 ] ? ""::"" : """" , active_function -> common . function_name )"		12519	0					
ANR	12698	Callee	zend_error		12519	0					
ANR	12699	Identifier	zend_error		12519	0					
ANR	12700	ArgumentList	E_WARNING		12519	1					
ANR	12701	Argument	E_WARNING		12519	0					
ANR	12702	Identifier	E_WARNING		12519	0					
ANR	12703	Argument	"""%s%s%s(): only one varargs specifier (* or +) is permitted"""		12519	1					
ANR	12704	PrimaryExpression	"""%s%s%s(): only one varargs specifier (* or +) is permitted"""		12519	0					
ANR	12705	Argument	class_name		12519	2					
ANR	12706	Identifier	class_name		12519	0					
ANR	12707	Argument	"class_name [ 0 ] ? ""::"" : """""		12519	3					
ANR	12708	ConditionalExpression	"class_name [ 0 ] ? ""::"" : """""		12519	0					
ANR	12709	Condition	class_name [ 0 ]		12519	0					
ANR	12710	ArrayIndexing	class_name [ 0 ]		12519	0					
ANR	12711	Identifier	class_name		12519	0					
ANR	12712	PrimaryExpression	0		12519	1					
ANR	12713	PrimaryExpression	"""::"""		12519	1					
ANR	12714	PrimaryExpression	""""""		12519	2					
ANR	12715	Argument	active_function -> common . function_name		12519	4					
ANR	12716	MemberAccess	active_function -> common . function_name		12519	0					
ANR	12717	PtrMemberAccess	active_function -> common		12519	0					
ANR	12718	Identifier	active_function		12519	0					
ANR	12719	Identifier	common		12519	1					
ANR	12720	Identifier	function_name		12519	1					
ANR	12721	ReturnStatement	return FAILURE ;	777:5:18025:18039	12519	1	True				
ANR	12722	Identifier	FAILURE		12519	0					
ANR	12723	ExpressionStatement	have_varargs = 1	779:4:18051:18067	12519	27	True				
ANR	12724	AssignmentExpression	have_varargs = 1		12519	0		=			
ANR	12725	Identifier	have_varargs		12519	0					
ANR	12726	PrimaryExpression	1		12519	1					
ANR	12727	IfStatement	if ( c == '+' )		12519	28					
ANR	12728	Condition	c == '+'	781:8:18131:18138	12519	0	True				
ANR	12729	EqualityExpression	c == '+'		12519	0		==			
ANR	12730	Identifier	c		12519	0					
ANR	12731	PrimaryExpression	'+'		12519	1					
ANR	12732	CompoundStatement		52:18:1263:1263	12519	1					
ANR	12733	ExpressionStatement	max_num_args ++	782:5:18148:18162	12519	0	True				
ANR	12734	PostIncDecOperationExpression	max_num_args ++		12519	0					
ANR	12735	Identifier	max_num_args		12519	0					
ANR	12736	IncDec	++		12519	1					
ANR	12737	ExpressionStatement	post_varargs = max_num_args	785:4:18214:18241	12519	29	True				
ANR	12738	AssignmentExpression	post_varargs = max_num_args		12519	0		=			
ANR	12739	Identifier	post_varargs		12519	0					
ANR	12740	Identifier	max_num_args		12519	1					
ANR	12741	BreakStatement	break ;	786:4:18247:18252	12519	30	True				
ANR	12742	Label	default :	788:3:18258:18265	12519	31	True				
ANR	12743	Identifier	default		12519	0					
ANR	12744	IfStatement	if ( ! quiet )		12519	32					
ANR	12745	Condition	! quiet	789:8:18275:18280	12519	0	True				
ANR	12746	UnaryOperationExpression	! quiet		12519	0					
ANR	12747	UnaryOperator	!		12519	0					
ANR	12748	Identifier	quiet		12519	1					
ANR	12749	CompoundStatement		62:5:1501:1598	12519	1					
ANR	12750	IdentifierDeclStatement	zend_function * active_function = EG ( current_execute_data ) -> function_state . function ;	790:5:18290:18372	12519	0	True				
ANR	12751	IdentifierDecl	* active_function = EG ( current_execute_data ) -> function_state . function		12519	0					
ANR	12752	IdentifierDeclType	zend_function *		12519	0					
ANR	12753	Identifier	active_function		12519	1					
ANR	12754	AssignmentExpression	* active_function = EG ( current_execute_data ) -> function_state . function		12519	2		=			
ANR	12755	Identifier	active_function		12519	0					
ANR	12756	MemberAccess	EG ( current_execute_data ) -> function_state . function		12519	1					
ANR	12757	PtrMemberAccess	EG ( current_execute_data ) -> function_state		12519	0					
ANR	12758	CallExpression	EG ( current_execute_data )		12519	0					
ANR	12759	Callee	EG		12519	0					
ANR	12760	Identifier	EG		12519	0					
ANR	12761	ArgumentList	current_execute_data		12519	1					
ANR	12762	Argument	current_execute_data		12519	0					
ANR	12763	Identifier	current_execute_data		12519	0					
ANR	12764	Identifier	function_state		12519	1					
ANR	12765	Identifier	function		12519	1					
ANR	12766	IdentifierDeclStatement	"const char * class_name = active_function -> common . scope ? active_function -> common . scope -> name : """" ;"	791:5:18379:18476	12519	1	True				
ANR	12767	IdentifierDecl	"* class_name = active_function -> common . scope ? active_function -> common . scope -> name : """""		12519	0					
ANR	12768	IdentifierDeclType	const char *		12519	0					
ANR	12769	Identifier	class_name		12519	1					
ANR	12770	AssignmentExpression	"* class_name = active_function -> common . scope ? active_function -> common . scope -> name : """""		12519	2		=			
ANR	12771	Identifier	class_name		12519	0					
ANR	12772	ConditionalExpression	"active_function -> common . scope ? active_function -> common . scope -> name : """""		12519	1					
ANR	12773	Condition	active_function -> common . scope		12519	0					
ANR	12774	MemberAccess	active_function -> common . scope		12519	0					
ANR	12775	PtrMemberAccess	active_function -> common		12519	0					
ANR	12776	Identifier	active_function		12519	0					
ANR	12777	Identifier	common		12519	1					
ANR	12778	Identifier	scope		12519	1					
ANR	12779	PtrMemberAccess	active_function -> common . scope -> name		12519	1					
ANR	12780	MemberAccess	active_function -> common . scope		12519	0					
ANR	12781	PtrMemberAccess	active_function -> common		12519	0					
ANR	12782	Identifier	active_function		12519	0					
ANR	12783	Identifier	common		12519	1					
ANR	12784	Identifier	scope		12519	1					
ANR	12785	Identifier	name		12519	1					
ANR	12786	PrimaryExpression	""""""		12519	2					
ANR	12787	ExpressionStatement	"zend_error ( E_WARNING , ""%s%s%s(): bad type specifier while parsing parameters"" , class_name , class_name [ 0 ] ? ""::"" : """" , active_function -> common . function_name )"	792:5:18483:18660	12519	2	True				
ANR	12788	CallExpression	"zend_error ( E_WARNING , ""%s%s%s(): bad type specifier while parsing parameters"" , class_name , class_name [ 0 ] ? ""::"" : """" , active_function -> common . function_name )"		12519	0					
ANR	12789	Callee	zend_error		12519	0					
ANR	12790	Identifier	zend_error		12519	0					
ANR	12791	ArgumentList	E_WARNING		12519	1					
ANR	12792	Argument	E_WARNING		12519	0					
ANR	12793	Identifier	E_WARNING		12519	0					
ANR	12794	Argument	"""%s%s%s(): bad type specifier while parsing parameters"""		12519	1					
ANR	12795	PrimaryExpression	"""%s%s%s(): bad type specifier while parsing parameters"""		12519	0					
ANR	12796	Argument	class_name		12519	2					
ANR	12797	Identifier	class_name		12519	0					
ANR	12798	Argument	"class_name [ 0 ] ? ""::"" : """""		12519	3					
ANR	12799	ConditionalExpression	"class_name [ 0 ] ? ""::"" : """""		12519	0					
ANR	12800	Condition	class_name [ 0 ]		12519	0					
ANR	12801	ArrayIndexing	class_name [ 0 ]		12519	0					
ANR	12802	Identifier	class_name		12519	0					
ANR	12803	PrimaryExpression	0		12519	1					
ANR	12804	PrimaryExpression	"""::"""		12519	1					
ANR	12805	PrimaryExpression	""""""		12519	2					
ANR	12806	Argument	active_function -> common . function_name		12519	4					
ANR	12807	MemberAccess	active_function -> common . function_name		12519	0					
ANR	12808	PtrMemberAccess	active_function -> common		12519	0					
ANR	12809	Identifier	active_function		12519	0					
ANR	12810	Identifier	common		12519	1					
ANR	12811	Identifier	function_name		12519	1					
ANR	12812	ReturnStatement	return FAILURE ;	797:4:18672:18686	12519	33	True				
ANR	12813	Identifier	FAILURE		12519	0					
ANR	12814	IfStatement	if ( min_num_args < 0 )		12519	12					
ANR	12815	Condition	min_num_args < 0	801:5:18701:18716	12519	0	True				
ANR	12816	RelationalExpression	min_num_args < 0		12519	0		<			
ANR	12817	Identifier	min_num_args		12519	0					
ANR	12818	PrimaryExpression	0		12519	1					
ANR	12819	CompoundStatement		72:23:1841:1841	12519	1					
ANR	12820	ExpressionStatement	min_num_args = max_num_args	802:2:18723:18750	12519	0	True				
ANR	12821	AssignmentExpression	min_num_args = max_num_args		12519	0		=			
ANR	12822	Identifier	min_num_args		12519	0					
ANR	12823	Identifier	max_num_args		12519	1					
ANR	12824	IfStatement	if ( have_varargs )		12519	13					
ANR	12825	Condition	have_varargs	805:5:18761:18772	12519	0	True				
ANR	12826	Identifier	have_varargs		12519	0					
ANR	12827	CompoundStatement		76:19:1897:1897	12519	1					
ANR	12828	ExpressionStatement	post_varargs = max_num_args - post_varargs	807:2:18857:18899	12519	0	True				
ANR	12829	AssignmentExpression	post_varargs = max_num_args - post_varargs		12519	0		=			
ANR	12830	Identifier	post_varargs		12519	0					
ANR	12831	AdditiveExpression	max_num_args - post_varargs		12519	1		-			
ANR	12832	Identifier	max_num_args		12519	0					
ANR	12833	Identifier	post_varargs		12519	1					
ANR	12834	ExpressionStatement	max_num_args = - 1	808:2:18903:18920	12519	1	True				
ANR	12835	AssignmentExpression	max_num_args = - 1		12519	0		=			
ANR	12836	Identifier	max_num_args		12519	0					
ANR	12837	UnaryOperationExpression	- 1		12519	1					
ANR	12838	UnaryOperator	-		12519	0					
ANR	12839	PrimaryExpression	1		12519	1					
ANR	12840	IfStatement	if ( num_args < min_num_args || ( num_args > max_num_args && max_num_args > 0 ) )		12519	14					
ANR	12841	Condition	num_args < min_num_args || ( num_args > max_num_args && max_num_args > 0 )	811:5:18931:19002	12519	0	True				
ANR	12842	OrExpression	num_args < min_num_args || ( num_args > max_num_args && max_num_args > 0 )		12519	0		||			
ANR	12843	RelationalExpression	num_args < min_num_args		12519	0		<			
ANR	12844	Identifier	num_args		12519	0					
ANR	12845	Identifier	min_num_args		12519	1					
ANR	12846	AndExpression	num_args > max_num_args && max_num_args > 0		12519	1		&&			
ANR	12847	RelationalExpression	num_args > max_num_args		12519	0		>			
ANR	12848	Identifier	num_args		12519	0					
ANR	12849	Identifier	max_num_args		12519	1					
ANR	12850	RelationalExpression	max_num_args > 0		12519	1		>			
ANR	12851	Identifier	max_num_args		12519	0					
ANR	12852	PrimaryExpression	0		12519	1					
ANR	12853	CompoundStatement		82:79:2127:2127	12519	1					
ANR	12854	IfStatement	if ( ! quiet )		12519	0					
ANR	12855	Condition	! quiet	812:6:19013:19018	12519	0	True				
ANR	12856	UnaryOperationExpression	! quiet		12519	0					
ANR	12857	UnaryOperator	!		12519	0					
ANR	12858	Identifier	quiet		12519	1					
ANR	12859	CompoundStatement		85:3:2235:2332	12519	1					
ANR	12860	IdentifierDeclStatement	zend_function * active_function = EG ( current_execute_data ) -> function_state . function ;	813:3:19026:19108	12519	0	True				
ANR	12861	IdentifierDecl	* active_function = EG ( current_execute_data ) -> function_state . function		12519	0					
ANR	12862	IdentifierDeclType	zend_function *		12519	0					
ANR	12863	Identifier	active_function		12519	1					
ANR	12864	AssignmentExpression	* active_function = EG ( current_execute_data ) -> function_state . function		12519	2		=			
ANR	12865	Identifier	active_function		12519	0					
ANR	12866	MemberAccess	EG ( current_execute_data ) -> function_state . function		12519	1					
ANR	12867	PtrMemberAccess	EG ( current_execute_data ) -> function_state		12519	0					
ANR	12868	CallExpression	EG ( current_execute_data )		12519	0					
ANR	12869	Callee	EG		12519	0					
ANR	12870	Identifier	EG		12519	0					
ANR	12871	ArgumentList	current_execute_data		12519	1					
ANR	12872	Argument	current_execute_data		12519	0					
ANR	12873	Identifier	current_execute_data		12519	0					
ANR	12874	Identifier	function_state		12519	1					
ANR	12875	Identifier	function		12519	1					
ANR	12876	IdentifierDeclStatement	"const char * class_name = active_function -> common . scope ? active_function -> common . scope -> name : """" ;"	814:3:19113:19210	12519	1	True				
ANR	12877	IdentifierDecl	"* class_name = active_function -> common . scope ? active_function -> common . scope -> name : """""		12519	0					
ANR	12878	IdentifierDeclType	const char *		12519	0					
ANR	12879	Identifier	class_name		12519	1					
ANR	12880	AssignmentExpression	"* class_name = active_function -> common . scope ? active_function -> common . scope -> name : """""		12519	2		=			
ANR	12881	Identifier	class_name		12519	0					
ANR	12882	ConditionalExpression	"active_function -> common . scope ? active_function -> common . scope -> name : """""		12519	1					
ANR	12883	Condition	active_function -> common . scope		12519	0					
ANR	12884	MemberAccess	active_function -> common . scope		12519	0					
ANR	12885	PtrMemberAccess	active_function -> common		12519	0					
ANR	12886	Identifier	active_function		12519	0					
ANR	12887	Identifier	common		12519	1					
ANR	12888	Identifier	scope		12519	1					
ANR	12889	PtrMemberAccess	active_function -> common . scope -> name		12519	1					
ANR	12890	MemberAccess	active_function -> common . scope		12519	0					
ANR	12891	PtrMemberAccess	active_function -> common		12519	0					
ANR	12892	Identifier	active_function		12519	0					
ANR	12893	Identifier	common		12519	1					
ANR	12894	Identifier	scope		12519	1					
ANR	12895	Identifier	name		12519	1					
ANR	12896	PrimaryExpression	""""""		12519	2					
ANR	12897	ExpressionStatement	"zend_error ( E_WARNING , ""%s%s%s() expects %s %d parameter%s, %d given"" , class_name , class_name [ 0 ] ? ""::"" : """" , active_function -> common . function_name , min_num_args == max_num_args ? ""exactly"" : num_args < min_num_args ? ""at least"" : ""at most"" , num_args < min_num_args ? min_num_args : max_num_args , ( num_args < min_num_args ? min_num_args : max_num_args ) == 1 ? """" : ""s"" , num_args )"	815:3:19215:19628	12519	2	True				
ANR	12898	CallExpression	"zend_error ( E_WARNING , ""%s%s%s() expects %s %d parameter%s, %d given"" , class_name , class_name [ 0 ] ? ""::"" : """" , active_function -> common . function_name , min_num_args == max_num_args ? ""exactly"" : num_args < min_num_args ? ""at least"" : ""at most"" , num_args < min_num_args ? min_num_args : max_num_args , ( num_args < min_num_args ? min_num_args : max_num_args ) == 1 ? """" : ""s"" , num_args )"		12519	0					
ANR	12899	Callee	zend_error		12519	0					
ANR	12900	Identifier	zend_error		12519	0					
ANR	12901	ArgumentList	E_WARNING		12519	1					
ANR	12902	Argument	E_WARNING		12519	0					
ANR	12903	Identifier	E_WARNING		12519	0					
ANR	12904	Argument	"""%s%s%s() expects %s %d parameter%s, %d given"""		12519	1					
ANR	12905	PrimaryExpression	"""%s%s%s() expects %s %d parameter%s, %d given"""		12519	0					
ANR	12906	Argument	class_name		12519	2					
ANR	12907	Identifier	class_name		12519	0					
ANR	12908	Argument	"class_name [ 0 ] ? ""::"" : """""		12519	3					
ANR	12909	ConditionalExpression	"class_name [ 0 ] ? ""::"" : """""		12519	0					
ANR	12910	Condition	class_name [ 0 ]		12519	0					
ANR	12911	ArrayIndexing	class_name [ 0 ]		12519	0					
ANR	12912	Identifier	class_name		12519	0					
ANR	12913	PrimaryExpression	0		12519	1					
ANR	12914	PrimaryExpression	"""::"""		12519	1					
ANR	12915	PrimaryExpression	""""""		12519	2					
ANR	12916	Argument	active_function -> common . function_name		12519	4					
ANR	12917	MemberAccess	active_function -> common . function_name		12519	0					
ANR	12918	PtrMemberAccess	active_function -> common		12519	0					
ANR	12919	Identifier	active_function		12519	0					
ANR	12920	Identifier	common		12519	1					
ANR	12921	Identifier	function_name		12519	1					
ANR	12922	Argument	"min_num_args == max_num_args ? ""exactly"" : num_args < min_num_args ? ""at least"" : ""at most"""		12519	5					
ANR	12923	ConditionalExpression	"min_num_args == max_num_args ? ""exactly"" : num_args < min_num_args ? ""at least"" : ""at most"""		12519	0					
ANR	12924	Condition	min_num_args == max_num_args		12519	0					
ANR	12925	EqualityExpression	min_num_args == max_num_args		12519	0		==			
ANR	12926	Identifier	min_num_args		12519	0					
ANR	12927	Identifier	max_num_args		12519	1					
ANR	12928	PrimaryExpression	"""exactly"""		12519	1					
ANR	12929	ConditionalExpression	"num_args < min_num_args ? ""at least"" : ""at most"""		12519	2					
ANR	12930	Condition	num_args < min_num_args		12519	0					
ANR	12931	RelationalExpression	num_args < min_num_args		12519	0		<			
ANR	12932	Identifier	num_args		12519	0					
ANR	12933	Identifier	min_num_args		12519	1					
ANR	12934	PrimaryExpression	"""at least"""		12519	1					
ANR	12935	PrimaryExpression	"""at most"""		12519	2					
ANR	12936	Argument	num_args < min_num_args ? min_num_args : max_num_args		12519	6					
ANR	12937	ConditionalExpression	num_args < min_num_args ? min_num_args : max_num_args		12519	0					
ANR	12938	Condition	num_args < min_num_args		12519	0					
ANR	12939	RelationalExpression	num_args < min_num_args		12519	0		<			
ANR	12940	Identifier	num_args		12519	0					
ANR	12941	Identifier	min_num_args		12519	1					
ANR	12942	Identifier	min_num_args		12519	1					
ANR	12943	Identifier	max_num_args		12519	2					
ANR	12944	Argument	"( num_args < min_num_args ? min_num_args : max_num_args ) == 1 ? """" : ""s"""		12519	7					
ANR	12945	ConditionalExpression	"( num_args < min_num_args ? min_num_args : max_num_args ) == 1 ? """" : ""s"""		12519	0					
ANR	12946	Condition	( num_args < min_num_args ? min_num_args : max_num_args ) == 1		12519	0					
ANR	12947	EqualityExpression	( num_args < min_num_args ? min_num_args : max_num_args ) == 1		12519	0		==			
ANR	12948	ConditionalExpression	num_args < min_num_args ? min_num_args : max_num_args		12519	0					
ANR	12949	Condition	num_args < min_num_args		12519	0					
ANR	12950	RelationalExpression	num_args < min_num_args		12519	0		<			
ANR	12951	Identifier	num_args		12519	0					
ANR	12952	Identifier	min_num_args		12519	1					
ANR	12953	Identifier	min_num_args		12519	1					
ANR	12954	Identifier	max_num_args		12519	2					
ANR	12955	PrimaryExpression	1		12519	1					
ANR	12956	PrimaryExpression	""""""		12519	1					
ANR	12957	PrimaryExpression	"""s"""		12519	2					
ANR	12958	Argument	num_args		12519	8					
ANR	12959	Identifier	num_args		12519	0					
ANR	12960	ReturnStatement	return FAILURE ;	824:2:19636:19650	12519	1	True				
ANR	12961	Identifier	FAILURE		12519	0					
ANR	12962	ExpressionStatement	arg_count = ( int ) ( zend_uintptr_t ) * ( zend_vm_stack_top ( TSRMLS_C ) - 1 )	827:1:19657:19725	12519	15	True				
ANR	12963	AssignmentExpression	arg_count = ( int ) ( zend_uintptr_t ) * ( zend_vm_stack_top ( TSRMLS_C ) - 1 )		12519	0		=			
ANR	12964	Identifier	arg_count		12519	0					
ANR	12965	CastExpression	( int ) ( zend_uintptr_t ) * ( zend_vm_stack_top ( TSRMLS_C ) - 1 )		12519	1					
ANR	12966	CastTarget	int		12519	0					
ANR	12967	CastExpression	( zend_uintptr_t ) * ( zend_vm_stack_top ( TSRMLS_C ) - 1 )		12519	1					
ANR	12968	CastTarget	zend_uintptr_t		12519	0					
ANR	12969	UnaryOperationExpression	* ( zend_vm_stack_top ( TSRMLS_C ) - 1 )		12519	1					
ANR	12970	UnaryOperator	*		12519	0					
ANR	12971	AdditiveExpression	zend_vm_stack_top ( TSRMLS_C ) - 1		12519	1		-			
ANR	12972	CallExpression	zend_vm_stack_top ( TSRMLS_C )		12519	0					
ANR	12973	Callee	zend_vm_stack_top		12519	0					
ANR	12974	Identifier	zend_vm_stack_top		12519	0					
ANR	12975	ArgumentList	TSRMLS_C		12519	1					
ANR	12976	Argument	TSRMLS_C		12519	0					
ANR	12977	Identifier	TSRMLS_C		12519	0					
ANR	12978	PrimaryExpression	1		12519	1					
ANR	12979	IfStatement	if ( num_args > arg_count )		12519	16					
ANR	12980	Condition	num_args > arg_count	829:5:19733:19752	12519	0	True				
ANR	12981	RelationalExpression	num_args > arg_count		12519	0		>			
ANR	12982	Identifier	num_args		12519	0					
ANR	12983	Identifier	arg_count		12519	1					
ANR	12984	CompoundStatement		100:27:2877:2877	12519	1					
ANR	12985	ExpressionStatement	"zend_error ( E_WARNING , ""%s(): could not obtain parameters for parsing"" , get_active_function_name ( TSRMLS_C ) )"	830:2:19759:19868	12519	0	True				
ANR	12986	CallExpression	"zend_error ( E_WARNING , ""%s(): could not obtain parameters for parsing"" , get_active_function_name ( TSRMLS_C ) )"		12519	0					
ANR	12987	Callee	zend_error		12519	0					
ANR	12988	Identifier	zend_error		12519	0					
ANR	12989	ArgumentList	E_WARNING		12519	1					
ANR	12990	Argument	E_WARNING		12519	0					
ANR	12991	Identifier	E_WARNING		12519	0					
ANR	12992	Argument	"""%s(): could not obtain parameters for parsing"""		12519	1					
ANR	12993	PrimaryExpression	"""%s(): could not obtain parameters for parsing"""		12519	0					
ANR	12994	Argument	get_active_function_name ( TSRMLS_C )		12519	2					
ANR	12995	CallExpression	get_active_function_name ( TSRMLS_C )		12519	0					
ANR	12996	Callee	get_active_function_name		12519	0					
ANR	12997	Identifier	get_active_function_name		12519	0					
ANR	12998	ArgumentList	TSRMLS_C		12519	1					
ANR	12999	Argument	TSRMLS_C		12519	0					
ANR	13000	Identifier	TSRMLS_C		12519	0					
ANR	13001	ReturnStatement	return FAILURE ;	832:2:19872:19886	12519	1	True				
ANR	13002	Identifier	FAILURE		12519	0					
ANR	13003	ExpressionStatement	i = 0	835:1:19893:19898	12519	17	True				
ANR	13004	AssignmentExpression	i = 0		12519	0		=			
ANR	13005	Identifier	i		12519	0					
ANR	13006	PrimaryExpression	0		12519	1					
ANR	13007	WhileStatement	while ( num_args -- > 0 )		12519	18					
ANR	13008	Condition	num_args -- > 0	836:8:19908:19921	12519	0	True				
ANR	13009	RelationalExpression	num_args -- > 0		12519	0		>			
ANR	13010	PostIncDecOperationExpression	num_args --		12519	0					
ANR	13011	Identifier	num_args		12519	0					
ANR	13012	IncDec	--		12519	1					
ANR	13013	PrimaryExpression	0		12519	1					
ANR	13014	CompoundStatement		107:24:3046:3046	12519	1					
ANR	13015	IfStatement	if ( * type_spec == '|' )		12519	0					
ANR	13016	Condition	* type_spec == '|'	837:6:19932:19948	12519	0	True				
ANR	13017	EqualityExpression	* type_spec == '|'		12519	0		==			
ANR	13018	UnaryOperationExpression	* type_spec		12519	0					
ANR	13019	UnaryOperator	*		12519	0					
ANR	13020	Identifier	type_spec		12519	1					
ANR	13021	PrimaryExpression	'|'		12519	1					
ANR	13022	CompoundStatement		108:25:3073:3073	12519	1					
ANR	13023	ExpressionStatement	type_spec ++	838:3:19956:19967	12519	0	True				
ANR	13024	PostIncDecOperationExpression	type_spec ++		12519	0					
ANR	13025	Identifier	type_spec		12519	0					
ANR	13026	IncDec	++		12519	1					
ANR	13027	IfStatement	if ( * type_spec == '*' || * type_spec == '+' )		12519	1					
ANR	13028	Condition	* type_spec == '*' || * type_spec == '+'	841:6:19980:20017	12519	0	True				
ANR	13029	OrExpression	* type_spec == '*' || * type_spec == '+'		12519	0		||			
ANR	13030	EqualityExpression	* type_spec == '*'		12519	0		==			
ANR	13031	UnaryOperationExpression	* type_spec		12519	0					
ANR	13032	UnaryOperator	*		12519	0					
ANR	13033	Identifier	type_spec		12519	1					
ANR	13034	PrimaryExpression	'*'		12519	1					
ANR	13035	EqualityExpression	* type_spec == '+'		12519	1		==			
ANR	13036	UnaryOperationExpression	* type_spec		12519	0					
ANR	13037	UnaryOperator	*		12519	0					
ANR	13038	Identifier	type_spec		12519	1					
ANR	13039	PrimaryExpression	'+'		12519	1					
ANR	13040	CompoundStatement		113:3:3147:3192	12519	1					
ANR	13041	IdentifierDeclStatement	int num_varargs = num_args + 1 - post_varargs ;	842:3:20025:20070	12519	0	True				
ANR	13042	IdentifierDecl	num_varargs = num_args + 1 - post_varargs		12519	0					
ANR	13043	IdentifierDeclType	int		12519	0					
ANR	13044	Identifier	num_varargs		12519	1					
ANR	13045	AssignmentExpression	num_varargs = num_args + 1 - post_varargs		12519	2		=			
ANR	13046	Identifier	num_varargs		12519	0					
ANR	13047	AdditiveExpression	num_args + 1 - post_varargs		12519	1		+			
ANR	13048	Identifier	num_args		12519	0					
ANR	13049	AdditiveExpression	1 - post_varargs		12519	1		-			
ANR	13050	PrimaryExpression	1		12519	0					
ANR	13051	Identifier	post_varargs		12519	1					
ANR	13052	Statement	varargs	845:3:20157:20163	12519	1	True				
ANR	13053	Statement	=	845:11:20165:20165	12519	2	True				
ANR	13054	Statement	va_arg	845:13:20167:20172	12519	3	True				
ANR	13055	Statement	(	845:19:20173:20173	12519	4	True				
ANR	13056	Statement	*	845:20:20174:20174	12519	5	True				
ANR	13057	Statement	va	845:21:20175:20176	12519	6	True				
ANR	13058	Statement	","	845:23:20177:20177	12519	7	True				
ANR	13059	Statement	zval	845:25:20179:20182	12519	8	True				
ANR	13060	Statement	*	845:30:20184:20184	12519	9	True				
ANR	13061	Statement	*	845:31:20185:20185	12519	10	True				
ANR	13062	Statement	*	845:32:20186:20186	12519	11	True				
ANR	13063	Statement	*	845:33:20187:20187	12519	12	True				
ANR	13064	Statement	)	845:34:20188:20188	12519	13	True				
ANR	13065	ExpressionStatement		845:35:20189:20189	12519	14	True				
ANR	13066	Statement	n_varargs	846:3:20194:20202	12519	15	True				
ANR	13067	Statement	=	846:13:20204:20204	12519	16	True				
ANR	13068	Statement	va_arg	846:15:20206:20211	12519	17	True				
ANR	13069	Statement	(	846:21:20212:20212	12519	18	True				
ANR	13070	Statement	*	846:22:20213:20213	12519	19	True				
ANR	13071	Statement	va	846:23:20214:20215	12519	20	True				
ANR	13072	Statement	","	846:25:20216:20216	12519	21	True				
ANR	13073	Statement	int	846:27:20218:20220	12519	22	True				
ANR	13074	Statement	*	846:31:20222:20222	12519	23	True				
ANR	13075	Statement	)	846:32:20223:20223	12519	24	True				
ANR	13076	ExpressionStatement		846:33:20224:20224	12519	25	True				
ANR	13077	ExpressionStatement	type_spec ++	847:3:20229:20240	12519	26	True				
ANR	13078	PostIncDecOperationExpression	type_spec ++		12519	0					
ANR	13079	Identifier	type_spec		12519	0					
ANR	13080	IncDec	++		12519	1					
ANR	13081	IfStatement	if ( num_varargs > 0 )		12519	27					
ANR	13082	Condition	num_varargs > 0	849:7:20250:20264	12519	0	True				
ANR	13083	RelationalExpression	num_varargs > 0		12519	0		>			
ANR	13084	Identifier	num_varargs		12519	0					
ANR	13085	PrimaryExpression	0		12519	1					
ANR	13086	CompoundStatement		122:4:3411:3483	12519	1					
ANR	13087	IdentifierDeclStatement	int iv = 0 ;	850:4:20273:20283	12519	0	True				
ANR	13088	IdentifierDecl	iv = 0		12519	0					
ANR	13089	IdentifierDeclType	int		12519	0					
ANR	13090	Identifier	iv		12519	1					
ANR	13091	AssignmentExpression	iv = 0		12519	2		=			
ANR	13092	Identifier	iv		12519	0					
ANR	13093	PrimaryExpression	0		12519	1					
ANR	13094	IdentifierDeclStatement	zval * * p = ( zval * * ) ( zend_vm_stack_top ( TSRMLS_C ) - 1 - ( arg_count - i ) ) ;	851:4:20289:20361	12519	1	True				
ANR	13095	IdentifierDecl	* * p = ( zval * * ) ( zend_vm_stack_top ( TSRMLS_C ) - 1 - ( arg_count - i ) )		12519	0					
ANR	13096	IdentifierDeclType	zval * *		12519	0					
ANR	13097	Identifier	p		12519	1					
ANR	13098	AssignmentExpression	* * p = ( zval * * ) ( zend_vm_stack_top ( TSRMLS_C ) - 1 - ( arg_count - i ) )		12519	2		=			
ANR	13099	Identifier	p		12519	0					
ANR	13100	CastExpression	( zval * * ) ( zend_vm_stack_top ( TSRMLS_C ) - 1 - ( arg_count - i ) )		12519	1					
ANR	13101	CastTarget	zval * *		12519	0					
ANR	13102	AdditiveExpression	zend_vm_stack_top ( TSRMLS_C ) - 1 - ( arg_count - i )		12519	1		-			
ANR	13103	CallExpression	zend_vm_stack_top ( TSRMLS_C )		12519	0					
ANR	13104	Callee	zend_vm_stack_top		12519	0					
ANR	13105	Identifier	zend_vm_stack_top		12519	0					
ANR	13106	ArgumentList	TSRMLS_C		12519	1					
ANR	13107	Argument	TSRMLS_C		12519	0					
ANR	13108	Identifier	TSRMLS_C		12519	0					
ANR	13109	AdditiveExpression	1 - ( arg_count - i )		12519	1		-			
ANR	13110	PrimaryExpression	1		12519	0					
ANR	13111	AdditiveExpression	arg_count - i		12519	1		-			
ANR	13112	Identifier	arg_count		12519	0					
ANR	13113	Identifier	i		12519	1					
ANR	13114	ExpressionStatement	* n_varargs = num_varargs	853:4:20368:20392	12519	2	True				
ANR	13115	AssignmentExpression	* n_varargs = num_varargs		12519	0		=			
ANR	13116	UnaryOperationExpression	* n_varargs		12519	0					
ANR	13117	UnaryOperator	*		12519	0					
ANR	13118	Identifier	n_varargs		12519	1					
ANR	13119	Identifier	num_varargs		12519	1					
ANR	13120	ExpressionStatement	"* varargs = safe_emalloc ( num_varargs , sizeof ( zval * * ) , 0 )"	856:4:20449:20505	12519	3	True				
ANR	13121	AssignmentExpression	"* varargs = safe_emalloc ( num_varargs , sizeof ( zval * * ) , 0 )"		12519	0		=			
ANR	13122	UnaryOperationExpression	* varargs		12519	0					
ANR	13123	UnaryOperator	*		12519	0					
ANR	13124	Identifier	varargs		12519	1					
ANR	13125	CallExpression	"safe_emalloc ( num_varargs , sizeof ( zval * * ) , 0 )"		12519	1					
ANR	13126	Callee	safe_emalloc		12519	0					
ANR	13127	Identifier	safe_emalloc		12519	0					
ANR	13128	ArgumentList	num_varargs		12519	1					
ANR	13129	Argument	num_varargs		12519	0					
ANR	13130	Identifier	num_varargs		12519	0					
ANR	13131	Argument	sizeof ( zval * * )		12519	1					
ANR	13132	SizeofExpression	sizeof ( zval * * )		12519	0					
ANR	13133	Sizeof	sizeof		12519	0					
ANR	13134	SizeofOperand	zval * *		12519	1					
ANR	13135	Argument	0		12519	2					
ANR	13136	PrimaryExpression	0		12519	0					
ANR	13137	WhileStatement	while ( num_varargs -- > 0 )		12519	4					
ANR	13138	Condition	num_varargs -- > 0	857:11:20518:20534	12519	0	True				
ANR	13139	RelationalExpression	num_varargs -- > 0		12519	0		>			
ANR	13140	PostIncDecOperationExpression	num_varargs --		12519	0					
ANR	13141	Identifier	num_varargs		12519	0					
ANR	13142	IncDec	--		12519	1					
ANR	13143	PrimaryExpression	0		12519	1					
ANR	13144	CompoundStatement		128:30:3659:3659	12519	1					
ANR	13145	ExpressionStatement	( * varargs ) [ iv ++ ] = p ++	858:5:20544:20566	12519	0	True				
ANR	13146	AssignmentExpression	( * varargs ) [ iv ++ ] = p ++		12519	0		=			
ANR	13147	ArrayIndexing	( * varargs ) [ iv ++ ]		12519	0					
ANR	13148	UnaryOperationExpression	* varargs		12519	0					
ANR	13149	UnaryOperator	*		12519	0					
ANR	13150	Identifier	varargs		12519	1					
ANR	13151	PostIncDecOperationExpression	iv ++		12519	1					
ANR	13152	Identifier	iv		12519	0					
ANR	13153	IncDec	++		12519	1					
ANR	13154	PostIncDecOperationExpression	p ++		12519	1					
ANR	13155	Identifier	p		12519	0					
ANR	13156	IncDec	++		12519	1					
ANR	13157	ExpressionStatement	num_args = num_args + 1 - iv	862:4:20640:20668	12519	5	True				
ANR	13158	AssignmentExpression	num_args = num_args + 1 - iv		12519	0		=			
ANR	13159	Identifier	num_args		12519	0					
ANR	13160	AdditiveExpression	num_args + 1 - iv		12519	1		+			
ANR	13161	Identifier	num_args		12519	0					
ANR	13162	AdditiveExpression	1 - iv		12519	1		-			
ANR	13163	PrimaryExpression	1		12519	0					
ANR	13164	Identifier	iv		12519	1					
ANR	13165	ExpressionStatement	i += iv	863:4:20674:20681	12519	6	True				
ANR	13166	AssignmentExpression	i += iv		12519	0		+=			
ANR	13167	Identifier	i		12519	0					
ANR	13168	Identifier	iv		12519	1					
ANR	13169	ContinueStatement	continue ;	864:4:20687:20695	12519	7	True				
ANR	13170	ElseStatement	else		12519	0					
ANR	13171	CompoundStatement		136:10:3829:3829	12519	0					
ANR	13172	ExpressionStatement	* varargs = NULL	866:4:20713:20728	12519	0	True				
ANR	13173	AssignmentExpression	* varargs = NULL		12519	0		=			
ANR	13174	UnaryOperationExpression	* varargs		12519	0					
ANR	13175	UnaryOperator	*		12519	0					
ANR	13176	Identifier	varargs		12519	1					
ANR	13177	Identifier	NULL		12519	1					
ANR	13178	ExpressionStatement	* n_varargs = 0	867:4:20734:20748	12519	1	True				
ANR	13179	AssignmentExpression	* n_varargs = 0		12519	0		=			
ANR	13180	UnaryOperationExpression	* n_varargs		12519	0					
ANR	13181	UnaryOperator	*		12519	0					
ANR	13182	Identifier	n_varargs		12519	1					
ANR	13183	PrimaryExpression	0		12519	1					
ANR	13184	ExpressionStatement	arg = ( zval * * ) ( zend_vm_stack_top ( TSRMLS_C ) - 1 - ( arg_count - i ) )	871:2:20762:20827	12519	2	True				
ANR	13185	AssignmentExpression	arg = ( zval * * ) ( zend_vm_stack_top ( TSRMLS_C ) - 1 - ( arg_count - i ) )		12519	0		=			
ANR	13186	Identifier	arg		12519	0					
ANR	13187	CastExpression	( zval * * ) ( zend_vm_stack_top ( TSRMLS_C ) - 1 - ( arg_count - i ) )		12519	1					
ANR	13188	CastTarget	zval * *		12519	0					
ANR	13189	AdditiveExpression	zend_vm_stack_top ( TSRMLS_C ) - 1 - ( arg_count - i )		12519	1		-			
ANR	13190	CallExpression	zend_vm_stack_top ( TSRMLS_C )		12519	0					
ANR	13191	Callee	zend_vm_stack_top		12519	0					
ANR	13192	Identifier	zend_vm_stack_top		12519	0					
ANR	13193	ArgumentList	TSRMLS_C		12519	1					
ANR	13194	Argument	TSRMLS_C		12519	0					
ANR	13195	Identifier	TSRMLS_C		12519	0					
ANR	13196	AdditiveExpression	1 - ( arg_count - i )		12519	1		-			
ANR	13197	PrimaryExpression	1		12519	0					
ANR	13198	AdditiveExpression	arg_count - i		12519	1		-			
ANR	13199	Identifier	arg_count		12519	0					
ANR	13200	Identifier	i		12519	1					
ANR	13201	Statement	if	873:2:20832:20833	12519	3	True				
ANR	13202	Statement	(	873:5:20835:20835	12519	4	True				
ANR	13203	Statement	zend_parse_arg	873:6:20836:20849	12519	5	True				
ANR	13204	Statement	(	873:20:20850:20850	12519	6	True				
ANR	13205	Statement	i	873:21:20851:20851	12519	7	True				
ANR	13206	Statement	+	873:22:20852:20852	12519	8	True				
ANR	13207	Statement	1	873:23:20853:20853	12519	9	True				
ANR	13208	Statement	","	873:24:20854:20854	12519	10	True				
ANR	13209	Statement	arg	873:26:20856:20858	12519	11	True				
ANR	13210	Statement	","	873:29:20859:20859	12519	12	True				
ANR	13211	Statement	va	873:31:20861:20862	12519	13	True				
ANR	13212	Statement	","	873:33:20863:20863	12519	14	True				
ANR	13213	Statement	&	873:35:20865:20865	12519	15	True				
ANR	13214	Statement	type_spec	873:36:20866:20874	12519	16	True				
ANR	13215	Statement	","	873:45:20875:20875	12519	17	True				
ANR	13216	Statement	quiet	873:47:20877:20881	12519	18	True				
ANR	13217	Statement	TSRMLS_CC	873:53:20883:20891	12519	19	True				
ANR	13218	Statement	)	873:62:20892:20892	12519	20	True				
ANR	13219	Statement	==	873:64:20894:20895	12519	21	True				
ANR	13220	Statement	FAILURE	873:67:20897:20903	12519	22	True				
ANR	13221	Statement	)	873:74:20904:20904	12519	23	True				
ANR	13222	CompoundStatement		144:76:4028:4028	12519	24					
ANR	13223	IfStatement	if ( varargs && * varargs )		12519	0					
ANR	13224	Condition	varargs && * varargs	875:7:20962:20980	12519	0	True				
ANR	13225	AndExpression	varargs && * varargs		12519	0		&&			
ANR	13226	Identifier	varargs		12519	0					
ANR	13227	UnaryOperationExpression	* varargs		12519	1					
ANR	13228	UnaryOperator	*		12519	0					
ANR	13229	Identifier	varargs		12519	1					
ANR	13230	CompoundStatement		146:28:4105:4105	12519	1					
ANR	13231	ExpressionStatement	efree ( * varargs )	876:4:20989:21004	12519	0	True				
ANR	13232	CallExpression	efree ( * varargs )		12519	0					
ANR	13233	Callee	efree		12519	0					
ANR	13234	Identifier	efree		12519	0					
ANR	13235	ArgumentList	* varargs		12519	1					
ANR	13236	Argument	* varargs		12519	0					
ANR	13237	UnaryOperationExpression	* varargs		12519	0					
ANR	13238	UnaryOperator	*		12519	0					
ANR	13239	Identifier	varargs		12519	1					
ANR	13240	ExpressionStatement	* varargs = NULL	877:4:21010:21025	12519	1	True				
ANR	13241	AssignmentExpression	* varargs = NULL		12519	0		=			
ANR	13242	UnaryOperationExpression	* varargs		12519	0					
ANR	13243	UnaryOperator	*		12519	0					
ANR	13244	Identifier	varargs		12519	1					
ANR	13245	Identifier	NULL		12519	1					
ANR	13246	ReturnStatement	return FAILURE ;	879:3:21035:21049	12519	1	True				
ANR	13247	Identifier	FAILURE		12519	0					
ANR	13248	ExpressionStatement	i ++	881:2:21057:21060	12519	25	True				
ANR	13249	PostIncDecOperationExpression	i ++		12519	0					
ANR	13250	Identifier	i		12519	0					
ANR	13251	IncDec	++		12519	1					
ANR	13252	ReturnStatement	return SUCCESS ;	884:1:21067:21081	12519	19	True				
ANR	13253	Identifier	SUCCESS		12519	0					
ANR	13254	ReturnType	static int		12519	1					
ANR	13255	Identifier	zend_parse_va_args		12519	2					
ANR	13256	ParameterList	"int num_args , const char * type_spec , va_list * va , int flags TSRMLS_DC"		12519	3					
ANR	13257	Parameter	int num_args	729:30:16796:16807	12519	0	True				
ANR	13258	ParameterType	int		12519	0					
ANR	13259	Identifier	num_args		12519	1					
ANR	13260	Parameter	const char * type_spec	729:44:16810:16830	12519	1	True				
ANR	13261	ParameterType	const char *		12519	0					
ANR	13262	Identifier	type_spec		12519	1					
ANR	13263	Parameter	va_list * va	729:67:16833:16843	12519	2	True				
ANR	13264	ParameterType	va_list *		12519	0					
ANR	13265	Identifier	va		12519	1					
ANR	13266	Parameter	int flags TSRMLS_DC	729:80:16846:16864	12519	3	True				
ANR	13267	ParameterType	int flags		12519	0					
ANR	13268	Identifier	TSRMLS_DC		12519	1					
ANR	13269	CFGEntryNode	ENTRY		12519		True				
ANR	13270	CFGExitNode	EXIT		12519		True				
ANR	13271	Symbol	* * active_function		12519						
ANR	13272	Symbol	* type_spec		12519						
ANR	13273	Symbol	min_num_args		12519						
ANR	13274	Symbol	current_execute_data		12519						
ANR	13275	Symbol	* active_function -> common		12519						
ANR	13276	Symbol	TSRMLS_DC		12519						
ANR	13277	Symbol	num_args		12519						
ANR	13278	Symbol	varargs		12519						
ANR	13279	Symbol	n_varargs		12519						
ANR	13280	Symbol	EG		12519						
ANR	13281	Symbol	NULL		12519						
ANR	13282	Symbol	va		12519						
ANR	13283	Symbol	EG ( current_execute_data ) -> function_state		12519						
ANR	13284	Symbol	active_function -> common		12519						
ANR	13285	Symbol	* active_function		12519						
ANR	13286	Symbol	iv		12519						
ANR	13287	Symbol	active_function -> common . scope		12519						
ANR	13288	Symbol	* * varargs		12519						
ANR	13289	Symbol	spec_walk		12519						
ANR	13290	Symbol	* active_function -> common . scope		12519						
ANR	13291	Symbol	* zend_vm_stack_top		12519						
ANR	13292	Symbol	EG ( current_execute_data ) -> function_state . function		12519						
ANR	13293	Symbol	* ( zend_vm_stack_top ( TSRMLS_C ) - 1 )		12519						
ANR	13294	Symbol	* class_name		12519						
ANR	13295	Symbol	active_function -> common . function_name		12519						
ANR	13296	Symbol	flags		12519						
ANR	13297	Symbol	* EG		12519						
ANR	13298	Symbol	active_function		12519						
ANR	13299	Symbol	E_WARNING		12519						
ANR	13300	Symbol	TSRMLS_C		12519						
ANR	13301	Symbol	type_spec		12519						
ANR	13302	Symbol	arg		12519						
ANR	13303	Symbol	quiet		12519						
ANR	13304	Symbol	class_name		12519						
ANR	13305	Symbol	c		12519						
ANR	13306	Symbol	SUCCESS		12519						
ANR	13307	Symbol	zend_vm_stack_top		12519						
ANR	13308	Symbol	active_function -> common . scope -> name		12519						
ANR	13309	Symbol	get_active_function_name		12519						
ANR	13310	Symbol	i		12519						
ANR	13311	Symbol	num_varargs		12519						
ANR	13312	Symbol	FAILURE		12519						
ANR	13313	Symbol	post_varargs		12519						
ANR	13314	Symbol	p		12519						
ANR	13315	Symbol	max_num_args		12519						
ANR	13316	Symbol	* varargs		12519						
ANR	13317	Symbol	ZEND_PARSE_PARAMS_QUIET		12519						
ANR	13318	Symbol	* n_varargs		12519						
ANR	13319	Symbol	have_varargs		12519						
ANR	13320	Symbol	* spec_walk		12519						
ANR	13321	Symbol	safe_emalloc		12519						
ANR	13322	Symbol	arg_count		12519						
ANR	13323	DeclStmt									
ANR	13324	Decl							int	int	__num_args
ANR	13325	DeclStmt									
ANR	13326	Decl							const char	const char *	__space
ANR	13327	DeclStmt									
ANR	13328	Decl							const char	const char *	__class_name
ANR	13329	Function	zend_parse_parameters_ex	901:0:21538:21884							
ANR	13330	FunctionDef	"zend_parse_parameters_ex (int flags , int num_args TSRMLS_DC , const char * type_spec)"		13329	0					
ANR	13331	CompoundStatement		902:0:21649:21884	13329	0					
ANR	13332	IdentifierDeclStatement	va_list va ;	903:1:21652:21662	13329	0	True				
ANR	13333	IdentifierDecl	va		13329	0					
ANR	13334	IdentifierDeclType	va_list		13329	0					
ANR	13335	Identifier	va		13329	1					
ANR	13336	IdentifierDeclStatement	int retval ;	904:1:21665:21675	13329	1	True				
ANR	13337	IdentifierDecl	retval		13329	0					
ANR	13338	IdentifierDeclType	int		13329	0					
ANR	13339	Identifier	retval		13329	1					
ANR	13340	ExpressionStatement	"RETURN_IF_ZERO_ARGS ( num_args , type_spec , flags & ZEND_PARSE_PARAMS_QUIET )"	906:1:21679:21752	13329	2	True				
ANR	13341	CallExpression	"RETURN_IF_ZERO_ARGS ( num_args , type_spec , flags & ZEND_PARSE_PARAMS_QUIET )"		13329	0					
ANR	13342	Callee	RETURN_IF_ZERO_ARGS		13329	0					
ANR	13343	Identifier	RETURN_IF_ZERO_ARGS		13329	0					
ANR	13344	ArgumentList	num_args		13329	1					
ANR	13345	Argument	num_args		13329	0					
ANR	13346	Identifier	num_args		13329	0					
ANR	13347	Argument	type_spec		13329	1					
ANR	13348	Identifier	type_spec		13329	0					
ANR	13349	Argument	flags & ZEND_PARSE_PARAMS_QUIET		13329	2					
ANR	13350	BitAndExpression	flags & ZEND_PARSE_PARAMS_QUIET		13329	0		&			
ANR	13351	Identifier	flags		13329	0					
ANR	13352	Identifier	ZEND_PARSE_PARAMS_QUIET		13329	1					
ANR	13353	ExpressionStatement	"va_start ( va , type_spec )"	908:1:21756:21779	13329	3	True				
ANR	13354	CallExpression	"va_start ( va , type_spec )"		13329	0					
ANR	13355	Callee	va_start		13329	0					
ANR	13356	Identifier	va_start		13329	0					
ANR	13357	ArgumentList	va		13329	1					
ANR	13358	Argument	va		13329	0					
ANR	13359	Identifier	va		13329	0					
ANR	13360	Argument	type_spec		13329	1					
ANR	13361	Identifier	type_spec		13329	0					
ANR	13362	Statement	retval	909:1:21782:21787	13329	4	True				
ANR	13363	Statement	=	909:8:21789:21789	13329	5	True				
ANR	13364	Statement	zend_parse_va_args	909:10:21791:21808	13329	6	True				
ANR	13365	Statement	(	909:28:21809:21809	13329	7	True				
ANR	13366	Statement	num_args	909:29:21810:21817	13329	8	True				
ANR	13367	Statement	","	909:37:21818:21818	13329	9	True				
ANR	13368	Statement	type_spec	909:39:21820:21828	13329	10	True				
ANR	13369	Statement	","	909:48:21829:21829	13329	11	True				
ANR	13370	Statement	&	909:50:21831:21831	13329	12	True				
ANR	13371	Statement	va	909:51:21832:21833	13329	13	True				
ANR	13372	Statement	","	909:53:21834:21834	13329	14	True				
ANR	13373	Statement	flags	909:55:21836:21840	13329	15	True				
ANR	13374	Statement	TSRMLS_CC	909:61:21842:21850	13329	16	True				
ANR	13375	Statement	)	909:70:21851:21851	13329	17	True				
ANR	13376	ExpressionStatement		909:71:21852:21852	13329	18	True				
ANR	13377	ExpressionStatement	va_end ( va )	910:1:21855:21865	13329	19	True				
ANR	13378	CallExpression	va_end ( va )		13329	0					
ANR	13379	Callee	va_end		13329	0					
ANR	13380	Identifier	va_end		13329	0					
ANR	13381	ArgumentList	va		13329	1					
ANR	13382	Argument	va		13329	0					
ANR	13383	Identifier	va		13329	0					
ANR	13384	ReturnStatement	return retval ;	912:1:21869:21882	13329	20	True				
ANR	13385	Identifier	retval		13329	0					
ANR	13386	ReturnType	ZEND_API int		13329	1					
ANR	13387	Identifier	zend_parse_parameters_ex		13329	2					
ANR	13388	ParameterList	"int flags , int num_args TSRMLS_DC , const char * type_spec"		13329	3					
ANR	13389	Parameter	int flags	901:38:21576:21584	13329	0	True				
ANR	13390	ParameterType	int		13329	0					
ANR	13391	Identifier	flags		13329	1					
ANR	13392	Parameter	int num_args TSRMLS_DC	901:49:21587:21608	13329	1	True				
ANR	13393	ParameterType	int num_args		13329	0					
ANR	13394	Identifier	TSRMLS_DC		13329	1					
ANR	13395	Parameter	const char * type_spec	901:73:21611:21631	13329	2	True				
ANR	13396	ParameterType	const char *		13329	0					
ANR	13397	Identifier	type_spec		13329	1					
ANR	13398	CFGEntryNode	ENTRY		13329		True				
ANR	13399	CFGExitNode	EXIT		13329		True				
ANR	13400	Symbol	type_spec		13329						
ANR	13401	Symbol	num_args		13329						
ANR	13402	Symbol	flags		13329						
ANR	13403	Symbol	ZEND_PARSE_PARAMS_QUIET		13329						
ANR	13404	Symbol	va		13329						
ANR	13405	Symbol	TSRMLS_DC		13329						
ANR	13406	Symbol	retval		13329						
ANR	13407	Function	zend_parse_parameters	916:0:21897:22195							
ANR	13408	FunctionDef	"zend_parse_parameters (int num_args TSRMLS_DC , const char * type_spec)"		13407	0					
ANR	13409	CompoundStatement		917:0:21994:22195	13407	0					
ANR	13410	IdentifierDeclStatement	va_list va ;	918:1:21997:22007	13407	0	True				
ANR	13411	IdentifierDecl	va		13407	0					
ANR	13412	IdentifierDeclType	va_list		13407	0					
ANR	13413	Identifier	va		13407	1					
ANR	13414	IdentifierDeclStatement	int retval ;	919:1:22010:22020	13407	1	True				
ANR	13415	IdentifierDecl	retval		13407	0					
ANR	13416	IdentifierDeclType	int		13407	0					
ANR	13417	Identifier	retval		13407	1					
ANR	13418	ExpressionStatement	"RETURN_IF_ZERO_ARGS ( num_args , type_spec , 0 )"	921:1:22024:22067	13407	2	True				
ANR	13419	CallExpression	"RETURN_IF_ZERO_ARGS ( num_args , type_spec , 0 )"		13407	0					
ANR	13420	Callee	RETURN_IF_ZERO_ARGS		13407	0					
ANR	13421	Identifier	RETURN_IF_ZERO_ARGS		13407	0					
ANR	13422	ArgumentList	num_args		13407	1					
ANR	13423	Argument	num_args		13407	0					
ANR	13424	Identifier	num_args		13407	0					
ANR	13425	Argument	type_spec		13407	1					
ANR	13426	Identifier	type_spec		13407	0					
ANR	13427	Argument	0		13407	2					
ANR	13428	PrimaryExpression	0		13407	0					
ANR	13429	ExpressionStatement	"va_start ( va , type_spec )"	923:1:22071:22094	13407	3	True				
ANR	13430	CallExpression	"va_start ( va , type_spec )"		13407	0					
ANR	13431	Callee	va_start		13407	0					
ANR	13432	Identifier	va_start		13407	0					
ANR	13433	ArgumentList	va		13407	1					
ANR	13434	Argument	va		13407	0					
ANR	13435	Identifier	va		13407	0					
ANR	13436	Argument	type_spec		13407	1					
ANR	13437	Identifier	type_spec		13407	0					
ANR	13438	Statement	retval	924:1:22097:22102	13407	4	True				
ANR	13439	Statement	=	924:8:22104:22104	13407	5	True				
ANR	13440	Statement	zend_parse_va_args	924:10:22106:22123	13407	6	True				
ANR	13441	Statement	(	924:28:22124:22124	13407	7	True				
ANR	13442	Statement	num_args	924:29:22125:22132	13407	8	True				
ANR	13443	Statement	","	924:37:22133:22133	13407	9	True				
ANR	13444	Statement	type_spec	924:39:22135:22143	13407	10	True				
ANR	13445	Statement	","	924:48:22144:22144	13407	11	True				
ANR	13446	Statement	&	924:50:22146:22146	13407	12	True				
ANR	13447	Statement	va	924:51:22147:22148	13407	13	True				
ANR	13448	Statement	","	924:53:22149:22149	13407	14	True				
ANR	13449	Statement	0	924:55:22151:22151	13407	15	True				
ANR	13450	Statement	TSRMLS_CC	924:57:22153:22161	13407	16	True				
ANR	13451	Statement	)	924:66:22162:22162	13407	17	True				
ANR	13452	ExpressionStatement		924:67:22163:22163	13407	18	True				
ANR	13453	ExpressionStatement	va_end ( va )	925:1:22166:22176	13407	19	True				
ANR	13454	CallExpression	va_end ( va )		13407	0					
ANR	13455	Callee	va_end		13407	0					
ANR	13456	Identifier	va_end		13407	0					
ANR	13457	ArgumentList	va		13407	1					
ANR	13458	Argument	va		13407	0					
ANR	13459	Identifier	va		13407	0					
ANR	13460	ReturnStatement	return retval ;	927:1:22180:22193	13407	20	True				
ANR	13461	Identifier	retval		13407	0					
ANR	13462	ReturnType	ZEND_API int		13407	1					
ANR	13463	Identifier	zend_parse_parameters		13407	2					
ANR	13464	ParameterList	"int num_args TSRMLS_DC , const char * type_spec"		13407	3					
ANR	13465	Parameter	int num_args TSRMLS_DC	916:35:21932:21953	13407	0	True				
ANR	13466	ParameterType	int num_args		13407	0					
ANR	13467	Identifier	TSRMLS_DC		13407	1					
ANR	13468	Parameter	const char * type_spec	916:59:21956:21976	13407	1	True				
ANR	13469	ParameterType	const char *		13407	0					
ANR	13470	Identifier	type_spec		13407	1					
ANR	13471	CFGEntryNode	ENTRY		13407		True				
ANR	13472	CFGExitNode	EXIT		13407		True				
ANR	13473	Symbol	type_spec		13407						
ANR	13474	Symbol	num_args		13407						
ANR	13475	Symbol	va		13407						
ANR	13476	Symbol	TSRMLS_DC		13407						
ANR	13477	Symbol	retval		13407						
ANR	13478	Function	zend_parse_method_parameters	931:0:22208:23125							
ANR	13479	FunctionDef	"zend_parse_method_parameters (int num_args TSRMLS_DC , zval * this_ptr , const char * type_spec)"		13478	0					
ANR	13480	CompoundStatement		932:0:22328:23125	13478	0					
ANR	13481	IdentifierDeclStatement	va_list va ;	933:1:22331:22341	13478	0	True				
ANR	13482	IdentifierDecl	va		13478	0					
ANR	13483	IdentifierDeclType	va_list		13478	0					
ANR	13484	Identifier	va		13478	1					
ANR	13485	IdentifierDeclStatement	int retval ;	934:1:22344:22354	13478	1	True				
ANR	13486	IdentifierDecl	retval		13478	0					
ANR	13487	IdentifierDeclType	int		13478	0					
ANR	13488	Identifier	retval		13478	1					
ANR	13489	IdentifierDeclStatement	const char * p = type_spec ;	935:1:22357:22382	13478	2	True				
ANR	13490	IdentifierDecl	* p = type_spec		13478	0					
ANR	13491	IdentifierDeclType	const char *		13478	0					
ANR	13492	Identifier	p		13478	1					
ANR	13493	AssignmentExpression	* p = type_spec		13478	2		=			
ANR	13494	Identifier	type_spec		13478	0					
ANR	13495	Identifier	type_spec		13478	1					
ANR	13496	IdentifierDeclStatement	zval * * object ;	936:1:22385:22398	13478	3	True				
ANR	13497	IdentifierDecl	* * object		13478	0					
ANR	13498	IdentifierDeclType	zval * *		13478	0					
ANR	13499	Identifier	object		13478	1					
ANR	13500	IdentifierDeclStatement	zend_class_entry * ce ;	937:1:22401:22421	13478	4	True				
ANR	13501	IdentifierDecl	* ce		13478	0					
ANR	13502	IdentifierDeclType	zend_class_entry *		13478	0					
ANR	13503	Identifier	ce		13478	1					
ANR	13504	IfStatement	if ( ! this_ptr )		13478	5					
ANR	13505	Condition	! this_ptr	939:5:22429:22437	13478	0	True				
ANR	13506	UnaryOperationExpression	! this_ptr		13478	0					
ANR	13507	UnaryOperator	!		13478	0					
ANR	13508	Identifier	this_ptr		13478	1					
ANR	13509	CompoundStatement		8:16:111:111	13478	1					
ANR	13510	ExpressionStatement	"RETURN_IF_ZERO_ARGS ( num_args , p , 0 )"	940:2:22444:22479	13478	0	True				
ANR	13511	CallExpression	"RETURN_IF_ZERO_ARGS ( num_args , p , 0 )"		13478	0					
ANR	13512	Callee	RETURN_IF_ZERO_ARGS		13478	0					
ANR	13513	Identifier	RETURN_IF_ZERO_ARGS		13478	0					
ANR	13514	ArgumentList	num_args		13478	1					
ANR	13515	Argument	num_args		13478	0					
ANR	13516	Identifier	num_args		13478	0					
ANR	13517	Argument	p		13478	1					
ANR	13518	Identifier	p		13478	0					
ANR	13519	Argument	0		13478	2					
ANR	13520	PrimaryExpression	0		13478	0					
ANR	13521	ExpressionStatement	"va_start ( va , type_spec )"	942:2:22484:22507	13478	1	True				
ANR	13522	CallExpression	"va_start ( va , type_spec )"		13478	0					
ANR	13523	Callee	va_start		13478	0					
ANR	13524	Identifier	va_start		13478	0					
ANR	13525	ArgumentList	va		13478	1					
ANR	13526	Argument	va		13478	0					
ANR	13527	Identifier	va		13478	0					
ANR	13528	Argument	type_spec		13478	1					
ANR	13529	Identifier	type_spec		13478	0					
ANR	13530	Statement	retval	943:2:22511:22516	13478	2	True				
ANR	13531	Statement	=	943:9:22518:22518	13478	3	True				
ANR	13532	Statement	zend_parse_va_args	943:11:22520:22537	13478	4	True				
ANR	13533	Statement	(	943:29:22538:22538	13478	5	True				
ANR	13534	Statement	num_args	943:30:22539:22546	13478	6	True				
ANR	13535	Statement	","	943:38:22547:22547	13478	7	True				
ANR	13536	Statement	type_spec	943:40:22549:22557	13478	8	True				
ANR	13537	Statement	","	943:49:22558:22558	13478	9	True				
ANR	13538	Statement	&	943:51:22560:22560	13478	10	True				
ANR	13539	Statement	va	943:52:22561:22562	13478	11	True				
ANR	13540	Statement	","	943:54:22563:22563	13478	12	True				
ANR	13541	Statement	0	943:56:22565:22565	13478	13	True				
ANR	13542	Statement	TSRMLS_CC	943:58:22567:22575	13478	14	True				
ANR	13543	Statement	)	943:67:22576:22576	13478	15	True				
ANR	13544	ExpressionStatement		943:68:22577:22577	13478	16	True				
ANR	13545	ExpressionStatement	va_end ( va )	944:2:22581:22591	13478	17	True				
ANR	13546	CallExpression	va_end ( va )		13478	0					
ANR	13547	Callee	va_end		13478	0					
ANR	13548	Identifier	va_end		13478	0					
ANR	13549	ArgumentList	va		13478	1					
ANR	13550	Argument	va		13478	0					
ANR	13551	Identifier	va		13478	0					
ANR	13552	ElseStatement	else		13478	0					
ANR	13553	CompoundStatement		14:8:272:272	13478	0					
ANR	13554	ExpressionStatement	p ++	946:2:22605:22608	13478	0	True				
ANR	13555	PostIncDecOperationExpression	p ++		13478	0					
ANR	13556	Identifier	p		13478	0					
ANR	13557	IncDec	++		13478	1					
ANR	13558	ExpressionStatement	"RETURN_IF_ZERO_ARGS ( num_args , p , 0 )"	947:2:22612:22647	13478	1	True				
ANR	13559	CallExpression	"RETURN_IF_ZERO_ARGS ( num_args , p , 0 )"		13478	0					
ANR	13560	Callee	RETURN_IF_ZERO_ARGS		13478	0					
ANR	13561	Identifier	RETURN_IF_ZERO_ARGS		13478	0					
ANR	13562	ArgumentList	num_args		13478	1					
ANR	13563	Argument	num_args		13478	0					
ANR	13564	Identifier	num_args		13478	0					
ANR	13565	Argument	p		13478	1					
ANR	13566	Identifier	p		13478	0					
ANR	13567	Argument	0		13478	2					
ANR	13568	PrimaryExpression	0		13478	0					
ANR	13569	ExpressionStatement	"va_start ( va , type_spec )"	949:2:22652:22675	13478	2	True				
ANR	13570	CallExpression	"va_start ( va , type_spec )"		13478	0					
ANR	13571	Callee	va_start		13478	0					
ANR	13572	Identifier	va_start		13478	0					
ANR	13573	ArgumentList	va		13478	1					
ANR	13574	Argument	va		13478	0					
ANR	13575	Identifier	va		13478	0					
ANR	13576	Argument	type_spec		13478	1					
ANR	13577	Identifier	type_spec		13478	0					
ANR	13578	Statement	object	951:2:22680:22685	13478	3	True				
ANR	13579	Statement	=	951:9:22687:22687	13478	4	True				
ANR	13580	Statement	va_arg	951:11:22689:22694	13478	5	True				
ANR	13581	Statement	(	951:17:22695:22695	13478	6	True				
ANR	13582	Statement	va	951:18:22696:22697	13478	7	True				
ANR	13583	Statement	","	951:20:22698:22698	13478	8	True				
ANR	13584	Statement	zval	951:22:22700:22703	13478	9	True				
ANR	13585	Statement	*	951:27:22705:22705	13478	10	True				
ANR	13586	Statement	*	951:28:22706:22706	13478	11	True				
ANR	13587	Statement	)	951:29:22707:22707	13478	12	True				
ANR	13588	ExpressionStatement		951:30:22708:22708	13478	13	True				
ANR	13589	Statement	ce	952:2:22712:22713	13478	14	True				
ANR	13590	Statement	=	952:5:22715:22715	13478	15	True				
ANR	13591	Statement	va_arg	952:7:22717:22722	13478	16	True				
ANR	13592	Statement	(	952:13:22723:22723	13478	17	True				
ANR	13593	Statement	va	952:14:22724:22725	13478	18	True				
ANR	13594	Statement	","	952:16:22726:22726	13478	19	True				
ANR	13595	Statement	zend_class_entry	952:18:22728:22743	13478	20	True				
ANR	13596	Statement	*	952:35:22745:22745	13478	21	True				
ANR	13597	Statement	)	952:36:22746:22746	13478	22	True				
ANR	13598	ExpressionStatement		952:37:22747:22747	13478	23	True				
ANR	13599	ExpressionStatement	* object = this_ptr	953:2:22751:22769	13478	24	True				
ANR	13600	AssignmentExpression	* object = this_ptr		13478	0		=			
ANR	13601	UnaryOperationExpression	* object		13478	0					
ANR	13602	UnaryOperator	*		13478	0					
ANR	13603	Identifier	object		13478	1					
ANR	13604	Identifier	this_ptr		13478	1					
ANR	13605	Statement	if	955:2:22774:22775	13478	25	True				
ANR	13606	Statement	(	955:5:22777:22777	13478	26	True				
ANR	13607	Statement	ce	955:6:22778:22779	13478	27	True				
ANR	13608	Statement	&&	955:9:22781:22782	13478	28	True				
ANR	13609	Statement	!	955:12:22784:22784	13478	29	True				
ANR	13610	Statement	instanceof_function	955:13:22785:22803	13478	30	True				
ANR	13611	Statement	(	955:32:22804:22804	13478	31	True				
ANR	13612	Statement	Z_OBJCE_P	955:33:22805:22813	13478	32	True				
ANR	13613	Statement	(	955:42:22814:22814	13478	33	True				
ANR	13614	Statement	this_ptr	955:43:22815:22822	13478	34	True				
ANR	13615	Statement	)	955:51:22823:22823	13478	35	True				
ANR	13616	Statement	","	955:52:22824:22824	13478	36	True				
ANR	13617	Statement	ce	955:54:22826:22827	13478	37	True				
ANR	13618	Statement	TSRMLS_CC	955:57:22829:22837	13478	38	True				
ANR	13619	Statement	)	955:66:22838:22838	13478	39	True				
ANR	13620	Statement	)	955:67:22839:22839	13478	40	True				
ANR	13621	CompoundStatement		24:69:512:512	13478	41					
ANR	13622	ExpressionStatement	"zend_error ( E_CORE_ERROR , ""%s::%s() must be derived from %s::%s"" , ce -> name , get_active_function_name ( TSRMLS_C ) , Z_OBJCE_P ( this_ptr ) -> name , get_active_function_name ( TSRMLS_C ) )"	956:3:22846:23023	13478	0	True				
ANR	13623	CallExpression	"zend_error ( E_CORE_ERROR , ""%s::%s() must be derived from %s::%s"" , ce -> name , get_active_function_name ( TSRMLS_C ) , Z_OBJCE_P ( this_ptr ) -> name , get_active_function_name ( TSRMLS_C ) )"		13478	0					
ANR	13624	Callee	zend_error		13478	0					
ANR	13625	Identifier	zend_error		13478	0					
ANR	13626	ArgumentList	E_CORE_ERROR		13478	1					
ANR	13627	Argument	E_CORE_ERROR		13478	0					
ANR	13628	Identifier	E_CORE_ERROR		13478	0					
ANR	13629	Argument	"""%s::%s() must be derived from %s::%s"""		13478	1					
ANR	13630	PrimaryExpression	"""%s::%s() must be derived from %s::%s"""		13478	0					
ANR	13631	Argument	ce -> name		13478	2					
ANR	13632	PtrMemberAccess	ce -> name		13478	0					
ANR	13633	Identifier	ce		13478	0					
ANR	13634	Identifier	name		13478	1					
ANR	13635	Argument	get_active_function_name ( TSRMLS_C )		13478	3					
ANR	13636	CallExpression	get_active_function_name ( TSRMLS_C )		13478	0					
ANR	13637	Callee	get_active_function_name		13478	0					
ANR	13638	Identifier	get_active_function_name		13478	0					
ANR	13639	ArgumentList	TSRMLS_C		13478	1					
ANR	13640	Argument	TSRMLS_C		13478	0					
ANR	13641	Identifier	TSRMLS_C		13478	0					
ANR	13642	Argument	Z_OBJCE_P ( this_ptr ) -> name		13478	4					
ANR	13643	PtrMemberAccess	Z_OBJCE_P ( this_ptr ) -> name		13478	0					
ANR	13644	CallExpression	Z_OBJCE_P ( this_ptr )		13478	0					
ANR	13645	Callee	Z_OBJCE_P		13478	0					
ANR	13646	Identifier	Z_OBJCE_P		13478	0					
ANR	13647	ArgumentList	this_ptr		13478	1					
ANR	13648	Argument	this_ptr		13478	0					
ANR	13649	Identifier	this_ptr		13478	0					
ANR	13650	Identifier	name		13478	1					
ANR	13651	Argument	get_active_function_name ( TSRMLS_C )		13478	5					
ANR	13652	CallExpression	get_active_function_name ( TSRMLS_C )		13478	0					
ANR	13653	Callee	get_active_function_name		13478	0					
ANR	13654	Identifier	get_active_function_name		13478	0					
ANR	13655	ArgumentList	TSRMLS_C		13478	1					
ANR	13656	Argument	TSRMLS_C		13478	0					
ANR	13657	Identifier	TSRMLS_C		13478	0					
ANR	13658	Statement	retval	960:2:23032:23037	13478	42	True				
ANR	13659	Statement	=	960:9:23039:23039	13478	43	True				
ANR	13660	Statement	zend_parse_va_args	960:11:23041:23058	13478	44	True				
ANR	13661	Statement	(	960:29:23059:23059	13478	45	True				
ANR	13662	Statement	num_args	960:30:23060:23067	13478	46	True				
ANR	13663	Statement	","	960:38:23068:23068	13478	47	True				
ANR	13664	Statement	p	960:40:23070:23070	13478	48	True				
ANR	13665	Statement	","	960:41:23071:23071	13478	49	True				
ANR	13666	Statement	&	960:43:23073:23073	13478	50	True				
ANR	13667	Statement	va	960:44:23074:23075	13478	51	True				
ANR	13668	Statement	","	960:46:23076:23076	13478	52	True				
ANR	13669	Statement	0	960:48:23078:23078	13478	53	True				
ANR	13670	Statement	TSRMLS_CC	960:50:23080:23088	13478	54	True				
ANR	13671	Statement	)	960:59:23089:23089	13478	55	True				
ANR	13672	ExpressionStatement		960:60:23090:23090	13478	56	True				
ANR	13673	ExpressionStatement	va_end ( va )	961:2:23094:23104	13478	57	True				
ANR	13674	CallExpression	va_end ( va )		13478	0					
ANR	13675	Callee	va_end		13478	0					
ANR	13676	Identifier	va_end		13478	0					
ANR	13677	ArgumentList	va		13478	1					
ANR	13678	Argument	va		13478	0					
ANR	13679	Identifier	va		13478	0					
ANR	13680	ReturnStatement	return retval ;	963:1:23110:23123	13478	6	True				
ANR	13681	Identifier	retval		13478	0					
ANR	13682	ReturnType	ZEND_API int		13478	1					
ANR	13683	Identifier	zend_parse_method_parameters		13478	2					
ANR	13684	ParameterList	"int num_args TSRMLS_DC , zval * this_ptr , const char * type_spec"		13478	3					
ANR	13685	Parameter	int num_args TSRMLS_DC	931:42:22250:22271	13478	0	True				
ANR	13686	ParameterType	int num_args		13478	0					
ANR	13687	Identifier	TSRMLS_DC		13478	1					
ANR	13688	Parameter	zval * this_ptr	931:66:22274:22287	13478	1	True				
ANR	13689	ParameterType	zval *		13478	0					
ANR	13690	Identifier	this_ptr		13478	1					
ANR	13691	Parameter	const char * type_spec	931:82:22290:22310	13478	2	True				
ANR	13692	ParameterType	const char *		13478	0					
ANR	13693	Identifier	type_spec		13478	1					
ANR	13694	CFGEntryNode	ENTRY		13478		True				
ANR	13695	CFGExitNode	EXIT		13478		True				
ANR	13696	Symbol	ce		13478						
ANR	13697	Symbol	Z_OBJCE_P ( this_ptr ) -> name		13478						
ANR	13698	Symbol	get_active_function_name		13478						
ANR	13699	Symbol	va		13478						
ANR	13700	Symbol	* ce		13478						
ANR	13701	Symbol	* object		13478						
ANR	13702	Symbol	TSRMLS_DC		13478						
ANR	13703	Symbol	retval		13478						
ANR	13704	Symbol	p		13478						
ANR	13705	Symbol	this_ptr		13478						
ANR	13706	Symbol	TSRMLS_C		13478						
ANR	13707	Symbol	type_spec		13478						
ANR	13708	Symbol	num_args		13478						
ANR	13709	Symbol	E_CORE_ERROR		13478						
ANR	13710	Symbol	Z_OBJCE_P		13478						
ANR	13711	Symbol	ce -> name		13478						
ANR	13712	Symbol	object		13478						
ANR	13713	Symbol	* Z_OBJCE_P		13478						
ANR	13714	Function	zend_parse_method_parameters_ex	967:0:23138:24189							
ANR	13715	FunctionDef	"zend_parse_method_parameters_ex (int flags , int num_args TSRMLS_DC , zval * this_ptr , const char * type_spec)"		13714	0					
ANR	13716	CompoundStatement		968:0:23272:24189	13714	0					
ANR	13717	IdentifierDeclStatement	va_list va ;	969:1:23275:23285	13714	0	True				
ANR	13718	IdentifierDecl	va		13714	0					
ANR	13719	IdentifierDeclType	va_list		13714	0					
ANR	13720	Identifier	va		13714	1					
ANR	13721	IdentifierDeclStatement	int retval ;	970:1:23288:23298	13714	1	True				
ANR	13722	IdentifierDecl	retval		13714	0					
ANR	13723	IdentifierDeclType	int		13714	0					
ANR	13724	Identifier	retval		13714	1					
ANR	13725	IdentifierDeclStatement	const char * p = type_spec ;	971:1:23301:23326	13714	2	True				
ANR	13726	IdentifierDecl	* p = type_spec		13714	0					
ANR	13727	IdentifierDeclType	const char *		13714	0					
ANR	13728	Identifier	p		13714	1					
ANR	13729	AssignmentExpression	* p = type_spec		13714	2		=			
ANR	13730	Identifier	type_spec		13714	0					
ANR	13731	Identifier	type_spec		13714	1					
ANR	13732	IdentifierDeclStatement	zval * * object ;	972:1:23329:23342	13714	3	True				
ANR	13733	IdentifierDecl	* * object		13714	0					
ANR	13734	IdentifierDeclType	zval * *		13714	0					
ANR	13735	Identifier	object		13714	1					
ANR	13736	IdentifierDeclStatement	zend_class_entry * ce ;	973:1:23345:23365	13714	4	True				
ANR	13737	IdentifierDecl	* ce		13714	0					
ANR	13738	IdentifierDeclType	zend_class_entry *		13714	0					
ANR	13739	Identifier	ce		13714	1					
ANR	13740	IdentifierDeclStatement	int quiet = flags & ZEND_PARSE_PARAMS_QUIET ;	974:1:23368:23411	13714	5	True				
ANR	13741	IdentifierDecl	quiet = flags & ZEND_PARSE_PARAMS_QUIET		13714	0					
ANR	13742	IdentifierDeclType	int		13714	0					
ANR	13743	Identifier	quiet		13714	1					
ANR	13744	AssignmentExpression	quiet = flags & ZEND_PARSE_PARAMS_QUIET		13714	2		=			
ANR	13745	Identifier	quiet		13714	0					
ANR	13746	BitAndExpression	flags & ZEND_PARSE_PARAMS_QUIET		13714	1		&			
ANR	13747	Identifier	flags		13714	0					
ANR	13748	Identifier	ZEND_PARSE_PARAMS_QUIET		13714	1					
ANR	13749	IfStatement	if ( ! this_ptr )		13714	6					
ANR	13750	Condition	! this_ptr	976:5:23419:23427	13714	0	True				
ANR	13751	UnaryOperationExpression	! this_ptr		13714	0					
ANR	13752	UnaryOperator	!		13714	0					
ANR	13753	Identifier	this_ptr		13714	1					
ANR	13754	CompoundStatement		9:16:157:157	13714	1					
ANR	13755	ExpressionStatement	"RETURN_IF_ZERO_ARGS ( num_args , p , quiet )"	977:2:23434:23473	13714	0	True				
ANR	13756	CallExpression	"RETURN_IF_ZERO_ARGS ( num_args , p , quiet )"		13714	0					
ANR	13757	Callee	RETURN_IF_ZERO_ARGS		13714	0					
ANR	13758	Identifier	RETURN_IF_ZERO_ARGS		13714	0					
ANR	13759	ArgumentList	num_args		13714	1					
ANR	13760	Argument	num_args		13714	0					
ANR	13761	Identifier	num_args		13714	0					
ANR	13762	Argument	p		13714	1					
ANR	13763	Identifier	p		13714	0					
ANR	13764	Argument	quiet		13714	2					
ANR	13765	Identifier	quiet		13714	0					
ANR	13766	ExpressionStatement	"va_start ( va , type_spec )"	979:2:23478:23501	13714	1	True				
ANR	13767	CallExpression	"va_start ( va , type_spec )"		13714	0					
ANR	13768	Callee	va_start		13714	0					
ANR	13769	Identifier	va_start		13714	0					
ANR	13770	ArgumentList	va		13714	1					
ANR	13771	Argument	va		13714	0					
ANR	13772	Identifier	va		13714	0					
ANR	13773	Argument	type_spec		13714	1					
ANR	13774	Identifier	type_spec		13714	0					
ANR	13775	Statement	retval	980:2:23505:23510	13714	2	True				
ANR	13776	Statement	=	980:9:23512:23512	13714	3	True				
ANR	13777	Statement	zend_parse_va_args	980:11:23514:23531	13714	4	True				
ANR	13778	Statement	(	980:29:23532:23532	13714	5	True				
ANR	13779	Statement	num_args	980:30:23533:23540	13714	6	True				
ANR	13780	Statement	","	980:38:23541:23541	13714	7	True				
ANR	13781	Statement	type_spec	980:40:23543:23551	13714	8	True				
ANR	13782	Statement	","	980:49:23552:23552	13714	9	True				
ANR	13783	Statement	&	980:51:23554:23554	13714	10	True				
ANR	13784	Statement	va	980:52:23555:23556	13714	11	True				
ANR	13785	Statement	","	980:54:23557:23557	13714	12	True				
ANR	13786	Statement	flags	980:56:23559:23563	13714	13	True				
ANR	13787	Statement	TSRMLS_CC	980:62:23565:23573	13714	14	True				
ANR	13788	Statement	)	980:71:23574:23574	13714	15	True				
ANR	13789	ExpressionStatement		980:72:23575:23575	13714	16	True				
ANR	13790	ExpressionStatement	va_end ( va )	981:2:23579:23589	13714	17	True				
ANR	13791	CallExpression	va_end ( va )		13714	0					
ANR	13792	Callee	va_end		13714	0					
ANR	13793	Identifier	va_end		13714	0					
ANR	13794	ArgumentList	va		13714	1					
ANR	13795	Argument	va		13714	0					
ANR	13796	Identifier	va		13714	0					
ANR	13797	ElseStatement	else		13714	0					
ANR	13798	CompoundStatement		15:8:326:326	13714	0					
ANR	13799	ExpressionStatement	p ++	983:2:23603:23606	13714	0	True				
ANR	13800	PostIncDecOperationExpression	p ++		13714	0					
ANR	13801	Identifier	p		13714	0					
ANR	13802	IncDec	++		13714	1					
ANR	13803	ExpressionStatement	"RETURN_IF_ZERO_ARGS ( num_args , p , quiet )"	984:2:23610:23649	13714	1	True				
ANR	13804	CallExpression	"RETURN_IF_ZERO_ARGS ( num_args , p , quiet )"		13714	0					
ANR	13805	Callee	RETURN_IF_ZERO_ARGS		13714	0					
ANR	13806	Identifier	RETURN_IF_ZERO_ARGS		13714	0					
ANR	13807	ArgumentList	num_args		13714	1					
ANR	13808	Argument	num_args		13714	0					
ANR	13809	Identifier	num_args		13714	0					
ANR	13810	Argument	p		13714	1					
ANR	13811	Identifier	p		13714	0					
ANR	13812	Argument	quiet		13714	2					
ANR	13813	Identifier	quiet		13714	0					
ANR	13814	ExpressionStatement	"va_start ( va , type_spec )"	986:2:23654:23677	13714	2	True				
ANR	13815	CallExpression	"va_start ( va , type_spec )"		13714	0					
ANR	13816	Callee	va_start		13714	0					
ANR	13817	Identifier	va_start		13714	0					
ANR	13818	ArgumentList	va		13714	1					
ANR	13819	Argument	va		13714	0					
ANR	13820	Identifier	va		13714	0					
ANR	13821	Argument	type_spec		13714	1					
ANR	13822	Identifier	type_spec		13714	0					
ANR	13823	Statement	object	988:2:23682:23687	13714	3	True				
ANR	13824	Statement	=	988:9:23689:23689	13714	4	True				
ANR	13825	Statement	va_arg	988:11:23691:23696	13714	5	True				
ANR	13826	Statement	(	988:17:23697:23697	13714	6	True				
ANR	13827	Statement	va	988:18:23698:23699	13714	7	True				
ANR	13828	Statement	","	988:20:23700:23700	13714	8	True				
ANR	13829	Statement	zval	988:22:23702:23705	13714	9	True				
ANR	13830	Statement	*	988:27:23707:23707	13714	10	True				
ANR	13831	Statement	*	988:28:23708:23708	13714	11	True				
ANR	13832	Statement	)	988:29:23709:23709	13714	12	True				
ANR	13833	ExpressionStatement		988:30:23710:23710	13714	13	True				
ANR	13834	Statement	ce	989:2:23714:23715	13714	14	True				
ANR	13835	Statement	=	989:5:23717:23717	13714	15	True				
ANR	13836	Statement	va_arg	989:7:23719:23724	13714	16	True				
ANR	13837	Statement	(	989:13:23725:23725	13714	17	True				
ANR	13838	Statement	va	989:14:23726:23727	13714	18	True				
ANR	13839	Statement	","	989:16:23728:23728	13714	19	True				
ANR	13840	Statement	zend_class_entry	989:18:23730:23745	13714	20	True				
ANR	13841	Statement	*	989:35:23747:23747	13714	21	True				
ANR	13842	Statement	)	989:36:23748:23748	13714	22	True				
ANR	13843	ExpressionStatement		989:37:23749:23749	13714	23	True				
ANR	13844	ExpressionStatement	* object = this_ptr	990:2:23753:23771	13714	24	True				
ANR	13845	AssignmentExpression	* object = this_ptr		13714	0		=			
ANR	13846	UnaryOperationExpression	* object		13714	0					
ANR	13847	UnaryOperator	*		13714	0					
ANR	13848	Identifier	object		13714	1					
ANR	13849	Identifier	this_ptr		13714	1					
ANR	13850	Statement	if	992:2:23776:23777	13714	25	True				
ANR	13851	Statement	(	992:5:23779:23779	13714	26	True				
ANR	13852	Statement	ce	992:6:23780:23781	13714	27	True				
ANR	13853	Statement	&&	992:9:23783:23784	13714	28	True				
ANR	13854	Statement	!	992:12:23786:23786	13714	29	True				
ANR	13855	Statement	instanceof_function	992:13:23787:23805	13714	30	True				
ANR	13856	Statement	(	992:32:23806:23806	13714	31	True				
ANR	13857	Statement	Z_OBJCE_P	992:33:23807:23815	13714	32	True				
ANR	13858	Statement	(	992:42:23816:23816	13714	33	True				
ANR	13859	Statement	this_ptr	992:43:23817:23824	13714	34	True				
ANR	13860	Statement	)	992:51:23825:23825	13714	35	True				
ANR	13861	Statement	","	992:52:23826:23826	13714	36	True				
ANR	13862	Statement	ce	992:54:23828:23829	13714	37	True				
ANR	13863	Statement	TSRMLS_CC	992:57:23831:23839	13714	38	True				
ANR	13864	Statement	)	992:66:23840:23840	13714	39	True				
ANR	13865	Statement	)	992:67:23841:23841	13714	40	True				
ANR	13866	CompoundStatement		25:69:570:570	13714	41					
ANR	13867	IfStatement	if ( ! quiet )		13714	0					
ANR	13868	Condition	! quiet	993:7:23852:23857	13714	0	True				
ANR	13869	UnaryOperationExpression	! quiet		13714	0					
ANR	13870	UnaryOperator	!		13714	0					
ANR	13871	Identifier	quiet		13714	1					
ANR	13872	CompoundStatement		26:15:587:587	13714	1					
ANR	13873	ExpressionStatement	"zend_error ( E_CORE_ERROR , ""%s::%s() must be derived from %s::%s"" , ce -> name , get_active_function_name ( TSRMLS_C ) , Z_OBJCE_P ( this_ptr ) -> name , get_active_function_name ( TSRMLS_C ) )"	994:4:23866:24044	13714	0	True				
ANR	13874	CallExpression	"zend_error ( E_CORE_ERROR , ""%s::%s() must be derived from %s::%s"" , ce -> name , get_active_function_name ( TSRMLS_C ) , Z_OBJCE_P ( this_ptr ) -> name , get_active_function_name ( TSRMLS_C ) )"		13714	0					
ANR	13875	Callee	zend_error		13714	0					
ANR	13876	Identifier	zend_error		13714	0					
ANR	13877	ArgumentList	E_CORE_ERROR		13714	1					
ANR	13878	Argument	E_CORE_ERROR		13714	0					
ANR	13879	Identifier	E_CORE_ERROR		13714	0					
ANR	13880	Argument	"""%s::%s() must be derived from %s::%s"""		13714	1					
ANR	13881	PrimaryExpression	"""%s::%s() must be derived from %s::%s"""		13714	0					
ANR	13882	Argument	ce -> name		13714	2					
ANR	13883	PtrMemberAccess	ce -> name		13714	0					
ANR	13884	Identifier	ce		13714	0					
ANR	13885	Identifier	name		13714	1					
ANR	13886	Argument	get_active_function_name ( TSRMLS_C )		13714	3					
ANR	13887	CallExpression	get_active_function_name ( TSRMLS_C )		13714	0					
ANR	13888	Callee	get_active_function_name		13714	0					
ANR	13889	Identifier	get_active_function_name		13714	0					
ANR	13890	ArgumentList	TSRMLS_C		13714	1					
ANR	13891	Argument	TSRMLS_C		13714	0					
ANR	13892	Identifier	TSRMLS_C		13714	0					
ANR	13893	Argument	Z_OBJCE_P ( this_ptr ) -> name		13714	4					
ANR	13894	PtrMemberAccess	Z_OBJCE_P ( this_ptr ) -> name		13714	0					
ANR	13895	CallExpression	Z_OBJCE_P ( this_ptr )		13714	0					
ANR	13896	Callee	Z_OBJCE_P		13714	0					
ANR	13897	Identifier	Z_OBJCE_P		13714	0					
ANR	13898	ArgumentList	this_ptr		13714	1					
ANR	13899	Argument	this_ptr		13714	0					
ANR	13900	Identifier	this_ptr		13714	0					
ANR	13901	Identifier	name		13714	1					
ANR	13902	Argument	get_active_function_name ( TSRMLS_C )		13714	5					
ANR	13903	CallExpression	get_active_function_name ( TSRMLS_C )		13714	0					
ANR	13904	Callee	get_active_function_name		13714	0					
ANR	13905	Identifier	get_active_function_name		13714	0					
ANR	13906	ArgumentList	TSRMLS_C		13714	1					
ANR	13907	Argument	TSRMLS_C		13714	0					
ANR	13908	Identifier	TSRMLS_C		13714	0					
ANR	13909	ExpressionStatement	va_end ( va )	997:3:24054:24064	13714	1	True				
ANR	13910	CallExpression	va_end ( va )		13714	0					
ANR	13911	Callee	va_end		13714	0					
ANR	13912	Identifier	va_end		13714	0					
ANR	13913	ArgumentList	va		13714	1					
ANR	13914	Argument	va		13714	0					
ANR	13915	Identifier	va		13714	0					
ANR	13916	ReturnStatement	return FAILURE ;	998:3:24069:24083	13714	2	True				
ANR	13917	Identifier	FAILURE		13714	0					
ANR	13918	Statement	retval	1001:2:24092:24097	13714	42	True				
ANR	13919	Statement	=	1001:9:24099:24099	13714	43	True				
ANR	13920	Statement	zend_parse_va_args	1001:11:24101:24118	13714	44	True				
ANR	13921	Statement	(	1001:29:24119:24119	13714	45	True				
ANR	13922	Statement	num_args	1001:30:24120:24127	13714	46	True				
ANR	13923	Statement	","	1001:38:24128:24128	13714	47	True				
ANR	13924	Statement	p	1001:40:24130:24130	13714	48	True				
ANR	13925	Statement	","	1001:41:24131:24131	13714	49	True				
ANR	13926	Statement	&	1001:43:24133:24133	13714	50	True				
ANR	13927	Statement	va	1001:44:24134:24135	13714	51	True				
ANR	13928	Statement	","	1001:46:24136:24136	13714	52	True				
ANR	13929	Statement	flags	1001:48:24138:24142	13714	53	True				
ANR	13930	Statement	TSRMLS_CC	1001:54:24144:24152	13714	54	True				
ANR	13931	Statement	)	1001:63:24153:24153	13714	55	True				
ANR	13932	ExpressionStatement		1001:64:24154:24154	13714	56	True				
ANR	13933	ExpressionStatement	va_end ( va )	1002:2:24158:24168	13714	57	True				
ANR	13934	CallExpression	va_end ( va )		13714	0					
ANR	13935	Callee	va_end		13714	0					
ANR	13936	Identifier	va_end		13714	0					
ANR	13937	ArgumentList	va		13714	1					
ANR	13938	Argument	va		13714	0					
ANR	13939	Identifier	va		13714	0					
ANR	13940	ReturnStatement	return retval ;	1004:1:24174:24187	13714	7	True				
ANR	13941	Identifier	retval		13714	0					
ANR	13942	ReturnType	ZEND_API int		13714	1					
ANR	13943	Identifier	zend_parse_method_parameters_ex		13714	2					
ANR	13944	ParameterList	"int flags , int num_args TSRMLS_DC , zval * this_ptr , const char * type_spec"		13714	3					
ANR	13945	Parameter	int flags	967:45:23183:23191	13714	0	True				
ANR	13946	ParameterType	int		13714	0					
ANR	13947	Identifier	flags		13714	1					
ANR	13948	Parameter	int num_args TSRMLS_DC	967:56:23194:23215	13714	1	True				
ANR	13949	ParameterType	int num_args		13714	0					
ANR	13950	Identifier	TSRMLS_DC		13714	1					
ANR	13951	Parameter	zval * this_ptr	967:80:23218:23231	13714	2	True				
ANR	13952	ParameterType	zval *		13714	0					
ANR	13953	Identifier	this_ptr		13714	1					
ANR	13954	Parameter	const char * type_spec	967:96:23234:23254	13714	3	True				
ANR	13955	ParameterType	const char *		13714	0					
ANR	13956	Identifier	type_spec		13714	1					
ANR	13957	CFGEntryNode	ENTRY		13714		True				
ANR	13958	CFGExitNode	EXIT		13714		True				
ANR	13959	Symbol	ce		13714						
ANR	13960	Symbol	Z_OBJCE_P ( this_ptr ) -> name		13714						
ANR	13961	Symbol	flags		13714						
ANR	13962	Symbol	get_active_function_name		13714						
ANR	13963	Symbol	va		13714						
ANR	13964	Symbol	* ce		13714						
ANR	13965	Symbol	* object		13714						
ANR	13966	Symbol	TSRMLS_DC		13714						
ANR	13967	Symbol	FAILURE		13714						
ANR	13968	Symbol	retval		13714						
ANR	13969	Symbol	p		13714						
ANR	13970	Symbol	this_ptr		13714						
ANR	13971	Symbol	TSRMLS_C		13714						
ANR	13972	Symbol	type_spec		13714						
ANR	13973	Symbol	num_args		13714						
ANR	13974	Symbol	E_CORE_ERROR		13714						
ANR	13975	Symbol	ZEND_PARSE_PARAMS_QUIET		13714						
ANR	13976	Symbol	Z_OBJCE_P		13714						
ANR	13977	Symbol	quiet		13714						
ANR	13978	Symbol	ce -> name		13714						
ANR	13979	Symbol	object		13714						
ANR	13980	Symbol	* Z_OBJCE_P		13714						
ANR	13981	Function	_array_init	1009:0:24239:24483							
ANR	13982	FunctionDef	"_array_init (zval * arg , uint size ZEND_FILE_LINE_DC)"		13981	0					
ANR	13983	CompoundStatement		1010:0:24314:24483	13981	0					
ANR	13984	ExpressionStatement	ALLOC_HASHTABLE_REL ( Z_ARRVAL_P ( arg ) )	1011:1:24317:24353	13981	0	True				
ANR	13985	CallExpression	ALLOC_HASHTABLE_REL ( Z_ARRVAL_P ( arg ) )		13981	0					
ANR	13986	Callee	ALLOC_HASHTABLE_REL		13981	0					
ANR	13987	Identifier	ALLOC_HASHTABLE_REL		13981	0					
ANR	13988	ArgumentList	Z_ARRVAL_P ( arg )		13981	1					
ANR	13989	Argument	Z_ARRVAL_P ( arg )		13981	0					
ANR	13990	CallExpression	Z_ARRVAL_P ( arg )		13981	0					
ANR	13991	Callee	Z_ARRVAL_P		13981	0					
ANR	13992	Identifier	Z_ARRVAL_P		13981	0					
ANR	13993	ArgumentList	arg		13981	1					
ANR	13994	Argument	arg		13981	0					
ANR	13995	Identifier	arg		13981	0					
ANR	13996	Statement	_zend_hash_init	1013:1:24357:24371	13981	1	True				
ANR	13997	Statement	(	1013:16:24372:24372	13981	2	True				
ANR	13998	Statement	Z_ARRVAL_P	1013:17:24373:24382	13981	3	True				
ANR	13999	Statement	(	1013:27:24383:24383	13981	4	True				
ANR	14000	Statement	arg	1013:28:24384:24386	13981	5	True				
ANR	14001	Statement	)	1013:31:24387:24387	13981	6	True				
ANR	14002	Statement	","	1013:32:24388:24388	13981	7	True				
ANR	14003	Statement	size	1013:34:24390:24393	13981	8	True				
ANR	14004	Statement	","	1013:38:24394:24394	13981	9	True				
ANR	14005	Statement	ZVAL_PTR_DTOR	1013:40:24396:24408	13981	10	True				
ANR	14006	Statement	","	1013:53:24409:24409	13981	11	True				
ANR	14007	Statement	0	1013:55:24411:24411	13981	12	True				
ANR	14008	Statement	ZEND_FILE_LINE_RELAY_CC	1013:57:24413:24435	13981	13	True				
ANR	14009	Statement	)	1013:80:24436:24436	13981	14	True				
ANR	14010	ExpressionStatement		1013:81:24437:24437	13981	15	True				
ANR	14011	ExpressionStatement	Z_TYPE_P ( arg ) = IS_ARRAY	1014:1:24440:24464	13981	16	True				
ANR	14012	AssignmentExpression	Z_TYPE_P ( arg ) = IS_ARRAY		13981	0		=			
ANR	14013	CallExpression	Z_TYPE_P ( arg )		13981	0					
ANR	14014	Callee	Z_TYPE_P		13981	0					
ANR	14015	Identifier	Z_TYPE_P		13981	0					
ANR	14016	ArgumentList	arg		13981	1					
ANR	14017	Argument	arg		13981	0					
ANR	14018	Identifier	arg		13981	0					
ANR	14019	Identifier	IS_ARRAY		13981	1					
ANR	14020	ReturnStatement	return SUCCESS ;	1015:1:24467:24481	13981	17	True				
ANR	14021	Identifier	SUCCESS		13981	0					
ANR	14022	ReturnType	ZEND_API int		13981	1					
ANR	14023	Identifier	_array_init		13981	2					
ANR	14024	ParameterList	"zval * arg , uint size ZEND_FILE_LINE_DC"		13981	3					
ANR	14025	Parameter	zval * arg	1009:25:24264:24272	13981	0	True				
ANR	14026	ParameterType	zval *		13981	0					
ANR	14027	Identifier	arg		13981	1					
ANR	14028	Parameter	uint size ZEND_FILE_LINE_DC	1009:36:24275:24301	13981	1	True				
ANR	14029	ParameterType	uint size		13981	0					
ANR	14030	Identifier	ZEND_FILE_LINE_DC		13981	1					
ANR	14031	CFGEntryNode	ENTRY		13981		True				
ANR	14032	CFGExitNode	EXIT		13981		True				
ANR	14033	Symbol	SUCCESS		13981						
ANR	14034	Symbol	IS_ARRAY		13981						
ANR	14035	Symbol	arg		13981						
ANR	14036	Symbol	ZEND_FILE_LINE_DC		13981						
ANR	14037	Symbol	Z_ARRVAL_P		13981						
ANR	14038	Symbol	Z_TYPE_P		13981						
ANR	14039	DeclStmt									
ANR	14040	Decl							zval	zval *	obj
ANR	14041	DeclStmt									
ANR	14042	Decl							zend_object_handlers	zend_object_handlers *	obj_ht
ANR	14043	DeclStmt									
ANR	14044	Decl							zval	zval *	member
ANR	14045	Function	zend_merge_properties	1038:0:25196:25652							
ANR	14046	FunctionDef	"zend_merge_properties (zval * obj , HashTable * properties , int destroy_ht TSRMLS_DC)"		14045	0					
ANR	14047	CompoundStatement		1039:0:25302:25652	14045	0					
ANR	14048	IdentifierDeclStatement	const zend_object_handlers * obj_ht = Z_OBJ_HT_P ( obj ) ;	1040:1:25305:25357	14045	0	True				
ANR	14049	IdentifierDecl	* obj_ht = Z_OBJ_HT_P ( obj )		14045	0					
ANR	14050	IdentifierDeclType	const zend_object_handlers *		14045	0					
ANR	14051	Identifier	obj_ht		14045	1					
ANR	14052	AssignmentExpression	* obj_ht = Z_OBJ_HT_P ( obj )		14045	2		=			
ANR	14053	Identifier	obj_ht		14045	0					
ANR	14054	CallExpression	Z_OBJ_HT_P ( obj )		14045	1					
ANR	14055	Callee	Z_OBJ_HT_P		14045	0					
ANR	14056	Identifier	Z_OBJ_HT_P		14045	0					
ANR	14057	ArgumentList	obj		14045	1					
ANR	14058	Argument	obj		14045	0					
ANR	14059	Identifier	obj		14045	0					
ANR	14060	IdentifierDeclStatement	zend_class_entry * old_scope = EG ( scope ) ;	1041:1:25360:25399	14045	1	True				
ANR	14061	IdentifierDecl	* old_scope = EG ( scope )		14045	0					
ANR	14062	IdentifierDeclType	zend_class_entry *		14045	0					
ANR	14063	Identifier	old_scope		14045	1					
ANR	14064	AssignmentExpression	* old_scope = EG ( scope )		14045	2		=			
ANR	14065	Identifier	old_scope		14045	0					
ANR	14066	CallExpression	EG ( scope )		14045	1					
ANR	14067	Callee	EG		14045	0					
ANR	14068	Identifier	EG		14045	0					
ANR	14069	ArgumentList	scope		14045	1					
ANR	14070	Argument	scope		14045	0					
ANR	14071	Identifier	scope		14045	0					
ANR	14072	ExpressionStatement	EG ( scope ) = Z_OBJCE_P ( obj )	1043:1:25403:25429	14045	2	True				
ANR	14073	AssignmentExpression	EG ( scope ) = Z_OBJCE_P ( obj )		14045	0		=			
ANR	14074	CallExpression	EG ( scope )		14045	0					
ANR	14075	Callee	EG		14045	0					
ANR	14076	Identifier	EG		14045	0					
ANR	14077	ArgumentList	scope		14045	1					
ANR	14078	Argument	scope		14045	0					
ANR	14079	Identifier	scope		14045	0					
ANR	14080	CallExpression	Z_OBJCE_P ( obj )		14045	1					
ANR	14081	Callee	Z_OBJCE_P		14045	0					
ANR	14082	Identifier	Z_OBJCE_P		14045	0					
ANR	14083	ArgumentList	obj		14045	1					
ANR	14084	Argument	obj		14045	0					
ANR	14085	Identifier	obj		14045	0					
ANR	14086	Statement	zend_hash_apply_with_arguments	1044:1:25432:25461	14045	3	True				
ANR	14087	Statement	(	1044:31:25462:25462	14045	4	True				
ANR	14088	Statement	properties	1044:32:25463:25472	14045	5	True				
ANR	14089	Statement	TSRMLS_CC	1044:43:25474:25482	14045	6	True				
ANR	14090	Statement	","	1044:52:25483:25483	14045	7	True				
ANR	14091	Statement	(	1044:54:25485:25485	14045	8	True				
ANR	14092	Statement	apply_func_args_t	1044:55:25486:25502	14045	9	True				
ANR	14093	Statement	)	1044:72:25503:25503	14045	10	True				
ANR	14094	Statement	zend_merge_property	1044:73:25504:25522	14045	11	True				
ANR	14095	Statement	","	1044:92:25523:25523	14045	12	True				
ANR	14096	Statement	2	1044:94:25525:25525	14045	13	True				
ANR	14097	Statement	","	1044:95:25526:25526	14045	14	True				
ANR	14098	Statement	obj	1044:97:25528:25530	14045	15	True				
ANR	14099	Statement	","	1044:100:25531:25531	14045	16	True				
ANR	14100	Statement	obj_ht	1044:102:25533:25538	14045	17	True				
ANR	14101	Statement	)	1044:108:25539:25539	14045	18	True				
ANR	14102	ExpressionStatement		1044:109:25540:25540	14045	19	True				
ANR	14103	ExpressionStatement	EG ( scope ) = old_scope	1045:1:25543:25564	14045	20	True				
ANR	14104	AssignmentExpression	EG ( scope ) = old_scope		14045	0		=			
ANR	14105	CallExpression	EG ( scope )		14045	0					
ANR	14106	Callee	EG		14045	0					
ANR	14107	Identifier	EG		14045	0					
ANR	14108	ArgumentList	scope		14045	1					
ANR	14109	Argument	scope		14045	0					
ANR	14110	Identifier	scope		14045	0					
ANR	14111	Identifier	old_scope		14045	1					
ANR	14112	IfStatement	if ( destroy_ht )		14045	21					
ANR	14113	Condition	destroy_ht	1047:5:25572:25581	14045	0	True				
ANR	14114	Identifier	destroy_ht		14045	0					
ANR	14115	CompoundStatement		9:17:281:281	14045	1					
ANR	14116	ExpressionStatement	zend_hash_destroy ( properties )	1048:2:25588:25617	14045	0	True				
ANR	14117	CallExpression	zend_hash_destroy ( properties )		14045	0					
ANR	14118	Callee	zend_hash_destroy		14045	0					
ANR	14119	Identifier	zend_hash_destroy		14045	0					
ANR	14120	ArgumentList	properties		14045	1					
ANR	14121	Argument	properties		14045	0					
ANR	14122	Identifier	properties		14045	0					
ANR	14123	ExpressionStatement	FREE_HASHTABLE ( properties )	1049:2:25621:25647	14045	1	True				
ANR	14124	CallExpression	FREE_HASHTABLE ( properties )		14045	0					
ANR	14125	Callee	FREE_HASHTABLE		14045	0					
ANR	14126	Identifier	FREE_HASHTABLE		14045	0					
ANR	14127	ArgumentList	properties		14045	1					
ANR	14128	Argument	properties		14045	0					
ANR	14129	Identifier	properties		14045	0					
ANR	14130	ReturnType	ZEND_API void		14045	1					
ANR	14131	Identifier	zend_merge_properties		14045	2					
ANR	14132	ParameterList	"zval * obj , HashTable * properties , int destroy_ht TSRMLS_DC"		14045	3					
ANR	14133	Parameter	zval * obj	1038:36:25232:25240	14045	0	True				
ANR	14134	ParameterType	zval *		14045	0					
ANR	14135	Identifier	obj		14045	1					
ANR	14136	Parameter	HashTable * properties	1038:47:25243:25263	14045	1	True				
ANR	14137	ParameterType	HashTable *		14045	0					
ANR	14138	Identifier	properties		14045	1					
ANR	14139	Parameter	int destroy_ht TSRMLS_DC	1038:70:25266:25289	14045	2	True				
ANR	14140	ParameterType	int destroy_ht		14045	0					
ANR	14141	Identifier	TSRMLS_DC		14045	1					
ANR	14142	CFGEntryNode	ENTRY		14045		True				
ANR	14143	CFGExitNode	EXIT		14045		True				
ANR	14144	Symbol	EG		14045						
ANR	14145	Symbol	obj_ht		14045						
ANR	14146	Symbol	old_scope		14045						
ANR	14147	Symbol	obj		14045						
ANR	14148	Symbol	destroy_ht		14045						
ANR	14149	Symbol	scope		14045						
ANR	14150	Symbol	Z_OBJ_HT_P		14045						
ANR	14151	Symbol	Z_OBJCE_P		14045						
ANR	14152	Symbol	TSRMLS_DC		14045						
ANR	14153	Symbol	properties		14045						
ANR	14154	Function	zval_update_class_constant	1054:0:25665:26662							
ANR	14155	FunctionDef	"zval_update_class_constant (zval * * pp , int is_static , int offset TSRMLS_DC)"		14154	0					
ANR	14156	CompoundStatement		1055:0:25761:26662	14154	0					
ANR	14157	IfStatement	if ( IS_CONSTANT_TYPE ( Z_TYPE_PP ( pp ) ) )		14154	0					
ANR	14158	Condition	IS_CONSTANT_TYPE ( Z_TYPE_PP ( pp ) )	1056:5:25768:25798	14154	0	True				
ANR	14159	CallExpression	IS_CONSTANT_TYPE ( Z_TYPE_PP ( pp ) )		14154	0					
ANR	14160	Callee	IS_CONSTANT_TYPE		14154	0					
ANR	14161	Identifier	IS_CONSTANT_TYPE		14154	0					
ANR	14162	ArgumentList	Z_TYPE_PP ( pp )		14154	1					
ANR	14163	Argument	Z_TYPE_PP ( pp )		14154	0					
ANR	14164	CallExpression	Z_TYPE_PP ( pp )		14154	0					
ANR	14165	Callee	Z_TYPE_PP		14154	0					
ANR	14166	Identifier	Z_TYPE_PP		14154	0					
ANR	14167	ArgumentList	pp		14154	1					
ANR	14168	Argument	pp		14154	0					
ANR	14169	Identifier	pp		14154	0					
ANR	14170	CompoundStatement		3:2:43:121	14154	1					
ANR	14171	IdentifierDeclStatement	zend_class_entry * * scope = EG ( in_execution ) ? & EG ( scope ) : & CG ( active_class_entry ) ;	1057:2:25805:25883	14154	0	True				
ANR	14172	IdentifierDecl	* * scope = EG ( in_execution ) ? & EG ( scope ) : & CG ( active_class_entry )		14154	0					
ANR	14173	IdentifierDeclType	zend_class_entry * *		14154	0					
ANR	14174	Identifier	scope		14154	1					
ANR	14175	AssignmentExpression	* * scope = EG ( in_execution ) ? & EG ( scope ) : & CG ( active_class_entry )		14154	2		=			
ANR	14176	Identifier	scope		14154	0					
ANR	14177	ConditionalExpression	EG ( in_execution ) ? & EG ( scope ) : & CG ( active_class_entry )		14154	1					
ANR	14178	Condition	EG ( in_execution )		14154	0					
ANR	14179	CallExpression	EG ( in_execution )		14154	0					
ANR	14180	Callee	EG		14154	0					
ANR	14181	Identifier	EG		14154	0					
ANR	14182	ArgumentList	in_execution		14154	1					
ANR	14183	Argument	in_execution		14154	0					
ANR	14184	Identifier	in_execution		14154	0					
ANR	14185	UnaryOperationExpression	& EG ( scope )		14154	1					
ANR	14186	UnaryOperator	&		14154	0					
ANR	14187	CallExpression	EG ( scope )		14154	1					
ANR	14188	Callee	EG		14154	0					
ANR	14189	Identifier	EG		14154	0					
ANR	14190	ArgumentList	scope		14154	1					
ANR	14191	Argument	scope		14154	0					
ANR	14192	Identifier	scope		14154	0					
ANR	14193	UnaryOperationExpression	& CG ( active_class_entry )		14154	2					
ANR	14194	UnaryOperator	&		14154	0					
ANR	14195	CallExpression	CG ( active_class_entry )		14154	1					
ANR	14196	Callee	CG		14154	0					
ANR	14197	Identifier	CG		14154	0					
ANR	14198	ArgumentList	active_class_entry		14154	1					
ANR	14199	Argument	active_class_entry		14154	0					
ANR	14200	Identifier	active_class_entry		14154	0					
ANR	14201	IfStatement	if ( ( * scope ) -> parent )		14154	1					
ANR	14202	Condition	( * scope ) -> parent	1059:6:25892:25907	14154	0	True				
ANR	14203	PtrMemberAccess	( * scope ) -> parent		14154	0					
ANR	14204	UnaryOperationExpression	* scope		14154	0					
ANR	14205	UnaryOperator	*		14154	0					
ANR	14206	Identifier	scope		14154	1					
ANR	14207	Identifier	parent		14154	1					
ANR	14208	CompoundStatement		8:3:208:237	14154	1					
ANR	14209	IdentifierDeclStatement	zend_class_entry * ce = * scope ;	1060:3:25915:25944	14154	0	True				
ANR	14210	IdentifierDecl	* ce = * scope		14154	0					
ANR	14211	IdentifierDeclType	zend_class_entry *		14154	0					
ANR	14212	Identifier	ce		14154	1					
ANR	14213	AssignmentExpression	* ce = * scope		14154	2		=			
ANR	14214	Identifier	ce		14154	0					
ANR	14215	UnaryOperationExpression	* scope		14154	1					
ANR	14216	UnaryOperator	*		14154	0					
ANR	14217	Identifier	scope		14154	1					
ANR	14218	IdentifierDeclStatement	HashPosition pos ;	1061:3:25949:25965	14154	1	True				
ANR	14219	IdentifierDecl	pos		14154	0					
ANR	14220	IdentifierDeclType	HashPosition		14154	0					
ANR	14221	Identifier	pos		14154	1					
ANR	14222	IdentifierDeclStatement	zend_property_info * prop_info ;	1062:3:25970:25999	14154	2	True				
ANR	14223	IdentifierDecl	* prop_info		14154	0					
ANR	14224	IdentifierDeclType	zend_property_info *		14154	0					
ANR	14225	Identifier	prop_info		14154	1					
ANR	14226	DoStatement	do		14154	3					
ANR	14227	CompoundStatement		10:6:246:246	14154	0					
ANR	14228	ForStatement	"for ( zend_hash_internal_pointer_reset_ex ( & ce -> properties_info , & pos ) ; zend_hash_get_current_data_ex ( & ce -> properties_info , ( void * * ) & prop_info , & pos ) == SUCCESS ; zend_hash_move_forward_ex ( & ce -> properties_info , & pos ) )"		14154	0					
ANR	14229	ForInit	"zend_hash_internal_pointer_reset_ex ( & ce -> properties_info , & pos ) ;"	1065:9:26019:26082	14154	0	True				
ANR	14230	CallExpression	"zend_hash_internal_pointer_reset_ex ( & ce -> properties_info , & pos )"		14154	0					
ANR	14231	Callee	zend_hash_internal_pointer_reset_ex		14154	0					
ANR	14232	Identifier	zend_hash_internal_pointer_reset_ex		14154	0					
ANR	14233	ArgumentList	& ce -> properties_info		14154	1					
ANR	14234	Argument	& ce -> properties_info		14154	0					
ANR	14235	UnaryOperationExpression	& ce -> properties_info		14154	0					
ANR	14236	UnaryOperator	&		14154	0					
ANR	14237	PtrMemberAccess	ce -> properties_info		14154	1					
ANR	14238	Identifier	ce		14154	0					
ANR	14239	Identifier	properties_info		14154	1					
ANR	14240	Argument	& pos		14154	1					
ANR	14241	UnaryOperationExpression	& pos		14154	0					
ANR	14242	UnaryOperator	&		14154	0					
ANR	14243	Identifier	pos		14154	1					
ANR	14244	Condition	"zend_hash_get_current_data_ex ( & ce -> properties_info , ( void * * ) & prop_info , & pos ) == SUCCESS"	1066:9:26093:26182	14154	1	True				
ANR	14245	EqualityExpression	"zend_hash_get_current_data_ex ( & ce -> properties_info , ( void * * ) & prop_info , & pos ) == SUCCESS"		14154	0		==			
ANR	14246	CallExpression	"zend_hash_get_current_data_ex ( & ce -> properties_info , ( void * * ) & prop_info , & pos )"		14154	0					
ANR	14247	Callee	zend_hash_get_current_data_ex		14154	0					
ANR	14248	Identifier	zend_hash_get_current_data_ex		14154	0					
ANR	14249	ArgumentList	& ce -> properties_info		14154	1					
ANR	14250	Argument	& ce -> properties_info		14154	0					
ANR	14251	UnaryOperationExpression	& ce -> properties_info		14154	0					
ANR	14252	UnaryOperator	&		14154	0					
ANR	14253	PtrMemberAccess	ce -> properties_info		14154	1					
ANR	14254	Identifier	ce		14154	0					
ANR	14255	Identifier	properties_info		14154	1					
ANR	14256	Argument	( void * * ) & prop_info		14154	1					
ANR	14257	CastExpression	( void * * ) & prop_info		14154	0					
ANR	14258	CastTarget	void * *		14154	0					
ANR	14259	UnaryOperationExpression	& prop_info		14154	1					
ANR	14260	UnaryOperator	&		14154	0					
ANR	14261	Identifier	prop_info		14154	1					
ANR	14262	Argument	& pos		14154	2					
ANR	14263	UnaryOperationExpression	& pos		14154	0					
ANR	14264	UnaryOperator	&		14154	0					
ANR	14265	Identifier	pos		14154	1					
ANR	14266	Identifier	SUCCESS		14154	1					
ANR	14267	CallExpression	"zend_hash_move_forward_ex ( & ce -> properties_info , & pos )"	1067:9:26194:26246	14154	2	True				
ANR	14268	Callee	zend_hash_move_forward_ex		14154	0					
ANR	14269	Identifier	zend_hash_move_forward_ex		14154	0					
ANR	14270	ArgumentList	& ce -> properties_info		14154	1					
ANR	14271	Argument	& ce -> properties_info		14154	0					
ANR	14272	UnaryOperationExpression	& ce -> properties_info		14154	0					
ANR	14273	UnaryOperator	&		14154	0					
ANR	14274	PtrMemberAccess	ce -> properties_info		14154	1					
ANR	14275	Identifier	ce		14154	0					
ANR	14276	Identifier	properties_info		14154	1					
ANR	14277	Argument	& pos		14154	1					
ANR	14278	UnaryOperationExpression	& pos		14154	0					
ANR	14279	UnaryOperator	&		14154	0					
ANR	14280	Identifier	pos		14154	1					
ANR	14281	CompoundStatement		13:64:487:487	14154	3					
ANR	14282	IfStatement	if ( is_static == ( ( prop_info -> flags & ZEND_ACC_STATIC ) != 0 ) && offset == prop_info -> offset )		14154	0					
ANR	14283	Condition	is_static == ( ( prop_info -> flags & ZEND_ACC_STATIC ) != 0 ) && offset == prop_info -> offset	1068:9:26260:26355	14154	0	True				
ANR	14284	AndExpression	is_static == ( ( prop_info -> flags & ZEND_ACC_STATIC ) != 0 ) && offset == prop_info -> offset		14154	0		&&			
ANR	14285	EqualityExpression	is_static == ( ( prop_info -> flags & ZEND_ACC_STATIC ) != 0 )		14154	0		==			
ANR	14286	Identifier	is_static		14154	0					
ANR	14287	EqualityExpression	( prop_info -> flags & ZEND_ACC_STATIC ) != 0		14154	1		!=			
ANR	14288	BitAndExpression	prop_info -> flags & ZEND_ACC_STATIC		14154	0		&			
ANR	14289	PtrMemberAccess	prop_info -> flags		14154	0					
ANR	14290	Identifier	prop_info		14154	0					
ANR	14291	Identifier	flags		14154	1					
ANR	14292	Identifier	ZEND_ACC_STATIC		14154	1					
ANR	14293	PrimaryExpression	0		14154	1					
ANR	14294	EqualityExpression	offset == prop_info -> offset		14154	1		==			
ANR	14295	Identifier	offset		14154	0					
ANR	14296	PtrMemberAccess	prop_info -> offset		14154	1					
ANR	14297	Identifier	prop_info		14154	0					
ANR	14298	Identifier	offset		14154	1					
ANR	14299	CompoundStatement		17:6:619:655	14154	1					
ANR	14300	IdentifierDeclStatement	int ret ;	1070:6:26366:26373	14154	0	True				
ANR	14301	IdentifierDecl	ret		14154	0					
ANR	14302	IdentifierDeclType	int		14154	0					
ANR	14303	Identifier	ret		14154	1					
ANR	14304	IdentifierDeclStatement	zend_class_entry * old_scope = * scope ;	1071:6:26381:26417	14154	1	True				
ANR	14305	IdentifierDecl	* old_scope = * scope		14154	0					
ANR	14306	IdentifierDeclType	zend_class_entry *		14154	0					
ANR	14307	Identifier	old_scope		14154	1					
ANR	14308	AssignmentExpression	* old_scope = * scope		14154	2		=			
ANR	14309	Identifier	old_scope		14154	0					
ANR	14310	UnaryOperationExpression	* scope		14154	1					
ANR	14311	UnaryOperator	*		14154	0					
ANR	14312	Identifier	scope		14154	1					
ANR	14313	ExpressionStatement	* scope = prop_info -> ce	1072:6:26425:26447	14154	2	True				
ANR	14314	AssignmentExpression	* scope = prop_info -> ce		14154	0		=			
ANR	14315	UnaryOperationExpression	* scope		14154	0					
ANR	14316	UnaryOperator	*		14154	0					
ANR	14317	Identifier	scope		14154	1					
ANR	14318	PtrMemberAccess	prop_info -> ce		14154	1					
ANR	14319	Identifier	prop_info		14154	0					
ANR	14320	Identifier	ce		14154	1					
ANR	14321	Statement	ret	1073:6:26455:26457	14154	3	True				
ANR	14322	Statement	=	1073:10:26459:26459	14154	4	True				
ANR	14323	Statement	zval_update_constant	1073:12:26461:26480	14154	5	True				
ANR	14324	Statement	(	1073:32:26481:26481	14154	6	True				
ANR	14325	Statement	pp	1073:33:26482:26483	14154	7	True				
ANR	14326	Statement	","	1073:35:26484:26484	14154	8	True				
ANR	14327	Statement	1	1073:37:26486:26486	14154	9	True				
ANR	14328	Statement	TSRMLS_CC	1073:39:26488:26496	14154	10	True				
ANR	14329	Statement	)	1073:48:26497:26497	14154	11	True				
ANR	14330	ExpressionStatement		1073:49:26498:26498	14154	12	True				
ANR	14331	ExpressionStatement	* scope = old_scope	1074:6:26506:26524	14154	13	True				
ANR	14332	AssignmentExpression	* scope = old_scope		14154	0		=			
ANR	14333	UnaryOperationExpression	* scope		14154	0					
ANR	14334	UnaryOperator	*		14154	0					
ANR	14335	Identifier	scope		14154	1					
ANR	14336	Identifier	old_scope		14154	1					
ANR	14337	ReturnStatement	return ret ;	1075:6:26532:26542	14154	14	True				
ANR	14338	Identifier	ret		14154	0					
ANR	14339	ExpressionStatement	ce = ce -> parent	1078:4:26561:26576	14154	1	True				
ANR	14340	AssignmentExpression	ce = ce -> parent		14154	0		=			
ANR	14341	Identifier	ce		14154	0					
ANR	14342	PtrMemberAccess	ce -> parent		14154	1					
ANR	14343	Identifier	ce		14154	0					
ANR	14344	Identifier	parent		14154	1					
ANR	14345	Condition	ce	1079:12:26590:26591	14154	1	True				
ANR	14346	Identifier	ce		14154	0					
ANR	14347	Statement	return	1082:2:26602:26607	14154	2	True				
ANR	14348	Statement	zval_update_constant	1082:9:26609:26628	14154	3	True				
ANR	14349	Statement	(	1082:29:26629:26629	14154	4	True				
ANR	14350	Statement	pp	1082:30:26630:26631	14154	5	True				
ANR	14351	Statement	","	1082:32:26632:26632	14154	6	True				
ANR	14352	Statement	1	1082:34:26634:26634	14154	7	True				
ANR	14353	Statement	TSRMLS_CC	1082:36:26636:26644	14154	8	True				
ANR	14354	Statement	)	1082:45:26645:26645	14154	9	True				
ANR	14355	ExpressionStatement		1082:46:26646:26646	14154	10	True				
ANR	14356	ReturnStatement	return 0 ;	1084:1:26652:26660	14154	1	True				
ANR	14357	PrimaryExpression	0		14154	0					
ANR	14358	ReturnType	static int		14154	1					
ANR	14359	Identifier	zval_update_class_constant		14154	2					
ANR	14360	ParameterList	"zval * * pp , int is_static , int offset TSRMLS_DC"		14154	3					
ANR	14361	Parameter	zval * * pp	1054:38:25703:25711	14154	0	True				
ANR	14362	ParameterType	zval * *		14154	0					
ANR	14363	Identifier	pp		14154	1					
ANR	14364	Parameter	int is_static	1054:49:25714:25726	14154	1	True				
ANR	14365	ParameterType	int		14154	0					
ANR	14366	Identifier	is_static		14154	1					
ANR	14367	Parameter	int offset TSRMLS_DC	1054:64:25729:25748	14154	2	True				
ANR	14368	ParameterType	int offset		14154	0					
ANR	14369	Identifier	TSRMLS_DC		14154	1					
ANR	14370	CFGEntryNode	ENTRY		14154		True				
ANR	14371	CFGExitNode	EXIT		14154		True				
ANR	14372	Symbol	pp		14154						
ANR	14373	Symbol	zend_hash_get_current_data_ex		14154						
ANR	14374	Symbol	IS_CONSTANT_TYPE		14154						
ANR	14375	Symbol	old_scope		14154						
ANR	14376	Symbol	active_class_entry		14154						
ANR	14377	Symbol	* ce		14154						
ANR	14378	Symbol	TSRMLS_DC		14154						
ANR	14379	Symbol	& EG		14154						
ANR	14380	Symbol	& CG		14154						
ANR	14381	Symbol	Z_TYPE_PP		14154						
ANR	14382	Symbol	is_static		14154						
ANR	14383	Symbol	pos		14154						
ANR	14384	Symbol	prop_info -> offset		14154						
ANR	14385	Symbol	scope		14154						
ANR	14386	Symbol	ZEND_ACC_STATIC		14154						
ANR	14387	Symbol	* prop_info		14154						
ANR	14388	Symbol	prop_info		14154						
ANR	14389	Symbol	ret		14154						
ANR	14390	Symbol	EG		14154						
ANR	14391	Symbol	ce		14154						
ANR	14392	Symbol	SUCCESS		14154						
ANR	14393	Symbol	( * scope ) -> parent		14154						
ANR	14394	Symbol	offset		14154						
ANR	14395	Symbol	in_execution		14154						
ANR	14396	Symbol	& prop_info		14154						
ANR	14397	Symbol	ce -> parent		14154						
ANR	14398	Symbol	* * scope		14154						
ANR	14399	Symbol	prop_info -> flags		14154						
ANR	14400	Symbol	& ce -> properties_info		14154						
ANR	14401	Symbol	prop_info -> ce		14154						
ANR	14402	Symbol	* scope		14154						
ANR	14403	Symbol	& pos		14154						
ANR	14404	DeclStmt									
ANR	14405	Decl							zend_class_entry	zend_class_entry * *	scope
ANR	14406	DeclStmt									
ANR	14407	Decl							zend_class_entry	zend_class_entry *	old_scope
ANR	14408	DeclStmt									
ANR	14409	Decl							int	int	i
ANR	14410	DeclStmt									
ANR	14411	Decl							zval	zval * *	p
ANR	14412	DeclStmt									
ANR	14413	Decl							zval	zval *	q
ANR	14414	DeclStmt									
ANR	14415	Decl							zval	zval *	r
ANR	14416	Function	object_properties_init	1150:0:28788:29465							
ANR	14417	FunctionDef	"object_properties_init (zend_object * object , zend_class_entry * class_type)"		14416	0					
ANR	14418	CompoundStatement		1151:0:28886:29465	14416	0					
ANR	14419	IdentifierDeclStatement	int i ;	1152:1:28889:28894	14416	0	True				
ANR	14420	IdentifierDecl	i		14416	0					
ANR	14421	IdentifierDeclType	int		14416	0					
ANR	14422	Identifier	i		14416	1					
ANR	14423	IfStatement	if ( class_type -> default_properties_count )		14416	1					
ANR	14424	Condition	class_type -> default_properties_count	1154:5:28902:28937	14416	0	True				
ANR	14425	PtrMemberAccess	class_type -> default_properties_count		14416	0					
ANR	14426	Identifier	class_type		14416	0					
ANR	14427	Identifier	default_properties_count		14416	1					
ANR	14428	CompoundStatement		4:43:53:53	14416	1					
ANR	14429	ExpressionStatement	object -> properties_table = emalloc ( sizeof ( zval * ) * class_type -> default_properties_count )	1155:2:28944:29032	14416	0	True				
ANR	14430	AssignmentExpression	object -> properties_table = emalloc ( sizeof ( zval * ) * class_type -> default_properties_count )		14416	0		=			
ANR	14431	PtrMemberAccess	object -> properties_table		14416	0					
ANR	14432	Identifier	object		14416	0					
ANR	14433	Identifier	properties_table		14416	1					
ANR	14434	CallExpression	emalloc ( sizeof ( zval * ) * class_type -> default_properties_count )		14416	1					
ANR	14435	Callee	emalloc		14416	0					
ANR	14436	Identifier	emalloc		14416	0					
ANR	14437	ArgumentList	sizeof ( zval * ) * class_type -> default_properties_count		14416	1					
ANR	14438	Argument	sizeof ( zval * ) * class_type -> default_properties_count		14416	0					
ANR	14439	MultiplicativeExpression	sizeof ( zval * ) * class_type -> default_properties_count		14416	0		*			
ANR	14440	SizeofExpression	sizeof ( zval * )		14416	0					
ANR	14441	Sizeof	sizeof		14416	0					
ANR	14442	SizeofOperand	zval *		14416	1					
ANR	14443	PtrMemberAccess	class_type -> default_properties_count		14416	1					
ANR	14444	Identifier	class_type		14416	0					
ANR	14445	Identifier	default_properties_count		14416	1					
ANR	14446	ForStatement	for ( i = 0 ; i < class_type -> default_properties_count ; i ++ )		14416	1					
ANR	14447	ForInit	i = 0 ;	1156:7:29041:29046	14416	0	True				
ANR	14448	AssignmentExpression	i = 0		14416	0		=			
ANR	14449	Identifier	i		14416	0					
ANR	14450	PrimaryExpression	0		14416	1					
ANR	14451	Condition	i < class_type -> default_properties_count	1156:14:29048:29087	14416	1	True				
ANR	14452	RelationalExpression	i < class_type -> default_properties_count		14416	0		<			
ANR	14453	Identifier	i		14416	0					
ANR	14454	PtrMemberAccess	class_type -> default_properties_count		14416	1					
ANR	14455	Identifier	class_type		14416	0					
ANR	14456	Identifier	default_properties_count		14416	1					
ANR	14457	PostIncDecOperationExpression	i ++	1156:56:29090:29092	14416	2	True				
ANR	14458	Identifier	i		14416	0					
ANR	14459	IncDec	++		14416	1					
ANR	14460	CompoundStatement		6:61:208:208	14416	3					
ANR	14461	ExpressionStatement	object -> properties_table [ i ] = class_type -> default_properties_table [ i ]	1157:3:29100:29169	14416	0	True				
ANR	14462	AssignmentExpression	object -> properties_table [ i ] = class_type -> default_properties_table [ i ]		14416	0		=			
ANR	14463	ArrayIndexing	object -> properties_table [ i ]		14416	0					
ANR	14464	PtrMemberAccess	object -> properties_table		14416	0					
ANR	14465	Identifier	object		14416	0					
ANR	14466	Identifier	properties_table		14416	1					
ANR	14467	Identifier	i		14416	1					
ANR	14468	ArrayIndexing	class_type -> default_properties_table [ i ]		14416	1					
ANR	14469	PtrMemberAccess	class_type -> default_properties_table		14416	0					
ANR	14470	Identifier	class_type		14416	0					
ANR	14471	Identifier	default_properties_table		14416	1					
ANR	14472	Identifier	i		14416	1					
ANR	14473	IfStatement	if ( class_type -> default_properties_table [ i ] )		14416	1					
ANR	14474	Condition	class_type -> default_properties_table [ i ]	1158:7:29178:29216	14416	0	True				
ANR	14475	ArrayIndexing	class_type -> default_properties_table [ i ]		14416	0					
ANR	14476	PtrMemberAccess	class_type -> default_properties_table		14416	0					
ANR	14477	Identifier	class_type		14416	0					
ANR	14478	Identifier	default_properties_table		14416	1					
ANR	14479	Identifier	i		14416	1					
ANR	14480	CompoundStatement		8:48:332:332	14416	1					
ANR	14481	ExpressionStatement	ALLOC_ZVAL ( object -> properties_table [ i ] )	1160:4:29233:29273	14416	0	True				
ANR	14482	CallExpression	ALLOC_ZVAL ( object -> properties_table [ i ] )		14416	0					
ANR	14483	Callee	ALLOC_ZVAL		14416	0					
ANR	14484	Identifier	ALLOC_ZVAL		14416	0					
ANR	14485	ArgumentList	object -> properties_table [ i ]		14416	1					
ANR	14486	Argument	object -> properties_table [ i ]		14416	0					
ANR	14487	ArrayIndexing	object -> properties_table [ i ]		14416	0					
ANR	14488	PtrMemberAccess	object -> properties_table		14416	0					
ANR	14489	Identifier	object		14416	0					
ANR	14490	Identifier	properties_table		14416	1					
ANR	14491	Identifier	i		14416	1					
ANR	14492	ExpressionStatement	"MAKE_COPY_ZVAL ( & class_type -> default_properties_table [ i ] , object -> properties_table [ i ] )"	1161:4:29279:29364	14416	1	True				
ANR	14493	CallExpression	"MAKE_COPY_ZVAL ( & class_type -> default_properties_table [ i ] , object -> properties_table [ i ] )"		14416	0					
ANR	14494	Callee	MAKE_COPY_ZVAL		14416	0					
ANR	14495	Identifier	MAKE_COPY_ZVAL		14416	0					
ANR	14496	ArgumentList	& class_type -> default_properties_table [ i ]		14416	1					
ANR	14497	Argument	& class_type -> default_properties_table [ i ]		14416	0					
ANR	14498	UnaryOperationExpression	& class_type -> default_properties_table [ i ]		14416	0					
ANR	14499	UnaryOperator	&		14416	0					
ANR	14500	ArrayIndexing	class_type -> default_properties_table [ i ]		14416	1					
ANR	14501	PtrMemberAccess	class_type -> default_properties_table		14416	0					
ANR	14502	Identifier	class_type		14416	0					
ANR	14503	Identifier	default_properties_table		14416	1					
ANR	14504	Identifier	i		14416	1					
ANR	14505	Argument	object -> properties_table [ i ]		14416	1					
ANR	14506	ArrayIndexing	object -> properties_table [ i ]		14416	0					
ANR	14507	PtrMemberAccess	object -> properties_table		14416	0					
ANR	14508	Identifier	object		14416	0					
ANR	14509	Identifier	properties_table		14416	1					
ANR	14510	Identifier	i		14416	1					
ANR	14511	ExpressionStatement	object -> properties = NULL	1167:2:29435:29460	14416	2	True				
ANR	14512	AssignmentExpression	object -> properties = NULL		14416	0		=			
ANR	14513	PtrMemberAccess	object -> properties		14416	0					
ANR	14514	Identifier	object		14416	0					
ANR	14515	Identifier	properties		14416	1					
ANR	14516	Identifier	NULL		14416	1					
ANR	14517	ReturnType	ZEND_API void		14416	1					
ANR	14518	Identifier	object_properties_init		14416	2					
ANR	14519	ParameterList	"zend_object * object , zend_class_entry * class_type"		14416	3					
ANR	14520	Parameter	zend_object * object	1150:37:28825:28843	14416	0	True				
ANR	14521	ParameterType	zend_object *		14416	0					
ANR	14522	Identifier	object		14416	1					
ANR	14523	Parameter	zend_class_entry * class_type	1150:58:28846:28873	14416	1	True				
ANR	14524	ParameterType	zend_class_entry *		14416	0					
ANR	14525	Identifier	class_type		14416	1					
ANR	14526	CFGEntryNode	ENTRY		14416		True				
ANR	14527	CFGExitNode	EXIT		14416		True				
ANR	14528	Symbol	NULL		14416						
ANR	14529	Symbol	i		14416						
ANR	14530	Symbol	* class_type -> default_properties_table		14416						
ANR	14531	Symbol	* object		14416						
ANR	14532	Symbol	class_type -> default_properties_count		14416						
ANR	14533	Symbol	object -> properties		14416						
ANR	14534	Symbol	emalloc		14416						
ANR	14535	Symbol	class_type		14416						
ANR	14536	Symbol	* i		14416						
ANR	14537	Symbol	class_type -> default_properties_table		14416						
ANR	14538	Symbol	* * object		14416						
ANR	14539	Symbol	* class_type		14416						
ANR	14540	Symbol	* object -> properties_table		14416						
ANR	14541	Symbol	object -> properties_table		14416						
ANR	14542	Symbol	object		14416						
ANR	14543	Symbol	* * class_type		14416						
ANR	14544	DeclStmt									
ANR	14545	Decl							zend_object	zend_object *	object
ANR	14546	DeclStmt									
ANR	14547	Decl							char	char *	what
ANR	14548	Function	add_assoc_function	1217:0:31216:31428							
ANR	14549	FunctionDef	"add_assoc_function (zval * arg , const char * key , void ( * function_ptr ) ( INTERNAL_FUNCTION_PARAMETERS ))"		14548	0					
ANR	14550	CompoundStatement		1218:0:31338:31428	14548	0					
ANR	14551	ExpressionStatement	"zend_error ( E_WARNING , ""add_assoc_function() is no longer supported"" )"	1219:1:31341:31409	14548	0	True				
ANR	14552	CallExpression	"zend_error ( E_WARNING , ""add_assoc_function() is no longer supported"" )"		14548	0					
ANR	14553	Callee	zend_error		14548	0					
ANR	14554	Identifier	zend_error		14548	0					
ANR	14555	ArgumentList	E_WARNING		14548	1					
ANR	14556	Argument	E_WARNING		14548	0					
ANR	14557	Identifier	E_WARNING		14548	0					
ANR	14558	Argument	"""add_assoc_function() is no longer supported"""		14548	1					
ANR	14559	PrimaryExpression	"""add_assoc_function() is no longer supported"""		14548	0					
ANR	14560	ReturnStatement	return FAILURE ;	1220:1:31412:31426	14548	1	True				
ANR	14561	Identifier	FAILURE		14548	0					
ANR	14562	ReturnType	ZEND_API int		14548	1					
ANR	14563	Identifier	add_assoc_function		14548	2					
ANR	14564	ParameterList	"zval * arg , const char * key , void ( * function_ptr ) ( INTERNAL_FUNCTION_PARAMETERS )"		14548	3					
ANR	14565	Parameter	zval * arg	1217:32:31248:31256	14548	0	True				
ANR	14566	ParameterType	zval *		14548	0					
ANR	14567	Identifier	arg		14548	1					
ANR	14568	Parameter	const char * key	1217:43:31259:31273	14548	1	True				
ANR	14569	ParameterType	const char *		14548	0					
ANR	14570	Identifier	key		14548	1					
ANR	14571	Parameter	void ( * function_ptr ) ( INTERNAL_FUNCTION_PARAMETERS )	1217:60:31276:31325	14548	2	True				
ANR	14572	ParameterType	(( INTERNAL_FUNCTION_PARAMETERS ) void) *		14548	0					
ANR	14573	Identifier	function_ptr		14548	1					
ANR	14574	CFGEntryNode	ENTRY		14548		True				
ANR	14575	CFGExitNode	EXIT		14548		True				
ANR	14576	Symbol	E_WARNING		14548						
ANR	14577	Symbol	arg		14548						
ANR	14578	Symbol	function_ptr		14548						
ANR	14579	Symbol	FAILURE		14548						
ANR	14580	Symbol	key		14548						
ANR	14581	Function	add_assoc_long_ex	1224:0:31441:31687							
ANR	14582	FunctionDef	"add_assoc_long_ex (zval * arg , const char * key , uint key_len , long n)"		14581	0					
ANR	14583	CompoundStatement		1225:0:31532:31687	14581	0					
ANR	14584	IdentifierDeclStatement	zval * tmp ;	1226:1:31535:31544	14581	0	True				
ANR	14585	IdentifierDecl	* tmp		14581	0					
ANR	14586	IdentifierDeclType	zval *		14581	0					
ANR	14587	Identifier	tmp		14581	1					
ANR	14588	ExpressionStatement	MAKE_STD_ZVAL ( tmp )	1228:1:31548:31566	14581	1	True				
ANR	14589	CallExpression	MAKE_STD_ZVAL ( tmp )		14581	0					
ANR	14590	Callee	MAKE_STD_ZVAL		14581	0					
ANR	14591	Identifier	MAKE_STD_ZVAL		14581	0					
ANR	14592	ArgumentList	tmp		14581	1					
ANR	14593	Argument	tmp		14581	0					
ANR	14594	Identifier	tmp		14581	0					
ANR	14595	ExpressionStatement	"ZVAL_LONG ( tmp , n )"	1229:1:31569:31586	14581	2	True				
ANR	14596	CallExpression	"ZVAL_LONG ( tmp , n )"		14581	0					
ANR	14597	Callee	ZVAL_LONG		14581	0					
ANR	14598	Identifier	ZVAL_LONG		14581	0					
ANR	14599	ArgumentList	tmp		14581	1					
ANR	14600	Argument	tmp		14581	0					
ANR	14601	Identifier	tmp		14581	0					
ANR	14602	Argument	n		14581	1					
ANR	14603	Identifier	n		14581	0					
ANR	14604	ReturnStatement	"return zend_symtable_update ( Z_ARRVAL_P ( arg ) , key , key_len , ( void * ) & tmp , sizeof ( zval * ) , NULL ) ;"	1231:1:31590:31685	14581	3	True				
ANR	14605	CallExpression	"zend_symtable_update ( Z_ARRVAL_P ( arg ) , key , key_len , ( void * ) & tmp , sizeof ( zval * ) , NULL )"		14581	0					
ANR	14606	Callee	zend_symtable_update		14581	0					
ANR	14607	Identifier	zend_symtable_update		14581	0					
ANR	14608	ArgumentList	Z_ARRVAL_P ( arg )		14581	1					
ANR	14609	Argument	Z_ARRVAL_P ( arg )		14581	0					
ANR	14610	CallExpression	Z_ARRVAL_P ( arg )		14581	0					
ANR	14611	Callee	Z_ARRVAL_P		14581	0					
ANR	14612	Identifier	Z_ARRVAL_P		14581	0					
ANR	14613	ArgumentList	arg		14581	1					
ANR	14614	Argument	arg		14581	0					
ANR	14615	Identifier	arg		14581	0					
ANR	14616	Argument	key		14581	1					
ANR	14617	Identifier	key		14581	0					
ANR	14618	Argument	key_len		14581	2					
ANR	14619	Identifier	key_len		14581	0					
ANR	14620	Argument	( void * ) & tmp		14581	3					
ANR	14621	CastExpression	( void * ) & tmp		14581	0					
ANR	14622	CastTarget	void *		14581	0					
ANR	14623	UnaryOperationExpression	& tmp		14581	1					
ANR	14624	UnaryOperator	&		14581	0					
ANR	14625	Identifier	tmp		14581	1					
ANR	14626	Argument	sizeof ( zval * )		14581	4					
ANR	14627	SizeofExpression	sizeof ( zval * )		14581	0					
ANR	14628	Sizeof	sizeof		14581	0					
ANR	14629	SizeofOperand	zval *		14581	1					
ANR	14630	Argument	NULL		14581	5					
ANR	14631	Identifier	NULL		14581	0					
ANR	14632	ReturnType	ZEND_API int		14581	1					
ANR	14633	Identifier	add_assoc_long_ex		14581	2					
ANR	14634	ParameterList	"zval * arg , const char * key , uint key_len , long n"		14581	3					
ANR	14635	Parameter	zval * arg	1224:31:31472:31480	14581	0	True				
ANR	14636	ParameterType	zval *		14581	0					
ANR	14637	Identifier	arg		14581	1					
ANR	14638	Parameter	const char * key	1224:42:31483:31497	14581	1	True				
ANR	14639	ParameterType	const char *		14581	0					
ANR	14640	Identifier	key		14581	1					
ANR	14641	Parameter	uint key_len	1224:59:31500:31511	14581	2	True				
ANR	14642	ParameterType	uint		14581	0					
ANR	14643	Identifier	key_len		14581	1					
ANR	14644	Parameter	long n	1224:73:31514:31519	14581	3	True				
ANR	14645	ParameterType	long		14581	0					
ANR	14646	Identifier	n		14581	1					
ANR	14647	CFGEntryNode	ENTRY		14581		True				
ANR	14648	CFGExitNode	EXIT		14581		True				
ANR	14649	Symbol	NULL		14581						
ANR	14650	Symbol	tmp		14581						
ANR	14651	Symbol	arg		14581						
ANR	14652	Symbol	& tmp		14581						
ANR	14653	Symbol	Z_ARRVAL_P		14581						
ANR	14654	Symbol	key		14581						
ANR	14655	Symbol	n		14581						
ANR	14656	Symbol	key_len		14581						
ANR	14657	Symbol	zend_symtable_update		14581						
ANR	14658	Function	add_assoc_null_ex	1235:0:31700:31935							
ANR	14659	FunctionDef	"add_assoc_null_ex (zval * arg , const char * key , uint key_len)"		14658	0					
ANR	14660	CompoundStatement		1236:0:31783:31935	14658	0					
ANR	14661	IdentifierDeclStatement	zval * tmp ;	1237:1:31786:31795	14658	0	True				
ANR	14662	IdentifierDecl	* tmp		14658	0					
ANR	14663	IdentifierDeclType	zval *		14658	0					
ANR	14664	Identifier	tmp		14658	1					
ANR	14665	ExpressionStatement	MAKE_STD_ZVAL ( tmp )	1239:1:31799:31817	14658	1	True				
ANR	14666	CallExpression	MAKE_STD_ZVAL ( tmp )		14658	0					
ANR	14667	Callee	MAKE_STD_ZVAL		14658	0					
ANR	14668	Identifier	MAKE_STD_ZVAL		14658	0					
ANR	14669	ArgumentList	tmp		14658	1					
ANR	14670	Argument	tmp		14658	0					
ANR	14671	Identifier	tmp		14658	0					
ANR	14672	ExpressionStatement	ZVAL_NULL ( tmp )	1240:1:31820:31834	14658	2	True				
ANR	14673	CallExpression	ZVAL_NULL ( tmp )		14658	0					
ANR	14674	Callee	ZVAL_NULL		14658	0					
ANR	14675	Identifier	ZVAL_NULL		14658	0					
ANR	14676	ArgumentList	tmp		14658	1					
ANR	14677	Argument	tmp		14658	0					
ANR	14678	Identifier	tmp		14658	0					
ANR	14679	ReturnStatement	"return zend_symtable_update ( Z_ARRVAL_P ( arg ) , key , key_len , ( void * ) & tmp , sizeof ( zval * ) , NULL ) ;"	1242:1:31838:31933	14658	3	True				
ANR	14680	CallExpression	"zend_symtable_update ( Z_ARRVAL_P ( arg ) , key , key_len , ( void * ) & tmp , sizeof ( zval * ) , NULL )"		14658	0					
ANR	14681	Callee	zend_symtable_update		14658	0					
ANR	14682	Identifier	zend_symtable_update		14658	0					
ANR	14683	ArgumentList	Z_ARRVAL_P ( arg )		14658	1					
ANR	14684	Argument	Z_ARRVAL_P ( arg )		14658	0					
ANR	14685	CallExpression	Z_ARRVAL_P ( arg )		14658	0					
ANR	14686	Callee	Z_ARRVAL_P		14658	0					
ANR	14687	Identifier	Z_ARRVAL_P		14658	0					
ANR	14688	ArgumentList	arg		14658	1					
ANR	14689	Argument	arg		14658	0					
ANR	14690	Identifier	arg		14658	0					
ANR	14691	Argument	key		14658	1					
ANR	14692	Identifier	key		14658	0					
ANR	14693	Argument	key_len		14658	2					
ANR	14694	Identifier	key_len		14658	0					
ANR	14695	Argument	( void * ) & tmp		14658	3					
ANR	14696	CastExpression	( void * ) & tmp		14658	0					
ANR	14697	CastTarget	void *		14658	0					
ANR	14698	UnaryOperationExpression	& tmp		14658	1					
ANR	14699	UnaryOperator	&		14658	0					
ANR	14700	Identifier	tmp		14658	1					
ANR	14701	Argument	sizeof ( zval * )		14658	4					
ANR	14702	SizeofExpression	sizeof ( zval * )		14658	0					
ANR	14703	Sizeof	sizeof		14658	0					
ANR	14704	SizeofOperand	zval *		14658	1					
ANR	14705	Argument	NULL		14658	5					
ANR	14706	Identifier	NULL		14658	0					
ANR	14707	ReturnType	ZEND_API int		14658	1					
ANR	14708	Identifier	add_assoc_null_ex		14658	2					
ANR	14709	ParameterList	"zval * arg , const char * key , uint key_len"		14658	3					
ANR	14710	Parameter	zval * arg	1235:31:31731:31739	14658	0	True				
ANR	14711	ParameterType	zval *		14658	0					
ANR	14712	Identifier	arg		14658	1					
ANR	14713	Parameter	const char * key	1235:42:31742:31756	14658	1	True				
ANR	14714	ParameterType	const char *		14658	0					
ANR	14715	Identifier	key		14658	1					
ANR	14716	Parameter	uint key_len	1235:59:31759:31770	14658	2	True				
ANR	14717	ParameterType	uint		14658	0					
ANR	14718	Identifier	key_len		14658	1					
ANR	14719	CFGEntryNode	ENTRY		14658		True				
ANR	14720	CFGExitNode	EXIT		14658		True				
ANR	14721	Symbol	NULL		14658						
ANR	14722	Symbol	tmp		14658						
ANR	14723	Symbol	arg		14658						
ANR	14724	Symbol	& tmp		14658						
ANR	14725	Symbol	Z_ARRVAL_P		14658						
ANR	14726	Symbol	key		14658						
ANR	14727	Symbol	key_len		14658						
ANR	14728	Symbol	zend_symtable_update		14658						
ANR	14729	Function	add_assoc_bool_ex	1246:0:31948:32193							
ANR	14730	FunctionDef	"add_assoc_bool_ex (zval * arg , const char * key , uint key_len , int b)"		14729	0					
ANR	14731	CompoundStatement		1247:0:32038:32193	14729	0					
ANR	14732	IdentifierDeclStatement	zval * tmp ;	1248:1:32041:32050	14729	0	True				
ANR	14733	IdentifierDecl	* tmp		14729	0					
ANR	14734	IdentifierDeclType	zval *		14729	0					
ANR	14735	Identifier	tmp		14729	1					
ANR	14736	ExpressionStatement	MAKE_STD_ZVAL ( tmp )	1250:1:32054:32072	14729	1	True				
ANR	14737	CallExpression	MAKE_STD_ZVAL ( tmp )		14729	0					
ANR	14738	Callee	MAKE_STD_ZVAL		14729	0					
ANR	14739	Identifier	MAKE_STD_ZVAL		14729	0					
ANR	14740	ArgumentList	tmp		14729	1					
ANR	14741	Argument	tmp		14729	0					
ANR	14742	Identifier	tmp		14729	0					
ANR	14743	ExpressionStatement	"ZVAL_BOOL ( tmp , b )"	1251:1:32075:32092	14729	2	True				
ANR	14744	CallExpression	"ZVAL_BOOL ( tmp , b )"		14729	0					
ANR	14745	Callee	ZVAL_BOOL		14729	0					
ANR	14746	Identifier	ZVAL_BOOL		14729	0					
ANR	14747	ArgumentList	tmp		14729	1					
ANR	14748	Argument	tmp		14729	0					
ANR	14749	Identifier	tmp		14729	0					
ANR	14750	Argument	b		14729	1					
ANR	14751	Identifier	b		14729	0					
ANR	14752	ReturnStatement	"return zend_symtable_update ( Z_ARRVAL_P ( arg ) , key , key_len , ( void * ) & tmp , sizeof ( zval * ) , NULL ) ;"	1253:1:32096:32191	14729	3	True				
ANR	14753	CallExpression	"zend_symtable_update ( Z_ARRVAL_P ( arg ) , key , key_len , ( void * ) & tmp , sizeof ( zval * ) , NULL )"		14729	0					
ANR	14754	Callee	zend_symtable_update		14729	0					
ANR	14755	Identifier	zend_symtable_update		14729	0					
ANR	14756	ArgumentList	Z_ARRVAL_P ( arg )		14729	1					
ANR	14757	Argument	Z_ARRVAL_P ( arg )		14729	0					
ANR	14758	CallExpression	Z_ARRVAL_P ( arg )		14729	0					
ANR	14759	Callee	Z_ARRVAL_P		14729	0					
ANR	14760	Identifier	Z_ARRVAL_P		14729	0					
ANR	14761	ArgumentList	arg		14729	1					
ANR	14762	Argument	arg		14729	0					
ANR	14763	Identifier	arg		14729	0					
ANR	14764	Argument	key		14729	1					
ANR	14765	Identifier	key		14729	0					
ANR	14766	Argument	key_len		14729	2					
ANR	14767	Identifier	key_len		14729	0					
ANR	14768	Argument	( void * ) & tmp		14729	3					
ANR	14769	CastExpression	( void * ) & tmp		14729	0					
ANR	14770	CastTarget	void *		14729	0					
ANR	14771	UnaryOperationExpression	& tmp		14729	1					
ANR	14772	UnaryOperator	&		14729	0					
ANR	14773	Identifier	tmp		14729	1					
ANR	14774	Argument	sizeof ( zval * )		14729	4					
ANR	14775	SizeofExpression	sizeof ( zval * )		14729	0					
ANR	14776	Sizeof	sizeof		14729	0					
ANR	14777	SizeofOperand	zval *		14729	1					
ANR	14778	Argument	NULL		14729	5					
ANR	14779	Identifier	NULL		14729	0					
ANR	14780	ReturnType	ZEND_API int		14729	1					
ANR	14781	Identifier	add_assoc_bool_ex		14729	2					
ANR	14782	ParameterList	"zval * arg , const char * key , uint key_len , int b"		14729	3					
ANR	14783	Parameter	zval * arg	1246:31:31979:31987	14729	0	True				
ANR	14784	ParameterType	zval *		14729	0					
ANR	14785	Identifier	arg		14729	1					
ANR	14786	Parameter	const char * key	1246:42:31990:32004	14729	1	True				
ANR	14787	ParameterType	const char *		14729	0					
ANR	14788	Identifier	key		14729	1					
ANR	14789	Parameter	uint key_len	1246:59:32007:32018	14729	2	True				
ANR	14790	ParameterType	uint		14729	0					
ANR	14791	Identifier	key_len		14729	1					
ANR	14792	Parameter	int b	1246:73:32021:32025	14729	3	True				
ANR	14793	ParameterType	int		14729	0					
ANR	14794	Identifier	b		14729	1					
ANR	14795	CFGEntryNode	ENTRY		14729		True				
ANR	14796	CFGExitNode	EXIT		14729		True				
ANR	14797	Symbol	b		14729						
ANR	14798	Symbol	NULL		14729						
ANR	14799	Symbol	tmp		14729						
ANR	14800	Symbol	arg		14729						
ANR	14801	Symbol	& tmp		14729						
ANR	14802	Symbol	Z_ARRVAL_P		14729						
ANR	14803	Symbol	key		14729						
ANR	14804	Symbol	key_len		14729						
ANR	14805	Symbol	zend_symtable_update		14729						
ANR	14806	Function	add_assoc_resource_ex	1257:0:32206:32459							
ANR	14807	FunctionDef	"add_assoc_resource_ex (zval * arg , const char * key , uint key_len , int r)"		14806	0					
ANR	14808	CompoundStatement		1258:0:32300:32459	14806	0					
ANR	14809	IdentifierDeclStatement	zval * tmp ;	1259:1:32303:32312	14806	0	True				
ANR	14810	IdentifierDecl	* tmp		14806	0					
ANR	14811	IdentifierDeclType	zval *		14806	0					
ANR	14812	Identifier	tmp		14806	1					
ANR	14813	ExpressionStatement	MAKE_STD_ZVAL ( tmp )	1261:1:32316:32334	14806	1	True				
ANR	14814	CallExpression	MAKE_STD_ZVAL ( tmp )		14806	0					
ANR	14815	Callee	MAKE_STD_ZVAL		14806	0					
ANR	14816	Identifier	MAKE_STD_ZVAL		14806	0					
ANR	14817	ArgumentList	tmp		14806	1					
ANR	14818	Argument	tmp		14806	0					
ANR	14819	Identifier	tmp		14806	0					
ANR	14820	ExpressionStatement	"ZVAL_RESOURCE ( tmp , r )"	1262:1:32337:32358	14806	2	True				
ANR	14821	CallExpression	"ZVAL_RESOURCE ( tmp , r )"		14806	0					
ANR	14822	Callee	ZVAL_RESOURCE		14806	0					
ANR	14823	Identifier	ZVAL_RESOURCE		14806	0					
ANR	14824	ArgumentList	tmp		14806	1					
ANR	14825	Argument	tmp		14806	0					
ANR	14826	Identifier	tmp		14806	0					
ANR	14827	Argument	r		14806	1					
ANR	14828	Identifier	r		14806	0					
ANR	14829	ReturnStatement	"return zend_symtable_update ( Z_ARRVAL_P ( arg ) , key , key_len , ( void * ) & tmp , sizeof ( zval * ) , NULL ) ;"	1264:1:32362:32457	14806	3	True				
ANR	14830	CallExpression	"zend_symtable_update ( Z_ARRVAL_P ( arg ) , key , key_len , ( void * ) & tmp , sizeof ( zval * ) , NULL )"		14806	0					
ANR	14831	Callee	zend_symtable_update		14806	0					
ANR	14832	Identifier	zend_symtable_update		14806	0					
ANR	14833	ArgumentList	Z_ARRVAL_P ( arg )		14806	1					
ANR	14834	Argument	Z_ARRVAL_P ( arg )		14806	0					
ANR	14835	CallExpression	Z_ARRVAL_P ( arg )		14806	0					
ANR	14836	Callee	Z_ARRVAL_P		14806	0					
ANR	14837	Identifier	Z_ARRVAL_P		14806	0					
ANR	14838	ArgumentList	arg		14806	1					
ANR	14839	Argument	arg		14806	0					
ANR	14840	Identifier	arg		14806	0					
ANR	14841	Argument	key		14806	1					
ANR	14842	Identifier	key		14806	0					
ANR	14843	Argument	key_len		14806	2					
ANR	14844	Identifier	key_len		14806	0					
ANR	14845	Argument	( void * ) & tmp		14806	3					
ANR	14846	CastExpression	( void * ) & tmp		14806	0					
ANR	14847	CastTarget	void *		14806	0					
ANR	14848	UnaryOperationExpression	& tmp		14806	1					
ANR	14849	UnaryOperator	&		14806	0					
ANR	14850	Identifier	tmp		14806	1					
ANR	14851	Argument	sizeof ( zval * )		14806	4					
ANR	14852	SizeofExpression	sizeof ( zval * )		14806	0					
ANR	14853	Sizeof	sizeof		14806	0					
ANR	14854	SizeofOperand	zval *		14806	1					
ANR	14855	Argument	NULL		14806	5					
ANR	14856	Identifier	NULL		14806	0					
ANR	14857	ReturnType	ZEND_API int		14806	1					
ANR	14858	Identifier	add_assoc_resource_ex		14806	2					
ANR	14859	ParameterList	"zval * arg , const char * key , uint key_len , int r"		14806	3					
ANR	14860	Parameter	zval * arg	1257:35:32241:32249	14806	0	True				
ANR	14861	ParameterType	zval *		14806	0					
ANR	14862	Identifier	arg		14806	1					
ANR	14863	Parameter	const char * key	1257:46:32252:32266	14806	1	True				
ANR	14864	ParameterType	const char *		14806	0					
ANR	14865	Identifier	key		14806	1					
ANR	14866	Parameter	uint key_len	1257:63:32269:32280	14806	2	True				
ANR	14867	ParameterType	uint		14806	0					
ANR	14868	Identifier	key_len		14806	1					
ANR	14869	Parameter	int r	1257:77:32283:32287	14806	3	True				
ANR	14870	ParameterType	int		14806	0					
ANR	14871	Identifier	r		14806	1					
ANR	14872	CFGEntryNode	ENTRY		14806		True				
ANR	14873	CFGExitNode	EXIT		14806		True				
ANR	14874	Symbol	r		14806						
ANR	14875	Symbol	NULL		14806						
ANR	14876	Symbol	tmp		14806						
ANR	14877	Symbol	arg		14806						
ANR	14878	Symbol	& tmp		14806						
ANR	14879	Symbol	Z_ARRVAL_P		14806						
ANR	14880	Symbol	key		14806						
ANR	14881	Symbol	key_len		14806						
ANR	14882	Symbol	zend_symtable_update		14806						
ANR	14883	Function	add_assoc_double_ex	1268:0:32472:32724							
ANR	14884	FunctionDef	"add_assoc_double_ex (zval * arg , const char * key , uint key_len , double d)"		14883	0					
ANR	14885	CompoundStatement		1269:0:32567:32724	14883	0					
ANR	14886	IdentifierDeclStatement	zval * tmp ;	1270:1:32570:32579	14883	0	True				
ANR	14887	IdentifierDecl	* tmp		14883	0					
ANR	14888	IdentifierDeclType	zval *		14883	0					
ANR	14889	Identifier	tmp		14883	1					
ANR	14890	ExpressionStatement	MAKE_STD_ZVAL ( tmp )	1272:1:32583:32601	14883	1	True				
ANR	14891	CallExpression	MAKE_STD_ZVAL ( tmp )		14883	0					
ANR	14892	Callee	MAKE_STD_ZVAL		14883	0					
ANR	14893	Identifier	MAKE_STD_ZVAL		14883	0					
ANR	14894	ArgumentList	tmp		14883	1					
ANR	14895	Argument	tmp		14883	0					
ANR	14896	Identifier	tmp		14883	0					
ANR	14897	ExpressionStatement	"ZVAL_DOUBLE ( tmp , d )"	1273:1:32604:32623	14883	2	True				
ANR	14898	CallExpression	"ZVAL_DOUBLE ( tmp , d )"		14883	0					
ANR	14899	Callee	ZVAL_DOUBLE		14883	0					
ANR	14900	Identifier	ZVAL_DOUBLE		14883	0					
ANR	14901	ArgumentList	tmp		14883	1					
ANR	14902	Argument	tmp		14883	0					
ANR	14903	Identifier	tmp		14883	0					
ANR	14904	Argument	d		14883	1					
ANR	14905	Identifier	d		14883	0					
ANR	14906	ReturnStatement	"return zend_symtable_update ( Z_ARRVAL_P ( arg ) , key , key_len , ( void * ) & tmp , sizeof ( zval * ) , NULL ) ;"	1275:1:32627:32722	14883	3	True				
ANR	14907	CallExpression	"zend_symtable_update ( Z_ARRVAL_P ( arg ) , key , key_len , ( void * ) & tmp , sizeof ( zval * ) , NULL )"		14883	0					
ANR	14908	Callee	zend_symtable_update		14883	0					
ANR	14909	Identifier	zend_symtable_update		14883	0					
ANR	14910	ArgumentList	Z_ARRVAL_P ( arg )		14883	1					
ANR	14911	Argument	Z_ARRVAL_P ( arg )		14883	0					
ANR	14912	CallExpression	Z_ARRVAL_P ( arg )		14883	0					
ANR	14913	Callee	Z_ARRVAL_P		14883	0					
ANR	14914	Identifier	Z_ARRVAL_P		14883	0					
ANR	14915	ArgumentList	arg		14883	1					
ANR	14916	Argument	arg		14883	0					
ANR	14917	Identifier	arg		14883	0					
ANR	14918	Argument	key		14883	1					
ANR	14919	Identifier	key		14883	0					
ANR	14920	Argument	key_len		14883	2					
ANR	14921	Identifier	key_len		14883	0					
ANR	14922	Argument	( void * ) & tmp		14883	3					
ANR	14923	CastExpression	( void * ) & tmp		14883	0					
ANR	14924	CastTarget	void *		14883	0					
ANR	14925	UnaryOperationExpression	& tmp		14883	1					
ANR	14926	UnaryOperator	&		14883	0					
ANR	14927	Identifier	tmp		14883	1					
ANR	14928	Argument	sizeof ( zval * )		14883	4					
ANR	14929	SizeofExpression	sizeof ( zval * )		14883	0					
ANR	14930	Sizeof	sizeof		14883	0					
ANR	14931	SizeofOperand	zval *		14883	1					
ANR	14932	Argument	NULL		14883	5					
ANR	14933	Identifier	NULL		14883	0					
ANR	14934	ReturnType	ZEND_API int		14883	1					
ANR	14935	Identifier	add_assoc_double_ex		14883	2					
ANR	14936	ParameterList	"zval * arg , const char * key , uint key_len , double d"		14883	3					
ANR	14937	Parameter	zval * arg	1268:33:32505:32513	14883	0	True				
ANR	14938	ParameterType	zval *		14883	0					
ANR	14939	Identifier	arg		14883	1					
ANR	14940	Parameter	const char * key	1268:44:32516:32530	14883	1	True				
ANR	14941	ParameterType	const char *		14883	0					
ANR	14942	Identifier	key		14883	1					
ANR	14943	Parameter	uint key_len	1268:61:32533:32544	14883	2	True				
ANR	14944	ParameterType	uint		14883	0					
ANR	14945	Identifier	key_len		14883	1					
ANR	14946	Parameter	double d	1268:75:32547:32554	14883	3	True				
ANR	14947	ParameterType	double		14883	0					
ANR	14948	Identifier	d		14883	1					
ANR	14949	CFGEntryNode	ENTRY		14883		True				
ANR	14950	CFGExitNode	EXIT		14883		True				
ANR	14951	Symbol	NULL		14883						
ANR	14952	Symbol	d		14883						
ANR	14953	Symbol	tmp		14883						
ANR	14954	Symbol	arg		14883						
ANR	14955	Symbol	& tmp		14883						
ANR	14956	Symbol	Z_ARRVAL_P		14883						
ANR	14957	Symbol	key		14883						
ANR	14958	Symbol	key_len		14883						
ANR	14959	Symbol	zend_symtable_update		14883						
ANR	14960	Function	add_assoc_string_ex	1279:0:32737:33168							
ANR	14961	FunctionDef	"add_assoc_string_ex (zval * arg , const char * key , uint key_len , char * str , int duplicate)"		14960	0					
ANR	14962	CompoundStatement		1280:0:32848:33168	14960	0					
ANR	14963	IdentifierDeclStatement	zval * tmp ;	1281:1:32851:32860	14960	0	True				
ANR	14964	IdentifierDecl	* tmp		14960	0					
ANR	14965	IdentifierDeclType	zval *		14960	0					
ANR	14966	Identifier	tmp		14960	1					
ANR	14967	IdentifierDeclStatement	size_t _len = strlen ( str ) ;	1282:1:32863:32888	14960	1	True				
ANR	14968	IdentifierDecl	_len = strlen ( str )		14960	0					
ANR	14969	IdentifierDeclType	size_t		14960	0					
ANR	14970	Identifier	_len		14960	1					
ANR	14971	AssignmentExpression	_len = strlen ( str )		14960	2		=			
ANR	14972	Identifier	_len		14960	0					
ANR	14973	CallExpression	strlen ( str )		14960	1					
ANR	14974	Callee	strlen		14960	0					
ANR	14975	Identifier	strlen		14960	0					
ANR	14976	ArgumentList	str		14960	1					
ANR	14977	Argument	str		14960	0					
ANR	14978	Identifier	str		14960	0					
ANR	14979	IfStatement	if ( UNEXPECTED ( _len > INT_MAX ) )		14960	2					
ANR	14980	Condition	UNEXPECTED ( _len > INT_MAX )	1284:5:32896:32921	14960	0	True				
ANR	14981	CallExpression	UNEXPECTED ( _len > INT_MAX )		14960	0					
ANR	14982	Callee	UNEXPECTED		14960	0					
ANR	14983	Identifier	UNEXPECTED		14960	0					
ANR	14984	ArgumentList	_len > INT_MAX		14960	1					
ANR	14985	Argument	_len > INT_MAX		14960	0					
ANR	14986	RelationalExpression	_len > INT_MAX		14960	0		>			
ANR	14987	Identifier	_len		14960	0					
ANR	14988	Identifier	INT_MAX		14960	1					
ANR	14989	CompoundStatement		5:33:75:75	14960	1					
ANR	14990	ExpressionStatement	"zend_error_noreturn ( E_ERROR , ""String overflow, max size is %d"" , INT_MAX )"	1285:2:32928:33000	14960	0	True				
ANR	14991	CallExpression	"zend_error_noreturn ( E_ERROR , ""String overflow, max size is %d"" , INT_MAX )"		14960	0					
ANR	14992	Callee	zend_error_noreturn		14960	0					
ANR	14993	Identifier	zend_error_noreturn		14960	0					
ANR	14994	ArgumentList	E_ERROR		14960	1					
ANR	14995	Argument	E_ERROR		14960	0					
ANR	14996	Identifier	E_ERROR		14960	0					
ANR	14997	Argument	"""String overflow, max size is %d"""		14960	1					
ANR	14998	PrimaryExpression	"""String overflow, max size is %d"""		14960	0					
ANR	14999	Argument	INT_MAX		14960	2					
ANR	15000	Identifier	INT_MAX		14960	0					
ANR	15001	ExpressionStatement	MAKE_STD_ZVAL ( tmp )	1288:1:33007:33025	14960	3	True				
ANR	15002	CallExpression	MAKE_STD_ZVAL ( tmp )		14960	0					
ANR	15003	Callee	MAKE_STD_ZVAL		14960	0					
ANR	15004	Identifier	MAKE_STD_ZVAL		14960	0					
ANR	15005	ArgumentList	tmp		14960	1					
ANR	15006	Argument	tmp		14960	0					
ANR	15007	Identifier	tmp		14960	0					
ANR	15008	ExpressionStatement	"ZVAL_STRINGL ( tmp , str , _len , duplicate )"	1289:1:33028:33067	14960	4	True				
ANR	15009	CallExpression	"ZVAL_STRINGL ( tmp , str , _len , duplicate )"		14960	0					
ANR	15010	Callee	ZVAL_STRINGL		14960	0					
ANR	15011	Identifier	ZVAL_STRINGL		14960	0					
ANR	15012	ArgumentList	tmp		14960	1					
ANR	15013	Argument	tmp		14960	0					
ANR	15014	Identifier	tmp		14960	0					
ANR	15015	Argument	str		14960	1					
ANR	15016	Identifier	str		14960	0					
ANR	15017	Argument	_len		14960	2					
ANR	15018	Identifier	_len		14960	0					
ANR	15019	Argument	duplicate		14960	3					
ANR	15020	Identifier	duplicate		14960	0					
ANR	15021	ReturnStatement	"return zend_symtable_update ( Z_ARRVAL_P ( arg ) , key , key_len , ( void * ) & tmp , sizeof ( zval * ) , NULL ) ;"	1291:1:33071:33166	14960	5	True				
ANR	15022	CallExpression	"zend_symtable_update ( Z_ARRVAL_P ( arg ) , key , key_len , ( void * ) & tmp , sizeof ( zval * ) , NULL )"		14960	0					
ANR	15023	Callee	zend_symtable_update		14960	0					
ANR	15024	Identifier	zend_symtable_update		14960	0					
ANR	15025	ArgumentList	Z_ARRVAL_P ( arg )		14960	1					
ANR	15026	Argument	Z_ARRVAL_P ( arg )		14960	0					
ANR	15027	CallExpression	Z_ARRVAL_P ( arg )		14960	0					
ANR	15028	Callee	Z_ARRVAL_P		14960	0					
ANR	15029	Identifier	Z_ARRVAL_P		14960	0					
ANR	15030	ArgumentList	arg		14960	1					
ANR	15031	Argument	arg		14960	0					
ANR	15032	Identifier	arg		14960	0					
ANR	15033	Argument	key		14960	1					
ANR	15034	Identifier	key		14960	0					
ANR	15035	Argument	key_len		14960	2					
ANR	15036	Identifier	key_len		14960	0					
ANR	15037	Argument	( void * ) & tmp		14960	3					
ANR	15038	CastExpression	( void * ) & tmp		14960	0					
ANR	15039	CastTarget	void *		14960	0					
ANR	15040	UnaryOperationExpression	& tmp		14960	1					
ANR	15041	UnaryOperator	&		14960	0					
ANR	15042	Identifier	tmp		14960	1					
ANR	15043	Argument	sizeof ( zval * )		14960	4					
ANR	15044	SizeofExpression	sizeof ( zval * )		14960	0					
ANR	15045	Sizeof	sizeof		14960	0					
ANR	15046	SizeofOperand	zval *		14960	1					
ANR	15047	Argument	NULL		14960	5					
ANR	15048	Identifier	NULL		14960	0					
ANR	15049	ReturnType	ZEND_API int		14960	1					
ANR	15050	Identifier	add_assoc_string_ex		14960	2					
ANR	15051	ParameterList	"zval * arg , const char * key , uint key_len , char * str , int duplicate"		14960	3					
ANR	15052	Parameter	zval * arg	1279:33:32770:32778	14960	0	True				
ANR	15053	ParameterType	zval *		14960	0					
ANR	15054	Identifier	arg		14960	1					
ANR	15055	Parameter	const char * key	1279:44:32781:32795	14960	1	True				
ANR	15056	ParameterType	const char *		14960	0					
ANR	15057	Identifier	key		14960	1					
ANR	15058	Parameter	uint key_len	1279:61:32798:32809	14960	2	True				
ANR	15059	ParameterType	uint		14960	0					
ANR	15060	Identifier	key_len		14960	1					
ANR	15061	Parameter	char * str	1279:75:32812:32820	14960	3	True				
ANR	15062	ParameterType	char *		14960	0					
ANR	15063	Identifier	str		14960	1					
ANR	15064	Parameter	int duplicate	1279:86:32823:32835	14960	4	True				
ANR	15065	ParameterType	int		14960	0					
ANR	15066	Identifier	duplicate		14960	1					
ANR	15067	CFGEntryNode	ENTRY		14960		True				
ANR	15068	CFGExitNode	EXIT		14960		True				
ANR	15069	Symbol	NULL		14960						
ANR	15070	Symbol	duplicate		14960						
ANR	15071	Symbol	str		14960						
ANR	15072	Symbol	UNEXPECTED		14960						
ANR	15073	Symbol	strlen		14960						
ANR	15074	Symbol	E_ERROR		14960						
ANR	15075	Symbol	tmp		14960						
ANR	15076	Symbol	arg		14960						
ANR	15077	Symbol	INT_MAX		14960						
ANR	15078	Symbol	_len		14960						
ANR	15079	Symbol	& tmp		14960						
ANR	15080	Symbol	Z_ARRVAL_P		14960						
ANR	15081	Symbol	key		14960						
ANR	15082	Symbol	key_len		14960						
ANR	15083	Symbol	zend_symtable_update		14960						
ANR	15084	Function	add_assoc_stringl_ex	1295:0:33181:33602							
ANR	15085	FunctionDef	"add_assoc_stringl_ex (zval * arg , const char * key , uint key_len , char * str , uint length , int duplicate)"		15084	0					
ANR	15086	CompoundStatement		1296:0:33306:33602	15084	0					
ANR	15087	IdentifierDeclStatement	zval * tmp ;	1297:1:33309:33318	15084	0	True				
ANR	15088	IdentifierDecl	* tmp		15084	0					
ANR	15089	IdentifierDeclType	zval *		15084	0					
ANR	15090	Identifier	tmp		15084	1					
ANR	15091	IfStatement	if ( UNEXPECTED ( length > INT_MAX ) )		15084	1					
ANR	15092	Condition	UNEXPECTED ( length > INT_MAX )	1299:5:33326:33353	15084	0	True				
ANR	15093	CallExpression	UNEXPECTED ( length > INT_MAX )		15084	0					
ANR	15094	Callee	UNEXPECTED		15084	0					
ANR	15095	Identifier	UNEXPECTED		15084	0					
ANR	15096	ArgumentList	length > INT_MAX		15084	1					
ANR	15097	Argument	length > INT_MAX		15084	0					
ANR	15098	RelationalExpression	length > INT_MAX		15084	0		>			
ANR	15099	Identifier	length		15084	0					
ANR	15100	Identifier	INT_MAX		15084	1					
ANR	15101	CompoundStatement		4:35:49:49	15084	1					
ANR	15102	ExpressionStatement	"zend_error_noreturn ( E_ERROR , ""String overflow, max size is %d"" , INT_MAX )"	1300:2:33360:33432	15084	0	True				
ANR	15103	CallExpression	"zend_error_noreturn ( E_ERROR , ""String overflow, max size is %d"" , INT_MAX )"		15084	0					
ANR	15104	Callee	zend_error_noreturn		15084	0					
ANR	15105	Identifier	zend_error_noreturn		15084	0					
ANR	15106	ArgumentList	E_ERROR		15084	1					
ANR	15107	Argument	E_ERROR		15084	0					
ANR	15108	Identifier	E_ERROR		15084	0					
ANR	15109	Argument	"""String overflow, max size is %d"""		15084	1					
ANR	15110	PrimaryExpression	"""String overflow, max size is %d"""		15084	0					
ANR	15111	Argument	INT_MAX		15084	2					
ANR	15112	Identifier	INT_MAX		15084	0					
ANR	15113	ExpressionStatement	MAKE_STD_ZVAL ( tmp )	1303:1:33439:33457	15084	2	True				
ANR	15114	CallExpression	MAKE_STD_ZVAL ( tmp )		15084	0					
ANR	15115	Callee	MAKE_STD_ZVAL		15084	0					
ANR	15116	Identifier	MAKE_STD_ZVAL		15084	0					
ANR	15117	ArgumentList	tmp		15084	1					
ANR	15118	Argument	tmp		15084	0					
ANR	15119	Identifier	tmp		15084	0					
ANR	15120	ExpressionStatement	"ZVAL_STRINGL ( tmp , str , length , duplicate )"	1304:1:33460:33501	15084	3	True				
ANR	15121	CallExpression	"ZVAL_STRINGL ( tmp , str , length , duplicate )"		15084	0					
ANR	15122	Callee	ZVAL_STRINGL		15084	0					
ANR	15123	Identifier	ZVAL_STRINGL		15084	0					
ANR	15124	ArgumentList	tmp		15084	1					
ANR	15125	Argument	tmp		15084	0					
ANR	15126	Identifier	tmp		15084	0					
ANR	15127	Argument	str		15084	1					
ANR	15128	Identifier	str		15084	0					
ANR	15129	Argument	length		15084	2					
ANR	15130	Identifier	length		15084	0					
ANR	15131	Argument	duplicate		15084	3					
ANR	15132	Identifier	duplicate		15084	0					
ANR	15133	ReturnStatement	"return zend_symtable_update ( Z_ARRVAL_P ( arg ) , key , key_len , ( void * ) & tmp , sizeof ( zval * ) , NULL ) ;"	1306:1:33505:33600	15084	4	True				
ANR	15134	CallExpression	"zend_symtable_update ( Z_ARRVAL_P ( arg ) , key , key_len , ( void * ) & tmp , sizeof ( zval * ) , NULL )"		15084	0					
ANR	15135	Callee	zend_symtable_update		15084	0					
ANR	15136	Identifier	zend_symtable_update		15084	0					
ANR	15137	ArgumentList	Z_ARRVAL_P ( arg )		15084	1					
ANR	15138	Argument	Z_ARRVAL_P ( arg )		15084	0					
ANR	15139	CallExpression	Z_ARRVAL_P ( arg )		15084	0					
ANR	15140	Callee	Z_ARRVAL_P		15084	0					
ANR	15141	Identifier	Z_ARRVAL_P		15084	0					
ANR	15142	ArgumentList	arg		15084	1					
ANR	15143	Argument	arg		15084	0					
ANR	15144	Identifier	arg		15084	0					
ANR	15145	Argument	key		15084	1					
ANR	15146	Identifier	key		15084	0					
ANR	15147	Argument	key_len		15084	2					
ANR	15148	Identifier	key_len		15084	0					
ANR	15149	Argument	( void * ) & tmp		15084	3					
ANR	15150	CastExpression	( void * ) & tmp		15084	0					
ANR	15151	CastTarget	void *		15084	0					
ANR	15152	UnaryOperationExpression	& tmp		15084	1					
ANR	15153	UnaryOperator	&		15084	0					
ANR	15154	Identifier	tmp		15084	1					
ANR	15155	Argument	sizeof ( zval * )		15084	4					
ANR	15156	SizeofExpression	sizeof ( zval * )		15084	0					
ANR	15157	Sizeof	sizeof		15084	0					
ANR	15158	SizeofOperand	zval *		15084	1					
ANR	15159	Argument	NULL		15084	5					
ANR	15160	Identifier	NULL		15084	0					
ANR	15161	ReturnType	ZEND_API int		15084	1					
ANR	15162	Identifier	add_assoc_stringl_ex		15084	2					
ANR	15163	ParameterList	"zval * arg , const char * key , uint key_len , char * str , uint length , int duplicate"		15084	3					
ANR	15164	Parameter	zval * arg	1295:34:33215:33223	15084	0	True				
ANR	15165	ParameterType	zval *		15084	0					
ANR	15166	Identifier	arg		15084	1					
ANR	15167	Parameter	const char * key	1295:45:33226:33240	15084	1	True				
ANR	15168	ParameterType	const char *		15084	0					
ANR	15169	Identifier	key		15084	1					
ANR	15170	Parameter	uint key_len	1295:62:33243:33254	15084	2	True				
ANR	15171	ParameterType	uint		15084	0					
ANR	15172	Identifier	key_len		15084	1					
ANR	15173	Parameter	char * str	1295:76:33257:33265	15084	3	True				
ANR	15174	ParameterType	char *		15084	0					
ANR	15175	Identifier	str		15084	1					
ANR	15176	Parameter	uint length	1295:87:33268:33278	15084	4	True				
ANR	15177	ParameterType	uint		15084	0					
ANR	15178	Identifier	length		15084	1					
ANR	15179	Parameter	int duplicate	1295:100:33281:33293	15084	5	True				
ANR	15180	ParameterType	int		15084	0					
ANR	15181	Identifier	duplicate		15084	1					
ANR	15182	CFGEntryNode	ENTRY		15084		True				
ANR	15183	CFGExitNode	EXIT		15084		True				
ANR	15184	Symbol	NULL		15084						
ANR	15185	Symbol	length		15084						
ANR	15186	Symbol	duplicate		15084						
ANR	15187	Symbol	str		15084						
ANR	15188	Symbol	UNEXPECTED		15084						
ANR	15189	Symbol	E_ERROR		15084						
ANR	15190	Symbol	tmp		15084						
ANR	15191	Symbol	arg		15084						
ANR	15192	Symbol	INT_MAX		15084						
ANR	15193	Symbol	& tmp		15084						
ANR	15194	Symbol	Z_ARRVAL_P		15084						
ANR	15195	Symbol	key		15084						
ANR	15196	Symbol	key_len		15084						
ANR	15197	Symbol	zend_symtable_update		15084						
ANR	15198	Function	add_assoc_zval_ex	1310:0:33615:33813							
ANR	15199	FunctionDef	"add_assoc_zval_ex (zval * arg , const char * key , uint key_len , zval * value)"		15198	0					
ANR	15200	CompoundStatement		1311:0:33711:33813	15198	0					
ANR	15201	ReturnStatement	"return zend_symtable_update ( Z_ARRVAL_P ( arg ) , key , key_len , ( void * ) & value , sizeof ( zval * ) , NULL ) ;"	1312:1:33714:33811	15198	0	True				
ANR	15202	CallExpression	"zend_symtable_update ( Z_ARRVAL_P ( arg ) , key , key_len , ( void * ) & value , sizeof ( zval * ) , NULL )"		15198	0					
ANR	15203	Callee	zend_symtable_update		15198	0					
ANR	15204	Identifier	zend_symtable_update		15198	0					
ANR	15205	ArgumentList	Z_ARRVAL_P ( arg )		15198	1					
ANR	15206	Argument	Z_ARRVAL_P ( arg )		15198	0					
ANR	15207	CallExpression	Z_ARRVAL_P ( arg )		15198	0					
ANR	15208	Callee	Z_ARRVAL_P		15198	0					
ANR	15209	Identifier	Z_ARRVAL_P		15198	0					
ANR	15210	ArgumentList	arg		15198	1					
ANR	15211	Argument	arg		15198	0					
ANR	15212	Identifier	arg		15198	0					
ANR	15213	Argument	key		15198	1					
ANR	15214	Identifier	key		15198	0					
ANR	15215	Argument	key_len		15198	2					
ANR	15216	Identifier	key_len		15198	0					
ANR	15217	Argument	( void * ) & value		15198	3					
ANR	15218	CastExpression	( void * ) & value		15198	0					
ANR	15219	CastTarget	void *		15198	0					
ANR	15220	UnaryOperationExpression	& value		15198	1					
ANR	15221	UnaryOperator	&		15198	0					
ANR	15222	Identifier	value		15198	1					
ANR	15223	Argument	sizeof ( zval * )		15198	4					
ANR	15224	SizeofExpression	sizeof ( zval * )		15198	0					
ANR	15225	Sizeof	sizeof		15198	0					
ANR	15226	SizeofOperand	zval *		15198	1					
ANR	15227	Argument	NULL		15198	5					
ANR	15228	Identifier	NULL		15198	0					
ANR	15229	ReturnType	ZEND_API int		15198	1					
ANR	15230	Identifier	add_assoc_zval_ex		15198	2					
ANR	15231	ParameterList	"zval * arg , const char * key , uint key_len , zval * value"		15198	3					
ANR	15232	Parameter	zval * arg	1310:31:33646:33654	15198	0	True				
ANR	15233	ParameterType	zval *		15198	0					
ANR	15234	Identifier	arg		15198	1					
ANR	15235	Parameter	const char * key	1310:42:33657:33671	15198	1	True				
ANR	15236	ParameterType	const char *		15198	0					
ANR	15237	Identifier	key		15198	1					
ANR	15238	Parameter	uint key_len	1310:59:33674:33685	15198	2	True				
ANR	15239	ParameterType	uint		15198	0					
ANR	15240	Identifier	key_len		15198	1					
ANR	15241	Parameter	zval * value	1310:73:33688:33698	15198	3	True				
ANR	15242	ParameterType	zval *		15198	0					
ANR	15243	Identifier	value		15198	1					
ANR	15244	CFGEntryNode	ENTRY		15198		True				
ANR	15245	CFGExitNode	EXIT		15198		True				
ANR	15246	Symbol	& value		15198						
ANR	15247	Symbol	NULL		15198						
ANR	15248	Symbol	arg		15198						
ANR	15249	Symbol	Z_ARRVAL_P		15198						
ANR	15250	Symbol	value		15198						
ANR	15251	Symbol	key		15198						
ANR	15252	Symbol	key_len		15198						
ANR	15253	Symbol	zend_symtable_update		15198						
ANR	15254	Function	add_index_long	1316:0:33826:34046							
ANR	15255	FunctionDef	"add_index_long (zval * arg , ulong index , long n)"		15254	0					
ANR	15256	CompoundStatement		1317:0:33896:34046	15254	0					
ANR	15257	IdentifierDeclStatement	zval * tmp ;	1318:1:33899:33908	15254	0	True				
ANR	15258	IdentifierDecl	* tmp		15254	0					
ANR	15259	IdentifierDeclType	zval *		15254	0					
ANR	15260	Identifier	tmp		15254	1					
ANR	15261	ExpressionStatement	MAKE_STD_ZVAL ( tmp )	1320:1:33912:33930	15254	1	True				
ANR	15262	CallExpression	MAKE_STD_ZVAL ( tmp )		15254	0					
ANR	15263	Callee	MAKE_STD_ZVAL		15254	0					
ANR	15264	Identifier	MAKE_STD_ZVAL		15254	0					
ANR	15265	ArgumentList	tmp		15254	1					
ANR	15266	Argument	tmp		15254	0					
ANR	15267	Identifier	tmp		15254	0					
ANR	15268	ExpressionStatement	"ZVAL_LONG ( tmp , n )"	1321:1:33933:33950	15254	2	True				
ANR	15269	CallExpression	"ZVAL_LONG ( tmp , n )"		15254	0					
ANR	15270	Callee	ZVAL_LONG		15254	0					
ANR	15271	Identifier	ZVAL_LONG		15254	0					
ANR	15272	ArgumentList	tmp		15254	1					
ANR	15273	Argument	tmp		15254	0					
ANR	15274	Identifier	tmp		15254	0					
ANR	15275	Argument	n		15254	1					
ANR	15276	Identifier	n		15254	0					
ANR	15277	ReturnStatement	"return zend_hash_index_update ( Z_ARRVAL_P ( arg ) , index , ( void * ) & tmp , sizeof ( zval * ) , NULL ) ;"	1323:1:33954:34044	15254	3	True				
ANR	15278	CallExpression	"zend_hash_index_update ( Z_ARRVAL_P ( arg ) , index , ( void * ) & tmp , sizeof ( zval * ) , NULL )"		15254	0					
ANR	15279	Callee	zend_hash_index_update		15254	0					
ANR	15280	Identifier	zend_hash_index_update		15254	0					
ANR	15281	ArgumentList	Z_ARRVAL_P ( arg )		15254	1					
ANR	15282	Argument	Z_ARRVAL_P ( arg )		15254	0					
ANR	15283	CallExpression	Z_ARRVAL_P ( arg )		15254	0					
ANR	15284	Callee	Z_ARRVAL_P		15254	0					
ANR	15285	Identifier	Z_ARRVAL_P		15254	0					
ANR	15286	ArgumentList	arg		15254	1					
ANR	15287	Argument	arg		15254	0					
ANR	15288	Identifier	arg		15254	0					
ANR	15289	Argument	index		15254	1					
ANR	15290	Identifier	index		15254	0					
ANR	15291	Argument	( void * ) & tmp		15254	2					
ANR	15292	CastExpression	( void * ) & tmp		15254	0					
ANR	15293	CastTarget	void *		15254	0					
ANR	15294	UnaryOperationExpression	& tmp		15254	1					
ANR	15295	UnaryOperator	&		15254	0					
ANR	15296	Identifier	tmp		15254	1					
ANR	15297	Argument	sizeof ( zval * )		15254	3					
ANR	15298	SizeofExpression	sizeof ( zval * )		15254	0					
ANR	15299	Sizeof	sizeof		15254	0					
ANR	15300	SizeofOperand	zval *		15254	1					
ANR	15301	Argument	NULL		15254	4					
ANR	15302	Identifier	NULL		15254	0					
ANR	15303	ReturnType	ZEND_API int		15254	1					
ANR	15304	Identifier	add_index_long		15254	2					
ANR	15305	ParameterList	"zval * arg , ulong index , long n"		15254	3					
ANR	15306	Parameter	zval * arg	1316:28:33854:33862	15254	0	True				
ANR	15307	ParameterType	zval *		15254	0					
ANR	15308	Identifier	arg		15254	1					
ANR	15309	Parameter	ulong index	1316:39:33865:33875	15254	1	True				
ANR	15310	ParameterType	ulong		15254	0					
ANR	15311	Identifier	index		15254	1					
ANR	15312	Parameter	long n	1316:52:33878:33883	15254	2	True				
ANR	15313	ParameterType	long		15254	0					
ANR	15314	Identifier	n		15254	1					
ANR	15315	CFGEntryNode	ENTRY		15254		True				
ANR	15316	CFGExitNode	EXIT		15254		True				
ANR	15317	Symbol	NULL		15254						
ANR	15318	Symbol	tmp		15254						
ANR	15319	Symbol	zend_hash_index_update		15254						
ANR	15320	Symbol	arg		15254						
ANR	15321	Symbol	index		15254						
ANR	15322	Symbol	& tmp		15254						
ANR	15323	Symbol	Z_ARRVAL_P		15254						
ANR	15324	Symbol	n		15254						
ANR	15325	Function	add_index_null	1327:0:34059:34268							
ANR	15326	FunctionDef	"add_index_null (zval * arg , ulong index)"		15325	0					
ANR	15327	CompoundStatement		1328:0:34121:34268	15325	0					
ANR	15328	IdentifierDeclStatement	zval * tmp ;	1329:1:34124:34133	15325	0	True				
ANR	15329	IdentifierDecl	* tmp		15325	0					
ANR	15330	IdentifierDeclType	zval *		15325	0					
ANR	15331	Identifier	tmp		15325	1					
ANR	15332	ExpressionStatement	MAKE_STD_ZVAL ( tmp )	1331:1:34137:34155	15325	1	True				
ANR	15333	CallExpression	MAKE_STD_ZVAL ( tmp )		15325	0					
ANR	15334	Callee	MAKE_STD_ZVAL		15325	0					
ANR	15335	Identifier	MAKE_STD_ZVAL		15325	0					
ANR	15336	ArgumentList	tmp		15325	1					
ANR	15337	Argument	tmp		15325	0					
ANR	15338	Identifier	tmp		15325	0					
ANR	15339	ExpressionStatement	ZVAL_NULL ( tmp )	1332:1:34158:34172	15325	2	True				
ANR	15340	CallExpression	ZVAL_NULL ( tmp )		15325	0					
ANR	15341	Callee	ZVAL_NULL		15325	0					
ANR	15342	Identifier	ZVAL_NULL		15325	0					
ANR	15343	ArgumentList	tmp		15325	1					
ANR	15344	Argument	tmp		15325	0					
ANR	15345	Identifier	tmp		15325	0					
ANR	15346	ReturnStatement	"return zend_hash_index_update ( Z_ARRVAL_P ( arg ) , index , ( void * ) & tmp , sizeof ( zval * ) , NULL ) ;"	1334:1:34176:34266	15325	3	True				
ANR	15347	CallExpression	"zend_hash_index_update ( Z_ARRVAL_P ( arg ) , index , ( void * ) & tmp , sizeof ( zval * ) , NULL )"		15325	0					
ANR	15348	Callee	zend_hash_index_update		15325	0					
ANR	15349	Identifier	zend_hash_index_update		15325	0					
ANR	15350	ArgumentList	Z_ARRVAL_P ( arg )		15325	1					
ANR	15351	Argument	Z_ARRVAL_P ( arg )		15325	0					
ANR	15352	CallExpression	Z_ARRVAL_P ( arg )		15325	0					
ANR	15353	Callee	Z_ARRVAL_P		15325	0					
ANR	15354	Identifier	Z_ARRVAL_P		15325	0					
ANR	15355	ArgumentList	arg		15325	1					
ANR	15356	Argument	arg		15325	0					
ANR	15357	Identifier	arg		15325	0					
ANR	15358	Argument	index		15325	1					
ANR	15359	Identifier	index		15325	0					
ANR	15360	Argument	( void * ) & tmp		15325	2					
ANR	15361	CastExpression	( void * ) & tmp		15325	0					
ANR	15362	CastTarget	void *		15325	0					
ANR	15363	UnaryOperationExpression	& tmp		15325	1					
ANR	15364	UnaryOperator	&		15325	0					
ANR	15365	Identifier	tmp		15325	1					
ANR	15366	Argument	sizeof ( zval * )		15325	3					
ANR	15367	SizeofExpression	sizeof ( zval * )		15325	0					
ANR	15368	Sizeof	sizeof		15325	0					
ANR	15369	SizeofOperand	zval *		15325	1					
ANR	15370	Argument	NULL		15325	4					
ANR	15371	Identifier	NULL		15325	0					
ANR	15372	ReturnType	ZEND_API int		15325	1					
ANR	15373	Identifier	add_index_null		15325	2					
ANR	15374	ParameterList	"zval * arg , ulong index"		15325	3					
ANR	15375	Parameter	zval * arg	1327:28:34087:34095	15325	0	True				
ANR	15376	ParameterType	zval *		15325	0					
ANR	15377	Identifier	arg		15325	1					
ANR	15378	Parameter	ulong index	1327:39:34098:34108	15325	1	True				
ANR	15379	ParameterType	ulong		15325	0					
ANR	15380	Identifier	index		15325	1					
ANR	15381	CFGEntryNode	ENTRY		15325		True				
ANR	15382	CFGExitNode	EXIT		15325		True				
ANR	15383	Symbol	NULL		15325						
ANR	15384	Symbol	tmp		15325						
ANR	15385	Symbol	zend_hash_index_update		15325						
ANR	15386	Symbol	arg		15325						
ANR	15387	Symbol	index		15325						
ANR	15388	Symbol	& tmp		15325						
ANR	15389	Symbol	Z_ARRVAL_P		15325						
ANR	15390	Function	add_index_bool	1338:0:34281:34500							
ANR	15391	FunctionDef	"add_index_bool (zval * arg , ulong index , int b)"		15390	0					
ANR	15392	CompoundStatement		1339:0:34350:34500	15390	0					
ANR	15393	IdentifierDeclStatement	zval * tmp ;	1340:1:34353:34362	15390	0	True				
ANR	15394	IdentifierDecl	* tmp		15390	0					
ANR	15395	IdentifierDeclType	zval *		15390	0					
ANR	15396	Identifier	tmp		15390	1					
ANR	15397	ExpressionStatement	MAKE_STD_ZVAL ( tmp )	1342:1:34366:34384	15390	1	True				
ANR	15398	CallExpression	MAKE_STD_ZVAL ( tmp )		15390	0					
ANR	15399	Callee	MAKE_STD_ZVAL		15390	0					
ANR	15400	Identifier	MAKE_STD_ZVAL		15390	0					
ANR	15401	ArgumentList	tmp		15390	1					
ANR	15402	Argument	tmp		15390	0					
ANR	15403	Identifier	tmp		15390	0					
ANR	15404	ExpressionStatement	"ZVAL_BOOL ( tmp , b )"	1343:1:34387:34404	15390	2	True				
ANR	15405	CallExpression	"ZVAL_BOOL ( tmp , b )"		15390	0					
ANR	15406	Callee	ZVAL_BOOL		15390	0					
ANR	15407	Identifier	ZVAL_BOOL		15390	0					
ANR	15408	ArgumentList	tmp		15390	1					
ANR	15409	Argument	tmp		15390	0					
ANR	15410	Identifier	tmp		15390	0					
ANR	15411	Argument	b		15390	1					
ANR	15412	Identifier	b		15390	0					
ANR	15413	ReturnStatement	"return zend_hash_index_update ( Z_ARRVAL_P ( arg ) , index , ( void * ) & tmp , sizeof ( zval * ) , NULL ) ;"	1345:1:34408:34498	15390	3	True				
ANR	15414	CallExpression	"zend_hash_index_update ( Z_ARRVAL_P ( arg ) , index , ( void * ) & tmp , sizeof ( zval * ) , NULL )"		15390	0					
ANR	15415	Callee	zend_hash_index_update		15390	0					
ANR	15416	Identifier	zend_hash_index_update		15390	0					
ANR	15417	ArgumentList	Z_ARRVAL_P ( arg )		15390	1					
ANR	15418	Argument	Z_ARRVAL_P ( arg )		15390	0					
ANR	15419	CallExpression	Z_ARRVAL_P ( arg )		15390	0					
ANR	15420	Callee	Z_ARRVAL_P		15390	0					
ANR	15421	Identifier	Z_ARRVAL_P		15390	0					
ANR	15422	ArgumentList	arg		15390	1					
ANR	15423	Argument	arg		15390	0					
ANR	15424	Identifier	arg		15390	0					
ANR	15425	Argument	index		15390	1					
ANR	15426	Identifier	index		15390	0					
ANR	15427	Argument	( void * ) & tmp		15390	2					
ANR	15428	CastExpression	( void * ) & tmp		15390	0					
ANR	15429	CastTarget	void *		15390	0					
ANR	15430	UnaryOperationExpression	& tmp		15390	1					
ANR	15431	UnaryOperator	&		15390	0					
ANR	15432	Identifier	tmp		15390	1					
ANR	15433	Argument	sizeof ( zval * )		15390	3					
ANR	15434	SizeofExpression	sizeof ( zval * )		15390	0					
ANR	15435	Sizeof	sizeof		15390	0					
ANR	15436	SizeofOperand	zval *		15390	1					
ANR	15437	Argument	NULL		15390	4					
ANR	15438	Identifier	NULL		15390	0					
ANR	15439	ReturnType	ZEND_API int		15390	1					
ANR	15440	Identifier	add_index_bool		15390	2					
ANR	15441	ParameterList	"zval * arg , ulong index , int b"		15390	3					
ANR	15442	Parameter	zval * arg	1338:28:34309:34317	15390	0	True				
ANR	15443	ParameterType	zval *		15390	0					
ANR	15444	Identifier	arg		15390	1					
ANR	15445	Parameter	ulong index	1338:39:34320:34330	15390	1	True				
ANR	15446	ParameterType	ulong		15390	0					
ANR	15447	Identifier	index		15390	1					
ANR	15448	Parameter	int b	1338:52:34333:34337	15390	2	True				
ANR	15449	ParameterType	int		15390	0					
ANR	15450	Identifier	b		15390	1					
ANR	15451	CFGEntryNode	ENTRY		15390		True				
ANR	15452	CFGExitNode	EXIT		15390		True				
ANR	15453	Symbol	b		15390						
ANR	15454	Symbol	NULL		15390						
ANR	15455	Symbol	tmp		15390						
ANR	15456	Symbol	zend_hash_index_update		15390						
ANR	15457	Symbol	arg		15390						
ANR	15458	Symbol	index		15390						
ANR	15459	Symbol	& tmp		15390						
ANR	15460	Symbol	Z_ARRVAL_P		15390						
ANR	15461	Function	add_index_resource	1349:0:34513:34740							
ANR	15462	FunctionDef	"add_index_resource (zval * arg , ulong index , int r)"		15461	0					
ANR	15463	CompoundStatement		1350:0:34586:34740	15461	0					
ANR	15464	IdentifierDeclStatement	zval * tmp ;	1351:1:34589:34598	15461	0	True				
ANR	15465	IdentifierDecl	* tmp		15461	0					
ANR	15466	IdentifierDeclType	zval *		15461	0					
ANR	15467	Identifier	tmp		15461	1					
ANR	15468	ExpressionStatement	MAKE_STD_ZVAL ( tmp )	1353:1:34602:34620	15461	1	True				
ANR	15469	CallExpression	MAKE_STD_ZVAL ( tmp )		15461	0					
ANR	15470	Callee	MAKE_STD_ZVAL		15461	0					
ANR	15471	Identifier	MAKE_STD_ZVAL		15461	0					
ANR	15472	ArgumentList	tmp		15461	1					
ANR	15473	Argument	tmp		15461	0					
ANR	15474	Identifier	tmp		15461	0					
ANR	15475	ExpressionStatement	"ZVAL_RESOURCE ( tmp , r )"	1354:1:34623:34644	15461	2	True				
ANR	15476	CallExpression	"ZVAL_RESOURCE ( tmp , r )"		15461	0					
ANR	15477	Callee	ZVAL_RESOURCE		15461	0					
ANR	15478	Identifier	ZVAL_RESOURCE		15461	0					
ANR	15479	ArgumentList	tmp		15461	1					
ANR	15480	Argument	tmp		15461	0					
ANR	15481	Identifier	tmp		15461	0					
ANR	15482	Argument	r		15461	1					
ANR	15483	Identifier	r		15461	0					
ANR	15484	ReturnStatement	"return zend_hash_index_update ( Z_ARRVAL_P ( arg ) , index , ( void * ) & tmp , sizeof ( zval * ) , NULL ) ;"	1356:1:34648:34738	15461	3	True				
ANR	15485	CallExpression	"zend_hash_index_update ( Z_ARRVAL_P ( arg ) , index , ( void * ) & tmp , sizeof ( zval * ) , NULL )"		15461	0					
ANR	15486	Callee	zend_hash_index_update		15461	0					
ANR	15487	Identifier	zend_hash_index_update		15461	0					
ANR	15488	ArgumentList	Z_ARRVAL_P ( arg )		15461	1					
ANR	15489	Argument	Z_ARRVAL_P ( arg )		15461	0					
ANR	15490	CallExpression	Z_ARRVAL_P ( arg )		15461	0					
ANR	15491	Callee	Z_ARRVAL_P		15461	0					
ANR	15492	Identifier	Z_ARRVAL_P		15461	0					
ANR	15493	ArgumentList	arg		15461	1					
ANR	15494	Argument	arg		15461	0					
ANR	15495	Identifier	arg		15461	0					
ANR	15496	Argument	index		15461	1					
ANR	15497	Identifier	index		15461	0					
ANR	15498	Argument	( void * ) & tmp		15461	2					
ANR	15499	CastExpression	( void * ) & tmp		15461	0					
ANR	15500	CastTarget	void *		15461	0					
ANR	15501	UnaryOperationExpression	& tmp		15461	1					
ANR	15502	UnaryOperator	&		15461	0					
ANR	15503	Identifier	tmp		15461	1					
ANR	15504	Argument	sizeof ( zval * )		15461	3					
ANR	15505	SizeofExpression	sizeof ( zval * )		15461	0					
ANR	15506	Sizeof	sizeof		15461	0					
ANR	15507	SizeofOperand	zval *		15461	1					
ANR	15508	Argument	NULL		15461	4					
ANR	15509	Identifier	NULL		15461	0					
ANR	15510	ReturnType	ZEND_API int		15461	1					
ANR	15511	Identifier	add_index_resource		15461	2					
ANR	15512	ParameterList	"zval * arg , ulong index , int r"		15461	3					
ANR	15513	Parameter	zval * arg	1349:32:34545:34553	15461	0	True				
ANR	15514	ParameterType	zval *		15461	0					
ANR	15515	Identifier	arg		15461	1					
ANR	15516	Parameter	ulong index	1349:43:34556:34566	15461	1	True				
ANR	15517	ParameterType	ulong		15461	0					
ANR	15518	Identifier	index		15461	1					
ANR	15519	Parameter	int r	1349:56:34569:34573	15461	2	True				
ANR	15520	ParameterType	int		15461	0					
ANR	15521	Identifier	r		15461	1					
ANR	15522	CFGEntryNode	ENTRY		15461		True				
ANR	15523	CFGExitNode	EXIT		15461		True				
ANR	15524	Symbol	r		15461						
ANR	15525	Symbol	NULL		15461						
ANR	15526	Symbol	tmp		15461						
ANR	15527	Symbol	zend_hash_index_update		15461						
ANR	15528	Symbol	arg		15461						
ANR	15529	Symbol	index		15461						
ANR	15530	Symbol	& tmp		15461						
ANR	15531	Symbol	Z_ARRVAL_P		15461						
ANR	15532	Function	add_index_double	1360:0:34753:34979							
ANR	15533	FunctionDef	"add_index_double (zval * arg , ulong index , double d)"		15532	0					
ANR	15534	CompoundStatement		1361:0:34827:34979	15532	0					
ANR	15535	IdentifierDeclStatement	zval * tmp ;	1362:1:34830:34839	15532	0	True				
ANR	15536	IdentifierDecl	* tmp		15532	0					
ANR	15537	IdentifierDeclType	zval *		15532	0					
ANR	15538	Identifier	tmp		15532	1					
ANR	15539	ExpressionStatement	MAKE_STD_ZVAL ( tmp )	1364:1:34843:34861	15532	1	True				
ANR	15540	CallExpression	MAKE_STD_ZVAL ( tmp )		15532	0					
ANR	15541	Callee	MAKE_STD_ZVAL		15532	0					
ANR	15542	Identifier	MAKE_STD_ZVAL		15532	0					
ANR	15543	ArgumentList	tmp		15532	1					
ANR	15544	Argument	tmp		15532	0					
ANR	15545	Identifier	tmp		15532	0					
ANR	15546	ExpressionStatement	"ZVAL_DOUBLE ( tmp , d )"	1365:1:34864:34883	15532	2	True				
ANR	15547	CallExpression	"ZVAL_DOUBLE ( tmp , d )"		15532	0					
ANR	15548	Callee	ZVAL_DOUBLE		15532	0					
ANR	15549	Identifier	ZVAL_DOUBLE		15532	0					
ANR	15550	ArgumentList	tmp		15532	1					
ANR	15551	Argument	tmp		15532	0					
ANR	15552	Identifier	tmp		15532	0					
ANR	15553	Argument	d		15532	1					
ANR	15554	Identifier	d		15532	0					
ANR	15555	ReturnStatement	"return zend_hash_index_update ( Z_ARRVAL_P ( arg ) , index , ( void * ) & tmp , sizeof ( zval * ) , NULL ) ;"	1367:1:34887:34977	15532	3	True				
ANR	15556	CallExpression	"zend_hash_index_update ( Z_ARRVAL_P ( arg ) , index , ( void * ) & tmp , sizeof ( zval * ) , NULL )"		15532	0					
ANR	15557	Callee	zend_hash_index_update		15532	0					
ANR	15558	Identifier	zend_hash_index_update		15532	0					
ANR	15559	ArgumentList	Z_ARRVAL_P ( arg )		15532	1					
ANR	15560	Argument	Z_ARRVAL_P ( arg )		15532	0					
ANR	15561	CallExpression	Z_ARRVAL_P ( arg )		15532	0					
ANR	15562	Callee	Z_ARRVAL_P		15532	0					
ANR	15563	Identifier	Z_ARRVAL_P		15532	0					
ANR	15564	ArgumentList	arg		15532	1					
ANR	15565	Argument	arg		15532	0					
ANR	15566	Identifier	arg		15532	0					
ANR	15567	Argument	index		15532	1					
ANR	15568	Identifier	index		15532	0					
ANR	15569	Argument	( void * ) & tmp		15532	2					
ANR	15570	CastExpression	( void * ) & tmp		15532	0					
ANR	15571	CastTarget	void *		15532	0					
ANR	15572	UnaryOperationExpression	& tmp		15532	1					
ANR	15573	UnaryOperator	&		15532	0					
ANR	15574	Identifier	tmp		15532	1					
ANR	15575	Argument	sizeof ( zval * )		15532	3					
ANR	15576	SizeofExpression	sizeof ( zval * )		15532	0					
ANR	15577	Sizeof	sizeof		15532	0					
ANR	15578	SizeofOperand	zval *		15532	1					
ANR	15579	Argument	NULL		15532	4					
ANR	15580	Identifier	NULL		15532	0					
ANR	15581	ReturnType	ZEND_API int		15532	1					
ANR	15582	Identifier	add_index_double		15532	2					
ANR	15583	ParameterList	"zval * arg , ulong index , double d"		15532	3					
ANR	15584	Parameter	zval * arg	1360:30:34783:34791	15532	0	True				
ANR	15585	ParameterType	zval *		15532	0					
ANR	15586	Identifier	arg		15532	1					
ANR	15587	Parameter	ulong index	1360:41:34794:34804	15532	1	True				
ANR	15588	ParameterType	ulong		15532	0					
ANR	15589	Identifier	index		15532	1					
ANR	15590	Parameter	double d	1360:54:34807:34814	15532	2	True				
ANR	15591	ParameterType	double		15532	0					
ANR	15592	Identifier	d		15532	1					
ANR	15593	CFGEntryNode	ENTRY		15532		True				
ANR	15594	CFGExitNode	EXIT		15532		True				
ANR	15595	Symbol	NULL		15532						
ANR	15596	Symbol	d		15532						
ANR	15597	Symbol	tmp		15532						
ANR	15598	Symbol	zend_hash_index_update		15532						
ANR	15599	Symbol	arg		15532						
ANR	15600	Symbol	index		15532						
ANR	15601	Symbol	& tmp		15532						
ANR	15602	Symbol	Z_ARRVAL_P		15532						
ANR	15603	Function	add_index_string	1371:0:34992:35396							
ANR	15604	FunctionDef	"add_index_string (zval * arg , ulong index , const char * str , int duplicate)"		15603	0					
ANR	15605	CompoundStatement		1372:0:35088:35396	15603	0					
ANR	15606	IdentifierDeclStatement	zval * tmp ;	1373:1:35091:35100	15603	0	True				
ANR	15607	IdentifierDecl	* tmp		15603	0					
ANR	15608	IdentifierDeclType	zval *		15603	0					
ANR	15609	Identifier	tmp		15603	1					
ANR	15610	IdentifierDeclStatement	size_t _len = strlen ( str ) ;	1374:1:35103:35128	15603	1	True				
ANR	15611	IdentifierDecl	_len = strlen ( str )		15603	0					
ANR	15612	IdentifierDeclType	size_t		15603	0					
ANR	15613	Identifier	_len		15603	1					
ANR	15614	AssignmentExpression	_len = strlen ( str )		15603	2		=			
ANR	15615	Identifier	_len		15603	0					
ANR	15616	CallExpression	strlen ( str )		15603	1					
ANR	15617	Callee	strlen		15603	0					
ANR	15618	Identifier	strlen		15603	0					
ANR	15619	ArgumentList	str		15603	1					
ANR	15620	Argument	str		15603	0					
ANR	15621	Identifier	str		15603	0					
ANR	15622	IfStatement	if ( UNEXPECTED ( _len > INT_MAX ) )		15603	2					
ANR	15623	Condition	UNEXPECTED ( _len > INT_MAX )	1376:5:35136:35161	15603	0	True				
ANR	15624	CallExpression	UNEXPECTED ( _len > INT_MAX )		15603	0					
ANR	15625	Callee	UNEXPECTED		15603	0					
ANR	15626	Identifier	UNEXPECTED		15603	0					
ANR	15627	ArgumentList	_len > INT_MAX		15603	1					
ANR	15628	Argument	_len > INT_MAX		15603	0					
ANR	15629	RelationalExpression	_len > INT_MAX		15603	0		>			
ANR	15630	Identifier	_len		15603	0					
ANR	15631	Identifier	INT_MAX		15603	1					
ANR	15632	CompoundStatement		5:33:75:75	15603	1					
ANR	15633	ExpressionStatement	"zend_error_noreturn ( E_ERROR , ""String overflow, max size is %d"" , INT_MAX )"	1377:2:35168:35240	15603	0	True				
ANR	15634	CallExpression	"zend_error_noreturn ( E_ERROR , ""String overflow, max size is %d"" , INT_MAX )"		15603	0					
ANR	15635	Callee	zend_error_noreturn		15603	0					
ANR	15636	Identifier	zend_error_noreturn		15603	0					
ANR	15637	ArgumentList	E_ERROR		15603	1					
ANR	15638	Argument	E_ERROR		15603	0					
ANR	15639	Identifier	E_ERROR		15603	0					
ANR	15640	Argument	"""String overflow, max size is %d"""		15603	1					
ANR	15641	PrimaryExpression	"""String overflow, max size is %d"""		15603	0					
ANR	15642	Argument	INT_MAX		15603	2					
ANR	15643	Identifier	INT_MAX		15603	0					
ANR	15644	ExpressionStatement	MAKE_STD_ZVAL ( tmp )	1380:1:35247:35265	15603	3	True				
ANR	15645	CallExpression	MAKE_STD_ZVAL ( tmp )		15603	0					
ANR	15646	Callee	MAKE_STD_ZVAL		15603	0					
ANR	15647	Identifier	MAKE_STD_ZVAL		15603	0					
ANR	15648	ArgumentList	tmp		15603	1					
ANR	15649	Argument	tmp		15603	0					
ANR	15650	Identifier	tmp		15603	0					
ANR	15651	ExpressionStatement	"ZVAL_STRING ( tmp , str , duplicate )"	1381:1:35268:35300	15603	4	True				
ANR	15652	CallExpression	"ZVAL_STRING ( tmp , str , duplicate )"		15603	0					
ANR	15653	Callee	ZVAL_STRING		15603	0					
ANR	15654	Identifier	ZVAL_STRING		15603	0					
ANR	15655	ArgumentList	tmp		15603	1					
ANR	15656	Argument	tmp		15603	0					
ANR	15657	Identifier	tmp		15603	0					
ANR	15658	Argument	str		15603	1					
ANR	15659	Identifier	str		15603	0					
ANR	15660	Argument	duplicate		15603	2					
ANR	15661	Identifier	duplicate		15603	0					
ANR	15662	ReturnStatement	"return zend_hash_index_update ( Z_ARRVAL_P ( arg ) , index , ( void * ) & tmp , sizeof ( zval * ) , NULL ) ;"	1383:1:35304:35394	15603	5	True				
ANR	15663	CallExpression	"zend_hash_index_update ( Z_ARRVAL_P ( arg ) , index , ( void * ) & tmp , sizeof ( zval * ) , NULL )"		15603	0					
ANR	15664	Callee	zend_hash_index_update		15603	0					
ANR	15665	Identifier	zend_hash_index_update		15603	0					
ANR	15666	ArgumentList	Z_ARRVAL_P ( arg )		15603	1					
ANR	15667	Argument	Z_ARRVAL_P ( arg )		15603	0					
ANR	15668	CallExpression	Z_ARRVAL_P ( arg )		15603	0					
ANR	15669	Callee	Z_ARRVAL_P		15603	0					
ANR	15670	Identifier	Z_ARRVAL_P		15603	0					
ANR	15671	ArgumentList	arg		15603	1					
ANR	15672	Argument	arg		15603	0					
ANR	15673	Identifier	arg		15603	0					
ANR	15674	Argument	index		15603	1					
ANR	15675	Identifier	index		15603	0					
ANR	15676	Argument	( void * ) & tmp		15603	2					
ANR	15677	CastExpression	( void * ) & tmp		15603	0					
ANR	15678	CastTarget	void *		15603	0					
ANR	15679	UnaryOperationExpression	& tmp		15603	1					
ANR	15680	UnaryOperator	&		15603	0					
ANR	15681	Identifier	tmp		15603	1					
ANR	15682	Argument	sizeof ( zval * )		15603	3					
ANR	15683	SizeofExpression	sizeof ( zval * )		15603	0					
ANR	15684	Sizeof	sizeof		15603	0					
ANR	15685	SizeofOperand	zval *		15603	1					
ANR	15686	Argument	NULL		15603	4					
ANR	15687	Identifier	NULL		15603	0					
ANR	15688	ReturnType	ZEND_API int		15603	1					
ANR	15689	Identifier	add_index_string		15603	2					
ANR	15690	ParameterList	"zval * arg , ulong index , const char * str , int duplicate"		15603	3					
ANR	15691	Parameter	zval * arg	1371:30:35022:35030	15603	0	True				
ANR	15692	ParameterType	zval *		15603	0					
ANR	15693	Identifier	arg		15603	1					
ANR	15694	Parameter	ulong index	1371:41:35033:35043	15603	1	True				
ANR	15695	ParameterType	ulong		15603	0					
ANR	15696	Identifier	index		15603	1					
ANR	15697	Parameter	const char * str	1371:54:35046:35060	15603	2	True				
ANR	15698	ParameterType	const char *		15603	0					
ANR	15699	Identifier	str		15603	1					
ANR	15700	Parameter	int duplicate	1371:71:35063:35075	15603	3	True				
ANR	15701	ParameterType	int		15603	0					
ANR	15702	Identifier	duplicate		15603	1					
ANR	15703	CFGEntryNode	ENTRY		15603		True				
ANR	15704	CFGExitNode	EXIT		15603		True				
ANR	15705	Symbol	NULL		15603						
ANR	15706	Symbol	zend_hash_index_update		15603						
ANR	15707	Symbol	index		15603						
ANR	15708	Symbol	duplicate		15603						
ANR	15709	Symbol	str		15603						
ANR	15710	Symbol	UNEXPECTED		15603						
ANR	15711	Symbol	strlen		15603						
ANR	15712	Symbol	E_ERROR		15603						
ANR	15713	Symbol	tmp		15603						
ANR	15714	Symbol	arg		15603						
ANR	15715	Symbol	INT_MAX		15603						
ANR	15716	Symbol	_len		15603						
ANR	15717	Symbol	& tmp		15603						
ANR	15718	Symbol	Z_ARRVAL_P		15603						
ANR	15719	Function	add_index_stringl	1387:0:35409:35810							
ANR	15720	FunctionDef	"add_index_stringl (zval * arg , ulong index , const char * str , uint length , int duplicate)"		15719	0					
ANR	15721	CompoundStatement		1388:0:35519:35810	15719	0					
ANR	15722	IdentifierDeclStatement	zval * tmp ;	1389:1:35522:35531	15719	0	True				
ANR	15723	IdentifierDecl	* tmp		15719	0					
ANR	15724	IdentifierDeclType	zval *		15719	0					
ANR	15725	Identifier	tmp		15719	1					
ANR	15726	IfStatement	if ( UNEXPECTED ( length > INT_MAX ) )		15719	1					
ANR	15727	Condition	UNEXPECTED ( length > INT_MAX )	1391:5:35539:35566	15719	0	True				
ANR	15728	CallExpression	UNEXPECTED ( length > INT_MAX )		15719	0					
ANR	15729	Callee	UNEXPECTED		15719	0					
ANR	15730	Identifier	UNEXPECTED		15719	0					
ANR	15731	ArgumentList	length > INT_MAX		15719	1					
ANR	15732	Argument	length > INT_MAX		15719	0					
ANR	15733	RelationalExpression	length > INT_MAX		15719	0		>			
ANR	15734	Identifier	length		15719	0					
ANR	15735	Identifier	INT_MAX		15719	1					
ANR	15736	CompoundStatement		4:35:49:49	15719	1					
ANR	15737	ExpressionStatement	"zend_error_noreturn ( E_ERROR , ""String overflow, max size is %d"" , INT_MAX )"	1392:2:35573:35645	15719	0	True				
ANR	15738	CallExpression	"zend_error_noreturn ( E_ERROR , ""String overflow, max size is %d"" , INT_MAX )"		15719	0					
ANR	15739	Callee	zend_error_noreturn		15719	0					
ANR	15740	Identifier	zend_error_noreturn		15719	0					
ANR	15741	ArgumentList	E_ERROR		15719	1					
ANR	15742	Argument	E_ERROR		15719	0					
ANR	15743	Identifier	E_ERROR		15719	0					
ANR	15744	Argument	"""String overflow, max size is %d"""		15719	1					
ANR	15745	PrimaryExpression	"""String overflow, max size is %d"""		15719	0					
ANR	15746	Argument	INT_MAX		15719	2					
ANR	15747	Identifier	INT_MAX		15719	0					
ANR	15748	ExpressionStatement	MAKE_STD_ZVAL ( tmp )	1395:1:35652:35670	15719	2	True				
ANR	15749	CallExpression	MAKE_STD_ZVAL ( tmp )		15719	0					
ANR	15750	Callee	MAKE_STD_ZVAL		15719	0					
ANR	15751	Identifier	MAKE_STD_ZVAL		15719	0					
ANR	15752	ArgumentList	tmp		15719	1					
ANR	15753	Argument	tmp		15719	0					
ANR	15754	Identifier	tmp		15719	0					
ANR	15755	ExpressionStatement	"ZVAL_STRINGL ( tmp , str , length , duplicate )"	1396:1:35673:35714	15719	3	True				
ANR	15756	CallExpression	"ZVAL_STRINGL ( tmp , str , length , duplicate )"		15719	0					
ANR	15757	Callee	ZVAL_STRINGL		15719	0					
ANR	15758	Identifier	ZVAL_STRINGL		15719	0					
ANR	15759	ArgumentList	tmp		15719	1					
ANR	15760	Argument	tmp		15719	0					
ANR	15761	Identifier	tmp		15719	0					
ANR	15762	Argument	str		15719	1					
ANR	15763	Identifier	str		15719	0					
ANR	15764	Argument	length		15719	2					
ANR	15765	Identifier	length		15719	0					
ANR	15766	Argument	duplicate		15719	3					
ANR	15767	Identifier	duplicate		15719	0					
ANR	15768	ReturnStatement	"return zend_hash_index_update ( Z_ARRVAL_P ( arg ) , index , ( void * ) & tmp , sizeof ( zval * ) , NULL ) ;"	1398:1:35718:35808	15719	4	True				
ANR	15769	CallExpression	"zend_hash_index_update ( Z_ARRVAL_P ( arg ) , index , ( void * ) & tmp , sizeof ( zval * ) , NULL )"		15719	0					
ANR	15770	Callee	zend_hash_index_update		15719	0					
ANR	15771	Identifier	zend_hash_index_update		15719	0					
ANR	15772	ArgumentList	Z_ARRVAL_P ( arg )		15719	1					
ANR	15773	Argument	Z_ARRVAL_P ( arg )		15719	0					
ANR	15774	CallExpression	Z_ARRVAL_P ( arg )		15719	0					
ANR	15775	Callee	Z_ARRVAL_P		15719	0					
ANR	15776	Identifier	Z_ARRVAL_P		15719	0					
ANR	15777	ArgumentList	arg		15719	1					
ANR	15778	Argument	arg		15719	0					
ANR	15779	Identifier	arg		15719	0					
ANR	15780	Argument	index		15719	1					
ANR	15781	Identifier	index		15719	0					
ANR	15782	Argument	( void * ) & tmp		15719	2					
ANR	15783	CastExpression	( void * ) & tmp		15719	0					
ANR	15784	CastTarget	void *		15719	0					
ANR	15785	UnaryOperationExpression	& tmp		15719	1					
ANR	15786	UnaryOperator	&		15719	0					
ANR	15787	Identifier	tmp		15719	1					
ANR	15788	Argument	sizeof ( zval * )		15719	3					
ANR	15789	SizeofExpression	sizeof ( zval * )		15719	0					
ANR	15790	Sizeof	sizeof		15719	0					
ANR	15791	SizeofOperand	zval *		15719	1					
ANR	15792	Argument	NULL		15719	4					
ANR	15793	Identifier	NULL		15719	0					
ANR	15794	ReturnType	ZEND_API int		15719	1					
ANR	15795	Identifier	add_index_stringl		15719	2					
ANR	15796	ParameterList	"zval * arg , ulong index , const char * str , uint length , int duplicate"		15719	3					
ANR	15797	Parameter	zval * arg	1387:31:35440:35448	15719	0	True				
ANR	15798	ParameterType	zval *		15719	0					
ANR	15799	Identifier	arg		15719	1					
ANR	15800	Parameter	ulong index	1387:42:35451:35461	15719	1	True				
ANR	15801	ParameterType	ulong		15719	0					
ANR	15802	Identifier	index		15719	1					
ANR	15803	Parameter	const char * str	1387:55:35464:35478	15719	2	True				
ANR	15804	ParameterType	const char *		15719	0					
ANR	15805	Identifier	str		15719	1					
ANR	15806	Parameter	uint length	1387:72:35481:35491	15719	3	True				
ANR	15807	ParameterType	uint		15719	0					
ANR	15808	Identifier	length		15719	1					
ANR	15809	Parameter	int duplicate	1387:85:35494:35506	15719	4	True				
ANR	15810	ParameterType	int		15719	0					
ANR	15811	Identifier	duplicate		15719	1					
ANR	15812	CFGEntryNode	ENTRY		15719		True				
ANR	15813	CFGExitNode	EXIT		15719		True				
ANR	15814	Symbol	NULL		15719						
ANR	15815	Symbol	zend_hash_index_update		15719						
ANR	15816	Symbol	length		15719						
ANR	15817	Symbol	index		15719						
ANR	15818	Symbol	duplicate		15719						
ANR	15819	Symbol	str		15719						
ANR	15820	Symbol	UNEXPECTED		15719						
ANR	15821	Symbol	E_ERROR		15719						
ANR	15822	Symbol	tmp		15719						
ANR	15823	Symbol	arg		15719						
ANR	15824	Symbol	INT_MAX		15719						
ANR	15825	Symbol	& tmp		15719						
ANR	15826	Symbol	Z_ARRVAL_P		15719						
ANR	15827	Function	add_index_zval	1402:0:35823:35995							
ANR	15828	FunctionDef	"add_index_zval (zval * arg , ulong index , zval * value)"		15827	0					
ANR	15829	CompoundStatement		1403:0:35898:35995	15827	0					
ANR	15830	ReturnStatement	"return zend_hash_index_update ( Z_ARRVAL_P ( arg ) , index , ( void * ) & value , sizeof ( zval * ) , NULL ) ;"	1404:1:35901:35993	15827	0	True				
ANR	15831	CallExpression	"zend_hash_index_update ( Z_ARRVAL_P ( arg ) , index , ( void * ) & value , sizeof ( zval * ) , NULL )"		15827	0					
ANR	15832	Callee	zend_hash_index_update		15827	0					
ANR	15833	Identifier	zend_hash_index_update		15827	0					
ANR	15834	ArgumentList	Z_ARRVAL_P ( arg )		15827	1					
ANR	15835	Argument	Z_ARRVAL_P ( arg )		15827	0					
ANR	15836	CallExpression	Z_ARRVAL_P ( arg )		15827	0					
ANR	15837	Callee	Z_ARRVAL_P		15827	0					
ANR	15838	Identifier	Z_ARRVAL_P		15827	0					
ANR	15839	ArgumentList	arg		15827	1					
ANR	15840	Argument	arg		15827	0					
ANR	15841	Identifier	arg		15827	0					
ANR	15842	Argument	index		15827	1					
ANR	15843	Identifier	index		15827	0					
ANR	15844	Argument	( void * ) & value		15827	2					
ANR	15845	CastExpression	( void * ) & value		15827	0					
ANR	15846	CastTarget	void *		15827	0					
ANR	15847	UnaryOperationExpression	& value		15827	1					
ANR	15848	UnaryOperator	&		15827	0					
ANR	15849	Identifier	value		15827	1					
ANR	15850	Argument	sizeof ( zval * )		15827	3					
ANR	15851	SizeofExpression	sizeof ( zval * )		15827	0					
ANR	15852	Sizeof	sizeof		15827	0					
ANR	15853	SizeofOperand	zval *		15827	1					
ANR	15854	Argument	NULL		15827	4					
ANR	15855	Identifier	NULL		15827	0					
ANR	15856	ReturnType	ZEND_API int		15827	1					
ANR	15857	Identifier	add_index_zval		15827	2					
ANR	15858	ParameterList	"zval * arg , ulong index , zval * value"		15827	3					
ANR	15859	Parameter	zval * arg	1402:28:35851:35859	15827	0	True				
ANR	15860	ParameterType	zval *		15827	0					
ANR	15861	Identifier	arg		15827	1					
ANR	15862	Parameter	ulong index	1402:39:35862:35872	15827	1	True				
ANR	15863	ParameterType	ulong		15827	0					
ANR	15864	Identifier	index		15827	1					
ANR	15865	Parameter	zval * value	1402:52:35875:35885	15827	2	True				
ANR	15866	ParameterType	zval *		15827	0					
ANR	15867	Identifier	value		15827	1					
ANR	15868	CFGEntryNode	ENTRY		15827		True				
ANR	15869	CFGExitNode	EXIT		15827		True				
ANR	15870	Symbol	& value		15827						
ANR	15871	Symbol	NULL		15827						
ANR	15872	Symbol	zend_hash_index_update		15827						
ANR	15873	Symbol	arg		15827						
ANR	15874	Symbol	index		15827						
ANR	15875	Symbol	Z_ARRVAL_P		15827						
ANR	15876	Symbol	value		15827						
ANR	15877	Function	add_next_index_long	1408:0:36008:36209							
ANR	15878	FunctionDef	"add_next_index_long (zval * arg , long n)"		15877	0					
ANR	15879	CompoundStatement		1409:0:36070:36209	15877	0					
ANR	15880	IdentifierDeclStatement	zval * tmp ;	1410:1:36073:36082	15877	0	True				
ANR	15881	IdentifierDecl	* tmp		15877	0					
ANR	15882	IdentifierDeclType	zval *		15877	0					
ANR	15883	Identifier	tmp		15877	1					
ANR	15884	ExpressionStatement	MAKE_STD_ZVAL ( tmp )	1412:1:36086:36104	15877	1	True				
ANR	15885	CallExpression	MAKE_STD_ZVAL ( tmp )		15877	0					
ANR	15886	Callee	MAKE_STD_ZVAL		15877	0					
ANR	15887	Identifier	MAKE_STD_ZVAL		15877	0					
ANR	15888	ArgumentList	tmp		15877	1					
ANR	15889	Argument	tmp		15877	0					
ANR	15890	Identifier	tmp		15877	0					
ANR	15891	ExpressionStatement	"ZVAL_LONG ( tmp , n )"	1413:1:36107:36124	15877	2	True				
ANR	15892	CallExpression	"ZVAL_LONG ( tmp , n )"		15877	0					
ANR	15893	Callee	ZVAL_LONG		15877	0					
ANR	15894	Identifier	ZVAL_LONG		15877	0					
ANR	15895	ArgumentList	tmp		15877	1					
ANR	15896	Argument	tmp		15877	0					
ANR	15897	Identifier	tmp		15877	0					
ANR	15898	Argument	n		15877	1					
ANR	15899	Identifier	n		15877	0					
ANR	15900	ReturnStatement	"return zend_hash_next_index_insert ( Z_ARRVAL_P ( arg ) , & tmp , sizeof ( zval * ) , NULL ) ;"	1415:1:36128:36207	15877	3	True				
ANR	15901	CallExpression	"zend_hash_next_index_insert ( Z_ARRVAL_P ( arg ) , & tmp , sizeof ( zval * ) , NULL )"		15877	0					
ANR	15902	Callee	zend_hash_next_index_insert		15877	0					
ANR	15903	Identifier	zend_hash_next_index_insert		15877	0					
ANR	15904	ArgumentList	Z_ARRVAL_P ( arg )		15877	1					
ANR	15905	Argument	Z_ARRVAL_P ( arg )		15877	0					
ANR	15906	CallExpression	Z_ARRVAL_P ( arg )		15877	0					
ANR	15907	Callee	Z_ARRVAL_P		15877	0					
ANR	15908	Identifier	Z_ARRVAL_P		15877	0					
ANR	15909	ArgumentList	arg		15877	1					
ANR	15910	Argument	arg		15877	0					
ANR	15911	Identifier	arg		15877	0					
ANR	15912	Argument	& tmp		15877	1					
ANR	15913	UnaryOperationExpression	& tmp		15877	0					
ANR	15914	UnaryOperator	&		15877	0					
ANR	15915	Identifier	tmp		15877	1					
ANR	15916	Argument	sizeof ( zval * )		15877	2					
ANR	15917	SizeofExpression	sizeof ( zval * )		15877	0					
ANR	15918	Sizeof	sizeof		15877	0					
ANR	15919	SizeofOperand	zval *		15877	1					
ANR	15920	Argument	NULL		15877	3					
ANR	15921	Identifier	NULL		15877	0					
ANR	15922	ReturnType	ZEND_API int		15877	1					
ANR	15923	Identifier	add_next_index_long		15877	2					
ANR	15924	ParameterList	"zval * arg , long n"		15877	3					
ANR	15925	Parameter	zval * arg	1408:33:36041:36049	15877	0	True				
ANR	15926	ParameterType	zval *		15877	0					
ANR	15927	Identifier	arg		15877	1					
ANR	15928	Parameter	long n	1408:44:36052:36057	15877	1	True				
ANR	15929	ParameterType	long		15877	0					
ANR	15930	Identifier	n		15877	1					
ANR	15931	CFGEntryNode	ENTRY		15877		True				
ANR	15932	CFGExitNode	EXIT		15877		True				
ANR	15933	Symbol	zend_hash_next_index_insert		15877						
ANR	15934	Symbol	NULL		15877						
ANR	15935	Symbol	tmp		15877						
ANR	15936	Symbol	arg		15877						
ANR	15937	Symbol	& tmp		15877						
ANR	15938	Symbol	Z_ARRVAL_P		15877						
ANR	15939	Symbol	n		15877						
ANR	15940	Function	add_next_index_null	1419:0:36222:36412							
ANR	15941	FunctionDef	add_next_index_null (zval * arg)		15940	0					
ANR	15942	CompoundStatement		1420:0:36276:36412	15940	0					
ANR	15943	IdentifierDeclStatement	zval * tmp ;	1421:1:36279:36288	15940	0	True				
ANR	15944	IdentifierDecl	* tmp		15940	0					
ANR	15945	IdentifierDeclType	zval *		15940	0					
ANR	15946	Identifier	tmp		15940	1					
ANR	15947	ExpressionStatement	MAKE_STD_ZVAL ( tmp )	1423:1:36292:36310	15940	1	True				
ANR	15948	CallExpression	MAKE_STD_ZVAL ( tmp )		15940	0					
ANR	15949	Callee	MAKE_STD_ZVAL		15940	0					
ANR	15950	Identifier	MAKE_STD_ZVAL		15940	0					
ANR	15951	ArgumentList	tmp		15940	1					
ANR	15952	Argument	tmp		15940	0					
ANR	15953	Identifier	tmp		15940	0					
ANR	15954	ExpressionStatement	ZVAL_NULL ( tmp )	1424:1:36313:36327	15940	2	True				
ANR	15955	CallExpression	ZVAL_NULL ( tmp )		15940	0					
ANR	15956	Callee	ZVAL_NULL		15940	0					
ANR	15957	Identifier	ZVAL_NULL		15940	0					
ANR	15958	ArgumentList	tmp		15940	1					
ANR	15959	Argument	tmp		15940	0					
ANR	15960	Identifier	tmp		15940	0					
ANR	15961	ReturnStatement	"return zend_hash_next_index_insert ( Z_ARRVAL_P ( arg ) , & tmp , sizeof ( zval * ) , NULL ) ;"	1426:1:36331:36410	15940	3	True				
ANR	15962	CallExpression	"zend_hash_next_index_insert ( Z_ARRVAL_P ( arg ) , & tmp , sizeof ( zval * ) , NULL )"		15940	0					
ANR	15963	Callee	zend_hash_next_index_insert		15940	0					
ANR	15964	Identifier	zend_hash_next_index_insert		15940	0					
ANR	15965	ArgumentList	Z_ARRVAL_P ( arg )		15940	1					
ANR	15966	Argument	Z_ARRVAL_P ( arg )		15940	0					
ANR	15967	CallExpression	Z_ARRVAL_P ( arg )		15940	0					
ANR	15968	Callee	Z_ARRVAL_P		15940	0					
ANR	15969	Identifier	Z_ARRVAL_P		15940	0					
ANR	15970	ArgumentList	arg		15940	1					
ANR	15971	Argument	arg		15940	0					
ANR	15972	Identifier	arg		15940	0					
ANR	15973	Argument	& tmp		15940	1					
ANR	15974	UnaryOperationExpression	& tmp		15940	0					
ANR	15975	UnaryOperator	&		15940	0					
ANR	15976	Identifier	tmp		15940	1					
ANR	15977	Argument	sizeof ( zval * )		15940	2					
ANR	15978	SizeofExpression	sizeof ( zval * )		15940	0					
ANR	15979	Sizeof	sizeof		15940	0					
ANR	15980	SizeofOperand	zval *		15940	1					
ANR	15981	Argument	NULL		15940	3					
ANR	15982	Identifier	NULL		15940	0					
ANR	15983	ReturnType	ZEND_API int		15940	1					
ANR	15984	Identifier	add_next_index_null		15940	2					
ANR	15985	ParameterList	zval * arg		15940	3					
ANR	15986	Parameter	zval * arg	1419:33:36255:36263	15940	0	True				
ANR	15987	ParameterType	zval *		15940	0					
ANR	15988	Identifier	arg		15940	1					
ANR	15989	CFGEntryNode	ENTRY		15940		True				
ANR	15990	CFGExitNode	EXIT		15940		True				
ANR	15991	Symbol	zend_hash_next_index_insert		15940						
ANR	15992	Symbol	NULL		15940						
ANR	15993	Symbol	tmp		15940						
ANR	15994	Symbol	arg		15940						
ANR	15995	Symbol	& tmp		15940						
ANR	15996	Symbol	Z_ARRVAL_P		15940						
ANR	15997	Function	add_next_index_bool	1430:0:36425:36625							
ANR	15998	FunctionDef	"add_next_index_bool (zval * arg , int b)"		15997	0					
ANR	15999	CompoundStatement		1431:0:36486:36625	15997	0					
ANR	16000	IdentifierDeclStatement	zval * tmp ;	1432:1:36489:36498	15997	0	True				
ANR	16001	IdentifierDecl	* tmp		15997	0					
ANR	16002	IdentifierDeclType	zval *		15997	0					
ANR	16003	Identifier	tmp		15997	1					
ANR	16004	ExpressionStatement	MAKE_STD_ZVAL ( tmp )	1434:1:36502:36520	15997	1	True				
ANR	16005	CallExpression	MAKE_STD_ZVAL ( tmp )		15997	0					
ANR	16006	Callee	MAKE_STD_ZVAL		15997	0					
ANR	16007	Identifier	MAKE_STD_ZVAL		15997	0					
ANR	16008	ArgumentList	tmp		15997	1					
ANR	16009	Argument	tmp		15997	0					
ANR	16010	Identifier	tmp		15997	0					
ANR	16011	ExpressionStatement	"ZVAL_BOOL ( tmp , b )"	1435:1:36523:36540	15997	2	True				
ANR	16012	CallExpression	"ZVAL_BOOL ( tmp , b )"		15997	0					
ANR	16013	Callee	ZVAL_BOOL		15997	0					
ANR	16014	Identifier	ZVAL_BOOL		15997	0					
ANR	16015	ArgumentList	tmp		15997	1					
ANR	16016	Argument	tmp		15997	0					
ANR	16017	Identifier	tmp		15997	0					
ANR	16018	Argument	b		15997	1					
ANR	16019	Identifier	b		15997	0					
ANR	16020	ReturnStatement	"return zend_hash_next_index_insert ( Z_ARRVAL_P ( arg ) , & tmp , sizeof ( zval * ) , NULL ) ;"	1437:1:36544:36623	15997	3	True				
ANR	16021	CallExpression	"zend_hash_next_index_insert ( Z_ARRVAL_P ( arg ) , & tmp , sizeof ( zval * ) , NULL )"		15997	0					
ANR	16022	Callee	zend_hash_next_index_insert		15997	0					
ANR	16023	Identifier	zend_hash_next_index_insert		15997	0					
ANR	16024	ArgumentList	Z_ARRVAL_P ( arg )		15997	1					
ANR	16025	Argument	Z_ARRVAL_P ( arg )		15997	0					
ANR	16026	CallExpression	Z_ARRVAL_P ( arg )		15997	0					
ANR	16027	Callee	Z_ARRVAL_P		15997	0					
ANR	16028	Identifier	Z_ARRVAL_P		15997	0					
ANR	16029	ArgumentList	arg		15997	1					
ANR	16030	Argument	arg		15997	0					
ANR	16031	Identifier	arg		15997	0					
ANR	16032	Argument	& tmp		15997	1					
ANR	16033	UnaryOperationExpression	& tmp		15997	0					
ANR	16034	UnaryOperator	&		15997	0					
ANR	16035	Identifier	tmp		15997	1					
ANR	16036	Argument	sizeof ( zval * )		15997	2					
ANR	16037	SizeofExpression	sizeof ( zval * )		15997	0					
ANR	16038	Sizeof	sizeof		15997	0					
ANR	16039	SizeofOperand	zval *		15997	1					
ANR	16040	Argument	NULL		15997	3					
ANR	16041	Identifier	NULL		15997	0					
ANR	16042	ReturnType	ZEND_API int		15997	1					
ANR	16043	Identifier	add_next_index_bool		15997	2					
ANR	16044	ParameterList	"zval * arg , int b"		15997	3					
ANR	16045	Parameter	zval * arg	1430:33:36458:36466	15997	0	True				
ANR	16046	ParameterType	zval *		15997	0					
ANR	16047	Identifier	arg		15997	1					
ANR	16048	Parameter	int b	1430:44:36469:36473	15997	1	True				
ANR	16049	ParameterType	int		15997	0					
ANR	16050	Identifier	b		15997	1					
ANR	16051	CFGEntryNode	ENTRY		15997		True				
ANR	16052	CFGExitNode	EXIT		15997		True				
ANR	16053	Symbol	b		15997						
ANR	16054	Symbol	zend_hash_next_index_insert		15997						
ANR	16055	Symbol	NULL		15997						
ANR	16056	Symbol	tmp		15997						
ANR	16057	Symbol	arg		15997						
ANR	16058	Symbol	& tmp		15997						
ANR	16059	Symbol	Z_ARRVAL_P		15997						
ANR	16060	Function	add_next_index_resource	1441:0:36638:36846							
ANR	16061	FunctionDef	"add_next_index_resource (zval * arg , int r)"		16060	0					
ANR	16062	CompoundStatement		1442:0:36703:36846	16060	0					
ANR	16063	IdentifierDeclStatement	zval * tmp ;	1443:1:36706:36715	16060	0	True				
ANR	16064	IdentifierDecl	* tmp		16060	0					
ANR	16065	IdentifierDeclType	zval *		16060	0					
ANR	16066	Identifier	tmp		16060	1					
ANR	16067	ExpressionStatement	MAKE_STD_ZVAL ( tmp )	1445:1:36719:36737	16060	1	True				
ANR	16068	CallExpression	MAKE_STD_ZVAL ( tmp )		16060	0					
ANR	16069	Callee	MAKE_STD_ZVAL		16060	0					
ANR	16070	Identifier	MAKE_STD_ZVAL		16060	0					
ANR	16071	ArgumentList	tmp		16060	1					
ANR	16072	Argument	tmp		16060	0					
ANR	16073	Identifier	tmp		16060	0					
ANR	16074	ExpressionStatement	"ZVAL_RESOURCE ( tmp , r )"	1446:1:36740:36761	16060	2	True				
ANR	16075	CallExpression	"ZVAL_RESOURCE ( tmp , r )"		16060	0					
ANR	16076	Callee	ZVAL_RESOURCE		16060	0					
ANR	16077	Identifier	ZVAL_RESOURCE		16060	0					
ANR	16078	ArgumentList	tmp		16060	1					
ANR	16079	Argument	tmp		16060	0					
ANR	16080	Identifier	tmp		16060	0					
ANR	16081	Argument	r		16060	1					
ANR	16082	Identifier	r		16060	0					
ANR	16083	ReturnStatement	"return zend_hash_next_index_insert ( Z_ARRVAL_P ( arg ) , & tmp , sizeof ( zval * ) , NULL ) ;"	1448:1:36765:36844	16060	3	True				
ANR	16084	CallExpression	"zend_hash_next_index_insert ( Z_ARRVAL_P ( arg ) , & tmp , sizeof ( zval * ) , NULL )"		16060	0					
ANR	16085	Callee	zend_hash_next_index_insert		16060	0					
ANR	16086	Identifier	zend_hash_next_index_insert		16060	0					
ANR	16087	ArgumentList	Z_ARRVAL_P ( arg )		16060	1					
ANR	16088	Argument	Z_ARRVAL_P ( arg )		16060	0					
ANR	16089	CallExpression	Z_ARRVAL_P ( arg )		16060	0					
ANR	16090	Callee	Z_ARRVAL_P		16060	0					
ANR	16091	Identifier	Z_ARRVAL_P		16060	0					
ANR	16092	ArgumentList	arg		16060	1					
ANR	16093	Argument	arg		16060	0					
ANR	16094	Identifier	arg		16060	0					
ANR	16095	Argument	& tmp		16060	1					
ANR	16096	UnaryOperationExpression	& tmp		16060	0					
ANR	16097	UnaryOperator	&		16060	0					
ANR	16098	Identifier	tmp		16060	1					
ANR	16099	Argument	sizeof ( zval * )		16060	2					
ANR	16100	SizeofExpression	sizeof ( zval * )		16060	0					
ANR	16101	Sizeof	sizeof		16060	0					
ANR	16102	SizeofOperand	zval *		16060	1					
ANR	16103	Argument	NULL		16060	3					
ANR	16104	Identifier	NULL		16060	0					
ANR	16105	ReturnType	ZEND_API int		16060	1					
ANR	16106	Identifier	add_next_index_resource		16060	2					
ANR	16107	ParameterList	"zval * arg , int r"		16060	3					
ANR	16108	Parameter	zval * arg	1441:37:36675:36683	16060	0	True				
ANR	16109	ParameterType	zval *		16060	0					
ANR	16110	Identifier	arg		16060	1					
ANR	16111	Parameter	int r	1441:48:36686:36690	16060	1	True				
ANR	16112	ParameterType	int		16060	0					
ANR	16113	Identifier	r		16060	1					
ANR	16114	CFGEntryNode	ENTRY		16060		True				
ANR	16115	CFGExitNode	EXIT		16060		True				
ANR	16116	Symbol	r		16060						
ANR	16117	Symbol	zend_hash_next_index_insert		16060						
ANR	16118	Symbol	NULL		16060						
ANR	16119	Symbol	tmp		16060						
ANR	16120	Symbol	arg		16060						
ANR	16121	Symbol	& tmp		16060						
ANR	16122	Symbol	Z_ARRVAL_P		16060						
ANR	16123	Function	add_next_index_double	1452:0:36859:37066							
ANR	16124	FunctionDef	"add_next_index_double (zval * arg , double d)"		16123	0					
ANR	16125	CompoundStatement		1453:0:36925:37066	16123	0					
ANR	16126	IdentifierDeclStatement	zval * tmp ;	1454:1:36928:36937	16123	0	True				
ANR	16127	IdentifierDecl	* tmp		16123	0					
ANR	16128	IdentifierDeclType	zval *		16123	0					
ANR	16129	Identifier	tmp		16123	1					
ANR	16130	ExpressionStatement	MAKE_STD_ZVAL ( tmp )	1456:1:36941:36959	16123	1	True				
ANR	16131	CallExpression	MAKE_STD_ZVAL ( tmp )		16123	0					
ANR	16132	Callee	MAKE_STD_ZVAL		16123	0					
ANR	16133	Identifier	MAKE_STD_ZVAL		16123	0					
ANR	16134	ArgumentList	tmp		16123	1					
ANR	16135	Argument	tmp		16123	0					
ANR	16136	Identifier	tmp		16123	0					
ANR	16137	ExpressionStatement	"ZVAL_DOUBLE ( tmp , d )"	1457:1:36962:36981	16123	2	True				
ANR	16138	CallExpression	"ZVAL_DOUBLE ( tmp , d )"		16123	0					
ANR	16139	Callee	ZVAL_DOUBLE		16123	0					
ANR	16140	Identifier	ZVAL_DOUBLE		16123	0					
ANR	16141	ArgumentList	tmp		16123	1					
ANR	16142	Argument	tmp		16123	0					
ANR	16143	Identifier	tmp		16123	0					
ANR	16144	Argument	d		16123	1					
ANR	16145	Identifier	d		16123	0					
ANR	16146	ReturnStatement	"return zend_hash_next_index_insert ( Z_ARRVAL_P ( arg ) , & tmp , sizeof ( zval * ) , NULL ) ;"	1459:1:36985:37064	16123	3	True				
ANR	16147	CallExpression	"zend_hash_next_index_insert ( Z_ARRVAL_P ( arg ) , & tmp , sizeof ( zval * ) , NULL )"		16123	0					
ANR	16148	Callee	zend_hash_next_index_insert		16123	0					
ANR	16149	Identifier	zend_hash_next_index_insert		16123	0					
ANR	16150	ArgumentList	Z_ARRVAL_P ( arg )		16123	1					
ANR	16151	Argument	Z_ARRVAL_P ( arg )		16123	0					
ANR	16152	CallExpression	Z_ARRVAL_P ( arg )		16123	0					
ANR	16153	Callee	Z_ARRVAL_P		16123	0					
ANR	16154	Identifier	Z_ARRVAL_P		16123	0					
ANR	16155	ArgumentList	arg		16123	1					
ANR	16156	Argument	arg		16123	0					
ANR	16157	Identifier	arg		16123	0					
ANR	16158	Argument	& tmp		16123	1					
ANR	16159	UnaryOperationExpression	& tmp		16123	0					
ANR	16160	UnaryOperator	&		16123	0					
ANR	16161	Identifier	tmp		16123	1					
ANR	16162	Argument	sizeof ( zval * )		16123	2					
ANR	16163	SizeofExpression	sizeof ( zval * )		16123	0					
ANR	16164	Sizeof	sizeof		16123	0					
ANR	16165	SizeofOperand	zval *		16123	1					
ANR	16166	Argument	NULL		16123	3					
ANR	16167	Identifier	NULL		16123	0					
ANR	16168	ReturnType	ZEND_API int		16123	1					
ANR	16169	Identifier	add_next_index_double		16123	2					
ANR	16170	ParameterList	"zval * arg , double d"		16123	3					
ANR	16171	Parameter	zval * arg	1452:35:36894:36902	16123	0	True				
ANR	16172	ParameterType	zval *		16123	0					
ANR	16173	Identifier	arg		16123	1					
ANR	16174	Parameter	double d	1452:46:36905:36912	16123	1	True				
ANR	16175	ParameterType	double		16123	0					
ANR	16176	Identifier	d		16123	1					
ANR	16177	CFGEntryNode	ENTRY		16123		True				
ANR	16178	CFGExitNode	EXIT		16123		True				
ANR	16179	Symbol	zend_hash_next_index_insert		16123						
ANR	16180	Symbol	NULL		16123						
ANR	16181	Symbol	d		16123						
ANR	16182	Symbol	tmp		16123						
ANR	16183	Symbol	arg		16123						
ANR	16184	Symbol	& tmp		16123						
ANR	16185	Symbol	Z_ARRVAL_P		16123						
ANR	16186	Function	add_next_index_string	1463:0:37079:37321							
ANR	16187	FunctionDef	"add_next_index_string (zval * arg , const char * str , int duplicate)"		16186	0					
ANR	16188	CompoundStatement		1464:0:37167:37321	16186	0					
ANR	16189	IdentifierDeclStatement	zval * tmp ;	1465:1:37170:37179	16186	0	True				
ANR	16190	IdentifierDecl	* tmp		16186	0					
ANR	16191	IdentifierDeclType	zval *		16186	0					
ANR	16192	Identifier	tmp		16186	1					
ANR	16193	ExpressionStatement	MAKE_STD_ZVAL ( tmp )	1467:1:37183:37201	16186	1	True				
ANR	16194	CallExpression	MAKE_STD_ZVAL ( tmp )		16186	0					
ANR	16195	Callee	MAKE_STD_ZVAL		16186	0					
ANR	16196	Identifier	MAKE_STD_ZVAL		16186	0					
ANR	16197	ArgumentList	tmp		16186	1					
ANR	16198	Argument	tmp		16186	0					
ANR	16199	Identifier	tmp		16186	0					
ANR	16200	ExpressionStatement	"ZVAL_STRING ( tmp , str , duplicate )"	1468:1:37204:37236	16186	2	True				
ANR	16201	CallExpression	"ZVAL_STRING ( tmp , str , duplicate )"		16186	0					
ANR	16202	Callee	ZVAL_STRING		16186	0					
ANR	16203	Identifier	ZVAL_STRING		16186	0					
ANR	16204	ArgumentList	tmp		16186	1					
ANR	16205	Argument	tmp		16186	0					
ANR	16206	Identifier	tmp		16186	0					
ANR	16207	Argument	str		16186	1					
ANR	16208	Identifier	str		16186	0					
ANR	16209	Argument	duplicate		16186	2					
ANR	16210	Identifier	duplicate		16186	0					
ANR	16211	ReturnStatement	"return zend_hash_next_index_insert ( Z_ARRVAL_P ( arg ) , & tmp , sizeof ( zval * ) , NULL ) ;"	1470:1:37240:37319	16186	3	True				
ANR	16212	CallExpression	"zend_hash_next_index_insert ( Z_ARRVAL_P ( arg ) , & tmp , sizeof ( zval * ) , NULL )"		16186	0					
ANR	16213	Callee	zend_hash_next_index_insert		16186	0					
ANR	16214	Identifier	zend_hash_next_index_insert		16186	0					
ANR	16215	ArgumentList	Z_ARRVAL_P ( arg )		16186	1					
ANR	16216	Argument	Z_ARRVAL_P ( arg )		16186	0					
ANR	16217	CallExpression	Z_ARRVAL_P ( arg )		16186	0					
ANR	16218	Callee	Z_ARRVAL_P		16186	0					
ANR	16219	Identifier	Z_ARRVAL_P		16186	0					
ANR	16220	ArgumentList	arg		16186	1					
ANR	16221	Argument	arg		16186	0					
ANR	16222	Identifier	arg		16186	0					
ANR	16223	Argument	& tmp		16186	1					
ANR	16224	UnaryOperationExpression	& tmp		16186	0					
ANR	16225	UnaryOperator	&		16186	0					
ANR	16226	Identifier	tmp		16186	1					
ANR	16227	Argument	sizeof ( zval * )		16186	2					
ANR	16228	SizeofExpression	sizeof ( zval * )		16186	0					
ANR	16229	Sizeof	sizeof		16186	0					
ANR	16230	SizeofOperand	zval *		16186	1					
ANR	16231	Argument	NULL		16186	3					
ANR	16232	Identifier	NULL		16186	0					
ANR	16233	ReturnType	ZEND_API int		16186	1					
ANR	16234	Identifier	add_next_index_string		16186	2					
ANR	16235	ParameterList	"zval * arg , const char * str , int duplicate"		16186	3					
ANR	16236	Parameter	zval * arg	1463:35:37114:37122	16186	0	True				
ANR	16237	ParameterType	zval *		16186	0					
ANR	16238	Identifier	arg		16186	1					
ANR	16239	Parameter	const char * str	1463:46:37125:37139	16186	1	True				
ANR	16240	ParameterType	const char *		16186	0					
ANR	16241	Identifier	str		16186	1					
ANR	16242	Parameter	int duplicate	1463:63:37142:37154	16186	2	True				
ANR	16243	ParameterType	int		16186	0					
ANR	16244	Identifier	duplicate		16186	1					
ANR	16245	CFGEntryNode	ENTRY		16186		True				
ANR	16246	CFGExitNode	EXIT		16186		True				
ANR	16247	Symbol	str		16186						
ANR	16248	Symbol	zend_hash_next_index_insert		16186						
ANR	16249	Symbol	NULL		16186						
ANR	16250	Symbol	tmp		16186						
ANR	16251	Symbol	arg		16186						
ANR	16252	Symbol	& tmp		16186						
ANR	16253	Symbol	duplicate		16186						
ANR	16254	Symbol	Z_ARRVAL_P		16186						
ANR	16255	Function	add_next_index_stringl	1474:0:37334:37715							
ANR	16256	FunctionDef	"add_next_index_stringl (zval * arg , const char * str , uint length , int duplicate)"		16255	0					
ANR	16257	CompoundStatement		1475:0:37436:37715	16255	0					
ANR	16258	IdentifierDeclStatement	zval * tmp ;	1476:1:37439:37448	16255	0	True				
ANR	16259	IdentifierDecl	* tmp		16255	0					
ANR	16260	IdentifierDeclType	zval *		16255	0					
ANR	16261	Identifier	tmp		16255	1					
ANR	16262	IfStatement	if ( UNEXPECTED ( length > INT_MAX ) )		16255	1					
ANR	16263	Condition	UNEXPECTED ( length > INT_MAX )	1478:5:37456:37483	16255	0	True				
ANR	16264	CallExpression	UNEXPECTED ( length > INT_MAX )		16255	0					
ANR	16265	Callee	UNEXPECTED		16255	0					
ANR	16266	Identifier	UNEXPECTED		16255	0					
ANR	16267	ArgumentList	length > INT_MAX		16255	1					
ANR	16268	Argument	length > INT_MAX		16255	0					
ANR	16269	RelationalExpression	length > INT_MAX		16255	0		>			
ANR	16270	Identifier	length		16255	0					
ANR	16271	Identifier	INT_MAX		16255	1					
ANR	16272	CompoundStatement		4:35:49:49	16255	1					
ANR	16273	ExpressionStatement	"zend_error_noreturn ( E_ERROR , ""String overflow, max size is %d"" , INT_MAX )"	1479:2:37490:37562	16255	0	True				
ANR	16274	CallExpression	"zend_error_noreturn ( E_ERROR , ""String overflow, max size is %d"" , INT_MAX )"		16255	0					
ANR	16275	Callee	zend_error_noreturn		16255	0					
ANR	16276	Identifier	zend_error_noreturn		16255	0					
ANR	16277	ArgumentList	E_ERROR		16255	1					
ANR	16278	Argument	E_ERROR		16255	0					
ANR	16279	Identifier	E_ERROR		16255	0					
ANR	16280	Argument	"""String overflow, max size is %d"""		16255	1					
ANR	16281	PrimaryExpression	"""String overflow, max size is %d"""		16255	0					
ANR	16282	Argument	INT_MAX		16255	2					
ANR	16283	Identifier	INT_MAX		16255	0					
ANR	16284	ExpressionStatement	MAKE_STD_ZVAL ( tmp )	1481:1:37568:37586	16255	2	True				
ANR	16285	CallExpression	MAKE_STD_ZVAL ( tmp )		16255	0					
ANR	16286	Callee	MAKE_STD_ZVAL		16255	0					
ANR	16287	Identifier	MAKE_STD_ZVAL		16255	0					
ANR	16288	ArgumentList	tmp		16255	1					
ANR	16289	Argument	tmp		16255	0					
ANR	16290	Identifier	tmp		16255	0					
ANR	16291	ExpressionStatement	"ZVAL_STRINGL ( tmp , str , length , duplicate )"	1482:1:37589:37630	16255	3	True				
ANR	16292	CallExpression	"ZVAL_STRINGL ( tmp , str , length , duplicate )"		16255	0					
ANR	16293	Callee	ZVAL_STRINGL		16255	0					
ANR	16294	Identifier	ZVAL_STRINGL		16255	0					
ANR	16295	ArgumentList	tmp		16255	1					
ANR	16296	Argument	tmp		16255	0					
ANR	16297	Identifier	tmp		16255	0					
ANR	16298	Argument	str		16255	1					
ANR	16299	Identifier	str		16255	0					
ANR	16300	Argument	length		16255	2					
ANR	16301	Identifier	length		16255	0					
ANR	16302	Argument	duplicate		16255	3					
ANR	16303	Identifier	duplicate		16255	0					
ANR	16304	ReturnStatement	"return zend_hash_next_index_insert ( Z_ARRVAL_P ( arg ) , & tmp , sizeof ( zval * ) , NULL ) ;"	1484:1:37634:37713	16255	4	True				
ANR	16305	CallExpression	"zend_hash_next_index_insert ( Z_ARRVAL_P ( arg ) , & tmp , sizeof ( zval * ) , NULL )"		16255	0					
ANR	16306	Callee	zend_hash_next_index_insert		16255	0					
ANR	16307	Identifier	zend_hash_next_index_insert		16255	0					
ANR	16308	ArgumentList	Z_ARRVAL_P ( arg )		16255	1					
ANR	16309	Argument	Z_ARRVAL_P ( arg )		16255	0					
ANR	16310	CallExpression	Z_ARRVAL_P ( arg )		16255	0					
ANR	16311	Callee	Z_ARRVAL_P		16255	0					
ANR	16312	Identifier	Z_ARRVAL_P		16255	0					
ANR	16313	ArgumentList	arg		16255	1					
ANR	16314	Argument	arg		16255	0					
ANR	16315	Identifier	arg		16255	0					
ANR	16316	Argument	& tmp		16255	1					
ANR	16317	UnaryOperationExpression	& tmp		16255	0					
ANR	16318	UnaryOperator	&		16255	0					
ANR	16319	Identifier	tmp		16255	1					
ANR	16320	Argument	sizeof ( zval * )		16255	2					
ANR	16321	SizeofExpression	sizeof ( zval * )		16255	0					
ANR	16322	Sizeof	sizeof		16255	0					
ANR	16323	SizeofOperand	zval *		16255	1					
ANR	16324	Argument	NULL		16255	3					
ANR	16325	Identifier	NULL		16255	0					
ANR	16326	ReturnType	ZEND_API int		16255	1					
ANR	16327	Identifier	add_next_index_stringl		16255	2					
ANR	16328	ParameterList	"zval * arg , const char * str , uint length , int duplicate"		16255	3					
ANR	16329	Parameter	zval * arg	1474:36:37370:37378	16255	0	True				
ANR	16330	ParameterType	zval *		16255	0					
ANR	16331	Identifier	arg		16255	1					
ANR	16332	Parameter	const char * str	1474:47:37381:37395	16255	1	True				
ANR	16333	ParameterType	const char *		16255	0					
ANR	16334	Identifier	str		16255	1					
ANR	16335	Parameter	uint length	1474:64:37398:37408	16255	2	True				
ANR	16336	ParameterType	uint		16255	0					
ANR	16337	Identifier	length		16255	1					
ANR	16338	Parameter	int duplicate	1474:77:37411:37423	16255	3	True				
ANR	16339	ParameterType	int		16255	0					
ANR	16340	Identifier	duplicate		16255	1					
ANR	16341	CFGEntryNode	ENTRY		16255		True				
ANR	16342	CFGExitNode	EXIT		16255		True				
ANR	16343	Symbol	str		16255						
ANR	16344	Symbol	UNEXPECTED		16255						
ANR	16345	Symbol	zend_hash_next_index_insert		16255						
ANR	16346	Symbol	E_ERROR		16255						
ANR	16347	Symbol	NULL		16255						
ANR	16348	Symbol	tmp		16255						
ANR	16349	Symbol	arg		16255						
ANR	16350	Symbol	length		16255						
ANR	16351	Symbol	INT_MAX		16255						
ANR	16352	Symbol	& tmp		16255						
ANR	16353	Symbol	duplicate		16255						
ANR	16354	Symbol	Z_ARRVAL_P		16255						
ANR	16355	Function	add_next_index_zval	1488:0:37728:37881							
ANR	16356	FunctionDef	"add_next_index_zval (zval * arg , zval * value)"		16355	0					
ANR	16357	CompoundStatement		1489:0:37795:37881	16355	0					
ANR	16358	ReturnStatement	"return zend_hash_next_index_insert ( Z_ARRVAL_P ( arg ) , & value , sizeof ( zval * ) , NULL ) ;"	1490:1:37798:37879	16355	0	True				
ANR	16359	CallExpression	"zend_hash_next_index_insert ( Z_ARRVAL_P ( arg ) , & value , sizeof ( zval * ) , NULL )"		16355	0					
ANR	16360	Callee	zend_hash_next_index_insert		16355	0					
ANR	16361	Identifier	zend_hash_next_index_insert		16355	0					
ANR	16362	ArgumentList	Z_ARRVAL_P ( arg )		16355	1					
ANR	16363	Argument	Z_ARRVAL_P ( arg )		16355	0					
ANR	16364	CallExpression	Z_ARRVAL_P ( arg )		16355	0					
ANR	16365	Callee	Z_ARRVAL_P		16355	0					
ANR	16366	Identifier	Z_ARRVAL_P		16355	0					
ANR	16367	ArgumentList	arg		16355	1					
ANR	16368	Argument	arg		16355	0					
ANR	16369	Identifier	arg		16355	0					
ANR	16370	Argument	& value		16355	1					
ANR	16371	UnaryOperationExpression	& value		16355	0					
ANR	16372	UnaryOperator	&		16355	0					
ANR	16373	Identifier	value		16355	1					
ANR	16374	Argument	sizeof ( zval * )		16355	2					
ANR	16375	SizeofExpression	sizeof ( zval * )		16355	0					
ANR	16376	Sizeof	sizeof		16355	0					
ANR	16377	SizeofOperand	zval *		16355	1					
ANR	16378	Argument	NULL		16355	3					
ANR	16379	Identifier	NULL		16355	0					
ANR	16380	ReturnType	ZEND_API int		16355	1					
ANR	16381	Identifier	add_next_index_zval		16355	2					
ANR	16382	ParameterList	"zval * arg , zval * value"		16355	3					
ANR	16383	Parameter	zval * arg	1488:33:37761:37769	16355	0	True				
ANR	16384	ParameterType	zval *		16355	0					
ANR	16385	Identifier	arg		16355	1					
ANR	16386	Parameter	zval * value	1488:44:37772:37782	16355	1	True				
ANR	16387	ParameterType	zval *		16355	0					
ANR	16388	Identifier	value		16355	1					
ANR	16389	CFGEntryNode	ENTRY		16355		True				
ANR	16390	CFGExitNode	EXIT		16355		True				
ANR	16391	Symbol	zend_hash_next_index_insert		16355						
ANR	16392	Symbol	& value		16355						
ANR	16393	Symbol	NULL		16355						
ANR	16394	Symbol	arg		16355						
ANR	16395	Symbol	Z_ARRVAL_P		16355						
ANR	16396	Symbol	value		16355						
ANR	16397	Function	add_get_assoc_string_ex	1494:0:37894:38348							
ANR	16398	FunctionDef	"add_get_assoc_string_ex (zval * arg , const char * key , uint key_len , const char * str , void * * dest , int duplicate)"		16397	0					
ANR	16399	CompoundStatement		1495:0:38028:38348	16397	0					
ANR	16400	IdentifierDeclStatement	zval * tmp ;	1496:1:38031:38040	16397	0	True				
ANR	16401	IdentifierDecl	* tmp		16397	0					
ANR	16402	IdentifierDeclType	zval *		16397	0					
ANR	16403	Identifier	tmp		16397	1					
ANR	16404	IdentifierDeclStatement	size_t _len = strlen ( str ) ;	1497:1:38043:38068	16397	1	True				
ANR	16405	IdentifierDecl	_len = strlen ( str )		16397	0					
ANR	16406	IdentifierDeclType	size_t		16397	0					
ANR	16407	Identifier	_len		16397	1					
ANR	16408	AssignmentExpression	_len = strlen ( str )		16397	2		=			
ANR	16409	Identifier	_len		16397	0					
ANR	16410	CallExpression	strlen ( str )		16397	1					
ANR	16411	Callee	strlen		16397	0					
ANR	16412	Identifier	strlen		16397	0					
ANR	16413	ArgumentList	str		16397	1					
ANR	16414	Argument	str		16397	0					
ANR	16415	Identifier	str		16397	0					
ANR	16416	IfStatement	if ( UNEXPECTED ( _len > INT_MAX ) )		16397	2					
ANR	16417	Condition	UNEXPECTED ( _len > INT_MAX )	1499:5:38076:38101	16397	0	True				
ANR	16418	CallExpression	UNEXPECTED ( _len > INT_MAX )		16397	0					
ANR	16419	Callee	UNEXPECTED		16397	0					
ANR	16420	Identifier	UNEXPECTED		16397	0					
ANR	16421	ArgumentList	_len > INT_MAX		16397	1					
ANR	16422	Argument	_len > INT_MAX		16397	0					
ANR	16423	RelationalExpression	_len > INT_MAX		16397	0		>			
ANR	16424	Identifier	_len		16397	0					
ANR	16425	Identifier	INT_MAX		16397	1					
ANR	16426	CompoundStatement		5:33:75:75	16397	1					
ANR	16427	ExpressionStatement	"zend_error_noreturn ( E_ERROR , ""String overflow, max size is %d"" , INT_MAX )"	1500:2:38108:38180	16397	0	True				
ANR	16428	CallExpression	"zend_error_noreturn ( E_ERROR , ""String overflow, max size is %d"" , INT_MAX )"		16397	0					
ANR	16429	Callee	zend_error_noreturn		16397	0					
ANR	16430	Identifier	zend_error_noreturn		16397	0					
ANR	16431	ArgumentList	E_ERROR		16397	1					
ANR	16432	Argument	E_ERROR		16397	0					
ANR	16433	Identifier	E_ERROR		16397	0					
ANR	16434	Argument	"""String overflow, max size is %d"""		16397	1					
ANR	16435	PrimaryExpression	"""String overflow, max size is %d"""		16397	0					
ANR	16436	Argument	INT_MAX		16397	2					
ANR	16437	Identifier	INT_MAX		16397	0					
ANR	16438	ExpressionStatement	MAKE_STD_ZVAL ( tmp )	1503:1:38187:38205	16397	3	True				
ANR	16439	CallExpression	MAKE_STD_ZVAL ( tmp )		16397	0					
ANR	16440	Callee	MAKE_STD_ZVAL		16397	0					
ANR	16441	Identifier	MAKE_STD_ZVAL		16397	0					
ANR	16442	ArgumentList	tmp		16397	1					
ANR	16443	Argument	tmp		16397	0					
ANR	16444	Identifier	tmp		16397	0					
ANR	16445	ExpressionStatement	"ZVAL_STRINGL ( tmp , str , _len , duplicate )"	1504:1:38208:38247	16397	4	True				
ANR	16446	CallExpression	"ZVAL_STRINGL ( tmp , str , _len , duplicate )"		16397	0					
ANR	16447	Callee	ZVAL_STRINGL		16397	0					
ANR	16448	Identifier	ZVAL_STRINGL		16397	0					
ANR	16449	ArgumentList	tmp		16397	1					
ANR	16450	Argument	tmp		16397	0					
ANR	16451	Identifier	tmp		16397	0					
ANR	16452	Argument	str		16397	1					
ANR	16453	Identifier	str		16397	0					
ANR	16454	Argument	_len		16397	2					
ANR	16455	Identifier	_len		16397	0					
ANR	16456	Argument	duplicate		16397	3					
ANR	16457	Identifier	duplicate		16397	0					
ANR	16458	ReturnStatement	"return zend_symtable_update ( Z_ARRVAL_P ( arg ) , key , key_len , ( void * ) & tmp , sizeof ( zval * ) , dest ) ;"	1506:1:38251:38346	16397	5	True				
ANR	16459	CallExpression	"zend_symtable_update ( Z_ARRVAL_P ( arg ) , key , key_len , ( void * ) & tmp , sizeof ( zval * ) , dest )"		16397	0					
ANR	16460	Callee	zend_symtable_update		16397	0					
ANR	16461	Identifier	zend_symtable_update		16397	0					
ANR	16462	ArgumentList	Z_ARRVAL_P ( arg )		16397	1					
ANR	16463	Argument	Z_ARRVAL_P ( arg )		16397	0					
ANR	16464	CallExpression	Z_ARRVAL_P ( arg )		16397	0					
ANR	16465	Callee	Z_ARRVAL_P		16397	0					
ANR	16466	Identifier	Z_ARRVAL_P		16397	0					
ANR	16467	ArgumentList	arg		16397	1					
ANR	16468	Argument	arg		16397	0					
ANR	16469	Identifier	arg		16397	0					
ANR	16470	Argument	key		16397	1					
ANR	16471	Identifier	key		16397	0					
ANR	16472	Argument	key_len		16397	2					
ANR	16473	Identifier	key_len		16397	0					
ANR	16474	Argument	( void * ) & tmp		16397	3					
ANR	16475	CastExpression	( void * ) & tmp		16397	0					
ANR	16476	CastTarget	void *		16397	0					
ANR	16477	UnaryOperationExpression	& tmp		16397	1					
ANR	16478	UnaryOperator	&		16397	0					
ANR	16479	Identifier	tmp		16397	1					
ANR	16480	Argument	sizeof ( zval * )		16397	4					
ANR	16481	SizeofExpression	sizeof ( zval * )		16397	0					
ANR	16482	Sizeof	sizeof		16397	0					
ANR	16483	SizeofOperand	zval *		16397	1					
ANR	16484	Argument	dest		16397	5					
ANR	16485	Identifier	dest		16397	0					
ANR	16486	ReturnType	ZEND_API int		16397	1					
ANR	16487	Identifier	add_get_assoc_string_ex		16397	2					
ANR	16488	ParameterList	"zval * arg , const char * key , uint key_len , const char * str , void * * dest , int duplicate"		16397	3					
ANR	16489	Parameter	zval * arg	1494:37:37931:37939	16397	0	True				
ANR	16490	ParameterType	zval *		16397	0					
ANR	16491	Identifier	arg		16397	1					
ANR	16492	Parameter	const char * key	1494:48:37942:37956	16397	1	True				
ANR	16493	ParameterType	const char *		16397	0					
ANR	16494	Identifier	key		16397	1					
ANR	16495	Parameter	uint key_len	1494:65:37959:37970	16397	2	True				
ANR	16496	ParameterType	uint		16397	0					
ANR	16497	Identifier	key_len		16397	1					
ANR	16498	Parameter	const char * str	1494:79:37973:37987	16397	3	True				
ANR	16499	ParameterType	const char *		16397	0					
ANR	16500	Identifier	str		16397	1					
ANR	16501	Parameter	void * * dest	1494:96:37990:38000	16397	4	True				
ANR	16502	ParameterType	void * *		16397	0					
ANR	16503	Identifier	dest		16397	1					
ANR	16504	Parameter	int duplicate	1494:109:38003:38015	16397	5	True				
ANR	16505	ParameterType	int		16397	0					
ANR	16506	Identifier	duplicate		16397	1					
ANR	16507	CFGEntryNode	ENTRY		16397		True				
ANR	16508	CFGExitNode	EXIT		16397		True				
ANR	16509	Symbol	duplicate		16397						
ANR	16510	Symbol	dest		16397						
ANR	16511	Symbol	str		16397						
ANR	16512	Symbol	UNEXPECTED		16397						
ANR	16513	Symbol	strlen		16397						
ANR	16514	Symbol	E_ERROR		16397						
ANR	16515	Symbol	tmp		16397						
ANR	16516	Symbol	arg		16397						
ANR	16517	Symbol	INT_MAX		16397						
ANR	16518	Symbol	_len		16397						
ANR	16519	Symbol	& tmp		16397						
ANR	16520	Symbol	Z_ARRVAL_P		16397						
ANR	16521	Symbol	key		16397						
ANR	16522	Symbol	key_len		16397						
ANR	16523	Symbol	zend_symtable_update		16397						
ANR	16524	Function	add_get_assoc_stringl_ex	1510:0:38361:38805							
ANR	16525	FunctionDef	"add_get_assoc_stringl_ex (zval * arg , const char * key , uint key_len , const char * str , uint length , void * * dest , int duplicate)"		16524	0					
ANR	16526	CompoundStatement		1511:0:38509:38805	16524	0					
ANR	16527	IdentifierDeclStatement	zval * tmp ;	1512:1:38512:38521	16524	0	True				
ANR	16528	IdentifierDecl	* tmp		16524	0					
ANR	16529	IdentifierDeclType	zval *		16524	0					
ANR	16530	Identifier	tmp		16524	1					
ANR	16531	IfStatement	if ( UNEXPECTED ( length > INT_MAX ) )		16524	1					
ANR	16532	Condition	UNEXPECTED ( length > INT_MAX )	1514:5:38529:38556	16524	0	True				
ANR	16533	CallExpression	UNEXPECTED ( length > INT_MAX )		16524	0					
ANR	16534	Callee	UNEXPECTED		16524	0					
ANR	16535	Identifier	UNEXPECTED		16524	0					
ANR	16536	ArgumentList	length > INT_MAX		16524	1					
ANR	16537	Argument	length > INT_MAX		16524	0					
ANR	16538	RelationalExpression	length > INT_MAX		16524	0		>			
ANR	16539	Identifier	length		16524	0					
ANR	16540	Identifier	INT_MAX		16524	1					
ANR	16541	CompoundStatement		4:35:49:49	16524	1					
ANR	16542	ExpressionStatement	"zend_error_noreturn ( E_ERROR , ""String overflow, max size is %d"" , INT_MAX )"	1515:2:38563:38635	16524	0	True				
ANR	16543	CallExpression	"zend_error_noreturn ( E_ERROR , ""String overflow, max size is %d"" , INT_MAX )"		16524	0					
ANR	16544	Callee	zend_error_noreturn		16524	0					
ANR	16545	Identifier	zend_error_noreturn		16524	0					
ANR	16546	ArgumentList	E_ERROR		16524	1					
ANR	16547	Argument	E_ERROR		16524	0					
ANR	16548	Identifier	E_ERROR		16524	0					
ANR	16549	Argument	"""String overflow, max size is %d"""		16524	1					
ANR	16550	PrimaryExpression	"""String overflow, max size is %d"""		16524	0					
ANR	16551	Argument	INT_MAX		16524	2					
ANR	16552	Identifier	INT_MAX		16524	0					
ANR	16553	ExpressionStatement	MAKE_STD_ZVAL ( tmp )	1518:1:38642:38660	16524	2	True				
ANR	16554	CallExpression	MAKE_STD_ZVAL ( tmp )		16524	0					
ANR	16555	Callee	MAKE_STD_ZVAL		16524	0					
ANR	16556	Identifier	MAKE_STD_ZVAL		16524	0					
ANR	16557	ArgumentList	tmp		16524	1					
ANR	16558	Argument	tmp		16524	0					
ANR	16559	Identifier	tmp		16524	0					
ANR	16560	ExpressionStatement	"ZVAL_STRINGL ( tmp , str , length , duplicate )"	1519:1:38663:38704	16524	3	True				
ANR	16561	CallExpression	"ZVAL_STRINGL ( tmp , str , length , duplicate )"		16524	0					
ANR	16562	Callee	ZVAL_STRINGL		16524	0					
ANR	16563	Identifier	ZVAL_STRINGL		16524	0					
ANR	16564	ArgumentList	tmp		16524	1					
ANR	16565	Argument	tmp		16524	0					
ANR	16566	Identifier	tmp		16524	0					
ANR	16567	Argument	str		16524	1					
ANR	16568	Identifier	str		16524	0					
ANR	16569	Argument	length		16524	2					
ANR	16570	Identifier	length		16524	0					
ANR	16571	Argument	duplicate		16524	3					
ANR	16572	Identifier	duplicate		16524	0					
ANR	16573	ReturnStatement	"return zend_symtable_update ( Z_ARRVAL_P ( arg ) , key , key_len , ( void * ) & tmp , sizeof ( zval * ) , dest ) ;"	1521:1:38708:38803	16524	4	True				
ANR	16574	CallExpression	"zend_symtable_update ( Z_ARRVAL_P ( arg ) , key , key_len , ( void * ) & tmp , sizeof ( zval * ) , dest )"		16524	0					
ANR	16575	Callee	zend_symtable_update		16524	0					
ANR	16576	Identifier	zend_symtable_update		16524	0					
ANR	16577	ArgumentList	Z_ARRVAL_P ( arg )		16524	1					
ANR	16578	Argument	Z_ARRVAL_P ( arg )		16524	0					
ANR	16579	CallExpression	Z_ARRVAL_P ( arg )		16524	0					
ANR	16580	Callee	Z_ARRVAL_P		16524	0					
ANR	16581	Identifier	Z_ARRVAL_P		16524	0					
ANR	16582	ArgumentList	arg		16524	1					
ANR	16583	Argument	arg		16524	0					
ANR	16584	Identifier	arg		16524	0					
ANR	16585	Argument	key		16524	1					
ANR	16586	Identifier	key		16524	0					
ANR	16587	Argument	key_len		16524	2					
ANR	16588	Identifier	key_len		16524	0					
ANR	16589	Argument	( void * ) & tmp		16524	3					
ANR	16590	CastExpression	( void * ) & tmp		16524	0					
ANR	16591	CastTarget	void *		16524	0					
ANR	16592	UnaryOperationExpression	& tmp		16524	1					
ANR	16593	UnaryOperator	&		16524	0					
ANR	16594	Identifier	tmp		16524	1					
ANR	16595	Argument	sizeof ( zval * )		16524	4					
ANR	16596	SizeofExpression	sizeof ( zval * )		16524	0					
ANR	16597	Sizeof	sizeof		16524	0					
ANR	16598	SizeofOperand	zval *		16524	1					
ANR	16599	Argument	dest		16524	5					
ANR	16600	Identifier	dest		16524	0					
ANR	16601	ReturnType	ZEND_API int		16524	1					
ANR	16602	Identifier	add_get_assoc_stringl_ex		16524	2					
ANR	16603	ParameterList	"zval * arg , const char * key , uint key_len , const char * str , uint length , void * * dest , int duplicate"		16524	3					
ANR	16604	Parameter	zval * arg	1510:38:38399:38407	16524	0	True				
ANR	16605	ParameterType	zval *		16524	0					
ANR	16606	Identifier	arg		16524	1					
ANR	16607	Parameter	const char * key	1510:49:38410:38424	16524	1	True				
ANR	16608	ParameterType	const char *		16524	0					
ANR	16609	Identifier	key		16524	1					
ANR	16610	Parameter	uint key_len	1510:66:38427:38438	16524	2	True				
ANR	16611	ParameterType	uint		16524	0					
ANR	16612	Identifier	key_len		16524	1					
ANR	16613	Parameter	const char * str	1510:80:38441:38455	16524	3	True				
ANR	16614	ParameterType	const char *		16524	0					
ANR	16615	Identifier	str		16524	1					
ANR	16616	Parameter	uint length	1510:97:38458:38468	16524	4	True				
ANR	16617	ParameterType	uint		16524	0					
ANR	16618	Identifier	length		16524	1					
ANR	16619	Parameter	void * * dest	1510:110:38471:38481	16524	5	True				
ANR	16620	ParameterType	void * *		16524	0					
ANR	16621	Identifier	dest		16524	1					
ANR	16622	Parameter	int duplicate	1510:123:38484:38496	16524	6	True				
ANR	16623	ParameterType	int		16524	0					
ANR	16624	Identifier	duplicate		16524	1					
ANR	16625	CFGEntryNode	ENTRY		16524		True				
ANR	16626	CFGExitNode	EXIT		16524		True				
ANR	16627	Symbol	length		16524						
ANR	16628	Symbol	duplicate		16524						
ANR	16629	Symbol	dest		16524						
ANR	16630	Symbol	str		16524						
ANR	16631	Symbol	UNEXPECTED		16524						
ANR	16632	Symbol	E_ERROR		16524						
ANR	16633	Symbol	tmp		16524						
ANR	16634	Symbol	arg		16524						
ANR	16635	Symbol	INT_MAX		16524						
ANR	16636	Symbol	& tmp		16524						
ANR	16637	Symbol	Z_ARRVAL_P		16524						
ANR	16638	Symbol	key		16524						
ANR	16639	Symbol	key_len		16524						
ANR	16640	Symbol	zend_symtable_update		16524						
ANR	16641	Function	add_get_index_long	1525:0:38818:39055							
ANR	16642	FunctionDef	"add_get_index_long (zval * arg , ulong index , long l , void * * dest)"		16641	0					
ANR	16643	CompoundStatement		1526:0:38905:39055	16641	0					
ANR	16644	IdentifierDeclStatement	zval * tmp ;	1527:1:38908:38917	16641	0	True				
ANR	16645	IdentifierDecl	* tmp		16641	0					
ANR	16646	IdentifierDeclType	zval *		16641	0					
ANR	16647	Identifier	tmp		16641	1					
ANR	16648	ExpressionStatement	MAKE_STD_ZVAL ( tmp )	1529:1:38921:38939	16641	1	True				
ANR	16649	CallExpression	MAKE_STD_ZVAL ( tmp )		16641	0					
ANR	16650	Callee	MAKE_STD_ZVAL		16641	0					
ANR	16651	Identifier	MAKE_STD_ZVAL		16641	0					
ANR	16652	ArgumentList	tmp		16641	1					
ANR	16653	Argument	tmp		16641	0					
ANR	16654	Identifier	tmp		16641	0					
ANR	16655	ExpressionStatement	"ZVAL_LONG ( tmp , l )"	1530:1:38942:38959	16641	2	True				
ANR	16656	CallExpression	"ZVAL_LONG ( tmp , l )"		16641	0					
ANR	16657	Callee	ZVAL_LONG		16641	0					
ANR	16658	Identifier	ZVAL_LONG		16641	0					
ANR	16659	ArgumentList	tmp		16641	1					
ANR	16660	Argument	tmp		16641	0					
ANR	16661	Identifier	tmp		16641	0					
ANR	16662	Argument	l		16641	1					
ANR	16663	Identifier	l		16641	0					
ANR	16664	ReturnStatement	"return zend_hash_index_update ( Z_ARRVAL_P ( arg ) , index , ( void * ) & tmp , sizeof ( zval * ) , dest ) ;"	1532:1:38963:39053	16641	3	True				
ANR	16665	CallExpression	"zend_hash_index_update ( Z_ARRVAL_P ( arg ) , index , ( void * ) & tmp , sizeof ( zval * ) , dest )"		16641	0					
ANR	16666	Callee	zend_hash_index_update		16641	0					
ANR	16667	Identifier	zend_hash_index_update		16641	0					
ANR	16668	ArgumentList	Z_ARRVAL_P ( arg )		16641	1					
ANR	16669	Argument	Z_ARRVAL_P ( arg )		16641	0					
ANR	16670	CallExpression	Z_ARRVAL_P ( arg )		16641	0					
ANR	16671	Callee	Z_ARRVAL_P		16641	0					
ANR	16672	Identifier	Z_ARRVAL_P		16641	0					
ANR	16673	ArgumentList	arg		16641	1					
ANR	16674	Argument	arg		16641	0					
ANR	16675	Identifier	arg		16641	0					
ANR	16676	Argument	index		16641	1					
ANR	16677	Identifier	index		16641	0					
ANR	16678	Argument	( void * ) & tmp		16641	2					
ANR	16679	CastExpression	( void * ) & tmp		16641	0					
ANR	16680	CastTarget	void *		16641	0					
ANR	16681	UnaryOperationExpression	& tmp		16641	1					
ANR	16682	UnaryOperator	&		16641	0					
ANR	16683	Identifier	tmp		16641	1					
ANR	16684	Argument	sizeof ( zval * )		16641	3					
ANR	16685	SizeofExpression	sizeof ( zval * )		16641	0					
ANR	16686	Sizeof	sizeof		16641	0					
ANR	16687	SizeofOperand	zval *		16641	1					
ANR	16688	Argument	dest		16641	4					
ANR	16689	Identifier	dest		16641	0					
ANR	16690	ReturnType	ZEND_API int		16641	1					
ANR	16691	Identifier	add_get_index_long		16641	2					
ANR	16692	ParameterList	"zval * arg , ulong index , long l , void * * dest"		16641	3					
ANR	16693	Parameter	zval * arg	1525:32:38850:38858	16641	0	True				
ANR	16694	ParameterType	zval *		16641	0					
ANR	16695	Identifier	arg		16641	1					
ANR	16696	Parameter	ulong index	1525:43:38861:38871	16641	1	True				
ANR	16697	ParameterType	ulong		16641	0					
ANR	16698	Identifier	index		16641	1					
ANR	16699	Parameter	long l	1525:56:38874:38879	16641	2	True				
ANR	16700	ParameterType	long		16641	0					
ANR	16701	Identifier	l		16641	1					
ANR	16702	Parameter	void * * dest	1525:64:38882:38892	16641	3	True				
ANR	16703	ParameterType	void * *		16641	0					
ANR	16704	Identifier	dest		16641	1					
ANR	16705	CFGEntryNode	ENTRY		16641		True				
ANR	16706	CFGExitNode	EXIT		16641		True				
ANR	16707	Symbol	tmp		16641						
ANR	16708	Symbol	zend_hash_index_update		16641						
ANR	16709	Symbol	arg		16641						
ANR	16710	Symbol	index		16641						
ANR	16711	Symbol	& tmp		16641						
ANR	16712	Symbol	l		16641						
ANR	16713	Symbol	dest		16641						
ANR	16714	Symbol	Z_ARRVAL_P		16641						
ANR	16715	Function	add_get_index_double	1536:0:39068:39311							
ANR	16716	FunctionDef	"add_get_index_double (zval * arg , ulong index , double d , void * * dest)"		16715	0					
ANR	16717	CompoundStatement		1537:0:39159:39311	16715	0					
ANR	16718	IdentifierDeclStatement	zval * tmp ;	1538:1:39162:39171	16715	0	True				
ANR	16719	IdentifierDecl	* tmp		16715	0					
ANR	16720	IdentifierDeclType	zval *		16715	0					
ANR	16721	Identifier	tmp		16715	1					
ANR	16722	ExpressionStatement	MAKE_STD_ZVAL ( tmp )	1540:1:39175:39193	16715	1	True				
ANR	16723	CallExpression	MAKE_STD_ZVAL ( tmp )		16715	0					
ANR	16724	Callee	MAKE_STD_ZVAL		16715	0					
ANR	16725	Identifier	MAKE_STD_ZVAL		16715	0					
ANR	16726	ArgumentList	tmp		16715	1					
ANR	16727	Argument	tmp		16715	0					
ANR	16728	Identifier	tmp		16715	0					
ANR	16729	ExpressionStatement	"ZVAL_DOUBLE ( tmp , d )"	1541:1:39196:39215	16715	2	True				
ANR	16730	CallExpression	"ZVAL_DOUBLE ( tmp , d )"		16715	0					
ANR	16731	Callee	ZVAL_DOUBLE		16715	0					
ANR	16732	Identifier	ZVAL_DOUBLE		16715	0					
ANR	16733	ArgumentList	tmp		16715	1					
ANR	16734	Argument	tmp		16715	0					
ANR	16735	Identifier	tmp		16715	0					
ANR	16736	Argument	d		16715	1					
ANR	16737	Identifier	d		16715	0					
ANR	16738	ReturnStatement	"return zend_hash_index_update ( Z_ARRVAL_P ( arg ) , index , ( void * ) & tmp , sizeof ( zval * ) , dest ) ;"	1543:1:39219:39309	16715	3	True				
ANR	16739	CallExpression	"zend_hash_index_update ( Z_ARRVAL_P ( arg ) , index , ( void * ) & tmp , sizeof ( zval * ) , dest )"		16715	0					
ANR	16740	Callee	zend_hash_index_update		16715	0					
ANR	16741	Identifier	zend_hash_index_update		16715	0					
ANR	16742	ArgumentList	Z_ARRVAL_P ( arg )		16715	1					
ANR	16743	Argument	Z_ARRVAL_P ( arg )		16715	0					
ANR	16744	CallExpression	Z_ARRVAL_P ( arg )		16715	0					
ANR	16745	Callee	Z_ARRVAL_P		16715	0					
ANR	16746	Identifier	Z_ARRVAL_P		16715	0					
ANR	16747	ArgumentList	arg		16715	1					
ANR	16748	Argument	arg		16715	0					
ANR	16749	Identifier	arg		16715	0					
ANR	16750	Argument	index		16715	1					
ANR	16751	Identifier	index		16715	0					
ANR	16752	Argument	( void * ) & tmp		16715	2					
ANR	16753	CastExpression	( void * ) & tmp		16715	0					
ANR	16754	CastTarget	void *		16715	0					
ANR	16755	UnaryOperationExpression	& tmp		16715	1					
ANR	16756	UnaryOperator	&		16715	0					
ANR	16757	Identifier	tmp		16715	1					
ANR	16758	Argument	sizeof ( zval * )		16715	3					
ANR	16759	SizeofExpression	sizeof ( zval * )		16715	0					
ANR	16760	Sizeof	sizeof		16715	0					
ANR	16761	SizeofOperand	zval *		16715	1					
ANR	16762	Argument	dest		16715	4					
ANR	16763	Identifier	dest		16715	0					
ANR	16764	ReturnType	ZEND_API int		16715	1					
ANR	16765	Identifier	add_get_index_double		16715	2					
ANR	16766	ParameterList	"zval * arg , ulong index , double d , void * * dest"		16715	3					
ANR	16767	Parameter	zval * arg	1536:34:39102:39110	16715	0	True				
ANR	16768	ParameterType	zval *		16715	0					
ANR	16769	Identifier	arg		16715	1					
ANR	16770	Parameter	ulong index	1536:45:39113:39123	16715	1	True				
ANR	16771	ParameterType	ulong		16715	0					
ANR	16772	Identifier	index		16715	1					
ANR	16773	Parameter	double d	1536:58:39126:39133	16715	2	True				
ANR	16774	ParameterType	double		16715	0					
ANR	16775	Identifier	d		16715	1					
ANR	16776	Parameter	void * * dest	1536:68:39136:39146	16715	3	True				
ANR	16777	ParameterType	void * *		16715	0					
ANR	16778	Identifier	dest		16715	1					
ANR	16779	CFGEntryNode	ENTRY		16715		True				
ANR	16780	CFGExitNode	EXIT		16715		True				
ANR	16781	Symbol	d		16715						
ANR	16782	Symbol	tmp		16715						
ANR	16783	Symbol	zend_hash_index_update		16715						
ANR	16784	Symbol	arg		16715						
ANR	16785	Symbol	index		16715						
ANR	16786	Symbol	& tmp		16715						
ANR	16787	Symbol	dest		16715						
ANR	16788	Symbol	Z_ARRVAL_P		16715						
ANR	16789	Function	add_get_index_string	1547:0:39324:39602							
ANR	16790	FunctionDef	"add_get_index_string (zval * arg , ulong index , const char * str , void * * dest , int duplicate)"		16789	0					
ANR	16791	CompoundStatement		1548:0:39437:39602	16789	0					
ANR	16792	IdentifierDeclStatement	zval * tmp ;	1549:1:39440:39449	16789	0	True				
ANR	16793	IdentifierDecl	* tmp		16789	0					
ANR	16794	IdentifierDeclType	zval *		16789	0					
ANR	16795	Identifier	tmp		16789	1					
ANR	16796	ExpressionStatement	MAKE_STD_ZVAL ( tmp )	1551:1:39453:39471	16789	1	True				
ANR	16797	CallExpression	MAKE_STD_ZVAL ( tmp )		16789	0					
ANR	16798	Callee	MAKE_STD_ZVAL		16789	0					
ANR	16799	Identifier	MAKE_STD_ZVAL		16789	0					
ANR	16800	ArgumentList	tmp		16789	1					
ANR	16801	Argument	tmp		16789	0					
ANR	16802	Identifier	tmp		16789	0					
ANR	16803	ExpressionStatement	"ZVAL_STRING ( tmp , str , duplicate )"	1552:1:39474:39506	16789	2	True				
ANR	16804	CallExpression	"ZVAL_STRING ( tmp , str , duplicate )"		16789	0					
ANR	16805	Callee	ZVAL_STRING		16789	0					
ANR	16806	Identifier	ZVAL_STRING		16789	0					
ANR	16807	ArgumentList	tmp		16789	1					
ANR	16808	Argument	tmp		16789	0					
ANR	16809	Identifier	tmp		16789	0					
ANR	16810	Argument	str		16789	1					
ANR	16811	Identifier	str		16789	0					
ANR	16812	Argument	duplicate		16789	2					
ANR	16813	Identifier	duplicate		16789	0					
ANR	16814	ReturnStatement	"return zend_hash_index_update ( Z_ARRVAL_P ( arg ) , index , ( void * ) & tmp , sizeof ( zval * ) , dest ) ;"	1554:1:39510:39600	16789	3	True				
ANR	16815	CallExpression	"zend_hash_index_update ( Z_ARRVAL_P ( arg ) , index , ( void * ) & tmp , sizeof ( zval * ) , dest )"		16789	0					
ANR	16816	Callee	zend_hash_index_update		16789	0					
ANR	16817	Identifier	zend_hash_index_update		16789	0					
ANR	16818	ArgumentList	Z_ARRVAL_P ( arg )		16789	1					
ANR	16819	Argument	Z_ARRVAL_P ( arg )		16789	0					
ANR	16820	CallExpression	Z_ARRVAL_P ( arg )		16789	0					
ANR	16821	Callee	Z_ARRVAL_P		16789	0					
ANR	16822	Identifier	Z_ARRVAL_P		16789	0					
ANR	16823	ArgumentList	arg		16789	1					
ANR	16824	Argument	arg		16789	0					
ANR	16825	Identifier	arg		16789	0					
ANR	16826	Argument	index		16789	1					
ANR	16827	Identifier	index		16789	0					
ANR	16828	Argument	( void * ) & tmp		16789	2					
ANR	16829	CastExpression	( void * ) & tmp		16789	0					
ANR	16830	CastTarget	void *		16789	0					
ANR	16831	UnaryOperationExpression	& tmp		16789	1					
ANR	16832	UnaryOperator	&		16789	0					
ANR	16833	Identifier	tmp		16789	1					
ANR	16834	Argument	sizeof ( zval * )		16789	3					
ANR	16835	SizeofExpression	sizeof ( zval * )		16789	0					
ANR	16836	Sizeof	sizeof		16789	0					
ANR	16837	SizeofOperand	zval *		16789	1					
ANR	16838	Argument	dest		16789	4					
ANR	16839	Identifier	dest		16789	0					
ANR	16840	ReturnType	ZEND_API int		16789	1					
ANR	16841	Identifier	add_get_index_string		16789	2					
ANR	16842	ParameterList	"zval * arg , ulong index , const char * str , void * * dest , int duplicate"		16789	3					
ANR	16843	Parameter	zval * arg	1547:34:39358:39366	16789	0	True				
ANR	16844	ParameterType	zval *		16789	0					
ANR	16845	Identifier	arg		16789	1					
ANR	16846	Parameter	ulong index	1547:45:39369:39379	16789	1	True				
ANR	16847	ParameterType	ulong		16789	0					
ANR	16848	Identifier	index		16789	1					
ANR	16849	Parameter	const char * str	1547:58:39382:39396	16789	2	True				
ANR	16850	ParameterType	const char *		16789	0					
ANR	16851	Identifier	str		16789	1					
ANR	16852	Parameter	void * * dest	1547:75:39399:39409	16789	3	True				
ANR	16853	ParameterType	void * *		16789	0					
ANR	16854	Identifier	dest		16789	1					
ANR	16855	Parameter	int duplicate	1547:88:39412:39424	16789	4	True				
ANR	16856	ParameterType	int		16789	0					
ANR	16857	Identifier	duplicate		16789	1					
ANR	16858	CFGEntryNode	ENTRY		16789		True				
ANR	16859	CFGExitNode	EXIT		16789		True				
ANR	16860	Symbol	str		16789						
ANR	16861	Symbol	tmp		16789						
ANR	16862	Symbol	zend_hash_index_update		16789						
ANR	16863	Symbol	arg		16789						
ANR	16864	Symbol	index		16789						
ANR	16865	Symbol	& tmp		16789						
ANR	16866	Symbol	duplicate		16789						
ANR	16867	Symbol	dest		16789						
ANR	16868	Symbol	Z_ARRVAL_P		16789						
ANR	16869	Function	add_get_index_stringl	1558:0:39615:39916							
ANR	16870	FunctionDef	"add_get_index_stringl (zval * arg , ulong index , const char * str , uint length , void * * dest , int duplicate)"		16869	0					
ANR	16871	CompoundStatement		1559:0:39742:39916	16869	0					
ANR	16872	IdentifierDeclStatement	zval * tmp ;	1560:1:39745:39754	16869	0	True				
ANR	16873	IdentifierDecl	* tmp		16869	0					
ANR	16874	IdentifierDeclType	zval *		16869	0					
ANR	16875	Identifier	tmp		16869	1					
ANR	16876	ExpressionStatement	MAKE_STD_ZVAL ( tmp )	1562:1:39758:39776	16869	1	True				
ANR	16877	CallExpression	MAKE_STD_ZVAL ( tmp )		16869	0					
ANR	16878	Callee	MAKE_STD_ZVAL		16869	0					
ANR	16879	Identifier	MAKE_STD_ZVAL		16869	0					
ANR	16880	ArgumentList	tmp		16869	1					
ANR	16881	Argument	tmp		16869	0					
ANR	16882	Identifier	tmp		16869	0					
ANR	16883	ExpressionStatement	"ZVAL_STRINGL ( tmp , str , length , duplicate )"	1563:1:39779:39820	16869	2	True				
ANR	16884	CallExpression	"ZVAL_STRINGL ( tmp , str , length , duplicate )"		16869	0					
ANR	16885	Callee	ZVAL_STRINGL		16869	0					
ANR	16886	Identifier	ZVAL_STRINGL		16869	0					
ANR	16887	ArgumentList	tmp		16869	1					
ANR	16888	Argument	tmp		16869	0					
ANR	16889	Identifier	tmp		16869	0					
ANR	16890	Argument	str		16869	1					
ANR	16891	Identifier	str		16869	0					
ANR	16892	Argument	length		16869	2					
ANR	16893	Identifier	length		16869	0					
ANR	16894	Argument	duplicate		16869	3					
ANR	16895	Identifier	duplicate		16869	0					
ANR	16896	ReturnStatement	"return zend_hash_index_update ( Z_ARRVAL_P ( arg ) , index , ( void * ) & tmp , sizeof ( zval * ) , dest ) ;"	1565:1:39824:39914	16869	3	True				
ANR	16897	CallExpression	"zend_hash_index_update ( Z_ARRVAL_P ( arg ) , index , ( void * ) & tmp , sizeof ( zval * ) , dest )"		16869	0					
ANR	16898	Callee	zend_hash_index_update		16869	0					
ANR	16899	Identifier	zend_hash_index_update		16869	0					
ANR	16900	ArgumentList	Z_ARRVAL_P ( arg )		16869	1					
ANR	16901	Argument	Z_ARRVAL_P ( arg )		16869	0					
ANR	16902	CallExpression	Z_ARRVAL_P ( arg )		16869	0					
ANR	16903	Callee	Z_ARRVAL_P		16869	0					
ANR	16904	Identifier	Z_ARRVAL_P		16869	0					
ANR	16905	ArgumentList	arg		16869	1					
ANR	16906	Argument	arg		16869	0					
ANR	16907	Identifier	arg		16869	0					
ANR	16908	Argument	index		16869	1					
ANR	16909	Identifier	index		16869	0					
ANR	16910	Argument	( void * ) & tmp		16869	2					
ANR	16911	CastExpression	( void * ) & tmp		16869	0					
ANR	16912	CastTarget	void *		16869	0					
ANR	16913	UnaryOperationExpression	& tmp		16869	1					
ANR	16914	UnaryOperator	&		16869	0					
ANR	16915	Identifier	tmp		16869	1					
ANR	16916	Argument	sizeof ( zval * )		16869	3					
ANR	16917	SizeofExpression	sizeof ( zval * )		16869	0					
ANR	16918	Sizeof	sizeof		16869	0					
ANR	16919	SizeofOperand	zval *		16869	1					
ANR	16920	Argument	dest		16869	4					
ANR	16921	Identifier	dest		16869	0					
ANR	16922	ReturnType	ZEND_API int		16869	1					
ANR	16923	Identifier	add_get_index_stringl		16869	2					
ANR	16924	ParameterList	"zval * arg , ulong index , const char * str , uint length , void * * dest , int duplicate"		16869	3					
ANR	16925	Parameter	zval * arg	1558:35:39650:39658	16869	0	True				
ANR	16926	ParameterType	zval *		16869	0					
ANR	16927	Identifier	arg		16869	1					
ANR	16928	Parameter	ulong index	1558:46:39661:39671	16869	1	True				
ANR	16929	ParameterType	ulong		16869	0					
ANR	16930	Identifier	index		16869	1					
ANR	16931	Parameter	const char * str	1558:59:39674:39688	16869	2	True				
ANR	16932	ParameterType	const char *		16869	0					
ANR	16933	Identifier	str		16869	1					
ANR	16934	Parameter	uint length	1558:76:39691:39701	16869	3	True				
ANR	16935	ParameterType	uint		16869	0					
ANR	16936	Identifier	length		16869	1					
ANR	16937	Parameter	void * * dest	1558:89:39704:39714	16869	4	True				
ANR	16938	ParameterType	void * *		16869	0					
ANR	16939	Identifier	dest		16869	1					
ANR	16940	Parameter	int duplicate	1558:102:39717:39729	16869	5	True				
ANR	16941	ParameterType	int		16869	0					
ANR	16942	Identifier	duplicate		16869	1					
ANR	16943	CFGEntryNode	ENTRY		16869		True				
ANR	16944	CFGExitNode	EXIT		16869		True				
ANR	16945	Symbol	str		16869						
ANR	16946	Symbol	tmp		16869						
ANR	16947	Symbol	zend_hash_index_update		16869						
ANR	16948	Symbol	arg		16869						
ANR	16949	Symbol	length		16869						
ANR	16950	Symbol	index		16869						
ANR	16951	Symbol	& tmp		16869						
ANR	16952	Symbol	duplicate		16869						
ANR	16953	Symbol	dest		16869						
ANR	16954	Symbol	Z_ARRVAL_P		16869						
ANR	16955	Function	array_set_zval_key	1569:0:39929:40870							
ANR	16956	FunctionDef	"array_set_zval_key (HashTable * ht , zval * key , zval * value)"		16955	0					
ANR	16957	CompoundStatement		1570:0:40010:40870	16955	0					
ANR	16958	IdentifierDeclStatement	int result ;	1571:1:40013:40023	16955	0	True				
ANR	16959	IdentifierDecl	result		16955	0					
ANR	16960	IdentifierDeclType	int		16955	0					
ANR	16961	Identifier	result		16955	1					
ANR	16962	SwitchStatement	switch ( Z_TYPE_P ( key ) )		16955	1					
ANR	16963	Condition	Z_TYPE_P ( key )	1573:9:40035:40047	16955	0	True				
ANR	16964	CallExpression	Z_TYPE_P ( key )		16955	0					
ANR	16965	Callee	Z_TYPE_P		16955	0					
ANR	16966	Identifier	Z_TYPE_P		16955	0					
ANR	16967	ArgumentList	key		16955	1					
ANR	16968	Argument	key		16955	0					
ANR	16969	Identifier	key		16955	0					
ANR	16970	CompoundStatement		4:24:39:39	16955	1					
ANR	16971	Label	case IS_STRING :	1574:2:40054:40068	16955	0	True				
ANR	16972	Identifier	IS_STRING		16955	0					
ANR	16973	ExpressionStatement	"result = zend_symtable_update ( ht , Z_STRVAL_P ( key ) , Z_STRLEN_P ( key ) + 1 , & value , sizeof ( zval * ) , NULL )"	1575:3:40073:40174	16955	1	True				
ANR	16974	AssignmentExpression	"result = zend_symtable_update ( ht , Z_STRVAL_P ( key ) , Z_STRLEN_P ( key ) + 1 , & value , sizeof ( zval * ) , NULL )"		16955	0		=			
ANR	16975	Identifier	result		16955	0					
ANR	16976	CallExpression	"zend_symtable_update ( ht , Z_STRVAL_P ( key ) , Z_STRLEN_P ( key ) + 1 , & value , sizeof ( zval * ) , NULL )"		16955	1					
ANR	16977	Callee	zend_symtable_update		16955	0					
ANR	16978	Identifier	zend_symtable_update		16955	0					
ANR	16979	ArgumentList	ht		16955	1					
ANR	16980	Argument	ht		16955	0					
ANR	16981	Identifier	ht		16955	0					
ANR	16982	Argument	Z_STRVAL_P ( key )		16955	1					
ANR	16983	CallExpression	Z_STRVAL_P ( key )		16955	0					
ANR	16984	Callee	Z_STRVAL_P		16955	0					
ANR	16985	Identifier	Z_STRVAL_P		16955	0					
ANR	16986	ArgumentList	key		16955	1					
ANR	16987	Argument	key		16955	0					
ANR	16988	Identifier	key		16955	0					
ANR	16989	Argument	Z_STRLEN_P ( key ) + 1		16955	2					
ANR	16990	AdditiveExpression	Z_STRLEN_P ( key ) + 1		16955	0		+			
ANR	16991	CallExpression	Z_STRLEN_P ( key )		16955	0					
ANR	16992	Callee	Z_STRLEN_P		16955	0					
ANR	16993	Identifier	Z_STRLEN_P		16955	0					
ANR	16994	ArgumentList	key		16955	1					
ANR	16995	Argument	key		16955	0					
ANR	16996	Identifier	key		16955	0					
ANR	16997	PrimaryExpression	1		16955	1					
ANR	16998	Argument	& value		16955	3					
ANR	16999	UnaryOperationExpression	& value		16955	0					
ANR	17000	UnaryOperator	&		16955	0					
ANR	17001	Identifier	value		16955	1					
ANR	17002	Argument	sizeof ( zval * )		16955	4					
ANR	17003	SizeofExpression	sizeof ( zval * )		16955	0					
ANR	17004	Sizeof	sizeof		16955	0					
ANR	17005	SizeofOperand	zval *		16955	1					
ANR	17006	Argument	NULL		16955	5					
ANR	17007	Identifier	NULL		16955	0					
ANR	17008	BreakStatement	break ;	1576:3:40179:40184	16955	2	True				
ANR	17009	Label	case IS_NULL :	1577:2:40188:40200	16955	3	True				
ANR	17010	Identifier	IS_NULL		16955	0					
ANR	17011	ExpressionStatement	"result = zend_symtable_update ( ht , """" , 1 , & value , sizeof ( zval * ) , NULL )"	1578:3:40205:40275	16955	4	True				
ANR	17012	AssignmentExpression	"result = zend_symtable_update ( ht , """" , 1 , & value , sizeof ( zval * ) , NULL )"		16955	0		=			
ANR	17013	Identifier	result		16955	0					
ANR	17014	CallExpression	"zend_symtable_update ( ht , """" , 1 , & value , sizeof ( zval * ) , NULL )"		16955	1					
ANR	17015	Callee	zend_symtable_update		16955	0					
ANR	17016	Identifier	zend_symtable_update		16955	0					
ANR	17017	ArgumentList	ht		16955	1					
ANR	17018	Argument	ht		16955	0					
ANR	17019	Identifier	ht		16955	0					
ANR	17020	Argument	""""""		16955	1					
ANR	17021	PrimaryExpression	""""""		16955	0					
ANR	17022	Argument	1		16955	2					
ANR	17023	PrimaryExpression	1		16955	0					
ANR	17024	Argument	& value		16955	3					
ANR	17025	UnaryOperationExpression	& value		16955	0					
ANR	17026	UnaryOperator	&		16955	0					
ANR	17027	Identifier	value		16955	1					
ANR	17028	Argument	sizeof ( zval * )		16955	4					
ANR	17029	SizeofExpression	sizeof ( zval * )		16955	0					
ANR	17030	Sizeof	sizeof		16955	0					
ANR	17031	SizeofOperand	zval *		16955	1					
ANR	17032	Argument	NULL		16955	5					
ANR	17033	Identifier	NULL		16955	0					
ANR	17034	BreakStatement	break ;	1579:3:40280:40285	16955	5	True				
ANR	17035	Label	case IS_RESOURCE :	1580:2:40289:40305	16955	6	True				
ANR	17036	Identifier	IS_RESOURCE		16955	0					
ANR	17037	ExpressionStatement	"zend_error ( E_STRICT , ""Resource ID#%ld used as offset, casting to integer (%ld)"" , Z_LVAL_P ( key ) , Z_LVAL_P ( key ) )"	1581:3:40310:40420	16955	7	True				
ANR	17038	CallExpression	"zend_error ( E_STRICT , ""Resource ID#%ld used as offset, casting to integer (%ld)"" , Z_LVAL_P ( key ) , Z_LVAL_P ( key ) )"		16955	0					
ANR	17039	Callee	zend_error		16955	0					
ANR	17040	Identifier	zend_error		16955	0					
ANR	17041	ArgumentList	E_STRICT		16955	1					
ANR	17042	Argument	E_STRICT		16955	0					
ANR	17043	Identifier	E_STRICT		16955	0					
ANR	17044	Argument	"""Resource ID#%ld used as offset, casting to integer (%ld)"""		16955	1					
ANR	17045	PrimaryExpression	"""Resource ID#%ld used as offset, casting to integer (%ld)"""		16955	0					
ANR	17046	Argument	Z_LVAL_P ( key )		16955	2					
ANR	17047	CallExpression	Z_LVAL_P ( key )		16955	0					
ANR	17048	Callee	Z_LVAL_P		16955	0					
ANR	17049	Identifier	Z_LVAL_P		16955	0					
ANR	17050	ArgumentList	key		16955	1					
ANR	17051	Argument	key		16955	0					
ANR	17052	Identifier	key		16955	0					
ANR	17053	Argument	Z_LVAL_P ( key )		16955	3					
ANR	17054	CallExpression	Z_LVAL_P ( key )		16955	0					
ANR	17055	Callee	Z_LVAL_P		16955	0					
ANR	17056	Identifier	Z_LVAL_P		16955	0					
ANR	17057	ArgumentList	key		16955	1					
ANR	17058	Argument	key		16955	0					
ANR	17059	Identifier	key		16955	0					
ANR	17060	Label	case IS_BOOL :	1583:2:40461:40473	16955	8	True				
ANR	17061	Identifier	IS_BOOL		16955	0					
ANR	17062	Label	case IS_LONG :	1584:2:40477:40489	16955	9	True				
ANR	17063	Identifier	IS_LONG		16955	0					
ANR	17064	ExpressionStatement	"result = zend_hash_index_update ( ht , Z_LVAL_P ( key ) , & value , sizeof ( zval * ) , NULL )"	1585:3:40494:40574	16955	10	True				
ANR	17065	AssignmentExpression	"result = zend_hash_index_update ( ht , Z_LVAL_P ( key ) , & value , sizeof ( zval * ) , NULL )"		16955	0		=			
ANR	17066	Identifier	result		16955	0					
ANR	17067	CallExpression	"zend_hash_index_update ( ht , Z_LVAL_P ( key ) , & value , sizeof ( zval * ) , NULL )"		16955	1					
ANR	17068	Callee	zend_hash_index_update		16955	0					
ANR	17069	Identifier	zend_hash_index_update		16955	0					
ANR	17070	ArgumentList	ht		16955	1					
ANR	17071	Argument	ht		16955	0					
ANR	17072	Identifier	ht		16955	0					
ANR	17073	Argument	Z_LVAL_P ( key )		16955	1					
ANR	17074	CallExpression	Z_LVAL_P ( key )		16955	0					
ANR	17075	Callee	Z_LVAL_P		16955	0					
ANR	17076	Identifier	Z_LVAL_P		16955	0					
ANR	17077	ArgumentList	key		16955	1					
ANR	17078	Argument	key		16955	0					
ANR	17079	Identifier	key		16955	0					
ANR	17080	Argument	& value		16955	2					
ANR	17081	UnaryOperationExpression	& value		16955	0					
ANR	17082	UnaryOperator	&		16955	0					
ANR	17083	Identifier	value		16955	1					
ANR	17084	Argument	sizeof ( zval * )		16955	3					
ANR	17085	SizeofExpression	sizeof ( zval * )		16955	0					
ANR	17086	Sizeof	sizeof		16955	0					
ANR	17087	SizeofOperand	zval *		16955	1					
ANR	17088	Argument	NULL		16955	4					
ANR	17089	Identifier	NULL		16955	0					
ANR	17090	BreakStatement	break ;	1586:3:40579:40584	16955	11	True				
ANR	17091	Label	case IS_DOUBLE :	1587:2:40588:40602	16955	12	True				
ANR	17092	Identifier	IS_DOUBLE		16955	0					
ANR	17093	ExpressionStatement	"result = zend_hash_index_update ( ht , zend_dval_to_lval ( Z_DVAL_P ( key ) ) , & value , sizeof ( zval * ) , NULL )"	1588:3:40607:40706	16955	13	True				
ANR	17094	AssignmentExpression	"result = zend_hash_index_update ( ht , zend_dval_to_lval ( Z_DVAL_P ( key ) ) , & value , sizeof ( zval * ) , NULL )"		16955	0		=			
ANR	17095	Identifier	result		16955	0					
ANR	17096	CallExpression	"zend_hash_index_update ( ht , zend_dval_to_lval ( Z_DVAL_P ( key ) ) , & value , sizeof ( zval * ) , NULL )"		16955	1					
ANR	17097	Callee	zend_hash_index_update		16955	0					
ANR	17098	Identifier	zend_hash_index_update		16955	0					
ANR	17099	ArgumentList	ht		16955	1					
ANR	17100	Argument	ht		16955	0					
ANR	17101	Identifier	ht		16955	0					
ANR	17102	Argument	zend_dval_to_lval ( Z_DVAL_P ( key ) )		16955	1					
ANR	17103	CallExpression	zend_dval_to_lval ( Z_DVAL_P ( key ) )		16955	0					
ANR	17104	Callee	zend_dval_to_lval		16955	0					
ANR	17105	Identifier	zend_dval_to_lval		16955	0					
ANR	17106	ArgumentList	Z_DVAL_P ( key )		16955	1					
ANR	17107	Argument	Z_DVAL_P ( key )		16955	0					
ANR	17108	CallExpression	Z_DVAL_P ( key )		16955	0					
ANR	17109	Callee	Z_DVAL_P		16955	0					
ANR	17110	Identifier	Z_DVAL_P		16955	0					
ANR	17111	ArgumentList	key		16955	1					
ANR	17112	Argument	key		16955	0					
ANR	17113	Identifier	key		16955	0					
ANR	17114	Argument	& value		16955	2					
ANR	17115	UnaryOperationExpression	& value		16955	0					
ANR	17116	UnaryOperator	&		16955	0					
ANR	17117	Identifier	value		16955	1					
ANR	17118	Argument	sizeof ( zval * )		16955	3					
ANR	17119	SizeofExpression	sizeof ( zval * )		16955	0					
ANR	17120	Sizeof	sizeof		16955	0					
ANR	17121	SizeofOperand	zval *		16955	1					
ANR	17122	Argument	NULL		16955	4					
ANR	17123	Identifier	NULL		16955	0					
ANR	17124	BreakStatement	break ;	1589:3:40711:40716	16955	14	True				
ANR	17125	Label	default :	1590:2:40720:40727	16955	15	True				
ANR	17126	Identifier	default		16955	0					
ANR	17127	ExpressionStatement	"zend_error ( E_WARNING , ""Illegal offset type"" )"	1591:3:40732:40776	16955	16	True				
ANR	17128	CallExpression	"zend_error ( E_WARNING , ""Illegal offset type"" )"		16955	0					
ANR	17129	Callee	zend_error		16955	0					
ANR	17130	Identifier	zend_error		16955	0					
ANR	17131	ArgumentList	E_WARNING		16955	1					
ANR	17132	Argument	E_WARNING		16955	0					
ANR	17133	Identifier	E_WARNING		16955	0					
ANR	17134	Argument	"""Illegal offset type"""		16955	1					
ANR	17135	PrimaryExpression	"""Illegal offset type"""		16955	0					
ANR	17136	ExpressionStatement	result = FAILURE	1592:3:40781:40797	16955	17	True				
ANR	17137	AssignmentExpression	result = FAILURE		16955	0		=			
ANR	17138	Identifier	result		16955	0					
ANR	17139	Identifier	FAILURE		16955	1					
ANR	17140	IfStatement	if ( result == SUCCESS )		16955	2					
ANR	17141	Condition	result == SUCCESS	1595:5:40808:40824	16955	0	True				
ANR	17142	EqualityExpression	result == SUCCESS		16955	0		==			
ANR	17143	Identifier	result		16955	0					
ANR	17144	Identifier	SUCCESS		16955	1					
ANR	17145	CompoundStatement		26:24:816:816	16955	1					
ANR	17146	ExpressionStatement	Z_ADDREF_P ( value )	1596:2:40831:40848	16955	0	True				
ANR	17147	CallExpression	Z_ADDREF_P ( value )		16955	0					
ANR	17148	Callee	Z_ADDREF_P		16955	0					
ANR	17149	Identifier	Z_ADDREF_P		16955	0					
ANR	17150	ArgumentList	value		16955	1					
ANR	17151	Argument	value		16955	0					
ANR	17152	Identifier	value		16955	0					
ANR	17153	ReturnStatement	return result ;	1599:1:40855:40868	16955	3	True				
ANR	17154	Identifier	result		16955	0					
ANR	17155	ReturnType	ZEND_API int		16955	1					
ANR	17156	Identifier	array_set_zval_key		16955	2					
ANR	17157	ParameterList	"HashTable * ht , zval * key , zval * value"		16955	3					
ANR	17158	Parameter	HashTable * ht	1569:32:39961:39973	16955	0	True				
ANR	17159	ParameterType	HashTable *		16955	0					
ANR	17160	Identifier	ht		16955	1					
ANR	17161	Parameter	zval * key	1569:47:39976:39984	16955	1	True				
ANR	17162	ParameterType	zval *		16955	0					
ANR	17163	Identifier	key		16955	1					
ANR	17164	Parameter	zval * value	1569:58:39987:39997	16955	2	True				
ANR	17165	ParameterType	zval *		16955	0					
ANR	17166	Identifier	value		16955	1					
ANR	17167	CFGEntryNode	ENTRY		16955		True				
ANR	17168	CFGExitNode	EXIT		16955		True				
ANR	17169	Symbol	& value		16955						
ANR	17170	Symbol	NULL		16955						
ANR	17171	Symbol	SUCCESS		16955						
ANR	17172	Symbol	zend_hash_index_update		16955						
ANR	17173	Symbol	E_STRICT		16955						
ANR	17174	Symbol	ht		16955						
ANR	17175	Symbol	Z_TYPE_P		16955						
ANR	17176	Symbol	Z_STRVAL_P		16955						
ANR	17177	Symbol	FAILURE		16955						
ANR	17178	Symbol	Z_DVAL_P		16955						
ANR	17179	Symbol	Z_LVAL_P		16955						
ANR	17180	Symbol	result		16955						
ANR	17181	Symbol	zend_dval_to_lval		16955						
ANR	17182	Symbol	E_WARNING		16955						
ANR	17183	Symbol	Z_STRLEN_P		16955						
ANR	17184	Symbol	value		16955						
ANR	17185	Symbol	key		16955						
ANR	17186	Symbol	zend_symtable_update		16955						
ANR	17187	Function	add_property_long_ex	1603:0:40883:41299							
ANR	17188	FunctionDef	"add_property_long_ex (zval * arg , const char * key , uint key_len , long n TSRMLS_DC)"		17187	0					
ANR	17189	CompoundStatement		1604:0:40987:41299	17187	0					
ANR	17190	IdentifierDeclStatement	zval * tmp ;	1605:1:40990:40999	17187	0	True				
ANR	17191	IdentifierDecl	* tmp		17187	0					
ANR	17192	IdentifierDeclType	zval *		17187	0					
ANR	17193	Identifier	tmp		17187	1					
ANR	17194	IdentifierDeclStatement	zval * z_key ;	1606:1:41002:41013	17187	1	True				
ANR	17195	IdentifierDecl	* z_key		17187	0					
ANR	17196	IdentifierDeclType	zval *		17187	0					
ANR	17197	Identifier	z_key		17187	1					
ANR	17198	ExpressionStatement	MAKE_STD_ZVAL ( tmp )	1608:1:41017:41035	17187	2	True				
ANR	17199	CallExpression	MAKE_STD_ZVAL ( tmp )		17187	0					
ANR	17200	Callee	MAKE_STD_ZVAL		17187	0					
ANR	17201	Identifier	MAKE_STD_ZVAL		17187	0					
ANR	17202	ArgumentList	tmp		17187	1					
ANR	17203	Argument	tmp		17187	0					
ANR	17204	Identifier	tmp		17187	0					
ANR	17205	ExpressionStatement	"ZVAL_LONG ( tmp , n )"	1609:1:41038:41055	17187	3	True				
ANR	17206	CallExpression	"ZVAL_LONG ( tmp , n )"		17187	0					
ANR	17207	Callee	ZVAL_LONG		17187	0					
ANR	17208	Identifier	ZVAL_LONG		17187	0					
ANR	17209	ArgumentList	tmp		17187	1					
ANR	17210	Argument	tmp		17187	0					
ANR	17211	Identifier	tmp		17187	0					
ANR	17212	Argument	n		17187	1					
ANR	17213	Identifier	n		17187	0					
ANR	17214	ExpressionStatement	MAKE_STD_ZVAL ( z_key )	1611:1:41059:41079	17187	4	True				
ANR	17215	CallExpression	MAKE_STD_ZVAL ( z_key )		17187	0					
ANR	17216	Callee	MAKE_STD_ZVAL		17187	0					
ANR	17217	Identifier	MAKE_STD_ZVAL		17187	0					
ANR	17218	ArgumentList	z_key		17187	1					
ANR	17219	Argument	z_key		17187	0					
ANR	17220	Identifier	z_key		17187	0					
ANR	17221	ExpressionStatement	"ZVAL_STRINGL ( z_key , key , key_len - 1 , 1 )"	1612:1:41082:41120	17187	5	True				
ANR	17222	CallExpression	"ZVAL_STRINGL ( z_key , key , key_len - 1 , 1 )"		17187	0					
ANR	17223	Callee	ZVAL_STRINGL		17187	0					
ANR	17224	Identifier	ZVAL_STRINGL		17187	0					
ANR	17225	ArgumentList	z_key		17187	1					
ANR	17226	Argument	z_key		17187	0					
ANR	17227	Identifier	z_key		17187	0					
ANR	17228	Argument	key		17187	1					
ANR	17229	Identifier	key		17187	0					
ANR	17230	Argument	key_len - 1		17187	2					
ANR	17231	AdditiveExpression	key_len - 1		17187	0		-			
ANR	17232	Identifier	key_len		17187	0					
ANR	17233	PrimaryExpression	1		17187	1					
ANR	17234	Argument	1		17187	3					
ANR	17235	PrimaryExpression	1		17187	0					
ANR	17236	Statement	Z_OBJ_HANDLER_P	1614:1:41124:41138	17187	6	True				
ANR	17237	Statement	(	1614:16:41139:41139	17187	7	True				
ANR	17238	Statement	arg	1614:17:41140:41142	17187	8	True				
ANR	17239	Statement	","	1614:20:41143:41143	17187	9	True				
ANR	17240	Statement	write_property	1614:22:41145:41158	17187	10	True				
ANR	17241	Statement	)	1614:36:41159:41159	17187	11	True				
ANR	17242	Statement	(	1614:37:41160:41160	17187	12	True				
ANR	17243	Statement	arg	1614:38:41161:41163	17187	13	True				
ANR	17244	Statement	","	1614:41:41164:41164	17187	14	True				
ANR	17245	Statement	z_key	1614:43:41166:41170	17187	15	True				
ANR	17246	Statement	","	1614:48:41171:41171	17187	16	True				
ANR	17247	Statement	tmp	1614:50:41173:41175	17187	17	True				
ANR	17248	Statement	","	1614:53:41176:41176	17187	18	True				
ANR	17249	Statement	0	1614:55:41178:41178	17187	19	True				
ANR	17250	Statement	TSRMLS_CC	1614:57:41180:41188	17187	20	True				
ANR	17251	Statement	)	1614:66:41189:41189	17187	21	True				
ANR	17252	ExpressionStatement		1614:67:41190:41190	17187	22	True				
ANR	17253	ExpressionStatement	zval_ptr_dtor ( & tmp )	1615:1:41193:41212	17187	23	True				
ANR	17254	CallExpression	zval_ptr_dtor ( & tmp )		17187	0					
ANR	17255	Callee	zval_ptr_dtor		17187	0					
ANR	17256	Identifier	zval_ptr_dtor		17187	0					
ANR	17257	ArgumentList	& tmp		17187	1					
ANR	17258	Argument	& tmp		17187	0					
ANR	17259	UnaryOperationExpression	& tmp		17187	0					
ANR	17260	UnaryOperator	&		17187	0					
ANR	17261	Identifier	tmp		17187	1					
ANR	17262	ExpressionStatement	zval_ptr_dtor ( & z_key )	1616:1:41259:41280	17187	24	True				
ANR	17263	CallExpression	zval_ptr_dtor ( & z_key )		17187	0					
ANR	17264	Callee	zval_ptr_dtor		17187	0					
ANR	17265	Identifier	zval_ptr_dtor		17187	0					
ANR	17266	ArgumentList	& z_key		17187	1					
ANR	17267	Argument	& z_key		17187	0					
ANR	17268	UnaryOperationExpression	& z_key		17187	0					
ANR	17269	UnaryOperator	&		17187	0					
ANR	17270	Identifier	z_key		17187	1					
ANR	17271	ReturnStatement	return SUCCESS ;	1617:1:41283:41297	17187	25	True				
ANR	17272	Identifier	SUCCESS		17187	0					
ANR	17273	ReturnType	ZEND_API int		17187	1					
ANR	17274	Identifier	add_property_long_ex		17187	2					
ANR	17275	ParameterList	"zval * arg , const char * key , uint key_len , long n TSRMLS_DC"		17187	3					
ANR	17276	Parameter	zval * arg	1603:34:40917:40925	17187	0	True				
ANR	17277	ParameterType	zval *		17187	0					
ANR	17278	Identifier	arg		17187	1					
ANR	17279	Parameter	const char * key	1603:45:40928:40942	17187	1	True				
ANR	17280	ParameterType	const char *		17187	0					
ANR	17281	Identifier	key		17187	1					
ANR	17282	Parameter	uint key_len	1603:62:40945:40956	17187	2	True				
ANR	17283	ParameterType	uint		17187	0					
ANR	17284	Identifier	key_len		17187	1					
ANR	17285	Parameter	long n TSRMLS_DC	1603:76:40959:40974	17187	3	True				
ANR	17286	ParameterType	long n		17187	0					
ANR	17287	Identifier	TSRMLS_DC		17187	1					
ANR	17288	CFGEntryNode	ENTRY		17187		True				
ANR	17289	CFGExitNode	EXIT		17187		True				
ANR	17290	Symbol	SUCCESS		17187						
ANR	17291	Symbol	tmp		17187						
ANR	17292	Symbol	arg		17187						
ANR	17293	Symbol	& tmp		17187						
ANR	17294	Symbol	& z_key		17187						
ANR	17295	Symbol	TSRMLS_DC		17187						
ANR	17296	Symbol	key		17187						
ANR	17297	Symbol	z_key		17187						
ANR	17298	Symbol	n		17187						
ANR	17299	Symbol	key_len		17187						
ANR	17300	Function	add_property_bool_ex	1621:0:41312:41727							
ANR	17301	FunctionDef	"add_property_bool_ex (zval * arg , const char * key , uint key_len , int b TSRMLS_DC)"		17300	0					
ANR	17302	CompoundStatement		1622:0:41415:41727	17300	0					
ANR	17303	IdentifierDeclStatement	zval * tmp ;	1623:1:41418:41427	17300	0	True				
ANR	17304	IdentifierDecl	* tmp		17300	0					
ANR	17305	IdentifierDeclType	zval *		17300	0					
ANR	17306	Identifier	tmp		17300	1					
ANR	17307	IdentifierDeclStatement	zval * z_key ;	1624:1:41430:41441	17300	1	True				
ANR	17308	IdentifierDecl	* z_key		17300	0					
ANR	17309	IdentifierDeclType	zval *		17300	0					
ANR	17310	Identifier	z_key		17300	1					
ANR	17311	ExpressionStatement	MAKE_STD_ZVAL ( tmp )	1626:1:41445:41463	17300	2	True				
ANR	17312	CallExpression	MAKE_STD_ZVAL ( tmp )		17300	0					
ANR	17313	Callee	MAKE_STD_ZVAL		17300	0					
ANR	17314	Identifier	MAKE_STD_ZVAL		17300	0					
ANR	17315	ArgumentList	tmp		17300	1					
ANR	17316	Argument	tmp		17300	0					
ANR	17317	Identifier	tmp		17300	0					
ANR	17318	ExpressionStatement	"ZVAL_BOOL ( tmp , b )"	1627:1:41466:41483	17300	3	True				
ANR	17319	CallExpression	"ZVAL_BOOL ( tmp , b )"		17300	0					
ANR	17320	Callee	ZVAL_BOOL		17300	0					
ANR	17321	Identifier	ZVAL_BOOL		17300	0					
ANR	17322	ArgumentList	tmp		17300	1					
ANR	17323	Argument	tmp		17300	0					
ANR	17324	Identifier	tmp		17300	0					
ANR	17325	Argument	b		17300	1					
ANR	17326	Identifier	b		17300	0					
ANR	17327	ExpressionStatement	MAKE_STD_ZVAL ( z_key )	1629:1:41487:41507	17300	4	True				
ANR	17328	CallExpression	MAKE_STD_ZVAL ( z_key )		17300	0					
ANR	17329	Callee	MAKE_STD_ZVAL		17300	0					
ANR	17330	Identifier	MAKE_STD_ZVAL		17300	0					
ANR	17331	ArgumentList	z_key		17300	1					
ANR	17332	Argument	z_key		17300	0					
ANR	17333	Identifier	z_key		17300	0					
ANR	17334	ExpressionStatement	"ZVAL_STRINGL ( z_key , key , key_len - 1 , 1 )"	1630:1:41510:41548	17300	5	True				
ANR	17335	CallExpression	"ZVAL_STRINGL ( z_key , key , key_len - 1 , 1 )"		17300	0					
ANR	17336	Callee	ZVAL_STRINGL		17300	0					
ANR	17337	Identifier	ZVAL_STRINGL		17300	0					
ANR	17338	ArgumentList	z_key		17300	1					
ANR	17339	Argument	z_key		17300	0					
ANR	17340	Identifier	z_key		17300	0					
ANR	17341	Argument	key		17300	1					
ANR	17342	Identifier	key		17300	0					
ANR	17343	Argument	key_len - 1		17300	2					
ANR	17344	AdditiveExpression	key_len - 1		17300	0		-			
ANR	17345	Identifier	key_len		17300	0					
ANR	17346	PrimaryExpression	1		17300	1					
ANR	17347	Argument	1		17300	3					
ANR	17348	PrimaryExpression	1		17300	0					
ANR	17349	Statement	Z_OBJ_HANDLER_P	1632:1:41552:41566	17300	6	True				
ANR	17350	Statement	(	1632:16:41567:41567	17300	7	True				
ANR	17351	Statement	arg	1632:17:41568:41570	17300	8	True				
ANR	17352	Statement	","	1632:20:41571:41571	17300	9	True				
ANR	17353	Statement	write_property	1632:22:41573:41586	17300	10	True				
ANR	17354	Statement	)	1632:36:41587:41587	17300	11	True				
ANR	17355	Statement	(	1632:37:41588:41588	17300	12	True				
ANR	17356	Statement	arg	1632:38:41589:41591	17300	13	True				
ANR	17357	Statement	","	1632:41:41592:41592	17300	14	True				
ANR	17358	Statement	z_key	1632:43:41594:41598	17300	15	True				
ANR	17359	Statement	","	1632:48:41599:41599	17300	16	True				
ANR	17360	Statement	tmp	1632:50:41601:41603	17300	17	True				
ANR	17361	Statement	","	1632:53:41604:41604	17300	18	True				
ANR	17362	Statement	0	1632:55:41606:41606	17300	19	True				
ANR	17363	Statement	TSRMLS_CC	1632:57:41608:41616	17300	20	True				
ANR	17364	Statement	)	1632:66:41617:41617	17300	21	True				
ANR	17365	ExpressionStatement		1632:67:41618:41618	17300	22	True				
ANR	17366	ExpressionStatement	zval_ptr_dtor ( & tmp )	1633:1:41621:41640	17300	23	True				
ANR	17367	CallExpression	zval_ptr_dtor ( & tmp )		17300	0					
ANR	17368	Callee	zval_ptr_dtor		17300	0					
ANR	17369	Identifier	zval_ptr_dtor		17300	0					
ANR	17370	ArgumentList	& tmp		17300	1					
ANR	17371	Argument	& tmp		17300	0					
ANR	17372	UnaryOperationExpression	& tmp		17300	0					
ANR	17373	UnaryOperator	&		17300	0					
ANR	17374	Identifier	tmp		17300	1					
ANR	17375	ExpressionStatement	zval_ptr_dtor ( & z_key )	1634:1:41687:41708	17300	24	True				
ANR	17376	CallExpression	zval_ptr_dtor ( & z_key )		17300	0					
ANR	17377	Callee	zval_ptr_dtor		17300	0					
ANR	17378	Identifier	zval_ptr_dtor		17300	0					
ANR	17379	ArgumentList	& z_key		17300	1					
ANR	17380	Argument	& z_key		17300	0					
ANR	17381	UnaryOperationExpression	& z_key		17300	0					
ANR	17382	UnaryOperator	&		17300	0					
ANR	17383	Identifier	z_key		17300	1					
ANR	17384	ReturnStatement	return SUCCESS ;	1635:1:41711:41725	17300	25	True				
ANR	17385	Identifier	SUCCESS		17300	0					
ANR	17386	ReturnType	ZEND_API int		17300	1					
ANR	17387	Identifier	add_property_bool_ex		17300	2					
ANR	17388	ParameterList	"zval * arg , const char * key , uint key_len , int b TSRMLS_DC"		17300	3					
ANR	17389	Parameter	zval * arg	1621:34:41346:41354	17300	0	True				
ANR	17390	ParameterType	zval *		17300	0					
ANR	17391	Identifier	arg		17300	1					
ANR	17392	Parameter	const char * key	1621:45:41357:41371	17300	1	True				
ANR	17393	ParameterType	const char *		17300	0					
ANR	17394	Identifier	key		17300	1					
ANR	17395	Parameter	uint key_len	1621:62:41374:41385	17300	2	True				
ANR	17396	ParameterType	uint		17300	0					
ANR	17397	Identifier	key_len		17300	1					
ANR	17398	Parameter	int b TSRMLS_DC	1621:76:41388:41402	17300	3	True				
ANR	17399	ParameterType	int b		17300	0					
ANR	17400	Identifier	TSRMLS_DC		17300	1					
ANR	17401	CFGEntryNode	ENTRY		17300		True				
ANR	17402	CFGExitNode	EXIT		17300		True				
ANR	17403	Symbol	b		17300						
ANR	17404	Symbol	SUCCESS		17300						
ANR	17405	Symbol	tmp		17300						
ANR	17406	Symbol	arg		17300						
ANR	17407	Symbol	& tmp		17300						
ANR	17408	Symbol	& z_key		17300						
ANR	17409	Symbol	TSRMLS_DC		17300						
ANR	17410	Symbol	key		17300						
ANR	17411	Symbol	z_key		17300						
ANR	17412	Symbol	key_len		17300						
ANR	17413	Function	add_property_null_ex	1639:0:41740:42145							
ANR	17414	FunctionDef	"add_property_null_ex (zval * arg , const char * key , uint key_len TSRMLS_DC)"		17413	0					
ANR	17415	CompoundStatement		1640:0:41836:42145	17413	0					
ANR	17416	IdentifierDeclStatement	zval * tmp ;	1641:1:41839:41848	17413	0	True				
ANR	17417	IdentifierDecl	* tmp		17413	0					
ANR	17418	IdentifierDeclType	zval *		17413	0					
ANR	17419	Identifier	tmp		17413	1					
ANR	17420	IdentifierDeclStatement	zval * z_key ;	1642:1:41851:41862	17413	1	True				
ANR	17421	IdentifierDecl	* z_key		17413	0					
ANR	17422	IdentifierDeclType	zval *		17413	0					
ANR	17423	Identifier	z_key		17413	1					
ANR	17424	ExpressionStatement	MAKE_STD_ZVAL ( tmp )	1644:1:41866:41884	17413	2	True				
ANR	17425	CallExpression	MAKE_STD_ZVAL ( tmp )		17413	0					
ANR	17426	Callee	MAKE_STD_ZVAL		17413	0					
ANR	17427	Identifier	MAKE_STD_ZVAL		17413	0					
ANR	17428	ArgumentList	tmp		17413	1					
ANR	17429	Argument	tmp		17413	0					
ANR	17430	Identifier	tmp		17413	0					
ANR	17431	ExpressionStatement	ZVAL_NULL ( tmp )	1645:1:41887:41901	17413	3	True				
ANR	17432	CallExpression	ZVAL_NULL ( tmp )		17413	0					
ANR	17433	Callee	ZVAL_NULL		17413	0					
ANR	17434	Identifier	ZVAL_NULL		17413	0					
ANR	17435	ArgumentList	tmp		17413	1					
ANR	17436	Argument	tmp		17413	0					
ANR	17437	Identifier	tmp		17413	0					
ANR	17438	ExpressionStatement	MAKE_STD_ZVAL ( z_key )	1647:1:41905:41925	17413	4	True				
ANR	17439	CallExpression	MAKE_STD_ZVAL ( z_key )		17413	0					
ANR	17440	Callee	MAKE_STD_ZVAL		17413	0					
ANR	17441	Identifier	MAKE_STD_ZVAL		17413	0					
ANR	17442	ArgumentList	z_key		17413	1					
ANR	17443	Argument	z_key		17413	0					
ANR	17444	Identifier	z_key		17413	0					
ANR	17445	ExpressionStatement	"ZVAL_STRINGL ( z_key , key , key_len - 1 , 1 )"	1648:1:41928:41966	17413	5	True				
ANR	17446	CallExpression	"ZVAL_STRINGL ( z_key , key , key_len - 1 , 1 )"		17413	0					
ANR	17447	Callee	ZVAL_STRINGL		17413	0					
ANR	17448	Identifier	ZVAL_STRINGL		17413	0					
ANR	17449	ArgumentList	z_key		17413	1					
ANR	17450	Argument	z_key		17413	0					
ANR	17451	Identifier	z_key		17413	0					
ANR	17452	Argument	key		17413	1					
ANR	17453	Identifier	key		17413	0					
ANR	17454	Argument	key_len - 1		17413	2					
ANR	17455	AdditiveExpression	key_len - 1		17413	0		-			
ANR	17456	Identifier	key_len		17413	0					
ANR	17457	PrimaryExpression	1		17413	1					
ANR	17458	Argument	1		17413	3					
ANR	17459	PrimaryExpression	1		17413	0					
ANR	17460	Statement	Z_OBJ_HANDLER_P	1650:1:41970:41984	17413	6	True				
ANR	17461	Statement	(	1650:16:41985:41985	17413	7	True				
ANR	17462	Statement	arg	1650:17:41986:41988	17413	8	True				
ANR	17463	Statement	","	1650:20:41989:41989	17413	9	True				
ANR	17464	Statement	write_property	1650:22:41991:42004	17413	10	True				
ANR	17465	Statement	)	1650:36:42005:42005	17413	11	True				
ANR	17466	Statement	(	1650:37:42006:42006	17413	12	True				
ANR	17467	Statement	arg	1650:38:42007:42009	17413	13	True				
ANR	17468	Statement	","	1650:41:42010:42010	17413	14	True				
ANR	17469	Statement	z_key	1650:43:42012:42016	17413	15	True				
ANR	17470	Statement	","	1650:48:42017:42017	17413	16	True				
ANR	17471	Statement	tmp	1650:50:42019:42021	17413	17	True				
ANR	17472	Statement	","	1650:53:42022:42022	17413	18	True				
ANR	17473	Statement	0	1650:55:42024:42024	17413	19	True				
ANR	17474	Statement	TSRMLS_CC	1650:57:42026:42034	17413	20	True				
ANR	17475	Statement	)	1650:66:42035:42035	17413	21	True				
ANR	17476	ExpressionStatement		1650:67:42036:42036	17413	22	True				
ANR	17477	ExpressionStatement	zval_ptr_dtor ( & tmp )	1651:1:42039:42058	17413	23	True				
ANR	17478	CallExpression	zval_ptr_dtor ( & tmp )		17413	0					
ANR	17479	Callee	zval_ptr_dtor		17413	0					
ANR	17480	Identifier	zval_ptr_dtor		17413	0					
ANR	17481	ArgumentList	& tmp		17413	1					
ANR	17482	Argument	& tmp		17413	0					
ANR	17483	UnaryOperationExpression	& tmp		17413	0					
ANR	17484	UnaryOperator	&		17413	0					
ANR	17485	Identifier	tmp		17413	1					
ANR	17486	ExpressionStatement	zval_ptr_dtor ( & z_key )	1652:1:42105:42126	17413	24	True				
ANR	17487	CallExpression	zval_ptr_dtor ( & z_key )		17413	0					
ANR	17488	Callee	zval_ptr_dtor		17413	0					
ANR	17489	Identifier	zval_ptr_dtor		17413	0					
ANR	17490	ArgumentList	& z_key		17413	1					
ANR	17491	Argument	& z_key		17413	0					
ANR	17492	UnaryOperationExpression	& z_key		17413	0					
ANR	17493	UnaryOperator	&		17413	0					
ANR	17494	Identifier	z_key		17413	1					
ANR	17495	ReturnStatement	return SUCCESS ;	1653:1:42129:42143	17413	25	True				
ANR	17496	Identifier	SUCCESS		17413	0					
ANR	17497	ReturnType	ZEND_API int		17413	1					
ANR	17498	Identifier	add_property_null_ex		17413	2					
ANR	17499	ParameterList	"zval * arg , const char * key , uint key_len TSRMLS_DC"		17413	3					
ANR	17500	Parameter	zval * arg	1639:34:41774:41782	17413	0	True				
ANR	17501	ParameterType	zval *		17413	0					
ANR	17502	Identifier	arg		17413	1					
ANR	17503	Parameter	const char * key	1639:45:41785:41799	17413	1	True				
ANR	17504	ParameterType	const char *		17413	0					
ANR	17505	Identifier	key		17413	1					
ANR	17506	Parameter	uint key_len TSRMLS_DC	1639:62:41802:41823	17413	2	True				
ANR	17507	ParameterType	uint key_len		17413	0					
ANR	17508	Identifier	TSRMLS_DC		17413	1					
ANR	17509	CFGEntryNode	ENTRY		17413		True				
ANR	17510	CFGExitNode	EXIT		17413		True				
ANR	17511	Symbol	SUCCESS		17413						
ANR	17512	Symbol	tmp		17413						
ANR	17513	Symbol	arg		17413						
ANR	17514	Symbol	& tmp		17413						
ANR	17515	Symbol	& z_key		17413						
ANR	17516	Symbol	TSRMLS_DC		17413						
ANR	17517	Symbol	key		17413						
ANR	17518	Symbol	z_key		17413						
ANR	17519	Symbol	key_len		17413						
ANR	17520	Function	add_property_resource_ex	1657:0:42158:42582							
ANR	17521	FunctionDef	"add_property_resource_ex (zval * arg , const char * key , uint key_len , long n TSRMLS_DC)"		17520	0					
ANR	17522	CompoundStatement		1658:0:42266:42582	17520	0					
ANR	17523	IdentifierDeclStatement	zval * tmp ;	1659:1:42269:42278	17520	0	True				
ANR	17524	IdentifierDecl	* tmp		17520	0					
ANR	17525	IdentifierDeclType	zval *		17520	0					
ANR	17526	Identifier	tmp		17520	1					
ANR	17527	IdentifierDeclStatement	zval * z_key ;	1660:1:42281:42292	17520	1	True				
ANR	17528	IdentifierDecl	* z_key		17520	0					
ANR	17529	IdentifierDeclType	zval *		17520	0					
ANR	17530	Identifier	z_key		17520	1					
ANR	17531	ExpressionStatement	MAKE_STD_ZVAL ( tmp )	1662:1:42296:42314	17520	2	True				
ANR	17532	CallExpression	MAKE_STD_ZVAL ( tmp )		17520	0					
ANR	17533	Callee	MAKE_STD_ZVAL		17520	0					
ANR	17534	Identifier	MAKE_STD_ZVAL		17520	0					
ANR	17535	ArgumentList	tmp		17520	1					
ANR	17536	Argument	tmp		17520	0					
ANR	17537	Identifier	tmp		17520	0					
ANR	17538	ExpressionStatement	"ZVAL_RESOURCE ( tmp , n )"	1663:1:42317:42338	17520	3	True				
ANR	17539	CallExpression	"ZVAL_RESOURCE ( tmp , n )"		17520	0					
ANR	17540	Callee	ZVAL_RESOURCE		17520	0					
ANR	17541	Identifier	ZVAL_RESOURCE		17520	0					
ANR	17542	ArgumentList	tmp		17520	1					
ANR	17543	Argument	tmp		17520	0					
ANR	17544	Identifier	tmp		17520	0					
ANR	17545	Argument	n		17520	1					
ANR	17546	Identifier	n		17520	0					
ANR	17547	ExpressionStatement	MAKE_STD_ZVAL ( z_key )	1665:1:42342:42362	17520	4	True				
ANR	17548	CallExpression	MAKE_STD_ZVAL ( z_key )		17520	0					
ANR	17549	Callee	MAKE_STD_ZVAL		17520	0					
ANR	17550	Identifier	MAKE_STD_ZVAL		17520	0					
ANR	17551	ArgumentList	z_key		17520	1					
ANR	17552	Argument	z_key		17520	0					
ANR	17553	Identifier	z_key		17520	0					
ANR	17554	ExpressionStatement	"ZVAL_STRINGL ( z_key , key , key_len - 1 , 1 )"	1666:1:42365:42403	17520	5	True				
ANR	17555	CallExpression	"ZVAL_STRINGL ( z_key , key , key_len - 1 , 1 )"		17520	0					
ANR	17556	Callee	ZVAL_STRINGL		17520	0					
ANR	17557	Identifier	ZVAL_STRINGL		17520	0					
ANR	17558	ArgumentList	z_key		17520	1					
ANR	17559	Argument	z_key		17520	0					
ANR	17560	Identifier	z_key		17520	0					
ANR	17561	Argument	key		17520	1					
ANR	17562	Identifier	key		17520	0					
ANR	17563	Argument	key_len - 1		17520	2					
ANR	17564	AdditiveExpression	key_len - 1		17520	0		-			
ANR	17565	Identifier	key_len		17520	0					
ANR	17566	PrimaryExpression	1		17520	1					
ANR	17567	Argument	1		17520	3					
ANR	17568	PrimaryExpression	1		17520	0					
ANR	17569	Statement	Z_OBJ_HANDLER_P	1668:1:42407:42421	17520	6	True				
ANR	17570	Statement	(	1668:16:42422:42422	17520	7	True				
ANR	17571	Statement	arg	1668:17:42423:42425	17520	8	True				
ANR	17572	Statement	","	1668:20:42426:42426	17520	9	True				
ANR	17573	Statement	write_property	1668:22:42428:42441	17520	10	True				
ANR	17574	Statement	)	1668:36:42442:42442	17520	11	True				
ANR	17575	Statement	(	1668:37:42443:42443	17520	12	True				
ANR	17576	Statement	arg	1668:38:42444:42446	17520	13	True				
ANR	17577	Statement	","	1668:41:42447:42447	17520	14	True				
ANR	17578	Statement	z_key	1668:43:42449:42453	17520	15	True				
ANR	17579	Statement	","	1668:48:42454:42454	17520	16	True				
ANR	17580	Statement	tmp	1668:50:42456:42458	17520	17	True				
ANR	17581	Statement	","	1668:53:42459:42459	17520	18	True				
ANR	17582	Statement	0	1668:55:42461:42461	17520	19	True				
ANR	17583	Statement	TSRMLS_CC	1668:57:42463:42471	17520	20	True				
ANR	17584	Statement	)	1668:66:42472:42472	17520	21	True				
ANR	17585	ExpressionStatement		1668:67:42473:42473	17520	22	True				
ANR	17586	ExpressionStatement	zval_ptr_dtor ( & tmp )	1669:1:42476:42495	17520	23	True				
ANR	17587	CallExpression	zval_ptr_dtor ( & tmp )		17520	0					
ANR	17588	Callee	zval_ptr_dtor		17520	0					
ANR	17589	Identifier	zval_ptr_dtor		17520	0					
ANR	17590	ArgumentList	& tmp		17520	1					
ANR	17591	Argument	& tmp		17520	0					
ANR	17592	UnaryOperationExpression	& tmp		17520	0					
ANR	17593	UnaryOperator	&		17520	0					
ANR	17594	Identifier	tmp		17520	1					
ANR	17595	ExpressionStatement	zval_ptr_dtor ( & z_key )	1670:1:42542:42563	17520	24	True				
ANR	17596	CallExpression	zval_ptr_dtor ( & z_key )		17520	0					
ANR	17597	Callee	zval_ptr_dtor		17520	0					
ANR	17598	Identifier	zval_ptr_dtor		17520	0					
ANR	17599	ArgumentList	& z_key		17520	1					
ANR	17600	Argument	& z_key		17520	0					
ANR	17601	UnaryOperationExpression	& z_key		17520	0					
ANR	17602	UnaryOperator	&		17520	0					
ANR	17603	Identifier	z_key		17520	1					
ANR	17604	ReturnStatement	return SUCCESS ;	1671:1:42566:42580	17520	25	True				
ANR	17605	Identifier	SUCCESS		17520	0					
ANR	17606	ReturnType	ZEND_API int		17520	1					
ANR	17607	Identifier	add_property_resource_ex		17520	2					
ANR	17608	ParameterList	"zval * arg , const char * key , uint key_len , long n TSRMLS_DC"		17520	3					
ANR	17609	Parameter	zval * arg	1657:38:42196:42204	17520	0	True				
ANR	17610	ParameterType	zval *		17520	0					
ANR	17611	Identifier	arg		17520	1					
ANR	17612	Parameter	const char * key	1657:49:42207:42221	17520	1	True				
ANR	17613	ParameterType	const char *		17520	0					
ANR	17614	Identifier	key		17520	1					
ANR	17615	Parameter	uint key_len	1657:66:42224:42235	17520	2	True				
ANR	17616	ParameterType	uint		17520	0					
ANR	17617	Identifier	key_len		17520	1					
ANR	17618	Parameter	long n TSRMLS_DC	1657:80:42238:42253	17520	3	True				
ANR	17619	ParameterType	long n		17520	0					
ANR	17620	Identifier	TSRMLS_DC		17520	1					
ANR	17621	CFGEntryNode	ENTRY		17520		True				
ANR	17622	CFGExitNode	EXIT		17520		True				
ANR	17623	Symbol	SUCCESS		17520						
ANR	17624	Symbol	tmp		17520						
ANR	17625	Symbol	arg		17520						
ANR	17626	Symbol	& tmp		17520						
ANR	17627	Symbol	& z_key		17520						
ANR	17628	Symbol	TSRMLS_DC		17520						
ANR	17629	Symbol	key		17520						
ANR	17630	Symbol	z_key		17520						
ANR	17631	Symbol	n		17520						
ANR	17632	Symbol	key_len		17520						
ANR	17633	Function	add_property_double_ex	1675:0:42595:43017							
ANR	17634	FunctionDef	"add_property_double_ex (zval * arg , const char * key , uint key_len , double d TSRMLS_DC)"		17633	0					
ANR	17635	CompoundStatement		1676:0:42703:43017	17633	0					
ANR	17636	IdentifierDeclStatement	zval * tmp ;	1677:1:42706:42715	17633	0	True				
ANR	17637	IdentifierDecl	* tmp		17633	0					
ANR	17638	IdentifierDeclType	zval *		17633	0					
ANR	17639	Identifier	tmp		17633	1					
ANR	17640	IdentifierDeclStatement	zval * z_key ;	1678:1:42718:42729	17633	1	True				
ANR	17641	IdentifierDecl	* z_key		17633	0					
ANR	17642	IdentifierDeclType	zval *		17633	0					
ANR	17643	Identifier	z_key		17633	1					
ANR	17644	ExpressionStatement	MAKE_STD_ZVAL ( tmp )	1680:1:42733:42751	17633	2	True				
ANR	17645	CallExpression	MAKE_STD_ZVAL ( tmp )		17633	0					
ANR	17646	Callee	MAKE_STD_ZVAL		17633	0					
ANR	17647	Identifier	MAKE_STD_ZVAL		17633	0					
ANR	17648	ArgumentList	tmp		17633	1					
ANR	17649	Argument	tmp		17633	0					
ANR	17650	Identifier	tmp		17633	0					
ANR	17651	ExpressionStatement	"ZVAL_DOUBLE ( tmp , d )"	1681:1:42754:42773	17633	3	True				
ANR	17652	CallExpression	"ZVAL_DOUBLE ( tmp , d )"		17633	0					
ANR	17653	Callee	ZVAL_DOUBLE		17633	0					
ANR	17654	Identifier	ZVAL_DOUBLE		17633	0					
ANR	17655	ArgumentList	tmp		17633	1					
ANR	17656	Argument	tmp		17633	0					
ANR	17657	Identifier	tmp		17633	0					
ANR	17658	Argument	d		17633	1					
ANR	17659	Identifier	d		17633	0					
ANR	17660	ExpressionStatement	MAKE_STD_ZVAL ( z_key )	1683:1:42777:42797	17633	4	True				
ANR	17661	CallExpression	MAKE_STD_ZVAL ( z_key )		17633	0					
ANR	17662	Callee	MAKE_STD_ZVAL		17633	0					
ANR	17663	Identifier	MAKE_STD_ZVAL		17633	0					
ANR	17664	ArgumentList	z_key		17633	1					
ANR	17665	Argument	z_key		17633	0					
ANR	17666	Identifier	z_key		17633	0					
ANR	17667	ExpressionStatement	"ZVAL_STRINGL ( z_key , key , key_len - 1 , 1 )"	1684:1:42800:42838	17633	5	True				
ANR	17668	CallExpression	"ZVAL_STRINGL ( z_key , key , key_len - 1 , 1 )"		17633	0					
ANR	17669	Callee	ZVAL_STRINGL		17633	0					
ANR	17670	Identifier	ZVAL_STRINGL		17633	0					
ANR	17671	ArgumentList	z_key		17633	1					
ANR	17672	Argument	z_key		17633	0					
ANR	17673	Identifier	z_key		17633	0					
ANR	17674	Argument	key		17633	1					
ANR	17675	Identifier	key		17633	0					
ANR	17676	Argument	key_len - 1		17633	2					
ANR	17677	AdditiveExpression	key_len - 1		17633	0		-			
ANR	17678	Identifier	key_len		17633	0					
ANR	17679	PrimaryExpression	1		17633	1					
ANR	17680	Argument	1		17633	3					
ANR	17681	PrimaryExpression	1		17633	0					
ANR	17682	Statement	Z_OBJ_HANDLER_P	1686:1:42842:42856	17633	6	True				
ANR	17683	Statement	(	1686:16:42857:42857	17633	7	True				
ANR	17684	Statement	arg	1686:17:42858:42860	17633	8	True				
ANR	17685	Statement	","	1686:20:42861:42861	17633	9	True				
ANR	17686	Statement	write_property	1686:22:42863:42876	17633	10	True				
ANR	17687	Statement	)	1686:36:42877:42877	17633	11	True				
ANR	17688	Statement	(	1686:37:42878:42878	17633	12	True				
ANR	17689	Statement	arg	1686:38:42879:42881	17633	13	True				
ANR	17690	Statement	","	1686:41:42882:42882	17633	14	True				
ANR	17691	Statement	z_key	1686:43:42884:42888	17633	15	True				
ANR	17692	Statement	","	1686:48:42889:42889	17633	16	True				
ANR	17693	Statement	tmp	1686:50:42891:42893	17633	17	True				
ANR	17694	Statement	","	1686:53:42894:42894	17633	18	True				
ANR	17695	Statement	0	1686:55:42896:42896	17633	19	True				
ANR	17696	Statement	TSRMLS_CC	1686:57:42898:42906	17633	20	True				
ANR	17697	Statement	)	1686:66:42907:42907	17633	21	True				
ANR	17698	ExpressionStatement		1686:67:42908:42908	17633	22	True				
ANR	17699	ExpressionStatement	zval_ptr_dtor ( & tmp )	1687:1:42911:42930	17633	23	True				
ANR	17700	CallExpression	zval_ptr_dtor ( & tmp )		17633	0					
ANR	17701	Callee	zval_ptr_dtor		17633	0					
ANR	17702	Identifier	zval_ptr_dtor		17633	0					
ANR	17703	ArgumentList	& tmp		17633	1					
ANR	17704	Argument	& tmp		17633	0					
ANR	17705	UnaryOperationExpression	& tmp		17633	0					
ANR	17706	UnaryOperator	&		17633	0					
ANR	17707	Identifier	tmp		17633	1					
ANR	17708	ExpressionStatement	zval_ptr_dtor ( & z_key )	1688:1:42977:42998	17633	24	True				
ANR	17709	CallExpression	zval_ptr_dtor ( & z_key )		17633	0					
ANR	17710	Callee	zval_ptr_dtor		17633	0					
ANR	17711	Identifier	zval_ptr_dtor		17633	0					
ANR	17712	ArgumentList	& z_key		17633	1					
ANR	17713	Argument	& z_key		17633	0					
ANR	17714	UnaryOperationExpression	& z_key		17633	0					
ANR	17715	UnaryOperator	&		17633	0					
ANR	17716	Identifier	z_key		17633	1					
ANR	17717	ReturnStatement	return SUCCESS ;	1689:1:43001:43015	17633	25	True				
ANR	17718	Identifier	SUCCESS		17633	0					
ANR	17719	ReturnType	ZEND_API int		17633	1					
ANR	17720	Identifier	add_property_double_ex		17633	2					
ANR	17721	ParameterList	"zval * arg , const char * key , uint key_len , double d TSRMLS_DC"		17633	3					
ANR	17722	Parameter	zval * arg	1675:36:42631:42639	17633	0	True				
ANR	17723	ParameterType	zval *		17633	0					
ANR	17724	Identifier	arg		17633	1					
ANR	17725	Parameter	const char * key	1675:47:42642:42656	17633	1	True				
ANR	17726	ParameterType	const char *		17633	0					
ANR	17727	Identifier	key		17633	1					
ANR	17728	Parameter	uint key_len	1675:64:42659:42670	17633	2	True				
ANR	17729	ParameterType	uint		17633	0					
ANR	17730	Identifier	key_len		17633	1					
ANR	17731	Parameter	double d TSRMLS_DC	1675:78:42673:42690	17633	3	True				
ANR	17732	ParameterType	double d		17633	0					
ANR	17733	Identifier	TSRMLS_DC		17633	1					
ANR	17734	CFGEntryNode	ENTRY		17633		True				
ANR	17735	CFGExitNode	EXIT		17633		True				
ANR	17736	Symbol	SUCCESS		17633						
ANR	17737	Symbol	d		17633						
ANR	17738	Symbol	tmp		17633						
ANR	17739	Symbol	arg		17633						
ANR	17740	Symbol	& tmp		17633						
ANR	17741	Symbol	& z_key		17633						
ANR	17742	Symbol	TSRMLS_DC		17633						
ANR	17743	Symbol	key		17633						
ANR	17744	Symbol	z_key		17633						
ANR	17745	Symbol	key_len		17633						
ANR	17746	Function	add_property_string_ex	1693:0:43030:43637							
ANR	17747	FunctionDef	"add_property_string_ex (zval * arg , const char * key , uint key_len , const char * str , int duplicate TSRMLS_DC)"		17746	0					
ANR	17748	CompoundStatement		1694:0:43160:43637	17746	0					
ANR	17749	IdentifierDeclStatement	zval * tmp ;	1695:1:43163:43172	17746	0	True				
ANR	17750	IdentifierDecl	* tmp		17746	0					
ANR	17751	IdentifierDeclType	zval *		17746	0					
ANR	17752	Identifier	tmp		17746	1					
ANR	17753	IdentifierDeclStatement	zval * z_key ;	1696:1:43175:43186	17746	1	True				
ANR	17754	IdentifierDecl	* z_key		17746	0					
ANR	17755	IdentifierDeclType	zval *		17746	0					
ANR	17756	Identifier	z_key		17746	1					
ANR	17757	IdentifierDeclStatement	size_t _len = strlen ( str ) ;	1697:1:43189:43214	17746	2	True				
ANR	17758	IdentifierDecl	_len = strlen ( str )		17746	0					
ANR	17759	IdentifierDeclType	size_t		17746	0					
ANR	17760	Identifier	_len		17746	1					
ANR	17761	AssignmentExpression	_len = strlen ( str )		17746	2		=			
ANR	17762	Identifier	_len		17746	0					
ANR	17763	CallExpression	strlen ( str )		17746	1					
ANR	17764	Callee	strlen		17746	0					
ANR	17765	Identifier	strlen		17746	0					
ANR	17766	ArgumentList	str		17746	1					
ANR	17767	Argument	str		17746	0					
ANR	17768	Identifier	str		17746	0					
ANR	17769	IfStatement	if ( UNEXPECTED ( _len > INT_MAX ) )		17746	3					
ANR	17770	Condition	UNEXPECTED ( _len > INT_MAX )	1699:5:43222:43247	17746	0	True				
ANR	17771	CallExpression	UNEXPECTED ( _len > INT_MAX )		17746	0					
ANR	17772	Callee	UNEXPECTED		17746	0					
ANR	17773	Identifier	UNEXPECTED		17746	0					
ANR	17774	ArgumentList	_len > INT_MAX		17746	1					
ANR	17775	Argument	_len > INT_MAX		17746	0					
ANR	17776	RelationalExpression	_len > INT_MAX		17746	0		>			
ANR	17777	Identifier	_len		17746	0					
ANR	17778	Identifier	INT_MAX		17746	1					
ANR	17779	CompoundStatement		6:33:89:89	17746	1					
ANR	17780	ExpressionStatement	"zend_error_noreturn ( E_ERROR , ""String overflow, max size is %d"" , INT_MAX )"	1700:2:43254:43326	17746	0	True				
ANR	17781	CallExpression	"zend_error_noreturn ( E_ERROR , ""String overflow, max size is %d"" , INT_MAX )"		17746	0					
ANR	17782	Callee	zend_error_noreturn		17746	0					
ANR	17783	Identifier	zend_error_noreturn		17746	0					
ANR	17784	ArgumentList	E_ERROR		17746	1					
ANR	17785	Argument	E_ERROR		17746	0					
ANR	17786	Identifier	E_ERROR		17746	0					
ANR	17787	Argument	"""String overflow, max size is %d"""		17746	1					
ANR	17788	PrimaryExpression	"""String overflow, max size is %d"""		17746	0					
ANR	17789	Argument	INT_MAX		17746	2					
ANR	17790	Identifier	INT_MAX		17746	0					
ANR	17791	ExpressionStatement	MAKE_STD_ZVAL ( tmp )	1703:1:43333:43351	17746	4	True				
ANR	17792	CallExpression	MAKE_STD_ZVAL ( tmp )		17746	0					
ANR	17793	Callee	MAKE_STD_ZVAL		17746	0					
ANR	17794	Identifier	MAKE_STD_ZVAL		17746	0					
ANR	17795	ArgumentList	tmp		17746	1					
ANR	17796	Argument	tmp		17746	0					
ANR	17797	Identifier	tmp		17746	0					
ANR	17798	ExpressionStatement	"ZVAL_STRINGL ( tmp , str , _len , duplicate )"	1704:1:43354:43393	17746	5	True				
ANR	17799	CallExpression	"ZVAL_STRINGL ( tmp , str , _len , duplicate )"		17746	0					
ANR	17800	Callee	ZVAL_STRINGL		17746	0					
ANR	17801	Identifier	ZVAL_STRINGL		17746	0					
ANR	17802	ArgumentList	tmp		17746	1					
ANR	17803	Argument	tmp		17746	0					
ANR	17804	Identifier	tmp		17746	0					
ANR	17805	Argument	str		17746	1					
ANR	17806	Identifier	str		17746	0					
ANR	17807	Argument	_len		17746	2					
ANR	17808	Identifier	_len		17746	0					
ANR	17809	Argument	duplicate		17746	3					
ANR	17810	Identifier	duplicate		17746	0					
ANR	17811	ExpressionStatement	MAKE_STD_ZVAL ( z_key )	1706:1:43397:43417	17746	6	True				
ANR	17812	CallExpression	MAKE_STD_ZVAL ( z_key )		17746	0					
ANR	17813	Callee	MAKE_STD_ZVAL		17746	0					
ANR	17814	Identifier	MAKE_STD_ZVAL		17746	0					
ANR	17815	ArgumentList	z_key		17746	1					
ANR	17816	Argument	z_key		17746	0					
ANR	17817	Identifier	z_key		17746	0					
ANR	17818	ExpressionStatement	"ZVAL_STRINGL ( z_key , key , key_len - 1 , 1 )"	1707:1:43420:43458	17746	7	True				
ANR	17819	CallExpression	"ZVAL_STRINGL ( z_key , key , key_len - 1 , 1 )"		17746	0					
ANR	17820	Callee	ZVAL_STRINGL		17746	0					
ANR	17821	Identifier	ZVAL_STRINGL		17746	0					
ANR	17822	ArgumentList	z_key		17746	1					
ANR	17823	Argument	z_key		17746	0					
ANR	17824	Identifier	z_key		17746	0					
ANR	17825	Argument	key		17746	1					
ANR	17826	Identifier	key		17746	0					
ANR	17827	Argument	key_len - 1		17746	2					
ANR	17828	AdditiveExpression	key_len - 1		17746	0		-			
ANR	17829	Identifier	key_len		17746	0					
ANR	17830	PrimaryExpression	1		17746	1					
ANR	17831	Argument	1		17746	3					
ANR	17832	PrimaryExpression	1		17746	0					
ANR	17833	Statement	Z_OBJ_HANDLER_P	1709:1:43462:43476	17746	8	True				
ANR	17834	Statement	(	1709:16:43477:43477	17746	9	True				
ANR	17835	Statement	arg	1709:17:43478:43480	17746	10	True				
ANR	17836	Statement	","	1709:20:43481:43481	17746	11	True				
ANR	17837	Statement	write_property	1709:22:43483:43496	17746	12	True				
ANR	17838	Statement	)	1709:36:43497:43497	17746	13	True				
ANR	17839	Statement	(	1709:37:43498:43498	17746	14	True				
ANR	17840	Statement	arg	1709:38:43499:43501	17746	15	True				
ANR	17841	Statement	","	1709:41:43502:43502	17746	16	True				
ANR	17842	Statement	z_key	1709:43:43504:43508	17746	17	True				
ANR	17843	Statement	","	1709:48:43509:43509	17746	18	True				
ANR	17844	Statement	tmp	1709:50:43511:43513	17746	19	True				
ANR	17845	Statement	","	1709:53:43514:43514	17746	20	True				
ANR	17846	Statement	0	1709:55:43516:43516	17746	21	True				
ANR	17847	Statement	TSRMLS_CC	1709:57:43518:43526	17746	22	True				
ANR	17848	Statement	)	1709:66:43527:43527	17746	23	True				
ANR	17849	ExpressionStatement		1709:67:43528:43528	17746	24	True				
ANR	17850	ExpressionStatement	zval_ptr_dtor ( & tmp )	1710:1:43531:43550	17746	25	True				
ANR	17851	CallExpression	zval_ptr_dtor ( & tmp )		17746	0					
ANR	17852	Callee	zval_ptr_dtor		17746	0					
ANR	17853	Identifier	zval_ptr_dtor		17746	0					
ANR	17854	ArgumentList	& tmp		17746	1					
ANR	17855	Argument	& tmp		17746	0					
ANR	17856	UnaryOperationExpression	& tmp		17746	0					
ANR	17857	UnaryOperator	&		17746	0					
ANR	17858	Identifier	tmp		17746	1					
ANR	17859	ExpressionStatement	zval_ptr_dtor ( & z_key )	1711:1:43597:43618	17746	26	True				
ANR	17860	CallExpression	zval_ptr_dtor ( & z_key )		17746	0					
ANR	17861	Callee	zval_ptr_dtor		17746	0					
ANR	17862	Identifier	zval_ptr_dtor		17746	0					
ANR	17863	ArgumentList	& z_key		17746	1					
ANR	17864	Argument	& z_key		17746	0					
ANR	17865	UnaryOperationExpression	& z_key		17746	0					
ANR	17866	UnaryOperator	&		17746	0					
ANR	17867	Identifier	z_key		17746	1					
ANR	17868	ReturnStatement	return SUCCESS ;	1712:1:43621:43635	17746	27	True				
ANR	17869	Identifier	SUCCESS		17746	0					
ANR	17870	ReturnType	ZEND_API int		17746	1					
ANR	17871	Identifier	add_property_string_ex		17746	2					
ANR	17872	ParameterList	"zval * arg , const char * key , uint key_len , const char * str , int duplicate TSRMLS_DC"		17746	3					
ANR	17873	Parameter	zval * arg	1693:36:43066:43074	17746	0	True				
ANR	17874	ParameterType	zval *		17746	0					
ANR	17875	Identifier	arg		17746	1					
ANR	17876	Parameter	const char * key	1693:47:43077:43091	17746	1	True				
ANR	17877	ParameterType	const char *		17746	0					
ANR	17878	Identifier	key		17746	1					
ANR	17879	Parameter	uint key_len	1693:64:43094:43105	17746	2	True				
ANR	17880	ParameterType	uint		17746	0					
ANR	17881	Identifier	key_len		17746	1					
ANR	17882	Parameter	const char * str	1693:78:43108:43122	17746	3	True				
ANR	17883	ParameterType	const char *		17746	0					
ANR	17884	Identifier	str		17746	1					
ANR	17885	Parameter	int duplicate TSRMLS_DC	1693:95:43125:43147	17746	4	True				
ANR	17886	ParameterType	int duplicate		17746	0					
ANR	17887	Identifier	TSRMLS_DC		17746	1					
ANR	17888	CFGEntryNode	ENTRY		17746		True				
ANR	17889	CFGExitNode	EXIT		17746		True				
ANR	17890	Symbol	SUCCESS		17746						
ANR	17891	Symbol	duplicate		17746						
ANR	17892	Symbol	& z_key		17746						
ANR	17893	Symbol	TSRMLS_DC		17746						
ANR	17894	Symbol	str		17746						
ANR	17895	Symbol	UNEXPECTED		17746						
ANR	17896	Symbol	strlen		17746						
ANR	17897	Symbol	E_ERROR		17746						
ANR	17898	Symbol	tmp		17746						
ANR	17899	Symbol	arg		17746						
ANR	17900	Symbol	INT_MAX		17746						
ANR	17901	Symbol	_len		17746						
ANR	17902	Symbol	& tmp		17746						
ANR	17903	Symbol	key		17746						
ANR	17904	Symbol	z_key		17746						
ANR	17905	Symbol	key_len		17746						
ANR	17906	Function	add_property_stringl_ex	1716:0:43650:44247							
ANR	17907	FunctionDef	"add_property_stringl_ex (zval * arg , const char * key , uint key_len , const char * str , uint length , int duplicate TSRMLS_DC)"		17906	0					
ANR	17908	CompoundStatement		1717:0:43794:44247	17906	0					
ANR	17909	IdentifierDeclStatement	zval * tmp ;	1718:1:43797:43806	17906	0	True				
ANR	17910	IdentifierDecl	* tmp		17906	0					
ANR	17911	IdentifierDeclType	zval *		17906	0					
ANR	17912	Identifier	tmp		17906	1					
ANR	17913	IdentifierDeclStatement	zval * z_key ;	1719:1:43809:43820	17906	1	True				
ANR	17914	IdentifierDecl	* z_key		17906	0					
ANR	17915	IdentifierDeclType	zval *		17906	0					
ANR	17916	Identifier	z_key		17906	1					
ANR	17917	IfStatement	if ( UNEXPECTED ( length > INT_MAX ) )		17906	2					
ANR	17918	Condition	UNEXPECTED ( length > INT_MAX )	1721:5:43828:43855	17906	0	True				
ANR	17919	CallExpression	UNEXPECTED ( length > INT_MAX )		17906	0					
ANR	17920	Callee	UNEXPECTED		17906	0					
ANR	17921	Identifier	UNEXPECTED		17906	0					
ANR	17922	ArgumentList	length > INT_MAX		17906	1					
ANR	17923	Argument	length > INT_MAX		17906	0					
ANR	17924	RelationalExpression	length > INT_MAX		17906	0		>			
ANR	17925	Identifier	length		17906	0					
ANR	17926	Identifier	INT_MAX		17906	1					
ANR	17927	CompoundStatement		5:35:63:63	17906	1					
ANR	17928	ExpressionStatement	"zend_error_noreturn ( E_ERROR , ""String overflow, max size is %d"" , INT_MAX )"	1722:2:43862:43934	17906	0	True				
ANR	17929	CallExpression	"zend_error_noreturn ( E_ERROR , ""String overflow, max size is %d"" , INT_MAX )"		17906	0					
ANR	17930	Callee	zend_error_noreturn		17906	0					
ANR	17931	Identifier	zend_error_noreturn		17906	0					
ANR	17932	ArgumentList	E_ERROR		17906	1					
ANR	17933	Argument	E_ERROR		17906	0					
ANR	17934	Identifier	E_ERROR		17906	0					
ANR	17935	Argument	"""String overflow, max size is %d"""		17906	1					
ANR	17936	PrimaryExpression	"""String overflow, max size is %d"""		17906	0					
ANR	17937	Argument	INT_MAX		17906	2					
ANR	17938	Identifier	INT_MAX		17906	0					
ANR	17939	ExpressionStatement	MAKE_STD_ZVAL ( tmp )	1725:1:43941:43959	17906	3	True				
ANR	17940	CallExpression	MAKE_STD_ZVAL ( tmp )		17906	0					
ANR	17941	Callee	MAKE_STD_ZVAL		17906	0					
ANR	17942	Identifier	MAKE_STD_ZVAL		17906	0					
ANR	17943	ArgumentList	tmp		17906	1					
ANR	17944	Argument	tmp		17906	0					
ANR	17945	Identifier	tmp		17906	0					
ANR	17946	ExpressionStatement	"ZVAL_STRINGL ( tmp , str , length , duplicate )"	1726:1:43962:44003	17906	4	True				
ANR	17947	CallExpression	"ZVAL_STRINGL ( tmp , str , length , duplicate )"		17906	0					
ANR	17948	Callee	ZVAL_STRINGL		17906	0					
ANR	17949	Identifier	ZVAL_STRINGL		17906	0					
ANR	17950	ArgumentList	tmp		17906	1					
ANR	17951	Argument	tmp		17906	0					
ANR	17952	Identifier	tmp		17906	0					
ANR	17953	Argument	str		17906	1					
ANR	17954	Identifier	str		17906	0					
ANR	17955	Argument	length		17906	2					
ANR	17956	Identifier	length		17906	0					
ANR	17957	Argument	duplicate		17906	3					
ANR	17958	Identifier	duplicate		17906	0					
ANR	17959	ExpressionStatement	MAKE_STD_ZVAL ( z_key )	1728:1:44007:44027	17906	5	True				
ANR	17960	CallExpression	MAKE_STD_ZVAL ( z_key )		17906	0					
ANR	17961	Callee	MAKE_STD_ZVAL		17906	0					
ANR	17962	Identifier	MAKE_STD_ZVAL		17906	0					
ANR	17963	ArgumentList	z_key		17906	1					
ANR	17964	Argument	z_key		17906	0					
ANR	17965	Identifier	z_key		17906	0					
ANR	17966	ExpressionStatement	"ZVAL_STRINGL ( z_key , key , key_len - 1 , 1 )"	1729:1:44030:44068	17906	6	True				
ANR	17967	CallExpression	"ZVAL_STRINGL ( z_key , key , key_len - 1 , 1 )"		17906	0					
ANR	17968	Callee	ZVAL_STRINGL		17906	0					
ANR	17969	Identifier	ZVAL_STRINGL		17906	0					
ANR	17970	ArgumentList	z_key		17906	1					
ANR	17971	Argument	z_key		17906	0					
ANR	17972	Identifier	z_key		17906	0					
ANR	17973	Argument	key		17906	1					
ANR	17974	Identifier	key		17906	0					
ANR	17975	Argument	key_len - 1		17906	2					
ANR	17976	AdditiveExpression	key_len - 1		17906	0		-			
ANR	17977	Identifier	key_len		17906	0					
ANR	17978	PrimaryExpression	1		17906	1					
ANR	17979	Argument	1		17906	3					
ANR	17980	PrimaryExpression	1		17906	0					
ANR	17981	Statement	Z_OBJ_HANDLER_P	1731:1:44072:44086	17906	7	True				
ANR	17982	Statement	(	1731:16:44087:44087	17906	8	True				
ANR	17983	Statement	arg	1731:17:44088:44090	17906	9	True				
ANR	17984	Statement	","	1731:20:44091:44091	17906	10	True				
ANR	17985	Statement	write_property	1731:22:44093:44106	17906	11	True				
ANR	17986	Statement	)	1731:36:44107:44107	17906	12	True				
ANR	17987	Statement	(	1731:37:44108:44108	17906	13	True				
ANR	17988	Statement	arg	1731:38:44109:44111	17906	14	True				
ANR	17989	Statement	","	1731:41:44112:44112	17906	15	True				
ANR	17990	Statement	z_key	1731:43:44114:44118	17906	16	True				
ANR	17991	Statement	","	1731:48:44119:44119	17906	17	True				
ANR	17992	Statement	tmp	1731:50:44121:44123	17906	18	True				
ANR	17993	Statement	","	1731:53:44124:44124	17906	19	True				
ANR	17994	Statement	0	1731:55:44126:44126	17906	20	True				
ANR	17995	Statement	TSRMLS_CC	1731:57:44128:44136	17906	21	True				
ANR	17996	Statement	)	1731:66:44137:44137	17906	22	True				
ANR	17997	ExpressionStatement		1731:67:44138:44138	17906	23	True				
ANR	17998	ExpressionStatement	zval_ptr_dtor ( & tmp )	1732:1:44141:44160	17906	24	True				
ANR	17999	CallExpression	zval_ptr_dtor ( & tmp )		17906	0					
ANR	18000	Callee	zval_ptr_dtor		17906	0					
ANR	18001	Identifier	zval_ptr_dtor		17906	0					
ANR	18002	ArgumentList	& tmp		17906	1					
ANR	18003	Argument	& tmp		17906	0					
ANR	18004	UnaryOperationExpression	& tmp		17906	0					
ANR	18005	UnaryOperator	&		17906	0					
ANR	18006	Identifier	tmp		17906	1					
ANR	18007	ExpressionStatement	zval_ptr_dtor ( & z_key )	1733:1:44207:44228	17906	25	True				
ANR	18008	CallExpression	zval_ptr_dtor ( & z_key )		17906	0					
ANR	18009	Callee	zval_ptr_dtor		17906	0					
ANR	18010	Identifier	zval_ptr_dtor		17906	0					
ANR	18011	ArgumentList	& z_key		17906	1					
ANR	18012	Argument	& z_key		17906	0					
ANR	18013	UnaryOperationExpression	& z_key		17906	0					
ANR	18014	UnaryOperator	&		17906	0					
ANR	18015	Identifier	z_key		17906	1					
ANR	18016	ReturnStatement	return SUCCESS ;	1734:1:44231:44245	17906	26	True				
ANR	18017	Identifier	SUCCESS		17906	0					
ANR	18018	ReturnType	ZEND_API int		17906	1					
ANR	18019	Identifier	add_property_stringl_ex		17906	2					
ANR	18020	ParameterList	"zval * arg , const char * key , uint key_len , const char * str , uint length , int duplicate TSRMLS_DC"		17906	3					
ANR	18021	Parameter	zval * arg	1716:37:43687:43695	17906	0	True				
ANR	18022	ParameterType	zval *		17906	0					
ANR	18023	Identifier	arg		17906	1					
ANR	18024	Parameter	const char * key	1716:48:43698:43712	17906	1	True				
ANR	18025	ParameterType	const char *		17906	0					
ANR	18026	Identifier	key		17906	1					
ANR	18027	Parameter	uint key_len	1716:65:43715:43726	17906	2	True				
ANR	18028	ParameterType	uint		17906	0					
ANR	18029	Identifier	key_len		17906	1					
ANR	18030	Parameter	const char * str	1716:79:43729:43743	17906	3	True				
ANR	18031	ParameterType	const char *		17906	0					
ANR	18032	Identifier	str		17906	1					
ANR	18033	Parameter	uint length	1716:96:43746:43756	17906	4	True				
ANR	18034	ParameterType	uint		17906	0					
ANR	18035	Identifier	length		17906	1					
ANR	18036	Parameter	int duplicate TSRMLS_DC	1716:109:43759:43781	17906	5	True				
ANR	18037	ParameterType	int duplicate		17906	0					
ANR	18038	Identifier	TSRMLS_DC		17906	1					
ANR	18039	CFGEntryNode	ENTRY		17906		True				
ANR	18040	CFGExitNode	EXIT		17906		True				
ANR	18041	Symbol	SUCCESS		17906						
ANR	18042	Symbol	length		17906						
ANR	18043	Symbol	duplicate		17906						
ANR	18044	Symbol	& z_key		17906						
ANR	18045	Symbol	TSRMLS_DC		17906						
ANR	18046	Symbol	str		17906						
ANR	18047	Symbol	UNEXPECTED		17906						
ANR	18048	Symbol	E_ERROR		17906						
ANR	18049	Symbol	tmp		17906						
ANR	18050	Symbol	arg		17906						
ANR	18051	Symbol	INT_MAX		17906						
ANR	18052	Symbol	& tmp		17906						
ANR	18053	Symbol	key		17906						
ANR	18054	Symbol	z_key		17906						
ANR	18055	Symbol	key_len		17906						
ANR	18056	DeclStmt									
ANR	18057	Decl							zval	zval *	z_key
ANR	18058	DeclStmt									
ANR	18059	Decl							int	int	name_len
ANR	18060	DeclStmt									
ANR	18061	Decl							char	char *	lcname
ANR	18062	DeclStmt									
ANR	18063	Decl							const zend_module_dep	const zend_module_dep *	dep
ANR	18064	DeclStmt									
ANR	18065	Decl							zend_module_entry	zend_module_entry *	req_mod
ANR	18066	Function	zend_sort_modules	1814:0:46357:47106							
ANR	18067	FunctionDef	"zend_sort_modules (void * base , size_t count , size_t siz , compare_func_t compare TSRMLS_DC)"		18066	0					
ANR	18068	CompoundStatement		1815:0:46469:47106	18066	0					
ANR	18069	IdentifierDeclStatement	Bucket * * b1 = base ;	1816:1:46472:46490	18066	0	True				
ANR	18070	IdentifierDecl	* * b1 = base		18066	0					
ANR	18071	IdentifierDeclType	Bucket * *		18066	0					
ANR	18072	Identifier	b1		18066	1					
ANR	18073	AssignmentExpression	* * b1 = base		18066	2		=			
ANR	18074	Identifier	base		18066	0					
ANR	18075	Identifier	base		18066	1					
ANR	18076	IdentifierDeclStatement	Bucket * * b2 ;	1817:1:46493:46504	18066	1	True				
ANR	18077	IdentifierDecl	* * b2		18066	0					
ANR	18078	IdentifierDeclType	Bucket * *		18066	0					
ANR	18079	Identifier	b2		18066	1					
ANR	18080	IdentifierDeclStatement	Bucket * * end = b1 + count ;	1818:1:46507:46532	18066	2	True				
ANR	18081	IdentifierDecl	* * end = b1 + count		18066	0					
ANR	18082	IdentifierDeclType	Bucket * *		18066	0					
ANR	18083	Identifier	end		18066	1					
ANR	18084	AssignmentExpression	* * end = b1 + count		18066	2		=			
ANR	18085	Identifier	end		18066	0					
ANR	18086	AdditiveExpression	b1 + count		18066	1		+			
ANR	18087	Identifier	b1		18066	0					
ANR	18088	Identifier	count		18066	1					
ANR	18089	IdentifierDeclStatement	Bucket * tmp ;	1819:1:46535:46546	18066	3	True				
ANR	18090	IdentifierDecl	* tmp		18066	0					
ANR	18091	IdentifierDeclType	Bucket *		18066	0					
ANR	18092	Identifier	tmp		18066	1					
ANR	18093	IdentifierDeclStatement	"zend_module_entry * m , * r ;"	1820:1:46549:46573	18066	4	True				
ANR	18094	IdentifierDecl	* m		18066	0					
ANR	18095	IdentifierDeclType	zend_module_entry *		18066	0					
ANR	18096	Identifier	m		18066	1					
ANR	18097	IdentifierDecl	* r		18066	1					
ANR	18098	IdentifierDeclType	zend_module_entry *		18066	0					
ANR	18099	Identifier	r		18066	1					
ANR	18100	WhileStatement	while ( b1 < end )		18066	5					
ANR	18101	Condition	b1 < end	1822:8:46584:46591	18066	0	True				
ANR	18102	RelationalExpression	b1 < end		18066	0		<			
ANR	18103	Identifier	b1		18066	0					
ANR	18104	Identifier	end		18066	1					
ANR	18105	CompoundStatement		8:18:124:124	18066	1					
ANR	18106	Label	try_again :	1823:0:46596:46605	18066	0	True				
ANR	18107	Identifier	try_again		18066	0					
ANR	18108	ExpressionStatement	m = ( zend_module_entry * ) ( * b1 ) -> pData	1824:2:46609:46645	18066	1	True				
ANR	18109	AssignmentExpression	m = ( zend_module_entry * ) ( * b1 ) -> pData		18066	0		=			
ANR	18110	Identifier	m		18066	0					
ANR	18111	CastExpression	( zend_module_entry * ) ( * b1 ) -> pData		18066	1					
ANR	18112	CastTarget	zend_module_entry *		18066	0					
ANR	18113	PtrMemberAccess	( * b1 ) -> pData		18066	1					
ANR	18114	UnaryOperationExpression	* b1		18066	0					
ANR	18115	UnaryOperator	*		18066	0					
ANR	18116	Identifier	b1		18066	1					
ANR	18117	Identifier	pData		18066	1					
ANR	18118	IfStatement	if ( ! m -> module_started && m -> deps )		18066	2					
ANR	18119	Condition	! m -> module_started && m -> deps	1825:6:46653:46681	18066	0	True				
ANR	18120	AndExpression	! m -> module_started && m -> deps		18066	0		&&			
ANR	18121	UnaryOperationExpression	! m -> module_started		18066	0					
ANR	18122	UnaryOperator	!		18066	0					
ANR	18123	PtrMemberAccess	m -> module_started		18066	1					
ANR	18124	Identifier	m		18066	0					
ANR	18125	Identifier	module_started		18066	1					
ANR	18126	PtrMemberAccess	m -> deps		18066	1					
ANR	18127	Identifier	m		18066	0					
ANR	18128	Identifier	deps		18066	1					
ANR	18129	CompoundStatement		12:3:219:255	18066	1					
ANR	18130	IdentifierDeclStatement	const zend_module_dep * dep = m -> deps ;	1826:3:46689:46725	18066	0	True				
ANR	18131	IdentifierDecl	* dep = m -> deps		18066	0					
ANR	18132	IdentifierDeclType	const zend_module_dep *		18066	0					
ANR	18133	Identifier	dep		18066	1					
ANR	18134	AssignmentExpression	* dep = m -> deps		18066	2		=			
ANR	18135	Identifier	dep		18066	0					
ANR	18136	PtrMemberAccess	m -> deps		18066	1					
ANR	18137	Identifier	m		18066	0					
ANR	18138	Identifier	deps		18066	1					
ANR	18139	WhileStatement	while ( dep -> name )		18066	1					
ANR	18140	Condition	dep -> name	1827:10:46737:46745	18066	0	True				
ANR	18141	PtrMemberAccess	dep -> name		18066	0					
ANR	18142	Identifier	dep		18066	0					
ANR	18143	Identifier	name		18066	1					
ANR	18144	CompoundStatement		13:21:278:278	18066	1					
ANR	18145	IfStatement	if ( dep -> type == MODULE_DEP_REQUIRED || dep -> type == MODULE_DEP_OPTIONAL )		18066	0					
ANR	18146	Condition	dep -> type == MODULE_DEP_REQUIRED || dep -> type == MODULE_DEP_OPTIONAL	1828:8:46758:46825	18066	0	True				
ANR	18147	OrExpression	dep -> type == MODULE_DEP_REQUIRED || dep -> type == MODULE_DEP_OPTIONAL		18066	0		||			
ANR	18148	EqualityExpression	dep -> type == MODULE_DEP_REQUIRED		18066	0		==			
ANR	18149	PtrMemberAccess	dep -> type		18066	0					
ANR	18150	Identifier	dep		18066	0					
ANR	18151	Identifier	type		18066	1					
ANR	18152	Identifier	MODULE_DEP_REQUIRED		18066	1					
ANR	18153	EqualityExpression	dep -> type == MODULE_DEP_OPTIONAL		18066	1		==			
ANR	18154	PtrMemberAccess	dep -> type		18066	0					
ANR	18155	Identifier	dep		18066	0					
ANR	18156	Identifier	type		18066	1					
ANR	18157	Identifier	MODULE_DEP_OPTIONAL		18066	1					
ANR	18158	CompoundStatement		14:78:358:358	18066	1					
ANR	18159	ExpressionStatement	b2 = b1 + 1	1829:5:46835:46846	18066	0	True				
ANR	18160	AssignmentExpression	b2 = b1 + 1		18066	0		=			
ANR	18161	Identifier	b2		18066	0					
ANR	18162	AdditiveExpression	b1 + 1		18066	1		+			
ANR	18163	Identifier	b1		18066	0					
ANR	18164	PrimaryExpression	1		18066	1					
ANR	18165	WhileStatement	while ( b2 < end )		18066	1					
ANR	18166	Condition	b2 < end	1830:12:46860:46867	18066	0	True				
ANR	18167	RelationalExpression	b2 < end		18066	0		<			
ANR	18168	Identifier	b2		18066	0					
ANR	18169	Identifier	end		18066	1					
ANR	18170	CompoundStatement		16:22:400:400	18066	1					
ANR	18171	ExpressionStatement	r = ( zend_module_entry * ) ( * b2 ) -> pData	1831:6:46878:46914	18066	0	True				
ANR	18172	AssignmentExpression	r = ( zend_module_entry * ) ( * b2 ) -> pData		18066	0		=			
ANR	18173	Identifier	r		18066	0					
ANR	18174	CastExpression	( zend_module_entry * ) ( * b2 ) -> pData		18066	1					
ANR	18175	CastTarget	zend_module_entry *		18066	0					
ANR	18176	PtrMemberAccess	( * b2 ) -> pData		18066	1					
ANR	18177	UnaryOperationExpression	* b2		18066	0					
ANR	18178	UnaryOperator	*		18066	0					
ANR	18179	Identifier	b2		18066	1					
ANR	18180	Identifier	pData		18066	1					
ANR	18181	IfStatement	"if ( strcasecmp ( dep -> name , r -> name ) == 0 )"		18066	1					
ANR	18182	Condition	"strcasecmp ( dep -> name , r -> name ) == 0"	1832:10:46926:46960	18066	0	True				
ANR	18183	EqualityExpression	"strcasecmp ( dep -> name , r -> name ) == 0"		18066	0		==			
ANR	18184	CallExpression	"strcasecmp ( dep -> name , r -> name )"		18066	0					
ANR	18185	Callee	strcasecmp		18066	0					
ANR	18186	Identifier	strcasecmp		18066	0					
ANR	18187	ArgumentList	dep -> name		18066	1					
ANR	18188	Argument	dep -> name		18066	0					
ANR	18189	PtrMemberAccess	dep -> name		18066	0					
ANR	18190	Identifier	dep		18066	0					
ANR	18191	Identifier	name		18066	1					
ANR	18192	Argument	r -> name		18066	1					
ANR	18193	PtrMemberAccess	r -> name		18066	0					
ANR	18194	Identifier	r		18066	0					
ANR	18195	Identifier	name		18066	1					
ANR	18196	PrimaryExpression	0		18066	1					
ANR	18197	CompoundStatement		18:47:493:493	18066	1					
ANR	18198	ExpressionStatement	tmp = * b1	1833:7:46972:46981	18066	0	True				
ANR	18199	AssignmentExpression	tmp = * b1		18066	0		=			
ANR	18200	Identifier	tmp		18066	0					
ANR	18201	UnaryOperationExpression	* b1		18066	1					
ANR	18202	UnaryOperator	*		18066	0					
ANR	18203	Identifier	b1		18066	1					
ANR	18204	ExpressionStatement	* b1 = * b2	1834:7:46990:46999	18066	1	True				
ANR	18205	AssignmentExpression	* b1 = * b2		18066	0		=			
ANR	18206	UnaryOperationExpression	* b1		18066	0					
ANR	18207	UnaryOperator	*		18066	0					
ANR	18208	Identifier	b1		18066	1					
ANR	18209	UnaryOperationExpression	* b2		18066	1					
ANR	18210	UnaryOperator	*		18066	0					
ANR	18211	Identifier	b2		18066	1					
ANR	18212	ExpressionStatement	* b2 = tmp	1835:7:47008:47017	18066	2	True				
ANR	18213	AssignmentExpression	* b2 = tmp		18066	0		=			
ANR	18214	UnaryOperationExpression	* b2		18066	0					
ANR	18215	UnaryOperator	*		18066	0					
ANR	18216	Identifier	b2		18066	1					
ANR	18217	Identifier	tmp		18066	1					
ANR	18218	GotoStatement	goto try_again ;	1836:7:47026:47040	18066	3	True				
ANR	18219	Identifier	try_again		18066	0					
ANR	18220	ExpressionStatement	b2 ++	1838:6:47056:47060	18066	2	True				
ANR	18221	PostIncDecOperationExpression	b2 ++		18066	0					
ANR	18222	Identifier	b2		18066	0					
ANR	18223	IncDec	++		18066	1					
ANR	18224	ExpressionStatement	dep ++	1841:4:47079:47084	18066	1	True				
ANR	18225	PostIncDecOperationExpression	dep ++		18066	0					
ANR	18226	Identifier	dep		18066	0					
ANR	18227	IncDec	++		18066	1					
ANR	18228	ExpressionStatement	b1 ++	1844:2:47097:47101	18066	3	True				
ANR	18229	PostIncDecOperationExpression	b1 ++		18066	0					
ANR	18230	Identifier	b1		18066	0					
ANR	18231	IncDec	++		18066	1					
ANR	18232	ReturnType	static void		18066	1					
ANR	18233	Identifier	zend_sort_modules		18066	2					
ANR	18234	ParameterList	"void * base , size_t count , size_t siz , compare_func_t compare TSRMLS_DC"		18066	3					
ANR	18235	Parameter	void * base	1814:30:46387:46396	18066	0	True				
ANR	18236	ParameterType	void *		18066	0					
ANR	18237	Identifier	base		18066	1					
ANR	18238	Parameter	size_t count	1814:42:46399:46410	18066	1	True				
ANR	18239	ParameterType	size_t		18066	0					
ANR	18240	Identifier	count		18066	1					
ANR	18241	Parameter	size_t siz	1814:56:46413:46422	18066	2	True				
ANR	18242	ParameterType	size_t		18066	0					
ANR	18243	Identifier	siz		18066	1					
ANR	18244	Parameter	compare_func_t compare TSRMLS_DC	1814:68:46425:46456	18066	3	True				
ANR	18245	ParameterType	compare_func_t compare		18066	0					
ANR	18246	Identifier	TSRMLS_DC		18066	1					
ANR	18247	CFGEntryNode	ENTRY		18066		True				
ANR	18248	CFGExitNode	EXIT		18066		True				
ANR	18249	Symbol	* dep		18066						
ANR	18250	Symbol	TSRMLS_DC		18066						
ANR	18251	Symbol	m -> module_started		18066						
ANR	18252	Symbol	dep		18066						
ANR	18253	Symbol	b1		18066						
ANR	18254	Symbol	b2		18066						
ANR	18255	Symbol	* b2		18066						
ANR	18256	Symbol	tmp		18066						
ANR	18257	Symbol	* b1		18066						
ANR	18258	Symbol	end		18066						
ANR	18259	Symbol	MODULE_DEP_OPTIONAL		18066						
ANR	18260	Symbol	dep -> type		18066						
ANR	18261	Symbol	strcasecmp		18066						
ANR	18262	Symbol	MODULE_DEP_REQUIRED		18066						
ANR	18263	Symbol	m -> deps		18066						
ANR	18264	Symbol	siz		18066						
ANR	18265	Symbol	count		18066						
ANR	18266	Symbol	( * b1 ) -> pData		18066						
ANR	18267	Symbol	dep -> name		18066						
ANR	18268	Symbol	m		18066						
ANR	18269	Symbol	r		18066						
ANR	18270	Symbol	r -> name		18066						
ANR	18271	Symbol	* m		18066						
ANR	18272	Symbol	* * b1		18066						
ANR	18273	Symbol	( * b2 ) -> pData		18066						
ANR	18274	Symbol	* r		18066						
ANR	18275	Symbol	* * b2		18066						
ANR	18276	Symbol	base		18066						
ANR	18277	DeclStmt									
ANR	18278	Decl							HashPosition	HashPosition	pos
ANR	18279	DeclStmt									
ANR	18280	Decl							zend_module_entry	zend_module_entry *	module
ANR	18281	DeclStmt									
ANR	18282	Decl							int	int	startup_count
ANR	18283	DeclStmt									
ANR	18284	Decl							int	int	shutdown_count
ANR	18285	DeclStmt									
ANR	18286	Decl							int	int	post_deactivate_count
ANR	18287	DeclStmt									
ANR	18288	Decl							zend_class_entry	zend_class_entry * *	pce
ANR	18289	DeclStmt									
ANR	18290	Decl							int	int	class_count
ANR	18291	Function	zend_destroy_modules	1935:0:50128:50307							
ANR	18292	FunctionDef	zend_destroy_modules ()		18291	0					
ANR	18293	CompoundStatement		1936:0:50179:50307	18291	0					
ANR	18294	ExpressionStatement	free ( class_cleanup_handlers )	1937:1:50182:50210	18291	0	True				
ANR	18295	CallExpression	free ( class_cleanup_handlers )		18291	0					
ANR	18296	Callee	free		18291	0					
ANR	18297	Identifier	free		18291	0					
ANR	18298	ArgumentList	class_cleanup_handlers		18291	1					
ANR	18299	Argument	class_cleanup_handlers		18291	0					
ANR	18300	Identifier	class_cleanup_handlers		18291	0					
ANR	18301	ExpressionStatement	free ( module_request_startup_handlers )	1938:1:50213:50250	18291	1	True				
ANR	18302	CallExpression	free ( module_request_startup_handlers )		18291	0					
ANR	18303	Callee	free		18291	0					
ANR	18304	Identifier	free		18291	0					
ANR	18305	ArgumentList	module_request_startup_handlers		18291	1					
ANR	18306	Argument	module_request_startup_handlers		18291	0					
ANR	18307	Identifier	module_request_startup_handlers		18291	0					
ANR	18308	ExpressionStatement	zend_hash_graceful_reverse_destroy ( & module_registry )	1939:1:50253:50305	18291	2	True				
ANR	18309	CallExpression	zend_hash_graceful_reverse_destroy ( & module_registry )		18291	0					
ANR	18310	Callee	zend_hash_graceful_reverse_destroy		18291	0					
ANR	18311	Identifier	zend_hash_graceful_reverse_destroy		18291	0					
ANR	18312	ArgumentList	& module_registry		18291	1					
ANR	18313	Argument	& module_registry		18291	0					
ANR	18314	UnaryOperationExpression	& module_registry		18291	0					
ANR	18315	UnaryOperator	&		18291	0					
ANR	18316	Identifier	module_registry		18291	1					
ANR	18317	ReturnType	ZEND_API void		18291	1					
ANR	18318	Identifier	zend_destroy_modules		18291	2					
ANR	18319	ParameterList			18291	3					
ANR	18320	CFGEntryNode	ENTRY		18291		True				
ANR	18321	CFGExitNode	EXIT		18291		True				
ANR	18322	Symbol	class_cleanup_handlers		18291						
ANR	18323	Symbol	& module_registry		18291						
ANR	18324	Symbol	module_request_startup_handlers		18291						
ANR	18325	DeclStmt									
ANR	18326	Decl							int	int	name_len
ANR	18327	DeclStmt									
ANR	18328	Decl							char	char *	lcname
ANR	18329	DeclStmt									
ANR	18330	Decl							zend_module_entry	zend_module_entry *	module_ptr
ANR	18331	DeclStmt									
ANR	18332	Decl							const zend_module_dep	const zend_module_dep *	dep
ANR	18333	Function	zend_check_magic_method_implementation	2009:0:52178:56643							
ANR	18334	FunctionDef	"zend_check_magic_method_implementation (const zend_class_entry * ce , const zend_function * fptr , int error_type TSRMLS_DC)"		18333	0					
ANR	18335	CompoundStatement		2010:0:52322:56643	18333	0					
ANR	18336	IdentifierDeclStatement	char lcname [ 16 ] ;	2011:1:52325:52340	18333	0	True				
ANR	18337	IdentifierDecl	lcname [ 16 ]		18333	0					
ANR	18338	IdentifierDeclType	char [ 16 ]		18333	0					
ANR	18339	Identifier	lcname		18333	1					
ANR	18340	PrimaryExpression	16		18333	2					
ANR	18341	IdentifierDeclStatement	int name_len ;	2012:1:52343:52355	18333	1	True				
ANR	18342	IdentifierDecl	name_len		18333	0					
ANR	18343	IdentifierDeclType	int		18333	0					
ANR	18344	Identifier	name_len		18333	1					
ANR	18345	ExpressionStatement	name_len = strlen ( fptr -> common . function_name )	2016:1:52495:52540	18333	2	True				
ANR	18346	AssignmentExpression	name_len = strlen ( fptr -> common . function_name )		18333	0		=			
ANR	18347	Identifier	name_len		18333	0					
ANR	18348	CallExpression	strlen ( fptr -> common . function_name )		18333	1					
ANR	18349	Callee	strlen		18333	0					
ANR	18350	Identifier	strlen		18333	0					
ANR	18351	ArgumentList	fptr -> common . function_name		18333	1					
ANR	18352	Argument	fptr -> common . function_name		18333	0					
ANR	18353	MemberAccess	fptr -> common . function_name		18333	0					
ANR	18354	PtrMemberAccess	fptr -> common		18333	0					
ANR	18355	Identifier	fptr		18333	0					
ANR	18356	Identifier	common		18333	1					
ANR	18357	Identifier	function_name		18333	1					
ANR	18358	ExpressionStatement	"zend_str_tolower_copy ( lcname , fptr -> common . function_name , MIN ( name_len , sizeof ( lcname ) - 1 ) )"	2017:1:52543:52633	18333	3	True				
ANR	18359	CallExpression	"zend_str_tolower_copy ( lcname , fptr -> common . function_name , MIN ( name_len , sizeof ( lcname ) - 1 ) )"		18333	0					
ANR	18360	Callee	zend_str_tolower_copy		18333	0					
ANR	18361	Identifier	zend_str_tolower_copy		18333	0					
ANR	18362	ArgumentList	lcname		18333	1					
ANR	18363	Argument	lcname		18333	0					
ANR	18364	Identifier	lcname		18333	0					
ANR	18365	Argument	fptr -> common . function_name		18333	1					
ANR	18366	MemberAccess	fptr -> common . function_name		18333	0					
ANR	18367	PtrMemberAccess	fptr -> common		18333	0					
ANR	18368	Identifier	fptr		18333	0					
ANR	18369	Identifier	common		18333	1					
ANR	18370	Identifier	function_name		18333	1					
ANR	18371	Argument	"MIN ( name_len , sizeof ( lcname ) - 1 )"		18333	2					
ANR	18372	CallExpression	"MIN ( name_len , sizeof ( lcname ) - 1 )"		18333	0					
ANR	18373	Callee	MIN		18333	0					
ANR	18374	Identifier	MIN		18333	0					
ANR	18375	ArgumentList	name_len		18333	1					
ANR	18376	Argument	name_len		18333	0					
ANR	18377	Identifier	name_len		18333	0					
ANR	18378	Argument	sizeof ( lcname ) - 1		18333	1					
ANR	18379	AdditiveExpression	sizeof ( lcname ) - 1		18333	0		-			
ANR	18380	SizeofExpression	sizeof ( lcname )		18333	0					
ANR	18381	Sizeof	sizeof		18333	0					
ANR	18382	SizeofOperand	lcname		18333	1					
ANR	18383	PrimaryExpression	1		18333	1					
ANR	18384	ExpressionStatement	lcname [ sizeof ( lcname ) - 1 ] = '\\0'	2018:1:52636:52667	18333	4	True				
ANR	18385	AssignmentExpression	lcname [ sizeof ( lcname ) - 1 ] = '\\0'		18333	0		=			
ANR	18386	ArrayIndexing	lcname [ sizeof ( lcname ) - 1 ]		18333	0					
ANR	18387	Identifier	lcname		18333	0					
ANR	18388	AdditiveExpression	sizeof ( lcname ) - 1		18333	1		-			
ANR	18389	SizeofExpression	sizeof ( lcname )		18333	0					
ANR	18390	Sizeof	sizeof		18333	0					
ANR	18391	SizeofOperand	lcname		18333	1					
ANR	18392	PrimaryExpression	1		18333	1					
ANR	18393	PrimaryExpression	'\\0'		18333	1					
ANR	18394	IfStatement	"if ( name_len == sizeof ( ZEND_DESTRUCTOR_FUNC_NAME ) - 1 && ! memcmp ( lcname , ZEND_DESTRUCTOR_FUNC_NAME , sizeof ( ZEND_DESTRUCTOR_FUNC_NAME ) - 1 ) && fptr -> common . num_args != 0 )"		18333	5					
ANR	18395	Condition	"name_len == sizeof ( ZEND_DESTRUCTOR_FUNC_NAME ) - 1 && ! memcmp ( lcname , ZEND_DESTRUCTOR_FUNC_NAME , sizeof ( ZEND_DESTRUCTOR_FUNC_NAME ) - 1 ) && fptr -> common . num_args != 0"	2020:5:52739:52902	18333	0	True				
ANR	18396	AndExpression	"name_len == sizeof ( ZEND_DESTRUCTOR_FUNC_NAME ) - 1 && ! memcmp ( lcname , ZEND_DESTRUCTOR_FUNC_NAME , sizeof ( ZEND_DESTRUCTOR_FUNC_NAME ) - 1 ) && fptr -> common . num_args != 0"		18333	0		&&			
ANR	18397	EqualityExpression	name_len == sizeof ( ZEND_DESTRUCTOR_FUNC_NAME ) - 1		18333	0		==			
ANR	18398	Identifier	name_len		18333	0					
ANR	18399	AdditiveExpression	sizeof ( ZEND_DESTRUCTOR_FUNC_NAME ) - 1		18333	1		-			
ANR	18400	SizeofExpression	sizeof ( ZEND_DESTRUCTOR_FUNC_NAME )		18333	0					
ANR	18401	Sizeof	sizeof		18333	0					
ANR	18402	SizeofOperand	ZEND_DESTRUCTOR_FUNC_NAME		18333	1					
ANR	18403	PrimaryExpression	1		18333	1					
ANR	18404	AndExpression	"! memcmp ( lcname , ZEND_DESTRUCTOR_FUNC_NAME , sizeof ( ZEND_DESTRUCTOR_FUNC_NAME ) - 1 ) && fptr -> common . num_args != 0"		18333	1		&&			
ANR	18405	UnaryOperationExpression	"! memcmp ( lcname , ZEND_DESTRUCTOR_FUNC_NAME , sizeof ( ZEND_DESTRUCTOR_FUNC_NAME ) - 1 )"		18333	0					
ANR	18406	UnaryOperator	!		18333	0					
ANR	18407	CallExpression	"memcmp ( lcname , ZEND_DESTRUCTOR_FUNC_NAME , sizeof ( ZEND_DESTRUCTOR_FUNC_NAME ) - 1 )"		18333	1					
ANR	18408	Callee	memcmp		18333	0					
ANR	18409	Identifier	memcmp		18333	0					
ANR	18410	ArgumentList	lcname		18333	1					
ANR	18411	Argument	lcname		18333	0					
ANR	18412	Identifier	lcname		18333	0					
ANR	18413	Argument	ZEND_DESTRUCTOR_FUNC_NAME		18333	1					
ANR	18414	Identifier	ZEND_DESTRUCTOR_FUNC_NAME		18333	0					
ANR	18415	Argument	sizeof ( ZEND_DESTRUCTOR_FUNC_NAME ) - 1		18333	2					
ANR	18416	AdditiveExpression	sizeof ( ZEND_DESTRUCTOR_FUNC_NAME ) - 1		18333	0		-			
ANR	18417	SizeofExpression	sizeof ( ZEND_DESTRUCTOR_FUNC_NAME )		18333	0					
ANR	18418	Sizeof	sizeof		18333	0					
ANR	18419	SizeofOperand	ZEND_DESTRUCTOR_FUNC_NAME		18333	1					
ANR	18420	PrimaryExpression	1		18333	1					
ANR	18421	EqualityExpression	fptr -> common . num_args != 0		18333	1		!=			
ANR	18422	MemberAccess	fptr -> common . num_args		18333	0					
ANR	18423	PtrMemberAccess	fptr -> common		18333	0					
ANR	18424	Identifier	fptr		18333	0					
ANR	18425	Identifier	common		18333	1					
ANR	18426	Identifier	num_args		18333	1					
ANR	18427	PrimaryExpression	0		18333	1					
ANR	18428	CompoundStatement		11:171:582:582	18333	1					
ANR	18429	ExpressionStatement	"zend_error ( error_type , ""Destructor %s::%s() cannot take arguments"" , ce -> name , ZEND_DESTRUCTOR_FUNC_NAME )"	2021:2:52909:53013	18333	0	True				
ANR	18430	CallExpression	"zend_error ( error_type , ""Destructor %s::%s() cannot take arguments"" , ce -> name , ZEND_DESTRUCTOR_FUNC_NAME )"		18333	0					
ANR	18431	Callee	zend_error		18333	0					
ANR	18432	Identifier	zend_error		18333	0					
ANR	18433	ArgumentList	error_type		18333	1					
ANR	18434	Argument	error_type		18333	0					
ANR	18435	Identifier	error_type		18333	0					
ANR	18436	Argument	"""Destructor %s::%s() cannot take arguments"""		18333	1					
ANR	18437	PrimaryExpression	"""Destructor %s::%s() cannot take arguments"""		18333	0					
ANR	18438	Argument	ce -> name		18333	2					
ANR	18439	PtrMemberAccess	ce -> name		18333	0					
ANR	18440	Identifier	ce		18333	0					
ANR	18441	Identifier	name		18333	1					
ANR	18442	Argument	ZEND_DESTRUCTOR_FUNC_NAME		18333	3					
ANR	18443	Identifier	ZEND_DESTRUCTOR_FUNC_NAME		18333	0					
ANR	18444	ElseStatement	else		18333	0					
ANR	18445	IfStatement	"if ( name_len == sizeof ( ZEND_CLONE_FUNC_NAME ) - 1 && ! memcmp ( lcname , ZEND_CLONE_FUNC_NAME , sizeof ( ZEND_CLONE_FUNC_NAME ) - 1 ) && fptr -> common . num_args != 0 )"		18333	0					
ANR	18446	Condition	"name_len == sizeof ( ZEND_CLONE_FUNC_NAME ) - 1 && ! memcmp ( lcname , ZEND_CLONE_FUNC_NAME , sizeof ( ZEND_CLONE_FUNC_NAME ) - 1 ) && fptr -> common . num_args != 0"	2022:12:53027:53175	18333	0	True				
ANR	18447	AndExpression	"name_len == sizeof ( ZEND_CLONE_FUNC_NAME ) - 1 && ! memcmp ( lcname , ZEND_CLONE_FUNC_NAME , sizeof ( ZEND_CLONE_FUNC_NAME ) - 1 ) && fptr -> common . num_args != 0"		18333	0		&&			
ANR	18448	EqualityExpression	name_len == sizeof ( ZEND_CLONE_FUNC_NAME ) - 1		18333	0		==			
ANR	18449	Identifier	name_len		18333	0					
ANR	18450	AdditiveExpression	sizeof ( ZEND_CLONE_FUNC_NAME ) - 1		18333	1		-			
ANR	18451	SizeofExpression	sizeof ( ZEND_CLONE_FUNC_NAME )		18333	0					
ANR	18452	Sizeof	sizeof		18333	0					
ANR	18453	SizeofOperand	ZEND_CLONE_FUNC_NAME		18333	1					
ANR	18454	PrimaryExpression	1		18333	1					
ANR	18455	AndExpression	"! memcmp ( lcname , ZEND_CLONE_FUNC_NAME , sizeof ( ZEND_CLONE_FUNC_NAME ) - 1 ) && fptr -> common . num_args != 0"		18333	1		&&			
ANR	18456	UnaryOperationExpression	"! memcmp ( lcname , ZEND_CLONE_FUNC_NAME , sizeof ( ZEND_CLONE_FUNC_NAME ) - 1 )"		18333	0					
ANR	18457	UnaryOperator	!		18333	0					
ANR	18458	CallExpression	"memcmp ( lcname , ZEND_CLONE_FUNC_NAME , sizeof ( ZEND_CLONE_FUNC_NAME ) - 1 )"		18333	1					
ANR	18459	Callee	memcmp		18333	0					
ANR	18460	Identifier	memcmp		18333	0					
ANR	18461	ArgumentList	lcname		18333	1					
ANR	18462	Argument	lcname		18333	0					
ANR	18463	Identifier	lcname		18333	0					
ANR	18464	Argument	ZEND_CLONE_FUNC_NAME		18333	1					
ANR	18465	Identifier	ZEND_CLONE_FUNC_NAME		18333	0					
ANR	18466	Argument	sizeof ( ZEND_CLONE_FUNC_NAME ) - 1		18333	2					
ANR	18467	AdditiveExpression	sizeof ( ZEND_CLONE_FUNC_NAME ) - 1		18333	0		-			
ANR	18468	SizeofExpression	sizeof ( ZEND_CLONE_FUNC_NAME )		18333	0					
ANR	18469	Sizeof	sizeof		18333	0					
ANR	18470	SizeofOperand	ZEND_CLONE_FUNC_NAME		18333	1					
ANR	18471	PrimaryExpression	1		18333	1					
ANR	18472	EqualityExpression	fptr -> common . num_args != 0		18333	1		!=			
ANR	18473	MemberAccess	fptr -> common . num_args		18333	0					
ANR	18474	PtrMemberAccess	fptr -> common		18333	0					
ANR	18475	Identifier	fptr		18333	0					
ANR	18476	Identifier	common		18333	1					
ANR	18477	Identifier	num_args		18333	1					
ANR	18478	PrimaryExpression	0		18333	1					
ANR	18479	CompoundStatement		13:163:855:855	18333	1					
ANR	18480	ExpressionStatement	"zend_error ( error_type , ""Method %s::%s() cannot accept any arguments"" , ce -> name , ZEND_CLONE_FUNC_NAME )"	2023:2:53182:53283	18333	0	True				
ANR	18481	CallExpression	"zend_error ( error_type , ""Method %s::%s() cannot accept any arguments"" , ce -> name , ZEND_CLONE_FUNC_NAME )"		18333	0					
ANR	18482	Callee	zend_error		18333	0					
ANR	18483	Identifier	zend_error		18333	0					
ANR	18484	ArgumentList	error_type		18333	1					
ANR	18485	Argument	error_type		18333	0					
ANR	18486	Identifier	error_type		18333	0					
ANR	18487	Argument	"""Method %s::%s() cannot accept any arguments"""		18333	1					
ANR	18488	PrimaryExpression	"""Method %s::%s() cannot accept any arguments"""		18333	0					
ANR	18489	Argument	ce -> name		18333	2					
ANR	18490	PtrMemberAccess	ce -> name		18333	0					
ANR	18491	Identifier	ce		18333	0					
ANR	18492	Identifier	name		18333	1					
ANR	18493	Argument	ZEND_CLONE_FUNC_NAME		18333	3					
ANR	18494	Identifier	ZEND_CLONE_FUNC_NAME		18333	0					
ANR	18495	ElseStatement	else		18333	0					
ANR	18496	IfStatement	"if ( name_len == sizeof ( ZEND_GET_FUNC_NAME ) - 1 && ! memcmp ( lcname , ZEND_GET_FUNC_NAME , sizeof ( ZEND_GET_FUNC_NAME ) - 1 ) )"		18333	0					
ANR	18497	Condition	"name_len == sizeof ( ZEND_GET_FUNC_NAME ) - 1 && ! memcmp ( lcname , ZEND_GET_FUNC_NAME , sizeof ( ZEND_GET_FUNC_NAME ) - 1 )"	2024:12:53297:53409	18333	0	True				
ANR	18498	AndExpression	"name_len == sizeof ( ZEND_GET_FUNC_NAME ) - 1 && ! memcmp ( lcname , ZEND_GET_FUNC_NAME , sizeof ( ZEND_GET_FUNC_NAME ) - 1 )"		18333	0		&&			
ANR	18499	EqualityExpression	name_len == sizeof ( ZEND_GET_FUNC_NAME ) - 1		18333	0		==			
ANR	18500	Identifier	name_len		18333	0					
ANR	18501	AdditiveExpression	sizeof ( ZEND_GET_FUNC_NAME ) - 1		18333	1		-			
ANR	18502	SizeofExpression	sizeof ( ZEND_GET_FUNC_NAME )		18333	0					
ANR	18503	Sizeof	sizeof		18333	0					
ANR	18504	SizeofOperand	ZEND_GET_FUNC_NAME		18333	1					
ANR	18505	PrimaryExpression	1		18333	1					
ANR	18506	UnaryOperationExpression	"! memcmp ( lcname , ZEND_GET_FUNC_NAME , sizeof ( ZEND_GET_FUNC_NAME ) - 1 )"		18333	1					
ANR	18507	UnaryOperator	!		18333	0					
ANR	18508	CallExpression	"memcmp ( lcname , ZEND_GET_FUNC_NAME , sizeof ( ZEND_GET_FUNC_NAME ) - 1 )"		18333	1					
ANR	18509	Callee	memcmp		18333	0					
ANR	18510	Identifier	memcmp		18333	0					
ANR	18511	ArgumentList	lcname		18333	1					
ANR	18512	Argument	lcname		18333	0					
ANR	18513	Identifier	lcname		18333	0					
ANR	18514	Argument	ZEND_GET_FUNC_NAME		18333	1					
ANR	18515	Identifier	ZEND_GET_FUNC_NAME		18333	0					
ANR	18516	Argument	sizeof ( ZEND_GET_FUNC_NAME ) - 1		18333	2					
ANR	18517	AdditiveExpression	sizeof ( ZEND_GET_FUNC_NAME ) - 1		18333	0		-			
ANR	18518	SizeofExpression	sizeof ( ZEND_GET_FUNC_NAME )		18333	0					
ANR	18519	Sizeof	sizeof		18333	0					
ANR	18520	SizeofOperand	ZEND_GET_FUNC_NAME		18333	1					
ANR	18521	PrimaryExpression	1		18333	1					
ANR	18522	CompoundStatement		15:127:1089:1089	18333	1					
ANR	18523	IfStatement	if ( fptr -> common . num_args != 1 )		18333	0					
ANR	18524	Condition	fptr -> common . num_args != 1	2025:6:53420:53445	18333	0	True				
ANR	18525	EqualityExpression	fptr -> common . num_args != 1		18333	0		!=			
ANR	18526	MemberAccess	fptr -> common . num_args		18333	0					
ANR	18527	PtrMemberAccess	fptr -> common		18333	0					
ANR	18528	Identifier	fptr		18333	0					
ANR	18529	Identifier	common		18333	1					
ANR	18530	Identifier	num_args		18333	1					
ANR	18531	PrimaryExpression	1		18333	1					
ANR	18532	CompoundStatement		16:34:1125:1125	18333	1					
ANR	18533	ExpressionStatement	"zend_error ( error_type , ""Method %s::%s() must take exactly 1 argument"" , ce -> name , ZEND_GET_FUNC_NAME )"	2026:3:53453:53553	18333	0	True				
ANR	18534	CallExpression	"zend_error ( error_type , ""Method %s::%s() must take exactly 1 argument"" , ce -> name , ZEND_GET_FUNC_NAME )"		18333	0					
ANR	18535	Callee	zend_error		18333	0					
ANR	18536	Identifier	zend_error		18333	0					
ANR	18537	ArgumentList	error_type		18333	1					
ANR	18538	Argument	error_type		18333	0					
ANR	18539	Identifier	error_type		18333	0					
ANR	18540	Argument	"""Method %s::%s() must take exactly 1 argument"""		18333	1					
ANR	18541	PrimaryExpression	"""Method %s::%s() must take exactly 1 argument"""		18333	0					
ANR	18542	Argument	ce -> name		18333	2					
ANR	18543	PtrMemberAccess	ce -> name		18333	0					
ANR	18544	Identifier	ce		18333	0					
ANR	18545	Identifier	name		18333	1					
ANR	18546	Argument	ZEND_GET_FUNC_NAME		18333	3					
ANR	18547	Identifier	ZEND_GET_FUNC_NAME		18333	0					
ANR	18548	ElseStatement	else		18333	0					
ANR	18549	IfStatement	"if ( ARG_SHOULD_BE_SENT_BY_REF ( fptr , 1 ) )"		18333	0					
ANR	18550	Condition	"ARG_SHOULD_BE_SENT_BY_REF ( fptr , 1 )"	2027:13:53568:53601	18333	0	True				
ANR	18551	CallExpression	"ARG_SHOULD_BE_SENT_BY_REF ( fptr , 1 )"		18333	0					
ANR	18552	Callee	ARG_SHOULD_BE_SENT_BY_REF		18333	0					
ANR	18553	Identifier	ARG_SHOULD_BE_SENT_BY_REF		18333	0					
ANR	18554	ArgumentList	fptr		18333	1					
ANR	18555	Argument	fptr		18333	0					
ANR	18556	Identifier	fptr		18333	0					
ANR	18557	Argument	1		18333	1					
ANR	18558	PrimaryExpression	1		18333	0					
ANR	18559	CompoundStatement		18:49:1281:1281	18333	1					
ANR	18560	ExpressionStatement	"zend_error ( error_type , ""Method %s::%s() cannot take arguments by reference"" , ce -> name , ZEND_GET_FUNC_NAME )"	2028:3:53609:53715	18333	0	True				
ANR	18561	CallExpression	"zend_error ( error_type , ""Method %s::%s() cannot take arguments by reference"" , ce -> name , ZEND_GET_FUNC_NAME )"		18333	0					
ANR	18562	Callee	zend_error		18333	0					
ANR	18563	Identifier	zend_error		18333	0					
ANR	18564	ArgumentList	error_type		18333	1					
ANR	18565	Argument	error_type		18333	0					
ANR	18566	Identifier	error_type		18333	0					
ANR	18567	Argument	"""Method %s::%s() cannot take arguments by reference"""		18333	1					
ANR	18568	PrimaryExpression	"""Method %s::%s() cannot take arguments by reference"""		18333	0					
ANR	18569	Argument	ce -> name		18333	2					
ANR	18570	PtrMemberAccess	ce -> name		18333	0					
ANR	18571	Identifier	ce		18333	0					
ANR	18572	Identifier	name		18333	1					
ANR	18573	Argument	ZEND_GET_FUNC_NAME		18333	3					
ANR	18574	Identifier	ZEND_GET_FUNC_NAME		18333	0					
ANR	18575	ElseStatement	else		18333	0					
ANR	18576	IfStatement	"if ( name_len == sizeof ( ZEND_SET_FUNC_NAME ) - 1 && ! memcmp ( lcname , ZEND_SET_FUNC_NAME , sizeof ( ZEND_SET_FUNC_NAME ) - 1 ) )"		18333	0					
ANR	18577	Condition	"name_len == sizeof ( ZEND_SET_FUNC_NAME ) - 1 && ! memcmp ( lcname , ZEND_SET_FUNC_NAME , sizeof ( ZEND_SET_FUNC_NAME ) - 1 )"	2030:12:53733:53845	18333	0	True				
ANR	18578	AndExpression	"name_len == sizeof ( ZEND_SET_FUNC_NAME ) - 1 && ! memcmp ( lcname , ZEND_SET_FUNC_NAME , sizeof ( ZEND_SET_FUNC_NAME ) - 1 )"		18333	0		&&			
ANR	18579	EqualityExpression	name_len == sizeof ( ZEND_SET_FUNC_NAME ) - 1		18333	0		==			
ANR	18580	Identifier	name_len		18333	0					
ANR	18581	AdditiveExpression	sizeof ( ZEND_SET_FUNC_NAME ) - 1		18333	1		-			
ANR	18582	SizeofExpression	sizeof ( ZEND_SET_FUNC_NAME )		18333	0					
ANR	18583	Sizeof	sizeof		18333	0					
ANR	18584	SizeofOperand	ZEND_SET_FUNC_NAME		18333	1					
ANR	18585	PrimaryExpression	1		18333	1					
ANR	18586	UnaryOperationExpression	"! memcmp ( lcname , ZEND_SET_FUNC_NAME , sizeof ( ZEND_SET_FUNC_NAME ) - 1 )"		18333	1					
ANR	18587	UnaryOperator	!		18333	0					
ANR	18588	CallExpression	"memcmp ( lcname , ZEND_SET_FUNC_NAME , sizeof ( ZEND_SET_FUNC_NAME ) - 1 )"		18333	1					
ANR	18589	Callee	memcmp		18333	0					
ANR	18590	Identifier	memcmp		18333	0					
ANR	18591	ArgumentList	lcname		18333	1					
ANR	18592	Argument	lcname		18333	0					
ANR	18593	Identifier	lcname		18333	0					
ANR	18594	Argument	ZEND_SET_FUNC_NAME		18333	1					
ANR	18595	Identifier	ZEND_SET_FUNC_NAME		18333	0					
ANR	18596	Argument	sizeof ( ZEND_SET_FUNC_NAME ) - 1		18333	2					
ANR	18597	AdditiveExpression	sizeof ( ZEND_SET_FUNC_NAME ) - 1		18333	0		-			
ANR	18598	SizeofExpression	sizeof ( ZEND_SET_FUNC_NAME )		18333	0					
ANR	18599	Sizeof	sizeof		18333	0					
ANR	18600	SizeofOperand	ZEND_SET_FUNC_NAME		18333	1					
ANR	18601	PrimaryExpression	1		18333	1					
ANR	18602	CompoundStatement		21:127:1525:1525	18333	1					
ANR	18603	IfStatement	if ( fptr -> common . num_args != 2 )		18333	0					
ANR	18604	Condition	fptr -> common . num_args != 2	2031:6:53856:53881	18333	0	True				
ANR	18605	EqualityExpression	fptr -> common . num_args != 2		18333	0		!=			
ANR	18606	MemberAccess	fptr -> common . num_args		18333	0					
ANR	18607	PtrMemberAccess	fptr -> common		18333	0					
ANR	18608	Identifier	fptr		18333	0					
ANR	18609	Identifier	common		18333	1					
ANR	18610	Identifier	num_args		18333	1					
ANR	18611	PrimaryExpression	2		18333	1					
ANR	18612	CompoundStatement		22:34:1561:1561	18333	1					
ANR	18613	ExpressionStatement	"zend_error ( error_type , ""Method %s::%s() must take exactly 2 arguments"" , ce -> name , ZEND_SET_FUNC_NAME )"	2032:3:53889:53990	18333	0	True				
ANR	18614	CallExpression	"zend_error ( error_type , ""Method %s::%s() must take exactly 2 arguments"" , ce -> name , ZEND_SET_FUNC_NAME )"		18333	0					
ANR	18615	Callee	zend_error		18333	0					
ANR	18616	Identifier	zend_error		18333	0					
ANR	18617	ArgumentList	error_type		18333	1					
ANR	18618	Argument	error_type		18333	0					
ANR	18619	Identifier	error_type		18333	0					
ANR	18620	Argument	"""Method %s::%s() must take exactly 2 arguments"""		18333	1					
ANR	18621	PrimaryExpression	"""Method %s::%s() must take exactly 2 arguments"""		18333	0					
ANR	18622	Argument	ce -> name		18333	2					
ANR	18623	PtrMemberAccess	ce -> name		18333	0					
ANR	18624	Identifier	ce		18333	0					
ANR	18625	Identifier	name		18333	1					
ANR	18626	Argument	ZEND_SET_FUNC_NAME		18333	3					
ANR	18627	Identifier	ZEND_SET_FUNC_NAME		18333	0					
ANR	18628	ElseStatement	else		18333	0					
ANR	18629	IfStatement	"if ( ARG_SHOULD_BE_SENT_BY_REF ( fptr , 1 ) || ARG_SHOULD_BE_SENT_BY_REF ( fptr , 2 ) )"		18333	0					
ANR	18630	Condition	"ARG_SHOULD_BE_SENT_BY_REF ( fptr , 1 ) || ARG_SHOULD_BE_SENT_BY_REF ( fptr , 2 )"	2033:13:54005:54076	18333	0	True				
ANR	18631	OrExpression	"ARG_SHOULD_BE_SENT_BY_REF ( fptr , 1 ) || ARG_SHOULD_BE_SENT_BY_REF ( fptr , 2 )"		18333	0		||			
ANR	18632	CallExpression	"ARG_SHOULD_BE_SENT_BY_REF ( fptr , 1 )"		18333	0					
ANR	18633	Callee	ARG_SHOULD_BE_SENT_BY_REF		18333	0					
ANR	18634	Identifier	ARG_SHOULD_BE_SENT_BY_REF		18333	0					
ANR	18635	ArgumentList	fptr		18333	1					
ANR	18636	Argument	fptr		18333	0					
ANR	18637	Identifier	fptr		18333	0					
ANR	18638	Argument	1		18333	1					
ANR	18639	PrimaryExpression	1		18333	0					
ANR	18640	CallExpression	"ARG_SHOULD_BE_SENT_BY_REF ( fptr , 2 )"		18333	1					
ANR	18641	Callee	ARG_SHOULD_BE_SENT_BY_REF		18333	0					
ANR	18642	Identifier	ARG_SHOULD_BE_SENT_BY_REF		18333	0					
ANR	18643	ArgumentList	fptr		18333	1					
ANR	18644	Argument	fptr		18333	0					
ANR	18645	Identifier	fptr		18333	0					
ANR	18646	Argument	2		18333	1					
ANR	18647	PrimaryExpression	2		18333	0					
ANR	18648	CompoundStatement		24:87:1756:1756	18333	1					
ANR	18649	ExpressionStatement	"zend_error ( error_type , ""Method %s::%s() cannot take arguments by reference"" , ce -> name , ZEND_SET_FUNC_NAME )"	2034:3:54084:54190	18333	0	True				
ANR	18650	CallExpression	"zend_error ( error_type , ""Method %s::%s() cannot take arguments by reference"" , ce -> name , ZEND_SET_FUNC_NAME )"		18333	0					
ANR	18651	Callee	zend_error		18333	0					
ANR	18652	Identifier	zend_error		18333	0					
ANR	18653	ArgumentList	error_type		18333	1					
ANR	18654	Argument	error_type		18333	0					
ANR	18655	Identifier	error_type		18333	0					
ANR	18656	Argument	"""Method %s::%s() cannot take arguments by reference"""		18333	1					
ANR	18657	PrimaryExpression	"""Method %s::%s() cannot take arguments by reference"""		18333	0					
ANR	18658	Argument	ce -> name		18333	2					
ANR	18659	PtrMemberAccess	ce -> name		18333	0					
ANR	18660	Identifier	ce		18333	0					
ANR	18661	Identifier	name		18333	1					
ANR	18662	Argument	ZEND_SET_FUNC_NAME		18333	3					
ANR	18663	Identifier	ZEND_SET_FUNC_NAME		18333	0					
ANR	18664	ElseStatement	else		18333	0					
ANR	18665	IfStatement	"if ( name_len == sizeof ( ZEND_UNSET_FUNC_NAME ) - 1 && ! memcmp ( lcname , ZEND_UNSET_FUNC_NAME , sizeof ( ZEND_UNSET_FUNC_NAME ) - 1 ) )"		18333	0					
ANR	18666	Condition	"name_len == sizeof ( ZEND_UNSET_FUNC_NAME ) - 1 && ! memcmp ( lcname , ZEND_UNSET_FUNC_NAME , sizeof ( ZEND_UNSET_FUNC_NAME ) - 1 )"	2036:12:54208:54326	18333	0	True				
ANR	18667	AndExpression	"name_len == sizeof ( ZEND_UNSET_FUNC_NAME ) - 1 && ! memcmp ( lcname , ZEND_UNSET_FUNC_NAME , sizeof ( ZEND_UNSET_FUNC_NAME ) - 1 )"		18333	0		&&			
ANR	18668	EqualityExpression	name_len == sizeof ( ZEND_UNSET_FUNC_NAME ) - 1		18333	0		==			
ANR	18669	Identifier	name_len		18333	0					
ANR	18670	AdditiveExpression	sizeof ( ZEND_UNSET_FUNC_NAME ) - 1		18333	1		-			
ANR	18671	SizeofExpression	sizeof ( ZEND_UNSET_FUNC_NAME )		18333	0					
ANR	18672	Sizeof	sizeof		18333	0					
ANR	18673	SizeofOperand	ZEND_UNSET_FUNC_NAME		18333	1					
ANR	18674	PrimaryExpression	1		18333	1					
ANR	18675	UnaryOperationExpression	"! memcmp ( lcname , ZEND_UNSET_FUNC_NAME , sizeof ( ZEND_UNSET_FUNC_NAME ) - 1 )"		18333	1					
ANR	18676	UnaryOperator	!		18333	0					
ANR	18677	CallExpression	"memcmp ( lcname , ZEND_UNSET_FUNC_NAME , sizeof ( ZEND_UNSET_FUNC_NAME ) - 1 )"		18333	1					
ANR	18678	Callee	memcmp		18333	0					
ANR	18679	Identifier	memcmp		18333	0					
ANR	18680	ArgumentList	lcname		18333	1					
ANR	18681	Argument	lcname		18333	0					
ANR	18682	Identifier	lcname		18333	0					
ANR	18683	Argument	ZEND_UNSET_FUNC_NAME		18333	1					
ANR	18684	Identifier	ZEND_UNSET_FUNC_NAME		18333	0					
ANR	18685	Argument	sizeof ( ZEND_UNSET_FUNC_NAME ) - 1		18333	2					
ANR	18686	AdditiveExpression	sizeof ( ZEND_UNSET_FUNC_NAME ) - 1		18333	0		-			
ANR	18687	SizeofExpression	sizeof ( ZEND_UNSET_FUNC_NAME )		18333	0					
ANR	18688	Sizeof	sizeof		18333	0					
ANR	18689	SizeofOperand	ZEND_UNSET_FUNC_NAME		18333	1					
ANR	18690	PrimaryExpression	1		18333	1					
ANR	18691	CompoundStatement		27:133:2006:2006	18333	1					
ANR	18692	IfStatement	if ( fptr -> common . num_args != 1 )		18333	0					
ANR	18693	Condition	fptr -> common . num_args != 1	2037:6:54337:54362	18333	0	True				
ANR	18694	EqualityExpression	fptr -> common . num_args != 1		18333	0		!=			
ANR	18695	MemberAccess	fptr -> common . num_args		18333	0					
ANR	18696	PtrMemberAccess	fptr -> common		18333	0					
ANR	18697	Identifier	fptr		18333	0					
ANR	18698	Identifier	common		18333	1					
ANR	18699	Identifier	num_args		18333	1					
ANR	18700	PrimaryExpression	1		18333	1					
ANR	18701	CompoundStatement		28:34:2042:2042	18333	1					
ANR	18702	ExpressionStatement	"zend_error ( error_type , ""Method %s::%s() must take exactly 1 argument"" , ce -> name , ZEND_UNSET_FUNC_NAME )"	2038:3:54370:54472	18333	0	True				
ANR	18703	CallExpression	"zend_error ( error_type , ""Method %s::%s() must take exactly 1 argument"" , ce -> name , ZEND_UNSET_FUNC_NAME )"		18333	0					
ANR	18704	Callee	zend_error		18333	0					
ANR	18705	Identifier	zend_error		18333	0					
ANR	18706	ArgumentList	error_type		18333	1					
ANR	18707	Argument	error_type		18333	0					
ANR	18708	Identifier	error_type		18333	0					
ANR	18709	Argument	"""Method %s::%s() must take exactly 1 argument"""		18333	1					
ANR	18710	PrimaryExpression	"""Method %s::%s() must take exactly 1 argument"""		18333	0					
ANR	18711	Argument	ce -> name		18333	2					
ANR	18712	PtrMemberAccess	ce -> name		18333	0					
ANR	18713	Identifier	ce		18333	0					
ANR	18714	Identifier	name		18333	1					
ANR	18715	Argument	ZEND_UNSET_FUNC_NAME		18333	3					
ANR	18716	Identifier	ZEND_UNSET_FUNC_NAME		18333	0					
ANR	18717	ElseStatement	else		18333	0					
ANR	18718	IfStatement	"if ( ARG_SHOULD_BE_SENT_BY_REF ( fptr , 1 ) )"		18333	0					
ANR	18719	Condition	"ARG_SHOULD_BE_SENT_BY_REF ( fptr , 1 )"	2039:13:54487:54520	18333	0	True				
ANR	18720	CallExpression	"ARG_SHOULD_BE_SENT_BY_REF ( fptr , 1 )"		18333	0					
ANR	18721	Callee	ARG_SHOULD_BE_SENT_BY_REF		18333	0					
ANR	18722	Identifier	ARG_SHOULD_BE_SENT_BY_REF		18333	0					
ANR	18723	ArgumentList	fptr		18333	1					
ANR	18724	Argument	fptr		18333	0					
ANR	18725	Identifier	fptr		18333	0					
ANR	18726	Argument	1		18333	1					
ANR	18727	PrimaryExpression	1		18333	0					
ANR	18728	CompoundStatement		30:49:2200:2200	18333	1					
ANR	18729	ExpressionStatement	"zend_error ( error_type , ""Method %s::%s() cannot take arguments by reference"" , ce -> name , ZEND_UNSET_FUNC_NAME )"	2040:3:54528:54636	18333	0	True				
ANR	18730	CallExpression	"zend_error ( error_type , ""Method %s::%s() cannot take arguments by reference"" , ce -> name , ZEND_UNSET_FUNC_NAME )"		18333	0					
ANR	18731	Callee	zend_error		18333	0					
ANR	18732	Identifier	zend_error		18333	0					
ANR	18733	ArgumentList	error_type		18333	1					
ANR	18734	Argument	error_type		18333	0					
ANR	18735	Identifier	error_type		18333	0					
ANR	18736	Argument	"""Method %s::%s() cannot take arguments by reference"""		18333	1					
ANR	18737	PrimaryExpression	"""Method %s::%s() cannot take arguments by reference"""		18333	0					
ANR	18738	Argument	ce -> name		18333	2					
ANR	18739	PtrMemberAccess	ce -> name		18333	0					
ANR	18740	Identifier	ce		18333	0					
ANR	18741	Identifier	name		18333	1					
ANR	18742	Argument	ZEND_UNSET_FUNC_NAME		18333	3					
ANR	18743	Identifier	ZEND_UNSET_FUNC_NAME		18333	0					
ANR	18744	ElseStatement	else		18333	0					
ANR	18745	IfStatement	"if ( name_len == sizeof ( ZEND_ISSET_FUNC_NAME ) - 1 && ! memcmp ( lcname , ZEND_ISSET_FUNC_NAME , sizeof ( ZEND_ISSET_FUNC_NAME ) - 1 ) )"		18333	0					
ANR	18746	Condition	"name_len == sizeof ( ZEND_ISSET_FUNC_NAME ) - 1 && ! memcmp ( lcname , ZEND_ISSET_FUNC_NAME , sizeof ( ZEND_ISSET_FUNC_NAME ) - 1 )"	2042:12:54654:54772	18333	0	True				
ANR	18747	AndExpression	"name_len == sizeof ( ZEND_ISSET_FUNC_NAME ) - 1 && ! memcmp ( lcname , ZEND_ISSET_FUNC_NAME , sizeof ( ZEND_ISSET_FUNC_NAME ) - 1 )"		18333	0		&&			
ANR	18748	EqualityExpression	name_len == sizeof ( ZEND_ISSET_FUNC_NAME ) - 1		18333	0		==			
ANR	18749	Identifier	name_len		18333	0					
ANR	18750	AdditiveExpression	sizeof ( ZEND_ISSET_FUNC_NAME ) - 1		18333	1		-			
ANR	18751	SizeofExpression	sizeof ( ZEND_ISSET_FUNC_NAME )		18333	0					
ANR	18752	Sizeof	sizeof		18333	0					
ANR	18753	SizeofOperand	ZEND_ISSET_FUNC_NAME		18333	1					
ANR	18754	PrimaryExpression	1		18333	1					
ANR	18755	UnaryOperationExpression	"! memcmp ( lcname , ZEND_ISSET_FUNC_NAME , sizeof ( ZEND_ISSET_FUNC_NAME ) - 1 )"		18333	1					
ANR	18756	UnaryOperator	!		18333	0					
ANR	18757	CallExpression	"memcmp ( lcname , ZEND_ISSET_FUNC_NAME , sizeof ( ZEND_ISSET_FUNC_NAME ) - 1 )"		18333	1					
ANR	18758	Callee	memcmp		18333	0					
ANR	18759	Identifier	memcmp		18333	0					
ANR	18760	ArgumentList	lcname		18333	1					
ANR	18761	Argument	lcname		18333	0					
ANR	18762	Identifier	lcname		18333	0					
ANR	18763	Argument	ZEND_ISSET_FUNC_NAME		18333	1					
ANR	18764	Identifier	ZEND_ISSET_FUNC_NAME		18333	0					
ANR	18765	Argument	sizeof ( ZEND_ISSET_FUNC_NAME ) - 1		18333	2					
ANR	18766	AdditiveExpression	sizeof ( ZEND_ISSET_FUNC_NAME ) - 1		18333	0		-			
ANR	18767	SizeofExpression	sizeof ( ZEND_ISSET_FUNC_NAME )		18333	0					
ANR	18768	Sizeof	sizeof		18333	0					
ANR	18769	SizeofOperand	ZEND_ISSET_FUNC_NAME		18333	1					
ANR	18770	PrimaryExpression	1		18333	1					
ANR	18771	CompoundStatement		33:133:2452:2452	18333	1					
ANR	18772	IfStatement	if ( fptr -> common . num_args != 1 )		18333	0					
ANR	18773	Condition	fptr -> common . num_args != 1	2043:6:54783:54808	18333	0	True				
ANR	18774	EqualityExpression	fptr -> common . num_args != 1		18333	0		!=			
ANR	18775	MemberAccess	fptr -> common . num_args		18333	0					
ANR	18776	PtrMemberAccess	fptr -> common		18333	0					
ANR	18777	Identifier	fptr		18333	0					
ANR	18778	Identifier	common		18333	1					
ANR	18779	Identifier	num_args		18333	1					
ANR	18780	PrimaryExpression	1		18333	1					
ANR	18781	CompoundStatement		34:34:2488:2488	18333	1					
ANR	18782	ExpressionStatement	"zend_error ( error_type , ""Method %s::%s() must take exactly 1 argument"" , ce -> name , ZEND_ISSET_FUNC_NAME )"	2044:3:54816:54918	18333	0	True				
ANR	18783	CallExpression	"zend_error ( error_type , ""Method %s::%s() must take exactly 1 argument"" , ce -> name , ZEND_ISSET_FUNC_NAME )"		18333	0					
ANR	18784	Callee	zend_error		18333	0					
ANR	18785	Identifier	zend_error		18333	0					
ANR	18786	ArgumentList	error_type		18333	1					
ANR	18787	Argument	error_type		18333	0					
ANR	18788	Identifier	error_type		18333	0					
ANR	18789	Argument	"""Method %s::%s() must take exactly 1 argument"""		18333	1					
ANR	18790	PrimaryExpression	"""Method %s::%s() must take exactly 1 argument"""		18333	0					
ANR	18791	Argument	ce -> name		18333	2					
ANR	18792	PtrMemberAccess	ce -> name		18333	0					
ANR	18793	Identifier	ce		18333	0					
ANR	18794	Identifier	name		18333	1					
ANR	18795	Argument	ZEND_ISSET_FUNC_NAME		18333	3					
ANR	18796	Identifier	ZEND_ISSET_FUNC_NAME		18333	0					
ANR	18797	ElseStatement	else		18333	0					
ANR	18798	IfStatement	"if ( ARG_SHOULD_BE_SENT_BY_REF ( fptr , 1 ) )"		18333	0					
ANR	18799	Condition	"ARG_SHOULD_BE_SENT_BY_REF ( fptr , 1 )"	2045:13:54933:54966	18333	0	True				
ANR	18800	CallExpression	"ARG_SHOULD_BE_SENT_BY_REF ( fptr , 1 )"		18333	0					
ANR	18801	Callee	ARG_SHOULD_BE_SENT_BY_REF		18333	0					
ANR	18802	Identifier	ARG_SHOULD_BE_SENT_BY_REF		18333	0					
ANR	18803	ArgumentList	fptr		18333	1					
ANR	18804	Argument	fptr		18333	0					
ANR	18805	Identifier	fptr		18333	0					
ANR	18806	Argument	1		18333	1					
ANR	18807	PrimaryExpression	1		18333	0					
ANR	18808	CompoundStatement		36:49:2646:2646	18333	1					
ANR	18809	ExpressionStatement	"zend_error ( error_type , ""Method %s::%s() cannot take arguments by reference"" , ce -> name , ZEND_ISSET_FUNC_NAME )"	2046:3:54974:55082	18333	0	True				
ANR	18810	CallExpression	"zend_error ( error_type , ""Method %s::%s() cannot take arguments by reference"" , ce -> name , ZEND_ISSET_FUNC_NAME )"		18333	0					
ANR	18811	Callee	zend_error		18333	0					
ANR	18812	Identifier	zend_error		18333	0					
ANR	18813	ArgumentList	error_type		18333	1					
ANR	18814	Argument	error_type		18333	0					
ANR	18815	Identifier	error_type		18333	0					
ANR	18816	Argument	"""Method %s::%s() cannot take arguments by reference"""		18333	1					
ANR	18817	PrimaryExpression	"""Method %s::%s() cannot take arguments by reference"""		18333	0					
ANR	18818	Argument	ce -> name		18333	2					
ANR	18819	PtrMemberAccess	ce -> name		18333	0					
ANR	18820	Identifier	ce		18333	0					
ANR	18821	Identifier	name		18333	1					
ANR	18822	Argument	ZEND_ISSET_FUNC_NAME		18333	3					
ANR	18823	Identifier	ZEND_ISSET_FUNC_NAME		18333	0					
ANR	18824	ElseStatement	else		18333	0					
ANR	18825	IfStatement	"if ( name_len == sizeof ( ZEND_CALL_FUNC_NAME ) - 1 && ! memcmp ( lcname , ZEND_CALL_FUNC_NAME , sizeof ( ZEND_CALL_FUNC_NAME ) - 1 ) )"		18333	0					
ANR	18826	Condition	"name_len == sizeof ( ZEND_CALL_FUNC_NAME ) - 1 && ! memcmp ( lcname , ZEND_CALL_FUNC_NAME , sizeof ( ZEND_CALL_FUNC_NAME ) - 1 )"	2048:12:55100:55215	18333	0	True				
ANR	18827	AndExpression	"name_len == sizeof ( ZEND_CALL_FUNC_NAME ) - 1 && ! memcmp ( lcname , ZEND_CALL_FUNC_NAME , sizeof ( ZEND_CALL_FUNC_NAME ) - 1 )"		18333	0		&&			
ANR	18828	EqualityExpression	name_len == sizeof ( ZEND_CALL_FUNC_NAME ) - 1		18333	0		==			
ANR	18829	Identifier	name_len		18333	0					
ANR	18830	AdditiveExpression	sizeof ( ZEND_CALL_FUNC_NAME ) - 1		18333	1		-			
ANR	18831	SizeofExpression	sizeof ( ZEND_CALL_FUNC_NAME )		18333	0					
ANR	18832	Sizeof	sizeof		18333	0					
ANR	18833	SizeofOperand	ZEND_CALL_FUNC_NAME		18333	1					
ANR	18834	PrimaryExpression	1		18333	1					
ANR	18835	UnaryOperationExpression	"! memcmp ( lcname , ZEND_CALL_FUNC_NAME , sizeof ( ZEND_CALL_FUNC_NAME ) - 1 )"		18333	1					
ANR	18836	UnaryOperator	!		18333	0					
ANR	18837	CallExpression	"memcmp ( lcname , ZEND_CALL_FUNC_NAME , sizeof ( ZEND_CALL_FUNC_NAME ) - 1 )"		18333	1					
ANR	18838	Callee	memcmp		18333	0					
ANR	18839	Identifier	memcmp		18333	0					
ANR	18840	ArgumentList	lcname		18333	1					
ANR	18841	Argument	lcname		18333	0					
ANR	18842	Identifier	lcname		18333	0					
ANR	18843	Argument	ZEND_CALL_FUNC_NAME		18333	1					
ANR	18844	Identifier	ZEND_CALL_FUNC_NAME		18333	0					
ANR	18845	Argument	sizeof ( ZEND_CALL_FUNC_NAME ) - 1		18333	2					
ANR	18846	AdditiveExpression	sizeof ( ZEND_CALL_FUNC_NAME ) - 1		18333	0		-			
ANR	18847	SizeofExpression	sizeof ( ZEND_CALL_FUNC_NAME )		18333	0					
ANR	18848	Sizeof	sizeof		18333	0					
ANR	18849	SizeofOperand	ZEND_CALL_FUNC_NAME		18333	1					
ANR	18850	PrimaryExpression	1		18333	1					
ANR	18851	CompoundStatement		39:130:2895:2895	18333	1					
ANR	18852	IfStatement	if ( fptr -> common . num_args != 2 )		18333	0					
ANR	18853	Condition	fptr -> common . num_args != 2	2049:6:55226:55251	18333	0	True				
ANR	18854	EqualityExpression	fptr -> common . num_args != 2		18333	0		!=			
ANR	18855	MemberAccess	fptr -> common . num_args		18333	0					
ANR	18856	PtrMemberAccess	fptr -> common		18333	0					
ANR	18857	Identifier	fptr		18333	0					
ANR	18858	Identifier	common		18333	1					
ANR	18859	Identifier	num_args		18333	1					
ANR	18860	PrimaryExpression	2		18333	1					
ANR	18861	CompoundStatement		40:34:2931:2931	18333	1					
ANR	18862	ExpressionStatement	"zend_error ( error_type , ""Method %s::%s() must take exactly 2 arguments"" , ce -> name , ZEND_CALL_FUNC_NAME )"	2050:3:55259:55361	18333	0	True				
ANR	18863	CallExpression	"zend_error ( error_type , ""Method %s::%s() must take exactly 2 arguments"" , ce -> name , ZEND_CALL_FUNC_NAME )"		18333	0					
ANR	18864	Callee	zend_error		18333	0					
ANR	18865	Identifier	zend_error		18333	0					
ANR	18866	ArgumentList	error_type		18333	1					
ANR	18867	Argument	error_type		18333	0					
ANR	18868	Identifier	error_type		18333	0					
ANR	18869	Argument	"""Method %s::%s() must take exactly 2 arguments"""		18333	1					
ANR	18870	PrimaryExpression	"""Method %s::%s() must take exactly 2 arguments"""		18333	0					
ANR	18871	Argument	ce -> name		18333	2					
ANR	18872	PtrMemberAccess	ce -> name		18333	0					
ANR	18873	Identifier	ce		18333	0					
ANR	18874	Identifier	name		18333	1					
ANR	18875	Argument	ZEND_CALL_FUNC_NAME		18333	3					
ANR	18876	Identifier	ZEND_CALL_FUNC_NAME		18333	0					
ANR	18877	ElseStatement	else		18333	0					
ANR	18878	IfStatement	"if ( ARG_SHOULD_BE_SENT_BY_REF ( fptr , 1 ) || ARG_SHOULD_BE_SENT_BY_REF ( fptr , 2 ) )"		18333	0					
ANR	18879	Condition	"ARG_SHOULD_BE_SENT_BY_REF ( fptr , 1 ) || ARG_SHOULD_BE_SENT_BY_REF ( fptr , 2 )"	2051:13:55376:55447	18333	0	True				
ANR	18880	OrExpression	"ARG_SHOULD_BE_SENT_BY_REF ( fptr , 1 ) || ARG_SHOULD_BE_SENT_BY_REF ( fptr , 2 )"		18333	0		||			
ANR	18881	CallExpression	"ARG_SHOULD_BE_SENT_BY_REF ( fptr , 1 )"		18333	0					
ANR	18882	Callee	ARG_SHOULD_BE_SENT_BY_REF		18333	0					
ANR	18883	Identifier	ARG_SHOULD_BE_SENT_BY_REF		18333	0					
ANR	18884	ArgumentList	fptr		18333	1					
ANR	18885	Argument	fptr		18333	0					
ANR	18886	Identifier	fptr		18333	0					
ANR	18887	Argument	1		18333	1					
ANR	18888	PrimaryExpression	1		18333	0					
ANR	18889	CallExpression	"ARG_SHOULD_BE_SENT_BY_REF ( fptr , 2 )"		18333	1					
ANR	18890	Callee	ARG_SHOULD_BE_SENT_BY_REF		18333	0					
ANR	18891	Identifier	ARG_SHOULD_BE_SENT_BY_REF		18333	0					
ANR	18892	ArgumentList	fptr		18333	1					
ANR	18893	Argument	fptr		18333	0					
ANR	18894	Identifier	fptr		18333	0					
ANR	18895	Argument	2		18333	1					
ANR	18896	PrimaryExpression	2		18333	0					
ANR	18897	CompoundStatement		42:87:3127:3127	18333	1					
ANR	18898	ExpressionStatement	"zend_error ( error_type , ""Method %s::%s() cannot take arguments by reference"" , ce -> name , ZEND_CALL_FUNC_NAME )"	2052:3:55455:55562	18333	0	True				
ANR	18899	CallExpression	"zend_error ( error_type , ""Method %s::%s() cannot take arguments by reference"" , ce -> name , ZEND_CALL_FUNC_NAME )"		18333	0					
ANR	18900	Callee	zend_error		18333	0					
ANR	18901	Identifier	zend_error		18333	0					
ANR	18902	ArgumentList	error_type		18333	1					
ANR	18903	Argument	error_type		18333	0					
ANR	18904	Identifier	error_type		18333	0					
ANR	18905	Argument	"""Method %s::%s() cannot take arguments by reference"""		18333	1					
ANR	18906	PrimaryExpression	"""Method %s::%s() cannot take arguments by reference"""		18333	0					
ANR	18907	Argument	ce -> name		18333	2					
ANR	18908	PtrMemberAccess	ce -> name		18333	0					
ANR	18909	Identifier	ce		18333	0					
ANR	18910	Identifier	name		18333	1					
ANR	18911	Argument	ZEND_CALL_FUNC_NAME		18333	3					
ANR	18912	Identifier	ZEND_CALL_FUNC_NAME		18333	0					
ANR	18913	ElseStatement	else		18333	0					
ANR	18914	IfStatement	"if ( name_len == sizeof ( ZEND_CALLSTATIC_FUNC_NAME ) - 1 && ! memcmp ( lcname , ZEND_CALLSTATIC_FUNC_NAME , sizeof ( ZEND_CALLSTATIC_FUNC_NAME ) - 1 ) )"		18333	0					
ANR	18915	Condition	"name_len == sizeof ( ZEND_CALLSTATIC_FUNC_NAME ) - 1 && ! memcmp ( lcname , ZEND_CALLSTATIC_FUNC_NAME , sizeof ( ZEND_CALLSTATIC_FUNC_NAME ) - 1 )"	2054:12:55580:55713	18333	0	True				
ANR	18916	AndExpression	"name_len == sizeof ( ZEND_CALLSTATIC_FUNC_NAME ) - 1 && ! memcmp ( lcname , ZEND_CALLSTATIC_FUNC_NAME , sizeof ( ZEND_CALLSTATIC_FUNC_NAME ) - 1 )"		18333	0		&&			
ANR	18917	EqualityExpression	name_len == sizeof ( ZEND_CALLSTATIC_FUNC_NAME ) - 1		18333	0		==			
ANR	18918	Identifier	name_len		18333	0					
ANR	18919	AdditiveExpression	sizeof ( ZEND_CALLSTATIC_FUNC_NAME ) - 1		18333	1		-			
ANR	18920	SizeofExpression	sizeof ( ZEND_CALLSTATIC_FUNC_NAME )		18333	0					
ANR	18921	Sizeof	sizeof		18333	0					
ANR	18922	SizeofOperand	ZEND_CALLSTATIC_FUNC_NAME		18333	1					
ANR	18923	PrimaryExpression	1		18333	1					
ANR	18924	UnaryOperationExpression	"! memcmp ( lcname , ZEND_CALLSTATIC_FUNC_NAME , sizeof ( ZEND_CALLSTATIC_FUNC_NAME ) - 1 )"		18333	1					
ANR	18925	UnaryOperator	!		18333	0					
ANR	18926	CallExpression	"memcmp ( lcname , ZEND_CALLSTATIC_FUNC_NAME , sizeof ( ZEND_CALLSTATIC_FUNC_NAME ) - 1 )"		18333	1					
ANR	18927	Callee	memcmp		18333	0					
ANR	18928	Identifier	memcmp		18333	0					
ANR	18929	ArgumentList	lcname		18333	1					
ANR	18930	Argument	lcname		18333	0					
ANR	18931	Identifier	lcname		18333	0					
ANR	18932	Argument	ZEND_CALLSTATIC_FUNC_NAME		18333	1					
ANR	18933	Identifier	ZEND_CALLSTATIC_FUNC_NAME		18333	0					
ANR	18934	Argument	sizeof ( ZEND_CALLSTATIC_FUNC_NAME ) - 1		18333	2					
ANR	18935	AdditiveExpression	sizeof ( ZEND_CALLSTATIC_FUNC_NAME ) - 1		18333	0		-			
ANR	18936	SizeofExpression	sizeof ( ZEND_CALLSTATIC_FUNC_NAME )		18333	0					
ANR	18937	Sizeof	sizeof		18333	0					
ANR	18938	SizeofOperand	ZEND_CALLSTATIC_FUNC_NAME		18333	1					
ANR	18939	PrimaryExpression	1		18333	1					
ANR	18940	CompoundStatement		47:3:3395:3395	18333	1					
ANR	18941	IfStatement	if ( fptr -> common . num_args != 2 )		18333	0					
ANR	18942	Condition	fptr -> common . num_args != 2	2057:6:55726:55751	18333	0	True				
ANR	18943	EqualityExpression	fptr -> common . num_args != 2		18333	0		!=			
ANR	18944	MemberAccess	fptr -> common . num_args		18333	0					
ANR	18945	PtrMemberAccess	fptr -> common		18333	0					
ANR	18946	Identifier	fptr		18333	0					
ANR	18947	Identifier	common		18333	1					
ANR	18948	Identifier	num_args		18333	1					
ANR	18949	PrimaryExpression	2		18333	1					
ANR	18950	CompoundStatement		48:34:3431:3431	18333	1					
ANR	18951	ExpressionStatement	"zend_error ( error_type , ""Method %s::%s() must take exactly 2 arguments"" , ce -> name , ZEND_CALLSTATIC_FUNC_NAME )"	2058:3:55759:55867	18333	0	True				
ANR	18952	CallExpression	"zend_error ( error_type , ""Method %s::%s() must take exactly 2 arguments"" , ce -> name , ZEND_CALLSTATIC_FUNC_NAME )"		18333	0					
ANR	18953	Callee	zend_error		18333	0					
ANR	18954	Identifier	zend_error		18333	0					
ANR	18955	ArgumentList	error_type		18333	1					
ANR	18956	Argument	error_type		18333	0					
ANR	18957	Identifier	error_type		18333	0					
ANR	18958	Argument	"""Method %s::%s() must take exactly 2 arguments"""		18333	1					
ANR	18959	PrimaryExpression	"""Method %s::%s() must take exactly 2 arguments"""		18333	0					
ANR	18960	Argument	ce -> name		18333	2					
ANR	18961	PtrMemberAccess	ce -> name		18333	0					
ANR	18962	Identifier	ce		18333	0					
ANR	18963	Identifier	name		18333	1					
ANR	18964	Argument	ZEND_CALLSTATIC_FUNC_NAME		18333	3					
ANR	18965	Identifier	ZEND_CALLSTATIC_FUNC_NAME		18333	0					
ANR	18966	ElseStatement	else		18333	0					
ANR	18967	IfStatement	"if ( ARG_SHOULD_BE_SENT_BY_REF ( fptr , 1 ) || ARG_SHOULD_BE_SENT_BY_REF ( fptr , 2 ) )"		18333	0					
ANR	18968	Condition	"ARG_SHOULD_BE_SENT_BY_REF ( fptr , 1 ) || ARG_SHOULD_BE_SENT_BY_REF ( fptr , 2 )"	2059:13:55882:55953	18333	0	True				
ANR	18969	OrExpression	"ARG_SHOULD_BE_SENT_BY_REF ( fptr , 1 ) || ARG_SHOULD_BE_SENT_BY_REF ( fptr , 2 )"		18333	0		||			
ANR	18970	CallExpression	"ARG_SHOULD_BE_SENT_BY_REF ( fptr , 1 )"		18333	0					
ANR	18971	Callee	ARG_SHOULD_BE_SENT_BY_REF		18333	0					
ANR	18972	Identifier	ARG_SHOULD_BE_SENT_BY_REF		18333	0					
ANR	18973	ArgumentList	fptr		18333	1					
ANR	18974	Argument	fptr		18333	0					
ANR	18975	Identifier	fptr		18333	0					
ANR	18976	Argument	1		18333	1					
ANR	18977	PrimaryExpression	1		18333	0					
ANR	18978	CallExpression	"ARG_SHOULD_BE_SENT_BY_REF ( fptr , 2 )"		18333	1					
ANR	18979	Callee	ARG_SHOULD_BE_SENT_BY_REF		18333	0					
ANR	18980	Identifier	ARG_SHOULD_BE_SENT_BY_REF		18333	0					
ANR	18981	ArgumentList	fptr		18333	1					
ANR	18982	Argument	fptr		18333	0					
ANR	18983	Identifier	fptr		18333	0					
ANR	18984	Argument	2		18333	1					
ANR	18985	PrimaryExpression	2		18333	0					
ANR	18986	CompoundStatement		50:87:3633:3633	18333	1					
ANR	18987	ExpressionStatement	"zend_error ( error_type , ""Method %s::%s() cannot take arguments by reference"" , ce -> name , ZEND_CALLSTATIC_FUNC_NAME )"	2060:3:55961:56074	18333	0	True				
ANR	18988	CallExpression	"zend_error ( error_type , ""Method %s::%s() cannot take arguments by reference"" , ce -> name , ZEND_CALLSTATIC_FUNC_NAME )"		18333	0					
ANR	18989	Callee	zend_error		18333	0					
ANR	18990	Identifier	zend_error		18333	0					
ANR	18991	ArgumentList	error_type		18333	1					
ANR	18992	Argument	error_type		18333	0					
ANR	18993	Identifier	error_type		18333	0					
ANR	18994	Argument	"""Method %s::%s() cannot take arguments by reference"""		18333	1					
ANR	18995	PrimaryExpression	"""Method %s::%s() cannot take arguments by reference"""		18333	0					
ANR	18996	Argument	ce -> name		18333	2					
ANR	18997	PtrMemberAccess	ce -> name		18333	0					
ANR	18998	Identifier	ce		18333	0					
ANR	18999	Identifier	name		18333	1					
ANR	19000	Argument	ZEND_CALLSTATIC_FUNC_NAME		18333	3					
ANR	19001	Identifier	ZEND_CALLSTATIC_FUNC_NAME		18333	0					
ANR	19002	ElseStatement	else		18333	0					
ANR	19003	IfStatement	"if ( name_len == sizeof ( ZEND_TOSTRING_FUNC_NAME ) - 1 && ! memcmp ( lcname , ZEND_TOSTRING_FUNC_NAME , sizeof ( ZEND_TOSTRING_FUNC_NAME ) - 1 ) && fptr -> common . num_args != 0 )"		18333	0					
ANR	19004	Condition	"name_len == sizeof ( ZEND_TOSTRING_FUNC_NAME ) - 1 && ! memcmp ( lcname , ZEND_TOSTRING_FUNC_NAME , sizeof ( ZEND_TOSTRING_FUNC_NAME ) - 1 ) && fptr -> common . num_args != 0"	2062:13:56093:56251	18333	0	True				
ANR	19005	AndExpression	"name_len == sizeof ( ZEND_TOSTRING_FUNC_NAME ) - 1 && ! memcmp ( lcname , ZEND_TOSTRING_FUNC_NAME , sizeof ( ZEND_TOSTRING_FUNC_NAME ) - 1 ) && fptr -> common . num_args != 0"		18333	0		&&			
ANR	19006	EqualityExpression	name_len == sizeof ( ZEND_TOSTRING_FUNC_NAME ) - 1		18333	0		==			
ANR	19007	Identifier	name_len		18333	0					
ANR	19008	AdditiveExpression	sizeof ( ZEND_TOSTRING_FUNC_NAME ) - 1		18333	1		-			
ANR	19009	SizeofExpression	sizeof ( ZEND_TOSTRING_FUNC_NAME )		18333	0					
ANR	19010	Sizeof	sizeof		18333	0					
ANR	19011	SizeofOperand	ZEND_TOSTRING_FUNC_NAME		18333	1					
ANR	19012	PrimaryExpression	1		18333	1					
ANR	19013	AndExpression	"! memcmp ( lcname , ZEND_TOSTRING_FUNC_NAME , sizeof ( ZEND_TOSTRING_FUNC_NAME ) - 1 ) && fptr -> common . num_args != 0"		18333	1		&&			
ANR	19014	UnaryOperationExpression	"! memcmp ( lcname , ZEND_TOSTRING_FUNC_NAME , sizeof ( ZEND_TOSTRING_FUNC_NAME ) - 1 )"		18333	0					
ANR	19015	UnaryOperator	!		18333	0					
ANR	19016	CallExpression	"memcmp ( lcname , ZEND_TOSTRING_FUNC_NAME , sizeof ( ZEND_TOSTRING_FUNC_NAME ) - 1 )"		18333	1					
ANR	19017	Callee	memcmp		18333	0					
ANR	19018	Identifier	memcmp		18333	0					
ANR	19019	ArgumentList	lcname		18333	1					
ANR	19020	Argument	lcname		18333	0					
ANR	19021	Identifier	lcname		18333	0					
ANR	19022	Argument	ZEND_TOSTRING_FUNC_NAME		18333	1					
ANR	19023	Identifier	ZEND_TOSTRING_FUNC_NAME		18333	0					
ANR	19024	Argument	sizeof ( ZEND_TOSTRING_FUNC_NAME ) - 1		18333	2					
ANR	19025	AdditiveExpression	sizeof ( ZEND_TOSTRING_FUNC_NAME ) - 1		18333	0		-			
ANR	19026	SizeofExpression	sizeof ( ZEND_TOSTRING_FUNC_NAME )		18333	0					
ANR	19027	Sizeof	sizeof		18333	0					
ANR	19028	SizeofOperand	ZEND_TOSTRING_FUNC_NAME		18333	1					
ANR	19029	PrimaryExpression	1		18333	1					
ANR	19030	EqualityExpression	fptr -> common . num_args != 0		18333	1		!=			
ANR	19031	MemberAccess	fptr -> common . num_args		18333	0					
ANR	19032	PtrMemberAccess	fptr -> common		18333	0					
ANR	19033	Identifier	fptr		18333	0					
ANR	19034	Identifier	common		18333	1					
ANR	19035	Identifier	num_args		18333	1					
ANR	19036	PrimaryExpression	0		18333	1					
ANR	19037	CompoundStatement		55:3:3933:3933	18333	1					
ANR	19038	ExpressionStatement	"zend_error ( error_type , ""Method %s::%s() cannot take arguments"" , ce -> name , ZEND_TOSTRING_FUNC_NAME )"	2065:2:56260:56358	18333	0	True				
ANR	19039	CallExpression	"zend_error ( error_type , ""Method %s::%s() cannot take arguments"" , ce -> name , ZEND_TOSTRING_FUNC_NAME )"		18333	0					
ANR	19040	Callee	zend_error		18333	0					
ANR	19041	Identifier	zend_error		18333	0					
ANR	19042	ArgumentList	error_type		18333	1					
ANR	19043	Argument	error_type		18333	0					
ANR	19044	Identifier	error_type		18333	0					
ANR	19045	Argument	"""Method %s::%s() cannot take arguments"""		18333	1					
ANR	19046	PrimaryExpression	"""Method %s::%s() cannot take arguments"""		18333	0					
ANR	19047	Argument	ce -> name		18333	2					
ANR	19048	PtrMemberAccess	ce -> name		18333	0					
ANR	19049	Identifier	ce		18333	0					
ANR	19050	Identifier	name		18333	1					
ANR	19051	Argument	ZEND_TOSTRING_FUNC_NAME		18333	3					
ANR	19052	Identifier	ZEND_TOSTRING_FUNC_NAME		18333	0					
ANR	19053	ElseStatement	else		18333	0					
ANR	19054	IfStatement	"if ( name_len == sizeof ( ZEND_DEBUGINFO_FUNC_NAME ) - 1 && ! memcmp ( lcname , ZEND_DEBUGINFO_FUNC_NAME , sizeof ( ZEND_DEBUGINFO_FUNC_NAME ) - 1 ) && fptr -> common . num_args != 0 )"		18333	0					
ANR	19055	Condition	"name_len == sizeof ( ZEND_DEBUGINFO_FUNC_NAME ) - 1 && ! memcmp ( lcname , ZEND_DEBUGINFO_FUNC_NAME , sizeof ( ZEND_DEBUGINFO_FUNC_NAME ) - 1 ) && fptr -> common . num_args != 0"	2066:12:56372:56532	18333	0	True				
ANR	19056	AndExpression	"name_len == sizeof ( ZEND_DEBUGINFO_FUNC_NAME ) - 1 && ! memcmp ( lcname , ZEND_DEBUGINFO_FUNC_NAME , sizeof ( ZEND_DEBUGINFO_FUNC_NAME ) - 1 ) && fptr -> common . num_args != 0"		18333	0		&&			
ANR	19057	EqualityExpression	name_len == sizeof ( ZEND_DEBUGINFO_FUNC_NAME ) - 1		18333	0		==			
ANR	19058	Identifier	name_len		18333	0					
ANR	19059	AdditiveExpression	sizeof ( ZEND_DEBUGINFO_FUNC_NAME ) - 1		18333	1		-			
ANR	19060	SizeofExpression	sizeof ( ZEND_DEBUGINFO_FUNC_NAME )		18333	0					
ANR	19061	Sizeof	sizeof		18333	0					
ANR	19062	SizeofOperand	ZEND_DEBUGINFO_FUNC_NAME		18333	1					
ANR	19063	PrimaryExpression	1		18333	1					
ANR	19064	AndExpression	"! memcmp ( lcname , ZEND_DEBUGINFO_FUNC_NAME , sizeof ( ZEND_DEBUGINFO_FUNC_NAME ) - 1 ) && fptr -> common . num_args != 0"		18333	1		&&			
ANR	19065	UnaryOperationExpression	"! memcmp ( lcname , ZEND_DEBUGINFO_FUNC_NAME , sizeof ( ZEND_DEBUGINFO_FUNC_NAME ) - 1 )"		18333	0					
ANR	19066	UnaryOperator	!		18333	0					
ANR	19067	CallExpression	"memcmp ( lcname , ZEND_DEBUGINFO_FUNC_NAME , sizeof ( ZEND_DEBUGINFO_FUNC_NAME ) - 1 )"		18333	1					
ANR	19068	Callee	memcmp		18333	0					
ANR	19069	Identifier	memcmp		18333	0					
ANR	19070	ArgumentList	lcname		18333	1					
ANR	19071	Argument	lcname		18333	0					
ANR	19072	Identifier	lcname		18333	0					
ANR	19073	Argument	ZEND_DEBUGINFO_FUNC_NAME		18333	1					
ANR	19074	Identifier	ZEND_DEBUGINFO_FUNC_NAME		18333	0					
ANR	19075	Argument	sizeof ( ZEND_DEBUGINFO_FUNC_NAME ) - 1		18333	2					
ANR	19076	AdditiveExpression	sizeof ( ZEND_DEBUGINFO_FUNC_NAME ) - 1		18333	0		-			
ANR	19077	SizeofExpression	sizeof ( ZEND_DEBUGINFO_FUNC_NAME )		18333	0					
ANR	19078	Sizeof	sizeof		18333	0					
ANR	19079	SizeofOperand	ZEND_DEBUGINFO_FUNC_NAME		18333	1					
ANR	19080	PrimaryExpression	1		18333	1					
ANR	19081	EqualityExpression	fptr -> common . num_args != 0		18333	1		!=			
ANR	19082	MemberAccess	fptr -> common . num_args		18333	0					
ANR	19083	PtrMemberAccess	fptr -> common		18333	0					
ANR	19084	Identifier	fptr		18333	0					
ANR	19085	Identifier	common		18333	1					
ANR	19086	Identifier	num_args		18333	1					
ANR	19087	PrimaryExpression	0		18333	1					
ANR	19088	CompoundStatement		58:111:4212:4212	18333	1					
ANR	19089	ExpressionStatement	"zend_error ( error_type , ""Method %s::%s() cannot take arguments"" , ce -> name , ZEND_DEBUGINFO_FUNC_NAME )"	2068:2:56539:56638	18333	0	True				
ANR	19090	CallExpression	"zend_error ( error_type , ""Method %s::%s() cannot take arguments"" , ce -> name , ZEND_DEBUGINFO_FUNC_NAME )"		18333	0					
ANR	19091	Callee	zend_error		18333	0					
ANR	19092	Identifier	zend_error		18333	0					
ANR	19093	ArgumentList	error_type		18333	1					
ANR	19094	Argument	error_type		18333	0					
ANR	19095	Identifier	error_type		18333	0					
ANR	19096	Argument	"""Method %s::%s() cannot take arguments"""		18333	1					
ANR	19097	PrimaryExpression	"""Method %s::%s() cannot take arguments"""		18333	0					
ANR	19098	Argument	ce -> name		18333	2					
ANR	19099	PtrMemberAccess	ce -> name		18333	0					
ANR	19100	Identifier	ce		18333	0					
ANR	19101	Identifier	name		18333	1					
ANR	19102	Argument	ZEND_DEBUGINFO_FUNC_NAME		18333	3					
ANR	19103	Identifier	ZEND_DEBUGINFO_FUNC_NAME		18333	0					
ANR	19104	ReturnType	ZEND_API void		18333	1					
ANR	19105	Identifier	zend_check_magic_method_implementation		18333	2					
ANR	19106	ParameterList	"const zend_class_entry * ce , const zend_function * fptr , int error_type TSRMLS_DC"		18333	3					
ANR	19107	Parameter	const zend_class_entry * ce	2009:53:52231:52256	18333	0	True				
ANR	19108	ParameterType	const zend_class_entry *		18333	0					
ANR	19109	Identifier	ce		18333	1					
ANR	19110	Parameter	const zend_function * fptr	2009:81:52259:52283	18333	1	True				
ANR	19111	ParameterType	const zend_function *		18333	0					
ANR	19112	Identifier	fptr		18333	1					
ANR	19113	Parameter	int error_type TSRMLS_DC	2009:108:52286:52309	18333	2	True				
ANR	19114	ParameterType	int error_type		18333	0					
ANR	19115	Identifier	TSRMLS_DC		18333	1					
ANR	19116	CFGEntryNode	ENTRY		18333		True				
ANR	19117	CFGExitNode	EXIT		18333		True				
ANR	19118	Symbol	ARG_SHOULD_BE_SENT_BY_REF		18333						
ANR	19119	Symbol	ZEND_CALLSTATIC_FUNC_NAME		18333						
ANR	19120	Symbol	fptr -> common . num_args		18333						
ANR	19121	Symbol	* ce		18333						
ANR	19122	Symbol	TSRMLS_DC		18333						
ANR	19123	Symbol	ZEND_GET_FUNC_NAME		18333						
ANR	19124	Symbol	ZEND_DEBUGINFO_FUNC_NAME		18333						
ANR	19125	Symbol	ZEND_CALL_FUNC_NAME		18333						
ANR	19126	Symbol	strlen		18333						
ANR	19127	Symbol	* lcname		18333						
ANR	19128	Symbol	memcmp		18333						
ANR	19129	Symbol	ZEND_CLONE_FUNC_NAME		18333						
ANR	19130	Symbol	error_type		18333						
ANR	19131	Symbol	ZEND_ISSET_FUNC_NAME		18333						
ANR	19132	Symbol	name_len		18333						
ANR	19133	Symbol	ce -> name		18333						
ANR	19134	Symbol	ZEND_SET_FUNC_NAME		18333						
ANR	19135	Symbol	* fptr		18333						
ANR	19136	Symbol	ce		18333						
ANR	19137	Symbol	fptr -> common		18333						
ANR	19138	Symbol	fptr -> common . function_name		18333						
ANR	19139	Symbol	lcname		18333						
ANR	19140	Symbol	MIN		18333						
ANR	19141	Symbol	fptr		18333						
ANR	19142	Symbol	ZEND_DESTRUCTOR_FUNC_NAME		18333						
ANR	19143	Symbol	ZEND_TOSTRING_FUNC_NAME		18333						
ANR	19144	Symbol	ZEND_UNSET_FUNC_NAME		18333						
ANR	19145	Function	zend_register_functions	2074:0:56729:68204							
ANR	19146	FunctionDef	"zend_register_functions (zend_class_entry * scope , const zend_function_entry * functions , HashTable * function_table , int type TSRMLS_DC)"		19145	0					
ANR	19147	CompoundStatement		2075:0:56886:68204	19145	0					
ANR	19148	IdentifierDeclStatement	const zend_function_entry * ptr = functions ;	2076:1:56889:56931	19145	0	True				
ANR	19149	IdentifierDecl	* ptr = functions		19145	0					
ANR	19150	IdentifierDeclType	const zend_function_entry *		19145	0					
ANR	19151	Identifier	ptr		19145	1					
ANR	19152	AssignmentExpression	* ptr = functions		19145	2		=			
ANR	19153	Identifier	functions		19145	0					
ANR	19154	Identifier	functions		19145	1					
ANR	19155	IdentifierDeclStatement	"zend_function function , * reg_function ;"	2077:1:56934:56971	19145	1	True				
ANR	19156	IdentifierDecl	function		19145	0					
ANR	19157	IdentifierDeclType	zend_function		19145	0					
ANR	19158	Identifier	function		19145	1					
ANR	19159	IdentifierDecl	* reg_function		19145	1					
ANR	19160	IdentifierDeclType	zend_function *		19145	0					
ANR	19161	Identifier	reg_function		19145	1					
ANR	19162	IdentifierDeclStatement	zend_internal_function * internal_function = ( zend_internal_function * ) & function ;	2078:1:56974:57053	19145	2	True				
ANR	19163	IdentifierDecl	* internal_function = ( zend_internal_function * ) & function		19145	0					
ANR	19164	IdentifierDeclType	zend_internal_function *		19145	0					
ANR	19165	Identifier	internal_function		19145	1					
ANR	19166	AssignmentExpression	* internal_function = ( zend_internal_function * ) & function		19145	2		=			
ANR	19167	Identifier	internal_function		19145	0					
ANR	19168	CastExpression	( zend_internal_function * ) & function		19145	1					
ANR	19169	CastTarget	zend_internal_function *		19145	0					
ANR	19170	UnaryOperationExpression	& function		19145	1					
ANR	19171	UnaryOperator	&		19145	0					
ANR	19172	Identifier	function		19145	1					
ANR	19173	IdentifierDeclStatement	"int count = 0 , unload = 0 ;"	2079:1:57056:57077	19145	3	True				
ANR	19174	IdentifierDecl	count = 0		19145	0					
ANR	19175	IdentifierDeclType	int		19145	0					
ANR	19176	Identifier	count		19145	1					
ANR	19177	AssignmentExpression	count = 0		19145	2		=			
ANR	19178	Identifier	count		19145	0					
ANR	19179	PrimaryExpression	0		19145	1					
ANR	19180	IdentifierDecl	unload = 0		19145	1					
ANR	19181	IdentifierDeclType	int		19145	0					
ANR	19182	Identifier	unload		19145	1					
ANR	19183	AssignmentExpression	unload = 0		19145	2		=			
ANR	19184	Identifier	unload		19145	0					
ANR	19185	PrimaryExpression	0		19145	1					
ANR	19186	IdentifierDeclStatement	HashTable * target_function_table = function_table ;	2080:1:57080:57129	19145	4	True				
ANR	19187	IdentifierDecl	* target_function_table = function_table		19145	0					
ANR	19188	IdentifierDeclType	HashTable *		19145	0					
ANR	19189	Identifier	target_function_table		19145	1					
ANR	19190	AssignmentExpression	* target_function_table = function_table		19145	2		=			
ANR	19191	Identifier	function_table		19145	0					
ANR	19192	Identifier	function_table		19145	1					
ANR	19193	IdentifierDeclStatement	int error_type ;	2081:1:57132:57146	19145	5	True				
ANR	19194	IdentifierDecl	error_type		19145	0					
ANR	19195	IdentifierDeclType	int		19145	0					
ANR	19196	Identifier	error_type		19145	1					
ANR	19197	IdentifierDeclStatement	"zend_function * ctor = NULL , * dtor = NULL , * clone = NULL , * __get = NULL , * __set = NULL , * __unset = NULL , * __isset = NULL , * __call = NULL , * __callstatic = NULL , * __tostring = NULL , * __debugInfo = NULL ;"	2082:1:57149:57347	19145	6	True				
ANR	19198	IdentifierDecl	* ctor = NULL		19145	0					
ANR	19199	IdentifierDeclType	zend_function *		19145	0					
ANR	19200	Identifier	ctor		19145	1					
ANR	19201	AssignmentExpression	* ctor = NULL		19145	2		=			
ANR	19202	Identifier	NULL		19145	0					
ANR	19203	Identifier	NULL		19145	1					
ANR	19204	IdentifierDecl	* dtor = NULL		19145	1					
ANR	19205	IdentifierDeclType	zend_function *		19145	0					
ANR	19206	Identifier	dtor		19145	1					
ANR	19207	AssignmentExpression	* dtor = NULL		19145	2		=			
ANR	19208	Identifier	NULL		19145	0					
ANR	19209	Identifier	NULL		19145	1					
ANR	19210	IdentifierDecl	* clone = NULL		19145	2					
ANR	19211	IdentifierDeclType	zend_function *		19145	0					
ANR	19212	Identifier	clone		19145	1					
ANR	19213	AssignmentExpression	* clone = NULL		19145	2		=			
ANR	19214	Identifier	NULL		19145	0					
ANR	19215	Identifier	NULL		19145	1					
ANR	19216	IdentifierDecl	* __get = NULL		19145	3					
ANR	19217	IdentifierDeclType	zend_function *		19145	0					
ANR	19218	Identifier	__get		19145	1					
ANR	19219	AssignmentExpression	* __get = NULL		19145	2		=			
ANR	19220	Identifier	NULL		19145	0					
ANR	19221	Identifier	NULL		19145	1					
ANR	19222	IdentifierDecl	* __set = NULL		19145	4					
ANR	19223	IdentifierDeclType	zend_function *		19145	0					
ANR	19224	Identifier	__set		19145	1					
ANR	19225	AssignmentExpression	* __set = NULL		19145	2		=			
ANR	19226	Identifier	NULL		19145	0					
ANR	19227	Identifier	NULL		19145	1					
ANR	19228	IdentifierDecl	* __unset = NULL		19145	5					
ANR	19229	IdentifierDeclType	zend_function *		19145	0					
ANR	19230	Identifier	__unset		19145	1					
ANR	19231	AssignmentExpression	* __unset = NULL		19145	2		=			
ANR	19232	Identifier	NULL		19145	0					
ANR	19233	Identifier	NULL		19145	1					
ANR	19234	IdentifierDecl	* __isset = NULL		19145	6					
ANR	19235	IdentifierDeclType	zend_function *		19145	0					
ANR	19236	Identifier	__isset		19145	1					
ANR	19237	AssignmentExpression	* __isset = NULL		19145	2		=			
ANR	19238	Identifier	NULL		19145	0					
ANR	19239	Identifier	NULL		19145	1					
ANR	19240	IdentifierDecl	* __call = NULL		19145	7					
ANR	19241	IdentifierDeclType	zend_function *		19145	0					
ANR	19242	Identifier	__call		19145	1					
ANR	19243	AssignmentExpression	* __call = NULL		19145	2		=			
ANR	19244	Identifier	NULL		19145	0					
ANR	19245	Identifier	NULL		19145	1					
ANR	19246	IdentifierDecl	* __callstatic = NULL		19145	8					
ANR	19247	IdentifierDeclType	zend_function *		19145	0					
ANR	19248	Identifier	__callstatic		19145	1					
ANR	19249	AssignmentExpression	* __callstatic = NULL		19145	2		=			
ANR	19250	Identifier	NULL		19145	0					
ANR	19251	Identifier	NULL		19145	1					
ANR	19252	IdentifierDecl	* __tostring = NULL		19145	9					
ANR	19253	IdentifierDeclType	zend_function *		19145	0					
ANR	19254	Identifier	__tostring		19145	1					
ANR	19255	AssignmentExpression	* __tostring = NULL		19145	2		=			
ANR	19256	Identifier	NULL		19145	0					
ANR	19257	Identifier	NULL		19145	1					
ANR	19258	IdentifierDecl	* __debugInfo = NULL		19145	10					
ANR	19259	IdentifierDeclType	zend_function *		19145	0					
ANR	19260	Identifier	__debugInfo		19145	1					
ANR	19261	AssignmentExpression	* __debugInfo = NULL		19145	2		=			
ANR	19262	Identifier	NULL		19145	0					
ANR	19263	Identifier	NULL		19145	1					
ANR	19264	IdentifierDeclStatement	const char * lowercase_name ;	2083:1:57350:57376	19145	7	True				
ANR	19265	IdentifierDecl	* lowercase_name		19145	0					
ANR	19266	IdentifierDeclType	const char *		19145	0					
ANR	19267	Identifier	lowercase_name		19145	1					
ANR	19268	IdentifierDeclStatement	int fname_len ;	2084:1:57379:57392	19145	8	True				
ANR	19269	IdentifierDecl	fname_len		19145	0					
ANR	19270	IdentifierDeclType	int		19145	0					
ANR	19271	Identifier	fname_len		19145	1					
ANR	19272	IdentifierDeclStatement	const char * lc_class_name = NULL ;	2085:1:57395:57427	19145	9	True				
ANR	19273	IdentifierDecl	* lc_class_name = NULL		19145	0					
ANR	19274	IdentifierDeclType	const char *		19145	0					
ANR	19275	Identifier	lc_class_name		19145	1					
ANR	19276	AssignmentExpression	* lc_class_name = NULL		19145	2		=			
ANR	19277	Identifier	NULL		19145	0					
ANR	19278	Identifier	NULL		19145	1					
ANR	19279	IdentifierDeclStatement	int class_name_len = 0 ;	2086:1:57430:57452	19145	10	True				
ANR	19280	IdentifierDecl	class_name_len = 0		19145	0					
ANR	19281	IdentifierDeclType	int		19145	0					
ANR	19282	Identifier	class_name_len		19145	1					
ANR	19283	AssignmentExpression	class_name_len = 0		19145	2		=			
ANR	19284	Identifier	class_name_len		19145	0					
ANR	19285	PrimaryExpression	0		19145	1					
ANR	19286	IdentifierDeclStatement	zend_ulong hash ;	2087:1:57455:57470	19145	11	True				
ANR	19287	IdentifierDecl	hash		19145	0					
ANR	19288	IdentifierDeclType	zend_ulong		19145	0					
ANR	19289	Identifier	hash		19145	1					
ANR	19290	IfStatement	if ( type == MODULE_PERSISTENT )		19145	12					
ANR	19291	Condition	type == MODULE_PERSISTENT	2089:5:57478:57500	19145	0	True				
ANR	19292	EqualityExpression	type == MODULE_PERSISTENT		19145	0		==			
ANR	19293	Identifier	type		19145	0					
ANR	19294	Identifier	MODULE_PERSISTENT		19145	1					
ANR	19295	CompoundStatement		15:30:616:616	19145	1					
ANR	19296	ExpressionStatement	error_type = E_CORE_WARNING	2090:2:57507:57534	19145	0	True				
ANR	19297	AssignmentExpression	error_type = E_CORE_WARNING		19145	0		=			
ANR	19298	Identifier	error_type		19145	0					
ANR	19299	Identifier	E_CORE_WARNING		19145	1					
ANR	19300	ElseStatement	else		19145	0					
ANR	19301	CompoundStatement		17:8:657:657	19145	0					
ANR	19302	ExpressionStatement	error_type = E_WARNING	2092:2:57548:57570	19145	0	True				
ANR	19303	AssignmentExpression	error_type = E_WARNING		19145	0		=			
ANR	19304	Identifier	error_type		19145	0					
ANR	19305	Identifier	E_WARNING		19145	1					
ANR	19306	IfStatement	if ( ! target_function_table )		19145	13					
ANR	19307	Condition	! target_function_table	2095:5:57581:57602	19145	0	True				
ANR	19308	UnaryOperationExpression	! target_function_table		19145	0					
ANR	19309	UnaryOperator	!		19145	0					
ANR	19310	Identifier	target_function_table		19145	1					
ANR	19311	CompoundStatement		21:29:718:718	19145	1					
ANR	19312	ExpressionStatement	target_function_table = CG ( function_table )	2096:2:57609:57651	19145	0	True				
ANR	19313	AssignmentExpression	target_function_table = CG ( function_table )		19145	0		=			
ANR	19314	Identifier	target_function_table		19145	0					
ANR	19315	CallExpression	CG ( function_table )		19145	1					
ANR	19316	Callee	CG		19145	0					
ANR	19317	Identifier	CG		19145	0					
ANR	19318	ArgumentList	function_table		19145	1					
ANR	19319	Argument	function_table		19145	0					
ANR	19320	Identifier	function_table		19145	0					
ANR	19321	ExpressionStatement	internal_function -> type = ZEND_INTERNAL_FUNCTION	2098:1:57657:57705	19145	14	True				
ANR	19322	AssignmentExpression	internal_function -> type = ZEND_INTERNAL_FUNCTION		19145	0		=			
ANR	19323	PtrMemberAccess	internal_function -> type		19145	0					
ANR	19324	Identifier	internal_function		19145	0					
ANR	19325	Identifier	type		19145	1					
ANR	19326	Identifier	ZEND_INTERNAL_FUNCTION		19145	1					
ANR	19327	ExpressionStatement	internal_function -> module = EG ( current_module )	2099:1:57708:57754	19145	15	True				
ANR	19328	AssignmentExpression	internal_function -> module = EG ( current_module )		19145	0		=			
ANR	19329	PtrMemberAccess	internal_function -> module		19145	0					
ANR	19330	Identifier	internal_function		19145	0					
ANR	19331	Identifier	module		19145	1					
ANR	19332	CallExpression	EG ( current_module )		19145	1					
ANR	19333	Callee	EG		19145	0					
ANR	19334	Identifier	EG		19145	0					
ANR	19335	ArgumentList	current_module		19145	1					
ANR	19336	Argument	current_module		19145	0					
ANR	19337	Identifier	current_module		19145	0					
ANR	19338	IfStatement	if ( scope )		19145	16					
ANR	19339	Condition	scope	2101:5:57762:57766	19145	0	True				
ANR	19340	Identifier	scope		19145	0					
ANR	19341	CompoundStatement		27:12:882:882	19145	1					
ANR	19342	ExpressionStatement	class_name_len = strlen ( scope -> name )	2102:2:57773:57809	19145	0	True				
ANR	19343	AssignmentExpression	class_name_len = strlen ( scope -> name )		19145	0		=			
ANR	19344	Identifier	class_name_len		19145	0					
ANR	19345	CallExpression	strlen ( scope -> name )		19145	1					
ANR	19346	Callee	strlen		19145	0					
ANR	19347	Identifier	strlen		19145	0					
ANR	19348	ArgumentList	scope -> name		19145	1					
ANR	19349	Argument	scope -> name		19145	0					
ANR	19350	PtrMemberAccess	scope -> name		19145	0					
ANR	19351	Identifier	scope		19145	0					
ANR	19352	Identifier	name		19145	1					
ANR	19353	IfStatement	"if ( ( lc_class_name = zend_memrchr ( scope -> name , '\\\\' , class_name_len ) ) )"		19145	1					
ANR	19354	Condition	"lc_class_name = zend_memrchr ( scope -> name , '\\\\' , class_name_len )"	2103:6:57817:57881	19145	0	True				
ANR	19355	AssignmentExpression	"lc_class_name = zend_memrchr ( scope -> name , '\\\\' , class_name_len )"		19145	0		=			
ANR	19356	Identifier	lc_class_name		19145	0					
ANR	19357	CallExpression	"zend_memrchr ( scope -> name , '\\\\' , class_name_len )"		19145	1					
ANR	19358	Callee	zend_memrchr		19145	0					
ANR	19359	Identifier	zend_memrchr		19145	0					
ANR	19360	ArgumentList	scope -> name		19145	1					
ANR	19361	Argument	scope -> name		19145	0					
ANR	19362	PtrMemberAccess	scope -> name		19145	0					
ANR	19363	Identifier	scope		19145	0					
ANR	19364	Identifier	name		19145	1					
ANR	19365	Argument	'\\\\'		19145	1					
ANR	19366	PrimaryExpression	'\\\\'		19145	0					
ANR	19367	Argument	class_name_len		19145	2					
ANR	19368	Identifier	class_name_len		19145	0					
ANR	19369	CompoundStatement		29:73:997:997	19145	1					
ANR	19370	ExpressionStatement	++ lc_class_name	2104:3:57889:57904	19145	0	True				
ANR	19371	UnaryExpression	++ lc_class_name		19145	0					
ANR	19372	IncDec	++		19145	0					
ANR	19373	Identifier	lc_class_name		19145	1					
ANR	19374	ExpressionStatement	class_name_len -= ( lc_class_name - scope -> name )	2105:3:57909:57956	19145	1	True				
ANR	19375	AssignmentExpression	class_name_len -= ( lc_class_name - scope -> name )		19145	0		-=			
ANR	19376	Identifier	class_name_len		19145	0					
ANR	19377	AdditiveExpression	lc_class_name - scope -> name		19145	1		-			
ANR	19378	Identifier	lc_class_name		19145	0					
ANR	19379	PtrMemberAccess	scope -> name		19145	1					
ANR	19380	Identifier	scope		19145	0					
ANR	19381	Identifier	name		19145	1					
ANR	19382	ExpressionStatement	"lc_class_name = zend_str_tolower_dup ( lc_class_name , class_name_len )"	2106:3:57961:58028	19145	2	True				
ANR	19383	AssignmentExpression	"lc_class_name = zend_str_tolower_dup ( lc_class_name , class_name_len )"		19145	0		=			
ANR	19384	Identifier	lc_class_name		19145	0					
ANR	19385	CallExpression	"zend_str_tolower_dup ( lc_class_name , class_name_len )"		19145	1					
ANR	19386	Callee	zend_str_tolower_dup		19145	0					
ANR	19387	Identifier	zend_str_tolower_dup		19145	0					
ANR	19388	ArgumentList	lc_class_name		19145	1					
ANR	19389	Argument	lc_class_name		19145	0					
ANR	19390	Identifier	lc_class_name		19145	0					
ANR	19391	Argument	class_name_len		19145	1					
ANR	19392	Identifier	class_name_len		19145	0					
ANR	19393	ElseStatement	else		19145	0					
ANR	19394	CompoundStatement		33:9:1152:1152	19145	0					
ANR	19395	ExpressionStatement	"lc_class_name = zend_str_tolower_dup ( scope -> name , class_name_len )"	2108:3:58044:58109	19145	0	True				
ANR	19396	AssignmentExpression	"lc_class_name = zend_str_tolower_dup ( scope -> name , class_name_len )"		19145	0		=			
ANR	19397	Identifier	lc_class_name		19145	0					
ANR	19398	CallExpression	"zend_str_tolower_dup ( scope -> name , class_name_len )"		19145	1					
ANR	19399	Callee	zend_str_tolower_dup		19145	0					
ANR	19400	Identifier	zend_str_tolower_dup		19145	0					
ANR	19401	ArgumentList	scope -> name		19145	1					
ANR	19402	Argument	scope -> name		19145	0					
ANR	19403	PtrMemberAccess	scope -> name		19145	0					
ANR	19404	Identifier	scope		19145	0					
ANR	19405	Identifier	name		19145	1					
ANR	19406	Argument	class_name_len		19145	1					
ANR	19407	Identifier	class_name_len		19145	0					
ANR	19408	WhileStatement	while ( ptr -> fname )		19145	17					
ANR	19409	Condition	ptr -> fname	2112:8:58127:58136	19145	0	True				
ANR	19410	PtrMemberAccess	ptr -> fname		19145	0					
ANR	19411	Identifier	ptr		19145	0					
ANR	19412	Identifier	fname		19145	1					
ANR	19413	CompoundStatement		38:20:1252:1252	19145	1					
ANR	19414	ExpressionStatement	internal_function -> handler = ptr -> handler	2113:2:58143:58184	19145	0	True				
ANR	19415	AssignmentExpression	internal_function -> handler = ptr -> handler		19145	0		=			
ANR	19416	PtrMemberAccess	internal_function -> handler		19145	0					
ANR	19417	Identifier	internal_function		19145	0					
ANR	19418	Identifier	handler		19145	1					
ANR	19419	PtrMemberAccess	ptr -> handler		19145	1					
ANR	19420	Identifier	ptr		19145	0					
ANR	19421	Identifier	handler		19145	1					
ANR	19422	ExpressionStatement	internal_function -> function_name = ( char * ) ptr -> fname	2114:2:58188:58240	19145	1	True				
ANR	19423	AssignmentExpression	internal_function -> function_name = ( char * ) ptr -> fname		19145	0		=			
ANR	19424	PtrMemberAccess	internal_function -> function_name		19145	0					
ANR	19425	Identifier	internal_function		19145	0					
ANR	19426	Identifier	function_name		19145	1					
ANR	19427	CastExpression	( char * ) ptr -> fname		19145	1					
ANR	19428	CastTarget	char *		19145	0					
ANR	19429	PtrMemberAccess	ptr -> fname		19145	1					
ANR	19430	Identifier	ptr		19145	0					
ANR	19431	Identifier	fname		19145	1					
ANR	19432	ExpressionStatement	internal_function -> scope = scope	2115:2:58244:58276	19145	2	True				
ANR	19433	AssignmentExpression	internal_function -> scope = scope		19145	0		=			
ANR	19434	PtrMemberAccess	internal_function -> scope		19145	0					
ANR	19435	Identifier	internal_function		19145	0					
ANR	19436	Identifier	scope		19145	1					
ANR	19437	Identifier	scope		19145	1					
ANR	19438	ExpressionStatement	internal_function -> prototype = NULL	2116:2:58280:58315	19145	3	True				
ANR	19439	AssignmentExpression	internal_function -> prototype = NULL		19145	0		=			
ANR	19440	PtrMemberAccess	internal_function -> prototype		19145	0					
ANR	19441	Identifier	internal_function		19145	0					
ANR	19442	Identifier	prototype		19145	1					
ANR	19443	Identifier	NULL		19145	1					
ANR	19444	IfStatement	if ( ptr -> flags )		19145	4					
ANR	19445	Condition	ptr -> flags	2117:6:58323:58332	19145	0	True				
ANR	19446	PtrMemberAccess	ptr -> flags		19145	0					
ANR	19447	Identifier	ptr		19145	0					
ANR	19448	Identifier	flags		19145	1					
ANR	19449	CompoundStatement		43:18:1448:1448	19145	1					
ANR	19450	IfStatement	if ( ! ( ptr -> flags & ZEND_ACC_PPP_MASK ) )		19145	0					
ANR	19451	Condition	! ( ptr -> flags & ZEND_ACC_PPP_MASK )	2118:7:58344:58376	19145	0	True				
ANR	19452	UnaryOperationExpression	! ( ptr -> flags & ZEND_ACC_PPP_MASK )		19145	0					
ANR	19453	UnaryOperator	!		19145	0					
ANR	19454	BitAndExpression	ptr -> flags & ZEND_ACC_PPP_MASK		19145	1		&			
ANR	19455	PtrMemberAccess	ptr -> flags		19145	0					
ANR	19456	Identifier	ptr		19145	0					
ANR	19457	Identifier	flags		19145	1					
ANR	19458	Identifier	ZEND_ACC_PPP_MASK		19145	1					
ANR	19459	CompoundStatement		44:42:1492:1492	19145	1					
ANR	19460	IfStatement	if ( ptr -> flags != ZEND_ACC_DEPRECATED || scope )		19145	0					
ANR	19461	Condition	ptr -> flags != ZEND_ACC_DEPRECATED || scope	2119:8:58389:58430	19145	0	True				
ANR	19462	OrExpression	ptr -> flags != ZEND_ACC_DEPRECATED || scope		19145	0		||			
ANR	19463	EqualityExpression	ptr -> flags != ZEND_ACC_DEPRECATED		19145	0		!=			
ANR	19464	PtrMemberAccess	ptr -> flags		19145	0					
ANR	19465	Identifier	ptr		19145	0					
ANR	19466	Identifier	flags		19145	1					
ANR	19467	Identifier	ZEND_ACC_DEPRECATED		19145	1					
ANR	19468	Identifier	scope		19145	1					
ANR	19469	CompoundStatement		45:52:1546:1546	19145	1					
ANR	19470	ExpressionStatement	"zend_error ( error_type , ""Invalid access level for %s%s%s() - access must be exactly one of public, protected or private"" , scope ? scope -> name : """" , scope ? ""::"" : """" , ptr -> fname )"	2120:5:58440:58617	19145	0	True				
ANR	19471	CallExpression	"zend_error ( error_type , ""Invalid access level for %s%s%s() - access must be exactly one of public, protected or private"" , scope ? scope -> name : """" , scope ? ""::"" : """" , ptr -> fname )"		19145	0					
ANR	19472	Callee	zend_error		19145	0					
ANR	19473	Identifier	zend_error		19145	0					
ANR	19474	ArgumentList	error_type		19145	1					
ANR	19475	Argument	error_type		19145	0					
ANR	19476	Identifier	error_type		19145	0					
ANR	19477	Argument	"""Invalid access level for %s%s%s() - access must be exactly one of public, protected or private"""		19145	1					
ANR	19478	PrimaryExpression	"""Invalid access level for %s%s%s() - access must be exactly one of public, protected or private"""		19145	0					
ANR	19479	Argument	"scope ? scope -> name : """""		19145	2					
ANR	19480	ConditionalExpression	"scope ? scope -> name : """""		19145	0					
ANR	19481	Condition	scope		19145	0					
ANR	19482	Identifier	scope		19145	0					
ANR	19483	PtrMemberAccess	scope -> name		19145	1					
ANR	19484	Identifier	scope		19145	0					
ANR	19485	Identifier	name		19145	1					
ANR	19486	PrimaryExpression	""""""		19145	2					
ANR	19487	Argument	"scope ? ""::"" : """""		19145	3					
ANR	19488	ConditionalExpression	"scope ? ""::"" : """""		19145	0					
ANR	19489	Condition	scope		19145	0					
ANR	19490	Identifier	scope		19145	0					
ANR	19491	PrimaryExpression	"""::"""		19145	1					
ANR	19492	PrimaryExpression	""""""		19145	2					
ANR	19493	Argument	ptr -> fname		19145	4					
ANR	19494	PtrMemberAccess	ptr -> fname		19145	0					
ANR	19495	Identifier	ptr		19145	0					
ANR	19496	Identifier	fname		19145	1					
ANR	19497	ExpressionStatement	internal_function -> fn_flags = ZEND_ACC_PUBLIC | ptr -> flags	2122:4:58629:58687	19145	1	True				
ANR	19498	AssignmentExpression	internal_function -> fn_flags = ZEND_ACC_PUBLIC | ptr -> flags		19145	0		=			
ANR	19499	PtrMemberAccess	internal_function -> fn_flags		19145	0					
ANR	19500	Identifier	internal_function		19145	0					
ANR	19501	Identifier	fn_flags		19145	1					
ANR	19502	InclusiveOrExpression	ZEND_ACC_PUBLIC | ptr -> flags		19145	1		|			
ANR	19503	Identifier	ZEND_ACC_PUBLIC		19145	0					
ANR	19504	PtrMemberAccess	ptr -> flags		19145	1					
ANR	19505	Identifier	ptr		19145	0					
ANR	19506	Identifier	flags		19145	1					
ANR	19507	ElseStatement	else		19145	0					
ANR	19508	CompoundStatement		49:10:1812:1812	19145	0					
ANR	19509	ExpressionStatement	internal_function -> fn_flags = ptr -> flags	2124:4:58705:58745	19145	0	True				
ANR	19510	AssignmentExpression	internal_function -> fn_flags = ptr -> flags		19145	0		=			
ANR	19511	PtrMemberAccess	internal_function -> fn_flags		19145	0					
ANR	19512	Identifier	internal_function		19145	0					
ANR	19513	Identifier	fn_flags		19145	1					
ANR	19514	PtrMemberAccess	ptr -> flags		19145	1					
ANR	19515	Identifier	ptr		19145	0					
ANR	19516	Identifier	flags		19145	1					
ANR	19517	ElseStatement	else		19145	0					
ANR	19518	CompoundStatement		52:9:1874:1874	19145	0					
ANR	19519	ExpressionStatement	internal_function -> fn_flags = ZEND_ACC_PUBLIC	2127:3:58766:58811	19145	0	True				
ANR	19520	AssignmentExpression	internal_function -> fn_flags = ZEND_ACC_PUBLIC		19145	0		=			
ANR	19521	PtrMemberAccess	internal_function -> fn_flags		19145	0					
ANR	19522	Identifier	internal_function		19145	0					
ANR	19523	Identifier	fn_flags		19145	1					
ANR	19524	Identifier	ZEND_ACC_PUBLIC		19145	1					
ANR	19525	IfStatement	if ( ptr -> arg_info )		19145	5					
ANR	19526	Condition	ptr -> arg_info	2129:6:58823:58835	19145	0	True				
ANR	19527	PtrMemberAccess	ptr -> arg_info		19145	0					
ANR	19528	Identifier	ptr		19145	0					
ANR	19529	Identifier	arg_info		19145	1					
ANR	19530	CompoundStatement		56:3:1956:2035	19145	1					
ANR	19531	IdentifierDeclStatement	zend_internal_function_info * info = ( zend_internal_function_info * ) ptr -> arg_info ;	2130:3:58843:58922	19145	0	True				
ANR	19532	IdentifierDecl	* info = ( zend_internal_function_info * ) ptr -> arg_info		19145	0					
ANR	19533	IdentifierDeclType	zend_internal_function_info *		19145	0					
ANR	19534	Identifier	info		19145	1					
ANR	19535	AssignmentExpression	* info = ( zend_internal_function_info * ) ptr -> arg_info		19145	2		=			
ANR	19536	Identifier	info		19145	0					
ANR	19537	CastExpression	( zend_internal_function_info * ) ptr -> arg_info		19145	1					
ANR	19538	CastTarget	zend_internal_function_info *		19145	0					
ANR	19539	PtrMemberAccess	ptr -> arg_info		19145	1					
ANR	19540	Identifier	ptr		19145	0					
ANR	19541	Identifier	arg_info		19145	1					
ANR	19542	ExpressionStatement	internal_function -> arg_info = ( zend_arg_info * ) ptr -> arg_info + 1	2132:3:58928:58989	19145	1	True				
ANR	19543	AssignmentExpression	internal_function -> arg_info = ( zend_arg_info * ) ptr -> arg_info + 1		19145	0		=			
ANR	19544	PtrMemberAccess	internal_function -> arg_info		19145	0					
ANR	19545	Identifier	internal_function		19145	0					
ANR	19546	Identifier	arg_info		19145	1					
ANR	19547	AdditiveExpression	( zend_arg_info * ) ptr -> arg_info + 1		19145	1		+			
ANR	19548	CastExpression	( zend_arg_info * ) ptr -> arg_info		19145	0					
ANR	19549	CastTarget	zend_arg_info *		19145	0					
ANR	19550	PtrMemberAccess	ptr -> arg_info		19145	1					
ANR	19551	Identifier	ptr		19145	0					
ANR	19552	Identifier	arg_info		19145	1					
ANR	19553	PrimaryExpression	1		19145	1					
ANR	19554	ExpressionStatement	internal_function -> num_args = ptr -> num_args	2133:3:58994:59037	19145	2	True				
ANR	19555	AssignmentExpression	internal_function -> num_args = ptr -> num_args		19145	0		=			
ANR	19556	PtrMemberAccess	internal_function -> num_args		19145	0					
ANR	19557	Identifier	internal_function		19145	0					
ANR	19558	Identifier	num_args		19145	1					
ANR	19559	PtrMemberAccess	ptr -> num_args		19145	1					
ANR	19560	Identifier	ptr		19145	0					
ANR	19561	Identifier	num_args		19145	1					
ANR	19562	IfStatement	if ( info -> required_num_args == - 1 )		19145	3					
ANR	19563	Condition	info -> required_num_args == - 1	2135:7:59141:59169	19145	0	True				
ANR	19564	EqualityExpression	info -> required_num_args == - 1		19145	0		==			
ANR	19565	PtrMemberAccess	info -> required_num_args		19145	0					
ANR	19566	Identifier	info		19145	0					
ANR	19567	Identifier	required_num_args		19145	1					
ANR	19568	UnaryOperationExpression	- 1		19145	1					
ANR	19569	UnaryOperator	-		19145	0					
ANR	19570	PrimaryExpression	1		19145	1					
ANR	19571	CompoundStatement		61:38:2285:2285	19145	1					
ANR	19572	ExpressionStatement	internal_function -> required_num_args = ptr -> num_args	2136:4:59178:59230	19145	0	True				
ANR	19573	AssignmentExpression	internal_function -> required_num_args = ptr -> num_args		19145	0		=			
ANR	19574	PtrMemberAccess	internal_function -> required_num_args		19145	0					
ANR	19575	Identifier	internal_function		19145	0					
ANR	19576	Identifier	required_num_args		19145	1					
ANR	19577	PtrMemberAccess	ptr -> num_args		19145	1					
ANR	19578	Identifier	ptr		19145	0					
ANR	19579	Identifier	num_args		19145	1					
ANR	19580	ElseStatement	else		19145	0					
ANR	19581	CompoundStatement		63:10:2355:2355	19145	0					
ANR	19582	ExpressionStatement	internal_function -> required_num_args = info -> required_num_args	2138:4:59248:59310	19145	0	True				
ANR	19583	AssignmentExpression	internal_function -> required_num_args = info -> required_num_args		19145	0		=			
ANR	19584	PtrMemberAccess	internal_function -> required_num_args		19145	0					
ANR	19585	Identifier	internal_function		19145	0					
ANR	19586	Identifier	required_num_args		19145	1					
ANR	19587	PtrMemberAccess	info -> required_num_args		19145	1					
ANR	19588	Identifier	info		19145	0					
ANR	19589	Identifier	required_num_args		19145	1					
ANR	19590	IfStatement	if ( info -> return_reference )		19145	4					
ANR	19591	Condition	info -> return_reference	2140:7:59324:59345	19145	0	True				
ANR	19592	PtrMemberAccess	info -> return_reference		19145	0					
ANR	19593	Identifier	info		19145	0					
ANR	19594	Identifier	return_reference		19145	1					
ANR	19595	CompoundStatement		66:31:2461:2461	19145	1					
ANR	19596	ExpressionStatement	internal_function -> fn_flags |= ZEND_ACC_RETURN_REFERENCE	2141:4:59354:59410	19145	0	True				
ANR	19597	AssignmentExpression	internal_function -> fn_flags |= ZEND_ACC_RETURN_REFERENCE		19145	0		|=			
ANR	19598	PtrMemberAccess	internal_function -> fn_flags		19145	0					
ANR	19599	Identifier	internal_function		19145	0					
ANR	19600	Identifier	fn_flags		19145	1					
ANR	19601	Identifier	ZEND_ACC_RETURN_REFERENCE		19145	1					
ANR	19602	IfStatement	if ( ptr -> arg_info [ ptr -> num_args ] . is_variadic )		19145	5					
ANR	19603	Condition	ptr -> arg_info [ ptr -> num_args ] . is_variadic	2143:7:59424:59463	19145	0	True				
ANR	19604	MemberAccess	ptr -> arg_info [ ptr -> num_args ] . is_variadic		19145	0					
ANR	19605	ArrayIndexing	ptr -> arg_info [ ptr -> num_args ]		19145	0					
ANR	19606	PtrMemberAccess	ptr -> arg_info		19145	0					
ANR	19607	Identifier	ptr		19145	0					
ANR	19608	Identifier	arg_info		19145	1					
ANR	19609	PtrMemberAccess	ptr -> num_args		19145	1					
ANR	19610	Identifier	ptr		19145	0					
ANR	19611	Identifier	num_args		19145	1					
ANR	19612	Identifier	is_variadic		19145	1					
ANR	19613	CompoundStatement		69:49:2579:2579	19145	1					
ANR	19614	ExpressionStatement	internal_function -> fn_flags |= ZEND_ACC_VARIADIC	2144:4:59472:59520	19145	0	True				
ANR	19615	AssignmentExpression	internal_function -> fn_flags |= ZEND_ACC_VARIADIC		19145	0		|=			
ANR	19616	PtrMemberAccess	internal_function -> fn_flags		19145	0					
ANR	19617	Identifier	internal_function		19145	0					
ANR	19618	Identifier	fn_flags		19145	1					
ANR	19619	Identifier	ZEND_ACC_VARIADIC		19145	1					
ANR	19620	ElseStatement	else		19145	0					
ANR	19621	CompoundStatement		72:9:2649:2649	19145	0					
ANR	19622	ExpressionStatement	internal_function -> arg_info = NULL	2147:3:59541:59575	19145	0	True				
ANR	19623	AssignmentExpression	internal_function -> arg_info = NULL		19145	0		=			
ANR	19624	PtrMemberAccess	internal_function -> arg_info		19145	0					
ANR	19625	Identifier	internal_function		19145	0					
ANR	19626	Identifier	arg_info		19145	1					
ANR	19627	Identifier	NULL		19145	1					
ANR	19628	ExpressionStatement	internal_function -> num_args = 0	2148:3:59580:59611	19145	1	True				
ANR	19629	AssignmentExpression	internal_function -> num_args = 0		19145	0		=			
ANR	19630	PtrMemberAccess	internal_function -> num_args		19145	0					
ANR	19631	Identifier	internal_function		19145	0					
ANR	19632	Identifier	num_args		19145	1					
ANR	19633	PrimaryExpression	0		19145	1					
ANR	19634	ExpressionStatement	internal_function -> required_num_args = 0	2149:3:59616:59656	19145	2	True				
ANR	19635	AssignmentExpression	internal_function -> required_num_args = 0		19145	0		=			
ANR	19636	PtrMemberAccess	internal_function -> required_num_args		19145	0					
ANR	19637	Identifier	internal_function		19145	0					
ANR	19638	Identifier	required_num_args		19145	1					
ANR	19639	PrimaryExpression	0		19145	1					
ANR	19640	IfStatement	if ( ptr -> flags & ZEND_ACC_ABSTRACT )		19145	6					
ANR	19641	Condition	ptr -> flags & ZEND_ACC_ABSTRACT	2151:6:59668:59697	19145	0	True				
ANR	19642	BitAndExpression	ptr -> flags & ZEND_ACC_ABSTRACT		19145	0		&			
ANR	19643	PtrMemberAccess	ptr -> flags		19145	0					
ANR	19644	Identifier	ptr		19145	0					
ANR	19645	Identifier	flags		19145	1					
ANR	19646	Identifier	ZEND_ACC_ABSTRACT		19145	1					
ANR	19647	CompoundStatement		77:38:2813:2813	19145	1					
ANR	19648	IfStatement	if ( scope )		19145	0					
ANR	19649	Condition	scope	2152:7:59709:59713	19145	0	True				
ANR	19650	Identifier	scope		19145	0					
ANR	19651	CompoundStatement		78:14:2829:2829	19145	1					
ANR	19652	ExpressionStatement	scope -> ce_flags |= ZEND_ACC_IMPLICIT_ABSTRACT_CLASS	2154:4:59806:59857	19145	0	True				
ANR	19653	AssignmentExpression	scope -> ce_flags |= ZEND_ACC_IMPLICIT_ABSTRACT_CLASS		19145	0		|=			
ANR	19654	PtrMemberAccess	scope -> ce_flags		19145	0					
ANR	19655	Identifier	scope		19145	0					
ANR	19656	Identifier	ce_flags		19145	1					
ANR	19657	Identifier	ZEND_ACC_IMPLICIT_ABSTRACT_CLASS		19145	1					
ANR	19658	IfStatement	if ( ! ( scope -> ce_flags & ZEND_ACC_INTERFACE ) )		19145	1					
ANR	19659	Condition	! ( scope -> ce_flags & ZEND_ACC_INTERFACE )	2155:8:59867:59905	19145	0	True				
ANR	19660	UnaryOperationExpression	! ( scope -> ce_flags & ZEND_ACC_INTERFACE )		19145	0					
ANR	19661	UnaryOperator	!		19145	0					
ANR	19662	BitAndExpression	scope -> ce_flags & ZEND_ACC_INTERFACE		19145	1		&			
ANR	19663	PtrMemberAccess	scope -> ce_flags		19145	0					
ANR	19664	Identifier	scope		19145	0					
ANR	19665	Identifier	ce_flags		19145	1					
ANR	19666	Identifier	ZEND_ACC_INTERFACE		19145	1					
ANR	19667	CompoundStatement		81:49:3021:3021	19145	1					
ANR	19668	ExpressionStatement	scope -> ce_flags |= ZEND_ACC_EXPLICIT_ABSTRACT_CLASS	2159:5:60163:60214	19145	0	True				
ANR	19669	AssignmentExpression	scope -> ce_flags |= ZEND_ACC_EXPLICIT_ABSTRACT_CLASS		19145	0		|=			
ANR	19670	PtrMemberAccess	scope -> ce_flags		19145	0					
ANR	19671	Identifier	scope		19145	0					
ANR	19672	Identifier	ce_flags		19145	1					
ANR	19673	Identifier	ZEND_ACC_EXPLICIT_ABSTRACT_CLASS		19145	1					
ANR	19674	IfStatement	if ( ptr -> flags & ZEND_ACC_STATIC && ( ! scope || ! ( scope -> ce_flags & ZEND_ACC_INTERFACE ) ) )		19145	1					
ANR	19675	Condition	ptr -> flags & ZEND_ACC_STATIC && ( ! scope || ! ( scope -> ce_flags & ZEND_ACC_INTERFACE ) )	2162:7:60234:60316	19145	0	True				
ANR	19676	AndExpression	ptr -> flags & ZEND_ACC_STATIC && ( ! scope || ! ( scope -> ce_flags & ZEND_ACC_INTERFACE ) )		19145	0		&&			
ANR	19677	BitAndExpression	ptr -> flags & ZEND_ACC_STATIC		19145	0		&			
ANR	19678	PtrMemberAccess	ptr -> flags		19145	0					
ANR	19679	Identifier	ptr		19145	0					
ANR	19680	Identifier	flags		19145	1					
ANR	19681	Identifier	ZEND_ACC_STATIC		19145	1					
ANR	19682	OrExpression	! scope || ! ( scope -> ce_flags & ZEND_ACC_INTERFACE )		19145	1		||			
ANR	19683	UnaryOperationExpression	! scope		19145	0					
ANR	19684	UnaryOperator	!		19145	0					
ANR	19685	Identifier	scope		19145	1					
ANR	19686	UnaryOperationExpression	! ( scope -> ce_flags & ZEND_ACC_INTERFACE )		19145	1					
ANR	19687	UnaryOperator	!		19145	0					
ANR	19688	BitAndExpression	scope -> ce_flags & ZEND_ACC_INTERFACE		19145	1		&			
ANR	19689	PtrMemberAccess	scope -> ce_flags		19145	0					
ANR	19690	Identifier	scope		19145	0					
ANR	19691	Identifier	ce_flags		19145	1					
ANR	19692	Identifier	ZEND_ACC_INTERFACE		19145	1					
ANR	19693	CompoundStatement		88:92:3432:3432	19145	1					
ANR	19694	ExpressionStatement	"zend_error ( error_type , ""Static function %s%s%s() cannot be abstract"" , scope ? scope -> name : """" , scope ? ""::"" : """" , ptr -> fname )"	2163:4:60325:60451	19145	0	True				
ANR	19695	CallExpression	"zend_error ( error_type , ""Static function %s%s%s() cannot be abstract"" , scope ? scope -> name : """" , scope ? ""::"" : """" , ptr -> fname )"		19145	0					
ANR	19696	Callee	zend_error		19145	0					
ANR	19697	Identifier	zend_error		19145	0					
ANR	19698	ArgumentList	error_type		19145	1					
ANR	19699	Argument	error_type		19145	0					
ANR	19700	Identifier	error_type		19145	0					
ANR	19701	Argument	"""Static function %s%s%s() cannot be abstract"""		19145	1					
ANR	19702	PrimaryExpression	"""Static function %s%s%s() cannot be abstract"""		19145	0					
ANR	19703	Argument	"scope ? scope -> name : """""		19145	2					
ANR	19704	ConditionalExpression	"scope ? scope -> name : """""		19145	0					
ANR	19705	Condition	scope		19145	0					
ANR	19706	Identifier	scope		19145	0					
ANR	19707	PtrMemberAccess	scope -> name		19145	1					
ANR	19708	Identifier	scope		19145	0					
ANR	19709	Identifier	name		19145	1					
ANR	19710	PrimaryExpression	""""""		19145	2					
ANR	19711	Argument	"scope ? ""::"" : """""		19145	3					
ANR	19712	ConditionalExpression	"scope ? ""::"" : """""		19145	0					
ANR	19713	Condition	scope		19145	0					
ANR	19714	Identifier	scope		19145	0					
ANR	19715	PrimaryExpression	"""::"""		19145	1					
ANR	19716	PrimaryExpression	""""""		19145	2					
ANR	19717	Argument	ptr -> fname		19145	4					
ANR	19718	PtrMemberAccess	ptr -> fname		19145	0					
ANR	19719	Identifier	ptr		19145	0					
ANR	19720	Identifier	fname		19145	1					
ANR	19721	ElseStatement	else		19145	0					
ANR	19722	CompoundStatement		91:9:3580:3580	19145	0					
ANR	19723	IfStatement	if ( scope && ( scope -> ce_flags & ZEND_ACC_INTERFACE ) )		19145	0					
ANR	19724	Condition	scope && ( scope -> ce_flags & ZEND_ACC_INTERFACE )	2166:7:60476:60522	19145	0	True				
ANR	19725	AndExpression	scope && ( scope -> ce_flags & ZEND_ACC_INTERFACE )		19145	0		&&			
ANR	19726	Identifier	scope		19145	0					
ANR	19727	BitAndExpression	scope -> ce_flags & ZEND_ACC_INTERFACE		19145	1		&			
ANR	19728	PtrMemberAccess	scope -> ce_flags		19145	0					
ANR	19729	Identifier	scope		19145	0					
ANR	19730	Identifier	ce_flags		19145	1					
ANR	19731	Identifier	ZEND_ACC_INTERFACE		19145	1					
ANR	19732	CompoundStatement		92:56:3638:3638	19145	1					
ANR	19733	ExpressionStatement	efree ( ( char * ) lc_class_name )	2167:4:60531:60558	19145	0	True				
ANR	19734	CallExpression	efree ( ( char * ) lc_class_name )		19145	0					
ANR	19735	Callee	efree		19145	0					
ANR	19736	Identifier	efree		19145	0					
ANR	19737	ArgumentList	( char * ) lc_class_name		19145	1					
ANR	19738	Argument	( char * ) lc_class_name		19145	0					
ANR	19739	CastExpression	( char * ) lc_class_name		19145	0					
ANR	19740	CastTarget	char *		19145	0					
ANR	19741	Identifier	lc_class_name		19145	1					
ANR	19742	ExpressionStatement	"zend_error ( error_type , ""Interface %s cannot contain non abstract method %s()"" , scope -> name , ptr -> fname )"	2168:4:60564:60667	19145	1	True				
ANR	19743	CallExpression	"zend_error ( error_type , ""Interface %s cannot contain non abstract method %s()"" , scope -> name , ptr -> fname )"		19145	0					
ANR	19744	Callee	zend_error		19145	0					
ANR	19745	Identifier	zend_error		19145	0					
ANR	19746	ArgumentList	error_type		19145	1					
ANR	19747	Argument	error_type		19145	0					
ANR	19748	Identifier	error_type		19145	0					
ANR	19749	Argument	"""Interface %s cannot contain non abstract method %s()"""		19145	1					
ANR	19750	PrimaryExpression	"""Interface %s cannot contain non abstract method %s()"""		19145	0					
ANR	19751	Argument	scope -> name		19145	2					
ANR	19752	PtrMemberAccess	scope -> name		19145	0					
ANR	19753	Identifier	scope		19145	0					
ANR	19754	Identifier	name		19145	1					
ANR	19755	Argument	ptr -> fname		19145	3					
ANR	19756	PtrMemberAccess	ptr -> fname		19145	0					
ANR	19757	Identifier	ptr		19145	0					
ANR	19758	Identifier	fname		19145	1					
ANR	19759	ReturnStatement	return FAILURE ;	2169:4:60673:60687	19145	2	True				
ANR	19760	Identifier	FAILURE		19145	0					
ANR	19761	IfStatement	if ( ! internal_function -> handler )		19145	1					
ANR	19762	Condition	! internal_function -> handler	2171:7:60701:60727	19145	0	True				
ANR	19763	UnaryOperationExpression	! internal_function -> handler		19145	0					
ANR	19764	UnaryOperator	!		19145	0					
ANR	19765	PtrMemberAccess	internal_function -> handler		19145	1					
ANR	19766	Identifier	internal_function		19145	0					
ANR	19767	Identifier	handler		19145	1					
ANR	19768	CompoundStatement		97:36:3843:3843	19145	1					
ANR	19769	IfStatement	if ( scope )		19145	0					
ANR	19770	Condition	scope	2172:8:60740:60744	19145	0	True				
ANR	19771	Identifier	scope		19145	0					
ANR	19772	CompoundStatement		98:15:3860:3860	19145	1					
ANR	19773	ExpressionStatement	efree ( ( char * ) lc_class_name )	2173:5:60754:60781	19145	0	True				
ANR	19774	CallExpression	efree ( ( char * ) lc_class_name )		19145	0					
ANR	19775	Callee	efree		19145	0					
ANR	19776	Identifier	efree		19145	0					
ANR	19777	ArgumentList	( char * ) lc_class_name		19145	1					
ANR	19778	Argument	( char * ) lc_class_name		19145	0					
ANR	19779	CastExpression	( char * ) lc_class_name		19145	0					
ANR	19780	CastTarget	char *		19145	0					
ANR	19781	Identifier	lc_class_name		19145	1					
ANR	19782	ExpressionStatement	"zend_error ( error_type , ""Method %s%s%s() cannot be a NULL function"" , scope ? scope -> name : """" , scope ? ""::"" : """" , ptr -> fname )"	2175:4:60793:60917	19145	1	True				
ANR	19783	CallExpression	"zend_error ( error_type , ""Method %s%s%s() cannot be a NULL function"" , scope ? scope -> name : """" , scope ? ""::"" : """" , ptr -> fname )"		19145	0					
ANR	19784	Callee	zend_error		19145	0					
ANR	19785	Identifier	zend_error		19145	0					
ANR	19786	ArgumentList	error_type		19145	1					
ANR	19787	Argument	error_type		19145	0					
ANR	19788	Identifier	error_type		19145	0					
ANR	19789	Argument	"""Method %s%s%s() cannot be a NULL function"""		19145	1					
ANR	19790	PrimaryExpression	"""Method %s%s%s() cannot be a NULL function"""		19145	0					
ANR	19791	Argument	"scope ? scope -> name : """""		19145	2					
ANR	19792	ConditionalExpression	"scope ? scope -> name : """""		19145	0					
ANR	19793	Condition	scope		19145	0					
ANR	19794	Identifier	scope		19145	0					
ANR	19795	PtrMemberAccess	scope -> name		19145	1					
ANR	19796	Identifier	scope		19145	0					
ANR	19797	Identifier	name		19145	1					
ANR	19798	PrimaryExpression	""""""		19145	2					
ANR	19799	Argument	"scope ? ""::"" : """""		19145	3					
ANR	19800	ConditionalExpression	"scope ? ""::"" : """""		19145	0					
ANR	19801	Condition	scope		19145	0					
ANR	19802	Identifier	scope		19145	0					
ANR	19803	PrimaryExpression	"""::"""		19145	1					
ANR	19804	PrimaryExpression	""""""		19145	2					
ANR	19805	Argument	ptr -> fname		19145	4					
ANR	19806	PtrMemberAccess	ptr -> fname		19145	0					
ANR	19807	Identifier	ptr		19145	0					
ANR	19808	Identifier	fname		19145	1					
ANR	19809	Statement	zend_unregister_functions	2176:4:60923:60947	19145	2	True				
ANR	19810	Statement	(	2176:29:60948:60948	19145	3	True				
ANR	19811	Statement	functions	2176:30:60949:60957	19145	4	True				
ANR	19812	Statement	","	2176:39:60958:60958	19145	5	True				
ANR	19813	Statement	count	2176:41:60960:60964	19145	6	True				
ANR	19814	Statement	","	2176:46:60965:60965	19145	7	True				
ANR	19815	Statement	target_function_table	2176:48:60967:60987	19145	8	True				
ANR	19816	Statement	TSRMLS_CC	2176:70:60989:60997	19145	9	True				
ANR	19817	Statement	)	2176:79:60998:60998	19145	10	True				
ANR	19818	ExpressionStatement		2176:80:60999:60999	19145	11	True				
ANR	19819	ReturnStatement	return FAILURE ;	2177:4:61005:61019	19145	12	True				
ANR	19820	Identifier	FAILURE		19145	0					
ANR	19821	ExpressionStatement	fname_len = strlen ( ptr -> fname )	2180:2:61032:61062	19145	7	True				
ANR	19822	AssignmentExpression	fname_len = strlen ( ptr -> fname )		19145	0		=			
ANR	19823	Identifier	fname_len		19145	0					
ANR	19824	CallExpression	strlen ( ptr -> fname )		19145	1					
ANR	19825	Callee	strlen		19145	0					
ANR	19826	Identifier	strlen		19145	0					
ANR	19827	ArgumentList	ptr -> fname		19145	1					
ANR	19828	Argument	ptr -> fname		19145	0					
ANR	19829	PtrMemberAccess	ptr -> fname		19145	0					
ANR	19830	Identifier	ptr		19145	0					
ANR	19831	Identifier	fname		19145	1					
ANR	19832	Statement	lowercase_name	2181:2:61066:61079	19145	8	True				
ANR	19833	Statement	=	2181:17:61081:61081	19145	9	True				
ANR	19834	Statement	zend_new_interned_string	2181:19:61083:61106	19145	10	True				
ANR	19835	Statement	(	2181:43:61107:61107	19145	11	True				
ANR	19836	Statement	zend_str_tolower_dup	2181:44:61108:61127	19145	12	True				
ANR	19837	Statement	(	2181:64:61128:61128	19145	13	True				
ANR	19838	Statement	ptr	2181:65:61129:61131	19145	14	True				
ANR	19839	Statement	->	2181:68:61132:61133	19145	15	True				
ANR	19840	Statement	fname	2181:70:61134:61138	19145	16	True				
ANR	19841	Statement	","	2181:75:61139:61139	19145	17	True				
ANR	19842	Statement	fname_len	2181:77:61141:61149	19145	18	True				
ANR	19843	Statement	)	2181:86:61150:61150	19145	19	True				
ANR	19844	Statement	","	2181:87:61151:61151	19145	20	True				
ANR	19845	Statement	fname_len	2181:89:61153:61161	19145	21	True				
ANR	19846	Statement	+	2181:99:61163:61163	19145	22	True				
ANR	19847	Statement	1	2181:101:61165:61165	19145	23	True				
ANR	19848	Statement	","	2181:102:61166:61166	19145	24	True				
ANR	19849	Statement	1	2181:104:61168:61168	19145	25	True				
ANR	19850	Statement	TSRMLS_CC	2181:106:61170:61178	19145	26	True				
ANR	19851	Statement	)	2181:115:61179:61179	19145	27	True				
ANR	19852	ExpressionStatement		2181:116:61180:61180	19145	28	True				
ANR	19853	ExpressionStatement	"hash = str_hash ( lowercase_name , fname_len )"	2182:2:61184:61226	19145	29	True				
ANR	19854	AssignmentExpression	"hash = str_hash ( lowercase_name , fname_len )"		19145	0		=			
ANR	19855	Identifier	hash		19145	0					
ANR	19856	CallExpression	"str_hash ( lowercase_name , fname_len )"		19145	1					
ANR	19857	Callee	str_hash		19145	0					
ANR	19858	Identifier	str_hash		19145	0					
ANR	19859	ArgumentList	lowercase_name		19145	1					
ANR	19860	Argument	lowercase_name		19145	0					
ANR	19861	Identifier	lowercase_name		19145	0					
ANR	19862	Argument	fname_len		19145	1					
ANR	19863	Identifier	fname_len		19145	0					
ANR	19864	IfStatement	"if ( zend_hash_quick_add ( target_function_table , lowercase_name , fname_len + 1 , hash , & function , sizeof ( zend_function ) , ( void * * ) & reg_function ) == FAILURE )"		19145	30					
ANR	19865	Condition	"zend_hash_quick_add ( target_function_table , lowercase_name , fname_len + 1 , hash , & function , sizeof ( zend_function ) , ( void * * ) & reg_function ) == FAILURE"	2183:6:61234:61378	19145	0	True				
ANR	19866	EqualityExpression	"zend_hash_quick_add ( target_function_table , lowercase_name , fname_len + 1 , hash , & function , sizeof ( zend_function ) , ( void * * ) & reg_function ) == FAILURE"		19145	0		==			
ANR	19867	CallExpression	"zend_hash_quick_add ( target_function_table , lowercase_name , fname_len + 1 , hash , & function , sizeof ( zend_function ) , ( void * * ) & reg_function )"		19145	0					
ANR	19868	Callee	zend_hash_quick_add		19145	0					
ANR	19869	Identifier	zend_hash_quick_add		19145	0					
ANR	19870	ArgumentList	target_function_table		19145	1					
ANR	19871	Argument	target_function_table		19145	0					
ANR	19872	Identifier	target_function_table		19145	0					
ANR	19873	Argument	lowercase_name		19145	1					
ANR	19874	Identifier	lowercase_name		19145	0					
ANR	19875	Argument	fname_len + 1		19145	2					
ANR	19876	AdditiveExpression	fname_len + 1		19145	0		+			
ANR	19877	Identifier	fname_len		19145	0					
ANR	19878	PrimaryExpression	1		19145	1					
ANR	19879	Argument	hash		19145	3					
ANR	19880	Identifier	hash		19145	0					
ANR	19881	Argument	& function		19145	4					
ANR	19882	UnaryOperationExpression	& function		19145	0					
ANR	19883	UnaryOperator	&		19145	0					
ANR	19884	Identifier	function		19145	1					
ANR	19885	Argument	sizeof ( zend_function )		19145	5					
ANR	19886	SizeofExpression	sizeof ( zend_function )		19145	0					
ANR	19887	Sizeof	sizeof		19145	0					
ANR	19888	SizeofOperand	zend_function		19145	1					
ANR	19889	Argument	( void * * ) & reg_function		19145	6					
ANR	19890	CastExpression	( void * * ) & reg_function		19145	0					
ANR	19891	CastTarget	void * *		19145	0					
ANR	19892	UnaryOperationExpression	& reg_function		19145	1					
ANR	19893	UnaryOperator	&		19145	0					
ANR	19894	Identifier	reg_function		19145	1					
ANR	19895	Identifier	FAILURE		19145	1					
ANR	19896	CompoundStatement		109:153:4494:4494	19145	1					
ANR	19897	ExpressionStatement	unload = 1	2184:3:61386:61394	19145	0	True				
ANR	19898	AssignmentExpression	unload = 1		19145	0		=			
ANR	19899	Identifier	unload		19145	0					
ANR	19900	PrimaryExpression	1		19145	1					
ANR	19901	ExpressionStatement	str_efree ( lowercase_name )	2185:3:61399:61424	19145	1	True				
ANR	19902	CallExpression	str_efree ( lowercase_name )		19145	0					
ANR	19903	Callee	str_efree		19145	0					
ANR	19904	Identifier	str_efree		19145	0					
ANR	19905	ArgumentList	lowercase_name		19145	1					
ANR	19906	Argument	lowercase_name		19145	0					
ANR	19907	Identifier	lowercase_name		19145	0					
ANR	19908	BreakStatement	break ;	2186:3:61429:61434	19145	2	True				
ANR	19909	IfStatement	if ( reg_function -> common . arg_info && reg_function -> common . num_args )		19145	31					
ANR	19910	Condition	reg_function -> common . arg_info && reg_function -> common . num_args	2190:6:61496:61557	19145	0	True				
ANR	19911	AndExpression	reg_function -> common . arg_info && reg_function -> common . num_args		19145	0		&&			
ANR	19912	MemberAccess	reg_function -> common . arg_info		19145	0					
ANR	19913	PtrMemberAccess	reg_function -> common		19145	0					
ANR	19914	Identifier	reg_function		19145	0					
ANR	19915	Identifier	common		19145	1					
ANR	19916	Identifier	arg_info		19145	1					
ANR	19917	MemberAccess	reg_function -> common . num_args		19145	1					
ANR	19918	PtrMemberAccess	reg_function -> common		19145	0					
ANR	19919	Identifier	reg_function		19145	0					
ANR	19920	Identifier	common		19145	1					
ANR	19921	Identifier	num_args		19145	1					
ANR	19922	CompoundStatement		117:3:4678:4683	19145	1					
ANR	19923	IdentifierDeclStatement	int i ;	2191:3:61565:61570	19145	0	True				
ANR	19924	IdentifierDecl	i		19145	0					
ANR	19925	IdentifierDeclType	int		19145	0					
ANR	19926	Identifier	i		19145	1					
ANR	19927	ForStatement	for ( i = 0 ; i < reg_function -> common . num_args ; i ++ )		19145	1					
ANR	19928	ForInit	i = 0 ;	2192:8:61580:61585	19145	0	True				
ANR	19929	AssignmentExpression	i = 0		19145	0		=			
ANR	19930	Identifier	i		19145	0					
ANR	19931	PrimaryExpression	0		19145	1					
ANR	19932	Condition	i < reg_function -> common . num_args	2192:15:61587:61619	19145	1	True				
ANR	19933	RelationalExpression	i < reg_function -> common . num_args		19145	0		<			
ANR	19934	Identifier	i		19145	0					
ANR	19935	MemberAccess	reg_function -> common . num_args		19145	1					
ANR	19936	PtrMemberAccess	reg_function -> common		19145	0					
ANR	19937	Identifier	reg_function		19145	0					
ANR	19938	Identifier	common		19145	1					
ANR	19939	Identifier	num_args		19145	1					
ANR	19940	PostIncDecOperationExpression	i ++	2192:50:61622:61624	19145	2	True				
ANR	19941	Identifier	i		19145	0					
ANR	19942	IncDec	++		19145	1					
ANR	19943	CompoundStatement		118:55:4740:4740	19145	3					
ANR	19944	IfStatement	if ( reg_function -> common . arg_info [ i ] . class_name || reg_function -> common . arg_info [ i ] . type_hint )		19145	0					
ANR	19945	Condition	reg_function -> common . arg_info [ i ] . class_name || reg_function -> common . arg_info [ i ] . type_hint	2193:8:61637:61733	19145	0	True				
ANR	19946	OrExpression	reg_function -> common . arg_info [ i ] . class_name || reg_function -> common . arg_info [ i ] . type_hint		19145	0		||			
ANR	19947	MemberAccess	reg_function -> common . arg_info [ i ] . class_name		19145	0					
ANR	19948	ArrayIndexing	reg_function -> common . arg_info [ i ]		19145	0					
ANR	19949	MemberAccess	reg_function -> common . arg_info		19145	0					
ANR	19950	PtrMemberAccess	reg_function -> common		19145	0					
ANR	19951	Identifier	reg_function		19145	0					
ANR	19952	Identifier	common		19145	1					
ANR	19953	Identifier	arg_info		19145	1					
ANR	19954	Identifier	i		19145	1					
ANR	19955	Identifier	class_name		19145	1					
ANR	19956	MemberAccess	reg_function -> common . arg_info [ i ] . type_hint		19145	1					
ANR	19957	ArrayIndexing	reg_function -> common . arg_info [ i ]		19145	0					
ANR	19958	MemberAccess	reg_function -> common . arg_info		19145	0					
ANR	19959	PtrMemberAccess	reg_function -> common		19145	0					
ANR	19960	Identifier	reg_function		19145	0					
ANR	19961	Identifier	common		19145	1					
ANR	19962	Identifier	arg_info		19145	1					
ANR	19963	Identifier	i		19145	1					
ANR	19964	Identifier	type_hint		19145	1					
ANR	19965	CompoundStatement		120:52:4849:4849	19145	1					
ANR	19966	ExpressionStatement	reg_function -> common . fn_flags |= ZEND_ACC_HAS_TYPE_HINTS	2195:8:61746:61802	19145	0	True				
ANR	19967	AssignmentExpression	reg_function -> common . fn_flags |= ZEND_ACC_HAS_TYPE_HINTS		19145	0		|=			
ANR	19968	MemberAccess	reg_function -> common . fn_flags		19145	0					
ANR	19969	PtrMemberAccess	reg_function -> common		19145	0					
ANR	19970	Identifier	reg_function		19145	0					
ANR	19971	Identifier	common		19145	1					
ANR	19972	Identifier	fn_flags		19145	1					
ANR	19973	Identifier	ZEND_ACC_HAS_TYPE_HINTS		19145	1					
ANR	19974	BreakStatement	break ;	2196:5:61809:61814	19145	1	True				
ANR	19975	IfStatement	if ( scope )		19145	32					
ANR	19976	Condition	scope	2201:6:61838:61842	19145	0	True				
ANR	19977	Identifier	scope		19145	0					
ANR	19978	CompoundStatement		127:13:4958:4958	19145	1					
ANR	19979	IfStatement	"if ( ( fname_len == class_name_len ) && ! ctor && ! memcmp ( lowercase_name , lc_class_name , class_name_len + 1 ) )"		19145	0					
ANR	19980	Condition	"( fname_len == class_name_len ) && ! ctor && ! memcmp ( lowercase_name , lc_class_name , class_name_len + 1 )"	2206:7:61994:62091	19145	0	True				
ANR	19981	AndExpression	"( fname_len == class_name_len ) && ! ctor && ! memcmp ( lowercase_name , lc_class_name , class_name_len + 1 )"		19145	0		&&			
ANR	19982	EqualityExpression	fname_len == class_name_len		19145	0		==			
ANR	19983	Identifier	fname_len		19145	0					
ANR	19984	Identifier	class_name_len		19145	1					
ANR	19985	AndExpression	"! ctor && ! memcmp ( lowercase_name , lc_class_name , class_name_len + 1 )"		19145	1		&&			
ANR	19986	UnaryOperationExpression	! ctor		19145	0					
ANR	19987	UnaryOperator	!		19145	0					
ANR	19988	Identifier	ctor		19145	1					
ANR	19989	UnaryOperationExpression	"! memcmp ( lowercase_name , lc_class_name , class_name_len + 1 )"		19145	1					
ANR	19990	UnaryOperator	!		19145	0					
ANR	19991	CallExpression	"memcmp ( lowercase_name , lc_class_name , class_name_len + 1 )"		19145	1					
ANR	19992	Callee	memcmp		19145	0					
ANR	19993	Identifier	memcmp		19145	0					
ANR	19994	ArgumentList	lowercase_name		19145	1					
ANR	19995	Argument	lowercase_name		19145	0					
ANR	19996	Identifier	lowercase_name		19145	0					
ANR	19997	Argument	lc_class_name		19145	1					
ANR	19998	Identifier	lc_class_name		19145	0					
ANR	19999	Argument	class_name_len + 1		19145	2					
ANR	20000	AdditiveExpression	class_name_len + 1		19145	0		+			
ANR	20001	Identifier	class_name_len		19145	0					
ANR	20002	PrimaryExpression	1		19145	1					
ANR	20003	CompoundStatement		132:107:5207:5207	19145	1					
ANR	20004	ExpressionStatement	ctor = reg_function	2207:4:62100:62119	19145	0	True				
ANR	20005	AssignmentExpression	ctor = reg_function		19145	0		=			
ANR	20006	Identifier	ctor		19145	0					
ANR	20007	Identifier	reg_function		19145	1					
ANR	20008	ElseStatement	else		19145	0					
ANR	20009	IfStatement	"if ( ( fname_len == sizeof ( ZEND_CONSTRUCTOR_FUNC_NAME ) - 1 ) && ! memcmp ( lowercase_name , ZEND_CONSTRUCTOR_FUNC_NAME , sizeof ( ZEND_CONSTRUCTOR_FUNC_NAME ) - 1 ) )"		19145	0					
ANR	20010	Condition	"( fname_len == sizeof ( ZEND_CONSTRUCTOR_FUNC_NAME ) - 1 ) && ! memcmp ( lowercase_name , ZEND_CONSTRUCTOR_FUNC_NAME , sizeof ( ZEND_CONSTRUCTOR_FUNC_NAME ) - 1 )"	2208:14:62135:62280	19145	0	True				
ANR	20011	AndExpression	"( fname_len == sizeof ( ZEND_CONSTRUCTOR_FUNC_NAME ) - 1 ) && ! memcmp ( lowercase_name , ZEND_CONSTRUCTOR_FUNC_NAME , sizeof ( ZEND_CONSTRUCTOR_FUNC_NAME ) - 1 )"		19145	0		&&			
ANR	20012	EqualityExpression	fname_len == sizeof ( ZEND_CONSTRUCTOR_FUNC_NAME ) - 1		19145	0		==			
ANR	20013	Identifier	fname_len		19145	0					
ANR	20014	AdditiveExpression	sizeof ( ZEND_CONSTRUCTOR_FUNC_NAME ) - 1		19145	1		-			
ANR	20015	SizeofExpression	sizeof ( ZEND_CONSTRUCTOR_FUNC_NAME )		19145	0					
ANR	20016	Sizeof	sizeof		19145	0					
ANR	20017	SizeofOperand	ZEND_CONSTRUCTOR_FUNC_NAME		19145	1					
ANR	20018	PrimaryExpression	1		19145	1					
ANR	20019	UnaryOperationExpression	"! memcmp ( lowercase_name , ZEND_CONSTRUCTOR_FUNC_NAME , sizeof ( ZEND_CONSTRUCTOR_FUNC_NAME ) - 1 )"		19145	1					
ANR	20020	UnaryOperator	!		19145	0					
ANR	20021	CallExpression	"memcmp ( lowercase_name , ZEND_CONSTRUCTOR_FUNC_NAME , sizeof ( ZEND_CONSTRUCTOR_FUNC_NAME ) - 1 )"		19145	1					
ANR	20022	Callee	memcmp		19145	0					
ANR	20023	Identifier	memcmp		19145	0					
ANR	20024	ArgumentList	lowercase_name		19145	1					
ANR	20025	Argument	lowercase_name		19145	0					
ANR	20026	Identifier	lowercase_name		19145	0					
ANR	20027	Argument	ZEND_CONSTRUCTOR_FUNC_NAME		19145	1					
ANR	20028	Identifier	ZEND_CONSTRUCTOR_FUNC_NAME		19145	0					
ANR	20029	Argument	sizeof ( ZEND_CONSTRUCTOR_FUNC_NAME ) - 1		19145	2					
ANR	20030	AdditiveExpression	sizeof ( ZEND_CONSTRUCTOR_FUNC_NAME ) - 1		19145	0		-			
ANR	20031	SizeofExpression	sizeof ( ZEND_CONSTRUCTOR_FUNC_NAME )		19145	0					
ANR	20032	Sizeof	sizeof		19145	0					
ANR	20033	SizeofOperand	ZEND_CONSTRUCTOR_FUNC_NAME		19145	1					
ANR	20034	PrimaryExpression	1		19145	1					
ANR	20035	CompoundStatement		134:162:5396:5396	19145	1					
ANR	20036	ExpressionStatement	ctor = reg_function	2209:4:62289:62308	19145	0	True				
ANR	20037	AssignmentExpression	ctor = reg_function		19145	0		=			
ANR	20038	Identifier	ctor		19145	0					
ANR	20039	Identifier	reg_function		19145	1					
ANR	20040	ElseStatement	else		19145	0					
ANR	20041	IfStatement	"if ( ( fname_len == sizeof ( ZEND_DESTRUCTOR_FUNC_NAME ) - 1 ) && ! memcmp ( lowercase_name , ZEND_DESTRUCTOR_FUNC_NAME , sizeof ( ZEND_DESTRUCTOR_FUNC_NAME ) - 1 ) )"		19145	0					
ANR	20042	Condition	"( fname_len == sizeof ( ZEND_DESTRUCTOR_FUNC_NAME ) - 1 ) && ! memcmp ( lowercase_name , ZEND_DESTRUCTOR_FUNC_NAME , sizeof ( ZEND_DESTRUCTOR_FUNC_NAME ) - 1 )"	2210:14:62324:62466	19145	0	True				
ANR	20043	AndExpression	"( fname_len == sizeof ( ZEND_DESTRUCTOR_FUNC_NAME ) - 1 ) && ! memcmp ( lowercase_name , ZEND_DESTRUCTOR_FUNC_NAME , sizeof ( ZEND_DESTRUCTOR_FUNC_NAME ) - 1 )"		19145	0		&&			
ANR	20044	EqualityExpression	fname_len == sizeof ( ZEND_DESTRUCTOR_FUNC_NAME ) - 1		19145	0		==			
ANR	20045	Identifier	fname_len		19145	0					
ANR	20046	AdditiveExpression	sizeof ( ZEND_DESTRUCTOR_FUNC_NAME ) - 1		19145	1		-			
ANR	20047	SizeofExpression	sizeof ( ZEND_DESTRUCTOR_FUNC_NAME )		19145	0					
ANR	20048	Sizeof	sizeof		19145	0					
ANR	20049	SizeofOperand	ZEND_DESTRUCTOR_FUNC_NAME		19145	1					
ANR	20050	PrimaryExpression	1		19145	1					
ANR	20051	UnaryOperationExpression	"! memcmp ( lowercase_name , ZEND_DESTRUCTOR_FUNC_NAME , sizeof ( ZEND_DESTRUCTOR_FUNC_NAME ) - 1 )"		19145	1					
ANR	20052	UnaryOperator	!		19145	0					
ANR	20053	CallExpression	"memcmp ( lowercase_name , ZEND_DESTRUCTOR_FUNC_NAME , sizeof ( ZEND_DESTRUCTOR_FUNC_NAME ) - 1 )"		19145	1					
ANR	20054	Callee	memcmp		19145	0					
ANR	20055	Identifier	memcmp		19145	0					
ANR	20056	ArgumentList	lowercase_name		19145	1					
ANR	20057	Argument	lowercase_name		19145	0					
ANR	20058	Identifier	lowercase_name		19145	0					
ANR	20059	Argument	ZEND_DESTRUCTOR_FUNC_NAME		19145	1					
ANR	20060	Identifier	ZEND_DESTRUCTOR_FUNC_NAME		19145	0					
ANR	20061	Argument	sizeof ( ZEND_DESTRUCTOR_FUNC_NAME ) - 1		19145	2					
ANR	20062	AdditiveExpression	sizeof ( ZEND_DESTRUCTOR_FUNC_NAME ) - 1		19145	0		-			
ANR	20063	SizeofExpression	sizeof ( ZEND_DESTRUCTOR_FUNC_NAME )		19145	0					
ANR	20064	Sizeof	sizeof		19145	0					
ANR	20065	SizeofOperand	ZEND_DESTRUCTOR_FUNC_NAME		19145	1					
ANR	20066	PrimaryExpression	1		19145	1					
ANR	20067	CompoundStatement		136:159:5582:5582	19145	1					
ANR	20068	ExpressionStatement	dtor = reg_function	2211:4:62475:62494	19145	0	True				
ANR	20069	AssignmentExpression	dtor = reg_function		19145	0		=			
ANR	20070	Identifier	dtor		19145	0					
ANR	20071	Identifier	reg_function		19145	1					
ANR	20072	IfStatement	if ( internal_function -> num_args )		19145	1					
ANR	20073	Condition	internal_function -> num_args	2212:8:62504:62530	19145	0	True				
ANR	20074	PtrMemberAccess	internal_function -> num_args		19145	0					
ANR	20075	Identifier	internal_function		19145	0					
ANR	20076	Identifier	num_args		19145	1					
ANR	20077	CompoundStatement		138:37:5646:5646	19145	1					
ANR	20078	ExpressionStatement	"zend_error ( error_type , ""Destructor %s::%s() cannot take arguments"" , scope -> name , ptr -> fname )"	2213:5:62540:62632	19145	0	True				
ANR	20079	CallExpression	"zend_error ( error_type , ""Destructor %s::%s() cannot take arguments"" , scope -> name , ptr -> fname )"		19145	0					
ANR	20080	Callee	zend_error		19145	0					
ANR	20081	Identifier	zend_error		19145	0					
ANR	20082	ArgumentList	error_type		19145	1					
ANR	20083	Argument	error_type		19145	0					
ANR	20084	Identifier	error_type		19145	0					
ANR	20085	Argument	"""Destructor %s::%s() cannot take arguments"""		19145	1					
ANR	20086	PrimaryExpression	"""Destructor %s::%s() cannot take arguments"""		19145	0					
ANR	20087	Argument	scope -> name		19145	2					
ANR	20088	PtrMemberAccess	scope -> name		19145	0					
ANR	20089	Identifier	scope		19145	0					
ANR	20090	Identifier	name		19145	1					
ANR	20091	Argument	ptr -> fname		19145	3					
ANR	20092	PtrMemberAccess	ptr -> fname		19145	0					
ANR	20093	Identifier	ptr		19145	0					
ANR	20094	Identifier	fname		19145	1					
ANR	20095	ElseStatement	else		19145	0					
ANR	20096	IfStatement	"if ( ( fname_len == sizeof ( ZEND_CLONE_FUNC_NAME ) - 1 ) && ! memcmp ( lowercase_name , ZEND_CLONE_FUNC_NAME , sizeof ( ZEND_CLONE_FUNC_NAME ) - 1 ) )"		19145	0					
ANR	20097	Condition	"( fname_len == sizeof ( ZEND_CLONE_FUNC_NAME ) - 1 ) && ! memcmp ( lowercase_name , ZEND_CLONE_FUNC_NAME , sizeof ( ZEND_CLONE_FUNC_NAME ) - 1 )"	2215:14:62654:62781	19145	0	True				
ANR	20098	AndExpression	"( fname_len == sizeof ( ZEND_CLONE_FUNC_NAME ) - 1 ) && ! memcmp ( lowercase_name , ZEND_CLONE_FUNC_NAME , sizeof ( ZEND_CLONE_FUNC_NAME ) - 1 )"		19145	0		&&			
ANR	20099	EqualityExpression	fname_len == sizeof ( ZEND_CLONE_FUNC_NAME ) - 1		19145	0		==			
ANR	20100	Identifier	fname_len		19145	0					
ANR	20101	AdditiveExpression	sizeof ( ZEND_CLONE_FUNC_NAME ) - 1		19145	1		-			
ANR	20102	SizeofExpression	sizeof ( ZEND_CLONE_FUNC_NAME )		19145	0					
ANR	20103	Sizeof	sizeof		19145	0					
ANR	20104	SizeofOperand	ZEND_CLONE_FUNC_NAME		19145	1					
ANR	20105	PrimaryExpression	1		19145	1					
ANR	20106	UnaryOperationExpression	"! memcmp ( lowercase_name , ZEND_CLONE_FUNC_NAME , sizeof ( ZEND_CLONE_FUNC_NAME ) - 1 )"		19145	1					
ANR	20107	UnaryOperator	!		19145	0					
ANR	20108	CallExpression	"memcmp ( lowercase_name , ZEND_CLONE_FUNC_NAME , sizeof ( ZEND_CLONE_FUNC_NAME ) - 1 )"		19145	1					
ANR	20109	Callee	memcmp		19145	0					
ANR	20110	Identifier	memcmp		19145	0					
ANR	20111	ArgumentList	lowercase_name		19145	1					
ANR	20112	Argument	lowercase_name		19145	0					
ANR	20113	Identifier	lowercase_name		19145	0					
ANR	20114	Argument	ZEND_CLONE_FUNC_NAME		19145	1					
ANR	20115	Identifier	ZEND_CLONE_FUNC_NAME		19145	0					
ANR	20116	Argument	sizeof ( ZEND_CLONE_FUNC_NAME ) - 1		19145	2					
ANR	20117	AdditiveExpression	sizeof ( ZEND_CLONE_FUNC_NAME ) - 1		19145	0		-			
ANR	20118	SizeofExpression	sizeof ( ZEND_CLONE_FUNC_NAME )		19145	0					
ANR	20119	Sizeof	sizeof		19145	0					
ANR	20120	SizeofOperand	ZEND_CLONE_FUNC_NAME		19145	1					
ANR	20121	PrimaryExpression	1		19145	1					
ANR	20122	CompoundStatement		141:144:5897:5897	19145	1					
ANR	20123	ExpressionStatement	clone = reg_function	2216:4:62790:62810	19145	0	True				
ANR	20124	AssignmentExpression	clone = reg_function		19145	0		=			
ANR	20125	Identifier	clone		19145	0					
ANR	20126	Identifier	reg_function		19145	1					
ANR	20127	ElseStatement	else		19145	0					
ANR	20128	IfStatement	"if ( ( fname_len == sizeof ( ZEND_CALL_FUNC_NAME ) - 1 ) && ! memcmp ( lowercase_name , ZEND_CALL_FUNC_NAME , sizeof ( ZEND_CALL_FUNC_NAME ) - 1 ) )"		19145	0					
ANR	20129	Condition	"( fname_len == sizeof ( ZEND_CALL_FUNC_NAME ) - 1 ) && ! memcmp ( lowercase_name , ZEND_CALL_FUNC_NAME , sizeof ( ZEND_CALL_FUNC_NAME ) - 1 )"	2217:14:62826:62950	19145	0	True				
ANR	20130	AndExpression	"( fname_len == sizeof ( ZEND_CALL_FUNC_NAME ) - 1 ) && ! memcmp ( lowercase_name , ZEND_CALL_FUNC_NAME , sizeof ( ZEND_CALL_FUNC_NAME ) - 1 )"		19145	0		&&			
ANR	20131	EqualityExpression	fname_len == sizeof ( ZEND_CALL_FUNC_NAME ) - 1		19145	0		==			
ANR	20132	Identifier	fname_len		19145	0					
ANR	20133	AdditiveExpression	sizeof ( ZEND_CALL_FUNC_NAME ) - 1		19145	1		-			
ANR	20134	SizeofExpression	sizeof ( ZEND_CALL_FUNC_NAME )		19145	0					
ANR	20135	Sizeof	sizeof		19145	0					
ANR	20136	SizeofOperand	ZEND_CALL_FUNC_NAME		19145	1					
ANR	20137	PrimaryExpression	1		19145	1					
ANR	20138	UnaryOperationExpression	"! memcmp ( lowercase_name , ZEND_CALL_FUNC_NAME , sizeof ( ZEND_CALL_FUNC_NAME ) - 1 )"		19145	1					
ANR	20139	UnaryOperator	!		19145	0					
ANR	20140	CallExpression	"memcmp ( lowercase_name , ZEND_CALL_FUNC_NAME , sizeof ( ZEND_CALL_FUNC_NAME ) - 1 )"		19145	1					
ANR	20141	Callee	memcmp		19145	0					
ANR	20142	Identifier	memcmp		19145	0					
ANR	20143	ArgumentList	lowercase_name		19145	1					
ANR	20144	Argument	lowercase_name		19145	0					
ANR	20145	Identifier	lowercase_name		19145	0					
ANR	20146	Argument	ZEND_CALL_FUNC_NAME		19145	1					
ANR	20147	Identifier	ZEND_CALL_FUNC_NAME		19145	0					
ANR	20148	Argument	sizeof ( ZEND_CALL_FUNC_NAME ) - 1		19145	2					
ANR	20149	AdditiveExpression	sizeof ( ZEND_CALL_FUNC_NAME ) - 1		19145	0		-			
ANR	20150	SizeofExpression	sizeof ( ZEND_CALL_FUNC_NAME )		19145	0					
ANR	20151	Sizeof	sizeof		19145	0					
ANR	20152	SizeofOperand	ZEND_CALL_FUNC_NAME		19145	1					
ANR	20153	PrimaryExpression	1		19145	1					
ANR	20154	CompoundStatement		143:141:6066:6066	19145	1					
ANR	20155	ExpressionStatement	__call = reg_function	2218:4:62959:62980	19145	0	True				
ANR	20156	AssignmentExpression	__call = reg_function		19145	0		=			
ANR	20157	Identifier	__call		19145	0					
ANR	20158	Identifier	reg_function		19145	1					
ANR	20159	ElseStatement	else		19145	0					
ANR	20160	IfStatement	"if ( ( fname_len == sizeof ( ZEND_CALLSTATIC_FUNC_NAME ) - 1 ) && ! memcmp ( lowercase_name , ZEND_CALLSTATIC_FUNC_NAME , sizeof ( ZEND_CALLSTATIC_FUNC_NAME ) - 1 ) )"		19145	0					
ANR	20161	Condition	"( fname_len == sizeof ( ZEND_CALLSTATIC_FUNC_NAME ) - 1 ) && ! memcmp ( lowercase_name , ZEND_CALLSTATIC_FUNC_NAME , sizeof ( ZEND_CALLSTATIC_FUNC_NAME ) - 1 )"	2219:14:62996:63138	19145	0	True				
ANR	20162	AndExpression	"( fname_len == sizeof ( ZEND_CALLSTATIC_FUNC_NAME ) - 1 ) && ! memcmp ( lowercase_name , ZEND_CALLSTATIC_FUNC_NAME , sizeof ( ZEND_CALLSTATIC_FUNC_NAME ) - 1 )"		19145	0		&&			
ANR	20163	EqualityExpression	fname_len == sizeof ( ZEND_CALLSTATIC_FUNC_NAME ) - 1		19145	0		==			
ANR	20164	Identifier	fname_len		19145	0					
ANR	20165	AdditiveExpression	sizeof ( ZEND_CALLSTATIC_FUNC_NAME ) - 1		19145	1		-			
ANR	20166	SizeofExpression	sizeof ( ZEND_CALLSTATIC_FUNC_NAME )		19145	0					
ANR	20167	Sizeof	sizeof		19145	0					
ANR	20168	SizeofOperand	ZEND_CALLSTATIC_FUNC_NAME		19145	1					
ANR	20169	PrimaryExpression	1		19145	1					
ANR	20170	UnaryOperationExpression	"! memcmp ( lowercase_name , ZEND_CALLSTATIC_FUNC_NAME , sizeof ( ZEND_CALLSTATIC_FUNC_NAME ) - 1 )"		19145	1					
ANR	20171	UnaryOperator	!		19145	0					
ANR	20172	CallExpression	"memcmp ( lowercase_name , ZEND_CALLSTATIC_FUNC_NAME , sizeof ( ZEND_CALLSTATIC_FUNC_NAME ) - 1 )"		19145	1					
ANR	20173	Callee	memcmp		19145	0					
ANR	20174	Identifier	memcmp		19145	0					
ANR	20175	ArgumentList	lowercase_name		19145	1					
ANR	20176	Argument	lowercase_name		19145	0					
ANR	20177	Identifier	lowercase_name		19145	0					
ANR	20178	Argument	ZEND_CALLSTATIC_FUNC_NAME		19145	1					
ANR	20179	Identifier	ZEND_CALLSTATIC_FUNC_NAME		19145	0					
ANR	20180	Argument	sizeof ( ZEND_CALLSTATIC_FUNC_NAME ) - 1		19145	2					
ANR	20181	AdditiveExpression	sizeof ( ZEND_CALLSTATIC_FUNC_NAME ) - 1		19145	0		-			
ANR	20182	SizeofExpression	sizeof ( ZEND_CALLSTATIC_FUNC_NAME )		19145	0					
ANR	20183	Sizeof	sizeof		19145	0					
ANR	20184	SizeofOperand	ZEND_CALLSTATIC_FUNC_NAME		19145	1					
ANR	20185	PrimaryExpression	1		19145	1					
ANR	20186	CompoundStatement		145:159:6254:6254	19145	1					
ANR	20187	ExpressionStatement	__callstatic = reg_function	2220:4:63147:63174	19145	0	True				
ANR	20188	AssignmentExpression	__callstatic = reg_function		19145	0		=			
ANR	20189	Identifier	__callstatic		19145	0					
ANR	20190	Identifier	reg_function		19145	1					
ANR	20191	ElseStatement	else		19145	0					
ANR	20192	IfStatement	"if ( ( fname_len == sizeof ( ZEND_TOSTRING_FUNC_NAME ) - 1 ) && ! memcmp ( lowercase_name , ZEND_TOSTRING_FUNC_NAME , sizeof ( ZEND_TOSTRING_FUNC_NAME ) - 1 ) )"		19145	0					
ANR	20193	Condition	"( fname_len == sizeof ( ZEND_TOSTRING_FUNC_NAME ) - 1 ) && ! memcmp ( lowercase_name , ZEND_TOSTRING_FUNC_NAME , sizeof ( ZEND_TOSTRING_FUNC_NAME ) - 1 )"	2221:14:63190:63326	19145	0	True				
ANR	20194	AndExpression	"( fname_len == sizeof ( ZEND_TOSTRING_FUNC_NAME ) - 1 ) && ! memcmp ( lowercase_name , ZEND_TOSTRING_FUNC_NAME , sizeof ( ZEND_TOSTRING_FUNC_NAME ) - 1 )"		19145	0		&&			
ANR	20195	EqualityExpression	fname_len == sizeof ( ZEND_TOSTRING_FUNC_NAME ) - 1		19145	0		==			
ANR	20196	Identifier	fname_len		19145	0					
ANR	20197	AdditiveExpression	sizeof ( ZEND_TOSTRING_FUNC_NAME ) - 1		19145	1		-			
ANR	20198	SizeofExpression	sizeof ( ZEND_TOSTRING_FUNC_NAME )		19145	0					
ANR	20199	Sizeof	sizeof		19145	0					
ANR	20200	SizeofOperand	ZEND_TOSTRING_FUNC_NAME		19145	1					
ANR	20201	PrimaryExpression	1		19145	1					
ANR	20202	UnaryOperationExpression	"! memcmp ( lowercase_name , ZEND_TOSTRING_FUNC_NAME , sizeof ( ZEND_TOSTRING_FUNC_NAME ) - 1 )"		19145	1					
ANR	20203	UnaryOperator	!		19145	0					
ANR	20204	CallExpression	"memcmp ( lowercase_name , ZEND_TOSTRING_FUNC_NAME , sizeof ( ZEND_TOSTRING_FUNC_NAME ) - 1 )"		19145	1					
ANR	20205	Callee	memcmp		19145	0					
ANR	20206	Identifier	memcmp		19145	0					
ANR	20207	ArgumentList	lowercase_name		19145	1					
ANR	20208	Argument	lowercase_name		19145	0					
ANR	20209	Identifier	lowercase_name		19145	0					
ANR	20210	Argument	ZEND_TOSTRING_FUNC_NAME		19145	1					
ANR	20211	Identifier	ZEND_TOSTRING_FUNC_NAME		19145	0					
ANR	20212	Argument	sizeof ( ZEND_TOSTRING_FUNC_NAME ) - 1		19145	2					
ANR	20213	AdditiveExpression	sizeof ( ZEND_TOSTRING_FUNC_NAME ) - 1		19145	0		-			
ANR	20214	SizeofExpression	sizeof ( ZEND_TOSTRING_FUNC_NAME )		19145	0					
ANR	20215	Sizeof	sizeof		19145	0					
ANR	20216	SizeofOperand	ZEND_TOSTRING_FUNC_NAME		19145	1					
ANR	20217	PrimaryExpression	1		19145	1					
ANR	20218	CompoundStatement		147:153:6442:6442	19145	1					
ANR	20219	ExpressionStatement	__tostring = reg_function	2222:4:63335:63360	19145	0	True				
ANR	20220	AssignmentExpression	__tostring = reg_function		19145	0		=			
ANR	20221	Identifier	__tostring		19145	0					
ANR	20222	Identifier	reg_function		19145	1					
ANR	20223	ElseStatement	else		19145	0					
ANR	20224	IfStatement	"if ( ( fname_len == sizeof ( ZEND_GET_FUNC_NAME ) - 1 ) && ! memcmp ( lowercase_name , ZEND_GET_FUNC_NAME , sizeof ( ZEND_GET_FUNC_NAME ) - 1 ) )"		19145	0					
ANR	20225	Condition	"( fname_len == sizeof ( ZEND_GET_FUNC_NAME ) - 1 ) && ! memcmp ( lowercase_name , ZEND_GET_FUNC_NAME , sizeof ( ZEND_GET_FUNC_NAME ) - 1 )"	2223:14:63376:63497	19145	0	True				
ANR	20226	AndExpression	"( fname_len == sizeof ( ZEND_GET_FUNC_NAME ) - 1 ) && ! memcmp ( lowercase_name , ZEND_GET_FUNC_NAME , sizeof ( ZEND_GET_FUNC_NAME ) - 1 )"		19145	0		&&			
ANR	20227	EqualityExpression	fname_len == sizeof ( ZEND_GET_FUNC_NAME ) - 1		19145	0		==			
ANR	20228	Identifier	fname_len		19145	0					
ANR	20229	AdditiveExpression	sizeof ( ZEND_GET_FUNC_NAME ) - 1		19145	1		-			
ANR	20230	SizeofExpression	sizeof ( ZEND_GET_FUNC_NAME )		19145	0					
ANR	20231	Sizeof	sizeof		19145	0					
ANR	20232	SizeofOperand	ZEND_GET_FUNC_NAME		19145	1					
ANR	20233	PrimaryExpression	1		19145	1					
ANR	20234	UnaryOperationExpression	"! memcmp ( lowercase_name , ZEND_GET_FUNC_NAME , sizeof ( ZEND_GET_FUNC_NAME ) - 1 )"		19145	1					
ANR	20235	UnaryOperator	!		19145	0					
ANR	20236	CallExpression	"memcmp ( lowercase_name , ZEND_GET_FUNC_NAME , sizeof ( ZEND_GET_FUNC_NAME ) - 1 )"		19145	1					
ANR	20237	Callee	memcmp		19145	0					
ANR	20238	Identifier	memcmp		19145	0					
ANR	20239	ArgumentList	lowercase_name		19145	1					
ANR	20240	Argument	lowercase_name		19145	0					
ANR	20241	Identifier	lowercase_name		19145	0					
ANR	20242	Argument	ZEND_GET_FUNC_NAME		19145	1					
ANR	20243	Identifier	ZEND_GET_FUNC_NAME		19145	0					
ANR	20244	Argument	sizeof ( ZEND_GET_FUNC_NAME ) - 1		19145	2					
ANR	20245	AdditiveExpression	sizeof ( ZEND_GET_FUNC_NAME ) - 1		19145	0		-			
ANR	20246	SizeofExpression	sizeof ( ZEND_GET_FUNC_NAME )		19145	0					
ANR	20247	Sizeof	sizeof		19145	0					
ANR	20248	SizeofOperand	ZEND_GET_FUNC_NAME		19145	1					
ANR	20249	PrimaryExpression	1		19145	1					
ANR	20250	CompoundStatement		149:138:6613:6613	19145	1					
ANR	20251	ExpressionStatement	__get = reg_function	2224:4:63506:63526	19145	0	True				
ANR	20252	AssignmentExpression	__get = reg_function		19145	0		=			
ANR	20253	Identifier	__get		19145	0					
ANR	20254	Identifier	reg_function		19145	1					
ANR	20255	ElseStatement	else		19145	0					
ANR	20256	IfStatement	"if ( ( fname_len == sizeof ( ZEND_SET_FUNC_NAME ) - 1 ) && ! memcmp ( lowercase_name , ZEND_SET_FUNC_NAME , sizeof ( ZEND_SET_FUNC_NAME ) - 1 ) )"		19145	0					
ANR	20257	Condition	"( fname_len == sizeof ( ZEND_SET_FUNC_NAME ) - 1 ) && ! memcmp ( lowercase_name , ZEND_SET_FUNC_NAME , sizeof ( ZEND_SET_FUNC_NAME ) - 1 )"	2225:14:63542:63663	19145	0	True				
ANR	20258	AndExpression	"( fname_len == sizeof ( ZEND_SET_FUNC_NAME ) - 1 ) && ! memcmp ( lowercase_name , ZEND_SET_FUNC_NAME , sizeof ( ZEND_SET_FUNC_NAME ) - 1 )"		19145	0		&&			
ANR	20259	EqualityExpression	fname_len == sizeof ( ZEND_SET_FUNC_NAME ) - 1		19145	0		==			
ANR	20260	Identifier	fname_len		19145	0					
ANR	20261	AdditiveExpression	sizeof ( ZEND_SET_FUNC_NAME ) - 1		19145	1		-			
ANR	20262	SizeofExpression	sizeof ( ZEND_SET_FUNC_NAME )		19145	0					
ANR	20263	Sizeof	sizeof		19145	0					
ANR	20264	SizeofOperand	ZEND_SET_FUNC_NAME		19145	1					
ANR	20265	PrimaryExpression	1		19145	1					
ANR	20266	UnaryOperationExpression	"! memcmp ( lowercase_name , ZEND_SET_FUNC_NAME , sizeof ( ZEND_SET_FUNC_NAME ) - 1 )"		19145	1					
ANR	20267	UnaryOperator	!		19145	0					
ANR	20268	CallExpression	"memcmp ( lowercase_name , ZEND_SET_FUNC_NAME , sizeof ( ZEND_SET_FUNC_NAME ) - 1 )"		19145	1					
ANR	20269	Callee	memcmp		19145	0					
ANR	20270	Identifier	memcmp		19145	0					
ANR	20271	ArgumentList	lowercase_name		19145	1					
ANR	20272	Argument	lowercase_name		19145	0					
ANR	20273	Identifier	lowercase_name		19145	0					
ANR	20274	Argument	ZEND_SET_FUNC_NAME		19145	1					
ANR	20275	Identifier	ZEND_SET_FUNC_NAME		19145	0					
ANR	20276	Argument	sizeof ( ZEND_SET_FUNC_NAME ) - 1		19145	2					
ANR	20277	AdditiveExpression	sizeof ( ZEND_SET_FUNC_NAME ) - 1		19145	0		-			
ANR	20278	SizeofExpression	sizeof ( ZEND_SET_FUNC_NAME )		19145	0					
ANR	20279	Sizeof	sizeof		19145	0					
ANR	20280	SizeofOperand	ZEND_SET_FUNC_NAME		19145	1					
ANR	20281	PrimaryExpression	1		19145	1					
ANR	20282	CompoundStatement		151:138:6779:6779	19145	1					
ANR	20283	ExpressionStatement	__set = reg_function	2226:4:63672:63692	19145	0	True				
ANR	20284	AssignmentExpression	__set = reg_function		19145	0		=			
ANR	20285	Identifier	__set		19145	0					
ANR	20286	Identifier	reg_function		19145	1					
ANR	20287	ElseStatement	else		19145	0					
ANR	20288	IfStatement	"if ( ( fname_len == sizeof ( ZEND_UNSET_FUNC_NAME ) - 1 ) && ! memcmp ( lowercase_name , ZEND_UNSET_FUNC_NAME , sizeof ( ZEND_UNSET_FUNC_NAME ) - 1 ) )"		19145	0					
ANR	20289	Condition	"( fname_len == sizeof ( ZEND_UNSET_FUNC_NAME ) - 1 ) && ! memcmp ( lowercase_name , ZEND_UNSET_FUNC_NAME , sizeof ( ZEND_UNSET_FUNC_NAME ) - 1 )"	2227:14:63708:63835	19145	0	True				
ANR	20290	AndExpression	"( fname_len == sizeof ( ZEND_UNSET_FUNC_NAME ) - 1 ) && ! memcmp ( lowercase_name , ZEND_UNSET_FUNC_NAME , sizeof ( ZEND_UNSET_FUNC_NAME ) - 1 )"		19145	0		&&			
ANR	20291	EqualityExpression	fname_len == sizeof ( ZEND_UNSET_FUNC_NAME ) - 1		19145	0		==			
ANR	20292	Identifier	fname_len		19145	0					
ANR	20293	AdditiveExpression	sizeof ( ZEND_UNSET_FUNC_NAME ) - 1		19145	1		-			
ANR	20294	SizeofExpression	sizeof ( ZEND_UNSET_FUNC_NAME )		19145	0					
ANR	20295	Sizeof	sizeof		19145	0					
ANR	20296	SizeofOperand	ZEND_UNSET_FUNC_NAME		19145	1					
ANR	20297	PrimaryExpression	1		19145	1					
ANR	20298	UnaryOperationExpression	"! memcmp ( lowercase_name , ZEND_UNSET_FUNC_NAME , sizeof ( ZEND_UNSET_FUNC_NAME ) - 1 )"		19145	1					
ANR	20299	UnaryOperator	!		19145	0					
ANR	20300	CallExpression	"memcmp ( lowercase_name , ZEND_UNSET_FUNC_NAME , sizeof ( ZEND_UNSET_FUNC_NAME ) - 1 )"		19145	1					
ANR	20301	Callee	memcmp		19145	0					
ANR	20302	Identifier	memcmp		19145	0					
ANR	20303	ArgumentList	lowercase_name		19145	1					
ANR	20304	Argument	lowercase_name		19145	0					
ANR	20305	Identifier	lowercase_name		19145	0					
ANR	20306	Argument	ZEND_UNSET_FUNC_NAME		19145	1					
ANR	20307	Identifier	ZEND_UNSET_FUNC_NAME		19145	0					
ANR	20308	Argument	sizeof ( ZEND_UNSET_FUNC_NAME ) - 1		19145	2					
ANR	20309	AdditiveExpression	sizeof ( ZEND_UNSET_FUNC_NAME ) - 1		19145	0		-			
ANR	20310	SizeofExpression	sizeof ( ZEND_UNSET_FUNC_NAME )		19145	0					
ANR	20311	Sizeof	sizeof		19145	0					
ANR	20312	SizeofOperand	ZEND_UNSET_FUNC_NAME		19145	1					
ANR	20313	PrimaryExpression	1		19145	1					
ANR	20314	CompoundStatement		153:144:6951:6951	19145	1					
ANR	20315	ExpressionStatement	__unset = reg_function	2228:4:63844:63866	19145	0	True				
ANR	20316	AssignmentExpression	__unset = reg_function		19145	0		=			
ANR	20317	Identifier	__unset		19145	0					
ANR	20318	Identifier	reg_function		19145	1					
ANR	20319	ElseStatement	else		19145	0					
ANR	20320	IfStatement	"if ( ( fname_len == sizeof ( ZEND_ISSET_FUNC_NAME ) - 1 ) && ! memcmp ( lowercase_name , ZEND_ISSET_FUNC_NAME , sizeof ( ZEND_ISSET_FUNC_NAME ) - 1 ) )"		19145	0					
ANR	20321	Condition	"( fname_len == sizeof ( ZEND_ISSET_FUNC_NAME ) - 1 ) && ! memcmp ( lowercase_name , ZEND_ISSET_FUNC_NAME , sizeof ( ZEND_ISSET_FUNC_NAME ) - 1 )"	2229:14:63882:64009	19145	0	True				
ANR	20322	AndExpression	"( fname_len == sizeof ( ZEND_ISSET_FUNC_NAME ) - 1 ) && ! memcmp ( lowercase_name , ZEND_ISSET_FUNC_NAME , sizeof ( ZEND_ISSET_FUNC_NAME ) - 1 )"		19145	0		&&			
ANR	20323	EqualityExpression	fname_len == sizeof ( ZEND_ISSET_FUNC_NAME ) - 1		19145	0		==			
ANR	20324	Identifier	fname_len		19145	0					
ANR	20325	AdditiveExpression	sizeof ( ZEND_ISSET_FUNC_NAME ) - 1		19145	1		-			
ANR	20326	SizeofExpression	sizeof ( ZEND_ISSET_FUNC_NAME )		19145	0					
ANR	20327	Sizeof	sizeof		19145	0					
ANR	20328	SizeofOperand	ZEND_ISSET_FUNC_NAME		19145	1					
ANR	20329	PrimaryExpression	1		19145	1					
ANR	20330	UnaryOperationExpression	"! memcmp ( lowercase_name , ZEND_ISSET_FUNC_NAME , sizeof ( ZEND_ISSET_FUNC_NAME ) - 1 )"		19145	1					
ANR	20331	UnaryOperator	!		19145	0					
ANR	20332	CallExpression	"memcmp ( lowercase_name , ZEND_ISSET_FUNC_NAME , sizeof ( ZEND_ISSET_FUNC_NAME ) - 1 )"		19145	1					
ANR	20333	Callee	memcmp		19145	0					
ANR	20334	Identifier	memcmp		19145	0					
ANR	20335	ArgumentList	lowercase_name		19145	1					
ANR	20336	Argument	lowercase_name		19145	0					
ANR	20337	Identifier	lowercase_name		19145	0					
ANR	20338	Argument	ZEND_ISSET_FUNC_NAME		19145	1					
ANR	20339	Identifier	ZEND_ISSET_FUNC_NAME		19145	0					
ANR	20340	Argument	sizeof ( ZEND_ISSET_FUNC_NAME ) - 1		19145	2					
ANR	20341	AdditiveExpression	sizeof ( ZEND_ISSET_FUNC_NAME ) - 1		19145	0		-			
ANR	20342	SizeofExpression	sizeof ( ZEND_ISSET_FUNC_NAME )		19145	0					
ANR	20343	Sizeof	sizeof		19145	0					
ANR	20344	SizeofOperand	ZEND_ISSET_FUNC_NAME		19145	1					
ANR	20345	PrimaryExpression	1		19145	1					
ANR	20346	CompoundStatement		155:144:7125:7125	19145	1					
ANR	20347	ExpressionStatement	__isset = reg_function	2230:4:64018:64040	19145	0	True				
ANR	20348	AssignmentExpression	__isset = reg_function		19145	0		=			
ANR	20349	Identifier	__isset		19145	0					
ANR	20350	Identifier	reg_function		19145	1					
ANR	20351	ElseStatement	else		19145	0					
ANR	20352	IfStatement	"if ( ( fname_len == sizeof ( ZEND_DEBUGINFO_FUNC_NAME ) - 1 ) && ! memcmp ( lowercase_name , ZEND_DEBUGINFO_FUNC_NAME , sizeof ( ZEND_DEBUGINFO_FUNC_NAME ) - 1 ) )"		19145	0					
ANR	20353	Condition	"( fname_len == sizeof ( ZEND_DEBUGINFO_FUNC_NAME ) - 1 ) && ! memcmp ( lowercase_name , ZEND_DEBUGINFO_FUNC_NAME , sizeof ( ZEND_DEBUGINFO_FUNC_NAME ) - 1 )"	2231:14:64056:64195	19145	0	True				
ANR	20354	AndExpression	"( fname_len == sizeof ( ZEND_DEBUGINFO_FUNC_NAME ) - 1 ) && ! memcmp ( lowercase_name , ZEND_DEBUGINFO_FUNC_NAME , sizeof ( ZEND_DEBUGINFO_FUNC_NAME ) - 1 )"		19145	0		&&			
ANR	20355	EqualityExpression	fname_len == sizeof ( ZEND_DEBUGINFO_FUNC_NAME ) - 1		19145	0		==			
ANR	20356	Identifier	fname_len		19145	0					
ANR	20357	AdditiveExpression	sizeof ( ZEND_DEBUGINFO_FUNC_NAME ) - 1		19145	1		-			
ANR	20358	SizeofExpression	sizeof ( ZEND_DEBUGINFO_FUNC_NAME )		19145	0					
ANR	20359	Sizeof	sizeof		19145	0					
ANR	20360	SizeofOperand	ZEND_DEBUGINFO_FUNC_NAME		19145	1					
ANR	20361	PrimaryExpression	1		19145	1					
ANR	20362	UnaryOperationExpression	"! memcmp ( lowercase_name , ZEND_DEBUGINFO_FUNC_NAME , sizeof ( ZEND_DEBUGINFO_FUNC_NAME ) - 1 )"		19145	1					
ANR	20363	UnaryOperator	!		19145	0					
ANR	20364	CallExpression	"memcmp ( lowercase_name , ZEND_DEBUGINFO_FUNC_NAME , sizeof ( ZEND_DEBUGINFO_FUNC_NAME ) - 1 )"		19145	1					
ANR	20365	Callee	memcmp		19145	0					
ANR	20366	Identifier	memcmp		19145	0					
ANR	20367	ArgumentList	lowercase_name		19145	1					
ANR	20368	Argument	lowercase_name		19145	0					
ANR	20369	Identifier	lowercase_name		19145	0					
ANR	20370	Argument	ZEND_DEBUGINFO_FUNC_NAME		19145	1					
ANR	20371	Identifier	ZEND_DEBUGINFO_FUNC_NAME		19145	0					
ANR	20372	Argument	sizeof ( ZEND_DEBUGINFO_FUNC_NAME ) - 1		19145	2					
ANR	20373	AdditiveExpression	sizeof ( ZEND_DEBUGINFO_FUNC_NAME ) - 1		19145	0		-			
ANR	20374	SizeofExpression	sizeof ( ZEND_DEBUGINFO_FUNC_NAME )		19145	0					
ANR	20375	Sizeof	sizeof		19145	0					
ANR	20376	SizeofOperand	ZEND_DEBUGINFO_FUNC_NAME		19145	1					
ANR	20377	PrimaryExpression	1		19145	1					
ANR	20378	CompoundStatement		157:156:7311:7311	19145	1					
ANR	20379	ExpressionStatement	__debugInfo = reg_function	2232:4:64204:64230	19145	0	True				
ANR	20380	AssignmentExpression	__debugInfo = reg_function		19145	0		=			
ANR	20381	Identifier	__debugInfo		19145	0					
ANR	20382	Identifier	reg_function		19145	1					
ANR	20383	ElseStatement	else		19145	0					
ANR	20384	CompoundStatement		159:10:7355:7355	19145	0					
ANR	20385	ExpressionStatement	reg_function = NULL	2234:4:64248:64267	19145	0	True				
ANR	20386	AssignmentExpression	reg_function = NULL		19145	0		=			
ANR	20387	Identifier	reg_function		19145	0					
ANR	20388	Identifier	NULL		19145	1					
ANR	20389	IfStatement	if ( reg_function )		19145	1					
ANR	20390	Condition	reg_function	2236:7:64281:64292	19145	0	True				
ANR	20391	Identifier	reg_function		19145	0					
ANR	20392	CompoundStatement		162:21:7408:7408	19145	1					
ANR	20393	Statement	zend_check_magic_method_implementation	2237:4:64301:64338	19145	0	True				
ANR	20394	Statement	(	2237:42:64339:64339	19145	1	True				
ANR	20395	Statement	scope	2237:43:64340:64344	19145	2	True				
ANR	20396	Statement	","	2237:48:64345:64345	19145	3	True				
ANR	20397	Statement	reg_function	2237:50:64347:64358	19145	4	True				
ANR	20398	Statement	","	2237:62:64359:64359	19145	5	True				
ANR	20399	Statement	error_type	2237:64:64361:64370	19145	6	True				
ANR	20400	Statement	TSRMLS_CC	2237:75:64372:64380	19145	7	True				
ANR	20401	Statement	)	2237:84:64381:64381	19145	8	True				
ANR	20402	ExpressionStatement		2237:85:64382:64382	19145	9	True				
ANR	20403	ExpressionStatement	ptr ++	2240:2:64395:64400	19145	33	True				
ANR	20404	PostIncDecOperationExpression	ptr ++		19145	0					
ANR	20405	Identifier	ptr		19145	0					
ANR	20406	IncDec	++		19145	1					
ANR	20407	ExpressionStatement	count ++	2241:2:64404:64411	19145	34	True				
ANR	20408	PostIncDecOperationExpression	count ++		19145	0					
ANR	20409	Identifier	count		19145	0					
ANR	20410	IncDec	++		19145	1					
ANR	20411	ExpressionStatement	str_efree ( lowercase_name )	2242:2:64415:64440	19145	35	True				
ANR	20412	CallExpression	str_efree ( lowercase_name )		19145	0					
ANR	20413	Callee	str_efree		19145	0					
ANR	20414	Identifier	str_efree		19145	0					
ANR	20415	ArgumentList	lowercase_name		19145	1					
ANR	20416	Argument	lowercase_name		19145	0					
ANR	20417	Identifier	lowercase_name		19145	0					
ANR	20418	IfStatement	if ( unload )		19145	18					
ANR	20419	Condition	unload	2244:5:64450:64455	19145	0	True				
ANR	20420	Identifier	unload		19145	0					
ANR	20421	CompoundStatement		170:13:7571:7571	19145	1					
ANR	20422	IfStatement	if ( scope )		19145	0					
ANR	20423	Condition	scope	2245:6:64539:64543	19145	0	True				
ANR	20424	Identifier	scope		19145	0					
ANR	20425	CompoundStatement		171:13:7659:7659	19145	1					
ANR	20426	ExpressionStatement	efree ( ( char * ) lc_class_name )	2246:3:64551:64578	19145	0	True				
ANR	20427	CallExpression	efree ( ( char * ) lc_class_name )		19145	0					
ANR	20428	Callee	efree		19145	0					
ANR	20429	Identifier	efree		19145	0					
ANR	20430	ArgumentList	( char * ) lc_class_name		19145	1					
ANR	20431	Argument	( char * ) lc_class_name		19145	0					
ANR	20432	CastExpression	( char * ) lc_class_name		19145	0					
ANR	20433	CastTarget	char *		19145	0					
ANR	20434	Identifier	lc_class_name		19145	1					
ANR	20435	WhileStatement	while ( ptr -> fname )		19145	1					
ANR	20436	Condition	ptr -> fname	2248:9:64593:64602	19145	0	True				
ANR	20437	PtrMemberAccess	ptr -> fname		19145	0					
ANR	20438	Identifier	ptr		19145	0					
ANR	20439	Identifier	fname		19145	1					
ANR	20440	CompoundStatement		174:21:7718:7718	19145	1					
ANR	20441	ExpressionStatement	fname_len = strlen ( ptr -> fname )	2249:3:64610:64640	19145	0	True				
ANR	20442	AssignmentExpression	fname_len = strlen ( ptr -> fname )		19145	0		=			
ANR	20443	Identifier	fname_len		19145	0					
ANR	20444	CallExpression	strlen ( ptr -> fname )		19145	1					
ANR	20445	Callee	strlen		19145	0					
ANR	20446	Identifier	strlen		19145	0					
ANR	20447	ArgumentList	ptr -> fname		19145	1					
ANR	20448	Argument	ptr -> fname		19145	0					
ANR	20449	PtrMemberAccess	ptr -> fname		19145	0					
ANR	20450	Identifier	ptr		19145	0					
ANR	20451	Identifier	fname		19145	1					
ANR	20452	ExpressionStatement	"lowercase_name = zend_str_tolower_dup ( ptr -> fname , fname_len )"	2250:3:64645:64705	19145	1	True				
ANR	20453	AssignmentExpression	"lowercase_name = zend_str_tolower_dup ( ptr -> fname , fname_len )"		19145	0		=			
ANR	20454	Identifier	lowercase_name		19145	0					
ANR	20455	CallExpression	"zend_str_tolower_dup ( ptr -> fname , fname_len )"		19145	1					
ANR	20456	Callee	zend_str_tolower_dup		19145	0					
ANR	20457	Identifier	zend_str_tolower_dup		19145	0					
ANR	20458	ArgumentList	ptr -> fname		19145	1					
ANR	20459	Argument	ptr -> fname		19145	0					
ANR	20460	PtrMemberAccess	ptr -> fname		19145	0					
ANR	20461	Identifier	ptr		19145	0					
ANR	20462	Identifier	fname		19145	1					
ANR	20463	Argument	fname_len		19145	1					
ANR	20464	Identifier	fname_len		19145	0					
ANR	20465	IfStatement	"if ( zend_hash_exists ( target_function_table , lowercase_name , fname_len + 1 ) )"		19145	2					
ANR	20466	Condition	"zend_hash_exists ( target_function_table , lowercase_name , fname_len + 1 )"	2251:7:64714:64781	19145	0	True				
ANR	20467	CallExpression	"zend_hash_exists ( target_function_table , lowercase_name , fname_len + 1 )"		19145	0					
ANR	20468	Callee	zend_hash_exists		19145	0					
ANR	20469	Identifier	zend_hash_exists		19145	0					
ANR	20470	ArgumentList	target_function_table		19145	1					
ANR	20471	Argument	target_function_table		19145	0					
ANR	20472	Identifier	target_function_table		19145	0					
ANR	20473	Argument	lowercase_name		19145	1					
ANR	20474	Identifier	lowercase_name		19145	0					
ANR	20475	Argument	fname_len + 1		19145	2					
ANR	20476	AdditiveExpression	fname_len + 1		19145	0		+			
ANR	20477	Identifier	fname_len		19145	0					
ANR	20478	PrimaryExpression	1		19145	1					
ANR	20479	CompoundStatement		177:77:7897:7897	19145	1					
ANR	20480	ExpressionStatement	"zend_error ( error_type , ""Function registration failed - duplicate name - %s%s%s"" , scope ? scope -> name : """" , scope ? ""::"" : """" , ptr -> fname )"	2252:4:64790:64927	19145	0	True				
ANR	20481	CallExpression	"zend_error ( error_type , ""Function registration failed - duplicate name - %s%s%s"" , scope ? scope -> name : """" , scope ? ""::"" : """" , ptr -> fname )"		19145	0					
ANR	20482	Callee	zend_error		19145	0					
ANR	20483	Identifier	zend_error		19145	0					
ANR	20484	ArgumentList	error_type		19145	1					
ANR	20485	Argument	error_type		19145	0					
ANR	20486	Identifier	error_type		19145	0					
ANR	20487	Argument	"""Function registration failed - duplicate name - %s%s%s"""		19145	1					
ANR	20488	PrimaryExpression	"""Function registration failed - duplicate name - %s%s%s"""		19145	0					
ANR	20489	Argument	"scope ? scope -> name : """""		19145	2					
ANR	20490	ConditionalExpression	"scope ? scope -> name : """""		19145	0					
ANR	20491	Condition	scope		19145	0					
ANR	20492	Identifier	scope		19145	0					
ANR	20493	PtrMemberAccess	scope -> name		19145	1					
ANR	20494	Identifier	scope		19145	0					
ANR	20495	Identifier	name		19145	1					
ANR	20496	PrimaryExpression	""""""		19145	2					
ANR	20497	Argument	"scope ? ""::"" : """""		19145	3					
ANR	20498	ConditionalExpression	"scope ? ""::"" : """""		19145	0					
ANR	20499	Condition	scope		19145	0					
ANR	20500	Identifier	scope		19145	0					
ANR	20501	PrimaryExpression	"""::"""		19145	1					
ANR	20502	PrimaryExpression	""""""		19145	2					
ANR	20503	Argument	ptr -> fname		19145	4					
ANR	20504	PtrMemberAccess	ptr -> fname		19145	0					
ANR	20505	Identifier	ptr		19145	0					
ANR	20506	Identifier	fname		19145	1					
ANR	20507	ExpressionStatement	efree ( ( char * ) lowercase_name )	2254:3:64937:64965	19145	3	True				
ANR	20508	CallExpression	efree ( ( char * ) lowercase_name )		19145	0					
ANR	20509	Callee	efree		19145	0					
ANR	20510	Identifier	efree		19145	0					
ANR	20511	ArgumentList	( char * ) lowercase_name		19145	1					
ANR	20512	Argument	( char * ) lowercase_name		19145	0					
ANR	20513	CastExpression	( char * ) lowercase_name		19145	0					
ANR	20514	CastTarget	char *		19145	0					
ANR	20515	Identifier	lowercase_name		19145	1					
ANR	20516	ExpressionStatement	ptr ++	2255:3:64970:64975	19145	4	True				
ANR	20517	PostIncDecOperationExpression	ptr ++		19145	0					
ANR	20518	Identifier	ptr		19145	0					
ANR	20519	IncDec	++		19145	1					
ANR	20520	Statement	zend_unregister_functions	2257:2:64983:65007	19145	2	True				
ANR	20521	Statement	(	2257:27:65008:65008	19145	3	True				
ANR	20522	Statement	functions	2257:28:65009:65017	19145	4	True				
ANR	20523	Statement	","	2257:37:65018:65018	19145	5	True				
ANR	20524	Statement	count	2257:39:65020:65024	19145	6	True				
ANR	20525	Statement	","	2257:44:65025:65025	19145	7	True				
ANR	20526	Statement	target_function_table	2257:46:65027:65047	19145	8	True				
ANR	20527	Statement	TSRMLS_CC	2257:68:65049:65057	19145	9	True				
ANR	20528	Statement	)	2257:77:65058:65058	19145	10	True				
ANR	20529	ExpressionStatement		2257:78:65059:65059	19145	11	True				
ANR	20530	ReturnStatement	return FAILURE ;	2258:2:65063:65077	19145	12	True				
ANR	20531	Identifier	FAILURE		19145	0					
ANR	20532	IfStatement	if ( scope )		19145	19					
ANR	20533	Condition	scope	2260:5:65087:65091	19145	0	True				
ANR	20534	Identifier	scope		19145	0					
ANR	20535	CompoundStatement		186:12:8207:8207	19145	1					
ANR	20536	ExpressionStatement	scope -> constructor = ctor	2261:2:65098:65123	19145	0	True				
ANR	20537	AssignmentExpression	scope -> constructor = ctor		19145	0		=			
ANR	20538	PtrMemberAccess	scope -> constructor		19145	0					
ANR	20539	Identifier	scope		19145	0					
ANR	20540	Identifier	constructor		19145	1					
ANR	20541	Identifier	ctor		19145	1					
ANR	20542	ExpressionStatement	scope -> destructor = dtor	2262:2:65127:65151	19145	1	True				
ANR	20543	AssignmentExpression	scope -> destructor = dtor		19145	0		=			
ANR	20544	PtrMemberAccess	scope -> destructor		19145	0					
ANR	20545	Identifier	scope		19145	0					
ANR	20546	Identifier	destructor		19145	1					
ANR	20547	Identifier	dtor		19145	1					
ANR	20548	ExpressionStatement	scope -> clone = clone	2263:2:65155:65175	19145	2	True				
ANR	20549	AssignmentExpression	scope -> clone = clone		19145	0		=			
ANR	20550	PtrMemberAccess	scope -> clone		19145	0					
ANR	20551	Identifier	scope		19145	0					
ANR	20552	Identifier	clone		19145	1					
ANR	20553	Identifier	clone		19145	1					
ANR	20554	ExpressionStatement	scope -> __call = __call	2264:2:65179:65201	19145	3	True				
ANR	20555	AssignmentExpression	scope -> __call = __call		19145	0		=			
ANR	20556	PtrMemberAccess	scope -> __call		19145	0					
ANR	20557	Identifier	scope		19145	0					
ANR	20558	Identifier	__call		19145	1					
ANR	20559	Identifier	__call		19145	1					
ANR	20560	ExpressionStatement	scope -> __callstatic = __callstatic	2265:2:65205:65239	19145	4	True				
ANR	20561	AssignmentExpression	scope -> __callstatic = __callstatic		19145	0		=			
ANR	20562	PtrMemberAccess	scope -> __callstatic		19145	0					
ANR	20563	Identifier	scope		19145	0					
ANR	20564	Identifier	__callstatic		19145	1					
ANR	20565	Identifier	__callstatic		19145	1					
ANR	20566	ExpressionStatement	scope -> __tostring = __tostring	2266:2:65243:65273	19145	5	True				
ANR	20567	AssignmentExpression	scope -> __tostring = __tostring		19145	0		=			
ANR	20568	PtrMemberAccess	scope -> __tostring		19145	0					
ANR	20569	Identifier	scope		19145	0					
ANR	20570	Identifier	__tostring		19145	1					
ANR	20571	Identifier	__tostring		19145	1					
ANR	20572	ExpressionStatement	scope -> __get = __get	2267:2:65277:65297	19145	6	True				
ANR	20573	AssignmentExpression	scope -> __get = __get		19145	0		=			
ANR	20574	PtrMemberAccess	scope -> __get		19145	0					
ANR	20575	Identifier	scope		19145	0					
ANR	20576	Identifier	__get		19145	1					
ANR	20577	Identifier	__get		19145	1					
ANR	20578	ExpressionStatement	scope -> __set = __set	2268:2:65301:65321	19145	7	True				
ANR	20579	AssignmentExpression	scope -> __set = __set		19145	0		=			
ANR	20580	PtrMemberAccess	scope -> __set		19145	0					
ANR	20581	Identifier	scope		19145	0					
ANR	20582	Identifier	__set		19145	1					
ANR	20583	Identifier	__set		19145	1					
ANR	20584	ExpressionStatement	scope -> __unset = __unset	2269:2:65325:65349	19145	8	True				
ANR	20585	AssignmentExpression	scope -> __unset = __unset		19145	0		=			
ANR	20586	PtrMemberAccess	scope -> __unset		19145	0					
ANR	20587	Identifier	scope		19145	0					
ANR	20588	Identifier	__unset		19145	1					
ANR	20589	Identifier	__unset		19145	1					
ANR	20590	ExpressionStatement	scope -> __isset = __isset	2270:2:65353:65377	19145	9	True				
ANR	20591	AssignmentExpression	scope -> __isset = __isset		19145	0		=			
ANR	20592	PtrMemberAccess	scope -> __isset		19145	0					
ANR	20593	Identifier	scope		19145	0					
ANR	20594	Identifier	__isset		19145	1					
ANR	20595	Identifier	__isset		19145	1					
ANR	20596	ExpressionStatement	scope -> __debugInfo = __debugInfo	2271:2:65381:65413	19145	10	True				
ANR	20597	AssignmentExpression	scope -> __debugInfo = __debugInfo		19145	0		=			
ANR	20598	PtrMemberAccess	scope -> __debugInfo		19145	0					
ANR	20599	Identifier	scope		19145	0					
ANR	20600	Identifier	__debugInfo		19145	1					
ANR	20601	Identifier	__debugInfo		19145	1					
ANR	20602	IfStatement	if ( ctor )		19145	11					
ANR	20603	Condition	ctor	2272:6:65421:65424	19145	0	True				
ANR	20604	Identifier	ctor		19145	0					
ANR	20605	CompoundStatement		198:12:8540:8540	19145	1					
ANR	20606	ExpressionStatement	ctor -> common . fn_flags |= ZEND_ACC_CTOR	2273:3:65432:65470	19145	0	True				
ANR	20607	AssignmentExpression	ctor -> common . fn_flags |= ZEND_ACC_CTOR		19145	0		|=			
ANR	20608	MemberAccess	ctor -> common . fn_flags		19145	0					
ANR	20609	PtrMemberAccess	ctor -> common		19145	0					
ANR	20610	Identifier	ctor		19145	0					
ANR	20611	Identifier	common		19145	1					
ANR	20612	Identifier	fn_flags		19145	1					
ANR	20613	Identifier	ZEND_ACC_CTOR		19145	1					
ANR	20614	IfStatement	if ( ctor -> common . fn_flags & ZEND_ACC_STATIC )		19145	1					
ANR	20615	Condition	ctor -> common . fn_flags & ZEND_ACC_STATIC	2274:7:65479:65517	19145	0	True				
ANR	20616	BitAndExpression	ctor -> common . fn_flags & ZEND_ACC_STATIC		19145	0		&			
ANR	20617	MemberAccess	ctor -> common . fn_flags		19145	0					
ANR	20618	PtrMemberAccess	ctor -> common		19145	0					
ANR	20619	Identifier	ctor		19145	0					
ANR	20620	Identifier	common		19145	1					
ANR	20621	Identifier	fn_flags		19145	1					
ANR	20622	Identifier	ZEND_ACC_STATIC		19145	1					
ANR	20623	CompoundStatement		200:48:8633:8633	19145	1					
ANR	20624	ExpressionStatement	"zend_error ( error_type , ""Constructor %s::%s() cannot be static"" , scope -> name , ctor -> common . function_name )"	2275:4:65526:65630	19145	0	True				
ANR	20625	CallExpression	"zend_error ( error_type , ""Constructor %s::%s() cannot be static"" , scope -> name , ctor -> common . function_name )"		19145	0					
ANR	20626	Callee	zend_error		19145	0					
ANR	20627	Identifier	zend_error		19145	0					
ANR	20628	ArgumentList	error_type		19145	1					
ANR	20629	Argument	error_type		19145	0					
ANR	20630	Identifier	error_type		19145	0					
ANR	20631	Argument	"""Constructor %s::%s() cannot be static"""		19145	1					
ANR	20632	PrimaryExpression	"""Constructor %s::%s() cannot be static"""		19145	0					
ANR	20633	Argument	scope -> name		19145	2					
ANR	20634	PtrMemberAccess	scope -> name		19145	0					
ANR	20635	Identifier	scope		19145	0					
ANR	20636	Identifier	name		19145	1					
ANR	20637	Argument	ctor -> common . function_name		19145	3					
ANR	20638	MemberAccess	ctor -> common . function_name		19145	0					
ANR	20639	PtrMemberAccess	ctor -> common		19145	0					
ANR	20640	Identifier	ctor		19145	0					
ANR	20641	Identifier	common		19145	1					
ANR	20642	Identifier	function_name		19145	1					
ANR	20643	ExpressionStatement	ctor -> common . fn_flags &= ~ZEND_ACC_ALLOW_STATIC	2277:3:65640:65687	19145	2	True				
ANR	20644	AssignmentExpression	ctor -> common . fn_flags &= ~ZEND_ACC_ALLOW_STATIC		19145	0		&=			
ANR	20645	MemberAccess	ctor -> common . fn_flags		19145	0					
ANR	20646	PtrMemberAccess	ctor -> common		19145	0					
ANR	20647	Identifier	ctor		19145	0					
ANR	20648	Identifier	common		19145	1					
ANR	20649	Identifier	fn_flags		19145	1					
ANR	20650	Identifier	~ZEND_ACC_ALLOW_STATIC		19145	1					
ANR	20651	IfStatement	if ( dtor )		19145	12					
ANR	20652	Condition	dtor	2279:6:65699:65702	19145	0	True				
ANR	20653	Identifier	dtor		19145	0					
ANR	20654	CompoundStatement		205:12:8818:8818	19145	1					
ANR	20655	ExpressionStatement	dtor -> common . fn_flags |= ZEND_ACC_DTOR	2280:3:65710:65748	19145	0	True				
ANR	20656	AssignmentExpression	dtor -> common . fn_flags |= ZEND_ACC_DTOR		19145	0		|=			
ANR	20657	MemberAccess	dtor -> common . fn_flags		19145	0					
ANR	20658	PtrMemberAccess	dtor -> common		19145	0					
ANR	20659	Identifier	dtor		19145	0					
ANR	20660	Identifier	common		19145	1					
ANR	20661	Identifier	fn_flags		19145	1					
ANR	20662	Identifier	ZEND_ACC_DTOR		19145	1					
ANR	20663	IfStatement	if ( dtor -> common . fn_flags & ZEND_ACC_STATIC )		19145	1					
ANR	20664	Condition	dtor -> common . fn_flags & ZEND_ACC_STATIC	2281:7:65757:65795	19145	0	True				
ANR	20665	BitAndExpression	dtor -> common . fn_flags & ZEND_ACC_STATIC		19145	0		&			
ANR	20666	MemberAccess	dtor -> common . fn_flags		19145	0					
ANR	20667	PtrMemberAccess	dtor -> common		19145	0					
ANR	20668	Identifier	dtor		19145	0					
ANR	20669	Identifier	common		19145	1					
ANR	20670	Identifier	fn_flags		19145	1					
ANR	20671	Identifier	ZEND_ACC_STATIC		19145	1					
ANR	20672	CompoundStatement		207:48:8911:8911	19145	1					
ANR	20673	ExpressionStatement	"zend_error ( error_type , ""Destructor %s::%s() cannot be static"" , scope -> name , dtor -> common . function_name )"	2282:4:65804:65907	19145	0	True				
ANR	20674	CallExpression	"zend_error ( error_type , ""Destructor %s::%s() cannot be static"" , scope -> name , dtor -> common . function_name )"		19145	0					
ANR	20675	Callee	zend_error		19145	0					
ANR	20676	Identifier	zend_error		19145	0					
ANR	20677	ArgumentList	error_type		19145	1					
ANR	20678	Argument	error_type		19145	0					
ANR	20679	Identifier	error_type		19145	0					
ANR	20680	Argument	"""Destructor %s::%s() cannot be static"""		19145	1					
ANR	20681	PrimaryExpression	"""Destructor %s::%s() cannot be static"""		19145	0					
ANR	20682	Argument	scope -> name		19145	2					
ANR	20683	PtrMemberAccess	scope -> name		19145	0					
ANR	20684	Identifier	scope		19145	0					
ANR	20685	Identifier	name		19145	1					
ANR	20686	Argument	dtor -> common . function_name		19145	3					
ANR	20687	MemberAccess	dtor -> common . function_name		19145	0					
ANR	20688	PtrMemberAccess	dtor -> common		19145	0					
ANR	20689	Identifier	dtor		19145	0					
ANR	20690	Identifier	common		19145	1					
ANR	20691	Identifier	function_name		19145	1					
ANR	20692	ExpressionStatement	dtor -> common . fn_flags &= ~ZEND_ACC_ALLOW_STATIC	2284:3:65917:65964	19145	2	True				
ANR	20693	AssignmentExpression	dtor -> common . fn_flags &= ~ZEND_ACC_ALLOW_STATIC		19145	0		&=			
ANR	20694	MemberAccess	dtor -> common . fn_flags		19145	0					
ANR	20695	PtrMemberAccess	dtor -> common		19145	0					
ANR	20696	Identifier	dtor		19145	0					
ANR	20697	Identifier	common		19145	1					
ANR	20698	Identifier	fn_flags		19145	1					
ANR	20699	Identifier	~ZEND_ACC_ALLOW_STATIC		19145	1					
ANR	20700	IfStatement	if ( clone )		19145	13					
ANR	20701	Condition	clone	2286:6:65976:65980	19145	0	True				
ANR	20702	Identifier	clone		19145	0					
ANR	20703	CompoundStatement		212:13:9096:9096	19145	1					
ANR	20704	ExpressionStatement	clone -> common . fn_flags |= ZEND_ACC_CLONE	2287:3:65988:66028	19145	0	True				
ANR	20705	AssignmentExpression	clone -> common . fn_flags |= ZEND_ACC_CLONE		19145	0		|=			
ANR	20706	MemberAccess	clone -> common . fn_flags		19145	0					
ANR	20707	PtrMemberAccess	clone -> common		19145	0					
ANR	20708	Identifier	clone		19145	0					
ANR	20709	Identifier	common		19145	1					
ANR	20710	Identifier	fn_flags		19145	1					
ANR	20711	Identifier	ZEND_ACC_CLONE		19145	1					
ANR	20712	IfStatement	if ( clone -> common . fn_flags & ZEND_ACC_STATIC )		19145	1					
ANR	20713	Condition	clone -> common . fn_flags & ZEND_ACC_STATIC	2288:7:66037:66076	19145	0	True				
ANR	20714	BitAndExpression	clone -> common . fn_flags & ZEND_ACC_STATIC		19145	0		&			
ANR	20715	MemberAccess	clone -> common . fn_flags		19145	0					
ANR	20716	PtrMemberAccess	clone -> common		19145	0					
ANR	20717	Identifier	clone		19145	0					
ANR	20718	Identifier	common		19145	1					
ANR	20719	Identifier	fn_flags		19145	1					
ANR	20720	Identifier	ZEND_ACC_STATIC		19145	1					
ANR	20721	CompoundStatement		214:49:9192:9192	19145	1					
ANR	20722	ExpressionStatement	"zend_error ( error_type , ""Constructor %s::%s() cannot be static"" , scope -> name , clone -> common . function_name )"	2289:4:66085:66190	19145	0	True				
ANR	20723	CallExpression	"zend_error ( error_type , ""Constructor %s::%s() cannot be static"" , scope -> name , clone -> common . function_name )"		19145	0					
ANR	20724	Callee	zend_error		19145	0					
ANR	20725	Identifier	zend_error		19145	0					
ANR	20726	ArgumentList	error_type		19145	1					
ANR	20727	Argument	error_type		19145	0					
ANR	20728	Identifier	error_type		19145	0					
ANR	20729	Argument	"""Constructor %s::%s() cannot be static"""		19145	1					
ANR	20730	PrimaryExpression	"""Constructor %s::%s() cannot be static"""		19145	0					
ANR	20731	Argument	scope -> name		19145	2					
ANR	20732	PtrMemberAccess	scope -> name		19145	0					
ANR	20733	Identifier	scope		19145	0					
ANR	20734	Identifier	name		19145	1					
ANR	20735	Argument	clone -> common . function_name		19145	3					
ANR	20736	MemberAccess	clone -> common . function_name		19145	0					
ANR	20737	PtrMemberAccess	clone -> common		19145	0					
ANR	20738	Identifier	clone		19145	0					
ANR	20739	Identifier	common		19145	1					
ANR	20740	Identifier	function_name		19145	1					
ANR	20741	ExpressionStatement	clone -> common . fn_flags &= ~ZEND_ACC_ALLOW_STATIC	2291:3:66200:66248	19145	2	True				
ANR	20742	AssignmentExpression	clone -> common . fn_flags &= ~ZEND_ACC_ALLOW_STATIC		19145	0		&=			
ANR	20743	MemberAccess	clone -> common . fn_flags		19145	0					
ANR	20744	PtrMemberAccess	clone -> common		19145	0					
ANR	20745	Identifier	clone		19145	0					
ANR	20746	Identifier	common		19145	1					
ANR	20747	Identifier	fn_flags		19145	1					
ANR	20748	Identifier	~ZEND_ACC_ALLOW_STATIC		19145	1					
ANR	20749	IfStatement	if ( __call )		19145	14					
ANR	20750	Condition	__call	2293:6:66260:66265	19145	0	True				
ANR	20751	Identifier	__call		19145	0					
ANR	20752	CompoundStatement		219:14:9381:9381	19145	1					
ANR	20753	IfStatement	if ( __call -> common . fn_flags & ZEND_ACC_STATIC )		19145	0					
ANR	20754	Condition	__call -> common . fn_flags & ZEND_ACC_STATIC	2294:7:66277:66317	19145	0	True				
ANR	20755	BitAndExpression	__call -> common . fn_flags & ZEND_ACC_STATIC		19145	0		&			
ANR	20756	MemberAccess	__call -> common . fn_flags		19145	0					
ANR	20757	PtrMemberAccess	__call -> common		19145	0					
ANR	20758	Identifier	__call		19145	0					
ANR	20759	Identifier	common		19145	1					
ANR	20760	Identifier	fn_flags		19145	1					
ANR	20761	Identifier	ZEND_ACC_STATIC		19145	1					
ANR	20762	CompoundStatement		220:50:9433:9433	19145	1					
ANR	20763	ExpressionStatement	"zend_error ( error_type , ""Method %s::%s() cannot be static"" , scope -> name , __call -> common . function_name )"	2295:4:66326:66427	19145	0	True				
ANR	20764	CallExpression	"zend_error ( error_type , ""Method %s::%s() cannot be static"" , scope -> name , __call -> common . function_name )"		19145	0					
ANR	20765	Callee	zend_error		19145	0					
ANR	20766	Identifier	zend_error		19145	0					
ANR	20767	ArgumentList	error_type		19145	1					
ANR	20768	Argument	error_type		19145	0					
ANR	20769	Identifier	error_type		19145	0					
ANR	20770	Argument	"""Method %s::%s() cannot be static"""		19145	1					
ANR	20771	PrimaryExpression	"""Method %s::%s() cannot be static"""		19145	0					
ANR	20772	Argument	scope -> name		19145	2					
ANR	20773	PtrMemberAccess	scope -> name		19145	0					
ANR	20774	Identifier	scope		19145	0					
ANR	20775	Identifier	name		19145	1					
ANR	20776	Argument	__call -> common . function_name		19145	3					
ANR	20777	MemberAccess	__call -> common . function_name		19145	0					
ANR	20778	PtrMemberAccess	__call -> common		19145	0					
ANR	20779	Identifier	__call		19145	0					
ANR	20780	Identifier	common		19145	1					
ANR	20781	Identifier	function_name		19145	1					
ANR	20782	ExpressionStatement	__call -> common . fn_flags &= ~ZEND_ACC_ALLOW_STATIC	2297:3:66437:66486	19145	1	True				
ANR	20783	AssignmentExpression	__call -> common . fn_flags &= ~ZEND_ACC_ALLOW_STATIC		19145	0		&=			
ANR	20784	MemberAccess	__call -> common . fn_flags		19145	0					
ANR	20785	PtrMemberAccess	__call -> common		19145	0					
ANR	20786	Identifier	__call		19145	0					
ANR	20787	Identifier	common		19145	1					
ANR	20788	Identifier	fn_flags		19145	1					
ANR	20789	Identifier	~ZEND_ACC_ALLOW_STATIC		19145	1					
ANR	20790	IfStatement	if ( __callstatic )		19145	15					
ANR	20791	Condition	__callstatic	2299:6:66498:66509	19145	0	True				
ANR	20792	Identifier	__callstatic		19145	0					
ANR	20793	CompoundStatement		225:20:9625:9625	19145	1					
ANR	20794	IfStatement	if ( ! ( __callstatic -> common . fn_flags & ZEND_ACC_STATIC ) )		19145	0					
ANR	20795	Condition	! ( __callstatic -> common . fn_flags & ZEND_ACC_STATIC )	2300:7:66521:66570	19145	0	True				
ANR	20796	UnaryOperationExpression	! ( __callstatic -> common . fn_flags & ZEND_ACC_STATIC )		19145	0					
ANR	20797	UnaryOperator	!		19145	0					
ANR	20798	BitAndExpression	__callstatic -> common . fn_flags & ZEND_ACC_STATIC		19145	1		&			
ANR	20799	MemberAccess	__callstatic -> common . fn_flags		19145	0					
ANR	20800	PtrMemberAccess	__callstatic -> common		19145	0					
ANR	20801	Identifier	__callstatic		19145	0					
ANR	20802	Identifier	common		19145	1					
ANR	20803	Identifier	fn_flags		19145	1					
ANR	20804	Identifier	ZEND_ACC_STATIC		19145	1					
ANR	20805	CompoundStatement		226:59:9686:9686	19145	1					
ANR	20806	ExpressionStatement	"zend_error ( error_type , ""Method %s::%s() must be static"" , scope -> name , __callstatic -> common . function_name )"	2301:4:66579:66684	19145	0	True				
ANR	20807	CallExpression	"zend_error ( error_type , ""Method %s::%s() must be static"" , scope -> name , __callstatic -> common . function_name )"		19145	0					
ANR	20808	Callee	zend_error		19145	0					
ANR	20809	Identifier	zend_error		19145	0					
ANR	20810	ArgumentList	error_type		19145	1					
ANR	20811	Argument	error_type		19145	0					
ANR	20812	Identifier	error_type		19145	0					
ANR	20813	Argument	"""Method %s::%s() must be static"""		19145	1					
ANR	20814	PrimaryExpression	"""Method %s::%s() must be static"""		19145	0					
ANR	20815	Argument	scope -> name		19145	2					
ANR	20816	PtrMemberAccess	scope -> name		19145	0					
ANR	20817	Identifier	scope		19145	0					
ANR	20818	Identifier	name		19145	1					
ANR	20819	Argument	__callstatic -> common . function_name		19145	3					
ANR	20820	MemberAccess	__callstatic -> common . function_name		19145	0					
ANR	20821	PtrMemberAccess	__callstatic -> common		19145	0					
ANR	20822	Identifier	__callstatic		19145	0					
ANR	20823	Identifier	common		19145	1					
ANR	20824	Identifier	function_name		19145	1					
ANR	20825	ExpressionStatement	__callstatic -> common . fn_flags |= ZEND_ACC_STATIC	2303:3:66694:66742	19145	1	True				
ANR	20826	AssignmentExpression	__callstatic -> common . fn_flags |= ZEND_ACC_STATIC		19145	0		|=			
ANR	20827	MemberAccess	__callstatic -> common . fn_flags		19145	0					
ANR	20828	PtrMemberAccess	__callstatic -> common		19145	0					
ANR	20829	Identifier	__callstatic		19145	0					
ANR	20830	Identifier	common		19145	1					
ANR	20831	Identifier	fn_flags		19145	1					
ANR	20832	Identifier	ZEND_ACC_STATIC		19145	1					
ANR	20833	IfStatement	if ( __tostring )		19145	16					
ANR	20834	Condition	__tostring	2305:6:66754:66763	19145	0	True				
ANR	20835	Identifier	__tostring		19145	0					
ANR	20836	CompoundStatement		231:18:9879:9879	19145	1					
ANR	20837	IfStatement	if ( __tostring -> common . fn_flags & ZEND_ACC_STATIC )		19145	0					
ANR	20838	Condition	__tostring -> common . fn_flags & ZEND_ACC_STATIC	2306:7:66775:66819	19145	0	True				
ANR	20839	BitAndExpression	__tostring -> common . fn_flags & ZEND_ACC_STATIC		19145	0		&			
ANR	20840	MemberAccess	__tostring -> common . fn_flags		19145	0					
ANR	20841	PtrMemberAccess	__tostring -> common		19145	0					
ANR	20842	Identifier	__tostring		19145	0					
ANR	20843	Identifier	common		19145	1					
ANR	20844	Identifier	fn_flags		19145	1					
ANR	20845	Identifier	ZEND_ACC_STATIC		19145	1					
ANR	20846	CompoundStatement		232:54:9935:9935	19145	1					
ANR	20847	ExpressionStatement	"zend_error ( error_type , ""Method %s::%s() cannot be static"" , scope -> name , __tostring -> common . function_name )"	2307:4:66828:66933	19145	0	True				
ANR	20848	CallExpression	"zend_error ( error_type , ""Method %s::%s() cannot be static"" , scope -> name , __tostring -> common . function_name )"		19145	0					
ANR	20849	Callee	zend_error		19145	0					
ANR	20850	Identifier	zend_error		19145	0					
ANR	20851	ArgumentList	error_type		19145	1					
ANR	20852	Argument	error_type		19145	0					
ANR	20853	Identifier	error_type		19145	0					
ANR	20854	Argument	"""Method %s::%s() cannot be static"""		19145	1					
ANR	20855	PrimaryExpression	"""Method %s::%s() cannot be static"""		19145	0					
ANR	20856	Argument	scope -> name		19145	2					
ANR	20857	PtrMemberAccess	scope -> name		19145	0					
ANR	20858	Identifier	scope		19145	0					
ANR	20859	Identifier	name		19145	1					
ANR	20860	Argument	__tostring -> common . function_name		19145	3					
ANR	20861	MemberAccess	__tostring -> common . function_name		19145	0					
ANR	20862	PtrMemberAccess	__tostring -> common		19145	0					
ANR	20863	Identifier	__tostring		19145	0					
ANR	20864	Identifier	common		19145	1					
ANR	20865	Identifier	function_name		19145	1					
ANR	20866	ExpressionStatement	__tostring -> common . fn_flags &= ~ZEND_ACC_ALLOW_STATIC	2309:3:66943:66996	19145	1	True				
ANR	20867	AssignmentExpression	__tostring -> common . fn_flags &= ~ZEND_ACC_ALLOW_STATIC		19145	0		&=			
ANR	20868	MemberAccess	__tostring -> common . fn_flags		19145	0					
ANR	20869	PtrMemberAccess	__tostring -> common		19145	0					
ANR	20870	Identifier	__tostring		19145	0					
ANR	20871	Identifier	common		19145	1					
ANR	20872	Identifier	fn_flags		19145	1					
ANR	20873	Identifier	~ZEND_ACC_ALLOW_STATIC		19145	1					
ANR	20874	IfStatement	if ( __get )		19145	17					
ANR	20875	Condition	__get	2311:6:67008:67012	19145	0	True				
ANR	20876	Identifier	__get		19145	0					
ANR	20877	CompoundStatement		237:13:10128:10128	19145	1					
ANR	20878	IfStatement	if ( __get -> common . fn_flags & ZEND_ACC_STATIC )		19145	0					
ANR	20879	Condition	__get -> common . fn_flags & ZEND_ACC_STATIC	2312:7:67024:67063	19145	0	True				
ANR	20880	BitAndExpression	__get -> common . fn_flags & ZEND_ACC_STATIC		19145	0		&			
ANR	20881	MemberAccess	__get -> common . fn_flags		19145	0					
ANR	20882	PtrMemberAccess	__get -> common		19145	0					
ANR	20883	Identifier	__get		19145	0					
ANR	20884	Identifier	common		19145	1					
ANR	20885	Identifier	fn_flags		19145	1					
ANR	20886	Identifier	ZEND_ACC_STATIC		19145	1					
ANR	20887	CompoundStatement		238:49:10179:10179	19145	1					
ANR	20888	ExpressionStatement	"zend_error ( error_type , ""Method %s::%s() cannot be static"" , scope -> name , __get -> common . function_name )"	2313:4:67072:67172	19145	0	True				
ANR	20889	CallExpression	"zend_error ( error_type , ""Method %s::%s() cannot be static"" , scope -> name , __get -> common . function_name )"		19145	0					
ANR	20890	Callee	zend_error		19145	0					
ANR	20891	Identifier	zend_error		19145	0					
ANR	20892	ArgumentList	error_type		19145	1					
ANR	20893	Argument	error_type		19145	0					
ANR	20894	Identifier	error_type		19145	0					
ANR	20895	Argument	"""Method %s::%s() cannot be static"""		19145	1					
ANR	20896	PrimaryExpression	"""Method %s::%s() cannot be static"""		19145	0					
ANR	20897	Argument	scope -> name		19145	2					
ANR	20898	PtrMemberAccess	scope -> name		19145	0					
ANR	20899	Identifier	scope		19145	0					
ANR	20900	Identifier	name		19145	1					
ANR	20901	Argument	__get -> common . function_name		19145	3					
ANR	20902	MemberAccess	__get -> common . function_name		19145	0					
ANR	20903	PtrMemberAccess	__get -> common		19145	0					
ANR	20904	Identifier	__get		19145	0					
ANR	20905	Identifier	common		19145	1					
ANR	20906	Identifier	function_name		19145	1					
ANR	20907	ExpressionStatement	__get -> common . fn_flags &= ~ZEND_ACC_ALLOW_STATIC	2315:3:67182:67230	19145	1	True				
ANR	20908	AssignmentExpression	__get -> common . fn_flags &= ~ZEND_ACC_ALLOW_STATIC		19145	0		&=			
ANR	20909	MemberAccess	__get -> common . fn_flags		19145	0					
ANR	20910	PtrMemberAccess	__get -> common		19145	0					
ANR	20911	Identifier	__get		19145	0					
ANR	20912	Identifier	common		19145	1					
ANR	20913	Identifier	fn_flags		19145	1					
ANR	20914	Identifier	~ZEND_ACC_ALLOW_STATIC		19145	1					
ANR	20915	IfStatement	if ( __set )		19145	18					
ANR	20916	Condition	__set	2317:6:67242:67246	19145	0	True				
ANR	20917	Identifier	__set		19145	0					
ANR	20918	CompoundStatement		243:13:10362:10362	19145	1					
ANR	20919	IfStatement	if ( __set -> common . fn_flags & ZEND_ACC_STATIC )		19145	0					
ANR	20920	Condition	__set -> common . fn_flags & ZEND_ACC_STATIC	2318:7:67258:67297	19145	0	True				
ANR	20921	BitAndExpression	__set -> common . fn_flags & ZEND_ACC_STATIC		19145	0		&			
ANR	20922	MemberAccess	__set -> common . fn_flags		19145	0					
ANR	20923	PtrMemberAccess	__set -> common		19145	0					
ANR	20924	Identifier	__set		19145	0					
ANR	20925	Identifier	common		19145	1					
ANR	20926	Identifier	fn_flags		19145	1					
ANR	20927	Identifier	ZEND_ACC_STATIC		19145	1					
ANR	20928	CompoundStatement		244:49:10413:10413	19145	1					
ANR	20929	ExpressionStatement	"zend_error ( error_type , ""Method %s::%s() cannot be static"" , scope -> name , __set -> common . function_name )"	2319:4:67306:67406	19145	0	True				
ANR	20930	CallExpression	"zend_error ( error_type , ""Method %s::%s() cannot be static"" , scope -> name , __set -> common . function_name )"		19145	0					
ANR	20931	Callee	zend_error		19145	0					
ANR	20932	Identifier	zend_error		19145	0					
ANR	20933	ArgumentList	error_type		19145	1					
ANR	20934	Argument	error_type		19145	0					
ANR	20935	Identifier	error_type		19145	0					
ANR	20936	Argument	"""Method %s::%s() cannot be static"""		19145	1					
ANR	20937	PrimaryExpression	"""Method %s::%s() cannot be static"""		19145	0					
ANR	20938	Argument	scope -> name		19145	2					
ANR	20939	PtrMemberAccess	scope -> name		19145	0					
ANR	20940	Identifier	scope		19145	0					
ANR	20941	Identifier	name		19145	1					
ANR	20942	Argument	__set -> common . function_name		19145	3					
ANR	20943	MemberAccess	__set -> common . function_name		19145	0					
ANR	20944	PtrMemberAccess	__set -> common		19145	0					
ANR	20945	Identifier	__set		19145	0					
ANR	20946	Identifier	common		19145	1					
ANR	20947	Identifier	function_name		19145	1					
ANR	20948	ExpressionStatement	__set -> common . fn_flags &= ~ZEND_ACC_ALLOW_STATIC	2321:3:67416:67464	19145	1	True				
ANR	20949	AssignmentExpression	__set -> common . fn_flags &= ~ZEND_ACC_ALLOW_STATIC		19145	0		&=			
ANR	20950	MemberAccess	__set -> common . fn_flags		19145	0					
ANR	20951	PtrMemberAccess	__set -> common		19145	0					
ANR	20952	Identifier	__set		19145	0					
ANR	20953	Identifier	common		19145	1					
ANR	20954	Identifier	fn_flags		19145	1					
ANR	20955	Identifier	~ZEND_ACC_ALLOW_STATIC		19145	1					
ANR	20956	IfStatement	if ( __unset )		19145	19					
ANR	20957	Condition	__unset	2323:6:67476:67482	19145	0	True				
ANR	20958	Identifier	__unset		19145	0					
ANR	20959	CompoundStatement		249:15:10598:10598	19145	1					
ANR	20960	IfStatement	if ( __unset -> common . fn_flags & ZEND_ACC_STATIC )		19145	0					
ANR	20961	Condition	__unset -> common . fn_flags & ZEND_ACC_STATIC	2324:7:67494:67535	19145	0	True				
ANR	20962	BitAndExpression	__unset -> common . fn_flags & ZEND_ACC_STATIC		19145	0		&			
ANR	20963	MemberAccess	__unset -> common . fn_flags		19145	0					
ANR	20964	PtrMemberAccess	__unset -> common		19145	0					
ANR	20965	Identifier	__unset		19145	0					
ANR	20966	Identifier	common		19145	1					
ANR	20967	Identifier	fn_flags		19145	1					
ANR	20968	Identifier	ZEND_ACC_STATIC		19145	1					
ANR	20969	CompoundStatement		250:51:10651:10651	19145	1					
ANR	20970	ExpressionStatement	"zend_error ( error_type , ""Method %s::%s() cannot be static"" , scope -> name , __unset -> common . function_name )"	2325:4:67544:67646	19145	0	True				
ANR	20971	CallExpression	"zend_error ( error_type , ""Method %s::%s() cannot be static"" , scope -> name , __unset -> common . function_name )"		19145	0					
ANR	20972	Callee	zend_error		19145	0					
ANR	20973	Identifier	zend_error		19145	0					
ANR	20974	ArgumentList	error_type		19145	1					
ANR	20975	Argument	error_type		19145	0					
ANR	20976	Identifier	error_type		19145	0					
ANR	20977	Argument	"""Method %s::%s() cannot be static"""		19145	1					
ANR	20978	PrimaryExpression	"""Method %s::%s() cannot be static"""		19145	0					
ANR	20979	Argument	scope -> name		19145	2					
ANR	20980	PtrMemberAccess	scope -> name		19145	0					
ANR	20981	Identifier	scope		19145	0					
ANR	20982	Identifier	name		19145	1					
ANR	20983	Argument	__unset -> common . function_name		19145	3					
ANR	20984	MemberAccess	__unset -> common . function_name		19145	0					
ANR	20985	PtrMemberAccess	__unset -> common		19145	0					
ANR	20986	Identifier	__unset		19145	0					
ANR	20987	Identifier	common		19145	1					
ANR	20988	Identifier	function_name		19145	1					
ANR	20989	ExpressionStatement	__unset -> common . fn_flags &= ~ZEND_ACC_ALLOW_STATIC	2327:3:67656:67706	19145	1	True				
ANR	20990	AssignmentExpression	__unset -> common . fn_flags &= ~ZEND_ACC_ALLOW_STATIC		19145	0		&=			
ANR	20991	MemberAccess	__unset -> common . fn_flags		19145	0					
ANR	20992	PtrMemberAccess	__unset -> common		19145	0					
ANR	20993	Identifier	__unset		19145	0					
ANR	20994	Identifier	common		19145	1					
ANR	20995	Identifier	fn_flags		19145	1					
ANR	20996	Identifier	~ZEND_ACC_ALLOW_STATIC		19145	1					
ANR	20997	IfStatement	if ( __isset )		19145	20					
ANR	20998	Condition	__isset	2329:6:67718:67724	19145	0	True				
ANR	20999	Identifier	__isset		19145	0					
ANR	21000	CompoundStatement		255:15:10840:10840	19145	1					
ANR	21001	IfStatement	if ( __isset -> common . fn_flags & ZEND_ACC_STATIC )		19145	0					
ANR	21002	Condition	__isset -> common . fn_flags & ZEND_ACC_STATIC	2330:7:67736:67777	19145	0	True				
ANR	21003	BitAndExpression	__isset -> common . fn_flags & ZEND_ACC_STATIC		19145	0		&			
ANR	21004	MemberAccess	__isset -> common . fn_flags		19145	0					
ANR	21005	PtrMemberAccess	__isset -> common		19145	0					
ANR	21006	Identifier	__isset		19145	0					
ANR	21007	Identifier	common		19145	1					
ANR	21008	Identifier	fn_flags		19145	1					
ANR	21009	Identifier	ZEND_ACC_STATIC		19145	1					
ANR	21010	CompoundStatement		256:51:10893:10893	19145	1					
ANR	21011	ExpressionStatement	"zend_error ( error_type , ""Method %s::%s() cannot be static"" , scope -> name , __isset -> common . function_name )"	2331:4:67786:67888	19145	0	True				
ANR	21012	CallExpression	"zend_error ( error_type , ""Method %s::%s() cannot be static"" , scope -> name , __isset -> common . function_name )"		19145	0					
ANR	21013	Callee	zend_error		19145	0					
ANR	21014	Identifier	zend_error		19145	0					
ANR	21015	ArgumentList	error_type		19145	1					
ANR	21016	Argument	error_type		19145	0					
ANR	21017	Identifier	error_type		19145	0					
ANR	21018	Argument	"""Method %s::%s() cannot be static"""		19145	1					
ANR	21019	PrimaryExpression	"""Method %s::%s() cannot be static"""		19145	0					
ANR	21020	Argument	scope -> name		19145	2					
ANR	21021	PtrMemberAccess	scope -> name		19145	0					
ANR	21022	Identifier	scope		19145	0					
ANR	21023	Identifier	name		19145	1					
ANR	21024	Argument	__isset -> common . function_name		19145	3					
ANR	21025	MemberAccess	__isset -> common . function_name		19145	0					
ANR	21026	PtrMemberAccess	__isset -> common		19145	0					
ANR	21027	Identifier	__isset		19145	0					
ANR	21028	Identifier	common		19145	1					
ANR	21029	Identifier	function_name		19145	1					
ANR	21030	ExpressionStatement	__isset -> common . fn_flags &= ~ZEND_ACC_ALLOW_STATIC	2333:3:67898:67948	19145	1	True				
ANR	21031	AssignmentExpression	__isset -> common . fn_flags &= ~ZEND_ACC_ALLOW_STATIC		19145	0		&=			
ANR	21032	MemberAccess	__isset -> common . fn_flags		19145	0					
ANR	21033	PtrMemberAccess	__isset -> common		19145	0					
ANR	21034	Identifier	__isset		19145	0					
ANR	21035	Identifier	common		19145	1					
ANR	21036	Identifier	fn_flags		19145	1					
ANR	21037	Identifier	~ZEND_ACC_ALLOW_STATIC		19145	1					
ANR	21038	IfStatement	if ( __debugInfo )		19145	21					
ANR	21039	Condition	__debugInfo	2335:6:67960:67970	19145	0	True				
ANR	21040	Identifier	__debugInfo		19145	0					
ANR	21041	CompoundStatement		261:19:11086:11086	19145	1					
ANR	21042	IfStatement	if ( __debugInfo -> common . fn_flags & ZEND_ACC_STATIC )		19145	0					
ANR	21043	Condition	__debugInfo -> common . fn_flags & ZEND_ACC_STATIC	2336:7:67982:68027	19145	0	True				
ANR	21044	BitAndExpression	__debugInfo -> common . fn_flags & ZEND_ACC_STATIC		19145	0		&			
ANR	21045	MemberAccess	__debugInfo -> common . fn_flags		19145	0					
ANR	21046	PtrMemberAccess	__debugInfo -> common		19145	0					
ANR	21047	Identifier	__debugInfo		19145	0					
ANR	21048	Identifier	common		19145	1					
ANR	21049	Identifier	fn_flags		19145	1					
ANR	21050	Identifier	ZEND_ACC_STATIC		19145	1					
ANR	21051	CompoundStatement		262:55:11143:11143	19145	1					
ANR	21052	ExpressionStatement	"zend_error ( error_type , ""Method %s::%s() cannot be static"" , scope -> name , __debugInfo -> common . function_name )"	2337:4:68036:68142	19145	0	True				
ANR	21053	CallExpression	"zend_error ( error_type , ""Method %s::%s() cannot be static"" , scope -> name , __debugInfo -> common . function_name )"		19145	0					
ANR	21054	Callee	zend_error		19145	0					
ANR	21055	Identifier	zend_error		19145	0					
ANR	21056	ArgumentList	error_type		19145	1					
ANR	21057	Argument	error_type		19145	0					
ANR	21058	Identifier	error_type		19145	0					
ANR	21059	Argument	"""Method %s::%s() cannot be static"""		19145	1					
ANR	21060	PrimaryExpression	"""Method %s::%s() cannot be static"""		19145	0					
ANR	21061	Argument	scope -> name		19145	2					
ANR	21062	PtrMemberAccess	scope -> name		19145	0					
ANR	21063	Identifier	scope		19145	0					
ANR	21064	Identifier	name		19145	1					
ANR	21065	Argument	__debugInfo -> common . function_name		19145	3					
ANR	21066	MemberAccess	__debugInfo -> common . function_name		19145	0					
ANR	21067	PtrMemberAccess	__debugInfo -> common		19145	0					
ANR	21068	Identifier	__debugInfo		19145	0					
ANR	21069	Identifier	common		19145	1					
ANR	21070	Identifier	function_name		19145	1					
ANR	21071	ExpressionStatement	efree ( ( char * ) lc_class_name )	2340:2:68155:68182	19145	22	True				
ANR	21072	CallExpression	efree ( ( char * ) lc_class_name )		19145	0					
ANR	21073	Callee	efree		19145	0					
ANR	21074	Identifier	efree		19145	0					
ANR	21075	ArgumentList	( char * ) lc_class_name		19145	1					
ANR	21076	Argument	( char * ) lc_class_name		19145	0					
ANR	21077	CastExpression	( char * ) lc_class_name		19145	0					
ANR	21078	CastTarget	char *		19145	0					
ANR	21079	Identifier	lc_class_name		19145	1					
ANR	21080	ReturnStatement	return SUCCESS ;	2342:1:68188:68202	19145	20	True				
ANR	21081	Identifier	SUCCESS		19145	0					
ANR	21082	ReturnType	ZEND_API int		19145	1					
ANR	21083	Identifier	zend_register_functions		19145	2					
ANR	21084	ParameterList	"zend_class_entry * scope , const zend_function_entry * functions , HashTable * function_table , int type TSRMLS_DC"		19145	3					
ANR	21085	Parameter	zend_class_entry * scope	2074:37:56766:56788	19145	0	True				
ANR	21086	ParameterType	zend_class_entry *		19145	0					
ANR	21087	Identifier	scope		19145	1					
ANR	21088	Parameter	const zend_function_entry * functions	2074:62:56791:56826	19145	1	True				
ANR	21089	ParameterType	const zend_function_entry *		19145	0					
ANR	21090	Identifier	functions		19145	1					
ANR	21091	Parameter	HashTable * function_table	2074:100:56829:56853	19145	2	True				
ANR	21092	ParameterType	HashTable *		19145	0					
ANR	21093	Identifier	function_table		19145	1					
ANR	21094	Parameter	int type TSRMLS_DC	2074:127:56856:56873	19145	3	True				
ANR	21095	ParameterType	int type		19145	0					
ANR	21096	Identifier	TSRMLS_DC		19145	1					
ANR	21097	CFGEntryNode	ENTRY		19145		True				
ANR	21098	CFGExitNode	EXIT		19145		True				
ANR	21099	Symbol	* reg_function		19145						
ANR	21100	Symbol	functions		19145						
ANR	21101	Symbol	scope -> ce_flags		19145						
ANR	21102	Symbol	__call -> common . fn_flags		19145						
ANR	21103	Symbol	type		19145						
ANR	21104	Symbol	__set -> common		19145						
ANR	21105	Symbol	__get		19145						
ANR	21106	Symbol	ZEND_ACC_IMPLICIT_ABSTRACT_CLASS		19145						
ANR	21107	Symbol	__isset -> common		19145						
ANR	21108	Symbol	ZEND_CLONE_FUNC_NAME		19145						
ANR	21109	Symbol	internal_function -> fn_flags		19145						
ANR	21110	Symbol	ptr -> flags		19145						
ANR	21111	Symbol	unload		19145						
ANR	21112	Symbol	ZEND_ACC_INTERFACE		19145						
ANR	21113	Symbol	__callstatic		19145						
ANR	21114	Symbol	ZEND_ACC_VARIADIC		19145						
ANR	21115	Symbol	str_hash		19145						
ANR	21116	Symbol	ZEND_ACC_CTOR		19145						
ANR	21117	Symbol	* dtor		19145						
ANR	21118	Symbol	__unset -> common		19145						
ANR	21119	Symbol	scope -> constructor		19145						
ANR	21120	Symbol	* __debugInfo		19145						
ANR	21121	Symbol	__callstatic -> common . fn_flags		19145						
ANR	21122	Symbol	fname_len		19145						
ANR	21123	Symbol	& reg_function		19145						
ANR	21124	Symbol	ctor		19145						
ANR	21125	Symbol	* scope		19145						
ANR	21126	Symbol	clone -> common . function_name		19145						
ANR	21127	Symbol	function_table		19145						
ANR	21128	Symbol	lc_class_name		19145						
ANR	21129	Symbol	hash		19145						
ANR	21130	Symbol	__tostring -> common . fn_flags		19145						
ANR	21131	Symbol	* * ptr		19145						
ANR	21132	Symbol	__unset -> common . function_name		19145						
ANR	21133	Symbol	scope -> __isset		19145						
ANR	21134	Symbol	E_CORE_WARNING		19145						
ANR	21135	Symbol	scope -> __debugInfo		19145						
ANR	21136	Symbol	ptr -> handler		19145						
ANR	21137	Symbol	ZEND_ACC_DTOR		19145						
ANR	21138	Symbol	ptr -> arg_info [ ptr -> num_args ] . is_variadic		19145						
ANR	21139	Symbol	~ZEND_ACC_ALLOW_STATIC		19145						
ANR	21140	Symbol	target_function_table		19145						
ANR	21141	Symbol	current_module		19145						
ANR	21142	Symbol	ZEND_GET_FUNC_NAME		19145						
ANR	21143	Symbol	ZEND_DEBUGINFO_FUNC_NAME		19145						
ANR	21144	Symbol	* ptr -> num_args		19145						
ANR	21145	Symbol	internal_function -> scope		19145						
ANR	21146	Symbol	E_WARNING		19145						
ANR	21147	Symbol	__set -> common . function_name		19145						
ANR	21148	Symbol	scope -> destructor		19145						
ANR	21149	Symbol	zend_hash_quick_add		19145						
ANR	21150	Symbol	__get -> common . fn_flags		19145						
ANR	21151	Symbol	internal_function		19145						
ANR	21152	Symbol	& function		19145						
ANR	21153	Symbol	info -> required_num_args		19145						
ANR	21154	Symbol	ctor -> common . function_name		19145						
ANR	21155	Symbol	dtor		19145						
ANR	21156	Symbol	zend_memrchr		19145						
ANR	21157	Symbol	__debugInfo -> common . function_name		19145						
ANR	21158	Symbol	SUCCESS		19145						
ANR	21159	Symbol	CG		19145						
ANR	21160	Symbol	reg_function -> common . num_args		19145						
ANR	21161	Symbol	MODULE_PERSISTENT		19145						
ANR	21162	Symbol	dtor -> common		19145						
ANR	21163	Symbol	i		19145						
ANR	21164	Symbol	reg_function -> common . arg_info [ i ] . class_name		19145						
ANR	21165	Symbol	FAILURE		19145						
ANR	21166	Symbol	__callstatic -> common		19145						
ANR	21167	Symbol	ctor -> common . fn_flags		19145						
ANR	21168	Symbol	ZEND_ACC_ABSTRACT		19145						
ANR	21169	Symbol	__unset		19145						
ANR	21170	Symbol	* reg_function -> common		19145						
ANR	21171	Symbol	scope -> __unset		19145						
ANR	21172	Symbol	__debugInfo -> common . fn_flags		19145						
ANR	21173	Symbol	__tostring		19145						
ANR	21174	Symbol	* info		19145						
ANR	21175	Symbol	class_name_len		19145						
ANR	21176	Symbol	internal_function -> prototype		19145						
ANR	21177	Symbol	internal_function -> required_num_args		19145						
ANR	21178	Symbol	ZEND_CALLSTATIC_FUNC_NAME		19145						
ANR	21179	Symbol	ZEND_CONSTRUCTOR_FUNC_NAME		19145						
ANR	21180	Symbol	__debugInfo		19145						
ANR	21181	Symbol	zend_hash_exists		19145						
ANR	21182	Symbol	TSRMLS_DC		19145						
ANR	21183	Symbol	ZEND_INTERNAL_FUNCTION		19145						
ANR	21184	Symbol	strlen		19145						
ANR	21185	Symbol	__isset		19145						
ANR	21186	Symbol	internal_function -> type		19145						
ANR	21187	Symbol	memcmp		19145						
ANR	21188	Symbol	ZEND_ACC_DEPRECATED		19145						
ANR	21189	Symbol	__tostring -> common . function_name		19145						
ANR	21190	Symbol	function		19145						
ANR	21191	Symbol	error_type		19145						
ANR	21192	Symbol	* ptr		19145						
ANR	21193	Symbol	reg_function -> common . arg_info [ i ] . type_hint		19145						
ANR	21194	Symbol	scope -> __callstatic		19145						
ANR	21195	Symbol	ZEND_ISSET_FUNC_NAME		19145						
ANR	21196	Symbol	scope -> __tostring		19145						
ANR	21197	Symbol	__get -> common . function_name		19145						
ANR	21198	Symbol	__unset -> common . fn_flags		19145						
ANR	21199	Symbol	info		19145						
ANR	21200	Symbol	clone -> common . fn_flags		19145						
ANR	21201	Symbol	EG		19145						
ANR	21202	Symbol	NULL		19145						
ANR	21203	Symbol	count		19145						
ANR	21204	Symbol	reg_function -> common		19145						
ANR	21205	Symbol	info -> return_reference		19145						
ANR	21206	Symbol	ptr -> num_args		19145						
ANR	21207	Symbol	ZEND_ACC_CLONE		19145						
ANR	21208	Symbol	__call -> common . function_name		19145						
ANR	21209	Symbol	* __callstatic		19145						
ANR	21210	Symbol	__debugInfo -> common		19145						
ANR	21211	Symbol	reg_function		19145						
ANR	21212	Symbol	internal_function -> function_name		19145						
ANR	21213	Symbol	clone -> common		19145						
ANR	21214	Symbol	lowercase_name		19145						
ANR	21215	Symbol	* * reg_function		19145						
ANR	21216	Symbol	ZEND_DESTRUCTOR_FUNC_NAME		19145						
ANR	21217	Symbol	ZEND_TOSTRING_FUNC_NAME		19145						
ANR	21218	Symbol	__call		19145						
ANR	21219	Symbol	ZEND_UNSET_FUNC_NAME		19145						
ANR	21220	Symbol	dtor -> common . fn_flags		19145						
ANR	21221	Symbol	* __unset		19145						
ANR	21222	Symbol	* __set		19145						
ANR	21223	Symbol	ZEND_ACC_PPP_MASK		19145						
ANR	21224	Symbol	internal_function -> arg_info		19145						
ANR	21225	Symbol	ZEND_ACC_PUBLIC		19145						
ANR	21226	Symbol	* __get		19145						
ANR	21227	Symbol	ptr -> arg_info		19145						
ANR	21228	Symbol	* __call		19145						
ANR	21229	Symbol	* __isset		19145						
ANR	21230	Symbol	* reg_function -> common . arg_info		19145						
ANR	21231	Symbol	ZEND_CALL_FUNC_NAME		19145						
ANR	21232	Symbol	ZEND_ACC_HAS_TYPE_HINTS		19145						
ANR	21233	Symbol	__callstatic -> common . function_name		19145						
ANR	21234	Symbol	scope -> __get		19145						
ANR	21235	Symbol	scope		19145						
ANR	21236	Symbol	* ctor		19145						
ANR	21237	Symbol	* internal_function		19145						
ANR	21238	Symbol	ZEND_ACC_STATIC		19145						
ANR	21239	Symbol	__tostring -> common		19145						
ANR	21240	Symbol	scope -> __set		19145						
ANR	21241	Symbol	ZEND_SET_FUNC_NAME		19145						
ANR	21242	Symbol	reg_function -> common . arg_info		19145						
ANR	21243	Symbol	zend_str_tolower_dup		19145						
ANR	21244	Symbol	internal_function -> num_args		19145						
ANR	21245	Symbol	__set -> common . fn_flags		19145						
ANR	21246	Symbol	* clone		19145						
ANR	21247	Symbol	scope -> __call		19145						
ANR	21248	Symbol	__set		19145						
ANR	21249	Symbol	__isset -> common . function_name		19145						
ANR	21250	Symbol	* ptr -> arg_info		19145						
ANR	21251	Symbol	ctor -> common		19145						
ANR	21252	Symbol	ptr -> fname		19145						
ANR	21253	Symbol	ZEND_ACC_EXPLICIT_ABSTRACT_CLASS		19145						
ANR	21254	Symbol	dtor -> common . function_name		19145						
ANR	21255	Symbol	ptr		19145						
ANR	21256	Symbol	* __tostring		19145						
ANR	21257	Symbol	__call -> common		19145						
ANR	21258	Symbol	* i		19145						
ANR	21259	Symbol	__isset -> common . fn_flags		19145						
ANR	21260	Symbol	scope -> name		19145						
ANR	21261	Symbol	clone		19145						
ANR	21262	Symbol	ZEND_ACC_RETURN_REFERENCE		19145						
ANR	21263	Symbol	reg_function -> common . fn_flags		19145						
ANR	21264	Symbol	scope -> clone		19145						
ANR	21265	Symbol	internal_function -> handler		19145						
ANR	21266	Symbol	internal_function -> module		19145						
ANR	21267	Symbol	__get -> common		19145						
ANR	21268	DeclStmt									
ANR	21269	Decl							const zend_function_entry	const zend_function_entry *	ptr
ANR	21270	DeclStmt									
ANR	21271	Decl							int	int	i
ANR	21272	DeclStmt									
ANR	21273	Decl							HashTable	HashTable *	target_function_table
ANR	21274	Function	zend_startup_module	2372:0:68869:69127							
ANR	21275	FunctionDef	zend_startup_module (zend_module_entry * module)		21274	0					
ANR	21276	CompoundStatement		2373:0:68939:69127	21274	0					
ANR	21277	ExpressionStatement	TSRMLS_FETCH ( )	2374:1:68942:68956	21274	0	True				
ANR	21278	CallExpression	TSRMLS_FETCH ( )		21274	0					
ANR	21279	Callee	TSRMLS_FETCH		21274	0					
ANR	21280	Identifier	TSRMLS_FETCH		21274	0					
ANR	21281	ArgumentList			21274	1					
ANR	21282	Statement	if	2376:1:68960:68961	21274	1	True				
ANR	21283	Statement	(	2376:4:68963:68963	21274	2	True				
ANR	21284	Statement	(	2376:5:68964:68964	21274	3	True				
ANR	21285	Statement	module	2376:6:68965:68970	21274	4	True				
ANR	21286	Statement	=	2376:13:68972:68972	21274	5	True				
ANR	21287	Statement	zend_register_internal_module	2376:15:68974:69002	21274	6	True				
ANR	21288	Statement	(	2376:44:69003:69003	21274	7	True				
ANR	21289	Statement	module	2376:45:69004:69009	21274	8	True				
ANR	21290	Statement	TSRMLS_CC	2376:52:69011:69019	21274	9	True				
ANR	21291	Statement	)	2376:61:69020:69020	21274	10	True				
ANR	21292	Statement	)	2376:62:69021:69021	21274	11	True				
ANR	21293	Statement	!=	2376:64:69023:69024	21274	12	True				
ANR	21294	Statement	NULL	2376:67:69026:69029	21274	13	True				
ANR	21295	Statement	&&	2376:72:69031:69032	21274	14	True				
ANR	21296	Statement	zend_startup_module_ex	2376:75:69034:69055	21274	15	True				
ANR	21297	Statement	(	2376:97:69056:69056	21274	16	True				
ANR	21298	Statement	module	2376:98:69057:69062	21274	17	True				
ANR	21299	Statement	TSRMLS_CC	2376:105:69064:69072	21274	18	True				
ANR	21300	Statement	)	2376:114:69073:69073	21274	19	True				
ANR	21301	Statement	==	2376:116:69075:69076	21274	20	True				
ANR	21302	Statement	SUCCESS	2376:119:69078:69084	21274	21	True				
ANR	21303	Statement	)	2376:126:69085:69085	21274	22	True				
ANR	21304	CompoundStatement		4:128:147:147	21274	23					
ANR	21305	ReturnStatement	return SUCCESS ;	2377:2:69091:69105	21274	0	True				
ANR	21306	Identifier	SUCCESS		21274	0					
ANR	21307	ReturnStatement	return FAILURE ;	2379:1:69111:69125	21274	24	True				
ANR	21308	Identifier	FAILURE		21274	0					
ANR	21309	ReturnType	ZEND_API int		21274	1					
ANR	21310	Identifier	zend_startup_module		21274	2					
ANR	21311	ParameterList	zend_module_entry * module		21274	3					
ANR	21312	Parameter	zend_module_entry * module	2372:33:68902:68926	21274	0	True				
ANR	21313	ParameterType	zend_module_entry *		21274	0					
ANR	21314	Identifier	module		21274	1					
ANR	21315	CFGEntryNode	ENTRY		21274		True				
ANR	21316	CFGExitNode	EXIT		21274		True				
ANR	21317	Symbol	SUCCESS		21274						
ANR	21318	Symbol	module		21274						
ANR	21319	Symbol	FAILURE		21274						
ANR	21320	Function	zend_get_module_started	2383:0:69140:69397							
ANR	21321	FunctionDef	zend_get_module_started (const char * module_name)		21320	0					
ANR	21322	CompoundStatement		2384:0:69212:69397	21320	0					
ANR	21323	IdentifierDeclStatement	zend_module_entry * module ;	2385:1:69215:69240	21320	0	True				
ANR	21324	IdentifierDecl	* module		21320	0					
ANR	21325	IdentifierDeclType	zend_module_entry *		21320	0					
ANR	21326	Identifier	module		21320	1					
ANR	21327	ReturnStatement	"return ( zend_hash_find ( & module_registry , module_name , strlen ( module_name ) + 1 , ( void * * ) & module ) == SUCCESS && module -> module_started ) ? SUCCESS : FAILURE ;"	2387:1:69244:69395	21320	1	True				
ANR	21328	ConditionalExpression	"( zend_hash_find ( & module_registry , module_name , strlen ( module_name ) + 1 , ( void * * ) & module ) == SUCCESS && module -> module_started ) ? SUCCESS : FAILURE"		21320	0					
ANR	21329	Condition	"zend_hash_find ( & module_registry , module_name , strlen ( module_name ) + 1 , ( void * * ) & module ) == SUCCESS && module -> module_started"		21320	0					
ANR	21330	AndExpression	"zend_hash_find ( & module_registry , module_name , strlen ( module_name ) + 1 , ( void * * ) & module ) == SUCCESS && module -> module_started"		21320	0		&&			
ANR	21331	EqualityExpression	"zend_hash_find ( & module_registry , module_name , strlen ( module_name ) + 1 , ( void * * ) & module ) == SUCCESS"		21320	0		==			
ANR	21332	CallExpression	"zend_hash_find ( & module_registry , module_name , strlen ( module_name ) + 1 , ( void * * ) & module )"		21320	0					
ANR	21333	Callee	zend_hash_find		21320	0					
ANR	21334	Identifier	zend_hash_find		21320	0					
ANR	21335	ArgumentList	& module_registry		21320	1					
ANR	21336	Argument	& module_registry		21320	0					
ANR	21337	UnaryOperationExpression	& module_registry		21320	0					
ANR	21338	UnaryOperator	&		21320	0					
ANR	21339	Identifier	module_registry		21320	1					
ANR	21340	Argument	module_name		21320	1					
ANR	21341	Identifier	module_name		21320	0					
ANR	21342	Argument	strlen ( module_name ) + 1		21320	2					
ANR	21343	AdditiveExpression	strlen ( module_name ) + 1		21320	0		+			
ANR	21344	CallExpression	strlen ( module_name )		21320	0					
ANR	21345	Callee	strlen		21320	0					
ANR	21346	Identifier	strlen		21320	0					
ANR	21347	ArgumentList	module_name		21320	1					
ANR	21348	Argument	module_name		21320	0					
ANR	21349	Identifier	module_name		21320	0					
ANR	21350	PrimaryExpression	1		21320	1					
ANR	21351	Argument	( void * * ) & module		21320	3					
ANR	21352	CastExpression	( void * * ) & module		21320	0					
ANR	21353	CastTarget	void * *		21320	0					
ANR	21354	UnaryOperationExpression	& module		21320	1					
ANR	21355	UnaryOperator	&		21320	0					
ANR	21356	Identifier	module		21320	1					
ANR	21357	Identifier	SUCCESS		21320	1					
ANR	21358	PtrMemberAccess	module -> module_started		21320	1					
ANR	21359	Identifier	module		21320	0					
ANR	21360	Identifier	module_started		21320	1					
ANR	21361	Identifier	SUCCESS		21320	1					
ANR	21362	Identifier	FAILURE		21320	2					
ANR	21363	ReturnType	ZEND_API int		21320	1					
ANR	21364	Identifier	zend_get_module_started		21320	2					
ANR	21365	ParameterList	const char * module_name		21320	3					
ANR	21366	Parameter	const char * module_name	2383:37:69177:69199	21320	0	True				
ANR	21367	ParameterType	const char *		21320	0					
ANR	21368	Identifier	module_name		21320	1					
ANR	21369	CFGEntryNode	ENTRY		21320		True				
ANR	21370	CFGExitNode	EXIT		21320		True				
ANR	21371	Symbol	module -> module_started		21320						
ANR	21372	Symbol	zend_hash_find		21320						
ANR	21373	Symbol	strlen		21320						
ANR	21374	Symbol	SUCCESS		21320						
ANR	21375	Symbol	* module		21320						
ANR	21376	Symbol	module		21320						
ANR	21377	Symbol	& module_registry		21320						
ANR	21378	Symbol	& module		21320						
ANR	21379	Symbol	module_name		21320						
ANR	21380	Symbol	FAILURE		21320						
ANR	21381	Function	clean_module_classes	2401:0:69708:69905							
ANR	21382	FunctionDef	clean_module_classes (int module_number TSRMLS_DC)		21381	0					
ANR	21383	CompoundStatement		2402:0:69780:69905	21381	0					
ANR	21384	Statement	zend_hash_apply_with_argument	2403:1:69783:69811	21381	0	True				
ANR	21385	Statement	(	2403:30:69812:69812	21381	1	True				
ANR	21386	Statement	EG	2403:31:69813:69814	21381	2	True				
ANR	21387	Statement	(	2403:33:69815:69815	21381	3	True				
ANR	21388	Statement	class_table	2403:34:69816:69826	21381	4	True				
ANR	21389	Statement	)	2403:45:69827:69827	21381	5	True				
ANR	21390	Statement	","	2403:46:69828:69828	21381	6	True				
ANR	21391	Statement	(	2403:48:69830:69830	21381	7	True				
ANR	21392	Statement	apply_func_arg_t	2403:49:69831:69846	21381	8	True				
ANR	21393	Statement	)	2403:65:69847:69847	21381	9	True				
ANR	21394	Statement	clean_module_class	2403:67:69849:69866	21381	10	True				
ANR	21395	Statement	","	2403:85:69867:69867	21381	11	True				
ANR	21396	Statement	(	2403:87:69869:69869	21381	12	True				
ANR	21397	Statement	void	2403:88:69870:69873	21381	13	True				
ANR	21398	Statement	*	2403:93:69875:69875	21381	14	True				
ANR	21399	Statement	)	2403:94:69876:69876	21381	15	True				
ANR	21400	Statement	&	2403:96:69878:69878	21381	16	True				
ANR	21401	Statement	module_number	2403:97:69879:69891	21381	17	True				
ANR	21402	Statement	TSRMLS_CC	2403:111:69893:69901	21381	18	True				
ANR	21403	Statement	)	2403:120:69902:69902	21381	19	True				
ANR	21404	ExpressionStatement		2403:121:69903:69903	21381	20	True				
ANR	21405	ReturnType	static void		21381	1					
ANR	21406	Identifier	clean_module_classes		21381	2					
ANR	21407	ParameterList	int module_number TSRMLS_DC		21381	3					
ANR	21408	Parameter	int module_number TSRMLS_DC	2401:33:69741:69767	21381	0	True				
ANR	21409	ParameterType	int module_number		21381	0					
ANR	21410	Identifier	TSRMLS_DC		21381	1					
ANR	21411	CFGEntryNode	ENTRY		21381		True				
ANR	21412	CFGExitNode	EXIT		21381		True				
ANR	21413	Symbol	TSRMLS_DC		21381						
ANR	21414	Function	module_destructor	2407:0:69918:70995							
ANR	21415	FunctionDef	module_destructor (zend_module_entry * module)		21414	0					
ANR	21416	CompoundStatement		2408:0:69978:70995	21414	0					
ANR	21417	ExpressionStatement	TSRMLS_FETCH ( )	2409:1:69981:69995	21414	0	True				
ANR	21418	CallExpression	TSRMLS_FETCH ( )		21414	0					
ANR	21419	Callee	TSRMLS_FETCH		21414	0					
ANR	21420	Identifier	TSRMLS_FETCH		21414	0					
ANR	21421	ArgumentList			21414	1					
ANR	21422	IfStatement	if ( module -> type == MODULE_TEMPORARY )		21414	1					
ANR	21423	Condition	module -> type == MODULE_TEMPORARY	2411:5:70003:70034	21414	0	True				
ANR	21424	EqualityExpression	module -> type == MODULE_TEMPORARY		21414	0		==			
ANR	21425	PtrMemberAccess	module -> type		21414	0					
ANR	21426	Identifier	module		21414	0					
ANR	21427	Identifier	type		21414	1					
ANR	21428	Identifier	MODULE_TEMPORARY		21414	1					
ANR	21429	CompoundStatement		4:39:58:58	21414	1					
ANR	21430	Statement	zend_clean_module_rsrc_dtors	2412:2:70041:70068	21414	0	True				
ANR	21431	Statement	(	2412:30:70069:70069	21414	1	True				
ANR	21432	Statement	module	2412:31:70070:70075	21414	2	True				
ANR	21433	Statement	->	2412:37:70076:70077	21414	3	True				
ANR	21434	Statement	module_number	2412:39:70078:70090	21414	4	True				
ANR	21435	Statement	TSRMLS_CC	2412:53:70092:70100	21414	5	True				
ANR	21436	Statement	)	2412:62:70101:70101	21414	6	True				
ANR	21437	ExpressionStatement		2412:63:70102:70102	21414	7	True				
ANR	21438	Statement	clean_module_constants	2413:2:70106:70127	21414	8	True				
ANR	21439	Statement	(	2413:24:70128:70128	21414	9	True				
ANR	21440	Statement	module	2413:25:70129:70134	21414	10	True				
ANR	21441	Statement	->	2413:31:70135:70136	21414	11	True				
ANR	21442	Statement	module_number	2413:33:70137:70149	21414	12	True				
ANR	21443	Statement	TSRMLS_CC	2413:47:70151:70159	21414	13	True				
ANR	21444	Statement	)	2413:56:70160:70160	21414	14	True				
ANR	21445	ExpressionStatement		2413:57:70161:70161	21414	15	True				
ANR	21446	Statement	clean_module_classes	2414:2:70165:70184	21414	16	True				
ANR	21447	Statement	(	2414:22:70185:70185	21414	17	True				
ANR	21448	Statement	module	2414:23:70186:70191	21414	18	True				
ANR	21449	Statement	->	2414:29:70192:70193	21414	19	True				
ANR	21450	Statement	module_number	2414:31:70194:70206	21414	20	True				
ANR	21451	Statement	TSRMLS_CC	2414:45:70208:70216	21414	21	True				
ANR	21452	Statement	)	2414:54:70217:70217	21414	22	True				
ANR	21453	ExpressionStatement		2414:55:70218:70218	21414	23	True				
ANR	21454	IfStatement	if ( module -> module_started && module -> module_shutdown_func )		21414	2					
ANR	21455	Condition	module -> module_started && module -> module_shutdown_func	2417:5:70229:70282	21414	0	True				
ANR	21456	AndExpression	module -> module_started && module -> module_shutdown_func		21414	0		&&			
ANR	21457	PtrMemberAccess	module -> module_started		21414	0					
ANR	21458	Identifier	module		21414	0					
ANR	21459	Identifier	module_started		21414	1					
ANR	21460	PtrMemberAccess	module -> module_shutdown_func		21414	1					
ANR	21461	Identifier	module		21414	0					
ANR	21462	Identifier	module_shutdown_func		21414	1					
ANR	21463	CompoundStatement		10:61:306:306	21414	1					
ANR	21464	ExpressionStatement	"zend_printf ( ""%s: Module shutdown\\n"" , module -> name )"	2419:2:70295:70345	21414	0	True				
ANR	21465	CallExpression	"zend_printf ( ""%s: Module shutdown\\n"" , module -> name )"		21414	0					
ANR	21466	Callee	zend_printf		21414	0					
ANR	21467	Identifier	zend_printf		21414	0					
ANR	21468	ArgumentList	"""%s: Module shutdown\\n"""		21414	1					
ANR	21469	Argument	"""%s: Module shutdown\\n"""		21414	0					
ANR	21470	PrimaryExpression	"""%s: Module shutdown\\n"""		21414	0					
ANR	21471	Argument	module -> name		21414	1					
ANR	21472	PtrMemberAccess	module -> name		21414	0					
ANR	21473	Identifier	module		21414	0					
ANR	21474	Identifier	name		21414	1					
ANR	21475	Statement	module	2421:2:70356:70361	21414	1	True				
ANR	21476	Statement	->	2421:8:70362:70363	21414	2	True				
ANR	21477	Statement	module_shutdown_func	2421:10:70364:70383	21414	3	True				
ANR	21478	Statement	(	2421:30:70384:70384	21414	4	True				
ANR	21479	Statement	module	2421:31:70385:70390	21414	5	True				
ANR	21480	Statement	->	2421:37:70391:70392	21414	6	True				
ANR	21481	Statement	type	2421:39:70393:70396	21414	7	True				
ANR	21482	Statement	","	2421:43:70397:70397	21414	8	True				
ANR	21483	Statement	module	2421:45:70399:70404	21414	9	True				
ANR	21484	Statement	->	2421:51:70405:70406	21414	10	True				
ANR	21485	Statement	module_number	2421:53:70407:70419	21414	11	True				
ANR	21486	Statement	TSRMLS_CC	2421:67:70421:70429	21414	12	True				
ANR	21487	Statement	)	2421:76:70430:70430	21414	13	True				
ANR	21488	ExpressionStatement		2421:77:70431:70431	21414	14	True				
ANR	21489	IfStatement	if ( module -> globals_size )		21414	3					
ANR	21490	Condition	module -> globals_size	2425:5:70477:70496	21414	0	True				
ANR	21491	PtrMemberAccess	module -> globals_size		21414	0					
ANR	21492	Identifier	module		21414	0					
ANR	21493	Identifier	globals_size		21414	1					
ANR	21494	CompoundStatement		18:27:520:520	21414	1					
ANR	21495	IfStatement	if ( * module -> globals_id_ptr )		21414	0					
ANR	21496	Condition	* module -> globals_id_ptr	2427:6:70518:70540	21414	0	True				
ANR	21497	UnaryOperationExpression	* module -> globals_id_ptr		21414	0					
ANR	21498	UnaryOperator	*		21414	0					
ANR	21499	PtrMemberAccess	module -> globals_id_ptr		21414	1					
ANR	21500	Identifier	module		21414	0					
ANR	21501	Identifier	globals_id_ptr		21414	1					
ANR	21502	CompoundStatement		20:31:564:564	21414	1					
ANR	21503	ExpressionStatement	ts_free_id ( * module -> globals_id_ptr )	2428:3:70548:70583	21414	0	True				
ANR	21504	CallExpression	ts_free_id ( * module -> globals_id_ptr )		21414	0					
ANR	21505	Callee	ts_free_id		21414	0					
ANR	21506	Identifier	ts_free_id		21414	0					
ANR	21507	ArgumentList	* module -> globals_id_ptr		21414	1					
ANR	21508	Argument	* module -> globals_id_ptr		21414	0					
ANR	21509	UnaryOperationExpression	* module -> globals_id_ptr		21414	0					
ANR	21510	UnaryOperator	*		21414	0					
ANR	21511	PtrMemberAccess	module -> globals_id_ptr		21414	1					
ANR	21512	Identifier	module		21414	0					
ANR	21513	Identifier	globals_id_ptr		21414	1					
ANR	21514	ExpressionStatement	module -> module_started = 0	2437:1:70697:70721	21414	4	True				
ANR	21515	AssignmentExpression	module -> module_started = 0		21414	0		=			
ANR	21516	PtrMemberAccess	module -> module_started		21414	0					
ANR	21517	Identifier	module		21414	0					
ANR	21518	Identifier	module_started		21414	1					
ANR	21519	PrimaryExpression	0		21414	1					
ANR	21520	IfStatement	if ( module -> functions )		21414	5					
ANR	21521	Condition	module -> functions	2438:5:70728:70744	21414	0	True				
ANR	21522	PtrMemberAccess	module -> functions		21414	0					
ANR	21523	Identifier	module		21414	0					
ANR	21524	Identifier	functions		21414	1					
ANR	21525	CompoundStatement		31:24:768:768	21414	1					
ANR	21526	Statement	zend_unregister_functions	2439:2:70751:70775	21414	0	True				
ANR	21527	Statement	(	2439:27:70776:70776	21414	1	True				
ANR	21528	Statement	module	2439:28:70777:70782	21414	2	True				
ANR	21529	Statement	->	2439:34:70783:70784	21414	3	True				
ANR	21530	Statement	functions	2439:36:70785:70793	21414	4	True				
ANR	21531	Statement	","	2439:45:70794:70794	21414	5	True				
ANR	21532	Statement	-	2439:47:70796:70796	21414	6	True				
ANR	21533	Statement	1	2439:48:70797:70797	21414	7	True				
ANR	21534	Statement	","	2439:49:70798:70798	21414	8	True				
ANR	21535	Statement	NULL	2439:51:70800:70803	21414	9	True				
ANR	21536	Statement	TSRMLS_CC	2439:56:70805:70813	21414	10	True				
ANR	21537	Statement	)	2439:65:70814:70814	21414	11	True				
ANR	21538	ExpressionStatement		2439:66:70815:70815	21414	12	True				
ANR	21539	IfStatement	"if ( module -> handle && ! getenv ( ""ZEND_DONT_UNLOAD_MODULES"" ) )"		21414	6					
ANR	21540	Condition	"module -> handle && ! getenv ( ""ZEND_DONT_UNLOAD_MODULES"" )"	2444:5:70892:70944	21414	0	True				
ANR	21541	AndExpression	"module -> handle && ! getenv ( ""ZEND_DONT_UNLOAD_MODULES"" )"		21414	0		&&			
ANR	21542	PtrMemberAccess	module -> handle		21414	0					
ANR	21543	Identifier	module		21414	0					
ANR	21544	Identifier	handle		21414	1					
ANR	21545	UnaryOperationExpression	"! getenv ( ""ZEND_DONT_UNLOAD_MODULES"" )"		21414	1					
ANR	21546	UnaryOperator	!		21414	0					
ANR	21547	CallExpression	"getenv ( ""ZEND_DONT_UNLOAD_MODULES"" )"		21414	1					
ANR	21548	Callee	getenv		21414	0					
ANR	21549	Identifier	getenv		21414	0					
ANR	21550	ArgumentList	"""ZEND_DONT_UNLOAD_MODULES"""		21414	1					
ANR	21551	Argument	"""ZEND_DONT_UNLOAD_MODULES"""		21414	0					
ANR	21552	PrimaryExpression	"""ZEND_DONT_UNLOAD_MODULES"""		21414	0					
ANR	21553	CompoundStatement		37:60:968:968	21414	1					
ANR	21554	ExpressionStatement	DL_UNLOAD ( module -> handle )	2445:2:70951:70976	21414	0	True				
ANR	21555	CallExpression	DL_UNLOAD ( module -> handle )		21414	0					
ANR	21556	Callee	DL_UNLOAD		21414	0					
ANR	21557	Identifier	DL_UNLOAD		21414	0					
ANR	21558	ArgumentList	module -> handle		21414	1					
ANR	21559	Argument	module -> handle		21414	0					
ANR	21560	PtrMemberAccess	module -> handle		21414	0					
ANR	21561	Identifier	module		21414	0					
ANR	21562	Identifier	handle		21414	1					
ANR	21563	ReturnType	void		21414	1					
ANR	21564	Identifier	module_destructor		21414	2					
ANR	21565	ParameterList	zend_module_entry * module		21414	3					
ANR	21566	Parameter	zend_module_entry * module	2407:23:69941:69965	21414	0	True				
ANR	21567	ParameterType	zend_module_entry *		21414	0					
ANR	21568	Identifier	module		21414	1					
ANR	21569	CFGEntryNode	ENTRY		21414		True				
ANR	21570	CFGExitNode	EXIT		21414		True				
ANR	21571	Symbol	module -> module_started		21414						
ANR	21572	Symbol	module -> name		21414						
ANR	21573	Symbol	module -> globals_size		21414						
ANR	21574	Symbol	* module		21414						
ANR	21575	Symbol	* * module		21414						
ANR	21576	Symbol	module		21414						
ANR	21577	Symbol	module -> functions		21414						
ANR	21578	Symbol	module -> handle		21414						
ANR	21579	Symbol	MODULE_TEMPORARY		21414						
ANR	21580	Symbol	module -> globals_id_ptr		21414						
ANR	21581	Symbol	module -> module_shutdown_func		21414						
ANR	21582	Symbol	module -> type		21414						
ANR	21583	Symbol	* module -> globals_id_ptr		21414						
ANR	21584	Symbol	getenv		21414						
ANR	21585	DeclStmt									
ANR	21586	Decl							zend_module_entry	zend_module_entry * *	p
ANR	21587	DeclStmt									
ANR	21588	Decl							zend_module_entry	zend_module_entry *	module
ANR	21589	DeclStmt									
ANR	21590	Decl							zend_module_entry	zend_module_entry * *	p
ANR	21591	DeclStmt									
ANR	21592	Decl							zend_module_entry	zend_module_entry *	module
ANR	21593	DeclStmt									
ANR	21594	Decl							zend_class_entry	zend_class_entry * *	p
ANR	21595	DeclStmt									
ANR	21596	Decl							zend_module_entry	zend_module_entry * *	p
ANR	21597	DeclStmt									
ANR	21598	Decl							zend_module_entry	zend_module_entry *	module
ANR	21599	Function	zend_next_free_module	2547:0:73310:73417							
ANR	21600	FunctionDef	zend_next_free_module ()		21599	0					
ANR	21601	CompoundStatement		2548:0:73361:73417	21599	0					
ANR	21602	ReturnStatement	return zend_hash_num_elements ( & module_registry ) + 1 ;	2549:1:73364:73415	21599	0	True				
ANR	21603	AdditiveExpression	zend_hash_num_elements ( & module_registry ) + 1		21599	0		+			
ANR	21604	CallExpression	zend_hash_num_elements ( & module_registry )		21599	0					
ANR	21605	Callee	zend_hash_num_elements		21599	0					
ANR	21606	Identifier	zend_hash_num_elements		21599	0					
ANR	21607	ArgumentList	& module_registry		21599	1					
ANR	21608	Argument	& module_registry		21599	0					
ANR	21609	UnaryOperationExpression	& module_registry		21599	0					
ANR	21610	UnaryOperator	&		21599	0					
ANR	21611	Identifier	module_registry		21599	1					
ANR	21612	PrimaryExpression	1		21599	1					
ANR	21613	ReturnType	ZEND_API int		21599	1					
ANR	21614	Identifier	zend_next_free_module		21599	2					
ANR	21615	ParameterList			21599	3					
ANR	21616	CFGEntryNode	ENTRY		21599		True				
ANR	21617	CFGExitNode	EXIT		21599		True				
ANR	21618	Symbol	zend_hash_num_elements		21599						
ANR	21619	Symbol	& module_registry		21599						
ANR	21620	Function	do_register_internal_class	2553:0:73430:74590							
ANR	21621	FunctionDef	"do_register_internal_class (zend_class_entry * orig_class_entry , zend_uint ce_flags TSRMLS_DC)"		21620	0					
ANR	21622	CompoundStatement		2554:0:73558:74590	21620	0					
ANR	21623	IdentifierDeclStatement	zend_class_entry * class_entry = malloc ( sizeof ( zend_class_entry ) ) ;	2555:1:73561:73625	21620	0	True				
ANR	21624	IdentifierDecl	* class_entry = malloc ( sizeof ( zend_class_entry ) )		21620	0					
ANR	21625	IdentifierDeclType	zend_class_entry *		21620	0					
ANR	21626	Identifier	class_entry		21620	1					
ANR	21627	AssignmentExpression	* class_entry = malloc ( sizeof ( zend_class_entry ) )		21620	2		=			
ANR	21628	Identifier	class_entry		21620	0					
ANR	21629	CallExpression	malloc ( sizeof ( zend_class_entry ) )		21620	1					
ANR	21630	Callee	malloc		21620	0					
ANR	21631	Identifier	malloc		21620	0					
ANR	21632	ArgumentList	sizeof ( zend_class_entry )		21620	1					
ANR	21633	Argument	sizeof ( zend_class_entry )		21620	0					
ANR	21634	SizeofExpression	sizeof ( zend_class_entry )		21620	0					
ANR	21635	Sizeof	sizeof		21620	0					
ANR	21636	SizeofOperand	zend_class_entry		21620	1					
ANR	21637	IdentifierDeclStatement	char * lowercase_name = emalloc ( orig_class_entry -> name_length + 1 ) ;	2556:1:73628:73693	21620	1	True				
ANR	21638	IdentifierDecl	* lowercase_name = emalloc ( orig_class_entry -> name_length + 1 )		21620	0					
ANR	21639	IdentifierDeclType	char *		21620	0					
ANR	21640	Identifier	lowercase_name		21620	1					
ANR	21641	AssignmentExpression	* lowercase_name = emalloc ( orig_class_entry -> name_length + 1 )		21620	2		=			
ANR	21642	Identifier	lowercase_name		21620	0					
ANR	21643	CallExpression	emalloc ( orig_class_entry -> name_length + 1 )		21620	1					
ANR	21644	Callee	emalloc		21620	0					
ANR	21645	Identifier	emalloc		21620	0					
ANR	21646	ArgumentList	orig_class_entry -> name_length + 1		21620	1					
ANR	21647	Argument	orig_class_entry -> name_length + 1		21620	0					
ANR	21648	AdditiveExpression	orig_class_entry -> name_length + 1		21620	0		+			
ANR	21649	PtrMemberAccess	orig_class_entry -> name_length		21620	0					
ANR	21650	Identifier	orig_class_entry		21620	0					
ANR	21651	Identifier	name_length		21620	1					
ANR	21652	PrimaryExpression	1		21620	1					
ANR	21653	IdentifierDeclStatement	zend_ulong hash ;	2557:1:73696:73711	21620	2	True				
ANR	21654	IdentifierDecl	hash		21620	0					
ANR	21655	IdentifierDeclType	zend_ulong		21620	0					
ANR	21656	Identifier	hash		21620	1					
ANR	21657	ExpressionStatement	* class_entry = * orig_class_entry	2558:1:73714:73746	21620	3	True				
ANR	21658	AssignmentExpression	* class_entry = * orig_class_entry		21620	0		=			
ANR	21659	UnaryOperationExpression	* class_entry		21620	0					
ANR	21660	UnaryOperator	*		21620	0					
ANR	21661	Identifier	class_entry		21620	1					
ANR	21662	UnaryOperationExpression	* orig_class_entry		21620	1					
ANR	21663	UnaryOperator	*		21620	0					
ANR	21664	Identifier	orig_class_entry		21620	1					
ANR	21665	ExpressionStatement	class_entry -> type = ZEND_INTERNAL_CLASS	2560:1:73750:73789	21620	4	True				
ANR	21666	AssignmentExpression	class_entry -> type = ZEND_INTERNAL_CLASS		21620	0		=			
ANR	21667	PtrMemberAccess	class_entry -> type		21620	0					
ANR	21668	Identifier	class_entry		21620	0					
ANR	21669	Identifier	type		21620	1					
ANR	21670	Identifier	ZEND_INTERNAL_CLASS		21620	1					
ANR	21671	Statement	zend_initialize_class_data	2561:1:73792:73817	21620	5	True				
ANR	21672	Statement	(	2561:27:73818:73818	21620	6	True				
ANR	21673	Statement	class_entry	2561:28:73819:73829	21620	7	True				
ANR	21674	Statement	","	2561:39:73830:73830	21620	8	True				
ANR	21675	Statement	0	2561:41:73832:73832	21620	9	True				
ANR	21676	Statement	TSRMLS_CC	2561:43:73834:73842	21620	10	True				
ANR	21677	Statement	)	2561:52:73843:73843	21620	11	True				
ANR	21678	ExpressionStatement		2561:53:73844:73844	21620	12	True				
ANR	21679	ExpressionStatement	class_entry -> ce_flags = ce_flags	2562:1:73847:73879	21620	13	True				
ANR	21680	AssignmentExpression	class_entry -> ce_flags = ce_flags		21620	0		=			
ANR	21681	PtrMemberAccess	class_entry -> ce_flags		21620	0					
ANR	21682	Identifier	class_entry		21620	0					
ANR	21683	Identifier	ce_flags		21620	1					
ANR	21684	Identifier	ce_flags		21620	1					
ANR	21685	ExpressionStatement	class_entry -> info . internal . module = EG ( current_module )	2563:1:73882:73936	21620	14	True				
ANR	21686	AssignmentExpression	class_entry -> info . internal . module = EG ( current_module )		21620	0		=			
ANR	21687	MemberAccess	class_entry -> info . internal . module		21620	0					
ANR	21688	MemberAccess	class_entry -> info . internal		21620	0					
ANR	21689	PtrMemberAccess	class_entry -> info		21620	0					
ANR	21690	Identifier	class_entry		21620	0					
ANR	21691	Identifier	info		21620	1					
ANR	21692	Identifier	internal		21620	1					
ANR	21693	Identifier	module		21620	1					
ANR	21694	CallExpression	EG ( current_module )		21620	1					
ANR	21695	Callee	EG		21620	0					
ANR	21696	Identifier	EG		21620	0					
ANR	21697	ArgumentList	current_module		21620	1					
ANR	21698	Argument	current_module		21620	0					
ANR	21699	Identifier	current_module		21620	0					
ANR	21700	IfStatement	if ( class_entry -> info . internal . builtin_functions )		21620	15					
ANR	21701	Condition	class_entry -> info . internal . builtin_functions	2565:5:73944:73987	21620	0	True				
ANR	21702	MemberAccess	class_entry -> info . internal . builtin_functions		21620	0					
ANR	21703	MemberAccess	class_entry -> info . internal		21620	0					
ANR	21704	PtrMemberAccess	class_entry -> info		21620	0					
ANR	21705	Identifier	class_entry		21620	0					
ANR	21706	Identifier	info		21620	1					
ANR	21707	Identifier	internal		21620	1					
ANR	21708	Identifier	builtin_functions		21620	1					
ANR	21709	CompoundStatement		12:51:431:431	21620	1					
ANR	21710	Statement	zend_register_functions	2566:2:73994:74016	21620	0	True				
ANR	21711	Statement	(	2566:25:74017:74017	21620	1	True				
ANR	21712	Statement	class_entry	2566:26:74018:74028	21620	2	True				
ANR	21713	Statement	","	2566:37:74029:74029	21620	3	True				
ANR	21714	Statement	class_entry	2566:39:74031:74041	21620	4	True				
ANR	21715	Statement	->	2566:50:74042:74043	21620	5	True				
ANR	21716	Statement	info	2566:52:74044:74047	21620	6	True				
ANR	21717	Statement	.	2566:56:74048:74048	21620	7	True				
ANR	21718	Statement	internal	2566:57:74049:74056	21620	8	True				
ANR	21719	Statement	.	2566:65:74057:74057	21620	9	True				
ANR	21720	Statement	builtin_functions	2566:66:74058:74074	21620	10	True				
ANR	21721	Statement	","	2566:83:74075:74075	21620	11	True				
ANR	21722	Statement	&	2566:85:74077:74077	21620	12	True				
ANR	21723	Statement	class_entry	2566:86:74078:74088	21620	13	True				
ANR	21724	Statement	->	2566:97:74089:74090	21620	14	True				
ANR	21725	Statement	function_table	2566:99:74091:74104	21620	15	True				
ANR	21726	Statement	","	2566:113:74105:74105	21620	16	True				
ANR	21727	Statement	MODULE_PERSISTENT	2566:115:74107:74123	21620	17	True				
ANR	21728	Statement	TSRMLS_CC	2566:133:74125:74133	21620	18	True				
ANR	21729	Statement	)	2566:142:74134:74134	21620	19	True				
ANR	21730	ExpressionStatement		2566:143:74135:74135	21620	20	True				
ANR	21731	ExpressionStatement	"zend_str_tolower_copy ( lowercase_name , orig_class_entry -> name , class_entry -> name_length )"	2569:1:74142:74229	21620	16	True				
ANR	21732	CallExpression	"zend_str_tolower_copy ( lowercase_name , orig_class_entry -> name , class_entry -> name_length )"		21620	0					
ANR	21733	Callee	zend_str_tolower_copy		21620	0					
ANR	21734	Identifier	zend_str_tolower_copy		21620	0					
ANR	21735	ArgumentList	lowercase_name		21620	1					
ANR	21736	Argument	lowercase_name		21620	0					
ANR	21737	Identifier	lowercase_name		21620	0					
ANR	21738	Argument	orig_class_entry -> name		21620	1					
ANR	21739	PtrMemberAccess	orig_class_entry -> name		21620	0					
ANR	21740	Identifier	orig_class_entry		21620	0					
ANR	21741	Identifier	name		21620	1					
ANR	21742	Argument	class_entry -> name_length		21620	2					
ANR	21743	PtrMemberAccess	class_entry -> name_length		21620	0					
ANR	21744	Identifier	class_entry		21620	0					
ANR	21745	Identifier	name_length		21620	1					
ANR	21746	Statement	lowercase_name	2570:1:74232:74245	21620	17	True				
ANR	21747	Statement	=	2570:16:74247:74247	21620	18	True				
ANR	21748	Statement	(	2570:18:74249:74249	21620	19	True				
ANR	21749	Statement	char	2570:19:74250:74253	21620	20	True				
ANR	21750	Statement	*	2570:23:74254:74254	21620	21	True				
ANR	21751	Statement	)	2570:24:74255:74255	21620	22	True				
ANR	21752	Statement	zend_new_interned_string	2570:25:74256:74279	21620	23	True				
ANR	21753	Statement	(	2570:49:74280:74280	21620	24	True				
ANR	21754	Statement	lowercase_name	2570:50:74281:74294	21620	25	True				
ANR	21755	Statement	","	2570:64:74295:74295	21620	26	True				
ANR	21756	Statement	class_entry	2570:66:74297:74307	21620	27	True				
ANR	21757	Statement	->	2570:77:74308:74309	21620	28	True				
ANR	21758	Statement	name_length	2570:79:74310:74320	21620	29	True				
ANR	21759	Statement	+	2570:91:74322:74322	21620	30	True				
ANR	21760	Statement	1	2570:93:74324:74324	21620	31	True				
ANR	21761	Statement	","	2570:94:74325:74325	21620	32	True				
ANR	21762	Statement	1	2570:96:74327:74327	21620	33	True				
ANR	21763	Statement	TSRMLS_CC	2570:98:74329:74337	21620	34	True				
ANR	21764	Statement	)	2570:107:74338:74338	21620	35	True				
ANR	21765	ExpressionStatement		2570:108:74339:74339	21620	36	True				
ANR	21766	ExpressionStatement	"hash = str_hash ( lowercase_name , class_entry -> name_length )"	2571:1:74342:74399	21620	37	True				
ANR	21767	AssignmentExpression	"hash = str_hash ( lowercase_name , class_entry -> name_length )"		21620	0		=			
ANR	21768	Identifier	hash		21620	0					
ANR	21769	CallExpression	"str_hash ( lowercase_name , class_entry -> name_length )"		21620	1					
ANR	21770	Callee	str_hash		21620	0					
ANR	21771	Identifier	str_hash		21620	0					
ANR	21772	ArgumentList	lowercase_name		21620	1					
ANR	21773	Argument	lowercase_name		21620	0					
ANR	21774	Identifier	lowercase_name		21620	0					
ANR	21775	Argument	class_entry -> name_length		21620	1					
ANR	21776	PtrMemberAccess	class_entry -> name_length		21620	0					
ANR	21777	Identifier	class_entry		21620	0					
ANR	21778	Identifier	name_length		21620	1					
ANR	21779	ExpressionStatement	"zend_hash_quick_update ( CG ( class_table ) , lowercase_name , class_entry -> name_length + 1 , hash , & class_entry , sizeof ( zend_class_entry * ) , NULL )"	2572:1:74402:74539	21620	38	True				
ANR	21780	CallExpression	"zend_hash_quick_update ( CG ( class_table ) , lowercase_name , class_entry -> name_length + 1 , hash , & class_entry , sizeof ( zend_class_entry * ) , NULL )"		21620	0					
ANR	21781	Callee	zend_hash_quick_update		21620	0					
ANR	21782	Identifier	zend_hash_quick_update		21620	0					
ANR	21783	ArgumentList	CG ( class_table )		21620	1					
ANR	21784	Argument	CG ( class_table )		21620	0					
ANR	21785	CallExpression	CG ( class_table )		21620	0					
ANR	21786	Callee	CG		21620	0					
ANR	21787	Identifier	CG		21620	0					
ANR	21788	ArgumentList	class_table		21620	1					
ANR	21789	Argument	class_table		21620	0					
ANR	21790	Identifier	class_table		21620	0					
ANR	21791	Argument	lowercase_name		21620	1					
ANR	21792	Identifier	lowercase_name		21620	0					
ANR	21793	Argument	class_entry -> name_length + 1		21620	2					
ANR	21794	AdditiveExpression	class_entry -> name_length + 1		21620	0		+			
ANR	21795	PtrMemberAccess	class_entry -> name_length		21620	0					
ANR	21796	Identifier	class_entry		21620	0					
ANR	21797	Identifier	name_length		21620	1					
ANR	21798	PrimaryExpression	1		21620	1					
ANR	21799	Argument	hash		21620	3					
ANR	21800	Identifier	hash		21620	0					
ANR	21801	Argument	& class_entry		21620	4					
ANR	21802	UnaryOperationExpression	& class_entry		21620	0					
ANR	21803	UnaryOperator	&		21620	0					
ANR	21804	Identifier	class_entry		21620	1					
ANR	21805	Argument	sizeof ( zend_class_entry * )		21620	5					
ANR	21806	SizeofExpression	sizeof ( zend_class_entry * )		21620	0					
ANR	21807	Sizeof	sizeof		21620	0					
ANR	21808	SizeofOperand	zend_class_entry *		21620	1					
ANR	21809	Argument	NULL		21620	6					
ANR	21810	Identifier	NULL		21620	0					
ANR	21811	ExpressionStatement	str_efree ( lowercase_name )	2573:1:74542:74567	21620	39	True				
ANR	21812	CallExpression	str_efree ( lowercase_name )		21620	0					
ANR	21813	Callee	str_efree		21620	0					
ANR	21814	Identifier	str_efree		21620	0					
ANR	21815	ArgumentList	lowercase_name		21620	1					
ANR	21816	Argument	lowercase_name		21620	0					
ANR	21817	Identifier	lowercase_name		21620	0					
ANR	21818	ReturnStatement	return class_entry ;	2574:1:74570:74588	21620	40	True				
ANR	21819	Identifier	class_entry		21620	0					
ANR	21820	ReturnType	static zend_class_entry *		21620	1					
ANR	21821	Identifier	do_register_internal_class		21620	2					
ANR	21822	ParameterList	"zend_class_entry * orig_class_entry , zend_uint ce_flags TSRMLS_DC"		21620	3					
ANR	21823	Parameter	zend_class_entry * orig_class_entry	2553:52:73482:73515	21620	0	True				
ANR	21824	ParameterType	zend_class_entry *		21620	0					
ANR	21825	Identifier	orig_class_entry		21620	1					
ANR	21826	Parameter	zend_uint ce_flags TSRMLS_DC	2553:88:73518:73545	21620	1	True				
ANR	21827	ParameterType	zend_uint ce_flags		21620	0					
ANR	21828	Identifier	TSRMLS_DC		21620	1					
ANR	21829	CFGEntryNode	ENTRY		21620		True				
ANR	21830	CFGExitNode	EXIT		21620		True				
ANR	21831	Symbol	& class_entry		21620						
ANR	21832	Symbol	class_entry -> info		21620						
ANR	21833	Symbol	class_entry -> name_length		21620						
ANR	21834	Symbol	TSRMLS_DC		21620						
ANR	21835	Symbol	current_module		21620						
ANR	21836	Symbol	emalloc		21620						
ANR	21837	Symbol	class_entry -> ce_flags		21620						
ANR	21838	Symbol	class_entry -> info . internal . builtin_functions		21620						
ANR	21839	Symbol	orig_class_entry -> name		21620						
ANR	21840	Symbol	class_table		21620						
ANR	21841	Symbol	class_entry -> type		21620						
ANR	21842	Symbol	ZEND_INTERNAL_CLASS		21620						
ANR	21843	Symbol	class_entry -> info . internal . module		21620						
ANR	21844	Symbol	malloc		21620						
ANR	21845	Symbol	EG		21620						
ANR	21846	Symbol	NULL		21620						
ANR	21847	Symbol	CG		21620						
ANR	21848	Symbol	class_entry		21620						
ANR	21849	Symbol	* orig_class_entry		21620						
ANR	21850	Symbol	orig_class_entry -> name_length		21620						
ANR	21851	Symbol	str_hash		21620						
ANR	21852	Symbol	orig_class_entry		21620						
ANR	21853	Symbol	class_entry -> info . internal		21620						
ANR	21854	Symbol	* class_entry		21620						
ANR	21855	Symbol	lowercase_name		21620						
ANR	21856	Symbol	ce_flags		21620						
ANR	21857	Symbol	hash		21620						
ANR	21858	DeclStmt									
ANR	21859	Decl							zend_class_entry	zend_class_entry *	register_class
ANR	21860	DeclStmt									
ANR	21861	Decl							zend_class_entry	zend_class_entry * *	pce
ANR	21862	DeclStmt									
ANR	21863	Decl							zend_class_entry	zend_class_entry *	interface_entry
ANR	21864	DeclStmt									
ANR	21865	Decl							va_list	va_list	interface_list
ANR	21866	DeclStmt									
ANR	21867	Decl							char	char *	lcname
ANR	21868	DeclStmt									
ANR	21869	Decl							int	int	ret
ANR	21870	Function	zend_set_hash_symbol	2653:0:76951:77531							
ANR	21871	FunctionDef	"zend_set_hash_symbol (zval * symbol , const char * name , int name_length , zend_bool is_ref , int num_symbol_tables)"		21870	0					
ANR	21872	CompoundStatement		2654:0:77090:77531	21870	0					
ANR	21873	IdentifierDeclStatement	HashTable * symbol_table ;	2655:1:77093:77116	21870	0	True				
ANR	21874	IdentifierDecl	* symbol_table		21870	0					
ANR	21875	IdentifierDeclType	HashTable *		21870	0					
ANR	21876	Identifier	symbol_table		21870	1					
ANR	21877	IdentifierDeclStatement	va_list symbol_table_list ;	2656:1:77119:77144	21870	1	True				
ANR	21878	IdentifierDecl	symbol_table_list		21870	0					
ANR	21879	IdentifierDeclType	va_list		21870	0					
ANR	21880	Identifier	symbol_table_list		21870	1					
ANR	21881	IfStatement	if ( num_symbol_tables <= 0 )		21870	2					
ANR	21882	Condition	num_symbol_tables <= 0	2658:5:77152:77173	21870	0	True				
ANR	21883	RelationalExpression	num_symbol_tables <= 0		21870	0		<=			
ANR	21884	Identifier	num_symbol_tables		21870	0					
ANR	21885	PrimaryExpression	0		21870	1					
ANR	21886	ReturnStatement	return FAILURE ;	2658:29:77176:77190	21870	1	True				
ANR	21887	Identifier	FAILURE		21870	0					
ANR	21888	ExpressionStatement	"Z_SET_ISREF_TO_P ( symbol , is_ref )"	2660:1:77194:77226	21870	3	True				
ANR	21889	CallExpression	"Z_SET_ISREF_TO_P ( symbol , is_ref )"		21870	0					
ANR	21890	Callee	Z_SET_ISREF_TO_P		21870	0					
ANR	21891	Identifier	Z_SET_ISREF_TO_P		21870	0					
ANR	21892	ArgumentList	symbol		21870	1					
ANR	21893	Argument	symbol		21870	0					
ANR	21894	Identifier	symbol		21870	0					
ANR	21895	Argument	is_ref		21870	1					
ANR	21896	Identifier	is_ref		21870	0					
ANR	21897	ExpressionStatement	"va_start ( symbol_table_list , num_symbol_tables )"	2662:1:77230:77276	21870	4	True				
ANR	21898	CallExpression	"va_start ( symbol_table_list , num_symbol_tables )"		21870	0					
ANR	21899	Callee	va_start		21870	0					
ANR	21900	Identifier	va_start		21870	0					
ANR	21901	ArgumentList	symbol_table_list		21870	1					
ANR	21902	Argument	symbol_table_list		21870	0					
ANR	21903	Identifier	symbol_table_list		21870	0					
ANR	21904	Argument	num_symbol_tables		21870	1					
ANR	21905	Identifier	num_symbol_tables		21870	0					
ANR	21906	WhileStatement	while ( num_symbol_tables -- > 0 )		21870	5					
ANR	21907	Condition	num_symbol_tables -- > 0	2663:8:77286:77308	21870	0	True				
ANR	21908	RelationalExpression	num_symbol_tables -- > 0		21870	0		>			
ANR	21909	PostIncDecOperationExpression	num_symbol_tables --		21870	0					
ANR	21910	Identifier	num_symbol_tables		21870	0					
ANR	21911	IncDec	--		21870	1					
ANR	21912	PrimaryExpression	0		21870	1					
ANR	21913	CompoundStatement		10:33:220:220	21870	1					
ANR	21914	Statement	symbol_table	2664:2:77315:77326	21870	0	True				
ANR	21915	Statement	=	2664:15:77328:77328	21870	1	True				
ANR	21916	Statement	va_arg	2664:17:77330:77335	21870	2	True				
ANR	21917	Statement	(	2664:23:77336:77336	21870	3	True				
ANR	21918	Statement	symbol_table_list	2664:24:77337:77353	21870	4	True				
ANR	21919	Statement	","	2664:41:77354:77354	21870	5	True				
ANR	21920	Statement	HashTable	2664:43:77356:77364	21870	6	True				
ANR	21921	Statement	*	2664:53:77366:77366	21870	7	True				
ANR	21922	Statement	)	2664:54:77367:77367	21870	8	True				
ANR	21923	ExpressionStatement		2664:55:77368:77368	21870	9	True				
ANR	21924	ExpressionStatement	"zend_hash_update ( symbol_table , name , name_length + 1 , & symbol , sizeof ( zval * ) , NULL )"	2665:2:77372:77456	21870	10	True				
ANR	21925	CallExpression	"zend_hash_update ( symbol_table , name , name_length + 1 , & symbol , sizeof ( zval * ) , NULL )"		21870	0					
ANR	21926	Callee	zend_hash_update		21870	0					
ANR	21927	Identifier	zend_hash_update		21870	0					
ANR	21928	ArgumentList	symbol_table		21870	1					
ANR	21929	Argument	symbol_table		21870	0					
ANR	21930	Identifier	symbol_table		21870	0					
ANR	21931	Argument	name		21870	1					
ANR	21932	Identifier	name		21870	0					
ANR	21933	Argument	name_length + 1		21870	2					
ANR	21934	AdditiveExpression	name_length + 1		21870	0		+			
ANR	21935	Identifier	name_length		21870	0					
ANR	21936	PrimaryExpression	1		21870	1					
ANR	21937	Argument	& symbol		21870	3					
ANR	21938	UnaryOperationExpression	& symbol		21870	0					
ANR	21939	UnaryOperator	&		21870	0					
ANR	21940	Identifier	symbol		21870	1					
ANR	21941	Argument	sizeof ( zval * )		21870	4					
ANR	21942	SizeofExpression	sizeof ( zval * )		21870	0					
ANR	21943	Sizeof	sizeof		21870	0					
ANR	21944	SizeofOperand	zval *		21870	1					
ANR	21945	Argument	NULL		21870	5					
ANR	21946	Identifier	NULL		21870	0					
ANR	21947	ExpressionStatement	zval_add_ref ( & symbol )	2666:2:77460:77481	21870	11	True				
ANR	21948	CallExpression	zval_add_ref ( & symbol )		21870	0					
ANR	21949	Callee	zval_add_ref		21870	0					
ANR	21950	Identifier	zval_add_ref		21870	0					
ANR	21951	ArgumentList	& symbol		21870	1					
ANR	21952	Argument	& symbol		21870	0					
ANR	21953	UnaryOperationExpression	& symbol		21870	0					
ANR	21954	UnaryOperator	&		21870	0					
ANR	21955	Identifier	symbol		21870	1					
ANR	21956	ExpressionStatement	va_end ( symbol_table_list )	2668:1:77487:77512	21870	6	True				
ANR	21957	CallExpression	va_end ( symbol_table_list )		21870	0					
ANR	21958	Callee	va_end		21870	0					
ANR	21959	Identifier	va_end		21870	0					
ANR	21960	ArgumentList	symbol_table_list		21870	1					
ANR	21961	Argument	symbol_table_list		21870	0					
ANR	21962	Identifier	symbol_table_list		21870	0					
ANR	21963	ReturnStatement	return SUCCESS ;	2669:1:77515:77529	21870	7	True				
ANR	21964	Identifier	SUCCESS		21870	0					
ANR	21965	ReturnType	ZEND_API int		21870	1					
ANR	21966	Identifier	zend_set_hash_symbol		21870	2					
ANR	21967	ParameterList	"zval * symbol , const char * name , int name_length , zend_bool is_ref , int num_symbol_tables"		21870	3					
ANR	21968	Parameter	zval * symbol	2653:34:76985:76996	21870	0	True				
ANR	21969	ParameterType	zval *		21870	0					
ANR	21970	Identifier	symbol		21870	1					
ANR	21971	Parameter	const char * name	2653:48:76999:77014	21870	1	True				
ANR	21972	ParameterType	const char *		21870	0					
ANR	21973	Identifier	name		21870	1					
ANR	21974	Parameter	int name_length	2653:66:77017:77031	21870	2	True				
ANR	21975	ParameterType	int		21870	0					
ANR	21976	Identifier	name_length		21870	1					
ANR	21977	Parameter	zend_bool is_ref	2653:83:77034:77049	21870	3	True				
ANR	21978	ParameterType	zend_bool		21870	0					
ANR	21979	Identifier	is_ref		21870	1					
ANR	21980	Parameter	int num_symbol_tables	2653:101:77052:77072	21870	4	True				
ANR	21981	ParameterType	int		21870	0					
ANR	21982	Identifier	num_symbol_tables		21870	1					
ANR	21983	CFGEntryNode	ENTRY		21870		True				
ANR	21984	CFGExitNode	EXIT		21870		True				
ANR	21985	Symbol	is_ref		21870						
ANR	21986	Symbol	symbol		21870						
ANR	21987	Symbol	symbol_table_list		21870						
ANR	21988	Symbol	NULL		21870						
ANR	21989	Symbol	SUCCESS		21870						
ANR	21990	Symbol	num_symbol_tables		21870						
ANR	21991	Symbol	name		21870						
ANR	21992	Symbol	name_length		21870						
ANR	21993	Symbol	symbol_table		21870						
ANR	21994	Symbol	FAILURE		21870						
ANR	21995	Symbol	& symbol		21870						
ANR	21996	Function	zend_disable_function	2683:0:77878:78238							
ANR	21997	FunctionDef	"zend_disable_function (char * function_name , uint function_name_length TSRMLS_DC)"		21996	0					
ANR	21998	CompoundStatement		2684:0:77981:78238	21996	0					
ANR	21999	IdentifierDeclStatement	zend_internal_function * func ;	2685:1:77984:78012	21996	0	True				
ANR	22000	IdentifierDecl	* func		21996	0					
ANR	22001	IdentifierDeclType	zend_internal_function *		21996	0					
ANR	22002	Identifier	func		21996	1					
ANR	22003	IfStatement	"if ( zend_hash_find ( CG ( function_table ) , function_name , function_name_length + 1 , ( void * * ) & func ) == SUCCESS )"		21996	1					
ANR	22004	Condition	"zend_hash_find ( CG ( function_table ) , function_name , function_name_length + 1 , ( void * * ) & func ) == SUCCESS"	2686:5:78019:78116	21996	0	True				
ANR	22005	EqualityExpression	"zend_hash_find ( CG ( function_table ) , function_name , function_name_length + 1 , ( void * * ) & func ) == SUCCESS"		21996	0		==			
ANR	22006	CallExpression	"zend_hash_find ( CG ( function_table ) , function_name , function_name_length + 1 , ( void * * ) & func )"		21996	0					
ANR	22007	Callee	zend_hash_find		21996	0					
ANR	22008	Identifier	zend_hash_find		21996	0					
ANR	22009	ArgumentList	CG ( function_table )		21996	1					
ANR	22010	Argument	CG ( function_table )		21996	0					
ANR	22011	CallExpression	CG ( function_table )		21996	0					
ANR	22012	Callee	CG		21996	0					
ANR	22013	Identifier	CG		21996	0					
ANR	22014	ArgumentList	function_table		21996	1					
ANR	22015	Argument	function_table		21996	0					
ANR	22016	Identifier	function_table		21996	0					
ANR	22017	Argument	function_name		21996	1					
ANR	22018	Identifier	function_name		21996	0					
ANR	22019	Argument	function_name_length + 1		21996	2					
ANR	22020	AdditiveExpression	function_name_length + 1		21996	0		+			
ANR	22021	Identifier	function_name_length		21996	0					
ANR	22022	PrimaryExpression	1		21996	1					
ANR	22023	Argument	( void * * ) & func		21996	3					
ANR	22024	CastExpression	( void * * ) & func		21996	0					
ANR	22025	CastTarget	void * *		21996	0					
ANR	22026	UnaryOperationExpression	& func		21996	1					
ANR	22027	UnaryOperator	&		21996	0					
ANR	22028	Identifier	func		21996	1					
ANR	22029	Identifier	SUCCESS		21996	1					
ANR	22030	CompoundStatement		3:105:137:137	21996	1					
ANR	22031	ExpressionStatement	func -> arg_info = NULL	2687:2:78123:78144	21996	0	True				
ANR	22032	AssignmentExpression	func -> arg_info = NULL		21996	0		=			
ANR	22033	PtrMemberAccess	func -> arg_info		21996	0					
ANR	22034	Identifier	func		21996	0					
ANR	22035	Identifier	arg_info		21996	1					
ANR	22036	Identifier	NULL		21996	1					
ANR	22037	ExpressionStatement	func -> handler = ZEND_FN ( display_disabled_function )	2688:2:78148:78198	21996	1	True				
ANR	22038	AssignmentExpression	func -> handler = ZEND_FN ( display_disabled_function )		21996	0		=			
ANR	22039	PtrMemberAccess	func -> handler		21996	0					
ANR	22040	Identifier	func		21996	0					
ANR	22041	Identifier	handler		21996	1					
ANR	22042	CallExpression	ZEND_FN ( display_disabled_function )		21996	1					
ANR	22043	Callee	ZEND_FN		21996	0					
ANR	22044	Identifier	ZEND_FN		21996	0					
ANR	22045	ArgumentList	display_disabled_function		21996	1					
ANR	22046	Argument	display_disabled_function		21996	0					
ANR	22047	Identifier	display_disabled_function		21996	0					
ANR	22048	ReturnStatement	return SUCCESS ;	2689:2:78202:78216	21996	2	True				
ANR	22049	Identifier	SUCCESS		21996	0					
ANR	22050	ReturnStatement	return FAILURE ;	2691:1:78222:78236	21996	2	True				
ANR	22051	Identifier	FAILURE		21996	0					
ANR	22052	ReturnType	ZEND_API int		21996	1					
ANR	22053	Identifier	zend_disable_function		21996	2					
ANR	22054	ParameterList	"char * function_name , uint function_name_length TSRMLS_DC"		21996	3					
ANR	22055	Parameter	char * function_name	2683:35:77913:77931	21996	0	True				
ANR	22056	ParameterType	char *		21996	0					
ANR	22057	Identifier	function_name		21996	1					
ANR	22058	Parameter	uint function_name_length TSRMLS_DC	2683:56:77934:77968	21996	1	True				
ANR	22059	ParameterType	uint function_name_length		21996	0					
ANR	22060	Identifier	TSRMLS_DC		21996	1					
ANR	22061	CFGEntryNode	ENTRY		21996		True				
ANR	22062	CFGExitNode	EXIT		21996		True				
ANR	22063	Symbol	SUCCESS		21996						
ANR	22064	Symbol	NULL		21996						
ANR	22065	Symbol	CG		21996						
ANR	22066	Symbol	* func		21996						
ANR	22067	Symbol	display_disabled_function		21996						
ANR	22068	Symbol	TSRMLS_DC		21996						
ANR	22069	Symbol	FAILURE		21996						
ANR	22070	Symbol	func -> arg_info		21996						
ANR	22071	Symbol	zend_hash_find		21996						
ANR	22072	Symbol	func		21996						
ANR	22073	Symbol	& func		21996						
ANR	22074	Symbol	function_name_length		21996						
ANR	22075	Symbol	function_name		21996						
ANR	22076	Symbol	func -> handler		21996						
ANR	22077	Symbol	function_table		21996						
ANR	22078	Symbol	ZEND_FN		21996						
ANR	22079	DeclStmt									
ANR	22080	Decl							zend_object_value	zend_object_value	retval
ANR	22081	DeclStmt									
ANR	22082	Decl							zend_object	zend_object *	intern
ANR	22083	DeclStmt									
ANR	22084	Decl							const zend_function_entry	const zend_function_entry [ ]	disabled_class_new
ANR	22085	Function	zend_disable_class	2715:0:78753:79300							
ANR	22086	FunctionDef	"zend_disable_class (char * class_name , uint class_name_length TSRMLS_DC)"		22085	0					
ANR	22087	CompoundStatement		2716:0:78847:79300	22085	0					
ANR	22088	IdentifierDeclStatement	zend_class_entry * * disabled_class ;	2717:1:78850:78883	22085	0	True				
ANR	22089	IdentifierDecl	* * disabled_class		22085	0					
ANR	22090	IdentifierDeclType	zend_class_entry * *		22085	0					
ANR	22091	Identifier	disabled_class		22085	1					
ANR	22092	ExpressionStatement	"zend_str_tolower ( class_name , class_name_length )"	2719:1:78887:78934	22085	1	True				
ANR	22093	CallExpression	"zend_str_tolower ( class_name , class_name_length )"		22085	0					
ANR	22094	Callee	zend_str_tolower		22085	0					
ANR	22095	Identifier	zend_str_tolower		22085	0					
ANR	22096	ArgumentList	class_name		22085	1					
ANR	22097	Argument	class_name		22085	0					
ANR	22098	Identifier	class_name		22085	0					
ANR	22099	Argument	class_name_length		22085	1					
ANR	22100	Identifier	class_name_length		22085	0					
ANR	22101	IfStatement	"if ( zend_hash_find ( CG ( class_table ) , class_name , class_name_length + 1 , ( void * * ) & disabled_class ) == FAILURE )"		22085	2					
ANR	22102	Condition	"zend_hash_find ( CG ( class_table ) , class_name , class_name_length + 1 , ( void * * ) & disabled_class ) == FAILURE"	2720:5:78941:79039	22085	0	True				
ANR	22103	EqualityExpression	"zend_hash_find ( CG ( class_table ) , class_name , class_name_length + 1 , ( void * * ) & disabled_class ) == FAILURE"		22085	0		==			
ANR	22104	CallExpression	"zend_hash_find ( CG ( class_table ) , class_name , class_name_length + 1 , ( void * * ) & disabled_class )"		22085	0					
ANR	22105	Callee	zend_hash_find		22085	0					
ANR	22106	Identifier	zend_hash_find		22085	0					
ANR	22107	ArgumentList	CG ( class_table )		22085	1					
ANR	22108	Argument	CG ( class_table )		22085	0					
ANR	22109	CallExpression	CG ( class_table )		22085	0					
ANR	22110	Callee	CG		22085	0					
ANR	22111	Identifier	CG		22085	0					
ANR	22112	ArgumentList	class_table		22085	1					
ANR	22113	Argument	class_table		22085	0					
ANR	22114	Identifier	class_table		22085	0					
ANR	22115	Argument	class_name		22085	1					
ANR	22116	Identifier	class_name		22085	0					
ANR	22117	Argument	class_name_length + 1		22085	2					
ANR	22118	AdditiveExpression	class_name_length + 1		22085	0		+			
ANR	22119	Identifier	class_name_length		22085	0					
ANR	22120	PrimaryExpression	1		22085	1					
ANR	22121	Argument	( void * * ) & disabled_class		22085	3					
ANR	22122	CastExpression	( void * * ) & disabled_class		22085	0					
ANR	22123	CastTarget	void * *		22085	0					
ANR	22124	UnaryOperationExpression	& disabled_class		22085	1					
ANR	22125	UnaryOperator	&		22085	0					
ANR	22126	Identifier	disabled_class		22085	1					
ANR	22127	Identifier	FAILURE		22085	1					
ANR	22128	CompoundStatement		5:106:194:194	22085	1					
ANR	22129	ReturnStatement	return FAILURE ;	2721:2:79046:79060	22085	0	True				
ANR	22130	Identifier	FAILURE		22085	0					
ANR	22131	ExpressionStatement	"INIT_CLASS_ENTRY_INIT_METHODS ( ( * * disabled_class ) , disabled_class_new , NULL , NULL , NULL , NULL , NULL )"	2723:1:79066:79165	22085	3	True				
ANR	22132	CallExpression	"INIT_CLASS_ENTRY_INIT_METHODS ( ( * * disabled_class ) , disabled_class_new , NULL , NULL , NULL , NULL , NULL )"		22085	0					
ANR	22133	Callee	INIT_CLASS_ENTRY_INIT_METHODS		22085	0					
ANR	22134	Identifier	INIT_CLASS_ENTRY_INIT_METHODS		22085	0					
ANR	22135	ArgumentList	* * disabled_class		22085	1					
ANR	22136	Argument	* * disabled_class		22085	0					
ANR	22137	UnaryOperationExpression	* * disabled_class		22085	0					
ANR	22138	UnaryOperator	*		22085	0					
ANR	22139	UnaryOperationExpression	* disabled_class		22085	1					
ANR	22140	UnaryOperator	*		22085	0					
ANR	22141	Identifier	disabled_class		22085	1					
ANR	22142	Argument	disabled_class_new		22085	1					
ANR	22143	Identifier	disabled_class_new		22085	0					
ANR	22144	Argument	NULL		22085	2					
ANR	22145	Identifier	NULL		22085	0					
ANR	22146	Argument	NULL		22085	3					
ANR	22147	Identifier	NULL		22085	0					
ANR	22148	Argument	NULL		22085	4					
ANR	22149	Identifier	NULL		22085	0					
ANR	22150	Argument	NULL		22085	5					
ANR	22151	Identifier	NULL		22085	0					
ANR	22152	Argument	NULL		22085	6					
ANR	22153	Identifier	NULL		22085	0					
ANR	22154	ExpressionStatement	( * disabled_class ) -> create_object = display_disabled_class	2724:1:79168:79225	22085	4	True				
ANR	22155	AssignmentExpression	( * disabled_class ) -> create_object = display_disabled_class		22085	0		=			
ANR	22156	PtrMemberAccess	( * disabled_class ) -> create_object		22085	0					
ANR	22157	UnaryOperationExpression	* disabled_class		22085	0					
ANR	22158	UnaryOperator	*		22085	0					
ANR	22159	Identifier	disabled_class		22085	1					
ANR	22160	Identifier	create_object		22085	1					
ANR	22161	Identifier	display_disabled_class		22085	1					
ANR	22162	ExpressionStatement	zend_hash_clean ( & ( ( * disabled_class ) -> function_table ) )	2725:1:79228:79281	22085	5	True				
ANR	22163	CallExpression	zend_hash_clean ( & ( ( * disabled_class ) -> function_table ) )		22085	0					
ANR	22164	Callee	zend_hash_clean		22085	0					
ANR	22165	Identifier	zend_hash_clean		22085	0					
ANR	22166	ArgumentList	& ( ( * disabled_class ) -> function_table )		22085	1					
ANR	22167	Argument	& ( ( * disabled_class ) -> function_table )		22085	0					
ANR	22168	UnaryOperationExpression	& ( ( * disabled_class ) -> function_table )		22085	0					
ANR	22169	UnaryOperator	&		22085	0					
ANR	22170	PtrMemberAccess	( * disabled_class ) -> function_table		22085	1					
ANR	22171	UnaryOperationExpression	* disabled_class		22085	0					
ANR	22172	UnaryOperator	*		22085	0					
ANR	22173	Identifier	disabled_class		22085	1					
ANR	22174	Identifier	function_table		22085	1					
ANR	22175	ReturnStatement	return SUCCESS ;	2726:1:79284:79298	22085	6	True				
ANR	22176	Identifier	SUCCESS		22085	0					
ANR	22177	ReturnType	ZEND_API int		22085	1					
ANR	22178	Identifier	zend_disable_class		22085	2					
ANR	22179	ParameterList	"char * class_name , uint class_name_length TSRMLS_DC"		22085	3					
ANR	22180	Parameter	char * class_name	2715:32:78785:78800	22085	0	True				
ANR	22181	ParameterType	char *		22085	0					
ANR	22182	Identifier	class_name		22085	1					
ANR	22183	Parameter	uint class_name_length TSRMLS_DC	2715:50:78803:78834	22085	1	True				
ANR	22184	ParameterType	uint class_name_length		22085	0					
ANR	22185	Identifier	TSRMLS_DC		22085	1					
ANR	22186	CFGEntryNode	ENTRY		22085		True				
ANR	22187	CFGExitNode	EXIT		22085		True				
ANR	22188	Symbol	* * disabled_class		22085						
ANR	22189	Symbol	& disabled_class		22085						
ANR	22190	Symbol	NULL		22085						
ANR	22191	Symbol	SUCCESS		22085						
ANR	22192	Symbol	CG		22085						
ANR	22193	Symbol	display_disabled_class		22085						
ANR	22194	Symbol	disabled_class_new		22085						
ANR	22195	Symbol	class_name_length		22085						
ANR	22196	Symbol	disabled_class		22085						
ANR	22197	Symbol	TSRMLS_DC		22085						
ANR	22198	Symbol	FAILURE		22085						
ANR	22199	Symbol	( * disabled_class ) -> create_object		22085						
ANR	22200	Symbol	zend_hash_find		22085						
ANR	22201	Symbol	& ( * disabled_class ) -> function_table		22085						
ANR	22202	Symbol	class_table		22085						
ANR	22203	Symbol	class_name		22085						
ANR	22204	Symbol	* disabled_class		22085						
ANR	22205	DeclStmt									
ANR	22206	Decl							int	int	ret
ANR	22207	DeclStmt									
ANR	22208	Decl							zend_class_entry	zend_class_entry * *	pce
ANR	22209	DeclStmt									
ANR	22210	Decl							char	char *	lcname
ANR	22211	DeclStmt									
ANR	22212	Decl							zend_class_entry	zend_class_entry *	scope
ANR	22213	DeclStmt									
ANR	22214	Decl							zend_class_entry	zend_class_entry *	ce_org
ANR	22215	DeclStmt									
ANR	22216	Decl							int	int	retval
ANR	22217	DeclStmt									
ANR	22218	Decl							char	char *	mname
ANR	22219	Decl							char	char *	lmname
ANR	22220	DeclStmt									
ANR	22221	Decl							const char	const char *	colon
ANR	22222	DeclStmt									
ANR	22223	Decl							int	int	clen
ANR	22224	Decl							int	int	mlen
ANR	22225	DeclStmt									
ANR	22226	Decl							zend_class_entry	zend_class_entry *	last_scope
ANR	22227	DeclStmt									
ANR	22228	Decl							HashTable	HashTable *	ftable
ANR	22229	DeclStmt									
ANR	22230	Decl							int	int	call_via_handler
ANR	22231	DeclStmt									
ANR	22232	Decl							zend_function	zend_function *	priv_fbc
ANR	22233	DeclStmt									
ANR	22234	Decl							int	int	severity
ANR	22235	DeclStmt									
ANR	22236	Decl							char	char *	verb
ANR	22237	DeclStmt									
ANR	22238	Decl							zend_bool	zend_bool	ret
ANR	22239	DeclStmt									
ANR	22240	Decl							int	int	callable_name_len_local
ANR	22241	DeclStmt									
ANR	22242	Decl							zend_fcall_info_cache	zend_fcall_info_cache	fcc_local
ANR	22243	DeclStmt									
ANR	22244	Decl							char	char *	ptr
ANR	22245	DeclStmt									
ANR	22246	Decl							zval	zval * *	method
ANR	22247	DeclStmt									
ANR	22248	Decl							zval	zval * *	obj
ANR	22249	DeclStmt									
ANR	22250	Decl							int	int	strict_class
ANR	22251	DeclStmt									
ANR	22252	Decl							char	char *	ptr
ANR	22253	DeclStmt									
ANR	22254	Decl							char	char *	ptr
ANR	22255	DeclStmt									
ANR	22256	Decl							zend_class_entry	zend_class_entry *	ce
ANR	22257	DeclStmt									
ANR	22258	Decl							zval	zval	expr_copy
ANR	22259	DeclStmt									
ANR	22260	Decl							int	int	use_copy
ANR	22261	DeclStmt									
ANR	22262	Decl							zend_fcall_info_cache	zend_fcall_info_cache	fcc
ANR	22263	Function	zend_fcall_info_args_clear	3314:0:100590:100793							
ANR	22264	FunctionDef	"zend_fcall_info_args_clear (zend_fcall_info * fci , int free_mem)"		22263	0					
ANR	22265	CompoundStatement		3315:0:100677:100793	22263	0					
ANR	22266	IfStatement	if ( fci -> params )		22263	0					
ANR	22267	Condition	fci -> params	3316:5:100684:100694	22263	0	True				
ANR	22268	PtrMemberAccess	fci -> params		22263	0					
ANR	22269	Identifier	fci		22263	0					
ANR	22270	Identifier	params		22263	1					
ANR	22271	CompoundStatement		2:18:19:19	22263	1					
ANR	22272	IfStatement	if ( free_mem )		22263	0					
ANR	22273	Condition	free_mem	3317:6:100705:100712	22263	0	True				
ANR	22274	Identifier	free_mem		22263	0					
ANR	22275	CompoundStatement		3:16:37:37	22263	1					
ANR	22276	ExpressionStatement	efree ( fci -> params )	3318:3:100720:100738	22263	0	True				
ANR	22277	CallExpression	efree ( fci -> params )		22263	0					
ANR	22278	Callee	efree		22263	0					
ANR	22279	Identifier	efree		22263	0					
ANR	22280	ArgumentList	fci -> params		22263	1					
ANR	22281	Argument	fci -> params		22263	0					
ANR	22282	PtrMemberAccess	fci -> params		22263	0					
ANR	22283	Identifier	fci		22263	0					
ANR	22284	Identifier	params		22263	1					
ANR	22285	ExpressionStatement	fci -> params = NULL	3319:3:100743:100761	22263	1	True				
ANR	22286	AssignmentExpression	fci -> params = NULL		22263	0		=			
ANR	22287	PtrMemberAccess	fci -> params		22263	0					
ANR	22288	Identifier	fci		22263	0					
ANR	22289	Identifier	params		22263	1					
ANR	22290	Identifier	NULL		22263	1					
ANR	22291	ExpressionStatement	fci -> param_count = 0	3322:1:100771:100791	22263	1	True				
ANR	22292	AssignmentExpression	fci -> param_count = 0		22263	0		=			
ANR	22293	PtrMemberAccess	fci -> param_count		22263	0					
ANR	22294	Identifier	fci		22263	0					
ANR	22295	Identifier	param_count		22263	1					
ANR	22296	PrimaryExpression	0		22263	1					
ANR	22297	ReturnType	ZEND_API void		22263	1					
ANR	22298	Identifier	zend_fcall_info_args_clear		22263	2					
ANR	22299	ParameterList	"zend_fcall_info * fci , int free_mem"		22263	3					
ANR	22300	Parameter	zend_fcall_info * fci	3314:41:100631:100650	22263	0	True				
ANR	22301	ParameterType	zend_fcall_info *		22263	0					
ANR	22302	Identifier	fci		22263	1					
ANR	22303	Parameter	int free_mem	3314:63:100653:100664	22263	1	True				
ANR	22304	ParameterType	int		22263	0					
ANR	22305	Identifier	free_mem		22263	1					
ANR	22306	CFGEntryNode	ENTRY		22263		True				
ANR	22307	CFGExitNode	EXIT		22263		True				
ANR	22308	Symbol	free_mem		22263						
ANR	22309	Symbol	NULL		22263						
ANR	22310	Symbol	fci -> params		22263						
ANR	22311	Symbol	fci -> param_count		22263						
ANR	22312	Symbol	* fci		22263						
ANR	22313	Symbol	fci		22263						
ANR	22314	Function	zend_fcall_info_args_save	3326:0:100806:101017							
ANR	22315	FunctionDef	"zend_fcall_info_args_save (zend_fcall_info * fci , int * param_count , zval * * * * params)"		22314	0					
ANR	22316	CompoundStatement		3327:0:100913:101017	22314	0					
ANR	22317	ExpressionStatement	* param_count = fci -> param_count	3328:1:100916:100947	22314	0	True				
ANR	22318	AssignmentExpression	* param_count = fci -> param_count		22314	0		=			
ANR	22319	UnaryOperationExpression	* param_count		22314	0					
ANR	22320	UnaryOperator	*		22314	0					
ANR	22321	Identifier	param_count		22314	1					
ANR	22322	PtrMemberAccess	fci -> param_count		22314	1					
ANR	22323	Identifier	fci		22314	0					
ANR	22324	Identifier	param_count		22314	1					
ANR	22325	ExpressionStatement	* params = fci -> params	3329:1:100950:100971	22314	1	True				
ANR	22326	AssignmentExpression	* params = fci -> params		22314	0		=			
ANR	22327	UnaryOperationExpression	* params		22314	0					
ANR	22328	UnaryOperator	*		22314	0					
ANR	22329	Identifier	params		22314	1					
ANR	22330	PtrMemberAccess	fci -> params		22314	1					
ANR	22331	Identifier	fci		22314	0					
ANR	22332	Identifier	params		22314	1					
ANR	22333	ExpressionStatement	fci -> param_count = 0	3330:1:100974:100994	22314	2	True				
ANR	22334	AssignmentExpression	fci -> param_count = 0		22314	0		=			
ANR	22335	PtrMemberAccess	fci -> param_count		22314	0					
ANR	22336	Identifier	fci		22314	0					
ANR	22337	Identifier	param_count		22314	1					
ANR	22338	PrimaryExpression	0		22314	1					
ANR	22339	ExpressionStatement	fci -> params = NULL	3331:1:100997:101015	22314	3	True				
ANR	22340	AssignmentExpression	fci -> params = NULL		22314	0		=			
ANR	22341	PtrMemberAccess	fci -> params		22314	0					
ANR	22342	Identifier	fci		22314	0					
ANR	22343	Identifier	params		22314	1					
ANR	22344	Identifier	NULL		22314	1					
ANR	22345	ReturnType	ZEND_API void		22314	1					
ANR	22346	Identifier	zend_fcall_info_args_save		22314	2					
ANR	22347	ParameterList	"zend_fcall_info * fci , int * param_count , zval * * * * params"		22314	3					
ANR	22348	Parameter	zend_fcall_info * fci	3326:40:100846:100865	22314	0	True				
ANR	22349	ParameterType	zend_fcall_info *		22314	0					
ANR	22350	Identifier	fci		22314	1					
ANR	22351	Parameter	int * param_count	3326:62:100868:100883	22314	1	True				
ANR	22352	ParameterType	int *		22314	0					
ANR	22353	Identifier	param_count		22314	1					
ANR	22354	Parameter	zval * * * * params	3326:80:100886:100900	22314	2	True				
ANR	22355	ParameterType	zval * * * *		22314	0					
ANR	22356	Identifier	params		22314	1					
ANR	22357	CFGEntryNode	ENTRY		22314		True				
ANR	22358	CFGExitNode	EXIT		22314		True				
ANR	22359	Symbol	NULL		22314						
ANR	22360	Symbol	fci -> params		22314						
ANR	22361	Symbol	param_count		22314						
ANR	22362	Symbol	fci -> param_count		22314						
ANR	22363	Symbol	* fci		22314						
ANR	22364	Symbol	* param_count		22314						
ANR	22365	Symbol	params		22314						
ANR	22366	Symbol	fci		22314						
ANR	22367	Symbol	* params		22314						
ANR	22368	Function	zend_fcall_info_args_restore	3335:0:101030:101233							
ANR	22369	FunctionDef	"zend_fcall_info_args_restore (zend_fcall_info * fci , int param_count , zval * * * params)"		22368	0					
ANR	22370	CompoundStatement		3336:0:101138:101233	22368	0					
ANR	22371	ExpressionStatement	"zend_fcall_info_args_clear ( fci , 1 )"	3337:1:101141:101175	22368	0	True				
ANR	22372	CallExpression	"zend_fcall_info_args_clear ( fci , 1 )"		22368	0					
ANR	22373	Callee	zend_fcall_info_args_clear		22368	0					
ANR	22374	Identifier	zend_fcall_info_args_clear		22368	0					
ANR	22375	ArgumentList	fci		22368	1					
ANR	22376	Argument	fci		22368	0					
ANR	22377	Identifier	fci		22368	0					
ANR	22378	Argument	1		22368	1					
ANR	22379	PrimaryExpression	1		22368	0					
ANR	22380	ExpressionStatement	fci -> param_count = param_count	3338:1:101178:101208	22368	1	True				
ANR	22381	AssignmentExpression	fci -> param_count = param_count		22368	0		=			
ANR	22382	PtrMemberAccess	fci -> param_count		22368	0					
ANR	22383	Identifier	fci		22368	0					
ANR	22384	Identifier	param_count		22368	1					
ANR	22385	Identifier	param_count		22368	1					
ANR	22386	ExpressionStatement	fci -> params = params	3339:1:101211:101231	22368	2	True				
ANR	22387	AssignmentExpression	fci -> params = params		22368	0		=			
ANR	22388	PtrMemberAccess	fci -> params		22368	0					
ANR	22389	Identifier	fci		22368	0					
ANR	22390	Identifier	params		22368	1					
ANR	22391	Identifier	params		22368	1					
ANR	22392	ReturnType	ZEND_API void		22368	1					
ANR	22393	Identifier	zend_fcall_info_args_restore		22368	2					
ANR	22394	ParameterList	"zend_fcall_info * fci , int param_count , zval * * * params"		22368	3					
ANR	22395	Parameter	zend_fcall_info * fci	3335:43:101073:101092	22368	0	True				
ANR	22396	ParameterType	zend_fcall_info *		22368	0					
ANR	22397	Identifier	fci		22368	1					
ANR	22398	Parameter	int param_count	3335:65:101095:101109	22368	1	True				
ANR	22399	ParameterType	int		22368	0					
ANR	22400	Identifier	param_count		22368	1					
ANR	22401	Parameter	zval * * * params	3335:82:101112:101125	22368	2	True				
ANR	22402	ParameterType	zval * * *		22368	0					
ANR	22403	Identifier	params		22368	1					
ANR	22404	CFGEntryNode	ENTRY		22368		True				
ANR	22405	CFGExitNode	EXIT		22368		True				
ANR	22406	Symbol	fci -> params		22368						
ANR	22407	Symbol	param_count		22368						
ANR	22408	Symbol	fci -> param_count		22368						
ANR	22409	Symbol	* fci		22368						
ANR	22410	Symbol	params		22368						
ANR	22411	Symbol	fci		22368						
ANR	22412	DeclStmt									
ANR	22413	Decl							HashPosition	HashPosition	pos
ANR	22414	DeclStmt									
ANR	22415	Decl							zval	zval * *	arg
ANR	22416	Decl							zval	zval * * *	params
ANR	22417	DeclStmt									
ANR	22418	Decl							int	int	i
ANR	22419	DeclStmt									
ANR	22420	Decl							int	int	i
ANR	22421	DeclStmt									
ANR	22422	Decl							zval	zval * *	arg
ANR	22423	DeclStmt									
ANR	22424	Decl							int	int	ret
ANR	22425	DeclStmt									
ANR	22426	Decl							va_list	va_list	argv
ANR	22427	DeclStmt									
ANR	22428	Decl							zval	zval *	retval
ANR	22429	Decl							zval	zval * * *	org_params
ANR	22430	DeclStmt									
ANR	22431	Decl							int	int	result
ANR	22432	Decl							int	int	org_count
ANR	22433	Function	zend_get_module_version	3454:9:103670:104041							
ANR	22434	FunctionDef	zend_get_module_version (const char * module_name)		22433	0					
ANR	22435	CompoundStatement		3455:0:103741:104041	22433	0					
ANR	22436	IdentifierDeclStatement	char * lname ;	3456:1:103744:103755	22433	0	True				
ANR	22437	IdentifierDecl	* lname		22433	0					
ANR	22438	IdentifierDeclType	char *		22433	0					
ANR	22439	Identifier	lname		22433	1					
ANR	22440	IdentifierDeclStatement	int name_len = strlen ( module_name ) ;	3457:1:103758:103792	22433	1	True				
ANR	22441	IdentifierDecl	name_len = strlen ( module_name )		22433	0					
ANR	22442	IdentifierDeclType	int		22433	0					
ANR	22443	Identifier	name_len		22433	1					
ANR	22444	AssignmentExpression	name_len = strlen ( module_name )		22433	2		=			
ANR	22445	Identifier	name_len		22433	0					
ANR	22446	CallExpression	strlen ( module_name )		22433	1					
ANR	22447	Callee	strlen		22433	0					
ANR	22448	Identifier	strlen		22433	0					
ANR	22449	ArgumentList	module_name		22433	1					
ANR	22450	Argument	module_name		22433	0					
ANR	22451	Identifier	module_name		22433	0					
ANR	22452	IdentifierDeclStatement	zend_module_entry * module ;	3458:1:103795:103820	22433	2	True				
ANR	22453	IdentifierDecl	* module		22433	0					
ANR	22454	IdentifierDeclType	zend_module_entry *		22433	0					
ANR	22455	Identifier	module		22433	1					
ANR	22456	ExpressionStatement	"lname = zend_str_tolower_dup ( module_name , name_len )"	3460:1:103824:103875	22433	3	True				
ANR	22457	AssignmentExpression	"lname = zend_str_tolower_dup ( module_name , name_len )"		22433	0		=			
ANR	22458	Identifier	lname		22433	0					
ANR	22459	CallExpression	"zend_str_tolower_dup ( module_name , name_len )"		22433	1					
ANR	22460	Callee	zend_str_tolower_dup		22433	0					
ANR	22461	Identifier	zend_str_tolower_dup		22433	0					
ANR	22462	ArgumentList	module_name		22433	1					
ANR	22463	Argument	module_name		22433	0					
ANR	22464	Identifier	module_name		22433	0					
ANR	22465	Argument	name_len		22433	1					
ANR	22466	Identifier	name_len		22433	0					
ANR	22467	IfStatement	"if ( zend_hash_find ( & module_registry , lname , name_len + 1 , ( void * * ) & module ) == FAILURE )"		22433	4					
ANR	22468	Condition	"zend_hash_find ( & module_registry , lname , name_len + 1 , ( void * * ) & module ) == FAILURE"	3461:5:103882:103962	22433	0	True				
ANR	22469	EqualityExpression	"zend_hash_find ( & module_registry , lname , name_len + 1 , ( void * * ) & module ) == FAILURE"		22433	0		==			
ANR	22470	CallExpression	"zend_hash_find ( & module_registry , lname , name_len + 1 , ( void * * ) & module )"		22433	0					
ANR	22471	Callee	zend_hash_find		22433	0					
ANR	22472	Identifier	zend_hash_find		22433	0					
ANR	22473	ArgumentList	& module_registry		22433	1					
ANR	22474	Argument	& module_registry		22433	0					
ANR	22475	UnaryOperationExpression	& module_registry		22433	0					
ANR	22476	UnaryOperator	&		22433	0					
ANR	22477	Identifier	module_registry		22433	1					
ANR	22478	Argument	lname		22433	1					
ANR	22479	Identifier	lname		22433	0					
ANR	22480	Argument	name_len + 1		22433	2					
ANR	22481	AdditiveExpression	name_len + 1		22433	0		+			
ANR	22482	Identifier	name_len		22433	0					
ANR	22483	PrimaryExpression	1		22433	1					
ANR	22484	Argument	( void * * ) & module		22433	3					
ANR	22485	CastExpression	( void * * ) & module		22433	0					
ANR	22486	CastTarget	void * *		22433	0					
ANR	22487	UnaryOperationExpression	& module		22433	1					
ANR	22488	UnaryOperator	&		22433	0					
ANR	22489	Identifier	module		22433	1					
ANR	22490	Identifier	FAILURE		22433	1					
ANR	22491	CompoundStatement		7:88:223:223	22433	1					
ANR	22492	ExpressionStatement	efree ( lname )	3462:2:103969:103981	22433	0	True				
ANR	22493	CallExpression	efree ( lname )		22433	0					
ANR	22494	Callee	efree		22433	0					
ANR	22495	Identifier	efree		22433	0					
ANR	22496	ArgumentList	lname		22433	1					
ANR	22497	Argument	lname		22433	0					
ANR	22498	Identifier	lname		22433	0					
ANR	22499	ReturnStatement	return NULL ;	3463:2:103985:103996	22433	1	True				
ANR	22500	Identifier	NULL		22433	0					
ANR	22501	ExpressionStatement	efree ( lname )	3465:1:104002:104014	22433	5	True				
ANR	22502	CallExpression	efree ( lname )		22433	0					
ANR	22503	Callee	efree		22433	0					
ANR	22504	Identifier	efree		22433	0					
ANR	22505	ArgumentList	lname		22433	1					
ANR	22506	Argument	lname		22433	0					
ANR	22507	Identifier	lname		22433	0					
ANR	22508	ReturnStatement	return module -> version ;	3466:1:104017:104039	22433	6	True				
ANR	22509	PtrMemberAccess	module -> version		22433	0					
ANR	22510	Identifier	module		22433	0					
ANR	22511	Identifier	version		22433	1					
ANR	22512	ReturnType	const char *		22433	1					
ANR	22513	Identifier	zend_get_module_version		22433	2					
ANR	22514	ParameterList	const char * module_name		22433	3					
ANR	22515	Parameter	const char * module_name	3454:45:103706:103728	22433	0	True				
ANR	22516	ParameterType	const char *		22433	0					
ANR	22517	Identifier	module_name		22433	1					
ANR	22518	CFGEntryNode	ENTRY		22433		True				
ANR	22519	CFGExitNode	EXIT		22433		True				
ANR	22520	Symbol	NULL		22433						
ANR	22521	Symbol	* module		22433						
ANR	22522	Symbol	module		22433						
ANR	22523	Symbol	& module_registry		22433						
ANR	22524	Symbol	FAILURE		22433						
ANR	22525	Symbol	strlen		22433						
ANR	22526	Symbol	zend_hash_find		22433						
ANR	22527	Symbol	lname		22433						
ANR	22528	Symbol	module -> version		22433						
ANR	22529	Symbol	& module		22433						
ANR	22530	Symbol	module_name		22433						
ANR	22531	Symbol	name_len		22433						
ANR	22532	Symbol	zend_str_tolower_dup		22433						
ANR	22533	Function	zend_declare_property_ex	3470:0:104054:107913							
ANR	22534	FunctionDef	"zend_declare_property_ex (zend_class_entry * ce , const char * name , int name_length , zval * property , int access_type , const char * doc_comment , int doc_comment_len TSRMLS_DC)"		22533	0					
ANR	22535	CompoundStatement		3471:0:104248:107913	22533	0					
ANR	22536	IdentifierDeclStatement	"zend_property_info property_info , * property_info_ptr ;"	3472:1:104251:104303	22533	0	True				
ANR	22537	IdentifierDecl	property_info		22533	0					
ANR	22538	IdentifierDeclType	zend_property_info		22533	0					
ANR	22539	Identifier	property_info		22533	1					
ANR	22540	IdentifierDecl	* property_info_ptr		22533	1					
ANR	22541	IdentifierDeclType	zend_property_info *		22533	0					
ANR	22542	Identifier	property_info_ptr		22533	1					
ANR	22543	IdentifierDeclStatement	const char * interned_name ;	3473:1:104306:104331	22533	1	True				
ANR	22544	IdentifierDecl	* interned_name		22533	0					
ANR	22545	IdentifierDeclType	const char *		22533	0					
ANR	22546	Identifier	interned_name		22533	1					
ANR	22547	IdentifierDeclStatement	"ulong h = zend_get_hash_value ( name , name_length + 1 ) ;"	3474:1:104334:104384	22533	2	True				
ANR	22548	IdentifierDecl	"h = zend_get_hash_value ( name , name_length + 1 )"		22533	0					
ANR	22549	IdentifierDeclType	ulong		22533	0					
ANR	22550	Identifier	h		22533	1					
ANR	22551	AssignmentExpression	"h = zend_get_hash_value ( name , name_length + 1 )"		22533	2		=			
ANR	22552	Identifier	h		22533	0					
ANR	22553	CallExpression	"zend_get_hash_value ( name , name_length + 1 )"		22533	1					
ANR	22554	Callee	zend_get_hash_value		22533	0					
ANR	22555	Identifier	zend_get_hash_value		22533	0					
ANR	22556	ArgumentList	name		22533	1					
ANR	22557	Argument	name		22533	0					
ANR	22558	Identifier	name		22533	0					
ANR	22559	Argument	name_length + 1		22533	1					
ANR	22560	AdditiveExpression	name_length + 1		22533	0		+			
ANR	22561	Identifier	name_length		22533	0					
ANR	22562	PrimaryExpression	1		22533	1					
ANR	22563	IfStatement	if ( ! ( access_type & ZEND_ACC_PPP_MASK ) )		22533	3					
ANR	22564	Condition	! ( access_type & ZEND_ACC_PPP_MASK )	3476:5:104392:104425	22533	0	True				
ANR	22565	UnaryOperationExpression	! ( access_type & ZEND_ACC_PPP_MASK )		22533	0					
ANR	22566	UnaryOperator	!		22533	0					
ANR	22567	BitAndExpression	access_type & ZEND_ACC_PPP_MASK		22533	1		&			
ANR	22568	Identifier	access_type		22533	0					
ANR	22569	Identifier	ZEND_ACC_PPP_MASK		22533	1					
ANR	22570	CompoundStatement		6:41:179:179	22533	1					
ANR	22571	ExpressionStatement	access_type |= ZEND_ACC_PUBLIC	3477:2:104432:104462	22533	0	True				
ANR	22572	AssignmentExpression	access_type |= ZEND_ACC_PUBLIC		22533	0		|=			
ANR	22573	Identifier	access_type		22533	0					
ANR	22574	Identifier	ZEND_ACC_PUBLIC		22533	1					
ANR	22575	IfStatement	if ( access_type & ZEND_ACC_STATIC )		22533	4					
ANR	22576	Condition	access_type & ZEND_ACC_STATIC	3479:5:104472:104500	22533	0	True				
ANR	22577	BitAndExpression	access_type & ZEND_ACC_STATIC		22533	0		&			
ANR	22578	Identifier	access_type		22533	0					
ANR	22579	Identifier	ZEND_ACC_STATIC		22533	1					
ANR	22580	CompoundStatement		9:36:254:254	22533	1					
ANR	22581	IfStatement	"if ( zend_hash_quick_find ( & ce -> properties_info , name , name_length + 1 , h , ( void * * ) & property_info_ptr ) == SUCCESS && ( property_info_ptr -> flags & ZEND_ACC_STATIC ) != 0 )"		22533	0					
ANR	22582	Condition	"zend_hash_quick_find ( & ce -> properties_info , name , name_length + 1 , h , ( void * * ) & property_info_ptr ) == SUCCESS && ( property_info_ptr -> flags & ZEND_ACC_STATIC ) != 0"	3480:6:104511:104676	22533	0	True				
ANR	22583	AndExpression	"zend_hash_quick_find ( & ce -> properties_info , name , name_length + 1 , h , ( void * * ) & property_info_ptr ) == SUCCESS && ( property_info_ptr -> flags & ZEND_ACC_STATIC ) != 0"		22533	0		&&			
ANR	22584	EqualityExpression	"zend_hash_quick_find ( & ce -> properties_info , name , name_length + 1 , h , ( void * * ) & property_info_ptr ) == SUCCESS"		22533	0		==			
ANR	22585	CallExpression	"zend_hash_quick_find ( & ce -> properties_info , name , name_length + 1 , h , ( void * * ) & property_info_ptr )"		22533	0					
ANR	22586	Callee	zend_hash_quick_find		22533	0					
ANR	22587	Identifier	zend_hash_quick_find		22533	0					
ANR	22588	ArgumentList	& ce -> properties_info		22533	1					
ANR	22589	Argument	& ce -> properties_info		22533	0					
ANR	22590	UnaryOperationExpression	& ce -> properties_info		22533	0					
ANR	22591	UnaryOperator	&		22533	0					
ANR	22592	PtrMemberAccess	ce -> properties_info		22533	1					
ANR	22593	Identifier	ce		22533	0					
ANR	22594	Identifier	properties_info		22533	1					
ANR	22595	Argument	name		22533	1					
ANR	22596	Identifier	name		22533	0					
ANR	22597	Argument	name_length + 1		22533	2					
ANR	22598	AdditiveExpression	name_length + 1		22533	0		+			
ANR	22599	Identifier	name_length		22533	0					
ANR	22600	PrimaryExpression	1		22533	1					
ANR	22601	Argument	h		22533	3					
ANR	22602	Identifier	h		22533	0					
ANR	22603	Argument	( void * * ) & property_info_ptr		22533	4					
ANR	22604	CastExpression	( void * * ) & property_info_ptr		22533	0					
ANR	22605	CastTarget	void * *		22533	0					
ANR	22606	UnaryOperationExpression	& property_info_ptr		22533	1					
ANR	22607	UnaryOperator	&		22533	0					
ANR	22608	Identifier	property_info_ptr		22533	1					
ANR	22609	Identifier	SUCCESS		22533	1					
ANR	22610	EqualityExpression	( property_info_ptr -> flags & ZEND_ACC_STATIC ) != 0		22533	1		!=			
ANR	22611	BitAndExpression	property_info_ptr -> flags & ZEND_ACC_STATIC		22533	0		&			
ANR	22612	PtrMemberAccess	property_info_ptr -> flags		22533	0					
ANR	22613	Identifier	property_info_ptr		22533	0					
ANR	22614	Identifier	flags		22533	1					
ANR	22615	Identifier	ZEND_ACC_STATIC		22533	1					
ANR	22616	PrimaryExpression	0		22533	1					
ANR	22617	CompoundStatement		11:57:430:430	22533	1					
ANR	22618	ExpressionStatement	property_info . offset = property_info_ptr -> offset	3482:3:104684:104732	22533	0	True				
ANR	22619	AssignmentExpression	property_info . offset = property_info_ptr -> offset		22533	0		=			
ANR	22620	MemberAccess	property_info . offset		22533	0					
ANR	22621	Identifier	property_info		22533	0					
ANR	22622	Identifier	offset		22533	1					
ANR	22623	PtrMemberAccess	property_info_ptr -> offset		22533	1					
ANR	22624	Identifier	property_info_ptr		22533	0					
ANR	22625	Identifier	offset		22533	1					
ANR	22626	ExpressionStatement	zval_ptr_dtor ( & ce -> default_static_members_table [ property_info . offset ] )	3483:3:104737:104807	22533	1	True				
ANR	22627	CallExpression	zval_ptr_dtor ( & ce -> default_static_members_table [ property_info . offset ] )		22533	0					
ANR	22628	Callee	zval_ptr_dtor		22533	0					
ANR	22629	Identifier	zval_ptr_dtor		22533	0					
ANR	22630	ArgumentList	& ce -> default_static_members_table [ property_info . offset ]		22533	1					
ANR	22631	Argument	& ce -> default_static_members_table [ property_info . offset ]		22533	0					
ANR	22632	UnaryOperationExpression	& ce -> default_static_members_table [ property_info . offset ]		22533	0					
ANR	22633	UnaryOperator	&		22533	0					
ANR	22634	ArrayIndexing	ce -> default_static_members_table [ property_info . offset ]		22533	1					
ANR	22635	PtrMemberAccess	ce -> default_static_members_table		22533	0					
ANR	22636	Identifier	ce		22533	0					
ANR	22637	Identifier	default_static_members_table		22533	1					
ANR	22638	MemberAccess	property_info . offset		22533	1					
ANR	22639	Identifier	property_info		22533	0					
ANR	22640	Identifier	offset		22533	1					
ANR	22641	ExpressionStatement	"zend_hash_quick_del ( & ce -> properties_info , name , name_length + 1 , h )"	3484:3:104812:104879	22533	2	True				
ANR	22642	CallExpression	"zend_hash_quick_del ( & ce -> properties_info , name , name_length + 1 , h )"		22533	0					
ANR	22643	Callee	zend_hash_quick_del		22533	0					
ANR	22644	Identifier	zend_hash_quick_del		22533	0					
ANR	22645	ArgumentList	& ce -> properties_info		22533	1					
ANR	22646	Argument	& ce -> properties_info		22533	0					
ANR	22647	UnaryOperationExpression	& ce -> properties_info		22533	0					
ANR	22648	UnaryOperator	&		22533	0					
ANR	22649	PtrMemberAccess	ce -> properties_info		22533	1					
ANR	22650	Identifier	ce		22533	0					
ANR	22651	Identifier	properties_info		22533	1					
ANR	22652	Argument	name		22533	1					
ANR	22653	Identifier	name		22533	0					
ANR	22654	Argument	name_length + 1		22533	2					
ANR	22655	AdditiveExpression	name_length + 1		22533	0		+			
ANR	22656	Identifier	name_length		22533	0					
ANR	22657	PrimaryExpression	1		22533	1					
ANR	22658	Argument	h		22533	3					
ANR	22659	Identifier	h		22533	0					
ANR	22660	ElseStatement	else		22533	0					
ANR	22661	CompoundStatement		15:9:641:641	22533	0					
ANR	22662	ExpressionStatement	property_info . offset = ce -> default_static_members_count ++	3486:3:104895:104952	22533	0	True				
ANR	22663	AssignmentExpression	property_info . offset = ce -> default_static_members_count ++		22533	0		=			
ANR	22664	MemberAccess	property_info . offset		22533	0					
ANR	22665	Identifier	property_info		22533	0					
ANR	22666	Identifier	offset		22533	1					
ANR	22667	PostIncDecOperationExpression	ce -> default_static_members_count ++		22533	1					
ANR	22668	PtrMemberAccess	ce -> default_static_members_count		22533	0					
ANR	22669	Identifier	ce		22533	0					
ANR	22670	Identifier	default_static_members_count		22533	1					
ANR	22671	IncDec	++		22533	1					
ANR	22672	ExpressionStatement	"ce -> default_static_members_table = perealloc ( ce -> default_static_members_table , sizeof ( zval * ) * ce -> default_static_members_count , ce -> type == ZEND_INTERNAL_CLASS )"	3487:3:104957:105118	22533	1	True				
ANR	22673	AssignmentExpression	"ce -> default_static_members_table = perealloc ( ce -> default_static_members_table , sizeof ( zval * ) * ce -> default_static_members_count , ce -> type == ZEND_INTERNAL_CLASS )"		22533	0		=			
ANR	22674	PtrMemberAccess	ce -> default_static_members_table		22533	0					
ANR	22675	Identifier	ce		22533	0					
ANR	22676	Identifier	default_static_members_table		22533	1					
ANR	22677	CallExpression	"perealloc ( ce -> default_static_members_table , sizeof ( zval * ) * ce -> default_static_members_count , ce -> type == ZEND_INTERNAL_CLASS )"		22533	1					
ANR	22678	Callee	perealloc		22533	0					
ANR	22679	Identifier	perealloc		22533	0					
ANR	22680	ArgumentList	ce -> default_static_members_table		22533	1					
ANR	22681	Argument	ce -> default_static_members_table		22533	0					
ANR	22682	PtrMemberAccess	ce -> default_static_members_table		22533	0					
ANR	22683	Identifier	ce		22533	0					
ANR	22684	Identifier	default_static_members_table		22533	1					
ANR	22685	Argument	sizeof ( zval * ) * ce -> default_static_members_count		22533	1					
ANR	22686	MultiplicativeExpression	sizeof ( zval * ) * ce -> default_static_members_count		22533	0		*			
ANR	22687	SizeofExpression	sizeof ( zval * )		22533	0					
ANR	22688	Sizeof	sizeof		22533	0					
ANR	22689	SizeofOperand	zval *		22533	1					
ANR	22690	PtrMemberAccess	ce -> default_static_members_count		22533	1					
ANR	22691	Identifier	ce		22533	0					
ANR	22692	Identifier	default_static_members_count		22533	1					
ANR	22693	Argument	ce -> type == ZEND_INTERNAL_CLASS		22533	2					
ANR	22694	EqualityExpression	ce -> type == ZEND_INTERNAL_CLASS		22533	0		==			
ANR	22695	PtrMemberAccess	ce -> type		22533	0					
ANR	22696	Identifier	ce		22533	0					
ANR	22697	Identifier	type		22533	1					
ANR	22698	Identifier	ZEND_INTERNAL_CLASS		22533	1					
ANR	22699	ExpressionStatement	ce -> default_static_members_table [ property_info . offset ] = property	3489:2:105126:105191	22533	1	True				
ANR	22700	AssignmentExpression	ce -> default_static_members_table [ property_info . offset ] = property		22533	0		=			
ANR	22701	ArrayIndexing	ce -> default_static_members_table [ property_info . offset ]		22533	0					
ANR	22702	PtrMemberAccess	ce -> default_static_members_table		22533	0					
ANR	22703	Identifier	ce		22533	0					
ANR	22704	Identifier	default_static_members_table		22533	1					
ANR	22705	MemberAccess	property_info . offset		22533	1					
ANR	22706	Identifier	property_info		22533	0					
ANR	22707	Identifier	offset		22533	1					
ANR	22708	Identifier	property		22533	1					
ANR	22709	IfStatement	if ( ce -> type == ZEND_USER_CLASS )		22533	2					
ANR	22710	Condition	ce -> type == ZEND_USER_CLASS	3490:6:105199:105225	22533	0	True				
ANR	22711	EqualityExpression	ce -> type == ZEND_USER_CLASS		22533	0		==			
ANR	22712	PtrMemberAccess	ce -> type		22533	0					
ANR	22713	Identifier	ce		22533	0					
ANR	22714	Identifier	type		22533	1					
ANR	22715	Identifier	ZEND_USER_CLASS		22533	1					
ANR	22716	CompoundStatement		20:35:979:979	22533	1					
ANR	22717	ExpressionStatement	ce -> static_members_table = ce -> default_static_members_table	3491:3:105233:105292	22533	0	True				
ANR	22718	AssignmentExpression	ce -> static_members_table = ce -> default_static_members_table		22533	0		=			
ANR	22719	PtrMemberAccess	ce -> static_members_table		22533	0					
ANR	22720	Identifier	ce		22533	0					
ANR	22721	Identifier	static_members_table		22533	1					
ANR	22722	PtrMemberAccess	ce -> default_static_members_table		22533	1					
ANR	22723	Identifier	ce		22533	0					
ANR	22724	Identifier	default_static_members_table		22533	1					
ANR	22725	ElseStatement	else		22533	0					
ANR	22726	CompoundStatement		23:8:1057:1057	22533	0					
ANR	22727	IfStatement	"if ( zend_hash_quick_find ( & ce -> properties_info , name , name_length + 1 , h , ( void * * ) & property_info_ptr ) == SUCCESS && ( property_info_ptr -> flags & ZEND_ACC_STATIC ) == 0 )"		22533	0					
ANR	22728	Condition	"zend_hash_quick_find ( & ce -> properties_info , name , name_length + 1 , h , ( void * * ) & property_info_ptr ) == SUCCESS && ( property_info_ptr -> flags & ZEND_ACC_STATIC ) == 0"	3494:6:105314:105479	22533	0	True				
ANR	22729	AndExpression	"zend_hash_quick_find ( & ce -> properties_info , name , name_length + 1 , h , ( void * * ) & property_info_ptr ) == SUCCESS && ( property_info_ptr -> flags & ZEND_ACC_STATIC ) == 0"		22533	0		&&			
ANR	22730	EqualityExpression	"zend_hash_quick_find ( & ce -> properties_info , name , name_length + 1 , h , ( void * * ) & property_info_ptr ) == SUCCESS"		22533	0		==			
ANR	22731	CallExpression	"zend_hash_quick_find ( & ce -> properties_info , name , name_length + 1 , h , ( void * * ) & property_info_ptr )"		22533	0					
ANR	22732	Callee	zend_hash_quick_find		22533	0					
ANR	22733	Identifier	zend_hash_quick_find		22533	0					
ANR	22734	ArgumentList	& ce -> properties_info		22533	1					
ANR	22735	Argument	& ce -> properties_info		22533	0					
ANR	22736	UnaryOperationExpression	& ce -> properties_info		22533	0					
ANR	22737	UnaryOperator	&		22533	0					
ANR	22738	PtrMemberAccess	ce -> properties_info		22533	1					
ANR	22739	Identifier	ce		22533	0					
ANR	22740	Identifier	properties_info		22533	1					
ANR	22741	Argument	name		22533	1					
ANR	22742	Identifier	name		22533	0					
ANR	22743	Argument	name_length + 1		22533	2					
ANR	22744	AdditiveExpression	name_length + 1		22533	0		+			
ANR	22745	Identifier	name_length		22533	0					
ANR	22746	PrimaryExpression	1		22533	1					
ANR	22747	Argument	h		22533	3					
ANR	22748	Identifier	h		22533	0					
ANR	22749	Argument	( void * * ) & property_info_ptr		22533	4					
ANR	22750	CastExpression	( void * * ) & property_info_ptr		22533	0					
ANR	22751	CastTarget	void * *		22533	0					
ANR	22752	UnaryOperationExpression	& property_info_ptr		22533	1					
ANR	22753	UnaryOperator	&		22533	0					
ANR	22754	Identifier	property_info_ptr		22533	1					
ANR	22755	Identifier	SUCCESS		22533	1					
ANR	22756	EqualityExpression	( property_info_ptr -> flags & ZEND_ACC_STATIC ) == 0		22533	1		==			
ANR	22757	BitAndExpression	property_info_ptr -> flags & ZEND_ACC_STATIC		22533	0		&			
ANR	22758	PtrMemberAccess	property_info_ptr -> flags		22533	0					
ANR	22759	Identifier	property_info_ptr		22533	0					
ANR	22760	Identifier	flags		22533	1					
ANR	22761	Identifier	ZEND_ACC_STATIC		22533	1					
ANR	22762	PrimaryExpression	0		22533	1					
ANR	22763	CompoundStatement		25:57:1233:1233	22533	1					
ANR	22764	ExpressionStatement	property_info . offset = property_info_ptr -> offset	3496:3:105487:105535	22533	0	True				
ANR	22765	AssignmentExpression	property_info . offset = property_info_ptr -> offset		22533	0		=			
ANR	22766	MemberAccess	property_info . offset		22533	0					
ANR	22767	Identifier	property_info		22533	0					
ANR	22768	Identifier	offset		22533	1					
ANR	22769	PtrMemberAccess	property_info_ptr -> offset		22533	1					
ANR	22770	Identifier	property_info_ptr		22533	0					
ANR	22771	Identifier	offset		22533	1					
ANR	22772	ExpressionStatement	zval_ptr_dtor ( & ce -> default_properties_table [ property_info . offset ] )	3497:3:105540:105606	22533	1	True				
ANR	22773	CallExpression	zval_ptr_dtor ( & ce -> default_properties_table [ property_info . offset ] )		22533	0					
ANR	22774	Callee	zval_ptr_dtor		22533	0					
ANR	22775	Identifier	zval_ptr_dtor		22533	0					
ANR	22776	ArgumentList	& ce -> default_properties_table [ property_info . offset ]		22533	1					
ANR	22777	Argument	& ce -> default_properties_table [ property_info . offset ]		22533	0					
ANR	22778	UnaryOperationExpression	& ce -> default_properties_table [ property_info . offset ]		22533	0					
ANR	22779	UnaryOperator	&		22533	0					
ANR	22780	ArrayIndexing	ce -> default_properties_table [ property_info . offset ]		22533	1					
ANR	22781	PtrMemberAccess	ce -> default_properties_table		22533	0					
ANR	22782	Identifier	ce		22533	0					
ANR	22783	Identifier	default_properties_table		22533	1					
ANR	22784	MemberAccess	property_info . offset		22533	1					
ANR	22785	Identifier	property_info		22533	0					
ANR	22786	Identifier	offset		22533	1					
ANR	22787	ExpressionStatement	"zend_hash_quick_del ( & ce -> properties_info , name , name_length + 1 , h )"	3498:3:105611:105678	22533	2	True				
ANR	22788	CallExpression	"zend_hash_quick_del ( & ce -> properties_info , name , name_length + 1 , h )"		22533	0					
ANR	22789	Callee	zend_hash_quick_del		22533	0					
ANR	22790	Identifier	zend_hash_quick_del		22533	0					
ANR	22791	ArgumentList	& ce -> properties_info		22533	1					
ANR	22792	Argument	& ce -> properties_info		22533	0					
ANR	22793	UnaryOperationExpression	& ce -> properties_info		22533	0					
ANR	22794	UnaryOperator	&		22533	0					
ANR	22795	PtrMemberAccess	ce -> properties_info		22533	1					
ANR	22796	Identifier	ce		22533	0					
ANR	22797	Identifier	properties_info		22533	1					
ANR	22798	Argument	name		22533	1					
ANR	22799	Identifier	name		22533	0					
ANR	22800	Argument	name_length + 1		22533	2					
ANR	22801	AdditiveExpression	name_length + 1		22533	0		+			
ANR	22802	Identifier	name_length		22533	0					
ANR	22803	PrimaryExpression	1		22533	1					
ANR	22804	Argument	h		22533	3					
ANR	22805	Identifier	h		22533	0					
ANR	22806	ElseStatement	else		22533	0					
ANR	22807	CompoundStatement		29:9:1440:1440	22533	0					
ANR	22808	ExpressionStatement	property_info . offset = ce -> default_properties_count ++	3500:3:105694:105747	22533	0	True				
ANR	22809	AssignmentExpression	property_info . offset = ce -> default_properties_count ++		22533	0		=			
ANR	22810	MemberAccess	property_info . offset		22533	0					
ANR	22811	Identifier	property_info		22533	0					
ANR	22812	Identifier	offset		22533	1					
ANR	22813	PostIncDecOperationExpression	ce -> default_properties_count ++		22533	1					
ANR	22814	PtrMemberAccess	ce -> default_properties_count		22533	0					
ANR	22815	Identifier	ce		22533	0					
ANR	22816	Identifier	default_properties_count		22533	1					
ANR	22817	IncDec	++		22533	1					
ANR	22818	ExpressionStatement	"ce -> default_properties_table = perealloc ( ce -> default_properties_table , sizeof ( zval * ) * ce -> default_properties_count , ce -> type == ZEND_INTERNAL_CLASS )"	3501:3:105752:105901	22533	1	True				
ANR	22819	AssignmentExpression	"ce -> default_properties_table = perealloc ( ce -> default_properties_table , sizeof ( zval * ) * ce -> default_properties_count , ce -> type == ZEND_INTERNAL_CLASS )"		22533	0		=			
ANR	22820	PtrMemberAccess	ce -> default_properties_table		22533	0					
ANR	22821	Identifier	ce		22533	0					
ANR	22822	Identifier	default_properties_table		22533	1					
ANR	22823	CallExpression	"perealloc ( ce -> default_properties_table , sizeof ( zval * ) * ce -> default_properties_count , ce -> type == ZEND_INTERNAL_CLASS )"		22533	1					
ANR	22824	Callee	perealloc		22533	0					
ANR	22825	Identifier	perealloc		22533	0					
ANR	22826	ArgumentList	ce -> default_properties_table		22533	1					
ANR	22827	Argument	ce -> default_properties_table		22533	0					
ANR	22828	PtrMemberAccess	ce -> default_properties_table		22533	0					
ANR	22829	Identifier	ce		22533	0					
ANR	22830	Identifier	default_properties_table		22533	1					
ANR	22831	Argument	sizeof ( zval * ) * ce -> default_properties_count		22533	1					
ANR	22832	MultiplicativeExpression	sizeof ( zval * ) * ce -> default_properties_count		22533	0		*			
ANR	22833	SizeofExpression	sizeof ( zval * )		22533	0					
ANR	22834	Sizeof	sizeof		22533	0					
ANR	22835	SizeofOperand	zval *		22533	1					
ANR	22836	PtrMemberAccess	ce -> default_properties_count		22533	1					
ANR	22837	Identifier	ce		22533	0					
ANR	22838	Identifier	default_properties_count		22533	1					
ANR	22839	Argument	ce -> type == ZEND_INTERNAL_CLASS		22533	2					
ANR	22840	EqualityExpression	ce -> type == ZEND_INTERNAL_CLASS		22533	0		==			
ANR	22841	PtrMemberAccess	ce -> type		22533	0					
ANR	22842	Identifier	ce		22533	0					
ANR	22843	Identifier	type		22533	1					
ANR	22844	Identifier	ZEND_INTERNAL_CLASS		22533	1					
ANR	22845	ExpressionStatement	ce -> default_properties_table [ property_info . offset ] = property	3503:2:105909:105970	22533	1	True				
ANR	22846	AssignmentExpression	ce -> default_properties_table [ property_info . offset ] = property		22533	0		=			
ANR	22847	ArrayIndexing	ce -> default_properties_table [ property_info . offset ]		22533	0					
ANR	22848	PtrMemberAccess	ce -> default_properties_table		22533	0					
ANR	22849	Identifier	ce		22533	0					
ANR	22850	Identifier	default_properties_table		22533	1					
ANR	22851	MemberAccess	property_info . offset		22533	1					
ANR	22852	Identifier	property_info		22533	0					
ANR	22853	Identifier	offset		22533	1					
ANR	22854	Identifier	property		22533	1					
ANR	22855	IfStatement	if ( ce -> type & ZEND_INTERNAL_CLASS )		22533	5					
ANR	22856	Condition	ce -> type & ZEND_INTERNAL_CLASS	3505:5:105980:106009	22533	0	True				
ANR	22857	BitAndExpression	ce -> type & ZEND_INTERNAL_CLASS		22533	0		&			
ANR	22858	PtrMemberAccess	ce -> type		22533	0					
ANR	22859	Identifier	ce		22533	0					
ANR	22860	Identifier	type		22533	1					
ANR	22861	Identifier	ZEND_INTERNAL_CLASS		22533	1					
ANR	22862	CompoundStatement		35:37:1763:1763	22533	1					
ANR	22863	SwitchStatement	switch ( Z_TYPE_P ( property ) )		22533	0					
ANR	22864	Condition	Z_TYPE_P ( property )	3506:9:106023:106040	22533	0	True				
ANR	22865	CallExpression	Z_TYPE_P ( property )		22533	0					
ANR	22866	Callee	Z_TYPE_P		22533	0					
ANR	22867	Identifier	Z_TYPE_P		22533	0					
ANR	22868	ArgumentList	property		22533	1					
ANR	22869	Argument	property		22533	0					
ANR	22870	Identifier	property		22533	0					
ANR	22871	CompoundStatement		36:29:1794:1794	22533	1					
ANR	22872	Label	case IS_ARRAY :	3507:3:106048:106061	22533	0	True				
ANR	22873	Identifier	IS_ARRAY		22533	0					
ANR	22874	Label	case IS_OBJECT :	3508:3:106066:106080	22533	1	True				
ANR	22875	Identifier	IS_OBJECT		22533	0					
ANR	22876	Label	case IS_RESOURCE :	3509:3:106085:106101	22533	2	True				
ANR	22877	Identifier	IS_RESOURCE		22533	0					
ANR	22878	ExpressionStatement	"zend_error ( E_CORE_ERROR , ""Internal zval's can't be arrays, objects or resources"" )"	3510:4:106107:106188	22533	3	True				
ANR	22879	CallExpression	"zend_error ( E_CORE_ERROR , ""Internal zval's can't be arrays, objects or resources"" )"		22533	0					
ANR	22880	Callee	zend_error		22533	0					
ANR	22881	Identifier	zend_error		22533	0					
ANR	22882	ArgumentList	E_CORE_ERROR		22533	1					
ANR	22883	Argument	E_CORE_ERROR		22533	0					
ANR	22884	Identifier	E_CORE_ERROR		22533	0					
ANR	22885	Argument	"""Internal zval's can't be arrays, objects or resources"""		22533	1					
ANR	22886	PrimaryExpression	"""Internal zval's can't be arrays, objects or resources"""		22533	0					
ANR	22887	BreakStatement	break ;	3511:4:106194:106199	22533	4	True				
ANR	22888	Label	default :	3512:3:106204:106211	22533	5	True				
ANR	22889	Identifier	default		22533	0					
ANR	22890	BreakStatement	break ;	3513:4:106217:106222	22533	6	True				
ANR	22891	SwitchStatement	switch ( access_type & ZEND_ACC_PPP_MASK )		22533	6					
ANR	22892	Condition	access_type & ZEND_ACC_PPP_MASK	3516:9:106240:106270	22533	0	True				
ANR	22893	BitAndExpression	access_type & ZEND_ACC_PPP_MASK		22533	0		&			
ANR	22894	Identifier	access_type		22533	0					
ANR	22895	Identifier	ZEND_ACC_PPP_MASK		22533	1					
ANR	22896	CompoundStatement		46:42:2024:2024	22533	1					
ANR	22897	Label	case ZEND_ACC_PRIVATE :	3517:2:106277:106298	22533	0	True				
ANR	22898	Identifier	ZEND_ACC_PRIVATE		22533	0					
ANR	22899	CompoundStatement		49:4:2078:2098	22533	1					
ANR	22900	IdentifierDeclStatement	char * priv_name ;	3518:4:106306:106321	22533	0	True				
ANR	22901	IdentifierDecl	* priv_name		22533	0					
ANR	22902	IdentifierDeclType	char *		22533	0					
ANR	22903	Identifier	priv_name		22533	1					
ANR	22904	IdentifierDeclStatement	int priv_name_length ;	3519:4:106327:106347	22533	1	True				
ANR	22905	IdentifierDecl	priv_name_length		22533	0					
ANR	22906	IdentifierDeclType	int		22533	0					
ANR	22907	Identifier	priv_name_length		22533	1					
ANR	22908	ExpressionStatement	"zend_mangle_property_name ( & priv_name , & priv_name_length , ce -> name , ce -> name_length , name , name_length , ce -> type & ZEND_INTERNAL_CLASS )"	3521:4:106354:106488	22533	2	True				
ANR	22909	CallExpression	"zend_mangle_property_name ( & priv_name , & priv_name_length , ce -> name , ce -> name_length , name , name_length , ce -> type & ZEND_INTERNAL_CLASS )"		22533	0					
ANR	22910	Callee	zend_mangle_property_name		22533	0					
ANR	22911	Identifier	zend_mangle_property_name		22533	0					
ANR	22912	ArgumentList	& priv_name		22533	1					
ANR	22913	Argument	& priv_name		22533	0					
ANR	22914	UnaryOperationExpression	& priv_name		22533	0					
ANR	22915	UnaryOperator	&		22533	0					
ANR	22916	Identifier	priv_name		22533	1					
ANR	22917	Argument	& priv_name_length		22533	1					
ANR	22918	UnaryOperationExpression	& priv_name_length		22533	0					
ANR	22919	UnaryOperator	&		22533	0					
ANR	22920	Identifier	priv_name_length		22533	1					
ANR	22921	Argument	ce -> name		22533	2					
ANR	22922	PtrMemberAccess	ce -> name		22533	0					
ANR	22923	Identifier	ce		22533	0					
ANR	22924	Identifier	name		22533	1					
ANR	22925	Argument	ce -> name_length		22533	3					
ANR	22926	PtrMemberAccess	ce -> name_length		22533	0					
ANR	22927	Identifier	ce		22533	0					
ANR	22928	Identifier	name_length		22533	1					
ANR	22929	Argument	name		22533	4					
ANR	22930	Identifier	name		22533	0					
ANR	22931	Argument	name_length		22533	5					
ANR	22932	Identifier	name_length		22533	0					
ANR	22933	Argument	ce -> type & ZEND_INTERNAL_CLASS		22533	6					
ANR	22934	BitAndExpression	ce -> type & ZEND_INTERNAL_CLASS		22533	0		&			
ANR	22935	PtrMemberAccess	ce -> type		22533	0					
ANR	22936	Identifier	ce		22533	0					
ANR	22937	Identifier	type		22533	1					
ANR	22938	Identifier	ZEND_INTERNAL_CLASS		22533	1					
ANR	22939	ExpressionStatement	property_info . name = priv_name	3522:4:106494:106524	22533	3	True				
ANR	22940	AssignmentExpression	property_info . name = priv_name		22533	0		=			
ANR	22941	MemberAccess	property_info . name		22533	0					
ANR	22942	Identifier	property_info		22533	0					
ANR	22943	Identifier	name		22533	1					
ANR	22944	Identifier	priv_name		22533	1					
ANR	22945	ExpressionStatement	property_info . name_length = priv_name_length	3523:4:106530:106574	22533	4	True				
ANR	22946	AssignmentExpression	property_info . name_length = priv_name_length		22533	0		=			
ANR	22947	MemberAccess	property_info . name_length		22533	0					
ANR	22948	Identifier	property_info		22533	0					
ANR	22949	Identifier	name_length		22533	1					
ANR	22950	Identifier	priv_name_length		22533	1					
ANR	22951	BreakStatement	break ;	3525:3:106584:106589	22533	2	True				
ANR	22952	Label	case ZEND_ACC_PROTECTED :	3526:2:106593:106616	22533	3	True				
ANR	22953	Identifier	ZEND_ACC_PROTECTED		22533	0					
ANR	22954	CompoundStatement		58:4:2396:2416	22533	4					
ANR	22955	IdentifierDeclStatement	char * prot_name ;	3527:4:106624:106639	22533	0	True				
ANR	22956	IdentifierDecl	* prot_name		22533	0					
ANR	22957	IdentifierDeclType	char *		22533	0					
ANR	22958	Identifier	prot_name		22533	1					
ANR	22959	IdentifierDeclStatement	int prot_name_length ;	3528:4:106645:106665	22533	1	True				
ANR	22960	IdentifierDecl	prot_name_length		22533	0					
ANR	22961	IdentifierDeclType	int		22533	0					
ANR	22962	Identifier	prot_name_length		22533	1					
ANR	22963	ExpressionStatement	"zend_mangle_property_name ( & prot_name , & prot_name_length , ""*"" , 1 , name , name_length , ce -> type & ZEND_INTERNAL_CLASS )"	3530:4:106672:106787	22533	2	True				
ANR	22964	CallExpression	"zend_mangle_property_name ( & prot_name , & prot_name_length , ""*"" , 1 , name , name_length , ce -> type & ZEND_INTERNAL_CLASS )"		22533	0					
ANR	22965	Callee	zend_mangle_property_name		22533	0					
ANR	22966	Identifier	zend_mangle_property_name		22533	0					
ANR	22967	ArgumentList	& prot_name		22533	1					
ANR	22968	Argument	& prot_name		22533	0					
ANR	22969	UnaryOperationExpression	& prot_name		22533	0					
ANR	22970	UnaryOperator	&		22533	0					
ANR	22971	Identifier	prot_name		22533	1					
ANR	22972	Argument	& prot_name_length		22533	1					
ANR	22973	UnaryOperationExpression	& prot_name_length		22533	0					
ANR	22974	UnaryOperator	&		22533	0					
ANR	22975	Identifier	prot_name_length		22533	1					
ANR	22976	Argument	"""*"""		22533	2					
ANR	22977	PrimaryExpression	"""*"""		22533	0					
ANR	22978	Argument	1		22533	3					
ANR	22979	PrimaryExpression	1		22533	0					
ANR	22980	Argument	name		22533	4					
ANR	22981	Identifier	name		22533	0					
ANR	22982	Argument	name_length		22533	5					
ANR	22983	Identifier	name_length		22533	0					
ANR	22984	Argument	ce -> type & ZEND_INTERNAL_CLASS		22533	6					
ANR	22985	BitAndExpression	ce -> type & ZEND_INTERNAL_CLASS		22533	0		&			
ANR	22986	PtrMemberAccess	ce -> type		22533	0					
ANR	22987	Identifier	ce		22533	0					
ANR	22988	Identifier	type		22533	1					
ANR	22989	Identifier	ZEND_INTERNAL_CLASS		22533	1					
ANR	22990	ExpressionStatement	property_info . name = prot_name	3531:4:106793:106823	22533	3	True				
ANR	22991	AssignmentExpression	property_info . name = prot_name		22533	0		=			
ANR	22992	MemberAccess	property_info . name		22533	0					
ANR	22993	Identifier	property_info		22533	0					
ANR	22994	Identifier	name		22533	1					
ANR	22995	Identifier	prot_name		22533	1					
ANR	22996	ExpressionStatement	property_info . name_length = prot_name_length	3532:4:106829:106873	22533	4	True				
ANR	22997	AssignmentExpression	property_info . name_length = prot_name_length		22533	0		=			
ANR	22998	MemberAccess	property_info . name_length		22533	0					
ANR	22999	Identifier	property_info		22533	0					
ANR	23000	Identifier	name_length		22533	1					
ANR	23001	Identifier	prot_name_length		22533	1					
ANR	23002	BreakStatement	break ;	3534:3:106883:106888	22533	5	True				
ANR	23003	Label	case ZEND_ACC_PUBLIC :	3535:2:106892:106912	22533	6	True				
ANR	23004	Identifier	ZEND_ACC_PUBLIC		22533	0					
ANR	23005	IfStatement	if ( IS_INTERNED ( name ) )		22533	7					
ANR	23006	Condition	IS_INTERNED ( name )	3536:7:106921:106937	22533	0	True				
ANR	23007	CallExpression	IS_INTERNED ( name )		22533	0					
ANR	23008	Callee	IS_INTERNED		22533	0					
ANR	23009	Identifier	IS_INTERNED		22533	0					
ANR	23010	ArgumentList	name		22533	1					
ANR	23011	Argument	name		22533	0					
ANR	23012	Identifier	name		22533	0					
ANR	23013	CompoundStatement		66:26:2691:2691	22533	1					
ANR	23014	ExpressionStatement	property_info . name = ( char * ) name	3537:4:106946:106978	22533	0	True				
ANR	23015	AssignmentExpression	property_info . name = ( char * ) name		22533	0		=			
ANR	23016	MemberAccess	property_info . name		22533	0					
ANR	23017	Identifier	property_info		22533	0					
ANR	23018	Identifier	name		22533	1					
ANR	23019	CastExpression	( char * ) name		22533	1					
ANR	23020	CastTarget	char *		22533	0					
ANR	23021	Identifier	name		22533	1					
ANR	23022	ElseStatement	else		22533	0					
ANR	23023	CompoundStatement		68:10:2741:2741	22533	0					
ANR	23024	ExpressionStatement	"property_info . name = ce -> type & ZEND_INTERNAL_CLASS ? zend_strndup ( name , name_length ) : estrndup ( name , name_length )"	3539:4:106996:107111	22533	0	True				
ANR	23025	AssignmentExpression	"property_info . name = ce -> type & ZEND_INTERNAL_CLASS ? zend_strndup ( name , name_length ) : estrndup ( name , name_length )"		22533	0		=			
ANR	23026	MemberAccess	property_info . name		22533	0					
ANR	23027	Identifier	property_info		22533	0					
ANR	23028	Identifier	name		22533	1					
ANR	23029	ConditionalExpression	"ce -> type & ZEND_INTERNAL_CLASS ? zend_strndup ( name , name_length ) : estrndup ( name , name_length )"		22533	1					
ANR	23030	Condition	ce -> type & ZEND_INTERNAL_CLASS		22533	0					
ANR	23031	BitAndExpression	ce -> type & ZEND_INTERNAL_CLASS		22533	0		&			
ANR	23032	PtrMemberAccess	ce -> type		22533	0					
ANR	23033	Identifier	ce		22533	0					
ANR	23034	Identifier	type		22533	1					
ANR	23035	Identifier	ZEND_INTERNAL_CLASS		22533	1					
ANR	23036	CallExpression	"zend_strndup ( name , name_length )"		22533	1					
ANR	23037	Callee	zend_strndup		22533	0					
ANR	23038	Identifier	zend_strndup		22533	0					
ANR	23039	ArgumentList	name		22533	1					
ANR	23040	Argument	name		22533	0					
ANR	23041	Identifier	name		22533	0					
ANR	23042	Argument	name_length		22533	1					
ANR	23043	Identifier	name_length		22533	0					
ANR	23044	CallExpression	"estrndup ( name , name_length )"		22533	2					
ANR	23045	Callee	estrndup		22533	0					
ANR	23046	Identifier	estrndup		22533	0					
ANR	23047	ArgumentList	name		22533	1					
ANR	23048	Argument	name		22533	0					
ANR	23049	Identifier	name		22533	0					
ANR	23050	Argument	name_length		22533	1					
ANR	23051	Identifier	name_length		22533	0					
ANR	23052	ExpressionStatement	property_info . name_length = name_length	3541:3:107121:107160	22533	8	True				
ANR	23053	AssignmentExpression	property_info . name_length = name_length		22533	0		=			
ANR	23054	MemberAccess	property_info . name_length		22533	0					
ANR	23055	Identifier	property_info		22533	0					
ANR	23056	Identifier	name_length		22533	1					
ANR	23057	Identifier	name_length		22533	1					
ANR	23058	BreakStatement	break ;	3542:3:107165:107170	22533	9	True				
ANR	23059	Statement	interned_name	3545:1:107177:107189	22533	7	True				
ANR	23060	Statement	=	3545:15:107191:107191	22533	8	True				
ANR	23061	Statement	zend_new_interned_string	3545:17:107193:107216	22533	9	True				
ANR	23062	Statement	(	3545:41:107217:107217	22533	10	True				
ANR	23063	Statement	property_info	3545:42:107218:107230	22533	11	True				
ANR	23064	Statement	.	3545:55:107231:107231	22533	12	True				
ANR	23065	Statement	name	3545:56:107232:107235	22533	13	True				
ANR	23066	Statement	","	3545:60:107236:107236	22533	14	True				
ANR	23067	Statement	property_info	3545:62:107238:107250	22533	15	True				
ANR	23068	Statement	.	3545:75:107251:107251	22533	16	True				
ANR	23069	Statement	name_length	3545:76:107252:107262	22533	17	True				
ANR	23070	Statement	+	3545:87:107263:107263	22533	18	True				
ANR	23071	Statement	1	3545:88:107264:107264	22533	19	True				
ANR	23072	Statement	","	3545:89:107265:107265	22533	20	True				
ANR	23073	Statement	0	3545:91:107267:107267	22533	21	True				
ANR	23074	Statement	TSRMLS_CC	3545:93:107269:107277	22533	22	True				
ANR	23075	Statement	)	3545:102:107278:107278	22533	23	True				
ANR	23076	ExpressionStatement		3545:103:107279:107279	22533	24	True				
ANR	23077	IfStatement	if ( interned_name != property_info . name )		22533	25					
ANR	23078	Condition	interned_name != property_info . name	3546:5:107286:107320	22533	0	True				
ANR	23079	EqualityExpression	interned_name != property_info . name		22533	0		!=			
ANR	23080	Identifier	interned_name		22533	0					
ANR	23081	MemberAccess	property_info . name		22533	1					
ANR	23082	Identifier	property_info		22533	0					
ANR	23083	Identifier	name		22533	1					
ANR	23084	CompoundStatement		76:42:3074:3074	22533	1					
ANR	23085	IfStatement	if ( ce -> type == ZEND_USER_CLASS )		22533	0					
ANR	23086	Condition	ce -> type == ZEND_USER_CLASS	3547:6:107331:107357	22533	0	True				
ANR	23087	EqualityExpression	ce -> type == ZEND_USER_CLASS		22533	0		==			
ANR	23088	PtrMemberAccess	ce -> type		22533	0					
ANR	23089	Identifier	ce		22533	0					
ANR	23090	Identifier	type		22533	1					
ANR	23091	Identifier	ZEND_USER_CLASS		22533	1					
ANR	23092	CompoundStatement		77:35:3111:3111	22533	1					
ANR	23093	ExpressionStatement	efree ( ( char * ) property_info . name )	3548:3:107365:107397	22533	0	True				
ANR	23094	CallExpression	efree ( ( char * ) property_info . name )		22533	0					
ANR	23095	Callee	efree		22533	0					
ANR	23096	Identifier	efree		22533	0					
ANR	23097	ArgumentList	( char * ) property_info . name		22533	1					
ANR	23098	Argument	( char * ) property_info . name		22533	0					
ANR	23099	CastExpression	( char * ) property_info . name		22533	0					
ANR	23100	CastTarget	char *		22533	0					
ANR	23101	MemberAccess	property_info . name		22533	1					
ANR	23102	Identifier	property_info		22533	0					
ANR	23103	Identifier	name		22533	1					
ANR	23104	ElseStatement	else		22533	0					
ANR	23105	CompoundStatement		79:9:3159:3159	22533	0					
ANR	23106	ExpressionStatement	free ( ( char * ) property_info . name )	3550:3:107413:107444	22533	0	True				
ANR	23107	CallExpression	free ( ( char * ) property_info . name )		22533	0					
ANR	23108	Callee	free		22533	0					
ANR	23109	Identifier	free		22533	0					
ANR	23110	ArgumentList	( char * ) property_info . name		22533	1					
ANR	23111	Argument	( char * ) property_info . name		22533	0					
ANR	23112	CastExpression	( char * ) property_info . name		22533	0					
ANR	23113	CastTarget	char *		22533	0					
ANR	23114	MemberAccess	property_info . name		22533	1					
ANR	23115	Identifier	property_info		22533	0					
ANR	23116	Identifier	name		22533	1					
ANR	23117	ExpressionStatement	property_info . name = interned_name	3552:2:107452:107486	22533	1	True				
ANR	23118	AssignmentExpression	property_info . name = interned_name		22533	0		=			
ANR	23119	MemberAccess	property_info . name		22533	0					
ANR	23120	Identifier	property_info		22533	0					
ANR	23121	Identifier	name		22533	1					
ANR	23122	Identifier	interned_name		22533	1					
ANR	23123	ExpressionStatement	property_info . flags = access_type	3555:1:107493:107526	22533	26	True				
ANR	23124	AssignmentExpression	property_info . flags = access_type		22533	0		=			
ANR	23125	MemberAccess	property_info . flags		22533	0					
ANR	23126	Identifier	property_info		22533	0					
ANR	23127	Identifier	flags		22533	1					
ANR	23128	Identifier	access_type		22533	1					
ANR	23129	ExpressionStatement	"property_info . h = ( access_type & ZEND_ACC_PUBLIC ) ? h : zend_get_hash_value ( property_info . name , property_info . name_length + 1 )"	3556:1:107529:107653	22533	27	True				
ANR	23130	AssignmentExpression	"property_info . h = ( access_type & ZEND_ACC_PUBLIC ) ? h : zend_get_hash_value ( property_info . name , property_info . name_length + 1 )"		22533	0		=			
ANR	23131	MemberAccess	property_info . h		22533	0					
ANR	23132	Identifier	property_info		22533	0					
ANR	23133	Identifier	h		22533	1					
ANR	23134	ConditionalExpression	"( access_type & ZEND_ACC_PUBLIC ) ? h : zend_get_hash_value ( property_info . name , property_info . name_length + 1 )"		22533	1					
ANR	23135	Condition	access_type & ZEND_ACC_PUBLIC		22533	0					
ANR	23136	BitAndExpression	access_type & ZEND_ACC_PUBLIC		22533	0		&			
ANR	23137	Identifier	access_type		22533	0					
ANR	23138	Identifier	ZEND_ACC_PUBLIC		22533	1					
ANR	23139	Identifier	h		22533	1					
ANR	23140	CallExpression	"zend_get_hash_value ( property_info . name , property_info . name_length + 1 )"		22533	2					
ANR	23141	Callee	zend_get_hash_value		22533	0					
ANR	23142	Identifier	zend_get_hash_value		22533	0					
ANR	23143	ArgumentList	property_info . name		22533	1					
ANR	23144	Argument	property_info . name		22533	0					
ANR	23145	MemberAccess	property_info . name		22533	0					
ANR	23146	Identifier	property_info		22533	0					
ANR	23147	Identifier	name		22533	1					
ANR	23148	Argument	property_info . name_length + 1		22533	1					
ANR	23149	AdditiveExpression	property_info . name_length + 1		22533	0		+			
ANR	23150	MemberAccess	property_info . name_length		22533	0					
ANR	23151	Identifier	property_info		22533	0					
ANR	23152	Identifier	name_length		22533	1					
ANR	23153	PrimaryExpression	1		22533	1					
ANR	23154	ExpressionStatement	property_info . doc_comment = doc_comment	3558:1:107657:107696	22533	28	True				
ANR	23155	AssignmentExpression	property_info . doc_comment = doc_comment		22533	0		=			
ANR	23156	MemberAccess	property_info . doc_comment		22533	0					
ANR	23157	Identifier	property_info		22533	0					
ANR	23158	Identifier	doc_comment		22533	1					
ANR	23159	Identifier	doc_comment		22533	1					
ANR	23160	ExpressionStatement	property_info . doc_comment_len = doc_comment_len	3559:1:107699:107746	22533	29	True				
ANR	23161	AssignmentExpression	property_info . doc_comment_len = doc_comment_len		22533	0		=			
ANR	23162	MemberAccess	property_info . doc_comment_len		22533	0					
ANR	23163	Identifier	property_info		22533	0					
ANR	23164	Identifier	doc_comment_len		22533	1					
ANR	23165	Identifier	doc_comment_len		22533	1					
ANR	23166	ExpressionStatement	property_info . ce = ce	3561:1:107750:107771	22533	30	True				
ANR	23167	AssignmentExpression	property_info . ce = ce		22533	0		=			
ANR	23168	MemberAccess	property_info . ce		22533	0					
ANR	23169	Identifier	property_info		22533	0					
ANR	23170	Identifier	ce		22533	1					
ANR	23171	Identifier	ce		22533	1					
ANR	23172	ExpressionStatement	"zend_hash_quick_update ( & ce -> properties_info , name , name_length + 1 , h , & property_info , sizeof ( zend_property_info ) , NULL )"	3563:1:107775:107893	22533	31	True				
ANR	23173	CallExpression	"zend_hash_quick_update ( & ce -> properties_info , name , name_length + 1 , h , & property_info , sizeof ( zend_property_info ) , NULL )"		22533	0					
ANR	23174	Callee	zend_hash_quick_update		22533	0					
ANR	23175	Identifier	zend_hash_quick_update		22533	0					
ANR	23176	ArgumentList	& ce -> properties_info		22533	1					
ANR	23177	Argument	& ce -> properties_info		22533	0					
ANR	23178	UnaryOperationExpression	& ce -> properties_info		22533	0					
ANR	23179	UnaryOperator	&		22533	0					
ANR	23180	PtrMemberAccess	ce -> properties_info		22533	1					
ANR	23181	Identifier	ce		22533	0					
ANR	23182	Identifier	properties_info		22533	1					
ANR	23183	Argument	name		22533	1					
ANR	23184	Identifier	name		22533	0					
ANR	23185	Argument	name_length + 1		22533	2					
ANR	23186	AdditiveExpression	name_length + 1		22533	0		+			
ANR	23187	Identifier	name_length		22533	0					
ANR	23188	PrimaryExpression	1		22533	1					
ANR	23189	Argument	h		22533	3					
ANR	23190	Identifier	h		22533	0					
ANR	23191	Argument	& property_info		22533	4					
ANR	23192	UnaryOperationExpression	& property_info		22533	0					
ANR	23193	UnaryOperator	&		22533	0					
ANR	23194	Identifier	property_info		22533	1					
ANR	23195	Argument	sizeof ( zend_property_info )		22533	5					
ANR	23196	SizeofExpression	sizeof ( zend_property_info )		22533	0					
ANR	23197	Sizeof	sizeof		22533	0					
ANR	23198	SizeofOperand	zend_property_info		22533	1					
ANR	23199	Argument	NULL		22533	6					
ANR	23200	Identifier	NULL		22533	0					
ANR	23201	ReturnStatement	return SUCCESS ;	3565:1:107897:107911	22533	32	True				
ANR	23202	Identifier	SUCCESS		22533	0					
ANR	23203	ReturnType	ZEND_API int		22533	1					
ANR	23204	Identifier	zend_declare_property_ex		22533	2					
ANR	23205	ParameterList	"zend_class_entry * ce , const char * name , int name_length , zval * property , int access_type , const char * doc_comment , int doc_comment_len TSRMLS_DC"		22533	3					
ANR	23206	Parameter	zend_class_entry * ce	3470:38:104092:104111	22533	0	True				
ANR	23207	ParameterType	zend_class_entry *		22533	0					
ANR	23208	Identifier	ce		22533	1					
ANR	23209	Parameter	const char * name	3470:60:104114:104129	22533	1	True				
ANR	23210	ParameterType	const char *		22533	0					
ANR	23211	Identifier	name		22533	1					
ANR	23212	Parameter	int name_length	3470:78:104132:104146	22533	2	True				
ANR	23213	ParameterType	int		22533	0					
ANR	23214	Identifier	name_length		22533	1					
ANR	23215	Parameter	zval * property	3470:95:104149:104162	22533	3	True				
ANR	23216	ParameterType	zval *		22533	0					
ANR	23217	Identifier	property		22533	1					
ANR	23218	Parameter	int access_type	3470:111:104165:104179	22533	4	True				
ANR	23219	ParameterType	int		22533	0					
ANR	23220	Identifier	access_type		22533	1					
ANR	23221	Parameter	const char * doc_comment	3470:128:104182:104204	22533	5	True				
ANR	23222	ParameterType	const char *		22533	0					
ANR	23223	Identifier	doc_comment		22533	1					
ANR	23224	Parameter	int doc_comment_len TSRMLS_DC	3470:153:104207:104235	22533	6	True				
ANR	23225	ParameterType	int doc_comment_len		22533	0					
ANR	23226	Identifier	TSRMLS_DC		22533	1					
ANR	23227	CFGEntryNode	ENTRY		22533		True				
ANR	23228	CFGExitNode	EXIT		22533		True				
ANR	23229	Symbol	ce -> name_length		22533						
ANR	23230	Symbol	doc_comment		22533						
ANR	23231	Symbol	ce -> default_properties_count		22533						
ANR	23232	Symbol	& priv_name_length		22533						
ANR	23233	Symbol	interned_name		22533						
ANR	23234	Symbol	prot_name		22533						
ANR	23235	Symbol	name_length		22533						
ANR	23236	Symbol	* ce		22533						
ANR	23237	Symbol	ce -> static_members_table		22533						
ANR	23238	Symbol	& prot_name_length		22533						
ANR	23239	Symbol	TSRMLS_DC		22533						
ANR	23240	Symbol	* property_info		22533						
ANR	23241	Symbol	property_info_ptr -> flags		22533						
ANR	23242	Symbol	ZEND_USER_CLASS		22533						
ANR	23243	Symbol	property		22533						
ANR	23244	Symbol	ce -> name		22533						
ANR	23245	Symbol	property_info_ptr		22533						
ANR	23246	Symbol	property_info . doc_comment_len		22533						
ANR	23247	Symbol	ZEND_INTERNAL_CLASS		22533						
ANR	23248	Symbol	NULL		22533						
ANR	23249	Symbol	ce -> default_properties_table		22533						
ANR	23250	Symbol	ce -> default_static_members_table		22533						
ANR	23251	Symbol	& priv_name		22533						
ANR	23252	Symbol	& property_info_ptr		22533						
ANR	23253	Symbol	& ce -> properties_info		22533						
ANR	23254	Symbol	IS_INTERNED		22533						
ANR	23255	Symbol	name		22533						
ANR	23256	Symbol	property_info . offset		22533						
ANR	23257	Symbol	ce -> type		22533						
ANR	23258	Symbol	access_type		22533						
ANR	23259	Symbol	property_info . name_length		22533						
ANR	23260	Symbol	property_info_ptr -> offset		22533						
ANR	23261	Symbol	ce -> default_static_members_count		22533						
ANR	23262	Symbol	property_info . flags		22533						
ANR	23263	Symbol	ZEND_ACC_PPP_MASK		22533						
ANR	23264	Symbol	ZEND_ACC_PUBLIC		22533						
ANR	23265	Symbol	zend_get_hash_value		22533						
ANR	23266	Symbol	* * ce		22533						
ANR	23267	Symbol	prot_name_length		22533						
ANR	23268	Symbol	estrndup		22533						
ANR	23269	Symbol	zend_hash_quick_find		22533						
ANR	23270	Symbol	property_info . h		22533						
ANR	23271	Symbol	E_CORE_ERROR		22533						
ANR	23272	Symbol	ZEND_ACC_STATIC		22533						
ANR	23273	Symbol	* property_info_ptr		22533						
ANR	23274	Symbol	& property_info		22533						
ANR	23275	Symbol	* ce -> default_static_members_table		22533						
ANR	23276	Symbol	property_info . name		22533						
ANR	23277	Symbol	property_info		22533						
ANR	23278	Symbol	ce		22533						
ANR	23279	Symbol	& prot_name		22533						
ANR	23280	Symbol	SUCCESS		22533						
ANR	23281	Symbol	property_info . ce		22533						
ANR	23282	Symbol	* property_info . offset		22533						
ANR	23283	Symbol	h		22533						
ANR	23284	Symbol	priv_name_length		22533						
ANR	23285	Symbol	Z_TYPE_P		22533						
ANR	23286	Symbol	doc_comment_len		22533						
ANR	23287	Symbol	zend_strndup		22533						
ANR	23288	Symbol	property_info . doc_comment		22533						
ANR	23289	Symbol	priv_name		22533						
ANR	23290	Symbol	* ce -> default_properties_table		22533						
ANR	23291	Symbol	perealloc		22533						
ANR	23292	Function	zend_declare_property	3569:0:107926:108172							
ANR	23293	FunctionDef	"zend_declare_property (zend_class_entry * ce , const char * name , int name_length , zval * property , int access_type TSRMLS_DC)"		23292	0					
ANR	23294	CompoundStatement		3570:0:108071:108172	23292	0					
ANR	23295	Statement	return	3571:1:108074:108079	23292	0	True				
ANR	23296	Statement	zend_declare_property_ex	3571:8:108081:108104	23292	1	True				
ANR	23297	Statement	(	3571:32:108105:108105	23292	2	True				
ANR	23298	Statement	ce	3571:33:108106:108107	23292	3	True				
ANR	23299	Statement	","	3571:35:108108:108108	23292	4	True				
ANR	23300	Statement	name	3571:37:108110:108113	23292	5	True				
ANR	23301	Statement	","	3571:41:108114:108114	23292	6	True				
ANR	23302	Statement	name_length	3571:43:108116:108126	23292	7	True				
ANR	23303	Statement	","	3571:54:108127:108127	23292	8	True				
ANR	23304	Statement	property	3571:56:108129:108136	23292	9	True				
ANR	23305	Statement	","	3571:64:108137:108137	23292	10	True				
ANR	23306	Statement	access_type	3571:66:108139:108149	23292	11	True				
ANR	23307	Statement	","	3571:77:108150:108150	23292	12	True				
ANR	23308	Statement	NULL	3571:79:108152:108155	23292	13	True				
ANR	23309	Statement	","	3571:83:108156:108156	23292	14	True				
ANR	23310	Statement	0	3571:85:108158:108158	23292	15	True				
ANR	23311	Statement	TSRMLS_CC	3571:87:108160:108168	23292	16	True				
ANR	23312	Statement	)	3571:96:108169:108169	23292	17	True				
ANR	23313	ExpressionStatement		3571:97:108170:108170	23292	18	True				
ANR	23314	ReturnType	ZEND_API int		23292	1					
ANR	23315	Identifier	zend_declare_property		23292	2					
ANR	23316	ParameterList	"zend_class_entry * ce , const char * name , int name_length , zval * property , int access_type TSRMLS_DC"		23292	3					
ANR	23317	Parameter	zend_class_entry * ce	3569:35:107961:107980	23292	0	True				
ANR	23318	ParameterType	zend_class_entry *		23292	0					
ANR	23319	Identifier	ce		23292	1					
ANR	23320	Parameter	const char * name	3569:57:107983:107998	23292	1	True				
ANR	23321	ParameterType	const char *		23292	0					
ANR	23322	Identifier	name		23292	1					
ANR	23323	Parameter	int name_length	3569:75:108001:108015	23292	2	True				
ANR	23324	ParameterType	int		23292	0					
ANR	23325	Identifier	name_length		23292	1					
ANR	23326	Parameter	zval * property	3569:92:108018:108031	23292	3	True				
ANR	23327	ParameterType	zval *		23292	0					
ANR	23328	Identifier	property		23292	1					
ANR	23329	Parameter	int access_type TSRMLS_DC	3569:108:108034:108058	23292	4	True				
ANR	23330	ParameterType	int access_type		23292	0					
ANR	23331	Identifier	TSRMLS_DC		23292	1					
ANR	23332	CFGEntryNode	ENTRY		23292		True				
ANR	23333	CFGExitNode	EXIT		23292		True				
ANR	23334	Symbol	ce		23292						
ANR	23335	Symbol	name		23292						
ANR	23336	Symbol	property		23292						
ANR	23337	Symbol	name_length		23292						
ANR	23338	Symbol	TSRMLS_DC		23292						
ANR	23339	Function	zend_declare_property_null	3575:0:108185:108559							
ANR	23340	FunctionDef	"zend_declare_property_null (zend_class_entry * ce , const char * name , int name_length , int access_type TSRMLS_DC)"		23339	0					
ANR	23341	CompoundStatement		3576:0:108319:108559	23339	0					
ANR	23342	IdentifierDeclStatement	zval * property ;	3577:1:108322:108336	23339	0	True				
ANR	23343	IdentifierDecl	* property		23339	0					
ANR	23344	IdentifierDeclType	zval *		23339	0					
ANR	23345	Identifier	property		23339	1					
ANR	23346	IfStatement	if ( ce -> type & ZEND_INTERNAL_CLASS )		23339	1					
ANR	23347	Condition	ce -> type & ZEND_INTERNAL_CLASS	3579:5:108344:108373	23339	0	True				
ANR	23348	BitAndExpression	ce -> type & ZEND_INTERNAL_CLASS		23339	0		&			
ANR	23349	PtrMemberAccess	ce -> type		23339	0					
ANR	23350	Identifier	ce		23339	0					
ANR	23351	Identifier	type		23339	1					
ANR	23352	Identifier	ZEND_INTERNAL_CLASS		23339	1					
ANR	23353	CompoundStatement		4:37:56:56	23339	1					
ANR	23354	ExpressionStatement	ALLOC_PERMANENT_ZVAL ( property )	3580:2:108380:108410	23339	0	True				
ANR	23355	CallExpression	ALLOC_PERMANENT_ZVAL ( property )		23339	0					
ANR	23356	Callee	ALLOC_PERMANENT_ZVAL		23339	0					
ANR	23357	Identifier	ALLOC_PERMANENT_ZVAL		23339	0					
ANR	23358	ArgumentList	property		23339	1					
ANR	23359	Argument	property		23339	0					
ANR	23360	Identifier	property		23339	0					
ANR	23361	ElseStatement	else		23339	0					
ANR	23362	CompoundStatement		6:8:100:100	23339	0					
ANR	23363	ExpressionStatement	ALLOC_ZVAL ( property )	3582:2:108424:108444	23339	0	True				
ANR	23364	CallExpression	ALLOC_ZVAL ( property )		23339	0					
ANR	23365	Callee	ALLOC_ZVAL		23339	0					
ANR	23366	Identifier	ALLOC_ZVAL		23339	0					
ANR	23367	ArgumentList	property		23339	1					
ANR	23368	Argument	property		23339	0					
ANR	23369	Identifier	property		23339	0					
ANR	23370	ExpressionStatement	INIT_ZVAL ( * property )	3584:1:108450:108470	23339	2	True				
ANR	23371	CallExpression	INIT_ZVAL ( * property )		23339	0					
ANR	23372	Callee	INIT_ZVAL		23339	0					
ANR	23373	Identifier	INIT_ZVAL		23339	0					
ANR	23374	ArgumentList	* property		23339	1					
ANR	23375	Argument	* property		23339	0					
ANR	23376	UnaryOperationExpression	* property		23339	0					
ANR	23377	UnaryOperator	*		23339	0					
ANR	23378	Identifier	property		23339	1					
ANR	23379	Statement	return	3585:1:108473:108478	23339	3	True				
ANR	23380	Statement	zend_declare_property	3585:8:108480:108500	23339	4	True				
ANR	23381	Statement	(	3585:29:108501:108501	23339	5	True				
ANR	23382	Statement	ce	3585:30:108502:108503	23339	6	True				
ANR	23383	Statement	","	3585:32:108504:108504	23339	7	True				
ANR	23384	Statement	name	3585:34:108506:108509	23339	8	True				
ANR	23385	Statement	","	3585:38:108510:108510	23339	9	True				
ANR	23386	Statement	name_length	3585:40:108512:108522	23339	10	True				
ANR	23387	Statement	","	3585:51:108523:108523	23339	11	True				
ANR	23388	Statement	property	3585:53:108525:108532	23339	12	True				
ANR	23389	Statement	","	3585:61:108533:108533	23339	13	True				
ANR	23390	Statement	access_type	3585:63:108535:108545	23339	14	True				
ANR	23391	Statement	TSRMLS_CC	3585:75:108547:108555	23339	15	True				
ANR	23392	Statement	)	3585:84:108556:108556	23339	16	True				
ANR	23393	ExpressionStatement		3585:85:108557:108557	23339	17	True				
ANR	23394	ReturnType	ZEND_API int		23339	1					
ANR	23395	Identifier	zend_declare_property_null		23339	2					
ANR	23396	ParameterList	"zend_class_entry * ce , const char * name , int name_length , int access_type TSRMLS_DC"		23339	3					
ANR	23397	Parameter	zend_class_entry * ce	3575:40:108225:108244	23339	0	True				
ANR	23398	ParameterType	zend_class_entry *		23339	0					
ANR	23399	Identifier	ce		23339	1					
ANR	23400	Parameter	const char * name	3575:62:108247:108262	23339	1	True				
ANR	23401	ParameterType	const char *		23339	0					
ANR	23402	Identifier	name		23339	1					
ANR	23403	Parameter	int name_length	3575:80:108265:108279	23339	2	True				
ANR	23404	ParameterType	int		23339	0					
ANR	23405	Identifier	name_length		23339	1					
ANR	23406	Parameter	int access_type TSRMLS_DC	3575:97:108282:108306	23339	3	True				
ANR	23407	ParameterType	int access_type		23339	0					
ANR	23408	Identifier	TSRMLS_DC		23339	1					
ANR	23409	CFGEntryNode	ENTRY		23339		True				
ANR	23410	CFGExitNode	EXIT		23339		True				
ANR	23411	Symbol	ZEND_INTERNAL_CLASS		23339						
ANR	23412	Symbol	ce -> type		23339						
ANR	23413	Symbol	ce		23339						
ANR	23414	Symbol	* property		23339						
ANR	23415	Symbol	name		23339						
ANR	23416	Symbol	property		23339						
ANR	23417	Symbol	name_length		23339						
ANR	23418	Symbol	* ce		23339						
ANR	23419	Symbol	TSRMLS_DC		23339						
ANR	23420	Function	zend_declare_property_bool	3589:0:108572:108987							
ANR	23421	FunctionDef	"zend_declare_property_bool (zend_class_entry * ce , const char * name , int name_length , long value , int access_type TSRMLS_DC)"		23420	0					
ANR	23422	CompoundStatement		3590:0:108718:108987	23420	0					
ANR	23423	IdentifierDeclStatement	zval * property ;	3591:1:108721:108735	23420	0	True				
ANR	23424	IdentifierDecl	* property		23420	0					
ANR	23425	IdentifierDeclType	zval *		23420	0					
ANR	23426	Identifier	property		23420	1					
ANR	23427	IfStatement	if ( ce -> type & ZEND_INTERNAL_CLASS )		23420	1					
ANR	23428	Condition	ce -> type & ZEND_INTERNAL_CLASS	3593:5:108743:108772	23420	0	True				
ANR	23429	BitAndExpression	ce -> type & ZEND_INTERNAL_CLASS		23420	0		&			
ANR	23430	PtrMemberAccess	ce -> type		23420	0					
ANR	23431	Identifier	ce		23420	0					
ANR	23432	Identifier	type		23420	1					
ANR	23433	Identifier	ZEND_INTERNAL_CLASS		23420	1					
ANR	23434	CompoundStatement		4:37:56:56	23420	1					
ANR	23435	ExpressionStatement	ALLOC_PERMANENT_ZVAL ( property )	3594:2:108779:108809	23420	0	True				
ANR	23436	CallExpression	ALLOC_PERMANENT_ZVAL ( property )		23420	0					
ANR	23437	Callee	ALLOC_PERMANENT_ZVAL		23420	0					
ANR	23438	Identifier	ALLOC_PERMANENT_ZVAL		23420	0					
ANR	23439	ArgumentList	property		23420	1					
ANR	23440	Argument	property		23420	0					
ANR	23441	Identifier	property		23420	0					
ANR	23442	ElseStatement	else		23420	0					
ANR	23443	CompoundStatement		6:8:100:100	23420	0					
ANR	23444	ExpressionStatement	ALLOC_ZVAL ( property )	3596:2:108823:108843	23420	0	True				
ANR	23445	CallExpression	ALLOC_ZVAL ( property )		23420	0					
ANR	23446	Callee	ALLOC_ZVAL		23420	0					
ANR	23447	Identifier	ALLOC_ZVAL		23420	0					
ANR	23448	ArgumentList	property		23420	1					
ANR	23449	Argument	property		23420	0					
ANR	23450	Identifier	property		23420	0					
ANR	23451	ExpressionStatement	INIT_PZVAL ( property )	3598:1:108849:108869	23420	2	True				
ANR	23452	CallExpression	INIT_PZVAL ( property )		23420	0					
ANR	23453	Callee	INIT_PZVAL		23420	0					
ANR	23454	Identifier	INIT_PZVAL		23420	0					
ANR	23455	ArgumentList	property		23420	1					
ANR	23456	Argument	property		23420	0					
ANR	23457	Identifier	property		23420	0					
ANR	23458	ExpressionStatement	"ZVAL_BOOL ( property , value )"	3599:1:108872:108898	23420	3	True				
ANR	23459	CallExpression	"ZVAL_BOOL ( property , value )"		23420	0					
ANR	23460	Callee	ZVAL_BOOL		23420	0					
ANR	23461	Identifier	ZVAL_BOOL		23420	0					
ANR	23462	ArgumentList	property		23420	1					
ANR	23463	Argument	property		23420	0					
ANR	23464	Identifier	property		23420	0					
ANR	23465	Argument	value		23420	1					
ANR	23466	Identifier	value		23420	0					
ANR	23467	Statement	return	3600:1:108901:108906	23420	4	True				
ANR	23468	Statement	zend_declare_property	3600:8:108908:108928	23420	5	True				
ANR	23469	Statement	(	3600:29:108929:108929	23420	6	True				
ANR	23470	Statement	ce	3600:30:108930:108931	23420	7	True				
ANR	23471	Statement	","	3600:32:108932:108932	23420	8	True				
ANR	23472	Statement	name	3600:34:108934:108937	23420	9	True				
ANR	23473	Statement	","	3600:38:108938:108938	23420	10	True				
ANR	23474	Statement	name_length	3600:40:108940:108950	23420	11	True				
ANR	23475	Statement	","	3600:51:108951:108951	23420	12	True				
ANR	23476	Statement	property	3600:53:108953:108960	23420	13	True				
ANR	23477	Statement	","	3600:61:108961:108961	23420	14	True				
ANR	23478	Statement	access_type	3600:63:108963:108973	23420	15	True				
ANR	23479	Statement	TSRMLS_CC	3600:75:108975:108983	23420	16	True				
ANR	23480	Statement	)	3600:84:108984:108984	23420	17	True				
ANR	23481	ExpressionStatement		3600:85:108985:108985	23420	18	True				
ANR	23482	ReturnType	ZEND_API int		23420	1					
ANR	23483	Identifier	zend_declare_property_bool		23420	2					
ANR	23484	ParameterList	"zend_class_entry * ce , const char * name , int name_length , long value , int access_type TSRMLS_DC"		23420	3					
ANR	23485	Parameter	zend_class_entry * ce	3589:40:108612:108631	23420	0	True				
ANR	23486	ParameterType	zend_class_entry *		23420	0					
ANR	23487	Identifier	ce		23420	1					
ANR	23488	Parameter	const char * name	3589:62:108634:108649	23420	1	True				
ANR	23489	ParameterType	const char *		23420	0					
ANR	23490	Identifier	name		23420	1					
ANR	23491	Parameter	int name_length	3589:80:108652:108666	23420	2	True				
ANR	23492	ParameterType	int		23420	0					
ANR	23493	Identifier	name_length		23420	1					
ANR	23494	Parameter	long value	3589:97:108669:108678	23420	3	True				
ANR	23495	ParameterType	long		23420	0					
ANR	23496	Identifier	value		23420	1					
ANR	23497	Parameter	int access_type TSRMLS_DC	3589:109:108681:108705	23420	4	True				
ANR	23498	ParameterType	int access_type		23420	0					
ANR	23499	Identifier	TSRMLS_DC		23420	1					
ANR	23500	CFGEntryNode	ENTRY		23420		True				
ANR	23501	CFGExitNode	EXIT		23420		True				
ANR	23502	Symbol	ZEND_INTERNAL_CLASS		23420						
ANR	23503	Symbol	ce -> type		23420						
ANR	23504	Symbol	ce		23420						
ANR	23505	Symbol	name		23420						
ANR	23506	Symbol	property		23420						
ANR	23507	Symbol	name_length		23420						
ANR	23508	Symbol	* ce		23420						
ANR	23509	Symbol	value		23420						
ANR	23510	Symbol	TSRMLS_DC		23420						
ANR	23511	Function	zend_declare_property_long	3604:0:109000:109415							
ANR	23512	FunctionDef	"zend_declare_property_long (zend_class_entry * ce , const char * name , int name_length , long value , int access_type TSRMLS_DC)"		23511	0					
ANR	23513	CompoundStatement		3605:0:109146:109415	23511	0					
ANR	23514	IdentifierDeclStatement	zval * property ;	3606:1:109149:109163	23511	0	True				
ANR	23515	IdentifierDecl	* property		23511	0					
ANR	23516	IdentifierDeclType	zval *		23511	0					
ANR	23517	Identifier	property		23511	1					
ANR	23518	IfStatement	if ( ce -> type & ZEND_INTERNAL_CLASS )		23511	1					
ANR	23519	Condition	ce -> type & ZEND_INTERNAL_CLASS	3608:5:109171:109200	23511	0	True				
ANR	23520	BitAndExpression	ce -> type & ZEND_INTERNAL_CLASS		23511	0		&			
ANR	23521	PtrMemberAccess	ce -> type		23511	0					
ANR	23522	Identifier	ce		23511	0					
ANR	23523	Identifier	type		23511	1					
ANR	23524	Identifier	ZEND_INTERNAL_CLASS		23511	1					
ANR	23525	CompoundStatement		4:37:56:56	23511	1					
ANR	23526	ExpressionStatement	ALLOC_PERMANENT_ZVAL ( property )	3609:2:109207:109237	23511	0	True				
ANR	23527	CallExpression	ALLOC_PERMANENT_ZVAL ( property )		23511	0					
ANR	23528	Callee	ALLOC_PERMANENT_ZVAL		23511	0					
ANR	23529	Identifier	ALLOC_PERMANENT_ZVAL		23511	0					
ANR	23530	ArgumentList	property		23511	1					
ANR	23531	Argument	property		23511	0					
ANR	23532	Identifier	property		23511	0					
ANR	23533	ElseStatement	else		23511	0					
ANR	23534	CompoundStatement		6:8:100:100	23511	0					
ANR	23535	ExpressionStatement	ALLOC_ZVAL ( property )	3611:2:109251:109271	23511	0	True				
ANR	23536	CallExpression	ALLOC_ZVAL ( property )		23511	0					
ANR	23537	Callee	ALLOC_ZVAL		23511	0					
ANR	23538	Identifier	ALLOC_ZVAL		23511	0					
ANR	23539	ArgumentList	property		23511	1					
ANR	23540	Argument	property		23511	0					
ANR	23541	Identifier	property		23511	0					
ANR	23542	ExpressionStatement	INIT_PZVAL ( property )	3613:1:109277:109297	23511	2	True				
ANR	23543	CallExpression	INIT_PZVAL ( property )		23511	0					
ANR	23544	Callee	INIT_PZVAL		23511	0					
ANR	23545	Identifier	INIT_PZVAL		23511	0					
ANR	23546	ArgumentList	property		23511	1					
ANR	23547	Argument	property		23511	0					
ANR	23548	Identifier	property		23511	0					
ANR	23549	ExpressionStatement	"ZVAL_LONG ( property , value )"	3614:1:109300:109326	23511	3	True				
ANR	23550	CallExpression	"ZVAL_LONG ( property , value )"		23511	0					
ANR	23551	Callee	ZVAL_LONG		23511	0					
ANR	23552	Identifier	ZVAL_LONG		23511	0					
ANR	23553	ArgumentList	property		23511	1					
ANR	23554	Argument	property		23511	0					
ANR	23555	Identifier	property		23511	0					
ANR	23556	Argument	value		23511	1					
ANR	23557	Identifier	value		23511	0					
ANR	23558	Statement	return	3615:1:109329:109334	23511	4	True				
ANR	23559	Statement	zend_declare_property	3615:8:109336:109356	23511	5	True				
ANR	23560	Statement	(	3615:29:109357:109357	23511	6	True				
ANR	23561	Statement	ce	3615:30:109358:109359	23511	7	True				
ANR	23562	Statement	","	3615:32:109360:109360	23511	8	True				
ANR	23563	Statement	name	3615:34:109362:109365	23511	9	True				
ANR	23564	Statement	","	3615:38:109366:109366	23511	10	True				
ANR	23565	Statement	name_length	3615:40:109368:109378	23511	11	True				
ANR	23566	Statement	","	3615:51:109379:109379	23511	12	True				
ANR	23567	Statement	property	3615:53:109381:109388	23511	13	True				
ANR	23568	Statement	","	3615:61:109389:109389	23511	14	True				
ANR	23569	Statement	access_type	3615:63:109391:109401	23511	15	True				
ANR	23570	Statement	TSRMLS_CC	3615:75:109403:109411	23511	16	True				
ANR	23571	Statement	)	3615:84:109412:109412	23511	17	True				
ANR	23572	ExpressionStatement		3615:85:109413:109413	23511	18	True				
ANR	23573	ReturnType	ZEND_API int		23511	1					
ANR	23574	Identifier	zend_declare_property_long		23511	2					
ANR	23575	ParameterList	"zend_class_entry * ce , const char * name , int name_length , long value , int access_type TSRMLS_DC"		23511	3					
ANR	23576	Parameter	zend_class_entry * ce	3604:40:109040:109059	23511	0	True				
ANR	23577	ParameterType	zend_class_entry *		23511	0					
ANR	23578	Identifier	ce		23511	1					
ANR	23579	Parameter	const char * name	3604:62:109062:109077	23511	1	True				
ANR	23580	ParameterType	const char *		23511	0					
ANR	23581	Identifier	name		23511	1					
ANR	23582	Parameter	int name_length	3604:80:109080:109094	23511	2	True				
ANR	23583	ParameterType	int		23511	0					
ANR	23584	Identifier	name_length		23511	1					
ANR	23585	Parameter	long value	3604:97:109097:109106	23511	3	True				
ANR	23586	ParameterType	long		23511	0					
ANR	23587	Identifier	value		23511	1					
ANR	23588	Parameter	int access_type TSRMLS_DC	3604:109:109109:109133	23511	4	True				
ANR	23589	ParameterType	int access_type		23511	0					
ANR	23590	Identifier	TSRMLS_DC		23511	1					
ANR	23591	CFGEntryNode	ENTRY		23511		True				
ANR	23592	CFGExitNode	EXIT		23511		True				
ANR	23593	Symbol	ZEND_INTERNAL_CLASS		23511						
ANR	23594	Symbol	ce -> type		23511						
ANR	23595	Symbol	ce		23511						
ANR	23596	Symbol	name		23511						
ANR	23597	Symbol	property		23511						
ANR	23598	Symbol	name_length		23511						
ANR	23599	Symbol	* ce		23511						
ANR	23600	Symbol	value		23511						
ANR	23601	Symbol	TSRMLS_DC		23511						
ANR	23602	Function	zend_declare_property_double	3619:0:109428:109849							
ANR	23603	FunctionDef	"zend_declare_property_double (zend_class_entry * ce , const char * name , int name_length , double value , int access_type TSRMLS_DC)"		23602	0					
ANR	23604	CompoundStatement		3620:0:109578:109849	23602	0					
ANR	23605	IdentifierDeclStatement	zval * property ;	3621:1:109581:109595	23602	0	True				
ANR	23606	IdentifierDecl	* property		23602	0					
ANR	23607	IdentifierDeclType	zval *		23602	0					
ANR	23608	Identifier	property		23602	1					
ANR	23609	IfStatement	if ( ce -> type & ZEND_INTERNAL_CLASS )		23602	1					
ANR	23610	Condition	ce -> type & ZEND_INTERNAL_CLASS	3623:5:109603:109632	23602	0	True				
ANR	23611	BitAndExpression	ce -> type & ZEND_INTERNAL_CLASS		23602	0		&			
ANR	23612	PtrMemberAccess	ce -> type		23602	0					
ANR	23613	Identifier	ce		23602	0					
ANR	23614	Identifier	type		23602	1					
ANR	23615	Identifier	ZEND_INTERNAL_CLASS		23602	1					
ANR	23616	CompoundStatement		4:37:56:56	23602	1					
ANR	23617	ExpressionStatement	ALLOC_PERMANENT_ZVAL ( property )	3624:2:109639:109669	23602	0	True				
ANR	23618	CallExpression	ALLOC_PERMANENT_ZVAL ( property )		23602	0					
ANR	23619	Callee	ALLOC_PERMANENT_ZVAL		23602	0					
ANR	23620	Identifier	ALLOC_PERMANENT_ZVAL		23602	0					
ANR	23621	ArgumentList	property		23602	1					
ANR	23622	Argument	property		23602	0					
ANR	23623	Identifier	property		23602	0					
ANR	23624	ElseStatement	else		23602	0					
ANR	23625	CompoundStatement		6:8:100:100	23602	0					
ANR	23626	ExpressionStatement	ALLOC_ZVAL ( property )	3626:2:109683:109703	23602	0	True				
ANR	23627	CallExpression	ALLOC_ZVAL ( property )		23602	0					
ANR	23628	Callee	ALLOC_ZVAL		23602	0					
ANR	23629	Identifier	ALLOC_ZVAL		23602	0					
ANR	23630	ArgumentList	property		23602	1					
ANR	23631	Argument	property		23602	0					
ANR	23632	Identifier	property		23602	0					
ANR	23633	ExpressionStatement	INIT_PZVAL ( property )	3628:1:109709:109729	23602	2	True				
ANR	23634	CallExpression	INIT_PZVAL ( property )		23602	0					
ANR	23635	Callee	INIT_PZVAL		23602	0					
ANR	23636	Identifier	INIT_PZVAL		23602	0					
ANR	23637	ArgumentList	property		23602	1					
ANR	23638	Argument	property		23602	0					
ANR	23639	Identifier	property		23602	0					
ANR	23640	ExpressionStatement	"ZVAL_DOUBLE ( property , value )"	3629:1:109732:109760	23602	3	True				
ANR	23641	CallExpression	"ZVAL_DOUBLE ( property , value )"		23602	0					
ANR	23642	Callee	ZVAL_DOUBLE		23602	0					
ANR	23643	Identifier	ZVAL_DOUBLE		23602	0					
ANR	23644	ArgumentList	property		23602	1					
ANR	23645	Argument	property		23602	0					
ANR	23646	Identifier	property		23602	0					
ANR	23647	Argument	value		23602	1					
ANR	23648	Identifier	value		23602	0					
ANR	23649	Statement	return	3630:1:109763:109768	23602	4	True				
ANR	23650	Statement	zend_declare_property	3630:8:109770:109790	23602	5	True				
ANR	23651	Statement	(	3630:29:109791:109791	23602	6	True				
ANR	23652	Statement	ce	3630:30:109792:109793	23602	7	True				
ANR	23653	Statement	","	3630:32:109794:109794	23602	8	True				
ANR	23654	Statement	name	3630:34:109796:109799	23602	9	True				
ANR	23655	Statement	","	3630:38:109800:109800	23602	10	True				
ANR	23656	Statement	name_length	3630:40:109802:109812	23602	11	True				
ANR	23657	Statement	","	3630:51:109813:109813	23602	12	True				
ANR	23658	Statement	property	3630:53:109815:109822	23602	13	True				
ANR	23659	Statement	","	3630:61:109823:109823	23602	14	True				
ANR	23660	Statement	access_type	3630:63:109825:109835	23602	15	True				
ANR	23661	Statement	TSRMLS_CC	3630:75:109837:109845	23602	16	True				
ANR	23662	Statement	)	3630:84:109846:109846	23602	17	True				
ANR	23663	ExpressionStatement		3630:85:109847:109847	23602	18	True				
ANR	23664	ReturnType	ZEND_API int		23602	1					
ANR	23665	Identifier	zend_declare_property_double		23602	2					
ANR	23666	ParameterList	"zend_class_entry * ce , const char * name , int name_length , double value , int access_type TSRMLS_DC"		23602	3					
ANR	23667	Parameter	zend_class_entry * ce	3619:42:109470:109489	23602	0	True				
ANR	23668	ParameterType	zend_class_entry *		23602	0					
ANR	23669	Identifier	ce		23602	1					
ANR	23670	Parameter	const char * name	3619:64:109492:109507	23602	1	True				
ANR	23671	ParameterType	const char *		23602	0					
ANR	23672	Identifier	name		23602	1					
ANR	23673	Parameter	int name_length	3619:82:109510:109524	23602	2	True				
ANR	23674	ParameterType	int		23602	0					
ANR	23675	Identifier	name_length		23602	1					
ANR	23676	Parameter	double value	3619:99:109527:109538	23602	3	True				
ANR	23677	ParameterType	double		23602	0					
ANR	23678	Identifier	value		23602	1					
ANR	23679	Parameter	int access_type TSRMLS_DC	3619:113:109541:109565	23602	4	True				
ANR	23680	ParameterType	int access_type		23602	0					
ANR	23681	Identifier	TSRMLS_DC		23602	1					
ANR	23682	CFGEntryNode	ENTRY		23602		True				
ANR	23683	CFGExitNode	EXIT		23602		True				
ANR	23684	Symbol	ZEND_INTERNAL_CLASS		23602						
ANR	23685	Symbol	ce -> type		23602						
ANR	23686	Symbol	ce		23602						
ANR	23687	Symbol	name		23602						
ANR	23688	Symbol	property		23602						
ANR	23689	Symbol	name_length		23602						
ANR	23690	Symbol	* ce		23602						
ANR	23691	Symbol	value		23602						
ANR	23692	Symbol	TSRMLS_DC		23602						
ANR	23693	Function	zend_declare_property_string	3634:0:109862:110384							
ANR	23694	FunctionDef	"zend_declare_property_string (zend_class_entry * ce , const char * name , int name_length , const char * value , int access_type TSRMLS_DC)"		23693	0					
ANR	23695	CompoundStatement		3635:0:110017:110384	23693	0					
ANR	23696	IdentifierDeclStatement	zval * property ;	3636:1:110020:110034	23693	0	True				
ANR	23697	IdentifierDecl	* property		23693	0					
ANR	23698	IdentifierDeclType	zval *		23693	0					
ANR	23699	Identifier	property		23693	1					
ANR	23700	IdentifierDeclStatement	int len = strlen ( value ) ;	3637:1:110037:110060	23693	1	True				
ANR	23701	IdentifierDecl	len = strlen ( value )		23693	0					
ANR	23702	IdentifierDeclType	int		23693	0					
ANR	23703	Identifier	len		23693	1					
ANR	23704	AssignmentExpression	len = strlen ( value )		23693	2		=			
ANR	23705	Identifier	len		23693	0					
ANR	23706	CallExpression	strlen ( value )		23693	1					
ANR	23707	Callee	strlen		23693	0					
ANR	23708	Identifier	strlen		23693	0					
ANR	23709	ArgumentList	value		23693	1					
ANR	23710	Argument	value		23693	0					
ANR	23711	Identifier	value		23693	0					
ANR	23712	IfStatement	if ( ce -> type & ZEND_INTERNAL_CLASS )		23693	2					
ANR	23713	Condition	ce -> type & ZEND_INTERNAL_CLASS	3639:5:110068:110097	23693	0	True				
ANR	23714	BitAndExpression	ce -> type & ZEND_INTERNAL_CLASS		23693	0		&			
ANR	23715	PtrMemberAccess	ce -> type		23693	0					
ANR	23716	Identifier	ce		23693	0					
ANR	23717	Identifier	type		23693	1					
ANR	23718	Identifier	ZEND_INTERNAL_CLASS		23693	1					
ANR	23719	CompoundStatement		5:37:82:82	23693	1					
ANR	23720	ExpressionStatement	ALLOC_PERMANENT_ZVAL ( property )	3640:2:110104:110134	23693	0	True				
ANR	23721	CallExpression	ALLOC_PERMANENT_ZVAL ( property )		23693	0					
ANR	23722	Callee	ALLOC_PERMANENT_ZVAL		23693	0					
ANR	23723	Identifier	ALLOC_PERMANENT_ZVAL		23693	0					
ANR	23724	ArgumentList	property		23693	1					
ANR	23725	Argument	property		23693	0					
ANR	23726	Identifier	property		23693	0					
ANR	23727	ExpressionStatement	"ZVAL_STRINGL ( property , zend_strndup ( value , len ) , len , 0 )"	3641:2:110138:110194	23693	1	True				
ANR	23728	CallExpression	"ZVAL_STRINGL ( property , zend_strndup ( value , len ) , len , 0 )"		23693	0					
ANR	23729	Callee	ZVAL_STRINGL		23693	0					
ANR	23730	Identifier	ZVAL_STRINGL		23693	0					
ANR	23731	ArgumentList	property		23693	1					
ANR	23732	Argument	property		23693	0					
ANR	23733	Identifier	property		23693	0					
ANR	23734	Argument	"zend_strndup ( value , len )"		23693	1					
ANR	23735	CallExpression	"zend_strndup ( value , len )"		23693	0					
ANR	23736	Callee	zend_strndup		23693	0					
ANR	23737	Identifier	zend_strndup		23693	0					
ANR	23738	ArgumentList	value		23693	1					
ANR	23739	Argument	value		23693	0					
ANR	23740	Identifier	value		23693	0					
ANR	23741	Argument	len		23693	1					
ANR	23742	Identifier	len		23693	0					
ANR	23743	Argument	len		23693	2					
ANR	23744	Identifier	len		23693	0					
ANR	23745	Argument	0		23693	3					
ANR	23746	PrimaryExpression	0		23693	0					
ANR	23747	ElseStatement	else		23693	0					
ANR	23748	CompoundStatement		8:8:186:186	23693	0					
ANR	23749	ExpressionStatement	ALLOC_ZVAL ( property )	3643:2:110208:110228	23693	0	True				
ANR	23750	CallExpression	ALLOC_ZVAL ( property )		23693	0					
ANR	23751	Callee	ALLOC_ZVAL		23693	0					
ANR	23752	Identifier	ALLOC_ZVAL		23693	0					
ANR	23753	ArgumentList	property		23693	1					
ANR	23754	Argument	property		23693	0					
ANR	23755	Identifier	property		23693	0					
ANR	23756	ExpressionStatement	"ZVAL_STRINGL ( property , value , len , 1 )"	3644:2:110232:110269	23693	1	True				
ANR	23757	CallExpression	"ZVAL_STRINGL ( property , value , len , 1 )"		23693	0					
ANR	23758	Callee	ZVAL_STRINGL		23693	0					
ANR	23759	Identifier	ZVAL_STRINGL		23693	0					
ANR	23760	ArgumentList	property		23693	1					
ANR	23761	Argument	property		23693	0					
ANR	23762	Identifier	property		23693	0					
ANR	23763	Argument	value		23693	1					
ANR	23764	Identifier	value		23693	0					
ANR	23765	Argument	len		23693	2					
ANR	23766	Identifier	len		23693	0					
ANR	23767	Argument	1		23693	3					
ANR	23768	PrimaryExpression	1		23693	0					
ANR	23769	ExpressionStatement	INIT_PZVAL ( property )	3646:1:110275:110295	23693	3	True				
ANR	23770	CallExpression	INIT_PZVAL ( property )		23693	0					
ANR	23771	Callee	INIT_PZVAL		23693	0					
ANR	23772	Identifier	INIT_PZVAL		23693	0					
ANR	23773	ArgumentList	property		23693	1					
ANR	23774	Argument	property		23693	0					
ANR	23775	Identifier	property		23693	0					
ANR	23776	Statement	return	3647:1:110298:110303	23693	4	True				
ANR	23777	Statement	zend_declare_property	3647:8:110305:110325	23693	5	True				
ANR	23778	Statement	(	3647:29:110326:110326	23693	6	True				
ANR	23779	Statement	ce	3647:30:110327:110328	23693	7	True				
ANR	23780	Statement	","	3647:32:110329:110329	23693	8	True				
ANR	23781	Statement	name	3647:34:110331:110334	23693	9	True				
ANR	23782	Statement	","	3647:38:110335:110335	23693	10	True				
ANR	23783	Statement	name_length	3647:40:110337:110347	23693	11	True				
ANR	23784	Statement	","	3647:51:110348:110348	23693	12	True				
ANR	23785	Statement	property	3647:53:110350:110357	23693	13	True				
ANR	23786	Statement	","	3647:61:110358:110358	23693	14	True				
ANR	23787	Statement	access_type	3647:63:110360:110370	23693	15	True				
ANR	23788	Statement	TSRMLS_CC	3647:75:110372:110380	23693	16	True				
ANR	23789	Statement	)	3647:84:110381:110381	23693	17	True				
ANR	23790	ExpressionStatement		3647:85:110382:110382	23693	18	True				
ANR	23791	ReturnType	ZEND_API int		23693	1					
ANR	23792	Identifier	zend_declare_property_string		23693	2					
ANR	23793	ParameterList	"zend_class_entry * ce , const char * name , int name_length , const char * value , int access_type TSRMLS_DC"		23693	3					
ANR	23794	Parameter	zend_class_entry * ce	3634:42:109904:109923	23693	0	True				
ANR	23795	ParameterType	zend_class_entry *		23693	0					
ANR	23796	Identifier	ce		23693	1					
ANR	23797	Parameter	const char * name	3634:64:109926:109941	23693	1	True				
ANR	23798	ParameterType	const char *		23693	0					
ANR	23799	Identifier	name		23693	1					
ANR	23800	Parameter	int name_length	3634:82:109944:109958	23693	2	True				
ANR	23801	ParameterType	int		23693	0					
ANR	23802	Identifier	name_length		23693	1					
ANR	23803	Parameter	const char * value	3634:99:109961:109977	23693	3	True				
ANR	23804	ParameterType	const char *		23693	0					
ANR	23805	Identifier	value		23693	1					
ANR	23806	Parameter	int access_type TSRMLS_DC	3634:118:109980:110004	23693	4	True				
ANR	23807	ParameterType	int access_type		23693	0					
ANR	23808	Identifier	TSRMLS_DC		23693	1					
ANR	23809	CFGEntryNode	ENTRY		23693		True				
ANR	23810	CFGExitNode	EXIT		23693		True				
ANR	23811	Symbol	ZEND_INTERNAL_CLASS		23693						
ANR	23812	Symbol	strlen		23693						
ANR	23813	Symbol	ce -> type		23693						
ANR	23814	Symbol	zend_strndup		23693						
ANR	23815	Symbol	ce		23693						
ANR	23816	Symbol	len		23693						
ANR	23817	Symbol	name		23693						
ANR	23818	Symbol	property		23693						
ANR	23819	Symbol	name_length		23693						
ANR	23820	Symbol	* ce		23693						
ANR	23821	Symbol	value		23693						
ANR	23822	Symbol	TSRMLS_DC		23693						
ANR	23823	Function	zend_declare_property_stringl	3651:0:110397:110927							
ANR	23824	FunctionDef	"zend_declare_property_stringl (zend_class_entry * ce , const char * name , int name_length , const char * value , int value_len , int access_type TSRMLS_DC)"		23823	0					
ANR	23825	CompoundStatement		3652:0:110568:110927	23823	0					
ANR	23826	IdentifierDeclStatement	zval * property ;	3653:1:110571:110585	23823	0	True				
ANR	23827	IdentifierDecl	* property		23823	0					
ANR	23828	IdentifierDeclType	zval *		23823	0					
ANR	23829	Identifier	property		23823	1					
ANR	23830	IfStatement	if ( ce -> type & ZEND_INTERNAL_CLASS )		23823	1					
ANR	23831	Condition	ce -> type & ZEND_INTERNAL_CLASS	3655:5:110593:110622	23823	0	True				
ANR	23832	BitAndExpression	ce -> type & ZEND_INTERNAL_CLASS		23823	0		&			
ANR	23833	PtrMemberAccess	ce -> type		23823	0					
ANR	23834	Identifier	ce		23823	0					
ANR	23835	Identifier	type		23823	1					
ANR	23836	Identifier	ZEND_INTERNAL_CLASS		23823	1					
ANR	23837	CompoundStatement		4:37:56:56	23823	1					
ANR	23838	ExpressionStatement	ALLOC_PERMANENT_ZVAL ( property )	3656:2:110629:110659	23823	0	True				
ANR	23839	CallExpression	ALLOC_PERMANENT_ZVAL ( property )		23823	0					
ANR	23840	Callee	ALLOC_PERMANENT_ZVAL		23823	0					
ANR	23841	Identifier	ALLOC_PERMANENT_ZVAL		23823	0					
ANR	23842	ArgumentList	property		23823	1					
ANR	23843	Argument	property		23823	0					
ANR	23844	Identifier	property		23823	0					
ANR	23845	ExpressionStatement	"ZVAL_STRINGL ( property , zend_strndup ( value , value_len ) , value_len , 0 )"	3657:2:110663:110731	23823	1	True				
ANR	23846	CallExpression	"ZVAL_STRINGL ( property , zend_strndup ( value , value_len ) , value_len , 0 )"		23823	0					
ANR	23847	Callee	ZVAL_STRINGL		23823	0					
ANR	23848	Identifier	ZVAL_STRINGL		23823	0					
ANR	23849	ArgumentList	property		23823	1					
ANR	23850	Argument	property		23823	0					
ANR	23851	Identifier	property		23823	0					
ANR	23852	Argument	"zend_strndup ( value , value_len )"		23823	1					
ANR	23853	CallExpression	"zend_strndup ( value , value_len )"		23823	0					
ANR	23854	Callee	zend_strndup		23823	0					
ANR	23855	Identifier	zend_strndup		23823	0					
ANR	23856	ArgumentList	value		23823	1					
ANR	23857	Argument	value		23823	0					
ANR	23858	Identifier	value		23823	0					
ANR	23859	Argument	value_len		23823	1					
ANR	23860	Identifier	value_len		23823	0					
ANR	23861	Argument	value_len		23823	2					
ANR	23862	Identifier	value_len		23823	0					
ANR	23863	Argument	0		23823	3					
ANR	23864	PrimaryExpression	0		23823	0					
ANR	23865	ElseStatement	else		23823	0					
ANR	23866	CompoundStatement		7:8:172:172	23823	0					
ANR	23867	ExpressionStatement	ALLOC_ZVAL ( property )	3659:2:110745:110765	23823	0	True				
ANR	23868	CallExpression	ALLOC_ZVAL ( property )		23823	0					
ANR	23869	Callee	ALLOC_ZVAL		23823	0					
ANR	23870	Identifier	ALLOC_ZVAL		23823	0					
ANR	23871	ArgumentList	property		23823	1					
ANR	23872	Argument	property		23823	0					
ANR	23873	Identifier	property		23823	0					
ANR	23874	ExpressionStatement	"ZVAL_STRINGL ( property , value , value_len , 1 )"	3660:2:110769:110812	23823	1	True				
ANR	23875	CallExpression	"ZVAL_STRINGL ( property , value , value_len , 1 )"		23823	0					
ANR	23876	Callee	ZVAL_STRINGL		23823	0					
ANR	23877	Identifier	ZVAL_STRINGL		23823	0					
ANR	23878	ArgumentList	property		23823	1					
ANR	23879	Argument	property		23823	0					
ANR	23880	Identifier	property		23823	0					
ANR	23881	Argument	value		23823	1					
ANR	23882	Identifier	value		23823	0					
ANR	23883	Argument	value_len		23823	2					
ANR	23884	Identifier	value_len		23823	0					
ANR	23885	Argument	1		23823	3					
ANR	23886	PrimaryExpression	1		23823	0					
ANR	23887	ExpressionStatement	INIT_PZVAL ( property )	3662:1:110818:110838	23823	2	True				
ANR	23888	CallExpression	INIT_PZVAL ( property )		23823	0					
ANR	23889	Callee	INIT_PZVAL		23823	0					
ANR	23890	Identifier	INIT_PZVAL		23823	0					
ANR	23891	ArgumentList	property		23823	1					
ANR	23892	Argument	property		23823	0					
ANR	23893	Identifier	property		23823	0					
ANR	23894	Statement	return	3663:1:110841:110846	23823	3	True				
ANR	23895	Statement	zend_declare_property	3663:8:110848:110868	23823	4	True				
ANR	23896	Statement	(	3663:29:110869:110869	23823	5	True				
ANR	23897	Statement	ce	3663:30:110870:110871	23823	6	True				
ANR	23898	Statement	","	3663:32:110872:110872	23823	7	True				
ANR	23899	Statement	name	3663:34:110874:110877	23823	8	True				
ANR	23900	Statement	","	3663:38:110878:110878	23823	9	True				
ANR	23901	Statement	name_length	3663:40:110880:110890	23823	10	True				
ANR	23902	Statement	","	3663:51:110891:110891	23823	11	True				
ANR	23903	Statement	property	3663:53:110893:110900	23823	12	True				
ANR	23904	Statement	","	3663:61:110901:110901	23823	13	True				
ANR	23905	Statement	access_type	3663:63:110903:110913	23823	14	True				
ANR	23906	Statement	TSRMLS_CC	3663:75:110915:110923	23823	15	True				
ANR	23907	Statement	)	3663:84:110924:110924	23823	16	True				
ANR	23908	ExpressionStatement		3663:85:110925:110925	23823	17	True				
ANR	23909	ReturnType	ZEND_API int		23823	1					
ANR	23910	Identifier	zend_declare_property_stringl		23823	2					
ANR	23911	ParameterList	"zend_class_entry * ce , const char * name , int name_length , const char * value , int value_len , int access_type TSRMLS_DC"		23823	3					
ANR	23912	Parameter	zend_class_entry * ce	3651:43:110440:110459	23823	0	True				
ANR	23913	ParameterType	zend_class_entry *		23823	0					
ANR	23914	Identifier	ce		23823	1					
ANR	23915	Parameter	const char * name	3651:65:110462:110477	23823	1	True				
ANR	23916	ParameterType	const char *		23823	0					
ANR	23917	Identifier	name		23823	1					
ANR	23918	Parameter	int name_length	3651:83:110480:110494	23823	2	True				
ANR	23919	ParameterType	int		23823	0					
ANR	23920	Identifier	name_length		23823	1					
ANR	23921	Parameter	const char * value	3651:100:110497:110513	23823	3	True				
ANR	23922	ParameterType	const char *		23823	0					
ANR	23923	Identifier	value		23823	1					
ANR	23924	Parameter	int value_len	3651:119:110516:110528	23823	4	True				
ANR	23925	ParameterType	int		23823	0					
ANR	23926	Identifier	value_len		23823	1					
ANR	23927	Parameter	int access_type TSRMLS_DC	3651:134:110531:110555	23823	5	True				
ANR	23928	ParameterType	int access_type		23823	0					
ANR	23929	Identifier	TSRMLS_DC		23823	1					
ANR	23930	CFGEntryNode	ENTRY		23823		True				
ANR	23931	CFGExitNode	EXIT		23823		True				
ANR	23932	Symbol	ZEND_INTERNAL_CLASS		23823						
ANR	23933	Symbol	ce -> type		23823						
ANR	23934	Symbol	zend_strndup		23823						
ANR	23935	Symbol	ce		23823						
ANR	23936	Symbol	value_len		23823						
ANR	23937	Symbol	name		23823						
ANR	23938	Symbol	property		23823						
ANR	23939	Symbol	name_length		23823						
ANR	23940	Symbol	* ce		23823						
ANR	23941	Symbol	value		23823						
ANR	23942	Symbol	TSRMLS_DC		23823						
ANR	23943	Function	zend_declare_class_constant_null	3673:0:111188:111569							
ANR	23944	FunctionDef	"zend_declare_class_constant_null (zend_class_entry * ce , const char * name , size_t name_length TSRMLS_DC)"		23943	0					
ANR	23945	CompoundStatement		3674:0:111314:111569	23943	0					
ANR	23946	IdentifierDeclStatement	zval * constant ;	3675:1:111317:111331	23943	0	True				
ANR	23947	IdentifierDecl	* constant		23943	0					
ANR	23948	IdentifierDeclType	zval *		23943	0					
ANR	23949	Identifier	constant		23943	1					
ANR	23950	IfStatement	if ( ce -> type & ZEND_INTERNAL_CLASS )		23943	1					
ANR	23951	Condition	ce -> type & ZEND_INTERNAL_CLASS	3677:5:111339:111368	23943	0	True				
ANR	23952	BitAndExpression	ce -> type & ZEND_INTERNAL_CLASS		23943	0		&			
ANR	23953	PtrMemberAccess	ce -> type		23943	0					
ANR	23954	Identifier	ce		23943	0					
ANR	23955	Identifier	type		23943	1					
ANR	23956	Identifier	ZEND_INTERNAL_CLASS		23943	1					
ANR	23957	CompoundStatement		4:37:56:56	23943	1					
ANR	23958	ExpressionStatement	ALLOC_PERMANENT_ZVAL ( constant )	3678:2:111375:111405	23943	0	True				
ANR	23959	CallExpression	ALLOC_PERMANENT_ZVAL ( constant )		23943	0					
ANR	23960	Callee	ALLOC_PERMANENT_ZVAL		23943	0					
ANR	23961	Identifier	ALLOC_PERMANENT_ZVAL		23943	0					
ANR	23962	ArgumentList	constant		23943	1					
ANR	23963	Argument	constant		23943	0					
ANR	23964	Identifier	constant		23943	0					
ANR	23965	ElseStatement	else		23943	0					
ANR	23966	CompoundStatement		6:8:100:100	23943	0					
ANR	23967	ExpressionStatement	ALLOC_ZVAL ( constant )	3680:2:111419:111439	23943	0	True				
ANR	23968	CallExpression	ALLOC_ZVAL ( constant )		23943	0					
ANR	23969	Callee	ALLOC_ZVAL		23943	0					
ANR	23970	Identifier	ALLOC_ZVAL		23943	0					
ANR	23971	ArgumentList	constant		23943	1					
ANR	23972	Argument	constant		23943	0					
ANR	23973	Identifier	constant		23943	0					
ANR	23974	ExpressionStatement	ZVAL_NULL ( constant )	3682:1:111445:111464	23943	2	True				
ANR	23975	CallExpression	ZVAL_NULL ( constant )		23943	0					
ANR	23976	Callee	ZVAL_NULL		23943	0					
ANR	23977	Identifier	ZVAL_NULL		23943	0					
ANR	23978	ArgumentList	constant		23943	1					
ANR	23979	Argument	constant		23943	0					
ANR	23980	Identifier	constant		23943	0					
ANR	23981	ExpressionStatement	INIT_PZVAL ( constant )	3683:1:111467:111487	23943	3	True				
ANR	23982	CallExpression	INIT_PZVAL ( constant )		23943	0					
ANR	23983	Callee	INIT_PZVAL		23943	0					
ANR	23984	Identifier	INIT_PZVAL		23943	0					
ANR	23985	ArgumentList	constant		23943	1					
ANR	23986	Argument	constant		23943	0					
ANR	23987	Identifier	constant		23943	0					
ANR	23988	Statement	return	3684:1:111490:111495	23943	4	True				
ANR	23989	Statement	zend_declare_class_constant	3684:8:111497:111523	23943	5	True				
ANR	23990	Statement	(	3684:35:111524:111524	23943	6	True				
ANR	23991	Statement	ce	3684:36:111525:111526	23943	7	True				
ANR	23992	Statement	","	3684:38:111527:111527	23943	8	True				
ANR	23993	Statement	name	3684:40:111529:111532	23943	9	True				
ANR	23994	Statement	","	3684:44:111533:111533	23943	10	True				
ANR	23995	Statement	name_length	3684:46:111535:111545	23943	11	True				
ANR	23996	Statement	","	3684:57:111546:111546	23943	12	True				
ANR	23997	Statement	constant	3684:59:111548:111555	23943	13	True				
ANR	23998	Statement	TSRMLS_CC	3684:68:111557:111565	23943	14	True				
ANR	23999	Statement	)	3684:77:111566:111566	23943	15	True				
ANR	24000	ExpressionStatement		3684:78:111567:111567	23943	16	True				
ANR	24001	ReturnType	ZEND_API int		23943	1					
ANR	24002	Identifier	zend_declare_class_constant_null		23943	2					
ANR	24003	ParameterList	"zend_class_entry * ce , const char * name , size_t name_length TSRMLS_DC"		23943	3					
ANR	24004	Parameter	zend_class_entry * ce	3673:46:111234:111253	23943	0	True				
ANR	24005	ParameterType	zend_class_entry *		23943	0					
ANR	24006	Identifier	ce		23943	1					
ANR	24007	Parameter	const char * name	3673:68:111256:111271	23943	1	True				
ANR	24008	ParameterType	const char *		23943	0					
ANR	24009	Identifier	name		23943	1					
ANR	24010	Parameter	size_t name_length TSRMLS_DC	3673:86:111274:111301	23943	2	True				
ANR	24011	ParameterType	size_t name_length		23943	0					
ANR	24012	Identifier	TSRMLS_DC		23943	1					
ANR	24013	CFGEntryNode	ENTRY		23943		True				
ANR	24014	CFGExitNode	EXIT		23943		True				
ANR	24015	Symbol	ZEND_INTERNAL_CLASS		23943						
ANR	24016	Symbol	ce -> type		23943						
ANR	24017	Symbol	ce		23943						
ANR	24018	Symbol	constant		23943						
ANR	24019	Symbol	name		23943						
ANR	24020	Symbol	* ce		23943						
ANR	24021	Symbol	TSRMLS_DC		23943						
ANR	24022	Function	zend_declare_class_constant_long	3688:0:111582:111982							
ANR	24023	FunctionDef	"zend_declare_class_constant_long (zend_class_entry * ce , const char * name , size_t name_length , long value TSRMLS_DC)"		24022	0					
ANR	24024	CompoundStatement		3689:0:111720:111982	24022	0					
ANR	24025	IdentifierDeclStatement	zval * constant ;	3690:1:111723:111737	24022	0	True				
ANR	24026	IdentifierDecl	* constant		24022	0					
ANR	24027	IdentifierDeclType	zval *		24022	0					
ANR	24028	Identifier	constant		24022	1					
ANR	24029	IfStatement	if ( ce -> type & ZEND_INTERNAL_CLASS )		24022	1					
ANR	24030	Condition	ce -> type & ZEND_INTERNAL_CLASS	3692:5:111745:111774	24022	0	True				
ANR	24031	BitAndExpression	ce -> type & ZEND_INTERNAL_CLASS		24022	0		&			
ANR	24032	PtrMemberAccess	ce -> type		24022	0					
ANR	24033	Identifier	ce		24022	0					
ANR	24034	Identifier	type		24022	1					
ANR	24035	Identifier	ZEND_INTERNAL_CLASS		24022	1					
ANR	24036	CompoundStatement		4:37:56:56	24022	1					
ANR	24037	ExpressionStatement	ALLOC_PERMANENT_ZVAL ( constant )	3693:2:111781:111811	24022	0	True				
ANR	24038	CallExpression	ALLOC_PERMANENT_ZVAL ( constant )		24022	0					
ANR	24039	Callee	ALLOC_PERMANENT_ZVAL		24022	0					
ANR	24040	Identifier	ALLOC_PERMANENT_ZVAL		24022	0					
ANR	24041	ArgumentList	constant		24022	1					
ANR	24042	Argument	constant		24022	0					
ANR	24043	Identifier	constant		24022	0					
ANR	24044	ElseStatement	else		24022	0					
ANR	24045	CompoundStatement		6:8:100:100	24022	0					
ANR	24046	ExpressionStatement	ALLOC_ZVAL ( constant )	3695:2:111825:111845	24022	0	True				
ANR	24047	CallExpression	ALLOC_ZVAL ( constant )		24022	0					
ANR	24048	Callee	ALLOC_ZVAL		24022	0					
ANR	24049	Identifier	ALLOC_ZVAL		24022	0					
ANR	24050	ArgumentList	constant		24022	1					
ANR	24051	Argument	constant		24022	0					
ANR	24052	Identifier	constant		24022	0					
ANR	24053	ExpressionStatement	"ZVAL_LONG ( constant , value )"	3697:1:111851:111877	24022	2	True				
ANR	24054	CallExpression	"ZVAL_LONG ( constant , value )"		24022	0					
ANR	24055	Callee	ZVAL_LONG		24022	0					
ANR	24056	Identifier	ZVAL_LONG		24022	0					
ANR	24057	ArgumentList	constant		24022	1					
ANR	24058	Argument	constant		24022	0					
ANR	24059	Identifier	constant		24022	0					
ANR	24060	Argument	value		24022	1					
ANR	24061	Identifier	value		24022	0					
ANR	24062	ExpressionStatement	INIT_PZVAL ( constant )	3698:1:111880:111900	24022	3	True				
ANR	24063	CallExpression	INIT_PZVAL ( constant )		24022	0					
ANR	24064	Callee	INIT_PZVAL		24022	0					
ANR	24065	Identifier	INIT_PZVAL		24022	0					
ANR	24066	ArgumentList	constant		24022	1					
ANR	24067	Argument	constant		24022	0					
ANR	24068	Identifier	constant		24022	0					
ANR	24069	Statement	return	3699:1:111903:111908	24022	4	True				
ANR	24070	Statement	zend_declare_class_constant	3699:8:111910:111936	24022	5	True				
ANR	24071	Statement	(	3699:35:111937:111937	24022	6	True				
ANR	24072	Statement	ce	3699:36:111938:111939	24022	7	True				
ANR	24073	Statement	","	3699:38:111940:111940	24022	8	True				
ANR	24074	Statement	name	3699:40:111942:111945	24022	9	True				
ANR	24075	Statement	","	3699:44:111946:111946	24022	10	True				
ANR	24076	Statement	name_length	3699:46:111948:111958	24022	11	True				
ANR	24077	Statement	","	3699:57:111959:111959	24022	12	True				
ANR	24078	Statement	constant	3699:59:111961:111968	24022	13	True				
ANR	24079	Statement	TSRMLS_CC	3699:68:111970:111978	24022	14	True				
ANR	24080	Statement	)	3699:77:111979:111979	24022	15	True				
ANR	24081	ExpressionStatement		3699:78:111980:111980	24022	16	True				
ANR	24082	ReturnType	ZEND_API int		24022	1					
ANR	24083	Identifier	zend_declare_class_constant_long		24022	2					
ANR	24084	ParameterList	"zend_class_entry * ce , const char * name , size_t name_length , long value TSRMLS_DC"		24022	3					
ANR	24085	Parameter	zend_class_entry * ce	3688:46:111628:111647	24022	0	True				
ANR	24086	ParameterType	zend_class_entry *		24022	0					
ANR	24087	Identifier	ce		24022	1					
ANR	24088	Parameter	const char * name	3688:68:111650:111665	24022	1	True				
ANR	24089	ParameterType	const char *		24022	0					
ANR	24090	Identifier	name		24022	1					
ANR	24091	Parameter	size_t name_length	3688:86:111668:111685	24022	2	True				
ANR	24092	ParameterType	size_t		24022	0					
ANR	24093	Identifier	name_length		24022	1					
ANR	24094	Parameter	long value TSRMLS_DC	3688:106:111688:111707	24022	3	True				
ANR	24095	ParameterType	long value		24022	0					
ANR	24096	Identifier	TSRMLS_DC		24022	1					
ANR	24097	CFGEntryNode	ENTRY		24022		True				
ANR	24098	CFGExitNode	EXIT		24022		True				
ANR	24099	Symbol	ZEND_INTERNAL_CLASS		24022						
ANR	24100	Symbol	ce -> type		24022						
ANR	24101	Symbol	ce		24022						
ANR	24102	Symbol	constant		24022						
ANR	24103	Symbol	name		24022						
ANR	24104	Symbol	name_length		24022						
ANR	24105	Symbol	* ce		24022						
ANR	24106	Symbol	TSRMLS_DC		24022						
ANR	24107	Symbol	value		24022						
ANR	24108	Function	zend_declare_class_constant_bool	3703:0:111995:112400							
ANR	24109	FunctionDef	"zend_declare_class_constant_bool (zend_class_entry * ce , const char * name , size_t name_length , zend_bool value TSRMLS_DC)"		24108	0					
ANR	24110	CompoundStatement		3704:0:112138:112400	24108	0					
ANR	24111	IdentifierDeclStatement	zval * constant ;	3705:1:112141:112155	24108	0	True				
ANR	24112	IdentifierDecl	* constant		24108	0					
ANR	24113	IdentifierDeclType	zval *		24108	0					
ANR	24114	Identifier	constant		24108	1					
ANR	24115	IfStatement	if ( ce -> type & ZEND_INTERNAL_CLASS )		24108	1					
ANR	24116	Condition	ce -> type & ZEND_INTERNAL_CLASS	3707:5:112163:112192	24108	0	True				
ANR	24117	BitAndExpression	ce -> type & ZEND_INTERNAL_CLASS		24108	0		&			
ANR	24118	PtrMemberAccess	ce -> type		24108	0					
ANR	24119	Identifier	ce		24108	0					
ANR	24120	Identifier	type		24108	1					
ANR	24121	Identifier	ZEND_INTERNAL_CLASS		24108	1					
ANR	24122	CompoundStatement		4:37:56:56	24108	1					
ANR	24123	ExpressionStatement	ALLOC_PERMANENT_ZVAL ( constant )	3708:2:112199:112229	24108	0	True				
ANR	24124	CallExpression	ALLOC_PERMANENT_ZVAL ( constant )		24108	0					
ANR	24125	Callee	ALLOC_PERMANENT_ZVAL		24108	0					
ANR	24126	Identifier	ALLOC_PERMANENT_ZVAL		24108	0					
ANR	24127	ArgumentList	constant		24108	1					
ANR	24128	Argument	constant		24108	0					
ANR	24129	Identifier	constant		24108	0					
ANR	24130	ElseStatement	else		24108	0					
ANR	24131	CompoundStatement		6:8:100:100	24108	0					
ANR	24132	ExpressionStatement	ALLOC_ZVAL ( constant )	3710:2:112243:112263	24108	0	True				
ANR	24133	CallExpression	ALLOC_ZVAL ( constant )		24108	0					
ANR	24134	Callee	ALLOC_ZVAL		24108	0					
ANR	24135	Identifier	ALLOC_ZVAL		24108	0					
ANR	24136	ArgumentList	constant		24108	1					
ANR	24137	Argument	constant		24108	0					
ANR	24138	Identifier	constant		24108	0					
ANR	24139	ExpressionStatement	"ZVAL_BOOL ( constant , value )"	3712:1:112269:112295	24108	2	True				
ANR	24140	CallExpression	"ZVAL_BOOL ( constant , value )"		24108	0					
ANR	24141	Callee	ZVAL_BOOL		24108	0					
ANR	24142	Identifier	ZVAL_BOOL		24108	0					
ANR	24143	ArgumentList	constant		24108	1					
ANR	24144	Argument	constant		24108	0					
ANR	24145	Identifier	constant		24108	0					
ANR	24146	Argument	value		24108	1					
ANR	24147	Identifier	value		24108	0					
ANR	24148	ExpressionStatement	INIT_PZVAL ( constant )	3713:1:112298:112318	24108	3	True				
ANR	24149	CallExpression	INIT_PZVAL ( constant )		24108	0					
ANR	24150	Callee	INIT_PZVAL		24108	0					
ANR	24151	Identifier	INIT_PZVAL		24108	0					
ANR	24152	ArgumentList	constant		24108	1					
ANR	24153	Argument	constant		24108	0					
ANR	24154	Identifier	constant		24108	0					
ANR	24155	Statement	return	3714:1:112321:112326	24108	4	True				
ANR	24156	Statement	zend_declare_class_constant	3714:8:112328:112354	24108	5	True				
ANR	24157	Statement	(	3714:35:112355:112355	24108	6	True				
ANR	24158	Statement	ce	3714:36:112356:112357	24108	7	True				
ANR	24159	Statement	","	3714:38:112358:112358	24108	8	True				
ANR	24160	Statement	name	3714:40:112360:112363	24108	9	True				
ANR	24161	Statement	","	3714:44:112364:112364	24108	10	True				
ANR	24162	Statement	name_length	3714:46:112366:112376	24108	11	True				
ANR	24163	Statement	","	3714:57:112377:112377	24108	12	True				
ANR	24164	Statement	constant	3714:59:112379:112386	24108	13	True				
ANR	24165	Statement	TSRMLS_CC	3714:68:112388:112396	24108	14	True				
ANR	24166	Statement	)	3714:77:112397:112397	24108	15	True				
ANR	24167	ExpressionStatement		3714:78:112398:112398	24108	16	True				
ANR	24168	ReturnType	ZEND_API int		24108	1					
ANR	24169	Identifier	zend_declare_class_constant_bool		24108	2					
ANR	24170	ParameterList	"zend_class_entry * ce , const char * name , size_t name_length , zend_bool value TSRMLS_DC"		24108	3					
ANR	24171	Parameter	zend_class_entry * ce	3703:46:112041:112060	24108	0	True				
ANR	24172	ParameterType	zend_class_entry *		24108	0					
ANR	24173	Identifier	ce		24108	1					
ANR	24174	Parameter	const char * name	3703:68:112063:112078	24108	1	True				
ANR	24175	ParameterType	const char *		24108	0					
ANR	24176	Identifier	name		24108	1					
ANR	24177	Parameter	size_t name_length	3703:86:112081:112098	24108	2	True				
ANR	24178	ParameterType	size_t		24108	0					
ANR	24179	Identifier	name_length		24108	1					
ANR	24180	Parameter	zend_bool value TSRMLS_DC	3703:106:112101:112125	24108	3	True				
ANR	24181	ParameterType	zend_bool value		24108	0					
ANR	24182	Identifier	TSRMLS_DC		24108	1					
ANR	24183	CFGEntryNode	ENTRY		24108		True				
ANR	24184	CFGExitNode	EXIT		24108		True				
ANR	24185	Symbol	ZEND_INTERNAL_CLASS		24108						
ANR	24186	Symbol	ce -> type		24108						
ANR	24187	Symbol	ce		24108						
ANR	24188	Symbol	constant		24108						
ANR	24189	Symbol	name		24108						
ANR	24190	Symbol	name_length		24108						
ANR	24191	Symbol	* ce		24108						
ANR	24192	Symbol	TSRMLS_DC		24108						
ANR	24193	Symbol	value		24108						
ANR	24194	Function	zend_declare_class_constant_double	3718:0:112413:112819							
ANR	24195	FunctionDef	"zend_declare_class_constant_double (zend_class_entry * ce , const char * name , size_t name_length , double value TSRMLS_DC)"		24194	0					
ANR	24196	CompoundStatement		3719:0:112555:112819	24194	0					
ANR	24197	IdentifierDeclStatement	zval * constant ;	3720:1:112558:112572	24194	0	True				
ANR	24198	IdentifierDecl	* constant		24194	0					
ANR	24199	IdentifierDeclType	zval *		24194	0					
ANR	24200	Identifier	constant		24194	1					
ANR	24201	IfStatement	if ( ce -> type & ZEND_INTERNAL_CLASS )		24194	1					
ANR	24202	Condition	ce -> type & ZEND_INTERNAL_CLASS	3722:5:112580:112609	24194	0	True				
ANR	24203	BitAndExpression	ce -> type & ZEND_INTERNAL_CLASS		24194	0		&			
ANR	24204	PtrMemberAccess	ce -> type		24194	0					
ANR	24205	Identifier	ce		24194	0					
ANR	24206	Identifier	type		24194	1					
ANR	24207	Identifier	ZEND_INTERNAL_CLASS		24194	1					
ANR	24208	CompoundStatement		4:37:56:56	24194	1					
ANR	24209	ExpressionStatement	ALLOC_PERMANENT_ZVAL ( constant )	3723:2:112616:112646	24194	0	True				
ANR	24210	CallExpression	ALLOC_PERMANENT_ZVAL ( constant )		24194	0					
ANR	24211	Callee	ALLOC_PERMANENT_ZVAL		24194	0					
ANR	24212	Identifier	ALLOC_PERMANENT_ZVAL		24194	0					
ANR	24213	ArgumentList	constant		24194	1					
ANR	24214	Argument	constant		24194	0					
ANR	24215	Identifier	constant		24194	0					
ANR	24216	ElseStatement	else		24194	0					
ANR	24217	CompoundStatement		6:8:100:100	24194	0					
ANR	24218	ExpressionStatement	ALLOC_ZVAL ( constant )	3725:2:112660:112680	24194	0	True				
ANR	24219	CallExpression	ALLOC_ZVAL ( constant )		24194	0					
ANR	24220	Callee	ALLOC_ZVAL		24194	0					
ANR	24221	Identifier	ALLOC_ZVAL		24194	0					
ANR	24222	ArgumentList	constant		24194	1					
ANR	24223	Argument	constant		24194	0					
ANR	24224	Identifier	constant		24194	0					
ANR	24225	ExpressionStatement	"ZVAL_DOUBLE ( constant , value )"	3727:1:112686:112714	24194	2	True				
ANR	24226	CallExpression	"ZVAL_DOUBLE ( constant , value )"		24194	0					
ANR	24227	Callee	ZVAL_DOUBLE		24194	0					
ANR	24228	Identifier	ZVAL_DOUBLE		24194	0					
ANR	24229	ArgumentList	constant		24194	1					
ANR	24230	Argument	constant		24194	0					
ANR	24231	Identifier	constant		24194	0					
ANR	24232	Argument	value		24194	1					
ANR	24233	Identifier	value		24194	0					
ANR	24234	ExpressionStatement	INIT_PZVAL ( constant )	3728:1:112717:112737	24194	3	True				
ANR	24235	CallExpression	INIT_PZVAL ( constant )		24194	0					
ANR	24236	Callee	INIT_PZVAL		24194	0					
ANR	24237	Identifier	INIT_PZVAL		24194	0					
ANR	24238	ArgumentList	constant		24194	1					
ANR	24239	Argument	constant		24194	0					
ANR	24240	Identifier	constant		24194	0					
ANR	24241	Statement	return	3729:1:112740:112745	24194	4	True				
ANR	24242	Statement	zend_declare_class_constant	3729:8:112747:112773	24194	5	True				
ANR	24243	Statement	(	3729:35:112774:112774	24194	6	True				
ANR	24244	Statement	ce	3729:36:112775:112776	24194	7	True				
ANR	24245	Statement	","	3729:38:112777:112777	24194	8	True				
ANR	24246	Statement	name	3729:40:112779:112782	24194	9	True				
ANR	24247	Statement	","	3729:44:112783:112783	24194	10	True				
ANR	24248	Statement	name_length	3729:46:112785:112795	24194	11	True				
ANR	24249	Statement	","	3729:57:112796:112796	24194	12	True				
ANR	24250	Statement	constant	3729:59:112798:112805	24194	13	True				
ANR	24251	Statement	TSRMLS_CC	3729:68:112807:112815	24194	14	True				
ANR	24252	Statement	)	3729:77:112816:112816	24194	15	True				
ANR	24253	ExpressionStatement		3729:78:112817:112817	24194	16	True				
ANR	24254	ReturnType	ZEND_API int		24194	1					
ANR	24255	Identifier	zend_declare_class_constant_double		24194	2					
ANR	24256	ParameterList	"zend_class_entry * ce , const char * name , size_t name_length , double value TSRMLS_DC"		24194	3					
ANR	24257	Parameter	zend_class_entry * ce	3718:48:112461:112480	24194	0	True				
ANR	24258	ParameterType	zend_class_entry *		24194	0					
ANR	24259	Identifier	ce		24194	1					
ANR	24260	Parameter	const char * name	3718:70:112483:112498	24194	1	True				
ANR	24261	ParameterType	const char *		24194	0					
ANR	24262	Identifier	name		24194	1					
ANR	24263	Parameter	size_t name_length	3718:88:112501:112518	24194	2	True				
ANR	24264	ParameterType	size_t		24194	0					
ANR	24265	Identifier	name_length		24194	1					
ANR	24266	Parameter	double value TSRMLS_DC	3718:108:112521:112542	24194	3	True				
ANR	24267	ParameterType	double value		24194	0					
ANR	24268	Identifier	TSRMLS_DC		24194	1					
ANR	24269	CFGEntryNode	ENTRY		24194		True				
ANR	24270	CFGExitNode	EXIT		24194		True				
ANR	24271	Symbol	ZEND_INTERNAL_CLASS		24194						
ANR	24272	Symbol	ce -> type		24194						
ANR	24273	Symbol	ce		24194						
ANR	24274	Symbol	constant		24194						
ANR	24275	Symbol	name		24194						
ANR	24276	Symbol	name_length		24194						
ANR	24277	Symbol	* ce		24194						
ANR	24278	Symbol	TSRMLS_DC		24194						
ANR	24279	Symbol	value		24194						
ANR	24280	Function	zend_declare_class_constant_stringl	3733:0:112832:113362							
ANR	24281	FunctionDef	"zend_declare_class_constant_stringl (zend_class_entry * ce , const char * name , size_t name_length , const char * value , size_t value_length TSRMLS_DC)"		24280	0					
ANR	24282	CompoundStatement		3734:0:113001:113362	24280	0					
ANR	24283	IdentifierDeclStatement	zval * constant ;	3735:1:113004:113018	24280	0	True				
ANR	24284	IdentifierDecl	* constant		24280	0					
ANR	24285	IdentifierDeclType	zval *		24280	0					
ANR	24286	Identifier	constant		24280	1					
ANR	24287	IfStatement	if ( ce -> type & ZEND_INTERNAL_CLASS )		24280	1					
ANR	24288	Condition	ce -> type & ZEND_INTERNAL_CLASS	3737:5:113026:113055	24280	0	True				
ANR	24289	BitAndExpression	ce -> type & ZEND_INTERNAL_CLASS		24280	0		&			
ANR	24290	PtrMemberAccess	ce -> type		24280	0					
ANR	24291	Identifier	ce		24280	0					
ANR	24292	Identifier	type		24280	1					
ANR	24293	Identifier	ZEND_INTERNAL_CLASS		24280	1					
ANR	24294	CompoundStatement		4:37:56:56	24280	1					
ANR	24295	ExpressionStatement	ALLOC_PERMANENT_ZVAL ( constant )	3738:2:113062:113092	24280	0	True				
ANR	24296	CallExpression	ALLOC_PERMANENT_ZVAL ( constant )		24280	0					
ANR	24297	Callee	ALLOC_PERMANENT_ZVAL		24280	0					
ANR	24298	Identifier	ALLOC_PERMANENT_ZVAL		24280	0					
ANR	24299	ArgumentList	constant		24280	1					
ANR	24300	Argument	constant		24280	0					
ANR	24301	Identifier	constant		24280	0					
ANR	24302	ExpressionStatement	"ZVAL_STRINGL ( constant , zend_strndup ( value , value_length ) , value_length , 0 )"	3739:2:113096:113170	24280	1	True				
ANR	24303	CallExpression	"ZVAL_STRINGL ( constant , zend_strndup ( value , value_length ) , value_length , 0 )"		24280	0					
ANR	24304	Callee	ZVAL_STRINGL		24280	0					
ANR	24305	Identifier	ZVAL_STRINGL		24280	0					
ANR	24306	ArgumentList	constant		24280	1					
ANR	24307	Argument	constant		24280	0					
ANR	24308	Identifier	constant		24280	0					
ANR	24309	Argument	"zend_strndup ( value , value_length )"		24280	1					
ANR	24310	CallExpression	"zend_strndup ( value , value_length )"		24280	0					
ANR	24311	Callee	zend_strndup		24280	0					
ANR	24312	Identifier	zend_strndup		24280	0					
ANR	24313	ArgumentList	value		24280	1					
ANR	24314	Argument	value		24280	0					
ANR	24315	Identifier	value		24280	0					
ANR	24316	Argument	value_length		24280	1					
ANR	24317	Identifier	value_length		24280	0					
ANR	24318	Argument	value_length		24280	2					
ANR	24319	Identifier	value_length		24280	0					
ANR	24320	Argument	0		24280	3					
ANR	24321	PrimaryExpression	0		24280	0					
ANR	24322	ElseStatement	else		24280	0					
ANR	24323	CompoundStatement		7:8:178:178	24280	0					
ANR	24324	ExpressionStatement	ALLOC_ZVAL ( constant )	3741:2:113184:113204	24280	0	True				
ANR	24325	CallExpression	ALLOC_ZVAL ( constant )		24280	0					
ANR	24326	Callee	ALLOC_ZVAL		24280	0					
ANR	24327	Identifier	ALLOC_ZVAL		24280	0					
ANR	24328	ArgumentList	constant		24280	1					
ANR	24329	Argument	constant		24280	0					
ANR	24330	Identifier	constant		24280	0					
ANR	24331	ExpressionStatement	"ZVAL_STRINGL ( constant , value , value_length , 1 )"	3742:2:113208:113254	24280	1	True				
ANR	24332	CallExpression	"ZVAL_STRINGL ( constant , value , value_length , 1 )"		24280	0					
ANR	24333	Callee	ZVAL_STRINGL		24280	0					
ANR	24334	Identifier	ZVAL_STRINGL		24280	0					
ANR	24335	ArgumentList	constant		24280	1					
ANR	24336	Argument	constant		24280	0					
ANR	24337	Identifier	constant		24280	0					
ANR	24338	Argument	value		24280	1					
ANR	24339	Identifier	value		24280	0					
ANR	24340	Argument	value_length		24280	2					
ANR	24341	Identifier	value_length		24280	0					
ANR	24342	Argument	1		24280	3					
ANR	24343	PrimaryExpression	1		24280	0					
ANR	24344	ExpressionStatement	INIT_PZVAL ( constant )	3744:1:113260:113280	24280	2	True				
ANR	24345	CallExpression	INIT_PZVAL ( constant )		24280	0					
ANR	24346	Callee	INIT_PZVAL		24280	0					
ANR	24347	Identifier	INIT_PZVAL		24280	0					
ANR	24348	ArgumentList	constant		24280	1					
ANR	24349	Argument	constant		24280	0					
ANR	24350	Identifier	constant		24280	0					
ANR	24351	Statement	return	3745:1:113283:113288	24280	3	True				
ANR	24352	Statement	zend_declare_class_constant	3745:8:113290:113316	24280	4	True				
ANR	24353	Statement	(	3745:35:113317:113317	24280	5	True				
ANR	24354	Statement	ce	3745:36:113318:113319	24280	6	True				
ANR	24355	Statement	","	3745:38:113320:113320	24280	7	True				
ANR	24356	Statement	name	3745:40:113322:113325	24280	8	True				
ANR	24357	Statement	","	3745:44:113326:113326	24280	9	True				
ANR	24358	Statement	name_length	3745:46:113328:113338	24280	10	True				
ANR	24359	Statement	","	3745:57:113339:113339	24280	11	True				
ANR	24360	Statement	constant	3745:59:113341:113348	24280	12	True				
ANR	24361	Statement	TSRMLS_CC	3745:68:113350:113358	24280	13	True				
ANR	24362	Statement	)	3745:77:113359:113359	24280	14	True				
ANR	24363	ExpressionStatement		3745:78:113360:113360	24280	15	True				
ANR	24364	ReturnType	ZEND_API int		24280	1					
ANR	24365	Identifier	zend_declare_class_constant_stringl		24280	2					
ANR	24366	ParameterList	"zend_class_entry * ce , const char * name , size_t name_length , const char * value , size_t value_length TSRMLS_DC"		24280	3					
ANR	24367	Parameter	zend_class_entry * ce	3733:49:112881:112900	24280	0	True				
ANR	24368	ParameterType	zend_class_entry *		24280	0					
ANR	24369	Identifier	ce		24280	1					
ANR	24370	Parameter	const char * name	3733:71:112903:112918	24280	1	True				
ANR	24371	ParameterType	const char *		24280	0					
ANR	24372	Identifier	name		24280	1					
ANR	24373	Parameter	size_t name_length	3733:89:112921:112938	24280	2	True				
ANR	24374	ParameterType	size_t		24280	0					
ANR	24375	Identifier	name_length		24280	1					
ANR	24376	Parameter	const char * value	3733:109:112941:112957	24280	3	True				
ANR	24377	ParameterType	const char *		24280	0					
ANR	24378	Identifier	value		24280	1					
ANR	24379	Parameter	size_t value_length TSRMLS_DC	3733:128:112960:112988	24280	4	True				
ANR	24380	ParameterType	size_t value_length		24280	0					
ANR	24381	Identifier	TSRMLS_DC		24280	1					
ANR	24382	CFGEntryNode	ENTRY		24280		True				
ANR	24383	CFGExitNode	EXIT		24280		True				
ANR	24384	Symbol	ZEND_INTERNAL_CLASS		24280						
ANR	24385	Symbol	ce -> type		24280						
ANR	24386	Symbol	zend_strndup		24280						
ANR	24387	Symbol	ce		24280						
ANR	24388	Symbol	constant		24280						
ANR	24389	Symbol	value_length		24280						
ANR	24390	Symbol	name		24280						
ANR	24391	Symbol	name_length		24280						
ANR	24392	Symbol	* ce		24280						
ANR	24393	Symbol	value		24280						
ANR	24394	Symbol	TSRMLS_DC		24280						
ANR	24395	DeclStmt									
ANR	24396	Decl							zval	zval *	property
ANR	24397	DeclStmt									
ANR	24398	Decl							zend_class_entry	zend_class_entry *	old_scope
ANR	24399	DeclStmt									
ANR	24400	Decl							const char	const char *	class_name
ANR	24401	DeclStmt									
ANR	24402	Decl							zend_uint	zend_uint	class_name_len
ANR	24403	Function	zend_unset_property	3779:0:114346:115019							
ANR	24404	FunctionDef	"zend_unset_property (zend_class_entry * scope , zval * object , const char * name , int name_length TSRMLS_DC)"		24403	0					
ANR	24405	CompoundStatement		3780:0:114474:115019	24403	0					
ANR	24406	IdentifierDeclStatement	zval * property ;	3781:1:114477:114491	24403	0	True				
ANR	24407	IdentifierDecl	* property		24403	0					
ANR	24408	IdentifierDeclType	zval *		24403	0					
ANR	24409	Identifier	property		24403	1					
ANR	24410	IdentifierDeclStatement	zend_class_entry * old_scope = EG ( scope ) ;	3782:1:114494:114533	24403	1	True				
ANR	24411	IdentifierDecl	* old_scope = EG ( scope )		24403	0					
ANR	24412	IdentifierDeclType	zend_class_entry *		24403	0					
ANR	24413	Identifier	old_scope		24403	1					
ANR	24414	AssignmentExpression	* old_scope = EG ( scope )		24403	2		=			
ANR	24415	Identifier	old_scope		24403	0					
ANR	24416	CallExpression	EG ( scope )		24403	1					
ANR	24417	Callee	EG		24403	0					
ANR	24418	Identifier	EG		24403	0					
ANR	24419	ArgumentList	scope		24403	1					
ANR	24420	Argument	scope		24403	0					
ANR	24421	Identifier	scope		24403	0					
ANR	24422	ExpressionStatement	EG ( scope ) = scope	3784:1:114537:114554	24403	2	True				
ANR	24423	AssignmentExpression	EG ( scope ) = scope		24403	0		=			
ANR	24424	CallExpression	EG ( scope )		24403	0					
ANR	24425	Callee	EG		24403	0					
ANR	24426	Identifier	EG		24403	0					
ANR	24427	ArgumentList	scope		24403	1					
ANR	24428	Argument	scope		24403	0					
ANR	24429	Identifier	scope		24403	0					
ANR	24430	Identifier	scope		24403	1					
ANR	24431	IfStatement	if ( ! Z_OBJ_HT_P ( object ) -> unset_property )		24403	3					
ANR	24432	Condition	! Z_OBJ_HT_P ( object ) -> unset_property	3786:5:114562:114596	24403	0	True				
ANR	24433	UnaryOperationExpression	! Z_OBJ_HT_P ( object ) -> unset_property		24403	0					
ANR	24434	UnaryOperator	!		24403	0					
ANR	24435	PtrMemberAccess	Z_OBJ_HT_P ( object ) -> unset_property		24403	1					
ANR	24436	CallExpression	Z_OBJ_HT_P ( object )		24403	0					
ANR	24437	Callee	Z_OBJ_HT_P		24403	0					
ANR	24438	Identifier	Z_OBJ_HT_P		24403	0					
ANR	24439	ArgumentList	object		24403	1					
ANR	24440	Argument	object		24403	0					
ANR	24441	Identifier	object		24403	0					
ANR	24442	Identifier	unset_property		24403	1					
ANR	24443	CompoundStatement		9:2:154:178	24403	1					
ANR	24444	IdentifierDeclStatement	const char * class_name ;	3787:2:114603:114625	24403	0	True				
ANR	24445	IdentifierDecl	* class_name		24403	0					
ANR	24446	IdentifierDeclType	const char *		24403	0					
ANR	24447	Identifier	class_name		24403	1					
ANR	24448	IdentifierDeclStatement	zend_uint class_name_len ;	3788:2:114629:114653	24403	1	True				
ANR	24449	IdentifierDecl	class_name_len		24403	0					
ANR	24450	IdentifierDeclType	zend_uint		24403	0					
ANR	24451	Identifier	class_name_len		24403	1					
ANR	24452	Statement	zend_get_object_classname	3790:2:114658:114682	24403	2	True				
ANR	24453	Statement	(	3790:27:114683:114683	24403	3	True				
ANR	24454	Statement	object	3790:28:114684:114689	24403	4	True				
ANR	24455	Statement	","	3790:34:114690:114690	24403	5	True				
ANR	24456	Statement	&	3790:36:114692:114692	24403	6	True				
ANR	24457	Statement	class_name	3790:37:114693:114702	24403	7	True				
ANR	24458	Statement	","	3790:47:114703:114703	24403	8	True				
ANR	24459	Statement	&	3790:49:114705:114705	24403	9	True				
ANR	24460	Statement	class_name_len	3790:50:114706:114719	24403	10	True				
ANR	24461	Statement	TSRMLS_CC	3790:65:114721:114729	24403	11	True				
ANR	24462	Statement	)	3790:74:114730:114730	24403	12	True				
ANR	24463	ExpressionStatement		3790:75:114731:114731	24403	13	True				
ANR	24464	ExpressionStatement	"zend_error ( E_CORE_ERROR , ""Property %s of class %s cannot be unset"" , name , class_name )"	3792:2:114736:114821	24403	14	True				
ANR	24465	CallExpression	"zend_error ( E_CORE_ERROR , ""Property %s of class %s cannot be unset"" , name , class_name )"		24403	0					
ANR	24466	Callee	zend_error		24403	0					
ANR	24467	Identifier	zend_error		24403	0					
ANR	24468	ArgumentList	E_CORE_ERROR		24403	1					
ANR	24469	Argument	E_CORE_ERROR		24403	0					
ANR	24470	Identifier	E_CORE_ERROR		24403	0					
ANR	24471	Argument	"""Property %s of class %s cannot be unset"""		24403	1					
ANR	24472	PrimaryExpression	"""Property %s of class %s cannot be unset"""		24403	0					
ANR	24473	Argument	name		24403	2					
ANR	24474	Identifier	name		24403	0					
ANR	24475	Argument	class_name		24403	3					
ANR	24476	Identifier	class_name		24403	0					
ANR	24477	ExpressionStatement	MAKE_STD_ZVAL ( property )	3794:1:114827:114850	24403	4	True				
ANR	24478	CallExpression	MAKE_STD_ZVAL ( property )		24403	0					
ANR	24479	Callee	MAKE_STD_ZVAL		24403	0					
ANR	24480	Identifier	MAKE_STD_ZVAL		24403	0					
ANR	24481	ArgumentList	property		24403	1					
ANR	24482	Argument	property		24403	0					
ANR	24483	Identifier	property		24403	0					
ANR	24484	ExpressionStatement	"ZVAL_STRINGL ( property , name , name_length , 1 )"	3795:1:114853:114897	24403	5	True				
ANR	24485	CallExpression	"ZVAL_STRINGL ( property , name , name_length , 1 )"		24403	0					
ANR	24486	Callee	ZVAL_STRINGL		24403	0					
ANR	24487	Identifier	ZVAL_STRINGL		24403	0					
ANR	24488	ArgumentList	property		24403	1					
ANR	24489	Argument	property		24403	0					
ANR	24490	Identifier	property		24403	0					
ANR	24491	Argument	name		24403	1					
ANR	24492	Identifier	name		24403	0					
ANR	24493	Argument	name_length		24403	2					
ANR	24494	Identifier	name_length		24403	0					
ANR	24495	Argument	1		24403	3					
ANR	24496	PrimaryExpression	1		24403	0					
ANR	24497	Statement	Z_OBJ_HT_P	3796:1:114900:114909	24403	6	True				
ANR	24498	Statement	(	3796:11:114910:114910	24403	7	True				
ANR	24499	Statement	object	3796:12:114911:114916	24403	8	True				
ANR	24500	Statement	)	3796:18:114917:114917	24403	9	True				
ANR	24501	Statement	->	3796:19:114918:114919	24403	10	True				
ANR	24502	Statement	unset_property	3796:21:114920:114933	24403	11	True				
ANR	24503	Statement	(	3796:35:114934:114934	24403	12	True				
ANR	24504	Statement	object	3796:36:114935:114940	24403	13	True				
ANR	24505	Statement	","	3796:42:114941:114941	24403	14	True				
ANR	24506	Statement	property	3796:44:114943:114950	24403	15	True				
ANR	24507	Statement	","	3796:52:114951:114951	24403	16	True				
ANR	24508	Statement	0	3796:54:114953:114953	24403	17	True				
ANR	24509	Statement	TSRMLS_CC	3796:56:114955:114963	24403	18	True				
ANR	24510	Statement	)	3796:65:114964:114964	24403	19	True				
ANR	24511	ExpressionStatement		3796:66:114965:114965	24403	20	True				
ANR	24512	ExpressionStatement	zval_ptr_dtor ( & property )	3797:1:114968:114992	24403	21	True				
ANR	24513	CallExpression	zval_ptr_dtor ( & property )		24403	0					
ANR	24514	Callee	zval_ptr_dtor		24403	0					
ANR	24515	Identifier	zval_ptr_dtor		24403	0					
ANR	24516	ArgumentList	& property		24403	1					
ANR	24517	Argument	& property		24403	0					
ANR	24518	UnaryOperationExpression	& property		24403	0					
ANR	24519	UnaryOperator	&		24403	0					
ANR	24520	Identifier	property		24403	1					
ANR	24521	ExpressionStatement	EG ( scope ) = old_scope	3799:1:114996:115017	24403	22	True				
ANR	24522	AssignmentExpression	EG ( scope ) = old_scope		24403	0		=			
ANR	24523	CallExpression	EG ( scope )		24403	0					
ANR	24524	Callee	EG		24403	0					
ANR	24525	Identifier	EG		24403	0					
ANR	24526	ArgumentList	scope		24403	1					
ANR	24527	Argument	scope		24403	0					
ANR	24528	Identifier	scope		24403	0					
ANR	24529	Identifier	old_scope		24403	1					
ANR	24530	ReturnType	ZEND_API void		24403	1					
ANR	24531	Identifier	zend_unset_property		24403	2					
ANR	24532	ParameterList	"zend_class_entry * scope , zval * object , const char * name , int name_length TSRMLS_DC"		24403	3					
ANR	24533	Parameter	zend_class_entry * scope	3779:34:114380:114402	24403	0	True				
ANR	24534	ParameterType	zend_class_entry *		24403	0					
ANR	24535	Identifier	scope		24403	1					
ANR	24536	Parameter	zval * object	3779:59:114405:114416	24403	1	True				
ANR	24537	ParameterType	zval *		24403	0					
ANR	24538	Identifier	object		24403	1					
ANR	24539	Parameter	const char * name	3779:73:114419:114434	24403	2	True				
ANR	24540	ParameterType	const char *		24403	0					
ANR	24541	Identifier	name		24403	1					
ANR	24542	Parameter	int name_length TSRMLS_DC	3779:91:114437:114461	24403	3	True				
ANR	24543	ParameterType	int name_length		24403	0					
ANR	24544	Identifier	TSRMLS_DC		24403	1					
ANR	24545	CFGEntryNode	ENTRY		24403		True				
ANR	24546	CFGExitNode	EXIT		24403		True				
ANR	24547	Symbol	EG		24403						
ANR	24548	Symbol	old_scope		24403						
ANR	24549	Symbol	name_length		24403						
ANR	24550	Symbol	TSRMLS_DC		24403						
ANR	24551	Symbol	* Z_OBJ_HT_P		24403						
ANR	24552	Symbol	& property		24403						
ANR	24553	Symbol	E_CORE_ERROR		24403						
ANR	24554	Symbol	scope		24403						
ANR	24555	Symbol	name		24403						
ANR	24556	Symbol	property		24403						
ANR	24557	Symbol	Z_OBJ_HT_P ( object ) -> unset_property		24403						
ANR	24558	Symbol	Z_OBJ_HT_P		24403						
ANR	24559	Symbol	class_name_len		24403						
ANR	24560	Symbol	class_name		24403						
ANR	24561	Symbol	object		24403						
ANR	24562	Function	zend_update_property_null	3803:0:115032:115338							
ANR	24563	FunctionDef	"zend_update_property_null (zend_class_entry * scope , zval * object , const char * name , int name_length TSRMLS_DC)"		24562	0					
ANR	24564	CompoundStatement		3804:0:115166:115338	24562	0					
ANR	24565	IdentifierDeclStatement	zval * tmp ;	3805:1:115169:115178	24562	0	True				
ANR	24566	IdentifierDecl	* tmp		24562	0					
ANR	24567	IdentifierDeclType	zval *		24562	0					
ANR	24568	Identifier	tmp		24562	1					
ANR	24569	ExpressionStatement	ALLOC_ZVAL ( tmp )	3807:1:115182:115197	24562	1	True				
ANR	24570	CallExpression	ALLOC_ZVAL ( tmp )		24562	0					
ANR	24571	Callee	ALLOC_ZVAL		24562	0					
ANR	24572	Identifier	ALLOC_ZVAL		24562	0					
ANR	24573	ArgumentList	tmp		24562	1					
ANR	24574	Argument	tmp		24562	0					
ANR	24575	Identifier	tmp		24562	0					
ANR	24576	ExpressionStatement	Z_UNSET_ISREF_P ( tmp )	3808:1:115200:115220	24562	2	True				
ANR	24577	CallExpression	Z_UNSET_ISREF_P ( tmp )		24562	0					
ANR	24578	Callee	Z_UNSET_ISREF_P		24562	0					
ANR	24579	Identifier	Z_UNSET_ISREF_P		24562	0					
ANR	24580	ArgumentList	tmp		24562	1					
ANR	24581	Argument	tmp		24562	0					
ANR	24582	Identifier	tmp		24562	0					
ANR	24583	ExpressionStatement	"Z_SET_REFCOUNT_P ( tmp , 0 )"	3809:1:115223:115247	24562	3	True				
ANR	24584	CallExpression	"Z_SET_REFCOUNT_P ( tmp , 0 )"		24562	0					
ANR	24585	Callee	Z_SET_REFCOUNT_P		24562	0					
ANR	24586	Identifier	Z_SET_REFCOUNT_P		24562	0					
ANR	24587	ArgumentList	tmp		24562	1					
ANR	24588	Argument	tmp		24562	0					
ANR	24589	Identifier	tmp		24562	0					
ANR	24590	Argument	0		24562	1					
ANR	24591	PrimaryExpression	0		24562	0					
ANR	24592	ExpressionStatement	ZVAL_NULL ( tmp )	3810:1:115250:115264	24562	4	True				
ANR	24593	CallExpression	ZVAL_NULL ( tmp )		24562	0					
ANR	24594	Callee	ZVAL_NULL		24562	0					
ANR	24595	Identifier	ZVAL_NULL		24562	0					
ANR	24596	ArgumentList	tmp		24562	1					
ANR	24597	Argument	tmp		24562	0					
ANR	24598	Identifier	tmp		24562	0					
ANR	24599	Statement	zend_update_property	3811:1:115267:115286	24562	5	True				
ANR	24600	Statement	(	3811:21:115287:115287	24562	6	True				
ANR	24601	Statement	scope	3811:22:115288:115292	24562	7	True				
ANR	24602	Statement	","	3811:27:115293:115293	24562	8	True				
ANR	24603	Statement	object	3811:29:115295:115300	24562	9	True				
ANR	24604	Statement	","	3811:35:115301:115301	24562	10	True				
ANR	24605	Statement	name	3811:37:115303:115306	24562	11	True				
ANR	24606	Statement	","	3811:41:115307:115307	24562	12	True				
ANR	24607	Statement	name_length	3811:43:115309:115319	24562	13	True				
ANR	24608	Statement	","	3811:54:115320:115320	24562	14	True				
ANR	24609	Statement	tmp	3811:56:115322:115324	24562	15	True				
ANR	24610	Statement	TSRMLS_CC	3811:60:115326:115334	24562	16	True				
ANR	24611	Statement	)	3811:69:115335:115335	24562	17	True				
ANR	24612	ExpressionStatement		3811:70:115336:115336	24562	18	True				
ANR	24613	ReturnType	ZEND_API void		24562	1					
ANR	24614	Identifier	zend_update_property_null		24562	2					
ANR	24615	ParameterList	"zend_class_entry * scope , zval * object , const char * name , int name_length TSRMLS_DC"		24562	3					
ANR	24616	Parameter	zend_class_entry * scope	3803:40:115072:115094	24562	0	True				
ANR	24617	ParameterType	zend_class_entry *		24562	0					
ANR	24618	Identifier	scope		24562	1					
ANR	24619	Parameter	zval * object	3803:65:115097:115108	24562	1	True				
ANR	24620	ParameterType	zval *		24562	0					
ANR	24621	Identifier	object		24562	1					
ANR	24622	Parameter	const char * name	3803:79:115111:115126	24562	2	True				
ANR	24623	ParameterType	const char *		24562	0					
ANR	24624	Identifier	name		24562	1					
ANR	24625	Parameter	int name_length TSRMLS_DC	3803:97:115129:115153	24562	3	True				
ANR	24626	ParameterType	int name_length		24562	0					
ANR	24627	Identifier	TSRMLS_DC		24562	1					
ANR	24628	CFGEntryNode	ENTRY		24562		True				
ANR	24629	CFGExitNode	EXIT		24562		True				
ANR	24630	Symbol	tmp		24562						
ANR	24631	Symbol	scope		24562						
ANR	24632	Symbol	name		24562						
ANR	24633	Symbol	TSRMLS_DC		24562						
ANR	24634	Symbol	object		24562						
ANR	24635	Function	zend_update_property_bool	3815:0:115351:115676							
ANR	24636	FunctionDef	"zend_update_property_bool (zend_class_entry * scope , zval * object , const char * name , int name_length , long value TSRMLS_DC)"		24635	0					
ANR	24637	CompoundStatement		3816:0:115497:115676	24635	0					
ANR	24638	IdentifierDeclStatement	zval * tmp ;	3817:1:115500:115509	24635	0	True				
ANR	24639	IdentifierDecl	* tmp		24635	0					
ANR	24640	IdentifierDeclType	zval *		24635	0					
ANR	24641	Identifier	tmp		24635	1					
ANR	24642	ExpressionStatement	ALLOC_ZVAL ( tmp )	3819:1:115513:115528	24635	1	True				
ANR	24643	CallExpression	ALLOC_ZVAL ( tmp )		24635	0					
ANR	24644	Callee	ALLOC_ZVAL		24635	0					
ANR	24645	Identifier	ALLOC_ZVAL		24635	0					
ANR	24646	ArgumentList	tmp		24635	1					
ANR	24647	Argument	tmp		24635	0					
ANR	24648	Identifier	tmp		24635	0					
ANR	24649	ExpressionStatement	Z_UNSET_ISREF_P ( tmp )	3820:1:115531:115551	24635	2	True				
ANR	24650	CallExpression	Z_UNSET_ISREF_P ( tmp )		24635	0					
ANR	24651	Callee	Z_UNSET_ISREF_P		24635	0					
ANR	24652	Identifier	Z_UNSET_ISREF_P		24635	0					
ANR	24653	ArgumentList	tmp		24635	1					
ANR	24654	Argument	tmp		24635	0					
ANR	24655	Identifier	tmp		24635	0					
ANR	24656	ExpressionStatement	"Z_SET_REFCOUNT_P ( tmp , 0 )"	3821:1:115554:115578	24635	3	True				
ANR	24657	CallExpression	"Z_SET_REFCOUNT_P ( tmp , 0 )"		24635	0					
ANR	24658	Callee	Z_SET_REFCOUNT_P		24635	0					
ANR	24659	Identifier	Z_SET_REFCOUNT_P		24635	0					
ANR	24660	ArgumentList	tmp		24635	1					
ANR	24661	Argument	tmp		24635	0					
ANR	24662	Identifier	tmp		24635	0					
ANR	24663	Argument	0		24635	1					
ANR	24664	PrimaryExpression	0		24635	0					
ANR	24665	ExpressionStatement	"ZVAL_BOOL ( tmp , value )"	3822:1:115581:115602	24635	4	True				
ANR	24666	CallExpression	"ZVAL_BOOL ( tmp , value )"		24635	0					
ANR	24667	Callee	ZVAL_BOOL		24635	0					
ANR	24668	Identifier	ZVAL_BOOL		24635	0					
ANR	24669	ArgumentList	tmp		24635	1					
ANR	24670	Argument	tmp		24635	0					
ANR	24671	Identifier	tmp		24635	0					
ANR	24672	Argument	value		24635	1					
ANR	24673	Identifier	value		24635	0					
ANR	24674	Statement	zend_update_property	3823:1:115605:115624	24635	5	True				
ANR	24675	Statement	(	3823:21:115625:115625	24635	6	True				
ANR	24676	Statement	scope	3823:22:115626:115630	24635	7	True				
ANR	24677	Statement	","	3823:27:115631:115631	24635	8	True				
ANR	24678	Statement	object	3823:29:115633:115638	24635	9	True				
ANR	24679	Statement	","	3823:35:115639:115639	24635	10	True				
ANR	24680	Statement	name	3823:37:115641:115644	24635	11	True				
ANR	24681	Statement	","	3823:41:115645:115645	24635	12	True				
ANR	24682	Statement	name_length	3823:43:115647:115657	24635	13	True				
ANR	24683	Statement	","	3823:54:115658:115658	24635	14	True				
ANR	24684	Statement	tmp	3823:56:115660:115662	24635	15	True				
ANR	24685	Statement	TSRMLS_CC	3823:60:115664:115672	24635	16	True				
ANR	24686	Statement	)	3823:69:115673:115673	24635	17	True				
ANR	24687	ExpressionStatement		3823:70:115674:115674	24635	18	True				
ANR	24688	ReturnType	ZEND_API void		24635	1					
ANR	24689	Identifier	zend_update_property_bool		24635	2					
ANR	24690	ParameterList	"zend_class_entry * scope , zval * object , const char * name , int name_length , long value TSRMLS_DC"		24635	3					
ANR	24691	Parameter	zend_class_entry * scope	3815:40:115391:115413	24635	0	True				
ANR	24692	ParameterType	zend_class_entry *		24635	0					
ANR	24693	Identifier	scope		24635	1					
ANR	24694	Parameter	zval * object	3815:65:115416:115427	24635	1	True				
ANR	24695	ParameterType	zval *		24635	0					
ANR	24696	Identifier	object		24635	1					
ANR	24697	Parameter	const char * name	3815:79:115430:115445	24635	2	True				
ANR	24698	ParameterType	const char *		24635	0					
ANR	24699	Identifier	name		24635	1					
ANR	24700	Parameter	int name_length	3815:97:115448:115462	24635	3	True				
ANR	24701	ParameterType	int		24635	0					
ANR	24702	Identifier	name_length		24635	1					
ANR	24703	Parameter	long value TSRMLS_DC	3815:114:115465:115484	24635	4	True				
ANR	24704	ParameterType	long value		24635	0					
ANR	24705	Identifier	TSRMLS_DC		24635	1					
ANR	24706	CFGEntryNode	ENTRY		24635		True				
ANR	24707	CFGExitNode	EXIT		24635		True				
ANR	24708	Symbol	tmp		24635						
ANR	24709	Symbol	scope		24635						
ANR	24710	Symbol	name		24635						
ANR	24711	Symbol	name_length		24635						
ANR	24712	Symbol	TSRMLS_DC		24635						
ANR	24713	Symbol	value		24635						
ANR	24714	Symbol	object		24635						
ANR	24715	Function	zend_update_property_long	3827:0:115689:116014							
ANR	24716	FunctionDef	"zend_update_property_long (zend_class_entry * scope , zval * object , const char * name , int name_length , long value TSRMLS_DC)"		24715	0					
ANR	24717	CompoundStatement		3828:0:115835:116014	24715	0					
ANR	24718	IdentifierDeclStatement	zval * tmp ;	3829:1:115838:115847	24715	0	True				
ANR	24719	IdentifierDecl	* tmp		24715	0					
ANR	24720	IdentifierDeclType	zval *		24715	0					
ANR	24721	Identifier	tmp		24715	1					
ANR	24722	ExpressionStatement	ALLOC_ZVAL ( tmp )	3831:1:115851:115866	24715	1	True				
ANR	24723	CallExpression	ALLOC_ZVAL ( tmp )		24715	0					
ANR	24724	Callee	ALLOC_ZVAL		24715	0					
ANR	24725	Identifier	ALLOC_ZVAL		24715	0					
ANR	24726	ArgumentList	tmp		24715	1					
ANR	24727	Argument	tmp		24715	0					
ANR	24728	Identifier	tmp		24715	0					
ANR	24729	ExpressionStatement	Z_UNSET_ISREF_P ( tmp )	3832:1:115869:115889	24715	2	True				
ANR	24730	CallExpression	Z_UNSET_ISREF_P ( tmp )		24715	0					
ANR	24731	Callee	Z_UNSET_ISREF_P		24715	0					
ANR	24732	Identifier	Z_UNSET_ISREF_P		24715	0					
ANR	24733	ArgumentList	tmp		24715	1					
ANR	24734	Argument	tmp		24715	0					
ANR	24735	Identifier	tmp		24715	0					
ANR	24736	ExpressionStatement	"Z_SET_REFCOUNT_P ( tmp , 0 )"	3833:1:115892:115916	24715	3	True				
ANR	24737	CallExpression	"Z_SET_REFCOUNT_P ( tmp , 0 )"		24715	0					
ANR	24738	Callee	Z_SET_REFCOUNT_P		24715	0					
ANR	24739	Identifier	Z_SET_REFCOUNT_P		24715	0					
ANR	24740	ArgumentList	tmp		24715	1					
ANR	24741	Argument	tmp		24715	0					
ANR	24742	Identifier	tmp		24715	0					
ANR	24743	Argument	0		24715	1					
ANR	24744	PrimaryExpression	0		24715	0					
ANR	24745	ExpressionStatement	"ZVAL_LONG ( tmp , value )"	3834:1:115919:115940	24715	4	True				
ANR	24746	CallExpression	"ZVAL_LONG ( tmp , value )"		24715	0					
ANR	24747	Callee	ZVAL_LONG		24715	0					
ANR	24748	Identifier	ZVAL_LONG		24715	0					
ANR	24749	ArgumentList	tmp		24715	1					
ANR	24750	Argument	tmp		24715	0					
ANR	24751	Identifier	tmp		24715	0					
ANR	24752	Argument	value		24715	1					
ANR	24753	Identifier	value		24715	0					
ANR	24754	Statement	zend_update_property	3835:1:115943:115962	24715	5	True				
ANR	24755	Statement	(	3835:21:115963:115963	24715	6	True				
ANR	24756	Statement	scope	3835:22:115964:115968	24715	7	True				
ANR	24757	Statement	","	3835:27:115969:115969	24715	8	True				
ANR	24758	Statement	object	3835:29:115971:115976	24715	9	True				
ANR	24759	Statement	","	3835:35:115977:115977	24715	10	True				
ANR	24760	Statement	name	3835:37:115979:115982	24715	11	True				
ANR	24761	Statement	","	3835:41:115983:115983	24715	12	True				
ANR	24762	Statement	name_length	3835:43:115985:115995	24715	13	True				
ANR	24763	Statement	","	3835:54:115996:115996	24715	14	True				
ANR	24764	Statement	tmp	3835:56:115998:116000	24715	15	True				
ANR	24765	Statement	TSRMLS_CC	3835:60:116002:116010	24715	16	True				
ANR	24766	Statement	)	3835:69:116011:116011	24715	17	True				
ANR	24767	ExpressionStatement		3835:70:116012:116012	24715	18	True				
ANR	24768	ReturnType	ZEND_API void		24715	1					
ANR	24769	Identifier	zend_update_property_long		24715	2					
ANR	24770	ParameterList	"zend_class_entry * scope , zval * object , const char * name , int name_length , long value TSRMLS_DC"		24715	3					
ANR	24771	Parameter	zend_class_entry * scope	3827:40:115729:115751	24715	0	True				
ANR	24772	ParameterType	zend_class_entry *		24715	0					
ANR	24773	Identifier	scope		24715	1					
ANR	24774	Parameter	zval * object	3827:65:115754:115765	24715	1	True				
ANR	24775	ParameterType	zval *		24715	0					
ANR	24776	Identifier	object		24715	1					
ANR	24777	Parameter	const char * name	3827:79:115768:115783	24715	2	True				
ANR	24778	ParameterType	const char *		24715	0					
ANR	24779	Identifier	name		24715	1					
ANR	24780	Parameter	int name_length	3827:97:115786:115800	24715	3	True				
ANR	24781	ParameterType	int		24715	0					
ANR	24782	Identifier	name_length		24715	1					
ANR	24783	Parameter	long value TSRMLS_DC	3827:114:115803:115822	24715	4	True				
ANR	24784	ParameterType	long value		24715	0					
ANR	24785	Identifier	TSRMLS_DC		24715	1					
ANR	24786	CFGEntryNode	ENTRY		24715		True				
ANR	24787	CFGExitNode	EXIT		24715		True				
ANR	24788	Symbol	tmp		24715						
ANR	24789	Symbol	scope		24715						
ANR	24790	Symbol	name		24715						
ANR	24791	Symbol	name_length		24715						
ANR	24792	Symbol	TSRMLS_DC		24715						
ANR	24793	Symbol	value		24715						
ANR	24794	Symbol	object		24715						
ANR	24795	Function	zend_update_property_double	3839:0:116027:116358							
ANR	24796	FunctionDef	"zend_update_property_double (zend_class_entry * scope , zval * object , const char * name , int name_length , double value TSRMLS_DC)"		24795	0					
ANR	24797	CompoundStatement		3840:0:116177:116358	24795	0					
ANR	24798	IdentifierDeclStatement	zval * tmp ;	3841:1:116180:116189	24795	0	True				
ANR	24799	IdentifierDecl	* tmp		24795	0					
ANR	24800	IdentifierDeclType	zval *		24795	0					
ANR	24801	Identifier	tmp		24795	1					
ANR	24802	ExpressionStatement	ALLOC_ZVAL ( tmp )	3843:1:116193:116208	24795	1	True				
ANR	24803	CallExpression	ALLOC_ZVAL ( tmp )		24795	0					
ANR	24804	Callee	ALLOC_ZVAL		24795	0					
ANR	24805	Identifier	ALLOC_ZVAL		24795	0					
ANR	24806	ArgumentList	tmp		24795	1					
ANR	24807	Argument	tmp		24795	0					
ANR	24808	Identifier	tmp		24795	0					
ANR	24809	ExpressionStatement	Z_UNSET_ISREF_P ( tmp )	3844:1:116211:116231	24795	2	True				
ANR	24810	CallExpression	Z_UNSET_ISREF_P ( tmp )		24795	0					
ANR	24811	Callee	Z_UNSET_ISREF_P		24795	0					
ANR	24812	Identifier	Z_UNSET_ISREF_P		24795	0					
ANR	24813	ArgumentList	tmp		24795	1					
ANR	24814	Argument	tmp		24795	0					
ANR	24815	Identifier	tmp		24795	0					
ANR	24816	ExpressionStatement	"Z_SET_REFCOUNT_P ( tmp , 0 )"	3845:1:116234:116258	24795	3	True				
ANR	24817	CallExpression	"Z_SET_REFCOUNT_P ( tmp , 0 )"		24795	0					
ANR	24818	Callee	Z_SET_REFCOUNT_P		24795	0					
ANR	24819	Identifier	Z_SET_REFCOUNT_P		24795	0					
ANR	24820	ArgumentList	tmp		24795	1					
ANR	24821	Argument	tmp		24795	0					
ANR	24822	Identifier	tmp		24795	0					
ANR	24823	Argument	0		24795	1					
ANR	24824	PrimaryExpression	0		24795	0					
ANR	24825	ExpressionStatement	"ZVAL_DOUBLE ( tmp , value )"	3846:1:116261:116284	24795	4	True				
ANR	24826	CallExpression	"ZVAL_DOUBLE ( tmp , value )"		24795	0					
ANR	24827	Callee	ZVAL_DOUBLE		24795	0					
ANR	24828	Identifier	ZVAL_DOUBLE		24795	0					
ANR	24829	ArgumentList	tmp		24795	1					
ANR	24830	Argument	tmp		24795	0					
ANR	24831	Identifier	tmp		24795	0					
ANR	24832	Argument	value		24795	1					
ANR	24833	Identifier	value		24795	0					
ANR	24834	Statement	zend_update_property	3847:1:116287:116306	24795	5	True				
ANR	24835	Statement	(	3847:21:116307:116307	24795	6	True				
ANR	24836	Statement	scope	3847:22:116308:116312	24795	7	True				
ANR	24837	Statement	","	3847:27:116313:116313	24795	8	True				
ANR	24838	Statement	object	3847:29:116315:116320	24795	9	True				
ANR	24839	Statement	","	3847:35:116321:116321	24795	10	True				
ANR	24840	Statement	name	3847:37:116323:116326	24795	11	True				
ANR	24841	Statement	","	3847:41:116327:116327	24795	12	True				
ANR	24842	Statement	name_length	3847:43:116329:116339	24795	13	True				
ANR	24843	Statement	","	3847:54:116340:116340	24795	14	True				
ANR	24844	Statement	tmp	3847:56:116342:116344	24795	15	True				
ANR	24845	Statement	TSRMLS_CC	3847:60:116346:116354	24795	16	True				
ANR	24846	Statement	)	3847:69:116355:116355	24795	17	True				
ANR	24847	ExpressionStatement		3847:70:116356:116356	24795	18	True				
ANR	24848	ReturnType	ZEND_API void		24795	1					
ANR	24849	Identifier	zend_update_property_double		24795	2					
ANR	24850	ParameterList	"zend_class_entry * scope , zval * object , const char * name , int name_length , double value TSRMLS_DC"		24795	3					
ANR	24851	Parameter	zend_class_entry * scope	3839:42:116069:116091	24795	0	True				
ANR	24852	ParameterType	zend_class_entry *		24795	0					
ANR	24853	Identifier	scope		24795	1					
ANR	24854	Parameter	zval * object	3839:67:116094:116105	24795	1	True				
ANR	24855	ParameterType	zval *		24795	0					
ANR	24856	Identifier	object		24795	1					
ANR	24857	Parameter	const char * name	3839:81:116108:116123	24795	2	True				
ANR	24858	ParameterType	const char *		24795	0					
ANR	24859	Identifier	name		24795	1					
ANR	24860	Parameter	int name_length	3839:99:116126:116140	24795	3	True				
ANR	24861	ParameterType	int		24795	0					
ANR	24862	Identifier	name_length		24795	1					
ANR	24863	Parameter	double value TSRMLS_DC	3839:116:116143:116164	24795	4	True				
ANR	24864	ParameterType	double value		24795	0					
ANR	24865	Identifier	TSRMLS_DC		24795	1					
ANR	24866	CFGEntryNode	ENTRY		24795		True				
ANR	24867	CFGExitNode	EXIT		24795		True				
ANR	24868	Symbol	tmp		24795						
ANR	24869	Symbol	scope		24795						
ANR	24870	Symbol	name		24795						
ANR	24871	Symbol	name_length		24795						
ANR	24872	Symbol	TSRMLS_DC		24795						
ANR	24873	Symbol	value		24795						
ANR	24874	Symbol	object		24795						
ANR	24875	DeclStmt									
ANR	24876	Decl							zval	zval *	tmp
ANR	24877	Function	zend_update_property_stringl	3863:0:116723:117090							
ANR	24878	FunctionDef	"zend_update_property_stringl (zend_class_entry * scope , zval * object , const char * name , int name_length , const char * value , int value_len TSRMLS_DC)"		24877	0					
ANR	24879	CompoundStatement		3864:0:116894:117090	24877	0					
ANR	24880	IdentifierDeclStatement	zval * tmp ;	3865:1:116897:116906	24877	0	True				
ANR	24881	IdentifierDecl	* tmp		24877	0					
ANR	24882	IdentifierDeclType	zval *		24877	0					
ANR	24883	Identifier	tmp		24877	1					
ANR	24884	ExpressionStatement	ALLOC_ZVAL ( tmp )	3867:1:116910:116925	24877	1	True				
ANR	24885	CallExpression	ALLOC_ZVAL ( tmp )		24877	0					
ANR	24886	Callee	ALLOC_ZVAL		24877	0					
ANR	24887	Identifier	ALLOC_ZVAL		24877	0					
ANR	24888	ArgumentList	tmp		24877	1					
ANR	24889	Argument	tmp		24877	0					
ANR	24890	Identifier	tmp		24877	0					
ANR	24891	ExpressionStatement	Z_UNSET_ISREF_P ( tmp )	3868:1:116928:116948	24877	2	True				
ANR	24892	CallExpression	Z_UNSET_ISREF_P ( tmp )		24877	0					
ANR	24893	Callee	Z_UNSET_ISREF_P		24877	0					
ANR	24894	Identifier	Z_UNSET_ISREF_P		24877	0					
ANR	24895	ArgumentList	tmp		24877	1					
ANR	24896	Argument	tmp		24877	0					
ANR	24897	Identifier	tmp		24877	0					
ANR	24898	ExpressionStatement	"Z_SET_REFCOUNT_P ( tmp , 0 )"	3869:1:116951:116975	24877	3	True				
ANR	24899	CallExpression	"Z_SET_REFCOUNT_P ( tmp , 0 )"		24877	0					
ANR	24900	Callee	Z_SET_REFCOUNT_P		24877	0					
ANR	24901	Identifier	Z_SET_REFCOUNT_P		24877	0					
ANR	24902	ArgumentList	tmp		24877	1					
ANR	24903	Argument	tmp		24877	0					
ANR	24904	Identifier	tmp		24877	0					
ANR	24905	Argument	0		24877	1					
ANR	24906	PrimaryExpression	0		24877	0					
ANR	24907	ExpressionStatement	"ZVAL_STRINGL ( tmp , value , value_len , 1 )"	3870:1:116978:117016	24877	4	True				
ANR	24908	CallExpression	"ZVAL_STRINGL ( tmp , value , value_len , 1 )"		24877	0					
ANR	24909	Callee	ZVAL_STRINGL		24877	0					
ANR	24910	Identifier	ZVAL_STRINGL		24877	0					
ANR	24911	ArgumentList	tmp		24877	1					
ANR	24912	Argument	tmp		24877	0					
ANR	24913	Identifier	tmp		24877	0					
ANR	24914	Argument	value		24877	1					
ANR	24915	Identifier	value		24877	0					
ANR	24916	Argument	value_len		24877	2					
ANR	24917	Identifier	value_len		24877	0					
ANR	24918	Argument	1		24877	3					
ANR	24919	PrimaryExpression	1		24877	0					
ANR	24920	Statement	zend_update_property	3871:1:117019:117038	24877	5	True				
ANR	24921	Statement	(	3871:21:117039:117039	24877	6	True				
ANR	24922	Statement	scope	3871:22:117040:117044	24877	7	True				
ANR	24923	Statement	","	3871:27:117045:117045	24877	8	True				
ANR	24924	Statement	object	3871:29:117047:117052	24877	9	True				
ANR	24925	Statement	","	3871:35:117053:117053	24877	10	True				
ANR	24926	Statement	name	3871:37:117055:117058	24877	11	True				
ANR	24927	Statement	","	3871:41:117059:117059	24877	12	True				
ANR	24928	Statement	name_length	3871:43:117061:117071	24877	13	True				
ANR	24929	Statement	","	3871:54:117072:117072	24877	14	True				
ANR	24930	Statement	tmp	3871:56:117074:117076	24877	15	True				
ANR	24931	Statement	TSRMLS_CC	3871:60:117078:117086	24877	16	True				
ANR	24932	Statement	)	3871:69:117087:117087	24877	17	True				
ANR	24933	ExpressionStatement		3871:70:117088:117088	24877	18	True				
ANR	24934	ReturnType	ZEND_API void		24877	1					
ANR	24935	Identifier	zend_update_property_stringl		24877	2					
ANR	24936	ParameterList	"zend_class_entry * scope , zval * object , const char * name , int name_length , const char * value , int value_len TSRMLS_DC"		24877	3					
ANR	24937	Parameter	zend_class_entry * scope	3863:43:116766:116788	24877	0	True				
ANR	24938	ParameterType	zend_class_entry *		24877	0					
ANR	24939	Identifier	scope		24877	1					
ANR	24940	Parameter	zval * object	3863:68:116791:116802	24877	1	True				
ANR	24941	ParameterType	zval *		24877	0					
ANR	24942	Identifier	object		24877	1					
ANR	24943	Parameter	const char * name	3863:82:116805:116820	24877	2	True				
ANR	24944	ParameterType	const char *		24877	0					
ANR	24945	Identifier	name		24877	1					
ANR	24946	Parameter	int name_length	3863:100:116823:116837	24877	3	True				
ANR	24947	ParameterType	int		24877	0					
ANR	24948	Identifier	name_length		24877	1					
ANR	24949	Parameter	const char * value	3863:117:116840:116856	24877	4	True				
ANR	24950	ParameterType	const char *		24877	0					
ANR	24951	Identifier	value		24877	1					
ANR	24952	Parameter	int value_len TSRMLS_DC	3863:136:116859:116881	24877	5	True				
ANR	24953	ParameterType	int value_len		24877	0					
ANR	24954	Identifier	TSRMLS_DC		24877	1					
ANR	24955	CFGEntryNode	ENTRY		24877		True				
ANR	24956	CFGExitNode	EXIT		24877		True				
ANR	24957	Symbol	tmp		24877						
ANR	24958	Symbol	value_len		24877						
ANR	24959	Symbol	scope		24877						
ANR	24960	Symbol	name		24877						
ANR	24961	Symbol	name_length		24877						
ANR	24962	Symbol	value		24877						
ANR	24963	Symbol	TSRMLS_DC		24877						
ANR	24964	Symbol	object		24877						
ANR	24965	DeclStmt									
ANR	24966	Decl							zval	zval * *	property
ANR	24967	DeclStmt									
ANR	24968	Decl							zend_class_entry	zend_class_entry *	old_scope
ANR	24969	DeclStmt									
ANR	24970	Decl							zval	zval *	garbage
ANR	24971	Function	zend_update_static_property_null	3912:0:117979:118283							
ANR	24972	FunctionDef	"zend_update_static_property_null (zend_class_entry * scope , const char * name , int name_length TSRMLS_DC)"		24971	0					
ANR	24973	CompoundStatement		3913:0:118105:118283	24971	0					
ANR	24974	IdentifierDeclStatement	zval * tmp ;	3914:1:118108:118117	24971	0	True				
ANR	24975	IdentifierDecl	* tmp		24971	0					
ANR	24976	IdentifierDeclType	zval *		24971	0					
ANR	24977	Identifier	tmp		24971	1					
ANR	24978	ExpressionStatement	ALLOC_ZVAL ( tmp )	3916:1:118121:118136	24971	1	True				
ANR	24979	CallExpression	ALLOC_ZVAL ( tmp )		24971	0					
ANR	24980	Callee	ALLOC_ZVAL		24971	0					
ANR	24981	Identifier	ALLOC_ZVAL		24971	0					
ANR	24982	ArgumentList	tmp		24971	1					
ANR	24983	Argument	tmp		24971	0					
ANR	24984	Identifier	tmp		24971	0					
ANR	24985	ExpressionStatement	Z_UNSET_ISREF_P ( tmp )	3917:1:118139:118159	24971	2	True				
ANR	24986	CallExpression	Z_UNSET_ISREF_P ( tmp )		24971	0					
ANR	24987	Callee	Z_UNSET_ISREF_P		24971	0					
ANR	24988	Identifier	Z_UNSET_ISREF_P		24971	0					
ANR	24989	ArgumentList	tmp		24971	1					
ANR	24990	Argument	tmp		24971	0					
ANR	24991	Identifier	tmp		24971	0					
ANR	24992	ExpressionStatement	"Z_SET_REFCOUNT_P ( tmp , 0 )"	3918:1:118162:118186	24971	3	True				
ANR	24993	CallExpression	"Z_SET_REFCOUNT_P ( tmp , 0 )"		24971	0					
ANR	24994	Callee	Z_SET_REFCOUNT_P		24971	0					
ANR	24995	Identifier	Z_SET_REFCOUNT_P		24971	0					
ANR	24996	ArgumentList	tmp		24971	1					
ANR	24997	Argument	tmp		24971	0					
ANR	24998	Identifier	tmp		24971	0					
ANR	24999	Argument	0		24971	1					
ANR	25000	PrimaryExpression	0		24971	0					
ANR	25001	ExpressionStatement	ZVAL_NULL ( tmp )	3919:1:118189:118203	24971	4	True				
ANR	25002	CallExpression	ZVAL_NULL ( tmp )		24971	0					
ANR	25003	Callee	ZVAL_NULL		24971	0					
ANR	25004	Identifier	ZVAL_NULL		24971	0					
ANR	25005	ArgumentList	tmp		24971	1					
ANR	25006	Argument	tmp		24971	0					
ANR	25007	Identifier	tmp		24971	0					
ANR	25008	Statement	return	3920:1:118206:118211	24971	5	True				
ANR	25009	Statement	zend_update_static_property	3920:8:118213:118239	24971	6	True				
ANR	25010	Statement	(	3920:35:118240:118240	24971	7	True				
ANR	25011	Statement	scope	3920:36:118241:118245	24971	8	True				
ANR	25012	Statement	","	3920:41:118246:118246	24971	9	True				
ANR	25013	Statement	name	3920:43:118248:118251	24971	10	True				
ANR	25014	Statement	","	3920:47:118252:118252	24971	11	True				
ANR	25015	Statement	name_length	3920:49:118254:118264	24971	12	True				
ANR	25016	Statement	","	3920:60:118265:118265	24971	13	True				
ANR	25017	Statement	tmp	3920:62:118267:118269	24971	14	True				
ANR	25018	Statement	TSRMLS_CC	3920:66:118271:118279	24971	15	True				
ANR	25019	Statement	)	3920:75:118280:118280	24971	16	True				
ANR	25020	ExpressionStatement		3920:76:118281:118281	24971	17	True				
ANR	25021	ReturnType	ZEND_API int		24971	1					
ANR	25022	Identifier	zend_update_static_property_null		24971	2					
ANR	25023	ParameterList	"zend_class_entry * scope , const char * name , int name_length TSRMLS_DC"		24971	3					
ANR	25024	Parameter	zend_class_entry * scope	3912:46:118025:118047	24971	0	True				
ANR	25025	ParameterType	zend_class_entry *		24971	0					
ANR	25026	Identifier	scope		24971	1					
ANR	25027	Parameter	const char * name	3912:71:118050:118065	24971	1	True				
ANR	25028	ParameterType	const char *		24971	0					
ANR	25029	Identifier	name		24971	1					
ANR	25030	Parameter	int name_length TSRMLS_DC	3912:89:118068:118092	24971	2	True				
ANR	25031	ParameterType	int name_length		24971	0					
ANR	25032	Identifier	TSRMLS_DC		24971	1					
ANR	25033	CFGEntryNode	ENTRY		24971		True				
ANR	25034	CFGExitNode	EXIT		24971		True				
ANR	25035	Symbol	tmp		24971						
ANR	25036	Symbol	scope		24971						
ANR	25037	Symbol	name		24971						
ANR	25038	Symbol	TSRMLS_DC		24971						
ANR	25039	Function	zend_update_static_property_bool	3924:0:118296:118619							
ANR	25040	FunctionDef	"zend_update_static_property_bool (zend_class_entry * scope , const char * name , int name_length , long value TSRMLS_DC)"		25039	0					
ANR	25041	CompoundStatement		3925:0:118434:118619	25039	0					
ANR	25042	IdentifierDeclStatement	zval * tmp ;	3926:1:118437:118446	25039	0	True				
ANR	25043	IdentifierDecl	* tmp		25039	0					
ANR	25044	IdentifierDeclType	zval *		25039	0					
ANR	25045	Identifier	tmp		25039	1					
ANR	25046	ExpressionStatement	ALLOC_ZVAL ( tmp )	3928:1:118450:118465	25039	1	True				
ANR	25047	CallExpression	ALLOC_ZVAL ( tmp )		25039	0					
ANR	25048	Callee	ALLOC_ZVAL		25039	0					
ANR	25049	Identifier	ALLOC_ZVAL		25039	0					
ANR	25050	ArgumentList	tmp		25039	1					
ANR	25051	Argument	tmp		25039	0					
ANR	25052	Identifier	tmp		25039	0					
ANR	25053	ExpressionStatement	Z_UNSET_ISREF_P ( tmp )	3929:1:118468:118488	25039	2	True				
ANR	25054	CallExpression	Z_UNSET_ISREF_P ( tmp )		25039	0					
ANR	25055	Callee	Z_UNSET_ISREF_P		25039	0					
ANR	25056	Identifier	Z_UNSET_ISREF_P		25039	0					
ANR	25057	ArgumentList	tmp		25039	1					
ANR	25058	Argument	tmp		25039	0					
ANR	25059	Identifier	tmp		25039	0					
ANR	25060	ExpressionStatement	"Z_SET_REFCOUNT_P ( tmp , 0 )"	3930:1:118491:118515	25039	3	True				
ANR	25061	CallExpression	"Z_SET_REFCOUNT_P ( tmp , 0 )"		25039	0					
ANR	25062	Callee	Z_SET_REFCOUNT_P		25039	0					
ANR	25063	Identifier	Z_SET_REFCOUNT_P		25039	0					
ANR	25064	ArgumentList	tmp		25039	1					
ANR	25065	Argument	tmp		25039	0					
ANR	25066	Identifier	tmp		25039	0					
ANR	25067	Argument	0		25039	1					
ANR	25068	PrimaryExpression	0		25039	0					
ANR	25069	ExpressionStatement	"ZVAL_BOOL ( tmp , value )"	3931:1:118518:118539	25039	4	True				
ANR	25070	CallExpression	"ZVAL_BOOL ( tmp , value )"		25039	0					
ANR	25071	Callee	ZVAL_BOOL		25039	0					
ANR	25072	Identifier	ZVAL_BOOL		25039	0					
ANR	25073	ArgumentList	tmp		25039	1					
ANR	25074	Argument	tmp		25039	0					
ANR	25075	Identifier	tmp		25039	0					
ANR	25076	Argument	value		25039	1					
ANR	25077	Identifier	value		25039	0					
ANR	25078	Statement	return	3932:1:118542:118547	25039	5	True				
ANR	25079	Statement	zend_update_static_property	3932:8:118549:118575	25039	6	True				
ANR	25080	Statement	(	3932:35:118576:118576	25039	7	True				
ANR	25081	Statement	scope	3932:36:118577:118581	25039	8	True				
ANR	25082	Statement	","	3932:41:118582:118582	25039	9	True				
ANR	25083	Statement	name	3932:43:118584:118587	25039	10	True				
ANR	25084	Statement	","	3932:47:118588:118588	25039	11	True				
ANR	25085	Statement	name_length	3932:49:118590:118600	25039	12	True				
ANR	25086	Statement	","	3932:60:118601:118601	25039	13	True				
ANR	25087	Statement	tmp	3932:62:118603:118605	25039	14	True				
ANR	25088	Statement	TSRMLS_CC	3932:66:118607:118615	25039	15	True				
ANR	25089	Statement	)	3932:75:118616:118616	25039	16	True				
ANR	25090	ExpressionStatement		3932:76:118617:118617	25039	17	True				
ANR	25091	ReturnType	ZEND_API int		25039	1					
ANR	25092	Identifier	zend_update_static_property_bool		25039	2					
ANR	25093	ParameterList	"zend_class_entry * scope , const char * name , int name_length , long value TSRMLS_DC"		25039	3					
ANR	25094	Parameter	zend_class_entry * scope	3924:46:118342:118364	25039	0	True				
ANR	25095	ParameterType	zend_class_entry *		25039	0					
ANR	25096	Identifier	scope		25039	1					
ANR	25097	Parameter	const char * name	3924:71:118367:118382	25039	1	True				
ANR	25098	ParameterType	const char *		25039	0					
ANR	25099	Identifier	name		25039	1					
ANR	25100	Parameter	int name_length	3924:89:118385:118399	25039	2	True				
ANR	25101	ParameterType	int		25039	0					
ANR	25102	Identifier	name_length		25039	1					
ANR	25103	Parameter	long value TSRMLS_DC	3924:106:118402:118421	25039	3	True				
ANR	25104	ParameterType	long value		25039	0					
ANR	25105	Identifier	TSRMLS_DC		25039	1					
ANR	25106	CFGEntryNode	ENTRY		25039		True				
ANR	25107	CFGExitNode	EXIT		25039		True				
ANR	25108	Symbol	tmp		25039						
ANR	25109	Symbol	scope		25039						
ANR	25110	Symbol	name		25039						
ANR	25111	Symbol	name_length		25039						
ANR	25112	Symbol	TSRMLS_DC		25039						
ANR	25113	Symbol	value		25039						
ANR	25114	Function	zend_update_static_property_long	3936:0:118632:118955							
ANR	25115	FunctionDef	"zend_update_static_property_long (zend_class_entry * scope , const char * name , int name_length , long value TSRMLS_DC)"		25114	0					
ANR	25116	CompoundStatement		3937:0:118770:118955	25114	0					
ANR	25117	IdentifierDeclStatement	zval * tmp ;	3938:1:118773:118782	25114	0	True				
ANR	25118	IdentifierDecl	* tmp		25114	0					
ANR	25119	IdentifierDeclType	zval *		25114	0					
ANR	25120	Identifier	tmp		25114	1					
ANR	25121	ExpressionStatement	ALLOC_ZVAL ( tmp )	3940:1:118786:118801	25114	1	True				
ANR	25122	CallExpression	ALLOC_ZVAL ( tmp )		25114	0					
ANR	25123	Callee	ALLOC_ZVAL		25114	0					
ANR	25124	Identifier	ALLOC_ZVAL		25114	0					
ANR	25125	ArgumentList	tmp		25114	1					
ANR	25126	Argument	tmp		25114	0					
ANR	25127	Identifier	tmp		25114	0					
ANR	25128	ExpressionStatement	Z_UNSET_ISREF_P ( tmp )	3941:1:118804:118824	25114	2	True				
ANR	25129	CallExpression	Z_UNSET_ISREF_P ( tmp )		25114	0					
ANR	25130	Callee	Z_UNSET_ISREF_P		25114	0					
ANR	25131	Identifier	Z_UNSET_ISREF_P		25114	0					
ANR	25132	ArgumentList	tmp		25114	1					
ANR	25133	Argument	tmp		25114	0					
ANR	25134	Identifier	tmp		25114	0					
ANR	25135	ExpressionStatement	"Z_SET_REFCOUNT_P ( tmp , 0 )"	3942:1:118827:118851	25114	3	True				
ANR	25136	CallExpression	"Z_SET_REFCOUNT_P ( tmp , 0 )"		25114	0					
ANR	25137	Callee	Z_SET_REFCOUNT_P		25114	0					
ANR	25138	Identifier	Z_SET_REFCOUNT_P		25114	0					
ANR	25139	ArgumentList	tmp		25114	1					
ANR	25140	Argument	tmp		25114	0					
ANR	25141	Identifier	tmp		25114	0					
ANR	25142	Argument	0		25114	1					
ANR	25143	PrimaryExpression	0		25114	0					
ANR	25144	ExpressionStatement	"ZVAL_LONG ( tmp , value )"	3943:1:118854:118875	25114	4	True				
ANR	25145	CallExpression	"ZVAL_LONG ( tmp , value )"		25114	0					
ANR	25146	Callee	ZVAL_LONG		25114	0					
ANR	25147	Identifier	ZVAL_LONG		25114	0					
ANR	25148	ArgumentList	tmp		25114	1					
ANR	25149	Argument	tmp		25114	0					
ANR	25150	Identifier	tmp		25114	0					
ANR	25151	Argument	value		25114	1					
ANR	25152	Identifier	value		25114	0					
ANR	25153	Statement	return	3944:1:118878:118883	25114	5	True				
ANR	25154	Statement	zend_update_static_property	3944:8:118885:118911	25114	6	True				
ANR	25155	Statement	(	3944:35:118912:118912	25114	7	True				
ANR	25156	Statement	scope	3944:36:118913:118917	25114	8	True				
ANR	25157	Statement	","	3944:41:118918:118918	25114	9	True				
ANR	25158	Statement	name	3944:43:118920:118923	25114	10	True				
ANR	25159	Statement	","	3944:47:118924:118924	25114	11	True				
ANR	25160	Statement	name_length	3944:49:118926:118936	25114	12	True				
ANR	25161	Statement	","	3944:60:118937:118937	25114	13	True				
ANR	25162	Statement	tmp	3944:62:118939:118941	25114	14	True				
ANR	25163	Statement	TSRMLS_CC	3944:66:118943:118951	25114	15	True				
ANR	25164	Statement	)	3944:75:118952:118952	25114	16	True				
ANR	25165	ExpressionStatement		3944:76:118953:118953	25114	17	True				
ANR	25166	ReturnType	ZEND_API int		25114	1					
ANR	25167	Identifier	zend_update_static_property_long		25114	2					
ANR	25168	ParameterList	"zend_class_entry * scope , const char * name , int name_length , long value TSRMLS_DC"		25114	3					
ANR	25169	Parameter	zend_class_entry * scope	3936:46:118678:118700	25114	0	True				
ANR	25170	ParameterType	zend_class_entry *		25114	0					
ANR	25171	Identifier	scope		25114	1					
ANR	25172	Parameter	const char * name	3936:71:118703:118718	25114	1	True				
ANR	25173	ParameterType	const char *		25114	0					
ANR	25174	Identifier	name		25114	1					
ANR	25175	Parameter	int name_length	3936:89:118721:118735	25114	2	True				
ANR	25176	ParameterType	int		25114	0					
ANR	25177	Identifier	name_length		25114	1					
ANR	25178	Parameter	long value TSRMLS_DC	3936:106:118738:118757	25114	3	True				
ANR	25179	ParameterType	long value		25114	0					
ANR	25180	Identifier	TSRMLS_DC		25114	1					
ANR	25181	CFGEntryNode	ENTRY		25114		True				
ANR	25182	CFGExitNode	EXIT		25114		True				
ANR	25183	Symbol	tmp		25114						
ANR	25184	Symbol	scope		25114						
ANR	25185	Symbol	name		25114						
ANR	25186	Symbol	name_length		25114						
ANR	25187	Symbol	TSRMLS_DC		25114						
ANR	25188	Symbol	value		25114						
ANR	25189	Function	zend_update_static_property_double	3948:0:118968:119297							
ANR	25190	FunctionDef	"zend_update_static_property_double (zend_class_entry * scope , const char * name , int name_length , double value TSRMLS_DC)"		25189	0					
ANR	25191	CompoundStatement		3949:0:119110:119297	25189	0					
ANR	25192	IdentifierDeclStatement	zval * tmp ;	3950:1:119113:119122	25189	0	True				
ANR	25193	IdentifierDecl	* tmp		25189	0					
ANR	25194	IdentifierDeclType	zval *		25189	0					
ANR	25195	Identifier	tmp		25189	1					
ANR	25196	ExpressionStatement	ALLOC_ZVAL ( tmp )	3952:1:119126:119141	25189	1	True				
ANR	25197	CallExpression	ALLOC_ZVAL ( tmp )		25189	0					
ANR	25198	Callee	ALLOC_ZVAL		25189	0					
ANR	25199	Identifier	ALLOC_ZVAL		25189	0					
ANR	25200	ArgumentList	tmp		25189	1					
ANR	25201	Argument	tmp		25189	0					
ANR	25202	Identifier	tmp		25189	0					
ANR	25203	ExpressionStatement	Z_UNSET_ISREF_P ( tmp )	3953:1:119144:119164	25189	2	True				
ANR	25204	CallExpression	Z_UNSET_ISREF_P ( tmp )		25189	0					
ANR	25205	Callee	Z_UNSET_ISREF_P		25189	0					
ANR	25206	Identifier	Z_UNSET_ISREF_P		25189	0					
ANR	25207	ArgumentList	tmp		25189	1					
ANR	25208	Argument	tmp		25189	0					
ANR	25209	Identifier	tmp		25189	0					
ANR	25210	ExpressionStatement	"Z_SET_REFCOUNT_P ( tmp , 0 )"	3954:1:119167:119191	25189	3	True				
ANR	25211	CallExpression	"Z_SET_REFCOUNT_P ( tmp , 0 )"		25189	0					
ANR	25212	Callee	Z_SET_REFCOUNT_P		25189	0					
ANR	25213	Identifier	Z_SET_REFCOUNT_P		25189	0					
ANR	25214	ArgumentList	tmp		25189	1					
ANR	25215	Argument	tmp		25189	0					
ANR	25216	Identifier	tmp		25189	0					
ANR	25217	Argument	0		25189	1					
ANR	25218	PrimaryExpression	0		25189	0					
ANR	25219	ExpressionStatement	"ZVAL_DOUBLE ( tmp , value )"	3955:1:119194:119217	25189	4	True				
ANR	25220	CallExpression	"ZVAL_DOUBLE ( tmp , value )"		25189	0					
ANR	25221	Callee	ZVAL_DOUBLE		25189	0					
ANR	25222	Identifier	ZVAL_DOUBLE		25189	0					
ANR	25223	ArgumentList	tmp		25189	1					
ANR	25224	Argument	tmp		25189	0					
ANR	25225	Identifier	tmp		25189	0					
ANR	25226	Argument	value		25189	1					
ANR	25227	Identifier	value		25189	0					
ANR	25228	Statement	return	3956:1:119220:119225	25189	5	True				
ANR	25229	Statement	zend_update_static_property	3956:8:119227:119253	25189	6	True				
ANR	25230	Statement	(	3956:35:119254:119254	25189	7	True				
ANR	25231	Statement	scope	3956:36:119255:119259	25189	8	True				
ANR	25232	Statement	","	3956:41:119260:119260	25189	9	True				
ANR	25233	Statement	name	3956:43:119262:119265	25189	10	True				
ANR	25234	Statement	","	3956:47:119266:119266	25189	11	True				
ANR	25235	Statement	name_length	3956:49:119268:119278	25189	12	True				
ANR	25236	Statement	","	3956:60:119279:119279	25189	13	True				
ANR	25237	Statement	tmp	3956:62:119281:119283	25189	14	True				
ANR	25238	Statement	TSRMLS_CC	3956:66:119285:119293	25189	15	True				
ANR	25239	Statement	)	3956:75:119294:119294	25189	16	True				
ANR	25240	ExpressionStatement		3956:76:119295:119295	25189	17	True				
ANR	25241	ReturnType	ZEND_API int		25189	1					
ANR	25242	Identifier	zend_update_static_property_double		25189	2					
ANR	25243	ParameterList	"zend_class_entry * scope , const char * name , int name_length , double value TSRMLS_DC"		25189	3					
ANR	25244	Parameter	zend_class_entry * scope	3948:48:119016:119038	25189	0	True				
ANR	25245	ParameterType	zend_class_entry *		25189	0					
ANR	25246	Identifier	scope		25189	1					
ANR	25247	Parameter	const char * name	3948:73:119041:119056	25189	1	True				
ANR	25248	ParameterType	const char *		25189	0					
ANR	25249	Identifier	name		25189	1					
ANR	25250	Parameter	int name_length	3948:91:119059:119073	25189	2	True				
ANR	25251	ParameterType	int		25189	0					
ANR	25252	Identifier	name_length		25189	1					
ANR	25253	Parameter	double value TSRMLS_DC	3948:108:119076:119097	25189	3	True				
ANR	25254	ParameterType	double value		25189	0					
ANR	25255	Identifier	TSRMLS_DC		25189	1					
ANR	25256	CFGEntryNode	ENTRY		25189		True				
ANR	25257	CFGExitNode	EXIT		25189		True				
ANR	25258	Symbol	tmp		25189						
ANR	25259	Symbol	scope		25189						
ANR	25260	Symbol	name		25189						
ANR	25261	Symbol	name_length		25189						
ANR	25262	Symbol	TSRMLS_DC		25189						
ANR	25263	Symbol	value		25189						
ANR	25264	DeclStmt									
ANR	25265	Decl							zval	zval *	tmp
ANR	25266	Function	zend_update_static_property_stringl	3972:0:119660:120025							
ANR	25267	FunctionDef	"zend_update_static_property_stringl (zend_class_entry * scope , const char * name , int name_length , const char * value , int value_len TSRMLS_DC)"		25266	0					
ANR	25268	CompoundStatement		3973:0:119823:120025	25266	0					
ANR	25269	IdentifierDeclStatement	zval * tmp ;	3974:1:119826:119835	25266	0	True				
ANR	25270	IdentifierDecl	* tmp		25266	0					
ANR	25271	IdentifierDeclType	zval *		25266	0					
ANR	25272	Identifier	tmp		25266	1					
ANR	25273	ExpressionStatement	ALLOC_ZVAL ( tmp )	3976:1:119839:119854	25266	1	True				
ANR	25274	CallExpression	ALLOC_ZVAL ( tmp )		25266	0					
ANR	25275	Callee	ALLOC_ZVAL		25266	0					
ANR	25276	Identifier	ALLOC_ZVAL		25266	0					
ANR	25277	ArgumentList	tmp		25266	1					
ANR	25278	Argument	tmp		25266	0					
ANR	25279	Identifier	tmp		25266	0					
ANR	25280	ExpressionStatement	Z_UNSET_ISREF_P ( tmp )	3977:1:119857:119877	25266	2	True				
ANR	25281	CallExpression	Z_UNSET_ISREF_P ( tmp )		25266	0					
ANR	25282	Callee	Z_UNSET_ISREF_P		25266	0					
ANR	25283	Identifier	Z_UNSET_ISREF_P		25266	0					
ANR	25284	ArgumentList	tmp		25266	1					
ANR	25285	Argument	tmp		25266	0					
ANR	25286	Identifier	tmp		25266	0					
ANR	25287	ExpressionStatement	"Z_SET_REFCOUNT_P ( tmp , 0 )"	3978:1:119880:119904	25266	3	True				
ANR	25288	CallExpression	"Z_SET_REFCOUNT_P ( tmp , 0 )"		25266	0					
ANR	25289	Callee	Z_SET_REFCOUNT_P		25266	0					
ANR	25290	Identifier	Z_SET_REFCOUNT_P		25266	0					
ANR	25291	ArgumentList	tmp		25266	1					
ANR	25292	Argument	tmp		25266	0					
ANR	25293	Identifier	tmp		25266	0					
ANR	25294	Argument	0		25266	1					
ANR	25295	PrimaryExpression	0		25266	0					
ANR	25296	ExpressionStatement	"ZVAL_STRINGL ( tmp , value , value_len , 1 )"	3979:1:119907:119945	25266	4	True				
ANR	25297	CallExpression	"ZVAL_STRINGL ( tmp , value , value_len , 1 )"		25266	0					
ANR	25298	Callee	ZVAL_STRINGL		25266	0					
ANR	25299	Identifier	ZVAL_STRINGL		25266	0					
ANR	25300	ArgumentList	tmp		25266	1					
ANR	25301	Argument	tmp		25266	0					
ANR	25302	Identifier	tmp		25266	0					
ANR	25303	Argument	value		25266	1					
ANR	25304	Identifier	value		25266	0					
ANR	25305	Argument	value_len		25266	2					
ANR	25306	Identifier	value_len		25266	0					
ANR	25307	Argument	1		25266	3					
ANR	25308	PrimaryExpression	1		25266	0					
ANR	25309	Statement	return	3980:1:119948:119953	25266	5	True				
ANR	25310	Statement	zend_update_static_property	3980:8:119955:119981	25266	6	True				
ANR	25311	Statement	(	3980:35:119982:119982	25266	7	True				
ANR	25312	Statement	scope	3980:36:119983:119987	25266	8	True				
ANR	25313	Statement	","	3980:41:119988:119988	25266	9	True				
ANR	25314	Statement	name	3980:43:119990:119993	25266	10	True				
ANR	25315	Statement	","	3980:47:119994:119994	25266	11	True				
ANR	25316	Statement	name_length	3980:49:119996:120006	25266	12	True				
ANR	25317	Statement	","	3980:60:120007:120007	25266	13	True				
ANR	25318	Statement	tmp	3980:62:120009:120011	25266	14	True				
ANR	25319	Statement	TSRMLS_CC	3980:66:120013:120021	25266	15	True				
ANR	25320	Statement	)	3980:75:120022:120022	25266	16	True				
ANR	25321	ExpressionStatement		3980:76:120023:120023	25266	17	True				
ANR	25322	ReturnType	ZEND_API int		25266	1					
ANR	25323	Identifier	zend_update_static_property_stringl		25266	2					
ANR	25324	ParameterList	"zend_class_entry * scope , const char * name , int name_length , const char * value , int value_len TSRMLS_DC"		25266	3					
ANR	25325	Parameter	zend_class_entry * scope	3972:49:119709:119731	25266	0	True				
ANR	25326	ParameterType	zend_class_entry *		25266	0					
ANR	25327	Identifier	scope		25266	1					
ANR	25328	Parameter	const char * name	3972:74:119734:119749	25266	1	True				
ANR	25329	ParameterType	const char *		25266	0					
ANR	25330	Identifier	name		25266	1					
ANR	25331	Parameter	int name_length	3972:92:119752:119766	25266	2	True				
ANR	25332	ParameterType	int		25266	0					
ANR	25333	Identifier	name_length		25266	1					
ANR	25334	Parameter	const char * value	3972:109:119769:119785	25266	3	True				
ANR	25335	ParameterType	const char *		25266	0					
ANR	25336	Identifier	value		25266	1					
ANR	25337	Parameter	int value_len TSRMLS_DC	3972:128:119788:119810	25266	4	True				
ANR	25338	ParameterType	int value_len		25266	0					
ANR	25339	Identifier	TSRMLS_DC		25266	1					
ANR	25340	CFGEntryNode	ENTRY		25266		True				
ANR	25341	CFGExitNode	EXIT		25266		True				
ANR	25342	Symbol	tmp		25266						
ANR	25343	Symbol	value_len		25266						
ANR	25344	Symbol	scope		25266						
ANR	25345	Symbol	name		25266						
ANR	25346	Symbol	name_length		25266						
ANR	25347	Symbol	value		25266						
ANR	25348	Symbol	TSRMLS_DC		25266						
ANR	25349	Function	zend_read_property	3984:0:120038:120784							
ANR	25350	FunctionDef	"zend_read_property (zend_class_entry * scope , zval * object , const char * name , int name_length , zend_bool silent TSRMLS_DC)"		25349	0					
ANR	25351	CompoundStatement		3985:0:120184:120784	25349	0					
ANR	25352	IdentifierDeclStatement	"zval * property , * value ;"	3986:1:120187:120209	25349	0	True				
ANR	25353	IdentifierDecl	* property		25349	0					
ANR	25354	IdentifierDeclType	zval *		25349	0					
ANR	25355	Identifier	property		25349	1					
ANR	25356	IdentifierDecl	* value		25349	1					
ANR	25357	IdentifierDeclType	zval *		25349	0					
ANR	25358	Identifier	value		25349	1					
ANR	25359	IdentifierDeclStatement	zend_class_entry * old_scope = EG ( scope ) ;	3987:1:120212:120251	25349	1	True				
ANR	25360	IdentifierDecl	* old_scope = EG ( scope )		25349	0					
ANR	25361	IdentifierDeclType	zend_class_entry *		25349	0					
ANR	25362	Identifier	old_scope		25349	1					
ANR	25363	AssignmentExpression	* old_scope = EG ( scope )		25349	2		=			
ANR	25364	Identifier	old_scope		25349	0					
ANR	25365	CallExpression	EG ( scope )		25349	1					
ANR	25366	Callee	EG		25349	0					
ANR	25367	Identifier	EG		25349	0					
ANR	25368	ArgumentList	scope		25349	1					
ANR	25369	Argument	scope		25349	0					
ANR	25370	Identifier	scope		25349	0					
ANR	25371	ExpressionStatement	EG ( scope ) = scope	3989:1:120255:120272	25349	2	True				
ANR	25372	AssignmentExpression	EG ( scope ) = scope		25349	0		=			
ANR	25373	CallExpression	EG ( scope )		25349	0					
ANR	25374	Callee	EG		25349	0					
ANR	25375	Identifier	EG		25349	0					
ANR	25376	ArgumentList	scope		25349	1					
ANR	25377	Argument	scope		25349	0					
ANR	25378	Identifier	scope		25349	0					
ANR	25379	Identifier	scope		25349	1					
ANR	25380	IfStatement	if ( ! Z_OBJ_HT_P ( object ) -> read_property )		25349	3					
ANR	25381	Condition	! Z_OBJ_HT_P ( object ) -> read_property	3991:5:120280:120313	25349	0	True				
ANR	25382	UnaryOperationExpression	! Z_OBJ_HT_P ( object ) -> read_property		25349	0					
ANR	25383	UnaryOperator	!		25349	0					
ANR	25384	PtrMemberAccess	Z_OBJ_HT_P ( object ) -> read_property		25349	1					
ANR	25385	CallExpression	Z_OBJ_HT_P ( object )		25349	0					
ANR	25386	Callee	Z_OBJ_HT_P		25349	0					
ANR	25387	Identifier	Z_OBJ_HT_P		25349	0					
ANR	25388	ArgumentList	object		25349	1					
ANR	25389	Argument	object		25349	0					
ANR	25390	Identifier	object		25349	0					
ANR	25391	Identifier	read_property		25349	1					
ANR	25392	CompoundStatement		9:2:161:185	25349	1					
ANR	25393	IdentifierDeclStatement	const char * class_name ;	3992:2:120320:120342	25349	0	True				
ANR	25394	IdentifierDecl	* class_name		25349	0					
ANR	25395	IdentifierDeclType	const char *		25349	0					
ANR	25396	Identifier	class_name		25349	1					
ANR	25397	IdentifierDeclStatement	zend_uint class_name_len ;	3993:2:120346:120370	25349	1	True				
ANR	25398	IdentifierDecl	class_name_len		25349	0					
ANR	25399	IdentifierDeclType	zend_uint		25349	0					
ANR	25400	Identifier	class_name_len		25349	1					
ANR	25401	Statement	zend_get_object_classname	3995:2:120375:120399	25349	2	True				
ANR	25402	Statement	(	3995:27:120400:120400	25349	3	True				
ANR	25403	Statement	object	3995:28:120401:120406	25349	4	True				
ANR	25404	Statement	","	3995:34:120407:120407	25349	5	True				
ANR	25405	Statement	&	3995:36:120409:120409	25349	6	True				
ANR	25406	Statement	class_name	3995:37:120410:120419	25349	7	True				
ANR	25407	Statement	","	3995:47:120420:120420	25349	8	True				
ANR	25408	Statement	&	3995:49:120422:120422	25349	9	True				
ANR	25409	Statement	class_name_len	3995:50:120423:120436	25349	10	True				
ANR	25410	Statement	TSRMLS_CC	3995:65:120438:120446	25349	11	True				
ANR	25411	Statement	)	3995:74:120447:120447	25349	12	True				
ANR	25412	ExpressionStatement		3995:75:120448:120448	25349	13	True				
ANR	25413	ExpressionStatement	"zend_error ( E_CORE_ERROR , ""Property %s of class %s cannot be read"" , name , class_name )"	3996:2:120452:120536	25349	14	True				
ANR	25414	CallExpression	"zend_error ( E_CORE_ERROR , ""Property %s of class %s cannot be read"" , name , class_name )"		25349	0					
ANR	25415	Callee	zend_error		25349	0					
ANR	25416	Identifier	zend_error		25349	0					
ANR	25417	ArgumentList	E_CORE_ERROR		25349	1					
ANR	25418	Argument	E_CORE_ERROR		25349	0					
ANR	25419	Identifier	E_CORE_ERROR		25349	0					
ANR	25420	Argument	"""Property %s of class %s cannot be read"""		25349	1					
ANR	25421	PrimaryExpression	"""Property %s of class %s cannot be read"""		25349	0					
ANR	25422	Argument	name		25349	2					
ANR	25423	Identifier	name		25349	0					
ANR	25424	Argument	class_name		25349	3					
ANR	25425	Identifier	class_name		25349	0					
ANR	25426	ExpressionStatement	MAKE_STD_ZVAL ( property )	3999:1:120543:120566	25349	4	True				
ANR	25427	CallExpression	MAKE_STD_ZVAL ( property )		25349	0					
ANR	25428	Callee	MAKE_STD_ZVAL		25349	0					
ANR	25429	Identifier	MAKE_STD_ZVAL		25349	0					
ANR	25430	ArgumentList	property		25349	1					
ANR	25431	Argument	property		25349	0					
ANR	25432	Identifier	property		25349	0					
ANR	25433	ExpressionStatement	"ZVAL_STRINGL ( property , name , name_length , 1 )"	4000:1:120569:120613	25349	5	True				
ANR	25434	CallExpression	"ZVAL_STRINGL ( property , name , name_length , 1 )"		25349	0					
ANR	25435	Callee	ZVAL_STRINGL		25349	0					
ANR	25436	Identifier	ZVAL_STRINGL		25349	0					
ANR	25437	ArgumentList	property		25349	1					
ANR	25438	Argument	property		25349	0					
ANR	25439	Identifier	property		25349	0					
ANR	25440	Argument	name		25349	1					
ANR	25441	Identifier	name		25349	0					
ANR	25442	Argument	name_length		25349	2					
ANR	25443	Identifier	name_length		25349	0					
ANR	25444	Argument	1		25349	3					
ANR	25445	PrimaryExpression	1		25349	0					
ANR	25446	Statement	value	4001:1:120616:120620	25349	6	True				
ANR	25447	Statement	=	4001:7:120622:120622	25349	7	True				
ANR	25448	Statement	Z_OBJ_HT_P	4001:9:120624:120633	25349	8	True				
ANR	25449	Statement	(	4001:19:120634:120634	25349	9	True				
ANR	25450	Statement	object	4001:20:120635:120640	25349	10	True				
ANR	25451	Statement	)	4001:26:120641:120641	25349	11	True				
ANR	25452	Statement	->	4001:27:120642:120643	25349	12	True				
ANR	25453	Statement	read_property	4001:29:120644:120656	25349	13	True				
ANR	25454	Statement	(	4001:42:120657:120657	25349	14	True				
ANR	25455	Statement	object	4001:43:120658:120663	25349	15	True				
ANR	25456	Statement	","	4001:49:120664:120664	25349	16	True				
ANR	25457	Statement	property	4001:51:120666:120673	25349	17	True				
ANR	25458	Statement	","	4001:59:120674:120674	25349	18	True				
ANR	25459	Statement	silent	4001:61:120676:120681	25349	19	True				
ANR	25460	Statement	?	4001:67:120682:120682	25349	20	True				
ANR	25461	Label	BP_VAR_IS :	4001:68:120683:120692	25349	21	True				
ANR	25462	Identifier	BP_VAR_IS		25349	0					
ANR	25463	Statement	BP_VAR_R	4001:78:120693:120700	25349	22	True				
ANR	25464	Statement	","	4001:86:120701:120701	25349	23	True				
ANR	25465	Statement	0	4001:88:120703:120703	25349	24	True				
ANR	25466	Statement	TSRMLS_CC	4001:90:120705:120713	25349	25	True				
ANR	25467	Statement	)	4001:99:120714:120714	25349	26	True				
ANR	25468	ExpressionStatement		4001:100:120715:120715	25349	27	True				
ANR	25469	ExpressionStatement	zval_ptr_dtor ( & property )	4002:1:120718:120742	25349	28	True				
ANR	25470	CallExpression	zval_ptr_dtor ( & property )		25349	0					
ANR	25471	Callee	zval_ptr_dtor		25349	0					
ANR	25472	Identifier	zval_ptr_dtor		25349	0					
ANR	25473	ArgumentList	& property		25349	1					
ANR	25474	Argument	& property		25349	0					
ANR	25475	UnaryOperationExpression	& property		25349	0					
ANR	25476	UnaryOperator	&		25349	0					
ANR	25477	Identifier	property		25349	1					
ANR	25478	ExpressionStatement	EG ( scope ) = old_scope	4004:1:120746:120767	25349	29	True				
ANR	25479	AssignmentExpression	EG ( scope ) = old_scope		25349	0		=			
ANR	25480	CallExpression	EG ( scope )		25349	0					
ANR	25481	Callee	EG		25349	0					
ANR	25482	Identifier	EG		25349	0					
ANR	25483	ArgumentList	scope		25349	1					
ANR	25484	Argument	scope		25349	0					
ANR	25485	Identifier	scope		25349	0					
ANR	25486	Identifier	old_scope		25349	1					
ANR	25487	ReturnStatement	return value ;	4005:1:120770:120782	25349	30	True				
ANR	25488	Identifier	value		25349	0					
ANR	25489	ReturnType	ZEND_API zval *		25349	1					
ANR	25490	Identifier	zend_read_property		25349	2					
ANR	25491	ParameterList	"zend_class_entry * scope , zval * object , const char * name , int name_length , zend_bool silent TSRMLS_DC"		25349	3					
ANR	25492	Parameter	zend_class_entry * scope	3984:34:120072:120094	25349	0	True				
ANR	25493	ParameterType	zend_class_entry *		25349	0					
ANR	25494	Identifier	scope		25349	1					
ANR	25495	Parameter	zval * object	3984:59:120097:120108	25349	1	True				
ANR	25496	ParameterType	zval *		25349	0					
ANR	25497	Identifier	object		25349	1					
ANR	25498	Parameter	const char * name	3984:73:120111:120126	25349	2	True				
ANR	25499	ParameterType	const char *		25349	0					
ANR	25500	Identifier	name		25349	1					
ANR	25501	Parameter	int name_length	3984:91:120129:120143	25349	3	True				
ANR	25502	ParameterType	int		25349	0					
ANR	25503	Identifier	name_length		25349	1					
ANR	25504	Parameter	zend_bool silent TSRMLS_DC	3984:108:120146:120171	25349	4	True				
ANR	25505	ParameterType	zend_bool silent		25349	0					
ANR	25506	Identifier	TSRMLS_DC		25349	1					
ANR	25507	CFGEntryNode	ENTRY		25349		True				
ANR	25508	CFGExitNode	EXIT		25349		True				
ANR	25509	Symbol	EG		25349						
ANR	25510	Symbol	Z_OBJ_HT_P ( object ) -> read_property		25349						
ANR	25511	Symbol	old_scope		25349						
ANR	25512	Symbol	name_length		25349						
ANR	25513	Symbol	TSRMLS_DC		25349						
ANR	25514	Symbol	* Z_OBJ_HT_P		25349						
ANR	25515	Symbol	& property		25349						
ANR	25516	Symbol	E_CORE_ERROR		25349						
ANR	25517	Symbol	scope		25349						
ANR	25518	Symbol	name		25349						
ANR	25519	Symbol	property		25349						
ANR	25520	Symbol	Z_OBJ_HT_P		25349						
ANR	25521	Symbol	class_name_len		25349						
ANR	25522	Symbol	value		25349						
ANR	25523	Symbol	class_name		25349						
ANR	25524	Symbol	object		25349						
ANR	25525	Function	zend_read_static_property	4009:0:120797:121169							
ANR	25526	FunctionDef	"zend_read_static_property (zend_class_entry * scope , const char * name , int name_length , zend_bool silent TSRMLS_DC)"		25525	0					
ANR	25527	CompoundStatement		4010:0:120936:121169	25525	0					
ANR	25528	IdentifierDeclStatement	zval * * property ;	4011:1:120939:120954	25525	0	True				
ANR	25529	IdentifierDecl	* * property		25525	0					
ANR	25530	IdentifierDeclType	zval * *		25525	0					
ANR	25531	Identifier	property		25525	1					
ANR	25532	IdentifierDeclStatement	zend_class_entry * old_scope = EG ( scope ) ;	4012:1:120957:120996	25525	1	True				
ANR	25533	IdentifierDecl	* old_scope = EG ( scope )		25525	0					
ANR	25534	IdentifierDeclType	zend_class_entry *		25525	0					
ANR	25535	Identifier	old_scope		25525	1					
ANR	25536	AssignmentExpression	* old_scope = EG ( scope )		25525	2		=			
ANR	25537	Identifier	old_scope		25525	0					
ANR	25538	CallExpression	EG ( scope )		25525	1					
ANR	25539	Callee	EG		25525	0					
ANR	25540	Identifier	EG		25525	0					
ANR	25541	ArgumentList	scope		25525	1					
ANR	25542	Argument	scope		25525	0					
ANR	25543	Identifier	scope		25525	0					
ANR	25544	ExpressionStatement	EG ( scope ) = scope	4014:1:121000:121017	25525	2	True				
ANR	25545	AssignmentExpression	EG ( scope ) = scope		25525	0		=			
ANR	25546	CallExpression	EG ( scope )		25525	0					
ANR	25547	Callee	EG		25525	0					
ANR	25548	Identifier	EG		25525	0					
ANR	25549	ArgumentList	scope		25525	1					
ANR	25550	Argument	scope		25525	0					
ANR	25551	Identifier	scope		25525	0					
ANR	25552	Identifier	scope		25525	1					
ANR	25553	Statement	property	4015:1:121020:121027	25525	3	True				
ANR	25554	Statement	=	4015:10:121029:121029	25525	4	True				
ANR	25555	Statement	zend_std_get_static_property	4015:12:121031:121058	25525	5	True				
ANR	25556	Statement	(	4015:40:121059:121059	25525	6	True				
ANR	25557	Statement	scope	4015:41:121060:121064	25525	7	True				
ANR	25558	Statement	","	4015:46:121065:121065	25525	8	True				
ANR	25559	Statement	name	4015:48:121067:121070	25525	9	True				
ANR	25560	Statement	","	4015:52:121071:121071	25525	10	True				
ANR	25561	Statement	name_length	4015:54:121073:121083	25525	11	True				
ANR	25562	Statement	","	4015:65:121084:121084	25525	12	True				
ANR	25563	Statement	silent	4015:67:121086:121091	25525	13	True				
ANR	25564	Statement	","	4015:73:121092:121092	25525	14	True				
ANR	25565	Statement	NULL	4015:75:121094:121097	25525	15	True				
ANR	25566	Statement	TSRMLS_CC	4015:80:121099:121107	25525	16	True				
ANR	25567	Statement	)	4015:89:121108:121108	25525	17	True				
ANR	25568	ExpressionStatement		4015:90:121109:121109	25525	18	True				
ANR	25569	ExpressionStatement	EG ( scope ) = old_scope	4016:1:121112:121133	25525	19	True				
ANR	25570	AssignmentExpression	EG ( scope ) = old_scope		25525	0		=			
ANR	25571	CallExpression	EG ( scope )		25525	0					
ANR	25572	Callee	EG		25525	0					
ANR	25573	Identifier	EG		25525	0					
ANR	25574	ArgumentList	scope		25525	1					
ANR	25575	Argument	scope		25525	0					
ANR	25576	Identifier	scope		25525	0					
ANR	25577	Identifier	old_scope		25525	1					
ANR	25578	ReturnStatement	return property ? * property : NULL ;	4018:1:121137:121167	25525	20	True				
ANR	25579	ConditionalExpression	property ? * property : NULL		25525	0					
ANR	25580	Condition	property		25525	0					
ANR	25581	Identifier	property		25525	0					
ANR	25582	UnaryOperationExpression	* property		25525	1					
ANR	25583	UnaryOperator	*		25525	0					
ANR	25584	Identifier	property		25525	1					
ANR	25585	Identifier	NULL		25525	2					
ANR	25586	ReturnType	ZEND_API zval *		25525	1					
ANR	25587	Identifier	zend_read_static_property		25525	2					
ANR	25588	ParameterList	"zend_class_entry * scope , const char * name , int name_length , zend_bool silent TSRMLS_DC"		25525	3					
ANR	25589	Parameter	zend_class_entry * scope	4009:41:120838:120860	25525	0	True				
ANR	25590	ParameterType	zend_class_entry *		25525	0					
ANR	25591	Identifier	scope		25525	1					
ANR	25592	Parameter	const char * name	4009:66:120863:120878	25525	1	True				
ANR	25593	ParameterType	const char *		25525	0					
ANR	25594	Identifier	name		25525	1					
ANR	25595	Parameter	int name_length	4009:84:120881:120895	25525	2	True				
ANR	25596	ParameterType	int		25525	0					
ANR	25597	Identifier	name_length		25525	1					
ANR	25598	Parameter	zend_bool silent TSRMLS_DC	4009:101:120898:120923	25525	3	True				
ANR	25599	ParameterType	zend_bool silent		25525	0					
ANR	25600	Identifier	TSRMLS_DC		25525	1					
ANR	25601	CFGEntryNode	ENTRY		25525		True				
ANR	25602	CFGExitNode	EXIT		25525		True				
ANR	25603	Symbol	EG		25525						
ANR	25604	Symbol	* property		25525						
ANR	25605	Symbol	NULL		25525						
ANR	25606	Symbol	old_scope		25525						
ANR	25607	Symbol	scope		25525						
ANR	25608	Symbol	name		25525						
ANR	25609	Symbol	property		25525						
ANR	25610	Symbol	name_length		25525						
ANR	25611	Symbol	TSRMLS_DC		25525						
ANR	25612	Function	zend_find_alias_name	4063:9:122534:122937							
ANR	25613	FunctionDef	"zend_find_alias_name (zend_class_entry * ce , const char * name , zend_uint len)"		25612	0					
ANR	25614	CompoundStatement		4064:0:122632:122937	25612	0					
ANR	25615	IdentifierDeclStatement	"zend_trait_alias * alias , * * alias_ptr ;"	4065:1:122635:122671	25612	0	True				
ANR	25616	IdentifierDecl	* alias		25612	0					
ANR	25617	IdentifierDeclType	zend_trait_alias *		25612	0					
ANR	25618	Identifier	alias		25612	1					
ANR	25619	IdentifierDecl	* * alias_ptr		25612	1					
ANR	25620	IdentifierDeclType	zend_trait_alias * *		25612	0					
ANR	25621	Identifier	alias_ptr		25612	1					
ANR	25622	IfStatement	if ( ( alias_ptr = ce -> trait_aliases ) )		25612	1					
ANR	25623	Condition	alias_ptr = ce -> trait_aliases	4067:5:122679:122709	25612	0	True				
ANR	25624	AssignmentExpression	alias_ptr = ce -> trait_aliases		25612	0		=			
ANR	25625	Identifier	alias_ptr		25612	0					
ANR	25626	PtrMemberAccess	ce -> trait_aliases		25612	1					
ANR	25627	Identifier	ce		25612	0					
ANR	25628	Identifier	trait_aliases		25612	1					
ANR	25629	CompoundStatement		4:38:79:79	25612	1					
ANR	25630	ExpressionStatement	alias = * alias_ptr	4068:2:122716:122734	25612	0	True				
ANR	25631	AssignmentExpression	alias = * alias_ptr		25612	0		=			
ANR	25632	Identifier	alias		25612	0					
ANR	25633	UnaryOperationExpression	* alias_ptr		25612	1					
ANR	25634	UnaryOperator	*		25612	0					
ANR	25635	Identifier	alias_ptr		25612	1					
ANR	25636	WhileStatement	while ( alias )		25612	1					
ANR	25637	Condition	alias	4069:9:122745:122749	25612	0	True				
ANR	25638	Identifier	alias		25612	0					
ANR	25639	CompoundStatement		6:16:119:119	25612	1					
ANR	25640	IfStatement	"if ( alias -> alias_len == len && ! strncasecmp ( name , alias -> alias , alias -> alias_len ) )"		25612	0					
ANR	25641	Condition	"alias -> alias_len == len && ! strncasecmp ( name , alias -> alias , alias -> alias_len )"	4070:7:122761:122841	25612	0	True				
ANR	25642	AndExpression	"alias -> alias_len == len && ! strncasecmp ( name , alias -> alias , alias -> alias_len )"		25612	0		&&			
ANR	25643	EqualityExpression	alias -> alias_len == len		25612	0		==			
ANR	25644	PtrMemberAccess	alias -> alias_len		25612	0					
ANR	25645	Identifier	alias		25612	0					
ANR	25646	Identifier	alias_len		25612	1					
ANR	25647	Identifier	len		25612	1					
ANR	25648	UnaryOperationExpression	"! strncasecmp ( name , alias -> alias , alias -> alias_len )"		25612	1					
ANR	25649	UnaryOperator	!		25612	0					
ANR	25650	CallExpression	"strncasecmp ( name , alias -> alias , alias -> alias_len )"		25612	1					
ANR	25651	Callee	strncasecmp		25612	0					
ANR	25652	Identifier	strncasecmp		25612	0					
ANR	25653	ArgumentList	name		25612	1					
ANR	25654	Argument	name		25612	0					
ANR	25655	Identifier	name		25612	0					
ANR	25656	Argument	alias -> alias		25612	1					
ANR	25657	PtrMemberAccess	alias -> alias		25612	0					
ANR	25658	Identifier	alias		25612	0					
ANR	25659	Identifier	alias		25612	1					
ANR	25660	Argument	alias -> alias_len		25612	2					
ANR	25661	PtrMemberAccess	alias -> alias_len		25612	0					
ANR	25662	Identifier	alias		25612	0					
ANR	25663	Identifier	alias_len		25612	1					
ANR	25664	CompoundStatement		8:56:211:211	25612	1					
ANR	25665	ReturnStatement	return alias -> alias ;	4072:4:122850:122869	25612	0	True				
ANR	25666	PtrMemberAccess	alias -> alias		25612	0					
ANR	25667	Identifier	alias		25612	0					
ANR	25668	Identifier	alias		25612	1					
ANR	25669	ExpressionStatement	alias_ptr ++	4074:3:122879:122890	25612	1	True				
ANR	25670	PostIncDecOperationExpression	alias_ptr ++		25612	0					
ANR	25671	Identifier	alias_ptr		25612	0					
ANR	25672	IncDec	++		25612	1					
ANR	25673	ExpressionStatement	alias = * alias_ptr	4075:3:122895:122913	25612	2	True				
ANR	25674	AssignmentExpression	alias = * alias_ptr		25612	0		=			
ANR	25675	Identifier	alias		25612	0					
ANR	25676	UnaryOperationExpression	* alias_ptr		25612	1					
ANR	25677	UnaryOperator	*		25612	0					
ANR	25678	Identifier	alias_ptr		25612	1					
ANR	25679	ReturnStatement	return name ;	4079:1:122924:122935	25612	2	True				
ANR	25680	Identifier	name		25612	0					
ANR	25681	ReturnType	const char *		25612	1					
ANR	25682	Identifier	zend_find_alias_name		25612	2					
ANR	25683	ParameterList	"zend_class_entry * ce , const char * name , zend_uint len"		25612	3					
ANR	25684	Parameter	zend_class_entry * ce	4063:42:122567:122586	25612	0	True				
ANR	25685	ParameterType	zend_class_entry *		25612	0					
ANR	25686	Identifier	ce		25612	1					
ANR	25687	Parameter	const char * name	4063:64:122589:122604	25612	1	True				
ANR	25688	ParameterType	const char *		25612	0					
ANR	25689	Identifier	name		25612	1					
ANR	25690	Parameter	zend_uint len	4063:82:122607:122619	25612	2	True				
ANR	25691	ParameterType	zend_uint		25612	0					
ANR	25692	Identifier	len		25612	1					
ANR	25693	CFGEntryNode	ENTRY		25612		True				
ANR	25694	CFGExitNode	EXIT		25612		True				
ANR	25695	Symbol	* alias		25612						
ANR	25696	Symbol	ce		25612						
ANR	25697	Symbol	ce -> trait_aliases		25612						
ANR	25698	Symbol	len		25612						
ANR	25699	Symbol	name		25612						
ANR	25700	Symbol	strncasecmp		25612						
ANR	25701	Symbol	alias		25612						
ANR	25702	Symbol	* ce		25612						
ANR	25703	Symbol	alias_ptr		25612						
ANR	25704	Symbol	alias -> alias		25612						
ANR	25705	Symbol	* alias_ptr		25612						
ANR	25706	Symbol	alias -> alias_len		25612						
ANR	25707	Function	zend_resolve_method_name	4083:9:122959:124034							
ANR	25708	FunctionDef	"zend_resolve_method_name (zend_class_entry * ce , zend_function * f)"		25707	0					
ANR	25709	CompoundStatement		4084:0:123046:124034	25707	0					
ANR	25710	IdentifierDeclStatement	zend_function * func ;	4085:1:123049:123068	25707	0	True				
ANR	25711	IdentifierDecl	* func		25707	0					
ANR	25712	IdentifierDeclType	zend_function *		25707	0					
ANR	25713	Identifier	func		25707	1					
ANR	25714	IdentifierDeclStatement	HashPosition iterator ;	4086:1:123071:123092	25707	1	True				
ANR	25715	IdentifierDecl	iterator		25707	0					
ANR	25716	IdentifierDeclType	HashPosition		25707	0					
ANR	25717	Identifier	iterator		25707	1					
ANR	25718	IdentifierDeclStatement	HashTable * function_table ;	4087:1:123095:123120	25707	2	True				
ANR	25719	IdentifierDecl	* function_table		25707	0					
ANR	25720	IdentifierDeclType	HashTable *		25707	0					
ANR	25721	Identifier	function_table		25707	1					
ANR	25722	IfStatement	if ( f -> common . type != ZEND_USER_FUNCTION || * ( f -> op_array . refcount ) < 2 || ! f -> common . scope || ! f -> common . scope -> trait_aliases )		25707	3					
ANR	25723	Condition	f -> common . type != ZEND_USER_FUNCTION || * ( f -> op_array . refcount ) < 2 || ! f -> common . scope || ! f -> common . scope -> trait_aliases	4089:5:123128:123264	25707	0	True				
ANR	25724	OrExpression	f -> common . type != ZEND_USER_FUNCTION || * ( f -> op_array . refcount ) < 2 || ! f -> common . scope || ! f -> common . scope -> trait_aliases		25707	0		||			
ANR	25725	EqualityExpression	f -> common . type != ZEND_USER_FUNCTION		25707	0		!=			
ANR	25726	MemberAccess	f -> common . type		25707	0					
ANR	25727	PtrMemberAccess	f -> common		25707	0					
ANR	25728	Identifier	f		25707	0					
ANR	25729	Identifier	common		25707	1					
ANR	25730	Identifier	type		25707	1					
ANR	25731	Identifier	ZEND_USER_FUNCTION		25707	1					
ANR	25732	OrExpression	* ( f -> op_array . refcount ) < 2 || ! f -> common . scope || ! f -> common . scope -> trait_aliases		25707	1		||			
ANR	25733	RelationalExpression	* ( f -> op_array . refcount ) < 2		25707	0		<			
ANR	25734	UnaryOperationExpression	* ( f -> op_array . refcount )		25707	0					
ANR	25735	UnaryOperator	*		25707	0					
ANR	25736	MemberAccess	f -> op_array . refcount		25707	1					
ANR	25737	PtrMemberAccess	f -> op_array		25707	0					
ANR	25738	Identifier	f		25707	0					
ANR	25739	Identifier	op_array		25707	1					
ANR	25740	Identifier	refcount		25707	1					
ANR	25741	PrimaryExpression	2		25707	1					
ANR	25742	OrExpression	! f -> common . scope || ! f -> common . scope -> trait_aliases		25707	1		||			
ANR	25743	UnaryOperationExpression	! f -> common . scope		25707	0					
ANR	25744	UnaryOperator	!		25707	0					
ANR	25745	MemberAccess	f -> common . scope		25707	1					
ANR	25746	PtrMemberAccess	f -> common		25707	0					
ANR	25747	Identifier	f		25707	0					
ANR	25748	Identifier	common		25707	1					
ANR	25749	Identifier	scope		25707	1					
ANR	25750	UnaryOperationExpression	! f -> common . scope -> trait_aliases		25707	1					
ANR	25751	UnaryOperator	!		25707	0					
ANR	25752	PtrMemberAccess	f -> common . scope -> trait_aliases		25707	1					
ANR	25753	MemberAccess	f -> common . scope		25707	0					
ANR	25754	PtrMemberAccess	f -> common		25707	0					
ANR	25755	Identifier	f		25707	0					
ANR	25756	Identifier	common		25707	1					
ANR	25757	Identifier	scope		25707	1					
ANR	25758	Identifier	trait_aliases		25707	1					
ANR	25759	CompoundStatement		9:38:220:220	25707	1					
ANR	25760	ReturnStatement	return f -> common . function_name ;	4093:2:123271:123301	25707	0	True				
ANR	25761	MemberAccess	f -> common . function_name		25707	0					
ANR	25762	PtrMemberAccess	f -> common		25707	0					
ANR	25763	Identifier	f		25707	0					
ANR	25764	Identifier	common		25707	1					
ANR	25765	Identifier	function_name		25707	1					
ANR	25766	ExpressionStatement	function_table = & ce -> function_table	4096:1:123308:123344	25707	4	True				
ANR	25767	AssignmentExpression	function_table = & ce -> function_table		25707	0		=			
ANR	25768	Identifier	function_table		25707	0					
ANR	25769	UnaryOperationExpression	& ce -> function_table		25707	1					
ANR	25770	UnaryOperator	&		25707	0					
ANR	25771	PtrMemberAccess	ce -> function_table		25707	1					
ANR	25772	Identifier	ce		25707	0					
ANR	25773	Identifier	function_table		25707	1					
ANR	25774	ExpressionStatement	"zend_hash_internal_pointer_reset_ex ( function_table , & iterator )"	4097:1:123347:123409	25707	5	True				
ANR	25775	CallExpression	"zend_hash_internal_pointer_reset_ex ( function_table , & iterator )"		25707	0					
ANR	25776	Callee	zend_hash_internal_pointer_reset_ex		25707	0					
ANR	25777	Identifier	zend_hash_internal_pointer_reset_ex		25707	0					
ANR	25778	ArgumentList	function_table		25707	1					
ANR	25779	Argument	function_table		25707	0					
ANR	25780	Identifier	function_table		25707	0					
ANR	25781	Argument	& iterator		25707	1					
ANR	25782	UnaryOperationExpression	& iterator		25707	0					
ANR	25783	UnaryOperator	&		25707	0					
ANR	25784	Identifier	iterator		25707	1					
ANR	25785	WhileStatement	"while ( zend_hash_get_current_data_ex ( function_table , ( void * * ) & func , & iterator ) == SUCCESS )"		25707	6					
ANR	25786	Condition	"zend_hash_get_current_data_ex ( function_table , ( void * * ) & func , & iterator ) == SUCCESS"	4098:8:123419:123501	25707	0	True				
ANR	25787	EqualityExpression	"zend_hash_get_current_data_ex ( function_table , ( void * * ) & func , & iterator ) == SUCCESS"		25707	0		==			
ANR	25788	CallExpression	"zend_hash_get_current_data_ex ( function_table , ( void * * ) & func , & iterator )"		25707	0					
ANR	25789	Callee	zend_hash_get_current_data_ex		25707	0					
ANR	25790	Identifier	zend_hash_get_current_data_ex		25707	0					
ANR	25791	ArgumentList	function_table		25707	1					
ANR	25792	Argument	function_table		25707	0					
ANR	25793	Identifier	function_table		25707	0					
ANR	25794	Argument	( void * * ) & func		25707	1					
ANR	25795	CastExpression	( void * * ) & func		25707	0					
ANR	25796	CastTarget	void * *		25707	0					
ANR	25797	UnaryOperationExpression	& func		25707	1					
ANR	25798	UnaryOperator	&		25707	0					
ANR	25799	Identifier	func		25707	1					
ANR	25800	Argument	& iterator		25707	2					
ANR	25801	UnaryOperationExpression	& iterator		25707	0					
ANR	25802	UnaryOperator	&		25707	0					
ANR	25803	Identifier	iterator		25707	1					
ANR	25804	Identifier	SUCCESS		25707	1					
ANR	25805	CompoundStatement		15:93:457:457	25707	1					
ANR	25806	IfStatement	if ( func == f )		25707	0					
ANR	25807	Condition	func == f	4099:6:123512:123520	25707	0	True				
ANR	25808	EqualityExpression	func == f		25707	0		==			
ANR	25809	Identifier	func		25707	0					
ANR	25810	Identifier	f		25707	1					
ANR	25811	CompoundStatement		19:3:509:518	25707	1					
ANR	25812	IdentifierDeclStatement	char * name ;	4100:3:123528:123538	25707	0	True				
ANR	25813	IdentifierDecl	* name		25707	0					
ANR	25814	IdentifierDeclType	char *		25707	0					
ANR	25815	Identifier	name		25707	1					
ANR	25816	IdentifierDeclStatement	uint len ;	4101:3:123543:123551	25707	1	True				
ANR	25817	IdentifierDecl	len		25707	0					
ANR	25818	IdentifierDeclType	uint		25707	0					
ANR	25819	Identifier	len		25707	1					
ANR	25820	IdentifierDeclStatement	ulong idx ;	4102:3:123556:123565	25707	2	True				
ANR	25821	IdentifierDecl	idx		25707	0					
ANR	25822	IdentifierDeclType	ulong		25707	0					
ANR	25823	Identifier	idx		25707	1					
ANR	25824	IfStatement	"if ( zend_hash_get_current_key_ex ( function_table , & name , & len , & idx , 0 , & iterator ) != HASH_KEY_IS_STRING )"		25707	3					
ANR	25825	Condition	"zend_hash_get_current_key_ex ( function_table , & name , & len , & idx , 0 , & iterator ) != HASH_KEY_IS_STRING"	4104:7:123575:123673	25707	0	True				
ANR	25826	EqualityExpression	"zend_hash_get_current_key_ex ( function_table , & name , & len , & idx , 0 , & iterator ) != HASH_KEY_IS_STRING"		25707	0		!=			
ANR	25827	CallExpression	"zend_hash_get_current_key_ex ( function_table , & name , & len , & idx , 0 , & iterator )"		25707	0					
ANR	25828	Callee	zend_hash_get_current_key_ex		25707	0					
ANR	25829	Identifier	zend_hash_get_current_key_ex		25707	0					
ANR	25830	ArgumentList	function_table		25707	1					
ANR	25831	Argument	function_table		25707	0					
ANR	25832	Identifier	function_table		25707	0					
ANR	25833	Argument	& name		25707	1					
ANR	25834	UnaryOperationExpression	& name		25707	0					
ANR	25835	UnaryOperator	&		25707	0					
ANR	25836	Identifier	name		25707	1					
ANR	25837	Argument	& len		25707	2					
ANR	25838	UnaryOperationExpression	& len		25707	0					
ANR	25839	UnaryOperator	&		25707	0					
ANR	25840	Identifier	len		25707	1					
ANR	25841	Argument	& idx		25707	3					
ANR	25842	UnaryOperationExpression	& idx		25707	0					
ANR	25843	UnaryOperator	&		25707	0					
ANR	25844	Identifier	idx		25707	1					
ANR	25845	Argument	0		25707	4					
ANR	25846	PrimaryExpression	0		25707	0					
ANR	25847	Argument	& iterator		25707	5					
ANR	25848	UnaryOperationExpression	& iterator		25707	0					
ANR	25849	UnaryOperator	&		25707	0					
ANR	25850	Identifier	iterator		25707	1					
ANR	25851	Identifier	HASH_KEY_IS_STRING		25707	1					
ANR	25852	CompoundStatement		21:108:629:629	25707	1					
ANR	25853	ReturnStatement	return f -> common . function_name ;	4105:4:123682:123712	25707	0	True				
ANR	25854	MemberAccess	f -> common . function_name		25707	0					
ANR	25855	PtrMemberAccess	f -> common		25707	0					
ANR	25856	Identifier	f		25707	0					
ANR	25857	Identifier	common		25707	1					
ANR	25858	Identifier	function_name		25707	1					
ANR	25859	ExpressionStatement	-- len	4107:3:123722:123727	25707	4	True				
ANR	25860	UnaryExpression	-- len		25707	0					
ANR	25861	IncDec	--		25707	0					
ANR	25862	Identifier	len		25707	1					
ANR	25863	IfStatement	"if ( len == strlen ( f -> common . function_name ) && ! strncasecmp ( name , f -> common . function_name , len ) )"		25707	5					
ANR	25864	Condition	"len == strlen ( f -> common . function_name ) && ! strncasecmp ( name , f -> common . function_name , len )"	4108:7:123736:123832	25707	0	True				
ANR	25865	AndExpression	"len == strlen ( f -> common . function_name ) && ! strncasecmp ( name , f -> common . function_name , len )"		25707	0		&&			
ANR	25866	EqualityExpression	len == strlen ( f -> common . function_name )		25707	0		==			
ANR	25867	Identifier	len		25707	0					
ANR	25868	CallExpression	strlen ( f -> common . function_name )		25707	1					
ANR	25869	Callee	strlen		25707	0					
ANR	25870	Identifier	strlen		25707	0					
ANR	25871	ArgumentList	f -> common . function_name		25707	1					
ANR	25872	Argument	f -> common . function_name		25707	0					
ANR	25873	MemberAccess	f -> common . function_name		25707	0					
ANR	25874	PtrMemberAccess	f -> common		25707	0					
ANR	25875	Identifier	f		25707	0					
ANR	25876	Identifier	common		25707	1					
ANR	25877	Identifier	function_name		25707	1					
ANR	25878	UnaryOperationExpression	"! strncasecmp ( name , f -> common . function_name , len )"		25707	1					
ANR	25879	UnaryOperator	!		25707	0					
ANR	25880	CallExpression	"strncasecmp ( name , f -> common . function_name , len )"		25707	1					
ANR	25881	Callee	strncasecmp		25707	0					
ANR	25882	Identifier	strncasecmp		25707	0					
ANR	25883	ArgumentList	name		25707	1					
ANR	25884	Argument	name		25707	0					
ANR	25885	Identifier	name		25707	0					
ANR	25886	Argument	f -> common . function_name		25707	1					
ANR	25887	MemberAccess	f -> common . function_name		25707	0					
ANR	25888	PtrMemberAccess	f -> common		25707	0					
ANR	25889	Identifier	f		25707	0					
ANR	25890	Identifier	common		25707	1					
ANR	25891	Identifier	function_name		25707	1					
ANR	25892	Argument	len		25707	2					
ANR	25893	Identifier	len		25707	0					
ANR	25894	CompoundStatement		26:57:788:788	25707	1					
ANR	25895	ReturnStatement	return f -> common . function_name ;	4110:4:123841:123871	25707	0	True				
ANR	25896	MemberAccess	f -> common . function_name		25707	0					
ANR	25897	PtrMemberAccess	f -> common		25707	0					
ANR	25898	Identifier	f		25707	0					
ANR	25899	Identifier	common		25707	1					
ANR	25900	Identifier	function_name		25707	1					
ANR	25901	ReturnStatement	"return zend_find_alias_name ( f -> common . scope , name , len ) ;"	4112:3:123881:123936	25707	6	True				
ANR	25902	CallExpression	"zend_find_alias_name ( f -> common . scope , name , len )"		25707	0					
ANR	25903	Callee	zend_find_alias_name		25707	0					
ANR	25904	Identifier	zend_find_alias_name		25707	0					
ANR	25905	ArgumentList	f -> common . scope		25707	1					
ANR	25906	Argument	f -> common . scope		25707	0					
ANR	25907	MemberAccess	f -> common . scope		25707	0					
ANR	25908	PtrMemberAccess	f -> common		25707	0					
ANR	25909	Identifier	f		25707	0					
ANR	25910	Identifier	common		25707	1					
ANR	25911	Identifier	scope		25707	1					
ANR	25912	Argument	name		25707	1					
ANR	25913	Identifier	name		25707	0					
ANR	25914	Argument	len		25707	2					
ANR	25915	Identifier	len		25707	0					
ANR	25916	ExpressionStatement	"zend_hash_move_forward_ex ( function_table , & iterator )"	4114:2:123944:123996	25707	1	True				
ANR	25917	CallExpression	"zend_hash_move_forward_ex ( function_table , & iterator )"		25707	0					
ANR	25918	Callee	zend_hash_move_forward_ex		25707	0					
ANR	25919	Identifier	zend_hash_move_forward_ex		25707	0					
ANR	25920	ArgumentList	function_table		25707	1					
ANR	25921	Argument	function_table		25707	0					
ANR	25922	Identifier	function_table		25707	0					
ANR	25923	Argument	& iterator		25707	1					
ANR	25924	UnaryOperationExpression	& iterator		25707	0					
ANR	25925	UnaryOperator	&		25707	0					
ANR	25926	Identifier	iterator		25707	1					
ANR	25927	ReturnStatement	return f -> common . function_name ;	4116:1:124002:124032	25707	7	True				
ANR	25928	MemberAccess	f -> common . function_name		25707	0					
ANR	25929	PtrMemberAccess	f -> common		25707	0					
ANR	25930	Identifier	f		25707	0					
ANR	25931	Identifier	common		25707	1					
ANR	25932	Identifier	function_name		25707	1					
ANR	25933	ReturnType	const char *		25707	1					
ANR	25934	Identifier	zend_resolve_method_name		25707	2					
ANR	25935	ParameterList	"zend_class_entry * ce , zend_function * f"		25707	3					
ANR	25936	Parameter	zend_class_entry * ce	4083:46:122996:123015	25707	0	True				
ANR	25937	ParameterType	zend_class_entry *		25707	0					
ANR	25938	Identifier	ce		25707	1					
ANR	25939	Parameter	zend_function * f	4083:68:123018:123033	25707	1	True				
ANR	25940	ParameterType	zend_function *		25707	0					
ANR	25941	Identifier	f		25707	1					
ANR	25942	CFGEntryNode	ENTRY		25707		True				
ANR	25943	CFGExitNode	EXIT		25707		True				
ANR	25944	Symbol	* ( f -> op_array . refcount )		25707						
ANR	25945	Symbol	zend_hash_get_current_data_ex		25707						
ANR	25946	Symbol	* f -> common . scope		25707						
ANR	25947	Symbol	f -> op_array . refcount		25707						
ANR	25948	Symbol	strncasecmp		25707						
ANR	25949	Symbol	& ce -> function_table		25707						
ANR	25950	Symbol	HASH_KEY_IS_STRING		25707						
ANR	25951	Symbol	f -> common . function_name		25707						
ANR	25952	Symbol	& name		25707						
ANR	25953	Symbol	strlen		25707						
ANR	25954	Symbol	iterator		25707						
ANR	25955	Symbol	* f -> common		25707						
ANR	25956	Symbol	len		25707						
ANR	25957	Symbol	ZEND_USER_FUNCTION		25707						
ANR	25958	Symbol	& iterator		25707						
ANR	25959	Symbol	f -> common . scope -> trait_aliases		25707						
ANR	25960	Symbol	* f -> op_array . refcount		25707						
ANR	25961	Symbol	ce		25707						
ANR	25962	Symbol	SUCCESS		25707						
ANR	25963	Symbol	f -> common		25707						
ANR	25964	Symbol	& idx		25707						
ANR	25965	Symbol	* * f		25707						
ANR	25966	Symbol	f		25707						
ANR	25967	Symbol	f -> op_array		25707						
ANR	25968	Symbol	zend_hash_get_current_key_ex		25707						
ANR	25969	Symbol	* f -> op_array		25707						
ANR	25970	Symbol	f -> common . type		25707						
ANR	25971	Symbol	zend_find_alias_name		25707						
ANR	25972	Symbol	* f		25707						
ANR	25973	Symbol	func		25707						
ANR	25974	Symbol	f -> common . scope		25707						
ANR	25975	Symbol	& func		25707						
ANR	25976	Symbol	name		25707						
ANR	25977	Symbol	function_table		25707						
ANR	25978	Symbol	idx		25707						
ANR	25979	Symbol	& len		25707						
