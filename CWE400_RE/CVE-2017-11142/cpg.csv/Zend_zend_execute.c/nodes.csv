command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	62142	File	data/converged/CVE-2017-11142_php-src/Zend_zend_execute.c								
ANR	62143	DeclStmt									
ANR	62144	Decl							int ( * ) ( zval * )	int ( * ) ( zval * )	incdec_t
ANR	62145	Function	zend_pzval_unlock_func	70:0:3005:3364							
ANR	62146	FunctionDef	"zend_pzval_unlock_func (zval * z , zend_free_op * should_free , int unref TSRMLS_DC)"		62145	0					
ANR	62147	CompoundStatement		71:0:3116:3364	62145	0					
ANR	62148	IfStatement	if ( ! Z_DELREF_P ( z ) )		62145	0					
ANR	62149	Condition	! Z_DELREF_P ( z )	72:5:3123:3136	62145	0	True				
ANR	62150	UnaryOperationExpression	! Z_DELREF_P ( z )		62145	0					
ANR	62151	UnaryOperator	!		62145	0					
ANR	62152	CallExpression	Z_DELREF_P ( z )		62145	1					
ANR	62153	Callee	Z_DELREF_P		62145	0					
ANR	62154	Identifier	Z_DELREF_P		62145	0					
ANR	62155	ArgumentList	z		62145	1					
ANR	62156	Argument	z		62145	0					
ANR	62157	Identifier	z		62145	0					
ANR	62158	CompoundStatement		2:21:22:22	62145	1					
ANR	62159	ExpressionStatement	"Z_SET_REFCOUNT_P ( z , 1 )"	73:2:3143:3165	62145	0	True				
ANR	62160	CallExpression	"Z_SET_REFCOUNT_P ( z , 1 )"		62145	0					
ANR	62161	Callee	Z_SET_REFCOUNT_P		62145	0					
ANR	62162	Identifier	Z_SET_REFCOUNT_P		62145	0					
ANR	62163	ArgumentList	z		62145	1					
ANR	62164	Argument	z		62145	0					
ANR	62165	Identifier	z		62145	0					
ANR	62166	Argument	1		62145	1					
ANR	62167	PrimaryExpression	1		62145	0					
ANR	62168	ExpressionStatement	Z_UNSET_ISREF_P ( z )	74:2:3169:3187	62145	1	True				
ANR	62169	CallExpression	Z_UNSET_ISREF_P ( z )		62145	0					
ANR	62170	Callee	Z_UNSET_ISREF_P		62145	0					
ANR	62171	Identifier	Z_UNSET_ISREF_P		62145	0					
ANR	62172	ArgumentList	z		62145	1					
ANR	62173	Argument	z		62145	0					
ANR	62174	Identifier	z		62145	0					
ANR	62175	ExpressionStatement	should_free -> var = z	75:2:3191:3211	62145	2	True				
ANR	62176	AssignmentExpression	should_free -> var = z		62145	0		=			
ANR	62177	PtrMemberAccess	should_free -> var		62145	0					
ANR	62178	Identifier	should_free		62145	0					
ANR	62179	Identifier	var		62145	1					
ANR	62180	Identifier	z		62145	1					
ANR	62181	ElseStatement	else		62145	0					
ANR	62182	CompoundStatement		7:8:136:136	62145	0					
ANR	62183	ExpressionStatement	should_free -> var = 0	78:2:3257:3277	62145	0	True				
ANR	62184	AssignmentExpression	should_free -> var = 0		62145	0		=			
ANR	62185	PtrMemberAccess	should_free -> var		62145	0					
ANR	62186	Identifier	should_free		62145	0					
ANR	62187	Identifier	var		62145	1					
ANR	62188	PrimaryExpression	0		62145	1					
ANR	62189	IfStatement	if ( unref && Z_ISREF_P ( z ) && Z_REFCOUNT_P ( z ) == 1 )		62145	1					
ANR	62190	Condition	unref && Z_ISREF_P ( z ) && Z_REFCOUNT_P ( z ) == 1	79:6:3285:3329	62145	0	True				
ANR	62191	AndExpression	unref && Z_ISREF_P ( z ) && Z_REFCOUNT_P ( z ) == 1		62145	0		&&			
ANR	62192	Identifier	unref		62145	0					
ANR	62193	AndExpression	Z_ISREF_P ( z ) && Z_REFCOUNT_P ( z ) == 1		62145	1		&&			
ANR	62194	CallExpression	Z_ISREF_P ( z )		62145	0					
ANR	62195	Callee	Z_ISREF_P		62145	0					
ANR	62196	Identifier	Z_ISREF_P		62145	0					
ANR	62197	ArgumentList	z		62145	1					
ANR	62198	Argument	z		62145	0					
ANR	62199	Identifier	z		62145	0					
ANR	62200	EqualityExpression	Z_REFCOUNT_P ( z ) == 1		62145	1		==			
ANR	62201	CallExpression	Z_REFCOUNT_P ( z )		62145	0					
ANR	62202	Callee	Z_REFCOUNT_P		62145	0					
ANR	62203	Identifier	Z_REFCOUNT_P		62145	0					
ANR	62204	ArgumentList	z		62145	1					
ANR	62205	Argument	z		62145	0					
ANR	62206	Identifier	z		62145	0					
ANR	62207	PrimaryExpression	1		62145	1					
ANR	62208	CompoundStatement		9:53:215:215	62145	1					
ANR	62209	ExpressionStatement	Z_UNSET_ISREF_P ( z )	80:3:3337:3355	62145	0	True				
ANR	62210	CallExpression	Z_UNSET_ISREF_P ( z )		62145	0					
ANR	62211	Callee	Z_UNSET_ISREF_P		62145	0					
ANR	62212	Identifier	Z_UNSET_ISREF_P		62145	0					
ANR	62213	ArgumentList	z		62145	1					
ANR	62214	Argument	z		62145	0					
ANR	62215	Identifier	z		62145	0					
ANR	62216	ReturnType	static zend_always_inline void		62145	1					
ANR	62217	Identifier	zend_pzval_unlock_func		62145	2					
ANR	62218	ParameterList	"zval * z , zend_free_op * should_free , int unref TSRMLS_DC"		62145	3					
ANR	62219	Parameter	zval * z	70:54:3059:3065	62145	0	True				
ANR	62220	ParameterType	zval *		62145	0					
ANR	62221	Identifier	z		62145	1					
ANR	62222	Parameter	zend_free_op * should_free	70:63:3068:3092	62145	1	True				
ANR	62223	ParameterType	zend_free_op *		62145	0					
ANR	62224	Identifier	should_free		62145	1					
ANR	62225	Parameter	int unref TSRMLS_DC	70:90:3095:3113	62145	2	True				
ANR	62226	ParameterType	int unref		62145	0					
ANR	62227	Identifier	TSRMLS_DC		62145	1					
ANR	62228	CFGEntryNode	ENTRY		62145		True				
ANR	62229	CFGExitNode	EXIT		62145		True				
ANR	62230	Symbol	should_free		62145						
ANR	62231	Symbol	should_free -> var		62145						
ANR	62232	Symbol	Z_DELREF_P		62145						
ANR	62233	Symbol	z		62145						
ANR	62234	Symbol	TSRMLS_DC		62145						
ANR	62235	Symbol	Z_REFCOUNT_P		62145						
ANR	62236	Symbol	* should_free		62145						
ANR	62237	Symbol	unref		62145						
ANR	62238	Symbol	Z_ISREF_P		62145						
ANR	62239	DeclStmt									
ANR	62240	Decl							temp_variable	temp_variable *	__t
ANR	62241	DeclStmt									
ANR	62242	Decl							temp_variable	temp_variable *	__t
ANR	62243	DeclStmt									
ANR	62244	Decl							zval	zval *	_tmp
ANR	62245	Function	zend_get_compiled_variable_value	168:34:5914:6048							
ANR	62246	FunctionDef	"zend_get_compiled_variable_value (const zend_execute_data * execute_data , zend_uint var)"		62245	0					
ANR	62247	CompoundStatement		171:0:6026:6048	62245	0					
ANR	62248	ReturnStatement	return EX_CV ( var ) ;	172:1:6029:6046	62245	0	True				
ANR	62249	CallExpression	EX_CV ( var )		62245	0					
ANR	62250	Callee	EX_CV		62245	0					
ANR	62251	Identifier	EX_CV		62245	0					
ANR	62252	ArgumentList	var		62245	1					
ANR	62253	Argument	var		62245	0					
ANR	62254	Identifier	var		62245	0					
ANR	62255	ReturnType	element ZEND_API zval * *		62245	1					
ANR	62256	Identifier	zend_get_compiled_variable_value		62245	2					
ANR	62257	ParameterList	"const zend_execute_data * execute_data , zend_uint var"		62245	3					
ANR	62258	Parameter	const zend_execute_data * execute_data	170:49:5972:6008	62245	0	True				
ANR	62259	ParameterType	const zend_execute_data *		62245	0					
ANR	62260	Identifier	execute_data		62245	1					
ANR	62261	Parameter	zend_uint var	170:88:6011:6023	62245	1	True				
ANR	62262	ParameterType	zend_uint		62245	0					
ANR	62263	Identifier	var		62245	1					
ANR	62264	CFGEntryNode	ENTRY		62245		True				
ANR	62265	CFGExitNode	EXIT		62245		True				
ANR	62266	Symbol	var		62245						
ANR	62267	Symbol	EX_CV		62245						
ANR	62268	Symbol	execute_data		62245						
ANR	62269	DeclStmt									
ANR	62270	Decl							zval	zval *	ptr
ANR	62271	Function	_get_zval_cv_lookup	187:0:6455:7534							
ANR	62272	FunctionDef	"_get_zval_cv_lookup (zval * * * ptr , zend_uint var , int type TSRMLS_DC)"		62271	0					
ANR	62273	CompoundStatement		188:0:6555:7534	62271	0					
ANR	62274	IdentifierDeclStatement	zend_compiled_variable * cv = & CV_DEF_OF ( var ) ;	189:1:6558:6602	62271	0	True				
ANR	62275	IdentifierDecl	* cv = & CV_DEF_OF ( var )		62271	0					
ANR	62276	IdentifierDeclType	zend_compiled_variable *		62271	0					
ANR	62277	Identifier	cv		62271	1					
ANR	62278	AssignmentExpression	* cv = & CV_DEF_OF ( var )		62271	2		=			
ANR	62279	Identifier	cv		62271	0					
ANR	62280	UnaryOperationExpression	& CV_DEF_OF ( var )		62271	1					
ANR	62281	UnaryOperator	&		62271	0					
ANR	62282	CallExpression	CV_DEF_OF ( var )		62271	1					
ANR	62283	Callee	CV_DEF_OF		62271	0					
ANR	62284	Identifier	CV_DEF_OF		62271	0					
ANR	62285	ArgumentList	var		62271	1					
ANR	62286	Argument	var		62271	0					
ANR	62287	Identifier	var		62271	0					
ANR	62288	IfStatement	"if ( ! EG ( active_symbol_table ) || zend_hash_quick_find ( EG ( active_symbol_table ) , cv -> name , cv -> name_len + 1 , cv -> hash_value , ( void * * ) ptr ) == FAILURE )"		62271	1					
ANR	62289	Condition	"! EG ( active_symbol_table ) || zend_hash_quick_find ( EG ( active_symbol_table ) , cv -> name , cv -> name_len + 1 , cv -> hash_value , ( void * * ) ptr ) == FAILURE"	191:5:6610:6752	62271	0	True				
ANR	62290	OrExpression	"! EG ( active_symbol_table ) || zend_hash_quick_find ( EG ( active_symbol_table ) , cv -> name , cv -> name_len + 1 , cv -> hash_value , ( void * * ) ptr ) == FAILURE"		62271	0		||			
ANR	62291	UnaryOperationExpression	! EG ( active_symbol_table )		62271	0					
ANR	62292	UnaryOperator	!		62271	0					
ANR	62293	CallExpression	EG ( active_symbol_table )		62271	1					
ANR	62294	Callee	EG		62271	0					
ANR	62295	Identifier	EG		62271	0					
ANR	62296	ArgumentList	active_symbol_table		62271	1					
ANR	62297	Argument	active_symbol_table		62271	0					
ANR	62298	Identifier	active_symbol_table		62271	0					
ANR	62299	EqualityExpression	"zend_hash_quick_find ( EG ( active_symbol_table ) , cv -> name , cv -> name_len + 1 , cv -> hash_value , ( void * * ) ptr ) == FAILURE"		62271	1		==			
ANR	62300	CallExpression	"zend_hash_quick_find ( EG ( active_symbol_table ) , cv -> name , cv -> name_len + 1 , cv -> hash_value , ( void * * ) ptr )"		62271	0					
ANR	62301	Callee	zend_hash_quick_find		62271	0					
ANR	62302	Identifier	zend_hash_quick_find		62271	0					
ANR	62303	ArgumentList	EG ( active_symbol_table )		62271	1					
ANR	62304	Argument	EG ( active_symbol_table )		62271	0					
ANR	62305	CallExpression	EG ( active_symbol_table )		62271	0					
ANR	62306	Callee	EG		62271	0					
ANR	62307	Identifier	EG		62271	0					
ANR	62308	ArgumentList	active_symbol_table		62271	1					
ANR	62309	Argument	active_symbol_table		62271	0					
ANR	62310	Identifier	active_symbol_table		62271	0					
ANR	62311	Argument	cv -> name		62271	1					
ANR	62312	PtrMemberAccess	cv -> name		62271	0					
ANR	62313	Identifier	cv		62271	0					
ANR	62314	Identifier	name		62271	1					
ANR	62315	Argument	cv -> name_len + 1		62271	2					
ANR	62316	AdditiveExpression	cv -> name_len + 1		62271	0		+			
ANR	62317	PtrMemberAccess	cv -> name_len		62271	0					
ANR	62318	Identifier	cv		62271	0					
ANR	62319	Identifier	name_len		62271	1					
ANR	62320	PrimaryExpression	1		62271	1					
ANR	62321	Argument	cv -> hash_value		62271	3					
ANR	62322	PtrMemberAccess	cv -> hash_value		62271	0					
ANR	62323	Identifier	cv		62271	0					
ANR	62324	Identifier	hash_value		62271	1					
ANR	62325	Argument	( void * * ) ptr		62271	4					
ANR	62326	CastExpression	( void * * ) ptr		62271	0					
ANR	62327	CastTarget	void * *		62271	0					
ANR	62328	Identifier	ptr		62271	1					
ANR	62329	Identifier	FAILURE		62271	1					
ANR	62330	CompoundStatement		5:117:199:199	62271	1					
ANR	62331	SwitchStatement	switch ( type )		62271	0					
ANR	62332	Condition	type	193:10:6767:6770	62271	0	True				
ANR	62333	Identifier	type		62271	0					
ANR	62334	CompoundStatement		6:16:217:217	62271	1					
ANR	62335	Label	case BP_VAR_R :	194:3:6778:6791	62271	0	True				
ANR	62336	Identifier	BP_VAR_R		62271	0					
ANR	62337	Label	case BP_VAR_UNSET :	195:3:6796:6813	62271	1	True				
ANR	62338	Identifier	BP_VAR_UNSET		62271	0					
ANR	62339	ExpressionStatement	"zend_error ( E_NOTICE , ""Undefined variable: %s"" , cv -> name )"	196:4:6819:6875	62271	2	True				
ANR	62340	CallExpression	"zend_error ( E_NOTICE , ""Undefined variable: %s"" , cv -> name )"		62271	0					
ANR	62341	Callee	zend_error		62271	0					
ANR	62342	Identifier	zend_error		62271	0					
ANR	62343	ArgumentList	E_NOTICE		62271	1					
ANR	62344	Argument	E_NOTICE		62271	0					
ANR	62345	Identifier	E_NOTICE		62271	0					
ANR	62346	Argument	"""Undefined variable: %s"""		62271	1					
ANR	62347	PrimaryExpression	"""Undefined variable: %s"""		62271	0					
ANR	62348	Argument	cv -> name		62271	2					
ANR	62349	PtrMemberAccess	cv -> name		62271	0					
ANR	62350	Identifier	cv		62271	0					
ANR	62351	Identifier	name		62271	1					
ANR	62352	Label	case BP_VAR_IS :	198:3:6918:6932	62271	3	True				
ANR	62353	Identifier	BP_VAR_IS		62271	0					
ANR	62354	ReturnStatement	return & EG ( uninitialized_zval_ptr ) ;	199:4:6938:6972	62271	4	True				
ANR	62355	UnaryOperationExpression	& EG ( uninitialized_zval_ptr )		62271	0					
ANR	62356	UnaryOperator	&		62271	0					
ANR	62357	CallExpression	EG ( uninitialized_zval_ptr )		62271	1					
ANR	62358	Callee	EG		62271	0					
ANR	62359	Identifier	EG		62271	0					
ANR	62360	ArgumentList	uninitialized_zval_ptr		62271	1					
ANR	62361	Argument	uninitialized_zval_ptr		62271	0					
ANR	62362	Identifier	uninitialized_zval_ptr		62271	0					
ANR	62363	BreakStatement	break ;	200:4:6978:6983	62271	5	True				
ANR	62364	Label	case BP_VAR_RW :	201:3:6988:7002	62271	6	True				
ANR	62365	Identifier	BP_VAR_RW		62271	0					
ANR	62366	ExpressionStatement	"zend_error ( E_NOTICE , ""Undefined variable: %s"" , cv -> name )"	202:4:7008:7064	62271	7	True				
ANR	62367	CallExpression	"zend_error ( E_NOTICE , ""Undefined variable: %s"" , cv -> name )"		62271	0					
ANR	62368	Callee	zend_error		62271	0					
ANR	62369	Identifier	zend_error		62271	0					
ANR	62370	ArgumentList	E_NOTICE		62271	1					
ANR	62371	Argument	E_NOTICE		62271	0					
ANR	62372	Identifier	E_NOTICE		62271	0					
ANR	62373	Argument	"""Undefined variable: %s"""		62271	1					
ANR	62374	PrimaryExpression	"""Undefined variable: %s"""		62271	0					
ANR	62375	Argument	cv -> name		62271	2					
ANR	62376	PtrMemberAccess	cv -> name		62271	0					
ANR	62377	Identifier	cv		62271	0					
ANR	62378	Identifier	name		62271	1					
ANR	62379	Label	case BP_VAR_W :	204:3:7107:7120	62271	8	True				
ANR	62380	Identifier	BP_VAR_W		62271	0					
ANR	62381	ExpressionStatement	Z_ADDREF ( EG ( uninitialized_zval ) )	205:4:7126:7158	62271	9	True				
ANR	62382	CallExpression	Z_ADDREF ( EG ( uninitialized_zval ) )		62271	0					
ANR	62383	Callee	Z_ADDREF		62271	0					
ANR	62384	Identifier	Z_ADDREF		62271	0					
ANR	62385	ArgumentList	EG ( uninitialized_zval )		62271	1					
ANR	62386	Argument	EG ( uninitialized_zval )		62271	0					
ANR	62387	CallExpression	EG ( uninitialized_zval )		62271	0					
ANR	62388	Callee	EG		62271	0					
ANR	62389	Identifier	EG		62271	0					
ANR	62390	ArgumentList	uninitialized_zval		62271	1					
ANR	62391	Argument	uninitialized_zval		62271	0					
ANR	62392	Identifier	uninitialized_zval		62271	0					
ANR	62393	IfStatement	if ( ! EG ( active_symbol_table ) )		62271	10					
ANR	62394	Condition	! EG ( active_symbol_table )	206:8:7168:7191	62271	0	True				
ANR	62395	UnaryOperationExpression	! EG ( active_symbol_table )		62271	0					
ANR	62396	UnaryOperator	!		62271	0					
ANR	62397	CallExpression	EG ( active_symbol_table )		62271	1					
ANR	62398	Callee	EG		62271	0					
ANR	62399	Identifier	EG		62271	0					
ANR	62400	ArgumentList	active_symbol_table		62271	1					
ANR	62401	Argument	active_symbol_table		62271	0					
ANR	62402	Identifier	active_symbol_table		62271	0					
ANR	62403	CompoundStatement		19:34:638:638	62271	1					
ANR	62404	ExpressionStatement	"* ptr = ( zval * * ) EX_CV_NUM ( EG ( current_execute_data ) , EG ( active_op_array ) -> last_var + var )"	207:5:7201:7288	62271	0	True				
ANR	62405	AssignmentExpression	"* ptr = ( zval * * ) EX_CV_NUM ( EG ( current_execute_data ) , EG ( active_op_array ) -> last_var + var )"		62271	0		=			
ANR	62406	UnaryOperationExpression	* ptr		62271	0					
ANR	62407	UnaryOperator	*		62271	0					
ANR	62408	Identifier	ptr		62271	1					
ANR	62409	CastExpression	"( zval * * ) EX_CV_NUM ( EG ( current_execute_data ) , EG ( active_op_array ) -> last_var + var )"		62271	1					
ANR	62410	CastTarget	zval * *		62271	0					
ANR	62411	CallExpression	"EX_CV_NUM ( EG ( current_execute_data ) , EG ( active_op_array ) -> last_var + var )"		62271	1					
ANR	62412	Callee	EX_CV_NUM		62271	0					
ANR	62413	Identifier	EX_CV_NUM		62271	0					
ANR	62414	ArgumentList	EG ( current_execute_data )		62271	1					
ANR	62415	Argument	EG ( current_execute_data )		62271	0					
ANR	62416	CallExpression	EG ( current_execute_data )		62271	0					
ANR	62417	Callee	EG		62271	0					
ANR	62418	Identifier	EG		62271	0					
ANR	62419	ArgumentList	current_execute_data		62271	1					
ANR	62420	Argument	current_execute_data		62271	0					
ANR	62421	Identifier	current_execute_data		62271	0					
ANR	62422	Argument	EG ( active_op_array ) -> last_var + var		62271	1					
ANR	62423	AdditiveExpression	EG ( active_op_array ) -> last_var + var		62271	0		+			
ANR	62424	PtrMemberAccess	EG ( active_op_array ) -> last_var		62271	0					
ANR	62425	CallExpression	EG ( active_op_array )		62271	0					
ANR	62426	Callee	EG		62271	0					
ANR	62427	Identifier	EG		62271	0					
ANR	62428	ArgumentList	active_op_array		62271	1					
ANR	62429	Argument	active_op_array		62271	0					
ANR	62430	Identifier	active_op_array		62271	0					
ANR	62431	Identifier	last_var		62271	1					
ANR	62432	Identifier	var		62271	1					
ANR	62433	ExpressionStatement	* * ptr = & EG ( uninitialized_zval )	208:5:7295:7326	62271	1	True				
ANR	62434	AssignmentExpression	* * ptr = & EG ( uninitialized_zval )		62271	0		=			
ANR	62435	UnaryOperationExpression	* * ptr		62271	0					
ANR	62436	UnaryOperator	*		62271	0					
ANR	62437	UnaryOperationExpression	* ptr		62271	1					
ANR	62438	UnaryOperator	*		62271	0					
ANR	62439	Identifier	ptr		62271	1					
ANR	62440	UnaryOperationExpression	& EG ( uninitialized_zval )		62271	1					
ANR	62441	UnaryOperator	&		62271	0					
ANR	62442	CallExpression	EG ( uninitialized_zval )		62271	1					
ANR	62443	Callee	EG		62271	0					
ANR	62444	Identifier	EG		62271	0					
ANR	62445	ArgumentList	uninitialized_zval		62271	1					
ANR	62446	Argument	uninitialized_zval		62271	0					
ANR	62447	Identifier	uninitialized_zval		62271	0					
ANR	62448	ElseStatement	else		62271	0					
ANR	62449	CompoundStatement		22:11:783:783	62271	0					
ANR	62450	ExpressionStatement	"zend_hash_quick_update ( EG ( active_symbol_table ) , cv -> name , cv -> name_len + 1 , cv -> hash_value , & EG ( uninitialized_zval_ptr ) , sizeof ( zval * ) , ( void * * ) ptr )"	210:5:7346:7494	62271	0	True				
ANR	62451	CallExpression	"zend_hash_quick_update ( EG ( active_symbol_table ) , cv -> name , cv -> name_len + 1 , cv -> hash_value , & EG ( uninitialized_zval_ptr ) , sizeof ( zval * ) , ( void * * ) ptr )"		62271	0					
ANR	62452	Callee	zend_hash_quick_update		62271	0					
ANR	62453	Identifier	zend_hash_quick_update		62271	0					
ANR	62454	ArgumentList	EG ( active_symbol_table )		62271	1					
ANR	62455	Argument	EG ( active_symbol_table )		62271	0					
ANR	62456	CallExpression	EG ( active_symbol_table )		62271	0					
ANR	62457	Callee	EG		62271	0					
ANR	62458	Identifier	EG		62271	0					
ANR	62459	ArgumentList	active_symbol_table		62271	1					
ANR	62460	Argument	active_symbol_table		62271	0					
ANR	62461	Identifier	active_symbol_table		62271	0					
ANR	62462	Argument	cv -> name		62271	1					
ANR	62463	PtrMemberAccess	cv -> name		62271	0					
ANR	62464	Identifier	cv		62271	0					
ANR	62465	Identifier	name		62271	1					
ANR	62466	Argument	cv -> name_len + 1		62271	2					
ANR	62467	AdditiveExpression	cv -> name_len + 1		62271	0		+			
ANR	62468	PtrMemberAccess	cv -> name_len		62271	0					
ANR	62469	Identifier	cv		62271	0					
ANR	62470	Identifier	name_len		62271	1					
ANR	62471	PrimaryExpression	1		62271	1					
ANR	62472	Argument	cv -> hash_value		62271	3					
ANR	62473	PtrMemberAccess	cv -> hash_value		62271	0					
ANR	62474	Identifier	cv		62271	0					
ANR	62475	Identifier	hash_value		62271	1					
ANR	62476	Argument	& EG ( uninitialized_zval_ptr )		62271	4					
ANR	62477	UnaryOperationExpression	& EG ( uninitialized_zval_ptr )		62271	0					
ANR	62478	UnaryOperator	&		62271	0					
ANR	62479	CallExpression	EG ( uninitialized_zval_ptr )		62271	1					
ANR	62480	Callee	EG		62271	0					
ANR	62481	Identifier	EG		62271	0					
ANR	62482	ArgumentList	uninitialized_zval_ptr		62271	1					
ANR	62483	Argument	uninitialized_zval_ptr		62271	0					
ANR	62484	Identifier	uninitialized_zval_ptr		62271	0					
ANR	62485	Argument	sizeof ( zval * )		62271	5					
ANR	62486	SizeofExpression	sizeof ( zval * )		62271	0					
ANR	62487	Sizeof	sizeof		62271	0					
ANR	62488	SizeofOperand	zval *		62271	1					
ANR	62489	Argument	( void * * ) ptr		62271	6					
ANR	62490	CastExpression	( void * * ) ptr		62271	0					
ANR	62491	CastTarget	void * *		62271	0					
ANR	62492	Identifier	ptr		62271	1					
ANR	62493	BreakStatement	break ;	212:4:7506:7511	62271	11	True				
ANR	62494	ReturnStatement	return * ptr ;	215:1:7521:7532	62271	2	True				
ANR	62495	UnaryOperationExpression	* ptr		62271	0					
ANR	62496	UnaryOperator	*		62271	0					
ANR	62497	Identifier	ptr		62271	1					
ANR	62498	ReturnType	static zend_never_inline zval * *		62271	1					
ANR	62499	Identifier	_get_zval_cv_lookup		62271	2					
ANR	62500	ParameterList	"zval * * * ptr , zend_uint var , int type TSRMLS_DC"		62271	3					
ANR	62501	Parameter	zval * * * ptr	187:52:6507:6517	62271	0	True				
ANR	62502	ParameterType	zval * * *		62271	0					
ANR	62503	Identifier	ptr		62271	1					
ANR	62504	Parameter	zend_uint var	187:65:6520:6532	62271	1	True				
ANR	62505	ParameterType	zend_uint		62271	0					
ANR	62506	Identifier	var		62271	1					
ANR	62507	Parameter	int type TSRMLS_DC	187:80:6535:6552	62271	2	True				
ANR	62508	ParameterType	int type		62271	0					
ANR	62509	Identifier	TSRMLS_DC		62271	1					
ANR	62510	CFGEntryNode	ENTRY		62271		True				
ANR	62511	CFGExitNode	EXIT		62271		True				
ANR	62512	Symbol	* * ptr		62271						
ANR	62513	Symbol	cv -> hash_value		62271						
ANR	62514	Symbol	current_execute_data		62271						
ANR	62515	Symbol	* EG		62271						
ANR	62516	Symbol	type		62271						
ANR	62517	Symbol	TSRMLS_DC		62271						
ANR	62518	Symbol	& EG		62271						
ANR	62519	Symbol	zend_hash_quick_find		62271						
ANR	62520	Symbol	& CV_DEF_OF		62271						
ANR	62521	Symbol	active_symbol_table		62271						
ANR	62522	Symbol	* ptr		62271						
ANR	62523	Symbol	cv -> name_len		62271						
ANR	62524	Symbol	uninitialized_zval		62271						
ANR	62525	Symbol	EX_CV_NUM		62271						
ANR	62526	Symbol	EG		62271						
ANR	62527	Symbol	var		62271						
ANR	62528	Symbol	active_op_array		62271						
ANR	62529	Symbol	EG ( active_op_array ) -> last_var		62271						
ANR	62530	Symbol	E_NOTICE		62271						
ANR	62531	Symbol	FAILURE		62271						
ANR	62532	Symbol	ptr		62271						
ANR	62533	Symbol	cv		62271						
ANR	62534	Symbol	uninitialized_zval_ptr		62271						
ANR	62535	Symbol	* cv		62271						
ANR	62536	Symbol	cv -> name		62271						
ANR	62537	Function	_get_zval_cv_lookup_BP_VAR_R	218:0:7537:7953							
ANR	62538	FunctionDef	"_get_zval_cv_lookup_BP_VAR_R (zval * * * ptr , zend_uint var TSRMLS_DC)"		62537	0					
ANR	62539	CompoundStatement		219:0:7636:7953	62537	0					
ANR	62540	IdentifierDeclStatement	zend_compiled_variable * cv = & CV_DEF_OF ( var ) ;	220:1:7639:7683	62537	0	True				
ANR	62541	IdentifierDecl	* cv = & CV_DEF_OF ( var )		62537	0					
ANR	62542	IdentifierDeclType	zend_compiled_variable *		62537	0					
ANR	62543	Identifier	cv		62537	1					
ANR	62544	AssignmentExpression	* cv = & CV_DEF_OF ( var )		62537	2		=			
ANR	62545	Identifier	cv		62537	0					
ANR	62546	UnaryOperationExpression	& CV_DEF_OF ( var )		62537	1					
ANR	62547	UnaryOperator	&		62537	0					
ANR	62548	CallExpression	CV_DEF_OF ( var )		62537	1					
ANR	62549	Callee	CV_DEF_OF		62537	0					
ANR	62550	Identifier	CV_DEF_OF		62537	0					
ANR	62551	ArgumentList	var		62537	1					
ANR	62552	Argument	var		62537	0					
ANR	62553	Identifier	var		62537	0					
ANR	62554	IfStatement	"if ( ! EG ( active_symbol_table ) || zend_hash_quick_find ( EG ( active_symbol_table ) , cv -> name , cv -> name_len + 1 , cv -> hash_value , ( void * * ) ptr ) == FAILURE )"		62537	1					
ANR	62555	Condition	"! EG ( active_symbol_table ) || zend_hash_quick_find ( EG ( active_symbol_table ) , cv -> name , cv -> name_len + 1 , cv -> hash_value , ( void * * ) ptr ) == FAILURE"	222:5:7691:7833	62537	0	True				
ANR	62556	OrExpression	"! EG ( active_symbol_table ) || zend_hash_quick_find ( EG ( active_symbol_table ) , cv -> name , cv -> name_len + 1 , cv -> hash_value , ( void * * ) ptr ) == FAILURE"		62537	0		||			
ANR	62557	UnaryOperationExpression	! EG ( active_symbol_table )		62537	0					
ANR	62558	UnaryOperator	!		62537	0					
ANR	62559	CallExpression	EG ( active_symbol_table )		62537	1					
ANR	62560	Callee	EG		62537	0					
ANR	62561	Identifier	EG		62537	0					
ANR	62562	ArgumentList	active_symbol_table		62537	1					
ANR	62563	Argument	active_symbol_table		62537	0					
ANR	62564	Identifier	active_symbol_table		62537	0					
ANR	62565	EqualityExpression	"zend_hash_quick_find ( EG ( active_symbol_table ) , cv -> name , cv -> name_len + 1 , cv -> hash_value , ( void * * ) ptr ) == FAILURE"		62537	1		==			
ANR	62566	CallExpression	"zend_hash_quick_find ( EG ( active_symbol_table ) , cv -> name , cv -> name_len + 1 , cv -> hash_value , ( void * * ) ptr )"		62537	0					
ANR	62567	Callee	zend_hash_quick_find		62537	0					
ANR	62568	Identifier	zend_hash_quick_find		62537	0					
ANR	62569	ArgumentList	EG ( active_symbol_table )		62537	1					
ANR	62570	Argument	EG ( active_symbol_table )		62537	0					
ANR	62571	CallExpression	EG ( active_symbol_table )		62537	0					
ANR	62572	Callee	EG		62537	0					
ANR	62573	Identifier	EG		62537	0					
ANR	62574	ArgumentList	active_symbol_table		62537	1					
ANR	62575	Argument	active_symbol_table		62537	0					
ANR	62576	Identifier	active_symbol_table		62537	0					
ANR	62577	Argument	cv -> name		62537	1					
ANR	62578	PtrMemberAccess	cv -> name		62537	0					
ANR	62579	Identifier	cv		62537	0					
ANR	62580	Identifier	name		62537	1					
ANR	62581	Argument	cv -> name_len + 1		62537	2					
ANR	62582	AdditiveExpression	cv -> name_len + 1		62537	0		+			
ANR	62583	PtrMemberAccess	cv -> name_len		62537	0					
ANR	62584	Identifier	cv		62537	0					
ANR	62585	Identifier	name_len		62537	1					
ANR	62586	PrimaryExpression	1		62537	1					
ANR	62587	Argument	cv -> hash_value		62537	3					
ANR	62588	PtrMemberAccess	cv -> hash_value		62537	0					
ANR	62589	Identifier	cv		62537	0					
ANR	62590	Identifier	hash_value		62537	1					
ANR	62591	Argument	( void * * ) ptr		62537	4					
ANR	62592	CastExpression	( void * * ) ptr		62537	0					
ANR	62593	CastTarget	void * *		62537	0					
ANR	62594	Identifier	ptr		62537	1					
ANR	62595	Identifier	FAILURE		62537	1					
ANR	62596	CompoundStatement		5:117:199:199	62537	1					
ANR	62597	ExpressionStatement	"zend_error ( E_NOTICE , ""Undefined variable: %s"" , cv -> name )"	224:2:7840:7896	62537	0	True				
ANR	62598	CallExpression	"zend_error ( E_NOTICE , ""Undefined variable: %s"" , cv -> name )"		62537	0					
ANR	62599	Callee	zend_error		62537	0					
ANR	62600	Identifier	zend_error		62537	0					
ANR	62601	ArgumentList	E_NOTICE		62537	1					
ANR	62602	Argument	E_NOTICE		62537	0					
ANR	62603	Identifier	E_NOTICE		62537	0					
ANR	62604	Argument	"""Undefined variable: %s"""		62537	1					
ANR	62605	PrimaryExpression	"""Undefined variable: %s"""		62537	0					
ANR	62606	Argument	cv -> name		62537	2					
ANR	62607	PtrMemberAccess	cv -> name		62537	0					
ANR	62608	Identifier	cv		62537	0					
ANR	62609	Identifier	name		62537	1					
ANR	62610	ReturnStatement	return & EG ( uninitialized_zval_ptr ) ;	225:2:7900:7934	62537	1	True				
ANR	62611	UnaryOperationExpression	& EG ( uninitialized_zval_ptr )		62537	0					
ANR	62612	UnaryOperator	&		62537	0					
ANR	62613	CallExpression	EG ( uninitialized_zval_ptr )		62537	1					
ANR	62614	Callee	EG		62537	0					
ANR	62615	Identifier	EG		62537	0					
ANR	62616	ArgumentList	uninitialized_zval_ptr		62537	1					
ANR	62617	Argument	uninitialized_zval_ptr		62537	0					
ANR	62618	Identifier	uninitialized_zval_ptr		62537	0					
ANR	62619	ReturnStatement	return * ptr ;	227:1:7940:7951	62537	2	True				
ANR	62620	UnaryOperationExpression	* ptr		62537	0					
ANR	62621	UnaryOperator	*		62537	0					
ANR	62622	Identifier	ptr		62537	1					
ANR	62623	ReturnType	static zend_never_inline zval * *		62537	1					
ANR	62624	Identifier	_get_zval_cv_lookup_BP_VAR_R		62537	2					
ANR	62625	ParameterList	"zval * * * ptr , zend_uint var TSRMLS_DC"		62537	3					
ANR	62626	Parameter	zval * * * ptr	218:61:7598:7608	62537	0	True				
ANR	62627	ParameterType	zval * * *		62537	0					
ANR	62628	Identifier	ptr		62537	1					
ANR	62629	Parameter	zend_uint var TSRMLS_DC	218:74:7611:7633	62537	1	True				
ANR	62630	ParameterType	zend_uint var		62537	0					
ANR	62631	Identifier	TSRMLS_DC		62537	1					
ANR	62632	CFGEntryNode	ENTRY		62537		True				
ANR	62633	CFGExitNode	EXIT		62537		True				
ANR	62634	Symbol	cv -> name_len		62537						
ANR	62635	Symbol	EG		62537						
ANR	62636	Symbol	var		62537						
ANR	62637	Symbol	cv -> hash_value		62537						
ANR	62638	Symbol	E_NOTICE		62537						
ANR	62639	Symbol	TSRMLS_DC		62537						
ANR	62640	Symbol	FAILURE		62537						
ANR	62641	Symbol	& EG		62537						
ANR	62642	Symbol	ptr		62537						
ANR	62643	Symbol	cv		62537						
ANR	62644	Symbol	zend_hash_quick_find		62537						
ANR	62645	Symbol	uninitialized_zval_ptr		62537						
ANR	62646	Symbol	& CV_DEF_OF		62537						
ANR	62647	Symbol	active_symbol_table		62537						
ANR	62648	Symbol	* ptr		62537						
ANR	62649	Symbol	* cv		62537						
ANR	62650	Symbol	cv -> name		62537						
ANR	62651	Function	_get_zval_cv_lookup_BP_VAR_UNSET	230:0:7956:8376							
ANR	62652	FunctionDef	"_get_zval_cv_lookup_BP_VAR_UNSET (zval * * * ptr , zend_uint var TSRMLS_DC)"		62651	0					
ANR	62653	CompoundStatement		231:0:8059:8376	62651	0					
ANR	62654	IdentifierDeclStatement	zend_compiled_variable * cv = & CV_DEF_OF ( var ) ;	232:1:8062:8106	62651	0	True				
ANR	62655	IdentifierDecl	* cv = & CV_DEF_OF ( var )		62651	0					
ANR	62656	IdentifierDeclType	zend_compiled_variable *		62651	0					
ANR	62657	Identifier	cv		62651	1					
ANR	62658	AssignmentExpression	* cv = & CV_DEF_OF ( var )		62651	2		=			
ANR	62659	Identifier	cv		62651	0					
ANR	62660	UnaryOperationExpression	& CV_DEF_OF ( var )		62651	1					
ANR	62661	UnaryOperator	&		62651	0					
ANR	62662	CallExpression	CV_DEF_OF ( var )		62651	1					
ANR	62663	Callee	CV_DEF_OF		62651	0					
ANR	62664	Identifier	CV_DEF_OF		62651	0					
ANR	62665	ArgumentList	var		62651	1					
ANR	62666	Argument	var		62651	0					
ANR	62667	Identifier	var		62651	0					
ANR	62668	IfStatement	"if ( ! EG ( active_symbol_table ) || zend_hash_quick_find ( EG ( active_symbol_table ) , cv -> name , cv -> name_len + 1 , cv -> hash_value , ( void * * ) ptr ) == FAILURE )"		62651	1					
ANR	62669	Condition	"! EG ( active_symbol_table ) || zend_hash_quick_find ( EG ( active_symbol_table ) , cv -> name , cv -> name_len + 1 , cv -> hash_value , ( void * * ) ptr ) == FAILURE"	234:5:8114:8256	62651	0	True				
ANR	62670	OrExpression	"! EG ( active_symbol_table ) || zend_hash_quick_find ( EG ( active_symbol_table ) , cv -> name , cv -> name_len + 1 , cv -> hash_value , ( void * * ) ptr ) == FAILURE"		62651	0		||			
ANR	62671	UnaryOperationExpression	! EG ( active_symbol_table )		62651	0					
ANR	62672	UnaryOperator	!		62651	0					
ANR	62673	CallExpression	EG ( active_symbol_table )		62651	1					
ANR	62674	Callee	EG		62651	0					
ANR	62675	Identifier	EG		62651	0					
ANR	62676	ArgumentList	active_symbol_table		62651	1					
ANR	62677	Argument	active_symbol_table		62651	0					
ANR	62678	Identifier	active_symbol_table		62651	0					
ANR	62679	EqualityExpression	"zend_hash_quick_find ( EG ( active_symbol_table ) , cv -> name , cv -> name_len + 1 , cv -> hash_value , ( void * * ) ptr ) == FAILURE"		62651	1		==			
ANR	62680	CallExpression	"zend_hash_quick_find ( EG ( active_symbol_table ) , cv -> name , cv -> name_len + 1 , cv -> hash_value , ( void * * ) ptr )"		62651	0					
ANR	62681	Callee	zend_hash_quick_find		62651	0					
ANR	62682	Identifier	zend_hash_quick_find		62651	0					
ANR	62683	ArgumentList	EG ( active_symbol_table )		62651	1					
ANR	62684	Argument	EG ( active_symbol_table )		62651	0					
ANR	62685	CallExpression	EG ( active_symbol_table )		62651	0					
ANR	62686	Callee	EG		62651	0					
ANR	62687	Identifier	EG		62651	0					
ANR	62688	ArgumentList	active_symbol_table		62651	1					
ANR	62689	Argument	active_symbol_table		62651	0					
ANR	62690	Identifier	active_symbol_table		62651	0					
ANR	62691	Argument	cv -> name		62651	1					
ANR	62692	PtrMemberAccess	cv -> name		62651	0					
ANR	62693	Identifier	cv		62651	0					
ANR	62694	Identifier	name		62651	1					
ANR	62695	Argument	cv -> name_len + 1		62651	2					
ANR	62696	AdditiveExpression	cv -> name_len + 1		62651	0		+			
ANR	62697	PtrMemberAccess	cv -> name_len		62651	0					
ANR	62698	Identifier	cv		62651	0					
ANR	62699	Identifier	name_len		62651	1					
ANR	62700	PrimaryExpression	1		62651	1					
ANR	62701	Argument	cv -> hash_value		62651	3					
ANR	62702	PtrMemberAccess	cv -> hash_value		62651	0					
ANR	62703	Identifier	cv		62651	0					
ANR	62704	Identifier	hash_value		62651	1					
ANR	62705	Argument	( void * * ) ptr		62651	4					
ANR	62706	CastExpression	( void * * ) ptr		62651	0					
ANR	62707	CastTarget	void * *		62651	0					
ANR	62708	Identifier	ptr		62651	1					
ANR	62709	Identifier	FAILURE		62651	1					
ANR	62710	CompoundStatement		5:117:199:199	62651	1					
ANR	62711	ExpressionStatement	"zend_error ( E_NOTICE , ""Undefined variable: %s"" , cv -> name )"	236:2:8263:8319	62651	0	True				
ANR	62712	CallExpression	"zend_error ( E_NOTICE , ""Undefined variable: %s"" , cv -> name )"		62651	0					
ANR	62713	Callee	zend_error		62651	0					
ANR	62714	Identifier	zend_error		62651	0					
ANR	62715	ArgumentList	E_NOTICE		62651	1					
ANR	62716	Argument	E_NOTICE		62651	0					
ANR	62717	Identifier	E_NOTICE		62651	0					
ANR	62718	Argument	"""Undefined variable: %s"""		62651	1					
ANR	62719	PrimaryExpression	"""Undefined variable: %s"""		62651	0					
ANR	62720	Argument	cv -> name		62651	2					
ANR	62721	PtrMemberAccess	cv -> name		62651	0					
ANR	62722	Identifier	cv		62651	0					
ANR	62723	Identifier	name		62651	1					
ANR	62724	ReturnStatement	return & EG ( uninitialized_zval_ptr ) ;	237:2:8323:8357	62651	1	True				
ANR	62725	UnaryOperationExpression	& EG ( uninitialized_zval_ptr )		62651	0					
ANR	62726	UnaryOperator	&		62651	0					
ANR	62727	CallExpression	EG ( uninitialized_zval_ptr )		62651	1					
ANR	62728	Callee	EG		62651	0					
ANR	62729	Identifier	EG		62651	0					
ANR	62730	ArgumentList	uninitialized_zval_ptr		62651	1					
ANR	62731	Argument	uninitialized_zval_ptr		62651	0					
ANR	62732	Identifier	uninitialized_zval_ptr		62651	0					
ANR	62733	ReturnStatement	return * ptr ;	239:1:8363:8374	62651	2	True				
ANR	62734	UnaryOperationExpression	* ptr		62651	0					
ANR	62735	UnaryOperator	*		62651	0					
ANR	62736	Identifier	ptr		62651	1					
ANR	62737	ReturnType	static zend_never_inline zval * *		62651	1					
ANR	62738	Identifier	_get_zval_cv_lookup_BP_VAR_UNSET		62651	2					
ANR	62739	ParameterList	"zval * * * ptr , zend_uint var TSRMLS_DC"		62651	3					
ANR	62740	Parameter	zval * * * ptr	230:65:8021:8031	62651	0	True				
ANR	62741	ParameterType	zval * * *		62651	0					
ANR	62742	Identifier	ptr		62651	1					
ANR	62743	Parameter	zend_uint var TSRMLS_DC	230:78:8034:8056	62651	1	True				
ANR	62744	ParameterType	zend_uint var		62651	0					
ANR	62745	Identifier	TSRMLS_DC		62651	1					
ANR	62746	CFGEntryNode	ENTRY		62651		True				
ANR	62747	CFGExitNode	EXIT		62651		True				
ANR	62748	Symbol	cv -> name_len		62651						
ANR	62749	Symbol	EG		62651						
ANR	62750	Symbol	var		62651						
ANR	62751	Symbol	cv -> hash_value		62651						
ANR	62752	Symbol	E_NOTICE		62651						
ANR	62753	Symbol	TSRMLS_DC		62651						
ANR	62754	Symbol	FAILURE		62651						
ANR	62755	Symbol	& EG		62651						
ANR	62756	Symbol	ptr		62651						
ANR	62757	Symbol	cv		62651						
ANR	62758	Symbol	zend_hash_quick_find		62651						
ANR	62759	Symbol	uninitialized_zval_ptr		62651						
ANR	62760	Symbol	& CV_DEF_OF		62651						
ANR	62761	Symbol	active_symbol_table		62651						
ANR	62762	Symbol	* ptr		62651						
ANR	62763	Symbol	* cv		62651						
ANR	62764	Symbol	cv -> name		62651						
ANR	62765	Function	_get_zval_cv_lookup_BP_VAR_IS	242:0:8379:8736							
ANR	62766	FunctionDef	"_get_zval_cv_lookup_BP_VAR_IS (zval * * * ptr , zend_uint var TSRMLS_DC)"		62765	0					
ANR	62767	CompoundStatement		243:0:8479:8736	62765	0					
ANR	62768	IdentifierDeclStatement	zend_compiled_variable * cv = & CV_DEF_OF ( var ) ;	244:1:8482:8526	62765	0	True				
ANR	62769	IdentifierDecl	* cv = & CV_DEF_OF ( var )		62765	0					
ANR	62770	IdentifierDeclType	zend_compiled_variable *		62765	0					
ANR	62771	Identifier	cv		62765	1					
ANR	62772	AssignmentExpression	* cv = & CV_DEF_OF ( var )		62765	2		=			
ANR	62773	Identifier	cv		62765	0					
ANR	62774	UnaryOperationExpression	& CV_DEF_OF ( var )		62765	1					
ANR	62775	UnaryOperator	&		62765	0					
ANR	62776	CallExpression	CV_DEF_OF ( var )		62765	1					
ANR	62777	Callee	CV_DEF_OF		62765	0					
ANR	62778	Identifier	CV_DEF_OF		62765	0					
ANR	62779	ArgumentList	var		62765	1					
ANR	62780	Argument	var		62765	0					
ANR	62781	Identifier	var		62765	0					
ANR	62782	IfStatement	"if ( ! EG ( active_symbol_table ) || zend_hash_quick_find ( EG ( active_symbol_table ) , cv -> name , cv -> name_len + 1 , cv -> hash_value , ( void * * ) ptr ) == FAILURE )"		62765	1					
ANR	62783	Condition	"! EG ( active_symbol_table ) || zend_hash_quick_find ( EG ( active_symbol_table ) , cv -> name , cv -> name_len + 1 , cv -> hash_value , ( void * * ) ptr ) == FAILURE"	246:5:8534:8676	62765	0	True				
ANR	62784	OrExpression	"! EG ( active_symbol_table ) || zend_hash_quick_find ( EG ( active_symbol_table ) , cv -> name , cv -> name_len + 1 , cv -> hash_value , ( void * * ) ptr ) == FAILURE"		62765	0		||			
ANR	62785	UnaryOperationExpression	! EG ( active_symbol_table )		62765	0					
ANR	62786	UnaryOperator	!		62765	0					
ANR	62787	CallExpression	EG ( active_symbol_table )		62765	1					
ANR	62788	Callee	EG		62765	0					
ANR	62789	Identifier	EG		62765	0					
ANR	62790	ArgumentList	active_symbol_table		62765	1					
ANR	62791	Argument	active_symbol_table		62765	0					
ANR	62792	Identifier	active_symbol_table		62765	0					
ANR	62793	EqualityExpression	"zend_hash_quick_find ( EG ( active_symbol_table ) , cv -> name , cv -> name_len + 1 , cv -> hash_value , ( void * * ) ptr ) == FAILURE"		62765	1		==			
ANR	62794	CallExpression	"zend_hash_quick_find ( EG ( active_symbol_table ) , cv -> name , cv -> name_len + 1 , cv -> hash_value , ( void * * ) ptr )"		62765	0					
ANR	62795	Callee	zend_hash_quick_find		62765	0					
ANR	62796	Identifier	zend_hash_quick_find		62765	0					
ANR	62797	ArgumentList	EG ( active_symbol_table )		62765	1					
ANR	62798	Argument	EG ( active_symbol_table )		62765	0					
ANR	62799	CallExpression	EG ( active_symbol_table )		62765	0					
ANR	62800	Callee	EG		62765	0					
ANR	62801	Identifier	EG		62765	0					
ANR	62802	ArgumentList	active_symbol_table		62765	1					
ANR	62803	Argument	active_symbol_table		62765	0					
ANR	62804	Identifier	active_symbol_table		62765	0					
ANR	62805	Argument	cv -> name		62765	1					
ANR	62806	PtrMemberAccess	cv -> name		62765	0					
ANR	62807	Identifier	cv		62765	0					
ANR	62808	Identifier	name		62765	1					
ANR	62809	Argument	cv -> name_len + 1		62765	2					
ANR	62810	AdditiveExpression	cv -> name_len + 1		62765	0		+			
ANR	62811	PtrMemberAccess	cv -> name_len		62765	0					
ANR	62812	Identifier	cv		62765	0					
ANR	62813	Identifier	name_len		62765	1					
ANR	62814	PrimaryExpression	1		62765	1					
ANR	62815	Argument	cv -> hash_value		62765	3					
ANR	62816	PtrMemberAccess	cv -> hash_value		62765	0					
ANR	62817	Identifier	cv		62765	0					
ANR	62818	Identifier	hash_value		62765	1					
ANR	62819	Argument	( void * * ) ptr		62765	4					
ANR	62820	CastExpression	( void * * ) ptr		62765	0					
ANR	62821	CastTarget	void * *		62765	0					
ANR	62822	Identifier	ptr		62765	1					
ANR	62823	Identifier	FAILURE		62765	1					
ANR	62824	CompoundStatement		5:117:199:199	62765	1					
ANR	62825	ReturnStatement	return & EG ( uninitialized_zval_ptr ) ;	248:2:8683:8717	62765	0	True				
ANR	62826	UnaryOperationExpression	& EG ( uninitialized_zval_ptr )		62765	0					
ANR	62827	UnaryOperator	&		62765	0					
ANR	62828	CallExpression	EG ( uninitialized_zval_ptr )		62765	1					
ANR	62829	Callee	EG		62765	0					
ANR	62830	Identifier	EG		62765	0					
ANR	62831	ArgumentList	uninitialized_zval_ptr		62765	1					
ANR	62832	Argument	uninitialized_zval_ptr		62765	0					
ANR	62833	Identifier	uninitialized_zval_ptr		62765	0					
ANR	62834	ReturnStatement	return * ptr ;	250:1:8723:8734	62765	2	True				
ANR	62835	UnaryOperationExpression	* ptr		62765	0					
ANR	62836	UnaryOperator	*		62765	0					
ANR	62837	Identifier	ptr		62765	1					
ANR	62838	ReturnType	static zend_never_inline zval * *		62765	1					
ANR	62839	Identifier	_get_zval_cv_lookup_BP_VAR_IS		62765	2					
ANR	62840	ParameterList	"zval * * * ptr , zend_uint var TSRMLS_DC"		62765	3					
ANR	62841	Parameter	zval * * * ptr	242:62:8441:8451	62765	0	True				
ANR	62842	ParameterType	zval * * *		62765	0					
ANR	62843	Identifier	ptr		62765	1					
ANR	62844	Parameter	zend_uint var TSRMLS_DC	242:75:8454:8476	62765	1	True				
ANR	62845	ParameterType	zend_uint var		62765	0					
ANR	62846	Identifier	TSRMLS_DC		62765	1					
ANR	62847	CFGEntryNode	ENTRY		62765		True				
ANR	62848	CFGExitNode	EXIT		62765		True				
ANR	62849	Symbol	cv -> name_len		62765						
ANR	62850	Symbol	EG		62765						
ANR	62851	Symbol	var		62765						
ANR	62852	Symbol	cv -> hash_value		62765						
ANR	62853	Symbol	TSRMLS_DC		62765						
ANR	62854	Symbol	FAILURE		62765						
ANR	62855	Symbol	& EG		62765						
ANR	62856	Symbol	ptr		62765						
ANR	62857	Symbol	cv		62765						
ANR	62858	Symbol	zend_hash_quick_find		62765						
ANR	62859	Symbol	uninitialized_zval_ptr		62765						
ANR	62860	Symbol	& CV_DEF_OF		62765						
ANR	62861	Symbol	active_symbol_table		62765						
ANR	62862	Symbol	* ptr		62765						
ANR	62863	Symbol	* cv		62765						
ANR	62864	Symbol	cv -> name		62765						
ANR	62865	Function	_get_zval_cv_lookup_BP_VAR_RW	253:0:8739:9535							
ANR	62866	FunctionDef	"_get_zval_cv_lookup_BP_VAR_RW (zval * * * ptr , zend_uint var TSRMLS_DC)"		62865	0					
ANR	62867	CompoundStatement		254:0:8839:9535	62865	0					
ANR	62868	IdentifierDeclStatement	zend_compiled_variable * cv = & CV_DEF_OF ( var ) ;	255:1:8842:8886	62865	0	True				
ANR	62869	IdentifierDecl	* cv = & CV_DEF_OF ( var )		62865	0					
ANR	62870	IdentifierDeclType	zend_compiled_variable *		62865	0					
ANR	62871	Identifier	cv		62865	1					
ANR	62872	AssignmentExpression	* cv = & CV_DEF_OF ( var )		62865	2		=			
ANR	62873	Identifier	cv		62865	0					
ANR	62874	UnaryOperationExpression	& CV_DEF_OF ( var )		62865	1					
ANR	62875	UnaryOperator	&		62865	0					
ANR	62876	CallExpression	CV_DEF_OF ( var )		62865	1					
ANR	62877	Callee	CV_DEF_OF		62865	0					
ANR	62878	Identifier	CV_DEF_OF		62865	0					
ANR	62879	ArgumentList	var		62865	1					
ANR	62880	Argument	var		62865	0					
ANR	62881	Identifier	var		62865	0					
ANR	62882	IfStatement	if ( ! EG ( active_symbol_table ) )		62865	1					
ANR	62883	Condition	! EG ( active_symbol_table )	257:5:8894:8917	62865	0	True				
ANR	62884	UnaryOperationExpression	! EG ( active_symbol_table )		62865	0					
ANR	62885	UnaryOperator	!		62865	0					
ANR	62886	CallExpression	EG ( active_symbol_table )		62865	1					
ANR	62887	Callee	EG		62865	0					
ANR	62888	Identifier	EG		62865	0					
ANR	62889	ArgumentList	active_symbol_table		62865	1					
ANR	62890	Argument	active_symbol_table		62865	0					
ANR	62891	Identifier	active_symbol_table		62865	0					
ANR	62892	CompoundStatement		4:31:80:80	62865	1					
ANR	62893	ExpressionStatement	Z_ADDREF ( EG ( uninitialized_zval ) )	258:2:8924:8956	62865	0	True				
ANR	62894	CallExpression	Z_ADDREF ( EG ( uninitialized_zval ) )		62865	0					
ANR	62895	Callee	Z_ADDREF		62865	0					
ANR	62896	Identifier	Z_ADDREF		62865	0					
ANR	62897	ArgumentList	EG ( uninitialized_zval )		62865	1					
ANR	62898	Argument	EG ( uninitialized_zval )		62865	0					
ANR	62899	CallExpression	EG ( uninitialized_zval )		62865	0					
ANR	62900	Callee	EG		62865	0					
ANR	62901	Identifier	EG		62865	0					
ANR	62902	ArgumentList	uninitialized_zval		62865	1					
ANR	62903	Argument	uninitialized_zval		62865	0					
ANR	62904	Identifier	uninitialized_zval		62865	0					
ANR	62905	ExpressionStatement	"* ptr = ( zval * * ) EX_CV_NUM ( EG ( current_execute_data ) , EG ( active_op_array ) -> last_var + var )"	259:2:8960:9047	62865	1	True				
ANR	62906	AssignmentExpression	"* ptr = ( zval * * ) EX_CV_NUM ( EG ( current_execute_data ) , EG ( active_op_array ) -> last_var + var )"		62865	0		=			
ANR	62907	UnaryOperationExpression	* ptr		62865	0					
ANR	62908	UnaryOperator	*		62865	0					
ANR	62909	Identifier	ptr		62865	1					
ANR	62910	CastExpression	"( zval * * ) EX_CV_NUM ( EG ( current_execute_data ) , EG ( active_op_array ) -> last_var + var )"		62865	1					
ANR	62911	CastTarget	zval * *		62865	0					
ANR	62912	CallExpression	"EX_CV_NUM ( EG ( current_execute_data ) , EG ( active_op_array ) -> last_var + var )"		62865	1					
ANR	62913	Callee	EX_CV_NUM		62865	0					
ANR	62914	Identifier	EX_CV_NUM		62865	0					
ANR	62915	ArgumentList	EG ( current_execute_data )		62865	1					
ANR	62916	Argument	EG ( current_execute_data )		62865	0					
ANR	62917	CallExpression	EG ( current_execute_data )		62865	0					
ANR	62918	Callee	EG		62865	0					
ANR	62919	Identifier	EG		62865	0					
ANR	62920	ArgumentList	current_execute_data		62865	1					
ANR	62921	Argument	current_execute_data		62865	0					
ANR	62922	Identifier	current_execute_data		62865	0					
ANR	62923	Argument	EG ( active_op_array ) -> last_var + var		62865	1					
ANR	62924	AdditiveExpression	EG ( active_op_array ) -> last_var + var		62865	0		+			
ANR	62925	PtrMemberAccess	EG ( active_op_array ) -> last_var		62865	0					
ANR	62926	CallExpression	EG ( active_op_array )		62865	0					
ANR	62927	Callee	EG		62865	0					
ANR	62928	Identifier	EG		62865	0					
ANR	62929	ArgumentList	active_op_array		62865	1					
ANR	62930	Argument	active_op_array		62865	0					
ANR	62931	Identifier	active_op_array		62865	0					
ANR	62932	Identifier	last_var		62865	1					
ANR	62933	Identifier	var		62865	1					
ANR	62934	ExpressionStatement	* * ptr = & EG ( uninitialized_zval )	260:2:9051:9082	62865	2	True				
ANR	62935	AssignmentExpression	* * ptr = & EG ( uninitialized_zval )		62865	0		=			
ANR	62936	UnaryOperationExpression	* * ptr		62865	0					
ANR	62937	UnaryOperator	*		62865	0					
ANR	62938	UnaryOperationExpression	* ptr		62865	1					
ANR	62939	UnaryOperator	*		62865	0					
ANR	62940	Identifier	ptr		62865	1					
ANR	62941	UnaryOperationExpression	& EG ( uninitialized_zval )		62865	1					
ANR	62942	UnaryOperator	&		62865	0					
ANR	62943	CallExpression	EG ( uninitialized_zval )		62865	1					
ANR	62944	Callee	EG		62865	0					
ANR	62945	Identifier	EG		62865	0					
ANR	62946	ArgumentList	uninitialized_zval		62865	1					
ANR	62947	Argument	uninitialized_zval		62865	0					
ANR	62948	Identifier	uninitialized_zval		62865	0					
ANR	62949	ExpressionStatement	"zend_error ( E_NOTICE , ""Undefined variable: %s"" , cv -> name )"	261:2:9086:9142	62865	3	True				
ANR	62950	CallExpression	"zend_error ( E_NOTICE , ""Undefined variable: %s"" , cv -> name )"		62865	0					
ANR	62951	Callee	zend_error		62865	0					
ANR	62952	Identifier	zend_error		62865	0					
ANR	62953	ArgumentList	E_NOTICE		62865	1					
ANR	62954	Argument	E_NOTICE		62865	0					
ANR	62955	Identifier	E_NOTICE		62865	0					
ANR	62956	Argument	"""Undefined variable: %s"""		62865	1					
ANR	62957	PrimaryExpression	"""Undefined variable: %s"""		62865	0					
ANR	62958	Argument	cv -> name		62865	2					
ANR	62959	PtrMemberAccess	cv -> name		62865	0					
ANR	62960	Identifier	cv		62865	0					
ANR	62961	Identifier	name		62865	1					
ANR	62962	ElseStatement	else		62865	0					
ANR	62963	IfStatement	"if ( zend_hash_quick_find ( EG ( active_symbol_table ) , cv -> name , cv -> name_len + 1 , cv -> hash_value , ( void * * ) ptr ) == FAILURE )"		62865	0					
ANR	62964	Condition	"zend_hash_quick_find ( EG ( active_symbol_table ) , cv -> name , cv -> name_len + 1 , cv -> hash_value , ( void * * ) ptr ) == FAILURE"	262:12:9156:9265	62865	0	True				
ANR	62965	EqualityExpression	"zend_hash_quick_find ( EG ( active_symbol_table ) , cv -> name , cv -> name_len + 1 , cv -> hash_value , ( void * * ) ptr ) == FAILURE"		62865	0		==			
ANR	62966	CallExpression	"zend_hash_quick_find ( EG ( active_symbol_table ) , cv -> name , cv -> name_len + 1 , cv -> hash_value , ( void * * ) ptr )"		62865	0					
ANR	62967	Callee	zend_hash_quick_find		62865	0					
ANR	62968	Identifier	zend_hash_quick_find		62865	0					
ANR	62969	ArgumentList	EG ( active_symbol_table )		62865	1					
ANR	62970	Argument	EG ( active_symbol_table )		62865	0					
ANR	62971	CallExpression	EG ( active_symbol_table )		62865	0					
ANR	62972	Callee	EG		62865	0					
ANR	62973	Identifier	EG		62865	0					
ANR	62974	ArgumentList	active_symbol_table		62865	1					
ANR	62975	Argument	active_symbol_table		62865	0					
ANR	62976	Identifier	active_symbol_table		62865	0					
ANR	62977	Argument	cv -> name		62865	1					
ANR	62978	PtrMemberAccess	cv -> name		62865	0					
ANR	62979	Identifier	cv		62865	0					
ANR	62980	Identifier	name		62865	1					
ANR	62981	Argument	cv -> name_len + 1		62865	2					
ANR	62982	AdditiveExpression	cv -> name_len + 1		62865	0		+			
ANR	62983	PtrMemberAccess	cv -> name_len		62865	0					
ANR	62984	Identifier	cv		62865	0					
ANR	62985	Identifier	name_len		62865	1					
ANR	62986	PrimaryExpression	1		62865	1					
ANR	62987	Argument	cv -> hash_value		62865	3					
ANR	62988	PtrMemberAccess	cv -> hash_value		62865	0					
ANR	62989	Identifier	cv		62865	0					
ANR	62990	Identifier	hash_value		62865	1					
ANR	62991	Argument	( void * * ) ptr		62865	4					
ANR	62992	CastExpression	( void * * ) ptr		62865	0					
ANR	62993	CastTarget	void * *		62865	0					
ANR	62994	Identifier	ptr		62865	1					
ANR	62995	Identifier	FAILURE		62865	1					
ANR	62996	CompoundStatement		9:124:428:428	62865	1					
ANR	62997	ExpressionStatement	Z_ADDREF ( EG ( uninitialized_zval ) )	263:2:9272:9304	62865	0	True				
ANR	62998	CallExpression	Z_ADDREF ( EG ( uninitialized_zval ) )		62865	0					
ANR	62999	Callee	Z_ADDREF		62865	0					
ANR	63000	Identifier	Z_ADDREF		62865	0					
ANR	63001	ArgumentList	EG ( uninitialized_zval )		62865	1					
ANR	63002	Argument	EG ( uninitialized_zval )		62865	0					
ANR	63003	CallExpression	EG ( uninitialized_zval )		62865	0					
ANR	63004	Callee	EG		62865	0					
ANR	63005	Identifier	EG		62865	0					
ANR	63006	ArgumentList	uninitialized_zval		62865	1					
ANR	63007	Argument	uninitialized_zval		62865	0					
ANR	63008	Identifier	uninitialized_zval		62865	0					
ANR	63009	ExpressionStatement	"zend_hash_quick_update ( EG ( active_symbol_table ) , cv -> name , cv -> name_len + 1 , cv -> hash_value , & EG ( uninitialized_zval_ptr ) , sizeof ( zval * ) , ( void * * ) ptr )"	264:2:9308:9456	62865	1	True				
ANR	63010	CallExpression	"zend_hash_quick_update ( EG ( active_symbol_table ) , cv -> name , cv -> name_len + 1 , cv -> hash_value , & EG ( uninitialized_zval_ptr ) , sizeof ( zval * ) , ( void * * ) ptr )"		62865	0					
ANR	63011	Callee	zend_hash_quick_update		62865	0					
ANR	63012	Identifier	zend_hash_quick_update		62865	0					
ANR	63013	ArgumentList	EG ( active_symbol_table )		62865	1					
ANR	63014	Argument	EG ( active_symbol_table )		62865	0					
ANR	63015	CallExpression	EG ( active_symbol_table )		62865	0					
ANR	63016	Callee	EG		62865	0					
ANR	63017	Identifier	EG		62865	0					
ANR	63018	ArgumentList	active_symbol_table		62865	1					
ANR	63019	Argument	active_symbol_table		62865	0					
ANR	63020	Identifier	active_symbol_table		62865	0					
ANR	63021	Argument	cv -> name		62865	1					
ANR	63022	PtrMemberAccess	cv -> name		62865	0					
ANR	63023	Identifier	cv		62865	0					
ANR	63024	Identifier	name		62865	1					
ANR	63025	Argument	cv -> name_len + 1		62865	2					
ANR	63026	AdditiveExpression	cv -> name_len + 1		62865	0		+			
ANR	63027	PtrMemberAccess	cv -> name_len		62865	0					
ANR	63028	Identifier	cv		62865	0					
ANR	63029	Identifier	name_len		62865	1					
ANR	63030	PrimaryExpression	1		62865	1					
ANR	63031	Argument	cv -> hash_value		62865	3					
ANR	63032	PtrMemberAccess	cv -> hash_value		62865	0					
ANR	63033	Identifier	cv		62865	0					
ANR	63034	Identifier	hash_value		62865	1					
ANR	63035	Argument	& EG ( uninitialized_zval_ptr )		62865	4					
ANR	63036	UnaryOperationExpression	& EG ( uninitialized_zval_ptr )		62865	0					
ANR	63037	UnaryOperator	&		62865	0					
ANR	63038	CallExpression	EG ( uninitialized_zval_ptr )		62865	1					
ANR	63039	Callee	EG		62865	0					
ANR	63040	Identifier	EG		62865	0					
ANR	63041	ArgumentList	uninitialized_zval_ptr		62865	1					
ANR	63042	Argument	uninitialized_zval_ptr		62865	0					
ANR	63043	Identifier	uninitialized_zval_ptr		62865	0					
ANR	63044	Argument	sizeof ( zval * )		62865	5					
ANR	63045	SizeofExpression	sizeof ( zval * )		62865	0					
ANR	63046	Sizeof	sizeof		62865	0					
ANR	63047	SizeofOperand	zval *		62865	1					
ANR	63048	Argument	( void * * ) ptr		62865	6					
ANR	63049	CastExpression	( void * * ) ptr		62865	0					
ANR	63050	CastTarget	void * *		62865	0					
ANR	63051	Identifier	ptr		62865	1					
ANR	63052	ExpressionStatement	"zend_error ( E_NOTICE , ""Undefined variable: %s"" , cv -> name )"	265:2:9460:9516	62865	2	True				
ANR	63053	CallExpression	"zend_error ( E_NOTICE , ""Undefined variable: %s"" , cv -> name )"		62865	0					
ANR	63054	Callee	zend_error		62865	0					
ANR	63055	Identifier	zend_error		62865	0					
ANR	63056	ArgumentList	E_NOTICE		62865	1					
ANR	63057	Argument	E_NOTICE		62865	0					
ANR	63058	Identifier	E_NOTICE		62865	0					
ANR	63059	Argument	"""Undefined variable: %s"""		62865	1					
ANR	63060	PrimaryExpression	"""Undefined variable: %s"""		62865	0					
ANR	63061	Argument	cv -> name		62865	2					
ANR	63062	PtrMemberAccess	cv -> name		62865	0					
ANR	63063	Identifier	cv		62865	0					
ANR	63064	Identifier	name		62865	1					
ANR	63065	ReturnStatement	return * ptr ;	267:1:9522:9533	62865	2	True				
ANR	63066	UnaryOperationExpression	* ptr		62865	0					
ANR	63067	UnaryOperator	*		62865	0					
ANR	63068	Identifier	ptr		62865	1					
ANR	63069	ReturnType	static zend_never_inline zval * *		62865	1					
ANR	63070	Identifier	_get_zval_cv_lookup_BP_VAR_RW		62865	2					
ANR	63071	ParameterList	"zval * * * ptr , zend_uint var TSRMLS_DC"		62865	3					
ANR	63072	Parameter	zval * * * ptr	253:62:8801:8811	62865	0	True				
ANR	63073	ParameterType	zval * * *		62865	0					
ANR	63074	Identifier	ptr		62865	1					
ANR	63075	Parameter	zend_uint var TSRMLS_DC	253:75:8814:8836	62865	1	True				
ANR	63076	ParameterType	zend_uint var		62865	0					
ANR	63077	Identifier	TSRMLS_DC		62865	1					
ANR	63078	CFGEntryNode	ENTRY		62865		True				
ANR	63079	CFGExitNode	EXIT		62865		True				
ANR	63080	Symbol	uninitialized_zval		62865						
ANR	63081	Symbol	EX_CV_NUM		62865						
ANR	63082	Symbol	cv -> name_len		62865						
ANR	63083	Symbol	EG		62865						
ANR	63084	Symbol	* * ptr		62865						
ANR	63085	Symbol	var		62865						
ANR	63086	Symbol	active_op_array		62865						
ANR	63087	Symbol	current_execute_data		62865						
ANR	63088	Symbol	cv -> hash_value		62865						
ANR	63089	Symbol	EG ( active_op_array ) -> last_var		62865						
ANR	63090	Symbol	E_NOTICE		62865						
ANR	63091	Symbol	* EG		62865						
ANR	63092	Symbol	TSRMLS_DC		62865						
ANR	63093	Symbol	& EG		62865						
ANR	63094	Symbol	FAILURE		62865						
ANR	63095	Symbol	ptr		62865						
ANR	63096	Symbol	cv		62865						
ANR	63097	Symbol	zend_hash_quick_find		62865						
ANR	63098	Symbol	uninitialized_zval_ptr		62865						
ANR	63099	Symbol	& CV_DEF_OF		62865						
ANR	63100	Symbol	active_symbol_table		62865						
ANR	63101	Symbol	* ptr		62865						
ANR	63102	Symbol	* cv		62865						
ANR	63103	Symbol	cv -> name		62865						
ANR	63104	Function	_get_zval_cv_lookup_BP_VAR_W	270:0:9538:10213							
ANR	63105	FunctionDef	"_get_zval_cv_lookup_BP_VAR_W (zval * * * ptr , zend_uint var TSRMLS_DC)"		63104	0					
ANR	63106	CompoundStatement		271:0:9637:10213	63104	0					
ANR	63107	IdentifierDeclStatement	zend_compiled_variable * cv = & CV_DEF_OF ( var ) ;	272:1:9640:9684	63104	0	True				
ANR	63108	IdentifierDecl	* cv = & CV_DEF_OF ( var )		63104	0					
ANR	63109	IdentifierDeclType	zend_compiled_variable *		63104	0					
ANR	63110	Identifier	cv		63104	1					
ANR	63111	AssignmentExpression	* cv = & CV_DEF_OF ( var )		63104	2		=			
ANR	63112	Identifier	cv		63104	0					
ANR	63113	UnaryOperationExpression	& CV_DEF_OF ( var )		63104	1					
ANR	63114	UnaryOperator	&		63104	0					
ANR	63115	CallExpression	CV_DEF_OF ( var )		63104	1					
ANR	63116	Callee	CV_DEF_OF		63104	0					
ANR	63117	Identifier	CV_DEF_OF		63104	0					
ANR	63118	ArgumentList	var		63104	1					
ANR	63119	Argument	var		63104	0					
ANR	63120	Identifier	var		63104	0					
ANR	63121	IfStatement	if ( ! EG ( active_symbol_table ) )		63104	1					
ANR	63122	Condition	! EG ( active_symbol_table )	274:5:9692:9715	63104	0	True				
ANR	63123	UnaryOperationExpression	! EG ( active_symbol_table )		63104	0					
ANR	63124	UnaryOperator	!		63104	0					
ANR	63125	CallExpression	EG ( active_symbol_table )		63104	1					
ANR	63126	Callee	EG		63104	0					
ANR	63127	Identifier	EG		63104	0					
ANR	63128	ArgumentList	active_symbol_table		63104	1					
ANR	63129	Argument	active_symbol_table		63104	0					
ANR	63130	Identifier	active_symbol_table		63104	0					
ANR	63131	CompoundStatement		4:31:80:80	63104	1					
ANR	63132	ExpressionStatement	Z_ADDREF ( EG ( uninitialized_zval ) )	275:2:9722:9754	63104	0	True				
ANR	63133	CallExpression	Z_ADDREF ( EG ( uninitialized_zval ) )		63104	0					
ANR	63134	Callee	Z_ADDREF		63104	0					
ANR	63135	Identifier	Z_ADDREF		63104	0					
ANR	63136	ArgumentList	EG ( uninitialized_zval )		63104	1					
ANR	63137	Argument	EG ( uninitialized_zval )		63104	0					
ANR	63138	CallExpression	EG ( uninitialized_zval )		63104	0					
ANR	63139	Callee	EG		63104	0					
ANR	63140	Identifier	EG		63104	0					
ANR	63141	ArgumentList	uninitialized_zval		63104	1					
ANR	63142	Argument	uninitialized_zval		63104	0					
ANR	63143	Identifier	uninitialized_zval		63104	0					
ANR	63144	ExpressionStatement	"* ptr = ( zval * * ) EX_CV_NUM ( EG ( current_execute_data ) , EG ( active_op_array ) -> last_var + var )"	276:2:9758:9845	63104	1	True				
ANR	63145	AssignmentExpression	"* ptr = ( zval * * ) EX_CV_NUM ( EG ( current_execute_data ) , EG ( active_op_array ) -> last_var + var )"		63104	0		=			
ANR	63146	UnaryOperationExpression	* ptr		63104	0					
ANR	63147	UnaryOperator	*		63104	0					
ANR	63148	Identifier	ptr		63104	1					
ANR	63149	CastExpression	"( zval * * ) EX_CV_NUM ( EG ( current_execute_data ) , EG ( active_op_array ) -> last_var + var )"		63104	1					
ANR	63150	CastTarget	zval * *		63104	0					
ANR	63151	CallExpression	"EX_CV_NUM ( EG ( current_execute_data ) , EG ( active_op_array ) -> last_var + var )"		63104	1					
ANR	63152	Callee	EX_CV_NUM		63104	0					
ANR	63153	Identifier	EX_CV_NUM		63104	0					
ANR	63154	ArgumentList	EG ( current_execute_data )		63104	1					
ANR	63155	Argument	EG ( current_execute_data )		63104	0					
ANR	63156	CallExpression	EG ( current_execute_data )		63104	0					
ANR	63157	Callee	EG		63104	0					
ANR	63158	Identifier	EG		63104	0					
ANR	63159	ArgumentList	current_execute_data		63104	1					
ANR	63160	Argument	current_execute_data		63104	0					
ANR	63161	Identifier	current_execute_data		63104	0					
ANR	63162	Argument	EG ( active_op_array ) -> last_var + var		63104	1					
ANR	63163	AdditiveExpression	EG ( active_op_array ) -> last_var + var		63104	0		+			
ANR	63164	PtrMemberAccess	EG ( active_op_array ) -> last_var		63104	0					
ANR	63165	CallExpression	EG ( active_op_array )		63104	0					
ANR	63166	Callee	EG		63104	0					
ANR	63167	Identifier	EG		63104	0					
ANR	63168	ArgumentList	active_op_array		63104	1					
ANR	63169	Argument	active_op_array		63104	0					
ANR	63170	Identifier	active_op_array		63104	0					
ANR	63171	Identifier	last_var		63104	1					
ANR	63172	Identifier	var		63104	1					
ANR	63173	ExpressionStatement	* * ptr = & EG ( uninitialized_zval )	277:2:9849:9880	63104	2	True				
ANR	63174	AssignmentExpression	* * ptr = & EG ( uninitialized_zval )		63104	0		=			
ANR	63175	UnaryOperationExpression	* * ptr		63104	0					
ANR	63176	UnaryOperator	*		63104	0					
ANR	63177	UnaryOperationExpression	* ptr		63104	1					
ANR	63178	UnaryOperator	*		63104	0					
ANR	63179	Identifier	ptr		63104	1					
ANR	63180	UnaryOperationExpression	& EG ( uninitialized_zval )		63104	1					
ANR	63181	UnaryOperator	&		63104	0					
ANR	63182	CallExpression	EG ( uninitialized_zval )		63104	1					
ANR	63183	Callee	EG		63104	0					
ANR	63184	Identifier	EG		63104	0					
ANR	63185	ArgumentList	uninitialized_zval		63104	1					
ANR	63186	Argument	uninitialized_zval		63104	0					
ANR	63187	Identifier	uninitialized_zval		63104	0					
ANR	63188	ElseStatement	else		63104	0					
ANR	63189	IfStatement	"if ( zend_hash_quick_find ( EG ( active_symbol_table ) , cv -> name , cv -> name_len + 1 , cv -> hash_value , ( void * * ) ptr ) == FAILURE )"		63104	0					
ANR	63190	Condition	"zend_hash_quick_find ( EG ( active_symbol_table ) , cv -> name , cv -> name_len + 1 , cv -> hash_value , ( void * * ) ptr ) == FAILURE"	278:12:9894:10003	63104	0	True				
ANR	63191	EqualityExpression	"zend_hash_quick_find ( EG ( active_symbol_table ) , cv -> name , cv -> name_len + 1 , cv -> hash_value , ( void * * ) ptr ) == FAILURE"		63104	0		==			
ANR	63192	CallExpression	"zend_hash_quick_find ( EG ( active_symbol_table ) , cv -> name , cv -> name_len + 1 , cv -> hash_value , ( void * * ) ptr )"		63104	0					
ANR	63193	Callee	zend_hash_quick_find		63104	0					
ANR	63194	Identifier	zend_hash_quick_find		63104	0					
ANR	63195	ArgumentList	EG ( active_symbol_table )		63104	1					
ANR	63196	Argument	EG ( active_symbol_table )		63104	0					
ANR	63197	CallExpression	EG ( active_symbol_table )		63104	0					
ANR	63198	Callee	EG		63104	0					
ANR	63199	Identifier	EG		63104	0					
ANR	63200	ArgumentList	active_symbol_table		63104	1					
ANR	63201	Argument	active_symbol_table		63104	0					
ANR	63202	Identifier	active_symbol_table		63104	0					
ANR	63203	Argument	cv -> name		63104	1					
ANR	63204	PtrMemberAccess	cv -> name		63104	0					
ANR	63205	Identifier	cv		63104	0					
ANR	63206	Identifier	name		63104	1					
ANR	63207	Argument	cv -> name_len + 1		63104	2					
ANR	63208	AdditiveExpression	cv -> name_len + 1		63104	0		+			
ANR	63209	PtrMemberAccess	cv -> name_len		63104	0					
ANR	63210	Identifier	cv		63104	0					
ANR	63211	Identifier	name_len		63104	1					
ANR	63212	PrimaryExpression	1		63104	1					
ANR	63213	Argument	cv -> hash_value		63104	3					
ANR	63214	PtrMemberAccess	cv -> hash_value		63104	0					
ANR	63215	Identifier	cv		63104	0					
ANR	63216	Identifier	hash_value		63104	1					
ANR	63217	Argument	( void * * ) ptr		63104	4					
ANR	63218	CastExpression	( void * * ) ptr		63104	0					
ANR	63219	CastTarget	void * *		63104	0					
ANR	63220	Identifier	ptr		63104	1					
ANR	63221	Identifier	FAILURE		63104	1					
ANR	63222	CompoundStatement		8:124:368:368	63104	1					
ANR	63223	ExpressionStatement	Z_ADDREF ( EG ( uninitialized_zval ) )	279:2:10010:10042	63104	0	True				
ANR	63224	CallExpression	Z_ADDREF ( EG ( uninitialized_zval ) )		63104	0					
ANR	63225	Callee	Z_ADDREF		63104	0					
ANR	63226	Identifier	Z_ADDREF		63104	0					
ANR	63227	ArgumentList	EG ( uninitialized_zval )		63104	1					
ANR	63228	Argument	EG ( uninitialized_zval )		63104	0					
ANR	63229	CallExpression	EG ( uninitialized_zval )		63104	0					
ANR	63230	Callee	EG		63104	0					
ANR	63231	Identifier	EG		63104	0					
ANR	63232	ArgumentList	uninitialized_zval		63104	1					
ANR	63233	Argument	uninitialized_zval		63104	0					
ANR	63234	Identifier	uninitialized_zval		63104	0					
ANR	63235	ExpressionStatement	"zend_hash_quick_update ( EG ( active_symbol_table ) , cv -> name , cv -> name_len + 1 , cv -> hash_value , & EG ( uninitialized_zval_ptr ) , sizeof ( zval * ) , ( void * * ) ptr )"	280:2:10046:10194	63104	1	True				
ANR	63236	CallExpression	"zend_hash_quick_update ( EG ( active_symbol_table ) , cv -> name , cv -> name_len + 1 , cv -> hash_value , & EG ( uninitialized_zval_ptr ) , sizeof ( zval * ) , ( void * * ) ptr )"		63104	0					
ANR	63237	Callee	zend_hash_quick_update		63104	0					
ANR	63238	Identifier	zend_hash_quick_update		63104	0					
ANR	63239	ArgumentList	EG ( active_symbol_table )		63104	1					
ANR	63240	Argument	EG ( active_symbol_table )		63104	0					
ANR	63241	CallExpression	EG ( active_symbol_table )		63104	0					
ANR	63242	Callee	EG		63104	0					
ANR	63243	Identifier	EG		63104	0					
ANR	63244	ArgumentList	active_symbol_table		63104	1					
ANR	63245	Argument	active_symbol_table		63104	0					
ANR	63246	Identifier	active_symbol_table		63104	0					
ANR	63247	Argument	cv -> name		63104	1					
ANR	63248	PtrMemberAccess	cv -> name		63104	0					
ANR	63249	Identifier	cv		63104	0					
ANR	63250	Identifier	name		63104	1					
ANR	63251	Argument	cv -> name_len + 1		63104	2					
ANR	63252	AdditiveExpression	cv -> name_len + 1		63104	0		+			
ANR	63253	PtrMemberAccess	cv -> name_len		63104	0					
ANR	63254	Identifier	cv		63104	0					
ANR	63255	Identifier	name_len		63104	1					
ANR	63256	PrimaryExpression	1		63104	1					
ANR	63257	Argument	cv -> hash_value		63104	3					
ANR	63258	PtrMemberAccess	cv -> hash_value		63104	0					
ANR	63259	Identifier	cv		63104	0					
ANR	63260	Identifier	hash_value		63104	1					
ANR	63261	Argument	& EG ( uninitialized_zval_ptr )		63104	4					
ANR	63262	UnaryOperationExpression	& EG ( uninitialized_zval_ptr )		63104	0					
ANR	63263	UnaryOperator	&		63104	0					
ANR	63264	CallExpression	EG ( uninitialized_zval_ptr )		63104	1					
ANR	63265	Callee	EG		63104	0					
ANR	63266	Identifier	EG		63104	0					
ANR	63267	ArgumentList	uninitialized_zval_ptr		63104	1					
ANR	63268	Argument	uninitialized_zval_ptr		63104	0					
ANR	63269	Identifier	uninitialized_zval_ptr		63104	0					
ANR	63270	Argument	sizeof ( zval * )		63104	5					
ANR	63271	SizeofExpression	sizeof ( zval * )		63104	0					
ANR	63272	Sizeof	sizeof		63104	0					
ANR	63273	SizeofOperand	zval *		63104	1					
ANR	63274	Argument	( void * * ) ptr		63104	6					
ANR	63275	CastExpression	( void * * ) ptr		63104	0					
ANR	63276	CastTarget	void * *		63104	0					
ANR	63277	Identifier	ptr		63104	1					
ANR	63278	ReturnStatement	return * ptr ;	282:1:10200:10211	63104	2	True				
ANR	63279	UnaryOperationExpression	* ptr		63104	0					
ANR	63280	UnaryOperator	*		63104	0					
ANR	63281	Identifier	ptr		63104	1					
ANR	63282	ReturnType	static zend_never_inline zval * *		63104	1					
ANR	63283	Identifier	_get_zval_cv_lookup_BP_VAR_W		63104	2					
ANR	63284	ParameterList	"zval * * * ptr , zend_uint var TSRMLS_DC"		63104	3					
ANR	63285	Parameter	zval * * * ptr	270:61:9599:9609	63104	0	True				
ANR	63286	ParameterType	zval * * *		63104	0					
ANR	63287	Identifier	ptr		63104	1					
ANR	63288	Parameter	zend_uint var TSRMLS_DC	270:74:9612:9634	63104	1	True				
ANR	63289	ParameterType	zend_uint var		63104	0					
ANR	63290	Identifier	TSRMLS_DC		63104	1					
ANR	63291	CFGEntryNode	ENTRY		63104		True				
ANR	63292	CFGExitNode	EXIT		63104		True				
ANR	63293	Symbol	uninitialized_zval		63104						
ANR	63294	Symbol	EX_CV_NUM		63104						
ANR	63295	Symbol	cv -> name_len		63104						
ANR	63296	Symbol	EG		63104						
ANR	63297	Symbol	* * ptr		63104						
ANR	63298	Symbol	var		63104						
ANR	63299	Symbol	active_op_array		63104						
ANR	63300	Symbol	current_execute_data		63104						
ANR	63301	Symbol	cv -> hash_value		63104						
ANR	63302	Symbol	EG ( active_op_array ) -> last_var		63104						
ANR	63303	Symbol	* EG		63104						
ANR	63304	Symbol	TSRMLS_DC		63104						
ANR	63305	Symbol	& EG		63104						
ANR	63306	Symbol	FAILURE		63104						
ANR	63307	Symbol	ptr		63104						
ANR	63308	Symbol	cv		63104						
ANR	63309	Symbol	zend_hash_quick_find		63104						
ANR	63310	Symbol	uninitialized_zval_ptr		63104						
ANR	63311	Symbol	& CV_DEF_OF		63104						
ANR	63312	Symbol	active_symbol_table		63104						
ANR	63313	Symbol	* ptr		63104						
ANR	63314	Symbol	* cv		63104						
ANR	63315	Symbol	cv -> name		63104						
ANR	63316	Function	_get_zval_ptr_cv	285:0:10216:10468							
ANR	63317	FunctionDef	"_get_zval_ptr_cv (zend_uint var , int type TSRMLS_DC)"		63316	0					
ANR	63318	CompoundStatement		286:0:10300:10468	63316	0					
ANR	63319	IdentifierDeclStatement	"zval * * * ptr = EX_CV_NUM ( EG ( current_execute_data ) , var ) ;"	287:1:10303:10357	63316	0	True				
ANR	63320	IdentifierDecl	"* * * ptr = EX_CV_NUM ( EG ( current_execute_data ) , var )"		63316	0					
ANR	63321	IdentifierDeclType	zval * * *		63316	0					
ANR	63322	Identifier	ptr		63316	1					
ANR	63323	AssignmentExpression	"* * * ptr = EX_CV_NUM ( EG ( current_execute_data ) , var )"		63316	2		=			
ANR	63324	Identifier	ptr		63316	0					
ANR	63325	CallExpression	"EX_CV_NUM ( EG ( current_execute_data ) , var )"		63316	1					
ANR	63326	Callee	EX_CV_NUM		63316	0					
ANR	63327	Identifier	EX_CV_NUM		63316	0					
ANR	63328	ArgumentList	EG ( current_execute_data )		63316	1					
ANR	63329	Argument	EG ( current_execute_data )		63316	0					
ANR	63330	CallExpression	EG ( current_execute_data )		63316	0					
ANR	63331	Callee	EG		63316	0					
ANR	63332	Identifier	EG		63316	0					
ANR	63333	ArgumentList	current_execute_data		63316	1					
ANR	63334	Argument	current_execute_data		63316	0					
ANR	63335	Identifier	current_execute_data		63316	0					
ANR	63336	Argument	var		63316	1					
ANR	63337	Identifier	var		63316	0					
ANR	63338	IfStatement	if ( UNEXPECTED ( * ptr == NULL ) )		63316	1					
ANR	63339	Condition	UNEXPECTED ( * ptr == NULL )	289:5:10365:10388	63316	0	True				
ANR	63340	CallExpression	UNEXPECTED ( * ptr == NULL )		63316	0					
ANR	63341	Callee	UNEXPECTED		63316	0					
ANR	63342	Identifier	UNEXPECTED		63316	0					
ANR	63343	ArgumentList	* ptr == NULL		63316	1					
ANR	63344	Argument	* ptr == NULL		63316	0					
ANR	63345	EqualityExpression	* ptr == NULL		63316	0		==			
ANR	63346	UnaryOperationExpression	* ptr		63316	0					
ANR	63347	UnaryOperator	*		63316	0					
ANR	63348	Identifier	ptr		63316	1					
ANR	63349	Identifier	NULL		63316	1					
ANR	63350	CompoundStatement		4:31:90:90	63316	1					
ANR	63351	Statement	return	290:2:10395:10400	63316	0	True				
ANR	63352	Statement	*	290:9:10402:10402	63316	1	True				
ANR	63353	Statement	_get_zval_cv_lookup	290:10:10403:10421	63316	2	True				
ANR	63354	Statement	(	290:29:10422:10422	63316	3	True				
ANR	63355	Statement	ptr	290:30:10423:10425	63316	4	True				
ANR	63356	Statement	","	290:33:10426:10426	63316	5	True				
ANR	63357	Statement	var	290:35:10428:10430	63316	6	True				
ANR	63358	Statement	","	290:38:10431:10431	63316	7	True				
ANR	63359	Statement	type	290:40:10433:10436	63316	8	True				
ANR	63360	Statement	TSRMLS_CC	290:45:10438:10446	63316	9	True				
ANR	63361	Statement	)	290:54:10447:10447	63316	10	True				
ANR	63362	ExpressionStatement		290:55:10448:10448	63316	11	True				
ANR	63363	ReturnStatement	return * * ptr ;	292:1:10454:10466	63316	2	True				
ANR	63364	UnaryOperationExpression	* * ptr		63316	0					
ANR	63365	UnaryOperator	*		63316	0					
ANR	63366	UnaryOperationExpression	* ptr		63316	1					
ANR	63367	UnaryOperator	*		63316	0					
ANR	63368	Identifier	ptr		63316	1					
ANR	63369	ReturnType	static zend_always_inline zval *		63316	1					
ANR	63370	Identifier	_get_zval_ptr_cv		63316	2					
ANR	63371	ParameterList	"zend_uint var , int type TSRMLS_DC"		63316	3					
ANR	63372	Parameter	zend_uint var	285:49:10265:10277	63316	0	True				
ANR	63373	ParameterType	zend_uint		63316	0					
ANR	63374	Identifier	var		63316	1					
ANR	63375	Parameter	int type TSRMLS_DC	285:64:10280:10297	63316	1	True				
ANR	63376	ParameterType	int type		63316	0					
ANR	63377	Identifier	TSRMLS_DC		63316	1					
ANR	63378	CFGEntryNode	ENTRY		63316		True				
ANR	63379	CFGExitNode	EXIT		63316		True				
ANR	63380	Symbol	EX_CV_NUM		63316						
ANR	63381	Symbol	UNEXPECTED		63316						
ANR	63382	Symbol	EG		63316						
ANR	63383	Symbol	* * ptr		63316						
ANR	63384	Symbol	NULL		63316						
ANR	63385	Symbol	var		63316						
ANR	63386	Symbol	current_execute_data		63316						
ANR	63387	Symbol	* ptr		63316						
ANR	63388	Symbol	TSRMLS_DC		63316						
ANR	63389	Symbol	ptr		63316						
ANR	63390	Function	_get_zval_ptr_cv_BP_VAR_R	295:0:10471:10752							
ANR	63391	FunctionDef	"_get_zval_ptr_cv_BP_VAR_R (const zend_execute_data * execute_data , zend_uint var TSRMLS_DC)"		63390	0					
ANR	63392	CompoundStatement		296:0:10593:10752	63390	0					
ANR	63393	IdentifierDeclStatement	"zval * * * ptr = EX_CV_NUM ( execute_data , var ) ;"	297:1:10596:10638	63390	0	True				
ANR	63394	IdentifierDecl	"* * * ptr = EX_CV_NUM ( execute_data , var )"		63390	0					
ANR	63395	IdentifierDeclType	zval * * *		63390	0					
ANR	63396	Identifier	ptr		63390	1					
ANR	63397	AssignmentExpression	"* * * ptr = EX_CV_NUM ( execute_data , var )"		63390	2		=			
ANR	63398	Identifier	ptr		63390	0					
ANR	63399	CallExpression	"EX_CV_NUM ( execute_data , var )"		63390	1					
ANR	63400	Callee	EX_CV_NUM		63390	0					
ANR	63401	Identifier	EX_CV_NUM		63390	0					
ANR	63402	ArgumentList	execute_data		63390	1					
ANR	63403	Argument	execute_data		63390	0					
ANR	63404	Identifier	execute_data		63390	0					
ANR	63405	Argument	var		63390	1					
ANR	63406	Identifier	var		63390	0					
ANR	63407	IfStatement	if ( UNEXPECTED ( * ptr == NULL ) )		63390	1					
ANR	63408	Condition	UNEXPECTED ( * ptr == NULL )	299:5:10646:10669	63390	0	True				
ANR	63409	CallExpression	UNEXPECTED ( * ptr == NULL )		63390	0					
ANR	63410	Callee	UNEXPECTED		63390	0					
ANR	63411	Identifier	UNEXPECTED		63390	0					
ANR	63412	ArgumentList	* ptr == NULL		63390	1					
ANR	63413	Argument	* ptr == NULL		63390	0					
ANR	63414	EqualityExpression	* ptr == NULL		63390	0		==			
ANR	63415	UnaryOperationExpression	* ptr		63390	0					
ANR	63416	UnaryOperator	*		63390	0					
ANR	63417	Identifier	ptr		63390	1					
ANR	63418	Identifier	NULL		63390	1					
ANR	63419	CompoundStatement		4:31:78:78	63390	1					
ANR	63420	Statement	return	300:2:10676:10681	63390	0	True				
ANR	63421	Statement	*	300:9:10683:10683	63390	1	True				
ANR	63422	Statement	_get_zval_cv_lookup_BP_VAR_R	300:10:10684:10711	63390	2	True				
ANR	63423	Statement	(	300:38:10712:10712	63390	3	True				
ANR	63424	Statement	ptr	300:39:10713:10715	63390	4	True				
ANR	63425	Statement	","	300:42:10716:10716	63390	5	True				
ANR	63426	Statement	var	300:44:10718:10720	63390	6	True				
ANR	63427	Statement	TSRMLS_CC	300:48:10722:10730	63390	7	True				
ANR	63428	Statement	)	300:57:10731:10731	63390	8	True				
ANR	63429	ExpressionStatement		300:58:10732:10732	63390	9	True				
ANR	63430	ReturnStatement	return * * ptr ;	302:1:10738:10750	63390	2	True				
ANR	63431	UnaryOperationExpression	* * ptr		63390	0					
ANR	63432	UnaryOperator	*		63390	0					
ANR	63433	UnaryOperationExpression	* ptr		63390	1					
ANR	63434	UnaryOperator	*		63390	0					
ANR	63435	Identifier	ptr		63390	1					
ANR	63436	ReturnType	static zend_always_inline zval *		63390	1					
ANR	63437	Identifier	_get_zval_ptr_cv_BP_VAR_R		63390	2					
ANR	63438	ParameterList	"const zend_execute_data * execute_data , zend_uint var TSRMLS_DC"		63390	3					
ANR	63439	Parameter	const zend_execute_data * execute_data	295:58:10529:10565	63390	0	True				
ANR	63440	ParameterType	const zend_execute_data *		63390	0					
ANR	63441	Identifier	execute_data		63390	1					
ANR	63442	Parameter	zend_uint var TSRMLS_DC	295:97:10568:10590	63390	1	True				
ANR	63443	ParameterType	zend_uint var		63390	0					
ANR	63444	Identifier	TSRMLS_DC		63390	1					
ANR	63445	CFGEntryNode	ENTRY		63390		True				
ANR	63446	CFGExitNode	EXIT		63390		True				
ANR	63447	Symbol	EX_CV_NUM		63390						
ANR	63448	Symbol	UNEXPECTED		63390						
ANR	63449	Symbol	* * ptr		63390						
ANR	63450	Symbol	NULL		63390						
ANR	63451	Symbol	var		63390						
ANR	63452	Symbol	* ptr		63390						
ANR	63453	Symbol	TSRMLS_DC		63390						
ANR	63454	Symbol	execute_data		63390						
ANR	63455	Symbol	ptr		63390						
ANR	63456	Function	_get_zval_ptr_cv_BP_VAR_UNSET	305:0:10755:11044							
ANR	63457	FunctionDef	"_get_zval_ptr_cv_BP_VAR_UNSET (const zend_execute_data * execute_data , zend_uint var TSRMLS_DC)"		63456	0					
ANR	63458	CompoundStatement		306:0:10881:11044	63456	0					
ANR	63459	IdentifierDeclStatement	"zval * * * ptr = EX_CV_NUM ( execute_data , var ) ;"	307:1:10884:10926	63456	0	True				
ANR	63460	IdentifierDecl	"* * * ptr = EX_CV_NUM ( execute_data , var )"		63456	0					
ANR	63461	IdentifierDeclType	zval * * *		63456	0					
ANR	63462	Identifier	ptr		63456	1					
ANR	63463	AssignmentExpression	"* * * ptr = EX_CV_NUM ( execute_data , var )"		63456	2		=			
ANR	63464	Identifier	ptr		63456	0					
ANR	63465	CallExpression	"EX_CV_NUM ( execute_data , var )"		63456	1					
ANR	63466	Callee	EX_CV_NUM		63456	0					
ANR	63467	Identifier	EX_CV_NUM		63456	0					
ANR	63468	ArgumentList	execute_data		63456	1					
ANR	63469	Argument	execute_data		63456	0					
ANR	63470	Identifier	execute_data		63456	0					
ANR	63471	Argument	var		63456	1					
ANR	63472	Identifier	var		63456	0					
ANR	63473	IfStatement	if ( UNEXPECTED ( * ptr == NULL ) )		63456	1					
ANR	63474	Condition	UNEXPECTED ( * ptr == NULL )	309:5:10934:10957	63456	0	True				
ANR	63475	CallExpression	UNEXPECTED ( * ptr == NULL )		63456	0					
ANR	63476	Callee	UNEXPECTED		63456	0					
ANR	63477	Identifier	UNEXPECTED		63456	0					
ANR	63478	ArgumentList	* ptr == NULL		63456	1					
ANR	63479	Argument	* ptr == NULL		63456	0					
ANR	63480	EqualityExpression	* ptr == NULL		63456	0		==			
ANR	63481	UnaryOperationExpression	* ptr		63456	0					
ANR	63482	UnaryOperator	*		63456	0					
ANR	63483	Identifier	ptr		63456	1					
ANR	63484	Identifier	NULL		63456	1					
ANR	63485	CompoundStatement		4:31:78:78	63456	1					
ANR	63486	Statement	return	310:2:10964:10969	63456	0	True				
ANR	63487	Statement	*	310:9:10971:10971	63456	1	True				
ANR	63488	Statement	_get_zval_cv_lookup_BP_VAR_UNSET	310:10:10972:11003	63456	2	True				
ANR	63489	Statement	(	310:42:11004:11004	63456	3	True				
ANR	63490	Statement	ptr	310:43:11005:11007	63456	4	True				
ANR	63491	Statement	","	310:46:11008:11008	63456	5	True				
ANR	63492	Statement	var	310:48:11010:11012	63456	6	True				
ANR	63493	Statement	TSRMLS_CC	310:52:11014:11022	63456	7	True				
ANR	63494	Statement	)	310:61:11023:11023	63456	8	True				
ANR	63495	ExpressionStatement		310:62:11024:11024	63456	9	True				
ANR	63496	ReturnStatement	return * * ptr ;	312:1:11030:11042	63456	2	True				
ANR	63497	UnaryOperationExpression	* * ptr		63456	0					
ANR	63498	UnaryOperator	*		63456	0					
ANR	63499	UnaryOperationExpression	* ptr		63456	1					
ANR	63500	UnaryOperator	*		63456	0					
ANR	63501	Identifier	ptr		63456	1					
ANR	63502	ReturnType	static zend_always_inline zval *		63456	1					
ANR	63503	Identifier	_get_zval_ptr_cv_BP_VAR_UNSET		63456	2					
ANR	63504	ParameterList	"const zend_execute_data * execute_data , zend_uint var TSRMLS_DC"		63456	3					
ANR	63505	Parameter	const zend_execute_data * execute_data	305:62:10817:10853	63456	0	True				
ANR	63506	ParameterType	const zend_execute_data *		63456	0					
ANR	63507	Identifier	execute_data		63456	1					
ANR	63508	Parameter	zend_uint var TSRMLS_DC	305:101:10856:10878	63456	1	True				
ANR	63509	ParameterType	zend_uint var		63456	0					
ANR	63510	Identifier	TSRMLS_DC		63456	1					
ANR	63511	CFGEntryNode	ENTRY		63456		True				
ANR	63512	CFGExitNode	EXIT		63456		True				
ANR	63513	Symbol	EX_CV_NUM		63456						
ANR	63514	Symbol	UNEXPECTED		63456						
ANR	63515	Symbol	* * ptr		63456						
ANR	63516	Symbol	NULL		63456						
ANR	63517	Symbol	var		63456						
ANR	63518	Symbol	* ptr		63456						
ANR	63519	Symbol	TSRMLS_DC		63456						
ANR	63520	Symbol	execute_data		63456						
ANR	63521	Symbol	ptr		63456						
ANR	63522	Function	_get_zval_ptr_cv_BP_VAR_IS	315:0:11047:11330							
ANR	63523	FunctionDef	"_get_zval_ptr_cv_BP_VAR_IS (const zend_execute_data * execute_data , zend_uint var TSRMLS_DC)"		63522	0					
ANR	63524	CompoundStatement		316:0:11170:11330	63522	0					
ANR	63525	IdentifierDeclStatement	"zval * * * ptr = EX_CV_NUM ( execute_data , var ) ;"	317:1:11173:11215	63522	0	True				
ANR	63526	IdentifierDecl	"* * * ptr = EX_CV_NUM ( execute_data , var )"		63522	0					
ANR	63527	IdentifierDeclType	zval * * *		63522	0					
ANR	63528	Identifier	ptr		63522	1					
ANR	63529	AssignmentExpression	"* * * ptr = EX_CV_NUM ( execute_data , var )"		63522	2		=			
ANR	63530	Identifier	ptr		63522	0					
ANR	63531	CallExpression	"EX_CV_NUM ( execute_data , var )"		63522	1					
ANR	63532	Callee	EX_CV_NUM		63522	0					
ANR	63533	Identifier	EX_CV_NUM		63522	0					
ANR	63534	ArgumentList	execute_data		63522	1					
ANR	63535	Argument	execute_data		63522	0					
ANR	63536	Identifier	execute_data		63522	0					
ANR	63537	Argument	var		63522	1					
ANR	63538	Identifier	var		63522	0					
ANR	63539	IfStatement	if ( UNEXPECTED ( * ptr == NULL ) )		63522	1					
ANR	63540	Condition	UNEXPECTED ( * ptr == NULL )	319:5:11223:11246	63522	0	True				
ANR	63541	CallExpression	UNEXPECTED ( * ptr == NULL )		63522	0					
ANR	63542	Callee	UNEXPECTED		63522	0					
ANR	63543	Identifier	UNEXPECTED		63522	0					
ANR	63544	ArgumentList	* ptr == NULL		63522	1					
ANR	63545	Argument	* ptr == NULL		63522	0					
ANR	63546	EqualityExpression	* ptr == NULL		63522	0		==			
ANR	63547	UnaryOperationExpression	* ptr		63522	0					
ANR	63548	UnaryOperator	*		63522	0					
ANR	63549	Identifier	ptr		63522	1					
ANR	63550	Identifier	NULL		63522	1					
ANR	63551	CompoundStatement		4:31:78:78	63522	1					
ANR	63552	Statement	return	320:2:11253:11258	63522	0	True				
ANR	63553	Statement	*	320:9:11260:11260	63522	1	True				
ANR	63554	Statement	_get_zval_cv_lookup_BP_VAR_IS	320:10:11261:11289	63522	2	True				
ANR	63555	Statement	(	320:39:11290:11290	63522	3	True				
ANR	63556	Statement	ptr	320:40:11291:11293	63522	4	True				
ANR	63557	Statement	","	320:43:11294:11294	63522	5	True				
ANR	63558	Statement	var	320:45:11296:11298	63522	6	True				
ANR	63559	Statement	TSRMLS_CC	320:49:11300:11308	63522	7	True				
ANR	63560	Statement	)	320:58:11309:11309	63522	8	True				
ANR	63561	ExpressionStatement		320:59:11310:11310	63522	9	True				
ANR	63562	ReturnStatement	return * * ptr ;	322:1:11316:11328	63522	2	True				
ANR	63563	UnaryOperationExpression	* * ptr		63522	0					
ANR	63564	UnaryOperator	*		63522	0					
ANR	63565	UnaryOperationExpression	* ptr		63522	1					
ANR	63566	UnaryOperator	*		63522	0					
ANR	63567	Identifier	ptr		63522	1					
ANR	63568	ReturnType	static zend_always_inline zval *		63522	1					
ANR	63569	Identifier	_get_zval_ptr_cv_BP_VAR_IS		63522	2					
ANR	63570	ParameterList	"const zend_execute_data * execute_data , zend_uint var TSRMLS_DC"		63522	3					
ANR	63571	Parameter	const zend_execute_data * execute_data	315:59:11106:11142	63522	0	True				
ANR	63572	ParameterType	const zend_execute_data *		63522	0					
ANR	63573	Identifier	execute_data		63522	1					
ANR	63574	Parameter	zend_uint var TSRMLS_DC	315:98:11145:11167	63522	1	True				
ANR	63575	ParameterType	zend_uint var		63522	0					
ANR	63576	Identifier	TSRMLS_DC		63522	1					
ANR	63577	CFGEntryNode	ENTRY		63522		True				
ANR	63578	CFGExitNode	EXIT		63522		True				
ANR	63579	Symbol	EX_CV_NUM		63522						
ANR	63580	Symbol	UNEXPECTED		63522						
ANR	63581	Symbol	* * ptr		63522						
ANR	63582	Symbol	NULL		63522						
ANR	63583	Symbol	var		63522						
ANR	63584	Symbol	* ptr		63522						
ANR	63585	Symbol	TSRMLS_DC		63522						
ANR	63586	Symbol	execute_data		63522						
ANR	63587	Symbol	ptr		63522						
ANR	63588	Function	_get_zval_ptr_cv_BP_VAR_RW	325:0:11333:11616							
ANR	63589	FunctionDef	"_get_zval_ptr_cv_BP_VAR_RW (const zend_execute_data * execute_data , zend_uint var TSRMLS_DC)"		63588	0					
ANR	63590	CompoundStatement		326:0:11456:11616	63588	0					
ANR	63591	IdentifierDeclStatement	"zval * * * ptr = EX_CV_NUM ( execute_data , var ) ;"	327:1:11459:11501	63588	0	True				
ANR	63592	IdentifierDecl	"* * * ptr = EX_CV_NUM ( execute_data , var )"		63588	0					
ANR	63593	IdentifierDeclType	zval * * *		63588	0					
ANR	63594	Identifier	ptr		63588	1					
ANR	63595	AssignmentExpression	"* * * ptr = EX_CV_NUM ( execute_data , var )"		63588	2		=			
ANR	63596	Identifier	ptr		63588	0					
ANR	63597	CallExpression	"EX_CV_NUM ( execute_data , var )"		63588	1					
ANR	63598	Callee	EX_CV_NUM		63588	0					
ANR	63599	Identifier	EX_CV_NUM		63588	0					
ANR	63600	ArgumentList	execute_data		63588	1					
ANR	63601	Argument	execute_data		63588	0					
ANR	63602	Identifier	execute_data		63588	0					
ANR	63603	Argument	var		63588	1					
ANR	63604	Identifier	var		63588	0					
ANR	63605	IfStatement	if ( UNEXPECTED ( * ptr == NULL ) )		63588	1					
ANR	63606	Condition	UNEXPECTED ( * ptr == NULL )	329:5:11509:11532	63588	0	True				
ANR	63607	CallExpression	UNEXPECTED ( * ptr == NULL )		63588	0					
ANR	63608	Callee	UNEXPECTED		63588	0					
ANR	63609	Identifier	UNEXPECTED		63588	0					
ANR	63610	ArgumentList	* ptr == NULL		63588	1					
ANR	63611	Argument	* ptr == NULL		63588	0					
ANR	63612	EqualityExpression	* ptr == NULL		63588	0		==			
ANR	63613	UnaryOperationExpression	* ptr		63588	0					
ANR	63614	UnaryOperator	*		63588	0					
ANR	63615	Identifier	ptr		63588	1					
ANR	63616	Identifier	NULL		63588	1					
ANR	63617	CompoundStatement		4:31:78:78	63588	1					
ANR	63618	Statement	return	330:2:11539:11544	63588	0	True				
ANR	63619	Statement	*	330:9:11546:11546	63588	1	True				
ANR	63620	Statement	_get_zval_cv_lookup_BP_VAR_RW	330:10:11547:11575	63588	2	True				
ANR	63621	Statement	(	330:39:11576:11576	63588	3	True				
ANR	63622	Statement	ptr	330:40:11577:11579	63588	4	True				
ANR	63623	Statement	","	330:43:11580:11580	63588	5	True				
ANR	63624	Statement	var	330:45:11582:11584	63588	6	True				
ANR	63625	Statement	TSRMLS_CC	330:49:11586:11594	63588	7	True				
ANR	63626	Statement	)	330:58:11595:11595	63588	8	True				
ANR	63627	ExpressionStatement		330:59:11596:11596	63588	9	True				
ANR	63628	ReturnStatement	return * * ptr ;	332:1:11602:11614	63588	2	True				
ANR	63629	UnaryOperationExpression	* * ptr		63588	0					
ANR	63630	UnaryOperator	*		63588	0					
ANR	63631	UnaryOperationExpression	* ptr		63588	1					
ANR	63632	UnaryOperator	*		63588	0					
ANR	63633	Identifier	ptr		63588	1					
ANR	63634	ReturnType	static zend_always_inline zval *		63588	1					
ANR	63635	Identifier	_get_zval_ptr_cv_BP_VAR_RW		63588	2					
ANR	63636	ParameterList	"const zend_execute_data * execute_data , zend_uint var TSRMLS_DC"		63588	3					
ANR	63637	Parameter	const zend_execute_data * execute_data	325:59:11392:11428	63588	0	True				
ANR	63638	ParameterType	const zend_execute_data *		63588	0					
ANR	63639	Identifier	execute_data		63588	1					
ANR	63640	Parameter	zend_uint var TSRMLS_DC	325:98:11431:11453	63588	1	True				
ANR	63641	ParameterType	zend_uint var		63588	0					
ANR	63642	Identifier	TSRMLS_DC		63588	1					
ANR	63643	CFGEntryNode	ENTRY		63588		True				
ANR	63644	CFGExitNode	EXIT		63588		True				
ANR	63645	Symbol	EX_CV_NUM		63588						
ANR	63646	Symbol	UNEXPECTED		63588						
ANR	63647	Symbol	* * ptr		63588						
ANR	63648	Symbol	NULL		63588						
ANR	63649	Symbol	var		63588						
ANR	63650	Symbol	* ptr		63588						
ANR	63651	Symbol	TSRMLS_DC		63588						
ANR	63652	Symbol	execute_data		63588						
ANR	63653	Symbol	ptr		63588						
ANR	63654	Function	_get_zval_ptr_cv_BP_VAR_W	335:0:11619:11900							
ANR	63655	FunctionDef	"_get_zval_ptr_cv_BP_VAR_W (const zend_execute_data * execute_data , zend_uint var TSRMLS_DC)"		63654	0					
ANR	63656	CompoundStatement		336:0:11741:11900	63654	0					
ANR	63657	IdentifierDeclStatement	"zval * * * ptr = EX_CV_NUM ( execute_data , var ) ;"	337:1:11744:11786	63654	0	True				
ANR	63658	IdentifierDecl	"* * * ptr = EX_CV_NUM ( execute_data , var )"		63654	0					
ANR	63659	IdentifierDeclType	zval * * *		63654	0					
ANR	63660	Identifier	ptr		63654	1					
ANR	63661	AssignmentExpression	"* * * ptr = EX_CV_NUM ( execute_data , var )"		63654	2		=			
ANR	63662	Identifier	ptr		63654	0					
ANR	63663	CallExpression	"EX_CV_NUM ( execute_data , var )"		63654	1					
ANR	63664	Callee	EX_CV_NUM		63654	0					
ANR	63665	Identifier	EX_CV_NUM		63654	0					
ANR	63666	ArgumentList	execute_data		63654	1					
ANR	63667	Argument	execute_data		63654	0					
ANR	63668	Identifier	execute_data		63654	0					
ANR	63669	Argument	var		63654	1					
ANR	63670	Identifier	var		63654	0					
ANR	63671	IfStatement	if ( UNEXPECTED ( * ptr == NULL ) )		63654	1					
ANR	63672	Condition	UNEXPECTED ( * ptr == NULL )	339:5:11794:11817	63654	0	True				
ANR	63673	CallExpression	UNEXPECTED ( * ptr == NULL )		63654	0					
ANR	63674	Callee	UNEXPECTED		63654	0					
ANR	63675	Identifier	UNEXPECTED		63654	0					
ANR	63676	ArgumentList	* ptr == NULL		63654	1					
ANR	63677	Argument	* ptr == NULL		63654	0					
ANR	63678	EqualityExpression	* ptr == NULL		63654	0		==			
ANR	63679	UnaryOperationExpression	* ptr		63654	0					
ANR	63680	UnaryOperator	*		63654	0					
ANR	63681	Identifier	ptr		63654	1					
ANR	63682	Identifier	NULL		63654	1					
ANR	63683	CompoundStatement		4:31:78:78	63654	1					
ANR	63684	Statement	return	340:2:11824:11829	63654	0	True				
ANR	63685	Statement	*	340:9:11831:11831	63654	1	True				
ANR	63686	Statement	_get_zval_cv_lookup_BP_VAR_W	340:10:11832:11859	63654	2	True				
ANR	63687	Statement	(	340:38:11860:11860	63654	3	True				
ANR	63688	Statement	ptr	340:39:11861:11863	63654	4	True				
ANR	63689	Statement	","	340:42:11864:11864	63654	5	True				
ANR	63690	Statement	var	340:44:11866:11868	63654	6	True				
ANR	63691	Statement	TSRMLS_CC	340:48:11870:11878	63654	7	True				
ANR	63692	Statement	)	340:57:11879:11879	63654	8	True				
ANR	63693	ExpressionStatement		340:58:11880:11880	63654	9	True				
ANR	63694	ReturnStatement	return * * ptr ;	342:1:11886:11898	63654	2	True				
ANR	63695	UnaryOperationExpression	* * ptr		63654	0					
ANR	63696	UnaryOperator	*		63654	0					
ANR	63697	UnaryOperationExpression	* ptr		63654	1					
ANR	63698	UnaryOperator	*		63654	0					
ANR	63699	Identifier	ptr		63654	1					
ANR	63700	ReturnType	static zend_always_inline zval *		63654	1					
ANR	63701	Identifier	_get_zval_ptr_cv_BP_VAR_W		63654	2					
ANR	63702	ParameterList	"const zend_execute_data * execute_data , zend_uint var TSRMLS_DC"		63654	3					
ANR	63703	Parameter	const zend_execute_data * execute_data	335:58:11677:11713	63654	0	True				
ANR	63704	ParameterType	const zend_execute_data *		63654	0					
ANR	63705	Identifier	execute_data		63654	1					
ANR	63706	Parameter	zend_uint var TSRMLS_DC	335:97:11716:11738	63654	1	True				
ANR	63707	ParameterType	zend_uint var		63654	0					
ANR	63708	Identifier	TSRMLS_DC		63654	1					
ANR	63709	CFGEntryNode	ENTRY		63654		True				
ANR	63710	CFGExitNode	EXIT		63654		True				
ANR	63711	Symbol	EX_CV_NUM		63654						
ANR	63712	Symbol	UNEXPECTED		63654						
ANR	63713	Symbol	* * ptr		63654						
ANR	63714	Symbol	NULL		63654						
ANR	63715	Symbol	var		63654						
ANR	63716	Symbol	* ptr		63654						
ANR	63717	Symbol	TSRMLS_DC		63654						
ANR	63718	Symbol	execute_data		63654						
ANR	63719	Symbol	ptr		63654						
ANR	63720	Function	_get_zval_ptr	345:0:11903:12628							
ANR	63721	FunctionDef	"_get_zval_ptr (int op_type , const znode_op * node , const zend_execute_data * execute_data , zend_free_op * should_free , int type TSRMLS_DC)"		63720	0					
ANR	63722	CompoundStatement		346:0:12058:12628	63720	0					
ANR	63723	SwitchStatement	switch ( op_type )		63720	0					
ANR	63724	Condition	op_type	348:9:12100:12106	63720	0	True				
ANR	63725	Identifier	op_type		63720	0					
ANR	63726	CompoundStatement		3:18:50:50	63720	1					
ANR	63727	Label	case IS_CONST :	349:2:12113:12126	63720	0	True				
ANR	63728	Identifier	IS_CONST		63720	0					
ANR	63729	ExpressionStatement	should_free -> var = 0	350:3:12131:12151	63720	1	True				
ANR	63730	AssignmentExpression	should_free -> var = 0		63720	0		=			
ANR	63731	PtrMemberAccess	should_free -> var		63720	0					
ANR	63732	Identifier	should_free		63720	0					
ANR	63733	Identifier	var		63720	1					
ANR	63734	PrimaryExpression	0		63720	1					
ANR	63735	ReturnStatement	return node -> zv ;	351:3:12156:12171	63720	2	True				
ANR	63736	PtrMemberAccess	node -> zv		63720	0					
ANR	63737	Identifier	node		63720	0					
ANR	63738	Identifier	zv		63720	1					
ANR	63739	BreakStatement	break ;	352:3:12176:12181	63720	3	True				
ANR	63740	Label	case IS_TMP_VAR :	353:2:12185:12200	63720	4	True				
ANR	63741	Identifier	IS_TMP_VAR		63720	0					
ANR	63742	ExpressionStatement	should_free -> var = TMP_FREE ( & EX_T ( node -> var ) . tmp_var )	354:3:12205:12258	63720	5	True				
ANR	63743	AssignmentExpression	should_free -> var = TMP_FREE ( & EX_T ( node -> var ) . tmp_var )		63720	0		=			
ANR	63744	PtrMemberAccess	should_free -> var		63720	0					
ANR	63745	Identifier	should_free		63720	0					
ANR	63746	Identifier	var		63720	1					
ANR	63747	CallExpression	TMP_FREE ( & EX_T ( node -> var ) . tmp_var )		63720	1					
ANR	63748	Callee	TMP_FREE		63720	0					
ANR	63749	Identifier	TMP_FREE		63720	0					
ANR	63750	ArgumentList	& EX_T ( node -> var ) . tmp_var		63720	1					
ANR	63751	Argument	& EX_T ( node -> var ) . tmp_var		63720	0					
ANR	63752	UnaryOperationExpression	& EX_T ( node -> var ) . tmp_var		63720	0					
ANR	63753	UnaryOperator	&		63720	0					
ANR	63754	MemberAccess	EX_T ( node -> var ) . tmp_var		63720	1					
ANR	63755	CallExpression	EX_T ( node -> var )		63720	0					
ANR	63756	Callee	EX_T		63720	0					
ANR	63757	Identifier	EX_T		63720	0					
ANR	63758	ArgumentList	node -> var		63720	1					
ANR	63759	Argument	node -> var		63720	0					
ANR	63760	PtrMemberAccess	node -> var		63720	0					
ANR	63761	Identifier	node		63720	0					
ANR	63762	Identifier	var		63720	1					
ANR	63763	Identifier	tmp_var		63720	1					
ANR	63764	ReturnStatement	return & EX_T ( node -> var ) . tmp_var ;	355:3:12263:12294	63720	6	True				
ANR	63765	UnaryOperationExpression	& EX_T ( node -> var ) . tmp_var		63720	0					
ANR	63766	UnaryOperator	&		63720	0					
ANR	63767	MemberAccess	EX_T ( node -> var ) . tmp_var		63720	1					
ANR	63768	CallExpression	EX_T ( node -> var )		63720	0					
ANR	63769	Callee	EX_T		63720	0					
ANR	63770	Identifier	EX_T		63720	0					
ANR	63771	ArgumentList	node -> var		63720	1					
ANR	63772	Argument	node -> var		63720	0					
ANR	63773	PtrMemberAccess	node -> var		63720	0					
ANR	63774	Identifier	node		63720	0					
ANR	63775	Identifier	var		63720	1					
ANR	63776	Identifier	tmp_var		63720	1					
ANR	63777	BreakStatement	break ;	356:3:12299:12304	63720	7	True				
ANR	63778	Label	case IS_VAR :	357:2:12308:12319	63720	8	True				
ANR	63779	Identifier	IS_VAR		63720	0					
ANR	63780	Statement	return	358:3:12324:12329	63720	9	True				
ANR	63781	Statement	_get_zval_ptr_var	358:10:12331:12347	63720	10	True				
ANR	63782	Statement	(	358:27:12348:12348	63720	11	True				
ANR	63783	Statement	node	358:28:12349:12352	63720	12	True				
ANR	63784	Statement	->	358:32:12353:12354	63720	13	True				
ANR	63785	Statement	var	358:34:12355:12357	63720	14	True				
ANR	63786	Statement	","	358:37:12358:12358	63720	15	True				
ANR	63787	Statement	execute_data	358:39:12360:12371	63720	16	True				
ANR	63788	Statement	","	358:51:12372:12372	63720	17	True				
ANR	63789	Statement	should_free	358:53:12374:12384	63720	18	True				
ANR	63790	Statement	TSRMLS_CC	358:65:12386:12394	63720	19	True				
ANR	63791	Statement	)	358:74:12395:12395	63720	20	True				
ANR	63792	ExpressionStatement		358:75:12396:12396	63720	21	True				
ANR	63793	BreakStatement	break ;	359:3:12401:12406	63720	22	True				
ANR	63794	Label	case IS_UNUSED :	360:2:12410:12424	63720	23	True				
ANR	63795	Identifier	IS_UNUSED		63720	0					
ANR	63796	ExpressionStatement	should_free -> var = 0	361:3:12429:12449	63720	24	True				
ANR	63797	AssignmentExpression	should_free -> var = 0		63720	0		=			
ANR	63798	PtrMemberAccess	should_free -> var		63720	0					
ANR	63799	Identifier	should_free		63720	0					
ANR	63800	Identifier	var		63720	1					
ANR	63801	PrimaryExpression	0		63720	1					
ANR	63802	ReturnStatement	return NULL ;	362:3:12454:12465	63720	25	True				
ANR	63803	Identifier	NULL		63720	0					
ANR	63804	BreakStatement	break ;	363:3:12470:12475	63720	26	True				
ANR	63805	Label	case IS_CV :	364:2:12479:12489	63720	27	True				
ANR	63806	Identifier	IS_CV		63720	0					
ANR	63807	ExpressionStatement	should_free -> var = 0	365:3:12494:12514	63720	28	True				
ANR	63808	AssignmentExpression	should_free -> var = 0		63720	0		=			
ANR	63809	PtrMemberAccess	should_free -> var		63720	0					
ANR	63810	Identifier	should_free		63720	0					
ANR	63811	Identifier	var		63720	1					
ANR	63812	PrimaryExpression	0		63720	1					
ANR	63813	Statement	return	366:3:12519:12524	63720	29	True				
ANR	63814	Statement	_get_zval_ptr_cv	366:10:12526:12541	63720	30	True				
ANR	63815	Statement	(	366:26:12542:12542	63720	31	True				
ANR	63816	Statement	node	366:27:12543:12546	63720	32	True				
ANR	63817	Statement	->	366:31:12547:12548	63720	33	True				
ANR	63818	Statement	var	366:33:12549:12551	63720	34	True				
ANR	63819	Statement	","	366:36:12552:12552	63720	35	True				
ANR	63820	Statement	type	366:38:12554:12557	63720	36	True				
ANR	63821	Statement	TSRMLS_CC	366:43:12559:12567	63720	37	True				
ANR	63822	Statement	)	366:52:12568:12568	63720	38	True				
ANR	63823	ExpressionStatement		366:53:12569:12569	63720	39	True				
ANR	63824	BreakStatement	break ;	367:3:12574:12579	63720	40	True				
ANR	63825	Statement	EMPTY_SWITCH_DEFAULT_CASE	368:2:12583:12607	63720	41	True				
ANR	63826	Statement	(	368:27:12608:12608	63720	42	True				
ANR	63827	Statement	)	368:28:12609:12609	63720	43	True				
ANR	63828	ReturnStatement	return NULL ;	370:1:12615:12626	63720	1	True				
ANR	63829	Identifier	NULL		63720	0					
ANR	63830	ReturnType	static inline zval *		63720	1					
ANR	63831	Identifier	_get_zval_ptr		63720	2					
ANR	63832	ParameterList	"int op_type , const znode_op * node , const zend_execute_data * execute_data , zend_free_op * should_free , int type TSRMLS_DC"		63720	3					
ANR	63833	Parameter	int op_type	345:34:11937:11947	63720	0	True				
ANR	63834	ParameterType	int		63720	0					
ANR	63835	Identifier	op_type		63720	1					
ANR	63836	Parameter	const znode_op * node	345:47:11950:11969	63720	1	True				
ANR	63837	ParameterType	const znode_op *		63720	0					
ANR	63838	Identifier	node		63720	1					
ANR	63839	Parameter	const zend_execute_data * execute_data	345:69:11972:12008	63720	2	True				
ANR	63840	ParameterType	const zend_execute_data *		63720	0					
ANR	63841	Identifier	execute_data		63720	1					
ANR	63842	Parameter	zend_free_op * should_free	345:108:12011:12035	63720	3	True				
ANR	63843	ParameterType	zend_free_op *		63720	0					
ANR	63844	Identifier	should_free		63720	1					
ANR	63845	Parameter	int type TSRMLS_DC	345:135:12038:12055	63720	4	True				
ANR	63846	ParameterType	int type		63720	0					
ANR	63847	Identifier	TSRMLS_DC		63720	1					
ANR	63848	CFGEntryNode	ENTRY		63720		True				
ANR	63849	CFGExitNode	EXIT		63720		True				
ANR	63850	Symbol	should_free		63720						
ANR	63851	Symbol	NULL		63720						
ANR	63852	Symbol	& EX_T ( node -> var ) . tmp_var		63720						
ANR	63853	Symbol	EX_T		63720						
ANR	63854	Symbol	node -> var		63720						
ANR	63855	Symbol	TSRMLS_DC		63720						
ANR	63856	Symbol	execute_data		63720						
ANR	63857	Symbol	* should_free		63720						
ANR	63858	Symbol	node		63720						
ANR	63859	Symbol	should_free -> var		63720						
ANR	63860	Symbol	TMP_FREE		63720						
ANR	63861	Symbol	& EX_T		63720						
ANR	63862	Symbol	* node		63720						
ANR	63863	Symbol	node -> zv		63720						
ANR	63864	Symbol	op_type		63720						
ANR	63865	DeclStmt									
ANR	63866	Decl							zval	zval * *	ptr_ptr
ANR	63867	DeclStmt									
ANR	63868	Decl							zval	zval * *	ptr_ptr
ANR	63869	Function	_get_zval_ptr_ptr_cv	399:0:13366:13621							
ANR	63870	FunctionDef	"_get_zval_ptr_ptr_cv (zend_uint var , int type TSRMLS_DC)"		63869	0					
ANR	63871	CompoundStatement		400:0:13455:13621	63869	0					
ANR	63872	IdentifierDeclStatement	"zval * * * ptr = EX_CV_NUM ( EG ( current_execute_data ) , var ) ;"	401:1:13458:13512	63869	0	True				
ANR	63873	IdentifierDecl	"* * * ptr = EX_CV_NUM ( EG ( current_execute_data ) , var )"		63869	0					
ANR	63874	IdentifierDeclType	zval * * *		63869	0					
ANR	63875	Identifier	ptr		63869	1					
ANR	63876	AssignmentExpression	"* * * ptr = EX_CV_NUM ( EG ( current_execute_data ) , var )"		63869	2		=			
ANR	63877	Identifier	ptr		63869	0					
ANR	63878	CallExpression	"EX_CV_NUM ( EG ( current_execute_data ) , var )"		63869	1					
ANR	63879	Callee	EX_CV_NUM		63869	0					
ANR	63880	Identifier	EX_CV_NUM		63869	0					
ANR	63881	ArgumentList	EG ( current_execute_data )		63869	1					
ANR	63882	Argument	EG ( current_execute_data )		63869	0					
ANR	63883	CallExpression	EG ( current_execute_data )		63869	0					
ANR	63884	Callee	EG		63869	0					
ANR	63885	Identifier	EG		63869	0					
ANR	63886	ArgumentList	current_execute_data		63869	1					
ANR	63887	Argument	current_execute_data		63869	0					
ANR	63888	Identifier	current_execute_data		63869	0					
ANR	63889	Argument	var		63869	1					
ANR	63890	Identifier	var		63869	0					
ANR	63891	IfStatement	if ( UNEXPECTED ( * ptr == NULL ) )		63869	1					
ANR	63892	Condition	UNEXPECTED ( * ptr == NULL )	403:5:13520:13543	63869	0	True				
ANR	63893	CallExpression	UNEXPECTED ( * ptr == NULL )		63869	0					
ANR	63894	Callee	UNEXPECTED		63869	0					
ANR	63895	Identifier	UNEXPECTED		63869	0					
ANR	63896	ArgumentList	* ptr == NULL		63869	1					
ANR	63897	Argument	* ptr == NULL		63869	0					
ANR	63898	EqualityExpression	* ptr == NULL		63869	0		==			
ANR	63899	UnaryOperationExpression	* ptr		63869	0					
ANR	63900	UnaryOperator	*		63869	0					
ANR	63901	Identifier	ptr		63869	1					
ANR	63902	Identifier	NULL		63869	1					
ANR	63903	CompoundStatement		4:31:90:90	63869	1					
ANR	63904	Statement	return	404:2:13550:13555	63869	0	True				
ANR	63905	Statement	_get_zval_cv_lookup	404:9:13557:13575	63869	1	True				
ANR	63906	Statement	(	404:28:13576:13576	63869	2	True				
ANR	63907	Statement	ptr	404:29:13577:13579	63869	3	True				
ANR	63908	Statement	","	404:32:13580:13580	63869	4	True				
ANR	63909	Statement	var	404:34:13582:13584	63869	5	True				
ANR	63910	Statement	","	404:37:13585:13585	63869	6	True				
ANR	63911	Statement	type	404:39:13587:13590	63869	7	True				
ANR	63912	Statement	TSRMLS_CC	404:44:13592:13600	63869	8	True				
ANR	63913	Statement	)	404:53:13601:13601	63869	9	True				
ANR	63914	ExpressionStatement		404:54:13602:13602	63869	10	True				
ANR	63915	ReturnStatement	return * ptr ;	406:1:13608:13619	63869	2	True				
ANR	63916	UnaryOperationExpression	* ptr		63869	0					
ANR	63917	UnaryOperator	*		63869	0					
ANR	63918	Identifier	ptr		63869	1					
ANR	63919	ReturnType	static zend_always_inline zval * *		63869	1					
ANR	63920	Identifier	_get_zval_ptr_ptr_cv		63869	2					
ANR	63921	ParameterList	"zend_uint var , int type TSRMLS_DC"		63869	3					
ANR	63922	Parameter	zend_uint var	399:54:13420:13432	63869	0	True				
ANR	63923	ParameterType	zend_uint		63869	0					
ANR	63924	Identifier	var		63869	1					
ANR	63925	Parameter	int type TSRMLS_DC	399:69:13435:13452	63869	1	True				
ANR	63926	ParameterType	int type		63869	0					
ANR	63927	Identifier	TSRMLS_DC		63869	1					
ANR	63928	CFGEntryNode	ENTRY		63869		True				
ANR	63929	CFGExitNode	EXIT		63869		True				
ANR	63930	Symbol	EX_CV_NUM		63869						
ANR	63931	Symbol	UNEXPECTED		63869						
ANR	63932	Symbol	EG		63869						
ANR	63933	Symbol	NULL		63869						
ANR	63934	Symbol	var		63869						
ANR	63935	Symbol	current_execute_data		63869						
ANR	63936	Symbol	* ptr		63869						
ANR	63937	Symbol	TSRMLS_DC		63869						
ANR	63938	Symbol	ptr		63869						
ANR	63939	Function	_get_zval_ptr_ptr_cv_BP_VAR_R	409:0:13624:13908							
ANR	63940	FunctionDef	"_get_zval_ptr_ptr_cv_BP_VAR_R (const zend_execute_data * execute_data , zend_uint var TSRMLS_DC)"		63939	0					
ANR	63941	CompoundStatement		410:0:13751:13908	63939	0					
ANR	63942	IdentifierDeclStatement	"zval * * * ptr = EX_CV_NUM ( execute_data , var ) ;"	411:1:13754:13796	63939	0	True				
ANR	63943	IdentifierDecl	"* * * ptr = EX_CV_NUM ( execute_data , var )"		63939	0					
ANR	63944	IdentifierDeclType	zval * * *		63939	0					
ANR	63945	Identifier	ptr		63939	1					
ANR	63946	AssignmentExpression	"* * * ptr = EX_CV_NUM ( execute_data , var )"		63939	2		=			
ANR	63947	Identifier	ptr		63939	0					
ANR	63948	CallExpression	"EX_CV_NUM ( execute_data , var )"		63939	1					
ANR	63949	Callee	EX_CV_NUM		63939	0					
ANR	63950	Identifier	EX_CV_NUM		63939	0					
ANR	63951	ArgumentList	execute_data		63939	1					
ANR	63952	Argument	execute_data		63939	0					
ANR	63953	Identifier	execute_data		63939	0					
ANR	63954	Argument	var		63939	1					
ANR	63955	Identifier	var		63939	0					
ANR	63956	IfStatement	if ( UNEXPECTED ( * ptr == NULL ) )		63939	1					
ANR	63957	Condition	UNEXPECTED ( * ptr == NULL )	413:5:13804:13827	63939	0	True				
ANR	63958	CallExpression	UNEXPECTED ( * ptr == NULL )		63939	0					
ANR	63959	Callee	UNEXPECTED		63939	0					
ANR	63960	Identifier	UNEXPECTED		63939	0					
ANR	63961	ArgumentList	* ptr == NULL		63939	1					
ANR	63962	Argument	* ptr == NULL		63939	0					
ANR	63963	EqualityExpression	* ptr == NULL		63939	0		==			
ANR	63964	UnaryOperationExpression	* ptr		63939	0					
ANR	63965	UnaryOperator	*		63939	0					
ANR	63966	Identifier	ptr		63939	1					
ANR	63967	Identifier	NULL		63939	1					
ANR	63968	CompoundStatement		4:31:78:78	63939	1					
ANR	63969	Statement	return	414:2:13834:13839	63939	0	True				
ANR	63970	Statement	_get_zval_cv_lookup_BP_VAR_R	414:9:13841:13868	63939	1	True				
ANR	63971	Statement	(	414:37:13869:13869	63939	2	True				
ANR	63972	Statement	ptr	414:38:13870:13872	63939	3	True				
ANR	63973	Statement	","	414:41:13873:13873	63939	4	True				
ANR	63974	Statement	var	414:43:13875:13877	63939	5	True				
ANR	63975	Statement	TSRMLS_CC	414:47:13879:13887	63939	6	True				
ANR	63976	Statement	)	414:56:13888:13888	63939	7	True				
ANR	63977	ExpressionStatement		414:57:13889:13889	63939	8	True				
ANR	63978	ReturnStatement	return * ptr ;	416:1:13895:13906	63939	2	True				
ANR	63979	UnaryOperationExpression	* ptr		63939	0					
ANR	63980	UnaryOperator	*		63939	0					
ANR	63981	Identifier	ptr		63939	1					
ANR	63982	ReturnType	static zend_always_inline zval * *		63939	1					
ANR	63983	Identifier	_get_zval_ptr_ptr_cv_BP_VAR_R		63939	2					
ANR	63984	ParameterList	"const zend_execute_data * execute_data , zend_uint var TSRMLS_DC"		63939	3					
ANR	63985	Parameter	const zend_execute_data * execute_data	409:63:13687:13723	63939	0	True				
ANR	63986	ParameterType	const zend_execute_data *		63939	0					
ANR	63987	Identifier	execute_data		63939	1					
ANR	63988	Parameter	zend_uint var TSRMLS_DC	409:102:13726:13748	63939	1	True				
ANR	63989	ParameterType	zend_uint var		63939	0					
ANR	63990	Identifier	TSRMLS_DC		63939	1					
ANR	63991	CFGEntryNode	ENTRY		63939		True				
ANR	63992	CFGExitNode	EXIT		63939		True				
ANR	63993	Symbol	EX_CV_NUM		63939						
ANR	63994	Symbol	UNEXPECTED		63939						
ANR	63995	Symbol	NULL		63939						
ANR	63996	Symbol	var		63939						
ANR	63997	Symbol	* ptr		63939						
ANR	63998	Symbol	TSRMLS_DC		63939						
ANR	63999	Symbol	execute_data		63939						
ANR	64000	Symbol	ptr		63939						
ANR	64001	Function	_get_zval_ptr_ptr_cv_BP_VAR_UNSET	419:0:13911:14203							
ANR	64002	FunctionDef	"_get_zval_ptr_ptr_cv_BP_VAR_UNSET (const zend_execute_data * execute_data , zend_uint var TSRMLS_DC)"		64001	0					
ANR	64003	CompoundStatement		420:0:14042:14203	64001	0					
ANR	64004	IdentifierDeclStatement	"zval * * * ptr = EX_CV_NUM ( execute_data , var ) ;"	421:1:14045:14087	64001	0	True				
ANR	64005	IdentifierDecl	"* * * ptr = EX_CV_NUM ( execute_data , var )"		64001	0					
ANR	64006	IdentifierDeclType	zval * * *		64001	0					
ANR	64007	Identifier	ptr		64001	1					
ANR	64008	AssignmentExpression	"* * * ptr = EX_CV_NUM ( execute_data , var )"		64001	2		=			
ANR	64009	Identifier	ptr		64001	0					
ANR	64010	CallExpression	"EX_CV_NUM ( execute_data , var )"		64001	1					
ANR	64011	Callee	EX_CV_NUM		64001	0					
ANR	64012	Identifier	EX_CV_NUM		64001	0					
ANR	64013	ArgumentList	execute_data		64001	1					
ANR	64014	Argument	execute_data		64001	0					
ANR	64015	Identifier	execute_data		64001	0					
ANR	64016	Argument	var		64001	1					
ANR	64017	Identifier	var		64001	0					
ANR	64018	IfStatement	if ( UNEXPECTED ( * ptr == NULL ) )		64001	1					
ANR	64019	Condition	UNEXPECTED ( * ptr == NULL )	423:5:14095:14118	64001	0	True				
ANR	64020	CallExpression	UNEXPECTED ( * ptr == NULL )		64001	0					
ANR	64021	Callee	UNEXPECTED		64001	0					
ANR	64022	Identifier	UNEXPECTED		64001	0					
ANR	64023	ArgumentList	* ptr == NULL		64001	1					
ANR	64024	Argument	* ptr == NULL		64001	0					
ANR	64025	EqualityExpression	* ptr == NULL		64001	0		==			
ANR	64026	UnaryOperationExpression	* ptr		64001	0					
ANR	64027	UnaryOperator	*		64001	0					
ANR	64028	Identifier	ptr		64001	1					
ANR	64029	Identifier	NULL		64001	1					
ANR	64030	CompoundStatement		4:31:78:78	64001	1					
ANR	64031	Statement	return	424:2:14125:14130	64001	0	True				
ANR	64032	Statement	_get_zval_cv_lookup_BP_VAR_UNSET	424:9:14132:14163	64001	1	True				
ANR	64033	Statement	(	424:41:14164:14164	64001	2	True				
ANR	64034	Statement	ptr	424:42:14165:14167	64001	3	True				
ANR	64035	Statement	","	424:45:14168:14168	64001	4	True				
ANR	64036	Statement	var	424:47:14170:14172	64001	5	True				
ANR	64037	Statement	TSRMLS_CC	424:51:14174:14182	64001	6	True				
ANR	64038	Statement	)	424:60:14183:14183	64001	7	True				
ANR	64039	ExpressionStatement		424:61:14184:14184	64001	8	True				
ANR	64040	ReturnStatement	return * ptr ;	426:1:14190:14201	64001	2	True				
ANR	64041	UnaryOperationExpression	* ptr		64001	0					
ANR	64042	UnaryOperator	*		64001	0					
ANR	64043	Identifier	ptr		64001	1					
ANR	64044	ReturnType	static zend_always_inline zval * *		64001	1					
ANR	64045	Identifier	_get_zval_ptr_ptr_cv_BP_VAR_UNSET		64001	2					
ANR	64046	ParameterList	"const zend_execute_data * execute_data , zend_uint var TSRMLS_DC"		64001	3					
ANR	64047	Parameter	const zend_execute_data * execute_data	419:67:13978:14014	64001	0	True				
ANR	64048	ParameterType	const zend_execute_data *		64001	0					
ANR	64049	Identifier	execute_data		64001	1					
ANR	64050	Parameter	zend_uint var TSRMLS_DC	419:106:14017:14039	64001	1	True				
ANR	64051	ParameterType	zend_uint var		64001	0					
ANR	64052	Identifier	TSRMLS_DC		64001	1					
ANR	64053	CFGEntryNode	ENTRY		64001		True				
ANR	64054	CFGExitNode	EXIT		64001		True				
ANR	64055	Symbol	EX_CV_NUM		64001						
ANR	64056	Symbol	UNEXPECTED		64001						
ANR	64057	Symbol	NULL		64001						
ANR	64058	Symbol	var		64001						
ANR	64059	Symbol	* ptr		64001						
ANR	64060	Symbol	TSRMLS_DC		64001						
ANR	64061	Symbol	execute_data		64001						
ANR	64062	Symbol	ptr		64001						
ANR	64063	Function	_get_zval_ptr_ptr_cv_BP_VAR_IS	429:0:14206:14492							
ANR	64064	FunctionDef	"_get_zval_ptr_ptr_cv_BP_VAR_IS (const zend_execute_data * execute_data , zend_uint var TSRMLS_DC)"		64063	0					
ANR	64065	CompoundStatement		430:0:14334:14492	64063	0					
ANR	64066	IdentifierDeclStatement	"zval * * * ptr = EX_CV_NUM ( execute_data , var ) ;"	431:1:14337:14379	64063	0	True				
ANR	64067	IdentifierDecl	"* * * ptr = EX_CV_NUM ( execute_data , var )"		64063	0					
ANR	64068	IdentifierDeclType	zval * * *		64063	0					
ANR	64069	Identifier	ptr		64063	1					
ANR	64070	AssignmentExpression	"* * * ptr = EX_CV_NUM ( execute_data , var )"		64063	2		=			
ANR	64071	Identifier	ptr		64063	0					
ANR	64072	CallExpression	"EX_CV_NUM ( execute_data , var )"		64063	1					
ANR	64073	Callee	EX_CV_NUM		64063	0					
ANR	64074	Identifier	EX_CV_NUM		64063	0					
ANR	64075	ArgumentList	execute_data		64063	1					
ANR	64076	Argument	execute_data		64063	0					
ANR	64077	Identifier	execute_data		64063	0					
ANR	64078	Argument	var		64063	1					
ANR	64079	Identifier	var		64063	0					
ANR	64080	IfStatement	if ( UNEXPECTED ( * ptr == NULL ) )		64063	1					
ANR	64081	Condition	UNEXPECTED ( * ptr == NULL )	433:5:14387:14410	64063	0	True				
ANR	64082	CallExpression	UNEXPECTED ( * ptr == NULL )		64063	0					
ANR	64083	Callee	UNEXPECTED		64063	0					
ANR	64084	Identifier	UNEXPECTED		64063	0					
ANR	64085	ArgumentList	* ptr == NULL		64063	1					
ANR	64086	Argument	* ptr == NULL		64063	0					
ANR	64087	EqualityExpression	* ptr == NULL		64063	0		==			
ANR	64088	UnaryOperationExpression	* ptr		64063	0					
ANR	64089	UnaryOperator	*		64063	0					
ANR	64090	Identifier	ptr		64063	1					
ANR	64091	Identifier	NULL		64063	1					
ANR	64092	CompoundStatement		4:31:78:78	64063	1					
ANR	64093	Statement	return	434:2:14417:14422	64063	0	True				
ANR	64094	Statement	_get_zval_cv_lookup_BP_VAR_IS	434:9:14424:14452	64063	1	True				
ANR	64095	Statement	(	434:38:14453:14453	64063	2	True				
ANR	64096	Statement	ptr	434:39:14454:14456	64063	3	True				
ANR	64097	Statement	","	434:42:14457:14457	64063	4	True				
ANR	64098	Statement	var	434:44:14459:14461	64063	5	True				
ANR	64099	Statement	TSRMLS_CC	434:48:14463:14471	64063	6	True				
ANR	64100	Statement	)	434:57:14472:14472	64063	7	True				
ANR	64101	ExpressionStatement		434:58:14473:14473	64063	8	True				
ANR	64102	ReturnStatement	return * ptr ;	436:1:14479:14490	64063	2	True				
ANR	64103	UnaryOperationExpression	* ptr		64063	0					
ANR	64104	UnaryOperator	*		64063	0					
ANR	64105	Identifier	ptr		64063	1					
ANR	64106	ReturnType	static zend_always_inline zval * *		64063	1					
ANR	64107	Identifier	_get_zval_ptr_ptr_cv_BP_VAR_IS		64063	2					
ANR	64108	ParameterList	"const zend_execute_data * execute_data , zend_uint var TSRMLS_DC"		64063	3					
ANR	64109	Parameter	const zend_execute_data * execute_data	429:64:14270:14306	64063	0	True				
ANR	64110	ParameterType	const zend_execute_data *		64063	0					
ANR	64111	Identifier	execute_data		64063	1					
ANR	64112	Parameter	zend_uint var TSRMLS_DC	429:103:14309:14331	64063	1	True				
ANR	64113	ParameterType	zend_uint var		64063	0					
ANR	64114	Identifier	TSRMLS_DC		64063	1					
ANR	64115	CFGEntryNode	ENTRY		64063		True				
ANR	64116	CFGExitNode	EXIT		64063		True				
ANR	64117	Symbol	EX_CV_NUM		64063						
ANR	64118	Symbol	UNEXPECTED		64063						
ANR	64119	Symbol	NULL		64063						
ANR	64120	Symbol	var		64063						
ANR	64121	Symbol	* ptr		64063						
ANR	64122	Symbol	TSRMLS_DC		64063						
ANR	64123	Symbol	execute_data		64063						
ANR	64124	Symbol	ptr		64063						
ANR	64125	Function	_get_zval_ptr_ptr_cv_BP_VAR_RW	439:0:14495:14781							
ANR	64126	FunctionDef	"_get_zval_ptr_ptr_cv_BP_VAR_RW (const zend_execute_data * execute_data , zend_uint var TSRMLS_DC)"		64125	0					
ANR	64127	CompoundStatement		440:0:14623:14781	64125	0					
ANR	64128	IdentifierDeclStatement	"zval * * * ptr = EX_CV_NUM ( execute_data , var ) ;"	441:1:14626:14668	64125	0	True				
ANR	64129	IdentifierDecl	"* * * ptr = EX_CV_NUM ( execute_data , var )"		64125	0					
ANR	64130	IdentifierDeclType	zval * * *		64125	0					
ANR	64131	Identifier	ptr		64125	1					
ANR	64132	AssignmentExpression	"* * * ptr = EX_CV_NUM ( execute_data , var )"		64125	2		=			
ANR	64133	Identifier	ptr		64125	0					
ANR	64134	CallExpression	"EX_CV_NUM ( execute_data , var )"		64125	1					
ANR	64135	Callee	EX_CV_NUM		64125	0					
ANR	64136	Identifier	EX_CV_NUM		64125	0					
ANR	64137	ArgumentList	execute_data		64125	1					
ANR	64138	Argument	execute_data		64125	0					
ANR	64139	Identifier	execute_data		64125	0					
ANR	64140	Argument	var		64125	1					
ANR	64141	Identifier	var		64125	0					
ANR	64142	IfStatement	if ( UNEXPECTED ( * ptr == NULL ) )		64125	1					
ANR	64143	Condition	UNEXPECTED ( * ptr == NULL )	443:5:14676:14699	64125	0	True				
ANR	64144	CallExpression	UNEXPECTED ( * ptr == NULL )		64125	0					
ANR	64145	Callee	UNEXPECTED		64125	0					
ANR	64146	Identifier	UNEXPECTED		64125	0					
ANR	64147	ArgumentList	* ptr == NULL		64125	1					
ANR	64148	Argument	* ptr == NULL		64125	0					
ANR	64149	EqualityExpression	* ptr == NULL		64125	0		==			
ANR	64150	UnaryOperationExpression	* ptr		64125	0					
ANR	64151	UnaryOperator	*		64125	0					
ANR	64152	Identifier	ptr		64125	1					
ANR	64153	Identifier	NULL		64125	1					
ANR	64154	CompoundStatement		4:31:78:78	64125	1					
ANR	64155	Statement	return	444:2:14706:14711	64125	0	True				
ANR	64156	Statement	_get_zval_cv_lookup_BP_VAR_RW	444:9:14713:14741	64125	1	True				
ANR	64157	Statement	(	444:38:14742:14742	64125	2	True				
ANR	64158	Statement	ptr	444:39:14743:14745	64125	3	True				
ANR	64159	Statement	","	444:42:14746:14746	64125	4	True				
ANR	64160	Statement	var	444:44:14748:14750	64125	5	True				
ANR	64161	Statement	TSRMLS_CC	444:48:14752:14760	64125	6	True				
ANR	64162	Statement	)	444:57:14761:14761	64125	7	True				
ANR	64163	ExpressionStatement		444:58:14762:14762	64125	8	True				
ANR	64164	ReturnStatement	return * ptr ;	446:1:14768:14779	64125	2	True				
ANR	64165	UnaryOperationExpression	* ptr		64125	0					
ANR	64166	UnaryOperator	*		64125	0					
ANR	64167	Identifier	ptr		64125	1					
ANR	64168	ReturnType	static zend_always_inline zval * *		64125	1					
ANR	64169	Identifier	_get_zval_ptr_ptr_cv_BP_VAR_RW		64125	2					
ANR	64170	ParameterList	"const zend_execute_data * execute_data , zend_uint var TSRMLS_DC"		64125	3					
ANR	64171	Parameter	const zend_execute_data * execute_data	439:64:14559:14595	64125	0	True				
ANR	64172	ParameterType	const zend_execute_data *		64125	0					
ANR	64173	Identifier	execute_data		64125	1					
ANR	64174	Parameter	zend_uint var TSRMLS_DC	439:103:14598:14620	64125	1	True				
ANR	64175	ParameterType	zend_uint var		64125	0					
ANR	64176	Identifier	TSRMLS_DC		64125	1					
ANR	64177	CFGEntryNode	ENTRY		64125		True				
ANR	64178	CFGExitNode	EXIT		64125		True				
ANR	64179	Symbol	EX_CV_NUM		64125						
ANR	64180	Symbol	UNEXPECTED		64125						
ANR	64181	Symbol	NULL		64125						
ANR	64182	Symbol	var		64125						
ANR	64183	Symbol	* ptr		64125						
ANR	64184	Symbol	TSRMLS_DC		64125						
ANR	64185	Symbol	execute_data		64125						
ANR	64186	Symbol	ptr		64125						
ANR	64187	Function	_get_zval_ptr_ptr_cv_BP_VAR_W	449:0:14784:15068							
ANR	64188	FunctionDef	"_get_zval_ptr_ptr_cv_BP_VAR_W (const zend_execute_data * execute_data , zend_uint var TSRMLS_DC)"		64187	0					
ANR	64189	CompoundStatement		450:0:14911:15068	64187	0					
ANR	64190	IdentifierDeclStatement	"zval * * * ptr = EX_CV_NUM ( execute_data , var ) ;"	451:1:14914:14956	64187	0	True				
ANR	64191	IdentifierDecl	"* * * ptr = EX_CV_NUM ( execute_data , var )"		64187	0					
ANR	64192	IdentifierDeclType	zval * * *		64187	0					
ANR	64193	Identifier	ptr		64187	1					
ANR	64194	AssignmentExpression	"* * * ptr = EX_CV_NUM ( execute_data , var )"		64187	2		=			
ANR	64195	Identifier	ptr		64187	0					
ANR	64196	CallExpression	"EX_CV_NUM ( execute_data , var )"		64187	1					
ANR	64197	Callee	EX_CV_NUM		64187	0					
ANR	64198	Identifier	EX_CV_NUM		64187	0					
ANR	64199	ArgumentList	execute_data		64187	1					
ANR	64200	Argument	execute_data		64187	0					
ANR	64201	Identifier	execute_data		64187	0					
ANR	64202	Argument	var		64187	1					
ANR	64203	Identifier	var		64187	0					
ANR	64204	IfStatement	if ( UNEXPECTED ( * ptr == NULL ) )		64187	1					
ANR	64205	Condition	UNEXPECTED ( * ptr == NULL )	453:5:14964:14987	64187	0	True				
ANR	64206	CallExpression	UNEXPECTED ( * ptr == NULL )		64187	0					
ANR	64207	Callee	UNEXPECTED		64187	0					
ANR	64208	Identifier	UNEXPECTED		64187	0					
ANR	64209	ArgumentList	* ptr == NULL		64187	1					
ANR	64210	Argument	* ptr == NULL		64187	0					
ANR	64211	EqualityExpression	* ptr == NULL		64187	0		==			
ANR	64212	UnaryOperationExpression	* ptr		64187	0					
ANR	64213	UnaryOperator	*		64187	0					
ANR	64214	Identifier	ptr		64187	1					
ANR	64215	Identifier	NULL		64187	1					
ANR	64216	CompoundStatement		4:31:78:78	64187	1					
ANR	64217	Statement	return	454:2:14994:14999	64187	0	True				
ANR	64218	Statement	_get_zval_cv_lookup_BP_VAR_W	454:9:15001:15028	64187	1	True				
ANR	64219	Statement	(	454:37:15029:15029	64187	2	True				
ANR	64220	Statement	ptr	454:38:15030:15032	64187	3	True				
ANR	64221	Statement	","	454:41:15033:15033	64187	4	True				
ANR	64222	Statement	var	454:43:15035:15037	64187	5	True				
ANR	64223	Statement	TSRMLS_CC	454:47:15039:15047	64187	6	True				
ANR	64224	Statement	)	454:56:15048:15048	64187	7	True				
ANR	64225	ExpressionStatement		454:57:15049:15049	64187	8	True				
ANR	64226	ReturnStatement	return * ptr ;	456:1:15055:15066	64187	2	True				
ANR	64227	UnaryOperationExpression	* ptr		64187	0					
ANR	64228	UnaryOperator	*		64187	0					
ANR	64229	Identifier	ptr		64187	1					
ANR	64230	ReturnType	static zend_always_inline zval * *		64187	1					
ANR	64231	Identifier	_get_zval_ptr_ptr_cv_BP_VAR_W		64187	2					
ANR	64232	ParameterList	"const zend_execute_data * execute_data , zend_uint var TSRMLS_DC"		64187	3					
ANR	64233	Parameter	const zend_execute_data * execute_data	449:63:14847:14883	64187	0	True				
ANR	64234	ParameterType	const zend_execute_data *		64187	0					
ANR	64235	Identifier	execute_data		64187	1					
ANR	64236	Parameter	zend_uint var TSRMLS_DC	449:102:14886:14908	64187	1	True				
ANR	64237	ParameterType	zend_uint var		64187	0					
ANR	64238	Identifier	TSRMLS_DC		64187	1					
ANR	64239	CFGEntryNode	ENTRY		64187		True				
ANR	64240	CFGExitNode	EXIT		64187		True				
ANR	64241	Symbol	EX_CV_NUM		64187						
ANR	64242	Symbol	UNEXPECTED		64187						
ANR	64243	Symbol	NULL		64187						
ANR	64244	Symbol	var		64187						
ANR	64245	Symbol	* ptr		64187						
ANR	64246	Symbol	TSRMLS_DC		64187						
ANR	64247	Symbol	execute_data		64187						
ANR	64248	Symbol	ptr		64187						
ANR	64249	Function	_get_zval_ptr_ptr	459:0:15071:15505							
ANR	64250	FunctionDef	"_get_zval_ptr_ptr (int op_type , const znode_op * node , const zend_execute_data * execute_data , zend_free_op * should_free , int type TSRMLS_DC)"		64249	0					
ANR	64251	CompoundStatement		460:0:15231:15505	64249	0					
ANR	64252	IfStatement	if ( op_type == IS_CV )		64249	0					
ANR	64253	Condition	op_type == IS_CV	461:5:15238:15253	64249	0	True				
ANR	64254	EqualityExpression	op_type == IS_CV		64249	0		==			
ANR	64255	Identifier	op_type		64249	0					
ANR	64256	Identifier	IS_CV		64249	1					
ANR	64257	CompoundStatement		2:23:24:24	64249	1					
ANR	64258	ExpressionStatement	should_free -> var = 0	462:2:15260:15280	64249	0	True				
ANR	64259	AssignmentExpression	should_free -> var = 0		64249	0		=			
ANR	64260	PtrMemberAccess	should_free -> var		64249	0					
ANR	64261	Identifier	should_free		64249	0					
ANR	64262	Identifier	var		64249	1					
ANR	64263	PrimaryExpression	0		64249	1					
ANR	64264	Statement	return	463:2:15284:15289	64249	1	True				
ANR	64265	Statement	_get_zval_ptr_ptr_cv	463:9:15291:15310	64249	2	True				
ANR	64266	Statement	(	463:29:15311:15311	64249	3	True				
ANR	64267	Statement	node	463:30:15312:15315	64249	4	True				
ANR	64268	Statement	->	463:34:15316:15317	64249	5	True				
ANR	64269	Statement	var	463:36:15318:15320	64249	6	True				
ANR	64270	Statement	","	463:39:15321:15321	64249	7	True				
ANR	64271	Statement	type	463:41:15323:15326	64249	8	True				
ANR	64272	Statement	TSRMLS_CC	463:46:15328:15336	64249	9	True				
ANR	64273	Statement	)	463:55:15337:15337	64249	10	True				
ANR	64274	ExpressionStatement		463:56:15338:15338	64249	11	True				
ANR	64275	ElseStatement	else		64249	0					
ANR	64276	IfStatement	if ( op_type == IS_VAR )		64249	0					
ANR	64277	Condition	op_type == IS_VAR	464:12:15352:15368	64249	0	True				
ANR	64278	EqualityExpression	op_type == IS_VAR		64249	0		==			
ANR	64279	Identifier	op_type		64249	0					
ANR	64280	Identifier	IS_VAR		64249	1					
ANR	64281	CompoundStatement		5:31:139:139	64249	1					
ANR	64282	Statement	return	465:2:15375:15380	64249	0	True				
ANR	64283	Statement	_get_zval_ptr_ptr_var	465:9:15382:15402	64249	1	True				
ANR	64284	Statement	(	465:30:15403:15403	64249	2	True				
ANR	64285	Statement	node	465:31:15404:15407	64249	3	True				
ANR	64286	Statement	->	465:35:15408:15409	64249	4	True				
ANR	64287	Statement	var	465:37:15410:15412	64249	5	True				
ANR	64288	Statement	","	465:40:15413:15413	64249	6	True				
ANR	64289	Statement	execute_data	465:42:15415:15426	64249	7	True				
ANR	64290	Statement	","	465:54:15427:15427	64249	8	True				
ANR	64291	Statement	should_free	465:56:15429:15439	64249	9	True				
ANR	64292	Statement	TSRMLS_CC	465:68:15441:15449	64249	10	True				
ANR	64293	Statement	)	465:77:15450:15450	64249	11	True				
ANR	64294	ExpressionStatement		465:78:15451:15451	64249	12	True				
ANR	64295	ElseStatement	else		64249	0					
ANR	64296	CompoundStatement		7:8:229:229	64249	0					
ANR	64297	ExpressionStatement	should_free -> var = 0	467:2:15465:15485	64249	0	True				
ANR	64298	AssignmentExpression	should_free -> var = 0		64249	0		=			
ANR	64299	PtrMemberAccess	should_free -> var		64249	0					
ANR	64300	Identifier	should_free		64249	0					
ANR	64301	Identifier	var		64249	1					
ANR	64302	PrimaryExpression	0		64249	1					
ANR	64303	ReturnStatement	return NULL ;	468:2:15489:15500	64249	1	True				
ANR	64304	Identifier	NULL		64249	0					
ANR	64305	ReturnType	static inline zval * *		64249	1					
ANR	64306	Identifier	_get_zval_ptr_ptr		64249	2					
ANR	64307	ParameterList	"int op_type , const znode_op * node , const zend_execute_data * execute_data , zend_free_op * should_free , int type TSRMLS_DC"		64249	3					
ANR	64308	Parameter	int op_type	459:39:15110:15120	64249	0	True				
ANR	64309	ParameterType	int		64249	0					
ANR	64310	Identifier	op_type		64249	1					
ANR	64311	Parameter	const znode_op * node	459:52:15123:15142	64249	1	True				
ANR	64312	ParameterType	const znode_op *		64249	0					
ANR	64313	Identifier	node		64249	1					
ANR	64314	Parameter	const zend_execute_data * execute_data	459:74:15145:15181	64249	2	True				
ANR	64315	ParameterType	const zend_execute_data *		64249	0					
ANR	64316	Identifier	execute_data		64249	1					
ANR	64317	Parameter	zend_free_op * should_free	459:113:15184:15208	64249	3	True				
ANR	64318	ParameterType	zend_free_op *		64249	0					
ANR	64319	Identifier	should_free		64249	1					
ANR	64320	Parameter	int type TSRMLS_DC	459:140:15211:15228	64249	4	True				
ANR	64321	ParameterType	int type		64249	0					
ANR	64322	Identifier	TSRMLS_DC		64249	1					
ANR	64323	CFGEntryNode	ENTRY		64249		True				
ANR	64324	CFGExitNode	EXIT		64249		True				
ANR	64325	Symbol	should_free		64249						
ANR	64326	Symbol	node		64249						
ANR	64327	Symbol	IS_CV		64249						
ANR	64328	Symbol	should_free -> var		64249						
ANR	64329	Symbol	NULL		64249						
ANR	64330	Symbol	op_type		64249						
ANR	64331	Symbol	TSRMLS_DC		64249						
ANR	64332	Symbol	IS_VAR		64249						
ANR	64333	Symbol	execute_data		64249						
ANR	64334	Symbol	* should_free		64249						
ANR	64335	Function	_get_obj_zval_ptr_ptr	482:0:15736:16282							
ANR	64336	FunctionDef	"_get_obj_zval_ptr_ptr (int op_type , const znode_op * op , const zend_execute_data * execute_data , zend_free_op * should_free , int type TSRMLS_DC)"		64335	0					
ANR	64337	CompoundStatement		483:0:15898:16282	64335	0					
ANR	64338	IfStatement	if ( op_type == IS_UNUSED )		64335	0					
ANR	64339	Condition	op_type == IS_UNUSED	484:5:15905:15924	64335	0	True				
ANR	64340	EqualityExpression	op_type == IS_UNUSED		64335	0		==			
ANR	64341	Identifier	op_type		64335	0					
ANR	64342	Identifier	IS_UNUSED		64335	1					
ANR	64343	CompoundStatement		2:27:28:28	64335	1					
ANR	64344	IfStatement	if ( EXPECTED ( EG ( This ) != NULL ) )		64335	0					
ANR	64345	Condition	EXPECTED ( EG ( This ) != NULL )	485:6:15935:15960	64335	0	True				
ANR	64346	CallExpression	EXPECTED ( EG ( This ) != NULL )		64335	0					
ANR	64347	Callee	EXPECTED		64335	0					
ANR	64348	Identifier	EXPECTED		64335	0					
ANR	64349	ArgumentList	EG ( This ) != NULL		64335	1					
ANR	64350	Argument	EG ( This ) != NULL		64335	0					
ANR	64351	EqualityExpression	EG ( This ) != NULL		64335	0		!=			
ANR	64352	CallExpression	EG ( This )		64335	0					
ANR	64353	Callee	EG		64335	0					
ANR	64354	Identifier	EG		64335	0					
ANR	64355	ArgumentList	This		64335	1					
ANR	64356	Argument	This		64335	0					
ANR	64357	Identifier	This		64335	0					
ANR	64358	Identifier	NULL		64335	1					
ANR	64359	CompoundStatement		3:34:64:64	64335	1					
ANR	64360	ExpressionStatement	should_free -> var = 0	488:3:16074:16094	64335	0	True				
ANR	64361	AssignmentExpression	should_free -> var = 0		64335	0		=			
ANR	64362	PtrMemberAccess	should_free -> var		64335	0					
ANR	64363	Identifier	should_free		64335	0					
ANR	64364	Identifier	var		64335	1					
ANR	64365	PrimaryExpression	0		64335	1					
ANR	64366	ReturnStatement	return & EG ( This ) ;	489:3:16099:16115	64335	1	True				
ANR	64367	UnaryOperationExpression	& EG ( This )		64335	0					
ANR	64368	UnaryOperator	&		64335	0					
ANR	64369	CallExpression	EG ( This )		64335	1					
ANR	64370	Callee	EG		64335	0					
ANR	64371	Identifier	EG		64335	0					
ANR	64372	ArgumentList	This		64335	1					
ANR	64373	Argument	This		64335	0					
ANR	64374	Identifier	This		64335	0					
ANR	64375	ElseStatement	else		64335	0					
ANR	64376	CompoundStatement		8:9:227:227	64335	0					
ANR	64377	ExpressionStatement	"zend_error_noreturn ( E_ERROR , ""Using $this when not in object context"" )"	491:3:16131:16201	64335	0	True				
ANR	64378	CallExpression	"zend_error_noreturn ( E_ERROR , ""Using $this when not in object context"" )"		64335	0					
ANR	64379	Callee	zend_error_noreturn		64335	0					
ANR	64380	Identifier	zend_error_noreturn		64335	0					
ANR	64381	ArgumentList	E_ERROR		64335	1					
ANR	64382	Argument	E_ERROR		64335	0					
ANR	64383	Identifier	E_ERROR		64335	0					
ANR	64384	Argument	"""Using $this when not in object context"""		64335	1					
ANR	64385	PrimaryExpression	"""Using $this when not in object context"""		64335	0					
ANR	64386	ReturnStatement	"return get_zval_ptr_ptr ( op_type , op , execute_data , should_free , type ) ;"	494:1:16211:16280	64335	1	True				
ANR	64387	CallExpression	"get_zval_ptr_ptr ( op_type , op , execute_data , should_free , type )"		64335	0					
ANR	64388	Callee	get_zval_ptr_ptr		64335	0					
ANR	64389	Identifier	get_zval_ptr_ptr		64335	0					
ANR	64390	ArgumentList	op_type		64335	1					
ANR	64391	Argument	op_type		64335	0					
ANR	64392	Identifier	op_type		64335	0					
ANR	64393	Argument	op		64335	1					
ANR	64394	Identifier	op		64335	0					
ANR	64395	Argument	execute_data		64335	2					
ANR	64396	Identifier	execute_data		64335	0					
ANR	64397	Argument	should_free		64335	3					
ANR	64398	Identifier	should_free		64335	0					
ANR	64399	Argument	type		64335	4					
ANR	64400	Identifier	type		64335	0					
ANR	64401	ReturnType	static inline zval * *		64335	1					
ANR	64402	Identifier	_get_obj_zval_ptr_ptr		64335	2					
ANR	64403	ParameterList	"int op_type , const znode_op * op , const zend_execute_data * execute_data , zend_free_op * should_free , int type TSRMLS_DC"		64335	3					
ANR	64404	Parameter	int op_type	482:43:15779:15789	64335	0	True				
ANR	64405	ParameterType	int		64335	0					
ANR	64406	Identifier	op_type		64335	1					
ANR	64407	Parameter	const znode_op * op	482:56:15792:15809	64335	1	True				
ANR	64408	ParameterType	const znode_op *		64335	0					
ANR	64409	Identifier	op		64335	1					
ANR	64410	Parameter	const zend_execute_data * execute_data	482:76:15812:15848	64335	2	True				
ANR	64411	ParameterType	const zend_execute_data *		64335	0					
ANR	64412	Identifier	execute_data		64335	1					
ANR	64413	Parameter	zend_free_op * should_free	482:115:15851:15875	64335	3	True				
ANR	64414	ParameterType	zend_free_op *		64335	0					
ANR	64415	Identifier	should_free		64335	1					
ANR	64416	Parameter	int type TSRMLS_DC	482:142:15878:15895	64335	4	True				
ANR	64417	ParameterType	int type		64335	0					
ANR	64418	Identifier	TSRMLS_DC		64335	1					
ANR	64419	CFGEntryNode	ENTRY		64335		True				
ANR	64420	CFGExitNode	EXIT		64335		True				
ANR	64421	Symbol	should_free		64335						
ANR	64422	Symbol	op		64335						
ANR	64423	Symbol	EG		64335						
ANR	64424	Symbol	NULL		64335						
ANR	64425	Symbol	type		64335						
ANR	64426	Symbol	TSRMLS_DC		64335						
ANR	64427	Symbol	& EG		64335						
ANR	64428	Symbol	execute_data		64335						
ANR	64429	Symbol	* should_free		64335						
ANR	64430	Symbol	should_free -> var		64335						
ANR	64431	Symbol	E_ERROR		64335						
ANR	64432	Symbol	This		64335						
ANR	64433	Symbol	get_zval_ptr_ptr		64335						
ANR	64434	Symbol	op_type		64335						
ANR	64435	Symbol	EXPECTED		64335						
ANR	64436	Symbol	IS_UNUSED		64335						
ANR	64437	Function	_get_obj_zval_ptr	507:0:16519:16943							
ANR	64438	FunctionDef	"_get_obj_zval_ptr (int op_type , znode_op * op , const zend_execute_data * execute_data , zend_free_op * should_free , int type TSRMLS_DC)"		64437	0					
ANR	64439	CompoundStatement		508:0:16670:16943	64437	0					
ANR	64440	IfStatement	if ( op_type == IS_UNUSED )		64437	0					
ANR	64441	Condition	op_type == IS_UNUSED	509:5:16677:16696	64437	0	True				
ANR	64442	EqualityExpression	op_type == IS_UNUSED		64437	0		==			
ANR	64443	Identifier	op_type		64437	0					
ANR	64444	Identifier	IS_UNUSED		64437	1					
ANR	64445	CompoundStatement		2:27:28:28	64437	1					
ANR	64446	IfStatement	if ( EXPECTED ( EG ( This ) != NULL ) )		64437	0					
ANR	64447	Condition	EXPECTED ( EG ( This ) != NULL )	510:6:16707:16732	64437	0	True				
ANR	64448	CallExpression	EXPECTED ( EG ( This ) != NULL )		64437	0					
ANR	64449	Callee	EXPECTED		64437	0					
ANR	64450	Identifier	EXPECTED		64437	0					
ANR	64451	ArgumentList	EG ( This ) != NULL		64437	1					
ANR	64452	Argument	EG ( This ) != NULL		64437	0					
ANR	64453	EqualityExpression	EG ( This ) != NULL		64437	0		!=			
ANR	64454	CallExpression	EG ( This )		64437	0					
ANR	64455	Callee	EG		64437	0					
ANR	64456	Identifier	EG		64437	0					
ANR	64457	ArgumentList	This		64437	1					
ANR	64458	Argument	This		64437	0					
ANR	64459	Identifier	This		64437	0					
ANR	64460	Identifier	NULL		64437	1					
ANR	64461	CompoundStatement		3:34:64:64	64437	1					
ANR	64462	ExpressionStatement	should_free -> var = 0	511:3:16740:16760	64437	0	True				
ANR	64463	AssignmentExpression	should_free -> var = 0		64437	0		=			
ANR	64464	PtrMemberAccess	should_free -> var		64437	0					
ANR	64465	Identifier	should_free		64437	0					
ANR	64466	Identifier	var		64437	1					
ANR	64467	PrimaryExpression	0		64437	1					
ANR	64468	ReturnStatement	return EG ( This ) ;	512:3:16765:16780	64437	1	True				
ANR	64469	CallExpression	EG ( This )		64437	0					
ANR	64470	Callee	EG		64437	0					
ANR	64471	Identifier	EG		64437	0					
ANR	64472	ArgumentList	This		64437	1					
ANR	64473	Argument	This		64437	0					
ANR	64474	Identifier	This		64437	0					
ANR	64475	ElseStatement	else		64437	0					
ANR	64476	CompoundStatement		6:9:120:120	64437	0					
ANR	64477	ExpressionStatement	"zend_error_noreturn ( E_ERROR , ""Using $this when not in object context"" )"	514:3:16796:16866	64437	0	True				
ANR	64478	CallExpression	"zend_error_noreturn ( E_ERROR , ""Using $this when not in object context"" )"		64437	0					
ANR	64479	Callee	zend_error_noreturn		64437	0					
ANR	64480	Identifier	zend_error_noreturn		64437	0					
ANR	64481	ArgumentList	E_ERROR		64437	1					
ANR	64482	Argument	E_ERROR		64437	0					
ANR	64483	Identifier	E_ERROR		64437	0					
ANR	64484	Argument	"""Using $this when not in object context"""		64437	1					
ANR	64485	PrimaryExpression	"""Using $this when not in object context"""		64437	0					
ANR	64486	ReturnStatement	"return get_zval_ptr ( op_type , op , execute_data , should_free , type ) ;"	517:1:16876:16941	64437	1	True				
ANR	64487	CallExpression	"get_zval_ptr ( op_type , op , execute_data , should_free , type )"		64437	0					
ANR	64488	Callee	get_zval_ptr		64437	0					
ANR	64489	Identifier	get_zval_ptr		64437	0					
ANR	64490	ArgumentList	op_type		64437	1					
ANR	64491	Argument	op_type		64437	0					
ANR	64492	Identifier	op_type		64437	0					
ANR	64493	Argument	op		64437	1					
ANR	64494	Identifier	op		64437	0					
ANR	64495	Argument	execute_data		64437	2					
ANR	64496	Identifier	execute_data		64437	0					
ANR	64497	Argument	should_free		64437	3					
ANR	64498	Identifier	should_free		64437	0					
ANR	64499	Argument	type		64437	4					
ANR	64500	Identifier	type		64437	0					
ANR	64501	ReturnType	static inline zval *		64437	1					
ANR	64502	Identifier	_get_obj_zval_ptr		64437	2					
ANR	64503	ParameterList	"int op_type , znode_op * op , const zend_execute_data * execute_data , zend_free_op * should_free , int type TSRMLS_DC"		64437	3					
ANR	64504	Parameter	int op_type	507:38:16557:16567	64437	0	True				
ANR	64505	ParameterType	int		64437	0					
ANR	64506	Identifier	op_type		64437	1					
ANR	64507	Parameter	znode_op * op	507:51:16570:16581	64437	1	True				
ANR	64508	ParameterType	znode_op *		64437	0					
ANR	64509	Identifier	op		64437	1					
ANR	64510	Parameter	const zend_execute_data * execute_data	507:65:16584:16620	64437	2	True				
ANR	64511	ParameterType	const zend_execute_data *		64437	0					
ANR	64512	Identifier	execute_data		64437	1					
ANR	64513	Parameter	zend_free_op * should_free	507:104:16623:16647	64437	3	True				
ANR	64514	ParameterType	zend_free_op *		64437	0					
ANR	64515	Identifier	should_free		64437	1					
ANR	64516	Parameter	int type TSRMLS_DC	507:131:16650:16667	64437	4	True				
ANR	64517	ParameterType	int type		64437	0					
ANR	64518	Identifier	TSRMLS_DC		64437	1					
ANR	64519	CFGEntryNode	ENTRY		64437		True				
ANR	64520	CFGExitNode	EXIT		64437		True				
ANR	64521	Symbol	should_free		64437						
ANR	64522	Symbol	op		64437						
ANR	64523	Symbol	EG		64437						
ANR	64524	Symbol	NULL		64437						
ANR	64525	Symbol	get_zval_ptr		64437						
ANR	64526	Symbol	type		64437						
ANR	64527	Symbol	TSRMLS_DC		64437						
ANR	64528	Symbol	execute_data		64437						
ANR	64529	Symbol	* should_free		64437						
ANR	64530	Symbol	should_free -> var		64437						
ANR	64531	Symbol	E_ERROR		64437						
ANR	64532	Symbol	This		64437						
ANR	64533	Symbol	op_type		64437						
ANR	64534	Symbol	EXPECTED		64437						
ANR	64535	Symbol	IS_UNUSED		64437						
ANR	64536	DeclStmt									
ANR	64537	Decl							zval	zval *	variable_ptr
ANR	64538	DeclStmt									
ANR	64539	Decl							zval	zval *	value_ptr
ANR	64540	DeclStmt									
ANR	64541	Decl							zend_execute_data	zend_execute_data *	ptr
ANR	64542	DeclStmt									
ANR	64543	Decl							const char	const char *	fname
ANR	64544	DeclStmt									
ANR	64545	Decl							char	char *	fsep
ANR	64546	DeclStmt									
ANR	64547	Decl							const char	const char *	fclass
ANR	64548	DeclStmt									
ANR	64549	Decl							zval	zval	constant
ANR	64550	DeclStmt									
ANR	64551	Decl							zval	zval *	constant_ptr
ANR	64552	DeclStmt									
ANR	64553	Decl							zend_arg_info	zend_arg_info *	cur_arg_info
ANR	64554	DeclStmt									
ANR	64555	Decl							char	char *	need_msg
ANR	64556	DeclStmt									
ANR	64557	Decl							zend_class_entry	zend_class_entry *	ce
ANR	64558	DeclStmt									
ANR	64559	Decl							const char	const char *	class_name
ANR	64560	DeclStmt									
ANR	64561	Decl							zval	zval *	object
ANR	64562	DeclStmt									
ANR	64563	Decl							zend_free_op	zend_free_op	free_value
ANR	64564	DeclStmt									
ANR	64565	Decl							zval	zval *	value
ANR	64566	DeclStmt									
ANR	64567	Decl							zval	zval *	orig_value
ANR	64568	DeclStmt									
ANR	64569	Decl							zval	zval *	orig_value
ANR	64570	Function	zend_assign_to_string_offset	784:0:25795:27134							
ANR	64571	FunctionDef	"zend_assign_to_string_offset (const temp_variable * T , const zval * value , int value_type TSRMLS_DC)"		64570	0					
ANR	64572	CompoundStatement		785:0:25911:27134	64570	0					
ANR	64573	IdentifierDeclStatement	zval * str = T -> str_offset . str ;	786:1:25914:25943	64570	0	True				
ANR	64574	IdentifierDecl	* str = T -> str_offset . str		64570	0					
ANR	64575	IdentifierDeclType	zval *		64570	0					
ANR	64576	Identifier	str		64570	1					
ANR	64577	AssignmentExpression	* str = T -> str_offset . str		64570	2		=			
ANR	64578	Identifier	str		64570	0					
ANR	64579	MemberAccess	T -> str_offset . str		64570	1					
ANR	64580	PtrMemberAccess	T -> str_offset		64570	0					
ANR	64581	Identifier	T		64570	0					
ANR	64582	Identifier	str_offset		64570	1					
ANR	64583	Identifier	str		64570	1					
ANR	64584	IdentifierDeclStatement	zend_uint offset = T -> str_offset . offset ;	787:1:25946:25985	64570	1	True				
ANR	64585	IdentifierDecl	offset = T -> str_offset . offset		64570	0					
ANR	64586	IdentifierDeclType	zend_uint		64570	0					
ANR	64587	Identifier	offset		64570	1					
ANR	64588	AssignmentExpression	offset = T -> str_offset . offset		64570	2		=			
ANR	64589	Identifier	offset		64570	0					
ANR	64590	MemberAccess	T -> str_offset . offset		64570	1					
ANR	64591	PtrMemberAccess	T -> str_offset		64570	0					
ANR	64592	Identifier	T		64570	0					
ANR	64593	Identifier	str_offset		64570	1					
ANR	64594	Identifier	offset		64570	1					
ANR	64595	IfStatement	if ( Z_TYPE_P ( str ) == IS_STRING )		64570	2					
ANR	64596	Condition	Z_TYPE_P ( str ) == IS_STRING	788:5:25992:26017	64570	0	True				
ANR	64597	EqualityExpression	Z_TYPE_P ( str ) == IS_STRING		64570	0		==			
ANR	64598	CallExpression	Z_TYPE_P ( str )		64570	0					
ANR	64599	Callee	Z_TYPE_P		64570	0					
ANR	64600	Identifier	Z_TYPE_P		64570	0					
ANR	64601	ArgumentList	str		64570	1					
ANR	64602	Argument	str		64570	0					
ANR	64603	Identifier	str		64570	0					
ANR	64604	Identifier	IS_STRING		64570	1					
ANR	64605	CompoundStatement		4:33:108:108	64570	1					
ANR	64606	IfStatement	if ( ( int ) offset < 0 )		64570	0					
ANR	64607	Condition	( int ) offset < 0	789:6:26028:26042	64570	0	True				
ANR	64608	RelationalExpression	( int ) offset < 0		64570	0		<			
ANR	64609	CastExpression	( int ) offset		64570	0					
ANR	64610	CastTarget	int		64570	0					
ANR	64611	Identifier	offset		64570	1					
ANR	64612	PrimaryExpression	0		64570	1					
ANR	64613	CompoundStatement		5:23:133:133	64570	1					
ANR	64614	ExpressionStatement	"zend_error ( E_WARNING , ""Illegal string offset:  %d"" , offset )"	790:3:26050:26109	64570	0	True				
ANR	64615	CallExpression	"zend_error ( E_WARNING , ""Illegal string offset:  %d"" , offset )"		64570	0					
ANR	64616	Callee	zend_error		64570	0					
ANR	64617	Identifier	zend_error		64570	0					
ANR	64618	ArgumentList	E_WARNING		64570	1					
ANR	64619	Argument	E_WARNING		64570	0					
ANR	64620	Identifier	E_WARNING		64570	0					
ANR	64621	Argument	"""Illegal string offset:  %d"""		64570	1					
ANR	64622	PrimaryExpression	"""Illegal string offset:  %d"""		64570	0					
ANR	64623	Argument	offset		64570	2					
ANR	64624	Identifier	offset		64570	0					
ANR	64625	ReturnStatement	return 0 ;	791:3:26114:26122	64570	1	True				
ANR	64626	PrimaryExpression	0		64570	0					
ANR	64627	IfStatement	if ( offset >= Z_STRLEN_P ( str ) )		64570	1					
ANR	64628	Condition	offset >= Z_STRLEN_P ( str )	794:6:26135:26159	64570	0	True				
ANR	64629	RelationalExpression	offset >= Z_STRLEN_P ( str )		64570	0		>=			
ANR	64630	Identifier	offset		64570	0					
ANR	64631	CallExpression	Z_STRLEN_P ( str )		64570	1					
ANR	64632	Callee	Z_STRLEN_P		64570	0					
ANR	64633	Identifier	Z_STRLEN_P		64570	0					
ANR	64634	ArgumentList	str		64570	1					
ANR	64635	Argument	str		64570	0					
ANR	64636	Identifier	str		64570	0					
ANR	64637	CompoundStatement		10:33:250:250	64570	1					
ANR	64638	ExpressionStatement	"Z_STRVAL_P ( str ) = str_erealloc ( Z_STRVAL_P ( str ) , offset + 1 + 1 )"	795:3:26167:26226	64570	0	True				
ANR	64639	AssignmentExpression	"Z_STRVAL_P ( str ) = str_erealloc ( Z_STRVAL_P ( str ) , offset + 1 + 1 )"		64570	0		=			
ANR	64640	CallExpression	Z_STRVAL_P ( str )		64570	0					
ANR	64641	Callee	Z_STRVAL_P		64570	0					
ANR	64642	Identifier	Z_STRVAL_P		64570	0					
ANR	64643	ArgumentList	str		64570	1					
ANR	64644	Argument	str		64570	0					
ANR	64645	Identifier	str		64570	0					
ANR	64646	CallExpression	"str_erealloc ( Z_STRVAL_P ( str ) , offset + 1 + 1 )"		64570	1					
ANR	64647	Callee	str_erealloc		64570	0					
ANR	64648	Identifier	str_erealloc		64570	0					
ANR	64649	ArgumentList	Z_STRVAL_P ( str )		64570	1					
ANR	64650	Argument	Z_STRVAL_P ( str )		64570	0					
ANR	64651	CallExpression	Z_STRVAL_P ( str )		64570	0					
ANR	64652	Callee	Z_STRVAL_P		64570	0					
ANR	64653	Identifier	Z_STRVAL_P		64570	0					
ANR	64654	ArgumentList	str		64570	1					
ANR	64655	Argument	str		64570	0					
ANR	64656	Identifier	str		64570	0					
ANR	64657	Argument	offset + 1 + 1		64570	1					
ANR	64658	AdditiveExpression	offset + 1 + 1		64570	0		+			
ANR	64659	Identifier	offset		64570	0					
ANR	64660	AdditiveExpression	1 + 1		64570	1		+			
ANR	64661	PrimaryExpression	1		64570	0					
ANR	64662	PrimaryExpression	1		64570	1					
ANR	64663	ExpressionStatement	"memset ( Z_STRVAL_P ( str ) + Z_STRLEN_P ( str ) , ' ' , offset - Z_STRLEN_P ( str ) )"	796:3:26231:26303	64570	1	True				
ANR	64664	CallExpression	"memset ( Z_STRVAL_P ( str ) + Z_STRLEN_P ( str ) , ' ' , offset - Z_STRLEN_P ( str ) )"		64570	0					
ANR	64665	Callee	memset		64570	0					
ANR	64666	Identifier	memset		64570	0					
ANR	64667	ArgumentList	Z_STRVAL_P ( str ) + Z_STRLEN_P ( str )		64570	1					
ANR	64668	Argument	Z_STRVAL_P ( str ) + Z_STRLEN_P ( str )		64570	0					
ANR	64669	AdditiveExpression	Z_STRVAL_P ( str ) + Z_STRLEN_P ( str )		64570	0		+			
ANR	64670	CallExpression	Z_STRVAL_P ( str )		64570	0					
ANR	64671	Callee	Z_STRVAL_P		64570	0					
ANR	64672	Identifier	Z_STRVAL_P		64570	0					
ANR	64673	ArgumentList	str		64570	1					
ANR	64674	Argument	str		64570	0					
ANR	64675	Identifier	str		64570	0					
ANR	64676	CallExpression	Z_STRLEN_P ( str )		64570	1					
ANR	64677	Callee	Z_STRLEN_P		64570	0					
ANR	64678	Identifier	Z_STRLEN_P		64570	0					
ANR	64679	ArgumentList	str		64570	1					
ANR	64680	Argument	str		64570	0					
ANR	64681	Identifier	str		64570	0					
ANR	64682	Argument	' '		64570	1					
ANR	64683	PrimaryExpression	' '		64570	0					
ANR	64684	Argument	offset - Z_STRLEN_P ( str )		64570	2					
ANR	64685	AdditiveExpression	offset - Z_STRLEN_P ( str )		64570	0		-			
ANR	64686	Identifier	offset		64570	0					
ANR	64687	CallExpression	Z_STRLEN_P ( str )		64570	1					
ANR	64688	Callee	Z_STRLEN_P		64570	0					
ANR	64689	Identifier	Z_STRLEN_P		64570	0					
ANR	64690	ArgumentList	str		64570	1					
ANR	64691	Argument	str		64570	0					
ANR	64692	Identifier	str		64570	0					
ANR	64693	ExpressionStatement	Z_STRVAL_P ( str ) [ offset + 1 ] = 0	797:3:26308:26337	64570	2	True				
ANR	64694	AssignmentExpression	Z_STRVAL_P ( str ) [ offset + 1 ] = 0		64570	0		=			
ANR	64695	ArrayIndexing	Z_STRVAL_P ( str ) [ offset + 1 ]		64570	0					
ANR	64696	CallExpression	Z_STRVAL_P ( str )		64570	0					
ANR	64697	Callee	Z_STRVAL_P		64570	0					
ANR	64698	Identifier	Z_STRVAL_P		64570	0					
ANR	64699	ArgumentList	str		64570	1					
ANR	64700	Argument	str		64570	0					
ANR	64701	Identifier	str		64570	0					
ANR	64702	AdditiveExpression	offset + 1		64570	1		+			
ANR	64703	Identifier	offset		64570	0					
ANR	64704	PrimaryExpression	1		64570	1					
ANR	64705	PrimaryExpression	0		64570	1					
ANR	64706	ExpressionStatement	Z_STRLEN_P ( str ) = offset + 1	798:3:26342:26368	64570	3	True				
ANR	64707	AssignmentExpression	Z_STRLEN_P ( str ) = offset + 1		64570	0		=			
ANR	64708	CallExpression	Z_STRLEN_P ( str )		64570	0					
ANR	64709	Callee	Z_STRLEN_P		64570	0					
ANR	64710	Identifier	Z_STRLEN_P		64570	0					
ANR	64711	ArgumentList	str		64570	1					
ANR	64712	Argument	str		64570	0					
ANR	64713	Identifier	str		64570	0					
ANR	64714	AdditiveExpression	offset + 1		64570	1		+			
ANR	64715	Identifier	offset		64570	0					
ANR	64716	PrimaryExpression	1		64570	1					
ANR	64717	ElseStatement	else		64570	0					
ANR	64718	IfStatement	if ( IS_INTERNED ( Z_STRVAL_P ( str ) ) )		64570	0					
ANR	64719	Condition	IS_INTERNED ( Z_STRVAL_P ( str ) )	799:13:26383:26410	64570	0	True				
ANR	64720	CallExpression	IS_INTERNED ( Z_STRVAL_P ( str ) )		64570	0					
ANR	64721	Callee	IS_INTERNED		64570	0					
ANR	64722	Identifier	IS_INTERNED		64570	0					
ANR	64723	ArgumentList	Z_STRVAL_P ( str )		64570	1					
ANR	64724	Argument	Z_STRVAL_P ( str )		64570	0					
ANR	64725	CallExpression	Z_STRVAL_P ( str )		64570	0					
ANR	64726	Callee	Z_STRVAL_P		64570	0					
ANR	64727	Identifier	Z_STRVAL_P		64570	0					
ANR	64728	ArgumentList	str		64570	1					
ANR	64729	Argument	str		64570	0					
ANR	64730	Identifier	str		64570	0					
ANR	64731	CompoundStatement		15:43:501:501	64570	1					
ANR	64732	ExpressionStatement	"Z_STRVAL_P ( str ) = estrndup ( Z_STRVAL_P ( str ) , Z_STRLEN_P ( str ) )"	800:3:26418:26478	64570	0	True				
ANR	64733	AssignmentExpression	"Z_STRVAL_P ( str ) = estrndup ( Z_STRVAL_P ( str ) , Z_STRLEN_P ( str ) )"		64570	0		=			
ANR	64734	CallExpression	Z_STRVAL_P ( str )		64570	0					
ANR	64735	Callee	Z_STRVAL_P		64570	0					
ANR	64736	Identifier	Z_STRVAL_P		64570	0					
ANR	64737	ArgumentList	str		64570	1					
ANR	64738	Argument	str		64570	0					
ANR	64739	Identifier	str		64570	0					
ANR	64740	CallExpression	"estrndup ( Z_STRVAL_P ( str ) , Z_STRLEN_P ( str ) )"		64570	1					
ANR	64741	Callee	estrndup		64570	0					
ANR	64742	Identifier	estrndup		64570	0					
ANR	64743	ArgumentList	Z_STRVAL_P ( str )		64570	1					
ANR	64744	Argument	Z_STRVAL_P ( str )		64570	0					
ANR	64745	CallExpression	Z_STRVAL_P ( str )		64570	0					
ANR	64746	Callee	Z_STRVAL_P		64570	0					
ANR	64747	Identifier	Z_STRVAL_P		64570	0					
ANR	64748	ArgumentList	str		64570	1					
ANR	64749	Argument	str		64570	0					
ANR	64750	Identifier	str		64570	0					
ANR	64751	Argument	Z_STRLEN_P ( str )		64570	1					
ANR	64752	CallExpression	Z_STRLEN_P ( str )		64570	0					
ANR	64753	Callee	Z_STRLEN_P		64570	0					
ANR	64754	Identifier	Z_STRLEN_P		64570	0					
ANR	64755	ArgumentList	str		64570	1					
ANR	64756	Argument	str		64570	0					
ANR	64757	Identifier	str		64570	0					
ANR	64758	IfStatement	if ( Z_TYPE_P ( value ) != IS_STRING )		64570	2					
ANR	64759	Condition	Z_TYPE_P ( value ) != IS_STRING	803:6:26491:26518	64570	0	True				
ANR	64760	EqualityExpression	Z_TYPE_P ( value ) != IS_STRING		64570	0		!=			
ANR	64761	CallExpression	Z_TYPE_P ( value )		64570	0					
ANR	64762	Callee	Z_TYPE_P		64570	0					
ANR	64763	Identifier	Z_TYPE_P		64570	0					
ANR	64764	ArgumentList	value		64570	1					
ANR	64765	Argument	value		64570	0					
ANR	64766	Identifier	value		64570	0					
ANR	64767	Identifier	IS_STRING		64570	1					
ANR	64768	CompoundStatement		20:3:614:622	64570	1					
ANR	64769	IdentifierDeclStatement	zval tmp ;	804:3:26526:26534	64570	0	True				
ANR	64770	IdentifierDecl	tmp		64570	0					
ANR	64771	IdentifierDeclType	zval		64570	0					
ANR	64772	Identifier	tmp		64570	1					
ANR	64773	ExpressionStatement	"ZVAL_COPY_VALUE ( & tmp , value )"	806:3:26540:26568	64570	1	True				
ANR	64774	CallExpression	"ZVAL_COPY_VALUE ( & tmp , value )"		64570	0					
ANR	64775	Callee	ZVAL_COPY_VALUE		64570	0					
ANR	64776	Identifier	ZVAL_COPY_VALUE		64570	0					
ANR	64777	ArgumentList	& tmp		64570	1					
ANR	64778	Argument	& tmp		64570	0					
ANR	64779	UnaryOperationExpression	& tmp		64570	0					
ANR	64780	UnaryOperator	&		64570	0					
ANR	64781	Identifier	tmp		64570	1					
ANR	64782	Argument	value		64570	1					
ANR	64783	Identifier	value		64570	0					
ANR	64784	IfStatement	if ( value_type != IS_TMP_VAR )		64570	2					
ANR	64785	Condition	value_type != IS_TMP_VAR	807:7:26577:26600	64570	0	True				
ANR	64786	EqualityExpression	value_type != IS_TMP_VAR		64570	0		!=			
ANR	64787	Identifier	value_type		64570	0					
ANR	64788	Identifier	IS_TMP_VAR		64570	1					
ANR	64789	CompoundStatement		23:33:691:691	64570	1					
ANR	64790	ExpressionStatement	zval_copy_ctor ( & tmp )	808:4:26609:26629	64570	0	True				
ANR	64791	CallExpression	zval_copy_ctor ( & tmp )		64570	0					
ANR	64792	Callee	zval_copy_ctor		64570	0					
ANR	64793	Identifier	zval_copy_ctor		64570	0					
ANR	64794	ArgumentList	& tmp		64570	1					
ANR	64795	Argument	& tmp		64570	0					
ANR	64796	UnaryOperationExpression	& tmp		64570	0					
ANR	64797	UnaryOperator	&		64570	0					
ANR	64798	Identifier	tmp		64570	1					
ANR	64799	ExpressionStatement	convert_to_string ( & tmp )	810:3:26639:26662	64570	3	True				
ANR	64800	CallExpression	convert_to_string ( & tmp )		64570	0					
ANR	64801	Callee	convert_to_string		64570	0					
ANR	64802	Identifier	convert_to_string		64570	0					
ANR	64803	ArgumentList	& tmp		64570	1					
ANR	64804	Argument	& tmp		64570	0					
ANR	64805	UnaryOperationExpression	& tmp		64570	0					
ANR	64806	UnaryOperator	&		64570	0					
ANR	64807	Identifier	tmp		64570	1					
ANR	64808	ExpressionStatement	Z_STRVAL_P ( str ) [ offset ] = Z_STRVAL ( tmp ) [ 0 ]	811:3:26667:26709	64570	4	True				
ANR	64809	AssignmentExpression	Z_STRVAL_P ( str ) [ offset ] = Z_STRVAL ( tmp ) [ 0 ]		64570	0		=			
ANR	64810	ArrayIndexing	Z_STRVAL_P ( str ) [ offset ]		64570	0					
ANR	64811	CallExpression	Z_STRVAL_P ( str )		64570	0					
ANR	64812	Callee	Z_STRVAL_P		64570	0					
ANR	64813	Identifier	Z_STRVAL_P		64570	0					
ANR	64814	ArgumentList	str		64570	1					
ANR	64815	Argument	str		64570	0					
ANR	64816	Identifier	str		64570	0					
ANR	64817	Identifier	offset		64570	1					
ANR	64818	ArrayIndexing	Z_STRVAL ( tmp ) [ 0 ]		64570	1					
ANR	64819	CallExpression	Z_STRVAL ( tmp )		64570	0					
ANR	64820	Callee	Z_STRVAL		64570	0					
ANR	64821	Identifier	Z_STRVAL		64570	0					
ANR	64822	ArgumentList	tmp		64570	1					
ANR	64823	Argument	tmp		64570	0					
ANR	64824	Identifier	tmp		64570	0					
ANR	64825	PrimaryExpression	0		64570	1					
ANR	64826	ExpressionStatement	str_efree ( Z_STRVAL ( tmp ) )	812:3:26714:26738	64570	5	True				
ANR	64827	CallExpression	str_efree ( Z_STRVAL ( tmp ) )		64570	0					
ANR	64828	Callee	str_efree		64570	0					
ANR	64829	Identifier	str_efree		64570	0					
ANR	64830	ArgumentList	Z_STRVAL ( tmp )		64570	1					
ANR	64831	Argument	Z_STRVAL ( tmp )		64570	0					
ANR	64832	CallExpression	Z_STRVAL ( tmp )		64570	0					
ANR	64833	Callee	Z_STRVAL		64570	0					
ANR	64834	Identifier	Z_STRVAL		64570	0					
ANR	64835	ArgumentList	tmp		64570	1					
ANR	64836	Argument	tmp		64570	0					
ANR	64837	Identifier	tmp		64570	0					
ANR	64838	ElseStatement	else		64570	0					
ANR	64839	CompoundStatement		29:9:837:837	64570	0					
ANR	64840	ExpressionStatement	Z_STRVAL_P ( str ) [ offset ] = Z_STRVAL_P ( value ) [ 0 ]	814:3:26754:26800	64570	0	True				
ANR	64841	AssignmentExpression	Z_STRVAL_P ( str ) [ offset ] = Z_STRVAL_P ( value ) [ 0 ]		64570	0		=			
ANR	64842	ArrayIndexing	Z_STRVAL_P ( str ) [ offset ]		64570	0					
ANR	64843	CallExpression	Z_STRVAL_P ( str )		64570	0					
ANR	64844	Callee	Z_STRVAL_P		64570	0					
ANR	64845	Identifier	Z_STRVAL_P		64570	0					
ANR	64846	ArgumentList	str		64570	1					
ANR	64847	Argument	str		64570	0					
ANR	64848	Identifier	str		64570	0					
ANR	64849	Identifier	offset		64570	1					
ANR	64850	ArrayIndexing	Z_STRVAL_P ( value ) [ 0 ]		64570	1					
ANR	64851	CallExpression	Z_STRVAL_P ( value )		64570	0					
ANR	64852	Callee	Z_STRVAL_P		64570	0					
ANR	64853	Identifier	Z_STRVAL_P		64570	0					
ANR	64854	ArgumentList	value		64570	1					
ANR	64855	Argument	value		64570	0					
ANR	64856	Identifier	value		64570	0					
ANR	64857	PrimaryExpression	0		64570	1					
ANR	64858	IfStatement	if ( value_type == IS_TMP_VAR )		64570	1					
ANR	64859	Condition	value_type == IS_TMP_VAR	815:7:26809:26832	64570	0	True				
ANR	64860	EqualityExpression	value_type == IS_TMP_VAR		64570	0		==			
ANR	64861	Identifier	value_type		64570	0					
ANR	64862	Identifier	IS_TMP_VAR		64570	1					
ANR	64863	CompoundStatement		31:33:923:923	64570	1					
ANR	64864	ExpressionStatement	str_efree ( Z_STRVAL_P ( value ) )	819:4:26962:26990	64570	0	True				
ANR	64865	CallExpression	str_efree ( Z_STRVAL_P ( value ) )		64570	0					
ANR	64866	Callee	str_efree		64570	0					
ANR	64867	Identifier	str_efree		64570	0					
ANR	64868	ArgumentList	Z_STRVAL_P ( value )		64570	1					
ANR	64869	Argument	Z_STRVAL_P ( value )		64570	0					
ANR	64870	CallExpression	Z_STRVAL_P ( value )		64570	0					
ANR	64871	Callee	Z_STRVAL_P		64570	0					
ANR	64872	Identifier	Z_STRVAL_P		64570	0					
ANR	64873	ArgumentList	value		64570	1					
ANR	64874	Argument	value		64570	0					
ANR	64875	Identifier	value		64570	0					
ANR	64876	ReturnStatement	return 1 ;	827:1:27124:27132	64570	3	True				
ANR	64877	PrimaryExpression	1		64570	0					
ANR	64878	ReturnType	static inline int		64570	1					
ANR	64879	Identifier	zend_assign_to_string_offset		64570	2					
ANR	64880	ParameterList	"const temp_variable * T , const zval * value , int value_type TSRMLS_DC"		64570	3					
ANR	64881	Parameter	const temp_variable * T	784:47:25842:25863	64570	0	True				
ANR	64882	ParameterType	const temp_variable *		64570	0					
ANR	64883	Identifier	T		64570	1					
ANR	64884	Parameter	const zval * value	784:71:25866:25882	64570	1	True				
ANR	64885	ParameterType	const zval *		64570	0					
ANR	64886	Identifier	value		64570	1					
ANR	64887	Parameter	int value_type TSRMLS_DC	784:90:25885:25908	64570	2	True				
ANR	64888	ParameterType	int value_type		64570	0					
ANR	64889	Identifier	TSRMLS_DC		64570	1					
ANR	64890	CFGEntryNode	ENTRY		64570		True				
ANR	64891	CFGExitNode	EXIT		64570		True				
ANR	64892	Symbol	value_type		64570						
ANR	64893	Symbol	T -> str_offset . str		64570						
ANR	64894	Symbol	TSRMLS_DC		64570						
ANR	64895	Symbol	E_WARNING		64570						
ANR	64896	Symbol	estrndup		64570						
ANR	64897	Symbol	T		64570						
ANR	64898	Symbol	tmp		64570						
ANR	64899	Symbol	Z_STRVAL		64570						
ANR	64900	Symbol	* Z_STRVAL		64570						
ANR	64901	Symbol	Z_STRLEN_P		64570						
ANR	64902	Symbol	IS_STRING		64570						
ANR	64903	Symbol	* Z_STRVAL_P		64570						
ANR	64904	Symbol	value		64570						
ANR	64905	Symbol	* T		64570						
ANR	64906	Symbol	IS_TMP_VAR		64570						
ANR	64907	Symbol	str_erealloc		64570						
ANR	64908	Symbol	offset		64570						
ANR	64909	Symbol	Z_TYPE_P		64570						
ANR	64910	Symbol	Z_STRVAL_P		64570						
ANR	64911	Symbol	T -> str_offset		64570						
ANR	64912	Symbol	str		64570						
ANR	64913	Symbol	T -> str_offset . offset		64570						
ANR	64914	Symbol	IS_INTERNED		64570						
ANR	64915	Symbol	* offset		64570						
ANR	64916	Symbol	& tmp		64570						
ANR	64917	DeclStmt									
ANR	64918	Decl							zval	zval *	variable_ptr
ANR	64919	DeclStmt									
ANR	64920	Decl							zval	zval	garbage
ANR	64921	DeclStmt									
ANR	64922	Decl							zval	zval *	variable_ptr
ANR	64923	DeclStmt									
ANR	64924	Decl							zval	zval	garbage
ANR	64925	DeclStmt									
ANR	64926	Decl							zval	zval *	variable_ptr
ANR	64927	DeclStmt									
ANR	64928	Decl							zval	zval	garbage
ANR	64929	Function	zval_deep_copy	959:0:30934:31384							
ANR	64930	FunctionDef	zval_deep_copy (zval * * p)		64929	0					
ANR	64931	CompoundStatement		960:0:30971:31384	64929	0					
ANR	64932	IdentifierDeclStatement	zval * value ;	961:1:30974:30985	64929	0	True				
ANR	64933	IdentifierDecl	* value		64929	0					
ANR	64934	IdentifierDeclType	zval *		64929	0					
ANR	64935	Identifier	value		64929	1					
ANR	64936	ExpressionStatement	ALLOC_ZVAL ( value )	963:1:30989:31006	64929	1	True				
ANR	64937	CallExpression	ALLOC_ZVAL ( value )		64929	0					
ANR	64938	Callee	ALLOC_ZVAL		64929	0					
ANR	64939	Identifier	ALLOC_ZVAL		64929	0					
ANR	64940	ArgumentList	value		64929	1					
ANR	64941	Argument	value		64929	0					
ANR	64942	Identifier	value		64929	0					
ANR	64943	ExpressionStatement	* value = * * p	964:1:31009:31021	64929	2	True				
ANR	64944	AssignmentExpression	* value = * * p		64929	0		=			
ANR	64945	UnaryOperationExpression	* value		64929	0					
ANR	64946	UnaryOperator	*		64929	0					
ANR	64947	Identifier	value		64929	1					
ANR	64948	UnaryOperationExpression	* * p		64929	1					
ANR	64949	UnaryOperator	*		64929	0					
ANR	64950	UnaryOperationExpression	* p		64929	1					
ANR	64951	UnaryOperator	*		64929	0					
ANR	64952	Identifier	p		64929	1					
ANR	64953	IfStatement	if ( Z_TYPE_P ( value ) == IS_ARRAY )		64929	3					
ANR	64954	Condition	Z_TYPE_P ( value ) == IS_ARRAY	965:5:31028:31054	64929	0	True				
ANR	64955	EqualityExpression	Z_TYPE_P ( value ) == IS_ARRAY		64929	0		==			
ANR	64956	CallExpression	Z_TYPE_P ( value )		64929	0					
ANR	64957	Callee	Z_TYPE_P		64929	0					
ANR	64958	Identifier	Z_TYPE_P		64929	0					
ANR	64959	ArgumentList	value		64929	1					
ANR	64960	Argument	value		64929	0					
ANR	64961	Identifier	value		64929	0					
ANR	64962	Identifier	IS_ARRAY		64929	1					
ANR	64963	CompoundStatement		7:2:89:102	64929	1					
ANR	64964	IdentifierDeclStatement	HashTable * ht ;	966:2:31061:31074	64929	0	True				
ANR	64965	IdentifierDecl	* ht		64929	0					
ANR	64966	IdentifierDeclType	HashTable *		64929	0					
ANR	64967	Identifier	ht		64929	1					
ANR	64968	ExpressionStatement	ALLOC_HASHTABLE ( ht )	968:2:31079:31098	64929	1	True				
ANR	64969	CallExpression	ALLOC_HASHTABLE ( ht )		64929	0					
ANR	64970	Callee	ALLOC_HASHTABLE		64929	0					
ANR	64971	Identifier	ALLOC_HASHTABLE		64929	0					
ANR	64972	ArgumentList	ht		64929	1					
ANR	64973	Argument	ht		64929	0					
ANR	64974	Identifier	ht		64929	0					
ANR	64975	ExpressionStatement	"zend_hash_init ( ht , zend_hash_num_elements ( Z_ARRVAL_P ( value ) ) , NULL , ZVAL_PTR_DTOR , 0 )"	969:2:31102:31187	64929	2	True				
ANR	64976	CallExpression	"zend_hash_init ( ht , zend_hash_num_elements ( Z_ARRVAL_P ( value ) ) , NULL , ZVAL_PTR_DTOR , 0 )"		64929	0					
ANR	64977	Callee	zend_hash_init		64929	0					
ANR	64978	Identifier	zend_hash_init		64929	0					
ANR	64979	ArgumentList	ht		64929	1					
ANR	64980	Argument	ht		64929	0					
ANR	64981	Identifier	ht		64929	0					
ANR	64982	Argument	zend_hash_num_elements ( Z_ARRVAL_P ( value ) )		64929	1					
ANR	64983	CallExpression	zend_hash_num_elements ( Z_ARRVAL_P ( value ) )		64929	0					
ANR	64984	Callee	zend_hash_num_elements		64929	0					
ANR	64985	Identifier	zend_hash_num_elements		64929	0					
ANR	64986	ArgumentList	Z_ARRVAL_P ( value )		64929	1					
ANR	64987	Argument	Z_ARRVAL_P ( value )		64929	0					
ANR	64988	CallExpression	Z_ARRVAL_P ( value )		64929	0					
ANR	64989	Callee	Z_ARRVAL_P		64929	0					
ANR	64990	Identifier	Z_ARRVAL_P		64929	0					
ANR	64991	ArgumentList	value		64929	1					
ANR	64992	Argument	value		64929	0					
ANR	64993	Identifier	value		64929	0					
ANR	64994	Argument	NULL		64929	2					
ANR	64995	Identifier	NULL		64929	0					
ANR	64996	Argument	ZVAL_PTR_DTOR		64929	3					
ANR	64997	Identifier	ZVAL_PTR_DTOR		64929	0					
ANR	64998	Argument	0		64929	4					
ANR	64999	PrimaryExpression	0		64929	0					
ANR	65000	ExpressionStatement	"zend_hash_copy ( ht , Z_ARRVAL_P ( value ) , ( copy_ctor_func_t ) zval_deep_copy , NULL , sizeof ( zval * ) )"	970:2:31191:31285	64929	3	True				
ANR	65001	CallExpression	"zend_hash_copy ( ht , Z_ARRVAL_P ( value ) , ( copy_ctor_func_t ) zval_deep_copy , NULL , sizeof ( zval * ) )"		64929	0					
ANR	65002	Callee	zend_hash_copy		64929	0					
ANR	65003	Identifier	zend_hash_copy		64929	0					
ANR	65004	ArgumentList	ht		64929	1					
ANR	65005	Argument	ht		64929	0					
ANR	65006	Identifier	ht		64929	0					
ANR	65007	Argument	Z_ARRVAL_P ( value )		64929	1					
ANR	65008	CallExpression	Z_ARRVAL_P ( value )		64929	0					
ANR	65009	Callee	Z_ARRVAL_P		64929	0					
ANR	65010	Identifier	Z_ARRVAL_P		64929	0					
ANR	65011	ArgumentList	value		64929	1					
ANR	65012	Argument	value		64929	0					
ANR	65013	Identifier	value		64929	0					
ANR	65014	Argument	( copy_ctor_func_t ) zval_deep_copy		64929	2					
ANR	65015	CastExpression	( copy_ctor_func_t ) zval_deep_copy		64929	0					
ANR	65016	CastTarget	copy_ctor_func_t		64929	0					
ANR	65017	Identifier	zval_deep_copy		64929	1					
ANR	65018	Argument	NULL		64929	3					
ANR	65019	Identifier	NULL		64929	0					
ANR	65020	Argument	sizeof ( zval * )		64929	4					
ANR	65021	SizeofExpression	sizeof ( zval * )		64929	0					
ANR	65022	Sizeof	sizeof		64929	0					
ANR	65023	SizeofOperand	zval *		64929	1					
ANR	65024	ExpressionStatement	Z_ARRVAL_P ( value ) = ht	971:2:31289:31311	64929	4	True				
ANR	65025	AssignmentExpression	Z_ARRVAL_P ( value ) = ht		64929	0		=			
ANR	65026	CallExpression	Z_ARRVAL_P ( value )		64929	0					
ANR	65027	Callee	Z_ARRVAL_P		64929	0					
ANR	65028	Identifier	Z_ARRVAL_P		64929	0					
ANR	65029	ArgumentList	value		64929	1					
ANR	65030	Argument	value		64929	0					
ANR	65031	Identifier	value		64929	0					
ANR	65032	Identifier	ht		64929	1					
ANR	65033	ElseStatement	else		64929	0					
ANR	65034	CompoundStatement		13:8:349:349	64929	0					
ANR	65035	ExpressionStatement	zval_copy_ctor ( value )	973:2:31325:31346	64929	0	True				
ANR	65036	CallExpression	zval_copy_ctor ( value )		64929	0					
ANR	65037	Callee	zval_copy_ctor		64929	0					
ANR	65038	Identifier	zval_copy_ctor		64929	0					
ANR	65039	ArgumentList	value		64929	1					
ANR	65040	Argument	value		64929	0					
ANR	65041	Identifier	value		64929	0					
ANR	65042	ExpressionStatement	INIT_PZVAL ( value )	975:1:31352:31369	64929	4	True				
ANR	65043	CallExpression	INIT_PZVAL ( value )		64929	0					
ANR	65044	Callee	INIT_PZVAL		64929	0					
ANR	65045	Identifier	INIT_PZVAL		64929	0					
ANR	65046	ArgumentList	value		64929	1					
ANR	65047	Argument	value		64929	0					
ANR	65048	Identifier	value		64929	0					
ANR	65049	ExpressionStatement	* p = value	976:1:31372:31382	64929	5	True				
ANR	65050	AssignmentExpression	* p = value		64929	0		=			
ANR	65051	UnaryOperationExpression	* p		64929	0					
ANR	65052	UnaryOperator	*		64929	0					
ANR	65053	Identifier	p		64929	1					
ANR	65054	Identifier	value		64929	1					
ANR	65055	ReturnType	static void		64929	1					
ANR	65056	Identifier	zval_deep_copy		64929	2					
ANR	65057	ParameterList	zval * * p		64929	3					
ANR	65058	Parameter	zval * * p	959:27:30961:30968	64929	0	True				
ANR	65059	ParameterType	zval * *		64929	0					
ANR	65060	Identifier	p		64929	1					
ANR	65061	CFGEntryNode	ENTRY		64929		True				
ANR	65062	CFGExitNode	EXIT		64929		True				
ANR	65063	Symbol	zval_deep_copy		64929						
ANR	65064	Symbol	NULL		64929						
ANR	65065	Symbol	zend_hash_num_elements		64929						
ANR	65066	Symbol	Z_TYPE_P		64929						
ANR	65067	Symbol	ht		64929						
ANR	65068	Symbol	ZVAL_PTR_DTOR		64929						
ANR	65069	Symbol	p		64929						
ANR	65070	Symbol	IS_ARRAY		64929						
ANR	65071	Symbol	* value		64929						
ANR	65072	Symbol	* p		64929						
ANR	65073	Symbol	* * p		64929						
ANR	65074	Symbol	Z_ARRVAL_P		64929						
ANR	65075	Symbol	value		64929						
ANR	65076	Function	zend_get_target_symbol_table	1004:0:32035:32719							
ANR	65077	FunctionDef	zend_get_target_symbol_table (int fetch_type TSRMLS_DC)		65076	0					
ANR	65078	CompoundStatement		1005:0:32115:32719	65076	0					
ANR	65079	SwitchStatement	switch ( fetch_type )		65076	0					
ANR	65080	Condition	fetch_type	1006:9:32126:32135	65076	0	True				
ANR	65081	Identifier	fetch_type		65076	0					
ANR	65082	CompoundStatement		2:21:22:22	65076	1					
ANR	65083	Label	case ZEND_FETCH_LOCAL :	1007:2:32142:32163	65076	0	True				
ANR	65084	Identifier	ZEND_FETCH_LOCAL		65076	0					
ANR	65085	IfStatement	if ( ! EG ( active_symbol_table ) )		65076	1					
ANR	65086	Condition	! EG ( active_symbol_table )	1008:7:32172:32195	65076	0	True				
ANR	65087	UnaryOperationExpression	! EG ( active_symbol_table )		65076	0					
ANR	65088	UnaryOperator	!		65076	0					
ANR	65089	CallExpression	EG ( active_symbol_table )		65076	1					
ANR	65090	Callee	EG		65076	0					
ANR	65091	Identifier	EG		65076	0					
ANR	65092	ArgumentList	active_symbol_table		65076	1					
ANR	65093	Argument	active_symbol_table		65076	0					
ANR	65094	Identifier	active_symbol_table		65076	0					
ANR	65095	CompoundStatement		4:33:82:82	65076	1					
ANR	65096	ExpressionStatement	zend_rebuild_symbol_table ( TSRMLS_C )	1009:4:32204:32239	65076	0	True				
ANR	65097	CallExpression	zend_rebuild_symbol_table ( TSRMLS_C )		65076	0					
ANR	65098	Callee	zend_rebuild_symbol_table		65076	0					
ANR	65099	Identifier	zend_rebuild_symbol_table		65076	0					
ANR	65100	ArgumentList	TSRMLS_C		65076	1					
ANR	65101	Argument	TSRMLS_C		65076	0					
ANR	65102	Identifier	TSRMLS_C		65076	0					
ANR	65103	ReturnStatement	return EG ( active_symbol_table ) ;	1011:3:32249:32279	65076	2	True				
ANR	65104	CallExpression	EG ( active_symbol_table )		65076	0					
ANR	65105	Callee	EG		65076	0					
ANR	65106	Identifier	EG		65076	0					
ANR	65107	ArgumentList	active_symbol_table		65076	1					
ANR	65108	Argument	active_symbol_table		65076	0					
ANR	65109	Identifier	active_symbol_table		65076	0					
ANR	65110	BreakStatement	break ;	1012:3:32284:32289	65076	3	True				
ANR	65111	Label	case ZEND_FETCH_GLOBAL :	1013:2:32293:32315	65076	4	True				
ANR	65112	Identifier	ZEND_FETCH_GLOBAL		65076	0					
ANR	65113	Label	case ZEND_FETCH_GLOBAL_LOCK :	1014:2:32319:32346	65076	5	True				
ANR	65114	Identifier	ZEND_FETCH_GLOBAL_LOCK		65076	0					
ANR	65115	ReturnStatement	return & EG ( symbol_table ) ;	1015:3:32351:32375	65076	6	True				
ANR	65116	UnaryOperationExpression	& EG ( symbol_table )		65076	0					
ANR	65117	UnaryOperator	&		65076	0					
ANR	65118	CallExpression	EG ( symbol_table )		65076	1					
ANR	65119	Callee	EG		65076	0					
ANR	65120	Identifier	EG		65076	0					
ANR	65121	ArgumentList	symbol_table		65076	1					
ANR	65122	Argument	symbol_table		65076	0					
ANR	65123	Identifier	symbol_table		65076	0					
ANR	65124	BreakStatement	break ;	1016:3:32380:32385	65076	7	True				
ANR	65125	Label	case ZEND_FETCH_STATIC :	1017:2:32389:32411	65076	8	True				
ANR	65126	Identifier	ZEND_FETCH_STATIC		65076	0					
ANR	65127	IfStatement	if ( ! EG ( active_op_array ) -> static_variables )		65076	9					
ANR	65128	Condition	! EG ( active_op_array ) -> static_variables	1018:7:32420:32457	65076	0	True				
ANR	65129	UnaryOperationExpression	! EG ( active_op_array ) -> static_variables		65076	0					
ANR	65130	UnaryOperator	!		65076	0					
ANR	65131	PtrMemberAccess	EG ( active_op_array ) -> static_variables		65076	1					
ANR	65132	CallExpression	EG ( active_op_array )		65076	0					
ANR	65133	Callee	EG		65076	0					
ANR	65134	Identifier	EG		65076	0					
ANR	65135	ArgumentList	active_op_array		65076	1					
ANR	65136	Argument	active_op_array		65076	0					
ANR	65137	Identifier	active_op_array		65076	0					
ANR	65138	Identifier	static_variables		65076	1					
ANR	65139	CompoundStatement		14:47:344:344	65076	1					
ANR	65140	ExpressionStatement	ALLOC_HASHTABLE ( EG ( active_op_array ) -> static_variables )	1019:4:32466:32520	65076	0	True				
ANR	65141	CallExpression	ALLOC_HASHTABLE ( EG ( active_op_array ) -> static_variables )		65076	0					
ANR	65142	Callee	ALLOC_HASHTABLE		65076	0					
ANR	65143	Identifier	ALLOC_HASHTABLE		65076	0					
ANR	65144	ArgumentList	EG ( active_op_array ) -> static_variables		65076	1					
ANR	65145	Argument	EG ( active_op_array ) -> static_variables		65076	0					
ANR	65146	PtrMemberAccess	EG ( active_op_array ) -> static_variables		65076	0					
ANR	65147	CallExpression	EG ( active_op_array )		65076	0					
ANR	65148	Callee	EG		65076	0					
ANR	65149	Identifier	EG		65076	0					
ANR	65150	ArgumentList	active_op_array		65076	1					
ANR	65151	Argument	active_op_array		65076	0					
ANR	65152	Identifier	active_op_array		65076	0					
ANR	65153	Identifier	static_variables		65076	1					
ANR	65154	ExpressionStatement	"zend_hash_init ( EG ( active_op_array ) -> static_variables , 2 , NULL , ZVAL_PTR_DTOR , 0 )"	1020:4:32526:32606	65076	1	True				
ANR	65155	CallExpression	"zend_hash_init ( EG ( active_op_array ) -> static_variables , 2 , NULL , ZVAL_PTR_DTOR , 0 )"		65076	0					
ANR	65156	Callee	zend_hash_init		65076	0					
ANR	65157	Identifier	zend_hash_init		65076	0					
ANR	65158	ArgumentList	EG ( active_op_array ) -> static_variables		65076	1					
ANR	65159	Argument	EG ( active_op_array ) -> static_variables		65076	0					
ANR	65160	PtrMemberAccess	EG ( active_op_array ) -> static_variables		65076	0					
ANR	65161	CallExpression	EG ( active_op_array )		65076	0					
ANR	65162	Callee	EG		65076	0					
ANR	65163	Identifier	EG		65076	0					
ANR	65164	ArgumentList	active_op_array		65076	1					
ANR	65165	Argument	active_op_array		65076	0					
ANR	65166	Identifier	active_op_array		65076	0					
ANR	65167	Identifier	static_variables		65076	1					
ANR	65168	Argument	2		65076	1					
ANR	65169	PrimaryExpression	2		65076	0					
ANR	65170	Argument	NULL		65076	2					
ANR	65171	Identifier	NULL		65076	0					
ANR	65172	Argument	ZVAL_PTR_DTOR		65076	3					
ANR	65173	Identifier	ZVAL_PTR_DTOR		65076	0					
ANR	65174	Argument	0		65076	4					
ANR	65175	PrimaryExpression	0		65076	0					
ANR	65176	ReturnStatement	return EG ( active_op_array ) -> static_variables ;	1022:3:32616:32660	65076	10	True				
ANR	65177	PtrMemberAccess	EG ( active_op_array ) -> static_variables		65076	0					
ANR	65178	CallExpression	EG ( active_op_array )		65076	0					
ANR	65179	Callee	EG		65076	0					
ANR	65180	Identifier	EG		65076	0					
ANR	65181	ArgumentList	active_op_array		65076	1					
ANR	65182	Argument	active_op_array		65076	0					
ANR	65183	Identifier	active_op_array		65076	0					
ANR	65184	Identifier	static_variables		65076	1					
ANR	65185	BreakStatement	break ;	1023:3:32665:32670	65076	11	True				
ANR	65186	Statement	EMPTY_SWITCH_DEFAULT_CASE	1024:2:32674:32698	65076	12	True				
ANR	65187	Statement	(	1024:27:32699:32699	65076	13	True				
ANR	65188	Statement	)	1024:28:32700:32700	65076	14	True				
ANR	65189	ReturnStatement	return NULL ;	1026:1:32706:32717	65076	1	True				
ANR	65190	Identifier	NULL		65076	0					
ANR	65191	ReturnType	static inline HashTable *		65076	1					
ANR	65192	Identifier	zend_get_target_symbol_table		65076	2					
ANR	65193	ParameterList	int fetch_type TSRMLS_DC		65076	3					
ANR	65194	Parameter	int fetch_type TSRMLS_DC	1004:54:32089:32112	65076	0	True				
ANR	65195	ParameterType	int fetch_type		65076	0					
ANR	65196	Identifier	TSRMLS_DC		65076	1					
ANR	65197	CFGEntryNode	ENTRY		65076		True				
ANR	65198	CFGExitNode	EXIT		65076		True				
ANR	65199	Symbol	fetch_type		65076						
ANR	65200	Symbol	EG		65076						
ANR	65201	Symbol	TSRMLS_C		65076						
ANR	65202	Symbol	NULL		65076						
ANR	65203	Symbol	active_symbol_table		65076						
ANR	65204	Symbol	active_op_array		65076						
ANR	65205	Symbol	symbol_table		65076						
ANR	65206	Symbol	* EG		65076						
ANR	65207	Symbol	TSRMLS_DC		65076						
ANR	65208	Symbol	& EG		65076						
ANR	65209	Symbol	EG ( active_op_array ) -> static_variables		65076						
ANR	65210	Symbol	ZVAL_PTR_DTOR		65076						
ANR	65211	Function	zend_fetch_dimension_address_inner	1029:0:32722:35279							
ANR	65212	FunctionDef	"zend_fetch_dimension_address_inner (HashTable * ht , const zval * dim , int dim_type , int type TSRMLS_DC)"		65211	0					
ANR	65213	CompoundStatement		1030:0:32844:35279	65211	0					
ANR	65214	IdentifierDeclStatement	zval * * retval ;	1031:1:32847:32860	65211	0	True				
ANR	65215	IdentifierDecl	* * retval		65211	0					
ANR	65216	IdentifierDeclType	zval * *		65211	0					
ANR	65217	Identifier	retval		65211	1					
ANR	65218	IdentifierDeclStatement	char * offset_key ;	1032:1:32863:32879	65211	1	True				
ANR	65219	IdentifierDecl	* offset_key		65211	0					
ANR	65220	IdentifierDeclType	char *		65211	0					
ANR	65221	Identifier	offset_key		65211	1					
ANR	65222	IdentifierDeclStatement	int offset_key_length ;	1033:1:32882:32903	65211	2	True				
ANR	65223	IdentifierDecl	offset_key_length		65211	0					
ANR	65224	IdentifierDeclType	int		65211	0					
ANR	65225	Identifier	offset_key_length		65211	1					
ANR	65226	IdentifierDeclStatement	ulong hval ;	1034:1:32906:32916	65211	3	True				
ANR	65227	IdentifierDecl	hval		65211	0					
ANR	65228	IdentifierDeclType	ulong		65211	0					
ANR	65229	Identifier	hval		65211	1					
ANR	65230	SwitchStatement	switch ( dim -> type )		65211	4					
ANR	65231	Condition	dim -> type	1036:9:32928:32936	65211	0	True				
ANR	65232	PtrMemberAccess	dim -> type		65211	0					
ANR	65233	Identifier	dim		65211	0					
ANR	65234	Identifier	type		65211	1					
ANR	65235	CompoundStatement		7:20:94:94	65211	1					
ANR	65236	Label	case IS_NULL :	1037:2:32943:32955	65211	0	True				
ANR	65237	Identifier	IS_NULL		65211	0					
ANR	65238	ExpressionStatement	"offset_key = """""	1038:3:32960:32975	65211	1	True				
ANR	65239	AssignmentExpression	"offset_key = """""		65211	0		=			
ANR	65240	Identifier	offset_key		65211	0					
ANR	65241	PrimaryExpression	""""""		65211	1					
ANR	65242	ExpressionStatement	offset_key_length = 0	1039:3:32980:33001	65211	2	True				
ANR	65243	AssignmentExpression	offset_key_length = 0		65211	0		=			
ANR	65244	Identifier	offset_key_length		65211	0					
ANR	65245	PrimaryExpression	0		65211	1					
ANR	65246	ExpressionStatement	"hval = zend_inline_hash_func ( """" , 1 )"	1040:3:33006:33041	65211	3	True				
ANR	65247	AssignmentExpression	"hval = zend_inline_hash_func ( """" , 1 )"		65211	0		=			
ANR	65248	Identifier	hval		65211	0					
ANR	65249	CallExpression	"zend_inline_hash_func ( """" , 1 )"		65211	1					
ANR	65250	Callee	zend_inline_hash_func		65211	0					
ANR	65251	Identifier	zend_inline_hash_func		65211	0					
ANR	65252	ArgumentList	""""""		65211	1					
ANR	65253	Argument	""""""		65211	0					
ANR	65254	PrimaryExpression	""""""		65211	0					
ANR	65255	Argument	1		65211	1					
ANR	65256	PrimaryExpression	1		65211	0					
ANR	65257	GotoStatement	goto fetch_string_dim ;	1041:3:33046:33067	65211	4	True				
ANR	65258	Identifier	fetch_string_dim		65211	0					
ANR	65259	Label	case IS_STRING :	1043:2:33072:33086	65211	5	True				
ANR	65260	Identifier	IS_STRING		65211	0					
ANR	65261	ExpressionStatement	offset_key = dim -> value . str . val	1045:3:33092:33123	65211	6	True				
ANR	65262	AssignmentExpression	offset_key = dim -> value . str . val		65211	0		=			
ANR	65263	Identifier	offset_key		65211	0					
ANR	65264	MemberAccess	dim -> value . str . val		65211	1					
ANR	65265	MemberAccess	dim -> value . str		65211	0					
ANR	65266	PtrMemberAccess	dim -> value		65211	0					
ANR	65267	Identifier	dim		65211	0					
ANR	65268	Identifier	value		65211	1					
ANR	65269	Identifier	str		65211	1					
ANR	65270	Identifier	val		65211	1					
ANR	65271	ExpressionStatement	offset_key_length = dim -> value . str . len	1046:3:33128:33166	65211	7	True				
ANR	65272	AssignmentExpression	offset_key_length = dim -> value . str . len		65211	0		=			
ANR	65273	Identifier	offset_key_length		65211	0					
ANR	65274	MemberAccess	dim -> value . str . len		65211	1					
ANR	65275	MemberAccess	dim -> value . str		65211	0					
ANR	65276	PtrMemberAccess	dim -> value		65211	0					
ANR	65277	Identifier	dim		65211	0					
ANR	65278	Identifier	value		65211	1					
ANR	65279	Identifier	str		65211	1					
ANR	65280	Identifier	len		65211	1					
ANR	65281	IfStatement	if ( dim_type == IS_CONST )		65211	8					
ANR	65282	Condition	dim_type == IS_CONST	1048:7:33176:33195	65211	0	True				
ANR	65283	EqualityExpression	dim_type == IS_CONST		65211	0		==			
ANR	65284	Identifier	dim_type		65211	0					
ANR	65285	Identifier	IS_CONST		65211	1					
ANR	65286	CompoundStatement		19:29:353:353	65211	1					
ANR	65287	ExpressionStatement	hval = Z_HASH_P ( dim )	1049:4:33204:33224	65211	0	True				
ANR	65288	AssignmentExpression	hval = Z_HASH_P ( dim )		65211	0		=			
ANR	65289	Identifier	hval		65211	0					
ANR	65290	CallExpression	Z_HASH_P ( dim )		65211	1					
ANR	65291	Callee	Z_HASH_P		65211	0					
ANR	65292	Identifier	Z_HASH_P		65211	0					
ANR	65293	ArgumentList	dim		65211	1					
ANR	65294	Argument	dim		65211	0					
ANR	65295	Identifier	dim		65211	0					
ANR	65296	ElseStatement	else		65211	0					
ANR	65297	CompoundStatement		21:10:391:391	65211	0					
ANR	65298	Statement	ZEND_HANDLE_NUMERIC_EX	1051:4:33242:33263	65211	0	True				
ANR	65299	Statement	(	1051:26:33264:33264	65211	1	True				
ANR	65300	Statement	offset_key	1051:27:33265:33274	65211	2	True				
ANR	65301	Statement	","	1051:37:33275:33275	65211	3	True				
ANR	65302	Statement	offset_key_length	1051:39:33277:33293	65211	4	True				
ANR	65303	Statement	+	1051:56:33294:33294	65211	5	True				
ANR	65304	Statement	1	1051:57:33295:33295	65211	6	True				
ANR	65305	Statement	","	1051:58:33296:33296	65211	7	True				
ANR	65306	Statement	hval	1051:60:33298:33301	65211	8	True				
ANR	65307	Statement	","	1051:64:33302:33302	65211	9	True				
ANR	65308	Statement	goto	1051:66:33304:33307	65211	10	True				
ANR	65309	Statement	num_index	1051:71:33309:33317	65211	11	True				
ANR	65310	Statement	)	1051:80:33318:33318	65211	12	True				
ANR	65311	ExpressionStatement		1051:81:33319:33319	65211	13	True				
ANR	65312	ExpressionStatement	"hval = str_hash ( offset_key , offset_key_length )"	1052:4:33325:33371	65211	14	True				
ANR	65313	AssignmentExpression	"hval = str_hash ( offset_key , offset_key_length )"		65211	0		=			
ANR	65314	Identifier	hval		65211	0					
ANR	65315	CallExpression	"str_hash ( offset_key , offset_key_length )"		65211	1					
ANR	65316	Callee	str_hash		65211	0					
ANR	65317	Identifier	str_hash		65211	0					
ANR	65318	ArgumentList	offset_key		65211	1					
ANR	65319	Argument	offset_key		65211	0					
ANR	65320	Identifier	offset_key		65211	0					
ANR	65321	Argument	offset_key_length		65211	1					
ANR	65322	Identifier	offset_key_length		65211	0					
ANR	65323	Label	fetch_string_dim :	1054:0:33378:33394	65211	9	True				
ANR	65324	Identifier	fetch_string_dim		65211	0					
ANR	65325	IfStatement	"if ( zend_hash_quick_find ( ht , offset_key , offset_key_length + 1 , hval , ( void * * ) & retval ) == FAILURE )"		65211	10					
ANR	65326	Condition	"zend_hash_quick_find ( ht , offset_key , offset_key_length + 1 , hval , ( void * * ) & retval ) == FAILURE"	1055:7:33403:33495	65211	0	True				
ANR	65327	EqualityExpression	"zend_hash_quick_find ( ht , offset_key , offset_key_length + 1 , hval , ( void * * ) & retval ) == FAILURE"		65211	0		==			
ANR	65328	CallExpression	"zend_hash_quick_find ( ht , offset_key , offset_key_length + 1 , hval , ( void * * ) & retval )"		65211	0					
ANR	65329	Callee	zend_hash_quick_find		65211	0					
ANR	65330	Identifier	zend_hash_quick_find		65211	0					
ANR	65331	ArgumentList	ht		65211	1					
ANR	65332	Argument	ht		65211	0					
ANR	65333	Identifier	ht		65211	0					
ANR	65334	Argument	offset_key		65211	1					
ANR	65335	Identifier	offset_key		65211	0					
ANR	65336	Argument	offset_key_length + 1		65211	2					
ANR	65337	AdditiveExpression	offset_key_length + 1		65211	0		+			
ANR	65338	Identifier	offset_key_length		65211	0					
ANR	65339	PrimaryExpression	1		65211	1					
ANR	65340	Argument	hval		65211	3					
ANR	65341	Identifier	hval		65211	0					
ANR	65342	Argument	( void * * ) & retval		65211	4					
ANR	65343	CastExpression	( void * * ) & retval		65211	0					
ANR	65344	CastTarget	void * *		65211	0					
ANR	65345	UnaryOperationExpression	& retval		65211	1					
ANR	65346	UnaryOperator	&		65211	0					
ANR	65347	Identifier	retval		65211	1					
ANR	65348	Identifier	FAILURE		65211	1					
ANR	65349	CompoundStatement		26:102:653:653	65211	1					
ANR	65350	SwitchStatement	switch ( type )		65211	0					
ANR	65351	Condition	type	1056:12:33512:33515	65211	0	True				
ANR	65352	Identifier	type		65211	0					
ANR	65353	CompoundStatement		27:18:673:673	65211	1					
ANR	65354	Label	case BP_VAR_R :	1057:5:33525:33538	65211	0	True				
ANR	65355	Identifier	BP_VAR_R		65211	0					
ANR	65356	ExpressionStatement	"zend_error ( E_NOTICE , ""Undefined index: %s"" , offset_key )"	1058:6:33546:33601	65211	1	True				
ANR	65357	CallExpression	"zend_error ( E_NOTICE , ""Undefined index: %s"" , offset_key )"		65211	0					
ANR	65358	Callee	zend_error		65211	0					
ANR	65359	Identifier	zend_error		65211	0					
ANR	65360	ArgumentList	E_NOTICE		65211	1					
ANR	65361	Argument	E_NOTICE		65211	0					
ANR	65362	Identifier	E_NOTICE		65211	0					
ANR	65363	Argument	"""Undefined index: %s"""		65211	1					
ANR	65364	PrimaryExpression	"""Undefined index: %s"""		65211	0					
ANR	65365	Argument	offset_key		65211	2					
ANR	65366	Identifier	offset_key		65211	0					
ANR	65367	Label	case BP_VAR_UNSET :	1060:5:33648:33665	65211	2	True				
ANR	65368	Identifier	BP_VAR_UNSET		65211	0					
ANR	65369	Label	case BP_VAR_IS :	1061:5:33672:33686	65211	3	True				
ANR	65370	Identifier	BP_VAR_IS		65211	0					
ANR	65371	ExpressionStatement	retval = & EG ( uninitialized_zval_ptr )	1062:6:33694:33730	65211	4	True				
ANR	65372	AssignmentExpression	retval = & EG ( uninitialized_zval_ptr )		65211	0		=			
ANR	65373	Identifier	retval		65211	0					
ANR	65374	UnaryOperationExpression	& EG ( uninitialized_zval_ptr )		65211	1					
ANR	65375	UnaryOperator	&		65211	0					
ANR	65376	CallExpression	EG ( uninitialized_zval_ptr )		65211	1					
ANR	65377	Callee	EG		65211	0					
ANR	65378	Identifier	EG		65211	0					
ANR	65379	ArgumentList	uninitialized_zval_ptr		65211	1					
ANR	65380	Argument	uninitialized_zval_ptr		65211	0					
ANR	65381	Identifier	uninitialized_zval_ptr		65211	0					
ANR	65382	BreakStatement	break ;	1063:6:33738:33743	65211	5	True				
ANR	65383	Label	case BP_VAR_RW :	1064:5:33750:33764	65211	6	True				
ANR	65384	Identifier	BP_VAR_RW		65211	0					
ANR	65385	ExpressionStatement	"zend_error ( E_NOTICE , ""Undefined index: %s"" , offset_key )"	1065:6:33772:33826	65211	7	True				
ANR	65386	CallExpression	"zend_error ( E_NOTICE , ""Undefined index: %s"" , offset_key )"		65211	0					
ANR	65387	Callee	zend_error		65211	0					
ANR	65388	Identifier	zend_error		65211	0					
ANR	65389	ArgumentList	E_NOTICE		65211	1					
ANR	65390	Argument	E_NOTICE		65211	0					
ANR	65391	Identifier	E_NOTICE		65211	0					
ANR	65392	Argument	"""Undefined index: %s"""		65211	1					
ANR	65393	PrimaryExpression	"""Undefined index: %s"""		65211	0					
ANR	65394	Argument	offset_key		65211	2					
ANR	65395	Identifier	offset_key		65211	0					
ANR	65396	Label	case BP_VAR_W :	1067:5:33873:33886	65211	8	True				
ANR	65397	Identifier	BP_VAR_W		65211	0					
ANR	65398	CompoundStatement		39:7:1052:1092	65211	9					
ANR	65399	IdentifierDeclStatement	zval * new_zval = & EG ( uninitialized_zval ) ;	1068:7:33897:33937	65211	0	True				
ANR	65400	IdentifierDecl	* new_zval = & EG ( uninitialized_zval )		65211	0					
ANR	65401	IdentifierDeclType	zval *		65211	0					
ANR	65402	Identifier	new_zval		65211	1					
ANR	65403	AssignmentExpression	* new_zval = & EG ( uninitialized_zval )		65211	2		=			
ANR	65404	Identifier	new_zval		65211	0					
ANR	65405	UnaryOperationExpression	& EG ( uninitialized_zval )		65211	1					
ANR	65406	UnaryOperator	&		65211	0					
ANR	65407	CallExpression	EG ( uninitialized_zval )		65211	1					
ANR	65408	Callee	EG		65211	0					
ANR	65409	Identifier	EG		65211	0					
ANR	65410	ArgumentList	uninitialized_zval		65211	1					
ANR	65411	Argument	uninitialized_zval		65211	0					
ANR	65412	Identifier	uninitialized_zval		65211	0					
ANR	65413	ExpressionStatement	Z_ADDREF_P ( new_zval )	1070:7:33947:33967	65211	1	True				
ANR	65414	CallExpression	Z_ADDREF_P ( new_zval )		65211	0					
ANR	65415	Callee	Z_ADDREF_P		65211	0					
ANR	65416	Identifier	Z_ADDREF_P		65211	0					
ANR	65417	ArgumentList	new_zval		65211	1					
ANR	65418	Argument	new_zval		65211	0					
ANR	65419	Identifier	new_zval		65211	0					
ANR	65420	ExpressionStatement	"zend_hash_quick_update ( ht , offset_key , offset_key_length + 1 , hval , & new_zval , sizeof ( zval * ) , ( void * * ) & retval )"	1071:7:33976:34087	65211	2	True				
ANR	65421	CallExpression	"zend_hash_quick_update ( ht , offset_key , offset_key_length + 1 , hval , & new_zval , sizeof ( zval * ) , ( void * * ) & retval )"		65211	0					
ANR	65422	Callee	zend_hash_quick_update		65211	0					
ANR	65423	Identifier	zend_hash_quick_update		65211	0					
ANR	65424	ArgumentList	ht		65211	1					
ANR	65425	Argument	ht		65211	0					
ANR	65426	Identifier	ht		65211	0					
ANR	65427	Argument	offset_key		65211	1					
ANR	65428	Identifier	offset_key		65211	0					
ANR	65429	Argument	offset_key_length + 1		65211	2					
ANR	65430	AdditiveExpression	offset_key_length + 1		65211	0		+			
ANR	65431	Identifier	offset_key_length		65211	0					
ANR	65432	PrimaryExpression	1		65211	1					
ANR	65433	Argument	hval		65211	3					
ANR	65434	Identifier	hval		65211	0					
ANR	65435	Argument	& new_zval		65211	4					
ANR	65436	UnaryOperationExpression	& new_zval		65211	0					
ANR	65437	UnaryOperator	&		65211	0					
ANR	65438	Identifier	new_zval		65211	1					
ANR	65439	Argument	sizeof ( zval * )		65211	5					
ANR	65440	SizeofExpression	sizeof ( zval * )		65211	0					
ANR	65441	Sizeof	sizeof		65211	0					
ANR	65442	SizeofOperand	zval *		65211	1					
ANR	65443	Argument	( void * * ) & retval		65211	6					
ANR	65444	CastExpression	( void * * ) & retval		65211	0					
ANR	65445	CastTarget	void * *		65211	0					
ANR	65446	UnaryOperationExpression	& retval		65211	1					
ANR	65447	UnaryOperator	&		65211	0					
ANR	65448	Identifier	retval		65211	1					
ANR	65449	BreakStatement	break ;	1073:6:34103:34108	65211	10	True				
ANR	65450	BreakStatement	break ;	1076:3:34124:34129	65211	11	True				
ANR	65451	Label	case IS_DOUBLE :	1077:2:34133:34147	65211	12	True				
ANR	65452	Identifier	IS_DOUBLE		65211	0					
ANR	65453	ExpressionStatement	hval = zend_dval_to_lval ( Z_DVAL_P ( dim ) )	1078:3:34152:34191	65211	13	True				
ANR	65454	AssignmentExpression	hval = zend_dval_to_lval ( Z_DVAL_P ( dim ) )		65211	0		=			
ANR	65455	Identifier	hval		65211	0					
ANR	65456	CallExpression	zend_dval_to_lval ( Z_DVAL_P ( dim ) )		65211	1					
ANR	65457	Callee	zend_dval_to_lval		65211	0					
ANR	65458	Identifier	zend_dval_to_lval		65211	0					
ANR	65459	ArgumentList	Z_DVAL_P ( dim )		65211	1					
ANR	65460	Argument	Z_DVAL_P ( dim )		65211	0					
ANR	65461	CallExpression	Z_DVAL_P ( dim )		65211	0					
ANR	65462	Callee	Z_DVAL_P		65211	0					
ANR	65463	Identifier	Z_DVAL_P		65211	0					
ANR	65464	ArgumentList	dim		65211	1					
ANR	65465	Argument	dim		65211	0					
ANR	65466	Identifier	dim		65211	0					
ANR	65467	GotoStatement	goto num_index ;	1079:3:34196:34210	65211	14	True				
ANR	65468	Identifier	num_index		65211	0					
ANR	65469	Label	case IS_RESOURCE :	1080:2:34214:34230	65211	15	True				
ANR	65470	Identifier	IS_RESOURCE		65211	0					
ANR	65471	ExpressionStatement	"zend_error ( E_STRICT , ""Resource ID#%ld used as offset, casting to integer (%ld)"" , Z_LVAL_P ( dim ) , Z_LVAL_P ( dim ) )"	1081:3:34235:34345	65211	16	True				
ANR	65472	CallExpression	"zend_error ( E_STRICT , ""Resource ID#%ld used as offset, casting to integer (%ld)"" , Z_LVAL_P ( dim ) , Z_LVAL_P ( dim ) )"		65211	0					
ANR	65473	Callee	zend_error		65211	0					
ANR	65474	Identifier	zend_error		65211	0					
ANR	65475	ArgumentList	E_STRICT		65211	1					
ANR	65476	Argument	E_STRICT		65211	0					
ANR	65477	Identifier	E_STRICT		65211	0					
ANR	65478	Argument	"""Resource ID#%ld used as offset, casting to integer (%ld)"""		65211	1					
ANR	65479	PrimaryExpression	"""Resource ID#%ld used as offset, casting to integer (%ld)"""		65211	0					
ANR	65480	Argument	Z_LVAL_P ( dim )		65211	2					
ANR	65481	CallExpression	Z_LVAL_P ( dim )		65211	0					
ANR	65482	Callee	Z_LVAL_P		65211	0					
ANR	65483	Identifier	Z_LVAL_P		65211	0					
ANR	65484	ArgumentList	dim		65211	1					
ANR	65485	Argument	dim		65211	0					
ANR	65486	Identifier	dim		65211	0					
ANR	65487	Argument	Z_LVAL_P ( dim )		65211	3					
ANR	65488	CallExpression	Z_LVAL_P ( dim )		65211	0					
ANR	65489	Callee	Z_LVAL_P		65211	0					
ANR	65490	Identifier	Z_LVAL_P		65211	0					
ANR	65491	ArgumentList	dim		65211	1					
ANR	65492	Argument	dim		65211	0					
ANR	65493	Identifier	dim		65211	0					
ANR	65494	Label	case IS_BOOL :	1083:2:34371:34383	65211	17	True				
ANR	65495	Identifier	IS_BOOL		65211	0					
ANR	65496	Label	case IS_LONG :	1084:2:34387:34399	65211	18	True				
ANR	65497	Identifier	IS_LONG		65211	0					
ANR	65498	ExpressionStatement	hval = Z_LVAL_P ( dim )	1085:3:34404:34424	65211	19	True				
ANR	65499	AssignmentExpression	hval = Z_LVAL_P ( dim )		65211	0		=			
ANR	65500	Identifier	hval		65211	0					
ANR	65501	CallExpression	Z_LVAL_P ( dim )		65211	1					
ANR	65502	Callee	Z_LVAL_P		65211	0					
ANR	65503	Identifier	Z_LVAL_P		65211	0					
ANR	65504	ArgumentList	dim		65211	1					
ANR	65505	Argument	dim		65211	0					
ANR	65506	Identifier	dim		65211	0					
ANR	65507	Label	num_index :	1086:0:34426:34435	65211	20	True				
ANR	65508	Identifier	num_index		65211	0					
ANR	65509	IfStatement	"if ( zend_hash_index_find ( ht , hval , ( void * * ) & retval ) == FAILURE )"		65211	21					
ANR	65510	Condition	"zend_hash_index_find ( ht , hval , ( void * * ) & retval ) == FAILURE"	1087:7:34444:34503	65211	0	True				
ANR	65511	EqualityExpression	"zend_hash_index_find ( ht , hval , ( void * * ) & retval ) == FAILURE"		65211	0		==			
ANR	65512	CallExpression	"zend_hash_index_find ( ht , hval , ( void * * ) & retval )"		65211	0					
ANR	65513	Callee	zend_hash_index_find		65211	0					
ANR	65514	Identifier	zend_hash_index_find		65211	0					
ANR	65515	ArgumentList	ht		65211	1					
ANR	65516	Argument	ht		65211	0					
ANR	65517	Identifier	ht		65211	0					
ANR	65518	Argument	hval		65211	1					
ANR	65519	Identifier	hval		65211	0					
ANR	65520	Argument	( void * * ) & retval		65211	2					
ANR	65521	CastExpression	( void * * ) & retval		65211	0					
ANR	65522	CastTarget	void * *		65211	0					
ANR	65523	UnaryOperationExpression	& retval		65211	1					
ANR	65524	UnaryOperator	&		65211	0					
ANR	65525	Identifier	retval		65211	1					
ANR	65526	Identifier	FAILURE		65211	1					
ANR	65527	CompoundStatement		58:69:1661:1661	65211	1					
ANR	65528	SwitchStatement	switch ( type )		65211	0					
ANR	65529	Condition	type	1088:12:34520:34523	65211	0	True				
ANR	65530	Identifier	type		65211	0					
ANR	65531	CompoundStatement		59:18:1681:1681	65211	1					
ANR	65532	Label	case BP_VAR_R :	1089:5:34533:34546	65211	0	True				
ANR	65533	Identifier	BP_VAR_R		65211	0					
ANR	65534	ExpressionStatement	"zend_error ( E_NOTICE , ""Undefined offset: %ld"" , hval )"	1090:6:34554:34604	65211	1	True				
ANR	65535	CallExpression	"zend_error ( E_NOTICE , ""Undefined offset: %ld"" , hval )"		65211	0					
ANR	65536	Callee	zend_error		65211	0					
ANR	65537	Identifier	zend_error		65211	0					
ANR	65538	ArgumentList	E_NOTICE		65211	1					
ANR	65539	Argument	E_NOTICE		65211	0					
ANR	65540	Identifier	E_NOTICE		65211	0					
ANR	65541	Argument	"""Undefined offset: %ld"""		65211	1					
ANR	65542	PrimaryExpression	"""Undefined offset: %ld"""		65211	0					
ANR	65543	Argument	hval		65211	2					
ANR	65544	Identifier	hval		65211	0					
ANR	65545	Label	case BP_VAR_UNSET :	1092:5:34651:34668	65211	2	True				
ANR	65546	Identifier	BP_VAR_UNSET		65211	0					
ANR	65547	Label	case BP_VAR_IS :	1093:5:34675:34689	65211	3	True				
ANR	65548	Identifier	BP_VAR_IS		65211	0					
ANR	65549	ExpressionStatement	retval = & EG ( uninitialized_zval_ptr )	1094:6:34697:34733	65211	4	True				
ANR	65550	AssignmentExpression	retval = & EG ( uninitialized_zval_ptr )		65211	0		=			
ANR	65551	Identifier	retval		65211	0					
ANR	65552	UnaryOperationExpression	& EG ( uninitialized_zval_ptr )		65211	1					
ANR	65553	UnaryOperator	&		65211	0					
ANR	65554	CallExpression	EG ( uninitialized_zval_ptr )		65211	1					
ANR	65555	Callee	EG		65211	0					
ANR	65556	Identifier	EG		65211	0					
ANR	65557	ArgumentList	uninitialized_zval_ptr		65211	1					
ANR	65558	Argument	uninitialized_zval_ptr		65211	0					
ANR	65559	Identifier	uninitialized_zval_ptr		65211	0					
ANR	65560	BreakStatement	break ;	1095:6:34741:34746	65211	5	True				
ANR	65561	Label	case BP_VAR_RW :	1096:5:34753:34767	65211	6	True				
ANR	65562	Identifier	BP_VAR_RW		65211	0					
ANR	65563	ExpressionStatement	"zend_error ( E_NOTICE , ""Undefined offset: %ld"" , hval )"	1097:6:34775:34825	65211	7	True				
ANR	65564	CallExpression	"zend_error ( E_NOTICE , ""Undefined offset: %ld"" , hval )"		65211	0					
ANR	65565	Callee	zend_error		65211	0					
ANR	65566	Identifier	zend_error		65211	0					
ANR	65567	ArgumentList	E_NOTICE		65211	1					
ANR	65568	Argument	E_NOTICE		65211	0					
ANR	65569	Identifier	E_NOTICE		65211	0					
ANR	65570	Argument	"""Undefined offset: %ld"""		65211	1					
ANR	65571	PrimaryExpression	"""Undefined offset: %ld"""		65211	0					
ANR	65572	Argument	hval		65211	2					
ANR	65573	Identifier	hval		65211	0					
ANR	65574	Label	case BP_VAR_W :	1099:5:34872:34885	65211	8	True				
ANR	65575	Identifier	BP_VAR_W		65211	0					
ANR	65576	CompoundStatement		71:6:2050:2090	65211	9					
ANR	65577	IdentifierDeclStatement	zval * new_zval = & EG ( uninitialized_zval ) ;	1100:6:34895:34935	65211	0	True				
ANR	65578	IdentifierDecl	* new_zval = & EG ( uninitialized_zval )		65211	0					
ANR	65579	IdentifierDeclType	zval *		65211	0					
ANR	65580	Identifier	new_zval		65211	1					
ANR	65581	AssignmentExpression	* new_zval = & EG ( uninitialized_zval )		65211	2		=			
ANR	65582	Identifier	new_zval		65211	0					
ANR	65583	UnaryOperationExpression	& EG ( uninitialized_zval )		65211	1					
ANR	65584	UnaryOperator	&		65211	0					
ANR	65585	CallExpression	EG ( uninitialized_zval )		65211	1					
ANR	65586	Callee	EG		65211	0					
ANR	65587	Identifier	EG		65211	0					
ANR	65588	ArgumentList	uninitialized_zval		65211	1					
ANR	65589	Argument	uninitialized_zval		65211	0					
ANR	65590	Identifier	uninitialized_zval		65211	0					
ANR	65591	ExpressionStatement	Z_ADDREF_P ( new_zval )	1102:6:34944:34964	65211	1	True				
ANR	65592	CallExpression	Z_ADDREF_P ( new_zval )		65211	0					
ANR	65593	Callee	Z_ADDREF_P		65211	0					
ANR	65594	Identifier	Z_ADDREF_P		65211	0					
ANR	65595	ArgumentList	new_zval		65211	1					
ANR	65596	Argument	new_zval		65211	0					
ANR	65597	Identifier	new_zval		65211	0					
ANR	65598	ExpressionStatement	"zend_hash_index_update ( ht , hval , & new_zval , sizeof ( zval * ) , ( void * * ) & retval )"	1103:6:34972:35050	65211	2	True				
ANR	65599	CallExpression	"zend_hash_index_update ( ht , hval , & new_zval , sizeof ( zval * ) , ( void * * ) & retval )"		65211	0					
ANR	65600	Callee	zend_hash_index_update		65211	0					
ANR	65601	Identifier	zend_hash_index_update		65211	0					
ANR	65602	ArgumentList	ht		65211	1					
ANR	65603	Argument	ht		65211	0					
ANR	65604	Identifier	ht		65211	0					
ANR	65605	Argument	hval		65211	1					
ANR	65606	Identifier	hval		65211	0					
ANR	65607	Argument	& new_zval		65211	2					
ANR	65608	UnaryOperationExpression	& new_zval		65211	0					
ANR	65609	UnaryOperator	&		65211	0					
ANR	65610	Identifier	new_zval		65211	1					
ANR	65611	Argument	sizeof ( zval * )		65211	3					
ANR	65612	SizeofExpression	sizeof ( zval * )		65211	0					
ANR	65613	Sizeof	sizeof		65211	0					
ANR	65614	SizeofOperand	zval *		65211	1					
ANR	65615	Argument	( void * * ) & retval		65211	4					
ANR	65616	CastExpression	( void * * ) & retval		65211	0					
ANR	65617	CastTarget	void * *		65211	0					
ANR	65618	UnaryOperationExpression	& retval		65211	1					
ANR	65619	UnaryOperator	&		65211	0					
ANR	65620	Identifier	retval		65211	1					
ANR	65621	BreakStatement	break ;	1105:5:35064:35069	65211	10	True				
ANR	65622	BreakStatement	break ;	1108:3:35085:35090	65211	22	True				
ANR	65623	Label	default :	1110:2:35095:35102	65211	23	True				
ANR	65624	Identifier	default		65211	0					
ANR	65625	ExpressionStatement	"zend_error ( E_WARNING , ""Illegal offset type"" )"	1111:3:35107:35151	65211	24	True				
ANR	65626	CallExpression	"zend_error ( E_WARNING , ""Illegal offset type"" )"		65211	0					
ANR	65627	Callee	zend_error		65211	0					
ANR	65628	Identifier	zend_error		65211	0					
ANR	65629	ArgumentList	E_WARNING		65211	1					
ANR	65630	Argument	E_WARNING		65211	0					
ANR	65631	Identifier	E_WARNING		65211	0					
ANR	65632	Argument	"""Illegal offset type"""		65211	1					
ANR	65633	PrimaryExpression	"""Illegal offset type"""		65211	0					
ANR	65634	ReturnStatement	return ( type == BP_VAR_W || type == BP_VAR_RW ) ? & EG ( error_zval_ptr ) : & EG ( uninitialized_zval_ptr ) ;	1112:3:35156:35258	65211	25	True				
ANR	65635	ConditionalExpression	( type == BP_VAR_W || type == BP_VAR_RW ) ? & EG ( error_zval_ptr ) : & EG ( uninitialized_zval_ptr )		65211	0					
ANR	65636	Condition	type == BP_VAR_W || type == BP_VAR_RW		65211	0					
ANR	65637	OrExpression	type == BP_VAR_W || type == BP_VAR_RW		65211	0		||			
ANR	65638	EqualityExpression	type == BP_VAR_W		65211	0		==			
ANR	65639	Identifier	type		65211	0					
ANR	65640	Identifier	BP_VAR_W		65211	1					
ANR	65641	EqualityExpression	type == BP_VAR_RW		65211	1		==			
ANR	65642	Identifier	type		65211	0					
ANR	65643	Identifier	BP_VAR_RW		65211	1					
ANR	65644	UnaryOperationExpression	& EG ( error_zval_ptr )		65211	1					
ANR	65645	UnaryOperator	&		65211	0					
ANR	65646	CallExpression	EG ( error_zval_ptr )		65211	1					
ANR	65647	Callee	EG		65211	0					
ANR	65648	Identifier	EG		65211	0					
ANR	65649	ArgumentList	error_zval_ptr		65211	1					
ANR	65650	Argument	error_zval_ptr		65211	0					
ANR	65651	Identifier	error_zval_ptr		65211	0					
ANR	65652	UnaryOperationExpression	& EG ( uninitialized_zval_ptr )		65211	2					
ANR	65653	UnaryOperator	&		65211	0					
ANR	65654	CallExpression	EG ( uninitialized_zval_ptr )		65211	1					
ANR	65655	Callee	EG		65211	0					
ANR	65656	Identifier	EG		65211	0					
ANR	65657	ArgumentList	uninitialized_zval_ptr		65211	1					
ANR	65658	Argument	uninitialized_zval_ptr		65211	0					
ANR	65659	Identifier	uninitialized_zval_ptr		65211	0					
ANR	65660	ReturnStatement	return retval ;	1115:1:35264:35277	65211	5	True				
ANR	65661	Identifier	retval		65211	0					
ANR	65662	ReturnType	static inline zval * *		65211	1					
ANR	65663	Identifier	zend_fetch_dimension_address_inner		65211	2					
ANR	65664	ParameterList	"HashTable * ht , const zval * dim , int dim_type , int type TSRMLS_DC"		65211	3					
ANR	65665	Parameter	HashTable * ht	1029:56:32778:32790	65211	0	True				
ANR	65666	ParameterType	HashTable *		65211	0					
ANR	65667	Identifier	ht		65211	1					
ANR	65668	Parameter	const zval * dim	1029:71:32793:32807	65211	1	True				
ANR	65669	ParameterType	const zval *		65211	0					
ANR	65670	Identifier	dim		65211	1					
ANR	65671	Parameter	int dim_type	1029:88:32810:32821	65211	2	True				
ANR	65672	ParameterType	int		65211	0					
ANR	65673	Identifier	dim_type		65211	1					
ANR	65674	Parameter	int type TSRMLS_DC	1029:102:32824:32841	65211	3	True				
ANR	65675	ParameterType	int type		65211	0					
ANR	65676	Identifier	TSRMLS_DC		65211	1					
ANR	65677	CFGEntryNode	ENTRY		65211		True				
ANR	65678	CFGExitNode	EXIT		65211		True				
ANR	65679	Symbol	dim_type		65211						
ANR	65680	Symbol	hval		65211						
ANR	65681	Symbol	dim		65211						
ANR	65682	Symbol	E_STRICT		65211						
ANR	65683	Symbol	ht		65211						
ANR	65684	Symbol	type		65211						
ANR	65685	Symbol	TSRMLS_DC		65211						
ANR	65686	Symbol	dim -> type		65211						
ANR	65687	Symbol	* dim		65211						
ANR	65688	Symbol	& EG		65211						
ANR	65689	Symbol	zend_dval_to_lval		65211						
ANR	65690	Symbol	E_WARNING		65211						
ANR	65691	Symbol	zend_hash_quick_find		65211						
ANR	65692	Symbol	dim -> value . str		65211						
ANR	65693	Symbol	Z_HASH_P		65211						
ANR	65694	Symbol	& retval		65211						
ANR	65695	Symbol	BP_VAR_W		65211						
ANR	65696	Symbol	offset_key		65211						
ANR	65697	Symbol	dim -> value . str . len		65211						
ANR	65698	Symbol	uninitialized_zval		65211						
ANR	65699	Symbol	BP_VAR_RW		65211						
ANR	65700	Symbol	zend_hash_index_find		65211						
ANR	65701	Symbol	IS_CONST		65211						
ANR	65702	Symbol	error_zval_ptr		65211						
ANR	65703	Symbol	dim -> value . str . val		65211						
ANR	65704	Symbol	E_NOTICE		65211						
ANR	65705	Symbol	FAILURE		65211						
ANR	65706	Symbol	retval		65211						
ANR	65707	Symbol	zend_inline_hash_func		65211						
ANR	65708	Symbol	Z_DVAL_P		65211						
ANR	65709	Symbol	& new_zval		65211						
ANR	65710	Symbol	Z_LVAL_P		65211						
ANR	65711	Symbol	str_hash		65211						
ANR	65712	Symbol	offset_key_length		65211						
ANR	65713	Symbol	uninitialized_zval_ptr		65211						
ANR	65714	Symbol	dim -> value		65211						
ANR	65715	Symbol	new_zval		65211						
ANR	65716	Function	zend_fetch_dimension_address	1118:0:35282:39866							
ANR	65717	FunctionDef	"zend_fetch_dimension_address (temp_variable * result , zval * * container_ptr , zval * dim , int dim_type , int type TSRMLS_DC)"		65716	0					
ANR	65718	CompoundStatement		1119:0:35413:39866	65716	0					
ANR	65719	IdentifierDeclStatement	zval * container = * container_ptr ;	1120:1:35416:35448	65716	0	True				
ANR	65720	IdentifierDecl	* container = * container_ptr		65716	0					
ANR	65721	IdentifierDeclType	zval *		65716	0					
ANR	65722	Identifier	container		65716	1					
ANR	65723	AssignmentExpression	* container = * container_ptr		65716	2		=			
ANR	65724	Identifier	container		65716	0					
ANR	65725	UnaryOperationExpression	* container_ptr		65716	1					
ANR	65726	UnaryOperator	*		65716	0					
ANR	65727	Identifier	container_ptr		65716	1					
ANR	65728	IdentifierDeclStatement	zval * * retval ;	1121:1:35451:35464	65716	1	True				
ANR	65729	IdentifierDecl	* * retval		65716	0					
ANR	65730	IdentifierDeclType	zval * *		65716	0					
ANR	65731	Identifier	retval		65716	1					
ANR	65732	SwitchStatement	switch ( Z_TYPE_P ( container ) )		65716	2					
ANR	65733	Condition	Z_TYPE_P ( container )	1123:9:35476:35494	65716	0	True				
ANR	65734	CallExpression	Z_TYPE_P ( container )		65716	0					
ANR	65735	Callee	Z_TYPE_P		65716	0					
ANR	65736	Identifier	Z_TYPE_P		65716	0					
ANR	65737	ArgumentList	container		65716	1					
ANR	65738	Argument	container		65716	0					
ANR	65739	Identifier	container		65716	0					
ANR	65740	CompoundStatement		5:30:83:83	65716	1					
ANR	65741	Label	case IS_ARRAY :	1125:2:35502:35515	65716	0	True				
ANR	65742	Identifier	IS_ARRAY		65716	0					
ANR	65743	IfStatement	if ( type != BP_VAR_UNSET && Z_REFCOUNT_P ( container ) > 1 && ! PZVAL_IS_REF ( container ) )		65716	1					
ANR	65744	Condition	type != BP_VAR_UNSET && Z_REFCOUNT_P ( container ) > 1 && ! PZVAL_IS_REF ( container )	1126:7:35524:35600	65716	0	True				
ANR	65745	AndExpression	type != BP_VAR_UNSET && Z_REFCOUNT_P ( container ) > 1 && ! PZVAL_IS_REF ( container )		65716	0		&&			
ANR	65746	EqualityExpression	type != BP_VAR_UNSET		65716	0		!=			
ANR	65747	Identifier	type		65716	0					
ANR	65748	Identifier	BP_VAR_UNSET		65716	1					
ANR	65749	AndExpression	Z_REFCOUNT_P ( container ) > 1 && ! PZVAL_IS_REF ( container )		65716	1		&&			
ANR	65750	RelationalExpression	Z_REFCOUNT_P ( container ) > 1		65716	0		>			
ANR	65751	CallExpression	Z_REFCOUNT_P ( container )		65716	0					
ANR	65752	Callee	Z_REFCOUNT_P		65716	0					
ANR	65753	Identifier	Z_REFCOUNT_P		65716	0					
ANR	65754	ArgumentList	container		65716	1					
ANR	65755	Argument	container		65716	0					
ANR	65756	Identifier	container		65716	0					
ANR	65757	PrimaryExpression	1		65716	1					
ANR	65758	UnaryOperationExpression	! PZVAL_IS_REF ( container )		65716	1					
ANR	65759	UnaryOperator	!		65716	0					
ANR	65760	CallExpression	PZVAL_IS_REF ( container )		65716	1					
ANR	65761	Callee	PZVAL_IS_REF		65716	0					
ANR	65762	Identifier	PZVAL_IS_REF		65716	0					
ANR	65763	ArgumentList	container		65716	1					
ANR	65764	Argument	container		65716	0					
ANR	65765	Identifier	container		65716	0					
ANR	65766	CompoundStatement		8:86:189:189	65716	1					
ANR	65767	ExpressionStatement	SEPARATE_ZVAL ( container_ptr )	1127:4:35609:35637	65716	0	True				
ANR	65768	CallExpression	SEPARATE_ZVAL ( container_ptr )		65716	0					
ANR	65769	Callee	SEPARATE_ZVAL		65716	0					
ANR	65770	Identifier	SEPARATE_ZVAL		65716	0					
ANR	65771	ArgumentList	container_ptr		65716	1					
ANR	65772	Argument	container_ptr		65716	0					
ANR	65773	Identifier	container_ptr		65716	0					
ANR	65774	ExpressionStatement	container = * container_ptr	1128:4:35643:35669	65716	1	True				
ANR	65775	AssignmentExpression	container = * container_ptr		65716	0		=			
ANR	65776	Identifier	container		65716	0					
ANR	65777	UnaryOperationExpression	* container_ptr		65716	1					
ANR	65778	UnaryOperator	*		65716	0					
ANR	65779	Identifier	container_ptr		65716	1					
ANR	65780	Label	fetch_from_array :	1130:0:35676:35692	65716	2	True				
ANR	65781	Identifier	fetch_from_array		65716	0					
ANR	65782	IfStatement	if ( dim == NULL )		65716	3					
ANR	65783	Condition	dim == NULL	1131:7:35701:35711	65716	0	True				
ANR	65784	EqualityExpression	dim == NULL		65716	0		==			
ANR	65785	Identifier	dim		65716	0					
ANR	65786	Identifier	NULL		65716	1					
ANR	65787	CompoundStatement		14:4:306:346	65716	1					
ANR	65788	IdentifierDeclStatement	zval * new_zval = & EG ( uninitialized_zval ) ;	1132:4:35720:35760	65716	0	True				
ANR	65789	IdentifierDecl	* new_zval = & EG ( uninitialized_zval )		65716	0					
ANR	65790	IdentifierDeclType	zval *		65716	0					
ANR	65791	Identifier	new_zval		65716	1					
ANR	65792	AssignmentExpression	* new_zval = & EG ( uninitialized_zval )		65716	2		=			
ANR	65793	Identifier	new_zval		65716	0					
ANR	65794	UnaryOperationExpression	& EG ( uninitialized_zval )		65716	1					
ANR	65795	UnaryOperator	&		65716	0					
ANR	65796	CallExpression	EG ( uninitialized_zval )		65716	1					
ANR	65797	Callee	EG		65716	0					
ANR	65798	Identifier	EG		65716	0					
ANR	65799	ArgumentList	uninitialized_zval		65716	1					
ANR	65800	Argument	uninitialized_zval		65716	0					
ANR	65801	Identifier	uninitialized_zval		65716	0					
ANR	65802	ExpressionStatement	Z_ADDREF_P ( new_zval )	1134:4:35767:35787	65716	1	True				
ANR	65803	CallExpression	Z_ADDREF_P ( new_zval )		65716	0					
ANR	65804	Callee	Z_ADDREF_P		65716	0					
ANR	65805	Identifier	Z_ADDREF_P		65716	0					
ANR	65806	ArgumentList	new_zval		65716	1					
ANR	65807	Argument	new_zval		65716	0					
ANR	65808	Identifier	new_zval		65716	0					
ANR	65809	IfStatement	"if ( zend_hash_next_index_insert ( Z_ARRVAL_P ( container ) , & new_zval , sizeof ( zval * ) , ( void * * ) & retval ) == FAILURE )"		65716	2					
ANR	65810	Condition	"zend_hash_next_index_insert ( Z_ARRVAL_P ( container ) , & new_zval , sizeof ( zval * ) , ( void * * ) & retval ) == FAILURE"	1135:8:35797:35903	65716	0	True				
ANR	65811	EqualityExpression	"zend_hash_next_index_insert ( Z_ARRVAL_P ( container ) , & new_zval , sizeof ( zval * ) , ( void * * ) & retval ) == FAILURE"		65716	0		==			
ANR	65812	CallExpression	"zend_hash_next_index_insert ( Z_ARRVAL_P ( container ) , & new_zval , sizeof ( zval * ) , ( void * * ) & retval )"		65716	0					
ANR	65813	Callee	zend_hash_next_index_insert		65716	0					
ANR	65814	Identifier	zend_hash_next_index_insert		65716	0					
ANR	65815	ArgumentList	Z_ARRVAL_P ( container )		65716	1					
ANR	65816	Argument	Z_ARRVAL_P ( container )		65716	0					
ANR	65817	CallExpression	Z_ARRVAL_P ( container )		65716	0					
ANR	65818	Callee	Z_ARRVAL_P		65716	0					
ANR	65819	Identifier	Z_ARRVAL_P		65716	0					
ANR	65820	ArgumentList	container		65716	1					
ANR	65821	Argument	container		65716	0					
ANR	65822	Identifier	container		65716	0					
ANR	65823	Argument	& new_zval		65716	1					
ANR	65824	UnaryOperationExpression	& new_zval		65716	0					
ANR	65825	UnaryOperator	&		65716	0					
ANR	65826	Identifier	new_zval		65716	1					
ANR	65827	Argument	sizeof ( zval * )		65716	2					
ANR	65828	SizeofExpression	sizeof ( zval * )		65716	0					
ANR	65829	Sizeof	sizeof		65716	0					
ANR	65830	SizeofOperand	zval *		65716	1					
ANR	65831	Argument	( void * * ) & retval		65716	3					
ANR	65832	CastExpression	( void * * ) & retval		65716	0					
ANR	65833	CastTarget	void * *		65716	0					
ANR	65834	UnaryOperationExpression	& retval		65716	1					
ANR	65835	UnaryOperator	&		65716	0					
ANR	65836	Identifier	retval		65716	1					
ANR	65837	Identifier	FAILURE		65716	1					
ANR	65838	CompoundStatement		17:117:492:492	65716	1					
ANR	65839	ExpressionStatement	"zend_error ( E_WARNING , ""Cannot add element to the array as the next element is already occupied"" )"	1136:5:35913:36009	65716	0	True				
ANR	65840	CallExpression	"zend_error ( E_WARNING , ""Cannot add element to the array as the next element is already occupied"" )"		65716	0					
ANR	65841	Callee	zend_error		65716	0					
ANR	65842	Identifier	zend_error		65716	0					
ANR	65843	ArgumentList	E_WARNING		65716	1					
ANR	65844	Argument	E_WARNING		65716	0					
ANR	65845	Identifier	E_WARNING		65716	0					
ANR	65846	Argument	"""Cannot add element to the array as the next element is already occupied"""		65716	1					
ANR	65847	PrimaryExpression	"""Cannot add element to the array as the next element is already occupied"""		65716	0					
ANR	65848	ExpressionStatement	retval = & EG ( error_zval_ptr )	1137:5:36016:36044	65716	1	True				
ANR	65849	AssignmentExpression	retval = & EG ( error_zval_ptr )		65716	0		=			
ANR	65850	Identifier	retval		65716	0					
ANR	65851	UnaryOperationExpression	& EG ( error_zval_ptr )		65716	1					
ANR	65852	UnaryOperator	&		65716	0					
ANR	65853	CallExpression	EG ( error_zval_ptr )		65716	1					
ANR	65854	Callee	EG		65716	0					
ANR	65855	Identifier	EG		65716	0					
ANR	65856	ArgumentList	error_zval_ptr		65716	1					
ANR	65857	Argument	error_zval_ptr		65716	0					
ANR	65858	Identifier	error_zval_ptr		65716	0					
ANR	65859	ExpressionStatement	Z_DELREF_P ( new_zval )	1138:5:36051:36071	65716	2	True				
ANR	65860	CallExpression	Z_DELREF_P ( new_zval )		65716	0					
ANR	65861	Callee	Z_DELREF_P		65716	0					
ANR	65862	Identifier	Z_DELREF_P		65716	0					
ANR	65863	ArgumentList	new_zval		65716	1					
ANR	65864	Argument	new_zval		65716	0					
ANR	65865	Identifier	new_zval		65716	0					
ANR	65866	ElseStatement	else		65716	0					
ANR	65867	CompoundStatement		22:10:675:675	65716	0					
ANR	65868	Statement	retval	1141:4:36095:36100	65716	0	True				
ANR	65869	Statement	=	1141:11:36102:36102	65716	1	True				
ANR	65870	Statement	zend_fetch_dimension_address_inner	1141:13:36104:36137	65716	2	True				
ANR	65871	Statement	(	1141:47:36138:36138	65716	3	True				
ANR	65872	Statement	Z_ARRVAL_P	1141:48:36139:36148	65716	4	True				
ANR	65873	Statement	(	1141:58:36149:36149	65716	5	True				
ANR	65874	Statement	container	1141:59:36150:36158	65716	6	True				
ANR	65875	Statement	)	1141:68:36159:36159	65716	7	True				
ANR	65876	Statement	","	1141:69:36160:36160	65716	8	True				
ANR	65877	Statement	dim	1141:71:36162:36164	65716	9	True				
ANR	65878	Statement	","	1141:74:36165:36165	65716	10	True				
ANR	65879	Statement	dim_type	1141:76:36167:36174	65716	11	True				
ANR	65880	Statement	","	1141:84:36175:36175	65716	12	True				
ANR	65881	Statement	type	1141:86:36177:36180	65716	13	True				
ANR	65882	Statement	TSRMLS_CC	1141:91:36182:36190	65716	14	True				
ANR	65883	Statement	)	1141:100:36191:36191	65716	15	True				
ANR	65884	ExpressionStatement		1141:101:36192:36192	65716	16	True				
ANR	65885	ExpressionStatement	result -> var . ptr_ptr = retval	1143:3:36202:36230	65716	4	True				
ANR	65886	AssignmentExpression	result -> var . ptr_ptr = retval		65716	0		=			
ANR	65887	MemberAccess	result -> var . ptr_ptr		65716	0					
ANR	65888	PtrMemberAccess	result -> var		65716	0					
ANR	65889	Identifier	result		65716	0					
ANR	65890	Identifier	var		65716	1					
ANR	65891	Identifier	ptr_ptr		65716	1					
ANR	65892	Identifier	retval		65716	1					
ANR	65893	ExpressionStatement	PZVAL_LOCK ( * retval )	1144:3:36235:36254	65716	5	True				
ANR	65894	CallExpression	PZVAL_LOCK ( * retval )		65716	0					
ANR	65895	Callee	PZVAL_LOCK		65716	0					
ANR	65896	Identifier	PZVAL_LOCK		65716	0					
ANR	65897	ArgumentList	* retval		65716	1					
ANR	65898	Argument	* retval		65716	0					
ANR	65899	UnaryOperationExpression	* retval		65716	0					
ANR	65900	UnaryOperator	*		65716	0					
ANR	65901	Identifier	retval		65716	1					
ANR	65902	ReturnStatement	return ;	1145:3:36259:36265	65716	6	True				
ANR	65903	BreakStatement	break ;	1146:3:36270:36275	65716	7	True				
ANR	65904	Label	case IS_NULL :	1148:2:36280:36292	65716	8	True				
ANR	65905	Identifier	IS_NULL		65716	0					
ANR	65906	IfStatement	if ( container == & EG ( error_zval ) )		65716	9					
ANR	65907	Condition	container == & EG ( error_zval )	1149:7:36301:36328	65716	0	True				
ANR	65908	EqualityExpression	container == & EG ( error_zval )		65716	0		==			
ANR	65909	Identifier	container		65716	0					
ANR	65910	UnaryOperationExpression	& EG ( error_zval )		65716	1					
ANR	65911	UnaryOperator	&		65716	0					
ANR	65912	CallExpression	EG ( error_zval )		65716	1					
ANR	65913	Callee	EG		65716	0					
ANR	65914	Identifier	EG		65716	0					
ANR	65915	ArgumentList	error_zval		65716	1					
ANR	65916	Argument	error_zval		65716	0					
ANR	65917	Identifier	error_zval		65716	0					
ANR	65918	CompoundStatement		31:37:917:917	65716	1					
ANR	65919	ExpressionStatement	result -> var . ptr_ptr = & EG ( error_zval_ptr )	1150:4:36337:36378	65716	0	True				
ANR	65920	AssignmentExpression	result -> var . ptr_ptr = & EG ( error_zval_ptr )		65716	0		=			
ANR	65921	MemberAccess	result -> var . ptr_ptr		65716	0					
ANR	65922	PtrMemberAccess	result -> var		65716	0					
ANR	65923	Identifier	result		65716	0					
ANR	65924	Identifier	var		65716	1					
ANR	65925	Identifier	ptr_ptr		65716	1					
ANR	65926	UnaryOperationExpression	& EG ( error_zval_ptr )		65716	1					
ANR	65927	UnaryOperator	&		65716	0					
ANR	65928	CallExpression	EG ( error_zval_ptr )		65716	1					
ANR	65929	Callee	EG		65716	0					
ANR	65930	Identifier	EG		65716	0					
ANR	65931	ArgumentList	error_zval_ptr		65716	1					
ANR	65932	Argument	error_zval_ptr		65716	0					
ANR	65933	Identifier	error_zval_ptr		65716	0					
ANR	65934	ExpressionStatement	PZVAL_LOCK ( EG ( error_zval_ptr ) )	1151:4:36384:36414	65716	1	True				
ANR	65935	CallExpression	PZVAL_LOCK ( EG ( error_zval_ptr ) )		65716	0					
ANR	65936	Callee	PZVAL_LOCK		65716	0					
ANR	65937	Identifier	PZVAL_LOCK		65716	0					
ANR	65938	ArgumentList	EG ( error_zval_ptr )		65716	1					
ANR	65939	Argument	EG ( error_zval_ptr )		65716	0					
ANR	65940	CallExpression	EG ( error_zval_ptr )		65716	0					
ANR	65941	Callee	EG		65716	0					
ANR	65942	Identifier	EG		65716	0					
ANR	65943	ArgumentList	error_zval_ptr		65716	1					
ANR	65944	Argument	error_zval_ptr		65716	0					
ANR	65945	Identifier	error_zval_ptr		65716	0					
ANR	65946	ElseStatement	else		65716	0					
ANR	65947	IfStatement	if ( type != BP_VAR_UNSET )		65716	0					
ANR	65948	Condition	type != BP_VAR_UNSET	1152:14:36430:36449	65716	0	True				
ANR	65949	EqualityExpression	type != BP_VAR_UNSET		65716	0		!=			
ANR	65950	Identifier	type		65716	0					
ANR	65951	Identifier	BP_VAR_UNSET		65716	1					
ANR	65952	CompoundStatement		34:36:1038:1038	65716	1					
ANR	65953	Label	convert_to_array :	1153:0:36454:36470	65716	0	True				
ANR	65954	Identifier	convert_to_array		65716	0					
ANR	65955	IfStatement	if ( ! PZVAL_IS_REF ( container ) )		65716	1					
ANR	65956	Condition	! PZVAL_IS_REF ( container )	1154:8:36480:36503	65716	0	True				
ANR	65957	UnaryOperationExpression	! PZVAL_IS_REF ( container )		65716	0					
ANR	65958	UnaryOperator	!		65716	0					
ANR	65959	CallExpression	PZVAL_IS_REF ( container )		65716	1					
ANR	65960	Callee	PZVAL_IS_REF		65716	0					
ANR	65961	Identifier	PZVAL_IS_REF		65716	0					
ANR	65962	ArgumentList	container		65716	1					
ANR	65963	Argument	container		65716	0					
ANR	65964	Identifier	container		65716	0					
ANR	65965	CompoundStatement		36:34:1092:1092	65716	1					
ANR	65966	ExpressionStatement	SEPARATE_ZVAL ( container_ptr )	1155:5:36513:36541	65716	0	True				
ANR	65967	CallExpression	SEPARATE_ZVAL ( container_ptr )		65716	0					
ANR	65968	Callee	SEPARATE_ZVAL		65716	0					
ANR	65969	Identifier	SEPARATE_ZVAL		65716	0					
ANR	65970	ArgumentList	container_ptr		65716	1					
ANR	65971	Argument	container_ptr		65716	0					
ANR	65972	Identifier	container_ptr		65716	0					
ANR	65973	ExpressionStatement	container = * container_ptr	1156:5:36548:36574	65716	1	True				
ANR	65974	AssignmentExpression	container = * container_ptr		65716	0		=			
ANR	65975	Identifier	container		65716	0					
ANR	65976	UnaryOperationExpression	* container_ptr		65716	1					
ANR	65977	UnaryOperator	*		65716	0					
ANR	65978	Identifier	container_ptr		65716	1					
ANR	65979	ExpressionStatement	zval_dtor ( container )	1158:4:36586:36606	65716	2	True				
ANR	65980	CallExpression	zval_dtor ( container )		65716	0					
ANR	65981	Callee	zval_dtor		65716	0					
ANR	65982	Identifier	zval_dtor		65716	0					
ANR	65983	ArgumentList	container		65716	1					
ANR	65984	Argument	container		65716	0					
ANR	65985	Identifier	container		65716	0					
ANR	65986	ExpressionStatement	array_init ( container )	1159:4:36612:36633	65716	3	True				
ANR	65987	CallExpression	array_init ( container )		65716	0					
ANR	65988	Callee	array_init		65716	0					
ANR	65989	Identifier	array_init		65716	0					
ANR	65990	ArgumentList	container		65716	1					
ANR	65991	Argument	container		65716	0					
ANR	65992	Identifier	container		65716	0					
ANR	65993	GotoStatement	goto fetch_from_array ;	1160:4:36639:36660	65716	4	True				
ANR	65994	Identifier	fetch_from_array		65716	0					
ANR	65995	ElseStatement	else		65716	0					
ANR	65996	CompoundStatement		43:10:1258:1258	65716	0					
ANR	65997	ExpressionStatement	result -> var . ptr_ptr = & EG ( uninitialized_zval_ptr )	1163:4:36707:36756	65716	0	True				
ANR	65998	AssignmentExpression	result -> var . ptr_ptr = & EG ( uninitialized_zval_ptr )		65716	0		=			
ANR	65999	MemberAccess	result -> var . ptr_ptr		65716	0					
ANR	66000	PtrMemberAccess	result -> var		65716	0					
ANR	66001	Identifier	result		65716	0					
ANR	66002	Identifier	var		65716	1					
ANR	66003	Identifier	ptr_ptr		65716	1					
ANR	66004	UnaryOperationExpression	& EG ( uninitialized_zval_ptr )		65716	1					
ANR	66005	UnaryOperator	&		65716	0					
ANR	66006	CallExpression	EG ( uninitialized_zval_ptr )		65716	1					
ANR	66007	Callee	EG		65716	0					
ANR	66008	Identifier	EG		65716	0					
ANR	66009	ArgumentList	uninitialized_zval_ptr		65716	1					
ANR	66010	Argument	uninitialized_zval_ptr		65716	0					
ANR	66011	Identifier	uninitialized_zval_ptr		65716	0					
ANR	66012	ExpressionStatement	PZVAL_LOCK ( EG ( uninitialized_zval_ptr ) )	1164:4:36762:36800	65716	1	True				
ANR	66013	CallExpression	PZVAL_LOCK ( EG ( uninitialized_zval_ptr ) )		65716	0					
ANR	66014	Callee	PZVAL_LOCK		65716	0					
ANR	66015	Identifier	PZVAL_LOCK		65716	0					
ANR	66016	ArgumentList	EG ( uninitialized_zval_ptr )		65716	1					
ANR	66017	Argument	EG ( uninitialized_zval_ptr )		65716	0					
ANR	66018	CallExpression	EG ( uninitialized_zval_ptr )		65716	0					
ANR	66019	Callee	EG		65716	0					
ANR	66020	Identifier	EG		65716	0					
ANR	66021	ArgumentList	uninitialized_zval_ptr		65716	1					
ANR	66022	Argument	uninitialized_zval_ptr		65716	0					
ANR	66023	Identifier	uninitialized_zval_ptr		65716	0					
ANR	66024	ReturnStatement	return ;	1166:3:36810:36816	65716	10	True				
ANR	66025	BreakStatement	break ;	1167:3:36821:36826	65716	11	True				
ANR	66026	Label	case IS_STRING :	1169:2:36831:36845	65716	12	True				
ANR	66027	Identifier	IS_STRING		65716	0					
ANR	66028	CompoundStatement		52:4:1439:1447	65716	13					
ANR	66029	IdentifierDeclStatement	zval tmp ;	1170:4:36853:36861	65716	0	True				
ANR	66030	IdentifierDecl	tmp		65716	0					
ANR	66031	IdentifierDeclType	zval		65716	0					
ANR	66032	Identifier	tmp		65716	1					
ANR	66033	IfStatement	if ( type != BP_VAR_UNSET && Z_STRLEN_P ( container ) == 0 )		65716	1					
ANR	66034	Condition	type != BP_VAR_UNSET && Z_STRLEN_P ( container ) == 0	1172:8:36872:36919	65716	0	True				
ANR	66035	AndExpression	type != BP_VAR_UNSET && Z_STRLEN_P ( container ) == 0		65716	0		&&			
ANR	66036	EqualityExpression	type != BP_VAR_UNSET		65716	0		!=			
ANR	66037	Identifier	type		65716	0					
ANR	66038	Identifier	BP_VAR_UNSET		65716	1					
ANR	66039	EqualityExpression	Z_STRLEN_P ( container ) == 0		65716	1		==			
ANR	66040	CallExpression	Z_STRLEN_P ( container )		65716	0					
ANR	66041	Callee	Z_STRLEN_P		65716	0					
ANR	66042	Identifier	Z_STRLEN_P		65716	0					
ANR	66043	ArgumentList	container		65716	1					
ANR	66044	Argument	container		65716	0					
ANR	66045	Identifier	container		65716	0					
ANR	66046	PrimaryExpression	0		65716	1					
ANR	66047	CompoundStatement		54:58:1508:1508	65716	1					
ANR	66048	GotoStatement	goto convert_to_array ;	1173:5:36929:36950	65716	0	True				
ANR	66049	Identifier	convert_to_array		65716	0					
ANR	66050	IfStatement	if ( dim == NULL )		65716	2					
ANR	66051	Condition	dim == NULL	1175:8:36966:36976	65716	0	True				
ANR	66052	EqualityExpression	dim == NULL		65716	0		==			
ANR	66053	Identifier	dim		65716	0					
ANR	66054	Identifier	NULL		65716	1					
ANR	66055	CompoundStatement		57:21:1565:1565	65716	1					
ANR	66056	ExpressionStatement	"zend_error_noreturn ( E_ERROR , ""[] operator not supported for strings"" )"	1176:5:36986:37055	65716	0	True				
ANR	66057	CallExpression	"zend_error_noreturn ( E_ERROR , ""[] operator not supported for strings"" )"		65716	0					
ANR	66058	Callee	zend_error_noreturn		65716	0					
ANR	66059	Identifier	zend_error_noreturn		65716	0					
ANR	66060	ArgumentList	E_ERROR		65716	1					
ANR	66061	Argument	E_ERROR		65716	0					
ANR	66062	Identifier	E_ERROR		65716	0					
ANR	66063	Argument	"""[] operator not supported for strings"""		65716	1					
ANR	66064	PrimaryExpression	"""[] operator not supported for strings"""		65716	0					
ANR	66065	IfStatement	if ( type != BP_VAR_UNSET )		65716	3					
ANR	66066	Condition	type != BP_VAR_UNSET	1179:8:37072:37091	65716	0	True				
ANR	66067	EqualityExpression	type != BP_VAR_UNSET		65716	0		!=			
ANR	66068	Identifier	type		65716	0					
ANR	66069	Identifier	BP_VAR_UNSET		65716	1					
ANR	66070	CompoundStatement		61:30:1680:1680	65716	1					
ANR	66071	ExpressionStatement	SEPARATE_ZVAL_IF_NOT_REF ( container_ptr )	1180:5:37101:37140	65716	0	True				
ANR	66072	CallExpression	SEPARATE_ZVAL_IF_NOT_REF ( container_ptr )		65716	0					
ANR	66073	Callee	SEPARATE_ZVAL_IF_NOT_REF		65716	0					
ANR	66074	Identifier	SEPARATE_ZVAL_IF_NOT_REF		65716	0					
ANR	66075	ArgumentList	container_ptr		65716	1					
ANR	66076	Argument	container_ptr		65716	0					
ANR	66077	Identifier	container_ptr		65716	0					
ANR	66078	IfStatement	if ( Z_TYPE_P ( dim ) != IS_LONG )		65716	4					
ANR	66079	Condition	Z_TYPE_P ( dim ) != IS_LONG	1183:8:37157:37180	65716	0	True				
ANR	66080	EqualityExpression	Z_TYPE_P ( dim ) != IS_LONG		65716	0		!=			
ANR	66081	CallExpression	Z_TYPE_P ( dim )		65716	0					
ANR	66082	Callee	Z_TYPE_P		65716	0					
ANR	66083	Identifier	Z_TYPE_P		65716	0					
ANR	66084	ArgumentList	dim		65716	1					
ANR	66085	Argument	dim		65716	0					
ANR	66086	Identifier	dim		65716	0					
ANR	66087	Identifier	IS_LONG		65716	1					
ANR	66088	CompoundStatement		65:34:1769:1769	65716	1					
ANR	66089	SwitchStatement	switch ( Z_TYPE_P ( dim ) )		65716	0					
ANR	66090	Condition	Z_TYPE_P ( dim )	1185:12:37198:37210	65716	0	True				
ANR	66091	CallExpression	Z_TYPE_P ( dim )		65716	0					
ANR	66092	Callee	Z_TYPE_P		65716	0					
ANR	66093	Identifier	Z_TYPE_P		65716	0					
ANR	66094	ArgumentList	dim		65716	1					
ANR	66095	Argument	dim		65716	0					
ANR	66096	Identifier	dim		65716	0					
ANR	66097	CompoundStatement		67:27:1799:1799	65716	1					
ANR	66098	Label	case IS_STRING :	1187:6:37247:37261	65716	0	True				
ANR	66099	Identifier	IS_STRING		65716	0					
ANR	66100	IfStatement	"if ( IS_LONG == is_numeric_string ( Z_STRVAL_P ( dim ) , Z_STRLEN_P ( dim ) , NULL , NULL , - 1 ) )"		65716	1					
ANR	66101	Condition	"IS_LONG == is_numeric_string ( Z_STRVAL_P ( dim ) , Z_STRLEN_P ( dim ) , NULL , NULL , - 1 )"	1188:11:37274:37351	65716	0	True				
ANR	66102	EqualityExpression	"IS_LONG == is_numeric_string ( Z_STRVAL_P ( dim ) , Z_STRLEN_P ( dim ) , NULL , NULL , - 1 )"		65716	0		==			
ANR	66103	Identifier	IS_LONG		65716	0					
ANR	66104	CallExpression	"is_numeric_string ( Z_STRVAL_P ( dim ) , Z_STRLEN_P ( dim ) , NULL , NULL , - 1 )"		65716	1					
ANR	66105	Callee	is_numeric_string		65716	0					
ANR	66106	Identifier	is_numeric_string		65716	0					
ANR	66107	ArgumentList	Z_STRVAL_P ( dim )		65716	1					
ANR	66108	Argument	Z_STRVAL_P ( dim )		65716	0					
ANR	66109	CallExpression	Z_STRVAL_P ( dim )		65716	0					
ANR	66110	Callee	Z_STRVAL_P		65716	0					
ANR	66111	Identifier	Z_STRVAL_P		65716	0					
ANR	66112	ArgumentList	dim		65716	1					
ANR	66113	Argument	dim		65716	0					
ANR	66114	Identifier	dim		65716	0					
ANR	66115	Argument	Z_STRLEN_P ( dim )		65716	1					
ANR	66116	CallExpression	Z_STRLEN_P ( dim )		65716	0					
ANR	66117	Callee	Z_STRLEN_P		65716	0					
ANR	66118	Identifier	Z_STRLEN_P		65716	0					
ANR	66119	ArgumentList	dim		65716	1					
ANR	66120	Argument	dim		65716	0					
ANR	66121	Identifier	dim		65716	0					
ANR	66122	Argument	NULL		65716	2					
ANR	66123	Identifier	NULL		65716	0					
ANR	66124	Argument	NULL		65716	3					
ANR	66125	Identifier	NULL		65716	0					
ANR	66126	Argument	- 1		65716	4					
ANR	66127	UnaryOperationExpression	- 1		65716	0					
ANR	66128	UnaryOperator	-		65716	0					
ANR	66129	PrimaryExpression	1		65716	1					
ANR	66130	CompoundStatement		70:91:1940:1940	65716	1					
ANR	66131	BreakStatement	break ;	1189:8:37364:37369	65716	0	True				
ANR	66132	IfStatement	if ( type != BP_VAR_UNSET )		65716	2					
ANR	66133	Condition	type != BP_VAR_UNSET	1191:11:37391:37410	65716	0	True				
ANR	66134	EqualityExpression	type != BP_VAR_UNSET		65716	0		!=			
ANR	66135	Identifier	type		65716	0					
ANR	66136	Identifier	BP_VAR_UNSET		65716	1					
ANR	66137	CompoundStatement		73:33:1999:1999	65716	1					
ANR	66138	ExpressionStatement	"zend_error ( E_WARNING , ""Illegal string offset '%s'"" , dim -> value . str . val )"	1192:8:37423:37494	65716	0	True				
ANR	66139	CallExpression	"zend_error ( E_WARNING , ""Illegal string offset '%s'"" , dim -> value . str . val )"		65716	0					
ANR	66140	Callee	zend_error		65716	0					
ANR	66141	Identifier	zend_error		65716	0					
ANR	66142	ArgumentList	E_WARNING		65716	1					
ANR	66143	Argument	E_WARNING		65716	0					
ANR	66144	Identifier	E_WARNING		65716	0					
ANR	66145	Argument	"""Illegal string offset '%s'"""		65716	1					
ANR	66146	PrimaryExpression	"""Illegal string offset '%s'"""		65716	0					
ANR	66147	Argument	dim -> value . str . val		65716	2					
ANR	66148	MemberAccess	dim -> value . str . val		65716	0					
ANR	66149	MemberAccess	dim -> value . str		65716	0					
ANR	66150	PtrMemberAccess	dim -> value		65716	0					
ANR	66151	Identifier	dim		65716	0					
ANR	66152	Identifier	value		65716	1					
ANR	66153	Identifier	str		65716	1					
ANR	66154	Identifier	val		65716	1					
ANR	66155	BreakStatement	break ;	1195:7:37513:37518	65716	3	True				
ANR	66156	Label	case IS_DOUBLE :	1196:6:37526:37540	65716	4	True				
ANR	66157	Identifier	IS_DOUBLE		65716	0					
ANR	66158	Label	case IS_NULL :	1197:6:37548:37560	65716	5	True				
ANR	66159	Identifier	IS_NULL		65716	0					
ANR	66160	Label	case IS_BOOL :	1198:6:37568:37580	65716	6	True				
ANR	66161	Identifier	IS_BOOL		65716	0					
ANR	66162	ExpressionStatement	"zend_error ( E_NOTICE , ""String offset cast occurred"" )"	1199:7:37589:37640	65716	7	True				
ANR	66163	CallExpression	"zend_error ( E_NOTICE , ""String offset cast occurred"" )"		65716	0					
ANR	66164	Callee	zend_error		65716	0					
ANR	66165	Identifier	zend_error		65716	0					
ANR	66166	ArgumentList	E_NOTICE		65716	1					
ANR	66167	Argument	E_NOTICE		65716	0					
ANR	66168	Identifier	E_NOTICE		65716	0					
ANR	66169	Argument	"""String offset cast occurred"""		65716	1					
ANR	66170	PrimaryExpression	"""String offset cast occurred"""		65716	0					
ANR	66171	BreakStatement	break ;	1200:7:37649:37654	65716	8	True				
ANR	66172	Label	default :	1201:6:37662:37669	65716	9	True				
ANR	66173	Identifier	default		65716	0					
ANR	66174	ExpressionStatement	"zend_error ( E_WARNING , ""Illegal offset type"" )"	1202:7:37678:37722	65716	10	True				
ANR	66175	CallExpression	"zend_error ( E_WARNING , ""Illegal offset type"" )"		65716	0					
ANR	66176	Callee	zend_error		65716	0					
ANR	66177	Identifier	zend_error		65716	0					
ANR	66178	ArgumentList	E_WARNING		65716	1					
ANR	66179	Argument	E_WARNING		65716	0					
ANR	66180	Identifier	E_WARNING		65716	0					
ANR	66181	Argument	"""Illegal offset type"""		65716	1					
ANR	66182	PrimaryExpression	"""Illegal offset type"""		65716	0					
ANR	66183	BreakStatement	break ;	1203:7:37731:37736	65716	11	True				
ANR	66184	ExpressionStatement	tmp = * dim	1206:5:37751:37761	65716	1	True				
ANR	66185	AssignmentExpression	tmp = * dim		65716	0		=			
ANR	66186	Identifier	tmp		65716	0					
ANR	66187	UnaryOperationExpression	* dim		65716	1					
ANR	66188	UnaryOperator	*		65716	0					
ANR	66189	Identifier	dim		65716	1					
ANR	66190	ExpressionStatement	zval_copy_ctor ( & tmp )	1207:5:37768:37788	65716	2	True				
ANR	66191	CallExpression	zval_copy_ctor ( & tmp )		65716	0					
ANR	66192	Callee	zval_copy_ctor		65716	0					
ANR	66193	Identifier	zval_copy_ctor		65716	0					
ANR	66194	ArgumentList	& tmp		65716	1					
ANR	66195	Argument	& tmp		65716	0					
ANR	66196	UnaryOperationExpression	& tmp		65716	0					
ANR	66197	UnaryOperator	&		65716	0					
ANR	66198	Identifier	tmp		65716	1					
ANR	66199	ExpressionStatement	convert_to_long ( & tmp )	1208:5:37795:37816	65716	3	True				
ANR	66200	CallExpression	convert_to_long ( & tmp )		65716	0					
ANR	66201	Callee	convert_to_long		65716	0					
ANR	66202	Identifier	convert_to_long		65716	0					
ANR	66203	ArgumentList	& tmp		65716	1					
ANR	66204	Argument	& tmp		65716	0					
ANR	66205	UnaryOperationExpression	& tmp		65716	0					
ANR	66206	UnaryOperator	&		65716	0					
ANR	66207	Identifier	tmp		65716	1					
ANR	66208	ExpressionStatement	dim = & tmp	1209:5:37823:37833	65716	4	True				
ANR	66209	AssignmentExpression	dim = & tmp		65716	0		=			
ANR	66210	Identifier	dim		65716	0					
ANR	66211	UnaryOperationExpression	& tmp		65716	1					
ANR	66212	UnaryOperator	&		65716	0					
ANR	66213	Identifier	tmp		65716	1					
ANR	66214	ExpressionStatement	container = * container_ptr	1211:4:37845:37871	65716	5	True				
ANR	66215	AssignmentExpression	container = * container_ptr		65716	0		=			
ANR	66216	Identifier	container		65716	0					
ANR	66217	UnaryOperationExpression	* container_ptr		65716	1					
ANR	66218	UnaryOperator	*		65716	0					
ANR	66219	Identifier	container_ptr		65716	1					
ANR	66220	ExpressionStatement	result -> str_offset . str = container	1212:4:37877:37911	65716	6	True				
ANR	66221	AssignmentExpression	result -> str_offset . str = container		65716	0		=			
ANR	66222	MemberAccess	result -> str_offset . str		65716	0					
ANR	66223	PtrMemberAccess	result -> str_offset		65716	0					
ANR	66224	Identifier	result		65716	0					
ANR	66225	Identifier	str_offset		65716	1					
ANR	66226	Identifier	str		65716	1					
ANR	66227	Identifier	container		65716	1					
ANR	66228	ExpressionStatement	PZVAL_LOCK ( container )	1213:4:37917:37938	65716	7	True				
ANR	66229	CallExpression	PZVAL_LOCK ( container )		65716	0					
ANR	66230	Callee	PZVAL_LOCK		65716	0					
ANR	66231	Identifier	PZVAL_LOCK		65716	0					
ANR	66232	ArgumentList	container		65716	1					
ANR	66233	Argument	container		65716	0					
ANR	66234	Identifier	container		65716	0					
ANR	66235	ExpressionStatement	result -> str_offset . offset = Z_LVAL_P ( dim )	1214:4:37944:37985	65716	8	True				
ANR	66236	AssignmentExpression	result -> str_offset . offset = Z_LVAL_P ( dim )		65716	0		=			
ANR	66237	MemberAccess	result -> str_offset . offset		65716	0					
ANR	66238	PtrMemberAccess	result -> str_offset		65716	0					
ANR	66239	Identifier	result		65716	0					
ANR	66240	Identifier	str_offset		65716	1					
ANR	66241	Identifier	offset		65716	1					
ANR	66242	CallExpression	Z_LVAL_P ( dim )		65716	1					
ANR	66243	Callee	Z_LVAL_P		65716	0					
ANR	66244	Identifier	Z_LVAL_P		65716	0					
ANR	66245	ArgumentList	dim		65716	1					
ANR	66246	Argument	dim		65716	0					
ANR	66247	Identifier	dim		65716	0					
ANR	66248	ExpressionStatement	result -> str_offset . ptr_ptr = NULL	1215:4:37991:38024	65716	9	True				
ANR	66249	AssignmentExpression	result -> str_offset . ptr_ptr = NULL		65716	0		=			
ANR	66250	MemberAccess	result -> str_offset . ptr_ptr		65716	0					
ANR	66251	PtrMemberAccess	result -> str_offset		65716	0					
ANR	66252	Identifier	result		65716	0					
ANR	66253	Identifier	str_offset		65716	1					
ANR	66254	Identifier	ptr_ptr		65716	1					
ANR	66255	Identifier	NULL		65716	1					
ANR	66256	ReturnStatement	return ;	1216:4:38030:38036	65716	10	True				
ANR	66257	BreakStatement	break ;	1218:3:38046:38051	65716	14	True				
ANR	66258	Label	case IS_OBJECT :	1220:2:38056:38070	65716	15	True				
ANR	66259	Identifier	IS_OBJECT		65716	0					
ANR	66260	IfStatement	if ( ! Z_OBJ_HT_P ( container ) -> read_dimension )		65716	16					
ANR	66261	Condition	! Z_OBJ_HT_P ( container ) -> read_dimension	1221:7:38079:38116	65716	0	True				
ANR	66262	UnaryOperationExpression	! Z_OBJ_HT_P ( container ) -> read_dimension		65716	0					
ANR	66263	UnaryOperator	!		65716	0					
ANR	66264	PtrMemberAccess	Z_OBJ_HT_P ( container ) -> read_dimension		65716	1					
ANR	66265	CallExpression	Z_OBJ_HT_P ( container )		65716	0					
ANR	66266	Callee	Z_OBJ_HT_P		65716	0					
ANR	66267	Identifier	Z_OBJ_HT_P		65716	0					
ANR	66268	ArgumentList	container		65716	1					
ANR	66269	Argument	container		65716	0					
ANR	66270	Identifier	container		65716	0					
ANR	66271	Identifier	read_dimension		65716	1					
ANR	66272	CompoundStatement		103:47:2705:2705	65716	1					
ANR	66273	ExpressionStatement	"zend_error_noreturn ( E_ERROR , ""Cannot use object as array"" )"	1222:4:38125:38183	65716	0	True				
ANR	66274	CallExpression	"zend_error_noreturn ( E_ERROR , ""Cannot use object as array"" )"		65716	0					
ANR	66275	Callee	zend_error_noreturn		65716	0					
ANR	66276	Identifier	zend_error_noreturn		65716	0					
ANR	66277	ArgumentList	E_ERROR		65716	1					
ANR	66278	Argument	E_ERROR		65716	0					
ANR	66279	Identifier	E_ERROR		65716	0					
ANR	66280	Argument	"""Cannot use object as array"""		65716	1					
ANR	66281	PrimaryExpression	"""Cannot use object as array"""		65716	0					
ANR	66282	ElseStatement	else		65716	0					
ANR	66283	CompoundStatement		106:4:2787:2810	65716	0					
ANR	66284	IdentifierDeclStatement	zval * overloaded_result ;	1224:4:38201:38224	65716	0	True				
ANR	66285	IdentifierDecl	* overloaded_result		65716	0					
ANR	66286	IdentifierDeclType	zval *		65716	0					
ANR	66287	Identifier	overloaded_result		65716	1					
ANR	66288	IfStatement	if ( dim_type == IS_TMP_VAR )		65716	1					
ANR	66289	Condition	dim_type == IS_TMP_VAR	1226:8:38235:38256	65716	0	True				
ANR	66290	EqualityExpression	dim_type == IS_TMP_VAR		65716	0		==			
ANR	66291	Identifier	dim_type		65716	0					
ANR	66292	Identifier	IS_TMP_VAR		65716	1					
ANR	66293	CompoundStatement		109:5:2852:2868	65716	1					
ANR	66294	IdentifierDeclStatement	zval * orig = dim ;	1227:5:38266:38282	65716	0	True				
ANR	66295	IdentifierDecl	* orig = dim		65716	0					
ANR	66296	IdentifierDeclType	zval *		65716	0					
ANR	66297	Identifier	orig		65716	1					
ANR	66298	AssignmentExpression	* orig = dim		65716	2		=			
ANR	66299	Identifier	dim		65716	0					
ANR	66300	Identifier	dim		65716	1					
ANR	66301	ExpressionStatement	MAKE_REAL_ZVAL_PTR ( dim )	1228:5:38289:38312	65716	1	True				
ANR	66302	CallExpression	MAKE_REAL_ZVAL_PTR ( dim )		65716	0					
ANR	66303	Callee	MAKE_REAL_ZVAL_PTR		65716	0					
ANR	66304	Identifier	MAKE_REAL_ZVAL_PTR		65716	0					
ANR	66305	ArgumentList	dim		65716	1					
ANR	66306	Argument	dim		65716	0					
ANR	66307	Identifier	dim		65716	0					
ANR	66308	ExpressionStatement	ZVAL_NULL ( orig )	1229:5:38319:38334	65716	2	True				
ANR	66309	CallExpression	ZVAL_NULL ( orig )		65716	0					
ANR	66310	Callee	ZVAL_NULL		65716	0					
ANR	66311	Identifier	ZVAL_NULL		65716	0					
ANR	66312	ArgumentList	orig		65716	1					
ANR	66313	Argument	orig		65716	0					
ANR	66314	Identifier	orig		65716	0					
ANR	66315	Statement	overloaded_result	1231:4:38346:38362	65716	2	True				
ANR	66316	Statement	=	1231:22:38364:38364	65716	3	True				
ANR	66317	Statement	Z_OBJ_HT_P	1231:24:38366:38375	65716	4	True				
ANR	66318	Statement	(	1231:34:38376:38376	65716	5	True				
ANR	66319	Statement	container	1231:35:38377:38385	65716	6	True				
ANR	66320	Statement	)	1231:44:38386:38386	65716	7	True				
ANR	66321	Statement	->	1231:45:38387:38388	65716	8	True				
ANR	66322	Statement	read_dimension	1231:47:38389:38402	65716	9	True				
ANR	66323	Statement	(	1231:61:38403:38403	65716	10	True				
ANR	66324	Statement	container	1231:62:38404:38412	65716	11	True				
ANR	66325	Statement	","	1231:71:38413:38413	65716	12	True				
ANR	66326	Statement	dim	1231:73:38415:38417	65716	13	True				
ANR	66327	Statement	","	1231:76:38418:38418	65716	14	True				
ANR	66328	Statement	type	1231:78:38420:38423	65716	15	True				
ANR	66329	Statement	TSRMLS_CC	1231:83:38425:38433	65716	16	True				
ANR	66330	Statement	)	1231:92:38434:38434	65716	17	True				
ANR	66331	ExpressionStatement		1231:93:38435:38435	65716	18	True				
ANR	66332	IfStatement	if ( overloaded_result )		65716	19					
ANR	66333	Condition	overloaded_result	1233:8:38446:38462	65716	0	True				
ANR	66334	Identifier	overloaded_result		65716	0					
ANR	66335	CompoundStatement		115:27:3051:3051	65716	1					
ANR	66336	IfStatement	if ( ! Z_ISREF_P ( overloaded_result ) )		65716	0					
ANR	66337	Condition	! Z_ISREF_P ( overloaded_result )	1234:9:38476:38504	65716	0	True				
ANR	66338	UnaryOperationExpression	! Z_ISREF_P ( overloaded_result )		65716	0					
ANR	66339	UnaryOperator	!		65716	0					
ANR	66340	CallExpression	Z_ISREF_P ( overloaded_result )		65716	1					
ANR	66341	Callee	Z_ISREF_P		65716	0					
ANR	66342	Identifier	Z_ISREF_P		65716	0					
ANR	66343	ArgumentList	overloaded_result		65716	1					
ANR	66344	Argument	overloaded_result		65716	0					
ANR	66345	Identifier	overloaded_result		65716	0					
ANR	66346	CompoundStatement		116:40:3093:3093	65716	1					
ANR	66347	IfStatement	if ( Z_REFCOUNT_P ( overloaded_result ) > 0 )		65716	0					
ANR	66348	Condition	Z_REFCOUNT_P ( overloaded_result ) > 0	1235:10:38519:38553	65716	0	True				
ANR	66349	RelationalExpression	Z_REFCOUNT_P ( overloaded_result ) > 0		65716	0		>			
ANR	66350	CallExpression	Z_REFCOUNT_P ( overloaded_result )		65716	0					
ANR	66351	Callee	Z_REFCOUNT_P		65716	0					
ANR	66352	Identifier	Z_REFCOUNT_P		65716	0					
ANR	66353	ArgumentList	overloaded_result		65716	1					
ANR	66354	Argument	overloaded_result		65716	0					
ANR	66355	Identifier	overloaded_result		65716	0					
ANR	66356	PrimaryExpression	0		65716	1					
ANR	66357	CompoundStatement		118:7:3151:3180	65716	1					
ANR	66358	IdentifierDeclStatement	zval * tmp = overloaded_result ;	1236:7:38565:38594	65716	0	True				
ANR	66359	IdentifierDecl	* tmp = overloaded_result		65716	0					
ANR	66360	IdentifierDeclType	zval *		65716	0					
ANR	66361	Identifier	tmp		65716	1					
ANR	66362	AssignmentExpression	* tmp = overloaded_result		65716	2		=			
ANR	66363	Identifier	overloaded_result		65716	0					
ANR	66364	Identifier	overloaded_result		65716	1					
ANR	66365	ExpressionStatement	ALLOC_ZVAL ( overloaded_result )	1238:7:38604:38633	65716	1	True				
ANR	66366	CallExpression	ALLOC_ZVAL ( overloaded_result )		65716	0					
ANR	66367	Callee	ALLOC_ZVAL		65716	0					
ANR	66368	Identifier	ALLOC_ZVAL		65716	0					
ANR	66369	ArgumentList	overloaded_result		65716	1					
ANR	66370	Argument	overloaded_result		65716	0					
ANR	66371	Identifier	overloaded_result		65716	0					
ANR	66372	ExpressionStatement	"ZVAL_COPY_VALUE ( overloaded_result , tmp )"	1239:7:38642:38681	65716	2	True				
ANR	66373	CallExpression	"ZVAL_COPY_VALUE ( overloaded_result , tmp )"		65716	0					
ANR	66374	Callee	ZVAL_COPY_VALUE		65716	0					
ANR	66375	Identifier	ZVAL_COPY_VALUE		65716	0					
ANR	66376	ArgumentList	overloaded_result		65716	1					
ANR	66377	Argument	overloaded_result		65716	0					
ANR	66378	Identifier	overloaded_result		65716	0					
ANR	66379	Argument	tmp		65716	1					
ANR	66380	Identifier	tmp		65716	0					
ANR	66381	ExpressionStatement	zval_copy_ctor ( overloaded_result )	1240:7:38690:38723	65716	3	True				
ANR	66382	CallExpression	zval_copy_ctor ( overloaded_result )		65716	0					
ANR	66383	Callee	zval_copy_ctor		65716	0					
ANR	66384	Identifier	zval_copy_ctor		65716	0					
ANR	66385	ArgumentList	overloaded_result		65716	1					
ANR	66386	Argument	overloaded_result		65716	0					
ANR	66387	Identifier	overloaded_result		65716	0					
ANR	66388	ExpressionStatement	Z_UNSET_ISREF_P ( overloaded_result )	1241:7:38732:38766	65716	4	True				
ANR	66389	CallExpression	Z_UNSET_ISREF_P ( overloaded_result )		65716	0					
ANR	66390	Callee	Z_UNSET_ISREF_P		65716	0					
ANR	66391	Identifier	Z_UNSET_ISREF_P		65716	0					
ANR	66392	ArgumentList	overloaded_result		65716	1					
ANR	66393	Argument	overloaded_result		65716	0					
ANR	66394	Identifier	overloaded_result		65716	0					
ANR	66395	ExpressionStatement	"Z_SET_REFCOUNT_P ( overloaded_result , 0 )"	1242:7:38775:38813	65716	5	True				
ANR	66396	CallExpression	"Z_SET_REFCOUNT_P ( overloaded_result , 0 )"		65716	0					
ANR	66397	Callee	Z_SET_REFCOUNT_P		65716	0					
ANR	66398	Identifier	Z_SET_REFCOUNT_P		65716	0					
ANR	66399	ArgumentList	overloaded_result		65716	1					
ANR	66400	Argument	overloaded_result		65716	0					
ANR	66401	Identifier	overloaded_result		65716	0					
ANR	66402	Argument	0		65716	1					
ANR	66403	PrimaryExpression	0		65716	0					
ANR	66404	IfStatement	if ( Z_TYPE_P ( overloaded_result ) != IS_OBJECT )		65716	1					
ANR	66405	Condition	Z_TYPE_P ( overloaded_result ) != IS_OBJECT	1244:10:38833:38872	65716	0	True				
ANR	66406	EqualityExpression	Z_TYPE_P ( overloaded_result ) != IS_OBJECT		65716	0		!=			
ANR	66407	CallExpression	Z_TYPE_P ( overloaded_result )		65716	0					
ANR	66408	Callee	Z_TYPE_P		65716	0					
ANR	66409	Identifier	Z_TYPE_P		65716	0					
ANR	66410	ArgumentList	overloaded_result		65716	1					
ANR	66411	Argument	overloaded_result		65716	0					
ANR	66412	Identifier	overloaded_result		65716	0					
ANR	66413	Identifier	IS_OBJECT		65716	1					
ANR	66414	CompoundStatement		127:7:3470:3513	65716	1					
ANR	66415	IdentifierDeclStatement	zend_class_entry * ce = Z_OBJCE_P ( container ) ;	1245:7:38884:38927	65716	0	True				
ANR	66416	IdentifierDecl	* ce = Z_OBJCE_P ( container )		65716	0					
ANR	66417	IdentifierDeclType	zend_class_entry *		65716	0					
ANR	66418	Identifier	ce		65716	1					
ANR	66419	AssignmentExpression	* ce = Z_OBJCE_P ( container )		65716	2		=			
ANR	66420	Identifier	ce		65716	0					
ANR	66421	CallExpression	Z_OBJCE_P ( container )		65716	1					
ANR	66422	Callee	Z_OBJCE_P		65716	0					
ANR	66423	Identifier	Z_OBJCE_P		65716	0					
ANR	66424	ArgumentList	container		65716	1					
ANR	66425	Argument	container		65716	0					
ANR	66426	Identifier	container		65716	0					
ANR	66427	ExpressionStatement	"zend_error ( E_NOTICE , ""Indirect modification of overloaded element of %s has no effect"" , ce -> name )"	1246:7:38936:39033	65716	1	True				
ANR	66428	CallExpression	"zend_error ( E_NOTICE , ""Indirect modification of overloaded element of %s has no effect"" , ce -> name )"		65716	0					
ANR	66429	Callee	zend_error		65716	0					
ANR	66430	Identifier	zend_error		65716	0					
ANR	66431	ArgumentList	E_NOTICE		65716	1					
ANR	66432	Argument	E_NOTICE		65716	0					
ANR	66433	Identifier	E_NOTICE		65716	0					
ANR	66434	Argument	"""Indirect modification of overloaded element of %s has no effect"""		65716	1					
ANR	66435	PrimaryExpression	"""Indirect modification of overloaded element of %s has no effect"""		65716	0					
ANR	66436	Argument	ce -> name		65716	2					
ANR	66437	PtrMemberAccess	ce -> name		65716	0					
ANR	66438	Identifier	ce		65716	0					
ANR	66439	Identifier	name		65716	1					
ANR	66440	ExpressionStatement	"AI_SET_PTR ( result , overloaded_result )"	1249:5:39055:39092	65716	1	True				
ANR	66441	CallExpression	"AI_SET_PTR ( result , overloaded_result )"		65716	0					
ANR	66442	Callee	AI_SET_PTR		65716	0					
ANR	66443	Identifier	AI_SET_PTR		65716	0					
ANR	66444	ArgumentList	result		65716	1					
ANR	66445	Argument	result		65716	0					
ANR	66446	Identifier	result		65716	0					
ANR	66447	Argument	overloaded_result		65716	1					
ANR	66448	Identifier	overloaded_result		65716	0					
ANR	66449	ExpressionStatement	PZVAL_LOCK ( overloaded_result )	1250:5:39099:39128	65716	2	True				
ANR	66450	CallExpression	PZVAL_LOCK ( overloaded_result )		65716	0					
ANR	66451	Callee	PZVAL_LOCK		65716	0					
ANR	66452	Identifier	PZVAL_LOCK		65716	0					
ANR	66453	ArgumentList	overloaded_result		65716	1					
ANR	66454	Argument	overloaded_result		65716	0					
ANR	66455	Identifier	overloaded_result		65716	0					
ANR	66456	ElseStatement	else		65716	0					
ANR	66457	CompoundStatement		133:11:3727:3727	65716	0					
ANR	66458	ExpressionStatement	result -> var . ptr_ptr = & EG ( error_zval_ptr )	1252:5:39148:39189	65716	0	True				
ANR	66459	AssignmentExpression	result -> var . ptr_ptr = & EG ( error_zval_ptr )		65716	0		=			
ANR	66460	MemberAccess	result -> var . ptr_ptr		65716	0					
ANR	66461	PtrMemberAccess	result -> var		65716	0					
ANR	66462	Identifier	result		65716	0					
ANR	66463	Identifier	var		65716	1					
ANR	66464	Identifier	ptr_ptr		65716	1					
ANR	66465	UnaryOperationExpression	& EG ( error_zval_ptr )		65716	1					
ANR	66466	UnaryOperator	&		65716	0					
ANR	66467	CallExpression	EG ( error_zval_ptr )		65716	1					
ANR	66468	Callee	EG		65716	0					
ANR	66469	Identifier	EG		65716	0					
ANR	66470	ArgumentList	error_zval_ptr		65716	1					
ANR	66471	Argument	error_zval_ptr		65716	0					
ANR	66472	Identifier	error_zval_ptr		65716	0					
ANR	66473	ExpressionStatement	PZVAL_LOCK ( EG ( error_zval_ptr ) )	1253:5:39196:39226	65716	1	True				
ANR	66474	CallExpression	PZVAL_LOCK ( EG ( error_zval_ptr ) )		65716	0					
ANR	66475	Callee	PZVAL_LOCK		65716	0					
ANR	66476	Identifier	PZVAL_LOCK		65716	0					
ANR	66477	ArgumentList	EG ( error_zval_ptr )		65716	1					
ANR	66478	Argument	EG ( error_zval_ptr )		65716	0					
ANR	66479	CallExpression	EG ( error_zval_ptr )		65716	0					
ANR	66480	Callee	EG		65716	0					
ANR	66481	Identifier	EG		65716	0					
ANR	66482	ArgumentList	error_zval_ptr		65716	1					
ANR	66483	Argument	error_zval_ptr		65716	0					
ANR	66484	Identifier	error_zval_ptr		65716	0					
ANR	66485	IfStatement	if ( dim_type == IS_TMP_VAR )		65716	20					
ANR	66486	Condition	dim_type == IS_TMP_VAR	1255:8:39242:39263	65716	0	True				
ANR	66487	EqualityExpression	dim_type == IS_TMP_VAR		65716	0		==			
ANR	66488	Identifier	dim_type		65716	0					
ANR	66489	Identifier	IS_TMP_VAR		65716	1					
ANR	66490	CompoundStatement		137:32:3852:3852	65716	1					
ANR	66491	ExpressionStatement	zval_ptr_dtor ( & dim )	1256:5:39273:39292	65716	0	True				
ANR	66492	CallExpression	zval_ptr_dtor ( & dim )		65716	0					
ANR	66493	Callee	zval_ptr_dtor		65716	0					
ANR	66494	Identifier	zval_ptr_dtor		65716	0					
ANR	66495	ArgumentList	& dim		65716	1					
ANR	66496	Argument	& dim		65716	0					
ANR	66497	UnaryOperationExpression	& dim		65716	0					
ANR	66498	UnaryOperator	&		65716	0					
ANR	66499	Identifier	dim		65716	1					
ANR	66500	ReturnStatement	return ;	1259:3:39308:39314	65716	17	True				
ANR	66501	BreakStatement	break ;	1260:3:39319:39324	65716	18	True				
ANR	66502	Label	case IS_BOOL :	1262:2:39329:39341	65716	19	True				
ANR	66503	Identifier	IS_BOOL		65716	0					
ANR	66504	IfStatement	if ( type != BP_VAR_UNSET && Z_LVAL_P ( container ) == 0 )		65716	20					
ANR	66505	Condition	type != BP_VAR_UNSET && Z_LVAL_P ( container ) == 0	1263:7:39350:39395	65716	0	True				
ANR	66506	AndExpression	type != BP_VAR_UNSET && Z_LVAL_P ( container ) == 0		65716	0		&&			
ANR	66507	EqualityExpression	type != BP_VAR_UNSET		65716	0		!=			
ANR	66508	Identifier	type		65716	0					
ANR	66509	Identifier	BP_VAR_UNSET		65716	1					
ANR	66510	EqualityExpression	Z_LVAL_P ( container ) == 0		65716	1		==			
ANR	66511	CallExpression	Z_LVAL_P ( container )		65716	0					
ANR	66512	Callee	Z_LVAL_P		65716	0					
ANR	66513	Identifier	Z_LVAL_P		65716	0					
ANR	66514	ArgumentList	container		65716	1					
ANR	66515	Argument	container		65716	0					
ANR	66516	Identifier	container		65716	0					
ANR	66517	PrimaryExpression	0		65716	1					
ANR	66518	CompoundStatement		145:55:3984:3984	65716	1					
ANR	66519	GotoStatement	goto convert_to_array ;	1264:4:39404:39425	65716	0	True				
ANR	66520	Identifier	convert_to_array		65716	0					
ANR	66521	Label	default :	1268:2:39472:39479	65716	21	True				
ANR	66522	Identifier	default		65716	0					
ANR	66523	IfStatement	if ( type == BP_VAR_UNSET )		65716	22					
ANR	66524	Condition	type == BP_VAR_UNSET	1269:7:39488:39507	65716	0	True				
ANR	66525	EqualityExpression	type == BP_VAR_UNSET		65716	0		==			
ANR	66526	Identifier	type		65716	0					
ANR	66527	Identifier	BP_VAR_UNSET		65716	1					
ANR	66528	CompoundStatement		151:29:4096:4096	65716	1					
ANR	66529	ExpressionStatement	"zend_error ( E_WARNING , ""Cannot unset offset in a non-array variable"" )"	1270:4:39516:39584	65716	0	True				
ANR	66530	CallExpression	"zend_error ( E_WARNING , ""Cannot unset offset in a non-array variable"" )"		65716	0					
ANR	66531	Callee	zend_error		65716	0					
ANR	66532	Identifier	zend_error		65716	0					
ANR	66533	ArgumentList	E_WARNING		65716	1					
ANR	66534	Argument	E_WARNING		65716	0					
ANR	66535	Identifier	E_WARNING		65716	0					
ANR	66536	Argument	"""Cannot unset offset in a non-array variable"""		65716	1					
ANR	66537	PrimaryExpression	"""Cannot unset offset in a non-array variable"""		65716	0					
ANR	66538	ExpressionStatement	result -> var . ptr_ptr = & EG ( uninitialized_zval_ptr )	1271:4:39590:39639	65716	1	True				
ANR	66539	AssignmentExpression	result -> var . ptr_ptr = & EG ( uninitialized_zval_ptr )		65716	0		=			
ANR	66540	MemberAccess	result -> var . ptr_ptr		65716	0					
ANR	66541	PtrMemberAccess	result -> var		65716	0					
ANR	66542	Identifier	result		65716	0					
ANR	66543	Identifier	var		65716	1					
ANR	66544	Identifier	ptr_ptr		65716	1					
ANR	66545	UnaryOperationExpression	& EG ( uninitialized_zval_ptr )		65716	1					
ANR	66546	UnaryOperator	&		65716	0					
ANR	66547	CallExpression	EG ( uninitialized_zval_ptr )		65716	1					
ANR	66548	Callee	EG		65716	0					
ANR	66549	Identifier	EG		65716	0					
ANR	66550	ArgumentList	uninitialized_zval_ptr		65716	1					
ANR	66551	Argument	uninitialized_zval_ptr		65716	0					
ANR	66552	Identifier	uninitialized_zval_ptr		65716	0					
ANR	66553	ExpressionStatement	PZVAL_LOCK ( EG ( uninitialized_zval_ptr ) )	1272:4:39645:39683	65716	2	True				
ANR	66554	CallExpression	PZVAL_LOCK ( EG ( uninitialized_zval_ptr ) )		65716	0					
ANR	66555	Callee	PZVAL_LOCK		65716	0					
ANR	66556	Identifier	PZVAL_LOCK		65716	0					
ANR	66557	ArgumentList	EG ( uninitialized_zval_ptr )		65716	1					
ANR	66558	Argument	EG ( uninitialized_zval_ptr )		65716	0					
ANR	66559	CallExpression	EG ( uninitialized_zval_ptr )		65716	0					
ANR	66560	Callee	EG		65716	0					
ANR	66561	Identifier	EG		65716	0					
ANR	66562	ArgumentList	uninitialized_zval_ptr		65716	1					
ANR	66563	Argument	uninitialized_zval_ptr		65716	0					
ANR	66564	Identifier	uninitialized_zval_ptr		65716	0					
ANR	66565	ElseStatement	else		65716	0					
ANR	66566	CompoundStatement		155:10:4281:4281	65716	0					
ANR	66567	ExpressionStatement	"zend_error ( E_WARNING , ""Cannot use a scalar value as an array"" )"	1274:4:39701:39763	65716	0	True				
ANR	66568	CallExpression	"zend_error ( E_WARNING , ""Cannot use a scalar value as an array"" )"		65716	0					
ANR	66569	Callee	zend_error		65716	0					
ANR	66570	Identifier	zend_error		65716	0					
ANR	66571	ArgumentList	E_WARNING		65716	1					
ANR	66572	Argument	E_WARNING		65716	0					
ANR	66573	Identifier	E_WARNING		65716	0					
ANR	66574	Argument	"""Cannot use a scalar value as an array"""		65716	1					
ANR	66575	PrimaryExpression	"""Cannot use a scalar value as an array"""		65716	0					
ANR	66576	ExpressionStatement	result -> var . ptr_ptr = & EG ( error_zval_ptr )	1275:4:39769:39810	65716	1	True				
ANR	66577	AssignmentExpression	result -> var . ptr_ptr = & EG ( error_zval_ptr )		65716	0		=			
ANR	66578	MemberAccess	result -> var . ptr_ptr		65716	0					
ANR	66579	PtrMemberAccess	result -> var		65716	0					
ANR	66580	Identifier	result		65716	0					
ANR	66581	Identifier	var		65716	1					
ANR	66582	Identifier	ptr_ptr		65716	1					
ANR	66583	UnaryOperationExpression	& EG ( error_zval_ptr )		65716	1					
ANR	66584	UnaryOperator	&		65716	0					
ANR	66585	CallExpression	EG ( error_zval_ptr )		65716	1					
ANR	66586	Callee	EG		65716	0					
ANR	66587	Identifier	EG		65716	0					
ANR	66588	ArgumentList	error_zval_ptr		65716	1					
ANR	66589	Argument	error_zval_ptr		65716	0					
ANR	66590	Identifier	error_zval_ptr		65716	0					
ANR	66591	ExpressionStatement	PZVAL_LOCK ( EG ( error_zval_ptr ) )	1276:4:39816:39846	65716	2	True				
ANR	66592	CallExpression	PZVAL_LOCK ( EG ( error_zval_ptr ) )		65716	0					
ANR	66593	Callee	PZVAL_LOCK		65716	0					
ANR	66594	Identifier	PZVAL_LOCK		65716	0					
ANR	66595	ArgumentList	EG ( error_zval_ptr )		65716	1					
ANR	66596	Argument	EG ( error_zval_ptr )		65716	0					
ANR	66597	CallExpression	EG ( error_zval_ptr )		65716	0					
ANR	66598	Callee	EG		65716	0					
ANR	66599	Identifier	EG		65716	0					
ANR	66600	ArgumentList	error_zval_ptr		65716	1					
ANR	66601	Argument	error_zval_ptr		65716	0					
ANR	66602	Identifier	error_zval_ptr		65716	0					
ANR	66603	BreakStatement	break ;	1278:3:39856:39861	65716	23	True				
ANR	66604	ReturnType	static void		65716	1					
ANR	66605	Identifier	zend_fetch_dimension_address		65716	2					
ANR	66606	ParameterList	"temp_variable * result , zval * * container_ptr , zval * dim , int dim_type , int type TSRMLS_DC"		65716	3					
ANR	66607	Parameter	temp_variable * result	1118:41:35323:35343	65716	0	True				
ANR	66608	ParameterType	temp_variable *		65716	0					
ANR	66609	Identifier	result		65716	1					
ANR	66610	Parameter	zval * * container_ptr	1118:64:35346:35365	65716	1	True				
ANR	66611	ParameterType	zval * *		65716	0					
ANR	66612	Identifier	container_ptr		65716	1					
ANR	66613	Parameter	zval * dim	1118:86:35368:35376	65716	2	True				
ANR	66614	ParameterType	zval *		65716	0					
ANR	66615	Identifier	dim		65716	1					
ANR	66616	Parameter	int dim_type	1118:97:35379:35390	65716	3	True				
ANR	66617	ParameterType	int		65716	0					
ANR	66618	Identifier	dim_type		65716	1					
ANR	66619	Parameter	int type TSRMLS_DC	1118:111:35393:35410	65716	4	True				
ANR	66620	ParameterType	int type		65716	0					
ANR	66621	Identifier	TSRMLS_DC		65716	1					
ANR	66622	CFGEntryNode	ENTRY		65716		True				
ANR	66623	CFGExitNode	EXIT		65716		True				
ANR	66624	Symbol	container		65716						
ANR	66625	Symbol	dim		65716						
ANR	66626	Symbol	* ce		65716						
ANR	66627	Symbol	type		65716						
ANR	66628	Symbol	TSRMLS_DC		65716						
ANR	66629	Symbol	Z_REFCOUNT_P		65716						
ANR	66630	Symbol	* retval		65716						
ANR	66631	Symbol	tmp		65716						
ANR	66632	Symbol	& retval		65716						
ANR	66633	Symbol	ce -> name		65716						
ANR	66634	Symbol	IS_TMP_VAR		65716						
ANR	66635	Symbol	EG		65716						
ANR	66636	Symbol	NULL		65716						
ANR	66637	Symbol	error_zval_ptr		65716						
ANR	66638	Symbol	result -> str_offset . ptr_ptr		65716						
ANR	66639	Symbol	E_NOTICE		65716						
ANR	66640	Symbol	& dim		65716						
ANR	66641	Symbol	* Z_OBJ_HT_P		65716						
ANR	66642	Symbol	retval		65716						
ANR	66643	Symbol	result -> var		65716						
ANR	66644	Symbol	uninitialized_zval_ptr		65716						
ANR	66645	Symbol	error_zval		65716						
ANR	66646	Symbol	Z_OBJ_HT_P		65716						
ANR	66647	Symbol	& tmp		65716						
ANR	66648	Symbol	new_zval		65716						
ANR	66649	Symbol	Z_ISREF_P		65716						
ANR	66650	Symbol	* container_ptr		65716						
ANR	66651	Symbol	zend_hash_next_index_insert		65716						
ANR	66652	Symbol	dim_type		65716						
ANR	66653	Symbol	Z_OBJ_HT_P ( container ) -> read_dimension		65716						
ANR	66654	Symbol	result -> str_offset . str		65716						
ANR	66655	Symbol	& EG		65716						
ANR	66656	Symbol	* dim		65716						
ANR	66657	Symbol	result		65716						
ANR	66658	Symbol	E_WARNING		65716						
ANR	66659	Symbol	result -> str_offset . offset		65716						
ANR	66660	Symbol	overloaded_result		65716						
ANR	66661	Symbol	dim -> value . str		65716						
ANR	66662	Symbol	* result		65716						
ANR	66663	Symbol	IS_LONG		65716						
ANR	66664	Symbol	Z_OBJCE_P		65716						
ANR	66665	Symbol	Z_STRLEN_P		65716						
ANR	66666	Symbol	result -> str_offset		65716						
ANR	66667	Symbol	Z_ARRVAL_P		65716						
ANR	66668	Symbol	uninitialized_zval		65716						
ANR	66669	Symbol	ce		65716						
ANR	66670	Symbol	PZVAL_IS_REF		65716						
ANR	66671	Symbol	dim -> value . str . val		65716						
ANR	66672	Symbol	Z_TYPE_P		65716						
ANR	66673	Symbol	FAILURE		65716						
ANR	66674	Symbol	Z_STRVAL_P		65716						
ANR	66675	Symbol	& new_zval		65716						
ANR	66676	Symbol	result -> var . ptr_ptr		65716						
ANR	66677	Symbol	Z_LVAL_P		65716						
ANR	66678	Symbol	container_ptr		65716						
ANR	66679	Symbol	E_ERROR		65716						
ANR	66680	Symbol	is_numeric_string		65716						
ANR	66681	Symbol	orig		65716						
ANR	66682	Symbol	dim -> value		65716						
ANR	66683	Symbol	IS_OBJECT		65716						
ANR	66684	Symbol	BP_VAR_UNSET		65716						
ANR	66685	Function	zend_fetch_dimension_address_read	1282:0:39869:42536							
ANR	66686	FunctionDef	"zend_fetch_dimension_address_read (temp_variable * result , zval * container , zval * dim , int dim_type , int type TSRMLS_DC)"		66685	0					
ANR	66687	CompoundStatement		1283:0:40000:42536	66685	0					
ANR	66688	IdentifierDeclStatement	zval * * retval ;	1284:1:40003:40016	66685	0	True				
ANR	66689	IdentifierDecl	* * retval		66685	0					
ANR	66690	IdentifierDeclType	zval * *		66685	0					
ANR	66691	Identifier	retval		66685	1					
ANR	66692	SwitchStatement	switch ( Z_TYPE_P ( container ) )		66685	1					
ANR	66693	Condition	Z_TYPE_P ( container )	1286:9:40028:40046	66685	0	True				
ANR	66694	CallExpression	Z_TYPE_P ( container )		66685	0					
ANR	66695	Callee	Z_TYPE_P		66685	0					
ANR	66696	Identifier	Z_TYPE_P		66685	0					
ANR	66697	ArgumentList	container		66685	1					
ANR	66698	Argument	container		66685	0					
ANR	66699	Identifier	container		66685	0					
ANR	66700	CompoundStatement		4:30:48:48	66685	1					
ANR	66701	Label	case IS_ARRAY :	1288:2:40054:40067	66685	0	True				
ANR	66702	Identifier	IS_ARRAY		66685	0					
ANR	66703	Statement	retval	1289:3:40072:40077	66685	1	True				
ANR	66704	Statement	=	1289:10:40079:40079	66685	2	True				
ANR	66705	Statement	zend_fetch_dimension_address_inner	1289:12:40081:40114	66685	3	True				
ANR	66706	Statement	(	1289:46:40115:40115	66685	4	True				
ANR	66707	Statement	Z_ARRVAL_P	1289:47:40116:40125	66685	5	True				
ANR	66708	Statement	(	1289:57:40126:40126	66685	6	True				
ANR	66709	Statement	container	1289:58:40127:40135	66685	7	True				
ANR	66710	Statement	)	1289:67:40136:40136	66685	8	True				
ANR	66711	Statement	","	1289:68:40137:40137	66685	9	True				
ANR	66712	Statement	dim	1289:70:40139:40141	66685	10	True				
ANR	66713	Statement	","	1289:73:40142:40142	66685	11	True				
ANR	66714	Statement	dim_type	1289:75:40144:40151	66685	12	True				
ANR	66715	Statement	","	1289:83:40152:40152	66685	13	True				
ANR	66716	Statement	type	1289:85:40154:40157	66685	14	True				
ANR	66717	Statement	TSRMLS_CC	1289:90:40159:40167	66685	15	True				
ANR	66718	Statement	)	1289:99:40168:40168	66685	16	True				
ANR	66719	ExpressionStatement		1289:100:40169:40169	66685	17	True				
ANR	66720	ExpressionStatement	result -> var . ptr = * retval	1290:3:40174:40199	66685	18	True				
ANR	66721	AssignmentExpression	result -> var . ptr = * retval		66685	0		=			
ANR	66722	MemberAccess	result -> var . ptr		66685	0					
ANR	66723	PtrMemberAccess	result -> var		66685	0					
ANR	66724	Identifier	result		66685	0					
ANR	66725	Identifier	var		66685	1					
ANR	66726	Identifier	ptr		66685	1					
ANR	66727	UnaryOperationExpression	* retval		66685	1					
ANR	66728	UnaryOperator	*		66685	0					
ANR	66729	Identifier	retval		66685	1					
ANR	66730	ExpressionStatement	PZVAL_LOCK ( * retval )	1291:3:40204:40223	66685	19	True				
ANR	66731	CallExpression	PZVAL_LOCK ( * retval )		66685	0					
ANR	66732	Callee	PZVAL_LOCK		66685	0					
ANR	66733	Identifier	PZVAL_LOCK		66685	0					
ANR	66734	ArgumentList	* retval		66685	1					
ANR	66735	Argument	* retval		66685	0					
ANR	66736	UnaryOperationExpression	* retval		66685	0					
ANR	66737	UnaryOperator	*		66685	0					
ANR	66738	Identifier	retval		66685	1					
ANR	66739	ReturnStatement	return ;	1292:3:40228:40234	66685	20	True				
ANR	66740	Label	case IS_NULL :	1294:2:40239:40251	66685	21	True				
ANR	66741	Identifier	IS_NULL		66685	0					
ANR	66742	ExpressionStatement	result -> var . ptr = & EG ( uninitialized_zval )	1295:3:40256:40297	66685	22	True				
ANR	66743	AssignmentExpression	result -> var . ptr = & EG ( uninitialized_zval )		66685	0		=			
ANR	66744	MemberAccess	result -> var . ptr		66685	0					
ANR	66745	PtrMemberAccess	result -> var		66685	0					
ANR	66746	Identifier	result		66685	0					
ANR	66747	Identifier	var		66685	1					
ANR	66748	Identifier	ptr		66685	1					
ANR	66749	UnaryOperationExpression	& EG ( uninitialized_zval )		66685	1					
ANR	66750	UnaryOperator	&		66685	0					
ANR	66751	CallExpression	EG ( uninitialized_zval )		66685	1					
ANR	66752	Callee	EG		66685	0					
ANR	66753	Identifier	EG		66685	0					
ANR	66754	ArgumentList	uninitialized_zval		66685	1					
ANR	66755	Argument	uninitialized_zval		66685	0					
ANR	66756	Identifier	uninitialized_zval		66685	0					
ANR	66757	ExpressionStatement	PZVAL_LOCK ( & EG ( uninitialized_zval ) )	1296:3:40302:40337	66685	23	True				
ANR	66758	CallExpression	PZVAL_LOCK ( & EG ( uninitialized_zval ) )		66685	0					
ANR	66759	Callee	PZVAL_LOCK		66685	0					
ANR	66760	Identifier	PZVAL_LOCK		66685	0					
ANR	66761	ArgumentList	& EG ( uninitialized_zval )		66685	1					
ANR	66762	Argument	& EG ( uninitialized_zval )		66685	0					
ANR	66763	UnaryOperationExpression	& EG ( uninitialized_zval )		66685	0					
ANR	66764	UnaryOperator	&		66685	0					
ANR	66765	CallExpression	EG ( uninitialized_zval )		66685	1					
ANR	66766	Callee	EG		66685	0					
ANR	66767	Identifier	EG		66685	0					
ANR	66768	ArgumentList	uninitialized_zval		66685	1					
ANR	66769	Argument	uninitialized_zval		66685	0					
ANR	66770	Identifier	uninitialized_zval		66685	0					
ANR	66771	ReturnStatement	return ;	1297:3:40342:40348	66685	24	True				
ANR	66772	Label	case IS_STRING :	1299:2:40353:40367	66685	25	True				
ANR	66773	Identifier	IS_STRING		66685	0					
ANR	66774	CompoundStatement		19:4:388:397	66685	26					
ANR	66775	IdentifierDeclStatement	zval tmp ;	1300:4:40375:40383	66685	0	True				
ANR	66776	IdentifierDecl	tmp		66685	0					
ANR	66777	IdentifierDeclType	zval		66685	0					
ANR	66778	Identifier	tmp		66685	1					
ANR	66779	IdentifierDeclStatement	zval * ptr ;	1301:4:40389:40398	66685	1	True				
ANR	66780	IdentifierDecl	* ptr		66685	0					
ANR	66781	IdentifierDeclType	zval *		66685	0					
ANR	66782	Identifier	ptr		66685	1					
ANR	66783	IfStatement	if ( Z_TYPE_P ( dim ) != IS_LONG )		66685	2					
ANR	66784	Condition	Z_TYPE_P ( dim ) != IS_LONG	1303:8:40409:40432	66685	0	True				
ANR	66785	EqualityExpression	Z_TYPE_P ( dim ) != IS_LONG		66685	0		!=			
ANR	66786	CallExpression	Z_TYPE_P ( dim )		66685	0					
ANR	66787	Callee	Z_TYPE_P		66685	0					
ANR	66788	Identifier	Z_TYPE_P		66685	0					
ANR	66789	ArgumentList	dim		66685	1					
ANR	66790	Argument	dim		66685	0					
ANR	66791	Identifier	dim		66685	0					
ANR	66792	Identifier	IS_LONG		66685	1					
ANR	66793	CompoundStatement		21:34:434:434	66685	1					
ANR	66794	SwitchStatement	switch ( Z_TYPE_P ( dim ) )		66685	0					
ANR	66795	Condition	Z_TYPE_P ( dim )	1304:12:40449:40461	66685	0	True				
ANR	66796	CallExpression	Z_TYPE_P ( dim )		66685	0					
ANR	66797	Callee	Z_TYPE_P		66685	0					
ANR	66798	Identifier	Z_TYPE_P		66685	0					
ANR	66799	ArgumentList	dim		66685	1					
ANR	66800	Argument	dim		66685	0					
ANR	66801	Identifier	dim		66685	0					
ANR	66802	CompoundStatement		22:27:463:463	66685	1					
ANR	66803	Label	case IS_STRING :	1306:6:40498:40512	66685	0	True				
ANR	66804	Identifier	IS_STRING		66685	0					
ANR	66805	IfStatement	"if ( IS_LONG == is_numeric_string ( Z_STRVAL_P ( dim ) , Z_STRLEN_P ( dim ) , NULL , NULL , - 1 ) )"		66685	1					
ANR	66806	Condition	"IS_LONG == is_numeric_string ( Z_STRVAL_P ( dim ) , Z_STRLEN_P ( dim ) , NULL , NULL , - 1 )"	1307:11:40525:40602	66685	0	True				
ANR	66807	EqualityExpression	"IS_LONG == is_numeric_string ( Z_STRVAL_P ( dim ) , Z_STRLEN_P ( dim ) , NULL , NULL , - 1 )"		66685	0		==			
ANR	66808	Identifier	IS_LONG		66685	0					
ANR	66809	CallExpression	"is_numeric_string ( Z_STRVAL_P ( dim ) , Z_STRLEN_P ( dim ) , NULL , NULL , - 1 )"		66685	1					
ANR	66810	Callee	is_numeric_string		66685	0					
ANR	66811	Identifier	is_numeric_string		66685	0					
ANR	66812	ArgumentList	Z_STRVAL_P ( dim )		66685	1					
ANR	66813	Argument	Z_STRVAL_P ( dim )		66685	0					
ANR	66814	CallExpression	Z_STRVAL_P ( dim )		66685	0					
ANR	66815	Callee	Z_STRVAL_P		66685	0					
ANR	66816	Identifier	Z_STRVAL_P		66685	0					
ANR	66817	ArgumentList	dim		66685	1					
ANR	66818	Argument	dim		66685	0					
ANR	66819	Identifier	dim		66685	0					
ANR	66820	Argument	Z_STRLEN_P ( dim )		66685	1					
ANR	66821	CallExpression	Z_STRLEN_P ( dim )		66685	0					
ANR	66822	Callee	Z_STRLEN_P		66685	0					
ANR	66823	Identifier	Z_STRLEN_P		66685	0					
ANR	66824	ArgumentList	dim		66685	1					
ANR	66825	Argument	dim		66685	0					
ANR	66826	Identifier	dim		66685	0					
ANR	66827	Argument	NULL		66685	2					
ANR	66828	Identifier	NULL		66685	0					
ANR	66829	Argument	NULL		66685	3					
ANR	66830	Identifier	NULL		66685	0					
ANR	66831	Argument	- 1		66685	4					
ANR	66832	UnaryOperationExpression	- 1		66685	0					
ANR	66833	UnaryOperator	-		66685	0					
ANR	66834	PrimaryExpression	1		66685	1					
ANR	66835	CompoundStatement		25:91:604:604	66685	1					
ANR	66836	BreakStatement	break ;	1308:8:40615:40620	66685	0	True				
ANR	66837	IfStatement	if ( type != BP_VAR_IS )		66685	2					
ANR	66838	Condition	type != BP_VAR_IS	1310:11:40642:40658	66685	0	True				
ANR	66839	EqualityExpression	type != BP_VAR_IS		66685	0		!=			
ANR	66840	Identifier	type		66685	0					
ANR	66841	Identifier	BP_VAR_IS		66685	1					
ANR	66842	CompoundStatement		28:30:660:660	66685	1					
ANR	66843	ExpressionStatement	"zend_error ( E_WARNING , ""Illegal string offset '%s'"" , dim -> value . str . val )"	1311:8:40671:40742	66685	0	True				
ANR	66844	CallExpression	"zend_error ( E_WARNING , ""Illegal string offset '%s'"" , dim -> value . str . val )"		66685	0					
ANR	66845	Callee	zend_error		66685	0					
ANR	66846	Identifier	zend_error		66685	0					
ANR	66847	ArgumentList	E_WARNING		66685	1					
ANR	66848	Argument	E_WARNING		66685	0					
ANR	66849	Identifier	E_WARNING		66685	0					
ANR	66850	Argument	"""Illegal string offset '%s'"""		66685	1					
ANR	66851	PrimaryExpression	"""Illegal string offset '%s'"""		66685	0					
ANR	66852	Argument	dim -> value . str . val		66685	2					
ANR	66853	MemberAccess	dim -> value . str . val		66685	0					
ANR	66854	MemberAccess	dim -> value . str		66685	0					
ANR	66855	PtrMemberAccess	dim -> value		66685	0					
ANR	66856	Identifier	dim		66685	0					
ANR	66857	Identifier	value		66685	1					
ANR	66858	Identifier	str		66685	1					
ANR	66859	Identifier	val		66685	1					
ANR	66860	BreakStatement	break ;	1313:7:40760:40765	66685	3	True				
ANR	66861	Label	case IS_DOUBLE :	1314:6:40773:40787	66685	4	True				
ANR	66862	Identifier	IS_DOUBLE		66685	0					
ANR	66863	Label	case IS_NULL :	1315:6:40795:40807	66685	5	True				
ANR	66864	Identifier	IS_NULL		66685	0					
ANR	66865	Label	case IS_BOOL :	1316:6:40815:40827	66685	6	True				
ANR	66866	Identifier	IS_BOOL		66685	0					
ANR	66867	IfStatement	if ( type != BP_VAR_IS )		66685	7					
ANR	66868	Condition	type != BP_VAR_IS	1317:11:40840:40856	66685	0	True				
ANR	66869	EqualityExpression	type != BP_VAR_IS		66685	0		!=			
ANR	66870	Identifier	type		66685	0					
ANR	66871	Identifier	BP_VAR_IS		66685	1					
ANR	66872	CompoundStatement		35:30:858:858	66685	1					
ANR	66873	ExpressionStatement	"zend_error ( E_NOTICE , ""String offset cast occurred"" )"	1318:8:40869:40920	66685	0	True				
ANR	66874	CallExpression	"zend_error ( E_NOTICE , ""String offset cast occurred"" )"		66685	0					
ANR	66875	Callee	zend_error		66685	0					
ANR	66876	Identifier	zend_error		66685	0					
ANR	66877	ArgumentList	E_NOTICE		66685	1					
ANR	66878	Argument	E_NOTICE		66685	0					
ANR	66879	Identifier	E_NOTICE		66685	0					
ANR	66880	Argument	"""String offset cast occurred"""		66685	1					
ANR	66881	PrimaryExpression	"""String offset cast occurred"""		66685	0					
ANR	66882	BreakStatement	break ;	1320:7:40938:40943	66685	8	True				
ANR	66883	Label	default :	1321:6:40951:40958	66685	9	True				
ANR	66884	Identifier	default		66685	0					
ANR	66885	ExpressionStatement	"zend_error ( E_WARNING , ""Illegal offset type"" )"	1322:7:40967:41011	66685	10	True				
ANR	66886	CallExpression	"zend_error ( E_WARNING , ""Illegal offset type"" )"		66685	0					
ANR	66887	Callee	zend_error		66685	0					
ANR	66888	Identifier	zend_error		66685	0					
ANR	66889	ArgumentList	E_WARNING		66685	1					
ANR	66890	Argument	E_WARNING		66685	0					
ANR	66891	Identifier	E_WARNING		66685	0					
ANR	66892	Argument	"""Illegal offset type"""		66685	1					
ANR	66893	PrimaryExpression	"""Illegal offset type"""		66685	0					
ANR	66894	BreakStatement	break ;	1323:7:41020:41025	66685	11	True				
ANR	66895	ExpressionStatement	"ZVAL_COPY_VALUE ( & tmp , dim )"	1326:5:41040:41066	66685	1	True				
ANR	66896	CallExpression	"ZVAL_COPY_VALUE ( & tmp , dim )"		66685	0					
ANR	66897	Callee	ZVAL_COPY_VALUE		66685	0					
ANR	66898	Identifier	ZVAL_COPY_VALUE		66685	0					
ANR	66899	ArgumentList	& tmp		66685	1					
ANR	66900	Argument	& tmp		66685	0					
ANR	66901	UnaryOperationExpression	& tmp		66685	0					
ANR	66902	UnaryOperator	&		66685	0					
ANR	66903	Identifier	tmp		66685	1					
ANR	66904	Argument	dim		66685	1					
ANR	66905	Identifier	dim		66685	0					
ANR	66906	ExpressionStatement	zval_copy_ctor ( & tmp )	1327:5:41073:41093	66685	2	True				
ANR	66907	CallExpression	zval_copy_ctor ( & tmp )		66685	0					
ANR	66908	Callee	zval_copy_ctor		66685	0					
ANR	66909	Identifier	zval_copy_ctor		66685	0					
ANR	66910	ArgumentList	& tmp		66685	1					
ANR	66911	Argument	& tmp		66685	0					
ANR	66912	UnaryOperationExpression	& tmp		66685	0					
ANR	66913	UnaryOperator	&		66685	0					
ANR	66914	Identifier	tmp		66685	1					
ANR	66915	ExpressionStatement	convert_to_long ( & tmp )	1328:5:41100:41121	66685	3	True				
ANR	66916	CallExpression	convert_to_long ( & tmp )		66685	0					
ANR	66917	Callee	convert_to_long		66685	0					
ANR	66918	Identifier	convert_to_long		66685	0					
ANR	66919	ArgumentList	& tmp		66685	1					
ANR	66920	Argument	& tmp		66685	0					
ANR	66921	UnaryOperationExpression	& tmp		66685	0					
ANR	66922	UnaryOperator	&		66685	0					
ANR	66923	Identifier	tmp		66685	1					
ANR	66924	ExpressionStatement	dim = & tmp	1329:5:41128:41138	66685	4	True				
ANR	66925	AssignmentExpression	dim = & tmp		66685	0		=			
ANR	66926	Identifier	dim		66685	0					
ANR	66927	UnaryOperationExpression	& tmp		66685	1					
ANR	66928	UnaryOperator	&		66685	0					
ANR	66929	Identifier	tmp		66685	1					
ANR	66930	ExpressionStatement	ALLOC_ZVAL ( ptr )	1332:4:41151:41166	66685	3	True				
ANR	66931	CallExpression	ALLOC_ZVAL ( ptr )		66685	0					
ANR	66932	Callee	ALLOC_ZVAL		66685	0					
ANR	66933	Identifier	ALLOC_ZVAL		66685	0					
ANR	66934	ArgumentList	ptr		66685	1					
ANR	66935	Argument	ptr		66685	0					
ANR	66936	Identifier	ptr		66685	0					
ANR	66937	ExpressionStatement	INIT_PZVAL ( ptr )	1333:4:41172:41187	66685	4	True				
ANR	66938	CallExpression	INIT_PZVAL ( ptr )		66685	0					
ANR	66939	Callee	INIT_PZVAL		66685	0					
ANR	66940	Identifier	INIT_PZVAL		66685	0					
ANR	66941	ArgumentList	ptr		66685	1					
ANR	66942	Argument	ptr		66685	0					
ANR	66943	Identifier	ptr		66685	0					
ANR	66944	ExpressionStatement	Z_TYPE_P ( ptr ) = IS_STRING	1334:4:41193:41218	66685	5	True				
ANR	66945	AssignmentExpression	Z_TYPE_P ( ptr ) = IS_STRING		66685	0		=			
ANR	66946	CallExpression	Z_TYPE_P ( ptr )		66685	0					
ANR	66947	Callee	Z_TYPE_P		66685	0					
ANR	66948	Identifier	Z_TYPE_P		66685	0					
ANR	66949	ArgumentList	ptr		66685	1					
ANR	66950	Argument	ptr		66685	0					
ANR	66951	Identifier	ptr		66685	0					
ANR	66952	Identifier	IS_STRING		66685	1					
ANR	66953	IfStatement	if ( Z_LVAL_P ( dim ) < 0 || Z_STRLEN_P ( container ) <= Z_LVAL_P ( dim ) )		66685	6					
ANR	66954	Condition	Z_LVAL_P ( dim ) < 0 || Z_STRLEN_P ( container ) <= Z_LVAL_P ( dim )	1336:8:41229:41287	66685	0	True				
ANR	66955	OrExpression	Z_LVAL_P ( dim ) < 0 || Z_STRLEN_P ( container ) <= Z_LVAL_P ( dim )		66685	0		||			
ANR	66956	RelationalExpression	Z_LVAL_P ( dim ) < 0		66685	0		<			
ANR	66957	CallExpression	Z_LVAL_P ( dim )		66685	0					
ANR	66958	Callee	Z_LVAL_P		66685	0					
ANR	66959	Identifier	Z_LVAL_P		66685	0					
ANR	66960	ArgumentList	dim		66685	1					
ANR	66961	Argument	dim		66685	0					
ANR	66962	Identifier	dim		66685	0					
ANR	66963	PrimaryExpression	0		66685	1					
ANR	66964	RelationalExpression	Z_STRLEN_P ( container ) <= Z_LVAL_P ( dim )		66685	1		<=			
ANR	66965	CallExpression	Z_STRLEN_P ( container )		66685	0					
ANR	66966	Callee	Z_STRLEN_P		66685	0					
ANR	66967	Identifier	Z_STRLEN_P		66685	0					
ANR	66968	ArgumentList	container		66685	1					
ANR	66969	Argument	container		66685	0					
ANR	66970	Identifier	container		66685	0					
ANR	66971	CallExpression	Z_LVAL_P ( dim )		66685	1					
ANR	66972	Callee	Z_LVAL_P		66685	0					
ANR	66973	Identifier	Z_LVAL_P		66685	0					
ANR	66974	ArgumentList	dim		66685	1					
ANR	66975	Argument	dim		66685	0					
ANR	66976	Identifier	dim		66685	0					
ANR	66977	CompoundStatement		54:69:1289:1289	66685	1					
ANR	66978	IfStatement	if ( type != BP_VAR_IS )		66685	0					
ANR	66979	Condition	type != BP_VAR_IS	1337:9:41301:41317	66685	0	True				
ANR	66980	EqualityExpression	type != BP_VAR_IS		66685	0		!=			
ANR	66981	Identifier	type		66685	0					
ANR	66982	Identifier	BP_VAR_IS		66685	1					
ANR	66983	CompoundStatement		55:28:1319:1319	66685	1					
ANR	66984	ExpressionStatement	"zend_error ( E_NOTICE , ""Uninitialized string offset: %ld"" , Z_LVAL_P ( dim ) )"	1338:6:41328:41399	66685	0	True				
ANR	66985	CallExpression	"zend_error ( E_NOTICE , ""Uninitialized string offset: %ld"" , Z_LVAL_P ( dim ) )"		66685	0					
ANR	66986	Callee	zend_error		66685	0					
ANR	66987	Identifier	zend_error		66685	0					
ANR	66988	ArgumentList	E_NOTICE		66685	1					
ANR	66989	Argument	E_NOTICE		66685	0					
ANR	66990	Identifier	E_NOTICE		66685	0					
ANR	66991	Argument	"""Uninitialized string offset: %ld"""		66685	1					
ANR	66992	PrimaryExpression	"""Uninitialized string offset: %ld"""		66685	0					
ANR	66993	Argument	Z_LVAL_P ( dim )		66685	2					
ANR	66994	CallExpression	Z_LVAL_P ( dim )		66685	0					
ANR	66995	Callee	Z_LVAL_P		66685	0					
ANR	66996	Identifier	Z_LVAL_P		66685	0					
ANR	66997	ArgumentList	dim		66685	1					
ANR	66998	Argument	dim		66685	0					
ANR	66999	Identifier	dim		66685	0					
ANR	67000	ExpressionStatement	Z_STRVAL_P ( ptr ) = STR_EMPTY_ALLOC ( )	1340:5:41413:41448	66685	1	True				
ANR	67001	AssignmentExpression	Z_STRVAL_P ( ptr ) = STR_EMPTY_ALLOC ( )		66685	0		=			
ANR	67002	CallExpression	Z_STRVAL_P ( ptr )		66685	0					
ANR	67003	Callee	Z_STRVAL_P		66685	0					
ANR	67004	Identifier	Z_STRVAL_P		66685	0					
ANR	67005	ArgumentList	ptr		66685	1					
ANR	67006	Argument	ptr		66685	0					
ANR	67007	Identifier	ptr		66685	0					
ANR	67008	CallExpression	STR_EMPTY_ALLOC ( )		66685	1					
ANR	67009	Callee	STR_EMPTY_ALLOC		66685	0					
ANR	67010	Identifier	STR_EMPTY_ALLOC		66685	0					
ANR	67011	ArgumentList			66685	1					
ANR	67012	ExpressionStatement	Z_STRLEN_P ( ptr ) = 0	1341:5:41455:41474	66685	2	True				
ANR	67013	AssignmentExpression	Z_STRLEN_P ( ptr ) = 0		66685	0		=			
ANR	67014	CallExpression	Z_STRLEN_P ( ptr )		66685	0					
ANR	67015	Callee	Z_STRLEN_P		66685	0					
ANR	67016	Identifier	Z_STRLEN_P		66685	0					
ANR	67017	ArgumentList	ptr		66685	1					
ANR	67018	Argument	ptr		66685	0					
ANR	67019	Identifier	ptr		66685	0					
ANR	67020	PrimaryExpression	0		66685	1					
ANR	67021	ElseStatement	else		66685	0					
ANR	67022	CompoundStatement		60:11:1486:1486	66685	0					
ANR	67023	ExpressionStatement	Z_STRVAL_P ( ptr ) = ( char * ) emalloc ( 2 )	1343:5:41494:41529	66685	0	True				
ANR	67024	AssignmentExpression	Z_STRVAL_P ( ptr ) = ( char * ) emalloc ( 2 )		66685	0		=			
ANR	67025	CallExpression	Z_STRVAL_P ( ptr )		66685	0					
ANR	67026	Callee	Z_STRVAL_P		66685	0					
ANR	67027	Identifier	Z_STRVAL_P		66685	0					
ANR	67028	ArgumentList	ptr		66685	1					
ANR	67029	Argument	ptr		66685	0					
ANR	67030	Identifier	ptr		66685	0					
ANR	67031	CastExpression	( char * ) emalloc ( 2 )		66685	1					
ANR	67032	CastTarget	char *		66685	0					
ANR	67033	CallExpression	emalloc ( 2 )		66685	1					
ANR	67034	Callee	emalloc		66685	0					
ANR	67035	Identifier	emalloc		66685	0					
ANR	67036	ArgumentList	2		66685	1					
ANR	67037	Argument	2		66685	0					
ANR	67038	PrimaryExpression	2		66685	0					
ANR	67039	ExpressionStatement	Z_STRVAL_P ( ptr ) [ 0 ] = Z_STRVAL_P ( container ) [ Z_LVAL_P ( dim ) ]	1344:5:41536:41593	66685	1	True				
ANR	67040	AssignmentExpression	Z_STRVAL_P ( ptr ) [ 0 ] = Z_STRVAL_P ( container ) [ Z_LVAL_P ( dim ) ]		66685	0		=			
ANR	67041	ArrayIndexing	Z_STRVAL_P ( ptr ) [ 0 ]		66685	0					
ANR	67042	CallExpression	Z_STRVAL_P ( ptr )		66685	0					
ANR	67043	Callee	Z_STRVAL_P		66685	0					
ANR	67044	Identifier	Z_STRVAL_P		66685	0					
ANR	67045	ArgumentList	ptr		66685	1					
ANR	67046	Argument	ptr		66685	0					
ANR	67047	Identifier	ptr		66685	0					
ANR	67048	PrimaryExpression	0		66685	1					
ANR	67049	ArrayIndexing	Z_STRVAL_P ( container ) [ Z_LVAL_P ( dim ) ]		66685	1					
ANR	67050	CallExpression	Z_STRVAL_P ( container )		66685	0					
ANR	67051	Callee	Z_STRVAL_P		66685	0					
ANR	67052	Identifier	Z_STRVAL_P		66685	0					
ANR	67053	ArgumentList	container		66685	1					
ANR	67054	Argument	container		66685	0					
ANR	67055	Identifier	container		66685	0					
ANR	67056	CallExpression	Z_LVAL_P ( dim )		66685	1					
ANR	67057	Callee	Z_LVAL_P		66685	0					
ANR	67058	Identifier	Z_LVAL_P		66685	0					
ANR	67059	ArgumentList	dim		66685	1					
ANR	67060	Argument	dim		66685	0					
ANR	67061	Identifier	dim		66685	0					
ANR	67062	ExpressionStatement	Z_STRVAL_P ( ptr ) [ 1 ] = 0	1345:5:41600:41622	66685	2	True				
ANR	67063	AssignmentExpression	Z_STRVAL_P ( ptr ) [ 1 ] = 0		66685	0		=			
ANR	67064	ArrayIndexing	Z_STRVAL_P ( ptr ) [ 1 ]		66685	0					
ANR	67065	CallExpression	Z_STRVAL_P ( ptr )		66685	0					
ANR	67066	Callee	Z_STRVAL_P		66685	0					
ANR	67067	Identifier	Z_STRVAL_P		66685	0					
ANR	67068	ArgumentList	ptr		66685	1					
ANR	67069	Argument	ptr		66685	0					
ANR	67070	Identifier	ptr		66685	0					
ANR	67071	PrimaryExpression	1		66685	1					
ANR	67072	PrimaryExpression	0		66685	1					
ANR	67073	ExpressionStatement	Z_STRLEN_P ( ptr ) = 1	1346:5:41629:41648	66685	3	True				
ANR	67074	AssignmentExpression	Z_STRLEN_P ( ptr ) = 1		66685	0		=			
ANR	67075	CallExpression	Z_STRLEN_P ( ptr )		66685	0					
ANR	67076	Callee	Z_STRLEN_P		66685	0					
ANR	67077	Identifier	Z_STRLEN_P		66685	0					
ANR	67078	ArgumentList	ptr		66685	1					
ANR	67079	Argument	ptr		66685	0					
ANR	67080	Identifier	ptr		66685	0					
ANR	67081	PrimaryExpression	1		66685	1					
ANR	67082	ExpressionStatement	result -> var . ptr = ptr	1348:4:41660:41681	66685	7	True				
ANR	67083	AssignmentExpression	result -> var . ptr = ptr		66685	0		=			
ANR	67084	MemberAccess	result -> var . ptr		66685	0					
ANR	67085	PtrMemberAccess	result -> var		66685	0					
ANR	67086	Identifier	result		66685	0					
ANR	67087	Identifier	var		66685	1					
ANR	67088	Identifier	ptr		66685	1					
ANR	67089	Identifier	ptr		66685	1					
ANR	67090	ReturnStatement	return ;	1349:4:41687:41693	66685	8	True				
ANR	67091	BreakStatement	break ;	1351:3:41703:41708	66685	27	True				
ANR	67092	Label	case IS_OBJECT :	1353:2:41713:41727	66685	28	True				
ANR	67093	Identifier	IS_OBJECT		66685	0					
ANR	67094	IfStatement	if ( ! Z_OBJ_HT_P ( container ) -> read_dimension )		66685	29					
ANR	67095	Condition	! Z_OBJ_HT_P ( container ) -> read_dimension	1354:7:41736:41773	66685	0	True				
ANR	67096	UnaryOperationExpression	! Z_OBJ_HT_P ( container ) -> read_dimension		66685	0					
ANR	67097	UnaryOperator	!		66685	0					
ANR	67098	PtrMemberAccess	Z_OBJ_HT_P ( container ) -> read_dimension		66685	1					
ANR	67099	CallExpression	Z_OBJ_HT_P ( container )		66685	0					
ANR	67100	Callee	Z_OBJ_HT_P		66685	0					
ANR	67101	Identifier	Z_OBJ_HT_P		66685	0					
ANR	67102	ArgumentList	container		66685	1					
ANR	67103	Argument	container		66685	0					
ANR	67104	Identifier	container		66685	0					
ANR	67105	Identifier	read_dimension		66685	1					
ANR	67106	CompoundStatement		72:47:1775:1775	66685	1					
ANR	67107	ExpressionStatement	"zend_error_noreturn ( E_ERROR , ""Cannot use object as array"" )"	1355:4:41782:41840	66685	0	True				
ANR	67108	CallExpression	"zend_error_noreturn ( E_ERROR , ""Cannot use object as array"" )"		66685	0					
ANR	67109	Callee	zend_error_noreturn		66685	0					
ANR	67110	Identifier	zend_error_noreturn		66685	0					
ANR	67111	ArgumentList	E_ERROR		66685	1					
ANR	67112	Argument	E_ERROR		66685	0					
ANR	67113	Identifier	E_ERROR		66685	0					
ANR	67114	Argument	"""Cannot use object as array"""		66685	1					
ANR	67115	PrimaryExpression	"""Cannot use object as array"""		66685	0					
ANR	67116	ElseStatement	else		66685	0					
ANR	67117	CompoundStatement		75:4:1857:1880	66685	0					
ANR	67118	IdentifierDeclStatement	zval * overloaded_result ;	1357:4:41858:41881	66685	0	True				
ANR	67119	IdentifierDecl	* overloaded_result		66685	0					
ANR	67120	IdentifierDeclType	zval *		66685	0					
ANR	67121	Identifier	overloaded_result		66685	1					
ANR	67122	IfStatement	if ( dim_type == IS_TMP_VAR )		66685	1					
ANR	67123	Condition	dim_type == IS_TMP_VAR	1359:8:41892:41913	66685	0	True				
ANR	67124	EqualityExpression	dim_type == IS_TMP_VAR		66685	0		==			
ANR	67125	Identifier	dim_type		66685	0					
ANR	67126	Identifier	IS_TMP_VAR		66685	1					
ANR	67127	CompoundStatement		78:5:1922:1938	66685	1					
ANR	67128	IdentifierDeclStatement	zval * orig = dim ;	1360:5:41923:41939	66685	0	True				
ANR	67129	IdentifierDecl	* orig = dim		66685	0					
ANR	67130	IdentifierDeclType	zval *		66685	0					
ANR	67131	Identifier	orig		66685	1					
ANR	67132	AssignmentExpression	* orig = dim		66685	2		=			
ANR	67133	Identifier	dim		66685	0					
ANR	67134	Identifier	dim		66685	1					
ANR	67135	ExpressionStatement	MAKE_REAL_ZVAL_PTR ( dim )	1361:5:41946:41969	66685	1	True				
ANR	67136	CallExpression	MAKE_REAL_ZVAL_PTR ( dim )		66685	0					
ANR	67137	Callee	MAKE_REAL_ZVAL_PTR		66685	0					
ANR	67138	Identifier	MAKE_REAL_ZVAL_PTR		66685	0					
ANR	67139	ArgumentList	dim		66685	1					
ANR	67140	Argument	dim		66685	0					
ANR	67141	Identifier	dim		66685	0					
ANR	67142	ExpressionStatement	ZVAL_NULL ( orig )	1362:5:41976:41991	66685	2	True				
ANR	67143	CallExpression	ZVAL_NULL ( orig )		66685	0					
ANR	67144	Callee	ZVAL_NULL		66685	0					
ANR	67145	Identifier	ZVAL_NULL		66685	0					
ANR	67146	ArgumentList	orig		66685	1					
ANR	67147	Argument	orig		66685	0					
ANR	67148	Identifier	orig		66685	0					
ANR	67149	Statement	overloaded_result	1364:4:42003:42019	66685	2	True				
ANR	67150	Statement	=	1364:22:42021:42021	66685	3	True				
ANR	67151	Statement	Z_OBJ_HT_P	1364:24:42023:42032	66685	4	True				
ANR	67152	Statement	(	1364:34:42033:42033	66685	5	True				
ANR	67153	Statement	container	1364:35:42034:42042	66685	6	True				
ANR	67154	Statement	)	1364:44:42043:42043	66685	7	True				
ANR	67155	Statement	->	1364:45:42044:42045	66685	8	True				
ANR	67156	Statement	read_dimension	1364:47:42046:42059	66685	9	True				
ANR	67157	Statement	(	1364:61:42060:42060	66685	10	True				
ANR	67158	Statement	container	1364:62:42061:42069	66685	11	True				
ANR	67159	Statement	","	1364:71:42070:42070	66685	12	True				
ANR	67160	Statement	dim	1364:73:42072:42074	66685	13	True				
ANR	67161	Statement	","	1364:76:42075:42075	66685	14	True				
ANR	67162	Statement	type	1364:78:42077:42080	66685	15	True				
ANR	67163	Statement	TSRMLS_CC	1364:83:42082:42090	66685	16	True				
ANR	67164	Statement	)	1364:92:42091:42091	66685	17	True				
ANR	67165	ExpressionStatement		1364:93:42092:42092	66685	18	True				
ANR	67166	IfStatement	if ( result )		66685	19					
ANR	67167	Condition	result	1366:8:42103:42108	66685	0	True				
ANR	67168	Identifier	result		66685	0					
ANR	67169	CompoundStatement		84:16:2110:2110	66685	1					
ANR	67170	IfStatement	if ( overloaded_result )		66685	0					
ANR	67171	Condition	overloaded_result	1367:9:42122:42138	66685	0	True				
ANR	67172	Identifier	overloaded_result		66685	0					
ANR	67173	CompoundStatement		85:28:2140:2140	66685	1					
ANR	67174	ExpressionStatement	result -> var . ptr = overloaded_result	1368:6:42149:42184	66685	0	True				
ANR	67175	AssignmentExpression	result -> var . ptr = overloaded_result		66685	0		=			
ANR	67176	MemberAccess	result -> var . ptr		66685	0					
ANR	67177	PtrMemberAccess	result -> var		66685	0					
ANR	67178	Identifier	result		66685	0					
ANR	67179	Identifier	var		66685	1					
ANR	67180	Identifier	ptr		66685	1					
ANR	67181	Identifier	overloaded_result		66685	1					
ANR	67182	ExpressionStatement	PZVAL_LOCK ( overloaded_result )	1369:6:42192:42221	66685	1	True				
ANR	67183	CallExpression	PZVAL_LOCK ( overloaded_result )		66685	0					
ANR	67184	Callee	PZVAL_LOCK		66685	0					
ANR	67185	Identifier	PZVAL_LOCK		66685	0					
ANR	67186	ArgumentList	overloaded_result		66685	1					
ANR	67187	Argument	overloaded_result		66685	0					
ANR	67188	Identifier	overloaded_result		66685	0					
ANR	67189	ElseStatement	else		66685	0					
ANR	67190	CompoundStatement		88:12:2234:2234	66685	0					
ANR	67191	ExpressionStatement	result -> var . ptr = & EG ( uninitialized_zval )	1371:6:42243:42284	66685	0	True				
ANR	67192	AssignmentExpression	result -> var . ptr = & EG ( uninitialized_zval )		66685	0		=			
ANR	67193	MemberAccess	result -> var . ptr		66685	0					
ANR	67194	PtrMemberAccess	result -> var		66685	0					
ANR	67195	Identifier	result		66685	0					
ANR	67196	Identifier	var		66685	1					
ANR	67197	Identifier	ptr		66685	1					
ANR	67198	UnaryOperationExpression	& EG ( uninitialized_zval )		66685	1					
ANR	67199	UnaryOperator	&		66685	0					
ANR	67200	CallExpression	EG ( uninitialized_zval )		66685	1					
ANR	67201	Callee	EG		66685	0					
ANR	67202	Identifier	EG		66685	0					
ANR	67203	ArgumentList	uninitialized_zval		66685	1					
ANR	67204	Argument	uninitialized_zval		66685	0					
ANR	67205	Identifier	uninitialized_zval		66685	0					
ANR	67206	ExpressionStatement	PZVAL_LOCK ( & EG ( uninitialized_zval ) )	1372:6:42292:42327	66685	1	True				
ANR	67207	CallExpression	PZVAL_LOCK ( & EG ( uninitialized_zval ) )		66685	0					
ANR	67208	Callee	PZVAL_LOCK		66685	0					
ANR	67209	Identifier	PZVAL_LOCK		66685	0					
ANR	67210	ArgumentList	& EG ( uninitialized_zval )		66685	1					
ANR	67211	Argument	& EG ( uninitialized_zval )		66685	0					
ANR	67212	UnaryOperationExpression	& EG ( uninitialized_zval )		66685	0					
ANR	67213	UnaryOperator	&		66685	0					
ANR	67214	CallExpression	EG ( uninitialized_zval )		66685	1					
ANR	67215	Callee	EG		66685	0					
ANR	67216	Identifier	EG		66685	0					
ANR	67217	ArgumentList	uninitialized_zval		66685	1					
ANR	67218	Argument	uninitialized_zval		66685	0					
ANR	67219	Identifier	uninitialized_zval		66685	0					
ANR	67220	IfStatement	if ( dim_type == IS_TMP_VAR )		66685	20					
ANR	67221	Condition	dim_type == IS_TMP_VAR	1375:8:42350:42371	66685	0	True				
ANR	67222	EqualityExpression	dim_type == IS_TMP_VAR		66685	0		==			
ANR	67223	Identifier	dim_type		66685	0					
ANR	67224	Identifier	IS_TMP_VAR		66685	1					
ANR	67225	CompoundStatement		93:32:2373:2373	66685	1					
ANR	67226	ExpressionStatement	zval_ptr_dtor ( & dim )	1376:5:42381:42400	66685	0	True				
ANR	67227	CallExpression	zval_ptr_dtor ( & dim )		66685	0					
ANR	67228	Callee	zval_ptr_dtor		66685	0					
ANR	67229	Identifier	zval_ptr_dtor		66685	0					
ANR	67230	ArgumentList	& dim		66685	1					
ANR	67231	Argument	& dim		66685	0					
ANR	67232	UnaryOperationExpression	& dim		66685	0					
ANR	67233	UnaryOperator	&		66685	0					
ANR	67234	Identifier	dim		66685	1					
ANR	67235	ReturnStatement	return ;	1379:3:42416:42422	66685	30	True				
ANR	67236	Label	default :	1381:2:42427:42434	66685	31	True				
ANR	67237	Identifier	default		66685	0					
ANR	67238	ExpressionStatement	result -> var . ptr = & EG ( uninitialized_zval )	1382:3:42439:42480	66685	32	True				
ANR	67239	AssignmentExpression	result -> var . ptr = & EG ( uninitialized_zval )		66685	0		=			
ANR	67240	MemberAccess	result -> var . ptr		66685	0					
ANR	67241	PtrMemberAccess	result -> var		66685	0					
ANR	67242	Identifier	result		66685	0					
ANR	67243	Identifier	var		66685	1					
ANR	67244	Identifier	ptr		66685	1					
ANR	67245	UnaryOperationExpression	& EG ( uninitialized_zval )		66685	1					
ANR	67246	UnaryOperator	&		66685	0					
ANR	67247	CallExpression	EG ( uninitialized_zval )		66685	1					
ANR	67248	Callee	EG		66685	0					
ANR	67249	Identifier	EG		66685	0					
ANR	67250	ArgumentList	uninitialized_zval		66685	1					
ANR	67251	Argument	uninitialized_zval		66685	0					
ANR	67252	Identifier	uninitialized_zval		66685	0					
ANR	67253	ExpressionStatement	PZVAL_LOCK ( & EG ( uninitialized_zval ) )	1383:3:42485:42520	66685	33	True				
ANR	67254	CallExpression	PZVAL_LOCK ( & EG ( uninitialized_zval ) )		66685	0					
ANR	67255	Callee	PZVAL_LOCK		66685	0					
ANR	67256	Identifier	PZVAL_LOCK		66685	0					
ANR	67257	ArgumentList	& EG ( uninitialized_zval )		66685	1					
ANR	67258	Argument	& EG ( uninitialized_zval )		66685	0					
ANR	67259	UnaryOperationExpression	& EG ( uninitialized_zval )		66685	0					
ANR	67260	UnaryOperator	&		66685	0					
ANR	67261	CallExpression	EG ( uninitialized_zval )		66685	1					
ANR	67262	Callee	EG		66685	0					
ANR	67263	Identifier	EG		66685	0					
ANR	67264	ArgumentList	uninitialized_zval		66685	1					
ANR	67265	Argument	uninitialized_zval		66685	0					
ANR	67266	Identifier	uninitialized_zval		66685	0					
ANR	67267	ReturnStatement	return ;	1384:3:42525:42531	66685	34	True				
ANR	67268	ReturnType	static void		66685	1					
ANR	67269	Identifier	zend_fetch_dimension_address_read		66685	2					
ANR	67270	ParameterList	"temp_variable * result , zval * container , zval * dim , int dim_type , int type TSRMLS_DC"		66685	3					
ANR	67271	Parameter	temp_variable * result	1282:46:39915:39935	66685	0	True				
ANR	67272	ParameterType	temp_variable *		66685	0					
ANR	67273	Identifier	result		66685	1					
ANR	67274	Parameter	zval * container	1282:69:39938:39952	66685	1	True				
ANR	67275	ParameterType	zval *		66685	0					
ANR	67276	Identifier	container		66685	1					
ANR	67277	Parameter	zval * dim	1282:86:39955:39963	66685	2	True				
ANR	67278	ParameterType	zval *		66685	0					
ANR	67279	Identifier	dim		66685	1					
ANR	67280	Parameter	int dim_type	1282:97:39966:39977	66685	3	True				
ANR	67281	ParameterType	int		66685	0					
ANR	67282	Identifier	dim_type		66685	1					
ANR	67283	Parameter	int type TSRMLS_DC	1282:111:39980:39997	66685	4	True				
ANR	67284	ParameterType	int type		66685	0					
ANR	67285	Identifier	TSRMLS_DC		66685	1					
ANR	67286	CFGEntryNode	ENTRY		66685		True				
ANR	67287	CFGExitNode	EXIT		66685		True				
ANR	67288	Symbol	container		66685						
ANR	67289	Symbol	dim_type		66685						
ANR	67290	Symbol	Z_OBJ_HT_P ( container ) -> read_dimension		66685						
ANR	67291	Symbol	dim		66685						
ANR	67292	Symbol	type		66685						
ANR	67293	Symbol	TSRMLS_DC		66685						
ANR	67294	Symbol	result -> var . ptr		66685						
ANR	67295	Symbol	& EG		66685						
ANR	67296	Symbol	* dim		66685						
ANR	67297	Symbol	result		66685						
ANR	67298	Symbol	E_WARNING		66685						
ANR	67299	Symbol	* retval		66685						
ANR	67300	Symbol	emalloc		66685						
ANR	67301	Symbol	overloaded_result		66685						
ANR	67302	Symbol	dim -> value . str		66685						
ANR	67303	Symbol	* result		66685						
ANR	67304	Symbol	tmp		66685						
ANR	67305	Symbol	IS_LONG		66685						
ANR	67306	Symbol	Z_STRLEN_P		66685						
ANR	67307	Symbol	IS_STRING		66685						
ANR	67308	Symbol	* Z_STRVAL_P		66685						
ANR	67309	Symbol	BP_VAR_IS		66685						
ANR	67310	Symbol	IS_TMP_VAR		66685						
ANR	67311	Symbol	uninitialized_zval		66685						
ANR	67312	Symbol	NULL		66685						
ANR	67313	Symbol	dim -> value . str . val		66685						
ANR	67314	Symbol	E_NOTICE		66685						
ANR	67315	Symbol	& dim		66685						
ANR	67316	Symbol	Z_TYPE_P		66685						
ANR	67317	Symbol	Z_STRVAL_P		66685						
ANR	67318	Symbol	* Z_OBJ_HT_P		66685						
ANR	67319	Symbol	retval		66685						
ANR	67320	Symbol	ptr		66685						
ANR	67321	Symbol	Z_LVAL_P		66685						
ANR	67322	Symbol	is_numeric_string		66685						
ANR	67323	Symbol	E_ERROR		66685						
ANR	67324	Symbol	result -> var		66685						
ANR	67325	Symbol	orig		66685						
ANR	67326	Symbol	STR_EMPTY_ALLOC		66685						
ANR	67327	Symbol	Z_OBJ_HT_P		66685						
ANR	67328	Symbol	dim -> value		66685						
ANR	67329	Symbol	& tmp		66685						
ANR	67330	Symbol	* Z_LVAL_P		66685						
ANR	67331	DeclStmt									
ANR	67332	Decl							temp_variable	temp_variable	tmp
ANR	67333	Function	zend_fetch_property_address	1394:0:42774:44679							
ANR	67334	FunctionDef	"zend_fetch_property_address (temp_variable * result , zval * * container_ptr , zval * prop_ptr , const zend_literal * key , int type TSRMLS_DC)"		67333	0					
ANR	67335	CompoundStatement		1395:0:42920:44679	67333	0					
ANR	67336	IdentifierDeclStatement	zval * container = * container_ptr ;	1396:1:42923:42955	67333	0	True				
ANR	67337	IdentifierDecl	* container = * container_ptr		67333	0					
ANR	67338	IdentifierDeclType	zval *		67333	0					
ANR	67339	Identifier	container		67333	1					
ANR	67340	AssignmentExpression	* container = * container_ptr		67333	2		=			
ANR	67341	Identifier	container		67333	0					
ANR	67342	UnaryOperationExpression	* container_ptr		67333	1					
ANR	67343	UnaryOperator	*		67333	0					
ANR	67344	Identifier	container_ptr		67333	1					
ANR	67345	IfStatement	if ( Z_TYPE_P ( container ) != IS_OBJECT )		67333	1					
ANR	67346	Condition	Z_TYPE_P ( container ) != IS_OBJECT	1398:5:42963:42994	67333	0	True				
ANR	67347	EqualityExpression	Z_TYPE_P ( container ) != IS_OBJECT		67333	0		!=			
ANR	67348	CallExpression	Z_TYPE_P ( container )		67333	0					
ANR	67349	Callee	Z_TYPE_P		67333	0					
ANR	67350	Identifier	Z_TYPE_P		67333	0					
ANR	67351	ArgumentList	container		67333	1					
ANR	67352	Argument	container		67333	0					
ANR	67353	Identifier	container		67333	0					
ANR	67354	Identifier	IS_OBJECT		67333	1					
ANR	67355	CompoundStatement		4:39:76:76	67333	1					
ANR	67356	IfStatement	if ( container == & EG ( error_zval ) )		67333	0					
ANR	67357	Condition	container == & EG ( error_zval )	1399:6:43005:43032	67333	0	True				
ANR	67358	EqualityExpression	container == & EG ( error_zval )		67333	0		==			
ANR	67359	Identifier	container		67333	0					
ANR	67360	UnaryOperationExpression	& EG ( error_zval )		67333	1					
ANR	67361	UnaryOperator	&		67333	0					
ANR	67362	CallExpression	EG ( error_zval )		67333	1					
ANR	67363	Callee	EG		67333	0					
ANR	67364	Identifier	EG		67333	0					
ANR	67365	ArgumentList	error_zval		67333	1					
ANR	67366	Argument	error_zval		67333	0					
ANR	67367	Identifier	error_zval		67333	0					
ANR	67368	CompoundStatement		5:36:114:114	67333	1					
ANR	67369	ExpressionStatement	result -> var . ptr_ptr = & EG ( error_zval_ptr )	1400:3:43040:43081	67333	0	True				
ANR	67370	AssignmentExpression	result -> var . ptr_ptr = & EG ( error_zval_ptr )		67333	0		=			
ANR	67371	MemberAccess	result -> var . ptr_ptr		67333	0					
ANR	67372	PtrMemberAccess	result -> var		67333	0					
ANR	67373	Identifier	result		67333	0					
ANR	67374	Identifier	var		67333	1					
ANR	67375	Identifier	ptr_ptr		67333	1					
ANR	67376	UnaryOperationExpression	& EG ( error_zval_ptr )		67333	1					
ANR	67377	UnaryOperator	&		67333	0					
ANR	67378	CallExpression	EG ( error_zval_ptr )		67333	1					
ANR	67379	Callee	EG		67333	0					
ANR	67380	Identifier	EG		67333	0					
ANR	67381	ArgumentList	error_zval_ptr		67333	1					
ANR	67382	Argument	error_zval_ptr		67333	0					
ANR	67383	Identifier	error_zval_ptr		67333	0					
ANR	67384	ExpressionStatement	PZVAL_LOCK ( EG ( error_zval_ptr ) )	1401:3:43086:43116	67333	1	True				
ANR	67385	CallExpression	PZVAL_LOCK ( EG ( error_zval_ptr ) )		67333	0					
ANR	67386	Callee	PZVAL_LOCK		67333	0					
ANR	67387	Identifier	PZVAL_LOCK		67333	0					
ANR	67388	ArgumentList	EG ( error_zval_ptr )		67333	1					
ANR	67389	Argument	EG ( error_zval_ptr )		67333	0					
ANR	67390	CallExpression	EG ( error_zval_ptr )		67333	0					
ANR	67391	Callee	EG		67333	0					
ANR	67392	Identifier	EG		67333	0					
ANR	67393	ArgumentList	error_zval_ptr		67333	1					
ANR	67394	Argument	error_zval_ptr		67333	0					
ANR	67395	Identifier	error_zval_ptr		67333	0					
ANR	67396	ReturnStatement	return ;	1402:3:43121:43127	67333	2	True				
ANR	67397	IfStatement	if ( type != BP_VAR_UNSET && ( ( Z_TYPE_P ( container ) == IS_NULL || ( Z_TYPE_P ( container ) == IS_BOOL && Z_LVAL_P ( container ) == 0 ) || ( Z_TYPE_P ( container ) == IS_STRING && Z_STRLEN_P ( container ) == 0 ) ) ) )		67333	1					
ANR	67398	Condition	type != BP_VAR_UNSET && ( ( Z_TYPE_P ( container ) == IS_NULL || ( Z_TYPE_P ( container ) == IS_BOOL && Z_LVAL_P ( container ) == 0 ) || ( Z_TYPE_P ( container ) == IS_STRING && Z_STRLEN_P ( container ) == 0 ) ) )	1406:6:43193:43398	67333	0	True				
ANR	67399	AndExpression	type != BP_VAR_UNSET && ( ( Z_TYPE_P ( container ) == IS_NULL || ( Z_TYPE_P ( container ) == IS_BOOL && Z_LVAL_P ( container ) == 0 ) || ( Z_TYPE_P ( container ) == IS_STRING && Z_STRLEN_P ( container ) == 0 ) ) )		67333	0		&&			
ANR	67400	EqualityExpression	type != BP_VAR_UNSET		67333	0		!=			
ANR	67401	Identifier	type		67333	0					
ANR	67402	Identifier	BP_VAR_UNSET		67333	1					
ANR	67403	OrExpression	Z_TYPE_P ( container ) == IS_NULL || ( Z_TYPE_P ( container ) == IS_BOOL && Z_LVAL_P ( container ) == 0 ) || ( Z_TYPE_P ( container ) == IS_STRING && Z_STRLEN_P ( container ) == 0 )		67333	1		||			
ANR	67404	EqualityExpression	Z_TYPE_P ( container ) == IS_NULL		67333	0		==			
ANR	67405	CallExpression	Z_TYPE_P ( container )		67333	0					
ANR	67406	Callee	Z_TYPE_P		67333	0					
ANR	67407	Identifier	Z_TYPE_P		67333	0					
ANR	67408	ArgumentList	container		67333	1					
ANR	67409	Argument	container		67333	0					
ANR	67410	Identifier	container		67333	0					
ANR	67411	Identifier	IS_NULL		67333	1					
ANR	67412	OrExpression	( Z_TYPE_P ( container ) == IS_BOOL && Z_LVAL_P ( container ) == 0 ) || ( Z_TYPE_P ( container ) == IS_STRING && Z_STRLEN_P ( container ) == 0 )		67333	1		||			
ANR	67413	AndExpression	Z_TYPE_P ( container ) == IS_BOOL && Z_LVAL_P ( container ) == 0		67333	0		&&			
ANR	67414	EqualityExpression	Z_TYPE_P ( container ) == IS_BOOL		67333	0		==			
ANR	67415	CallExpression	Z_TYPE_P ( container )		67333	0					
ANR	67416	Callee	Z_TYPE_P		67333	0					
ANR	67417	Identifier	Z_TYPE_P		67333	0					
ANR	67418	ArgumentList	container		67333	1					
ANR	67419	Argument	container		67333	0					
ANR	67420	Identifier	container		67333	0					
ANR	67421	Identifier	IS_BOOL		67333	1					
ANR	67422	EqualityExpression	Z_LVAL_P ( container ) == 0		67333	1		==			
ANR	67423	CallExpression	Z_LVAL_P ( container )		67333	0					
ANR	67424	Callee	Z_LVAL_P		67333	0					
ANR	67425	Identifier	Z_LVAL_P		67333	0					
ANR	67426	ArgumentList	container		67333	1					
ANR	67427	Argument	container		67333	0					
ANR	67428	Identifier	container		67333	0					
ANR	67429	PrimaryExpression	0		67333	1					
ANR	67430	AndExpression	Z_TYPE_P ( container ) == IS_STRING && Z_STRLEN_P ( container ) == 0		67333	1		&&			
ANR	67431	EqualityExpression	Z_TYPE_P ( container ) == IS_STRING		67333	0		==			
ANR	67432	CallExpression	Z_TYPE_P ( container )		67333	0					
ANR	67433	Callee	Z_TYPE_P		67333	0					
ANR	67434	Identifier	Z_TYPE_P		67333	0					
ANR	67435	ArgumentList	container		67333	1					
ANR	67436	Argument	container		67333	0					
ANR	67437	Identifier	container		67333	0					
ANR	67438	Identifier	IS_STRING		67333	1					
ANR	67439	EqualityExpression	Z_STRLEN_P ( container ) == 0		67333	1		==			
ANR	67440	CallExpression	Z_STRLEN_P ( container )		67333	0					
ANR	67441	Callee	Z_STRLEN_P		67333	0					
ANR	67442	Identifier	Z_STRLEN_P		67333	0					
ANR	67443	ArgumentList	container		67333	1					
ANR	67444	Argument	container		67333	0					
ANR	67445	Identifier	container		67333	0					
ANR	67446	PrimaryExpression	0		67333	1					
ANR	67447	CompoundStatement		15:73:480:480	67333	1					
ANR	67448	IfStatement	if ( ! PZVAL_IS_REF ( container ) )		67333	0					
ANR	67449	Condition	! PZVAL_IS_REF ( container )	1410:7:43410:43433	67333	0	True				
ANR	67450	UnaryOperationExpression	! PZVAL_IS_REF ( container )		67333	0					
ANR	67451	UnaryOperator	!		67333	0					
ANR	67452	CallExpression	PZVAL_IS_REF ( container )		67333	1					
ANR	67453	Callee	PZVAL_IS_REF		67333	0					
ANR	67454	Identifier	PZVAL_IS_REF		67333	0					
ANR	67455	ArgumentList	container		67333	1					
ANR	67456	Argument	container		67333	0					
ANR	67457	Identifier	container		67333	0					
ANR	67458	CompoundStatement		16:33:515:515	67333	1					
ANR	67459	ExpressionStatement	SEPARATE_ZVAL ( container_ptr )	1411:4:43442:43470	67333	0	True				
ANR	67460	CallExpression	SEPARATE_ZVAL ( container_ptr )		67333	0					
ANR	67461	Callee	SEPARATE_ZVAL		67333	0					
ANR	67462	Identifier	SEPARATE_ZVAL		67333	0					
ANR	67463	ArgumentList	container_ptr		67333	1					
ANR	67464	Argument	container_ptr		67333	0					
ANR	67465	Identifier	container_ptr		67333	0					
ANR	67466	ExpressionStatement	container = * container_ptr	1412:4:43476:43502	67333	1	True				
ANR	67467	AssignmentExpression	container = * container_ptr		67333	0		=			
ANR	67468	Identifier	container		67333	0					
ANR	67469	UnaryOperationExpression	* container_ptr		67333	1					
ANR	67470	UnaryOperator	*		67333	0					
ANR	67471	Identifier	container_ptr		67333	1					
ANR	67472	ExpressionStatement	object_init ( container )	1414:3:43512:43534	67333	1	True				
ANR	67473	CallExpression	object_init ( container )		67333	0					
ANR	67474	Callee	object_init		67333	0					
ANR	67475	Identifier	object_init		67333	0					
ANR	67476	ArgumentList	container		67333	1					
ANR	67477	Argument	container		67333	0					
ANR	67478	Identifier	container		67333	0					
ANR	67479	ElseStatement	else		67333	0					
ANR	67480	CompoundStatement		21:9:624:624	67333	0					
ANR	67481	ExpressionStatement	"zend_error ( E_WARNING , ""Attempt to modify property of non-object"" )"	1416:3:43550:43615	67333	0	True				
ANR	67482	CallExpression	"zend_error ( E_WARNING , ""Attempt to modify property of non-object"" )"		67333	0					
ANR	67483	Callee	zend_error		67333	0					
ANR	67484	Identifier	zend_error		67333	0					
ANR	67485	ArgumentList	E_WARNING		67333	1					
ANR	67486	Argument	E_WARNING		67333	0					
ANR	67487	Identifier	E_WARNING		67333	0					
ANR	67488	Argument	"""Attempt to modify property of non-object"""		67333	1					
ANR	67489	PrimaryExpression	"""Attempt to modify property of non-object"""		67333	0					
ANR	67490	ExpressionStatement	result -> var . ptr_ptr = & EG ( error_zval_ptr )	1417:3:43620:43661	67333	1	True				
ANR	67491	AssignmentExpression	result -> var . ptr_ptr = & EG ( error_zval_ptr )		67333	0		=			
ANR	67492	MemberAccess	result -> var . ptr_ptr		67333	0					
ANR	67493	PtrMemberAccess	result -> var		67333	0					
ANR	67494	Identifier	result		67333	0					
ANR	67495	Identifier	var		67333	1					
ANR	67496	Identifier	ptr_ptr		67333	1					
ANR	67497	UnaryOperationExpression	& EG ( error_zval_ptr )		67333	1					
ANR	67498	UnaryOperator	&		67333	0					
ANR	67499	CallExpression	EG ( error_zval_ptr )		67333	1					
ANR	67500	Callee	EG		67333	0					
ANR	67501	Identifier	EG		67333	0					
ANR	67502	ArgumentList	error_zval_ptr		67333	1					
ANR	67503	Argument	error_zval_ptr		67333	0					
ANR	67504	Identifier	error_zval_ptr		67333	0					
ANR	67505	ExpressionStatement	PZVAL_LOCK ( EG ( error_zval_ptr ) )	1418:3:43666:43696	67333	2	True				
ANR	67506	CallExpression	PZVAL_LOCK ( EG ( error_zval_ptr ) )		67333	0					
ANR	67507	Callee	PZVAL_LOCK		67333	0					
ANR	67508	Identifier	PZVAL_LOCK		67333	0					
ANR	67509	ArgumentList	EG ( error_zval_ptr )		67333	1					
ANR	67510	Argument	EG ( error_zval_ptr )		67333	0					
ANR	67511	CallExpression	EG ( error_zval_ptr )		67333	0					
ANR	67512	Callee	EG		67333	0					
ANR	67513	Identifier	EG		67333	0					
ANR	67514	ArgumentList	error_zval_ptr		67333	1					
ANR	67515	Argument	error_zval_ptr		67333	0					
ANR	67516	Identifier	error_zval_ptr		67333	0					
ANR	67517	ReturnStatement	return ;	1419:3:43701:43707	67333	3	True				
ANR	67518	ElseStatement	else		67333	0					
ANR	67519	IfStatement	if ( Z_OBJ_HT_P ( container ) -> read_property )		67333	0					
ANR	67520	Condition	Z_OBJ_HT_P ( container ) -> read_property	1439:12:44330:44365	67333	0	True				
ANR	67521	PtrMemberAccess	Z_OBJ_HT_P ( container ) -> read_property		67333	0					
ANR	67522	CallExpression	Z_OBJ_HT_P ( container )		67333	0					
ANR	67523	Callee	Z_OBJ_HT_P		67333	0					
ANR	67524	Identifier	Z_OBJ_HT_P		67333	0					
ANR	67525	ArgumentList	container		67333	1					
ANR	67526	Argument	container		67333	0					
ANR	67527	Identifier	container		67333	0					
ANR	67528	Identifier	read_property		67333	1					
ANR	67529	CompoundStatement		45:50:1447:1447	67333	1					
ANR	67530	Statement	zval	1440:2:44372:44375	67333	0	True				
ANR	67531	Statement	*	1440:7:44377:44377	67333	1	True				
ANR	67532	Statement	ptr	1440:8:44378:44380	67333	2	True				
ANR	67533	Statement	=	1440:12:44382:44382	67333	3	True				
ANR	67534	Statement	Z_OBJ_HT_P	1440:14:44384:44393	67333	4	True				
ANR	67535	Statement	(	1440:24:44394:44394	67333	5	True				
ANR	67536	Statement	container	1440:25:44395:44403	67333	6	True				
ANR	67537	Statement	)	1440:34:44404:44404	67333	7	True				
ANR	67538	Statement	->	1440:35:44405:44406	67333	8	True				
ANR	67539	Statement	read_property	1440:37:44407:44419	67333	9	True				
ANR	67540	Statement	(	1440:50:44420:44420	67333	10	True				
ANR	67541	Statement	container	1440:51:44421:44429	67333	11	True				
ANR	67542	Statement	","	1440:60:44430:44430	67333	12	True				
ANR	67543	Statement	prop_ptr	1440:62:44432:44439	67333	13	True				
ANR	67544	Statement	","	1440:70:44440:44440	67333	14	True				
ANR	67545	Statement	type	1440:72:44442:44445	67333	15	True				
ANR	67546	Statement	","	1440:76:44446:44446	67333	16	True				
ANR	67547	Statement	key	1440:78:44448:44450	67333	17	True				
ANR	67548	Statement	TSRMLS_CC	1440:82:44452:44460	67333	18	True				
ANR	67549	Statement	)	1440:91:44461:44461	67333	19	True				
ANR	67550	ExpressionStatement		1440:92:44462:44462	67333	20	True				
ANR	67551	ExpressionStatement	"AI_SET_PTR ( result , ptr )"	1442:2:44467:44490	67333	21	True				
ANR	67552	CallExpression	"AI_SET_PTR ( result , ptr )"		67333	0					
ANR	67553	Callee	AI_SET_PTR		67333	0					
ANR	67554	Identifier	AI_SET_PTR		67333	0					
ANR	67555	ArgumentList	result		67333	1					
ANR	67556	Argument	result		67333	0					
ANR	67557	Identifier	result		67333	0					
ANR	67558	Argument	ptr		67333	1					
ANR	67559	Identifier	ptr		67333	0					
ANR	67560	ExpressionStatement	PZVAL_LOCK ( ptr )	1443:2:44494:44509	67333	22	True				
ANR	67561	CallExpression	PZVAL_LOCK ( ptr )		67333	0					
ANR	67562	Callee	PZVAL_LOCK		67333	0					
ANR	67563	Identifier	PZVAL_LOCK		67333	0					
ANR	67564	ArgumentList	ptr		67333	1					
ANR	67565	Argument	ptr		67333	0					
ANR	67566	Identifier	ptr		67333	0					
ANR	67567	ElseStatement	else		67333	0					
ANR	67568	CompoundStatement		50:8:1598:1598	67333	0					
ANR	67569	ExpressionStatement	"zend_error ( E_WARNING , ""This object doesn't support property references"" )"	1445:2:44523:44595	67333	0	True				
ANR	67570	CallExpression	"zend_error ( E_WARNING , ""This object doesn't support property references"" )"		67333	0					
ANR	67571	Callee	zend_error		67333	0					
ANR	67572	Identifier	zend_error		67333	0					
ANR	67573	ArgumentList	E_WARNING		67333	1					
ANR	67574	Argument	E_WARNING		67333	0					
ANR	67575	Identifier	E_WARNING		67333	0					
ANR	67576	Argument	"""This object doesn't support property references"""		67333	1					
ANR	67577	PrimaryExpression	"""This object doesn't support property references"""		67333	0					
ANR	67578	ExpressionStatement	result -> var . ptr_ptr = & EG ( error_zval_ptr )	1446:2:44599:44640	67333	1	True				
ANR	67579	AssignmentExpression	result -> var . ptr_ptr = & EG ( error_zval_ptr )		67333	0		=			
ANR	67580	MemberAccess	result -> var . ptr_ptr		67333	0					
ANR	67581	PtrMemberAccess	result -> var		67333	0					
ANR	67582	Identifier	result		67333	0					
ANR	67583	Identifier	var		67333	1					
ANR	67584	Identifier	ptr_ptr		67333	1					
ANR	67585	UnaryOperationExpression	& EG ( error_zval_ptr )		67333	1					
ANR	67586	UnaryOperator	&		67333	0					
ANR	67587	CallExpression	EG ( error_zval_ptr )		67333	1					
ANR	67588	Callee	EG		67333	0					
ANR	67589	Identifier	EG		67333	0					
ANR	67590	ArgumentList	error_zval_ptr		67333	1					
ANR	67591	Argument	error_zval_ptr		67333	0					
ANR	67592	Identifier	error_zval_ptr		67333	0					
ANR	67593	ExpressionStatement	PZVAL_LOCK ( EG ( error_zval_ptr ) )	1447:2:44644:44674	67333	2	True				
ANR	67594	CallExpression	PZVAL_LOCK ( EG ( error_zval_ptr ) )		67333	0					
ANR	67595	Callee	PZVAL_LOCK		67333	0					
ANR	67596	Identifier	PZVAL_LOCK		67333	0					
ANR	67597	ArgumentList	EG ( error_zval_ptr )		67333	1					
ANR	67598	Argument	EG ( error_zval_ptr )		67333	0					
ANR	67599	CallExpression	EG ( error_zval_ptr )		67333	0					
ANR	67600	Callee	EG		67333	0					
ANR	67601	Identifier	EG		67333	0					
ANR	67602	ArgumentList	error_zval_ptr		67333	1					
ANR	67603	Argument	error_zval_ptr		67333	0					
ANR	67604	Identifier	error_zval_ptr		67333	0					
ANR	67605	IfStatement	if ( Z_OBJ_HT_P ( container ) -> get_property_ptr_ptr )		67333	2					
ANR	67606	Condition	Z_OBJ_HT_P ( container ) -> get_property_ptr_ptr	1423:5:43722:43764	67333	0	True				
ANR	67607	PtrMemberAccess	Z_OBJ_HT_P ( container ) -> get_property_ptr_ptr		67333	0					
ANR	67608	CallExpression	Z_OBJ_HT_P ( container )		67333	0					
ANR	67609	Callee	Z_OBJ_HT_P		67333	0					
ANR	67610	Identifier	Z_OBJ_HT_P		67333	0					
ANR	67611	ArgumentList	container		67333	1					
ANR	67612	Argument	container		67333	0					
ANR	67613	Identifier	container		67333	0					
ANR	67614	Identifier	get_property_ptr_ptr		67333	1					
ANR	67615	CompoundStatement		29:50:846:846	67333	1					
ANR	67616	Statement	zval	1424:2:43771:43774	67333	0	True				
ANR	67617	Statement	*	1424:7:43776:43776	67333	1	True				
ANR	67618	Statement	*	1424:8:43777:43777	67333	2	True				
ANR	67619	Statement	ptr_ptr	1424:9:43778:43784	67333	3	True				
ANR	67620	Statement	=	1424:17:43786:43786	67333	4	True				
ANR	67621	Statement	Z_OBJ_HT_P	1424:19:43788:43797	67333	5	True				
ANR	67622	Statement	(	1424:29:43798:43798	67333	6	True				
ANR	67623	Statement	container	1424:30:43799:43807	67333	7	True				
ANR	67624	Statement	)	1424:39:43808:43808	67333	8	True				
ANR	67625	Statement	->	1424:40:43809:43810	67333	9	True				
ANR	67626	Statement	get_property_ptr_ptr	1424:42:43811:43830	67333	10	True				
ANR	67627	Statement	(	1424:62:43831:43831	67333	11	True				
ANR	67628	Statement	container	1424:63:43832:43840	67333	12	True				
ANR	67629	Statement	","	1424:72:43841:43841	67333	13	True				
ANR	67630	Statement	prop_ptr	1424:74:43843:43850	67333	14	True				
ANR	67631	Statement	","	1424:82:43851:43851	67333	15	True				
ANR	67632	Statement	type	1424:84:43853:43856	67333	16	True				
ANR	67633	Statement	","	1424:88:43857:43857	67333	17	True				
ANR	67634	Statement	key	1424:90:43859:43861	67333	18	True				
ANR	67635	Statement	TSRMLS_CC	1424:94:43863:43871	67333	19	True				
ANR	67636	Statement	)	1424:103:43872:43872	67333	20	True				
ANR	67637	ExpressionStatement		1424:104:43873:43873	67333	21	True				
ANR	67638	IfStatement	if ( NULL == ptr_ptr )		67333	22					
ANR	67639	Condition	NULL == ptr_ptr	1425:6:43881:43895	67333	0	True				
ANR	67640	EqualityExpression	NULL == ptr_ptr		67333	0		==			
ANR	67641	Identifier	NULL		67333	0					
ANR	67642	Identifier	ptr_ptr		67333	1					
ANR	67643	CompoundStatement		32:3:982:991	67333	1					
ANR	67644	IdentifierDeclStatement	zval * ptr ;	1426:3:43903:43912	67333	0	True				
ANR	67645	IdentifierDecl	* ptr		67333	0					
ANR	67646	IdentifierDeclType	zval *		67333	0					
ANR	67647	Identifier	ptr		67333	1					
ANR	67648	Statement	if	1428:3:43918:43919	67333	1	True				
ANR	67649	Statement	(	1428:6:43921:43921	67333	2	True				
ANR	67650	Statement	Z_OBJ_HT_P	1428:7:43922:43931	67333	3	True				
ANR	67651	Statement	(	1428:17:43932:43932	67333	4	True				
ANR	67652	Statement	container	1428:18:43933:43941	67333	5	True				
ANR	67653	Statement	)	1428:27:43942:43942	67333	6	True				
ANR	67654	Statement	->	1428:28:43943:43944	67333	7	True				
ANR	67655	Statement	read_property	1428:30:43945:43957	67333	8	True				
ANR	67656	Statement	&&	1428:44:43959:43960	67333	9	True				
ANR	67657	Statement	(	1429:4:43966:43966	67333	10	True				
ANR	67658	Statement	ptr	1429:5:43967:43969	67333	11	True				
ANR	67659	Statement	=	1429:9:43971:43971	67333	12	True				
ANR	67660	Statement	Z_OBJ_HT_P	1429:11:43973:43982	67333	13	True				
ANR	67661	Statement	(	1429:21:43983:43983	67333	14	True				
ANR	67662	Statement	container	1429:22:43984:43992	67333	15	True				
ANR	67663	Statement	)	1429:31:43993:43993	67333	16	True				
ANR	67664	Statement	->	1429:32:43994:43995	67333	17	True				
ANR	67665	Statement	read_property	1429:34:43996:44008	67333	18	True				
ANR	67666	Statement	(	1429:47:44009:44009	67333	19	True				
ANR	67667	Statement	container	1429:48:44010:44018	67333	20	True				
ANR	67668	Statement	","	1429:57:44019:44019	67333	21	True				
ANR	67669	Statement	prop_ptr	1429:59:44021:44028	67333	22	True				
ANR	67670	Statement	","	1429:67:44029:44029	67333	23	True				
ANR	67671	Statement	type	1429:69:44031:44034	67333	24	True				
ANR	67672	Statement	","	1429:73:44035:44035	67333	25	True				
ANR	67673	Statement	key	1429:75:44037:44039	67333	26	True				
ANR	67674	Statement	TSRMLS_CC	1429:79:44041:44049	67333	27	True				
ANR	67675	Statement	)	1429:88:44050:44050	67333	28	True				
ANR	67676	Statement	)	1429:89:44051:44051	67333	29	True				
ANR	67677	Statement	!=	1429:91:44053:44054	67333	30	True				
ANR	67678	Statement	NULL	1429:94:44056:44059	67333	31	True				
ANR	67679	Statement	)	1429:98:44060:44060	67333	32	True				
ANR	67680	CompoundStatement		35:100:1141:1141	67333	33					
ANR	67681	ExpressionStatement	"AI_SET_PTR ( result , ptr )"	1430:4:44068:44091	67333	0	True				
ANR	67682	CallExpression	"AI_SET_PTR ( result , ptr )"		67333	0					
ANR	67683	Callee	AI_SET_PTR		67333	0					
ANR	67684	Identifier	AI_SET_PTR		67333	0					
ANR	67685	ArgumentList	result		67333	1					
ANR	67686	Argument	result		67333	0					
ANR	67687	Identifier	result		67333	0					
ANR	67688	Argument	ptr		67333	1					
ANR	67689	Identifier	ptr		67333	0					
ANR	67690	ExpressionStatement	PZVAL_LOCK ( ptr )	1431:4:44097:44112	67333	1	True				
ANR	67691	CallExpression	PZVAL_LOCK ( ptr )		67333	0					
ANR	67692	Callee	PZVAL_LOCK		67333	0					
ANR	67693	Identifier	PZVAL_LOCK		67333	0					
ANR	67694	ArgumentList	ptr		67333	1					
ANR	67695	Argument	ptr		67333	0					
ANR	67696	Identifier	ptr		67333	0					
ANR	67697	ElseStatement	else		67333	0					
ANR	67698	CompoundStatement		38:10:1203:1203	67333	0					
ANR	67699	ExpressionStatement	"zend_error_noreturn ( E_ERROR , ""Cannot access undefined property for object with overloaded property access"" )"	1433:4:44130:44237	67333	0	True				
ANR	67700	CallExpression	"zend_error_noreturn ( E_ERROR , ""Cannot access undefined property for object with overloaded property access"" )"		67333	0					
ANR	67701	Callee	zend_error_noreturn		67333	0					
ANR	67702	Identifier	zend_error_noreturn		67333	0					
ANR	67703	ArgumentList	E_ERROR		67333	1					
ANR	67704	Argument	E_ERROR		67333	0					
ANR	67705	Identifier	E_ERROR		67333	0					
ANR	67706	Argument	"""Cannot access undefined property for object with overloaded property access"""		67333	1					
ANR	67707	PrimaryExpression	"""Cannot access undefined property for object with overloaded property access"""		67333	0					
ANR	67708	ElseStatement	else		67333	0					
ANR	67709	CompoundStatement		41:9:1332:1332	67333	0					
ANR	67710	ExpressionStatement	result -> var . ptr_ptr = ptr_ptr	1436:3:44258:44287	67333	0	True				
ANR	67711	AssignmentExpression	result -> var . ptr_ptr = ptr_ptr		67333	0		=			
ANR	67712	MemberAccess	result -> var . ptr_ptr		67333	0					
ANR	67713	PtrMemberAccess	result -> var		67333	0					
ANR	67714	Identifier	result		67333	0					
ANR	67715	Identifier	var		67333	1					
ANR	67716	Identifier	ptr_ptr		67333	1					
ANR	67717	Identifier	ptr_ptr		67333	1					
ANR	67718	ExpressionStatement	PZVAL_LOCK ( * ptr_ptr )	1437:3:44292:44312	67333	1	True				
ANR	67719	CallExpression	PZVAL_LOCK ( * ptr_ptr )		67333	0					
ANR	67720	Callee	PZVAL_LOCK		67333	0					
ANR	67721	Identifier	PZVAL_LOCK		67333	0					
ANR	67722	ArgumentList	* ptr_ptr		67333	1					
ANR	67723	Argument	* ptr_ptr		67333	0					
ANR	67724	UnaryOperationExpression	* ptr_ptr		67333	0					
ANR	67725	UnaryOperator	*		67333	0					
ANR	67726	Identifier	ptr_ptr		67333	1					
ANR	67727	ReturnType	static void		67333	1					
ANR	67728	Identifier	zend_fetch_property_address		67333	2					
ANR	67729	ParameterList	"temp_variable * result , zval * * container_ptr , zval * prop_ptr , const zend_literal * key , int type TSRMLS_DC"		67333	3					
ANR	67730	Parameter	temp_variable * result	1394:40:42814:42834	67333	0	True				
ANR	67731	ParameterType	temp_variable *		67333	0					
ANR	67732	Identifier	result		67333	1					
ANR	67733	Parameter	zval * * container_ptr	1394:63:42837:42856	67333	1	True				
ANR	67734	ParameterType	zval * *		67333	0					
ANR	67735	Identifier	container_ptr		67333	1					
ANR	67736	Parameter	zval * prop_ptr	1394:85:42859:42872	67333	2	True				
ANR	67737	ParameterType	zval *		67333	0					
ANR	67738	Identifier	prop_ptr		67333	1					
ANR	67739	Parameter	const zend_literal * key	1394:101:42875:42897	67333	3	True				
ANR	67740	ParameterType	const zend_literal *		67333	0					
ANR	67741	Identifier	key		67333	1					
ANR	67742	Parameter	int type TSRMLS_DC	1394:126:42900:42917	67333	4	True				
ANR	67743	ParameterType	int type		67333	0					
ANR	67744	Identifier	TSRMLS_DC		67333	1					
ANR	67745	CFGEntryNode	ENTRY		67333		True				
ANR	67746	CFGExitNode	EXIT		67333		True				
ANR	67747	Symbol	container		67333						
ANR	67748	Symbol	* container_ptr		67333						
ANR	67749	Symbol	ptr_ptr		67333						
ANR	67750	Symbol	type		67333						
ANR	67751	Symbol	TSRMLS_DC		67333						
ANR	67752	Symbol	& EG		67333						
ANR	67753	Symbol	result		67333						
ANR	67754	Symbol	E_WARNING		67333						
ANR	67755	Symbol	Z_OBJ_HT_P ( container ) -> read_property		67333						
ANR	67756	Symbol	IS_NULL		67333						
ANR	67757	Symbol	* result		67333						
ANR	67758	Symbol	* ptr_ptr		67333						
ANR	67759	Symbol	prop_ptr		67333						
ANR	67760	Symbol	Z_STRLEN_P		67333						
ANR	67761	Symbol	IS_STRING		67333						
ANR	67762	Symbol	key		67333						
ANR	67763	Symbol	EG		67333						
ANR	67764	Symbol	NULL		67333						
ANR	67765	Symbol	error_zval_ptr		67333						
ANR	67766	Symbol	PZVAL_IS_REF		67333						
ANR	67767	Symbol	Z_TYPE_P		67333						
ANR	67768	Symbol	* Z_OBJ_HT_P		67333						
ANR	67769	Symbol	result -> var . ptr_ptr		67333						
ANR	67770	Symbol	Z_LVAL_P		67333						
ANR	67771	Symbol	ptr		67333						
ANR	67772	Symbol	Z_OBJ_HT_P ( container ) -> get_property_ptr_ptr		67333						
ANR	67773	Symbol	container_ptr		67333						
ANR	67774	Symbol	E_ERROR		67333						
ANR	67775	Symbol	result -> var		67333						
ANR	67776	Symbol	error_zval		67333						
ANR	67777	Symbol	Z_OBJ_HT_P		67333						
ANR	67778	Symbol	IS_OBJECT		67333						
ANR	67779	Symbol	IS_BOOL		67333						
ANR	67780	Symbol	BP_VAR_UNSET		67333						
ANR	67781	DeclStmt									
ANR	67782	Decl							int	int	original_nest_levels
ANR	67783	DeclStmt									
ANR	67784	Decl							zend_brk_cont_element	zend_brk_cont_element *	jmp_to
ANR	67785	DeclStmt									
ANR	67786	Decl							zend_op	zend_op *	brk_opline
ANR	67787	DeclStmt									
ANR	67788	Decl							ZEND_API opcode_handler_t	ZEND_API opcode_handler_t *	zend_opcode_handlers
ANR	67789	Function	execute_internal	1516:0:46636:47338							
ANR	67790	FunctionDef	"execute_internal (zend_execute_data * execute_data_ptr , zend_fcall_info * fci , int return_value_used TSRMLS_DC)"		67789	0					
ANR	67791	CompoundStatement		1517:0:46759:47338	67789	0					
ANR	67792	IfStatement	if ( fci != NULL )		67789	0					
ANR	67793	Condition	fci != NULL	1518:5:46766:46776	67789	0	True				
ANR	67794	EqualityExpression	fci != NULL		67789	0		!=			
ANR	67795	Identifier	fci		67789	0					
ANR	67796	Identifier	NULL		67789	1					
ANR	67797	CompoundStatement		2:18:19:19	67789	1					
ANR	67798	Statement	execute_data_ptr	1519:2:46783:46798	67789	0	True				
ANR	67799	Statement	->	1519:18:46799:46800	67789	1	True				
ANR	67800	Statement	function_state	1519:20:46801:46814	67789	2	True				
ANR	67801	Statement	.	1519:34:46815:46815	67789	3	True				
ANR	67802	Statement	function	1519:35:46816:46823	67789	4	True				
ANR	67803	Statement	->	1519:43:46824:46825	67789	5	True				
ANR	67804	Statement	internal_function	1519:45:46826:46842	67789	6	True				
ANR	67805	Statement	.	1519:62:46843:46843	67789	7	True				
ANR	67806	Statement	handler	1519:63:46844:46850	67789	8	True				
ANR	67807	Statement	(	1519:70:46851:46851	67789	9	True				
ANR	67808	Statement	fci	1520:3:46856:46858	67789	10	True				
ANR	67809	Statement	->	1520:6:46859:46860	67789	11	True				
ANR	67810	Statement	param_count	1520:8:46861:46871	67789	12	True				
ANR	67811	Statement	","	1520:19:46872:46872	67789	13	True				
ANR	67812	Statement	*	1520:21:46874:46874	67789	14	True				
ANR	67813	Statement	fci	1520:22:46875:46877	67789	15	True				
ANR	67814	Statement	->	1520:25:46878:46879	67789	16	True				
ANR	67815	Statement	retval_ptr_ptr	1520:27:46880:46893	67789	17	True				
ANR	67816	Statement	","	1520:41:46894:46894	67789	18	True				
ANR	67817	Statement	fci	1520:43:46896:46898	67789	19	True				
ANR	67818	Statement	->	1520:46:46899:46900	67789	20	True				
ANR	67819	Statement	retval_ptr_ptr	1520:48:46901:46914	67789	21	True				
ANR	67820	Statement	","	1520:62:46915:46915	67789	22	True				
ANR	67821	Statement	fci	1521:3:46920:46922	67789	23	True				
ANR	67822	Statement	->	1521:6:46923:46924	67789	24	True				
ANR	67823	Statement	object_ptr	1521:8:46925:46934	67789	25	True				
ANR	67824	Statement	","	1521:18:46935:46935	67789	26	True				
ANR	67825	Statement	1	1521:20:46937:46937	67789	27	True				
ANR	67826	Statement	TSRMLS_CC	1521:22:46939:46947	67789	28	True				
ANR	67827	Statement	)	1522:2:46951:46951	67789	29	True				
ANR	67828	ExpressionStatement		1522:3:46952:46952	67789	30	True				
ANR	67829	ElseStatement	else		67789	0					
ANR	67830	CompoundStatement		8:2:206:308	67789	0					
ANR	67831	IdentifierDeclStatement	"zval * * return_value_ptr = & EX_TMP_VAR ( execute_data_ptr , execute_data_ptr -> opline -> result . var ) -> var . ptr ;"	1524:2:46966:47068	67789	0	True				
ANR	67832	IdentifierDecl	"* * return_value_ptr = & EX_TMP_VAR ( execute_data_ptr , execute_data_ptr -> opline -> result . var ) -> var . ptr"		67789	0					
ANR	67833	IdentifierDeclType	zval * *		67789	0					
ANR	67834	Identifier	return_value_ptr		67789	1					
ANR	67835	AssignmentExpression	"* * return_value_ptr = & EX_TMP_VAR ( execute_data_ptr , execute_data_ptr -> opline -> result . var ) -> var . ptr"		67789	2		=			
ANR	67836	Identifier	return_value_ptr		67789	0					
ANR	67837	UnaryOperationExpression	"& EX_TMP_VAR ( execute_data_ptr , execute_data_ptr -> opline -> result . var ) -> var . ptr"		67789	1					
ANR	67838	UnaryOperator	&		67789	0					
ANR	67839	MemberAccess	"EX_TMP_VAR ( execute_data_ptr , execute_data_ptr -> opline -> result . var ) -> var . ptr"		67789	1					
ANR	67840	PtrMemberAccess	"EX_TMP_VAR ( execute_data_ptr , execute_data_ptr -> opline -> result . var ) -> var"		67789	0					
ANR	67841	CallExpression	"EX_TMP_VAR ( execute_data_ptr , execute_data_ptr -> opline -> result . var )"		67789	0					
ANR	67842	Callee	EX_TMP_VAR		67789	0					
ANR	67843	Identifier	EX_TMP_VAR		67789	0					
ANR	67844	ArgumentList	execute_data_ptr		67789	1					
ANR	67845	Argument	execute_data_ptr		67789	0					
ANR	67846	Identifier	execute_data_ptr		67789	0					
ANR	67847	Argument	execute_data_ptr -> opline -> result . var		67789	1					
ANR	67848	MemberAccess	execute_data_ptr -> opline -> result . var		67789	0					
ANR	67849	PtrMemberAccess	execute_data_ptr -> opline -> result		67789	0					
ANR	67850	PtrMemberAccess	execute_data_ptr -> opline		67789	0					
ANR	67851	Identifier	execute_data_ptr		67789	0					
ANR	67852	Identifier	opline		67789	1					
ANR	67853	Identifier	result		67789	1					
ANR	67854	Identifier	var		67789	1					
ANR	67855	Identifier	var		67789	1					
ANR	67856	Identifier	ptr		67789	1					
ANR	67857	Statement	execute_data_ptr	1525:2:47072:47087	67789	1	True				
ANR	67858	Statement	->	1525:18:47088:47089	67789	2	True				
ANR	67859	Statement	function_state	1525:20:47090:47103	67789	3	True				
ANR	67860	Statement	.	1525:34:47104:47104	67789	4	True				
ANR	67861	Statement	function	1525:35:47105:47112	67789	5	True				
ANR	67862	Statement	->	1525:43:47113:47114	67789	6	True				
ANR	67863	Statement	internal_function	1525:45:47115:47131	67789	7	True				
ANR	67864	Statement	.	1525:62:47132:47132	67789	8	True				
ANR	67865	Statement	handler	1525:63:47133:47139	67789	9	True				
ANR	67866	Statement	(	1525:70:47140:47140	67789	10	True				
ANR	67867	Statement	execute_data_ptr	1526:3:47145:47160	67789	11	True				
ANR	67868	Statement	->	1526:19:47161:47162	67789	12	True				
ANR	67869	Statement	opline	1526:21:47163:47168	67789	13	True				
ANR	67870	Statement	->	1526:27:47169:47170	67789	14	True				
ANR	67871	Statement	extended_value	1526:29:47171:47184	67789	15	True				
ANR	67872	Statement	+	1526:44:47186:47186	67789	16	True				
ANR	67873	Statement	execute_data_ptr	1526:46:47188:47203	67789	17	True				
ANR	67874	Statement	->	1526:62:47204:47205	67789	18	True				
ANR	67875	Statement	call	1526:64:47206:47209	67789	19	True				
ANR	67876	Statement	->	1526:68:47210:47211	67789	20	True				
ANR	67877	Statement	num_additional_args	1526:70:47212:47230	67789	21	True				
ANR	67878	Statement	","	1526:89:47231:47231	67789	22	True				
ANR	67879	Statement	*	1527:3:47236:47236	67789	23	True				
ANR	67880	Statement	return_value_ptr	1527:4:47237:47252	67789	24	True				
ANR	67881	Statement	","	1527:20:47253:47253	67789	25	True				
ANR	67882	Statement	return_value_ptr	1527:22:47255:47270	67789	26	True				
ANR	67883	Statement	","	1527:38:47271:47271	67789	27	True				
ANR	67884	Statement	execute_data_ptr	1528:3:47276:47291	67789	28	True				
ANR	67885	Statement	->	1528:19:47292:47293	67789	29	True				
ANR	67886	Statement	object	1528:21:47294:47299	67789	30	True				
ANR	67887	Statement	","	1528:27:47300:47300	67789	31	True				
ANR	67888	Statement	return_value_used	1528:29:47302:47318	67789	32	True				
ANR	67889	Statement	TSRMLS_CC	1528:47:47320:47328	67789	33	True				
ANR	67890	Statement	)	1529:2:47332:47332	67789	34	True				
ANR	67891	ExpressionStatement		1529:3:47333:47333	67789	35	True				
ANR	67892	ReturnType	ZEND_API void		67789	1					
ANR	67893	Identifier	execute_internal		67789	2					
ANR	67894	ParameterList	"zend_execute_data * execute_data_ptr , zend_fcall_info * fci , int return_value_used TSRMLS_DC"		67789	3					
ANR	67895	Parameter	zend_execute_data * execute_data_ptr	1516:31:46667:46701	67789	0	True				
ANR	67896	ParameterType	zend_execute_data *		67789	0					
ANR	67897	Identifier	execute_data_ptr		67789	1					
ANR	67898	Parameter	zend_fcall_info * fci	1516:68:46704:46723	67789	1	True				
ANR	67899	ParameterType	zend_fcall_info *		67789	0					
ANR	67900	Identifier	fci		67789	1					
ANR	67901	Parameter	int return_value_used TSRMLS_DC	1516:90:46726:46756	67789	2	True				
ANR	67902	ParameterType	int return_value_used		67789	0					
ANR	67903	Identifier	TSRMLS_DC		67789	1					
ANR	67904	CFGEntryNode	ENTRY		67789		True				
ANR	67905	CFGExitNode	EXIT		67789		True				
ANR	67906	Symbol	* * execute_data_ptr		67789						
ANR	67907	Symbol	NULL		67789						
ANR	67908	Symbol	* EX_TMP_VAR		67789						
ANR	67909	Symbol	* execute_data_ptr -> opline		67789						
ANR	67910	Symbol	execute_data_ptr		67789						
ANR	67911	Symbol	* execute_data_ptr		67789						
ANR	67912	Symbol	fci		67789						
ANR	67913	Symbol	TSRMLS_DC		67789						
ANR	67914	Symbol	execute_data_ptr -> opline -> result		67789						
ANR	67915	Symbol	"EX_TMP_VAR ( execute_data_ptr , execute_data_ptr -> opline -> result . var ) -> var"		67789						
ANR	67916	Symbol	execute_data_ptr -> opline		67789						
ANR	67917	Symbol	EX_TMP_VAR		67789						
ANR	67918	Symbol	return_value_ptr		67789						
ANR	67919	Symbol	"& EX_TMP_VAR ( execute_data_ptr , execute_data_ptr -> opline -> result . var ) -> var"		67789						
ANR	67920	Symbol	"& EX_TMP_VAR ( execute_data_ptr , execute_data_ptr -> opline -> result . var ) -> var . ptr"		67789						
ANR	67921	Symbol	execute_data_ptr -> opline -> result . var		67789						
ANR	67922	DeclStmt									
ANR	67923	Decl							zval	zval * * *	cv
ANR	67924	DeclStmt									
ANR	67925	Decl							zval	zval * * *	end
ANR	67926	Function	i_create_execute_data_from_op_array	1608:0:51063:56142							
ANR	67927	FunctionDef	"i_create_execute_data_from_op_array (zend_op_array * op_array , zend_bool nested TSRMLS_DC)"		67926	0					
ANR	67928	CompoundStatement		1609:0:51207:56142	67926	0					
ANR	67929	IdentifierDeclStatement	zend_execute_data * execute_data ;	1610:1:51210:51241	67926	0	True				
ANR	67930	IdentifierDecl	* execute_data		67926	0					
ANR	67931	IdentifierDeclType	zend_execute_data *		67926	0					
ANR	67932	Identifier	execute_data		67926	1					
ANR	67933	IdentifierDeclStatement	size_t execute_data_size = ZEND_MM_ALIGNED_SIZE ( sizeof ( zend_execute_data ) ) ;	1623:1:51912:51986	67926	1	True				
ANR	67934	IdentifierDecl	execute_data_size = ZEND_MM_ALIGNED_SIZE ( sizeof ( zend_execute_data ) )		67926	0					
ANR	67935	IdentifierDeclType	size_t		67926	0					
ANR	67936	Identifier	execute_data_size		67926	1					
ANR	67937	AssignmentExpression	execute_data_size = ZEND_MM_ALIGNED_SIZE ( sizeof ( zend_execute_data ) )		67926	2		=			
ANR	67938	Identifier	execute_data_size		67926	0					
ANR	67939	CallExpression	ZEND_MM_ALIGNED_SIZE ( sizeof ( zend_execute_data ) )		67926	1					
ANR	67940	Callee	ZEND_MM_ALIGNED_SIZE		67926	0					
ANR	67941	Identifier	ZEND_MM_ALIGNED_SIZE		67926	0					
ANR	67942	ArgumentList	sizeof ( zend_execute_data )		67926	1					
ANR	67943	Argument	sizeof ( zend_execute_data )		67926	0					
ANR	67944	SizeofExpression	sizeof ( zend_execute_data )		67926	0					
ANR	67945	Sizeof	sizeof		67926	0					
ANR	67946	SizeofOperand	zend_execute_data		67926	1					
ANR	67947	IdentifierDeclStatement	size_t CVs_size = ZEND_MM_ALIGNED_SIZE ( sizeof ( zval * * ) * op_array -> last_var * ( EG ( active_symbol_table ) ? 1 : 2 ) ) ;	1624:1:51989:52101	67926	2	True				
ANR	67948	IdentifierDecl	CVs_size = ZEND_MM_ALIGNED_SIZE ( sizeof ( zval * * ) * op_array -> last_var * ( EG ( active_symbol_table ) ? 1 : 2 ) )		67926	0					
ANR	67949	IdentifierDeclType	size_t		67926	0					
ANR	67950	Identifier	CVs_size		67926	1					
ANR	67951	AssignmentExpression	CVs_size = ZEND_MM_ALIGNED_SIZE ( sizeof ( zval * * ) * op_array -> last_var * ( EG ( active_symbol_table ) ? 1 : 2 ) )		67926	2		=			
ANR	67952	Identifier	CVs_size		67926	0					
ANR	67953	CallExpression	ZEND_MM_ALIGNED_SIZE ( sizeof ( zval * * ) * op_array -> last_var * ( EG ( active_symbol_table ) ? 1 : 2 ) )		67926	1					
ANR	67954	Callee	ZEND_MM_ALIGNED_SIZE		67926	0					
ANR	67955	Identifier	ZEND_MM_ALIGNED_SIZE		67926	0					
ANR	67956	ArgumentList	sizeof ( zval * * ) * op_array -> last_var * ( EG ( active_symbol_table ) ? 1 : 2 )		67926	1					
ANR	67957	Argument	sizeof ( zval * * ) * op_array -> last_var * ( EG ( active_symbol_table ) ? 1 : 2 )		67926	0					
ANR	67958	MultiplicativeExpression	sizeof ( zval * * ) * op_array -> last_var * ( EG ( active_symbol_table ) ? 1 : 2 )		67926	0		*			
ANR	67959	SizeofExpression	sizeof ( zval * * )		67926	0					
ANR	67960	Sizeof	sizeof		67926	0					
ANR	67961	SizeofOperand	zval * *		67926	1					
ANR	67962	MultiplicativeExpression	op_array -> last_var * ( EG ( active_symbol_table ) ? 1 : 2 )		67926	1		*			
ANR	67963	PtrMemberAccess	op_array -> last_var		67926	0					
ANR	67964	Identifier	op_array		67926	0					
ANR	67965	Identifier	last_var		67926	1					
ANR	67966	ConditionalExpression	EG ( active_symbol_table ) ? 1 : 2		67926	1					
ANR	67967	Condition	EG ( active_symbol_table )		67926	0					
ANR	67968	CallExpression	EG ( active_symbol_table )		67926	0					
ANR	67969	Callee	EG		67926	0					
ANR	67970	Identifier	EG		67926	0					
ANR	67971	ArgumentList	active_symbol_table		67926	1					
ANR	67972	Argument	active_symbol_table		67926	0					
ANR	67973	Identifier	active_symbol_table		67926	0					
ANR	67974	PrimaryExpression	1		67926	1					
ANR	67975	PrimaryExpression	2		67926	2					
ANR	67976	IdentifierDeclStatement	size_t Ts_size = ZEND_MM_ALIGNED_SIZE ( sizeof ( temp_variable ) ) * op_array -> T ;	1625:1:52104:52178	67926	3	True				
ANR	67977	IdentifierDecl	Ts_size = ZEND_MM_ALIGNED_SIZE ( sizeof ( temp_variable ) ) * op_array -> T		67926	0					
ANR	67978	IdentifierDeclType	size_t		67926	0					
ANR	67979	Identifier	Ts_size		67926	1					
ANR	67980	AssignmentExpression	Ts_size = ZEND_MM_ALIGNED_SIZE ( sizeof ( temp_variable ) ) * op_array -> T		67926	2		=			
ANR	67981	Identifier	Ts_size		67926	0					
ANR	67982	MultiplicativeExpression	ZEND_MM_ALIGNED_SIZE ( sizeof ( temp_variable ) ) * op_array -> T		67926	1		*			
ANR	67983	CallExpression	ZEND_MM_ALIGNED_SIZE ( sizeof ( temp_variable ) )		67926	0					
ANR	67984	Callee	ZEND_MM_ALIGNED_SIZE		67926	0					
ANR	67985	Identifier	ZEND_MM_ALIGNED_SIZE		67926	0					
ANR	67986	ArgumentList	sizeof ( temp_variable )		67926	1					
ANR	67987	Argument	sizeof ( temp_variable )		67926	0					
ANR	67988	SizeofExpression	sizeof ( temp_variable )		67926	0					
ANR	67989	Sizeof	sizeof		67926	0					
ANR	67990	SizeofOperand	temp_variable		67926	1					
ANR	67991	PtrMemberAccess	op_array -> T		67926	1					
ANR	67992	Identifier	op_array		67926	0					
ANR	67993	Identifier	T		67926	1					
ANR	67994	IdentifierDeclStatement	size_t call_slots_size = ZEND_MM_ALIGNED_SIZE ( sizeof ( call_slot ) ) * op_array -> nested_calls ;	1626:1:52181:52270	67926	4	True				
ANR	67995	IdentifierDecl	call_slots_size = ZEND_MM_ALIGNED_SIZE ( sizeof ( call_slot ) ) * op_array -> nested_calls		67926	0					
ANR	67996	IdentifierDeclType	size_t		67926	0					
ANR	67997	Identifier	call_slots_size		67926	1					
ANR	67998	AssignmentExpression	call_slots_size = ZEND_MM_ALIGNED_SIZE ( sizeof ( call_slot ) ) * op_array -> nested_calls		67926	2		=			
ANR	67999	Identifier	call_slots_size		67926	0					
ANR	68000	MultiplicativeExpression	ZEND_MM_ALIGNED_SIZE ( sizeof ( call_slot ) ) * op_array -> nested_calls		67926	1		*			
ANR	68001	CallExpression	ZEND_MM_ALIGNED_SIZE ( sizeof ( call_slot ) )		67926	0					
ANR	68002	Callee	ZEND_MM_ALIGNED_SIZE		67926	0					
ANR	68003	Identifier	ZEND_MM_ALIGNED_SIZE		67926	0					
ANR	68004	ArgumentList	sizeof ( call_slot )		67926	1					
ANR	68005	Argument	sizeof ( call_slot )		67926	0					
ANR	68006	SizeofExpression	sizeof ( call_slot )		67926	0					
ANR	68007	Sizeof	sizeof		67926	0					
ANR	68008	SizeofOperand	call_slot		67926	1					
ANR	68009	PtrMemberAccess	op_array -> nested_calls		67926	1					
ANR	68010	Identifier	op_array		67926	0					
ANR	68011	Identifier	nested_calls		67926	1					
ANR	68012	IdentifierDeclStatement	size_t stack_size = ZEND_MM_ALIGNED_SIZE ( sizeof ( zval * ) ) * op_array -> used_stack ;	1627:1:52273:52351	67926	5	True				
ANR	68013	IdentifierDecl	stack_size = ZEND_MM_ALIGNED_SIZE ( sizeof ( zval * ) ) * op_array -> used_stack		67926	0					
ANR	68014	IdentifierDeclType	size_t		67926	0					
ANR	68015	Identifier	stack_size		67926	1					
ANR	68016	AssignmentExpression	stack_size = ZEND_MM_ALIGNED_SIZE ( sizeof ( zval * ) ) * op_array -> used_stack		67926	2		=			
ANR	68017	Identifier	stack_size		67926	0					
ANR	68018	MultiplicativeExpression	ZEND_MM_ALIGNED_SIZE ( sizeof ( zval * ) ) * op_array -> used_stack		67926	1		*			
ANR	68019	CallExpression	ZEND_MM_ALIGNED_SIZE ( sizeof ( zval * ) )		67926	0					
ANR	68020	Callee	ZEND_MM_ALIGNED_SIZE		67926	0					
ANR	68021	Identifier	ZEND_MM_ALIGNED_SIZE		67926	0					
ANR	68022	ArgumentList	sizeof ( zval * )		67926	1					
ANR	68023	Argument	sizeof ( zval * )		67926	0					
ANR	68024	SizeofExpression	sizeof ( zval * )		67926	0					
ANR	68025	Sizeof	sizeof		67926	0					
ANR	68026	SizeofOperand	zval *		67926	1					
ANR	68027	PtrMemberAccess	op_array -> used_stack		67926	1					
ANR	68028	Identifier	op_array		67926	0					
ANR	68029	Identifier	used_stack		67926	1					
ANR	68030	IdentifierDeclStatement	size_t total_size = execute_data_size + Ts_size + CVs_size + call_slots_size + stack_size ;	1628:1:52354:52443	67926	6	True				
ANR	68031	IdentifierDecl	total_size = execute_data_size + Ts_size + CVs_size + call_slots_size + stack_size		67926	0					
ANR	68032	IdentifierDeclType	size_t		67926	0					
ANR	68033	Identifier	total_size		67926	1					
ANR	68034	AssignmentExpression	total_size = execute_data_size + Ts_size + CVs_size + call_slots_size + stack_size		67926	2		=			
ANR	68035	Identifier	total_size		67926	0					
ANR	68036	AdditiveExpression	execute_data_size + Ts_size + CVs_size + call_slots_size + stack_size		67926	1		+			
ANR	68037	Identifier	execute_data_size		67926	0					
ANR	68038	AdditiveExpression	Ts_size + CVs_size + call_slots_size + stack_size		67926	1		+			
ANR	68039	Identifier	Ts_size		67926	0					
ANR	68040	AdditiveExpression	CVs_size + call_slots_size + stack_size		67926	1		+			
ANR	68041	Identifier	CVs_size		67926	0					
ANR	68042	AdditiveExpression	call_slots_size + stack_size		67926	1		+			
ANR	68043	Identifier	call_slots_size		67926	0					
ANR	68044	Identifier	stack_size		67926	1					
ANR	68045	IfStatement	if ( UNEXPECTED ( ( op_array -> fn_flags & ZEND_ACC_GENERATOR ) != 0 ) )		67926	7					
ANR	68046	Condition	UNEXPECTED ( ( op_array -> fn_flags & ZEND_ACC_GENERATOR ) != 0 )	1640:5:53034:53091	67926	0	True				
ANR	68047	CallExpression	UNEXPECTED ( ( op_array -> fn_flags & ZEND_ACC_GENERATOR ) != 0 )		67926	0					
ANR	68048	Callee	UNEXPECTED		67926	0					
ANR	68049	Identifier	UNEXPECTED		67926	0					
ANR	68050	ArgumentList	( op_array -> fn_flags & ZEND_ACC_GENERATOR ) != 0		67926	1					
ANR	68051	Argument	( op_array -> fn_flags & ZEND_ACC_GENERATOR ) != 0		67926	0					
ANR	68052	EqualityExpression	( op_array -> fn_flags & ZEND_ACC_GENERATOR ) != 0		67926	0		!=			
ANR	68053	BitAndExpression	op_array -> fn_flags & ZEND_ACC_GENERATOR		67926	0		&			
ANR	68054	PtrMemberAccess	op_array -> fn_flags		67926	0					
ANR	68055	Identifier	op_array		67926	0					
ANR	68056	Identifier	fn_flags		67926	1					
ANR	68057	Identifier	ZEND_ACC_GENERATOR		67926	1					
ANR	68058	PrimaryExpression	0		67926	1					
ANR	68059	CompoundStatement		37:2:2074:2147	67926	1					
ANR	68060	IdentifierDeclStatement	int args_count = zend_vm_stack_get_args_count_ex ( EG ( current_execute_data ) ) ;	1644:2:53204:53278	67926	0	True				
ANR	68061	IdentifierDecl	args_count = zend_vm_stack_get_args_count_ex ( EG ( current_execute_data ) )		67926	0					
ANR	68062	IdentifierDeclType	int		67926	0					
ANR	68063	Identifier	args_count		67926	1					
ANR	68064	AssignmentExpression	args_count = zend_vm_stack_get_args_count_ex ( EG ( current_execute_data ) )		67926	2		=			
ANR	68065	Identifier	args_count		67926	0					
ANR	68066	CallExpression	zend_vm_stack_get_args_count_ex ( EG ( current_execute_data ) )		67926	1					
ANR	68067	Callee	zend_vm_stack_get_args_count_ex		67926	0					
ANR	68068	Identifier	zend_vm_stack_get_args_count_ex		67926	0					
ANR	68069	ArgumentList	EG ( current_execute_data )		67926	1					
ANR	68070	Argument	EG ( current_execute_data )		67926	0					
ANR	68071	CallExpression	EG ( current_execute_data )		67926	0					
ANR	68072	Callee	EG		67926	0					
ANR	68073	Identifier	EG		67926	0					
ANR	68074	ArgumentList	current_execute_data		67926	1					
ANR	68075	Argument	current_execute_data		67926	0					
ANR	68076	Identifier	current_execute_data		67926	0					
ANR	68077	IdentifierDeclStatement	size_t args_size = ZEND_MM_ALIGNED_SIZE ( sizeof ( zval * ) ) * ( args_count + 1 ) ;	1645:2:53282:53355	67926	1	True				
ANR	68078	IdentifierDecl	args_size = ZEND_MM_ALIGNED_SIZE ( sizeof ( zval * ) ) * ( args_count + 1 )		67926	0					
ANR	68079	IdentifierDeclType	size_t		67926	0					
ANR	68080	Identifier	args_size		67926	1					
ANR	68081	AssignmentExpression	args_size = ZEND_MM_ALIGNED_SIZE ( sizeof ( zval * ) ) * ( args_count + 1 )		67926	2		=			
ANR	68082	Identifier	args_size		67926	0					
ANR	68083	MultiplicativeExpression	ZEND_MM_ALIGNED_SIZE ( sizeof ( zval * ) ) * ( args_count + 1 )		67926	1		*			
ANR	68084	CallExpression	ZEND_MM_ALIGNED_SIZE ( sizeof ( zval * ) )		67926	0					
ANR	68085	Callee	ZEND_MM_ALIGNED_SIZE		67926	0					
ANR	68086	Identifier	ZEND_MM_ALIGNED_SIZE		67926	0					
ANR	68087	ArgumentList	sizeof ( zval * )		67926	1					
ANR	68088	Argument	sizeof ( zval * )		67926	0					
ANR	68089	SizeofExpression	sizeof ( zval * )		67926	0					
ANR	68090	Sizeof	sizeof		67926	0					
ANR	68091	SizeofOperand	zval *		67926	1					
ANR	68092	AdditiveExpression	args_count + 1		67926	1		+			
ANR	68093	Identifier	args_count		67926	0					
ANR	68094	PrimaryExpression	1		67926	1					
ANR	68095	ExpressionStatement	total_size += args_size + execute_data_size	1647:2:53360:53403	67926	2	True				
ANR	68096	AssignmentExpression	total_size += args_size + execute_data_size		67926	0		+=			
ANR	68097	Identifier	total_size		67926	0					
ANR	68098	AdditiveExpression	args_size + execute_data_size		67926	1		+			
ANR	68099	Identifier	args_size		67926	0					
ANR	68100	Identifier	execute_data_size		67926	1					
ANR	68101	ExpressionStatement	EG ( argument_stack ) = zend_vm_stack_new_page ( ( total_size + ( sizeof ( void * ) - 1 ) ) / sizeof ( void * ) )	1649:2:53408:53503	67926	3	True				
ANR	68102	AssignmentExpression	EG ( argument_stack ) = zend_vm_stack_new_page ( ( total_size + ( sizeof ( void * ) - 1 ) ) / sizeof ( void * ) )		67926	0		=			
ANR	68103	CallExpression	EG ( argument_stack )		67926	0					
ANR	68104	Callee	EG		67926	0					
ANR	68105	Identifier	EG		67926	0					
ANR	68106	ArgumentList	argument_stack		67926	1					
ANR	68107	Argument	argument_stack		67926	0					
ANR	68108	Identifier	argument_stack		67926	0					
ANR	68109	CallExpression	zend_vm_stack_new_page ( ( total_size + ( sizeof ( void * ) - 1 ) ) / sizeof ( void * ) )		67926	1					
ANR	68110	Callee	zend_vm_stack_new_page		67926	0					
ANR	68111	Identifier	zend_vm_stack_new_page		67926	0					
ANR	68112	ArgumentList	( total_size + ( sizeof ( void * ) - 1 ) ) / sizeof ( void * )		67926	1					
ANR	68113	Argument	( total_size + ( sizeof ( void * ) - 1 ) ) / sizeof ( void * )		67926	0					
ANR	68114	MultiplicativeExpression	( total_size + ( sizeof ( void * ) - 1 ) ) / sizeof ( void * )		67926	0		/			
ANR	68115	AdditiveExpression	total_size + ( sizeof ( void * ) - 1 )		67926	0		+			
ANR	68116	Identifier	total_size		67926	0					
ANR	68117	AdditiveExpression	sizeof ( void * ) - 1		67926	1		-			
ANR	68118	SizeofExpression	sizeof ( void * )		67926	0					
ANR	68119	Sizeof	sizeof		67926	0					
ANR	68120	SizeofOperand	void *		67926	1					
ANR	68121	PrimaryExpression	1		67926	1					
ANR	68122	SizeofExpression	sizeof ( void * )		67926	1					
ANR	68123	Sizeof	sizeof		67926	0					
ANR	68124	SizeofOperand	void *		67926	1					
ANR	68125	ExpressionStatement	EG ( argument_stack ) -> prev = NULL	1650:2:53507:53538	67926	4	True				
ANR	68126	AssignmentExpression	EG ( argument_stack ) -> prev = NULL		67926	0		=			
ANR	68127	PtrMemberAccess	EG ( argument_stack ) -> prev		67926	0					
ANR	68128	CallExpression	EG ( argument_stack )		67926	0					
ANR	68129	Callee	EG		67926	0					
ANR	68130	Identifier	EG		67926	0					
ANR	68131	ArgumentList	argument_stack		67926	1					
ANR	68132	Argument	argument_stack		67926	0					
ANR	68133	Identifier	argument_stack		67926	0					
ANR	68134	Identifier	prev		67926	1					
ANR	68135	Identifier	NULL		67926	1					
ANR	68136	ExpressionStatement	execute_data = ( zend_execute_data * ) ( ( char * ) ZEND_VM_STACK_ELEMETS ( EG ( argument_stack ) ) + args_size + execute_data_size + Ts_size )	1651:2:53542:53669	67926	5	True				
ANR	68137	AssignmentExpression	execute_data = ( zend_execute_data * ) ( ( char * ) ZEND_VM_STACK_ELEMETS ( EG ( argument_stack ) ) + args_size + execute_data_size + Ts_size )		67926	0		=			
ANR	68138	Identifier	execute_data		67926	0					
ANR	68139	CastExpression	( zend_execute_data * ) ( ( char * ) ZEND_VM_STACK_ELEMETS ( EG ( argument_stack ) ) + args_size + execute_data_size + Ts_size )		67926	1					
ANR	68140	CastTarget	zend_execute_data *		67926	0					
ANR	68141	AdditiveExpression	( char * ) ZEND_VM_STACK_ELEMETS ( EG ( argument_stack ) ) + args_size + execute_data_size + Ts_size		67926	1		+			
ANR	68142	CastExpression	( char * ) ZEND_VM_STACK_ELEMETS ( EG ( argument_stack ) )		67926	0					
ANR	68143	CastTarget	char *		67926	0					
ANR	68144	CallExpression	ZEND_VM_STACK_ELEMETS ( EG ( argument_stack ) )		67926	1					
ANR	68145	Callee	ZEND_VM_STACK_ELEMETS		67926	0					
ANR	68146	Identifier	ZEND_VM_STACK_ELEMETS		67926	0					
ANR	68147	ArgumentList	EG ( argument_stack )		67926	1					
ANR	68148	Argument	EG ( argument_stack )		67926	0					
ANR	68149	CallExpression	EG ( argument_stack )		67926	0					
ANR	68150	Callee	EG		67926	0					
ANR	68151	Identifier	EG		67926	0					
ANR	68152	ArgumentList	argument_stack		67926	1					
ANR	68153	Argument	argument_stack		67926	0					
ANR	68154	Identifier	argument_stack		67926	0					
ANR	68155	AdditiveExpression	args_size + execute_data_size + Ts_size		67926	1		+			
ANR	68156	Identifier	args_size		67926	0					
ANR	68157	AdditiveExpression	execute_data_size + Ts_size		67926	1		+			
ANR	68158	Identifier	execute_data_size		67926	0					
ANR	68159	Identifier	Ts_size		67926	1					
ANR	68160	ExpressionStatement	EX ( prev_execute_data ) = ( zend_execute_data * ) ( ( char * ) ZEND_VM_STACK_ELEMETS ( EG ( argument_stack ) ) + args_size )	1654:2:53705:53811	67926	6	True				
ANR	68161	AssignmentExpression	EX ( prev_execute_data ) = ( zend_execute_data * ) ( ( char * ) ZEND_VM_STACK_ELEMETS ( EG ( argument_stack ) ) + args_size )		67926	0		=			
ANR	68162	CallExpression	EX ( prev_execute_data )		67926	0					
ANR	68163	Callee	EX		67926	0					
ANR	68164	Identifier	EX		67926	0					
ANR	68165	ArgumentList	prev_execute_data		67926	1					
ANR	68166	Argument	prev_execute_data		67926	0					
ANR	68167	Identifier	prev_execute_data		67926	0					
ANR	68168	CastExpression	( zend_execute_data * ) ( ( char * ) ZEND_VM_STACK_ELEMETS ( EG ( argument_stack ) ) + args_size )		67926	1					
ANR	68169	CastTarget	zend_execute_data *		67926	0					
ANR	68170	AdditiveExpression	( char * ) ZEND_VM_STACK_ELEMETS ( EG ( argument_stack ) ) + args_size		67926	1		+			
ANR	68171	CastExpression	( char * ) ZEND_VM_STACK_ELEMETS ( EG ( argument_stack ) )		67926	0					
ANR	68172	CastTarget	char *		67926	0					
ANR	68173	CallExpression	ZEND_VM_STACK_ELEMETS ( EG ( argument_stack ) )		67926	1					
ANR	68174	Callee	ZEND_VM_STACK_ELEMETS		67926	0					
ANR	68175	Identifier	ZEND_VM_STACK_ELEMETS		67926	0					
ANR	68176	ArgumentList	EG ( argument_stack )		67926	1					
ANR	68177	Argument	EG ( argument_stack )		67926	0					
ANR	68178	CallExpression	EG ( argument_stack )		67926	0					
ANR	68179	Callee	EG		67926	0					
ANR	68180	Identifier	EG		67926	0					
ANR	68181	ArgumentList	argument_stack		67926	1					
ANR	68182	Argument	argument_stack		67926	0					
ANR	68183	Identifier	argument_stack		67926	0					
ANR	68184	Identifier	args_size		67926	1					
ANR	68185	ExpressionStatement	"memset ( EX ( prev_execute_data ) , 0 , sizeof ( zend_execute_data ) )"	1655:2:53815:53874	67926	7	True				
ANR	68186	CallExpression	"memset ( EX ( prev_execute_data ) , 0 , sizeof ( zend_execute_data ) )"		67926	0					
ANR	68187	Callee	memset		67926	0					
ANR	68188	Identifier	memset		67926	0					
ANR	68189	ArgumentList	EX ( prev_execute_data )		67926	1					
ANR	68190	Argument	EX ( prev_execute_data )		67926	0					
ANR	68191	CallExpression	EX ( prev_execute_data )		67926	0					
ANR	68192	Callee	EX		67926	0					
ANR	68193	Identifier	EX		67926	0					
ANR	68194	ArgumentList	prev_execute_data		67926	1					
ANR	68195	Argument	prev_execute_data		67926	0					
ANR	68196	Identifier	prev_execute_data		67926	0					
ANR	68197	Argument	0		67926	1					
ANR	68198	PrimaryExpression	0		67926	0					
ANR	68199	Argument	sizeof ( zend_execute_data )		67926	2					
ANR	68200	SizeofExpression	sizeof ( zend_execute_data )		67926	0					
ANR	68201	Sizeof	sizeof		67926	0					
ANR	68202	SizeofOperand	zend_execute_data		67926	1					
ANR	68203	ExpressionStatement	EX ( prev_execute_data ) -> function_state . function = ( zend_function * ) op_array	1656:2:53878:53951	67926	8	True				
ANR	68204	AssignmentExpression	EX ( prev_execute_data ) -> function_state . function = ( zend_function * ) op_array		67926	0		=			
ANR	68205	MemberAccess	EX ( prev_execute_data ) -> function_state . function		67926	0					
ANR	68206	PtrMemberAccess	EX ( prev_execute_data ) -> function_state		67926	0					
ANR	68207	CallExpression	EX ( prev_execute_data )		67926	0					
ANR	68208	Callee	EX		67926	0					
ANR	68209	Identifier	EX		67926	0					
ANR	68210	ArgumentList	prev_execute_data		67926	1					
ANR	68211	Argument	prev_execute_data		67926	0					
ANR	68212	Identifier	prev_execute_data		67926	0					
ANR	68213	Identifier	function_state		67926	1					
ANR	68214	Identifier	function		67926	1					
ANR	68215	CastExpression	( zend_function * ) op_array		67926	1					
ANR	68216	CastTarget	zend_function *		67926	0					
ANR	68217	Identifier	op_array		67926	1					
ANR	68218	ExpressionStatement	EX ( prev_execute_data ) -> function_state . arguments = ( void * * ) ( ( char * ) ZEND_VM_STACK_ELEMETS ( EG ( argument_stack ) ) + ZEND_MM_ALIGNED_SIZE ( sizeof ( zval * ) ) * args_count )	1657:2:53955:54114	67926	9	True				
ANR	68219	AssignmentExpression	EX ( prev_execute_data ) -> function_state . arguments = ( void * * ) ( ( char * ) ZEND_VM_STACK_ELEMETS ( EG ( argument_stack ) ) + ZEND_MM_ALIGNED_SIZE ( sizeof ( zval * ) ) * args_count )		67926	0		=			
ANR	68220	MemberAccess	EX ( prev_execute_data ) -> function_state . arguments		67926	0					
ANR	68221	PtrMemberAccess	EX ( prev_execute_data ) -> function_state		67926	0					
ANR	68222	CallExpression	EX ( prev_execute_data )		67926	0					
ANR	68223	Callee	EX		67926	0					
ANR	68224	Identifier	EX		67926	0					
ANR	68225	ArgumentList	prev_execute_data		67926	1					
ANR	68226	Argument	prev_execute_data		67926	0					
ANR	68227	Identifier	prev_execute_data		67926	0					
ANR	68228	Identifier	function_state		67926	1					
ANR	68229	Identifier	arguments		67926	1					
ANR	68230	CastExpression	( void * * ) ( ( char * ) ZEND_VM_STACK_ELEMETS ( EG ( argument_stack ) ) + ZEND_MM_ALIGNED_SIZE ( sizeof ( zval * ) ) * args_count )		67926	1					
ANR	68231	CastTarget	void * *		67926	0					
ANR	68232	AdditiveExpression	( char * ) ZEND_VM_STACK_ELEMETS ( EG ( argument_stack ) ) + ZEND_MM_ALIGNED_SIZE ( sizeof ( zval * ) ) * args_count		67926	1		+			
ANR	68233	CastExpression	( char * ) ZEND_VM_STACK_ELEMETS ( EG ( argument_stack ) )		67926	0					
ANR	68234	CastTarget	char *		67926	0					
ANR	68235	CallExpression	ZEND_VM_STACK_ELEMETS ( EG ( argument_stack ) )		67926	1					
ANR	68236	Callee	ZEND_VM_STACK_ELEMETS		67926	0					
ANR	68237	Identifier	ZEND_VM_STACK_ELEMETS		67926	0					
ANR	68238	ArgumentList	EG ( argument_stack )		67926	1					
ANR	68239	Argument	EG ( argument_stack )		67926	0					
ANR	68240	CallExpression	EG ( argument_stack )		67926	0					
ANR	68241	Callee	EG		67926	0					
ANR	68242	Identifier	EG		67926	0					
ANR	68243	ArgumentList	argument_stack		67926	1					
ANR	68244	Argument	argument_stack		67926	0					
ANR	68245	Identifier	argument_stack		67926	0					
ANR	68246	MultiplicativeExpression	ZEND_MM_ALIGNED_SIZE ( sizeof ( zval * ) ) * args_count		67926	1		*			
ANR	68247	CallExpression	ZEND_MM_ALIGNED_SIZE ( sizeof ( zval * ) )		67926	0					
ANR	68248	Callee	ZEND_MM_ALIGNED_SIZE		67926	0					
ANR	68249	Identifier	ZEND_MM_ALIGNED_SIZE		67926	0					
ANR	68250	ArgumentList	sizeof ( zval * )		67926	1					
ANR	68251	Argument	sizeof ( zval * )		67926	0					
ANR	68252	SizeofExpression	sizeof ( zval * )		67926	0					
ANR	68253	Sizeof	sizeof		67926	0					
ANR	68254	SizeofOperand	zval *		67926	1					
ANR	68255	Identifier	args_count		67926	1					
ANR	68256	ExpressionStatement	* EX ( prev_execute_data ) -> function_state . arguments = ( void * ) ( zend_uintptr_t ) args_count	1660:2:54142:54226	67926	10	True				
ANR	68257	AssignmentExpression	* EX ( prev_execute_data ) -> function_state . arguments = ( void * ) ( zend_uintptr_t ) args_count		67926	0		=			
ANR	68258	UnaryOperationExpression	* EX ( prev_execute_data ) -> function_state . arguments		67926	0					
ANR	68259	UnaryOperator	*		67926	0					
ANR	68260	MemberAccess	EX ( prev_execute_data ) -> function_state . arguments		67926	1					
ANR	68261	PtrMemberAccess	EX ( prev_execute_data ) -> function_state		67926	0					
ANR	68262	CallExpression	EX ( prev_execute_data )		67926	0					
ANR	68263	Callee	EX		67926	0					
ANR	68264	Identifier	EX		67926	0					
ANR	68265	ArgumentList	prev_execute_data		67926	1					
ANR	68266	Argument	prev_execute_data		67926	0					
ANR	68267	Identifier	prev_execute_data		67926	0					
ANR	68268	Identifier	function_state		67926	1					
ANR	68269	Identifier	arguments		67926	1					
ANR	68270	CastExpression	( void * ) ( zend_uintptr_t ) args_count		67926	1					
ANR	68271	CastTarget	void *		67926	0					
ANR	68272	CastExpression	( zend_uintptr_t ) args_count		67926	1					
ANR	68273	CastTarget	zend_uintptr_t		67926	0					
ANR	68274	Identifier	args_count		67926	1					
ANR	68275	IfStatement	if ( args_count > 0 )		67926	11					
ANR	68276	Condition	args_count > 0	1661:6:54234:54247	67926	0	True				
ANR	68277	RelationalExpression	args_count > 0		67926	0		>			
ANR	68278	Identifier	args_count		67926	0					
ANR	68279	PrimaryExpression	0		67926	1					
ANR	68280	CompoundStatement		56:3:3210:3215	67926	1					
ANR	68281	IdentifierDeclStatement	"zval * * arg_src = ( zval * * ) zend_vm_stack_get_arg_ex ( EG ( current_execute_data ) , 1 ) ;"	1662:3:54255:54333	67926	0	True				
ANR	68282	IdentifierDecl	"* * arg_src = ( zval * * ) zend_vm_stack_get_arg_ex ( EG ( current_execute_data ) , 1 )"		67926	0					
ANR	68283	IdentifierDeclType	zval * *		67926	0					
ANR	68284	Identifier	arg_src		67926	1					
ANR	68285	AssignmentExpression	"* * arg_src = ( zval * * ) zend_vm_stack_get_arg_ex ( EG ( current_execute_data ) , 1 )"		67926	2		=			
ANR	68286	Identifier	arg_src		67926	0					
ANR	68287	CastExpression	"( zval * * ) zend_vm_stack_get_arg_ex ( EG ( current_execute_data ) , 1 )"		67926	1					
ANR	68288	CastTarget	zval * *		67926	0					
ANR	68289	CallExpression	"zend_vm_stack_get_arg_ex ( EG ( current_execute_data ) , 1 )"		67926	1					
ANR	68290	Callee	zend_vm_stack_get_arg_ex		67926	0					
ANR	68291	Identifier	zend_vm_stack_get_arg_ex		67926	0					
ANR	68292	ArgumentList	EG ( current_execute_data )		67926	1					
ANR	68293	Argument	EG ( current_execute_data )		67926	0					
ANR	68294	CallExpression	EG ( current_execute_data )		67926	0					
ANR	68295	Callee	EG		67926	0					
ANR	68296	Identifier	EG		67926	0					
ANR	68297	ArgumentList	current_execute_data		67926	1					
ANR	68298	Argument	current_execute_data		67926	0					
ANR	68299	Identifier	current_execute_data		67926	0					
ANR	68300	Argument	1		67926	1					
ANR	68301	PrimaryExpression	1		67926	0					
ANR	68302	IdentifierDeclStatement	"zval * * arg_dst = ( zval * * ) zend_vm_stack_get_arg_ex ( EX ( prev_execute_data ) , 1 ) ;"	1663:3:54338:54413	67926	1	True				
ANR	68303	IdentifierDecl	"* * arg_dst = ( zval * * ) zend_vm_stack_get_arg_ex ( EX ( prev_execute_data ) , 1 )"		67926	0					
ANR	68304	IdentifierDeclType	zval * *		67926	0					
ANR	68305	Identifier	arg_dst		67926	1					
ANR	68306	AssignmentExpression	"* * arg_dst = ( zval * * ) zend_vm_stack_get_arg_ex ( EX ( prev_execute_data ) , 1 )"		67926	2		=			
ANR	68307	Identifier	arg_dst		67926	0					
ANR	68308	CastExpression	"( zval * * ) zend_vm_stack_get_arg_ex ( EX ( prev_execute_data ) , 1 )"		67926	1					
ANR	68309	CastTarget	zval * *		67926	0					
ANR	68310	CallExpression	"zend_vm_stack_get_arg_ex ( EX ( prev_execute_data ) , 1 )"		67926	1					
ANR	68311	Callee	zend_vm_stack_get_arg_ex		67926	0					
ANR	68312	Identifier	zend_vm_stack_get_arg_ex		67926	0					
ANR	68313	ArgumentList	EX ( prev_execute_data )		67926	1					
ANR	68314	Argument	EX ( prev_execute_data )		67926	0					
ANR	68315	CallExpression	EX ( prev_execute_data )		67926	0					
ANR	68316	Callee	EX		67926	0					
ANR	68317	Identifier	EX		67926	0					
ANR	68318	ArgumentList	prev_execute_data		67926	1					
ANR	68319	Argument	prev_execute_data		67926	0					
ANR	68320	Identifier	prev_execute_data		67926	0					
ANR	68321	Argument	1		67926	1					
ANR	68322	PrimaryExpression	1		67926	0					
ANR	68323	IdentifierDeclStatement	int i ;	1664:3:54418:54423	67926	2	True				
ANR	68324	IdentifierDecl	i		67926	0					
ANR	68325	IdentifierDeclType	int		67926	0					
ANR	68326	Identifier	i		67926	1					
ANR	68327	ForStatement	for ( i = 0 ; i < args_count ; i ++ )		67926	3					
ANR	68328	ForInit	i = 0 ;	1666:8:54434:54439	67926	0	True				
ANR	68329	AssignmentExpression	i = 0		67926	0		=			
ANR	68330	Identifier	i		67926	0					
ANR	68331	PrimaryExpression	0		67926	1					
ANR	68332	Condition	i < args_count	1666:15:54441:54454	67926	1	True				
ANR	68333	RelationalExpression	i < args_count		67926	0		<			
ANR	68334	Identifier	i		67926	0					
ANR	68335	Identifier	args_count		67926	1					
ANR	68336	PostIncDecOperationExpression	i ++	1666:31:54457:54459	67926	2	True				
ANR	68337	Identifier	i		67926	0					
ANR	68338	IncDec	++		67926	1					
ANR	68339	CompoundStatement		58:36:3254:3254	67926	3					
ANR	68340	ExpressionStatement	arg_dst [ i ] = arg_src [ i ]	1667:4:54468:54491	67926	0	True				
ANR	68341	AssignmentExpression	arg_dst [ i ] = arg_src [ i ]		67926	0		=			
ANR	68342	ArrayIndexing	arg_dst [ i ]		67926	0					
ANR	68343	Identifier	arg_dst		67926	0					
ANR	68344	Identifier	i		67926	1					
ANR	68345	ArrayIndexing	arg_src [ i ]		67926	1					
ANR	68346	Identifier	arg_src		67926	0					
ANR	68347	Identifier	i		67926	1					
ANR	68348	ExpressionStatement	Z_ADDREF_P ( arg_dst [ i ] )	1668:4:54497:54519	67926	1	True				
ANR	68349	CallExpression	Z_ADDREF_P ( arg_dst [ i ] )		67926	0					
ANR	68350	Callee	Z_ADDREF_P		67926	0					
ANR	68351	Identifier	Z_ADDREF_P		67926	0					
ANR	68352	ArgumentList	arg_dst [ i ]		67926	1					
ANR	68353	Argument	arg_dst [ i ]		67926	0					
ANR	68354	ArrayIndexing	arg_dst [ i ]		67926	0					
ANR	68355	Identifier	arg_dst		67926	0					
ANR	68356	Identifier	i		67926	1					
ANR	68357	ElseStatement	else		67926	0					
ANR	68358	CompoundStatement		63:8:3330:3330	67926	0					
ANR	68359	Statement	execute_data	1672:2:54542:54553	67926	0	True				
ANR	68360	Statement	=	1672:15:54555:54555	67926	1	True				
ANR	68361	Statement	zend_vm_stack_alloc	1672:17:54557:54575	67926	2	True				
ANR	68362	Statement	(	1672:36:54576:54576	67926	3	True				
ANR	68363	Statement	total_size	1672:37:54577:54586	67926	4	True				
ANR	68364	Statement	TSRMLS_CC	1672:48:54588:54596	67926	5	True				
ANR	68365	Statement	)	1672:57:54597:54597	67926	6	True				
ANR	68366	ExpressionStatement		1672:58:54598:54598	67926	7	True				
ANR	68367	ExpressionStatement	execute_data = ( zend_execute_data * ) ( ( char * ) execute_data + Ts_size )	1673:2:54602:54668	67926	8	True				
ANR	68368	AssignmentExpression	execute_data = ( zend_execute_data * ) ( ( char * ) execute_data + Ts_size )		67926	0		=			
ANR	68369	Identifier	execute_data		67926	0					
ANR	68370	CastExpression	( zend_execute_data * ) ( ( char * ) execute_data + Ts_size )		67926	1					
ANR	68371	CastTarget	zend_execute_data *		67926	0					
ANR	68372	AdditiveExpression	( char * ) execute_data + Ts_size		67926	1		+			
ANR	68373	CastExpression	( char * ) execute_data		67926	0					
ANR	68374	CastTarget	char *		67926	0					
ANR	68375	Identifier	execute_data		67926	1					
ANR	68376	Identifier	Ts_size		67926	1					
ANR	68377	ExpressionStatement	EX ( prev_execute_data ) = EG ( current_execute_data )	1674:2:54672:54720	67926	9	True				
ANR	68378	AssignmentExpression	EX ( prev_execute_data ) = EG ( current_execute_data )		67926	0		=			
ANR	68379	CallExpression	EX ( prev_execute_data )		67926	0					
ANR	68380	Callee	EX		67926	0					
ANR	68381	Identifier	EX		67926	0					
ANR	68382	ArgumentList	prev_execute_data		67926	1					
ANR	68383	Argument	prev_execute_data		67926	0					
ANR	68384	Identifier	prev_execute_data		67926	0					
ANR	68385	CallExpression	EG ( current_execute_data )		67926	1					
ANR	68386	Callee	EG		67926	0					
ANR	68387	Identifier	EG		67926	0					
ANR	68388	ArgumentList	current_execute_data		67926	1					
ANR	68389	Argument	current_execute_data		67926	0					
ANR	68390	Identifier	current_execute_data		67926	0					
ANR	68391	ExpressionStatement	"memset ( EX_CV_NUM ( execute_data , 0 ) , 0 , sizeof ( zval * * ) * op_array -> last_var )"	1677:1:54727:54802	67926	8	True				
ANR	68392	CallExpression	"memset ( EX_CV_NUM ( execute_data , 0 ) , 0 , sizeof ( zval * * ) * op_array -> last_var )"		67926	0					
ANR	68393	Callee	memset		67926	0					
ANR	68394	Identifier	memset		67926	0					
ANR	68395	ArgumentList	"EX_CV_NUM ( execute_data , 0 )"		67926	1					
ANR	68396	Argument	"EX_CV_NUM ( execute_data , 0 )"		67926	0					
ANR	68397	CallExpression	"EX_CV_NUM ( execute_data , 0 )"		67926	0					
ANR	68398	Callee	EX_CV_NUM		67926	0					
ANR	68399	Identifier	EX_CV_NUM		67926	0					
ANR	68400	ArgumentList	execute_data		67926	1					
ANR	68401	Argument	execute_data		67926	0					
ANR	68402	Identifier	execute_data		67926	0					
ANR	68403	Argument	0		67926	1					
ANR	68404	PrimaryExpression	0		67926	0					
ANR	68405	Argument	0		67926	1					
ANR	68406	PrimaryExpression	0		67926	0					
ANR	68407	Argument	sizeof ( zval * * ) * op_array -> last_var		67926	2					
ANR	68408	MultiplicativeExpression	sizeof ( zval * * ) * op_array -> last_var		67926	0		*			
ANR	68409	SizeofExpression	sizeof ( zval * * )		67926	0					
ANR	68410	Sizeof	sizeof		67926	0					
ANR	68411	SizeofOperand	zval * *		67926	1					
ANR	68412	PtrMemberAccess	op_array -> last_var		67926	1					
ANR	68413	Identifier	op_array		67926	0					
ANR	68414	Identifier	last_var		67926	1					
ANR	68415	ExpressionStatement	EX ( call_slots ) = ( call_slot * ) ( ( char * ) execute_data + execute_data_size + CVs_size )	1679:1:54806:54888	67926	9	True				
ANR	68416	AssignmentExpression	EX ( call_slots ) = ( call_slot * ) ( ( char * ) execute_data + execute_data_size + CVs_size )		67926	0		=			
ANR	68417	CallExpression	EX ( call_slots )		67926	0					
ANR	68418	Callee	EX		67926	0					
ANR	68419	Identifier	EX		67926	0					
ANR	68420	ArgumentList	call_slots		67926	1					
ANR	68421	Argument	call_slots		67926	0					
ANR	68422	Identifier	call_slots		67926	0					
ANR	68423	CastExpression	( call_slot * ) ( ( char * ) execute_data + execute_data_size + CVs_size )		67926	1					
ANR	68424	CastTarget	call_slot *		67926	0					
ANR	68425	AdditiveExpression	( char * ) execute_data + execute_data_size + CVs_size		67926	1		+			
ANR	68426	CastExpression	( char * ) execute_data		67926	0					
ANR	68427	CastTarget	char *		67926	0					
ANR	68428	Identifier	execute_data		67926	1					
ANR	68429	AdditiveExpression	execute_data_size + CVs_size		67926	1		+			
ANR	68430	Identifier	execute_data_size		67926	0					
ANR	68431	Identifier	CVs_size		67926	1					
ANR	68432	ExpressionStatement	EX ( op_array ) = op_array	1682:1:54893:54916	67926	10	True				
ANR	68433	AssignmentExpression	EX ( op_array ) = op_array		67926	0		=			
ANR	68434	CallExpression	EX ( op_array )		67926	0					
ANR	68435	Callee	EX		67926	0					
ANR	68436	Identifier	EX		67926	0					
ANR	68437	ArgumentList	op_array		67926	1					
ANR	68438	Argument	op_array		67926	0					
ANR	68439	Identifier	op_array		67926	0					
ANR	68440	Identifier	op_array		67926	1					
ANR	68441	ExpressionStatement	EG ( argument_stack ) -> top = zend_vm_stack_frame_base ( execute_data )	1684:1:54920:54984	67926	11	True				
ANR	68442	AssignmentExpression	EG ( argument_stack ) -> top = zend_vm_stack_frame_base ( execute_data )		67926	0		=			
ANR	68443	PtrMemberAccess	EG ( argument_stack ) -> top		67926	0					
ANR	68444	CallExpression	EG ( argument_stack )		67926	0					
ANR	68445	Callee	EG		67926	0					
ANR	68446	Identifier	EG		67926	0					
ANR	68447	ArgumentList	argument_stack		67926	1					
ANR	68448	Argument	argument_stack		67926	0					
ANR	68449	Identifier	argument_stack		67926	0					
ANR	68450	Identifier	top		67926	1					
ANR	68451	CallExpression	zend_vm_stack_frame_base ( execute_data )		67926	1					
ANR	68452	Callee	zend_vm_stack_frame_base		67926	0					
ANR	68453	Identifier	zend_vm_stack_frame_base		67926	0					
ANR	68454	ArgumentList	execute_data		67926	1					
ANR	68455	Argument	execute_data		67926	0					
ANR	68456	Identifier	execute_data		67926	0					
ANR	68457	ExpressionStatement	EX ( object ) = NULL	1686:1:54988:55005	67926	12	True				
ANR	68458	AssignmentExpression	EX ( object ) = NULL		67926	0		=			
ANR	68459	CallExpression	EX ( object )		67926	0					
ANR	68460	Callee	EX		67926	0					
ANR	68461	Identifier	EX		67926	0					
ANR	68462	ArgumentList	object		67926	1					
ANR	68463	Argument	object		67926	0					
ANR	68464	Identifier	object		67926	0					
ANR	68465	Identifier	NULL		67926	1					
ANR	68466	ExpressionStatement	EX ( current_this ) = NULL	1687:1:55008:55031	67926	13	True				
ANR	68467	AssignmentExpression	EX ( current_this ) = NULL		67926	0		=			
ANR	68468	CallExpression	EX ( current_this )		67926	0					
ANR	68469	Callee	EX		67926	0					
ANR	68470	Identifier	EX		67926	0					
ANR	68471	ArgumentList	current_this		67926	1					
ANR	68472	Argument	current_this		67926	0					
ANR	68473	Identifier	current_this		67926	0					
ANR	68474	Identifier	NULL		67926	1					
ANR	68475	ExpressionStatement	EX ( old_error_reporting ) = NULL	1688:1:55034:55064	67926	14	True				
ANR	68476	AssignmentExpression	EX ( old_error_reporting ) = NULL		67926	0		=			
ANR	68477	CallExpression	EX ( old_error_reporting )		67926	0					
ANR	68478	Callee	EX		67926	0					
ANR	68479	Identifier	EX		67926	0					
ANR	68480	ArgumentList	old_error_reporting		67926	1					
ANR	68481	Argument	old_error_reporting		67926	0					
ANR	68482	Identifier	old_error_reporting		67926	0					
ANR	68483	Identifier	NULL		67926	1					
ANR	68484	ExpressionStatement	EX ( symbol_table ) = EG ( active_symbol_table )	1689:1:55067:55109	67926	15	True				
ANR	68485	AssignmentExpression	EX ( symbol_table ) = EG ( active_symbol_table )		67926	0		=			
ANR	68486	CallExpression	EX ( symbol_table )		67926	0					
ANR	68487	Callee	EX		67926	0					
ANR	68488	Identifier	EX		67926	0					
ANR	68489	ArgumentList	symbol_table		67926	1					
ANR	68490	Argument	symbol_table		67926	0					
ANR	68491	Identifier	symbol_table		67926	0					
ANR	68492	CallExpression	EG ( active_symbol_table )		67926	1					
ANR	68493	Callee	EG		67926	0					
ANR	68494	Identifier	EG		67926	0					
ANR	68495	ArgumentList	active_symbol_table		67926	1					
ANR	68496	Argument	active_symbol_table		67926	0					
ANR	68497	Identifier	active_symbol_table		67926	0					
ANR	68498	ExpressionStatement	EX ( call ) = NULL	1690:1:55112:55127	67926	16	True				
ANR	68499	AssignmentExpression	EX ( call ) = NULL		67926	0		=			
ANR	68500	CallExpression	EX ( call )		67926	0					
ANR	68501	Callee	EX		67926	0					
ANR	68502	Identifier	EX		67926	0					
ANR	68503	ArgumentList	call		67926	1					
ANR	68504	Argument	call		67926	0					
ANR	68505	Identifier	call		67926	0					
ANR	68506	Identifier	NULL		67926	1					
ANR	68507	ExpressionStatement	EG ( current_execute_data ) = execute_data	1691:1:55130:55169	67926	17	True				
ANR	68508	AssignmentExpression	EG ( current_execute_data ) = execute_data		67926	0		=			
ANR	68509	CallExpression	EG ( current_execute_data )		67926	0					
ANR	68510	Callee	EG		67926	0					
ANR	68511	Identifier	EG		67926	0					
ANR	68512	ArgumentList	current_execute_data		67926	1					
ANR	68513	Argument	current_execute_data		67926	0					
ANR	68514	Identifier	current_execute_data		67926	0					
ANR	68515	Identifier	execute_data		67926	1					
ANR	68516	ExpressionStatement	EX ( nested ) = nested	1692:1:55172:55191	67926	18	True				
ANR	68517	AssignmentExpression	EX ( nested ) = nested		67926	0		=			
ANR	68518	CallExpression	EX ( nested )		67926	0					
ANR	68519	Callee	EX		67926	0					
ANR	68520	Identifier	EX		67926	0					
ANR	68521	ArgumentList	nested		67926	1					
ANR	68522	Argument	nested		67926	0					
ANR	68523	Identifier	nested		67926	0					
ANR	68524	Identifier	nested		67926	1					
ANR	68525	ExpressionStatement	EX ( delayed_exception ) = NULL	1693:1:55194:55222	67926	19	True				
ANR	68526	AssignmentExpression	EX ( delayed_exception ) = NULL		67926	0		=			
ANR	68527	CallExpression	EX ( delayed_exception )		67926	0					
ANR	68528	Callee	EX		67926	0					
ANR	68529	Identifier	EX		67926	0					
ANR	68530	ArgumentList	delayed_exception		67926	1					
ANR	68531	Argument	delayed_exception		67926	0					
ANR	68532	Identifier	delayed_exception		67926	0					
ANR	68533	Identifier	NULL		67926	1					
ANR	68534	IfStatement	if ( ! op_array -> run_time_cache && op_array -> last_cache_slot )		67926	20					
ANR	68535	Condition	! op_array -> run_time_cache && op_array -> last_cache_slot	1695:5:55230:55283	67926	0	True				
ANR	68536	AndExpression	! op_array -> run_time_cache && op_array -> last_cache_slot		67926	0		&&			
ANR	68537	UnaryOperationExpression	! op_array -> run_time_cache		67926	0					
ANR	68538	UnaryOperator	!		67926	0					
ANR	68539	PtrMemberAccess	op_array -> run_time_cache		67926	1					
ANR	68540	Identifier	op_array		67926	0					
ANR	68541	Identifier	run_time_cache		67926	1					
ANR	68542	PtrMemberAccess	op_array -> last_cache_slot		67926	1					
ANR	68543	Identifier	op_array		67926	0					
ANR	68544	Identifier	last_cache_slot		67926	1					
ANR	68545	CompoundStatement		87:61:4078:4078	67926	1					
ANR	68546	ExpressionStatement	"op_array -> run_time_cache = ecalloc ( op_array -> last_cache_slot , sizeof ( void * ) )"	1696:2:55290:55366	67926	0	True				
ANR	68547	AssignmentExpression	"op_array -> run_time_cache = ecalloc ( op_array -> last_cache_slot , sizeof ( void * ) )"		67926	0		=			
ANR	68548	PtrMemberAccess	op_array -> run_time_cache		67926	0					
ANR	68549	Identifier	op_array		67926	0					
ANR	68550	Identifier	run_time_cache		67926	1					
ANR	68551	CallExpression	"ecalloc ( op_array -> last_cache_slot , sizeof ( void * ) )"		67926	1					
ANR	68552	Callee	ecalloc		67926	0					
ANR	68553	Identifier	ecalloc		67926	0					
ANR	68554	ArgumentList	op_array -> last_cache_slot		67926	1					
ANR	68555	Argument	op_array -> last_cache_slot		67926	0					
ANR	68556	PtrMemberAccess	op_array -> last_cache_slot		67926	0					
ANR	68557	Identifier	op_array		67926	0					
ANR	68558	Identifier	last_cache_slot		67926	1					
ANR	68559	Argument	sizeof ( void * )		67926	1					
ANR	68560	SizeofExpression	sizeof ( void * )		67926	0					
ANR	68561	Sizeof	sizeof		67926	0					
ANR	68562	SizeofOperand	void *		67926	1					
ANR	68563	IfStatement	if ( op_array -> this_var != - 1 && EG ( This ) )		67926	21					
ANR	68564	Condition	op_array -> this_var != - 1 && EG ( This )	1699:5:55377:55412	67926	0	True				
ANR	68565	AndExpression	op_array -> this_var != - 1 && EG ( This )		67926	0		&&			
ANR	68566	EqualityExpression	op_array -> this_var != - 1		67926	0		!=			
ANR	68567	PtrMemberAccess	op_array -> this_var		67926	0					
ANR	68568	Identifier	op_array		67926	0					
ANR	68569	Identifier	this_var		67926	1					
ANR	68570	UnaryOperationExpression	- 1		67926	1					
ANR	68571	UnaryOperator	-		67926	0					
ANR	68572	PrimaryExpression	1		67926	1					
ANR	68573	CallExpression	EG ( This )		67926	1					
ANR	68574	Callee	EG		67926	0					
ANR	68575	Identifier	EG		67926	0					
ANR	68576	ArgumentList	This		67926	1					
ANR	68577	Argument	This		67926	0					
ANR	68578	Identifier	This		67926	0					
ANR	68579	CompoundStatement		91:43:4207:4207	67926	1					
ANR	68580	ExpressionStatement	Z_ADDREF_P ( EG ( This ) )	1700:3:55420:55440	67926	0	True				
ANR	68581	CallExpression	Z_ADDREF_P ( EG ( This ) )		67926	0					
ANR	68582	Callee	Z_ADDREF_P		67926	0					
ANR	68583	Identifier	Z_ADDREF_P		67926	0					
ANR	68584	ArgumentList	EG ( This )		67926	1					
ANR	68585	Argument	EG ( This )		67926	0					
ANR	68586	CallExpression	EG ( This )		67926	0					
ANR	68587	Callee	EG		67926	0					
ANR	68588	Identifier	EG		67926	0					
ANR	68589	ArgumentList	This		67926	1					
ANR	68590	Argument	This		67926	0					
ANR	68591	Identifier	This		67926	0					
ANR	68592	IfStatement	if ( ! EG ( active_symbol_table ) )		67926	1					
ANR	68593	Condition	! EG ( active_symbol_table )	1701:6:55472:55495	67926	0	True				
ANR	68594	UnaryOperationExpression	! EG ( active_symbol_table )		67926	0					
ANR	68595	UnaryOperator	!		67926	0					
ANR	68596	CallExpression	EG ( active_symbol_table )		67926	1					
ANR	68597	Callee	EG		67926	0					
ANR	68598	Identifier	EG		67926	0					
ANR	68599	ArgumentList	active_symbol_table		67926	1					
ANR	68600	Argument	active_symbol_table		67926	0					
ANR	68601	Identifier	active_symbol_table		67926	0					
ANR	68602	CompoundStatement		93:32:4290:4290	67926	1					
ANR	68603	ExpressionStatement	"EX_CV ( op_array -> this_var ) = ( zval * * ) EX_CV_NUM ( execute_data , op_array -> last_var + op_array -> this_var )"	1702:3:55503:55605	67926	0	True				
ANR	68604	AssignmentExpression	"EX_CV ( op_array -> this_var ) = ( zval * * ) EX_CV_NUM ( execute_data , op_array -> last_var + op_array -> this_var )"		67926	0		=			
ANR	68605	CallExpression	EX_CV ( op_array -> this_var )		67926	0					
ANR	68606	Callee	EX_CV		67926	0					
ANR	68607	Identifier	EX_CV		67926	0					
ANR	68608	ArgumentList	op_array -> this_var		67926	1					
ANR	68609	Argument	op_array -> this_var		67926	0					
ANR	68610	PtrMemberAccess	op_array -> this_var		67926	0					
ANR	68611	Identifier	op_array		67926	0					
ANR	68612	Identifier	this_var		67926	1					
ANR	68613	CastExpression	"( zval * * ) EX_CV_NUM ( execute_data , op_array -> last_var + op_array -> this_var )"		67926	1					
ANR	68614	CastTarget	zval * *		67926	0					
ANR	68615	CallExpression	"EX_CV_NUM ( execute_data , op_array -> last_var + op_array -> this_var )"		67926	1					
ANR	68616	Callee	EX_CV_NUM		67926	0					
ANR	68617	Identifier	EX_CV_NUM		67926	0					
ANR	68618	ArgumentList	execute_data		67926	1					
ANR	68619	Argument	execute_data		67926	0					
ANR	68620	Identifier	execute_data		67926	0					
ANR	68621	Argument	op_array -> last_var + op_array -> this_var		67926	1					
ANR	68622	AdditiveExpression	op_array -> last_var + op_array -> this_var		67926	0		+			
ANR	68623	PtrMemberAccess	op_array -> last_var		67926	0					
ANR	68624	Identifier	op_array		67926	0					
ANR	68625	Identifier	last_var		67926	1					
ANR	68626	PtrMemberAccess	op_array -> this_var		67926	1					
ANR	68627	Identifier	op_array		67926	0					
ANR	68628	Identifier	this_var		67926	1					
ANR	68629	ExpressionStatement	* EX_CV ( op_array -> this_var ) = EG ( This )	1703:3:55610:55647	67926	1	True				
ANR	68630	AssignmentExpression	* EX_CV ( op_array -> this_var ) = EG ( This )		67926	0		=			
ANR	68631	UnaryOperationExpression	* EX_CV ( op_array -> this_var )		67926	0					
ANR	68632	UnaryOperator	*		67926	0					
ANR	68633	CallExpression	EX_CV ( op_array -> this_var )		67926	1					
ANR	68634	Callee	EX_CV		67926	0					
ANR	68635	Identifier	EX_CV		67926	0					
ANR	68636	ArgumentList	op_array -> this_var		67926	1					
ANR	68637	Argument	op_array -> this_var		67926	0					
ANR	68638	PtrMemberAccess	op_array -> this_var		67926	0					
ANR	68639	Identifier	op_array		67926	0					
ANR	68640	Identifier	this_var		67926	1					
ANR	68641	CallExpression	EG ( This )		67926	1					
ANR	68642	Callee	EG		67926	0					
ANR	68643	Identifier	EG		67926	0					
ANR	68644	ArgumentList	This		67926	1					
ANR	68645	Argument	This		67926	0					
ANR	68646	Identifier	This		67926	0					
ANR	68647	ElseStatement	else		67926	0					
ANR	68648	CompoundStatement		96:9:4450:4450	67926	0					
ANR	68649	IfStatement	"if ( zend_hash_add ( EG ( active_symbol_table ) , ""this"" , sizeof ( ""this"" ) , & EG ( This ) , sizeof ( zval * ) , ( void * * ) EX_CV_NUM ( execute_data , op_array -> this_var ) ) == FAILURE )"		67926	0					
ANR	68650	Condition	"zend_hash_add ( EG ( active_symbol_table ) , ""this"" , sizeof ( ""this"" ) , & EG ( This ) , sizeof ( zval * ) , ( void * * ) EX_CV_NUM ( execute_data , op_array -> this_var ) ) == FAILURE"	1705:7:55667:55819	67926	0	True				
ANR	68651	EqualityExpression	"zend_hash_add ( EG ( active_symbol_table ) , ""this"" , sizeof ( ""this"" ) , & EG ( This ) , sizeof ( zval * ) , ( void * * ) EX_CV_NUM ( execute_data , op_array -> this_var ) ) == FAILURE"		67926	0		==			
ANR	68652	CallExpression	"zend_hash_add ( EG ( active_symbol_table ) , ""this"" , sizeof ( ""this"" ) , & EG ( This ) , sizeof ( zval * ) , ( void * * ) EX_CV_NUM ( execute_data , op_array -> this_var ) )"		67926	0					
ANR	68653	Callee	zend_hash_add		67926	0					
ANR	68654	Identifier	zend_hash_add		67926	0					
ANR	68655	ArgumentList	EG ( active_symbol_table )		67926	1					
ANR	68656	Argument	EG ( active_symbol_table )		67926	0					
ANR	68657	CallExpression	EG ( active_symbol_table )		67926	0					
ANR	68658	Callee	EG		67926	0					
ANR	68659	Identifier	EG		67926	0					
ANR	68660	ArgumentList	active_symbol_table		67926	1					
ANR	68661	Argument	active_symbol_table		67926	0					
ANR	68662	Identifier	active_symbol_table		67926	0					
ANR	68663	Argument	"""this"""		67926	1					
ANR	68664	PrimaryExpression	"""this"""		67926	0					
ANR	68665	Argument	"sizeof ( ""this"" )"		67926	2					
ANR	68666	SizeofExpression	"sizeof ( ""this"" )"		67926	0					
ANR	68667	Sizeof	sizeof		67926	0					
ANR	68668	PrimaryExpression	"""this"""		67926	1					
ANR	68669	Argument	& EG ( This )		67926	3					
ANR	68670	UnaryOperationExpression	& EG ( This )		67926	0					
ANR	68671	UnaryOperator	&		67926	0					
ANR	68672	CallExpression	EG ( This )		67926	1					
ANR	68673	Callee	EG		67926	0					
ANR	68674	Identifier	EG		67926	0					
ANR	68675	ArgumentList	This		67926	1					
ANR	68676	Argument	This		67926	0					
ANR	68677	Identifier	This		67926	0					
ANR	68678	Argument	sizeof ( zval * )		67926	4					
ANR	68679	SizeofExpression	sizeof ( zval * )		67926	0					
ANR	68680	Sizeof	sizeof		67926	0					
ANR	68681	SizeofOperand	zval *		67926	1					
ANR	68682	Argument	"( void * * ) EX_CV_NUM ( execute_data , op_array -> this_var )"		67926	5					
ANR	68683	CastExpression	"( void * * ) EX_CV_NUM ( execute_data , op_array -> this_var )"		67926	0					
ANR	68684	CastTarget	void * *		67926	0					
ANR	68685	CallExpression	"EX_CV_NUM ( execute_data , op_array -> this_var )"		67926	1					
ANR	68686	Callee	EX_CV_NUM		67926	0					
ANR	68687	Identifier	EX_CV_NUM		67926	0					
ANR	68688	ArgumentList	execute_data		67926	1					
ANR	68689	Argument	execute_data		67926	0					
ANR	68690	Identifier	execute_data		67926	0					
ANR	68691	Argument	op_array -> this_var		67926	1					
ANR	68692	PtrMemberAccess	op_array -> this_var		67926	0					
ANR	68693	Identifier	op_array		67926	0					
ANR	68694	Identifier	this_var		67926	1					
ANR	68695	Identifier	FAILURE		67926	1					
ANR	68696	CompoundStatement		97:162:4614:4614	67926	1					
ANR	68697	ExpressionStatement	Z_DELREF_P ( EG ( This ) )	1706:4:55828:55848	67926	0	True				
ANR	68698	CallExpression	Z_DELREF_P ( EG ( This ) )		67926	0					
ANR	68699	Callee	Z_DELREF_P		67926	0					
ANR	68700	Identifier	Z_DELREF_P		67926	0					
ANR	68701	ArgumentList	EG ( This )		67926	1					
ANR	68702	Argument	EG ( This )		67926	0					
ANR	68703	CallExpression	EG ( This )		67926	0					
ANR	68704	Callee	EG		67926	0					
ANR	68705	Identifier	EG		67926	0					
ANR	68706	ArgumentList	This		67926	1					
ANR	68707	Argument	This		67926	0					
ANR	68708	Identifier	This		67926	0					
ANR	68709	ExpressionStatement	EX ( opline ) = UNEXPECTED ( ( op_array -> fn_flags & ZEND_ACC_INTERACTIVE ) != 0 ) && EG ( start_op ) ? EG ( start_op ) : op_array -> opcodes	1711:1:55864:55988	67926	22	True				
ANR	68710	AssignmentExpression	EX ( opline ) = UNEXPECTED ( ( op_array -> fn_flags & ZEND_ACC_INTERACTIVE ) != 0 ) && EG ( start_op ) ? EG ( start_op ) : op_array -> opcodes		67926	0		=			
ANR	68711	CallExpression	EX ( opline )		67926	0					
ANR	68712	Callee	EX		67926	0					
ANR	68713	Identifier	EX		67926	0					
ANR	68714	ArgumentList	opline		67926	1					
ANR	68715	Argument	opline		67926	0					
ANR	68716	Identifier	opline		67926	0					
ANR	68717	ConditionalExpression	UNEXPECTED ( ( op_array -> fn_flags & ZEND_ACC_INTERACTIVE ) != 0 ) && EG ( start_op ) ? EG ( start_op ) : op_array -> opcodes		67926	1					
ANR	68718	Condition	UNEXPECTED ( ( op_array -> fn_flags & ZEND_ACC_INTERACTIVE ) != 0 ) && EG ( start_op )		67926	0					
ANR	68719	AndExpression	UNEXPECTED ( ( op_array -> fn_flags & ZEND_ACC_INTERACTIVE ) != 0 ) && EG ( start_op )		67926	0		&&			
ANR	68720	CallExpression	UNEXPECTED ( ( op_array -> fn_flags & ZEND_ACC_INTERACTIVE ) != 0 )		67926	0					
ANR	68721	Callee	UNEXPECTED		67926	0					
ANR	68722	Identifier	UNEXPECTED		67926	0					
ANR	68723	ArgumentList	( op_array -> fn_flags & ZEND_ACC_INTERACTIVE ) != 0		67926	1					
ANR	68724	Argument	( op_array -> fn_flags & ZEND_ACC_INTERACTIVE ) != 0		67926	0					
ANR	68725	EqualityExpression	( op_array -> fn_flags & ZEND_ACC_INTERACTIVE ) != 0		67926	0		!=			
ANR	68726	BitAndExpression	op_array -> fn_flags & ZEND_ACC_INTERACTIVE		67926	0		&			
ANR	68727	PtrMemberAccess	op_array -> fn_flags		67926	0					
ANR	68728	Identifier	op_array		67926	0					
ANR	68729	Identifier	fn_flags		67926	1					
ANR	68730	Identifier	ZEND_ACC_INTERACTIVE		67926	1					
ANR	68731	PrimaryExpression	0		67926	1					
ANR	68732	CallExpression	EG ( start_op )		67926	1					
ANR	68733	Callee	EG		67926	0					
ANR	68734	Identifier	EG		67926	0					
ANR	68735	ArgumentList	start_op		67926	1					
ANR	68736	Argument	start_op		67926	0					
ANR	68737	Identifier	start_op		67926	0					
ANR	68738	CallExpression	EG ( start_op )		67926	1					
ANR	68739	Callee	EG		67926	0					
ANR	68740	Identifier	EG		67926	0					
ANR	68741	ArgumentList	start_op		67926	1					
ANR	68742	Argument	start_op		67926	0					
ANR	68743	Identifier	start_op		67926	0					
ANR	68744	PtrMemberAccess	op_array -> opcodes		67926	2					
ANR	68745	Identifier	op_array		67926	0					
ANR	68746	Identifier	opcodes		67926	1					
ANR	68747	ExpressionStatement	EG ( opline_ptr ) = & EX ( opline )	1712:1:55991:56019	67926	23	True				
ANR	68748	AssignmentExpression	EG ( opline_ptr ) = & EX ( opline )		67926	0		=			
ANR	68749	CallExpression	EG ( opline_ptr )		67926	0					
ANR	68750	Callee	EG		67926	0					
ANR	68751	Identifier	EG		67926	0					
ANR	68752	ArgumentList	opline_ptr		67926	1					
ANR	68753	Argument	opline_ptr		67926	0					
ANR	68754	Identifier	opline_ptr		67926	0					
ANR	68755	UnaryOperationExpression	& EX ( opline )		67926	1					
ANR	68756	UnaryOperator	&		67926	0					
ANR	68757	CallExpression	EX ( opline )		67926	1					
ANR	68758	Callee	EX		67926	0					
ANR	68759	Identifier	EX		67926	0					
ANR	68760	ArgumentList	opline		67926	1					
ANR	68761	Argument	opline		67926	0					
ANR	68762	Identifier	opline		67926	0					
ANR	68763	ExpressionStatement	EX ( function_state ) . function = ( zend_function * ) op_array	1714:1:56023:56079	67926	24	True				
ANR	68764	AssignmentExpression	EX ( function_state ) . function = ( zend_function * ) op_array		67926	0		=			
ANR	68765	MemberAccess	EX ( function_state ) . function		67926	0					
ANR	68766	CallExpression	EX ( function_state )		67926	0					
ANR	68767	Callee	EX		67926	0					
ANR	68768	Identifier	EX		67926	0					
ANR	68769	ArgumentList	function_state		67926	1					
ANR	68770	Argument	function_state		67926	0					
ANR	68771	Identifier	function_state		67926	0					
ANR	68772	Identifier	function		67926	1					
ANR	68773	CastExpression	( zend_function * ) op_array		67926	1					
ANR	68774	CastTarget	zend_function *		67926	0					
ANR	68775	Identifier	op_array		67926	1					
ANR	68776	ExpressionStatement	EX ( function_state ) . arguments = NULL	1715:1:56082:56117	67926	25	True				
ANR	68777	AssignmentExpression	EX ( function_state ) . arguments = NULL		67926	0		=			
ANR	68778	MemberAccess	EX ( function_state ) . arguments		67926	0					
ANR	68779	CallExpression	EX ( function_state )		67926	0					
ANR	68780	Callee	EX		67926	0					
ANR	68781	Identifier	EX		67926	0					
ANR	68782	ArgumentList	function_state		67926	1					
ANR	68783	Argument	function_state		67926	0					
ANR	68784	Identifier	function_state		67926	0					
ANR	68785	Identifier	arguments		67926	1					
ANR	68786	Identifier	NULL		67926	1					
ANR	68787	ReturnStatement	return execute_data ;	1717:1:56121:56140	67926	26	True				
ANR	68788	Identifier	execute_data		67926	0					
ANR	68789	ReturnType	static zend_always_inline zend_execute_data *		67926	1					
ANR	68790	Identifier	i_create_execute_data_from_op_array		67926	2					
ANR	68791	ParameterList	"zend_op_array * op_array , zend_bool nested TSRMLS_DC"		67926	3					
ANR	68792	Parameter	zend_op_array * op_array	1608:81:51144:51166	67926	0	True				
ANR	68793	ParameterType	zend_op_array *		67926	0					
ANR	68794	Identifier	op_array		67926	1					
ANR	68795	Parameter	zend_bool nested TSRMLS_DC	1608:106:51169:51194	67926	1	True				
ANR	68796	ParameterType	zend_bool nested		67926	0					
ANR	68797	Identifier	TSRMLS_DC		67926	1					
ANR	68798	CFGEntryNode	ENTRY		67926		True				
ANR	68799	CFGExitNode	EXIT		67926		True				
ANR	68800	Symbol	zend_vm_stack_frame_base		67926						
ANR	68801	Symbol	current_execute_data		67926						
ANR	68802	Symbol	EX_CV		67926						
ANR	68803	Symbol	call_slots		67926						
ANR	68804	Symbol	TSRMLS_DC		67926						
ANR	68805	Symbol	nested		67926						
ANR	68806	Symbol	execute_data		67926						
ANR	68807	Symbol	op_array -> last_cache_slot		67926						
ANR	68808	Symbol	op_array -> run_time_cache		67926						
ANR	68809	Symbol	EG ( argument_stack ) -> prev		67926						
ANR	68810	Symbol	op_array -> fn_flags		67926						
ANR	68811	Symbol	opline		67926						
ANR	68812	Symbol	Ts_size		67926						
ANR	68813	Symbol	op_array -> nested_calls		67926						
ANR	68814	Symbol	ecalloc		67926						
ANR	68815	Symbol	This		67926						
ANR	68816	Symbol	* arg_dst		67926						
ANR	68817	Symbol	ZEND_ACC_GENERATOR		67926						
ANR	68818	Symbol	zend_vm_stack_new_page		67926						
ANR	68819	Symbol	* * EX		67926						
ANR	68820	Symbol	* EX ( prev_execute_data ) -> function_state . arguments		67926						
ANR	68821	Symbol	args_size		67926						
ANR	68822	Symbol	* EX ( prev_execute_data ) -> function_state		67926						
ANR	68823	Symbol	EX_CV_NUM		67926						
ANR	68824	Symbol	EG		67926						
ANR	68825	Symbol	op_array -> T		67926						
ANR	68826	Symbol	start_op		67926						
ANR	68827	Symbol	NULL		67926						
ANR	68828	Symbol	opline_ptr		67926						
ANR	68829	Symbol	op_array -> this_var		67926						
ANR	68830	Symbol	current_this		67926						
ANR	68831	Symbol	symbol_table		67926						
ANR	68832	Symbol	ZEND_VM_STACK_ELEMETS		67926						
ANR	68833	Symbol	prev_execute_data		67926						
ANR	68834	Symbol	EX ( prev_execute_data ) -> function_state . function		67926						
ANR	68835	Symbol	* op_array		67926						
ANR	68836	Symbol	EX		67926						
ANR	68837	Symbol	EX ( function_state ) . arguments		67926						
ANR	68838	Symbol	call_slots_size		67926						
ANR	68839	Symbol	EX ( prev_execute_data ) -> function_state . arguments		67926						
ANR	68840	Symbol	stack_size		67926						
ANR	68841	Symbol	old_error_reporting		67926						
ANR	68842	Symbol	args_count		67926						
ANR	68843	Symbol	object		67926						
ANR	68844	Symbol	* EX_CV ( op_array -> this_var )		67926						
ANR	68845	Symbol	execute_data_size		67926						
ANR	68846	Symbol	arg_dst		67926						
ANR	68847	Symbol	op_array -> used_stack		67926						
ANR	68848	Symbol	op_array -> last_var		67926						
ANR	68849	Symbol	* EG		67926						
ANR	68850	Symbol	zend_vm_stack_get_arg_ex		67926						
ANR	68851	Symbol	& EG		67926						
ANR	68852	Symbol	UNEXPECTED		67926						
ANR	68853	Symbol	op_array -> opcodes		67926						
ANR	68854	Symbol	active_symbol_table		67926						
ANR	68855	Symbol	delayed_exception		67926						
ANR	68856	Symbol	* EX_CV		67926						
ANR	68857	Symbol	ZEND_MM_ALIGNED_SIZE		67926						
ANR	68858	Symbol	EX ( prev_execute_data ) -> function_state		67926						
ANR	68859	Symbol	arg_src		67926						
ANR	68860	Symbol	argument_stack		67926						
ANR	68861	Symbol	total_size		67926						
ANR	68862	Symbol	i		67926						
ANR	68863	Symbol	FAILURE		67926						
ANR	68864	Symbol	EG ( argument_stack ) -> top		67926						
ANR	68865	Symbol	call		67926						
ANR	68866	Symbol	* i		67926						
ANR	68867	Symbol	CVs_size		67926						
ANR	68868	Symbol	zend_vm_stack_get_args_count_ex		67926						
ANR	68869	Symbol	zend_hash_add		67926						
ANR	68870	Symbol	* arg_src		67926						
ANR	68871	Symbol	EX ( function_state ) . function		67926						
ANR	68872	Symbol	* EX		67926						
ANR	68873	Symbol	ZEND_ACC_INTERACTIVE		67926						
ANR	68874	Symbol	& EX		67926						
ANR	68875	Symbol	function_state		67926						
ANR	68876	Symbol	op_array		67926						
ANR	68877	Function	zend_create_execute_data_from_op_array	1721:0:56155:56360							
ANR	68878	FunctionDef	"zend_create_execute_data_from_op_array (zend_op_array * op_array , zend_bool nested TSRMLS_DC)"		68877	0					
ANR	68879	CompoundStatement		1722:0:56285:56360	68877	0					
ANR	68880	Statement	return	1723:1:56288:56293	68877	0	True				
ANR	68881	Statement	i_create_execute_data_from_op_array	1723:8:56295:56329	68877	1	True				
ANR	68882	Statement	(	1723:43:56330:56330	68877	2	True				
ANR	68883	Statement	op_array	1723:44:56331:56338	68877	3	True				
ANR	68884	Statement	","	1723:52:56339:56339	68877	4	True				
ANR	68885	Statement	nested	1723:54:56341:56346	68877	5	True				
ANR	68886	Statement	TSRMLS_CC	1723:61:56348:56356	68877	6	True				
ANR	68887	Statement	)	1723:70:56357:56357	68877	7	True				
ANR	68888	ExpressionStatement		1723:71:56358:56358	68877	8	True				
ANR	68889	ReturnType	ZEND_API zend_execute_data *		68877	1					
ANR	68890	Identifier	zend_create_execute_data_from_op_array		68877	2					
ANR	68891	ParameterList	"zend_op_array * op_array , zend_bool nested TSRMLS_DC"		68877	3					
ANR	68892	Parameter	zend_op_array * op_array	1721:67:56222:56244	68877	0	True				
ANR	68893	ParameterType	zend_op_array *		68877	0					
ANR	68894	Identifier	op_array		68877	1					
ANR	68895	Parameter	zend_bool nested TSRMLS_DC	1721:92:56247:56272	68877	1	True				
ANR	68896	ParameterType	zend_bool nested		68877	0					
ANR	68897	Identifier	TSRMLS_DC		68877	1					
ANR	68898	CFGEntryNode	ENTRY		68877		True				
ANR	68899	CFGExitNode	EXIT		68877		True				
ANR	68900	Symbol	TSRMLS_DC		68877						
ANR	68901	Symbol	op_array		68877						
ANR	68902	DeclStmt									
ANR	68903	Decl							zend_uint	zend_uint	arg_num
ANR	68904	Function	zend_vm_stack_push_args_with_copy	1734:0:56630:57197							
ANR	68905	FunctionDef	zend_vm_stack_push_args_with_copy (int count TSRMLS_DC)		68904	0					
ANR	68906	CompoundStatement		1735:0:56709:57197	68904	0					
ANR	68907	IdentifierDeclStatement	zend_vm_stack p = EG ( argument_stack ) ;	1736:1:56712:56748	68904	0	True				
ANR	68908	IdentifierDecl	p = EG ( argument_stack )		68904	0					
ANR	68909	IdentifierDeclType	zend_vm_stack		68904	0					
ANR	68910	Identifier	p		68904	1					
ANR	68911	AssignmentExpression	p = EG ( argument_stack )		68904	2		=			
ANR	68912	Identifier	p		68904	0					
ANR	68913	CallExpression	EG ( argument_stack )		68904	1					
ANR	68914	Callee	EG		68904	0					
ANR	68915	Identifier	EG		68904	0					
ANR	68916	ArgumentList	argument_stack		68904	1					
ANR	68917	Argument	argument_stack		68904	0					
ANR	68918	Identifier	argument_stack		68904	0					
ANR	68919	Statement	zend_vm_stack_extend	1738:1:56752:56771	68904	1	True				
ANR	68920	Statement	(	1738:21:56772:56772	68904	2	True				
ANR	68921	Statement	count	1738:22:56773:56777	68904	3	True				
ANR	68922	Statement	+	1738:28:56779:56779	68904	4	True				
ANR	68923	Statement	1	1738:30:56781:56781	68904	5	True				
ANR	68924	Statement	TSRMLS_CC	1738:32:56783:56791	68904	6	True				
ANR	68925	Statement	)	1738:41:56792:56792	68904	7	True				
ANR	68926	ExpressionStatement		1738:42:56793:56793	68904	8	True				
ANR	68927	ExpressionStatement	EG ( argument_stack ) -> top += count	1740:1:56797:56829	68904	9	True				
ANR	68928	AssignmentExpression	EG ( argument_stack ) -> top += count		68904	0		+=			
ANR	68929	PtrMemberAccess	EG ( argument_stack ) -> top		68904	0					
ANR	68930	CallExpression	EG ( argument_stack )		68904	0					
ANR	68931	Callee	EG		68904	0					
ANR	68932	Identifier	EG		68904	0					
ANR	68933	ArgumentList	argument_stack		68904	1					
ANR	68934	Argument	argument_stack		68904	0					
ANR	68935	Identifier	argument_stack		68904	0					
ANR	68936	Identifier	top		68904	1					
ANR	68937	Identifier	count		68904	1					
ANR	68938	ExpressionStatement	* ( EG ( argument_stack ) -> top ) = ( void * ) ( zend_uintptr_t ) count	1741:1:56832:56889	68904	10	True				
ANR	68939	AssignmentExpression	* ( EG ( argument_stack ) -> top ) = ( void * ) ( zend_uintptr_t ) count		68904	0		=			
ANR	68940	UnaryOperationExpression	* ( EG ( argument_stack ) -> top )		68904	0					
ANR	68941	UnaryOperator	*		68904	0					
ANR	68942	PtrMemberAccess	EG ( argument_stack ) -> top		68904	1					
ANR	68943	CallExpression	EG ( argument_stack )		68904	0					
ANR	68944	Callee	EG		68904	0					
ANR	68945	Identifier	EG		68904	0					
ANR	68946	ArgumentList	argument_stack		68904	1					
ANR	68947	Argument	argument_stack		68904	0					
ANR	68948	Identifier	argument_stack		68904	0					
ANR	68949	Identifier	top		68904	1					
ANR	68950	CastExpression	( void * ) ( zend_uintptr_t ) count		68904	1					
ANR	68951	CastTarget	void *		68904	0					
ANR	68952	CastExpression	( zend_uintptr_t ) count		68904	1					
ANR	68953	CastTarget	zend_uintptr_t		68904	0					
ANR	68954	Identifier	count		68904	1					
ANR	68955	WhileStatement	while ( count -- > 0 )		68904	11					
ANR	68956	Condition	count -- > 0	1742:8:56899:56909	68904	0	True				
ANR	68957	RelationalExpression	count -- > 0		68904	0		>			
ANR	68958	PostIncDecOperationExpression	count --		68904	0					
ANR	68959	Identifier	count		68904	0					
ANR	68960	IncDec	--		68904	1					
ANR	68961	PrimaryExpression	0		68904	1					
ANR	68962	CompoundStatement		9:2:206:230	68904	1					
ANR	68963	IdentifierDeclStatement	void * data = * ( -- p -> top ) ;	1743:2:56916:56940	68904	0	True				
ANR	68964	IdentifierDecl	* data = * ( -- p -> top )		68904	0					
ANR	68965	IdentifierDeclType	void *		68904	0					
ANR	68966	Identifier	data		68904	1					
ANR	68967	AssignmentExpression	* data = * ( -- p -> top )		68904	2		=			
ANR	68968	Identifier	data		68904	0					
ANR	68969	UnaryOperationExpression	* ( -- p -> top )		68904	1					
ANR	68970	UnaryOperator	*		68904	0					
ANR	68971	UnaryExpression	-- p -> top		68904	1					
ANR	68972	IncDec	--		68904	0					
ANR	68973	PtrMemberAccess	p -> top		68904	1					
ANR	68974	Identifier	p		68904	0					
ANR	68975	Identifier	top		68904	1					
ANR	68976	IfStatement	if ( UNEXPECTED ( p -> top == ZEND_VM_STACK_ELEMETS ( p ) ) )		68904	1					
ANR	68977	Condition	UNEXPECTED ( p -> top == ZEND_VM_STACK_ELEMETS ( p ) )	1745:6:56949:56994	68904	0	True				
ANR	68978	CallExpression	UNEXPECTED ( p -> top == ZEND_VM_STACK_ELEMETS ( p ) )		68904	0					
ANR	68979	Callee	UNEXPECTED		68904	0					
ANR	68980	Identifier	UNEXPECTED		68904	0					
ANR	68981	ArgumentList	p -> top == ZEND_VM_STACK_ELEMETS ( p )		68904	1					
ANR	68982	Argument	p -> top == ZEND_VM_STACK_ELEMETS ( p )		68904	0					
ANR	68983	EqualityExpression	p -> top == ZEND_VM_STACK_ELEMETS ( p )		68904	0		==			
ANR	68984	PtrMemberAccess	p -> top		68904	0					
ANR	68985	Identifier	p		68904	0					
ANR	68986	Identifier	top		68904	1					
ANR	68987	CallExpression	ZEND_VM_STACK_ELEMETS ( p )		68904	1					
ANR	68988	Callee	ZEND_VM_STACK_ELEMETS		68904	0					
ANR	68989	Identifier	ZEND_VM_STACK_ELEMETS		68904	0					
ANR	68990	ArgumentList	p		68904	1					
ANR	68991	Argument	p		68904	0					
ANR	68992	Identifier	p		68904	0					
ANR	68993	CompoundStatement		12:3:292:311	68904	1					
ANR	68994	IdentifierDeclStatement	zend_vm_stack r = p ;	1746:3:57002:57021	68904	0	True				
ANR	68995	IdentifierDecl	r = p		68904	0					
ANR	68996	IdentifierDeclType	zend_vm_stack		68904	0					
ANR	68997	Identifier	r		68904	1					
ANR	68998	AssignmentExpression	r = p		68904	2		=			
ANR	68999	Identifier	p		68904	0					
ANR	69000	Identifier	p		68904	1					
ANR	69001	ExpressionStatement	EG ( argument_stack ) -> prev = p -> prev	1748:3:57027:57061	68904	1	True				
ANR	69002	AssignmentExpression	EG ( argument_stack ) -> prev = p -> prev		68904	0		=			
ANR	69003	PtrMemberAccess	EG ( argument_stack ) -> prev		68904	0					
ANR	69004	CallExpression	EG ( argument_stack )		68904	0					
ANR	69005	Callee	EG		68904	0					
ANR	69006	Identifier	EG		68904	0					
ANR	69007	ArgumentList	argument_stack		68904	1					
ANR	69008	Argument	argument_stack		68904	0					
ANR	69009	Identifier	argument_stack		68904	0					
ANR	69010	Identifier	prev		68904	1					
ANR	69011	PtrMemberAccess	p -> prev		68904	1					
ANR	69012	Identifier	p		68904	0					
ANR	69013	Identifier	prev		68904	1					
ANR	69014	ExpressionStatement	p = p -> prev	1749:3:57066:57077	68904	2	True				
ANR	69015	AssignmentExpression	p = p -> prev		68904	0		=			
ANR	69016	Identifier	p		68904	0					
ANR	69017	PtrMemberAccess	p -> prev		68904	1					
ANR	69018	Identifier	p		68904	0					
ANR	69019	Identifier	prev		68904	1					
ANR	69020	ExpressionStatement	efree ( r )	1750:3:57082:57090	68904	3	True				
ANR	69021	CallExpression	efree ( r )		68904	0					
ANR	69022	Callee	efree		68904	0					
ANR	69023	Identifier	efree		68904	0					
ANR	69024	ArgumentList	r		68904	1					
ANR	69025	Argument	r		68904	0					
ANR	69026	Identifier	r		68904	0					
ANR	69027	ExpressionStatement	* ( ZEND_VM_STACK_ELEMETS ( EG ( argument_stack ) ) + count ) = data	1752:2:57098:57157	68904	2	True				
ANR	69028	AssignmentExpression	* ( ZEND_VM_STACK_ELEMETS ( EG ( argument_stack ) ) + count ) = data		68904	0		=			
ANR	69029	UnaryOperationExpression	* ( ZEND_VM_STACK_ELEMETS ( EG ( argument_stack ) ) + count )		68904	0					
ANR	69030	UnaryOperator	*		68904	0					
ANR	69031	AdditiveExpression	ZEND_VM_STACK_ELEMETS ( EG ( argument_stack ) ) + count		68904	1		+			
ANR	69032	CallExpression	ZEND_VM_STACK_ELEMETS ( EG ( argument_stack ) )		68904	0					
ANR	69033	Callee	ZEND_VM_STACK_ELEMETS		68904	0					
ANR	69034	Identifier	ZEND_VM_STACK_ELEMETS		68904	0					
ANR	69035	ArgumentList	EG ( argument_stack )		68904	1					
ANR	69036	Argument	EG ( argument_stack )		68904	0					
ANR	69037	CallExpression	EG ( argument_stack )		68904	0					
ANR	69038	Callee	EG		68904	0					
ANR	69039	Identifier	EG		68904	0					
ANR	69040	ArgumentList	argument_stack		68904	1					
ANR	69041	Argument	argument_stack		68904	0					
ANR	69042	Identifier	argument_stack		68904	0					
ANR	69043	Identifier	count		68904	1					
ANR	69044	Identifier	data		68904	1					
ANR	69045	ReturnStatement	return EG ( argument_stack ) -> top ++ ;	1754:1:57163:57195	68904	12	True				
ANR	69046	PostIncDecOperationExpression	EG ( argument_stack ) -> top ++		68904	0					
ANR	69047	PtrMemberAccess	EG ( argument_stack ) -> top		68904	0					
ANR	69048	CallExpression	EG ( argument_stack )		68904	0					
ANR	69049	Callee	EG		68904	0					
ANR	69050	Identifier	EG		68904	0					
ANR	69051	ArgumentList	argument_stack		68904	1					
ANR	69052	Argument	argument_stack		68904	0					
ANR	69053	Identifier	argument_stack		68904	0					
ANR	69054	Identifier	top		68904	1					
ANR	69055	IncDec	++		68904	1					
ANR	69056	ReturnType	static void * *		68904	1					
ANR	69057	Identifier	zend_vm_stack_push_args_with_copy		68904	2					
ANR	69058	ParameterList	int count TSRMLS_DC		68904	3					
ANR	69059	Parameter	int count TSRMLS_DC	1734:48:56678:56696	68904	0	True				
ANR	69060	ParameterType	int count		68904	0					
ANR	69061	Identifier	TSRMLS_DC		68904	1					
ANR	69062	CFGEntryNode	ENTRY		68904		True				
ANR	69063	CFGExitNode	EXIT		68904		True				
ANR	69064	Symbol	p -> prev		68904						
ANR	69065	Symbol	EG		68904						
ANR	69066	Symbol	data		68904						
ANR	69067	Symbol	* ZEND_VM_STACK_ELEMETS		68904						
ANR	69068	Symbol	* p -> top		68904						
ANR	69069	Symbol	argument_stack		68904						
ANR	69070	Symbol	count		68904						
ANR	69071	Symbol	* EG ( argument_stack ) -> top		68904						
ANR	69072	Symbol	* EG		68904						
ANR	69073	Symbol	ZEND_VM_STACK_ELEMETS		68904						
ANR	69074	Symbol	* * EG		68904						
ANR	69075	Symbol	TSRMLS_DC		68904						
ANR	69076	Symbol	EG ( argument_stack ) -> top		68904						
ANR	69077	Symbol	* ( EG ( argument_stack ) -> top )		68904						
ANR	69078	Symbol	p		68904						
ANR	69079	Symbol	UNEXPECTED		68904						
ANR	69080	Symbol	* count		68904						
ANR	69081	Symbol	r		68904						
ANR	69082	Symbol	EG ( argument_stack ) -> prev		68904						
ANR	69083	Symbol	p -> top		68904						
ANR	69084	Symbol	* p		68904						
ANR	69085	Symbol	* * p		68904						
ANR	69086	Symbol	* ( -- p -> top )		68904						
ANR	69087	Symbol	* ( ZEND_VM_STACK_ELEMETS ( EG ( argument_stack ) ) + count )		68904						
ANR	69088	Function	zend_vm_stack_push_args	1758:0:57210:57623							
ANR	69089	FunctionDef	zend_vm_stack_push_args (int count TSRMLS_DC)		69088	0					
ANR	69090	CompoundStatement		1759:0:57298:57623	69088	0					
ANR	69091	IfStatement	if ( UNEXPECTED ( EG ( argument_stack ) -> top - ZEND_VM_STACK_ELEMETS ( EG ( argument_stack ) ) < count ) || UNEXPECTED ( EG ( argument_stack ) -> top == EG ( argument_stack ) -> end ) )		69088	0					
ANR	69092	Condition	UNEXPECTED ( EG ( argument_stack ) -> top - ZEND_VM_STACK_ELEMETS ( EG ( argument_stack ) ) < count ) || UNEXPECTED ( EG ( argument_stack ) -> top == EG ( argument_stack ) -> end )	1760:5:57305:57459	69088	0	True				
ANR	69093	OrExpression	UNEXPECTED ( EG ( argument_stack ) -> top - ZEND_VM_STACK_ELEMETS ( EG ( argument_stack ) ) < count ) || UNEXPECTED ( EG ( argument_stack ) -> top == EG ( argument_stack ) -> end )		69088	0		||			
ANR	69094	CallExpression	UNEXPECTED ( EG ( argument_stack ) -> top - ZEND_VM_STACK_ELEMETS ( EG ( argument_stack ) ) < count )		69088	0					
ANR	69095	Callee	UNEXPECTED		69088	0					
ANR	69096	Identifier	UNEXPECTED		69088	0					
ANR	69097	ArgumentList	EG ( argument_stack ) -> top - ZEND_VM_STACK_ELEMETS ( EG ( argument_stack ) ) < count		69088	1					
ANR	69098	Argument	EG ( argument_stack ) -> top - ZEND_VM_STACK_ELEMETS ( EG ( argument_stack ) ) < count		69088	0					
ANR	69099	RelationalExpression	EG ( argument_stack ) -> top - ZEND_VM_STACK_ELEMETS ( EG ( argument_stack ) ) < count		69088	0		<			
ANR	69100	AdditiveExpression	EG ( argument_stack ) -> top - ZEND_VM_STACK_ELEMETS ( EG ( argument_stack ) )		69088	0		-			
ANR	69101	PtrMemberAccess	EG ( argument_stack ) -> top		69088	0					
ANR	69102	CallExpression	EG ( argument_stack )		69088	0					
ANR	69103	Callee	EG		69088	0					
ANR	69104	Identifier	EG		69088	0					
ANR	69105	ArgumentList	argument_stack		69088	1					
ANR	69106	Argument	argument_stack		69088	0					
ANR	69107	Identifier	argument_stack		69088	0					
ANR	69108	Identifier	top		69088	1					
ANR	69109	CallExpression	ZEND_VM_STACK_ELEMETS ( EG ( argument_stack ) )		69088	1					
ANR	69110	Callee	ZEND_VM_STACK_ELEMETS		69088	0					
ANR	69111	Identifier	ZEND_VM_STACK_ELEMETS		69088	0					
ANR	69112	ArgumentList	EG ( argument_stack )		69088	1					
ANR	69113	Argument	EG ( argument_stack )		69088	0					
ANR	69114	CallExpression	EG ( argument_stack )		69088	0					
ANR	69115	Callee	EG		69088	0					
ANR	69116	Identifier	EG		69088	0					
ANR	69117	ArgumentList	argument_stack		69088	1					
ANR	69118	Argument	argument_stack		69088	0					
ANR	69119	Identifier	argument_stack		69088	0					
ANR	69120	Identifier	count		69088	1					
ANR	69121	CallExpression	UNEXPECTED ( EG ( argument_stack ) -> top == EG ( argument_stack ) -> end )		69088	1					
ANR	69122	Callee	UNEXPECTED		69088	0					
ANR	69123	Identifier	UNEXPECTED		69088	0					
ANR	69124	ArgumentList	EG ( argument_stack ) -> top == EG ( argument_stack ) -> end		69088	1					
ANR	69125	Argument	EG ( argument_stack ) -> top == EG ( argument_stack ) -> end		69088	0					
ANR	69126	EqualityExpression	EG ( argument_stack ) -> top == EG ( argument_stack ) -> end		69088	0		==			
ANR	69127	PtrMemberAccess	EG ( argument_stack ) -> top		69088	0					
ANR	69128	CallExpression	EG ( argument_stack )		69088	0					
ANR	69129	Callee	EG		69088	0					
ANR	69130	Identifier	EG		69088	0					
ANR	69131	ArgumentList	argument_stack		69088	1					
ANR	69132	Argument	argument_stack		69088	0					
ANR	69133	Identifier	argument_stack		69088	0					
ANR	69134	Identifier	top		69088	1					
ANR	69135	PtrMemberAccess	EG ( argument_stack ) -> end		69088	1					
ANR	69136	CallExpression	EG ( argument_stack )		69088	0					
ANR	69137	Callee	EG		69088	0					
ANR	69138	Identifier	EG		69088	0					
ANR	69139	ArgumentList	argument_stack		69088	1					
ANR	69140	Argument	argument_stack		69088	0					
ANR	69141	Identifier	argument_stack		69088	0					
ANR	69142	Identifier	end		69088	1					
ANR	69143	CompoundStatement		3:69:163:163	69088	1					
ANR	69144	Statement	return	1762:2:57466:57471	69088	0	True				
ANR	69145	Statement	zend_vm_stack_push_args_with_copy	1762:9:57473:57505	69088	1	True				
ANR	69146	Statement	(	1762:42:57506:57506	69088	2	True				
ANR	69147	Statement	count	1762:43:57507:57511	69088	3	True				
ANR	69148	Statement	TSRMLS_CC	1762:49:57513:57521	69088	4	True				
ANR	69149	Statement	)	1762:58:57522:57522	69088	5	True				
ANR	69150	ExpressionStatement		1762:59:57523:57523	69088	6	True				
ANR	69151	ExpressionStatement	* ( EG ( argument_stack ) -> top ) = ( void * ) ( zend_uintptr_t ) count	1764:1:57529:57586	69088	1	True				
ANR	69152	AssignmentExpression	* ( EG ( argument_stack ) -> top ) = ( void * ) ( zend_uintptr_t ) count		69088	0		=			
ANR	69153	UnaryOperationExpression	* ( EG ( argument_stack ) -> top )		69088	0					
ANR	69154	UnaryOperator	*		69088	0					
ANR	69155	PtrMemberAccess	EG ( argument_stack ) -> top		69088	1					
ANR	69156	CallExpression	EG ( argument_stack )		69088	0					
ANR	69157	Callee	EG		69088	0					
ANR	69158	Identifier	EG		69088	0					
ANR	69159	ArgumentList	argument_stack		69088	1					
ANR	69160	Argument	argument_stack		69088	0					
ANR	69161	Identifier	argument_stack		69088	0					
ANR	69162	Identifier	top		69088	1					
ANR	69163	CastExpression	( void * ) ( zend_uintptr_t ) count		69088	1					
ANR	69164	CastTarget	void *		69088	0					
ANR	69165	CastExpression	( zend_uintptr_t ) count		69088	1					
ANR	69166	CastTarget	zend_uintptr_t		69088	0					
ANR	69167	Identifier	count		69088	1					
ANR	69168	ReturnStatement	return EG ( argument_stack ) -> top ++ ;	1765:1:57589:57621	69088	2	True				
ANR	69169	PostIncDecOperationExpression	EG ( argument_stack ) -> top ++		69088	0					
ANR	69170	PtrMemberAccess	EG ( argument_stack ) -> top		69088	0					
ANR	69171	CallExpression	EG ( argument_stack )		69088	0					
ANR	69172	Callee	EG		69088	0					
ANR	69173	Identifier	EG		69088	0					
ANR	69174	ArgumentList	argument_stack		69088	1					
ANR	69175	Argument	argument_stack		69088	0					
ANR	69176	Identifier	argument_stack		69088	0					
ANR	69177	Identifier	top		69088	1					
ANR	69178	IncDec	++		69088	1					
ANR	69179	ReturnType	static zend_always_inline void * *		69088	1					
ANR	69180	Identifier	zend_vm_stack_push_args		69088	2					
ANR	69181	ParameterList	int count TSRMLS_DC		69088	3					
ANR	69182	Parameter	int count TSRMLS_DC	1758:57:57267:57285	69088	0	True				
ANR	69183	ParameterType	int count		69088	0					
ANR	69184	Identifier	TSRMLS_DC		69088	1					
ANR	69185	CFGEntryNode	ENTRY		69088		True				
ANR	69186	CFGExitNode	EXIT		69088		True				
ANR	69187	Symbol	UNEXPECTED		69088						
ANR	69188	Symbol	EG		69088						
ANR	69189	Symbol	argument_stack		69088						
ANR	69190	Symbol	count		69088						
ANR	69191	Symbol	* EG ( argument_stack ) -> top		69088						
ANR	69192	Symbol	EG ( argument_stack ) -> end		69088						
ANR	69193	Symbol	* EG		69088						
ANR	69194	Symbol	ZEND_VM_STACK_ELEMETS		69088						
ANR	69195	Symbol	* * EG		69088						
ANR	69196	Symbol	TSRMLS_DC		69088						
ANR	69197	Symbol	EG ( argument_stack ) -> top		69088						
ANR	69198	Symbol	* ( EG ( argument_stack ) -> top )		69088						
ANR	69199	Function	zend_set_user_opcode_handler	1798:0:58153:58533							
ANR	69200	FunctionDef	"zend_set_user_opcode_handler (zend_uchar opcode , user_opcode_handler_t handler)"		69199	0					
ANR	69201	CompoundStatement		1799:0:58245:58533	69199	0					
ANR	69202	IfStatement	if ( opcode != ZEND_USER_OPCODE )		69199	0					
ANR	69203	Condition	opcode != ZEND_USER_OPCODE	1800:5:58252:58277	69199	0	True				
ANR	69204	EqualityExpression	opcode != ZEND_USER_OPCODE		69199	0		!=			
ANR	69205	Identifier	opcode		69199	0					
ANR	69206	Identifier	ZEND_USER_OPCODE		69199	1					
ANR	69207	CompoundStatement		2:33:34:34	69199	1					
ANR	69208	IfStatement	if ( handler == NULL )		69199	0					
ANR	69209	Condition	handler == NULL	1801:6:58288:58302	69199	0	True				
ANR	69210	EqualityExpression	handler == NULL		69199	0		==			
ANR	69211	Identifier	handler		69199	0					
ANR	69212	Identifier	NULL		69199	1					
ANR	69213	CompoundStatement		3:23:59:59	69199	1					
ANR	69214	ExpressionStatement	zend_user_opcodes [ opcode ] = opcode	1803:3:58348:58382	69199	0	True				
ANR	69215	AssignmentExpression	zend_user_opcodes [ opcode ] = opcode		69199	0		=			
ANR	69216	ArrayIndexing	zend_user_opcodes [ opcode ]		69199	0					
ANR	69217	Identifier	zend_user_opcodes		69199	0					
ANR	69218	Identifier	opcode		69199	1					
ANR	69219	Identifier	opcode		69199	1					
ANR	69220	ElseStatement	else		69199	0					
ANR	69221	CompoundStatement		6:9:147:147	69199	0					
ANR	69222	ExpressionStatement	zend_user_opcodes [ opcode ] = ZEND_USER_OPCODE	1805:3:58398:58442	69199	0	True				
ANR	69223	AssignmentExpression	zend_user_opcodes [ opcode ] = ZEND_USER_OPCODE		69199	0		=			
ANR	69224	ArrayIndexing	zend_user_opcodes [ opcode ]		69199	0					
ANR	69225	Identifier	zend_user_opcodes		69199	0					
ANR	69226	Identifier	opcode		69199	1					
ANR	69227	Identifier	ZEND_USER_OPCODE		69199	1					
ANR	69228	ExpressionStatement	zend_user_opcode_handlers [ opcode ] = handler	1807:2:58450:58493	69199	1	True				
ANR	69229	AssignmentExpression	zend_user_opcode_handlers [ opcode ] = handler		69199	0		=			
ANR	69230	ArrayIndexing	zend_user_opcode_handlers [ opcode ]		69199	0					
ANR	69231	Identifier	zend_user_opcode_handlers		69199	0					
ANR	69232	Identifier	opcode		69199	1					
ANR	69233	Identifier	handler		69199	1					
ANR	69234	ReturnStatement	return SUCCESS ;	1808:2:58497:58511	69199	2	True				
ANR	69235	Identifier	SUCCESS		69199	0					
ANR	69236	ReturnStatement	return FAILURE ;	1810:1:58517:58531	69199	1	True				
ANR	69237	Identifier	FAILURE		69199	0					
ANR	69238	ReturnType	ZEND_API int		69199	1					
ANR	69239	Identifier	zend_set_user_opcode_handler		69199	2					
ANR	69240	ParameterList	"zend_uchar opcode , user_opcode_handler_t handler"		69199	3					
ANR	69241	Parameter	zend_uchar opcode	1798:42:58195:58211	69199	0	True				
ANR	69242	ParameterType	zend_uchar		69199	0					
ANR	69243	Identifier	opcode		69199	1					
ANR	69244	Parameter	user_opcode_handler_t handler	1798:61:58214:58242	69199	1	True				
ANR	69245	ParameterType	user_opcode_handler_t		69199	0					
ANR	69246	Identifier	handler		69199	1					
ANR	69247	CFGEntryNode	ENTRY		69199		True				
ANR	69248	CFGExitNode	EXIT		69199		True				
ANR	69249	Symbol	handler		69199						
ANR	69250	Symbol	NULL		69199						
ANR	69251	Symbol	SUCCESS		69199						
ANR	69252	Symbol	ZEND_USER_OPCODE		69199						
ANR	69253	Symbol	* zend_user_opcodes		69199						
ANR	69254	Symbol	opcode		69199						
ANR	69255	Symbol	zend_user_opcodes		69199						
ANR	69256	Symbol	zend_user_opcode_handlers		69199						
ANR	69257	Symbol	FAILURE		69199						
ANR	69258	Symbol	* zend_user_opcode_handlers		69199						
ANR	69259	Symbol	* opcode		69199						
ANR	69260	Function	zend_get_user_opcode_handler	1813:0:58536:58660							
ANR	69261	FunctionDef	zend_get_user_opcode_handler (zend_uchar opcode)		69260	0					
ANR	69262	CompoundStatement		1814:0:58615:58660	69260	0					
ANR	69263	ReturnStatement	return zend_user_opcode_handlers [ opcode ] ;	1815:1:58618:58658	69260	0	True				
ANR	69264	ArrayIndexing	zend_user_opcode_handlers [ opcode ]		69260	0					
ANR	69265	Identifier	zend_user_opcode_handlers		69260	0					
ANR	69266	Identifier	opcode		69260	1					
ANR	69267	ReturnType	ZEND_API user_opcode_handler_t		69260	1					
ANR	69268	Identifier	zend_get_user_opcode_handler		69260	2					
ANR	69269	ParameterList	zend_uchar opcode		69260	3					
ANR	69270	Parameter	zend_uchar opcode	1813:60:58596:58612	69260	0	True				
ANR	69271	ParameterType	zend_uchar		69260	0					
ANR	69272	Identifier	opcode		69260	1					
ANR	69273	CFGEntryNode	ENTRY		69260		True				
ANR	69274	CFGExitNode	EXIT		69260		True				
ANR	69275	Symbol	opcode		69260						
ANR	69276	Symbol	zend_user_opcode_handlers		69260						
ANR	69277	Symbol	* zend_user_opcode_handlers		69260						
ANR	69278	Symbol	* opcode		69260						
ANR	69279	Function	zend_get_zval_ptr	1818:0:58663:58889							
ANR	69280	FunctionDef	"zend_get_zval_ptr (int op_type , const znode_op * node , const zend_execute_data * execute_data , zend_free_op * should_free , int type TSRMLS_DC)"		69279	0					
ANR	69281	CompoundStatement		1818:154:58817:58889	69279	0					
ANR	69282	ReturnStatement	"return get_zval_ptr ( op_type , node , execute_data , should_free , type ) ;"	1819:1:58820:58887	69279	0	True				
ANR	69283	CallExpression	"get_zval_ptr ( op_type , node , execute_data , should_free , type )"		69279	0					
ANR	69284	Callee	get_zval_ptr		69279	0					
ANR	69285	Identifier	get_zval_ptr		69279	0					
ANR	69286	ArgumentList	op_type		69279	1					
ANR	69287	Argument	op_type		69279	0					
ANR	69288	Identifier	op_type		69279	0					
ANR	69289	Argument	node		69279	1					
ANR	69290	Identifier	node		69279	0					
ANR	69291	Argument	execute_data		69279	2					
ANR	69292	Identifier	execute_data		69279	0					
ANR	69293	Argument	should_free		69279	3					
ANR	69294	Identifier	should_free		69279	0					
ANR	69295	Argument	type		69279	4					
ANR	69296	Identifier	type		69279	0					
ANR	69297	ReturnType	ZEND_API zval *		69279	1					
ANR	69298	Identifier	zend_get_zval_ptr		69279	2					
ANR	69299	ParameterList	"int op_type , const znode_op * node , const zend_execute_data * execute_data , zend_free_op * should_free , int type TSRMLS_DC"		69279	3					
ANR	69300	Parameter	int op_type	1818:33:58696:58706	69279	0	True				
ANR	69301	ParameterType	int		69279	0					
ANR	69302	Identifier	op_type		69279	1					
ANR	69303	Parameter	const znode_op * node	1818:46:58709:58728	69279	1	True				
ANR	69304	ParameterType	const znode_op *		69279	0					
ANR	69305	Identifier	node		69279	1					
ANR	69306	Parameter	const zend_execute_data * execute_data	1818:68:58731:58767	69279	2	True				
ANR	69307	ParameterType	const zend_execute_data *		69279	0					
ANR	69308	Identifier	execute_data		69279	1					
ANR	69309	Parameter	zend_free_op * should_free	1818:107:58770:58794	69279	3	True				
ANR	69310	ParameterType	zend_free_op *		69279	0					
ANR	69311	Identifier	should_free		69279	1					
ANR	69312	Parameter	int type TSRMLS_DC	1818:134:58797:58814	69279	4	True				
ANR	69313	ParameterType	int type		69279	0					
ANR	69314	Identifier	TSRMLS_DC		69279	1					
ANR	69315	CFGEntryNode	ENTRY		69279		True				
ANR	69316	CFGExitNode	EXIT		69279		True				
ANR	69317	Symbol	should_free		69279						
ANR	69318	Symbol	node		69279						
ANR	69319	Symbol	op_type		69279						
ANR	69320	Symbol	get_zval_ptr		69279						
ANR	69321	Symbol	type		69279						
ANR	69322	Symbol	TSRMLS_DC		69279						
ANR	69323	Symbol	execute_data		69279						
ANR	69324	Function	zend_get_zval_ptr_ptr	1822:0:58892:59127							
ANR	69325	FunctionDef	"zend_get_zval_ptr_ptr (int op_type , const znode_op * node , const zend_execute_data * execute_data , zend_free_op * should_free , int type TSRMLS_DC)"		69324	0					
ANR	69326	CompoundStatement		1822:159:59051:59127	69324	0					
ANR	69327	ReturnStatement	"return get_zval_ptr_ptr ( op_type , node , execute_data , should_free , type ) ;"	1823:1:59054:59125	69324	0	True				
ANR	69328	CallExpression	"get_zval_ptr_ptr ( op_type , node , execute_data , should_free , type )"		69324	0					
ANR	69329	Callee	get_zval_ptr_ptr		69324	0					
ANR	69330	Identifier	get_zval_ptr_ptr		69324	0					
ANR	69331	ArgumentList	op_type		69324	1					
ANR	69332	Argument	op_type		69324	0					
ANR	69333	Identifier	op_type		69324	0					
ANR	69334	Argument	node		69324	1					
ANR	69335	Identifier	node		69324	0					
ANR	69336	Argument	execute_data		69324	2					
ANR	69337	Identifier	execute_data		69324	0					
ANR	69338	Argument	should_free		69324	3					
ANR	69339	Identifier	should_free		69324	0					
ANR	69340	Argument	type		69324	4					
ANR	69341	Identifier	type		69324	0					
ANR	69342	ReturnType	ZEND_API zval * *		69324	1					
ANR	69343	Identifier	zend_get_zval_ptr_ptr		69324	2					
ANR	69344	ParameterList	"int op_type , const znode_op * node , const zend_execute_data * execute_data , zend_free_op * should_free , int type TSRMLS_DC"		69324	3					
ANR	69345	Parameter	int op_type	1822:38:58930:58940	69324	0	True				
ANR	69346	ParameterType	int		69324	0					
ANR	69347	Identifier	op_type		69324	1					
ANR	69348	Parameter	const znode_op * node	1822:51:58943:58962	69324	1	True				
ANR	69349	ParameterType	const znode_op *		69324	0					
ANR	69350	Identifier	node		69324	1					
ANR	69351	Parameter	const zend_execute_data * execute_data	1822:73:58965:59001	69324	2	True				
ANR	69352	ParameterType	const zend_execute_data *		69324	0					
ANR	69353	Identifier	execute_data		69324	1					
ANR	69354	Parameter	zend_free_op * should_free	1822:112:59004:59028	69324	3	True				
ANR	69355	ParameterType	zend_free_op *		69324	0					
ANR	69356	Identifier	should_free		69324	1					
ANR	69357	Parameter	int type TSRMLS_DC	1822:139:59031:59048	69324	4	True				
ANR	69358	ParameterType	int type		69324	0					
ANR	69359	Identifier	TSRMLS_DC		69324	1					
ANR	69360	CFGEntryNode	ENTRY		69324		True				
ANR	69361	CFGExitNode	EXIT		69324		True				
ANR	69362	Symbol	should_free		69324						
ANR	69363	Symbol	node		69324						
ANR	69364	Symbol	get_zval_ptr_ptr		69324						
ANR	69365	Symbol	op_type		69324						
ANR	69366	Symbol	type		69324						
ANR	69367	Symbol	TSRMLS_DC		69324						
ANR	69368	Symbol	execute_data		69324						
