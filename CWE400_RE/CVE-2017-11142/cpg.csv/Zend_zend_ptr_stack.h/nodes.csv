command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	106045	File	data/converged/CVE-2017-11142_php-src/Zend_zend_ptr_stack.h								
ANR	106046	ClassDef	_zend_ptr_stack	25:8:1295:1413							
ANR	106047	DeclStmt									
ANR	106048	Decl							int	int	top
ANR	106049	Decl							int	int	max
ANR	106050	DeclStmt									
ANR	106051	Decl							void	void * *	elements
ANR	106052	DeclStmt									
ANR	106053	Decl							void	void * *	top_element
ANR	106054	DeclStmt									
ANR	106055	Decl							zend_bool	zend_bool	persistent
ANR	106056	DeclStmt									
ANR	106057	Decl							_zend_ptr_stack	_zend_ptr_stack	zend_ptr_stack
ANR	106058	DeclStmt									
ANR	106059	Decl							ZEND_API void	ZEND_API void ( zend_ptr_stack * stack )	zend_ptr_stack_init
ANR	106060	DeclStmt									
ANR	106061	Decl							ZEND_API void	"ZEND_API void ( zend_ptr_stack * stack , zend_bool persistent )"	zend_ptr_stack_init_ex
ANR	106062	DeclStmt									
ANR	106063	Decl							ZEND_API void	ZEND_API void ( zend_ptr_stack * stack )	zend_ptr_stack_destroy
ANR	106064	DeclStmt									
ANR	106065	Decl							ZEND_API void	"ZEND_API void ( zend_ptr_stack * stack , void ( * func ) ( void * ) )"	zend_ptr_stack_apply
ANR	106066	DeclStmt									
ANR	106067	Decl							ZEND_API void	"ZEND_API void ( zend_ptr_stack * stack , void ( * func ) ( void * ) , zend_bool free_elements )"	zend_ptr_stack_clean
ANR	106068	DeclStmt									
ANR	106069	Decl							ZEND_API int	ZEND_API int ( zend_ptr_stack * stack )	zend_ptr_stack_num_elements
ANR	106070	Function	zend_ptr_stack_3_push	58:0:2665:3033							
ANR	106071	FunctionDef	"zend_ptr_stack_3_push (zend_ptr_stack * stack , void * a , void * b , void * c)"		106070	0					
ANR	106072	CompoundStatement		59:0:2768:3033	106070	0					
ANR	106073	Statement	define	60:1:2771:2776	106070	0	True				
ANR	106074	Statement	ZEND_PTR_STACK_NUM_ARGS	60:8:2778:2800	106070	1	True				
ANR	106075	Statement	3	60:32:2802:2802	106070	2	True				
ANR	106076	Statement	ZEND_PTR_STACK_RESIZE_IF_NEEDED	62:1:2806:2836	106070	3	True				
ANR	106077	Statement	(	62:32:2837:2837	106070	4	True				
ANR	106078	Statement	stack	62:33:2838:2842	106070	5	True				
ANR	106079	Statement	","	62:38:2843:2843	106070	6	True				
ANR	106080	Statement	ZEND_PTR_STACK_NUM_ARGS	62:40:2845:2867	106070	7	True				
ANR	106081	Statement	)	62:63:2868:2868	106070	8	True				
ANR	106082	ExpressionStatement	stack -> top += ZEND_PTR_STACK_NUM_ARGS	64:1:2872:2909	106070	9	True				
ANR	106083	AssignmentExpression	stack -> top += ZEND_PTR_STACK_NUM_ARGS		106070	0		+=			
ANR	106084	PtrMemberAccess	stack -> top		106070	0					
ANR	106085	Identifier	stack		106070	0					
ANR	106086	Identifier	top		106070	1					
ANR	106087	Identifier	ZEND_PTR_STACK_NUM_ARGS		106070	1					
ANR	106088	ExpressionStatement	* ( stack -> top_element ++ ) = a	65:1:2912:2939	106070	10	True				
ANR	106089	AssignmentExpression	* ( stack -> top_element ++ ) = a		106070	0		=			
ANR	106090	UnaryOperationExpression	* ( stack -> top_element ++ )		106070	0					
ANR	106091	UnaryOperator	*		106070	0					
ANR	106092	PostIncDecOperationExpression	stack -> top_element ++		106070	1					
ANR	106093	PtrMemberAccess	stack -> top_element		106070	0					
ANR	106094	Identifier	stack		106070	0					
ANR	106095	Identifier	top_element		106070	1					
ANR	106096	IncDec	++		106070	1					
ANR	106097	Identifier	a		106070	1					
ANR	106098	ExpressionStatement	* ( stack -> top_element ++ ) = b	66:1:2942:2969	106070	11	True				
ANR	106099	AssignmentExpression	* ( stack -> top_element ++ ) = b		106070	0		=			
ANR	106100	UnaryOperationExpression	* ( stack -> top_element ++ )		106070	0					
ANR	106101	UnaryOperator	*		106070	0					
ANR	106102	PostIncDecOperationExpression	stack -> top_element ++		106070	1					
ANR	106103	PtrMemberAccess	stack -> top_element		106070	0					
ANR	106104	Identifier	stack		106070	0					
ANR	106105	Identifier	top_element		106070	1					
ANR	106106	IncDec	++		106070	1					
ANR	106107	Identifier	b		106070	1					
ANR	106108	ExpressionStatement	* ( stack -> top_element ++ ) = c	67:1:2972:2999	106070	12	True				
ANR	106109	AssignmentExpression	* ( stack -> top_element ++ ) = c		106070	0		=			
ANR	106110	UnaryOperationExpression	* ( stack -> top_element ++ )		106070	0					
ANR	106111	UnaryOperator	*		106070	0					
ANR	106112	PostIncDecOperationExpression	stack -> top_element ++		106070	1					
ANR	106113	PtrMemberAccess	stack -> top_element		106070	0					
ANR	106114	Identifier	stack		106070	0					
ANR	106115	Identifier	top_element		106070	1					
ANR	106116	IncDec	++		106070	1					
ANR	106117	Identifier	c		106070	1					
ANR	106118	Statement	undef	69:1:3003:3007	106070	13	True				
ANR	106119	Statement	ZEND_PTR_STACK_NUM_ARGS	69:7:3009:3031	106070	14	True				
ANR	106120	ReturnType	static zend_always_inline void		106070	1					
ANR	106121	Identifier	zend_ptr_stack_3_push		106070	2					
ANR	106122	ParameterList	"zend_ptr_stack * stack , void * a , void * b , void * c"		106070	3					
ANR	106123	Parameter	zend_ptr_stack * stack	58:53:2718:2738	106070	0	True				
ANR	106124	ParameterType	zend_ptr_stack *		106070	0					
ANR	106125	Identifier	stack		106070	1					
ANR	106126	Parameter	void * a	58:76:2741:2747	106070	1	True				
ANR	106127	ParameterType	void *		106070	0					
ANR	106128	Identifier	a		106070	1					
ANR	106129	Parameter	void * b	58:85:2750:2756	106070	2	True				
ANR	106130	ParameterType	void *		106070	0					
ANR	106131	Identifier	b		106070	1					
ANR	106132	Parameter	void * c	58:94:2759:2765	106070	3	True				
ANR	106133	ParameterType	void *		106070	0					
ANR	106134	Identifier	c		106070	1					
ANR	106135	CFGEntryNode	ENTRY		106070		True				
ANR	106136	CFGExitNode	EXIT		106070		True				
ANR	106137	Symbol	a		106070						
ANR	106138	Symbol	stack		106070						
ANR	106139	Symbol	b		106070						
ANR	106140	Symbol	c		106070						
ANR	106141	Symbol	stack -> top_element		106070						
ANR	106142	Symbol	* ( stack -> top_element ++ )		106070						
ANR	106143	Symbol	* stack		106070						
ANR	106144	Symbol	ZEND_PTR_STACK_NUM_ARGS		106070						
ANR	106145	Symbol	stack -> top		106070						
ANR	106146	Function	zend_ptr_stack_2_push	72:0:3036:3365							
ANR	106147	FunctionDef	"zend_ptr_stack_2_push (zend_ptr_stack * stack , void * a , void * b)"		106146	0					
ANR	106148	CompoundStatement		73:0:3130:3365	106146	0					
ANR	106149	Statement	define	74:1:3133:3138	106146	0	True				
ANR	106150	Statement	ZEND_PTR_STACK_NUM_ARGS	74:8:3140:3162	106146	1	True				
ANR	106151	Statement	2	74:32:3164:3164	106146	2	True				
ANR	106152	Statement	ZEND_PTR_STACK_RESIZE_IF_NEEDED	76:1:3168:3198	106146	3	True				
ANR	106153	Statement	(	76:32:3199:3199	106146	4	True				
ANR	106154	Statement	stack	76:33:3200:3204	106146	5	True				
ANR	106155	Statement	","	76:38:3205:3205	106146	6	True				
ANR	106156	Statement	ZEND_PTR_STACK_NUM_ARGS	76:40:3207:3229	106146	7	True				
ANR	106157	Statement	)	76:63:3230:3230	106146	8	True				
ANR	106158	ExpressionStatement	stack -> top += ZEND_PTR_STACK_NUM_ARGS	78:1:3234:3271	106146	9	True				
ANR	106159	AssignmentExpression	stack -> top += ZEND_PTR_STACK_NUM_ARGS		106146	0		+=			
ANR	106160	PtrMemberAccess	stack -> top		106146	0					
ANR	106161	Identifier	stack		106146	0					
ANR	106162	Identifier	top		106146	1					
ANR	106163	Identifier	ZEND_PTR_STACK_NUM_ARGS		106146	1					
ANR	106164	ExpressionStatement	* ( stack -> top_element ++ ) = a	79:1:3274:3301	106146	10	True				
ANR	106165	AssignmentExpression	* ( stack -> top_element ++ ) = a		106146	0		=			
ANR	106166	UnaryOperationExpression	* ( stack -> top_element ++ )		106146	0					
ANR	106167	UnaryOperator	*		106146	0					
ANR	106168	PostIncDecOperationExpression	stack -> top_element ++		106146	1					
ANR	106169	PtrMemberAccess	stack -> top_element		106146	0					
ANR	106170	Identifier	stack		106146	0					
ANR	106171	Identifier	top_element		106146	1					
ANR	106172	IncDec	++		106146	1					
ANR	106173	Identifier	a		106146	1					
ANR	106174	ExpressionStatement	* ( stack -> top_element ++ ) = b	80:1:3304:3331	106146	11	True				
ANR	106175	AssignmentExpression	* ( stack -> top_element ++ ) = b		106146	0		=			
ANR	106176	UnaryOperationExpression	* ( stack -> top_element ++ )		106146	0					
ANR	106177	UnaryOperator	*		106146	0					
ANR	106178	PostIncDecOperationExpression	stack -> top_element ++		106146	1					
ANR	106179	PtrMemberAccess	stack -> top_element		106146	0					
ANR	106180	Identifier	stack		106146	0					
ANR	106181	Identifier	top_element		106146	1					
ANR	106182	IncDec	++		106146	1					
ANR	106183	Identifier	b		106146	1					
ANR	106184	Statement	undef	82:1:3335:3339	106146	12	True				
ANR	106185	Statement	ZEND_PTR_STACK_NUM_ARGS	82:7:3341:3363	106146	13	True				
ANR	106186	ReturnType	static zend_always_inline void		106146	1					
ANR	106187	Identifier	zend_ptr_stack_2_push		106146	2					
ANR	106188	ParameterList	"zend_ptr_stack * stack , void * a , void * b"		106146	3					
ANR	106189	Parameter	zend_ptr_stack * stack	72:53:3089:3109	106146	0	True				
ANR	106190	ParameterType	zend_ptr_stack *		106146	0					
ANR	106191	Identifier	stack		106146	1					
ANR	106192	Parameter	void * a	72:76:3112:3118	106146	1	True				
ANR	106193	ParameterType	void *		106146	0					
ANR	106194	Identifier	a		106146	1					
ANR	106195	Parameter	void * b	72:85:3121:3127	106146	2	True				
ANR	106196	ParameterType	void *		106146	0					
ANR	106197	Identifier	b		106146	1					
ANR	106198	CFGEntryNode	ENTRY		106146		True				
ANR	106199	CFGExitNode	EXIT		106146		True				
ANR	106200	Symbol	a		106146						
ANR	106201	Symbol	stack		106146						
ANR	106202	Symbol	b		106146						
ANR	106203	Symbol	stack -> top_element		106146						
ANR	106204	Symbol	* ( stack -> top_element ++ )		106146						
ANR	106205	Symbol	* stack		106146						
ANR	106206	Symbol	ZEND_PTR_STACK_NUM_ARGS		106146						
ANR	106207	Symbol	stack -> top		106146						
ANR	106208	Function	zend_ptr_stack_3_pop	85:0:3368:3586							
ANR	106209	FunctionDef	"zend_ptr_stack_3_pop (zend_ptr_stack * stack , void * * a , void * * b , void * * c)"		106208	0					
ANR	106210	CompoundStatement		86:0:3473:3586	106208	0					
ANR	106211	ExpressionStatement	* a = * ( -- stack -> top_element )	87:1:3476:3504	106208	0	True				
ANR	106212	AssignmentExpression	* a = * ( -- stack -> top_element )		106208	0		=			
ANR	106213	UnaryOperationExpression	* a		106208	0					
ANR	106214	UnaryOperator	*		106208	0					
ANR	106215	Identifier	a		106208	1					
ANR	106216	UnaryOperationExpression	* ( -- stack -> top_element )		106208	1					
ANR	106217	UnaryOperator	*		106208	0					
ANR	106218	UnaryExpression	-- stack -> top_element		106208	1					
ANR	106219	IncDec	--		106208	0					
ANR	106220	PtrMemberAccess	stack -> top_element		106208	1					
ANR	106221	Identifier	stack		106208	0					
ANR	106222	Identifier	top_element		106208	1					
ANR	106223	ExpressionStatement	* b = * ( -- stack -> top_element )	88:1:3507:3535	106208	1	True				
ANR	106224	AssignmentExpression	* b = * ( -- stack -> top_element )		106208	0		=			
ANR	106225	UnaryOperationExpression	* b		106208	0					
ANR	106226	UnaryOperator	*		106208	0					
ANR	106227	Identifier	b		106208	1					
ANR	106228	UnaryOperationExpression	* ( -- stack -> top_element )		106208	1					
ANR	106229	UnaryOperator	*		106208	0					
ANR	106230	UnaryExpression	-- stack -> top_element		106208	1					
ANR	106231	IncDec	--		106208	0					
ANR	106232	PtrMemberAccess	stack -> top_element		106208	1					
ANR	106233	Identifier	stack		106208	0					
ANR	106234	Identifier	top_element		106208	1					
ANR	106235	ExpressionStatement	* c = * ( -- stack -> top_element )	89:1:3538:3566	106208	2	True				
ANR	106236	AssignmentExpression	* c = * ( -- stack -> top_element )		106208	0		=			
ANR	106237	UnaryOperationExpression	* c		106208	0					
ANR	106238	UnaryOperator	*		106208	0					
ANR	106239	Identifier	c		106208	1					
ANR	106240	UnaryOperationExpression	* ( -- stack -> top_element )		106208	1					
ANR	106241	UnaryOperator	*		106208	0					
ANR	106242	UnaryExpression	-- stack -> top_element		106208	1					
ANR	106243	IncDec	--		106208	0					
ANR	106244	PtrMemberAccess	stack -> top_element		106208	1					
ANR	106245	Identifier	stack		106208	0					
ANR	106246	Identifier	top_element		106208	1					
ANR	106247	ExpressionStatement	stack -> top -= 3	90:1:3569:3584	106208	3	True				
ANR	106248	AssignmentExpression	stack -> top -= 3		106208	0		-=			
ANR	106249	PtrMemberAccess	stack -> top		106208	0					
ANR	106250	Identifier	stack		106208	0					
ANR	106251	Identifier	top		106208	1					
ANR	106252	PrimaryExpression	3		106208	1					
ANR	106253	ReturnType	static zend_always_inline void		106208	1					
ANR	106254	Identifier	zend_ptr_stack_3_pop		106208	2					
ANR	106255	ParameterList	"zend_ptr_stack * stack , void * * a , void * * b , void * * c"		106208	3					
ANR	106256	Parameter	zend_ptr_stack * stack	85:52:3420:3440	106208	0	True				
ANR	106257	ParameterType	zend_ptr_stack *		106208	0					
ANR	106258	Identifier	stack		106208	1					
ANR	106259	Parameter	void * * a	85:75:3443:3450	106208	1	True				
ANR	106260	ParameterType	void * *		106208	0					
ANR	106261	Identifier	a		106208	1					
ANR	106262	Parameter	void * * b	85:85:3453:3460	106208	2	True				
ANR	106263	ParameterType	void * *		106208	0					
ANR	106264	Identifier	b		106208	1					
ANR	106265	Parameter	void * * c	85:95:3463:3470	106208	3	True				
ANR	106266	ParameterType	void * *		106208	0					
ANR	106267	Identifier	c		106208	1					
ANR	106268	CFGEntryNode	ENTRY		106208		True				
ANR	106269	CFGExitNode	EXIT		106208		True				
ANR	106270	Symbol	a		106208						
ANR	106271	Symbol	stack		106208						
ANR	106272	Symbol	b		106208						
ANR	106273	Symbol	c		106208						
ANR	106274	Symbol	* a		106208						
ANR	106275	Symbol	* b		106208						
ANR	106276	Symbol	* stack -> top_element		106208						
ANR	106277	Symbol	* c		106208						
ANR	106278	Symbol	* ( -- stack -> top_element )		106208						
ANR	106279	Symbol	stack -> top_element		106208						
ANR	106280	Symbol	* * stack		106208						
ANR	106281	Symbol	* stack		106208						
ANR	106282	Symbol	stack -> top		106208						
ANR	106283	Function	zend_ptr_stack_2_pop	93:0:3589:3766							
ANR	106284	FunctionDef	"zend_ptr_stack_2_pop (zend_ptr_stack * stack , void * * a , void * * b)"		106283	0					
ANR	106285	CompoundStatement		94:0:3684:3766	106283	0					
ANR	106286	ExpressionStatement	* a = * ( -- stack -> top_element )	95:1:3687:3715	106283	0	True				
ANR	106287	AssignmentExpression	* a = * ( -- stack -> top_element )		106283	0		=			
ANR	106288	UnaryOperationExpression	* a		106283	0					
ANR	106289	UnaryOperator	*		106283	0					
ANR	106290	Identifier	a		106283	1					
ANR	106291	UnaryOperationExpression	* ( -- stack -> top_element )		106283	1					
ANR	106292	UnaryOperator	*		106283	0					
ANR	106293	UnaryExpression	-- stack -> top_element		106283	1					
ANR	106294	IncDec	--		106283	0					
ANR	106295	PtrMemberAccess	stack -> top_element		106283	1					
ANR	106296	Identifier	stack		106283	0					
ANR	106297	Identifier	top_element		106283	1					
ANR	106298	ExpressionStatement	* b = * ( -- stack -> top_element )	96:1:3718:3746	106283	1	True				
ANR	106299	AssignmentExpression	* b = * ( -- stack -> top_element )		106283	0		=			
ANR	106300	UnaryOperationExpression	* b		106283	0					
ANR	106301	UnaryOperator	*		106283	0					
ANR	106302	Identifier	b		106283	1					
ANR	106303	UnaryOperationExpression	* ( -- stack -> top_element )		106283	1					
ANR	106304	UnaryOperator	*		106283	0					
ANR	106305	UnaryExpression	-- stack -> top_element		106283	1					
ANR	106306	IncDec	--		106283	0					
ANR	106307	PtrMemberAccess	stack -> top_element		106283	1					
ANR	106308	Identifier	stack		106283	0					
ANR	106309	Identifier	top_element		106283	1					
ANR	106310	ExpressionStatement	stack -> top -= 2	97:1:3749:3764	106283	2	True				
ANR	106311	AssignmentExpression	stack -> top -= 2		106283	0		-=			
ANR	106312	PtrMemberAccess	stack -> top		106283	0					
ANR	106313	Identifier	stack		106283	0					
ANR	106314	Identifier	top		106283	1					
ANR	106315	PrimaryExpression	2		106283	1					
ANR	106316	ReturnType	static zend_always_inline void		106283	1					
ANR	106317	Identifier	zend_ptr_stack_2_pop		106283	2					
ANR	106318	ParameterList	"zend_ptr_stack * stack , void * * a , void * * b"		106283	3					
ANR	106319	Parameter	zend_ptr_stack * stack	93:52:3641:3661	106283	0	True				
ANR	106320	ParameterType	zend_ptr_stack *		106283	0					
ANR	106321	Identifier	stack		106283	1					
ANR	106322	Parameter	void * * a	93:75:3664:3671	106283	1	True				
ANR	106323	ParameterType	void * *		106283	0					
ANR	106324	Identifier	a		106283	1					
ANR	106325	Parameter	void * * b	93:85:3674:3681	106283	2	True				
ANR	106326	ParameterType	void * *		106283	0					
ANR	106327	Identifier	b		106283	1					
ANR	106328	CFGEntryNode	ENTRY		106283		True				
ANR	106329	CFGExitNode	EXIT		106283		True				
ANR	106330	Symbol	a		106283						
ANR	106331	Symbol	stack		106283						
ANR	106332	Symbol	b		106283						
ANR	106333	Symbol	* ( -- stack -> top_element )		106283						
ANR	106334	Symbol	stack -> top_element		106283						
ANR	106335	Symbol	* * stack		106283						
ANR	106336	Symbol	* stack		106283						
ANR	106337	Symbol	* a		106283						
ANR	106338	Symbol	* b		106283						
ANR	106339	Symbol	stack -> top		106283						
ANR	106340	Symbol	* stack -> top_element		106283						
ANR	106341	Function	zend_ptr_stack_push	100:0:3769:3947							
ANR	106342	FunctionDef	"zend_ptr_stack_push (zend_ptr_stack * stack , void * ptr)"		106341	0					
ANR	106343	CompoundStatement		101:0:3854:3947	106341	0					
ANR	106344	Statement	ZEND_PTR_STACK_RESIZE_IF_NEEDED	102:1:3857:3887	106341	0	True				
ANR	106345	Statement	(	102:32:3888:3888	106341	1	True				
ANR	106346	Statement	stack	102:33:3889:3893	106341	2	True				
ANR	106347	Statement	","	102:38:3894:3894	106341	3	True				
ANR	106348	Statement	1	102:40:3896:3896	106341	4	True				
ANR	106349	Statement	)	102:41:3897:3897	106341	5	True				
ANR	106350	ExpressionStatement	stack -> top ++	104:1:3901:3913	106341	6	True				
ANR	106351	PostIncDecOperationExpression	stack -> top ++		106341	0					
ANR	106352	PtrMemberAccess	stack -> top		106341	0					
ANR	106353	Identifier	stack		106341	0					
ANR	106354	Identifier	top		106341	1					
ANR	106355	IncDec	++		106341	1					
ANR	106356	ExpressionStatement	* ( stack -> top_element ++ ) = ptr	105:1:3916:3945	106341	7	True				
ANR	106357	AssignmentExpression	* ( stack -> top_element ++ ) = ptr		106341	0		=			
ANR	106358	UnaryOperationExpression	* ( stack -> top_element ++ )		106341	0					
ANR	106359	UnaryOperator	*		106341	0					
ANR	106360	PostIncDecOperationExpression	stack -> top_element ++		106341	1					
ANR	106361	PtrMemberAccess	stack -> top_element		106341	0					
ANR	106362	Identifier	stack		106341	0					
ANR	106363	Identifier	top_element		106341	1					
ANR	106364	IncDec	++		106341	1					
ANR	106365	Identifier	ptr		106341	1					
ANR	106366	ReturnType	static zend_always_inline void		106341	1					
ANR	106367	Identifier	zend_ptr_stack_push		106341	2					
ANR	106368	ParameterList	"zend_ptr_stack * stack , void * ptr"		106341	3					
ANR	106369	Parameter	zend_ptr_stack * stack	100:51:3820:3840	106341	0	True				
ANR	106370	ParameterType	zend_ptr_stack *		106341	0					
ANR	106371	Identifier	stack		106341	1					
ANR	106372	Parameter	void * ptr	100:74:3843:3851	106341	1	True				
ANR	106373	ParameterType	void *		106341	0					
ANR	106374	Identifier	ptr		106341	1					
ANR	106375	CFGEntryNode	ENTRY		106341		True				
ANR	106376	CFGExitNode	EXIT		106341		True				
ANR	106377	Symbol	stack		106341						
ANR	106378	Symbol	stack -> top_element		106341						
ANR	106379	Symbol	* ( stack -> top_element ++ )		106341						
ANR	106380	Symbol	* stack		106341						
ANR	106381	Symbol	stack -> top		106341						
ANR	106382	Symbol	ptr		106341						
ANR	106383	Function	zend_ptr_stack_pop	108:0:3950:4074							
ANR	106384	FunctionDef	zend_ptr_stack_pop (zend_ptr_stack * stack)		106383	0					
ANR	106385	CompoundStatement		109:0:4024:4074	106383	0					
ANR	106386	ExpressionStatement	stack -> top --	110:1:4027:4039	106383	0	True				
ANR	106387	PostIncDecOperationExpression	stack -> top --		106383	0					
ANR	106388	PtrMemberAccess	stack -> top		106383	0					
ANR	106389	Identifier	stack		106383	0					
ANR	106390	Identifier	top		106383	1					
ANR	106391	IncDec	--		106383	1					
ANR	106392	ReturnStatement	return * ( -- stack -> top_element ) ;	111:1:4042:4072	106383	1	True				
ANR	106393	UnaryOperationExpression	* ( -- stack -> top_element )		106383	0					
ANR	106394	UnaryOperator	*		106383	0					
ANR	106395	UnaryExpression	-- stack -> top_element		106383	1					
ANR	106396	IncDec	--		106383	0					
ANR	106397	PtrMemberAccess	stack -> top_element		106383	1					
ANR	106398	Identifier	stack		106383	0					
ANR	106399	Identifier	top_element		106383	1					
ANR	106400	ReturnType	static zend_always_inline void *		106383	1					
ANR	106401	Identifier	zend_ptr_stack_pop		106383	2					
ANR	106402	ParameterList	zend_ptr_stack * stack		106383	3					
ANR	106403	Parameter	zend_ptr_stack * stack	108:51:4001:4021	106383	0	True				
ANR	106404	ParameterType	zend_ptr_stack *		106383	0					
ANR	106405	Identifier	stack		106383	1					
ANR	106406	CFGEntryNode	ENTRY		106383		True				
ANR	106407	CFGExitNode	EXIT		106383		True				
ANR	106408	Symbol	stack		106383						
ANR	106409	Symbol	* ( -- stack -> top_element )		106383						
ANR	106410	Symbol	stack -> top_element		106383						
ANR	106411	Symbol	* * stack		106383						
ANR	106412	Symbol	* stack		106383						
ANR	106413	Symbol	stack -> top		106383						
ANR	106414	Symbol	* stack -> top_element		106383						
ANR	106415	Function	zend_ptr_stack_top	114:0:4077:4185							
ANR	106416	FunctionDef	zend_ptr_stack_top (zend_ptr_stack * stack)		106415	0					
ANR	106417	CompoundStatement		115:0:4139:4185	106415	0					
ANR	106418	ReturnStatement	return stack -> elements [ stack -> top - 1 ] ;	116:4:4145:4183	106415	0	True				
ANR	106419	ArrayIndexing	stack -> elements [ stack -> top - 1 ]		106415	0					
ANR	106420	PtrMemberAccess	stack -> elements		106415	0					
ANR	106421	Identifier	stack		106415	0					
ANR	106422	Identifier	elements		106415	1					
ANR	106423	AdditiveExpression	stack -> top - 1		106415	1		-			
ANR	106424	PtrMemberAccess	stack -> top		106415	0					
ANR	106425	Identifier	stack		106415	0					
ANR	106426	Identifier	top		106415	1					
ANR	106427	PrimaryExpression	1		106415	1					
ANR	106428	ReturnType	static inline void *		106415	1					
ANR	106429	Identifier	zend_ptr_stack_top		106415	2					
ANR	106430	ParameterList	zend_ptr_stack * stack		106415	3					
ANR	106431	Parameter	zend_ptr_stack * stack	114:39:4116:4136	106415	0	True				
ANR	106432	ParameterType	zend_ptr_stack *		106415	0					
ANR	106433	Identifier	stack		106415	1					
ANR	106434	CFGEntryNode	ENTRY		106415		True				
ANR	106435	CFGExitNode	EXIT		106415		True				
ANR	106436	Symbol	stack		106415						
ANR	106437	Symbol	* stack -> top		106415						
ANR	106438	Symbol	* * stack		106415						
ANR	106439	Symbol	* stack		106415						
ANR	106440	Symbol	* stack -> elements		106415						
ANR	106441	Symbol	stack -> top		106415						
ANR	106442	Symbol	stack -> elements		106415						
