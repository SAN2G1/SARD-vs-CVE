command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	1008500	File	data/converged/CVE-2017-11142_php-src/ext_pcre_pcrelib_sljit_sljitNativeARM_32.c								
ANR	1008501	Function	sljit_get_platform_name	27:0:1455:1771							
ANR	1008502	FunctionDef	sljit_get_platform_name ()		1008501	0					
ANR	1008503	CompoundStatement		28:0:1528:1771	1008501	0					
ANR	1008504	Statement	return	30:1:1588:1593	1008501	0	True				
ANR	1008505	Statement	"""ARMv7"""	30:8:1595:1601	1008501	1	True				
ANR	1008506	ExpressionStatement	SLJIT_CPUINFO	30:16:1603:1616	1008501	2	True				
ANR	1008507	Identifier	SLJIT_CPUINFO		1008501	0					
ANR	1008508	ReturnType	SLJIT_API_FUNC_ATTRIBUTE SLJIT_CONST char *		1008501	1					
ANR	1008509	Identifier	sljit_get_platform_name		1008501	2					
ANR	1008510	ParameterList			1008501	3					
ANR	1008511	CFGEntryNode	ENTRY		1008501		True				
ANR	1008512	CFGExitNode	EXIT		1008501		True				
ANR	1008513	DeclStmt									
ANR	1008514	Decl							SLJIT_CONST sljit_ub	SLJIT_CONST sljit_ub [ SLJIT_NUMBER_OF_REGISTERS + 6 ]	reg_map
ANR	1008515	Function	push_cpool	129:0:4542:5681							
ANR	1008516	FunctionDef	push_cpool (struct sljit_compiler * compiler)		1008515	0					
ANR	1008517	CompoundStatement		130:0:4602:5681	1008515	0					
ANR	1008518	IdentifierDeclStatement	sljit_uw * inst ;	132:1:4667:4681	1008515	0	True				
ANR	1008519	IdentifierDecl	* inst		1008515	0					
ANR	1008520	IdentifierDeclType	sljit_uw *		1008515	0					
ANR	1008521	Identifier	inst		1008515	1					
ANR	1008522	IdentifierDeclStatement	sljit_uw * cpool_ptr ;	133:1:4684:4703	1008515	1	True				
ANR	1008523	IdentifierDecl	* cpool_ptr		1008515	0					
ANR	1008524	IdentifierDeclType	sljit_uw *		1008515	0					
ANR	1008525	Identifier	cpool_ptr		1008515	1					
ANR	1008526	IdentifierDeclStatement	sljit_uw * cpool_end ;	134:1:4706:4725	1008515	2	True				
ANR	1008527	IdentifierDecl	* cpool_end		1008515	0					
ANR	1008528	IdentifierDeclType	sljit_uw *		1008515	0					
ANR	1008529	Identifier	cpool_end		1008515	1					
ANR	1008530	IdentifierDeclStatement	sljit_si i ;	135:1:4728:4738	1008515	3	True				
ANR	1008531	IdentifierDecl	i		1008515	0					
ANR	1008532	IdentifierDeclType	sljit_si		1008515	0					
ANR	1008533	Identifier	i		1008515	1					
ANR	1008534	IfStatement	if ( compiler -> last_label && compiler -> last_label -> size == compiler -> size )		1008515	4					
ANR	1008535	Condition	compiler -> last_label && compiler -> last_label -> size == compiler -> size	138:5:4812:4879	1008515	0	True				
ANR	1008536	AndExpression	compiler -> last_label && compiler -> last_label -> size == compiler -> size		1008515	0		&&			
ANR	1008537	PtrMemberAccess	compiler -> last_label		1008515	0					
ANR	1008538	Identifier	compiler		1008515	0					
ANR	1008539	Identifier	last_label		1008515	1					
ANR	1008540	EqualityExpression	compiler -> last_label -> size == compiler -> size		1008515	1		==			
ANR	1008541	PtrMemberAccess	compiler -> last_label -> size		1008515	0					
ANR	1008542	PtrMemberAccess	compiler -> last_label		1008515	0					
ANR	1008543	Identifier	compiler		1008515	0					
ANR	1008544	Identifier	last_label		1008515	1					
ANR	1008545	Identifier	size		1008515	1					
ANR	1008546	PtrMemberAccess	compiler -> size		1008515	1					
ANR	1008547	Identifier	compiler		1008515	0					
ANR	1008548	Identifier	size		1008515	1					
ANR	1008549	ExpressionStatement	compiler -> last_label -> size += compiler -> cpool_fill + ( CONST_POOL_ALIGNMENT - 1 ) + 1	139:2:4884:4967	1008515	1	True				
ANR	1008550	AssignmentExpression	compiler -> last_label -> size += compiler -> cpool_fill + ( CONST_POOL_ALIGNMENT - 1 ) + 1		1008515	0		+=			
ANR	1008551	PtrMemberAccess	compiler -> last_label -> size		1008515	0					
ANR	1008552	PtrMemberAccess	compiler -> last_label		1008515	0					
ANR	1008553	Identifier	compiler		1008515	0					
ANR	1008554	Identifier	last_label		1008515	1					
ANR	1008555	Identifier	size		1008515	1					
ANR	1008556	AdditiveExpression	compiler -> cpool_fill + ( CONST_POOL_ALIGNMENT - 1 ) + 1		1008515	1		+			
ANR	1008557	PtrMemberAccess	compiler -> cpool_fill		1008515	0					
ANR	1008558	Identifier	compiler		1008515	0					
ANR	1008559	Identifier	cpool_fill		1008515	1					
ANR	1008560	AdditiveExpression	( CONST_POOL_ALIGNMENT - 1 ) + 1		1008515	1		+			
ANR	1008561	AdditiveExpression	CONST_POOL_ALIGNMENT - 1		1008515	0		-			
ANR	1008562	Identifier	CONST_POOL_ALIGNMENT		1008515	0					
ANR	1008563	PrimaryExpression	1		1008515	1					
ANR	1008564	PrimaryExpression	1		1008515	1					
ANR	1008565	ExpressionStatement	SLJIT_ASSERT ( compiler -> cpool_fill > 0 && compiler -> cpool_fill <= CPOOL_SIZE )	141:1:4971:5047	1008515	5	True				
ANR	1008566	CallExpression	SLJIT_ASSERT ( compiler -> cpool_fill > 0 && compiler -> cpool_fill <= CPOOL_SIZE )		1008515	0					
ANR	1008567	Callee	SLJIT_ASSERT		1008515	0					
ANR	1008568	Identifier	SLJIT_ASSERT		1008515	0					
ANR	1008569	ArgumentList	compiler -> cpool_fill > 0 && compiler -> cpool_fill <= CPOOL_SIZE		1008515	1					
ANR	1008570	Argument	compiler -> cpool_fill > 0 && compiler -> cpool_fill <= CPOOL_SIZE		1008515	0					
ANR	1008571	AndExpression	compiler -> cpool_fill > 0 && compiler -> cpool_fill <= CPOOL_SIZE		1008515	0		&&			
ANR	1008572	RelationalExpression	compiler -> cpool_fill > 0		1008515	0		>			
ANR	1008573	PtrMemberAccess	compiler -> cpool_fill		1008515	0					
ANR	1008574	Identifier	compiler		1008515	0					
ANR	1008575	Identifier	cpool_fill		1008515	1					
ANR	1008576	PrimaryExpression	0		1008515	1					
ANR	1008577	RelationalExpression	compiler -> cpool_fill <= CPOOL_SIZE		1008515	1		<=			
ANR	1008578	PtrMemberAccess	compiler -> cpool_fill		1008515	0					
ANR	1008579	Identifier	compiler		1008515	0					
ANR	1008580	Identifier	cpool_fill		1008515	1					
ANR	1008581	Identifier	CPOOL_SIZE		1008515	1					
ANR	1008582	ExpressionStatement	"inst = ( sljit_uw * ) ensure_buf ( compiler , sizeof ( sljit_uw ) )"	142:1:5050:5106	1008515	6	True				
ANR	1008583	AssignmentExpression	"inst = ( sljit_uw * ) ensure_buf ( compiler , sizeof ( sljit_uw ) )"		1008515	0		=			
ANR	1008584	Identifier	inst		1008515	0					
ANR	1008585	CastExpression	"( sljit_uw * ) ensure_buf ( compiler , sizeof ( sljit_uw ) )"		1008515	1					
ANR	1008586	CastTarget	sljit_uw *		1008515	0					
ANR	1008587	CallExpression	"ensure_buf ( compiler , sizeof ( sljit_uw ) )"		1008515	1					
ANR	1008588	Callee	ensure_buf		1008515	0					
ANR	1008589	Identifier	ensure_buf		1008515	0					
ANR	1008590	ArgumentList	compiler		1008515	1					
ANR	1008591	Argument	compiler		1008515	0					
ANR	1008592	Identifier	compiler		1008515	0					
ANR	1008593	Argument	sizeof ( sljit_uw )		1008515	1					
ANR	1008594	SizeofExpression	sizeof ( sljit_uw )		1008515	0					
ANR	1008595	Sizeof	sizeof		1008515	0					
ANR	1008596	SizeofOperand	sljit_uw		1008515	1					
ANR	1008597	ExpressionStatement	FAIL_IF ( ! inst )	143:1:5109:5123	1008515	7	True				
ANR	1008598	CallExpression	FAIL_IF ( ! inst )		1008515	0					
ANR	1008599	Callee	FAIL_IF		1008515	0					
ANR	1008600	Identifier	FAIL_IF		1008515	0					
ANR	1008601	ArgumentList	! inst		1008515	1					
ANR	1008602	Argument	! inst		1008515	0					
ANR	1008603	UnaryOperationExpression	! inst		1008515	0					
ANR	1008604	UnaryOperator	!		1008515	0					
ANR	1008605	Identifier	inst		1008515	1					
ANR	1008606	ExpressionStatement	compiler -> size ++	144:1:5126:5142	1008515	8	True				
ANR	1008607	PostIncDecOperationExpression	compiler -> size ++		1008515	0					
ANR	1008608	PtrMemberAccess	compiler -> size		1008515	0					
ANR	1008609	Identifier	compiler		1008515	0					
ANR	1008610	Identifier	size		1008515	1					
ANR	1008611	IncDec	++		1008515	1					
ANR	1008612	ExpressionStatement	* inst = 0xff000000 | compiler -> cpool_fill	145:1:5145:5186	1008515	9	True				
ANR	1008613	AssignmentExpression	* inst = 0xff000000 | compiler -> cpool_fill		1008515	0		=			
ANR	1008614	UnaryOperationExpression	* inst		1008515	0					
ANR	1008615	UnaryOperator	*		1008515	0					
ANR	1008616	Identifier	inst		1008515	1					
ANR	1008617	InclusiveOrExpression	0xff000000 | compiler -> cpool_fill		1008515	1		|			
ANR	1008618	PrimaryExpression	0xff000000		1008515	0					
ANR	1008619	PtrMemberAccess	compiler -> cpool_fill		1008515	1					
ANR	1008620	Identifier	compiler		1008515	0					
ANR	1008621	Identifier	cpool_fill		1008515	1					
ANR	1008622	ForStatement	for ( i = 0 ; i < CONST_POOL_ALIGNMENT - 1 ; i ++ )		1008515	10					
ANR	1008623	ForInit	i = 0 ;	147:6:5195:5200	1008515	0	True				
ANR	1008624	AssignmentExpression	i = 0		1008515	0		=			
ANR	1008625	Identifier	i		1008515	0					
ANR	1008626	PrimaryExpression	0		1008515	1					
ANR	1008627	Condition	i < CONST_POOL_ALIGNMENT - 1	147:13:5202:5229	1008515	1	True				
ANR	1008628	RelationalExpression	i < CONST_POOL_ALIGNMENT - 1		1008515	0		<			
ANR	1008629	Identifier	i		1008515	0					
ANR	1008630	AdditiveExpression	CONST_POOL_ALIGNMENT - 1		1008515	1		-			
ANR	1008631	Identifier	CONST_POOL_ALIGNMENT		1008515	0					
ANR	1008632	PrimaryExpression	1		1008515	1					
ANR	1008633	PostIncDecOperationExpression	i ++	147:43:5232:5234	1008515	2	True				
ANR	1008634	Identifier	i		1008515	0					
ANR	1008635	IncDec	++		1008515	1					
ANR	1008636	CompoundStatement		18:48:634:634	1008515	3					
ANR	1008637	ExpressionStatement	"inst = ( sljit_uw * ) ensure_buf ( compiler , sizeof ( sljit_uw ) )"	148:2:5241:5297	1008515	0	True				
ANR	1008638	AssignmentExpression	"inst = ( sljit_uw * ) ensure_buf ( compiler , sizeof ( sljit_uw ) )"		1008515	0		=			
ANR	1008639	Identifier	inst		1008515	0					
ANR	1008640	CastExpression	"( sljit_uw * ) ensure_buf ( compiler , sizeof ( sljit_uw ) )"		1008515	1					
ANR	1008641	CastTarget	sljit_uw *		1008515	0					
ANR	1008642	CallExpression	"ensure_buf ( compiler , sizeof ( sljit_uw ) )"		1008515	1					
ANR	1008643	Callee	ensure_buf		1008515	0					
ANR	1008644	Identifier	ensure_buf		1008515	0					
ANR	1008645	ArgumentList	compiler		1008515	1					
ANR	1008646	Argument	compiler		1008515	0					
ANR	1008647	Identifier	compiler		1008515	0					
ANR	1008648	Argument	sizeof ( sljit_uw )		1008515	1					
ANR	1008649	SizeofExpression	sizeof ( sljit_uw )		1008515	0					
ANR	1008650	Sizeof	sizeof		1008515	0					
ANR	1008651	SizeofOperand	sljit_uw		1008515	1					
ANR	1008652	ExpressionStatement	FAIL_IF ( ! inst )	149:2:5301:5315	1008515	1	True				
ANR	1008653	CallExpression	FAIL_IF ( ! inst )		1008515	0					
ANR	1008654	Callee	FAIL_IF		1008515	0					
ANR	1008655	Identifier	FAIL_IF		1008515	0					
ANR	1008656	ArgumentList	! inst		1008515	1					
ANR	1008657	Argument	! inst		1008515	0					
ANR	1008658	UnaryOperationExpression	! inst		1008515	0					
ANR	1008659	UnaryOperator	!		1008515	0					
ANR	1008660	Identifier	inst		1008515	1					
ANR	1008661	ExpressionStatement	compiler -> size ++	150:2:5319:5335	1008515	2	True				
ANR	1008662	PostIncDecOperationExpression	compiler -> size ++		1008515	0					
ANR	1008663	PtrMemberAccess	compiler -> size		1008515	0					
ANR	1008664	Identifier	compiler		1008515	0					
ANR	1008665	Identifier	size		1008515	1					
ANR	1008666	IncDec	++		1008515	1					
ANR	1008667	ExpressionStatement	* inst = 0	151:2:5339:5348	1008515	3	True				
ANR	1008668	AssignmentExpression	* inst = 0		1008515	0		=			
ANR	1008669	UnaryOperationExpression	* inst		1008515	0					
ANR	1008670	UnaryOperator	*		1008515	0					
ANR	1008671	Identifier	inst		1008515	1					
ANR	1008672	PrimaryExpression	0		1008515	1					
ANR	1008673	ExpressionStatement	cpool_ptr = compiler -> cpool	154:1:5355:5382	1008515	11	True				
ANR	1008674	AssignmentExpression	cpool_ptr = compiler -> cpool		1008515	0		=			
ANR	1008675	Identifier	cpool_ptr		1008515	0					
ANR	1008676	PtrMemberAccess	compiler -> cpool		1008515	1					
ANR	1008677	Identifier	compiler		1008515	0					
ANR	1008678	Identifier	cpool		1008515	1					
ANR	1008679	ExpressionStatement	cpool_end = cpool_ptr + compiler -> cpool_fill	155:1:5385:5429	1008515	12	True				
ANR	1008680	AssignmentExpression	cpool_end = cpool_ptr + compiler -> cpool_fill		1008515	0		=			
ANR	1008681	Identifier	cpool_end		1008515	0					
ANR	1008682	AdditiveExpression	cpool_ptr + compiler -> cpool_fill		1008515	1		+			
ANR	1008683	Identifier	cpool_ptr		1008515	0					
ANR	1008684	PtrMemberAccess	compiler -> cpool_fill		1008515	1					
ANR	1008685	Identifier	compiler		1008515	0					
ANR	1008686	Identifier	cpool_fill		1008515	1					
ANR	1008687	WhileStatement	while ( cpool_ptr < cpool_end )		1008515	13					
ANR	1008688	Condition	cpool_ptr < cpool_end	156:8:5439:5459	1008515	0	True				
ANR	1008689	RelationalExpression	cpool_ptr < cpool_end		1008515	0		<			
ANR	1008690	Identifier	cpool_ptr		1008515	0					
ANR	1008691	Identifier	cpool_end		1008515	1					
ANR	1008692	CompoundStatement		27:31:859:859	1008515	1					
ANR	1008693	ExpressionStatement	"inst = ( sljit_uw * ) ensure_buf ( compiler , sizeof ( sljit_uw ) )"	157:2:5466:5522	1008515	0	True				
ANR	1008694	AssignmentExpression	"inst = ( sljit_uw * ) ensure_buf ( compiler , sizeof ( sljit_uw ) )"		1008515	0		=			
ANR	1008695	Identifier	inst		1008515	0					
ANR	1008696	CastExpression	"( sljit_uw * ) ensure_buf ( compiler , sizeof ( sljit_uw ) )"		1008515	1					
ANR	1008697	CastTarget	sljit_uw *		1008515	0					
ANR	1008698	CallExpression	"ensure_buf ( compiler , sizeof ( sljit_uw ) )"		1008515	1					
ANR	1008699	Callee	ensure_buf		1008515	0					
ANR	1008700	Identifier	ensure_buf		1008515	0					
ANR	1008701	ArgumentList	compiler		1008515	1					
ANR	1008702	Argument	compiler		1008515	0					
ANR	1008703	Identifier	compiler		1008515	0					
ANR	1008704	Argument	sizeof ( sljit_uw )		1008515	1					
ANR	1008705	SizeofExpression	sizeof ( sljit_uw )		1008515	0					
ANR	1008706	Sizeof	sizeof		1008515	0					
ANR	1008707	SizeofOperand	sljit_uw		1008515	1					
ANR	1008708	ExpressionStatement	FAIL_IF ( ! inst )	158:2:5526:5540	1008515	1	True				
ANR	1008709	CallExpression	FAIL_IF ( ! inst )		1008515	0					
ANR	1008710	Callee	FAIL_IF		1008515	0					
ANR	1008711	Identifier	FAIL_IF		1008515	0					
ANR	1008712	ArgumentList	! inst		1008515	1					
ANR	1008713	Argument	! inst		1008515	0					
ANR	1008714	UnaryOperationExpression	! inst		1008515	0					
ANR	1008715	UnaryOperator	!		1008515	0					
ANR	1008716	Identifier	inst		1008515	1					
ANR	1008717	ExpressionStatement	compiler -> size ++	159:2:5544:5560	1008515	2	True				
ANR	1008718	PostIncDecOperationExpression	compiler -> size ++		1008515	0					
ANR	1008719	PtrMemberAccess	compiler -> size		1008515	0					
ANR	1008720	Identifier	compiler		1008515	0					
ANR	1008721	Identifier	size		1008515	1					
ANR	1008722	IncDec	++		1008515	1					
ANR	1008723	ExpressionStatement	* inst = * cpool_ptr ++	160:2:5564:5584	1008515	3	True				
ANR	1008724	AssignmentExpression	* inst = * cpool_ptr ++		1008515	0		=			
ANR	1008725	UnaryOperationExpression	* inst		1008515	0					
ANR	1008726	UnaryOperator	*		1008515	0					
ANR	1008727	Identifier	inst		1008515	1					
ANR	1008728	UnaryOperationExpression	* cpool_ptr ++		1008515	1					
ANR	1008729	UnaryOperator	*		1008515	0					
ANR	1008730	PostIncDecOperationExpression	cpool_ptr ++		1008515	1					
ANR	1008731	Identifier	cpool_ptr		1008515	0					
ANR	1008732	IncDec	++		1008515	1					
ANR	1008733	ExpressionStatement	compiler -> cpool_diff = CONST_POOL_EMPTY	162:1:5590:5629	1008515	14	True				
ANR	1008734	AssignmentExpression	compiler -> cpool_diff = CONST_POOL_EMPTY		1008515	0		=			
ANR	1008735	PtrMemberAccess	compiler -> cpool_diff		1008515	0					
ANR	1008736	Identifier	compiler		1008515	0					
ANR	1008737	Identifier	cpool_diff		1008515	1					
ANR	1008738	Identifier	CONST_POOL_EMPTY		1008515	1					
ANR	1008739	ExpressionStatement	compiler -> cpool_fill = 0	163:1:5632:5656	1008515	15	True				
ANR	1008740	AssignmentExpression	compiler -> cpool_fill = 0		1008515	0		=			
ANR	1008741	PtrMemberAccess	compiler -> cpool_fill		1008515	0					
ANR	1008742	Identifier	compiler		1008515	0					
ANR	1008743	Identifier	cpool_fill		1008515	1					
ANR	1008744	PrimaryExpression	0		1008515	1					
ANR	1008745	ReturnStatement	return SLJIT_SUCCESS ;	164:1:5659:5679	1008515	16	True				
ANR	1008746	Identifier	SLJIT_SUCCESS		1008515	0					
ANR	1008747	ReturnType	static sljit_si		1008515	1					
ANR	1008748	Identifier	push_cpool		1008515	2					
ANR	1008749	ParameterList	struct sljit_compiler * compiler		1008515	3					
ANR	1008750	Parameter	struct sljit_compiler * compiler	129:27:4569:4599	1008515	0	True				
ANR	1008751	ParameterType	struct sljit_compiler *		1008515	0					
ANR	1008752	Identifier	compiler		1008515	1					
ANR	1008753	CFGEntryNode	ENTRY		1008515		True				
ANR	1008754	CFGExitNode	EXIT		1008515		True				
ANR	1008755	Symbol	* compiler -> last_label		1008515						
ANR	1008756	Symbol	compiler -> last_label		1008515						
ANR	1008757	Symbol	* inst		1008515						
ANR	1008758	Symbol	* cpool_ptr ++		1008515						
ANR	1008759	Symbol	CONST_POOL_EMPTY		1008515						
ANR	1008760	Symbol	i		1008515						
ANR	1008761	Symbol	SLJIT_SUCCESS		1008515						
ANR	1008762	Symbol	* compiler		1008515						
ANR	1008763	Symbol	cpool_end		1008515						
ANR	1008764	Symbol	compiler -> cpool_diff		1008515						
ANR	1008765	Symbol	compiler -> cpool_fill		1008515						
ANR	1008766	Symbol	compiler -> last_label -> size		1008515						
ANR	1008767	Symbol	CONST_POOL_ALIGNMENT		1008515						
ANR	1008768	Symbol	* * compiler		1008515						
ANR	1008769	Symbol	compiler -> size		1008515						
ANR	1008770	Symbol	inst		1008515						
ANR	1008771	Symbol	CPOOL_SIZE		1008515						
ANR	1008772	Symbol	ensure_buf		1008515						
ANR	1008773	Symbol	cpool_ptr		1008515						
ANR	1008774	Symbol	compiler -> cpool		1008515						
ANR	1008775	Symbol	compiler		1008515						
ANR	1008776	Function	push_inst	167:0:5684:6069							
ANR	1008777	FunctionDef	"push_inst (struct sljit_compiler * compiler , sljit_uw inst)"		1008776	0					
ANR	1008778	CompoundStatement		168:0:5758:6069	1008776	0					
ANR	1008779	IdentifierDeclStatement	sljit_uw * ptr ;	169:1:5761:5774	1008776	0	True				
ANR	1008780	IdentifierDecl	* ptr		1008776	0					
ANR	1008781	IdentifierDeclType	sljit_uw *		1008776	0					
ANR	1008782	Identifier	ptr		1008776	1					
ANR	1008783	IfStatement	if ( SLJIT_UNLIKELY ( compiler -> cpool_diff != CONST_POOL_EMPTY && compiler -> size - compiler -> cpool_diff >= MAX_DIFFERENCE ( 4092 ) ) )		1008776	1					
ANR	1008784	Condition	SLJIT_UNLIKELY ( compiler -> cpool_diff != CONST_POOL_EMPTY && compiler -> size - compiler -> cpool_diff >= MAX_DIFFERENCE ( 4092 ) )	171:5:5782:5902	1008776	0	True				
ANR	1008785	CallExpression	SLJIT_UNLIKELY ( compiler -> cpool_diff != CONST_POOL_EMPTY && compiler -> size - compiler -> cpool_diff >= MAX_DIFFERENCE ( 4092 ) )		1008776	0					
ANR	1008786	Callee	SLJIT_UNLIKELY		1008776	0					
ANR	1008787	Identifier	SLJIT_UNLIKELY		1008776	0					
ANR	1008788	ArgumentList	compiler -> cpool_diff != CONST_POOL_EMPTY && compiler -> size - compiler -> cpool_diff >= MAX_DIFFERENCE ( 4092 )		1008776	1					
ANR	1008789	Argument	compiler -> cpool_diff != CONST_POOL_EMPTY && compiler -> size - compiler -> cpool_diff >= MAX_DIFFERENCE ( 4092 )		1008776	0					
ANR	1008790	AndExpression	compiler -> cpool_diff != CONST_POOL_EMPTY && compiler -> size - compiler -> cpool_diff >= MAX_DIFFERENCE ( 4092 )		1008776	0		&&			
ANR	1008791	EqualityExpression	compiler -> cpool_diff != CONST_POOL_EMPTY		1008776	0		!=			
ANR	1008792	PtrMemberAccess	compiler -> cpool_diff		1008776	0					
ANR	1008793	Identifier	compiler		1008776	0					
ANR	1008794	Identifier	cpool_diff		1008776	1					
ANR	1008795	Identifier	CONST_POOL_EMPTY		1008776	1					
ANR	1008796	RelationalExpression	compiler -> size - compiler -> cpool_diff >= MAX_DIFFERENCE ( 4092 )		1008776	1		>=			
ANR	1008797	AdditiveExpression	compiler -> size - compiler -> cpool_diff		1008776	0		-			
ANR	1008798	PtrMemberAccess	compiler -> size		1008776	0					
ANR	1008799	Identifier	compiler		1008776	0					
ANR	1008800	Identifier	size		1008776	1					
ANR	1008801	PtrMemberAccess	compiler -> cpool_diff		1008776	1					
ANR	1008802	Identifier	compiler		1008776	0					
ANR	1008803	Identifier	cpool_diff		1008776	1					
ANR	1008804	CallExpression	MAX_DIFFERENCE ( 4092 )		1008776	1					
ANR	1008805	Callee	MAX_DIFFERENCE		1008776	0					
ANR	1008806	Identifier	MAX_DIFFERENCE		1008776	0					
ANR	1008807	ArgumentList	4092		1008776	1					
ANR	1008808	Argument	4092		1008776	0					
ANR	1008809	PrimaryExpression	4092		1008776	0					
ANR	1008810	ExpressionStatement	FAIL_IF ( push_cpool ( compiler ) )	172:2:5907:5936	1008776	1	True				
ANR	1008811	CallExpression	FAIL_IF ( push_cpool ( compiler ) )		1008776	0					
ANR	1008812	Callee	FAIL_IF		1008776	0					
ANR	1008813	Identifier	FAIL_IF		1008776	0					
ANR	1008814	ArgumentList	push_cpool ( compiler )		1008776	1					
ANR	1008815	Argument	push_cpool ( compiler )		1008776	0					
ANR	1008816	CallExpression	push_cpool ( compiler )		1008776	0					
ANR	1008817	Callee	push_cpool		1008776	0					
ANR	1008818	Identifier	push_cpool		1008776	0					
ANR	1008819	ArgumentList	compiler		1008776	1					
ANR	1008820	Argument	compiler		1008776	0					
ANR	1008821	Identifier	compiler		1008776	0					
ANR	1008822	ExpressionStatement	"ptr = ( sljit_uw * ) ensure_buf ( compiler , sizeof ( sljit_uw ) )"	174:1:5940:5995	1008776	2	True				
ANR	1008823	AssignmentExpression	"ptr = ( sljit_uw * ) ensure_buf ( compiler , sizeof ( sljit_uw ) )"		1008776	0		=			
ANR	1008824	Identifier	ptr		1008776	0					
ANR	1008825	CastExpression	"( sljit_uw * ) ensure_buf ( compiler , sizeof ( sljit_uw ) )"		1008776	1					
ANR	1008826	CastTarget	sljit_uw *		1008776	0					
ANR	1008827	CallExpression	"ensure_buf ( compiler , sizeof ( sljit_uw ) )"		1008776	1					
ANR	1008828	Callee	ensure_buf		1008776	0					
ANR	1008829	Identifier	ensure_buf		1008776	0					
ANR	1008830	ArgumentList	compiler		1008776	1					
ANR	1008831	Argument	compiler		1008776	0					
ANR	1008832	Identifier	compiler		1008776	0					
ANR	1008833	Argument	sizeof ( sljit_uw )		1008776	1					
ANR	1008834	SizeofExpression	sizeof ( sljit_uw )		1008776	0					
ANR	1008835	Sizeof	sizeof		1008776	0					
ANR	1008836	SizeofOperand	sljit_uw		1008776	1					
ANR	1008837	ExpressionStatement	FAIL_IF ( ! ptr )	175:1:5998:6011	1008776	3	True				
ANR	1008838	CallExpression	FAIL_IF ( ! ptr )		1008776	0					
ANR	1008839	Callee	FAIL_IF		1008776	0					
ANR	1008840	Identifier	FAIL_IF		1008776	0					
ANR	1008841	ArgumentList	! ptr		1008776	1					
ANR	1008842	Argument	! ptr		1008776	0					
ANR	1008843	UnaryOperationExpression	! ptr		1008776	0					
ANR	1008844	UnaryOperator	!		1008776	0					
ANR	1008845	Identifier	ptr		1008776	1					
ANR	1008846	ExpressionStatement	compiler -> size ++	176:1:6014:6030	1008776	4	True				
ANR	1008847	PostIncDecOperationExpression	compiler -> size ++		1008776	0					
ANR	1008848	PtrMemberAccess	compiler -> size		1008776	0					
ANR	1008849	Identifier	compiler		1008776	0					
ANR	1008850	Identifier	size		1008776	1					
ANR	1008851	IncDec	++		1008776	1					
ANR	1008852	ExpressionStatement	* ptr = inst	177:1:6033:6044	1008776	5	True				
ANR	1008853	AssignmentExpression	* ptr = inst		1008776	0		=			
ANR	1008854	UnaryOperationExpression	* ptr		1008776	0					
ANR	1008855	UnaryOperator	*		1008776	0					
ANR	1008856	Identifier	ptr		1008776	1					
ANR	1008857	Identifier	inst		1008776	1					
ANR	1008858	ReturnStatement	return SLJIT_SUCCESS ;	178:1:6047:6067	1008776	6	True				
ANR	1008859	Identifier	SLJIT_SUCCESS		1008776	0					
ANR	1008860	ReturnType	static sljit_si		1008776	1					
ANR	1008861	Identifier	push_inst		1008776	2					
ANR	1008862	ParameterList	"struct sljit_compiler * compiler , sljit_uw inst"		1008776	3					
ANR	1008863	Parameter	struct sljit_compiler * compiler	167:26:5710:5740	1008776	0	True				
ANR	1008864	ParameterType	struct sljit_compiler *		1008776	0					
ANR	1008865	Identifier	compiler		1008776	1					
ANR	1008866	Parameter	sljit_uw inst	167:59:5743:5755	1008776	1	True				
ANR	1008867	ParameterType	sljit_uw		1008776	0					
ANR	1008868	Identifier	inst		1008776	1					
ANR	1008869	CFGEntryNode	ENTRY		1008776		True				
ANR	1008870	CFGExitNode	EXIT		1008776		True				
ANR	1008871	Symbol	MAX_DIFFERENCE		1008776						
ANR	1008872	Symbol	push_cpool		1008776						
ANR	1008873	Symbol	CONST_POOL_EMPTY		1008776						
ANR	1008874	Symbol	SLJIT_SUCCESS		1008776						
ANR	1008875	Symbol	* compiler		1008776						
ANR	1008876	Symbol	compiler -> cpool_diff		1008776						
ANR	1008877	Symbol	ptr		1008776						
ANR	1008878	Symbol	compiler -> size		1008776						
ANR	1008879	Symbol	inst		1008776						
ANR	1008880	Symbol	ensure_buf		1008776						
ANR	1008881	Symbol	* ptr		1008776						
ANR	1008882	Symbol	compiler		1008776						
ANR	1008883	Symbol	SLJIT_UNLIKELY		1008776						
ANR	1008884	Function	push_inst_with_literal	181:0:6072:7488							
ANR	1008885	FunctionDef	"push_inst_with_literal (struct sljit_compiler * compiler , sljit_uw inst , sljit_uw literal)"		1008884	0					
ANR	1008886	CompoundStatement		182:0:6177:7488	1008884	0					
ANR	1008887	IdentifierDeclStatement	sljit_uw * ptr ;	183:1:6180:6193	1008884	0	True				
ANR	1008888	IdentifierDecl	* ptr		1008884	0					
ANR	1008889	IdentifierDeclType	sljit_uw *		1008884	0					
ANR	1008890	Identifier	ptr		1008884	1					
ANR	1008891	IdentifierDeclStatement	sljit_uw cpool_index = CPOOL_SIZE ;	184:1:6196:6229	1008884	1	True				
ANR	1008892	IdentifierDecl	cpool_index = CPOOL_SIZE		1008884	0					
ANR	1008893	IdentifierDeclType	sljit_uw		1008884	0					
ANR	1008894	Identifier	cpool_index		1008884	1					
ANR	1008895	AssignmentExpression	cpool_index = CPOOL_SIZE		1008884	2		=			
ANR	1008896	Identifier	CPOOL_SIZE		1008884	0					
ANR	1008897	Identifier	CPOOL_SIZE		1008884	1					
ANR	1008898	IdentifierDeclStatement	sljit_uw * cpool_ptr ;	185:1:6232:6251	1008884	2	True				
ANR	1008899	IdentifierDecl	* cpool_ptr		1008884	0					
ANR	1008900	IdentifierDeclType	sljit_uw *		1008884	0					
ANR	1008901	Identifier	cpool_ptr		1008884	1					
ANR	1008902	IdentifierDeclStatement	sljit_uw * cpool_end ;	186:1:6254:6273	1008884	3	True				
ANR	1008903	IdentifierDecl	* cpool_end		1008884	0					
ANR	1008904	IdentifierDeclType	sljit_uw *		1008884	0					
ANR	1008905	Identifier	cpool_end		1008884	1					
ANR	1008906	IdentifierDeclStatement	sljit_ub * cpool_unique_ptr ;	187:1:6276:6302	1008884	4	True				
ANR	1008907	IdentifierDecl	* cpool_unique_ptr		1008884	0					
ANR	1008908	IdentifierDeclType	sljit_ub *		1008884	0					
ANR	1008909	Identifier	cpool_unique_ptr		1008884	1					
ANR	1008910	IfStatement	if ( SLJIT_UNLIKELY ( compiler -> cpool_diff != CONST_POOL_EMPTY && compiler -> size - compiler -> cpool_diff >= MAX_DIFFERENCE ( 4092 ) ) )		1008884	5					
ANR	1008911	Condition	SLJIT_UNLIKELY ( compiler -> cpool_diff != CONST_POOL_EMPTY && compiler -> size - compiler -> cpool_diff >= MAX_DIFFERENCE ( 4092 ) )	189:5:6310:6430	1008884	0	True				
ANR	1008912	CallExpression	SLJIT_UNLIKELY ( compiler -> cpool_diff != CONST_POOL_EMPTY && compiler -> size - compiler -> cpool_diff >= MAX_DIFFERENCE ( 4092 ) )		1008884	0					
ANR	1008913	Callee	SLJIT_UNLIKELY		1008884	0					
ANR	1008914	Identifier	SLJIT_UNLIKELY		1008884	0					
ANR	1008915	ArgumentList	compiler -> cpool_diff != CONST_POOL_EMPTY && compiler -> size - compiler -> cpool_diff >= MAX_DIFFERENCE ( 4092 )		1008884	1					
ANR	1008916	Argument	compiler -> cpool_diff != CONST_POOL_EMPTY && compiler -> size - compiler -> cpool_diff >= MAX_DIFFERENCE ( 4092 )		1008884	0					
ANR	1008917	AndExpression	compiler -> cpool_diff != CONST_POOL_EMPTY && compiler -> size - compiler -> cpool_diff >= MAX_DIFFERENCE ( 4092 )		1008884	0		&&			
ANR	1008918	EqualityExpression	compiler -> cpool_diff != CONST_POOL_EMPTY		1008884	0		!=			
ANR	1008919	PtrMemberAccess	compiler -> cpool_diff		1008884	0					
ANR	1008920	Identifier	compiler		1008884	0					
ANR	1008921	Identifier	cpool_diff		1008884	1					
ANR	1008922	Identifier	CONST_POOL_EMPTY		1008884	1					
ANR	1008923	RelationalExpression	compiler -> size - compiler -> cpool_diff >= MAX_DIFFERENCE ( 4092 )		1008884	1		>=			
ANR	1008924	AdditiveExpression	compiler -> size - compiler -> cpool_diff		1008884	0		-			
ANR	1008925	PtrMemberAccess	compiler -> size		1008884	0					
ANR	1008926	Identifier	compiler		1008884	0					
ANR	1008927	Identifier	size		1008884	1					
ANR	1008928	PtrMemberAccess	compiler -> cpool_diff		1008884	1					
ANR	1008929	Identifier	compiler		1008884	0					
ANR	1008930	Identifier	cpool_diff		1008884	1					
ANR	1008931	CallExpression	MAX_DIFFERENCE ( 4092 )		1008884	1					
ANR	1008932	Callee	MAX_DIFFERENCE		1008884	0					
ANR	1008933	Identifier	MAX_DIFFERENCE		1008884	0					
ANR	1008934	ArgumentList	4092		1008884	1					
ANR	1008935	Argument	4092		1008884	0					
ANR	1008936	PrimaryExpression	4092		1008884	0					
ANR	1008937	ExpressionStatement	FAIL_IF ( push_cpool ( compiler ) )	190:2:6435:6464	1008884	1	True				
ANR	1008938	CallExpression	FAIL_IF ( push_cpool ( compiler ) )		1008884	0					
ANR	1008939	Callee	FAIL_IF		1008884	0					
ANR	1008940	Identifier	FAIL_IF		1008884	0					
ANR	1008941	ArgumentList	push_cpool ( compiler )		1008884	1					
ANR	1008942	Argument	push_cpool ( compiler )		1008884	0					
ANR	1008943	CallExpression	push_cpool ( compiler )		1008884	0					
ANR	1008944	Callee	push_cpool		1008884	0					
ANR	1008945	Identifier	push_cpool		1008884	0					
ANR	1008946	ArgumentList	compiler		1008884	1					
ANR	1008947	Argument	compiler		1008884	0					
ANR	1008948	Identifier	compiler		1008884	0					
ANR	1008949	ElseStatement	else		1008884	0					
ANR	1008950	IfStatement	if ( compiler -> cpool_fill > 0 )		1008884	0					
ANR	1008951	Condition	compiler -> cpool_fill > 0	191:10:6476:6499	1008884	0	True				
ANR	1008952	RelationalExpression	compiler -> cpool_fill > 0		1008884	0		>			
ANR	1008953	PtrMemberAccess	compiler -> cpool_fill		1008884	0					
ANR	1008954	Identifier	compiler		1008884	0					
ANR	1008955	Identifier	cpool_fill		1008884	1					
ANR	1008956	PrimaryExpression	0		1008884	1					
ANR	1008957	CompoundStatement		10:36:324:324	1008884	1					
ANR	1008958	ExpressionStatement	cpool_ptr = compiler -> cpool	192:2:6506:6533	1008884	0	True				
ANR	1008959	AssignmentExpression	cpool_ptr = compiler -> cpool		1008884	0		=			
ANR	1008960	Identifier	cpool_ptr		1008884	0					
ANR	1008961	PtrMemberAccess	compiler -> cpool		1008884	1					
ANR	1008962	Identifier	compiler		1008884	0					
ANR	1008963	Identifier	cpool		1008884	1					
ANR	1008964	ExpressionStatement	cpool_end = cpool_ptr + compiler -> cpool_fill	193:2:6537:6581	1008884	1	True				
ANR	1008965	AssignmentExpression	cpool_end = cpool_ptr + compiler -> cpool_fill		1008884	0		=			
ANR	1008966	Identifier	cpool_end		1008884	0					
ANR	1008967	AdditiveExpression	cpool_ptr + compiler -> cpool_fill		1008884	1		+			
ANR	1008968	Identifier	cpool_ptr		1008884	0					
ANR	1008969	PtrMemberAccess	compiler -> cpool_fill		1008884	1					
ANR	1008970	Identifier	compiler		1008884	0					
ANR	1008971	Identifier	cpool_fill		1008884	1					
ANR	1008972	ExpressionStatement	cpool_unique_ptr = compiler -> cpool_unique	194:2:6585:6626	1008884	2	True				
ANR	1008973	AssignmentExpression	cpool_unique_ptr = compiler -> cpool_unique		1008884	0		=			
ANR	1008974	Identifier	cpool_unique_ptr		1008884	0					
ANR	1008975	PtrMemberAccess	compiler -> cpool_unique		1008884	1					
ANR	1008976	Identifier	compiler		1008884	0					
ANR	1008977	Identifier	cpool_unique		1008884	1					
ANR	1008978	DoStatement	do		1008884	3					
ANR	1008979	CompoundStatement		14:5:455:455	1008884	0					
ANR	1008980	IfStatement	if ( ( * cpool_ptr == literal ) && ! ( * cpool_unique_ptr ) )		1008884	0					
ANR	1008981	Condition	( * cpool_ptr == literal ) && ! ( * cpool_unique_ptr )	196:7:6642:6688	1008884	0	True				
ANR	1008982	AndExpression	( * cpool_ptr == literal ) && ! ( * cpool_unique_ptr )		1008884	0		&&			
ANR	1008983	EqualityExpression	* cpool_ptr == literal		1008884	0		==			
ANR	1008984	UnaryOperationExpression	* cpool_ptr		1008884	0					
ANR	1008985	UnaryOperator	*		1008884	0					
ANR	1008986	Identifier	cpool_ptr		1008884	1					
ANR	1008987	Identifier	literal		1008884	1					
ANR	1008988	UnaryOperationExpression	! ( * cpool_unique_ptr )		1008884	1					
ANR	1008989	UnaryOperator	!		1008884	0					
ANR	1008990	UnaryOperationExpression	* cpool_unique_ptr		1008884	1					
ANR	1008991	UnaryOperator	*		1008884	0					
ANR	1008992	Identifier	cpool_unique_ptr		1008884	1					
ANR	1008993	CompoundStatement		15:56:513:513	1008884	1					
ANR	1008994	ExpressionStatement	cpool_index = cpool_ptr - compiler -> cpool	197:4:6697:6738	1008884	0	True				
ANR	1008995	AssignmentExpression	cpool_index = cpool_ptr - compiler -> cpool		1008884	0		=			
ANR	1008996	Identifier	cpool_index		1008884	0					
ANR	1008997	AdditiveExpression	cpool_ptr - compiler -> cpool		1008884	1		-			
ANR	1008998	Identifier	cpool_ptr		1008884	0					
ANR	1008999	PtrMemberAccess	compiler -> cpool		1008884	1					
ANR	1009000	Identifier	compiler		1008884	0					
ANR	1009001	Identifier	cpool		1008884	1					
ANR	1009002	BreakStatement	break ;	198:4:6744:6749	1008884	1	True				
ANR	1009003	ExpressionStatement	cpool_ptr ++	200:3:6759:6770	1008884	1	True				
ANR	1009004	PostIncDecOperationExpression	cpool_ptr ++		1008884	0					
ANR	1009005	Identifier	cpool_ptr		1008884	0					
ANR	1009006	IncDec	++		1008884	1					
ANR	1009007	ExpressionStatement	cpool_unique_ptr ++	201:3:6775:6793	1008884	2	True				
ANR	1009008	PostIncDecOperationExpression	cpool_unique_ptr ++		1008884	0					
ANR	1009009	Identifier	cpool_unique_ptr		1008884	0					
ANR	1009010	IncDec	++		1008884	1					
ANR	1009011	Condition	cpool_ptr < cpool_end	202:11:6806:6826	1008884	1	True				
ANR	1009012	RelationalExpression	cpool_ptr < cpool_end		1008884	0		<			
ANR	1009013	Identifier	cpool_ptr		1008884	0					
ANR	1009014	Identifier	cpool_end		1008884	1					
ANR	1009015	IfStatement	if ( cpool_index == CPOOL_SIZE )		1008884	6					
ANR	1009016	Condition	cpool_index == CPOOL_SIZE	205:5:6839:6863	1008884	0	True				
ANR	1009017	EqualityExpression	cpool_index == CPOOL_SIZE		1008884	0		==			
ANR	1009018	Identifier	cpool_index		1008884	0					
ANR	1009019	Identifier	CPOOL_SIZE		1008884	1					
ANR	1009020	CompoundStatement		24:32:688:688	1008884	1					
ANR	1009021	IfStatement	if ( compiler -> cpool_fill < CPOOL_SIZE )		1008884	0					
ANR	1009022	Condition	compiler -> cpool_fill < CPOOL_SIZE	207:6:6929:6961	1008884	0	True				
ANR	1009023	RelationalExpression	compiler -> cpool_fill < CPOOL_SIZE		1008884	0		<			
ANR	1009024	PtrMemberAccess	compiler -> cpool_fill		1008884	0					
ANR	1009025	Identifier	compiler		1008884	0					
ANR	1009026	Identifier	cpool_fill		1008884	1					
ANR	1009027	Identifier	CPOOL_SIZE		1008884	1					
ANR	1009028	CompoundStatement		26:41:786:786	1008884	1					
ANR	1009029	ExpressionStatement	cpool_index = compiler -> cpool_fill	208:3:6969:7003	1008884	0	True				
ANR	1009030	AssignmentExpression	cpool_index = compiler -> cpool_fill		1008884	0		=			
ANR	1009031	Identifier	cpool_index		1008884	0					
ANR	1009032	PtrMemberAccess	compiler -> cpool_fill		1008884	1					
ANR	1009033	Identifier	compiler		1008884	0					
ANR	1009034	Identifier	cpool_fill		1008884	1					
ANR	1009035	ExpressionStatement	compiler -> cpool_fill ++	209:3:7008:7030	1008884	1	True				
ANR	1009036	PostIncDecOperationExpression	compiler -> cpool_fill ++		1008884	0					
ANR	1009037	PtrMemberAccess	compiler -> cpool_fill		1008884	0					
ANR	1009038	Identifier	compiler		1008884	0					
ANR	1009039	Identifier	cpool_fill		1008884	1					
ANR	1009040	IncDec	++		1008884	1					
ANR	1009041	ElseStatement	else		1008884	0					
ANR	1009042	CompoundStatement		30:7:865:865	1008884	0					
ANR	1009043	ExpressionStatement	FAIL_IF ( push_cpool ( compiler ) )	212:3:7048:7077	1008884	0	True				
ANR	1009044	CallExpression	FAIL_IF ( push_cpool ( compiler ) )		1008884	0					
ANR	1009045	Callee	FAIL_IF		1008884	0					
ANR	1009046	Identifier	FAIL_IF		1008884	0					
ANR	1009047	ArgumentList	push_cpool ( compiler )		1008884	1					
ANR	1009048	Argument	push_cpool ( compiler )		1008884	0					
ANR	1009049	CallExpression	push_cpool ( compiler )		1008884	0					
ANR	1009050	Callee	push_cpool		1008884	0					
ANR	1009051	Identifier	push_cpool		1008884	0					
ANR	1009052	ArgumentList	compiler		1008884	1					
ANR	1009053	Argument	compiler		1008884	0					
ANR	1009054	Identifier	compiler		1008884	0					
ANR	1009055	ExpressionStatement	cpool_index = 0	213:3:7082:7097	1008884	1	True				
ANR	1009056	AssignmentExpression	cpool_index = 0		1008884	0		=			
ANR	1009057	Identifier	cpool_index		1008884	0					
ANR	1009058	PrimaryExpression	0		1008884	1					
ANR	1009059	ExpressionStatement	compiler -> cpool_fill = 1	214:3:7102:7126	1008884	2	True				
ANR	1009060	AssignmentExpression	compiler -> cpool_fill = 1		1008884	0		=			
ANR	1009061	PtrMemberAccess	compiler -> cpool_fill		1008884	0					
ANR	1009062	Identifier	compiler		1008884	0					
ANR	1009063	Identifier	cpool_fill		1008884	1					
ANR	1009064	PrimaryExpression	1		1008884	1					
ANR	1009065	ExpressionStatement	SLJIT_ASSERT ( ( inst & 0xfff ) == 0 )	218:1:7137:7170	1008884	7	True				
ANR	1009066	CallExpression	SLJIT_ASSERT ( ( inst & 0xfff ) == 0 )		1008884	0					
ANR	1009067	Callee	SLJIT_ASSERT		1008884	0					
ANR	1009068	Identifier	SLJIT_ASSERT		1008884	0					
ANR	1009069	ArgumentList	( inst & 0xfff ) == 0		1008884	1					
ANR	1009070	Argument	( inst & 0xfff ) == 0		1008884	0					
ANR	1009071	EqualityExpression	( inst & 0xfff ) == 0		1008884	0		==			
ANR	1009072	BitAndExpression	inst & 0xfff		1008884	0		&			
ANR	1009073	Identifier	inst		1008884	0					
ANR	1009074	PrimaryExpression	0xfff		1008884	1					
ANR	1009075	PrimaryExpression	0		1008884	1					
ANR	1009076	ExpressionStatement	"ptr = ( sljit_uw * ) ensure_buf ( compiler , sizeof ( sljit_uw ) )"	219:1:7173:7228	1008884	8	True				
ANR	1009077	AssignmentExpression	"ptr = ( sljit_uw * ) ensure_buf ( compiler , sizeof ( sljit_uw ) )"		1008884	0		=			
ANR	1009078	Identifier	ptr		1008884	0					
ANR	1009079	CastExpression	"( sljit_uw * ) ensure_buf ( compiler , sizeof ( sljit_uw ) )"		1008884	1					
ANR	1009080	CastTarget	sljit_uw *		1008884	0					
ANR	1009081	CallExpression	"ensure_buf ( compiler , sizeof ( sljit_uw ) )"		1008884	1					
ANR	1009082	Callee	ensure_buf		1008884	0					
ANR	1009083	Identifier	ensure_buf		1008884	0					
ANR	1009084	ArgumentList	compiler		1008884	1					
ANR	1009085	Argument	compiler		1008884	0					
ANR	1009086	Identifier	compiler		1008884	0					
ANR	1009087	Argument	sizeof ( sljit_uw )		1008884	1					
ANR	1009088	SizeofExpression	sizeof ( sljit_uw )		1008884	0					
ANR	1009089	Sizeof	sizeof		1008884	0					
ANR	1009090	SizeofOperand	sljit_uw		1008884	1					
ANR	1009091	ExpressionStatement	FAIL_IF ( ! ptr )	220:1:7231:7244	1008884	9	True				
ANR	1009092	CallExpression	FAIL_IF ( ! ptr )		1008884	0					
ANR	1009093	Callee	FAIL_IF		1008884	0					
ANR	1009094	Identifier	FAIL_IF		1008884	0					
ANR	1009095	ArgumentList	! ptr		1008884	1					
ANR	1009096	Argument	! ptr		1008884	0					
ANR	1009097	UnaryOperationExpression	! ptr		1008884	0					
ANR	1009098	UnaryOperator	!		1008884	0					
ANR	1009099	Identifier	ptr		1008884	1					
ANR	1009100	ExpressionStatement	compiler -> size ++	221:1:7247:7263	1008884	10	True				
ANR	1009101	PostIncDecOperationExpression	compiler -> size ++		1008884	0					
ANR	1009102	PtrMemberAccess	compiler -> size		1008884	0					
ANR	1009103	Identifier	compiler		1008884	0					
ANR	1009104	Identifier	size		1008884	1					
ANR	1009105	IncDec	++		1008884	1					
ANR	1009106	ExpressionStatement	* ptr = inst | cpool_index	222:1:7266:7291	1008884	11	True				
ANR	1009107	AssignmentExpression	* ptr = inst | cpool_index		1008884	0		=			
ANR	1009108	UnaryOperationExpression	* ptr		1008884	0					
ANR	1009109	UnaryOperator	*		1008884	0					
ANR	1009110	Identifier	ptr		1008884	1					
ANR	1009111	InclusiveOrExpression	inst | cpool_index		1008884	1		|			
ANR	1009112	Identifier	inst		1008884	0					
ANR	1009113	Identifier	cpool_index		1008884	1					
ANR	1009114	ExpressionStatement	compiler -> cpool [ cpool_index ] = literal	224:1:7295:7333	1008884	12	True				
ANR	1009115	AssignmentExpression	compiler -> cpool [ cpool_index ] = literal		1008884	0		=			
ANR	1009116	ArrayIndexing	compiler -> cpool [ cpool_index ]		1008884	0					
ANR	1009117	PtrMemberAccess	compiler -> cpool		1008884	0					
ANR	1009118	Identifier	compiler		1008884	0					
ANR	1009119	Identifier	cpool		1008884	1					
ANR	1009120	Identifier	cpool_index		1008884	1					
ANR	1009121	Identifier	literal		1008884	1					
ANR	1009122	ExpressionStatement	compiler -> cpool_unique [ cpool_index ] = 0	225:1:7336:7375	1008884	13	True				
ANR	1009123	AssignmentExpression	compiler -> cpool_unique [ cpool_index ] = 0		1008884	0		=			
ANR	1009124	ArrayIndexing	compiler -> cpool_unique [ cpool_index ]		1008884	0					
ANR	1009125	PtrMemberAccess	compiler -> cpool_unique		1008884	0					
ANR	1009126	Identifier	compiler		1008884	0					
ANR	1009127	Identifier	cpool_unique		1008884	1					
ANR	1009128	Identifier	cpool_index		1008884	1					
ANR	1009129	PrimaryExpression	0		1008884	1					
ANR	1009130	IfStatement	if ( compiler -> cpool_diff == CONST_POOL_EMPTY )		1008884	14					
ANR	1009131	Condition	compiler -> cpool_diff == CONST_POOL_EMPTY	226:5:7382:7421	1008884	0	True				
ANR	1009132	EqualityExpression	compiler -> cpool_diff == CONST_POOL_EMPTY		1008884	0		==			
ANR	1009133	PtrMemberAccess	compiler -> cpool_diff		1008884	0					
ANR	1009134	Identifier	compiler		1008884	0					
ANR	1009135	Identifier	cpool_diff		1008884	1					
ANR	1009136	Identifier	CONST_POOL_EMPTY		1008884	1					
ANR	1009137	ExpressionStatement	compiler -> cpool_diff = compiler -> size	227:2:7426:7463	1008884	1	True				
ANR	1009138	AssignmentExpression	compiler -> cpool_diff = compiler -> size		1008884	0		=			
ANR	1009139	PtrMemberAccess	compiler -> cpool_diff		1008884	0					
ANR	1009140	Identifier	compiler		1008884	0					
ANR	1009141	Identifier	cpool_diff		1008884	1					
ANR	1009142	PtrMemberAccess	compiler -> size		1008884	1					
ANR	1009143	Identifier	compiler		1008884	0					
ANR	1009144	Identifier	size		1008884	1					
ANR	1009145	ReturnStatement	return SLJIT_SUCCESS ;	228:1:7466:7486	1008884	15	True				
ANR	1009146	Identifier	SLJIT_SUCCESS		1008884	0					
ANR	1009147	ReturnType	static sljit_si		1008884	1					
ANR	1009148	Identifier	push_inst_with_literal		1008884	2					
ANR	1009149	ParameterList	"struct sljit_compiler * compiler , sljit_uw inst , sljit_uw literal"		1008884	3					
ANR	1009150	Parameter	struct sljit_compiler * compiler	181:39:6111:6141	1008884	0	True				
ANR	1009151	ParameterType	struct sljit_compiler *		1008884	0					
ANR	1009152	Identifier	compiler		1008884	1					
ANR	1009153	Parameter	sljit_uw inst	181:72:6144:6156	1008884	1	True				
ANR	1009154	ParameterType	sljit_uw		1008884	0					
ANR	1009155	Identifier	inst		1008884	1					
ANR	1009156	Parameter	sljit_uw literal	181:87:6159:6174	1008884	2	True				
ANR	1009157	ParameterType	sljit_uw		1008884	0					
ANR	1009158	Identifier	literal		1008884	1					
ANR	1009159	CFGEntryNode	ENTRY		1008884		True				
ANR	1009160	CFGExitNode	EXIT		1008884		True				
ANR	1009161	Symbol	MAX_DIFFERENCE		1008884						
ANR	1009162	Symbol	push_cpool		1008884						
ANR	1009163	Symbol	* cpool_unique_ptr		1008884						
ANR	1009164	Symbol	cpool_unique_ptr		1008884						
ANR	1009165	Symbol	CONST_POOL_EMPTY		1008884						
ANR	1009166	Symbol	* compiler -> cpool_unique		1008884						
ANR	1009167	Symbol	cpool_index		1008884						
ANR	1009168	Symbol	* compiler		1008884						
ANR	1009169	Symbol	cpool_end		1008884						
ANR	1009170	Symbol	compiler -> cpool_diff		1008884						
ANR	1009171	Symbol	compiler -> cpool_fill		1008884						
ANR	1009172	Symbol	literal		1008884						
ANR	1009173	Symbol	* cpool_index		1008884						
ANR	1009174	Symbol	* * compiler		1008884						
ANR	1009175	Symbol	CPOOL_SIZE		1008884						
ANR	1009176	Symbol	* ptr		1008884						
ANR	1009177	Symbol	compiler -> cpool		1008884						
ANR	1009178	Symbol	compiler		1008884						
ANR	1009179	Symbol	* compiler -> cpool		1008884						
ANR	1009180	Symbol	SLJIT_SUCCESS		1008884						
ANR	1009181	Symbol	ptr		1008884						
ANR	1009182	Symbol	* cpool_ptr		1008884						
ANR	1009183	Symbol	compiler -> size		1008884						
ANR	1009184	Symbol	compiler -> cpool_unique		1008884						
ANR	1009185	Symbol	inst		1008884						
ANR	1009186	Symbol	ensure_buf		1008884						
ANR	1009187	Symbol	cpool_ptr		1008884						
ANR	1009188	Symbol	SLJIT_UNLIKELY		1008884						
ANR	1009189	Function	push_inst_with_unique_literal	231:0:7491:8264							
ANR	1009190	FunctionDef	"push_inst_with_unique_literal (struct sljit_compiler * compiler , sljit_uw inst , sljit_uw literal)"		1009189	0					
ANR	1009191	CompoundStatement		232:0:7603:8264	1009189	0					
ANR	1009192	IdentifierDeclStatement	sljit_uw * ptr ;	233:1:7606:7619	1009189	0	True				
ANR	1009193	IdentifierDecl	* ptr		1009189	0					
ANR	1009194	IdentifierDeclType	sljit_uw *		1009189	0					
ANR	1009195	Identifier	ptr		1009189	1					
ANR	1009196	IfStatement	if ( SLJIT_UNLIKELY ( ( compiler -> cpool_diff != CONST_POOL_EMPTY && compiler -> size - compiler -> cpool_diff >= MAX_DIFFERENCE ( 4092 ) ) || compiler -> cpool_fill >= CPOOL_SIZE ) )		1009189	1					
ANR	1009197	Condition	SLJIT_UNLIKELY ( ( compiler -> cpool_diff != CONST_POOL_EMPTY && compiler -> size - compiler -> cpool_diff >= MAX_DIFFERENCE ( 4092 ) ) || compiler -> cpool_fill >= CPOOL_SIZE )	234:5:7626:7786	1009189	0	True				
ANR	1009198	CallExpression	SLJIT_UNLIKELY ( ( compiler -> cpool_diff != CONST_POOL_EMPTY && compiler -> size - compiler -> cpool_diff >= MAX_DIFFERENCE ( 4092 ) ) || compiler -> cpool_fill >= CPOOL_SIZE )		1009189	0					
ANR	1009199	Callee	SLJIT_UNLIKELY		1009189	0					
ANR	1009200	Identifier	SLJIT_UNLIKELY		1009189	0					
ANR	1009201	ArgumentList	( compiler -> cpool_diff != CONST_POOL_EMPTY && compiler -> size - compiler -> cpool_diff >= MAX_DIFFERENCE ( 4092 ) ) || compiler -> cpool_fill >= CPOOL_SIZE		1009189	1					
ANR	1009202	Argument	( compiler -> cpool_diff != CONST_POOL_EMPTY && compiler -> size - compiler -> cpool_diff >= MAX_DIFFERENCE ( 4092 ) ) || compiler -> cpool_fill >= CPOOL_SIZE		1009189	0					
ANR	1009203	OrExpression	( compiler -> cpool_diff != CONST_POOL_EMPTY && compiler -> size - compiler -> cpool_diff >= MAX_DIFFERENCE ( 4092 ) ) || compiler -> cpool_fill >= CPOOL_SIZE		1009189	0		||			
ANR	1009204	AndExpression	compiler -> cpool_diff != CONST_POOL_EMPTY && compiler -> size - compiler -> cpool_diff >= MAX_DIFFERENCE ( 4092 )		1009189	0		&&			
ANR	1009205	EqualityExpression	compiler -> cpool_diff != CONST_POOL_EMPTY		1009189	0		!=			
ANR	1009206	PtrMemberAccess	compiler -> cpool_diff		1009189	0					
ANR	1009207	Identifier	compiler		1009189	0					
ANR	1009208	Identifier	cpool_diff		1009189	1					
ANR	1009209	Identifier	CONST_POOL_EMPTY		1009189	1					
ANR	1009210	RelationalExpression	compiler -> size - compiler -> cpool_diff >= MAX_DIFFERENCE ( 4092 )		1009189	1		>=			
ANR	1009211	AdditiveExpression	compiler -> size - compiler -> cpool_diff		1009189	0		-			
ANR	1009212	PtrMemberAccess	compiler -> size		1009189	0					
ANR	1009213	Identifier	compiler		1009189	0					
ANR	1009214	Identifier	size		1009189	1					
ANR	1009215	PtrMemberAccess	compiler -> cpool_diff		1009189	1					
ANR	1009216	Identifier	compiler		1009189	0					
ANR	1009217	Identifier	cpool_diff		1009189	1					
ANR	1009218	CallExpression	MAX_DIFFERENCE ( 4092 )		1009189	1					
ANR	1009219	Callee	MAX_DIFFERENCE		1009189	0					
ANR	1009220	Identifier	MAX_DIFFERENCE		1009189	0					
ANR	1009221	ArgumentList	4092		1009189	1					
ANR	1009222	Argument	4092		1009189	0					
ANR	1009223	PrimaryExpression	4092		1009189	0					
ANR	1009224	RelationalExpression	compiler -> cpool_fill >= CPOOL_SIZE		1009189	1		>=			
ANR	1009225	PtrMemberAccess	compiler -> cpool_fill		1009189	0					
ANR	1009226	Identifier	compiler		1009189	0					
ANR	1009227	Identifier	cpool_fill		1009189	1					
ANR	1009228	Identifier	CPOOL_SIZE		1009189	1					
ANR	1009229	ExpressionStatement	FAIL_IF ( push_cpool ( compiler ) )	235:2:7791:7820	1009189	1	True				
ANR	1009230	CallExpression	FAIL_IF ( push_cpool ( compiler ) )		1009189	0					
ANR	1009231	Callee	FAIL_IF		1009189	0					
ANR	1009232	Identifier	FAIL_IF		1009189	0					
ANR	1009233	ArgumentList	push_cpool ( compiler )		1009189	1					
ANR	1009234	Argument	push_cpool ( compiler )		1009189	0					
ANR	1009235	CallExpression	push_cpool ( compiler )		1009189	0					
ANR	1009236	Callee	push_cpool		1009189	0					
ANR	1009237	Identifier	push_cpool		1009189	0					
ANR	1009238	ArgumentList	compiler		1009189	1					
ANR	1009239	Argument	compiler		1009189	0					
ANR	1009240	Identifier	compiler		1009189	0					
ANR	1009241	ExpressionStatement	SLJIT_ASSERT ( compiler -> cpool_fill < CPOOL_SIZE && ( inst & 0xfff ) == 0 )	237:1:7824:7894	1009189	2	True				
ANR	1009242	CallExpression	SLJIT_ASSERT ( compiler -> cpool_fill < CPOOL_SIZE && ( inst & 0xfff ) == 0 )		1009189	0					
ANR	1009243	Callee	SLJIT_ASSERT		1009189	0					
ANR	1009244	Identifier	SLJIT_ASSERT		1009189	0					
ANR	1009245	ArgumentList	compiler -> cpool_fill < CPOOL_SIZE && ( inst & 0xfff ) == 0		1009189	1					
ANR	1009246	Argument	compiler -> cpool_fill < CPOOL_SIZE && ( inst & 0xfff ) == 0		1009189	0					
ANR	1009247	AndExpression	compiler -> cpool_fill < CPOOL_SIZE && ( inst & 0xfff ) == 0		1009189	0		&&			
ANR	1009248	RelationalExpression	compiler -> cpool_fill < CPOOL_SIZE		1009189	0		<			
ANR	1009249	PtrMemberAccess	compiler -> cpool_fill		1009189	0					
ANR	1009250	Identifier	compiler		1009189	0					
ANR	1009251	Identifier	cpool_fill		1009189	1					
ANR	1009252	Identifier	CPOOL_SIZE		1009189	1					
ANR	1009253	EqualityExpression	( inst & 0xfff ) == 0		1009189	1		==			
ANR	1009254	BitAndExpression	inst & 0xfff		1009189	0		&			
ANR	1009255	Identifier	inst		1009189	0					
ANR	1009256	PrimaryExpression	0xfff		1009189	1					
ANR	1009257	PrimaryExpression	0		1009189	1					
ANR	1009258	ExpressionStatement	"ptr = ( sljit_uw * ) ensure_buf ( compiler , sizeof ( sljit_uw ) )"	238:1:7897:7952	1009189	3	True				
ANR	1009259	AssignmentExpression	"ptr = ( sljit_uw * ) ensure_buf ( compiler , sizeof ( sljit_uw ) )"		1009189	0		=			
ANR	1009260	Identifier	ptr		1009189	0					
ANR	1009261	CastExpression	"( sljit_uw * ) ensure_buf ( compiler , sizeof ( sljit_uw ) )"		1009189	1					
ANR	1009262	CastTarget	sljit_uw *		1009189	0					
ANR	1009263	CallExpression	"ensure_buf ( compiler , sizeof ( sljit_uw ) )"		1009189	1					
ANR	1009264	Callee	ensure_buf		1009189	0					
ANR	1009265	Identifier	ensure_buf		1009189	0					
ANR	1009266	ArgumentList	compiler		1009189	1					
ANR	1009267	Argument	compiler		1009189	0					
ANR	1009268	Identifier	compiler		1009189	0					
ANR	1009269	Argument	sizeof ( sljit_uw )		1009189	1					
ANR	1009270	SizeofExpression	sizeof ( sljit_uw )		1009189	0					
ANR	1009271	Sizeof	sizeof		1009189	0					
ANR	1009272	SizeofOperand	sljit_uw		1009189	1					
ANR	1009273	ExpressionStatement	FAIL_IF ( ! ptr )	239:1:7955:7968	1009189	4	True				
ANR	1009274	CallExpression	FAIL_IF ( ! ptr )		1009189	0					
ANR	1009275	Callee	FAIL_IF		1009189	0					
ANR	1009276	Identifier	FAIL_IF		1009189	0					
ANR	1009277	ArgumentList	! ptr		1009189	1					
ANR	1009278	Argument	! ptr		1009189	0					
ANR	1009279	UnaryOperationExpression	! ptr		1009189	0					
ANR	1009280	UnaryOperator	!		1009189	0					
ANR	1009281	Identifier	ptr		1009189	1					
ANR	1009282	ExpressionStatement	compiler -> size ++	240:1:7971:7987	1009189	5	True				
ANR	1009283	PostIncDecOperationExpression	compiler -> size ++		1009189	0					
ANR	1009284	PtrMemberAccess	compiler -> size		1009189	0					
ANR	1009285	Identifier	compiler		1009189	0					
ANR	1009286	Identifier	size		1009189	1					
ANR	1009287	IncDec	++		1009189	1					
ANR	1009288	ExpressionStatement	* ptr = inst | compiler -> cpool_fill	241:1:7990:8024	1009189	6	True				
ANR	1009289	AssignmentExpression	* ptr = inst | compiler -> cpool_fill		1009189	0		=			
ANR	1009290	UnaryOperationExpression	* ptr		1009189	0					
ANR	1009291	UnaryOperator	*		1009189	0					
ANR	1009292	Identifier	ptr		1009189	1					
ANR	1009293	InclusiveOrExpression	inst | compiler -> cpool_fill		1009189	1		|			
ANR	1009294	Identifier	inst		1009189	0					
ANR	1009295	PtrMemberAccess	compiler -> cpool_fill		1009189	1					
ANR	1009296	Identifier	compiler		1009189	0					
ANR	1009297	Identifier	cpool_fill		1009189	1					
ANR	1009298	ExpressionStatement	compiler -> cpool [ compiler -> cpool_fill ] = literal	243:1:8028:8075	1009189	7	True				
ANR	1009299	AssignmentExpression	compiler -> cpool [ compiler -> cpool_fill ] = literal		1009189	0		=			
ANR	1009300	ArrayIndexing	compiler -> cpool [ compiler -> cpool_fill ]		1009189	0					
ANR	1009301	PtrMemberAccess	compiler -> cpool		1009189	0					
ANR	1009302	Identifier	compiler		1009189	0					
ANR	1009303	Identifier	cpool		1009189	1					
ANR	1009304	PtrMemberAccess	compiler -> cpool_fill		1009189	1					
ANR	1009305	Identifier	compiler		1009189	0					
ANR	1009306	Identifier	cpool_fill		1009189	1					
ANR	1009307	Identifier	literal		1009189	1					
ANR	1009308	ExpressionStatement	compiler -> cpool_unique [ compiler -> cpool_fill ] = 1	244:1:8078:8126	1009189	8	True				
ANR	1009309	AssignmentExpression	compiler -> cpool_unique [ compiler -> cpool_fill ] = 1		1009189	0		=			
ANR	1009310	ArrayIndexing	compiler -> cpool_unique [ compiler -> cpool_fill ]		1009189	0					
ANR	1009311	PtrMemberAccess	compiler -> cpool_unique		1009189	0					
ANR	1009312	Identifier	compiler		1009189	0					
ANR	1009313	Identifier	cpool_unique		1009189	1					
ANR	1009314	PtrMemberAccess	compiler -> cpool_fill		1009189	1					
ANR	1009315	Identifier	compiler		1009189	0					
ANR	1009316	Identifier	cpool_fill		1009189	1					
ANR	1009317	PrimaryExpression	1		1009189	1					
ANR	1009318	ExpressionStatement	compiler -> cpool_fill ++	245:1:8129:8151	1009189	9	True				
ANR	1009319	PostIncDecOperationExpression	compiler -> cpool_fill ++		1009189	0					
ANR	1009320	PtrMemberAccess	compiler -> cpool_fill		1009189	0					
ANR	1009321	Identifier	compiler		1009189	0					
ANR	1009322	Identifier	cpool_fill		1009189	1					
ANR	1009323	IncDec	++		1009189	1					
ANR	1009324	IfStatement	if ( compiler -> cpool_diff == CONST_POOL_EMPTY )		1009189	10					
ANR	1009325	Condition	compiler -> cpool_diff == CONST_POOL_EMPTY	246:5:8158:8197	1009189	0	True				
ANR	1009326	EqualityExpression	compiler -> cpool_diff == CONST_POOL_EMPTY		1009189	0		==			
ANR	1009327	PtrMemberAccess	compiler -> cpool_diff		1009189	0					
ANR	1009328	Identifier	compiler		1009189	0					
ANR	1009329	Identifier	cpool_diff		1009189	1					
ANR	1009330	Identifier	CONST_POOL_EMPTY		1009189	1					
ANR	1009331	ExpressionStatement	compiler -> cpool_diff = compiler -> size	247:2:8202:8239	1009189	1	True				
ANR	1009332	AssignmentExpression	compiler -> cpool_diff = compiler -> size		1009189	0		=			
ANR	1009333	PtrMemberAccess	compiler -> cpool_diff		1009189	0					
ANR	1009334	Identifier	compiler		1009189	0					
ANR	1009335	Identifier	cpool_diff		1009189	1					
ANR	1009336	PtrMemberAccess	compiler -> size		1009189	1					
ANR	1009337	Identifier	compiler		1009189	0					
ANR	1009338	Identifier	size		1009189	1					
ANR	1009339	ReturnStatement	return SLJIT_SUCCESS ;	248:1:8242:8262	1009189	11	True				
ANR	1009340	Identifier	SLJIT_SUCCESS		1009189	0					
ANR	1009341	ReturnType	static sljit_si		1009189	1					
ANR	1009342	Identifier	push_inst_with_unique_literal		1009189	2					
ANR	1009343	ParameterList	"struct sljit_compiler * compiler , sljit_uw inst , sljit_uw literal"		1009189	3					
ANR	1009344	Parameter	struct sljit_compiler * compiler	231:46:7537:7567	1009189	0	True				
ANR	1009345	ParameterType	struct sljit_compiler *		1009189	0					
ANR	1009346	Identifier	compiler		1009189	1					
ANR	1009347	Parameter	sljit_uw inst	231:79:7570:7582	1009189	1	True				
ANR	1009348	ParameterType	sljit_uw		1009189	0					
ANR	1009349	Identifier	inst		1009189	1					
ANR	1009350	Parameter	sljit_uw literal	231:94:7585:7600	1009189	2	True				
ANR	1009351	ParameterType	sljit_uw		1009189	0					
ANR	1009352	Identifier	literal		1009189	1					
ANR	1009353	CFGEntryNode	ENTRY		1009189		True				
ANR	1009354	CFGExitNode	EXIT		1009189		True				
ANR	1009355	Symbol	MAX_DIFFERENCE		1009189						
ANR	1009356	Symbol	* compiler -> cpool		1009189						
ANR	1009357	Symbol	push_cpool		1009189						
ANR	1009358	Symbol	CONST_POOL_EMPTY		1009189						
ANR	1009359	Symbol	* compiler -> cpool_unique		1009189						
ANR	1009360	Symbol	SLJIT_SUCCESS		1009189						
ANR	1009361	Symbol	* compiler		1009189						
ANR	1009362	Symbol	compiler -> cpool_diff		1009189						
ANR	1009363	Symbol	compiler -> cpool_fill		1009189						
ANR	1009364	Symbol	literal		1009189						
ANR	1009365	Symbol	ptr		1009189						
ANR	1009366	Symbol	* * compiler		1009189						
ANR	1009367	Symbol	compiler -> size		1009189						
ANR	1009368	Symbol	compiler -> cpool_unique		1009189						
ANR	1009369	Symbol	* compiler -> cpool_fill		1009189						
ANR	1009370	Symbol	inst		1009189						
ANR	1009371	Symbol	CPOOL_SIZE		1009189						
ANR	1009372	Symbol	ensure_buf		1009189						
ANR	1009373	Symbol	* ptr		1009189						
ANR	1009374	Symbol	compiler -> cpool		1009189						
ANR	1009375	Symbol	compiler		1009189						
ANR	1009376	Symbol	SLJIT_UNLIKELY		1009189						
ANR	1009377	Function	prepare_blx	251:0:8267:8617							
ANR	1009378	FunctionDef	prepare_blx (struct sljit_compiler * compiler)		1009377	0					
ANR	1009379	CompoundStatement		252:0:8341:8617	1009377	0					
ANR	1009380	IfStatement	if ( SLJIT_UNLIKELY ( compiler -> cpool_diff != CONST_POOL_EMPTY && compiler -> size - compiler -> cpool_diff >= MAX_DIFFERENCE ( 4088 ) ) )		1009377	0					
ANR	1009381	Condition	SLJIT_UNLIKELY ( compiler -> cpool_diff != CONST_POOL_EMPTY && compiler -> size - compiler -> cpool_diff >= MAX_DIFFERENCE ( 4088 ) )	254:5:8440:8560	1009377	0	True				
ANR	1009382	CallExpression	SLJIT_UNLIKELY ( compiler -> cpool_diff != CONST_POOL_EMPTY && compiler -> size - compiler -> cpool_diff >= MAX_DIFFERENCE ( 4088 ) )		1009377	0					
ANR	1009383	Callee	SLJIT_UNLIKELY		1009377	0					
ANR	1009384	Identifier	SLJIT_UNLIKELY		1009377	0					
ANR	1009385	ArgumentList	compiler -> cpool_diff != CONST_POOL_EMPTY && compiler -> size - compiler -> cpool_diff >= MAX_DIFFERENCE ( 4088 )		1009377	1					
ANR	1009386	Argument	compiler -> cpool_diff != CONST_POOL_EMPTY && compiler -> size - compiler -> cpool_diff >= MAX_DIFFERENCE ( 4088 )		1009377	0					
ANR	1009387	AndExpression	compiler -> cpool_diff != CONST_POOL_EMPTY && compiler -> size - compiler -> cpool_diff >= MAX_DIFFERENCE ( 4088 )		1009377	0		&&			
ANR	1009388	EqualityExpression	compiler -> cpool_diff != CONST_POOL_EMPTY		1009377	0		!=			
ANR	1009389	PtrMemberAccess	compiler -> cpool_diff		1009377	0					
ANR	1009390	Identifier	compiler		1009377	0					
ANR	1009391	Identifier	cpool_diff		1009377	1					
ANR	1009392	Identifier	CONST_POOL_EMPTY		1009377	1					
ANR	1009393	RelationalExpression	compiler -> size - compiler -> cpool_diff >= MAX_DIFFERENCE ( 4088 )		1009377	1		>=			
ANR	1009394	AdditiveExpression	compiler -> size - compiler -> cpool_diff		1009377	0		-			
ANR	1009395	PtrMemberAccess	compiler -> size		1009377	0					
ANR	1009396	Identifier	compiler		1009377	0					
ANR	1009397	Identifier	size		1009377	1					
ANR	1009398	PtrMemberAccess	compiler -> cpool_diff		1009377	1					
ANR	1009399	Identifier	compiler		1009377	0					
ANR	1009400	Identifier	cpool_diff		1009377	1					
ANR	1009401	CallExpression	MAX_DIFFERENCE ( 4088 )		1009377	1					
ANR	1009402	Callee	MAX_DIFFERENCE		1009377	0					
ANR	1009403	Identifier	MAX_DIFFERENCE		1009377	0					
ANR	1009404	ArgumentList	4088		1009377	1					
ANR	1009405	Argument	4088		1009377	0					
ANR	1009406	PrimaryExpression	4088		1009377	0					
ANR	1009407	ReturnStatement	return push_cpool ( compiler ) ;	255:2:8565:8592	1009377	1	True				
ANR	1009408	CallExpression	push_cpool ( compiler )		1009377	0					
ANR	1009409	Callee	push_cpool		1009377	0					
ANR	1009410	Identifier	push_cpool		1009377	0					
ANR	1009411	ArgumentList	compiler		1009377	1					
ANR	1009412	Argument	compiler		1009377	0					
ANR	1009413	Identifier	compiler		1009377	0					
ANR	1009414	ReturnStatement	return SLJIT_SUCCESS ;	256:1:8595:8615	1009377	1	True				
ANR	1009415	Identifier	SLJIT_SUCCESS		1009377	0					
ANR	1009416	ReturnType	static SLJIT_INLINE sljit_si		1009377	1					
ANR	1009417	Identifier	prepare_blx		1009377	2					
ANR	1009418	ParameterList	struct sljit_compiler * compiler		1009377	3					
ANR	1009419	Parameter	struct sljit_compiler * compiler	251:41:8308:8338	1009377	0	True				
ANR	1009420	ParameterType	struct sljit_compiler *		1009377	0					
ANR	1009421	Identifier	compiler		1009377	1					
ANR	1009422	CFGEntryNode	ENTRY		1009377		True				
ANR	1009423	CFGExitNode	EXIT		1009377		True				
ANR	1009424	Symbol	MAX_DIFFERENCE		1009377						
ANR	1009425	Symbol	push_cpool		1009377						
ANR	1009426	Symbol	compiler -> size		1009377						
ANR	1009427	Symbol	CONST_POOL_EMPTY		1009377						
ANR	1009428	Symbol	SLJIT_SUCCESS		1009377						
ANR	1009429	Symbol	* compiler		1009377						
ANR	1009430	Symbol	compiler		1009377						
ANR	1009431	Symbol	compiler -> cpool_diff		1009377						
ANR	1009432	Symbol	SLJIT_UNLIKELY		1009377						
ANR	1009433	Function	emit_blx	259:0:8620:8961							
ANR	1009434	FunctionDef	emit_blx (struct sljit_compiler * compiler)		1009433	0					
ANR	1009435	CompoundStatement		260:0:8691:8961	1009433	0					
ANR	1009436	ExpressionStatement	SLJIT_ASSERT ( compiler -> cpool_diff == CONST_POOL_EMPTY || compiler -> size - compiler -> cpool_diff < MAX_DIFFERENCE ( 4092 ) )	262:1:8792:8910	1009433	0	True				
ANR	1009437	CallExpression	SLJIT_ASSERT ( compiler -> cpool_diff == CONST_POOL_EMPTY || compiler -> size - compiler -> cpool_diff < MAX_DIFFERENCE ( 4092 ) )		1009433	0					
ANR	1009438	Callee	SLJIT_ASSERT		1009433	0					
ANR	1009439	Identifier	SLJIT_ASSERT		1009433	0					
ANR	1009440	ArgumentList	compiler -> cpool_diff == CONST_POOL_EMPTY || compiler -> size - compiler -> cpool_diff < MAX_DIFFERENCE ( 4092 )		1009433	1					
ANR	1009441	Argument	compiler -> cpool_diff == CONST_POOL_EMPTY || compiler -> size - compiler -> cpool_diff < MAX_DIFFERENCE ( 4092 )		1009433	0					
ANR	1009442	OrExpression	compiler -> cpool_diff == CONST_POOL_EMPTY || compiler -> size - compiler -> cpool_diff < MAX_DIFFERENCE ( 4092 )		1009433	0		||			
ANR	1009443	EqualityExpression	compiler -> cpool_diff == CONST_POOL_EMPTY		1009433	0		==			
ANR	1009444	PtrMemberAccess	compiler -> cpool_diff		1009433	0					
ANR	1009445	Identifier	compiler		1009433	0					
ANR	1009446	Identifier	cpool_diff		1009433	1					
ANR	1009447	Identifier	CONST_POOL_EMPTY		1009433	1					
ANR	1009448	RelationalExpression	compiler -> size - compiler -> cpool_diff < MAX_DIFFERENCE ( 4092 )		1009433	1		<			
ANR	1009449	AdditiveExpression	compiler -> size - compiler -> cpool_diff		1009433	0		-			
ANR	1009450	PtrMemberAccess	compiler -> size		1009433	0					
ANR	1009451	Identifier	compiler		1009433	0					
ANR	1009452	Identifier	size		1009433	1					
ANR	1009453	PtrMemberAccess	compiler -> cpool_diff		1009433	1					
ANR	1009454	Identifier	compiler		1009433	0					
ANR	1009455	Identifier	cpool_diff		1009433	1					
ANR	1009456	CallExpression	MAX_DIFFERENCE ( 4092 )		1009433	1					
ANR	1009457	Callee	MAX_DIFFERENCE		1009433	0					
ANR	1009458	Identifier	MAX_DIFFERENCE		1009433	0					
ANR	1009459	ArgumentList	4092		1009433	1					
ANR	1009460	Argument	4092		1009433	0					
ANR	1009461	PrimaryExpression	4092		1009433	0					
ANR	1009462	ReturnStatement	"return push_inst ( compiler , BLX | RM ( TMP_REG1 ) ) ;"	263:1:8913:8959	1009433	1	True				
ANR	1009463	CallExpression	"push_inst ( compiler , BLX | RM ( TMP_REG1 ) )"		1009433	0					
ANR	1009464	Callee	push_inst		1009433	0					
ANR	1009465	Identifier	push_inst		1009433	0					
ANR	1009466	ArgumentList	compiler		1009433	1					
ANR	1009467	Argument	compiler		1009433	0					
ANR	1009468	Identifier	compiler		1009433	0					
ANR	1009469	Argument	BLX | RM ( TMP_REG1 )		1009433	1					
ANR	1009470	InclusiveOrExpression	BLX | RM ( TMP_REG1 )		1009433	0		|			
ANR	1009471	Identifier	BLX		1009433	0					
ANR	1009472	CallExpression	RM ( TMP_REG1 )		1009433	1					
ANR	1009473	Callee	RM		1009433	0					
ANR	1009474	Identifier	RM		1009433	0					
ANR	1009475	ArgumentList	TMP_REG1		1009433	1					
ANR	1009476	Argument	TMP_REG1		1009433	0					
ANR	1009477	Identifier	TMP_REG1		1009433	0					
ANR	1009478	ReturnType	static SLJIT_INLINE sljit_si		1009433	1					
ANR	1009479	Identifier	emit_blx		1009433	2					
ANR	1009480	ParameterList	struct sljit_compiler * compiler		1009433	3					
ANR	1009481	Parameter	struct sljit_compiler * compiler	259:38:8658:8688	1009433	0	True				
ANR	1009482	ParameterType	struct sljit_compiler *		1009433	0					
ANR	1009483	Identifier	compiler		1009433	1					
ANR	1009484	CFGEntryNode	ENTRY		1009433		True				
ANR	1009485	CFGExitNode	EXIT		1009433		True				
ANR	1009486	Symbol	MAX_DIFFERENCE		1009433						
ANR	1009487	Symbol	push_inst		1009433						
ANR	1009488	Symbol	TMP_REG1		1009433						
ANR	1009489	Symbol	compiler -> size		1009433						
ANR	1009490	Symbol	CONST_POOL_EMPTY		1009433						
ANR	1009491	Symbol	* compiler		1009433						
ANR	1009492	Symbol	RM		1009433						
ANR	1009493	Symbol	compiler		1009433						
ANR	1009494	Symbol	compiler -> cpool_diff		1009433						
ANR	1009495	Symbol	BLX		1009433						
ANR	1009496	Function	patch_pc_relative_loads	266:0:8964:10442							
ANR	1009497	FunctionDef	"patch_pc_relative_loads (sljit_uw * last_pc_patch , sljit_uw * code_ptr , sljit_uw * const_pool , sljit_uw cpool_size)"		1009496	0					
ANR	1009498	CompoundStatement		267:0:9092:10442	1009496	0					
ANR	1009499	IdentifierDeclStatement	sljit_uw diff ;	268:1:9095:9108	1009496	0	True				
ANR	1009500	IdentifierDecl	diff		1009496	0					
ANR	1009501	IdentifierDeclType	sljit_uw		1009496	0					
ANR	1009502	Identifier	diff		1009496	1					
ANR	1009503	IdentifierDeclStatement	sljit_uw ind ;	269:1:9111:9123	1009496	1	True				
ANR	1009504	IdentifierDecl	ind		1009496	0					
ANR	1009505	IdentifierDeclType	sljit_uw		1009496	0					
ANR	1009506	Identifier	ind		1009496	1					
ANR	1009507	IdentifierDeclStatement	sljit_uw counter = 0 ;	270:1:9126:9146	1009496	2	True				
ANR	1009508	IdentifierDecl	counter = 0		1009496	0					
ANR	1009509	IdentifierDeclType	sljit_uw		1009496	0					
ANR	1009510	Identifier	counter		1009496	1					
ANR	1009511	AssignmentExpression	counter = 0		1009496	2		=			
ANR	1009512	Identifier	counter		1009496	0					
ANR	1009513	PrimaryExpression	0		1009496	1					
ANR	1009514	IdentifierDeclStatement	sljit_uw * clear_const_pool = const_pool ;	271:1:9149:9188	1009496	3	True				
ANR	1009515	IdentifierDecl	* clear_const_pool = const_pool		1009496	0					
ANR	1009516	IdentifierDeclType	sljit_uw *		1009496	0					
ANR	1009517	Identifier	clear_const_pool		1009496	1					
ANR	1009518	AssignmentExpression	* clear_const_pool = const_pool		1009496	2		=			
ANR	1009519	Identifier	const_pool		1009496	0					
ANR	1009520	Identifier	const_pool		1009496	1					
ANR	1009521	IdentifierDeclStatement	sljit_uw * clear_const_pool_end = const_pool + cpool_size ;	272:1:9191:9247	1009496	4	True				
ANR	1009522	IdentifierDecl	* clear_const_pool_end = const_pool + cpool_size		1009496	0					
ANR	1009523	IdentifierDeclType	sljit_uw *		1009496	0					
ANR	1009524	Identifier	clear_const_pool_end		1009496	1					
ANR	1009525	AssignmentExpression	* clear_const_pool_end = const_pool + cpool_size		1009496	2		=			
ANR	1009526	Identifier	clear_const_pool_end		1009496	0					
ANR	1009527	AdditiveExpression	const_pool + cpool_size		1009496	1		+			
ANR	1009528	Identifier	const_pool		1009496	0					
ANR	1009529	Identifier	cpool_size		1009496	1					
ANR	1009530	ExpressionStatement	SLJIT_ASSERT ( const_pool - code_ptr <= CONST_POOL_ALIGNMENT )	274:1:9251:9310	1009496	5	True				
ANR	1009531	CallExpression	SLJIT_ASSERT ( const_pool - code_ptr <= CONST_POOL_ALIGNMENT )		1009496	0					
ANR	1009532	Callee	SLJIT_ASSERT		1009496	0					
ANR	1009533	Identifier	SLJIT_ASSERT		1009496	0					
ANR	1009534	ArgumentList	const_pool - code_ptr <= CONST_POOL_ALIGNMENT		1009496	1					
ANR	1009535	Argument	const_pool - code_ptr <= CONST_POOL_ALIGNMENT		1009496	0					
ANR	1009536	RelationalExpression	const_pool - code_ptr <= CONST_POOL_ALIGNMENT		1009496	0		<=			
ANR	1009537	AdditiveExpression	const_pool - code_ptr		1009496	0		-			
ANR	1009538	Identifier	const_pool		1009496	0					
ANR	1009539	Identifier	code_ptr		1009496	1					
ANR	1009540	Identifier	CONST_POOL_ALIGNMENT		1009496	1					
ANR	1009541	WhileStatement	while ( clear_const_pool < clear_const_pool_end )		1009496	6					
ANR	1009542	Condition	clear_const_pool < clear_const_pool_end	278:8:9535:9573	1009496	0	True				
ANR	1009543	RelationalExpression	clear_const_pool < clear_const_pool_end		1009496	0		<			
ANR	1009544	Identifier	clear_const_pool		1009496	0					
ANR	1009545	Identifier	clear_const_pool_end		1009496	1					
ANR	1009546	ExpressionStatement	* clear_const_pool ++ = ( sljit_uw ) ( - 1 )	279:2:9578:9614	1009496	1	True				
ANR	1009547	AssignmentExpression	* clear_const_pool ++ = ( sljit_uw ) ( - 1 )		1009496	0		=			
ANR	1009548	UnaryOperationExpression	* clear_const_pool ++		1009496	0					
ANR	1009549	UnaryOperator	*		1009496	0					
ANR	1009550	PostIncDecOperationExpression	clear_const_pool ++		1009496	1					
ANR	1009551	Identifier	clear_const_pool		1009496	0					
ANR	1009552	IncDec	++		1009496	1					
ANR	1009553	CastExpression	( sljit_uw ) ( - 1 )		1009496	1					
ANR	1009554	CastTarget	sljit_uw		1009496	0					
ANR	1009555	UnaryOperationExpression	- 1		1009496	1					
ANR	1009556	UnaryOperator	-		1009496	0					
ANR	1009557	PrimaryExpression	1		1009496	1					
ANR	1009558	WhileStatement	while ( last_pc_patch < code_ptr )		1009496	7					
ANR	1009559	Condition	last_pc_patch < code_ptr	281:8:9625:9648	1009496	0	True				
ANR	1009560	RelationalExpression	last_pc_patch < code_ptr		1009496	0		<			
ANR	1009561	Identifier	last_pc_patch		1009496	0					
ANR	1009562	Identifier	code_ptr		1009496	1					
ANR	1009563	CompoundStatement		15:34:558:558	1009496	1					
ANR	1009564	IfStatement	if ( ( * last_pc_patch & 0x0c0f0000 ) == 0x040f0000 )		1009496	0					
ANR	1009565	Condition	( * last_pc_patch & 0x0c0f0000 ) == 0x040f0000	283:6:9709:9751	1009496	0	True				
ANR	1009566	EqualityExpression	( * last_pc_patch & 0x0c0f0000 ) == 0x040f0000		1009496	0		==			
ANR	1009567	BitAndExpression	* last_pc_patch & 0x0c0f0000		1009496	0		&			
ANR	1009568	UnaryOperationExpression	* last_pc_patch		1009496	0					
ANR	1009569	UnaryOperator	*		1009496	0					
ANR	1009570	Identifier	last_pc_patch		1009496	1					
ANR	1009571	PrimaryExpression	0x0c0f0000		1009496	1					
ANR	1009572	PrimaryExpression	0x040f0000		1009496	1					
ANR	1009573	CompoundStatement		17:51:661:661	1009496	1					
ANR	1009574	ExpressionStatement	diff = const_pool - last_pc_patch	284:3:9759:9792	1009496	0	True				
ANR	1009575	AssignmentExpression	diff = const_pool - last_pc_patch		1009496	0		=			
ANR	1009576	Identifier	diff		1009496	0					
ANR	1009577	AdditiveExpression	const_pool - last_pc_patch		1009496	1		-			
ANR	1009578	Identifier	const_pool		1009496	0					
ANR	1009579	Identifier	last_pc_patch		1009496	1					
ANR	1009580	ExpressionStatement	ind = ( * last_pc_patch ) & 0xfff	285:3:9797:9827	1009496	1	True				
ANR	1009581	AssignmentExpression	ind = ( * last_pc_patch ) & 0xfff		1009496	0		=			
ANR	1009582	Identifier	ind		1009496	0					
ANR	1009583	BitAndExpression	( * last_pc_patch ) & 0xfff		1009496	1		&			
ANR	1009584	UnaryOperationExpression	* last_pc_patch		1009496	0					
ANR	1009585	UnaryOperator	*		1009496	0					
ANR	1009586	Identifier	last_pc_patch		1009496	1					
ANR	1009587	PrimaryExpression	0xfff		1009496	1					
ANR	1009588	ExpressionStatement	SLJIT_ASSERT ( ind < cpool_size && ! ( * last_pc_patch & ( 1 << 25 ) ) && ( * last_pc_patch & ( 1 << 20 ) ) )	288:3:9892:9987	1009496	2	True				
ANR	1009589	CallExpression	SLJIT_ASSERT ( ind < cpool_size && ! ( * last_pc_patch & ( 1 << 25 ) ) && ( * last_pc_patch & ( 1 << 20 ) ) )		1009496	0					
ANR	1009590	Callee	SLJIT_ASSERT		1009496	0					
ANR	1009591	Identifier	SLJIT_ASSERT		1009496	0					
ANR	1009592	ArgumentList	ind < cpool_size && ! ( * last_pc_patch & ( 1 << 25 ) ) && ( * last_pc_patch & ( 1 << 20 ) )		1009496	1					
ANR	1009593	Argument	ind < cpool_size && ! ( * last_pc_patch & ( 1 << 25 ) ) && ( * last_pc_patch & ( 1 << 20 ) )		1009496	0					
ANR	1009594	AndExpression	ind < cpool_size && ! ( * last_pc_patch & ( 1 << 25 ) ) && ( * last_pc_patch & ( 1 << 20 ) )		1009496	0		&&			
ANR	1009595	RelationalExpression	ind < cpool_size		1009496	0		<			
ANR	1009596	Identifier	ind		1009496	0					
ANR	1009597	Identifier	cpool_size		1009496	1					
ANR	1009598	AndExpression	! ( * last_pc_patch & ( 1 << 25 ) ) && ( * last_pc_patch & ( 1 << 20 ) )		1009496	1		&&			
ANR	1009599	UnaryOperationExpression	! ( * last_pc_patch & ( 1 << 25 ) )		1009496	0					
ANR	1009600	UnaryOperator	!		1009496	0					
ANR	1009601	BitAndExpression	* last_pc_patch & ( 1 << 25 )		1009496	1		&			
ANR	1009602	UnaryOperationExpression	* last_pc_patch		1009496	0					
ANR	1009603	UnaryOperator	*		1009496	0					
ANR	1009604	Identifier	last_pc_patch		1009496	1					
ANR	1009605	ShiftExpression	1 << 25		1009496	1		<<			
ANR	1009606	PrimaryExpression	1		1009496	0					
ANR	1009607	PrimaryExpression	25		1009496	1					
ANR	1009608	BitAndExpression	* last_pc_patch & ( 1 << 20 )		1009496	1		&			
ANR	1009609	UnaryOperationExpression	* last_pc_patch		1009496	0					
ANR	1009610	UnaryOperator	*		1009496	0					
ANR	1009611	Identifier	last_pc_patch		1009496	1					
ANR	1009612	ShiftExpression	1 << 20		1009496	1		<<			
ANR	1009613	PrimaryExpression	1		1009496	0					
ANR	1009614	PrimaryExpression	20		1009496	1					
ANR	1009615	IfStatement	if ( ( sljit_si ) const_pool [ ind ] < 0 )		1009496	3					
ANR	1009616	Condition	( sljit_si ) const_pool [ ind ] < 0	289:7:9996:10024	1009496	0	True				
ANR	1009617	RelationalExpression	( sljit_si ) const_pool [ ind ] < 0		1009496	0		<			
ANR	1009618	CastExpression	( sljit_si ) const_pool [ ind ]		1009496	0					
ANR	1009619	CastTarget	sljit_si		1009496	0					
ANR	1009620	ArrayIndexing	const_pool [ ind ]		1009496	1					
ANR	1009621	Identifier	const_pool		1009496	0					
ANR	1009622	Identifier	ind		1009496	1					
ANR	1009623	PrimaryExpression	0		1009496	1					
ANR	1009624	CompoundStatement		23:38:934:934	1009496	1					
ANR	1009625	ExpressionStatement	const_pool [ ind ] = counter	290:4:10033:10058	1009496	0	True				
ANR	1009626	AssignmentExpression	const_pool [ ind ] = counter		1009496	0		=			
ANR	1009627	ArrayIndexing	const_pool [ ind ]		1009496	0					
ANR	1009628	Identifier	const_pool		1009496	0					
ANR	1009629	Identifier	ind		1009496	1					
ANR	1009630	Identifier	counter		1009496	1					
ANR	1009631	ExpressionStatement	ind = counter	291:4:10064:10077	1009496	1	True				
ANR	1009632	AssignmentExpression	ind = counter		1009496	0		=			
ANR	1009633	Identifier	ind		1009496	0					
ANR	1009634	Identifier	counter		1009496	1					
ANR	1009635	ExpressionStatement	counter ++	292:4:10083:10092	1009496	2	True				
ANR	1009636	PostIncDecOperationExpression	counter ++		1009496	0					
ANR	1009637	Identifier	counter		1009496	0					
ANR	1009638	IncDec	++		1009496	1					
ANR	1009639	ElseStatement	else		1009496	0					
ANR	1009640	ExpressionStatement	ind = const_pool [ ind ]	295:4:10111:10132	1009496	0	True				
ANR	1009641	AssignmentExpression	ind = const_pool [ ind ]		1009496	0		=			
ANR	1009642	Identifier	ind		1009496	0					
ANR	1009643	ArrayIndexing	const_pool [ ind ]		1009496	1					
ANR	1009644	Identifier	const_pool		1009496	0					
ANR	1009645	Identifier	ind		1009496	1					
ANR	1009646	ExpressionStatement	SLJIT_ASSERT ( diff >= 1 )	297:3:10138:10161	1009496	4	True				
ANR	1009647	CallExpression	SLJIT_ASSERT ( diff >= 1 )		1009496	0					
ANR	1009648	Callee	SLJIT_ASSERT		1009496	0					
ANR	1009649	Identifier	SLJIT_ASSERT		1009496	0					
ANR	1009650	ArgumentList	diff >= 1		1009496	1					
ANR	1009651	Argument	diff >= 1		1009496	0					
ANR	1009652	RelationalExpression	diff >= 1		1009496	0		>=			
ANR	1009653	Identifier	diff		1009496	0					
ANR	1009654	PrimaryExpression	1		1009496	1					
ANR	1009655	IfStatement	if ( diff >= 2 || ind > 0 )		1009496	5					
ANR	1009656	Condition	diff >= 2 || ind > 0	298:7:10170:10189	1009496	0	True				
ANR	1009657	OrExpression	diff >= 2 || ind > 0		1009496	0		||			
ANR	1009658	RelationalExpression	diff >= 2		1009496	0		>=			
ANR	1009659	Identifier	diff		1009496	0					
ANR	1009660	PrimaryExpression	2		1009496	1					
ANR	1009661	RelationalExpression	ind > 0		1009496	1		>			
ANR	1009662	Identifier	ind		1009496	0					
ANR	1009663	PrimaryExpression	0		1009496	1					
ANR	1009664	CompoundStatement		32:29:1099:1099	1009496	1					
ANR	1009665	ExpressionStatement	diff = ( diff + ind - 2 ) << 2	299:4:10198:10226	1009496	0	True				
ANR	1009666	AssignmentExpression	diff = ( diff + ind - 2 ) << 2		1009496	0		=			
ANR	1009667	Identifier	diff		1009496	0					
ANR	1009668	ShiftExpression	( diff + ind - 2 ) << 2		1009496	1		<<			
ANR	1009669	AdditiveExpression	diff + ind - 2		1009496	0		+			
ANR	1009670	Identifier	diff		1009496	0					
ANR	1009671	AdditiveExpression	ind - 2		1009496	1		-			
ANR	1009672	Identifier	ind		1009496	0					
ANR	1009673	PrimaryExpression	2		1009496	1					
ANR	1009674	PrimaryExpression	2		1009496	1					
ANR	1009675	ExpressionStatement	SLJIT_ASSERT ( diff <= 0xfff )	300:4:10232:10259	1009496	1	True				
ANR	1009676	CallExpression	SLJIT_ASSERT ( diff <= 0xfff )		1009496	0					
ANR	1009677	Callee	SLJIT_ASSERT		1009496	0					
ANR	1009678	Identifier	SLJIT_ASSERT		1009496	0					
ANR	1009679	ArgumentList	diff <= 0xfff		1009496	1					
ANR	1009680	Argument	diff <= 0xfff		1009496	0					
ANR	1009681	RelationalExpression	diff <= 0xfff		1009496	0		<=			
ANR	1009682	Identifier	diff		1009496	0					
ANR	1009683	PrimaryExpression	0xfff		1009496	1					
ANR	1009684	ExpressionStatement	* last_pc_patch = ( * last_pc_patch & ~0xfff ) | diff	301:4:10265:10314	1009496	2	True				
ANR	1009685	AssignmentExpression	* last_pc_patch = ( * last_pc_patch & ~0xfff ) | diff		1009496	0		=			
ANR	1009686	UnaryOperationExpression	* last_pc_patch		1009496	0					
ANR	1009687	UnaryOperator	*		1009496	0					
ANR	1009688	Identifier	last_pc_patch		1009496	1					
ANR	1009689	InclusiveOrExpression	( * last_pc_patch & ~0xfff ) | diff		1009496	1		|			
ANR	1009690	BitAndExpression	* last_pc_patch & ~0xfff		1009496	0		&			
ANR	1009691	UnaryOperationExpression	* last_pc_patch		1009496	0					
ANR	1009692	UnaryOperator	*		1009496	0					
ANR	1009693	Identifier	last_pc_patch		1009496	1					
ANR	1009694	Identifier	~0xfff		1009496	1					
ANR	1009695	Identifier	diff		1009496	1					
ANR	1009696	ElseStatement	else		1009496	0					
ANR	1009697	ExpressionStatement	* last_pc_patch = ( * last_pc_patch & ~ ( 0xfff | ( 1 << 23 ) ) ) | 0x004	304:4:10333:10397	1009496	0	True				
ANR	1009698	AssignmentExpression	* last_pc_patch = ( * last_pc_patch & ~ ( 0xfff | ( 1 << 23 ) ) ) | 0x004		1009496	0		=			
ANR	1009699	UnaryOperationExpression	* last_pc_patch		1009496	0					
ANR	1009700	UnaryOperator	*		1009496	0					
ANR	1009701	Identifier	last_pc_patch		1009496	1					
ANR	1009702	InclusiveOrExpression	( * last_pc_patch & ~ ( 0xfff | ( 1 << 23 ) ) ) | 0x004		1009496	1		|			
ANR	1009703	BitAndExpression	* last_pc_patch & ~ ( 0xfff | ( 1 << 23 ) )		1009496	0		&			
ANR	1009704	UnaryOperationExpression	* last_pc_patch		1009496	0					
ANR	1009705	UnaryOperator	*		1009496	0					
ANR	1009706	Identifier	last_pc_patch		1009496	1					
ANR	1009707	UnaryOperationExpression	~ ( 0xfff | ( 1 << 23 ) )		1009496	1					
ANR	1009708	UnaryOperator	~		1009496	0					
ANR	1009709	InclusiveOrExpression	0xfff | ( 1 << 23 )		1009496	1		|			
ANR	1009710	PrimaryExpression	0xfff		1009496	0					
ANR	1009711	ShiftExpression	1 << 23		1009496	1		<<			
ANR	1009712	PrimaryExpression	1		1009496	0					
ANR	1009713	PrimaryExpression	23		1009496	1					
ANR	1009714	PrimaryExpression	0x004		1009496	1					
ANR	1009715	ExpressionStatement	last_pc_patch ++	306:2:10405:10420	1009496	1	True				
ANR	1009716	PostIncDecOperationExpression	last_pc_patch ++		1009496	0					
ANR	1009717	Identifier	last_pc_patch		1009496	0					
ANR	1009718	IncDec	++		1009496	1					
ANR	1009719	ReturnStatement	return counter ;	308:1:10426:10440	1009496	8	True				
ANR	1009720	Identifier	counter		1009496	0					
ANR	1009721	ReturnType	static sljit_uw		1009496	1					
ANR	1009722	Identifier	patch_pc_relative_loads		1009496	2					
ANR	1009723	ParameterList	"sljit_uw * last_pc_patch , sljit_uw * code_ptr , sljit_uw * const_pool , sljit_uw cpool_size"		1009496	3					
ANR	1009724	Parameter	sljit_uw * last_pc_patch	266:40:9004:9026	1009496	0	True				
ANR	1009725	ParameterType	sljit_uw *		1009496	0					
ANR	1009726	Identifier	last_pc_patch		1009496	1					
ANR	1009727	Parameter	sljit_uw * code_ptr	266:65:9029:9046	1009496	1	True				
ANR	1009728	ParameterType	sljit_uw *		1009496	0					
ANR	1009729	Identifier	code_ptr		1009496	1					
ANR	1009730	Parameter	sljit_uw * const_pool	266:85:9049:9068	1009496	2	True				
ANR	1009731	ParameterType	sljit_uw *		1009496	0					
ANR	1009732	Identifier	const_pool		1009496	1					
ANR	1009733	Parameter	sljit_uw cpool_size	266:107:9071:9089	1009496	3	True				
ANR	1009734	ParameterType	sljit_uw		1009496	0					
ANR	1009735	Identifier	cpool_size		1009496	1					
ANR	1009736	CFGEntryNode	ENTRY		1009496		True				
ANR	1009737	CFGExitNode	EXIT		1009496		True				
ANR	1009738	Symbol	last_pc_patch		1009496						
ANR	1009739	Symbol	* clear_const_pool ++		1009496						
ANR	1009740	Symbol	cpool_size		1009496						
ANR	1009741	Symbol	diff		1009496						
ANR	1009742	Symbol	counter		1009496						
ANR	1009743	Symbol	clear_const_pool_end		1009496						
ANR	1009744	Symbol	CONST_POOL_ALIGNMENT		1009496						
ANR	1009745	Symbol	clear_const_pool		1009496						
ANR	1009746	Symbol	* const_pool		1009496						
ANR	1009747	Symbol	code_ptr		1009496						
ANR	1009748	Symbol	* ind		1009496						
ANR	1009749	Symbol	* last_pc_patch		1009496						
ANR	1009750	Symbol	const_pool		1009496						
ANR	1009751	Symbol	ind		1009496						
ANR	1009752	Symbol	~0xfff		1009496						
ANR	1009753	ClassDef	future_patch	312:0:10544:10628							
ANR	1009754	DeclStmt									
ANR	1009755	Decl							struct future_patch	struct future_patch *	next
ANR	1009756	DeclStmt									
ANR	1009757	Decl							sljit_si	sljit_si	index
ANR	1009758	DeclStmt									
ANR	1009759	Decl							sljit_si	sljit_si	value
ANR	1009760	Function	resolve_const_pool_index	318:0:10632:12189							
ANR	1009761	FunctionDef	"resolve_const_pool_index (struct sljit_compiler * compiler , struct future_patch * * first_patch , sljit_uw cpool_current_index , sljit_uw * cpool_start_address , sljit_uw * buf_ptr)"		1009760	0					
ANR	1009762	CompoundStatement		319:0:10821:12189	1009760	0					
ANR	1009763	IdentifierDeclStatement	sljit_si value ;	320:1:10824:10838	1009760	0	True				
ANR	1009764	IdentifierDecl	value		1009760	0					
ANR	1009765	IdentifierDeclType	sljit_si		1009760	0					
ANR	1009766	Identifier	value		1009760	1					
ANR	1009767	IdentifierDeclStatement	"struct future_patch * curr_patch , * prev_patch ;"	321:1:10841:10885	1009760	1	True				
ANR	1009768	IdentifierDecl	* curr_patch		1009760	0					
ANR	1009769	IdentifierDeclType	struct future_patch *		1009760	0					
ANR	1009770	Identifier	curr_patch		1009760	1					
ANR	1009771	IdentifierDecl	* prev_patch		1009760	1					
ANR	1009772	IdentifierDeclType	struct future_patch *		1009760	0					
ANR	1009773	Identifier	prev_patch		1009760	1					
ANR	1009774	ExpressionStatement	SLJIT_UNUSED_ARG ( compiler )	323:1:10889:10915	1009760	2	True				
ANR	1009775	CallExpression	SLJIT_UNUSED_ARG ( compiler )		1009760	0					
ANR	1009776	Callee	SLJIT_UNUSED_ARG		1009760	0					
ANR	1009777	Identifier	SLJIT_UNUSED_ARG		1009760	0					
ANR	1009778	ArgumentList	compiler		1009760	1					
ANR	1009779	Argument	compiler		1009760	0					
ANR	1009780	Identifier	compiler		1009760	0					
ANR	1009781	IfStatement	if ( ! * first_patch )		1009760	3					
ANR	1009782	Condition	! * first_patch	326:5:10985:10997	1009760	0	True				
ANR	1009783	UnaryOperationExpression	! * first_patch		1009760	0					
ANR	1009784	UnaryOperator	!		1009760	0					
ANR	1009785	UnaryOperationExpression	* first_patch		1009760	1					
ANR	1009786	UnaryOperator	*		1009760	0					
ANR	1009787	Identifier	first_patch		1009760	1					
ANR	1009788	ExpressionStatement	value = ( sljit_si ) cpool_start_address [ cpool_current_index ]	327:2:11002:11060	1009760	1	True				
ANR	1009789	AssignmentExpression	value = ( sljit_si ) cpool_start_address [ cpool_current_index ]		1009760	0		=			
ANR	1009790	Identifier	value		1009760	0					
ANR	1009791	CastExpression	( sljit_si ) cpool_start_address [ cpool_current_index ]		1009760	1					
ANR	1009792	CastTarget	sljit_si		1009760	0					
ANR	1009793	ArrayIndexing	cpool_start_address [ cpool_current_index ]		1009760	1					
ANR	1009794	Identifier	cpool_start_address		1009760	0					
ANR	1009795	Identifier	cpool_current_index		1009760	1					
ANR	1009796	ElseStatement	else		1009760	0					
ANR	1009797	CompoundStatement		10:6:246:246	1009760	0					
ANR	1009798	ExpressionStatement	curr_patch = * first_patch	329:2:11072:11097	1009760	0	True				
ANR	1009799	AssignmentExpression	curr_patch = * first_patch		1009760	0		=			
ANR	1009800	Identifier	curr_patch		1009760	0					
ANR	1009801	UnaryOperationExpression	* first_patch		1009760	1					
ANR	1009802	UnaryOperator	*		1009760	0					
ANR	1009803	Identifier	first_patch		1009760	1					
ANR	1009804	ExpressionStatement	prev_patch = 0	330:2:11101:11115	1009760	1	True				
ANR	1009805	AssignmentExpression	prev_patch = 0		1009760	0		=			
ANR	1009806	Identifier	prev_patch		1009760	0					
ANR	1009807	PrimaryExpression	0		1009760	1					
ANR	1009808	WhileStatement	while ( 1 )		1009760	2					
ANR	1009809	Condition	1	331:9:11126:11126	1009760	0	True				
ANR	1009810	PrimaryExpression	1		1009760	0					
ANR	1009811	CompoundStatement		13:12:307:307	1009760	1					
ANR	1009812	IfStatement	if ( ! curr_patch )		1009760	0					
ANR	1009813	Condition	! curr_patch	332:7:11138:11148	1009760	0	True				
ANR	1009814	UnaryOperationExpression	! curr_patch		1009760	0					
ANR	1009815	UnaryOperator	!		1009760	0					
ANR	1009816	Identifier	curr_patch		1009760	1					
ANR	1009817	CompoundStatement		14:20:329:329	1009760	1					
ANR	1009818	ExpressionStatement	value = ( sljit_si ) cpool_start_address [ cpool_current_index ]	333:4:11157:11215	1009760	0	True				
ANR	1009819	AssignmentExpression	value = ( sljit_si ) cpool_start_address [ cpool_current_index ]		1009760	0		=			
ANR	1009820	Identifier	value		1009760	0					
ANR	1009821	CastExpression	( sljit_si ) cpool_start_address [ cpool_current_index ]		1009760	1					
ANR	1009822	CastTarget	sljit_si		1009760	0					
ANR	1009823	ArrayIndexing	cpool_start_address [ cpool_current_index ]		1009760	1					
ANR	1009824	Identifier	cpool_start_address		1009760	0					
ANR	1009825	Identifier	cpool_current_index		1009760	1					
ANR	1009826	BreakStatement	break ;	334:4:11221:11226	1009760	1	True				
ANR	1009827	IfStatement	if ( ( sljit_uw ) curr_patch -> index == cpool_current_index )		1009760	1					
ANR	1009828	Condition	( sljit_uw ) curr_patch -> index == cpool_current_index	336:7:11240:11289	1009760	0	True				
ANR	1009829	EqualityExpression	( sljit_uw ) curr_patch -> index == cpool_current_index		1009760	0		==			
ANR	1009830	CastExpression	( sljit_uw ) curr_patch -> index		1009760	0					
ANR	1009831	CastTarget	sljit_uw		1009760	0					
ANR	1009832	PtrMemberAccess	curr_patch -> index		1009760	1					
ANR	1009833	Identifier	curr_patch		1009760	0					
ANR	1009834	Identifier	index		1009760	1					
ANR	1009835	Identifier	cpool_current_index		1009760	1					
ANR	1009836	CompoundStatement		18:59:470:470	1009760	1					
ANR	1009837	ExpressionStatement	value = curr_patch -> value	337:4:11298:11323	1009760	0	True				
ANR	1009838	AssignmentExpression	value = curr_patch -> value		1009760	0		=			
ANR	1009839	Identifier	value		1009760	0					
ANR	1009840	PtrMemberAccess	curr_patch -> value		1009760	1					
ANR	1009841	Identifier	curr_patch		1009760	0					
ANR	1009842	Identifier	value		1009760	1					
ANR	1009843	IfStatement	if ( prev_patch )		1009760	1					
ANR	1009844	Condition	prev_patch	338:8:11333:11342	1009760	0	True				
ANR	1009845	Identifier	prev_patch		1009760	0					
ANR	1009846	ExpressionStatement	prev_patch -> next = curr_patch -> next	339:5:11350:11385	1009760	1	True				
ANR	1009847	AssignmentExpression	prev_patch -> next = curr_patch -> next		1009760	0		=			
ANR	1009848	PtrMemberAccess	prev_patch -> next		1009760	0					
ANR	1009849	Identifier	prev_patch		1009760	0					
ANR	1009850	Identifier	next		1009760	1					
ANR	1009851	PtrMemberAccess	curr_patch -> next		1009760	1					
ANR	1009852	Identifier	curr_patch		1009760	0					
ANR	1009853	Identifier	next		1009760	1					
ANR	1009854	ElseStatement	else		1009760	0					
ANR	1009855	ExpressionStatement	* first_patch = curr_patch -> next	341:5:11401:11432	1009760	0	True				
ANR	1009856	AssignmentExpression	* first_patch = curr_patch -> next		1009760	0		=			
ANR	1009857	UnaryOperationExpression	* first_patch		1009760	0					
ANR	1009858	UnaryOperator	*		1009760	0					
ANR	1009859	Identifier	first_patch		1009760	1					
ANR	1009860	PtrMemberAccess	curr_patch -> next		1009760	1					
ANR	1009861	Identifier	curr_patch		1009760	0					
ANR	1009862	Identifier	next		1009760	1					
ANR	1009863	ExpressionStatement	"SLJIT_FREE ( curr_patch , compiler -> allocator_data )"	342:4:11438:11486	1009760	2	True				
ANR	1009864	CallExpression	"SLJIT_FREE ( curr_patch , compiler -> allocator_data )"		1009760	0					
ANR	1009865	Callee	SLJIT_FREE		1009760	0					
ANR	1009866	Identifier	SLJIT_FREE		1009760	0					
ANR	1009867	ArgumentList	curr_patch		1009760	1					
ANR	1009868	Argument	curr_patch		1009760	0					
ANR	1009869	Identifier	curr_patch		1009760	0					
ANR	1009870	Argument	compiler -> allocator_data		1009760	1					
ANR	1009871	PtrMemberAccess	compiler -> allocator_data		1009760	0					
ANR	1009872	Identifier	compiler		1009760	0					
ANR	1009873	Identifier	allocator_data		1009760	1					
ANR	1009874	BreakStatement	break ;	343:4:11492:11497	1009760	3	True				
ANR	1009875	ExpressionStatement	prev_patch = curr_patch	345:3:11507:11530	1009760	2	True				
ANR	1009876	AssignmentExpression	prev_patch = curr_patch		1009760	0		=			
ANR	1009877	Identifier	prev_patch		1009760	0					
ANR	1009878	Identifier	curr_patch		1009760	1					
ANR	1009879	ExpressionStatement	curr_patch = curr_patch -> next	346:3:11535:11564	1009760	3	True				
ANR	1009880	AssignmentExpression	curr_patch = curr_patch -> next		1009760	0		=			
ANR	1009881	Identifier	curr_patch		1009760	0					
ANR	1009882	PtrMemberAccess	curr_patch -> next		1009760	1					
ANR	1009883	Identifier	curr_patch		1009760	0					
ANR	1009884	Identifier	next		1009760	1					
ANR	1009885	IfStatement	if ( value >= 0 )		1009760	4					
ANR	1009886	Condition	value >= 0	350:5:11579:11588	1009760	0	True				
ANR	1009887	RelationalExpression	value >= 0		1009760	0		>=			
ANR	1009888	Identifier	value		1009760	0					
ANR	1009889	PrimaryExpression	0		1009760	1					
ANR	1009890	CompoundStatement		32:17:769:769	1009760	1					
ANR	1009891	IfStatement	if ( ( sljit_uw ) value > cpool_current_index )		1009760	0					
ANR	1009892	Condition	( sljit_uw ) value > cpool_current_index	351:6:11599:11635	1009760	0	True				
ANR	1009893	RelationalExpression	( sljit_uw ) value > cpool_current_index		1009760	0		>			
ANR	1009894	CastExpression	( sljit_uw ) value		1009760	0					
ANR	1009895	CastTarget	sljit_uw		1009760	0					
ANR	1009896	Identifier	value		1009760	1					
ANR	1009897	Identifier	cpool_current_index		1009760	1					
ANR	1009898	CompoundStatement		33:45:816:816	1009760	1					
ANR	1009899	ExpressionStatement	"curr_patch = ( struct future_patch * ) SLJIT_MALLOC ( sizeof ( struct future_patch ) , compiler -> allocator_data )"	352:3:11643:11745	1009760	0	True				
ANR	1009900	AssignmentExpression	"curr_patch = ( struct future_patch * ) SLJIT_MALLOC ( sizeof ( struct future_patch ) , compiler -> allocator_data )"		1009760	0		=			
ANR	1009901	Identifier	curr_patch		1009760	0					
ANR	1009902	CastExpression	"( struct future_patch * ) SLJIT_MALLOC ( sizeof ( struct future_patch ) , compiler -> allocator_data )"		1009760	1					
ANR	1009903	CastTarget	struct future_patch *		1009760	0					
ANR	1009904	CallExpression	"SLJIT_MALLOC ( sizeof ( struct future_patch ) , compiler -> allocator_data )"		1009760	1					
ANR	1009905	Callee	SLJIT_MALLOC		1009760	0					
ANR	1009906	Identifier	SLJIT_MALLOC		1009760	0					
ANR	1009907	ArgumentList	sizeof ( struct future_patch )		1009760	1					
ANR	1009908	Argument	sizeof ( struct future_patch )		1009760	0					
ANR	1009909	SizeofExpression	sizeof ( struct future_patch )		1009760	0					
ANR	1009910	Sizeof	sizeof		1009760	0					
ANR	1009911	SizeofOperand	struct future_patch		1009760	1					
ANR	1009912	Argument	compiler -> allocator_data		1009760	1					
ANR	1009913	PtrMemberAccess	compiler -> allocator_data		1009760	0					
ANR	1009914	Identifier	compiler		1009760	0					
ANR	1009915	Identifier	allocator_data		1009760	1					
ANR	1009916	IfStatement	if ( ! curr_patch )		1009760	1					
ANR	1009917	Condition	! curr_patch	353:7:11754:11764	1009760	0	True				
ANR	1009918	UnaryOperationExpression	! curr_patch		1009760	0					
ANR	1009919	UnaryOperator	!		1009760	0					
ANR	1009920	Identifier	curr_patch		1009760	1					
ANR	1009921	CompoundStatement		35:20:945:945	1009760	1					
ANR	1009922	WhileStatement	while ( * first_patch )		1009760	0					
ANR	1009923	Condition	* first_patch	354:11:11780:11791	1009760	0	True				
ANR	1009924	UnaryOperationExpression	* first_patch		1009760	0					
ANR	1009925	UnaryOperator	*		1009760	0					
ANR	1009926	Identifier	first_patch		1009760	1					
ANR	1009927	CompoundStatement		36:25:972:972	1009760	1					
ANR	1009928	ExpressionStatement	curr_patch = * first_patch	355:5:11801:11826	1009760	0	True				
ANR	1009929	AssignmentExpression	curr_patch = * first_patch		1009760	0		=			
ANR	1009930	Identifier	curr_patch		1009760	0					
ANR	1009931	UnaryOperationExpression	* first_patch		1009760	1					
ANR	1009932	UnaryOperator	*		1009760	0					
ANR	1009933	Identifier	first_patch		1009760	1					
ANR	1009934	ExpressionStatement	* first_patch = ( * first_patch ) -> next	356:5:11833:11868	1009760	1	True				
ANR	1009935	AssignmentExpression	* first_patch = ( * first_patch ) -> next		1009760	0		=			
ANR	1009936	UnaryOperationExpression	* first_patch		1009760	0					
ANR	1009937	UnaryOperator	*		1009760	0					
ANR	1009938	Identifier	first_patch		1009760	1					
ANR	1009939	PtrMemberAccess	( * first_patch ) -> next		1009760	1					
ANR	1009940	UnaryOperationExpression	* first_patch		1009760	0					
ANR	1009941	UnaryOperator	*		1009760	0					
ANR	1009942	Identifier	first_patch		1009760	1					
ANR	1009943	Identifier	next		1009760	1					
ANR	1009944	ExpressionStatement	"SLJIT_FREE ( curr_patch , compiler -> allocator_data )"	357:5:11875:11923	1009760	2	True				
ANR	1009945	CallExpression	"SLJIT_FREE ( curr_patch , compiler -> allocator_data )"		1009760	0					
ANR	1009946	Callee	SLJIT_FREE		1009760	0					
ANR	1009947	Identifier	SLJIT_FREE		1009760	0					
ANR	1009948	ArgumentList	curr_patch		1009760	1					
ANR	1009949	Argument	curr_patch		1009760	0					
ANR	1009950	Identifier	curr_patch		1009760	0					
ANR	1009951	Argument	compiler -> allocator_data		1009760	1					
ANR	1009952	PtrMemberAccess	compiler -> allocator_data		1009760	0					
ANR	1009953	Identifier	compiler		1009760	0					
ANR	1009954	Identifier	allocator_data		1009760	1					
ANR	1009955	ReturnStatement	return SLJIT_ERR_ALLOC_FAILED ;	359:4:11935:11964	1009760	1	True				
ANR	1009956	Identifier	SLJIT_ERR_ALLOC_FAILED		1009760	0					
ANR	1009957	ExpressionStatement	curr_patch -> next = * first_patch	361:3:11974:12005	1009760	2	True				
ANR	1009958	AssignmentExpression	curr_patch -> next = * first_patch		1009760	0		=			
ANR	1009959	PtrMemberAccess	curr_patch -> next		1009760	0					
ANR	1009960	Identifier	curr_patch		1009760	0					
ANR	1009961	Identifier	next		1009760	1					
ANR	1009962	UnaryOperationExpression	* first_patch		1009760	1					
ANR	1009963	UnaryOperator	*		1009760	0					
ANR	1009964	Identifier	first_patch		1009760	1					
ANR	1009965	ExpressionStatement	curr_patch -> index = value	362:3:12010:12035	1009760	3	True				
ANR	1009966	AssignmentExpression	curr_patch -> index = value		1009760	0		=			
ANR	1009967	PtrMemberAccess	curr_patch -> index		1009760	0					
ANR	1009968	Identifier	curr_patch		1009760	0					
ANR	1009969	Identifier	index		1009760	1					
ANR	1009970	Identifier	value		1009760	1					
ANR	1009971	ExpressionStatement	curr_patch -> value = cpool_start_address [ value ]	363:3:12040:12086	1009760	4	True				
ANR	1009972	AssignmentExpression	curr_patch -> value = cpool_start_address [ value ]		1009760	0		=			
ANR	1009973	PtrMemberAccess	curr_patch -> value		1009760	0					
ANR	1009974	Identifier	curr_patch		1009760	0					
ANR	1009975	Identifier	value		1009760	1					
ANR	1009976	ArrayIndexing	cpool_start_address [ value ]		1009760	1					
ANR	1009977	Identifier	cpool_start_address		1009760	0					
ANR	1009978	Identifier	value		1009760	1					
ANR	1009979	ExpressionStatement	* first_patch = curr_patch	364:3:12091:12116	1009760	5	True				
ANR	1009980	AssignmentExpression	* first_patch = curr_patch		1009760	0		=			
ANR	1009981	UnaryOperationExpression	* first_patch		1009760	0					
ANR	1009982	UnaryOperator	*		1009760	0					
ANR	1009983	Identifier	first_patch		1009760	1					
ANR	1009984	Identifier	curr_patch		1009760	1					
ANR	1009985	ExpressionStatement	cpool_start_address [ value ] = * buf_ptr	366:2:12124:12161	1009760	1	True				
ANR	1009986	AssignmentExpression	cpool_start_address [ value ] = * buf_ptr		1009760	0		=			
ANR	1009987	ArrayIndexing	cpool_start_address [ value ]		1009760	0					
ANR	1009988	Identifier	cpool_start_address		1009760	0					
ANR	1009989	Identifier	value		1009760	1					
ANR	1009990	UnaryOperationExpression	* buf_ptr		1009760	1					
ANR	1009991	UnaryOperator	*		1009760	0					
ANR	1009992	Identifier	buf_ptr		1009760	1					
ANR	1009993	ReturnStatement	return SLJIT_SUCCESS ;	368:1:12167:12187	1009760	5	True				
ANR	1009994	Identifier	SLJIT_SUCCESS		1009760	0					
ANR	1009995	ReturnType	static sljit_si		1009760	1					
ANR	1009996	Identifier	resolve_const_pool_index		1009760	2					
ANR	1009997	ParameterList	"struct sljit_compiler * compiler , struct future_patch * * first_patch , sljit_uw cpool_current_index , sljit_uw * cpool_start_address , sljit_uw * buf_ptr"		1009760	3					
ANR	1009998	Parameter	struct sljit_compiler * compiler	318:41:10673:10703	1009760	0	True				
ANR	1009999	ParameterType	struct sljit_compiler *		1009760	0					
ANR	1010000	Identifier	compiler		1009760	1					
ANR	1010001	Parameter	struct future_patch * * first_patch	318:74:10706:10738	1009760	1	True				
ANR	1010002	ParameterType	struct future_patch * *		1009760	0					
ANR	1010003	Identifier	first_patch		1009760	1					
ANR	1010004	Parameter	sljit_uw cpool_current_index	318:109:10741:10768	1009760	2	True				
ANR	1010005	ParameterType	sljit_uw		1009760	0					
ANR	1010006	Identifier	cpool_current_index		1009760	1					
ANR	1010007	Parameter	sljit_uw * cpool_start_address	318:139:10771:10799	1009760	3	True				
ANR	1010008	ParameterType	sljit_uw *		1009760	0					
ANR	1010009	Identifier	cpool_start_address		1009760	1					
ANR	1010010	Parameter	sljit_uw * buf_ptr	318:170:10802:10818	1009760	4	True				
ANR	1010011	ParameterType	sljit_uw *		1009760	0					
ANR	1010012	Identifier	buf_ptr		1009760	1					
ANR	1010013	CFGEntryNode	ENTRY		1009760		True				
ANR	1010014	CFGExitNode	EXIT		1009760		True				
ANR	1010015	Symbol	curr_patch -> next		1009760						
ANR	1010016	Symbol	( * first_patch ) -> next		1009760						
ANR	1010017	Symbol	cpool_current_index		1009760						
ANR	1010018	Symbol	SLJIT_ERR_ALLOC_FAILED		1009760						
ANR	1010019	Symbol	cpool_start_address		1009760						
ANR	1010020	Symbol	* compiler		1009760						
ANR	1010021	Symbol	* cpool_start_address		1009760						
ANR	1010022	Symbol	prev_patch -> next		1009760						
ANR	1010023	Symbol	curr_patch		1009760						
ANR	1010024	Symbol	* curr_patch		1009760						
ANR	1010025	Symbol	* first_patch		1009760						
ANR	1010026	Symbol	compiler		1009760						
ANR	1010027	Symbol	value		1009760						
ANR	1010028	Symbol	first_patch		1009760						
ANR	1010029	Symbol	* * first_patch		1009760						
ANR	1010030	Symbol	* buf_ptr		1009760						
ANR	1010031	Symbol	SLJIT_MALLOC		1009760						
ANR	1010032	Symbol	SLJIT_SUCCESS		1009760						
ANR	1010033	Symbol	curr_patch -> index		1009760						
ANR	1010034	Symbol	buf_ptr		1009760						
ANR	1010035	Symbol	curr_patch -> value		1009760						
ANR	1010036	Symbol	* prev_patch		1009760						
ANR	1010037	Symbol	* cpool_current_index		1009760						
ANR	1010038	Symbol	* value		1009760						
ANR	1010039	Symbol	compiler -> allocator_data		1009760						
ANR	1010040	Symbol	prev_patch		1009760						
ANR	1010041	Function	push_inst	373:0:12199:12422							
ANR	1010042	FunctionDef	"push_inst (struct sljit_compiler * compiler , sljit_uw inst)"		1010041	0					
ANR	1010043	CompoundStatement		374:0:12273:12422	1010041	0					
ANR	1010044	IdentifierDeclStatement	sljit_uw * ptr ;	375:1:12276:12289	1010041	0	True				
ANR	1010045	IdentifierDecl	* ptr		1010041	0					
ANR	1010046	IdentifierDeclType	sljit_uw *		1010041	0					
ANR	1010047	Identifier	ptr		1010041	1					
ANR	1010048	ExpressionStatement	"ptr = ( sljit_uw * ) ensure_buf ( compiler , sizeof ( sljit_uw ) )"	377:1:12293:12348	1010041	1	True				
ANR	1010049	AssignmentExpression	"ptr = ( sljit_uw * ) ensure_buf ( compiler , sizeof ( sljit_uw ) )"		1010041	0		=			
ANR	1010050	Identifier	ptr		1010041	0					
ANR	1010051	CastExpression	"( sljit_uw * ) ensure_buf ( compiler , sizeof ( sljit_uw ) )"		1010041	1					
ANR	1010052	CastTarget	sljit_uw *		1010041	0					
ANR	1010053	CallExpression	"ensure_buf ( compiler , sizeof ( sljit_uw ) )"		1010041	1					
ANR	1010054	Callee	ensure_buf		1010041	0					
ANR	1010055	Identifier	ensure_buf		1010041	0					
ANR	1010056	ArgumentList	compiler		1010041	1					
ANR	1010057	Argument	compiler		1010041	0					
ANR	1010058	Identifier	compiler		1010041	0					
ANR	1010059	Argument	sizeof ( sljit_uw )		1010041	1					
ANR	1010060	SizeofExpression	sizeof ( sljit_uw )		1010041	0					
ANR	1010061	Sizeof	sizeof		1010041	0					
ANR	1010062	SizeofOperand	sljit_uw		1010041	1					
ANR	1010063	ExpressionStatement	FAIL_IF ( ! ptr )	378:1:12351:12364	1010041	2	True				
ANR	1010064	CallExpression	FAIL_IF ( ! ptr )		1010041	0					
ANR	1010065	Callee	FAIL_IF		1010041	0					
ANR	1010066	Identifier	FAIL_IF		1010041	0					
ANR	1010067	ArgumentList	! ptr		1010041	1					
ANR	1010068	Argument	! ptr		1010041	0					
ANR	1010069	UnaryOperationExpression	! ptr		1010041	0					
ANR	1010070	UnaryOperator	!		1010041	0					
ANR	1010071	Identifier	ptr		1010041	1					
ANR	1010072	ExpressionStatement	compiler -> size ++	379:1:12367:12383	1010041	3	True				
ANR	1010073	PostIncDecOperationExpression	compiler -> size ++		1010041	0					
ANR	1010074	PtrMemberAccess	compiler -> size		1010041	0					
ANR	1010075	Identifier	compiler		1010041	0					
ANR	1010076	Identifier	size		1010041	1					
ANR	1010077	IncDec	++		1010041	1					
ANR	1010078	ExpressionStatement	* ptr = inst	380:1:12386:12397	1010041	4	True				
ANR	1010079	AssignmentExpression	* ptr = inst		1010041	0		=			
ANR	1010080	UnaryOperationExpression	* ptr		1010041	0					
ANR	1010081	UnaryOperator	*		1010041	0					
ANR	1010082	Identifier	ptr		1010041	1					
ANR	1010083	Identifier	inst		1010041	1					
ANR	1010084	ReturnStatement	return SLJIT_SUCCESS ;	381:1:12400:12420	1010041	5	True				
ANR	1010085	Identifier	SLJIT_SUCCESS		1010041	0					
ANR	1010086	ReturnType	static sljit_si		1010041	1					
ANR	1010087	Identifier	push_inst		1010041	2					
ANR	1010088	ParameterList	"struct sljit_compiler * compiler , sljit_uw inst"		1010041	3					
ANR	1010089	Parameter	struct sljit_compiler * compiler	373:26:12225:12255	1010041	0	True				
ANR	1010090	ParameterType	struct sljit_compiler *		1010041	0					
ANR	1010091	Identifier	compiler		1010041	1					
ANR	1010092	Parameter	sljit_uw inst	373:59:12258:12270	1010041	1	True				
ANR	1010093	ParameterType	sljit_uw		1010041	0					
ANR	1010094	Identifier	inst		1010041	1					
ANR	1010095	CFGEntryNode	ENTRY		1010041		True				
ANR	1010096	CFGExitNode	EXIT		1010041		True				
ANR	1010097	Symbol	compiler -> size		1010041						
ANR	1010098	Symbol	inst		1010041						
ANR	1010099	Symbol	ensure_buf		1010041						
ANR	1010100	Symbol	* ptr		1010041						
ANR	1010101	Symbol	SLJIT_SUCCESS		1010041						
ANR	1010102	Symbol	* compiler		1010041						
ANR	1010103	Symbol	compiler		1010041						
ANR	1010104	Symbol	ptr		1010041						
ANR	1010105	Function	emit_imm	384:0:12425:12709							
ANR	1010106	FunctionDef	"emit_imm (struct sljit_compiler * compiler , sljit_si reg , sljit_sw imm)"		1010105	0					
ANR	1010107	CompoundStatement		385:0:12524:12709	1010105	0					
ANR	1010108	ExpressionStatement	"FAIL_IF ( push_inst ( compiler , MOVW | RD ( reg ) | ( ( imm << 4 ) & 0xf0000 ) | ( imm & 0xfff ) ) )"	386:1:12527:12612	1010105	0	True				
ANR	1010109	CallExpression	"FAIL_IF ( push_inst ( compiler , MOVW | RD ( reg ) | ( ( imm << 4 ) & 0xf0000 ) | ( imm & 0xfff ) ) )"		1010105	0					
ANR	1010110	Callee	FAIL_IF		1010105	0					
ANR	1010111	Identifier	FAIL_IF		1010105	0					
ANR	1010112	ArgumentList	"push_inst ( compiler , MOVW | RD ( reg ) | ( ( imm << 4 ) & 0xf0000 ) | ( imm & 0xfff ) )"		1010105	1					
ANR	1010113	Argument	"push_inst ( compiler , MOVW | RD ( reg ) | ( ( imm << 4 ) & 0xf0000 ) | ( imm & 0xfff ) )"		1010105	0					
ANR	1010114	CallExpression	"push_inst ( compiler , MOVW | RD ( reg ) | ( ( imm << 4 ) & 0xf0000 ) | ( imm & 0xfff ) )"		1010105	0					
ANR	1010115	Callee	push_inst		1010105	0					
ANR	1010116	Identifier	push_inst		1010105	0					
ANR	1010117	ArgumentList	compiler		1010105	1					
ANR	1010118	Argument	compiler		1010105	0					
ANR	1010119	Identifier	compiler		1010105	0					
ANR	1010120	Argument	MOVW | RD ( reg ) | ( ( imm << 4 ) & 0xf0000 ) | ( imm & 0xfff )		1010105	1					
ANR	1010121	InclusiveOrExpression	MOVW | RD ( reg ) | ( ( imm << 4 ) & 0xf0000 ) | ( imm & 0xfff )		1010105	0		|			
ANR	1010122	Identifier	MOVW		1010105	0					
ANR	1010123	InclusiveOrExpression	RD ( reg ) | ( ( imm << 4 ) & 0xf0000 ) | ( imm & 0xfff )		1010105	1		|			
ANR	1010124	CallExpression	RD ( reg )		1010105	0					
ANR	1010125	Callee	RD		1010105	0					
ANR	1010126	Identifier	RD		1010105	0					
ANR	1010127	ArgumentList	reg		1010105	1					
ANR	1010128	Argument	reg		1010105	0					
ANR	1010129	Identifier	reg		1010105	0					
ANR	1010130	InclusiveOrExpression	( ( imm << 4 ) & 0xf0000 ) | ( imm & 0xfff )		1010105	1		|			
ANR	1010131	BitAndExpression	( imm << 4 ) & 0xf0000		1010105	0		&			
ANR	1010132	ShiftExpression	imm << 4		1010105	0		<<			
ANR	1010133	Identifier	imm		1010105	0					
ANR	1010134	PrimaryExpression	4		1010105	1					
ANR	1010135	PrimaryExpression	0xf0000		1010105	1					
ANR	1010136	BitAndExpression	imm & 0xfff		1010105	1		&			
ANR	1010137	Identifier	imm		1010105	0					
ANR	1010138	PrimaryExpression	0xfff		1010105	1					
ANR	1010139	ReturnStatement	"return push_inst ( compiler , MOVT | RD ( reg ) | ( ( imm >> 12 ) & 0xf0000 ) | ( ( imm >> 16 ) & 0xfff ) ) ;"	387:1:12615:12707	1010105	1	True				
ANR	1010140	CallExpression	"push_inst ( compiler , MOVT | RD ( reg ) | ( ( imm >> 12 ) & 0xf0000 ) | ( ( imm >> 16 ) & 0xfff ) )"		1010105	0					
ANR	1010141	Callee	push_inst		1010105	0					
ANR	1010142	Identifier	push_inst		1010105	0					
ANR	1010143	ArgumentList	compiler		1010105	1					
ANR	1010144	Argument	compiler		1010105	0					
ANR	1010145	Identifier	compiler		1010105	0					
ANR	1010146	Argument	MOVT | RD ( reg ) | ( ( imm >> 12 ) & 0xf0000 ) | ( ( imm >> 16 ) & 0xfff )		1010105	1					
ANR	1010147	InclusiveOrExpression	MOVT | RD ( reg ) | ( ( imm >> 12 ) & 0xf0000 ) | ( ( imm >> 16 ) & 0xfff )		1010105	0		|			
ANR	1010148	Identifier	MOVT		1010105	0					
ANR	1010149	InclusiveOrExpression	RD ( reg ) | ( ( imm >> 12 ) & 0xf0000 ) | ( ( imm >> 16 ) & 0xfff )		1010105	1		|			
ANR	1010150	CallExpression	RD ( reg )		1010105	0					
ANR	1010151	Callee	RD		1010105	0					
ANR	1010152	Identifier	RD		1010105	0					
ANR	1010153	ArgumentList	reg		1010105	1					
ANR	1010154	Argument	reg		1010105	0					
ANR	1010155	Identifier	reg		1010105	0					
ANR	1010156	InclusiveOrExpression	( ( imm >> 12 ) & 0xf0000 ) | ( ( imm >> 16 ) & 0xfff )		1010105	1		|			
ANR	1010157	BitAndExpression	( imm >> 12 ) & 0xf0000		1010105	0		&			
ANR	1010158	ShiftExpression	imm >> 12		1010105	0		>>			
ANR	1010159	Identifier	imm		1010105	0					
ANR	1010160	PrimaryExpression	12		1010105	1					
ANR	1010161	PrimaryExpression	0xf0000		1010105	1					
ANR	1010162	BitAndExpression	( imm >> 16 ) & 0xfff		1010105	1		&			
ANR	1010163	ShiftExpression	imm >> 16		1010105	0		>>			
ANR	1010164	Identifier	imm		1010105	0					
ANR	1010165	PrimaryExpression	16		1010105	1					
ANR	1010166	PrimaryExpression	0xfff		1010105	1					
ANR	1010167	ReturnType	static SLJIT_INLINE sljit_si		1010105	1					
ANR	1010168	Identifier	emit_imm		1010105	2					
ANR	1010169	ParameterList	"struct sljit_compiler * compiler , sljit_si reg , sljit_sw imm"		1010105	3					
ANR	1010170	Parameter	struct sljit_compiler * compiler	384:38:12463:12493	1010105	0	True				
ANR	1010171	ParameterType	struct sljit_compiler *		1010105	0					
ANR	1010172	Identifier	compiler		1010105	1					
ANR	1010173	Parameter	sljit_si reg	384:71:12496:12507	1010105	1	True				
ANR	1010174	ParameterType	sljit_si		1010105	0					
ANR	1010175	Identifier	reg		1010105	1					
ANR	1010176	Parameter	sljit_sw imm	384:85:12510:12521	1010105	2	True				
ANR	1010177	ParameterType	sljit_sw		1010105	0					
ANR	1010178	Identifier	imm		1010105	1					
ANR	1010179	CFGEntryNode	ENTRY		1010105		True				
ANR	1010180	CFGExitNode	EXIT		1010105		True				
ANR	1010181	Symbol	push_inst		1010105						
ANR	1010182	Symbol	RD		1010105						
ANR	1010183	Symbol	MOVT		1010105						
ANR	1010184	Symbol	reg		1010105						
ANR	1010185	Symbol	MOVW		1010105						
ANR	1010186	Symbol	imm		1010105						
ANR	1010187	Symbol	compiler		1010105						
ANR	1010188	Function	detect_jump_type	392:0:12720:14197							
ANR	1010189	FunctionDef	"detect_jump_type (struct sljit_jump * jump , sljit_uw * code_ptr , sljit_uw * code)"		1010188	0					
ANR	1010190	CompoundStatement		393:0:12827:14197	1010188	0					
ANR	1010191	IdentifierDeclStatement	sljit_sw diff ;	394:1:12830:12843	1010188	0	True				
ANR	1010192	IdentifierDecl	diff		1010188	0					
ANR	1010193	IdentifierDeclType	sljit_sw		1010188	0					
ANR	1010194	Identifier	diff		1010188	1					
ANR	1010195	IfStatement	if ( jump -> flags & SLJIT_REWRITABLE_JUMP )		1010188	1					
ANR	1010196	Condition	jump -> flags & SLJIT_REWRITABLE_JUMP	396:5:12851:12885	1010188	0	True				
ANR	1010197	BitAndExpression	jump -> flags & SLJIT_REWRITABLE_JUMP		1010188	0		&			
ANR	1010198	PtrMemberAccess	jump -> flags		1010188	0					
ANR	1010199	Identifier	jump		1010188	0					
ANR	1010200	Identifier	flags		1010188	1					
ANR	1010201	Identifier	SLJIT_REWRITABLE_JUMP		1010188	1					
ANR	1010202	ReturnStatement	return 0 ;	397:2:12890:12898	1010188	1	True				
ANR	1010203	PrimaryExpression	0		1010188	0					
ANR	1010204	IfStatement	if ( jump -> flags & IS_BL )		1010188	2					
ANR	1010205	Condition	jump -> flags & IS_BL	400:5:12963:12981	1010188	0	True				
ANR	1010206	BitAndExpression	jump -> flags & IS_BL		1010188	0		&			
ANR	1010207	PtrMemberAccess	jump -> flags		1010188	0					
ANR	1010208	Identifier	jump		1010188	0					
ANR	1010209	Identifier	flags		1010188	1					
ANR	1010210	Identifier	IS_BL		1010188	1					
ANR	1010211	ExpressionStatement	code_ptr --	401:2:12986:12996	1010188	1	True				
ANR	1010212	PostIncDecOperationExpression	code_ptr --		1010188	0					
ANR	1010213	Identifier	code_ptr		1010188	0					
ANR	1010214	IncDec	--		1010188	1					
ANR	1010215	IfStatement	if ( jump -> flags & JUMP_ADDR )		1010188	3					
ANR	1010216	Condition	jump -> flags & JUMP_ADDR	403:5:13004:13026	1010188	0	True				
ANR	1010217	BitAndExpression	jump -> flags & JUMP_ADDR		1010188	0		&			
ANR	1010218	PtrMemberAccess	jump -> flags		1010188	0					
ANR	1010219	Identifier	jump		1010188	0					
ANR	1010220	Identifier	flags		1010188	1					
ANR	1010221	Identifier	JUMP_ADDR		1010188	1					
ANR	1010222	ExpressionStatement	diff = ( ( sljit_sw ) jump -> u . target - ( sljit_sw ) ( code_ptr + 2 ) )	404:2:13031:13091	1010188	1	True				
ANR	1010223	AssignmentExpression	diff = ( ( sljit_sw ) jump -> u . target - ( sljit_sw ) ( code_ptr + 2 ) )		1010188	0		=			
ANR	1010224	Identifier	diff		1010188	0					
ANR	1010225	AdditiveExpression	( sljit_sw ) jump -> u . target - ( sljit_sw ) ( code_ptr + 2 )		1010188	1		-			
ANR	1010226	CastExpression	( sljit_sw ) jump -> u . target		1010188	0					
ANR	1010227	CastTarget	sljit_sw		1010188	0					
ANR	1010228	MemberAccess	jump -> u . target		1010188	1					
ANR	1010229	PtrMemberAccess	jump -> u		1010188	0					
ANR	1010230	Identifier	jump		1010188	0					
ANR	1010231	Identifier	u		1010188	1					
ANR	1010232	Identifier	target		1010188	1					
ANR	1010233	CastExpression	( sljit_sw ) ( code_ptr + 2 )		1010188	1					
ANR	1010234	CastTarget	sljit_sw		1010188	0					
ANR	1010235	AdditiveExpression	code_ptr + 2		1010188	1		+			
ANR	1010236	Identifier	code_ptr		1010188	0					
ANR	1010237	PrimaryExpression	2		1010188	1					
ANR	1010238	ElseStatement	else		1010188	0					
ANR	1010239	CompoundStatement		13:6:271:271	1010188	0					
ANR	1010240	ExpressionStatement	SLJIT_ASSERT ( jump -> flags & JUMP_LABEL )	406:2:13103:13141	1010188	0	True				
ANR	1010241	CallExpression	SLJIT_ASSERT ( jump -> flags & JUMP_LABEL )		1010188	0					
ANR	1010242	Callee	SLJIT_ASSERT		1010188	0					
ANR	1010243	Identifier	SLJIT_ASSERT		1010188	0					
ANR	1010244	ArgumentList	jump -> flags & JUMP_LABEL		1010188	1					
ANR	1010245	Argument	jump -> flags & JUMP_LABEL		1010188	0					
ANR	1010246	BitAndExpression	jump -> flags & JUMP_LABEL		1010188	0		&			
ANR	1010247	PtrMemberAccess	jump -> flags		1010188	0					
ANR	1010248	Identifier	jump		1010188	0					
ANR	1010249	Identifier	flags		1010188	1					
ANR	1010250	Identifier	JUMP_LABEL		1010188	1					
ANR	1010251	ExpressionStatement	diff = ( ( sljit_sw ) ( code + jump -> u . label -> size ) - ( sljit_sw ) ( code_ptr + 2 ) )	407:2:13145:13219	1010188	1	True				
ANR	1010252	AssignmentExpression	diff = ( ( sljit_sw ) ( code + jump -> u . label -> size ) - ( sljit_sw ) ( code_ptr + 2 ) )		1010188	0		=			
ANR	1010253	Identifier	diff		1010188	0					
ANR	1010254	AdditiveExpression	( sljit_sw ) ( code + jump -> u . label -> size ) - ( sljit_sw ) ( code_ptr + 2 )		1010188	1		-			
ANR	1010255	CastExpression	( sljit_sw ) ( code + jump -> u . label -> size )		1010188	0					
ANR	1010256	CastTarget	sljit_sw		1010188	0					
ANR	1010257	AdditiveExpression	code + jump -> u . label -> size		1010188	1		+			
ANR	1010258	Identifier	code		1010188	0					
ANR	1010259	PtrMemberAccess	jump -> u . label -> size		1010188	1					
ANR	1010260	MemberAccess	jump -> u . label		1010188	0					
ANR	1010261	PtrMemberAccess	jump -> u		1010188	0					
ANR	1010262	Identifier	jump		1010188	0					
ANR	1010263	Identifier	u		1010188	1					
ANR	1010264	Identifier	label		1010188	1					
ANR	1010265	Identifier	size		1010188	1					
ANR	1010266	CastExpression	( sljit_sw ) ( code_ptr + 2 )		1010188	1					
ANR	1010267	CastTarget	sljit_sw		1010188	0					
ANR	1010268	AdditiveExpression	code_ptr + 2		1010188	1		+			
ANR	1010269	Identifier	code_ptr		1010188	0					
ANR	1010270	PrimaryExpression	2		1010188	1					
ANR	1010271	IfStatement	if ( diff & 0x3 )		1010188	4					
ANR	1010272	Condition	diff & 0x3	411:5:13286:13295	1010188	0	True				
ANR	1010273	BitAndExpression	diff & 0x3		1010188	0		&			
ANR	1010274	Identifier	diff		1010188	0					
ANR	1010275	PrimaryExpression	0x3		1010188	1					
ANR	1010276	ReturnStatement	return 0 ;	412:2:13300:13308	1010188	1	True				
ANR	1010277	PrimaryExpression	0		1010188	0					
ANR	1010278	IfStatement	if ( jump -> flags & IS_BL )		1010188	5					
ANR	1010279	Condition	jump -> flags & IS_BL	414:5:13316:13334	1010188	0	True				
ANR	1010280	BitAndExpression	jump -> flags & IS_BL		1010188	0		&			
ANR	1010281	PtrMemberAccess	jump -> flags		1010188	0					
ANR	1010282	Identifier	jump		1010188	0					
ANR	1010283	Identifier	flags		1010188	1					
ANR	1010284	Identifier	IS_BL		1010188	1					
ANR	1010285	CompoundStatement		22:26:509:509	1010188	1					
ANR	1010286	IfStatement	if ( diff <= 0x01ffffff && diff >= - 0x02000000 )		1010188	0					
ANR	1010287	Condition	diff <= 0x01ffffff && diff >= - 0x02000000	415:6:13345:13385	1010188	0	True				
ANR	1010288	AndExpression	diff <= 0x01ffffff && diff >= - 0x02000000		1010188	0		&&			
ANR	1010289	RelationalExpression	diff <= 0x01ffffff		1010188	0		<=			
ANR	1010290	Identifier	diff		1010188	0					
ANR	1010291	PrimaryExpression	0x01ffffff		1010188	1					
ANR	1010292	RelationalExpression	diff >= - 0x02000000		1010188	1		>=			
ANR	1010293	Identifier	diff		1010188	0					
ANR	1010294	UnaryOperationExpression	- 0x02000000		1010188	1					
ANR	1010295	UnaryOperator	-		1010188	0					
ANR	1010296	PrimaryExpression	0x02000000		1010188	1					
ANR	1010297	CompoundStatement		23:49:560:560	1010188	1					
ANR	1010298	ExpressionStatement	* code_ptr = ( BL - CONDITIONAL ) | ( * ( code_ptr + 1 ) & COND_MASK )	416:3:13393:13455	1010188	0	True				
ANR	1010299	AssignmentExpression	* code_ptr = ( BL - CONDITIONAL ) | ( * ( code_ptr + 1 ) & COND_MASK )		1010188	0		=			
ANR	1010300	UnaryOperationExpression	* code_ptr		1010188	0					
ANR	1010301	UnaryOperator	*		1010188	0					
ANR	1010302	Identifier	code_ptr		1010188	1					
ANR	1010303	InclusiveOrExpression	( BL - CONDITIONAL ) | ( * ( code_ptr + 1 ) & COND_MASK )		1010188	1		|			
ANR	1010304	AdditiveExpression	BL - CONDITIONAL		1010188	0		-			
ANR	1010305	Identifier	BL		1010188	0					
ANR	1010306	Identifier	CONDITIONAL		1010188	1					
ANR	1010307	BitAndExpression	* ( code_ptr + 1 ) & COND_MASK		1010188	1		&			
ANR	1010308	UnaryOperationExpression	* ( code_ptr + 1 )		1010188	0					
ANR	1010309	UnaryOperator	*		1010188	0					
ANR	1010310	AdditiveExpression	code_ptr + 1		1010188	1		+			
ANR	1010311	Identifier	code_ptr		1010188	0					
ANR	1010312	PrimaryExpression	1		1010188	1					
ANR	1010313	Identifier	COND_MASK		1010188	1					
ANR	1010314	ExpressionStatement	jump -> flags |= PATCH_B	417:3:13460:13482	1010188	1	True				
ANR	1010315	AssignmentExpression	jump -> flags |= PATCH_B		1010188	0		|=			
ANR	1010316	PtrMemberAccess	jump -> flags		1010188	0					
ANR	1010317	Identifier	jump		1010188	0					
ANR	1010318	Identifier	flags		1010188	1					
ANR	1010319	Identifier	PATCH_B		1010188	1					
ANR	1010320	ReturnStatement	return 1 ;	418:3:13487:13495	1010188	2	True				
ANR	1010321	PrimaryExpression	1		1010188	0					
ANR	1010322	ElseStatement	else		1010188	0					
ANR	1010323	CompoundStatement		29:6:682:682	1010188	0					
ANR	1010324	IfStatement	if ( diff <= 0x01ffffff && diff >= - 0x02000000 )		1010188	0					
ANR	1010325	Condition	diff <= 0x01ffffff && diff >= - 0x02000000	422:6:13518:13558	1010188	0	True				
ANR	1010326	AndExpression	diff <= 0x01ffffff && diff >= - 0x02000000		1010188	0		&&			
ANR	1010327	RelationalExpression	diff <= 0x01ffffff		1010188	0		<=			
ANR	1010328	Identifier	diff		1010188	0					
ANR	1010329	PrimaryExpression	0x01ffffff		1010188	1					
ANR	1010330	RelationalExpression	diff >= - 0x02000000		1010188	1		>=			
ANR	1010331	Identifier	diff		1010188	0					
ANR	1010332	UnaryOperationExpression	- 0x02000000		1010188	1					
ANR	1010333	UnaryOperator	-		1010188	0					
ANR	1010334	PrimaryExpression	0x02000000		1010188	1					
ANR	1010335	CompoundStatement		30:49:733:733	1010188	1					
ANR	1010336	ExpressionStatement	* code_ptr = ( B - CONDITIONAL ) | ( * code_ptr & COND_MASK )	423:3:13566:13621	1010188	0	True				
ANR	1010337	AssignmentExpression	* code_ptr = ( B - CONDITIONAL ) | ( * code_ptr & COND_MASK )		1010188	0		=			
ANR	1010338	UnaryOperationExpression	* code_ptr		1010188	0					
ANR	1010339	UnaryOperator	*		1010188	0					
ANR	1010340	Identifier	code_ptr		1010188	1					
ANR	1010341	InclusiveOrExpression	( B - CONDITIONAL ) | ( * code_ptr & COND_MASK )		1010188	1		|			
ANR	1010342	AdditiveExpression	B - CONDITIONAL		1010188	0		-			
ANR	1010343	Identifier	B		1010188	0					
ANR	1010344	Identifier	CONDITIONAL		1010188	1					
ANR	1010345	BitAndExpression	* code_ptr & COND_MASK		1010188	1		&			
ANR	1010346	UnaryOperationExpression	* code_ptr		1010188	0					
ANR	1010347	UnaryOperator	*		1010188	0					
ANR	1010348	Identifier	code_ptr		1010188	1					
ANR	1010349	Identifier	COND_MASK		1010188	1					
ANR	1010350	ExpressionStatement	jump -> flags |= PATCH_B	424:3:13626:13648	1010188	1	True				
ANR	1010351	AssignmentExpression	jump -> flags |= PATCH_B		1010188	0		|=			
ANR	1010352	PtrMemberAccess	jump -> flags		1010188	0					
ANR	1010353	Identifier	jump		1010188	0					
ANR	1010354	Identifier	flags		1010188	1					
ANR	1010355	Identifier	PATCH_B		1010188	1					
ANR	1010356	ReturnStatement	return 0 ;	446:1:14187:14195	1010188	6	True				
ANR	1010357	PrimaryExpression	0		1010188	0					
ANR	1010358	ReturnType	static SLJIT_INLINE sljit_si		1010188	1					
ANR	1010359	Identifier	detect_jump_type		1010188	2					
ANR	1010360	ParameterList	"struct sljit_jump * jump , sljit_uw * code_ptr , sljit_uw * code"		1010188	3					
ANR	1010361	Parameter	struct sljit_jump * jump	392:46:12766:12788	1010188	0	True				
ANR	1010362	ParameterType	struct sljit_jump *		1010188	0					
ANR	1010363	Identifier	jump		1010188	1					
ANR	1010364	Parameter	sljit_uw * code_ptr	392:71:12791:12808	1010188	1	True				
ANR	1010365	ParameterType	sljit_uw *		1010188	0					
ANR	1010366	Identifier	code_ptr		1010188	1					
ANR	1010367	Parameter	sljit_uw * code	392:91:12811:12824	1010188	2	True				
ANR	1010368	ParameterType	sljit_uw *		1010188	0					
ANR	1010369	Identifier	code		1010188	1					
ANR	1010370	CFGEntryNode	ENTRY		1010188		True				
ANR	1010371	CFGExitNode	EXIT		1010188		True				
ANR	1010372	Symbol	jump -> u . label -> size		1010188						
ANR	1010373	Symbol	B		1010188						
ANR	1010374	Symbol	code		1010188						
ANR	1010375	Symbol	* * jump		1010188						
ANR	1010376	Symbol	* jump		1010188						
ANR	1010377	Symbol	jump -> u		1010188						
ANR	1010378	Symbol	jump -> flags		1010188						
ANR	1010379	Symbol	JUMP_LABEL		1010188						
ANR	1010380	Symbol	diff		1010188						
ANR	1010381	Symbol	JUMP_ADDR		1010188						
ANR	1010382	Symbol	BL		1010188						
ANR	1010383	Symbol	CONDITIONAL		1010188						
ANR	1010384	Symbol	* ( code_ptr + 1 )		1010188						
ANR	1010385	Symbol	* code_ptr		1010188						
ANR	1010386	Symbol	* jump -> u . label		1010188						
ANR	1010387	Symbol	* jump -> u		1010188						
ANR	1010388	Symbol	code_ptr		1010188						
ANR	1010389	Symbol	IS_BL		1010188						
ANR	1010390	Symbol	jump -> u . target		1010188						
ANR	1010391	Symbol	PATCH_B		1010188						
ANR	1010392	Symbol	SLJIT_REWRITABLE_JUMP		1010188						
ANR	1010393	Symbol	jump -> u . label		1010188						
ANR	1010394	Symbol	COND_MASK		1010188						
ANR	1010395	Symbol	jump		1010188						
ANR	1010396	Function	inline_set_jump_addr	449:0:14200:15755							
ANR	1010397	FunctionDef	"inline_set_jump_addr (sljit_uw addr , sljit_uw new_addr , sljit_si flush)"		1010396	0					
ANR	1010398	CompoundStatement		450:0:14296:15755	1010396	0					
ANR	1010399	IdentifierDeclStatement	sljit_uw * ptr = ( sljit_uw * ) addr ;	452:1:14356:14387	1010396	0	True				
ANR	1010400	IdentifierDecl	* ptr = ( sljit_uw * ) addr		1010396	0					
ANR	1010401	IdentifierDeclType	sljit_uw *		1010396	0					
ANR	1010402	Identifier	ptr		1010396	1					
ANR	1010403	AssignmentExpression	* ptr = ( sljit_uw * ) addr		1010396	2		=			
ANR	1010404	Identifier	ptr		1010396	0					
ANR	1010405	CastExpression	( sljit_uw * ) addr		1010396	1					
ANR	1010406	CastTarget	sljit_uw *		1010396	0					
ANR	1010407	Identifier	addr		1010396	1					
ANR	1010408	IdentifierDeclStatement	sljit_uw * inst = ( sljit_uw * ) ptr [ 0 ] ;	453:1:14390:14424	1010396	1	True				
ANR	1010409	IdentifierDecl	* inst = ( sljit_uw * ) ptr [ 0 ]		1010396	0					
ANR	1010410	IdentifierDeclType	sljit_uw *		1010396	0					
ANR	1010411	Identifier	inst		1010396	1					
ANR	1010412	AssignmentExpression	* inst = ( sljit_uw * ) ptr [ 0 ]		1010396	2		=			
ANR	1010413	Identifier	inst		1010396	0					
ANR	1010414	CastExpression	( sljit_uw * ) ptr [ 0 ]		1010396	1					
ANR	1010415	CastTarget	sljit_uw *		1010396	0					
ANR	1010416	ArrayIndexing	ptr [ 0 ]		1010396	1					
ANR	1010417	Identifier	ptr		1010396	0					
ANR	1010418	PrimaryExpression	0		1010396	1					
ANR	1010419	IdentifierDeclStatement	sljit_uw mov_pc = ptr [ 1 ] ;	454:1:14427:14451	1010396	2	True				
ANR	1010420	IdentifierDecl	mov_pc = ptr [ 1 ]		1010396	0					
ANR	1010421	IdentifierDeclType	sljit_uw		1010396	0					
ANR	1010422	Identifier	mov_pc		1010396	1					
ANR	1010423	AssignmentExpression	mov_pc = ptr [ 1 ]		1010396	2		=			
ANR	1010424	Identifier	mov_pc		1010396	0					
ANR	1010425	ArrayIndexing	ptr [ 1 ]		1010396	1					
ANR	1010426	Identifier	ptr		1010396	0					
ANR	1010427	PrimaryExpression	1		1010396	1					
ANR	1010428	IdentifierDeclStatement	sljit_si bl = ( mov_pc & 0x0000f000 ) != RD ( TMP_PC ) ;	455:1:14454:14503	1010396	3	True				
ANR	1010429	IdentifierDecl	bl = ( mov_pc & 0x0000f000 ) != RD ( TMP_PC )		1010396	0					
ANR	1010430	IdentifierDeclType	sljit_si		1010396	0					
ANR	1010431	Identifier	bl		1010396	1					
ANR	1010432	AssignmentExpression	bl = ( mov_pc & 0x0000f000 ) != RD ( TMP_PC )		1010396	2		=			
ANR	1010433	Identifier	bl		1010396	0					
ANR	1010434	EqualityExpression	( mov_pc & 0x0000f000 ) != RD ( TMP_PC )		1010396	1		!=			
ANR	1010435	BitAndExpression	mov_pc & 0x0000f000		1010396	0		&			
ANR	1010436	Identifier	mov_pc		1010396	0					
ANR	1010437	PrimaryExpression	0x0000f000		1010396	1					
ANR	1010438	CallExpression	RD ( TMP_PC )		1010396	1					
ANR	1010439	Callee	RD		1010396	0					
ANR	1010440	Identifier	RD		1010396	0					
ANR	1010441	ArgumentList	TMP_PC		1010396	1					
ANR	1010442	Argument	TMP_PC		1010396	0					
ANR	1010443	Identifier	TMP_PC		1010396	0					
ANR	1010444	IdentifierDeclStatement	sljit_sw diff = ( sljit_sw ) ( ( ( sljit_sw ) new_addr - ( sljit_sw ) ( inst + 2 ) ) >> 2 ) ;	456:1:14506:14582	1010396	4	True				
ANR	1010445	IdentifierDecl	diff = ( sljit_sw ) ( ( ( sljit_sw ) new_addr - ( sljit_sw ) ( inst + 2 ) ) >> 2 )		1010396	0					
ANR	1010446	IdentifierDeclType	sljit_sw		1010396	0					
ANR	1010447	Identifier	diff		1010396	1					
ANR	1010448	AssignmentExpression	diff = ( sljit_sw ) ( ( ( sljit_sw ) new_addr - ( sljit_sw ) ( inst + 2 ) ) >> 2 )		1010396	2		=			
ANR	1010449	Identifier	diff		1010396	0					
ANR	1010450	CastExpression	( sljit_sw ) ( ( ( sljit_sw ) new_addr - ( sljit_sw ) ( inst + 2 ) ) >> 2 )		1010396	1					
ANR	1010451	CastTarget	sljit_sw		1010396	0					
ANR	1010452	ShiftExpression	( ( sljit_sw ) new_addr - ( sljit_sw ) ( inst + 2 ) ) >> 2		1010396	1		>>			
ANR	1010453	AdditiveExpression	( sljit_sw ) new_addr - ( sljit_sw ) ( inst + 2 )		1010396	0		-			
ANR	1010454	CastExpression	( sljit_sw ) new_addr		1010396	0					
ANR	1010455	CastTarget	sljit_sw		1010396	0					
ANR	1010456	Identifier	new_addr		1010396	1					
ANR	1010457	CastExpression	( sljit_sw ) ( inst + 2 )		1010396	1					
ANR	1010458	CastTarget	sljit_sw		1010396	0					
ANR	1010459	AdditiveExpression	inst + 2		1010396	1		+			
ANR	1010460	Identifier	inst		1010396	0					
ANR	1010461	PrimaryExpression	2		1010396	1					
ANR	1010462	PrimaryExpression	2		1010396	1					
ANR	1010463	IfStatement	if ( diff <= 0x7fffff && diff >= - 0x800000 )		1010396	5					
ANR	1010464	Condition	diff <= 0x7fffff && diff >= - 0x800000	458:5:14590:14626	1010396	0	True				
ANR	1010465	AndExpression	diff <= 0x7fffff && diff >= - 0x800000		1010396	0		&&			
ANR	1010466	RelationalExpression	diff <= 0x7fffff		1010396	0		<=			
ANR	1010467	Identifier	diff		1010396	0					
ANR	1010468	PrimaryExpression	0x7fffff		1010396	1					
ANR	1010469	RelationalExpression	diff >= - 0x800000		1010396	1		>=			
ANR	1010470	Identifier	diff		1010396	0					
ANR	1010471	UnaryOperationExpression	- 0x800000		1010396	1					
ANR	1010472	UnaryOperator	-		1010396	0					
ANR	1010473	PrimaryExpression	0x800000		1010396	1					
ANR	1010474	CompoundStatement		9:44:332:332	1010396	1					
ANR	1010475	IfStatement	if ( ! bl )		1010396	0					
ANR	1010476	Condition	! bl	460:6:14661:14663	1010396	0	True				
ANR	1010477	UnaryOperationExpression	! bl		1010396	0					
ANR	1010478	UnaryOperator	!		1010396	0					
ANR	1010479	Identifier	bl		1010396	1					
ANR	1010480	CompoundStatement		11:11:369:369	1010396	1					
ANR	1010481	ExpressionStatement	inst [ 0 ] = ( mov_pc & COND_MASK ) | ( B - CONDITIONAL ) | ( diff & 0xffffff )	461:3:14671:14741	1010396	0	True				
ANR	1010482	AssignmentExpression	inst [ 0 ] = ( mov_pc & COND_MASK ) | ( B - CONDITIONAL ) | ( diff & 0xffffff )		1010396	0		=			
ANR	1010483	ArrayIndexing	inst [ 0 ]		1010396	0					
ANR	1010484	Identifier	inst		1010396	0					
ANR	1010485	PrimaryExpression	0		1010396	1					
ANR	1010486	InclusiveOrExpression	( mov_pc & COND_MASK ) | ( B - CONDITIONAL ) | ( diff & 0xffffff )		1010396	1		|			
ANR	1010487	BitAndExpression	mov_pc & COND_MASK		1010396	0		&			
ANR	1010488	Identifier	mov_pc		1010396	0					
ANR	1010489	Identifier	COND_MASK		1010396	1					
ANR	1010490	InclusiveOrExpression	( B - CONDITIONAL ) | ( diff & 0xffffff )		1010396	1		|			
ANR	1010491	AdditiveExpression	B - CONDITIONAL		1010396	0		-			
ANR	1010492	Identifier	B		1010396	0					
ANR	1010493	Identifier	CONDITIONAL		1010396	1					
ANR	1010494	BitAndExpression	diff & 0xffffff		1010396	1		&			
ANR	1010495	Identifier	diff		1010396	0					
ANR	1010496	PrimaryExpression	0xffffff		1010396	1					
ANR	1010497	IfStatement	if ( flush )		1010396	1					
ANR	1010498	Condition	flush	462:7:14750:14754	1010396	0	True				
ANR	1010499	Identifier	flush		1010396	0					
ANR	1010500	CompoundStatement		13:14:460:460	1010396	1					
ANR	1010501	ExpressionStatement	"SLJIT_CACHE_FLUSH ( inst , inst + 1 )"	463:4:14763:14796	1010396	0	True				
ANR	1010502	CallExpression	"SLJIT_CACHE_FLUSH ( inst , inst + 1 )"		1010396	0					
ANR	1010503	Callee	SLJIT_CACHE_FLUSH		1010396	0					
ANR	1010504	Identifier	SLJIT_CACHE_FLUSH		1010396	0					
ANR	1010505	ArgumentList	inst		1010396	1					
ANR	1010506	Argument	inst		1010396	0					
ANR	1010507	Identifier	inst		1010396	0					
ANR	1010508	Argument	inst + 1		1010396	1					
ANR	1010509	AdditiveExpression	inst + 1		1010396	0		+			
ANR	1010510	Identifier	inst		1010396	0					
ANR	1010511	PrimaryExpression	1		1010396	1					
ANR	1010512	ElseStatement	else		1010396	0					
ANR	1010513	CompoundStatement		16:9:515:515	1010396	0					
ANR	1010514	ExpressionStatement	inst [ 0 ] = ( mov_pc & COND_MASK ) | ( BL - CONDITIONAL ) | ( diff & 0xffffff )	466:3:14817:14888	1010396	0	True				
ANR	1010515	AssignmentExpression	inst [ 0 ] = ( mov_pc & COND_MASK ) | ( BL - CONDITIONAL ) | ( diff & 0xffffff )		1010396	0		=			
ANR	1010516	ArrayIndexing	inst [ 0 ]		1010396	0					
ANR	1010517	Identifier	inst		1010396	0					
ANR	1010518	PrimaryExpression	0		1010396	1					
ANR	1010519	InclusiveOrExpression	( mov_pc & COND_MASK ) | ( BL - CONDITIONAL ) | ( diff & 0xffffff )		1010396	1		|			
ANR	1010520	BitAndExpression	mov_pc & COND_MASK		1010396	0		&			
ANR	1010521	Identifier	mov_pc		1010396	0					
ANR	1010522	Identifier	COND_MASK		1010396	1					
ANR	1010523	InclusiveOrExpression	( BL - CONDITIONAL ) | ( diff & 0xffffff )		1010396	1		|			
ANR	1010524	AdditiveExpression	BL - CONDITIONAL		1010396	0		-			
ANR	1010525	Identifier	BL		1010396	0					
ANR	1010526	Identifier	CONDITIONAL		1010396	1					
ANR	1010527	BitAndExpression	diff & 0xffffff		1010396	1		&			
ANR	1010528	Identifier	diff		1010396	0					
ANR	1010529	PrimaryExpression	0xffffff		1010396	1					
ANR	1010530	ExpressionStatement	inst [ 1 ] = NOP	467:3:14893:14906	1010396	1	True				
ANR	1010531	AssignmentExpression	inst [ 1 ] = NOP		1010396	0		=			
ANR	1010532	ArrayIndexing	inst [ 1 ]		1010396	0					
ANR	1010533	Identifier	inst		1010396	0					
ANR	1010534	PrimaryExpression	1		1010396	1					
ANR	1010535	Identifier	NOP		1010396	1					
ANR	1010536	IfStatement	if ( flush )		1010396	2					
ANR	1010537	Condition	flush	468:7:14915:14919	1010396	0	True				
ANR	1010538	Identifier	flush		1010396	0					
ANR	1010539	CompoundStatement		19:14:625:625	1010396	1					
ANR	1010540	ExpressionStatement	"SLJIT_CACHE_FLUSH ( inst , inst + 2 )"	469:4:14928:14961	1010396	0	True				
ANR	1010541	CallExpression	"SLJIT_CACHE_FLUSH ( inst , inst + 2 )"		1010396	0					
ANR	1010542	Callee	SLJIT_CACHE_FLUSH		1010396	0					
ANR	1010543	Identifier	SLJIT_CACHE_FLUSH		1010396	0					
ANR	1010544	ArgumentList	inst		1010396	1					
ANR	1010545	Argument	inst		1010396	0					
ANR	1010546	Identifier	inst		1010396	0					
ANR	1010547	Argument	inst + 2		1010396	1					
ANR	1010548	AdditiveExpression	inst + 2		1010396	0		+			
ANR	1010549	Identifier	inst		1010396	0					
ANR	1010550	PrimaryExpression	2		1010396	1					
ANR	1010551	ElseStatement	else		1010396	0					
ANR	1010552	CompoundStatement		23:8:683:683	1010396	0					
ANR	1010553	IfStatement	if ( mov_pc & ( 1 << 23 ) )		1010396	0					
ANR	1010554	Condition	mov_pc & ( 1 << 23 )	474:6:15030:15047	1010396	0	True				
ANR	1010555	BitAndExpression	mov_pc & ( 1 << 23 )		1010396	0		&			
ANR	1010556	Identifier	mov_pc		1010396	0					
ANR	1010557	ShiftExpression	1 << 23		1010396	1		<<			
ANR	1010558	PrimaryExpression	1		1010396	0					
ANR	1010559	PrimaryExpression	23		1010396	1					
ANR	1010560	ExpressionStatement	ptr = inst + ( ( mov_pc & 0xfff ) >> 2 ) + 2	475:3:15053:15093	1010396	1	True				
ANR	1010561	AssignmentExpression	ptr = inst + ( ( mov_pc & 0xfff ) >> 2 ) + 2		1010396	0		=			
ANR	1010562	Identifier	ptr		1010396	0					
ANR	1010563	AdditiveExpression	inst + ( ( mov_pc & 0xfff ) >> 2 ) + 2		1010396	1		+			
ANR	1010564	Identifier	inst		1010396	0					
ANR	1010565	AdditiveExpression	( ( mov_pc & 0xfff ) >> 2 ) + 2		1010396	1		+			
ANR	1010566	ShiftExpression	( mov_pc & 0xfff ) >> 2		1010396	0		>>			
ANR	1010567	BitAndExpression	mov_pc & 0xfff		1010396	0		&			
ANR	1010568	Identifier	mov_pc		1010396	0					
ANR	1010569	PrimaryExpression	0xfff		1010396	1					
ANR	1010570	PrimaryExpression	2		1010396	1					
ANR	1010571	PrimaryExpression	2		1010396	1					
ANR	1010572	ElseStatement	else		1010396	0					
ANR	1010573	ExpressionStatement	ptr = inst + 1	477:3:15105:15119	1010396	0	True				
ANR	1010574	AssignmentExpression	ptr = inst + 1		1010396	0		=			
ANR	1010575	Identifier	ptr		1010396	0					
ANR	1010576	AdditiveExpression	inst + 1		1010396	1		+			
ANR	1010577	Identifier	inst		1010396	0					
ANR	1010578	PrimaryExpression	1		1010396	1					
ANR	1010579	IfStatement	if ( * inst != mov_pc )		1010396	1					
ANR	1010580	Condition	* inst != mov_pc	479:6:15128:15142	1010396	0	True				
ANR	1010581	EqualityExpression	* inst != mov_pc		1010396	0		!=			
ANR	1010582	UnaryOperationExpression	* inst		1010396	0					
ANR	1010583	UnaryOperator	*		1010396	0					
ANR	1010584	Identifier	inst		1010396	1					
ANR	1010585	Identifier	mov_pc		1010396	1					
ANR	1010586	CompoundStatement		30:23:848:848	1010396	1					
ANR	1010587	ExpressionStatement	inst [ 0 ] = mov_pc	480:3:15150:15166	1010396	0	True				
ANR	1010588	AssignmentExpression	inst [ 0 ] = mov_pc		1010396	0		=			
ANR	1010589	ArrayIndexing	inst [ 0 ]		1010396	0					
ANR	1010590	Identifier	inst		1010396	0					
ANR	1010591	PrimaryExpression	0		1010396	1					
ANR	1010592	Identifier	mov_pc		1010396	1					
ANR	1010593	IfStatement	if ( ! bl )		1010396	1					
ANR	1010594	Condition	! bl	481:7:15175:15177	1010396	0	True				
ANR	1010595	UnaryOperationExpression	! bl		1010396	0					
ANR	1010596	UnaryOperator	!		1010396	0					
ANR	1010597	Identifier	bl		1010396	1					
ANR	1010598	CompoundStatement		32:12:883:883	1010396	1					
ANR	1010599	IfStatement	if ( flush )		1010396	0					
ANR	1010600	Condition	flush	482:8:15190:15194	1010396	0	True				
ANR	1010601	Identifier	flush		1010396	0					
ANR	1010602	CompoundStatement		33:15:900:900	1010396	1					
ANR	1010603	ExpressionStatement	"SLJIT_CACHE_FLUSH ( inst , inst + 1 )"	483:5:15204:15237	1010396	0	True				
ANR	1010604	CallExpression	"SLJIT_CACHE_FLUSH ( inst , inst + 1 )"		1010396	0					
ANR	1010605	Callee	SLJIT_CACHE_FLUSH		1010396	0					
ANR	1010606	Identifier	SLJIT_CACHE_FLUSH		1010396	0					
ANR	1010607	ArgumentList	inst		1010396	1					
ANR	1010608	Argument	inst		1010396	0					
ANR	1010609	Identifier	inst		1010396	0					
ANR	1010610	Argument	inst + 1		1010396	1					
ANR	1010611	AdditiveExpression	inst + 1		1010396	0		+			
ANR	1010612	Identifier	inst		1010396	0					
ANR	1010613	PrimaryExpression	1		1010396	1					
ANR	1010614	ElseStatement	else		1010396	0					
ANR	1010615	CompoundStatement		36:10:958:958	1010396	0					
ANR	1010616	ExpressionStatement	inst [ 1 ] = BLX | RM ( TMP_REG1 )	486:4:15261:15289	1010396	0	True				
ANR	1010617	AssignmentExpression	inst [ 1 ] = BLX | RM ( TMP_REG1 )		1010396	0		=			
ANR	1010618	ArrayIndexing	inst [ 1 ]		1010396	0					
ANR	1010619	Identifier	inst		1010396	0					
ANR	1010620	PrimaryExpression	1		1010396	1					
ANR	1010621	InclusiveOrExpression	BLX | RM ( TMP_REG1 )		1010396	1		|			
ANR	1010622	Identifier	BLX		1010396	0					
ANR	1010623	CallExpression	RM ( TMP_REG1 )		1010396	1					
ANR	1010624	Callee	RM		1010396	0					
ANR	1010625	Identifier	RM		1010396	0					
ANR	1010626	ArgumentList	TMP_REG1		1010396	1					
ANR	1010627	Argument	TMP_REG1		1010396	0					
ANR	1010628	Identifier	TMP_REG1		1010396	0					
ANR	1010629	IfStatement	if ( flush )		1010396	1					
ANR	1010630	Condition	flush	487:8:15299:15303	1010396	0	True				
ANR	1010631	Identifier	flush		1010396	0					
ANR	1010632	CompoundStatement		38:15:1009:1009	1010396	1					
ANR	1010633	ExpressionStatement	"SLJIT_CACHE_FLUSH ( inst , inst + 2 )"	488:5:15313:15346	1010396	0	True				
ANR	1010634	CallExpression	"SLJIT_CACHE_FLUSH ( inst , inst + 2 )"		1010396	0					
ANR	1010635	Callee	SLJIT_CACHE_FLUSH		1010396	0					
ANR	1010636	Identifier	SLJIT_CACHE_FLUSH		1010396	0					
ANR	1010637	ArgumentList	inst		1010396	1					
ANR	1010638	Argument	inst		1010396	0					
ANR	1010639	Identifier	inst		1010396	0					
ANR	1010640	Argument	inst + 2		1010396	1					
ANR	1010641	AdditiveExpression	inst + 2		1010396	0		+			
ANR	1010642	Identifier	inst		1010396	0					
ANR	1010643	PrimaryExpression	2		1010396	1					
ANR	1010644	ExpressionStatement	* ptr = new_addr	492:2:15365:15380	1010396	2	True				
ANR	1010645	AssignmentExpression	* ptr = new_addr		1010396	0		=			
ANR	1010646	UnaryOperationExpression	* ptr		1010396	0					
ANR	1010647	UnaryOperator	*		1010396	0					
ANR	1010648	Identifier	ptr		1010396	1					
ANR	1010649	Identifier	new_addr		1010396	1					
ANR	1010650	ReturnType	static SLJIT_INLINE void		1010396	1					
ANR	1010651	Identifier	inline_set_jump_addr		1010396	2					
ANR	1010652	ParameterList	"sljit_uw addr , sljit_uw new_addr , sljit_si flush"		1010396	3					
ANR	1010653	Parameter	sljit_uw addr	449:46:14246:14258	1010396	0	True				
ANR	1010654	ParameterType	sljit_uw		1010396	0					
ANR	1010655	Identifier	addr		1010396	1					
ANR	1010656	Parameter	sljit_uw new_addr	449:61:14261:14277	1010396	1	True				
ANR	1010657	ParameterType	sljit_uw		1010396	0					
ANR	1010658	Identifier	new_addr		1010396	1					
ANR	1010659	Parameter	sljit_si flush	449:80:14280:14293	1010396	2	True				
ANR	1010660	ParameterType	sljit_si		1010396	0					
ANR	1010661	Identifier	flush		1010396	1					
ANR	1010662	CFGEntryNode	ENTRY		1010396		True				
ANR	1010663	CFGExitNode	EXIT		1010396		True				
ANR	1010664	Symbol	TMP_PC		1010396						
ANR	1010665	Symbol	B		1010396						
ANR	1010666	Symbol	TMP_REG1		1010396						
ANR	1010667	Symbol	* inst		1010396						
ANR	1010668	Symbol	bl		1010396						
ANR	1010669	Symbol	diff		1010396						
ANR	1010670	Symbol	BL		1010396						
ANR	1010671	Symbol	mov_pc		1010396						
ANR	1010672	Symbol	NOP		1010396						
ANR	1010673	Symbol	ptr		1010396						
ANR	1010674	Symbol	BLX		1010396						
ANR	1010675	Symbol	CONDITIONAL		1010396						
ANR	1010676	Symbol	RD		1010396						
ANR	1010677	Symbol	flush		1010396						
ANR	1010678	Symbol	inst		1010396						
ANR	1010679	Symbol	* ptr		1010396						
ANR	1010680	Symbol	RM		1010396						
ANR	1010681	Symbol	addr		1010396						
ANR	1010682	Symbol	COND_MASK		1010396						
ANR	1010683	Symbol	new_addr		1010396						
ANR	1010684	DeclStmt									
ANR	1010685	Decl							sljit_uw	sljit_uw ( sljit_uw imm )	get_imm
ANR	1010686	Function	inline_set_const	507:0:15798:17036							
ANR	1010687	FunctionDef	"inline_set_const (sljit_uw addr , sljit_sw new_constant , sljit_si flush)"		1010686	0					
ANR	1010688	CompoundStatement		508:0:15894:17036	1010686	0					
ANR	1010689	IdentifierDeclStatement	sljit_uw * ptr = ( sljit_uw * ) addr ;	510:1:15954:15985	1010686	0	True				
ANR	1010690	IdentifierDecl	* ptr = ( sljit_uw * ) addr		1010686	0					
ANR	1010691	IdentifierDeclType	sljit_uw *		1010686	0					
ANR	1010692	Identifier	ptr		1010686	1					
ANR	1010693	AssignmentExpression	* ptr = ( sljit_uw * ) addr		1010686	2		=			
ANR	1010694	Identifier	ptr		1010686	0					
ANR	1010695	CastExpression	( sljit_uw * ) addr		1010686	1					
ANR	1010696	CastTarget	sljit_uw *		1010686	0					
ANR	1010697	Identifier	addr		1010686	1					
ANR	1010698	IdentifierDeclStatement	sljit_uw * inst = ( sljit_uw * ) ptr [ 0 ] ;	511:1:15988:16022	1010686	1	True				
ANR	1010699	IdentifierDecl	* inst = ( sljit_uw * ) ptr [ 0 ]		1010686	0					
ANR	1010700	IdentifierDeclType	sljit_uw *		1010686	0					
ANR	1010701	Identifier	inst		1010686	1					
ANR	1010702	AssignmentExpression	* inst = ( sljit_uw * ) ptr [ 0 ]		1010686	2		=			
ANR	1010703	Identifier	inst		1010686	0					
ANR	1010704	CastExpression	( sljit_uw * ) ptr [ 0 ]		1010686	1					
ANR	1010705	CastTarget	sljit_uw *		1010686	0					
ANR	1010706	ArrayIndexing	ptr [ 0 ]		1010686	1					
ANR	1010707	Identifier	ptr		1010686	0					
ANR	1010708	PrimaryExpression	0		1010686	1					
ANR	1010709	IdentifierDeclStatement	sljit_uw ldr_literal = ptr [ 1 ] ;	512:1:16025:16054	1010686	2	True				
ANR	1010710	IdentifierDecl	ldr_literal = ptr [ 1 ]		1010686	0					
ANR	1010711	IdentifierDeclType	sljit_uw		1010686	0					
ANR	1010712	Identifier	ldr_literal		1010686	1					
ANR	1010713	AssignmentExpression	ldr_literal = ptr [ 1 ]		1010686	2		=			
ANR	1010714	Identifier	ldr_literal		1010686	0					
ANR	1010715	ArrayIndexing	ptr [ 1 ]		1010686	1					
ANR	1010716	Identifier	ptr		1010686	0					
ANR	1010717	PrimaryExpression	1		1010686	1					
ANR	1010718	IdentifierDeclStatement	sljit_uw src2 ;	513:1:16057:16070	1010686	3	True				
ANR	1010719	IdentifierDecl	src2		1010686	0					
ANR	1010720	IdentifierDeclType	sljit_uw		1010686	0					
ANR	1010721	Identifier	src2		1010686	1					
ANR	1010722	ExpressionStatement	src2 = get_imm ( new_constant )	515:1:16074:16102	1010686	4	True				
ANR	1010723	AssignmentExpression	src2 = get_imm ( new_constant )		1010686	0		=			
ANR	1010724	Identifier	src2		1010686	0					
ANR	1010725	CallExpression	get_imm ( new_constant )		1010686	1					
ANR	1010726	Callee	get_imm		1010686	0					
ANR	1010727	Identifier	get_imm		1010686	0					
ANR	1010728	ArgumentList	new_constant		1010686	1					
ANR	1010729	Argument	new_constant		1010686	0					
ANR	1010730	Identifier	new_constant		1010686	0					
ANR	1010731	IfStatement	if ( src2 )		1010686	5					
ANR	1010732	Condition	src2	516:5:16109:16112	1010686	0	True				
ANR	1010733	Identifier	src2		1010686	0					
ANR	1010734	CompoundStatement		9:11:220:220	1010686	1					
ANR	1010735	ExpressionStatement	* inst = 0xe3a00000 | ( ldr_literal & 0xf000 ) | src2	517:2:16119:16169	1010686	0	True				
ANR	1010736	AssignmentExpression	* inst = 0xe3a00000 | ( ldr_literal & 0xf000 ) | src2		1010686	0		=			
ANR	1010737	UnaryOperationExpression	* inst		1010686	0					
ANR	1010738	UnaryOperator	*		1010686	0					
ANR	1010739	Identifier	inst		1010686	1					
ANR	1010740	InclusiveOrExpression	0xe3a00000 | ( ldr_literal & 0xf000 ) | src2		1010686	1		|			
ANR	1010741	PrimaryExpression	0xe3a00000		1010686	0					
ANR	1010742	InclusiveOrExpression	( ldr_literal & 0xf000 ) | src2		1010686	1		|			
ANR	1010743	BitAndExpression	ldr_literal & 0xf000		1010686	0		&			
ANR	1010744	Identifier	ldr_literal		1010686	0					
ANR	1010745	PrimaryExpression	0xf000		1010686	1					
ANR	1010746	Identifier	src2		1010686	1					
ANR	1010747	IfStatement	if ( flush )		1010686	1					
ANR	1010748	Condition	flush	518:6:16177:16181	1010686	0	True				
ANR	1010749	Identifier	flush		1010686	0					
ANR	1010750	CompoundStatement		11:13:289:289	1010686	1					
ANR	1010751	ExpressionStatement	"SLJIT_CACHE_FLUSH ( inst , inst + 1 )"	519:3:16189:16222	1010686	0	True				
ANR	1010752	CallExpression	"SLJIT_CACHE_FLUSH ( inst , inst + 1 )"		1010686	0					
ANR	1010753	Callee	SLJIT_CACHE_FLUSH		1010686	0					
ANR	1010754	Identifier	SLJIT_CACHE_FLUSH		1010686	0					
ANR	1010755	ArgumentList	inst		1010686	1					
ANR	1010756	Argument	inst		1010686	0					
ANR	1010757	Identifier	inst		1010686	0					
ANR	1010758	Argument	inst + 1		1010686	1					
ANR	1010759	AdditiveExpression	inst + 1		1010686	0		+			
ANR	1010760	Identifier	inst		1010686	0					
ANR	1010761	PrimaryExpression	1		1010686	1					
ANR	1010762	ReturnStatement	return ;	521:2:16230:16236	1010686	2	True				
ANR	1010763	ExpressionStatement	src2 = get_imm ( ~new_constant )	524:1:16243:16272	1010686	6	True				
ANR	1010764	AssignmentExpression	src2 = get_imm ( ~new_constant )		1010686	0		=			
ANR	1010765	Identifier	src2		1010686	0					
ANR	1010766	CallExpression	get_imm ( ~new_constant )		1010686	1					
ANR	1010767	Callee	get_imm		1010686	0					
ANR	1010768	Identifier	get_imm		1010686	0					
ANR	1010769	ArgumentList	~new_constant		1010686	1					
ANR	1010770	Argument	~new_constant		1010686	0					
ANR	1010771	Identifier	~new_constant		1010686	0					
ANR	1010772	IfStatement	if ( src2 )		1010686	7					
ANR	1010773	Condition	src2	525:5:16279:16282	1010686	0	True				
ANR	1010774	Identifier	src2		1010686	0					
ANR	1010775	CompoundStatement		18:11:390:390	1010686	1					
ANR	1010776	ExpressionStatement	* inst = 0xe3e00000 | ( ldr_literal & 0xf000 ) | src2	526:2:16289:16339	1010686	0	True				
ANR	1010777	AssignmentExpression	* inst = 0xe3e00000 | ( ldr_literal & 0xf000 ) | src2		1010686	0		=			
ANR	1010778	UnaryOperationExpression	* inst		1010686	0					
ANR	1010779	UnaryOperator	*		1010686	0					
ANR	1010780	Identifier	inst		1010686	1					
ANR	1010781	InclusiveOrExpression	0xe3e00000 | ( ldr_literal & 0xf000 ) | src2		1010686	1		|			
ANR	1010782	PrimaryExpression	0xe3e00000		1010686	0					
ANR	1010783	InclusiveOrExpression	( ldr_literal & 0xf000 ) | src2		1010686	1		|			
ANR	1010784	BitAndExpression	ldr_literal & 0xf000		1010686	0		&			
ANR	1010785	Identifier	ldr_literal		1010686	0					
ANR	1010786	PrimaryExpression	0xf000		1010686	1					
ANR	1010787	Identifier	src2		1010686	1					
ANR	1010788	IfStatement	if ( flush )		1010686	1					
ANR	1010789	Condition	flush	527:6:16347:16351	1010686	0	True				
ANR	1010790	Identifier	flush		1010686	0					
ANR	1010791	CompoundStatement		20:13:459:459	1010686	1					
ANR	1010792	ExpressionStatement	"SLJIT_CACHE_FLUSH ( inst , inst + 1 )"	528:3:16359:16392	1010686	0	True				
ANR	1010793	CallExpression	"SLJIT_CACHE_FLUSH ( inst , inst + 1 )"		1010686	0					
ANR	1010794	Callee	SLJIT_CACHE_FLUSH		1010686	0					
ANR	1010795	Identifier	SLJIT_CACHE_FLUSH		1010686	0					
ANR	1010796	ArgumentList	inst		1010686	1					
ANR	1010797	Argument	inst		1010686	0					
ANR	1010798	Identifier	inst		1010686	0					
ANR	1010799	Argument	inst + 1		1010686	1					
ANR	1010800	AdditiveExpression	inst + 1		1010686	0		+			
ANR	1010801	Identifier	inst		1010686	0					
ANR	1010802	PrimaryExpression	1		1010686	1					
ANR	1010803	ReturnStatement	return ;	530:2:16400:16406	1010686	2	True				
ANR	1010804	IfStatement	if ( ldr_literal & ( 1 << 23 ) )		1010686	8					
ANR	1010805	Condition	ldr_literal & ( 1 << 23 )	533:5:16417:16439	1010686	0	True				
ANR	1010806	BitAndExpression	ldr_literal & ( 1 << 23 )		1010686	0		&			
ANR	1010807	Identifier	ldr_literal		1010686	0					
ANR	1010808	ShiftExpression	1 << 23		1010686	1		<<			
ANR	1010809	PrimaryExpression	1		1010686	0					
ANR	1010810	PrimaryExpression	23		1010686	1					
ANR	1010811	ExpressionStatement	ptr = inst + ( ( ldr_literal & 0xfff ) >> 2 ) + 2	534:2:16444:16489	1010686	1	True				
ANR	1010812	AssignmentExpression	ptr = inst + ( ( ldr_literal & 0xfff ) >> 2 ) + 2		1010686	0		=			
ANR	1010813	Identifier	ptr		1010686	0					
ANR	1010814	AdditiveExpression	inst + ( ( ldr_literal & 0xfff ) >> 2 ) + 2		1010686	1		+			
ANR	1010815	Identifier	inst		1010686	0					
ANR	1010816	AdditiveExpression	( ( ldr_literal & 0xfff ) >> 2 ) + 2		1010686	1		+			
ANR	1010817	ShiftExpression	( ldr_literal & 0xfff ) >> 2		1010686	0		>>			
ANR	1010818	BitAndExpression	ldr_literal & 0xfff		1010686	0		&			
ANR	1010819	Identifier	ldr_literal		1010686	0					
ANR	1010820	PrimaryExpression	0xfff		1010686	1					
ANR	1010821	PrimaryExpression	2		1010686	1					
ANR	1010822	PrimaryExpression	2		1010686	1					
ANR	1010823	ElseStatement	else		1010686	0					
ANR	1010824	ExpressionStatement	ptr = inst + 1	536:2:16499:16513	1010686	0	True				
ANR	1010825	AssignmentExpression	ptr = inst + 1		1010686	0		=			
ANR	1010826	Identifier	ptr		1010686	0					
ANR	1010827	AdditiveExpression	inst + 1		1010686	1		+			
ANR	1010828	Identifier	inst		1010686	0					
ANR	1010829	PrimaryExpression	1		1010686	1					
ANR	1010830	IfStatement	if ( * inst != ldr_literal )		1010686	9					
ANR	1010831	Condition	* inst != ldr_literal	538:5:16521:16540	1010686	0	True				
ANR	1010832	EqualityExpression	* inst != ldr_literal		1010686	0		!=			
ANR	1010833	UnaryOperationExpression	* inst		1010686	0					
ANR	1010834	UnaryOperator	*		1010686	0					
ANR	1010835	Identifier	inst		1010686	1					
ANR	1010836	Identifier	ldr_literal		1010686	1					
ANR	1010837	CompoundStatement		31:27:648:648	1010686	1					
ANR	1010838	ExpressionStatement	* inst = ldr_literal	539:2:16547:16566	1010686	0	True				
ANR	1010839	AssignmentExpression	* inst = ldr_literal		1010686	0		=			
ANR	1010840	UnaryOperationExpression	* inst		1010686	0					
ANR	1010841	UnaryOperator	*		1010686	0					
ANR	1010842	Identifier	inst		1010686	1					
ANR	1010843	Identifier	ldr_literal		1010686	1					
ANR	1010844	IfStatement	if ( flush )		1010686	1					
ANR	1010845	Condition	flush	540:6:16574:16578	1010686	0	True				
ANR	1010846	Identifier	flush		1010686	0					
ANR	1010847	CompoundStatement		33:13:686:686	1010686	1					
ANR	1010848	ExpressionStatement	"SLJIT_CACHE_FLUSH ( inst , inst + 1 )"	541:3:16586:16619	1010686	0	True				
ANR	1010849	CallExpression	"SLJIT_CACHE_FLUSH ( inst , inst + 1 )"		1010686	0					
ANR	1010850	Callee	SLJIT_CACHE_FLUSH		1010686	0					
ANR	1010851	Identifier	SLJIT_CACHE_FLUSH		1010686	0					
ANR	1010852	ArgumentList	inst		1010686	1					
ANR	1010853	Argument	inst		1010686	0					
ANR	1010854	Identifier	inst		1010686	0					
ANR	1010855	Argument	inst + 1		1010686	1					
ANR	1010856	AdditiveExpression	inst + 1		1010686	0		+			
ANR	1010857	Identifier	inst		1010686	0					
ANR	1010858	PrimaryExpression	1		1010686	1					
ANR	1010859	ExpressionStatement	* ptr = new_constant	544:1:16629:16648	1010686	10	True				
ANR	1010860	AssignmentExpression	* ptr = new_constant		1010686	0		=			
ANR	1010861	UnaryOperationExpression	* ptr		1010686	0					
ANR	1010862	UnaryOperator	*		1010686	0					
ANR	1010863	Identifier	ptr		1010686	1					
ANR	1010864	Identifier	new_constant		1010686	1					
ANR	1010865	ReturnType	static SLJIT_INLINE void		1010686	1					
ANR	1010866	Identifier	inline_set_const		1010686	2					
ANR	1010867	ParameterList	"sljit_uw addr , sljit_sw new_constant , sljit_si flush"		1010686	3					
ANR	1010868	Parameter	sljit_uw addr	507:42:15840:15852	1010686	0	True				
ANR	1010869	ParameterType	sljit_uw		1010686	0					
ANR	1010870	Identifier	addr		1010686	1					
ANR	1010871	Parameter	sljit_sw new_constant	507:57:15855:15875	1010686	1	True				
ANR	1010872	ParameterType	sljit_sw		1010686	0					
ANR	1010873	Identifier	new_constant		1010686	1					
ANR	1010874	Parameter	sljit_si flush	507:80:15878:15891	1010686	2	True				
ANR	1010875	ParameterType	sljit_si		1010686	0					
ANR	1010876	Identifier	flush		1010686	1					
ANR	1010877	CFGEntryNode	ENTRY		1010686		True				
ANR	1010878	CFGExitNode	EXIT		1010686		True				
ANR	1010879	Symbol	new_constant		1010686						
ANR	1010880	Symbol	* inst		1010686						
ANR	1010881	Symbol	flush		1010686						
ANR	1010882	Symbol	inst		1010686						
ANR	1010883	Symbol	* ptr		1010686						
ANR	1010884	Symbol	get_imm		1010686						
ANR	1010885	Symbol	src2		1010686						
ANR	1010886	Symbol	addr		1010686						
ANR	1010887	Symbol	~new_constant		1010686						
ANR	1010888	Symbol	ldr_literal		1010686						
ANR	1010889	Symbol	ptr		1010686						
ANR	1010890	Function	sljit_generate_code	556:0:17039:24541							
ANR	1010891	FunctionDef	sljit_generate_code (struct sljit_compiler * compiler)		1010890	0					
ANR	1010892	CompoundStatement		557:0:17123:24541	1010890	0					
ANR	1010893	IdentifierDeclStatement	struct sljit_memory_fragment * buf ;	558:1:17126:17159	1010890	0	True				
ANR	1010894	IdentifierDecl	* buf		1010890	0					
ANR	1010895	IdentifierDeclType	struct sljit_memory_fragment *		1010890	0					
ANR	1010896	Identifier	buf		1010890	1					
ANR	1010897	IdentifierDeclStatement	sljit_uw * code ;	559:1:17162:17176	1010890	1	True				
ANR	1010898	IdentifierDecl	* code		1010890	0					
ANR	1010899	IdentifierDeclType	sljit_uw *		1010890	0					
ANR	1010900	Identifier	code		1010890	1					
ANR	1010901	IdentifierDeclStatement	sljit_uw * code_ptr ;	560:1:17179:17197	1010890	2	True				
ANR	1010902	IdentifierDecl	* code_ptr		1010890	0					
ANR	1010903	IdentifierDeclType	sljit_uw *		1010890	0					
ANR	1010904	Identifier	code_ptr		1010890	1					
ANR	1010905	IdentifierDeclStatement	sljit_uw * buf_ptr ;	561:1:17200:17217	1010890	3	True				
ANR	1010906	IdentifierDecl	* buf_ptr		1010890	0					
ANR	1010907	IdentifierDeclType	sljit_uw *		1010890	0					
ANR	1010908	Identifier	buf_ptr		1010890	1					
ANR	1010909	IdentifierDeclStatement	sljit_uw * buf_end ;	562:1:17220:17237	1010890	4	True				
ANR	1010910	IdentifierDecl	* buf_end		1010890	0					
ANR	1010911	IdentifierDeclType	sljit_uw *		1010890	0					
ANR	1010912	Identifier	buf_end		1010890	1					
ANR	1010913	IdentifierDeclStatement	sljit_uw size ;	563:1:17240:17253	1010890	5	True				
ANR	1010914	IdentifierDecl	size		1010890	0					
ANR	1010915	IdentifierDeclType	sljit_uw		1010890	0					
ANR	1010916	Identifier	size		1010890	1					
ANR	1010917	IdentifierDeclStatement	sljit_uw word_count ;	564:1:17256:17275	1010890	6	True				
ANR	1010918	IdentifierDecl	word_count		1010890	0					
ANR	1010919	IdentifierDeclType	sljit_uw		1010890	0					
ANR	1010920	Identifier	word_count		1010890	1					
ANR	1010921	IdentifierDeclStatement	sljit_uw cpool_size ;	566:1:17335:17354	1010890	7	True				
ANR	1010922	IdentifierDecl	cpool_size		1010890	0					
ANR	1010923	IdentifierDeclType	sljit_uw		1010890	0					
ANR	1010924	Identifier	cpool_size		1010890	1					
ANR	1010925	IdentifierDeclStatement	sljit_uw cpool_skip_alignment ;	567:1:17357:17386	1010890	8	True				
ANR	1010926	IdentifierDecl	cpool_skip_alignment		1010890	0					
ANR	1010927	IdentifierDeclType	sljit_uw		1010890	0					
ANR	1010928	Identifier	cpool_skip_alignment		1010890	1					
ANR	1010929	IdentifierDeclStatement	sljit_uw cpool_current_index ;	568:1:17389:17417	1010890	9	True				
ANR	1010930	IdentifierDecl	cpool_current_index		1010890	0					
ANR	1010931	IdentifierDeclType	sljit_uw		1010890	0					
ANR	1010932	Identifier	cpool_current_index		1010890	1					
ANR	1010933	IdentifierDeclStatement	sljit_uw * cpool_start_address ;	569:1:17420:17449	1010890	10	True				
ANR	1010934	IdentifierDecl	* cpool_start_address		1010890	0					
ANR	1010935	IdentifierDeclType	sljit_uw *		1010890	0					
ANR	1010936	Identifier	cpool_start_address		1010890	1					
ANR	1010937	IdentifierDeclStatement	sljit_uw * last_pc_patch ;	570:1:17452:17475	1010890	11	True				
ANR	1010938	IdentifierDecl	* last_pc_patch		1010890	0					
ANR	1010939	IdentifierDeclType	sljit_uw *		1010890	0					
ANR	1010940	Identifier	last_pc_patch		1010890	1					
ANR	1010941	IdentifierDeclStatement	struct future_patch * first_patch ;	571:1:17478:17510	1010890	12	True				
ANR	1010942	IdentifierDecl	* first_patch		1010890	0					
ANR	1010943	IdentifierDeclType	struct future_patch *		1010890	0					
ANR	1010944	Identifier	first_patch		1010890	1					
ANR	1010945	IdentifierDeclStatement	struct sljit_label * label ;	574:1:17521:17546	1010890	13	True				
ANR	1010946	IdentifierDecl	* label		1010890	0					
ANR	1010947	IdentifierDeclType	struct sljit_label *		1010890	0					
ANR	1010948	Identifier	label		1010890	1					
ANR	1010949	IdentifierDeclStatement	struct sljit_jump * jump ;	575:1:17549:17572	1010890	14	True				
ANR	1010950	IdentifierDecl	* jump		1010890	0					
ANR	1010951	IdentifierDeclType	struct sljit_jump *		1010890	0					
ANR	1010952	Identifier	jump		1010890	1					
ANR	1010953	IdentifierDeclStatement	struct sljit_const * const_ ;	576:1:17575:17601	1010890	15	True				
ANR	1010954	IdentifierDecl	* const_		1010890	0					
ANR	1010955	IdentifierDeclType	struct sljit_const *		1010890	0					
ANR	1010956	Identifier	const_		1010890	1					
ANR	1010957	ExpressionStatement	CHECK_ERROR_PTR ( )	578:1:17605:17622	1010890	16	True				
ANR	1010958	CallExpression	CHECK_ERROR_PTR ( )		1010890	0					
ANR	1010959	Callee	CHECK_ERROR_PTR		1010890	0					
ANR	1010960	Identifier	CHECK_ERROR_PTR		1010890	0					
ANR	1010961	ArgumentList			1010890	1					
ANR	1010962	ExpressionStatement	CHECK_PTR ( check_sljit_generate_code ( compiler ) )	579:1:17625:17671	1010890	17	True				
ANR	1010963	CallExpression	CHECK_PTR ( check_sljit_generate_code ( compiler ) )		1010890	0					
ANR	1010964	Callee	CHECK_PTR		1010890	0					
ANR	1010965	Identifier	CHECK_PTR		1010890	0					
ANR	1010966	ArgumentList	check_sljit_generate_code ( compiler )		1010890	1					
ANR	1010967	Argument	check_sljit_generate_code ( compiler )		1010890	0					
ANR	1010968	CallExpression	check_sljit_generate_code ( compiler )		1010890	0					
ANR	1010969	Callee	check_sljit_generate_code		1010890	0					
ANR	1010970	Identifier	check_sljit_generate_code		1010890	0					
ANR	1010971	ArgumentList	compiler		1010890	1					
ANR	1010972	Argument	compiler		1010890	0					
ANR	1010973	Identifier	compiler		1010890	0					
ANR	1010974	ExpressionStatement	reverse_buf ( compiler )	580:1:17674:17695	1010890	18	True				
ANR	1010975	CallExpression	reverse_buf ( compiler )		1010890	0					
ANR	1010976	Callee	reverse_buf		1010890	0					
ANR	1010977	Identifier	reverse_buf		1010890	0					
ANR	1010978	ArgumentList	compiler		1010890	1					
ANR	1010979	Argument	compiler		1010890	0					
ANR	1010980	Identifier	compiler		1010890	0					
ANR	1010981	ExpressionStatement	size = compiler -> size + ( compiler -> patches << 1 )	584:1:17792:17840	1010890	19	True				
ANR	1010982	AssignmentExpression	size = compiler -> size + ( compiler -> patches << 1 )		1010890	0		=			
ANR	1010983	Identifier	size		1010890	0					
ANR	1010984	AdditiveExpression	compiler -> size + ( compiler -> patches << 1 )		1010890	1		+			
ANR	1010985	PtrMemberAccess	compiler -> size		1010890	0					
ANR	1010986	Identifier	compiler		1010890	0					
ANR	1010987	Identifier	size		1010890	1					
ANR	1010988	ShiftExpression	compiler -> patches << 1		1010890	1		<<			
ANR	1010989	PtrMemberAccess	compiler -> patches		1010890	0					
ANR	1010990	Identifier	compiler		1010890	0					
ANR	1010991	Identifier	patches		1010890	1					
ANR	1010992	PrimaryExpression	1		1010890	1					
ANR	1010993	IfStatement	if ( compiler -> cpool_fill > 0 )		1010890	20					
ANR	1010994	Condition	compiler -> cpool_fill > 0	585:5:17847:17870	1010890	0	True				
ANR	1010995	RelationalExpression	compiler -> cpool_fill > 0		1010890	0		>			
ANR	1010996	PtrMemberAccess	compiler -> cpool_fill		1010890	0					
ANR	1010997	Identifier	compiler		1010890	0					
ANR	1010998	Identifier	cpool_fill		1010890	1					
ANR	1010999	PrimaryExpression	0		1010890	1					
ANR	1011000	ExpressionStatement	size += compiler -> cpool_fill + CONST_POOL_ALIGNMENT - 1	586:2:17875:17930	1010890	1	True				
ANR	1011001	AssignmentExpression	size += compiler -> cpool_fill + CONST_POOL_ALIGNMENT - 1		1010890	0		+=			
ANR	1011002	Identifier	size		1010890	0					
ANR	1011003	AdditiveExpression	compiler -> cpool_fill + CONST_POOL_ALIGNMENT - 1		1010890	1		+			
ANR	1011004	PtrMemberAccess	compiler -> cpool_fill		1010890	0					
ANR	1011005	Identifier	compiler		1010890	0					
ANR	1011006	Identifier	cpool_fill		1010890	1					
ANR	1011007	AdditiveExpression	CONST_POOL_ALIGNMENT - 1		1010890	1		-			
ANR	1011008	Identifier	CONST_POOL_ALIGNMENT		1010890	0					
ANR	1011009	PrimaryExpression	1		1010890	1					
ANR	1011010	ExpressionStatement	code = ( sljit_uw * ) SLJIT_MALLOC_EXEC ( size * sizeof ( sljit_uw ) )	590:1:17970:18030	1010890	21	True				
ANR	1011011	AssignmentExpression	code = ( sljit_uw * ) SLJIT_MALLOC_EXEC ( size * sizeof ( sljit_uw ) )		1010890	0		=			
ANR	1011012	Identifier	code		1010890	0					
ANR	1011013	CastExpression	( sljit_uw * ) SLJIT_MALLOC_EXEC ( size * sizeof ( sljit_uw ) )		1010890	1					
ANR	1011014	CastTarget	sljit_uw *		1010890	0					
ANR	1011015	CallExpression	SLJIT_MALLOC_EXEC ( size * sizeof ( sljit_uw ) )		1010890	1					
ANR	1011016	Callee	SLJIT_MALLOC_EXEC		1010890	0					
ANR	1011017	Identifier	SLJIT_MALLOC_EXEC		1010890	0					
ANR	1011018	ArgumentList	size * sizeof ( sljit_uw )		1010890	1					
ANR	1011019	Argument	size * sizeof ( sljit_uw )		1010890	0					
ANR	1011020	MultiplicativeExpression	size * sizeof ( sljit_uw )		1010890	0		*			
ANR	1011021	Identifier	size		1010890	0					
ANR	1011022	SizeofExpression	sizeof ( sljit_uw )		1010890	1					
ANR	1011023	Sizeof	sizeof		1010890	0					
ANR	1011024	SizeofOperand	sljit_uw		1010890	1					
ANR	1011025	ExpressionStatement	PTR_FAIL_WITH_EXEC_IF ( code )	591:1:18033:18060	1010890	22	True				
ANR	1011026	CallExpression	PTR_FAIL_WITH_EXEC_IF ( code )		1010890	0					
ANR	1011027	Callee	PTR_FAIL_WITH_EXEC_IF		1010890	0					
ANR	1011028	Identifier	PTR_FAIL_WITH_EXEC_IF		1010890	0					
ANR	1011029	ArgumentList	code		1010890	1					
ANR	1011030	Argument	code		1010890	0					
ANR	1011031	Identifier	code		1010890	0					
ANR	1011032	ExpressionStatement	buf = compiler -> buf	592:1:18063:18082	1010890	23	True				
ANR	1011033	AssignmentExpression	buf = compiler -> buf		1010890	0		=			
ANR	1011034	Identifier	buf		1010890	0					
ANR	1011035	PtrMemberAccess	compiler -> buf		1010890	1					
ANR	1011036	Identifier	compiler		1010890	0					
ANR	1011037	Identifier	buf		1010890	1					
ANR	1011038	ExpressionStatement	cpool_size = 0	595:1:18143:18157	1010890	24	True				
ANR	1011039	AssignmentExpression	cpool_size = 0		1010890	0		=			
ANR	1011040	Identifier	cpool_size		1010890	0					
ANR	1011041	PrimaryExpression	0		1010890	1					
ANR	1011042	ExpressionStatement	cpool_skip_alignment = 0	596:1:18160:18184	1010890	25	True				
ANR	1011043	AssignmentExpression	cpool_skip_alignment = 0		1010890	0		=			
ANR	1011044	Identifier	cpool_skip_alignment		1010890	0					
ANR	1011045	PrimaryExpression	0		1010890	1					
ANR	1011046	ExpressionStatement	cpool_current_index = 0	597:1:18187:18210	1010890	26	True				
ANR	1011047	AssignmentExpression	cpool_current_index = 0		1010890	0		=			
ANR	1011048	Identifier	cpool_current_index		1010890	0					
ANR	1011049	PrimaryExpression	0		1010890	1					
ANR	1011050	ExpressionStatement	cpool_start_address = NULL	598:1:18213:18239	1010890	27	True				
ANR	1011051	AssignmentExpression	cpool_start_address = NULL		1010890	0		=			
ANR	1011052	Identifier	cpool_start_address		1010890	0					
ANR	1011053	Identifier	NULL		1010890	1					
ANR	1011054	ExpressionStatement	first_patch = NULL	599:1:18242:18260	1010890	28	True				
ANR	1011055	AssignmentExpression	first_patch = NULL		1010890	0		=			
ANR	1011056	Identifier	first_patch		1010890	0					
ANR	1011057	Identifier	NULL		1010890	1					
ANR	1011058	ExpressionStatement	last_pc_patch = code	600:1:18263:18283	1010890	29	True				
ANR	1011059	AssignmentExpression	last_pc_patch = code		1010890	0		=			
ANR	1011060	Identifier	last_pc_patch		1010890	0					
ANR	1011061	Identifier	code		1010890	1					
ANR	1011062	ExpressionStatement	code_ptr = code	603:1:18294:18309	1010890	30	True				
ANR	1011063	AssignmentExpression	code_ptr = code		1010890	0		=			
ANR	1011064	Identifier	code_ptr		1010890	0					
ANR	1011065	Identifier	code		1010890	1					
ANR	1011066	ExpressionStatement	word_count = 0	604:1:18312:18326	1010890	31	True				
ANR	1011067	AssignmentExpression	word_count = 0		1010890	0		=			
ANR	1011068	Identifier	word_count		1010890	0					
ANR	1011069	PrimaryExpression	0		1010890	1					
ANR	1011070	ExpressionStatement	label = compiler -> labels	606:1:18330:18354	1010890	32	True				
ANR	1011071	AssignmentExpression	label = compiler -> labels		1010890	0		=			
ANR	1011072	Identifier	label		1010890	0					
ANR	1011073	PtrMemberAccess	compiler -> labels		1010890	1					
ANR	1011074	Identifier	compiler		1010890	0					
ANR	1011075	Identifier	labels		1010890	1					
ANR	1011076	ExpressionStatement	jump = compiler -> jumps	607:1:18357:18379	1010890	33	True				
ANR	1011077	AssignmentExpression	jump = compiler -> jumps		1010890	0		=			
ANR	1011078	Identifier	jump		1010890	0					
ANR	1011079	PtrMemberAccess	compiler -> jumps		1010890	1					
ANR	1011080	Identifier	compiler		1010890	0					
ANR	1011081	Identifier	jumps		1010890	1					
ANR	1011082	ExpressionStatement	const_ = compiler -> consts	608:1:18382:18407	1010890	34	True				
ANR	1011083	AssignmentExpression	const_ = compiler -> consts		1010890	0		=			
ANR	1011084	Identifier	const_		1010890	0					
ANR	1011085	PtrMemberAccess	compiler -> consts		1010890	1					
ANR	1011086	Identifier	compiler		1010890	0					
ANR	1011087	Identifier	consts		1010890	1					
ANR	1011088	IfStatement	if ( label && label -> size == 0 )		1010890	35					
ANR	1011089	Condition	label && label -> size == 0	610:5:18415:18439	1010890	0	True				
ANR	1011090	AndExpression	label && label -> size == 0		1010890	0		&&			
ANR	1011091	Identifier	label		1010890	0					
ANR	1011092	EqualityExpression	label -> size == 0		1010890	1		==			
ANR	1011093	PtrMemberAccess	label -> size		1010890	0					
ANR	1011094	Identifier	label		1010890	0					
ANR	1011095	Identifier	size		1010890	1					
ANR	1011096	PrimaryExpression	0		1010890	1					
ANR	1011097	CompoundStatement		54:32:1318:1318	1010890	1					
ANR	1011098	ExpressionStatement	label -> addr = ( sljit_uw ) code	611:2:18446:18474	1010890	0	True				
ANR	1011099	AssignmentExpression	label -> addr = ( sljit_uw ) code		1010890	0		=			
ANR	1011100	PtrMemberAccess	label -> addr		1010890	0					
ANR	1011101	Identifier	label		1010890	0					
ANR	1011102	Identifier	addr		1010890	1					
ANR	1011103	CastExpression	( sljit_uw ) code		1010890	1					
ANR	1011104	CastTarget	sljit_uw		1010890	0					
ANR	1011105	Identifier	code		1010890	1					
ANR	1011106	ExpressionStatement	label -> size = 0	612:2:18478:18493	1010890	1	True				
ANR	1011107	AssignmentExpression	label -> size = 0		1010890	0		=			
ANR	1011108	PtrMemberAccess	label -> size		1010890	0					
ANR	1011109	Identifier	label		1010890	0					
ANR	1011110	Identifier	size		1010890	1					
ANR	1011111	PrimaryExpression	0		1010890	1					
ANR	1011112	ExpressionStatement	label = label -> next	613:2:18497:18516	1010890	2	True				
ANR	1011113	AssignmentExpression	label = label -> next		1010890	0		=			
ANR	1011114	Identifier	label		1010890	0					
ANR	1011115	PtrMemberAccess	label -> next		1010890	1					
ANR	1011116	Identifier	label		1010890	0					
ANR	1011117	Identifier	next		1010890	1					
ANR	1011118	DoStatement	do		1010890	36					
ANR	1011119	CompoundStatement		60:4:1402:1402	1010890	0					
ANR	1011120	ExpressionStatement	buf_ptr = ( sljit_uw * ) buf -> memory	617:2:18530:18562	1010890	0	True				
ANR	1011121	AssignmentExpression	buf_ptr = ( sljit_uw * ) buf -> memory		1010890	0		=			
ANR	1011122	Identifier	buf_ptr		1010890	0					
ANR	1011123	CastExpression	( sljit_uw * ) buf -> memory		1010890	1					
ANR	1011124	CastTarget	sljit_uw *		1010890	0					
ANR	1011125	PtrMemberAccess	buf -> memory		1010890	1					
ANR	1011126	Identifier	buf		1010890	0					
ANR	1011127	Identifier	memory		1010890	1					
ANR	1011128	ExpressionStatement	buf_end = buf_ptr + ( buf -> used_size >> 2 )	618:2:18566:18607	1010890	1	True				
ANR	1011129	AssignmentExpression	buf_end = buf_ptr + ( buf -> used_size >> 2 )		1010890	0		=			
ANR	1011130	Identifier	buf_end		1010890	0					
ANR	1011131	AdditiveExpression	buf_ptr + ( buf -> used_size >> 2 )		1010890	1		+			
ANR	1011132	Identifier	buf_ptr		1010890	0					
ANR	1011133	ShiftExpression	buf -> used_size >> 2		1010890	1		>>			
ANR	1011134	PtrMemberAccess	buf -> used_size		1010890	0					
ANR	1011135	Identifier	buf		1010890	0					
ANR	1011136	Identifier	used_size		1010890	1					
ANR	1011137	PrimaryExpression	2		1010890	1					
ANR	1011138	DoStatement	do		1010890	2					
ANR	1011139	CompoundStatement		63:5:1490:1490	1010890	0					
ANR	1011140	ExpressionStatement	word_count ++	620:3:18619:18631	1010890	0	True				
ANR	1011141	PostIncDecOperationExpression	word_count ++		1010890	0					
ANR	1011142	Identifier	word_count		1010890	0					
ANR	1011143	IncDec	++		1010890	1					
ANR	1011144	IfStatement	if ( cpool_size > 0 )		1010890	1					
ANR	1011145	Condition	cpool_size > 0	622:7:18697:18710	1010890	0	True				
ANR	1011146	RelationalExpression	cpool_size > 0		1010890	0		>			
ANR	1011147	Identifier	cpool_size		1010890	0					
ANR	1011148	PrimaryExpression	0		1010890	1					
ANR	1011149	CompoundStatement		66:23:1589:1589	1010890	1					
ANR	1011150	IfStatement	if ( cpool_skip_alignment > 0 )		1010890	0					
ANR	1011151	Condition	cpool_skip_alignment > 0	623:8:18723:18746	1010890	0	True				
ANR	1011152	RelationalExpression	cpool_skip_alignment > 0		1010890	0		>			
ANR	1011153	Identifier	cpool_skip_alignment		1010890	0					
ANR	1011154	PrimaryExpression	0		1010890	1					
ANR	1011155	CompoundStatement		67:34:1625:1625	1010890	1					
ANR	1011156	ExpressionStatement	buf_ptr ++	624:5:18756:18765	1010890	0	True				
ANR	1011157	PostIncDecOperationExpression	buf_ptr ++		1010890	0					
ANR	1011158	Identifier	buf_ptr		1010890	0					
ANR	1011159	IncDec	++		1010890	1					
ANR	1011160	ExpressionStatement	cpool_skip_alignment --	625:5:18772:18794	1010890	1	True				
ANR	1011161	PostIncDecOperationExpression	cpool_skip_alignment --		1010890	0					
ANR	1011162	Identifier	cpool_skip_alignment		1010890	0					
ANR	1011163	IncDec	--		1010890	1					
ANR	1011164	ElseStatement	else		1010890	0					
ANR	1011165	CompoundStatement		71:9:1687:1687	1010890	0					
ANR	1011166	IfStatement	"if ( SLJIT_UNLIKELY ( resolve_const_pool_index ( compiler , & first_patch , cpool_current_index , cpool_start_address , buf_ptr ) ) )"		1010890	0					
ANR	1011167	Condition	"SLJIT_UNLIKELY ( resolve_const_pool_index ( compiler , & first_patch , cpool_current_index , cpool_start_address , buf_ptr ) )"	628:9:18822:18936	1010890	0	True				
ANR	1011168	CallExpression	"SLJIT_UNLIKELY ( resolve_const_pool_index ( compiler , & first_patch , cpool_current_index , cpool_start_address , buf_ptr ) )"		1010890	0					
ANR	1011169	Callee	SLJIT_UNLIKELY		1010890	0					
ANR	1011170	Identifier	SLJIT_UNLIKELY		1010890	0					
ANR	1011171	ArgumentList	"resolve_const_pool_index ( compiler , & first_patch , cpool_current_index , cpool_start_address , buf_ptr )"		1010890	1					
ANR	1011172	Argument	"resolve_const_pool_index ( compiler , & first_patch , cpool_current_index , cpool_start_address , buf_ptr )"		1010890	0					
ANR	1011173	CallExpression	"resolve_const_pool_index ( compiler , & first_patch , cpool_current_index , cpool_start_address , buf_ptr )"		1010890	0					
ANR	1011174	Callee	resolve_const_pool_index		1010890	0					
ANR	1011175	Identifier	resolve_const_pool_index		1010890	0					
ANR	1011176	ArgumentList	compiler		1010890	1					
ANR	1011177	Argument	compiler		1010890	0					
ANR	1011178	Identifier	compiler		1010890	0					
ANR	1011179	Argument	& first_patch		1010890	1					
ANR	1011180	UnaryOperationExpression	& first_patch		1010890	0					
ANR	1011181	UnaryOperator	&		1010890	0					
ANR	1011182	Identifier	first_patch		1010890	1					
ANR	1011183	Argument	cpool_current_index		1010890	2					
ANR	1011184	Identifier	cpool_current_index		1010890	0					
ANR	1011185	Argument	cpool_start_address		1010890	3					
ANR	1011186	Identifier	cpool_start_address		1010890	0					
ANR	1011187	Argument	buf_ptr		1010890	4					
ANR	1011188	Identifier	buf_ptr		1010890	0					
ANR	1011189	CompoundStatement		72:126:1815:1815	1010890	1					
ANR	1011190	ExpressionStatement	SLJIT_FREE_EXEC ( code )	629:6:18947:18968	1010890	0	True				
ANR	1011191	CallExpression	SLJIT_FREE_EXEC ( code )		1010890	0					
ANR	1011192	Callee	SLJIT_FREE_EXEC		1010890	0					
ANR	1011193	Identifier	SLJIT_FREE_EXEC		1010890	0					
ANR	1011194	ArgumentList	code		1010890	1					
ANR	1011195	Argument	code		1010890	0					
ANR	1011196	Identifier	code		1010890	0					
ANR	1011197	ExpressionStatement	compiler -> error = SLJIT_ERR_ALLOC_FAILED	630:6:18976:19016	1010890	1	True				
ANR	1011198	AssignmentExpression	compiler -> error = SLJIT_ERR_ALLOC_FAILED		1010890	0		=			
ANR	1011199	PtrMemberAccess	compiler -> error		1010890	0					
ANR	1011200	Identifier	compiler		1010890	0					
ANR	1011201	Identifier	error		1010890	1					
ANR	1011202	Identifier	SLJIT_ERR_ALLOC_FAILED		1010890	1					
ANR	1011203	ReturnStatement	return NULL ;	631:6:19024:19035	1010890	2	True				
ANR	1011204	Identifier	NULL		1010890	0					
ANR	1011205	ExpressionStatement	buf_ptr ++	633:5:19049:19058	1010890	1	True				
ANR	1011206	PostIncDecOperationExpression	buf_ptr ++		1010890	0					
ANR	1011207	Identifier	buf_ptr		1010890	0					
ANR	1011208	IncDec	++		1010890	1					
ANR	1011209	IfStatement	if ( ++ cpool_current_index >= cpool_size )		1010890	2					
ANR	1011210	Condition	++ cpool_current_index >= cpool_size	634:9:19069:19103	1010890	0	True				
ANR	1011211	RelationalExpression	++ cpool_current_index >= cpool_size		1010890	0		>=			
ANR	1011212	UnaryExpression	++ cpool_current_index		1010890	0					
ANR	1011213	IncDec	++		1010890	0					
ANR	1011214	Identifier	cpool_current_index		1010890	1					
ANR	1011215	Identifier	cpool_size		1010890	1					
ANR	1011216	CompoundStatement		78:46:1982:1982	1010890	1					
ANR	1011217	ExpressionStatement	SLJIT_ASSERT ( ! first_patch )	635:6:19114:19140	1010890	0	True				
ANR	1011218	CallExpression	SLJIT_ASSERT ( ! first_patch )		1010890	0					
ANR	1011219	Callee	SLJIT_ASSERT		1010890	0					
ANR	1011220	Identifier	SLJIT_ASSERT		1010890	0					
ANR	1011221	ArgumentList	! first_patch		1010890	1					
ANR	1011222	Argument	! first_patch		1010890	0					
ANR	1011223	UnaryOperationExpression	! first_patch		1010890	0					
ANR	1011224	UnaryOperator	!		1010890	0					
ANR	1011225	Identifier	first_patch		1010890	1					
ANR	1011226	ExpressionStatement	cpool_size = 0	636:6:19148:19162	1010890	1	True				
ANR	1011227	AssignmentExpression	cpool_size = 0		1010890	0		=			
ANR	1011228	Identifier	cpool_size		1010890	0					
ANR	1011229	PrimaryExpression	0		1010890	1					
ANR	1011230	IfStatement	if ( label && label -> size == word_count )		1010890	2					
ANR	1011231	Condition	label && label -> size == word_count	637:10:19174:19207	1010890	0	True				
ANR	1011232	AndExpression	label && label -> size == word_count		1010890	0		&&			
ANR	1011233	Identifier	label		1010890	0					
ANR	1011234	EqualityExpression	label -> size == word_count		1010890	1		==			
ANR	1011235	PtrMemberAccess	label -> size		1010890	0					
ANR	1011236	Identifier	label		1010890	0					
ANR	1011237	Identifier	size		1010890	1					
ANR	1011238	Identifier	word_count		1010890	1					
ANR	1011239	CompoundStatement		81:46:2086:2086	1010890	1					
ANR	1011240	ExpressionStatement	label -> addr = ( sljit_uw ) code_ptr	639:7:19270:19302	1010890	0	True				
ANR	1011241	AssignmentExpression	label -> addr = ( sljit_uw ) code_ptr		1010890	0		=			
ANR	1011242	PtrMemberAccess	label -> addr		1010890	0					
ANR	1011243	Identifier	label		1010890	0					
ANR	1011244	Identifier	addr		1010890	1					
ANR	1011245	CastExpression	( sljit_uw ) code_ptr		1010890	1					
ANR	1011246	CastTarget	sljit_uw		1010890	0					
ANR	1011247	Identifier	code_ptr		1010890	1					
ANR	1011248	ExpressionStatement	label -> size = code_ptr - code	640:7:19311:19340	1010890	1	True				
ANR	1011249	AssignmentExpression	label -> size = code_ptr - code		1010890	0		=			
ANR	1011250	PtrMemberAccess	label -> size		1010890	0					
ANR	1011251	Identifier	label		1010890	0					
ANR	1011252	Identifier	size		1010890	1					
ANR	1011253	AdditiveExpression	code_ptr - code		1010890	1		-			
ANR	1011254	Identifier	code_ptr		1010890	0					
ANR	1011255	Identifier	code		1010890	1					
ANR	1011256	ExpressionStatement	label = label -> next	641:7:19349:19368	1010890	2	True				
ANR	1011257	AssignmentExpression	label = label -> next		1010890	0		=			
ANR	1011258	Identifier	label		1010890	0					
ANR	1011259	PtrMemberAccess	label -> next		1010890	1					
ANR	1011260	Identifier	label		1010890	0					
ANR	1011261	Identifier	next		1010890	1					
ANR	1011262	ElseStatement	else		1010890	0					
ANR	1011263	IfStatement	if ( ( * buf_ptr & 0xff000000 ) != PUSH_POOL )		1010890	0					
ANR	1011264	Condition	( * buf_ptr & 0xff000000 ) != PUSH_POOL	646:12:19408:19443	1010890	0	True				
ANR	1011265	EqualityExpression	( * buf_ptr & 0xff000000 ) != PUSH_POOL		1010890	0		!=			
ANR	1011266	BitAndExpression	* buf_ptr & 0xff000000		1010890	0		&			
ANR	1011267	UnaryOperationExpression	* buf_ptr		1010890	0					
ANR	1011268	UnaryOperator	*		1010890	0					
ANR	1011269	Identifier	buf_ptr		1010890	1					
ANR	1011270	PrimaryExpression	0xff000000		1010890	1					
ANR	1011271	Identifier	PUSH_POOL		1010890	1					
ANR	1011272	CompoundStatement		90:50:2322:2322	1010890	1					
ANR	1011273	ExpressionStatement	* code_ptr = * buf_ptr ++	648:4:19459:19481	1010890	0	True				
ANR	1011274	AssignmentExpression	* code_ptr = * buf_ptr ++		1010890	0		=			
ANR	1011275	UnaryOperationExpression	* code_ptr		1010890	0					
ANR	1011276	UnaryOperator	*		1010890	0					
ANR	1011277	Identifier	code_ptr		1010890	1					
ANR	1011278	UnaryOperationExpression	* buf_ptr ++		1010890	1					
ANR	1011279	UnaryOperator	*		1010890	0					
ANR	1011280	PostIncDecOperationExpression	buf_ptr ++		1010890	1					
ANR	1011281	Identifier	buf_ptr		1010890	0					
ANR	1011282	IncDec	++		1010890	1					
ANR	1011283	ExpressionStatement	SLJIT_ASSERT ( ! label || label -> size >= word_count )	650:4:19544:19593	1010890	1	True				
ANR	1011284	CallExpression	SLJIT_ASSERT ( ! label || label -> size >= word_count )		1010890	0					
ANR	1011285	Callee	SLJIT_ASSERT		1010890	0					
ANR	1011286	Identifier	SLJIT_ASSERT		1010890	0					
ANR	1011287	ArgumentList	! label || label -> size >= word_count		1010890	1					
ANR	1011288	Argument	! label || label -> size >= word_count		1010890	0					
ANR	1011289	OrExpression	! label || label -> size >= word_count		1010890	0		||			
ANR	1011290	UnaryOperationExpression	! label		1010890	0					
ANR	1011291	UnaryOperator	!		1010890	0					
ANR	1011292	Identifier	label		1010890	1					
ANR	1011293	RelationalExpression	label -> size >= word_count		1010890	1		>=			
ANR	1011294	PtrMemberAccess	label -> size		1010890	0					
ANR	1011295	Identifier	label		1010890	0					
ANR	1011296	Identifier	size		1010890	1					
ANR	1011297	Identifier	word_count		1010890	1					
ANR	1011298	ExpressionStatement	SLJIT_ASSERT ( ! jump || jump -> addr >= word_count )	651:4:19599:19646	1010890	2	True				
ANR	1011299	CallExpression	SLJIT_ASSERT ( ! jump || jump -> addr >= word_count )		1010890	0					
ANR	1011300	Callee	SLJIT_ASSERT		1010890	0					
ANR	1011301	Identifier	SLJIT_ASSERT		1010890	0					
ANR	1011302	ArgumentList	! jump || jump -> addr >= word_count		1010890	1					
ANR	1011303	Argument	! jump || jump -> addr >= word_count		1010890	0					
ANR	1011304	OrExpression	! jump || jump -> addr >= word_count		1010890	0		||			
ANR	1011305	UnaryOperationExpression	! jump		1010890	0					
ANR	1011306	UnaryOperator	!		1010890	0					
ANR	1011307	Identifier	jump		1010890	1					
ANR	1011308	RelationalExpression	jump -> addr >= word_count		1010890	1		>=			
ANR	1011309	PtrMemberAccess	jump -> addr		1010890	0					
ANR	1011310	Identifier	jump		1010890	0					
ANR	1011311	Identifier	addr		1010890	1					
ANR	1011312	Identifier	word_count		1010890	1					
ANR	1011313	ExpressionStatement	SLJIT_ASSERT ( ! const_ || const_ -> addr >= word_count )	652:4:19652:19703	1010890	3	True				
ANR	1011314	CallExpression	SLJIT_ASSERT ( ! const_ || const_ -> addr >= word_count )		1010890	0					
ANR	1011315	Callee	SLJIT_ASSERT		1010890	0					
ANR	1011316	Identifier	SLJIT_ASSERT		1010890	0					
ANR	1011317	ArgumentList	! const_ || const_ -> addr >= word_count		1010890	1					
ANR	1011318	Argument	! const_ || const_ -> addr >= word_count		1010890	0					
ANR	1011319	OrExpression	! const_ || const_ -> addr >= word_count		1010890	0		||			
ANR	1011320	UnaryOperationExpression	! const_		1010890	0					
ANR	1011321	UnaryOperator	!		1010890	0					
ANR	1011322	Identifier	const_		1010890	1					
ANR	1011323	RelationalExpression	const_ -> addr >= word_count		1010890	1		>=			
ANR	1011324	PtrMemberAccess	const_ -> addr		1010890	0					
ANR	1011325	Identifier	const_		1010890	0					
ANR	1011326	Identifier	addr		1010890	1					
ANR	1011327	Identifier	word_count		1010890	1					
ANR	1011328	IfStatement	if ( jump && jump -> addr == word_count )		1010890	4					
ANR	1011329	Condition	jump && jump -> addr == word_count	653:8:19713:19744	1010890	0	True				
ANR	1011330	AndExpression	jump && jump -> addr == word_count		1010890	0		&&			
ANR	1011331	Identifier	jump		1010890	0					
ANR	1011332	EqualityExpression	jump -> addr == word_count		1010890	1		==			
ANR	1011333	PtrMemberAccess	jump -> addr		1010890	0					
ANR	1011334	Identifier	jump		1010890	0					
ANR	1011335	Identifier	addr		1010890	1					
ANR	1011336	Identifier	word_count		1010890	1					
ANR	1011337	CompoundStatement		97:42:2623:2623	1010890	1					
ANR	1011338	IfStatement	"if ( detect_jump_type ( jump , code_ptr , code ) )"		1010890	0					
ANR	1011339	Condition	"detect_jump_type ( jump , code_ptr , code )"	655:9:19815:19852	1010890	0	True				
ANR	1011340	CallExpression	"detect_jump_type ( jump , code_ptr , code )"		1010890	0					
ANR	1011341	Callee	detect_jump_type		1010890	0					
ANR	1011342	Identifier	detect_jump_type		1010890	0					
ANR	1011343	ArgumentList	jump		1010890	1					
ANR	1011344	Argument	jump		1010890	0					
ANR	1011345	Identifier	jump		1010890	0					
ANR	1011346	Argument	code_ptr		1010890	1					
ANR	1011347	Identifier	code_ptr		1010890	0					
ANR	1011348	Argument	code		1010890	2					
ANR	1011349	Identifier	code		1010890	0					
ANR	1011350	ExpressionStatement	code_ptr --	656:6:19861:19871	1010890	1	True				
ANR	1011351	PostIncDecOperationExpression	code_ptr --		1010890	0					
ANR	1011352	Identifier	code_ptr		1010890	0					
ANR	1011353	IncDec	--		1010890	1					
ANR	1011354	ExpressionStatement	jump -> addr = ( sljit_uw ) code_ptr	657:5:19878:19909	1010890	1	True				
ANR	1011355	AssignmentExpression	jump -> addr = ( sljit_uw ) code_ptr		1010890	0		=			
ANR	1011356	PtrMemberAccess	jump -> addr		1010890	0					
ANR	1011357	Identifier	jump		1010890	0					
ANR	1011358	Identifier	addr		1010890	1					
ANR	1011359	CastExpression	( sljit_uw ) code_ptr		1010890	1					
ANR	1011360	CastTarget	sljit_uw		1010890	0					
ANR	1011361	Identifier	code_ptr		1010890	1					
ANR	1011362	ExpressionStatement	jump = jump -> next	663:5:20043:20060	1010890	2	True				
ANR	1011363	AssignmentExpression	jump = jump -> next		1010890	0		=			
ANR	1011364	Identifier	jump		1010890	0					
ANR	1011365	PtrMemberAccess	jump -> next		1010890	1					
ANR	1011366	Identifier	jump		1010890	0					
ANR	1011367	Identifier	next		1010890	1					
ANR	1011368	IfStatement	if ( label && label -> size == word_count )		1010890	5					
ANR	1011369	Condition	label && label -> size == word_count	665:8:20076:20109	1010890	0	True				
ANR	1011370	AndExpression	label && label -> size == word_count		1010890	0		&&			
ANR	1011371	Identifier	label		1010890	0					
ANR	1011372	EqualityExpression	label -> size == word_count		1010890	1		==			
ANR	1011373	PtrMemberAccess	label -> size		1010890	0					
ANR	1011374	Identifier	label		1010890	0					
ANR	1011375	Identifier	size		1010890	1					
ANR	1011376	Identifier	word_count		1010890	1					
ANR	1011377	CompoundStatement		109:44:2988:2988	1010890	1					
ANR	1011378	ExpressionStatement	label -> addr = ( sljit_uw ) ( code_ptr + 1 )	667:5:20162:20200	1010890	0	True				
ANR	1011379	AssignmentExpression	label -> addr = ( sljit_uw ) ( code_ptr + 1 )		1010890	0		=			
ANR	1011380	PtrMemberAccess	label -> addr		1010890	0					
ANR	1011381	Identifier	label		1010890	0					
ANR	1011382	Identifier	addr		1010890	1					
ANR	1011383	CastExpression	( sljit_uw ) ( code_ptr + 1 )		1010890	1					
ANR	1011384	CastTarget	sljit_uw		1010890	0					
ANR	1011385	AdditiveExpression	code_ptr + 1		1010890	1		+			
ANR	1011386	Identifier	code_ptr		1010890	0					
ANR	1011387	PrimaryExpression	1		1010890	1					
ANR	1011388	ExpressionStatement	label -> size = ( code_ptr + 1 ) - code	668:5:20207:20242	1010890	1	True				
ANR	1011389	AssignmentExpression	label -> size = ( code_ptr + 1 ) - code		1010890	0		=			
ANR	1011390	PtrMemberAccess	label -> size		1010890	0					
ANR	1011391	Identifier	label		1010890	0					
ANR	1011392	Identifier	size		1010890	1					
ANR	1011393	AdditiveExpression	( code_ptr + 1 ) - code		1010890	1		-			
ANR	1011394	AdditiveExpression	code_ptr + 1		1010890	0		+			
ANR	1011395	Identifier	code_ptr		1010890	0					
ANR	1011396	PrimaryExpression	1		1010890	1					
ANR	1011397	Identifier	code		1010890	1					
ANR	1011398	ExpressionStatement	label = label -> next	669:5:20249:20268	1010890	2	True				
ANR	1011399	AssignmentExpression	label = label -> next		1010890	0		=			
ANR	1011400	Identifier	label		1010890	0					
ANR	1011401	PtrMemberAccess	label -> next		1010890	1					
ANR	1011402	Identifier	label		1010890	0					
ANR	1011403	Identifier	next		1010890	1					
ANR	1011404	IfStatement	if ( const_ && const_ -> addr == word_count )		1010890	6					
ANR	1011405	Condition	const_ && const_ -> addr == word_count	671:8:20284:20319	1010890	0	True				
ANR	1011406	AndExpression	const_ && const_ -> addr == word_count		1010890	0		&&			
ANR	1011407	Identifier	const_		1010890	0					
ANR	1011408	EqualityExpression	const_ -> addr == word_count		1010890	1		==			
ANR	1011409	PtrMemberAccess	const_ -> addr		1010890	0					
ANR	1011410	Identifier	const_		1010890	0					
ANR	1011411	Identifier	addr		1010890	1					
ANR	1011412	Identifier	word_count		1010890	1					
ANR	1011413	CompoundStatement		115:46:3198:3198	1010890	1					
ANR	1011414	ExpressionStatement	const_ -> addr = ( sljit_uw ) code_ptr	673:5:20386:20419	1010890	0	True				
ANR	1011415	AssignmentExpression	const_ -> addr = ( sljit_uw ) code_ptr		1010890	0		=			
ANR	1011416	PtrMemberAccess	const_ -> addr		1010890	0					
ANR	1011417	Identifier	const_		1010890	0					
ANR	1011418	Identifier	addr		1010890	1					
ANR	1011419	CastExpression	( sljit_uw ) code_ptr		1010890	1					
ANR	1011420	CastTarget	sljit_uw		1010890	0					
ANR	1011421	Identifier	code_ptr		1010890	1					
ANR	1011422	ExpressionStatement	const_ = const_ -> next	677:5:20485:20506	1010890	1	True				
ANR	1011423	AssignmentExpression	const_ = const_ -> next		1010890	0		=			
ANR	1011424	Identifier	const_		1010890	0					
ANR	1011425	PtrMemberAccess	const_ -> next		1010890	1					
ANR	1011426	Identifier	const_		1010890	0					
ANR	1011427	Identifier	next		1010890	1					
ANR	1011428	ExpressionStatement	code_ptr ++	679:4:20518:20528	1010890	7	True				
ANR	1011429	PostIncDecOperationExpression	code_ptr ++		1010890	0					
ANR	1011430	Identifier	code_ptr		1010890	0					
ANR	1011431	IncDec	++		1010890	1					
ANR	1011432	ElseStatement	else		1010890	0					
ANR	1011433	CompoundStatement		126:8:3476:3476	1010890	0					
ANR	1011434	ExpressionStatement	cpool_size = * buf_ptr ++ & ~PUSH_POOL	684:4:20647:20683	1010890	0	True				
ANR	1011435	AssignmentExpression	cpool_size = * buf_ptr ++ & ~PUSH_POOL		1010890	0		=			
ANR	1011436	Identifier	cpool_size		1010890	0					
ANR	1011437	BitAndExpression	* buf_ptr ++ & ~PUSH_POOL		1010890	1		&			
ANR	1011438	UnaryOperationExpression	* buf_ptr ++		1010890	0					
ANR	1011439	UnaryOperator	*		1010890	0					
ANR	1011440	PostIncDecOperationExpression	buf_ptr ++		1010890	1					
ANR	1011441	Identifier	buf_ptr		1010890	0					
ANR	1011442	IncDec	++		1010890	1					
ANR	1011443	Identifier	~PUSH_POOL		1010890	1					
ANR	1011444	ExpressionStatement	SLJIT_ASSERT ( cpool_size > 0 )	685:4:20689:20717	1010890	1	True				
ANR	1011445	CallExpression	SLJIT_ASSERT ( cpool_size > 0 )		1010890	0					
ANR	1011446	Callee	SLJIT_ASSERT		1010890	0					
ANR	1011447	Identifier	SLJIT_ASSERT		1010890	0					
ANR	1011448	ArgumentList	cpool_size > 0		1010890	1					
ANR	1011449	Argument	cpool_size > 0		1010890	0					
ANR	1011450	RelationalExpression	cpool_size > 0		1010890	0		>			
ANR	1011451	Identifier	cpool_size		1010890	0					
ANR	1011452	PrimaryExpression	0		1010890	1					
ANR	1011453	ExpressionStatement	cpool_start_address = ALIGN_INSTRUCTION ( code_ptr + 1 )	686:4:20723:20776	1010890	2	True				
ANR	1011454	AssignmentExpression	cpool_start_address = ALIGN_INSTRUCTION ( code_ptr + 1 )		1010890	0		=			
ANR	1011455	Identifier	cpool_start_address		1010890	0					
ANR	1011456	CallExpression	ALIGN_INSTRUCTION ( code_ptr + 1 )		1010890	1					
ANR	1011457	Callee	ALIGN_INSTRUCTION		1010890	0					
ANR	1011458	Identifier	ALIGN_INSTRUCTION		1010890	0					
ANR	1011459	ArgumentList	code_ptr + 1		1010890	1					
ANR	1011460	Argument	code_ptr + 1		1010890	0					
ANR	1011461	AdditiveExpression	code_ptr + 1		1010890	0		+			
ANR	1011462	Identifier	code_ptr		1010890	0					
ANR	1011463	PrimaryExpression	1		1010890	1					
ANR	1011464	ExpressionStatement	"cpool_current_index = patch_pc_relative_loads ( last_pc_patch , code_ptr , cpool_start_address , cpool_size )"	687:4:20782:20885	1010890	3	True				
ANR	1011465	AssignmentExpression	"cpool_current_index = patch_pc_relative_loads ( last_pc_patch , code_ptr , cpool_start_address , cpool_size )"		1010890	0		=			
ANR	1011466	Identifier	cpool_current_index		1010890	0					
ANR	1011467	CallExpression	"patch_pc_relative_loads ( last_pc_patch , code_ptr , cpool_start_address , cpool_size )"		1010890	1					
ANR	1011468	Callee	patch_pc_relative_loads		1010890	0					
ANR	1011469	Identifier	patch_pc_relative_loads		1010890	0					
ANR	1011470	ArgumentList	last_pc_patch		1010890	1					
ANR	1011471	Argument	last_pc_patch		1010890	0					
ANR	1011472	Identifier	last_pc_patch		1010890	0					
ANR	1011473	Argument	code_ptr		1010890	1					
ANR	1011474	Identifier	code_ptr		1010890	0					
ANR	1011475	Argument	cpool_start_address		1010890	2					
ANR	1011476	Identifier	cpool_start_address		1010890	0					
ANR	1011477	Argument	cpool_size		1010890	3					
ANR	1011478	Identifier	cpool_size		1010890	0					
ANR	1011479	IfStatement	if ( cpool_current_index > 0 )		1010890	4					
ANR	1011480	Condition	cpool_current_index > 0	688:8:20895:20917	1010890	0	True				
ANR	1011481	RelationalExpression	cpool_current_index > 0		1010890	0		>			
ANR	1011482	Identifier	cpool_current_index		1010890	0					
ANR	1011483	PrimaryExpression	0		1010890	1					
ANR	1011484	CompoundStatement		132:33:3796:3796	1010890	1					
ANR	1011485	ExpressionStatement	* code_ptr = B | ( ( ( cpool_start_address - code_ptr ) + cpool_current_index - 2 ) & ~PUSH_POOL )	690:5:20960:21051	1010890	0	True				
ANR	1011486	AssignmentExpression	* code_ptr = B | ( ( ( cpool_start_address - code_ptr ) + cpool_current_index - 2 ) & ~PUSH_POOL )		1010890	0		=			
ANR	1011487	UnaryOperationExpression	* code_ptr		1010890	0					
ANR	1011488	UnaryOperator	*		1010890	0					
ANR	1011489	Identifier	code_ptr		1010890	1					
ANR	1011490	InclusiveOrExpression	B | ( ( ( cpool_start_address - code_ptr ) + cpool_current_index - 2 ) & ~PUSH_POOL )		1010890	1		|			
ANR	1011491	Identifier	B		1010890	0					
ANR	1011492	BitAndExpression	( ( cpool_start_address - code_ptr ) + cpool_current_index - 2 ) & ~PUSH_POOL		1010890	1		&			
ANR	1011493	AdditiveExpression	( cpool_start_address - code_ptr ) + cpool_current_index - 2		1010890	0		+			
ANR	1011494	AdditiveExpression	cpool_start_address - code_ptr		1010890	0		-			
ANR	1011495	Identifier	cpool_start_address		1010890	0					
ANR	1011496	Identifier	code_ptr		1010890	1					
ANR	1011497	AdditiveExpression	cpool_current_index - 2		1010890	1		-			
ANR	1011498	Identifier	cpool_current_index		1010890	0					
ANR	1011499	PrimaryExpression	2		1010890	1					
ANR	1011500	Identifier	~PUSH_POOL		1010890	1					
ANR	1011501	ExpressionStatement	code_ptr = cpool_start_address + cpool_current_index	691:5:21058:21110	1010890	1	True				
ANR	1011502	AssignmentExpression	code_ptr = cpool_start_address + cpool_current_index		1010890	0		=			
ANR	1011503	Identifier	code_ptr		1010890	0					
ANR	1011504	AdditiveExpression	cpool_start_address + cpool_current_index		1010890	1		+			
ANR	1011505	Identifier	cpool_start_address		1010890	0					
ANR	1011506	Identifier	cpool_current_index		1010890	1					
ANR	1011507	ExpressionStatement	cpool_skip_alignment = CONST_POOL_ALIGNMENT - 1	693:4:21122:21169	1010890	5	True				
ANR	1011508	AssignmentExpression	cpool_skip_alignment = CONST_POOL_ALIGNMENT - 1		1010890	0		=			
ANR	1011509	Identifier	cpool_skip_alignment		1010890	0					
ANR	1011510	AdditiveExpression	CONST_POOL_ALIGNMENT - 1		1010890	1		-			
ANR	1011511	Identifier	CONST_POOL_ALIGNMENT		1010890	0					
ANR	1011512	PrimaryExpression	1		1010890	1					
ANR	1011513	ExpressionStatement	cpool_current_index = 0	694:4:21175:21198	1010890	6	True				
ANR	1011514	AssignmentExpression	cpool_current_index = 0		1010890	0		=			
ANR	1011515	Identifier	cpool_current_index		1010890	0					
ANR	1011516	PrimaryExpression	0		1010890	1					
ANR	1011517	ExpressionStatement	last_pc_patch = code_ptr	695:4:21204:21228	1010890	7	True				
ANR	1011518	AssignmentExpression	last_pc_patch = code_ptr		1010890	0		=			
ANR	1011519	Identifier	last_pc_patch		1010890	0					
ANR	1011520	Identifier	code_ptr		1010890	1					
ANR	1011521	Condition	buf_ptr < buf_end	698:11:21253:21269	1010890	1	True				
ANR	1011522	RelationalExpression	buf_ptr < buf_end		1010890	0		<			
ANR	1011523	Identifier	buf_ptr		1010890	0					
ANR	1011524	Identifier	buf_end		1010890	1					
ANR	1011525	ExpressionStatement	buf = buf -> next	699:2:21275:21290	1010890	3	True				
ANR	1011526	AssignmentExpression	buf = buf -> next		1010890	0		=			
ANR	1011527	Identifier	buf		1010890	0					
ANR	1011528	PtrMemberAccess	buf -> next		1010890	1					
ANR	1011529	Identifier	buf		1010890	0					
ANR	1011530	Identifier	next		1010890	1					
ANR	1011531	Condition	buf	700:10:21302:21304	1010890	1	True				
ANR	1011532	Identifier	buf		1010890	0					
ANR	1011533	ExpressionStatement	SLJIT_ASSERT ( ! label )	702:1:21310:21330	1010890	37	True				
ANR	1011534	CallExpression	SLJIT_ASSERT ( ! label )		1010890	0					
ANR	1011535	Callee	SLJIT_ASSERT		1010890	0					
ANR	1011536	Identifier	SLJIT_ASSERT		1010890	0					
ANR	1011537	ArgumentList	! label		1010890	1					
ANR	1011538	Argument	! label		1010890	0					
ANR	1011539	UnaryOperationExpression	! label		1010890	0					
ANR	1011540	UnaryOperator	!		1010890	0					
ANR	1011541	Identifier	label		1010890	1					
ANR	1011542	ExpressionStatement	SLJIT_ASSERT ( ! jump )	703:1:21333:21352	1010890	38	True				
ANR	1011543	CallExpression	SLJIT_ASSERT ( ! jump )		1010890	0					
ANR	1011544	Callee	SLJIT_ASSERT		1010890	0					
ANR	1011545	Identifier	SLJIT_ASSERT		1010890	0					
ANR	1011546	ArgumentList	! jump		1010890	1					
ANR	1011547	Argument	! jump		1010890	0					
ANR	1011548	UnaryOperationExpression	! jump		1010890	0					
ANR	1011549	UnaryOperator	!		1010890	0					
ANR	1011550	Identifier	jump		1010890	1					
ANR	1011551	ExpressionStatement	SLJIT_ASSERT ( ! const_ )	704:1:21355:21376	1010890	39	True				
ANR	1011552	CallExpression	SLJIT_ASSERT ( ! const_ )		1010890	0					
ANR	1011553	Callee	SLJIT_ASSERT		1010890	0					
ANR	1011554	Identifier	SLJIT_ASSERT		1010890	0					
ANR	1011555	ArgumentList	! const_		1010890	1					
ANR	1011556	Argument	! const_		1010890	0					
ANR	1011557	UnaryOperationExpression	! const_		1010890	0					
ANR	1011558	UnaryOperator	!		1010890	0					
ANR	1011559	Identifier	const_		1010890	1					
ANR	1011560	ExpressionStatement	SLJIT_ASSERT ( cpool_size == 0 )	707:1:21437:21466	1010890	40	True				
ANR	1011561	CallExpression	SLJIT_ASSERT ( cpool_size == 0 )		1010890	0					
ANR	1011562	Callee	SLJIT_ASSERT		1010890	0					
ANR	1011563	Identifier	SLJIT_ASSERT		1010890	0					
ANR	1011564	ArgumentList	cpool_size == 0		1010890	1					
ANR	1011565	Argument	cpool_size == 0		1010890	0					
ANR	1011566	EqualityExpression	cpool_size == 0		1010890	0		==			
ANR	1011567	Identifier	cpool_size		1010890	0					
ANR	1011568	PrimaryExpression	0		1010890	1					
ANR	1011569	IfStatement	if ( compiler -> cpool_fill > 0 )		1010890	41					
ANR	1011570	Condition	compiler -> cpool_fill > 0	708:5:21473:21496	1010890	0	True				
ANR	1011571	RelationalExpression	compiler -> cpool_fill > 0		1010890	0		>			
ANR	1011572	PtrMemberAccess	compiler -> cpool_fill		1010890	0					
ANR	1011573	Identifier	compiler		1010890	0					
ANR	1011574	Identifier	cpool_fill		1010890	1					
ANR	1011575	PrimaryExpression	0		1010890	1					
ANR	1011576	CompoundStatement		152:31:4375:4375	1010890	1					
ANR	1011577	ExpressionStatement	cpool_start_address = ALIGN_INSTRUCTION ( code_ptr )	709:2:21503:21552	1010890	0	True				
ANR	1011578	AssignmentExpression	cpool_start_address = ALIGN_INSTRUCTION ( code_ptr )		1010890	0		=			
ANR	1011579	Identifier	cpool_start_address		1010890	0					
ANR	1011580	CallExpression	ALIGN_INSTRUCTION ( code_ptr )		1010890	1					
ANR	1011581	Callee	ALIGN_INSTRUCTION		1010890	0					
ANR	1011582	Identifier	ALIGN_INSTRUCTION		1010890	0					
ANR	1011583	ArgumentList	code_ptr		1010890	1					
ANR	1011584	Argument	code_ptr		1010890	0					
ANR	1011585	Identifier	code_ptr		1010890	0					
ANR	1011586	ExpressionStatement	"cpool_current_index = patch_pc_relative_loads ( last_pc_patch , code_ptr , cpool_start_address , compiler -> cpool_fill )"	710:2:21556:21669	1010890	1	True				
ANR	1011587	AssignmentExpression	"cpool_current_index = patch_pc_relative_loads ( last_pc_patch , code_ptr , cpool_start_address , compiler -> cpool_fill )"		1010890	0		=			
ANR	1011588	Identifier	cpool_current_index		1010890	0					
ANR	1011589	CallExpression	"patch_pc_relative_loads ( last_pc_patch , code_ptr , cpool_start_address , compiler -> cpool_fill )"		1010890	1					
ANR	1011590	Callee	patch_pc_relative_loads		1010890	0					
ANR	1011591	Identifier	patch_pc_relative_loads		1010890	0					
ANR	1011592	ArgumentList	last_pc_patch		1010890	1					
ANR	1011593	Argument	last_pc_patch		1010890	0					
ANR	1011594	Identifier	last_pc_patch		1010890	0					
ANR	1011595	Argument	code_ptr		1010890	1					
ANR	1011596	Identifier	code_ptr		1010890	0					
ANR	1011597	Argument	cpool_start_address		1010890	2					
ANR	1011598	Identifier	cpool_start_address		1010890	0					
ANR	1011599	Argument	compiler -> cpool_fill		1010890	3					
ANR	1011600	PtrMemberAccess	compiler -> cpool_fill		1010890	0					
ANR	1011601	Identifier	compiler		1010890	0					
ANR	1011602	Identifier	cpool_fill		1010890	1					
ANR	1011603	IfStatement	if ( cpool_current_index > 0 )		1010890	2					
ANR	1011604	Condition	cpool_current_index > 0	711:6:21677:21699	1010890	0	True				
ANR	1011605	RelationalExpression	cpool_current_index > 0		1010890	0		>			
ANR	1011606	Identifier	cpool_current_index		1010890	0					
ANR	1011607	PrimaryExpression	0		1010890	1					
ANR	1011608	ExpressionStatement	code_ptr = cpool_start_address + cpool_current_index	712:3:21705:21757	1010890	1	True				
ANR	1011609	AssignmentExpression	code_ptr = cpool_start_address + cpool_current_index		1010890	0		=			
ANR	1011610	Identifier	code_ptr		1010890	0					
ANR	1011611	AdditiveExpression	cpool_start_address + cpool_current_index		1010890	1		+			
ANR	1011612	Identifier	cpool_start_address		1010890	0					
ANR	1011613	Identifier	cpool_current_index		1010890	1					
ANR	1011614	ExpressionStatement	buf_ptr = compiler -> cpool	714:2:21762:21787	1010890	3	True				
ANR	1011615	AssignmentExpression	buf_ptr = compiler -> cpool		1010890	0		=			
ANR	1011616	Identifier	buf_ptr		1010890	0					
ANR	1011617	PtrMemberAccess	compiler -> cpool		1010890	1					
ANR	1011618	Identifier	compiler		1010890	0					
ANR	1011619	Identifier	cpool		1010890	1					
ANR	1011620	ExpressionStatement	buf_end = buf_ptr + compiler -> cpool_fill	715:2:21791:21831	1010890	4	True				
ANR	1011621	AssignmentExpression	buf_end = buf_ptr + compiler -> cpool_fill		1010890	0		=			
ANR	1011622	Identifier	buf_end		1010890	0					
ANR	1011623	AdditiveExpression	buf_ptr + compiler -> cpool_fill		1010890	1		+			
ANR	1011624	Identifier	buf_ptr		1010890	0					
ANR	1011625	PtrMemberAccess	compiler -> cpool_fill		1010890	1					
ANR	1011626	Identifier	compiler		1010890	0					
ANR	1011627	Identifier	cpool_fill		1010890	1					
ANR	1011628	ExpressionStatement	cpool_current_index = 0	716:2:21835:21858	1010890	5	True				
ANR	1011629	AssignmentExpression	cpool_current_index = 0		1010890	0		=			
ANR	1011630	Identifier	cpool_current_index		1010890	0					
ANR	1011631	PrimaryExpression	0		1010890	1					
ANR	1011632	WhileStatement	while ( buf_ptr < buf_end )		1010890	6					
ANR	1011633	Condition	buf_ptr < buf_end	717:9:21869:21885	1010890	0	True				
ANR	1011634	RelationalExpression	buf_ptr < buf_end		1010890	0		<			
ANR	1011635	Identifier	buf_ptr		1010890	0					
ANR	1011636	Identifier	buf_end		1010890	1					
ANR	1011637	CompoundStatement		161:28:4764:4764	1010890	1					
ANR	1011638	IfStatement	"if ( SLJIT_UNLIKELY ( resolve_const_pool_index ( compiler , & first_patch , cpool_current_index , cpool_start_address , buf_ptr ) ) )"		1010890	0					
ANR	1011639	Condition	"SLJIT_UNLIKELY ( resolve_const_pool_index ( compiler , & first_patch , cpool_current_index , cpool_start_address , buf_ptr ) )"	718:7:21897:22011	1010890	0	True				
ANR	1011640	CallExpression	"SLJIT_UNLIKELY ( resolve_const_pool_index ( compiler , & first_patch , cpool_current_index , cpool_start_address , buf_ptr ) )"		1010890	0					
ANR	1011641	Callee	SLJIT_UNLIKELY		1010890	0					
ANR	1011642	Identifier	SLJIT_UNLIKELY		1010890	0					
ANR	1011643	ArgumentList	"resolve_const_pool_index ( compiler , & first_patch , cpool_current_index , cpool_start_address , buf_ptr )"		1010890	1					
ANR	1011644	Argument	"resolve_const_pool_index ( compiler , & first_patch , cpool_current_index , cpool_start_address , buf_ptr )"		1010890	0					
ANR	1011645	CallExpression	"resolve_const_pool_index ( compiler , & first_patch , cpool_current_index , cpool_start_address , buf_ptr )"		1010890	0					
ANR	1011646	Callee	resolve_const_pool_index		1010890	0					
ANR	1011647	Identifier	resolve_const_pool_index		1010890	0					
ANR	1011648	ArgumentList	compiler		1010890	1					
ANR	1011649	Argument	compiler		1010890	0					
ANR	1011650	Identifier	compiler		1010890	0					
ANR	1011651	Argument	& first_patch		1010890	1					
ANR	1011652	UnaryOperationExpression	& first_patch		1010890	0					
ANR	1011653	UnaryOperator	&		1010890	0					
ANR	1011654	Identifier	first_patch		1010890	1					
ANR	1011655	Argument	cpool_current_index		1010890	2					
ANR	1011656	Identifier	cpool_current_index		1010890	0					
ANR	1011657	Argument	cpool_start_address		1010890	3					
ANR	1011658	Identifier	cpool_start_address		1010890	0					
ANR	1011659	Argument	buf_ptr		1010890	4					
ANR	1011660	Identifier	buf_ptr		1010890	0					
ANR	1011661	CompoundStatement		162:124:4890:4890	1010890	1					
ANR	1011662	ExpressionStatement	SLJIT_FREE_EXEC ( code )	719:4:22020:22041	1010890	0	True				
ANR	1011663	CallExpression	SLJIT_FREE_EXEC ( code )		1010890	0					
ANR	1011664	Callee	SLJIT_FREE_EXEC		1010890	0					
ANR	1011665	Identifier	SLJIT_FREE_EXEC		1010890	0					
ANR	1011666	ArgumentList	code		1010890	1					
ANR	1011667	Argument	code		1010890	0					
ANR	1011668	Identifier	code		1010890	0					
ANR	1011669	ExpressionStatement	compiler -> error = SLJIT_ERR_ALLOC_FAILED	720:4:22047:22087	1010890	1	True				
ANR	1011670	AssignmentExpression	compiler -> error = SLJIT_ERR_ALLOC_FAILED		1010890	0		=			
ANR	1011671	PtrMemberAccess	compiler -> error		1010890	0					
ANR	1011672	Identifier	compiler		1010890	0					
ANR	1011673	Identifier	error		1010890	1					
ANR	1011674	Identifier	SLJIT_ERR_ALLOC_FAILED		1010890	1					
ANR	1011675	ReturnStatement	return NULL ;	721:4:22093:22104	1010890	2	True				
ANR	1011676	Identifier	NULL		1010890	0					
ANR	1011677	ExpressionStatement	buf_ptr ++	723:3:22114:22123	1010890	1	True				
ANR	1011678	PostIncDecOperationExpression	buf_ptr ++		1010890	0					
ANR	1011679	Identifier	buf_ptr		1010890	0					
ANR	1011680	IncDec	++		1010890	1					
ANR	1011681	ExpressionStatement	cpool_current_index ++	724:3:22128:22149	1010890	2	True				
ANR	1011682	PostIncDecOperationExpression	cpool_current_index ++		1010890	0					
ANR	1011683	Identifier	cpool_current_index		1010890	0					
ANR	1011684	IncDec	++		1010890	1					
ANR	1011685	ExpressionStatement	SLJIT_ASSERT ( ! first_patch )	726:2:22157:22183	1010890	7	True				
ANR	1011686	CallExpression	SLJIT_ASSERT ( ! first_patch )		1010890	0					
ANR	1011687	Callee	SLJIT_ASSERT		1010890	0					
ANR	1011688	Identifier	SLJIT_ASSERT		1010890	0					
ANR	1011689	ArgumentList	! first_patch		1010890	1					
ANR	1011690	Argument	! first_patch		1010890	0					
ANR	1011691	UnaryOperationExpression	! first_patch		1010890	0					
ANR	1011692	UnaryOperator	!		1010890	0					
ANR	1011693	Identifier	first_patch		1010890	1					
ANR	1011694	ExpressionStatement	jump = compiler -> jumps	730:1:22197:22219	1010890	42	True				
ANR	1011695	AssignmentExpression	jump = compiler -> jumps		1010890	0		=			
ANR	1011696	Identifier	jump		1010890	0					
ANR	1011697	PtrMemberAccess	compiler -> jumps		1010890	1					
ANR	1011698	Identifier	compiler		1010890	0					
ANR	1011699	Identifier	jumps		1010890	1					
ANR	1011700	WhileStatement	while ( jump )		1010890	43					
ANR	1011701	Condition	jump	731:8:22229:22232	1010890	0	True				
ANR	1011702	Identifier	jump		1010890	0					
ANR	1011703	CompoundStatement		175:14:5111:5111	1010890	1					
ANR	1011704	ExpressionStatement	buf_ptr = ( sljit_uw * ) jump -> addr	732:2:22239:22270	1010890	0	True				
ANR	1011705	AssignmentExpression	buf_ptr = ( sljit_uw * ) jump -> addr		1010890	0		=			
ANR	1011706	Identifier	buf_ptr		1010890	0					
ANR	1011707	CastExpression	( sljit_uw * ) jump -> addr		1010890	1					
ANR	1011708	CastTarget	sljit_uw *		1010890	0					
ANR	1011709	PtrMemberAccess	jump -> addr		1010890	1					
ANR	1011710	Identifier	jump		1010890	0					
ANR	1011711	Identifier	addr		1010890	1					
ANR	1011712	IfStatement	if ( jump -> flags & PATCH_B )		1010890	1					
ANR	1011713	Condition	jump -> flags & PATCH_B	734:6:22279:22299	1010890	0	True				
ANR	1011714	BitAndExpression	jump -> flags & PATCH_B		1010890	0		&			
ANR	1011715	PtrMemberAccess	jump -> flags		1010890	0					
ANR	1011716	Identifier	jump		1010890	0					
ANR	1011717	Identifier	flags		1010890	1					
ANR	1011718	Identifier	PATCH_B		1010890	1					
ANR	1011719	CompoundStatement		178:29:5178:5178	1010890	1					
ANR	1011720	IfStatement	if ( ! ( jump -> flags & JUMP_ADDR ) )		1010890	0					
ANR	1011721	Condition	! ( jump -> flags & JUMP_ADDR )	735:7:22311:22336	1010890	0	True				
ANR	1011722	UnaryOperationExpression	! ( jump -> flags & JUMP_ADDR )		1010890	0					
ANR	1011723	UnaryOperator	!		1010890	0					
ANR	1011724	BitAndExpression	jump -> flags & JUMP_ADDR		1010890	1		&			
ANR	1011725	PtrMemberAccess	jump -> flags		1010890	0					
ANR	1011726	Identifier	jump		1010890	0					
ANR	1011727	Identifier	flags		1010890	1					
ANR	1011728	Identifier	JUMP_ADDR		1010890	1					
ANR	1011729	CompoundStatement		179:35:5215:5215	1010890	1					
ANR	1011730	ExpressionStatement	SLJIT_ASSERT ( jump -> flags & JUMP_LABEL )	736:4:22345:22383	1010890	0	True				
ANR	1011731	CallExpression	SLJIT_ASSERT ( jump -> flags & JUMP_LABEL )		1010890	0					
ANR	1011732	Callee	SLJIT_ASSERT		1010890	0					
ANR	1011733	Identifier	SLJIT_ASSERT		1010890	0					
ANR	1011734	ArgumentList	jump -> flags & JUMP_LABEL		1010890	1					
ANR	1011735	Argument	jump -> flags & JUMP_LABEL		1010890	0					
ANR	1011736	BitAndExpression	jump -> flags & JUMP_LABEL		1010890	0		&			
ANR	1011737	PtrMemberAccess	jump -> flags		1010890	0					
ANR	1011738	Identifier	jump		1010890	0					
ANR	1011739	Identifier	flags		1010890	1					
ANR	1011740	Identifier	JUMP_LABEL		1010890	1					
ANR	1011741	ExpressionStatement	SLJIT_ASSERT ( ( ( sljit_sw ) jump -> u . label -> addr - ( sljit_sw ) ( buf_ptr + 2 ) ) <= 0x01ffffff && ( ( sljit_sw ) jump -> u . label -> addr - ( sljit_sw ) ( buf_ptr + 2 ) ) >= - 0x02000000 )	737:4:22389:22550	1010890	1	True				
ANR	1011742	CallExpression	SLJIT_ASSERT ( ( ( sljit_sw ) jump -> u . label -> addr - ( sljit_sw ) ( buf_ptr + 2 ) ) <= 0x01ffffff && ( ( sljit_sw ) jump -> u . label -> addr - ( sljit_sw ) ( buf_ptr + 2 ) ) >= - 0x02000000 )		1010890	0					
ANR	1011743	Callee	SLJIT_ASSERT		1010890	0					
ANR	1011744	Identifier	SLJIT_ASSERT		1010890	0					
ANR	1011745	ArgumentList	( ( sljit_sw ) jump -> u . label -> addr - ( sljit_sw ) ( buf_ptr + 2 ) ) <= 0x01ffffff && ( ( sljit_sw ) jump -> u . label -> addr - ( sljit_sw ) ( buf_ptr + 2 ) ) >= - 0x02000000		1010890	1					
ANR	1011746	Argument	( ( sljit_sw ) jump -> u . label -> addr - ( sljit_sw ) ( buf_ptr + 2 ) ) <= 0x01ffffff && ( ( sljit_sw ) jump -> u . label -> addr - ( sljit_sw ) ( buf_ptr + 2 ) ) >= - 0x02000000		1010890	0					
ANR	1011747	AndExpression	( ( sljit_sw ) jump -> u . label -> addr - ( sljit_sw ) ( buf_ptr + 2 ) ) <= 0x01ffffff && ( ( sljit_sw ) jump -> u . label -> addr - ( sljit_sw ) ( buf_ptr + 2 ) ) >= - 0x02000000		1010890	0		&&			
ANR	1011748	RelationalExpression	( ( sljit_sw ) jump -> u . label -> addr - ( sljit_sw ) ( buf_ptr + 2 ) ) <= 0x01ffffff		1010890	0		<=			
ANR	1011749	AdditiveExpression	( sljit_sw ) jump -> u . label -> addr - ( sljit_sw ) ( buf_ptr + 2 )		1010890	0		-			
ANR	1011750	CastExpression	( sljit_sw ) jump -> u . label -> addr		1010890	0					
ANR	1011751	CastTarget	sljit_sw		1010890	0					
ANR	1011752	PtrMemberAccess	jump -> u . label -> addr		1010890	1					
ANR	1011753	MemberAccess	jump -> u . label		1010890	0					
ANR	1011754	PtrMemberAccess	jump -> u		1010890	0					
ANR	1011755	Identifier	jump		1010890	0					
ANR	1011756	Identifier	u		1010890	1					
ANR	1011757	Identifier	label		1010890	1					
ANR	1011758	Identifier	addr		1010890	1					
ANR	1011759	CastExpression	( sljit_sw ) ( buf_ptr + 2 )		1010890	1					
ANR	1011760	CastTarget	sljit_sw		1010890	0					
ANR	1011761	AdditiveExpression	buf_ptr + 2		1010890	1		+			
ANR	1011762	Identifier	buf_ptr		1010890	0					
ANR	1011763	PrimaryExpression	2		1010890	1					
ANR	1011764	PrimaryExpression	0x01ffffff		1010890	1					
ANR	1011765	RelationalExpression	( ( sljit_sw ) jump -> u . label -> addr - ( sljit_sw ) ( buf_ptr + 2 ) ) >= - 0x02000000		1010890	1		>=			
ANR	1011766	AdditiveExpression	( sljit_sw ) jump -> u . label -> addr - ( sljit_sw ) ( buf_ptr + 2 )		1010890	0		-			
ANR	1011767	CastExpression	( sljit_sw ) jump -> u . label -> addr		1010890	0					
ANR	1011768	CastTarget	sljit_sw		1010890	0					
ANR	1011769	PtrMemberAccess	jump -> u . label -> addr		1010890	1					
ANR	1011770	MemberAccess	jump -> u . label		1010890	0					
ANR	1011771	PtrMemberAccess	jump -> u		1010890	0					
ANR	1011772	Identifier	jump		1010890	0					
ANR	1011773	Identifier	u		1010890	1					
ANR	1011774	Identifier	label		1010890	1					
ANR	1011775	Identifier	addr		1010890	1					
ANR	1011776	CastExpression	( sljit_sw ) ( buf_ptr + 2 )		1010890	1					
ANR	1011777	CastTarget	sljit_sw		1010890	0					
ANR	1011778	AdditiveExpression	buf_ptr + 2		1010890	1		+			
ANR	1011779	Identifier	buf_ptr		1010890	0					
ANR	1011780	PrimaryExpression	2		1010890	1					
ANR	1011781	UnaryOperationExpression	- 0x02000000		1010890	1					
ANR	1011782	UnaryOperator	-		1010890	0					
ANR	1011783	PrimaryExpression	0x02000000		1010890	1					
ANR	1011784	ExpressionStatement	* buf_ptr |= ( ( ( sljit_sw ) jump -> u . label -> addr - ( sljit_sw ) ( buf_ptr + 2 ) ) >> 2 ) & 0x00ffffff	738:4:22556:22645	1010890	2	True				
ANR	1011785	AssignmentExpression	* buf_ptr |= ( ( ( sljit_sw ) jump -> u . label -> addr - ( sljit_sw ) ( buf_ptr + 2 ) ) >> 2 ) & 0x00ffffff		1010890	0		|=			
ANR	1011786	UnaryOperationExpression	* buf_ptr		1010890	0					
ANR	1011787	UnaryOperator	*		1010890	0					
ANR	1011788	Identifier	buf_ptr		1010890	1					
ANR	1011789	BitAndExpression	( ( ( sljit_sw ) jump -> u . label -> addr - ( sljit_sw ) ( buf_ptr + 2 ) ) >> 2 ) & 0x00ffffff		1010890	1		&			
ANR	1011790	ShiftExpression	( ( sljit_sw ) jump -> u . label -> addr - ( sljit_sw ) ( buf_ptr + 2 ) ) >> 2		1010890	0		>>			
ANR	1011791	AdditiveExpression	( sljit_sw ) jump -> u . label -> addr - ( sljit_sw ) ( buf_ptr + 2 )		1010890	0		-			
ANR	1011792	CastExpression	( sljit_sw ) jump -> u . label -> addr		1010890	0					
ANR	1011793	CastTarget	sljit_sw		1010890	0					
ANR	1011794	PtrMemberAccess	jump -> u . label -> addr		1010890	1					
ANR	1011795	MemberAccess	jump -> u . label		1010890	0					
ANR	1011796	PtrMemberAccess	jump -> u		1010890	0					
ANR	1011797	Identifier	jump		1010890	0					
ANR	1011798	Identifier	u		1010890	1					
ANR	1011799	Identifier	label		1010890	1					
ANR	1011800	Identifier	addr		1010890	1					
ANR	1011801	CastExpression	( sljit_sw ) ( buf_ptr + 2 )		1010890	1					
ANR	1011802	CastTarget	sljit_sw		1010890	0					
ANR	1011803	AdditiveExpression	buf_ptr + 2		1010890	1		+			
ANR	1011804	Identifier	buf_ptr		1010890	0					
ANR	1011805	PrimaryExpression	2		1010890	1					
ANR	1011806	PrimaryExpression	2		1010890	1					
ANR	1011807	PrimaryExpression	0x00ffffff		1010890	1					
ANR	1011808	ElseStatement	else		1010890	0					
ANR	1011809	CompoundStatement		184:8:5536:5536	1010890	0					
ANR	1011810	ExpressionStatement	SLJIT_ASSERT ( ( ( sljit_sw ) jump -> u . target - ( sljit_sw ) ( buf_ptr + 2 ) ) <= 0x01ffffff && ( ( sljit_sw ) jump -> u . target - ( sljit_sw ) ( buf_ptr + 2 ) ) >= - 0x02000000 )	741:4:22666:22817	1010890	0	True				
ANR	1011811	CallExpression	SLJIT_ASSERT ( ( ( sljit_sw ) jump -> u . target - ( sljit_sw ) ( buf_ptr + 2 ) ) <= 0x01ffffff && ( ( sljit_sw ) jump -> u . target - ( sljit_sw ) ( buf_ptr + 2 ) ) >= - 0x02000000 )		1010890	0					
ANR	1011812	Callee	SLJIT_ASSERT		1010890	0					
ANR	1011813	Identifier	SLJIT_ASSERT		1010890	0					
ANR	1011814	ArgumentList	( ( sljit_sw ) jump -> u . target - ( sljit_sw ) ( buf_ptr + 2 ) ) <= 0x01ffffff && ( ( sljit_sw ) jump -> u . target - ( sljit_sw ) ( buf_ptr + 2 ) ) >= - 0x02000000		1010890	1					
ANR	1011815	Argument	( ( sljit_sw ) jump -> u . target - ( sljit_sw ) ( buf_ptr + 2 ) ) <= 0x01ffffff && ( ( sljit_sw ) jump -> u . target - ( sljit_sw ) ( buf_ptr + 2 ) ) >= - 0x02000000		1010890	0					
ANR	1011816	AndExpression	( ( sljit_sw ) jump -> u . target - ( sljit_sw ) ( buf_ptr + 2 ) ) <= 0x01ffffff && ( ( sljit_sw ) jump -> u . target - ( sljit_sw ) ( buf_ptr + 2 ) ) >= - 0x02000000		1010890	0		&&			
ANR	1011817	RelationalExpression	( ( sljit_sw ) jump -> u . target - ( sljit_sw ) ( buf_ptr + 2 ) ) <= 0x01ffffff		1010890	0		<=			
ANR	1011818	AdditiveExpression	( sljit_sw ) jump -> u . target - ( sljit_sw ) ( buf_ptr + 2 )		1010890	0		-			
ANR	1011819	CastExpression	( sljit_sw ) jump -> u . target		1010890	0					
ANR	1011820	CastTarget	sljit_sw		1010890	0					
ANR	1011821	MemberAccess	jump -> u . target		1010890	1					
ANR	1011822	PtrMemberAccess	jump -> u		1010890	0					
ANR	1011823	Identifier	jump		1010890	0					
ANR	1011824	Identifier	u		1010890	1					
ANR	1011825	Identifier	target		1010890	1					
ANR	1011826	CastExpression	( sljit_sw ) ( buf_ptr + 2 )		1010890	1					
ANR	1011827	CastTarget	sljit_sw		1010890	0					
ANR	1011828	AdditiveExpression	buf_ptr + 2		1010890	1		+			
ANR	1011829	Identifier	buf_ptr		1010890	0					
ANR	1011830	PrimaryExpression	2		1010890	1					
ANR	1011831	PrimaryExpression	0x01ffffff		1010890	1					
ANR	1011832	RelationalExpression	( ( sljit_sw ) jump -> u . target - ( sljit_sw ) ( buf_ptr + 2 ) ) >= - 0x02000000		1010890	1		>=			
ANR	1011833	AdditiveExpression	( sljit_sw ) jump -> u . target - ( sljit_sw ) ( buf_ptr + 2 )		1010890	0		-			
ANR	1011834	CastExpression	( sljit_sw ) jump -> u . target		1010890	0					
ANR	1011835	CastTarget	sljit_sw		1010890	0					
ANR	1011836	MemberAccess	jump -> u . target		1010890	1					
ANR	1011837	PtrMemberAccess	jump -> u		1010890	0					
ANR	1011838	Identifier	jump		1010890	0					
ANR	1011839	Identifier	u		1010890	1					
ANR	1011840	Identifier	target		1010890	1					
ANR	1011841	CastExpression	( sljit_sw ) ( buf_ptr + 2 )		1010890	1					
ANR	1011842	CastTarget	sljit_sw		1010890	0					
ANR	1011843	AdditiveExpression	buf_ptr + 2		1010890	1		+			
ANR	1011844	Identifier	buf_ptr		1010890	0					
ANR	1011845	PrimaryExpression	2		1010890	1					
ANR	1011846	UnaryOperationExpression	- 0x02000000		1010890	1					
ANR	1011847	UnaryOperator	-		1010890	0					
ANR	1011848	PrimaryExpression	0x02000000		1010890	1					
ANR	1011849	ExpressionStatement	* buf_ptr |= ( ( ( sljit_sw ) jump -> u . target - ( sljit_sw ) ( buf_ptr + 2 ) ) >> 2 ) & 0x00ffffff	742:4:22823:22907	1010890	1	True				
ANR	1011850	AssignmentExpression	* buf_ptr |= ( ( ( sljit_sw ) jump -> u . target - ( sljit_sw ) ( buf_ptr + 2 ) ) >> 2 ) & 0x00ffffff		1010890	0		|=			
ANR	1011851	UnaryOperationExpression	* buf_ptr		1010890	0					
ANR	1011852	UnaryOperator	*		1010890	0					
ANR	1011853	Identifier	buf_ptr		1010890	1					
ANR	1011854	BitAndExpression	( ( ( sljit_sw ) jump -> u . target - ( sljit_sw ) ( buf_ptr + 2 ) ) >> 2 ) & 0x00ffffff		1010890	1		&			
ANR	1011855	ShiftExpression	( ( sljit_sw ) jump -> u . target - ( sljit_sw ) ( buf_ptr + 2 ) ) >> 2		1010890	0		>>			
ANR	1011856	AdditiveExpression	( sljit_sw ) jump -> u . target - ( sljit_sw ) ( buf_ptr + 2 )		1010890	0		-			
ANR	1011857	CastExpression	( sljit_sw ) jump -> u . target		1010890	0					
ANR	1011858	CastTarget	sljit_sw		1010890	0					
ANR	1011859	MemberAccess	jump -> u . target		1010890	1					
ANR	1011860	PtrMemberAccess	jump -> u		1010890	0					
ANR	1011861	Identifier	jump		1010890	0					
ANR	1011862	Identifier	u		1010890	1					
ANR	1011863	Identifier	target		1010890	1					
ANR	1011864	CastExpression	( sljit_sw ) ( buf_ptr + 2 )		1010890	1					
ANR	1011865	CastTarget	sljit_sw		1010890	0					
ANR	1011866	AdditiveExpression	buf_ptr + 2		1010890	1		+			
ANR	1011867	Identifier	buf_ptr		1010890	0					
ANR	1011868	PrimaryExpression	2		1010890	1					
ANR	1011869	PrimaryExpression	2		1010890	1					
ANR	1011870	PrimaryExpression	0x00ffffff		1010890	1					
ANR	1011871	ElseStatement	else		1010890	0					
ANR	1011872	IfStatement	if ( jump -> flags & SLJIT_REWRITABLE_JUMP )		1010890	0					
ANR	1011873	Condition	jump -> flags & SLJIT_REWRITABLE_JUMP	745:11:22929:22963	1010890	0	True				
ANR	1011874	BitAndExpression	jump -> flags & SLJIT_REWRITABLE_JUMP		1010890	0		&			
ANR	1011875	PtrMemberAccess	jump -> flags		1010890	0					
ANR	1011876	Identifier	jump		1010890	0					
ANR	1011877	Identifier	flags		1010890	1					
ANR	1011878	Identifier	SLJIT_REWRITABLE_JUMP		1010890	1					
ANR	1011879	CompoundStatement		189:48:5842:5842	1010890	1					
ANR	1011880	ExpressionStatement	jump -> addr = ( sljit_uw ) code_ptr	747:3:23028:23059	1010890	0	True				
ANR	1011881	AssignmentExpression	jump -> addr = ( sljit_uw ) code_ptr		1010890	0		=			
ANR	1011882	PtrMemberAccess	jump -> addr		1010890	0					
ANR	1011883	Identifier	jump		1010890	0					
ANR	1011884	Identifier	addr		1010890	1					
ANR	1011885	CastExpression	( sljit_uw ) code_ptr		1010890	1					
ANR	1011886	CastTarget	sljit_uw		1010890	0					
ANR	1011887	Identifier	code_ptr		1010890	1					
ANR	1011888	ExpressionStatement	code_ptr [ 0 ] = ( sljit_uw ) buf_ptr	748:3:23064:23095	1010890	1	True				
ANR	1011889	AssignmentExpression	code_ptr [ 0 ] = ( sljit_uw ) buf_ptr		1010890	0		=			
ANR	1011890	ArrayIndexing	code_ptr [ 0 ]		1010890	0					
ANR	1011891	Identifier	code_ptr		1010890	0					
ANR	1011892	PrimaryExpression	0		1010890	1					
ANR	1011893	CastExpression	( sljit_uw ) buf_ptr		1010890	1					
ANR	1011894	CastTarget	sljit_uw		1010890	0					
ANR	1011895	Identifier	buf_ptr		1010890	1					
ANR	1011896	ExpressionStatement	code_ptr [ 1 ] = * buf_ptr	749:3:23100:23122	1010890	2	True				
ANR	1011897	AssignmentExpression	code_ptr [ 1 ] = * buf_ptr		1010890	0		=			
ANR	1011898	ArrayIndexing	code_ptr [ 1 ]		1010890	0					
ANR	1011899	Identifier	code_ptr		1010890	0					
ANR	1011900	PrimaryExpression	1		1010890	1					
ANR	1011901	UnaryOperationExpression	* buf_ptr		1010890	1					
ANR	1011902	UnaryOperator	*		1010890	0					
ANR	1011903	Identifier	buf_ptr		1010890	1					
ANR	1011904	ExpressionStatement	"inline_set_jump_addr ( ( sljit_uw ) code_ptr , ( jump -> flags & JUMP_LABEL ) ? jump -> u . label -> addr : jump -> u . target , 0 )"	750:3:23127:23237	1010890	3	True				
ANR	1011905	CallExpression	"inline_set_jump_addr ( ( sljit_uw ) code_ptr , ( jump -> flags & JUMP_LABEL ) ? jump -> u . label -> addr : jump -> u . target , 0 )"		1010890	0					
ANR	1011906	Callee	inline_set_jump_addr		1010890	0					
ANR	1011907	Identifier	inline_set_jump_addr		1010890	0					
ANR	1011908	ArgumentList	( sljit_uw ) code_ptr		1010890	1					
ANR	1011909	Argument	( sljit_uw ) code_ptr		1010890	0					
ANR	1011910	CastExpression	( sljit_uw ) code_ptr		1010890	0					
ANR	1011911	CastTarget	sljit_uw		1010890	0					
ANR	1011912	Identifier	code_ptr		1010890	1					
ANR	1011913	Argument	( jump -> flags & JUMP_LABEL ) ? jump -> u . label -> addr : jump -> u . target		1010890	1					
ANR	1011914	ConditionalExpression	( jump -> flags & JUMP_LABEL ) ? jump -> u . label -> addr : jump -> u . target		1010890	0					
ANR	1011915	Condition	jump -> flags & JUMP_LABEL		1010890	0					
ANR	1011916	BitAndExpression	jump -> flags & JUMP_LABEL		1010890	0		&			
ANR	1011917	PtrMemberAccess	jump -> flags		1010890	0					
ANR	1011918	Identifier	jump		1010890	0					
ANR	1011919	Identifier	flags		1010890	1					
ANR	1011920	Identifier	JUMP_LABEL		1010890	1					
ANR	1011921	PtrMemberAccess	jump -> u . label -> addr		1010890	1					
ANR	1011922	MemberAccess	jump -> u . label		1010890	0					
ANR	1011923	PtrMemberAccess	jump -> u		1010890	0					
ANR	1011924	Identifier	jump		1010890	0					
ANR	1011925	Identifier	u		1010890	1					
ANR	1011926	Identifier	label		1010890	1					
ANR	1011927	Identifier	addr		1010890	1					
ANR	1011928	MemberAccess	jump -> u . target		1010890	2					
ANR	1011929	PtrMemberAccess	jump -> u		1010890	0					
ANR	1011930	Identifier	jump		1010890	0					
ANR	1011931	Identifier	u		1010890	1					
ANR	1011932	Identifier	target		1010890	1					
ANR	1011933	Argument	0		1010890	2					
ANR	1011934	PrimaryExpression	0		1010890	0					
ANR	1011935	ExpressionStatement	code_ptr += 2	751:3:23242:23255	1010890	4	True				
ANR	1011936	AssignmentExpression	code_ptr += 2		1010890	0		+=			
ANR	1011937	Identifier	code_ptr		1010890	0					
ANR	1011938	PrimaryExpression	2		1010890	1					
ANR	1011939	ElseStatement	else		1010890	0					
ANR	1011940	CompoundStatement		200:7:6271:6271	1010890	0					
ANR	1011941	IfStatement	if ( jump -> flags & IS_BL )		1010890	0					
ANR	1011942	Condition	jump -> flags & IS_BL	758:7:23461:23479	1010890	0	True				
ANR	1011943	BitAndExpression	jump -> flags & IS_BL		1010890	0		&			
ANR	1011944	PtrMemberAccess	jump -> flags		1010890	0					
ANR	1011945	Identifier	jump		1010890	0					
ANR	1011946	Identifier	flags		1010890	1					
ANR	1011947	Identifier	IS_BL		1010890	1					
ANR	1011948	ExpressionStatement	buf_ptr --	759:4:23486:23495	1010890	1	True				
ANR	1011949	PostIncDecOperationExpression	buf_ptr --		1010890	0					
ANR	1011950	Identifier	buf_ptr		1010890	0					
ANR	1011951	IncDec	--		1010890	1					
ANR	1011952	IfStatement	if ( * buf_ptr & ( 1 << 23 ) )		1010890	1					
ANR	1011953	Condition	* buf_ptr & ( 1 << 23 )	760:7:23504:23523	1010890	0	True				
ANR	1011954	BitAndExpression	* buf_ptr & ( 1 << 23 )		1010890	0		&			
ANR	1011955	UnaryOperationExpression	* buf_ptr		1010890	0					
ANR	1011956	UnaryOperator	*		1010890	0					
ANR	1011957	Identifier	buf_ptr		1010890	1					
ANR	1011958	ShiftExpression	1 << 23		1010890	1		<<			
ANR	1011959	PrimaryExpression	1		1010890	0					
ANR	1011960	PrimaryExpression	23		1010890	1					
ANR	1011961	ExpressionStatement	buf_ptr += ( ( * buf_ptr & 0xfff ) >> 2 ) + 2	761:4:23530:23570	1010890	1	True				
ANR	1011962	AssignmentExpression	buf_ptr += ( ( * buf_ptr & 0xfff ) >> 2 ) + 2		1010890	0		+=			
ANR	1011963	Identifier	buf_ptr		1010890	0					
ANR	1011964	AdditiveExpression	( ( * buf_ptr & 0xfff ) >> 2 ) + 2		1010890	1		+			
ANR	1011965	ShiftExpression	( * buf_ptr & 0xfff ) >> 2		1010890	0		>>			
ANR	1011966	BitAndExpression	* buf_ptr & 0xfff		1010890	0		&			
ANR	1011967	UnaryOperationExpression	* buf_ptr		1010890	0					
ANR	1011968	UnaryOperator	*		1010890	0					
ANR	1011969	Identifier	buf_ptr		1010890	1					
ANR	1011970	PrimaryExpression	0xfff		1010890	1					
ANR	1011971	PrimaryExpression	2		1010890	1					
ANR	1011972	PrimaryExpression	2		1010890	1					
ANR	1011973	ElseStatement	else		1010890	0					
ANR	1011974	ExpressionStatement	buf_ptr += 1	763:4:23584:23596	1010890	0	True				
ANR	1011975	AssignmentExpression	buf_ptr += 1		1010890	0		+=			
ANR	1011976	Identifier	buf_ptr		1010890	0					
ANR	1011977	PrimaryExpression	1		1010890	1					
ANR	1011978	ExpressionStatement	* buf_ptr = ( jump -> flags & JUMP_LABEL ) ? jump -> u . label -> addr : jump -> u . target	764:3:23601:23677	1010890	2	True				
ANR	1011979	AssignmentExpression	* buf_ptr = ( jump -> flags & JUMP_LABEL ) ? jump -> u . label -> addr : jump -> u . target		1010890	0		=			
ANR	1011980	UnaryOperationExpression	* buf_ptr		1010890	0					
ANR	1011981	UnaryOperator	*		1010890	0					
ANR	1011982	Identifier	buf_ptr		1010890	1					
ANR	1011983	ConditionalExpression	( jump -> flags & JUMP_LABEL ) ? jump -> u . label -> addr : jump -> u . target		1010890	1					
ANR	1011984	Condition	jump -> flags & JUMP_LABEL		1010890	0					
ANR	1011985	BitAndExpression	jump -> flags & JUMP_LABEL		1010890	0		&			
ANR	1011986	PtrMemberAccess	jump -> flags		1010890	0					
ANR	1011987	Identifier	jump		1010890	0					
ANR	1011988	Identifier	flags		1010890	1					
ANR	1011989	Identifier	JUMP_LABEL		1010890	1					
ANR	1011990	PtrMemberAccess	jump -> u . label -> addr		1010890	1					
ANR	1011991	MemberAccess	jump -> u . label		1010890	0					
ANR	1011992	PtrMemberAccess	jump -> u		1010890	0					
ANR	1011993	Identifier	jump		1010890	0					
ANR	1011994	Identifier	u		1010890	1					
ANR	1011995	Identifier	label		1010890	1					
ANR	1011996	Identifier	addr		1010890	1					
ANR	1011997	MemberAccess	jump -> u . target		1010890	2					
ANR	1011998	PtrMemberAccess	jump -> u		1010890	0					
ANR	1011999	Identifier	jump		1010890	0					
ANR	1012000	Identifier	u		1010890	1					
ANR	1012001	Identifier	target		1010890	1					
ANR	1012002	ExpressionStatement	jump = jump -> next	769:2:23812:23829	1010890	2	True				
ANR	1012003	AssignmentExpression	jump = jump -> next		1010890	0		=			
ANR	1012004	Identifier	jump		1010890	0					
ANR	1012005	PtrMemberAccess	jump -> next		1010890	1					
ANR	1012006	Identifier	jump		1010890	0					
ANR	1012007	Identifier	next		1010890	1					
ANR	1012008	ExpressionStatement	const_ = compiler -> consts	773:1:23893:23918	1010890	44	True				
ANR	1012009	AssignmentExpression	const_ = compiler -> consts		1010890	0		=			
ANR	1012010	Identifier	const_		1010890	0					
ANR	1012011	PtrMemberAccess	compiler -> consts		1010890	1					
ANR	1012012	Identifier	compiler		1010890	0					
ANR	1012013	Identifier	consts		1010890	1					
ANR	1012014	WhileStatement	while ( const_ )		1010890	45					
ANR	1012015	Condition	const_	774:8:23928:23933	1010890	0	True				
ANR	1012016	Identifier	const_		1010890	0					
ANR	1012017	CompoundStatement		218:16:6812:6812	1010890	1					
ANR	1012018	ExpressionStatement	buf_ptr = ( sljit_uw * ) const_ -> addr	775:2:23940:23973	1010890	0	True				
ANR	1012019	AssignmentExpression	buf_ptr = ( sljit_uw * ) const_ -> addr		1010890	0		=			
ANR	1012020	Identifier	buf_ptr		1010890	0					
ANR	1012021	CastExpression	( sljit_uw * ) const_ -> addr		1010890	1					
ANR	1012022	CastTarget	sljit_uw *		1010890	0					
ANR	1012023	PtrMemberAccess	const_ -> addr		1010890	1					
ANR	1012024	Identifier	const_		1010890	0					
ANR	1012025	Identifier	addr		1010890	1					
ANR	1012026	ExpressionStatement	const_ -> addr = ( sljit_uw ) code_ptr	776:2:23977:24010	1010890	1	True				
ANR	1012027	AssignmentExpression	const_ -> addr = ( sljit_uw ) code_ptr		1010890	0		=			
ANR	1012028	PtrMemberAccess	const_ -> addr		1010890	0					
ANR	1012029	Identifier	const_		1010890	0					
ANR	1012030	Identifier	addr		1010890	1					
ANR	1012031	CastExpression	( sljit_uw ) code_ptr		1010890	1					
ANR	1012032	CastTarget	sljit_uw		1010890	0					
ANR	1012033	Identifier	code_ptr		1010890	1					
ANR	1012034	ExpressionStatement	code_ptr [ 0 ] = ( sljit_uw ) buf_ptr	778:2:24015:24046	1010890	2	True				
ANR	1012035	AssignmentExpression	code_ptr [ 0 ] = ( sljit_uw ) buf_ptr		1010890	0		=			
ANR	1012036	ArrayIndexing	code_ptr [ 0 ]		1010890	0					
ANR	1012037	Identifier	code_ptr		1010890	0					
ANR	1012038	PrimaryExpression	0		1010890	1					
ANR	1012039	CastExpression	( sljit_uw ) buf_ptr		1010890	1					
ANR	1012040	CastTarget	sljit_uw		1010890	0					
ANR	1012041	Identifier	buf_ptr		1010890	1					
ANR	1012042	ExpressionStatement	code_ptr [ 1 ] = * buf_ptr	779:2:24050:24072	1010890	3	True				
ANR	1012043	AssignmentExpression	code_ptr [ 1 ] = * buf_ptr		1010890	0		=			
ANR	1012044	ArrayIndexing	code_ptr [ 1 ]		1010890	0					
ANR	1012045	Identifier	code_ptr		1010890	0					
ANR	1012046	PrimaryExpression	1		1010890	1					
ANR	1012047	UnaryOperationExpression	* buf_ptr		1010890	1					
ANR	1012048	UnaryOperator	*		1010890	0					
ANR	1012049	Identifier	buf_ptr		1010890	1					
ANR	1012050	IfStatement	if ( * buf_ptr & ( 1 << 23 ) )		1010890	4					
ANR	1012051	Condition	* buf_ptr & ( 1 << 23 )	780:6:24080:24099	1010890	0	True				
ANR	1012052	BitAndExpression	* buf_ptr & ( 1 << 23 )		1010890	0		&			
ANR	1012053	UnaryOperationExpression	* buf_ptr		1010890	0					
ANR	1012054	UnaryOperator	*		1010890	0					
ANR	1012055	Identifier	buf_ptr		1010890	1					
ANR	1012056	ShiftExpression	1 << 23		1010890	1		<<			
ANR	1012057	PrimaryExpression	1		1010890	0					
ANR	1012058	PrimaryExpression	23		1010890	1					
ANR	1012059	ExpressionStatement	buf_ptr += ( ( * buf_ptr & 0xfff ) >> 2 ) + 2	781:3:24105:24145	1010890	1	True				
ANR	1012060	AssignmentExpression	buf_ptr += ( ( * buf_ptr & 0xfff ) >> 2 ) + 2		1010890	0		+=			
ANR	1012061	Identifier	buf_ptr		1010890	0					
ANR	1012062	AdditiveExpression	( ( * buf_ptr & 0xfff ) >> 2 ) + 2		1010890	1		+			
ANR	1012063	ShiftExpression	( * buf_ptr & 0xfff ) >> 2		1010890	0		>>			
ANR	1012064	BitAndExpression	* buf_ptr & 0xfff		1010890	0		&			
ANR	1012065	UnaryOperationExpression	* buf_ptr		1010890	0					
ANR	1012066	UnaryOperator	*		1010890	0					
ANR	1012067	Identifier	buf_ptr		1010890	1					
ANR	1012068	PrimaryExpression	0xfff		1010890	1					
ANR	1012069	PrimaryExpression	2		1010890	1					
ANR	1012070	PrimaryExpression	2		1010890	1					
ANR	1012071	ElseStatement	else		1010890	0					
ANR	1012072	ExpressionStatement	buf_ptr += 1	783:3:24157:24169	1010890	0	True				
ANR	1012073	AssignmentExpression	buf_ptr += 1		1010890	0		+=			
ANR	1012074	Identifier	buf_ptr		1010890	0					
ANR	1012075	PrimaryExpression	1		1010890	1					
ANR	1012076	ExpressionStatement	"inline_set_const ( ( sljit_uw ) code_ptr , * buf_ptr , 0 )"	785:2:24229:24278	1010890	5	True				
ANR	1012077	CallExpression	"inline_set_const ( ( sljit_uw ) code_ptr , * buf_ptr , 0 )"		1010890	0					
ANR	1012078	Callee	inline_set_const		1010890	0					
ANR	1012079	Identifier	inline_set_const		1010890	0					
ANR	1012080	ArgumentList	( sljit_uw ) code_ptr		1010890	1					
ANR	1012081	Argument	( sljit_uw ) code_ptr		1010890	0					
ANR	1012082	CastExpression	( sljit_uw ) code_ptr		1010890	0					
ANR	1012083	CastTarget	sljit_uw		1010890	0					
ANR	1012084	Identifier	code_ptr		1010890	1					
ANR	1012085	Argument	* buf_ptr		1010890	1					
ANR	1012086	UnaryOperationExpression	* buf_ptr		1010890	0					
ANR	1012087	UnaryOperator	*		1010890	0					
ANR	1012088	Identifier	buf_ptr		1010890	1					
ANR	1012089	Argument	0		1010890	2					
ANR	1012090	PrimaryExpression	0		1010890	0					
ANR	1012091	ExpressionStatement	code_ptr += 2	786:2:24282:24295	1010890	6	True				
ANR	1012092	AssignmentExpression	code_ptr += 2		1010890	0		+=			
ANR	1012093	Identifier	code_ptr		1010890	0					
ANR	1012094	PrimaryExpression	2		1010890	1					
ANR	1012095	ExpressionStatement	const_ = const_ -> next	788:2:24300:24321	1010890	7	True				
ANR	1012096	AssignmentExpression	const_ = const_ -> next		1010890	0		=			
ANR	1012097	Identifier	const_		1010890	0					
ANR	1012098	PtrMemberAccess	const_ -> next		1010890	1					
ANR	1012099	Identifier	const_		1010890	0					
ANR	1012100	Identifier	next		1010890	1					
ANR	1012101	ExpressionStatement	SLJIT_ASSERT ( code_ptr - code <= ( sljit_si ) size )	792:1:24335:24382	1010890	46	True				
ANR	1012102	CallExpression	SLJIT_ASSERT ( code_ptr - code <= ( sljit_si ) size )		1010890	0					
ANR	1012103	Callee	SLJIT_ASSERT		1010890	0					
ANR	1012104	Identifier	SLJIT_ASSERT		1010890	0					
ANR	1012105	ArgumentList	code_ptr - code <= ( sljit_si ) size		1010890	1					
ANR	1012106	Argument	code_ptr - code <= ( sljit_si ) size		1010890	0					
ANR	1012107	RelationalExpression	code_ptr - code <= ( sljit_si ) size		1010890	0		<=			
ANR	1012108	AdditiveExpression	code_ptr - code		1010890	0		-			
ANR	1012109	Identifier	code_ptr		1010890	0					
ANR	1012110	Identifier	code		1010890	1					
ANR	1012111	CastExpression	( sljit_si ) size		1010890	1					
ANR	1012112	CastTarget	sljit_si		1010890	0					
ANR	1012113	Identifier	size		1010890	1					
ANR	1012114	ExpressionStatement	compiler -> error = SLJIT_ERR_COMPILED	794:1:24386:24422	1010890	47	True				
ANR	1012115	AssignmentExpression	compiler -> error = SLJIT_ERR_COMPILED		1010890	0		=			
ANR	1012116	PtrMemberAccess	compiler -> error		1010890	0					
ANR	1012117	Identifier	compiler		1010890	0					
ANR	1012118	Identifier	error		1010890	1					
ANR	1012119	Identifier	SLJIT_ERR_COMPILED		1010890	1					
ANR	1012120	ExpressionStatement	compiler -> executable_size = ( code_ptr - code ) * sizeof ( sljit_uw )	795:1:24425:24489	1010890	48	True				
ANR	1012121	AssignmentExpression	compiler -> executable_size = ( code_ptr - code ) * sizeof ( sljit_uw )		1010890	0		=			
ANR	1012122	PtrMemberAccess	compiler -> executable_size		1010890	0					
ANR	1012123	Identifier	compiler		1010890	0					
ANR	1012124	Identifier	executable_size		1010890	1					
ANR	1012125	MultiplicativeExpression	( code_ptr - code ) * sizeof ( sljit_uw )		1010890	1		*			
ANR	1012126	AdditiveExpression	code_ptr - code		1010890	0		-			
ANR	1012127	Identifier	code_ptr		1010890	0					
ANR	1012128	Identifier	code		1010890	1					
ANR	1012129	SizeofExpression	sizeof ( sljit_uw )		1010890	1					
ANR	1012130	Sizeof	sizeof		1010890	0					
ANR	1012131	SizeofOperand	sljit_uw		1010890	1					
ANR	1012132	ExpressionStatement	"SLJIT_CACHE_FLUSH ( code , code_ptr )"	796:1:24492:24525	1010890	49	True				
ANR	1012133	CallExpression	"SLJIT_CACHE_FLUSH ( code , code_ptr )"		1010890	0					
ANR	1012134	Callee	SLJIT_CACHE_FLUSH		1010890	0					
ANR	1012135	Identifier	SLJIT_CACHE_FLUSH		1010890	0					
ANR	1012136	ArgumentList	code		1010890	1					
ANR	1012137	Argument	code		1010890	0					
ANR	1012138	Identifier	code		1010890	0					
ANR	1012139	Argument	code_ptr		1010890	1					
ANR	1012140	Identifier	code_ptr		1010890	0					
ANR	1012141	ReturnStatement	return code ;	797:1:24528:24539	1010890	50	True				
ANR	1012142	Identifier	code		1010890	0					
ANR	1012143	ReturnType	SLJIT_API_FUNC_ATTRIBUTE void *		1010890	1					
ANR	1012144	Identifier	sljit_generate_code		1010890	2					
ANR	1012145	ParameterList	struct sljit_compiler * compiler		1010890	3					
ANR	1012146	Parameter	struct sljit_compiler * compiler	556:51:17090:17120	1010890	0	True				
ANR	1012147	ParameterType	struct sljit_compiler *		1010890	0					
ANR	1012148	Identifier	compiler		1010890	1					
ANR	1012149	CFGEntryNode	ENTRY		1010890		True				
ANR	1012150	CFGExitNode	EXIT		1010890		True				
ANR	1012151	Symbol	label -> addr		1010890						
ANR	1012152	Symbol	SLJIT_ERR_ALLOC_FAILED		1010890						
ANR	1012153	Symbol	last_pc_patch		1010890						
ANR	1012154	Symbol	compiler -> buf		1010890						
ANR	1012155	Symbol	compiler -> patches		1010890						
ANR	1012156	Symbol	SLJIT_MALLOC_EXEC		1010890						
ANR	1012157	Symbol	JUMP_LABEL		1010890						
ANR	1012158	Symbol	label -> next		1010890						
ANR	1012159	Symbol	cpool_start_address		1010890						
ANR	1012160	Symbol	* compiler		1010890						
ANR	1012161	Symbol	cpool_skip_alignment		1010890						
ANR	1012162	Symbol	const_ -> next		1010890						
ANR	1012163	Symbol	const_ -> addr		1010890						
ANR	1012164	Symbol	buf -> next		1010890						
ANR	1012165	Symbol	compiler -> cpool		1010890						
ANR	1012166	Symbol	buf_end		1010890						
ANR	1012167	Symbol	compiler -> executable_size		1010890						
ANR	1012168	Symbol	jump		1010890						
ANR	1012169	Symbol	buf -> used_size		1010890						
ANR	1012170	Symbol	check_sljit_generate_code		1010890						
ANR	1012171	Symbol	patch_pc_relative_loads		1010890						
ANR	1012172	Symbol	* buf		1010890						
ANR	1012173	Symbol	NULL		1010890						
ANR	1012174	Symbol	compiler -> labels		1010890						
ANR	1012175	Symbol	buf -> memory		1010890						
ANR	1012176	Symbol	detect_jump_type		1010890						
ANR	1012177	Symbol	PUSH_POOL		1010890						
ANR	1012178	Symbol	* buf_ptr ++		1010890						
ANR	1012179	Symbol	jump -> addr		1010890						
ANR	1012180	Symbol	CONST_POOL_ALIGNMENT		1010890						
ANR	1012181	Symbol	buf_ptr		1010890						
ANR	1012182	Symbol	& first_patch		1010890						
ANR	1012183	Symbol	* code_ptr		1010890						
ANR	1012184	Symbol	* jump -> u . label		1010890						
ANR	1012185	Symbol	size		1010890						
ANR	1012186	Symbol	jump -> u . target		1010890						
ANR	1012187	Symbol	compiler -> jumps		1010890						
ANR	1012188	Symbol	label -> size		1010890						
ANR	1012189	Symbol	jump -> next		1010890						
ANR	1012190	Symbol	ALIGN_INSTRUCTION		1010890						
ANR	1012191	Symbol	SLJIT_UNLIKELY		1010890						
ANR	1012192	Symbol	B		1010890						
ANR	1012193	Symbol	code		1010890						
ANR	1012194	Symbol	cpool_current_index		1010890						
ANR	1012195	Symbol	* * jump		1010890						
ANR	1012196	Symbol	* jump		1010890						
ANR	1012197	Symbol	jump -> u		1010890						
ANR	1012198	Symbol	cpool_size		1010890						
ANR	1012199	Symbol	jump -> flags		1010890						
ANR	1012200	Symbol	JUMP_ADDR		1010890						
ANR	1012201	Symbol	~PUSH_POOL		1010890						
ANR	1012202	Symbol	compiler -> cpool_fill		1010890						
ANR	1012203	Symbol	word_count		1010890						
ANR	1012204	Symbol	code_ptr		1010890						
ANR	1012205	Symbol	IS_BL		1010890						
ANR	1012206	Symbol	SLJIT_REWRITABLE_JUMP		1010890						
ANR	1012207	Symbol	compiler		1010890						
ANR	1012208	Symbol	first_patch		1010890						
ANR	1012209	Symbol	* buf_ptr		1010890						
ANR	1012210	Symbol	const_		1010890						
ANR	1012211	Symbol	compiler -> consts		1010890						
ANR	1012212	Symbol	* const_		1010890						
ANR	1012213	Symbol	label		1010890						
ANR	1012214	Symbol	buf		1010890						
ANR	1012215	Symbol	compiler -> size		1010890						
ANR	1012216	Symbol	* jump -> u		1010890						
ANR	1012217	Symbol	resolve_const_pool_index		1010890						
ANR	1012218	Symbol	PATCH_B		1010890						
ANR	1012219	Symbol	jump -> u . label -> addr		1010890						
ANR	1012220	Symbol	jump -> u . label		1010890						
ANR	1012221	Symbol	compiler -> error		1010890						
ANR	1012222	Symbol	SLJIT_ERR_COMPILED		1010890						
ANR	1012223	Symbol	* label		1010890						
ANR	1012224	DeclStmt									
ANR	1012225	Decl							sljit_si	"sljit_si ( struct sljit_compiler * compiler , sljit_si op , sljit_si inp_flags , sljit_si dst , sljit_sw dstw , sljit_si src1 , sljit_sw src1w , sljit_si src2 , sljit_sw src2w )"	emit_op
ANR	1012226	Function	sljit_emit_enter	828:0:25522:27077							
ANR	1012227	FunctionDef	"sljit_emit_enter (struct sljit_compiler * compiler , sljit_si options , sljit_si args , sljit_si scratches , sljit_si saveds , sljit_si fscratches , sljit_si fsaveds , sljit_si local_size)"		1012226	0					
ANR	1012228	CompoundStatement		831:0:25738:27077	1012226	0					
ANR	1012229	IdentifierDeclStatement	"sljit_si size , i , tmp ;"	832:1:25741:25762	1012226	0	True				
ANR	1012230	IdentifierDecl	size		1012226	0					
ANR	1012231	IdentifierDeclType	sljit_si		1012226	0					
ANR	1012232	Identifier	size		1012226	1					
ANR	1012233	IdentifierDecl	i		1012226	1					
ANR	1012234	IdentifierDeclType	sljit_si		1012226	0					
ANR	1012235	Identifier	i		1012226	1					
ANR	1012236	IdentifierDecl	tmp		1012226	2					
ANR	1012237	IdentifierDeclType	sljit_si		1012226	0					
ANR	1012238	Identifier	tmp		1012226	1					
ANR	1012239	IdentifierDeclStatement	sljit_uw push ;	833:1:25765:25778	1012226	1	True				
ANR	1012240	IdentifierDecl	push		1012226	0					
ANR	1012241	IdentifierDeclType	sljit_uw		1012226	0					
ANR	1012242	Identifier	push		1012226	1					
ANR	1012243	ExpressionStatement	CHECK_ERROR ( )	835:1:25782:25795	1012226	2	True				
ANR	1012244	CallExpression	CHECK_ERROR ( )		1012226	0					
ANR	1012245	Callee	CHECK_ERROR		1012226	0					
ANR	1012246	Identifier	CHECK_ERROR		1012226	0					
ANR	1012247	ArgumentList			1012226	1					
ANR	1012248	ExpressionStatement	"CHECK ( check_sljit_emit_enter ( compiler , options , args , scratches , saveds , fscratches , fsaveds , local_size ) )"	836:1:25798:25904	1012226	3	True				
ANR	1012249	CallExpression	"CHECK ( check_sljit_emit_enter ( compiler , options , args , scratches , saveds , fscratches , fsaveds , local_size ) )"		1012226	0					
ANR	1012250	Callee	CHECK		1012226	0					
ANR	1012251	Identifier	CHECK		1012226	0					
ANR	1012252	ArgumentList	"check_sljit_emit_enter ( compiler , options , args , scratches , saveds , fscratches , fsaveds , local_size )"		1012226	1					
ANR	1012253	Argument	"check_sljit_emit_enter ( compiler , options , args , scratches , saveds , fscratches , fsaveds , local_size )"		1012226	0					
ANR	1012254	CallExpression	"check_sljit_emit_enter ( compiler , options , args , scratches , saveds , fscratches , fsaveds , local_size )"		1012226	0					
ANR	1012255	Callee	check_sljit_emit_enter		1012226	0					
ANR	1012256	Identifier	check_sljit_emit_enter		1012226	0					
ANR	1012257	ArgumentList	compiler		1012226	1					
ANR	1012258	Argument	compiler		1012226	0					
ANR	1012259	Identifier	compiler		1012226	0					
ANR	1012260	Argument	options		1012226	1					
ANR	1012261	Identifier	options		1012226	0					
ANR	1012262	Argument	args		1012226	2					
ANR	1012263	Identifier	args		1012226	0					
ANR	1012264	Argument	scratches		1012226	3					
ANR	1012265	Identifier	scratches		1012226	0					
ANR	1012266	Argument	saveds		1012226	4					
ANR	1012267	Identifier	saveds		1012226	0					
ANR	1012268	Argument	fscratches		1012226	5					
ANR	1012269	Identifier	fscratches		1012226	0					
ANR	1012270	Argument	fsaveds		1012226	6					
ANR	1012271	Identifier	fsaveds		1012226	0					
ANR	1012272	Argument	local_size		1012226	7					
ANR	1012273	Identifier	local_size		1012226	0					
ANR	1012274	ExpressionStatement	"set_emit_enter ( compiler , options , args , scratches , saveds , fscratches , fsaveds , local_size )"	837:1:25907:25998	1012226	4	True				
ANR	1012275	CallExpression	"set_emit_enter ( compiler , options , args , scratches , saveds , fscratches , fsaveds , local_size )"		1012226	0					
ANR	1012276	Callee	set_emit_enter		1012226	0					
ANR	1012277	Identifier	set_emit_enter		1012226	0					
ANR	1012278	ArgumentList	compiler		1012226	1					
ANR	1012279	Argument	compiler		1012226	0					
ANR	1012280	Identifier	compiler		1012226	0					
ANR	1012281	Argument	options		1012226	1					
ANR	1012282	Identifier	options		1012226	0					
ANR	1012283	Argument	args		1012226	2					
ANR	1012284	Identifier	args		1012226	0					
ANR	1012285	Argument	scratches		1012226	3					
ANR	1012286	Identifier	scratches		1012226	0					
ANR	1012287	Argument	saveds		1012226	4					
ANR	1012288	Identifier	saveds		1012226	0					
ANR	1012289	Argument	fscratches		1012226	5					
ANR	1012290	Identifier	fscratches		1012226	0					
ANR	1012291	Argument	fsaveds		1012226	6					
ANR	1012292	Identifier	fsaveds		1012226	0					
ANR	1012293	Argument	local_size		1012226	7					
ANR	1012294	Identifier	local_size		1012226	0					
ANR	1012295	ExpressionStatement	push = PUSH | ( 1 << 14 )	841:1:26076:26099	1012226	5	True				
ANR	1012296	AssignmentExpression	push = PUSH | ( 1 << 14 )		1012226	0		=			
ANR	1012297	Identifier	push		1012226	0					
ANR	1012298	InclusiveOrExpression	PUSH | ( 1 << 14 )		1012226	1		|			
ANR	1012299	Identifier	PUSH		1012226	0					
ANR	1012300	ShiftExpression	1 << 14		1012226	1		<<			
ANR	1012301	PrimaryExpression	1		1012226	0					
ANR	1012302	PrimaryExpression	14		1012226	1					
ANR	1012303	ExpressionStatement	tmp = saveds < SLJIT_NUMBER_OF_SAVED_REGISTERS ? ( SLJIT_S0 + 1 - saveds ) : SLJIT_FIRST_SAVED_REG	843:1:26103:26199	1012226	6	True				
ANR	1012304	AssignmentExpression	tmp = saveds < SLJIT_NUMBER_OF_SAVED_REGISTERS ? ( SLJIT_S0 + 1 - saveds ) : SLJIT_FIRST_SAVED_REG		1012226	0		=			
ANR	1012305	Identifier	tmp		1012226	0					
ANR	1012306	ConditionalExpression	saveds < SLJIT_NUMBER_OF_SAVED_REGISTERS ? ( SLJIT_S0 + 1 - saveds ) : SLJIT_FIRST_SAVED_REG		1012226	1					
ANR	1012307	Condition	saveds < SLJIT_NUMBER_OF_SAVED_REGISTERS		1012226	0					
ANR	1012308	RelationalExpression	saveds < SLJIT_NUMBER_OF_SAVED_REGISTERS		1012226	0		<			
ANR	1012309	Identifier	saveds		1012226	0					
ANR	1012310	Identifier	SLJIT_NUMBER_OF_SAVED_REGISTERS		1012226	1					
ANR	1012311	AdditiveExpression	SLJIT_S0 + 1 - saveds		1012226	1		+			
ANR	1012312	Identifier	SLJIT_S0		1012226	0					
ANR	1012313	AdditiveExpression	1 - saveds		1012226	1		-			
ANR	1012314	PrimaryExpression	1		1012226	0					
ANR	1012315	Identifier	saveds		1012226	1					
ANR	1012316	Identifier	SLJIT_FIRST_SAVED_REG		1012226	2					
ANR	1012317	ForStatement	for ( i = SLJIT_S0 ; i >= tmp ; i -- )		1012226	7					
ANR	1012318	ForInit	i = SLJIT_S0 ;	844:6:26207:26219	1012226	0	True				
ANR	1012319	AssignmentExpression	i = SLJIT_S0		1012226	0		=			
ANR	1012320	Identifier	i		1012226	0					
ANR	1012321	Identifier	SLJIT_S0		1012226	1					
ANR	1012322	Condition	i >= tmp	844:20:26221:26228	1012226	1	True				
ANR	1012323	RelationalExpression	i >= tmp		1012226	0		>=			
ANR	1012324	Identifier	i		1012226	0					
ANR	1012325	Identifier	tmp		1012226	1					
ANR	1012326	PostIncDecOperationExpression	i --	844:30:26231:26233	1012226	2	True				
ANR	1012327	Identifier	i		1012226	0					
ANR	1012328	IncDec	--		1012226	1					
ANR	1012329	ExpressionStatement	push |= 1 << reg_map [ i ]	845:2:26238:26261	1012226	3	True				
ANR	1012330	AssignmentExpression	push |= 1 << reg_map [ i ]		1012226	0		|=			
ANR	1012331	Identifier	push		1012226	0					
ANR	1012332	ShiftExpression	1 << reg_map [ i ]		1012226	1		<<			
ANR	1012333	PrimaryExpression	1		1012226	0					
ANR	1012334	ArrayIndexing	reg_map [ i ]		1012226	1					
ANR	1012335	Identifier	reg_map		1012226	0					
ANR	1012336	Identifier	i		1012226	1					
ANR	1012337	ForStatement	for ( i = scratches ; i >= SLJIT_FIRST_SAVED_REG ; i -- )		1012226	8					
ANR	1012338	ForInit	i = scratches ;	847:6:26270:26283	1012226	0	True				
ANR	1012339	AssignmentExpression	i = scratches		1012226	0		=			
ANR	1012340	Identifier	i		1012226	0					
ANR	1012341	Identifier	scratches		1012226	1					
ANR	1012342	Condition	i >= SLJIT_FIRST_SAVED_REG	847:21:26285:26310	1012226	1	True				
ANR	1012343	RelationalExpression	i >= SLJIT_FIRST_SAVED_REG		1012226	0		>=			
ANR	1012344	Identifier	i		1012226	0					
ANR	1012345	Identifier	SLJIT_FIRST_SAVED_REG		1012226	1					
ANR	1012346	PostIncDecOperationExpression	i --	847:49:26313:26315	1012226	2	True				
ANR	1012347	Identifier	i		1012226	0					
ANR	1012348	IncDec	--		1012226	1					
ANR	1012349	ExpressionStatement	push |= 1 << reg_map [ i ]	848:2:26320:26343	1012226	3	True				
ANR	1012350	AssignmentExpression	push |= 1 << reg_map [ i ]		1012226	0		|=			
ANR	1012351	Identifier	push		1012226	0					
ANR	1012352	ShiftExpression	1 << reg_map [ i ]		1012226	1		<<			
ANR	1012353	PrimaryExpression	1		1012226	0					
ANR	1012354	ArrayIndexing	reg_map [ i ]		1012226	1					
ANR	1012355	Identifier	reg_map		1012226	0					
ANR	1012356	Identifier	i		1012226	1					
ANR	1012357	ExpressionStatement	"FAIL_IF ( push_inst ( compiler , push ) )"	850:1:26347:26381	1012226	9	True				
ANR	1012358	CallExpression	"FAIL_IF ( push_inst ( compiler , push ) )"		1012226	0					
ANR	1012359	Callee	FAIL_IF		1012226	0					
ANR	1012360	Identifier	FAIL_IF		1012226	0					
ANR	1012361	ArgumentList	"push_inst ( compiler , push )"		1012226	1					
ANR	1012362	Argument	"push_inst ( compiler , push )"		1012226	0					
ANR	1012363	CallExpression	"push_inst ( compiler , push )"		1012226	0					
ANR	1012364	Callee	push_inst		1012226	0					
ANR	1012365	Identifier	push_inst		1012226	0					
ANR	1012366	ArgumentList	compiler		1012226	1					
ANR	1012367	Argument	compiler		1012226	0					
ANR	1012368	Identifier	compiler		1012226	0					
ANR	1012369	Argument	push		1012226	1					
ANR	1012370	Identifier	push		1012226	0					
ANR	1012371	ExpressionStatement	"size = GET_SAVED_REGISTERS_SIZE ( scratches , saveds , 1 )"	853:1:26426:26479	1012226	10	True				
ANR	1012372	AssignmentExpression	"size = GET_SAVED_REGISTERS_SIZE ( scratches , saveds , 1 )"		1012226	0		=			
ANR	1012373	Identifier	size		1012226	0					
ANR	1012374	CallExpression	"GET_SAVED_REGISTERS_SIZE ( scratches , saveds , 1 )"		1012226	1					
ANR	1012375	Callee	GET_SAVED_REGISTERS_SIZE		1012226	0					
ANR	1012376	Identifier	GET_SAVED_REGISTERS_SIZE		1012226	0					
ANR	1012377	ArgumentList	scratches		1012226	1					
ANR	1012378	Argument	scratches		1012226	0					
ANR	1012379	Identifier	scratches		1012226	0					
ANR	1012380	Argument	saveds		1012226	1					
ANR	1012381	Identifier	saveds		1012226	0					
ANR	1012382	Argument	1		1012226	2					
ANR	1012383	PrimaryExpression	1		1012226	0					
ANR	1012384	ExpressionStatement	local_size = ( ( size + local_size + 7 ) & ~7 ) - size	854:1:26482:26532	1012226	11	True				
ANR	1012385	AssignmentExpression	local_size = ( ( size + local_size + 7 ) & ~7 ) - size		1012226	0		=			
ANR	1012386	Identifier	local_size		1012226	0					
ANR	1012387	AdditiveExpression	( ( size + local_size + 7 ) & ~7 ) - size		1012226	1		-			
ANR	1012388	BitAndExpression	( size + local_size + 7 ) & ~7		1012226	0		&			
ANR	1012389	AdditiveExpression	size + local_size + 7		1012226	0		+			
ANR	1012390	Identifier	size		1012226	0					
ANR	1012391	AdditiveExpression	local_size + 7		1012226	1		+			
ANR	1012392	Identifier	local_size		1012226	0					
ANR	1012393	PrimaryExpression	7		1012226	1					
ANR	1012394	Identifier	~7		1012226	1					
ANR	1012395	Identifier	size		1012226	1					
ANR	1012396	ExpressionStatement	compiler -> local_size = local_size	855:1:26535:26568	1012226	12	True				
ANR	1012397	AssignmentExpression	compiler -> local_size = local_size		1012226	0		=			
ANR	1012398	PtrMemberAccess	compiler -> local_size		1012226	0					
ANR	1012399	Identifier	compiler		1012226	0					
ANR	1012400	Identifier	local_size		1012226	1					
ANR	1012401	Identifier	local_size		1012226	1					
ANR	1012402	IfStatement	if ( local_size > 0 )		1012226	13					
ANR	1012403	Condition	local_size > 0	856:5:26575:26588	1012226	0	True				
ANR	1012404	RelationalExpression	local_size > 0		1012226	0		>			
ANR	1012405	Identifier	local_size		1012226	0					
ANR	1012406	PrimaryExpression	0		1012226	1					
ANR	1012407	ExpressionStatement	"FAIL_IF ( emit_op ( compiler , SLJIT_SUB , ALLOW_IMM , SLJIT_SP , 0 , SLJIT_SP , 0 , SLJIT_IMM , local_size ) )"	857:2:26593:26690	1012226	1	True				
ANR	1012408	CallExpression	"FAIL_IF ( emit_op ( compiler , SLJIT_SUB , ALLOW_IMM , SLJIT_SP , 0 , SLJIT_SP , 0 , SLJIT_IMM , local_size ) )"		1012226	0					
ANR	1012409	Callee	FAIL_IF		1012226	0					
ANR	1012410	Identifier	FAIL_IF		1012226	0					
ANR	1012411	ArgumentList	"emit_op ( compiler , SLJIT_SUB , ALLOW_IMM , SLJIT_SP , 0 , SLJIT_SP , 0 , SLJIT_IMM , local_size )"		1012226	1					
ANR	1012412	Argument	"emit_op ( compiler , SLJIT_SUB , ALLOW_IMM , SLJIT_SP , 0 , SLJIT_SP , 0 , SLJIT_IMM , local_size )"		1012226	0					
ANR	1012413	CallExpression	"emit_op ( compiler , SLJIT_SUB , ALLOW_IMM , SLJIT_SP , 0 , SLJIT_SP , 0 , SLJIT_IMM , local_size )"		1012226	0					
ANR	1012414	Callee	emit_op		1012226	0					
ANR	1012415	Identifier	emit_op		1012226	0					
ANR	1012416	ArgumentList	compiler		1012226	1					
ANR	1012417	Argument	compiler		1012226	0					
ANR	1012418	Identifier	compiler		1012226	0					
ANR	1012419	Argument	SLJIT_SUB		1012226	1					
ANR	1012420	Identifier	SLJIT_SUB		1012226	0					
ANR	1012421	Argument	ALLOW_IMM		1012226	2					
ANR	1012422	Identifier	ALLOW_IMM		1012226	0					
ANR	1012423	Argument	SLJIT_SP		1012226	3					
ANR	1012424	Identifier	SLJIT_SP		1012226	0					
ANR	1012425	Argument	0		1012226	4					
ANR	1012426	PrimaryExpression	0		1012226	0					
ANR	1012427	Argument	SLJIT_SP		1012226	5					
ANR	1012428	Identifier	SLJIT_SP		1012226	0					
ANR	1012429	Argument	0		1012226	6					
ANR	1012430	PrimaryExpression	0		1012226	0					
ANR	1012431	Argument	SLJIT_IMM		1012226	7					
ANR	1012432	Identifier	SLJIT_IMM		1012226	0					
ANR	1012433	Argument	local_size		1012226	8					
ANR	1012434	Identifier	local_size		1012226	0					
ANR	1012435	IfStatement	if ( args >= 1 )		1012226	14					
ANR	1012436	Condition	args >= 1	859:5:26698:26706	1012226	0	True				
ANR	1012437	RelationalExpression	args >= 1		1012226	0		>=			
ANR	1012438	Identifier	args		1012226	0					
ANR	1012439	PrimaryExpression	1		1012226	1					
ANR	1012440	ExpressionStatement	"FAIL_IF ( push_inst ( compiler , EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , SLJIT_S0 , SLJIT_UNUSED , RM ( SLJIT_R0 ) ) ) )"	860:2:26711:26811	1012226	1	True				
ANR	1012441	CallExpression	"FAIL_IF ( push_inst ( compiler , EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , SLJIT_S0 , SLJIT_UNUSED , RM ( SLJIT_R0 ) ) ) )"		1012226	0					
ANR	1012442	Callee	FAIL_IF		1012226	0					
ANR	1012443	Identifier	FAIL_IF		1012226	0					
ANR	1012444	ArgumentList	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , SLJIT_S0 , SLJIT_UNUSED , RM ( SLJIT_R0 ) ) )"		1012226	1					
ANR	1012445	Argument	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , SLJIT_S0 , SLJIT_UNUSED , RM ( SLJIT_R0 ) ) )"		1012226	0					
ANR	1012446	CallExpression	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , SLJIT_S0 , SLJIT_UNUSED , RM ( SLJIT_R0 ) ) )"		1012226	0					
ANR	1012447	Callee	push_inst		1012226	0					
ANR	1012448	Identifier	push_inst		1012226	0					
ANR	1012449	ArgumentList	compiler		1012226	1					
ANR	1012450	Argument	compiler		1012226	0					
ANR	1012451	Identifier	compiler		1012226	0					
ANR	1012452	Argument	"EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , SLJIT_S0 , SLJIT_UNUSED , RM ( SLJIT_R0 ) )"		1012226	1					
ANR	1012453	CallExpression	"EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , SLJIT_S0 , SLJIT_UNUSED , RM ( SLJIT_R0 ) )"		1012226	0					
ANR	1012454	Callee	EMIT_DATA_PROCESS_INS		1012226	0					
ANR	1012455	Identifier	EMIT_DATA_PROCESS_INS		1012226	0					
ANR	1012456	ArgumentList	MOV_DP		1012226	1					
ANR	1012457	Argument	MOV_DP		1012226	0					
ANR	1012458	Identifier	MOV_DP		1012226	0					
ANR	1012459	Argument	0		1012226	1					
ANR	1012460	PrimaryExpression	0		1012226	0					
ANR	1012461	Argument	SLJIT_S0		1012226	2					
ANR	1012462	Identifier	SLJIT_S0		1012226	0					
ANR	1012463	Argument	SLJIT_UNUSED		1012226	3					
ANR	1012464	Identifier	SLJIT_UNUSED		1012226	0					
ANR	1012465	Argument	RM ( SLJIT_R0 )		1012226	4					
ANR	1012466	CallExpression	RM ( SLJIT_R0 )		1012226	0					
ANR	1012467	Callee	RM		1012226	0					
ANR	1012468	Identifier	RM		1012226	0					
ANR	1012469	ArgumentList	SLJIT_R0		1012226	1					
ANR	1012470	Argument	SLJIT_R0		1012226	0					
ANR	1012471	Identifier	SLJIT_R0		1012226	0					
ANR	1012472	IfStatement	if ( args >= 2 )		1012226	15					
ANR	1012473	Condition	args >= 2	861:5:26818:26826	1012226	0	True				
ANR	1012474	RelationalExpression	args >= 2		1012226	0		>=			
ANR	1012475	Identifier	args		1012226	0					
ANR	1012476	PrimaryExpression	2		1012226	1					
ANR	1012477	ExpressionStatement	"FAIL_IF ( push_inst ( compiler , EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , SLJIT_S1 , SLJIT_UNUSED , RM ( SLJIT_R1 ) ) ) )"	862:2:26831:26931	1012226	1	True				
ANR	1012478	CallExpression	"FAIL_IF ( push_inst ( compiler , EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , SLJIT_S1 , SLJIT_UNUSED , RM ( SLJIT_R1 ) ) ) )"		1012226	0					
ANR	1012479	Callee	FAIL_IF		1012226	0					
ANR	1012480	Identifier	FAIL_IF		1012226	0					
ANR	1012481	ArgumentList	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , SLJIT_S1 , SLJIT_UNUSED , RM ( SLJIT_R1 ) ) )"		1012226	1					
ANR	1012482	Argument	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , SLJIT_S1 , SLJIT_UNUSED , RM ( SLJIT_R1 ) ) )"		1012226	0					
ANR	1012483	CallExpression	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , SLJIT_S1 , SLJIT_UNUSED , RM ( SLJIT_R1 ) ) )"		1012226	0					
ANR	1012484	Callee	push_inst		1012226	0					
ANR	1012485	Identifier	push_inst		1012226	0					
ANR	1012486	ArgumentList	compiler		1012226	1					
ANR	1012487	Argument	compiler		1012226	0					
ANR	1012488	Identifier	compiler		1012226	0					
ANR	1012489	Argument	"EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , SLJIT_S1 , SLJIT_UNUSED , RM ( SLJIT_R1 ) )"		1012226	1					
ANR	1012490	CallExpression	"EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , SLJIT_S1 , SLJIT_UNUSED , RM ( SLJIT_R1 ) )"		1012226	0					
ANR	1012491	Callee	EMIT_DATA_PROCESS_INS		1012226	0					
ANR	1012492	Identifier	EMIT_DATA_PROCESS_INS		1012226	0					
ANR	1012493	ArgumentList	MOV_DP		1012226	1					
ANR	1012494	Argument	MOV_DP		1012226	0					
ANR	1012495	Identifier	MOV_DP		1012226	0					
ANR	1012496	Argument	0		1012226	1					
ANR	1012497	PrimaryExpression	0		1012226	0					
ANR	1012498	Argument	SLJIT_S1		1012226	2					
ANR	1012499	Identifier	SLJIT_S1		1012226	0					
ANR	1012500	Argument	SLJIT_UNUSED		1012226	3					
ANR	1012501	Identifier	SLJIT_UNUSED		1012226	0					
ANR	1012502	Argument	RM ( SLJIT_R1 )		1012226	4					
ANR	1012503	CallExpression	RM ( SLJIT_R1 )		1012226	0					
ANR	1012504	Callee	RM		1012226	0					
ANR	1012505	Identifier	RM		1012226	0					
ANR	1012506	ArgumentList	SLJIT_R1		1012226	1					
ANR	1012507	Argument	SLJIT_R1		1012226	0					
ANR	1012508	Identifier	SLJIT_R1		1012226	0					
ANR	1012509	IfStatement	if ( args >= 3 )		1012226	16					
ANR	1012510	Condition	args >= 3	863:5:26938:26946	1012226	0	True				
ANR	1012511	RelationalExpression	args >= 3		1012226	0		>=			
ANR	1012512	Identifier	args		1012226	0					
ANR	1012513	PrimaryExpression	3		1012226	1					
ANR	1012514	ExpressionStatement	"FAIL_IF ( push_inst ( compiler , EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , SLJIT_S2 , SLJIT_UNUSED , RM ( SLJIT_R2 ) ) ) )"	864:2:26951:27051	1012226	1	True				
ANR	1012515	CallExpression	"FAIL_IF ( push_inst ( compiler , EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , SLJIT_S2 , SLJIT_UNUSED , RM ( SLJIT_R2 ) ) ) )"		1012226	0					
ANR	1012516	Callee	FAIL_IF		1012226	0					
ANR	1012517	Identifier	FAIL_IF		1012226	0					
ANR	1012518	ArgumentList	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , SLJIT_S2 , SLJIT_UNUSED , RM ( SLJIT_R2 ) ) )"		1012226	1					
ANR	1012519	Argument	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , SLJIT_S2 , SLJIT_UNUSED , RM ( SLJIT_R2 ) ) )"		1012226	0					
ANR	1012520	CallExpression	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , SLJIT_S2 , SLJIT_UNUSED , RM ( SLJIT_R2 ) ) )"		1012226	0					
ANR	1012521	Callee	push_inst		1012226	0					
ANR	1012522	Identifier	push_inst		1012226	0					
ANR	1012523	ArgumentList	compiler		1012226	1					
ANR	1012524	Argument	compiler		1012226	0					
ANR	1012525	Identifier	compiler		1012226	0					
ANR	1012526	Argument	"EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , SLJIT_S2 , SLJIT_UNUSED , RM ( SLJIT_R2 ) )"		1012226	1					
ANR	1012527	CallExpression	"EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , SLJIT_S2 , SLJIT_UNUSED , RM ( SLJIT_R2 ) )"		1012226	0					
ANR	1012528	Callee	EMIT_DATA_PROCESS_INS		1012226	0					
ANR	1012529	Identifier	EMIT_DATA_PROCESS_INS		1012226	0					
ANR	1012530	ArgumentList	MOV_DP		1012226	1					
ANR	1012531	Argument	MOV_DP		1012226	0					
ANR	1012532	Identifier	MOV_DP		1012226	0					
ANR	1012533	Argument	0		1012226	1					
ANR	1012534	PrimaryExpression	0		1012226	0					
ANR	1012535	Argument	SLJIT_S2		1012226	2					
ANR	1012536	Identifier	SLJIT_S2		1012226	0					
ANR	1012537	Argument	SLJIT_UNUSED		1012226	3					
ANR	1012538	Identifier	SLJIT_UNUSED		1012226	0					
ANR	1012539	Argument	RM ( SLJIT_R2 )		1012226	4					
ANR	1012540	CallExpression	RM ( SLJIT_R2 )		1012226	0					
ANR	1012541	Callee	RM		1012226	0					
ANR	1012542	Identifier	RM		1012226	0					
ANR	1012543	ArgumentList	SLJIT_R2		1012226	1					
ANR	1012544	Argument	SLJIT_R2		1012226	0					
ANR	1012545	Identifier	SLJIT_R2		1012226	0					
ANR	1012546	ReturnStatement	return SLJIT_SUCCESS ;	866:1:27055:27075	1012226	17	True				
ANR	1012547	Identifier	SLJIT_SUCCESS		1012226	0					
ANR	1012548	ReturnType	SLJIT_API_FUNC_ATTRIBUTE sljit_si		1012226	1					
ANR	1012549	Identifier	sljit_emit_enter		1012226	2					
ANR	1012550	ParameterList	"struct sljit_compiler * compiler , sljit_si options , sljit_si args , sljit_si scratches , sljit_si saveds , sljit_si fscratches , sljit_si fsaveds , sljit_si local_size"		1012226	3					
ANR	1012551	Parameter	struct sljit_compiler * compiler	828:51:25573:25603	1012226	0	True				
ANR	1012552	ParameterType	struct sljit_compiler *		1012226	0					
ANR	1012553	Identifier	compiler		1012226	1					
ANR	1012554	Parameter	sljit_si options	829:1:25607:25622	1012226	1	True				
ANR	1012555	ParameterType	sljit_si		1012226	0					
ANR	1012556	Identifier	options		1012226	1					
ANR	1012557	Parameter	sljit_si args	829:19:25625:25637	1012226	2	True				
ANR	1012558	ParameterType	sljit_si		1012226	0					
ANR	1012559	Identifier	args		1012226	1					
ANR	1012560	Parameter	sljit_si scratches	829:34:25640:25657	1012226	3	True				
ANR	1012561	ParameterType	sljit_si		1012226	0					
ANR	1012562	Identifier	scratches		1012226	1					
ANR	1012563	Parameter	sljit_si saveds	829:54:25660:25674	1012226	4	True				
ANR	1012564	ParameterType	sljit_si		1012226	0					
ANR	1012565	Identifier	saveds		1012226	1					
ANR	1012566	Parameter	sljit_si fscratches	830:1:25678:25696	1012226	5	True				
ANR	1012567	ParameterType	sljit_si		1012226	0					
ANR	1012568	Identifier	fscratches		1012226	1					
ANR	1012569	Parameter	sljit_si fsaveds	830:22:25699:25714	1012226	6	True				
ANR	1012570	ParameterType	sljit_si		1012226	0					
ANR	1012571	Identifier	fsaveds		1012226	1					
ANR	1012572	Parameter	sljit_si local_size	830:40:25717:25735	1012226	7	True				
ANR	1012573	ParameterType	sljit_si		1012226	0					
ANR	1012574	Identifier	local_size		1012226	1					
ANR	1012575	CFGEntryNode	ENTRY		1012226		True				
ANR	1012576	CFGExitNode	EXIT		1012226		True				
ANR	1012577	Symbol	scratches		1012226						
ANR	1012578	Symbol	saveds		1012226						
ANR	1012579	Symbol	reg_map		1012226						
ANR	1012580	Symbol	check_sljit_emit_enter		1012226						
ANR	1012581	Symbol	* compiler		1012226						
ANR	1012582	Symbol	ALLOW_IMM		1012226						
ANR	1012583	Symbol	SLJIT_R1		1012226						
ANR	1012584	Symbol	SLJIT_NUMBER_OF_SAVED_REGISTERS		1012226						
ANR	1012585	Symbol	SLJIT_R2		1012226						
ANR	1012586	Symbol	SLJIT_SP		1012226						
ANR	1012587	Symbol	SLJIT_R0		1012226						
ANR	1012588	Symbol	MOV_DP		1012226						
ANR	1012589	Symbol	SLJIT_IMM		1012226						
ANR	1012590	Symbol	tmp		1012226						
ANR	1012591	Symbol	options		1012226						
ANR	1012592	Symbol	compiler		1012226						
ANR	1012593	Symbol	emit_op		1012226						
ANR	1012594	Symbol	GET_SAVED_REGISTERS_SIZE		1012226						
ANR	1012595	Symbol	local_size		1012226						
ANR	1012596	Symbol	push_inst		1012226						
ANR	1012597	Symbol	i		1012226						
ANR	1012598	Symbol	SLJIT_SUB		1012226						
ANR	1012599	Symbol	SLJIT_SUCCESS		1012226						
ANR	1012600	Symbol	* reg_map		1012226						
ANR	1012601	Symbol	SLJIT_S2		1012226						
ANR	1012602	Symbol	push		1012226						
ANR	1012603	Symbol	SLJIT_S0		1012226						
ANR	1012604	Symbol	SLJIT_S1		1012226						
ANR	1012605	Symbol	args		1012226						
ANR	1012606	Symbol	fscratches		1012226						
ANR	1012607	Symbol	* i		1012226						
ANR	1012608	Symbol	compiler -> local_size		1012226						
ANR	1012609	Symbol	fsaveds		1012226						
ANR	1012610	Symbol	size		1012226						
ANR	1012611	Symbol	SLJIT_UNUSED		1012226						
ANR	1012612	Symbol	SLJIT_FIRST_SAVED_REG		1012226						
ANR	1012613	Symbol	~7		1012226						
ANR	1012614	Symbol	RM		1012226						
ANR	1012615	Symbol	PUSH		1012226						
ANR	1012616	Symbol	EMIT_DATA_PROCESS_INS		1012226						
ANR	1012617	Function	sljit_set_context	869:0:27080:27680							
ANR	1012618	FunctionDef	"sljit_set_context (struct sljit_compiler * compiler , sljit_si options , sljit_si args , sljit_si scratches , sljit_si saveds , sljit_si fscratches , sljit_si fsaveds , sljit_si local_size)"		1012617	0					
ANR	1012619	CompoundStatement		872:0:27297:27680	1012617	0					
ANR	1012620	IdentifierDeclStatement	sljit_si size ;	873:1:27300:27313	1012617	0	True				
ANR	1012621	IdentifierDecl	size		1012617	0					
ANR	1012622	IdentifierDeclType	sljit_si		1012617	0					
ANR	1012623	Identifier	size		1012617	1					
ANR	1012624	ExpressionStatement	CHECK_ERROR ( )	875:1:27317:27330	1012617	1	True				
ANR	1012625	CallExpression	CHECK_ERROR ( )		1012617	0					
ANR	1012626	Callee	CHECK_ERROR		1012617	0					
ANR	1012627	Identifier	CHECK_ERROR		1012617	0					
ANR	1012628	ArgumentList			1012617	1					
ANR	1012629	ExpressionStatement	"CHECK ( check_sljit_set_context ( compiler , options , args , scratches , saveds , fscratches , fsaveds , local_size ) )"	876:1:27333:27440	1012617	2	True				
ANR	1012630	CallExpression	"CHECK ( check_sljit_set_context ( compiler , options , args , scratches , saveds , fscratches , fsaveds , local_size ) )"		1012617	0					
ANR	1012631	Callee	CHECK		1012617	0					
ANR	1012632	Identifier	CHECK		1012617	0					
ANR	1012633	ArgumentList	"check_sljit_set_context ( compiler , options , args , scratches , saveds , fscratches , fsaveds , local_size )"		1012617	1					
ANR	1012634	Argument	"check_sljit_set_context ( compiler , options , args , scratches , saveds , fscratches , fsaveds , local_size )"		1012617	0					
ANR	1012635	CallExpression	"check_sljit_set_context ( compiler , options , args , scratches , saveds , fscratches , fsaveds , local_size )"		1012617	0					
ANR	1012636	Callee	check_sljit_set_context		1012617	0					
ANR	1012637	Identifier	check_sljit_set_context		1012617	0					
ANR	1012638	ArgumentList	compiler		1012617	1					
ANR	1012639	Argument	compiler		1012617	0					
ANR	1012640	Identifier	compiler		1012617	0					
ANR	1012641	Argument	options		1012617	1					
ANR	1012642	Identifier	options		1012617	0					
ANR	1012643	Argument	args		1012617	2					
ANR	1012644	Identifier	args		1012617	0					
ANR	1012645	Argument	scratches		1012617	3					
ANR	1012646	Identifier	scratches		1012617	0					
ANR	1012647	Argument	saveds		1012617	4					
ANR	1012648	Identifier	saveds		1012617	0					
ANR	1012649	Argument	fscratches		1012617	5					
ANR	1012650	Identifier	fscratches		1012617	0					
ANR	1012651	Argument	fsaveds		1012617	6					
ANR	1012652	Identifier	fsaveds		1012617	0					
ANR	1012653	Argument	local_size		1012617	7					
ANR	1012654	Identifier	local_size		1012617	0					
ANR	1012655	ExpressionStatement	"set_set_context ( compiler , options , args , scratches , saveds , fscratches , fsaveds , local_size )"	877:1:27443:27535	1012617	3	True				
ANR	1012656	CallExpression	"set_set_context ( compiler , options , args , scratches , saveds , fscratches , fsaveds , local_size )"		1012617	0					
ANR	1012657	Callee	set_set_context		1012617	0					
ANR	1012658	Identifier	set_set_context		1012617	0					
ANR	1012659	ArgumentList	compiler		1012617	1					
ANR	1012660	Argument	compiler		1012617	0					
ANR	1012661	Identifier	compiler		1012617	0					
ANR	1012662	Argument	options		1012617	1					
ANR	1012663	Identifier	options		1012617	0					
ANR	1012664	Argument	args		1012617	2					
ANR	1012665	Identifier	args		1012617	0					
ANR	1012666	Argument	scratches		1012617	3					
ANR	1012667	Identifier	scratches		1012617	0					
ANR	1012668	Argument	saveds		1012617	4					
ANR	1012669	Identifier	saveds		1012617	0					
ANR	1012670	Argument	fscratches		1012617	5					
ANR	1012671	Identifier	fscratches		1012617	0					
ANR	1012672	Argument	fsaveds		1012617	6					
ANR	1012673	Identifier	fsaveds		1012617	0					
ANR	1012674	Argument	local_size		1012617	7					
ANR	1012675	Identifier	local_size		1012617	0					
ANR	1012676	ExpressionStatement	"size = GET_SAVED_REGISTERS_SIZE ( scratches , saveds , 1 )"	879:1:27539:27592	1012617	4	True				
ANR	1012677	AssignmentExpression	"size = GET_SAVED_REGISTERS_SIZE ( scratches , saveds , 1 )"		1012617	0		=			
ANR	1012678	Identifier	size		1012617	0					
ANR	1012679	CallExpression	"GET_SAVED_REGISTERS_SIZE ( scratches , saveds , 1 )"		1012617	1					
ANR	1012680	Callee	GET_SAVED_REGISTERS_SIZE		1012617	0					
ANR	1012681	Identifier	GET_SAVED_REGISTERS_SIZE		1012617	0					
ANR	1012682	ArgumentList	scratches		1012617	1					
ANR	1012683	Argument	scratches		1012617	0					
ANR	1012684	Identifier	scratches		1012617	0					
ANR	1012685	Argument	saveds		1012617	1					
ANR	1012686	Identifier	saveds		1012617	0					
ANR	1012687	Argument	1		1012617	2					
ANR	1012688	PrimaryExpression	1		1012617	0					
ANR	1012689	ExpressionStatement	compiler -> local_size = ( ( size + local_size + 7 ) & ~7 ) - size	880:1:27595:27655	1012617	5	True				
ANR	1012690	AssignmentExpression	compiler -> local_size = ( ( size + local_size + 7 ) & ~7 ) - size		1012617	0		=			
ANR	1012691	PtrMemberAccess	compiler -> local_size		1012617	0					
ANR	1012692	Identifier	compiler		1012617	0					
ANR	1012693	Identifier	local_size		1012617	1					
ANR	1012694	AdditiveExpression	( ( size + local_size + 7 ) & ~7 ) - size		1012617	1		-			
ANR	1012695	BitAndExpression	( size + local_size + 7 ) & ~7		1012617	0		&			
ANR	1012696	AdditiveExpression	size + local_size + 7		1012617	0		+			
ANR	1012697	Identifier	size		1012617	0					
ANR	1012698	AdditiveExpression	local_size + 7		1012617	1		+			
ANR	1012699	Identifier	local_size		1012617	0					
ANR	1012700	PrimaryExpression	7		1012617	1					
ANR	1012701	Identifier	~7		1012617	1					
ANR	1012702	Identifier	size		1012617	1					
ANR	1012703	ReturnStatement	return SLJIT_SUCCESS ;	881:1:27658:27678	1012617	6	True				
ANR	1012704	Identifier	SLJIT_SUCCESS		1012617	0					
ANR	1012705	ReturnType	SLJIT_API_FUNC_ATTRIBUTE sljit_si		1012617	1					
ANR	1012706	Identifier	sljit_set_context		1012617	2					
ANR	1012707	ParameterList	"struct sljit_compiler * compiler , sljit_si options , sljit_si args , sljit_si scratches , sljit_si saveds , sljit_si fscratches , sljit_si fsaveds , sljit_si local_size"		1012617	3					
ANR	1012708	Parameter	struct sljit_compiler * compiler	869:52:27132:27162	1012617	0	True				
ANR	1012709	ParameterType	struct sljit_compiler *		1012617	0					
ANR	1012710	Identifier	compiler		1012617	1					
ANR	1012711	Parameter	sljit_si options	870:1:27166:27181	1012617	1	True				
ANR	1012712	ParameterType	sljit_si		1012617	0					
ANR	1012713	Identifier	options		1012617	1					
ANR	1012714	Parameter	sljit_si args	870:19:27184:27196	1012617	2	True				
ANR	1012715	ParameterType	sljit_si		1012617	0					
ANR	1012716	Identifier	args		1012617	1					
ANR	1012717	Parameter	sljit_si scratches	870:34:27199:27216	1012617	3	True				
ANR	1012718	ParameterType	sljit_si		1012617	0					
ANR	1012719	Identifier	scratches		1012617	1					
ANR	1012720	Parameter	sljit_si saveds	870:54:27219:27233	1012617	4	True				
ANR	1012721	ParameterType	sljit_si		1012617	0					
ANR	1012722	Identifier	saveds		1012617	1					
ANR	1012723	Parameter	sljit_si fscratches	871:1:27237:27255	1012617	5	True				
ANR	1012724	ParameterType	sljit_si		1012617	0					
ANR	1012725	Identifier	fscratches		1012617	1					
ANR	1012726	Parameter	sljit_si fsaveds	871:22:27258:27273	1012617	6	True				
ANR	1012727	ParameterType	sljit_si		1012617	0					
ANR	1012728	Identifier	fsaveds		1012617	1					
ANR	1012729	Parameter	sljit_si local_size	871:40:27276:27294	1012617	7	True				
ANR	1012730	ParameterType	sljit_si		1012617	0					
ANR	1012731	Identifier	local_size		1012617	1					
ANR	1012732	CFGEntryNode	ENTRY		1012617		True				
ANR	1012733	CFGExitNode	EXIT		1012617		True				
ANR	1012734	Symbol	GET_SAVED_REGISTERS_SIZE		1012617						
ANR	1012735	Symbol	local_size		1012617						
ANR	1012736	Symbol	scratches		1012617						
ANR	1012737	Symbol	saveds		1012617						
ANR	1012738	Symbol	check_sljit_set_context		1012617						
ANR	1012739	Symbol	SLJIT_SUCCESS		1012617						
ANR	1012740	Symbol	* compiler		1012617						
ANR	1012741	Symbol	args		1012617						
ANR	1012742	Symbol	fscratches		1012617						
ANR	1012743	Symbol	compiler -> local_size		1012617						
ANR	1012744	Symbol	fsaveds		1012617						
ANR	1012745	Symbol	size		1012617						
ANR	1012746	Symbol	options		1012617						
ANR	1012747	Symbol	~7		1012617						
ANR	1012748	Symbol	compiler		1012617						
ANR	1012749	Function	sljit_emit_return	884:0:27683:28529							
ANR	1012750	FunctionDef	"sljit_emit_return (struct sljit_compiler * compiler , sljit_si op , sljit_si src , sljit_sw srcw)"		1012749	0					
ANR	1012751	CompoundStatement		885:0:27810:28529	1012749	0					
ANR	1012752	IdentifierDeclStatement	"sljit_si i , tmp ;"	886:1:27813:27828	1012749	0	True				
ANR	1012753	IdentifierDecl	i		1012749	0					
ANR	1012754	IdentifierDeclType	sljit_si		1012749	0					
ANR	1012755	Identifier	i		1012749	1					
ANR	1012756	IdentifierDecl	tmp		1012749	1					
ANR	1012757	IdentifierDeclType	sljit_si		1012749	0					
ANR	1012758	Identifier	tmp		1012749	1					
ANR	1012759	IdentifierDeclStatement	sljit_uw pop ;	887:1:27831:27843	1012749	1	True				
ANR	1012760	IdentifierDecl	pop		1012749	0					
ANR	1012761	IdentifierDeclType	sljit_uw		1012749	0					
ANR	1012762	Identifier	pop		1012749	1					
ANR	1012763	ExpressionStatement	CHECK_ERROR ( )	889:1:27847:27860	1012749	2	True				
ANR	1012764	CallExpression	CHECK_ERROR ( )		1012749	0					
ANR	1012765	Callee	CHECK_ERROR		1012749	0					
ANR	1012766	Identifier	CHECK_ERROR		1012749	0					
ANR	1012767	ArgumentList			1012749	1					
ANR	1012768	ExpressionStatement	"CHECK ( check_sljit_emit_return ( compiler , op , src , srcw ) )"	890:1:27863:27918	1012749	3	True				
ANR	1012769	CallExpression	"CHECK ( check_sljit_emit_return ( compiler , op , src , srcw ) )"		1012749	0					
ANR	1012770	Callee	CHECK		1012749	0					
ANR	1012771	Identifier	CHECK		1012749	0					
ANR	1012772	ArgumentList	"check_sljit_emit_return ( compiler , op , src , srcw )"		1012749	1					
ANR	1012773	Argument	"check_sljit_emit_return ( compiler , op , src , srcw )"		1012749	0					
ANR	1012774	CallExpression	"check_sljit_emit_return ( compiler , op , src , srcw )"		1012749	0					
ANR	1012775	Callee	check_sljit_emit_return		1012749	0					
ANR	1012776	Identifier	check_sljit_emit_return		1012749	0					
ANR	1012777	ArgumentList	compiler		1012749	1					
ANR	1012778	Argument	compiler		1012749	0					
ANR	1012779	Identifier	compiler		1012749	0					
ANR	1012780	Argument	op		1012749	1					
ANR	1012781	Identifier	op		1012749	0					
ANR	1012782	Argument	src		1012749	2					
ANR	1012783	Identifier	src		1012749	0					
ANR	1012784	Argument	srcw		1012749	3					
ANR	1012785	Identifier	srcw		1012749	0					
ANR	1012786	ExpressionStatement	"FAIL_IF ( emit_mov_before_return ( compiler , op , src , srcw ) )"	892:1:27922:27978	1012749	4	True				
ANR	1012787	CallExpression	"FAIL_IF ( emit_mov_before_return ( compiler , op , src , srcw ) )"		1012749	0					
ANR	1012788	Callee	FAIL_IF		1012749	0					
ANR	1012789	Identifier	FAIL_IF		1012749	0					
ANR	1012790	ArgumentList	"emit_mov_before_return ( compiler , op , src , srcw )"		1012749	1					
ANR	1012791	Argument	"emit_mov_before_return ( compiler , op , src , srcw )"		1012749	0					
ANR	1012792	CallExpression	"emit_mov_before_return ( compiler , op , src , srcw )"		1012749	0					
ANR	1012793	Callee	emit_mov_before_return		1012749	0					
ANR	1012794	Identifier	emit_mov_before_return		1012749	0					
ANR	1012795	ArgumentList	compiler		1012749	1					
ANR	1012796	Argument	compiler		1012749	0					
ANR	1012797	Identifier	compiler		1012749	0					
ANR	1012798	Argument	op		1012749	1					
ANR	1012799	Identifier	op		1012749	0					
ANR	1012800	Argument	src		1012749	2					
ANR	1012801	Identifier	src		1012749	0					
ANR	1012802	Argument	srcw		1012749	3					
ANR	1012803	Identifier	srcw		1012749	0					
ANR	1012804	IfStatement	if ( compiler -> local_size > 0 )		1012749	5					
ANR	1012805	Condition	compiler -> local_size > 0	894:5:27986:28009	1012749	0	True				
ANR	1012806	RelationalExpression	compiler -> local_size > 0		1012749	0		>			
ANR	1012807	PtrMemberAccess	compiler -> local_size		1012749	0					
ANR	1012808	Identifier	compiler		1012749	0					
ANR	1012809	Identifier	local_size		1012749	1					
ANR	1012810	PrimaryExpression	0		1012749	1					
ANR	1012811	ExpressionStatement	"FAIL_IF ( emit_op ( compiler , SLJIT_ADD , ALLOW_IMM , SLJIT_SP , 0 , SLJIT_SP , 0 , SLJIT_IMM , compiler -> local_size ) )"	895:2:28014:28121	1012749	1	True				
ANR	1012812	CallExpression	"FAIL_IF ( emit_op ( compiler , SLJIT_ADD , ALLOW_IMM , SLJIT_SP , 0 , SLJIT_SP , 0 , SLJIT_IMM , compiler -> local_size ) )"		1012749	0					
ANR	1012813	Callee	FAIL_IF		1012749	0					
ANR	1012814	Identifier	FAIL_IF		1012749	0					
ANR	1012815	ArgumentList	"emit_op ( compiler , SLJIT_ADD , ALLOW_IMM , SLJIT_SP , 0 , SLJIT_SP , 0 , SLJIT_IMM , compiler -> local_size )"		1012749	1					
ANR	1012816	Argument	"emit_op ( compiler , SLJIT_ADD , ALLOW_IMM , SLJIT_SP , 0 , SLJIT_SP , 0 , SLJIT_IMM , compiler -> local_size )"		1012749	0					
ANR	1012817	CallExpression	"emit_op ( compiler , SLJIT_ADD , ALLOW_IMM , SLJIT_SP , 0 , SLJIT_SP , 0 , SLJIT_IMM , compiler -> local_size )"		1012749	0					
ANR	1012818	Callee	emit_op		1012749	0					
ANR	1012819	Identifier	emit_op		1012749	0					
ANR	1012820	ArgumentList	compiler		1012749	1					
ANR	1012821	Argument	compiler		1012749	0					
ANR	1012822	Identifier	compiler		1012749	0					
ANR	1012823	Argument	SLJIT_ADD		1012749	1					
ANR	1012824	Identifier	SLJIT_ADD		1012749	0					
ANR	1012825	Argument	ALLOW_IMM		1012749	2					
ANR	1012826	Identifier	ALLOW_IMM		1012749	0					
ANR	1012827	Argument	SLJIT_SP		1012749	3					
ANR	1012828	Identifier	SLJIT_SP		1012749	0					
ANR	1012829	Argument	0		1012749	4					
ANR	1012830	PrimaryExpression	0		1012749	0					
ANR	1012831	Argument	SLJIT_SP		1012749	5					
ANR	1012832	Identifier	SLJIT_SP		1012749	0					
ANR	1012833	Argument	0		1012749	6					
ANR	1012834	PrimaryExpression	0		1012749	0					
ANR	1012835	Argument	SLJIT_IMM		1012749	7					
ANR	1012836	Identifier	SLJIT_IMM		1012749	0					
ANR	1012837	Argument	compiler -> local_size		1012749	8					
ANR	1012838	PtrMemberAccess	compiler -> local_size		1012749	0					
ANR	1012839	Identifier	compiler		1012749	0					
ANR	1012840	Identifier	local_size		1012749	1					
ANR	1012841	ExpressionStatement	pop = POP | ( 1 << 15 )	899:1:28199:28220	1012749	6	True				
ANR	1012842	AssignmentExpression	pop = POP | ( 1 << 15 )		1012749	0		=			
ANR	1012843	Identifier	pop		1012749	0					
ANR	1012844	InclusiveOrExpression	POP | ( 1 << 15 )		1012749	1		|			
ANR	1012845	Identifier	POP		1012749	0					
ANR	1012846	ShiftExpression	1 << 15		1012749	1		<<			
ANR	1012847	PrimaryExpression	1		1012749	0					
ANR	1012848	PrimaryExpression	15		1012749	1					
ANR	1012849	ExpressionStatement	tmp = compiler -> saveds < SLJIT_NUMBER_OF_SAVED_REGISTERS ? ( SLJIT_S0 + 1 - compiler -> saveds ) : SLJIT_FIRST_SAVED_REG	901:1:28224:28340	1012749	7	True				
ANR	1012850	AssignmentExpression	tmp = compiler -> saveds < SLJIT_NUMBER_OF_SAVED_REGISTERS ? ( SLJIT_S0 + 1 - compiler -> saveds ) : SLJIT_FIRST_SAVED_REG		1012749	0		=			
ANR	1012851	Identifier	tmp		1012749	0					
ANR	1012852	ConditionalExpression	compiler -> saveds < SLJIT_NUMBER_OF_SAVED_REGISTERS ? ( SLJIT_S0 + 1 - compiler -> saveds ) : SLJIT_FIRST_SAVED_REG		1012749	1					
ANR	1012853	Condition	compiler -> saveds < SLJIT_NUMBER_OF_SAVED_REGISTERS		1012749	0					
ANR	1012854	RelationalExpression	compiler -> saveds < SLJIT_NUMBER_OF_SAVED_REGISTERS		1012749	0		<			
ANR	1012855	PtrMemberAccess	compiler -> saveds		1012749	0					
ANR	1012856	Identifier	compiler		1012749	0					
ANR	1012857	Identifier	saveds		1012749	1					
ANR	1012858	Identifier	SLJIT_NUMBER_OF_SAVED_REGISTERS		1012749	1					
ANR	1012859	AdditiveExpression	SLJIT_S0 + 1 - compiler -> saveds		1012749	1		+			
ANR	1012860	Identifier	SLJIT_S0		1012749	0					
ANR	1012861	AdditiveExpression	1 - compiler -> saveds		1012749	1		-			
ANR	1012862	PrimaryExpression	1		1012749	0					
ANR	1012863	PtrMemberAccess	compiler -> saveds		1012749	1					
ANR	1012864	Identifier	compiler		1012749	0					
ANR	1012865	Identifier	saveds		1012749	1					
ANR	1012866	Identifier	SLJIT_FIRST_SAVED_REG		1012749	2					
ANR	1012867	ForStatement	for ( i = SLJIT_S0 ; i >= tmp ; i -- )		1012749	8					
ANR	1012868	ForInit	i = SLJIT_S0 ;	902:6:28348:28360	1012749	0	True				
ANR	1012869	AssignmentExpression	i = SLJIT_S0		1012749	0		=			
ANR	1012870	Identifier	i		1012749	0					
ANR	1012871	Identifier	SLJIT_S0		1012749	1					
ANR	1012872	Condition	i >= tmp	902:20:28362:28369	1012749	1	True				
ANR	1012873	RelationalExpression	i >= tmp		1012749	0		>=			
ANR	1012874	Identifier	i		1012749	0					
ANR	1012875	Identifier	tmp		1012749	1					
ANR	1012876	PostIncDecOperationExpression	i --	902:30:28372:28374	1012749	2	True				
ANR	1012877	Identifier	i		1012749	0					
ANR	1012878	IncDec	--		1012749	1					
ANR	1012879	ExpressionStatement	pop |= 1 << reg_map [ i ]	903:2:28379:28401	1012749	3	True				
ANR	1012880	AssignmentExpression	pop |= 1 << reg_map [ i ]		1012749	0		|=			
ANR	1012881	Identifier	pop		1012749	0					
ANR	1012882	ShiftExpression	1 << reg_map [ i ]		1012749	1		<<			
ANR	1012883	PrimaryExpression	1		1012749	0					
ANR	1012884	ArrayIndexing	reg_map [ i ]		1012749	1					
ANR	1012885	Identifier	reg_map		1012749	0					
ANR	1012886	Identifier	i		1012749	1					
ANR	1012887	ForStatement	for ( i = compiler -> scratches ; i >= SLJIT_FIRST_SAVED_REG ; i -- )		1012749	9					
ANR	1012888	ForInit	i = compiler -> scratches ;	905:6:28410:28433	1012749	0	True				
ANR	1012889	AssignmentExpression	i = compiler -> scratches		1012749	0		=			
ANR	1012890	Identifier	i		1012749	0					
ANR	1012891	PtrMemberAccess	compiler -> scratches		1012749	1					
ANR	1012892	Identifier	compiler		1012749	0					
ANR	1012893	Identifier	scratches		1012749	1					
ANR	1012894	Condition	i >= SLJIT_FIRST_SAVED_REG	905:31:28435:28460	1012749	1	True				
ANR	1012895	RelationalExpression	i >= SLJIT_FIRST_SAVED_REG		1012749	0		>=			
ANR	1012896	Identifier	i		1012749	0					
ANR	1012897	Identifier	SLJIT_FIRST_SAVED_REG		1012749	1					
ANR	1012898	PostIncDecOperationExpression	i --	905:59:28463:28465	1012749	2	True				
ANR	1012899	Identifier	i		1012749	0					
ANR	1012900	IncDec	--		1012749	1					
ANR	1012901	ExpressionStatement	pop |= 1 << reg_map [ i ]	906:2:28470:28492	1012749	3	True				
ANR	1012902	AssignmentExpression	pop |= 1 << reg_map [ i ]		1012749	0		|=			
ANR	1012903	Identifier	pop		1012749	0					
ANR	1012904	ShiftExpression	1 << reg_map [ i ]		1012749	1		<<			
ANR	1012905	PrimaryExpression	1		1012749	0					
ANR	1012906	ArrayIndexing	reg_map [ i ]		1012749	1					
ANR	1012907	Identifier	reg_map		1012749	0					
ANR	1012908	Identifier	i		1012749	1					
ANR	1012909	ReturnStatement	"return push_inst ( compiler , pop ) ;"	908:1:28496:28527	1012749	10	True				
ANR	1012910	CallExpression	"push_inst ( compiler , pop )"		1012749	0					
ANR	1012911	Callee	push_inst		1012749	0					
ANR	1012912	Identifier	push_inst		1012749	0					
ANR	1012913	ArgumentList	compiler		1012749	1					
ANR	1012914	Argument	compiler		1012749	0					
ANR	1012915	Identifier	compiler		1012749	0					
ANR	1012916	Argument	pop		1012749	1					
ANR	1012917	Identifier	pop		1012749	0					
ANR	1012918	ReturnType	SLJIT_API_FUNC_ATTRIBUTE sljit_si		1012749	1					
ANR	1012919	Identifier	sljit_emit_return		1012749	2					
ANR	1012920	ParameterList	"struct sljit_compiler * compiler , sljit_si op , sljit_si src , sljit_sw srcw"		1012749	3					
ANR	1012921	Parameter	struct sljit_compiler * compiler	884:52:27735:27765	1012749	0	True				
ANR	1012922	ParameterType	struct sljit_compiler *		1012749	0					
ANR	1012923	Identifier	compiler		1012749	1					
ANR	1012924	Parameter	sljit_si op	884:85:27768:27778	1012749	1	True				
ANR	1012925	ParameterType	sljit_si		1012749	0					
ANR	1012926	Identifier	op		1012749	1					
ANR	1012927	Parameter	sljit_si src	884:98:27781:27792	1012749	2	True				
ANR	1012928	ParameterType	sljit_si		1012749	0					
ANR	1012929	Identifier	src		1012749	1					
ANR	1012930	Parameter	sljit_sw srcw	884:112:27795:27807	1012749	3	True				
ANR	1012931	ParameterType	sljit_sw		1012749	0					
ANR	1012932	Identifier	srcw		1012749	1					
ANR	1012933	CFGEntryNode	ENTRY		1012749		True				
ANR	1012934	CFGExitNode	EXIT		1012749		True				
ANR	1012935	Symbol	compiler -> scratches		1012749						
ANR	1012936	Symbol	reg_map		1012749						
ANR	1012937	Symbol	SLJIT_ADD		1012749						
ANR	1012938	Symbol	* compiler		1012749						
ANR	1012939	Symbol	ALLOW_IMM		1012749						
ANR	1012940	Symbol	SLJIT_NUMBER_OF_SAVED_REGISTERS		1012749						
ANR	1012941	Symbol	SLJIT_SP		1012749						
ANR	1012942	Symbol	pop		1012749						
ANR	1012943	Symbol	SLJIT_IMM		1012749						
ANR	1012944	Symbol	check_sljit_emit_return		1012749						
ANR	1012945	Symbol	tmp		1012749						
ANR	1012946	Symbol	compiler		1012749						
ANR	1012947	Symbol	emit_op		1012749						
ANR	1012948	Symbol	op		1012749						
ANR	1012949	Symbol	push_inst		1012749						
ANR	1012950	Symbol	src		1012749						
ANR	1012951	Symbol	srcw		1012749						
ANR	1012952	Symbol	i		1012749						
ANR	1012953	Symbol	* reg_map		1012749						
ANR	1012954	Symbol	SLJIT_S0		1012749						
ANR	1012955	Symbol	POP		1012749						
ANR	1012956	Symbol	compiler -> local_size		1012749						
ANR	1012957	Symbol	compiler -> saveds		1012749						
ANR	1012958	Symbol	* i		1012749						
ANR	1012959	Symbol	SLJIT_FIRST_SAVED_REG		1012749						
ANR	1012960	Symbol	emit_mov_before_return		1012749						
ANR	1012961	DeclStmt									
ANR	1012962	Decl							sljit_sw	sljit_sw [ 16 ]	data_transfer_insts
ANR	1012963	Function	emit_single_op	986:0:31753:36897							
ANR	1012964	FunctionDef	"emit_single_op (struct sljit_compiler * compiler , sljit_si op , sljit_si flags , sljit_si dst , sljit_si src1 , sljit_si src2)"		1012963	0					
ANR	1012965	CompoundStatement		988:0:31904:36897	1012963	0					
ANR	1012966	IdentifierDeclStatement	sljit_sw mul_inst ;	989:1:31907:31924	1012963	0	True				
ANR	1012967	IdentifierDecl	mul_inst		1012963	0					
ANR	1012968	IdentifierDeclType	sljit_sw		1012963	0					
ANR	1012969	Identifier	mul_inst		1012963	1					
ANR	1012970	SwitchStatement	switch ( GET_OPCODE ( op ) )		1012963	1					
ANR	1012971	Condition	GET_OPCODE ( op )	991:9:31936:31949	1012963	0	True				
ANR	1012972	CallExpression	GET_OPCODE ( op )		1012963	0					
ANR	1012973	Callee	GET_OPCODE		1012963	0					
ANR	1012974	Identifier	GET_OPCODE		1012963	0					
ANR	1012975	ArgumentList	op		1012963	1					
ANR	1012976	Argument	op		1012963	0					
ANR	1012977	Identifier	op		1012963	0					
ANR	1012978	CompoundStatement		4:25:47:47	1012963	1					
ANR	1012979	Label	case SLJIT_MOV :	992:1:31955:31969	1012963	0	True				
ANR	1012980	Identifier	SLJIT_MOV		1012963	0					
ANR	1012981	ExpressionStatement	SLJIT_ASSERT ( src1 == TMP_REG1 && ! ( flags & ARGS_SWAPPED ) )	993:2:31973:32030	1012963	1	True				
ANR	1012982	CallExpression	SLJIT_ASSERT ( src1 == TMP_REG1 && ! ( flags & ARGS_SWAPPED ) )		1012963	0					
ANR	1012983	Callee	SLJIT_ASSERT		1012963	0					
ANR	1012984	Identifier	SLJIT_ASSERT		1012963	0					
ANR	1012985	ArgumentList	src1 == TMP_REG1 && ! ( flags & ARGS_SWAPPED )		1012963	1					
ANR	1012986	Argument	src1 == TMP_REG1 && ! ( flags & ARGS_SWAPPED )		1012963	0					
ANR	1012987	AndExpression	src1 == TMP_REG1 && ! ( flags & ARGS_SWAPPED )		1012963	0		&&			
ANR	1012988	EqualityExpression	src1 == TMP_REG1		1012963	0		==			
ANR	1012989	Identifier	src1		1012963	0					
ANR	1012990	Identifier	TMP_REG1		1012963	1					
ANR	1012991	UnaryOperationExpression	! ( flags & ARGS_SWAPPED )		1012963	1					
ANR	1012992	UnaryOperator	!		1012963	0					
ANR	1012993	BitAndExpression	flags & ARGS_SWAPPED		1012963	1		&			
ANR	1012994	Identifier	flags		1012963	0					
ANR	1012995	Identifier	ARGS_SWAPPED		1012963	1					
ANR	1012996	IfStatement	if ( dst != src2 )		1012963	2					
ANR	1012997	Condition	dst != src2	994:6:32038:32048	1012963	0	True				
ANR	1012998	EqualityExpression	dst != src2		1012963	0		!=			
ANR	1012999	Identifier	dst		1012963	0					
ANR	1013000	Identifier	src2		1012963	1					
ANR	1013001	CompoundStatement		7:19:146:146	1012963	1					
ANR	1013002	IfStatement	if ( src2 & SRC2_IMM )		1012963	0					
ANR	1013003	Condition	src2 & SRC2_IMM	995:7:32060:32074	1012963	0	True				
ANR	1013004	BitAndExpression	src2 & SRC2_IMM		1012963	0		&			
ANR	1013005	Identifier	src2		1012963	0					
ANR	1013006	Identifier	SRC2_IMM		1012963	1					
ANR	1013007	CompoundStatement		8:24:172:172	1012963	1					
ANR	1013008	IfStatement	if ( flags & INV_IMM )		1012963	0					
ANR	1013009	Condition	flags & INV_IMM	996:8:32087:32101	1012963	0	True				
ANR	1013010	BitAndExpression	flags & INV_IMM		1012963	0		&			
ANR	1013011	Identifier	flags		1012963	0					
ANR	1013012	Identifier	INV_IMM		1012963	1					
ANR	1013013	ExpressionStatement	"EMIT_FULL_DATA_PROCESS_INS_AND_RETURN ( MVN_DP , dst , SLJIT_UNUSED , src2 )"	997:5:32109:32179	1012963	1	True				
ANR	1013014	CallExpression	"EMIT_FULL_DATA_PROCESS_INS_AND_RETURN ( MVN_DP , dst , SLJIT_UNUSED , src2 )"		1012963	0					
ANR	1013015	Callee	EMIT_FULL_DATA_PROCESS_INS_AND_RETURN		1012963	0					
ANR	1013016	Identifier	EMIT_FULL_DATA_PROCESS_INS_AND_RETURN		1012963	0					
ANR	1013017	ArgumentList	MVN_DP		1012963	1					
ANR	1013018	Argument	MVN_DP		1012963	0					
ANR	1013019	Identifier	MVN_DP		1012963	0					
ANR	1013020	Argument	dst		1012963	1					
ANR	1013021	Identifier	dst		1012963	0					
ANR	1013022	Argument	SLJIT_UNUSED		1012963	2					
ANR	1013023	Identifier	SLJIT_UNUSED		1012963	0					
ANR	1013024	Argument	src2		1012963	3					
ANR	1013025	Identifier	src2		1012963	0					
ANR	1013026	ExpressionStatement	"EMIT_FULL_DATA_PROCESS_INS_AND_RETURN ( MOV_DP , dst , SLJIT_UNUSED , src2 )"	998:4:32185:32255	1012963	1	True				
ANR	1013027	CallExpression	"EMIT_FULL_DATA_PROCESS_INS_AND_RETURN ( MOV_DP , dst , SLJIT_UNUSED , src2 )"		1012963	0					
ANR	1013028	Callee	EMIT_FULL_DATA_PROCESS_INS_AND_RETURN		1012963	0					
ANR	1013029	Identifier	EMIT_FULL_DATA_PROCESS_INS_AND_RETURN		1012963	0					
ANR	1013030	ArgumentList	MOV_DP		1012963	1					
ANR	1013031	Argument	MOV_DP		1012963	0					
ANR	1013032	Identifier	MOV_DP		1012963	0					
ANR	1013033	Argument	dst		1012963	1					
ANR	1013034	Identifier	dst		1012963	0					
ANR	1013035	Argument	SLJIT_UNUSED		1012963	2					
ANR	1013036	Identifier	SLJIT_UNUSED		1012963	0					
ANR	1013037	Argument	src2		1012963	3					
ANR	1013038	Identifier	src2		1012963	0					
ANR	1013039	ExpressionStatement	"EMIT_FULL_DATA_PROCESS_INS_AND_RETURN ( MOV_DP , dst , SLJIT_UNUSED , reg_map [ src2 ] )"	1000:3:32265:32344	1012963	1	True				
ANR	1013040	CallExpression	"EMIT_FULL_DATA_PROCESS_INS_AND_RETURN ( MOV_DP , dst , SLJIT_UNUSED , reg_map [ src2 ] )"		1012963	0					
ANR	1013041	Callee	EMIT_FULL_DATA_PROCESS_INS_AND_RETURN		1012963	0					
ANR	1013042	Identifier	EMIT_FULL_DATA_PROCESS_INS_AND_RETURN		1012963	0					
ANR	1013043	ArgumentList	MOV_DP		1012963	1					
ANR	1013044	Argument	MOV_DP		1012963	0					
ANR	1013045	Identifier	MOV_DP		1012963	0					
ANR	1013046	Argument	dst		1012963	1					
ANR	1013047	Identifier	dst		1012963	0					
ANR	1013048	Argument	SLJIT_UNUSED		1012963	2					
ANR	1013049	Identifier	SLJIT_UNUSED		1012963	0					
ANR	1013050	Argument	reg_map [ src2 ]		1012963	3					
ANR	1013051	ArrayIndexing	reg_map [ src2 ]		1012963	0					
ANR	1013052	Identifier	reg_map		1012963	0					
ANR	1013053	Identifier	src2		1012963	1					
ANR	1013054	ReturnStatement	return SLJIT_SUCCESS ;	1002:2:32352:32372	1012963	3	True				
ANR	1013055	Identifier	SLJIT_SUCCESS		1012963	0					
ANR	1013056	Label	case SLJIT_MOV_UB :	1004:1:32376:32393	1012963	4	True				
ANR	1013057	Identifier	SLJIT_MOV_UB		1012963	0					
ANR	1013058	Label	case SLJIT_MOV_SB :	1005:1:32396:32413	1012963	5	True				
ANR	1013059	Identifier	SLJIT_MOV_SB		1012963	0					
ANR	1013060	ExpressionStatement	SLJIT_ASSERT ( src1 == TMP_REG1 && ! ( flags & ARGS_SWAPPED ) )	1006:2:32417:32474	1012963	6	True				
ANR	1013061	CallExpression	SLJIT_ASSERT ( src1 == TMP_REG1 && ! ( flags & ARGS_SWAPPED ) )		1012963	0					
ANR	1013062	Callee	SLJIT_ASSERT		1012963	0					
ANR	1013063	Identifier	SLJIT_ASSERT		1012963	0					
ANR	1013064	ArgumentList	src1 == TMP_REG1 && ! ( flags & ARGS_SWAPPED )		1012963	1					
ANR	1013065	Argument	src1 == TMP_REG1 && ! ( flags & ARGS_SWAPPED )		1012963	0					
ANR	1013066	AndExpression	src1 == TMP_REG1 && ! ( flags & ARGS_SWAPPED )		1012963	0		&&			
ANR	1013067	EqualityExpression	src1 == TMP_REG1		1012963	0		==			
ANR	1013068	Identifier	src1		1012963	0					
ANR	1013069	Identifier	TMP_REG1		1012963	1					
ANR	1013070	UnaryOperationExpression	! ( flags & ARGS_SWAPPED )		1012963	1					
ANR	1013071	UnaryOperator	!		1012963	0					
ANR	1013072	BitAndExpression	flags & ARGS_SWAPPED		1012963	1		&			
ANR	1013073	Identifier	flags		1012963	0					
ANR	1013074	Identifier	ARGS_SWAPPED		1012963	1					
ANR	1013075	IfStatement	if ( ( flags & ( REG_DEST | REG_SOURCE ) ) == ( REG_DEST | REG_SOURCE ) )		1012963	7					
ANR	1013076	Condition	( flags & ( REG_DEST | REG_SOURCE ) ) == ( REG_DEST | REG_SOURCE )	1007:6:32482:32541	1012963	0	True				
ANR	1013077	EqualityExpression	( flags & ( REG_DEST | REG_SOURCE ) ) == ( REG_DEST | REG_SOURCE )		1012963	0		==			
ANR	1013078	BitAndExpression	flags & ( REG_DEST | REG_SOURCE )		1012963	0		&			
ANR	1013079	Identifier	flags		1012963	0					
ANR	1013080	InclusiveOrExpression	REG_DEST | REG_SOURCE		1012963	1		|			
ANR	1013081	Identifier	REG_DEST		1012963	0					
ANR	1013082	Identifier	REG_SOURCE		1012963	1					
ANR	1013083	InclusiveOrExpression	REG_DEST | REG_SOURCE		1012963	1		|			
ANR	1013084	Identifier	REG_DEST		1012963	0					
ANR	1013085	Identifier	REG_SOURCE		1012963	1					
ANR	1013086	CompoundStatement		20:68:639:639	1012963	1					
ANR	1013087	IfStatement	if ( op == SLJIT_MOV_UB )		1012963	0					
ANR	1013088	Condition	op == SLJIT_MOV_UB	1009:7:32610:32627	1012963	0	True				
ANR	1013089	EqualityExpression	op == SLJIT_MOV_UB		1012963	0		==			
ANR	1013090	Identifier	op		1012963	0					
ANR	1013091	Identifier	SLJIT_MOV_UB		1012963	1					
ANR	1013092	ReturnStatement	"return push_inst ( compiler , EMIT_DATA_PROCESS_INS ( AND_DP , 0 , dst , src2 , SRC2_IMM | 0xff ) ) ;"	1010:4:32634:32722	1012963	1	True				
ANR	1013093	CallExpression	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( AND_DP , 0 , dst , src2 , SRC2_IMM | 0xff ) )"		1012963	0					
ANR	1013094	Callee	push_inst		1012963	0					
ANR	1013095	Identifier	push_inst		1012963	0					
ANR	1013096	ArgumentList	compiler		1012963	1					
ANR	1013097	Argument	compiler		1012963	0					
ANR	1013098	Identifier	compiler		1012963	0					
ANR	1013099	Argument	"EMIT_DATA_PROCESS_INS ( AND_DP , 0 , dst , src2 , SRC2_IMM | 0xff )"		1012963	1					
ANR	1013100	CallExpression	"EMIT_DATA_PROCESS_INS ( AND_DP , 0 , dst , src2 , SRC2_IMM | 0xff )"		1012963	0					
ANR	1013101	Callee	EMIT_DATA_PROCESS_INS		1012963	0					
ANR	1013102	Identifier	EMIT_DATA_PROCESS_INS		1012963	0					
ANR	1013103	ArgumentList	AND_DP		1012963	1					
ANR	1013104	Argument	AND_DP		1012963	0					
ANR	1013105	Identifier	AND_DP		1012963	0					
ANR	1013106	Argument	0		1012963	1					
ANR	1013107	PrimaryExpression	0		1012963	0					
ANR	1013108	Argument	dst		1012963	2					
ANR	1013109	Identifier	dst		1012963	0					
ANR	1013110	Argument	src2		1012963	3					
ANR	1013111	Identifier	src2		1012963	0					
ANR	1013112	Argument	SRC2_IMM | 0xff		1012963	4					
ANR	1013113	InclusiveOrExpression	SRC2_IMM | 0xff		1012963	0		|			
ANR	1013114	Identifier	SRC2_IMM		1012963	0					
ANR	1013115	PrimaryExpression	0xff		1012963	1					
ANR	1013116	ExpressionStatement	"FAIL_IF ( push_inst ( compiler , EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , dst , SLJIT_UNUSED , ( 24 << 7 ) | reg_map [ src2 ] ) ) )"	1011:3:32727:32835	1012963	1	True				
ANR	1013117	CallExpression	"FAIL_IF ( push_inst ( compiler , EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , dst , SLJIT_UNUSED , ( 24 << 7 ) | reg_map [ src2 ] ) ) )"		1012963	0					
ANR	1013118	Callee	FAIL_IF		1012963	0					
ANR	1013119	Identifier	FAIL_IF		1012963	0					
ANR	1013120	ArgumentList	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , dst , SLJIT_UNUSED , ( 24 << 7 ) | reg_map [ src2 ] ) )"		1012963	1					
ANR	1013121	Argument	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , dst , SLJIT_UNUSED , ( 24 << 7 ) | reg_map [ src2 ] ) )"		1012963	0					
ANR	1013122	CallExpression	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , dst , SLJIT_UNUSED , ( 24 << 7 ) | reg_map [ src2 ] ) )"		1012963	0					
ANR	1013123	Callee	push_inst		1012963	0					
ANR	1013124	Identifier	push_inst		1012963	0					
ANR	1013125	ArgumentList	compiler		1012963	1					
ANR	1013126	Argument	compiler		1012963	0					
ANR	1013127	Identifier	compiler		1012963	0					
ANR	1013128	Argument	"EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , dst , SLJIT_UNUSED , ( 24 << 7 ) | reg_map [ src2 ] )"		1012963	1					
ANR	1013129	CallExpression	"EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , dst , SLJIT_UNUSED , ( 24 << 7 ) | reg_map [ src2 ] )"		1012963	0					
ANR	1013130	Callee	EMIT_DATA_PROCESS_INS		1012963	0					
ANR	1013131	Identifier	EMIT_DATA_PROCESS_INS		1012963	0					
ANR	1013132	ArgumentList	MOV_DP		1012963	1					
ANR	1013133	Argument	MOV_DP		1012963	0					
ANR	1013134	Identifier	MOV_DP		1012963	0					
ANR	1013135	Argument	0		1012963	1					
ANR	1013136	PrimaryExpression	0		1012963	0					
ANR	1013137	Argument	dst		1012963	2					
ANR	1013138	Identifier	dst		1012963	0					
ANR	1013139	Argument	SLJIT_UNUSED		1012963	3					
ANR	1013140	Identifier	SLJIT_UNUSED		1012963	0					
ANR	1013141	Argument	( 24 << 7 ) | reg_map [ src2 ]		1012963	4					
ANR	1013142	InclusiveOrExpression	( 24 << 7 ) | reg_map [ src2 ]		1012963	0		|			
ANR	1013143	ShiftExpression	24 << 7		1012963	0		<<			
ANR	1013144	PrimaryExpression	24		1012963	0					
ANR	1013145	PrimaryExpression	7		1012963	1					
ANR	1013146	ArrayIndexing	reg_map [ src2 ]		1012963	1					
ANR	1013147	Identifier	reg_map		1012963	0					
ANR	1013148	Identifier	src2		1012963	1					
ANR	1013149	ReturnStatement	"return push_inst ( compiler , EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , dst , SLJIT_UNUSED , ( 24 << 7 ) | ( op == SLJIT_MOV_UB ? 0x20 : 0x40 ) | reg_map [ dst ] ) ) ;"	1012:3:32840:32982	1012963	2	True				
ANR	1013150	CallExpression	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , dst , SLJIT_UNUSED , ( 24 << 7 ) | ( op == SLJIT_MOV_UB ? 0x20 : 0x40 ) | reg_map [ dst ] ) )"		1012963	0					
ANR	1013151	Callee	push_inst		1012963	0					
ANR	1013152	Identifier	push_inst		1012963	0					
ANR	1013153	ArgumentList	compiler		1012963	1					
ANR	1013154	Argument	compiler		1012963	0					
ANR	1013155	Identifier	compiler		1012963	0					
ANR	1013156	Argument	"EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , dst , SLJIT_UNUSED , ( 24 << 7 ) | ( op == SLJIT_MOV_UB ? 0x20 : 0x40 ) | reg_map [ dst ] )"		1012963	1					
ANR	1013157	CallExpression	"EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , dst , SLJIT_UNUSED , ( 24 << 7 ) | ( op == SLJIT_MOV_UB ? 0x20 : 0x40 ) | reg_map [ dst ] )"		1012963	0					
ANR	1013158	Callee	EMIT_DATA_PROCESS_INS		1012963	0					
ANR	1013159	Identifier	EMIT_DATA_PROCESS_INS		1012963	0					
ANR	1013160	ArgumentList	MOV_DP		1012963	1					
ANR	1013161	Argument	MOV_DP		1012963	0					
ANR	1013162	Identifier	MOV_DP		1012963	0					
ANR	1013163	Argument	0		1012963	1					
ANR	1013164	PrimaryExpression	0		1012963	0					
ANR	1013165	Argument	dst		1012963	2					
ANR	1013166	Identifier	dst		1012963	0					
ANR	1013167	Argument	SLJIT_UNUSED		1012963	3					
ANR	1013168	Identifier	SLJIT_UNUSED		1012963	0					
ANR	1013169	Argument	( 24 << 7 ) | ( op == SLJIT_MOV_UB ? 0x20 : 0x40 ) | reg_map [ dst ]		1012963	4					
ANR	1013170	InclusiveOrExpression	( 24 << 7 ) | ( op == SLJIT_MOV_UB ? 0x20 : 0x40 ) | reg_map [ dst ]		1012963	0		|			
ANR	1013171	ShiftExpression	24 << 7		1012963	0		<<			
ANR	1013172	PrimaryExpression	24		1012963	0					
ANR	1013173	PrimaryExpression	7		1012963	1					
ANR	1013174	InclusiveOrExpression	( op == SLJIT_MOV_UB ? 0x20 : 0x40 ) | reg_map [ dst ]		1012963	1		|			
ANR	1013175	ConditionalExpression	op == SLJIT_MOV_UB ? 0x20 : 0x40		1012963	0					
ANR	1013176	Condition	op == SLJIT_MOV_UB		1012963	0					
ANR	1013177	EqualityExpression	op == SLJIT_MOV_UB		1012963	0		==			
ANR	1013178	Identifier	op		1012963	0					
ANR	1013179	Identifier	SLJIT_MOV_UB		1012963	1					
ANR	1013180	PrimaryExpression	0x20		1012963	1					
ANR	1013181	PrimaryExpression	0x40		1012963	2					
ANR	1013182	ArrayIndexing	reg_map [ dst ]		1012963	1					
ANR	1013183	Identifier	reg_map		1012963	0					
ANR	1013184	Identifier	dst		1012963	1					
ANR	1013185	ElseStatement	else		1012963	0					
ANR	1013186	IfStatement	if ( dst != src2 )		1012963	0					
ANR	1013187	Condition	dst != src2	1017:11:33100:33110	1012963	0	True				
ANR	1013188	EqualityExpression	dst != src2		1012963	0		!=			
ANR	1013189	Identifier	dst		1012963	0					
ANR	1013190	Identifier	src2		1012963	1					
ANR	1013191	CompoundStatement		30:24:1208:1208	1012963	1					
ANR	1013192	ExpressionStatement	SLJIT_ASSERT ( src2 & SRC2_IMM )	1018:3:33118:33147	1012963	0	True				
ANR	1013193	CallExpression	SLJIT_ASSERT ( src2 & SRC2_IMM )		1012963	0					
ANR	1013194	Callee	SLJIT_ASSERT		1012963	0					
ANR	1013195	Identifier	SLJIT_ASSERT		1012963	0					
ANR	1013196	ArgumentList	src2 & SRC2_IMM		1012963	1					
ANR	1013197	Argument	src2 & SRC2_IMM		1012963	0					
ANR	1013198	BitAndExpression	src2 & SRC2_IMM		1012963	0		&			
ANR	1013199	Identifier	src2		1012963	0					
ANR	1013200	Identifier	SRC2_IMM		1012963	1					
ANR	1013201	IfStatement	if ( flags & INV_IMM )		1012963	1					
ANR	1013202	Condition	flags & INV_IMM	1019:7:33156:33170	1012963	0	True				
ANR	1013203	BitAndExpression	flags & INV_IMM		1012963	0		&			
ANR	1013204	Identifier	flags		1012963	0					
ANR	1013205	Identifier	INV_IMM		1012963	1					
ANR	1013206	ExpressionStatement	"EMIT_FULL_DATA_PROCESS_INS_AND_RETURN ( MVN_DP , dst , SLJIT_UNUSED , src2 )"	1020:4:33177:33247	1012963	1	True				
ANR	1013207	CallExpression	"EMIT_FULL_DATA_PROCESS_INS_AND_RETURN ( MVN_DP , dst , SLJIT_UNUSED , src2 )"		1012963	0					
ANR	1013208	Callee	EMIT_FULL_DATA_PROCESS_INS_AND_RETURN		1012963	0					
ANR	1013209	Identifier	EMIT_FULL_DATA_PROCESS_INS_AND_RETURN		1012963	0					
ANR	1013210	ArgumentList	MVN_DP		1012963	1					
ANR	1013211	Argument	MVN_DP		1012963	0					
ANR	1013212	Identifier	MVN_DP		1012963	0					
ANR	1013213	Argument	dst		1012963	1					
ANR	1013214	Identifier	dst		1012963	0					
ANR	1013215	Argument	SLJIT_UNUSED		1012963	2					
ANR	1013216	Identifier	SLJIT_UNUSED		1012963	0					
ANR	1013217	Argument	src2		1012963	3					
ANR	1013218	Identifier	src2		1012963	0					
ANR	1013219	ExpressionStatement	"EMIT_FULL_DATA_PROCESS_INS_AND_RETURN ( MOV_DP , dst , SLJIT_UNUSED , src2 )"	1021:3:33252:33322	1012963	2	True				
ANR	1013220	CallExpression	"EMIT_FULL_DATA_PROCESS_INS_AND_RETURN ( MOV_DP , dst , SLJIT_UNUSED , src2 )"		1012963	0					
ANR	1013221	Callee	EMIT_FULL_DATA_PROCESS_INS_AND_RETURN		1012963	0					
ANR	1013222	Identifier	EMIT_FULL_DATA_PROCESS_INS_AND_RETURN		1012963	0					
ANR	1013223	ArgumentList	MOV_DP		1012963	1					
ANR	1013224	Argument	MOV_DP		1012963	0					
ANR	1013225	Identifier	MOV_DP		1012963	0					
ANR	1013226	Argument	dst		1012963	1					
ANR	1013227	Identifier	dst		1012963	0					
ANR	1013228	Argument	SLJIT_UNUSED		1012963	2					
ANR	1013229	Identifier	SLJIT_UNUSED		1012963	0					
ANR	1013230	Argument	src2		1012963	3					
ANR	1013231	Identifier	src2		1012963	0					
ANR	1013232	ReturnStatement	return SLJIT_SUCCESS ;	1023:2:33330:33350	1012963	8	True				
ANR	1013233	Identifier	SLJIT_SUCCESS		1012963	0					
ANR	1013234	Label	case SLJIT_MOV_UH :	1025:1:33354:33371	1012963	9	True				
ANR	1013235	Identifier	SLJIT_MOV_UH		1012963	0					
ANR	1013236	Label	case SLJIT_MOV_SH :	1026:1:33374:33391	1012963	10	True				
ANR	1013237	Identifier	SLJIT_MOV_SH		1012963	0					
ANR	1013238	ExpressionStatement	SLJIT_ASSERT ( src1 == TMP_REG1 && ! ( flags & ARGS_SWAPPED ) )	1027:2:33395:33452	1012963	11	True				
ANR	1013239	CallExpression	SLJIT_ASSERT ( src1 == TMP_REG1 && ! ( flags & ARGS_SWAPPED ) )		1012963	0					
ANR	1013240	Callee	SLJIT_ASSERT		1012963	0					
ANR	1013241	Identifier	SLJIT_ASSERT		1012963	0					
ANR	1013242	ArgumentList	src1 == TMP_REG1 && ! ( flags & ARGS_SWAPPED )		1012963	1					
ANR	1013243	Argument	src1 == TMP_REG1 && ! ( flags & ARGS_SWAPPED )		1012963	0					
ANR	1013244	AndExpression	src1 == TMP_REG1 && ! ( flags & ARGS_SWAPPED )		1012963	0		&&			
ANR	1013245	EqualityExpression	src1 == TMP_REG1		1012963	0		==			
ANR	1013246	Identifier	src1		1012963	0					
ANR	1013247	Identifier	TMP_REG1		1012963	1					
ANR	1013248	UnaryOperationExpression	! ( flags & ARGS_SWAPPED )		1012963	1					
ANR	1013249	UnaryOperator	!		1012963	0					
ANR	1013250	BitAndExpression	flags & ARGS_SWAPPED		1012963	1		&			
ANR	1013251	Identifier	flags		1012963	0					
ANR	1013252	Identifier	ARGS_SWAPPED		1012963	1					
ANR	1013253	IfStatement	if ( ( flags & ( REG_DEST | REG_SOURCE ) ) == ( REG_DEST | REG_SOURCE ) )		1012963	12					
ANR	1013254	Condition	( flags & ( REG_DEST | REG_SOURCE ) ) == ( REG_DEST | REG_SOURCE )	1028:6:33460:33519	1012963	0	True				
ANR	1013255	EqualityExpression	( flags & ( REG_DEST | REG_SOURCE ) ) == ( REG_DEST | REG_SOURCE )		1012963	0		==			
ANR	1013256	BitAndExpression	flags & ( REG_DEST | REG_SOURCE )		1012963	0		&			
ANR	1013257	Identifier	flags		1012963	0					
ANR	1013258	InclusiveOrExpression	REG_DEST | REG_SOURCE		1012963	1		|			
ANR	1013259	Identifier	REG_DEST		1012963	0					
ANR	1013260	Identifier	REG_SOURCE		1012963	1					
ANR	1013261	InclusiveOrExpression	REG_DEST | REG_SOURCE		1012963	1		|			
ANR	1013262	Identifier	REG_DEST		1012963	0					
ANR	1013263	Identifier	REG_SOURCE		1012963	1					
ANR	1013264	CompoundStatement		41:68:1617:1617	1012963	1					
ANR	1013265	ExpressionStatement	"FAIL_IF ( push_inst ( compiler , EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , dst , SLJIT_UNUSED , ( 16 << 7 ) | reg_map [ src2 ] ) ) )"	1030:3:33584:33692	1012963	0	True				
ANR	1013266	CallExpression	"FAIL_IF ( push_inst ( compiler , EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , dst , SLJIT_UNUSED , ( 16 << 7 ) | reg_map [ src2 ] ) ) )"		1012963	0					
ANR	1013267	Callee	FAIL_IF		1012963	0					
ANR	1013268	Identifier	FAIL_IF		1012963	0					
ANR	1013269	ArgumentList	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , dst , SLJIT_UNUSED , ( 16 << 7 ) | reg_map [ src2 ] ) )"		1012963	1					
ANR	1013270	Argument	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , dst , SLJIT_UNUSED , ( 16 << 7 ) | reg_map [ src2 ] ) )"		1012963	0					
ANR	1013271	CallExpression	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , dst , SLJIT_UNUSED , ( 16 << 7 ) | reg_map [ src2 ] ) )"		1012963	0					
ANR	1013272	Callee	push_inst		1012963	0					
ANR	1013273	Identifier	push_inst		1012963	0					
ANR	1013274	ArgumentList	compiler		1012963	1					
ANR	1013275	Argument	compiler		1012963	0					
ANR	1013276	Identifier	compiler		1012963	0					
ANR	1013277	Argument	"EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , dst , SLJIT_UNUSED , ( 16 << 7 ) | reg_map [ src2 ] )"		1012963	1					
ANR	1013278	CallExpression	"EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , dst , SLJIT_UNUSED , ( 16 << 7 ) | reg_map [ src2 ] )"		1012963	0					
ANR	1013279	Callee	EMIT_DATA_PROCESS_INS		1012963	0					
ANR	1013280	Identifier	EMIT_DATA_PROCESS_INS		1012963	0					
ANR	1013281	ArgumentList	MOV_DP		1012963	1					
ANR	1013282	Argument	MOV_DP		1012963	0					
ANR	1013283	Identifier	MOV_DP		1012963	0					
ANR	1013284	Argument	0		1012963	1					
ANR	1013285	PrimaryExpression	0		1012963	0					
ANR	1013286	Argument	dst		1012963	2					
ANR	1013287	Identifier	dst		1012963	0					
ANR	1013288	Argument	SLJIT_UNUSED		1012963	3					
ANR	1013289	Identifier	SLJIT_UNUSED		1012963	0					
ANR	1013290	Argument	( 16 << 7 ) | reg_map [ src2 ]		1012963	4					
ANR	1013291	InclusiveOrExpression	( 16 << 7 ) | reg_map [ src2 ]		1012963	0		|			
ANR	1013292	ShiftExpression	16 << 7		1012963	0		<<			
ANR	1013293	PrimaryExpression	16		1012963	0					
ANR	1013294	PrimaryExpression	7		1012963	1					
ANR	1013295	ArrayIndexing	reg_map [ src2 ]		1012963	1					
ANR	1013296	Identifier	reg_map		1012963	0					
ANR	1013297	Identifier	src2		1012963	1					
ANR	1013298	ReturnStatement	"return push_inst ( compiler , EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , dst , SLJIT_UNUSED , ( 16 << 7 ) | ( op == SLJIT_MOV_UH ? 0x20 : 0x40 ) | reg_map [ dst ] ) ) ;"	1031:3:33697:33839	1012963	1	True				
ANR	1013299	CallExpression	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , dst , SLJIT_UNUSED , ( 16 << 7 ) | ( op == SLJIT_MOV_UH ? 0x20 : 0x40 ) | reg_map [ dst ] ) )"		1012963	0					
ANR	1013300	Callee	push_inst		1012963	0					
ANR	1013301	Identifier	push_inst		1012963	0					
ANR	1013302	ArgumentList	compiler		1012963	1					
ANR	1013303	Argument	compiler		1012963	0					
ANR	1013304	Identifier	compiler		1012963	0					
ANR	1013305	Argument	"EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , dst , SLJIT_UNUSED , ( 16 << 7 ) | ( op == SLJIT_MOV_UH ? 0x20 : 0x40 ) | reg_map [ dst ] )"		1012963	1					
ANR	1013306	CallExpression	"EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , dst , SLJIT_UNUSED , ( 16 << 7 ) | ( op == SLJIT_MOV_UH ? 0x20 : 0x40 ) | reg_map [ dst ] )"		1012963	0					
ANR	1013307	Callee	EMIT_DATA_PROCESS_INS		1012963	0					
ANR	1013308	Identifier	EMIT_DATA_PROCESS_INS		1012963	0					
ANR	1013309	ArgumentList	MOV_DP		1012963	1					
ANR	1013310	Argument	MOV_DP		1012963	0					
ANR	1013311	Identifier	MOV_DP		1012963	0					
ANR	1013312	Argument	0		1012963	1					
ANR	1013313	PrimaryExpression	0		1012963	0					
ANR	1013314	Argument	dst		1012963	2					
ANR	1013315	Identifier	dst		1012963	0					
ANR	1013316	Argument	SLJIT_UNUSED		1012963	3					
ANR	1013317	Identifier	SLJIT_UNUSED		1012963	0					
ANR	1013318	Argument	( 16 << 7 ) | ( op == SLJIT_MOV_UH ? 0x20 : 0x40 ) | reg_map [ dst ]		1012963	4					
ANR	1013319	InclusiveOrExpression	( 16 << 7 ) | ( op == SLJIT_MOV_UH ? 0x20 : 0x40 ) | reg_map [ dst ]		1012963	0		|			
ANR	1013320	ShiftExpression	16 << 7		1012963	0		<<			
ANR	1013321	PrimaryExpression	16		1012963	0					
ANR	1013322	PrimaryExpression	7		1012963	1					
ANR	1013323	InclusiveOrExpression	( op == SLJIT_MOV_UH ? 0x20 : 0x40 ) | reg_map [ dst ]		1012963	1		|			
ANR	1013324	ConditionalExpression	op == SLJIT_MOV_UH ? 0x20 : 0x40		1012963	0					
ANR	1013325	Condition	op == SLJIT_MOV_UH		1012963	0					
ANR	1013326	EqualityExpression	op == SLJIT_MOV_UH		1012963	0		==			
ANR	1013327	Identifier	op		1012963	0					
ANR	1013328	Identifier	SLJIT_MOV_UH		1012963	1					
ANR	1013329	PrimaryExpression	0x20		1012963	1					
ANR	1013330	PrimaryExpression	0x40		1012963	2					
ANR	1013331	ArrayIndexing	reg_map [ dst ]		1012963	1					
ANR	1013332	Identifier	reg_map		1012963	0					
ANR	1013333	Identifier	dst		1012963	1					
ANR	1013334	ElseStatement	else		1012963	0					
ANR	1013335	IfStatement	if ( dst != src2 )		1012963	0					
ANR	1013336	Condition	dst != src2	1036:11:33957:33967	1012963	0	True				
ANR	1013337	EqualityExpression	dst != src2		1012963	0		!=			
ANR	1013338	Identifier	dst		1012963	0					
ANR	1013339	Identifier	src2		1012963	1					
ANR	1013340	CompoundStatement		49:24:2065:2065	1012963	1					
ANR	1013341	ExpressionStatement	SLJIT_ASSERT ( src2 & SRC2_IMM )	1037:3:33975:34004	1012963	0	True				
ANR	1013342	CallExpression	SLJIT_ASSERT ( src2 & SRC2_IMM )		1012963	0					
ANR	1013343	Callee	SLJIT_ASSERT		1012963	0					
ANR	1013344	Identifier	SLJIT_ASSERT		1012963	0					
ANR	1013345	ArgumentList	src2 & SRC2_IMM		1012963	1					
ANR	1013346	Argument	src2 & SRC2_IMM		1012963	0					
ANR	1013347	BitAndExpression	src2 & SRC2_IMM		1012963	0		&			
ANR	1013348	Identifier	src2		1012963	0					
ANR	1013349	Identifier	SRC2_IMM		1012963	1					
ANR	1013350	IfStatement	if ( flags & INV_IMM )		1012963	1					
ANR	1013351	Condition	flags & INV_IMM	1038:7:34013:34027	1012963	0	True				
ANR	1013352	BitAndExpression	flags & INV_IMM		1012963	0		&			
ANR	1013353	Identifier	flags		1012963	0					
ANR	1013354	Identifier	INV_IMM		1012963	1					
ANR	1013355	ExpressionStatement	"EMIT_FULL_DATA_PROCESS_INS_AND_RETURN ( MVN_DP , dst , SLJIT_UNUSED , src2 )"	1039:4:34034:34104	1012963	1	True				
ANR	1013356	CallExpression	"EMIT_FULL_DATA_PROCESS_INS_AND_RETURN ( MVN_DP , dst , SLJIT_UNUSED , src2 )"		1012963	0					
ANR	1013357	Callee	EMIT_FULL_DATA_PROCESS_INS_AND_RETURN		1012963	0					
ANR	1013358	Identifier	EMIT_FULL_DATA_PROCESS_INS_AND_RETURN		1012963	0					
ANR	1013359	ArgumentList	MVN_DP		1012963	1					
ANR	1013360	Argument	MVN_DP		1012963	0					
ANR	1013361	Identifier	MVN_DP		1012963	0					
ANR	1013362	Argument	dst		1012963	1					
ANR	1013363	Identifier	dst		1012963	0					
ANR	1013364	Argument	SLJIT_UNUSED		1012963	2					
ANR	1013365	Identifier	SLJIT_UNUSED		1012963	0					
ANR	1013366	Argument	src2		1012963	3					
ANR	1013367	Identifier	src2		1012963	0					
ANR	1013368	ExpressionStatement	"EMIT_FULL_DATA_PROCESS_INS_AND_RETURN ( MOV_DP , dst , SLJIT_UNUSED , src2 )"	1040:3:34109:34179	1012963	2	True				
ANR	1013369	CallExpression	"EMIT_FULL_DATA_PROCESS_INS_AND_RETURN ( MOV_DP , dst , SLJIT_UNUSED , src2 )"		1012963	0					
ANR	1013370	Callee	EMIT_FULL_DATA_PROCESS_INS_AND_RETURN		1012963	0					
ANR	1013371	Identifier	EMIT_FULL_DATA_PROCESS_INS_AND_RETURN		1012963	0					
ANR	1013372	ArgumentList	MOV_DP		1012963	1					
ANR	1013373	Argument	MOV_DP		1012963	0					
ANR	1013374	Identifier	MOV_DP		1012963	0					
ANR	1013375	Argument	dst		1012963	1					
ANR	1013376	Identifier	dst		1012963	0					
ANR	1013377	Argument	SLJIT_UNUSED		1012963	2					
ANR	1013378	Identifier	SLJIT_UNUSED		1012963	0					
ANR	1013379	Argument	src2		1012963	3					
ANR	1013380	Identifier	src2		1012963	0					
ANR	1013381	ReturnStatement	return SLJIT_SUCCESS ;	1042:2:34187:34207	1012963	13	True				
ANR	1013382	Identifier	SLJIT_SUCCESS		1012963	0					
ANR	1013383	Label	case SLJIT_NOT :	1044:1:34211:34225	1012963	14	True				
ANR	1013384	Identifier	SLJIT_NOT		1012963	0					
ANR	1013385	IfStatement	if ( src2 & SRC2_IMM )		1012963	15					
ANR	1013386	Condition	src2 & SRC2_IMM	1045:6:34233:34247	1012963	0	True				
ANR	1013387	BitAndExpression	src2 & SRC2_IMM		1012963	0		&			
ANR	1013388	Identifier	src2		1012963	0					
ANR	1013389	Identifier	SRC2_IMM		1012963	1					
ANR	1013390	CompoundStatement		58:23:2345:2345	1012963	1					
ANR	1013391	IfStatement	if ( flags & INV_IMM )		1012963	0					
ANR	1013392	Condition	flags & INV_IMM	1046:7:34259:34273	1012963	0	True				
ANR	1013393	BitAndExpression	flags & INV_IMM		1012963	0		&			
ANR	1013394	Identifier	flags		1012963	0					
ANR	1013395	Identifier	INV_IMM		1012963	1					
ANR	1013396	ExpressionStatement	"EMIT_FULL_DATA_PROCESS_INS_AND_RETURN ( MOV_DP , dst , SLJIT_UNUSED , src2 )"	1047:4:34280:34350	1012963	1	True				
ANR	1013397	CallExpression	"EMIT_FULL_DATA_PROCESS_INS_AND_RETURN ( MOV_DP , dst , SLJIT_UNUSED , src2 )"		1012963	0					
ANR	1013398	Callee	EMIT_FULL_DATA_PROCESS_INS_AND_RETURN		1012963	0					
ANR	1013399	Identifier	EMIT_FULL_DATA_PROCESS_INS_AND_RETURN		1012963	0					
ANR	1013400	ArgumentList	MOV_DP		1012963	1					
ANR	1013401	Argument	MOV_DP		1012963	0					
ANR	1013402	Identifier	MOV_DP		1012963	0					
ANR	1013403	Argument	dst		1012963	1					
ANR	1013404	Identifier	dst		1012963	0					
ANR	1013405	Argument	SLJIT_UNUSED		1012963	2					
ANR	1013406	Identifier	SLJIT_UNUSED		1012963	0					
ANR	1013407	Argument	src2		1012963	3					
ANR	1013408	Identifier	src2		1012963	0					
ANR	1013409	ExpressionStatement	"EMIT_FULL_DATA_PROCESS_INS_AND_RETURN ( MVN_DP , dst , SLJIT_UNUSED , src2 )"	1048:3:34355:34425	1012963	1	True				
ANR	1013410	CallExpression	"EMIT_FULL_DATA_PROCESS_INS_AND_RETURN ( MVN_DP , dst , SLJIT_UNUSED , src2 )"		1012963	0					
ANR	1013411	Callee	EMIT_FULL_DATA_PROCESS_INS_AND_RETURN		1012963	0					
ANR	1013412	Identifier	EMIT_FULL_DATA_PROCESS_INS_AND_RETURN		1012963	0					
ANR	1013413	ArgumentList	MVN_DP		1012963	1					
ANR	1013414	Argument	MVN_DP		1012963	0					
ANR	1013415	Identifier	MVN_DP		1012963	0					
ANR	1013416	Argument	dst		1012963	1					
ANR	1013417	Identifier	dst		1012963	0					
ANR	1013418	Argument	SLJIT_UNUSED		1012963	2					
ANR	1013419	Identifier	SLJIT_UNUSED		1012963	0					
ANR	1013420	Argument	src2		1012963	3					
ANR	1013421	Identifier	src2		1012963	0					
ANR	1013422	ExpressionStatement	"EMIT_FULL_DATA_PROCESS_INS_AND_RETURN ( MVN_DP , dst , SLJIT_UNUSED , RM ( src2 ) )"	1050:2:34433:34507	1012963	16	True				
ANR	1013423	CallExpression	"EMIT_FULL_DATA_PROCESS_INS_AND_RETURN ( MVN_DP , dst , SLJIT_UNUSED , RM ( src2 ) )"		1012963	0					
ANR	1013424	Callee	EMIT_FULL_DATA_PROCESS_INS_AND_RETURN		1012963	0					
ANR	1013425	Identifier	EMIT_FULL_DATA_PROCESS_INS_AND_RETURN		1012963	0					
ANR	1013426	ArgumentList	MVN_DP		1012963	1					
ANR	1013427	Argument	MVN_DP		1012963	0					
ANR	1013428	Identifier	MVN_DP		1012963	0					
ANR	1013429	Argument	dst		1012963	1					
ANR	1013430	Identifier	dst		1012963	0					
ANR	1013431	Argument	SLJIT_UNUSED		1012963	2					
ANR	1013432	Identifier	SLJIT_UNUSED		1012963	0					
ANR	1013433	Argument	RM ( src2 )		1012963	3					
ANR	1013434	CallExpression	RM ( src2 )		1012963	0					
ANR	1013435	Callee	RM		1012963	0					
ANR	1013436	Identifier	RM		1012963	0					
ANR	1013437	ArgumentList	src2		1012963	1					
ANR	1013438	Argument	src2		1012963	0					
ANR	1013439	Identifier	src2		1012963	0					
ANR	1013440	Label	case SLJIT_CLZ :	1052:1:34511:34525	1012963	17	True				
ANR	1013441	Identifier	SLJIT_CLZ		1012963	0					
ANR	1013442	ExpressionStatement	SLJIT_ASSERT ( ! ( flags & INV_IMM ) )	1053:2:34529:34561	1012963	18	True				
ANR	1013443	CallExpression	SLJIT_ASSERT ( ! ( flags & INV_IMM ) )		1012963	0					
ANR	1013444	Callee	SLJIT_ASSERT		1012963	0					
ANR	1013445	Identifier	SLJIT_ASSERT		1012963	0					
ANR	1013446	ArgumentList	! ( flags & INV_IMM )		1012963	1					
ANR	1013447	Argument	! ( flags & INV_IMM )		1012963	0					
ANR	1013448	UnaryOperationExpression	! ( flags & INV_IMM )		1012963	0					
ANR	1013449	UnaryOperator	!		1012963	0					
ANR	1013450	BitAndExpression	flags & INV_IMM		1012963	1		&			
ANR	1013451	Identifier	flags		1012963	0					
ANR	1013452	Identifier	INV_IMM		1012963	1					
ANR	1013453	ExpressionStatement	SLJIT_ASSERT ( ! ( src2 & SRC2_IMM ) )	1054:2:34565:34597	1012963	19	True				
ANR	1013454	CallExpression	SLJIT_ASSERT ( ! ( src2 & SRC2_IMM ) )		1012963	0					
ANR	1013455	Callee	SLJIT_ASSERT		1012963	0					
ANR	1013456	Identifier	SLJIT_ASSERT		1012963	0					
ANR	1013457	ArgumentList	! ( src2 & SRC2_IMM )		1012963	1					
ANR	1013458	Argument	! ( src2 & SRC2_IMM )		1012963	0					
ANR	1013459	UnaryOperationExpression	! ( src2 & SRC2_IMM )		1012963	0					
ANR	1013460	UnaryOperator	!		1012963	0					
ANR	1013461	BitAndExpression	src2 & SRC2_IMM		1012963	1		&			
ANR	1013462	Identifier	src2		1012963	0					
ANR	1013463	Identifier	SRC2_IMM		1012963	1					
ANR	1013464	ExpressionStatement	"FAIL_IF ( push_inst ( compiler , CLZ | RD ( dst ) | RM ( src2 ) ) )"	1055:2:34601:34655	1012963	20	True				
ANR	1013465	CallExpression	"FAIL_IF ( push_inst ( compiler , CLZ | RD ( dst ) | RM ( src2 ) ) )"		1012963	0					
ANR	1013466	Callee	FAIL_IF		1012963	0					
ANR	1013467	Identifier	FAIL_IF		1012963	0					
ANR	1013468	ArgumentList	"push_inst ( compiler , CLZ | RD ( dst ) | RM ( src2 ) )"		1012963	1					
ANR	1013469	Argument	"push_inst ( compiler , CLZ | RD ( dst ) | RM ( src2 ) )"		1012963	0					
ANR	1013470	CallExpression	"push_inst ( compiler , CLZ | RD ( dst ) | RM ( src2 ) )"		1012963	0					
ANR	1013471	Callee	push_inst		1012963	0					
ANR	1013472	Identifier	push_inst		1012963	0					
ANR	1013473	ArgumentList	compiler		1012963	1					
ANR	1013474	Argument	compiler		1012963	0					
ANR	1013475	Identifier	compiler		1012963	0					
ANR	1013476	Argument	CLZ | RD ( dst ) | RM ( src2 )		1012963	1					
ANR	1013477	InclusiveOrExpression	CLZ | RD ( dst ) | RM ( src2 )		1012963	0		|			
ANR	1013478	Identifier	CLZ		1012963	0					
ANR	1013479	InclusiveOrExpression	RD ( dst ) | RM ( src2 )		1012963	1		|			
ANR	1013480	CallExpression	RD ( dst )		1012963	0					
ANR	1013481	Callee	RD		1012963	0					
ANR	1013482	Identifier	RD		1012963	0					
ANR	1013483	ArgumentList	dst		1012963	1					
ANR	1013484	Argument	dst		1012963	0					
ANR	1013485	Identifier	dst		1012963	0					
ANR	1013486	CallExpression	RM ( src2 )		1012963	1					
ANR	1013487	Callee	RM		1012963	0					
ANR	1013488	Identifier	RM		1012963	0					
ANR	1013489	ArgumentList	src2		1012963	1					
ANR	1013490	Argument	src2		1012963	0					
ANR	1013491	Identifier	src2		1012963	0					
ANR	1013492	IfStatement	if ( flags & SET_FLAGS )		1012963	21					
ANR	1013493	Condition	flags & SET_FLAGS	1056:6:34663:34679	1012963	0	True				
ANR	1013494	BitAndExpression	flags & SET_FLAGS		1012963	0		&			
ANR	1013495	Identifier	flags		1012963	0					
ANR	1013496	Identifier	SET_FLAGS		1012963	1					
ANR	1013497	ExpressionStatement	"EMIT_FULL_DATA_PROCESS_INS_AND_RETURN ( CMP_DP , SLJIT_UNUSED , dst , SRC2_IMM )"	1057:3:34685:34759	1012963	1	True				
ANR	1013498	CallExpression	"EMIT_FULL_DATA_PROCESS_INS_AND_RETURN ( CMP_DP , SLJIT_UNUSED , dst , SRC2_IMM )"		1012963	0					
ANR	1013499	Callee	EMIT_FULL_DATA_PROCESS_INS_AND_RETURN		1012963	0					
ANR	1013500	Identifier	EMIT_FULL_DATA_PROCESS_INS_AND_RETURN		1012963	0					
ANR	1013501	ArgumentList	CMP_DP		1012963	1					
ANR	1013502	Argument	CMP_DP		1012963	0					
ANR	1013503	Identifier	CMP_DP		1012963	0					
ANR	1013504	Argument	SLJIT_UNUSED		1012963	1					
ANR	1013505	Identifier	SLJIT_UNUSED		1012963	0					
ANR	1013506	Argument	dst		1012963	2					
ANR	1013507	Identifier	dst		1012963	0					
ANR	1013508	Argument	SRC2_IMM		1012963	3					
ANR	1013509	Identifier	SRC2_IMM		1012963	0					
ANR	1013510	ReturnStatement	return SLJIT_SUCCESS ;	1058:2:34763:34783	1012963	22	True				
ANR	1013511	Identifier	SLJIT_SUCCESS		1012963	0					
ANR	1013512	Label	case SLJIT_ADD :	1060:1:34787:34801	1012963	23	True				
ANR	1013513	Identifier	SLJIT_ADD		1012963	0					
ANR	1013514	ExpressionStatement	SLJIT_ASSERT ( ! ( flags & INV_IMM ) )	1061:2:34805:34837	1012963	24	True				
ANR	1013515	CallExpression	SLJIT_ASSERT ( ! ( flags & INV_IMM ) )		1012963	0					
ANR	1013516	Callee	SLJIT_ASSERT		1012963	0					
ANR	1013517	Identifier	SLJIT_ASSERT		1012963	0					
ANR	1013518	ArgumentList	! ( flags & INV_IMM )		1012963	1					
ANR	1013519	Argument	! ( flags & INV_IMM )		1012963	0					
ANR	1013520	UnaryOperationExpression	! ( flags & INV_IMM )		1012963	0					
ANR	1013521	UnaryOperator	!		1012963	0					
ANR	1013522	BitAndExpression	flags & INV_IMM		1012963	1		&			
ANR	1013523	Identifier	flags		1012963	0					
ANR	1013524	Identifier	INV_IMM		1012963	1					
ANR	1013525	ExpressionStatement	EMIT_DATA_PROCESS_INS_AND_RETURN ( ADD_DP )	1062:2:34841:34881	1012963	25	True				
ANR	1013526	CallExpression	EMIT_DATA_PROCESS_INS_AND_RETURN ( ADD_DP )		1012963	0					
ANR	1013527	Callee	EMIT_DATA_PROCESS_INS_AND_RETURN		1012963	0					
ANR	1013528	Identifier	EMIT_DATA_PROCESS_INS_AND_RETURN		1012963	0					
ANR	1013529	ArgumentList	ADD_DP		1012963	1					
ANR	1013530	Argument	ADD_DP		1012963	0					
ANR	1013531	Identifier	ADD_DP		1012963	0					
ANR	1013532	Label	case SLJIT_ADDC :	1064:1:34885:34900	1012963	26	True				
ANR	1013533	Identifier	SLJIT_ADDC		1012963	0					
ANR	1013534	ExpressionStatement	SLJIT_ASSERT ( ! ( flags & INV_IMM ) )	1065:2:34904:34936	1012963	27	True				
ANR	1013535	CallExpression	SLJIT_ASSERT ( ! ( flags & INV_IMM ) )		1012963	0					
ANR	1013536	Callee	SLJIT_ASSERT		1012963	0					
ANR	1013537	Identifier	SLJIT_ASSERT		1012963	0					
ANR	1013538	ArgumentList	! ( flags & INV_IMM )		1012963	1					
ANR	1013539	Argument	! ( flags & INV_IMM )		1012963	0					
ANR	1013540	UnaryOperationExpression	! ( flags & INV_IMM )		1012963	0					
ANR	1013541	UnaryOperator	!		1012963	0					
ANR	1013542	BitAndExpression	flags & INV_IMM		1012963	1		&			
ANR	1013543	Identifier	flags		1012963	0					
ANR	1013544	Identifier	INV_IMM		1012963	1					
ANR	1013545	ExpressionStatement	EMIT_DATA_PROCESS_INS_AND_RETURN ( ADC_DP )	1066:2:34940:34980	1012963	28	True				
ANR	1013546	CallExpression	EMIT_DATA_PROCESS_INS_AND_RETURN ( ADC_DP )		1012963	0					
ANR	1013547	Callee	EMIT_DATA_PROCESS_INS_AND_RETURN		1012963	0					
ANR	1013548	Identifier	EMIT_DATA_PROCESS_INS_AND_RETURN		1012963	0					
ANR	1013549	ArgumentList	ADC_DP		1012963	1					
ANR	1013550	Argument	ADC_DP		1012963	0					
ANR	1013551	Identifier	ADC_DP		1012963	0					
ANR	1013552	Label	case SLJIT_SUB :	1068:1:34984:34998	1012963	29	True				
ANR	1013553	Identifier	SLJIT_SUB		1012963	0					
ANR	1013554	ExpressionStatement	SLJIT_ASSERT ( ! ( flags & INV_IMM ) )	1069:2:35002:35034	1012963	30	True				
ANR	1013555	CallExpression	SLJIT_ASSERT ( ! ( flags & INV_IMM ) )		1012963	0					
ANR	1013556	Callee	SLJIT_ASSERT		1012963	0					
ANR	1013557	Identifier	SLJIT_ASSERT		1012963	0					
ANR	1013558	ArgumentList	! ( flags & INV_IMM )		1012963	1					
ANR	1013559	Argument	! ( flags & INV_IMM )		1012963	0					
ANR	1013560	UnaryOperationExpression	! ( flags & INV_IMM )		1012963	0					
ANR	1013561	UnaryOperator	!		1012963	0					
ANR	1013562	BitAndExpression	flags & INV_IMM		1012963	1		&			
ANR	1013563	Identifier	flags		1012963	0					
ANR	1013564	Identifier	INV_IMM		1012963	1					
ANR	1013565	IfStatement	if ( ! ( flags & ARGS_SWAPPED ) )		1012963	31					
ANR	1013566	Condition	! ( flags & ARGS_SWAPPED )	1070:6:35042:35064	1012963	0	True				
ANR	1013567	UnaryOperationExpression	! ( flags & ARGS_SWAPPED )		1012963	0					
ANR	1013568	UnaryOperator	!		1012963	0					
ANR	1013569	BitAndExpression	flags & ARGS_SWAPPED		1012963	1		&			
ANR	1013570	Identifier	flags		1012963	0					
ANR	1013571	Identifier	ARGS_SWAPPED		1012963	1					
ANR	1013572	ExpressionStatement	EMIT_DATA_PROCESS_INS_AND_RETURN ( SUB_DP )	1071:3:35070:35110	1012963	1	True				
ANR	1013573	CallExpression	EMIT_DATA_PROCESS_INS_AND_RETURN ( SUB_DP )		1012963	0					
ANR	1013574	Callee	EMIT_DATA_PROCESS_INS_AND_RETURN		1012963	0					
ANR	1013575	Identifier	EMIT_DATA_PROCESS_INS_AND_RETURN		1012963	0					
ANR	1013576	ArgumentList	SUB_DP		1012963	1					
ANR	1013577	Argument	SUB_DP		1012963	0					
ANR	1013578	Identifier	SUB_DP		1012963	0					
ANR	1013579	ExpressionStatement	EMIT_DATA_PROCESS_INS_AND_RETURN ( RSB_DP )	1072:2:35114:35154	1012963	32	True				
ANR	1013580	CallExpression	EMIT_DATA_PROCESS_INS_AND_RETURN ( RSB_DP )		1012963	0					
ANR	1013581	Callee	EMIT_DATA_PROCESS_INS_AND_RETURN		1012963	0					
ANR	1013582	Identifier	EMIT_DATA_PROCESS_INS_AND_RETURN		1012963	0					
ANR	1013583	ArgumentList	RSB_DP		1012963	1					
ANR	1013584	Argument	RSB_DP		1012963	0					
ANR	1013585	Identifier	RSB_DP		1012963	0					
ANR	1013586	Label	case SLJIT_SUBC :	1074:1:35158:35173	1012963	33	True				
ANR	1013587	Identifier	SLJIT_SUBC		1012963	0					
ANR	1013588	ExpressionStatement	SLJIT_ASSERT ( ! ( flags & INV_IMM ) )	1075:2:35177:35209	1012963	34	True				
ANR	1013589	CallExpression	SLJIT_ASSERT ( ! ( flags & INV_IMM ) )		1012963	0					
ANR	1013590	Callee	SLJIT_ASSERT		1012963	0					
ANR	1013591	Identifier	SLJIT_ASSERT		1012963	0					
ANR	1013592	ArgumentList	! ( flags & INV_IMM )		1012963	1					
ANR	1013593	Argument	! ( flags & INV_IMM )		1012963	0					
ANR	1013594	UnaryOperationExpression	! ( flags & INV_IMM )		1012963	0					
ANR	1013595	UnaryOperator	!		1012963	0					
ANR	1013596	BitAndExpression	flags & INV_IMM		1012963	1		&			
ANR	1013597	Identifier	flags		1012963	0					
ANR	1013598	Identifier	INV_IMM		1012963	1					
ANR	1013599	IfStatement	if ( ! ( flags & ARGS_SWAPPED ) )		1012963	35					
ANR	1013600	Condition	! ( flags & ARGS_SWAPPED )	1076:6:35217:35239	1012963	0	True				
ANR	1013601	UnaryOperationExpression	! ( flags & ARGS_SWAPPED )		1012963	0					
ANR	1013602	UnaryOperator	!		1012963	0					
ANR	1013603	BitAndExpression	flags & ARGS_SWAPPED		1012963	1		&			
ANR	1013604	Identifier	flags		1012963	0					
ANR	1013605	Identifier	ARGS_SWAPPED		1012963	1					
ANR	1013606	ExpressionStatement	EMIT_DATA_PROCESS_INS_AND_RETURN ( SBC_DP )	1077:3:35245:35285	1012963	1	True				
ANR	1013607	CallExpression	EMIT_DATA_PROCESS_INS_AND_RETURN ( SBC_DP )		1012963	0					
ANR	1013608	Callee	EMIT_DATA_PROCESS_INS_AND_RETURN		1012963	0					
ANR	1013609	Identifier	EMIT_DATA_PROCESS_INS_AND_RETURN		1012963	0					
ANR	1013610	ArgumentList	SBC_DP		1012963	1					
ANR	1013611	Argument	SBC_DP		1012963	0					
ANR	1013612	Identifier	SBC_DP		1012963	0					
ANR	1013613	ExpressionStatement	EMIT_DATA_PROCESS_INS_AND_RETURN ( RSC_DP )	1078:2:35289:35329	1012963	36	True				
ANR	1013614	CallExpression	EMIT_DATA_PROCESS_INS_AND_RETURN ( RSC_DP )		1012963	0					
ANR	1013615	Callee	EMIT_DATA_PROCESS_INS_AND_RETURN		1012963	0					
ANR	1013616	Identifier	EMIT_DATA_PROCESS_INS_AND_RETURN		1012963	0					
ANR	1013617	ArgumentList	RSC_DP		1012963	1					
ANR	1013618	Argument	RSC_DP		1012963	0					
ANR	1013619	Identifier	RSC_DP		1012963	0					
ANR	1013620	Label	case SLJIT_MUL :	1080:1:35333:35347	1012963	37	True				
ANR	1013621	Identifier	SLJIT_MUL		1012963	0					
ANR	1013622	ExpressionStatement	SLJIT_ASSERT ( ! ( flags & INV_IMM ) )	1081:2:35351:35383	1012963	38	True				
ANR	1013623	CallExpression	SLJIT_ASSERT ( ! ( flags & INV_IMM ) )		1012963	0					
ANR	1013624	Callee	SLJIT_ASSERT		1012963	0					
ANR	1013625	Identifier	SLJIT_ASSERT		1012963	0					
ANR	1013626	ArgumentList	! ( flags & INV_IMM )		1012963	1					
ANR	1013627	Argument	! ( flags & INV_IMM )		1012963	0					
ANR	1013628	UnaryOperationExpression	! ( flags & INV_IMM )		1012963	0					
ANR	1013629	UnaryOperator	!		1012963	0					
ANR	1013630	BitAndExpression	flags & INV_IMM		1012963	1		&			
ANR	1013631	Identifier	flags		1012963	0					
ANR	1013632	Identifier	INV_IMM		1012963	1					
ANR	1013633	ExpressionStatement	SLJIT_ASSERT ( ! ( src2 & SRC2_IMM ) )	1082:2:35387:35419	1012963	39	True				
ANR	1013634	CallExpression	SLJIT_ASSERT ( ! ( src2 & SRC2_IMM ) )		1012963	0					
ANR	1013635	Callee	SLJIT_ASSERT		1012963	0					
ANR	1013636	Identifier	SLJIT_ASSERT		1012963	0					
ANR	1013637	ArgumentList	! ( src2 & SRC2_IMM )		1012963	1					
ANR	1013638	Argument	! ( src2 & SRC2_IMM )		1012963	0					
ANR	1013639	UnaryOperationExpression	! ( src2 & SRC2_IMM )		1012963	0					
ANR	1013640	UnaryOperator	!		1012963	0					
ANR	1013641	BitAndExpression	src2 & SRC2_IMM		1012963	1		&			
ANR	1013642	Identifier	src2		1012963	0					
ANR	1013643	Identifier	SRC2_IMM		1012963	1					
ANR	1013644	IfStatement	if ( SLJIT_UNLIKELY ( op & SLJIT_SET_O ) )		1012963	40					
ANR	1013645	Condition	SLJIT_UNLIKELY ( op & SLJIT_SET_O )	1083:6:35427:35458	1012963	0	True				
ANR	1013646	CallExpression	SLJIT_UNLIKELY ( op & SLJIT_SET_O )		1012963	0					
ANR	1013647	Callee	SLJIT_UNLIKELY		1012963	0					
ANR	1013648	Identifier	SLJIT_UNLIKELY		1012963	0					
ANR	1013649	ArgumentList	op & SLJIT_SET_O		1012963	1					
ANR	1013650	Argument	op & SLJIT_SET_O		1012963	0					
ANR	1013651	BitAndExpression	op & SLJIT_SET_O		1012963	0		&			
ANR	1013652	Identifier	op		1012963	0					
ANR	1013653	Identifier	SLJIT_SET_O		1012963	1					
ANR	1013654	ExpressionStatement	mul_inst = SMULL | ( reg_map [ TMP_REG3 ] << 16 ) | ( reg_map [ dst ] << 12 )	1084:3:35464:35531	1012963	1	True				
ANR	1013655	AssignmentExpression	mul_inst = SMULL | ( reg_map [ TMP_REG3 ] << 16 ) | ( reg_map [ dst ] << 12 )		1012963	0		=			
ANR	1013656	Identifier	mul_inst		1012963	0					
ANR	1013657	InclusiveOrExpression	SMULL | ( reg_map [ TMP_REG3 ] << 16 ) | ( reg_map [ dst ] << 12 )		1012963	1		|			
ANR	1013658	Identifier	SMULL		1012963	0					
ANR	1013659	InclusiveOrExpression	( reg_map [ TMP_REG3 ] << 16 ) | ( reg_map [ dst ] << 12 )		1012963	1		|			
ANR	1013660	ShiftExpression	reg_map [ TMP_REG3 ] << 16		1012963	0		<<			
ANR	1013661	ArrayIndexing	reg_map [ TMP_REG3 ]		1012963	0					
ANR	1013662	Identifier	reg_map		1012963	0					
ANR	1013663	Identifier	TMP_REG3		1012963	1					
ANR	1013664	PrimaryExpression	16		1012963	1					
ANR	1013665	ShiftExpression	reg_map [ dst ] << 12		1012963	1		<<			
ANR	1013666	ArrayIndexing	reg_map [ dst ]		1012963	0					
ANR	1013667	Identifier	reg_map		1012963	0					
ANR	1013668	Identifier	dst		1012963	1					
ANR	1013669	PrimaryExpression	12		1012963	1					
ANR	1013670	ElseStatement	else		1012963	0					
ANR	1013671	ExpressionStatement	mul_inst = MUL | ( reg_map [ dst ] << 16 )	1086:3:35543:35580	1012963	0	True				
ANR	1013672	AssignmentExpression	mul_inst = MUL | ( reg_map [ dst ] << 16 )		1012963	0		=			
ANR	1013673	Identifier	mul_inst		1012963	0					
ANR	1013674	InclusiveOrExpression	MUL | ( reg_map [ dst ] << 16 )		1012963	1		|			
ANR	1013675	Identifier	MUL		1012963	0					
ANR	1013676	ShiftExpression	reg_map [ dst ] << 16		1012963	1		<<			
ANR	1013677	ArrayIndexing	reg_map [ dst ]		1012963	0					
ANR	1013678	Identifier	reg_map		1012963	0					
ANR	1013679	Identifier	dst		1012963	1					
ANR	1013680	PrimaryExpression	16		1012963	1					
ANR	1013681	IfStatement	if ( dst != src2 )		1012963	41					
ANR	1013682	Condition	dst != src2	1088:6:35589:35599	1012963	0	True				
ANR	1013683	EqualityExpression	dst != src2		1012963	0		!=			
ANR	1013684	Identifier	dst		1012963	0					
ANR	1013685	Identifier	src2		1012963	1					
ANR	1013686	ExpressionStatement	"FAIL_IF ( push_inst ( compiler , mul_inst | ( reg_map [ src1 ] << 8 ) | reg_map [ src2 ] ) )"	1089:3:35605:35682	1012963	1	True				
ANR	1013687	CallExpression	"FAIL_IF ( push_inst ( compiler , mul_inst | ( reg_map [ src1 ] << 8 ) | reg_map [ src2 ] ) )"		1012963	0					
ANR	1013688	Callee	FAIL_IF		1012963	0					
ANR	1013689	Identifier	FAIL_IF		1012963	0					
ANR	1013690	ArgumentList	"push_inst ( compiler , mul_inst | ( reg_map [ src1 ] << 8 ) | reg_map [ src2 ] )"		1012963	1					
ANR	1013691	Argument	"push_inst ( compiler , mul_inst | ( reg_map [ src1 ] << 8 ) | reg_map [ src2 ] )"		1012963	0					
ANR	1013692	CallExpression	"push_inst ( compiler , mul_inst | ( reg_map [ src1 ] << 8 ) | reg_map [ src2 ] )"		1012963	0					
ANR	1013693	Callee	push_inst		1012963	0					
ANR	1013694	Identifier	push_inst		1012963	0					
ANR	1013695	ArgumentList	compiler		1012963	1					
ANR	1013696	Argument	compiler		1012963	0					
ANR	1013697	Identifier	compiler		1012963	0					
ANR	1013698	Argument	mul_inst | ( reg_map [ src1 ] << 8 ) | reg_map [ src2 ]		1012963	1					
ANR	1013699	InclusiveOrExpression	mul_inst | ( reg_map [ src1 ] << 8 ) | reg_map [ src2 ]		1012963	0		|			
ANR	1013700	Identifier	mul_inst		1012963	0					
ANR	1013701	InclusiveOrExpression	( reg_map [ src1 ] << 8 ) | reg_map [ src2 ]		1012963	1		|			
ANR	1013702	ShiftExpression	reg_map [ src1 ] << 8		1012963	0		<<			
ANR	1013703	ArrayIndexing	reg_map [ src1 ]		1012963	0					
ANR	1013704	Identifier	reg_map		1012963	0					
ANR	1013705	Identifier	src1		1012963	1					
ANR	1013706	PrimaryExpression	8		1012963	1					
ANR	1013707	ArrayIndexing	reg_map [ src2 ]		1012963	1					
ANR	1013708	Identifier	reg_map		1012963	0					
ANR	1013709	Identifier	src2		1012963	1					
ANR	1013710	ElseStatement	else		1012963	0					
ANR	1013711	IfStatement	if ( dst != src1 )		1012963	0					
ANR	1013712	Condition	dst != src1	1090:11:35695:35705	1012963	0	True				
ANR	1013713	EqualityExpression	dst != src1		1012963	0		!=			
ANR	1013714	Identifier	dst		1012963	0					
ANR	1013715	Identifier	src1		1012963	1					
ANR	1013716	ExpressionStatement	"FAIL_IF ( push_inst ( compiler , mul_inst | ( reg_map [ src2 ] << 8 ) | reg_map [ src1 ] ) )"	1091:3:35711:35788	1012963	1	True				
ANR	1013717	CallExpression	"FAIL_IF ( push_inst ( compiler , mul_inst | ( reg_map [ src2 ] << 8 ) | reg_map [ src1 ] ) )"		1012963	0					
ANR	1013718	Callee	FAIL_IF		1012963	0					
ANR	1013719	Identifier	FAIL_IF		1012963	0					
ANR	1013720	ArgumentList	"push_inst ( compiler , mul_inst | ( reg_map [ src2 ] << 8 ) | reg_map [ src1 ] )"		1012963	1					
ANR	1013721	Argument	"push_inst ( compiler , mul_inst | ( reg_map [ src2 ] << 8 ) | reg_map [ src1 ] )"		1012963	0					
ANR	1013722	CallExpression	"push_inst ( compiler , mul_inst | ( reg_map [ src2 ] << 8 ) | reg_map [ src1 ] )"		1012963	0					
ANR	1013723	Callee	push_inst		1012963	0					
ANR	1013724	Identifier	push_inst		1012963	0					
ANR	1013725	ArgumentList	compiler		1012963	1					
ANR	1013726	Argument	compiler		1012963	0					
ANR	1013727	Identifier	compiler		1012963	0					
ANR	1013728	Argument	mul_inst | ( reg_map [ src2 ] << 8 ) | reg_map [ src1 ]		1012963	1					
ANR	1013729	InclusiveOrExpression	mul_inst | ( reg_map [ src2 ] << 8 ) | reg_map [ src1 ]		1012963	0		|			
ANR	1013730	Identifier	mul_inst		1012963	0					
ANR	1013731	InclusiveOrExpression	( reg_map [ src2 ] << 8 ) | reg_map [ src1 ]		1012963	1		|			
ANR	1013732	ShiftExpression	reg_map [ src2 ] << 8		1012963	0		<<			
ANR	1013733	ArrayIndexing	reg_map [ src2 ]		1012963	0					
ANR	1013734	Identifier	reg_map		1012963	0					
ANR	1013735	Identifier	src2		1012963	1					
ANR	1013736	PrimaryExpression	8		1012963	1					
ANR	1013737	ArrayIndexing	reg_map [ src1 ]		1012963	1					
ANR	1013738	Identifier	reg_map		1012963	0					
ANR	1013739	Identifier	src1		1012963	1					
ANR	1013740	ElseStatement	else		1012963	0					
ANR	1013741	CompoundStatement		105:7:3892:3892	1012963	0					
ANR	1013742	ExpressionStatement	SLJIT_ASSERT ( dst != TMP_REG1 )	1094:3:35852:35881	1012963	0	True				
ANR	1013743	CallExpression	SLJIT_ASSERT ( dst != TMP_REG1 )		1012963	0					
ANR	1013744	Callee	SLJIT_ASSERT		1012963	0					
ANR	1013745	Identifier	SLJIT_ASSERT		1012963	0					
ANR	1013746	ArgumentList	dst != TMP_REG1		1012963	1					
ANR	1013747	Argument	dst != TMP_REG1		1012963	0					
ANR	1013748	EqualityExpression	dst != TMP_REG1		1012963	0		!=			
ANR	1013749	Identifier	dst		1012963	0					
ANR	1013750	Identifier	TMP_REG1		1012963	1					
ANR	1013751	ExpressionStatement	"FAIL_IF ( push_inst ( compiler , EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , TMP_REG1 , SLJIT_UNUSED , reg_map [ src2 ] ) ) )"	1095:3:35886:35987	1012963	1	True				
ANR	1013752	CallExpression	"FAIL_IF ( push_inst ( compiler , EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , TMP_REG1 , SLJIT_UNUSED , reg_map [ src2 ] ) ) )"		1012963	0					
ANR	1013753	Callee	FAIL_IF		1012963	0					
ANR	1013754	Identifier	FAIL_IF		1012963	0					
ANR	1013755	ArgumentList	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , TMP_REG1 , SLJIT_UNUSED , reg_map [ src2 ] ) )"		1012963	1					
ANR	1013756	Argument	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , TMP_REG1 , SLJIT_UNUSED , reg_map [ src2 ] ) )"		1012963	0					
ANR	1013757	CallExpression	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , TMP_REG1 , SLJIT_UNUSED , reg_map [ src2 ] ) )"		1012963	0					
ANR	1013758	Callee	push_inst		1012963	0					
ANR	1013759	Identifier	push_inst		1012963	0					
ANR	1013760	ArgumentList	compiler		1012963	1					
ANR	1013761	Argument	compiler		1012963	0					
ANR	1013762	Identifier	compiler		1012963	0					
ANR	1013763	Argument	"EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , TMP_REG1 , SLJIT_UNUSED , reg_map [ src2 ] )"		1012963	1					
ANR	1013764	CallExpression	"EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , TMP_REG1 , SLJIT_UNUSED , reg_map [ src2 ] )"		1012963	0					
ANR	1013765	Callee	EMIT_DATA_PROCESS_INS		1012963	0					
ANR	1013766	Identifier	EMIT_DATA_PROCESS_INS		1012963	0					
ANR	1013767	ArgumentList	MOV_DP		1012963	1					
ANR	1013768	Argument	MOV_DP		1012963	0					
ANR	1013769	Identifier	MOV_DP		1012963	0					
ANR	1013770	Argument	0		1012963	1					
ANR	1013771	PrimaryExpression	0		1012963	0					
ANR	1013772	Argument	TMP_REG1		1012963	2					
ANR	1013773	Identifier	TMP_REG1		1012963	0					
ANR	1013774	Argument	SLJIT_UNUSED		1012963	3					
ANR	1013775	Identifier	SLJIT_UNUSED		1012963	0					
ANR	1013776	Argument	reg_map [ src2 ]		1012963	4					
ANR	1013777	ArrayIndexing	reg_map [ src2 ]		1012963	0					
ANR	1013778	Identifier	reg_map		1012963	0					
ANR	1013779	Identifier	src2		1012963	1					
ANR	1013780	ExpressionStatement	"FAIL_IF ( push_inst ( compiler , mul_inst | ( reg_map [ src2 ] << 8 ) | reg_map [ TMP_REG1 ] ) )"	1096:3:35992:36073	1012963	2	True				
ANR	1013781	CallExpression	"FAIL_IF ( push_inst ( compiler , mul_inst | ( reg_map [ src2 ] << 8 ) | reg_map [ TMP_REG1 ] ) )"		1012963	0					
ANR	1013782	Callee	FAIL_IF		1012963	0					
ANR	1013783	Identifier	FAIL_IF		1012963	0					
ANR	1013784	ArgumentList	"push_inst ( compiler , mul_inst | ( reg_map [ src2 ] << 8 ) | reg_map [ TMP_REG1 ] )"		1012963	1					
ANR	1013785	Argument	"push_inst ( compiler , mul_inst | ( reg_map [ src2 ] << 8 ) | reg_map [ TMP_REG1 ] )"		1012963	0					
ANR	1013786	CallExpression	"push_inst ( compiler , mul_inst | ( reg_map [ src2 ] << 8 ) | reg_map [ TMP_REG1 ] )"		1012963	0					
ANR	1013787	Callee	push_inst		1012963	0					
ANR	1013788	Identifier	push_inst		1012963	0					
ANR	1013789	ArgumentList	compiler		1012963	1					
ANR	1013790	Argument	compiler		1012963	0					
ANR	1013791	Identifier	compiler		1012963	0					
ANR	1013792	Argument	mul_inst | ( reg_map [ src2 ] << 8 ) | reg_map [ TMP_REG1 ]		1012963	1					
ANR	1013793	InclusiveOrExpression	mul_inst | ( reg_map [ src2 ] << 8 ) | reg_map [ TMP_REG1 ]		1012963	0		|			
ANR	1013794	Identifier	mul_inst		1012963	0					
ANR	1013795	InclusiveOrExpression	( reg_map [ src2 ] << 8 ) | reg_map [ TMP_REG1 ]		1012963	1		|			
ANR	1013796	ShiftExpression	reg_map [ src2 ] << 8		1012963	0		<<			
ANR	1013797	ArrayIndexing	reg_map [ src2 ]		1012963	0					
ANR	1013798	Identifier	reg_map		1012963	0					
ANR	1013799	Identifier	src2		1012963	1					
ANR	1013800	PrimaryExpression	8		1012963	1					
ANR	1013801	ArrayIndexing	reg_map [ TMP_REG1 ]		1012963	1					
ANR	1013802	Identifier	reg_map		1012963	0					
ANR	1013803	Identifier	TMP_REG1		1012963	1					
ANR	1013804	IfStatement	if ( ! ( op & SLJIT_SET_O ) )		1012963	42					
ANR	1013805	Condition	! ( op & SLJIT_SET_O )	1099:6:36086:36104	1012963	0	True				
ANR	1013806	UnaryOperationExpression	! ( op & SLJIT_SET_O )		1012963	0					
ANR	1013807	UnaryOperator	!		1012963	0					
ANR	1013808	BitAndExpression	op & SLJIT_SET_O		1012963	1		&			
ANR	1013809	Identifier	op		1012963	0					
ANR	1013810	Identifier	SLJIT_SET_O		1012963	1					
ANR	1013811	ReturnStatement	return SLJIT_SUCCESS ;	1100:3:36110:36130	1012963	1	True				
ANR	1013812	Identifier	SLJIT_SUCCESS		1012963	0					
ANR	1013813	ExpressionStatement	compiler -> cache_arg = 0	1103:2:36168:36191	1012963	43	True				
ANR	1013814	AssignmentExpression	compiler -> cache_arg = 0		1012963	0		=			
ANR	1013815	PtrMemberAccess	compiler -> cache_arg		1012963	0					
ANR	1013816	Identifier	compiler		1012963	0					
ANR	1013817	Identifier	cache_arg		1012963	1					
ANR	1013818	PrimaryExpression	0		1012963	1					
ANR	1013819	ExpressionStatement	compiler -> cache_argw = 0	1104:2:36195:36219	1012963	44	True				
ANR	1013820	AssignmentExpression	compiler -> cache_argw = 0		1012963	0		=			
ANR	1013821	PtrMemberAccess	compiler -> cache_argw		1012963	0					
ANR	1013822	Identifier	compiler		1012963	0					
ANR	1013823	Identifier	cache_argw		1012963	1					
ANR	1013824	PrimaryExpression	0		1012963	1					
ANR	1013825	ReturnStatement	"return push_inst ( compiler , EMIT_DATA_PROCESS_INS ( CMP_DP , SET_FLAGS , SLJIT_UNUSED , TMP_REG3 , RM ( dst ) | 0xfc0 ) ) ;"	1106:2:36258:36367	1012963	45	True				
ANR	1013826	CallExpression	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( CMP_DP , SET_FLAGS , SLJIT_UNUSED , TMP_REG3 , RM ( dst ) | 0xfc0 ) )"		1012963	0					
ANR	1013827	Callee	push_inst		1012963	0					
ANR	1013828	Identifier	push_inst		1012963	0					
ANR	1013829	ArgumentList	compiler		1012963	1					
ANR	1013830	Argument	compiler		1012963	0					
ANR	1013831	Identifier	compiler		1012963	0					
ANR	1013832	Argument	"EMIT_DATA_PROCESS_INS ( CMP_DP , SET_FLAGS , SLJIT_UNUSED , TMP_REG3 , RM ( dst ) | 0xfc0 )"		1012963	1					
ANR	1013833	CallExpression	"EMIT_DATA_PROCESS_INS ( CMP_DP , SET_FLAGS , SLJIT_UNUSED , TMP_REG3 , RM ( dst ) | 0xfc0 )"		1012963	0					
ANR	1013834	Callee	EMIT_DATA_PROCESS_INS		1012963	0					
ANR	1013835	Identifier	EMIT_DATA_PROCESS_INS		1012963	0					
ANR	1013836	ArgumentList	CMP_DP		1012963	1					
ANR	1013837	Argument	CMP_DP		1012963	0					
ANR	1013838	Identifier	CMP_DP		1012963	0					
ANR	1013839	Argument	SET_FLAGS		1012963	1					
ANR	1013840	Identifier	SET_FLAGS		1012963	0					
ANR	1013841	Argument	SLJIT_UNUSED		1012963	2					
ANR	1013842	Identifier	SLJIT_UNUSED		1012963	0					
ANR	1013843	Argument	TMP_REG3		1012963	3					
ANR	1013844	Identifier	TMP_REG3		1012963	0					
ANR	1013845	Argument	RM ( dst ) | 0xfc0		1012963	4					
ANR	1013846	InclusiveOrExpression	RM ( dst ) | 0xfc0		1012963	0		|			
ANR	1013847	CallExpression	RM ( dst )		1012963	0					
ANR	1013848	Callee	RM		1012963	0					
ANR	1013849	Identifier	RM		1012963	0					
ANR	1013850	ArgumentList	dst		1012963	1					
ANR	1013851	Argument	dst		1012963	0					
ANR	1013852	Identifier	dst		1012963	0					
ANR	1013853	PrimaryExpression	0xfc0		1012963	1					
ANR	1013854	Label	case SLJIT_AND :	1108:1:36371:36385	1012963	46	True				
ANR	1013855	Identifier	SLJIT_AND		1012963	0					
ANR	1013856	IfStatement	if ( ! ( flags & INV_IMM ) )		1012963	47					
ANR	1013857	Condition	! ( flags & INV_IMM )	1109:6:36393:36410	1012963	0	True				
ANR	1013858	UnaryOperationExpression	! ( flags & INV_IMM )		1012963	0					
ANR	1013859	UnaryOperator	!		1012963	0					
ANR	1013860	BitAndExpression	flags & INV_IMM		1012963	1		&			
ANR	1013861	Identifier	flags		1012963	0					
ANR	1013862	Identifier	INV_IMM		1012963	1					
ANR	1013863	ExpressionStatement	EMIT_DATA_PROCESS_INS_AND_RETURN ( AND_DP )	1110:3:36416:36456	1012963	1	True				
ANR	1013864	CallExpression	EMIT_DATA_PROCESS_INS_AND_RETURN ( AND_DP )		1012963	0					
ANR	1013865	Callee	EMIT_DATA_PROCESS_INS_AND_RETURN		1012963	0					
ANR	1013866	Identifier	EMIT_DATA_PROCESS_INS_AND_RETURN		1012963	0					
ANR	1013867	ArgumentList	AND_DP		1012963	1					
ANR	1013868	Argument	AND_DP		1012963	0					
ANR	1013869	Identifier	AND_DP		1012963	0					
ANR	1013870	ExpressionStatement	EMIT_DATA_PROCESS_INS_AND_RETURN ( BIC_DP )	1111:2:36460:36500	1012963	48	True				
ANR	1013871	CallExpression	EMIT_DATA_PROCESS_INS_AND_RETURN ( BIC_DP )		1012963	0					
ANR	1013872	Callee	EMIT_DATA_PROCESS_INS_AND_RETURN		1012963	0					
ANR	1013873	Identifier	EMIT_DATA_PROCESS_INS_AND_RETURN		1012963	0					
ANR	1013874	ArgumentList	BIC_DP		1012963	1					
ANR	1013875	Argument	BIC_DP		1012963	0					
ANR	1013876	Identifier	BIC_DP		1012963	0					
ANR	1013877	Label	case SLJIT_OR :	1113:1:36504:36517	1012963	49	True				
ANR	1013878	Identifier	SLJIT_OR		1012963	0					
ANR	1013879	ExpressionStatement	SLJIT_ASSERT ( ! ( flags & INV_IMM ) )	1114:2:36521:36553	1012963	50	True				
ANR	1013880	CallExpression	SLJIT_ASSERT ( ! ( flags & INV_IMM ) )		1012963	0					
ANR	1013881	Callee	SLJIT_ASSERT		1012963	0					
ANR	1013882	Identifier	SLJIT_ASSERT		1012963	0					
ANR	1013883	ArgumentList	! ( flags & INV_IMM )		1012963	1					
ANR	1013884	Argument	! ( flags & INV_IMM )		1012963	0					
ANR	1013885	UnaryOperationExpression	! ( flags & INV_IMM )		1012963	0					
ANR	1013886	UnaryOperator	!		1012963	0					
ANR	1013887	BitAndExpression	flags & INV_IMM		1012963	1		&			
ANR	1013888	Identifier	flags		1012963	0					
ANR	1013889	Identifier	INV_IMM		1012963	1					
ANR	1013890	ExpressionStatement	EMIT_DATA_PROCESS_INS_AND_RETURN ( ORR_DP )	1115:2:36557:36597	1012963	51	True				
ANR	1013891	CallExpression	EMIT_DATA_PROCESS_INS_AND_RETURN ( ORR_DP )		1012963	0					
ANR	1013892	Callee	EMIT_DATA_PROCESS_INS_AND_RETURN		1012963	0					
ANR	1013893	Identifier	EMIT_DATA_PROCESS_INS_AND_RETURN		1012963	0					
ANR	1013894	ArgumentList	ORR_DP		1012963	1					
ANR	1013895	Argument	ORR_DP		1012963	0					
ANR	1013896	Identifier	ORR_DP		1012963	0					
ANR	1013897	Label	case SLJIT_XOR :	1117:1:36601:36615	1012963	52	True				
ANR	1013898	Identifier	SLJIT_XOR		1012963	0					
ANR	1013899	ExpressionStatement	SLJIT_ASSERT ( ! ( flags & INV_IMM ) )	1118:2:36619:36651	1012963	53	True				
ANR	1013900	CallExpression	SLJIT_ASSERT ( ! ( flags & INV_IMM ) )		1012963	0					
ANR	1013901	Callee	SLJIT_ASSERT		1012963	0					
ANR	1013902	Identifier	SLJIT_ASSERT		1012963	0					
ANR	1013903	ArgumentList	! ( flags & INV_IMM )		1012963	1					
ANR	1013904	Argument	! ( flags & INV_IMM )		1012963	0					
ANR	1013905	UnaryOperationExpression	! ( flags & INV_IMM )		1012963	0					
ANR	1013906	UnaryOperator	!		1012963	0					
ANR	1013907	BitAndExpression	flags & INV_IMM		1012963	1		&			
ANR	1013908	Identifier	flags		1012963	0					
ANR	1013909	Identifier	INV_IMM		1012963	1					
ANR	1013910	ExpressionStatement	EMIT_DATA_PROCESS_INS_AND_RETURN ( EOR_DP )	1119:2:36655:36695	1012963	54	True				
ANR	1013911	CallExpression	EMIT_DATA_PROCESS_INS_AND_RETURN ( EOR_DP )		1012963	0					
ANR	1013912	Callee	EMIT_DATA_PROCESS_INS_AND_RETURN		1012963	0					
ANR	1013913	Identifier	EMIT_DATA_PROCESS_INS_AND_RETURN		1012963	0					
ANR	1013914	ArgumentList	EOR_DP		1012963	1					
ANR	1013915	Argument	EOR_DP		1012963	0					
ANR	1013916	Identifier	EOR_DP		1012963	0					
ANR	1013917	Label	case SLJIT_SHL :	1121:1:36699:36713	1012963	55	True				
ANR	1013918	Identifier	SLJIT_SHL		1012963	0					
ANR	1013919	ExpressionStatement	EMIT_SHIFT_INS_AND_RETURN ( 0 )	1122:2:36717:36745	1012963	56	True				
ANR	1013920	CallExpression	EMIT_SHIFT_INS_AND_RETURN ( 0 )		1012963	0					
ANR	1013921	Callee	EMIT_SHIFT_INS_AND_RETURN		1012963	0					
ANR	1013922	Identifier	EMIT_SHIFT_INS_AND_RETURN		1012963	0					
ANR	1013923	ArgumentList	0		1012963	1					
ANR	1013924	Argument	0		1012963	0					
ANR	1013925	PrimaryExpression	0		1012963	0					
ANR	1013926	Label	case SLJIT_LSHR :	1124:1:36749:36764	1012963	57	True				
ANR	1013927	Identifier	SLJIT_LSHR		1012963	0					
ANR	1013928	ExpressionStatement	EMIT_SHIFT_INS_AND_RETURN ( 1 )	1125:2:36768:36796	1012963	58	True				
ANR	1013929	CallExpression	EMIT_SHIFT_INS_AND_RETURN ( 1 )		1012963	0					
ANR	1013930	Callee	EMIT_SHIFT_INS_AND_RETURN		1012963	0					
ANR	1013931	Identifier	EMIT_SHIFT_INS_AND_RETURN		1012963	0					
ANR	1013932	ArgumentList	1		1012963	1					
ANR	1013933	Argument	1		1012963	0					
ANR	1013934	PrimaryExpression	1		1012963	0					
ANR	1013935	Label	case SLJIT_ASHR :	1127:1:36800:36815	1012963	59	True				
ANR	1013936	Identifier	SLJIT_ASHR		1012963	0					
ANR	1013937	ExpressionStatement	EMIT_SHIFT_INS_AND_RETURN ( 2 )	1128:2:36819:36847	1012963	60	True				
ANR	1013938	CallExpression	EMIT_SHIFT_INS_AND_RETURN ( 2 )		1012963	0					
ANR	1013939	Callee	EMIT_SHIFT_INS_AND_RETURN		1012963	0					
ANR	1013940	Identifier	EMIT_SHIFT_INS_AND_RETURN		1012963	0					
ANR	1013941	ArgumentList	2		1012963	1					
ANR	1013942	Argument	2		1012963	0					
ANR	1013943	PrimaryExpression	2		1012963	0					
ANR	1013944	ExpressionStatement	SLJIT_ASSERT_STOP ( )	1130:1:36853:36872	1012963	2	True				
ANR	1013945	CallExpression	SLJIT_ASSERT_STOP ( )		1012963	0					
ANR	1013946	Callee	SLJIT_ASSERT_STOP		1012963	0					
ANR	1013947	Identifier	SLJIT_ASSERT_STOP		1012963	0					
ANR	1013948	ArgumentList			1012963	1					
ANR	1013949	ReturnStatement	return SLJIT_SUCCESS ;	1131:1:36875:36895	1012963	3	True				
ANR	1013950	Identifier	SLJIT_SUCCESS		1012963	0					
ANR	1013951	ReturnType	static SLJIT_INLINE sljit_si		1012963	1					
ANR	1013952	Identifier	emit_single_op		1012963	2					
ANR	1013953	ParameterList	"struct sljit_compiler * compiler , sljit_si op , sljit_si flags , sljit_si dst , sljit_si src1 , sljit_si src2"		1012963	3					
ANR	1013954	Parameter	struct sljit_compiler * compiler	986:44:31797:31827	1012963	0	True				
ANR	1013955	ParameterType	struct sljit_compiler *		1012963	0					
ANR	1013956	Identifier	compiler		1012963	1					
ANR	1013957	Parameter	sljit_si op	986:77:31830:31840	1012963	1	True				
ANR	1013958	ParameterType	sljit_si		1012963	0					
ANR	1013959	Identifier	op		1012963	1					
ANR	1013960	Parameter	sljit_si flags	986:90:31843:31856	1012963	2	True				
ANR	1013961	ParameterType	sljit_si		1012963	0					
ANR	1013962	Identifier	flags		1012963	1					
ANR	1013963	Parameter	sljit_si dst	987:1:31860:31871	1012963	3	True				
ANR	1013964	ParameterType	sljit_si		1012963	0					
ANR	1013965	Identifier	dst		1012963	1					
ANR	1013966	Parameter	sljit_si src1	987:15:31874:31886	1012963	4	True				
ANR	1013967	ParameterType	sljit_si		1012963	0					
ANR	1013968	Identifier	src1		1012963	1					
ANR	1013969	Parameter	sljit_si src2	987:30:31889:31901	1012963	5	True				
ANR	1013970	ParameterType	sljit_si		1012963	0					
ANR	1013971	Identifier	src2		1012963	1					
ANR	1013972	CFGEntryNode	ENTRY		1012963		True				
ANR	1013973	CFGExitNode	EXIT		1012963		True				
ANR	1013974	Symbol	TMP_REG3		1012963						
ANR	1013975	Symbol	TMP_REG1		1012963						
ANR	1013976	Symbol	MVN_DP		1012963						
ANR	1013977	Symbol	ORR_DP		1012963						
ANR	1013978	Symbol	reg_map		1012963						
ANR	1013979	Symbol	* compiler		1012963						
ANR	1013980	Symbol	BIC_DP		1012963						
ANR	1013981	Symbol	GET_OPCODE		1012963						
ANR	1013982	Symbol	* dst		1012963						
ANR	1013983	Symbol	CLZ		1012963						
ANR	1013984	Symbol	INV_IMM		1012963						
ANR	1013985	Symbol	SLJIT_MOV_UH		1012963						
ANR	1013986	Symbol	* TMP_REG1		1012963						
ANR	1013987	Symbol	* TMP_REG3		1012963						
ANR	1013988	Symbol	* src2		1012963						
ANR	1013989	Symbol	MUL		1012963						
ANR	1013990	Symbol	compiler -> cache_arg		1012963						
ANR	1013991	Symbol	* src1		1012963						
ANR	1013992	Symbol	* reg_map		1012963						
ANR	1013993	Symbol	SET_FLAGS		1012963						
ANR	1013994	Symbol	SLJIT_MOV_UB		1012963						
ANR	1013995	Symbol	mul_inst		1012963						
ANR	1013996	Symbol	RD		1012963						
ANR	1013997	Symbol	SBC_DP		1012963						
ANR	1013998	Symbol	REG_SOURCE		1012963						
ANR	1013999	Symbol	RM		1012963						
ANR	1014000	Symbol	REG_DEST		1012963						
ANR	1014001	Symbol	SLJIT_UNLIKELY		1012963						
ANR	1014002	Symbol	AND_DP		1012963						
ANR	1014003	Symbol	compiler -> cache_argw		1012963						
ANR	1014004	Symbol	ADD_DP		1012963						
ANR	1014005	Symbol	dst		1012963						
ANR	1014006	Symbol	SLJIT_SET_O		1012963						
ANR	1014007	Symbol	flags		1012963						
ANR	1014008	Symbol	SMULL		1012963						
ANR	1014009	Symbol	MOV_DP		1012963						
ANR	1014010	Symbol	ARGS_SWAPPED		1012963						
ANR	1014011	Symbol	RSC_DP		1012963						
ANR	1014012	Symbol	SRC2_IMM		1012963						
ANR	1014013	Symbol	compiler		1012963						
ANR	1014014	Symbol	op		1012963						
ANR	1014015	Symbol	push_inst		1012963						
ANR	1014016	Symbol	ADC_DP		1012963						
ANR	1014017	Symbol	SUB_DP		1012963						
ANR	1014018	Symbol	SLJIT_SUCCESS		1012963						
ANR	1014019	Symbol	CMP_DP		1012963						
ANR	1014020	Symbol	SLJIT_UNUSED		1012963						
ANR	1014021	Symbol	RSB_DP		1012963						
ANR	1014022	Symbol	src1		1012963						
ANR	1014023	Symbol	src2		1012963						
ANR	1014024	Symbol	EOR_DP		1012963						
ANR	1014025	Symbol	EMIT_DATA_PROCESS_INS		1012963						
ANR	1014026	Function	get_imm	1140:0:37127:37600							
ANR	1014027	FunctionDef	get_imm (sljit_uw imm)		1014026	0					
ANR	1014028	CompoundStatement		1141:0:37165:37600	1014026	0					
ANR	1014029	IdentifierDeclStatement	sljit_si rol ;	1142:1:37168:37180	1014026	0	True				
ANR	1014030	IdentifierDecl	rol		1014026	0					
ANR	1014031	IdentifierDeclType	sljit_si		1014026	0					
ANR	1014032	Identifier	rol		1014026	1					
ANR	1014033	IfStatement	if ( imm <= 0xff )		1014026	1					
ANR	1014034	Condition	imm <= 0xff	1144:5:37188:37198	1014026	0	True				
ANR	1014035	RelationalExpression	imm <= 0xff		1014026	0		<=			
ANR	1014036	Identifier	imm		1014026	0					
ANR	1014037	PrimaryExpression	0xff		1014026	1					
ANR	1014038	ReturnStatement	return SRC2_IMM | imm ;	1145:2:37203:37224	1014026	1	True				
ANR	1014039	InclusiveOrExpression	SRC2_IMM | imm		1014026	0		|			
ANR	1014040	Identifier	SRC2_IMM		1014026	0					
ANR	1014041	Identifier	imm		1014026	1					
ANR	1014042	IfStatement	if ( ! ( imm & 0xff000000 ) )		1014026	2					
ANR	1014043	Condition	! ( imm & 0xff000000 )	1147:5:37232:37250	1014026	0	True				
ANR	1014044	UnaryOperationExpression	! ( imm & 0xff000000 )		1014026	0					
ANR	1014045	UnaryOperator	!		1014026	0					
ANR	1014046	BitAndExpression	imm & 0xff000000		1014026	1		&			
ANR	1014047	Identifier	imm		1014026	0					
ANR	1014048	PrimaryExpression	0xff000000		1014026	1					
ANR	1014049	CompoundStatement		7:26:87:87	1014026	1					
ANR	1014050	ExpressionStatement	imm <<= 8	1148:2:37257:37266	1014026	0	True				
ANR	1014051	AssignmentExpression	imm <<= 8		1014026	0		<<=			
ANR	1014052	Identifier	imm		1014026	0					
ANR	1014053	PrimaryExpression	8		1014026	1					
ANR	1014054	ExpressionStatement	rol = 8	1149:2:37270:37277	1014026	1	True				
ANR	1014055	AssignmentExpression	rol = 8		1014026	0		=			
ANR	1014056	Identifier	rol		1014026	0					
ANR	1014057	PrimaryExpression	8		1014026	1					
ANR	1014058	ElseStatement	else		1014026	0					
ANR	1014059	CompoundStatement		11:6:122:122	1014026	0					
ANR	1014060	ExpressionStatement	imm = ( imm << 24 ) | ( imm >> 8 )	1152:2:37292:37322	1014026	0	True				
ANR	1014061	AssignmentExpression	imm = ( imm << 24 ) | ( imm >> 8 )		1014026	0		=			
ANR	1014062	Identifier	imm		1014026	0					
ANR	1014063	InclusiveOrExpression	( imm << 24 ) | ( imm >> 8 )		1014026	1		|			
ANR	1014064	ShiftExpression	imm << 24		1014026	0		<<			
ANR	1014065	Identifier	imm		1014026	0					
ANR	1014066	PrimaryExpression	24		1014026	1					
ANR	1014067	ShiftExpression	imm >> 8		1014026	1		>>			
ANR	1014068	Identifier	imm		1014026	0					
ANR	1014069	PrimaryExpression	8		1014026	1					
ANR	1014070	ExpressionStatement	rol = 0	1153:2:37326:37333	1014026	1	True				
ANR	1014071	AssignmentExpression	rol = 0		1014026	0		=			
ANR	1014072	Identifier	rol		1014026	0					
ANR	1014073	PrimaryExpression	0		1014026	1					
ANR	1014074	IfStatement	if ( ! ( imm & 0xff000000 ) )		1014026	3					
ANR	1014075	Condition	! ( imm & 0xff000000 )	1156:5:37344:37362	1014026	0	True				
ANR	1014076	UnaryOperationExpression	! ( imm & 0xff000000 )		1014026	0					
ANR	1014077	UnaryOperator	!		1014026	0					
ANR	1014078	BitAndExpression	imm & 0xff000000		1014026	1		&			
ANR	1014079	Identifier	imm		1014026	0					
ANR	1014080	PrimaryExpression	0xff000000		1014026	1					
ANR	1014081	CompoundStatement		16:26:199:199	1014026	1					
ANR	1014082	ExpressionStatement	imm <<= 8	1157:2:37369:37378	1014026	0	True				
ANR	1014083	AssignmentExpression	imm <<= 8		1014026	0		<<=			
ANR	1014084	Identifier	imm		1014026	0					
ANR	1014085	PrimaryExpression	8		1014026	1					
ANR	1014086	ExpressionStatement	rol += 4	1158:2:37382:37390	1014026	1	True				
ANR	1014087	AssignmentExpression	rol += 4		1014026	0		+=			
ANR	1014088	Identifier	rol		1014026	0					
ANR	1014089	PrimaryExpression	4		1014026	1					
ANR	1014090	IfStatement	if ( ! ( imm & 0xf0000000 ) )		1014026	4					
ANR	1014091	Condition	! ( imm & 0xf0000000 )	1161:5:37401:37419	1014026	0	True				
ANR	1014092	UnaryOperationExpression	! ( imm & 0xf0000000 )		1014026	0					
ANR	1014093	UnaryOperator	!		1014026	0					
ANR	1014094	BitAndExpression	imm & 0xf0000000		1014026	1		&			
ANR	1014095	Identifier	imm		1014026	0					
ANR	1014096	PrimaryExpression	0xf0000000		1014026	1					
ANR	1014097	CompoundStatement		21:26:256:256	1014026	1					
ANR	1014098	ExpressionStatement	imm <<= 4	1162:2:37426:37435	1014026	0	True				
ANR	1014099	AssignmentExpression	imm <<= 4		1014026	0		<<=			
ANR	1014100	Identifier	imm		1014026	0					
ANR	1014101	PrimaryExpression	4		1014026	1					
ANR	1014102	ExpressionStatement	rol += 2	1163:2:37439:37447	1014026	1	True				
ANR	1014103	AssignmentExpression	rol += 2		1014026	0		+=			
ANR	1014104	Identifier	rol		1014026	0					
ANR	1014105	PrimaryExpression	2		1014026	1					
ANR	1014106	IfStatement	if ( ! ( imm & 0xc0000000 ) )		1014026	5					
ANR	1014107	Condition	! ( imm & 0xc0000000 )	1166:5:37458:37476	1014026	0	True				
ANR	1014108	UnaryOperationExpression	! ( imm & 0xc0000000 )		1014026	0					
ANR	1014109	UnaryOperator	!		1014026	0					
ANR	1014110	BitAndExpression	imm & 0xc0000000		1014026	1		&			
ANR	1014111	Identifier	imm		1014026	0					
ANR	1014112	PrimaryExpression	0xc0000000		1014026	1					
ANR	1014113	CompoundStatement		26:26:313:313	1014026	1					
ANR	1014114	ExpressionStatement	imm <<= 2	1167:2:37483:37492	1014026	0	True				
ANR	1014115	AssignmentExpression	imm <<= 2		1014026	0		<<=			
ANR	1014116	Identifier	imm		1014026	0					
ANR	1014117	PrimaryExpression	2		1014026	1					
ANR	1014118	ExpressionStatement	rol += 1	1168:2:37496:37504	1014026	1	True				
ANR	1014119	AssignmentExpression	rol += 1		1014026	0		+=			
ANR	1014120	Identifier	rol		1014026	0					
ANR	1014121	PrimaryExpression	1		1014026	1					
ANR	1014122	IfStatement	if ( ! ( imm & 0x00ffffff ) )		1014026	6					
ANR	1014123	Condition	! ( imm & 0x00ffffff )	1171:5:37515:37533	1014026	0	True				
ANR	1014124	UnaryOperationExpression	! ( imm & 0x00ffffff )		1014026	0					
ANR	1014125	UnaryOperator	!		1014026	0					
ANR	1014126	BitAndExpression	imm & 0x00ffffff		1014026	1		&			
ANR	1014127	Identifier	imm		1014026	0					
ANR	1014128	PrimaryExpression	0x00ffffff		1014026	1					
ANR	1014129	ReturnStatement	return SRC2_IMM | ( imm >> 24 ) | ( rol << 8 ) ;	1172:2:37538:37580	1014026	1	True				
ANR	1014130	InclusiveOrExpression	SRC2_IMM | ( imm >> 24 ) | ( rol << 8 )		1014026	0		|			
ANR	1014131	Identifier	SRC2_IMM		1014026	0					
ANR	1014132	InclusiveOrExpression	( imm >> 24 ) | ( rol << 8 )		1014026	1		|			
ANR	1014133	ShiftExpression	imm >> 24		1014026	0		>>			
ANR	1014134	Identifier	imm		1014026	0					
ANR	1014135	PrimaryExpression	24		1014026	1					
ANR	1014136	ShiftExpression	rol << 8		1014026	1		<<			
ANR	1014137	Identifier	rol		1014026	0					
ANR	1014138	PrimaryExpression	8		1014026	1					
ANR	1014139	ElseStatement	else		1014026	0					
ANR	1014140	ReturnStatement	return 0 ;	1174:2:37590:37598	1014026	0	True				
ANR	1014141	PrimaryExpression	0		1014026	0					
ANR	1014142	ReturnType	static sljit_uw		1014026	1					
ANR	1014143	Identifier	get_imm		1014026	2					
ANR	1014144	ParameterList	sljit_uw imm		1014026	3					
ANR	1014145	Parameter	sljit_uw imm	1140:24:37151:37162	1014026	0	True				
ANR	1014146	ParameterType	sljit_uw		1014026	0					
ANR	1014147	Identifier	imm		1014026	1					
ANR	1014148	CFGEntryNode	ENTRY		1014026		True				
ANR	1014149	CFGExitNode	EXIT		1014026		True				
ANR	1014150	Symbol	imm		1014026						
ANR	1014151	Symbol	SRC2_IMM		1014026						
ANR	1014152	Symbol	rol		1014026						
ANR	1014153	Function	generate_int	1178:0:37660:39812							
ANR	1014154	FunctionDef	"generate_int (struct sljit_compiler * compiler , sljit_si reg , sljit_uw imm , sljit_si positive)"		1014153	0					
ANR	1014155	CompoundStatement		1179:0:37769:39812	1014153	0					
ANR	1014156	IdentifierDeclStatement	sljit_uw mask ;	1180:1:37772:37785	1014153	0	True				
ANR	1014157	IdentifierDecl	mask		1014153	0					
ANR	1014158	IdentifierDeclType	sljit_uw		1014153	0					
ANR	1014159	Identifier	mask		1014153	1					
ANR	1014160	IdentifierDeclStatement	sljit_uw imm1 ;	1181:1:37788:37801	1014153	1	True				
ANR	1014161	IdentifierDecl	imm1		1014153	0					
ANR	1014162	IdentifierDeclType	sljit_uw		1014153	0					
ANR	1014163	Identifier	imm1		1014153	1					
ANR	1014164	IdentifierDeclStatement	sljit_uw imm2 ;	1182:1:37804:37817	1014153	2	True				
ANR	1014165	IdentifierDecl	imm2		1014153	0					
ANR	1014166	IdentifierDeclType	sljit_uw		1014153	0					
ANR	1014167	Identifier	imm2		1014153	1					
ANR	1014168	IdentifierDeclStatement	sljit_si rol ;	1183:1:37820:37832	1014153	3	True				
ANR	1014169	IdentifierDecl	rol		1014153	0					
ANR	1014170	IdentifierDeclType	sljit_si		1014153	0					
ANR	1014171	Identifier	rol		1014153	1					
ANR	1014172	ExpressionStatement	mask = 0xff000000	1186:1:37893:37910	1014153	4	True				
ANR	1014173	AssignmentExpression	mask = 0xff000000		1014153	0		=			
ANR	1014174	Identifier	mask		1014153	0					
ANR	1014175	PrimaryExpression	0xff000000		1014153	1					
ANR	1014176	ExpressionStatement	rol = 8	1187:1:37913:37920	1014153	5	True				
ANR	1014177	AssignmentExpression	rol = 8		1014153	0		=			
ANR	1014178	Identifier	rol		1014153	0					
ANR	1014179	PrimaryExpression	8		1014153	1					
ANR	1014180	WhileStatement	while ( 1 )		1014153	6					
ANR	1014181	Condition	1	1188:7:37929:37929	1014153	0	True				
ANR	1014182	PrimaryExpression	1		1014153	0					
ANR	1014183	CompoundStatement		10:10:162:162	1014153	1					
ANR	1014184	IfStatement	if ( ! ( imm & mask ) )		1014153	0					
ANR	1014185	Condition	! ( imm & mask )	1189:6:37940:37952	1014153	0	True				
ANR	1014186	UnaryOperationExpression	! ( imm & mask )		1014153	0					
ANR	1014187	UnaryOperator	!		1014153	0					
ANR	1014188	BitAndExpression	imm & mask		1014153	1		&			
ANR	1014189	Identifier	imm		1014153	0					
ANR	1014190	Identifier	mask		1014153	1					
ANR	1014191	CompoundStatement		11:21:185:185	1014153	1					
ANR	1014192	ExpressionStatement	imm = ( imm << rol ) | ( imm >> ( 32 - rol ) )	1191:3:37985:38025	1014153	0	True				
ANR	1014193	AssignmentExpression	imm = ( imm << rol ) | ( imm >> ( 32 - rol ) )		1014153	0		=			
ANR	1014194	Identifier	imm		1014153	0					
ANR	1014195	InclusiveOrExpression	( imm << rol ) | ( imm >> ( 32 - rol ) )		1014153	1		|			
ANR	1014196	ShiftExpression	imm << rol		1014153	0		<<			
ANR	1014197	Identifier	imm		1014153	0					
ANR	1014198	Identifier	rol		1014153	1					
ANR	1014199	ShiftExpression	imm >> ( 32 - rol )		1014153	1		>>			
ANR	1014200	Identifier	imm		1014153	0					
ANR	1014201	AdditiveExpression	32 - rol		1014153	1		-			
ANR	1014202	PrimaryExpression	32		1014153	0					
ANR	1014203	Identifier	rol		1014153	1					
ANR	1014204	ExpressionStatement	rol = 4 + ( rol >> 1 )	1193:3:38058:38078	1014153	1	True				
ANR	1014205	AssignmentExpression	rol = 4 + ( rol >> 1 )		1014153	0		=			
ANR	1014206	Identifier	rol		1014153	0					
ANR	1014207	AdditiveExpression	4 + ( rol >> 1 )		1014153	1		+			
ANR	1014208	PrimaryExpression	4		1014153	0					
ANR	1014209	ShiftExpression	rol >> 1		1014153	1		>>			
ANR	1014210	Identifier	rol		1014153	0					
ANR	1014211	PrimaryExpression	1		1014153	1					
ANR	1014212	BreakStatement	break ;	1194:3:38083:38088	1014153	2	True				
ANR	1014213	ExpressionStatement	rol += 2	1196:2:38096:38104	1014153	1	True				
ANR	1014214	AssignmentExpression	rol += 2		1014153	0		+=			
ANR	1014215	Identifier	rol		1014153	0					
ANR	1014216	PrimaryExpression	2		1014153	1					
ANR	1014217	ExpressionStatement	mask >>= 2	1197:2:38108:38118	1014153	2	True				
ANR	1014218	AssignmentExpression	mask >>= 2		1014153	0		>>=			
ANR	1014219	Identifier	mask		1014153	0					
ANR	1014220	PrimaryExpression	2		1014153	1					
ANR	1014221	IfStatement	if ( mask & 0x3 )		1014153	3					
ANR	1014222	Condition	mask & 0x3	1198:6:38126:38135	1014153	0	True				
ANR	1014223	BitAndExpression	mask & 0x3		1014153	0		&			
ANR	1014224	Identifier	mask		1014153	0					
ANR	1014225	PrimaryExpression	0x3		1014153	1					
ANR	1014226	CompoundStatement		20:18:368:368	1014153	1					
ANR	1014227	ExpressionStatement	imm = ( imm << 8 ) | ( imm >> 24 )	1200:3:38162:38192	1014153	0	True				
ANR	1014228	AssignmentExpression	imm = ( imm << 8 ) | ( imm >> 24 )		1014153	0		=			
ANR	1014229	Identifier	imm		1014153	0					
ANR	1014230	InclusiveOrExpression	( imm << 8 ) | ( imm >> 24 )		1014153	1		|			
ANR	1014231	ShiftExpression	imm << 8		1014153	0		<<			
ANR	1014232	Identifier	imm		1014153	0					
ANR	1014233	PrimaryExpression	8		1014153	1					
ANR	1014234	ShiftExpression	imm >> 24		1014153	1		>>			
ANR	1014235	Identifier	imm		1014153	0					
ANR	1014236	PrimaryExpression	24		1014153	1					
ANR	1014237	ExpressionStatement	mask = 0xff00	1201:3:38197:38210	1014153	1	True				
ANR	1014238	AssignmentExpression	mask = 0xff00		1014153	0		=			
ANR	1014239	Identifier	mask		1014153	0					
ANR	1014240	PrimaryExpression	0xff00		1014153	1					
ANR	1014241	ExpressionStatement	rol = 24	1202:3:38215:38223	1014153	2	True				
ANR	1014242	AssignmentExpression	rol = 24		1014153	0		=			
ANR	1014243	Identifier	rol		1014153	0					
ANR	1014244	PrimaryExpression	24		1014153	1					
ANR	1014245	WhileStatement	while ( 1 )		1014153	3					
ANR	1014246	Condition	1	1203:10:38235:38235	1014153	0	True				
ANR	1014247	PrimaryExpression	1		1014153	0					
ANR	1014248	CompoundStatement		25:13:468:468	1014153	1					
ANR	1014249	IfStatement	if ( ! ( imm & mask ) )		1014153	0					
ANR	1014250	Condition	! ( imm & mask )	1204:8:38248:38260	1014153	0	True				
ANR	1014251	UnaryOperationExpression	! ( imm & mask )		1014153	0					
ANR	1014252	UnaryOperator	!		1014153	0					
ANR	1014253	BitAndExpression	imm & mask		1014153	1		&			
ANR	1014254	Identifier	imm		1014153	0					
ANR	1014255	Identifier	mask		1014153	1					
ANR	1014256	CompoundStatement		26:23:493:493	1014153	1					
ANR	1014257	ExpressionStatement	imm = ( imm << rol ) | ( imm >> ( 32 - rol ) )	1206:5:38297:38337	1014153	0	True				
ANR	1014258	AssignmentExpression	imm = ( imm << rol ) | ( imm >> ( 32 - rol ) )		1014153	0		=			
ANR	1014259	Identifier	imm		1014153	0					
ANR	1014260	InclusiveOrExpression	( imm << rol ) | ( imm >> ( 32 - rol ) )		1014153	1		|			
ANR	1014261	ShiftExpression	imm << rol		1014153	0		<<			
ANR	1014262	Identifier	imm		1014153	0					
ANR	1014263	Identifier	rol		1014153	1					
ANR	1014264	ShiftExpression	imm >> ( 32 - rol )		1014153	1		>>			
ANR	1014265	Identifier	imm		1014153	0					
ANR	1014266	AdditiveExpression	32 - rol		1014153	1		-			
ANR	1014267	PrimaryExpression	32		1014153	0					
ANR	1014268	Identifier	rol		1014153	1					
ANR	1014269	ExpressionStatement	rol = ( rol >> 1 ) - 8	1208:5:38374:38394	1014153	1	True				
ANR	1014270	AssignmentExpression	rol = ( rol >> 1 ) - 8		1014153	0		=			
ANR	1014271	Identifier	rol		1014153	0					
ANR	1014272	AdditiveExpression	( rol >> 1 ) - 8		1014153	1		-			
ANR	1014273	ShiftExpression	rol >> 1		1014153	0		>>			
ANR	1014274	Identifier	rol		1014153	0					
ANR	1014275	PrimaryExpression	1		1014153	1					
ANR	1014276	PrimaryExpression	8		1014153	1					
ANR	1014277	BreakStatement	break ;	1209:5:38401:38406	1014153	2	True				
ANR	1014278	ExpressionStatement	rol += 2	1211:4:38418:38426	1014153	1	True				
ANR	1014279	AssignmentExpression	rol += 2		1014153	0		+=			
ANR	1014280	Identifier	rol		1014153	0					
ANR	1014281	PrimaryExpression	2		1014153	1					
ANR	1014282	ExpressionStatement	mask >>= 2	1212:4:38432:38442	1014153	2	True				
ANR	1014283	AssignmentExpression	mask >>= 2		1014153	0		>>=			
ANR	1014284	Identifier	mask		1014153	0					
ANR	1014285	PrimaryExpression	2		1014153	1					
ANR	1014286	IfStatement	if ( mask & 0x3 )		1014153	3					
ANR	1014287	Condition	mask & 0x3	1213:8:38452:38461	1014153	0	True				
ANR	1014288	BitAndExpression	mask & 0x3		1014153	0		&			
ANR	1014289	Identifier	mask		1014153	0					
ANR	1014290	PrimaryExpression	0x3		1014153	1					
ANR	1014291	ReturnStatement	return 0 ;	1214:5:38469:38477	1014153	1	True				
ANR	1014292	PrimaryExpression	0		1014153	0					
ANR	1014293	BreakStatement	break ;	1216:3:38487:38492	1014153	4	True				
ANR	1014294	ExpressionStatement	SLJIT_ASSERT ( ! ( imm & 0xff ) )	1221:1:38538:38565	1014153	7	True				
ANR	1014295	CallExpression	SLJIT_ASSERT ( ! ( imm & 0xff ) )		1014153	0					
ANR	1014296	Callee	SLJIT_ASSERT		1014153	0					
ANR	1014297	Identifier	SLJIT_ASSERT		1014153	0					
ANR	1014298	ArgumentList	! ( imm & 0xff )		1014153	1					
ANR	1014299	Argument	! ( imm & 0xff )		1014153	0					
ANR	1014300	UnaryOperationExpression	! ( imm & 0xff )		1014153	0					
ANR	1014301	UnaryOperator	!		1014153	0					
ANR	1014302	BitAndExpression	imm & 0xff		1014153	1		&			
ANR	1014303	Identifier	imm		1014153	0					
ANR	1014304	PrimaryExpression	0xff		1014153	1					
ANR	1014305	IfStatement	if ( ! ( imm & 0xff000000 ) )		1014153	8					
ANR	1014306	Condition	! ( imm & 0xff000000 )	1223:5:38573:38591	1014153	0	True				
ANR	1014307	UnaryOperationExpression	! ( imm & 0xff000000 )		1014153	0					
ANR	1014308	UnaryOperator	!		1014153	0					
ANR	1014309	BitAndExpression	imm & 0xff000000		1014153	1		&			
ANR	1014310	Identifier	imm		1014153	0					
ANR	1014311	PrimaryExpression	0xff000000		1014153	1					
ANR	1014312	CompoundStatement		45:26:824:824	1014153	1					
ANR	1014313	ExpressionStatement	imm1 = SRC2_IMM | ( ( imm >> 16 ) & 0xff ) | ( ( ( rol + 4 ) & 0xf ) << 8 )	1224:2:38598:38663	1014153	0	True				
ANR	1014314	AssignmentExpression	imm1 = SRC2_IMM | ( ( imm >> 16 ) & 0xff ) | ( ( ( rol + 4 ) & 0xf ) << 8 )		1014153	0		=			
ANR	1014315	Identifier	imm1		1014153	0					
ANR	1014316	InclusiveOrExpression	SRC2_IMM | ( ( imm >> 16 ) & 0xff ) | ( ( ( rol + 4 ) & 0xf ) << 8 )		1014153	1		|			
ANR	1014317	Identifier	SRC2_IMM		1014153	0					
ANR	1014318	InclusiveOrExpression	( ( imm >> 16 ) & 0xff ) | ( ( ( rol + 4 ) & 0xf ) << 8 )		1014153	1		|			
ANR	1014319	BitAndExpression	( imm >> 16 ) & 0xff		1014153	0		&			
ANR	1014320	ShiftExpression	imm >> 16		1014153	0		>>			
ANR	1014321	Identifier	imm		1014153	0					
ANR	1014322	PrimaryExpression	16		1014153	1					
ANR	1014323	PrimaryExpression	0xff		1014153	1					
ANR	1014324	ShiftExpression	( ( rol + 4 ) & 0xf ) << 8		1014153	1		<<			
ANR	1014325	BitAndExpression	( rol + 4 ) & 0xf		1014153	0		&			
ANR	1014326	AdditiveExpression	rol + 4		1014153	0		+			
ANR	1014327	Identifier	rol		1014153	0					
ANR	1014328	PrimaryExpression	4		1014153	1					
ANR	1014329	PrimaryExpression	0xf		1014153	1					
ANR	1014330	PrimaryExpression	8		1014153	1					
ANR	1014331	ExpressionStatement	imm2 = SRC2_IMM | ( ( imm >> 8 ) & 0xff ) | ( ( ( rol + 8 ) & 0xf ) << 8 )	1225:2:38667:38731	1014153	1	True				
ANR	1014332	AssignmentExpression	imm2 = SRC2_IMM | ( ( imm >> 8 ) & 0xff ) | ( ( ( rol + 8 ) & 0xf ) << 8 )		1014153	0		=			
ANR	1014333	Identifier	imm2		1014153	0					
ANR	1014334	InclusiveOrExpression	SRC2_IMM | ( ( imm >> 8 ) & 0xff ) | ( ( ( rol + 8 ) & 0xf ) << 8 )		1014153	1		|			
ANR	1014335	Identifier	SRC2_IMM		1014153	0					
ANR	1014336	InclusiveOrExpression	( ( imm >> 8 ) & 0xff ) | ( ( ( rol + 8 ) & 0xf ) << 8 )		1014153	1		|			
ANR	1014337	BitAndExpression	( imm >> 8 ) & 0xff		1014153	0		&			
ANR	1014338	ShiftExpression	imm >> 8		1014153	0		>>			
ANR	1014339	Identifier	imm		1014153	0					
ANR	1014340	PrimaryExpression	8		1014153	1					
ANR	1014341	PrimaryExpression	0xff		1014153	1					
ANR	1014342	ShiftExpression	( ( rol + 8 ) & 0xf ) << 8		1014153	1		<<			
ANR	1014343	BitAndExpression	( rol + 8 ) & 0xf		1014153	0		&			
ANR	1014344	AdditiveExpression	rol + 8		1014153	0		+			
ANR	1014345	Identifier	rol		1014153	0					
ANR	1014346	PrimaryExpression	8		1014153	1					
ANR	1014347	PrimaryExpression	0xf		1014153	1					
ANR	1014348	PrimaryExpression	8		1014153	1					
ANR	1014349	ElseStatement	else		1014153	0					
ANR	1014350	IfStatement	if ( imm & 0xc0000000 )		1014153	0					
ANR	1014351	Condition	imm & 0xc0000000	1227:10:38746:38761	1014153	0	True				
ANR	1014352	BitAndExpression	imm & 0xc0000000		1014153	0		&			
ANR	1014353	Identifier	imm		1014153	0					
ANR	1014354	PrimaryExpression	0xc0000000		1014153	1					
ANR	1014355	CompoundStatement		49:28:994:994	1014153	1					
ANR	1014356	ExpressionStatement	imm1 = SRC2_IMM | ( ( imm >> 24 ) & 0xff ) | ( ( rol & 0xf ) << 8 )	1228:2:38768:38827	1014153	0	True				
ANR	1014357	AssignmentExpression	imm1 = SRC2_IMM | ( ( imm >> 24 ) & 0xff ) | ( ( rol & 0xf ) << 8 )		1014153	0		=			
ANR	1014358	Identifier	imm1		1014153	0					
ANR	1014359	InclusiveOrExpression	SRC2_IMM | ( ( imm >> 24 ) & 0xff ) | ( ( rol & 0xf ) << 8 )		1014153	1		|			
ANR	1014360	Identifier	SRC2_IMM		1014153	0					
ANR	1014361	InclusiveOrExpression	( ( imm >> 24 ) & 0xff ) | ( ( rol & 0xf ) << 8 )		1014153	1		|			
ANR	1014362	BitAndExpression	( imm >> 24 ) & 0xff		1014153	0		&			
ANR	1014363	ShiftExpression	imm >> 24		1014153	0		>>			
ANR	1014364	Identifier	imm		1014153	0					
ANR	1014365	PrimaryExpression	24		1014153	1					
ANR	1014366	PrimaryExpression	0xff		1014153	1					
ANR	1014367	ShiftExpression	( rol & 0xf ) << 8		1014153	1		<<			
ANR	1014368	BitAndExpression	rol & 0xf		1014153	0		&			
ANR	1014369	Identifier	rol		1014153	0					
ANR	1014370	PrimaryExpression	0xf		1014153	1					
ANR	1014371	PrimaryExpression	8		1014153	1					
ANR	1014372	ExpressionStatement	imm <<= 8	1229:2:38831:38840	1014153	1	True				
ANR	1014373	AssignmentExpression	imm <<= 8		1014153	0		<<=			
ANR	1014374	Identifier	imm		1014153	0					
ANR	1014375	PrimaryExpression	8		1014153	1					
ANR	1014376	ExpressionStatement	rol += 4	1230:2:38844:38852	1014153	2	True				
ANR	1014377	AssignmentExpression	rol += 4		1014153	0		+=			
ANR	1014378	Identifier	rol		1014153	0					
ANR	1014379	PrimaryExpression	4		1014153	1					
ANR	1014380	IfStatement	if ( ! ( imm & 0xff000000 ) )		1014153	3					
ANR	1014381	Condition	! ( imm & 0xff000000 )	1232:6:38861:38879	1014153	0	True				
ANR	1014382	UnaryOperationExpression	! ( imm & 0xff000000 )		1014153	0					
ANR	1014383	UnaryOperator	!		1014153	0					
ANR	1014384	BitAndExpression	imm & 0xff000000		1014153	1		&			
ANR	1014385	Identifier	imm		1014153	0					
ANR	1014386	PrimaryExpression	0xff000000		1014153	1					
ANR	1014387	CompoundStatement		54:27:1112:1112	1014153	1					
ANR	1014388	ExpressionStatement	imm <<= 8	1233:3:38887:38896	1014153	0	True				
ANR	1014389	AssignmentExpression	imm <<= 8		1014153	0		<<=			
ANR	1014390	Identifier	imm		1014153	0					
ANR	1014391	PrimaryExpression	8		1014153	1					
ANR	1014392	ExpressionStatement	rol += 4	1234:3:38901:38909	1014153	1	True				
ANR	1014393	AssignmentExpression	rol += 4		1014153	0		+=			
ANR	1014394	Identifier	rol		1014153	0					
ANR	1014395	PrimaryExpression	4		1014153	1					
ANR	1014396	IfStatement	if ( ! ( imm & 0xf0000000 ) )		1014153	4					
ANR	1014397	Condition	! ( imm & 0xf0000000 )	1237:6:38922:38940	1014153	0	True				
ANR	1014398	UnaryOperationExpression	! ( imm & 0xf0000000 )		1014153	0					
ANR	1014399	UnaryOperator	!		1014153	0					
ANR	1014400	BitAndExpression	imm & 0xf0000000		1014153	1		&			
ANR	1014401	Identifier	imm		1014153	0					
ANR	1014402	PrimaryExpression	0xf0000000		1014153	1					
ANR	1014403	CompoundStatement		59:27:1173:1173	1014153	1					
ANR	1014404	ExpressionStatement	imm <<= 4	1238:3:38948:38957	1014153	0	True				
ANR	1014405	AssignmentExpression	imm <<= 4		1014153	0		<<=			
ANR	1014406	Identifier	imm		1014153	0					
ANR	1014407	PrimaryExpression	4		1014153	1					
ANR	1014408	ExpressionStatement	rol += 2	1239:3:38962:38970	1014153	1	True				
ANR	1014409	AssignmentExpression	rol += 2		1014153	0		+=			
ANR	1014410	Identifier	rol		1014153	0					
ANR	1014411	PrimaryExpression	2		1014153	1					
ANR	1014412	IfStatement	if ( ! ( imm & 0xc0000000 ) )		1014153	5					
ANR	1014413	Condition	! ( imm & 0xc0000000 )	1242:6:38983:39001	1014153	0	True				
ANR	1014414	UnaryOperationExpression	! ( imm & 0xc0000000 )		1014153	0					
ANR	1014415	UnaryOperator	!		1014153	0					
ANR	1014416	BitAndExpression	imm & 0xc0000000		1014153	1		&			
ANR	1014417	Identifier	imm		1014153	0					
ANR	1014418	PrimaryExpression	0xc0000000		1014153	1					
ANR	1014419	CompoundStatement		64:27:1234:1234	1014153	1					
ANR	1014420	ExpressionStatement	imm <<= 2	1243:3:39009:39018	1014153	0	True				
ANR	1014421	AssignmentExpression	imm <<= 2		1014153	0		<<=			
ANR	1014422	Identifier	imm		1014153	0					
ANR	1014423	PrimaryExpression	2		1014153	1					
ANR	1014424	ExpressionStatement	rol += 1	1244:3:39023:39031	1014153	1	True				
ANR	1014425	AssignmentExpression	rol += 1		1014153	0		+=			
ANR	1014426	Identifier	rol		1014153	0					
ANR	1014427	PrimaryExpression	1		1014153	1					
ANR	1014428	IfStatement	if ( ! ( imm & 0x00ffffff ) )		1014153	6					
ANR	1014429	Condition	! ( imm & 0x00ffffff )	1247:6:39044:39062	1014153	0	True				
ANR	1014430	UnaryOperationExpression	! ( imm & 0x00ffffff )		1014153	0					
ANR	1014431	UnaryOperator	!		1014153	0					
ANR	1014432	BitAndExpression	imm & 0x00ffffff		1014153	1		&			
ANR	1014433	Identifier	imm		1014153	0					
ANR	1014434	PrimaryExpression	0x00ffffff		1014153	1					
ANR	1014435	ExpressionStatement	imm2 = SRC2_IMM | ( imm >> 24 ) | ( ( rol & 0xf ) << 8 )	1248:3:39068:39118	1014153	1	True				
ANR	1014436	AssignmentExpression	imm2 = SRC2_IMM | ( imm >> 24 ) | ( ( rol & 0xf ) << 8 )		1014153	0		=			
ANR	1014437	Identifier	imm2		1014153	0					
ANR	1014438	InclusiveOrExpression	SRC2_IMM | ( imm >> 24 ) | ( ( rol & 0xf ) << 8 )		1014153	1		|			
ANR	1014439	Identifier	SRC2_IMM		1014153	0					
ANR	1014440	InclusiveOrExpression	( imm >> 24 ) | ( ( rol & 0xf ) << 8 )		1014153	1		|			
ANR	1014441	ShiftExpression	imm >> 24		1014153	0		>>			
ANR	1014442	Identifier	imm		1014153	0					
ANR	1014443	PrimaryExpression	24		1014153	1					
ANR	1014444	ShiftExpression	( rol & 0xf ) << 8		1014153	1		<<			
ANR	1014445	BitAndExpression	rol & 0xf		1014153	0		&			
ANR	1014446	Identifier	rol		1014153	0					
ANR	1014447	PrimaryExpression	0xf		1014153	1					
ANR	1014448	PrimaryExpression	8		1014153	1					
ANR	1014449	ElseStatement	else		1014153	0					
ANR	1014450	ReturnStatement	return 0 ;	1250:3:39130:39138	1014153	0	True				
ANR	1014451	PrimaryExpression	0		1014153	0					
ANR	1014452	ElseStatement	else		1014153	0					
ANR	1014453	CompoundStatement		74:6:1379:1379	1014153	0					
ANR	1014454	IfStatement	if ( ! ( imm & 0xf0000000 ) )		1014153	0					
ANR	1014455	Condition	! ( imm & 0xf0000000 )	1253:6:39157:39175	1014153	0	True				
ANR	1014456	UnaryOperationExpression	! ( imm & 0xf0000000 )		1014153	0					
ANR	1014457	UnaryOperator	!		1014153	0					
ANR	1014458	BitAndExpression	imm & 0xf0000000		1014153	1		&			
ANR	1014459	Identifier	imm		1014153	0					
ANR	1014460	PrimaryExpression	0xf0000000		1014153	1					
ANR	1014461	CompoundStatement		75:27:1408:1408	1014153	1					
ANR	1014462	ExpressionStatement	imm <<= 4	1254:3:39183:39192	1014153	0	True				
ANR	1014463	AssignmentExpression	imm <<= 4		1014153	0		<<=			
ANR	1014464	Identifier	imm		1014153	0					
ANR	1014465	PrimaryExpression	4		1014153	1					
ANR	1014466	ExpressionStatement	rol += 2	1255:3:39197:39205	1014153	1	True				
ANR	1014467	AssignmentExpression	rol += 2		1014153	0		+=			
ANR	1014468	Identifier	rol		1014153	0					
ANR	1014469	PrimaryExpression	2		1014153	1					
ANR	1014470	IfStatement	if ( ! ( imm & 0xc0000000 ) )		1014153	1					
ANR	1014471	Condition	! ( imm & 0xc0000000 )	1258:6:39218:39236	1014153	0	True				
ANR	1014472	UnaryOperationExpression	! ( imm & 0xc0000000 )		1014153	0					
ANR	1014473	UnaryOperator	!		1014153	0					
ANR	1014474	BitAndExpression	imm & 0xc0000000		1014153	1		&			
ANR	1014475	Identifier	imm		1014153	0					
ANR	1014476	PrimaryExpression	0xc0000000		1014153	1					
ANR	1014477	CompoundStatement		80:27:1469:1469	1014153	1					
ANR	1014478	ExpressionStatement	imm <<= 2	1259:3:39244:39253	1014153	0	True				
ANR	1014479	AssignmentExpression	imm <<= 2		1014153	0		<<=			
ANR	1014480	Identifier	imm		1014153	0					
ANR	1014481	PrimaryExpression	2		1014153	1					
ANR	1014482	ExpressionStatement	rol += 1	1260:3:39258:39266	1014153	1	True				
ANR	1014483	AssignmentExpression	rol += 1		1014153	0		+=			
ANR	1014484	Identifier	rol		1014153	0					
ANR	1014485	PrimaryExpression	1		1014153	1					
ANR	1014486	ExpressionStatement	imm1 = SRC2_IMM | ( ( imm >> 24 ) & 0xff ) | ( ( rol & 0xf ) << 8 )	1263:2:39275:39334	1014153	2	True				
ANR	1014487	AssignmentExpression	imm1 = SRC2_IMM | ( ( imm >> 24 ) & 0xff ) | ( ( rol & 0xf ) << 8 )		1014153	0		=			
ANR	1014488	Identifier	imm1		1014153	0					
ANR	1014489	InclusiveOrExpression	SRC2_IMM | ( ( imm >> 24 ) & 0xff ) | ( ( rol & 0xf ) << 8 )		1014153	1		|			
ANR	1014490	Identifier	SRC2_IMM		1014153	0					
ANR	1014491	InclusiveOrExpression	( ( imm >> 24 ) & 0xff ) | ( ( rol & 0xf ) << 8 )		1014153	1		|			
ANR	1014492	BitAndExpression	( imm >> 24 ) & 0xff		1014153	0		&			
ANR	1014493	ShiftExpression	imm >> 24		1014153	0		>>			
ANR	1014494	Identifier	imm		1014153	0					
ANR	1014495	PrimaryExpression	24		1014153	1					
ANR	1014496	PrimaryExpression	0xff		1014153	1					
ANR	1014497	ShiftExpression	( rol & 0xf ) << 8		1014153	1		<<			
ANR	1014498	BitAndExpression	rol & 0xf		1014153	0		&			
ANR	1014499	Identifier	rol		1014153	0					
ANR	1014500	PrimaryExpression	0xf		1014153	1					
ANR	1014501	PrimaryExpression	8		1014153	1					
ANR	1014502	ExpressionStatement	imm <<= 8	1264:2:39338:39347	1014153	3	True				
ANR	1014503	AssignmentExpression	imm <<= 8		1014153	0		<<=			
ANR	1014504	Identifier	imm		1014153	0					
ANR	1014505	PrimaryExpression	8		1014153	1					
ANR	1014506	ExpressionStatement	rol += 4	1265:2:39351:39359	1014153	4	True				
ANR	1014507	AssignmentExpression	rol += 4		1014153	0		+=			
ANR	1014508	Identifier	rol		1014153	0					
ANR	1014509	PrimaryExpression	4		1014153	1					
ANR	1014510	IfStatement	if ( ! ( imm & 0xf0000000 ) )		1014153	5					
ANR	1014511	Condition	! ( imm & 0xf0000000 )	1267:6:39368:39386	1014153	0	True				
ANR	1014512	UnaryOperationExpression	! ( imm & 0xf0000000 )		1014153	0					
ANR	1014513	UnaryOperator	!		1014153	0					
ANR	1014514	BitAndExpression	imm & 0xf0000000		1014153	1		&			
ANR	1014515	Identifier	imm		1014153	0					
ANR	1014516	PrimaryExpression	0xf0000000		1014153	1					
ANR	1014517	CompoundStatement		89:27:1619:1619	1014153	1					
ANR	1014518	ExpressionStatement	imm <<= 4	1268:3:39394:39403	1014153	0	True				
ANR	1014519	AssignmentExpression	imm <<= 4		1014153	0		<<=			
ANR	1014520	Identifier	imm		1014153	0					
ANR	1014521	PrimaryExpression	4		1014153	1					
ANR	1014522	ExpressionStatement	rol += 2	1269:3:39408:39416	1014153	1	True				
ANR	1014523	AssignmentExpression	rol += 2		1014153	0		+=			
ANR	1014524	Identifier	rol		1014153	0					
ANR	1014525	PrimaryExpression	2		1014153	1					
ANR	1014526	IfStatement	if ( ! ( imm & 0xc0000000 ) )		1014153	6					
ANR	1014527	Condition	! ( imm & 0xc0000000 )	1272:6:39429:39447	1014153	0	True				
ANR	1014528	UnaryOperationExpression	! ( imm & 0xc0000000 )		1014153	0					
ANR	1014529	UnaryOperator	!		1014153	0					
ANR	1014530	BitAndExpression	imm & 0xc0000000		1014153	1		&			
ANR	1014531	Identifier	imm		1014153	0					
ANR	1014532	PrimaryExpression	0xc0000000		1014153	1					
ANR	1014533	CompoundStatement		94:27:1680:1680	1014153	1					
ANR	1014534	ExpressionStatement	imm <<= 2	1273:3:39455:39464	1014153	0	True				
ANR	1014535	AssignmentExpression	imm <<= 2		1014153	0		<<=			
ANR	1014536	Identifier	imm		1014153	0					
ANR	1014537	PrimaryExpression	2		1014153	1					
ANR	1014538	ExpressionStatement	rol += 1	1274:3:39469:39477	1014153	1	True				
ANR	1014539	AssignmentExpression	rol += 1		1014153	0		+=			
ANR	1014540	Identifier	rol		1014153	0					
ANR	1014541	PrimaryExpression	1		1014153	1					
ANR	1014542	IfStatement	if ( ! ( imm & 0x00ffffff ) )		1014153	7					
ANR	1014543	Condition	! ( imm & 0x00ffffff )	1277:6:39490:39508	1014153	0	True				
ANR	1014544	UnaryOperationExpression	! ( imm & 0x00ffffff )		1014153	0					
ANR	1014545	UnaryOperator	!		1014153	0					
ANR	1014546	BitAndExpression	imm & 0x00ffffff		1014153	1		&			
ANR	1014547	Identifier	imm		1014153	0					
ANR	1014548	PrimaryExpression	0x00ffffff		1014153	1					
ANR	1014549	ExpressionStatement	imm2 = SRC2_IMM | ( imm >> 24 ) | ( ( rol & 0xf ) << 8 )	1278:3:39514:39564	1014153	1	True				
ANR	1014550	AssignmentExpression	imm2 = SRC2_IMM | ( imm >> 24 ) | ( ( rol & 0xf ) << 8 )		1014153	0		=			
ANR	1014551	Identifier	imm2		1014153	0					
ANR	1014552	InclusiveOrExpression	SRC2_IMM | ( imm >> 24 ) | ( ( rol & 0xf ) << 8 )		1014153	1		|			
ANR	1014553	Identifier	SRC2_IMM		1014153	0					
ANR	1014554	InclusiveOrExpression	( imm >> 24 ) | ( ( rol & 0xf ) << 8 )		1014153	1		|			
ANR	1014555	ShiftExpression	imm >> 24		1014153	0		>>			
ANR	1014556	Identifier	imm		1014153	0					
ANR	1014557	PrimaryExpression	24		1014153	1					
ANR	1014558	ShiftExpression	( rol & 0xf ) << 8		1014153	1		<<			
ANR	1014559	BitAndExpression	rol & 0xf		1014153	0		&			
ANR	1014560	Identifier	rol		1014153	0					
ANR	1014561	PrimaryExpression	0xf		1014153	1					
ANR	1014562	PrimaryExpression	8		1014153	1					
ANR	1014563	ElseStatement	else		1014153	0					
ANR	1014564	ReturnStatement	return 0 ;	1280:3:39576:39584	1014153	0	True				
ANR	1014565	PrimaryExpression	0		1014153	0					
ANR	1014566	ExpressionStatement	"FAIL_IF ( push_inst ( compiler , EMIT_DATA_PROCESS_INS ( positive ? MOV_DP : MVN_DP , 0 , reg , SLJIT_UNUSED , imm1 ) ) )"	1283:1:39591:39698	1014153	9	True				
ANR	1014567	CallExpression	"FAIL_IF ( push_inst ( compiler , EMIT_DATA_PROCESS_INS ( positive ? MOV_DP : MVN_DP , 0 , reg , SLJIT_UNUSED , imm1 ) ) )"		1014153	0					
ANR	1014568	Callee	FAIL_IF		1014153	0					
ANR	1014569	Identifier	FAIL_IF		1014153	0					
ANR	1014570	ArgumentList	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( positive ? MOV_DP : MVN_DP , 0 , reg , SLJIT_UNUSED , imm1 ) )"		1014153	1					
ANR	1014571	Argument	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( positive ? MOV_DP : MVN_DP , 0 , reg , SLJIT_UNUSED , imm1 ) )"		1014153	0					
ANR	1014572	CallExpression	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( positive ? MOV_DP : MVN_DP , 0 , reg , SLJIT_UNUSED , imm1 ) )"		1014153	0					
ANR	1014573	Callee	push_inst		1014153	0					
ANR	1014574	Identifier	push_inst		1014153	0					
ANR	1014575	ArgumentList	compiler		1014153	1					
ANR	1014576	Argument	compiler		1014153	0					
ANR	1014577	Identifier	compiler		1014153	0					
ANR	1014578	Argument	"EMIT_DATA_PROCESS_INS ( positive ? MOV_DP : MVN_DP , 0 , reg , SLJIT_UNUSED , imm1 )"		1014153	1					
ANR	1014579	CallExpression	"EMIT_DATA_PROCESS_INS ( positive ? MOV_DP : MVN_DP , 0 , reg , SLJIT_UNUSED , imm1 )"		1014153	0					
ANR	1014580	Callee	EMIT_DATA_PROCESS_INS		1014153	0					
ANR	1014581	Identifier	EMIT_DATA_PROCESS_INS		1014153	0					
ANR	1014582	ArgumentList	positive ? MOV_DP : MVN_DP		1014153	1					
ANR	1014583	Argument	positive ? MOV_DP : MVN_DP		1014153	0					
ANR	1014584	ConditionalExpression	positive ? MOV_DP : MVN_DP		1014153	0					
ANR	1014585	Condition	positive		1014153	0					
ANR	1014586	Identifier	positive		1014153	0					
ANR	1014587	Identifier	MOV_DP		1014153	1					
ANR	1014588	Identifier	MVN_DP		1014153	2					
ANR	1014589	Argument	0		1014153	1					
ANR	1014590	PrimaryExpression	0		1014153	0					
ANR	1014591	Argument	reg		1014153	2					
ANR	1014592	Identifier	reg		1014153	0					
ANR	1014593	Argument	SLJIT_UNUSED		1014153	3					
ANR	1014594	Identifier	SLJIT_UNUSED		1014153	0					
ANR	1014595	Argument	imm1		1014153	4					
ANR	1014596	Identifier	imm1		1014153	0					
ANR	1014597	ExpressionStatement	"FAIL_IF ( push_inst ( compiler , EMIT_DATA_PROCESS_INS ( positive ? ORR_DP : BIC_DP , 0 , reg , reg , imm2 ) ) )"	1284:1:39701:39799	1014153	10	True				
ANR	1014598	CallExpression	"FAIL_IF ( push_inst ( compiler , EMIT_DATA_PROCESS_INS ( positive ? ORR_DP : BIC_DP , 0 , reg , reg , imm2 ) ) )"		1014153	0					
ANR	1014599	Callee	FAIL_IF		1014153	0					
ANR	1014600	Identifier	FAIL_IF		1014153	0					
ANR	1014601	ArgumentList	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( positive ? ORR_DP : BIC_DP , 0 , reg , reg , imm2 ) )"		1014153	1					
ANR	1014602	Argument	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( positive ? ORR_DP : BIC_DP , 0 , reg , reg , imm2 ) )"		1014153	0					
ANR	1014603	CallExpression	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( positive ? ORR_DP : BIC_DP , 0 , reg , reg , imm2 ) )"		1014153	0					
ANR	1014604	Callee	push_inst		1014153	0					
ANR	1014605	Identifier	push_inst		1014153	0					
ANR	1014606	ArgumentList	compiler		1014153	1					
ANR	1014607	Argument	compiler		1014153	0					
ANR	1014608	Identifier	compiler		1014153	0					
ANR	1014609	Argument	"EMIT_DATA_PROCESS_INS ( positive ? ORR_DP : BIC_DP , 0 , reg , reg , imm2 )"		1014153	1					
ANR	1014610	CallExpression	"EMIT_DATA_PROCESS_INS ( positive ? ORR_DP : BIC_DP , 0 , reg , reg , imm2 )"		1014153	0					
ANR	1014611	Callee	EMIT_DATA_PROCESS_INS		1014153	0					
ANR	1014612	Identifier	EMIT_DATA_PROCESS_INS		1014153	0					
ANR	1014613	ArgumentList	positive ? ORR_DP : BIC_DP		1014153	1					
ANR	1014614	Argument	positive ? ORR_DP : BIC_DP		1014153	0					
ANR	1014615	ConditionalExpression	positive ? ORR_DP : BIC_DP		1014153	0					
ANR	1014616	Condition	positive		1014153	0					
ANR	1014617	Identifier	positive		1014153	0					
ANR	1014618	Identifier	ORR_DP		1014153	1					
ANR	1014619	Identifier	BIC_DP		1014153	2					
ANR	1014620	Argument	0		1014153	1					
ANR	1014621	PrimaryExpression	0		1014153	0					
ANR	1014622	Argument	reg		1014153	2					
ANR	1014623	Identifier	reg		1014153	0					
ANR	1014624	Argument	reg		1014153	3					
ANR	1014625	Identifier	reg		1014153	0					
ANR	1014626	Argument	imm2		1014153	4					
ANR	1014627	Identifier	imm2		1014153	0					
ANR	1014628	ReturnStatement	return 1 ;	1285:1:39802:39810	1014153	11	True				
ANR	1014629	PrimaryExpression	1		1014153	0					
ANR	1014630	ReturnType	static sljit_si		1014153	1					
ANR	1014631	Identifier	generate_int		1014153	2					
ANR	1014632	ParameterList	"struct sljit_compiler * compiler , sljit_si reg , sljit_uw imm , sljit_si positive"		1014153	3					
ANR	1014633	Parameter	struct sljit_compiler * compiler	1178:29:37689:37719	1014153	0	True				
ANR	1014634	ParameterType	struct sljit_compiler *		1014153	0					
ANR	1014635	Identifier	compiler		1014153	1					
ANR	1014636	Parameter	sljit_si reg	1178:62:37722:37733	1014153	1	True				
ANR	1014637	ParameterType	sljit_si		1014153	0					
ANR	1014638	Identifier	reg		1014153	1					
ANR	1014639	Parameter	sljit_uw imm	1178:76:37736:37747	1014153	2	True				
ANR	1014640	ParameterType	sljit_uw		1014153	0					
ANR	1014641	Identifier	imm		1014153	1					
ANR	1014642	Parameter	sljit_si positive	1178:90:37750:37766	1014153	3	True				
ANR	1014643	ParameterType	sljit_si		1014153	0					
ANR	1014644	Identifier	positive		1014153	1					
ANR	1014645	CFGEntryNode	ENTRY		1014153		True				
ANR	1014646	CFGExitNode	EXIT		1014153		True				
ANR	1014647	Symbol	push_inst		1014153						
ANR	1014648	Symbol	MVN_DP		1014153						
ANR	1014649	Symbol	ORR_DP		1014153						
ANR	1014650	Symbol	imm		1014153						
ANR	1014651	Symbol	positive		1014153						
ANR	1014652	Symbol	BIC_DP		1014153						
ANR	1014653	Symbol	rol		1014153						
ANR	1014654	Symbol	MOV_DP		1014153						
ANR	1014655	Symbol	SLJIT_UNUSED		1014153						
ANR	1014656	Symbol	reg		1014153						
ANR	1014657	Symbol	imm2		1014153						
ANR	1014658	Symbol	imm1		1014153						
ANR	1014659	Symbol	SRC2_IMM		1014153						
ANR	1014660	Symbol	compiler		1014153						
ANR	1014661	Symbol	mask		1014153						
ANR	1014662	Symbol	EMIT_DATA_PROCESS_INS		1014153						
ANR	1014663	Function	load_immediate	1289:0:39822:40743							
ANR	1014664	FunctionDef	"load_immediate (struct sljit_compiler * compiler , sljit_si reg , sljit_uw imm)"		1014663	0					
ANR	1014665	CompoundStatement		1290:0:39914:40743	1014663	0					
ANR	1014666	IdentifierDeclStatement	sljit_uw tmp ;	1291:1:39917:39929	1014663	0	True				
ANR	1014667	IdentifierDecl	tmp		1014663	0					
ANR	1014668	IdentifierDeclType	sljit_uw		1014663	0					
ANR	1014669	Identifier	tmp		1014663	1					
ANR	1014670	IfStatement	if ( ! ( imm & ~0xffff ) )		1014663	1					
ANR	1014671	Condition	! ( imm & ~0xffff )	1294:5:39994:40009	1014663	0	True				
ANR	1014672	UnaryOperationExpression	! ( imm & ~0xffff )		1014663	0					
ANR	1014673	UnaryOperator	!		1014663	0					
ANR	1014674	BitAndExpression	imm & ~0xffff		1014663	1		&			
ANR	1014675	Identifier	imm		1014663	0					
ANR	1014676	Identifier	~0xffff		1014663	1					
ANR	1014677	ReturnStatement	"return push_inst ( compiler , MOVW | RD ( reg ) | ( ( imm << 4 ) & 0xf0000 ) | ( imm & 0xfff ) ) ;"	1295:2:40014:40097	1014663	1	True				
ANR	1014678	CallExpression	"push_inst ( compiler , MOVW | RD ( reg ) | ( ( imm << 4 ) & 0xf0000 ) | ( imm & 0xfff ) )"		1014663	0					
ANR	1014679	Callee	push_inst		1014663	0					
ANR	1014680	Identifier	push_inst		1014663	0					
ANR	1014681	ArgumentList	compiler		1014663	1					
ANR	1014682	Argument	compiler		1014663	0					
ANR	1014683	Identifier	compiler		1014663	0					
ANR	1014684	Argument	MOVW | RD ( reg ) | ( ( imm << 4 ) & 0xf0000 ) | ( imm & 0xfff )		1014663	1					
ANR	1014685	InclusiveOrExpression	MOVW | RD ( reg ) | ( ( imm << 4 ) & 0xf0000 ) | ( imm & 0xfff )		1014663	0		|			
ANR	1014686	Identifier	MOVW		1014663	0					
ANR	1014687	InclusiveOrExpression	RD ( reg ) | ( ( imm << 4 ) & 0xf0000 ) | ( imm & 0xfff )		1014663	1		|			
ANR	1014688	CallExpression	RD ( reg )		1014663	0					
ANR	1014689	Callee	RD		1014663	0					
ANR	1014690	Identifier	RD		1014663	0					
ANR	1014691	ArgumentList	reg		1014663	1					
ANR	1014692	Argument	reg		1014663	0					
ANR	1014693	Identifier	reg		1014663	0					
ANR	1014694	InclusiveOrExpression	( ( imm << 4 ) & 0xf0000 ) | ( imm & 0xfff )		1014663	1		|			
ANR	1014695	BitAndExpression	( imm << 4 ) & 0xf0000		1014663	0		&			
ANR	1014696	ShiftExpression	imm << 4		1014663	0		<<			
ANR	1014697	Identifier	imm		1014663	0					
ANR	1014698	PrimaryExpression	4		1014663	1					
ANR	1014699	PrimaryExpression	0xf0000		1014663	1					
ANR	1014700	BitAndExpression	imm & 0xfff		1014663	1		&			
ANR	1014701	Identifier	imm		1014663	0					
ANR	1014702	PrimaryExpression	0xfff		1014663	1					
ANR	1014703	ExpressionStatement	tmp = get_imm ( imm )	1299:1:40137:40155	1014663	2	True				
ANR	1014704	AssignmentExpression	tmp = get_imm ( imm )		1014663	0		=			
ANR	1014705	Identifier	tmp		1014663	0					
ANR	1014706	CallExpression	get_imm ( imm )		1014663	1					
ANR	1014707	Callee	get_imm		1014663	0					
ANR	1014708	Identifier	get_imm		1014663	0					
ANR	1014709	ArgumentList	imm		1014663	1					
ANR	1014710	Argument	imm		1014663	0					
ANR	1014711	Identifier	imm		1014663	0					
ANR	1014712	IfStatement	if ( tmp )		1014663	3					
ANR	1014713	Condition	tmp	1300:5:40162:40164	1014663	0	True				
ANR	1014714	Identifier	tmp		1014663	0					
ANR	1014715	ReturnStatement	"return push_inst ( compiler , EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , reg , SLJIT_UNUSED , tmp ) ) ;"	1301:2:40169:40253	1014663	1	True				
ANR	1014716	CallExpression	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , reg , SLJIT_UNUSED , tmp ) )"		1014663	0					
ANR	1014717	Callee	push_inst		1014663	0					
ANR	1014718	Identifier	push_inst		1014663	0					
ANR	1014719	ArgumentList	compiler		1014663	1					
ANR	1014720	Argument	compiler		1014663	0					
ANR	1014721	Identifier	compiler		1014663	0					
ANR	1014722	Argument	"EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , reg , SLJIT_UNUSED , tmp )"		1014663	1					
ANR	1014723	CallExpression	"EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , reg , SLJIT_UNUSED , tmp )"		1014663	0					
ANR	1014724	Callee	EMIT_DATA_PROCESS_INS		1014663	0					
ANR	1014725	Identifier	EMIT_DATA_PROCESS_INS		1014663	0					
ANR	1014726	ArgumentList	MOV_DP		1014663	1					
ANR	1014727	Argument	MOV_DP		1014663	0					
ANR	1014728	Identifier	MOV_DP		1014663	0					
ANR	1014729	Argument	0		1014663	1					
ANR	1014730	PrimaryExpression	0		1014663	0					
ANR	1014731	Argument	reg		1014663	2					
ANR	1014732	Identifier	reg		1014663	0					
ANR	1014733	Argument	SLJIT_UNUSED		1014663	3					
ANR	1014734	Identifier	SLJIT_UNUSED		1014663	0					
ANR	1014735	Argument	tmp		1014663	4					
ANR	1014736	Identifier	tmp		1014663	0					
ANR	1014737	ExpressionStatement	tmp = get_imm ( ~imm )	1303:1:40257:40276	1014663	4	True				
ANR	1014738	AssignmentExpression	tmp = get_imm ( ~imm )		1014663	0		=			
ANR	1014739	Identifier	tmp		1014663	0					
ANR	1014740	CallExpression	get_imm ( ~imm )		1014663	1					
ANR	1014741	Callee	get_imm		1014663	0					
ANR	1014742	Identifier	get_imm		1014663	0					
ANR	1014743	ArgumentList	~imm		1014663	1					
ANR	1014744	Argument	~imm		1014663	0					
ANR	1014745	Identifier	~imm		1014663	0					
ANR	1014746	IfStatement	if ( tmp )		1014663	5					
ANR	1014747	Condition	tmp	1304:5:40283:40285	1014663	0	True				
ANR	1014748	Identifier	tmp		1014663	0					
ANR	1014749	ReturnStatement	"return push_inst ( compiler , EMIT_DATA_PROCESS_INS ( MVN_DP , 0 , reg , SLJIT_UNUSED , tmp ) ) ;"	1305:2:40290:40374	1014663	1	True				
ANR	1014750	CallExpression	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( MVN_DP , 0 , reg , SLJIT_UNUSED , tmp ) )"		1014663	0					
ANR	1014751	Callee	push_inst		1014663	0					
ANR	1014752	Identifier	push_inst		1014663	0					
ANR	1014753	ArgumentList	compiler		1014663	1					
ANR	1014754	Argument	compiler		1014663	0					
ANR	1014755	Identifier	compiler		1014663	0					
ANR	1014756	Argument	"EMIT_DATA_PROCESS_INS ( MVN_DP , 0 , reg , SLJIT_UNUSED , tmp )"		1014663	1					
ANR	1014757	CallExpression	"EMIT_DATA_PROCESS_INS ( MVN_DP , 0 , reg , SLJIT_UNUSED , tmp )"		1014663	0					
ANR	1014758	Callee	EMIT_DATA_PROCESS_INS		1014663	0					
ANR	1014759	Identifier	EMIT_DATA_PROCESS_INS		1014663	0					
ANR	1014760	ArgumentList	MVN_DP		1014663	1					
ANR	1014761	Argument	MVN_DP		1014663	0					
ANR	1014762	Identifier	MVN_DP		1014663	0					
ANR	1014763	Argument	0		1014663	1					
ANR	1014764	PrimaryExpression	0		1014663	0					
ANR	1014765	Argument	reg		1014663	2					
ANR	1014766	Identifier	reg		1014663	0					
ANR	1014767	Argument	SLJIT_UNUSED		1014663	3					
ANR	1014768	Identifier	SLJIT_UNUSED		1014663	0					
ANR	1014769	Argument	tmp		1014663	4					
ANR	1014770	Identifier	tmp		1014663	0					
ANR	1014771	ExpressionStatement	"FAIL_IF ( generate_int ( compiler , reg , imm , 1 ) )"	1309:1:40464:40508	1014663	6	True				
ANR	1014772	CallExpression	"FAIL_IF ( generate_int ( compiler , reg , imm , 1 ) )"		1014663	0					
ANR	1014773	Callee	FAIL_IF		1014663	0					
ANR	1014774	Identifier	FAIL_IF		1014663	0					
ANR	1014775	ArgumentList	"generate_int ( compiler , reg , imm , 1 )"		1014663	1					
ANR	1014776	Argument	"generate_int ( compiler , reg , imm , 1 )"		1014663	0					
ANR	1014777	CallExpression	"generate_int ( compiler , reg , imm , 1 )"		1014663	0					
ANR	1014778	Callee	generate_int		1014663	0					
ANR	1014779	Identifier	generate_int		1014663	0					
ANR	1014780	ArgumentList	compiler		1014663	1					
ANR	1014781	Argument	compiler		1014663	0					
ANR	1014782	Identifier	compiler		1014663	0					
ANR	1014783	Argument	reg		1014663	1					
ANR	1014784	Identifier	reg		1014663	0					
ANR	1014785	Argument	imm		1014663	2					
ANR	1014786	Identifier	imm		1014663	0					
ANR	1014787	Argument	1		1014663	3					
ANR	1014788	PrimaryExpression	1		1014663	0					
ANR	1014789	ExpressionStatement	"FAIL_IF ( generate_int ( compiler , reg , ~imm , 0 ) )"	1310:1:40511:40556	1014663	7	True				
ANR	1014790	CallExpression	"FAIL_IF ( generate_int ( compiler , reg , ~imm , 0 ) )"		1014663	0					
ANR	1014791	Callee	FAIL_IF		1014663	0					
ANR	1014792	Identifier	FAIL_IF		1014663	0					
ANR	1014793	ArgumentList	"generate_int ( compiler , reg , ~imm , 0 )"		1014663	1					
ANR	1014794	Argument	"generate_int ( compiler , reg , ~imm , 0 )"		1014663	0					
ANR	1014795	CallExpression	"generate_int ( compiler , reg , ~imm , 0 )"		1014663	0					
ANR	1014796	Callee	generate_int		1014663	0					
ANR	1014797	Identifier	generate_int		1014663	0					
ANR	1014798	ArgumentList	compiler		1014663	1					
ANR	1014799	Argument	compiler		1014663	0					
ANR	1014800	Identifier	compiler		1014663	0					
ANR	1014801	Argument	reg		1014663	1					
ANR	1014802	Identifier	reg		1014663	0					
ANR	1014803	Argument	~imm		1014663	2					
ANR	1014804	Identifier	~imm		1014663	0					
ANR	1014805	Argument	0		1014663	3					
ANR	1014806	PrimaryExpression	0		1014663	0					
ANR	1014807	ReturnStatement	"return push_inst_with_literal ( compiler , EMIT_DATA_TRANSFER ( WORD_DATA | LOAD_DATA , 1 , 0 , reg , TMP_PC , 0 ) , imm ) ;"	1313:1:40581:40690	1014663	8	True				
ANR	1014808	CallExpression	"push_inst_with_literal ( compiler , EMIT_DATA_TRANSFER ( WORD_DATA | LOAD_DATA , 1 , 0 , reg , TMP_PC , 0 ) , imm )"		1014663	0					
ANR	1014809	Callee	push_inst_with_literal		1014663	0					
ANR	1014810	Identifier	push_inst_with_literal		1014663	0					
ANR	1014811	ArgumentList	compiler		1014663	1					
ANR	1014812	Argument	compiler		1014663	0					
ANR	1014813	Identifier	compiler		1014663	0					
ANR	1014814	Argument	"EMIT_DATA_TRANSFER ( WORD_DATA | LOAD_DATA , 1 , 0 , reg , TMP_PC , 0 )"		1014663	1					
ANR	1014815	CallExpression	"EMIT_DATA_TRANSFER ( WORD_DATA | LOAD_DATA , 1 , 0 , reg , TMP_PC , 0 )"		1014663	0					
ANR	1014816	Callee	EMIT_DATA_TRANSFER		1014663	0					
ANR	1014817	Identifier	EMIT_DATA_TRANSFER		1014663	0					
ANR	1014818	ArgumentList	WORD_DATA | LOAD_DATA		1014663	1					
ANR	1014819	Argument	WORD_DATA | LOAD_DATA		1014663	0					
ANR	1014820	InclusiveOrExpression	WORD_DATA | LOAD_DATA		1014663	0		|			
ANR	1014821	Identifier	WORD_DATA		1014663	0					
ANR	1014822	Identifier	LOAD_DATA		1014663	1					
ANR	1014823	Argument	1		1014663	1					
ANR	1014824	PrimaryExpression	1		1014663	0					
ANR	1014825	Argument	0		1014663	2					
ANR	1014826	PrimaryExpression	0		1014663	0					
ANR	1014827	Argument	reg		1014663	3					
ANR	1014828	Identifier	reg		1014663	0					
ANR	1014829	Argument	TMP_PC		1014663	4					
ANR	1014830	Identifier	TMP_PC		1014663	0					
ANR	1014831	Argument	0		1014663	5					
ANR	1014832	PrimaryExpression	0		1014663	0					
ANR	1014833	Argument	imm		1014663	2					
ANR	1014834	Identifier	imm		1014663	0					
ANR	1014835	ReturnType	static sljit_si		1014663	1					
ANR	1014836	Identifier	load_immediate		1014663	2					
ANR	1014837	ParameterList	"struct sljit_compiler * compiler , sljit_si reg , sljit_uw imm"		1014663	3					
ANR	1014838	Parameter	struct sljit_compiler * compiler	1289:31:39853:39883	1014663	0	True				
ANR	1014839	ParameterType	struct sljit_compiler *		1014663	0					
ANR	1014840	Identifier	compiler		1014663	1					
ANR	1014841	Parameter	sljit_si reg	1289:64:39886:39897	1014663	1	True				
ANR	1014842	ParameterType	sljit_si		1014663	0					
ANR	1014843	Identifier	reg		1014663	1					
ANR	1014844	Parameter	sljit_uw imm	1289:78:39900:39911	1014663	2	True				
ANR	1014845	ParameterType	sljit_uw		1014663	0					
ANR	1014846	Identifier	imm		1014663	1					
ANR	1014847	CFGEntryNode	ENTRY		1014663		True				
ANR	1014848	CFGExitNode	EXIT		1014663		True				
ANR	1014849	Symbol	push_inst		1014663						
ANR	1014850	Symbol	~0xffff		1014663						
ANR	1014851	Symbol	TMP_PC		1014663						
ANR	1014852	Symbol	MVN_DP		1014663						
ANR	1014853	Symbol	LOAD_DATA		1014663						
ANR	1014854	Symbol	MOVW		1014663						
ANR	1014855	Symbol	imm		1014663						
ANR	1014856	Symbol	get_imm		1014663						
ANR	1014857	Symbol	push_inst_with_literal		1014663						
ANR	1014858	Symbol	MOV_DP		1014663						
ANR	1014859	Symbol	~imm		1014663						
ANR	1014860	Symbol	RD		1014663						
ANR	1014861	Symbol	SLJIT_UNUSED		1014663						
ANR	1014862	Symbol	reg		1014663						
ANR	1014863	Symbol	tmp		1014663						
ANR	1014864	Symbol	generate_int		1014663						
ANR	1014865	Symbol	compiler		1014663						
ANR	1014866	Symbol	WORD_DATA		1014663						
ANR	1014867	Symbol	EMIT_DATA_PROCESS_INS		1014663						
ANR	1014868	Symbol	EMIT_DATA_TRANSFER		1014663						
ANR	1014869	Function	emit_set_delta	1320:0:40845:41262							
ANR	1014870	FunctionDef	"emit_set_delta (struct sljit_compiler * compiler , sljit_si dst , sljit_si reg , sljit_sw value)"		1014869	0					
ANR	1014871	CompoundStatement		1321:0:40953:41262	1014869	0					
ANR	1014872	IfStatement	if ( value >= 0 )		1014869	0					
ANR	1014873	Condition	value >= 0	1322:5:40960:40969	1014869	0	True				
ANR	1014874	RelationalExpression	value >= 0		1014869	0		>=			
ANR	1014875	Identifier	value		1014869	0					
ANR	1014876	PrimaryExpression	0		1014869	1					
ANR	1014877	CompoundStatement		2:17:18:18	1014869	1					
ANR	1014878	ExpressionStatement	value = get_imm ( value )	1323:2:40976:40998	1014869	0	True				
ANR	1014879	AssignmentExpression	value = get_imm ( value )		1014869	0		=			
ANR	1014880	Identifier	value		1014869	0					
ANR	1014881	CallExpression	get_imm ( value )		1014869	1					
ANR	1014882	Callee	get_imm		1014869	0					
ANR	1014883	Identifier	get_imm		1014869	0					
ANR	1014884	ArgumentList	value		1014869	1					
ANR	1014885	Argument	value		1014869	0					
ANR	1014886	Identifier	value		1014869	0					
ANR	1014887	IfStatement	if ( value )		1014869	1					
ANR	1014888	Condition	value	1324:6:41006:41010	1014869	0	True				
ANR	1014889	Identifier	value		1014869	0					
ANR	1014890	ReturnStatement	"return push_inst ( compiler , EMIT_DATA_PROCESS_INS ( ADD_DP , 0 , dst , reg , value ) ) ;"	1325:3:41016:41093	1014869	1	True				
ANR	1014891	CallExpression	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( ADD_DP , 0 , dst , reg , value ) )"		1014869	0					
ANR	1014892	Callee	push_inst		1014869	0					
ANR	1014893	Identifier	push_inst		1014869	0					
ANR	1014894	ArgumentList	compiler		1014869	1					
ANR	1014895	Argument	compiler		1014869	0					
ANR	1014896	Identifier	compiler		1014869	0					
ANR	1014897	Argument	"EMIT_DATA_PROCESS_INS ( ADD_DP , 0 , dst , reg , value )"		1014869	1					
ANR	1014898	CallExpression	"EMIT_DATA_PROCESS_INS ( ADD_DP , 0 , dst , reg , value )"		1014869	0					
ANR	1014899	Callee	EMIT_DATA_PROCESS_INS		1014869	0					
ANR	1014900	Identifier	EMIT_DATA_PROCESS_INS		1014869	0					
ANR	1014901	ArgumentList	ADD_DP		1014869	1					
ANR	1014902	Argument	ADD_DP		1014869	0					
ANR	1014903	Identifier	ADD_DP		1014869	0					
ANR	1014904	Argument	0		1014869	1					
ANR	1014905	PrimaryExpression	0		1014869	0					
ANR	1014906	Argument	dst		1014869	2					
ANR	1014907	Identifier	dst		1014869	0					
ANR	1014908	Argument	reg		1014869	3					
ANR	1014909	Identifier	reg		1014869	0					
ANR	1014910	Argument	value		1014869	4					
ANR	1014911	Identifier	value		1014869	0					
ANR	1014912	ElseStatement	else		1014869	0					
ANR	1014913	CompoundStatement		7:6:150:150	1014869	0					
ANR	1014914	ExpressionStatement	value = get_imm ( - value )	1328:2:41108:41131	1014869	0	True				
ANR	1014915	AssignmentExpression	value = get_imm ( - value )		1014869	0		=			
ANR	1014916	Identifier	value		1014869	0					
ANR	1014917	CallExpression	get_imm ( - value )		1014869	1					
ANR	1014918	Callee	get_imm		1014869	0					
ANR	1014919	Identifier	get_imm		1014869	0					
ANR	1014920	ArgumentList	- value		1014869	1					
ANR	1014921	Argument	- value		1014869	0					
ANR	1014922	UnaryOperationExpression	- value		1014869	0					
ANR	1014923	UnaryOperator	-		1014869	0					
ANR	1014924	Identifier	value		1014869	1					
ANR	1014925	IfStatement	if ( value )		1014869	1					
ANR	1014926	Condition	value	1329:6:41139:41143	1014869	0	True				
ANR	1014927	Identifier	value		1014869	0					
ANR	1014928	ReturnStatement	"return push_inst ( compiler , EMIT_DATA_PROCESS_INS ( SUB_DP , 0 , dst , reg , value ) ) ;"	1330:3:41149:41226	1014869	1	True				
ANR	1014929	CallExpression	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( SUB_DP , 0 , dst , reg , value ) )"		1014869	0					
ANR	1014930	Callee	push_inst		1014869	0					
ANR	1014931	Identifier	push_inst		1014869	0					
ANR	1014932	ArgumentList	compiler		1014869	1					
ANR	1014933	Argument	compiler		1014869	0					
ANR	1014934	Identifier	compiler		1014869	0					
ANR	1014935	Argument	"EMIT_DATA_PROCESS_INS ( SUB_DP , 0 , dst , reg , value )"		1014869	1					
ANR	1014936	CallExpression	"EMIT_DATA_PROCESS_INS ( SUB_DP , 0 , dst , reg , value )"		1014869	0					
ANR	1014937	Callee	EMIT_DATA_PROCESS_INS		1014869	0					
ANR	1014938	Identifier	EMIT_DATA_PROCESS_INS		1014869	0					
ANR	1014939	ArgumentList	SUB_DP		1014869	1					
ANR	1014940	Argument	SUB_DP		1014869	0					
ANR	1014941	Identifier	SUB_DP		1014869	0					
ANR	1014942	Argument	0		1014869	1					
ANR	1014943	PrimaryExpression	0		1014869	0					
ANR	1014944	Argument	dst		1014869	2					
ANR	1014945	Identifier	dst		1014869	0					
ANR	1014946	Argument	reg		1014869	3					
ANR	1014947	Identifier	reg		1014869	0					
ANR	1014948	Argument	value		1014869	4					
ANR	1014949	Identifier	value		1014869	0					
ANR	1014950	ReturnStatement	return SLJIT_ERR_UNSUPPORTED ;	1332:1:41232:41260	1014869	1	True				
ANR	1014951	Identifier	SLJIT_ERR_UNSUPPORTED		1014869	0					
ANR	1014952	ReturnType	static sljit_si		1014869	1					
ANR	1014953	Identifier	emit_set_delta		1014869	2					
ANR	1014954	ParameterList	"struct sljit_compiler * compiler , sljit_si dst , sljit_si reg , sljit_sw value"		1014869	3					
ANR	1014955	Parameter	struct sljit_compiler * compiler	1320:31:40876:40906	1014869	0	True				
ANR	1014956	ParameterType	struct sljit_compiler *		1014869	0					
ANR	1014957	Identifier	compiler		1014869	1					
ANR	1014958	Parameter	sljit_si dst	1320:64:40909:40920	1014869	1	True				
ANR	1014959	ParameterType	sljit_si		1014869	0					
ANR	1014960	Identifier	dst		1014869	1					
ANR	1014961	Parameter	sljit_si reg	1320:78:40923:40934	1014869	2	True				
ANR	1014962	ParameterType	sljit_si		1014869	0					
ANR	1014963	Identifier	reg		1014869	1					
ANR	1014964	Parameter	sljit_sw value	1320:92:40937:40950	1014869	3	True				
ANR	1014965	ParameterType	sljit_sw		1014869	0					
ANR	1014966	Identifier	value		1014869	1					
ANR	1014967	CFGEntryNode	ENTRY		1014869		True				
ANR	1014968	CFGExitNode	EXIT		1014869		True				
ANR	1014969	Symbol	push_inst		1014869						
ANR	1014970	Symbol	ADD_DP		1014869						
ANR	1014971	Symbol	dst		1014869						
ANR	1014972	Symbol	SUB_DP		1014869						
ANR	1014973	Symbol	reg		1014869						
ANR	1014974	Symbol	get_imm		1014869						
ANR	1014975	Symbol	compiler		1014869						
ANR	1014976	Symbol	value		1014869						
ANR	1014977	Symbol	EMIT_DATA_PROCESS_INS		1014869						
ANR	1014978	Symbol	SLJIT_ERR_UNSUPPORTED		1014869						
ANR	1014979	Function	getput_arg_fast	1336:0:41325:43324							
ANR	1014980	FunctionDef	"getput_arg_fast (struct sljit_compiler * compiler , sljit_si inp_flags , sljit_si reg , sljit_si arg , sljit_sw argw)"		1014979	0					
ANR	1014981	CompoundStatement		1337:0:41453:43324	1014979	0					
ANR	1014982	IdentifierDeclStatement	sljit_uw imm ;	1338:1:41456:41468	1014979	0	True				
ANR	1014983	IdentifierDecl	imm		1014979	0					
ANR	1014984	IdentifierDeclType	sljit_uw		1014979	0					
ANR	1014985	Identifier	imm		1014979	1					
ANR	1014986	IfStatement	if ( arg & SLJIT_IMM )		1014979	1					
ANR	1014987	Condition	arg & SLJIT_IMM	1340:5:41476:41490	1014979	0	True				
ANR	1014988	BitAndExpression	arg & SLJIT_IMM		1014979	0		&			
ANR	1014989	Identifier	arg		1014979	0					
ANR	1014990	Identifier	SLJIT_IMM		1014979	1					
ANR	1014991	CompoundStatement		4:22:39:39	1014979	1					
ANR	1014992	ExpressionStatement	imm = get_imm ( argw )	1341:2:41497:41516	1014979	0	True				
ANR	1014993	AssignmentExpression	imm = get_imm ( argw )		1014979	0		=			
ANR	1014994	Identifier	imm		1014979	0					
ANR	1014995	CallExpression	get_imm ( argw )		1014979	1					
ANR	1014996	Callee	get_imm		1014979	0					
ANR	1014997	Identifier	get_imm		1014979	0					
ANR	1014998	ArgumentList	argw		1014979	1					
ANR	1014999	Argument	argw		1014979	0					
ANR	1015000	Identifier	argw		1014979	0					
ANR	1015001	IfStatement	if ( imm )		1014979	1					
ANR	1015002	Condition	imm	1342:6:41524:41526	1014979	0	True				
ANR	1015003	Identifier	imm		1014979	0					
ANR	1015004	CompoundStatement		6:11:75:75	1014979	1					
ANR	1015005	IfStatement	if ( inp_flags & ARG_TEST )		1014979	0					
ANR	1015006	Condition	inp_flags & ARG_TEST	1343:7:41538:41557	1014979	0	True				
ANR	1015007	BitAndExpression	inp_flags & ARG_TEST		1014979	0		&			
ANR	1015008	Identifier	inp_flags		1014979	0					
ANR	1015009	Identifier	ARG_TEST		1014979	1					
ANR	1015010	ReturnStatement	return 1 ;	1344:4:41564:41572	1014979	1	True				
ANR	1015011	PrimaryExpression	1		1014979	0					
ANR	1015012	ExpressionStatement	"FAIL_IF ( push_inst ( compiler , EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , reg , SLJIT_UNUSED , imm ) ) )"	1345:3:41577:41663	1014979	1	True				
ANR	1015013	CallExpression	"FAIL_IF ( push_inst ( compiler , EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , reg , SLJIT_UNUSED , imm ) ) )"		1014979	0					
ANR	1015014	Callee	FAIL_IF		1014979	0					
ANR	1015015	Identifier	FAIL_IF		1014979	0					
ANR	1015016	ArgumentList	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , reg , SLJIT_UNUSED , imm ) )"		1014979	1					
ANR	1015017	Argument	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , reg , SLJIT_UNUSED , imm ) )"		1014979	0					
ANR	1015018	CallExpression	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , reg , SLJIT_UNUSED , imm ) )"		1014979	0					
ANR	1015019	Callee	push_inst		1014979	0					
ANR	1015020	Identifier	push_inst		1014979	0					
ANR	1015021	ArgumentList	compiler		1014979	1					
ANR	1015022	Argument	compiler		1014979	0					
ANR	1015023	Identifier	compiler		1014979	0					
ANR	1015024	Argument	"EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , reg , SLJIT_UNUSED , imm )"		1014979	1					
ANR	1015025	CallExpression	"EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , reg , SLJIT_UNUSED , imm )"		1014979	0					
ANR	1015026	Callee	EMIT_DATA_PROCESS_INS		1014979	0					
ANR	1015027	Identifier	EMIT_DATA_PROCESS_INS		1014979	0					
ANR	1015028	ArgumentList	MOV_DP		1014979	1					
ANR	1015029	Argument	MOV_DP		1014979	0					
ANR	1015030	Identifier	MOV_DP		1014979	0					
ANR	1015031	Argument	0		1014979	1					
ANR	1015032	PrimaryExpression	0		1014979	0					
ANR	1015033	Argument	reg		1014979	2					
ANR	1015034	Identifier	reg		1014979	0					
ANR	1015035	Argument	SLJIT_UNUSED		1014979	3					
ANR	1015036	Identifier	SLJIT_UNUSED		1014979	0					
ANR	1015037	Argument	imm		1014979	4					
ANR	1015038	Identifier	imm		1014979	0					
ANR	1015039	ReturnStatement	return - 1 ;	1346:3:41668:41677	1014979	2	True				
ANR	1015040	UnaryOperationExpression	- 1		1014979	0					
ANR	1015041	UnaryOperator	-		1014979	0					
ANR	1015042	PrimaryExpression	1		1014979	1					
ANR	1015043	ExpressionStatement	imm = get_imm ( ~argw )	1348:2:41685:41705	1014979	2	True				
ANR	1015044	AssignmentExpression	imm = get_imm ( ~argw )		1014979	0		=			
ANR	1015045	Identifier	imm		1014979	0					
ANR	1015046	CallExpression	get_imm ( ~argw )		1014979	1					
ANR	1015047	Callee	get_imm		1014979	0					
ANR	1015048	Identifier	get_imm		1014979	0					
ANR	1015049	ArgumentList	~argw		1014979	1					
ANR	1015050	Argument	~argw		1014979	0					
ANR	1015051	Identifier	~argw		1014979	0					
ANR	1015052	IfStatement	if ( imm )		1014979	3					
ANR	1015053	Condition	imm	1349:6:41713:41715	1014979	0	True				
ANR	1015054	Identifier	imm		1014979	0					
ANR	1015055	CompoundStatement		13:11:264:264	1014979	1					
ANR	1015056	IfStatement	if ( inp_flags & ARG_TEST )		1014979	0					
ANR	1015057	Condition	inp_flags & ARG_TEST	1350:7:41727:41746	1014979	0	True				
ANR	1015058	BitAndExpression	inp_flags & ARG_TEST		1014979	0		&			
ANR	1015059	Identifier	inp_flags		1014979	0					
ANR	1015060	Identifier	ARG_TEST		1014979	1					
ANR	1015061	ReturnStatement	return 1 ;	1351:4:41753:41761	1014979	1	True				
ANR	1015062	PrimaryExpression	1		1014979	0					
ANR	1015063	ExpressionStatement	"FAIL_IF ( push_inst ( compiler , EMIT_DATA_PROCESS_INS ( MVN_DP , 0 , reg , SLJIT_UNUSED , imm ) ) )"	1352:3:41766:41852	1014979	1	True				
ANR	1015064	CallExpression	"FAIL_IF ( push_inst ( compiler , EMIT_DATA_PROCESS_INS ( MVN_DP , 0 , reg , SLJIT_UNUSED , imm ) ) )"		1014979	0					
ANR	1015065	Callee	FAIL_IF		1014979	0					
ANR	1015066	Identifier	FAIL_IF		1014979	0					
ANR	1015067	ArgumentList	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( MVN_DP , 0 , reg , SLJIT_UNUSED , imm ) )"		1014979	1					
ANR	1015068	Argument	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( MVN_DP , 0 , reg , SLJIT_UNUSED , imm ) )"		1014979	0					
ANR	1015069	CallExpression	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( MVN_DP , 0 , reg , SLJIT_UNUSED , imm ) )"		1014979	0					
ANR	1015070	Callee	push_inst		1014979	0					
ANR	1015071	Identifier	push_inst		1014979	0					
ANR	1015072	ArgumentList	compiler		1014979	1					
ANR	1015073	Argument	compiler		1014979	0					
ANR	1015074	Identifier	compiler		1014979	0					
ANR	1015075	Argument	"EMIT_DATA_PROCESS_INS ( MVN_DP , 0 , reg , SLJIT_UNUSED , imm )"		1014979	1					
ANR	1015076	CallExpression	"EMIT_DATA_PROCESS_INS ( MVN_DP , 0 , reg , SLJIT_UNUSED , imm )"		1014979	0					
ANR	1015077	Callee	EMIT_DATA_PROCESS_INS		1014979	0					
ANR	1015078	Identifier	EMIT_DATA_PROCESS_INS		1014979	0					
ANR	1015079	ArgumentList	MVN_DP		1014979	1					
ANR	1015080	Argument	MVN_DP		1014979	0					
ANR	1015081	Identifier	MVN_DP		1014979	0					
ANR	1015082	Argument	0		1014979	1					
ANR	1015083	PrimaryExpression	0		1014979	0					
ANR	1015084	Argument	reg		1014979	2					
ANR	1015085	Identifier	reg		1014979	0					
ANR	1015086	Argument	SLJIT_UNUSED		1014979	3					
ANR	1015087	Identifier	SLJIT_UNUSED		1014979	0					
ANR	1015088	Argument	imm		1014979	4					
ANR	1015089	Identifier	imm		1014979	0					
ANR	1015090	ReturnStatement	return - 1 ;	1353:3:41857:41866	1014979	2	True				
ANR	1015091	UnaryOperationExpression	- 1		1014979	0					
ANR	1015092	UnaryOperator	-		1014979	0					
ANR	1015093	PrimaryExpression	1		1014979	1					
ANR	1015094	ReturnStatement	return 0 ;	1355:2:41874:41882	1014979	4	True				
ANR	1015095	PrimaryExpression	0		1014979	0					
ANR	1015096	ExpressionStatement	SLJIT_ASSERT ( arg & SLJIT_MEM )	1358:1:41889:41918	1014979	2	True				
ANR	1015097	CallExpression	SLJIT_ASSERT ( arg & SLJIT_MEM )		1014979	0					
ANR	1015098	Callee	SLJIT_ASSERT		1014979	0					
ANR	1015099	Identifier	SLJIT_ASSERT		1014979	0					
ANR	1015100	ArgumentList	arg & SLJIT_MEM		1014979	1					
ANR	1015101	Argument	arg & SLJIT_MEM		1014979	0					
ANR	1015102	BitAndExpression	arg & SLJIT_MEM		1014979	0		&			
ANR	1015103	Identifier	arg		1014979	0					
ANR	1015104	Identifier	SLJIT_MEM		1014979	1					
ANR	1015105	IfStatement	if ( ! ( arg & REG_MASK ) )		1014979	3					
ANR	1015106	Condition	! ( arg & REG_MASK )	1361:5:41952:41968	1014979	0	True				
ANR	1015107	UnaryOperationExpression	! ( arg & REG_MASK )		1014979	0					
ANR	1015108	UnaryOperator	!		1014979	0					
ANR	1015109	BitAndExpression	arg & REG_MASK		1014979	1		&			
ANR	1015110	Identifier	arg		1014979	0					
ANR	1015111	Identifier	REG_MASK		1014979	1					
ANR	1015112	ReturnStatement	return 0 ;	1362:2:41973:41981	1014979	1	True				
ANR	1015113	PrimaryExpression	0		1014979	0					
ANR	1015114	IfStatement	if ( arg & OFFS_REG_MASK )		1014979	4					
ANR	1015115	Condition	arg & OFFS_REG_MASK	1364:5:41989:42007	1014979	0	True				
ANR	1015116	BitAndExpression	arg & OFFS_REG_MASK		1014979	0		&			
ANR	1015117	Identifier	arg		1014979	0					
ANR	1015118	Identifier	OFFS_REG_MASK		1014979	1					
ANR	1015119	CompoundStatement		28:26:556:556	1014979	1					
ANR	1015120	IfStatement	if ( ( argw & 0x3 ) != 0 && ! IS_TYPE1_TRANSFER ( inp_flags ) )		1014979	0					
ANR	1015121	Condition	( argw & 0x3 ) != 0 && ! IS_TYPE1_TRANSFER ( inp_flags )	1365:6:42018:42067	1014979	0	True				
ANR	1015122	AndExpression	( argw & 0x3 ) != 0 && ! IS_TYPE1_TRANSFER ( inp_flags )		1014979	0		&&			
ANR	1015123	EqualityExpression	( argw & 0x3 ) != 0		1014979	0		!=			
ANR	1015124	BitAndExpression	argw & 0x3		1014979	0		&			
ANR	1015125	Identifier	argw		1014979	0					
ANR	1015126	PrimaryExpression	0x3		1014979	1					
ANR	1015127	PrimaryExpression	0		1014979	1					
ANR	1015128	UnaryOperationExpression	! IS_TYPE1_TRANSFER ( inp_flags )		1014979	1					
ANR	1015129	UnaryOperator	!		1014979	0					
ANR	1015130	CallExpression	IS_TYPE1_TRANSFER ( inp_flags )		1014979	1					
ANR	1015131	Callee	IS_TYPE1_TRANSFER		1014979	0					
ANR	1015132	Identifier	IS_TYPE1_TRANSFER		1014979	0					
ANR	1015133	ArgumentList	inp_flags		1014979	1					
ANR	1015134	Argument	inp_flags		1014979	0					
ANR	1015135	Identifier	inp_flags		1014979	0					
ANR	1015136	ReturnStatement	return 0 ;	1366:3:42073:42081	1014979	1	True				
ANR	1015137	PrimaryExpression	0		1014979	0					
ANR	1015138	IfStatement	if ( inp_flags & ARG_TEST )		1014979	1					
ANR	1015139	Condition	inp_flags & ARG_TEST	1368:6:42090:42109	1014979	0	True				
ANR	1015140	BitAndExpression	inp_flags & ARG_TEST		1014979	0		&			
ANR	1015141	Identifier	inp_flags		1014979	0					
ANR	1015142	Identifier	ARG_TEST		1014979	1					
ANR	1015143	ReturnStatement	return 1 ;	1369:3:42115:42123	1014979	1	True				
ANR	1015144	PrimaryExpression	1		1014979	0					
ANR	1015145	ExpressionStatement	"FAIL_IF ( push_inst ( compiler , EMIT_DATA_TRANSFER ( inp_flags , 1 , inp_flags & WRITE_BACK , reg , arg & REG_MASK , RM ( OFFS_REG ( arg ) ) | ( IS_TYPE1_TRANSFER ( inp_flags ) ? SRC2_IMM : 0 ) | ( ( argw & 0x3 ) << 7 ) ) ) )"	1370:2:42127:42326	1014979	2	True				
ANR	1015146	CallExpression	"FAIL_IF ( push_inst ( compiler , EMIT_DATA_TRANSFER ( inp_flags , 1 , inp_flags & WRITE_BACK , reg , arg & REG_MASK , RM ( OFFS_REG ( arg ) ) | ( IS_TYPE1_TRANSFER ( inp_flags ) ? SRC2_IMM : 0 ) | ( ( argw & 0x3 ) << 7 ) ) ) )"		1014979	0					
ANR	1015147	Callee	FAIL_IF		1014979	0					
ANR	1015148	Identifier	FAIL_IF		1014979	0					
ANR	1015149	ArgumentList	"push_inst ( compiler , EMIT_DATA_TRANSFER ( inp_flags , 1 , inp_flags & WRITE_BACK , reg , arg & REG_MASK , RM ( OFFS_REG ( arg ) ) | ( IS_TYPE1_TRANSFER ( inp_flags ) ? SRC2_IMM : 0 ) | ( ( argw & 0x3 ) << 7 ) ) )"		1014979	1					
ANR	1015150	Argument	"push_inst ( compiler , EMIT_DATA_TRANSFER ( inp_flags , 1 , inp_flags & WRITE_BACK , reg , arg & REG_MASK , RM ( OFFS_REG ( arg ) ) | ( IS_TYPE1_TRANSFER ( inp_flags ) ? SRC2_IMM : 0 ) | ( ( argw & 0x3 ) << 7 ) ) )"		1014979	0					
ANR	1015151	CallExpression	"push_inst ( compiler , EMIT_DATA_TRANSFER ( inp_flags , 1 , inp_flags & WRITE_BACK , reg , arg & REG_MASK , RM ( OFFS_REG ( arg ) ) | ( IS_TYPE1_TRANSFER ( inp_flags ) ? SRC2_IMM : 0 ) | ( ( argw & 0x3 ) << 7 ) ) )"		1014979	0					
ANR	1015152	Callee	push_inst		1014979	0					
ANR	1015153	Identifier	push_inst		1014979	0					
ANR	1015154	ArgumentList	compiler		1014979	1					
ANR	1015155	Argument	compiler		1014979	0					
ANR	1015156	Identifier	compiler		1014979	0					
ANR	1015157	Argument	"EMIT_DATA_TRANSFER ( inp_flags , 1 , inp_flags & WRITE_BACK , reg , arg & REG_MASK , RM ( OFFS_REG ( arg ) ) | ( IS_TYPE1_TRANSFER ( inp_flags ) ? SRC2_IMM : 0 ) | ( ( argw & 0x3 ) << 7 ) )"		1014979	1					
ANR	1015158	CallExpression	"EMIT_DATA_TRANSFER ( inp_flags , 1 , inp_flags & WRITE_BACK , reg , arg & REG_MASK , RM ( OFFS_REG ( arg ) ) | ( IS_TYPE1_TRANSFER ( inp_flags ) ? SRC2_IMM : 0 ) | ( ( argw & 0x3 ) << 7 ) )"		1014979	0					
ANR	1015159	Callee	EMIT_DATA_TRANSFER		1014979	0					
ANR	1015160	Identifier	EMIT_DATA_TRANSFER		1014979	0					
ANR	1015161	ArgumentList	inp_flags		1014979	1					
ANR	1015162	Argument	inp_flags		1014979	0					
ANR	1015163	Identifier	inp_flags		1014979	0					
ANR	1015164	Argument	1		1014979	1					
ANR	1015165	PrimaryExpression	1		1014979	0					
ANR	1015166	Argument	inp_flags & WRITE_BACK		1014979	2					
ANR	1015167	BitAndExpression	inp_flags & WRITE_BACK		1014979	0		&			
ANR	1015168	Identifier	inp_flags		1014979	0					
ANR	1015169	Identifier	WRITE_BACK		1014979	1					
ANR	1015170	Argument	reg		1014979	3					
ANR	1015171	Identifier	reg		1014979	0					
ANR	1015172	Argument	arg & REG_MASK		1014979	4					
ANR	1015173	BitAndExpression	arg & REG_MASK		1014979	0		&			
ANR	1015174	Identifier	arg		1014979	0					
ANR	1015175	Identifier	REG_MASK		1014979	1					
ANR	1015176	Argument	RM ( OFFS_REG ( arg ) ) | ( IS_TYPE1_TRANSFER ( inp_flags ) ? SRC2_IMM : 0 ) | ( ( argw & 0x3 ) << 7 )		1014979	5					
ANR	1015177	InclusiveOrExpression	RM ( OFFS_REG ( arg ) ) | ( IS_TYPE1_TRANSFER ( inp_flags ) ? SRC2_IMM : 0 ) | ( ( argw & 0x3 ) << 7 )		1014979	0		|			
ANR	1015178	CallExpression	RM ( OFFS_REG ( arg ) )		1014979	0					
ANR	1015179	Callee	RM		1014979	0					
ANR	1015180	Identifier	RM		1014979	0					
ANR	1015181	ArgumentList	OFFS_REG ( arg )		1014979	1					
ANR	1015182	Argument	OFFS_REG ( arg )		1014979	0					
ANR	1015183	CallExpression	OFFS_REG ( arg )		1014979	0					
ANR	1015184	Callee	OFFS_REG		1014979	0					
ANR	1015185	Identifier	OFFS_REG		1014979	0					
ANR	1015186	ArgumentList	arg		1014979	1					
ANR	1015187	Argument	arg		1014979	0					
ANR	1015188	Identifier	arg		1014979	0					
ANR	1015189	InclusiveOrExpression	( IS_TYPE1_TRANSFER ( inp_flags ) ? SRC2_IMM : 0 ) | ( ( argw & 0x3 ) << 7 )		1014979	1		|			
ANR	1015190	ConditionalExpression	IS_TYPE1_TRANSFER ( inp_flags ) ? SRC2_IMM : 0		1014979	0					
ANR	1015191	Condition	IS_TYPE1_TRANSFER ( inp_flags )		1014979	0					
ANR	1015192	CallExpression	IS_TYPE1_TRANSFER ( inp_flags )		1014979	0					
ANR	1015193	Callee	IS_TYPE1_TRANSFER		1014979	0					
ANR	1015194	Identifier	IS_TYPE1_TRANSFER		1014979	0					
ANR	1015195	ArgumentList	inp_flags		1014979	1					
ANR	1015196	Argument	inp_flags		1014979	0					
ANR	1015197	Identifier	inp_flags		1014979	0					
ANR	1015198	Identifier	SRC2_IMM		1014979	1					
ANR	1015199	PrimaryExpression	0		1014979	2					
ANR	1015200	ShiftExpression	( argw & 0x3 ) << 7		1014979	1		<<			
ANR	1015201	BitAndExpression	argw & 0x3		1014979	0		&			
ANR	1015202	Identifier	argw		1014979	0					
ANR	1015203	PrimaryExpression	0x3		1014979	1					
ANR	1015204	PrimaryExpression	7		1014979	1					
ANR	1015205	ReturnStatement	return - 1 ;	1372:2:42330:42339	1014979	3	True				
ANR	1015206	UnaryOperationExpression	- 1		1014979	0					
ANR	1015207	UnaryOperator	-		1014979	0					
ANR	1015208	PrimaryExpression	1		1014979	1					
ANR	1015209	IfStatement	if ( IS_TYPE1_TRANSFER ( inp_flags ) )		1014979	5					
ANR	1015210	Condition	IS_TYPE1_TRANSFER ( inp_flags )	1375:5:42350:42377	1014979	0	True				
ANR	1015211	CallExpression	IS_TYPE1_TRANSFER ( inp_flags )		1014979	0					
ANR	1015212	Callee	IS_TYPE1_TRANSFER		1014979	0					
ANR	1015213	Identifier	IS_TYPE1_TRANSFER		1014979	0					
ANR	1015214	ArgumentList	inp_flags		1014979	1					
ANR	1015215	Argument	inp_flags		1014979	0					
ANR	1015216	Identifier	inp_flags		1014979	0					
ANR	1015217	CompoundStatement		39:35:926:926	1014979	1					
ANR	1015218	IfStatement	if ( argw >= 0 && argw <= 0xfff )		1014979	0					
ANR	1015219	Condition	argw >= 0 && argw <= 0xfff	1376:6:42388:42413	1014979	0	True				
ANR	1015220	AndExpression	argw >= 0 && argw <= 0xfff		1014979	0		&&			
ANR	1015221	RelationalExpression	argw >= 0		1014979	0		>=			
ANR	1015222	Identifier	argw		1014979	0					
ANR	1015223	PrimaryExpression	0		1014979	1					
ANR	1015224	RelationalExpression	argw <= 0xfff		1014979	1		<=			
ANR	1015225	Identifier	argw		1014979	0					
ANR	1015226	PrimaryExpression	0xfff		1014979	1					
ANR	1015227	CompoundStatement		40:34:962:962	1014979	1					
ANR	1015228	IfStatement	if ( inp_flags & ARG_TEST )		1014979	0					
ANR	1015229	Condition	inp_flags & ARG_TEST	1377:7:42425:42444	1014979	0	True				
ANR	1015230	BitAndExpression	inp_flags & ARG_TEST		1014979	0		&			
ANR	1015231	Identifier	inp_flags		1014979	0					
ANR	1015232	Identifier	ARG_TEST		1014979	1					
ANR	1015233	ReturnStatement	return 1 ;	1378:4:42451:42459	1014979	1	True				
ANR	1015234	PrimaryExpression	1		1014979	0					
ANR	1015235	ExpressionStatement	"FAIL_IF ( push_inst ( compiler , EMIT_DATA_TRANSFER ( inp_flags , 1 , inp_flags & WRITE_BACK , reg , arg & REG_MASK , argw ) ) )"	1379:3:42464:42577	1014979	1	True				
ANR	1015236	CallExpression	"FAIL_IF ( push_inst ( compiler , EMIT_DATA_TRANSFER ( inp_flags , 1 , inp_flags & WRITE_BACK , reg , arg & REG_MASK , argw ) ) )"		1014979	0					
ANR	1015237	Callee	FAIL_IF		1014979	0					
ANR	1015238	Identifier	FAIL_IF		1014979	0					
ANR	1015239	ArgumentList	"push_inst ( compiler , EMIT_DATA_TRANSFER ( inp_flags , 1 , inp_flags & WRITE_BACK , reg , arg & REG_MASK , argw ) )"		1014979	1					
ANR	1015240	Argument	"push_inst ( compiler , EMIT_DATA_TRANSFER ( inp_flags , 1 , inp_flags & WRITE_BACK , reg , arg & REG_MASK , argw ) )"		1014979	0					
ANR	1015241	CallExpression	"push_inst ( compiler , EMIT_DATA_TRANSFER ( inp_flags , 1 , inp_flags & WRITE_BACK , reg , arg & REG_MASK , argw ) )"		1014979	0					
ANR	1015242	Callee	push_inst		1014979	0					
ANR	1015243	Identifier	push_inst		1014979	0					
ANR	1015244	ArgumentList	compiler		1014979	1					
ANR	1015245	Argument	compiler		1014979	0					
ANR	1015246	Identifier	compiler		1014979	0					
ANR	1015247	Argument	"EMIT_DATA_TRANSFER ( inp_flags , 1 , inp_flags & WRITE_BACK , reg , arg & REG_MASK , argw )"		1014979	1					
ANR	1015248	CallExpression	"EMIT_DATA_TRANSFER ( inp_flags , 1 , inp_flags & WRITE_BACK , reg , arg & REG_MASK , argw )"		1014979	0					
ANR	1015249	Callee	EMIT_DATA_TRANSFER		1014979	0					
ANR	1015250	Identifier	EMIT_DATA_TRANSFER		1014979	0					
ANR	1015251	ArgumentList	inp_flags		1014979	1					
ANR	1015252	Argument	inp_flags		1014979	0					
ANR	1015253	Identifier	inp_flags		1014979	0					
ANR	1015254	Argument	1		1014979	1					
ANR	1015255	PrimaryExpression	1		1014979	0					
ANR	1015256	Argument	inp_flags & WRITE_BACK		1014979	2					
ANR	1015257	BitAndExpression	inp_flags & WRITE_BACK		1014979	0		&			
ANR	1015258	Identifier	inp_flags		1014979	0					
ANR	1015259	Identifier	WRITE_BACK		1014979	1					
ANR	1015260	Argument	reg		1014979	3					
ANR	1015261	Identifier	reg		1014979	0					
ANR	1015262	Argument	arg & REG_MASK		1014979	4					
ANR	1015263	BitAndExpression	arg & REG_MASK		1014979	0		&			
ANR	1015264	Identifier	arg		1014979	0					
ANR	1015265	Identifier	REG_MASK		1014979	1					
ANR	1015266	Argument	argw		1014979	5					
ANR	1015267	Identifier	argw		1014979	0					
ANR	1015268	ReturnStatement	return - 1 ;	1380:3:42582:42591	1014979	2	True				
ANR	1015269	UnaryOperationExpression	- 1		1014979	0					
ANR	1015270	UnaryOperator	-		1014979	0					
ANR	1015271	PrimaryExpression	1		1014979	1					
ANR	1015272	IfStatement	if ( argw < 0 && argw >= - 0xfff )		1014979	1					
ANR	1015273	Condition	argw < 0 && argw >= - 0xfff	1382:6:42603:42628	1014979	0	True				
ANR	1015274	AndExpression	argw < 0 && argw >= - 0xfff		1014979	0		&&			
ANR	1015275	RelationalExpression	argw < 0		1014979	0		<			
ANR	1015276	Identifier	argw		1014979	0					
ANR	1015277	PrimaryExpression	0		1014979	1					
ANR	1015278	RelationalExpression	argw >= - 0xfff		1014979	1		>=			
ANR	1015279	Identifier	argw		1014979	0					
ANR	1015280	UnaryOperationExpression	- 0xfff		1014979	1					
ANR	1015281	UnaryOperator	-		1014979	0					
ANR	1015282	PrimaryExpression	0xfff		1014979	1					
ANR	1015283	CompoundStatement		46:34:1177:1177	1014979	1					
ANR	1015284	IfStatement	if ( inp_flags & ARG_TEST )		1014979	0					
ANR	1015285	Condition	inp_flags & ARG_TEST	1383:7:42640:42659	1014979	0	True				
ANR	1015286	BitAndExpression	inp_flags & ARG_TEST		1014979	0		&			
ANR	1015287	Identifier	inp_flags		1014979	0					
ANR	1015288	Identifier	ARG_TEST		1014979	1					
ANR	1015289	ReturnStatement	return 1 ;	1384:4:42666:42674	1014979	1	True				
ANR	1015290	PrimaryExpression	1		1014979	0					
ANR	1015291	ExpressionStatement	"FAIL_IF ( push_inst ( compiler , EMIT_DATA_TRANSFER ( inp_flags , 0 , inp_flags & WRITE_BACK , reg , arg & REG_MASK , - argw ) ) )"	1385:3:42679:42793	1014979	1	True				
ANR	1015292	CallExpression	"FAIL_IF ( push_inst ( compiler , EMIT_DATA_TRANSFER ( inp_flags , 0 , inp_flags & WRITE_BACK , reg , arg & REG_MASK , - argw ) ) )"		1014979	0					
ANR	1015293	Callee	FAIL_IF		1014979	0					
ANR	1015294	Identifier	FAIL_IF		1014979	0					
ANR	1015295	ArgumentList	"push_inst ( compiler , EMIT_DATA_TRANSFER ( inp_flags , 0 , inp_flags & WRITE_BACK , reg , arg & REG_MASK , - argw ) )"		1014979	1					
ANR	1015296	Argument	"push_inst ( compiler , EMIT_DATA_TRANSFER ( inp_flags , 0 , inp_flags & WRITE_BACK , reg , arg & REG_MASK , - argw ) )"		1014979	0					
ANR	1015297	CallExpression	"push_inst ( compiler , EMIT_DATA_TRANSFER ( inp_flags , 0 , inp_flags & WRITE_BACK , reg , arg & REG_MASK , - argw ) )"		1014979	0					
ANR	1015298	Callee	push_inst		1014979	0					
ANR	1015299	Identifier	push_inst		1014979	0					
ANR	1015300	ArgumentList	compiler		1014979	1					
ANR	1015301	Argument	compiler		1014979	0					
ANR	1015302	Identifier	compiler		1014979	0					
ANR	1015303	Argument	"EMIT_DATA_TRANSFER ( inp_flags , 0 , inp_flags & WRITE_BACK , reg , arg & REG_MASK , - argw )"		1014979	1					
ANR	1015304	CallExpression	"EMIT_DATA_TRANSFER ( inp_flags , 0 , inp_flags & WRITE_BACK , reg , arg & REG_MASK , - argw )"		1014979	0					
ANR	1015305	Callee	EMIT_DATA_TRANSFER		1014979	0					
ANR	1015306	Identifier	EMIT_DATA_TRANSFER		1014979	0					
ANR	1015307	ArgumentList	inp_flags		1014979	1					
ANR	1015308	Argument	inp_flags		1014979	0					
ANR	1015309	Identifier	inp_flags		1014979	0					
ANR	1015310	Argument	0		1014979	1					
ANR	1015311	PrimaryExpression	0		1014979	0					
ANR	1015312	Argument	inp_flags & WRITE_BACK		1014979	2					
ANR	1015313	BitAndExpression	inp_flags & WRITE_BACK		1014979	0		&			
ANR	1015314	Identifier	inp_flags		1014979	0					
ANR	1015315	Identifier	WRITE_BACK		1014979	1					
ANR	1015316	Argument	reg		1014979	3					
ANR	1015317	Identifier	reg		1014979	0					
ANR	1015318	Argument	arg & REG_MASK		1014979	4					
ANR	1015319	BitAndExpression	arg & REG_MASK		1014979	0		&			
ANR	1015320	Identifier	arg		1014979	0					
ANR	1015321	Identifier	REG_MASK		1014979	1					
ANR	1015322	Argument	- argw		1014979	5					
ANR	1015323	UnaryOperationExpression	- argw		1014979	0					
ANR	1015324	UnaryOperator	-		1014979	0					
ANR	1015325	Identifier	argw		1014979	1					
ANR	1015326	ReturnStatement	return - 1 ;	1386:3:42798:42807	1014979	2	True				
ANR	1015327	UnaryOperationExpression	- 1		1014979	0					
ANR	1015328	UnaryOperator	-		1014979	0					
ANR	1015329	PrimaryExpression	1		1014979	1					
ANR	1015330	ElseStatement	else		1014979	0					
ANR	1015331	CompoundStatement		53:6:1368:1368	1014979	0					
ANR	1015332	IfStatement	if ( argw >= 0 && argw <= 0xff )		1014979	0					
ANR	1015333	Condition	argw >= 0 && argw <= 0xff	1390:6:42830:42854	1014979	0	True				
ANR	1015334	AndExpression	argw >= 0 && argw <= 0xff		1014979	0		&&			
ANR	1015335	RelationalExpression	argw >= 0		1014979	0		>=			
ANR	1015336	Identifier	argw		1014979	0					
ANR	1015337	PrimaryExpression	0		1014979	1					
ANR	1015338	RelationalExpression	argw <= 0xff		1014979	1		<=			
ANR	1015339	Identifier	argw		1014979	0					
ANR	1015340	PrimaryExpression	0xff		1014979	1					
ANR	1015341	CompoundStatement		54:33:1403:1403	1014979	1					
ANR	1015342	IfStatement	if ( inp_flags & ARG_TEST )		1014979	0					
ANR	1015343	Condition	inp_flags & ARG_TEST	1391:7:42866:42885	1014979	0	True				
ANR	1015344	BitAndExpression	inp_flags & ARG_TEST		1014979	0		&			
ANR	1015345	Identifier	inp_flags		1014979	0					
ANR	1015346	Identifier	ARG_TEST		1014979	1					
ANR	1015347	ReturnStatement	return 1 ;	1392:4:42892:42900	1014979	1	True				
ANR	1015348	PrimaryExpression	1		1014979	0					
ANR	1015349	ExpressionStatement	"FAIL_IF ( push_inst ( compiler , EMIT_DATA_TRANSFER ( inp_flags , 1 , inp_flags & WRITE_BACK , reg , arg & REG_MASK , TYPE2_TRANSFER_IMM ( argw ) ) ) )"	1393:3:42905:43038	1014979	1	True				
ANR	1015350	CallExpression	"FAIL_IF ( push_inst ( compiler , EMIT_DATA_TRANSFER ( inp_flags , 1 , inp_flags & WRITE_BACK , reg , arg & REG_MASK , TYPE2_TRANSFER_IMM ( argw ) ) ) )"		1014979	0					
ANR	1015351	Callee	FAIL_IF		1014979	0					
ANR	1015352	Identifier	FAIL_IF		1014979	0					
ANR	1015353	ArgumentList	"push_inst ( compiler , EMIT_DATA_TRANSFER ( inp_flags , 1 , inp_flags & WRITE_BACK , reg , arg & REG_MASK , TYPE2_TRANSFER_IMM ( argw ) ) )"		1014979	1					
ANR	1015354	Argument	"push_inst ( compiler , EMIT_DATA_TRANSFER ( inp_flags , 1 , inp_flags & WRITE_BACK , reg , arg & REG_MASK , TYPE2_TRANSFER_IMM ( argw ) ) )"		1014979	0					
ANR	1015355	CallExpression	"push_inst ( compiler , EMIT_DATA_TRANSFER ( inp_flags , 1 , inp_flags & WRITE_BACK , reg , arg & REG_MASK , TYPE2_TRANSFER_IMM ( argw ) ) )"		1014979	0					
ANR	1015356	Callee	push_inst		1014979	0					
ANR	1015357	Identifier	push_inst		1014979	0					
ANR	1015358	ArgumentList	compiler		1014979	1					
ANR	1015359	Argument	compiler		1014979	0					
ANR	1015360	Identifier	compiler		1014979	0					
ANR	1015361	Argument	"EMIT_DATA_TRANSFER ( inp_flags , 1 , inp_flags & WRITE_BACK , reg , arg & REG_MASK , TYPE2_TRANSFER_IMM ( argw ) )"		1014979	1					
ANR	1015362	CallExpression	"EMIT_DATA_TRANSFER ( inp_flags , 1 , inp_flags & WRITE_BACK , reg , arg & REG_MASK , TYPE2_TRANSFER_IMM ( argw ) )"		1014979	0					
ANR	1015363	Callee	EMIT_DATA_TRANSFER		1014979	0					
ANR	1015364	Identifier	EMIT_DATA_TRANSFER		1014979	0					
ANR	1015365	ArgumentList	inp_flags		1014979	1					
ANR	1015366	Argument	inp_flags		1014979	0					
ANR	1015367	Identifier	inp_flags		1014979	0					
ANR	1015368	Argument	1		1014979	1					
ANR	1015369	PrimaryExpression	1		1014979	0					
ANR	1015370	Argument	inp_flags & WRITE_BACK		1014979	2					
ANR	1015371	BitAndExpression	inp_flags & WRITE_BACK		1014979	0		&			
ANR	1015372	Identifier	inp_flags		1014979	0					
ANR	1015373	Identifier	WRITE_BACK		1014979	1					
ANR	1015374	Argument	reg		1014979	3					
ANR	1015375	Identifier	reg		1014979	0					
ANR	1015376	Argument	arg & REG_MASK		1014979	4					
ANR	1015377	BitAndExpression	arg & REG_MASK		1014979	0		&			
ANR	1015378	Identifier	arg		1014979	0					
ANR	1015379	Identifier	REG_MASK		1014979	1					
ANR	1015380	Argument	TYPE2_TRANSFER_IMM ( argw )		1014979	5					
ANR	1015381	CallExpression	TYPE2_TRANSFER_IMM ( argw )		1014979	0					
ANR	1015382	Callee	TYPE2_TRANSFER_IMM		1014979	0					
ANR	1015383	Identifier	TYPE2_TRANSFER_IMM		1014979	0					
ANR	1015384	ArgumentList	argw		1014979	1					
ANR	1015385	Argument	argw		1014979	0					
ANR	1015386	Identifier	argw		1014979	0					
ANR	1015387	ReturnStatement	return - 1 ;	1394:3:43043:43052	1014979	2	True				
ANR	1015388	UnaryOperationExpression	- 1		1014979	0					
ANR	1015389	UnaryOperator	-		1014979	0					
ANR	1015390	PrimaryExpression	1		1014979	1					
ANR	1015391	IfStatement	if ( argw < 0 && argw >= - 0xff )		1014979	1					
ANR	1015392	Condition	argw < 0 && argw >= - 0xff	1396:6:43064:43088	1014979	0	True				
ANR	1015393	AndExpression	argw < 0 && argw >= - 0xff		1014979	0		&&			
ANR	1015394	RelationalExpression	argw < 0		1014979	0		<			
ANR	1015395	Identifier	argw		1014979	0					
ANR	1015396	PrimaryExpression	0		1014979	1					
ANR	1015397	RelationalExpression	argw >= - 0xff		1014979	1		>=			
ANR	1015398	Identifier	argw		1014979	0					
ANR	1015399	UnaryOperationExpression	- 0xff		1014979	1					
ANR	1015400	UnaryOperator	-		1014979	0					
ANR	1015401	PrimaryExpression	0xff		1014979	1					
ANR	1015402	CompoundStatement		60:33:1637:1637	1014979	1					
ANR	1015403	IfStatement	if ( inp_flags & ARG_TEST )		1014979	0					
ANR	1015404	Condition	inp_flags & ARG_TEST	1397:7:43100:43119	1014979	0	True				
ANR	1015405	BitAndExpression	inp_flags & ARG_TEST		1014979	0		&			
ANR	1015406	Identifier	inp_flags		1014979	0					
ANR	1015407	Identifier	ARG_TEST		1014979	1					
ANR	1015408	ReturnStatement	return 1 ;	1398:4:43126:43134	1014979	1	True				
ANR	1015409	PrimaryExpression	1		1014979	0					
ANR	1015410	ExpressionStatement	argw = - argw	1399:3:43139:43151	1014979	1	True				
ANR	1015411	AssignmentExpression	argw = - argw		1014979	0		=			
ANR	1015412	Identifier	argw		1014979	0					
ANR	1015413	UnaryOperationExpression	- argw		1014979	1					
ANR	1015414	UnaryOperator	-		1014979	0					
ANR	1015415	Identifier	argw		1014979	1					
ANR	1015416	ExpressionStatement	"FAIL_IF ( push_inst ( compiler , EMIT_DATA_TRANSFER ( inp_flags , 0 , inp_flags & WRITE_BACK , reg , arg & REG_MASK , TYPE2_TRANSFER_IMM ( argw ) ) ) )"	1400:3:43156:43289	1014979	2	True				
ANR	1015417	CallExpression	"FAIL_IF ( push_inst ( compiler , EMIT_DATA_TRANSFER ( inp_flags , 0 , inp_flags & WRITE_BACK , reg , arg & REG_MASK , TYPE2_TRANSFER_IMM ( argw ) ) ) )"		1014979	0					
ANR	1015418	Callee	FAIL_IF		1014979	0					
ANR	1015419	Identifier	FAIL_IF		1014979	0					
ANR	1015420	ArgumentList	"push_inst ( compiler , EMIT_DATA_TRANSFER ( inp_flags , 0 , inp_flags & WRITE_BACK , reg , arg & REG_MASK , TYPE2_TRANSFER_IMM ( argw ) ) )"		1014979	1					
ANR	1015421	Argument	"push_inst ( compiler , EMIT_DATA_TRANSFER ( inp_flags , 0 , inp_flags & WRITE_BACK , reg , arg & REG_MASK , TYPE2_TRANSFER_IMM ( argw ) ) )"		1014979	0					
ANR	1015422	CallExpression	"push_inst ( compiler , EMIT_DATA_TRANSFER ( inp_flags , 0 , inp_flags & WRITE_BACK , reg , arg & REG_MASK , TYPE2_TRANSFER_IMM ( argw ) ) )"		1014979	0					
ANR	1015423	Callee	push_inst		1014979	0					
ANR	1015424	Identifier	push_inst		1014979	0					
ANR	1015425	ArgumentList	compiler		1014979	1					
ANR	1015426	Argument	compiler		1014979	0					
ANR	1015427	Identifier	compiler		1014979	0					
ANR	1015428	Argument	"EMIT_DATA_TRANSFER ( inp_flags , 0 , inp_flags & WRITE_BACK , reg , arg & REG_MASK , TYPE2_TRANSFER_IMM ( argw ) )"		1014979	1					
ANR	1015429	CallExpression	"EMIT_DATA_TRANSFER ( inp_flags , 0 , inp_flags & WRITE_BACK , reg , arg & REG_MASK , TYPE2_TRANSFER_IMM ( argw ) )"		1014979	0					
ANR	1015430	Callee	EMIT_DATA_TRANSFER		1014979	0					
ANR	1015431	Identifier	EMIT_DATA_TRANSFER		1014979	0					
ANR	1015432	ArgumentList	inp_flags		1014979	1					
ANR	1015433	Argument	inp_flags		1014979	0					
ANR	1015434	Identifier	inp_flags		1014979	0					
ANR	1015435	Argument	0		1014979	1					
ANR	1015436	PrimaryExpression	0		1014979	0					
ANR	1015437	Argument	inp_flags & WRITE_BACK		1014979	2					
ANR	1015438	BitAndExpression	inp_flags & WRITE_BACK		1014979	0		&			
ANR	1015439	Identifier	inp_flags		1014979	0					
ANR	1015440	Identifier	WRITE_BACK		1014979	1					
ANR	1015441	Argument	reg		1014979	3					
ANR	1015442	Identifier	reg		1014979	0					
ANR	1015443	Argument	arg & REG_MASK		1014979	4					
ANR	1015444	BitAndExpression	arg & REG_MASK		1014979	0		&			
ANR	1015445	Identifier	arg		1014979	0					
ANR	1015446	Identifier	REG_MASK		1014979	1					
ANR	1015447	Argument	TYPE2_TRANSFER_IMM ( argw )		1014979	5					
ANR	1015448	CallExpression	TYPE2_TRANSFER_IMM ( argw )		1014979	0					
ANR	1015449	Callee	TYPE2_TRANSFER_IMM		1014979	0					
ANR	1015450	Identifier	TYPE2_TRANSFER_IMM		1014979	0					
ANR	1015451	ArgumentList	argw		1014979	1					
ANR	1015452	Argument	argw		1014979	0					
ANR	1015453	Identifier	argw		1014979	0					
ANR	1015454	ReturnStatement	return - 1 ;	1401:3:43294:43303	1014979	3	True				
ANR	1015455	UnaryOperationExpression	- 1		1014979	0					
ANR	1015456	UnaryOperator	-		1014979	0					
ANR	1015457	PrimaryExpression	1		1014979	1					
ANR	1015458	ReturnStatement	return 0 ;	1405:1:43314:43322	1014979	6	True				
ANR	1015459	PrimaryExpression	0		1014979	0					
ANR	1015460	ReturnType	static sljit_si		1014979	1					
ANR	1015461	Identifier	getput_arg_fast		1014979	2					
ANR	1015462	ParameterList	"struct sljit_compiler * compiler , sljit_si inp_flags , sljit_si reg , sljit_si arg , sljit_sw argw"		1014979	3					
ANR	1015463	Parameter	struct sljit_compiler * compiler	1336:32:41357:41387	1014979	0	True				
ANR	1015464	ParameterType	struct sljit_compiler *		1014979	0					
ANR	1015465	Identifier	compiler		1014979	1					
ANR	1015466	Parameter	sljit_si inp_flags	1336:65:41390:41407	1014979	1	True				
ANR	1015467	ParameterType	sljit_si		1014979	0					
ANR	1015468	Identifier	inp_flags		1014979	1					
ANR	1015469	Parameter	sljit_si reg	1336:85:41410:41421	1014979	2	True				
ANR	1015470	ParameterType	sljit_si		1014979	0					
ANR	1015471	Identifier	reg		1014979	1					
ANR	1015472	Parameter	sljit_si arg	1336:99:41424:41435	1014979	3	True				
ANR	1015473	ParameterType	sljit_si		1014979	0					
ANR	1015474	Identifier	arg		1014979	1					
ANR	1015475	Parameter	sljit_sw argw	1336:113:41438:41450	1014979	4	True				
ANR	1015476	ParameterType	sljit_sw		1014979	0					
ANR	1015477	Identifier	argw		1014979	1					
ANR	1015478	CFGEntryNode	ENTRY		1014979		True				
ANR	1015479	CFGExitNode	EXIT		1014979		True				
ANR	1015480	Symbol	~argw		1014979						
ANR	1015481	Symbol	MVN_DP		1014979						
ANR	1015482	Symbol	SLJIT_MEM		1014979						
ANR	1015483	Symbol	imm		1014979						
ANR	1015484	Symbol	inp_flags		1014979						
ANR	1015485	Symbol	argw		1014979						
ANR	1015486	Symbol	ARG_TEST		1014979						
ANR	1015487	Symbol	MOV_DP		1014979						
ANR	1015488	Symbol	SLJIT_IMM		1014979						
ANR	1015489	Symbol	reg		1014979						
ANR	1015490	Symbol	arg		1014979						
ANR	1015491	Symbol	SRC2_IMM		1014979						
ANR	1015492	Symbol	compiler		1014979						
ANR	1015493	Symbol	WRITE_BACK		1014979						
ANR	1015494	Symbol	push_inst		1014979						
ANR	1015495	Symbol	REG_MASK		1014979						
ANR	1015496	Symbol	OFFS_REG_MASK		1014979						
ANR	1015497	Symbol	get_imm		1014979						
ANR	1015498	Symbol	SLJIT_UNUSED		1014979						
ANR	1015499	Symbol	TYPE2_TRANSFER_IMM		1014979						
ANR	1015500	Symbol	RM		1014979						
ANR	1015501	Symbol	OFFS_REG		1014979						
ANR	1015502	Symbol	IS_TYPE1_TRANSFER		1014979						
ANR	1015503	Symbol	EMIT_DATA_PROCESS_INS		1014979						
ANR	1015504	Symbol	EMIT_DATA_TRANSFER		1014979						
ANR	1015505	Function	can_cache	1411:0:43477:44249							
ANR	1015506	FunctionDef	"can_cache (sljit_si arg , sljit_sw argw , sljit_si next_arg , sljit_sw next_argw)"		1015505	0					
ANR	1015507	CompoundStatement		1412:0:43571:44249	1015505	0					
ANR	1015508	IfStatement	if ( arg & SLJIT_IMM )		1015505	0					
ANR	1015509	Condition	arg & SLJIT_IMM	1414:5:43671:43685	1015505	0	True				
ANR	1015510	BitAndExpression	arg & SLJIT_IMM		1015505	0		&			
ANR	1015511	Identifier	arg		1015505	0					
ANR	1015512	Identifier	SLJIT_IMM		1015505	1					
ANR	1015513	ReturnStatement	return 0 ;	1415:2:43690:43698	1015505	1	True				
ANR	1015514	PrimaryExpression	0		1015505	0					
ANR	1015515	IfStatement	if ( arg & OFFS_REG_MASK )		1015505	1					
ANR	1015516	Condition	arg & OFFS_REG_MASK	1418:5:43740:43758	1015505	0	True				
ANR	1015517	BitAndExpression	arg & OFFS_REG_MASK		1015505	0		&			
ANR	1015518	Identifier	arg		1015505	0					
ANR	1015519	Identifier	OFFS_REG_MASK		1015505	1					
ANR	1015520	ReturnStatement	return 0 ;	1419:2:43763:43771	1015505	1	True				
ANR	1015521	PrimaryExpression	0		1015505	0					
ANR	1015522	IfStatement	if ( ! ( arg & REG_MASK ) )		1015505	2					
ANR	1015523	Condition	! ( arg & REG_MASK )	1421:5:43779:43795	1015505	0	True				
ANR	1015524	UnaryOperationExpression	! ( arg & REG_MASK )		1015505	0					
ANR	1015525	UnaryOperator	!		1015505	0					
ANR	1015526	BitAndExpression	arg & REG_MASK		1015505	1		&			
ANR	1015527	Identifier	arg		1015505	0					
ANR	1015528	Identifier	REG_MASK		1015505	1					
ANR	1015529	CompoundStatement		10:24:226:226	1015505	1					
ANR	1015530	IfStatement	if ( ( next_arg & SLJIT_MEM ) && ( ( sljit_uw ) argw - ( sljit_uw ) next_argw <= 0xfff || ( sljit_uw ) next_argw - ( sljit_uw ) argw <= 0xfff ) )		1015505	0					
ANR	1015531	Condition	( next_arg & SLJIT_MEM ) && ( ( sljit_uw ) argw - ( sljit_uw ) next_argw <= 0xfff || ( sljit_uw ) next_argw - ( sljit_uw ) argw <= 0xfff )	1423:6:43832:43953	1015505	0	True				
ANR	1015532	AndExpression	( next_arg & SLJIT_MEM ) && ( ( sljit_uw ) argw - ( sljit_uw ) next_argw <= 0xfff || ( sljit_uw ) next_argw - ( sljit_uw ) argw <= 0xfff )		1015505	0		&&			
ANR	1015533	BitAndExpression	next_arg & SLJIT_MEM		1015505	0		&			
ANR	1015534	Identifier	next_arg		1015505	0					
ANR	1015535	Identifier	SLJIT_MEM		1015505	1					
ANR	1015536	OrExpression	( sljit_uw ) argw - ( sljit_uw ) next_argw <= 0xfff || ( sljit_uw ) next_argw - ( sljit_uw ) argw <= 0xfff		1015505	1		||			
ANR	1015537	RelationalExpression	( sljit_uw ) argw - ( sljit_uw ) next_argw <= 0xfff		1015505	0		<=			
ANR	1015538	AdditiveExpression	( sljit_uw ) argw - ( sljit_uw ) next_argw		1015505	0		-			
ANR	1015539	CastExpression	( sljit_uw ) argw		1015505	0					
ANR	1015540	CastTarget	sljit_uw		1015505	0					
ANR	1015541	Identifier	argw		1015505	1					
ANR	1015542	CastExpression	( sljit_uw ) next_argw		1015505	1					
ANR	1015543	CastTarget	sljit_uw		1015505	0					
ANR	1015544	Identifier	next_argw		1015505	1					
ANR	1015545	PrimaryExpression	0xfff		1015505	1					
ANR	1015546	RelationalExpression	( sljit_uw ) next_argw - ( sljit_uw ) argw <= 0xfff		1015505	1		<=			
ANR	1015547	AdditiveExpression	( sljit_uw ) next_argw - ( sljit_uw ) argw		1015505	0		-			
ANR	1015548	CastExpression	( sljit_uw ) next_argw		1015505	0					
ANR	1015549	CastTarget	sljit_uw		1015505	0					
ANR	1015550	Identifier	next_argw		1015505	1					
ANR	1015551	CastExpression	( sljit_uw ) argw		1015505	1					
ANR	1015552	CastTarget	sljit_uw		1015505	0					
ANR	1015553	Identifier	argw		1015505	1					
ANR	1015554	PrimaryExpression	0xfff		1015505	1					
ANR	1015555	ReturnStatement	return 1 ;	1424:3:43959:43967	1015505	1	True				
ANR	1015556	PrimaryExpression	1		1015505	0					
ANR	1015557	ReturnStatement	return 0 ;	1425:2:43971:43979	1015505	1	True				
ANR	1015558	PrimaryExpression	0		1015505	0					
ANR	1015559	IfStatement	if ( argw <= 0xfffff && argw >= - 0xfffff )		1015505	3					
ANR	1015560	Condition	argw <= 0xfffff && argw >= - 0xfffff	1428:5:43990:44024	1015505	0	True				
ANR	1015561	AndExpression	argw <= 0xfffff && argw >= - 0xfffff		1015505	0		&&			
ANR	1015562	RelationalExpression	argw <= 0xfffff		1015505	0		<=			
ANR	1015563	Identifier	argw		1015505	0					
ANR	1015564	PrimaryExpression	0xfffff		1015505	1					
ANR	1015565	RelationalExpression	argw >= - 0xfffff		1015505	1		>=			
ANR	1015566	Identifier	argw		1015505	0					
ANR	1015567	UnaryOperationExpression	- 0xfffff		1015505	1					
ANR	1015568	UnaryOperator	-		1015505	0					
ANR	1015569	PrimaryExpression	0xfffff		1015505	1					
ANR	1015570	ReturnStatement	return 0 ;	1429:2:44029:44037	1015505	1	True				
ANR	1015571	PrimaryExpression	0		1015505	0					
ANR	1015572	IfStatement	if ( argw == next_argw && ( next_arg & SLJIT_MEM ) )		1015505	4					
ANR	1015573	Condition	argw == next_argw && ( next_arg & SLJIT_MEM )	1431:5:44045:44087	1015505	0	True				
ANR	1015574	AndExpression	argw == next_argw && ( next_arg & SLJIT_MEM )		1015505	0		&&			
ANR	1015575	EqualityExpression	argw == next_argw		1015505	0		==			
ANR	1015576	Identifier	argw		1015505	0					
ANR	1015577	Identifier	next_argw		1015505	1					
ANR	1015578	BitAndExpression	next_arg & SLJIT_MEM		1015505	1		&			
ANR	1015579	Identifier	next_arg		1015505	0					
ANR	1015580	Identifier	SLJIT_MEM		1015505	1					
ANR	1015581	ReturnStatement	return 1 ;	1432:2:44092:44100	1015505	1	True				
ANR	1015582	PrimaryExpression	1		1015505	0					
ANR	1015583	IfStatement	if ( arg == next_arg && ( ( sljit_uw ) argw - ( sljit_uw ) next_argw <= 0xfff || ( sljit_uw ) next_argw - ( sljit_uw ) argw <= 0xfff ) )		1015505	5					
ANR	1015584	Condition	arg == next_arg && ( ( sljit_uw ) argw - ( sljit_uw ) next_argw <= 0xfff || ( sljit_uw ) next_argw - ( sljit_uw ) argw <= 0xfff )	1434:5:44108:44222	1015505	0	True				
ANR	1015585	AndExpression	arg == next_arg && ( ( sljit_uw ) argw - ( sljit_uw ) next_argw <= 0xfff || ( sljit_uw ) next_argw - ( sljit_uw ) argw <= 0xfff )		1015505	0		&&			
ANR	1015586	EqualityExpression	arg == next_arg		1015505	0		==			
ANR	1015587	Identifier	arg		1015505	0					
ANR	1015588	Identifier	next_arg		1015505	1					
ANR	1015589	OrExpression	( sljit_uw ) argw - ( sljit_uw ) next_argw <= 0xfff || ( sljit_uw ) next_argw - ( sljit_uw ) argw <= 0xfff		1015505	1		||			
ANR	1015590	RelationalExpression	( sljit_uw ) argw - ( sljit_uw ) next_argw <= 0xfff		1015505	0		<=			
ANR	1015591	AdditiveExpression	( sljit_uw ) argw - ( sljit_uw ) next_argw		1015505	0		-			
ANR	1015592	CastExpression	( sljit_uw ) argw		1015505	0					
ANR	1015593	CastTarget	sljit_uw		1015505	0					
ANR	1015594	Identifier	argw		1015505	1					
ANR	1015595	CastExpression	( sljit_uw ) next_argw		1015505	1					
ANR	1015596	CastTarget	sljit_uw		1015505	0					
ANR	1015597	Identifier	next_argw		1015505	1					
ANR	1015598	PrimaryExpression	0xfff		1015505	1					
ANR	1015599	RelationalExpression	( sljit_uw ) next_argw - ( sljit_uw ) argw <= 0xfff		1015505	1		<=			
ANR	1015600	AdditiveExpression	( sljit_uw ) next_argw - ( sljit_uw ) argw		1015505	0		-			
ANR	1015601	CastExpression	( sljit_uw ) next_argw		1015505	0					
ANR	1015602	CastTarget	sljit_uw		1015505	0					
ANR	1015603	Identifier	next_argw		1015505	1					
ANR	1015604	CastExpression	( sljit_uw ) argw		1015505	1					
ANR	1015605	CastTarget	sljit_uw		1015505	0					
ANR	1015606	Identifier	argw		1015505	1					
ANR	1015607	PrimaryExpression	0xfff		1015505	1					
ANR	1015608	ReturnStatement	return 1 ;	1435:2:44227:44235	1015505	1	True				
ANR	1015609	PrimaryExpression	1		1015505	0					
ANR	1015610	ReturnStatement	return 0 ;	1437:1:44239:44247	1015505	6	True				
ANR	1015611	PrimaryExpression	0		1015505	0					
ANR	1015612	ReturnType	static sljit_si		1015505	1					
ANR	1015613	Identifier	can_cache		1015505	2					
ANR	1015614	ParameterList	"sljit_si arg , sljit_sw argw , sljit_si next_arg , sljit_sw next_argw"		1015505	3					
ANR	1015615	Parameter	sljit_si arg	1411:26:43503:43514	1015505	0	True				
ANR	1015616	ParameterType	sljit_si		1015505	0					
ANR	1015617	Identifier	arg		1015505	1					
ANR	1015618	Parameter	sljit_sw argw	1411:40:43517:43529	1015505	1	True				
ANR	1015619	ParameterType	sljit_sw		1015505	0					
ANR	1015620	Identifier	argw		1015505	1					
ANR	1015621	Parameter	sljit_si next_arg	1411:55:43532:43548	1015505	2	True				
ANR	1015622	ParameterType	sljit_si		1015505	0					
ANR	1015623	Identifier	next_arg		1015505	1					
ANR	1015624	Parameter	sljit_sw next_argw	1411:74:43551:43568	1015505	3	True				
ANR	1015625	ParameterType	sljit_sw		1015505	0					
ANR	1015626	Identifier	next_argw		1015505	1					
ANR	1015627	CFGEntryNode	ENTRY		1015505		True				
ANR	1015628	CFGExitNode	EXIT		1015505		True				
ANR	1015629	Symbol	next_arg		1015505						
ANR	1015630	Symbol	SLJIT_IMM		1015505						
ANR	1015631	Symbol	REG_MASK		1015505						
ANR	1015632	Symbol	SLJIT_MEM		1015505						
ANR	1015633	Symbol	arg		1015505						
ANR	1015634	Symbol	OFFS_REG_MASK		1015505						
ANR	1015635	Symbol	next_argw		1015505						
ANR	1015636	Symbol	argw		1015505						
ANR	1015637	DeclStmt									
ANR	1015638	Decl							arg	arg &	REG_MASK
ANR	1015639	Function	getput_arg	1459:0:45001:49412							
ANR	1015640	FunctionDef	"getput_arg (struct sljit_compiler * compiler , sljit_si inp_flags , sljit_si reg , sljit_si arg , sljit_sw argw , sljit_si next_arg , sljit_sw next_argw)"		1015639	0					
ANR	1015641	CompoundStatement		1460:0:45163:49412	1015639	0					
ANR	1015642	IdentifierDeclStatement	sljit_si tmp_r ;	1461:1:45166:45180	1015639	0	True				
ANR	1015643	IdentifierDecl	tmp_r		1015639	0					
ANR	1015644	IdentifierDeclType	sljit_si		1015639	0					
ANR	1015645	Identifier	tmp_r		1015639	1					
ANR	1015646	IdentifierDeclStatement	sljit_sw max_delta ;	1462:1:45183:45201	1015639	1	True				
ANR	1015647	IdentifierDecl	max_delta		1015639	0					
ANR	1015648	IdentifierDeclType	sljit_sw		1015639	0					
ANR	1015649	Identifier	max_delta		1015639	1					
ANR	1015650	IdentifierDeclStatement	sljit_sw sign ;	1463:1:45204:45217	1015639	2	True				
ANR	1015651	IdentifierDecl	sign		1015639	0					
ANR	1015652	IdentifierDeclType	sljit_sw		1015639	0					
ANR	1015653	Identifier	sign		1015639	1					
ANR	1015654	IdentifierDeclStatement	sljit_uw imm ;	1464:1:45220:45232	1015639	3	True				
ANR	1015655	IdentifierDecl	imm		1015639	0					
ANR	1015656	IdentifierDeclType	sljit_uw		1015639	0					
ANR	1015657	Identifier	imm		1015639	1					
ANR	1015658	IfStatement	if ( arg & SLJIT_IMM )		1015639	4					
ANR	1015659	Condition	arg & SLJIT_IMM	1466:5:45240:45254	1015639	0	True				
ANR	1015660	BitAndExpression	arg & SLJIT_IMM		1015639	0		&			
ANR	1015661	Identifier	arg		1015639	0					
ANR	1015662	Identifier	SLJIT_IMM		1015639	1					
ANR	1015663	CompoundStatement		7:22:93:93	1015639	1					
ANR	1015664	ExpressionStatement	SLJIT_ASSERT ( inp_flags & LOAD_DATA )	1467:2:45261:45296	1015639	0	True				
ANR	1015665	CallExpression	SLJIT_ASSERT ( inp_flags & LOAD_DATA )		1015639	0					
ANR	1015666	Callee	SLJIT_ASSERT		1015639	0					
ANR	1015667	Identifier	SLJIT_ASSERT		1015639	0					
ANR	1015668	ArgumentList	inp_flags & LOAD_DATA		1015639	1					
ANR	1015669	Argument	inp_flags & LOAD_DATA		1015639	0					
ANR	1015670	BitAndExpression	inp_flags & LOAD_DATA		1015639	0		&			
ANR	1015671	Identifier	inp_flags		1015639	0					
ANR	1015672	Identifier	LOAD_DATA		1015639	1					
ANR	1015673	ReturnStatement	"return load_immediate ( compiler , reg , argw ) ;"	1468:2:45300:45342	1015639	1	True				
ANR	1015674	CallExpression	"load_immediate ( compiler , reg , argw )"		1015639	0					
ANR	1015675	Callee	load_immediate		1015639	0					
ANR	1015676	Identifier	load_immediate		1015639	0					
ANR	1015677	ArgumentList	compiler		1015639	1					
ANR	1015678	Argument	compiler		1015639	0					
ANR	1015679	Identifier	compiler		1015639	0					
ANR	1015680	Argument	reg		1015639	1					
ANR	1015681	Identifier	reg		1015639	0					
ANR	1015682	Argument	argw		1015639	2					
ANR	1015683	Identifier	argw		1015639	0					
ANR	1015684	ExpressionStatement	SLJIT_ASSERT ( arg & SLJIT_MEM )	1471:1:45349:45378	1015639	5	True				
ANR	1015685	CallExpression	SLJIT_ASSERT ( arg & SLJIT_MEM )		1015639	0					
ANR	1015686	Callee	SLJIT_ASSERT		1015639	0					
ANR	1015687	Identifier	SLJIT_ASSERT		1015639	0					
ANR	1015688	ArgumentList	arg & SLJIT_MEM		1015639	1					
ANR	1015689	Argument	arg & SLJIT_MEM		1015639	0					
ANR	1015690	BitAndExpression	arg & SLJIT_MEM		1015639	0		&			
ANR	1015691	Identifier	arg		1015639	0					
ANR	1015692	Identifier	SLJIT_MEM		1015639	1					
ANR	1015693	ExpressionStatement	tmp_r = ( inp_flags & LOAD_DATA ) ? reg : TMP_REG3	1473:1:45382:45430	1015639	6	True				
ANR	1015694	AssignmentExpression	tmp_r = ( inp_flags & LOAD_DATA ) ? reg : TMP_REG3		1015639	0		=			
ANR	1015695	Identifier	tmp_r		1015639	0					
ANR	1015696	ConditionalExpression	( inp_flags & LOAD_DATA ) ? reg : TMP_REG3		1015639	1					
ANR	1015697	Condition	inp_flags & LOAD_DATA		1015639	0					
ANR	1015698	BitAndExpression	inp_flags & LOAD_DATA		1015639	0		&			
ANR	1015699	Identifier	inp_flags		1015639	0					
ANR	1015700	Identifier	LOAD_DATA		1015639	1					
ANR	1015701	Identifier	reg		1015639	1					
ANR	1015702	Identifier	TMP_REG3		1015639	2					
ANR	1015703	ExpressionStatement	max_delta = IS_TYPE1_TRANSFER ( inp_flags ) ? 0xfff : 0xff	1474:1:45433:45488	1015639	7	True				
ANR	1015704	AssignmentExpression	max_delta = IS_TYPE1_TRANSFER ( inp_flags ) ? 0xfff : 0xff		1015639	0		=			
ANR	1015705	Identifier	max_delta		1015639	0					
ANR	1015706	ConditionalExpression	IS_TYPE1_TRANSFER ( inp_flags ) ? 0xfff : 0xff		1015639	1					
ANR	1015707	Condition	IS_TYPE1_TRANSFER ( inp_flags )		1015639	0					
ANR	1015708	CallExpression	IS_TYPE1_TRANSFER ( inp_flags )		1015639	0					
ANR	1015709	Callee	IS_TYPE1_TRANSFER		1015639	0					
ANR	1015710	Identifier	IS_TYPE1_TRANSFER		1015639	0					
ANR	1015711	ArgumentList	inp_flags		1015639	1					
ANR	1015712	Argument	inp_flags		1015639	0					
ANR	1015713	Identifier	inp_flags		1015639	0					
ANR	1015714	PrimaryExpression	0xfff		1015639	1					
ANR	1015715	PrimaryExpression	0xff		1015639	2					
ANR	1015716	IfStatement	if ( ( arg & REG_MASK ) == SLJIT_UNUSED )		1015639	8					
ANR	1015717	Condition	( arg & REG_MASK ) == SLJIT_UNUSED	1476:5:45496:45527	1015639	0	True				
ANR	1015718	EqualityExpression	( arg & REG_MASK ) == SLJIT_UNUSED		1015639	0		==			
ANR	1015719	BitAndExpression	arg & REG_MASK		1015639	0		&			
ANR	1015720	Identifier	arg		1015639	0					
ANR	1015721	Identifier	REG_MASK		1015639	1					
ANR	1015722	Identifier	SLJIT_UNUSED		1015639	1					
ANR	1015723	CompoundStatement		17:39:366:366	1015639	1					
ANR	1015724	ExpressionStatement	imm = ( sljit_uw ) ( argw - compiler -> cache_argw )	1478:2:45566:45611	1015639	0	True				
ANR	1015725	AssignmentExpression	imm = ( sljit_uw ) ( argw - compiler -> cache_argw )		1015639	0		=			
ANR	1015726	Identifier	imm		1015639	0					
ANR	1015727	CastExpression	( sljit_uw ) ( argw - compiler -> cache_argw )		1015639	1					
ANR	1015728	CastTarget	sljit_uw		1015639	0					
ANR	1015729	AdditiveExpression	argw - compiler -> cache_argw		1015639	1		-			
ANR	1015730	Identifier	argw		1015639	0					
ANR	1015731	PtrMemberAccess	compiler -> cache_argw		1015639	1					
ANR	1015732	Identifier	compiler		1015639	0					
ANR	1015733	Identifier	cache_argw		1015639	1					
ANR	1015734	IfStatement	if ( ( compiler -> cache_arg & SLJIT_IMM ) && ( imm <= ( sljit_uw ) max_delta || imm >= ( sljit_uw ) - max_delta ) )		1015639	1					
ANR	1015735	Condition	( compiler -> cache_arg & SLJIT_IMM ) && ( imm <= ( sljit_uw ) max_delta || imm >= ( sljit_uw ) - max_delta )	1479:6:45619:45714	1015639	0	True				
ANR	1015736	AndExpression	( compiler -> cache_arg & SLJIT_IMM ) && ( imm <= ( sljit_uw ) max_delta || imm >= ( sljit_uw ) - max_delta )		1015639	0		&&			
ANR	1015737	BitAndExpression	compiler -> cache_arg & SLJIT_IMM		1015639	0		&			
ANR	1015738	PtrMemberAccess	compiler -> cache_arg		1015639	0					
ANR	1015739	Identifier	compiler		1015639	0					
ANR	1015740	Identifier	cache_arg		1015639	1					
ANR	1015741	Identifier	SLJIT_IMM		1015639	1					
ANR	1015742	OrExpression	imm <= ( sljit_uw ) max_delta || imm >= ( sljit_uw ) - max_delta		1015639	1		||			
ANR	1015743	RelationalExpression	imm <= ( sljit_uw ) max_delta		1015639	0		<=			
ANR	1015744	Identifier	imm		1015639	0					
ANR	1015745	CastExpression	( sljit_uw ) max_delta		1015639	1					
ANR	1015746	CastTarget	sljit_uw		1015639	0					
ANR	1015747	Identifier	max_delta		1015639	1					
ANR	1015748	RelationalExpression	imm >= ( sljit_uw ) - max_delta		1015639	1		>=			
ANR	1015749	Identifier	imm		1015639	0					
ANR	1015750	CastExpression	( sljit_uw ) - max_delta		1015639	1					
ANR	1015751	CastTarget	sljit_uw		1015639	0					
ANR	1015752	UnaryOperationExpression	- max_delta		1015639	1					
ANR	1015753	UnaryOperator	-		1015639	0					
ANR	1015754	Identifier	max_delta		1015639	1					
ANR	1015755	CompoundStatement		20:104:553:553	1015639	1					
ANR	1015756	IfStatement	if ( imm <= ( sljit_uw ) max_delta )		1015639	0					
ANR	1015757	Condition	imm <= ( sljit_uw ) max_delta	1480:7:45726:45751	1015639	0	True				
ANR	1015758	RelationalExpression	imm <= ( sljit_uw ) max_delta		1015639	0		<=			
ANR	1015759	Identifier	imm		1015639	0					
ANR	1015760	CastExpression	( sljit_uw ) max_delta		1015639	1					
ANR	1015761	CastTarget	sljit_uw		1015639	0					
ANR	1015762	Identifier	max_delta		1015639	1					
ANR	1015763	CompoundStatement		21:35:590:590	1015639	1					
ANR	1015764	ExpressionStatement	sign = 1	1481:4:45760:45768	1015639	0	True				
ANR	1015765	AssignmentExpression	sign = 1		1015639	0		=			
ANR	1015766	Identifier	sign		1015639	0					
ANR	1015767	PrimaryExpression	1		1015639	1					
ANR	1015768	ExpressionStatement	argw = argw - compiler -> cache_argw	1482:4:45774:45808	1015639	1	True				
ANR	1015769	AssignmentExpression	argw = argw - compiler -> cache_argw		1015639	0		=			
ANR	1015770	Identifier	argw		1015639	0					
ANR	1015771	AdditiveExpression	argw - compiler -> cache_argw		1015639	1		-			
ANR	1015772	Identifier	argw		1015639	0					
ANR	1015773	PtrMemberAccess	compiler -> cache_argw		1015639	1					
ANR	1015774	Identifier	compiler		1015639	0					
ANR	1015775	Identifier	cache_argw		1015639	1					
ANR	1015776	ElseStatement	else		1015639	0					
ANR	1015777	CompoundStatement		25:8:659:659	1015639	0					
ANR	1015778	ExpressionStatement	sign = 0	1485:4:45829:45837	1015639	0	True				
ANR	1015779	AssignmentExpression	sign = 0		1015639	0		=			
ANR	1015780	Identifier	sign		1015639	0					
ANR	1015781	PrimaryExpression	0		1015639	1					
ANR	1015782	ExpressionStatement	argw = compiler -> cache_argw - argw	1486:4:45843:45877	1015639	1	True				
ANR	1015783	AssignmentExpression	argw = compiler -> cache_argw - argw		1015639	0		=			
ANR	1015784	Identifier	argw		1015639	0					
ANR	1015785	AdditiveExpression	compiler -> cache_argw - argw		1015639	1		-			
ANR	1015786	PtrMemberAccess	compiler -> cache_argw		1015639	0					
ANR	1015787	Identifier	compiler		1015639	0					
ANR	1015788	Identifier	cache_argw		1015639	1					
ANR	1015789	Identifier	argw		1015639	1					
ANR	1015790	ExpressionStatement	"GETPUT_ARG_DATA_TRANSFER ( sign , 0 , reg , TMP_REG3 , argw )"	1489:3:45888:45942	1015639	1	True				
ANR	1015791	CallExpression	"GETPUT_ARG_DATA_TRANSFER ( sign , 0 , reg , TMP_REG3 , argw )"		1015639	0					
ANR	1015792	Callee	GETPUT_ARG_DATA_TRANSFER		1015639	0					
ANR	1015793	Identifier	GETPUT_ARG_DATA_TRANSFER		1015639	0					
ANR	1015794	ArgumentList	sign		1015639	1					
ANR	1015795	Argument	sign		1015639	0					
ANR	1015796	Identifier	sign		1015639	0					
ANR	1015797	Argument	0		1015639	1					
ANR	1015798	PrimaryExpression	0		1015639	0					
ANR	1015799	Argument	reg		1015639	2					
ANR	1015800	Identifier	reg		1015639	0					
ANR	1015801	Argument	TMP_REG3		1015639	3					
ANR	1015802	Identifier	TMP_REG3		1015639	0					
ANR	1015803	Argument	argw		1015639	4					
ANR	1015804	Identifier	argw		1015639	0					
ANR	1015805	ReturnStatement	return SLJIT_SUCCESS ;	1490:3:45947:45967	1015639	2	True				
ANR	1015806	Identifier	SLJIT_SUCCESS		1015639	0					
ANR	1015807	ExpressionStatement	imm = ( sljit_uw ) ( argw - next_argw )	1495:2:46127:46161	1015639	2	True				
ANR	1015808	AssignmentExpression	imm = ( sljit_uw ) ( argw - next_argw )		1015639	0		=			
ANR	1015809	Identifier	imm		1015639	0					
ANR	1015810	CastExpression	( sljit_uw ) ( argw - next_argw )		1015639	1					
ANR	1015811	CastTarget	sljit_uw		1015639	0					
ANR	1015812	AdditiveExpression	argw - next_argw		1015639	1		-			
ANR	1015813	Identifier	argw		1015639	0					
ANR	1015814	Identifier	next_argw		1015639	1					
ANR	1015815	IfStatement	if ( ( next_arg & SLJIT_MEM ) && ( imm <= ( sljit_uw ) max_delta || imm >= ( sljit_uw ) - max_delta ) )		1015639	3					
ANR	1015816	Condition	( next_arg & SLJIT_MEM ) && ( imm <= ( sljit_uw ) max_delta || imm >= ( sljit_uw ) - max_delta )	1496:6:46169:46253	1015639	0	True				
ANR	1015817	AndExpression	( next_arg & SLJIT_MEM ) && ( imm <= ( sljit_uw ) max_delta || imm >= ( sljit_uw ) - max_delta )		1015639	0		&&			
ANR	1015818	BitAndExpression	next_arg & SLJIT_MEM		1015639	0		&			
ANR	1015819	Identifier	next_arg		1015639	0					
ANR	1015820	Identifier	SLJIT_MEM		1015639	1					
ANR	1015821	OrExpression	imm <= ( sljit_uw ) max_delta || imm >= ( sljit_uw ) - max_delta		1015639	1		||			
ANR	1015822	RelationalExpression	imm <= ( sljit_uw ) max_delta		1015639	0		<=			
ANR	1015823	Identifier	imm		1015639	0					
ANR	1015824	CastExpression	( sljit_uw ) max_delta		1015639	1					
ANR	1015825	CastTarget	sljit_uw		1015639	0					
ANR	1015826	Identifier	max_delta		1015639	1					
ANR	1015827	RelationalExpression	imm >= ( sljit_uw ) - max_delta		1015639	1		>=			
ANR	1015828	Identifier	imm		1015639	0					
ANR	1015829	CastExpression	( sljit_uw ) - max_delta		1015639	1					
ANR	1015830	CastTarget	sljit_uw		1015639	0					
ANR	1015831	UnaryOperationExpression	- max_delta		1015639	1					
ANR	1015832	UnaryOperator	-		1015639	0					
ANR	1015833	Identifier	max_delta		1015639	1					
ANR	1015834	CompoundStatement		37:93:1092:1092	1015639	1					
ANR	1015835	ExpressionStatement	SLJIT_ASSERT ( inp_flags & LOAD_DATA )	1497:3:46261:46296	1015639	0	True				
ANR	1015836	CallExpression	SLJIT_ASSERT ( inp_flags & LOAD_DATA )		1015639	0					
ANR	1015837	Callee	SLJIT_ASSERT		1015639	0					
ANR	1015838	Identifier	SLJIT_ASSERT		1015639	0					
ANR	1015839	ArgumentList	inp_flags & LOAD_DATA		1015639	1					
ANR	1015840	Argument	inp_flags & LOAD_DATA		1015639	0					
ANR	1015841	BitAndExpression	inp_flags & LOAD_DATA		1015639	0		&			
ANR	1015842	Identifier	inp_flags		1015639	0					
ANR	1015843	Identifier	LOAD_DATA		1015639	1					
ANR	1015844	ExpressionStatement	compiler -> cache_arg = SLJIT_IMM	1499:3:46302:46333	1015639	1	True				
ANR	1015845	AssignmentExpression	compiler -> cache_arg = SLJIT_IMM		1015639	0		=			
ANR	1015846	PtrMemberAccess	compiler -> cache_arg		1015639	0					
ANR	1015847	Identifier	compiler		1015639	0					
ANR	1015848	Identifier	cache_arg		1015639	1					
ANR	1015849	Identifier	SLJIT_IMM		1015639	1					
ANR	1015850	ExpressionStatement	compiler -> cache_argw = argw	1500:3:46338:46365	1015639	2	True				
ANR	1015851	AssignmentExpression	compiler -> cache_argw = argw		1015639	0		=			
ANR	1015852	PtrMemberAccess	compiler -> cache_argw		1015639	0					
ANR	1015853	Identifier	compiler		1015639	0					
ANR	1015854	Identifier	cache_argw		1015639	1					
ANR	1015855	Identifier	argw		1015639	1					
ANR	1015856	ExpressionStatement	tmp_r = TMP_REG3	1501:3:46370:46386	1015639	3	True				
ANR	1015857	AssignmentExpression	tmp_r = TMP_REG3		1015639	0		=			
ANR	1015858	Identifier	tmp_r		1015639	0					
ANR	1015859	Identifier	TMP_REG3		1015639	1					
ANR	1015860	ExpressionStatement	"FAIL_IF ( load_immediate ( compiler , tmp_r , argw ) )"	1504:2:46395:46441	1015639	4	True				
ANR	1015861	CallExpression	"FAIL_IF ( load_immediate ( compiler , tmp_r , argw ) )"		1015639	0					
ANR	1015862	Callee	FAIL_IF		1015639	0					
ANR	1015863	Identifier	FAIL_IF		1015639	0					
ANR	1015864	ArgumentList	"load_immediate ( compiler , tmp_r , argw )"		1015639	1					
ANR	1015865	Argument	"load_immediate ( compiler , tmp_r , argw )"		1015639	0					
ANR	1015866	CallExpression	"load_immediate ( compiler , tmp_r , argw )"		1015639	0					
ANR	1015867	Callee	load_immediate		1015639	0					
ANR	1015868	Identifier	load_immediate		1015639	0					
ANR	1015869	ArgumentList	compiler		1015639	1					
ANR	1015870	Argument	compiler		1015639	0					
ANR	1015871	Identifier	compiler		1015639	0					
ANR	1015872	Argument	tmp_r		1015639	1					
ANR	1015873	Identifier	tmp_r		1015639	0					
ANR	1015874	Argument	argw		1015639	2					
ANR	1015875	Identifier	argw		1015639	0					
ANR	1015876	ExpressionStatement	"GETPUT_ARG_DATA_TRANSFER ( 1 , 0 , reg , tmp_r , 0 )"	1505:2:46445:46490	1015639	5	True				
ANR	1015877	CallExpression	"GETPUT_ARG_DATA_TRANSFER ( 1 , 0 , reg , tmp_r , 0 )"		1015639	0					
ANR	1015878	Callee	GETPUT_ARG_DATA_TRANSFER		1015639	0					
ANR	1015879	Identifier	GETPUT_ARG_DATA_TRANSFER		1015639	0					
ANR	1015880	ArgumentList	1		1015639	1					
ANR	1015881	Argument	1		1015639	0					
ANR	1015882	PrimaryExpression	1		1015639	0					
ANR	1015883	Argument	0		1015639	1					
ANR	1015884	PrimaryExpression	0		1015639	0					
ANR	1015885	Argument	reg		1015639	2					
ANR	1015886	Identifier	reg		1015639	0					
ANR	1015887	Argument	tmp_r		1015639	3					
ANR	1015888	Identifier	tmp_r		1015639	0					
ANR	1015889	Argument	0		1015639	4					
ANR	1015890	PrimaryExpression	0		1015639	0					
ANR	1015891	ReturnStatement	return SLJIT_SUCCESS ;	1506:2:46494:46514	1015639	6	True				
ANR	1015892	Identifier	SLJIT_SUCCESS		1015639	0					
ANR	1015893	IfStatement	if ( arg & OFFS_REG_MASK )		1015639	9					
ANR	1015894	Condition	arg & OFFS_REG_MASK	1509:5:46525:46543	1015639	0	True				
ANR	1015895	BitAndExpression	arg & OFFS_REG_MASK		1015639	0		&			
ANR	1015896	Identifier	arg		1015639	0					
ANR	1015897	Identifier	OFFS_REG_MASK		1015639	1					
ANR	1015898	CompoundStatement		50:26:1382:1382	1015639	1					
ANR	1015899	ExpressionStatement	SLJIT_ASSERT ( ( argw & 0x3 ) && ! ( max_delta & 0xf00 ) )	1510:2:46550:46600	1015639	0	True				
ANR	1015900	CallExpression	SLJIT_ASSERT ( ( argw & 0x3 ) && ! ( max_delta & 0xf00 ) )		1015639	0					
ANR	1015901	Callee	SLJIT_ASSERT		1015639	0					
ANR	1015902	Identifier	SLJIT_ASSERT		1015639	0					
ANR	1015903	ArgumentList	( argw & 0x3 ) && ! ( max_delta & 0xf00 )		1015639	1					
ANR	1015904	Argument	( argw & 0x3 ) && ! ( max_delta & 0xf00 )		1015639	0					
ANR	1015905	AndExpression	( argw & 0x3 ) && ! ( max_delta & 0xf00 )		1015639	0		&&			
ANR	1015906	BitAndExpression	argw & 0x3		1015639	0		&			
ANR	1015907	Identifier	argw		1015639	0					
ANR	1015908	PrimaryExpression	0x3		1015639	1					
ANR	1015909	UnaryOperationExpression	! ( max_delta & 0xf00 )		1015639	1					
ANR	1015910	UnaryOperator	!		1015639	0					
ANR	1015911	BitAndExpression	max_delta & 0xf00		1015639	1		&			
ANR	1015912	Identifier	max_delta		1015639	0					
ANR	1015913	PrimaryExpression	0xf00		1015639	1					
ANR	1015914	IfStatement	if ( inp_flags & WRITE_BACK )		1015639	1					
ANR	1015915	Condition	inp_flags & WRITE_BACK	1511:6:46608:46629	1015639	0	True				
ANR	1015916	BitAndExpression	inp_flags & WRITE_BACK		1015639	0		&			
ANR	1015917	Identifier	inp_flags		1015639	0					
ANR	1015918	Identifier	WRITE_BACK		1015639	1					
ANR	1015919	ExpressionStatement	tmp_r = arg & REG_MASK	1512:3:46635:46657	1015639	1	True				
ANR	1015920	AssignmentExpression	tmp_r = arg & REG_MASK		1015639	0		=			
ANR	1015921	Identifier	tmp_r		1015639	0					
ANR	1015922	BitAndExpression	arg & REG_MASK		1015639	1		&			
ANR	1015923	Identifier	arg		1015639	0					
ANR	1015924	Identifier	REG_MASK		1015639	1					
ANR	1015925	ExpressionStatement	"FAIL_IF ( push_inst ( compiler , EMIT_DATA_PROCESS_INS ( ADD_DP , 0 , tmp_r , arg & REG_MASK , RM ( OFFS_REG ( arg ) ) | ( ( argw & 0x3 ) << 7 ) ) ) )"	1513:2:46661:46787	1015639	2	True				
ANR	1015926	CallExpression	"FAIL_IF ( push_inst ( compiler , EMIT_DATA_PROCESS_INS ( ADD_DP , 0 , tmp_r , arg & REG_MASK , RM ( OFFS_REG ( arg ) ) | ( ( argw & 0x3 ) << 7 ) ) ) )"		1015639	0					
ANR	1015927	Callee	FAIL_IF		1015639	0					
ANR	1015928	Identifier	FAIL_IF		1015639	0					
ANR	1015929	ArgumentList	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( ADD_DP , 0 , tmp_r , arg & REG_MASK , RM ( OFFS_REG ( arg ) ) | ( ( argw & 0x3 ) << 7 ) ) )"		1015639	1					
ANR	1015930	Argument	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( ADD_DP , 0 , tmp_r , arg & REG_MASK , RM ( OFFS_REG ( arg ) ) | ( ( argw & 0x3 ) << 7 ) ) )"		1015639	0					
ANR	1015931	CallExpression	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( ADD_DP , 0 , tmp_r , arg & REG_MASK , RM ( OFFS_REG ( arg ) ) | ( ( argw & 0x3 ) << 7 ) ) )"		1015639	0					
ANR	1015932	Callee	push_inst		1015639	0					
ANR	1015933	Identifier	push_inst		1015639	0					
ANR	1015934	ArgumentList	compiler		1015639	1					
ANR	1015935	Argument	compiler		1015639	0					
ANR	1015936	Identifier	compiler		1015639	0					
ANR	1015937	Argument	"EMIT_DATA_PROCESS_INS ( ADD_DP , 0 , tmp_r , arg & REG_MASK , RM ( OFFS_REG ( arg ) ) | ( ( argw & 0x3 ) << 7 ) )"		1015639	1					
ANR	1015938	CallExpression	"EMIT_DATA_PROCESS_INS ( ADD_DP , 0 , tmp_r , arg & REG_MASK , RM ( OFFS_REG ( arg ) ) | ( ( argw & 0x3 ) << 7 ) )"		1015639	0					
ANR	1015939	Callee	EMIT_DATA_PROCESS_INS		1015639	0					
ANR	1015940	Identifier	EMIT_DATA_PROCESS_INS		1015639	0					
ANR	1015941	ArgumentList	ADD_DP		1015639	1					
ANR	1015942	Argument	ADD_DP		1015639	0					
ANR	1015943	Identifier	ADD_DP		1015639	0					
ANR	1015944	Argument	0		1015639	1					
ANR	1015945	PrimaryExpression	0		1015639	0					
ANR	1015946	Argument	tmp_r		1015639	2					
ANR	1015947	Identifier	tmp_r		1015639	0					
ANR	1015948	Argument	arg & REG_MASK		1015639	3					
ANR	1015949	BitAndExpression	arg & REG_MASK		1015639	0		&			
ANR	1015950	Identifier	arg		1015639	0					
ANR	1015951	Identifier	REG_MASK		1015639	1					
ANR	1015952	Argument	RM ( OFFS_REG ( arg ) ) | ( ( argw & 0x3 ) << 7 )		1015639	4					
ANR	1015953	InclusiveOrExpression	RM ( OFFS_REG ( arg ) ) | ( ( argw & 0x3 ) << 7 )		1015639	0		|			
ANR	1015954	CallExpression	RM ( OFFS_REG ( arg ) )		1015639	0					
ANR	1015955	Callee	RM		1015639	0					
ANR	1015956	Identifier	RM		1015639	0					
ANR	1015957	ArgumentList	OFFS_REG ( arg )		1015639	1					
ANR	1015958	Argument	OFFS_REG ( arg )		1015639	0					
ANR	1015959	CallExpression	OFFS_REG ( arg )		1015639	0					
ANR	1015960	Callee	OFFS_REG		1015639	0					
ANR	1015961	Identifier	OFFS_REG		1015639	0					
ANR	1015962	ArgumentList	arg		1015639	1					
ANR	1015963	Argument	arg		1015639	0					
ANR	1015964	Identifier	arg		1015639	0					
ANR	1015965	ShiftExpression	( argw & 0x3 ) << 7		1015639	1		<<			
ANR	1015966	BitAndExpression	argw & 0x3		1015639	0		&			
ANR	1015967	Identifier	argw		1015639	0					
ANR	1015968	PrimaryExpression	0x3		1015639	1					
ANR	1015969	PrimaryExpression	7		1015639	1					
ANR	1015970	ReturnStatement	"return push_inst ( compiler , EMIT_DATA_TRANSFER ( inp_flags , 1 , 0 , reg , tmp_r , TYPE2_TRANSFER_IMM ( 0 ) ) ) ;"	1514:2:46791:46889	1015639	3	True				
ANR	1015971	CallExpression	"push_inst ( compiler , EMIT_DATA_TRANSFER ( inp_flags , 1 , 0 , reg , tmp_r , TYPE2_TRANSFER_IMM ( 0 ) ) )"		1015639	0					
ANR	1015972	Callee	push_inst		1015639	0					
ANR	1015973	Identifier	push_inst		1015639	0					
ANR	1015974	ArgumentList	compiler		1015639	1					
ANR	1015975	Argument	compiler		1015639	0					
ANR	1015976	Identifier	compiler		1015639	0					
ANR	1015977	Argument	"EMIT_DATA_TRANSFER ( inp_flags , 1 , 0 , reg , tmp_r , TYPE2_TRANSFER_IMM ( 0 ) )"		1015639	1					
ANR	1015978	CallExpression	"EMIT_DATA_TRANSFER ( inp_flags , 1 , 0 , reg , tmp_r , TYPE2_TRANSFER_IMM ( 0 ) )"		1015639	0					
ANR	1015979	Callee	EMIT_DATA_TRANSFER		1015639	0					
ANR	1015980	Identifier	EMIT_DATA_TRANSFER		1015639	0					
ANR	1015981	ArgumentList	inp_flags		1015639	1					
ANR	1015982	Argument	inp_flags		1015639	0					
ANR	1015983	Identifier	inp_flags		1015639	0					
ANR	1015984	Argument	1		1015639	1					
ANR	1015985	PrimaryExpression	1		1015639	0					
ANR	1015986	Argument	0		1015639	2					
ANR	1015987	PrimaryExpression	0		1015639	0					
ANR	1015988	Argument	reg		1015639	3					
ANR	1015989	Identifier	reg		1015639	0					
ANR	1015990	Argument	tmp_r		1015639	4					
ANR	1015991	Identifier	tmp_r		1015639	0					
ANR	1015992	Argument	TYPE2_TRANSFER_IMM ( 0 )		1015639	5					
ANR	1015993	CallExpression	TYPE2_TRANSFER_IMM ( 0 )		1015639	0					
ANR	1015994	Callee	TYPE2_TRANSFER_IMM		1015639	0					
ANR	1015995	Identifier	TYPE2_TRANSFER_IMM		1015639	0					
ANR	1015996	ArgumentList	0		1015639	1					
ANR	1015997	Argument	0		1015639	0					
ANR	1015998	PrimaryExpression	0		1015639	0					
ANR	1015999	ExpressionStatement	imm = ( sljit_uw ) ( argw - compiler -> cache_argw )	1517:1:46896:46941	1015639	10	True				
ANR	1016000	AssignmentExpression	imm = ( sljit_uw ) ( argw - compiler -> cache_argw )		1015639	0		=			
ANR	1016001	Identifier	imm		1015639	0					
ANR	1016002	CastExpression	( sljit_uw ) ( argw - compiler -> cache_argw )		1015639	1					
ANR	1016003	CastTarget	sljit_uw		1015639	0					
ANR	1016004	AdditiveExpression	argw - compiler -> cache_argw		1015639	1		-			
ANR	1016005	Identifier	argw		1015639	0					
ANR	1016006	PtrMemberAccess	compiler -> cache_argw		1015639	1					
ANR	1016007	Identifier	compiler		1015639	0					
ANR	1016008	Identifier	cache_argw		1015639	1					
ANR	1016009	IfStatement	if ( compiler -> cache_arg == arg && imm <= ( sljit_uw ) max_delta )		1015639	11					
ANR	1016010	Condition	compiler -> cache_arg == arg && imm <= ( sljit_uw ) max_delta	1518:5:46948:47003	1015639	0	True				
ANR	1016011	AndExpression	compiler -> cache_arg == arg && imm <= ( sljit_uw ) max_delta		1015639	0		&&			
ANR	1016012	EqualityExpression	compiler -> cache_arg == arg		1015639	0		==			
ANR	1016013	PtrMemberAccess	compiler -> cache_arg		1015639	0					
ANR	1016014	Identifier	compiler		1015639	0					
ANR	1016015	Identifier	cache_arg		1015639	1					
ANR	1016016	Identifier	arg		1015639	1					
ANR	1016017	RelationalExpression	imm <= ( sljit_uw ) max_delta		1015639	1		<=			
ANR	1016018	Identifier	imm		1015639	0					
ANR	1016019	CastExpression	( sljit_uw ) max_delta		1015639	1					
ANR	1016020	CastTarget	sljit_uw		1015639	0					
ANR	1016021	Identifier	max_delta		1015639	1					
ANR	1016022	CompoundStatement		59:63:1842:1842	1015639	1					
ANR	1016023	ExpressionStatement	SLJIT_ASSERT ( ! ( inp_flags & WRITE_BACK ) )	1519:2:47010:47049	1015639	0	True				
ANR	1016024	CallExpression	SLJIT_ASSERT ( ! ( inp_flags & WRITE_BACK ) )		1015639	0					
ANR	1016025	Callee	SLJIT_ASSERT		1015639	0					
ANR	1016026	Identifier	SLJIT_ASSERT		1015639	0					
ANR	1016027	ArgumentList	! ( inp_flags & WRITE_BACK )		1015639	1					
ANR	1016028	Argument	! ( inp_flags & WRITE_BACK )		1015639	0					
ANR	1016029	UnaryOperationExpression	! ( inp_flags & WRITE_BACK )		1015639	0					
ANR	1016030	UnaryOperator	!		1015639	0					
ANR	1016031	BitAndExpression	inp_flags & WRITE_BACK		1015639	1		&			
ANR	1016032	Identifier	inp_flags		1015639	0					
ANR	1016033	Identifier	WRITE_BACK		1015639	1					
ANR	1016034	ExpressionStatement	"GETPUT_ARG_DATA_TRANSFER ( 1 , 0 , reg , TMP_REG3 , imm )"	1520:2:47053:47103	1015639	1	True				
ANR	1016035	CallExpression	"GETPUT_ARG_DATA_TRANSFER ( 1 , 0 , reg , TMP_REG3 , imm )"		1015639	0					
ANR	1016036	Callee	GETPUT_ARG_DATA_TRANSFER		1015639	0					
ANR	1016037	Identifier	GETPUT_ARG_DATA_TRANSFER		1015639	0					
ANR	1016038	ArgumentList	1		1015639	1					
ANR	1016039	Argument	1		1015639	0					
ANR	1016040	PrimaryExpression	1		1015639	0					
ANR	1016041	Argument	0		1015639	1					
ANR	1016042	PrimaryExpression	0		1015639	0					
ANR	1016043	Argument	reg		1015639	2					
ANR	1016044	Identifier	reg		1015639	0					
ANR	1016045	Argument	TMP_REG3		1015639	3					
ANR	1016046	Identifier	TMP_REG3		1015639	0					
ANR	1016047	Argument	imm		1015639	4					
ANR	1016048	Identifier	imm		1015639	0					
ANR	1016049	ReturnStatement	return SLJIT_SUCCESS ;	1521:2:47107:47127	1015639	2	True				
ANR	1016050	Identifier	SLJIT_SUCCESS		1015639	0					
ANR	1016051	IfStatement	if ( compiler -> cache_arg == arg && imm >= ( sljit_uw ) - max_delta )		1015639	12					
ANR	1016052	Condition	compiler -> cache_arg == arg && imm >= ( sljit_uw ) - max_delta	1523:5:47137:47193	1015639	0	True				
ANR	1016053	AndExpression	compiler -> cache_arg == arg && imm >= ( sljit_uw ) - max_delta		1015639	0		&&			
ANR	1016054	EqualityExpression	compiler -> cache_arg == arg		1015639	0		==			
ANR	1016055	PtrMemberAccess	compiler -> cache_arg		1015639	0					
ANR	1016056	Identifier	compiler		1015639	0					
ANR	1016057	Identifier	cache_arg		1015639	1					
ANR	1016058	Identifier	arg		1015639	1					
ANR	1016059	RelationalExpression	imm >= ( sljit_uw ) - max_delta		1015639	1		>=			
ANR	1016060	Identifier	imm		1015639	0					
ANR	1016061	CastExpression	( sljit_uw ) - max_delta		1015639	1					
ANR	1016062	CastTarget	sljit_uw		1015639	0					
ANR	1016063	UnaryOperationExpression	- max_delta		1015639	1					
ANR	1016064	UnaryOperator	-		1015639	0					
ANR	1016065	Identifier	max_delta		1015639	1					
ANR	1016066	CompoundStatement		64:64:2032:2032	1015639	1					
ANR	1016067	ExpressionStatement	SLJIT_ASSERT ( ! ( inp_flags & WRITE_BACK ) )	1524:2:47200:47239	1015639	0	True				
ANR	1016068	CallExpression	SLJIT_ASSERT ( ! ( inp_flags & WRITE_BACK ) )		1015639	0					
ANR	1016069	Callee	SLJIT_ASSERT		1015639	0					
ANR	1016070	Identifier	SLJIT_ASSERT		1015639	0					
ANR	1016071	ArgumentList	! ( inp_flags & WRITE_BACK )		1015639	1					
ANR	1016072	Argument	! ( inp_flags & WRITE_BACK )		1015639	0					
ANR	1016073	UnaryOperationExpression	! ( inp_flags & WRITE_BACK )		1015639	0					
ANR	1016074	UnaryOperator	!		1015639	0					
ANR	1016075	BitAndExpression	inp_flags & WRITE_BACK		1015639	1		&			
ANR	1016076	Identifier	inp_flags		1015639	0					
ANR	1016077	Identifier	WRITE_BACK		1015639	1					
ANR	1016078	ExpressionStatement	imm = ( sljit_uw ) - ( sljit_sw ) imm	1525:2:47243:47273	1015639	1	True				
ANR	1016079	AssignmentExpression	imm = ( sljit_uw ) - ( sljit_sw ) imm		1015639	0		=			
ANR	1016080	Identifier	imm		1015639	0					
ANR	1016081	CastExpression	( sljit_uw ) - ( sljit_sw ) imm		1015639	1					
ANR	1016082	CastTarget	sljit_uw		1015639	0					
ANR	1016083	UnaryOperationExpression	- ( sljit_sw ) imm		1015639	1					
ANR	1016084	UnaryOperator	-		1015639	0					
ANR	1016085	CastExpression	( sljit_sw ) imm		1015639	1					
ANR	1016086	CastTarget	sljit_sw		1015639	0					
ANR	1016087	Identifier	imm		1015639	1					
ANR	1016088	ExpressionStatement	"GETPUT_ARG_DATA_TRANSFER ( 0 , 0 , reg , TMP_REG3 , imm )"	1526:2:47277:47327	1015639	2	True				
ANR	1016089	CallExpression	"GETPUT_ARG_DATA_TRANSFER ( 0 , 0 , reg , TMP_REG3 , imm )"		1015639	0					
ANR	1016090	Callee	GETPUT_ARG_DATA_TRANSFER		1015639	0					
ANR	1016091	Identifier	GETPUT_ARG_DATA_TRANSFER		1015639	0					
ANR	1016092	ArgumentList	0		1015639	1					
ANR	1016093	Argument	0		1015639	0					
ANR	1016094	PrimaryExpression	0		1015639	0					
ANR	1016095	Argument	0		1015639	1					
ANR	1016096	PrimaryExpression	0		1015639	0					
ANR	1016097	Argument	reg		1015639	2					
ANR	1016098	Identifier	reg		1015639	0					
ANR	1016099	Argument	TMP_REG3		1015639	3					
ANR	1016100	Identifier	TMP_REG3		1015639	0					
ANR	1016101	Argument	imm		1015639	4					
ANR	1016102	Identifier	imm		1015639	0					
ANR	1016103	ReturnStatement	return SLJIT_SUCCESS ;	1527:2:47331:47351	1015639	3	True				
ANR	1016104	Identifier	SLJIT_SUCCESS		1015639	0					
ANR	1016105	ExpressionStatement	imm = get_imm ( argw & ~max_delta )	1530:1:47358:47390	1015639	13	True				
ANR	1016106	AssignmentExpression	imm = get_imm ( argw & ~max_delta )		1015639	0		=			
ANR	1016107	Identifier	imm		1015639	0					
ANR	1016108	CallExpression	get_imm ( argw & ~max_delta )		1015639	1					
ANR	1016109	Callee	get_imm		1015639	0					
ANR	1016110	Identifier	get_imm		1015639	0					
ANR	1016111	ArgumentList	argw & ~max_delta		1015639	1					
ANR	1016112	Argument	argw & ~max_delta		1015639	0					
ANR	1016113	BitAndExpression	argw & ~max_delta		1015639	0		&			
ANR	1016114	Identifier	argw		1015639	0					
ANR	1016115	Identifier	~max_delta		1015639	1					
ANR	1016116	IfStatement	if ( imm )		1015639	14					
ANR	1016117	Condition	imm	1531:5:47397:47399	1015639	0	True				
ANR	1016118	Identifier	imm		1015639	0					
ANR	1016119	CompoundStatement		72:10:2238:2238	1015639	1					
ANR	1016120	ExpressionStatement	TEST_WRITE_BACK ( )	1532:2:47406:47423	1015639	0	True				
ANR	1016121	CallExpression	TEST_WRITE_BACK ( )		1015639	0					
ANR	1016122	Callee	TEST_WRITE_BACK		1015639	0					
ANR	1016123	Identifier	TEST_WRITE_BACK		1015639	0					
ANR	1016124	ArgumentList			1015639	1					
ANR	1016125	ExpressionStatement	"FAIL_IF ( push_inst ( compiler , EMIT_DATA_PROCESS_INS ( ADD_DP , 0 , tmp_r , arg & REG_MASK , imm ) ) )"	1533:2:47427:47517	1015639	1	True				
ANR	1016126	CallExpression	"FAIL_IF ( push_inst ( compiler , EMIT_DATA_PROCESS_INS ( ADD_DP , 0 , tmp_r , arg & REG_MASK , imm ) ) )"		1015639	0					
ANR	1016127	Callee	FAIL_IF		1015639	0					
ANR	1016128	Identifier	FAIL_IF		1015639	0					
ANR	1016129	ArgumentList	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( ADD_DP , 0 , tmp_r , arg & REG_MASK , imm ) )"		1015639	1					
ANR	1016130	Argument	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( ADD_DP , 0 , tmp_r , arg & REG_MASK , imm ) )"		1015639	0					
ANR	1016131	CallExpression	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( ADD_DP , 0 , tmp_r , arg & REG_MASK , imm ) )"		1015639	0					
ANR	1016132	Callee	push_inst		1015639	0					
ANR	1016133	Identifier	push_inst		1015639	0					
ANR	1016134	ArgumentList	compiler		1015639	1					
ANR	1016135	Argument	compiler		1015639	0					
ANR	1016136	Identifier	compiler		1015639	0					
ANR	1016137	Argument	"EMIT_DATA_PROCESS_INS ( ADD_DP , 0 , tmp_r , arg & REG_MASK , imm )"		1015639	1					
ANR	1016138	CallExpression	"EMIT_DATA_PROCESS_INS ( ADD_DP , 0 , tmp_r , arg & REG_MASK , imm )"		1015639	0					
ANR	1016139	Callee	EMIT_DATA_PROCESS_INS		1015639	0					
ANR	1016140	Identifier	EMIT_DATA_PROCESS_INS		1015639	0					
ANR	1016141	ArgumentList	ADD_DP		1015639	1					
ANR	1016142	Argument	ADD_DP		1015639	0					
ANR	1016143	Identifier	ADD_DP		1015639	0					
ANR	1016144	Argument	0		1015639	1					
ANR	1016145	PrimaryExpression	0		1015639	0					
ANR	1016146	Argument	tmp_r		1015639	2					
ANR	1016147	Identifier	tmp_r		1015639	0					
ANR	1016148	Argument	arg & REG_MASK		1015639	3					
ANR	1016149	BitAndExpression	arg & REG_MASK		1015639	0		&			
ANR	1016150	Identifier	arg		1015639	0					
ANR	1016151	Identifier	REG_MASK		1015639	1					
ANR	1016152	Argument	imm		1015639	4					
ANR	1016153	Identifier	imm		1015639	0					
ANR	1016154	ExpressionStatement	"GETPUT_ARG_DATA_TRANSFER ( 1 , inp_flags & WRITE_BACK , reg , tmp_r , argw & max_delta )"	1534:2:47521:47602	1015639	2	True				
ANR	1016155	CallExpression	"GETPUT_ARG_DATA_TRANSFER ( 1 , inp_flags & WRITE_BACK , reg , tmp_r , argw & max_delta )"		1015639	0					
ANR	1016156	Callee	GETPUT_ARG_DATA_TRANSFER		1015639	0					
ANR	1016157	Identifier	GETPUT_ARG_DATA_TRANSFER		1015639	0					
ANR	1016158	ArgumentList	1		1015639	1					
ANR	1016159	Argument	1		1015639	0					
ANR	1016160	PrimaryExpression	1		1015639	0					
ANR	1016161	Argument	inp_flags & WRITE_BACK		1015639	1					
ANR	1016162	BitAndExpression	inp_flags & WRITE_BACK		1015639	0		&			
ANR	1016163	Identifier	inp_flags		1015639	0					
ANR	1016164	Identifier	WRITE_BACK		1015639	1					
ANR	1016165	Argument	reg		1015639	2					
ANR	1016166	Identifier	reg		1015639	0					
ANR	1016167	Argument	tmp_r		1015639	3					
ANR	1016168	Identifier	tmp_r		1015639	0					
ANR	1016169	Argument	argw & max_delta		1015639	4					
ANR	1016170	BitAndExpression	argw & max_delta		1015639	0		&			
ANR	1016171	Identifier	argw		1015639	0					
ANR	1016172	Identifier	max_delta		1015639	1					
ANR	1016173	ReturnStatement	return SLJIT_SUCCESS ;	1535:2:47606:47626	1015639	3	True				
ANR	1016174	Identifier	SLJIT_SUCCESS		1015639	0					
ANR	1016175	ExpressionStatement	imm = get_imm ( - argw & ~max_delta )	1538:1:47633:47666	1015639	15	True				
ANR	1016176	AssignmentExpression	imm = get_imm ( - argw & ~max_delta )		1015639	0		=			
ANR	1016177	Identifier	imm		1015639	0					
ANR	1016178	CallExpression	get_imm ( - argw & ~max_delta )		1015639	1					
ANR	1016179	Callee	get_imm		1015639	0					
ANR	1016180	Identifier	get_imm		1015639	0					
ANR	1016181	ArgumentList	- argw & ~max_delta		1015639	1					
ANR	1016182	Argument	- argw & ~max_delta		1015639	0					
ANR	1016183	BitAndExpression	- argw & ~max_delta		1015639	0		&			
ANR	1016184	UnaryOperationExpression	- argw		1015639	0					
ANR	1016185	UnaryOperator	-		1015639	0					
ANR	1016186	Identifier	argw		1015639	1					
ANR	1016187	Identifier	~max_delta		1015639	1					
ANR	1016188	IfStatement	if ( imm )		1015639	16					
ANR	1016189	Condition	imm	1539:5:47673:47675	1015639	0	True				
ANR	1016190	Identifier	imm		1015639	0					
ANR	1016191	CompoundStatement		80:10:2514:2514	1015639	1					
ANR	1016192	ExpressionStatement	argw = - argw	1540:2:47682:47694	1015639	0	True				
ANR	1016193	AssignmentExpression	argw = - argw		1015639	0		=			
ANR	1016194	Identifier	argw		1015639	0					
ANR	1016195	UnaryOperationExpression	- argw		1015639	1					
ANR	1016196	UnaryOperator	-		1015639	0					
ANR	1016197	Identifier	argw		1015639	1					
ANR	1016198	ExpressionStatement	TEST_WRITE_BACK ( )	1541:2:47698:47715	1015639	1	True				
ANR	1016199	CallExpression	TEST_WRITE_BACK ( )		1015639	0					
ANR	1016200	Callee	TEST_WRITE_BACK		1015639	0					
ANR	1016201	Identifier	TEST_WRITE_BACK		1015639	0					
ANR	1016202	ArgumentList			1015639	1					
ANR	1016203	ExpressionStatement	"FAIL_IF ( push_inst ( compiler , EMIT_DATA_PROCESS_INS ( SUB_DP , 0 , tmp_r , arg & REG_MASK , imm ) ) )"	1542:2:47719:47809	1015639	2	True				
ANR	1016204	CallExpression	"FAIL_IF ( push_inst ( compiler , EMIT_DATA_PROCESS_INS ( SUB_DP , 0 , tmp_r , arg & REG_MASK , imm ) ) )"		1015639	0					
ANR	1016205	Callee	FAIL_IF		1015639	0					
ANR	1016206	Identifier	FAIL_IF		1015639	0					
ANR	1016207	ArgumentList	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( SUB_DP , 0 , tmp_r , arg & REG_MASK , imm ) )"		1015639	1					
ANR	1016208	Argument	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( SUB_DP , 0 , tmp_r , arg & REG_MASK , imm ) )"		1015639	0					
ANR	1016209	CallExpression	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( SUB_DP , 0 , tmp_r , arg & REG_MASK , imm ) )"		1015639	0					
ANR	1016210	Callee	push_inst		1015639	0					
ANR	1016211	Identifier	push_inst		1015639	0					
ANR	1016212	ArgumentList	compiler		1015639	1					
ANR	1016213	Argument	compiler		1015639	0					
ANR	1016214	Identifier	compiler		1015639	0					
ANR	1016215	Argument	"EMIT_DATA_PROCESS_INS ( SUB_DP , 0 , tmp_r , arg & REG_MASK , imm )"		1015639	1					
ANR	1016216	CallExpression	"EMIT_DATA_PROCESS_INS ( SUB_DP , 0 , tmp_r , arg & REG_MASK , imm )"		1015639	0					
ANR	1016217	Callee	EMIT_DATA_PROCESS_INS		1015639	0					
ANR	1016218	Identifier	EMIT_DATA_PROCESS_INS		1015639	0					
ANR	1016219	ArgumentList	SUB_DP		1015639	1					
ANR	1016220	Argument	SUB_DP		1015639	0					
ANR	1016221	Identifier	SUB_DP		1015639	0					
ANR	1016222	Argument	0		1015639	1					
ANR	1016223	PrimaryExpression	0		1015639	0					
ANR	1016224	Argument	tmp_r		1015639	2					
ANR	1016225	Identifier	tmp_r		1015639	0					
ANR	1016226	Argument	arg & REG_MASK		1015639	3					
ANR	1016227	BitAndExpression	arg & REG_MASK		1015639	0		&			
ANR	1016228	Identifier	arg		1015639	0					
ANR	1016229	Identifier	REG_MASK		1015639	1					
ANR	1016230	Argument	imm		1015639	4					
ANR	1016231	Identifier	imm		1015639	0					
ANR	1016232	ExpressionStatement	"GETPUT_ARG_DATA_TRANSFER ( 0 , inp_flags & WRITE_BACK , reg , tmp_r , argw & max_delta )"	1543:2:47813:47894	1015639	3	True				
ANR	1016233	CallExpression	"GETPUT_ARG_DATA_TRANSFER ( 0 , inp_flags & WRITE_BACK , reg , tmp_r , argw & max_delta )"		1015639	0					
ANR	1016234	Callee	GETPUT_ARG_DATA_TRANSFER		1015639	0					
ANR	1016235	Identifier	GETPUT_ARG_DATA_TRANSFER		1015639	0					
ANR	1016236	ArgumentList	0		1015639	1					
ANR	1016237	Argument	0		1015639	0					
ANR	1016238	PrimaryExpression	0		1015639	0					
ANR	1016239	Argument	inp_flags & WRITE_BACK		1015639	1					
ANR	1016240	BitAndExpression	inp_flags & WRITE_BACK		1015639	0		&			
ANR	1016241	Identifier	inp_flags		1015639	0					
ANR	1016242	Identifier	WRITE_BACK		1015639	1					
ANR	1016243	Argument	reg		1015639	2					
ANR	1016244	Identifier	reg		1015639	0					
ANR	1016245	Argument	tmp_r		1015639	3					
ANR	1016246	Identifier	tmp_r		1015639	0					
ANR	1016247	Argument	argw & max_delta		1015639	4					
ANR	1016248	BitAndExpression	argw & max_delta		1015639	0		&			
ANR	1016249	Identifier	argw		1015639	0					
ANR	1016250	Identifier	max_delta		1015639	1					
ANR	1016251	ReturnStatement	return SLJIT_SUCCESS ;	1544:2:47898:47918	1015639	4	True				
ANR	1016252	Identifier	SLJIT_SUCCESS		1015639	0					
ANR	1016253	IfStatement	if ( ( compiler -> cache_arg & SLJIT_IMM ) && compiler -> cache_argw == argw )		1015639	17					
ANR	1016254	Condition	( compiler -> cache_arg & SLJIT_IMM ) && compiler -> cache_argw == argw	1547:5:47929:47993	1015639	0	True				
ANR	1016255	AndExpression	( compiler -> cache_arg & SLJIT_IMM ) && compiler -> cache_argw == argw		1015639	0		&&			
ANR	1016256	BitAndExpression	compiler -> cache_arg & SLJIT_IMM		1015639	0		&			
ANR	1016257	PtrMemberAccess	compiler -> cache_arg		1015639	0					
ANR	1016258	Identifier	compiler		1015639	0					
ANR	1016259	Identifier	cache_arg		1015639	1					
ANR	1016260	Identifier	SLJIT_IMM		1015639	1					
ANR	1016261	EqualityExpression	compiler -> cache_argw == argw		1015639	1		==			
ANR	1016262	PtrMemberAccess	compiler -> cache_argw		1015639	0					
ANR	1016263	Identifier	compiler		1015639	0					
ANR	1016264	Identifier	cache_argw		1015639	1					
ANR	1016265	Identifier	argw		1015639	1					
ANR	1016266	CompoundStatement		88:72:2832:2832	1015639	1					
ANR	1016267	ExpressionStatement	TEST_WRITE_BACK ( )	1548:2:48000:48017	1015639	0	True				
ANR	1016268	CallExpression	TEST_WRITE_BACK ( )		1015639	0					
ANR	1016269	Callee	TEST_WRITE_BACK		1015639	0					
ANR	1016270	Identifier	TEST_WRITE_BACK		1015639	0					
ANR	1016271	ArgumentList			1015639	1					
ANR	1016272	ReturnStatement	"return push_inst ( compiler , EMIT_DATA_TRANSFER ( inp_flags , 1 , inp_flags & WRITE_BACK , reg , arg & REG_MASK , RM ( TMP_REG3 ) | ( max_delta & 0xf00 ? SRC2_IMM : 0 ) ) ) ;"	1549:2:48021:48177	1015639	1	True				
ANR	1016273	CallExpression	"push_inst ( compiler , EMIT_DATA_TRANSFER ( inp_flags , 1 , inp_flags & WRITE_BACK , reg , arg & REG_MASK , RM ( TMP_REG3 ) | ( max_delta & 0xf00 ? SRC2_IMM : 0 ) ) )"		1015639	0					
ANR	1016274	Callee	push_inst		1015639	0					
ANR	1016275	Identifier	push_inst		1015639	0					
ANR	1016276	ArgumentList	compiler		1015639	1					
ANR	1016277	Argument	compiler		1015639	0					
ANR	1016278	Identifier	compiler		1015639	0					
ANR	1016279	Argument	"EMIT_DATA_TRANSFER ( inp_flags , 1 , inp_flags & WRITE_BACK , reg , arg & REG_MASK , RM ( TMP_REG3 ) | ( max_delta & 0xf00 ? SRC2_IMM : 0 ) )"		1015639	1					
ANR	1016280	CallExpression	"EMIT_DATA_TRANSFER ( inp_flags , 1 , inp_flags & WRITE_BACK , reg , arg & REG_MASK , RM ( TMP_REG3 ) | ( max_delta & 0xf00 ? SRC2_IMM : 0 ) )"		1015639	0					
ANR	1016281	Callee	EMIT_DATA_TRANSFER		1015639	0					
ANR	1016282	Identifier	EMIT_DATA_TRANSFER		1015639	0					
ANR	1016283	ArgumentList	inp_flags		1015639	1					
ANR	1016284	Argument	inp_flags		1015639	0					
ANR	1016285	Identifier	inp_flags		1015639	0					
ANR	1016286	Argument	1		1015639	1					
ANR	1016287	PrimaryExpression	1		1015639	0					
ANR	1016288	Argument	inp_flags & WRITE_BACK		1015639	2					
ANR	1016289	BitAndExpression	inp_flags & WRITE_BACK		1015639	0		&			
ANR	1016290	Identifier	inp_flags		1015639	0					
ANR	1016291	Identifier	WRITE_BACK		1015639	1					
ANR	1016292	Argument	reg		1015639	3					
ANR	1016293	Identifier	reg		1015639	0					
ANR	1016294	Argument	arg & REG_MASK		1015639	4					
ANR	1016295	BitAndExpression	arg & REG_MASK		1015639	0		&			
ANR	1016296	Identifier	arg		1015639	0					
ANR	1016297	Identifier	REG_MASK		1015639	1					
ANR	1016298	Argument	RM ( TMP_REG3 ) | ( max_delta & 0xf00 ? SRC2_IMM : 0 )		1015639	5					
ANR	1016299	InclusiveOrExpression	RM ( TMP_REG3 ) | ( max_delta & 0xf00 ? SRC2_IMM : 0 )		1015639	0		|			
ANR	1016300	CallExpression	RM ( TMP_REG3 )		1015639	0					
ANR	1016301	Callee	RM		1015639	0					
ANR	1016302	Identifier	RM		1015639	0					
ANR	1016303	ArgumentList	TMP_REG3		1015639	1					
ANR	1016304	Argument	TMP_REG3		1015639	0					
ANR	1016305	Identifier	TMP_REG3		1015639	0					
ANR	1016306	ConditionalExpression	max_delta & 0xf00 ? SRC2_IMM : 0		1015639	1					
ANR	1016307	Condition	max_delta & 0xf00		1015639	0					
ANR	1016308	BitAndExpression	max_delta & 0xf00		1015639	0		&			
ANR	1016309	Identifier	max_delta		1015639	0					
ANR	1016310	PrimaryExpression	0xf00		1015639	1					
ANR	1016311	Identifier	SRC2_IMM		1015639	1					
ANR	1016312	PrimaryExpression	0		1015639	2					
ANR	1016313	IfStatement	if ( argw == next_argw && ( next_arg & SLJIT_MEM ) )		1015639	18					
ANR	1016314	Condition	argw == next_argw && ( next_arg & SLJIT_MEM )	1552:5:48188:48230	1015639	0	True				
ANR	1016315	AndExpression	argw == next_argw && ( next_arg & SLJIT_MEM )		1015639	0		&&			
ANR	1016316	EqualityExpression	argw == next_argw		1015639	0		==			
ANR	1016317	Identifier	argw		1015639	0					
ANR	1016318	Identifier	next_argw		1015639	1					
ANR	1016319	BitAndExpression	next_arg & SLJIT_MEM		1015639	1		&			
ANR	1016320	Identifier	next_arg		1015639	0					
ANR	1016321	Identifier	SLJIT_MEM		1015639	1					
ANR	1016322	CompoundStatement		93:50:3069:3069	1015639	1					
ANR	1016323	ExpressionStatement	SLJIT_ASSERT ( inp_flags & LOAD_DATA )	1553:2:48237:48272	1015639	0	True				
ANR	1016324	CallExpression	SLJIT_ASSERT ( inp_flags & LOAD_DATA )		1015639	0					
ANR	1016325	Callee	SLJIT_ASSERT		1015639	0					
ANR	1016326	Identifier	SLJIT_ASSERT		1015639	0					
ANR	1016327	ArgumentList	inp_flags & LOAD_DATA		1015639	1					
ANR	1016328	Argument	inp_flags & LOAD_DATA		1015639	0					
ANR	1016329	BitAndExpression	inp_flags & LOAD_DATA		1015639	0		&			
ANR	1016330	Identifier	inp_flags		1015639	0					
ANR	1016331	Identifier	LOAD_DATA		1015639	1					
ANR	1016332	ExpressionStatement	"FAIL_IF ( load_immediate ( compiler , TMP_REG3 , argw ) )"	1554:2:48276:48325	1015639	1	True				
ANR	1016333	CallExpression	"FAIL_IF ( load_immediate ( compiler , TMP_REG3 , argw ) )"		1015639	0					
ANR	1016334	Callee	FAIL_IF		1015639	0					
ANR	1016335	Identifier	FAIL_IF		1015639	0					
ANR	1016336	ArgumentList	"load_immediate ( compiler , TMP_REG3 , argw )"		1015639	1					
ANR	1016337	Argument	"load_immediate ( compiler , TMP_REG3 , argw )"		1015639	0					
ANR	1016338	CallExpression	"load_immediate ( compiler , TMP_REG3 , argw )"		1015639	0					
ANR	1016339	Callee	load_immediate		1015639	0					
ANR	1016340	Identifier	load_immediate		1015639	0					
ANR	1016341	ArgumentList	compiler		1015639	1					
ANR	1016342	Argument	compiler		1015639	0					
ANR	1016343	Identifier	compiler		1015639	0					
ANR	1016344	Argument	TMP_REG3		1015639	1					
ANR	1016345	Identifier	TMP_REG3		1015639	0					
ANR	1016346	Argument	argw		1015639	2					
ANR	1016347	Identifier	argw		1015639	0					
ANR	1016348	ExpressionStatement	compiler -> cache_arg = SLJIT_IMM	1556:2:48330:48361	1015639	2	True				
ANR	1016349	AssignmentExpression	compiler -> cache_arg = SLJIT_IMM		1015639	0		=			
ANR	1016350	PtrMemberAccess	compiler -> cache_arg		1015639	0					
ANR	1016351	Identifier	compiler		1015639	0					
ANR	1016352	Identifier	cache_arg		1015639	1					
ANR	1016353	Identifier	SLJIT_IMM		1015639	1					
ANR	1016354	ExpressionStatement	compiler -> cache_argw = argw	1557:2:48365:48392	1015639	3	True				
ANR	1016355	AssignmentExpression	compiler -> cache_argw = argw		1015639	0		=			
ANR	1016356	PtrMemberAccess	compiler -> cache_argw		1015639	0					
ANR	1016357	Identifier	compiler		1015639	0					
ANR	1016358	Identifier	cache_argw		1015639	1					
ANR	1016359	Identifier	argw		1015639	1					
ANR	1016360	ExpressionStatement	TEST_WRITE_BACK ( )	1559:2:48397:48414	1015639	4	True				
ANR	1016361	CallExpression	TEST_WRITE_BACK ( )		1015639	0					
ANR	1016362	Callee	TEST_WRITE_BACK		1015639	0					
ANR	1016363	Identifier	TEST_WRITE_BACK		1015639	0					
ANR	1016364	ArgumentList			1015639	1					
ANR	1016365	ReturnStatement	"return push_inst ( compiler , EMIT_DATA_TRANSFER ( inp_flags , 1 , inp_flags & WRITE_BACK , reg , arg & REG_MASK , RM ( TMP_REG3 ) | ( max_delta & 0xf00 ? SRC2_IMM : 0 ) ) ) ;"	1560:2:48418:48574	1015639	5	True				
ANR	1016366	CallExpression	"push_inst ( compiler , EMIT_DATA_TRANSFER ( inp_flags , 1 , inp_flags & WRITE_BACK , reg , arg & REG_MASK , RM ( TMP_REG3 ) | ( max_delta & 0xf00 ? SRC2_IMM : 0 ) ) )"		1015639	0					
ANR	1016367	Callee	push_inst		1015639	0					
ANR	1016368	Identifier	push_inst		1015639	0					
ANR	1016369	ArgumentList	compiler		1015639	1					
ANR	1016370	Argument	compiler		1015639	0					
ANR	1016371	Identifier	compiler		1015639	0					
ANR	1016372	Argument	"EMIT_DATA_TRANSFER ( inp_flags , 1 , inp_flags & WRITE_BACK , reg , arg & REG_MASK , RM ( TMP_REG3 ) | ( max_delta & 0xf00 ? SRC2_IMM : 0 ) )"		1015639	1					
ANR	1016373	CallExpression	"EMIT_DATA_TRANSFER ( inp_flags , 1 , inp_flags & WRITE_BACK , reg , arg & REG_MASK , RM ( TMP_REG3 ) | ( max_delta & 0xf00 ? SRC2_IMM : 0 ) )"		1015639	0					
ANR	1016374	Callee	EMIT_DATA_TRANSFER		1015639	0					
ANR	1016375	Identifier	EMIT_DATA_TRANSFER		1015639	0					
ANR	1016376	ArgumentList	inp_flags		1015639	1					
ANR	1016377	Argument	inp_flags		1015639	0					
ANR	1016378	Identifier	inp_flags		1015639	0					
ANR	1016379	Argument	1		1015639	1					
ANR	1016380	PrimaryExpression	1		1015639	0					
ANR	1016381	Argument	inp_flags & WRITE_BACK		1015639	2					
ANR	1016382	BitAndExpression	inp_flags & WRITE_BACK		1015639	0		&			
ANR	1016383	Identifier	inp_flags		1015639	0					
ANR	1016384	Identifier	WRITE_BACK		1015639	1					
ANR	1016385	Argument	reg		1015639	3					
ANR	1016386	Identifier	reg		1015639	0					
ANR	1016387	Argument	arg & REG_MASK		1015639	4					
ANR	1016388	BitAndExpression	arg & REG_MASK		1015639	0		&			
ANR	1016389	Identifier	arg		1015639	0					
ANR	1016390	Identifier	REG_MASK		1015639	1					
ANR	1016391	Argument	RM ( TMP_REG3 ) | ( max_delta & 0xf00 ? SRC2_IMM : 0 )		1015639	5					
ANR	1016392	InclusiveOrExpression	RM ( TMP_REG3 ) | ( max_delta & 0xf00 ? SRC2_IMM : 0 )		1015639	0		|			
ANR	1016393	CallExpression	RM ( TMP_REG3 )		1015639	0					
ANR	1016394	Callee	RM		1015639	0					
ANR	1016395	Identifier	RM		1015639	0					
ANR	1016396	ArgumentList	TMP_REG3		1015639	1					
ANR	1016397	Argument	TMP_REG3		1015639	0					
ANR	1016398	Identifier	TMP_REG3		1015639	0					
ANR	1016399	ConditionalExpression	max_delta & 0xf00 ? SRC2_IMM : 0		1015639	1					
ANR	1016400	Condition	max_delta & 0xf00		1015639	0					
ANR	1016401	BitAndExpression	max_delta & 0xf00		1015639	0		&			
ANR	1016402	Identifier	max_delta		1015639	0					
ANR	1016403	PrimaryExpression	0xf00		1015639	1					
ANR	1016404	Identifier	SRC2_IMM		1015639	1					
ANR	1016405	PrimaryExpression	0		1015639	2					
ANR	1016406	ExpressionStatement	imm = ( sljit_uw ) ( argw - next_argw )	1563:1:48581:48615	1015639	19	True				
ANR	1016407	AssignmentExpression	imm = ( sljit_uw ) ( argw - next_argw )		1015639	0		=			
ANR	1016408	Identifier	imm		1015639	0					
ANR	1016409	CastExpression	( sljit_uw ) ( argw - next_argw )		1015639	1					
ANR	1016410	CastTarget	sljit_uw		1015639	0					
ANR	1016411	AdditiveExpression	argw - next_argw		1015639	1		-			
ANR	1016412	Identifier	argw		1015639	0					
ANR	1016413	Identifier	next_argw		1015639	1					
ANR	1016414	IfStatement	if ( arg == next_arg && ! ( inp_flags & WRITE_BACK ) && ( imm <= ( sljit_uw ) max_delta || imm >= ( sljit_uw ) - max_delta ) )		1015639	20					
ANR	1016415	Condition	arg == next_arg && ! ( inp_flags & WRITE_BACK ) && ( imm <= ( sljit_uw ) max_delta || imm >= ( sljit_uw ) - max_delta )	1564:5:48622:48728	1015639	0	True				
ANR	1016416	AndExpression	arg == next_arg && ! ( inp_flags & WRITE_BACK ) && ( imm <= ( sljit_uw ) max_delta || imm >= ( sljit_uw ) - max_delta )		1015639	0		&&			
ANR	1016417	EqualityExpression	arg == next_arg		1015639	0		==			
ANR	1016418	Identifier	arg		1015639	0					
ANR	1016419	Identifier	next_arg		1015639	1					
ANR	1016420	AndExpression	! ( inp_flags & WRITE_BACK ) && ( imm <= ( sljit_uw ) max_delta || imm >= ( sljit_uw ) - max_delta )		1015639	1		&&			
ANR	1016421	UnaryOperationExpression	! ( inp_flags & WRITE_BACK )		1015639	0					
ANR	1016422	UnaryOperator	!		1015639	0					
ANR	1016423	BitAndExpression	inp_flags & WRITE_BACK		1015639	1		&			
ANR	1016424	Identifier	inp_flags		1015639	0					
ANR	1016425	Identifier	WRITE_BACK		1015639	1					
ANR	1016426	OrExpression	imm <= ( sljit_uw ) max_delta || imm >= ( sljit_uw ) - max_delta		1015639	1		||			
ANR	1016427	RelationalExpression	imm <= ( sljit_uw ) max_delta		1015639	0		<=			
ANR	1016428	Identifier	imm		1015639	0					
ANR	1016429	CastExpression	( sljit_uw ) max_delta		1015639	1					
ANR	1016430	CastTarget	sljit_uw		1015639	0					
ANR	1016431	Identifier	max_delta		1015639	1					
ANR	1016432	RelationalExpression	imm >= ( sljit_uw ) - max_delta		1015639	1		>=			
ANR	1016433	Identifier	imm		1015639	0					
ANR	1016434	CastExpression	( sljit_uw ) - max_delta		1015639	1					
ANR	1016435	CastTarget	sljit_uw		1015639	0					
ANR	1016436	UnaryOperationExpression	- max_delta		1015639	1					
ANR	1016437	UnaryOperator	-		1015639	0					
ANR	1016438	Identifier	max_delta		1015639	1					
ANR	1016439	CompoundStatement		105:114:3567:3567	1015639	1					
ANR	1016440	ExpressionStatement	SLJIT_ASSERT ( inp_flags & LOAD_DATA )	1565:2:48735:48770	1015639	0	True				
ANR	1016441	CallExpression	SLJIT_ASSERT ( inp_flags & LOAD_DATA )		1015639	0					
ANR	1016442	Callee	SLJIT_ASSERT		1015639	0					
ANR	1016443	Identifier	SLJIT_ASSERT		1015639	0					
ANR	1016444	ArgumentList	inp_flags & LOAD_DATA		1015639	1					
ANR	1016445	Argument	inp_flags & LOAD_DATA		1015639	0					
ANR	1016446	BitAndExpression	inp_flags & LOAD_DATA		1015639	0		&			
ANR	1016447	Identifier	inp_flags		1015639	0					
ANR	1016448	Identifier	LOAD_DATA		1015639	1					
ANR	1016449	ExpressionStatement	"FAIL_IF ( load_immediate ( compiler , TMP_REG3 , argw ) )"	1566:2:48774:48823	1015639	1	True				
ANR	1016450	CallExpression	"FAIL_IF ( load_immediate ( compiler , TMP_REG3 , argw ) )"		1015639	0					
ANR	1016451	Callee	FAIL_IF		1015639	0					
ANR	1016452	Identifier	FAIL_IF		1015639	0					
ANR	1016453	ArgumentList	"load_immediate ( compiler , TMP_REG3 , argw )"		1015639	1					
ANR	1016454	Argument	"load_immediate ( compiler , TMP_REG3 , argw )"		1015639	0					
ANR	1016455	CallExpression	"load_immediate ( compiler , TMP_REG3 , argw )"		1015639	0					
ANR	1016456	Callee	load_immediate		1015639	0					
ANR	1016457	Identifier	load_immediate		1015639	0					
ANR	1016458	ArgumentList	compiler		1015639	1					
ANR	1016459	Argument	compiler		1015639	0					
ANR	1016460	Identifier	compiler		1015639	0					
ANR	1016461	Argument	TMP_REG3		1015639	1					
ANR	1016462	Identifier	TMP_REG3		1015639	0					
ANR	1016463	Argument	argw		1015639	2					
ANR	1016464	Identifier	argw		1015639	0					
ANR	1016465	ExpressionStatement	"FAIL_IF ( push_inst ( compiler , EMIT_DATA_PROCESS_INS ( ADD_DP , 0 , TMP_REG3 , TMP_REG3 , reg_map [ arg & REG_MASK ] ) ) )"	1567:2:48827:48934	1015639	2	True				
ANR	1016466	CallExpression	"FAIL_IF ( push_inst ( compiler , EMIT_DATA_PROCESS_INS ( ADD_DP , 0 , TMP_REG3 , TMP_REG3 , reg_map [ arg & REG_MASK ] ) ) )"		1015639	0					
ANR	1016467	Callee	FAIL_IF		1015639	0					
ANR	1016468	Identifier	FAIL_IF		1015639	0					
ANR	1016469	ArgumentList	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( ADD_DP , 0 , TMP_REG3 , TMP_REG3 , reg_map [ arg & REG_MASK ] ) )"		1015639	1					
ANR	1016470	Argument	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( ADD_DP , 0 , TMP_REG3 , TMP_REG3 , reg_map [ arg & REG_MASK ] ) )"		1015639	0					
ANR	1016471	CallExpression	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( ADD_DP , 0 , TMP_REG3 , TMP_REG3 , reg_map [ arg & REG_MASK ] ) )"		1015639	0					
ANR	1016472	Callee	push_inst		1015639	0					
ANR	1016473	Identifier	push_inst		1015639	0					
ANR	1016474	ArgumentList	compiler		1015639	1					
ANR	1016475	Argument	compiler		1015639	0					
ANR	1016476	Identifier	compiler		1015639	0					
ANR	1016477	Argument	"EMIT_DATA_PROCESS_INS ( ADD_DP , 0 , TMP_REG3 , TMP_REG3 , reg_map [ arg & REG_MASK ] )"		1015639	1					
ANR	1016478	CallExpression	"EMIT_DATA_PROCESS_INS ( ADD_DP , 0 , TMP_REG3 , TMP_REG3 , reg_map [ arg & REG_MASK ] )"		1015639	0					
ANR	1016479	Callee	EMIT_DATA_PROCESS_INS		1015639	0					
ANR	1016480	Identifier	EMIT_DATA_PROCESS_INS		1015639	0					
ANR	1016481	ArgumentList	ADD_DP		1015639	1					
ANR	1016482	Argument	ADD_DP		1015639	0					
ANR	1016483	Identifier	ADD_DP		1015639	0					
ANR	1016484	Argument	0		1015639	1					
ANR	1016485	PrimaryExpression	0		1015639	0					
ANR	1016486	Argument	TMP_REG3		1015639	2					
ANR	1016487	Identifier	TMP_REG3		1015639	0					
ANR	1016488	Argument	TMP_REG3		1015639	3					
ANR	1016489	Identifier	TMP_REG3		1015639	0					
ANR	1016490	Argument	reg_map [ arg & REG_MASK ]		1015639	4					
ANR	1016491	ArrayIndexing	reg_map [ arg & REG_MASK ]		1015639	0					
ANR	1016492	Identifier	reg_map		1015639	0					
ANR	1016493	BitAndExpression	arg & REG_MASK		1015639	1		&			
ANR	1016494	Identifier	arg		1015639	0					
ANR	1016495	Identifier	REG_MASK		1015639	1					
ANR	1016496	ExpressionStatement	compiler -> cache_arg = arg	1569:2:48939:48964	1015639	3	True				
ANR	1016497	AssignmentExpression	compiler -> cache_arg = arg		1015639	0		=			
ANR	1016498	PtrMemberAccess	compiler -> cache_arg		1015639	0					
ANR	1016499	Identifier	compiler		1015639	0					
ANR	1016500	Identifier	cache_arg		1015639	1					
ANR	1016501	Identifier	arg		1015639	1					
ANR	1016502	ExpressionStatement	compiler -> cache_argw = argw	1570:2:48968:48995	1015639	4	True				
ANR	1016503	AssignmentExpression	compiler -> cache_argw = argw		1015639	0		=			
ANR	1016504	PtrMemberAccess	compiler -> cache_argw		1015639	0					
ANR	1016505	Identifier	compiler		1015639	0					
ANR	1016506	Identifier	cache_argw		1015639	1					
ANR	1016507	Identifier	argw		1015639	1					
ANR	1016508	ExpressionStatement	"GETPUT_ARG_DATA_TRANSFER ( 1 , 0 , reg , TMP_REG3 , 0 )"	1572:2:49000:49048	1015639	5	True				
ANR	1016509	CallExpression	"GETPUT_ARG_DATA_TRANSFER ( 1 , 0 , reg , TMP_REG3 , 0 )"		1015639	0					
ANR	1016510	Callee	GETPUT_ARG_DATA_TRANSFER		1015639	0					
ANR	1016511	Identifier	GETPUT_ARG_DATA_TRANSFER		1015639	0					
ANR	1016512	ArgumentList	1		1015639	1					
ANR	1016513	Argument	1		1015639	0					
ANR	1016514	PrimaryExpression	1		1015639	0					
ANR	1016515	Argument	0		1015639	1					
ANR	1016516	PrimaryExpression	0		1015639	0					
ANR	1016517	Argument	reg		1015639	2					
ANR	1016518	Identifier	reg		1015639	0					
ANR	1016519	Argument	TMP_REG3		1015639	3					
ANR	1016520	Identifier	TMP_REG3		1015639	0					
ANR	1016521	Argument	0		1015639	4					
ANR	1016522	PrimaryExpression	0		1015639	0					
ANR	1016523	ReturnStatement	return SLJIT_SUCCESS ;	1573:2:49052:49072	1015639	6	True				
ANR	1016524	Identifier	SLJIT_SUCCESS		1015639	0					
ANR	1016525	IfStatement	if ( ( arg & REG_MASK ) == tmp_r )		1015639	21					
ANR	1016526	Condition	( arg & REG_MASK ) == tmp_r	1576:5:49083:49107	1015639	0	True				
ANR	1016527	EqualityExpression	( arg & REG_MASK ) == tmp_r		1015639	0		==			
ANR	1016528	BitAndExpression	arg & REG_MASK		1015639	0		&			
ANR	1016529	Identifier	arg		1015639	0					
ANR	1016530	Identifier	REG_MASK		1015639	1					
ANR	1016531	Identifier	tmp_r		1015639	1					
ANR	1016532	CompoundStatement		117:32:3946:3946	1015639	1					
ANR	1016533	ExpressionStatement	compiler -> cache_arg = SLJIT_IMM	1577:2:49114:49145	1015639	0	True				
ANR	1016534	AssignmentExpression	compiler -> cache_arg = SLJIT_IMM		1015639	0		=			
ANR	1016535	PtrMemberAccess	compiler -> cache_arg		1015639	0					
ANR	1016536	Identifier	compiler		1015639	0					
ANR	1016537	Identifier	cache_arg		1015639	1					
ANR	1016538	Identifier	SLJIT_IMM		1015639	1					
ANR	1016539	ExpressionStatement	compiler -> cache_argw = argw	1578:2:49149:49176	1015639	1	True				
ANR	1016540	AssignmentExpression	compiler -> cache_argw = argw		1015639	0		=			
ANR	1016541	PtrMemberAccess	compiler -> cache_argw		1015639	0					
ANR	1016542	Identifier	compiler		1015639	0					
ANR	1016543	Identifier	cache_argw		1015639	1					
ANR	1016544	Identifier	argw		1015639	1					
ANR	1016545	ExpressionStatement	tmp_r = TMP_REG3	1579:2:49180:49196	1015639	2	True				
ANR	1016546	AssignmentExpression	tmp_r = TMP_REG3		1015639	0		=			
ANR	1016547	Identifier	tmp_r		1015639	0					
ANR	1016548	Identifier	TMP_REG3		1015639	1					
ANR	1016549	ExpressionStatement	"FAIL_IF ( load_immediate ( compiler , tmp_r , argw ) )"	1582:1:49203:49249	1015639	22	True				
ANR	1016550	CallExpression	"FAIL_IF ( load_immediate ( compiler , tmp_r , argw ) )"		1015639	0					
ANR	1016551	Callee	FAIL_IF		1015639	0					
ANR	1016552	Identifier	FAIL_IF		1015639	0					
ANR	1016553	ArgumentList	"load_immediate ( compiler , tmp_r , argw )"		1015639	1					
ANR	1016554	Argument	"load_immediate ( compiler , tmp_r , argw )"		1015639	0					
ANR	1016555	CallExpression	"load_immediate ( compiler , tmp_r , argw )"		1015639	0					
ANR	1016556	Callee	load_immediate		1015639	0					
ANR	1016557	Identifier	load_immediate		1015639	0					
ANR	1016558	ArgumentList	compiler		1015639	1					
ANR	1016559	Argument	compiler		1015639	0					
ANR	1016560	Identifier	compiler		1015639	0					
ANR	1016561	Argument	tmp_r		1015639	1					
ANR	1016562	Identifier	tmp_r		1015639	0					
ANR	1016563	Argument	argw		1015639	2					
ANR	1016564	Identifier	argw		1015639	0					
ANR	1016565	ReturnStatement	"return push_inst ( compiler , EMIT_DATA_TRANSFER ( inp_flags , 1 , inp_flags & WRITE_BACK , reg , arg & REG_MASK , reg_map [ tmp_r ] | ( max_delta & 0xf00 ? SRC2_IMM : 0 ) ) ) ;"	1583:1:49252:49410	1015639	23	True				
ANR	1016566	CallExpression	"push_inst ( compiler , EMIT_DATA_TRANSFER ( inp_flags , 1 , inp_flags & WRITE_BACK , reg , arg & REG_MASK , reg_map [ tmp_r ] | ( max_delta & 0xf00 ? SRC2_IMM : 0 ) ) )"		1015639	0					
ANR	1016567	Callee	push_inst		1015639	0					
ANR	1016568	Identifier	push_inst		1015639	0					
ANR	1016569	ArgumentList	compiler		1015639	1					
ANR	1016570	Argument	compiler		1015639	0					
ANR	1016571	Identifier	compiler		1015639	0					
ANR	1016572	Argument	"EMIT_DATA_TRANSFER ( inp_flags , 1 , inp_flags & WRITE_BACK , reg , arg & REG_MASK , reg_map [ tmp_r ] | ( max_delta & 0xf00 ? SRC2_IMM : 0 ) )"		1015639	1					
ANR	1016573	CallExpression	"EMIT_DATA_TRANSFER ( inp_flags , 1 , inp_flags & WRITE_BACK , reg , arg & REG_MASK , reg_map [ tmp_r ] | ( max_delta & 0xf00 ? SRC2_IMM : 0 ) )"		1015639	0					
ANR	1016574	Callee	EMIT_DATA_TRANSFER		1015639	0					
ANR	1016575	Identifier	EMIT_DATA_TRANSFER		1015639	0					
ANR	1016576	ArgumentList	inp_flags		1015639	1					
ANR	1016577	Argument	inp_flags		1015639	0					
ANR	1016578	Identifier	inp_flags		1015639	0					
ANR	1016579	Argument	1		1015639	1					
ANR	1016580	PrimaryExpression	1		1015639	0					
ANR	1016581	Argument	inp_flags & WRITE_BACK		1015639	2					
ANR	1016582	BitAndExpression	inp_flags & WRITE_BACK		1015639	0		&			
ANR	1016583	Identifier	inp_flags		1015639	0					
ANR	1016584	Identifier	WRITE_BACK		1015639	1					
ANR	1016585	Argument	reg		1015639	3					
ANR	1016586	Identifier	reg		1015639	0					
ANR	1016587	Argument	arg & REG_MASK		1015639	4					
ANR	1016588	BitAndExpression	arg & REG_MASK		1015639	0		&			
ANR	1016589	Identifier	arg		1015639	0					
ANR	1016590	Identifier	REG_MASK		1015639	1					
ANR	1016591	Argument	reg_map [ tmp_r ] | ( max_delta & 0xf00 ? SRC2_IMM : 0 )		1015639	5					
ANR	1016592	InclusiveOrExpression	reg_map [ tmp_r ] | ( max_delta & 0xf00 ? SRC2_IMM : 0 )		1015639	0		|			
ANR	1016593	ArrayIndexing	reg_map [ tmp_r ]		1015639	0					
ANR	1016594	Identifier	reg_map		1015639	0					
ANR	1016595	Identifier	tmp_r		1015639	1					
ANR	1016596	ConditionalExpression	max_delta & 0xf00 ? SRC2_IMM : 0		1015639	1					
ANR	1016597	Condition	max_delta & 0xf00		1015639	0					
ANR	1016598	BitAndExpression	max_delta & 0xf00		1015639	0		&			
ANR	1016599	Identifier	max_delta		1015639	0					
ANR	1016600	PrimaryExpression	0xf00		1015639	1					
ANR	1016601	Identifier	SRC2_IMM		1015639	1					
ANR	1016602	PrimaryExpression	0		1015639	2					
ANR	1016603	ReturnType	static sljit_si		1015639	1					
ANR	1016604	Identifier	getput_arg		1015639	2					
ANR	1016605	ParameterList	"struct sljit_compiler * compiler , sljit_si inp_flags , sljit_si reg , sljit_si arg , sljit_sw argw , sljit_si next_arg , sljit_sw next_argw"		1015639	3					
ANR	1016606	Parameter	struct sljit_compiler * compiler	1459:27:45028:45058	1015639	0	True				
ANR	1016607	ParameterType	struct sljit_compiler *		1015639	0					
ANR	1016608	Identifier	compiler		1015639	1					
ANR	1016609	Parameter	sljit_si inp_flags	1459:60:45061:45078	1015639	1	True				
ANR	1016610	ParameterType	sljit_si		1015639	0					
ANR	1016611	Identifier	inp_flags		1015639	1					
ANR	1016612	Parameter	sljit_si reg	1459:80:45081:45092	1015639	2	True				
ANR	1016613	ParameterType	sljit_si		1015639	0					
ANR	1016614	Identifier	reg		1015639	1					
ANR	1016615	Parameter	sljit_si arg	1459:94:45095:45106	1015639	3	True				
ANR	1016616	ParameterType	sljit_si		1015639	0					
ANR	1016617	Identifier	arg		1015639	1					
ANR	1016618	Parameter	sljit_sw argw	1459:108:45109:45121	1015639	4	True				
ANR	1016619	ParameterType	sljit_sw		1015639	0					
ANR	1016620	Identifier	argw		1015639	1					
ANR	1016621	Parameter	sljit_si next_arg	1459:123:45124:45140	1015639	5	True				
ANR	1016622	ParameterType	sljit_si		1015639	0					
ANR	1016623	Identifier	next_arg		1015639	1					
ANR	1016624	Parameter	sljit_sw next_argw	1459:142:45143:45160	1015639	6	True				
ANR	1016625	ParameterType	sljit_sw		1015639	0					
ANR	1016626	Identifier	next_argw		1015639	1					
ANR	1016627	CFGEntryNode	ENTRY		1015639		True				
ANR	1016628	CFGExitNode	EXIT		1015639		True				
ANR	1016629	Symbol	TMP_REG3		1015639						
ANR	1016630	Symbol	compiler -> cache_argw		1015639						
ANR	1016631	Symbol	* REG_MASK		1015639						
ANR	1016632	Symbol	ADD_DP		1015639						
ANR	1016633	Symbol	LOAD_DATA		1015639						
ANR	1016634	Symbol	SLJIT_MEM		1015639						
ANR	1016635	Symbol	sign		1015639						
ANR	1016636	Symbol	imm		1015639						
ANR	1016637	Symbol	reg_map		1015639						
ANR	1016638	Symbol	inp_flags		1015639						
ANR	1016639	Symbol	* compiler		1015639						
ANR	1016640	Symbol	argw		1015639						
ANR	1016641	Symbol	~max_delta		1015639						
ANR	1016642	Symbol	SLJIT_IMM		1015639						
ANR	1016643	Symbol	load_immediate		1015639						
ANR	1016644	Symbol	reg		1015639						
ANR	1016645	Symbol	arg		1015639						
ANR	1016646	Symbol	SRC2_IMM		1015639						
ANR	1016647	Symbol	compiler		1015639						
ANR	1016648	Symbol	WRITE_BACK		1015639						
ANR	1016649	Symbol	tmp_r		1015639						
ANR	1016650	Symbol	next_arg		1015639						
ANR	1016651	Symbol	push_inst		1015639						
ANR	1016652	Symbol	REG_MASK		1015639						
ANR	1016653	Symbol	* tmp_r		1015639						
ANR	1016654	Symbol	SUB_DP		1015639						
ANR	1016655	Symbol	compiler -> cache_arg		1015639						
ANR	1016656	Symbol	OFFS_REG_MASK		1015639						
ANR	1016657	Symbol	next_argw		1015639						
ANR	1016658	Symbol	SLJIT_SUCCESS		1015639						
ANR	1016659	Symbol	get_imm		1015639						
ANR	1016660	Symbol	* reg_map		1015639						
ANR	1016661	Symbol	max_delta		1015639						
ANR	1016662	Symbol	SLJIT_UNUSED		1015639						
ANR	1016663	Symbol	TYPE2_TRANSFER_IMM		1015639						
ANR	1016664	Symbol	RM		1015639						
ANR	1016665	Symbol	OFFS_REG		1015639						
ANR	1016666	Symbol	IS_TYPE1_TRANSFER		1015639						
ANR	1016667	Symbol	EMIT_DATA_PROCESS_INS		1015639						
ANR	1016668	Symbol	EMIT_DATA_TRANSFER		1015639						
ANR	1016669	Symbol	* arg		1015639						
ANR	1016670	Function	emit_op_mem	1586:0:49415:49743							
ANR	1016671	FunctionDef	"emit_op_mem (struct sljit_compiler * compiler , sljit_si flags , sljit_si reg , sljit_si arg , sljit_sw argw)"		1016670	0					
ANR	1016672	CompoundStatement		1587:0:49548:49743	1016670	0					
ANR	1016673	IfStatement	"if ( getput_arg_fast ( compiler , flags , reg , arg , argw ) )"		1016670	0					
ANR	1016674	Condition	"getput_arg_fast ( compiler , flags , reg , arg , argw )"	1588:5:49555:49602	1016670	0	True				
ANR	1016675	CallExpression	"getput_arg_fast ( compiler , flags , reg , arg , argw )"		1016670	0					
ANR	1016676	Callee	getput_arg_fast		1016670	0					
ANR	1016677	Identifier	getput_arg_fast		1016670	0					
ANR	1016678	ArgumentList	compiler		1016670	1					
ANR	1016679	Argument	compiler		1016670	0					
ANR	1016680	Identifier	compiler		1016670	0					
ANR	1016681	Argument	flags		1016670	1					
ANR	1016682	Identifier	flags		1016670	0					
ANR	1016683	Argument	reg		1016670	2					
ANR	1016684	Identifier	reg		1016670	0					
ANR	1016685	Argument	arg		1016670	3					
ANR	1016686	Identifier	arg		1016670	0					
ANR	1016687	Argument	argw		1016670	4					
ANR	1016688	Identifier	argw		1016670	0					
ANR	1016689	ReturnStatement	return compiler -> error ;	1589:2:49607:49629	1016670	1	True				
ANR	1016690	PtrMemberAccess	compiler -> error		1016670	0					
ANR	1016691	Identifier	compiler		1016670	0					
ANR	1016692	Identifier	error		1016670	1					
ANR	1016693	ExpressionStatement	compiler -> cache_arg = 0	1590:1:49632:49655	1016670	1	True				
ANR	1016694	AssignmentExpression	compiler -> cache_arg = 0		1016670	0		=			
ANR	1016695	PtrMemberAccess	compiler -> cache_arg		1016670	0					
ANR	1016696	Identifier	compiler		1016670	0					
ANR	1016697	Identifier	cache_arg		1016670	1					
ANR	1016698	PrimaryExpression	0		1016670	1					
ANR	1016699	ExpressionStatement	compiler -> cache_argw = 0	1591:1:49658:49682	1016670	2	True				
ANR	1016700	AssignmentExpression	compiler -> cache_argw = 0		1016670	0		=			
ANR	1016701	PtrMemberAccess	compiler -> cache_argw		1016670	0					
ANR	1016702	Identifier	compiler		1016670	0					
ANR	1016703	Identifier	cache_argw		1016670	1					
ANR	1016704	PrimaryExpression	0		1016670	1					
ANR	1016705	ReturnStatement	"return getput_arg ( compiler , flags , reg , arg , argw , 0 , 0 ) ;"	1592:1:49685:49741	1016670	3	True				
ANR	1016706	CallExpression	"getput_arg ( compiler , flags , reg , arg , argw , 0 , 0 )"		1016670	0					
ANR	1016707	Callee	getput_arg		1016670	0					
ANR	1016708	Identifier	getput_arg		1016670	0					
ANR	1016709	ArgumentList	compiler		1016670	1					
ANR	1016710	Argument	compiler		1016670	0					
ANR	1016711	Identifier	compiler		1016670	0					
ANR	1016712	Argument	flags		1016670	1					
ANR	1016713	Identifier	flags		1016670	0					
ANR	1016714	Argument	reg		1016670	2					
ANR	1016715	Identifier	reg		1016670	0					
ANR	1016716	Argument	arg		1016670	3					
ANR	1016717	Identifier	arg		1016670	0					
ANR	1016718	Argument	argw		1016670	4					
ANR	1016719	Identifier	argw		1016670	0					
ANR	1016720	Argument	0		1016670	5					
ANR	1016721	PrimaryExpression	0		1016670	0					
ANR	1016722	Argument	0		1016670	6					
ANR	1016723	PrimaryExpression	0		1016670	0					
ANR	1016724	ReturnType	static SLJIT_INLINE sljit_si		1016670	1					
ANR	1016725	Identifier	emit_op_mem		1016670	2					
ANR	1016726	ParameterList	"struct sljit_compiler * compiler , sljit_si flags , sljit_si reg , sljit_si arg , sljit_sw argw"		1016670	3					
ANR	1016727	Parameter	struct sljit_compiler * compiler	1586:41:49456:49486	1016670	0	True				
ANR	1016728	ParameterType	struct sljit_compiler *		1016670	0					
ANR	1016729	Identifier	compiler		1016670	1					
ANR	1016730	Parameter	sljit_si flags	1586:74:49489:49502	1016670	1	True				
ANR	1016731	ParameterType	sljit_si		1016670	0					
ANR	1016732	Identifier	flags		1016670	1					
ANR	1016733	Parameter	sljit_si reg	1586:90:49505:49516	1016670	2	True				
ANR	1016734	ParameterType	sljit_si		1016670	0					
ANR	1016735	Identifier	reg		1016670	1					
ANR	1016736	Parameter	sljit_si arg	1586:104:49519:49530	1016670	3	True				
ANR	1016737	ParameterType	sljit_si		1016670	0					
ANR	1016738	Identifier	arg		1016670	1					
ANR	1016739	Parameter	sljit_sw argw	1586:118:49533:49545	1016670	4	True				
ANR	1016740	ParameterType	sljit_sw		1016670	0					
ANR	1016741	Identifier	argw		1016670	1					
ANR	1016742	CFGEntryNode	ENTRY		1016670		True				
ANR	1016743	CFGExitNode	EXIT		1016670		True				
ANR	1016744	Symbol	compiler -> cache_argw		1016670						
ANR	1016745	Symbol	getput_arg		1016670						
ANR	1016746	Symbol	reg		1016670						
ANR	1016747	Symbol	compiler -> cache_arg		1016670						
ANR	1016748	Symbol	arg		1016670						
ANR	1016749	Symbol	flags		1016670						
ANR	1016750	Symbol	* compiler		1016670						
ANR	1016751	Symbol	compiler		1016670						
ANR	1016752	Symbol	argw		1016670						
ANR	1016753	Symbol	getput_arg_fast		1016670						
ANR	1016754	Symbol	compiler -> error		1016670						
ANR	1016755	Function	emit_op_mem2	1595:0:49746:50066							
ANR	1016756	FunctionDef	"emit_op_mem2 (struct sljit_compiler * compiler , sljit_si flags , sljit_si reg , sljit_si arg1 , sljit_sw arg1w , sljit_si arg2 , sljit_sw arg2w)"		1016755	0					
ANR	1016757	CompoundStatement		1596:0:49913:50066	1016755	0					
ANR	1016758	IfStatement	"if ( getput_arg_fast ( compiler , flags , reg , arg1 , arg1w ) )"		1016755	0					
ANR	1016759	Condition	"getput_arg_fast ( compiler , flags , reg , arg1 , arg1w )"	1597:5:49920:49969	1016755	0	True				
ANR	1016760	CallExpression	"getput_arg_fast ( compiler , flags , reg , arg1 , arg1w )"		1016755	0					
ANR	1016761	Callee	getput_arg_fast		1016755	0					
ANR	1016762	Identifier	getput_arg_fast		1016755	0					
ANR	1016763	ArgumentList	compiler		1016755	1					
ANR	1016764	Argument	compiler		1016755	0					
ANR	1016765	Identifier	compiler		1016755	0					
ANR	1016766	Argument	flags		1016755	1					
ANR	1016767	Identifier	flags		1016755	0					
ANR	1016768	Argument	reg		1016755	2					
ANR	1016769	Identifier	reg		1016755	0					
ANR	1016770	Argument	arg1		1016755	3					
ANR	1016771	Identifier	arg1		1016755	0					
ANR	1016772	Argument	arg1w		1016755	4					
ANR	1016773	Identifier	arg1w		1016755	0					
ANR	1016774	ReturnStatement	return compiler -> error ;	1598:2:49974:49996	1016755	1	True				
ANR	1016775	PtrMemberAccess	compiler -> error		1016755	0					
ANR	1016776	Identifier	compiler		1016755	0					
ANR	1016777	Identifier	error		1016755	1					
ANR	1016778	ReturnStatement	"return getput_arg ( compiler , flags , reg , arg1 , arg1w , arg2 , arg2w ) ;"	1599:1:49999:50064	1016755	1	True				
ANR	1016779	CallExpression	"getput_arg ( compiler , flags , reg , arg1 , arg1w , arg2 , arg2w )"		1016755	0					
ANR	1016780	Callee	getput_arg		1016755	0					
ANR	1016781	Identifier	getput_arg		1016755	0					
ANR	1016782	ArgumentList	compiler		1016755	1					
ANR	1016783	Argument	compiler		1016755	0					
ANR	1016784	Identifier	compiler		1016755	0					
ANR	1016785	Argument	flags		1016755	1					
ANR	1016786	Identifier	flags		1016755	0					
ANR	1016787	Argument	reg		1016755	2					
ANR	1016788	Identifier	reg		1016755	0					
ANR	1016789	Argument	arg1		1016755	3					
ANR	1016790	Identifier	arg1		1016755	0					
ANR	1016791	Argument	arg1w		1016755	4					
ANR	1016792	Identifier	arg1w		1016755	0					
ANR	1016793	Argument	arg2		1016755	5					
ANR	1016794	Identifier	arg2		1016755	0					
ANR	1016795	Argument	arg2w		1016755	6					
ANR	1016796	Identifier	arg2w		1016755	0					
ANR	1016797	ReturnType	static SLJIT_INLINE sljit_si		1016755	1					
ANR	1016798	Identifier	emit_op_mem2		1016755	2					
ANR	1016799	ParameterList	"struct sljit_compiler * compiler , sljit_si flags , sljit_si reg , sljit_si arg1 , sljit_sw arg1w , sljit_si arg2 , sljit_sw arg2w"		1016755	3					
ANR	1016800	Parameter	struct sljit_compiler * compiler	1595:42:49788:49818	1016755	0	True				
ANR	1016801	ParameterType	struct sljit_compiler *		1016755	0					
ANR	1016802	Identifier	compiler		1016755	1					
ANR	1016803	Parameter	sljit_si flags	1595:75:49821:49834	1016755	1	True				
ANR	1016804	ParameterType	sljit_si		1016755	0					
ANR	1016805	Identifier	flags		1016755	1					
ANR	1016806	Parameter	sljit_si reg	1595:91:49837:49848	1016755	2	True				
ANR	1016807	ParameterType	sljit_si		1016755	0					
ANR	1016808	Identifier	reg		1016755	1					
ANR	1016809	Parameter	sljit_si arg1	1595:105:49851:49863	1016755	3	True				
ANR	1016810	ParameterType	sljit_si		1016755	0					
ANR	1016811	Identifier	arg1		1016755	1					
ANR	1016812	Parameter	sljit_sw arg1w	1595:120:49866:49879	1016755	4	True				
ANR	1016813	ParameterType	sljit_sw		1016755	0					
ANR	1016814	Identifier	arg1w		1016755	1					
ANR	1016815	Parameter	sljit_si arg2	1595:136:49882:49894	1016755	5	True				
ANR	1016816	ParameterType	sljit_si		1016755	0					
ANR	1016817	Identifier	arg2		1016755	1					
ANR	1016818	Parameter	sljit_sw arg2w	1595:151:49897:49910	1016755	6	True				
ANR	1016819	ParameterType	sljit_sw		1016755	0					
ANR	1016820	Identifier	arg2w		1016755	1					
ANR	1016821	CFGEntryNode	ENTRY		1016755		True				
ANR	1016822	CFGExitNode	EXIT		1016755		True				
ANR	1016823	Symbol	arg1w		1016755						
ANR	1016824	Symbol	arg2		1016755						
ANR	1016825	Symbol	getput_arg		1016755						
ANR	1016826	Symbol	reg		1016755						
ANR	1016827	Symbol	arg1		1016755						
ANR	1016828	Symbol	arg2w		1016755						
ANR	1016829	Symbol	flags		1016755						
ANR	1016830	Symbol	* compiler		1016755						
ANR	1016831	Symbol	compiler		1016755						
ANR	1016832	Symbol	getput_arg_fast		1016755						
ANR	1016833	Symbol	compiler -> error		1016755						
ANR	1016834	Function	emit_op	1602:0:50069:55234							
ANR	1016835	FunctionDef	"emit_op (struct sljit_compiler * compiler , sljit_si op , sljit_si inp_flags , sljit_si dst , sljit_sw dstw , sljit_si src1 , sljit_sw src1w , sljit_si src2 , sljit_sw src2w)"		1016834	0					
ANR	1016836	CompoundStatement		1606:0:50253:55234	1016834	0					
ANR	1016837	IdentifierDeclStatement	sljit_si dst_r ;	1613:1:50496:50510	1016834	0	True				
ANR	1016838	IdentifierDecl	dst_r		1016834	0					
ANR	1016839	IdentifierDeclType	sljit_si		1016834	0					
ANR	1016840	Identifier	dst_r		1016834	1					
ANR	1016841	IdentifierDeclStatement	sljit_si src1_r ;	1614:1:50513:50528	1016834	1	True				
ANR	1016842	IdentifierDecl	src1_r		1016834	0					
ANR	1016843	IdentifierDeclType	sljit_si		1016834	0					
ANR	1016844	Identifier	src1_r		1016834	1					
ANR	1016845	IdentifierDeclStatement	sljit_si src2_r = 0 ;	1615:1:50531:50550	1016834	2	True				
ANR	1016846	IdentifierDecl	src2_r = 0		1016834	0					
ANR	1016847	IdentifierDeclType	sljit_si		1016834	0					
ANR	1016848	Identifier	src2_r		1016834	1					
ANR	1016849	AssignmentExpression	src2_r = 0		1016834	2		=			
ANR	1016850	Identifier	src2_r		1016834	0					
ANR	1016851	PrimaryExpression	0		1016834	1					
ANR	1016852	IdentifierDeclStatement	sljit_si sugg_src2_r = TMP_REG2 ;	1616:1:50553:50584	1016834	3	True				
ANR	1016853	IdentifierDecl	sugg_src2_r = TMP_REG2		1016834	0					
ANR	1016854	IdentifierDeclType	sljit_si		1016834	0					
ANR	1016855	Identifier	sugg_src2_r		1016834	1					
ANR	1016856	AssignmentExpression	sugg_src2_r = TMP_REG2		1016834	2		=			
ANR	1016857	Identifier	TMP_REG2		1016834	0					
ANR	1016858	Identifier	TMP_REG2		1016834	1					
ANR	1016859	IdentifierDeclStatement	sljit_si flags = GET_FLAGS ( op ) ? SET_FLAGS : 0 ;	1617:1:50587:50633	1016834	4	True				
ANR	1016860	IdentifierDecl	flags = GET_FLAGS ( op ) ? SET_FLAGS : 0		1016834	0					
ANR	1016861	IdentifierDeclType	sljit_si		1016834	0					
ANR	1016862	Identifier	flags		1016834	1					
ANR	1016863	AssignmentExpression	flags = GET_FLAGS ( op ) ? SET_FLAGS : 0		1016834	2		=			
ANR	1016864	Identifier	flags		1016834	0					
ANR	1016865	ConditionalExpression	GET_FLAGS ( op ) ? SET_FLAGS : 0		1016834	1					
ANR	1016866	Condition	GET_FLAGS ( op )		1016834	0					
ANR	1016867	CallExpression	GET_FLAGS ( op )		1016834	0					
ANR	1016868	Callee	GET_FLAGS		1016834	0					
ANR	1016869	Identifier	GET_FLAGS		1016834	0					
ANR	1016870	ArgumentList	op		1016834	1					
ANR	1016871	Argument	op		1016834	0					
ANR	1016872	Identifier	op		1016834	0					
ANR	1016873	Identifier	SET_FLAGS		1016834	1					
ANR	1016874	PrimaryExpression	0		1016834	2					
ANR	1016875	ExpressionStatement	compiler -> cache_arg = 0	1619:1:50637:50660	1016834	5	True				
ANR	1016876	AssignmentExpression	compiler -> cache_arg = 0		1016834	0		=			
ANR	1016877	PtrMemberAccess	compiler -> cache_arg		1016834	0					
ANR	1016878	Identifier	compiler		1016834	0					
ANR	1016879	Identifier	cache_arg		1016834	1					
ANR	1016880	PrimaryExpression	0		1016834	1					
ANR	1016881	ExpressionStatement	compiler -> cache_argw = 0	1620:1:50663:50687	1016834	6	True				
ANR	1016882	AssignmentExpression	compiler -> cache_argw = 0		1016834	0		=			
ANR	1016883	PtrMemberAccess	compiler -> cache_argw		1016834	0					
ANR	1016884	Identifier	compiler		1016834	0					
ANR	1016885	Identifier	cache_argw		1016834	1					
ANR	1016886	PrimaryExpression	0		1016834	1					
ANR	1016887	IfStatement	if ( SLJIT_UNLIKELY ( dst == SLJIT_UNUSED ) )		1016834	7					
ANR	1016888	Condition	SLJIT_UNLIKELY ( dst == SLJIT_UNUSED )	1623:5:50721:50755	1016834	0	True				
ANR	1016889	CallExpression	SLJIT_UNLIKELY ( dst == SLJIT_UNUSED )		1016834	0					
ANR	1016890	Callee	SLJIT_UNLIKELY		1016834	0					
ANR	1016891	Identifier	SLJIT_UNLIKELY		1016834	0					
ANR	1016892	ArgumentList	dst == SLJIT_UNUSED		1016834	1					
ANR	1016893	Argument	dst == SLJIT_UNUSED		1016834	0					
ANR	1016894	EqualityExpression	dst == SLJIT_UNUSED		1016834	0		==			
ANR	1016895	Identifier	dst		1016834	0					
ANR	1016896	Identifier	SLJIT_UNUSED		1016834	1					
ANR	1016897	CompoundStatement		18:42:504:504	1016834	1					
ANR	1016898	IfStatement	if ( op >= SLJIT_MOV && op <= SLJIT_MOVU_SI && ! ( src2 & SLJIT_MEM ) )		1016834	0					
ANR	1016899	Condition	op >= SLJIT_MOV && op <= SLJIT_MOVU_SI && ! ( src2 & SLJIT_MEM )	1624:6:50766:50826	1016834	0	True				
ANR	1016900	AndExpression	op >= SLJIT_MOV && op <= SLJIT_MOVU_SI && ! ( src2 & SLJIT_MEM )		1016834	0		&&			
ANR	1016901	RelationalExpression	op >= SLJIT_MOV		1016834	0		>=			
ANR	1016902	Identifier	op		1016834	0					
ANR	1016903	Identifier	SLJIT_MOV		1016834	1					
ANR	1016904	AndExpression	op <= SLJIT_MOVU_SI && ! ( src2 & SLJIT_MEM )		1016834	1		&&			
ANR	1016905	RelationalExpression	op <= SLJIT_MOVU_SI		1016834	0		<=			
ANR	1016906	Identifier	op		1016834	0					
ANR	1016907	Identifier	SLJIT_MOVU_SI		1016834	1					
ANR	1016908	UnaryOperationExpression	! ( src2 & SLJIT_MEM )		1016834	1					
ANR	1016909	UnaryOperator	!		1016834	0					
ANR	1016910	BitAndExpression	src2 & SLJIT_MEM		1016834	1		&			
ANR	1016911	Identifier	src2		1016834	0					
ANR	1016912	Identifier	SLJIT_MEM		1016834	1					
ANR	1016913	ReturnStatement	return SLJIT_SUCCESS ;	1625:3:50832:50852	1016834	1	True				
ANR	1016914	Identifier	SLJIT_SUCCESS		1016834	0					
ANR	1016915	ExpressionStatement	dst_r = TMP_REG2	1626:2:50856:50872	1016834	1	True				
ANR	1016916	AssignmentExpression	dst_r = TMP_REG2		1016834	0		=			
ANR	1016917	Identifier	dst_r		1016834	0					
ANR	1016918	Identifier	TMP_REG2		1016834	1					
ANR	1016919	ElseStatement	else		1016834	0					
ANR	1016920	IfStatement	if ( FAST_IS_REG ( dst ) )		1016834	0					
ANR	1016921	Condition	FAST_IS_REG ( dst )	1628:10:50887:50902	1016834	0	True				
ANR	1016922	CallExpression	FAST_IS_REG ( dst )		1016834	0					
ANR	1016923	Callee	FAST_IS_REG		1016834	0					
ANR	1016924	Identifier	FAST_IS_REG		1016834	0					
ANR	1016925	ArgumentList	dst		1016834	1					
ANR	1016926	Argument	dst		1016834	0					
ANR	1016927	Identifier	dst		1016834	0					
ANR	1016928	CompoundStatement		23:28:651:651	1016834	1					
ANR	1016929	ExpressionStatement	dst_r = dst	1629:2:50909:50920	1016834	0	True				
ANR	1016930	AssignmentExpression	dst_r = dst		1016834	0		=			
ANR	1016931	Identifier	dst_r		1016834	0					
ANR	1016932	Identifier	dst		1016834	1					
ANR	1016933	ExpressionStatement	flags |= REG_DEST	1630:2:50924:50941	1016834	1	True				
ANR	1016934	AssignmentExpression	flags |= REG_DEST		1016834	0		|=			
ANR	1016935	Identifier	flags		1016834	0					
ANR	1016936	Identifier	REG_DEST		1016834	1					
ANR	1016937	IfStatement	if ( op >= SLJIT_MOV && op <= SLJIT_MOVU_SI )		1016834	2					
ANR	1016938	Condition	op >= SLJIT_MOV && op <= SLJIT_MOVU_SI	1631:6:50949:50986	1016834	0	True				
ANR	1016939	AndExpression	op >= SLJIT_MOV && op <= SLJIT_MOVU_SI		1016834	0		&&			
ANR	1016940	RelationalExpression	op >= SLJIT_MOV		1016834	0		>=			
ANR	1016941	Identifier	op		1016834	0					
ANR	1016942	Identifier	SLJIT_MOV		1016834	1					
ANR	1016943	RelationalExpression	op <= SLJIT_MOVU_SI		1016834	1		<=			
ANR	1016944	Identifier	op		1016834	0					
ANR	1016945	Identifier	SLJIT_MOVU_SI		1016834	1					
ANR	1016946	ExpressionStatement	sugg_src2_r = dst_r	1632:3:50992:51011	1016834	1	True				
ANR	1016947	AssignmentExpression	sugg_src2_r = dst_r		1016834	0		=			
ANR	1016948	Identifier	sugg_src2_r		1016834	0					
ANR	1016949	Identifier	dst_r		1016834	1					
ANR	1016950	ElseStatement	else		1016834	0					
ANR	1016951	CompoundStatement		29:6:768:768	1016834	0					
ANR	1016952	ExpressionStatement	SLJIT_ASSERT ( dst & SLJIT_MEM )	1635:2:51026:51055	1016834	0	True				
ANR	1016953	CallExpression	SLJIT_ASSERT ( dst & SLJIT_MEM )		1016834	0					
ANR	1016954	Callee	SLJIT_ASSERT		1016834	0					
ANR	1016955	Identifier	SLJIT_ASSERT		1016834	0					
ANR	1016956	ArgumentList	dst & SLJIT_MEM		1016834	1					
ANR	1016957	Argument	dst & SLJIT_MEM		1016834	0					
ANR	1016958	BitAndExpression	dst & SLJIT_MEM		1016834	0		&			
ANR	1016959	Identifier	dst		1016834	0					
ANR	1016960	Identifier	SLJIT_MEM		1016834	1					
ANR	1016961	IfStatement	"if ( getput_arg_fast ( compiler , inp_flags | ARG_TEST , TMP_REG2 , dst , dstw ) )"		1016834	1					
ANR	1016962	Condition	"getput_arg_fast ( compiler , inp_flags | ARG_TEST , TMP_REG2 , dst , dstw )"	1636:6:51063:51130	1016834	0	True				
ANR	1016963	CallExpression	"getput_arg_fast ( compiler , inp_flags | ARG_TEST , TMP_REG2 , dst , dstw )"		1016834	0					
ANR	1016964	Callee	getput_arg_fast		1016834	0					
ANR	1016965	Identifier	getput_arg_fast		1016834	0					
ANR	1016966	ArgumentList	compiler		1016834	1					
ANR	1016967	Argument	compiler		1016834	0					
ANR	1016968	Identifier	compiler		1016834	0					
ANR	1016969	Argument	inp_flags | ARG_TEST		1016834	1					
ANR	1016970	InclusiveOrExpression	inp_flags | ARG_TEST		1016834	0		|			
ANR	1016971	Identifier	inp_flags		1016834	0					
ANR	1016972	Identifier	ARG_TEST		1016834	1					
ANR	1016973	Argument	TMP_REG2		1016834	2					
ANR	1016974	Identifier	TMP_REG2		1016834	0					
ANR	1016975	Argument	dst		1016834	3					
ANR	1016976	Identifier	dst		1016834	0					
ANR	1016977	Argument	dstw		1016834	4					
ANR	1016978	Identifier	dstw		1016834	0					
ANR	1016979	CompoundStatement		31:76:879:879	1016834	1					
ANR	1016980	ExpressionStatement	flags |= FAST_DEST	1637:3:51138:51156	1016834	0	True				
ANR	1016981	AssignmentExpression	flags |= FAST_DEST		1016834	0		|=			
ANR	1016982	Identifier	flags		1016834	0					
ANR	1016983	Identifier	FAST_DEST		1016834	1					
ANR	1016984	ExpressionStatement	dst_r = TMP_REG2	1638:3:51161:51177	1016834	1	True				
ANR	1016985	AssignmentExpression	dst_r = TMP_REG2		1016834	0		=			
ANR	1016986	Identifier	dst_r		1016834	0					
ANR	1016987	Identifier	TMP_REG2		1016834	1					
ANR	1016988	ElseStatement	else		1016834	0					
ANR	1016989	CompoundStatement		35:7:936:936	1016834	0					
ANR	1016990	ExpressionStatement	flags |= SLOW_DEST	1641:3:51195:51213	1016834	0	True				
ANR	1016991	AssignmentExpression	flags |= SLOW_DEST		1016834	0		|=			
ANR	1016992	Identifier	flags		1016834	0					
ANR	1016993	Identifier	SLOW_DEST		1016834	1					
ANR	1016994	ExpressionStatement	dst_r = 0	1642:3:51218:51227	1016834	1	True				
ANR	1016995	AssignmentExpression	dst_r = 0		1016834	0		=			
ANR	1016996	Identifier	dst_r		1016834	0					
ANR	1016997	PrimaryExpression	0		1016834	1					
ANR	1016998	IfStatement	if ( FAST_IS_REG ( src1 ) )		1016834	8					
ANR	1016999	Condition	FAST_IS_REG ( src1 )	1647:5:51259:51275	1016834	0	True				
ANR	1017000	CallExpression	FAST_IS_REG ( src1 )		1016834	0					
ANR	1017001	Callee	FAST_IS_REG		1016834	0					
ANR	1017002	Identifier	FAST_IS_REG		1016834	0					
ANR	1017003	ArgumentList	src1		1016834	1					
ANR	1017004	Argument	src1		1016834	0					
ANR	1017005	Identifier	src1		1016834	0					
ANR	1017006	ExpressionStatement	src1_r = src1	1648:2:51280:51293	1016834	1	True				
ANR	1017007	AssignmentExpression	src1_r = src1		1016834	0		=			
ANR	1017008	Identifier	src1_r		1016834	0					
ANR	1017009	Identifier	src1		1016834	1					
ANR	1017010	ElseStatement	else		1016834	0					
ANR	1017011	IfStatement	if ( FAST_IS_REG ( src2 ) )		1016834	0					
ANR	1017012	Condition	FAST_IS_REG ( src2 )	1649:10:51305:51321	1016834	0	True				
ANR	1017013	CallExpression	FAST_IS_REG ( src2 )		1016834	0					
ANR	1017014	Callee	FAST_IS_REG		1016834	0					
ANR	1017015	Identifier	FAST_IS_REG		1016834	0					
ANR	1017016	ArgumentList	src2		1016834	1					
ANR	1017017	Argument	src2		1016834	0					
ANR	1017018	Identifier	src2		1016834	0					
ANR	1017019	CompoundStatement		44:29:1070:1070	1016834	1					
ANR	1017020	ExpressionStatement	flags |= ARGS_SWAPPED	1650:2:51328:51349	1016834	0	True				
ANR	1017021	AssignmentExpression	flags |= ARGS_SWAPPED		1016834	0		|=			
ANR	1017022	Identifier	flags		1016834	0					
ANR	1017023	Identifier	ARGS_SWAPPED		1016834	1					
ANR	1017024	ExpressionStatement	src1_r = src2	1651:2:51353:51366	1016834	1	True				
ANR	1017025	AssignmentExpression	src1_r = src2		1016834	0		=			
ANR	1017026	Identifier	src1_r		1016834	0					
ANR	1017027	Identifier	src2		1016834	1					
ANR	1017028	ExpressionStatement	src2 = src1	1652:2:51370:51381	1016834	2	True				
ANR	1017029	AssignmentExpression	src2 = src1		1016834	0		=			
ANR	1017030	Identifier	src2		1016834	0					
ANR	1017031	Identifier	src1		1016834	1					
ANR	1017032	ExpressionStatement	src2w = src1w	1653:2:51385:51398	1016834	3	True				
ANR	1017033	AssignmentExpression	src2w = src1w		1016834	0		=			
ANR	1017034	Identifier	src2w		1016834	0					
ANR	1017035	Identifier	src1w		1016834	1					
ANR	1017036	ReturnType	static sljit_si		1016834	1					
ANR	1017037	Identifier	emit_op		1016834	2					
ANR	1017038	ParameterList	"struct sljit_compiler * compiler , sljit_si op , sljit_si inp_flags , sljit_si dst , sljit_sw dstw , sljit_si src1 , sljit_sw src1w , sljit_si src2 , sljit_sw src2w"		1016834	3					
ANR	1017039	Parameter	struct sljit_compiler * compiler	1602:24:50093:50123	1016834	0	True				
ANR	1017040	ParameterType	struct sljit_compiler *		1016834	0					
ANR	1017041	Identifier	compiler		1016834	1					
ANR	1017042	Parameter	sljit_si op	1602:57:50126:50136	1016834	1	True				
ANR	1017043	ParameterType	sljit_si		1016834	0					
ANR	1017044	Identifier	op		1016834	1					
ANR	1017045	Parameter	sljit_si inp_flags	1602:70:50139:50156	1016834	2	True				
ANR	1017046	ParameterType	sljit_si		1016834	0					
ANR	1017047	Identifier	inp_flags		1016834	1					
ANR	1017048	Parameter	sljit_si dst	1603:1:50160:50171	1016834	3	True				
ANR	1017049	ParameterType	sljit_si		1016834	0					
ANR	1017050	Identifier	dst		1016834	1					
ANR	1017051	Parameter	sljit_sw dstw	1603:15:50174:50186	1016834	4	True				
ANR	1017052	ParameterType	sljit_sw		1016834	0					
ANR	1017053	Identifier	dstw		1016834	1					
ANR	1017054	Parameter	sljit_si src1	1604:1:50190:50202	1016834	5	True				
ANR	1017055	ParameterType	sljit_si		1016834	0					
ANR	1017056	Identifier	src1		1016834	1					
ANR	1017057	Parameter	sljit_sw src1w	1604:16:50205:50218	1016834	6	True				
ANR	1017058	ParameterType	sljit_sw		1016834	0					
ANR	1017059	Identifier	src1w		1016834	1					
ANR	1017060	Parameter	sljit_si src2	1605:1:50222:50234	1016834	7	True				
ANR	1017061	ParameterType	sljit_si		1016834	0					
ANR	1017062	Identifier	src2		1016834	1					
ANR	1017063	Parameter	sljit_sw src2w	1605:16:50237:50250	1016834	8	True				
ANR	1017064	ParameterType	sljit_sw		1016834	0					
ANR	1017065	Identifier	src2w		1016834	1					
ANR	1017066	CFGEntryNode	ENTRY		1016834		True				
ANR	1017067	CFGExitNode	EXIT		1016834		True				
ANR	1017068	Symbol	TMP_REG2		1016834						
ANR	1017069	Symbol	compiler -> cache_argw		1016834						
ANR	1017070	Symbol	src1w		1016834						
ANR	1017071	Symbol	dst		1016834						
ANR	1017072	Symbol	SLJIT_MOV		1016834						
ANR	1017073	Symbol	SLOW_DEST		1016834						
ANR	1017074	Symbol	SLJIT_MEM		1016834						
ANR	1017075	Symbol	flags		1016834						
ANR	1017076	Symbol	inp_flags		1016834						
ANR	1017077	Symbol	SLJIT_MOVU_SI		1016834						
ANR	1017078	Symbol	* compiler		1016834						
ANR	1017079	Symbol	sugg_src2_r		1016834						
ANR	1017080	Symbol	ARG_TEST		1016834						
ANR	1017081	Symbol	dst_r		1016834						
ANR	1017082	Symbol	GET_FLAGS		1016834						
ANR	1017083	Symbol	ARGS_SWAPPED		1016834						
ANR	1017084	Symbol	compiler		1016834						
ANR	1017085	Symbol	FAST_DEST		1016834						
ANR	1017086	Symbol	src2w		1016834						
ANR	1017087	Symbol	op		1016834						
ANR	1017088	Symbol	FAST_IS_REG		1016834						
ANR	1017089	Symbol	compiler -> cache_arg		1016834						
ANR	1017090	Symbol	SLJIT_SUCCESS		1016834						
ANR	1017091	Symbol	SET_FLAGS		1016834						
ANR	1017092	Symbol	src2_r		1016834						
ANR	1017093	Symbol	src1_r		1016834						
ANR	1017094	Symbol	SLJIT_UNUSED		1016834						
ANR	1017095	Symbol	src1		1016834						
ANR	1017096	Symbol	src2		1016834						
ANR	1017097	Symbol	REG_DEST		1016834						
ANR	1017098	Symbol	getput_arg_fast		1016834						
ANR	1017099	Symbol	dstw		1016834						
ANR	1017100	Symbol	SLJIT_UNLIKELY		1016834						
ANR	1017101	DeclStmt									
ANR	1017102	Decl							unsigned int	"unsigned int ( unsigned int numerator , unsigned int denominator )"	__aeabi_uidivmod
ANR	1017103	DeclStmt									
ANR	1017104	Decl							extern int	"extern int ( int numerator , int denominator )"	__aeabi_idivmod
ANR	1017105	Function	sljit_emit_op0	1807:0:55536:57776							
ANR	1017106	FunctionDef	"sljit_emit_op0 (struct sljit_compiler * compiler , sljit_si op)"		1017105	0					
ANR	1017107	CompoundStatement		1808:0:55631:57776	1017105	0					
ANR	1017108	ExpressionStatement	CHECK_ERROR ( )	1809:1:55634:55647	1017105	0	True				
ANR	1017109	CallExpression	CHECK_ERROR ( )		1017105	0					
ANR	1017110	Callee	CHECK_ERROR		1017105	0					
ANR	1017111	Identifier	CHECK_ERROR		1017105	0					
ANR	1017112	ArgumentList			1017105	1					
ANR	1017113	ExpressionStatement	"CHECK ( check_sljit_emit_op0 ( compiler , op ) )"	1810:1:55650:55691	1017105	1	True				
ANR	1017114	CallExpression	"CHECK ( check_sljit_emit_op0 ( compiler , op ) )"		1017105	0					
ANR	1017115	Callee	CHECK		1017105	0					
ANR	1017116	Identifier	CHECK		1017105	0					
ANR	1017117	ArgumentList	"check_sljit_emit_op0 ( compiler , op )"		1017105	1					
ANR	1017118	Argument	"check_sljit_emit_op0 ( compiler , op )"		1017105	0					
ANR	1017119	CallExpression	"check_sljit_emit_op0 ( compiler , op )"		1017105	0					
ANR	1017120	Callee	check_sljit_emit_op0		1017105	0					
ANR	1017121	Identifier	check_sljit_emit_op0		1017105	0					
ANR	1017122	ArgumentList	compiler		1017105	1					
ANR	1017123	Argument	compiler		1017105	0					
ANR	1017124	Identifier	compiler		1017105	0					
ANR	1017125	Argument	op		1017105	1					
ANR	1017126	Identifier	op		1017105	0					
ANR	1017127	ExpressionStatement	op = GET_OPCODE ( op )	1812:1:55695:55714	1017105	2	True				
ANR	1017128	AssignmentExpression	op = GET_OPCODE ( op )		1017105	0		=			
ANR	1017129	Identifier	op		1017105	0					
ANR	1017130	CallExpression	GET_OPCODE ( op )		1017105	1					
ANR	1017131	Callee	GET_OPCODE		1017105	0					
ANR	1017132	Identifier	GET_OPCODE		1017105	0					
ANR	1017133	ArgumentList	op		1017105	1					
ANR	1017134	Argument	op		1017105	0					
ANR	1017135	Identifier	op		1017105	0					
ANR	1017136	SwitchStatement	switch ( op )		1017105	3					
ANR	1017137	Condition	op	1813:9:55725:55726	1017105	0	True				
ANR	1017138	Identifier	op		1017105	0					
ANR	1017139	CompoundStatement		6:13:97:97	1017105	1					
ANR	1017140	Label	case SLJIT_BREAKPOINT :	1814:1:55732:55753	1017105	0	True				
ANR	1017141	Identifier	SLJIT_BREAKPOINT		1017105	0					
ANR	1017142	ExpressionStatement	"FAIL_IF ( push_inst ( compiler , BKPT ) )"	1815:2:55757:55791	1017105	1	True				
ANR	1017143	CallExpression	"FAIL_IF ( push_inst ( compiler , BKPT ) )"		1017105	0					
ANR	1017144	Callee	FAIL_IF		1017105	0					
ANR	1017145	Identifier	FAIL_IF		1017105	0					
ANR	1017146	ArgumentList	"push_inst ( compiler , BKPT )"		1017105	1					
ANR	1017147	Argument	"push_inst ( compiler , BKPT )"		1017105	0					
ANR	1017148	CallExpression	"push_inst ( compiler , BKPT )"		1017105	0					
ANR	1017149	Callee	push_inst		1017105	0					
ANR	1017150	Identifier	push_inst		1017105	0					
ANR	1017151	ArgumentList	compiler		1017105	1					
ANR	1017152	Argument	compiler		1017105	0					
ANR	1017153	Identifier	compiler		1017105	0					
ANR	1017154	Argument	BKPT		1017105	1					
ANR	1017155	Identifier	BKPT		1017105	0					
ANR	1017156	BreakStatement	break ;	1816:2:55795:55800	1017105	2	True				
ANR	1017157	Label	case SLJIT_NOP :	1817:1:55803:55817	1017105	3	True				
ANR	1017158	Identifier	SLJIT_NOP		1017105	0					
ANR	1017159	ExpressionStatement	"FAIL_IF ( push_inst ( compiler , NOP ) )"	1818:2:55821:55854	1017105	4	True				
ANR	1017160	CallExpression	"FAIL_IF ( push_inst ( compiler , NOP ) )"		1017105	0					
ANR	1017161	Callee	FAIL_IF		1017105	0					
ANR	1017162	Identifier	FAIL_IF		1017105	0					
ANR	1017163	ArgumentList	"push_inst ( compiler , NOP )"		1017105	1					
ANR	1017164	Argument	"push_inst ( compiler , NOP )"		1017105	0					
ANR	1017165	CallExpression	"push_inst ( compiler , NOP )"		1017105	0					
ANR	1017166	Callee	push_inst		1017105	0					
ANR	1017167	Identifier	push_inst		1017105	0					
ANR	1017168	ArgumentList	compiler		1017105	1					
ANR	1017169	Argument	compiler		1017105	0					
ANR	1017170	Identifier	compiler		1017105	0					
ANR	1017171	Argument	NOP		1017105	1					
ANR	1017172	Identifier	NOP		1017105	0					
ANR	1017173	BreakStatement	break ;	1819:2:55858:55863	1017105	5	True				
ANR	1017174	Label	case SLJIT_LUMUL :	1820:1:55866:55882	1017105	6	True				
ANR	1017175	Identifier	SLJIT_LUMUL		1017105	0					
ANR	1017176	Label	case SLJIT_LSMUL :	1821:1:55885:55901	1017105	7	True				
ANR	1017177	Identifier	SLJIT_LSMUL		1017105	0					
ANR	1017178	ReturnStatement	"return push_inst ( compiler , ( op == SLJIT_LUMUL ? UMULL : SMULL ) | ( reg_map [ SLJIT_R1 ] << 16 ) | ( reg_map [ SLJIT_R0 ] << 12 ) | ( reg_map [ SLJIT_R0 ] << 8 ) | reg_map [ SLJIT_R1 ] ) ;"	1823:2:55962:56140	1017105	8	True				
ANR	1017179	CallExpression	"push_inst ( compiler , ( op == SLJIT_LUMUL ? UMULL : SMULL ) | ( reg_map [ SLJIT_R1 ] << 16 ) | ( reg_map [ SLJIT_R0 ] << 12 ) | ( reg_map [ SLJIT_R0 ] << 8 ) | reg_map [ SLJIT_R1 ] )"		1017105	0					
ANR	1017180	Callee	push_inst		1017105	0					
ANR	1017181	Identifier	push_inst		1017105	0					
ANR	1017182	ArgumentList	compiler		1017105	1					
ANR	1017183	Argument	compiler		1017105	0					
ANR	1017184	Identifier	compiler		1017105	0					
ANR	1017185	Argument	( op == SLJIT_LUMUL ? UMULL : SMULL ) | ( reg_map [ SLJIT_R1 ] << 16 ) | ( reg_map [ SLJIT_R0 ] << 12 ) | ( reg_map [ SLJIT_R0 ] << 8 ) | reg_map [ SLJIT_R1 ]		1017105	1					
ANR	1017186	InclusiveOrExpression	( op == SLJIT_LUMUL ? UMULL : SMULL ) | ( reg_map [ SLJIT_R1 ] << 16 ) | ( reg_map [ SLJIT_R0 ] << 12 ) | ( reg_map [ SLJIT_R0 ] << 8 ) | reg_map [ SLJIT_R1 ]		1017105	0		|			
ANR	1017187	ConditionalExpression	op == SLJIT_LUMUL ? UMULL : SMULL		1017105	0					
ANR	1017188	Condition	op == SLJIT_LUMUL		1017105	0					
ANR	1017189	EqualityExpression	op == SLJIT_LUMUL		1017105	0		==			
ANR	1017190	Identifier	op		1017105	0					
ANR	1017191	Identifier	SLJIT_LUMUL		1017105	1					
ANR	1017192	Identifier	UMULL		1017105	1					
ANR	1017193	Identifier	SMULL		1017105	2					
ANR	1017194	InclusiveOrExpression	( reg_map [ SLJIT_R1 ] << 16 ) | ( reg_map [ SLJIT_R0 ] << 12 ) | ( reg_map [ SLJIT_R0 ] << 8 ) | reg_map [ SLJIT_R1 ]		1017105	1		|			
ANR	1017195	ShiftExpression	reg_map [ SLJIT_R1 ] << 16		1017105	0		<<			
ANR	1017196	ArrayIndexing	reg_map [ SLJIT_R1 ]		1017105	0					
ANR	1017197	Identifier	reg_map		1017105	0					
ANR	1017198	Identifier	SLJIT_R1		1017105	1					
ANR	1017199	PrimaryExpression	16		1017105	1					
ANR	1017200	InclusiveOrExpression	( reg_map [ SLJIT_R0 ] << 12 ) | ( reg_map [ SLJIT_R0 ] << 8 ) | reg_map [ SLJIT_R1 ]		1017105	1		|			
ANR	1017201	ShiftExpression	reg_map [ SLJIT_R0 ] << 12		1017105	0		<<			
ANR	1017202	ArrayIndexing	reg_map [ SLJIT_R0 ]		1017105	0					
ANR	1017203	Identifier	reg_map		1017105	0					
ANR	1017204	Identifier	SLJIT_R0		1017105	1					
ANR	1017205	PrimaryExpression	12		1017105	1					
ANR	1017206	InclusiveOrExpression	( reg_map [ SLJIT_R0 ] << 8 ) | reg_map [ SLJIT_R1 ]		1017105	1		|			
ANR	1017207	ShiftExpression	reg_map [ SLJIT_R0 ] << 8		1017105	0		<<			
ANR	1017208	ArrayIndexing	reg_map [ SLJIT_R0 ]		1017105	0					
ANR	1017209	Identifier	reg_map		1017105	0					
ANR	1017210	Identifier	SLJIT_R0		1017105	1					
ANR	1017211	PrimaryExpression	8		1017105	1					
ANR	1017212	ArrayIndexing	reg_map [ SLJIT_R1 ]		1017105	1					
ANR	1017213	Identifier	reg_map		1017105	0					
ANR	1017214	Identifier	SLJIT_R1		1017105	1					
ANR	1017215	Label	case SLJIT_UDIVMOD :	1836:1:56442:56460	1017105	9	True				
ANR	1017216	Identifier	SLJIT_UDIVMOD		1017105	0					
ANR	1017217	Label	case SLJIT_SDIVMOD :	1837:1:56463:56481	1017105	10	True				
ANR	1017218	Identifier	SLJIT_SDIVMOD		1017105	0					
ANR	1017219	Label	case SLJIT_UDIVI :	1838:1:56484:56500	1017105	11	True				
ANR	1017220	Identifier	SLJIT_UDIVI		1017105	0					
ANR	1017221	Label	case SLJIT_SDIVI :	1839:1:56503:56519	1017105	12	True				
ANR	1017222	Identifier	SLJIT_SDIVI		1017105	0					
ANR	1017223	ExpressionStatement	"SLJIT_COMPILE_ASSERT ( ( SLJIT_UDIVMOD & 0x2 ) == 0 && SLJIT_UDIVI - 0x2 == SLJIT_UDIVMOD , bad_div_opcode_assignments )"	1840:2:56523:56637	1017105	13	True				
ANR	1017224	CallExpression	"SLJIT_COMPILE_ASSERT ( ( SLJIT_UDIVMOD & 0x2 ) == 0 && SLJIT_UDIVI - 0x2 == SLJIT_UDIVMOD , bad_div_opcode_assignments )"		1017105	0					
ANR	1017225	Callee	SLJIT_COMPILE_ASSERT		1017105	0					
ANR	1017226	Identifier	SLJIT_COMPILE_ASSERT		1017105	0					
ANR	1017227	ArgumentList	( SLJIT_UDIVMOD & 0x2 ) == 0 && SLJIT_UDIVI - 0x2 == SLJIT_UDIVMOD		1017105	1					
ANR	1017228	Argument	( SLJIT_UDIVMOD & 0x2 ) == 0 && SLJIT_UDIVI - 0x2 == SLJIT_UDIVMOD		1017105	0					
ANR	1017229	AndExpression	( SLJIT_UDIVMOD & 0x2 ) == 0 && SLJIT_UDIVI - 0x2 == SLJIT_UDIVMOD		1017105	0		&&			
ANR	1017230	EqualityExpression	( SLJIT_UDIVMOD & 0x2 ) == 0		1017105	0		==			
ANR	1017231	BitAndExpression	SLJIT_UDIVMOD & 0x2		1017105	0		&			
ANR	1017232	Identifier	SLJIT_UDIVMOD		1017105	0					
ANR	1017233	PrimaryExpression	0x2		1017105	1					
ANR	1017234	PrimaryExpression	0		1017105	1					
ANR	1017235	EqualityExpression	SLJIT_UDIVI - 0x2 == SLJIT_UDIVMOD		1017105	1		==			
ANR	1017236	AdditiveExpression	SLJIT_UDIVI - 0x2		1017105	0		-			
ANR	1017237	Identifier	SLJIT_UDIVI		1017105	0					
ANR	1017238	PrimaryExpression	0x2		1017105	1					
ANR	1017239	Identifier	SLJIT_UDIVMOD		1017105	1					
ANR	1017240	Argument	bad_div_opcode_assignments		1017105	1					
ANR	1017241	Identifier	bad_div_opcode_assignments		1017105	0					
ANR	1017242	ExpressionStatement	"SLJIT_COMPILE_ASSERT ( reg_map [ 2 ] == 1 && reg_map [ 3 ] == 2 , bad_register_mapping )"	1841:2:56641:56719	1017105	14	True				
ANR	1017243	CallExpression	"SLJIT_COMPILE_ASSERT ( reg_map [ 2 ] == 1 && reg_map [ 3 ] == 2 , bad_register_mapping )"		1017105	0					
ANR	1017244	Callee	SLJIT_COMPILE_ASSERT		1017105	0					
ANR	1017245	Identifier	SLJIT_COMPILE_ASSERT		1017105	0					
ANR	1017246	ArgumentList	reg_map [ 2 ] == 1 && reg_map [ 3 ] == 2		1017105	1					
ANR	1017247	Argument	reg_map [ 2 ] == 1 && reg_map [ 3 ] == 2		1017105	0					
ANR	1017248	AndExpression	reg_map [ 2 ] == 1 && reg_map [ 3 ] == 2		1017105	0		&&			
ANR	1017249	EqualityExpression	reg_map [ 2 ] == 1		1017105	0		==			
ANR	1017250	ArrayIndexing	reg_map [ 2 ]		1017105	0					
ANR	1017251	Identifier	reg_map		1017105	0					
ANR	1017252	PrimaryExpression	2		1017105	1					
ANR	1017253	PrimaryExpression	1		1017105	1					
ANR	1017254	EqualityExpression	reg_map [ 3 ] == 2		1017105	1		==			
ANR	1017255	ArrayIndexing	reg_map [ 3 ]		1017105	0					
ANR	1017256	Identifier	reg_map		1017105	0					
ANR	1017257	PrimaryExpression	3		1017105	1					
ANR	1017258	PrimaryExpression	2		1017105	1					
ANR	1017259	Argument	bad_register_mapping		1017105	1					
ANR	1017260	Identifier	bad_register_mapping		1017105	0					
ANR	1017261	IfStatement	if ( ( op >= SLJIT_UDIVI ) && ( compiler -> scratches >= 3 ) )		1017105	15					
ANR	1017262	Condition	( op >= SLJIT_UDIVI ) && ( compiler -> scratches >= 3 )	1843:6:56728:56776	1017105	0	True				
ANR	1017263	AndExpression	( op >= SLJIT_UDIVI ) && ( compiler -> scratches >= 3 )		1017105	0		&&			
ANR	1017264	RelationalExpression	op >= SLJIT_UDIVI		1017105	0		>=			
ANR	1017265	Identifier	op		1017105	0					
ANR	1017266	Identifier	SLJIT_UDIVI		1017105	1					
ANR	1017267	RelationalExpression	compiler -> scratches >= 3		1017105	1		>=			
ANR	1017268	PtrMemberAccess	compiler -> scratches		1017105	0					
ANR	1017269	Identifier	compiler		1017105	0					
ANR	1017270	Identifier	scratches		1017105	1					
ANR	1017271	PrimaryExpression	3		1017105	1					
ANR	1017272	CompoundStatement		36:57:1147:1147	1017105	1					
ANR	1017273	ExpressionStatement	"FAIL_IF ( push_inst ( compiler , 0xe52d2008 ) )"	1844:3:56784:56849	1017105	0	True				
ANR	1017274	CallExpression	"FAIL_IF ( push_inst ( compiler , 0xe52d2008 ) )"		1017105	0					
ANR	1017275	Callee	FAIL_IF		1017105	0					
ANR	1017276	Identifier	FAIL_IF		1017105	0					
ANR	1017277	ArgumentList	"push_inst ( compiler , 0xe52d2008 )"		1017105	1					
ANR	1017278	Argument	"push_inst ( compiler , 0xe52d2008 )"		1017105	0					
ANR	1017279	CallExpression	"push_inst ( compiler , 0xe52d2008 )"		1017105	0					
ANR	1017280	Callee	push_inst		1017105	0					
ANR	1017281	Identifier	push_inst		1017105	0					
ANR	1017282	ArgumentList	compiler		1017105	1					
ANR	1017283	Argument	compiler		1017105	0					
ANR	1017284	Identifier	compiler		1017105	0					
ANR	1017285	Argument	0xe52d2008		1017105	1					
ANR	1017286	PrimaryExpression	0xe52d2008		1017105	0					
ANR	1017287	ExpressionStatement	"FAIL_IF ( push_inst ( compiler , 0xe58d1004 ) )"	1845:3:56854:56917	1017105	1	True				
ANR	1017288	CallExpression	"FAIL_IF ( push_inst ( compiler , 0xe58d1004 ) )"		1017105	0					
ANR	1017289	Callee	FAIL_IF		1017105	0					
ANR	1017290	Identifier	FAIL_IF		1017105	0					
ANR	1017291	ArgumentList	"push_inst ( compiler , 0xe58d1004 )"		1017105	1					
ANR	1017292	Argument	"push_inst ( compiler , 0xe58d1004 )"		1017105	0					
ANR	1017293	CallExpression	"push_inst ( compiler , 0xe58d1004 )"		1017105	0					
ANR	1017294	Callee	push_inst		1017105	0					
ANR	1017295	Identifier	push_inst		1017105	0					
ANR	1017296	ArgumentList	compiler		1017105	1					
ANR	1017297	Argument	compiler		1017105	0					
ANR	1017298	Identifier	compiler		1017105	0					
ANR	1017299	Argument	0xe58d1004		1017105	1					
ANR	1017300	PrimaryExpression	0xe58d1004		1017105	0					
ANR	1017301	ElseStatement	else		1017105	0					
ANR	1017302	IfStatement	if ( ( op >= SLJIT_UDIVI ) || ( compiler -> scratches >= 3 ) )		1017105	0					
ANR	1017303	Condition	( op >= SLJIT_UDIVI ) || ( compiler -> scratches >= 3 )	1847:11:56934:56982	1017105	0	True				
ANR	1017304	OrExpression	( op >= SLJIT_UDIVI ) || ( compiler -> scratches >= 3 )		1017105	0		||			
ANR	1017305	RelationalExpression	op >= SLJIT_UDIVI		1017105	0		>=			
ANR	1017306	Identifier	op		1017105	0					
ANR	1017307	Identifier	SLJIT_UDIVI		1017105	1					
ANR	1017308	RelationalExpression	compiler -> scratches >= 3		1017105	1		>=			
ANR	1017309	PtrMemberAccess	compiler -> scratches		1017105	0					
ANR	1017310	Identifier	compiler		1017105	0					
ANR	1017311	Identifier	scratches		1017105	1					
ANR	1017312	PrimaryExpression	3		1017105	1					
ANR	1017313	ExpressionStatement	"FAIL_IF ( push_inst ( compiler , 0xe52d0008 | ( op >= SLJIT_UDIVI ? 0x1000 : 0x2000 ) ) )"	1848:3:56988:57096	1017105	1	True				
ANR	1017314	CallExpression	"FAIL_IF ( push_inst ( compiler , 0xe52d0008 | ( op >= SLJIT_UDIVI ? 0x1000 : 0x2000 ) ) )"		1017105	0					
ANR	1017315	Callee	FAIL_IF		1017105	0					
ANR	1017316	Identifier	FAIL_IF		1017105	0					
ANR	1017317	ArgumentList	"push_inst ( compiler , 0xe52d0008 | ( op >= SLJIT_UDIVI ? 0x1000 : 0x2000 ) )"		1017105	1					
ANR	1017318	Argument	"push_inst ( compiler , 0xe52d0008 | ( op >= SLJIT_UDIVI ? 0x1000 : 0x2000 ) )"		1017105	0					
ANR	1017319	CallExpression	"push_inst ( compiler , 0xe52d0008 | ( op >= SLJIT_UDIVI ? 0x1000 : 0x2000 ) )"		1017105	0					
ANR	1017320	Callee	push_inst		1017105	0					
ANR	1017321	Identifier	push_inst		1017105	0					
ANR	1017322	ArgumentList	compiler		1017105	1					
ANR	1017323	Argument	compiler		1017105	0					
ANR	1017324	Identifier	compiler		1017105	0					
ANR	1017325	Argument	0xe52d0008 | ( op >= SLJIT_UDIVI ? 0x1000 : 0x2000 )		1017105	1					
ANR	1017326	InclusiveOrExpression	0xe52d0008 | ( op >= SLJIT_UDIVI ? 0x1000 : 0x2000 )		1017105	0		|			
ANR	1017327	PrimaryExpression	0xe52d0008		1017105	0					
ANR	1017328	ConditionalExpression	op >= SLJIT_UDIVI ? 0x1000 : 0x2000		1017105	1					
ANR	1017329	Condition	op >= SLJIT_UDIVI		1017105	0					
ANR	1017330	RelationalExpression	op >= SLJIT_UDIVI		1017105	0		>=			
ANR	1017331	Identifier	op		1017105	0					
ANR	1017332	Identifier	SLJIT_UDIVI		1017105	1					
ANR	1017333	PrimaryExpression	0x1000		1017105	1					
ANR	1017334	PrimaryExpression	0x2000		1017105	2					
ANR	1017335	ExpressionStatement	"FAIL_IF ( sljit_emit_ijump ( compiler , SLJIT_FAST_CALL , SLJIT_IMM , ( ( op | 0x2 ) == SLJIT_UDIVI ? SLJIT_FUNC_OFFSET ( __aeabi_uidivmod ) : SLJIT_FUNC_OFFSET ( __aeabi_idivmod ) ) ) )"	1851:2:57123:57293	1017105	16	True				
ANR	1017336	CallExpression	"FAIL_IF ( sljit_emit_ijump ( compiler , SLJIT_FAST_CALL , SLJIT_IMM , ( ( op | 0x2 ) == SLJIT_UDIVI ? SLJIT_FUNC_OFFSET ( __aeabi_uidivmod ) : SLJIT_FUNC_OFFSET ( __aeabi_idivmod ) ) ) )"		1017105	0					
ANR	1017337	Callee	FAIL_IF		1017105	0					
ANR	1017338	Identifier	FAIL_IF		1017105	0					
ANR	1017339	ArgumentList	"sljit_emit_ijump ( compiler , SLJIT_FAST_CALL , SLJIT_IMM , ( ( op | 0x2 ) == SLJIT_UDIVI ? SLJIT_FUNC_OFFSET ( __aeabi_uidivmod ) : SLJIT_FUNC_OFFSET ( __aeabi_idivmod ) ) )"		1017105	1					
ANR	1017340	Argument	"sljit_emit_ijump ( compiler , SLJIT_FAST_CALL , SLJIT_IMM , ( ( op | 0x2 ) == SLJIT_UDIVI ? SLJIT_FUNC_OFFSET ( __aeabi_uidivmod ) : SLJIT_FUNC_OFFSET ( __aeabi_idivmod ) ) )"		1017105	0					
ANR	1017341	CallExpression	"sljit_emit_ijump ( compiler , SLJIT_FAST_CALL , SLJIT_IMM , ( ( op | 0x2 ) == SLJIT_UDIVI ? SLJIT_FUNC_OFFSET ( __aeabi_uidivmod ) : SLJIT_FUNC_OFFSET ( __aeabi_idivmod ) ) )"		1017105	0					
ANR	1017342	Callee	sljit_emit_ijump		1017105	0					
ANR	1017343	Identifier	sljit_emit_ijump		1017105	0					
ANR	1017344	ArgumentList	compiler		1017105	1					
ANR	1017345	Argument	compiler		1017105	0					
ANR	1017346	Identifier	compiler		1017105	0					
ANR	1017347	Argument	SLJIT_FAST_CALL		1017105	1					
ANR	1017348	Identifier	SLJIT_FAST_CALL		1017105	0					
ANR	1017349	Argument	SLJIT_IMM		1017105	2					
ANR	1017350	Identifier	SLJIT_IMM		1017105	0					
ANR	1017351	Argument	( op | 0x2 ) == SLJIT_UDIVI ? SLJIT_FUNC_OFFSET ( __aeabi_uidivmod ) : SLJIT_FUNC_OFFSET ( __aeabi_idivmod )		1017105	3					
ANR	1017352	ConditionalExpression	( op | 0x2 ) == SLJIT_UDIVI ? SLJIT_FUNC_OFFSET ( __aeabi_uidivmod ) : SLJIT_FUNC_OFFSET ( __aeabi_idivmod )		1017105	0					
ANR	1017353	Condition	( op | 0x2 ) == SLJIT_UDIVI		1017105	0					
ANR	1017354	EqualityExpression	( op | 0x2 ) == SLJIT_UDIVI		1017105	0		==			
ANR	1017355	InclusiveOrExpression	op | 0x2		1017105	0		|			
ANR	1017356	Identifier	op		1017105	0					
ANR	1017357	PrimaryExpression	0x2		1017105	1					
ANR	1017358	Identifier	SLJIT_UDIVI		1017105	1					
ANR	1017359	CallExpression	SLJIT_FUNC_OFFSET ( __aeabi_uidivmod )		1017105	1					
ANR	1017360	Callee	SLJIT_FUNC_OFFSET		1017105	0					
ANR	1017361	Identifier	SLJIT_FUNC_OFFSET		1017105	0					
ANR	1017362	ArgumentList	__aeabi_uidivmod		1017105	1					
ANR	1017363	Argument	__aeabi_uidivmod		1017105	0					
ANR	1017364	Identifier	__aeabi_uidivmod		1017105	0					
ANR	1017365	CallExpression	SLJIT_FUNC_OFFSET ( __aeabi_idivmod )		1017105	2					
ANR	1017366	Callee	SLJIT_FUNC_OFFSET		1017105	0					
ANR	1017367	Identifier	SLJIT_FUNC_OFFSET		1017105	0					
ANR	1017368	ArgumentList	__aeabi_idivmod		1017105	1					
ANR	1017369	Argument	__aeabi_idivmod		1017105	0					
ANR	1017370	Identifier	__aeabi_idivmod		1017105	0					
ANR	1017371	IfStatement	if ( ( op >= SLJIT_UDIVI ) && ( compiler -> scratches >= 3 ) )		1017105	17					
ANR	1017372	Condition	( op >= SLJIT_UDIVI ) && ( compiler -> scratches >= 3 )	1857:6:57361:57409	1017105	0	True				
ANR	1017373	AndExpression	( op >= SLJIT_UDIVI ) && ( compiler -> scratches >= 3 )		1017105	0		&&			
ANR	1017374	RelationalExpression	op >= SLJIT_UDIVI		1017105	0		>=			
ANR	1017375	Identifier	op		1017105	0					
ANR	1017376	Identifier	SLJIT_UDIVI		1017105	1					
ANR	1017377	RelationalExpression	compiler -> scratches >= 3		1017105	1		>=			
ANR	1017378	PtrMemberAccess	compiler -> scratches		1017105	0					
ANR	1017379	Identifier	compiler		1017105	0					
ANR	1017380	Identifier	scratches		1017105	1					
ANR	1017381	PrimaryExpression	3		1017105	1					
ANR	1017382	CompoundStatement		50:57:1780:1780	1017105	1					
ANR	1017383	ExpressionStatement	"FAIL_IF ( push_inst ( compiler , 0xe59d1004 ) )"	1858:3:57417:57480	1017105	0	True				
ANR	1017384	CallExpression	"FAIL_IF ( push_inst ( compiler , 0xe59d1004 ) )"		1017105	0					
ANR	1017385	Callee	FAIL_IF		1017105	0					
ANR	1017386	Identifier	FAIL_IF		1017105	0					
ANR	1017387	ArgumentList	"push_inst ( compiler , 0xe59d1004 )"		1017105	1					
ANR	1017388	Argument	"push_inst ( compiler , 0xe59d1004 )"		1017105	0					
ANR	1017389	CallExpression	"push_inst ( compiler , 0xe59d1004 )"		1017105	0					
ANR	1017390	Callee	push_inst		1017105	0					
ANR	1017391	Identifier	push_inst		1017105	0					
ANR	1017392	ArgumentList	compiler		1017105	1					
ANR	1017393	Argument	compiler		1017105	0					
ANR	1017394	Identifier	compiler		1017105	0					
ANR	1017395	Argument	0xe59d1004		1017105	1					
ANR	1017396	PrimaryExpression	0xe59d1004		1017105	0					
ANR	1017397	ExpressionStatement	"FAIL_IF ( push_inst ( compiler , 0xe49d2008 ) )"	1859:3:57485:57548	1017105	1	True				
ANR	1017398	CallExpression	"FAIL_IF ( push_inst ( compiler , 0xe49d2008 ) )"		1017105	0					
ANR	1017399	Callee	FAIL_IF		1017105	0					
ANR	1017400	Identifier	FAIL_IF		1017105	0					
ANR	1017401	ArgumentList	"push_inst ( compiler , 0xe49d2008 )"		1017105	1					
ANR	1017402	Argument	"push_inst ( compiler , 0xe49d2008 )"		1017105	0					
ANR	1017403	CallExpression	"push_inst ( compiler , 0xe49d2008 )"		1017105	0					
ANR	1017404	Callee	push_inst		1017105	0					
ANR	1017405	Identifier	push_inst		1017105	0					
ANR	1017406	ArgumentList	compiler		1017105	1					
ANR	1017407	Argument	compiler		1017105	0					
ANR	1017408	Identifier	compiler		1017105	0					
ANR	1017409	Argument	0xe49d2008		1017105	1					
ANR	1017410	PrimaryExpression	0xe49d2008		1017105	0					
ANR	1017411	ElseStatement	else		1017105	0					
ANR	1017412	IfStatement	if ( ( op >= SLJIT_UDIVI ) || ( compiler -> scratches >= 3 ) )		1017105	0					
ANR	1017413	Condition	( op >= SLJIT_UDIVI ) || ( compiler -> scratches >= 3 )	1861:11:57565:57613	1017105	0	True				
ANR	1017414	OrExpression	( op >= SLJIT_UDIVI ) || ( compiler -> scratches >= 3 )		1017105	0		||			
ANR	1017415	RelationalExpression	op >= SLJIT_UDIVI		1017105	0		>=			
ANR	1017416	Identifier	op		1017105	0					
ANR	1017417	Identifier	SLJIT_UDIVI		1017105	1					
ANR	1017418	RelationalExpression	compiler -> scratches >= 3		1017105	1		>=			
ANR	1017419	PtrMemberAccess	compiler -> scratches		1017105	0					
ANR	1017420	Identifier	compiler		1017105	0					
ANR	1017421	Identifier	scratches		1017105	1					
ANR	1017422	PrimaryExpression	3		1017105	1					
ANR	1017423	ReturnStatement	"return push_inst ( compiler , 0xe49d0008 | ( op >= SLJIT_UDIVI ? 0x1000 : 0x2000 ) ) ;"	1862:3:57619:57723	1017105	1	True				
ANR	1017424	CallExpression	"push_inst ( compiler , 0xe49d0008 | ( op >= SLJIT_UDIVI ? 0x1000 : 0x2000 ) )"		1017105	0					
ANR	1017425	Callee	push_inst		1017105	0					
ANR	1017426	Identifier	push_inst		1017105	0					
ANR	1017427	ArgumentList	compiler		1017105	1					
ANR	1017428	Argument	compiler		1017105	0					
ANR	1017429	Identifier	compiler		1017105	0					
ANR	1017430	Argument	0xe49d0008 | ( op >= SLJIT_UDIVI ? 0x1000 : 0x2000 )		1017105	1					
ANR	1017431	InclusiveOrExpression	0xe49d0008 | ( op >= SLJIT_UDIVI ? 0x1000 : 0x2000 )		1017105	0		|			
ANR	1017432	PrimaryExpression	0xe49d0008		1017105	0					
ANR	1017433	ConditionalExpression	op >= SLJIT_UDIVI ? 0x1000 : 0x2000		1017105	1					
ANR	1017434	Condition	op >= SLJIT_UDIVI		1017105	0					
ANR	1017435	RelationalExpression	op >= SLJIT_UDIVI		1017105	0		>=			
ANR	1017436	Identifier	op		1017105	0					
ANR	1017437	Identifier	SLJIT_UDIVI		1017105	1					
ANR	1017438	PrimaryExpression	0x1000		1017105	1					
ANR	1017439	PrimaryExpression	0x2000		1017105	2					
ANR	1017440	ReturnStatement	return SLJIT_SUCCESS ;	1863:2:57727:57747	1017105	18	True				
ANR	1017441	Identifier	SLJIT_SUCCESS		1017105	0					
ANR	1017442	ReturnStatement	return SLJIT_SUCCESS ;	1866:1:57754:57774	1017105	4	True				
ANR	1017443	Identifier	SLJIT_SUCCESS		1017105	0					
ANR	1017444	ReturnType	SLJIT_API_FUNC_ATTRIBUTE sljit_si		1017105	1					
ANR	1017445	Identifier	sljit_emit_op0		1017105	2					
ANR	1017446	ParameterList	"struct sljit_compiler * compiler , sljit_si op"		1017105	3					
ANR	1017447	Parameter	struct sljit_compiler * compiler	1807:49:55585:55615	1017105	0	True				
ANR	1017448	ParameterType	struct sljit_compiler *		1017105	0					
ANR	1017449	Identifier	compiler		1017105	1					
ANR	1017450	Parameter	sljit_si op	1807:82:55618:55628	1017105	1	True				
ANR	1017451	ParameterType	sljit_si		1017105	0					
ANR	1017452	Identifier	op		1017105	1					
ANR	1017453	CFGEntryNode	ENTRY		1017105		True				
ANR	1017454	CFGExitNode	EXIT		1017105		True				
ANR	1017455	Symbol	compiler -> scratches		1017105						
ANR	1017456	Symbol	__aeabi_uidivmod		1017105						
ANR	1017457	Symbol	sljit_emit_ijump		1017105						
ANR	1017458	Symbol	SLJIT_LUMUL		1017105						
ANR	1017459	Symbol	reg_map		1017105						
ANR	1017460	Symbol	bad_register_mapping		1017105						
ANR	1017461	Symbol	* compiler		1017105						
ANR	1017462	Symbol	SLJIT_R1		1017105						
ANR	1017463	Symbol	SMULL		1017105						
ANR	1017464	Symbol	bad_div_opcode_assignments		1017105						
ANR	1017465	Symbol	GET_OPCODE		1017105						
ANR	1017466	Symbol	SLJIT_R0		1017105						
ANR	1017467	Symbol	SLJIT_FUNC_OFFSET		1017105						
ANR	1017468	Symbol	* SLJIT_R1		1017105						
ANR	1017469	Symbol	BKPT		1017105						
ANR	1017470	Symbol	SLJIT_UDIVMOD		1017105						
ANR	1017471	Symbol	SLJIT_IMM		1017105						
ANR	1017472	Symbol	SLJIT_FAST_CALL		1017105						
ANR	1017473	Symbol	compiler		1017105						
ANR	1017474	Symbol	* SLJIT_R0		1017105						
ANR	1017475	Symbol	op		1017105						
ANR	1017476	Symbol	push_inst		1017105						
ANR	1017477	Symbol	check_sljit_emit_op0		1017105						
ANR	1017478	Symbol	SLJIT_SUCCESS		1017105						
ANR	1017479	Symbol	* reg_map		1017105						
ANR	1017480	Symbol	SLJIT_UDIVI		1017105						
ANR	1017481	Symbol	NOP		1017105						
ANR	1017482	Symbol	UMULL		1017105						
ANR	1017483	Symbol	__aeabi_idivmod		1017105						
ANR	1017484	Function	sljit_emit_op1	1869:0:57779:60349							
ANR	1017485	FunctionDef	"sljit_emit_op1 (struct sljit_compiler * compiler , sljit_si op , sljit_si dst , sljit_sw dstw , sljit_si src , sljit_sw srcw)"		1017484	0					
ANR	1017486	CompoundStatement		1872:0:57934:60349	1017484	0					
ANR	1017487	ExpressionStatement	CHECK_ERROR ( )	1873:1:57937:57950	1017484	0	True				
ANR	1017488	CallExpression	CHECK_ERROR ( )		1017484	0					
ANR	1017489	Callee	CHECK_ERROR		1017484	0					
ANR	1017490	Identifier	CHECK_ERROR		1017484	0					
ANR	1017491	ArgumentList			1017484	1					
ANR	1017492	ExpressionStatement	"CHECK ( check_sljit_emit_op1 ( compiler , op , dst , dstw , src , srcw ) )"	1874:1:57953:58016	1017484	1	True				
ANR	1017493	CallExpression	"CHECK ( check_sljit_emit_op1 ( compiler , op , dst , dstw , src , srcw ) )"		1017484	0					
ANR	1017494	Callee	CHECK		1017484	0					
ANR	1017495	Identifier	CHECK		1017484	0					
ANR	1017496	ArgumentList	"check_sljit_emit_op1 ( compiler , op , dst , dstw , src , srcw )"		1017484	1					
ANR	1017497	Argument	"check_sljit_emit_op1 ( compiler , op , dst , dstw , src , srcw )"		1017484	0					
ANR	1017498	CallExpression	"check_sljit_emit_op1 ( compiler , op , dst , dstw , src , srcw )"		1017484	0					
ANR	1017499	Callee	check_sljit_emit_op1		1017484	0					
ANR	1017500	Identifier	check_sljit_emit_op1		1017484	0					
ANR	1017501	ArgumentList	compiler		1017484	1					
ANR	1017502	Argument	compiler		1017484	0					
ANR	1017503	Identifier	compiler		1017484	0					
ANR	1017504	Argument	op		1017484	1					
ANR	1017505	Identifier	op		1017484	0					
ANR	1017506	Argument	dst		1017484	2					
ANR	1017507	Identifier	dst		1017484	0					
ANR	1017508	Argument	dstw		1017484	3					
ANR	1017509	Identifier	dstw		1017484	0					
ANR	1017510	Argument	src		1017484	4					
ANR	1017511	Identifier	src		1017484	0					
ANR	1017512	Argument	srcw		1017484	5					
ANR	1017513	Identifier	srcw		1017484	0					
ANR	1017514	ExpressionStatement	"ADJUST_LOCAL_OFFSET ( dst , dstw )"	1875:1:58019:58049	1017484	2	True				
ANR	1017515	CallExpression	"ADJUST_LOCAL_OFFSET ( dst , dstw )"		1017484	0					
ANR	1017516	Callee	ADJUST_LOCAL_OFFSET		1017484	0					
ANR	1017517	Identifier	ADJUST_LOCAL_OFFSET		1017484	0					
ANR	1017518	ArgumentList	dst		1017484	1					
ANR	1017519	Argument	dst		1017484	0					
ANR	1017520	Identifier	dst		1017484	0					
ANR	1017521	Argument	dstw		1017484	1					
ANR	1017522	Identifier	dstw		1017484	0					
ANR	1017523	ExpressionStatement	"ADJUST_LOCAL_OFFSET ( src , srcw )"	1876:1:58052:58082	1017484	3	True				
ANR	1017524	CallExpression	"ADJUST_LOCAL_OFFSET ( src , srcw )"		1017484	0					
ANR	1017525	Callee	ADJUST_LOCAL_OFFSET		1017484	0					
ANR	1017526	Identifier	ADJUST_LOCAL_OFFSET		1017484	0					
ANR	1017527	ArgumentList	src		1017484	1					
ANR	1017528	Argument	src		1017484	0					
ANR	1017529	Identifier	src		1017484	0					
ANR	1017530	Argument	srcw		1017484	1					
ANR	1017531	Identifier	srcw		1017484	0					
ANR	1017532	SwitchStatement	switch ( GET_OPCODE ( op ) )		1017484	4					
ANR	1017533	Condition	GET_OPCODE ( op )	1878:9:58094:58107	1017484	0	True				
ANR	1017534	CallExpression	GET_OPCODE ( op )		1017484	0					
ANR	1017535	Callee	GET_OPCODE		1017484	0					
ANR	1017536	Identifier	GET_OPCODE		1017484	0					
ANR	1017537	ArgumentList	op		1017484	1					
ANR	1017538	Argument	op		1017484	0					
ANR	1017539	Identifier	op		1017484	0					
ANR	1017540	CompoundStatement		7:25:175:175	1017484	1					
ANR	1017541	Label	case SLJIT_MOV :	1879:1:58113:58127	1017484	0	True				
ANR	1017542	Identifier	SLJIT_MOV		1017484	0					
ANR	1017543	Label	case SLJIT_MOV_UI :	1880:1:58130:58147	1017484	1	True				
ANR	1017544	Identifier	SLJIT_MOV_UI		1017484	0					
ANR	1017545	Label	case SLJIT_MOV_SI :	1881:1:58150:58167	1017484	2	True				
ANR	1017546	Identifier	SLJIT_MOV_SI		1017484	0					
ANR	1017547	Label	case SLJIT_MOV_P :	1882:1:58170:58186	1017484	3	True				
ANR	1017548	Identifier	SLJIT_MOV_P		1017484	0					
ANR	1017549	ReturnStatement	"return emit_op ( compiler , SLJIT_MOV , ALLOW_ANY_IMM , dst , dstw , TMP_REG1 , 0 , src , srcw ) ;"	1883:2:58190:58275	1017484	4	True				
ANR	1017550	CallExpression	"emit_op ( compiler , SLJIT_MOV , ALLOW_ANY_IMM , dst , dstw , TMP_REG1 , 0 , src , srcw )"		1017484	0					
ANR	1017551	Callee	emit_op		1017484	0					
ANR	1017552	Identifier	emit_op		1017484	0					
ANR	1017553	ArgumentList	compiler		1017484	1					
ANR	1017554	Argument	compiler		1017484	0					
ANR	1017555	Identifier	compiler		1017484	0					
ANR	1017556	Argument	SLJIT_MOV		1017484	1					
ANR	1017557	Identifier	SLJIT_MOV		1017484	0					
ANR	1017558	Argument	ALLOW_ANY_IMM		1017484	2					
ANR	1017559	Identifier	ALLOW_ANY_IMM		1017484	0					
ANR	1017560	Argument	dst		1017484	3					
ANR	1017561	Identifier	dst		1017484	0					
ANR	1017562	Argument	dstw		1017484	4					
ANR	1017563	Identifier	dstw		1017484	0					
ANR	1017564	Argument	TMP_REG1		1017484	5					
ANR	1017565	Identifier	TMP_REG1		1017484	0					
ANR	1017566	Argument	0		1017484	6					
ANR	1017567	PrimaryExpression	0		1017484	0					
ANR	1017568	Argument	src		1017484	7					
ANR	1017569	Identifier	src		1017484	0					
ANR	1017570	Argument	srcw		1017484	8					
ANR	1017571	Identifier	srcw		1017484	0					
ANR	1017572	Label	case SLJIT_MOV_UB :	1885:1:58279:58296	1017484	5	True				
ANR	1017573	Identifier	SLJIT_MOV_UB		1017484	0					
ANR	1017574	ReturnStatement	"return emit_op ( compiler , SLJIT_MOV_UB , ALLOW_ANY_IMM | BYTE_DATA , dst , dstw , TMP_REG1 , 0 , src , ( src & SLJIT_IMM ) ? ( sljit_ub ) srcw : srcw ) ;"	1886:2:58300:58437	1017484	6	True				
ANR	1017575	CallExpression	"emit_op ( compiler , SLJIT_MOV_UB , ALLOW_ANY_IMM | BYTE_DATA , dst , dstw , TMP_REG1 , 0 , src , ( src & SLJIT_IMM ) ? ( sljit_ub ) srcw : srcw )"		1017484	0					
ANR	1017576	Callee	emit_op		1017484	0					
ANR	1017577	Identifier	emit_op		1017484	0					
ANR	1017578	ArgumentList	compiler		1017484	1					
ANR	1017579	Argument	compiler		1017484	0					
ANR	1017580	Identifier	compiler		1017484	0					
ANR	1017581	Argument	SLJIT_MOV_UB		1017484	1					
ANR	1017582	Identifier	SLJIT_MOV_UB		1017484	0					
ANR	1017583	Argument	ALLOW_ANY_IMM | BYTE_DATA		1017484	2					
ANR	1017584	InclusiveOrExpression	ALLOW_ANY_IMM | BYTE_DATA		1017484	0		|			
ANR	1017585	Identifier	ALLOW_ANY_IMM		1017484	0					
ANR	1017586	Identifier	BYTE_DATA		1017484	1					
ANR	1017587	Argument	dst		1017484	3					
ANR	1017588	Identifier	dst		1017484	0					
ANR	1017589	Argument	dstw		1017484	4					
ANR	1017590	Identifier	dstw		1017484	0					
ANR	1017591	Argument	TMP_REG1		1017484	5					
ANR	1017592	Identifier	TMP_REG1		1017484	0					
ANR	1017593	Argument	0		1017484	6					
ANR	1017594	PrimaryExpression	0		1017484	0					
ANR	1017595	Argument	src		1017484	7					
ANR	1017596	Identifier	src		1017484	0					
ANR	1017597	Argument	( src & SLJIT_IMM ) ? ( sljit_ub ) srcw : srcw		1017484	8					
ANR	1017598	ConditionalExpression	( src & SLJIT_IMM ) ? ( sljit_ub ) srcw : srcw		1017484	0					
ANR	1017599	Condition	src & SLJIT_IMM		1017484	0					
ANR	1017600	BitAndExpression	src & SLJIT_IMM		1017484	0		&			
ANR	1017601	Identifier	src		1017484	0					
ANR	1017602	Identifier	SLJIT_IMM		1017484	1					
ANR	1017603	CastExpression	( sljit_ub ) srcw		1017484	1					
ANR	1017604	CastTarget	sljit_ub		1017484	0					
ANR	1017605	Identifier	srcw		1017484	1					
ANR	1017606	Identifier	srcw		1017484	2					
ANR	1017607	Label	case SLJIT_MOV_SB :	1888:1:58441:58458	1017484	7	True				
ANR	1017608	Identifier	SLJIT_MOV_SB		1017484	0					
ANR	1017609	ReturnStatement	"return emit_op ( compiler , SLJIT_MOV_SB , ALLOW_ANY_IMM | SIGNED_DATA | BYTE_DATA , dst , dstw , TMP_REG1 , 0 , src , ( src & SLJIT_IMM ) ? ( sljit_sb ) srcw : srcw ) ;"	1889:2:58462:58613	1017484	8	True				
ANR	1017610	CallExpression	"emit_op ( compiler , SLJIT_MOV_SB , ALLOW_ANY_IMM | SIGNED_DATA | BYTE_DATA , dst , dstw , TMP_REG1 , 0 , src , ( src & SLJIT_IMM ) ? ( sljit_sb ) srcw : srcw )"		1017484	0					
ANR	1017611	Callee	emit_op		1017484	0					
ANR	1017612	Identifier	emit_op		1017484	0					
ANR	1017613	ArgumentList	compiler		1017484	1					
ANR	1017614	Argument	compiler		1017484	0					
ANR	1017615	Identifier	compiler		1017484	0					
ANR	1017616	Argument	SLJIT_MOV_SB		1017484	1					
ANR	1017617	Identifier	SLJIT_MOV_SB		1017484	0					
ANR	1017618	Argument	ALLOW_ANY_IMM | SIGNED_DATA | BYTE_DATA		1017484	2					
ANR	1017619	InclusiveOrExpression	ALLOW_ANY_IMM | SIGNED_DATA | BYTE_DATA		1017484	0		|			
ANR	1017620	Identifier	ALLOW_ANY_IMM		1017484	0					
ANR	1017621	InclusiveOrExpression	SIGNED_DATA | BYTE_DATA		1017484	1		|			
ANR	1017622	Identifier	SIGNED_DATA		1017484	0					
ANR	1017623	Identifier	BYTE_DATA		1017484	1					
ANR	1017624	Argument	dst		1017484	3					
ANR	1017625	Identifier	dst		1017484	0					
ANR	1017626	Argument	dstw		1017484	4					
ANR	1017627	Identifier	dstw		1017484	0					
ANR	1017628	Argument	TMP_REG1		1017484	5					
ANR	1017629	Identifier	TMP_REG1		1017484	0					
ANR	1017630	Argument	0		1017484	6					
ANR	1017631	PrimaryExpression	0		1017484	0					
ANR	1017632	Argument	src		1017484	7					
ANR	1017633	Identifier	src		1017484	0					
ANR	1017634	Argument	( src & SLJIT_IMM ) ? ( sljit_sb ) srcw : srcw		1017484	8					
ANR	1017635	ConditionalExpression	( src & SLJIT_IMM ) ? ( sljit_sb ) srcw : srcw		1017484	0					
ANR	1017636	Condition	src & SLJIT_IMM		1017484	0					
ANR	1017637	BitAndExpression	src & SLJIT_IMM		1017484	0		&			
ANR	1017638	Identifier	src		1017484	0					
ANR	1017639	Identifier	SLJIT_IMM		1017484	1					
ANR	1017640	CastExpression	( sljit_sb ) srcw		1017484	1					
ANR	1017641	CastTarget	sljit_sb		1017484	0					
ANR	1017642	Identifier	srcw		1017484	1					
ANR	1017643	Identifier	srcw		1017484	2					
ANR	1017644	Label	case SLJIT_MOV_UH :	1891:1:58617:58634	1017484	9	True				
ANR	1017645	Identifier	SLJIT_MOV_UH		1017484	0					
ANR	1017646	ReturnStatement	"return emit_op ( compiler , SLJIT_MOV_UH , ALLOW_ANY_IMM | HALF_DATA , dst , dstw , TMP_REG1 , 0 , src , ( src & SLJIT_IMM ) ? ( sljit_uh ) srcw : srcw ) ;"	1892:2:58638:58775	1017484	10	True				
ANR	1017647	CallExpression	"emit_op ( compiler , SLJIT_MOV_UH , ALLOW_ANY_IMM | HALF_DATA , dst , dstw , TMP_REG1 , 0 , src , ( src & SLJIT_IMM ) ? ( sljit_uh ) srcw : srcw )"		1017484	0					
ANR	1017648	Callee	emit_op		1017484	0					
ANR	1017649	Identifier	emit_op		1017484	0					
ANR	1017650	ArgumentList	compiler		1017484	1					
ANR	1017651	Argument	compiler		1017484	0					
ANR	1017652	Identifier	compiler		1017484	0					
ANR	1017653	Argument	SLJIT_MOV_UH		1017484	1					
ANR	1017654	Identifier	SLJIT_MOV_UH		1017484	0					
ANR	1017655	Argument	ALLOW_ANY_IMM | HALF_DATA		1017484	2					
ANR	1017656	InclusiveOrExpression	ALLOW_ANY_IMM | HALF_DATA		1017484	0		|			
ANR	1017657	Identifier	ALLOW_ANY_IMM		1017484	0					
ANR	1017658	Identifier	HALF_DATA		1017484	1					
ANR	1017659	Argument	dst		1017484	3					
ANR	1017660	Identifier	dst		1017484	0					
ANR	1017661	Argument	dstw		1017484	4					
ANR	1017662	Identifier	dstw		1017484	0					
ANR	1017663	Argument	TMP_REG1		1017484	5					
ANR	1017664	Identifier	TMP_REG1		1017484	0					
ANR	1017665	Argument	0		1017484	6					
ANR	1017666	PrimaryExpression	0		1017484	0					
ANR	1017667	Argument	src		1017484	7					
ANR	1017668	Identifier	src		1017484	0					
ANR	1017669	Argument	( src & SLJIT_IMM ) ? ( sljit_uh ) srcw : srcw		1017484	8					
ANR	1017670	ConditionalExpression	( src & SLJIT_IMM ) ? ( sljit_uh ) srcw : srcw		1017484	0					
ANR	1017671	Condition	src & SLJIT_IMM		1017484	0					
ANR	1017672	BitAndExpression	src & SLJIT_IMM		1017484	0		&			
ANR	1017673	Identifier	src		1017484	0					
ANR	1017674	Identifier	SLJIT_IMM		1017484	1					
ANR	1017675	CastExpression	( sljit_uh ) srcw		1017484	1					
ANR	1017676	CastTarget	sljit_uh		1017484	0					
ANR	1017677	Identifier	srcw		1017484	1					
ANR	1017678	Identifier	srcw		1017484	2					
ANR	1017679	Label	case SLJIT_MOV_SH :	1894:1:58779:58796	1017484	11	True				
ANR	1017680	Identifier	SLJIT_MOV_SH		1017484	0					
ANR	1017681	ReturnStatement	"return emit_op ( compiler , SLJIT_MOV_SH , ALLOW_ANY_IMM | SIGNED_DATA | HALF_DATA , dst , dstw , TMP_REG1 , 0 , src , ( src & SLJIT_IMM ) ? ( sljit_sh ) srcw : srcw ) ;"	1895:2:58800:58951	1017484	12	True				
ANR	1017682	CallExpression	"emit_op ( compiler , SLJIT_MOV_SH , ALLOW_ANY_IMM | SIGNED_DATA | HALF_DATA , dst , dstw , TMP_REG1 , 0 , src , ( src & SLJIT_IMM ) ? ( sljit_sh ) srcw : srcw )"		1017484	0					
ANR	1017683	Callee	emit_op		1017484	0					
ANR	1017684	Identifier	emit_op		1017484	0					
ANR	1017685	ArgumentList	compiler		1017484	1					
ANR	1017686	Argument	compiler		1017484	0					
ANR	1017687	Identifier	compiler		1017484	0					
ANR	1017688	Argument	SLJIT_MOV_SH		1017484	1					
ANR	1017689	Identifier	SLJIT_MOV_SH		1017484	0					
ANR	1017690	Argument	ALLOW_ANY_IMM | SIGNED_DATA | HALF_DATA		1017484	2					
ANR	1017691	InclusiveOrExpression	ALLOW_ANY_IMM | SIGNED_DATA | HALF_DATA		1017484	0		|			
ANR	1017692	Identifier	ALLOW_ANY_IMM		1017484	0					
ANR	1017693	InclusiveOrExpression	SIGNED_DATA | HALF_DATA		1017484	1		|			
ANR	1017694	Identifier	SIGNED_DATA		1017484	0					
ANR	1017695	Identifier	HALF_DATA		1017484	1					
ANR	1017696	Argument	dst		1017484	3					
ANR	1017697	Identifier	dst		1017484	0					
ANR	1017698	Argument	dstw		1017484	4					
ANR	1017699	Identifier	dstw		1017484	0					
ANR	1017700	Argument	TMP_REG1		1017484	5					
ANR	1017701	Identifier	TMP_REG1		1017484	0					
ANR	1017702	Argument	0		1017484	6					
ANR	1017703	PrimaryExpression	0		1017484	0					
ANR	1017704	Argument	src		1017484	7					
ANR	1017705	Identifier	src		1017484	0					
ANR	1017706	Argument	( src & SLJIT_IMM ) ? ( sljit_sh ) srcw : srcw		1017484	8					
ANR	1017707	ConditionalExpression	( src & SLJIT_IMM ) ? ( sljit_sh ) srcw : srcw		1017484	0					
ANR	1017708	Condition	src & SLJIT_IMM		1017484	0					
ANR	1017709	BitAndExpression	src & SLJIT_IMM		1017484	0		&			
ANR	1017710	Identifier	src		1017484	0					
ANR	1017711	Identifier	SLJIT_IMM		1017484	1					
ANR	1017712	CastExpression	( sljit_sh ) srcw		1017484	1					
ANR	1017713	CastTarget	sljit_sh		1017484	0					
ANR	1017714	Identifier	srcw		1017484	1					
ANR	1017715	Identifier	srcw		1017484	2					
ANR	1017716	Label	case SLJIT_MOVU :	1897:1:58955:58970	1017484	13	True				
ANR	1017717	Identifier	SLJIT_MOVU		1017484	0					
ANR	1017718	Label	case SLJIT_MOVU_UI :	1898:1:58973:58991	1017484	14	True				
ANR	1017719	Identifier	SLJIT_MOVU_UI		1017484	0					
ANR	1017720	Label	case SLJIT_MOVU_SI :	1899:1:58994:59012	1017484	15	True				
ANR	1017721	Identifier	SLJIT_MOVU_SI		1017484	0					
ANR	1017722	Label	case SLJIT_MOVU_P :	1900:1:59015:59032	1017484	16	True				
ANR	1017723	Identifier	SLJIT_MOVU_P		1017484	0					
ANR	1017724	ReturnStatement	"return emit_op ( compiler , SLJIT_MOV , ALLOW_ANY_IMM | WRITE_BACK , dst , dstw , TMP_REG1 , 0 , src , srcw ) ;"	1901:2:59036:59134	1017484	17	True				
ANR	1017725	CallExpression	"emit_op ( compiler , SLJIT_MOV , ALLOW_ANY_IMM | WRITE_BACK , dst , dstw , TMP_REG1 , 0 , src , srcw )"		1017484	0					
ANR	1017726	Callee	emit_op		1017484	0					
ANR	1017727	Identifier	emit_op		1017484	0					
ANR	1017728	ArgumentList	compiler		1017484	1					
ANR	1017729	Argument	compiler		1017484	0					
ANR	1017730	Identifier	compiler		1017484	0					
ANR	1017731	Argument	SLJIT_MOV		1017484	1					
ANR	1017732	Identifier	SLJIT_MOV		1017484	0					
ANR	1017733	Argument	ALLOW_ANY_IMM | WRITE_BACK		1017484	2					
ANR	1017734	InclusiveOrExpression	ALLOW_ANY_IMM | WRITE_BACK		1017484	0		|			
ANR	1017735	Identifier	ALLOW_ANY_IMM		1017484	0					
ANR	1017736	Identifier	WRITE_BACK		1017484	1					
ANR	1017737	Argument	dst		1017484	3					
ANR	1017738	Identifier	dst		1017484	0					
ANR	1017739	Argument	dstw		1017484	4					
ANR	1017740	Identifier	dstw		1017484	0					
ANR	1017741	Argument	TMP_REG1		1017484	5					
ANR	1017742	Identifier	TMP_REG1		1017484	0					
ANR	1017743	Argument	0		1017484	6					
ANR	1017744	PrimaryExpression	0		1017484	0					
ANR	1017745	Argument	src		1017484	7					
ANR	1017746	Identifier	src		1017484	0					
ANR	1017747	Argument	srcw		1017484	8					
ANR	1017748	Identifier	srcw		1017484	0					
ANR	1017749	Label	case SLJIT_MOVU_UB :	1903:1:59138:59156	1017484	18	True				
ANR	1017750	Identifier	SLJIT_MOVU_UB		1017484	0					
ANR	1017751	ReturnStatement	"return emit_op ( compiler , SLJIT_MOV_UB , ALLOW_ANY_IMM | BYTE_DATA | WRITE_BACK , dst , dstw , TMP_REG1 , 0 , src , ( src & SLJIT_IMM ) ? ( sljit_ub ) srcw : srcw ) ;"	1904:2:59160:59310	1017484	19	True				
ANR	1017752	CallExpression	"emit_op ( compiler , SLJIT_MOV_UB , ALLOW_ANY_IMM | BYTE_DATA | WRITE_BACK , dst , dstw , TMP_REG1 , 0 , src , ( src & SLJIT_IMM ) ? ( sljit_ub ) srcw : srcw )"		1017484	0					
ANR	1017753	Callee	emit_op		1017484	0					
ANR	1017754	Identifier	emit_op		1017484	0					
ANR	1017755	ArgumentList	compiler		1017484	1					
ANR	1017756	Argument	compiler		1017484	0					
ANR	1017757	Identifier	compiler		1017484	0					
ANR	1017758	Argument	SLJIT_MOV_UB		1017484	1					
ANR	1017759	Identifier	SLJIT_MOV_UB		1017484	0					
ANR	1017760	Argument	ALLOW_ANY_IMM | BYTE_DATA | WRITE_BACK		1017484	2					
ANR	1017761	InclusiveOrExpression	ALLOW_ANY_IMM | BYTE_DATA | WRITE_BACK		1017484	0		|			
ANR	1017762	Identifier	ALLOW_ANY_IMM		1017484	0					
ANR	1017763	InclusiveOrExpression	BYTE_DATA | WRITE_BACK		1017484	1		|			
ANR	1017764	Identifier	BYTE_DATA		1017484	0					
ANR	1017765	Identifier	WRITE_BACK		1017484	1					
ANR	1017766	Argument	dst		1017484	3					
ANR	1017767	Identifier	dst		1017484	0					
ANR	1017768	Argument	dstw		1017484	4					
ANR	1017769	Identifier	dstw		1017484	0					
ANR	1017770	Argument	TMP_REG1		1017484	5					
ANR	1017771	Identifier	TMP_REG1		1017484	0					
ANR	1017772	Argument	0		1017484	6					
ANR	1017773	PrimaryExpression	0		1017484	0					
ANR	1017774	Argument	src		1017484	7					
ANR	1017775	Identifier	src		1017484	0					
ANR	1017776	Argument	( src & SLJIT_IMM ) ? ( sljit_ub ) srcw : srcw		1017484	8					
ANR	1017777	ConditionalExpression	( src & SLJIT_IMM ) ? ( sljit_ub ) srcw : srcw		1017484	0					
ANR	1017778	Condition	src & SLJIT_IMM		1017484	0					
ANR	1017779	BitAndExpression	src & SLJIT_IMM		1017484	0		&			
ANR	1017780	Identifier	src		1017484	0					
ANR	1017781	Identifier	SLJIT_IMM		1017484	1					
ANR	1017782	CastExpression	( sljit_ub ) srcw		1017484	1					
ANR	1017783	CastTarget	sljit_ub		1017484	0					
ANR	1017784	Identifier	srcw		1017484	1					
ANR	1017785	Identifier	srcw		1017484	2					
ANR	1017786	Label	case SLJIT_MOVU_SB :	1906:1:59314:59332	1017484	20	True				
ANR	1017787	Identifier	SLJIT_MOVU_SB		1017484	0					
ANR	1017788	ReturnStatement	"return emit_op ( compiler , SLJIT_MOV_SB , ALLOW_ANY_IMM | SIGNED_DATA | BYTE_DATA | WRITE_BACK , dst , dstw , TMP_REG1 , 0 , src , ( src & SLJIT_IMM ) ? ( sljit_sb ) srcw : srcw ) ;"	1907:2:59336:59500	1017484	21	True				
ANR	1017789	CallExpression	"emit_op ( compiler , SLJIT_MOV_SB , ALLOW_ANY_IMM | SIGNED_DATA | BYTE_DATA | WRITE_BACK , dst , dstw , TMP_REG1 , 0 , src , ( src & SLJIT_IMM ) ? ( sljit_sb ) srcw : srcw )"		1017484	0					
ANR	1017790	Callee	emit_op		1017484	0					
ANR	1017791	Identifier	emit_op		1017484	0					
ANR	1017792	ArgumentList	compiler		1017484	1					
ANR	1017793	Argument	compiler		1017484	0					
ANR	1017794	Identifier	compiler		1017484	0					
ANR	1017795	Argument	SLJIT_MOV_SB		1017484	1					
ANR	1017796	Identifier	SLJIT_MOV_SB		1017484	0					
ANR	1017797	Argument	ALLOW_ANY_IMM | SIGNED_DATA | BYTE_DATA | WRITE_BACK		1017484	2					
ANR	1017798	InclusiveOrExpression	ALLOW_ANY_IMM | SIGNED_DATA | BYTE_DATA | WRITE_BACK		1017484	0		|			
ANR	1017799	Identifier	ALLOW_ANY_IMM		1017484	0					
ANR	1017800	InclusiveOrExpression	SIGNED_DATA | BYTE_DATA | WRITE_BACK		1017484	1		|			
ANR	1017801	Identifier	SIGNED_DATA		1017484	0					
ANR	1017802	InclusiveOrExpression	BYTE_DATA | WRITE_BACK		1017484	1		|			
ANR	1017803	Identifier	BYTE_DATA		1017484	0					
ANR	1017804	Identifier	WRITE_BACK		1017484	1					
ANR	1017805	Argument	dst		1017484	3					
ANR	1017806	Identifier	dst		1017484	0					
ANR	1017807	Argument	dstw		1017484	4					
ANR	1017808	Identifier	dstw		1017484	0					
ANR	1017809	Argument	TMP_REG1		1017484	5					
ANR	1017810	Identifier	TMP_REG1		1017484	0					
ANR	1017811	Argument	0		1017484	6					
ANR	1017812	PrimaryExpression	0		1017484	0					
ANR	1017813	Argument	src		1017484	7					
ANR	1017814	Identifier	src		1017484	0					
ANR	1017815	Argument	( src & SLJIT_IMM ) ? ( sljit_sb ) srcw : srcw		1017484	8					
ANR	1017816	ConditionalExpression	( src & SLJIT_IMM ) ? ( sljit_sb ) srcw : srcw		1017484	0					
ANR	1017817	Condition	src & SLJIT_IMM		1017484	0					
ANR	1017818	BitAndExpression	src & SLJIT_IMM		1017484	0		&			
ANR	1017819	Identifier	src		1017484	0					
ANR	1017820	Identifier	SLJIT_IMM		1017484	1					
ANR	1017821	CastExpression	( sljit_sb ) srcw		1017484	1					
ANR	1017822	CastTarget	sljit_sb		1017484	0					
ANR	1017823	Identifier	srcw		1017484	1					
ANR	1017824	Identifier	srcw		1017484	2					
ANR	1017825	Label	case SLJIT_MOVU_UH :	1909:1:59504:59522	1017484	22	True				
ANR	1017826	Identifier	SLJIT_MOVU_UH		1017484	0					
ANR	1017827	ReturnStatement	"return emit_op ( compiler , SLJIT_MOV_UH , ALLOW_ANY_IMM | HALF_DATA | WRITE_BACK , dst , dstw , TMP_REG1 , 0 , src , ( src & SLJIT_IMM ) ? ( sljit_uh ) srcw : srcw ) ;"	1910:2:59526:59676	1017484	23	True				
ANR	1017828	CallExpression	"emit_op ( compiler , SLJIT_MOV_UH , ALLOW_ANY_IMM | HALF_DATA | WRITE_BACK , dst , dstw , TMP_REG1 , 0 , src , ( src & SLJIT_IMM ) ? ( sljit_uh ) srcw : srcw )"		1017484	0					
ANR	1017829	Callee	emit_op		1017484	0					
ANR	1017830	Identifier	emit_op		1017484	0					
ANR	1017831	ArgumentList	compiler		1017484	1					
ANR	1017832	Argument	compiler		1017484	0					
ANR	1017833	Identifier	compiler		1017484	0					
ANR	1017834	Argument	SLJIT_MOV_UH		1017484	1					
ANR	1017835	Identifier	SLJIT_MOV_UH		1017484	0					
ANR	1017836	Argument	ALLOW_ANY_IMM | HALF_DATA | WRITE_BACK		1017484	2					
ANR	1017837	InclusiveOrExpression	ALLOW_ANY_IMM | HALF_DATA | WRITE_BACK		1017484	0		|			
ANR	1017838	Identifier	ALLOW_ANY_IMM		1017484	0					
ANR	1017839	InclusiveOrExpression	HALF_DATA | WRITE_BACK		1017484	1		|			
ANR	1017840	Identifier	HALF_DATA		1017484	0					
ANR	1017841	Identifier	WRITE_BACK		1017484	1					
ANR	1017842	Argument	dst		1017484	3					
ANR	1017843	Identifier	dst		1017484	0					
ANR	1017844	Argument	dstw		1017484	4					
ANR	1017845	Identifier	dstw		1017484	0					
ANR	1017846	Argument	TMP_REG1		1017484	5					
ANR	1017847	Identifier	TMP_REG1		1017484	0					
ANR	1017848	Argument	0		1017484	6					
ANR	1017849	PrimaryExpression	0		1017484	0					
ANR	1017850	Argument	src		1017484	7					
ANR	1017851	Identifier	src		1017484	0					
ANR	1017852	Argument	( src & SLJIT_IMM ) ? ( sljit_uh ) srcw : srcw		1017484	8					
ANR	1017853	ConditionalExpression	( src & SLJIT_IMM ) ? ( sljit_uh ) srcw : srcw		1017484	0					
ANR	1017854	Condition	src & SLJIT_IMM		1017484	0					
ANR	1017855	BitAndExpression	src & SLJIT_IMM		1017484	0		&			
ANR	1017856	Identifier	src		1017484	0					
ANR	1017857	Identifier	SLJIT_IMM		1017484	1					
ANR	1017858	CastExpression	( sljit_uh ) srcw		1017484	1					
ANR	1017859	CastTarget	sljit_uh		1017484	0					
ANR	1017860	Identifier	srcw		1017484	1					
ANR	1017861	Identifier	srcw		1017484	2					
ANR	1017862	Label	case SLJIT_MOVU_SH :	1912:1:59680:59698	1017484	24	True				
ANR	1017863	Identifier	SLJIT_MOVU_SH		1017484	0					
ANR	1017864	ReturnStatement	"return emit_op ( compiler , SLJIT_MOV_SH , ALLOW_ANY_IMM | SIGNED_DATA | HALF_DATA | WRITE_BACK , dst , dstw , TMP_REG1 , 0 , src , ( src & SLJIT_IMM ) ? ( sljit_sh ) srcw : srcw ) ;"	1913:2:59702:59866	1017484	25	True				
ANR	1017865	CallExpression	"emit_op ( compiler , SLJIT_MOV_SH , ALLOW_ANY_IMM | SIGNED_DATA | HALF_DATA | WRITE_BACK , dst , dstw , TMP_REG1 , 0 , src , ( src & SLJIT_IMM ) ? ( sljit_sh ) srcw : srcw )"		1017484	0					
ANR	1017866	Callee	emit_op		1017484	0					
ANR	1017867	Identifier	emit_op		1017484	0					
ANR	1017868	ArgumentList	compiler		1017484	1					
ANR	1017869	Argument	compiler		1017484	0					
ANR	1017870	Identifier	compiler		1017484	0					
ANR	1017871	Argument	SLJIT_MOV_SH		1017484	1					
ANR	1017872	Identifier	SLJIT_MOV_SH		1017484	0					
ANR	1017873	Argument	ALLOW_ANY_IMM | SIGNED_DATA | HALF_DATA | WRITE_BACK		1017484	2					
ANR	1017874	InclusiveOrExpression	ALLOW_ANY_IMM | SIGNED_DATA | HALF_DATA | WRITE_BACK		1017484	0		|			
ANR	1017875	Identifier	ALLOW_ANY_IMM		1017484	0					
ANR	1017876	InclusiveOrExpression	SIGNED_DATA | HALF_DATA | WRITE_BACK		1017484	1		|			
ANR	1017877	Identifier	SIGNED_DATA		1017484	0					
ANR	1017878	InclusiveOrExpression	HALF_DATA | WRITE_BACK		1017484	1		|			
ANR	1017879	Identifier	HALF_DATA		1017484	0					
ANR	1017880	Identifier	WRITE_BACK		1017484	1					
ANR	1017881	Argument	dst		1017484	3					
ANR	1017882	Identifier	dst		1017484	0					
ANR	1017883	Argument	dstw		1017484	4					
ANR	1017884	Identifier	dstw		1017484	0					
ANR	1017885	Argument	TMP_REG1		1017484	5					
ANR	1017886	Identifier	TMP_REG1		1017484	0					
ANR	1017887	Argument	0		1017484	6					
ANR	1017888	PrimaryExpression	0		1017484	0					
ANR	1017889	Argument	src		1017484	7					
ANR	1017890	Identifier	src		1017484	0					
ANR	1017891	Argument	( src & SLJIT_IMM ) ? ( sljit_sh ) srcw : srcw		1017484	8					
ANR	1017892	ConditionalExpression	( src & SLJIT_IMM ) ? ( sljit_sh ) srcw : srcw		1017484	0					
ANR	1017893	Condition	src & SLJIT_IMM		1017484	0					
ANR	1017894	BitAndExpression	src & SLJIT_IMM		1017484	0		&			
ANR	1017895	Identifier	src		1017484	0					
ANR	1017896	Identifier	SLJIT_IMM		1017484	1					
ANR	1017897	CastExpression	( sljit_sh ) srcw		1017484	1					
ANR	1017898	CastTarget	sljit_sh		1017484	0					
ANR	1017899	Identifier	srcw		1017484	1					
ANR	1017900	Identifier	srcw		1017484	2					
ANR	1017901	Label	case SLJIT_NOT :	1915:1:59870:59884	1017484	26	True				
ANR	1017902	Identifier	SLJIT_NOT		1017484	0					
ANR	1017903	ReturnStatement	"return emit_op ( compiler , op , ALLOW_ANY_IMM , dst , dstw , TMP_REG1 , 0 , src , srcw ) ;"	1916:2:59888:59966	1017484	27	True				
ANR	1017904	CallExpression	"emit_op ( compiler , op , ALLOW_ANY_IMM , dst , dstw , TMP_REG1 , 0 , src , srcw )"		1017484	0					
ANR	1017905	Callee	emit_op		1017484	0					
ANR	1017906	Identifier	emit_op		1017484	0					
ANR	1017907	ArgumentList	compiler		1017484	1					
ANR	1017908	Argument	compiler		1017484	0					
ANR	1017909	Identifier	compiler		1017484	0					
ANR	1017910	Argument	op		1017484	1					
ANR	1017911	Identifier	op		1017484	0					
ANR	1017912	Argument	ALLOW_ANY_IMM		1017484	2					
ANR	1017913	Identifier	ALLOW_ANY_IMM		1017484	0					
ANR	1017914	Argument	dst		1017484	3					
ANR	1017915	Identifier	dst		1017484	0					
ANR	1017916	Argument	dstw		1017484	4					
ANR	1017917	Identifier	dstw		1017484	0					
ANR	1017918	Argument	TMP_REG1		1017484	5					
ANR	1017919	Identifier	TMP_REG1		1017484	0					
ANR	1017920	Argument	0		1017484	6					
ANR	1017921	PrimaryExpression	0		1017484	0					
ANR	1017922	Argument	src		1017484	7					
ANR	1017923	Identifier	src		1017484	0					
ANR	1017924	Argument	srcw		1017484	8					
ANR	1017925	Identifier	srcw		1017484	0					
ANR	1017926	Label	case SLJIT_NEG :	1918:1:59970:59984	1017484	28	True				
ANR	1017927	Identifier	SLJIT_NEG		1017484	0					
ANR	1017928	Statement	||	1920:3:60036:60037	1017484	29	True				
ANR	1017929	Statement	(	1920:6:60039:60039	1017484	30	True				
ANR	1017930	Statement	defined	1920:7:60040:60046	1017484	31	True				
ANR	1017931	Statement	SLJIT_ARGUMENT_CHECKS	1920:15:60048:60068	1017484	32	True				
ANR	1017932	Statement	&&	1920:37:60070:60071	1017484	33	True				
ANR	1017933	Statement	SLJIT_ARGUMENT_CHECKS	1920:40:60073:60093	1017484	34	True				
ANR	1017934	Statement	)	1920:61:60094:60094	1017484	35	True				
ANR	1017935	ExpressionStatement	compiler -> skip_checks = 1	1921:2:60098:60123	1017484	36	True				
ANR	1017936	AssignmentExpression	compiler -> skip_checks = 1		1017484	0		=			
ANR	1017937	PtrMemberAccess	compiler -> skip_checks		1017484	0					
ANR	1017938	Identifier	compiler		1017484	0					
ANR	1017939	Identifier	skip_checks		1017484	1					
ANR	1017940	PrimaryExpression	1		1017484	1					
ANR	1017941	ReturnStatement	"return sljit_emit_op2 ( compiler , SLJIT_SUB | GET_ALL_FLAGS ( op ) , dst , dstw , SLJIT_IMM , 0 , src , srcw ) ;"	1923:2:60134:60232	1017484	37	True				
ANR	1017942	CallExpression	"sljit_emit_op2 ( compiler , SLJIT_SUB | GET_ALL_FLAGS ( op ) , dst , dstw , SLJIT_IMM , 0 , src , srcw )"		1017484	0					
ANR	1017943	Callee	sljit_emit_op2		1017484	0					
ANR	1017944	Identifier	sljit_emit_op2		1017484	0					
ANR	1017945	ArgumentList	compiler		1017484	1					
ANR	1017946	Argument	compiler		1017484	0					
ANR	1017947	Identifier	compiler		1017484	0					
ANR	1017948	Argument	SLJIT_SUB | GET_ALL_FLAGS ( op )		1017484	1					
ANR	1017949	InclusiveOrExpression	SLJIT_SUB | GET_ALL_FLAGS ( op )		1017484	0		|			
ANR	1017950	Identifier	SLJIT_SUB		1017484	0					
ANR	1017951	CallExpression	GET_ALL_FLAGS ( op )		1017484	1					
ANR	1017952	Callee	GET_ALL_FLAGS		1017484	0					
ANR	1017953	Identifier	GET_ALL_FLAGS		1017484	0					
ANR	1017954	ArgumentList	op		1017484	1					
ANR	1017955	Argument	op		1017484	0					
ANR	1017956	Identifier	op		1017484	0					
ANR	1017957	Argument	dst		1017484	2					
ANR	1017958	Identifier	dst		1017484	0					
ANR	1017959	Argument	dstw		1017484	3					
ANR	1017960	Identifier	dstw		1017484	0					
ANR	1017961	Argument	SLJIT_IMM		1017484	4					
ANR	1017962	Identifier	SLJIT_IMM		1017484	0					
ANR	1017963	Argument	0		1017484	5					
ANR	1017964	PrimaryExpression	0		1017484	0					
ANR	1017965	Argument	src		1017484	6					
ANR	1017966	Identifier	src		1017484	0					
ANR	1017967	Argument	srcw		1017484	7					
ANR	1017968	Identifier	srcw		1017484	0					
ANR	1017969	Label	case SLJIT_CLZ :	1925:1:60236:60250	1017484	38	True				
ANR	1017970	Identifier	SLJIT_CLZ		1017484	0					
ANR	1017971	ReturnStatement	"return emit_op ( compiler , op , 0 , dst , dstw , TMP_REG1 , 0 , src , srcw ) ;"	1926:2:60254:60320	1017484	39	True				
ANR	1017972	CallExpression	"emit_op ( compiler , op , 0 , dst , dstw , TMP_REG1 , 0 , src , srcw )"		1017484	0					
ANR	1017973	Callee	emit_op		1017484	0					
ANR	1017974	Identifier	emit_op		1017484	0					
ANR	1017975	ArgumentList	compiler		1017484	1					
ANR	1017976	Argument	compiler		1017484	0					
ANR	1017977	Identifier	compiler		1017484	0					
ANR	1017978	Argument	op		1017484	1					
ANR	1017979	Identifier	op		1017484	0					
ANR	1017980	Argument	0		1017484	2					
ANR	1017981	PrimaryExpression	0		1017484	0					
ANR	1017982	Argument	dst		1017484	3					
ANR	1017983	Identifier	dst		1017484	0					
ANR	1017984	Argument	dstw		1017484	4					
ANR	1017985	Identifier	dstw		1017484	0					
ANR	1017986	Argument	TMP_REG1		1017484	5					
ANR	1017987	Identifier	TMP_REG1		1017484	0					
ANR	1017988	Argument	0		1017484	6					
ANR	1017989	PrimaryExpression	0		1017484	0					
ANR	1017990	Argument	src		1017484	7					
ANR	1017991	Identifier	src		1017484	0					
ANR	1017992	Argument	srcw		1017484	8					
ANR	1017993	Identifier	srcw		1017484	0					
ANR	1017994	ReturnStatement	return SLJIT_SUCCESS ;	1929:1:60327:60347	1017484	5	True				
ANR	1017995	Identifier	SLJIT_SUCCESS		1017484	0					
ANR	1017996	ReturnType	SLJIT_API_FUNC_ATTRIBUTE sljit_si		1017484	1					
ANR	1017997	Identifier	sljit_emit_op1		1017484	2					
ANR	1017998	ParameterList	"struct sljit_compiler * compiler , sljit_si op , sljit_si dst , sljit_sw dstw , sljit_si src , sljit_sw srcw"		1017484	3					
ANR	1017999	Parameter	struct sljit_compiler * compiler	1869:49:57828:57858	1017484	0	True				
ANR	1018000	ParameterType	struct sljit_compiler *		1017484	0					
ANR	1018001	Identifier	compiler		1017484	1					
ANR	1018002	Parameter	sljit_si op	1869:82:57861:57871	1017484	1	True				
ANR	1018003	ParameterType	sljit_si		1017484	0					
ANR	1018004	Identifier	op		1017484	1					
ANR	1018005	Parameter	sljit_si dst	1870:1:57875:57886	1017484	2	True				
ANR	1018006	ParameterType	sljit_si		1017484	0					
ANR	1018007	Identifier	dst		1017484	1					
ANR	1018008	Parameter	sljit_sw dstw	1870:15:57889:57901	1017484	3	True				
ANR	1018009	ParameterType	sljit_sw		1017484	0					
ANR	1018010	Identifier	dstw		1017484	1					
ANR	1018011	Parameter	sljit_si src	1871:1:57905:57916	1017484	4	True				
ANR	1018012	ParameterType	sljit_si		1017484	0					
ANR	1018013	Identifier	src		1017484	1					
ANR	1018014	Parameter	sljit_sw srcw	1871:15:57919:57931	1017484	5	True				
ANR	1018015	ParameterType	sljit_sw		1017484	0					
ANR	1018016	Identifier	srcw		1017484	1					
ANR	1018017	CFGEntryNode	ENTRY		1017484		True				
ANR	1018018	CFGExitNode	EXIT		1017484		True				
ANR	1018019	Symbol	TMP_REG1		1017484						
ANR	1018020	Symbol	sljit_emit_op2		1017484						
ANR	1018021	Symbol	dst		1017484						
ANR	1018022	Symbol	SLJIT_MOV		1017484						
ANR	1018023	Symbol	* compiler		1017484						
ANR	1018024	Symbol	GET_OPCODE		1017484						
ANR	1018025	Symbol	BYTE_DATA		1017484						
ANR	1018026	Symbol	GET_ALL_FLAGS		1017484						
ANR	1018027	Symbol	SLJIT_IMM		1017484						
ANR	1018028	Symbol	SLJIT_MOV_UH		1017484						
ANR	1018029	Symbol	SLJIT_MOV_SH		1017484						
ANR	1018030	Symbol	compiler		1017484						
ANR	1018031	Symbol	WRITE_BACK		1017484						
ANR	1018032	Symbol	emit_op		1017484						
ANR	1018033	Symbol	op		1017484						
ANR	1018034	Symbol	ALLOW_ANY_IMM		1017484						
ANR	1018035	Symbol	src		1017484						
ANR	1018036	Symbol	check_sljit_emit_op1		1017484						
ANR	1018037	Symbol	HALF_DATA		1017484						
ANR	1018038	Symbol	srcw		1017484						
ANR	1018039	Symbol	SLJIT_MOV_SB		1017484						
ANR	1018040	Symbol	SLJIT_SUB		1017484						
ANR	1018041	Symbol	SLJIT_SUCCESS		1017484						
ANR	1018042	Symbol	SLJIT_MOV_UB		1017484						
ANR	1018043	Symbol	SIGNED_DATA		1017484						
ANR	1018044	Symbol	compiler -> skip_checks		1017484						
ANR	1018045	Symbol	dstw		1017484						
ANR	1018046	Function	sljit_emit_op2	1932:0:60352:61486							
ANR	1018047	FunctionDef	"sljit_emit_op2 (struct sljit_compiler * compiler , sljit_si op , sljit_si dst , sljit_sw dstw , sljit_si src1 , sljit_sw src1w , sljit_si src2 , sljit_sw src2w)"		1018046	0					
ANR	1018048	CompoundStatement		1936:0:60541:61486	1018046	0					
ANR	1018049	ExpressionStatement	CHECK_ERROR ( )	1937:1:60544:60557	1018046	0	True				
ANR	1018050	CallExpression	CHECK_ERROR ( )		1018046	0					
ANR	1018051	Callee	CHECK_ERROR		1018046	0					
ANR	1018052	Identifier	CHECK_ERROR		1018046	0					
ANR	1018053	ArgumentList			1018046	1					
ANR	1018054	ExpressionStatement	"CHECK ( check_sljit_emit_op2 ( compiler , op , dst , dstw , src1 , src1w , src2 , src2w ) )"	1938:1:60560:60638	1018046	1	True				
ANR	1018055	CallExpression	"CHECK ( check_sljit_emit_op2 ( compiler , op , dst , dstw , src1 , src1w , src2 , src2w ) )"		1018046	0					
ANR	1018056	Callee	CHECK		1018046	0					
ANR	1018057	Identifier	CHECK		1018046	0					
ANR	1018058	ArgumentList	"check_sljit_emit_op2 ( compiler , op , dst , dstw , src1 , src1w , src2 , src2w )"		1018046	1					
ANR	1018059	Argument	"check_sljit_emit_op2 ( compiler , op , dst , dstw , src1 , src1w , src2 , src2w )"		1018046	0					
ANR	1018060	CallExpression	"check_sljit_emit_op2 ( compiler , op , dst , dstw , src1 , src1w , src2 , src2w )"		1018046	0					
ANR	1018061	Callee	check_sljit_emit_op2		1018046	0					
ANR	1018062	Identifier	check_sljit_emit_op2		1018046	0					
ANR	1018063	ArgumentList	compiler		1018046	1					
ANR	1018064	Argument	compiler		1018046	0					
ANR	1018065	Identifier	compiler		1018046	0					
ANR	1018066	Argument	op		1018046	1					
ANR	1018067	Identifier	op		1018046	0					
ANR	1018068	Argument	dst		1018046	2					
ANR	1018069	Identifier	dst		1018046	0					
ANR	1018070	Argument	dstw		1018046	3					
ANR	1018071	Identifier	dstw		1018046	0					
ANR	1018072	Argument	src1		1018046	4					
ANR	1018073	Identifier	src1		1018046	0					
ANR	1018074	Argument	src1w		1018046	5					
ANR	1018075	Identifier	src1w		1018046	0					
ANR	1018076	Argument	src2		1018046	6					
ANR	1018077	Identifier	src2		1018046	0					
ANR	1018078	Argument	src2w		1018046	7					
ANR	1018079	Identifier	src2w		1018046	0					
ANR	1018080	ExpressionStatement	"ADJUST_LOCAL_OFFSET ( dst , dstw )"	1939:1:60641:60671	1018046	2	True				
ANR	1018081	CallExpression	"ADJUST_LOCAL_OFFSET ( dst , dstw )"		1018046	0					
ANR	1018082	Callee	ADJUST_LOCAL_OFFSET		1018046	0					
ANR	1018083	Identifier	ADJUST_LOCAL_OFFSET		1018046	0					
ANR	1018084	ArgumentList	dst		1018046	1					
ANR	1018085	Argument	dst		1018046	0					
ANR	1018086	Identifier	dst		1018046	0					
ANR	1018087	Argument	dstw		1018046	1					
ANR	1018088	Identifier	dstw		1018046	0					
ANR	1018089	ExpressionStatement	"ADJUST_LOCAL_OFFSET ( src1 , src1w )"	1940:1:60674:60706	1018046	3	True				
ANR	1018090	CallExpression	"ADJUST_LOCAL_OFFSET ( src1 , src1w )"		1018046	0					
ANR	1018091	Callee	ADJUST_LOCAL_OFFSET		1018046	0					
ANR	1018092	Identifier	ADJUST_LOCAL_OFFSET		1018046	0					
ANR	1018093	ArgumentList	src1		1018046	1					
ANR	1018094	Argument	src1		1018046	0					
ANR	1018095	Identifier	src1		1018046	0					
ANR	1018096	Argument	src1w		1018046	1					
ANR	1018097	Identifier	src1w		1018046	0					
ANR	1018098	ExpressionStatement	"ADJUST_LOCAL_OFFSET ( src2 , src2w )"	1941:1:60709:60741	1018046	4	True				
ANR	1018099	CallExpression	"ADJUST_LOCAL_OFFSET ( src2 , src2w )"		1018046	0					
ANR	1018100	Callee	ADJUST_LOCAL_OFFSET		1018046	0					
ANR	1018101	Identifier	ADJUST_LOCAL_OFFSET		1018046	0					
ANR	1018102	ArgumentList	src2		1018046	1					
ANR	1018103	Argument	src2		1018046	0					
ANR	1018104	Identifier	src2		1018046	0					
ANR	1018105	Argument	src2w		1018046	1					
ANR	1018106	Identifier	src2w		1018046	0					
ANR	1018107	SwitchStatement	switch ( GET_OPCODE ( op ) )		1018046	5					
ANR	1018108	Condition	GET_OPCODE ( op )	1943:9:60753:60766	1018046	0	True				
ANR	1018109	CallExpression	GET_OPCODE ( op )		1018046	0					
ANR	1018110	Callee	GET_OPCODE		1018046	0					
ANR	1018111	Identifier	GET_OPCODE		1018046	0					
ANR	1018112	ArgumentList	op		1018046	1					
ANR	1018113	Argument	op		1018046	0					
ANR	1018114	Identifier	op		1018046	0					
ANR	1018115	CompoundStatement		8:25:227:227	1018046	1					
ANR	1018116	Label	case SLJIT_ADD :	1944:1:60772:60786	1018046	0	True				
ANR	1018117	Identifier	SLJIT_ADD		1018046	0					
ANR	1018118	Label	case SLJIT_ADDC :	1945:1:60789:60804	1018046	1	True				
ANR	1018119	Identifier	SLJIT_ADDC		1018046	0					
ANR	1018120	Label	case SLJIT_SUB :	1946:1:60807:60821	1018046	2	True				
ANR	1018121	Identifier	SLJIT_SUB		1018046	0					
ANR	1018122	Label	case SLJIT_SUBC :	1947:1:60824:60839	1018046	3	True				
ANR	1018123	Identifier	SLJIT_SUBC		1018046	0					
ANR	1018124	Label	case SLJIT_OR :	1948:1:60842:60855	1018046	4	True				
ANR	1018125	Identifier	SLJIT_OR		1018046	0					
ANR	1018126	Label	case SLJIT_XOR :	1949:1:60858:60872	1018046	5	True				
ANR	1018127	Identifier	SLJIT_XOR		1018046	0					
ANR	1018128	ReturnStatement	"return emit_op ( compiler , op , ALLOW_IMM , dst , dstw , src1 , src1w , src2 , src2w ) ;"	1950:2:60876:60952	1018046	6	True				
ANR	1018129	CallExpression	"emit_op ( compiler , op , ALLOW_IMM , dst , dstw , src1 , src1w , src2 , src2w )"		1018046	0					
ANR	1018130	Callee	emit_op		1018046	0					
ANR	1018131	Identifier	emit_op		1018046	0					
ANR	1018132	ArgumentList	compiler		1018046	1					
ANR	1018133	Argument	compiler		1018046	0					
ANR	1018134	Identifier	compiler		1018046	0					
ANR	1018135	Argument	op		1018046	1					
ANR	1018136	Identifier	op		1018046	0					
ANR	1018137	Argument	ALLOW_IMM		1018046	2					
ANR	1018138	Identifier	ALLOW_IMM		1018046	0					
ANR	1018139	Argument	dst		1018046	3					
ANR	1018140	Identifier	dst		1018046	0					
ANR	1018141	Argument	dstw		1018046	4					
ANR	1018142	Identifier	dstw		1018046	0					
ANR	1018143	Argument	src1		1018046	5					
ANR	1018144	Identifier	src1		1018046	0					
ANR	1018145	Argument	src1w		1018046	6					
ANR	1018146	Identifier	src1w		1018046	0					
ANR	1018147	Argument	src2		1018046	7					
ANR	1018148	Identifier	src2		1018046	0					
ANR	1018149	Argument	src2w		1018046	8					
ANR	1018150	Identifier	src2w		1018046	0					
ANR	1018151	Label	case SLJIT_MUL :	1952:1:60956:60970	1018046	7	True				
ANR	1018152	Identifier	SLJIT_MUL		1018046	0					
ANR	1018153	ReturnStatement	"return emit_op ( compiler , op , 0 , dst , dstw , src1 , src1w , src2 , src2w ) ;"	1953:2:60974:61042	1018046	8	True				
ANR	1018154	CallExpression	"emit_op ( compiler , op , 0 , dst , dstw , src1 , src1w , src2 , src2w )"		1018046	0					
ANR	1018155	Callee	emit_op		1018046	0					
ANR	1018156	Identifier	emit_op		1018046	0					
ANR	1018157	ArgumentList	compiler		1018046	1					
ANR	1018158	Argument	compiler		1018046	0					
ANR	1018159	Identifier	compiler		1018046	0					
ANR	1018160	Argument	op		1018046	1					
ANR	1018161	Identifier	op		1018046	0					
ANR	1018162	Argument	0		1018046	2					
ANR	1018163	PrimaryExpression	0		1018046	0					
ANR	1018164	Argument	dst		1018046	3					
ANR	1018165	Identifier	dst		1018046	0					
ANR	1018166	Argument	dstw		1018046	4					
ANR	1018167	Identifier	dstw		1018046	0					
ANR	1018168	Argument	src1		1018046	5					
ANR	1018169	Identifier	src1		1018046	0					
ANR	1018170	Argument	src1w		1018046	6					
ANR	1018171	Identifier	src1w		1018046	0					
ANR	1018172	Argument	src2		1018046	7					
ANR	1018173	Identifier	src2		1018046	0					
ANR	1018174	Argument	src2w		1018046	8					
ANR	1018175	Identifier	src2w		1018046	0					
ANR	1018176	Label	case SLJIT_AND :	1955:1:61046:61060	1018046	9	True				
ANR	1018177	Identifier	SLJIT_AND		1018046	0					
ANR	1018178	ReturnStatement	"return emit_op ( compiler , op , ALLOW_ANY_IMM , dst , dstw , src1 , src1w , src2 , src2w ) ;"	1956:2:61064:61144	1018046	10	True				
ANR	1018179	CallExpression	"emit_op ( compiler , op , ALLOW_ANY_IMM , dst , dstw , src1 , src1w , src2 , src2w )"		1018046	0					
ANR	1018180	Callee	emit_op		1018046	0					
ANR	1018181	Identifier	emit_op		1018046	0					
ANR	1018182	ArgumentList	compiler		1018046	1					
ANR	1018183	Argument	compiler		1018046	0					
ANR	1018184	Identifier	compiler		1018046	0					
ANR	1018185	Argument	op		1018046	1					
ANR	1018186	Identifier	op		1018046	0					
ANR	1018187	Argument	ALLOW_ANY_IMM		1018046	2					
ANR	1018188	Identifier	ALLOW_ANY_IMM		1018046	0					
ANR	1018189	Argument	dst		1018046	3					
ANR	1018190	Identifier	dst		1018046	0					
ANR	1018191	Argument	dstw		1018046	4					
ANR	1018192	Identifier	dstw		1018046	0					
ANR	1018193	Argument	src1		1018046	5					
ANR	1018194	Identifier	src1		1018046	0					
ANR	1018195	Argument	src1w		1018046	6					
ANR	1018196	Identifier	src1w		1018046	0					
ANR	1018197	Argument	src2		1018046	7					
ANR	1018198	Identifier	src2		1018046	0					
ANR	1018199	Argument	src2w		1018046	8					
ANR	1018200	Identifier	src2w		1018046	0					
ANR	1018201	Label	case SLJIT_SHL :	1958:1:61148:61162	1018046	11	True				
ANR	1018202	Identifier	SLJIT_SHL		1018046	0					
ANR	1018203	Label	case SLJIT_LSHR :	1959:1:61165:61180	1018046	12	True				
ANR	1018204	Identifier	SLJIT_LSHR		1018046	0					
ANR	1018205	Label	case SLJIT_ASHR :	1960:1:61183:61198	1018046	13	True				
ANR	1018206	Identifier	SLJIT_ASHR		1018046	0					
ANR	1018207	IfStatement	if ( src2 & SLJIT_IMM )		1018046	14					
ANR	1018208	Condition	src2 & SLJIT_IMM	1961:6:61206:61221	1018046	0	True				
ANR	1018209	BitAndExpression	src2 & SLJIT_IMM		1018046	0		&			
ANR	1018210	Identifier	src2		1018046	0					
ANR	1018211	Identifier	SLJIT_IMM		1018046	1					
ANR	1018212	CompoundStatement		26:24:682:682	1018046	1					
ANR	1018213	ExpressionStatement	compiler -> shift_imm = src2w & 0x1f	1962:3:61229:61263	1018046	0	True				
ANR	1018214	AssignmentExpression	compiler -> shift_imm = src2w & 0x1f		1018046	0		=			
ANR	1018215	PtrMemberAccess	compiler -> shift_imm		1018046	0					
ANR	1018216	Identifier	compiler		1018046	0					
ANR	1018217	Identifier	shift_imm		1018046	1					
ANR	1018218	BitAndExpression	src2w & 0x1f		1018046	1		&			
ANR	1018219	Identifier	src2w		1018046	0					
ANR	1018220	PrimaryExpression	0x1f		1018046	1					
ANR	1018221	ReturnStatement	"return emit_op ( compiler , op , 0 , dst , dstw , TMP_REG1 , 0 , src1 , src1w ) ;"	1963:3:61268:61336	1018046	1	True				
ANR	1018222	CallExpression	"emit_op ( compiler , op , 0 , dst , dstw , TMP_REG1 , 0 , src1 , src1w )"		1018046	0					
ANR	1018223	Callee	emit_op		1018046	0					
ANR	1018224	Identifier	emit_op		1018046	0					
ANR	1018225	ArgumentList	compiler		1018046	1					
ANR	1018226	Argument	compiler		1018046	0					
ANR	1018227	Identifier	compiler		1018046	0					
ANR	1018228	Argument	op		1018046	1					
ANR	1018229	Identifier	op		1018046	0					
ANR	1018230	Argument	0		1018046	2					
ANR	1018231	PrimaryExpression	0		1018046	0					
ANR	1018232	Argument	dst		1018046	3					
ANR	1018233	Identifier	dst		1018046	0					
ANR	1018234	Argument	dstw		1018046	4					
ANR	1018235	Identifier	dstw		1018046	0					
ANR	1018236	Argument	TMP_REG1		1018046	5					
ANR	1018237	Identifier	TMP_REG1		1018046	0					
ANR	1018238	Argument	0		1018046	6					
ANR	1018239	PrimaryExpression	0		1018046	0					
ANR	1018240	Argument	src1		1018046	7					
ANR	1018241	Identifier	src1		1018046	0					
ANR	1018242	Argument	src1w		1018046	8					
ANR	1018243	Identifier	src1w		1018046	0					
ANR	1018244	ElseStatement	else		1018046	0					
ANR	1018245	CompoundStatement		30:7:807:807	1018046	0					
ANR	1018246	ExpressionStatement	compiler -> shift_imm = 0x20	1966:3:61354:61380	1018046	0	True				
ANR	1018247	AssignmentExpression	compiler -> shift_imm = 0x20		1018046	0		=			
ANR	1018248	PtrMemberAccess	compiler -> shift_imm		1018046	0					
ANR	1018249	Identifier	compiler		1018046	0					
ANR	1018250	Identifier	shift_imm		1018046	1					
ANR	1018251	PrimaryExpression	0x20		1018046	1					
ANR	1018252	ReturnStatement	"return emit_op ( compiler , op , 0 , dst , dstw , src1 , src1w , src2 , src2w ) ;"	1967:3:61385:61453	1018046	1	True				
ANR	1018253	CallExpression	"emit_op ( compiler , op , 0 , dst , dstw , src1 , src1w , src2 , src2w )"		1018046	0					
ANR	1018254	Callee	emit_op		1018046	0					
ANR	1018255	Identifier	emit_op		1018046	0					
ANR	1018256	ArgumentList	compiler		1018046	1					
ANR	1018257	Argument	compiler		1018046	0					
ANR	1018258	Identifier	compiler		1018046	0					
ANR	1018259	Argument	op		1018046	1					
ANR	1018260	Identifier	op		1018046	0					
ANR	1018261	Argument	0		1018046	2					
ANR	1018262	PrimaryExpression	0		1018046	0					
ANR	1018263	Argument	dst		1018046	3					
ANR	1018264	Identifier	dst		1018046	0					
ANR	1018265	Argument	dstw		1018046	4					
ANR	1018266	Identifier	dstw		1018046	0					
ANR	1018267	Argument	src1		1018046	5					
ANR	1018268	Identifier	src1		1018046	0					
ANR	1018269	Argument	src1w		1018046	6					
ANR	1018270	Identifier	src1w		1018046	0					
ANR	1018271	Argument	src2		1018046	7					
ANR	1018272	Identifier	src2		1018046	0					
ANR	1018273	Argument	src2w		1018046	8					
ANR	1018274	Identifier	src2w		1018046	0					
ANR	1018275	ReturnStatement	return SLJIT_SUCCESS ;	1971:1:61464:61484	1018046	6	True				
ANR	1018276	Identifier	SLJIT_SUCCESS		1018046	0					
ANR	1018277	ReturnType	SLJIT_API_FUNC_ATTRIBUTE sljit_si		1018046	1					
ANR	1018278	Identifier	sljit_emit_op2		1018046	2					
ANR	1018279	ParameterList	"struct sljit_compiler * compiler , sljit_si op , sljit_si dst , sljit_sw dstw , sljit_si src1 , sljit_sw src1w , sljit_si src2 , sljit_sw src2w"		1018046	3					
ANR	1018280	Parameter	struct sljit_compiler * compiler	1932:49:60401:60431	1018046	0	True				
ANR	1018281	ParameterType	struct sljit_compiler *		1018046	0					
ANR	1018282	Identifier	compiler		1018046	1					
ANR	1018283	Parameter	sljit_si op	1932:82:60434:60444	1018046	1	True				
ANR	1018284	ParameterType	sljit_si		1018046	0					
ANR	1018285	Identifier	op		1018046	1					
ANR	1018286	Parameter	sljit_si dst	1933:1:60448:60459	1018046	2	True				
ANR	1018287	ParameterType	sljit_si		1018046	0					
ANR	1018288	Identifier	dst		1018046	1					
ANR	1018289	Parameter	sljit_sw dstw	1933:15:60462:60474	1018046	3	True				
ANR	1018290	ParameterType	sljit_sw		1018046	0					
ANR	1018291	Identifier	dstw		1018046	1					
ANR	1018292	Parameter	sljit_si src1	1934:1:60478:60490	1018046	4	True				
ANR	1018293	ParameterType	sljit_si		1018046	0					
ANR	1018294	Identifier	src1		1018046	1					
ANR	1018295	Parameter	sljit_sw src1w	1934:16:60493:60506	1018046	5	True				
ANR	1018296	ParameterType	sljit_sw		1018046	0					
ANR	1018297	Identifier	src1w		1018046	1					
ANR	1018298	Parameter	sljit_si src2	1935:1:60510:60522	1018046	6	True				
ANR	1018299	ParameterType	sljit_si		1018046	0					
ANR	1018300	Identifier	src2		1018046	1					
ANR	1018301	Parameter	sljit_sw src2w	1935:16:60525:60538	1018046	7	True				
ANR	1018302	ParameterType	sljit_sw		1018046	0					
ANR	1018303	Identifier	src2w		1018046	1					
ANR	1018304	CFGEntryNode	ENTRY		1018046		True				
ANR	1018305	CFGExitNode	EXIT		1018046		True				
ANR	1018306	Symbol	src2w		1018046						
ANR	1018307	Symbol	op		1018046						
ANR	1018308	Symbol	TMP_REG1		1018046						
ANR	1018309	Symbol	src1w		1018046						
ANR	1018310	Symbol	ALLOW_ANY_IMM		1018046						
ANR	1018311	Symbol	dst		1018046						
ANR	1018312	Symbol	check_sljit_emit_op2		1018046						
ANR	1018313	Symbol	SLJIT_SUCCESS		1018046						
ANR	1018314	Symbol	ALLOW_IMM		1018046						
ANR	1018315	Symbol	* compiler		1018046						
ANR	1018316	Symbol	GET_OPCODE		1018046						
ANR	1018317	Symbol	SLJIT_IMM		1018046						
ANR	1018318	Symbol	compiler -> shift_imm		1018046						
ANR	1018319	Symbol	src1		1018046						
ANR	1018320	Symbol	src2		1018046						
ANR	1018321	Symbol	compiler		1018046						
ANR	1018322	Symbol	dstw		1018046						
ANR	1018323	Symbol	emit_op		1018046						
ANR	1018324	Function	sljit_get_register_index	1974:0:61489:61641							
ANR	1018325	FunctionDef	sljit_get_register_index (sljit_si reg)		1018324	0					
ANR	1018326	CompoundStatement		1975:0:61562:61641	1018324	0					
ANR	1018327	ExpressionStatement	CHECK_REG_INDEX ( check_sljit_get_register_index ( reg ) )	1976:1:61565:61617	1018324	0	True				
ANR	1018328	CallExpression	CHECK_REG_INDEX ( check_sljit_get_register_index ( reg ) )		1018324	0					
ANR	1018329	Callee	CHECK_REG_INDEX		1018324	0					
ANR	1018330	Identifier	CHECK_REG_INDEX		1018324	0					
ANR	1018331	ArgumentList	check_sljit_get_register_index ( reg )		1018324	1					
ANR	1018332	Argument	check_sljit_get_register_index ( reg )		1018324	0					
ANR	1018333	CallExpression	check_sljit_get_register_index ( reg )		1018324	0					
ANR	1018334	Callee	check_sljit_get_register_index		1018324	0					
ANR	1018335	Identifier	check_sljit_get_register_index		1018324	0					
ANR	1018336	ArgumentList	reg		1018324	1					
ANR	1018337	Argument	reg		1018324	0					
ANR	1018338	Identifier	reg		1018324	0					
ANR	1018339	ReturnStatement	return reg_map [ reg ] ;	1977:1:61620:61639	1018324	1	True				
ANR	1018340	ArrayIndexing	reg_map [ reg ]		1018324	0					
ANR	1018341	Identifier	reg_map		1018324	0					
ANR	1018342	Identifier	reg		1018324	1					
ANR	1018343	ReturnType	SLJIT_API_FUNC_ATTRIBUTE sljit_si		1018324	1					
ANR	1018344	Identifier	sljit_get_register_index		1018324	2					
ANR	1018345	ParameterList	sljit_si reg		1018324	3					
ANR	1018346	Parameter	sljit_si reg	1974:59:61548:61559	1018324	0	True				
ANR	1018347	ParameterType	sljit_si		1018324	0					
ANR	1018348	Identifier	reg		1018324	1					
ANR	1018349	CFGEntryNode	ENTRY		1018324		True				
ANR	1018350	CFGExitNode	EXIT		1018324		True				
ANR	1018351	Symbol	reg		1018324						
ANR	1018352	Symbol	reg_map		1018324						
ANR	1018353	Symbol	* reg_map		1018324						
ANR	1018354	Symbol	* reg		1018324						
ANR	1018355	Symbol	check_sljit_get_register_index		1018324						
ANR	1018356	Function	sljit_get_float_register_index	1980:0:61644:61804							
ANR	1018357	FunctionDef	sljit_get_float_register_index (sljit_si reg)		1018356	0					
ANR	1018358	CompoundStatement		1981:0:61723:61804	1018356	0					
ANR	1018359	ExpressionStatement	CHECK_REG_INDEX ( check_sljit_get_float_register_index ( reg ) )	1982:1:61726:61784	1018356	0	True				
ANR	1018360	CallExpression	CHECK_REG_INDEX ( check_sljit_get_float_register_index ( reg ) )		1018356	0					
ANR	1018361	Callee	CHECK_REG_INDEX		1018356	0					
ANR	1018362	Identifier	CHECK_REG_INDEX		1018356	0					
ANR	1018363	ArgumentList	check_sljit_get_float_register_index ( reg )		1018356	1					
ANR	1018364	Argument	check_sljit_get_float_register_index ( reg )		1018356	0					
ANR	1018365	CallExpression	check_sljit_get_float_register_index ( reg )		1018356	0					
ANR	1018366	Callee	check_sljit_get_float_register_index		1018356	0					
ANR	1018367	Identifier	check_sljit_get_float_register_index		1018356	0					
ANR	1018368	ArgumentList	reg		1018356	1					
ANR	1018369	Argument	reg		1018356	0					
ANR	1018370	Identifier	reg		1018356	0					
ANR	1018371	ReturnStatement	return reg << 1 ;	1983:1:61787:61802	1018356	1	True				
ANR	1018372	ShiftExpression	reg << 1		1018356	0		<<			
ANR	1018373	Identifier	reg		1018356	0					
ANR	1018374	PrimaryExpression	1		1018356	1					
ANR	1018375	ReturnType	SLJIT_API_FUNC_ATTRIBUTE sljit_si		1018356	1					
ANR	1018376	Identifier	sljit_get_float_register_index		1018356	2					
ANR	1018377	ParameterList	sljit_si reg		1018356	3					
ANR	1018378	Parameter	sljit_si reg	1980:65:61709:61720	1018356	0	True				
ANR	1018379	ParameterType	sljit_si		1018356	0					
ANR	1018380	Identifier	reg		1018356	1					
ANR	1018381	CFGEntryNode	ENTRY		1018356		True				
ANR	1018382	CFGExitNode	EXIT		1018356		True				
ANR	1018383	Symbol	reg		1018356						
ANR	1018384	Symbol	check_sljit_get_float_register_index		1018356						
ANR	1018385	Function	sljit_emit_op_custom	1986:0:61807:62068							
ANR	1018386	FunctionDef	"sljit_emit_op_custom (struct sljit_compiler * compiler , void * instruction , sljit_si size)"		1018385	0					
ANR	1018387	CompoundStatement		1988:0:61930:62068	1018385	0					
ANR	1018388	ExpressionStatement	CHECK_ERROR ( )	1989:1:61933:61946	1018385	0	True				
ANR	1018389	CallExpression	CHECK_ERROR ( )		1018385	0					
ANR	1018390	Callee	CHECK_ERROR		1018385	0					
ANR	1018391	Identifier	CHECK_ERROR		1018385	0					
ANR	1018392	ArgumentList			1018385	1					
ANR	1018393	ExpressionStatement	"CHECK ( check_sljit_emit_op_custom ( compiler , instruction , size ) )"	1990:1:61949:62011	1018385	1	True				
ANR	1018394	CallExpression	"CHECK ( check_sljit_emit_op_custom ( compiler , instruction , size ) )"		1018385	0					
ANR	1018395	Callee	CHECK		1018385	0					
ANR	1018396	Identifier	CHECK		1018385	0					
ANR	1018397	ArgumentList	"check_sljit_emit_op_custom ( compiler , instruction , size )"		1018385	1					
ANR	1018398	Argument	"check_sljit_emit_op_custom ( compiler , instruction , size )"		1018385	0					
ANR	1018399	CallExpression	"check_sljit_emit_op_custom ( compiler , instruction , size )"		1018385	0					
ANR	1018400	Callee	check_sljit_emit_op_custom		1018385	0					
ANR	1018401	Identifier	check_sljit_emit_op_custom		1018385	0					
ANR	1018402	ArgumentList	compiler		1018385	1					
ANR	1018403	Argument	compiler		1018385	0					
ANR	1018404	Identifier	compiler		1018385	0					
ANR	1018405	Argument	instruction		1018385	1					
ANR	1018406	Identifier	instruction		1018385	0					
ANR	1018407	Argument	size		1018385	2					
ANR	1018408	Identifier	size		1018385	0					
ANR	1018409	ReturnStatement	"return push_inst ( compiler , * ( sljit_uw * ) instruction ) ;"	1992:1:62015:62066	1018385	2	True				
ANR	1018410	CallExpression	"push_inst ( compiler , * ( sljit_uw * ) instruction )"		1018385	0					
ANR	1018411	Callee	push_inst		1018385	0					
ANR	1018412	Identifier	push_inst		1018385	0					
ANR	1018413	ArgumentList	compiler		1018385	1					
ANR	1018414	Argument	compiler		1018385	0					
ANR	1018415	Identifier	compiler		1018385	0					
ANR	1018416	Argument	* ( sljit_uw * ) instruction		1018385	1					
ANR	1018417	UnaryOperationExpression	* ( sljit_uw * ) instruction		1018385	0					
ANR	1018418	UnaryOperator	*		1018385	0					
ANR	1018419	CastExpression	( sljit_uw * ) instruction		1018385	1					
ANR	1018420	CastTarget	sljit_uw *		1018385	0					
ANR	1018421	Identifier	instruction		1018385	1					
ANR	1018422	ReturnType	SLJIT_API_FUNC_ATTRIBUTE sljit_si		1018385	1					
ANR	1018423	Identifier	sljit_emit_op_custom		1018385	2					
ANR	1018424	ParameterList	"struct sljit_compiler * compiler , void * instruction , sljit_si size"		1018385	3					
ANR	1018425	Parameter	struct sljit_compiler * compiler	1986:55:61862:61892	1018385	0	True				
ANR	1018426	ParameterType	struct sljit_compiler *		1018385	0					
ANR	1018427	Identifier	compiler		1018385	1					
ANR	1018428	Parameter	void * instruction	1987:1:61896:61912	1018385	1	True				
ANR	1018429	ParameterType	void *		1018385	0					
ANR	1018430	Identifier	instruction		1018385	1					
ANR	1018431	Parameter	sljit_si size	1987:20:61915:61927	1018385	2	True				
ANR	1018432	ParameterType	sljit_si		1018385	0					
ANR	1018433	Identifier	size		1018385	1					
ANR	1018434	CFGEntryNode	ENTRY		1018385		True				
ANR	1018435	CFGExitNode	EXIT		1018385		True				
ANR	1018436	Symbol	push_inst		1018385						
ANR	1018437	Symbol	* ( sljit_uw * ) instruction		1018385						
ANR	1018438	Symbol	size		1018385						
ANR	1018439	Symbol	* instruction		1018385						
ANR	1018440	Symbol	instruction		1018385						
ANR	1018441	Symbol	check_sljit_emit_op_custom		1018385						
ANR	1018442	Symbol	compiler		1018385						
ANR	1018443	DeclStmt									
ANR	1018444	Decl							sljit_si	sljit_si	arm_fpu_type
ANR	1018445	Function	init_compiler	2005:0:62422:62580							
ANR	1018446	FunctionDef	init_compiler ()		1018445	0					
ANR	1018447	CompoundStatement		2006:0:62454:62580	1018445	0					
ANR	1018448	IfStatement	if ( arm_fpu_type != - 1 )		1018445	0					
ANR	1018449	Condition	arm_fpu_type != - 1	2007:5:62461:62478	1018445	0	True				
ANR	1018450	EqualityExpression	arm_fpu_type != - 1		1018445	0		!=			
ANR	1018451	Identifier	arm_fpu_type		1018445	0					
ANR	1018452	UnaryOperationExpression	- 1		1018445	1					
ANR	1018453	UnaryOperator	-		1018445	0					
ANR	1018454	PrimaryExpression	1		1018445	1					
ANR	1018455	ReturnStatement	return ;	2008:2:62483:62489	1018445	1	True				
ANR	1018456	ExpressionStatement	arm_fpu_type = 1	2011:1:62562:62578	1018445	1	True				
ANR	1018457	AssignmentExpression	arm_fpu_type = 1		1018445	0		=			
ANR	1018458	Identifier	arm_fpu_type		1018445	0					
ANR	1018459	PrimaryExpression	1		1018445	1					
ANR	1018460	ReturnType	static void		1018445	1					
ANR	1018461	Identifier	init_compiler		1018445	2					
ANR	1018462	ParameterList			1018445	3					
ANR	1018463	CFGEntryNode	ENTRY		1018445		True				
ANR	1018464	CFGExitNode	EXIT		1018445		True				
ANR	1018465	Symbol	arm_fpu_type		1018445						
ANR	1018466	Function	sljit_is_fpu_available	2014:0:62583:62789							
ANR	1018467	FunctionDef	sljit_is_fpu_available ()		1018466	0					
ANR	1018468	CompoundStatement		2015:0:62646:62789	1018466	0					
ANR	1018469	ReturnStatement	return SLJIT_IS_FPU_AVAILABLE ;	2017:1:62679:62708	1018466	0	True				
ANR	1018470	Identifier	SLJIT_IS_FPU_AVAILABLE		1018466	0					
ANR	1018471	ReturnType	SLJIT_API_FUNC_ATTRIBUTE sljit_si		1018466	1					
ANR	1018472	Identifier	sljit_is_fpu_available		1018466	2					
ANR	1018473	ParameterList			1018466	3					
ANR	1018474	CFGEntryNode	ENTRY		1018466		True				
ANR	1018475	CFGExitNode	EXIT		1018466		True				
ANR	1018476	Symbol	SLJIT_IS_FPU_AVAILABLE		1018466						
ANR	1018477	Function	sljit_is_fpu_available	2029:0:62823:62924							
ANR	1018478	FunctionDef	sljit_is_fpu_available ()		1018477	0					
ANR	1018479	CompoundStatement		2030:0:62886:62924	1018477	0					
ANR	1018480	ReturnStatement	return 1 ;	2032:1:62914:62922	1018477	0	True				
ANR	1018481	PrimaryExpression	1		1018477	0					
ANR	1018482	ReturnType	SLJIT_API_FUNC_ATTRIBUTE sljit_si		1018477	1					
ANR	1018483	Identifier	sljit_is_fpu_available		1018477	2					
ANR	1018484	ParameterList			1018477	3					
ANR	1018485	CFGEntryNode	ENTRY		1018477		True				
ANR	1018486	CFGExitNode	EXIT		1018477		True				
ANR	1018487	Function	emit_fop_mem	2043:0:63222:65668							
ANR	1018488	FunctionDef	"emit_fop_mem (struct sljit_compiler * compiler , sljit_si flags , sljit_si reg , sljit_si arg , sljit_sw argw)"		1018487	0					
ANR	1018489	CompoundStatement		2044:0:63343:65668	1018487	0					
ANR	1018490	IdentifierDeclStatement	sljit_sw tmp ;	2045:1:63346:63358	1018487	0	True				
ANR	1018491	IdentifierDecl	tmp		1018487	0					
ANR	1018492	IdentifierDeclType	sljit_sw		1018487	0					
ANR	1018493	Identifier	tmp		1018487	1					
ANR	1018494	IdentifierDeclStatement	sljit_uw imm ;	2046:1:63361:63373	1018487	1	True				
ANR	1018495	IdentifierDecl	imm		1018487	0					
ANR	1018496	IdentifierDeclType	sljit_uw		1018487	0					
ANR	1018497	Identifier	imm		1018487	1					
ANR	1018498	IdentifierDeclStatement	sljit_sw inst = VSTR_F32 | ( flags & ( SLJIT_SINGLE_OP | FPU_LOAD ) ) ;	2047:1:63376:63441	1018487	2	True				
ANR	1018499	IdentifierDecl	inst = VSTR_F32 | ( flags & ( SLJIT_SINGLE_OP | FPU_LOAD ) )		1018487	0					
ANR	1018500	IdentifierDeclType	sljit_sw		1018487	0					
ANR	1018501	Identifier	inst		1018487	1					
ANR	1018502	AssignmentExpression	inst = VSTR_F32 | ( flags & ( SLJIT_SINGLE_OP | FPU_LOAD ) )		1018487	2		=			
ANR	1018503	Identifier	inst		1018487	0					
ANR	1018504	InclusiveOrExpression	VSTR_F32 | ( flags & ( SLJIT_SINGLE_OP | FPU_LOAD ) )		1018487	1		|			
ANR	1018505	Identifier	VSTR_F32		1018487	0					
ANR	1018506	BitAndExpression	flags & ( SLJIT_SINGLE_OP | FPU_LOAD )		1018487	1		&			
ANR	1018507	Identifier	flags		1018487	0					
ANR	1018508	InclusiveOrExpression	SLJIT_SINGLE_OP | FPU_LOAD		1018487	1		|			
ANR	1018509	Identifier	SLJIT_SINGLE_OP		1018487	0					
ANR	1018510	Identifier	FPU_LOAD		1018487	1					
ANR	1018511	ExpressionStatement	SLJIT_ASSERT ( arg & SLJIT_MEM )	2048:1:63444:63473	1018487	3	True				
ANR	1018512	CallExpression	SLJIT_ASSERT ( arg & SLJIT_MEM )		1018487	0					
ANR	1018513	Callee	SLJIT_ASSERT		1018487	0					
ANR	1018514	Identifier	SLJIT_ASSERT		1018487	0					
ANR	1018515	ArgumentList	arg & SLJIT_MEM		1018487	1					
ANR	1018516	Argument	arg & SLJIT_MEM		1018487	0					
ANR	1018517	BitAndExpression	arg & SLJIT_MEM		1018487	0		&			
ANR	1018518	Identifier	arg		1018487	0					
ANR	1018519	Identifier	SLJIT_MEM		1018487	1					
ANR	1018520	IfStatement	if ( SLJIT_UNLIKELY ( arg & OFFS_REG_MASK ) )		1018487	4					
ANR	1018521	Condition	SLJIT_UNLIKELY ( arg & OFFS_REG_MASK )	2050:5:63481:63515	1018487	0	True				
ANR	1018522	CallExpression	SLJIT_UNLIKELY ( arg & OFFS_REG_MASK )		1018487	0					
ANR	1018523	Callee	SLJIT_UNLIKELY		1018487	0					
ANR	1018524	Identifier	SLJIT_UNLIKELY		1018487	0					
ANR	1018525	ArgumentList	arg & OFFS_REG_MASK		1018487	1					
ANR	1018526	Argument	arg & OFFS_REG_MASK		1018487	0					
ANR	1018527	BitAndExpression	arg & OFFS_REG_MASK		1018487	0		&			
ANR	1018528	Identifier	arg		1018487	0					
ANR	1018529	Identifier	OFFS_REG_MASK		1018487	1					
ANR	1018530	CompoundStatement		7:42:174:174	1018487	1					
ANR	1018531	ExpressionStatement	"FAIL_IF ( push_inst ( compiler , EMIT_DATA_PROCESS_INS ( ADD_DP , 0 , TMP_REG1 , arg & REG_MASK , RM ( OFFS_REG ( arg ) ) | ( ( argw & 0x3 ) << 7 ) ) ) )"	2051:2:63522:63651	1018487	0	True				
ANR	1018532	CallExpression	"FAIL_IF ( push_inst ( compiler , EMIT_DATA_PROCESS_INS ( ADD_DP , 0 , TMP_REG1 , arg & REG_MASK , RM ( OFFS_REG ( arg ) ) | ( ( argw & 0x3 ) << 7 ) ) ) )"		1018487	0					
ANR	1018533	Callee	FAIL_IF		1018487	0					
ANR	1018534	Identifier	FAIL_IF		1018487	0					
ANR	1018535	ArgumentList	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( ADD_DP , 0 , TMP_REG1 , arg & REG_MASK , RM ( OFFS_REG ( arg ) ) | ( ( argw & 0x3 ) << 7 ) ) )"		1018487	1					
ANR	1018536	Argument	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( ADD_DP , 0 , TMP_REG1 , arg & REG_MASK , RM ( OFFS_REG ( arg ) ) | ( ( argw & 0x3 ) << 7 ) ) )"		1018487	0					
ANR	1018537	CallExpression	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( ADD_DP , 0 , TMP_REG1 , arg & REG_MASK , RM ( OFFS_REG ( arg ) ) | ( ( argw & 0x3 ) << 7 ) ) )"		1018487	0					
ANR	1018538	Callee	push_inst		1018487	0					
ANR	1018539	Identifier	push_inst		1018487	0					
ANR	1018540	ArgumentList	compiler		1018487	1					
ANR	1018541	Argument	compiler		1018487	0					
ANR	1018542	Identifier	compiler		1018487	0					
ANR	1018543	Argument	"EMIT_DATA_PROCESS_INS ( ADD_DP , 0 , TMP_REG1 , arg & REG_MASK , RM ( OFFS_REG ( arg ) ) | ( ( argw & 0x3 ) << 7 ) )"		1018487	1					
ANR	1018544	CallExpression	"EMIT_DATA_PROCESS_INS ( ADD_DP , 0 , TMP_REG1 , arg & REG_MASK , RM ( OFFS_REG ( arg ) ) | ( ( argw & 0x3 ) << 7 ) )"		1018487	0					
ANR	1018545	Callee	EMIT_DATA_PROCESS_INS		1018487	0					
ANR	1018546	Identifier	EMIT_DATA_PROCESS_INS		1018487	0					
ANR	1018547	ArgumentList	ADD_DP		1018487	1					
ANR	1018548	Argument	ADD_DP		1018487	0					
ANR	1018549	Identifier	ADD_DP		1018487	0					
ANR	1018550	Argument	0		1018487	1					
ANR	1018551	PrimaryExpression	0		1018487	0					
ANR	1018552	Argument	TMP_REG1		1018487	2					
ANR	1018553	Identifier	TMP_REG1		1018487	0					
ANR	1018554	Argument	arg & REG_MASK		1018487	3					
ANR	1018555	BitAndExpression	arg & REG_MASK		1018487	0		&			
ANR	1018556	Identifier	arg		1018487	0					
ANR	1018557	Identifier	REG_MASK		1018487	1					
ANR	1018558	Argument	RM ( OFFS_REG ( arg ) ) | ( ( argw & 0x3 ) << 7 )		1018487	4					
ANR	1018559	InclusiveOrExpression	RM ( OFFS_REG ( arg ) ) | ( ( argw & 0x3 ) << 7 )		1018487	0		|			
ANR	1018560	CallExpression	RM ( OFFS_REG ( arg ) )		1018487	0					
ANR	1018561	Callee	RM		1018487	0					
ANR	1018562	Identifier	RM		1018487	0					
ANR	1018563	ArgumentList	OFFS_REG ( arg )		1018487	1					
ANR	1018564	Argument	OFFS_REG ( arg )		1018487	0					
ANR	1018565	CallExpression	OFFS_REG ( arg )		1018487	0					
ANR	1018566	Callee	OFFS_REG		1018487	0					
ANR	1018567	Identifier	OFFS_REG		1018487	0					
ANR	1018568	ArgumentList	arg		1018487	1					
ANR	1018569	Argument	arg		1018487	0					
ANR	1018570	Identifier	arg		1018487	0					
ANR	1018571	ShiftExpression	( argw & 0x3 ) << 7		1018487	1		<<			
ANR	1018572	BitAndExpression	argw & 0x3		1018487	0		&			
ANR	1018573	Identifier	argw		1018487	0					
ANR	1018574	PrimaryExpression	0x3		1018487	1					
ANR	1018575	PrimaryExpression	7		1018487	1					
ANR	1018576	ExpressionStatement	arg = SLJIT_MEM | TMP_REG1	2052:2:63655:63681	1018487	1	True				
ANR	1018577	AssignmentExpression	arg = SLJIT_MEM | TMP_REG1		1018487	0		=			
ANR	1018578	Identifier	arg		1018487	0					
ANR	1018579	InclusiveOrExpression	SLJIT_MEM | TMP_REG1		1018487	1		|			
ANR	1018580	Identifier	SLJIT_MEM		1018487	0					
ANR	1018581	Identifier	TMP_REG1		1018487	1					
ANR	1018582	ExpressionStatement	argw = 0	2053:2:63685:63693	1018487	2	True				
ANR	1018583	AssignmentExpression	argw = 0		1018487	0		=			
ANR	1018584	Identifier	argw		1018487	0					
ANR	1018585	PrimaryExpression	0		1018487	1					
ANR	1018586	IfStatement	if ( ( arg & REG_MASK ) )		1018487	5					
ANR	1018587	Condition	arg & REG_MASK	2057:5:63734:63749	1018487	0	True				
ANR	1018588	BitAndExpression	arg & REG_MASK		1018487	0		&			
ANR	1018589	Identifier	arg		1018487	0					
ANR	1018590	Identifier	REG_MASK		1018487	1					
ANR	1018591	CompoundStatement		14:23:408:408	1018487	1					
ANR	1018592	IfStatement	if ( ! ( argw & ~0x3fc ) )		1018487	0					
ANR	1018593	Condition	! ( argw & ~0x3fc )	2058:6:63760:63775	1018487	0	True				
ANR	1018594	UnaryOperationExpression	! ( argw & ~0x3fc )		1018487	0					
ANR	1018595	UnaryOperator	!		1018487	0					
ANR	1018596	BitAndExpression	argw & ~0x3fc		1018487	1		&			
ANR	1018597	Identifier	argw		1018487	0					
ANR	1018598	Identifier	~0x3fc		1018487	1					
ANR	1018599	ReturnStatement	"return push_inst ( compiler , EMIT_FPU_DATA_TRANSFER ( inst , 1 , arg & REG_MASK , reg , argw >> 2 ) ) ;"	2059:3:63781:63872	1018487	1	True				
ANR	1018600	CallExpression	"push_inst ( compiler , EMIT_FPU_DATA_TRANSFER ( inst , 1 , arg & REG_MASK , reg , argw >> 2 ) )"		1018487	0					
ANR	1018601	Callee	push_inst		1018487	0					
ANR	1018602	Identifier	push_inst		1018487	0					
ANR	1018603	ArgumentList	compiler		1018487	1					
ANR	1018604	Argument	compiler		1018487	0					
ANR	1018605	Identifier	compiler		1018487	0					
ANR	1018606	Argument	"EMIT_FPU_DATA_TRANSFER ( inst , 1 , arg & REG_MASK , reg , argw >> 2 )"		1018487	1					
ANR	1018607	CallExpression	"EMIT_FPU_DATA_TRANSFER ( inst , 1 , arg & REG_MASK , reg , argw >> 2 )"		1018487	0					
ANR	1018608	Callee	EMIT_FPU_DATA_TRANSFER		1018487	0					
ANR	1018609	Identifier	EMIT_FPU_DATA_TRANSFER		1018487	0					
ANR	1018610	ArgumentList	inst		1018487	1					
ANR	1018611	Argument	inst		1018487	0					
ANR	1018612	Identifier	inst		1018487	0					
ANR	1018613	Argument	1		1018487	1					
ANR	1018614	PrimaryExpression	1		1018487	0					
ANR	1018615	Argument	arg & REG_MASK		1018487	2					
ANR	1018616	BitAndExpression	arg & REG_MASK		1018487	0		&			
ANR	1018617	Identifier	arg		1018487	0					
ANR	1018618	Identifier	REG_MASK		1018487	1					
ANR	1018619	Argument	reg		1018487	3					
ANR	1018620	Identifier	reg		1018487	0					
ANR	1018621	Argument	argw >> 2		1018487	4					
ANR	1018622	ShiftExpression	argw >> 2		1018487	0		>>			
ANR	1018623	Identifier	argw		1018487	0					
ANR	1018624	PrimaryExpression	2		1018487	1					
ANR	1018625	IfStatement	if ( ! ( - argw & ~0x3fc ) )		1018487	1					
ANR	1018626	Condition	! ( - argw & ~0x3fc )	2060:6:63880:63896	1018487	0	True				
ANR	1018627	UnaryOperationExpression	! ( - argw & ~0x3fc )		1018487	0					
ANR	1018628	UnaryOperator	!		1018487	0					
ANR	1018629	BitAndExpression	- argw & ~0x3fc		1018487	1		&			
ANR	1018630	UnaryOperationExpression	- argw		1018487	0					
ANR	1018631	UnaryOperator	-		1018487	0					
ANR	1018632	Identifier	argw		1018487	1					
ANR	1018633	Identifier	~0x3fc		1018487	1					
ANR	1018634	ReturnStatement	"return push_inst ( compiler , EMIT_FPU_DATA_TRANSFER ( inst , 0 , arg & REG_MASK , reg , ( - argw ) >> 2 ) ) ;"	2061:3:63902:63996	1018487	1	True				
ANR	1018635	CallExpression	"push_inst ( compiler , EMIT_FPU_DATA_TRANSFER ( inst , 0 , arg & REG_MASK , reg , ( - argw ) >> 2 ) )"		1018487	0					
ANR	1018636	Callee	push_inst		1018487	0					
ANR	1018637	Identifier	push_inst		1018487	0					
ANR	1018638	ArgumentList	compiler		1018487	1					
ANR	1018639	Argument	compiler		1018487	0					
ANR	1018640	Identifier	compiler		1018487	0					
ANR	1018641	Argument	"EMIT_FPU_DATA_TRANSFER ( inst , 0 , arg & REG_MASK , reg , ( - argw ) >> 2 )"		1018487	1					
ANR	1018642	CallExpression	"EMIT_FPU_DATA_TRANSFER ( inst , 0 , arg & REG_MASK , reg , ( - argw ) >> 2 )"		1018487	0					
ANR	1018643	Callee	EMIT_FPU_DATA_TRANSFER		1018487	0					
ANR	1018644	Identifier	EMIT_FPU_DATA_TRANSFER		1018487	0					
ANR	1018645	ArgumentList	inst		1018487	1					
ANR	1018646	Argument	inst		1018487	0					
ANR	1018647	Identifier	inst		1018487	0					
ANR	1018648	Argument	0		1018487	1					
ANR	1018649	PrimaryExpression	0		1018487	0					
ANR	1018650	Argument	arg & REG_MASK		1018487	2					
ANR	1018651	BitAndExpression	arg & REG_MASK		1018487	0		&			
ANR	1018652	Identifier	arg		1018487	0					
ANR	1018653	Identifier	REG_MASK		1018487	1					
ANR	1018654	Argument	reg		1018487	3					
ANR	1018655	Identifier	reg		1018487	0					
ANR	1018656	Argument	( - argw ) >> 2		1018487	4					
ANR	1018657	ShiftExpression	( - argw ) >> 2		1018487	0		>>			
ANR	1018658	UnaryOperationExpression	- argw		1018487	0					
ANR	1018659	UnaryOperator	-		1018487	0					
ANR	1018660	Identifier	argw		1018487	1					
ANR	1018661	PrimaryExpression	2		1018487	1					
ANR	1018662	IfStatement	if ( compiler -> cache_arg == arg )		1018487	6					
ANR	1018663	Condition	compiler -> cache_arg == arg	2064:5:64007:64032	1018487	0	True				
ANR	1018664	EqualityExpression	compiler -> cache_arg == arg		1018487	0		==			
ANR	1018665	PtrMemberAccess	compiler -> cache_arg		1018487	0					
ANR	1018666	Identifier	compiler		1018487	0					
ANR	1018667	Identifier	cache_arg		1018487	1					
ANR	1018668	Identifier	arg		1018487	1					
ANR	1018669	CompoundStatement		21:33:691:691	1018487	1					
ANR	1018670	ExpressionStatement	tmp = argw - compiler -> cache_argw	2065:2:64039:64072	1018487	0	True				
ANR	1018671	AssignmentExpression	tmp = argw - compiler -> cache_argw		1018487	0		=			
ANR	1018672	Identifier	tmp		1018487	0					
ANR	1018673	AdditiveExpression	argw - compiler -> cache_argw		1018487	1		-			
ANR	1018674	Identifier	argw		1018487	0					
ANR	1018675	PtrMemberAccess	compiler -> cache_argw		1018487	1					
ANR	1018676	Identifier	compiler		1018487	0					
ANR	1018677	Identifier	cache_argw		1018487	1					
ANR	1018678	IfStatement	if ( ! ( tmp & ~0x3fc ) )		1018487	1					
ANR	1018679	Condition	! ( tmp & ~0x3fc )	2066:6:64080:64094	1018487	0	True				
ANR	1018680	UnaryOperationExpression	! ( tmp & ~0x3fc )		1018487	0					
ANR	1018681	UnaryOperator	!		1018487	0					
ANR	1018682	BitAndExpression	tmp & ~0x3fc		1018487	1		&			
ANR	1018683	Identifier	tmp		1018487	0					
ANR	1018684	Identifier	~0x3fc		1018487	1					
ANR	1018685	ReturnStatement	"return push_inst ( compiler , EMIT_FPU_DATA_TRANSFER ( inst , 1 , TMP_REG3 , reg , tmp >> 2 ) ) ;"	2067:3:64100:64184	1018487	1	True				
ANR	1018686	CallExpression	"push_inst ( compiler , EMIT_FPU_DATA_TRANSFER ( inst , 1 , TMP_REG3 , reg , tmp >> 2 ) )"		1018487	0					
ANR	1018687	Callee	push_inst		1018487	0					
ANR	1018688	Identifier	push_inst		1018487	0					
ANR	1018689	ArgumentList	compiler		1018487	1					
ANR	1018690	Argument	compiler		1018487	0					
ANR	1018691	Identifier	compiler		1018487	0					
ANR	1018692	Argument	"EMIT_FPU_DATA_TRANSFER ( inst , 1 , TMP_REG3 , reg , tmp >> 2 )"		1018487	1					
ANR	1018693	CallExpression	"EMIT_FPU_DATA_TRANSFER ( inst , 1 , TMP_REG3 , reg , tmp >> 2 )"		1018487	0					
ANR	1018694	Callee	EMIT_FPU_DATA_TRANSFER		1018487	0					
ANR	1018695	Identifier	EMIT_FPU_DATA_TRANSFER		1018487	0					
ANR	1018696	ArgumentList	inst		1018487	1					
ANR	1018697	Argument	inst		1018487	0					
ANR	1018698	Identifier	inst		1018487	0					
ANR	1018699	Argument	1		1018487	1					
ANR	1018700	PrimaryExpression	1		1018487	0					
ANR	1018701	Argument	TMP_REG3		1018487	2					
ANR	1018702	Identifier	TMP_REG3		1018487	0					
ANR	1018703	Argument	reg		1018487	3					
ANR	1018704	Identifier	reg		1018487	0					
ANR	1018705	Argument	tmp >> 2		1018487	4					
ANR	1018706	ShiftExpression	tmp >> 2		1018487	0		>>			
ANR	1018707	Identifier	tmp		1018487	0					
ANR	1018708	PrimaryExpression	2		1018487	1					
ANR	1018709	IfStatement	if ( ! ( - tmp & ~0x3fc ) )		1018487	2					
ANR	1018710	Condition	! ( - tmp & ~0x3fc )	2068:6:64192:64207	1018487	0	True				
ANR	1018711	UnaryOperationExpression	! ( - tmp & ~0x3fc )		1018487	0					
ANR	1018712	UnaryOperator	!		1018487	0					
ANR	1018713	BitAndExpression	- tmp & ~0x3fc		1018487	1		&			
ANR	1018714	UnaryOperationExpression	- tmp		1018487	0					
ANR	1018715	UnaryOperator	-		1018487	0					
ANR	1018716	Identifier	tmp		1018487	1					
ANR	1018717	Identifier	~0x3fc		1018487	1					
ANR	1018718	ReturnStatement	"return push_inst ( compiler , EMIT_FPU_DATA_TRANSFER ( inst , 0 , TMP_REG3 , reg , - tmp >> 2 ) ) ;"	2069:3:64213:64298	1018487	1	True				
ANR	1018719	CallExpression	"push_inst ( compiler , EMIT_FPU_DATA_TRANSFER ( inst , 0 , TMP_REG3 , reg , - tmp >> 2 ) )"		1018487	0					
ANR	1018720	Callee	push_inst		1018487	0					
ANR	1018721	Identifier	push_inst		1018487	0					
ANR	1018722	ArgumentList	compiler		1018487	1					
ANR	1018723	Argument	compiler		1018487	0					
ANR	1018724	Identifier	compiler		1018487	0					
ANR	1018725	Argument	"EMIT_FPU_DATA_TRANSFER ( inst , 0 , TMP_REG3 , reg , - tmp >> 2 )"		1018487	1					
ANR	1018726	CallExpression	"EMIT_FPU_DATA_TRANSFER ( inst , 0 , TMP_REG3 , reg , - tmp >> 2 )"		1018487	0					
ANR	1018727	Callee	EMIT_FPU_DATA_TRANSFER		1018487	0					
ANR	1018728	Identifier	EMIT_FPU_DATA_TRANSFER		1018487	0					
ANR	1018729	ArgumentList	inst		1018487	1					
ANR	1018730	Argument	inst		1018487	0					
ANR	1018731	Identifier	inst		1018487	0					
ANR	1018732	Argument	0		1018487	1					
ANR	1018733	PrimaryExpression	0		1018487	0					
ANR	1018734	Argument	TMP_REG3		1018487	2					
ANR	1018735	Identifier	TMP_REG3		1018487	0					
ANR	1018736	Argument	reg		1018487	3					
ANR	1018737	Identifier	reg		1018487	0					
ANR	1018738	Argument	- tmp >> 2		1018487	4					
ANR	1018739	ShiftExpression	- tmp >> 2		1018487	0		>>			
ANR	1018740	UnaryOperationExpression	- tmp		1018487	0					
ANR	1018741	UnaryOperator	-		1018487	0					
ANR	1018742	Identifier	tmp		1018487	1					
ANR	1018743	PrimaryExpression	2		1018487	1					
ANR	1018744	IfStatement	"if ( emit_set_delta ( compiler , TMP_REG3 , TMP_REG3 , tmp ) != SLJIT_ERR_UNSUPPORTED )"		1018487	3					
ANR	1018745	Condition	"emit_set_delta ( compiler , TMP_REG3 , TMP_REG3 , tmp ) != SLJIT_ERR_UNSUPPORTED"	2070:6:64306:64379	1018487	0	True				
ANR	1018746	EqualityExpression	"emit_set_delta ( compiler , TMP_REG3 , TMP_REG3 , tmp ) != SLJIT_ERR_UNSUPPORTED"		1018487	0		!=			
ANR	1018747	CallExpression	"emit_set_delta ( compiler , TMP_REG3 , TMP_REG3 , tmp )"		1018487	0					
ANR	1018748	Callee	emit_set_delta		1018487	0					
ANR	1018749	Identifier	emit_set_delta		1018487	0					
ANR	1018750	ArgumentList	compiler		1018487	1					
ANR	1018751	Argument	compiler		1018487	0					
ANR	1018752	Identifier	compiler		1018487	0					
ANR	1018753	Argument	TMP_REG3		1018487	1					
ANR	1018754	Identifier	TMP_REG3		1018487	0					
ANR	1018755	Argument	TMP_REG3		1018487	2					
ANR	1018756	Identifier	TMP_REG3		1018487	0					
ANR	1018757	Argument	tmp		1018487	3					
ANR	1018758	Identifier	tmp		1018487	0					
ANR	1018759	Identifier	SLJIT_ERR_UNSUPPORTED		1018487	1					
ANR	1018760	CompoundStatement		27:82:1038:1038	1018487	1					
ANR	1018761	ExpressionStatement	FAIL_IF ( compiler -> error )	2071:3:64387:64411	1018487	0	True				
ANR	1018762	CallExpression	FAIL_IF ( compiler -> error )		1018487	0					
ANR	1018763	Callee	FAIL_IF		1018487	0					
ANR	1018764	Identifier	FAIL_IF		1018487	0					
ANR	1018765	ArgumentList	compiler -> error		1018487	1					
ANR	1018766	Argument	compiler -> error		1018487	0					
ANR	1018767	PtrMemberAccess	compiler -> error		1018487	0					
ANR	1018768	Identifier	compiler		1018487	0					
ANR	1018769	Identifier	error		1018487	1					
ANR	1018770	ExpressionStatement	compiler -> cache_argw = argw	2072:3:64416:64443	1018487	1	True				
ANR	1018771	AssignmentExpression	compiler -> cache_argw = argw		1018487	0		=			
ANR	1018772	PtrMemberAccess	compiler -> cache_argw		1018487	0					
ANR	1018773	Identifier	compiler		1018487	0					
ANR	1018774	Identifier	cache_argw		1018487	1					
ANR	1018775	Identifier	argw		1018487	1					
ANR	1018776	ReturnStatement	"return push_inst ( compiler , EMIT_FPU_DATA_TRANSFER ( inst , 1 , TMP_REG3 , reg , 0 ) ) ;"	2073:3:64448:64525	1018487	2	True				
ANR	1018777	CallExpression	"push_inst ( compiler , EMIT_FPU_DATA_TRANSFER ( inst , 1 , TMP_REG3 , reg , 0 ) )"		1018487	0					
ANR	1018778	Callee	push_inst		1018487	0					
ANR	1018779	Identifier	push_inst		1018487	0					
ANR	1018780	ArgumentList	compiler		1018487	1					
ANR	1018781	Argument	compiler		1018487	0					
ANR	1018782	Identifier	compiler		1018487	0					
ANR	1018783	Argument	"EMIT_FPU_DATA_TRANSFER ( inst , 1 , TMP_REG3 , reg , 0 )"		1018487	1					
ANR	1018784	CallExpression	"EMIT_FPU_DATA_TRANSFER ( inst , 1 , TMP_REG3 , reg , 0 )"		1018487	0					
ANR	1018785	Callee	EMIT_FPU_DATA_TRANSFER		1018487	0					
ANR	1018786	Identifier	EMIT_FPU_DATA_TRANSFER		1018487	0					
ANR	1018787	ArgumentList	inst		1018487	1					
ANR	1018788	Argument	inst		1018487	0					
ANR	1018789	Identifier	inst		1018487	0					
ANR	1018790	Argument	1		1018487	1					
ANR	1018791	PrimaryExpression	1		1018487	0					
ANR	1018792	Argument	TMP_REG3		1018487	2					
ANR	1018793	Identifier	TMP_REG3		1018487	0					
ANR	1018794	Argument	reg		1018487	3					
ANR	1018795	Identifier	reg		1018487	0					
ANR	1018796	Argument	0		1018487	4					
ANR	1018797	PrimaryExpression	0		1018487	0					
ANR	1018798	IfStatement	if ( arg & REG_MASK )		1018487	7					
ANR	1018799	Condition	arg & REG_MASK	2077:5:64540:64553	1018487	0	True				
ANR	1018800	BitAndExpression	arg & REG_MASK		1018487	0		&			
ANR	1018801	Identifier	arg		1018487	0					
ANR	1018802	Identifier	REG_MASK		1018487	1					
ANR	1018803	CompoundStatement		34:21:1212:1212	1018487	1					
ANR	1018804	IfStatement	"if ( emit_set_delta ( compiler , TMP_REG1 , arg & REG_MASK , argw ) != SLJIT_ERR_UNSUPPORTED )"		1018487	0					
ANR	1018805	Condition	"emit_set_delta ( compiler , TMP_REG1 , arg & REG_MASK , argw ) != SLJIT_ERR_UNSUPPORTED"	2078:6:64564:64644	1018487	0	True				
ANR	1018806	EqualityExpression	"emit_set_delta ( compiler , TMP_REG1 , arg & REG_MASK , argw ) != SLJIT_ERR_UNSUPPORTED"		1018487	0		!=			
ANR	1018807	CallExpression	"emit_set_delta ( compiler , TMP_REG1 , arg & REG_MASK , argw )"		1018487	0					
ANR	1018808	Callee	emit_set_delta		1018487	0					
ANR	1018809	Identifier	emit_set_delta		1018487	0					
ANR	1018810	ArgumentList	compiler		1018487	1					
ANR	1018811	Argument	compiler		1018487	0					
ANR	1018812	Identifier	compiler		1018487	0					
ANR	1018813	Argument	TMP_REG1		1018487	1					
ANR	1018814	Identifier	TMP_REG1		1018487	0					
ANR	1018815	Argument	arg & REG_MASK		1018487	2					
ANR	1018816	BitAndExpression	arg & REG_MASK		1018487	0		&			
ANR	1018817	Identifier	arg		1018487	0					
ANR	1018818	Identifier	REG_MASK		1018487	1					
ANR	1018819	Argument	argw		1018487	3					
ANR	1018820	Identifier	argw		1018487	0					
ANR	1018821	Identifier	SLJIT_ERR_UNSUPPORTED		1018487	1					
ANR	1018822	CompoundStatement		35:89:1303:1303	1018487	1					
ANR	1018823	ExpressionStatement	FAIL_IF ( compiler -> error )	2079:3:64652:64676	1018487	0	True				
ANR	1018824	CallExpression	FAIL_IF ( compiler -> error )		1018487	0					
ANR	1018825	Callee	FAIL_IF		1018487	0					
ANR	1018826	Identifier	FAIL_IF		1018487	0					
ANR	1018827	ArgumentList	compiler -> error		1018487	1					
ANR	1018828	Argument	compiler -> error		1018487	0					
ANR	1018829	PtrMemberAccess	compiler -> error		1018487	0					
ANR	1018830	Identifier	compiler		1018487	0					
ANR	1018831	Identifier	error		1018487	1					
ANR	1018832	ReturnStatement	"return push_inst ( compiler , EMIT_FPU_DATA_TRANSFER ( inst , 1 , TMP_REG1 , reg , 0 ) ) ;"	2080:3:64681:64758	1018487	1	True				
ANR	1018833	CallExpression	"push_inst ( compiler , EMIT_FPU_DATA_TRANSFER ( inst , 1 , TMP_REG1 , reg , 0 ) )"		1018487	0					
ANR	1018834	Callee	push_inst		1018487	0					
ANR	1018835	Identifier	push_inst		1018487	0					
ANR	1018836	ArgumentList	compiler		1018487	1					
ANR	1018837	Argument	compiler		1018487	0					
ANR	1018838	Identifier	compiler		1018487	0					
ANR	1018839	Argument	"EMIT_FPU_DATA_TRANSFER ( inst , 1 , TMP_REG1 , reg , 0 )"		1018487	1					
ANR	1018840	CallExpression	"EMIT_FPU_DATA_TRANSFER ( inst , 1 , TMP_REG1 , reg , 0 )"		1018487	0					
ANR	1018841	Callee	EMIT_FPU_DATA_TRANSFER		1018487	0					
ANR	1018842	Identifier	EMIT_FPU_DATA_TRANSFER		1018487	0					
ANR	1018843	ArgumentList	inst		1018487	1					
ANR	1018844	Argument	inst		1018487	0					
ANR	1018845	Identifier	inst		1018487	0					
ANR	1018846	Argument	1		1018487	1					
ANR	1018847	PrimaryExpression	1		1018487	0					
ANR	1018848	Argument	TMP_REG1		1018487	2					
ANR	1018849	Identifier	TMP_REG1		1018487	0					
ANR	1018850	Argument	reg		1018487	3					
ANR	1018851	Identifier	reg		1018487	0					
ANR	1018852	Argument	0		1018487	4					
ANR	1018853	PrimaryExpression	0		1018487	0					
ANR	1018854	ExpressionStatement	imm = get_imm ( argw & ~0x3fc )	2082:2:64766:64794	1018487	1	True				
ANR	1018855	AssignmentExpression	imm = get_imm ( argw & ~0x3fc )		1018487	0		=			
ANR	1018856	Identifier	imm		1018487	0					
ANR	1018857	CallExpression	get_imm ( argw & ~0x3fc )		1018487	1					
ANR	1018858	Callee	get_imm		1018487	0					
ANR	1018859	Identifier	get_imm		1018487	0					
ANR	1018860	ArgumentList	argw & ~0x3fc		1018487	1					
ANR	1018861	Argument	argw & ~0x3fc		1018487	0					
ANR	1018862	BitAndExpression	argw & ~0x3fc		1018487	0		&			
ANR	1018863	Identifier	argw		1018487	0					
ANR	1018864	Identifier	~0x3fc		1018487	1					
ANR	1018865	IfStatement	if ( imm )		1018487	2					
ANR	1018866	Condition	imm	2083:6:64802:64804	1018487	0	True				
ANR	1018867	Identifier	imm		1018487	0					
ANR	1018868	CompoundStatement		40:11:1463:1463	1018487	1					
ANR	1018869	ExpressionStatement	"FAIL_IF ( push_inst ( compiler , EMIT_DATA_PROCESS_INS ( ADD_DP , 0 , TMP_REG1 , arg & REG_MASK , imm ) ) )"	2084:3:64812:64905	1018487	0	True				
ANR	1018870	CallExpression	"FAIL_IF ( push_inst ( compiler , EMIT_DATA_PROCESS_INS ( ADD_DP , 0 , TMP_REG1 , arg & REG_MASK , imm ) ) )"		1018487	0					
ANR	1018871	Callee	FAIL_IF		1018487	0					
ANR	1018872	Identifier	FAIL_IF		1018487	0					
ANR	1018873	ArgumentList	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( ADD_DP , 0 , TMP_REG1 , arg & REG_MASK , imm ) )"		1018487	1					
ANR	1018874	Argument	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( ADD_DP , 0 , TMP_REG1 , arg & REG_MASK , imm ) )"		1018487	0					
ANR	1018875	CallExpression	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( ADD_DP , 0 , TMP_REG1 , arg & REG_MASK , imm ) )"		1018487	0					
ANR	1018876	Callee	push_inst		1018487	0					
ANR	1018877	Identifier	push_inst		1018487	0					
ANR	1018878	ArgumentList	compiler		1018487	1					
ANR	1018879	Argument	compiler		1018487	0					
ANR	1018880	Identifier	compiler		1018487	0					
ANR	1018881	Argument	"EMIT_DATA_PROCESS_INS ( ADD_DP , 0 , TMP_REG1 , arg & REG_MASK , imm )"		1018487	1					
ANR	1018882	CallExpression	"EMIT_DATA_PROCESS_INS ( ADD_DP , 0 , TMP_REG1 , arg & REG_MASK , imm )"		1018487	0					
ANR	1018883	Callee	EMIT_DATA_PROCESS_INS		1018487	0					
ANR	1018884	Identifier	EMIT_DATA_PROCESS_INS		1018487	0					
ANR	1018885	ArgumentList	ADD_DP		1018487	1					
ANR	1018886	Argument	ADD_DP		1018487	0					
ANR	1018887	Identifier	ADD_DP		1018487	0					
ANR	1018888	Argument	0		1018487	1					
ANR	1018889	PrimaryExpression	0		1018487	0					
ANR	1018890	Argument	TMP_REG1		1018487	2					
ANR	1018891	Identifier	TMP_REG1		1018487	0					
ANR	1018892	Argument	arg & REG_MASK		1018487	3					
ANR	1018893	BitAndExpression	arg & REG_MASK		1018487	0		&			
ANR	1018894	Identifier	arg		1018487	0					
ANR	1018895	Identifier	REG_MASK		1018487	1					
ANR	1018896	Argument	imm		1018487	4					
ANR	1018897	Identifier	imm		1018487	0					
ANR	1018898	ReturnStatement	"return push_inst ( compiler , EMIT_FPU_DATA_TRANSFER ( inst , 1 , TMP_REG1 , reg , ( argw & 0x3fc ) >> 2 ) ) ;"	2085:3:64910:65005	1018487	1	True				
ANR	1018899	CallExpression	"push_inst ( compiler , EMIT_FPU_DATA_TRANSFER ( inst , 1 , TMP_REG1 , reg , ( argw & 0x3fc ) >> 2 ) )"		1018487	0					
ANR	1018900	Callee	push_inst		1018487	0					
ANR	1018901	Identifier	push_inst		1018487	0					
ANR	1018902	ArgumentList	compiler		1018487	1					
ANR	1018903	Argument	compiler		1018487	0					
ANR	1018904	Identifier	compiler		1018487	0					
ANR	1018905	Argument	"EMIT_FPU_DATA_TRANSFER ( inst , 1 , TMP_REG1 , reg , ( argw & 0x3fc ) >> 2 )"		1018487	1					
ANR	1018906	CallExpression	"EMIT_FPU_DATA_TRANSFER ( inst , 1 , TMP_REG1 , reg , ( argw & 0x3fc ) >> 2 )"		1018487	0					
ANR	1018907	Callee	EMIT_FPU_DATA_TRANSFER		1018487	0					
ANR	1018908	Identifier	EMIT_FPU_DATA_TRANSFER		1018487	0					
ANR	1018909	ArgumentList	inst		1018487	1					
ANR	1018910	Argument	inst		1018487	0					
ANR	1018911	Identifier	inst		1018487	0					
ANR	1018912	Argument	1		1018487	1					
ANR	1018913	PrimaryExpression	1		1018487	0					
ANR	1018914	Argument	TMP_REG1		1018487	2					
ANR	1018915	Identifier	TMP_REG1		1018487	0					
ANR	1018916	Argument	reg		1018487	3					
ANR	1018917	Identifier	reg		1018487	0					
ANR	1018918	Argument	( argw & 0x3fc ) >> 2		1018487	4					
ANR	1018919	ShiftExpression	( argw & 0x3fc ) >> 2		1018487	0		>>			
ANR	1018920	BitAndExpression	argw & 0x3fc		1018487	0		&			
ANR	1018921	Identifier	argw		1018487	0					
ANR	1018922	PrimaryExpression	0x3fc		1018487	1					
ANR	1018923	PrimaryExpression	2		1018487	1					
ANR	1018924	ExpressionStatement	imm = get_imm ( - argw & ~0x3fc )	2087:2:65013:65042	1018487	3	True				
ANR	1018925	AssignmentExpression	imm = get_imm ( - argw & ~0x3fc )		1018487	0		=			
ANR	1018926	Identifier	imm		1018487	0					
ANR	1018927	CallExpression	get_imm ( - argw & ~0x3fc )		1018487	1					
ANR	1018928	Callee	get_imm		1018487	0					
ANR	1018929	Identifier	get_imm		1018487	0					
ANR	1018930	ArgumentList	- argw & ~0x3fc		1018487	1					
ANR	1018931	Argument	- argw & ~0x3fc		1018487	0					
ANR	1018932	BitAndExpression	- argw & ~0x3fc		1018487	0		&			
ANR	1018933	UnaryOperationExpression	- argw		1018487	0					
ANR	1018934	UnaryOperator	-		1018487	0					
ANR	1018935	Identifier	argw		1018487	1					
ANR	1018936	Identifier	~0x3fc		1018487	1					
ANR	1018937	IfStatement	if ( imm )		1018487	4					
ANR	1018938	Condition	imm	2088:6:65050:65052	1018487	0	True				
ANR	1018939	Identifier	imm		1018487	0					
ANR	1018940	CompoundStatement		45:11:1711:1711	1018487	1					
ANR	1018941	ExpressionStatement	argw = - argw	2089:3:65060:65072	1018487	0	True				
ANR	1018942	AssignmentExpression	argw = - argw		1018487	0		=			
ANR	1018943	Identifier	argw		1018487	0					
ANR	1018944	UnaryOperationExpression	- argw		1018487	1					
ANR	1018945	UnaryOperator	-		1018487	0					
ANR	1018946	Identifier	argw		1018487	1					
ANR	1018947	ExpressionStatement	"FAIL_IF ( push_inst ( compiler , EMIT_DATA_PROCESS_INS ( SUB_DP , 0 , TMP_REG1 , arg & REG_MASK , imm ) ) )"	2090:3:65077:65170	1018487	1	True				
ANR	1018948	CallExpression	"FAIL_IF ( push_inst ( compiler , EMIT_DATA_PROCESS_INS ( SUB_DP , 0 , TMP_REG1 , arg & REG_MASK , imm ) ) )"		1018487	0					
ANR	1018949	Callee	FAIL_IF		1018487	0					
ANR	1018950	Identifier	FAIL_IF		1018487	0					
ANR	1018951	ArgumentList	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( SUB_DP , 0 , TMP_REG1 , arg & REG_MASK , imm ) )"		1018487	1					
ANR	1018952	Argument	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( SUB_DP , 0 , TMP_REG1 , arg & REG_MASK , imm ) )"		1018487	0					
ANR	1018953	CallExpression	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( SUB_DP , 0 , TMP_REG1 , arg & REG_MASK , imm ) )"		1018487	0					
ANR	1018954	Callee	push_inst		1018487	0					
ANR	1018955	Identifier	push_inst		1018487	0					
ANR	1018956	ArgumentList	compiler		1018487	1					
ANR	1018957	Argument	compiler		1018487	0					
ANR	1018958	Identifier	compiler		1018487	0					
ANR	1018959	Argument	"EMIT_DATA_PROCESS_INS ( SUB_DP , 0 , TMP_REG1 , arg & REG_MASK , imm )"		1018487	1					
ANR	1018960	CallExpression	"EMIT_DATA_PROCESS_INS ( SUB_DP , 0 , TMP_REG1 , arg & REG_MASK , imm )"		1018487	0					
ANR	1018961	Callee	EMIT_DATA_PROCESS_INS		1018487	0					
ANR	1018962	Identifier	EMIT_DATA_PROCESS_INS		1018487	0					
ANR	1018963	ArgumentList	SUB_DP		1018487	1					
ANR	1018964	Argument	SUB_DP		1018487	0					
ANR	1018965	Identifier	SUB_DP		1018487	0					
ANR	1018966	Argument	0		1018487	1					
ANR	1018967	PrimaryExpression	0		1018487	0					
ANR	1018968	Argument	TMP_REG1		1018487	2					
ANR	1018969	Identifier	TMP_REG1		1018487	0					
ANR	1018970	Argument	arg & REG_MASK		1018487	3					
ANR	1018971	BitAndExpression	arg & REG_MASK		1018487	0		&			
ANR	1018972	Identifier	arg		1018487	0					
ANR	1018973	Identifier	REG_MASK		1018487	1					
ANR	1018974	Argument	imm		1018487	4					
ANR	1018975	Identifier	imm		1018487	0					
ANR	1018976	ReturnStatement	"return push_inst ( compiler , EMIT_FPU_DATA_TRANSFER ( inst , 0 , TMP_REG1 , reg , ( argw & 0x3fc ) >> 2 ) ) ;"	2091:3:65175:65270	1018487	2	True				
ANR	1018977	CallExpression	"push_inst ( compiler , EMIT_FPU_DATA_TRANSFER ( inst , 0 , TMP_REG1 , reg , ( argw & 0x3fc ) >> 2 ) )"		1018487	0					
ANR	1018978	Callee	push_inst		1018487	0					
ANR	1018979	Identifier	push_inst		1018487	0					
ANR	1018980	ArgumentList	compiler		1018487	1					
ANR	1018981	Argument	compiler		1018487	0					
ANR	1018982	Identifier	compiler		1018487	0					
ANR	1018983	Argument	"EMIT_FPU_DATA_TRANSFER ( inst , 0 , TMP_REG1 , reg , ( argw & 0x3fc ) >> 2 )"		1018487	1					
ANR	1018984	CallExpression	"EMIT_FPU_DATA_TRANSFER ( inst , 0 , TMP_REG1 , reg , ( argw & 0x3fc ) >> 2 )"		1018487	0					
ANR	1018985	Callee	EMIT_FPU_DATA_TRANSFER		1018487	0					
ANR	1018986	Identifier	EMIT_FPU_DATA_TRANSFER		1018487	0					
ANR	1018987	ArgumentList	inst		1018487	1					
ANR	1018988	Argument	inst		1018487	0					
ANR	1018989	Identifier	inst		1018487	0					
ANR	1018990	Argument	0		1018487	1					
ANR	1018991	PrimaryExpression	0		1018487	0					
ANR	1018992	Argument	TMP_REG1		1018487	2					
ANR	1018993	Identifier	TMP_REG1		1018487	0					
ANR	1018994	Argument	reg		1018487	3					
ANR	1018995	Identifier	reg		1018487	0					
ANR	1018996	Argument	( argw & 0x3fc ) >> 2		1018487	4					
ANR	1018997	ShiftExpression	( argw & 0x3fc ) >> 2		1018487	0		>>			
ANR	1018998	BitAndExpression	argw & 0x3fc		1018487	0		&			
ANR	1018999	Identifier	argw		1018487	0					
ANR	1019000	PrimaryExpression	0x3fc		1018487	1					
ANR	1019001	PrimaryExpression	2		1018487	1					
ANR	1019002	ExpressionStatement	compiler -> cache_arg = arg	2095:1:65281:65306	1018487	8	True				
ANR	1019003	AssignmentExpression	compiler -> cache_arg = arg		1018487	0		=			
ANR	1019004	PtrMemberAccess	compiler -> cache_arg		1018487	0					
ANR	1019005	Identifier	compiler		1018487	0					
ANR	1019006	Identifier	cache_arg		1018487	1					
ANR	1019007	Identifier	arg		1018487	1					
ANR	1019008	ExpressionStatement	compiler -> cache_argw = argw	2096:1:65309:65336	1018487	9	True				
ANR	1019009	AssignmentExpression	compiler -> cache_argw = argw		1018487	0		=			
ANR	1019010	PtrMemberAccess	compiler -> cache_argw		1018487	0					
ANR	1019011	Identifier	compiler		1018487	0					
ANR	1019012	Identifier	cache_argw		1018487	1					
ANR	1019013	Identifier	argw		1018487	1					
ANR	1019014	IfStatement	if ( arg & REG_MASK )		1018487	10					
ANR	1019015	Condition	arg & REG_MASK	2097:5:65343:65356	1018487	0	True				
ANR	1019016	BitAndExpression	arg & REG_MASK		1018487	0		&			
ANR	1019017	Identifier	arg		1018487	0					
ANR	1019018	Identifier	REG_MASK		1018487	1					
ANR	1019019	CompoundStatement		54:21:2015:2015	1018487	1					
ANR	1019020	ExpressionStatement	"FAIL_IF ( load_immediate ( compiler , TMP_REG1 , argw ) )"	2098:2:65363:65412	1018487	0	True				
ANR	1019021	CallExpression	"FAIL_IF ( load_immediate ( compiler , TMP_REG1 , argw ) )"		1018487	0					
ANR	1019022	Callee	FAIL_IF		1018487	0					
ANR	1019023	Identifier	FAIL_IF		1018487	0					
ANR	1019024	ArgumentList	"load_immediate ( compiler , TMP_REG1 , argw )"		1018487	1					
ANR	1019025	Argument	"load_immediate ( compiler , TMP_REG1 , argw )"		1018487	0					
ANR	1019026	CallExpression	"load_immediate ( compiler , TMP_REG1 , argw )"		1018487	0					
ANR	1019027	Callee	load_immediate		1018487	0					
ANR	1019028	Identifier	load_immediate		1018487	0					
ANR	1019029	ArgumentList	compiler		1018487	1					
ANR	1019030	Argument	compiler		1018487	0					
ANR	1019031	Identifier	compiler		1018487	0					
ANR	1019032	Argument	TMP_REG1		1018487	1					
ANR	1019033	Identifier	TMP_REG1		1018487	0					
ANR	1019034	Argument	argw		1018487	2					
ANR	1019035	Identifier	argw		1018487	0					
ANR	1019036	ExpressionStatement	"FAIL_IF ( push_inst ( compiler , EMIT_DATA_PROCESS_INS ( ADD_DP , 0 , TMP_REG3 , arg & REG_MASK , reg_map [ TMP_REG1 ] ) ) )"	2099:2:65416:65523	1018487	1	True				
ANR	1019037	CallExpression	"FAIL_IF ( push_inst ( compiler , EMIT_DATA_PROCESS_INS ( ADD_DP , 0 , TMP_REG3 , arg & REG_MASK , reg_map [ TMP_REG1 ] ) ) )"		1018487	0					
ANR	1019038	Callee	FAIL_IF		1018487	0					
ANR	1019039	Identifier	FAIL_IF		1018487	0					
ANR	1019040	ArgumentList	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( ADD_DP , 0 , TMP_REG3 , arg & REG_MASK , reg_map [ TMP_REG1 ] ) )"		1018487	1					
ANR	1019041	Argument	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( ADD_DP , 0 , TMP_REG3 , arg & REG_MASK , reg_map [ TMP_REG1 ] ) )"		1018487	0					
ANR	1019042	CallExpression	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( ADD_DP , 0 , TMP_REG3 , arg & REG_MASK , reg_map [ TMP_REG1 ] ) )"		1018487	0					
ANR	1019043	Callee	push_inst		1018487	0					
ANR	1019044	Identifier	push_inst		1018487	0					
ANR	1019045	ArgumentList	compiler		1018487	1					
ANR	1019046	Argument	compiler		1018487	0					
ANR	1019047	Identifier	compiler		1018487	0					
ANR	1019048	Argument	"EMIT_DATA_PROCESS_INS ( ADD_DP , 0 , TMP_REG3 , arg & REG_MASK , reg_map [ TMP_REG1 ] )"		1018487	1					
ANR	1019049	CallExpression	"EMIT_DATA_PROCESS_INS ( ADD_DP , 0 , TMP_REG3 , arg & REG_MASK , reg_map [ TMP_REG1 ] )"		1018487	0					
ANR	1019050	Callee	EMIT_DATA_PROCESS_INS		1018487	0					
ANR	1019051	Identifier	EMIT_DATA_PROCESS_INS		1018487	0					
ANR	1019052	ArgumentList	ADD_DP		1018487	1					
ANR	1019053	Argument	ADD_DP		1018487	0					
ANR	1019054	Identifier	ADD_DP		1018487	0					
ANR	1019055	Argument	0		1018487	1					
ANR	1019056	PrimaryExpression	0		1018487	0					
ANR	1019057	Argument	TMP_REG3		1018487	2					
ANR	1019058	Identifier	TMP_REG3		1018487	0					
ANR	1019059	Argument	arg & REG_MASK		1018487	3					
ANR	1019060	BitAndExpression	arg & REG_MASK		1018487	0		&			
ANR	1019061	Identifier	arg		1018487	0					
ANR	1019062	Identifier	REG_MASK		1018487	1					
ANR	1019063	Argument	reg_map [ TMP_REG1 ]		1018487	4					
ANR	1019064	ArrayIndexing	reg_map [ TMP_REG1 ]		1018487	0					
ANR	1019065	Identifier	reg_map		1018487	0					
ANR	1019066	Identifier	TMP_REG1		1018487	1					
ANR	1019067	ElseStatement	else		1018487	0					
ANR	1019068	ExpressionStatement	"FAIL_IF ( load_immediate ( compiler , TMP_REG3 , argw ) )"	2102:2:65536:65585	1018487	0	True				
ANR	1019069	CallExpression	"FAIL_IF ( load_immediate ( compiler , TMP_REG3 , argw ) )"		1018487	0					
ANR	1019070	Callee	FAIL_IF		1018487	0					
ANR	1019071	Identifier	FAIL_IF		1018487	0					
ANR	1019072	ArgumentList	"load_immediate ( compiler , TMP_REG3 , argw )"		1018487	1					
ANR	1019073	Argument	"load_immediate ( compiler , TMP_REG3 , argw )"		1018487	0					
ANR	1019074	CallExpression	"load_immediate ( compiler , TMP_REG3 , argw )"		1018487	0					
ANR	1019075	Callee	load_immediate		1018487	0					
ANR	1019076	Identifier	load_immediate		1018487	0					
ANR	1019077	ArgumentList	compiler		1018487	1					
ANR	1019078	Argument	compiler		1018487	0					
ANR	1019079	Identifier	compiler		1018487	0					
ANR	1019080	Argument	TMP_REG3		1018487	1					
ANR	1019081	Identifier	TMP_REG3		1018487	0					
ANR	1019082	Argument	argw		1018487	2					
ANR	1019083	Identifier	argw		1018487	0					
ANR	1019084	ReturnStatement	"return push_inst ( compiler , EMIT_FPU_DATA_TRANSFER ( inst , 1 , TMP_REG3 , reg , 0 ) ) ;"	2104:1:65589:65666	1018487	11	True				
ANR	1019085	CallExpression	"push_inst ( compiler , EMIT_FPU_DATA_TRANSFER ( inst , 1 , TMP_REG3 , reg , 0 ) )"		1018487	0					
ANR	1019086	Callee	push_inst		1018487	0					
ANR	1019087	Identifier	push_inst		1018487	0					
ANR	1019088	ArgumentList	compiler		1018487	1					
ANR	1019089	Argument	compiler		1018487	0					
ANR	1019090	Identifier	compiler		1018487	0					
ANR	1019091	Argument	"EMIT_FPU_DATA_TRANSFER ( inst , 1 , TMP_REG3 , reg , 0 )"		1018487	1					
ANR	1019092	CallExpression	"EMIT_FPU_DATA_TRANSFER ( inst , 1 , TMP_REG3 , reg , 0 )"		1018487	0					
ANR	1019093	Callee	EMIT_FPU_DATA_TRANSFER		1018487	0					
ANR	1019094	Identifier	EMIT_FPU_DATA_TRANSFER		1018487	0					
ANR	1019095	ArgumentList	inst		1018487	1					
ANR	1019096	Argument	inst		1018487	0					
ANR	1019097	Identifier	inst		1018487	0					
ANR	1019098	Argument	1		1018487	1					
ANR	1019099	PrimaryExpression	1		1018487	0					
ANR	1019100	Argument	TMP_REG3		1018487	2					
ANR	1019101	Identifier	TMP_REG3		1018487	0					
ANR	1019102	Argument	reg		1018487	3					
ANR	1019103	Identifier	reg		1018487	0					
ANR	1019104	Argument	0		1018487	4					
ANR	1019105	PrimaryExpression	0		1018487	0					
ANR	1019106	ReturnType	static sljit_si		1018487	1					
ANR	1019107	Identifier	emit_fop_mem		1018487	2					
ANR	1019108	ParameterList	"struct sljit_compiler * compiler , sljit_si flags , sljit_si reg , sljit_si arg , sljit_sw argw"		1018487	3					
ANR	1019109	Parameter	struct sljit_compiler * compiler	2043:29:63251:63281	1018487	0	True				
ANR	1019110	ParameterType	struct sljit_compiler *		1018487	0					
ANR	1019111	Identifier	compiler		1018487	1					
ANR	1019112	Parameter	sljit_si flags	2043:62:63284:63297	1018487	1	True				
ANR	1019113	ParameterType	sljit_si		1018487	0					
ANR	1019114	Identifier	flags		1018487	1					
ANR	1019115	Parameter	sljit_si reg	2043:78:63300:63311	1018487	2	True				
ANR	1019116	ParameterType	sljit_si		1018487	0					
ANR	1019117	Identifier	reg		1018487	1					
ANR	1019118	Parameter	sljit_si arg	2043:92:63314:63325	1018487	3	True				
ANR	1019119	ParameterType	sljit_si		1018487	0					
ANR	1019120	Identifier	arg		1018487	1					
ANR	1019121	Parameter	sljit_sw argw	2043:106:63328:63340	1018487	4	True				
ANR	1019122	ParameterType	sljit_sw		1018487	0					
ANR	1019123	Identifier	argw		1018487	1					
ANR	1019124	CFGEntryNode	ENTRY		1018487		True				
ANR	1019125	CFGExitNode	EXIT		1018487		True				
ANR	1019126	Symbol	TMP_REG3		1018487						
ANR	1019127	Symbol	TMP_REG1		1018487						
ANR	1019128	Symbol	compiler -> cache_argw		1018487						
ANR	1019129	Symbol	ADD_DP		1018487						
ANR	1019130	Symbol	SLJIT_MEM		1018487						
ANR	1019131	Symbol	flags		1018487						
ANR	1019132	Symbol	imm		1018487						
ANR	1019133	Symbol	reg_map		1018487						
ANR	1019134	Symbol	* compiler		1018487						
ANR	1019135	Symbol	argw		1018487						
ANR	1019136	Symbol	emit_set_delta		1018487						
ANR	1019137	Symbol	load_immediate		1018487						
ANR	1019138	Symbol	reg		1018487						
ANR	1019139	Symbol	tmp		1018487						
ANR	1019140	Symbol	arg		1018487						
ANR	1019141	Symbol	* TMP_REG1		1018487						
ANR	1019142	Symbol	compiler		1018487						
ANR	1019143	Symbol	push_inst		1018487						
ANR	1019144	Symbol	REG_MASK		1018487						
ANR	1019145	Symbol	SUB_DP		1018487						
ANR	1019146	Symbol	compiler -> cache_arg		1018487						
ANR	1019147	Symbol	SLJIT_SINGLE_OP		1018487						
ANR	1019148	Symbol	OFFS_REG_MASK		1018487						
ANR	1019149	Symbol	get_imm		1018487						
ANR	1019150	Symbol	EMIT_FPU_DATA_TRANSFER		1018487						
ANR	1019151	Symbol	* reg_map		1018487						
ANR	1019152	Symbol	VSTR_F32		1018487						
ANR	1019153	Symbol	~0x3fc		1018487						
ANR	1019154	Symbol	FPU_LOAD		1018487						
ANR	1019155	Symbol	inst		1018487						
ANR	1019156	Symbol	OFFS_REG		1018487						
ANR	1019157	Symbol	RM		1018487						
ANR	1019158	Symbol	compiler -> error		1018487						
ANR	1019159	Symbol	SLJIT_UNLIKELY		1018487						
ANR	1019160	Symbol	EMIT_DATA_PROCESS_INS		1018487						
ANR	1019161	Symbol	SLJIT_ERR_UNSUPPORTED		1018487						
ANR	1019162	Function	sljit_emit_fop1_convw_fromd	2107:0:65671:66344							
ANR	1019163	FunctionDef	"sljit_emit_fop1_convw_fromd (struct sljit_compiler * compiler , sljit_si op , sljit_si dst , sljit_sw dstw , sljit_si src , sljit_sw srcw)"		1019162	0					
ANR	1019164	CompoundStatement		2110:0:65834:66344	1019162	0					
ANR	1019165	IfStatement	if ( src & SLJIT_MEM )		1019162	0					
ANR	1019166	Condition	src & SLJIT_MEM	2111:5:65841:65855	1019162	0	True				
ANR	1019167	BitAndExpression	src & SLJIT_MEM		1019162	0		&			
ANR	1019168	Identifier	src		1019162	0					
ANR	1019169	Identifier	SLJIT_MEM		1019162	1					
ANR	1019170	CompoundStatement		2:22:23:23	1019162	1					
ANR	1019171	ExpressionStatement	"FAIL_IF ( emit_fop_mem ( compiler , ( op & SLJIT_SINGLE_OP ) | FPU_LOAD , TMP_FREG1 , src , srcw ) )"	2112:2:65862:65950	1019162	0	True				
ANR	1019172	CallExpression	"FAIL_IF ( emit_fop_mem ( compiler , ( op & SLJIT_SINGLE_OP ) | FPU_LOAD , TMP_FREG1 , src , srcw ) )"		1019162	0					
ANR	1019173	Callee	FAIL_IF		1019162	0					
ANR	1019174	Identifier	FAIL_IF		1019162	0					
ANR	1019175	ArgumentList	"emit_fop_mem ( compiler , ( op & SLJIT_SINGLE_OP ) | FPU_LOAD , TMP_FREG1 , src , srcw )"		1019162	1					
ANR	1019176	Argument	"emit_fop_mem ( compiler , ( op & SLJIT_SINGLE_OP ) | FPU_LOAD , TMP_FREG1 , src , srcw )"		1019162	0					
ANR	1019177	CallExpression	"emit_fop_mem ( compiler , ( op & SLJIT_SINGLE_OP ) | FPU_LOAD , TMP_FREG1 , src , srcw )"		1019162	0					
ANR	1019178	Callee	emit_fop_mem		1019162	0					
ANR	1019179	Identifier	emit_fop_mem		1019162	0					
ANR	1019180	ArgumentList	compiler		1019162	1					
ANR	1019181	Argument	compiler		1019162	0					
ANR	1019182	Identifier	compiler		1019162	0					
ANR	1019183	Argument	( op & SLJIT_SINGLE_OP ) | FPU_LOAD		1019162	1					
ANR	1019184	InclusiveOrExpression	( op & SLJIT_SINGLE_OP ) | FPU_LOAD		1019162	0		|			
ANR	1019185	BitAndExpression	op & SLJIT_SINGLE_OP		1019162	0		&			
ANR	1019186	Identifier	op		1019162	0					
ANR	1019187	Identifier	SLJIT_SINGLE_OP		1019162	1					
ANR	1019188	Identifier	FPU_LOAD		1019162	1					
ANR	1019189	Argument	TMP_FREG1		1019162	2					
ANR	1019190	Identifier	TMP_FREG1		1019162	0					
ANR	1019191	Argument	src		1019162	3					
ANR	1019192	Identifier	src		1019162	0					
ANR	1019193	Argument	srcw		1019162	4					
ANR	1019194	Identifier	srcw		1019162	0					
ANR	1019195	ExpressionStatement	src = TMP_FREG1	2113:2:65954:65969	1019162	1	True				
ANR	1019196	AssignmentExpression	src = TMP_FREG1		1019162	0		=			
ANR	1019197	Identifier	src		1019162	0					
ANR	1019198	Identifier	TMP_FREG1		1019162	1					
ANR	1019199	ExpressionStatement	"FAIL_IF ( push_inst ( compiler , EMIT_FPU_OPERATION ( VCVT_S32_F32 , op & SLJIT_SINGLE_OP , TMP_FREG1 , src , 0 ) ) )"	2116:1:65976:66079	1019162	1	True				
ANR	1019200	CallExpression	"FAIL_IF ( push_inst ( compiler , EMIT_FPU_OPERATION ( VCVT_S32_F32 , op & SLJIT_SINGLE_OP , TMP_FREG1 , src , 0 ) ) )"		1019162	0					
ANR	1019201	Callee	FAIL_IF		1019162	0					
ANR	1019202	Identifier	FAIL_IF		1019162	0					
ANR	1019203	ArgumentList	"push_inst ( compiler , EMIT_FPU_OPERATION ( VCVT_S32_F32 , op & SLJIT_SINGLE_OP , TMP_FREG1 , src , 0 ) )"		1019162	1					
ANR	1019204	Argument	"push_inst ( compiler , EMIT_FPU_OPERATION ( VCVT_S32_F32 , op & SLJIT_SINGLE_OP , TMP_FREG1 , src , 0 ) )"		1019162	0					
ANR	1019205	CallExpression	"push_inst ( compiler , EMIT_FPU_OPERATION ( VCVT_S32_F32 , op & SLJIT_SINGLE_OP , TMP_FREG1 , src , 0 ) )"		1019162	0					
ANR	1019206	Callee	push_inst		1019162	0					
ANR	1019207	Identifier	push_inst		1019162	0					
ANR	1019208	ArgumentList	compiler		1019162	1					
ANR	1019209	Argument	compiler		1019162	0					
ANR	1019210	Identifier	compiler		1019162	0					
ANR	1019211	Argument	"EMIT_FPU_OPERATION ( VCVT_S32_F32 , op & SLJIT_SINGLE_OP , TMP_FREG1 , src , 0 )"		1019162	1					
ANR	1019212	CallExpression	"EMIT_FPU_OPERATION ( VCVT_S32_F32 , op & SLJIT_SINGLE_OP , TMP_FREG1 , src , 0 )"		1019162	0					
ANR	1019213	Callee	EMIT_FPU_OPERATION		1019162	0					
ANR	1019214	Identifier	EMIT_FPU_OPERATION		1019162	0					
ANR	1019215	ArgumentList	VCVT_S32_F32		1019162	1					
ANR	1019216	Argument	VCVT_S32_F32		1019162	0					
ANR	1019217	Identifier	VCVT_S32_F32		1019162	0					
ANR	1019218	Argument	op & SLJIT_SINGLE_OP		1019162	1					
ANR	1019219	BitAndExpression	op & SLJIT_SINGLE_OP		1019162	0		&			
ANR	1019220	Identifier	op		1019162	0					
ANR	1019221	Identifier	SLJIT_SINGLE_OP		1019162	1					
ANR	1019222	Argument	TMP_FREG1		1019162	2					
ANR	1019223	Identifier	TMP_FREG1		1019162	0					
ANR	1019224	Argument	src		1019162	3					
ANR	1019225	Identifier	src		1019162	0					
ANR	1019226	Argument	0		1019162	4					
ANR	1019227	PrimaryExpression	0		1019162	0					
ANR	1019228	IfStatement	if ( dst == SLJIT_UNUSED )		1019162	2					
ANR	1019229	Condition	dst == SLJIT_UNUSED	2118:5:66087:66105	1019162	0	True				
ANR	1019230	EqualityExpression	dst == SLJIT_UNUSED		1019162	0		==			
ANR	1019231	Identifier	dst		1019162	0					
ANR	1019232	Identifier	SLJIT_UNUSED		1019162	1					
ANR	1019233	ReturnStatement	return SLJIT_SUCCESS ;	2119:2:66110:66130	1019162	1	True				
ANR	1019234	Identifier	SLJIT_SUCCESS		1019162	0					
ANR	1019235	IfStatement	if ( FAST_IS_REG ( dst ) )		1019162	3					
ANR	1019236	Condition	FAST_IS_REG ( dst )	2121:5:66138:66153	1019162	0	True				
ANR	1019237	CallExpression	FAST_IS_REG ( dst )		1019162	0					
ANR	1019238	Callee	FAST_IS_REG		1019162	0					
ANR	1019239	Identifier	FAST_IS_REG		1019162	0					
ANR	1019240	ArgumentList	dst		1019162	1					
ANR	1019241	Argument	dst		1019162	0					
ANR	1019242	Identifier	dst		1019162	0					
ANR	1019243	ReturnStatement	"return push_inst ( compiler , VMOV | ( 1 << 20 ) | RD ( dst ) | ( TMP_FREG1 << 16 ) ) ;"	2122:2:66158:66232	1019162	1	True				
ANR	1019244	CallExpression	"push_inst ( compiler , VMOV | ( 1 << 20 ) | RD ( dst ) | ( TMP_FREG1 << 16 ) )"		1019162	0					
ANR	1019245	Callee	push_inst		1019162	0					
ANR	1019246	Identifier	push_inst		1019162	0					
ANR	1019247	ArgumentList	compiler		1019162	1					
ANR	1019248	Argument	compiler		1019162	0					
ANR	1019249	Identifier	compiler		1019162	0					
ANR	1019250	Argument	VMOV | ( 1 << 20 ) | RD ( dst ) | ( TMP_FREG1 << 16 )		1019162	1					
ANR	1019251	InclusiveOrExpression	VMOV | ( 1 << 20 ) | RD ( dst ) | ( TMP_FREG1 << 16 )		1019162	0		|			
ANR	1019252	Identifier	VMOV		1019162	0					
ANR	1019253	InclusiveOrExpression	( 1 << 20 ) | RD ( dst ) | ( TMP_FREG1 << 16 )		1019162	1		|			
ANR	1019254	ShiftExpression	1 << 20		1019162	0		<<			
ANR	1019255	PrimaryExpression	1		1019162	0					
ANR	1019256	PrimaryExpression	20		1019162	1					
ANR	1019257	InclusiveOrExpression	RD ( dst ) | ( TMP_FREG1 << 16 )		1019162	1		|			
ANR	1019258	CallExpression	RD ( dst )		1019162	0					
ANR	1019259	Callee	RD		1019162	0					
ANR	1019260	Identifier	RD		1019162	0					
ANR	1019261	ArgumentList	dst		1019162	1					
ANR	1019262	Argument	dst		1019162	0					
ANR	1019263	Identifier	dst		1019162	0					
ANR	1019264	ShiftExpression	TMP_FREG1 << 16		1019162	1		<<			
ANR	1019265	Identifier	TMP_FREG1		1019162	0					
ANR	1019266	PrimaryExpression	16		1019162	1					
ANR	1019267	ReturnStatement	"return emit_fop_mem ( compiler , 0 , TMP_FREG1 , dst , dstw ) ;"	2125:1:66288:66342	1019162	4	True				
ANR	1019268	CallExpression	"emit_fop_mem ( compiler , 0 , TMP_FREG1 , dst , dstw )"		1019162	0					
ANR	1019269	Callee	emit_fop_mem		1019162	0					
ANR	1019270	Identifier	emit_fop_mem		1019162	0					
ANR	1019271	ArgumentList	compiler		1019162	1					
ANR	1019272	Argument	compiler		1019162	0					
ANR	1019273	Identifier	compiler		1019162	0					
ANR	1019274	Argument	0		1019162	1					
ANR	1019275	PrimaryExpression	0		1019162	0					
ANR	1019276	Argument	TMP_FREG1		1019162	2					
ANR	1019277	Identifier	TMP_FREG1		1019162	0					
ANR	1019278	Argument	dst		1019162	3					
ANR	1019279	Identifier	dst		1019162	0					
ANR	1019280	Argument	dstw		1019162	4					
ANR	1019281	Identifier	dstw		1019162	0					
ANR	1019282	ReturnType	static SLJIT_INLINE sljit_si		1019162	1					
ANR	1019283	Identifier	sljit_emit_fop1_convw_fromd		1019162	2					
ANR	1019284	ParameterList	"struct sljit_compiler * compiler , sljit_si op , sljit_si dst , sljit_sw dstw , sljit_si src , sljit_sw srcw"		1019162	3					
ANR	1019285	Parameter	struct sljit_compiler * compiler	2107:57:65728:65758	1019162	0	True				
ANR	1019286	ParameterType	struct sljit_compiler *		1019162	0					
ANR	1019287	Identifier	compiler		1019162	1					
ANR	1019288	Parameter	sljit_si op	2107:90:65761:65771	1019162	1	True				
ANR	1019289	ParameterType	sljit_si		1019162	0					
ANR	1019290	Identifier	op		1019162	1					
ANR	1019291	Parameter	sljit_si dst	2108:1:65775:65786	1019162	2	True				
ANR	1019292	ParameterType	sljit_si		1019162	0					
ANR	1019293	Identifier	dst		1019162	1					
ANR	1019294	Parameter	sljit_sw dstw	2108:15:65789:65801	1019162	3	True				
ANR	1019295	ParameterType	sljit_sw		1019162	0					
ANR	1019296	Identifier	dstw		1019162	1					
ANR	1019297	Parameter	sljit_si src	2109:1:65805:65816	1019162	4	True				
ANR	1019298	ParameterType	sljit_si		1019162	0					
ANR	1019299	Identifier	src		1019162	1					
ANR	1019300	Parameter	sljit_sw srcw	2109:15:65819:65831	1019162	5	True				
ANR	1019301	ParameterType	sljit_sw		1019162	0					
ANR	1019302	Identifier	srcw		1019162	1					
ANR	1019303	CFGEntryNode	ENTRY		1019162		True				
ANR	1019304	CFGExitNode	EXIT		1019162		True				
ANR	1019305	Symbol	op		1019162						
ANR	1019306	Symbol	push_inst		1019162						
ANR	1019307	Symbol	FAST_IS_REG		1019162						
ANR	1019308	Symbol	dst		1019162						
ANR	1019309	Symbol	src		1019162						
ANR	1019310	Symbol	TMP_FREG1		1019162						
ANR	1019311	Symbol	srcw		1019162						
ANR	1019312	Symbol	SLJIT_MEM		1019162						
ANR	1019313	Symbol	SLJIT_SINGLE_OP		1019162						
ANR	1019314	Symbol	SLJIT_SUCCESS		1019162						
ANR	1019315	Symbol	EMIT_FPU_OPERATION		1019162						
ANR	1019316	Symbol	RD		1019162						
ANR	1019317	Symbol	SLJIT_UNUSED		1019162						
ANR	1019318	Symbol	FPU_LOAD		1019162						
ANR	1019319	Symbol	emit_fop_mem		1019162						
ANR	1019320	Symbol	VCVT_S32_F32		1019162						
ANR	1019321	Symbol	VMOV		1019162						
ANR	1019322	Symbol	compiler		1019162						
ANR	1019323	Symbol	dstw		1019162						
ANR	1019324	Function	sljit_emit_fop1_convd_fromw	2128:0:66347:67180							
ANR	1019325	FunctionDef	"sljit_emit_fop1_convd_fromw (struct sljit_compiler * compiler , sljit_si op , sljit_si dst , sljit_sw dstw , sljit_si src , sljit_sw srcw)"		1019324	0					
ANR	1019326	CompoundStatement		2131:0:66510:67180	1019324	0					
ANR	1019327	IdentifierDeclStatement	sljit_si dst_r = FAST_IS_REG ( dst ) ? dst : TMP_FREG1 ;	2132:1:66513:66564	1019324	0	True				
ANR	1019328	IdentifierDecl	dst_r = FAST_IS_REG ( dst ) ? dst : TMP_FREG1		1019324	0					
ANR	1019329	IdentifierDeclType	sljit_si		1019324	0					
ANR	1019330	Identifier	dst_r		1019324	1					
ANR	1019331	AssignmentExpression	dst_r = FAST_IS_REG ( dst ) ? dst : TMP_FREG1		1019324	2		=			
ANR	1019332	Identifier	dst_r		1019324	0					
ANR	1019333	ConditionalExpression	FAST_IS_REG ( dst ) ? dst : TMP_FREG1		1019324	1					
ANR	1019334	Condition	FAST_IS_REG ( dst )		1019324	0					
ANR	1019335	CallExpression	FAST_IS_REG ( dst )		1019324	0					
ANR	1019336	Callee	FAST_IS_REG		1019324	0					
ANR	1019337	Identifier	FAST_IS_REG		1019324	0					
ANR	1019338	ArgumentList	dst		1019324	1					
ANR	1019339	Argument	dst		1019324	0					
ANR	1019340	Identifier	dst		1019324	0					
ANR	1019341	Identifier	dst		1019324	1					
ANR	1019342	Identifier	TMP_FREG1		1019324	2					
ANR	1019343	IfStatement	if ( FAST_IS_REG ( src ) )		1019324	1					
ANR	1019344	Condition	FAST_IS_REG ( src )	2134:5:66572:66587	1019324	0	True				
ANR	1019345	CallExpression	FAST_IS_REG ( src )		1019324	0					
ANR	1019346	Callee	FAST_IS_REG		1019324	0					
ANR	1019347	Identifier	FAST_IS_REG		1019324	0					
ANR	1019348	ArgumentList	src		1019324	1					
ANR	1019349	Argument	src		1019324	0					
ANR	1019350	Identifier	src		1019324	0					
ANR	1019351	ExpressionStatement	"FAIL_IF ( push_inst ( compiler , VMOV | RD ( src ) | ( TMP_FREG1 << 16 ) ) )"	2135:2:66592:66656	1019324	1	True				
ANR	1019352	CallExpression	"FAIL_IF ( push_inst ( compiler , VMOV | RD ( src ) | ( TMP_FREG1 << 16 ) ) )"		1019324	0					
ANR	1019353	Callee	FAIL_IF		1019324	0					
ANR	1019354	Identifier	FAIL_IF		1019324	0					
ANR	1019355	ArgumentList	"push_inst ( compiler , VMOV | RD ( src ) | ( TMP_FREG1 << 16 ) )"		1019324	1					
ANR	1019356	Argument	"push_inst ( compiler , VMOV | RD ( src ) | ( TMP_FREG1 << 16 ) )"		1019324	0					
ANR	1019357	CallExpression	"push_inst ( compiler , VMOV | RD ( src ) | ( TMP_FREG1 << 16 ) )"		1019324	0					
ANR	1019358	Callee	push_inst		1019324	0					
ANR	1019359	Identifier	push_inst		1019324	0					
ANR	1019360	ArgumentList	compiler		1019324	1					
ANR	1019361	Argument	compiler		1019324	0					
ANR	1019362	Identifier	compiler		1019324	0					
ANR	1019363	Argument	VMOV | RD ( src ) | ( TMP_FREG1 << 16 )		1019324	1					
ANR	1019364	InclusiveOrExpression	VMOV | RD ( src ) | ( TMP_FREG1 << 16 )		1019324	0		|			
ANR	1019365	Identifier	VMOV		1019324	0					
ANR	1019366	InclusiveOrExpression	RD ( src ) | ( TMP_FREG1 << 16 )		1019324	1		|			
ANR	1019367	CallExpression	RD ( src )		1019324	0					
ANR	1019368	Callee	RD		1019324	0					
ANR	1019369	Identifier	RD		1019324	0					
ANR	1019370	ArgumentList	src		1019324	1					
ANR	1019371	Argument	src		1019324	0					
ANR	1019372	Identifier	src		1019324	0					
ANR	1019373	ShiftExpression	TMP_FREG1 << 16		1019324	1		<<			
ANR	1019374	Identifier	TMP_FREG1		1019324	0					
ANR	1019375	PrimaryExpression	16		1019324	1					
ANR	1019376	ElseStatement	else		1019324	0					
ANR	1019377	IfStatement	if ( src & SLJIT_MEM )		1019324	0					
ANR	1019378	Condition	src & SLJIT_MEM	2136:10:66668:66682	1019324	0	True				
ANR	1019379	BitAndExpression	src & SLJIT_MEM		1019324	0		&			
ANR	1019380	Identifier	src		1019324	0					
ANR	1019381	Identifier	SLJIT_MEM		1019324	1					
ANR	1019382	CompoundStatement		6:27:174:174	1019324	1					
ANR	1019383	ExpressionStatement	"FAIL_IF ( emit_fop_mem ( compiler , FPU_LOAD , TMP_FREG1 , src , srcw ) )"	2138:2:66741:66804	1019324	0	True				
ANR	1019384	CallExpression	"FAIL_IF ( emit_fop_mem ( compiler , FPU_LOAD , TMP_FREG1 , src , srcw ) )"		1019324	0					
ANR	1019385	Callee	FAIL_IF		1019324	0					
ANR	1019386	Identifier	FAIL_IF		1019324	0					
ANR	1019387	ArgumentList	"emit_fop_mem ( compiler , FPU_LOAD , TMP_FREG1 , src , srcw )"		1019324	1					
ANR	1019388	Argument	"emit_fop_mem ( compiler , FPU_LOAD , TMP_FREG1 , src , srcw )"		1019324	0					
ANR	1019389	CallExpression	"emit_fop_mem ( compiler , FPU_LOAD , TMP_FREG1 , src , srcw )"		1019324	0					
ANR	1019390	Callee	emit_fop_mem		1019324	0					
ANR	1019391	Identifier	emit_fop_mem		1019324	0					
ANR	1019392	ArgumentList	compiler		1019324	1					
ANR	1019393	Argument	compiler		1019324	0					
ANR	1019394	Identifier	compiler		1019324	0					
ANR	1019395	Argument	FPU_LOAD		1019324	1					
ANR	1019396	Identifier	FPU_LOAD		1019324	0					
ANR	1019397	Argument	TMP_FREG1		1019324	2					
ANR	1019398	Identifier	TMP_FREG1		1019324	0					
ANR	1019399	Argument	src		1019324	3					
ANR	1019400	Identifier	src		1019324	0					
ANR	1019401	Argument	srcw		1019324	4					
ANR	1019402	Identifier	srcw		1019324	0					
ANR	1019403	ElseStatement	else		1019324	0					
ANR	1019404	CompoundStatement		10:6:304:304	1019324	0					
ANR	1019405	ExpressionStatement	"FAIL_IF ( load_immediate ( compiler , TMP_REG1 , srcw ) )"	2141:2:66819:66868	1019324	0	True				
ANR	1019406	CallExpression	"FAIL_IF ( load_immediate ( compiler , TMP_REG1 , srcw ) )"		1019324	0					
ANR	1019407	Callee	FAIL_IF		1019324	0					
ANR	1019408	Identifier	FAIL_IF		1019324	0					
ANR	1019409	ArgumentList	"load_immediate ( compiler , TMP_REG1 , srcw )"		1019324	1					
ANR	1019410	Argument	"load_immediate ( compiler , TMP_REG1 , srcw )"		1019324	0					
ANR	1019411	CallExpression	"load_immediate ( compiler , TMP_REG1 , srcw )"		1019324	0					
ANR	1019412	Callee	load_immediate		1019324	0					
ANR	1019413	Identifier	load_immediate		1019324	0					
ANR	1019414	ArgumentList	compiler		1019324	1					
ANR	1019415	Argument	compiler		1019324	0					
ANR	1019416	Identifier	compiler		1019324	0					
ANR	1019417	Argument	TMP_REG1		1019324	1					
ANR	1019418	Identifier	TMP_REG1		1019324	0					
ANR	1019419	Argument	srcw		1019324	2					
ANR	1019420	Identifier	srcw		1019324	0					
ANR	1019421	ExpressionStatement	"FAIL_IF ( push_inst ( compiler , VMOV | RD ( TMP_REG1 ) | ( TMP_FREG1 << 16 ) ) )"	2142:2:66872:66941	1019324	1	True				
ANR	1019422	CallExpression	"FAIL_IF ( push_inst ( compiler , VMOV | RD ( TMP_REG1 ) | ( TMP_FREG1 << 16 ) ) )"		1019324	0					
ANR	1019423	Callee	FAIL_IF		1019324	0					
ANR	1019424	Identifier	FAIL_IF		1019324	0					
ANR	1019425	ArgumentList	"push_inst ( compiler , VMOV | RD ( TMP_REG1 ) | ( TMP_FREG1 << 16 ) )"		1019324	1					
ANR	1019426	Argument	"push_inst ( compiler , VMOV | RD ( TMP_REG1 ) | ( TMP_FREG1 << 16 ) )"		1019324	0					
ANR	1019427	CallExpression	"push_inst ( compiler , VMOV | RD ( TMP_REG1 ) | ( TMP_FREG1 << 16 ) )"		1019324	0					
ANR	1019428	Callee	push_inst		1019324	0					
ANR	1019429	Identifier	push_inst		1019324	0					
ANR	1019430	ArgumentList	compiler		1019324	1					
ANR	1019431	Argument	compiler		1019324	0					
ANR	1019432	Identifier	compiler		1019324	0					
ANR	1019433	Argument	VMOV | RD ( TMP_REG1 ) | ( TMP_FREG1 << 16 )		1019324	1					
ANR	1019434	InclusiveOrExpression	VMOV | RD ( TMP_REG1 ) | ( TMP_FREG1 << 16 )		1019324	0		|			
ANR	1019435	Identifier	VMOV		1019324	0					
ANR	1019436	InclusiveOrExpression	RD ( TMP_REG1 ) | ( TMP_FREG1 << 16 )		1019324	1		|			
ANR	1019437	CallExpression	RD ( TMP_REG1 )		1019324	0					
ANR	1019438	Callee	RD		1019324	0					
ANR	1019439	Identifier	RD		1019324	0					
ANR	1019440	ArgumentList	TMP_REG1		1019324	1					
ANR	1019441	Argument	TMP_REG1		1019324	0					
ANR	1019442	Identifier	TMP_REG1		1019324	0					
ANR	1019443	ShiftExpression	TMP_FREG1 << 16		1019324	1		<<			
ANR	1019444	Identifier	TMP_FREG1		1019324	0					
ANR	1019445	PrimaryExpression	16		1019324	1					
ANR	1019446	ExpressionStatement	"FAIL_IF ( push_inst ( compiler , EMIT_FPU_OPERATION ( VCVT_F32_S32 , op & SLJIT_SINGLE_OP , dst_r , TMP_FREG1 , 0 ) ) )"	2145:1:66948:67053	1019324	2	True				
ANR	1019447	CallExpression	"FAIL_IF ( push_inst ( compiler , EMIT_FPU_OPERATION ( VCVT_F32_S32 , op & SLJIT_SINGLE_OP , dst_r , TMP_FREG1 , 0 ) ) )"		1019324	0					
ANR	1019448	Callee	FAIL_IF		1019324	0					
ANR	1019449	Identifier	FAIL_IF		1019324	0					
ANR	1019450	ArgumentList	"push_inst ( compiler , EMIT_FPU_OPERATION ( VCVT_F32_S32 , op & SLJIT_SINGLE_OP , dst_r , TMP_FREG1 , 0 ) )"		1019324	1					
ANR	1019451	Argument	"push_inst ( compiler , EMIT_FPU_OPERATION ( VCVT_F32_S32 , op & SLJIT_SINGLE_OP , dst_r , TMP_FREG1 , 0 ) )"		1019324	0					
ANR	1019452	CallExpression	"push_inst ( compiler , EMIT_FPU_OPERATION ( VCVT_F32_S32 , op & SLJIT_SINGLE_OP , dst_r , TMP_FREG1 , 0 ) )"		1019324	0					
ANR	1019453	Callee	push_inst		1019324	0					
ANR	1019454	Identifier	push_inst		1019324	0					
ANR	1019455	ArgumentList	compiler		1019324	1					
ANR	1019456	Argument	compiler		1019324	0					
ANR	1019457	Identifier	compiler		1019324	0					
ANR	1019458	Argument	"EMIT_FPU_OPERATION ( VCVT_F32_S32 , op & SLJIT_SINGLE_OP , dst_r , TMP_FREG1 , 0 )"		1019324	1					
ANR	1019459	CallExpression	"EMIT_FPU_OPERATION ( VCVT_F32_S32 , op & SLJIT_SINGLE_OP , dst_r , TMP_FREG1 , 0 )"		1019324	0					
ANR	1019460	Callee	EMIT_FPU_OPERATION		1019324	0					
ANR	1019461	Identifier	EMIT_FPU_OPERATION		1019324	0					
ANR	1019462	ArgumentList	VCVT_F32_S32		1019324	1					
ANR	1019463	Argument	VCVT_F32_S32		1019324	0					
ANR	1019464	Identifier	VCVT_F32_S32		1019324	0					
ANR	1019465	Argument	op & SLJIT_SINGLE_OP		1019324	1					
ANR	1019466	BitAndExpression	op & SLJIT_SINGLE_OP		1019324	0		&			
ANR	1019467	Identifier	op		1019324	0					
ANR	1019468	Identifier	SLJIT_SINGLE_OP		1019324	1					
ANR	1019469	Argument	dst_r		1019324	2					
ANR	1019470	Identifier	dst_r		1019324	0					
ANR	1019471	Argument	TMP_FREG1		1019324	3					
ANR	1019472	Identifier	TMP_FREG1		1019324	0					
ANR	1019473	Argument	0		1019324	4					
ANR	1019474	PrimaryExpression	0		1019324	0					
ANR	1019475	IfStatement	if ( dst & SLJIT_MEM )		1019324	3					
ANR	1019476	Condition	dst & SLJIT_MEM	2147:5:67061:67075	1019324	0	True				
ANR	1019477	BitAndExpression	dst & SLJIT_MEM		1019324	0		&			
ANR	1019478	Identifier	dst		1019324	0					
ANR	1019479	Identifier	SLJIT_MEM		1019324	1					
ANR	1019480	ReturnStatement	"return emit_fop_mem ( compiler , ( op & SLJIT_SINGLE_OP ) , TMP_FREG1 , dst , dstw ) ;"	2148:2:67080:67155	1019324	1	True				
ANR	1019481	CallExpression	"emit_fop_mem ( compiler , ( op & SLJIT_SINGLE_OP ) , TMP_FREG1 , dst , dstw )"		1019324	0					
ANR	1019482	Callee	emit_fop_mem		1019324	0					
ANR	1019483	Identifier	emit_fop_mem		1019324	0					
ANR	1019484	ArgumentList	compiler		1019324	1					
ANR	1019485	Argument	compiler		1019324	0					
ANR	1019486	Identifier	compiler		1019324	0					
ANR	1019487	Argument	op & SLJIT_SINGLE_OP		1019324	1					
ANR	1019488	BitAndExpression	op & SLJIT_SINGLE_OP		1019324	0		&			
ANR	1019489	Identifier	op		1019324	0					
ANR	1019490	Identifier	SLJIT_SINGLE_OP		1019324	1					
ANR	1019491	Argument	TMP_FREG1		1019324	2					
ANR	1019492	Identifier	TMP_FREG1		1019324	0					
ANR	1019493	Argument	dst		1019324	3					
ANR	1019494	Identifier	dst		1019324	0					
ANR	1019495	Argument	dstw		1019324	4					
ANR	1019496	Identifier	dstw		1019324	0					
ANR	1019497	ReturnStatement	return SLJIT_SUCCESS ;	2149:1:67158:67178	1019324	4	True				
ANR	1019498	Identifier	SLJIT_SUCCESS		1019324	0					
ANR	1019499	ReturnType	static SLJIT_INLINE sljit_si		1019324	1					
ANR	1019500	Identifier	sljit_emit_fop1_convd_fromw		1019324	2					
ANR	1019501	ParameterList	"struct sljit_compiler * compiler , sljit_si op , sljit_si dst , sljit_sw dstw , sljit_si src , sljit_sw srcw"		1019324	3					
ANR	1019502	Parameter	struct sljit_compiler * compiler	2128:57:66404:66434	1019324	0	True				
ANR	1019503	ParameterType	struct sljit_compiler *		1019324	0					
ANR	1019504	Identifier	compiler		1019324	1					
ANR	1019505	Parameter	sljit_si op	2128:90:66437:66447	1019324	1	True				
ANR	1019506	ParameterType	sljit_si		1019324	0					
ANR	1019507	Identifier	op		1019324	1					
ANR	1019508	Parameter	sljit_si dst	2129:1:66451:66462	1019324	2	True				
ANR	1019509	ParameterType	sljit_si		1019324	0					
ANR	1019510	Identifier	dst		1019324	1					
ANR	1019511	Parameter	sljit_sw dstw	2129:15:66465:66477	1019324	3	True				
ANR	1019512	ParameterType	sljit_sw		1019324	0					
ANR	1019513	Identifier	dstw		1019324	1					
ANR	1019514	Parameter	sljit_si src	2130:1:66481:66492	1019324	4	True				
ANR	1019515	ParameterType	sljit_si		1019324	0					
ANR	1019516	Identifier	src		1019324	1					
ANR	1019517	Parameter	sljit_sw srcw	2130:15:66495:66507	1019324	5	True				
ANR	1019518	ParameterType	sljit_sw		1019324	0					
ANR	1019519	Identifier	srcw		1019324	1					
ANR	1019520	CFGEntryNode	ENTRY		1019324		True				
ANR	1019521	CFGExitNode	EXIT		1019324		True				
ANR	1019522	Symbol	op		1019324						
ANR	1019523	Symbol	push_inst		1019324						
ANR	1019524	Symbol	TMP_REG1		1019324						
ANR	1019525	Symbol	FAST_IS_REG		1019324						
ANR	1019526	Symbol	dst		1019324						
ANR	1019527	Symbol	VCVT_F32_S32		1019324						
ANR	1019528	Symbol	src		1019324						
ANR	1019529	Symbol	TMP_FREG1		1019324						
ANR	1019530	Symbol	srcw		1019324						
ANR	1019531	Symbol	SLJIT_MEM		1019324						
ANR	1019532	Symbol	SLJIT_SINGLE_OP		1019324						
ANR	1019533	Symbol	SLJIT_SUCCESS		1019324						
ANR	1019534	Symbol	EMIT_FPU_OPERATION		1019324						
ANR	1019535	Symbol	dst_r		1019324						
ANR	1019536	Symbol	RD		1019324						
ANR	1019537	Symbol	load_immediate		1019324						
ANR	1019538	Symbol	FPU_LOAD		1019324						
ANR	1019539	Symbol	emit_fop_mem		1019324						
ANR	1019540	Symbol	VMOV		1019324						
ANR	1019541	Symbol	compiler		1019324						
ANR	1019542	Symbol	dstw		1019324						
ANR	1019543	Function	sljit_emit_fop1_cmp	2152:0:67183:67763							
ANR	1019544	FunctionDef	"sljit_emit_fop1_cmp (struct sljit_compiler * compiler , sljit_si op , sljit_si src1 , sljit_sw src1w , sljit_si src2 , sljit_sw src2w)"		1019543	0					
ANR	1019545	CompoundStatement		2155:0:67342:67763	1019543	0					
ANR	1019546	IfStatement	if ( src1 & SLJIT_MEM )		1019543	0					
ANR	1019547	Condition	src1 & SLJIT_MEM	2156:5:67349:67364	1019543	0	True				
ANR	1019548	BitAndExpression	src1 & SLJIT_MEM		1019543	0		&			
ANR	1019549	Identifier	src1		1019543	0					
ANR	1019550	Identifier	SLJIT_MEM		1019543	1					
ANR	1019551	CompoundStatement		2:23:24:24	1019543	1					
ANR	1019552	ExpressionStatement	"FAIL_IF ( emit_fop_mem ( compiler , ( op & SLJIT_SINGLE_OP ) | FPU_LOAD , TMP_FREG1 , src1 , src1w ) )"	2157:2:67371:67461	1019543	0	True				
ANR	1019553	CallExpression	"FAIL_IF ( emit_fop_mem ( compiler , ( op & SLJIT_SINGLE_OP ) | FPU_LOAD , TMP_FREG1 , src1 , src1w ) )"		1019543	0					
ANR	1019554	Callee	FAIL_IF		1019543	0					
ANR	1019555	Identifier	FAIL_IF		1019543	0					
ANR	1019556	ArgumentList	"emit_fop_mem ( compiler , ( op & SLJIT_SINGLE_OP ) | FPU_LOAD , TMP_FREG1 , src1 , src1w )"		1019543	1					
ANR	1019557	Argument	"emit_fop_mem ( compiler , ( op & SLJIT_SINGLE_OP ) | FPU_LOAD , TMP_FREG1 , src1 , src1w )"		1019543	0					
ANR	1019558	CallExpression	"emit_fop_mem ( compiler , ( op & SLJIT_SINGLE_OP ) | FPU_LOAD , TMP_FREG1 , src1 , src1w )"		1019543	0					
ANR	1019559	Callee	emit_fop_mem		1019543	0					
ANR	1019560	Identifier	emit_fop_mem		1019543	0					
ANR	1019561	ArgumentList	compiler		1019543	1					
ANR	1019562	Argument	compiler		1019543	0					
ANR	1019563	Identifier	compiler		1019543	0					
ANR	1019564	Argument	( op & SLJIT_SINGLE_OP ) | FPU_LOAD		1019543	1					
ANR	1019565	InclusiveOrExpression	( op & SLJIT_SINGLE_OP ) | FPU_LOAD		1019543	0		|			
ANR	1019566	BitAndExpression	op & SLJIT_SINGLE_OP		1019543	0		&			
ANR	1019567	Identifier	op		1019543	0					
ANR	1019568	Identifier	SLJIT_SINGLE_OP		1019543	1					
ANR	1019569	Identifier	FPU_LOAD		1019543	1					
ANR	1019570	Argument	TMP_FREG1		1019543	2					
ANR	1019571	Identifier	TMP_FREG1		1019543	0					
ANR	1019572	Argument	src1		1019543	3					
ANR	1019573	Identifier	src1		1019543	0					
ANR	1019574	Argument	src1w		1019543	4					
ANR	1019575	Identifier	src1w		1019543	0					
ANR	1019576	ExpressionStatement	src1 = TMP_FREG1	2158:2:67465:67481	1019543	1	True				
ANR	1019577	AssignmentExpression	src1 = TMP_FREG1		1019543	0		=			
ANR	1019578	Identifier	src1		1019543	0					
ANR	1019579	Identifier	TMP_FREG1		1019543	1					
ANR	1019580	IfStatement	if ( src2 & SLJIT_MEM )		1019543	1					
ANR	1019581	Condition	src2 & SLJIT_MEM	2161:5:67492:67507	1019543	0	True				
ANR	1019582	BitAndExpression	src2 & SLJIT_MEM		1019543	0		&			
ANR	1019583	Identifier	src2		1019543	0					
ANR	1019584	Identifier	SLJIT_MEM		1019543	1					
ANR	1019585	CompoundStatement		7:23:167:167	1019543	1					
ANR	1019586	ExpressionStatement	"FAIL_IF ( emit_fop_mem ( compiler , ( op & SLJIT_SINGLE_OP ) | FPU_LOAD , TMP_FREG2 , src2 , src2w ) )"	2162:2:67514:67604	1019543	0	True				
ANR	1019587	CallExpression	"FAIL_IF ( emit_fop_mem ( compiler , ( op & SLJIT_SINGLE_OP ) | FPU_LOAD , TMP_FREG2 , src2 , src2w ) )"		1019543	0					
ANR	1019588	Callee	FAIL_IF		1019543	0					
ANR	1019589	Identifier	FAIL_IF		1019543	0					
ANR	1019590	ArgumentList	"emit_fop_mem ( compiler , ( op & SLJIT_SINGLE_OP ) | FPU_LOAD , TMP_FREG2 , src2 , src2w )"		1019543	1					
ANR	1019591	Argument	"emit_fop_mem ( compiler , ( op & SLJIT_SINGLE_OP ) | FPU_LOAD , TMP_FREG2 , src2 , src2w )"		1019543	0					
ANR	1019592	CallExpression	"emit_fop_mem ( compiler , ( op & SLJIT_SINGLE_OP ) | FPU_LOAD , TMP_FREG2 , src2 , src2w )"		1019543	0					
ANR	1019593	Callee	emit_fop_mem		1019543	0					
ANR	1019594	Identifier	emit_fop_mem		1019543	0					
ANR	1019595	ArgumentList	compiler		1019543	1					
ANR	1019596	Argument	compiler		1019543	0					
ANR	1019597	Identifier	compiler		1019543	0					
ANR	1019598	Argument	( op & SLJIT_SINGLE_OP ) | FPU_LOAD		1019543	1					
ANR	1019599	InclusiveOrExpression	( op & SLJIT_SINGLE_OP ) | FPU_LOAD		1019543	0		|			
ANR	1019600	BitAndExpression	op & SLJIT_SINGLE_OP		1019543	0		&			
ANR	1019601	Identifier	op		1019543	0					
ANR	1019602	Identifier	SLJIT_SINGLE_OP		1019543	1					
ANR	1019603	Identifier	FPU_LOAD		1019543	1					
ANR	1019604	Argument	TMP_FREG2		1019543	2					
ANR	1019605	Identifier	TMP_FREG2		1019543	0					
ANR	1019606	Argument	src2		1019543	3					
ANR	1019607	Identifier	src2		1019543	0					
ANR	1019608	Argument	src2w		1019543	4					
ANR	1019609	Identifier	src2w		1019543	0					
ANR	1019610	ExpressionStatement	src2 = TMP_FREG2	2163:2:67608:67624	1019543	1	True				
ANR	1019611	AssignmentExpression	src2 = TMP_FREG2		1019543	0		=			
ANR	1019612	Identifier	src2		1019543	0					
ANR	1019613	Identifier	TMP_FREG2		1019543	1					
ANR	1019614	ExpressionStatement	"FAIL_IF ( push_inst ( compiler , EMIT_FPU_OPERATION ( VCMP_F32 , op & SLJIT_SINGLE_OP , src1 , src2 , 0 ) ) )"	2166:1:67631:67726	1019543	2	True				
ANR	1019615	CallExpression	"FAIL_IF ( push_inst ( compiler , EMIT_FPU_OPERATION ( VCMP_F32 , op & SLJIT_SINGLE_OP , src1 , src2 , 0 ) ) )"		1019543	0					
ANR	1019616	Callee	FAIL_IF		1019543	0					
ANR	1019617	Identifier	FAIL_IF		1019543	0					
ANR	1019618	ArgumentList	"push_inst ( compiler , EMIT_FPU_OPERATION ( VCMP_F32 , op & SLJIT_SINGLE_OP , src1 , src2 , 0 ) )"		1019543	1					
ANR	1019619	Argument	"push_inst ( compiler , EMIT_FPU_OPERATION ( VCMP_F32 , op & SLJIT_SINGLE_OP , src1 , src2 , 0 ) )"		1019543	0					
ANR	1019620	CallExpression	"push_inst ( compiler , EMIT_FPU_OPERATION ( VCMP_F32 , op & SLJIT_SINGLE_OP , src1 , src2 , 0 ) )"		1019543	0					
ANR	1019621	Callee	push_inst		1019543	0					
ANR	1019622	Identifier	push_inst		1019543	0					
ANR	1019623	ArgumentList	compiler		1019543	1					
ANR	1019624	Argument	compiler		1019543	0					
ANR	1019625	Identifier	compiler		1019543	0					
ANR	1019626	Argument	"EMIT_FPU_OPERATION ( VCMP_F32 , op & SLJIT_SINGLE_OP , src1 , src2 , 0 )"		1019543	1					
ANR	1019627	CallExpression	"EMIT_FPU_OPERATION ( VCMP_F32 , op & SLJIT_SINGLE_OP , src1 , src2 , 0 )"		1019543	0					
ANR	1019628	Callee	EMIT_FPU_OPERATION		1019543	0					
ANR	1019629	Identifier	EMIT_FPU_OPERATION		1019543	0					
ANR	1019630	ArgumentList	VCMP_F32		1019543	1					
ANR	1019631	Argument	VCMP_F32		1019543	0					
ANR	1019632	Identifier	VCMP_F32		1019543	0					
ANR	1019633	Argument	op & SLJIT_SINGLE_OP		1019543	1					
ANR	1019634	BitAndExpression	op & SLJIT_SINGLE_OP		1019543	0		&			
ANR	1019635	Identifier	op		1019543	0					
ANR	1019636	Identifier	SLJIT_SINGLE_OP		1019543	1					
ANR	1019637	Argument	src1		1019543	2					
ANR	1019638	Identifier	src1		1019543	0					
ANR	1019639	Argument	src2		1019543	3					
ANR	1019640	Identifier	src2		1019543	0					
ANR	1019641	Argument	0		1019543	4					
ANR	1019642	PrimaryExpression	0		1019543	0					
ANR	1019643	ReturnStatement	"return push_inst ( compiler , VMRS ) ;"	2167:1:67729:67761	1019543	3	True				
ANR	1019644	CallExpression	"push_inst ( compiler , VMRS )"		1019543	0					
ANR	1019645	Callee	push_inst		1019543	0					
ANR	1019646	Identifier	push_inst		1019543	0					
ANR	1019647	ArgumentList	compiler		1019543	1					
ANR	1019648	Argument	compiler		1019543	0					
ANR	1019649	Identifier	compiler		1019543	0					
ANR	1019650	Argument	VMRS		1019543	1					
ANR	1019651	Identifier	VMRS		1019543	0					
ANR	1019652	ReturnType	static SLJIT_INLINE sljit_si		1019543	1					
ANR	1019653	Identifier	sljit_emit_fop1_cmp		1019543	2					
ANR	1019654	ParameterList	"struct sljit_compiler * compiler , sljit_si op , sljit_si src1 , sljit_sw src1w , sljit_si src2 , sljit_sw src2w"		1019543	3					
ANR	1019655	Parameter	struct sljit_compiler * compiler	2152:49:67232:67262	1019543	0	True				
ANR	1019656	ParameterType	struct sljit_compiler *		1019543	0					
ANR	1019657	Identifier	compiler		1019543	1					
ANR	1019658	Parameter	sljit_si op	2152:82:67265:67275	1019543	1	True				
ANR	1019659	ParameterType	sljit_si		1019543	0					
ANR	1019660	Identifier	op		1019543	1					
ANR	1019661	Parameter	sljit_si src1	2153:1:67279:67291	1019543	2	True				
ANR	1019662	ParameterType	sljit_si		1019543	0					
ANR	1019663	Identifier	src1		1019543	1					
ANR	1019664	Parameter	sljit_sw src1w	2153:16:67294:67307	1019543	3	True				
ANR	1019665	ParameterType	sljit_sw		1019543	0					
ANR	1019666	Identifier	src1w		1019543	1					
ANR	1019667	Parameter	sljit_si src2	2154:1:67311:67323	1019543	4	True				
ANR	1019668	ParameterType	sljit_si		1019543	0					
ANR	1019669	Identifier	src2		1019543	1					
ANR	1019670	Parameter	sljit_sw src2w	2154:16:67326:67339	1019543	5	True				
ANR	1019671	ParameterType	sljit_sw		1019543	0					
ANR	1019672	Identifier	src2w		1019543	1					
ANR	1019673	CFGEntryNode	ENTRY		1019543		True				
ANR	1019674	CFGExitNode	EXIT		1019543		True				
ANR	1019675	Symbol	src2w		1019543						
ANR	1019676	Symbol	op		1019543						
ANR	1019677	Symbol	push_inst		1019543						
ANR	1019678	Symbol	TMP_FREG2		1019543						
ANR	1019679	Symbol	src1w		1019543						
ANR	1019680	Symbol	TMP_FREG1		1019543						
ANR	1019681	Symbol	SLJIT_MEM		1019543						
ANR	1019682	Symbol	SLJIT_SINGLE_OP		1019543						
ANR	1019683	Symbol	VCMP_F32		1019543						
ANR	1019684	Symbol	EMIT_FPU_OPERATION		1019543						
ANR	1019685	Symbol	VMRS		1019543						
ANR	1019686	Symbol	emit_fop_mem		1019543						
ANR	1019687	Symbol	FPU_LOAD		1019543						
ANR	1019688	Symbol	src1		1019543						
ANR	1019689	Symbol	src2		1019543						
ANR	1019690	Symbol	compiler		1019543						
ANR	1019691	Function	sljit_emit_fop1	2170:0:67766:69177							
ANR	1019692	FunctionDef	"sljit_emit_fop1 (struct sljit_compiler * compiler , sljit_si op , sljit_si dst , sljit_sw dstw , sljit_si src , sljit_sw srcw)"		1019691	0					
ANR	1019693	CompoundStatement		2173:0:67922:69177	1019691	0					
ANR	1019694	IdentifierDeclStatement	sljit_si dst_r ;	2174:1:67925:67939	1019691	0	True				
ANR	1019695	IdentifierDecl	dst_r		1019691	0					
ANR	1019696	IdentifierDeclType	sljit_si		1019691	0					
ANR	1019697	Identifier	dst_r		1019691	1					
ANR	1019698	ExpressionStatement	CHECK_ERROR ( )	2176:1:67943:67956	1019691	1	True				
ANR	1019699	CallExpression	CHECK_ERROR ( )		1019691	0					
ANR	1019700	Callee	CHECK_ERROR		1019691	0					
ANR	1019701	Identifier	CHECK_ERROR		1019691	0					
ANR	1019702	ArgumentList			1019691	1					
ANR	1019703	ExpressionStatement	compiler -> cache_arg = 0	2177:1:67959:67982	1019691	2	True				
ANR	1019704	AssignmentExpression	compiler -> cache_arg = 0		1019691	0		=			
ANR	1019705	PtrMemberAccess	compiler -> cache_arg		1019691	0					
ANR	1019706	Identifier	compiler		1019691	0					
ANR	1019707	Identifier	cache_arg		1019691	1					
ANR	1019708	PrimaryExpression	0		1019691	1					
ANR	1019709	ExpressionStatement	compiler -> cache_argw = 0	2178:1:67985:68009	1019691	3	True				
ANR	1019710	AssignmentExpression	compiler -> cache_argw = 0		1019691	0		=			
ANR	1019711	PtrMemberAccess	compiler -> cache_argw		1019691	0					
ANR	1019712	Identifier	compiler		1019691	0					
ANR	1019713	Identifier	cache_argw		1019691	1					
ANR	1019714	PrimaryExpression	0		1019691	1					
ANR	1019715	IfStatement	if ( GET_OPCODE ( op ) != SLJIT_CONVD_FROMS )		1019691	4					
ANR	1019716	Condition	GET_OPCODE ( op ) != SLJIT_CONVD_FROMS	2179:5:68016:68050	1019691	0	True				
ANR	1019717	EqualityExpression	GET_OPCODE ( op ) != SLJIT_CONVD_FROMS		1019691	0		!=			
ANR	1019718	CallExpression	GET_OPCODE ( op )		1019691	0					
ANR	1019719	Callee	GET_OPCODE		1019691	0					
ANR	1019720	Identifier	GET_OPCODE		1019691	0					
ANR	1019721	ArgumentList	op		1019691	1					
ANR	1019722	Argument	op		1019691	0					
ANR	1019723	Identifier	op		1019691	0					
ANR	1019724	Identifier	SLJIT_CONVD_FROMS		1019691	1					
ANR	1019725	ExpressionStatement	op ^= SLJIT_SINGLE_OP	2180:2:68055:68076	1019691	1	True				
ANR	1019726	AssignmentExpression	op ^= SLJIT_SINGLE_OP		1019691	0		^=			
ANR	1019727	Identifier	op		1019691	0					
ANR	1019728	Identifier	SLJIT_SINGLE_OP		1019691	1					
ANR	1019729	ExpressionStatement	"SLJIT_COMPILE_ASSERT ( ( SLJIT_SINGLE_OP == 0x100 ) , float_transfer_bit_error )"	2182:1:68080:68154	1019691	5	True				
ANR	1019730	CallExpression	"SLJIT_COMPILE_ASSERT ( ( SLJIT_SINGLE_OP == 0x100 ) , float_transfer_bit_error )"		1019691	0					
ANR	1019731	Callee	SLJIT_COMPILE_ASSERT		1019691	0					
ANR	1019732	Identifier	SLJIT_COMPILE_ASSERT		1019691	0					
ANR	1019733	ArgumentList	SLJIT_SINGLE_OP == 0x100		1019691	1					
ANR	1019734	Argument	SLJIT_SINGLE_OP == 0x100		1019691	0					
ANR	1019735	EqualityExpression	SLJIT_SINGLE_OP == 0x100		1019691	0		==			
ANR	1019736	Identifier	SLJIT_SINGLE_OP		1019691	0					
ANR	1019737	PrimaryExpression	0x100		1019691	1					
ANR	1019738	Argument	float_transfer_bit_error		1019691	1					
ANR	1019739	Identifier	float_transfer_bit_error		1019691	0					
ANR	1019740	ExpressionStatement	"SELECT_FOP1_OPERATION_WITH_CHECKS ( compiler , op , dst , dstw , src , srcw )"	2183:1:68157:68226	1019691	6	True				
ANR	1019741	CallExpression	"SELECT_FOP1_OPERATION_WITH_CHECKS ( compiler , op , dst , dstw , src , srcw )"		1019691	0					
ANR	1019742	Callee	SELECT_FOP1_OPERATION_WITH_CHECKS		1019691	0					
ANR	1019743	Identifier	SELECT_FOP1_OPERATION_WITH_CHECKS		1019691	0					
ANR	1019744	ArgumentList	compiler		1019691	1					
ANR	1019745	Argument	compiler		1019691	0					
ANR	1019746	Identifier	compiler		1019691	0					
ANR	1019747	Argument	op		1019691	1					
ANR	1019748	Identifier	op		1019691	0					
ANR	1019749	Argument	dst		1019691	2					
ANR	1019750	Identifier	dst		1019691	0					
ANR	1019751	Argument	dstw		1019691	3					
ANR	1019752	Identifier	dstw		1019691	0					
ANR	1019753	Argument	src		1019691	4					
ANR	1019754	Identifier	src		1019691	0					
ANR	1019755	Argument	srcw		1019691	5					
ANR	1019756	Identifier	srcw		1019691	0					
ANR	1019757	ExpressionStatement	dst_r = FAST_IS_REG ( dst ) ? dst : TMP_FREG1	2185:1:68230:68272	1019691	7	True				
ANR	1019758	AssignmentExpression	dst_r = FAST_IS_REG ( dst ) ? dst : TMP_FREG1		1019691	0		=			
ANR	1019759	Identifier	dst_r		1019691	0					
ANR	1019760	ConditionalExpression	FAST_IS_REG ( dst ) ? dst : TMP_FREG1		1019691	1					
ANR	1019761	Condition	FAST_IS_REG ( dst )		1019691	0					
ANR	1019762	CallExpression	FAST_IS_REG ( dst )		1019691	0					
ANR	1019763	Callee	FAST_IS_REG		1019691	0					
ANR	1019764	Identifier	FAST_IS_REG		1019691	0					
ANR	1019765	ArgumentList	dst		1019691	1					
ANR	1019766	Argument	dst		1019691	0					
ANR	1019767	Identifier	dst		1019691	0					
ANR	1019768	Identifier	dst		1019691	1					
ANR	1019769	Identifier	TMP_FREG1		1019691	2					
ANR	1019770	IfStatement	if ( src & SLJIT_MEM )		1019691	8					
ANR	1019771	Condition	src & SLJIT_MEM	2187:5:68280:68294	1019691	0	True				
ANR	1019772	BitAndExpression	src & SLJIT_MEM		1019691	0		&			
ANR	1019773	Identifier	src		1019691	0					
ANR	1019774	Identifier	SLJIT_MEM		1019691	1					
ANR	1019775	CompoundStatement		15:22:374:374	1019691	1					
ANR	1019776	ExpressionStatement	"FAIL_IF ( emit_fop_mem ( compiler , ( op & SLJIT_SINGLE_OP ) | FPU_LOAD , dst_r , src , srcw ) )"	2188:2:68301:68385	1019691	0	True				
ANR	1019777	CallExpression	"FAIL_IF ( emit_fop_mem ( compiler , ( op & SLJIT_SINGLE_OP ) | FPU_LOAD , dst_r , src , srcw ) )"		1019691	0					
ANR	1019778	Callee	FAIL_IF		1019691	0					
ANR	1019779	Identifier	FAIL_IF		1019691	0					
ANR	1019780	ArgumentList	"emit_fop_mem ( compiler , ( op & SLJIT_SINGLE_OP ) | FPU_LOAD , dst_r , src , srcw )"		1019691	1					
ANR	1019781	Argument	"emit_fop_mem ( compiler , ( op & SLJIT_SINGLE_OP ) | FPU_LOAD , dst_r , src , srcw )"		1019691	0					
ANR	1019782	CallExpression	"emit_fop_mem ( compiler , ( op & SLJIT_SINGLE_OP ) | FPU_LOAD , dst_r , src , srcw )"		1019691	0					
ANR	1019783	Callee	emit_fop_mem		1019691	0					
ANR	1019784	Identifier	emit_fop_mem		1019691	0					
ANR	1019785	ArgumentList	compiler		1019691	1					
ANR	1019786	Argument	compiler		1019691	0					
ANR	1019787	Identifier	compiler		1019691	0					
ANR	1019788	Argument	( op & SLJIT_SINGLE_OP ) | FPU_LOAD		1019691	1					
ANR	1019789	InclusiveOrExpression	( op & SLJIT_SINGLE_OP ) | FPU_LOAD		1019691	0		|			
ANR	1019790	BitAndExpression	op & SLJIT_SINGLE_OP		1019691	0		&			
ANR	1019791	Identifier	op		1019691	0					
ANR	1019792	Identifier	SLJIT_SINGLE_OP		1019691	1					
ANR	1019793	Identifier	FPU_LOAD		1019691	1					
ANR	1019794	Argument	dst_r		1019691	2					
ANR	1019795	Identifier	dst_r		1019691	0					
ANR	1019796	Argument	src		1019691	3					
ANR	1019797	Identifier	src		1019691	0					
ANR	1019798	Argument	srcw		1019691	4					
ANR	1019799	Identifier	srcw		1019691	0					
ANR	1019800	ExpressionStatement	src = dst_r	2189:2:68389:68400	1019691	1	True				
ANR	1019801	AssignmentExpression	src = dst_r		1019691	0		=			
ANR	1019802	Identifier	src		1019691	0					
ANR	1019803	Identifier	dst_r		1019691	1					
ANR	1019804	SwitchStatement	switch ( GET_OPCODE ( op ) )		1019691	9					
ANR	1019805	Condition	GET_OPCODE ( op )	2192:9:68415:68428	1019691	0	True				
ANR	1019806	CallExpression	GET_OPCODE ( op )		1019691	0					
ANR	1019807	Callee	GET_OPCODE		1019691	0					
ANR	1019808	Identifier	GET_OPCODE		1019691	0					
ANR	1019809	ArgumentList	op		1019691	1					
ANR	1019810	Argument	op		1019691	0					
ANR	1019811	Identifier	op		1019691	0					
ANR	1019812	CompoundStatement		20:25:508:508	1019691	1					
ANR	1019813	Label	case SLJIT_DMOV :	2193:1:68434:68449	1019691	0	True				
ANR	1019814	Identifier	SLJIT_DMOV		1019691	0					
ANR	1019815	IfStatement	if ( src != dst_r )		1019691	1					
ANR	1019816	Condition	src != dst_r	2194:6:68457:68468	1019691	0	True				
ANR	1019817	EqualityExpression	src != dst_r		1019691	0		!=			
ANR	1019818	Identifier	src		1019691	0					
ANR	1019819	Identifier	dst_r		1019691	1					
ANR	1019820	CompoundStatement		22:20:548:548	1019691	1					
ANR	1019821	IfStatement	if ( dst_r != TMP_FREG1 )		1019691	0					
ANR	1019822	Condition	dst_r != TMP_FREG1	2195:7:68480:68497	1019691	0	True				
ANR	1019823	EqualityExpression	dst_r != TMP_FREG1		1019691	0		!=			
ANR	1019824	Identifier	dst_r		1019691	0					
ANR	1019825	Identifier	TMP_FREG1		1019691	1					
ANR	1019826	ExpressionStatement	"FAIL_IF ( push_inst ( compiler , EMIT_FPU_OPERATION ( VMOV_F32 , op & SLJIT_SINGLE_OP , dst_r , src , 0 ) ) )"	2196:4:68504:68599	1019691	1	True				
ANR	1019827	CallExpression	"FAIL_IF ( push_inst ( compiler , EMIT_FPU_OPERATION ( VMOV_F32 , op & SLJIT_SINGLE_OP , dst_r , src , 0 ) ) )"		1019691	0					
ANR	1019828	Callee	FAIL_IF		1019691	0					
ANR	1019829	Identifier	FAIL_IF		1019691	0					
ANR	1019830	ArgumentList	"push_inst ( compiler , EMIT_FPU_OPERATION ( VMOV_F32 , op & SLJIT_SINGLE_OP , dst_r , src , 0 ) )"		1019691	1					
ANR	1019831	Argument	"push_inst ( compiler , EMIT_FPU_OPERATION ( VMOV_F32 , op & SLJIT_SINGLE_OP , dst_r , src , 0 ) )"		1019691	0					
ANR	1019832	CallExpression	"push_inst ( compiler , EMIT_FPU_OPERATION ( VMOV_F32 , op & SLJIT_SINGLE_OP , dst_r , src , 0 ) )"		1019691	0					
ANR	1019833	Callee	push_inst		1019691	0					
ANR	1019834	Identifier	push_inst		1019691	0					
ANR	1019835	ArgumentList	compiler		1019691	1					
ANR	1019836	Argument	compiler		1019691	0					
ANR	1019837	Identifier	compiler		1019691	0					
ANR	1019838	Argument	"EMIT_FPU_OPERATION ( VMOV_F32 , op & SLJIT_SINGLE_OP , dst_r , src , 0 )"		1019691	1					
ANR	1019839	CallExpression	"EMIT_FPU_OPERATION ( VMOV_F32 , op & SLJIT_SINGLE_OP , dst_r , src , 0 )"		1019691	0					
ANR	1019840	Callee	EMIT_FPU_OPERATION		1019691	0					
ANR	1019841	Identifier	EMIT_FPU_OPERATION		1019691	0					
ANR	1019842	ArgumentList	VMOV_F32		1019691	1					
ANR	1019843	Argument	VMOV_F32		1019691	0					
ANR	1019844	Identifier	VMOV_F32		1019691	0					
ANR	1019845	Argument	op & SLJIT_SINGLE_OP		1019691	1					
ANR	1019846	BitAndExpression	op & SLJIT_SINGLE_OP		1019691	0		&			
ANR	1019847	Identifier	op		1019691	0					
ANR	1019848	Identifier	SLJIT_SINGLE_OP		1019691	1					
ANR	1019849	Argument	dst_r		1019691	2					
ANR	1019850	Identifier	dst_r		1019691	0					
ANR	1019851	Argument	src		1019691	3					
ANR	1019852	Identifier	src		1019691	0					
ANR	1019853	Argument	0		1019691	4					
ANR	1019854	PrimaryExpression	0		1019691	0					
ANR	1019855	ElseStatement	else		1019691	0					
ANR	1019856	ExpressionStatement	dst_r = src	2198:4:68613:68624	1019691	0	True				
ANR	1019857	AssignmentExpression	dst_r = src		1019691	0		=			
ANR	1019858	Identifier	dst_r		1019691	0					
ANR	1019859	Identifier	src		1019691	1					
ANR	1019860	BreakStatement	break ;	2200:2:68632:68637	1019691	2	True				
ANR	1019861	Label	case SLJIT_DNEG :	2201:1:68640:68655	1019691	3	True				
ANR	1019862	Identifier	SLJIT_DNEG		1019691	0					
ANR	1019863	ExpressionStatement	"FAIL_IF ( push_inst ( compiler , EMIT_FPU_OPERATION ( VNEG_F32 , op & SLJIT_SINGLE_OP , dst_r , src , 0 ) ) )"	2202:2:68659:68754	1019691	4	True				
ANR	1019864	CallExpression	"FAIL_IF ( push_inst ( compiler , EMIT_FPU_OPERATION ( VNEG_F32 , op & SLJIT_SINGLE_OP , dst_r , src , 0 ) ) )"		1019691	0					
ANR	1019865	Callee	FAIL_IF		1019691	0					
ANR	1019866	Identifier	FAIL_IF		1019691	0					
ANR	1019867	ArgumentList	"push_inst ( compiler , EMIT_FPU_OPERATION ( VNEG_F32 , op & SLJIT_SINGLE_OP , dst_r , src , 0 ) )"		1019691	1					
ANR	1019868	Argument	"push_inst ( compiler , EMIT_FPU_OPERATION ( VNEG_F32 , op & SLJIT_SINGLE_OP , dst_r , src , 0 ) )"		1019691	0					
ANR	1019869	CallExpression	"push_inst ( compiler , EMIT_FPU_OPERATION ( VNEG_F32 , op & SLJIT_SINGLE_OP , dst_r , src , 0 ) )"		1019691	0					
ANR	1019870	Callee	push_inst		1019691	0					
ANR	1019871	Identifier	push_inst		1019691	0					
ANR	1019872	ArgumentList	compiler		1019691	1					
ANR	1019873	Argument	compiler		1019691	0					
ANR	1019874	Identifier	compiler		1019691	0					
ANR	1019875	Argument	"EMIT_FPU_OPERATION ( VNEG_F32 , op & SLJIT_SINGLE_OP , dst_r , src , 0 )"		1019691	1					
ANR	1019876	CallExpression	"EMIT_FPU_OPERATION ( VNEG_F32 , op & SLJIT_SINGLE_OP , dst_r , src , 0 )"		1019691	0					
ANR	1019877	Callee	EMIT_FPU_OPERATION		1019691	0					
ANR	1019878	Identifier	EMIT_FPU_OPERATION		1019691	0					
ANR	1019879	ArgumentList	VNEG_F32		1019691	1					
ANR	1019880	Argument	VNEG_F32		1019691	0					
ANR	1019881	Identifier	VNEG_F32		1019691	0					
ANR	1019882	Argument	op & SLJIT_SINGLE_OP		1019691	1					
ANR	1019883	BitAndExpression	op & SLJIT_SINGLE_OP		1019691	0		&			
ANR	1019884	Identifier	op		1019691	0					
ANR	1019885	Identifier	SLJIT_SINGLE_OP		1019691	1					
ANR	1019886	Argument	dst_r		1019691	2					
ANR	1019887	Identifier	dst_r		1019691	0					
ANR	1019888	Argument	src		1019691	3					
ANR	1019889	Identifier	src		1019691	0					
ANR	1019890	Argument	0		1019691	4					
ANR	1019891	PrimaryExpression	0		1019691	0					
ANR	1019892	BreakStatement	break ;	2203:2:68758:68763	1019691	5	True				
ANR	1019893	Label	case SLJIT_DABS :	2204:1:68766:68781	1019691	6	True				
ANR	1019894	Identifier	SLJIT_DABS		1019691	0					
ANR	1019895	ExpressionStatement	"FAIL_IF ( push_inst ( compiler , EMIT_FPU_OPERATION ( VABS_F32 , op & SLJIT_SINGLE_OP , dst_r , src , 0 ) ) )"	2205:2:68785:68880	1019691	7	True				
ANR	1019896	CallExpression	"FAIL_IF ( push_inst ( compiler , EMIT_FPU_OPERATION ( VABS_F32 , op & SLJIT_SINGLE_OP , dst_r , src , 0 ) ) )"		1019691	0					
ANR	1019897	Callee	FAIL_IF		1019691	0					
ANR	1019898	Identifier	FAIL_IF		1019691	0					
ANR	1019899	ArgumentList	"push_inst ( compiler , EMIT_FPU_OPERATION ( VABS_F32 , op & SLJIT_SINGLE_OP , dst_r , src , 0 ) )"		1019691	1					
ANR	1019900	Argument	"push_inst ( compiler , EMIT_FPU_OPERATION ( VABS_F32 , op & SLJIT_SINGLE_OP , dst_r , src , 0 ) )"		1019691	0					
ANR	1019901	CallExpression	"push_inst ( compiler , EMIT_FPU_OPERATION ( VABS_F32 , op & SLJIT_SINGLE_OP , dst_r , src , 0 ) )"		1019691	0					
ANR	1019902	Callee	push_inst		1019691	0					
ANR	1019903	Identifier	push_inst		1019691	0					
ANR	1019904	ArgumentList	compiler		1019691	1					
ANR	1019905	Argument	compiler		1019691	0					
ANR	1019906	Identifier	compiler		1019691	0					
ANR	1019907	Argument	"EMIT_FPU_OPERATION ( VABS_F32 , op & SLJIT_SINGLE_OP , dst_r , src , 0 )"		1019691	1					
ANR	1019908	CallExpression	"EMIT_FPU_OPERATION ( VABS_F32 , op & SLJIT_SINGLE_OP , dst_r , src , 0 )"		1019691	0					
ANR	1019909	Callee	EMIT_FPU_OPERATION		1019691	0					
ANR	1019910	Identifier	EMIT_FPU_OPERATION		1019691	0					
ANR	1019911	ArgumentList	VABS_F32		1019691	1					
ANR	1019912	Argument	VABS_F32		1019691	0					
ANR	1019913	Identifier	VABS_F32		1019691	0					
ANR	1019914	Argument	op & SLJIT_SINGLE_OP		1019691	1					
ANR	1019915	BitAndExpression	op & SLJIT_SINGLE_OP		1019691	0		&			
ANR	1019916	Identifier	op		1019691	0					
ANR	1019917	Identifier	SLJIT_SINGLE_OP		1019691	1					
ANR	1019918	Argument	dst_r		1019691	2					
ANR	1019919	Identifier	dst_r		1019691	0					
ANR	1019920	Argument	src		1019691	3					
ANR	1019921	Identifier	src		1019691	0					
ANR	1019922	Argument	0		1019691	4					
ANR	1019923	PrimaryExpression	0		1019691	0					
ANR	1019924	BreakStatement	break ;	2206:2:68884:68889	1019691	8	True				
ANR	1019925	Label	case SLJIT_CONVD_FROMS :	2207:1:68892:68914	1019691	9	True				
ANR	1019926	Identifier	SLJIT_CONVD_FROMS		1019691	0					
ANR	1019927	ExpressionStatement	"FAIL_IF ( push_inst ( compiler , EMIT_FPU_OPERATION ( VCVT_F64_F32 , op & SLJIT_SINGLE_OP , dst_r , src , 0 ) ) )"	2208:2:68918:69017	1019691	10	True				
ANR	1019928	CallExpression	"FAIL_IF ( push_inst ( compiler , EMIT_FPU_OPERATION ( VCVT_F64_F32 , op & SLJIT_SINGLE_OP , dst_r , src , 0 ) ) )"		1019691	0					
ANR	1019929	Callee	FAIL_IF		1019691	0					
ANR	1019930	Identifier	FAIL_IF		1019691	0					
ANR	1019931	ArgumentList	"push_inst ( compiler , EMIT_FPU_OPERATION ( VCVT_F64_F32 , op & SLJIT_SINGLE_OP , dst_r , src , 0 ) )"		1019691	1					
ANR	1019932	Argument	"push_inst ( compiler , EMIT_FPU_OPERATION ( VCVT_F64_F32 , op & SLJIT_SINGLE_OP , dst_r , src , 0 ) )"		1019691	0					
ANR	1019933	CallExpression	"push_inst ( compiler , EMIT_FPU_OPERATION ( VCVT_F64_F32 , op & SLJIT_SINGLE_OP , dst_r , src , 0 ) )"		1019691	0					
ANR	1019934	Callee	push_inst		1019691	0					
ANR	1019935	Identifier	push_inst		1019691	0					
ANR	1019936	ArgumentList	compiler		1019691	1					
ANR	1019937	Argument	compiler		1019691	0					
ANR	1019938	Identifier	compiler		1019691	0					
ANR	1019939	Argument	"EMIT_FPU_OPERATION ( VCVT_F64_F32 , op & SLJIT_SINGLE_OP , dst_r , src , 0 )"		1019691	1					
ANR	1019940	CallExpression	"EMIT_FPU_OPERATION ( VCVT_F64_F32 , op & SLJIT_SINGLE_OP , dst_r , src , 0 )"		1019691	0					
ANR	1019941	Callee	EMIT_FPU_OPERATION		1019691	0					
ANR	1019942	Identifier	EMIT_FPU_OPERATION		1019691	0					
ANR	1019943	ArgumentList	VCVT_F64_F32		1019691	1					
ANR	1019944	Argument	VCVT_F64_F32		1019691	0					
ANR	1019945	Identifier	VCVT_F64_F32		1019691	0					
ANR	1019946	Argument	op & SLJIT_SINGLE_OP		1019691	1					
ANR	1019947	BitAndExpression	op & SLJIT_SINGLE_OP		1019691	0		&			
ANR	1019948	Identifier	op		1019691	0					
ANR	1019949	Identifier	SLJIT_SINGLE_OP		1019691	1					
ANR	1019950	Argument	dst_r		1019691	2					
ANR	1019951	Identifier	dst_r		1019691	0					
ANR	1019952	Argument	src		1019691	3					
ANR	1019953	Identifier	src		1019691	0					
ANR	1019954	Argument	0		1019691	4					
ANR	1019955	PrimaryExpression	0		1019691	0					
ANR	1019956	ExpressionStatement	op ^= SLJIT_SINGLE_OP	2209:2:69021:69042	1019691	11	True				
ANR	1019957	AssignmentExpression	op ^= SLJIT_SINGLE_OP		1019691	0		^=			
ANR	1019958	Identifier	op		1019691	0					
ANR	1019959	Identifier	SLJIT_SINGLE_OP		1019691	1					
ANR	1019960	BreakStatement	break ;	2210:2:69046:69051	1019691	12	True				
ANR	1019961	IfStatement	if ( dst & SLJIT_MEM )		1019691	10					
ANR	1019962	Condition	dst & SLJIT_MEM	2213:5:69062:69076	1019691	0	True				
ANR	1019963	BitAndExpression	dst & SLJIT_MEM		1019691	0		&			
ANR	1019964	Identifier	dst		1019691	0					
ANR	1019965	Identifier	SLJIT_MEM		1019691	1					
ANR	1019966	ReturnStatement	"return emit_fop_mem ( compiler , ( op & SLJIT_SINGLE_OP ) , dst_r , dst , dstw ) ;"	2214:2:69081:69152	1019691	1	True				
ANR	1019967	CallExpression	"emit_fop_mem ( compiler , ( op & SLJIT_SINGLE_OP ) , dst_r , dst , dstw )"		1019691	0					
ANR	1019968	Callee	emit_fop_mem		1019691	0					
ANR	1019969	Identifier	emit_fop_mem		1019691	0					
ANR	1019970	ArgumentList	compiler		1019691	1					
ANR	1019971	Argument	compiler		1019691	0					
ANR	1019972	Identifier	compiler		1019691	0					
ANR	1019973	Argument	op & SLJIT_SINGLE_OP		1019691	1					
ANR	1019974	BitAndExpression	op & SLJIT_SINGLE_OP		1019691	0		&			
ANR	1019975	Identifier	op		1019691	0					
ANR	1019976	Identifier	SLJIT_SINGLE_OP		1019691	1					
ANR	1019977	Argument	dst_r		1019691	2					
ANR	1019978	Identifier	dst_r		1019691	0					
ANR	1019979	Argument	dst		1019691	3					
ANR	1019980	Identifier	dst		1019691	0					
ANR	1019981	Argument	dstw		1019691	4					
ANR	1019982	Identifier	dstw		1019691	0					
ANR	1019983	ReturnStatement	return SLJIT_SUCCESS ;	2215:1:69155:69175	1019691	11	True				
ANR	1019984	Identifier	SLJIT_SUCCESS		1019691	0					
ANR	1019985	ReturnType	SLJIT_API_FUNC_ATTRIBUTE sljit_si		1019691	1					
ANR	1019986	Identifier	sljit_emit_fop1		1019691	2					
ANR	1019987	ParameterList	"struct sljit_compiler * compiler , sljit_si op , sljit_si dst , sljit_sw dstw , sljit_si src , sljit_sw srcw"		1019691	3					
ANR	1019988	Parameter	struct sljit_compiler * compiler	2170:50:67816:67846	1019691	0	True				
ANR	1019989	ParameterType	struct sljit_compiler *		1019691	0					
ANR	1019990	Identifier	compiler		1019691	1					
ANR	1019991	Parameter	sljit_si op	2170:83:67849:67859	1019691	1	True				
ANR	1019992	ParameterType	sljit_si		1019691	0					
ANR	1019993	Identifier	op		1019691	1					
ANR	1019994	Parameter	sljit_si dst	2171:1:67863:67874	1019691	2	True				
ANR	1019995	ParameterType	sljit_si		1019691	0					
ANR	1019996	Identifier	dst		1019691	1					
ANR	1019997	Parameter	sljit_sw dstw	2171:15:67877:67889	1019691	3	True				
ANR	1019998	ParameterType	sljit_sw		1019691	0					
ANR	1019999	Identifier	dstw		1019691	1					
ANR	1020000	Parameter	sljit_si src	2172:1:67893:67904	1019691	4	True				
ANR	1020001	ParameterType	sljit_si		1019691	0					
ANR	1020002	Identifier	src		1019691	1					
ANR	1020003	Parameter	sljit_sw srcw	2172:15:67907:67919	1019691	5	True				
ANR	1020004	ParameterType	sljit_sw		1019691	0					
ANR	1020005	Identifier	srcw		1019691	1					
ANR	1020006	CFGEntryNode	ENTRY		1019691		True				
ANR	1020007	CFGExitNode	EXIT		1019691		True				
ANR	1020008	Symbol	compiler -> cache_argw		1019691						
ANR	1020009	Symbol	dst		1019691						
ANR	1020010	Symbol	TMP_FREG1		1019691						
ANR	1020011	Symbol	SLJIT_MEM		1019691						
ANR	1020012	Symbol	SLJIT_CONVD_FROMS		1019691						
ANR	1020013	Symbol	* compiler		1019691						
ANR	1020014	Symbol	VCVT_F64_F32		1019691						
ANR	1020015	Symbol	dst_r		1019691						
ANR	1020016	Symbol	GET_OPCODE		1019691						
ANR	1020017	Symbol	emit_fop_mem		1019691						
ANR	1020018	Symbol	VABS_F32		1019691						
ANR	1020019	Symbol	float_transfer_bit_error		1019691						
ANR	1020020	Symbol	compiler		1019691						
ANR	1020021	Symbol	VNEG_F32		1019691						
ANR	1020022	Symbol	VMOV_F32		1019691						
ANR	1020023	Symbol	op		1019691						
ANR	1020024	Symbol	push_inst		1019691						
ANR	1020025	Symbol	FAST_IS_REG		1019691						
ANR	1020026	Symbol	src		1019691						
ANR	1020027	Symbol	srcw		1019691						
ANR	1020028	Symbol	compiler -> cache_arg		1019691						
ANR	1020029	Symbol	SLJIT_SINGLE_OP		1019691						
ANR	1020030	Symbol	SLJIT_SUCCESS		1019691						
ANR	1020031	Symbol	EMIT_FPU_OPERATION		1019691						
ANR	1020032	Symbol	FPU_LOAD		1019691						
ANR	1020033	Symbol	dstw		1019691						
ANR	1020034	Function	sljit_emit_fop2	2218:0:69180:70686							
ANR	1020035	FunctionDef	"sljit_emit_fop2 (struct sljit_compiler * compiler , sljit_si op , sljit_si dst , sljit_sw dstw , sljit_si src1 , sljit_sw src1w , sljit_si src2 , sljit_sw src2w)"		1020034	0					
ANR	1020036	CompoundStatement		2222:0:69370:70686	1020034	0					
ANR	1020037	IdentifierDeclStatement	sljit_si dst_r ;	2223:1:69373:69387	1020034	0	True				
ANR	1020038	IdentifierDecl	dst_r		1020034	0					
ANR	1020039	IdentifierDeclType	sljit_si		1020034	0					
ANR	1020040	Identifier	dst_r		1020034	1					
ANR	1020041	ExpressionStatement	CHECK_ERROR ( )	2225:1:69391:69404	1020034	1	True				
ANR	1020042	CallExpression	CHECK_ERROR ( )		1020034	0					
ANR	1020043	Callee	CHECK_ERROR		1020034	0					
ANR	1020044	Identifier	CHECK_ERROR		1020034	0					
ANR	1020045	ArgumentList			1020034	1					
ANR	1020046	ExpressionStatement	"CHECK ( check_sljit_emit_fop2 ( compiler , op , dst , dstw , src1 , src1w , src2 , src2w ) )"	2226:1:69407:69486	1020034	2	True				
ANR	1020047	CallExpression	"CHECK ( check_sljit_emit_fop2 ( compiler , op , dst , dstw , src1 , src1w , src2 , src2w ) )"		1020034	0					
ANR	1020048	Callee	CHECK		1020034	0					
ANR	1020049	Identifier	CHECK		1020034	0					
ANR	1020050	ArgumentList	"check_sljit_emit_fop2 ( compiler , op , dst , dstw , src1 , src1w , src2 , src2w )"		1020034	1					
ANR	1020051	Argument	"check_sljit_emit_fop2 ( compiler , op , dst , dstw , src1 , src1w , src2 , src2w )"		1020034	0					
ANR	1020052	CallExpression	"check_sljit_emit_fop2 ( compiler , op , dst , dstw , src1 , src1w , src2 , src2w )"		1020034	0					
ANR	1020053	Callee	check_sljit_emit_fop2		1020034	0					
ANR	1020054	Identifier	check_sljit_emit_fop2		1020034	0					
ANR	1020055	ArgumentList	compiler		1020034	1					
ANR	1020056	Argument	compiler		1020034	0					
ANR	1020057	Identifier	compiler		1020034	0					
ANR	1020058	Argument	op		1020034	1					
ANR	1020059	Identifier	op		1020034	0					
ANR	1020060	Argument	dst		1020034	2					
ANR	1020061	Identifier	dst		1020034	0					
ANR	1020062	Argument	dstw		1020034	3					
ANR	1020063	Identifier	dstw		1020034	0					
ANR	1020064	Argument	src1		1020034	4					
ANR	1020065	Identifier	src1		1020034	0					
ANR	1020066	Argument	src1w		1020034	5					
ANR	1020067	Identifier	src1w		1020034	0					
ANR	1020068	Argument	src2		1020034	6					
ANR	1020069	Identifier	src2		1020034	0					
ANR	1020070	Argument	src2w		1020034	7					
ANR	1020071	Identifier	src2w		1020034	0					
ANR	1020072	ExpressionStatement	"ADJUST_LOCAL_OFFSET ( dst , dstw )"	2227:1:69489:69519	1020034	3	True				
ANR	1020073	CallExpression	"ADJUST_LOCAL_OFFSET ( dst , dstw )"		1020034	0					
ANR	1020074	Callee	ADJUST_LOCAL_OFFSET		1020034	0					
ANR	1020075	Identifier	ADJUST_LOCAL_OFFSET		1020034	0					
ANR	1020076	ArgumentList	dst		1020034	1					
ANR	1020077	Argument	dst		1020034	0					
ANR	1020078	Identifier	dst		1020034	0					
ANR	1020079	Argument	dstw		1020034	1					
ANR	1020080	Identifier	dstw		1020034	0					
ANR	1020081	ExpressionStatement	"ADJUST_LOCAL_OFFSET ( src1 , src1w )"	2228:1:69522:69554	1020034	4	True				
ANR	1020082	CallExpression	"ADJUST_LOCAL_OFFSET ( src1 , src1w )"		1020034	0					
ANR	1020083	Callee	ADJUST_LOCAL_OFFSET		1020034	0					
ANR	1020084	Identifier	ADJUST_LOCAL_OFFSET		1020034	0					
ANR	1020085	ArgumentList	src1		1020034	1					
ANR	1020086	Argument	src1		1020034	0					
ANR	1020087	Identifier	src1		1020034	0					
ANR	1020088	Argument	src1w		1020034	1					
ANR	1020089	Identifier	src1w		1020034	0					
ANR	1020090	ExpressionStatement	"ADJUST_LOCAL_OFFSET ( src2 , src2w )"	2229:1:69557:69589	1020034	5	True				
ANR	1020091	CallExpression	"ADJUST_LOCAL_OFFSET ( src2 , src2w )"		1020034	0					
ANR	1020092	Callee	ADJUST_LOCAL_OFFSET		1020034	0					
ANR	1020093	Identifier	ADJUST_LOCAL_OFFSET		1020034	0					
ANR	1020094	ArgumentList	src2		1020034	1					
ANR	1020095	Argument	src2		1020034	0					
ANR	1020096	Identifier	src2		1020034	0					
ANR	1020097	Argument	src2w		1020034	1					
ANR	1020098	Identifier	src2w		1020034	0					
ANR	1020099	ExpressionStatement	compiler -> cache_arg = 0	2231:1:69593:69616	1020034	6	True				
ANR	1020100	AssignmentExpression	compiler -> cache_arg = 0		1020034	0		=			
ANR	1020101	PtrMemberAccess	compiler -> cache_arg		1020034	0					
ANR	1020102	Identifier	compiler		1020034	0					
ANR	1020103	Identifier	cache_arg		1020034	1					
ANR	1020104	PrimaryExpression	0		1020034	1					
ANR	1020105	ExpressionStatement	compiler -> cache_argw = 0	2232:1:69619:69643	1020034	7	True				
ANR	1020106	AssignmentExpression	compiler -> cache_argw = 0		1020034	0		=			
ANR	1020107	PtrMemberAccess	compiler -> cache_argw		1020034	0					
ANR	1020108	Identifier	compiler		1020034	0					
ANR	1020109	Identifier	cache_argw		1020034	1					
ANR	1020110	PrimaryExpression	0		1020034	1					
ANR	1020111	ExpressionStatement	op ^= SLJIT_SINGLE_OP	2233:1:69646:69667	1020034	8	True				
ANR	1020112	AssignmentExpression	op ^= SLJIT_SINGLE_OP		1020034	0		^=			
ANR	1020113	Identifier	op		1020034	0					
ANR	1020114	Identifier	SLJIT_SINGLE_OP		1020034	1					
ANR	1020115	ExpressionStatement	dst_r = FAST_IS_REG ( dst ) ? dst : TMP_FREG1	2235:1:69671:69713	1020034	9	True				
ANR	1020116	AssignmentExpression	dst_r = FAST_IS_REG ( dst ) ? dst : TMP_FREG1		1020034	0		=			
ANR	1020117	Identifier	dst_r		1020034	0					
ANR	1020118	ConditionalExpression	FAST_IS_REG ( dst ) ? dst : TMP_FREG1		1020034	1					
ANR	1020119	Condition	FAST_IS_REG ( dst )		1020034	0					
ANR	1020120	CallExpression	FAST_IS_REG ( dst )		1020034	0					
ANR	1020121	Callee	FAST_IS_REG		1020034	0					
ANR	1020122	Identifier	FAST_IS_REG		1020034	0					
ANR	1020123	ArgumentList	dst		1020034	1					
ANR	1020124	Argument	dst		1020034	0					
ANR	1020125	Identifier	dst		1020034	0					
ANR	1020126	Identifier	dst		1020034	1					
ANR	1020127	Identifier	TMP_FREG1		1020034	2					
ANR	1020128	IfStatement	if ( src2 & SLJIT_MEM )		1020034	10					
ANR	1020129	Condition	src2 & SLJIT_MEM	2237:5:69721:69736	1020034	0	True				
ANR	1020130	BitAndExpression	src2 & SLJIT_MEM		1020034	0		&			
ANR	1020131	Identifier	src2		1020034	0					
ANR	1020132	Identifier	SLJIT_MEM		1020034	1					
ANR	1020133	CompoundStatement		16:23:368:368	1020034	1					
ANR	1020134	ExpressionStatement	"FAIL_IF ( emit_fop_mem ( compiler , ( op & SLJIT_SINGLE_OP ) | FPU_LOAD , TMP_FREG2 , src2 , src2w ) )"	2238:2:69743:69833	1020034	0	True				
ANR	1020135	CallExpression	"FAIL_IF ( emit_fop_mem ( compiler , ( op & SLJIT_SINGLE_OP ) | FPU_LOAD , TMP_FREG2 , src2 , src2w ) )"		1020034	0					
ANR	1020136	Callee	FAIL_IF		1020034	0					
ANR	1020137	Identifier	FAIL_IF		1020034	0					
ANR	1020138	ArgumentList	"emit_fop_mem ( compiler , ( op & SLJIT_SINGLE_OP ) | FPU_LOAD , TMP_FREG2 , src2 , src2w )"		1020034	1					
ANR	1020139	Argument	"emit_fop_mem ( compiler , ( op & SLJIT_SINGLE_OP ) | FPU_LOAD , TMP_FREG2 , src2 , src2w )"		1020034	0					
ANR	1020140	CallExpression	"emit_fop_mem ( compiler , ( op & SLJIT_SINGLE_OP ) | FPU_LOAD , TMP_FREG2 , src2 , src2w )"		1020034	0					
ANR	1020141	Callee	emit_fop_mem		1020034	0					
ANR	1020142	Identifier	emit_fop_mem		1020034	0					
ANR	1020143	ArgumentList	compiler		1020034	1					
ANR	1020144	Argument	compiler		1020034	0					
ANR	1020145	Identifier	compiler		1020034	0					
ANR	1020146	Argument	( op & SLJIT_SINGLE_OP ) | FPU_LOAD		1020034	1					
ANR	1020147	InclusiveOrExpression	( op & SLJIT_SINGLE_OP ) | FPU_LOAD		1020034	0		|			
ANR	1020148	BitAndExpression	op & SLJIT_SINGLE_OP		1020034	0		&			
ANR	1020149	Identifier	op		1020034	0					
ANR	1020150	Identifier	SLJIT_SINGLE_OP		1020034	1					
ANR	1020151	Identifier	FPU_LOAD		1020034	1					
ANR	1020152	Argument	TMP_FREG2		1020034	2					
ANR	1020153	Identifier	TMP_FREG2		1020034	0					
ANR	1020154	Argument	src2		1020034	3					
ANR	1020155	Identifier	src2		1020034	0					
ANR	1020156	Argument	src2w		1020034	4					
ANR	1020157	Identifier	src2w		1020034	0					
ANR	1020158	ExpressionStatement	src2 = TMP_FREG2	2239:2:69837:69853	1020034	1	True				
ANR	1020159	AssignmentExpression	src2 = TMP_FREG2		1020034	0		=			
ANR	1020160	Identifier	src2		1020034	0					
ANR	1020161	Identifier	TMP_FREG2		1020034	1					
ANR	1020162	IfStatement	if ( src1 & SLJIT_MEM )		1020034	11					
ANR	1020163	Condition	src1 & SLJIT_MEM	2242:5:69864:69879	1020034	0	True				
ANR	1020164	BitAndExpression	src1 & SLJIT_MEM		1020034	0		&			
ANR	1020165	Identifier	src1		1020034	0					
ANR	1020166	Identifier	SLJIT_MEM		1020034	1					
ANR	1020167	CompoundStatement		21:23:511:511	1020034	1					
ANR	1020168	ExpressionStatement	"FAIL_IF ( emit_fop_mem ( compiler , ( op & SLJIT_SINGLE_OP ) | FPU_LOAD , TMP_FREG1 , src1 , src1w ) )"	2243:2:69886:69976	1020034	0	True				
ANR	1020169	CallExpression	"FAIL_IF ( emit_fop_mem ( compiler , ( op & SLJIT_SINGLE_OP ) | FPU_LOAD , TMP_FREG1 , src1 , src1w ) )"		1020034	0					
ANR	1020170	Callee	FAIL_IF		1020034	0					
ANR	1020171	Identifier	FAIL_IF		1020034	0					
ANR	1020172	ArgumentList	"emit_fop_mem ( compiler , ( op & SLJIT_SINGLE_OP ) | FPU_LOAD , TMP_FREG1 , src1 , src1w )"		1020034	1					
ANR	1020173	Argument	"emit_fop_mem ( compiler , ( op & SLJIT_SINGLE_OP ) | FPU_LOAD , TMP_FREG1 , src1 , src1w )"		1020034	0					
ANR	1020174	CallExpression	"emit_fop_mem ( compiler , ( op & SLJIT_SINGLE_OP ) | FPU_LOAD , TMP_FREG1 , src1 , src1w )"		1020034	0					
ANR	1020175	Callee	emit_fop_mem		1020034	0					
ANR	1020176	Identifier	emit_fop_mem		1020034	0					
ANR	1020177	ArgumentList	compiler		1020034	1					
ANR	1020178	Argument	compiler		1020034	0					
ANR	1020179	Identifier	compiler		1020034	0					
ANR	1020180	Argument	( op & SLJIT_SINGLE_OP ) | FPU_LOAD		1020034	1					
ANR	1020181	InclusiveOrExpression	( op & SLJIT_SINGLE_OP ) | FPU_LOAD		1020034	0		|			
ANR	1020182	BitAndExpression	op & SLJIT_SINGLE_OP		1020034	0		&			
ANR	1020183	Identifier	op		1020034	0					
ANR	1020184	Identifier	SLJIT_SINGLE_OP		1020034	1					
ANR	1020185	Identifier	FPU_LOAD		1020034	1					
ANR	1020186	Argument	TMP_FREG1		1020034	2					
ANR	1020187	Identifier	TMP_FREG1		1020034	0					
ANR	1020188	Argument	src1		1020034	3					
ANR	1020189	Identifier	src1		1020034	0					
ANR	1020190	Argument	src1w		1020034	4					
ANR	1020191	Identifier	src1w		1020034	0					
ANR	1020192	ExpressionStatement	src1 = TMP_FREG1	2244:2:69980:69996	1020034	1	True				
ANR	1020193	AssignmentExpression	src1 = TMP_FREG1		1020034	0		=			
ANR	1020194	Identifier	src1		1020034	0					
ANR	1020195	Identifier	TMP_FREG1		1020034	1					
ANR	1020196	SwitchStatement	switch ( GET_OPCODE ( op ) )		1020034	12					
ANR	1020197	Condition	GET_OPCODE ( op )	2247:9:70011:70024	1020034	0	True				
ANR	1020198	CallExpression	GET_OPCODE ( op )		1020034	0					
ANR	1020199	Callee	GET_OPCODE		1020034	0					
ANR	1020200	Identifier	GET_OPCODE		1020034	0					
ANR	1020201	ArgumentList	op		1020034	1					
ANR	1020202	Argument	op		1020034	0					
ANR	1020203	Identifier	op		1020034	0					
ANR	1020204	CompoundStatement		26:25:656:656	1020034	1					
ANR	1020205	Label	case SLJIT_DADD :	2248:1:70030:70045	1020034	0	True				
ANR	1020206	Identifier	SLJIT_DADD		1020034	0					
ANR	1020207	ExpressionStatement	"FAIL_IF ( push_inst ( compiler , EMIT_FPU_OPERATION ( VADD_F32 , op & SLJIT_SINGLE_OP , dst_r , src2 , src1 ) ) )"	2249:2:70049:70148	1020034	1	True				
ANR	1020208	CallExpression	"FAIL_IF ( push_inst ( compiler , EMIT_FPU_OPERATION ( VADD_F32 , op & SLJIT_SINGLE_OP , dst_r , src2 , src1 ) ) )"		1020034	0					
ANR	1020209	Callee	FAIL_IF		1020034	0					
ANR	1020210	Identifier	FAIL_IF		1020034	0					
ANR	1020211	ArgumentList	"push_inst ( compiler , EMIT_FPU_OPERATION ( VADD_F32 , op & SLJIT_SINGLE_OP , dst_r , src2 , src1 ) )"		1020034	1					
ANR	1020212	Argument	"push_inst ( compiler , EMIT_FPU_OPERATION ( VADD_F32 , op & SLJIT_SINGLE_OP , dst_r , src2 , src1 ) )"		1020034	0					
ANR	1020213	CallExpression	"push_inst ( compiler , EMIT_FPU_OPERATION ( VADD_F32 , op & SLJIT_SINGLE_OP , dst_r , src2 , src1 ) )"		1020034	0					
ANR	1020214	Callee	push_inst		1020034	0					
ANR	1020215	Identifier	push_inst		1020034	0					
ANR	1020216	ArgumentList	compiler		1020034	1					
ANR	1020217	Argument	compiler		1020034	0					
ANR	1020218	Identifier	compiler		1020034	0					
ANR	1020219	Argument	"EMIT_FPU_OPERATION ( VADD_F32 , op & SLJIT_SINGLE_OP , dst_r , src2 , src1 )"		1020034	1					
ANR	1020220	CallExpression	"EMIT_FPU_OPERATION ( VADD_F32 , op & SLJIT_SINGLE_OP , dst_r , src2 , src1 )"		1020034	0					
ANR	1020221	Callee	EMIT_FPU_OPERATION		1020034	0					
ANR	1020222	Identifier	EMIT_FPU_OPERATION		1020034	0					
ANR	1020223	ArgumentList	VADD_F32		1020034	1					
ANR	1020224	Argument	VADD_F32		1020034	0					
ANR	1020225	Identifier	VADD_F32		1020034	0					
ANR	1020226	Argument	op & SLJIT_SINGLE_OP		1020034	1					
ANR	1020227	BitAndExpression	op & SLJIT_SINGLE_OP		1020034	0		&			
ANR	1020228	Identifier	op		1020034	0					
ANR	1020229	Identifier	SLJIT_SINGLE_OP		1020034	1					
ANR	1020230	Argument	dst_r		1020034	2					
ANR	1020231	Identifier	dst_r		1020034	0					
ANR	1020232	Argument	src2		1020034	3					
ANR	1020233	Identifier	src2		1020034	0					
ANR	1020234	Argument	src1		1020034	4					
ANR	1020235	Identifier	src1		1020034	0					
ANR	1020236	BreakStatement	break ;	2250:2:70152:70157	1020034	2	True				
ANR	1020237	Label	case SLJIT_DSUB :	2252:1:70161:70176	1020034	3	True				
ANR	1020238	Identifier	SLJIT_DSUB		1020034	0					
ANR	1020239	ExpressionStatement	"FAIL_IF ( push_inst ( compiler , EMIT_FPU_OPERATION ( VSUB_F32 , op & SLJIT_SINGLE_OP , dst_r , src2 , src1 ) ) )"	2253:2:70180:70279	1020034	4	True				
ANR	1020240	CallExpression	"FAIL_IF ( push_inst ( compiler , EMIT_FPU_OPERATION ( VSUB_F32 , op & SLJIT_SINGLE_OP , dst_r , src2 , src1 ) ) )"		1020034	0					
ANR	1020241	Callee	FAIL_IF		1020034	0					
ANR	1020242	Identifier	FAIL_IF		1020034	0					
ANR	1020243	ArgumentList	"push_inst ( compiler , EMIT_FPU_OPERATION ( VSUB_F32 , op & SLJIT_SINGLE_OP , dst_r , src2 , src1 ) )"		1020034	1					
ANR	1020244	Argument	"push_inst ( compiler , EMIT_FPU_OPERATION ( VSUB_F32 , op & SLJIT_SINGLE_OP , dst_r , src2 , src1 ) )"		1020034	0					
ANR	1020245	CallExpression	"push_inst ( compiler , EMIT_FPU_OPERATION ( VSUB_F32 , op & SLJIT_SINGLE_OP , dst_r , src2 , src1 ) )"		1020034	0					
ANR	1020246	Callee	push_inst		1020034	0					
ANR	1020247	Identifier	push_inst		1020034	0					
ANR	1020248	ArgumentList	compiler		1020034	1					
ANR	1020249	Argument	compiler		1020034	0					
ANR	1020250	Identifier	compiler		1020034	0					
ANR	1020251	Argument	"EMIT_FPU_OPERATION ( VSUB_F32 , op & SLJIT_SINGLE_OP , dst_r , src2 , src1 )"		1020034	1					
ANR	1020252	CallExpression	"EMIT_FPU_OPERATION ( VSUB_F32 , op & SLJIT_SINGLE_OP , dst_r , src2 , src1 )"		1020034	0					
ANR	1020253	Callee	EMIT_FPU_OPERATION		1020034	0					
ANR	1020254	Identifier	EMIT_FPU_OPERATION		1020034	0					
ANR	1020255	ArgumentList	VSUB_F32		1020034	1					
ANR	1020256	Argument	VSUB_F32		1020034	0					
ANR	1020257	Identifier	VSUB_F32		1020034	0					
ANR	1020258	Argument	op & SLJIT_SINGLE_OP		1020034	1					
ANR	1020259	BitAndExpression	op & SLJIT_SINGLE_OP		1020034	0		&			
ANR	1020260	Identifier	op		1020034	0					
ANR	1020261	Identifier	SLJIT_SINGLE_OP		1020034	1					
ANR	1020262	Argument	dst_r		1020034	2					
ANR	1020263	Identifier	dst_r		1020034	0					
ANR	1020264	Argument	src2		1020034	3					
ANR	1020265	Identifier	src2		1020034	0					
ANR	1020266	Argument	src1		1020034	4					
ANR	1020267	Identifier	src1		1020034	0					
ANR	1020268	BreakStatement	break ;	2254:2:70283:70288	1020034	5	True				
ANR	1020269	Label	case SLJIT_DMUL :	2256:1:70292:70307	1020034	6	True				
ANR	1020270	Identifier	SLJIT_DMUL		1020034	0					
ANR	1020271	ExpressionStatement	"FAIL_IF ( push_inst ( compiler , EMIT_FPU_OPERATION ( VMUL_F32 , op & SLJIT_SINGLE_OP , dst_r , src2 , src1 ) ) )"	2257:2:70311:70410	1020034	7	True				
ANR	1020272	CallExpression	"FAIL_IF ( push_inst ( compiler , EMIT_FPU_OPERATION ( VMUL_F32 , op & SLJIT_SINGLE_OP , dst_r , src2 , src1 ) ) )"		1020034	0					
ANR	1020273	Callee	FAIL_IF		1020034	0					
ANR	1020274	Identifier	FAIL_IF		1020034	0					
ANR	1020275	ArgumentList	"push_inst ( compiler , EMIT_FPU_OPERATION ( VMUL_F32 , op & SLJIT_SINGLE_OP , dst_r , src2 , src1 ) )"		1020034	1					
ANR	1020276	Argument	"push_inst ( compiler , EMIT_FPU_OPERATION ( VMUL_F32 , op & SLJIT_SINGLE_OP , dst_r , src2 , src1 ) )"		1020034	0					
ANR	1020277	CallExpression	"push_inst ( compiler , EMIT_FPU_OPERATION ( VMUL_F32 , op & SLJIT_SINGLE_OP , dst_r , src2 , src1 ) )"		1020034	0					
ANR	1020278	Callee	push_inst		1020034	0					
ANR	1020279	Identifier	push_inst		1020034	0					
ANR	1020280	ArgumentList	compiler		1020034	1					
ANR	1020281	Argument	compiler		1020034	0					
ANR	1020282	Identifier	compiler		1020034	0					
ANR	1020283	Argument	"EMIT_FPU_OPERATION ( VMUL_F32 , op & SLJIT_SINGLE_OP , dst_r , src2 , src1 )"		1020034	1					
ANR	1020284	CallExpression	"EMIT_FPU_OPERATION ( VMUL_F32 , op & SLJIT_SINGLE_OP , dst_r , src2 , src1 )"		1020034	0					
ANR	1020285	Callee	EMIT_FPU_OPERATION		1020034	0					
ANR	1020286	Identifier	EMIT_FPU_OPERATION		1020034	0					
ANR	1020287	ArgumentList	VMUL_F32		1020034	1					
ANR	1020288	Argument	VMUL_F32		1020034	0					
ANR	1020289	Identifier	VMUL_F32		1020034	0					
ANR	1020290	Argument	op & SLJIT_SINGLE_OP		1020034	1					
ANR	1020291	BitAndExpression	op & SLJIT_SINGLE_OP		1020034	0		&			
ANR	1020292	Identifier	op		1020034	0					
ANR	1020293	Identifier	SLJIT_SINGLE_OP		1020034	1					
ANR	1020294	Argument	dst_r		1020034	2					
ANR	1020295	Identifier	dst_r		1020034	0					
ANR	1020296	Argument	src2		1020034	3					
ANR	1020297	Identifier	src2		1020034	0					
ANR	1020298	Argument	src1		1020034	4					
ANR	1020299	Identifier	src1		1020034	0					
ANR	1020300	BreakStatement	break ;	2258:2:70414:70419	1020034	8	True				
ANR	1020301	Label	case SLJIT_DDIV :	2260:1:70423:70438	1020034	9	True				
ANR	1020302	Identifier	SLJIT_DDIV		1020034	0					
ANR	1020303	ExpressionStatement	"FAIL_IF ( push_inst ( compiler , EMIT_FPU_OPERATION ( VDIV_F32 , op & SLJIT_SINGLE_OP , dst_r , src2 , src1 ) ) )"	2261:2:70442:70541	1020034	10	True				
ANR	1020304	CallExpression	"FAIL_IF ( push_inst ( compiler , EMIT_FPU_OPERATION ( VDIV_F32 , op & SLJIT_SINGLE_OP , dst_r , src2 , src1 ) ) )"		1020034	0					
ANR	1020305	Callee	FAIL_IF		1020034	0					
ANR	1020306	Identifier	FAIL_IF		1020034	0					
ANR	1020307	ArgumentList	"push_inst ( compiler , EMIT_FPU_OPERATION ( VDIV_F32 , op & SLJIT_SINGLE_OP , dst_r , src2 , src1 ) )"		1020034	1					
ANR	1020308	Argument	"push_inst ( compiler , EMIT_FPU_OPERATION ( VDIV_F32 , op & SLJIT_SINGLE_OP , dst_r , src2 , src1 ) )"		1020034	0					
ANR	1020309	CallExpression	"push_inst ( compiler , EMIT_FPU_OPERATION ( VDIV_F32 , op & SLJIT_SINGLE_OP , dst_r , src2 , src1 ) )"		1020034	0					
ANR	1020310	Callee	push_inst		1020034	0					
ANR	1020311	Identifier	push_inst		1020034	0					
ANR	1020312	ArgumentList	compiler		1020034	1					
ANR	1020313	Argument	compiler		1020034	0					
ANR	1020314	Identifier	compiler		1020034	0					
ANR	1020315	Argument	"EMIT_FPU_OPERATION ( VDIV_F32 , op & SLJIT_SINGLE_OP , dst_r , src2 , src1 )"		1020034	1					
ANR	1020316	CallExpression	"EMIT_FPU_OPERATION ( VDIV_F32 , op & SLJIT_SINGLE_OP , dst_r , src2 , src1 )"		1020034	0					
ANR	1020317	Callee	EMIT_FPU_OPERATION		1020034	0					
ANR	1020318	Identifier	EMIT_FPU_OPERATION		1020034	0					
ANR	1020319	ArgumentList	VDIV_F32		1020034	1					
ANR	1020320	Argument	VDIV_F32		1020034	0					
ANR	1020321	Identifier	VDIV_F32		1020034	0					
ANR	1020322	Argument	op & SLJIT_SINGLE_OP		1020034	1					
ANR	1020323	BitAndExpression	op & SLJIT_SINGLE_OP		1020034	0		&			
ANR	1020324	Identifier	op		1020034	0					
ANR	1020325	Identifier	SLJIT_SINGLE_OP		1020034	1					
ANR	1020326	Argument	dst_r		1020034	2					
ANR	1020327	Identifier	dst_r		1020034	0					
ANR	1020328	Argument	src2		1020034	3					
ANR	1020329	Identifier	src2		1020034	0					
ANR	1020330	Argument	src1		1020034	4					
ANR	1020331	Identifier	src1		1020034	0					
ANR	1020332	BreakStatement	break ;	2262:2:70545:70550	1020034	11	True				
ANR	1020333	IfStatement	if ( dst_r == TMP_FREG1 )		1020034	13					
ANR	1020334	Condition	dst_r == TMP_FREG1	2265:5:70561:70578	1020034	0	True				
ANR	1020335	EqualityExpression	dst_r == TMP_FREG1		1020034	0		==			
ANR	1020336	Identifier	dst_r		1020034	0					
ANR	1020337	Identifier	TMP_FREG1		1020034	1					
ANR	1020338	ExpressionStatement	"FAIL_IF ( emit_fop_mem ( compiler , ( op & SLJIT_SINGLE_OP ) , TMP_FREG1 , dst , dstw ) )"	2266:2:70583:70660	1020034	1	True				
ANR	1020339	CallExpression	"FAIL_IF ( emit_fop_mem ( compiler , ( op & SLJIT_SINGLE_OP ) , TMP_FREG1 , dst , dstw ) )"		1020034	0					
ANR	1020340	Callee	FAIL_IF		1020034	0					
ANR	1020341	Identifier	FAIL_IF		1020034	0					
ANR	1020342	ArgumentList	"emit_fop_mem ( compiler , ( op & SLJIT_SINGLE_OP ) , TMP_FREG1 , dst , dstw )"		1020034	1					
ANR	1020343	Argument	"emit_fop_mem ( compiler , ( op & SLJIT_SINGLE_OP ) , TMP_FREG1 , dst , dstw )"		1020034	0					
ANR	1020344	CallExpression	"emit_fop_mem ( compiler , ( op & SLJIT_SINGLE_OP ) , TMP_FREG1 , dst , dstw )"		1020034	0					
ANR	1020345	Callee	emit_fop_mem		1020034	0					
ANR	1020346	Identifier	emit_fop_mem		1020034	0					
ANR	1020347	ArgumentList	compiler		1020034	1					
ANR	1020348	Argument	compiler		1020034	0					
ANR	1020349	Identifier	compiler		1020034	0					
ANR	1020350	Argument	op & SLJIT_SINGLE_OP		1020034	1					
ANR	1020351	BitAndExpression	op & SLJIT_SINGLE_OP		1020034	0		&			
ANR	1020352	Identifier	op		1020034	0					
ANR	1020353	Identifier	SLJIT_SINGLE_OP		1020034	1					
ANR	1020354	Argument	TMP_FREG1		1020034	2					
ANR	1020355	Identifier	TMP_FREG1		1020034	0					
ANR	1020356	Argument	dst		1020034	3					
ANR	1020357	Identifier	dst		1020034	0					
ANR	1020358	Argument	dstw		1020034	4					
ANR	1020359	Identifier	dstw		1020034	0					
ANR	1020360	ReturnStatement	return SLJIT_SUCCESS ;	2268:1:70664:70684	1020034	14	True				
ANR	1020361	Identifier	SLJIT_SUCCESS		1020034	0					
ANR	1020362	ReturnType	SLJIT_API_FUNC_ATTRIBUTE sljit_si		1020034	1					
ANR	1020363	Identifier	sljit_emit_fop2		1020034	2					
ANR	1020364	ParameterList	"struct sljit_compiler * compiler , sljit_si op , sljit_si dst , sljit_sw dstw , sljit_si src1 , sljit_sw src1w , sljit_si src2 , sljit_sw src2w"		1020034	3					
ANR	1020365	Parameter	struct sljit_compiler * compiler	2218:50:69230:69260	1020034	0	True				
ANR	1020366	ParameterType	struct sljit_compiler *		1020034	0					
ANR	1020367	Identifier	compiler		1020034	1					
ANR	1020368	Parameter	sljit_si op	2218:83:69263:69273	1020034	1	True				
ANR	1020369	ParameterType	sljit_si		1020034	0					
ANR	1020370	Identifier	op		1020034	1					
ANR	1020371	Parameter	sljit_si dst	2219:1:69277:69288	1020034	2	True				
ANR	1020372	ParameterType	sljit_si		1020034	0					
ANR	1020373	Identifier	dst		1020034	1					
ANR	1020374	Parameter	sljit_sw dstw	2219:15:69291:69303	1020034	3	True				
ANR	1020375	ParameterType	sljit_sw		1020034	0					
ANR	1020376	Identifier	dstw		1020034	1					
ANR	1020377	Parameter	sljit_si src1	2220:1:69307:69319	1020034	4	True				
ANR	1020378	ParameterType	sljit_si		1020034	0					
ANR	1020379	Identifier	src1		1020034	1					
ANR	1020380	Parameter	sljit_sw src1w	2220:16:69322:69335	1020034	5	True				
ANR	1020381	ParameterType	sljit_sw		1020034	0					
ANR	1020382	Identifier	src1w		1020034	1					
ANR	1020383	Parameter	sljit_si src2	2221:1:69339:69351	1020034	6	True				
ANR	1020384	ParameterType	sljit_si		1020034	0					
ANR	1020385	Identifier	src2		1020034	1					
ANR	1020386	Parameter	sljit_sw src2w	2221:16:69354:69367	1020034	7	True				
ANR	1020387	ParameterType	sljit_sw		1020034	0					
ANR	1020388	Identifier	src2w		1020034	1					
ANR	1020389	CFGEntryNode	ENTRY		1020034		True				
ANR	1020390	CFGExitNode	EXIT		1020034		True				
ANR	1020391	Symbol	compiler -> cache_argw		1020034						
ANR	1020392	Symbol	TMP_FREG2		1020034						
ANR	1020393	Symbol	src1w		1020034						
ANR	1020394	Symbol	dst		1020034						
ANR	1020395	Symbol	TMP_FREG1		1020034						
ANR	1020396	Symbol	SLJIT_MEM		1020034						
ANR	1020397	Symbol	VDIV_F32		1020034						
ANR	1020398	Symbol	* compiler		1020034						
ANR	1020399	Symbol	dst_r		1020034						
ANR	1020400	Symbol	GET_OPCODE		1020034						
ANR	1020401	Symbol	VSUB_F32		1020034						
ANR	1020402	Symbol	emit_fop_mem		1020034						
ANR	1020403	Symbol	compiler		1020034						
ANR	1020404	Symbol	VADD_F32		1020034						
ANR	1020405	Symbol	src2w		1020034						
ANR	1020406	Symbol	op		1020034						
ANR	1020407	Symbol	push_inst		1020034						
ANR	1020408	Symbol	FAST_IS_REG		1020034						
ANR	1020409	Symbol	compiler -> cache_arg		1020034						
ANR	1020410	Symbol	SLJIT_SINGLE_OP		1020034						
ANR	1020411	Symbol	SLJIT_SUCCESS		1020034						
ANR	1020412	Symbol	check_sljit_emit_fop2		1020034						
ANR	1020413	Symbol	EMIT_FPU_OPERATION		1020034						
ANR	1020414	Symbol	FPU_LOAD		1020034						
ANR	1020415	Symbol	src1		1020034						
ANR	1020416	Symbol	VMUL_F32		1020034						
ANR	1020417	Symbol	src2		1020034						
ANR	1020418	Symbol	dstw		1020034						
ANR	1020419	Function	sljit_emit_fast_enter	2271:1:70690:71804							
ANR	1020420	FunctionDef	"sljit_emit_fast_enter (struct sljit_compiler * compiler , sljit_si dst , sljit_sw dstw)"		1020419	0					
ANR	1020421	CompoundStatement		2280:0:71109:71804	1020419	0					
ANR	1020422	ExpressionStatement	CHECK_ERROR ( )	2281:1:71112:71125	1020419	0	True				
ANR	1020423	CallExpression	CHECK_ERROR ( )		1020419	0					
ANR	1020424	Callee	CHECK_ERROR		1020419	0					
ANR	1020425	Identifier	CHECK_ERROR		1020419	0					
ANR	1020426	ArgumentList			1020419	1					
ANR	1020427	ExpressionStatement	"CHECK ( check_sljit_emit_fast_enter ( compiler , dst , dstw ) )"	2282:1:71128:71183	1020419	1	True				
ANR	1020428	CallExpression	"CHECK ( check_sljit_emit_fast_enter ( compiler , dst , dstw ) )"		1020419	0					
ANR	1020429	Callee	CHECK		1020419	0					
ANR	1020430	Identifier	CHECK		1020419	0					
ANR	1020431	ArgumentList	"check_sljit_emit_fast_enter ( compiler , dst , dstw )"		1020419	1					
ANR	1020432	Argument	"check_sljit_emit_fast_enter ( compiler , dst , dstw )"		1020419	0					
ANR	1020433	CallExpression	"check_sljit_emit_fast_enter ( compiler , dst , dstw )"		1020419	0					
ANR	1020434	Callee	check_sljit_emit_fast_enter		1020419	0					
ANR	1020435	Identifier	check_sljit_emit_fast_enter		1020419	0					
ANR	1020436	ArgumentList	compiler		1020419	1					
ANR	1020437	Argument	compiler		1020419	0					
ANR	1020438	Identifier	compiler		1020419	0					
ANR	1020439	Argument	dst		1020419	1					
ANR	1020440	Identifier	dst		1020419	0					
ANR	1020441	Argument	dstw		1020419	2					
ANR	1020442	Identifier	dstw		1020419	0					
ANR	1020443	ExpressionStatement	"ADJUST_LOCAL_OFFSET ( dst , dstw )"	2283:1:71186:71216	1020419	2	True				
ANR	1020444	CallExpression	"ADJUST_LOCAL_OFFSET ( dst , dstw )"		1020419	0					
ANR	1020445	Callee	ADJUST_LOCAL_OFFSET		1020419	0					
ANR	1020446	Identifier	ADJUST_LOCAL_OFFSET		1020419	0					
ANR	1020447	ArgumentList	dst		1020419	1					
ANR	1020448	Argument	dst		1020419	0					
ANR	1020449	Identifier	dst		1020419	0					
ANR	1020450	Argument	dstw		1020419	1					
ANR	1020451	Identifier	dstw		1020419	0					
ANR	1020452	IfStatement	if ( dst == SLJIT_UNUSED )		1020419	3					
ANR	1020453	Condition	dst == SLJIT_UNUSED	2286:5:71271:71289	1020419	0	True				
ANR	1020454	EqualityExpression	dst == SLJIT_UNUSED		1020419	0		==			
ANR	1020455	Identifier	dst		1020419	0					
ANR	1020456	Identifier	SLJIT_UNUSED		1020419	1					
ANR	1020457	ReturnStatement	return SLJIT_SUCCESS ;	2287:2:71294:71314	1020419	1	True				
ANR	1020458	Identifier	SLJIT_SUCCESS		1020419	0					
ANR	1020459	IfStatement	if ( FAST_IS_REG ( dst ) )		1020419	4					
ANR	1020460	Condition	FAST_IS_REG ( dst )	2289:5:71322:71337	1020419	0	True				
ANR	1020461	CallExpression	FAST_IS_REG ( dst )		1020419	0					
ANR	1020462	Callee	FAST_IS_REG		1020419	0					
ANR	1020463	Identifier	FAST_IS_REG		1020419	0					
ANR	1020464	ArgumentList	dst		1020419	1					
ANR	1020465	Argument	dst		1020419	0					
ANR	1020466	Identifier	dst		1020419	0					
ANR	1020467	ReturnStatement	"return push_inst ( compiler , EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , dst , SLJIT_UNUSED , RM ( TMP_REG3 ) ) ) ;"	2290:2:71342:71435	1020419	1	True				
ANR	1020468	CallExpression	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , dst , SLJIT_UNUSED , RM ( TMP_REG3 ) ) )"		1020419	0					
ANR	1020469	Callee	push_inst		1020419	0					
ANR	1020470	Identifier	push_inst		1020419	0					
ANR	1020471	ArgumentList	compiler		1020419	1					
ANR	1020472	Argument	compiler		1020419	0					
ANR	1020473	Identifier	compiler		1020419	0					
ANR	1020474	Argument	"EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , dst , SLJIT_UNUSED , RM ( TMP_REG3 ) )"		1020419	1					
ANR	1020475	CallExpression	"EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , dst , SLJIT_UNUSED , RM ( TMP_REG3 ) )"		1020419	0					
ANR	1020476	Callee	EMIT_DATA_PROCESS_INS		1020419	0					
ANR	1020477	Identifier	EMIT_DATA_PROCESS_INS		1020419	0					
ANR	1020478	ArgumentList	MOV_DP		1020419	1					
ANR	1020479	Argument	MOV_DP		1020419	0					
ANR	1020480	Identifier	MOV_DP		1020419	0					
ANR	1020481	Argument	0		1020419	1					
ANR	1020482	PrimaryExpression	0		1020419	0					
ANR	1020483	Argument	dst		1020419	2					
ANR	1020484	Identifier	dst		1020419	0					
ANR	1020485	Argument	SLJIT_UNUSED		1020419	3					
ANR	1020486	Identifier	SLJIT_UNUSED		1020419	0					
ANR	1020487	Argument	RM ( TMP_REG3 )		1020419	4					
ANR	1020488	CallExpression	RM ( TMP_REG3 )		1020419	0					
ANR	1020489	Callee	RM		1020419	0					
ANR	1020490	Identifier	RM		1020419	0					
ANR	1020491	ArgumentList	TMP_REG3		1020419	1					
ANR	1020492	Argument	TMP_REG3		1020419	0					
ANR	1020493	Identifier	TMP_REG3		1020419	0					
ANR	1020494	IfStatement	"if ( getput_arg_fast ( compiler , WORD_DATA , TMP_REG3 , dst , dstw ) )"		1020419	5					
ANR	1020495	Condition	"getput_arg_fast ( compiler , WORD_DATA , TMP_REG3 , dst , dstw )"	2293:5:71458:71514	1020419	0	True				
ANR	1020496	CallExpression	"getput_arg_fast ( compiler , WORD_DATA , TMP_REG3 , dst , dstw )"		1020419	0					
ANR	1020497	Callee	getput_arg_fast		1020419	0					
ANR	1020498	Identifier	getput_arg_fast		1020419	0					
ANR	1020499	ArgumentList	compiler		1020419	1					
ANR	1020500	Argument	compiler		1020419	0					
ANR	1020501	Identifier	compiler		1020419	0					
ANR	1020502	Argument	WORD_DATA		1020419	1					
ANR	1020503	Identifier	WORD_DATA		1020419	0					
ANR	1020504	Argument	TMP_REG3		1020419	2					
ANR	1020505	Identifier	TMP_REG3		1020419	0					
ANR	1020506	Argument	dst		1020419	3					
ANR	1020507	Identifier	dst		1020419	0					
ANR	1020508	Argument	dstw		1020419	4					
ANR	1020509	Identifier	dstw		1020419	0					
ANR	1020510	ReturnStatement	return compiler -> error ;	2294:2:71519:71541	1020419	1	True				
ANR	1020511	PtrMemberAccess	compiler -> error		1020419	0					
ANR	1020512	Identifier	compiler		1020419	0					
ANR	1020513	Identifier	error		1020419	1					
ANR	1020514	ExpressionStatement	"FAIL_IF ( push_inst ( compiler , EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , TMP_REG2 , SLJIT_UNUSED , RM ( TMP_REG3 ) ) ) )"	2296:1:71581:71681	1020419	6	True				
ANR	1020515	CallExpression	"FAIL_IF ( push_inst ( compiler , EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , TMP_REG2 , SLJIT_UNUSED , RM ( TMP_REG3 ) ) ) )"		1020419	0					
ANR	1020516	Callee	FAIL_IF		1020419	0					
ANR	1020517	Identifier	FAIL_IF		1020419	0					
ANR	1020518	ArgumentList	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , TMP_REG2 , SLJIT_UNUSED , RM ( TMP_REG3 ) ) )"		1020419	1					
ANR	1020519	Argument	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , TMP_REG2 , SLJIT_UNUSED , RM ( TMP_REG3 ) ) )"		1020419	0					
ANR	1020520	CallExpression	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , TMP_REG2 , SLJIT_UNUSED , RM ( TMP_REG3 ) ) )"		1020419	0					
ANR	1020521	Callee	push_inst		1020419	0					
ANR	1020522	Identifier	push_inst		1020419	0					
ANR	1020523	ArgumentList	compiler		1020419	1					
ANR	1020524	Argument	compiler		1020419	0					
ANR	1020525	Identifier	compiler		1020419	0					
ANR	1020526	Argument	"EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , TMP_REG2 , SLJIT_UNUSED , RM ( TMP_REG3 ) )"		1020419	1					
ANR	1020527	CallExpression	"EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , TMP_REG2 , SLJIT_UNUSED , RM ( TMP_REG3 ) )"		1020419	0					
ANR	1020528	Callee	EMIT_DATA_PROCESS_INS		1020419	0					
ANR	1020529	Identifier	EMIT_DATA_PROCESS_INS		1020419	0					
ANR	1020530	ArgumentList	MOV_DP		1020419	1					
ANR	1020531	Argument	MOV_DP		1020419	0					
ANR	1020532	Identifier	MOV_DP		1020419	0					
ANR	1020533	Argument	0		1020419	1					
ANR	1020534	PrimaryExpression	0		1020419	0					
ANR	1020535	Argument	TMP_REG2		1020419	2					
ANR	1020536	Identifier	TMP_REG2		1020419	0					
ANR	1020537	Argument	SLJIT_UNUSED		1020419	3					
ANR	1020538	Identifier	SLJIT_UNUSED		1020419	0					
ANR	1020539	Argument	RM ( TMP_REG3 )		1020419	4					
ANR	1020540	CallExpression	RM ( TMP_REG3 )		1020419	0					
ANR	1020541	Callee	RM		1020419	0					
ANR	1020542	Identifier	RM		1020419	0					
ANR	1020543	ArgumentList	TMP_REG3		1020419	1					
ANR	1020544	Argument	TMP_REG3		1020419	0					
ANR	1020545	Identifier	TMP_REG3		1020419	0					
ANR	1020546	ExpressionStatement	compiler -> cache_arg = 0	2297:1:71684:71707	1020419	7	True				
ANR	1020547	AssignmentExpression	compiler -> cache_arg = 0		1020419	0		=			
ANR	1020548	PtrMemberAccess	compiler -> cache_arg		1020419	0					
ANR	1020549	Identifier	compiler		1020419	0					
ANR	1020550	Identifier	cache_arg		1020419	1					
ANR	1020551	PrimaryExpression	0		1020419	1					
ANR	1020552	ExpressionStatement	compiler -> cache_argw = 0	2298:1:71710:71734	1020419	8	True				
ANR	1020553	AssignmentExpression	compiler -> cache_argw = 0		1020419	0		=			
ANR	1020554	PtrMemberAccess	compiler -> cache_argw		1020419	0					
ANR	1020555	Identifier	compiler		1020419	0					
ANR	1020556	Identifier	cache_argw		1020419	1					
ANR	1020557	PrimaryExpression	0		1020419	1					
ANR	1020558	ReturnStatement	"return getput_arg ( compiler , WORD_DATA , TMP_REG2 , dst , dstw , 0 , 0 ) ;"	2299:1:71737:71802	1020419	9	True				
ANR	1020559	CallExpression	"getput_arg ( compiler , WORD_DATA , TMP_REG2 , dst , dstw , 0 , 0 )"		1020419	0					
ANR	1020560	Callee	getput_arg		1020419	0					
ANR	1020561	Identifier	getput_arg		1020419	0					
ANR	1020562	ArgumentList	compiler		1020419	1					
ANR	1020563	Argument	compiler		1020419	0					
ANR	1020564	Identifier	compiler		1020419	0					
ANR	1020565	Argument	WORD_DATA		1020419	1					
ANR	1020566	Identifier	WORD_DATA		1020419	0					
ANR	1020567	Argument	TMP_REG2		1020419	2					
ANR	1020568	Identifier	TMP_REG2		1020419	0					
ANR	1020569	Argument	dst		1020419	3					
ANR	1020570	Identifier	dst		1020419	0					
ANR	1020571	Argument	dstw		1020419	4					
ANR	1020572	Identifier	dstw		1020419	0					
ANR	1020573	Argument	0		1020419	5					
ANR	1020574	PrimaryExpression	0		1020419	0					
ANR	1020575	Argument	0		1020419	6					
ANR	1020576	PrimaryExpression	0		1020419	0					
ANR	1020577	ReturnType	undef FPU_LOAD undef EMIT_FPU_DATA_TRANSFER undef EMIT_FPU_OPERATION SLJIT_API_FUNC_ATTRIBUTE sljit_si		1020419	1					
ANR	1020578	Identifier	sljit_emit_fast_enter		1020419	2					
ANR	1020579	ParameterList	"struct sljit_compiler * compiler , sljit_si dst , sljit_sw dstw"		1020419	3					
ANR	1020580	Parameter	struct sljit_compiler * compiler	2279:56:71047:71077	1020419	0	True				
ANR	1020581	ParameterType	struct sljit_compiler *		1020419	0					
ANR	1020582	Identifier	compiler		1020419	1					
ANR	1020583	Parameter	sljit_si dst	2279:89:71080:71091	1020419	1	True				
ANR	1020584	ParameterType	sljit_si		1020419	0					
ANR	1020585	Identifier	dst		1020419	1					
ANR	1020586	Parameter	sljit_sw dstw	2279:103:71094:71106	1020419	2	True				
ANR	1020587	ParameterType	sljit_sw		1020419	0					
ANR	1020588	Identifier	dstw		1020419	1					
ANR	1020589	CFGEntryNode	ENTRY		1020419		True				
ANR	1020590	CFGExitNode	EXIT		1020419		True				
ANR	1020591	Symbol	TMP_REG3		1020419						
ANR	1020592	Symbol	push_inst		1020419						
ANR	1020593	Symbol	TMP_REG2		1020419						
ANR	1020594	Symbol	check_sljit_emit_fast_enter		1020419						
ANR	1020595	Symbol	compiler -> cache_argw		1020419						
ANR	1020596	Symbol	FAST_IS_REG		1020419						
ANR	1020597	Symbol	dst		1020419						
ANR	1020598	Symbol	compiler -> cache_arg		1020419						
ANR	1020599	Symbol	SLJIT_SUCCESS		1020419						
ANR	1020600	Symbol	* compiler		1020419						
ANR	1020601	Symbol	MOV_DP		1020419						
ANR	1020602	Symbol	SLJIT_UNUSED		1020419						
ANR	1020603	Symbol	getput_arg		1020419						
ANR	1020604	Symbol	RM		1020419						
ANR	1020605	Symbol	compiler		1020419						
ANR	1020606	Symbol	getput_arg_fast		1020419						
ANR	1020607	Symbol	dstw		1020419						
ANR	1020608	Symbol	compiler -> error		1020419						
ANR	1020609	Symbol	WORD_DATA		1020419						
ANR	1020610	Symbol	EMIT_DATA_PROCESS_INS		1020419						
ANR	1020611	Function	sljit_emit_fast_return	2302:0:71807:72685							
ANR	1020612	FunctionDef	"sljit_emit_fast_return (struct sljit_compiler * compiler , sljit_si src , sljit_sw srcw)"		1020611	0					
ANR	1020613	CompoundStatement		2303:0:71926:72685	1020611	0					
ANR	1020614	ExpressionStatement	CHECK_ERROR ( )	2304:1:71929:71942	1020611	0	True				
ANR	1020615	CallExpression	CHECK_ERROR ( )		1020611	0					
ANR	1020616	Callee	CHECK_ERROR		1020611	0					
ANR	1020617	Identifier	CHECK_ERROR		1020611	0					
ANR	1020618	ArgumentList			1020611	1					
ANR	1020619	ExpressionStatement	"CHECK ( check_sljit_emit_fast_return ( compiler , src , srcw ) )"	2305:1:71945:72001	1020611	1	True				
ANR	1020620	CallExpression	"CHECK ( check_sljit_emit_fast_return ( compiler , src , srcw ) )"		1020611	0					
ANR	1020621	Callee	CHECK		1020611	0					
ANR	1020622	Identifier	CHECK		1020611	0					
ANR	1020623	ArgumentList	"check_sljit_emit_fast_return ( compiler , src , srcw )"		1020611	1					
ANR	1020624	Argument	"check_sljit_emit_fast_return ( compiler , src , srcw )"		1020611	0					
ANR	1020625	CallExpression	"check_sljit_emit_fast_return ( compiler , src , srcw )"		1020611	0					
ANR	1020626	Callee	check_sljit_emit_fast_return		1020611	0					
ANR	1020627	Identifier	check_sljit_emit_fast_return		1020611	0					
ANR	1020628	ArgumentList	compiler		1020611	1					
ANR	1020629	Argument	compiler		1020611	0					
ANR	1020630	Identifier	compiler		1020611	0					
ANR	1020631	Argument	src		1020611	1					
ANR	1020632	Identifier	src		1020611	0					
ANR	1020633	Argument	srcw		1020611	2					
ANR	1020634	Identifier	srcw		1020611	0					
ANR	1020635	ExpressionStatement	"ADJUST_LOCAL_OFFSET ( src , srcw )"	2306:1:72004:72034	1020611	2	True				
ANR	1020636	CallExpression	"ADJUST_LOCAL_OFFSET ( src , srcw )"		1020611	0					
ANR	1020637	Callee	ADJUST_LOCAL_OFFSET		1020611	0					
ANR	1020638	Identifier	ADJUST_LOCAL_OFFSET		1020611	0					
ANR	1020639	ArgumentList	src		1020611	1					
ANR	1020640	Argument	src		1020611	0					
ANR	1020641	Identifier	src		1020611	0					
ANR	1020642	Argument	srcw		1020611	1					
ANR	1020643	Identifier	srcw		1020611	0					
ANR	1020644	IfStatement	if ( FAST_IS_REG ( src ) )		1020611	3					
ANR	1020645	Condition	FAST_IS_REG ( src )	2308:5:72042:72057	1020611	0	True				
ANR	1020646	CallExpression	FAST_IS_REG ( src )		1020611	0					
ANR	1020647	Callee	FAST_IS_REG		1020611	0					
ANR	1020648	Identifier	FAST_IS_REG		1020611	0					
ANR	1020649	ArgumentList	src		1020611	1					
ANR	1020650	Argument	src		1020611	0					
ANR	1020651	Identifier	src		1020611	0					
ANR	1020652	ExpressionStatement	"FAIL_IF ( push_inst ( compiler , EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , TMP_REG3 , SLJIT_UNUSED , RM ( src ) ) ) )"	2309:2:72062:72157	1020611	1	True				
ANR	1020653	CallExpression	"FAIL_IF ( push_inst ( compiler , EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , TMP_REG3 , SLJIT_UNUSED , RM ( src ) ) ) )"		1020611	0					
ANR	1020654	Callee	FAIL_IF		1020611	0					
ANR	1020655	Identifier	FAIL_IF		1020611	0					
ANR	1020656	ArgumentList	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , TMP_REG3 , SLJIT_UNUSED , RM ( src ) ) )"		1020611	1					
ANR	1020657	Argument	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , TMP_REG3 , SLJIT_UNUSED , RM ( src ) ) )"		1020611	0					
ANR	1020658	CallExpression	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , TMP_REG3 , SLJIT_UNUSED , RM ( src ) ) )"		1020611	0					
ANR	1020659	Callee	push_inst		1020611	0					
ANR	1020660	Identifier	push_inst		1020611	0					
ANR	1020661	ArgumentList	compiler		1020611	1					
ANR	1020662	Argument	compiler		1020611	0					
ANR	1020663	Identifier	compiler		1020611	0					
ANR	1020664	Argument	"EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , TMP_REG3 , SLJIT_UNUSED , RM ( src ) )"		1020611	1					
ANR	1020665	CallExpression	"EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , TMP_REG3 , SLJIT_UNUSED , RM ( src ) )"		1020611	0					
ANR	1020666	Callee	EMIT_DATA_PROCESS_INS		1020611	0					
ANR	1020667	Identifier	EMIT_DATA_PROCESS_INS		1020611	0					
ANR	1020668	ArgumentList	MOV_DP		1020611	1					
ANR	1020669	Argument	MOV_DP		1020611	0					
ANR	1020670	Identifier	MOV_DP		1020611	0					
ANR	1020671	Argument	0		1020611	1					
ANR	1020672	PrimaryExpression	0		1020611	0					
ANR	1020673	Argument	TMP_REG3		1020611	2					
ANR	1020674	Identifier	TMP_REG3		1020611	0					
ANR	1020675	Argument	SLJIT_UNUSED		1020611	3					
ANR	1020676	Identifier	SLJIT_UNUSED		1020611	0					
ANR	1020677	Argument	RM ( src )		1020611	4					
ANR	1020678	CallExpression	RM ( src )		1020611	0					
ANR	1020679	Callee	RM		1020611	0					
ANR	1020680	Identifier	RM		1020611	0					
ANR	1020681	ArgumentList	src		1020611	1					
ANR	1020682	Argument	src		1020611	0					
ANR	1020683	Identifier	src		1020611	0					
ANR	1020684	ElseStatement	else		1020611	0					
ANR	1020685	IfStatement	if ( src & SLJIT_MEM )		1020611	0					
ANR	1020686	Condition	src & SLJIT_MEM	2310:10:72169:72183	1020611	0	True				
ANR	1020687	BitAndExpression	src & SLJIT_MEM		1020611	0		&			
ANR	1020688	Identifier	src		1020611	0					
ANR	1020689	Identifier	SLJIT_MEM		1020611	1					
ANR	1020690	CompoundStatement		8:27:259:259	1020611	1					
ANR	1020691	IfStatement	"if ( getput_arg_fast ( compiler , WORD_DATA | LOAD_DATA , TMP_REG3 , src , srcw ) )"		1020611	0					
ANR	1020692	Condition	"getput_arg_fast ( compiler , WORD_DATA | LOAD_DATA , TMP_REG3 , src , srcw )"	2311:6:72194:72262	1020611	0	True				
ANR	1020693	CallExpression	"getput_arg_fast ( compiler , WORD_DATA | LOAD_DATA , TMP_REG3 , src , srcw )"		1020611	0					
ANR	1020694	Callee	getput_arg_fast		1020611	0					
ANR	1020695	Identifier	getput_arg_fast		1020611	0					
ANR	1020696	ArgumentList	compiler		1020611	1					
ANR	1020697	Argument	compiler		1020611	0					
ANR	1020698	Identifier	compiler		1020611	0					
ANR	1020699	Argument	WORD_DATA | LOAD_DATA		1020611	1					
ANR	1020700	InclusiveOrExpression	WORD_DATA | LOAD_DATA		1020611	0		|			
ANR	1020701	Identifier	WORD_DATA		1020611	0					
ANR	1020702	Identifier	LOAD_DATA		1020611	1					
ANR	1020703	Argument	TMP_REG3		1020611	2					
ANR	1020704	Identifier	TMP_REG3		1020611	0					
ANR	1020705	Argument	src		1020611	3					
ANR	1020706	Identifier	src		1020611	0					
ANR	1020707	Argument	srcw		1020611	4					
ANR	1020708	Identifier	srcw		1020611	0					
ANR	1020709	ExpressionStatement	FAIL_IF ( compiler -> error )	2312:3:72268:72292	1020611	1	True				
ANR	1020710	CallExpression	FAIL_IF ( compiler -> error )		1020611	0					
ANR	1020711	Callee	FAIL_IF		1020611	0					
ANR	1020712	Identifier	FAIL_IF		1020611	0					
ANR	1020713	ArgumentList	compiler -> error		1020611	1					
ANR	1020714	Argument	compiler -> error		1020611	0					
ANR	1020715	PtrMemberAccess	compiler -> error		1020611	0					
ANR	1020716	Identifier	compiler		1020611	0					
ANR	1020717	Identifier	error		1020611	1					
ANR	1020718	ElseStatement	else		1020611	0					
ANR	1020719	CompoundStatement		11:7:374:374	1020611	0					
ANR	1020720	ExpressionStatement	compiler -> cache_arg = 0	2314:3:72306:72329	1020611	0	True				
ANR	1020721	AssignmentExpression	compiler -> cache_arg = 0		1020611	0		=			
ANR	1020722	PtrMemberAccess	compiler -> cache_arg		1020611	0					
ANR	1020723	Identifier	compiler		1020611	0					
ANR	1020724	Identifier	cache_arg		1020611	1					
ANR	1020725	PrimaryExpression	0		1020611	1					
ANR	1020726	ExpressionStatement	compiler -> cache_argw = 0	2315:3:72334:72358	1020611	1	True				
ANR	1020727	AssignmentExpression	compiler -> cache_argw = 0		1020611	0		=			
ANR	1020728	PtrMemberAccess	compiler -> cache_argw		1020611	0					
ANR	1020729	Identifier	compiler		1020611	0					
ANR	1020730	Identifier	cache_argw		1020611	1					
ANR	1020731	PrimaryExpression	0		1020611	1					
ANR	1020732	ExpressionStatement	"FAIL_IF ( getput_arg ( compiler , WORD_DATA | LOAD_DATA , TMP_REG2 , src , srcw , 0 , 0 ) )"	2316:3:72363:72442	1020611	2	True				
ANR	1020733	CallExpression	"FAIL_IF ( getput_arg ( compiler , WORD_DATA | LOAD_DATA , TMP_REG2 , src , srcw , 0 , 0 ) )"		1020611	0					
ANR	1020734	Callee	FAIL_IF		1020611	0					
ANR	1020735	Identifier	FAIL_IF		1020611	0					
ANR	1020736	ArgumentList	"getput_arg ( compiler , WORD_DATA | LOAD_DATA , TMP_REG2 , src , srcw , 0 , 0 )"		1020611	1					
ANR	1020737	Argument	"getput_arg ( compiler , WORD_DATA | LOAD_DATA , TMP_REG2 , src , srcw , 0 , 0 )"		1020611	0					
ANR	1020738	CallExpression	"getput_arg ( compiler , WORD_DATA | LOAD_DATA , TMP_REG2 , src , srcw , 0 , 0 )"		1020611	0					
ANR	1020739	Callee	getput_arg		1020611	0					
ANR	1020740	Identifier	getput_arg		1020611	0					
ANR	1020741	ArgumentList	compiler		1020611	1					
ANR	1020742	Argument	compiler		1020611	0					
ANR	1020743	Identifier	compiler		1020611	0					
ANR	1020744	Argument	WORD_DATA | LOAD_DATA		1020611	1					
ANR	1020745	InclusiveOrExpression	WORD_DATA | LOAD_DATA		1020611	0		|			
ANR	1020746	Identifier	WORD_DATA		1020611	0					
ANR	1020747	Identifier	LOAD_DATA		1020611	1					
ANR	1020748	Argument	TMP_REG2		1020611	2					
ANR	1020749	Identifier	TMP_REG2		1020611	0					
ANR	1020750	Argument	src		1020611	3					
ANR	1020751	Identifier	src		1020611	0					
ANR	1020752	Argument	srcw		1020611	4					
ANR	1020753	Identifier	srcw		1020611	0					
ANR	1020754	Argument	0		1020611	5					
ANR	1020755	PrimaryExpression	0		1020611	0					
ANR	1020756	Argument	0		1020611	6					
ANR	1020757	PrimaryExpression	0		1020611	0					
ANR	1020758	ExpressionStatement	"FAIL_IF ( push_inst ( compiler , EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , TMP_REG3 , SLJIT_UNUSED , RM ( TMP_REG2 ) ) ) )"	2317:3:72447:72547	1020611	3	True				
ANR	1020759	CallExpression	"FAIL_IF ( push_inst ( compiler , EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , TMP_REG3 , SLJIT_UNUSED , RM ( TMP_REG2 ) ) ) )"		1020611	0					
ANR	1020760	Callee	FAIL_IF		1020611	0					
ANR	1020761	Identifier	FAIL_IF		1020611	0					
ANR	1020762	ArgumentList	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , TMP_REG3 , SLJIT_UNUSED , RM ( TMP_REG2 ) ) )"		1020611	1					
ANR	1020763	Argument	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , TMP_REG3 , SLJIT_UNUSED , RM ( TMP_REG2 ) ) )"		1020611	0					
ANR	1020764	CallExpression	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , TMP_REG3 , SLJIT_UNUSED , RM ( TMP_REG2 ) ) )"		1020611	0					
ANR	1020765	Callee	push_inst		1020611	0					
ANR	1020766	Identifier	push_inst		1020611	0					
ANR	1020767	ArgumentList	compiler		1020611	1					
ANR	1020768	Argument	compiler		1020611	0					
ANR	1020769	Identifier	compiler		1020611	0					
ANR	1020770	Argument	"EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , TMP_REG3 , SLJIT_UNUSED , RM ( TMP_REG2 ) )"		1020611	1					
ANR	1020771	CallExpression	"EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , TMP_REG3 , SLJIT_UNUSED , RM ( TMP_REG2 ) )"		1020611	0					
ANR	1020772	Callee	EMIT_DATA_PROCESS_INS		1020611	0					
ANR	1020773	Identifier	EMIT_DATA_PROCESS_INS		1020611	0					
ANR	1020774	ArgumentList	MOV_DP		1020611	1					
ANR	1020775	Argument	MOV_DP		1020611	0					
ANR	1020776	Identifier	MOV_DP		1020611	0					
ANR	1020777	Argument	0		1020611	1					
ANR	1020778	PrimaryExpression	0		1020611	0					
ANR	1020779	Argument	TMP_REG3		1020611	2					
ANR	1020780	Identifier	TMP_REG3		1020611	0					
ANR	1020781	Argument	SLJIT_UNUSED		1020611	3					
ANR	1020782	Identifier	SLJIT_UNUSED		1020611	0					
ANR	1020783	Argument	RM ( TMP_REG2 )		1020611	4					
ANR	1020784	CallExpression	RM ( TMP_REG2 )		1020611	0					
ANR	1020785	Callee	RM		1020611	0					
ANR	1020786	Identifier	RM		1020611	0					
ANR	1020787	ArgumentList	TMP_REG2		1020611	1					
ANR	1020788	Argument	TMP_REG2		1020611	0					
ANR	1020789	Identifier	TMP_REG2		1020611	0					
ANR	1020790	ElseStatement	else		1020611	0					
ANR	1020791	IfStatement	if ( src & SLJIT_IMM )		1020611	0					
ANR	1020792	Condition	src & SLJIT_IMM	2320:10:72566:72580	1020611	0	True				
ANR	1020793	BitAndExpression	src & SLJIT_IMM		1020611	0		&			
ANR	1020794	Identifier	src		1020611	0					
ANR	1020795	Identifier	SLJIT_IMM		1020611	1					
ANR	1020796	ExpressionStatement	"FAIL_IF ( load_immediate ( compiler , TMP_REG3 , srcw ) )"	2321:2:72585:72634	1020611	1	True				
ANR	1020797	CallExpression	"FAIL_IF ( load_immediate ( compiler , TMP_REG3 , srcw ) )"		1020611	0					
ANR	1020798	Callee	FAIL_IF		1020611	0					
ANR	1020799	Identifier	FAIL_IF		1020611	0					
ANR	1020800	ArgumentList	"load_immediate ( compiler , TMP_REG3 , srcw )"		1020611	1					
ANR	1020801	Argument	"load_immediate ( compiler , TMP_REG3 , srcw )"		1020611	0					
ANR	1020802	CallExpression	"load_immediate ( compiler , TMP_REG3 , srcw )"		1020611	0					
ANR	1020803	Callee	load_immediate		1020611	0					
ANR	1020804	Identifier	load_immediate		1020611	0					
ANR	1020805	ArgumentList	compiler		1020611	1					
ANR	1020806	Argument	compiler		1020611	0					
ANR	1020807	Identifier	compiler		1020611	0					
ANR	1020808	Argument	TMP_REG3		1020611	1					
ANR	1020809	Identifier	TMP_REG3		1020611	0					
ANR	1020810	Argument	srcw		1020611	2					
ANR	1020811	Identifier	srcw		1020611	0					
ANR	1020812	ReturnStatement	"return push_inst ( compiler , BLX | RM ( TMP_REG3 ) ) ;"	2322:1:72637:72683	1020611	4	True				
ANR	1020813	CallExpression	"push_inst ( compiler , BLX | RM ( TMP_REG3 ) )"		1020611	0					
ANR	1020814	Callee	push_inst		1020611	0					
ANR	1020815	Identifier	push_inst		1020611	0					
ANR	1020816	ArgumentList	compiler		1020611	1					
ANR	1020817	Argument	compiler		1020611	0					
ANR	1020818	Identifier	compiler		1020611	0					
ANR	1020819	Argument	BLX | RM ( TMP_REG3 )		1020611	1					
ANR	1020820	InclusiveOrExpression	BLX | RM ( TMP_REG3 )		1020611	0		|			
ANR	1020821	Identifier	BLX		1020611	0					
ANR	1020822	CallExpression	RM ( TMP_REG3 )		1020611	1					
ANR	1020823	Callee	RM		1020611	0					
ANR	1020824	Identifier	RM		1020611	0					
ANR	1020825	ArgumentList	TMP_REG3		1020611	1					
ANR	1020826	Argument	TMP_REG3		1020611	0					
ANR	1020827	Identifier	TMP_REG3		1020611	0					
ANR	1020828	ReturnType	SLJIT_API_FUNC_ATTRIBUTE sljit_si		1020611	1					
ANR	1020829	Identifier	sljit_emit_fast_return		1020611	2					
ANR	1020830	ParameterList	"struct sljit_compiler * compiler , sljit_si src , sljit_sw srcw"		1020611	3					
ANR	1020831	Parameter	struct sljit_compiler * compiler	2302:57:71864:71894	1020611	0	True				
ANR	1020832	ParameterType	struct sljit_compiler *		1020611	0					
ANR	1020833	Identifier	compiler		1020611	1					
ANR	1020834	Parameter	sljit_si src	2302:90:71897:71908	1020611	1	True				
ANR	1020835	ParameterType	sljit_si		1020611	0					
ANR	1020836	Identifier	src		1020611	1					
ANR	1020837	Parameter	sljit_sw srcw	2302:104:71911:71923	1020611	2	True				
ANR	1020838	ParameterType	sljit_sw		1020611	0					
ANR	1020839	Identifier	srcw		1020611	1					
ANR	1020840	CFGEntryNode	ENTRY		1020611		True				
ANR	1020841	CFGExitNode	EXIT		1020611		True				
ANR	1020842	Symbol	TMP_REG3		1020611						
ANR	1020843	Symbol	push_inst		1020611						
ANR	1020844	Symbol	TMP_REG2		1020611						
ANR	1020845	Symbol	compiler -> cache_argw		1020611						
ANR	1020846	Symbol	FAST_IS_REG		1020611						
ANR	1020847	Symbol	LOAD_DATA		1020611						
ANR	1020848	Symbol	src		1020611						
ANR	1020849	Symbol	srcw		1020611						
ANR	1020850	Symbol	SLJIT_MEM		1020611						
ANR	1020851	Symbol	compiler -> cache_arg		1020611						
ANR	1020852	Symbol	* compiler		1020611						
ANR	1020853	Symbol	BLX		1020611						
ANR	1020854	Symbol	MOV_DP		1020611						
ANR	1020855	Symbol	SLJIT_IMM		1020611						
ANR	1020856	Symbol	check_sljit_emit_fast_return		1020611						
ANR	1020857	Symbol	SLJIT_UNUSED		1020611						
ANR	1020858	Symbol	getput_arg		1020611						
ANR	1020859	Symbol	load_immediate		1020611						
ANR	1020860	Symbol	RM		1020611						
ANR	1020861	Symbol	compiler		1020611						
ANR	1020862	Symbol	getput_arg_fast		1020611						
ANR	1020863	Symbol	compiler -> error		1020611						
ANR	1020864	Symbol	WORD_DATA		1020611						
ANR	1020865	Symbol	EMIT_DATA_PROCESS_INS		1020611						
ANR	1020866	Function	get_cc	2329:0:72917:73865							
ANR	1020867	FunctionDef	get_cc (sljit_si type)		1020866	0					
ANR	1020868	CompoundStatement		2330:0:72955:73865	1020866	0					
ANR	1020869	SwitchStatement	switch ( type )		1020866	0					
ANR	1020870	Condition	type	2331:9:72966:72969	1020866	0	True				
ANR	1020871	Identifier	type		1020866	0					
ANR	1020872	CompoundStatement		2:15:16:16	1020866	1					
ANR	1020873	Label	case SLJIT_EQUAL :	2332:1:72975:72991	1020866	0	True				
ANR	1020874	Identifier	SLJIT_EQUAL		1020866	0					
ANR	1020875	Label	case SLJIT_MUL_NOT_OVERFLOW :	2333:1:72994:73021	1020866	1	True				
ANR	1020876	Identifier	SLJIT_MUL_NOT_OVERFLOW		1020866	0					
ANR	1020877	Label	case SLJIT_D_EQUAL :	2334:1:73024:73042	1020866	2	True				
ANR	1020878	Identifier	SLJIT_D_EQUAL		1020866	0					
ANR	1020879	ReturnStatement	return 0x00000000 ;	2335:2:73046:73063	1020866	3	True				
ANR	1020880	PrimaryExpression	0x00000000		1020866	0					
ANR	1020881	Label	case SLJIT_NOT_EQUAL :	2337:1:73067:73087	1020866	4	True				
ANR	1020882	Identifier	SLJIT_NOT_EQUAL		1020866	0					
ANR	1020883	Label	case SLJIT_MUL_OVERFLOW :	2338:1:73090:73113	1020866	5	True				
ANR	1020884	Identifier	SLJIT_MUL_OVERFLOW		1020866	0					
ANR	1020885	Label	case SLJIT_D_NOT_EQUAL :	2339:1:73116:73138	1020866	6	True				
ANR	1020886	Identifier	SLJIT_D_NOT_EQUAL		1020866	0					
ANR	1020887	ReturnStatement	return 0x10000000 ;	2340:2:73142:73159	1020866	7	True				
ANR	1020888	PrimaryExpression	0x10000000		1020866	0					
ANR	1020889	Label	case SLJIT_LESS :	2342:1:73163:73178	1020866	8	True				
ANR	1020890	Identifier	SLJIT_LESS		1020866	0					
ANR	1020891	Label	case SLJIT_D_LESS :	2343:1:73181:73198	1020866	9	True				
ANR	1020892	Identifier	SLJIT_D_LESS		1020866	0					
ANR	1020893	ReturnStatement	return 0x30000000 ;	2344:2:73202:73219	1020866	10	True				
ANR	1020894	PrimaryExpression	0x30000000		1020866	0					
ANR	1020895	Label	case SLJIT_GREATER_EQUAL :	2346:1:73223:73247	1020866	11	True				
ANR	1020896	Identifier	SLJIT_GREATER_EQUAL		1020866	0					
ANR	1020897	Label	case SLJIT_D_GREATER_EQUAL :	2347:1:73250:73276	1020866	12	True				
ANR	1020898	Identifier	SLJIT_D_GREATER_EQUAL		1020866	0					
ANR	1020899	ReturnStatement	return 0x20000000 ;	2348:2:73280:73297	1020866	13	True				
ANR	1020900	PrimaryExpression	0x20000000		1020866	0					
ANR	1020901	Label	case SLJIT_GREATER :	2350:1:73301:73319	1020866	14	True				
ANR	1020902	Identifier	SLJIT_GREATER		1020866	0					
ANR	1020903	Label	case SLJIT_D_GREATER :	2351:1:73322:73342	1020866	15	True				
ANR	1020904	Identifier	SLJIT_D_GREATER		1020866	0					
ANR	1020905	ReturnStatement	return 0x80000000 ;	2352:2:73346:73363	1020866	16	True				
ANR	1020906	PrimaryExpression	0x80000000		1020866	0					
ANR	1020907	Label	case SLJIT_LESS_EQUAL :	2354:1:73367:73388	1020866	17	True				
ANR	1020908	Identifier	SLJIT_LESS_EQUAL		1020866	0					
ANR	1020909	Label	case SLJIT_D_LESS_EQUAL :	2355:1:73391:73414	1020866	18	True				
ANR	1020910	Identifier	SLJIT_D_LESS_EQUAL		1020866	0					
ANR	1020911	ReturnStatement	return 0x90000000 ;	2356:2:73418:73435	1020866	19	True				
ANR	1020912	PrimaryExpression	0x90000000		1020866	0					
ANR	1020913	Label	case SLJIT_SIG_LESS :	2358:1:73439:73458	1020866	20	True				
ANR	1020914	Identifier	SLJIT_SIG_LESS		1020866	0					
ANR	1020915	ReturnStatement	return 0xb0000000 ;	2359:2:73462:73479	1020866	21	True				
ANR	1020916	PrimaryExpression	0xb0000000		1020866	0					
ANR	1020917	Label	case SLJIT_SIG_GREATER_EQUAL :	2361:1:73483:73511	1020866	22	True				
ANR	1020918	Identifier	SLJIT_SIG_GREATER_EQUAL		1020866	0					
ANR	1020919	ReturnStatement	return 0xa0000000 ;	2362:2:73515:73532	1020866	23	True				
ANR	1020920	PrimaryExpression	0xa0000000		1020866	0					
ANR	1020921	Label	case SLJIT_SIG_GREATER :	2364:1:73536:73558	1020866	24	True				
ANR	1020922	Identifier	SLJIT_SIG_GREATER		1020866	0					
ANR	1020923	ReturnStatement	return 0xc0000000 ;	2365:2:73562:73579	1020866	25	True				
ANR	1020924	PrimaryExpression	0xc0000000		1020866	0					
ANR	1020925	Label	case SLJIT_SIG_LESS_EQUAL :	2367:1:73583:73608	1020866	26	True				
ANR	1020926	Identifier	SLJIT_SIG_LESS_EQUAL		1020866	0					
ANR	1020927	ReturnStatement	return 0xd0000000 ;	2368:2:73612:73629	1020866	27	True				
ANR	1020928	PrimaryExpression	0xd0000000		1020866	0					
ANR	1020929	Label	case SLJIT_OVERFLOW :	2370:1:73633:73652	1020866	28	True				
ANR	1020930	Identifier	SLJIT_OVERFLOW		1020866	0					
ANR	1020931	Label	case SLJIT_D_UNORDERED :	2371:1:73655:73677	1020866	29	True				
ANR	1020932	Identifier	SLJIT_D_UNORDERED		1020866	0					
ANR	1020933	ReturnStatement	return 0x60000000 ;	2372:2:73681:73698	1020866	30	True				
ANR	1020934	PrimaryExpression	0x60000000		1020866	0					
ANR	1020935	Label	case SLJIT_NOT_OVERFLOW :	2374:1:73702:73725	1020866	31	True				
ANR	1020936	Identifier	SLJIT_NOT_OVERFLOW		1020866	0					
ANR	1020937	Label	case SLJIT_D_ORDERED :	2375:1:73728:73748	1020866	32	True				
ANR	1020938	Identifier	SLJIT_D_ORDERED		1020866	0					
ANR	1020939	ReturnStatement	return 0x70000000 ;	2376:2:73752:73769	1020866	33	True				
ANR	1020940	PrimaryExpression	0x70000000		1020866	0					
ANR	1020941	Label	default :	2378:1:73773:73780	1020866	34	True				
ANR	1020942	Identifier	default		1020866	0					
ANR	1020943	ExpressionStatement	SLJIT_ASSERT ( type >= SLJIT_JUMP && type <= SLJIT_CALL3 )	2379:2:73784:73839	1020866	35	True				
ANR	1020944	CallExpression	SLJIT_ASSERT ( type >= SLJIT_JUMP && type <= SLJIT_CALL3 )		1020866	0					
ANR	1020945	Callee	SLJIT_ASSERT		1020866	0					
ANR	1020946	Identifier	SLJIT_ASSERT		1020866	0					
ANR	1020947	ArgumentList	type >= SLJIT_JUMP && type <= SLJIT_CALL3		1020866	1					
ANR	1020948	Argument	type >= SLJIT_JUMP && type <= SLJIT_CALL3		1020866	0					
ANR	1020949	AndExpression	type >= SLJIT_JUMP && type <= SLJIT_CALL3		1020866	0		&&			
ANR	1020950	RelationalExpression	type >= SLJIT_JUMP		1020866	0		>=			
ANR	1020951	Identifier	type		1020866	0					
ANR	1020952	Identifier	SLJIT_JUMP		1020866	1					
ANR	1020953	RelationalExpression	type <= SLJIT_CALL3		1020866	1		<=			
ANR	1020954	Identifier	type		1020866	0					
ANR	1020955	Identifier	SLJIT_CALL3		1020866	1					
ANR	1020956	ReturnStatement	return 0xe0000000 ;	2380:2:73843:73860	1020866	36	True				
ANR	1020957	PrimaryExpression	0xe0000000		1020866	0					
ANR	1020958	ReturnType	static sljit_uw		1020866	1					
ANR	1020959	Identifier	get_cc		1020866	2					
ANR	1020960	ParameterList	sljit_si type		1020866	3					
ANR	1020961	Parameter	sljit_si type	2329:23:72940:72952	1020866	0	True				
ANR	1020962	ParameterType	sljit_si		1020866	0					
ANR	1020963	Identifier	type		1020866	1					
ANR	1020964	CFGEntryNode	ENTRY		1020866		True				
ANR	1020965	CFGExitNode	EXIT		1020866		True				
ANR	1020966	Symbol	SLJIT_JUMP		1020866						
ANR	1020967	Symbol	SLJIT_CALL3		1020866						
ANR	1020968	Symbol	type		1020866						
ANR	1020969	Function	sljit_emit_label	2384:25:73893:74315							
ANR	1020970	FunctionDef	sljit_emit_label (struct sljit_compiler * compiler)		1020969	0					
ANR	1020971	CompoundStatement		2385:0:73963:74315	1020969	0					
ANR	1020972	IdentifierDeclStatement	struct sljit_label * label ;	2386:1:73966:73991	1020969	0	True				
ANR	1020973	IdentifierDecl	* label		1020969	0					
ANR	1020974	IdentifierDeclType	struct sljit_label *		1020969	0					
ANR	1020975	Identifier	label		1020969	1					
ANR	1020976	ExpressionStatement	CHECK_ERROR_PTR ( )	2388:1:73995:74012	1020969	1	True				
ANR	1020977	CallExpression	CHECK_ERROR_PTR ( )		1020969	0					
ANR	1020978	Callee	CHECK_ERROR_PTR		1020969	0					
ANR	1020979	Identifier	CHECK_ERROR_PTR		1020969	0					
ANR	1020980	ArgumentList			1020969	1					
ANR	1020981	ExpressionStatement	CHECK_PTR ( check_sljit_emit_label ( compiler ) )	2389:1:74015:74058	1020969	2	True				
ANR	1020982	CallExpression	CHECK_PTR ( check_sljit_emit_label ( compiler ) )		1020969	0					
ANR	1020983	Callee	CHECK_PTR		1020969	0					
ANR	1020984	Identifier	CHECK_PTR		1020969	0					
ANR	1020985	ArgumentList	check_sljit_emit_label ( compiler )		1020969	1					
ANR	1020986	Argument	check_sljit_emit_label ( compiler )		1020969	0					
ANR	1020987	CallExpression	check_sljit_emit_label ( compiler )		1020969	0					
ANR	1020988	Callee	check_sljit_emit_label		1020969	0					
ANR	1020989	Identifier	check_sljit_emit_label		1020969	0					
ANR	1020990	ArgumentList	compiler		1020969	1					
ANR	1020991	Argument	compiler		1020969	0					
ANR	1020992	Identifier	compiler		1020969	0					
ANR	1020993	IfStatement	if ( compiler -> last_label && compiler -> last_label -> size == compiler -> size )		1020969	3					
ANR	1020994	Condition	compiler -> last_label && compiler -> last_label -> size == compiler -> size	2391:5:74066:74133	1020969	0	True				
ANR	1020995	AndExpression	compiler -> last_label && compiler -> last_label -> size == compiler -> size		1020969	0		&&			
ANR	1020996	PtrMemberAccess	compiler -> last_label		1020969	0					
ANR	1020997	Identifier	compiler		1020969	0					
ANR	1020998	Identifier	last_label		1020969	1					
ANR	1020999	EqualityExpression	compiler -> last_label -> size == compiler -> size		1020969	1		==			
ANR	1021000	PtrMemberAccess	compiler -> last_label -> size		1020969	0					
ANR	1021001	PtrMemberAccess	compiler -> last_label		1020969	0					
ANR	1021002	Identifier	compiler		1020969	0					
ANR	1021003	Identifier	last_label		1020969	1					
ANR	1021004	Identifier	size		1020969	1					
ANR	1021005	PtrMemberAccess	compiler -> size		1020969	1					
ANR	1021006	Identifier	compiler		1020969	0					
ANR	1021007	Identifier	size		1020969	1					
ANR	1021008	ReturnStatement	return compiler -> last_label ;	2392:2:74138:74165	1020969	1	True				
ANR	1021009	PtrMemberAccess	compiler -> last_label		1020969	0					
ANR	1021010	Identifier	compiler		1020969	0					
ANR	1021011	Identifier	last_label		1020969	1					
ANR	1021012	ExpressionStatement	"label = ( struct sljit_label * ) ensure_abuf ( compiler , sizeof ( struct sljit_label ) )"	2394:1:74169:74247	1020969	4	True				
ANR	1021013	AssignmentExpression	"label = ( struct sljit_label * ) ensure_abuf ( compiler , sizeof ( struct sljit_label ) )"		1020969	0		=			
ANR	1021014	Identifier	label		1020969	0					
ANR	1021015	CastExpression	"( struct sljit_label * ) ensure_abuf ( compiler , sizeof ( struct sljit_label ) )"		1020969	1					
ANR	1021016	CastTarget	struct sljit_label *		1020969	0					
ANR	1021017	CallExpression	"ensure_abuf ( compiler , sizeof ( struct sljit_label ) )"		1020969	1					
ANR	1021018	Callee	ensure_abuf		1020969	0					
ANR	1021019	Identifier	ensure_abuf		1020969	0					
ANR	1021020	ArgumentList	compiler		1020969	1					
ANR	1021021	Argument	compiler		1020969	0					
ANR	1021022	Identifier	compiler		1020969	0					
ANR	1021023	Argument	sizeof ( struct sljit_label )		1020969	1					
ANR	1021024	SizeofExpression	sizeof ( struct sljit_label )		1020969	0					
ANR	1021025	Sizeof	sizeof		1020969	0					
ANR	1021026	SizeofOperand	struct sljit_label		1020969	1					
ANR	1021027	ExpressionStatement	PTR_FAIL_IF ( ! label )	2395:1:74250:74269	1020969	5	True				
ANR	1021028	CallExpression	PTR_FAIL_IF ( ! label )		1020969	0					
ANR	1021029	Callee	PTR_FAIL_IF		1020969	0					
ANR	1021030	Identifier	PTR_FAIL_IF		1020969	0					
ANR	1021031	ArgumentList	! label		1020969	1					
ANR	1021032	Argument	! label		1020969	0					
ANR	1021033	UnaryOperationExpression	! label		1020969	0					
ANR	1021034	UnaryOperator	!		1020969	0					
ANR	1021035	Identifier	label		1020969	1					
ANR	1021036	ExpressionStatement	"set_label ( label , compiler )"	2396:1:74272:74298	1020969	6	True				
ANR	1021037	CallExpression	"set_label ( label , compiler )"		1020969	0					
ANR	1021038	Callee	set_label		1020969	0					
ANR	1021039	Identifier	set_label		1020969	0					
ANR	1021040	ArgumentList	label		1020969	1					
ANR	1021041	Argument	label		1020969	0					
ANR	1021042	Identifier	label		1020969	0					
ANR	1021043	Argument	compiler		1020969	1					
ANR	1021044	Identifier	compiler		1020969	0					
ANR	1021045	ReturnStatement	return label ;	2397:1:74301:74313	1020969	7	True				
ANR	1021046	Identifier	label		1020969	0					
ANR	1021047	ReturnType	struct sljit_label *		1020969	1					
ANR	1021048	Identifier	sljit_emit_label		1020969	2					
ANR	1021049	ParameterList	struct sljit_compiler * compiler		1020969	3					
ANR	1021050	Parameter	struct sljit_compiler * compiler	2384:62:73930:73960	1020969	0	True				
ANR	1021051	ParameterType	struct sljit_compiler *		1020969	0					
ANR	1021052	Identifier	compiler		1020969	1					
ANR	1021053	CFGEntryNode	ENTRY		1020969		True				
ANR	1021054	CFGExitNode	EXIT		1020969		True				
ANR	1021055	Symbol	compiler -> last_label -> size		1020969						
ANR	1021056	Symbol	* compiler -> last_label		1020969						
ANR	1021057	Symbol	* * compiler		1020969						
ANR	1021058	Symbol	compiler -> last_label		1020969						
ANR	1021059	Symbol	compiler -> size		1020969						
ANR	1021060	Symbol	check_sljit_emit_label		1020969						
ANR	1021061	Symbol	label		1020969						
ANR	1021062	Symbol	* compiler		1020969						
ANR	1021063	Symbol	ensure_abuf		1020969						
ANR	1021064	Symbol	compiler		1020969						
ANR	1021065	Function	sljit_emit_jump	2400:25:74343:75616							
ANR	1021066	FunctionDef	"sljit_emit_jump (struct sljit_compiler * compiler , sljit_si type)"		1021065	0					
ANR	1021067	CompoundStatement		2401:0:74426:75616	1021065	0					
ANR	1021068	IdentifierDeclStatement	struct sljit_jump * jump ;	2402:1:74429:74452	1021065	0	True				
ANR	1021069	IdentifierDecl	* jump		1021065	0					
ANR	1021070	IdentifierDeclType	struct sljit_jump *		1021065	0					
ANR	1021071	Identifier	jump		1021065	1					
ANR	1021072	ExpressionStatement	CHECK_ERROR_PTR ( )	2404:1:74456:74473	1021065	1	True				
ANR	1021073	CallExpression	CHECK_ERROR_PTR ( )		1021065	0					
ANR	1021074	Callee	CHECK_ERROR_PTR		1021065	0					
ANR	1021075	Identifier	CHECK_ERROR_PTR		1021065	0					
ANR	1021076	ArgumentList			1021065	1					
ANR	1021077	ExpressionStatement	"CHECK_PTR ( check_sljit_emit_jump ( compiler , type ) )"	2405:1:74476:74524	1021065	2	True				
ANR	1021078	CallExpression	"CHECK_PTR ( check_sljit_emit_jump ( compiler , type ) )"		1021065	0					
ANR	1021079	Callee	CHECK_PTR		1021065	0					
ANR	1021080	Identifier	CHECK_PTR		1021065	0					
ANR	1021081	ArgumentList	"check_sljit_emit_jump ( compiler , type )"		1021065	1					
ANR	1021082	Argument	"check_sljit_emit_jump ( compiler , type )"		1021065	0					
ANR	1021083	CallExpression	"check_sljit_emit_jump ( compiler , type )"		1021065	0					
ANR	1021084	Callee	check_sljit_emit_jump		1021065	0					
ANR	1021085	Identifier	check_sljit_emit_jump		1021065	0					
ANR	1021086	ArgumentList	compiler		1021065	1					
ANR	1021087	Argument	compiler		1021065	0					
ANR	1021088	Identifier	compiler		1021065	0					
ANR	1021089	Argument	type		1021065	1					
ANR	1021090	Identifier	type		1021065	0					
ANR	1021091	ExpressionStatement	"jump = ( struct sljit_jump * ) ensure_abuf ( compiler , sizeof ( struct sljit_jump ) )"	2407:1:74528:74603	1021065	3	True				
ANR	1021092	AssignmentExpression	"jump = ( struct sljit_jump * ) ensure_abuf ( compiler , sizeof ( struct sljit_jump ) )"		1021065	0		=			
ANR	1021093	Identifier	jump		1021065	0					
ANR	1021094	CastExpression	"( struct sljit_jump * ) ensure_abuf ( compiler , sizeof ( struct sljit_jump ) )"		1021065	1					
ANR	1021095	CastTarget	struct sljit_jump *		1021065	0					
ANR	1021096	CallExpression	"ensure_abuf ( compiler , sizeof ( struct sljit_jump ) )"		1021065	1					
ANR	1021097	Callee	ensure_abuf		1021065	0					
ANR	1021098	Identifier	ensure_abuf		1021065	0					
ANR	1021099	ArgumentList	compiler		1021065	1					
ANR	1021100	Argument	compiler		1021065	0					
ANR	1021101	Identifier	compiler		1021065	0					
ANR	1021102	Argument	sizeof ( struct sljit_jump )		1021065	1					
ANR	1021103	SizeofExpression	sizeof ( struct sljit_jump )		1021065	0					
ANR	1021104	Sizeof	sizeof		1021065	0					
ANR	1021105	SizeofOperand	struct sljit_jump		1021065	1					
ANR	1021106	ExpressionStatement	PTR_FAIL_IF ( ! jump )	2408:1:74606:74624	1021065	4	True				
ANR	1021107	CallExpression	PTR_FAIL_IF ( ! jump )		1021065	0					
ANR	1021108	Callee	PTR_FAIL_IF		1021065	0					
ANR	1021109	Identifier	PTR_FAIL_IF		1021065	0					
ANR	1021110	ArgumentList	! jump		1021065	1					
ANR	1021111	Argument	! jump		1021065	0					
ANR	1021112	UnaryOperationExpression	! jump		1021065	0					
ANR	1021113	UnaryOperator	!		1021065	0					
ANR	1021114	Identifier	jump		1021065	1					
ANR	1021115	ExpressionStatement	"set_jump ( jump , compiler , type & SLJIT_REWRITABLE_JUMP )"	2409:1:74627:74681	1021065	5	True				
ANR	1021116	CallExpression	"set_jump ( jump , compiler , type & SLJIT_REWRITABLE_JUMP )"		1021065	0					
ANR	1021117	Callee	set_jump		1021065	0					
ANR	1021118	Identifier	set_jump		1021065	0					
ANR	1021119	ArgumentList	jump		1021065	1					
ANR	1021120	Argument	jump		1021065	0					
ANR	1021121	Identifier	jump		1021065	0					
ANR	1021122	Argument	compiler		1021065	1					
ANR	1021123	Identifier	compiler		1021065	0					
ANR	1021124	Argument	type & SLJIT_REWRITABLE_JUMP		1021065	2					
ANR	1021125	BitAndExpression	type & SLJIT_REWRITABLE_JUMP		1021065	0		&			
ANR	1021126	Identifier	type		1021065	0					
ANR	1021127	Identifier	SLJIT_REWRITABLE_JUMP		1021065	1					
ANR	1021128	ExpressionStatement	type &= 0xff	2410:1:74684:74696	1021065	6	True				
ANR	1021129	AssignmentExpression	type &= 0xff		1021065	0		&=			
ANR	1021130	Identifier	type		1021065	0					
ANR	1021131	PrimaryExpression	0xff		1021065	1					
ANR	1021132	IfStatement	if ( type >= SLJIT_FAST_CALL )		1021065	7					
ANR	1021133	Condition	type >= SLJIT_FAST_CALL	2414:5:74814:74836	1021065	0	True				
ANR	1021134	RelationalExpression	type >= SLJIT_FAST_CALL		1021065	0		>=			
ANR	1021135	Identifier	type		1021065	0					
ANR	1021136	Identifier	SLJIT_FAST_CALL		1021065	1					
ANR	1021137	ExpressionStatement	PTR_FAIL_IF ( prepare_blx ( compiler ) )	2415:2:74841:74875	1021065	1	True				
ANR	1021138	CallExpression	PTR_FAIL_IF ( prepare_blx ( compiler ) )		1021065	0					
ANR	1021139	Callee	PTR_FAIL_IF		1021065	0					
ANR	1021140	Identifier	PTR_FAIL_IF		1021065	0					
ANR	1021141	ArgumentList	prepare_blx ( compiler )		1021065	1					
ANR	1021142	Argument	prepare_blx ( compiler )		1021065	0					
ANR	1021143	CallExpression	prepare_blx ( compiler )		1021065	0					
ANR	1021144	Callee	prepare_blx		1021065	0					
ANR	1021145	Identifier	prepare_blx		1021065	0					
ANR	1021146	ArgumentList	compiler		1021065	1					
ANR	1021147	Argument	compiler		1021065	0					
ANR	1021148	Identifier	compiler		1021065	0					
ANR	1021149	ExpressionStatement	"PTR_FAIL_IF ( push_inst_with_unique_literal ( compiler , ( ( EMIT_DATA_TRANSFER ( WORD_DATA | LOAD_DATA , 1 , 0 , type <= SLJIT_JUMP ? TMP_PC : TMP_REG1 , TMP_PC , 0 ) ) & ~COND_MASK ) | get_cc ( type ) , 0 ) )"	2416:1:74878:75067	1021065	8	True				
ANR	1021150	CallExpression	"PTR_FAIL_IF ( push_inst_with_unique_literal ( compiler , ( ( EMIT_DATA_TRANSFER ( WORD_DATA | LOAD_DATA , 1 , 0 , type <= SLJIT_JUMP ? TMP_PC : TMP_REG1 , TMP_PC , 0 ) ) & ~COND_MASK ) | get_cc ( type ) , 0 ) )"		1021065	0					
ANR	1021151	Callee	PTR_FAIL_IF		1021065	0					
ANR	1021152	Identifier	PTR_FAIL_IF		1021065	0					
ANR	1021153	ArgumentList	"push_inst_with_unique_literal ( compiler , ( ( EMIT_DATA_TRANSFER ( WORD_DATA | LOAD_DATA , 1 , 0 , type <= SLJIT_JUMP ? TMP_PC : TMP_REG1 , TMP_PC , 0 ) ) & ~COND_MASK ) | get_cc ( type ) , 0 )"		1021065	1					
ANR	1021154	Argument	"push_inst_with_unique_literal ( compiler , ( ( EMIT_DATA_TRANSFER ( WORD_DATA | LOAD_DATA , 1 , 0 , type <= SLJIT_JUMP ? TMP_PC : TMP_REG1 , TMP_PC , 0 ) ) & ~COND_MASK ) | get_cc ( type ) , 0 )"		1021065	0					
ANR	1021155	CallExpression	"push_inst_with_unique_literal ( compiler , ( ( EMIT_DATA_TRANSFER ( WORD_DATA | LOAD_DATA , 1 , 0 , type <= SLJIT_JUMP ? TMP_PC : TMP_REG1 , TMP_PC , 0 ) ) & ~COND_MASK ) | get_cc ( type ) , 0 )"		1021065	0					
ANR	1021156	Callee	push_inst_with_unique_literal		1021065	0					
ANR	1021157	Identifier	push_inst_with_unique_literal		1021065	0					
ANR	1021158	ArgumentList	compiler		1021065	1					
ANR	1021159	Argument	compiler		1021065	0					
ANR	1021160	Identifier	compiler		1021065	0					
ANR	1021161	Argument	"( ( EMIT_DATA_TRANSFER ( WORD_DATA | LOAD_DATA , 1 , 0 , type <= SLJIT_JUMP ? TMP_PC : TMP_REG1 , TMP_PC , 0 ) ) & ~COND_MASK ) | get_cc ( type )"		1021065	1					
ANR	1021162	InclusiveOrExpression	"( ( EMIT_DATA_TRANSFER ( WORD_DATA | LOAD_DATA , 1 , 0 , type <= SLJIT_JUMP ? TMP_PC : TMP_REG1 , TMP_PC , 0 ) ) & ~COND_MASK ) | get_cc ( type )"		1021065	0		|			
ANR	1021163	BitAndExpression	"( EMIT_DATA_TRANSFER ( WORD_DATA | LOAD_DATA , 1 , 0 , type <= SLJIT_JUMP ? TMP_PC : TMP_REG1 , TMP_PC , 0 ) ) & ~COND_MASK"		1021065	0		&			
ANR	1021164	CallExpression	"EMIT_DATA_TRANSFER ( WORD_DATA | LOAD_DATA , 1 , 0 , type <= SLJIT_JUMP ? TMP_PC : TMP_REG1 , TMP_PC , 0 )"		1021065	0					
ANR	1021165	Callee	EMIT_DATA_TRANSFER		1021065	0					
ANR	1021166	Identifier	EMIT_DATA_TRANSFER		1021065	0					
ANR	1021167	ArgumentList	WORD_DATA | LOAD_DATA		1021065	1					
ANR	1021168	Argument	WORD_DATA | LOAD_DATA		1021065	0					
ANR	1021169	InclusiveOrExpression	WORD_DATA | LOAD_DATA		1021065	0		|			
ANR	1021170	Identifier	WORD_DATA		1021065	0					
ANR	1021171	Identifier	LOAD_DATA		1021065	1					
ANR	1021172	Argument	1		1021065	1					
ANR	1021173	PrimaryExpression	1		1021065	0					
ANR	1021174	Argument	0		1021065	2					
ANR	1021175	PrimaryExpression	0		1021065	0					
ANR	1021176	Argument	type <= SLJIT_JUMP ? TMP_PC : TMP_REG1		1021065	3					
ANR	1021177	ConditionalExpression	type <= SLJIT_JUMP ? TMP_PC : TMP_REG1		1021065	0					
ANR	1021178	Condition	type <= SLJIT_JUMP		1021065	0					
ANR	1021179	RelationalExpression	type <= SLJIT_JUMP		1021065	0		<=			
ANR	1021180	Identifier	type		1021065	0					
ANR	1021181	Identifier	SLJIT_JUMP		1021065	1					
ANR	1021182	Identifier	TMP_PC		1021065	1					
ANR	1021183	Identifier	TMP_REG1		1021065	2					
ANR	1021184	Argument	TMP_PC		1021065	4					
ANR	1021185	Identifier	TMP_PC		1021065	0					
ANR	1021186	Argument	0		1021065	5					
ANR	1021187	PrimaryExpression	0		1021065	0					
ANR	1021188	Identifier	~COND_MASK		1021065	1					
ANR	1021189	CallExpression	get_cc ( type )		1021065	1					
ANR	1021190	Callee	get_cc		1021065	0					
ANR	1021191	Identifier	get_cc		1021065	0					
ANR	1021192	ArgumentList	type		1021065	1					
ANR	1021193	Argument	type		1021065	0					
ANR	1021194	Identifier	type		1021065	0					
ANR	1021195	Argument	0		1021065	2					
ANR	1021196	PrimaryExpression	0		1021065	0					
ANR	1021197	IfStatement	if ( jump -> flags & SLJIT_REWRITABLE_JUMP )		1021065	9					
ANR	1021198	Condition	jump -> flags & SLJIT_REWRITABLE_JUMP	2419:5:75075:75109	1021065	0	True				
ANR	1021199	BitAndExpression	jump -> flags & SLJIT_REWRITABLE_JUMP		1021065	0		&			
ANR	1021200	PtrMemberAccess	jump -> flags		1021065	0					
ANR	1021201	Identifier	jump		1021065	0					
ANR	1021202	Identifier	flags		1021065	1					
ANR	1021203	Identifier	SLJIT_REWRITABLE_JUMP		1021065	1					
ANR	1021204	CompoundStatement		19:42:685:685	1021065	1					
ANR	1021205	ExpressionStatement	jump -> addr = compiler -> size	2420:2:75116:75143	1021065	0	True				
ANR	1021206	AssignmentExpression	jump -> addr = compiler -> size		1021065	0		=			
ANR	1021207	PtrMemberAccess	jump -> addr		1021065	0					
ANR	1021208	Identifier	jump		1021065	0					
ANR	1021209	Identifier	addr		1021065	1					
ANR	1021210	PtrMemberAccess	compiler -> size		1021065	1					
ANR	1021211	Identifier	compiler		1021065	0					
ANR	1021212	Identifier	size		1021065	1					
ANR	1021213	ExpressionStatement	compiler -> patches ++	2421:2:75147:75166	1021065	1	True				
ANR	1021214	PostIncDecOperationExpression	compiler -> patches ++		1021065	0					
ANR	1021215	PtrMemberAccess	compiler -> patches		1021065	0					
ANR	1021216	Identifier	compiler		1021065	0					
ANR	1021217	Identifier	patches		1021065	1					
ANR	1021218	IncDec	++		1021065	1					
ANR	1021219	IfStatement	if ( type >= SLJIT_FAST_CALL )		1021065	10					
ANR	1021220	Condition	type >= SLJIT_FAST_CALL	2424:5:75177:75199	1021065	0	True				
ANR	1021221	RelationalExpression	type >= SLJIT_FAST_CALL		1021065	0		>=			
ANR	1021222	Identifier	type		1021065	0					
ANR	1021223	Identifier	SLJIT_FAST_CALL		1021065	1					
ANR	1021224	CompoundStatement		24:30:775:775	1021065	1					
ANR	1021225	ExpressionStatement	jump -> flags |= IS_BL	2425:2:75206:75226	1021065	0	True				
ANR	1021226	AssignmentExpression	jump -> flags |= IS_BL		1021065	0		|=			
ANR	1021227	PtrMemberAccess	jump -> flags		1021065	0					
ANR	1021228	Identifier	jump		1021065	0					
ANR	1021229	Identifier	flags		1021065	1					
ANR	1021230	Identifier	IS_BL		1021065	1					
ANR	1021231	ExpressionStatement	PTR_FAIL_IF ( emit_blx ( compiler ) )	2426:2:75230:75261	1021065	1	True				
ANR	1021232	CallExpression	PTR_FAIL_IF ( emit_blx ( compiler ) )		1021065	0					
ANR	1021233	Callee	PTR_FAIL_IF		1021065	0					
ANR	1021234	Identifier	PTR_FAIL_IF		1021065	0					
ANR	1021235	ArgumentList	emit_blx ( compiler )		1021065	1					
ANR	1021236	Argument	emit_blx ( compiler )		1021065	0					
ANR	1021237	CallExpression	emit_blx ( compiler )		1021065	0					
ANR	1021238	Callee	emit_blx		1021065	0					
ANR	1021239	Identifier	emit_blx		1021065	0					
ANR	1021240	ArgumentList	compiler		1021065	1					
ANR	1021241	Argument	compiler		1021065	0					
ANR	1021242	Identifier	compiler		1021065	0					
ANR	1021243	IfStatement	if ( ! ( jump -> flags & SLJIT_REWRITABLE_JUMP ) )		1021065	11					
ANR	1021244	Condition	! ( jump -> flags & SLJIT_REWRITABLE_JUMP )	2429:5:75272:75309	1021065	0	True				
ANR	1021245	UnaryOperationExpression	! ( jump -> flags & SLJIT_REWRITABLE_JUMP )		1021065	0					
ANR	1021246	UnaryOperator	!		1021065	0					
ANR	1021247	BitAndExpression	jump -> flags & SLJIT_REWRITABLE_JUMP		1021065	1		&			
ANR	1021248	PtrMemberAccess	jump -> flags		1021065	0					
ANR	1021249	Identifier	jump		1021065	0					
ANR	1021250	Identifier	flags		1021065	1					
ANR	1021251	Identifier	SLJIT_REWRITABLE_JUMP		1021065	1					
ANR	1021252	ExpressionStatement	jump -> addr = compiler -> size	2430:2:75314:75341	1021065	1	True				
ANR	1021253	AssignmentExpression	jump -> addr = compiler -> size		1021065	0		=			
ANR	1021254	PtrMemberAccess	jump -> addr		1021065	0					
ANR	1021255	Identifier	jump		1021065	0					
ANR	1021256	Identifier	addr		1021065	1					
ANR	1021257	PtrMemberAccess	compiler -> size		1021065	1					
ANR	1021258	Identifier	compiler		1021065	0					
ANR	1021259	Identifier	size		1021065	1					
ANR	1021260	ReturnStatement	return jump ;	2438:1:75603:75614	1021065	12	True				
ANR	1021261	Identifier	jump		1021065	0					
ANR	1021262	ReturnType	struct sljit_jump *		1021065	1					
ANR	1021263	Identifier	sljit_emit_jump		1021065	2					
ANR	1021264	ParameterList	"struct sljit_compiler * compiler , sljit_si type"		1021065	3					
ANR	1021265	Parameter	struct sljit_compiler * compiler	2400:60:74378:74408	1021065	0	True				
ANR	1021266	ParameterType	struct sljit_compiler *		1021065	0					
ANR	1021267	Identifier	compiler		1021065	1					
ANR	1021268	Parameter	sljit_si type	2400:93:74411:74423	1021065	1	True				
ANR	1021269	ParameterType	sljit_si		1021065	0					
ANR	1021270	Identifier	type		1021065	1					
ANR	1021271	CFGEntryNode	ENTRY		1021065		True				
ANR	1021272	CFGExitNode	EXIT		1021065		True				
ANR	1021273	Symbol	SLJIT_JUMP		1021065						
ANR	1021274	Symbol	TMP_PC		1021065						
ANR	1021275	Symbol	TMP_REG1		1021065						
ANR	1021276	Symbol	LOAD_DATA		1021065						
ANR	1021277	Symbol	* jump		1021065						
ANR	1021278	Symbol	compiler -> patches		1021065						
ANR	1021279	Symbol	jump -> flags		1021065						
ANR	1021280	Symbol	* compiler		1021065						
ANR	1021281	Symbol	type		1021065						
ANR	1021282	Symbol	push_inst_with_unique_literal		1021065						
ANR	1021283	Symbol	IS_BL		1021065						
ANR	1021284	Symbol	SLJIT_FAST_CALL		1021065						
ANR	1021285	Symbol	emit_blx		1021065						
ANR	1021286	Symbol	SLJIT_REWRITABLE_JUMP		1021065						
ANR	1021287	Symbol	compiler		1021065						
ANR	1021288	Symbol	WORD_DATA		1021065						
ANR	1021289	Symbol	jump		1021065						
ANR	1021290	Symbol	get_cc		1021065						
ANR	1021291	Symbol	jump -> addr		1021065						
ANR	1021292	Symbol	ensure_abuf		1021065						
ANR	1021293	Symbol	prepare_blx		1021065						
ANR	1021294	Symbol	~COND_MASK		1021065						
ANR	1021295	Symbol	compiler -> size		1021065						
ANR	1021296	Symbol	check_sljit_emit_jump		1021065						
ANR	1021297	Symbol	EMIT_DATA_TRANSFER		1021065						
ANR	1021298	Function	sljit_emit_ijump	2441:0:75619:76981							
ANR	1021299	FunctionDef	"sljit_emit_ijump (struct sljit_compiler * compiler , sljit_si type , sljit_si src , sljit_sw srcw)"		1021298	0					
ANR	1021300	CompoundStatement		2442:0:75747:76981	1021298	0					
ANR	1021301	IdentifierDeclStatement	struct sljit_jump * jump ;	2443:1:75750:75773	1021298	0	True				
ANR	1021302	IdentifierDecl	* jump		1021298	0					
ANR	1021303	IdentifierDeclType	struct sljit_jump *		1021298	0					
ANR	1021304	Identifier	jump		1021298	1					
ANR	1021305	ExpressionStatement	CHECK_ERROR ( )	2445:1:75777:75790	1021298	1	True				
ANR	1021306	CallExpression	CHECK_ERROR ( )		1021298	0					
ANR	1021307	Callee	CHECK_ERROR		1021298	0					
ANR	1021308	Identifier	CHECK_ERROR		1021298	0					
ANR	1021309	ArgumentList			1021298	1					
ANR	1021310	ExpressionStatement	"CHECK ( check_sljit_emit_ijump ( compiler , type , src , srcw ) )"	2446:1:75793:75849	1021298	2	True				
ANR	1021311	CallExpression	"CHECK ( check_sljit_emit_ijump ( compiler , type , src , srcw ) )"		1021298	0					
ANR	1021312	Callee	CHECK		1021298	0					
ANR	1021313	Identifier	CHECK		1021298	0					
ANR	1021314	ArgumentList	"check_sljit_emit_ijump ( compiler , type , src , srcw )"		1021298	1					
ANR	1021315	Argument	"check_sljit_emit_ijump ( compiler , type , src , srcw )"		1021298	0					
ANR	1021316	CallExpression	"check_sljit_emit_ijump ( compiler , type , src , srcw )"		1021298	0					
ANR	1021317	Callee	check_sljit_emit_ijump		1021298	0					
ANR	1021318	Identifier	check_sljit_emit_ijump		1021298	0					
ANR	1021319	ArgumentList	compiler		1021298	1					
ANR	1021320	Argument	compiler		1021298	0					
ANR	1021321	Identifier	compiler		1021298	0					
ANR	1021322	Argument	type		1021298	1					
ANR	1021323	Identifier	type		1021298	0					
ANR	1021324	Argument	src		1021298	2					
ANR	1021325	Identifier	src		1021298	0					
ANR	1021326	Argument	srcw		1021298	3					
ANR	1021327	Identifier	srcw		1021298	0					
ANR	1021328	ExpressionStatement	"ADJUST_LOCAL_OFFSET ( src , srcw )"	2447:1:75852:75882	1021298	3	True				
ANR	1021329	CallExpression	"ADJUST_LOCAL_OFFSET ( src , srcw )"		1021298	0					
ANR	1021330	Callee	ADJUST_LOCAL_OFFSET		1021298	0					
ANR	1021331	Identifier	ADJUST_LOCAL_OFFSET		1021298	0					
ANR	1021332	ArgumentList	src		1021298	1					
ANR	1021333	Argument	src		1021298	0					
ANR	1021334	Identifier	src		1021298	0					
ANR	1021335	Argument	srcw		1021298	1					
ANR	1021336	Identifier	srcw		1021298	0					
ANR	1021337	IfStatement	if ( ! ( src & SLJIT_IMM ) )		1021298	4					
ANR	1021338	Condition	! ( src & SLJIT_IMM )	2450:5:75943:75960	1021298	0	True				
ANR	1021339	UnaryOperationExpression	! ( src & SLJIT_IMM )		1021298	0					
ANR	1021340	UnaryOperator	!		1021298	0					
ANR	1021341	BitAndExpression	src & SLJIT_IMM		1021298	1		&			
ANR	1021342	Identifier	src		1021298	0					
ANR	1021343	Identifier	SLJIT_IMM		1021298	1					
ANR	1021344	CompoundStatement		9:25:215:215	1021298	1					
ANR	1021345	IfStatement	if ( FAST_IS_REG ( src ) )		1021298	0					
ANR	1021346	Condition	FAST_IS_REG ( src )	2451:6:75971:75986	1021298	0	True				
ANR	1021347	CallExpression	FAST_IS_REG ( src )		1021298	0					
ANR	1021348	Callee	FAST_IS_REG		1021298	0					
ANR	1021349	Identifier	FAST_IS_REG		1021298	0					
ANR	1021350	ArgumentList	src		1021298	1					
ANR	1021351	Argument	src		1021298	0					
ANR	1021352	Identifier	src		1021298	0					
ANR	1021353	ReturnStatement	"return push_inst ( compiler , ( type <= SLJIT_JUMP ? BX : BLX ) | RM ( src ) ) ;"	2452:3:75992:76061	1021298	1	True				
ANR	1021354	CallExpression	"push_inst ( compiler , ( type <= SLJIT_JUMP ? BX : BLX ) | RM ( src ) )"		1021298	0					
ANR	1021355	Callee	push_inst		1021298	0					
ANR	1021356	Identifier	push_inst		1021298	0					
ANR	1021357	ArgumentList	compiler		1021298	1					
ANR	1021358	Argument	compiler		1021298	0					
ANR	1021359	Identifier	compiler		1021298	0					
ANR	1021360	Argument	( type <= SLJIT_JUMP ? BX : BLX ) | RM ( src )		1021298	1					
ANR	1021361	InclusiveOrExpression	( type <= SLJIT_JUMP ? BX : BLX ) | RM ( src )		1021298	0		|			
ANR	1021362	ConditionalExpression	type <= SLJIT_JUMP ? BX : BLX		1021298	0					
ANR	1021363	Condition	type <= SLJIT_JUMP		1021298	0					
ANR	1021364	RelationalExpression	type <= SLJIT_JUMP		1021298	0		<=			
ANR	1021365	Identifier	type		1021298	0					
ANR	1021366	Identifier	SLJIT_JUMP		1021298	1					
ANR	1021367	Identifier	BX		1021298	1					
ANR	1021368	Identifier	BLX		1021298	2					
ANR	1021369	CallExpression	RM ( src )		1021298	1					
ANR	1021370	Callee	RM		1021298	0					
ANR	1021371	Identifier	RM		1021298	0					
ANR	1021372	ArgumentList	src		1021298	1					
ANR	1021373	Argument	src		1021298	0					
ANR	1021374	Identifier	src		1021298	0					
ANR	1021375	ExpressionStatement	SLJIT_ASSERT ( src & SLJIT_MEM )	2454:2:76066:76095	1021298	1	True				
ANR	1021376	CallExpression	SLJIT_ASSERT ( src & SLJIT_MEM )		1021298	0					
ANR	1021377	Callee	SLJIT_ASSERT		1021298	0					
ANR	1021378	Identifier	SLJIT_ASSERT		1021298	0					
ANR	1021379	ArgumentList	src & SLJIT_MEM		1021298	1					
ANR	1021380	Argument	src & SLJIT_MEM		1021298	0					
ANR	1021381	BitAndExpression	src & SLJIT_MEM		1021298	0		&			
ANR	1021382	Identifier	src		1021298	0					
ANR	1021383	Identifier	SLJIT_MEM		1021298	1					
ANR	1021384	ExpressionStatement	"FAIL_IF ( emit_op_mem ( compiler , WORD_DATA | LOAD_DATA , TMP_REG2 , src , srcw ) )"	2455:2:76099:76173	1021298	2	True				
ANR	1021385	CallExpression	"FAIL_IF ( emit_op_mem ( compiler , WORD_DATA | LOAD_DATA , TMP_REG2 , src , srcw ) )"		1021298	0					
ANR	1021386	Callee	FAIL_IF		1021298	0					
ANR	1021387	Identifier	FAIL_IF		1021298	0					
ANR	1021388	ArgumentList	"emit_op_mem ( compiler , WORD_DATA | LOAD_DATA , TMP_REG2 , src , srcw )"		1021298	1					
ANR	1021389	Argument	"emit_op_mem ( compiler , WORD_DATA | LOAD_DATA , TMP_REG2 , src , srcw )"		1021298	0					
ANR	1021390	CallExpression	"emit_op_mem ( compiler , WORD_DATA | LOAD_DATA , TMP_REG2 , src , srcw )"		1021298	0					
ANR	1021391	Callee	emit_op_mem		1021298	0					
ANR	1021392	Identifier	emit_op_mem		1021298	0					
ANR	1021393	ArgumentList	compiler		1021298	1					
ANR	1021394	Argument	compiler		1021298	0					
ANR	1021395	Identifier	compiler		1021298	0					
ANR	1021396	Argument	WORD_DATA | LOAD_DATA		1021298	1					
ANR	1021397	InclusiveOrExpression	WORD_DATA | LOAD_DATA		1021298	0		|			
ANR	1021398	Identifier	WORD_DATA		1021298	0					
ANR	1021399	Identifier	LOAD_DATA		1021298	1					
ANR	1021400	Argument	TMP_REG2		1021298	2					
ANR	1021401	Identifier	TMP_REG2		1021298	0					
ANR	1021402	Argument	src		1021298	3					
ANR	1021403	Identifier	src		1021298	0					
ANR	1021404	Argument	srcw		1021298	4					
ANR	1021405	Identifier	srcw		1021298	0					
ANR	1021406	ReturnStatement	"return push_inst ( compiler , ( type <= SLJIT_JUMP ? BX : BLX ) | RM ( TMP_REG2 ) ) ;"	2456:2:76177:76251	1021298	3	True				
ANR	1021407	CallExpression	"push_inst ( compiler , ( type <= SLJIT_JUMP ? BX : BLX ) | RM ( TMP_REG2 ) )"		1021298	0					
ANR	1021408	Callee	push_inst		1021298	0					
ANR	1021409	Identifier	push_inst		1021298	0					
ANR	1021410	ArgumentList	compiler		1021298	1					
ANR	1021411	Argument	compiler		1021298	0					
ANR	1021412	Identifier	compiler		1021298	0					
ANR	1021413	Argument	( type <= SLJIT_JUMP ? BX : BLX ) | RM ( TMP_REG2 )		1021298	1					
ANR	1021414	InclusiveOrExpression	( type <= SLJIT_JUMP ? BX : BLX ) | RM ( TMP_REG2 )		1021298	0		|			
ANR	1021415	ConditionalExpression	type <= SLJIT_JUMP ? BX : BLX		1021298	0					
ANR	1021416	Condition	type <= SLJIT_JUMP		1021298	0					
ANR	1021417	RelationalExpression	type <= SLJIT_JUMP		1021298	0		<=			
ANR	1021418	Identifier	type		1021298	0					
ANR	1021419	Identifier	SLJIT_JUMP		1021298	1					
ANR	1021420	Identifier	BX		1021298	1					
ANR	1021421	Identifier	BLX		1021298	2					
ANR	1021422	CallExpression	RM ( TMP_REG2 )		1021298	1					
ANR	1021423	Callee	RM		1021298	0					
ANR	1021424	Identifier	RM		1021298	0					
ANR	1021425	ArgumentList	TMP_REG2		1021298	1					
ANR	1021426	Argument	TMP_REG2		1021298	0					
ANR	1021427	Identifier	TMP_REG2		1021298	0					
ANR	1021428	ExpressionStatement	"jump = ( struct sljit_jump * ) ensure_abuf ( compiler , sizeof ( struct sljit_jump ) )"	2459:1:76258:76333	1021298	5	True				
ANR	1021429	AssignmentExpression	"jump = ( struct sljit_jump * ) ensure_abuf ( compiler , sizeof ( struct sljit_jump ) )"		1021298	0		=			
ANR	1021430	Identifier	jump		1021298	0					
ANR	1021431	CastExpression	"( struct sljit_jump * ) ensure_abuf ( compiler , sizeof ( struct sljit_jump ) )"		1021298	1					
ANR	1021432	CastTarget	struct sljit_jump *		1021298	0					
ANR	1021433	CallExpression	"ensure_abuf ( compiler , sizeof ( struct sljit_jump ) )"		1021298	1					
ANR	1021434	Callee	ensure_abuf		1021298	0					
ANR	1021435	Identifier	ensure_abuf		1021298	0					
ANR	1021436	ArgumentList	compiler		1021298	1					
ANR	1021437	Argument	compiler		1021298	0					
ANR	1021438	Identifier	compiler		1021298	0					
ANR	1021439	Argument	sizeof ( struct sljit_jump )		1021298	1					
ANR	1021440	SizeofExpression	sizeof ( struct sljit_jump )		1021298	0					
ANR	1021441	Sizeof	sizeof		1021298	0					
ANR	1021442	SizeofOperand	struct sljit_jump		1021298	1					
ANR	1021443	ExpressionStatement	FAIL_IF ( ! jump )	2460:1:76336:76350	1021298	6	True				
ANR	1021444	CallExpression	FAIL_IF ( ! jump )		1021298	0					
ANR	1021445	Callee	FAIL_IF		1021298	0					
ANR	1021446	Identifier	FAIL_IF		1021298	0					
ANR	1021447	ArgumentList	! jump		1021298	1					
ANR	1021448	Argument	! jump		1021298	0					
ANR	1021449	UnaryOperationExpression	! jump		1021298	0					
ANR	1021450	UnaryOperator	!		1021298	0					
ANR	1021451	Identifier	jump		1021298	1					
ANR	1021452	ExpressionStatement	"set_jump ( jump , compiler , JUMP_ADDR | ( ( type >= SLJIT_FAST_CALL ) ? IS_BL : 0 ) )"	2461:1:76353:76430	1021298	7	True				
ANR	1021453	CallExpression	"set_jump ( jump , compiler , JUMP_ADDR | ( ( type >= SLJIT_FAST_CALL ) ? IS_BL : 0 ) )"		1021298	0					
ANR	1021454	Callee	set_jump		1021298	0					
ANR	1021455	Identifier	set_jump		1021298	0					
ANR	1021456	ArgumentList	jump		1021298	1					
ANR	1021457	Argument	jump		1021298	0					
ANR	1021458	Identifier	jump		1021298	0					
ANR	1021459	Argument	compiler		1021298	1					
ANR	1021460	Identifier	compiler		1021298	0					
ANR	1021461	Argument	JUMP_ADDR | ( ( type >= SLJIT_FAST_CALL ) ? IS_BL : 0 )		1021298	2					
ANR	1021462	InclusiveOrExpression	JUMP_ADDR | ( ( type >= SLJIT_FAST_CALL ) ? IS_BL : 0 )		1021298	0		|			
ANR	1021463	Identifier	JUMP_ADDR		1021298	0					
ANR	1021464	ConditionalExpression	( type >= SLJIT_FAST_CALL ) ? IS_BL : 0		1021298	1					
ANR	1021465	Condition	type >= SLJIT_FAST_CALL		1021298	0					
ANR	1021466	RelationalExpression	type >= SLJIT_FAST_CALL		1021298	0		>=			
ANR	1021467	Identifier	type		1021298	0					
ANR	1021468	Identifier	SLJIT_FAST_CALL		1021298	1					
ANR	1021469	Identifier	IS_BL		1021298	1					
ANR	1021470	PrimaryExpression	0		1021298	2					
ANR	1021471	ExpressionStatement	jump -> u . target = srcw	2462:1:76433:76454	1021298	8	True				
ANR	1021472	AssignmentExpression	jump -> u . target = srcw		1021298	0		=			
ANR	1021473	MemberAccess	jump -> u . target		1021298	0					
ANR	1021474	PtrMemberAccess	jump -> u		1021298	0					
ANR	1021475	Identifier	jump		1021298	0					
ANR	1021476	Identifier	u		1021298	1					
ANR	1021477	Identifier	target		1021298	1					
ANR	1021478	Identifier	srcw		1021298	1					
ANR	1021479	IfStatement	if ( type >= SLJIT_FAST_CALL )		1021298	9					
ANR	1021480	Condition	type >= SLJIT_FAST_CALL	2465:5:76519:76541	1021298	0	True				
ANR	1021481	RelationalExpression	type >= SLJIT_FAST_CALL		1021298	0		>=			
ANR	1021482	Identifier	type		1021298	0					
ANR	1021483	Identifier	SLJIT_FAST_CALL		1021298	1					
ANR	1021484	ExpressionStatement	FAIL_IF ( prepare_blx ( compiler ) )	2466:2:76546:76576	1021298	1	True				
ANR	1021485	CallExpression	FAIL_IF ( prepare_blx ( compiler ) )		1021298	0					
ANR	1021486	Callee	FAIL_IF		1021298	0					
ANR	1021487	Identifier	FAIL_IF		1021298	0					
ANR	1021488	ArgumentList	prepare_blx ( compiler )		1021298	1					
ANR	1021489	Argument	prepare_blx ( compiler )		1021298	0					
ANR	1021490	CallExpression	prepare_blx ( compiler )		1021298	0					
ANR	1021491	Callee	prepare_blx		1021298	0					
ANR	1021492	Identifier	prepare_blx		1021298	0					
ANR	1021493	ArgumentList	compiler		1021298	1					
ANR	1021494	Argument	compiler		1021298	0					
ANR	1021495	Identifier	compiler		1021298	0					
ANR	1021496	ExpressionStatement	"FAIL_IF ( push_inst_with_unique_literal ( compiler , EMIT_DATA_TRANSFER ( WORD_DATA | LOAD_DATA , 1 , 0 , type <= SLJIT_JUMP ? TMP_PC : TMP_REG1 , TMP_PC , 0 ) , 0 ) )"	2467:1:76579:76730	1021298	10	True				
ANR	1021497	CallExpression	"FAIL_IF ( push_inst_with_unique_literal ( compiler , EMIT_DATA_TRANSFER ( WORD_DATA | LOAD_DATA , 1 , 0 , type <= SLJIT_JUMP ? TMP_PC : TMP_REG1 , TMP_PC , 0 ) , 0 ) )"		1021298	0					
ANR	1021498	Callee	FAIL_IF		1021298	0					
ANR	1021499	Identifier	FAIL_IF		1021298	0					
ANR	1021500	ArgumentList	"push_inst_with_unique_literal ( compiler , EMIT_DATA_TRANSFER ( WORD_DATA | LOAD_DATA , 1 , 0 , type <= SLJIT_JUMP ? TMP_PC : TMP_REG1 , TMP_PC , 0 ) , 0 )"		1021298	1					
ANR	1021501	Argument	"push_inst_with_unique_literal ( compiler , EMIT_DATA_TRANSFER ( WORD_DATA | LOAD_DATA , 1 , 0 , type <= SLJIT_JUMP ? TMP_PC : TMP_REG1 , TMP_PC , 0 ) , 0 )"		1021298	0					
ANR	1021502	CallExpression	"push_inst_with_unique_literal ( compiler , EMIT_DATA_TRANSFER ( WORD_DATA | LOAD_DATA , 1 , 0 , type <= SLJIT_JUMP ? TMP_PC : TMP_REG1 , TMP_PC , 0 ) , 0 )"		1021298	0					
ANR	1021503	Callee	push_inst_with_unique_literal		1021298	0					
ANR	1021504	Identifier	push_inst_with_unique_literal		1021298	0					
ANR	1021505	ArgumentList	compiler		1021298	1					
ANR	1021506	Argument	compiler		1021298	0					
ANR	1021507	Identifier	compiler		1021298	0					
ANR	1021508	Argument	"EMIT_DATA_TRANSFER ( WORD_DATA | LOAD_DATA , 1 , 0 , type <= SLJIT_JUMP ? TMP_PC : TMP_REG1 , TMP_PC , 0 )"		1021298	1					
ANR	1021509	CallExpression	"EMIT_DATA_TRANSFER ( WORD_DATA | LOAD_DATA , 1 , 0 , type <= SLJIT_JUMP ? TMP_PC : TMP_REG1 , TMP_PC , 0 )"		1021298	0					
ANR	1021510	Callee	EMIT_DATA_TRANSFER		1021298	0					
ANR	1021511	Identifier	EMIT_DATA_TRANSFER		1021298	0					
ANR	1021512	ArgumentList	WORD_DATA | LOAD_DATA		1021298	1					
ANR	1021513	Argument	WORD_DATA | LOAD_DATA		1021298	0					
ANR	1021514	InclusiveOrExpression	WORD_DATA | LOAD_DATA		1021298	0		|			
ANR	1021515	Identifier	WORD_DATA		1021298	0					
ANR	1021516	Identifier	LOAD_DATA		1021298	1					
ANR	1021517	Argument	1		1021298	1					
ANR	1021518	PrimaryExpression	1		1021298	0					
ANR	1021519	Argument	0		1021298	2					
ANR	1021520	PrimaryExpression	0		1021298	0					
ANR	1021521	Argument	type <= SLJIT_JUMP ? TMP_PC : TMP_REG1		1021298	3					
ANR	1021522	ConditionalExpression	type <= SLJIT_JUMP ? TMP_PC : TMP_REG1		1021298	0					
ANR	1021523	Condition	type <= SLJIT_JUMP		1021298	0					
ANR	1021524	RelationalExpression	type <= SLJIT_JUMP		1021298	0		<=			
ANR	1021525	Identifier	type		1021298	0					
ANR	1021526	Identifier	SLJIT_JUMP		1021298	1					
ANR	1021527	Identifier	TMP_PC		1021298	1					
ANR	1021528	Identifier	TMP_REG1		1021298	2					
ANR	1021529	Argument	TMP_PC		1021298	4					
ANR	1021530	Identifier	TMP_PC		1021298	0					
ANR	1021531	Argument	0		1021298	5					
ANR	1021532	PrimaryExpression	0		1021298	0					
ANR	1021533	Argument	0		1021298	2					
ANR	1021534	PrimaryExpression	0		1021298	0					
ANR	1021535	IfStatement	if ( type >= SLJIT_FAST_CALL )		1021298	11					
ANR	1021536	Condition	type >= SLJIT_FAST_CALL	2468:5:76737:76759	1021298	0	True				
ANR	1021537	RelationalExpression	type >= SLJIT_FAST_CALL		1021298	0		>=			
ANR	1021538	Identifier	type		1021298	0					
ANR	1021539	Identifier	SLJIT_FAST_CALL		1021298	1					
ANR	1021540	ExpressionStatement	FAIL_IF ( emit_blx ( compiler ) )	2469:2:76764:76791	1021298	1	True				
ANR	1021541	CallExpression	FAIL_IF ( emit_blx ( compiler ) )		1021298	0					
ANR	1021542	Callee	FAIL_IF		1021298	0					
ANR	1021543	Identifier	FAIL_IF		1021298	0					
ANR	1021544	ArgumentList	emit_blx ( compiler )		1021298	1					
ANR	1021545	Argument	emit_blx ( compiler )		1021298	0					
ANR	1021546	CallExpression	emit_blx ( compiler )		1021298	0					
ANR	1021547	Callee	emit_blx		1021298	0					
ANR	1021548	Identifier	emit_blx		1021298	0					
ANR	1021549	ArgumentList	compiler		1021298	1					
ANR	1021550	Argument	compiler		1021298	0					
ANR	1021551	Identifier	compiler		1021298	0					
ANR	1021552	ExpressionStatement	jump -> addr = compiler -> size	2474:1:76929:76956	1021298	12	True				
ANR	1021553	AssignmentExpression	jump -> addr = compiler -> size		1021298	0		=			
ANR	1021554	PtrMemberAccess	jump -> addr		1021298	0					
ANR	1021555	Identifier	jump		1021298	0					
ANR	1021556	Identifier	addr		1021298	1					
ANR	1021557	PtrMemberAccess	compiler -> size		1021298	1					
ANR	1021558	Identifier	compiler		1021298	0					
ANR	1021559	Identifier	size		1021298	1					
ANR	1021560	ReturnStatement	return SLJIT_SUCCESS ;	2475:1:76959:76979	1021298	13	True				
ANR	1021561	Identifier	SLJIT_SUCCESS		1021298	0					
ANR	1021562	ReturnType	SLJIT_API_FUNC_ATTRIBUTE sljit_si		1021298	1					
ANR	1021563	Identifier	sljit_emit_ijump		1021298	2					
ANR	1021564	ParameterList	"struct sljit_compiler * compiler , sljit_si type , sljit_si src , sljit_sw srcw"		1021298	3					
ANR	1021565	Parameter	struct sljit_compiler * compiler	2441:51:75670:75700	1021298	0	True				
ANR	1021566	ParameterType	struct sljit_compiler *		1021298	0					
ANR	1021567	Identifier	compiler		1021298	1					
ANR	1021568	Parameter	sljit_si type	2441:84:75703:75715	1021298	1	True				
ANR	1021569	ParameterType	sljit_si		1021298	0					
ANR	1021570	Identifier	type		1021298	1					
ANR	1021571	Parameter	sljit_si src	2441:99:75718:75729	1021298	2	True				
ANR	1021572	ParameterType	sljit_si		1021298	0					
ANR	1021573	Identifier	src		1021298	1					
ANR	1021574	Parameter	sljit_sw srcw	2441:113:75732:75744	1021298	3	True				
ANR	1021575	ParameterType	sljit_sw		1021298	0					
ANR	1021576	Identifier	srcw		1021298	1					
ANR	1021577	CFGEntryNode	ENTRY		1021298		True				
ANR	1021578	CFGExitNode	EXIT		1021298		True				
ANR	1021579	Symbol	check_sljit_emit_ijump		1021298						
ANR	1021580	Symbol	TMP_REG2		1021298						
ANR	1021581	Symbol	SLJIT_JUMP		1021298						
ANR	1021582	Symbol	TMP_PC		1021298						
ANR	1021583	Symbol	TMP_REG1		1021298						
ANR	1021584	Symbol	LOAD_DATA		1021298						
ANR	1021585	Symbol	* jump		1021298						
ANR	1021586	Symbol	jump -> u		1021298						
ANR	1021587	Symbol	SLJIT_MEM		1021298						
ANR	1021588	Symbol	JUMP_ADDR		1021298						
ANR	1021589	Symbol	* compiler		1021298						
ANR	1021590	Symbol	type		1021298						
ANR	1021591	Symbol	push_inst_with_unique_literal		1021298						
ANR	1021592	Symbol	BLX		1021298						
ANR	1021593	Symbol	SLJIT_IMM		1021298						
ANR	1021594	Symbol	IS_BL		1021298						
ANR	1021595	Symbol	BX		1021298						
ANR	1021596	Symbol	SLJIT_FAST_CALL		1021298						
ANR	1021597	Symbol	emit_blx		1021298						
ANR	1021598	Symbol	compiler		1021298						
ANR	1021599	Symbol	WORD_DATA		1021298						
ANR	1021600	Symbol	jump		1021298						
ANR	1021601	Symbol	push_inst		1021298						
ANR	1021602	Symbol	FAST_IS_REG		1021298						
ANR	1021603	Symbol	src		1021298						
ANR	1021604	Symbol	srcw		1021298						
ANR	1021605	Symbol	emit_op_mem		1021298						
ANR	1021606	Symbol	jump -> addr		1021298						
ANR	1021607	Symbol	SLJIT_SUCCESS		1021298						
ANR	1021608	Symbol	ensure_abuf		1021298						
ANR	1021609	Symbol	prepare_blx		1021298						
ANR	1021610	Symbol	compiler -> size		1021298						
ANR	1021611	Symbol	jump -> u . target		1021298						
ANR	1021612	Symbol	RM		1021298						
ANR	1021613	Symbol	EMIT_DATA_TRANSFER		1021298						
ANR	1021614	Function	sljit_emit_op_flags	2478:0:76984:79163							
ANR	1021615	FunctionDef	"sljit_emit_op_flags (struct sljit_compiler * compiler , sljit_si op , sljit_si dst , sljit_sw dstw , sljit_si src , sljit_sw srcw , sljit_si type)"		1021614	0					
ANR	1021616	CompoundStatement		2482:0:77160:79163	1021614	0					
ANR	1021617	IdentifierDeclStatement	"sljit_si dst_r , flags = GET_ALL_FLAGS ( op ) ;"	2483:1:77163:77204	1021614	0	True				
ANR	1021618	IdentifierDecl	dst_r		1021614	0					
ANR	1021619	IdentifierDeclType	sljit_si		1021614	0					
ANR	1021620	Identifier	dst_r		1021614	1					
ANR	1021621	IdentifierDecl	flags = GET_ALL_FLAGS ( op )		1021614	1					
ANR	1021622	IdentifierDeclType	sljit_si		1021614	0					
ANR	1021623	Identifier	flags		1021614	1					
ANR	1021624	AssignmentExpression	flags = GET_ALL_FLAGS ( op )		1021614	2		=			
ANR	1021625	Identifier	flags		1021614	0					
ANR	1021626	CallExpression	GET_ALL_FLAGS ( op )		1021614	1					
ANR	1021627	Callee	GET_ALL_FLAGS		1021614	0					
ANR	1021628	Identifier	GET_ALL_FLAGS		1021614	0					
ANR	1021629	ArgumentList	op		1021614	1					
ANR	1021630	Argument	op		1021614	0					
ANR	1021631	Identifier	op		1021614	0					
ANR	1021632	IdentifierDeclStatement	"sljit_uw cc , ins ;"	2484:1:77207:77223	1021614	1	True				
ANR	1021633	IdentifierDecl	cc		1021614	0					
ANR	1021634	IdentifierDeclType	sljit_uw		1021614	0					
ANR	1021635	Identifier	cc		1021614	1					
ANR	1021636	IdentifierDecl	ins		1021614	1					
ANR	1021637	IdentifierDeclType	sljit_uw		1021614	0					
ANR	1021638	Identifier	ins		1021614	1					
ANR	1021639	ExpressionStatement	CHECK_ERROR ( )	2486:1:77227:77240	1021614	2	True				
ANR	1021640	CallExpression	CHECK_ERROR ( )		1021614	0					
ANR	1021641	Callee	CHECK_ERROR		1021614	0					
ANR	1021642	Identifier	CHECK_ERROR		1021614	0					
ANR	1021643	ArgumentList			1021614	1					
ANR	1021644	ExpressionStatement	"CHECK ( check_sljit_emit_op_flags ( compiler , op , dst , dstw , src , srcw , type ) )"	2487:1:77243:77317	1021614	3	True				
ANR	1021645	CallExpression	"CHECK ( check_sljit_emit_op_flags ( compiler , op , dst , dstw , src , srcw , type ) )"		1021614	0					
ANR	1021646	Callee	CHECK		1021614	0					
ANR	1021647	Identifier	CHECK		1021614	0					
ANR	1021648	ArgumentList	"check_sljit_emit_op_flags ( compiler , op , dst , dstw , src , srcw , type )"		1021614	1					
ANR	1021649	Argument	"check_sljit_emit_op_flags ( compiler , op , dst , dstw , src , srcw , type )"		1021614	0					
ANR	1021650	CallExpression	"check_sljit_emit_op_flags ( compiler , op , dst , dstw , src , srcw , type )"		1021614	0					
ANR	1021651	Callee	check_sljit_emit_op_flags		1021614	0					
ANR	1021652	Identifier	check_sljit_emit_op_flags		1021614	0					
ANR	1021653	ArgumentList	compiler		1021614	1					
ANR	1021654	Argument	compiler		1021614	0					
ANR	1021655	Identifier	compiler		1021614	0					
ANR	1021656	Argument	op		1021614	1					
ANR	1021657	Identifier	op		1021614	0					
ANR	1021658	Argument	dst		1021614	2					
ANR	1021659	Identifier	dst		1021614	0					
ANR	1021660	Argument	dstw		1021614	3					
ANR	1021661	Identifier	dstw		1021614	0					
ANR	1021662	Argument	src		1021614	4					
ANR	1021663	Identifier	src		1021614	0					
ANR	1021664	Argument	srcw		1021614	5					
ANR	1021665	Identifier	srcw		1021614	0					
ANR	1021666	Argument	type		1021614	6					
ANR	1021667	Identifier	type		1021614	0					
ANR	1021668	ExpressionStatement	"ADJUST_LOCAL_OFFSET ( dst , dstw )"	2488:1:77320:77350	1021614	4	True				
ANR	1021669	CallExpression	"ADJUST_LOCAL_OFFSET ( dst , dstw )"		1021614	0					
ANR	1021670	Callee	ADJUST_LOCAL_OFFSET		1021614	0					
ANR	1021671	Identifier	ADJUST_LOCAL_OFFSET		1021614	0					
ANR	1021672	ArgumentList	dst		1021614	1					
ANR	1021673	Argument	dst		1021614	0					
ANR	1021674	Identifier	dst		1021614	0					
ANR	1021675	Argument	dstw		1021614	1					
ANR	1021676	Identifier	dstw		1021614	0					
ANR	1021677	ExpressionStatement	"ADJUST_LOCAL_OFFSET ( src , srcw )"	2489:1:77353:77383	1021614	5	True				
ANR	1021678	CallExpression	"ADJUST_LOCAL_OFFSET ( src , srcw )"		1021614	0					
ANR	1021679	Callee	ADJUST_LOCAL_OFFSET		1021614	0					
ANR	1021680	Identifier	ADJUST_LOCAL_OFFSET		1021614	0					
ANR	1021681	ArgumentList	src		1021614	1					
ANR	1021682	Argument	src		1021614	0					
ANR	1021683	Identifier	src		1021614	0					
ANR	1021684	Argument	srcw		1021614	1					
ANR	1021685	Identifier	srcw		1021614	0					
ANR	1021686	IfStatement	if ( dst == SLJIT_UNUSED )		1021614	6					
ANR	1021687	Condition	dst == SLJIT_UNUSED	2491:5:77391:77409	1021614	0	True				
ANR	1021688	EqualityExpression	dst == SLJIT_UNUSED		1021614	0		==			
ANR	1021689	Identifier	dst		1021614	0					
ANR	1021690	Identifier	SLJIT_UNUSED		1021614	1					
ANR	1021691	ReturnStatement	return SLJIT_SUCCESS ;	2492:2:77414:77434	1021614	1	True				
ANR	1021692	Identifier	SLJIT_SUCCESS		1021614	0					
ANR	1021693	ExpressionStatement	op = GET_OPCODE ( op )	2494:1:77438:77457	1021614	7	True				
ANR	1021694	AssignmentExpression	op = GET_OPCODE ( op )		1021614	0		=			
ANR	1021695	Identifier	op		1021614	0					
ANR	1021696	CallExpression	GET_OPCODE ( op )		1021614	1					
ANR	1021697	Callee	GET_OPCODE		1021614	0					
ANR	1021698	Identifier	GET_OPCODE		1021614	0					
ANR	1021699	ArgumentList	op		1021614	1					
ANR	1021700	Argument	op		1021614	0					
ANR	1021701	Identifier	op		1021614	0					
ANR	1021702	ExpressionStatement	cc = get_cc ( type & 0xff )	2495:1:77460:77484	1021614	8	True				
ANR	1021703	AssignmentExpression	cc = get_cc ( type & 0xff )		1021614	0		=			
ANR	1021704	Identifier	cc		1021614	0					
ANR	1021705	CallExpression	get_cc ( type & 0xff )		1021614	1					
ANR	1021706	Callee	get_cc		1021614	0					
ANR	1021707	Identifier	get_cc		1021614	0					
ANR	1021708	ArgumentList	type & 0xff		1021614	1					
ANR	1021709	Argument	type & 0xff		1021614	0					
ANR	1021710	BitAndExpression	type & 0xff		1021614	0		&			
ANR	1021711	Identifier	type		1021614	0					
ANR	1021712	PrimaryExpression	0xff		1021614	1					
ANR	1021713	ExpressionStatement	dst_r = FAST_IS_REG ( dst ) ? dst : TMP_REG2	2496:1:77487:77528	1021614	9	True				
ANR	1021714	AssignmentExpression	dst_r = FAST_IS_REG ( dst ) ? dst : TMP_REG2		1021614	0		=			
ANR	1021715	Identifier	dst_r		1021614	0					
ANR	1021716	ConditionalExpression	FAST_IS_REG ( dst ) ? dst : TMP_REG2		1021614	1					
ANR	1021717	Condition	FAST_IS_REG ( dst )		1021614	0					
ANR	1021718	CallExpression	FAST_IS_REG ( dst )		1021614	0					
ANR	1021719	Callee	FAST_IS_REG		1021614	0					
ANR	1021720	Identifier	FAST_IS_REG		1021614	0					
ANR	1021721	ArgumentList	dst		1021614	1					
ANR	1021722	Argument	dst		1021614	0					
ANR	1021723	Identifier	dst		1021614	0					
ANR	1021724	Identifier	dst		1021614	1					
ANR	1021725	Identifier	TMP_REG2		1021614	2					
ANR	1021726	IfStatement	if ( op < SLJIT_ADD )		1021614	10					
ANR	1021727	Condition	op < SLJIT_ADD	2498:5:77536:77549	1021614	0	True				
ANR	1021728	RelationalExpression	op < SLJIT_ADD		1021614	0		<			
ANR	1021729	Identifier	op		1021614	0					
ANR	1021730	Identifier	SLJIT_ADD		1021614	1					
ANR	1021731	CompoundStatement		17:21:391:391	1021614	1					
ANR	1021732	ExpressionStatement	"FAIL_IF ( push_inst ( compiler , EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , dst_r , SLJIT_UNUSED , SRC2_IMM | 0 ) ) )"	2499:2:77556:77653	1021614	0	True				
ANR	1021733	CallExpression	"FAIL_IF ( push_inst ( compiler , EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , dst_r , SLJIT_UNUSED , SRC2_IMM | 0 ) ) )"		1021614	0					
ANR	1021734	Callee	FAIL_IF		1021614	0					
ANR	1021735	Identifier	FAIL_IF		1021614	0					
ANR	1021736	ArgumentList	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , dst_r , SLJIT_UNUSED , SRC2_IMM | 0 ) )"		1021614	1					
ANR	1021737	Argument	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , dst_r , SLJIT_UNUSED , SRC2_IMM | 0 ) )"		1021614	0					
ANR	1021738	CallExpression	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , dst_r , SLJIT_UNUSED , SRC2_IMM | 0 ) )"		1021614	0					
ANR	1021739	Callee	push_inst		1021614	0					
ANR	1021740	Identifier	push_inst		1021614	0					
ANR	1021741	ArgumentList	compiler		1021614	1					
ANR	1021742	Argument	compiler		1021614	0					
ANR	1021743	Identifier	compiler		1021614	0					
ANR	1021744	Argument	"EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , dst_r , SLJIT_UNUSED , SRC2_IMM | 0 )"		1021614	1					
ANR	1021745	CallExpression	"EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , dst_r , SLJIT_UNUSED , SRC2_IMM | 0 )"		1021614	0					
ANR	1021746	Callee	EMIT_DATA_PROCESS_INS		1021614	0					
ANR	1021747	Identifier	EMIT_DATA_PROCESS_INS		1021614	0					
ANR	1021748	ArgumentList	MOV_DP		1021614	1					
ANR	1021749	Argument	MOV_DP		1021614	0					
ANR	1021750	Identifier	MOV_DP		1021614	0					
ANR	1021751	Argument	0		1021614	1					
ANR	1021752	PrimaryExpression	0		1021614	0					
ANR	1021753	Argument	dst_r		1021614	2					
ANR	1021754	Identifier	dst_r		1021614	0					
ANR	1021755	Argument	SLJIT_UNUSED		1021614	3					
ANR	1021756	Identifier	SLJIT_UNUSED		1021614	0					
ANR	1021757	Argument	SRC2_IMM | 0		1021614	4					
ANR	1021758	InclusiveOrExpression	SRC2_IMM | 0		1021614	0		|			
ANR	1021759	Identifier	SRC2_IMM		1021614	0					
ANR	1021760	PrimaryExpression	0		1021614	1					
ANR	1021761	ExpressionStatement	"FAIL_IF ( push_inst ( compiler , ( EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , dst_r , SLJIT_UNUSED , SRC2_IMM | 1 ) & ~COND_MASK ) | cc ) )"	2500:2:77657:77774	1021614	1	True				
ANR	1021762	CallExpression	"FAIL_IF ( push_inst ( compiler , ( EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , dst_r , SLJIT_UNUSED , SRC2_IMM | 1 ) & ~COND_MASK ) | cc ) )"		1021614	0					
ANR	1021763	Callee	FAIL_IF		1021614	0					
ANR	1021764	Identifier	FAIL_IF		1021614	0					
ANR	1021765	ArgumentList	"push_inst ( compiler , ( EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , dst_r , SLJIT_UNUSED , SRC2_IMM | 1 ) & ~COND_MASK ) | cc )"		1021614	1					
ANR	1021766	Argument	"push_inst ( compiler , ( EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , dst_r , SLJIT_UNUSED , SRC2_IMM | 1 ) & ~COND_MASK ) | cc )"		1021614	0					
ANR	1021767	CallExpression	"push_inst ( compiler , ( EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , dst_r , SLJIT_UNUSED , SRC2_IMM | 1 ) & ~COND_MASK ) | cc )"		1021614	0					
ANR	1021768	Callee	push_inst		1021614	0					
ANR	1021769	Identifier	push_inst		1021614	0					
ANR	1021770	ArgumentList	compiler		1021614	1					
ANR	1021771	Argument	compiler		1021614	0					
ANR	1021772	Identifier	compiler		1021614	0					
ANR	1021773	Argument	"( EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , dst_r , SLJIT_UNUSED , SRC2_IMM | 1 ) & ~COND_MASK ) | cc"		1021614	1					
ANR	1021774	InclusiveOrExpression	"( EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , dst_r , SLJIT_UNUSED , SRC2_IMM | 1 ) & ~COND_MASK ) | cc"		1021614	0		|			
ANR	1021775	BitAndExpression	"EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , dst_r , SLJIT_UNUSED , SRC2_IMM | 1 ) & ~COND_MASK"		1021614	0		&			
ANR	1021776	CallExpression	"EMIT_DATA_PROCESS_INS ( MOV_DP , 0 , dst_r , SLJIT_UNUSED , SRC2_IMM | 1 )"		1021614	0					
ANR	1021777	Callee	EMIT_DATA_PROCESS_INS		1021614	0					
ANR	1021778	Identifier	EMIT_DATA_PROCESS_INS		1021614	0					
ANR	1021779	ArgumentList	MOV_DP		1021614	1					
ANR	1021780	Argument	MOV_DP		1021614	0					
ANR	1021781	Identifier	MOV_DP		1021614	0					
ANR	1021782	Argument	0		1021614	1					
ANR	1021783	PrimaryExpression	0		1021614	0					
ANR	1021784	Argument	dst_r		1021614	2					
ANR	1021785	Identifier	dst_r		1021614	0					
ANR	1021786	Argument	SLJIT_UNUSED		1021614	3					
ANR	1021787	Identifier	SLJIT_UNUSED		1021614	0					
ANR	1021788	Argument	SRC2_IMM | 1		1021614	4					
ANR	1021789	InclusiveOrExpression	SRC2_IMM | 1		1021614	0		|			
ANR	1021790	Identifier	SRC2_IMM		1021614	0					
ANR	1021791	PrimaryExpression	1		1021614	1					
ANR	1021792	Identifier	~COND_MASK		1021614	1					
ANR	1021793	Identifier	cc		1021614	1					
ANR	1021794	ReturnStatement	"return ( dst_r == TMP_REG2 ) ? emit_op_mem ( compiler , WORD_DATA , TMP_REG2 , dst , dstw ) : SLJIT_SUCCESS ;"	2501:2:77778:77876	1021614	2	True				
ANR	1021795	ConditionalExpression	"( dst_r == TMP_REG2 ) ? emit_op_mem ( compiler , WORD_DATA , TMP_REG2 , dst , dstw ) : SLJIT_SUCCESS"		1021614	0					
ANR	1021796	Condition	dst_r == TMP_REG2		1021614	0					
ANR	1021797	EqualityExpression	dst_r == TMP_REG2		1021614	0		==			
ANR	1021798	Identifier	dst_r		1021614	0					
ANR	1021799	Identifier	TMP_REG2		1021614	1					
ANR	1021800	CallExpression	"emit_op_mem ( compiler , WORD_DATA , TMP_REG2 , dst , dstw )"		1021614	1					
ANR	1021801	Callee	emit_op_mem		1021614	0					
ANR	1021802	Identifier	emit_op_mem		1021614	0					
ANR	1021803	ArgumentList	compiler		1021614	1					
ANR	1021804	Argument	compiler		1021614	0					
ANR	1021805	Identifier	compiler		1021614	0					
ANR	1021806	Argument	WORD_DATA		1021614	1					
ANR	1021807	Identifier	WORD_DATA		1021614	0					
ANR	1021808	Argument	TMP_REG2		1021614	2					
ANR	1021809	Identifier	TMP_REG2		1021614	0					
ANR	1021810	Argument	dst		1021614	3					
ANR	1021811	Identifier	dst		1021614	0					
ANR	1021812	Argument	dstw		1021614	4					
ANR	1021813	Identifier	dstw		1021614	0					
ANR	1021814	Identifier	SLJIT_SUCCESS		1021614	2					
ANR	1021815	ExpressionStatement	ins = ( op == SLJIT_AND ? AND_DP : ( op == SLJIT_OR ? ORR_DP : EOR_DP ) )	2504:1:77883:77952	1021614	11	True				
ANR	1021816	AssignmentExpression	ins = ( op == SLJIT_AND ? AND_DP : ( op == SLJIT_OR ? ORR_DP : EOR_DP ) )		1021614	0		=			
ANR	1021817	Identifier	ins		1021614	0					
ANR	1021818	ConditionalExpression	op == SLJIT_AND ? AND_DP : ( op == SLJIT_OR ? ORR_DP : EOR_DP )		1021614	1					
ANR	1021819	Condition	op == SLJIT_AND		1021614	0					
ANR	1021820	EqualityExpression	op == SLJIT_AND		1021614	0		==			
ANR	1021821	Identifier	op		1021614	0					
ANR	1021822	Identifier	SLJIT_AND		1021614	1					
ANR	1021823	Identifier	AND_DP		1021614	1					
ANR	1021824	ConditionalExpression	op == SLJIT_OR ? ORR_DP : EOR_DP		1021614	2					
ANR	1021825	Condition	op == SLJIT_OR		1021614	0					
ANR	1021826	EqualityExpression	op == SLJIT_OR		1021614	0		==			
ANR	1021827	Identifier	op		1021614	0					
ANR	1021828	Identifier	SLJIT_OR		1021614	1					
ANR	1021829	Identifier	ORR_DP		1021614	1					
ANR	1021830	Identifier	EOR_DP		1021614	2					
ANR	1021831	IfStatement	if ( ( op == SLJIT_OR || op == SLJIT_XOR ) && FAST_IS_REG ( dst ) && dst == src )		1021614	12					
ANR	1021832	Condition	( op == SLJIT_OR || op == SLJIT_XOR ) && FAST_IS_REG ( dst ) && dst == src	2505:5:77959:78027	1021614	0	True				
ANR	1021833	AndExpression	( op == SLJIT_OR || op == SLJIT_XOR ) && FAST_IS_REG ( dst ) && dst == src		1021614	0		&&			
ANR	1021834	OrExpression	op == SLJIT_OR || op == SLJIT_XOR		1021614	0		||			
ANR	1021835	EqualityExpression	op == SLJIT_OR		1021614	0		==			
ANR	1021836	Identifier	op		1021614	0					
ANR	1021837	Identifier	SLJIT_OR		1021614	1					
ANR	1021838	EqualityExpression	op == SLJIT_XOR		1021614	1		==			
ANR	1021839	Identifier	op		1021614	0					
ANR	1021840	Identifier	SLJIT_XOR		1021614	1					
ANR	1021841	AndExpression	FAST_IS_REG ( dst ) && dst == src		1021614	1		&&			
ANR	1021842	CallExpression	FAST_IS_REG ( dst )		1021614	0					
ANR	1021843	Callee	FAST_IS_REG		1021614	0					
ANR	1021844	Identifier	FAST_IS_REG		1021614	0					
ANR	1021845	ArgumentList	dst		1021614	1					
ANR	1021846	Argument	dst		1021614	0					
ANR	1021847	Identifier	dst		1021614	0					
ANR	1021848	EqualityExpression	dst == src		1021614	1		==			
ANR	1021849	Identifier	dst		1021614	0					
ANR	1021850	Identifier	src		1021614	1					
ANR	1021851	CompoundStatement		24:76:869:869	1021614	1					
ANR	1021852	ExpressionStatement	"FAIL_IF ( push_inst ( compiler , ( EMIT_DATA_PROCESS_INS ( ins , 0 , dst , dst , SRC2_IMM | 1 ) & ~COND_MASK ) | cc ) )"	2506:2:78034:78137	1021614	0	True				
ANR	1021853	CallExpression	"FAIL_IF ( push_inst ( compiler , ( EMIT_DATA_PROCESS_INS ( ins , 0 , dst , dst , SRC2_IMM | 1 ) & ~COND_MASK ) | cc ) )"		1021614	0					
ANR	1021854	Callee	FAIL_IF		1021614	0					
ANR	1021855	Identifier	FAIL_IF		1021614	0					
ANR	1021856	ArgumentList	"push_inst ( compiler , ( EMIT_DATA_PROCESS_INS ( ins , 0 , dst , dst , SRC2_IMM | 1 ) & ~COND_MASK ) | cc )"		1021614	1					
ANR	1021857	Argument	"push_inst ( compiler , ( EMIT_DATA_PROCESS_INS ( ins , 0 , dst , dst , SRC2_IMM | 1 ) & ~COND_MASK ) | cc )"		1021614	0					
ANR	1021858	CallExpression	"push_inst ( compiler , ( EMIT_DATA_PROCESS_INS ( ins , 0 , dst , dst , SRC2_IMM | 1 ) & ~COND_MASK ) | cc )"		1021614	0					
ANR	1021859	Callee	push_inst		1021614	0					
ANR	1021860	Identifier	push_inst		1021614	0					
ANR	1021861	ArgumentList	compiler		1021614	1					
ANR	1021862	Argument	compiler		1021614	0					
ANR	1021863	Identifier	compiler		1021614	0					
ANR	1021864	Argument	"( EMIT_DATA_PROCESS_INS ( ins , 0 , dst , dst , SRC2_IMM | 1 ) & ~COND_MASK ) | cc"		1021614	1					
ANR	1021865	InclusiveOrExpression	"( EMIT_DATA_PROCESS_INS ( ins , 0 , dst , dst , SRC2_IMM | 1 ) & ~COND_MASK ) | cc"		1021614	0		|			
ANR	1021866	BitAndExpression	"EMIT_DATA_PROCESS_INS ( ins , 0 , dst , dst , SRC2_IMM | 1 ) & ~COND_MASK"		1021614	0		&			
ANR	1021867	CallExpression	"EMIT_DATA_PROCESS_INS ( ins , 0 , dst , dst , SRC2_IMM | 1 )"		1021614	0					
ANR	1021868	Callee	EMIT_DATA_PROCESS_INS		1021614	0					
ANR	1021869	Identifier	EMIT_DATA_PROCESS_INS		1021614	0					
ANR	1021870	ArgumentList	ins		1021614	1					
ANR	1021871	Argument	ins		1021614	0					
ANR	1021872	Identifier	ins		1021614	0					
ANR	1021873	Argument	0		1021614	1					
ANR	1021874	PrimaryExpression	0		1021614	0					
ANR	1021875	Argument	dst		1021614	2					
ANR	1021876	Identifier	dst		1021614	0					
ANR	1021877	Argument	dst		1021614	3					
ANR	1021878	Identifier	dst		1021614	0					
ANR	1021879	Argument	SRC2_IMM | 1		1021614	4					
ANR	1021880	InclusiveOrExpression	SRC2_IMM | 1		1021614	0		|			
ANR	1021881	Identifier	SRC2_IMM		1021614	0					
ANR	1021882	PrimaryExpression	1		1021614	1					
ANR	1021883	Identifier	~COND_MASK		1021614	1					
ANR	1021884	Identifier	cc		1021614	1					
ANR	1021885	ReturnStatement	"return ( flags & SLJIT_SET_E ) ? push_inst ( compiler , EMIT_DATA_PROCESS_INS ( MOV_DP , SET_FLAGS , TMP_REG1 , SLJIT_UNUSED , RM ( dst ) ) ) : SLJIT_SUCCESS ;"	2508:2:78226:78367	1021614	1	True				
ANR	1021886	ConditionalExpression	"( flags & SLJIT_SET_E ) ? push_inst ( compiler , EMIT_DATA_PROCESS_INS ( MOV_DP , SET_FLAGS , TMP_REG1 , SLJIT_UNUSED , RM ( dst ) ) ) : SLJIT_SUCCESS"		1021614	0					
ANR	1021887	Condition	flags & SLJIT_SET_E		1021614	0					
ANR	1021888	BitAndExpression	flags & SLJIT_SET_E		1021614	0		&			
ANR	1021889	Identifier	flags		1021614	0					
ANR	1021890	Identifier	SLJIT_SET_E		1021614	1					
ANR	1021891	CallExpression	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( MOV_DP , SET_FLAGS , TMP_REG1 , SLJIT_UNUSED , RM ( dst ) ) )"		1021614	1					
ANR	1021892	Callee	push_inst		1021614	0					
ANR	1021893	Identifier	push_inst		1021614	0					
ANR	1021894	ArgumentList	compiler		1021614	1					
ANR	1021895	Argument	compiler		1021614	0					
ANR	1021896	Identifier	compiler		1021614	0					
ANR	1021897	Argument	"EMIT_DATA_PROCESS_INS ( MOV_DP , SET_FLAGS , TMP_REG1 , SLJIT_UNUSED , RM ( dst ) )"		1021614	1					
ANR	1021898	CallExpression	"EMIT_DATA_PROCESS_INS ( MOV_DP , SET_FLAGS , TMP_REG1 , SLJIT_UNUSED , RM ( dst ) )"		1021614	0					
ANR	1021899	Callee	EMIT_DATA_PROCESS_INS		1021614	0					
ANR	1021900	Identifier	EMIT_DATA_PROCESS_INS		1021614	0					
ANR	1021901	ArgumentList	MOV_DP		1021614	1					
ANR	1021902	Argument	MOV_DP		1021614	0					
ANR	1021903	Identifier	MOV_DP		1021614	0					
ANR	1021904	Argument	SET_FLAGS		1021614	1					
ANR	1021905	Identifier	SET_FLAGS		1021614	0					
ANR	1021906	Argument	TMP_REG1		1021614	2					
ANR	1021907	Identifier	TMP_REG1		1021614	0					
ANR	1021908	Argument	SLJIT_UNUSED		1021614	3					
ANR	1021909	Identifier	SLJIT_UNUSED		1021614	0					
ANR	1021910	Argument	RM ( dst )		1021614	4					
ANR	1021911	CallExpression	RM ( dst )		1021614	0					
ANR	1021912	Callee	RM		1021614	0					
ANR	1021913	Identifier	RM		1021614	0					
ANR	1021914	ArgumentList	dst		1021614	1					
ANR	1021915	Argument	dst		1021614	0					
ANR	1021916	Identifier	dst		1021614	0					
ANR	1021917	Identifier	SLJIT_SUCCESS		1021614	2					
ANR	1021918	ExpressionStatement	compiler -> cache_arg = 0	2511:1:78374:78397	1021614	13	True				
ANR	1021919	AssignmentExpression	compiler -> cache_arg = 0		1021614	0		=			
ANR	1021920	PtrMemberAccess	compiler -> cache_arg		1021614	0					
ANR	1021921	Identifier	compiler		1021614	0					
ANR	1021922	Identifier	cache_arg		1021614	1					
ANR	1021923	PrimaryExpression	0		1021614	1					
ANR	1021924	ExpressionStatement	compiler -> cache_argw = 0	2512:1:78400:78424	1021614	14	True				
ANR	1021925	AssignmentExpression	compiler -> cache_argw = 0		1021614	0		=			
ANR	1021926	PtrMemberAccess	compiler -> cache_argw		1021614	0					
ANR	1021927	Identifier	compiler		1021614	0					
ANR	1021928	Identifier	cache_argw		1021614	1					
ANR	1021929	PrimaryExpression	0		1021614	1					
ANR	1021930	IfStatement	if ( src & SLJIT_MEM )		1021614	15					
ANR	1021931	Condition	src & SLJIT_MEM	2513:5:78431:78445	1021614	0	True				
ANR	1021932	BitAndExpression	src & SLJIT_MEM		1021614	0		&			
ANR	1021933	Identifier	src		1021614	0					
ANR	1021934	Identifier	SLJIT_MEM		1021614	1					
ANR	1021935	CompoundStatement		32:22:1287:1287	1021614	1					
ANR	1021936	ExpressionStatement	"FAIL_IF ( emit_op_mem2 ( compiler , WORD_DATA | LOAD_DATA , TMP_REG1 , src , srcw , dst , dstw ) )"	2514:2:78452:78538	1021614	0	True				
ANR	1021937	CallExpression	"FAIL_IF ( emit_op_mem2 ( compiler , WORD_DATA | LOAD_DATA , TMP_REG1 , src , srcw , dst , dstw ) )"		1021614	0					
ANR	1021938	Callee	FAIL_IF		1021614	0					
ANR	1021939	Identifier	FAIL_IF		1021614	0					
ANR	1021940	ArgumentList	"emit_op_mem2 ( compiler , WORD_DATA | LOAD_DATA , TMP_REG1 , src , srcw , dst , dstw )"		1021614	1					
ANR	1021941	Argument	"emit_op_mem2 ( compiler , WORD_DATA | LOAD_DATA , TMP_REG1 , src , srcw , dst , dstw )"		1021614	0					
ANR	1021942	CallExpression	"emit_op_mem2 ( compiler , WORD_DATA | LOAD_DATA , TMP_REG1 , src , srcw , dst , dstw )"		1021614	0					
ANR	1021943	Callee	emit_op_mem2		1021614	0					
ANR	1021944	Identifier	emit_op_mem2		1021614	0					
ANR	1021945	ArgumentList	compiler		1021614	1					
ANR	1021946	Argument	compiler		1021614	0					
ANR	1021947	Identifier	compiler		1021614	0					
ANR	1021948	Argument	WORD_DATA | LOAD_DATA		1021614	1					
ANR	1021949	InclusiveOrExpression	WORD_DATA | LOAD_DATA		1021614	0		|			
ANR	1021950	Identifier	WORD_DATA		1021614	0					
ANR	1021951	Identifier	LOAD_DATA		1021614	1					
ANR	1021952	Argument	TMP_REG1		1021614	2					
ANR	1021953	Identifier	TMP_REG1		1021614	0					
ANR	1021954	Argument	src		1021614	3					
ANR	1021955	Identifier	src		1021614	0					
ANR	1021956	Argument	srcw		1021614	4					
ANR	1021957	Identifier	srcw		1021614	0					
ANR	1021958	Argument	dst		1021614	5					
ANR	1021959	Identifier	dst		1021614	0					
ANR	1021960	Argument	dstw		1021614	6					
ANR	1021961	Identifier	dstw		1021614	0					
ANR	1021962	ExpressionStatement	src = TMP_REG1	2515:2:78542:78556	1021614	1	True				
ANR	1021963	AssignmentExpression	src = TMP_REG1		1021614	0		=			
ANR	1021964	Identifier	src		1021614	0					
ANR	1021965	Identifier	TMP_REG1		1021614	1					
ANR	1021966	ExpressionStatement	srcw = 0	2516:2:78560:78568	1021614	2	True				
ANR	1021967	AssignmentExpression	srcw = 0		1021614	0		=			
ANR	1021968	Identifier	srcw		1021614	0					
ANR	1021969	PrimaryExpression	0		1021614	1					
ANR	1021970	ElseStatement	else		1021614	0					
ANR	1021971	IfStatement	if ( src & SLJIT_IMM )		1021614	0					
ANR	1021972	Condition	src & SLJIT_IMM	2517:12:78582:78596	1021614	0	True				
ANR	1021973	BitAndExpression	src & SLJIT_IMM		1021614	0		&			
ANR	1021974	Identifier	src		1021614	0					
ANR	1021975	Identifier	SLJIT_IMM		1021614	1					
ANR	1021976	CompoundStatement		36:29:1438:1438	1021614	1					
ANR	1021977	ExpressionStatement	"FAIL_IF ( load_immediate ( compiler , TMP_REG1 , srcw ) )"	2518:2:78603:78652	1021614	0	True				
ANR	1021978	CallExpression	"FAIL_IF ( load_immediate ( compiler , TMP_REG1 , srcw ) )"		1021614	0					
ANR	1021979	Callee	FAIL_IF		1021614	0					
ANR	1021980	Identifier	FAIL_IF		1021614	0					
ANR	1021981	ArgumentList	"load_immediate ( compiler , TMP_REG1 , srcw )"		1021614	1					
ANR	1021982	Argument	"load_immediate ( compiler , TMP_REG1 , srcw )"		1021614	0					
ANR	1021983	CallExpression	"load_immediate ( compiler , TMP_REG1 , srcw )"		1021614	0					
ANR	1021984	Callee	load_immediate		1021614	0					
ANR	1021985	Identifier	load_immediate		1021614	0					
ANR	1021986	ArgumentList	compiler		1021614	1					
ANR	1021987	Argument	compiler		1021614	0					
ANR	1021988	Identifier	compiler		1021614	0					
ANR	1021989	Argument	TMP_REG1		1021614	1					
ANR	1021990	Identifier	TMP_REG1		1021614	0					
ANR	1021991	Argument	srcw		1021614	2					
ANR	1021992	Identifier	srcw		1021614	0					
ANR	1021993	ExpressionStatement	src = TMP_REG1	2519:2:78656:78670	1021614	1	True				
ANR	1021994	AssignmentExpression	src = TMP_REG1		1021614	0		=			
ANR	1021995	Identifier	src		1021614	0					
ANR	1021996	Identifier	TMP_REG1		1021614	1					
ANR	1021997	ExpressionStatement	srcw = 0	2520:2:78674:78682	1021614	2	True				
ANR	1021998	AssignmentExpression	srcw = 0		1021614	0		=			
ANR	1021999	Identifier	srcw		1021614	0					
ANR	1022000	PrimaryExpression	0		1021614	1					
ANR	1022001	ExpressionStatement	"FAIL_IF ( push_inst ( compiler , ( EMIT_DATA_PROCESS_INS ( ins , 0 , dst_r , src , SRC2_IMM | 1 ) & ~COND_MASK ) | cc ) )"	2523:1:78689:78794	1021614	16	True				
ANR	1022002	CallExpression	"FAIL_IF ( push_inst ( compiler , ( EMIT_DATA_PROCESS_INS ( ins , 0 , dst_r , src , SRC2_IMM | 1 ) & ~COND_MASK ) | cc ) )"		1021614	0					
ANR	1022003	Callee	FAIL_IF		1021614	0					
ANR	1022004	Identifier	FAIL_IF		1021614	0					
ANR	1022005	ArgumentList	"push_inst ( compiler , ( EMIT_DATA_PROCESS_INS ( ins , 0 , dst_r , src , SRC2_IMM | 1 ) & ~COND_MASK ) | cc )"		1021614	1					
ANR	1022006	Argument	"push_inst ( compiler , ( EMIT_DATA_PROCESS_INS ( ins , 0 , dst_r , src , SRC2_IMM | 1 ) & ~COND_MASK ) | cc )"		1021614	0					
ANR	1022007	CallExpression	"push_inst ( compiler , ( EMIT_DATA_PROCESS_INS ( ins , 0 , dst_r , src , SRC2_IMM | 1 ) & ~COND_MASK ) | cc )"		1021614	0					
ANR	1022008	Callee	push_inst		1021614	0					
ANR	1022009	Identifier	push_inst		1021614	0					
ANR	1022010	ArgumentList	compiler		1021614	1					
ANR	1022011	Argument	compiler		1021614	0					
ANR	1022012	Identifier	compiler		1021614	0					
ANR	1022013	Argument	"( EMIT_DATA_PROCESS_INS ( ins , 0 , dst_r , src , SRC2_IMM | 1 ) & ~COND_MASK ) | cc"		1021614	1					
ANR	1022014	InclusiveOrExpression	"( EMIT_DATA_PROCESS_INS ( ins , 0 , dst_r , src , SRC2_IMM | 1 ) & ~COND_MASK ) | cc"		1021614	0		|			
ANR	1022015	BitAndExpression	"EMIT_DATA_PROCESS_INS ( ins , 0 , dst_r , src , SRC2_IMM | 1 ) & ~COND_MASK"		1021614	0		&			
ANR	1022016	CallExpression	"EMIT_DATA_PROCESS_INS ( ins , 0 , dst_r , src , SRC2_IMM | 1 )"		1021614	0					
ANR	1022017	Callee	EMIT_DATA_PROCESS_INS		1021614	0					
ANR	1022018	Identifier	EMIT_DATA_PROCESS_INS		1021614	0					
ANR	1022019	ArgumentList	ins		1021614	1					
ANR	1022020	Argument	ins		1021614	0					
ANR	1022021	Identifier	ins		1021614	0					
ANR	1022022	Argument	0		1021614	1					
ANR	1022023	PrimaryExpression	0		1021614	0					
ANR	1022024	Argument	dst_r		1021614	2					
ANR	1022025	Identifier	dst_r		1021614	0					
ANR	1022026	Argument	src		1021614	3					
ANR	1022027	Identifier	src		1021614	0					
ANR	1022028	Argument	SRC2_IMM | 1		1021614	4					
ANR	1022029	InclusiveOrExpression	SRC2_IMM | 1		1021614	0		|			
ANR	1022030	Identifier	SRC2_IMM		1021614	0					
ANR	1022031	PrimaryExpression	1		1021614	1					
ANR	1022032	Identifier	~COND_MASK		1021614	1					
ANR	1022033	Identifier	cc		1021614	1					
ANR	1022034	ExpressionStatement	"FAIL_IF ( push_inst ( compiler , ( EMIT_DATA_PROCESS_INS ( ins , 0 , dst_r , src , SRC2_IMM | 0 ) & ~COND_MASK ) | ( cc ^ 0x10000000 ) ) )"	2524:1:78797:78917	1021614	17	True				
ANR	1022035	CallExpression	"FAIL_IF ( push_inst ( compiler , ( EMIT_DATA_PROCESS_INS ( ins , 0 , dst_r , src , SRC2_IMM | 0 ) & ~COND_MASK ) | ( cc ^ 0x10000000 ) ) )"		1021614	0					
ANR	1022036	Callee	FAIL_IF		1021614	0					
ANR	1022037	Identifier	FAIL_IF		1021614	0					
ANR	1022038	ArgumentList	"push_inst ( compiler , ( EMIT_DATA_PROCESS_INS ( ins , 0 , dst_r , src , SRC2_IMM | 0 ) & ~COND_MASK ) | ( cc ^ 0x10000000 ) )"		1021614	1					
ANR	1022039	Argument	"push_inst ( compiler , ( EMIT_DATA_PROCESS_INS ( ins , 0 , dst_r , src , SRC2_IMM | 0 ) & ~COND_MASK ) | ( cc ^ 0x10000000 ) )"		1021614	0					
ANR	1022040	CallExpression	"push_inst ( compiler , ( EMIT_DATA_PROCESS_INS ( ins , 0 , dst_r , src , SRC2_IMM | 0 ) & ~COND_MASK ) | ( cc ^ 0x10000000 ) )"		1021614	0					
ANR	1022041	Callee	push_inst		1021614	0					
ANR	1022042	Identifier	push_inst		1021614	0					
ANR	1022043	ArgumentList	compiler		1021614	1					
ANR	1022044	Argument	compiler		1021614	0					
ANR	1022045	Identifier	compiler		1021614	0					
ANR	1022046	Argument	"( EMIT_DATA_PROCESS_INS ( ins , 0 , dst_r , src , SRC2_IMM | 0 ) & ~COND_MASK ) | ( cc ^ 0x10000000 )"		1021614	1					
ANR	1022047	InclusiveOrExpression	"( EMIT_DATA_PROCESS_INS ( ins , 0 , dst_r , src , SRC2_IMM | 0 ) & ~COND_MASK ) | ( cc ^ 0x10000000 )"		1021614	0		|			
ANR	1022048	BitAndExpression	"EMIT_DATA_PROCESS_INS ( ins , 0 , dst_r , src , SRC2_IMM | 0 ) & ~COND_MASK"		1021614	0		&			
ANR	1022049	CallExpression	"EMIT_DATA_PROCESS_INS ( ins , 0 , dst_r , src , SRC2_IMM | 0 )"		1021614	0					
ANR	1022050	Callee	EMIT_DATA_PROCESS_INS		1021614	0					
ANR	1022051	Identifier	EMIT_DATA_PROCESS_INS		1021614	0					
ANR	1022052	ArgumentList	ins		1021614	1					
ANR	1022053	Argument	ins		1021614	0					
ANR	1022054	Identifier	ins		1021614	0					
ANR	1022055	Argument	0		1021614	1					
ANR	1022056	PrimaryExpression	0		1021614	0					
ANR	1022057	Argument	dst_r		1021614	2					
ANR	1022058	Identifier	dst_r		1021614	0					
ANR	1022059	Argument	src		1021614	3					
ANR	1022060	Identifier	src		1021614	0					
ANR	1022061	Argument	SRC2_IMM | 0		1021614	4					
ANR	1022062	InclusiveOrExpression	SRC2_IMM | 0		1021614	0		|			
ANR	1022063	Identifier	SRC2_IMM		1021614	0					
ANR	1022064	PrimaryExpression	0		1021614	1					
ANR	1022065	Identifier	~COND_MASK		1021614	1					
ANR	1022066	ExclusiveOrExpression	cc ^ 0x10000000		1021614	1		^			
ANR	1022067	Identifier	cc		1021614	0					
ANR	1022068	PrimaryExpression	0x10000000		1021614	1					
ANR	1022069	IfStatement	if ( dst_r == TMP_REG2 )		1021614	18					
ANR	1022070	Condition	dst_r == TMP_REG2	2525:5:78924:78940	1021614	0	True				
ANR	1022071	EqualityExpression	dst_r == TMP_REG2		1021614	0		==			
ANR	1022072	Identifier	dst_r		1021614	0					
ANR	1022073	Identifier	TMP_REG2		1021614	1					
ANR	1022074	ExpressionStatement	"FAIL_IF ( emit_op_mem2 ( compiler , WORD_DATA , TMP_REG2 , dst , dstw , 0 , 0 ) )"	2526:2:78945:79014	1021614	1	True				
ANR	1022075	CallExpression	"FAIL_IF ( emit_op_mem2 ( compiler , WORD_DATA , TMP_REG2 , dst , dstw , 0 , 0 ) )"		1021614	0					
ANR	1022076	Callee	FAIL_IF		1021614	0					
ANR	1022077	Identifier	FAIL_IF		1021614	0					
ANR	1022078	ArgumentList	"emit_op_mem2 ( compiler , WORD_DATA , TMP_REG2 , dst , dstw , 0 , 0 )"		1021614	1					
ANR	1022079	Argument	"emit_op_mem2 ( compiler , WORD_DATA , TMP_REG2 , dst , dstw , 0 , 0 )"		1021614	0					
ANR	1022080	CallExpression	"emit_op_mem2 ( compiler , WORD_DATA , TMP_REG2 , dst , dstw , 0 , 0 )"		1021614	0					
ANR	1022081	Callee	emit_op_mem2		1021614	0					
ANR	1022082	Identifier	emit_op_mem2		1021614	0					
ANR	1022083	ArgumentList	compiler		1021614	1					
ANR	1022084	Argument	compiler		1021614	0					
ANR	1022085	Identifier	compiler		1021614	0					
ANR	1022086	Argument	WORD_DATA		1021614	1					
ANR	1022087	Identifier	WORD_DATA		1021614	0					
ANR	1022088	Argument	TMP_REG2		1021614	2					
ANR	1022089	Identifier	TMP_REG2		1021614	0					
ANR	1022090	Argument	dst		1021614	3					
ANR	1022091	Identifier	dst		1021614	0					
ANR	1022092	Argument	dstw		1021614	4					
ANR	1022093	Identifier	dstw		1021614	0					
ANR	1022094	Argument	0		1021614	5					
ANR	1022095	PrimaryExpression	0		1021614	0					
ANR	1022096	Argument	0		1021614	6					
ANR	1022097	PrimaryExpression	0		1021614	0					
ANR	1022098	ReturnStatement	"return ( flags & SLJIT_SET_E ) ? push_inst ( compiler , EMIT_DATA_PROCESS_INS ( MOV_DP , SET_FLAGS , TMP_REG1 , SLJIT_UNUSED , RM ( dst_r ) ) ) : SLJIT_SUCCESS ;"	2528:1:79018:79161	1021614	19	True				
ANR	1022099	ConditionalExpression	"( flags & SLJIT_SET_E ) ? push_inst ( compiler , EMIT_DATA_PROCESS_INS ( MOV_DP , SET_FLAGS , TMP_REG1 , SLJIT_UNUSED , RM ( dst_r ) ) ) : SLJIT_SUCCESS"		1021614	0					
ANR	1022100	Condition	flags & SLJIT_SET_E		1021614	0					
ANR	1022101	BitAndExpression	flags & SLJIT_SET_E		1021614	0		&			
ANR	1022102	Identifier	flags		1021614	0					
ANR	1022103	Identifier	SLJIT_SET_E		1021614	1					
ANR	1022104	CallExpression	"push_inst ( compiler , EMIT_DATA_PROCESS_INS ( MOV_DP , SET_FLAGS , TMP_REG1 , SLJIT_UNUSED , RM ( dst_r ) ) )"		1021614	1					
ANR	1022105	Callee	push_inst		1021614	0					
ANR	1022106	Identifier	push_inst		1021614	0					
ANR	1022107	ArgumentList	compiler		1021614	1					
ANR	1022108	Argument	compiler		1021614	0					
ANR	1022109	Identifier	compiler		1021614	0					
ANR	1022110	Argument	"EMIT_DATA_PROCESS_INS ( MOV_DP , SET_FLAGS , TMP_REG1 , SLJIT_UNUSED , RM ( dst_r ) )"		1021614	1					
ANR	1022111	CallExpression	"EMIT_DATA_PROCESS_INS ( MOV_DP , SET_FLAGS , TMP_REG1 , SLJIT_UNUSED , RM ( dst_r ) )"		1021614	0					
ANR	1022112	Callee	EMIT_DATA_PROCESS_INS		1021614	0					
ANR	1022113	Identifier	EMIT_DATA_PROCESS_INS		1021614	0					
ANR	1022114	ArgumentList	MOV_DP		1021614	1					
ANR	1022115	Argument	MOV_DP		1021614	0					
ANR	1022116	Identifier	MOV_DP		1021614	0					
ANR	1022117	Argument	SET_FLAGS		1021614	1					
ANR	1022118	Identifier	SET_FLAGS		1021614	0					
ANR	1022119	Argument	TMP_REG1		1021614	2					
ANR	1022120	Identifier	TMP_REG1		1021614	0					
ANR	1022121	Argument	SLJIT_UNUSED		1021614	3					
ANR	1022122	Identifier	SLJIT_UNUSED		1021614	0					
ANR	1022123	Argument	RM ( dst_r )		1021614	4					
ANR	1022124	CallExpression	RM ( dst_r )		1021614	0					
ANR	1022125	Callee	RM		1021614	0					
ANR	1022126	Identifier	RM		1021614	0					
ANR	1022127	ArgumentList	dst_r		1021614	1					
ANR	1022128	Argument	dst_r		1021614	0					
ANR	1022129	Identifier	dst_r		1021614	0					
ANR	1022130	Identifier	SLJIT_SUCCESS		1021614	2					
ANR	1022131	ReturnType	SLJIT_API_FUNC_ATTRIBUTE sljit_si		1021614	1					
ANR	1022132	Identifier	sljit_emit_op_flags		1021614	2					
ANR	1022133	ParameterList	"struct sljit_compiler * compiler , sljit_si op , sljit_si dst , sljit_sw dstw , sljit_si src , sljit_sw srcw , sljit_si type"		1021614	3					
ANR	1022134	Parameter	struct sljit_compiler * compiler	2478:54:77038:77068	1021614	0	True				
ANR	1022135	ParameterType	struct sljit_compiler *		1021614	0					
ANR	1022136	Identifier	compiler		1021614	1					
ANR	1022137	Parameter	sljit_si op	2478:87:77071:77081	1021614	1	True				
ANR	1022138	ParameterType	sljit_si		1021614	0					
ANR	1022139	Identifier	op		1021614	1					
ANR	1022140	Parameter	sljit_si dst	2479:1:77085:77096	1021614	2	True				
ANR	1022141	ParameterType	sljit_si		1021614	0					
ANR	1022142	Identifier	dst		1021614	1					
ANR	1022143	Parameter	sljit_sw dstw	2479:15:77099:77111	1021614	3	True				
ANR	1022144	ParameterType	sljit_sw		1021614	0					
ANR	1022145	Identifier	dstw		1021614	1					
ANR	1022146	Parameter	sljit_si src	2480:1:77115:77126	1021614	4	True				
ANR	1022147	ParameterType	sljit_si		1021614	0					
ANR	1022148	Identifier	src		1021614	1					
ANR	1022149	Parameter	sljit_sw srcw	2480:15:77129:77141	1021614	5	True				
ANR	1022150	ParameterType	sljit_sw		1021614	0					
ANR	1022151	Identifier	srcw		1021614	1					
ANR	1022152	Parameter	sljit_si type	2481:1:77145:77157	1021614	6	True				
ANR	1022153	ParameterType	sljit_si		1021614	0					
ANR	1022154	Identifier	type		1021614	1					
ANR	1022155	CFGEntryNode	ENTRY		1021614		True				
ANR	1022156	CFGExitNode	EXIT		1021614		True				
ANR	1022157	Symbol	SLJIT_AND		1021614						
ANR	1022158	Symbol	TMP_REG2		1021614						
ANR	1022159	Symbol	AND_DP		1021614						
ANR	1022160	Symbol	TMP_REG1		1021614						
ANR	1022161	Symbol	compiler -> cache_argw		1021614						
ANR	1022162	Symbol	dst		1021614						
ANR	1022163	Symbol	LOAD_DATA		1021614						
ANR	1022164	Symbol	ORR_DP		1021614						
ANR	1022165	Symbol	SLJIT_MEM		1021614						
ANR	1022166	Symbol	flags		1021614						
ANR	1022167	Symbol	SLJIT_OR		1021614						
ANR	1022168	Symbol	SLJIT_ADD		1021614						
ANR	1022169	Symbol	* compiler		1021614						
ANR	1022170	Symbol	type		1021614						
ANR	1022171	Symbol	SLJIT_XOR		1021614						
ANR	1022172	Symbol	SLJIT_SET_E		1021614						
ANR	1022173	Symbol	dst_r		1021614						
ANR	1022174	Symbol	GET_OPCODE		1021614						
ANR	1022175	Symbol	GET_ALL_FLAGS		1021614						
ANR	1022176	Symbol	MOV_DP		1021614						
ANR	1022177	Symbol	SLJIT_IMM		1021614						
ANR	1022178	Symbol	load_immediate		1021614						
ANR	1022179	Symbol	SRC2_IMM		1021614						
ANR	1022180	Symbol	compiler		1021614						
ANR	1022181	Symbol	check_sljit_emit_op_flags		1021614						
ANR	1022182	Symbol	WORD_DATA		1021614						
ANR	1022183	Symbol	cc		1021614						
ANR	1022184	Symbol	op		1021614						
ANR	1022185	Symbol	get_cc		1021614						
ANR	1022186	Symbol	push_inst		1021614						
ANR	1022187	Symbol	FAST_IS_REG		1021614						
ANR	1022188	Symbol	src		1021614						
ANR	1022189	Symbol	srcw		1021614						
ANR	1022190	Symbol	compiler -> cache_arg		1021614						
ANR	1022191	Symbol	emit_op_mem2		1021614						
ANR	1022192	Symbol	emit_op_mem		1021614						
ANR	1022193	Symbol	SLJIT_SUCCESS		1021614						
ANR	1022194	Symbol	SET_FLAGS		1021614						
ANR	1022195	Symbol	ins		1021614						
ANR	1022196	Symbol	~COND_MASK		1021614						
ANR	1022197	Symbol	SLJIT_UNUSED		1021614						
ANR	1022198	Symbol	RM		1021614						
ANR	1022199	Symbol	dstw		1021614						
ANR	1022200	Symbol	EOR_DP		1021614						
ANR	1022201	Symbol	EMIT_DATA_PROCESS_INS		1021614						
ANR	1022202	Function	sljit_emit_const	2531:25:79191:80044							
ANR	1022203	FunctionDef	"sljit_emit_const (struct sljit_compiler * compiler , sljit_si dst , sljit_sw dstw , sljit_sw init_value)"		1022202	0					
ANR	1022204	CompoundStatement		2532:0:79311:80044	1022202	0					
ANR	1022205	IdentifierDeclStatement	struct sljit_const * const_ ;	2533:1:79314:79340	1022202	0	True				
ANR	1022206	IdentifierDecl	* const_		1022202	0					
ANR	1022207	IdentifierDeclType	struct sljit_const *		1022202	0					
ANR	1022208	Identifier	const_		1022202	1					
ANR	1022209	IdentifierDeclStatement	sljit_si reg ;	2534:1:79343:79355	1022202	1	True				
ANR	1022210	IdentifierDecl	reg		1022202	0					
ANR	1022211	IdentifierDeclType	sljit_si		1022202	0					
ANR	1022212	Identifier	reg		1022202	1					
ANR	1022213	ExpressionStatement	CHECK_ERROR_PTR ( )	2536:1:79359:79376	1022202	2	True				
ANR	1022214	CallExpression	CHECK_ERROR_PTR ( )		1022202	0					
ANR	1022215	Callee	CHECK_ERROR_PTR		1022202	0					
ANR	1022216	Identifier	CHECK_ERROR_PTR		1022202	0					
ANR	1022217	ArgumentList			1022202	1					
ANR	1022218	ExpressionStatement	"CHECK_PTR ( check_sljit_emit_const ( compiler , dst , dstw , init_value ) )"	2537:1:79379:79445	1022202	3	True				
ANR	1022219	CallExpression	"CHECK_PTR ( check_sljit_emit_const ( compiler , dst , dstw , init_value ) )"		1022202	0					
ANR	1022220	Callee	CHECK_PTR		1022202	0					
ANR	1022221	Identifier	CHECK_PTR		1022202	0					
ANR	1022222	ArgumentList	"check_sljit_emit_const ( compiler , dst , dstw , init_value )"		1022202	1					
ANR	1022223	Argument	"check_sljit_emit_const ( compiler , dst , dstw , init_value )"		1022202	0					
ANR	1022224	CallExpression	"check_sljit_emit_const ( compiler , dst , dstw , init_value )"		1022202	0					
ANR	1022225	Callee	check_sljit_emit_const		1022202	0					
ANR	1022226	Identifier	check_sljit_emit_const		1022202	0					
ANR	1022227	ArgumentList	compiler		1022202	1					
ANR	1022228	Argument	compiler		1022202	0					
ANR	1022229	Identifier	compiler		1022202	0					
ANR	1022230	Argument	dst		1022202	1					
ANR	1022231	Identifier	dst		1022202	0					
ANR	1022232	Argument	dstw		1022202	2					
ANR	1022233	Identifier	dstw		1022202	0					
ANR	1022234	Argument	init_value		1022202	3					
ANR	1022235	Identifier	init_value		1022202	0					
ANR	1022236	ExpressionStatement	"ADJUST_LOCAL_OFFSET ( dst , dstw )"	2538:1:79448:79478	1022202	4	True				
ANR	1022237	CallExpression	"ADJUST_LOCAL_OFFSET ( dst , dstw )"		1022202	0					
ANR	1022238	Callee	ADJUST_LOCAL_OFFSET		1022202	0					
ANR	1022239	Identifier	ADJUST_LOCAL_OFFSET		1022202	0					
ANR	1022240	ArgumentList	dst		1022202	1					
ANR	1022241	Argument	dst		1022202	0					
ANR	1022242	Identifier	dst		1022202	0					
ANR	1022243	Argument	dstw		1022202	1					
ANR	1022244	Identifier	dstw		1022202	0					
ANR	1022245	ExpressionStatement	"const_ = ( struct sljit_const * ) ensure_abuf ( compiler , sizeof ( struct sljit_const ) )"	2540:1:79482:79561	1022202	5	True				
ANR	1022246	AssignmentExpression	"const_ = ( struct sljit_const * ) ensure_abuf ( compiler , sizeof ( struct sljit_const ) )"		1022202	0		=			
ANR	1022247	Identifier	const_		1022202	0					
ANR	1022248	CastExpression	"( struct sljit_const * ) ensure_abuf ( compiler , sizeof ( struct sljit_const ) )"		1022202	1					
ANR	1022249	CastTarget	struct sljit_const *		1022202	0					
ANR	1022250	CallExpression	"ensure_abuf ( compiler , sizeof ( struct sljit_const ) )"		1022202	1					
ANR	1022251	Callee	ensure_abuf		1022202	0					
ANR	1022252	Identifier	ensure_abuf		1022202	0					
ANR	1022253	ArgumentList	compiler		1022202	1					
ANR	1022254	Argument	compiler		1022202	0					
ANR	1022255	Identifier	compiler		1022202	0					
ANR	1022256	Argument	sizeof ( struct sljit_const )		1022202	1					
ANR	1022257	SizeofExpression	sizeof ( struct sljit_const )		1022202	0					
ANR	1022258	Sizeof	sizeof		1022202	0					
ANR	1022259	SizeofOperand	struct sljit_const		1022202	1					
ANR	1022260	ExpressionStatement	PTR_FAIL_IF ( ! const_ )	2541:1:79564:79584	1022202	6	True				
ANR	1022261	CallExpression	PTR_FAIL_IF ( ! const_ )		1022202	0					
ANR	1022262	Callee	PTR_FAIL_IF		1022202	0					
ANR	1022263	Identifier	PTR_FAIL_IF		1022202	0					
ANR	1022264	ArgumentList	! const_		1022202	1					
ANR	1022265	Argument	! const_		1022202	0					
ANR	1022266	UnaryOperationExpression	! const_		1022202	0					
ANR	1022267	UnaryOperator	!		1022202	0					
ANR	1022268	Identifier	const_		1022202	1					
ANR	1022269	ExpressionStatement	reg = SLOW_IS_REG ( dst ) ? dst : TMP_REG2	2543:1:79588:79627	1022202	7	True				
ANR	1022270	AssignmentExpression	reg = SLOW_IS_REG ( dst ) ? dst : TMP_REG2		1022202	0		=			
ANR	1022271	Identifier	reg		1022202	0					
ANR	1022272	ConditionalExpression	SLOW_IS_REG ( dst ) ? dst : TMP_REG2		1022202	1					
ANR	1022273	Condition	SLOW_IS_REG ( dst )		1022202	0					
ANR	1022274	CallExpression	SLOW_IS_REG ( dst )		1022202	0					
ANR	1022275	Callee	SLOW_IS_REG		1022202	0					
ANR	1022276	Identifier	SLOW_IS_REG		1022202	0					
ANR	1022277	ArgumentList	dst		1022202	1					
ANR	1022278	Argument	dst		1022202	0					
ANR	1022279	Identifier	dst		1022202	0					
ANR	1022280	Identifier	dst		1022202	1					
ANR	1022281	Identifier	TMP_REG2		1022202	2					
ANR	1022282	ExpressionStatement	"PTR_FAIL_IF ( push_inst_with_unique_literal ( compiler , EMIT_DATA_TRANSFER ( WORD_DATA | LOAD_DATA , 1 , 0 , reg , TMP_PC , 0 ) , init_value ) )"	2546:1:79688:79817	1022202	8	True				
ANR	1022283	CallExpression	"PTR_FAIL_IF ( push_inst_with_unique_literal ( compiler , EMIT_DATA_TRANSFER ( WORD_DATA | LOAD_DATA , 1 , 0 , reg , TMP_PC , 0 ) , init_value ) )"		1022202	0					
ANR	1022284	Callee	PTR_FAIL_IF		1022202	0					
ANR	1022285	Identifier	PTR_FAIL_IF		1022202	0					
ANR	1022286	ArgumentList	"push_inst_with_unique_literal ( compiler , EMIT_DATA_TRANSFER ( WORD_DATA | LOAD_DATA , 1 , 0 , reg , TMP_PC , 0 ) , init_value )"		1022202	1					
ANR	1022287	Argument	"push_inst_with_unique_literal ( compiler , EMIT_DATA_TRANSFER ( WORD_DATA | LOAD_DATA , 1 , 0 , reg , TMP_PC , 0 ) , init_value )"		1022202	0					
ANR	1022288	CallExpression	"push_inst_with_unique_literal ( compiler , EMIT_DATA_TRANSFER ( WORD_DATA | LOAD_DATA , 1 , 0 , reg , TMP_PC , 0 ) , init_value )"		1022202	0					
ANR	1022289	Callee	push_inst_with_unique_literal		1022202	0					
ANR	1022290	Identifier	push_inst_with_unique_literal		1022202	0					
ANR	1022291	ArgumentList	compiler		1022202	1					
ANR	1022292	Argument	compiler		1022202	0					
ANR	1022293	Identifier	compiler		1022202	0					
ANR	1022294	Argument	"EMIT_DATA_TRANSFER ( WORD_DATA | LOAD_DATA , 1 , 0 , reg , TMP_PC , 0 )"		1022202	1					
ANR	1022295	CallExpression	"EMIT_DATA_TRANSFER ( WORD_DATA | LOAD_DATA , 1 , 0 , reg , TMP_PC , 0 )"		1022202	0					
ANR	1022296	Callee	EMIT_DATA_TRANSFER		1022202	0					
ANR	1022297	Identifier	EMIT_DATA_TRANSFER		1022202	0					
ANR	1022298	ArgumentList	WORD_DATA | LOAD_DATA		1022202	1					
ANR	1022299	Argument	WORD_DATA | LOAD_DATA		1022202	0					
ANR	1022300	InclusiveOrExpression	WORD_DATA | LOAD_DATA		1022202	0		|			
ANR	1022301	Identifier	WORD_DATA		1022202	0					
ANR	1022302	Identifier	LOAD_DATA		1022202	1					
ANR	1022303	Argument	1		1022202	1					
ANR	1022304	PrimaryExpression	1		1022202	0					
ANR	1022305	Argument	0		1022202	2					
ANR	1022306	PrimaryExpression	0		1022202	0					
ANR	1022307	Argument	reg		1022202	3					
ANR	1022308	Identifier	reg		1022202	0					
ANR	1022309	Argument	TMP_PC		1022202	4					
ANR	1022310	Identifier	TMP_PC		1022202	0					
ANR	1022311	Argument	0		1022202	5					
ANR	1022312	PrimaryExpression	0		1022202	0					
ANR	1022313	Argument	init_value		1022202	2					
ANR	1022314	Identifier	init_value		1022202	0					
ANR	1022315	ExpressionStatement	compiler -> patches ++	2547:1:79820:79839	1022202	9	True				
ANR	1022316	PostIncDecOperationExpression	compiler -> patches ++		1022202	0					
ANR	1022317	PtrMemberAccess	compiler -> patches		1022202	0					
ANR	1022318	Identifier	compiler		1022202	0					
ANR	1022319	Identifier	patches		1022202	1					
ANR	1022320	IncDec	++		1022202	1					
ANR	1022321	ExpressionStatement	"set_const ( const_ , compiler )"	2551:1:79906:79933	1022202	10	True				
ANR	1022322	CallExpression	"set_const ( const_ , compiler )"		1022202	0					
ANR	1022323	Callee	set_const		1022202	0					
ANR	1022324	Identifier	set_const		1022202	0					
ANR	1022325	ArgumentList	const_		1022202	1					
ANR	1022326	Argument	const_		1022202	0					
ANR	1022327	Identifier	const_		1022202	0					
ANR	1022328	Argument	compiler		1022202	1					
ANR	1022329	Identifier	compiler		1022202	0					
ANR	1022330	IfStatement	if ( dst & SLJIT_MEM )		1022202	11					
ANR	1022331	Condition	dst & SLJIT_MEM	2553:5:79941:79955	1022202	0	True				
ANR	1022332	BitAndExpression	dst & SLJIT_MEM		1022202	0		&			
ANR	1022333	Identifier	dst		1022202	0					
ANR	1022334	Identifier	SLJIT_MEM		1022202	1					
ANR	1022335	ExpressionStatement	"PTR_FAIL_IF ( emit_op_mem ( compiler , WORD_DATA , TMP_REG2 , dst , dstw ) )"	2554:2:79960:80026	1022202	1	True				
ANR	1022336	CallExpression	"PTR_FAIL_IF ( emit_op_mem ( compiler , WORD_DATA , TMP_REG2 , dst , dstw ) )"		1022202	0					
ANR	1022337	Callee	PTR_FAIL_IF		1022202	0					
ANR	1022338	Identifier	PTR_FAIL_IF		1022202	0					
ANR	1022339	ArgumentList	"emit_op_mem ( compiler , WORD_DATA , TMP_REG2 , dst , dstw )"		1022202	1					
ANR	1022340	Argument	"emit_op_mem ( compiler , WORD_DATA , TMP_REG2 , dst , dstw )"		1022202	0					
ANR	1022341	CallExpression	"emit_op_mem ( compiler , WORD_DATA , TMP_REG2 , dst , dstw )"		1022202	0					
ANR	1022342	Callee	emit_op_mem		1022202	0					
ANR	1022343	Identifier	emit_op_mem		1022202	0					
ANR	1022344	ArgumentList	compiler		1022202	1					
ANR	1022345	Argument	compiler		1022202	0					
ANR	1022346	Identifier	compiler		1022202	0					
ANR	1022347	Argument	WORD_DATA		1022202	1					
ANR	1022348	Identifier	WORD_DATA		1022202	0					
ANR	1022349	Argument	TMP_REG2		1022202	2					
ANR	1022350	Identifier	TMP_REG2		1022202	0					
ANR	1022351	Argument	dst		1022202	3					
ANR	1022352	Identifier	dst		1022202	0					
ANR	1022353	Argument	dstw		1022202	4					
ANR	1022354	Identifier	dstw		1022202	0					
ANR	1022355	ReturnStatement	return const_ ;	2555:1:80029:80042	1022202	12	True				
ANR	1022356	Identifier	const_		1022202	0					
ANR	1022357	ReturnType	struct sljit_const *		1022202	1					
ANR	1022358	Identifier	sljit_emit_const		1022202	2					
ANR	1022359	ParameterList	"struct sljit_compiler * compiler , sljit_si dst , sljit_sw dstw , sljit_sw init_value"		1022202	3					
ANR	1022360	Parameter	struct sljit_compiler * compiler	2531:62:79228:79258	1022202	0	True				
ANR	1022361	ParameterType	struct sljit_compiler *		1022202	0					
ANR	1022362	Identifier	compiler		1022202	1					
ANR	1022363	Parameter	sljit_si dst	2531:95:79261:79272	1022202	1	True				
ANR	1022364	ParameterType	sljit_si		1022202	0					
ANR	1022365	Identifier	dst		1022202	1					
ANR	1022366	Parameter	sljit_sw dstw	2531:109:79275:79287	1022202	2	True				
ANR	1022367	ParameterType	sljit_sw		1022202	0					
ANR	1022368	Identifier	dstw		1022202	1					
ANR	1022369	Parameter	sljit_sw init_value	2531:124:79290:79308	1022202	3	True				
ANR	1022370	ParameterType	sljit_sw		1022202	0					
ANR	1022371	Identifier	init_value		1022202	1					
ANR	1022372	CFGEntryNode	ENTRY		1022202		True				
ANR	1022373	CFGExitNode	EXIT		1022202		True				
ANR	1022374	Symbol	check_sljit_emit_const		1022202						
ANR	1022375	Symbol	TMP_REG2		1022202						
ANR	1022376	Symbol	TMP_PC		1022202						
ANR	1022377	Symbol	const_		1022202						
ANR	1022378	Symbol	dst		1022202						
ANR	1022379	Symbol	LOAD_DATA		1022202						
ANR	1022380	Symbol	SLJIT_MEM		1022202						
ANR	1022381	Symbol	compiler -> patches		1022202						
ANR	1022382	Symbol	emit_op_mem		1022202						
ANR	1022383	Symbol	SLOW_IS_REG		1022202						
ANR	1022384	Symbol	ensure_abuf		1022202						
ANR	1022385	Symbol	* compiler		1022202						
ANR	1022386	Symbol	push_inst_with_unique_literal		1022202						
ANR	1022387	Symbol	reg		1022202						
ANR	1022388	Symbol	compiler		1022202						
ANR	1022389	Symbol	init_value		1022202						
ANR	1022390	Symbol	dstw		1022202						
ANR	1022391	Symbol	WORD_DATA		1022202						
ANR	1022392	Symbol	EMIT_DATA_TRANSFER		1022202						
ANR	1022393	Function	sljit_set_jump_addr	2558:0:80047:80175							
ANR	1022394	FunctionDef	"sljit_set_jump_addr (sljit_uw addr , sljit_uw new_addr)"		1022393	0					
ANR	1022395	CompoundStatement		2559:0:80131:80175	1022393	0					
ANR	1022396	ExpressionStatement	"inline_set_jump_addr ( addr , new_addr , 1 )"	2560:1:80134:80173	1022393	0	True				
ANR	1022397	CallExpression	"inline_set_jump_addr ( addr , new_addr , 1 )"		1022393	0					
ANR	1022398	Callee	inline_set_jump_addr		1022393	0					
ANR	1022399	Identifier	inline_set_jump_addr		1022393	0					
ANR	1022400	ArgumentList	addr		1022393	1					
ANR	1022401	Argument	addr		1022393	0					
ANR	1022402	Identifier	addr		1022393	0					
ANR	1022403	Argument	new_addr		1022393	1					
ANR	1022404	Identifier	new_addr		1022393	0					
ANR	1022405	Argument	1		1022393	2					
ANR	1022406	PrimaryExpression	1		1022393	0					
ANR	1022407	ReturnType	SLJIT_API_FUNC_ATTRIBUTE void		1022393	1					
ANR	1022408	Identifier	sljit_set_jump_addr		1022393	2					
ANR	1022409	ParameterList	"sljit_uw addr , sljit_uw new_addr"		1022393	3					
ANR	1022410	Parameter	sljit_uw addr	2558:50:80097:80109	1022393	0	True				
ANR	1022411	ParameterType	sljit_uw		1022393	0					
ANR	1022412	Identifier	addr		1022393	1					
ANR	1022413	Parameter	sljit_uw new_addr	2558:65:80112:80128	1022393	1	True				
ANR	1022414	ParameterType	sljit_uw		1022393	0					
ANR	1022415	Identifier	new_addr		1022393	1					
ANR	1022416	CFGEntryNode	ENTRY		1022393		True				
ANR	1022417	CFGExitNode	EXIT		1022393		True				
ANR	1022418	Symbol	addr		1022393						
ANR	1022419	Symbol	new_addr		1022393						
ANR	1022420	Function	sljit_set_const	2563:0:80178:80306							
ANR	1022421	FunctionDef	"sljit_set_const (sljit_uw addr , sljit_sw new_constant)"		1022420	0					
ANR	1022422	CompoundStatement		2564:0:80262:80306	1022420	0					
ANR	1022423	ExpressionStatement	"inline_set_const ( addr , new_constant , 1 )"	2565:1:80265:80304	1022420	0	True				
ANR	1022424	CallExpression	"inline_set_const ( addr , new_constant , 1 )"		1022420	0					
ANR	1022425	Callee	inline_set_const		1022420	0					
ANR	1022426	Identifier	inline_set_const		1022420	0					
ANR	1022427	ArgumentList	addr		1022420	1					
ANR	1022428	Argument	addr		1022420	0					
ANR	1022429	Identifier	addr		1022420	0					
ANR	1022430	Argument	new_constant		1022420	1					
ANR	1022431	Identifier	new_constant		1022420	0					
ANR	1022432	Argument	1		1022420	2					
ANR	1022433	PrimaryExpression	1		1022420	0					
ANR	1022434	ReturnType	SLJIT_API_FUNC_ATTRIBUTE void		1022420	1					
ANR	1022435	Identifier	sljit_set_const		1022420	2					
ANR	1022436	ParameterList	"sljit_uw addr , sljit_sw new_constant"		1022420	3					
ANR	1022437	Parameter	sljit_uw addr	2563:46:80224:80236	1022420	0	True				
ANR	1022438	ParameterType	sljit_uw		1022420	0					
ANR	1022439	Identifier	addr		1022420	1					
ANR	1022440	Parameter	sljit_sw new_constant	2563:61:80239:80259	1022420	1	True				
ANR	1022441	ParameterType	sljit_sw		1022420	0					
ANR	1022442	Identifier	new_constant		1022420	1					
ANR	1022443	CFGEntryNode	ENTRY		1022420		True				
ANR	1022444	CFGExitNode	EXIT		1022420		True				
ANR	1022445	Symbol	new_constant		1022420						
ANR	1022446	Symbol	addr		1022420						
