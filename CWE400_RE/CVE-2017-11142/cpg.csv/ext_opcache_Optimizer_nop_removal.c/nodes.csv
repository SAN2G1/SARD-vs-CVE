command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	865471	File	data/converged/CVE-2017-11142_php-src/ext_opcache_Optimizer_nop_removal.c								
ANR	865472	Function	nop_removal	5:0:34:3693							
ANR	865473	FunctionDef	nop_removal (zend_op_array * op_array)		865472	0					
ANR	865474	CompoundStatement		6:0:83:3693	865472	0					
ANR	865475	IdentifierDeclStatement	"zend_op * end , * opline ;"	7:1:86:107	865472	0	True				
ANR	865476	IdentifierDecl	* end		865472	0					
ANR	865477	IdentifierDeclType	zend_op *		865472	0					
ANR	865478	Identifier	end		865472	1					
ANR	865479	IdentifierDecl	* opline		865472	1					
ANR	865480	IdentifierDeclType	zend_op *		865472	0					
ANR	865481	Identifier	opline		865472	1					
ANR	865482	IdentifierDeclStatement	"zend_uint new_count , i , shift ;"	8:1:110:139	865472	1	True				
ANR	865483	IdentifierDecl	new_count		865472	0					
ANR	865484	IdentifierDeclType	zend_uint		865472	0					
ANR	865485	Identifier	new_count		865472	1					
ANR	865486	IdentifierDecl	i		865472	1					
ANR	865487	IdentifierDeclType	zend_uint		865472	0					
ANR	865488	Identifier	i		865472	1					
ANR	865489	IdentifierDecl	shift		865472	2					
ANR	865490	IdentifierDeclType	zend_uint		865472	0					
ANR	865491	Identifier	shift		865472	1					
ANR	865492	IdentifierDeclStatement	int j ;	9:1:142:147	865472	2	True				
ANR	865493	IdentifierDecl	j		865472	0					
ANR	865494	IdentifierDeclType	int		865472	0					
ANR	865495	Identifier	j		865472	1					
ANR	865496	IdentifierDeclStatement	zend_uint * shiftlist ;	10:1:150:170	865472	3	True				
ANR	865497	IdentifierDecl	* shiftlist		865472	0					
ANR	865498	IdentifierDeclType	zend_uint *		865472	0					
ANR	865499	Identifier	shiftlist		865472	1					
ANR	865500	ExpressionStatement	ALLOCA_FLAG ( use_heap )	11:1:173:194	865472	4	True				
ANR	865501	CallExpression	ALLOCA_FLAG ( use_heap )		865472	0					
ANR	865502	Callee	ALLOCA_FLAG		865472	0					
ANR	865503	Identifier	ALLOCA_FLAG		865472	0					
ANR	865504	ArgumentList	use_heap		865472	1					
ANR	865505	Argument	use_heap		865472	0					
ANR	865506	Identifier	use_heap		865472	0					
ANR	865507	ExpressionStatement	shiftlist = ( zend_uint * ) DO_ALLOCA ( sizeof ( zend_uint ) * op_array -> last )	13:1:198:268	865472	5	True				
ANR	865508	AssignmentExpression	shiftlist = ( zend_uint * ) DO_ALLOCA ( sizeof ( zend_uint ) * op_array -> last )		865472	0		=			
ANR	865509	Identifier	shiftlist		865472	0					
ANR	865510	CastExpression	( zend_uint * ) DO_ALLOCA ( sizeof ( zend_uint ) * op_array -> last )		865472	1					
ANR	865511	CastTarget	zend_uint *		865472	0					
ANR	865512	CallExpression	DO_ALLOCA ( sizeof ( zend_uint ) * op_array -> last )		865472	1					
ANR	865513	Callee	DO_ALLOCA		865472	0					
ANR	865514	Identifier	DO_ALLOCA		865472	0					
ANR	865515	ArgumentList	sizeof ( zend_uint ) * op_array -> last		865472	1					
ANR	865516	Argument	sizeof ( zend_uint ) * op_array -> last		865472	0					
ANR	865517	MultiplicativeExpression	sizeof ( zend_uint ) * op_array -> last		865472	0		*			
ANR	865518	SizeofExpression	sizeof ( zend_uint )		865472	0					
ANR	865519	Sizeof	sizeof		865472	0					
ANR	865520	SizeofOperand	zend_uint		865472	1					
ANR	865521	PtrMemberAccess	op_array -> last		865472	1					
ANR	865522	Identifier	op_array		865472	0					
ANR	865523	Identifier	last		865472	1					
ANR	865524	ExpressionStatement	i = new_count = shift = 0	14:1:271:296	865472	6	True				
ANR	865525	AssignmentExpression	i = new_count = shift = 0		865472	0		=			
ANR	865526	Identifier	i		865472	0					
ANR	865527	AssignmentExpression	new_count = shift = 0		865472	1		=			
ANR	865528	Identifier	new_count		865472	0					
ANR	865529	AssignmentExpression	shift = 0		865472	1		=			
ANR	865530	Identifier	shift		865472	0					
ANR	865531	PrimaryExpression	0		865472	1					
ANR	865532	ExpressionStatement	end = op_array -> opcodes + op_array -> last	15:1:299:339	865472	7	True				
ANR	865533	AssignmentExpression	end = op_array -> opcodes + op_array -> last		865472	0		=			
ANR	865534	Identifier	end		865472	0					
ANR	865535	AdditiveExpression	op_array -> opcodes + op_array -> last		865472	1		+			
ANR	865536	PtrMemberAccess	op_array -> opcodes		865472	0					
ANR	865537	Identifier	op_array		865472	0					
ANR	865538	Identifier	opcodes		865472	1					
ANR	865539	PtrMemberAccess	op_array -> last		865472	1					
ANR	865540	Identifier	op_array		865472	0					
ANR	865541	Identifier	last		865472	1					
ANR	865542	ForStatement	for ( opline = op_array -> opcodes ; opline < end ; opline ++ )		865472	8					
ANR	865543	ForInit	opline = op_array -> opcodes ;	16:6:347:373	865472	0	True				
ANR	865544	AssignmentExpression	opline = op_array -> opcodes		865472	0		=			
ANR	865545	Identifier	opline		865472	0					
ANR	865546	PtrMemberAccess	op_array -> opcodes		865472	1					
ANR	865547	Identifier	op_array		865472	0					
ANR	865548	Identifier	opcodes		865472	1					
ANR	865549	Condition	opline < end	16:34:375:386	865472	1	True				
ANR	865550	RelationalExpression	opline < end		865472	0		<			
ANR	865551	Identifier	opline		865472	0					
ANR	865552	Identifier	end		865472	1					
ANR	865553	PostIncDecOperationExpression	opline ++	16:48:389:396	865472	2	True				
ANR	865554	Identifier	opline		865472	0					
ANR	865555	IncDec	++		865472	1					
ANR	865556	CompoundStatement		11:58:315:315	865472	3					
ANR	865557	IfStatement	if ( opline -> opcode == ZEND_GOTO && Z_TYPE ( ZEND_OP2_LITERAL ( opline ) ) != IS_LONG )		865472	0					
ANR	865558	Condition	opline -> opcode == ZEND_GOTO && Z_TYPE ( ZEND_OP2_LITERAL ( opline ) ) != IS_LONG	20:6:512:588	865472	0	True				
ANR	865559	AndExpression	opline -> opcode == ZEND_GOTO && Z_TYPE ( ZEND_OP2_LITERAL ( opline ) ) != IS_LONG		865472	0		&&			
ANR	865560	EqualityExpression	opline -> opcode == ZEND_GOTO		865472	0		==			
ANR	865561	PtrMemberAccess	opline -> opcode		865472	0					
ANR	865562	Identifier	opline		865472	0					
ANR	865563	Identifier	opcode		865472	1					
ANR	865564	Identifier	ZEND_GOTO		865472	1					
ANR	865565	EqualityExpression	Z_TYPE ( ZEND_OP2_LITERAL ( opline ) ) != IS_LONG		865472	1		!=			
ANR	865566	CallExpression	Z_TYPE ( ZEND_OP2_LITERAL ( opline ) )		865472	0					
ANR	865567	Callee	Z_TYPE		865472	0					
ANR	865568	Identifier	Z_TYPE		865472	0					
ANR	865569	ArgumentList	ZEND_OP2_LITERAL ( opline )		865472	1					
ANR	865570	Argument	ZEND_OP2_LITERAL ( opline )		865472	0					
ANR	865571	CallExpression	ZEND_OP2_LITERAL ( opline )		865472	0					
ANR	865572	Callee	ZEND_OP2_LITERAL		865472	0					
ANR	865573	Identifier	ZEND_OP2_LITERAL		865472	0					
ANR	865574	ArgumentList	opline		865472	1					
ANR	865575	Argument	opline		865472	0					
ANR	865576	Identifier	opline		865472	0					
ANR	865577	Identifier	IS_LONG		865472	1					
ANR	865578	CompoundStatement		16:48:507:507	865472	1					
ANR	865579	ExpressionStatement	FREE_ALLOCA ( shiftlist )	23:3:652:674	865472	0	True				
ANR	865580	CallExpression	FREE_ALLOCA ( shiftlist )		865472	0					
ANR	865581	Callee	FREE_ALLOCA		865472	0					
ANR	865582	Identifier	FREE_ALLOCA		865472	0					
ANR	865583	ArgumentList	shiftlist		865472	1					
ANR	865584	Argument	shiftlist		865472	0					
ANR	865585	Identifier	shiftlist		865472	0					
ANR	865586	ReturnStatement	return ;	24:3:679:685	865472	1	True				
ANR	865587	IfStatement	if ( opline -> opcode == ZEND_JMP && ZEND_OP1 ( opline ) . opline_num > i )		865472	1					
ANR	865588	Condition	opline -> opcode == ZEND_JMP && ZEND_OP1 ( opline ) . opline_num > i	29:6:733:793	865472	0	True				
ANR	865589	AndExpression	opline -> opcode == ZEND_JMP && ZEND_OP1 ( opline ) . opline_num > i		865472	0		&&			
ANR	865590	EqualityExpression	opline -> opcode == ZEND_JMP		865472	0		==			
ANR	865591	PtrMemberAccess	opline -> opcode		865472	0					
ANR	865592	Identifier	opline		865472	0					
ANR	865593	Identifier	opcode		865472	1					
ANR	865594	Identifier	ZEND_JMP		865472	1					
ANR	865595	RelationalExpression	ZEND_OP1 ( opline ) . opline_num > i		865472	1		>			
ANR	865596	MemberAccess	ZEND_OP1 ( opline ) . opline_num		865472	0					
ANR	865597	CallExpression	ZEND_OP1 ( opline )		865472	0					
ANR	865598	Callee	ZEND_OP1		865472	0					
ANR	865599	Identifier	ZEND_OP1		865472	0					
ANR	865600	ArgumentList	opline		865472	1					
ANR	865601	Argument	opline		865472	0					
ANR	865602	Identifier	opline		865472	0					
ANR	865603	Identifier	opline_num		865472	1					
ANR	865604	Identifier	i		865472	1					
ANR	865605	CompoundStatement		26:3:772:841	865472	1					
ANR	865606	IdentifierDeclStatement	zend_op * target = op_array -> opcodes + ZEND_OP1 ( opline ) . opline_num - 1 ;	31:3:856:925	865472	0	True				
ANR	865607	IdentifierDecl	* target = op_array -> opcodes + ZEND_OP1 ( opline ) . opline_num - 1		865472	0					
ANR	865608	IdentifierDeclType	zend_op *		865472	0					
ANR	865609	Identifier	target		865472	1					
ANR	865610	AssignmentExpression	* target = op_array -> opcodes + ZEND_OP1 ( opline ) . opline_num - 1		865472	2		=			
ANR	865611	Identifier	target		865472	0					
ANR	865612	AdditiveExpression	op_array -> opcodes + ZEND_OP1 ( opline ) . opline_num - 1		865472	1		+			
ANR	865613	PtrMemberAccess	op_array -> opcodes		865472	0					
ANR	865614	Identifier	op_array		865472	0					
ANR	865615	Identifier	opcodes		865472	1					
ANR	865616	AdditiveExpression	ZEND_OP1 ( opline ) . opline_num - 1		865472	1		-			
ANR	865617	MemberAccess	ZEND_OP1 ( opline ) . opline_num		865472	0					
ANR	865618	CallExpression	ZEND_OP1 ( opline )		865472	0					
ANR	865619	Callee	ZEND_OP1		865472	0					
ANR	865620	Identifier	ZEND_OP1		865472	0					
ANR	865621	ArgumentList	opline		865472	1					
ANR	865622	Argument	opline		865472	0					
ANR	865623	Identifier	opline		865472	0					
ANR	865624	Identifier	opline_num		865472	1					
ANR	865625	PrimaryExpression	1		865472	1					
ANR	865626	WhileStatement	while ( target -> opcode == ZEND_NOP )		865472	1					
ANR	865627	Condition	target -> opcode == ZEND_NOP	33:10:938:963	865472	0	True				
ANR	865628	EqualityExpression	target -> opcode == ZEND_NOP		865472	0		==			
ANR	865629	PtrMemberAccess	target -> opcode		865472	0					
ANR	865630	Identifier	target		865472	0					
ANR	865631	Identifier	opcode		865472	1					
ANR	865632	Identifier	ZEND_NOP		865472	1					
ANR	865633	CompoundStatement		28:38:882:882	865472	1					
ANR	865634	ExpressionStatement	target --	34:4:972:980	865472	0	True				
ANR	865635	PostIncDecOperationExpression	target --		865472	0					
ANR	865636	Identifier	target		865472	0					
ANR	865637	IncDec	--		865472	1					
ANR	865638	IfStatement	if ( target == opline )		865472	2					
ANR	865639	Condition	target == opline	36:7:994:1009	865472	0	True				
ANR	865640	EqualityExpression	target == opline		865472	0		==			
ANR	865641	Identifier	target		865472	0					
ANR	865642	Identifier	opline		865472	1					
ANR	865643	CompoundStatement		31:25:928:928	865472	1					
ANR	865644	ExpressionStatement	opline -> opcode = ZEND_NOP	38:4:1038:1063	865472	0	True				
ANR	865645	AssignmentExpression	opline -> opcode = ZEND_NOP		865472	0		=			
ANR	865646	PtrMemberAccess	opline -> opcode		865472	0					
ANR	865647	Identifier	opline		865472	0					
ANR	865648	Identifier	opcode		865472	1					
ANR	865649	Identifier	ZEND_NOP		865472	1					
ANR	865650	ExpressionStatement	shiftlist [ i ++ ] = shift	42:2:1077:1099	865472	2	True				
ANR	865651	AssignmentExpression	shiftlist [ i ++ ] = shift		865472	0		=			
ANR	865652	ArrayIndexing	shiftlist [ i ++ ]		865472	0					
ANR	865653	Identifier	shiftlist		865472	0					
ANR	865654	PostIncDecOperationExpression	i ++		865472	1					
ANR	865655	Identifier	i		865472	0					
ANR	865656	IncDec	++		865472	1					
ANR	865657	Identifier	shift		865472	1					
ANR	865658	IfStatement	if ( opline -> opcode == ZEND_NOP )		865472	3					
ANR	865659	Condition	opline -> opcode == ZEND_NOP	43:6:1107:1132	865472	0	True				
ANR	865660	EqualityExpression	opline -> opcode == ZEND_NOP		865472	0		==			
ANR	865661	PtrMemberAccess	opline -> opcode		865472	0					
ANR	865662	Identifier	opline		865472	0					
ANR	865663	Identifier	opcode		865472	1					
ANR	865664	Identifier	ZEND_NOP		865472	1					
ANR	865665	CompoundStatement		38:34:1051:1051	865472	1					
ANR	865666	ExpressionStatement	shift ++	44:3:1140:1147	865472	0	True				
ANR	865667	PostIncDecOperationExpression	shift ++		865472	0					
ANR	865668	Identifier	shift		865472	0					
ANR	865669	IncDec	++		865472	1					
ANR	865670	ElseStatement	else		865472	0					
ANR	865671	CompoundStatement		40:9:1074:1074	865472	0					
ANR	865672	IfStatement	if ( shift )		865472	0					
ANR	865673	Condition	shift	46:7:1167:1171	865472	0	True				
ANR	865674	Identifier	shift		865472	0					
ANR	865675	CompoundStatement		41:14:1090:1090	865472	1					
ANR	865676	ExpressionStatement	op_array -> opcodes [ new_count ] = * opline	47:4:1180:1218	865472	0	True				
ANR	865677	AssignmentExpression	op_array -> opcodes [ new_count ] = * opline		865472	0		=			
ANR	865678	ArrayIndexing	op_array -> opcodes [ new_count ]		865472	0					
ANR	865679	PtrMemberAccess	op_array -> opcodes		865472	0					
ANR	865680	Identifier	op_array		865472	0					
ANR	865681	Identifier	opcodes		865472	1					
ANR	865682	Identifier	new_count		865472	1					
ANR	865683	UnaryOperationExpression	* opline		865472	1					
ANR	865684	UnaryOperator	*		865472	0					
ANR	865685	Identifier	opline		865472	1					
ANR	865686	ExpressionStatement	new_count ++	49:3:1228:1239	865472	1	True				
ANR	865687	PostIncDecOperationExpression	new_count ++		865472	0					
ANR	865688	Identifier	new_count		865472	0					
ANR	865689	IncDec	++		865472	1					
ANR	865690	IfStatement	if ( shift )		865472	9					
ANR	865691	Condition	shift	53:5:1254:1258	865472	0	True				
ANR	865692	Identifier	shift		865472	0					
ANR	865693	CompoundStatement		48:12:1177:1177	865472	1					
ANR	865694	ExpressionStatement	op_array -> last = new_count	54:2:1265:1291	865472	0	True				
ANR	865695	AssignmentExpression	op_array -> last = new_count		865472	0		=			
ANR	865696	PtrMemberAccess	op_array -> last		865472	0					
ANR	865697	Identifier	op_array		865472	0					
ANR	865698	Identifier	last		865472	1					
ANR	865699	Identifier	new_count		865472	1					
ANR	865700	ExpressionStatement	end = op_array -> opcodes + op_array -> last	55:2:1295:1335	865472	1	True				
ANR	865701	AssignmentExpression	end = op_array -> opcodes + op_array -> last		865472	0		=			
ANR	865702	Identifier	end		865472	0					
ANR	865703	AdditiveExpression	op_array -> opcodes + op_array -> last		865472	1		+			
ANR	865704	PtrMemberAccess	op_array -> opcodes		865472	0					
ANR	865705	Identifier	op_array		865472	0					
ANR	865706	Identifier	opcodes		865472	1					
ANR	865707	PtrMemberAccess	op_array -> last		865472	1					
ANR	865708	Identifier	op_array		865472	0					
ANR	865709	Identifier	last		865472	1					
ANR	865710	ForStatement	for ( opline = op_array -> opcodes ; opline < end ; opline ++ )		865472	2					
ANR	865711	ForInit	opline = op_array -> opcodes ;	58:7:1365:1391	865472	0	True				
ANR	865712	AssignmentExpression	opline = op_array -> opcodes		865472	0		=			
ANR	865713	Identifier	opline		865472	0					
ANR	865714	PtrMemberAccess	op_array -> opcodes		865472	1					
ANR	865715	Identifier	op_array		865472	0					
ANR	865716	Identifier	opcodes		865472	1					
ANR	865717	Condition	opline < end	58:35:1393:1402	865472	1	True				
ANR	865718	RelationalExpression	opline < end		865472	0		<			
ANR	865719	Identifier	opline		865472	0					
ANR	865720	Identifier	end		865472	1					
ANR	865721	PostIncDecOperationExpression	opline ++	58:47:1405:1412	865472	2	True				
ANR	865722	Identifier	opline		865472	0					
ANR	865723	IncDec	++		865472	1					
ANR	865724	CompoundStatement		53:57:1331:1331	865472	3					
ANR	865725	SwitchStatement	switch ( opline -> opcode )		865472	0					
ANR	865726	Condition	opline -> opcode	59:11:1428:1441	865472	0	True				
ANR	865727	PtrMemberAccess	opline -> opcode		865472	0					
ANR	865728	Identifier	opline		865472	0					
ANR	865729	Identifier	opcode		865472	1					
ANR	865730	CompoundStatement		54:27:1360:1360	865472	1					
ANR	865731	Label	case ZEND_JMP :	60:4:1450:1463	865472	0	True				
ANR	865732	Identifier	ZEND_JMP		865472	0					
ANR	865733	Label	case ZEND_GOTO :	62:4:1515:1529	865472	1	True				
ANR	865734	Identifier	ZEND_GOTO		865472	0					
ANR	865735	Label	case ZEND_FAST_CALL :	65:4:1587:1606	865472	2	True				
ANR	865736	Identifier	ZEND_FAST_CALL		865472	0					
ANR	865737	ExpressionStatement	ZEND_OP1 ( opline ) . opline_num -= shiftlist [ ZEND_OP1 ( opline ) . opline_num ]	67:5:1620:1689	865472	3	True				
ANR	865738	AssignmentExpression	ZEND_OP1 ( opline ) . opline_num -= shiftlist [ ZEND_OP1 ( opline ) . opline_num ]		865472	0		-=			
ANR	865739	MemberAccess	ZEND_OP1 ( opline ) . opline_num		865472	0					
ANR	865740	CallExpression	ZEND_OP1 ( opline )		865472	0					
ANR	865741	Callee	ZEND_OP1		865472	0					
ANR	865742	Identifier	ZEND_OP1		865472	0					
ANR	865743	ArgumentList	opline		865472	1					
ANR	865744	Argument	opline		865472	0					
ANR	865745	Identifier	opline		865472	0					
ANR	865746	Identifier	opline_num		865472	1					
ANR	865747	ArrayIndexing	shiftlist [ ZEND_OP1 ( opline ) . opline_num ]		865472	1					
ANR	865748	Identifier	shiftlist		865472	0					
ANR	865749	MemberAccess	ZEND_OP1 ( opline ) . opline_num		865472	1					
ANR	865750	CallExpression	ZEND_OP1 ( opline )		865472	0					
ANR	865751	Callee	ZEND_OP1		865472	0					
ANR	865752	Identifier	ZEND_OP1		865472	0					
ANR	865753	ArgumentList	opline		865472	1					
ANR	865754	Argument	opline		865472	0					
ANR	865755	Identifier	opline		865472	0					
ANR	865756	Identifier	opline_num		865472	1					
ANR	865757	BreakStatement	break ;	68:5:1696:1701	865472	4	True				
ANR	865758	Label	case ZEND_JMPZ :	69:4:1707:1721	865472	5	True				
ANR	865759	Identifier	ZEND_JMPZ		865472	0					
ANR	865760	Label	case ZEND_JMPNZ :	70:4:1727:1742	865472	6	True				
ANR	865761	Identifier	ZEND_JMPNZ		865472	0					
ANR	865762	Label	case ZEND_JMPZ_EX :	71:4:1748:1765	865472	7	True				
ANR	865763	Identifier	ZEND_JMPZ_EX		865472	0					
ANR	865764	Label	case ZEND_JMPNZ_EX :	72:4:1771:1789	865472	8	True				
ANR	865765	Identifier	ZEND_JMPNZ_EX		865472	0					
ANR	865766	Label	case ZEND_FE_FETCH :	73:4:1795:1813	865472	9	True				
ANR	865767	Identifier	ZEND_FE_FETCH		865472	0					
ANR	865768	Label	case ZEND_FE_RESET :	74:4:1819:1837	865472	10	True				
ANR	865769	Identifier	ZEND_FE_RESET		865472	0					
ANR	865770	Label	case ZEND_NEW :	75:4:1843:1856	865472	11	True				
ANR	865771	Identifier	ZEND_NEW		865472	0					
ANR	865772	Label	case ZEND_JMP_SET :	77:4:1908:1925	865472	12	True				
ANR	865773	Identifier	ZEND_JMP_SET		865472	0					
ANR	865774	Label	case ZEND_JMP_SET_VAR :	80:4:1983:2004	865472	13	True				
ANR	865775	Identifier	ZEND_JMP_SET_VAR		865472	0					
ANR	865776	ExpressionStatement	ZEND_OP2 ( opline ) . opline_num -= shiftlist [ ZEND_OP2 ( opline ) . opline_num ]	82:5:2018:2087	865472	14	True				
ANR	865777	AssignmentExpression	ZEND_OP2 ( opline ) . opline_num -= shiftlist [ ZEND_OP2 ( opline ) . opline_num ]		865472	0		-=			
ANR	865778	MemberAccess	ZEND_OP2 ( opline ) . opline_num		865472	0					
ANR	865779	CallExpression	ZEND_OP2 ( opline )		865472	0					
ANR	865780	Callee	ZEND_OP2		865472	0					
ANR	865781	Identifier	ZEND_OP2		865472	0					
ANR	865782	ArgumentList	opline		865472	1					
ANR	865783	Argument	opline		865472	0					
ANR	865784	Identifier	opline		865472	0					
ANR	865785	Identifier	opline_num		865472	1					
ANR	865786	ArrayIndexing	shiftlist [ ZEND_OP2 ( opline ) . opline_num ]		865472	1					
ANR	865787	Identifier	shiftlist		865472	0					
ANR	865788	MemberAccess	ZEND_OP2 ( opline ) . opline_num		865472	1					
ANR	865789	CallExpression	ZEND_OP2 ( opline )		865472	0					
ANR	865790	Callee	ZEND_OP2		865472	0					
ANR	865791	Identifier	ZEND_OP2		865472	0					
ANR	865792	ArgumentList	opline		865472	1					
ANR	865793	Argument	opline		865472	0					
ANR	865794	Identifier	opline		865472	0					
ANR	865795	Identifier	opline_num		865472	1					
ANR	865796	BreakStatement	break ;	83:5:2094:2099	865472	15	True				
ANR	865797	Label	case ZEND_JMPZNZ :	84:4:2105:2121	865472	16	True				
ANR	865798	Identifier	ZEND_JMPZNZ		865472	0					
ANR	865799	ExpressionStatement	ZEND_OP2 ( opline ) . opline_num -= shiftlist [ ZEND_OP2 ( opline ) . opline_num ]	85:5:2128:2197	865472	17	True				
ANR	865800	AssignmentExpression	ZEND_OP2 ( opline ) . opline_num -= shiftlist [ ZEND_OP2 ( opline ) . opline_num ]		865472	0		-=			
ANR	865801	MemberAccess	ZEND_OP2 ( opline ) . opline_num		865472	0					
ANR	865802	CallExpression	ZEND_OP2 ( opline )		865472	0					
ANR	865803	Callee	ZEND_OP2		865472	0					
ANR	865804	Identifier	ZEND_OP2		865472	0					
ANR	865805	ArgumentList	opline		865472	1					
ANR	865806	Argument	opline		865472	0					
ANR	865807	Identifier	opline		865472	0					
ANR	865808	Identifier	opline_num		865472	1					
ANR	865809	ArrayIndexing	shiftlist [ ZEND_OP2 ( opline ) . opline_num ]		865472	1					
ANR	865810	Identifier	shiftlist		865472	0					
ANR	865811	MemberAccess	ZEND_OP2 ( opline ) . opline_num		865472	1					
ANR	865812	CallExpression	ZEND_OP2 ( opline )		865472	0					
ANR	865813	Callee	ZEND_OP2		865472	0					
ANR	865814	Identifier	ZEND_OP2		865472	0					
ANR	865815	ArgumentList	opline		865472	1					
ANR	865816	Argument	opline		865472	0					
ANR	865817	Identifier	opline		865472	0					
ANR	865818	Identifier	opline_num		865472	1					
ANR	865819	ExpressionStatement	opline -> extended_value -= shiftlist [ opline -> extended_value ]	86:5:2204:2263	865472	18	True				
ANR	865820	AssignmentExpression	opline -> extended_value -= shiftlist [ opline -> extended_value ]		865472	0		-=			
ANR	865821	PtrMemberAccess	opline -> extended_value		865472	0					
ANR	865822	Identifier	opline		865472	0					
ANR	865823	Identifier	extended_value		865472	1					
ANR	865824	ArrayIndexing	shiftlist [ opline -> extended_value ]		865472	1					
ANR	865825	Identifier	shiftlist		865472	0					
ANR	865826	PtrMemberAccess	opline -> extended_value		865472	1					
ANR	865827	Identifier	opline		865472	0					
ANR	865828	Identifier	extended_value		865472	1					
ANR	865829	BreakStatement	break ;	87:5:2270:2275	865472	19	True				
ANR	865830	Label	case ZEND_CATCH :	88:4:2281:2296	865472	20	True				
ANR	865831	Identifier	ZEND_CATCH		865472	0					
ANR	865832	ExpressionStatement	opline -> extended_value -= shiftlist [ opline -> extended_value ]	89:5:2303:2362	865472	21	True				
ANR	865833	AssignmentExpression	opline -> extended_value -= shiftlist [ opline -> extended_value ]		865472	0		-=			
ANR	865834	PtrMemberAccess	opline -> extended_value		865472	0					
ANR	865835	Identifier	opline		865472	0					
ANR	865836	Identifier	extended_value		865472	1					
ANR	865837	ArrayIndexing	shiftlist [ opline -> extended_value ]		865472	1					
ANR	865838	Identifier	shiftlist		865472	0					
ANR	865839	PtrMemberAccess	opline -> extended_value		865472	1					
ANR	865840	Identifier	opline		865472	0					
ANR	865841	Identifier	extended_value		865472	1					
ANR	865842	BreakStatement	break ;	90:5:2369:2374	865472	22	True				
ANR	865843	ForStatement	for ( j = 0 ; j < op_array -> last_brk_cont ; j ++ )		865472	3					
ANR	865844	ForInit	j = 0 ;	95:7:2423:2428	865472	0	True				
ANR	865845	AssignmentExpression	j = 0		865472	0		=			
ANR	865846	Identifier	j		865472	0					
ANR	865847	PrimaryExpression	0		865472	1					
ANR	865848	Condition	j < op_array -> last_brk_cont	95:14:2430:2456	865472	1	True				
ANR	865849	RelationalExpression	j < op_array -> last_brk_cont		865472	0		<			
ANR	865850	Identifier	j		865472	0					
ANR	865851	PtrMemberAccess	op_array -> last_brk_cont		865472	1					
ANR	865852	Identifier	op_array		865472	0					
ANR	865853	Identifier	last_brk_cont		865472	1					
ANR	865854	PostIncDecOperationExpression	j ++	95:43:2459:2461	865472	2	True				
ANR	865855	Identifier	j		865472	0					
ANR	865856	IncDec	++		865472	1					
ANR	865857	CompoundStatement		90:48:2380:2380	865472	3					
ANR	865858	ExpressionStatement	op_array -> brk_cont_array [ j ] . brk -= shiftlist [ op_array -> brk_cont_array [ j ] . brk ]	96:3:2469:2546	865472	0	True				
ANR	865859	AssignmentExpression	op_array -> brk_cont_array [ j ] . brk -= shiftlist [ op_array -> brk_cont_array [ j ] . brk ]		865472	0		-=			
ANR	865860	MemberAccess	op_array -> brk_cont_array [ j ] . brk		865472	0					
ANR	865861	ArrayIndexing	op_array -> brk_cont_array [ j ]		865472	0					
ANR	865862	PtrMemberAccess	op_array -> brk_cont_array		865472	0					
ANR	865863	Identifier	op_array		865472	0					
ANR	865864	Identifier	brk_cont_array		865472	1					
ANR	865865	Identifier	j		865472	1					
ANR	865866	Identifier	brk		865472	1					
ANR	865867	ArrayIndexing	shiftlist [ op_array -> brk_cont_array [ j ] . brk ]		865472	1					
ANR	865868	Identifier	shiftlist		865472	0					
ANR	865869	MemberAccess	op_array -> brk_cont_array [ j ] . brk		865472	1					
ANR	865870	ArrayIndexing	op_array -> brk_cont_array [ j ]		865472	0					
ANR	865871	PtrMemberAccess	op_array -> brk_cont_array		865472	0					
ANR	865872	Identifier	op_array		865472	0					
ANR	865873	Identifier	brk_cont_array		865472	1					
ANR	865874	Identifier	j		865472	1					
ANR	865875	Identifier	brk		865472	1					
ANR	865876	ExpressionStatement	op_array -> brk_cont_array [ j ] . cont -= shiftlist [ op_array -> brk_cont_array [ j ] . cont ]	97:3:2551:2630	865472	1	True				
ANR	865877	AssignmentExpression	op_array -> brk_cont_array [ j ] . cont -= shiftlist [ op_array -> brk_cont_array [ j ] . cont ]		865472	0		-=			
ANR	865878	MemberAccess	op_array -> brk_cont_array [ j ] . cont		865472	0					
ANR	865879	ArrayIndexing	op_array -> brk_cont_array [ j ]		865472	0					
ANR	865880	PtrMemberAccess	op_array -> brk_cont_array		865472	0					
ANR	865881	Identifier	op_array		865472	0					
ANR	865882	Identifier	brk_cont_array		865472	1					
ANR	865883	Identifier	j		865472	1					
ANR	865884	Identifier	cont		865472	1					
ANR	865885	ArrayIndexing	shiftlist [ op_array -> brk_cont_array [ j ] . cont ]		865472	1					
ANR	865886	Identifier	shiftlist		865472	0					
ANR	865887	MemberAccess	op_array -> brk_cont_array [ j ] . cont		865472	1					
ANR	865888	ArrayIndexing	op_array -> brk_cont_array [ j ]		865472	0					
ANR	865889	PtrMemberAccess	op_array -> brk_cont_array		865472	0					
ANR	865890	Identifier	op_array		865472	0					
ANR	865891	Identifier	brk_cont_array		865472	1					
ANR	865892	Identifier	j		865472	1					
ANR	865893	Identifier	cont		865472	1					
ANR	865894	ExpressionStatement	op_array -> brk_cont_array [ j ] . start -= shiftlist [ op_array -> brk_cont_array [ j ] . start ]	98:3:2635:2716	865472	2	True				
ANR	865895	AssignmentExpression	op_array -> brk_cont_array [ j ] . start -= shiftlist [ op_array -> brk_cont_array [ j ] . start ]		865472	0		-=			
ANR	865896	MemberAccess	op_array -> brk_cont_array [ j ] . start		865472	0					
ANR	865897	ArrayIndexing	op_array -> brk_cont_array [ j ]		865472	0					
ANR	865898	PtrMemberAccess	op_array -> brk_cont_array		865472	0					
ANR	865899	Identifier	op_array		865472	0					
ANR	865900	Identifier	brk_cont_array		865472	1					
ANR	865901	Identifier	j		865472	1					
ANR	865902	Identifier	start		865472	1					
ANR	865903	ArrayIndexing	shiftlist [ op_array -> brk_cont_array [ j ] . start ]		865472	1					
ANR	865904	Identifier	shiftlist		865472	0					
ANR	865905	MemberAccess	op_array -> brk_cont_array [ j ] . start		865472	1					
ANR	865906	ArrayIndexing	op_array -> brk_cont_array [ j ]		865472	0					
ANR	865907	PtrMemberAccess	op_array -> brk_cont_array		865472	0					
ANR	865908	Identifier	op_array		865472	0					
ANR	865909	Identifier	brk_cont_array		865472	1					
ANR	865910	Identifier	j		865472	1					
ANR	865911	Identifier	start		865472	1					
ANR	865912	ForStatement	for ( j = 0 ; j < op_array -> last_try_catch ; j ++ )		865472	4					
ANR	865913	ForInit	j = 0 ;	102:7:2761:2766	865472	0	True				
ANR	865914	AssignmentExpression	j = 0		865472	0		=			
ANR	865915	Identifier	j		865472	0					
ANR	865916	PrimaryExpression	0		865472	1					
ANR	865917	Condition	j < op_array -> last_try_catch	102:14:2768:2795	865472	1	True				
ANR	865918	RelationalExpression	j < op_array -> last_try_catch		865472	0		<			
ANR	865919	Identifier	j		865472	0					
ANR	865920	PtrMemberAccess	op_array -> last_try_catch		865472	1					
ANR	865921	Identifier	op_array		865472	0					
ANR	865922	Identifier	last_try_catch		865472	1					
ANR	865923	PostIncDecOperationExpression	j ++	102:44:2798:2800	865472	2	True				
ANR	865924	Identifier	j		865472	0					
ANR	865925	IncDec	++		865472	1					
ANR	865926	CompoundStatement		97:49:2719:2719	865472	3					
ANR	865927	ExpressionStatement	op_array -> try_catch_array [ j ] . try_op -= shiftlist [ op_array -> try_catch_array [ j ] . try_op ]	103:3:2808:2893	865472	0	True				
ANR	865928	AssignmentExpression	op_array -> try_catch_array [ j ] . try_op -= shiftlist [ op_array -> try_catch_array [ j ] . try_op ]		865472	0		-=			
ANR	865929	MemberAccess	op_array -> try_catch_array [ j ] . try_op		865472	0					
ANR	865930	ArrayIndexing	op_array -> try_catch_array [ j ]		865472	0					
ANR	865931	PtrMemberAccess	op_array -> try_catch_array		865472	0					
ANR	865932	Identifier	op_array		865472	0					
ANR	865933	Identifier	try_catch_array		865472	1					
ANR	865934	Identifier	j		865472	1					
ANR	865935	Identifier	try_op		865472	1					
ANR	865936	ArrayIndexing	shiftlist [ op_array -> try_catch_array [ j ] . try_op ]		865472	1					
ANR	865937	Identifier	shiftlist		865472	0					
ANR	865938	MemberAccess	op_array -> try_catch_array [ j ] . try_op		865472	1					
ANR	865939	ArrayIndexing	op_array -> try_catch_array [ j ]		865472	0					
ANR	865940	PtrMemberAccess	op_array -> try_catch_array		865472	0					
ANR	865941	Identifier	op_array		865472	0					
ANR	865942	Identifier	try_catch_array		865472	1					
ANR	865943	Identifier	j		865472	1					
ANR	865944	Identifier	try_op		865472	1					
ANR	865945	ExpressionStatement	op_array -> try_catch_array [ j ] . catch_op -= shiftlist [ op_array -> try_catch_array [ j ] . catch_op ]	104:3:2898:2987	865472	1	True				
ANR	865946	AssignmentExpression	op_array -> try_catch_array [ j ] . catch_op -= shiftlist [ op_array -> try_catch_array [ j ] . catch_op ]		865472	0		-=			
ANR	865947	MemberAccess	op_array -> try_catch_array [ j ] . catch_op		865472	0					
ANR	865948	ArrayIndexing	op_array -> try_catch_array [ j ]		865472	0					
ANR	865949	PtrMemberAccess	op_array -> try_catch_array		865472	0					
ANR	865950	Identifier	op_array		865472	0					
ANR	865951	Identifier	try_catch_array		865472	1					
ANR	865952	Identifier	j		865472	1					
ANR	865953	Identifier	catch_op		865472	1					
ANR	865954	ArrayIndexing	shiftlist [ op_array -> try_catch_array [ j ] . catch_op ]		865472	1					
ANR	865955	Identifier	shiftlist		865472	0					
ANR	865956	MemberAccess	op_array -> try_catch_array [ j ] . catch_op		865472	1					
ANR	865957	ArrayIndexing	op_array -> try_catch_array [ j ]		865472	0					
ANR	865958	PtrMemberAccess	op_array -> try_catch_array		865472	0					
ANR	865959	Identifier	op_array		865472	0					
ANR	865960	Identifier	try_catch_array		865472	1					
ANR	865961	Identifier	j		865472	1					
ANR	865962	Identifier	catch_op		865472	1					
ANR	865963	IfStatement	if ( op_array -> try_catch_array [ j ] . finally_op )		865472	2					
ANR	865964	Condition	op_array -> try_catch_array [ j ] . finally_op	106:7:3041:3079	865472	0	True				
ANR	865965	MemberAccess	op_array -> try_catch_array [ j ] . finally_op		865472	0					
ANR	865966	ArrayIndexing	op_array -> try_catch_array [ j ]		865472	0					
ANR	865967	PtrMemberAccess	op_array -> try_catch_array		865472	0					
ANR	865968	Identifier	op_array		865472	0					
ANR	865969	Identifier	try_catch_array		865472	1					
ANR	865970	Identifier	j		865472	1					
ANR	865971	Identifier	finally_op		865472	1					
ANR	865972	CompoundStatement		101:48:2998:2998	865472	1					
ANR	865973	ExpressionStatement	op_array -> try_catch_array [ j ] . finally_op -= shiftlist [ op_array -> try_catch_array [ j ] . finally_op ]	107:4:3088:3181	865472	0	True				
ANR	865974	AssignmentExpression	op_array -> try_catch_array [ j ] . finally_op -= shiftlist [ op_array -> try_catch_array [ j ] . finally_op ]		865472	0		-=			
ANR	865975	MemberAccess	op_array -> try_catch_array [ j ] . finally_op		865472	0					
ANR	865976	ArrayIndexing	op_array -> try_catch_array [ j ]		865472	0					
ANR	865977	PtrMemberAccess	op_array -> try_catch_array		865472	0					
ANR	865978	Identifier	op_array		865472	0					
ANR	865979	Identifier	try_catch_array		865472	1					
ANR	865980	Identifier	j		865472	1					
ANR	865981	Identifier	finally_op		865472	1					
ANR	865982	ArrayIndexing	shiftlist [ op_array -> try_catch_array [ j ] . finally_op ]		865472	1					
ANR	865983	Identifier	shiftlist		865472	0					
ANR	865984	MemberAccess	op_array -> try_catch_array [ j ] . finally_op		865472	1					
ANR	865985	ArrayIndexing	op_array -> try_catch_array [ j ]		865472	0					
ANR	865986	PtrMemberAccess	op_array -> try_catch_array		865472	0					
ANR	865987	Identifier	op_array		865472	0					
ANR	865988	Identifier	try_catch_array		865472	1					
ANR	865989	Identifier	j		865472	1					
ANR	865990	Identifier	finally_op		865472	1					
ANR	865991	ExpressionStatement	op_array -> try_catch_array [ j ] . finally_end -= shiftlist [ op_array -> try_catch_array [ j ] . finally_end ]	108:4:3187:3282	865472	1	True				
ANR	865992	AssignmentExpression	op_array -> try_catch_array [ j ] . finally_end -= shiftlist [ op_array -> try_catch_array [ j ] . finally_end ]		865472	0		-=			
ANR	865993	MemberAccess	op_array -> try_catch_array [ j ] . finally_end		865472	0					
ANR	865994	ArrayIndexing	op_array -> try_catch_array [ j ]		865472	0					
ANR	865995	PtrMemberAccess	op_array -> try_catch_array		865472	0					
ANR	865996	Identifier	op_array		865472	0					
ANR	865997	Identifier	try_catch_array		865472	1					
ANR	865998	Identifier	j		865472	1					
ANR	865999	Identifier	finally_end		865472	1					
ANR	866000	ArrayIndexing	shiftlist [ op_array -> try_catch_array [ j ] . finally_end ]		865472	1					
ANR	866001	Identifier	shiftlist		865472	0					
ANR	866002	MemberAccess	op_array -> try_catch_array [ j ] . finally_end		865472	1					
ANR	866003	ArrayIndexing	op_array -> try_catch_array [ j ]		865472	0					
ANR	866004	PtrMemberAccess	op_array -> try_catch_array		865472	0					
ANR	866005	Identifier	op_array		865472	0					
ANR	866006	Identifier	try_catch_array		865472	1					
ANR	866007	Identifier	j		865472	1					
ANR	866008	Identifier	finally_end		865472	1					
ANR	866009	IfStatement	if ( op_array -> early_binding != ( zend_uint ) - 1 )		865472	5					
ANR	866010	Condition	op_array -> early_binding != ( zend_uint ) - 1	115:6:3387:3426	865472	0	True				
ANR	866011	EqualityExpression	op_array -> early_binding != ( zend_uint ) - 1		865472	0		!=			
ANR	866012	PtrMemberAccess	op_array -> early_binding		865472	0					
ANR	866013	Identifier	op_array		865472	0					
ANR	866014	Identifier	early_binding		865472	1					
ANR	866015	CastExpression	( zend_uint ) - 1		865472	1					
ANR	866016	CastTarget	zend_uint		865472	0					
ANR	866017	UnaryOperationExpression	- 1		865472	1					
ANR	866018	UnaryOperator	-		865472	0					
ANR	866019	PrimaryExpression	1		865472	1					
ANR	866020	CompoundStatement		111:3:3350:3398	865472	1					
ANR	866021	IdentifierDeclStatement	zend_uint * opline_num = & op_array -> early_binding ;	116:3:3434:3482	865472	0	True				
ANR	866022	IdentifierDecl	* opline_num = & op_array -> early_binding		865472	0					
ANR	866023	IdentifierDeclType	zend_uint *		865472	0					
ANR	866024	Identifier	opline_num		865472	1					
ANR	866025	AssignmentExpression	* opline_num = & op_array -> early_binding		865472	2		=			
ANR	866026	Identifier	opline_num		865472	0					
ANR	866027	UnaryOperationExpression	& op_array -> early_binding		865472	1					
ANR	866028	UnaryOperator	&		865472	0					
ANR	866029	PtrMemberAccess	op_array -> early_binding		865472	1					
ANR	866030	Identifier	op_array		865472	0					
ANR	866031	Identifier	early_binding		865472	1					
ANR	866032	DoStatement	do		865472	1					
ANR	866033	CompoundStatement		113:6:3407:3407	865472	0					
ANR	866034	ExpressionStatement	* opline_num -= shiftlist [ * opline_num ]	119:4:3497:3534	865472	0	True				
ANR	866035	AssignmentExpression	* opline_num -= shiftlist [ * opline_num ]		865472	0		-=			
ANR	866036	UnaryOperationExpression	* opline_num		865472	0					
ANR	866037	UnaryOperator	*		865472	0					
ANR	866038	Identifier	opline_num		865472	1					
ANR	866039	ArrayIndexing	shiftlist [ * opline_num ]		865472	1					
ANR	866040	Identifier	shiftlist		865472	0					
ANR	866041	UnaryOperationExpression	* opline_num		865472	1					
ANR	866042	UnaryOperator	*		865472	0					
ANR	866043	Identifier	opline_num		865472	1					
ANR	866044	ExpressionStatement	opline_num = & ZEND_RESULT ( & op_array -> opcodes [ * opline_num ] ) . opline_num	120:4:3540:3609	865472	1	True				
ANR	866045	AssignmentExpression	opline_num = & ZEND_RESULT ( & op_array -> opcodes [ * opline_num ] ) . opline_num		865472	0		=			
ANR	866046	Identifier	opline_num		865472	0					
ANR	866047	UnaryOperationExpression	& ZEND_RESULT ( & op_array -> opcodes [ * opline_num ] ) . opline_num		865472	1					
ANR	866048	UnaryOperator	&		865472	0					
ANR	866049	MemberAccess	ZEND_RESULT ( & op_array -> opcodes [ * opline_num ] ) . opline_num		865472	1					
ANR	866050	CallExpression	ZEND_RESULT ( & op_array -> opcodes [ * opline_num ] )		865472	0					
ANR	866051	Callee	ZEND_RESULT		865472	0					
ANR	866052	Identifier	ZEND_RESULT		865472	0					
ANR	866053	ArgumentList	& op_array -> opcodes [ * opline_num ]		865472	1					
ANR	866054	Argument	& op_array -> opcodes [ * opline_num ]		865472	0					
ANR	866055	UnaryOperationExpression	& op_array -> opcodes [ * opline_num ]		865472	0					
ANR	866056	UnaryOperator	&		865472	0					
ANR	866057	ArrayIndexing	op_array -> opcodes [ * opline_num ]		865472	1					
ANR	866058	PtrMemberAccess	op_array -> opcodes		865472	0					
ANR	866059	Identifier	op_array		865472	0					
ANR	866060	Identifier	opcodes		865472	1					
ANR	866061	UnaryOperationExpression	* opline_num		865472	1					
ANR	866062	UnaryOperator	*		865472	0					
ANR	866063	Identifier	opline_num		865472	1					
ANR	866064	Identifier	opline_num		865472	1					
ANR	866065	Condition	* opline_num != ( zend_uint ) - 1	121:12:3623:3650	865472	1	True				
ANR	866066	EqualityExpression	* opline_num != ( zend_uint ) - 1		865472	0		!=			
ANR	866067	UnaryOperationExpression	* opline_num		865472	0					
ANR	866068	UnaryOperator	*		865472	0					
ANR	866069	Identifier	opline_num		865472	1					
ANR	866070	CastExpression	( zend_uint ) - 1		865472	1					
ANR	866071	CastTarget	zend_uint		865472	0					
ANR	866072	UnaryOperationExpression	- 1		865472	1					
ANR	866073	UnaryOperator	-		865472	0					
ANR	866074	PrimaryExpression	1		865472	1					
ANR	866075	ExpressionStatement	FREE_ALLOCA ( shiftlist )	125:1:3669:3691	865472	10	True				
ANR	866076	CallExpression	FREE_ALLOCA ( shiftlist )		865472	0					
ANR	866077	Callee	FREE_ALLOCA		865472	0					
ANR	866078	Identifier	FREE_ALLOCA		865472	0					
ANR	866079	ArgumentList	shiftlist		865472	1					
ANR	866080	Argument	shiftlist		865472	0					
ANR	866081	Identifier	shiftlist		865472	0					
ANR	866082	ReturnType	static void		865472	1					
ANR	866083	Identifier	nop_removal		865472	2					
ANR	866084	ParameterList	zend_op_array * op_array		865472	3					
ANR	866085	Parameter	zend_op_array * op_array	5:24:58:80	865472	0	True				
ANR	866086	ParameterType	zend_op_array *		865472	0					
ANR	866087	Identifier	op_array		865472	1					
ANR	866088	CFGEntryNode	ENTRY		865472		True				
ANR	866089	CFGExitNode	EXIT		865472		True				
ANR	866090	Symbol	* * op_array -> brk_cont_array		865472						
ANR	866091	Symbol	* op_array -> try_catch_array [ j ] . finally_end		865472						
ANR	866092	Symbol	* new_count		865472						
ANR	866093	Symbol	* * * op_array		865472						
ANR	866094	Symbol	ZEND_OP1 ( opline ) . opline_num		865472						
ANR	866095	Symbol	* * op_array -> try_catch_array		865472						
ANR	866096	Symbol	shift		865472						
ANR	866097	Symbol	Z_TYPE		865472						
ANR	866098	Symbol	& ZEND_RESULT ( & op_array -> opcodes [ * opline_num ] ) . opline_num		865472						
ANR	866099	Symbol	ZEND_GOTO		865472						
ANR	866100	Symbol	opline -> extended_value		865472						
ANR	866101	Symbol	op_array -> brk_cont_array [ j ] . brk		865472						
ANR	866102	Symbol	opline		865472						
ANR	866103	Symbol	op_array -> early_binding		865472						
ANR	866104	Symbol	op_array -> try_catch_array [ j ] . try_op		865472						
ANR	866105	Symbol	op_array -> try_catch_array		865472						
ANR	866106	Symbol	& op_array -> early_binding		865472						
ANR	866107	Symbol	* * j		865472						
ANR	866108	Symbol	* op_array -> try_catch_array [ j ] . finally_op		865472						
ANR	866109	Symbol	* op_array -> try_catch_array [ j ] . catch_op		865472						
ANR	866110	Symbol	ZEND_NOP		865472						
ANR	866111	Symbol	* ZEND_OP2 ( opline ) . opline_num		865472						
ANR	866112	Symbol	* op_array		865472						
ANR	866113	Symbol	* * opline_num		865472						
ANR	866114	Symbol	op_array -> last		865472						
ANR	866115	Symbol	* opline_num		865472						
ANR	866116	Symbol	ZEND_OP2 ( opline ) . opline_num		865472						
ANR	866117	Symbol	new_count		865472						
ANR	866118	Symbol	* opline -> extended_value		865472						
ANR	866119	Symbol	opline_num		865472						
ANR	866120	Symbol	* * op_array		865472						
ANR	866121	Symbol	op_array -> try_catch_array [ j ] . catch_op		865472						
ANR	866122	Symbol	use_heap		865472						
ANR	866123	Symbol	* op_array -> try_catch_array		865472						
ANR	866124	Symbol	op_array -> brk_cont_array [ j ] . cont		865472						
ANR	866125	Symbol	op_array -> brk_cont_array		865472						
ANR	866126	Symbol	op_array -> opcodes		865472						
ANR	866127	Symbol	* op_array -> try_catch_array [ j ] . try_op		865472						
ANR	866128	Symbol	& ZEND_RESULT		865472						
ANR	866129	Symbol	IS_LONG		865472						
ANR	866130	Symbol	* shiftlist		865472						
ANR	866131	Symbol	ZEND_RESULT		865472						
ANR	866132	Symbol	DO_ALLOCA		865472						
ANR	866133	Symbol	end		865472						
ANR	866134	Symbol	* * opline		865472						
ANR	866135	Symbol	op_array -> try_catch_array [ j ] . finally_op		865472						
ANR	866136	Symbol	* ZEND_OP1		865472						
ANR	866137	Symbol	* op_array -> brk_cont_array [ j ] . cont		865472						
ANR	866138	Symbol	op_array -> brk_cont_array [ j ] . start		865472						
ANR	866139	Symbol	* ZEND_OP2		865472						
ANR	866140	Symbol	* op_array -> brk_cont_array		865472						
ANR	866141	Symbol	i		865472						
ANR	866142	Symbol	* op_array -> brk_cont_array [ j ] . brk		865472						
ANR	866143	Symbol	j		865472						
ANR	866144	Symbol	shiftlist		865472						
ANR	866145	Symbol	ZEND_OP1		865472						
ANR	866146	Symbol	target		865472						
ANR	866147	Symbol	ZEND_OP2		865472						
ANR	866148	Symbol	op_array -> last_brk_cont		865472						
ANR	866149	Symbol	op_array -> last_try_catch		865472						
ANR	866150	Symbol	op_array -> try_catch_array [ j ] . finally_end		865472						
ANR	866151	Symbol	* target		865472						
ANR	866152	Symbol	* op_array -> brk_cont_array [ j ] . start		865472						
ANR	866153	Symbol	ZEND_JMP		865472						
ANR	866154	Symbol	* opline		865472						
ANR	866155	Symbol	* j		865472						
ANR	866156	Symbol	opline -> opcode		865472						
ANR	866157	Symbol	target -> opcode		865472						
ANR	866158	Symbol	ZEND_OP2_LITERAL		865472						
ANR	866159	Symbol	* ZEND_OP1 ( opline ) . opline_num		865472						
ANR	866160	Symbol	op_array		865472						
ANR	866161	Symbol	* op_array -> opcodes		865472						
