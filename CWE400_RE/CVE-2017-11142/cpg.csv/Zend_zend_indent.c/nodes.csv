command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	82776	File	data/converged/CVE-2017-11142_php-src/Zend_zend_indent.c								
ANR	82777	Function	handle_whitespace	34:0:1493:1761							
ANR	82778	FunctionDef	handle_whitespace (int * emit_whitespace)		82777	0					
ANR	82779	CompoundStatement		35:0:1545:1761	82777	0					
ANR	82780	IdentifierDeclStatement	unsigned char c ;	36:1:1548:1563	82777	0	True				
ANR	82781	IdentifierDecl	c		82777	0					
ANR	82782	IdentifierDeclType	unsigned char		82777	0					
ANR	82783	Identifier	c		82777	1					
ANR	82784	IdentifierDeclStatement	int i ;	37:1:1566:1571	82777	1	True				
ANR	82785	IdentifierDecl	i		82777	0					
ANR	82786	IdentifierDeclType	int		82777	0					
ANR	82787	Identifier	i		82777	1					
ANR	82788	ForStatement	for ( c = 0 ; c < 128 ; c ++ )		82777	2					
ANR	82789	ForInit	c = 0 ;	39:6:1580:1583	82777	0	True				
ANR	82790	AssignmentExpression	c = 0		82777	0		=			
ANR	82791	Identifier	c		82777	0					
ANR	82792	PrimaryExpression	0		82777	1					
ANR	82793	Condition	c < 128	39:11:1585:1589	82777	1	True				
ANR	82794	RelationalExpression	c < 128		82777	0		<			
ANR	82795	Identifier	c		82777	0					
ANR	82796	PrimaryExpression	128		82777	1					
ANR	82797	PostIncDecOperationExpression	c ++	39:18:1592:1594	82777	2	True				
ANR	82798	Identifier	c		82777	0					
ANR	82799	IncDec	++		82777	1					
ANR	82800	CompoundStatement		5:23:51:51	82777	3					
ANR	82801	IfStatement	if ( emit_whitespace [ c ] > 0 )		82777	0					
ANR	82802	Condition	emit_whitespace [ c ] > 0	40:6:1605:1624	82777	0	True				
ANR	82803	RelationalExpression	emit_whitespace [ c ] > 0		82777	0		>			
ANR	82804	ArrayIndexing	emit_whitespace [ c ]		82777	0					
ANR	82805	Identifier	emit_whitespace		82777	0					
ANR	82806	Identifier	c		82777	1					
ANR	82807	PrimaryExpression	0		82777	1					
ANR	82808	CompoundStatement		6:28:81:81	82777	1					
ANR	82809	ForStatement	for ( i = 0 ; i < emit_whitespace [ c ] ; i ++ )		82777	0					
ANR	82810	ForInit	i = 0 ;	41:8:1637:1640	82777	0	True				
ANR	82811	AssignmentExpression	i = 0		82777	0		=			
ANR	82812	Identifier	i		82777	0					
ANR	82813	PrimaryExpression	0		82777	1					
ANR	82814	Condition	i < emit_whitespace [ c ]	41:13:1642:1661	82777	1	True				
ANR	82815	RelationalExpression	i < emit_whitespace [ c ]		82777	0		<			
ANR	82816	Identifier	i		82777	0					
ANR	82817	ArrayIndexing	emit_whitespace [ c ]		82777	1					
ANR	82818	Identifier	emit_whitespace		82777	0					
ANR	82819	Identifier	c		82777	1					
ANR	82820	PostIncDecOperationExpression	i ++	41:35:1664:1666	82777	2	True				
ANR	82821	Identifier	i		82777	0					
ANR	82822	IncDec	++		82777	1					
ANR	82823	CompoundStatement		7:40:123:123	82777	3					
ANR	82824	ExpressionStatement	"zend_write ( ( char * ) & c , 1 )"	42:4:1675:1701	82777	0	True				
ANR	82825	CallExpression	"zend_write ( ( char * ) & c , 1 )"		82777	0					
ANR	82826	Callee	zend_write		82777	0					
ANR	82827	Identifier	zend_write		82777	0					
ANR	82828	ArgumentList	( char * ) & c		82777	1					
ANR	82829	Argument	( char * ) & c		82777	0					
ANR	82830	CastExpression	( char * ) & c		82777	0					
ANR	82831	CastTarget	char *		82777	0					
ANR	82832	UnaryOperationExpression	& c		82777	1					
ANR	82833	UnaryOperator	&		82777	0					
ANR	82834	Identifier	c		82777	1					
ANR	82835	Argument	1		82777	1					
ANR	82836	PrimaryExpression	1		82777	0					
ANR	82837	ExpressionStatement	"memset ( emit_whitespace , 0 , sizeof ( int ) * 256 )"	46:1:1716:1759	82777	3	True				
ANR	82838	CallExpression	"memset ( emit_whitespace , 0 , sizeof ( int ) * 256 )"		82777	0					
ANR	82839	Callee	memset		82777	0					
ANR	82840	Identifier	memset		82777	0					
ANR	82841	ArgumentList	emit_whitespace		82777	1					
ANR	82842	Argument	emit_whitespace		82777	0					
ANR	82843	Identifier	emit_whitespace		82777	0					
ANR	82844	Argument	0		82777	1					
ANR	82845	PrimaryExpression	0		82777	0					
ANR	82846	Argument	sizeof ( int ) * 256		82777	2					
ANR	82847	MultiplicativeExpression	sizeof ( int ) * 256		82777	0		*			
ANR	82848	SizeofExpression	sizeof ( int )		82777	0					
ANR	82849	Sizeof	sizeof		82777	0					
ANR	82850	SizeofOperand	int		82777	1					
ANR	82851	PrimaryExpression	256		82777	1					
ANR	82852	ReturnType	static void		82777	1					
ANR	82853	Identifier	handle_whitespace		82777	2					
ANR	82854	ParameterList	int * emit_whitespace		82777	3					
ANR	82855	Parameter	int * emit_whitespace	34:30:1523:1542	82777	0	True				
ANR	82856	ParameterType	int *		82777	0					
ANR	82857	Identifier	emit_whitespace		82777	1					
ANR	82858	CFGEntryNode	ENTRY		82777		True				
ANR	82859	CFGExitNode	EXIT		82777		True				
ANR	82860	Symbol	c		82777						
ANR	82861	Symbol	emit_whitespace		82777						
ANR	82862	Symbol	* emit_whitespace		82777						
ANR	82863	Symbol	i		82777						
ANR	82864	Symbol	& c		82777						
ANR	82865	Symbol	* c		82777						
ANR	82866	Function	zend_indent	50:0:1765:4060							
ANR	82867	FunctionDef	zend_indent ()		82866	0					
ANR	82868	CompoundStatement		51:0:1793:4060	82866	0					
ANR	82869	IdentifierDeclStatement	zval token ;	52:1:1796:1806	82866	0	True				
ANR	82870	IdentifierDecl	token		82866	0					
ANR	82871	IdentifierDeclType	zval		82866	0					
ANR	82872	Identifier	token		82866	1					
ANR	82873	IdentifierDeclStatement	int token_type ;	53:1:1809:1823	82866	1	True				
ANR	82874	IdentifierDecl	token_type		82866	0					
ANR	82875	IdentifierDeclType	int		82866	0					
ANR	82876	Identifier	token_type		82866	1					
ANR	82877	IdentifierDeclStatement	int in_string = 0 ;	54:1:1826:1841	82866	2	True				
ANR	82878	IdentifierDecl	in_string = 0		82866	0					
ANR	82879	IdentifierDeclType	int		82866	0					
ANR	82880	Identifier	in_string		82866	1					
ANR	82881	AssignmentExpression	in_string = 0		82866	2		=			
ANR	82882	Identifier	in_string		82866	0					
ANR	82883	PrimaryExpression	0		82866	1					
ANR	82884	IdentifierDeclStatement	int nest_level = 0 ;	55:1:1844:1860	82866	3	True				
ANR	82885	IdentifierDecl	nest_level = 0		82866	0					
ANR	82886	IdentifierDeclType	int		82866	0					
ANR	82887	Identifier	nest_level		82866	1					
ANR	82888	AssignmentExpression	nest_level = 0		82866	2		=			
ANR	82889	Identifier	nest_level		82866	0					
ANR	82890	PrimaryExpression	0		82866	1					
ANR	82891	IdentifierDeclStatement	int emit_whitespace [ 256 ] ;	56:1:1863:1887	82866	4	True				
ANR	82892	IdentifierDecl	emit_whitespace [ 256 ]		82866	0					
ANR	82893	IdentifierDeclType	int [ 256 ]		82866	0					
ANR	82894	Identifier	emit_whitespace		82866	1					
ANR	82895	PrimaryExpression	256		82866	2					
ANR	82896	IdentifierDeclStatement	int i ;	57:1:1890:1895	82866	5	True				
ANR	82897	IdentifierDecl	i		82866	0					
ANR	82898	IdentifierDeclType	int		82866	0					
ANR	82899	Identifier	i		82866	1					
ANR	82900	ExpressionStatement	TSRMLS_FETCH ( )	58:1:1898:1912	82866	6	True				
ANR	82901	CallExpression	TSRMLS_FETCH ( )		82866	0					
ANR	82902	Callee	TSRMLS_FETCH		82866	0					
ANR	82903	Identifier	TSRMLS_FETCH		82866	0					
ANR	82904	ArgumentList			82866	1					
ANR	82905	ExpressionStatement	"memset ( emit_whitespace , 0 , sizeof ( int ) * 256 )"	60:1:1916:1959	82866	7	True				
ANR	82906	CallExpression	"memset ( emit_whitespace , 0 , sizeof ( int ) * 256 )"		82866	0					
ANR	82907	Callee	memset		82866	0					
ANR	82908	Identifier	memset		82866	0					
ANR	82909	ArgumentList	emit_whitespace		82866	1					
ANR	82910	Argument	emit_whitespace		82866	0					
ANR	82911	Identifier	emit_whitespace		82866	0					
ANR	82912	Argument	0		82866	1					
ANR	82913	PrimaryExpression	0		82866	0					
ANR	82914	Argument	sizeof ( int ) * 256		82866	2					
ANR	82915	MultiplicativeExpression	sizeof ( int ) * 256		82866	0		*			
ANR	82916	SizeofExpression	sizeof ( int )		82866	0					
ANR	82917	Sizeof	sizeof		82866	0					
ANR	82918	SizeofOperand	int		82866	1					
ANR	82919	PrimaryExpression	256		82866	1					
ANR	82920	ExpressionStatement	token . type = 0	63:1:2013:2027	82866	8	True				
ANR	82921	AssignmentExpression	token . type = 0		82866	0		=			
ANR	82922	MemberAccess	token . type		82866	0					
ANR	82923	Identifier	token		82866	0					
ANR	82924	Identifier	type		82866	1					
ANR	82925	PrimaryExpression	0		82866	1					
ANR	82926	Statement	while	64:1:2030:2034	82866	9	True				
ANR	82927	Statement	(	64:7:2036:2036	82866	10	True				
ANR	82928	Statement	(	64:8:2037:2037	82866	11	True				
ANR	82929	Statement	token_type	64:9:2038:2047	82866	12	True				
ANR	82930	Statement	=	64:19:2048:2048	82866	13	True				
ANR	82931	Statement	lex_scan	64:20:2049:2056	82866	14	True				
ANR	82932	Statement	(	64:28:2057:2057	82866	15	True				
ANR	82933	Statement	&	64:29:2058:2058	82866	16	True				
ANR	82934	Statement	token	64:30:2059:2063	82866	17	True				
ANR	82935	Statement	TSRMLS_CC	64:36:2065:2073	82866	18	True				
ANR	82936	Statement	)	64:45:2074:2074	82866	19	True				
ANR	82937	Statement	)	64:46:2075:2075	82866	20	True				
ANR	82938	Statement	)	64:47:2076:2076	82866	21	True				
ANR	82939	CompoundStatement		14:49:284:284	82866	22					
ANR	82940	SwitchStatement	switch ( token_type )		82866	0					
ANR	82941	Condition	token_type	65:10:2090:2099	82866	0	True				
ANR	82942	Identifier	token_type		82866	0					
ANR	82943	CompoundStatement		15:22:308:308	82866	1					
ANR	82944	Label	case T_INLINE_HTML :	66:3:2107:2125	82866	0	True				
ANR	82945	Identifier	T_INLINE_HTML		82866	0					
ANR	82946	ExpressionStatement	"zend_write ( ( char * ) LANG_SCNG ( yy_text ) , LANG_SCNG ( yy_leng ) )"	67:4:2131:2188	82866	1	True				
ANR	82947	CallExpression	"zend_write ( ( char * ) LANG_SCNG ( yy_text ) , LANG_SCNG ( yy_leng ) )"		82866	0					
ANR	82948	Callee	zend_write		82866	0					
ANR	82949	Identifier	zend_write		82866	0					
ANR	82950	ArgumentList	( char * ) LANG_SCNG ( yy_text )		82866	1					
ANR	82951	Argument	( char * ) LANG_SCNG ( yy_text )		82866	0					
ANR	82952	CastExpression	( char * ) LANG_SCNG ( yy_text )		82866	0					
ANR	82953	CastTarget	char *		82866	0					
ANR	82954	CallExpression	LANG_SCNG ( yy_text )		82866	1					
ANR	82955	Callee	LANG_SCNG		82866	0					
ANR	82956	Identifier	LANG_SCNG		82866	0					
ANR	82957	ArgumentList	yy_text		82866	1					
ANR	82958	Argument	yy_text		82866	0					
ANR	82959	Identifier	yy_text		82866	0					
ANR	82960	Argument	LANG_SCNG ( yy_leng )		82866	1					
ANR	82961	CallExpression	LANG_SCNG ( yy_leng )		82866	0					
ANR	82962	Callee	LANG_SCNG		82866	0					
ANR	82963	Identifier	LANG_SCNG		82866	0					
ANR	82964	ArgumentList	yy_leng		82866	1					
ANR	82965	Argument	yy_leng		82866	0					
ANR	82966	Identifier	yy_leng		82866	0					
ANR	82967	BreakStatement	break ;	68:4:2194:2199	82866	2	True				
ANR	82968	Label	case T_WHITESPACE :	69:3:2204:2221	82866	3	True				
ANR	82969	Identifier	T_WHITESPACE		82866	0					
ANR	82970	CompoundStatement		19:22:429:429	82866	4					
ANR	82971	ExpressionStatement	token . type = 0	70:5:2230:2244	82866	0	True				
ANR	82972	AssignmentExpression	token . type = 0		82866	0		=			
ANR	82973	MemberAccess	token . type		82866	0					
ANR	82974	Identifier	token		82866	0					
ANR	82975	Identifier	type		82866	1					
ANR	82976	PrimaryExpression	0		82866	1					
ANR	82977	ForStatement	for ( i = 0 ; i < LANG_SCNG ( yy_leng ) ; i ++ )		82866	1					
ANR	82978	ForInit	i = 0 ;	72:10:2297:2300	82866	0	True				
ANR	82979	AssignmentExpression	i = 0		82866	0		=			
ANR	82980	Identifier	i		82866	0					
ANR	82981	PrimaryExpression	0		82866	1					
ANR	82982	Condition	i < LANG_SCNG ( yy_leng )	72:15:2302:2321	82866	1	True				
ANR	82983	RelationalExpression	i < LANG_SCNG ( yy_leng )		82866	0		<			
ANR	82984	Identifier	i		82866	0					
ANR	82985	CallExpression	LANG_SCNG ( yy_leng )		82866	1					
ANR	82986	Callee	LANG_SCNG		82866	0					
ANR	82987	Identifier	LANG_SCNG		82866	0					
ANR	82988	ArgumentList	yy_leng		82866	1					
ANR	82989	Argument	yy_leng		82866	0					
ANR	82990	Identifier	yy_leng		82866	0					
ANR	82991	PostIncDecOperationExpression	i ++	72:37:2324:2326	82866	2	True				
ANR	82992	Identifier	i		82866	0					
ANR	82993	IncDec	++		82866	1					
ANR	82994	CompoundStatement		22:42:535:535	82866	3					
ANR	82995	ExpressionStatement	emit_whitespace [ ( unsigned char ) LANG_SCNG ( yy_text ) [ i ] ] ++	73:6:2337:2393	82866	0	True				
ANR	82996	PostIncDecOperationExpression	emit_whitespace [ ( unsigned char ) LANG_SCNG ( yy_text ) [ i ] ] ++		82866	0					
ANR	82997	ArrayIndexing	emit_whitespace [ ( unsigned char ) LANG_SCNG ( yy_text ) [ i ] ]		82866	0					
ANR	82998	Identifier	emit_whitespace		82866	0					
ANR	82999	CastExpression	( unsigned char ) LANG_SCNG ( yy_text ) [ i ]		82866	1					
ANR	83000	CastTarget	unsigned char		82866	0					
ANR	83001	ArrayIndexing	LANG_SCNG ( yy_text ) [ i ]		82866	1					
ANR	83002	CallExpression	LANG_SCNG ( yy_text )		82866	0					
ANR	83003	Callee	LANG_SCNG		82866	0					
ANR	83004	Identifier	LANG_SCNG		82866	0					
ANR	83005	ArgumentList	yy_text		82866	1					
ANR	83006	Argument	yy_text		82866	0					
ANR	83007	Identifier	yy_text		82866	0					
ANR	83008	Identifier	i		82866	1					
ANR	83009	IncDec	++		82866	1					
ANR	83010	ContinueStatement	continue ;	75:5:2407:2415	82866	2	True				
ANR	83011	BreakStatement	break ;	77:4:2427:2432	82866	5	True				
ANR	83012	Label	"case '""' :"	78:3:2437:2445	82866	6	True				
ANR	83013	ExpressionStatement	in_string = ! in_string	79:4:2451:2473	82866	7	True				
ANR	83014	AssignmentExpression	in_string = ! in_string		82866	0		=			
ANR	83015	Identifier	in_string		82866	0					
ANR	83016	UnaryOperationExpression	! in_string		82866	1					
ANR	83017	UnaryOperator	!		82866	0					
ANR	83018	Identifier	in_string		82866	1					
ANR	83019	Label	default :	81:3:2516:2523	82866	8	True				
ANR	83020	Identifier	default		82866	0					
ANR	83021	IfStatement	if ( token . type == 0 )		82866	9					
ANR	83022	Condition	token . type == 0	82:8:2533:2545	82866	0	True				
ANR	83023	EqualityExpression	token . type == 0		82866	0		==			
ANR	83024	MemberAccess	token . type		82866	0					
ANR	83025	Identifier	token		82866	0					
ANR	83026	Identifier	type		82866	1					
ANR	83027	PrimaryExpression	0		82866	1					
ANR	83028	CompoundStatement		32:23:754:754	82866	1					
ANR	83029	SwitchStatement	switch ( token_type )		82866	0					
ANR	83030	Condition	token_type	84:13:2582:2591	82866	0	True				
ANR	83031	Identifier	token_type		82866	0					
ANR	83032	CompoundStatement		34:25:800:800	82866	1					
ANR	83033	Label	"case ',' :"	85:6:2602:2610	82866	0	True				
ANR	83034	ExpressionStatement	"ZEND_PUTS ( "", "" )"	86:7:2619:2634	82866	1	True				
ANR	83035	CallExpression	"ZEND_PUTS ( "", "" )"		82866	0					
ANR	83036	Callee	ZEND_PUTS		82866	0					
ANR	83037	Identifier	ZEND_PUTS		82866	0					
ANR	83038	ArgumentList	""", """		82866	1					
ANR	83039	Argument	""", """		82866	0					
ANR	83040	PrimaryExpression	""", """		82866	0					
ANR	83041	GotoStatement	goto dflt_printout ;	87:7:2643:2661	82866	2	True				
ANR	83042	Identifier	dflt_printout		82866	0					
ANR	83043	BreakStatement	break ;	88:7:2670:2675	82866	3	True				
ANR	83044	Label	case '{' :	89:6:2683:2691	82866	4	True				
ANR	83045	ExpressionStatement	nest_level ++	90:7:2700:2712	82866	5	True				
ANR	83046	PostIncDecOperationExpression	nest_level ++		82866	0					
ANR	83047	Identifier	nest_level		82866	0					
ANR	83048	IncDec	++		82866	1					
ANR	83049	IfStatement	if ( emit_whitespace [ '\\n' ] > 0 )		82866	6					
ANR	83050	Condition	emit_whitespace [ '\\n' ] > 0	91:11:2725:2747	82866	0	True				
ANR	83051	RelationalExpression	emit_whitespace [ '\\n' ] > 0		82866	0		>			
ANR	83052	ArrayIndexing	emit_whitespace [ '\\n' ]		82866	0					
ANR	83053	Identifier	emit_whitespace		82866	0					
ANR	83054	PrimaryExpression	'\\n'		82866	1					
ANR	83055	PrimaryExpression	0		82866	1					
ANR	83056	CompoundStatement		41:36:956:956	82866	1					
ANR	83057	ExpressionStatement	"ZEND_PUTS ( "" {\\n"" )"	92:8:2760:2777	82866	0	True				
ANR	83058	CallExpression	"ZEND_PUTS ( "" {\\n"" )"		82866	0					
ANR	83059	Callee	ZEND_PUTS		82866	0					
ANR	83060	Identifier	ZEND_PUTS		82866	0					
ANR	83061	ArgumentList	""" {\\n"""		82866	1					
ANR	83062	Argument	""" {\\n"""		82866	0					
ANR	83063	PrimaryExpression	""" {\\n"""		82866	0					
ANR	83064	ExpressionStatement	"memset ( emit_whitespace , 0 , sizeof ( int ) * 256 )"	93:8:2787:2830	82866	1	True				
ANR	83065	CallExpression	"memset ( emit_whitespace , 0 , sizeof ( int ) * 256 )"		82866	0					
ANR	83066	Callee	memset		82866	0					
ANR	83067	Identifier	memset		82866	0					
ANR	83068	ArgumentList	emit_whitespace		82866	1					
ANR	83069	Argument	emit_whitespace		82866	0					
ANR	83070	Identifier	emit_whitespace		82866	0					
ANR	83071	Argument	0		82866	1					
ANR	83072	PrimaryExpression	0		82866	0					
ANR	83073	Argument	sizeof ( int ) * 256		82866	2					
ANR	83074	MultiplicativeExpression	sizeof ( int ) * 256		82866	0		*			
ANR	83075	SizeofExpression	sizeof ( int )		82866	0					
ANR	83076	Sizeof	sizeof		82866	0					
ANR	83077	SizeofOperand	int		82866	1					
ANR	83078	PrimaryExpression	256		82866	1					
ANR	83079	ElseStatement	else		82866	0					
ANR	83080	CompoundStatement		44:14:1052:1052	82866	0					
ANR	83081	ExpressionStatement	"ZEND_PUTS ( ""{"" )"	95:8:2856:2870	82866	0	True				
ANR	83082	CallExpression	"ZEND_PUTS ( ""{"" )"		82866	0					
ANR	83083	Callee	ZEND_PUTS		82866	0					
ANR	83084	Identifier	ZEND_PUTS		82866	0					
ANR	83085	ArgumentList	"""{"""		82866	1					
ANR	83086	Argument	"""{"""		82866	0					
ANR	83087	PrimaryExpression	"""{"""		82866	0					
ANR	83088	BreakStatement	break ;	97:7:2888:2893	82866	7	True				
ANR	83089	Label	case '}' :	98:6:2901:2909	82866	8	True				
ANR	83090	ExpressionStatement	nest_level --	99:7:2918:2930	82866	9	True				
ANR	83091	PostIncDecOperationExpression	nest_level --		82866	0					
ANR	83092	Identifier	nest_level		82866	0					
ANR	83093	IncDec	--		82866	1					
ANR	83094	IfStatement	if ( emit_whitespace [ '\\n' ] == 0 )		82866	10					
ANR	83095	Condition	emit_whitespace [ '\\n' ] == 0	100:11:2943:2966	82866	0	True				
ANR	83096	EqualityExpression	emit_whitespace [ '\\n' ] == 0		82866	0		==			
ANR	83097	ArrayIndexing	emit_whitespace [ '\\n' ]		82866	0					
ANR	83098	Identifier	emit_whitespace		82866	0					
ANR	83099	PrimaryExpression	'\\n'		82866	1					
ANR	83100	PrimaryExpression	0		82866	1					
ANR	83101	CompoundStatement		50:37:1175:1175	82866	1					
ANR	83102	ExpressionStatement	"ZEND_PUTS ( ""\\n"" )"	101:8:2979:2994	82866	0	True				
ANR	83103	CallExpression	"ZEND_PUTS ( ""\\n"" )"		82866	0					
ANR	83104	Callee	ZEND_PUTS		82866	0					
ANR	83105	Identifier	ZEND_PUTS		82866	0					
ANR	83106	ArgumentList	"""\\n"""		82866	1					
ANR	83107	Argument	"""\\n"""		82866	0					
ANR	83108	PrimaryExpression	"""\\n"""		82866	0					
ANR	83109	ForStatement	for ( i = 0 ; i < nest_level ; i ++ )		82866	11					
ANR	83110	ForInit	i = 0 ;	103:12:3017:3020	82866	0	True				
ANR	83111	AssignmentExpression	i = 0		82866	0		=			
ANR	83112	Identifier	i		82866	0					
ANR	83113	PrimaryExpression	0		82866	1					
ANR	83114	Condition	i < nest_level	103:17:3022:3033	82866	1	True				
ANR	83115	RelationalExpression	i < nest_level		82866	0		<			
ANR	83116	Identifier	i		82866	0					
ANR	83117	Identifier	nest_level		82866	1					
ANR	83118	PostIncDecOperationExpression	i ++	103:31:3036:3038	82866	2	True				
ANR	83119	Identifier	i		82866	0					
ANR	83120	IncDec	++		82866	1					
ANR	83121	CompoundStatement		53:36:1247:1247	82866	3					
ANR	83122	ExpressionStatement	"ZEND_PUTS ( ""    "" )"	104:8:3051:3068	82866	0	True				
ANR	83123	CallExpression	"ZEND_PUTS ( ""    "" )"		82866	0					
ANR	83124	Callee	ZEND_PUTS		82866	0					
ANR	83125	Identifier	ZEND_PUTS		82866	0					
ANR	83126	ArgumentList	"""    """		82866	1					
ANR	83127	Argument	"""    """		82866	0					
ANR	83128	PrimaryExpression	"""    """		82866	0					
ANR	83129	GotoStatement	goto dflt_printout ;	106:7:3086:3104	82866	12	True				
ANR	83130	Identifier	dflt_printout		82866	0					
ANR	83131	BreakStatement	break ;	107:7:3113:3118	82866	13	True				
ANR	83132	Label	dflt_printout :	108:0:3120:3133	82866	14	True				
ANR	83133	Identifier	dflt_printout		82866	0					
ANR	83134	Label	default :	109:6:3141:3148	82866	15	True				
ANR	83135	Identifier	default		82866	0					
ANR	83136	IfStatement	if ( emit_whitespace [ '\\n' ] > 0 )		82866	16					
ANR	83137	Condition	emit_whitespace [ '\\n' ] > 0	110:11:3161:3183	82866	0	True				
ANR	83138	RelationalExpression	emit_whitespace [ '\\n' ] > 0		82866	0		>			
ANR	83139	ArrayIndexing	emit_whitespace [ '\\n' ]		82866	0					
ANR	83140	Identifier	emit_whitespace		82866	0					
ANR	83141	PrimaryExpression	'\\n'		82866	1					
ANR	83142	PrimaryExpression	0		82866	1					
ANR	83143	CompoundStatement		60:36:1392:1392	82866	1					
ANR	83144	ForStatement	for ( i = 0 ; i < emit_whitespace [ '\\n' ] ; i ++ )		82866	0					
ANR	83145	ForInit	i = 0 ;	111:13:3201:3204	82866	0	True				
ANR	83146	AssignmentExpression	i = 0		82866	0		=			
ANR	83147	Identifier	i		82866	0					
ANR	83148	PrimaryExpression	0		82866	1					
ANR	83149	Condition	i < emit_whitespace [ '\\n' ]	111:18:3206:3228	82866	1	True				
ANR	83150	RelationalExpression	i < emit_whitespace [ '\\n' ]		82866	0		<			
ANR	83151	Identifier	i		82866	0					
ANR	83152	ArrayIndexing	emit_whitespace [ '\\n' ]		82866	1					
ANR	83153	Identifier	emit_whitespace		82866	0					
ANR	83154	PrimaryExpression	'\\n'		82866	1					
ANR	83155	PostIncDecOperationExpression	i ++	111:43:3231:3233	82866	2	True				
ANR	83156	Identifier	i		82866	0					
ANR	83157	IncDec	++		82866	1					
ANR	83158	CompoundStatement		61:48:1442:1442	82866	3					
ANR	83159	ExpressionStatement	"ZEND_PUTS ( ""\\n"" )"	112:9:3247:3262	82866	0	True				
ANR	83160	CallExpression	"ZEND_PUTS ( ""\\n"" )"		82866	0					
ANR	83161	Callee	ZEND_PUTS		82866	0					
ANR	83162	Identifier	ZEND_PUTS		82866	0					
ANR	83163	ArgumentList	"""\\n"""		82866	1					
ANR	83164	Argument	"""\\n"""		82866	0					
ANR	83165	PrimaryExpression	"""\\n"""		82866	0					
ANR	83166	ExpressionStatement	"memset ( emit_whitespace , 0 , sizeof ( int ) * 256 )"	114:8:3282:3325	82866	1	True				
ANR	83167	CallExpression	"memset ( emit_whitespace , 0 , sizeof ( int ) * 256 )"		82866	0					
ANR	83168	Callee	memset		82866	0					
ANR	83169	Identifier	memset		82866	0					
ANR	83170	ArgumentList	emit_whitespace		82866	1					
ANR	83171	Argument	emit_whitespace		82866	0					
ANR	83172	Identifier	emit_whitespace		82866	0					
ANR	83173	Argument	0		82866	1					
ANR	83174	PrimaryExpression	0		82866	0					
ANR	83175	Argument	sizeof ( int ) * 256		82866	2					
ANR	83176	MultiplicativeExpression	sizeof ( int ) * 256		82866	0		*			
ANR	83177	SizeofExpression	sizeof ( int )		82866	0					
ANR	83178	Sizeof	sizeof		82866	0					
ANR	83179	SizeofOperand	int		82866	1					
ANR	83180	PrimaryExpression	256		82866	1					
ANR	83181	ForStatement	for ( i = 0 ; i < nest_level ; i ++ )		82866	2					
ANR	83182	ForInit	i = 0 ;	115:13:3340:3343	82866	0	True				
ANR	83183	AssignmentExpression	i = 0		82866	0		=			
ANR	83184	Identifier	i		82866	0					
ANR	83185	PrimaryExpression	0		82866	1					
ANR	83186	Condition	i < nest_level	115:18:3345:3356	82866	1	True				
ANR	83187	RelationalExpression	i < nest_level		82866	0		<			
ANR	83188	Identifier	i		82866	0					
ANR	83189	Identifier	nest_level		82866	1					
ANR	83190	PostIncDecOperationExpression	i ++	115:32:3359:3361	82866	2	True				
ANR	83191	Identifier	i		82866	0					
ANR	83192	IncDec	++		82866	1					
ANR	83193	CompoundStatement		65:37:1570:1570	82866	3					
ANR	83194	ExpressionStatement	"ZEND_PUTS ( ""    "" )"	116:9:3375:3392	82866	0	True				
ANR	83195	CallExpression	"ZEND_PUTS ( ""    "" )"		82866	0					
ANR	83196	Callee	ZEND_PUTS		82866	0					
ANR	83197	Identifier	ZEND_PUTS		82866	0					
ANR	83198	ArgumentList	"""    """		82866	1					
ANR	83199	Argument	"""    """		82866	0					
ANR	83200	PrimaryExpression	"""    """		82866	0					
ANR	83201	ElseStatement	else		82866	0					
ANR	83202	CompoundStatement		68:14:1624:1624	82866	0					
ANR	83203	ExpressionStatement	handle_whitespace ( emit_whitespace )	119:8:3428:3462	82866	0	True				
ANR	83204	CallExpression	handle_whitespace ( emit_whitespace )		82866	0					
ANR	83205	Callee	handle_whitespace		82866	0					
ANR	83206	Identifier	handle_whitespace		82866	0					
ANR	83207	ArgumentList	emit_whitespace		82866	1					
ANR	83208	Argument	emit_whitespace		82866	0					
ANR	83209	Identifier	emit_whitespace		82866	0					
ANR	83210	ExpressionStatement	"zend_write ( ( char * ) LANG_SCNG ( yy_text ) , LANG_SCNG ( yy_leng ) )"	121:7:3480:3537	82866	17	True				
ANR	83211	CallExpression	"zend_write ( ( char * ) LANG_SCNG ( yy_text ) , LANG_SCNG ( yy_leng ) )"		82866	0					
ANR	83212	Callee	zend_write		82866	0					
ANR	83213	Identifier	zend_write		82866	0					
ANR	83214	ArgumentList	( char * ) LANG_SCNG ( yy_text )		82866	1					
ANR	83215	Argument	( char * ) LANG_SCNG ( yy_text )		82866	0					
ANR	83216	CastExpression	( char * ) LANG_SCNG ( yy_text )		82866	0					
ANR	83217	CastTarget	char *		82866	0					
ANR	83218	CallExpression	LANG_SCNG ( yy_text )		82866	1					
ANR	83219	Callee	LANG_SCNG		82866	0					
ANR	83220	Identifier	LANG_SCNG		82866	0					
ANR	83221	ArgumentList	yy_text		82866	1					
ANR	83222	Argument	yy_text		82866	0					
ANR	83223	Identifier	yy_text		82866	0					
ANR	83224	Argument	LANG_SCNG ( yy_leng )		82866	1					
ANR	83225	CallExpression	LANG_SCNG ( yy_leng )		82866	0					
ANR	83226	Callee	LANG_SCNG		82866	0					
ANR	83227	Identifier	LANG_SCNG		82866	0					
ANR	83228	ArgumentList	yy_leng		82866	1					
ANR	83229	Argument	yy_leng		82866	0					
ANR	83230	Identifier	yy_leng		82866	0					
ANR	83231	BreakStatement	break ;	122:7:3546:3551	82866	18	True				
ANR	83232	ElseStatement	else		82866	0					
ANR	83233	CompoundStatement		74:11:1777:1777	82866	0					
ANR	83234	ExpressionStatement	handle_whitespace ( emit_whitespace )	125:5:3578:3612	82866	0	True				
ANR	83235	CallExpression	handle_whitespace ( emit_whitespace )		82866	0					
ANR	83236	Callee	handle_whitespace		82866	0					
ANR	83237	Identifier	handle_whitespace		82866	0					
ANR	83238	ArgumentList	emit_whitespace		82866	1					
ANR	83239	Argument	emit_whitespace		82866	0					
ANR	83240	Identifier	emit_whitespace		82866	0					
ANR	83241	IfStatement	if ( in_string )		82866	1					
ANR	83242	Condition	in_string	126:9:3623:3631	82866	0	True				
ANR	83243	Identifier	in_string		82866	0					
ANR	83244	CompoundStatement		76:20:1840:1840	82866	1					
ANR	83245	ExpressionStatement	"zend_write ( ( char * ) LANG_SCNG ( yy_text ) , LANG_SCNG ( yy_leng ) )"	127:6:3642:3699	82866	0	True				
ANR	83246	CallExpression	"zend_write ( ( char * ) LANG_SCNG ( yy_text ) , LANG_SCNG ( yy_leng ) )"		82866	0					
ANR	83247	Callee	zend_write		82866	0					
ANR	83248	Identifier	zend_write		82866	0					
ANR	83249	ArgumentList	( char * ) LANG_SCNG ( yy_text )		82866	1					
ANR	83250	Argument	( char * ) LANG_SCNG ( yy_text )		82866	0					
ANR	83251	CastExpression	( char * ) LANG_SCNG ( yy_text )		82866	0					
ANR	83252	CastTarget	char *		82866	0					
ANR	83253	CallExpression	LANG_SCNG ( yy_text )		82866	1					
ANR	83254	Callee	LANG_SCNG		82866	0					
ANR	83255	Identifier	LANG_SCNG		82866	0					
ANR	83256	ArgumentList	yy_text		82866	1					
ANR	83257	Argument	yy_text		82866	0					
ANR	83258	Identifier	yy_text		82866	0					
ANR	83259	Argument	LANG_SCNG ( yy_leng )		82866	1					
ANR	83260	CallExpression	LANG_SCNG ( yy_leng )		82866	0					
ANR	83261	Callee	LANG_SCNG		82866	0					
ANR	83262	Identifier	LANG_SCNG		82866	0					
ANR	83263	ArgumentList	yy_leng		82866	1					
ANR	83264	Argument	yy_leng		82866	0					
ANR	83265	Identifier	yy_leng		82866	0					
ANR	83266	ElseStatement	else		82866	0					
ANR	83267	CompoundStatement		79:12:1950:1950	82866	0					
ANR	83268	ExpressionStatement	"zend_write ( ( char * ) LANG_SCNG ( yy_text ) , LANG_SCNG ( yy_leng ) )"	130:6:3752:3809	82866	0	True				
ANR	83269	CallExpression	"zend_write ( ( char * ) LANG_SCNG ( yy_text ) , LANG_SCNG ( yy_leng ) )"		82866	0					
ANR	83270	Callee	zend_write		82866	0					
ANR	83271	Identifier	zend_write		82866	0					
ANR	83272	ArgumentList	( char * ) LANG_SCNG ( yy_text )		82866	1					
ANR	83273	Argument	( char * ) LANG_SCNG ( yy_text )		82866	0					
ANR	83274	CastExpression	( char * ) LANG_SCNG ( yy_text )		82866	0					
ANR	83275	CastTarget	char *		82866	0					
ANR	83276	CallExpression	LANG_SCNG ( yy_text )		82866	1					
ANR	83277	Callee	LANG_SCNG		82866	0					
ANR	83278	Identifier	LANG_SCNG		82866	0					
ANR	83279	ArgumentList	yy_text		82866	1					
ANR	83280	Argument	yy_text		82866	0					
ANR	83281	Identifier	yy_text		82866	0					
ANR	83282	Argument	LANG_SCNG ( yy_leng )		82866	1					
ANR	83283	CallExpression	LANG_SCNG ( yy_leng )		82866	0					
ANR	83284	Callee	LANG_SCNG		82866	0					
ANR	83285	Identifier	LANG_SCNG		82866	0					
ANR	83286	ArgumentList	yy_leng		82866	1					
ANR	83287	Argument	yy_leng		82866	0					
ANR	83288	Identifier	yy_leng		82866	0					
ANR	83289	BreakStatement	break ;	133:4:3828:3833	82866	10	True				
ANR	83290	IfStatement	if ( token . type == IS_STRING )		82866	1					
ANR	83291	Condition	token . type == IS_STRING	135:6:3845:3867	82866	0	True				
ANR	83292	EqualityExpression	token . type == IS_STRING		82866	0		==			
ANR	83293	MemberAccess	token . type		82866	0					
ANR	83294	Identifier	token		82866	0					
ANR	83295	Identifier	type		82866	1					
ANR	83296	Identifier	IS_STRING		82866	1					
ANR	83297	CompoundStatement		85:31:2076:2076	82866	1					
ANR	83298	SwitchStatement	switch ( token_type )		82866	0					
ANR	83299	Condition	token_type	136:11:3883:3892	82866	0	True				
ANR	83300	Identifier	token_type		82866	0					
ANR	83301	CompoundStatement		86:23:2101:2101	82866	1					
ANR	83302	Label	case T_OPEN_TAG :	137:3:3900:3915	82866	0	True				
ANR	83303	Identifier	T_OPEN_TAG		82866	0					
ANR	83304	Label	case T_CLOSE_TAG :	138:3:3920:3936	82866	1	True				
ANR	83305	Identifier	T_CLOSE_TAG		82866	0					
ANR	83306	Label	case T_WHITESPACE :	139:3:3941:3958	82866	2	True				
ANR	83307	Identifier	T_WHITESPACE		82866	0					
ANR	83308	BreakStatement	break ;	140:4:3964:3969	82866	3	True				
ANR	83309	Label	default :	141:3:3974:3981	82866	4	True				
ANR	83310	Identifier	default		82866	0					
ANR	83311	ExpressionStatement	str_efree ( token . value . str . val )	142:4:3987:4017	82866	5	True				
ANR	83312	CallExpression	str_efree ( token . value . str . val )		82866	0					
ANR	83313	Callee	str_efree		82866	0					
ANR	83314	Identifier	str_efree		82866	0					
ANR	83315	ArgumentList	token . value . str . val		82866	1					
ANR	83316	Argument	token . value . str . val		82866	0					
ANR	83317	MemberAccess	token . value . str . val		82866	0					
ANR	83318	MemberAccess	token . value . str		82866	0					
ANR	83319	MemberAccess	token . value		82866	0					
ANR	83320	Identifier	token		82866	0					
ANR	83321	Identifier	value		82866	1					
ANR	83322	Identifier	str		82866	1					
ANR	83323	Identifier	val		82866	1					
ANR	83324	BreakStatement	break ;	143:4:4023:4028	82866	6	True				
ANR	83325	ExpressionStatement	token . type = 0	146:2:4041:4055	82866	2	True				
ANR	83326	AssignmentExpression	token . type = 0		82866	0		=			
ANR	83327	MemberAccess	token . type		82866	0					
ANR	83328	Identifier	token		82866	0					
ANR	83329	Identifier	type		82866	1					
ANR	83330	PrimaryExpression	0		82866	1					
ANR	83331	ReturnType	ZEND_API void		82866	1					
ANR	83332	Identifier	zend_indent		82866	2					
ANR	83333	ParameterList			82866	3					
ANR	83334	CFGEntryNode	ENTRY		82866		True				
ANR	83335	CFGExitNode	EXIT		82866		True				
ANR	83336	CFGErrorNode	ERROR		82866		True				
ANR	83337	Symbol	token . value . str . val		82866						
ANR	83338	Symbol	* * i		82866						
ANR	83339	Symbol	* LANG_SCNG		82866						
ANR	83340	Symbol	* emit_whitespace		82866						
ANR	83341	Symbol	token . value . str		82866						
ANR	83342	Symbol	token . type		82866						
ANR	83343	Symbol	yy_leng		82866						
ANR	83344	Symbol	i		82866						
ANR	83345	Symbol	token_type		82866						
ANR	83346	Symbol	token		82866						
ANR	83347	Symbol	yy_text		82866						
ANR	83348	Symbol	token . value		82866						
ANR	83349	Symbol	in_string		82866						
ANR	83350	Symbol	* i		82866						
ANR	83351	Symbol	emit_whitespace		82866						
ANR	83352	Symbol	LANG_SCNG		82866						
ANR	83353	Symbol	* * LANG_SCNG		82866						
ANR	83354	Symbol	nest_level		82866						
ANR	83355	Symbol	IS_STRING		82866						
