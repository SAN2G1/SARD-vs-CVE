command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	108216	File	data/converged/CVE-2017-11142_php-src/Zend_zend_static_allocator.c								
ANR	108217	Function	block_init	25:0:1286:1448							
ANR	108218	FunctionDef	"block_init (Block * block , zend_uint block_size)"		108217	0					
ANR	108219	CompoundStatement		26:0:1352:1448	108217	0					
ANR	108220	ExpressionStatement	block -> pos = block -> bp = ( char * ) emalloc ( block_size )	27:1:1355:1408	108217	0	True				
ANR	108221	AssignmentExpression	block -> pos = block -> bp = ( char * ) emalloc ( block_size )		108217	0		=			
ANR	108222	PtrMemberAccess	block -> pos		108217	0					
ANR	108223	Identifier	block		108217	0					
ANR	108224	Identifier	pos		108217	1					
ANR	108225	AssignmentExpression	block -> bp = ( char * ) emalloc ( block_size )		108217	1		=			
ANR	108226	PtrMemberAccess	block -> bp		108217	0					
ANR	108227	Identifier	block		108217	0					
ANR	108228	Identifier	bp		108217	1					
ANR	108229	CastExpression	( char * ) emalloc ( block_size )		108217	1					
ANR	108230	CastTarget	char *		108217	0					
ANR	108231	CallExpression	emalloc ( block_size )		108217	1					
ANR	108232	Callee	emalloc		108217	0					
ANR	108233	Identifier	emalloc		108217	0					
ANR	108234	ArgumentList	block_size		108217	1					
ANR	108235	Argument	block_size		108217	0					
ANR	108236	Identifier	block_size		108217	0					
ANR	108237	ExpressionStatement	block -> end = block -> bp + block_size	28:1:1411:1446	108217	1	True				
ANR	108238	AssignmentExpression	block -> end = block -> bp + block_size		108217	0		=			
ANR	108239	PtrMemberAccess	block -> end		108217	0					
ANR	108240	Identifier	block		108217	0					
ANR	108241	Identifier	end		108217	1					
ANR	108242	AdditiveExpression	block -> bp + block_size		108217	1		+			
ANR	108243	PtrMemberAccess	block -> bp		108217	0					
ANR	108244	Identifier	block		108217	0					
ANR	108245	Identifier	bp		108217	1					
ANR	108246	Identifier	block_size		108217	1					
ANR	108247	ReturnType	inline static void		108217	1					
ANR	108248	Identifier	block_init		108217	2					
ANR	108249	ParameterList	"Block * block , zend_uint block_size"		108217	3					
ANR	108250	Parameter	Block * block	25:30:1316:1327	108217	0	True				
ANR	108251	ParameterType	Block *		108217	0					
ANR	108252	Identifier	block		108217	1					
ANR	108253	Parameter	zend_uint block_size	25:44:1330:1349	108217	1	True				
ANR	108254	ParameterType	zend_uint		108217	0					
ANR	108255	Identifier	block_size		108217	1					
ANR	108256	CFGEntryNode	ENTRY		108217		True				
ANR	108257	CFGExitNode	EXIT		108217		True				
ANR	108258	Symbol	emalloc		108217						
ANR	108259	Symbol	block		108217						
ANR	108260	Symbol	block -> end		108217						
ANR	108261	Symbol	block -> pos		108217						
ANR	108262	Symbol	block_size		108217						
ANR	108263	Symbol	block -> bp		108217						
ANR	108264	Symbol	* block		108217						
ANR	108265	Function	block_allocate	31:0:1451:1631							
ANR	108266	FunctionDef	"block_allocate (Block * block , zend_uint size)"		108265	0					
ANR	108267	CompoundStatement		32:0:1516:1631	108265	0					
ANR	108268	IdentifierDeclStatement	char * retval = block -> pos ;	33:1:1519:1544	108265	0	True				
ANR	108269	IdentifierDecl	* retval = block -> pos		108265	0					
ANR	108270	IdentifierDeclType	char *		108265	0					
ANR	108271	Identifier	retval		108265	1					
ANR	108272	AssignmentExpression	* retval = block -> pos		108265	2		=			
ANR	108273	Identifier	retval		108265	0					
ANR	108274	PtrMemberAccess	block -> pos		108265	1					
ANR	108275	Identifier	block		108265	0					
ANR	108276	Identifier	pos		108265	1					
ANR	108277	IfStatement	if ( ( block -> pos += size ) >= block -> end )		108265	1					
ANR	108278	Condition	( block -> pos += size ) >= block -> end	34:5:1551:1584	108265	0	True				
ANR	108279	RelationalExpression	( block -> pos += size ) >= block -> end		108265	0		>=			
ANR	108280	AssignmentExpression	block -> pos += size		108265	0		+=			
ANR	108281	PtrMemberAccess	block -> pos		108265	0					
ANR	108282	Identifier	block		108265	0					
ANR	108283	Identifier	pos		108265	1					
ANR	108284	Identifier	size		108265	1					
ANR	108285	PtrMemberAccess	block -> end		108265	1					
ANR	108286	Identifier	block		108265	0					
ANR	108287	Identifier	end		108265	1					
ANR	108288	CompoundStatement		3:41:70:70	108265	1					
ANR	108289	ReturnStatement	return ( char * ) NULL ;	35:2:1591:1610	108265	0	True				
ANR	108290	CastExpression	( char * ) NULL		108265	0					
ANR	108291	CastTarget	char *		108265	0					
ANR	108292	Identifier	NULL		108265	1					
ANR	108293	ReturnStatement	return retval ;	37:1:1616:1629	108265	2	True				
ANR	108294	Identifier	retval		108265	0					
ANR	108295	ReturnType	inline static char *		108265	1					
ANR	108296	Identifier	block_allocate		108265	2					
ANR	108297	ParameterList	"Block * block , zend_uint size"		108265	3					
ANR	108298	Parameter	Block * block	31:35:1486:1497	108265	0	True				
ANR	108299	ParameterType	Block *		108265	0					
ANR	108300	Identifier	block		108265	1					
ANR	108301	Parameter	zend_uint size	31:49:1500:1513	108265	1	True				
ANR	108302	ParameterType	zend_uint		108265	0					
ANR	108303	Identifier	size		108265	1					
ANR	108304	CFGEntryNode	ENTRY		108265		True				
ANR	108305	CFGExitNode	EXIT		108265		True				
ANR	108306	Symbol	NULL		108265						
ANR	108307	Symbol	size		108265						
ANR	108308	Symbol	block		108265						
ANR	108309	Symbol	block -> end		108265						
ANR	108310	Symbol	block -> pos		108265						
ANR	108311	Symbol	retval		108265						
ANR	108312	Symbol	* block		108265						
ANR	108313	Function	block_destroy	40:0:1634:1702							
ANR	108314	FunctionDef	block_destroy (Block * block)		108313	0					
ANR	108315	CompoundStatement		41:0:1681:1702	108313	0					
ANR	108316	ExpressionStatement	efree ( block -> bp )	42:1:1684:1700	108313	0	True				
ANR	108317	CallExpression	efree ( block -> bp )		108313	0					
ANR	108318	Callee	efree		108313	0					
ANR	108319	Identifier	efree		108313	0					
ANR	108320	ArgumentList	block -> bp		108313	1					
ANR	108321	Argument	block -> bp		108313	0					
ANR	108322	PtrMemberAccess	block -> bp		108313	0					
ANR	108323	Identifier	block		108313	0					
ANR	108324	Identifier	bp		108313	1					
ANR	108325	ReturnType	inline static void		108313	1					
ANR	108326	Identifier	block_destroy		108313	2					
ANR	108327	ParameterList	Block * block		108313	3					
ANR	108328	Parameter	Block * block	40:33:1667:1678	108313	0	True				
ANR	108329	ParameterType	Block *		108313	0					
ANR	108330	Identifier	block		108313	1					
ANR	108331	CFGEntryNode	ENTRY		108313		True				
ANR	108332	CFGExitNode	EXIT		108313		True				
ANR	108333	Symbol	block		108313						
ANR	108334	Symbol	* block		108313						
ANR	108335	Symbol	block -> bp		108313						
ANR	108336	Function	static_allocator_init	45:0:1705:1895							
ANR	108337	FunctionDef	static_allocator_init (StaticAllocator * sa)		108336	0					
ANR	108338	CompoundStatement		46:0:1753:1895	108336	0					
ANR	108339	ExpressionStatement	sa -> Blocks = ( Block * ) emalloc ( sizeof ( Block ) )	47:1:1756:1801	108336	0	True				
ANR	108340	AssignmentExpression	sa -> Blocks = ( Block * ) emalloc ( sizeof ( Block ) )		108336	0		=			
ANR	108341	PtrMemberAccess	sa -> Blocks		108336	0					
ANR	108342	Identifier	sa		108336	0					
ANR	108343	Identifier	Blocks		108336	1					
ANR	108344	CastExpression	( Block * ) emalloc ( sizeof ( Block ) )		108336	1					
ANR	108345	CastTarget	Block *		108336	0					
ANR	108346	CallExpression	emalloc ( sizeof ( Block ) )		108336	1					
ANR	108347	Callee	emalloc		108336	0					
ANR	108348	Identifier	emalloc		108336	0					
ANR	108349	ArgumentList	sizeof ( Block )		108336	1					
ANR	108350	Argument	sizeof ( Block )		108336	0					
ANR	108351	SizeofExpression	sizeof ( Block )		108336	0					
ANR	108352	Sizeof	sizeof		108336	0					
ANR	108353	SizeofOperand	Block		108336	1					
ANR	108354	ExpressionStatement	"block_init ( sa -> Blocks , ALLOCATOR_BLOCK_SIZE )"	48:1:1804:1848	108336	1	True				
ANR	108355	CallExpression	"block_init ( sa -> Blocks , ALLOCATOR_BLOCK_SIZE )"		108336	0					
ANR	108356	Callee	block_init		108336	0					
ANR	108357	Identifier	block_init		108336	0					
ANR	108358	ArgumentList	sa -> Blocks		108336	1					
ANR	108359	Argument	sa -> Blocks		108336	0					
ANR	108360	PtrMemberAccess	sa -> Blocks		108336	0					
ANR	108361	Identifier	sa		108336	0					
ANR	108362	Identifier	Blocks		108336	1					
ANR	108363	Argument	ALLOCATOR_BLOCK_SIZE		108336	1					
ANR	108364	Identifier	ALLOCATOR_BLOCK_SIZE		108336	0					
ANR	108365	ExpressionStatement	sa -> num_blocks = 1	49:1:1851:1869	108336	2	True				
ANR	108366	AssignmentExpression	sa -> num_blocks = 1		108336	0		=			
ANR	108367	PtrMemberAccess	sa -> num_blocks		108336	0					
ANR	108368	Identifier	sa		108336	0					
ANR	108369	Identifier	num_blocks		108336	1					
ANR	108370	PrimaryExpression	1		108336	1					
ANR	108371	ExpressionStatement	sa -> current_block = 0	50:1:1872:1893	108336	3	True				
ANR	108372	AssignmentExpression	sa -> current_block = 0		108336	0		=			
ANR	108373	PtrMemberAccess	sa -> current_block		108336	0					
ANR	108374	Identifier	sa		108336	0					
ANR	108375	Identifier	current_block		108336	1					
ANR	108376	PrimaryExpression	0		108336	1					
ANR	108377	ReturnType	void		108336	1					
ANR	108378	Identifier	static_allocator_init		108336	2					
ANR	108379	ParameterList	StaticAllocator * sa		108336	3					
ANR	108380	Parameter	StaticAllocator * sa	45:27:1732:1750	108336	0	True				
ANR	108381	ParameterType	StaticAllocator *		108336	0					
ANR	108382	Identifier	sa		108336	1					
ANR	108383	CFGEntryNode	ENTRY		108336		True				
ANR	108384	CFGExitNode	EXIT		108336		True				
ANR	108385	Symbol	sa -> num_blocks		108336						
ANR	108386	Symbol	emalloc		108336						
ANR	108387	Symbol	sa -> Blocks		108336						
ANR	108388	Symbol	* sa		108336						
ANR	108389	Symbol	ALLOCATOR_BLOCK_SIZE		108336						
ANR	108390	Symbol	sa -> current_block		108336						
ANR	108391	Symbol	sa		108336						
ANR	108392	Function	static_allocator_allocate	53:0:1898:2356							
ANR	108393	FunctionDef	"static_allocator_allocate (StaticAllocator * sa , zend_uint size)"		108392	0					
ANR	108394	CompoundStatement		54:0:1967:2356	108392	0					
ANR	108395	IdentifierDeclStatement	char * retval ;	55:1:1970:1982	108392	0	True				
ANR	108396	IdentifierDecl	* retval		108392	0					
ANR	108397	IdentifierDeclType	char *		108392	0					
ANR	108398	Identifier	retval		108392	1					
ANR	108399	ExpressionStatement	"retval = block_allocate ( & sa -> Blocks [ sa -> current_block ] , size )"	57:1:1986:2047	108392	1	True				
ANR	108400	AssignmentExpression	"retval = block_allocate ( & sa -> Blocks [ sa -> current_block ] , size )"		108392	0		=			
ANR	108401	Identifier	retval		108392	0					
ANR	108402	CallExpression	"block_allocate ( & sa -> Blocks [ sa -> current_block ] , size )"		108392	1					
ANR	108403	Callee	block_allocate		108392	0					
ANR	108404	Identifier	block_allocate		108392	0					
ANR	108405	ArgumentList	& sa -> Blocks [ sa -> current_block ]		108392	1					
ANR	108406	Argument	& sa -> Blocks [ sa -> current_block ]		108392	0					
ANR	108407	UnaryOperationExpression	& sa -> Blocks [ sa -> current_block ]		108392	0					
ANR	108408	UnaryOperator	&		108392	0					
ANR	108409	ArrayIndexing	sa -> Blocks [ sa -> current_block ]		108392	1					
ANR	108410	PtrMemberAccess	sa -> Blocks		108392	0					
ANR	108411	Identifier	sa		108392	0					
ANR	108412	Identifier	Blocks		108392	1					
ANR	108413	PtrMemberAccess	sa -> current_block		108392	1					
ANR	108414	Identifier	sa		108392	0					
ANR	108415	Identifier	current_block		108392	1					
ANR	108416	Argument	size		108392	1					
ANR	108417	Identifier	size		108392	0					
ANR	108418	IfStatement	if ( retval )		108392	2					
ANR	108419	Condition	retval	58:5:2054:2059	108392	0	True				
ANR	108420	Identifier	retval		108392	0					
ANR	108421	CompoundStatement		5:13:94:94	108392	1					
ANR	108422	ReturnStatement	return retval ;	59:2:2066:2079	108392	0	True				
ANR	108423	Identifier	retval		108392	0					
ANR	108424	ExpressionStatement	"sa -> Blocks = ( Block * ) erealloc ( sa -> Blocks , ++ sa -> num_blocks )"	61:1:2085:2146	108392	3	True				
ANR	108425	AssignmentExpression	"sa -> Blocks = ( Block * ) erealloc ( sa -> Blocks , ++ sa -> num_blocks )"		108392	0		=			
ANR	108426	PtrMemberAccess	sa -> Blocks		108392	0					
ANR	108427	Identifier	sa		108392	0					
ANR	108428	Identifier	Blocks		108392	1					
ANR	108429	CastExpression	"( Block * ) erealloc ( sa -> Blocks , ++ sa -> num_blocks )"		108392	1					
ANR	108430	CastTarget	Block *		108392	0					
ANR	108431	CallExpression	"erealloc ( sa -> Blocks , ++ sa -> num_blocks )"		108392	1					
ANR	108432	Callee	erealloc		108392	0					
ANR	108433	Identifier	erealloc		108392	0					
ANR	108434	ArgumentList	sa -> Blocks		108392	1					
ANR	108435	Argument	sa -> Blocks		108392	0					
ANR	108436	PtrMemberAccess	sa -> Blocks		108392	0					
ANR	108437	Identifier	sa		108392	0					
ANR	108438	Identifier	Blocks		108392	1					
ANR	108439	Argument	++ sa -> num_blocks		108392	1					
ANR	108440	UnaryExpression	++ sa -> num_blocks		108392	0					
ANR	108441	IncDec	++		108392	0					
ANR	108442	PtrMemberAccess	sa -> num_blocks		108392	1					
ANR	108443	Identifier	sa		108392	0					
ANR	108444	Identifier	num_blocks		108392	1					
ANR	108445	ExpressionStatement	sa -> current_block ++	62:1:2149:2168	108392	4	True				
ANR	108446	PostIncDecOperationExpression	sa -> current_block ++		108392	0					
ANR	108447	PtrMemberAccess	sa -> current_block		108392	0					
ANR	108448	Identifier	sa		108392	0					
ANR	108449	Identifier	current_block		108392	1					
ANR	108450	IncDec	++		108392	1					
ANR	108451	ExpressionStatement	"block_init ( & sa -> Blocks [ sa -> current_block ] , ( size > ALLOCATOR_BLOCK_SIZE ) ? size : ALLOCATOR_BLOCK_SIZE )"	63:1:2171:2274	108392	5	True				
ANR	108452	CallExpression	"block_init ( & sa -> Blocks [ sa -> current_block ] , ( size > ALLOCATOR_BLOCK_SIZE ) ? size : ALLOCATOR_BLOCK_SIZE )"		108392	0					
ANR	108453	Callee	block_init		108392	0					
ANR	108454	Identifier	block_init		108392	0					
ANR	108455	ArgumentList	& sa -> Blocks [ sa -> current_block ]		108392	1					
ANR	108456	Argument	& sa -> Blocks [ sa -> current_block ]		108392	0					
ANR	108457	UnaryOperationExpression	& sa -> Blocks [ sa -> current_block ]		108392	0					
ANR	108458	UnaryOperator	&		108392	0					
ANR	108459	ArrayIndexing	sa -> Blocks [ sa -> current_block ]		108392	1					
ANR	108460	PtrMemberAccess	sa -> Blocks		108392	0					
ANR	108461	Identifier	sa		108392	0					
ANR	108462	Identifier	Blocks		108392	1					
ANR	108463	PtrMemberAccess	sa -> current_block		108392	1					
ANR	108464	Identifier	sa		108392	0					
ANR	108465	Identifier	current_block		108392	1					
ANR	108466	Argument	( size > ALLOCATOR_BLOCK_SIZE ) ? size : ALLOCATOR_BLOCK_SIZE		108392	1					
ANR	108467	ConditionalExpression	( size > ALLOCATOR_BLOCK_SIZE ) ? size : ALLOCATOR_BLOCK_SIZE		108392	0					
ANR	108468	Condition	size > ALLOCATOR_BLOCK_SIZE		108392	0					
ANR	108469	RelationalExpression	size > ALLOCATOR_BLOCK_SIZE		108392	0		>			
ANR	108470	Identifier	size		108392	0					
ANR	108471	Identifier	ALLOCATOR_BLOCK_SIZE		108392	1					
ANR	108472	Identifier	size		108392	1					
ANR	108473	Identifier	ALLOCATOR_BLOCK_SIZE		108392	2					
ANR	108474	ExpressionStatement	"retval = block_allocate ( & sa -> Blocks [ sa -> current_block ] , size )"	64:1:2277:2338	108392	6	True				
ANR	108475	AssignmentExpression	"retval = block_allocate ( & sa -> Blocks [ sa -> current_block ] , size )"		108392	0		=			
ANR	108476	Identifier	retval		108392	0					
ANR	108477	CallExpression	"block_allocate ( & sa -> Blocks [ sa -> current_block ] , size )"		108392	1					
ANR	108478	Callee	block_allocate		108392	0					
ANR	108479	Identifier	block_allocate		108392	0					
ANR	108480	ArgumentList	& sa -> Blocks [ sa -> current_block ]		108392	1					
ANR	108481	Argument	& sa -> Blocks [ sa -> current_block ]		108392	0					
ANR	108482	UnaryOperationExpression	& sa -> Blocks [ sa -> current_block ]		108392	0					
ANR	108483	UnaryOperator	&		108392	0					
ANR	108484	ArrayIndexing	sa -> Blocks [ sa -> current_block ]		108392	1					
ANR	108485	PtrMemberAccess	sa -> Blocks		108392	0					
ANR	108486	Identifier	sa		108392	0					
ANR	108487	Identifier	Blocks		108392	1					
ANR	108488	PtrMemberAccess	sa -> current_block		108392	1					
ANR	108489	Identifier	sa		108392	0					
ANR	108490	Identifier	current_block		108392	1					
ANR	108491	Argument	size		108392	1					
ANR	108492	Identifier	size		108392	0					
ANR	108493	ReturnStatement	return retval ;	65:1:2341:2354	108392	7	True				
ANR	108494	Identifier	retval		108392	0					
ANR	108495	ReturnType	char *		108392	1					
ANR	108496	Identifier	static_allocator_allocate		108392	2					
ANR	108497	ParameterList	"StaticAllocator * sa , zend_uint size"		108392	3					
ANR	108498	Parameter	StaticAllocator * sa	53:32:1930:1948	108392	0	True				
ANR	108499	ParameterType	StaticAllocator *		108392	0					
ANR	108500	Identifier	sa		108392	1					
ANR	108501	Parameter	zend_uint size	53:53:1951:1964	108392	1	True				
ANR	108502	ParameterType	zend_uint		108392	0					
ANR	108503	Identifier	size		108392	1					
ANR	108504	CFGEntryNode	ENTRY		108392		True				
ANR	108505	CFGExitNode	EXIT		108392		True				
ANR	108506	Symbol	sa -> num_blocks		108392						
ANR	108507	Symbol	sa -> Blocks		108392						
ANR	108508	Symbol	size		108392						
ANR	108509	Symbol	sa -> current_block		108392						
ANR	108510	Symbol	* sa		108392						
ANR	108511	Symbol	ALLOCATOR_BLOCK_SIZE		108392						
ANR	108512	Symbol	block_allocate		108392						
ANR	108513	Symbol	erealloc		108392						
ANR	108514	Symbol	sa		108392						
ANR	108515	Symbol	retval		108392						
ANR	108516	Function	static_allocator_destroy	68:0:2359:2516							
ANR	108517	FunctionDef	static_allocator_destroy (StaticAllocator * sa)		108516	0					
ANR	108518	CompoundStatement		69:0:2410:2516	108516	0					
ANR	108519	IdentifierDeclStatement	zend_uint i ;	70:1:2413:2424	108516	0	True				
ANR	108520	IdentifierDecl	i		108516	0					
ANR	108521	IdentifierDeclType	zend_uint		108516	0					
ANR	108522	Identifier	i		108516	1					
ANR	108523	ForStatement	for ( i = 0 ; i < sa -> num_blocks ; i ++ )		108516	1					
ANR	108524	ForInit	i = 0 ;	72:6:2433:2436	108516	0	True				
ANR	108525	AssignmentExpression	i = 0		108516	0		=			
ANR	108526	Identifier	i		108516	0					
ANR	108527	PrimaryExpression	0		108516	1					
ANR	108528	Condition	i < sa -> num_blocks	72:11:2438:2453	108516	1	True				
ANR	108529	RelationalExpression	i < sa -> num_blocks		108516	0		<			
ANR	108530	Identifier	i		108516	0					
ANR	108531	PtrMemberAccess	sa -> num_blocks		108516	1					
ANR	108532	Identifier	sa		108516	0					
ANR	108533	Identifier	num_blocks		108516	1					
ANR	108534	PostIncDecOperationExpression	i ++	72:29:2456:2458	108516	2	True				
ANR	108535	Identifier	i		108516	0					
ANR	108536	IncDec	++		108516	1					
ANR	108537	CompoundStatement		4:34:50:50	108516	3					
ANR	108538	ExpressionStatement	block_free ( & sa -> Blocks [ i ] )	73:2:2465:2491	108516	0	True				
ANR	108539	CallExpression	block_free ( & sa -> Blocks [ i ] )		108516	0					
ANR	108540	Callee	block_free		108516	0					
ANR	108541	Identifier	block_free		108516	0					
ANR	108542	ArgumentList	& sa -> Blocks [ i ]		108516	1					
ANR	108543	Argument	& sa -> Blocks [ i ]		108516	0					
ANR	108544	UnaryOperationExpression	& sa -> Blocks [ i ]		108516	0					
ANR	108545	UnaryOperator	&		108516	0					
ANR	108546	ArrayIndexing	sa -> Blocks [ i ]		108516	1					
ANR	108547	PtrMemberAccess	sa -> Blocks		108516	0					
ANR	108548	Identifier	sa		108516	0					
ANR	108549	Identifier	Blocks		108516	1					
ANR	108550	Identifier	i		108516	1					
ANR	108551	ExpressionStatement	efree ( sa -> Blocks )	75:1:2497:2514	108516	2	True				
ANR	108552	CallExpression	efree ( sa -> Blocks )		108516	0					
ANR	108553	Callee	efree		108516	0					
ANR	108554	Identifier	efree		108516	0					
ANR	108555	ArgumentList	sa -> Blocks		108516	1					
ANR	108556	Argument	sa -> Blocks		108516	0					
ANR	108557	PtrMemberAccess	sa -> Blocks		108516	0					
ANR	108558	Identifier	sa		108516	0					
ANR	108559	Identifier	Blocks		108516	1					
ANR	108560	ReturnType	void		108516	1					
ANR	108561	Identifier	static_allocator_destroy		108516	2					
ANR	108562	ParameterList	StaticAllocator * sa		108516	3					
ANR	108563	Parameter	StaticAllocator * sa	68:30:2389:2407	108516	0	True				
ANR	108564	ParameterType	StaticAllocator *		108516	0					
ANR	108565	Identifier	sa		108516	1					
ANR	108566	CFGEntryNode	ENTRY		108516		True				
ANR	108567	CFGExitNode	EXIT		108516		True				
ANR	108568	Symbol	sa -> num_blocks		108516						
ANR	108569	Symbol	sa -> Blocks		108516						
ANR	108570	Symbol	* sa		108516						
ANR	108571	Symbol	i		108516						
ANR	108572	Symbol	sa		108516						
