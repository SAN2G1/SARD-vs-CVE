command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	694839	File	data/converged/CVE-2017-11142_php-src/ext_mbstring_oniguruma_enc_utf32_le.c								
ANR	694840	Function	utf32le_is_mbc_newline	38:0:1685:2181							
ANR	694841	FunctionDef	"utf32le_is_mbc_newline (const UChar * p , const UChar * end)"		694840	0					
ANR	694842	CompoundStatement		40:0:1753:2181	694840	0					
ANR	694843	IfStatement	if ( p + 3 < end )		694840	0					
ANR	694844	Condition	p + 3 < end	41:6:1761:1771	694840	0	True				
ANR	694845	RelationalExpression	p + 3 < end		694840	0		<			
ANR	694846	AdditiveExpression	p + 3		694840	0		+			
ANR	694847	Identifier	p		694840	0					
ANR	694848	PrimaryExpression	3		694840	1					
ANR	694849	Identifier	end		694840	1					
ANR	694850	CompoundStatement		2:19:20:20	694840	1					
ANR	694851	IfStatement	if ( * p == 0x0a && * ( p + 1 ) == 0 && * ( p + 2 ) == 0 && * ( p + 3 ) == 0 )		694840	0					
ANR	694852	Condition	* p == 0x0a && * ( p + 1 ) == 0 && * ( p + 2 ) == 0 && * ( p + 3 ) == 0	42:8:1784:1838	694840	0	True				
ANR	694853	AndExpression	* p == 0x0a && * ( p + 1 ) == 0 && * ( p + 2 ) == 0 && * ( p + 3 ) == 0		694840	0		&&			
ANR	694854	EqualityExpression	* p == 0x0a		694840	0		==			
ANR	694855	UnaryOperationExpression	* p		694840	0					
ANR	694856	UnaryOperator	*		694840	0					
ANR	694857	Identifier	p		694840	1					
ANR	694858	PrimaryExpression	0x0a		694840	1					
ANR	694859	AndExpression	* ( p + 1 ) == 0 && * ( p + 2 ) == 0 && * ( p + 3 ) == 0		694840	1		&&			
ANR	694860	EqualityExpression	* ( p + 1 ) == 0		694840	0		==			
ANR	694861	UnaryOperationExpression	* ( p + 1 )		694840	0					
ANR	694862	UnaryOperator	*		694840	0					
ANR	694863	AdditiveExpression	p + 1		694840	1		+			
ANR	694864	Identifier	p		694840	0					
ANR	694865	PrimaryExpression	1		694840	1					
ANR	694866	PrimaryExpression	0		694840	1					
ANR	694867	AndExpression	* ( p + 2 ) == 0 && * ( p + 3 ) == 0		694840	1		&&			
ANR	694868	EqualityExpression	* ( p + 2 ) == 0		694840	0		==			
ANR	694869	UnaryOperationExpression	* ( p + 2 )		694840	0					
ANR	694870	UnaryOperator	*		694840	0					
ANR	694871	AdditiveExpression	p + 2		694840	1		+			
ANR	694872	Identifier	p		694840	0					
ANR	694873	PrimaryExpression	2		694840	1					
ANR	694874	PrimaryExpression	0		694840	1					
ANR	694875	EqualityExpression	* ( p + 3 ) == 0		694840	1		==			
ANR	694876	UnaryOperationExpression	* ( p + 3 )		694840	0					
ANR	694877	UnaryOperator	*		694840	0					
ANR	694878	AdditiveExpression	p + 3		694840	1		+			
ANR	694879	Identifier	p		694840	0					
ANR	694880	PrimaryExpression	3		694840	1					
ANR	694881	PrimaryExpression	0		694840	1					
ANR	694882	ReturnStatement	return 1 ;	43:6:1847:1855	694840	1	True				
ANR	694883	PrimaryExpression	1		694840	0					
ANR	694884	Statement	if	45:4:1901:1902	694840	1	True				
ANR	694885	Statement	(	45:7:1904:1904	694840	2	True				
ANR	694886	Statement	(	45:8:1905:1905	694840	3	True				
ANR	694887	Statement	*	47:2:1945:1945	694840	4	True				
ANR	694888	Statement	p	47:3:1946:1946	694840	5	True				
ANR	694889	Statement	==	47:5:1948:1949	694840	6	True				
ANR	694890	Statement	0x0d	47:8:1951:1954	694840	7	True				
ANR	694891	Statement	||	47:13:1956:1957	694840	8	True				
ANR	694892	Statement	*	49:2:1968:1968	694840	9	True				
ANR	694893	Statement	p	49:3:1969:1969	694840	10	True				
ANR	694894	Statement	==	49:5:1971:1972	694840	11	True				
ANR	694895	Statement	0x85	49:8:1974:1977	694840	12	True				
ANR	694896	Statement	)	49:12:1978:1978	694840	13	True				
ANR	694897	Statement	&&	50:1:1981:1982	694840	14	True				
ANR	694898	Statement	*	50:4:1984:1984	694840	15	True				
ANR	694899	Statement	(	50:5:1985:1985	694840	16	True				
ANR	694900	Statement	p	50:6:1986:1986	694840	17	True				
ANR	694901	Statement	+	50:7:1987:1987	694840	18	True				
ANR	694902	Statement	1	50:8:1988:1988	694840	19	True				
ANR	694903	Statement	)	50:9:1989:1989	694840	20	True				
ANR	694904	Statement	==	50:11:1991:1992	694840	21	True				
ANR	694905	Statement	0x00	50:14:1994:1997	694840	22	True				
ANR	694906	Statement	&&	50:19:1999:2000	694840	23	True				
ANR	694907	Statement	(	50:22:2002:2002	694840	24	True				
ANR	694908	Statement	p	50:23:2003:2003	694840	25	True				
ANR	694909	Statement	+	50:24:2004:2004	694840	26	True				
ANR	694910	Statement	2	50:25:2005:2005	694840	27	True				
ANR	694911	Statement	)	50:26:2006:2006	694840	28	True				
ANR	694912	Statement	==	50:28:2008:2009	694840	29	True				
ANR	694913	Statement	0x00	50:31:2011:2014	694840	30	True				
ANR	694914	Statement	&&	50:36:2016:2017	694840	31	True				
ANR	694915	Statement	*	50:39:2019:2019	694840	32	True				
ANR	694916	Statement	(	50:40:2020:2020	694840	33	True				
ANR	694917	Statement	p	50:41:2021:2021	694840	34	True				
ANR	694918	Statement	+	50:42:2022:2022	694840	35	True				
ANR	694919	Statement	3	50:43:2023:2023	694840	36	True				
ANR	694920	Statement	)	50:44:2024:2024	694840	37	True				
ANR	694921	Statement	==	50:46:2026:2027	694840	38	True				
ANR	694922	Statement	0x00	50:49:2029:2032	694840	39	True				
ANR	694923	Statement	)	50:53:2033:2033	694840	40	True				
ANR	694924	ReturnStatement	return 1 ;	51:6:2041:2049	694840	41	True				
ANR	694925	PrimaryExpression	1		694840	0					
ANR	694926	IfStatement	if ( * ( p + 1 ) == 0x20 && ( * p == 0x29 || * p == 0x28 ) && * ( p + 2 ) == 0x00 && * ( p + 3 ) == 0x00 )		694840	42					
ANR	694927	Condition	* ( p + 1 ) == 0x20 && ( * p == 0x29 || * p == 0x28 ) && * ( p + 2 ) == 0x00 && * ( p + 3 ) == 0x00	52:8:2059:2139	694840	0	True				
ANR	694928	AndExpression	* ( p + 1 ) == 0x20 && ( * p == 0x29 || * p == 0x28 ) && * ( p + 2 ) == 0x00 && * ( p + 3 ) == 0x00		694840	0		&&			
ANR	694929	EqualityExpression	* ( p + 1 ) == 0x20		694840	0		==			
ANR	694930	UnaryOperationExpression	* ( p + 1 )		694840	0					
ANR	694931	UnaryOperator	*		694840	0					
ANR	694932	AdditiveExpression	p + 1		694840	1		+			
ANR	694933	Identifier	p		694840	0					
ANR	694934	PrimaryExpression	1		694840	1					
ANR	694935	PrimaryExpression	0x20		694840	1					
ANR	694936	AndExpression	( * p == 0x29 || * p == 0x28 ) && * ( p + 2 ) == 0x00 && * ( p + 3 ) == 0x00		694840	1		&&			
ANR	694937	OrExpression	* p == 0x29 || * p == 0x28		694840	0		||			
ANR	694938	EqualityExpression	* p == 0x29		694840	0		==			
ANR	694939	UnaryOperationExpression	* p		694840	0					
ANR	694940	UnaryOperator	*		694840	0					
ANR	694941	Identifier	p		694840	1					
ANR	694942	PrimaryExpression	0x29		694840	1					
ANR	694943	EqualityExpression	* p == 0x28		694840	1		==			
ANR	694944	UnaryOperationExpression	* p		694840	0					
ANR	694945	UnaryOperator	*		694840	0					
ANR	694946	Identifier	p		694840	1					
ANR	694947	PrimaryExpression	0x28		694840	1					
ANR	694948	AndExpression	* ( p + 2 ) == 0x00 && * ( p + 3 ) == 0x00		694840	1		&&			
ANR	694949	EqualityExpression	* ( p + 2 ) == 0x00		694840	0		==			
ANR	694950	UnaryOperationExpression	* ( p + 2 )		694840	0					
ANR	694951	UnaryOperator	*		694840	0					
ANR	694952	AdditiveExpression	p + 2		694840	1		+			
ANR	694953	Identifier	p		694840	0					
ANR	694954	PrimaryExpression	2		694840	1					
ANR	694955	PrimaryExpression	0x00		694840	1					
ANR	694956	EqualityExpression	* ( p + 3 ) == 0x00		694840	1		==			
ANR	694957	UnaryOperationExpression	* ( p + 3 )		694840	0					
ANR	694958	UnaryOperator	*		694840	0					
ANR	694959	AdditiveExpression	p + 3		694840	1		+			
ANR	694960	Identifier	p		694840	0					
ANR	694961	PrimaryExpression	3		694840	1					
ANR	694962	PrimaryExpression	0x00		694840	1					
ANR	694963	ReturnStatement	return 1 ;	54:6:2148:2156	694840	1	True				
ANR	694964	PrimaryExpression	1		694840	0					
ANR	694965	ReturnStatement	return 0 ;	57:2:2171:2179	694840	1	True				
ANR	694966	PrimaryExpression	0		694840	0					
ANR	694967	ReturnType	static int		694840	1					
ANR	694968	Identifier	utf32le_is_mbc_newline		694840	2					
ANR	694969	ParameterList	"const UChar * p , const UChar * end"		694840	3					
ANR	694970	Parameter	const UChar * p	39:23:1719:1732	694840	0	True				
ANR	694971	ParameterType	const UChar *		694840	0					
ANR	694972	Identifier	p		694840	1					
ANR	694973	Parameter	const UChar * end	39:39:1735:1750	694840	1	True				
ANR	694974	ParameterType	const UChar *		694840	0					
ANR	694975	Identifier	end		694840	1					
ANR	694976	CFGEntryNode	ENTRY		694840		True				
ANR	694977	CFGExitNode	EXIT		694840		True				
ANR	694978	Symbol	p		694840						
ANR	694979	Symbol	* ( p + 2 )		694840						
ANR	694980	Symbol	* ( p + 3 )		694840						
ANR	694981	Symbol	end		694840						
ANR	694982	Symbol	* p		694840						
ANR	694983	Symbol	* ( p + 1 )		694840						
ANR	694984	Function	utf32le_code_to_mbclen	66:0:2351:2430							
ANR	694985	FunctionDef	utf32le_code_to_mbclen (OnigCodePoint code ARG_UNUSED)		694984	0					
ANR	694986	CompoundStatement		68:0:2416:2430	694984	0					
ANR	694987	ReturnStatement	return 4 ;	69:2:2420:2428	694984	0	True				
ANR	694988	PrimaryExpression	4		694984	0					
ANR	694989	ReturnType	static int		694984	1					
ANR	694990	Identifier	utf32le_code_to_mbclen		694984	2					
ANR	694991	ParameterList	OnigCodePoint code ARG_UNUSED		694984	3					
ANR	694992	Parameter	OnigCodePoint code ARG_UNUSED	67:23:2385:2413	694984	0	True				
ANR	694993	ParameterType	OnigCodePoint code		694984	0					
ANR	694994	Identifier	ARG_UNUSED		694984	1					
ANR	694995	CFGEntryNode	ENTRY		694984		True				
ANR	694996	CFGExitNode	EXIT		694984		True				
ANR	694997	Symbol	ARG_UNUSED		694984						
ANR	694998	Function	utf32le_code_to_mbc	72:0:2433:2697							
ANR	694999	FunctionDef	"utf32le_code_to_mbc (OnigCodePoint code , UChar * buf)"		694998	0					
ANR	695000	CompoundStatement		74:0:2496:2697	694998	0					
ANR	695001	IdentifierDeclStatement	UChar * p = buf ;	75:2:2500:2514	694998	0	True				
ANR	695002	IdentifierDecl	* p = buf		694998	0					
ANR	695003	IdentifierDeclType	UChar *		694998	0					
ANR	695004	Identifier	p		694998	1					
ANR	695005	AssignmentExpression	* p = buf		694998	2		=			
ANR	695006	Identifier	buf		694998	0					
ANR	695007	Identifier	buf		694998	1					
ANR	695008	ExpressionStatement	* p ++ = ( UChar ) ( code & 0xff )	77:2:2519:2548	694998	1	True				
ANR	695009	AssignmentExpression	* p ++ = ( UChar ) ( code & 0xff )		694998	0		=			
ANR	695010	UnaryOperationExpression	* p ++		694998	0					
ANR	695011	UnaryOperator	*		694998	0					
ANR	695012	PostIncDecOperationExpression	p ++		694998	1					
ANR	695013	Identifier	p		694998	0					
ANR	695014	IncDec	++		694998	1					
ANR	695015	CastExpression	( UChar ) ( code & 0xff )		694998	1					
ANR	695016	CastTarget	UChar		694998	0					
ANR	695017	BitAndExpression	code & 0xff		694998	1		&			
ANR	695018	Identifier	code		694998	0					
ANR	695019	PrimaryExpression	0xff		694998	1					
ANR	695020	ExpressionStatement	* p ++ = ( UChar ) ( ( code & 0xff00 ) >> 8 )	78:2:2552:2593	694998	2	True				
ANR	695021	AssignmentExpression	* p ++ = ( UChar ) ( ( code & 0xff00 ) >> 8 )		694998	0		=			
ANR	695022	UnaryOperationExpression	* p ++		694998	0					
ANR	695023	UnaryOperator	*		694998	0					
ANR	695024	PostIncDecOperationExpression	p ++		694998	1					
ANR	695025	Identifier	p		694998	0					
ANR	695026	IncDec	++		694998	1					
ANR	695027	CastExpression	( UChar ) ( ( code & 0xff00 ) >> 8 )		694998	1					
ANR	695028	CastTarget	UChar		694998	0					
ANR	695029	ShiftExpression	( code & 0xff00 ) >> 8		694998	1		>>			
ANR	695030	BitAndExpression	code & 0xff00		694998	0		&			
ANR	695031	Identifier	code		694998	0					
ANR	695032	PrimaryExpression	0xff00		694998	1					
ANR	695033	PrimaryExpression	8		694998	1					
ANR	695034	ExpressionStatement	* p ++ = ( UChar ) ( ( code & 0xff0000 ) >> 16 )	79:2:2597:2638	694998	3	True				
ANR	695035	AssignmentExpression	* p ++ = ( UChar ) ( ( code & 0xff0000 ) >> 16 )		694998	0		=			
ANR	695036	UnaryOperationExpression	* p ++		694998	0					
ANR	695037	UnaryOperator	*		694998	0					
ANR	695038	PostIncDecOperationExpression	p ++		694998	1					
ANR	695039	Identifier	p		694998	0					
ANR	695040	IncDec	++		694998	1					
ANR	695041	CastExpression	( UChar ) ( ( code & 0xff0000 ) >> 16 )		694998	1					
ANR	695042	CastTarget	UChar		694998	0					
ANR	695043	ShiftExpression	( code & 0xff0000 ) >> 16		694998	1		>>			
ANR	695044	BitAndExpression	code & 0xff0000		694998	0		&			
ANR	695045	Identifier	code		694998	0					
ANR	695046	PrimaryExpression	0xff0000		694998	1					
ANR	695047	PrimaryExpression	16		694998	1					
ANR	695048	ExpressionStatement	* p ++ = ( UChar ) ( ( code & 0xff000000 ) >> 24 )	80:2:2642:2683	694998	4	True				
ANR	695049	AssignmentExpression	* p ++ = ( UChar ) ( ( code & 0xff000000 ) >> 24 )		694998	0		=			
ANR	695050	UnaryOperationExpression	* p ++		694998	0					
ANR	695051	UnaryOperator	*		694998	0					
ANR	695052	PostIncDecOperationExpression	p ++		694998	1					
ANR	695053	Identifier	p		694998	0					
ANR	695054	IncDec	++		694998	1					
ANR	695055	CastExpression	( UChar ) ( ( code & 0xff000000 ) >> 24 )		694998	1					
ANR	695056	CastTarget	UChar		694998	0					
ANR	695057	ShiftExpression	( code & 0xff000000 ) >> 24		694998	1		>>			
ANR	695058	BitAndExpression	code & 0xff000000		694998	0		&			
ANR	695059	Identifier	code		694998	0					
ANR	695060	PrimaryExpression	0xff000000		694998	1					
ANR	695061	PrimaryExpression	24		694998	1					
ANR	695062	ReturnStatement	return 4 ;	81:2:2687:2695	694998	5	True				
ANR	695063	PrimaryExpression	4		694998	0					
ANR	695064	ReturnType	static int		694998	1					
ANR	695065	Identifier	utf32le_code_to_mbc		694998	2					
ANR	695066	ParameterList	"OnigCodePoint code , UChar * buf"		694998	3					
ANR	695067	Parameter	OnigCodePoint code	73:20:2464:2481	694998	0	True				
ANR	695068	ParameterType	OnigCodePoint		694998	0					
ANR	695069	Identifier	code		694998	1					
ANR	695070	Parameter	UChar * buf	73:40:2484:2493	694998	1	True				
ANR	695071	ParameterType	UChar *		694998	0					
ANR	695072	Identifier	buf		694998	1					
ANR	695073	CFGEntryNode	ENTRY		694998		True				
ANR	695074	CFGExitNode	EXIT		694998		True				
ANR	695075	Symbol	p		694998						
ANR	695076	Symbol	buf		694998						
ANR	695077	Symbol	code		694998						
ANR	695078	Symbol	* p ++		694998						
ANR	695079	Function	utf32le_mbc_case_fold	84:0:2700:3406							
ANR	695080	FunctionDef	"utf32le_mbc_case_fold (OnigCaseFoldType flag , const UChar * * pp , const UChar * end , UChar * fold)"		695079	0					
ANR	695081	CompoundStatement		87:0:2813:3406	695079	0					
ANR	695082	IdentifierDeclStatement	const UChar * p = * pp ;	88:2:2817:2837	695079	0	True				
ANR	695083	IdentifierDecl	* p = * pp		695079	0					
ANR	695084	IdentifierDeclType	const UChar *		695079	0					
ANR	695085	Identifier	p		695079	1					
ANR	695086	AssignmentExpression	* p = * pp		695079	2		=			
ANR	695087	Identifier	p		695079	0					
ANR	695088	UnaryOperationExpression	* pp		695079	1					
ANR	695089	UnaryOperator	*		695079	0					
ANR	695090	Identifier	pp		695079	1					
ANR	695091	IfStatement	if ( ONIGENC_IS_ASCII_CODE ( * p ) && * ( p + 1 ) == 0 && * ( p + 2 ) == 0 && * ( p + 3 ) == 0 )		695079	1					
ANR	695092	Condition	ONIGENC_IS_ASCII_CODE ( * p ) && * ( p + 1 ) == 0 && * ( p + 2 ) == 0 && * ( p + 3 ) == 0	90:6:2846:2915	695079	0	True				
ANR	695093	AndExpression	ONIGENC_IS_ASCII_CODE ( * p ) && * ( p + 1 ) == 0 && * ( p + 2 ) == 0 && * ( p + 3 ) == 0		695079	0		&&			
ANR	695094	CallExpression	ONIGENC_IS_ASCII_CODE ( * p )		695079	0					
ANR	695095	Callee	ONIGENC_IS_ASCII_CODE		695079	0					
ANR	695096	Identifier	ONIGENC_IS_ASCII_CODE		695079	0					
ANR	695097	ArgumentList	* p		695079	1					
ANR	695098	Argument	* p		695079	0					
ANR	695099	UnaryOperationExpression	* p		695079	0					
ANR	695100	UnaryOperator	*		695079	0					
ANR	695101	Identifier	p		695079	1					
ANR	695102	AndExpression	* ( p + 1 ) == 0 && * ( p + 2 ) == 0 && * ( p + 3 ) == 0		695079	1		&&			
ANR	695103	EqualityExpression	* ( p + 1 ) == 0		695079	0		==			
ANR	695104	UnaryOperationExpression	* ( p + 1 )		695079	0					
ANR	695105	UnaryOperator	*		695079	0					
ANR	695106	AdditiveExpression	p + 1		695079	1		+			
ANR	695107	Identifier	p		695079	0					
ANR	695108	PrimaryExpression	1		695079	1					
ANR	695109	PrimaryExpression	0		695079	1					
ANR	695110	AndExpression	* ( p + 2 ) == 0 && * ( p + 3 ) == 0		695079	1		&&			
ANR	695111	EqualityExpression	* ( p + 2 ) == 0		695079	0		==			
ANR	695112	UnaryOperationExpression	* ( p + 2 )		695079	0					
ANR	695113	UnaryOperator	*		695079	0					
ANR	695114	AdditiveExpression	p + 2		695079	1		+			
ANR	695115	Identifier	p		695079	0					
ANR	695116	PrimaryExpression	2		695079	1					
ANR	695117	PrimaryExpression	0		695079	1					
ANR	695118	EqualityExpression	* ( p + 3 ) == 0		695079	1		==			
ANR	695119	UnaryOperationExpression	* ( p + 3 )		695079	0					
ANR	695120	UnaryOperator	*		695079	0					
ANR	695121	AdditiveExpression	p + 3		695079	1		+			
ANR	695122	Identifier	p		695079	0					
ANR	695123	PrimaryExpression	3		695079	1					
ANR	695124	PrimaryExpression	0		695079	1					
ANR	695125	CompoundStatement		4:78:104:104	695079	1					
ANR	695126	IfStatement	if ( ( flag & ONIGENC_CASE_FOLD_TURKISH_AZERI ) != 0 )		695079	0					
ANR	695127	Condition	( flag & ONIGENC_CASE_FOLD_TURKISH_AZERI ) != 0	92:8:2971:3015	695079	0	True				
ANR	695128	EqualityExpression	( flag & ONIGENC_CASE_FOLD_TURKISH_AZERI ) != 0		695079	0		!=			
ANR	695129	BitAndExpression	flag & ONIGENC_CASE_FOLD_TURKISH_AZERI		695079	0		&			
ANR	695130	Identifier	flag		695079	0					
ANR	695131	Identifier	ONIGENC_CASE_FOLD_TURKISH_AZERI		695079	1					
ANR	695132	PrimaryExpression	0		695079	1					
ANR	695133	CompoundStatement		6:55:204:204	695079	1					
ANR	695134	IfStatement	if ( * p == 0x49 )		695079	0					
ANR	695135	Condition	* p == 0x49	93:10:3030:3039	695079	0	True				
ANR	695136	EqualityExpression	* p == 0x49		695079	0		==			
ANR	695137	UnaryOperationExpression	* p		695079	0					
ANR	695138	UnaryOperator	*		695079	0					
ANR	695139	Identifier	p		695079	1					
ANR	695140	PrimaryExpression	0x49		695079	1					
ANR	695141	CompoundStatement		7:22:228:228	695079	1					
ANR	695142	ExpressionStatement	* fold ++ = 0x31	94:1:3045:3059	695079	0	True				
ANR	695143	AssignmentExpression	* fold ++ = 0x31		695079	0		=			
ANR	695144	UnaryOperationExpression	* fold ++		695079	0					
ANR	695145	UnaryOperator	*		695079	0					
ANR	695146	PostIncDecOperationExpression	fold ++		695079	1					
ANR	695147	Identifier	fold		695079	0					
ANR	695148	IncDec	++		695079	1					
ANR	695149	PrimaryExpression	0x31		695079	1					
ANR	695150	ExpressionStatement	* fold ++ = 0x01	95:1:3062:3076	695079	1	True				
ANR	695151	AssignmentExpression	* fold ++ = 0x01		695079	0		=			
ANR	695152	UnaryOperationExpression	* fold ++		695079	0					
ANR	695153	UnaryOperator	*		695079	0					
ANR	695154	PostIncDecOperationExpression	fold ++		695079	1					
ANR	695155	Identifier	fold		695079	0					
ANR	695156	IncDec	++		695079	1					
ANR	695157	PrimaryExpression	0x01		695079	1					
ANR	695158	ElseStatement	else		695079	0					
ANR	695159	CompoundStatement		12:9:287:287	695079	0					
ANR	695160	ExpressionStatement	* fold ++ = ONIGENC_ASCII_CODE_TO_LOWER_CASE ( * p )	100:6:3116:3162	695079	0	True				
ANR	695161	AssignmentExpression	* fold ++ = ONIGENC_ASCII_CODE_TO_LOWER_CASE ( * p )		695079	0		=			
ANR	695162	UnaryOperationExpression	* fold ++		695079	0					
ANR	695163	UnaryOperator	*		695079	0					
ANR	695164	PostIncDecOperationExpression	fold ++		695079	1					
ANR	695165	Identifier	fold		695079	0					
ANR	695166	IncDec	++		695079	1					
ANR	695167	CallExpression	ONIGENC_ASCII_CODE_TO_LOWER_CASE ( * p )		695079	1					
ANR	695168	Callee	ONIGENC_ASCII_CODE_TO_LOWER_CASE		695079	0					
ANR	695169	Identifier	ONIGENC_ASCII_CODE_TO_LOWER_CASE		695079	0					
ANR	695170	ArgumentList	* p		695079	1					
ANR	695171	Argument	* p		695079	0					
ANR	695172	UnaryOperationExpression	* p		695079	0					
ANR	695173	UnaryOperator	*		695079	0					
ANR	695174	Identifier	p		695079	1					
ANR	695175	ExpressionStatement	* fold ++ = 0	101:6:3170:3181	695079	1	True				
ANR	695176	AssignmentExpression	* fold ++ = 0		695079	0		=			
ANR	695177	UnaryOperationExpression	* fold ++		695079	0					
ANR	695178	UnaryOperator	*		695079	0					
ANR	695179	PostIncDecOperationExpression	fold ++		695079	1					
ANR	695180	Identifier	fold		695079	0					
ANR	695181	IncDec	++		695079	1					
ANR	695182	PrimaryExpression	0		695079	1					
ANR	695183	ExpressionStatement	* fold ++ = 0	106:4:3244:3255	695079	1	True				
ANR	695184	AssignmentExpression	* fold ++ = 0		695079	0		=			
ANR	695185	UnaryOperationExpression	* fold ++		695079	0					
ANR	695186	UnaryOperator	*		695079	0					
ANR	695187	PostIncDecOperationExpression	fold ++		695079	1					
ANR	695188	Identifier	fold		695079	0					
ANR	695189	IncDec	++		695079	1					
ANR	695190	PrimaryExpression	0		695079	1					
ANR	695191	ExpressionStatement	* fold = 0	107:4:3261:3272	695079	2	True				
ANR	695192	AssignmentExpression	* fold = 0		695079	0		=			
ANR	695193	UnaryOperationExpression	* fold		695079	0					
ANR	695194	UnaryOperator	*		695079	0					
ANR	695195	Identifier	fold		695079	1					
ANR	695196	PrimaryExpression	0		695079	1					
ANR	695197	ExpressionStatement	* pp += 4	108:4:3278:3286	695079	3	True				
ANR	695198	AssignmentExpression	* pp += 4		695079	0		+=			
ANR	695199	UnaryOperationExpression	* pp		695079	0					
ANR	695200	UnaryOperator	*		695079	0					
ANR	695201	Identifier	pp		695079	1					
ANR	695202	PrimaryExpression	4		695079	1					
ANR	695203	ReturnStatement	return 4 ;	109:4:3292:3300	695079	4	True				
ANR	695204	PrimaryExpression	4		695079	0					
ANR	695205	ElseStatement	else		695079	0					
ANR	695206	ReturnStatement	"return onigenc_unicode_mbc_case_fold ( ONIG_ENCODING_UTF32_LE , flag , pp , end , fold ) ;"	112:4:3317:3404	695079	0	True				
ANR	695207	CallExpression	"onigenc_unicode_mbc_case_fold ( ONIG_ENCODING_UTF32_LE , flag , pp , end , fold )"		695079	0					
ANR	695208	Callee	onigenc_unicode_mbc_case_fold		695079	0					
ANR	695209	Identifier	onigenc_unicode_mbc_case_fold		695079	0					
ANR	695210	ArgumentList	ONIG_ENCODING_UTF32_LE		695079	1					
ANR	695211	Argument	ONIG_ENCODING_UTF32_LE		695079	0					
ANR	695212	Identifier	ONIG_ENCODING_UTF32_LE		695079	0					
ANR	695213	Argument	flag		695079	1					
ANR	695214	Identifier	flag		695079	0					
ANR	695215	Argument	pp		695079	2					
ANR	695216	Identifier	pp		695079	0					
ANR	695217	Argument	end		695079	3					
ANR	695218	Identifier	end		695079	0					
ANR	695219	Argument	fold		695079	4					
ANR	695220	Identifier	fold		695079	0					
ANR	695221	ReturnType	static int		695079	1					
ANR	695222	Identifier	utf32le_mbc_case_fold		695079	2					
ANR	695223	ParameterList	"OnigCaseFoldType flag , const UChar * * pp , const UChar * end , UChar * fold"		695079	3					
ANR	695224	Parameter	OnigCaseFoldType flag	85:22:2733:2753	695079	0	True				
ANR	695225	ParameterType	OnigCaseFoldType		695079	0					
ANR	695226	Identifier	flag		695079	1					
ANR	695227	Parameter	const UChar * * pp	86:8:2764:2779	695079	1	True				
ANR	695228	ParameterType	const UChar * *		695079	0					
ANR	695229	Identifier	pp		695079	1					
ANR	695230	Parameter	const UChar * end	86:26:2782:2797	695079	2	True				
ANR	695231	ParameterType	const UChar *		695079	0					
ANR	695232	Identifier	end		695079	1					
ANR	695233	Parameter	UChar * fold	86:44:2800:2810	695079	3	True				
ANR	695234	ParameterType	UChar *		695079	0					
ANR	695235	Identifier	fold		695079	1					
ANR	695236	CFGEntryNode	ENTRY		695079		True				
ANR	695237	CFGExitNode	EXIT		695079		True				
ANR	695238	Symbol	pp		695079						
ANR	695239	Symbol	ONIGENC_IS_ASCII_CODE		695079						
ANR	695240	Symbol	flag		695079						
ANR	695241	Symbol	* ( p + 2 )		695079						
ANR	695242	Symbol	* pp		695079						
ANR	695243	Symbol	* ( p + 3 )		695079						
ANR	695244	Symbol	* fold		695079						
ANR	695245	Symbol	* ( p + 1 )		695079						
ANR	695246	Symbol	* fold ++		695079						
ANR	695247	Symbol	ONIG_ENCODING_UTF32_LE		695079						
ANR	695248	Symbol	p		695079						
ANR	695249	Symbol	fold		695079						
ANR	695250	Symbol	ONIGENC_ASCII_CODE_TO_LOWER_CASE		695079						
ANR	695251	Symbol	ONIGENC_CASE_FOLD_TURKISH_AZERI		695079						
ANR	695252	Symbol	end		695079						
ANR	695253	Symbol	* p		695079						
ANR	695254	Symbol	onigenc_unicode_mbc_case_fold		695079						
ANR	695255	Function	utf32le_is_mbc_ambiguous	117:0:3415:4091							
ANR	695256	FunctionDef	"utf32le_is_mbc_ambiguous (OnigCaseFoldType flag , const UChar * * pp , const UChar * end)"		695255	0					
ANR	695257	CompoundStatement		119:0:3510:4091	695255	0					
ANR	695258	IdentifierDeclStatement	const UChar * p = * pp ;	120:2:3514:3534	695255	0	True				
ANR	695259	IdentifierDecl	* p = * pp		695255	0					
ANR	695260	IdentifierDeclType	const UChar *		695255	0					
ANR	695261	Identifier	p		695255	1					
ANR	695262	AssignmentExpression	* p = * pp		695255	2		=			
ANR	695263	Identifier	p		695255	0					
ANR	695264	UnaryOperationExpression	* pp		695255	1					
ANR	695265	UnaryOperator	*		695255	0					
ANR	695266	Identifier	pp		695255	1					
ANR	695267	ExpressionStatement	( * pp ) += 4	122:2:3539:3549	695255	1	True				
ANR	695268	AssignmentExpression	( * pp ) += 4		695255	0		+=			
ANR	695269	UnaryOperationExpression	* pp		695255	0					
ANR	695270	UnaryOperator	*		695255	0					
ANR	695271	Identifier	pp		695255	1					
ANR	695272	PrimaryExpression	4		695255	1					
ANR	695273	IfStatement	if ( * ( p + 1 ) == 0 && * ( p + 2 ) == 0 && * ( p + 3 ) == 0 )		695255	2					
ANR	695274	Condition	* ( p + 1 ) == 0 && * ( p + 2 ) == 0 && * ( p + 3 ) == 0	124:6:3558:3598	695255	0	True				
ANR	695275	AndExpression	* ( p + 1 ) == 0 && * ( p + 2 ) == 0 && * ( p + 3 ) == 0		695255	0		&&			
ANR	695276	EqualityExpression	* ( p + 1 ) == 0		695255	0		==			
ANR	695277	UnaryOperationExpression	* ( p + 1 )		695255	0					
ANR	695278	UnaryOperator	*		695255	0					
ANR	695279	AdditiveExpression	p + 1		695255	1		+			
ANR	695280	Identifier	p		695255	0					
ANR	695281	PrimaryExpression	1		695255	1					
ANR	695282	PrimaryExpression	0		695255	1					
ANR	695283	AndExpression	* ( p + 2 ) == 0 && * ( p + 3 ) == 0		695255	1		&&			
ANR	695284	EqualityExpression	* ( p + 2 ) == 0		695255	0		==			
ANR	695285	UnaryOperationExpression	* ( p + 2 )		695255	0					
ANR	695286	UnaryOperator	*		695255	0					
ANR	695287	AdditiveExpression	p + 2		695255	1		+			
ANR	695288	Identifier	p		695255	0					
ANR	695289	PrimaryExpression	2		695255	1					
ANR	695290	PrimaryExpression	0		695255	1					
ANR	695291	EqualityExpression	* ( p + 3 ) == 0		695255	1		==			
ANR	695292	UnaryOperationExpression	* ( p + 3 )		695255	0					
ANR	695293	UnaryOperator	*		695255	0					
ANR	695294	AdditiveExpression	p + 3		695255	1		+			
ANR	695295	Identifier	p		695255	0					
ANR	695296	PrimaryExpression	3		695255	1					
ANR	695297	PrimaryExpression	0		695255	1					
ANR	695298	CompoundStatement		7:4:96:104	695255	1					
ANR	695299	IdentifierDeclStatement	"int c , v ;"	125:4:3607:3615	695255	0	True				
ANR	695300	IdentifierDecl	c		695255	0					
ANR	695301	IdentifierDeclType	int		695255	0					
ANR	695302	Identifier	c		695255	1					
ANR	695303	IdentifierDecl	v		695255	1					
ANR	695304	IdentifierDeclType	int		695255	0					
ANR	695305	Identifier	v		695255	1					
ANR	695306	IfStatement	if ( * p == 0xdf && ( flag & INTERNAL_ONIGENC_CASE_FOLD_MULTI_CHAR ) != 0 )		695255	1					
ANR	695307	Condition	* p == 0xdf && ( flag & INTERNAL_ONIGENC_CASE_FOLD_MULTI_CHAR ) != 0	127:8:3626:3690	695255	0	True				
ANR	695308	AndExpression	* p == 0xdf && ( flag & INTERNAL_ONIGENC_CASE_FOLD_MULTI_CHAR ) != 0		695255	0		&&			
ANR	695309	EqualityExpression	* p == 0xdf		695255	0		==			
ANR	695310	UnaryOperationExpression	* p		695255	0					
ANR	695311	UnaryOperator	*		695255	0					
ANR	695312	Identifier	p		695255	1					
ANR	695313	PrimaryExpression	0xdf		695255	1					
ANR	695314	EqualityExpression	( flag & INTERNAL_ONIGENC_CASE_FOLD_MULTI_CHAR ) != 0		695255	1		!=			
ANR	695315	BitAndExpression	flag & INTERNAL_ONIGENC_CASE_FOLD_MULTI_CHAR		695255	0		&			
ANR	695316	Identifier	flag		695255	0					
ANR	695317	Identifier	INTERNAL_ONIGENC_CASE_FOLD_MULTI_CHAR		695255	1					
ANR	695318	PrimaryExpression	0		695255	1					
ANR	695319	CompoundStatement		9:75:182:182	695255	1					
ANR	695320	ReturnStatement	return TRUE ;	128:6:3701:3712	695255	0	True				
ANR	695321	Identifier	TRUE		695255	0					
ANR	695322	ExpressionStatement	c = * p	131:4:3725:3731	695255	2	True				
ANR	695323	AssignmentExpression	c = * p		695255	0		=			
ANR	695324	Identifier	c		695255	0					
ANR	695325	UnaryOperationExpression	* p		695255	1					
ANR	695326	UnaryOperator	*		695255	0					
ANR	695327	Identifier	p		695255	1					
ANR	695328	ExpressionStatement	"v = ONIGENC_IS_UNICODE_ISO_8859_1_BIT_CTYPE ( c , ( BIT_CTYPE_UPPER | BIT_CTYPE_LOWER ) )"	132:4:3737:3843	695255	3	True				
ANR	695329	AssignmentExpression	"v = ONIGENC_IS_UNICODE_ISO_8859_1_BIT_CTYPE ( c , ( BIT_CTYPE_UPPER | BIT_CTYPE_LOWER ) )"		695255	0		=			
ANR	695330	Identifier	v		695255	0					
ANR	695331	CallExpression	"ONIGENC_IS_UNICODE_ISO_8859_1_BIT_CTYPE ( c , ( BIT_CTYPE_UPPER | BIT_CTYPE_LOWER ) )"		695255	1					
ANR	695332	Callee	ONIGENC_IS_UNICODE_ISO_8859_1_BIT_CTYPE		695255	0					
ANR	695333	Identifier	ONIGENC_IS_UNICODE_ISO_8859_1_BIT_CTYPE		695255	0					
ANR	695334	ArgumentList	c		695255	1					
ANR	695335	Argument	c		695255	0					
ANR	695336	Identifier	c		695255	0					
ANR	695337	Argument	BIT_CTYPE_UPPER | BIT_CTYPE_LOWER		695255	1					
ANR	695338	InclusiveOrExpression	BIT_CTYPE_UPPER | BIT_CTYPE_LOWER		695255	0		|			
ANR	695339	Identifier	BIT_CTYPE_UPPER		695255	0					
ANR	695340	Identifier	BIT_CTYPE_LOWER		695255	1					
ANR	695341	IfStatement	if ( ( v | BIT_CTYPE_LOWER ) != 0 )		695255	4					
ANR	695342	Condition	( v | BIT_CTYPE_LOWER ) != 0	134:8:3853:3878	695255	0	True				
ANR	695343	EqualityExpression	( v | BIT_CTYPE_LOWER ) != 0		695255	0		!=			
ANR	695344	InclusiveOrExpression	v | BIT_CTYPE_LOWER		695255	0		|			
ANR	695345	Identifier	v		695255	0					
ANR	695346	Identifier	BIT_CTYPE_LOWER		695255	1					
ANR	695347	PrimaryExpression	0		695255	1					
ANR	695348	CompoundStatement		16:36:370:370	695255	1					
ANR	695349	IfStatement	if ( c >= 0xaa && c <= 0xba )		695255	0					
ANR	695350	Condition	c >= 0xaa && c <= 0xba	136:10:3964:3985	695255	0	True				
ANR	695351	AndExpression	c >= 0xaa && c <= 0xba		695255	0		&&			
ANR	695352	RelationalExpression	c >= 0xaa		695255	0		>=			
ANR	695353	Identifier	c		695255	0					
ANR	695354	PrimaryExpression	0xaa		695255	1					
ANR	695355	RelationalExpression	c <= 0xba		695255	1		<=			
ANR	695356	Identifier	c		695255	0					
ANR	695357	PrimaryExpression	0xba		695255	1					
ANR	695358	ReturnStatement	return FALSE ;	137:1:3989:4001	695255	1	True				
ANR	695359	Identifier	FALSE		695255	0					
ANR	695360	ElseStatement	else		695255	0					
ANR	695361	ReturnStatement	return TRUE ;	139:1:4015:4026	695255	0	True				
ANR	695362	Identifier	TRUE		695255	0					
ANR	695363	ReturnStatement	return ( v != 0 ? TRUE : FALSE ) ;	141:4:4038:4068	695255	5	True				
ANR	695364	ConditionalExpression	v != 0 ? TRUE : FALSE		695255	0					
ANR	695365	Condition	v != 0		695255	0					
ANR	695366	EqualityExpression	v != 0		695255	0		!=			
ANR	695367	Identifier	v		695255	0					
ANR	695368	PrimaryExpression	0		695255	1					
ANR	695369	Identifier	TRUE		695255	1					
ANR	695370	Identifier	FALSE		695255	2					
ANR	695371	ReturnStatement	return FALSE ;	144:2:4077:4089	695255	3	True				
ANR	695372	Identifier	FALSE		695255	0					
ANR	695373	ReturnType	static int		695255	1					
ANR	695374	Identifier	utf32le_is_mbc_ambiguous		695255	2					
ANR	695375	ParameterList	"OnigCaseFoldType flag , const UChar * * pp , const UChar * end"		695255	3					
ANR	695376	Parameter	OnigCaseFoldType flag	118:25:3451:3471	695255	0	True				
ANR	695377	ParameterType	OnigCaseFoldType		695255	0					
ANR	695378	Identifier	flag		695255	1					
ANR	695379	Parameter	const UChar * * pp	118:48:3474:3489	695255	1	True				
ANR	695380	ParameterType	const UChar * *		695255	0					
ANR	695381	Identifier	pp		695255	1					
ANR	695382	Parameter	const UChar * end	118:66:3492:3507	695255	2	True				
ANR	695383	ParameterType	const UChar *		695255	0					
ANR	695384	Identifier	end		695255	1					
ANR	695385	CFGEntryNode	ENTRY		695255		True				
ANR	695386	CFGExitNode	EXIT		695255		True				
ANR	695387	Symbol	pp		695255						
ANR	695388	Symbol	flag		695255						
ANR	695389	Symbol	c		695255						
ANR	695390	Symbol	* ( p + 2 )		695255						
ANR	695391	Symbol	* pp		695255						
ANR	695392	Symbol	* ( p + 3 )		695255						
ANR	695393	Symbol	TRUE		695255						
ANR	695394	Symbol	* ( p + 1 )		695255						
ANR	695395	Symbol	p		695255						
ANR	695396	Symbol	ONIGENC_IS_UNICODE_ISO_8859_1_BIT_CTYPE		695255						
ANR	695397	Symbol	v		695255						
ANR	695398	Symbol	BIT_CTYPE_LOWER		695255						
ANR	695399	Symbol	end		695255						
ANR	695400	Symbol	* p		695255						
ANR	695401	Symbol	INTERNAL_ONIGENC_CASE_FOLD_MULTI_CHAR		695255						
ANR	695402	Symbol	BIT_CTYPE_UPPER		695255						
ANR	695403	Symbol	FALSE		695255						
ANR	695404	Function	utf32le_left_adjust_char_head	148:0:4101:4287							
ANR	695405	FunctionDef	"utf32le_left_adjust_char_head (const UChar * start , const UChar * s)"		695404	0					
ANR	695406	CompoundStatement		150:0:4181:4287	695404	0					
ANR	695407	IdentifierDeclStatement	int rem ;	151:2:4185:4192	695404	0	True				
ANR	695408	IdentifierDecl	rem		695404	0					
ANR	695409	IdentifierDeclType	int		695404	0					
ANR	695410	Identifier	rem		695404	1					
ANR	695411	IfStatement	if ( s <= start )		695404	1					
ANR	695412	Condition	s <= start	153:6:4201:4210	695404	0	True				
ANR	695413	RelationalExpression	s <= start		695404	0		<=			
ANR	695414	Identifier	s		695404	0					
ANR	695415	Identifier	start		695404	1					
ANR	695416	ReturnStatement	return ( UChar * ) s ;	153:18:4213:4230	695404	1	True				
ANR	695417	CastExpression	( UChar * ) s		695404	0					
ANR	695418	CastTarget	UChar *		695404	0					
ANR	695419	Identifier	s		695404	1					
ANR	695420	ExpressionStatement	rem = ( s - start ) % 4	155:2:4235:4256	695404	2	True				
ANR	695421	AssignmentExpression	rem = ( s - start ) % 4		695404	0		=			
ANR	695422	Identifier	rem		695404	0					
ANR	695423	MultiplicativeExpression	( s - start ) % 4		695404	1		%			
ANR	695424	AdditiveExpression	s - start		695404	0		-			
ANR	695425	Identifier	s		695404	0					
ANR	695426	Identifier	start		695404	1					
ANR	695427	PrimaryExpression	4		695404	1					
ANR	695428	ReturnStatement	return ( UChar * ) ( s - rem ) ;	156:2:4260:4285	695404	3	True				
ANR	695429	CastExpression	( UChar * ) ( s - rem )		695404	0					
ANR	695430	CastTarget	UChar *		695404	0					
ANR	695431	AdditiveExpression	s - rem		695404	1		-			
ANR	695432	Identifier	s		695404	0					
ANR	695433	Identifier	rem		695404	1					
ANR	695434	ReturnType	static UChar *		695404	1					
ANR	695435	Identifier	utf32le_left_adjust_char_head		695404	2					
ANR	695436	ParameterList	"const UChar * start , const UChar * s"		695404	3					
ANR	695437	Parameter	const UChar * start	149:30:4145:4162	695404	0	True				
ANR	695438	ParameterType	const UChar *		695404	0					
ANR	695439	Identifier	start		695404	1					
ANR	695440	Parameter	const UChar * s	149:50:4165:4178	695404	1	True				
ANR	695441	ParameterType	const UChar *		695404	0					
ANR	695442	Identifier	s		695404	1					
ANR	695443	CFGEntryNode	ENTRY		695404		True				
ANR	695444	CFGExitNode	EXIT		695404		True				
ANR	695445	Symbol	s		695404						
ANR	695446	Symbol	start		695404						
ANR	695447	Symbol	rem		695404						
ANR	695448	Function	utf32le_get_case_fold_codes_by_str	159:0:4290:4545							
ANR	695449	FunctionDef	"utf32le_get_case_fold_codes_by_str (OnigCaseFoldType flag , const OnigUChar * p , const OnigUChar * end , OnigCaseFoldCodeItem items [ ])"		695448	0					
ANR	695450	CompoundStatement		162:0:4435:4545	695448	0					
ANR	695451	ReturnStatement	"return onigenc_unicode_get_case_fold_codes_by_str ( ONIG_ENCODING_UTF32_LE , flag , p , end , items ) ;"	163:2:4439:4543	695448	0	True				
ANR	695452	CallExpression	"onigenc_unicode_get_case_fold_codes_by_str ( ONIG_ENCODING_UTF32_LE , flag , p , end , items )"		695448	0					
ANR	695453	Callee	onigenc_unicode_get_case_fold_codes_by_str		695448	0					
ANR	695454	Identifier	onigenc_unicode_get_case_fold_codes_by_str		695448	0					
ANR	695455	ArgumentList	ONIG_ENCODING_UTF32_LE		695448	1					
ANR	695456	Argument	ONIG_ENCODING_UTF32_LE		695448	0					
ANR	695457	Identifier	ONIG_ENCODING_UTF32_LE		695448	0					
ANR	695458	Argument	flag		695448	1					
ANR	695459	Identifier	flag		695448	0					
ANR	695460	Argument	p		695448	2					
ANR	695461	Identifier	p		695448	0					
ANR	695462	Argument	end		695448	3					
ANR	695463	Identifier	end		695448	0					
ANR	695464	Argument	items		695448	4					
ANR	695465	Identifier	items		695448	0					
ANR	695466	ReturnType	static int		695448	1					
ANR	695467	Identifier	utf32le_get_case_fold_codes_by_str		695448	2					
ANR	695468	ParameterList	"OnigCaseFoldType flag , const OnigUChar * p , const OnigUChar * end , OnigCaseFoldCodeItem items [ ]"		695448	3					
ANR	695469	Parameter	OnigCaseFoldType flag	160:35:4336:4356	695448	0	True				
ANR	695470	ParameterType	OnigCaseFoldType		695448	0					
ANR	695471	Identifier	flag		695448	1					
ANR	695472	Parameter	const OnigUChar * p	161:4:4363:4380	695448	1	True				
ANR	695473	ParameterType	const OnigUChar *		695448	0					
ANR	695474	Identifier	p		695448	1					
ANR	695475	Parameter	const OnigUChar * end	161:24:4383:4402	695448	2	True				
ANR	695476	ParameterType	const OnigUChar *		695448	0					
ANR	695477	Identifier	end		695448	1					
ANR	695478	Parameter	OnigCaseFoldCodeItem items [ ]	161:46:4405:4432	695448	3	True				
ANR	695479	ParameterType	OnigCaseFoldCodeItem [ ]		695448	0					
ANR	695480	Identifier	items		695448	1					
ANR	695481	CFGEntryNode	ENTRY		695448		True				
ANR	695482	CFGExitNode	EXIT		695448		True				
ANR	695483	Symbol	p		695448						
ANR	695484	Symbol	flag		695448						
ANR	695485	Symbol	onigenc_unicode_get_case_fold_codes_by_str		695448						
ANR	695486	Symbol	end		695448						
ANR	695487	Symbol	items		695448						
ANR	695488	Symbol	ONIG_ENCODING_UTF32_LE		695448						
ANR	695489	DeclStmt									
ANR	695490	Decl							OnigEncodingType	OnigEncodingType	OnigEncodingUTF32_LE
