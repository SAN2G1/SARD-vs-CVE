command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	860367	File	data/converged/CVE-2017-11142_php-src/ext_opcache_Optimizer_block_pass.c								
ANR	860368	Function	zend_get_persistent_constant	4:0:97:920							
ANR	860369	FunctionDef	"zend_get_persistent_constant (char * name , uint name_len , zval * result , int copy TSRMLS_DC ELS_DC)"		860368	0					
ANR	860370	CompoundStatement		5:0:205:920	860368	0					
ANR	860371	IdentifierDeclStatement	zend_constant * c ;	6:1:208:224	860368	0	True				
ANR	860372	IdentifierDecl	* c		860368	0					
ANR	860373	IdentifierDeclType	zend_constant *		860368	0					
ANR	860374	Identifier	c		860368	1					
ANR	860375	IdentifierDeclStatement	char * lookup_name ;	7:1:227:244	860368	1	True				
ANR	860376	IdentifierDecl	* lookup_name		860368	0					
ANR	860377	IdentifierDeclType	char *		860368	0					
ANR	860378	Identifier	lookup_name		860368	1					
ANR	860379	IdentifierDeclStatement	int retval = 1 ;	8:1:247:261	860368	2	True				
ANR	860380	IdentifierDecl	retval = 1		860368	0					
ANR	860381	IdentifierDeclType	int		860368	0					
ANR	860382	Identifier	retval		860368	1					
ANR	860383	AssignmentExpression	retval = 1		860368	2		=			
ANR	860384	Identifier	retval		860368	0					
ANR	860385	PrimaryExpression	1		860368	1					
ANR	860386	ExpressionStatement	ALLOCA_FLAG ( use_heap )	9:1:264:285	860368	3	True				
ANR	860387	CallExpression	ALLOCA_FLAG ( use_heap )		860368	0					
ANR	860388	Callee	ALLOCA_FLAG		860368	0					
ANR	860389	Identifier	ALLOCA_FLAG		860368	0					
ANR	860390	ArgumentList	use_heap		860368	1					
ANR	860391	Argument	use_heap		860368	0					
ANR	860392	Identifier	use_heap		860368	0					
ANR	860393	IfStatement	"if ( zend_hash_find ( EG ( zend_constants ) , name , name_len + 1 , ( void * * ) & c ) == FAILURE )"		860368	4					
ANR	860394	Condition	"zend_hash_find ( EG ( zend_constants ) , name , name_len + 1 , ( void * * ) & c ) == FAILURE"	11:5:293:371	860368	0	True				
ANR	860395	EqualityExpression	"zend_hash_find ( EG ( zend_constants ) , name , name_len + 1 , ( void * * ) & c ) == FAILURE"		860368	0		==			
ANR	860396	CallExpression	"zend_hash_find ( EG ( zend_constants ) , name , name_len + 1 , ( void * * ) & c )"		860368	0					
ANR	860397	Callee	zend_hash_find		860368	0					
ANR	860398	Identifier	zend_hash_find		860368	0					
ANR	860399	ArgumentList	EG ( zend_constants )		860368	1					
ANR	860400	Argument	EG ( zend_constants )		860368	0					
ANR	860401	CallExpression	EG ( zend_constants )		860368	0					
ANR	860402	Callee	EG		860368	0					
ANR	860403	Identifier	EG		860368	0					
ANR	860404	ArgumentList	zend_constants		860368	1					
ANR	860405	Argument	zend_constants		860368	0					
ANR	860406	Identifier	zend_constants		860368	0					
ANR	860407	Argument	name		860368	1					
ANR	860408	Identifier	name		860368	0					
ANR	860409	Argument	name_len + 1		860368	2					
ANR	860410	AdditiveExpression	name_len + 1		860368	0		+			
ANR	860411	Identifier	name_len		860368	0					
ANR	860412	PrimaryExpression	1		860368	1					
ANR	860413	Argument	( void * * ) & c		860368	3					
ANR	860414	CastExpression	( void * * ) & c		860368	0					
ANR	860415	CastTarget	void * *		860368	0					
ANR	860416	UnaryOperationExpression	& c		860368	1					
ANR	860417	UnaryOperator	&		860368	0					
ANR	860418	Identifier	c		860368	1					
ANR	860419	Identifier	FAILURE		860368	1					
ANR	860420	CompoundStatement		7:86:168:168	860368	1					
ANR	860421	ExpressionStatement	lookup_name = DO_ALLOCA ( name_len + 1 )	12:2:378:415	860368	0	True				
ANR	860422	AssignmentExpression	lookup_name = DO_ALLOCA ( name_len + 1 )		860368	0		=			
ANR	860423	Identifier	lookup_name		860368	0					
ANR	860424	CallExpression	DO_ALLOCA ( name_len + 1 )		860368	1					
ANR	860425	Callee	DO_ALLOCA		860368	0					
ANR	860426	Identifier	DO_ALLOCA		860368	0					
ANR	860427	ArgumentList	name_len + 1		860368	1					
ANR	860428	Argument	name_len + 1		860368	0					
ANR	860429	AdditiveExpression	name_len + 1		860368	0		+			
ANR	860430	Identifier	name_len		860368	0					
ANR	860431	PrimaryExpression	1		860368	1					
ANR	860432	ExpressionStatement	"memcpy ( lookup_name , name , name_len + 1 )"	13:2:419:458	860368	1	True				
ANR	860433	CallExpression	"memcpy ( lookup_name , name , name_len + 1 )"		860368	0					
ANR	860434	Callee	memcpy		860368	0					
ANR	860435	Identifier	memcpy		860368	0					
ANR	860436	ArgumentList	lookup_name		860368	1					
ANR	860437	Argument	lookup_name		860368	0					
ANR	860438	Identifier	lookup_name		860368	0					
ANR	860439	Argument	name		860368	1					
ANR	860440	Identifier	name		860368	0					
ANR	860441	Argument	name_len + 1		860368	2					
ANR	860442	AdditiveExpression	name_len + 1		860368	0		+			
ANR	860443	Identifier	name_len		860368	0					
ANR	860444	PrimaryExpression	1		860368	1					
ANR	860445	ExpressionStatement	"zend_str_tolower ( lookup_name , name_len )"	14:2:462:501	860368	2	True				
ANR	860446	CallExpression	"zend_str_tolower ( lookup_name , name_len )"		860368	0					
ANR	860447	Callee	zend_str_tolower		860368	0					
ANR	860448	Identifier	zend_str_tolower		860368	0					
ANR	860449	ArgumentList	lookup_name		860368	1					
ANR	860450	Argument	lookup_name		860368	0					
ANR	860451	Identifier	lookup_name		860368	0					
ANR	860452	Argument	name_len		860368	1					
ANR	860453	Identifier	name_len		860368	0					
ANR	860454	IfStatement	"if ( zend_hash_find ( EG ( zend_constants ) , lookup_name , name_len + 1 , ( void * * ) & c ) == SUCCESS )"		860368	3					
ANR	860455	Condition	"zend_hash_find ( EG ( zend_constants ) , lookup_name , name_len + 1 , ( void * * ) & c ) == SUCCESS"	16:6:510:595	860368	0	True				
ANR	860456	EqualityExpression	"zend_hash_find ( EG ( zend_constants ) , lookup_name , name_len + 1 , ( void * * ) & c ) == SUCCESS"		860368	0		==			
ANR	860457	CallExpression	"zend_hash_find ( EG ( zend_constants ) , lookup_name , name_len + 1 , ( void * * ) & c )"		860368	0					
ANR	860458	Callee	zend_hash_find		860368	0					
ANR	860459	Identifier	zend_hash_find		860368	0					
ANR	860460	ArgumentList	EG ( zend_constants )		860368	1					
ANR	860461	Argument	EG ( zend_constants )		860368	0					
ANR	860462	CallExpression	EG ( zend_constants )		860368	0					
ANR	860463	Callee	EG		860368	0					
ANR	860464	Identifier	EG		860368	0					
ANR	860465	ArgumentList	zend_constants		860368	1					
ANR	860466	Argument	zend_constants		860368	0					
ANR	860467	Identifier	zend_constants		860368	0					
ANR	860468	Argument	lookup_name		860368	1					
ANR	860469	Identifier	lookup_name		860368	0					
ANR	860470	Argument	name_len + 1		860368	2					
ANR	860471	AdditiveExpression	name_len + 1		860368	0		+			
ANR	860472	Identifier	name_len		860368	0					
ANR	860473	PrimaryExpression	1		860368	1					
ANR	860474	Argument	( void * * ) & c		860368	3					
ANR	860475	CastExpression	( void * * ) & c		860368	0					
ANR	860476	CastTarget	void * *		860368	0					
ANR	860477	UnaryOperationExpression	& c		860368	1					
ANR	860478	UnaryOperator	&		860368	0					
ANR	860479	Identifier	c		860368	1					
ANR	860480	Identifier	SUCCESS		860368	1					
ANR	860481	CompoundStatement		12:94:392:392	860368	1					
ANR	860482	IfStatement	if ( ! ( c -> flags & CONST_CT_SUBST ) || ( c -> flags & CONST_CS ) )		860368	0					
ANR	860483	Condition	! ( c -> flags & CONST_CT_SUBST ) || ( c -> flags & CONST_CS )	17:7:607:659	860368	0	True				
ANR	860484	OrExpression	! ( c -> flags & CONST_CT_SUBST ) || ( c -> flags & CONST_CS )		860368	0		||			
ANR	860485	UnaryOperationExpression	! ( c -> flags & CONST_CT_SUBST )		860368	0					
ANR	860486	UnaryOperator	!		860368	0					
ANR	860487	BitAndExpression	c -> flags & CONST_CT_SUBST		860368	1		&			
ANR	860488	PtrMemberAccess	c -> flags		860368	0					
ANR	860489	Identifier	c		860368	0					
ANR	860490	Identifier	flags		860368	1					
ANR	860491	Identifier	CONST_CT_SUBST		860368	1					
ANR	860492	BitAndExpression	c -> flags & CONST_CS		860368	1		&			
ANR	860493	PtrMemberAccess	c -> flags		860368	0					
ANR	860494	Identifier	c		860368	0					
ANR	860495	Identifier	flags		860368	1					
ANR	860496	Identifier	CONST_CS		860368	1					
ANR	860497	CompoundStatement		13:62:456:456	860368	1					
ANR	860498	ExpressionStatement	retval = 0	18:4:668:678	860368	0	True				
ANR	860499	AssignmentExpression	retval = 0		860368	0		=			
ANR	860500	Identifier	retval		860368	0					
ANR	860501	PrimaryExpression	0		860368	1					
ANR	860502	ElseStatement	else		860368	0					
ANR	860503	CompoundStatement		16:9:488:488	860368	0					
ANR	860504	ExpressionStatement	retval = 0	21:3:699:709	860368	0	True				
ANR	860505	AssignmentExpression	retval = 0		860368	0		=			
ANR	860506	Identifier	retval		860368	0					
ANR	860507	PrimaryExpression	0		860368	1					
ANR	860508	ExpressionStatement	FREE_ALLOCA ( lookup_name )	23:2:717:741	860368	4	True				
ANR	860509	CallExpression	FREE_ALLOCA ( lookup_name )		860368	0					
ANR	860510	Callee	FREE_ALLOCA		860368	0					
ANR	860511	Identifier	FREE_ALLOCA		860368	0					
ANR	860512	ArgumentList	lookup_name		860368	1					
ANR	860513	Argument	lookup_name		860368	0					
ANR	860514	Identifier	lookup_name		860368	0					
ANR	860515	IfStatement	if ( retval )		860368	5					
ANR	860516	Condition	retval	26:5:752:757	860368	0	True				
ANR	860517	Identifier	retval		860368	0					
ANR	860518	CompoundStatement		22:13:554:554	860368	1					
ANR	860519	IfStatement	if ( c -> flags & CONST_PERSISTENT )		860368	0					
ANR	860520	Condition	c -> flags & CONST_PERSISTENT	27:6:768:794	860368	0	True				
ANR	860521	BitAndExpression	c -> flags & CONST_PERSISTENT		860368	0		&			
ANR	860522	PtrMemberAccess	c -> flags		860368	0					
ANR	860523	Identifier	c		860368	0					
ANR	860524	Identifier	flags		860368	1					
ANR	860525	Identifier	CONST_PERSISTENT		860368	1					
ANR	860526	CompoundStatement		23:35:591:591	860368	1					
ANR	860527	ExpressionStatement	* result = c -> value	28:3:802:820	860368	0	True				
ANR	860528	AssignmentExpression	* result = c -> value		860368	0		=			
ANR	860529	UnaryOperationExpression	* result		860368	0					
ANR	860530	UnaryOperator	*		860368	0					
ANR	860531	Identifier	result		860368	1					
ANR	860532	PtrMemberAccess	c -> value		860368	1					
ANR	860533	Identifier	c		860368	0					
ANR	860534	Identifier	value		860368	1					
ANR	860535	IfStatement	if ( copy )		860368	1					
ANR	860536	Condition	copy	29:7:829:832	860368	0	True				
ANR	860537	Identifier	copy		860368	0					
ANR	860538	CompoundStatement		25:13:629:629	860368	1					
ANR	860539	ExpressionStatement	zval_copy_ctor ( result )	30:4:841:863	860368	0	True				
ANR	860540	CallExpression	zval_copy_ctor ( result )		860368	0					
ANR	860541	Callee	zval_copy_ctor		860368	0					
ANR	860542	Identifier	zval_copy_ctor		860368	0					
ANR	860543	ArgumentList	result		860368	1					
ANR	860544	Argument	result		860368	0					
ANR	860545	Identifier	result		860368	0					
ANR	860546	ElseStatement	else		860368	0					
ANR	860547	CompoundStatement		28:9:673:673	860368	0					
ANR	860548	ExpressionStatement	retval = 0	33:3:884:894	860368	0	True				
ANR	860549	AssignmentExpression	retval = 0		860368	0		=			
ANR	860550	Identifier	retval		860368	0					
ANR	860551	PrimaryExpression	0		860368	1					
ANR	860552	ReturnStatement	return retval ;	37:1:905:918	860368	6	True				
ANR	860553	Identifier	retval		860368	0					
ANR	860554	ReturnType	static int		860368	1					
ANR	860555	Identifier	zend_get_persistent_constant		860368	2					
ANR	860556	ParameterList	"char * name , uint name_len , zval * result , int copy TSRMLS_DC ELS_DC"		860368	3					
ANR	860557	Parameter	char * name	4:40:137:146	860368	0	True				
ANR	860558	ParameterType	char *		860368	0					
ANR	860559	Identifier	name		860368	1					
ANR	860560	Parameter	uint name_len	4:52:149:161	860368	1	True				
ANR	860561	ParameterType	uint		860368	0					
ANR	860562	Identifier	name_len		860368	1					
ANR	860563	Parameter	zval * result	4:67:164:175	860368	2	True				
ANR	860564	ParameterType	zval *		860368	0					
ANR	860565	Identifier	result		860368	1					
ANR	860566	Parameter	int copy TSRMLS_DC ELS_DC	4:81:178:202	860368	3	True				
ANR	860567	ParameterType	int copy TSRMLS_DC		860368	0					
ANR	860568	Identifier	ELS_DC		860368	1					
ANR	860569	CFGEntryNode	ENTRY		860368		True				
ANR	860570	CFGExitNode	EXIT		860368		True				
ANR	860571	Symbol	CONST_CT_SUBST		860368						
ANR	860572	Symbol	EG		860368						
ANR	860573	Symbol	CONST_CS		860368						
ANR	860574	Symbol	c		860368						
ANR	860575	Symbol	SUCCESS		860368						
ANR	860576	Symbol	c -> flags		860368						
ANR	860577	Symbol	ELS_DC		860368						
ANR	860578	Symbol	& c		860368						
ANR	860579	Symbol	c -> value		860368						
ANR	860580	Symbol	FAILURE		860368						
ANR	860581	Symbol	* c		860368						
ANR	860582	Symbol	retval		860368						
ANR	860583	Symbol	result		860368						
ANR	860584	Symbol	zend_hash_find		860368						
ANR	860585	Symbol	lookup_name		860368						
ANR	860586	Symbol	zend_constants		860368						
ANR	860587	Symbol	* result		860368						
ANR	860588	Symbol	name		860368						
ANR	860589	Symbol	DO_ALLOCA		860368						
ANR	860590	Symbol	name_len		860368						
ANR	860591	Symbol	copy		860368						
ANR	860592	Symbol	CONST_PERSISTENT		860368						
ANR	860593	Symbol	use_heap		860368						
ANR	860594	Function	print_block	43:0:1005:1897							
ANR	860595	FunctionDef	"print_block (zend_code_block * block , zend_op * opcodes , char * txt)"		860594	0					
ANR	860596	CompoundStatement		44:0:1089:1897	860594	0					
ANR	860597	ExpressionStatement	"fprintf ( stderr , ""%sBlock: %d-%d (%d)"" , txt , block -> start_opline - opcodes , block -> start_opline - opcodes + block -> len - 1 , block -> len )"	45:1:1092:1226	860594	0	True				
ANR	860598	CallExpression	"fprintf ( stderr , ""%sBlock: %d-%d (%d)"" , txt , block -> start_opline - opcodes , block -> start_opline - opcodes + block -> len - 1 , block -> len )"		860594	0					
ANR	860599	Callee	fprintf		860594	0					
ANR	860600	Identifier	fprintf		860594	0					
ANR	860601	ArgumentList	stderr		860594	1					
ANR	860602	Argument	stderr		860594	0					
ANR	860603	Identifier	stderr		860594	0					
ANR	860604	Argument	"""%sBlock: %d-%d (%d)"""		860594	1					
ANR	860605	PrimaryExpression	"""%sBlock: %d-%d (%d)"""		860594	0					
ANR	860606	Argument	txt		860594	2					
ANR	860607	Identifier	txt		860594	0					
ANR	860608	Argument	block -> start_opline - opcodes		860594	3					
ANR	860609	AdditiveExpression	block -> start_opline - opcodes		860594	0		-			
ANR	860610	PtrMemberAccess	block -> start_opline		860594	0					
ANR	860611	Identifier	block		860594	0					
ANR	860612	Identifier	start_opline		860594	1					
ANR	860613	Identifier	opcodes		860594	1					
ANR	860614	Argument	block -> start_opline - opcodes + block -> len - 1		860594	4					
ANR	860615	AdditiveExpression	block -> start_opline - opcodes + block -> len - 1		860594	0		-			
ANR	860616	PtrMemberAccess	block -> start_opline		860594	0					
ANR	860617	Identifier	block		860594	0					
ANR	860618	Identifier	start_opline		860594	1					
ANR	860619	AdditiveExpression	opcodes + block -> len - 1		860594	1		+			
ANR	860620	Identifier	opcodes		860594	0					
ANR	860621	AdditiveExpression	block -> len - 1		860594	1		-			
ANR	860622	PtrMemberAccess	block -> len		860594	0					
ANR	860623	Identifier	block		860594	0					
ANR	860624	Identifier	len		860594	1					
ANR	860625	PrimaryExpression	1		860594	1					
ANR	860626	Argument	block -> len		860594	5					
ANR	860627	PtrMemberAccess	block -> len		860594	0					
ANR	860628	Identifier	block		860594	0					
ANR	860629	Identifier	len		860594	1					
ANR	860630	IfStatement	if ( ! block -> access )		860594	1					
ANR	860631	Condition	! block -> access	46:5:1233:1246	860594	0	True				
ANR	860632	UnaryOperationExpression	! block -> access		860594	0					
ANR	860633	UnaryOperator	!		860594	0					
ANR	860634	PtrMemberAccess	block -> access		860594	1					
ANR	860635	Identifier	block		860594	0					
ANR	860636	Identifier	access		860594	1					
ANR	860637	CompoundStatement		3:21:159:159	860594	1					
ANR	860638	ExpressionStatement	"fprintf ( stderr , "" unused"" )"	47:2:1253:1279	860594	0	True				
ANR	860639	CallExpression	"fprintf ( stderr , "" unused"" )"		860594	0					
ANR	860640	Callee	fprintf		860594	0					
ANR	860641	Identifier	fprintf		860594	0					
ANR	860642	ArgumentList	stderr		860594	1					
ANR	860643	Argument	stderr		860594	0					
ANR	860644	Identifier	stderr		860594	0					
ANR	860645	Argument	""" unused"""		860594	1					
ANR	860646	PrimaryExpression	""" unused"""		860594	0					
ANR	860647	IfStatement	if ( block -> op1_to )		860594	2					
ANR	860648	Condition	block -> op1_to	49:5:1289:1301	860594	0	True				
ANR	860649	PtrMemberAccess	block -> op1_to		860594	0					
ANR	860650	Identifier	block		860594	0					
ANR	860651	Identifier	op1_to		860594	1					
ANR	860652	CompoundStatement		6:20:214:214	860594	1					
ANR	860653	ExpressionStatement	"fprintf ( stderr , "" 1: %d"" , block -> op1_to -> start_opline - opcodes )"	50:2:1308:1372	860594	0	True				
ANR	860654	CallExpression	"fprintf ( stderr , "" 1: %d"" , block -> op1_to -> start_opline - opcodes )"		860594	0					
ANR	860655	Callee	fprintf		860594	0					
ANR	860656	Identifier	fprintf		860594	0					
ANR	860657	ArgumentList	stderr		860594	1					
ANR	860658	Argument	stderr		860594	0					
ANR	860659	Identifier	stderr		860594	0					
ANR	860660	Argument	""" 1: %d"""		860594	1					
ANR	860661	PrimaryExpression	""" 1: %d"""		860594	0					
ANR	860662	Argument	block -> op1_to -> start_opline - opcodes		860594	2					
ANR	860663	AdditiveExpression	block -> op1_to -> start_opline - opcodes		860594	0		-			
ANR	860664	PtrMemberAccess	block -> op1_to -> start_opline		860594	0					
ANR	860665	PtrMemberAccess	block -> op1_to		860594	0					
ANR	860666	Identifier	block		860594	0					
ANR	860667	Identifier	op1_to		860594	1					
ANR	860668	Identifier	start_opline		860594	1					
ANR	860669	Identifier	opcodes		860594	1					
ANR	860670	IfStatement	if ( block -> op2_to )		860594	3					
ANR	860671	Condition	block -> op2_to	52:5:1382:1394	860594	0	True				
ANR	860672	PtrMemberAccess	block -> op2_to		860594	0					
ANR	860673	Identifier	block		860594	0					
ANR	860674	Identifier	op2_to		860594	1					
ANR	860675	CompoundStatement		9:20:307:307	860594	1					
ANR	860676	ExpressionStatement	"fprintf ( stderr , "" 2: %d"" , block -> op2_to -> start_opline - opcodes )"	53:2:1401:1465	860594	0	True				
ANR	860677	CallExpression	"fprintf ( stderr , "" 2: %d"" , block -> op2_to -> start_opline - opcodes )"		860594	0					
ANR	860678	Callee	fprintf		860594	0					
ANR	860679	Identifier	fprintf		860594	0					
ANR	860680	ArgumentList	stderr		860594	1					
ANR	860681	Argument	stderr		860594	0					
ANR	860682	Identifier	stderr		860594	0					
ANR	860683	Argument	""" 2: %d"""		860594	1					
ANR	860684	PrimaryExpression	""" 2: %d"""		860594	0					
ANR	860685	Argument	block -> op2_to -> start_opline - opcodes		860594	2					
ANR	860686	AdditiveExpression	block -> op2_to -> start_opline - opcodes		860594	0		-			
ANR	860687	PtrMemberAccess	block -> op2_to -> start_opline		860594	0					
ANR	860688	PtrMemberAccess	block -> op2_to		860594	0					
ANR	860689	Identifier	block		860594	0					
ANR	860690	Identifier	op2_to		860594	1					
ANR	860691	Identifier	start_opline		860594	1					
ANR	860692	Identifier	opcodes		860594	1					
ANR	860693	IfStatement	if ( block -> ext_to )		860594	4					
ANR	860694	Condition	block -> ext_to	55:5:1475:1487	860594	0	True				
ANR	860695	PtrMemberAccess	block -> ext_to		860594	0					
ANR	860696	Identifier	block		860594	0					
ANR	860697	Identifier	ext_to		860594	1					
ANR	860698	CompoundStatement		12:20:400:400	860594	1					
ANR	860699	ExpressionStatement	"fprintf ( stderr , "" e: %d"" , block -> ext_to -> start_opline - opcodes )"	56:2:1494:1558	860594	0	True				
ANR	860700	CallExpression	"fprintf ( stderr , "" e: %d"" , block -> ext_to -> start_opline - opcodes )"		860594	0					
ANR	860701	Callee	fprintf		860594	0					
ANR	860702	Identifier	fprintf		860594	0					
ANR	860703	ArgumentList	stderr		860594	1					
ANR	860704	Argument	stderr		860594	0					
ANR	860705	Identifier	stderr		860594	0					
ANR	860706	Argument	""" e: %d"""		860594	1					
ANR	860707	PrimaryExpression	""" e: %d"""		860594	0					
ANR	860708	Argument	block -> ext_to -> start_opline - opcodes		860594	2					
ANR	860709	AdditiveExpression	block -> ext_to -> start_opline - opcodes		860594	0		-			
ANR	860710	PtrMemberAccess	block -> ext_to -> start_opline		860594	0					
ANR	860711	PtrMemberAccess	block -> ext_to		860594	0					
ANR	860712	Identifier	block		860594	0					
ANR	860713	Identifier	ext_to		860594	1					
ANR	860714	Identifier	start_opline		860594	1					
ANR	860715	Identifier	opcodes		860594	1					
ANR	860716	IfStatement	if ( block -> follow_to )		860594	5					
ANR	860717	Condition	block -> follow_to	58:5:1568:1583	860594	0	True				
ANR	860718	PtrMemberAccess	block -> follow_to		860594	0					
ANR	860719	Identifier	block		860594	0					
ANR	860720	Identifier	follow_to		860594	1					
ANR	860721	CompoundStatement		15:23:496:496	860594	1					
ANR	860722	ExpressionStatement	"fprintf ( stderr , "" f: %d"" , block -> follow_to -> start_opline - opcodes )"	59:2:1590:1657	860594	0	True				
ANR	860723	CallExpression	"fprintf ( stderr , "" f: %d"" , block -> follow_to -> start_opline - opcodes )"		860594	0					
ANR	860724	Callee	fprintf		860594	0					
ANR	860725	Identifier	fprintf		860594	0					
ANR	860726	ArgumentList	stderr		860594	1					
ANR	860727	Argument	stderr		860594	0					
ANR	860728	Identifier	stderr		860594	0					
ANR	860729	Argument	""" f: %d"""		860594	1					
ANR	860730	PrimaryExpression	""" f: %d"""		860594	0					
ANR	860731	Argument	block -> follow_to -> start_opline - opcodes		860594	2					
ANR	860732	AdditiveExpression	block -> follow_to -> start_opline - opcodes		860594	0		-			
ANR	860733	PtrMemberAccess	block -> follow_to -> start_opline		860594	0					
ANR	860734	PtrMemberAccess	block -> follow_to		860594	0					
ANR	860735	Identifier	block		860594	0					
ANR	860736	Identifier	follow_to		860594	1					
ANR	860737	Identifier	start_opline		860594	1					
ANR	860738	Identifier	opcodes		860594	1					
ANR	860739	IfStatement	if ( block -> sources )		860594	6					
ANR	860740	Condition	block -> sources	62:5:1668:1681	860594	0	True				
ANR	860741	PtrMemberAccess	block -> sources		860594	0					
ANR	860742	Identifier	block		860594	0					
ANR	860743	Identifier	sources		860594	1					
ANR	860744	CompoundStatement		20:2:598:636	860594	1					
ANR	860745	IdentifierDeclStatement	zend_block_source * bs = block -> sources ;	63:2:1688:1726	860594	0	True				
ANR	860746	IdentifierDecl	* bs = block -> sources		860594	0					
ANR	860747	IdentifierDeclType	zend_block_source *		860594	0					
ANR	860748	Identifier	bs		860594	1					
ANR	860749	AssignmentExpression	* bs = block -> sources		860594	2		=			
ANR	860750	Identifier	bs		860594	0					
ANR	860751	PtrMemberAccess	block -> sources		860594	1					
ANR	860752	Identifier	block		860594	0					
ANR	860753	Identifier	sources		860594	1					
ANR	860754	ExpressionStatement	"fprintf ( stderr , "" s:"" )"	64:2:1730:1752	860594	1	True				
ANR	860755	CallExpression	"fprintf ( stderr , "" s:"" )"		860594	0					
ANR	860756	Callee	fprintf		860594	0					
ANR	860757	Identifier	fprintf		860594	0					
ANR	860758	ArgumentList	stderr		860594	1					
ANR	860759	Argument	stderr		860594	0					
ANR	860760	Identifier	stderr		860594	0					
ANR	860761	Argument	""" s:"""		860594	1					
ANR	860762	PrimaryExpression	""" s:"""		860594	0					
ANR	860763	WhileStatement	while ( bs )		860594	2					
ANR	860764	Condition	bs	65:9:1763:1764	860594	0	True				
ANR	860765	Identifier	bs		860594	0					
ANR	860766	CompoundStatement		22:13:677:677	860594	1					
ANR	860767	ExpressionStatement	"fprintf ( stderr , "" %d"" , bs -> from -> start_opline - opcodes )"	66:3:1772:1828	860594	0	True				
ANR	860768	CallExpression	"fprintf ( stderr , "" %d"" , bs -> from -> start_opline - opcodes )"		860594	0					
ANR	860769	Callee	fprintf		860594	0					
ANR	860770	Identifier	fprintf		860594	0					
ANR	860771	ArgumentList	stderr		860594	1					
ANR	860772	Argument	stderr		860594	0					
ANR	860773	Identifier	stderr		860594	0					
ANR	860774	Argument	""" %d"""		860594	1					
ANR	860775	PrimaryExpression	""" %d"""		860594	0					
ANR	860776	Argument	bs -> from -> start_opline - opcodes		860594	2					
ANR	860777	AdditiveExpression	bs -> from -> start_opline - opcodes		860594	0		-			
ANR	860778	PtrMemberAccess	bs -> from -> start_opline		860594	0					
ANR	860779	PtrMemberAccess	bs -> from		860594	0					
ANR	860780	Identifier	bs		860594	0					
ANR	860781	Identifier	from		860594	1					
ANR	860782	Identifier	start_opline		860594	1					
ANR	860783	Identifier	opcodes		860594	1					
ANR	860784	ExpressionStatement	bs = bs -> next	67:3:1833:1846	860594	1	True				
ANR	860785	AssignmentExpression	bs = bs -> next		860594	0		=			
ANR	860786	Identifier	bs		860594	0					
ANR	860787	PtrMemberAccess	bs -> next		860594	1					
ANR	860788	Identifier	bs		860594	0					
ANR	860789	Identifier	next		860594	1					
ANR	860790	ExpressionStatement	"fprintf ( stderr , ""\\n"" )"	71:1:1857:1878	860594	7	True				
ANR	860791	CallExpression	"fprintf ( stderr , ""\\n"" )"		860594	0					
ANR	860792	Callee	fprintf		860594	0					
ANR	860793	Identifier	fprintf		860594	0					
ANR	860794	ArgumentList	stderr		860594	1					
ANR	860795	Argument	stderr		860594	0					
ANR	860796	Identifier	stderr		860594	0					
ANR	860797	Argument	"""\\n"""		860594	1					
ANR	860798	PrimaryExpression	"""\\n"""		860594	0					
ANR	860799	ExpressionStatement	fflush ( stderr )	72:1:1881:1895	860594	8	True				
ANR	860800	CallExpression	fflush ( stderr )		860594	0					
ANR	860801	Callee	fflush		860594	0					
ANR	860802	Identifier	fflush		860594	0					
ANR	860803	ArgumentList	stderr		860594	1					
ANR	860804	Argument	stderr		860594	0					
ANR	860805	Identifier	stderr		860594	0					
ANR	860806	ReturnType	static inline void		860594	1					
ANR	860807	Identifier	print_block		860594	2					
ANR	860808	ParameterList	"zend_code_block * block , zend_op * opcodes , char * txt"		860594	3					
ANR	860809	Parameter	zend_code_block * block	43:31:1036:1057	860594	0	True				
ANR	860810	ParameterType	zend_code_block *		860594	0					
ANR	860811	Identifier	block		860594	1					
ANR	860812	Parameter	zend_op * opcodes	43:55:1060:1075	860594	1	True				
ANR	860813	ParameterType	zend_op *		860594	0					
ANR	860814	Identifier	opcodes		860594	1					
ANR	860815	Parameter	char * txt	43:73:1078:1086	860594	2	True				
ANR	860816	ParameterType	char *		860594	0					
ANR	860817	Identifier	txt		860594	1					
ANR	860818	CFGEntryNode	ENTRY		860594		True				
ANR	860819	CFGExitNode	EXIT		860594		True				
ANR	860820	Symbol	* block -> op1_to		860594						
ANR	860821	Symbol	block -> ext_to		860594						
ANR	860822	Symbol	block -> sources		860594						
ANR	860823	Symbol	bs -> next		860594						
ANR	860824	Symbol	bs		860594						
ANR	860825	Symbol	bs -> from		860594						
ANR	860826	Symbol	* bs -> from		860594						
ANR	860827	Symbol	* bs		860594						
ANR	860828	Symbol	block		860594						
ANR	860829	Symbol	block -> op2_to		860594						
ANR	860830	Symbol	block -> ext_to -> start_opline		860594						
ANR	860831	Symbol	stderr		860594						
ANR	860832	Symbol	* block -> ext_to		860594						
ANR	860833	Symbol	block -> follow_to		860594						
ANR	860834	Symbol	block -> len		860594						
ANR	860835	Symbol	block -> op2_to -> start_opline		860594						
ANR	860836	Symbol	block -> op1_to -> start_opline		860594						
ANR	860837	Symbol	* block		860594						
ANR	860838	Symbol	block -> start_opline		860594						
ANR	860839	Symbol	txt		860594						
ANR	860840	Symbol	block -> follow_to -> start_opline		860594						
ANR	860841	Symbol	bs -> from -> start_opline		860594						
ANR	860842	Symbol	block -> access		860594						
ANR	860843	Symbol	* block -> follow_to		860594						
ANR	860844	Symbol	* * block		860594						
ANR	860845	Symbol	* block -> op2_to		860594						
ANR	860846	Symbol	opcodes		860594						
ANR	860847	Symbol	block -> op1_to		860594						
ANR	860848	Symbol	* * bs		860594						
ANR	860849	Function	find_code_blocks	83:0:2220:9675							
ANR	860850	FunctionDef	"find_code_blocks (zend_op_array * op_array , zend_cfg * cfg)"		860849	0					
ANR	860851	CompoundStatement		84:0:2288:9675	860849	0					
ANR	860852	IdentifierDeclStatement	zend_op * opline ;	85:1:2291:2306	860849	0	True				
ANR	860853	IdentifierDecl	* opline		860849	0					
ANR	860854	IdentifierDeclType	zend_op *		860849	0					
ANR	860855	Identifier	opline		860849	1					
ANR	860856	IdentifierDeclStatement	zend_op * end = op_array -> opcodes + op_array -> last ;	86:1:2309:2358	860849	1	True				
ANR	860857	IdentifierDecl	* end = op_array -> opcodes + op_array -> last		860849	0					
ANR	860858	IdentifierDeclType	zend_op *		860849	0					
ANR	860859	Identifier	end		860849	1					
ANR	860860	AssignmentExpression	* end = op_array -> opcodes + op_array -> last		860849	2		=			
ANR	860861	Identifier	end		860849	0					
ANR	860862	AdditiveExpression	op_array -> opcodes + op_array -> last		860849	1		+			
ANR	860863	PtrMemberAccess	op_array -> opcodes		860849	0					
ANR	860864	Identifier	op_array		860849	0					
ANR	860865	Identifier	opcodes		860849	1					
ANR	860866	PtrMemberAccess	op_array -> last		860849	1					
ANR	860867	Identifier	op_array		860849	0					
ANR	860868	Identifier	last		860849	1					
ANR	860869	IdentifierDeclStatement	"zend_code_block * blocks , * cur_block ;"	87:1:2361:2396	860849	2	True				
ANR	860870	IdentifierDecl	* blocks		860849	0					
ANR	860871	IdentifierDeclType	zend_code_block *		860849	0					
ANR	860872	Identifier	blocks		860849	1					
ANR	860873	IdentifierDecl	* cur_block		860849	1					
ANR	860874	IdentifierDeclType	zend_code_block *		860849	0					
ANR	860875	Identifier	cur_block		860849	1					
ANR	860876	IdentifierDeclStatement	zend_uint opno = 0 ;	88:1:2399:2417	860849	3	True				
ANR	860877	IdentifierDecl	opno = 0		860849	0					
ANR	860878	IdentifierDeclType	zend_uint		860849	0					
ANR	860879	Identifier	opno		860849	1					
ANR	860880	AssignmentExpression	opno = 0		860849	2		=			
ANR	860881	Identifier	opno		860849	0					
ANR	860882	PrimaryExpression	0		860849	1					
ANR	860883	ExpressionStatement	"memset ( cfg , 0 , sizeof ( zend_cfg ) )"	90:1:2421:2453	860849	4	True				
ANR	860884	CallExpression	"memset ( cfg , 0 , sizeof ( zend_cfg ) )"		860849	0					
ANR	860885	Callee	memset		860849	0					
ANR	860886	Identifier	memset		860849	0					
ANR	860887	ArgumentList	cfg		860849	1					
ANR	860888	Argument	cfg		860849	0					
ANR	860889	Identifier	cfg		860849	0					
ANR	860890	Argument	0		860849	1					
ANR	860891	PrimaryExpression	0		860849	0					
ANR	860892	Argument	sizeof ( zend_cfg )		860849	2					
ANR	860893	SizeofExpression	sizeof ( zend_cfg )		860849	0					
ANR	860894	Sizeof	sizeof		860849	0					
ANR	860895	SizeofOperand	zend_cfg		860849	1					
ANR	860896	ExpressionStatement	"blocks = cfg -> blocks = ecalloc ( op_array -> last + 2 , sizeof ( zend_code_block ) )"	91:1:2456:2531	860849	5	True				
ANR	860897	AssignmentExpression	"blocks = cfg -> blocks = ecalloc ( op_array -> last + 2 , sizeof ( zend_code_block ) )"		860849	0		=			
ANR	860898	Identifier	blocks		860849	0					
ANR	860899	AssignmentExpression	"cfg -> blocks = ecalloc ( op_array -> last + 2 , sizeof ( zend_code_block ) )"		860849	1		=			
ANR	860900	PtrMemberAccess	cfg -> blocks		860849	0					
ANR	860901	Identifier	cfg		860849	0					
ANR	860902	Identifier	blocks		860849	1					
ANR	860903	CallExpression	"ecalloc ( op_array -> last + 2 , sizeof ( zend_code_block ) )"		860849	1					
ANR	860904	Callee	ecalloc		860849	0					
ANR	860905	Identifier	ecalloc		860849	0					
ANR	860906	ArgumentList	op_array -> last + 2		860849	1					
ANR	860907	Argument	op_array -> last + 2		860849	0					
ANR	860908	AdditiveExpression	op_array -> last + 2		860849	0		+			
ANR	860909	PtrMemberAccess	op_array -> last		860849	0					
ANR	860910	Identifier	op_array		860849	0					
ANR	860911	Identifier	last		860849	1					
ANR	860912	PrimaryExpression	2		860849	1					
ANR	860913	Argument	sizeof ( zend_code_block )		860849	1					
ANR	860914	SizeofExpression	sizeof ( zend_code_block )		860849	0					
ANR	860915	Sizeof	sizeof		860849	0					
ANR	860916	SizeofOperand	zend_code_block		860849	1					
ANR	860917	ExpressionStatement	opline = op_array -> opcodes	92:1:2534:2560	860849	6	True				
ANR	860918	AssignmentExpression	opline = op_array -> opcodes		860849	0		=			
ANR	860919	Identifier	opline		860849	0					
ANR	860920	PtrMemberAccess	op_array -> opcodes		860849	1					
ANR	860921	Identifier	op_array		860849	0					
ANR	860922	Identifier	opcodes		860849	1					
ANR	860923	ExpressionStatement	blocks [ 0 ] . start_opline = opline	93:1:2563:2594	860849	7	True				
ANR	860924	AssignmentExpression	blocks [ 0 ] . start_opline = opline		860849	0		=			
ANR	860925	MemberAccess	blocks [ 0 ] . start_opline		860849	0					
ANR	860926	ArrayIndexing	blocks [ 0 ]		860849	0					
ANR	860927	Identifier	blocks		860849	0					
ANR	860928	PrimaryExpression	0		860849	1					
ANR	860929	Identifier	start_opline		860849	1					
ANR	860930	Identifier	opline		860849	1					
ANR	860931	ExpressionStatement	blocks [ 0 ] . start_opline_no = 0	94:1:2597:2626	860849	8	True				
ANR	860932	AssignmentExpression	blocks [ 0 ] . start_opline_no = 0		860849	0		=			
ANR	860933	MemberAccess	blocks [ 0 ] . start_opline_no		860849	0					
ANR	860934	ArrayIndexing	blocks [ 0 ]		860849	0					
ANR	860935	Identifier	blocks		860849	0					
ANR	860936	PrimaryExpression	0		860849	1					
ANR	860937	Identifier	start_opline_no		860849	1					
ANR	860938	PrimaryExpression	0		860849	1					
ANR	860939	WhileStatement	while ( opline < end )		860849	9					
ANR	860940	Condition	opline < end	95:8:2636:2647	860849	0	True				
ANR	860941	RelationalExpression	opline < end		860849	0		<			
ANR	860942	Identifier	opline		860849	0					
ANR	860943	Identifier	end		860849	1					
ANR	860944	CompoundStatement		12:22:361:361	860849	1					
ANR	860945	SwitchStatement	switch ( ( unsigned ) opline -> opcode )		860849	0					
ANR	860946	Condition	( unsigned ) opline -> opcode	96:9:2661:2684	860849	0	True				
ANR	860947	CastExpression	( unsigned ) opline -> opcode		860849	0					
ANR	860948	CastTarget	unsigned		860849	0					
ANR	860949	PtrMemberAccess	opline -> opcode		860849	1					
ANR	860950	Identifier	opline		860849	0					
ANR	860951	Identifier	opcode		860849	1					
ANR	860952	CompoundStatement		13:35:398:398	860849	1					
ANR	860953	Label	case ZEND_BRK :	97:3:2692:2705	860849	0	True				
ANR	860954	Identifier	ZEND_BRK		860849	0					
ANR	860955	Label	case ZEND_CONT :	98:3:2710:2724	860849	1	True				
ANR	860956	Identifier	ZEND_CONT		860849	0					
ANR	860957	Label	case ZEND_GOTO :	100:3:2775:2789	860849	2	True				
ANR	860958	Identifier	ZEND_GOTO		860849	0					
ANR	860959	ExpressionStatement	efree ( blocks )	105:4:2945:2958	860849	3	True				
ANR	860960	CallExpression	efree ( blocks )		860849	0					
ANR	860961	Callee	efree		860849	0					
ANR	860962	Identifier	efree		860849	0					
ANR	860963	ArgumentList	blocks		860849	1					
ANR	860964	Argument	blocks		860849	0					
ANR	860965	Identifier	blocks		860849	0					
ANR	860966	ReturnStatement	return 0 ;	106:4:2964:2972	860849	4	True				
ANR	860967	PrimaryExpression	0		860849	0					
ANR	860968	Label	case ZEND_FAST_CALL :	108:3:3022:3041	860849	5	True				
ANR	860969	Identifier	ZEND_FAST_CALL		860849	0					
ANR	860970	ExpressionStatement	START_BLOCK_OP ( ZEND_OP1 ( opline ) . opline_num )	109:4:3047:3090	860849	6	True				
ANR	860971	CallExpression	START_BLOCK_OP ( ZEND_OP1 ( opline ) . opline_num )		860849	0					
ANR	860972	Callee	START_BLOCK_OP		860849	0					
ANR	860973	Identifier	START_BLOCK_OP		860849	0					
ANR	860974	ArgumentList	ZEND_OP1 ( opline ) . opline_num		860849	1					
ANR	860975	Argument	ZEND_OP1 ( opline ) . opline_num		860849	0					
ANR	860976	MemberAccess	ZEND_OP1 ( opline ) . opline_num		860849	0					
ANR	860977	CallExpression	ZEND_OP1 ( opline )		860849	0					
ANR	860978	Callee	ZEND_OP1		860849	0					
ANR	860979	Identifier	ZEND_OP1		860849	0					
ANR	860980	ArgumentList	opline		860849	1					
ANR	860981	Argument	opline		860849	0					
ANR	860982	Identifier	opline		860849	0					
ANR	860983	Identifier	opline_num		860849	1					
ANR	860984	IfStatement	if ( opline -> extended_value )		860849	7					
ANR	860985	Condition	opline -> extended_value	110:8:3100:3121	860849	0	True				
ANR	860986	PtrMemberAccess	opline -> extended_value		860849	0					
ANR	860987	Identifier	opline		860849	0					
ANR	860988	Identifier	extended_value		860849	1					
ANR	860989	CompoundStatement		27:32:835:835	860849	1					
ANR	860990	ExpressionStatement	START_BLOCK_OP ( ZEND_OP2 ( opline ) . opline_num )	111:5:3131:3174	860849	0	True				
ANR	860991	CallExpression	START_BLOCK_OP ( ZEND_OP2 ( opline ) . opline_num )		860849	0					
ANR	860992	Callee	START_BLOCK_OP		860849	0					
ANR	860993	Identifier	START_BLOCK_OP		860849	0					
ANR	860994	ArgumentList	ZEND_OP2 ( opline ) . opline_num		860849	1					
ANR	860995	Argument	ZEND_OP2 ( opline ) . opline_num		860849	0					
ANR	860996	MemberAccess	ZEND_OP2 ( opline ) . opline_num		860849	0					
ANR	860997	CallExpression	ZEND_OP2 ( opline )		860849	0					
ANR	860998	Callee	ZEND_OP2		860849	0					
ANR	860999	Identifier	ZEND_OP2		860849	0					
ANR	861000	ArgumentList	opline		860849	1					
ANR	861001	Argument	opline		860849	0					
ANR	861002	Identifier	opline		860849	0					
ANR	861003	Identifier	opline_num		860849	1					
ANR	861004	ExpressionStatement	START_BLOCK_OP ( opno + 1 )	113:4:3186:3210	860849	8	True				
ANR	861005	CallExpression	START_BLOCK_OP ( opno + 1 )		860849	0					
ANR	861006	Callee	START_BLOCK_OP		860849	0					
ANR	861007	Identifier	START_BLOCK_OP		860849	0					
ANR	861008	ArgumentList	opno + 1		860849	1					
ANR	861009	Argument	opno + 1		860849	0					
ANR	861010	AdditiveExpression	opno + 1		860849	0		+			
ANR	861011	Identifier	opno		860849	0					
ANR	861012	PrimaryExpression	1		860849	1					
ANR	861013	BreakStatement	break ;	114:4:3216:3221	860849	9	True				
ANR	861014	Label	case ZEND_FAST_RET :	115:3:3226:3244	860849	10	True				
ANR	861015	Identifier	ZEND_FAST_RET		860849	0					
ANR	861016	IfStatement	if ( opline -> extended_value )		860849	11					
ANR	861017	Condition	opline -> extended_value	116:8:3254:3275	860849	0	True				
ANR	861018	PtrMemberAccess	opline -> extended_value		860849	0					
ANR	861019	Identifier	opline		860849	0					
ANR	861020	Identifier	extended_value		860849	1					
ANR	861021	CompoundStatement		33:32:989:989	860849	1					
ANR	861022	ExpressionStatement	START_BLOCK_OP ( ZEND_OP2 ( opline ) . opline_num )	117:5:3285:3328	860849	0	True				
ANR	861023	CallExpression	START_BLOCK_OP ( ZEND_OP2 ( opline ) . opline_num )		860849	0					
ANR	861024	Callee	START_BLOCK_OP		860849	0					
ANR	861025	Identifier	START_BLOCK_OP		860849	0					
ANR	861026	ArgumentList	ZEND_OP2 ( opline ) . opline_num		860849	1					
ANR	861027	Argument	ZEND_OP2 ( opline ) . opline_num		860849	0					
ANR	861028	MemberAccess	ZEND_OP2 ( opline ) . opline_num		860849	0					
ANR	861029	CallExpression	ZEND_OP2 ( opline )		860849	0					
ANR	861030	Callee	ZEND_OP2		860849	0					
ANR	861031	Identifier	ZEND_OP2		860849	0					
ANR	861032	ArgumentList	opline		860849	1					
ANR	861033	Argument	opline		860849	0					
ANR	861034	Identifier	opline		860849	0					
ANR	861035	Identifier	opline_num		860849	1					
ANR	861036	ExpressionStatement	START_BLOCK_OP ( opno + 1 )	119:4:3340:3364	860849	12	True				
ANR	861037	CallExpression	START_BLOCK_OP ( opno + 1 )		860849	0					
ANR	861038	Callee	START_BLOCK_OP		860849	0					
ANR	861039	Identifier	START_BLOCK_OP		860849	0					
ANR	861040	ArgumentList	opno + 1		860849	1					
ANR	861041	Argument	opno + 1		860849	0					
ANR	861042	AdditiveExpression	opno + 1		860849	0		+			
ANR	861043	Identifier	opno		860849	0					
ANR	861044	PrimaryExpression	1		860849	1					
ANR	861045	BreakStatement	break ;	120:4:3370:3375	860849	13	True				
ANR	861046	Label	case ZEND_JMP :	122:3:3387:3400	860849	14	True				
ANR	861047	Identifier	ZEND_JMP		860849	0					
ANR	861048	ExpressionStatement	START_BLOCK_OP ( ZEND_OP1 ( opline ) . opline_num )	123:4:3406:3449	860849	15	True				
ANR	861049	CallExpression	START_BLOCK_OP ( ZEND_OP1 ( opline ) . opline_num )		860849	0					
ANR	861050	Callee	START_BLOCK_OP		860849	0					
ANR	861051	Identifier	START_BLOCK_OP		860849	0					
ANR	861052	ArgumentList	ZEND_OP1 ( opline ) . opline_num		860849	1					
ANR	861053	Argument	ZEND_OP1 ( opline ) . opline_num		860849	0					
ANR	861054	MemberAccess	ZEND_OP1 ( opline ) . opline_num		860849	0					
ANR	861055	CallExpression	ZEND_OP1 ( opline )		860849	0					
ANR	861056	Callee	ZEND_OP1		860849	0					
ANR	861057	Identifier	ZEND_OP1		860849	0					
ANR	861058	ArgumentList	opline		860849	1					
ANR	861059	Argument	opline		860849	0					
ANR	861060	Identifier	opline		860849	0					
ANR	861061	Identifier	opline_num		860849	1					
ANR	861062	Label	case ZEND_RETURN :	125:3:3492:3508	860849	16	True				
ANR	861063	Identifier	ZEND_RETURN		860849	0					
ANR	861064	Label	case ZEND_RETURN_BY_REF :	127:3:3558:3581	860849	17	True				
ANR	861065	Identifier	ZEND_RETURN_BY_REF		860849	0					
ANR	861066	Label	case ZEND_GENERATOR_RETURN :	130:3:3638:3664	860849	18	True				
ANR	861067	Identifier	ZEND_GENERATOR_RETURN		860849	0					
ANR	861068	Label	case ZEND_EXIT :	132:3:3676:3690	860849	19	True				
ANR	861069	Identifier	ZEND_EXIT		860849	0					
ANR	861070	Label	case ZEND_THROW :	133:3:3695:3710	860849	20	True				
ANR	861071	Identifier	ZEND_THROW		860849	0					
ANR	861072	ExpressionStatement	START_BLOCK_OP ( opno + 1 )	135:4:3754:3778	860849	21	True				
ANR	861073	CallExpression	START_BLOCK_OP ( opno + 1 )		860849	0					
ANR	861074	Callee	START_BLOCK_OP		860849	0					
ANR	861075	Identifier	START_BLOCK_OP		860849	0					
ANR	861076	ArgumentList	opno + 1		860849	1					
ANR	861077	Argument	opno + 1		860849	0					
ANR	861078	AdditiveExpression	opno + 1		860849	0		+			
ANR	861079	Identifier	opno		860849	0					
ANR	861080	PrimaryExpression	1		860849	1					
ANR	861081	BreakStatement	break ;	136:4:3784:3789	860849	22	True				
ANR	861082	Label	case ZEND_CATCH :	139:3:3898:3913	860849	23	True				
ANR	861083	Identifier	ZEND_CATCH		860849	0					
ANR	861084	ExpressionStatement	START_BLOCK_OP ( opline -> extended_value )	140:4:3919:3957	860849	24	True				
ANR	861085	CallExpression	START_BLOCK_OP ( opline -> extended_value )		860849	0					
ANR	861086	Callee	START_BLOCK_OP		860849	0					
ANR	861087	Identifier	START_BLOCK_OP		860849	0					
ANR	861088	ArgumentList	opline -> extended_value		860849	1					
ANR	861089	Argument	opline -> extended_value		860849	0					
ANR	861090	PtrMemberAccess	opline -> extended_value		860849	0					
ANR	861091	Identifier	opline		860849	0					
ANR	861092	Identifier	extended_value		860849	1					
ANR	861093	ExpressionStatement	START_BLOCK_OP ( opno + 1 )	141:4:3963:3987	860849	25	True				
ANR	861094	CallExpression	START_BLOCK_OP ( opno + 1 )		860849	0					
ANR	861095	Callee	START_BLOCK_OP		860849	0					
ANR	861096	Identifier	START_BLOCK_OP		860849	0					
ANR	861097	ArgumentList	opno + 1		860849	1					
ANR	861098	Argument	opno + 1		860849	0					
ANR	861099	AdditiveExpression	opno + 1		860849	0		+			
ANR	861100	Identifier	opno		860849	0					
ANR	861101	PrimaryExpression	1		860849	1					
ANR	861102	BreakStatement	break ;	142:4:3993:3998	860849	26	True				
ANR	861103	Label	case ZEND_JMPZNZ :	143:3:4003:4019	860849	27	True				
ANR	861104	Identifier	ZEND_JMPZNZ		860849	0					
ANR	861105	ExpressionStatement	START_BLOCK_OP ( opline -> extended_value )	144:4:4025:4063	860849	28	True				
ANR	861106	CallExpression	START_BLOCK_OP ( opline -> extended_value )		860849	0					
ANR	861107	Callee	START_BLOCK_OP		860849	0					
ANR	861108	Identifier	START_BLOCK_OP		860849	0					
ANR	861109	ArgumentList	opline -> extended_value		860849	1					
ANR	861110	Argument	opline -> extended_value		860849	0					
ANR	861111	PtrMemberAccess	opline -> extended_value		860849	0					
ANR	861112	Identifier	opline		860849	0					
ANR	861113	Identifier	extended_value		860849	1					
ANR	861114	Label	case ZEND_JMPZ :	145:3:4068:4082	860849	29	True				
ANR	861115	Identifier	ZEND_JMPZ		860849	0					
ANR	861116	Label	case ZEND_JMPNZ :	146:3:4087:4102	860849	30	True				
ANR	861117	Identifier	ZEND_JMPNZ		860849	0					
ANR	861118	Label	case ZEND_JMPZ_EX :	147:3:4107:4124	860849	31	True				
ANR	861119	Identifier	ZEND_JMPZ_EX		860849	0					
ANR	861120	Label	case ZEND_JMPNZ_EX :	148:3:4129:4147	860849	32	True				
ANR	861121	Identifier	ZEND_JMPNZ_EX		860849	0					
ANR	861122	Label	case ZEND_FE_RESET :	149:3:4152:4170	860849	33	True				
ANR	861123	Identifier	ZEND_FE_RESET		860849	0					
ANR	861124	Label	case ZEND_NEW :	150:3:4175:4188	860849	34	True				
ANR	861125	Identifier	ZEND_NEW		860849	0					
ANR	861126	Label	case ZEND_JMP_SET :	152:3:4239:4256	860849	35	True				
ANR	861127	Identifier	ZEND_JMP_SET		860849	0					
ANR	861128	Label	case ZEND_JMP_SET_VAR :	155:3:4313:4334	860849	36	True				
ANR	861129	Identifier	ZEND_JMP_SET_VAR		860849	0					
ANR	861130	ExpressionStatement	START_BLOCK_OP ( ZEND_OP2 ( opline ) . opline_num )	157:4:4347:4390	860849	37	True				
ANR	861131	CallExpression	START_BLOCK_OP ( ZEND_OP2 ( opline ) . opline_num )		860849	0					
ANR	861132	Callee	START_BLOCK_OP		860849	0					
ANR	861133	Identifier	START_BLOCK_OP		860849	0					
ANR	861134	ArgumentList	ZEND_OP2 ( opline ) . opline_num		860849	1					
ANR	861135	Argument	ZEND_OP2 ( opline ) . opline_num		860849	0					
ANR	861136	MemberAccess	ZEND_OP2 ( opline ) . opline_num		860849	0					
ANR	861137	CallExpression	ZEND_OP2 ( opline )		860849	0					
ANR	861138	Callee	ZEND_OP2		860849	0					
ANR	861139	Identifier	ZEND_OP2		860849	0					
ANR	861140	ArgumentList	opline		860849	1					
ANR	861141	Argument	opline		860849	0					
ANR	861142	Identifier	opline		860849	0					
ANR	861143	Identifier	opline_num		860849	1					
ANR	861144	ExpressionStatement	START_BLOCK_OP ( opno + 1 )	158:4:4396:4420	860849	38	True				
ANR	861145	CallExpression	START_BLOCK_OP ( opno + 1 )		860849	0					
ANR	861146	Callee	START_BLOCK_OP		860849	0					
ANR	861147	Identifier	START_BLOCK_OP		860849	0					
ANR	861148	ArgumentList	opno + 1		860849	1					
ANR	861149	Argument	opno + 1		860849	0					
ANR	861150	AdditiveExpression	opno + 1		860849	0		+			
ANR	861151	Identifier	opno		860849	0					
ANR	861152	PrimaryExpression	1		860849	1					
ANR	861153	BreakStatement	break ;	159:4:4426:4431	860849	39	True				
ANR	861154	Label	case ZEND_FE_FETCH :	160:3:4436:4454	860849	40	True				
ANR	861155	Identifier	ZEND_FE_FETCH		860849	0					
ANR	861156	ExpressionStatement	START_BLOCK_OP ( ZEND_OP2 ( opline ) . opline_num )	161:4:4460:4503	860849	41	True				
ANR	861157	CallExpression	START_BLOCK_OP ( ZEND_OP2 ( opline ) . opline_num )		860849	0					
ANR	861158	Callee	START_BLOCK_OP		860849	0					
ANR	861159	Identifier	START_BLOCK_OP		860849	0					
ANR	861160	ArgumentList	ZEND_OP2 ( opline ) . opline_num		860849	1					
ANR	861161	Argument	ZEND_OP2 ( opline ) . opline_num		860849	0					
ANR	861162	MemberAccess	ZEND_OP2 ( opline ) . opline_num		860849	0					
ANR	861163	CallExpression	ZEND_OP2 ( opline )		860849	0					
ANR	861164	Callee	ZEND_OP2		860849	0					
ANR	861165	Identifier	ZEND_OP2		860849	0					
ANR	861166	ArgumentList	opline		860849	1					
ANR	861167	Argument	opline		860849	0					
ANR	861168	Identifier	opline		860849	0					
ANR	861169	Identifier	opline_num		860849	1					
ANR	861170	ExpressionStatement	START_BLOCK_OP ( opno + 2 )	162:4:4509:4533	860849	42	True				
ANR	861171	CallExpression	START_BLOCK_OP ( opno + 2 )		860849	0					
ANR	861172	Callee	START_BLOCK_OP		860849	0					
ANR	861173	Identifier	START_BLOCK_OP		860849	0					
ANR	861174	ArgumentList	opno + 2		860849	1					
ANR	861175	Argument	opno + 2		860849	0					
ANR	861176	AdditiveExpression	opno + 2		860849	0		+			
ANR	861177	Identifier	opno		860849	0					
ANR	861178	PrimaryExpression	2		860849	1					
ANR	861179	BreakStatement	break ;	163:4:4539:4544	860849	43	True				
ANR	861180	ExpressionStatement	opno ++	165:2:4552:4558	860849	1	True				
ANR	861181	PostIncDecOperationExpression	opno ++		860849	0					
ANR	861182	Identifier	opno		860849	0					
ANR	861183	IncDec	++		860849	1					
ANR	861184	ExpressionStatement	opline ++	166:2:4562:4570	860849	2	True				
ANR	861185	PostIncDecOperationExpression	opline ++		860849	0					
ANR	861186	Identifier	opline		860849	0					
ANR	861187	IncDec	++		860849	1					
ANR	861188	IfStatement	if ( op_array -> last_try_catch )		860849	10					
ANR	861189	Condition	op_array -> last_try_catch	170:5:4618:4641	860849	0	True				
ANR	861190	PtrMemberAccess	op_array -> last_try_catch		860849	0					
ANR	861191	Identifier	op_array		860849	0					
ANR	861192	Identifier	last_try_catch		860849	1					
ANR	861193	CompoundStatement		88:2:2359:2364	860849	1					
ANR	861194	IdentifierDeclStatement	int i ;	171:2:4648:4653	860849	0	True				
ANR	861195	IdentifierDecl	i		860849	0					
ANR	861196	IdentifierDeclType	int		860849	0					
ANR	861197	Identifier	i		860849	1					
ANR	861198	Statement	cfg	172:2:4657:4659	860849	1	True				
ANR	861199	Statement	->	172:5:4660:4661	860849	2	True				
ANR	861200	TryStatement	try		860849	3					
ANR	861201	Statement	=		860849	0					
ANR	861202	ExpressionStatement	"ecalloc ( op_array -> last_try_catch , sizeof ( zend_code_block * ) )"	172:13:4668:4728	860849	4	True				
ANR	861203	CallExpression	"ecalloc ( op_array -> last_try_catch , sizeof ( zend_code_block * ) )"		860849	0					
ANR	861204	Callee	ecalloc		860849	0					
ANR	861205	Identifier	ecalloc		860849	0					
ANR	861206	ArgumentList	op_array -> last_try_catch		860849	1					
ANR	861207	Argument	op_array -> last_try_catch		860849	0					
ANR	861208	PtrMemberAccess	op_array -> last_try_catch		860849	0					
ANR	861209	Identifier	op_array		860849	0					
ANR	861210	Identifier	last_try_catch		860849	1					
ANR	861211	Argument	sizeof ( zend_code_block * )		860849	1					
ANR	861212	SizeofExpression	sizeof ( zend_code_block * )		860849	0					
ANR	861213	Sizeof	sizeof		860849	0					
ANR	861214	SizeofOperand	zend_code_block *		860849	1					
ANR	861215	Statement	cfg	173:2:4732:4734	860849	5	True				
ANR	861216	Statement	->	173:5:4735:4736	860849	6	True				
ANR	861217	Statement	catch	173:7:4737:4741	860849	7	True				
ANR	861218	Statement	=	173:13:4743:4743	860849	8	True				
ANR	861219	ExpressionStatement	"ecalloc ( op_array -> last_try_catch , sizeof ( zend_code_block * ) )"	173:15:4745:4805	860849	9	True				
ANR	861220	CallExpression	"ecalloc ( op_array -> last_try_catch , sizeof ( zend_code_block * ) )"		860849	0					
ANR	861221	Callee	ecalloc		860849	0					
ANR	861222	Identifier	ecalloc		860849	0					
ANR	861223	ArgumentList	op_array -> last_try_catch		860849	1					
ANR	861224	Argument	op_array -> last_try_catch		860849	0					
ANR	861225	PtrMemberAccess	op_array -> last_try_catch		860849	0					
ANR	861226	Identifier	op_array		860849	0					
ANR	861227	Identifier	last_try_catch		860849	1					
ANR	861228	Argument	sizeof ( zend_code_block * )		860849	1					
ANR	861229	SizeofExpression	sizeof ( zend_code_block * )		860849	0					
ANR	861230	Sizeof	sizeof		860849	0					
ANR	861231	SizeofOperand	zend_code_block *		860849	1					
ANR	861232	ForStatement	for ( i = 0 ; i < op_array -> last_try_catch ; i ++ )		860849	10					
ANR	861233	ForInit	i = 0 ;	174:7:4814:4819	860849	0	True				
ANR	861234	AssignmentExpression	i = 0		860849	0		=			
ANR	861235	Identifier	i		860849	0					
ANR	861236	PrimaryExpression	0		860849	1					
ANR	861237	Condition	i < op_array -> last_try_catch	174:14:4821:4847	860849	1	True				
ANR	861238	RelationalExpression	i < op_array -> last_try_catch		860849	0		<			
ANR	861239	Identifier	i		860849	0					
ANR	861240	PtrMemberAccess	op_array -> last_try_catch		860849	1					
ANR	861241	Identifier	op_array		860849	0					
ANR	861242	Identifier	last_try_catch		860849	1					
ANR	861243	PostIncDecOperationExpression	i ++	174:43:4850:4852	860849	2	True				
ANR	861244	Identifier	i		860849	0					
ANR	861245	IncDec	++		860849	1					
ANR	861246	CompoundStatement		91:48:2566:2566	860849	3					
ANR	861247	Statement	cfg	175:3:4860:4862	860849	0	True				
ANR	861248	Statement	->	175:6:4863:4864	860849	1	True				
ANR	861249	TryStatement	try		860849	2					
ANR	861250	Statement	[		860849	0					
ANR	861251	Statement	i	175:12:4869:4869	860849	3	True				
ANR	861252	Statement	]	175:13:4870:4870	860849	4	True				
ANR	861253	Statement	=	175:15:4872:4872	860849	5	True				
ANR	861254	ExpressionStatement	& blocks [ op_array -> try_catch_array [ i ] . try_op ]	175:17:4874:4918	860849	6	True				
ANR	861255	UnaryOperationExpression	& blocks [ op_array -> try_catch_array [ i ] . try_op ]		860849	0					
ANR	861256	UnaryOperator	&		860849	0					
ANR	861257	ArrayIndexing	blocks [ op_array -> try_catch_array [ i ] . try_op ]		860849	1					
ANR	861258	Identifier	blocks		860849	0					
ANR	861259	MemberAccess	op_array -> try_catch_array [ i ] . try_op		860849	1					
ANR	861260	ArrayIndexing	op_array -> try_catch_array [ i ]		860849	0					
ANR	861261	PtrMemberAccess	op_array -> try_catch_array		860849	0					
ANR	861262	Identifier	op_array		860849	0					
ANR	861263	Identifier	try_catch_array		860849	1					
ANR	861264	Identifier	i		860849	1					
ANR	861265	Identifier	try_op		860849	1					
ANR	861266	Statement	cfg	176:3:4923:4925	860849	7	True				
ANR	861267	Statement	->	176:6:4926:4927	860849	8	True				
ANR	861268	Statement	catch	176:8:4928:4932	860849	9	True				
ANR	861269	Statement	[	176:13:4933:4933	860849	10	True				
ANR	861270	Statement	i	176:14:4934:4934	860849	11	True				
ANR	861271	Statement	]	176:15:4935:4935	860849	12	True				
ANR	861272	Statement	=	176:17:4937:4937	860849	13	True				
ANR	861273	ExpressionStatement	& blocks [ op_array -> try_catch_array [ i ] . catch_op ]	176:19:4939:4985	860849	14	True				
ANR	861274	UnaryOperationExpression	& blocks [ op_array -> try_catch_array [ i ] . catch_op ]		860849	0					
ANR	861275	UnaryOperator	&		860849	0					
ANR	861276	ArrayIndexing	blocks [ op_array -> try_catch_array [ i ] . catch_op ]		860849	1					
ANR	861277	Identifier	blocks		860849	0					
ANR	861278	MemberAccess	op_array -> try_catch_array [ i ] . catch_op		860849	1					
ANR	861279	ArrayIndexing	op_array -> try_catch_array [ i ]		860849	0					
ANR	861280	PtrMemberAccess	op_array -> try_catch_array		860849	0					
ANR	861281	Identifier	op_array		860849	0					
ANR	861282	Identifier	try_catch_array		860849	1					
ANR	861283	Identifier	i		860849	1					
ANR	861284	Identifier	catch_op		860849	1					
ANR	861285	ExpressionStatement	START_BLOCK_OP ( op_array -> try_catch_array [ i ] . try_op )	177:3:4990:5041	860849	15	True				
ANR	861286	CallExpression	START_BLOCK_OP ( op_array -> try_catch_array [ i ] . try_op )		860849	0					
ANR	861287	Callee	START_BLOCK_OP		860849	0					
ANR	861288	Identifier	START_BLOCK_OP		860849	0					
ANR	861289	ArgumentList	op_array -> try_catch_array [ i ] . try_op		860849	1					
ANR	861290	Argument	op_array -> try_catch_array [ i ] . try_op		860849	0					
ANR	861291	MemberAccess	op_array -> try_catch_array [ i ] . try_op		860849	0					
ANR	861292	ArrayIndexing	op_array -> try_catch_array [ i ]		860849	0					
ANR	861293	PtrMemberAccess	op_array -> try_catch_array		860849	0					
ANR	861294	Identifier	op_array		860849	0					
ANR	861295	Identifier	try_catch_array		860849	1					
ANR	861296	Identifier	i		860849	1					
ANR	861297	Identifier	try_op		860849	1					
ANR	861298	ExpressionStatement	START_BLOCK_OP ( op_array -> try_catch_array [ i ] . catch_op )	178:3:5046:5099	860849	16	True				
ANR	861299	CallExpression	START_BLOCK_OP ( op_array -> try_catch_array [ i ] . catch_op )		860849	0					
ANR	861300	Callee	START_BLOCK_OP		860849	0					
ANR	861301	Identifier	START_BLOCK_OP		860849	0					
ANR	861302	ArgumentList	op_array -> try_catch_array [ i ] . catch_op		860849	1					
ANR	861303	Argument	op_array -> try_catch_array [ i ] . catch_op		860849	0					
ANR	861304	MemberAccess	op_array -> try_catch_array [ i ] . catch_op		860849	0					
ANR	861305	ArrayIndexing	op_array -> try_catch_array [ i ]		860849	0					
ANR	861306	PtrMemberAccess	op_array -> try_catch_array		860849	0					
ANR	861307	Identifier	op_array		860849	0					
ANR	861308	Identifier	try_catch_array		860849	1					
ANR	861309	Identifier	i		860849	1					
ANR	861310	Identifier	catch_op		860849	1					
ANR	861311	ExpressionStatement	blocks [ op_array -> try_catch_array [ i ] . try_op ] . protected = 1	179:3:5104:5161	860849	17	True				
ANR	861312	AssignmentExpression	blocks [ op_array -> try_catch_array [ i ] . try_op ] . protected = 1		860849	0		=			
ANR	861313	MemberAccess	blocks [ op_array -> try_catch_array [ i ] . try_op ] . protected		860849	0					
ANR	861314	ArrayIndexing	blocks [ op_array -> try_catch_array [ i ] . try_op ]		860849	0					
ANR	861315	Identifier	blocks		860849	0					
ANR	861316	MemberAccess	op_array -> try_catch_array [ i ] . try_op		860849	1					
ANR	861317	ArrayIndexing	op_array -> try_catch_array [ i ]		860849	0					
ANR	861318	PtrMemberAccess	op_array -> try_catch_array		860849	0					
ANR	861319	Identifier	op_array		860849	0					
ANR	861320	Identifier	try_catch_array		860849	1					
ANR	861321	Identifier	i		860849	1					
ANR	861322	Identifier	try_op		860849	1					
ANR	861323	Identifier	protected		860849	1					
ANR	861324	PrimaryExpression	1		860849	1					
ANR	861325	IfStatement	if ( op_array -> last_brk_cont )		860849	11					
ANR	861326	Condition	op_array -> last_brk_cont	185:5:5341:5363	860849	0	True				
ANR	861327	PtrMemberAccess	op_array -> last_brk_cont		860849	0					
ANR	861328	Identifier	op_array		860849	0					
ANR	861329	Identifier	last_brk_cont		860849	1					
ANR	861330	CompoundStatement		103:2:3081:3089	860849	1					
ANR	861331	IdentifierDeclStatement	"int i , j ;"	186:2:5370:5378	860849	0	True				
ANR	861332	IdentifierDecl	i		860849	0					
ANR	861333	IdentifierDeclType	int		860849	0					
ANR	861334	Identifier	i		860849	1					
ANR	861335	IdentifierDecl	j		860849	1					
ANR	861336	IdentifierDeclType	int		860849	0					
ANR	861337	Identifier	j		860849	1					
ANR	861338	ExpressionStatement	j = 0	188:2:5383:5388	860849	1	True				
ANR	861339	AssignmentExpression	j = 0		860849	0		=			
ANR	861340	Identifier	j		860849	0					
ANR	861341	PrimaryExpression	0		860849	1					
ANR	861342	ForStatement	for ( i = 0 ; i < op_array -> last_brk_cont ; i ++ )		860849	2					
ANR	861343	ForInit	i = 0 ;	189:7:5397:5402	860849	0	True				
ANR	861344	AssignmentExpression	i = 0		860849	0		=			
ANR	861345	Identifier	i		860849	0					
ANR	861346	PrimaryExpression	0		860849	1					
ANR	861347	Condition	i < op_array -> last_brk_cont	189:14:5404:5429	860849	1	True				
ANR	861348	RelationalExpression	i < op_array -> last_brk_cont		860849	0		<			
ANR	861349	Identifier	i		860849	0					
ANR	861350	PtrMemberAccess	op_array -> last_brk_cont		860849	1					
ANR	861351	Identifier	op_array		860849	0					
ANR	861352	Identifier	last_brk_cont		860849	1					
ANR	861353	PostIncDecOperationExpression	i ++	189:42:5432:5434	860849	2	True				
ANR	861354	Identifier	i		860849	0					
ANR	861355	IncDec	++		860849	1					
ANR	861356	CompoundStatement		106:47:3148:3148	860849	3					
ANR	861357	IfStatement	if ( op_array -> brk_cont_array [ i ] . start >= 0 && ( op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode == ZEND_FREE || op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode == ZEND_SWITCH_FREE ) )		860849	0					
ANR	861358	Condition	op_array -> brk_cont_array [ i ] . start >= 0 && ( op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode == ZEND_FREE || op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode == ZEND_SWITCH_FREE )	190:7:5446:5655	860849	0	True				
ANR	861359	AndExpression	op_array -> brk_cont_array [ i ] . start >= 0 && ( op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode == ZEND_FREE || op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode == ZEND_SWITCH_FREE )		860849	0		&&			
ANR	861360	RelationalExpression	op_array -> brk_cont_array [ i ] . start >= 0		860849	0		>=			
ANR	861361	MemberAccess	op_array -> brk_cont_array [ i ] . start		860849	0					
ANR	861362	ArrayIndexing	op_array -> brk_cont_array [ i ]		860849	0					
ANR	861363	PtrMemberAccess	op_array -> brk_cont_array		860849	0					
ANR	861364	Identifier	op_array		860849	0					
ANR	861365	Identifier	brk_cont_array		860849	1					
ANR	861366	Identifier	i		860849	1					
ANR	861367	Identifier	start		860849	1					
ANR	861368	PrimaryExpression	0		860849	1					
ANR	861369	OrExpression	op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode == ZEND_FREE || op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode == ZEND_SWITCH_FREE		860849	1		||			
ANR	861370	EqualityExpression	op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode == ZEND_FREE		860849	0		==			
ANR	861371	MemberAccess	op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode		860849	0					
ANR	861372	ArrayIndexing	op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ]		860849	0					
ANR	861373	PtrMemberAccess	op_array -> opcodes		860849	0					
ANR	861374	Identifier	op_array		860849	0					
ANR	861375	Identifier	opcodes		860849	1					
ANR	861376	MemberAccess	op_array -> brk_cont_array [ i ] . brk		860849	1					
ANR	861377	ArrayIndexing	op_array -> brk_cont_array [ i ]		860849	0					
ANR	861378	PtrMemberAccess	op_array -> brk_cont_array		860849	0					
ANR	861379	Identifier	op_array		860849	0					
ANR	861380	Identifier	brk_cont_array		860849	1					
ANR	861381	Identifier	i		860849	1					
ANR	861382	Identifier	brk		860849	1					
ANR	861383	Identifier	opcode		860849	1					
ANR	861384	Identifier	ZEND_FREE		860849	1					
ANR	861385	EqualityExpression	op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode == ZEND_SWITCH_FREE		860849	1		==			
ANR	861386	MemberAccess	op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode		860849	0					
ANR	861387	ArrayIndexing	op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ]		860849	0					
ANR	861388	PtrMemberAccess	op_array -> opcodes		860849	0					
ANR	861389	Identifier	op_array		860849	0					
ANR	861390	Identifier	opcodes		860849	1					
ANR	861391	MemberAccess	op_array -> brk_cont_array [ i ] . brk		860849	1					
ANR	861392	ArrayIndexing	op_array -> brk_cont_array [ i ]		860849	0					
ANR	861393	PtrMemberAccess	op_array -> brk_cont_array		860849	0					
ANR	861394	Identifier	op_array		860849	0					
ANR	861395	Identifier	brk_cont_array		860849	1					
ANR	861396	Identifier	i		860849	1					
ANR	861397	Identifier	brk		860849	1					
ANR	861398	Identifier	opcode		860849	1					
ANR	861399	Identifier	ZEND_SWITCH_FREE		860849	1					
ANR	861400	CompoundStatement		110:4:3375:3422	860849	1					
ANR	861401	IdentifierDeclStatement	int parent = op_array -> brk_cont_array [ i ] . parent ;	193:4:5664:5711	860849	0	True				
ANR	861402	IdentifierDecl	parent = op_array -> brk_cont_array [ i ] . parent		860849	0					
ANR	861403	IdentifierDeclType	int		860849	0					
ANR	861404	Identifier	parent		860849	1					
ANR	861405	AssignmentExpression	parent = op_array -> brk_cont_array [ i ] . parent		860849	2		=			
ANR	861406	Identifier	parent		860849	0					
ANR	861407	MemberAccess	op_array -> brk_cont_array [ i ] . parent		860849	1					
ANR	861408	ArrayIndexing	op_array -> brk_cont_array [ i ]		860849	0					
ANR	861409	PtrMemberAccess	op_array -> brk_cont_array		860849	0					
ANR	861410	Identifier	op_array		860849	0					
ANR	861411	Identifier	brk_cont_array		860849	1					
ANR	861412	Identifier	i		860849	1					
ANR	861413	Identifier	parent		860849	1					
ANR	861414	WhileStatement	while ( parent >= 0 && op_array -> brk_cont_array [ parent ] . start < 0 && op_array -> opcodes [ op_array -> brk_cont_array [ parent ] . brk ] . opcode != ZEND_FREE && op_array -> opcodes [ op_array -> brk_cont_array [ parent ] . brk ] . opcode != ZEND_SWITCH_FREE )		860849	1					
ANR	861415	Condition	parent >= 0 && op_array -> brk_cont_array [ parent ] . start < 0 && op_array -> opcodes [ op_array -> brk_cont_array [ parent ] . brk ] . opcode != ZEND_FREE && op_array -> opcodes [ op_array -> brk_cont_array [ parent ] . brk ] . opcode != ZEND_SWITCH_FREE	195:11:5725:5979	860849	0	True				
ANR	861416	AndExpression	parent >= 0 && op_array -> brk_cont_array [ parent ] . start < 0 && op_array -> opcodes [ op_array -> brk_cont_array [ parent ] . brk ] . opcode != ZEND_FREE && op_array -> opcodes [ op_array -> brk_cont_array [ parent ] . brk ] . opcode != ZEND_SWITCH_FREE		860849	0		&&			
ANR	861417	RelationalExpression	parent >= 0		860849	0		>=			
ANR	861418	Identifier	parent		860849	0					
ANR	861419	PrimaryExpression	0		860849	1					
ANR	861420	AndExpression	op_array -> brk_cont_array [ parent ] . start < 0 && op_array -> opcodes [ op_array -> brk_cont_array [ parent ] . brk ] . opcode != ZEND_FREE && op_array -> opcodes [ op_array -> brk_cont_array [ parent ] . brk ] . opcode != ZEND_SWITCH_FREE		860849	1		&&			
ANR	861421	RelationalExpression	op_array -> brk_cont_array [ parent ] . start < 0		860849	0		<			
ANR	861422	MemberAccess	op_array -> brk_cont_array [ parent ] . start		860849	0					
ANR	861423	ArrayIndexing	op_array -> brk_cont_array [ parent ]		860849	0					
ANR	861424	PtrMemberAccess	op_array -> brk_cont_array		860849	0					
ANR	861425	Identifier	op_array		860849	0					
ANR	861426	Identifier	brk_cont_array		860849	1					
ANR	861427	Identifier	parent		860849	1					
ANR	861428	Identifier	start		860849	1					
ANR	861429	PrimaryExpression	0		860849	1					
ANR	861430	AndExpression	op_array -> opcodes [ op_array -> brk_cont_array [ parent ] . brk ] . opcode != ZEND_FREE && op_array -> opcodes [ op_array -> brk_cont_array [ parent ] . brk ] . opcode != ZEND_SWITCH_FREE		860849	1		&&			
ANR	861431	EqualityExpression	op_array -> opcodes [ op_array -> brk_cont_array [ parent ] . brk ] . opcode != ZEND_FREE		860849	0		!=			
ANR	861432	MemberAccess	op_array -> opcodes [ op_array -> brk_cont_array [ parent ] . brk ] . opcode		860849	0					
ANR	861433	ArrayIndexing	op_array -> opcodes [ op_array -> brk_cont_array [ parent ] . brk ]		860849	0					
ANR	861434	PtrMemberAccess	op_array -> opcodes		860849	0					
ANR	861435	Identifier	op_array		860849	0					
ANR	861436	Identifier	opcodes		860849	1					
ANR	861437	MemberAccess	op_array -> brk_cont_array [ parent ] . brk		860849	1					
ANR	861438	ArrayIndexing	op_array -> brk_cont_array [ parent ]		860849	0					
ANR	861439	PtrMemberAccess	op_array -> brk_cont_array		860849	0					
ANR	861440	Identifier	op_array		860849	0					
ANR	861441	Identifier	brk_cont_array		860849	1					
ANR	861442	Identifier	parent		860849	1					
ANR	861443	Identifier	brk		860849	1					
ANR	861444	Identifier	opcode		860849	1					
ANR	861445	Identifier	ZEND_FREE		860849	1					
ANR	861446	EqualityExpression	op_array -> opcodes [ op_array -> brk_cont_array [ parent ] . brk ] . opcode != ZEND_SWITCH_FREE		860849	1		!=			
ANR	861447	MemberAccess	op_array -> opcodes [ op_array -> brk_cont_array [ parent ] . brk ] . opcode		860849	0					
ANR	861448	ArrayIndexing	op_array -> opcodes [ op_array -> brk_cont_array [ parent ] . brk ]		860849	0					
ANR	861449	PtrMemberAccess	op_array -> opcodes		860849	0					
ANR	861450	Identifier	op_array		860849	0					
ANR	861451	Identifier	opcodes		860849	1					
ANR	861452	MemberAccess	op_array -> brk_cont_array [ parent ] . brk		860849	1					
ANR	861453	ArrayIndexing	op_array -> brk_cont_array [ parent ]		860849	0					
ANR	861454	PtrMemberAccess	op_array -> brk_cont_array		860849	0					
ANR	861455	Identifier	op_array		860849	0					
ANR	861456	Identifier	brk_cont_array		860849	1					
ANR	861457	Identifier	parent		860849	1					
ANR	861458	Identifier	brk		860849	1					
ANR	861459	Identifier	opcode		860849	1					
ANR	861460	Identifier	ZEND_SWITCH_FREE		860849	1					
ANR	861461	CompoundStatement		115:95:3693:3693	860849	1					
ANR	861462	ExpressionStatement	parent = op_array -> brk_cont_array [ parent ] . parent	199:5:5989:6037	860849	0	True				
ANR	861463	AssignmentExpression	parent = op_array -> brk_cont_array [ parent ] . parent		860849	0		=			
ANR	861464	Identifier	parent		860849	0					
ANR	861465	MemberAccess	op_array -> brk_cont_array [ parent ] . parent		860849	1					
ANR	861466	ArrayIndexing	op_array -> brk_cont_array [ parent ]		860849	0					
ANR	861467	PtrMemberAccess	op_array -> brk_cont_array		860849	0					
ANR	861468	Identifier	op_array		860849	0					
ANR	861469	Identifier	brk_cont_array		860849	1					
ANR	861470	Identifier	parent		860849	1					
ANR	861471	Identifier	parent		860849	1					
ANR	861472	ExpressionStatement	op_array -> brk_cont_array [ i ] . parent = parent	201:4:6049:6092	860849	2	True				
ANR	861473	AssignmentExpression	op_array -> brk_cont_array [ i ] . parent = parent		860849	0		=			
ANR	861474	MemberAccess	op_array -> brk_cont_array [ i ] . parent		860849	0					
ANR	861475	ArrayIndexing	op_array -> brk_cont_array [ i ]		860849	0					
ANR	861476	PtrMemberAccess	op_array -> brk_cont_array		860849	0					
ANR	861477	Identifier	op_array		860849	0					
ANR	861478	Identifier	brk_cont_array		860849	1					
ANR	861479	Identifier	i		860849	1					
ANR	861480	Identifier	parent		860849	1					
ANR	861481	Identifier	parent		860849	1					
ANR	861482	ExpressionStatement	j ++	202:4:6098:6101	860849	3	True				
ANR	861483	PostIncDecOperationExpression	j ++		860849	0					
ANR	861484	Identifier	j		860849	0					
ANR	861485	IncDec	++		860849	1					
ANR	861486	IfStatement	if ( j )		860849	3					
ANR	861487	Condition	j	205:6:6118:6118	860849	0	True				
ANR	861488	Identifier	j		860849	0					
ANR	861489	CompoundStatement		122:9:3832:3832	860849	1					
ANR	861490	ExpressionStatement	"cfg -> loop_start = ecalloc ( op_array -> last_brk_cont , sizeof ( zend_code_block * ) )"	206:3:6126:6203	860849	0	True				
ANR	861491	AssignmentExpression	"cfg -> loop_start = ecalloc ( op_array -> last_brk_cont , sizeof ( zend_code_block * ) )"		860849	0		=			
ANR	861492	PtrMemberAccess	cfg -> loop_start		860849	0					
ANR	861493	Identifier	cfg		860849	0					
ANR	861494	Identifier	loop_start		860849	1					
ANR	861495	CallExpression	"ecalloc ( op_array -> last_brk_cont , sizeof ( zend_code_block * ) )"		860849	1					
ANR	861496	Callee	ecalloc		860849	0					
ANR	861497	Identifier	ecalloc		860849	0					
ANR	861498	ArgumentList	op_array -> last_brk_cont		860849	1					
ANR	861499	Argument	op_array -> last_brk_cont		860849	0					
ANR	861500	PtrMemberAccess	op_array -> last_brk_cont		860849	0					
ANR	861501	Identifier	op_array		860849	0					
ANR	861502	Identifier	last_brk_cont		860849	1					
ANR	861503	Argument	sizeof ( zend_code_block * )		860849	1					
ANR	861504	SizeofExpression	sizeof ( zend_code_block * )		860849	0					
ANR	861505	Sizeof	sizeof		860849	0					
ANR	861506	SizeofOperand	zend_code_block *		860849	1					
ANR	861507	ExpressionStatement	"cfg -> loop_cont = ecalloc ( op_array -> last_brk_cont , sizeof ( zend_code_block * ) )"	207:3:6208:6285	860849	1	True				
ANR	861508	AssignmentExpression	"cfg -> loop_cont = ecalloc ( op_array -> last_brk_cont , sizeof ( zend_code_block * ) )"		860849	0		=			
ANR	861509	PtrMemberAccess	cfg -> loop_cont		860849	0					
ANR	861510	Identifier	cfg		860849	0					
ANR	861511	Identifier	loop_cont		860849	1					
ANR	861512	CallExpression	"ecalloc ( op_array -> last_brk_cont , sizeof ( zend_code_block * ) )"		860849	1					
ANR	861513	Callee	ecalloc		860849	0					
ANR	861514	Identifier	ecalloc		860849	0					
ANR	861515	ArgumentList	op_array -> last_brk_cont		860849	1					
ANR	861516	Argument	op_array -> last_brk_cont		860849	0					
ANR	861517	PtrMemberAccess	op_array -> last_brk_cont		860849	0					
ANR	861518	Identifier	op_array		860849	0					
ANR	861519	Identifier	last_brk_cont		860849	1					
ANR	861520	Argument	sizeof ( zend_code_block * )		860849	1					
ANR	861521	SizeofExpression	sizeof ( zend_code_block * )		860849	0					
ANR	861522	Sizeof	sizeof		860849	0					
ANR	861523	SizeofOperand	zend_code_block *		860849	1					
ANR	861524	ExpressionStatement	"cfg -> loop_brk = ecalloc ( op_array -> last_brk_cont , sizeof ( zend_code_block * ) )"	208:3:6290:6367	860849	2	True				
ANR	861525	AssignmentExpression	"cfg -> loop_brk = ecalloc ( op_array -> last_brk_cont , sizeof ( zend_code_block * ) )"		860849	0		=			
ANR	861526	PtrMemberAccess	cfg -> loop_brk		860849	0					
ANR	861527	Identifier	cfg		860849	0					
ANR	861528	Identifier	loop_brk		860849	1					
ANR	861529	CallExpression	"ecalloc ( op_array -> last_brk_cont , sizeof ( zend_code_block * ) )"		860849	1					
ANR	861530	Callee	ecalloc		860849	0					
ANR	861531	Identifier	ecalloc		860849	0					
ANR	861532	ArgumentList	op_array -> last_brk_cont		860849	1					
ANR	861533	Argument	op_array -> last_brk_cont		860849	0					
ANR	861534	PtrMemberAccess	op_array -> last_brk_cont		860849	0					
ANR	861535	Identifier	op_array		860849	0					
ANR	861536	Identifier	last_brk_cont		860849	1					
ANR	861537	Argument	sizeof ( zend_code_block * )		860849	1					
ANR	861538	SizeofExpression	sizeof ( zend_code_block * )		860849	0					
ANR	861539	Sizeof	sizeof		860849	0					
ANR	861540	SizeofOperand	zend_code_block *		860849	1					
ANR	861541	ExpressionStatement	j = 0	209:3:6372:6377	860849	3	True				
ANR	861542	AssignmentExpression	j = 0		860849	0		=			
ANR	861543	Identifier	j		860849	0					
ANR	861544	PrimaryExpression	0		860849	1					
ANR	861545	ForStatement	for ( i = 0 ; i < op_array -> last_brk_cont ; i ++ )		860849	4					
ANR	861546	ForInit	i = 0 ;	210:8:6387:6392	860849	0	True				
ANR	861547	AssignmentExpression	i = 0		860849	0		=			
ANR	861548	Identifier	i		860849	0					
ANR	861549	PrimaryExpression	0		860849	1					
ANR	861550	Condition	i < op_array -> last_brk_cont	210:15:6394:6419	860849	1	True				
ANR	861551	RelationalExpression	i < op_array -> last_brk_cont		860849	0		<			
ANR	861552	Identifier	i		860849	0					
ANR	861553	PtrMemberAccess	op_array -> last_brk_cont		860849	1					
ANR	861554	Identifier	op_array		860849	0					
ANR	861555	Identifier	last_brk_cont		860849	1					
ANR	861556	PostIncDecOperationExpression	i ++	210:43:6422:6424	860849	2	True				
ANR	861557	Identifier	i		860849	0					
ANR	861558	IncDec	++		860849	1					
ANR	861559	CompoundStatement		127:48:4138:4138	860849	3					
ANR	861560	IfStatement	if ( op_array -> brk_cont_array [ i ] . start >= 0 && ( op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode == ZEND_FREE || op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode == ZEND_SWITCH_FREE ) )		860849	0					
ANR	861561	Condition	op_array -> brk_cont_array [ i ] . start >= 0 && ( op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode == ZEND_FREE || op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode == ZEND_SWITCH_FREE )	211:8:6437:6648	860849	0	True				
ANR	861562	AndExpression	op_array -> brk_cont_array [ i ] . start >= 0 && ( op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode == ZEND_FREE || op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode == ZEND_SWITCH_FREE )		860849	0		&&			
ANR	861563	RelationalExpression	op_array -> brk_cont_array [ i ] . start >= 0		860849	0		>=			
ANR	861564	MemberAccess	op_array -> brk_cont_array [ i ] . start		860849	0					
ANR	861565	ArrayIndexing	op_array -> brk_cont_array [ i ]		860849	0					
ANR	861566	PtrMemberAccess	op_array -> brk_cont_array		860849	0					
ANR	861567	Identifier	op_array		860849	0					
ANR	861568	Identifier	brk_cont_array		860849	1					
ANR	861569	Identifier	i		860849	1					
ANR	861570	Identifier	start		860849	1					
ANR	861571	PrimaryExpression	0		860849	1					
ANR	861572	OrExpression	op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode == ZEND_FREE || op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode == ZEND_SWITCH_FREE		860849	1		||			
ANR	861573	EqualityExpression	op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode == ZEND_FREE		860849	0		==			
ANR	861574	MemberAccess	op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode		860849	0					
ANR	861575	ArrayIndexing	op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ]		860849	0					
ANR	861576	PtrMemberAccess	op_array -> opcodes		860849	0					
ANR	861577	Identifier	op_array		860849	0					
ANR	861578	Identifier	opcodes		860849	1					
ANR	861579	MemberAccess	op_array -> brk_cont_array [ i ] . brk		860849	1					
ANR	861580	ArrayIndexing	op_array -> brk_cont_array [ i ]		860849	0					
ANR	861581	PtrMemberAccess	op_array -> brk_cont_array		860849	0					
ANR	861582	Identifier	op_array		860849	0					
ANR	861583	Identifier	brk_cont_array		860849	1					
ANR	861584	Identifier	i		860849	1					
ANR	861585	Identifier	brk		860849	1					
ANR	861586	Identifier	opcode		860849	1					
ANR	861587	Identifier	ZEND_FREE		860849	1					
ANR	861588	EqualityExpression	op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode == ZEND_SWITCH_FREE		860849	1		==			
ANR	861589	MemberAccess	op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode		860849	0					
ANR	861590	ArrayIndexing	op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ]		860849	0					
ANR	861591	PtrMemberAccess	op_array -> opcodes		860849	0					
ANR	861592	Identifier	op_array		860849	0					
ANR	861593	Identifier	opcodes		860849	1					
ANR	861594	MemberAccess	op_array -> brk_cont_array [ i ] . brk		860849	1					
ANR	861595	ArrayIndexing	op_array -> brk_cont_array [ i ]		860849	0					
ANR	861596	PtrMemberAccess	op_array -> brk_cont_array		860849	0					
ANR	861597	Identifier	op_array		860849	0					
ANR	861598	Identifier	brk_cont_array		860849	1					
ANR	861599	Identifier	i		860849	1					
ANR	861600	Identifier	brk		860849	1					
ANR	861601	Identifier	opcode		860849	1					
ANR	861602	Identifier	ZEND_SWITCH_FREE		860849	1					
ANR	861603	CompoundStatement		130:89:4362:4362	860849	1					
ANR	861604	IfStatement	if ( i != j )		860849	0					
ANR	861605	Condition	i != j	214:9:6662:6667	860849	0	True				
ANR	861606	EqualityExpression	i != j		860849	0		!=			
ANR	861607	Identifier	i		860849	0					
ANR	861608	Identifier	j		860849	1					
ANR	861609	CompoundStatement		131:17:4381:4381	860849	1					
ANR	861610	ExpressionStatement	op_array -> brk_cont_array [ j ] = op_array -> brk_cont_array [ i ]	215:6:6678:6735	860849	0	True				
ANR	861611	AssignmentExpression	op_array -> brk_cont_array [ j ] = op_array -> brk_cont_array [ i ]		860849	0		=			
ANR	861612	ArrayIndexing	op_array -> brk_cont_array [ j ]		860849	0					
ANR	861613	PtrMemberAccess	op_array -> brk_cont_array		860849	0					
ANR	861614	Identifier	op_array		860849	0					
ANR	861615	Identifier	brk_cont_array		860849	1					
ANR	861616	Identifier	j		860849	1					
ANR	861617	ArrayIndexing	op_array -> brk_cont_array [ i ]		860849	1					
ANR	861618	PtrMemberAccess	op_array -> brk_cont_array		860849	0					
ANR	861619	Identifier	op_array		860849	0					
ANR	861620	Identifier	brk_cont_array		860849	1					
ANR	861621	Identifier	i		860849	1					
ANR	861622	ExpressionStatement	cfg -> loop_start [ j ] = & blocks [ op_array -> brk_cont_array [ j ] . start ]	217:5:6749:6812	860849	1	True				
ANR	861623	AssignmentExpression	cfg -> loop_start [ j ] = & blocks [ op_array -> brk_cont_array [ j ] . start ]		860849	0		=			
ANR	861624	ArrayIndexing	cfg -> loop_start [ j ]		860849	0					
ANR	861625	PtrMemberAccess	cfg -> loop_start		860849	0					
ANR	861626	Identifier	cfg		860849	0					
ANR	861627	Identifier	loop_start		860849	1					
ANR	861628	Identifier	j		860849	1					
ANR	861629	UnaryOperationExpression	& blocks [ op_array -> brk_cont_array [ j ] . start ]		860849	1					
ANR	861630	UnaryOperator	&		860849	0					
ANR	861631	ArrayIndexing	blocks [ op_array -> brk_cont_array [ j ] . start ]		860849	1					
ANR	861632	Identifier	blocks		860849	0					
ANR	861633	MemberAccess	op_array -> brk_cont_array [ j ] . start		860849	1					
ANR	861634	ArrayIndexing	op_array -> brk_cont_array [ j ]		860849	0					
ANR	861635	PtrMemberAccess	op_array -> brk_cont_array		860849	0					
ANR	861636	Identifier	op_array		860849	0					
ANR	861637	Identifier	brk_cont_array		860849	1					
ANR	861638	Identifier	j		860849	1					
ANR	861639	Identifier	start		860849	1					
ANR	861640	ExpressionStatement	cfg -> loop_cont [ j ] = & blocks [ op_array -> brk_cont_array [ j ] . cont ]	218:5:6819:6881	860849	2	True				
ANR	861641	AssignmentExpression	cfg -> loop_cont [ j ] = & blocks [ op_array -> brk_cont_array [ j ] . cont ]		860849	0		=			
ANR	861642	ArrayIndexing	cfg -> loop_cont [ j ]		860849	0					
ANR	861643	PtrMemberAccess	cfg -> loop_cont		860849	0					
ANR	861644	Identifier	cfg		860849	0					
ANR	861645	Identifier	loop_cont		860849	1					
ANR	861646	Identifier	j		860849	1					
ANR	861647	UnaryOperationExpression	& blocks [ op_array -> brk_cont_array [ j ] . cont ]		860849	1					
ANR	861648	UnaryOperator	&		860849	0					
ANR	861649	ArrayIndexing	blocks [ op_array -> brk_cont_array [ j ] . cont ]		860849	1					
ANR	861650	Identifier	blocks		860849	0					
ANR	861651	MemberAccess	op_array -> brk_cont_array [ j ] . cont		860849	1					
ANR	861652	ArrayIndexing	op_array -> brk_cont_array [ j ]		860849	0					
ANR	861653	PtrMemberAccess	op_array -> brk_cont_array		860849	0					
ANR	861654	Identifier	op_array		860849	0					
ANR	861655	Identifier	brk_cont_array		860849	1					
ANR	861656	Identifier	j		860849	1					
ANR	861657	Identifier	cont		860849	1					
ANR	861658	ExpressionStatement	cfg -> loop_brk [ j ] = & blocks [ op_array -> brk_cont_array [ j ] . brk ]	219:5:6888:6949	860849	3	True				
ANR	861659	AssignmentExpression	cfg -> loop_brk [ j ] = & blocks [ op_array -> brk_cont_array [ j ] . brk ]		860849	0		=			
ANR	861660	ArrayIndexing	cfg -> loop_brk [ j ]		860849	0					
ANR	861661	PtrMemberAccess	cfg -> loop_brk		860849	0					
ANR	861662	Identifier	cfg		860849	0					
ANR	861663	Identifier	loop_brk		860849	1					
ANR	861664	Identifier	j		860849	1					
ANR	861665	UnaryOperationExpression	& blocks [ op_array -> brk_cont_array [ j ] . brk ]		860849	1					
ANR	861666	UnaryOperator	&		860849	0					
ANR	861667	ArrayIndexing	blocks [ op_array -> brk_cont_array [ j ] . brk ]		860849	1					
ANR	861668	Identifier	blocks		860849	0					
ANR	861669	MemberAccess	op_array -> brk_cont_array [ j ] . brk		860849	1					
ANR	861670	ArrayIndexing	op_array -> brk_cont_array [ j ]		860849	0					
ANR	861671	PtrMemberAccess	op_array -> brk_cont_array		860849	0					
ANR	861672	Identifier	op_array		860849	0					
ANR	861673	Identifier	brk_cont_array		860849	1					
ANR	861674	Identifier	j		860849	1					
ANR	861675	Identifier	brk		860849	1					
ANR	861676	ExpressionStatement	START_BLOCK_OP ( op_array -> brk_cont_array [ j ] . start )	220:5:6956:7005	860849	4	True				
ANR	861677	CallExpression	START_BLOCK_OP ( op_array -> brk_cont_array [ j ] . start )		860849	0					
ANR	861678	Callee	START_BLOCK_OP		860849	0					
ANR	861679	Identifier	START_BLOCK_OP		860849	0					
ANR	861680	ArgumentList	op_array -> brk_cont_array [ j ] . start		860849	1					
ANR	861681	Argument	op_array -> brk_cont_array [ j ] . start		860849	0					
ANR	861682	MemberAccess	op_array -> brk_cont_array [ j ] . start		860849	0					
ANR	861683	ArrayIndexing	op_array -> brk_cont_array [ j ]		860849	0					
ANR	861684	PtrMemberAccess	op_array -> brk_cont_array		860849	0					
ANR	861685	Identifier	op_array		860849	0					
ANR	861686	Identifier	brk_cont_array		860849	1					
ANR	861687	Identifier	j		860849	1					
ANR	861688	Identifier	start		860849	1					
ANR	861689	ExpressionStatement	START_BLOCK_OP ( op_array -> brk_cont_array [ j ] . cont )	221:5:7012:7060	860849	5	True				
ANR	861690	CallExpression	START_BLOCK_OP ( op_array -> brk_cont_array [ j ] . cont )		860849	0					
ANR	861691	Callee	START_BLOCK_OP		860849	0					
ANR	861692	Identifier	START_BLOCK_OP		860849	0					
ANR	861693	ArgumentList	op_array -> brk_cont_array [ j ] . cont		860849	1					
ANR	861694	Argument	op_array -> brk_cont_array [ j ] . cont		860849	0					
ANR	861695	MemberAccess	op_array -> brk_cont_array [ j ] . cont		860849	0					
ANR	861696	ArrayIndexing	op_array -> brk_cont_array [ j ]		860849	0					
ANR	861697	PtrMemberAccess	op_array -> brk_cont_array		860849	0					
ANR	861698	Identifier	op_array		860849	0					
ANR	861699	Identifier	brk_cont_array		860849	1					
ANR	861700	Identifier	j		860849	1					
ANR	861701	Identifier	cont		860849	1					
ANR	861702	ExpressionStatement	START_BLOCK_OP ( op_array -> brk_cont_array [ j ] . brk )	222:5:7067:7114	860849	6	True				
ANR	861703	CallExpression	START_BLOCK_OP ( op_array -> brk_cont_array [ j ] . brk )		860849	0					
ANR	861704	Callee	START_BLOCK_OP		860849	0					
ANR	861705	Identifier	START_BLOCK_OP		860849	0					
ANR	861706	ArgumentList	op_array -> brk_cont_array [ j ] . brk		860849	1					
ANR	861707	Argument	op_array -> brk_cont_array [ j ] . brk		860849	0					
ANR	861708	MemberAccess	op_array -> brk_cont_array [ j ] . brk		860849	0					
ANR	861709	ArrayIndexing	op_array -> brk_cont_array [ j ]		860849	0					
ANR	861710	PtrMemberAccess	op_array -> brk_cont_array		860849	0					
ANR	861711	Identifier	op_array		860849	0					
ANR	861712	Identifier	brk_cont_array		860849	1					
ANR	861713	Identifier	j		860849	1					
ANR	861714	Identifier	brk		860849	1					
ANR	861715	ExpressionStatement	blocks [ op_array -> brk_cont_array [ j ] . start ] . protected = 1	223:5:7121:7176	860849	7	True				
ANR	861716	AssignmentExpression	blocks [ op_array -> brk_cont_array [ j ] . start ] . protected = 1		860849	0		=			
ANR	861717	MemberAccess	blocks [ op_array -> brk_cont_array [ j ] . start ] . protected		860849	0					
ANR	861718	ArrayIndexing	blocks [ op_array -> brk_cont_array [ j ] . start ]		860849	0					
ANR	861719	Identifier	blocks		860849	0					
ANR	861720	MemberAccess	op_array -> brk_cont_array [ j ] . start		860849	1					
ANR	861721	ArrayIndexing	op_array -> brk_cont_array [ j ]		860849	0					
ANR	861722	PtrMemberAccess	op_array -> brk_cont_array		860849	0					
ANR	861723	Identifier	op_array		860849	0					
ANR	861724	Identifier	brk_cont_array		860849	1					
ANR	861725	Identifier	j		860849	1					
ANR	861726	Identifier	start		860849	1					
ANR	861727	Identifier	protected		860849	1					
ANR	861728	PrimaryExpression	1		860849	1					
ANR	861729	ExpressionStatement	blocks [ op_array -> brk_cont_array [ j ] . brk ] . protected = 1	224:5:7183:7236	860849	8	True				
ANR	861730	AssignmentExpression	blocks [ op_array -> brk_cont_array [ j ] . brk ] . protected = 1		860849	0		=			
ANR	861731	MemberAccess	blocks [ op_array -> brk_cont_array [ j ] . brk ] . protected		860849	0					
ANR	861732	ArrayIndexing	blocks [ op_array -> brk_cont_array [ j ] . brk ]		860849	0					
ANR	861733	Identifier	blocks		860849	0					
ANR	861734	MemberAccess	op_array -> brk_cont_array [ j ] . brk		860849	1					
ANR	861735	ArrayIndexing	op_array -> brk_cont_array [ j ]		860849	0					
ANR	861736	PtrMemberAccess	op_array -> brk_cont_array		860849	0					
ANR	861737	Identifier	op_array		860849	0					
ANR	861738	Identifier	brk_cont_array		860849	1					
ANR	861739	Identifier	j		860849	1					
ANR	861740	Identifier	brk		860849	1					
ANR	861741	Identifier	protected		860849	1					
ANR	861742	PrimaryExpression	1		860849	1					
ANR	861743	ExpressionStatement	j ++	225:5:7243:7246	860849	9	True				
ANR	861744	PostIncDecOperationExpression	j ++		860849	0					
ANR	861745	Identifier	j		860849	0					
ANR	861746	IncDec	++		860849	1					
ANR	861747	ExpressionStatement	op_array -> last_brk_cont = j	228:3:7262:7289	860849	5	True				
ANR	861748	AssignmentExpression	op_array -> last_brk_cont = j		860849	0		=			
ANR	861749	PtrMemberAccess	op_array -> last_brk_cont		860849	0					
ANR	861750	Identifier	op_array		860849	0					
ANR	861751	Identifier	last_brk_cont		860849	1					
ANR	861752	Identifier	j		860849	1					
ANR	861753	ElseStatement	else		860849	0					
ANR	861754	CompoundStatement		146:9:5011:5011	860849	0					
ANR	861755	ExpressionStatement	efree ( op_array -> brk_cont_array )	230:3:7305:7336	860849	0	True				
ANR	861756	CallExpression	efree ( op_array -> brk_cont_array )		860849	0					
ANR	861757	Callee	efree		860849	0					
ANR	861758	Identifier	efree		860849	0					
ANR	861759	ArgumentList	op_array -> brk_cont_array		860849	1					
ANR	861760	Argument	op_array -> brk_cont_array		860849	0					
ANR	861761	PtrMemberAccess	op_array -> brk_cont_array		860849	0					
ANR	861762	Identifier	op_array		860849	0					
ANR	861763	Identifier	brk_cont_array		860849	1					
ANR	861764	ExpressionStatement	op_array -> brk_cont_array = NULL	231:3:7341:7372	860849	1	True				
ANR	861765	AssignmentExpression	op_array -> brk_cont_array = NULL		860849	0		=			
ANR	861766	PtrMemberAccess	op_array -> brk_cont_array		860849	0					
ANR	861767	Identifier	op_array		860849	0					
ANR	861768	Identifier	brk_cont_array		860849	1					
ANR	861769	Identifier	NULL		860849	1					
ANR	861770	ExpressionStatement	op_array -> last_brk_cont = 0	232:3:7377:7404	860849	2	True				
ANR	861771	AssignmentExpression	op_array -> last_brk_cont = 0		860849	0		=			
ANR	861772	PtrMemberAccess	op_array -> last_brk_cont		860849	0					
ANR	861773	Identifier	op_array		860849	0					
ANR	861774	Identifier	last_brk_cont		860849	1					
ANR	861775	PrimaryExpression	0		860849	1					
ANR	861776	ExpressionStatement	cur_block = blocks	237:1:7453:7471	860849	12	True				
ANR	861777	AssignmentExpression	cur_block = blocks		860849	0		=			
ANR	861778	Identifier	cur_block		860849	0					
ANR	861779	Identifier	blocks		860849	1					
ANR	861780	ForStatement	for ( opno = 1 ; opno < op_array -> last ; opno ++ )		860849	13					
ANR	861781	ForInit	opno = 1 ;	238:6:7479:7487	860849	0	True				
ANR	861782	AssignmentExpression	opno = 1		860849	0		=			
ANR	861783	Identifier	opno		860849	0					
ANR	861784	PrimaryExpression	1		860849	1					
ANR	861785	Condition	opno < op_array -> last	238:16:7489:7509	860849	1	True				
ANR	861786	RelationalExpression	opno < op_array -> last		860849	0		<			
ANR	861787	Identifier	opno		860849	0					
ANR	861788	PtrMemberAccess	op_array -> last		860849	1					
ANR	861789	Identifier	op_array		860849	0					
ANR	861790	Identifier	last		860849	1					
ANR	861791	PostIncDecOperationExpression	opno ++	238:39:7512:7517	860849	2	True				
ANR	861792	Identifier	opno		860849	0					
ANR	861793	IncDec	++		860849	1					
ANR	861794	CompoundStatement		155:47:5231:5231	860849	3					
ANR	861795	IfStatement	if ( blocks [ opno ] . start_opline )		860849	0					
ANR	861796	Condition	blocks [ opno ] . start_opline	239:6:7528:7552	860849	0	True				
ANR	861797	MemberAccess	blocks [ opno ] . start_opline		860849	0					
ANR	861798	ArrayIndexing	blocks [ opno ]		860849	0					
ANR	861799	Identifier	blocks		860849	0					
ANR	861800	Identifier	opno		860849	1					
ANR	861801	Identifier	start_opline		860849	1					
ANR	861802	CompoundStatement		156:33:5266:5266	860849	1					
ANR	861803	ExpressionStatement	cur_block -> len = blocks [ opno ] . start_opline - cur_block -> start_opline	241:3:7591:7659	860849	0	True				
ANR	861804	AssignmentExpression	cur_block -> len = blocks [ opno ] . start_opline - cur_block -> start_opline		860849	0		=			
ANR	861805	PtrMemberAccess	cur_block -> len		860849	0					
ANR	861806	Identifier	cur_block		860849	0					
ANR	861807	Identifier	len		860849	1					
ANR	861808	AdditiveExpression	blocks [ opno ] . start_opline - cur_block -> start_opline		860849	1		-			
ANR	861809	MemberAccess	blocks [ opno ] . start_opline		860849	0					
ANR	861810	ArrayIndexing	blocks [ opno ]		860849	0					
ANR	861811	Identifier	blocks		860849	0					
ANR	861812	Identifier	opno		860849	1					
ANR	861813	Identifier	start_opline		860849	1					
ANR	861814	PtrMemberAccess	cur_block -> start_opline		860849	1					
ANR	861815	Identifier	cur_block		860849	0					
ANR	861816	Identifier	start_opline		860849	1					
ANR	861817	ExpressionStatement	cur_block -> next = & blocks [ opno ]	242:3:7664:7695	860849	1	True				
ANR	861818	AssignmentExpression	cur_block -> next = & blocks [ opno ]		860849	0		=			
ANR	861819	PtrMemberAccess	cur_block -> next		860849	0					
ANR	861820	Identifier	cur_block		860849	0					
ANR	861821	Identifier	next		860849	1					
ANR	861822	UnaryOperationExpression	& blocks [ opno ]		860849	1					
ANR	861823	UnaryOperator	&		860849	0					
ANR	861824	ArrayIndexing	blocks [ opno ]		860849	1					
ANR	861825	Identifier	blocks		860849	0					
ANR	861826	Identifier	opno		860849	1					
ANR	861827	ExpressionStatement	opline = blocks [ opno ] . start_opline - 1	244:3:7748:7786	860849	2	True				
ANR	861828	AssignmentExpression	opline = blocks [ opno ] . start_opline - 1		860849	0		=			
ANR	861829	Identifier	opline		860849	0					
ANR	861830	AdditiveExpression	blocks [ opno ] . start_opline - 1		860849	1		-			
ANR	861831	MemberAccess	blocks [ opno ] . start_opline		860849	0					
ANR	861832	ArrayIndexing	blocks [ opno ]		860849	0					
ANR	861833	Identifier	blocks		860849	0					
ANR	861834	Identifier	opno		860849	1					
ANR	861835	Identifier	start_opline		860849	1					
ANR	861836	PrimaryExpression	1		860849	1					
ANR	861837	IfStatement	if ( opline -> opcode == ZEND_OP_DATA )		860849	3					
ANR	861838	Condition	opline -> opcode == ZEND_OP_DATA	245:7:7795:7824	860849	0	True				
ANR	861839	EqualityExpression	opline -> opcode == ZEND_OP_DATA		860849	0		==			
ANR	861840	PtrMemberAccess	opline -> opcode		860849	0					
ANR	861841	Identifier	opline		860849	0					
ANR	861842	Identifier	opcode		860849	1					
ANR	861843	Identifier	ZEND_OP_DATA		860849	1					
ANR	861844	CompoundStatement		162:39:5538:5538	860849	1					
ANR	861845	ExpressionStatement	opline --	246:4:7833:7841	860849	0	True				
ANR	861846	PostIncDecOperationExpression	opline --		860849	0					
ANR	861847	Identifier	opline		860849	0					
ANR	861848	IncDec	--		860849	1					
ANR	861849	SwitchStatement	switch ( ( unsigned ) opline -> opcode )		860849	4					
ANR	861850	Condition	( unsigned ) opline -> opcode	248:10:7858:7881	860849	0	True				
ANR	861851	CastExpression	( unsigned ) opline -> opcode		860849	0					
ANR	861852	CastTarget	unsigned		860849	0					
ANR	861853	PtrMemberAccess	opline -> opcode		860849	1					
ANR	861854	Identifier	opline		860849	0					
ANR	861855	Identifier	opcode		860849	1					
ANR	861856	CompoundStatement		165:36:5595:5595	860849	1					
ANR	861857	Label	case ZEND_RETURN :	249:4:7890:7906	860849	0	True				
ANR	861858	Identifier	ZEND_RETURN		860849	0					
ANR	861859	Label	case ZEND_RETURN_BY_REF :	251:4:7957:7980	860849	1	True				
ANR	861860	Identifier	ZEND_RETURN_BY_REF		860849	0					
ANR	861861	Label	case ZEND_GENERATOR_RETURN :	254:4:8038:8064	860849	2	True				
ANR	861862	Identifier	ZEND_GENERATOR_RETURN		860849	0					
ANR	861863	Label	case ZEND_EXIT :	256:4:8077:8091	860849	3	True				
ANR	861864	Identifier	ZEND_EXIT		860849	0					
ANR	861865	Label	case ZEND_THROW :	257:4:8097:8112	860849	4	True				
ANR	861866	Identifier	ZEND_THROW		860849	0					
ANR	861867	BreakStatement	break ;	258:5:8119:8124	860849	5	True				
ANR	861868	Label	case ZEND_FAST_CALL :	260:4:8175:8194	860849	6	True				
ANR	861869	Identifier	ZEND_FAST_CALL		860849	0					
ANR	861870	IfStatement	if ( opline -> extended_value )		860849	7					
ANR	861871	Condition	opline -> extended_value	261:9:8205:8226	860849	0	True				
ANR	861872	PtrMemberAccess	opline -> extended_value		860849	0					
ANR	861873	Identifier	opline		860849	0					
ANR	861874	Identifier	extended_value		860849	1					
ANR	861875	CompoundStatement		178:33:5940:5940	860849	1					
ANR	861876	ExpressionStatement	cur_block -> op2_to = & blocks [ ZEND_OP2 ( opline ) . opline_num ]	262:6:8237:8293	860849	0	True				
ANR	861877	AssignmentExpression	cur_block -> op2_to = & blocks [ ZEND_OP2 ( opline ) . opline_num ]		860849	0		=			
ANR	861878	PtrMemberAccess	cur_block -> op2_to		860849	0					
ANR	861879	Identifier	cur_block		860849	0					
ANR	861880	Identifier	op2_to		860849	1					
ANR	861881	UnaryOperationExpression	& blocks [ ZEND_OP2 ( opline ) . opline_num ]		860849	1					
ANR	861882	UnaryOperator	&		860849	0					
ANR	861883	ArrayIndexing	blocks [ ZEND_OP2 ( opline ) . opline_num ]		860849	1					
ANR	861884	Identifier	blocks		860849	0					
ANR	861885	MemberAccess	ZEND_OP2 ( opline ) . opline_num		860849	1					
ANR	861886	CallExpression	ZEND_OP2 ( opline )		860849	0					
ANR	861887	Callee	ZEND_OP2		860849	0					
ANR	861888	Identifier	ZEND_OP2		860849	0					
ANR	861889	ArgumentList	opline		860849	1					
ANR	861890	Argument	opline		860849	0					
ANR	861891	Identifier	opline		860849	0					
ANR	861892	Identifier	opline_num		860849	1					
ANR	861893	ExpressionStatement	cur_block -> op1_to = & blocks [ ZEND_OP1 ( opline ) . opline_num ]	264:5:8307:8363	860849	8	True				
ANR	861894	AssignmentExpression	cur_block -> op1_to = & blocks [ ZEND_OP1 ( opline ) . opline_num ]		860849	0		=			
ANR	861895	PtrMemberAccess	cur_block -> op1_to		860849	0					
ANR	861896	Identifier	cur_block		860849	0					
ANR	861897	Identifier	op1_to		860849	1					
ANR	861898	UnaryOperationExpression	& blocks [ ZEND_OP1 ( opline ) . opline_num ]		860849	1					
ANR	861899	UnaryOperator	&		860849	0					
ANR	861900	ArrayIndexing	blocks [ ZEND_OP1 ( opline ) . opline_num ]		860849	1					
ANR	861901	Identifier	blocks		860849	0					
ANR	861902	MemberAccess	ZEND_OP1 ( opline ) . opline_num		860849	1					
ANR	861903	CallExpression	ZEND_OP1 ( opline )		860849	0					
ANR	861904	Callee	ZEND_OP1		860849	0					
ANR	861905	Identifier	ZEND_OP1		860849	0					
ANR	861906	ArgumentList	opline		860849	1					
ANR	861907	Argument	opline		860849	0					
ANR	861908	Identifier	opline		860849	0					
ANR	861909	Identifier	opline_num		860849	1					
ANR	861910	BreakStatement	break ;	265:5:8370:8375	860849	9	True				
ANR	861911	Label	case ZEND_FAST_RET :	266:4:8381:8399	860849	10	True				
ANR	861912	Identifier	ZEND_FAST_RET		860849	0					
ANR	861913	IfStatement	if ( opline -> extended_value )		860849	11					
ANR	861914	Condition	opline -> extended_value	267:9:8410:8431	860849	0	True				
ANR	861915	PtrMemberAccess	opline -> extended_value		860849	0					
ANR	861916	Identifier	opline		860849	0					
ANR	861917	Identifier	extended_value		860849	1					
ANR	861918	CompoundStatement		184:33:6145:6145	860849	1					
ANR	861919	ExpressionStatement	cur_block -> op2_to = & blocks [ ZEND_OP2 ( opline ) . opline_num ]	268:6:8442:8498	860849	0	True				
ANR	861920	AssignmentExpression	cur_block -> op2_to = & blocks [ ZEND_OP2 ( opline ) . opline_num ]		860849	0		=			
ANR	861921	PtrMemberAccess	cur_block -> op2_to		860849	0					
ANR	861922	Identifier	cur_block		860849	0					
ANR	861923	Identifier	op2_to		860849	1					
ANR	861924	UnaryOperationExpression	& blocks [ ZEND_OP2 ( opline ) . opline_num ]		860849	1					
ANR	861925	UnaryOperator	&		860849	0					
ANR	861926	ArrayIndexing	blocks [ ZEND_OP2 ( opline ) . opline_num ]		860849	1					
ANR	861927	Identifier	blocks		860849	0					
ANR	861928	MemberAccess	ZEND_OP2 ( opline ) . opline_num		860849	1					
ANR	861929	CallExpression	ZEND_OP2 ( opline )		860849	0					
ANR	861930	Callee	ZEND_OP2		860849	0					
ANR	861931	Identifier	ZEND_OP2		860849	0					
ANR	861932	ArgumentList	opline		860849	1					
ANR	861933	Argument	opline		860849	0					
ANR	861934	Identifier	opline		860849	0					
ANR	861935	Identifier	opline_num		860849	1					
ANR	861936	BreakStatement	break ;	270:5:8512:8517	860849	12	True				
ANR	861937	Label	case ZEND_JMP :	272:4:8530:8543	860849	13	True				
ANR	861938	Identifier	ZEND_JMP		860849	0					
ANR	861939	ExpressionStatement	cur_block -> op1_to = & blocks [ ZEND_OP1 ( opline ) . opline_num ]	273:5:8550:8606	860849	14	True				
ANR	861940	AssignmentExpression	cur_block -> op1_to = & blocks [ ZEND_OP1 ( opline ) . opline_num ]		860849	0		=			
ANR	861941	PtrMemberAccess	cur_block -> op1_to		860849	0					
ANR	861942	Identifier	cur_block		860849	0					
ANR	861943	Identifier	op1_to		860849	1					
ANR	861944	UnaryOperationExpression	& blocks [ ZEND_OP1 ( opline ) . opline_num ]		860849	1					
ANR	861945	UnaryOperator	&		860849	0					
ANR	861946	ArrayIndexing	blocks [ ZEND_OP1 ( opline ) . opline_num ]		860849	1					
ANR	861947	Identifier	blocks		860849	0					
ANR	861948	MemberAccess	ZEND_OP1 ( opline ) . opline_num		860849	1					
ANR	861949	CallExpression	ZEND_OP1 ( opline )		860849	0					
ANR	861950	Callee	ZEND_OP1		860849	0					
ANR	861951	Identifier	ZEND_OP1		860849	0					
ANR	861952	ArgumentList	opline		860849	1					
ANR	861953	Argument	opline		860849	0					
ANR	861954	Identifier	opline		860849	0					
ANR	861955	Identifier	opline_num		860849	1					
ANR	861956	BreakStatement	break ;	274:5:8613:8618	860849	15	True				
ANR	861957	Label	case ZEND_JMPZNZ :	275:4:8624:8640	860849	16	True				
ANR	861958	Identifier	ZEND_JMPZNZ		860849	0					
ANR	861959	ExpressionStatement	cur_block -> op2_to = & blocks [ ZEND_OP2 ( opline ) . opline_num ]	276:5:8647:8703	860849	17	True				
ANR	861960	AssignmentExpression	cur_block -> op2_to = & blocks [ ZEND_OP2 ( opline ) . opline_num ]		860849	0		=			
ANR	861961	PtrMemberAccess	cur_block -> op2_to		860849	0					
ANR	861962	Identifier	cur_block		860849	0					
ANR	861963	Identifier	op2_to		860849	1					
ANR	861964	UnaryOperationExpression	& blocks [ ZEND_OP2 ( opline ) . opline_num ]		860849	1					
ANR	861965	UnaryOperator	&		860849	0					
ANR	861966	ArrayIndexing	blocks [ ZEND_OP2 ( opline ) . opline_num ]		860849	1					
ANR	861967	Identifier	blocks		860849	0					
ANR	861968	MemberAccess	ZEND_OP2 ( opline ) . opline_num		860849	1					
ANR	861969	CallExpression	ZEND_OP2 ( opline )		860849	0					
ANR	861970	Callee	ZEND_OP2		860849	0					
ANR	861971	Identifier	ZEND_OP2		860849	0					
ANR	861972	ArgumentList	opline		860849	1					
ANR	861973	Argument	opline		860849	0					
ANR	861974	Identifier	opline		860849	0					
ANR	861975	Identifier	opline_num		860849	1					
ANR	861976	ExpressionStatement	cur_block -> ext_to = & blocks [ opline -> extended_value ]	277:5:8710:8761	860849	18	True				
ANR	861977	AssignmentExpression	cur_block -> ext_to = & blocks [ opline -> extended_value ]		860849	0		=			
ANR	861978	PtrMemberAccess	cur_block -> ext_to		860849	0					
ANR	861979	Identifier	cur_block		860849	0					
ANR	861980	Identifier	ext_to		860849	1					
ANR	861981	UnaryOperationExpression	& blocks [ opline -> extended_value ]		860849	1					
ANR	861982	UnaryOperator	&		860849	0					
ANR	861983	ArrayIndexing	blocks [ opline -> extended_value ]		860849	1					
ANR	861984	Identifier	blocks		860849	0					
ANR	861985	PtrMemberAccess	opline -> extended_value		860849	1					
ANR	861986	Identifier	opline		860849	0					
ANR	861987	Identifier	extended_value		860849	1					
ANR	861988	BreakStatement	break ;	278:5:8768:8773	860849	19	True				
ANR	861989	Label	case ZEND_CATCH :	279:4:8779:8794	860849	20	True				
ANR	861990	Identifier	ZEND_CATCH		860849	0					
ANR	861991	ExpressionStatement	cur_block -> ext_to = & blocks [ opline -> extended_value ]	280:5:8801:8852	860849	21	True				
ANR	861992	AssignmentExpression	cur_block -> ext_to = & blocks [ opline -> extended_value ]		860849	0		=			
ANR	861993	PtrMemberAccess	cur_block -> ext_to		860849	0					
ANR	861994	Identifier	cur_block		860849	0					
ANR	861995	Identifier	ext_to		860849	1					
ANR	861996	UnaryOperationExpression	& blocks [ opline -> extended_value ]		860849	1					
ANR	861997	UnaryOperator	&		860849	0					
ANR	861998	ArrayIndexing	blocks [ opline -> extended_value ]		860849	1					
ANR	861999	Identifier	blocks		860849	0					
ANR	862000	PtrMemberAccess	opline -> extended_value		860849	1					
ANR	862001	Identifier	opline		860849	0					
ANR	862002	Identifier	extended_value		860849	1					
ANR	862003	ExpressionStatement	cur_block -> follow_to = & blocks [ opno ]	281:5:8859:8895	860849	22	True				
ANR	862004	AssignmentExpression	cur_block -> follow_to = & blocks [ opno ]		860849	0		=			
ANR	862005	PtrMemberAccess	cur_block -> follow_to		860849	0					
ANR	862006	Identifier	cur_block		860849	0					
ANR	862007	Identifier	follow_to		860849	1					
ANR	862008	UnaryOperationExpression	& blocks [ opno ]		860849	1					
ANR	862009	UnaryOperator	&		860849	0					
ANR	862010	ArrayIndexing	blocks [ opno ]		860849	1					
ANR	862011	Identifier	blocks		860849	0					
ANR	862012	Identifier	opno		860849	1					
ANR	862013	BreakStatement	break ;	282:5:8902:8907	860849	23	True				
ANR	862014	Label	case ZEND_JMPZ :	283:4:8913:8927	860849	24	True				
ANR	862015	Identifier	ZEND_JMPZ		860849	0					
ANR	862016	Label	case ZEND_JMPNZ :	284:4:8933:8948	860849	25	True				
ANR	862017	Identifier	ZEND_JMPNZ		860849	0					
ANR	862018	Label	case ZEND_JMPZ_EX :	285:4:8954:8971	860849	26	True				
ANR	862019	Identifier	ZEND_JMPZ_EX		860849	0					
ANR	862020	Label	case ZEND_JMPNZ_EX :	286:4:8977:8995	860849	27	True				
ANR	862021	Identifier	ZEND_JMPNZ_EX		860849	0					
ANR	862022	Label	case ZEND_FE_RESET :	287:4:9001:9019	860849	28	True				
ANR	862023	Identifier	ZEND_FE_RESET		860849	0					
ANR	862024	Label	case ZEND_NEW :	288:4:9025:9038	860849	29	True				
ANR	862025	Identifier	ZEND_NEW		860849	0					
ANR	862026	Label	case ZEND_JMP_SET :	290:4:9090:9107	860849	30	True				
ANR	862027	Identifier	ZEND_JMP_SET		860849	0					
ANR	862028	Label	case ZEND_JMP_SET_VAR :	293:4:9165:9186	860849	31	True				
ANR	862029	Identifier	ZEND_JMP_SET_VAR		860849	0					
ANR	862030	Label	case ZEND_FE_FETCH :	295:4:9199:9217	860849	32	True				
ANR	862031	Identifier	ZEND_FE_FETCH		860849	0					
ANR	862032	ExpressionStatement	cur_block -> op2_to = & blocks [ ZEND_OP2 ( opline ) . opline_num ]	296:5:9224:9280	860849	33	True				
ANR	862033	AssignmentExpression	cur_block -> op2_to = & blocks [ ZEND_OP2 ( opline ) . opline_num ]		860849	0		=			
ANR	862034	PtrMemberAccess	cur_block -> op2_to		860849	0					
ANR	862035	Identifier	cur_block		860849	0					
ANR	862036	Identifier	op2_to		860849	1					
ANR	862037	UnaryOperationExpression	& blocks [ ZEND_OP2 ( opline ) . opline_num ]		860849	1					
ANR	862038	UnaryOperator	&		860849	0					
ANR	862039	ArrayIndexing	blocks [ ZEND_OP2 ( opline ) . opline_num ]		860849	1					
ANR	862040	Identifier	blocks		860849	0					
ANR	862041	MemberAccess	ZEND_OP2 ( opline ) . opline_num		860849	1					
ANR	862042	CallExpression	ZEND_OP2 ( opline )		860849	0					
ANR	862043	Callee	ZEND_OP2		860849	0					
ANR	862044	Identifier	ZEND_OP2		860849	0					
ANR	862045	ArgumentList	opline		860849	1					
ANR	862046	Argument	opline		860849	0					
ANR	862047	Identifier	opline		860849	0					
ANR	862048	Identifier	opline_num		860849	1					
ANR	862049	Label	default :	298:4:9325:9332	860849	34	True				
ANR	862050	Identifier	default		860849	0					
ANR	862051	ExpressionStatement	cur_block -> follow_to = & blocks [ opno ]	300:5:9374:9410	860849	35	True				
ANR	862052	AssignmentExpression	cur_block -> follow_to = & blocks [ opno ]		860849	0		=			
ANR	862053	PtrMemberAccess	cur_block -> follow_to		860849	0					
ANR	862054	Identifier	cur_block		860849	0					
ANR	862055	Identifier	follow_to		860849	1					
ANR	862056	UnaryOperationExpression	& blocks [ opno ]		860849	1					
ANR	862057	UnaryOperator	&		860849	0					
ANR	862058	ArrayIndexing	blocks [ opno ]		860849	1					
ANR	862059	Identifier	blocks		860849	0					
ANR	862060	Identifier	opno		860849	1					
ANR	862061	BreakStatement	break ;	301:5:9417:9422	860849	36	True				
ANR	862062	ExpressionStatement	"print_block ( cur_block , op_array -> opcodes , """" )"	303:3:9432:9477	860849	5	True				
ANR	862063	CallExpression	"print_block ( cur_block , op_array -> opcodes , """" )"		860849	0					
ANR	862064	Callee	print_block		860849	0					
ANR	862065	Identifier	print_block		860849	0					
ANR	862066	ArgumentList	cur_block		860849	1					
ANR	862067	Argument	cur_block		860849	0					
ANR	862068	Identifier	cur_block		860849	0					
ANR	862069	Argument	op_array -> opcodes		860849	1					
ANR	862070	PtrMemberAccess	op_array -> opcodes		860849	0					
ANR	862071	Identifier	op_array		860849	0					
ANR	862072	Identifier	opcodes		860849	1					
ANR	862073	Argument	""""""		860849	2					
ANR	862074	PrimaryExpression	""""""		860849	0					
ANR	862075	ExpressionStatement	cur_block = cur_block -> next	304:3:9482:9509	860849	6	True				
ANR	862076	AssignmentExpression	cur_block = cur_block -> next		860849	0		=			
ANR	862077	Identifier	cur_block		860849	0					
ANR	862078	PtrMemberAccess	cur_block -> next		860849	1					
ANR	862079	Identifier	cur_block		860849	0					
ANR	862080	Identifier	next		860849	1					
ANR	862081	ExpressionStatement	cur_block -> len = end - cur_block -> start_opline	307:1:9519:9565	860849	14	True				
ANR	862082	AssignmentExpression	cur_block -> len = end - cur_block -> start_opline		860849	0		=			
ANR	862083	PtrMemberAccess	cur_block -> len		860849	0					
ANR	862084	Identifier	cur_block		860849	0					
ANR	862085	Identifier	len		860849	1					
ANR	862086	AdditiveExpression	end - cur_block -> start_opline		860849	1		-			
ANR	862087	Identifier	end		860849	0					
ANR	862088	PtrMemberAccess	cur_block -> start_opline		860849	1					
ANR	862089	Identifier	cur_block		860849	0					
ANR	862090	Identifier	start_opline		860849	1					
ANR	862091	ExpressionStatement	cur_block -> next = & blocks [ op_array -> last + 1 ]	308:1:9568:9613	860849	15	True				
ANR	862092	AssignmentExpression	cur_block -> next = & blocks [ op_array -> last + 1 ]		860849	0		=			
ANR	862093	PtrMemberAccess	cur_block -> next		860849	0					
ANR	862094	Identifier	cur_block		860849	0					
ANR	862095	Identifier	next		860849	1					
ANR	862096	UnaryOperationExpression	& blocks [ op_array -> last + 1 ]		860849	1					
ANR	862097	UnaryOperator	&		860849	0					
ANR	862098	ArrayIndexing	blocks [ op_array -> last + 1 ]		860849	1					
ANR	862099	Identifier	blocks		860849	0					
ANR	862100	AdditiveExpression	op_array -> last + 1		860849	1		+			
ANR	862101	PtrMemberAccess	op_array -> last		860849	0					
ANR	862102	Identifier	op_array		860849	0					
ANR	862103	Identifier	last		860849	1					
ANR	862104	PrimaryExpression	1		860849	1					
ANR	862105	ExpressionStatement	"print_block ( cur_block , op_array -> opcodes , """" )"	309:1:9616:9661	860849	16	True				
ANR	862106	CallExpression	"print_block ( cur_block , op_array -> opcodes , """" )"		860849	0					
ANR	862107	Callee	print_block		860849	0					
ANR	862108	Identifier	print_block		860849	0					
ANR	862109	ArgumentList	cur_block		860849	1					
ANR	862110	Argument	cur_block		860849	0					
ANR	862111	Identifier	cur_block		860849	0					
ANR	862112	Argument	op_array -> opcodes		860849	1					
ANR	862113	PtrMemberAccess	op_array -> opcodes		860849	0					
ANR	862114	Identifier	op_array		860849	0					
ANR	862115	Identifier	opcodes		860849	1					
ANR	862116	Argument	""""""		860849	2					
ANR	862117	PrimaryExpression	""""""		860849	0					
ANR	862118	ReturnStatement	return 1 ;	311:1:9665:9673	860849	17	True				
ANR	862119	PrimaryExpression	1		860849	0					
ANR	862120	ReturnType	static int		860849	1					
ANR	862121	Identifier	find_code_blocks		860849	2					
ANR	862122	ParameterList	"zend_op_array * op_array , zend_cfg * cfg"		860849	3					
ANR	862123	Parameter	zend_op_array * op_array	83:28:2248:2270	860849	0	True				
ANR	862124	ParameterType	zend_op_array *		860849	0					
ANR	862125	Identifier	op_array		860849	1					
ANR	862126	Parameter	zend_cfg * cfg	83:53:2273:2285	860849	1	True				
ANR	862127	ParameterType	zend_cfg *		860849	0					
ANR	862128	Identifier	cfg		860849	1					
ANR	862129	CFGEntryNode	ENTRY		860849		True				
ANR	862130	CFGExitNode	EXIT		860849		True				
ANR	862131	CFGErrorNode	ERROR		860849		True				
ANR	862132	CFGErrorNode	ERROR		860849		True				
ANR	862133	Symbol	* * op_array -> brk_cont_array		860849						
ANR	862134	Symbol	op_array -> brk_cont_array [ parent ] . parent		860849						
ANR	862135	Symbol	* cfg -> loop_brk		860849						
ANR	862136	Symbol	ZEND_FREE		860849						
ANR	862137	Symbol	parent		860849						
ANR	862138	Symbol	* * * op_array		860849						
ANR	862139	Symbol	* parent		860849						
ANR	862140	Symbol	ZEND_OP1 ( opline ) . opline_num		860849						
ANR	862141	Symbol	* * op_array -> try_catch_array		860849						
ANR	862142	Symbol	ZEND_OP_DATA		860849						
ANR	862143	Symbol	opline -> extended_value		860849						
ANR	862144	Symbol	op_array -> brk_cont_array [ j ] . brk		860849						
ANR	862145	Symbol	cfg -> loop_brk		860849						
ANR	862146	Symbol	blocks [ op_array -> brk_cont_array [ j ] . start ] . protected		860849						
ANR	862147	Symbol	opline		860849						
ANR	862148	Symbol	* cur_block		860849						
ANR	862149	Symbol	cur_block -> start_opline		860849						
ANR	862150	Symbol	cur_block -> op1_to		860849						
ANR	862151	Symbol	ecalloc		860849						
ANR	862152	Symbol	op_array -> try_catch_array		860849						
ANR	862153	Symbol	op_array -> brk_cont_array [ parent ] . start		860849						
ANR	862154	Symbol	* * j		860849						
ANR	862155	Symbol	cur_block -> follow_to		860849						
ANR	862156	Symbol	* * i		860849						
ANR	862157	Symbol	NULL		860849						
ANR	862158	Symbol	blocks [ op_array -> try_catch_array [ i ] . try_op ] . protected		860849						
ANR	862159	Symbol	* blocks		860849						
ANR	862160	Symbol	op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode		860849						
ANR	862161	Symbol	* op_array		860849						
ANR	862162	Symbol	op_array -> last		860849						
ANR	862163	Symbol	cur_block -> len		860849						
ANR	862164	Symbol	* cfg		860849						
ANR	862165	Symbol	ZEND_OP2 ( opline ) . opline_num		860849						
ANR	862166	Symbol	* op_array -> brk_cont_array [ i ] . brk		860849						
ANR	862167	Symbol	op_array -> brk_cont_array [ parent ] . brk		860849						
ANR	862168	Symbol	cur_block -> next		860849						
ANR	862169	Symbol	cur_block -> op2_to		860849						
ANR	862170	Symbol	* * cfg		860849						
ANR	862171	Symbol	* op_array -> brk_cont_array [ parent ] . brk		860849						
ANR	862172	Symbol	op_array -> try_catch_array [ i ] . catch_op		860849						
ANR	862173	Symbol	cfg -> loop_start		860849						
ANR	862174	Symbol	* opno		860849						
ANR	862175	Symbol	* * op_array		860849						
ANR	862176	Symbol	op_array -> brk_cont_array [ i ] . brk		860849						
ANR	862177	Symbol	cfg -> blocks		860849						
ANR	862178	Symbol	op_array -> try_catch_array [ i ] . try_op		860849						
ANR	862179	Symbol	blocks [ op_array -> brk_cont_array [ j ] . brk ] . protected		860849						
ANR	862180	Symbol	* op_array -> try_catch_array		860849						
ANR	862181	Symbol	ZEND_SWITCH_FREE		860849						
ANR	862182	Symbol	op_array -> brk_cont_array [ j ] . cont		860849						
ANR	862183	Symbol	op_array -> brk_cont_array		860849						
ANR	862184	Symbol	op_array -> opcodes		860849						
ANR	862185	Symbol	op_array -> brk_cont_array [ i ] . parent		860849						
ANR	862186	Symbol	cur_block		860849						
ANR	862187	Symbol	opno		860849						
ANR	862188	Symbol	blocks [ opno ] . start_opline		860849						
ANR	862189	Symbol	end		860849						
ANR	862190	Symbol	blocks [ 0 ] . start_opline_no		860849						
ANR	862191	Symbol	op_array -> brk_cont_array [ j ] . start		860849						
ANR	862192	Symbol	cfg -> loop_cont		860849						
ANR	862193	Symbol	cfg		860849						
ANR	862194	Symbol	* op_array -> brk_cont_array		860849						
ANR	862195	Symbol	op_array -> brk_cont_array [ i ] . start		860849						
ANR	862196	Symbol	blocks		860849						
ANR	862197	Symbol	cur_block -> ext_to		860849						
ANR	862198	Symbol	* * parent		860849						
ANR	862199	Symbol	i		860849						
ANR	862200	Symbol	* op_array -> brk_cont_array [ j ] . brk		860849						
ANR	862201	Symbol	j		860849						
ANR	862202	Symbol	ZEND_OP1		860849						
ANR	862203	Symbol	blocks [ 0 ] . start_opline		860849						
ANR	862204	Symbol	ZEND_OP2		860849						
ANR	862205	Symbol	op_array -> last_try_catch		860849						
ANR	862206	Symbol	op_array -> last_brk_cont		860849						
ANR	862207	Symbol	* op_array -> brk_cont_array [ j ] . start		860849						
ANR	862208	Symbol	* i		860849						
ANR	862209	Symbol	* opline		860849						
ANR	862210	Symbol	* j		860849						
ANR	862211	Symbol	* cfg -> loop_start		860849						
ANR	862212	Symbol	* cfg -> loop_cont		860849						
ANR	862213	Symbol	opline -> opcode		860849						
ANR	862214	Symbol	op_array -> opcodes [ op_array -> brk_cont_array [ parent ] . brk ] . opcode		860849						
ANR	862215	Symbol	* op_array -> try_catch_array [ i ] . try_op		860849						
ANR	862216	Symbol	op_array		860849						
ANR	862217	Symbol	* op_array -> opcodes		860849						
ANR	862218	DeclStmt									
ANR	862219	Decl							zend_block_source	zend_block_source *	__s
ANR	862220	DeclStmt									
ANR	862221	Decl							zend_block_source	zend_block_source *	__t
ANR	862222	DeclStmt									
ANR	862223	Decl							zend_block_source	zend_block_source *	__ns
ANR	862224	DeclStmt									
ANR	862225	Decl							zend_block_source	zend_block_source * *	cs
ANR	862226	DeclStmt									
ANR	862227	Decl							int	int	found
ANR	862228	Function	del_source	360:0:10608:12407							
ANR	862229	FunctionDef	"del_source (zend_code_block * from , zend_code_block * to)"		862228	0					
ANR	862230	CompoundStatement		361:0:10682:12407	862228	0					
ANR	862231	IdentifierDeclStatement	zend_block_source * * cs = & to -> sources ;	363:1:10738:10775	862228	0	True				
ANR	862232	IdentifierDecl	* * cs = & to -> sources		862228	0					
ANR	862233	IdentifierDeclType	zend_block_source * *		862228	0					
ANR	862234	Identifier	cs		862228	1					
ANR	862235	AssignmentExpression	* * cs = & to -> sources		862228	2		=			
ANR	862236	Identifier	cs		862228	0					
ANR	862237	UnaryOperationExpression	& to -> sources		862228	1					
ANR	862238	UnaryOperator	&		862228	0					
ANR	862239	PtrMemberAccess	to -> sources		862228	1					
ANR	862240	Identifier	to		862228	0					
ANR	862241	Identifier	sources		862228	1					
ANR	862242	IfStatement	if ( to -> sources == NULL )		862228	1					
ANR	862243	Condition	to -> sources == NULL	365:5:10783:10801	862228	0	True				
ANR	862244	EqualityExpression	to -> sources == NULL		862228	0		==			
ANR	862245	PtrMemberAccess	to -> sources		862228	0					
ANR	862246	Identifier	to		862228	0					
ANR	862247	Identifier	sources		862228	1					
ANR	862248	Identifier	NULL		862228	1					
ANR	862249	CompoundStatement		5:26:121:121	862228	1					
ANR	862250	ExpressionStatement	to -> access = 0	366:2:10808:10822	862228	0	True				
ANR	862251	AssignmentExpression	to -> access = 0		862228	0		=			
ANR	862252	PtrMemberAccess	to -> access		862228	0					
ANR	862253	Identifier	to		862228	0					
ANR	862254	Identifier	access		862228	1					
ANR	862255	PrimaryExpression	0		862228	1					
ANR	862256	ReturnStatement	return ;	367:2:10826:10832	862228	1	True				
ANR	862257	IfStatement	if ( from == to )		862228	2					
ANR	862258	Condition	from == to	370:5:10843:10852	862228	0	True				
ANR	862259	EqualityExpression	from == to		862228	0		==			
ANR	862260	Identifier	from		862228	0					
ANR	862261	Identifier	to		862228	1					
ANR	862262	CompoundStatement		10:17:172:172	862228	1					
ANR	862263	ReturnStatement	return ;	371:2:10859:10865	862228	0	True				
ANR	862264	WhileStatement	while ( * cs )		862228	3					
ANR	862265	Condition	* cs	374:8:10879:10881	862228	0	True				
ANR	862266	UnaryOperationExpression	* cs		862228	0					
ANR	862267	UnaryOperator	*		862228	0					
ANR	862268	Identifier	cs		862228	1					
ANR	862269	CompoundStatement		14:13:201:201	862228	1					
ANR	862270	IfStatement	if ( ( * cs ) -> from == from )		862228	0					
ANR	862271	Condition	( * cs ) -> from == from	375:6:10892:10910	862228	0	True				
ANR	862272	EqualityExpression	( * cs ) -> from == from		862228	0		==			
ANR	862273	PtrMemberAccess	( * cs ) -> from		862228	0					
ANR	862274	UnaryOperationExpression	* cs		862228	0					
ANR	862275	UnaryOperator	*		862228	0					
ANR	862276	Identifier	cs		862228	1					
ANR	862277	Identifier	from		862228	1					
ANR	862278	Identifier	from		862228	1					
ANR	862279	CompoundStatement		15:27:230:230	862228	1					
ANR	862280	ExpressionStatement	DEL_SOURCE ( cs )	376:4:10919:10933	862228	0	True				
ANR	862281	CallExpression	DEL_SOURCE ( cs )		862228	0					
ANR	862282	Callee	DEL_SOURCE		862228	0					
ANR	862283	Identifier	DEL_SOURCE		862228	0					
ANR	862284	ArgumentList	cs		862228	1					
ANR	862285	Argument	cs		862228	0					
ANR	862286	Identifier	cs		862228	0					
ANR	862287	BreakStatement	break ;	377:3:10938:10943	862228	1	True				
ANR	862288	ExpressionStatement	cs = & ( ( * cs ) -> next )	379:2:10951:10970	862228	1	True				
ANR	862289	AssignmentExpression	cs = & ( ( * cs ) -> next )		862228	0		=			
ANR	862290	Identifier	cs		862228	0					
ANR	862291	UnaryOperationExpression	& ( ( * cs ) -> next )		862228	1					
ANR	862292	UnaryOperator	&		862228	0					
ANR	862293	PtrMemberAccess	( * cs ) -> next		862228	1					
ANR	862294	UnaryOperationExpression	* cs		862228	0					
ANR	862295	UnaryOperator	*		862228	0					
ANR	862296	Identifier	cs		862228	1					
ANR	862297	Identifier	next		862228	1					
ANR	862298	IfStatement	if ( to -> sources == NULL )		862228	4					
ANR	862299	Condition	to -> sources == NULL	382:5:10981:10999	862228	0	True				
ANR	862300	EqualityExpression	to -> sources == NULL		862228	0		==			
ANR	862301	PtrMemberAccess	to -> sources		862228	0					
ANR	862302	Identifier	to		862228	0					
ANR	862303	Identifier	sources		862228	1					
ANR	862304	Identifier	NULL		862228	1					
ANR	862305	CompoundStatement		22:26:319:319	862228	1					
ANR	862306	ExpressionStatement	to -> access = 0	384:2:11071:11085	862228	0	True				
ANR	862307	AssignmentExpression	to -> access = 0		862228	0		=			
ANR	862308	PtrMemberAccess	to -> access		862228	0					
ANR	862309	Identifier	to		862228	0					
ANR	862310	Identifier	access		862228	1					
ANR	862311	PrimaryExpression	0		862228	1					
ANR	862312	ReturnStatement	return ;	385:2:11089:11095	862228	1	True				
ANR	862313	IfStatement	if ( ! to -> protected && to -> sources -> next == NULL )		862228	5					
ANR	862314	Condition	! to -> protected && to -> sources -> next == NULL	388:5:11106:11148	862228	0	True				
ANR	862315	AndExpression	! to -> protected && to -> sources -> next == NULL		862228	0		&&			
ANR	862316	UnaryOperationExpression	! to -> protected		862228	0					
ANR	862317	UnaryOperator	!		862228	0					
ANR	862318	PtrMemberAccess	to -> protected		862228	1					
ANR	862319	Identifier	to		862228	0					
ANR	862320	Identifier	protected		862228	1					
ANR	862321	EqualityExpression	to -> sources -> next == NULL		862228	1		==			
ANR	862322	PtrMemberAccess	to -> sources -> next		862228	0					
ANR	862323	PtrMemberAccess	to -> sources		862228	0					
ANR	862324	Identifier	to		862228	0					
ANR	862325	Identifier	sources		862228	1					
ANR	862326	Identifier	next		862228	1					
ANR	862327	Identifier	NULL		862228	1					
ANR	862328	CompoundStatement		30:2:505:552	862228	1					
ANR	862329	IdentifierDeclStatement	zend_code_block * from_block = to -> sources -> from ;	390:2:11188:11235	862228	0	True				
ANR	862330	IdentifierDecl	* from_block = to -> sources -> from		862228	0					
ANR	862331	IdentifierDeclType	zend_code_block *		862228	0					
ANR	862332	Identifier	from_block		862228	1					
ANR	862333	AssignmentExpression	* from_block = to -> sources -> from		862228	2		=			
ANR	862334	Identifier	from_block		862228	0					
ANR	862335	PtrMemberAccess	to -> sources -> from		862228	1					
ANR	862336	PtrMemberAccess	to -> sources		862228	0					
ANR	862337	Identifier	to		862228	0					
ANR	862338	Identifier	sources		862228	1					
ANR	862339	Identifier	from		862228	1					
ANR	862340	IfStatement	if ( from_block -> access && from_block -> follow_to == to && from_block -> op1_to == NULL && from_block -> op2_to == NULL && from_block -> ext_to == NULL )		862228	1					
ANR	862341	Condition	from_block -> access && from_block -> follow_to == to && from_block -> op1_to == NULL && from_block -> op2_to == NULL && from_block -> ext_to == NULL	392:6:11244:11400	862228	0	True				
ANR	862342	AndExpression	from_block -> access && from_block -> follow_to == to && from_block -> op1_to == NULL && from_block -> op2_to == NULL && from_block -> ext_to == NULL		862228	0		&&			
ANR	862343	PtrMemberAccess	from_block -> access		862228	0					
ANR	862344	Identifier	from_block		862228	0					
ANR	862345	Identifier	access		862228	1					
ANR	862346	AndExpression	from_block -> follow_to == to && from_block -> op1_to == NULL && from_block -> op2_to == NULL && from_block -> ext_to == NULL		862228	1		&&			
ANR	862347	EqualityExpression	from_block -> follow_to == to		862228	0		==			
ANR	862348	PtrMemberAccess	from_block -> follow_to		862228	0					
ANR	862349	Identifier	from_block		862228	0					
ANR	862350	Identifier	follow_to		862228	1					
ANR	862351	Identifier	to		862228	1					
ANR	862352	AndExpression	from_block -> op1_to == NULL && from_block -> op2_to == NULL && from_block -> ext_to == NULL		862228	1		&&			
ANR	862353	EqualityExpression	from_block -> op1_to == NULL		862228	0		==			
ANR	862354	PtrMemberAccess	from_block -> op1_to		862228	0					
ANR	862355	Identifier	from_block		862228	0					
ANR	862356	Identifier	op1_to		862228	1					
ANR	862357	Identifier	NULL		862228	1					
ANR	862358	AndExpression	from_block -> op2_to == NULL && from_block -> ext_to == NULL		862228	1		&&			
ANR	862359	EqualityExpression	from_block -> op2_to == NULL		862228	0		==			
ANR	862360	PtrMemberAccess	from_block -> op2_to		862228	0					
ANR	862361	Identifier	from_block		862228	0					
ANR	862362	Identifier	op2_to		862228	1					
ANR	862363	Identifier	NULL		862228	1					
ANR	862364	EqualityExpression	from_block -> ext_to == NULL		862228	1		==			
ANR	862365	PtrMemberAccess	from_block -> ext_to		862228	0					
ANR	862366	Identifier	from_block		862228	0					
ANR	862367	Identifier	ext_to		862228	1					
ANR	862368	Identifier	NULL		862228	1					
ANR	862369	CompoundStatement		37:3:794:854	862228	1					
ANR	862370	IdentifierDeclStatement	zend_op * new_to = from_block -> start_opline + from_block -> len ;	397:3:11477:11537	862228	0	True				
ANR	862371	IdentifierDecl	* new_to = from_block -> start_opline + from_block -> len		862228	0					
ANR	862372	IdentifierDeclType	zend_op *		862228	0					
ANR	862373	Identifier	new_to		862228	1					
ANR	862374	AssignmentExpression	* new_to = from_block -> start_opline + from_block -> len		862228	2		=			
ANR	862375	Identifier	new_to		862228	0					
ANR	862376	AdditiveExpression	from_block -> start_opline + from_block -> len		862228	1		+			
ANR	862377	PtrMemberAccess	from_block -> start_opline		862228	0					
ANR	862378	Identifier	from_block		862228	0					
ANR	862379	Identifier	start_opline		862228	1					
ANR	862380	PtrMemberAccess	from_block -> len		862228	1					
ANR	862381	Identifier	from_block		862228	0					
ANR	862382	Identifier	len		862228	1					
ANR	862383	IfStatement	if ( new_to != to -> start_opline )		862228	1					
ANR	862384	Condition	new_to != to -> start_opline	398:7:11546:11571	862228	0	True				
ANR	862385	EqualityExpression	new_to != to -> start_opline		862228	0		!=			
ANR	862386	Identifier	new_to		862228	0					
ANR	862387	PtrMemberAccess	to -> start_opline		862228	1					
ANR	862388	Identifier	to		862228	0					
ANR	862389	Identifier	start_opline		862228	1					
ANR	862390	CompoundStatement		38:35:891:891	862228	1					
ANR	862391	ExpressionStatement	"memmove ( new_to , to -> start_opline , sizeof ( zend_op ) * to -> len )"	400:4:11617:11675	862228	0	True				
ANR	862392	CallExpression	"memmove ( new_to , to -> start_opline , sizeof ( zend_op ) * to -> len )"		862228	0					
ANR	862393	Callee	memmove		862228	0					
ANR	862394	Identifier	memmove		862228	0					
ANR	862395	ArgumentList	new_to		862228	1					
ANR	862396	Argument	new_to		862228	0					
ANR	862397	Identifier	new_to		862228	0					
ANR	862398	Argument	to -> start_opline		862228	1					
ANR	862399	PtrMemberAccess	to -> start_opline		862228	0					
ANR	862400	Identifier	to		862228	0					
ANR	862401	Identifier	start_opline		862228	1					
ANR	862402	Argument	sizeof ( zend_op ) * to -> len		862228	2					
ANR	862403	MultiplicativeExpression	sizeof ( zend_op ) * to -> len		862228	0		*			
ANR	862404	SizeofExpression	sizeof ( zend_op )		862228	0					
ANR	862405	Sizeof	sizeof		862228	0					
ANR	862406	SizeofOperand	zend_op		862228	1					
ANR	862407	PtrMemberAccess	to -> len		862228	1					
ANR	862408	Identifier	to		862228	0					
ANR	862409	Identifier	len		862228	1					
ANR	862410	ExpressionStatement	from_block -> len += to -> len	403:3:11715:11741	862228	2	True				
ANR	862411	AssignmentExpression	from_block -> len += to -> len		862228	0		+=			
ANR	862412	PtrMemberAccess	from_block -> len		862228	0					
ANR	862413	Identifier	from_block		862228	0					
ANR	862414	Identifier	len		862228	1					
ANR	862415	PtrMemberAccess	to -> len		862228	1					
ANR	862416	Identifier	to		862228	0					
ANR	862417	Identifier	len		862228	1					
ANR	862418	ExpressionStatement	to -> start_opline = NULL	405:3:11788:11811	862228	3	True				
ANR	862419	AssignmentExpression	to -> start_opline = NULL		862228	0		=			
ANR	862420	PtrMemberAccess	to -> start_opline		862228	0					
ANR	862421	Identifier	to		862228	0					
ANR	862422	Identifier	start_opline		862228	1					
ANR	862423	Identifier	NULL		862228	1					
ANR	862424	ExpressionStatement	to -> access = 0	406:3:11816:11830	862228	4	True				
ANR	862425	AssignmentExpression	to -> access = 0		862228	0		=			
ANR	862426	PtrMemberAccess	to -> access		862228	0					
ANR	862427	Identifier	to		862228	0					
ANR	862428	Identifier	access		862228	1					
ANR	862429	PrimaryExpression	0		862228	1					
ANR	862430	ExpressionStatement	efree ( to -> sources )	407:3:11835:11853	862228	5	True				
ANR	862431	CallExpression	efree ( to -> sources )		862228	0					
ANR	862432	Callee	efree		862228	0					
ANR	862433	Identifier	efree		862228	0					
ANR	862434	ArgumentList	to -> sources		862228	1					
ANR	862435	Argument	to -> sources		862228	0					
ANR	862436	PtrMemberAccess	to -> sources		862228	0					
ANR	862437	Identifier	to		862228	0					
ANR	862438	Identifier	sources		862228	1					
ANR	862439	ExpressionStatement	to -> sources = NULL	408:3:11858:11876	862228	6	True				
ANR	862440	AssignmentExpression	to -> sources = NULL		862228	0		=			
ANR	862441	PtrMemberAccess	to -> sources		862228	0					
ANR	862442	Identifier	to		862228	0					
ANR	862443	Identifier	sources		862228	1					
ANR	862444	Identifier	NULL		862228	1					
ANR	862445	ExpressionStatement	from_block -> follow_to = to -> follow_to	409:3:11881:11918	862228	7	True				
ANR	862446	AssignmentExpression	from_block -> follow_to = to -> follow_to		862228	0		=			
ANR	862447	PtrMemberAccess	from_block -> follow_to		862228	0					
ANR	862448	Identifier	from_block		862228	0					
ANR	862449	Identifier	follow_to		862228	1					
ANR	862450	PtrMemberAccess	to -> follow_to		862228	1					
ANR	862451	Identifier	to		862228	0					
ANR	862452	Identifier	follow_to		862228	1					
ANR	862453	IfStatement	if ( to -> op1_to )		862228	8					
ANR	862454	Condition	to -> op1_to	410:7:11927:11936	862228	0	True				
ANR	862455	PtrMemberAccess	to -> op1_to		862228	0					
ANR	862456	Identifier	to		862228	0					
ANR	862457	Identifier	op1_to		862228	1					
ANR	862458	CompoundStatement		50:19:1256:1256	862228	1					
ANR	862459	ExpressionStatement	from_block -> op1_to = to -> op1_to	411:4:11945:11976	862228	0	True				
ANR	862460	AssignmentExpression	from_block -> op1_to = to -> op1_to		862228	0		=			
ANR	862461	PtrMemberAccess	from_block -> op1_to		862228	0					
ANR	862462	Identifier	from_block		862228	0					
ANR	862463	Identifier	op1_to		862228	1					
ANR	862464	PtrMemberAccess	to -> op1_to		862228	1					
ANR	862465	Identifier	to		862228	0					
ANR	862466	Identifier	op1_to		862228	1					
ANR	862467	ExpressionStatement	"replace_source ( to -> op1_to -> sources , to , from_block )"	412:4:11982:12033	862228	1	True				
ANR	862468	CallExpression	"replace_source ( to -> op1_to -> sources , to , from_block )"		862228	0					
ANR	862469	Callee	replace_source		862228	0					
ANR	862470	Identifier	replace_source		862228	0					
ANR	862471	ArgumentList	to -> op1_to -> sources		862228	1					
ANR	862472	Argument	to -> op1_to -> sources		862228	0					
ANR	862473	PtrMemberAccess	to -> op1_to -> sources		862228	0					
ANR	862474	PtrMemberAccess	to -> op1_to		862228	0					
ANR	862475	Identifier	to		862228	0					
ANR	862476	Identifier	op1_to		862228	1					
ANR	862477	Identifier	sources		862228	1					
ANR	862478	Argument	to		862228	1					
ANR	862479	Identifier	to		862228	0					
ANR	862480	Argument	from_block		862228	2					
ANR	862481	Identifier	from_block		862228	0					
ANR	862482	IfStatement	if ( to -> op2_to )		862228	9					
ANR	862483	Condition	to -> op2_to	414:7:12047:12056	862228	0	True				
ANR	862484	PtrMemberAccess	to -> op2_to		862228	0					
ANR	862485	Identifier	to		862228	0					
ANR	862486	Identifier	op2_to		862228	1					
ANR	862487	CompoundStatement		54:19:1376:1376	862228	1					
ANR	862488	ExpressionStatement	from_block -> op2_to = to -> op2_to	415:4:12065:12096	862228	0	True				
ANR	862489	AssignmentExpression	from_block -> op2_to = to -> op2_to		862228	0		=			
ANR	862490	PtrMemberAccess	from_block -> op2_to		862228	0					
ANR	862491	Identifier	from_block		862228	0					
ANR	862492	Identifier	op2_to		862228	1					
ANR	862493	PtrMemberAccess	to -> op2_to		862228	1					
ANR	862494	Identifier	to		862228	0					
ANR	862495	Identifier	op2_to		862228	1					
ANR	862496	ExpressionStatement	"replace_source ( to -> op2_to -> sources , to , from_block )"	416:4:12102:12153	862228	1	True				
ANR	862497	CallExpression	"replace_source ( to -> op2_to -> sources , to , from_block )"		862228	0					
ANR	862498	Callee	replace_source		862228	0					
ANR	862499	Identifier	replace_source		862228	0					
ANR	862500	ArgumentList	to -> op2_to -> sources		862228	1					
ANR	862501	Argument	to -> op2_to -> sources		862228	0					
ANR	862502	PtrMemberAccess	to -> op2_to -> sources		862228	0					
ANR	862503	PtrMemberAccess	to -> op2_to		862228	0					
ANR	862504	Identifier	to		862228	0					
ANR	862505	Identifier	op2_to		862228	1					
ANR	862506	Identifier	sources		862228	1					
ANR	862507	Argument	to		862228	1					
ANR	862508	Identifier	to		862228	0					
ANR	862509	Argument	from_block		862228	2					
ANR	862510	Identifier	from_block		862228	0					
ANR	862511	IfStatement	if ( to -> ext_to )		862228	10					
ANR	862512	Condition	to -> ext_to	418:7:12167:12176	862228	0	True				
ANR	862513	PtrMemberAccess	to -> ext_to		862228	0					
ANR	862514	Identifier	to		862228	0					
ANR	862515	Identifier	ext_to		862228	1					
ANR	862516	CompoundStatement		58:19:1496:1496	862228	1					
ANR	862517	ExpressionStatement	from_block -> ext_to = to -> ext_to	419:4:12185:12216	862228	0	True				
ANR	862518	AssignmentExpression	from_block -> ext_to = to -> ext_to		862228	0		=			
ANR	862519	PtrMemberAccess	from_block -> ext_to		862228	0					
ANR	862520	Identifier	from_block		862228	0					
ANR	862521	Identifier	ext_to		862228	1					
ANR	862522	PtrMemberAccess	to -> ext_to		862228	1					
ANR	862523	Identifier	to		862228	0					
ANR	862524	Identifier	ext_to		862228	1					
ANR	862525	ExpressionStatement	"replace_source ( to -> ext_to -> sources , to , from_block )"	420:4:12222:12273	862228	1	True				
ANR	862526	CallExpression	"replace_source ( to -> ext_to -> sources , to , from_block )"		862228	0					
ANR	862527	Callee	replace_source		862228	0					
ANR	862528	Identifier	replace_source		862228	0					
ANR	862529	ArgumentList	to -> ext_to -> sources		862228	1					
ANR	862530	Argument	to -> ext_to -> sources		862228	0					
ANR	862531	PtrMemberAccess	to -> ext_to -> sources		862228	0					
ANR	862532	PtrMemberAccess	to -> ext_to		862228	0					
ANR	862533	Identifier	to		862228	0					
ANR	862534	Identifier	ext_to		862228	1					
ANR	862535	Identifier	sources		862228	1					
ANR	862536	Argument	to		862228	1					
ANR	862537	Identifier	to		862228	0					
ANR	862538	Argument	from_block		862228	2					
ANR	862539	Identifier	from_block		862228	0					
ANR	862540	IfStatement	if ( to -> follow_to )		862228	11					
ANR	862541	Condition	to -> follow_to	422:7:12287:12299	862228	0	True				
ANR	862542	PtrMemberAccess	to -> follow_to		862228	0					
ANR	862543	Identifier	to		862228	0					
ANR	862544	Identifier	follow_to		862228	1					
ANR	862545	CompoundStatement		62:22:1619:1619	862228	1					
ANR	862546	ExpressionStatement	"replace_source ( to -> follow_to -> sources , to , from_block )"	423:4:12308:12362	862228	0	True				
ANR	862547	CallExpression	"replace_source ( to -> follow_to -> sources , to , from_block )"		862228	0					
ANR	862548	Callee	replace_source		862228	0					
ANR	862549	Identifier	replace_source		862228	0					
ANR	862550	ArgumentList	to -> follow_to -> sources		862228	1					
ANR	862551	Argument	to -> follow_to -> sources		862228	0					
ANR	862552	PtrMemberAccess	to -> follow_to -> sources		862228	0					
ANR	862553	PtrMemberAccess	to -> follow_to		862228	0					
ANR	862554	Identifier	to		862228	0					
ANR	862555	Identifier	follow_to		862228	1					
ANR	862556	Identifier	sources		862228	1					
ANR	862557	Argument	to		862228	1					
ANR	862558	Identifier	to		862228	0					
ANR	862559	Argument	from_block		862228	2					
ANR	862560	Identifier	from_block		862228	0					
ANR	862561	ReturnType	static inline void		862228	1					
ANR	862562	Identifier	del_source		862228	2					
ANR	862563	ParameterList	"zend_code_block * from , zend_code_block * to"		862228	3					
ANR	862564	Parameter	zend_code_block * from	360:30:10638:10658	862228	0	True				
ANR	862565	ParameterType	zend_code_block *		862228	0					
ANR	862566	Identifier	from		862228	1					
ANR	862567	Parameter	zend_code_block * to	360:53:10661:10679	862228	1	True				
ANR	862568	ParameterType	zend_code_block *		862228	0					
ANR	862569	Identifier	to		862228	1					
ANR	862570	CFGEntryNode	ENTRY		862228		True				
ANR	862571	CFGExitNode	EXIT		862228		True				
ANR	862572	Symbol	new_to		862228						
ANR	862573	Symbol	from_block -> len		862228						
ANR	862574	Symbol	* to -> sources		862228						
ANR	862575	Symbol	to -> op1_to		862228						
ANR	862576	Symbol	& ( * cs ) -> next		862228						
ANR	862577	Symbol	* to -> op1_to		862228						
ANR	862578	Symbol	to -> sources		862228						
ANR	862579	Symbol	to -> op2_to -> sources		862228						
ANR	862580	Symbol	to -> access		862228						
ANR	862581	Symbol	from		862228						
ANR	862582	Symbol	to -> ext_to		862228						
ANR	862583	Symbol	to -> len		862228						
ANR	862584	Symbol	from_block -> op2_to		862228						
ANR	862585	Symbol	to -> start_opline		862228						
ANR	862586	Symbol	* * cs		862228						
ANR	862587	Symbol	* to		862228						
ANR	862588	Symbol	from_block		862228						
ANR	862589	Symbol	NULL		862228						
ANR	862590	Symbol	* * to		862228						
ANR	862591	Symbol	from_block -> follow_to		862228						
ANR	862592	Symbol	* to -> ext_to		862228						
ANR	862593	Symbol	to -> follow_to -> sources		862228						
ANR	862594	Symbol	to -> op2_to		862228						
ANR	862595	Symbol	from_block -> ext_to		862228						
ANR	862596	Symbol	* to -> follow_to		862228						
ANR	862597	Symbol	( * cs ) -> from		862228						
ANR	862598	Symbol	from_block -> access		862228						
ANR	862599	Symbol	to -> sources -> from		862228						
ANR	862600	Symbol	& to -> sources		862228						
ANR	862601	Symbol	cs		862228						
ANR	862602	Symbol	to -> op1_to -> sources		862228						
ANR	862603	Symbol	* cs		862228						
ANR	862604	Symbol	to -> follow_to		862228						
ANR	862605	Symbol	* to -> op2_to		862228						
ANR	862606	Symbol	to -> protected		862228						
ANR	862607	Symbol	to -> ext_to -> sources		862228						
ANR	862608	Symbol	from_block -> op1_to		862228						
ANR	862609	Symbol	from_block -> start_opline		862228						
ANR	862610	Symbol	to		862228						
ANR	862611	Symbol	* from_block		862228						
ANR	862612	Symbol	to -> sources -> next		862228						
ANR	862613	Function	delete_code_block	430:0:12410:13139							
ANR	862614	FunctionDef	delete_code_block (zend_code_block * block)		862613	0					
ANR	862615	CompoundStatement		431:0:12464:13139	862613	0					
ANR	862616	IfStatement	if ( block -> protected )		862613	0					
ANR	862617	Condition	block -> protected	432:5:12471:12486	862613	0	True				
ANR	862618	PtrMemberAccess	block -> protected		862613	0					
ANR	862619	Identifier	block		862613	0					
ANR	862620	Identifier	protected		862613	1					
ANR	862621	CompoundStatement		2:23:24:24	862613	1					
ANR	862622	ReturnStatement	return ;	433:2:12493:12499	862613	0	True				
ANR	862623	IfStatement	if ( block -> follow_to )		862613	1					
ANR	862624	Condition	block -> follow_to	435:5:12509:12524	862613	0	True				
ANR	862625	PtrMemberAccess	block -> follow_to		862613	0					
ANR	862626	Identifier	block		862613	0					
ANR	862627	Identifier	follow_to		862613	1					
ANR	862628	CompoundStatement		6:2:66:104	862613	1					
ANR	862629	IdentifierDeclStatement	zend_block_source * bs = block -> sources ;	436:2:12531:12569	862613	0	True				
ANR	862630	IdentifierDecl	* bs = block -> sources		862613	0					
ANR	862631	IdentifierDeclType	zend_block_source *		862613	0					
ANR	862632	Identifier	bs		862613	1					
ANR	862633	AssignmentExpression	* bs = block -> sources		862613	2		=			
ANR	862634	Identifier	bs		862613	0					
ANR	862635	PtrMemberAccess	block -> sources		862613	1					
ANR	862636	Identifier	block		862613	0					
ANR	862637	Identifier	sources		862613	1					
ANR	862638	WhileStatement	while ( bs )		862613	1					
ANR	862639	Condition	bs	437:9:12580:12581	862613	0	True				
ANR	862640	Identifier	bs		862613	0					
ANR	862641	CompoundStatement		9:3:167:205	862613	1					
ANR	862642	IdentifierDeclStatement	zend_code_block * from_block = bs -> from ;	438:3:12589:12627	862613	0	True				
ANR	862643	IdentifierDecl	* from_block = bs -> from		862613	0					
ANR	862644	IdentifierDeclType	zend_code_block *		862613	0					
ANR	862645	Identifier	from_block		862613	1					
ANR	862646	AssignmentExpression	* from_block = bs -> from		862613	2		=			
ANR	862647	Identifier	from_block		862613	0					
ANR	862648	PtrMemberAccess	bs -> from		862613	1					
ANR	862649	Identifier	bs		862613	0					
ANR	862650	Identifier	from		862613	1					
ANR	862651	IdentifierDeclStatement	zend_code_block * to = block -> follow_to ;	439:3:12632:12670	862613	1	True				
ANR	862652	IdentifierDecl	* to = block -> follow_to		862613	0					
ANR	862653	IdentifierDeclType	zend_code_block *		862613	0					
ANR	862654	Identifier	to		862613	1					
ANR	862655	AssignmentExpression	* to = block -> follow_to		862613	2		=			
ANR	862656	Identifier	to		862613	0					
ANR	862657	PtrMemberAccess	block -> follow_to		862613	1					
ANR	862658	Identifier	block		862613	0					
ANR	862659	Identifier	follow_to		862613	1					
ANR	862660	IfStatement	if ( from_block -> op1_to == block )		862613	2					
ANR	862661	Condition	from_block -> op1_to == block	440:7:12679:12705	862613	0	True				
ANR	862662	EqualityExpression	from_block -> op1_to == block		862613	0		==			
ANR	862663	PtrMemberAccess	from_block -> op1_to		862613	0					
ANR	862664	Identifier	from_block		862613	0					
ANR	862665	Identifier	op1_to		862613	1					
ANR	862666	Identifier	block		862613	1					
ANR	862667	CompoundStatement		10:36:243:243	862613	1					
ANR	862668	ExpressionStatement	from_block -> op1_to = to	441:4:12714:12737	862613	0	True				
ANR	862669	AssignmentExpression	from_block -> op1_to = to		862613	0		=			
ANR	862670	PtrMemberAccess	from_block -> op1_to		862613	0					
ANR	862671	Identifier	from_block		862613	0					
ANR	862672	Identifier	op1_to		862613	1					
ANR	862673	Identifier	to		862613	1					
ANR	862674	ExpressionStatement	"ADD_SOURCE ( from_block , to )"	442:4:12743:12769	862613	1	True				
ANR	862675	CallExpression	"ADD_SOURCE ( from_block , to )"		862613	0					
ANR	862676	Callee	ADD_SOURCE		862613	0					
ANR	862677	Identifier	ADD_SOURCE		862613	0					
ANR	862678	ArgumentList	from_block		862613	1					
ANR	862679	Argument	from_block		862613	0					
ANR	862680	Identifier	from_block		862613	0					
ANR	862681	Argument	to		862613	1					
ANR	862682	Identifier	to		862613	0					
ANR	862683	IfStatement	if ( from_block -> op2_to == block )		862613	3					
ANR	862684	Condition	from_block -> op2_to == block	444:7:12783:12809	862613	0	True				
ANR	862685	EqualityExpression	from_block -> op2_to == block		862613	0		==			
ANR	862686	PtrMemberAccess	from_block -> op2_to		862613	0					
ANR	862687	Identifier	from_block		862613	0					
ANR	862688	Identifier	op2_to		862613	1					
ANR	862689	Identifier	block		862613	1					
ANR	862690	CompoundStatement		14:36:347:347	862613	1					
ANR	862691	ExpressionStatement	from_block -> op2_to = to	445:4:12818:12841	862613	0	True				
ANR	862692	AssignmentExpression	from_block -> op2_to = to		862613	0		=			
ANR	862693	PtrMemberAccess	from_block -> op2_to		862613	0					
ANR	862694	Identifier	from_block		862613	0					
ANR	862695	Identifier	op2_to		862613	1					
ANR	862696	Identifier	to		862613	1					
ANR	862697	ExpressionStatement	"ADD_SOURCE ( from_block , to )"	446:4:12847:12873	862613	1	True				
ANR	862698	CallExpression	"ADD_SOURCE ( from_block , to )"		862613	0					
ANR	862699	Callee	ADD_SOURCE		862613	0					
ANR	862700	Identifier	ADD_SOURCE		862613	0					
ANR	862701	ArgumentList	from_block		862613	1					
ANR	862702	Argument	from_block		862613	0					
ANR	862703	Identifier	from_block		862613	0					
ANR	862704	Argument	to		862613	1					
ANR	862705	Identifier	to		862613	0					
ANR	862706	IfStatement	if ( from_block -> ext_to == block )		862613	4					
ANR	862707	Condition	from_block -> ext_to == block	448:7:12887:12913	862613	0	True				
ANR	862708	EqualityExpression	from_block -> ext_to == block		862613	0		==			
ANR	862709	PtrMemberAccess	from_block -> ext_to		862613	0					
ANR	862710	Identifier	from_block		862613	0					
ANR	862711	Identifier	ext_to		862613	1					
ANR	862712	Identifier	block		862613	1					
ANR	862713	CompoundStatement		18:36:451:451	862613	1					
ANR	862714	ExpressionStatement	from_block -> ext_to = to	449:4:12922:12945	862613	0	True				
ANR	862715	AssignmentExpression	from_block -> ext_to = to		862613	0		=			
ANR	862716	PtrMemberAccess	from_block -> ext_to		862613	0					
ANR	862717	Identifier	from_block		862613	0					
ANR	862718	Identifier	ext_to		862613	1					
ANR	862719	Identifier	to		862613	1					
ANR	862720	ExpressionStatement	"ADD_SOURCE ( from_block , to )"	450:4:12951:12977	862613	1	True				
ANR	862721	CallExpression	"ADD_SOURCE ( from_block , to )"		862613	0					
ANR	862722	Callee	ADD_SOURCE		862613	0					
ANR	862723	Identifier	ADD_SOURCE		862613	0					
ANR	862724	ArgumentList	from_block		862613	1					
ANR	862725	Argument	from_block		862613	0					
ANR	862726	Identifier	from_block		862613	0					
ANR	862727	Argument	to		862613	1					
ANR	862728	Identifier	to		862613	0					
ANR	862729	IfStatement	if ( from_block -> follow_to == block )		862613	5					
ANR	862730	Condition	from_block -> follow_to == block	452:7:12991:13020	862613	0	True				
ANR	862731	EqualityExpression	from_block -> follow_to == block		862613	0		==			
ANR	862732	PtrMemberAccess	from_block -> follow_to		862613	0					
ANR	862733	Identifier	from_block		862613	0					
ANR	862734	Identifier	follow_to		862613	1					
ANR	862735	Identifier	block		862613	1					
ANR	862736	CompoundStatement		22:39:558:558	862613	1					
ANR	862737	ExpressionStatement	from_block -> follow_to = to	453:4:13029:13055	862613	0	True				
ANR	862738	AssignmentExpression	from_block -> follow_to = to		862613	0		=			
ANR	862739	PtrMemberAccess	from_block -> follow_to		862613	0					
ANR	862740	Identifier	from_block		862613	0					
ANR	862741	Identifier	follow_to		862613	1					
ANR	862742	Identifier	to		862613	1					
ANR	862743	ExpressionStatement	"ADD_SOURCE ( from_block , to )"	454:4:13061:13087	862613	1	True				
ANR	862744	CallExpression	"ADD_SOURCE ( from_block , to )"		862613	0					
ANR	862745	Callee	ADD_SOURCE		862613	0					
ANR	862746	Identifier	ADD_SOURCE		862613	0					
ANR	862747	ArgumentList	from_block		862613	1					
ANR	862748	Argument	from_block		862613	0					
ANR	862749	Identifier	from_block		862613	0					
ANR	862750	Argument	to		862613	1					
ANR	862751	Identifier	to		862613	0					
ANR	862752	ExpressionStatement	bs = bs -> next	456:3:13097:13110	862613	6	True				
ANR	862753	AssignmentExpression	bs = bs -> next		862613	0		=			
ANR	862754	Identifier	bs		862613	0					
ANR	862755	PtrMemberAccess	bs -> next		862613	1					
ANR	862756	Identifier	bs		862613	0					
ANR	862757	Identifier	next		862613	1					
ANR	862758	ExpressionStatement	block -> access = 0	459:1:13120:13137	862613	2	True				
ANR	862759	AssignmentExpression	block -> access = 0		862613	0		=			
ANR	862760	PtrMemberAccess	block -> access		862613	0					
ANR	862761	Identifier	block		862613	0					
ANR	862762	Identifier	access		862613	1					
ANR	862763	PrimaryExpression	0		862613	1					
ANR	862764	ReturnType	static void		862613	1					
ANR	862765	Identifier	delete_code_block		862613	2					
ANR	862766	ParameterList	zend_code_block * block		862613	3					
ANR	862767	Parameter	zend_code_block * block	430:30:12440:12461	862613	0	True				
ANR	862768	ParameterType	zend_code_block *		862613	0					
ANR	862769	Identifier	block		862613	1					
ANR	862770	CFGEntryNode	ENTRY		862613		True				
ANR	862771	CFGExitNode	EXIT		862613		True				
ANR	862772	Symbol	from_block		862613						
ANR	862773	Symbol	from_block -> follow_to		862613						
ANR	862774	Symbol	block -> protected		862613						
ANR	862775	Symbol	from_block -> ext_to		862613						
ANR	862776	Symbol	block -> follow_to		862613						
ANR	862777	Symbol	block -> sources		862613						
ANR	862778	Symbol	* block		862613						
ANR	862779	Symbol	bs -> next		862613						
ANR	862780	Symbol	bs		862613						
ANR	862781	Symbol	bs -> from		862613						
ANR	862782	Symbol	* bs		862613						
ANR	862783	Symbol	block -> access		862613						
ANR	862784	Symbol	block		862613						
ANR	862785	Symbol	from_block -> op1_to		862613						
ANR	862786	Symbol	to		862613						
ANR	862787	Symbol	* from_block		862613						
ANR	862788	Symbol	from_block -> op2_to		862613						
ANR	862789	Function	zend_access_path	462:0:13142:13646							
ANR	862790	FunctionDef	zend_access_path (zend_code_block * block)		862789	0					
ANR	862791	CompoundStatement		463:0:13195:13646	862789	0					
ANR	862792	IfStatement	if ( block -> access )		862789	0					
ANR	862793	Condition	block -> access	464:5:13202:13214	862789	0	True				
ANR	862794	PtrMemberAccess	block -> access		862789	0					
ANR	862795	Identifier	block		862789	0					
ANR	862796	Identifier	access		862789	1					
ANR	862797	CompoundStatement		2:20:21:21	862789	1					
ANR	862798	ReturnStatement	return ;	465:2:13221:13227	862789	0	True				
ANR	862799	ExpressionStatement	block -> access = 1	468:1:13234:13251	862789	1	True				
ANR	862800	AssignmentExpression	block -> access = 1		862789	0		=			
ANR	862801	PtrMemberAccess	block -> access		862789	0					
ANR	862802	Identifier	block		862789	0					
ANR	862803	Identifier	access		862789	1					
ANR	862804	PrimaryExpression	1		862789	1					
ANR	862805	IfStatement	if ( block -> op1_to )		862789	2					
ANR	862806	Condition	block -> op1_to	469:5:13258:13270	862789	0	True				
ANR	862807	PtrMemberAccess	block -> op1_to		862789	0					
ANR	862808	Identifier	block		862789	0					
ANR	862809	Identifier	op1_to		862789	1					
ANR	862810	CompoundStatement		7:20:77:77	862789	1					
ANR	862811	ExpressionStatement	zend_access_path ( block -> op1_to )	470:2:13277:13308	862789	0	True				
ANR	862812	CallExpression	zend_access_path ( block -> op1_to )		862789	0					
ANR	862813	Callee	zend_access_path		862789	0					
ANR	862814	Identifier	zend_access_path		862789	0					
ANR	862815	ArgumentList	block -> op1_to		862789	1					
ANR	862816	Argument	block -> op1_to		862789	0					
ANR	862817	PtrMemberAccess	block -> op1_to		862789	0					
ANR	862818	Identifier	block		862789	0					
ANR	862819	Identifier	op1_to		862789	1					
ANR	862820	ExpressionStatement	"ADD_SOURCE ( block , block -> op1_to )"	471:2:13312:13344	862789	1	True				
ANR	862821	CallExpression	"ADD_SOURCE ( block , block -> op1_to )"		862789	0					
ANR	862822	Callee	ADD_SOURCE		862789	0					
ANR	862823	Identifier	ADD_SOURCE		862789	0					
ANR	862824	ArgumentList	block		862789	1					
ANR	862825	Argument	block		862789	0					
ANR	862826	Identifier	block		862789	0					
ANR	862827	Argument	block -> op1_to		862789	1					
ANR	862828	PtrMemberAccess	block -> op1_to		862789	0					
ANR	862829	Identifier	block		862789	0					
ANR	862830	Identifier	op1_to		862789	1					
ANR	862831	IfStatement	if ( block -> op2_to )		862789	3					
ANR	862832	Condition	block -> op2_to	473:5:13354:13366	862789	0	True				
ANR	862833	PtrMemberAccess	block -> op2_to		862789	0					
ANR	862834	Identifier	block		862789	0					
ANR	862835	Identifier	op2_to		862789	1					
ANR	862836	CompoundStatement		11:20:173:173	862789	1					
ANR	862837	ExpressionStatement	zend_access_path ( block -> op2_to )	474:2:13373:13404	862789	0	True				
ANR	862838	CallExpression	zend_access_path ( block -> op2_to )		862789	0					
ANR	862839	Callee	zend_access_path		862789	0					
ANR	862840	Identifier	zend_access_path		862789	0					
ANR	862841	ArgumentList	block -> op2_to		862789	1					
ANR	862842	Argument	block -> op2_to		862789	0					
ANR	862843	PtrMemberAccess	block -> op2_to		862789	0					
ANR	862844	Identifier	block		862789	0					
ANR	862845	Identifier	op2_to		862789	1					
ANR	862846	ExpressionStatement	"ADD_SOURCE ( block , block -> op2_to )"	475:2:13408:13440	862789	1	True				
ANR	862847	CallExpression	"ADD_SOURCE ( block , block -> op2_to )"		862789	0					
ANR	862848	Callee	ADD_SOURCE		862789	0					
ANR	862849	Identifier	ADD_SOURCE		862789	0					
ANR	862850	ArgumentList	block		862789	1					
ANR	862851	Argument	block		862789	0					
ANR	862852	Identifier	block		862789	0					
ANR	862853	Argument	block -> op2_to		862789	1					
ANR	862854	PtrMemberAccess	block -> op2_to		862789	0					
ANR	862855	Identifier	block		862789	0					
ANR	862856	Identifier	op2_to		862789	1					
ANR	862857	IfStatement	if ( block -> ext_to )		862789	4					
ANR	862858	Condition	block -> ext_to	477:5:13450:13462	862789	0	True				
ANR	862859	PtrMemberAccess	block -> ext_to		862789	0					
ANR	862860	Identifier	block		862789	0					
ANR	862861	Identifier	ext_to		862789	1					
ANR	862862	CompoundStatement		15:20:269:269	862789	1					
ANR	862863	ExpressionStatement	zend_access_path ( block -> ext_to )	478:2:13469:13500	862789	0	True				
ANR	862864	CallExpression	zend_access_path ( block -> ext_to )		862789	0					
ANR	862865	Callee	zend_access_path		862789	0					
ANR	862866	Identifier	zend_access_path		862789	0					
ANR	862867	ArgumentList	block -> ext_to		862789	1					
ANR	862868	Argument	block -> ext_to		862789	0					
ANR	862869	PtrMemberAccess	block -> ext_to		862789	0					
ANR	862870	Identifier	block		862789	0					
ANR	862871	Identifier	ext_to		862789	1					
ANR	862872	ExpressionStatement	"ADD_SOURCE ( block , block -> ext_to )"	479:2:13504:13536	862789	1	True				
ANR	862873	CallExpression	"ADD_SOURCE ( block , block -> ext_to )"		862789	0					
ANR	862874	Callee	ADD_SOURCE		862789	0					
ANR	862875	Identifier	ADD_SOURCE		862789	0					
ANR	862876	ArgumentList	block		862789	1					
ANR	862877	Argument	block		862789	0					
ANR	862878	Identifier	block		862789	0					
ANR	862879	Argument	block -> ext_to		862789	1					
ANR	862880	PtrMemberAccess	block -> ext_to		862789	0					
ANR	862881	Identifier	block		862789	0					
ANR	862882	Identifier	ext_to		862789	1					
ANR	862883	IfStatement	if ( block -> follow_to )		862789	5					
ANR	862884	Condition	block -> follow_to	481:5:13546:13561	862789	0	True				
ANR	862885	PtrMemberAccess	block -> follow_to		862789	0					
ANR	862886	Identifier	block		862789	0					
ANR	862887	Identifier	follow_to		862789	1					
ANR	862888	CompoundStatement		19:23:368:368	862789	1					
ANR	862889	ExpressionStatement	zend_access_path ( block -> follow_to )	482:2:13568:13602	862789	0	True				
ANR	862890	CallExpression	zend_access_path ( block -> follow_to )		862789	0					
ANR	862891	Callee	zend_access_path		862789	0					
ANR	862892	Identifier	zend_access_path		862789	0					
ANR	862893	ArgumentList	block -> follow_to		862789	1					
ANR	862894	Argument	block -> follow_to		862789	0					
ANR	862895	PtrMemberAccess	block -> follow_to		862789	0					
ANR	862896	Identifier	block		862789	0					
ANR	862897	Identifier	follow_to		862789	1					
ANR	862898	ExpressionStatement	"ADD_SOURCE ( block , block -> follow_to )"	483:2:13606:13641	862789	1	True				
ANR	862899	CallExpression	"ADD_SOURCE ( block , block -> follow_to )"		862789	0					
ANR	862900	Callee	ADD_SOURCE		862789	0					
ANR	862901	Identifier	ADD_SOURCE		862789	0					
ANR	862902	ArgumentList	block		862789	1					
ANR	862903	Argument	block		862789	0					
ANR	862904	Identifier	block		862789	0					
ANR	862905	Argument	block -> follow_to		862789	1					
ANR	862906	PtrMemberAccess	block -> follow_to		862789	0					
ANR	862907	Identifier	block		862789	0					
ANR	862908	Identifier	follow_to		862789	1					
ANR	862909	ReturnType	static void		862789	1					
ANR	862910	Identifier	zend_access_path		862789	2					
ANR	862911	ParameterList	zend_code_block * block		862789	3					
ANR	862912	Parameter	zend_code_block * block	462:29:13171:13192	862789	0	True				
ANR	862913	ParameterType	zend_code_block *		862789	0					
ANR	862914	Identifier	block		862789	1					
ANR	862915	CFGEntryNode	ENTRY		862789		True				
ANR	862916	CFGExitNode	EXIT		862789		True				
ANR	862917	Symbol	block -> access		862789						
ANR	862918	Symbol	block		862789						
ANR	862919	Symbol	block -> ext_to		862789						
ANR	862920	Symbol	block -> follow_to		862789						
ANR	862921	Symbol	block -> op1_to		862789						
ANR	862922	Symbol	block -> op2_to		862789						
ANR	862923	Symbol	* block		862789						
ANR	862924	Function	zend_rebuild_access_path	488:0:13723:14761							
ANR	862925	FunctionDef	"zend_rebuild_access_path (zend_cfg * cfg , zend_op_array * op_array , int find_start)"		862924	0					
ANR	862926	CompoundStatement		489:0:13816:14761	862924	0					
ANR	862927	IdentifierDeclStatement	zend_code_block * blocks = cfg -> blocks ;	490:1:13819:13856	862924	0	True				
ANR	862928	IdentifierDecl	* blocks = cfg -> blocks		862924	0					
ANR	862929	IdentifierDeclType	zend_code_block *		862924	0					
ANR	862930	Identifier	blocks		862924	1					
ANR	862931	AssignmentExpression	* blocks = cfg -> blocks		862924	2		=			
ANR	862932	Identifier	blocks		862924	0					
ANR	862933	PtrMemberAccess	cfg -> blocks		862924	1					
ANR	862934	Identifier	cfg		862924	0					
ANR	862935	Identifier	blocks		862924	1					
ANR	862936	IdentifierDeclStatement	zend_code_block * start = find_start ? NULL : blocks ;	491:1:13859:13909	862924	1	True				
ANR	862937	IdentifierDecl	* start = find_start ? NULL : blocks		862924	0					
ANR	862938	IdentifierDeclType	zend_code_block *		862924	0					
ANR	862939	Identifier	start		862924	1					
ANR	862940	AssignmentExpression	* start = find_start ? NULL : blocks		862924	2		=			
ANR	862941	Identifier	start		862924	0					
ANR	862942	ConditionalExpression	find_start ? NULL : blocks		862924	1					
ANR	862943	Condition	find_start		862924	0					
ANR	862944	Identifier	find_start		862924	0					
ANR	862945	Identifier	NULL		862924	1					
ANR	862946	Identifier	blocks		862924	2					
ANR	862947	IdentifierDeclStatement	zend_code_block * b ;	492:1:13912:13930	862924	2	True				
ANR	862948	IdentifierDecl	* b		862924	0					
ANR	862949	IdentifierDeclType	zend_code_block *		862924	0					
ANR	862950	Identifier	b		862924	1					
ANR	862951	ExpressionStatement	b = blocks	495:1:14001:14011	862924	3	True				
ANR	862952	AssignmentExpression	b = blocks		862924	0		=			
ANR	862953	Identifier	b		862924	0					
ANR	862954	Identifier	blocks		862924	1					
ANR	862955	WhileStatement	while ( b != NULL )		862924	4					
ANR	862956	Condition	b != NULL	496:8:14021:14029	862924	0	True				
ANR	862957	EqualityExpression	b != NULL		862924	0		!=			
ANR	862958	Identifier	b		862924	0					
ANR	862959	Identifier	NULL		862924	1					
ANR	862960	CompoundStatement		9:2:219:240	862924	1					
ANR	862961	IdentifierDeclStatement	zend_block_source * cs ;	497:2:14036:14057	862924	0	True				
ANR	862962	IdentifierDecl	* cs		862924	0					
ANR	862963	IdentifierDeclType	zend_block_source *		862924	0					
ANR	862964	Identifier	cs		862924	1					
ANR	862965	IfStatement	if ( ! start && b -> access )		862924	1					
ANR	862966	Condition	! start && b -> access	498:6:14065:14083	862924	0	True				
ANR	862967	AndExpression	! start && b -> access		862924	0		&&			
ANR	862968	UnaryOperationExpression	! start		862924	0					
ANR	862969	UnaryOperator	!		862924	0					
ANR	862970	Identifier	start		862924	1					
ANR	862971	PtrMemberAccess	b -> access		862924	1					
ANR	862972	Identifier	b		862924	0					
ANR	862973	Identifier	access		862924	1					
ANR	862974	CompoundStatement		10:27:269:269	862924	1					
ANR	862975	ExpressionStatement	start = b	499:3:14091:14100	862924	0	True				
ANR	862976	AssignmentExpression	start = b		862924	0		=			
ANR	862977	Identifier	start		862924	0					
ANR	862978	Identifier	b		862924	1					
ANR	862979	ExpressionStatement	b -> access = 0	501:2:14108:14121	862924	2	True				
ANR	862980	AssignmentExpression	b -> access = 0		862924	0		=			
ANR	862981	PtrMemberAccess	b -> access		862924	0					
ANR	862982	Identifier	b		862924	0					
ANR	862983	Identifier	access		862924	1					
ANR	862984	PrimaryExpression	0		862924	1					
ANR	862985	ExpressionStatement	cs = b -> sources	502:2:14125:14140	862924	3	True				
ANR	862986	AssignmentExpression	cs = b -> sources		862924	0		=			
ANR	862987	Identifier	cs		862924	0					
ANR	862988	PtrMemberAccess	b -> sources		862924	1					
ANR	862989	Identifier	b		862924	0					
ANR	862990	Identifier	sources		862924	1					
ANR	862991	WhileStatement	while ( cs )		862924	4					
ANR	862992	Condition	cs	503:9:14151:14152	862924	0	True				
ANR	862993	Identifier	cs		862924	0					
ANR	862994	CompoundStatement		16:3:343:374	862924	1					
ANR	862995	IdentifierDeclStatement	zend_block_source * n = cs -> next ;	504:3:14160:14191	862924	0	True				
ANR	862996	IdentifierDecl	* n = cs -> next		862924	0					
ANR	862997	IdentifierDeclType	zend_block_source *		862924	0					
ANR	862998	Identifier	n		862924	1					
ANR	862999	AssignmentExpression	* n = cs -> next		862924	2		=			
ANR	863000	Identifier	n		862924	0					
ANR	863001	PtrMemberAccess	cs -> next		862924	1					
ANR	863002	Identifier	cs		862924	0					
ANR	863003	Identifier	next		862924	1					
ANR	863004	ExpressionStatement	efree ( cs )	505:3:14196:14205	862924	1	True				
ANR	863005	CallExpression	efree ( cs )		862924	0					
ANR	863006	Callee	efree		862924	0					
ANR	863007	Identifier	efree		862924	0					
ANR	863008	ArgumentList	cs		862924	1					
ANR	863009	Argument	cs		862924	0					
ANR	863010	Identifier	cs		862924	0					
ANR	863011	ExpressionStatement	cs = n	506:3:14210:14216	862924	2	True				
ANR	863012	AssignmentExpression	cs = n		862924	0		=			
ANR	863013	Identifier	cs		862924	0					
ANR	863014	Identifier	n		862924	1					
ANR	863015	ExpressionStatement	b -> sources = NULL	508:2:14224:14241	862924	5	True				
ANR	863016	AssignmentExpression	b -> sources = NULL		862924	0		=			
ANR	863017	PtrMemberAccess	b -> sources		862924	0					
ANR	863018	Identifier	b		862924	0					
ANR	863019	Identifier	sources		862924	1					
ANR	863020	Identifier	NULL		862924	1					
ANR	863021	ExpressionStatement	b = b -> next	509:2:14245:14256	862924	6	True				
ANR	863022	AssignmentExpression	b = b -> next		862924	0		=			
ANR	863023	Identifier	b		862924	0					
ANR	863024	PtrMemberAccess	b -> next		862924	1					
ANR	863025	Identifier	b		862924	0					
ANR	863026	Identifier	next		862924	1					
ANR	863027	ExpressionStatement	zend_access_path ( start )	513:1:14294:14317	862924	5	True				
ANR	863028	CallExpression	zend_access_path ( start )		862924	0					
ANR	863029	Callee	zend_access_path		862924	0					
ANR	863030	Identifier	zend_access_path		862924	0					
ANR	863031	ArgumentList	start		862924	1					
ANR	863032	Argument	start		862924	0					
ANR	863033	Identifier	start		862924	0					
ANR	863034	IfStatement	if ( op_array -> last_brk_cont )		862924	6					
ANR	863035	Condition	op_array -> last_brk_cont	516:5:14351:14373	862924	0	True				
ANR	863036	PtrMemberAccess	op_array -> last_brk_cont		862924	0					
ANR	863037	Identifier	op_array		862924	0					
ANR	863038	Identifier	last_brk_cont		862924	1					
ANR	863039	CompoundStatement		29:2:563:568	862924	1					
ANR	863040	IdentifierDeclStatement	int i ;	517:2:14380:14385	862924	0	True				
ANR	863041	IdentifierDecl	i		862924	0					
ANR	863042	IdentifierDeclType	int		862924	0					
ANR	863043	Identifier	i		862924	1					
ANR	863044	ForStatement	for ( i = 0 ; i < op_array -> last_brk_cont ; i ++ )		862924	1					
ANR	863045	ForInit	i = 0 ;	518:7:14394:14397	862924	0	True				
ANR	863046	AssignmentExpression	i = 0		862924	0		=			
ANR	863047	Identifier	i		862924	0					
ANR	863048	PrimaryExpression	0		862924	1					
ANR	863049	Condition	i < op_array -> last_brk_cont	518:12:14399:14424	862924	1	True				
ANR	863050	RelationalExpression	i < op_array -> last_brk_cont		862924	0		<			
ANR	863051	Identifier	i		862924	0					
ANR	863052	PtrMemberAccess	op_array -> last_brk_cont		862924	1					
ANR	863053	Identifier	op_array		862924	0					
ANR	863054	Identifier	last_brk_cont		862924	1					
ANR	863055	PostIncDecOperationExpression	i ++	518:40:14427:14429	862924	2	True				
ANR	863056	Identifier	i		862924	0					
ANR	863057	IncDec	++		862924	1					
ANR	863058	CompoundStatement		30:45:615:615	862924	3					
ANR	863059	ExpressionStatement	zend_access_path ( cfg -> loop_start [ i ] )	519:3:14437:14473	862924	0	True				
ANR	863060	CallExpression	zend_access_path ( cfg -> loop_start [ i ] )		862924	0					
ANR	863061	Callee	zend_access_path		862924	0					
ANR	863062	Identifier	zend_access_path		862924	0					
ANR	863063	ArgumentList	cfg -> loop_start [ i ]		862924	1					
ANR	863064	Argument	cfg -> loop_start [ i ]		862924	0					
ANR	863065	ArrayIndexing	cfg -> loop_start [ i ]		862924	0					
ANR	863066	PtrMemberAccess	cfg -> loop_start		862924	0					
ANR	863067	Identifier	cfg		862924	0					
ANR	863068	Identifier	loop_start		862924	1					
ANR	863069	Identifier	i		862924	1					
ANR	863070	ExpressionStatement	zend_access_path ( cfg -> loop_cont [ i ] )	520:3:14478:14513	862924	1	True				
ANR	863071	CallExpression	zend_access_path ( cfg -> loop_cont [ i ] )		862924	0					
ANR	863072	Callee	zend_access_path		862924	0					
ANR	863073	Identifier	zend_access_path		862924	0					
ANR	863074	ArgumentList	cfg -> loop_cont [ i ]		862924	1					
ANR	863075	Argument	cfg -> loop_cont [ i ]		862924	0					
ANR	863076	ArrayIndexing	cfg -> loop_cont [ i ]		862924	0					
ANR	863077	PtrMemberAccess	cfg -> loop_cont		862924	0					
ANR	863078	Identifier	cfg		862924	0					
ANR	863079	Identifier	loop_cont		862924	1					
ANR	863080	Identifier	i		862924	1					
ANR	863081	ExpressionStatement	zend_access_path ( cfg -> loop_brk [ i ] )	521:3:14518:14552	862924	2	True				
ANR	863082	CallExpression	zend_access_path ( cfg -> loop_brk [ i ] )		862924	0					
ANR	863083	Callee	zend_access_path		862924	0					
ANR	863084	Identifier	zend_access_path		862924	0					
ANR	863085	ArgumentList	cfg -> loop_brk [ i ]		862924	1					
ANR	863086	Argument	cfg -> loop_brk [ i ]		862924	0					
ANR	863087	ArrayIndexing	cfg -> loop_brk [ i ]		862924	0					
ANR	863088	PtrMemberAccess	cfg -> loop_brk		862924	0					
ANR	863089	Identifier	cfg		862924	0					
ANR	863090	Identifier	loop_brk		862924	1					
ANR	863091	Identifier	i		862924	1					
ANR	863092	IfStatement	if ( op_array -> last_try_catch )		862924	7					
ANR	863093	Condition	op_array -> last_try_catch	526:5:14594:14617	862924	0	True				
ANR	863094	PtrMemberAccess	op_array -> last_try_catch		862924	0					
ANR	863095	Identifier	op_array		862924	0					
ANR	863096	Identifier	last_try_catch		862924	1					
ANR	863097	CompoundStatement		39:2:807:812	862924	1					
ANR	863098	IdentifierDeclStatement	int i ;	527:2:14624:14629	862924	0	True				
ANR	863099	IdentifierDecl	i		862924	0					
ANR	863100	IdentifierDeclType	int		862924	0					
ANR	863101	Identifier	i		862924	1					
ANR	863102	ForStatement	for ( i = 0 ; i < op_array -> last_try_catch ; i ++ )		862924	1					
ANR	863103	ForInit	i = 0 ;	528:7:14638:14641	862924	0	True				
ANR	863104	AssignmentExpression	i = 0		862924	0		=			
ANR	863105	Identifier	i		862924	0					
ANR	863106	PrimaryExpression	0		862924	1					
ANR	863107	Condition	i < op_array -> last_try_catch	528:12:14643:14669	862924	1	True				
ANR	863108	RelationalExpression	i < op_array -> last_try_catch		862924	0		<			
ANR	863109	Identifier	i		862924	0					
ANR	863110	PtrMemberAccess	op_array -> last_try_catch		862924	1					
ANR	863111	Identifier	op_array		862924	0					
ANR	863112	Identifier	last_try_catch		862924	1					
ANR	863113	PostIncDecOperationExpression	i ++	528:41:14672:14674	862924	2	True				
ANR	863114	Identifier	i		862924	0					
ANR	863115	IncDec	++		862924	1					
ANR	863116	CompoundStatement		40:46:860:860	862924	3					
ANR	863117	Statement	if	529:3:14682:14683	862924	0	True				
ANR	863118	Statement	(	529:6:14685:14685	862924	1	True				
ANR	863119	Statement	!	529:7:14686:14686	862924	2	True				
ANR	863120	Statement	cfg	529:8:14687:14689	862924	3	True				
ANR	863121	Statement	->	529:11:14690:14691	862924	4	True				
ANR	863122	Statement	catch	529:13:14692:14696	862924	5	True				
ANR	863123	Statement	[	529:18:14697:14697	862924	6	True				
ANR	863124	Statement	i	529:19:14698:14698	862924	7	True				
ANR	863125	Statement	]	529:20:14699:14699	862924	8	True				
ANR	863126	Statement	->	529:21:14700:14701	862924	9	True				
ANR	863127	Statement	access	529:23:14702:14707	862924	10	True				
ANR	863128	Statement	)	529:29:14708:14708	862924	11	True				
ANR	863129	CompoundStatement		41:31:893:893	862924	12					
ANR	863130	Statement	zend_access_path	530:4:14716:14731	862924	0	True				
ANR	863131	Statement	(	530:20:14732:14732	862924	1	True				
ANR	863132	Statement	cfg	530:21:14733:14735	862924	2	True				
ANR	863133	Statement	->	530:24:14736:14737	862924	3	True				
ANR	863134	Statement	catch	530:26:14738:14742	862924	4	True				
ANR	863135	Statement	[	530:31:14743:14743	862924	5	True				
ANR	863136	Statement	i	530:32:14744:14744	862924	6	True				
ANR	863137	Statement	]	530:33:14745:14745	862924	7	True				
ANR	863138	Statement	)	530:34:14746:14746	862924	8	True				
ANR	863139	ExpressionStatement		530:35:14747:14747	862924	9	True				
ANR	863140	ReturnType	static void		862924	1					
ANR	863141	Identifier	zend_rebuild_access_path		862924	2					
ANR	863142	ParameterList	"zend_cfg * cfg , zend_op_array * op_array , int find_start"		862924	3					
ANR	863143	Parameter	zend_cfg * cfg	488:37:13760:13772	862924	0	True				
ANR	863144	ParameterType	zend_cfg *		862924	0					
ANR	863145	Identifier	cfg		862924	1					
ANR	863146	Parameter	zend_op_array * op_array	488:52:13775:13797	862924	1	True				
ANR	863147	ParameterType	zend_op_array *		862924	0					
ANR	863148	Identifier	op_array		862924	1					
ANR	863149	Parameter	int find_start	488:77:13800:13813	862924	2	True				
ANR	863150	ParameterType	int		862924	0					
ANR	863151	Identifier	find_start		862924	1					
ANR	863152	CFGEntryNode	ENTRY		862924		True				
ANR	863153	CFGExitNode	EXIT		862924		True				
ANR	863154	Symbol	* cfg -> loop_brk		862924						
ANR	863155	Symbol	cfg -> blocks		862924						
ANR	863156	Symbol	b -> access		862924						
ANR	863157	Symbol	cfg -> loop_brk		862924						
ANR	863158	Symbol	cs -> next		862924						
ANR	863159	Symbol	b -> next		862924						
ANR	863160	Symbol	cfg -> loop_cont		862924						
ANR	863161	Symbol	b		862924						
ANR	863162	Symbol	NULL		862924						
ANR	863163	Symbol	cfg		862924						
ANR	863164	Symbol	blocks		862924						
ANR	863165	Symbol	start		862924						
ANR	863166	Symbol	i		862924						
ANR	863167	Symbol	* b		862924						
ANR	863168	Symbol	n		862924						
ANR	863169	Symbol	* op_array		862924						
ANR	863170	Symbol	op_array -> last_brk_cont		862924						
ANR	863171	Symbol	op_array -> last_try_catch		862924						
ANR	863172	Symbol	find_start		862924						
ANR	863173	Symbol	cs		862924						
ANR	863174	Symbol	* cfg		862924						
ANR	863175	Symbol	b -> sources		862924						
ANR	863176	Symbol	* i		862924						
ANR	863177	Symbol	* cfg -> loop_start		862924						
ANR	863178	Symbol	* cs		862924						
ANR	863179	Symbol	* cfg -> loop_cont		862924						
ANR	863180	Symbol	* * cfg		862924						
ANR	863181	Symbol	cfg -> loop_start		862924						
ANR	863182	Symbol	op_array		862924						
ANR	863183	Function	strip_nop	565:0:15699:16627							
ANR	863184	FunctionDef	strip_nop (zend_code_block * block)		863183	0					
ANR	863185	CompoundStatement		566:0:15745:16627	863183	0					
ANR	863186	IdentifierDeclStatement	zend_op * opline = block -> start_opline ;	567:1:15748:15785	863183	0	True				
ANR	863187	IdentifierDecl	* opline = block -> start_opline		863183	0					
ANR	863188	IdentifierDeclType	zend_op *		863183	0					
ANR	863189	Identifier	opline		863183	1					
ANR	863190	AssignmentExpression	* opline = block -> start_opline		863183	2		=			
ANR	863191	Identifier	opline		863183	0					
ANR	863192	PtrMemberAccess	block -> start_opline		863183	1					
ANR	863193	Identifier	block		863183	0					
ANR	863194	Identifier	start_opline		863183	1					
ANR	863195	IdentifierDeclStatement	"zend_op * end , * new_end ;"	568:1:15788:15810	863183	1	True				
ANR	863196	IdentifierDecl	* end		863183	0					
ANR	863197	IdentifierDeclType	zend_op *		863183	0					
ANR	863198	Identifier	end		863183	1					
ANR	863199	IdentifierDecl	* new_end		863183	1					
ANR	863200	IdentifierDeclType	zend_op *		863183	0					
ANR	863201	Identifier	new_end		863183	1					
ANR	863202	WhileStatement	while ( block -> len > 0 && block -> start_opline -> opcode == ZEND_NOP )		863183	2					
ANR	863203	Condition	block -> len > 0 && block -> start_opline -> opcode == ZEND_NOP	571:8:15848:15904	863183	0	True				
ANR	863204	AndExpression	block -> len > 0 && block -> start_opline -> opcode == ZEND_NOP		863183	0		&&			
ANR	863205	RelationalExpression	block -> len > 0		863183	0		>			
ANR	863206	PtrMemberAccess	block -> len		863183	0					
ANR	863207	Identifier	block		863183	0					
ANR	863208	Identifier	len		863183	1					
ANR	863209	PrimaryExpression	0		863183	1					
ANR	863210	EqualityExpression	block -> start_opline -> opcode == ZEND_NOP		863183	1		==			
ANR	863211	PtrMemberAccess	block -> start_opline -> opcode		863183	0					
ANR	863212	PtrMemberAccess	block -> start_opline		863183	0					
ANR	863213	Identifier	block		863183	0					
ANR	863214	Identifier	start_opline		863183	1					
ANR	863215	Identifier	opcode		863183	1					
ANR	863216	Identifier	ZEND_NOP		863183	1					
ANR	863217	CompoundStatement		6:67:161:161	863183	1					
ANR	863218	IfStatement	if ( block -> len == 1 )		863183	0					
ANR	863219	Condition	block -> len == 1	572:6:15915:15929	863183	0	True				
ANR	863220	EqualityExpression	block -> len == 1		863183	0		==			
ANR	863221	PtrMemberAccess	block -> len		863183	0					
ANR	863222	Identifier	block		863183	0					
ANR	863223	Identifier	len		863183	1					
ANR	863224	PrimaryExpression	1		863183	1					
ANR	863225	CompoundStatement		7:23:186:186	863183	1					
ANR	863226	IfStatement	if ( block -> follow_to )		863183	0					
ANR	863227	Condition	block -> follow_to	574:7:16000:16015	863183	0	True				
ANR	863228	PtrMemberAccess	block -> follow_to		863183	0					
ANR	863229	Identifier	block		863183	0					
ANR	863230	Identifier	follow_to		863183	1					
ANR	863231	CompoundStatement		9:25:272:272	863183	1					
ANR	863232	ExpressionStatement	delete_code_block ( block )	575:4:16024:16048	863183	0	True				
ANR	863233	CallExpression	delete_code_block ( block )		863183	0					
ANR	863234	Callee	delete_code_block		863183	0					
ANR	863235	Identifier	delete_code_block		863183	0					
ANR	863236	ArgumentList	block		863183	1					
ANR	863237	Argument	block		863183	0					
ANR	863238	Identifier	block		863183	0					
ANR	863239	ReturnStatement	return ;	577:3:16058:16064	863183	1	True				
ANR	863240	ExpressionStatement	block -> start_opline ++	579:2:16072:16093	863183	1	True				
ANR	863241	PostIncDecOperationExpression	block -> start_opline ++		863183	0					
ANR	863242	PtrMemberAccess	block -> start_opline		863183	0					
ANR	863243	Identifier	block		863183	0					
ANR	863244	Identifier	start_opline		863183	1					
ANR	863245	IncDec	++		863183	1					
ANR	863246	ExpressionStatement	block -> start_opline_no ++	580:2:16097:16121	863183	2	True				
ANR	863247	PostIncDecOperationExpression	block -> start_opline_no ++		863183	0					
ANR	863248	PtrMemberAccess	block -> start_opline_no		863183	0					
ANR	863249	Identifier	block		863183	0					
ANR	863250	Identifier	start_opline_no		863183	1					
ANR	863251	IncDec	++		863183	1					
ANR	863252	ExpressionStatement	block -> len --	581:2:16125:16137	863183	3	True				
ANR	863253	PostIncDecOperationExpression	block -> len --		863183	0					
ANR	863254	PtrMemberAccess	block -> len		863183	0					
ANR	863255	Identifier	block		863183	0					
ANR	863256	Identifier	len		863183	1					
ANR	863257	IncDec	--		863183	1					
ANR	863258	ExpressionStatement	opline = new_end = block -> start_opline	585:1:16173:16211	863183	3	True				
ANR	863259	AssignmentExpression	opline = new_end = block -> start_opline		863183	0		=			
ANR	863260	Identifier	opline		863183	0					
ANR	863261	AssignmentExpression	new_end = block -> start_opline		863183	1		=			
ANR	863262	Identifier	new_end		863183	0					
ANR	863263	PtrMemberAccess	block -> start_opline		863183	1					
ANR	863264	Identifier	block		863183	0					
ANR	863265	Identifier	start_opline		863183	1					
ANR	863266	ExpressionStatement	end = opline + block -> len	586:1:16214:16239	863183	4	True				
ANR	863267	AssignmentExpression	end = opline + block -> len		863183	0		=			
ANR	863268	Identifier	end		863183	0					
ANR	863269	AdditiveExpression	opline + block -> len		863183	1		+			
ANR	863270	Identifier	opline		863183	0					
ANR	863271	PtrMemberAccess	block -> len		863183	1					
ANR	863272	Identifier	block		863183	0					
ANR	863273	Identifier	len		863183	1					
ANR	863274	WhileStatement	while ( opline < end )		863183	5					
ANR	863275	Condition	opline < end	588:8:16250:16261	863183	0	True				
ANR	863276	RelationalExpression	opline < end		863183	0		<			
ANR	863277	Identifier	opline		863183	0					
ANR	863278	Identifier	end		863183	1					
ANR	863279	CompoundStatement		25:2:538:549	863183	1					
ANR	863280	IdentifierDeclStatement	zend_op * src ;	589:2:16268:16280	863183	0	True				
ANR	863281	IdentifierDecl	* src		863183	0					
ANR	863282	IdentifierDeclType	zend_op *		863183	0					
ANR	863283	Identifier	src		863183	1					
ANR	863284	IdentifierDeclStatement	int len = 0 ;	590:2:16284:16295	863183	1	True				
ANR	863285	IdentifierDecl	len = 0		863183	0					
ANR	863286	IdentifierDeclType	int		863183	0					
ANR	863287	Identifier	len		863183	1					
ANR	863288	AssignmentExpression	len = 0		863183	2		=			
ANR	863289	Identifier	len		863183	0					
ANR	863290	PrimaryExpression	0		863183	1					
ANR	863291	WhileStatement	while ( opline < end && opline -> opcode == ZEND_NOP )		863183	2					
ANR	863292	Condition	opline < end && opline -> opcode == ZEND_NOP	592:9:16307:16348	863183	0	True				
ANR	863293	AndExpression	opline < end && opline -> opcode == ZEND_NOP		863183	0		&&			
ANR	863294	RelationalExpression	opline < end		863183	0		<			
ANR	863295	Identifier	opline		863183	0					
ANR	863296	Identifier	end		863183	1					
ANR	863297	EqualityExpression	opline -> opcode == ZEND_NOP		863183	1		==			
ANR	863298	PtrMemberAccess	opline -> opcode		863183	0					
ANR	863299	Identifier	opline		863183	0					
ANR	863300	Identifier	opcode		863183	1					
ANR	863301	Identifier	ZEND_NOP		863183	1					
ANR	863302	CompoundStatement		27:53:605:605	863183	1					
ANR	863303	ExpressionStatement	opline ++	593:3:16356:16364	863183	0	True				
ANR	863304	PostIncDecOperationExpression	opline ++		863183	0					
ANR	863305	Identifier	opline		863183	0					
ANR	863306	IncDec	++		863183	1					
ANR	863307	ExpressionStatement	src = opline	595:2:16372:16384	863183	3	True				
ANR	863308	AssignmentExpression	src = opline		863183	0		=			
ANR	863309	Identifier	src		863183	0					
ANR	863310	Identifier	opline		863183	1					
ANR	863311	WhileStatement	while ( opline < end && opline -> opcode != ZEND_NOP )		863183	4					
ANR	863312	Condition	opline < end && opline -> opcode != ZEND_NOP	597:9:16396:16437	863183	0	True				
ANR	863313	AndExpression	opline < end && opline -> opcode != ZEND_NOP		863183	0		&&			
ANR	863314	RelationalExpression	opline < end		863183	0		<			
ANR	863315	Identifier	opline		863183	0					
ANR	863316	Identifier	end		863183	1					
ANR	863317	EqualityExpression	opline -> opcode != ZEND_NOP		863183	1		!=			
ANR	863318	PtrMemberAccess	opline -> opcode		863183	0					
ANR	863319	Identifier	opline		863183	0					
ANR	863320	Identifier	opcode		863183	1					
ANR	863321	Identifier	ZEND_NOP		863183	1					
ANR	863322	CompoundStatement		32:53:694:694	863183	1					
ANR	863323	ExpressionStatement	opline ++	598:3:16445:16453	863183	0	True				
ANR	863324	PostIncDecOperationExpression	opline ++		863183	0					
ANR	863325	Identifier	opline		863183	0					
ANR	863326	IncDec	++		863183	1					
ANR	863327	ExpressionStatement	len = opline - src	600:2:16461:16479	863183	5	True				
ANR	863328	AssignmentExpression	len = opline - src		863183	0		=			
ANR	863329	Identifier	len		863183	0					
ANR	863330	AdditiveExpression	opline - src		863183	1		-			
ANR	863331	Identifier	opline		863183	0					
ANR	863332	Identifier	src		863183	1					
ANR	863333	ExpressionStatement	"memmove ( new_end , src , len * sizeof ( zend_op ) )"	603:2:16516:16558	863183	6	True				
ANR	863334	CallExpression	"memmove ( new_end , src , len * sizeof ( zend_op ) )"		863183	0					
ANR	863335	Callee	memmove		863183	0					
ANR	863336	Identifier	memmove		863183	0					
ANR	863337	ArgumentList	new_end		863183	1					
ANR	863338	Argument	new_end		863183	0					
ANR	863339	Identifier	new_end		863183	0					
ANR	863340	Argument	src		863183	1					
ANR	863341	Identifier	src		863183	0					
ANR	863342	Argument	len * sizeof ( zend_op )		863183	2					
ANR	863343	MultiplicativeExpression	len * sizeof ( zend_op )		863183	0		*			
ANR	863344	Identifier	len		863183	0					
ANR	863345	SizeofExpression	sizeof ( zend_op )		863183	1					
ANR	863346	Sizeof	sizeof		863183	0					
ANR	863347	SizeofOperand	zend_op		863183	1					
ANR	863348	ExpressionStatement	new_end += len	605:2:16563:16577	863183	7	True				
ANR	863349	AssignmentExpression	new_end += len		863183	0		+=			
ANR	863350	Identifier	new_end		863183	0					
ANR	863351	Identifier	len		863183	1					
ANR	863352	ExpressionStatement	block -> len = new_end - block -> start_opline	607:1:16583:16625	863183	6	True				
ANR	863353	AssignmentExpression	block -> len = new_end - block -> start_opline		863183	0		=			
ANR	863354	PtrMemberAccess	block -> len		863183	0					
ANR	863355	Identifier	block		863183	0					
ANR	863356	Identifier	len		863183	1					
ANR	863357	AdditiveExpression	new_end - block -> start_opline		863183	1		-			
ANR	863358	Identifier	new_end		863183	0					
ANR	863359	PtrMemberAccess	block -> start_opline		863183	1					
ANR	863360	Identifier	block		863183	0					
ANR	863361	Identifier	start_opline		863183	1					
ANR	863362	ReturnType	static void		863183	1					
ANR	863363	Identifier	strip_nop		863183	2					
ANR	863364	ParameterList	zend_code_block * block		863183	3					
ANR	863365	Parameter	zend_code_block * block	565:22:15721:15742	863183	0	True				
ANR	863366	ParameterType	zend_code_block *		863183	0					
ANR	863367	Identifier	block		863183	1					
ANR	863368	CFGEntryNode	ENTRY		863183		True				
ANR	863369	CFGExitNode	EXIT		863183		True				
ANR	863370	Symbol	* block -> start_opline		863183						
ANR	863371	Symbol	block -> start_opline -> opcode		863183						
ANR	863372	Symbol	src		863183						
ANR	863373	Symbol	block -> follow_to		863183						
ANR	863374	Symbol	ZEND_NOP		863183						
ANR	863375	Symbol	block -> len		863183						
ANR	863376	Symbol	* block		863183						
ANR	863377	Symbol	block -> start_opline		863183						
ANR	863378	Symbol	opline		863183						
ANR	863379	Symbol	len		863183						
ANR	863380	Symbol	* opline		863183						
ANR	863381	Symbol	opline -> opcode		863183						
ANR	863382	Symbol	* * block		863183						
ANR	863383	Symbol	block -> start_opline_no		863183						
ANR	863384	Symbol	block		863183						
ANR	863385	Symbol	end		863183						
ANR	863386	Symbol	new_end		863183						
ANR	863387	DeclStmt									
ANR	863388	Decl							zend_op	zend_op *	opline
ANR	863389	DeclStmt									
ANR	863390	Decl							zend_op	zend_op *	end
ANR	863391	Decl							zend_op	zend_op *	last_op
ANR	863392	DeclStmt									
ANR	863393	Decl							zend_op	zend_op * *	Tsource
ANR	863394	DeclStmt									
ANR	863395	Decl							zend_op	zend_op *	src
ANR	863396	DeclStmt									
ANR	863397	Decl							zval	zval	c
ANR	863398	DeclStmt									
ANR	863399	Decl							zend_op	zend_op *	src
ANR	863400	DeclStmt									
ANR	863401	Decl							zval	zval	c
ANR	863402	DeclStmt									
ANR	863403	Decl							zend_op	zend_op *	src
ANR	863404	DeclStmt									
ANR	863405	Decl							zend_op	zend_op *	src
ANR	863406	DeclStmt									
ANR	863407	Decl							zend_op	zend_op *	src
ANR	863408	DeclStmt									
ANR	863409	Decl							zend_op	zend_op *	fcall
ANR	863410	DeclStmt									
ANR	863411	Decl							zend_op	zend_op *	sv
ANR	863412	DeclStmt									
ANR	863413	Decl							zval	zval *	arg
ANR	863414	DeclStmt									
ANR	863415	Decl							char	char *	fname
ANR	863416	DeclStmt									
ANR	863417	Decl							int	int	flen
ANR	863418	DeclStmt									
ANR	863419	Decl							zval	zval	c
ANR	863420	DeclStmt									
ANR	863421	Decl							zend_function	zend_function *	function
ANR	863422	DeclStmt									
ANR	863423	Decl							zval	zval	c
ANR	863424	DeclStmt									
ANR	863425	Decl							zend_op	zend_op *	src
ANR	863426	DeclStmt									
ANR	863427	Decl							int	int	op_t
ANR	863428	DeclStmt									
ANR	863429	Decl							zend_code_block	zend_code_block *	op_b
ANR	863430	DeclStmt									
ANR	863431	Decl							zend_op	zend_op *	src
ANR	863432	DeclStmt									
ANR	863433	Decl							zend_op	zend_op *	src
ANR	863434	DeclStmt									
ANR	863435	Decl							int	int	l
ANR	863436	DeclStmt									
ANR	863437	Decl							char	char *	tmp
ANR	863438	DeclStmt									
ANR	863439	Decl							zend_op	zend_op *	src
ANR	863440	DeclStmt									
ANR	863441	Decl							int	int	l
ANR	863442	DeclStmt									
ANR	863443	Decl							char	char *	tmp
ANR	863444	DeclStmt									
ANR	863445	Decl							char	char	c
ANR	863446	DeclStmt									
ANR	863447	Decl							zval	zval	result
ANR	863448	DeclStmt									
ANR	863449	Decl							int	int	er
ANR	863450	DeclStmt									
ANR	863451	Decl							unary_op_type	unary_op_type	unary_op
ANR	863452	DeclStmt									
ANR	863453	Decl							zval	zval	result
ANR	863454	DeclStmt									
ANR	863455	Decl							zend_op	zend_op *	src
ANR	863456	DeclStmt									
ANR	863457	Decl							zend_op	zend_op *	src
ANR	863458	DeclStmt									
ANR	863459	Decl							char	char	c
ANR	863460	DeclStmt									
ANR	863461	Decl							zend_op	zend_op *	src
ANR	863462	DeclStmt									
ANR	863463	Decl							char	char	c
ANR	863464	DeclStmt									
ANR	863465	Decl							zend_op	zend_op *	src
ANR	863466	DeclStmt									
ANR	863467	Decl							zend_op	zend_op *	src
ANR	863468	DeclStmt									
ANR	863469	Decl							char	char	c
ANR	863470	DeclStmt									
ANR	863471	Decl							zend_op	zend_op *	src
ANR	863472	Function	assemble_code_blocks	1195:0:38655:42588							
ANR	863473	FunctionDef	"assemble_code_blocks (zend_cfg * cfg , zend_op_array * op_array)"		863472	0					
ANR	863474	CompoundStatement		1196:0:38728:42588	863472	0					
ANR	863475	IdentifierDeclStatement	zend_code_block * blocks = cfg -> blocks ;	1197:1:38731:38768	863472	0	True				
ANR	863476	IdentifierDecl	* blocks = cfg -> blocks		863472	0					
ANR	863477	IdentifierDeclType	zend_code_block *		863472	0					
ANR	863478	Identifier	blocks		863472	1					
ANR	863479	AssignmentExpression	* blocks = cfg -> blocks		863472	2		=			
ANR	863480	Identifier	blocks		863472	0					
ANR	863481	PtrMemberAccess	cfg -> blocks		863472	1					
ANR	863482	Identifier	cfg		863472	0					
ANR	863483	Identifier	blocks		863472	1					
ANR	863484	IdentifierDeclStatement	zend_op * new_opcodes = emalloc ( op_array -> last * sizeof ( zend_op ) ) ;	1198:1:38771:38835	863472	1	True				
ANR	863485	IdentifierDecl	* new_opcodes = emalloc ( op_array -> last * sizeof ( zend_op ) )		863472	0					
ANR	863486	IdentifierDeclType	zend_op *		863472	0					
ANR	863487	Identifier	new_opcodes		863472	1					
ANR	863488	AssignmentExpression	* new_opcodes = emalloc ( op_array -> last * sizeof ( zend_op ) )		863472	2		=			
ANR	863489	Identifier	new_opcodes		863472	0					
ANR	863490	CallExpression	emalloc ( op_array -> last * sizeof ( zend_op ) )		863472	1					
ANR	863491	Callee	emalloc		863472	0					
ANR	863492	Identifier	emalloc		863472	0					
ANR	863493	ArgumentList	op_array -> last * sizeof ( zend_op )		863472	1					
ANR	863494	Argument	op_array -> last * sizeof ( zend_op )		863472	0					
ANR	863495	MultiplicativeExpression	op_array -> last * sizeof ( zend_op )		863472	0		*			
ANR	863496	PtrMemberAccess	op_array -> last		863472	0					
ANR	863497	Identifier	op_array		863472	0					
ANR	863498	Identifier	last		863472	1					
ANR	863499	SizeofExpression	sizeof ( zend_op )		863472	1					
ANR	863500	Sizeof	sizeof		863472	0					
ANR	863501	SizeofOperand	zend_op		863472	1					
ANR	863502	IdentifierDeclStatement	zend_op * opline = new_opcodes ;	1199:1:38838:38867	863472	2	True				
ANR	863503	IdentifierDecl	* opline = new_opcodes		863472	0					
ANR	863504	IdentifierDeclType	zend_op *		863472	0					
ANR	863505	Identifier	opline		863472	1					
ANR	863506	AssignmentExpression	* opline = new_opcodes		863472	2		=			
ANR	863507	Identifier	new_opcodes		863472	0					
ANR	863508	Identifier	new_opcodes		863472	1					
ANR	863509	IdentifierDeclStatement	zend_code_block * cur_block = blocks ;	1200:1:38870:38905	863472	3	True				
ANR	863510	IdentifierDecl	* cur_block = blocks		863472	0					
ANR	863511	IdentifierDeclType	zend_code_block *		863472	0					
ANR	863512	Identifier	cur_block		863472	1					
ANR	863513	AssignmentExpression	* cur_block = blocks		863472	2		=			
ANR	863514	Identifier	blocks		863472	0					
ANR	863515	Identifier	blocks		863472	1					
ANR	863516	WhileStatement	while ( cur_block )		863472	4					
ANR	863517	Condition	cur_block	1203:8:38974:38982	863472	0	True				
ANR	863518	Identifier	cur_block		863472	0					
ANR	863519	CompoundStatement		8:19:256:256	863472	1					
ANR	863520	IfStatement	if ( cur_block -> access )		863472	0					
ANR	863521	Condition	cur_block -> access	1204:6:38993:39009	863472	0	True				
ANR	863522	PtrMemberAccess	cur_block -> access		863472	0					
ANR	863523	Identifier	cur_block		863472	0					
ANR	863524	Identifier	access		863472	1					
ANR	863525	CompoundStatement		9:25:283:283	863472	1					
ANR	863526	ExpressionStatement	"memcpy ( opline , cur_block -> start_opline , cur_block -> len * sizeof ( zend_op ) )"	1205:3:39017:39090	863472	0	True				
ANR	863527	CallExpression	"memcpy ( opline , cur_block -> start_opline , cur_block -> len * sizeof ( zend_op ) )"		863472	0					
ANR	863528	Callee	memcpy		863472	0					
ANR	863529	Identifier	memcpy		863472	0					
ANR	863530	ArgumentList	opline		863472	1					
ANR	863531	Argument	opline		863472	0					
ANR	863532	Identifier	opline		863472	0					
ANR	863533	Argument	cur_block -> start_opline		863472	1					
ANR	863534	PtrMemberAccess	cur_block -> start_opline		863472	0					
ANR	863535	Identifier	cur_block		863472	0					
ANR	863536	Identifier	start_opline		863472	1					
ANR	863537	Argument	cur_block -> len * sizeof ( zend_op )		863472	2					
ANR	863538	MultiplicativeExpression	cur_block -> len * sizeof ( zend_op )		863472	0		*			
ANR	863539	PtrMemberAccess	cur_block -> len		863472	0					
ANR	863540	Identifier	cur_block		863472	0					
ANR	863541	Identifier	len		863472	1					
ANR	863542	SizeofExpression	sizeof ( zend_op )		863472	1					
ANR	863543	Sizeof	sizeof		863472	0					
ANR	863544	SizeofOperand	zend_op		863472	1					
ANR	863545	ExpressionStatement	cur_block -> start_opline = opline	1206:3:39095:39127	863472	1	True				
ANR	863546	AssignmentExpression	cur_block -> start_opline = opline		863472	0		=			
ANR	863547	PtrMemberAccess	cur_block -> start_opline		863472	0					
ANR	863548	Identifier	cur_block		863472	0					
ANR	863549	Identifier	start_opline		863472	1					
ANR	863550	Identifier	opline		863472	1					
ANR	863551	ExpressionStatement	opline += cur_block -> len	1207:3:39132:39156	863472	2	True				
ANR	863552	AssignmentExpression	opline += cur_block -> len		863472	0		+=			
ANR	863553	Identifier	opline		863472	0					
ANR	863554	PtrMemberAccess	cur_block -> len		863472	1					
ANR	863555	Identifier	cur_block		863472	0					
ANR	863556	Identifier	len		863472	1					
ANR	863557	IfStatement	if ( ( opline - 1 ) -> opcode == ZEND_JMP )		863472	3					
ANR	863558	Condition	( opline - 1 ) -> opcode == ZEND_JMP	1208:7:39165:39196	863472	0	True				
ANR	863559	EqualityExpression	( opline - 1 ) -> opcode == ZEND_JMP		863472	0		==			
ANR	863560	PtrMemberAccess	( opline - 1 ) -> opcode		863472	0					
ANR	863561	AdditiveExpression	opline - 1		863472	0		-			
ANR	863562	Identifier	opline		863472	0					
ANR	863563	PrimaryExpression	1		863472	1					
ANR	863564	Identifier	opcode		863472	1					
ANR	863565	Identifier	ZEND_JMP		863472	1					
ANR	863566	CompoundStatement		14:4:476:497	863472	1					
ANR	863567	IdentifierDeclStatement	zend_code_block * next ;	1209:4:39205:39226	863472	0	True				
ANR	863568	IdentifierDecl	* next		863472	0					
ANR	863569	IdentifierDeclType	zend_code_block *		863472	0					
ANR	863570	Identifier	next		863472	1					
ANR	863571	ExpressionStatement	next = cur_block -> next	1210:4:39232:39254	863472	1	True				
ANR	863572	AssignmentExpression	next = cur_block -> next		863472	0		=			
ANR	863573	Identifier	next		863472	0					
ANR	863574	PtrMemberAccess	cur_block -> next		863472	1					
ANR	863575	Identifier	cur_block		863472	0					
ANR	863576	Identifier	next		863472	1					
ANR	863577	WhileStatement	while ( next && ! next -> access )		863472	2					
ANR	863578	Condition	next && ! next -> access	1211:11:39267:39287	863472	0	True				
ANR	863579	AndExpression	next && ! next -> access		863472	0		&&			
ANR	863580	Identifier	next		863472	0					
ANR	863581	UnaryOperationExpression	! next -> access		863472	1					
ANR	863582	UnaryOperator	!		863472	0					
ANR	863583	PtrMemberAccess	next -> access		863472	1					
ANR	863584	Identifier	next		863472	0					
ANR	863585	Identifier	access		863472	1					
ANR	863586	CompoundStatement		16:34:561:561	863472	1					
ANR	863587	ExpressionStatement	next = next -> next	1212:5:39297:39314	863472	0	True				
ANR	863588	AssignmentExpression	next = next -> next		863472	0		=			
ANR	863589	Identifier	next		863472	0					
ANR	863590	PtrMemberAccess	next -> next		863472	1					
ANR	863591	Identifier	next		863472	0					
ANR	863592	Identifier	next		863472	1					
ANR	863593	IfStatement	if ( next && next == cur_block -> op1_to )		863472	3					
ANR	863594	Condition	next && next == cur_block -> op1_to	1214:8:39330:39362	863472	0	True				
ANR	863595	AndExpression	next && next == cur_block -> op1_to		863472	0		&&			
ANR	863596	Identifier	next		863472	0					
ANR	863597	EqualityExpression	next == cur_block -> op1_to		863472	1		==			
ANR	863598	Identifier	next		863472	0					
ANR	863599	PtrMemberAccess	cur_block -> op1_to		863472	1					
ANR	863600	Identifier	cur_block		863472	0					
ANR	863601	Identifier	op1_to		863472	1					
ANR	863602	CompoundStatement		19:43:636:636	863472	1					
ANR	863603	ExpressionStatement	cur_block -> follow_to = cur_block -> op1_to	1216:5:39416:39456	863472	0	True				
ANR	863604	AssignmentExpression	cur_block -> follow_to = cur_block -> op1_to		863472	0		=			
ANR	863605	PtrMemberAccess	cur_block -> follow_to		863472	0					
ANR	863606	Identifier	cur_block		863472	0					
ANR	863607	Identifier	follow_to		863472	1					
ANR	863608	PtrMemberAccess	cur_block -> op1_to		863472	1					
ANR	863609	Identifier	cur_block		863472	0					
ANR	863610	Identifier	op1_to		863472	1					
ANR	863611	ExpressionStatement	cur_block -> op1_to = NULL	1217:5:39463:39487	863472	1	True				
ANR	863612	AssignmentExpression	cur_block -> op1_to = NULL		863472	0		=			
ANR	863613	PtrMemberAccess	cur_block -> op1_to		863472	0					
ANR	863614	Identifier	cur_block		863472	0					
ANR	863615	Identifier	op1_to		863472	1					
ANR	863616	Identifier	NULL		863472	1					
ANR	863617	ExpressionStatement	MAKE_NOP ( ( opline - 1 ) )	1218:5:39494:39516	863472	2	True				
ANR	863618	CallExpression	MAKE_NOP ( ( opline - 1 ) )		863472	0					
ANR	863619	Callee	MAKE_NOP		863472	0					
ANR	863620	Identifier	MAKE_NOP		863472	0					
ANR	863621	ArgumentList	opline - 1		863472	1					
ANR	863622	Argument	opline - 1		863472	0					
ANR	863623	AdditiveExpression	opline - 1		863472	0		-			
ANR	863624	Identifier	opline		863472	0					
ANR	863625	PrimaryExpression	1		863472	1					
ANR	863626	ExpressionStatement	opline --	1219:5:39523:39531	863472	3	True				
ANR	863627	PostIncDecOperationExpression	opline --		863472	0					
ANR	863628	Identifier	opline		863472	0					
ANR	863629	IncDec	--		863472	1					
ANR	863630	ExpressionStatement	cur_block -> len --	1220:5:39538:39554	863472	4	True				
ANR	863631	PostIncDecOperationExpression	cur_block -> len --		863472	0					
ANR	863632	PtrMemberAccess	cur_block -> len		863472	0					
ANR	863633	Identifier	cur_block		863472	0					
ANR	863634	Identifier	len		863472	1					
ANR	863635	IncDec	--		863472	1					
ANR	863636	ElseStatement	else		863472	0					
ANR	863637	CompoundStatement		31:3:935:990	863472	0					
ANR	863638	IdentifierDeclStatement	zend_op * _opl ;	1225:3:39646:39659	863472	0	True				
ANR	863639	IdentifierDecl	* _opl		863472	0					
ANR	863640	IdentifierDeclType	zend_op *		863472	0					
ANR	863641	Identifier	_opl		863472	1					
ANR	863642	IdentifierDeclStatement	zend_op * end = cur_block -> start_opline + cur_block -> len ;	1226:3:39664:39719	863472	1	True				
ANR	863643	IdentifierDecl	* end = cur_block -> start_opline + cur_block -> len		863472	0					
ANR	863644	IdentifierDeclType	zend_op *		863472	0					
ANR	863645	Identifier	end		863472	1					
ANR	863646	AssignmentExpression	* end = cur_block -> start_opline + cur_block -> len		863472	2		=			
ANR	863647	Identifier	end		863472	0					
ANR	863648	AdditiveExpression	cur_block -> start_opline + cur_block -> len		863472	1		+			
ANR	863649	PtrMemberAccess	cur_block -> start_opline		863472	0					
ANR	863650	Identifier	cur_block		863472	0					
ANR	863651	Identifier	start_opline		863472	1					
ANR	863652	PtrMemberAccess	cur_block -> len		863472	1					
ANR	863653	Identifier	cur_block		863472	0					
ANR	863654	Identifier	len		863472	1					
ANR	863655	ForStatement	for ( _opl = cur_block -> start_opline ; _opl && _opl < end ; _opl ++ )		863472	2					
ANR	863656	ForInit	_opl = cur_block -> start_opline ;	1227:8:39729:39759	863472	0	True				
ANR	863657	AssignmentExpression	_opl = cur_block -> start_opline		863472	0		=			
ANR	863658	Identifier	_opl		863472	0					
ANR	863659	PtrMemberAccess	cur_block -> start_opline		863472	1					
ANR	863660	Identifier	cur_block		863472	0					
ANR	863661	Identifier	start_opline		863472	1					
ANR	863662	Condition	_opl && _opl < end	1227:40:39761:39778	863472	1	True				
ANR	863663	AndExpression	_opl && _opl < end		863472	0		&&			
ANR	863664	Identifier	_opl		863472	0					
ANR	863665	RelationalExpression	_opl < end		863472	1		<			
ANR	863666	Identifier	_opl		863472	0					
ANR	863667	Identifier	end		863472	1					
ANR	863668	PostIncDecOperationExpression	_opl ++	1227:60:39781:39786	863472	2	True				
ANR	863669	Identifier	_opl		863472	0					
ANR	863670	IncDec	++		863472	1					
ANR	863671	CompoundStatement		32:68:1060:1060	863472	3					
ANR	863672	IfStatement	if ( ZEND_OP1_TYPE ( _opl ) == IS_CONST )		863472	0					
ANR	863673	Condition	ZEND_OP1_TYPE ( _opl ) == IS_CONST	1228:8:39799:39829	863472	0	True				
ANR	863674	EqualityExpression	ZEND_OP1_TYPE ( _opl ) == IS_CONST		863472	0		==			
ANR	863675	CallExpression	ZEND_OP1_TYPE ( _opl )		863472	0					
ANR	863676	Callee	ZEND_OP1_TYPE		863472	0					
ANR	863677	Identifier	ZEND_OP1_TYPE		863472	0					
ANR	863678	ArgumentList	_opl		863472	1					
ANR	863679	Argument	_opl		863472	0					
ANR	863680	Identifier	_opl		863472	0					
ANR	863681	Identifier	IS_CONST		863472	1					
ANR	863682	CompoundStatement		33:41:1103:1103	863472	1					
ANR	863683	ExpressionStatement	literal_dtor ( & ZEND_OP1_LITERAL ( _opl ) )	1229:5:39839:39876	863472	0	True				
ANR	863684	CallExpression	literal_dtor ( & ZEND_OP1_LITERAL ( _opl ) )		863472	0					
ANR	863685	Callee	literal_dtor		863472	0					
ANR	863686	Identifier	literal_dtor		863472	0					
ANR	863687	ArgumentList	& ZEND_OP1_LITERAL ( _opl )		863472	1					
ANR	863688	Argument	& ZEND_OP1_LITERAL ( _opl )		863472	0					
ANR	863689	UnaryOperationExpression	& ZEND_OP1_LITERAL ( _opl )		863472	0					
ANR	863690	UnaryOperator	&		863472	0					
ANR	863691	CallExpression	ZEND_OP1_LITERAL ( _opl )		863472	1					
ANR	863692	Callee	ZEND_OP1_LITERAL		863472	0					
ANR	863693	Identifier	ZEND_OP1_LITERAL		863472	0					
ANR	863694	ArgumentList	_opl		863472	1					
ANR	863695	Argument	_opl		863472	0					
ANR	863696	Identifier	_opl		863472	0					
ANR	863697	IfStatement	if ( ZEND_OP2_TYPE ( _opl ) == IS_CONST )		863472	1					
ANR	863698	Condition	ZEND_OP2_TYPE ( _opl ) == IS_CONST	1231:8:39892:39922	863472	0	True				
ANR	863699	EqualityExpression	ZEND_OP2_TYPE ( _opl ) == IS_CONST		863472	0		==			
ANR	863700	CallExpression	ZEND_OP2_TYPE ( _opl )		863472	0					
ANR	863701	Callee	ZEND_OP2_TYPE		863472	0					
ANR	863702	Identifier	ZEND_OP2_TYPE		863472	0					
ANR	863703	ArgumentList	_opl		863472	1					
ANR	863704	Argument	_opl		863472	0					
ANR	863705	Identifier	_opl		863472	0					
ANR	863706	Identifier	IS_CONST		863472	1					
ANR	863707	CompoundStatement		36:41:1196:1196	863472	1					
ANR	863708	ExpressionStatement	literal_dtor ( & ZEND_OP2_LITERAL ( _opl ) )	1232:5:39932:39969	863472	0	True				
ANR	863709	CallExpression	literal_dtor ( & ZEND_OP2_LITERAL ( _opl ) )		863472	0					
ANR	863710	Callee	literal_dtor		863472	0					
ANR	863711	Identifier	literal_dtor		863472	0					
ANR	863712	ArgumentList	& ZEND_OP2_LITERAL ( _opl )		863472	1					
ANR	863713	Argument	& ZEND_OP2_LITERAL ( _opl )		863472	0					
ANR	863714	UnaryOperationExpression	& ZEND_OP2_LITERAL ( _opl )		863472	0					
ANR	863715	UnaryOperator	&		863472	0					
ANR	863716	CallExpression	ZEND_OP2_LITERAL ( _opl )		863472	1					
ANR	863717	Callee	ZEND_OP2_LITERAL		863472	0					
ANR	863718	Identifier	ZEND_OP2_LITERAL		863472	0					
ANR	863719	ArgumentList	_opl		863472	1					
ANR	863720	Argument	_opl		863472	0					
ANR	863721	Identifier	_opl		863472	0					
ANR	863722	ExpressionStatement	cur_block = cur_block -> next	1236:2:39988:40015	863472	1	True				
ANR	863723	AssignmentExpression	cur_block = cur_block -> next		863472	0		=			
ANR	863724	Identifier	cur_block		863472	0					
ANR	863725	PtrMemberAccess	cur_block -> next		863472	1					
ANR	863726	Identifier	cur_block		863472	0					
ANR	863727	Identifier	next		863472	1					
ANR	863728	IfStatement	if ( ( opline - 1 ) -> opcode == ZEND_THROW )		863472	5					
ANR	863729	Condition	( opline - 1 ) -> opcode == ZEND_THROW	1239:5:40026:40057	863472	0	True				
ANR	863730	EqualityExpression	( opline - 1 ) -> opcode == ZEND_THROW		863472	0		==			
ANR	863731	PtrMemberAccess	( opline - 1 ) -> opcode		863472	0					
ANR	863732	AdditiveExpression	opline - 1		863472	0		-			
ANR	863733	Identifier	opline		863472	0					
ANR	863734	PrimaryExpression	1		863472	1					
ANR	863735	Identifier	opcode		863472	1					
ANR	863736	Identifier	ZEND_THROW		863472	1					
ANR	863737	CompoundStatement		44:39:1331:1331	863472	1					
ANR	863738	ExpressionStatement	MAKE_NOP ( opline )	1242:2:40185:40201	863472	0	True				
ANR	863739	CallExpression	MAKE_NOP ( opline )		863472	0					
ANR	863740	Callee	MAKE_NOP		863472	0					
ANR	863741	Identifier	MAKE_NOP		863472	0					
ANR	863742	ArgumentList	opline		863472	1					
ANR	863743	Argument	opline		863472	0					
ANR	863744	Identifier	opline		863472	0					
ANR	863745	ExpressionStatement	opline -> lineno = opline [ - 1 ] . lineno	1243:2:40205:40239	863472	1	True				
ANR	863746	AssignmentExpression	opline -> lineno = opline [ - 1 ] . lineno		863472	0		=			
ANR	863747	PtrMemberAccess	opline -> lineno		863472	0					
ANR	863748	Identifier	opline		863472	0					
ANR	863749	Identifier	lineno		863472	1					
ANR	863750	MemberAccess	opline [ - 1 ] . lineno		863472	1					
ANR	863751	ArrayIndexing	opline [ - 1 ]		863472	0					
ANR	863752	Identifier	opline		863472	0					
ANR	863753	UnaryOperationExpression	- 1		863472	1					
ANR	863754	UnaryOperator	-		863472	0					
ANR	863755	PrimaryExpression	1		863472	1					
ANR	863756	Identifier	lineno		863472	1					
ANR	863757	ExpressionStatement	opline ++	1244:2:40243:40251	863472	2	True				
ANR	863758	PostIncDecOperationExpression	opline ++		863472	0					
ANR	863759	Identifier	opline		863472	0					
ANR	863760	IncDec	++		863472	1					
ANR	863761	ExpressionStatement	MAKE_NOP ( opline )	1247:1:40302:40318	863472	6	True				
ANR	863762	CallExpression	MAKE_NOP ( opline )		863472	0					
ANR	863763	Callee	MAKE_NOP		863472	0					
ANR	863764	Identifier	MAKE_NOP		863472	0					
ANR	863765	ArgumentList	opline		863472	1					
ANR	863766	Argument	opline		863472	0					
ANR	863767	Identifier	opline		863472	0					
ANR	863768	ExpressionStatement	opline -> opcode = ZEND_HANDLE_EXCEPTION	1248:1:40321:40359	863472	7	True				
ANR	863769	AssignmentExpression	opline -> opcode = ZEND_HANDLE_EXCEPTION		863472	0		=			
ANR	863770	PtrMemberAccess	opline -> opcode		863472	0					
ANR	863771	Identifier	opline		863472	0					
ANR	863772	Identifier	opcode		863472	1					
ANR	863773	Identifier	ZEND_HANDLE_EXCEPTION		863472	1					
ANR	863774	ExpressionStatement	opline -> lineno = opline [ - 1 ] . lineno	1249:1:40362:40396	863472	8	True				
ANR	863775	AssignmentExpression	opline -> lineno = opline [ - 1 ] . lineno		863472	0		=			
ANR	863776	PtrMemberAccess	opline -> lineno		863472	0					
ANR	863777	Identifier	opline		863472	0					
ANR	863778	Identifier	lineno		863472	1					
ANR	863779	MemberAccess	opline [ - 1 ] . lineno		863472	1					
ANR	863780	ArrayIndexing	opline [ - 1 ]		863472	0					
ANR	863781	Identifier	opline		863472	0					
ANR	863782	UnaryOperationExpression	- 1		863472	1					
ANR	863783	UnaryOperator	-		863472	0					
ANR	863784	PrimaryExpression	1		863472	1					
ANR	863785	Identifier	lineno		863472	1					
ANR	863786	ExpressionStatement	opline ++	1250:1:40399:40407	863472	9	True				
ANR	863787	PostIncDecOperationExpression	opline ++		863472	0					
ANR	863788	Identifier	opline		863472	0					
ANR	863789	IncDec	++		863472	1					
ANR	863790	ExpressionStatement	op_array -> last = opline - new_opcodes	1253:1:40418:40453	863472	10	True				
ANR	863791	AssignmentExpression	op_array -> last = opline - new_opcodes		863472	0		=			
ANR	863792	PtrMemberAccess	op_array -> last		863472	0					
ANR	863793	Identifier	op_array		863472	0					
ANR	863794	Identifier	last		863472	1					
ANR	863795	AdditiveExpression	opline - new_opcodes		863472	1		-			
ANR	863796	Identifier	opline		863472	0					
ANR	863797	Identifier	new_opcodes		863472	1					
ANR	863798	IfStatement	if ( op_array -> last_try_catch )		863472	11					
ANR	863799	Condition	op_array -> last_try_catch	1256:5:40498:40521	863472	0	True				
ANR	863800	PtrMemberAccess	op_array -> last_try_catch		863472	0					
ANR	863801	Identifier	op_array		863472	0					
ANR	863802	Identifier	last_try_catch		863472	1					
ANR	863803	CompoundStatement		62:2:1799:1807	863472	1					
ANR	863804	IdentifierDeclStatement	"int i , j ;"	1257:2:40528:40536	863472	0	True				
ANR	863805	IdentifierDecl	i		863472	0					
ANR	863806	IdentifierDeclType	int		863472	0					
ANR	863807	Identifier	i		863472	1					
ANR	863808	IdentifierDecl	j		863472	1					
ANR	863809	IdentifierDeclType	int		863472	0					
ANR	863810	Identifier	j		863472	1					
ANR	863811	ForStatement	"for ( i = 0 , j = 0 ; i < op_array -> last_try_catch ; i ++ )"		863472	1					
ANR	863812	ForInit	"i = 0 , j = 0 ;"	1258:7:40545:40557	863472	0	True				
ANR	863813	Expression	"i = 0 , j = 0"		863472	0					
ANR	863814	AssignmentExpression	i = 0		863472	0		=			
ANR	863815	Identifier	i		863472	0					
ANR	863816	PrimaryExpression	0		863472	1					
ANR	863817	AssignmentExpression	j = 0		863472	1		=			
ANR	863818	Identifier	j		863472	0					
ANR	863819	PrimaryExpression	0		863472	1					
ANR	863820	Condition	i < op_array -> last_try_catch	1258:21:40559:40585	863472	1	True				
ANR	863821	RelationalExpression	i < op_array -> last_try_catch		863472	0		<			
ANR	863822	Identifier	i		863472	0					
ANR	863823	PtrMemberAccess	op_array -> last_try_catch		863472	1					
ANR	863824	Identifier	op_array		863472	0					
ANR	863825	Identifier	last_try_catch		863472	1					
ANR	863826	PostIncDecOperationExpression	i ++	1258:50:40588:40590	863472	2	True				
ANR	863827	Identifier	i		863472	0					
ANR	863828	IncDec	++		863472	1					
ANR	863829	CompoundStatement		63:55:1864:1864	863472	3					
ANR	863830	Statement	if	1259:3:40598:40599	863472	0	True				
ANR	863831	Statement	(	1259:6:40601:40601	863472	1	True				
ANR	863832	Statement	cfg	1259:7:40602:40604	863472	2	True				
ANR	863833	Statement	->	1259:10:40605:40606	863472	3	True				
ANR	863834	TryStatement	try		863472	4					
ANR	863835	Statement	[		863472	0					
ANR	863836	Statement	i	1259:16:40611:40611	863472	5	True				
ANR	863837	Statement	]	1259:17:40612:40612	863472	6	True				
ANR	863838	Statement	->	1259:18:40613:40614	863472	7	True				
ANR	863839	Statement	access	1259:20:40615:40620	863472	8	True				
ANR	863840	Statement	)	1259:26:40621:40621	863472	9	True				
ANR	863841	CompoundStatement		64:28:1894:1894	863472	10					
ANR	863842	Statement	op_array	1260:4:40629:40636	863472	0	True				
ANR	863843	Statement	->	1260:12:40637:40638	863472	1	True				
ANR	863844	Statement	try_catch_array	1260:14:40639:40653	863472	2	True				
ANR	863845	Statement	[	1260:29:40654:40654	863472	3	True				
ANR	863846	Statement	j	1260:30:40655:40655	863472	4	True				
ANR	863847	Statement	]	1260:31:40656:40656	863472	5	True				
ANR	863848	Statement	.	1260:32:40657:40657	863472	6	True				
ANR	863849	Statement	try_op	1260:33:40658:40663	863472	7	True				
ANR	863850	Statement	=	1260:40:40665:40665	863472	8	True				
ANR	863851	Statement	cfg	1260:42:40667:40669	863472	9	True				
ANR	863852	Statement	->	1260:45:40670:40671	863472	10	True				
ANR	863853	TryStatement	try		863472	11					
ANR	863854	Statement	[		863472	0					
ANR	863855	Statement	i	1260:51:40676:40676	863472	12	True				
ANR	863856	Statement	]	1260:52:40677:40677	863472	13	True				
ANR	863857	Statement	->	1260:53:40678:40679	863472	14	True				
ANR	863858	ExpressionStatement	start_opline - new_opcodes	1260:55:40680:40706	863472	15	True				
ANR	863859	AdditiveExpression	start_opline - new_opcodes		863472	0		-			
ANR	863860	Identifier	start_opline		863472	0					
ANR	863861	Identifier	new_opcodes		863472	1					
ANR	863862	Statement	op_array	1261:4:40712:40719	863472	16	True				
ANR	863863	Statement	->	1261:12:40720:40721	863472	17	True				
ANR	863864	Statement	try_catch_array	1261:14:40722:40736	863472	18	True				
ANR	863865	Statement	[	1261:29:40737:40737	863472	19	True				
ANR	863866	Statement	j	1261:30:40738:40738	863472	20	True				
ANR	863867	Statement	]	1261:31:40739:40739	863472	21	True				
ANR	863868	Statement	.	1261:32:40740:40740	863472	22	True				
ANR	863869	Statement	catch_op	1261:33:40741:40748	863472	23	True				
ANR	863870	Statement	=	1261:42:40750:40750	863472	24	True				
ANR	863871	Statement	cfg	1261:44:40752:40754	863472	25	True				
ANR	863872	Statement	->	1261:47:40755:40756	863472	26	True				
ANR	863873	Statement	catch	1261:49:40757:40761	863472	27	True				
ANR	863874	Statement	[	1261:54:40762:40762	863472	28	True				
ANR	863875	Statement	i	1261:55:40763:40763	863472	29	True				
ANR	863876	Statement	]	1261:56:40764:40764	863472	30	True				
ANR	863877	Statement	->	1261:57:40765:40766	863472	31	True				
ANR	863878	ExpressionStatement	start_opline - new_opcodes	1261:59:40767:40793	863472	32	True				
ANR	863879	AdditiveExpression	start_opline - new_opcodes		863472	0		-			
ANR	863880	Identifier	start_opline		863472	0					
ANR	863881	Identifier	new_opcodes		863472	1					
ANR	863882	ExpressionStatement	j ++	1262:4:40799:40802	863472	33	True				
ANR	863883	PostIncDecOperationExpression	j ++		863472	0					
ANR	863884	Identifier	j		863472	0					
ANR	863885	IncDec	++		863472	1					
ANR	863886	ExpressionStatement	op_array -> last_try_catch = j	1265:2:40815:40843	863472	2	True				
ANR	863887	AssignmentExpression	op_array -> last_try_catch = j		863472	0		=			
ANR	863888	PtrMemberAccess	op_array -> last_try_catch		863472	0					
ANR	863889	Identifier	op_array		863472	0					
ANR	863890	Identifier	last_try_catch		863472	1					
ANR	863891	Identifier	j		863472	1					
ANR	863892	Statement	efree	1266:2:40847:40851	863472	3	True				
ANR	863893	Statement	(	1266:7:40852:40852	863472	4	True				
ANR	863894	Statement	cfg	1266:8:40853:40855	863472	5	True				
ANR	863895	Statement	->	1266:11:40856:40857	863472	6	True				
ANR	863896	TryStatement	try		863472	7					
ANR	863897	Statement	)		863472	0					
ANR	863898	ExpressionStatement		1266:17:40862:40862	863472	8	True				
ANR	863899	Statement	efree	1267:2:40866:40870	863472	9	True				
ANR	863900	Statement	(	1267:7:40871:40871	863472	10	True				
ANR	863901	Statement	cfg	1267:8:40872:40874	863472	11	True				
ANR	863902	Statement	->	1267:11:40875:40876	863472	12	True				
ANR	863903	Statement	catch	1267:13:40877:40881	863472	13	True				
ANR	863904	Statement	)	1267:18:40882:40882	863472	14	True				
ANR	863905	ExpressionStatement		1267:19:40883:40883	863472	15	True				
ANR	863906	IfStatement	if ( op_array -> last_brk_cont )		863472	12					
ANR	863907	Condition	op_array -> last_brk_cont	1271:5:40926:40948	863472	0	True				
ANR	863908	PtrMemberAccess	op_array -> last_brk_cont		863472	0					
ANR	863909	Identifier	op_array		863472	0					
ANR	863910	Identifier	last_brk_cont		863472	1					
ANR	863911	CompoundStatement		77:2:2226:2231	863472	1					
ANR	863912	IdentifierDeclStatement	int i ;	1272:2:40955:40960	863472	0	True				
ANR	863913	IdentifierDecl	i		863472	0					
ANR	863914	IdentifierDeclType	int		863472	0					
ANR	863915	Identifier	i		863472	1					
ANR	863916	ForStatement	for ( i = 0 ; i < op_array -> last_brk_cont ; i ++ )		863472	1					
ANR	863917	ForInit	i = 0 ;	1273:7:40969:40974	863472	0	True				
ANR	863918	AssignmentExpression	i = 0		863472	0		=			
ANR	863919	Identifier	i		863472	0					
ANR	863920	PrimaryExpression	0		863472	1					
ANR	863921	Condition	i < op_array -> last_brk_cont	1273:14:40976:41001	863472	1	True				
ANR	863922	RelationalExpression	i < op_array -> last_brk_cont		863472	0		<			
ANR	863923	Identifier	i		863472	0					
ANR	863924	PtrMemberAccess	op_array -> last_brk_cont		863472	1					
ANR	863925	Identifier	op_array		863472	0					
ANR	863926	Identifier	last_brk_cont		863472	1					
ANR	863927	PostIncDecOperationExpression	i ++	1273:42:41004:41006	863472	2	True				
ANR	863928	Identifier	i		863472	0					
ANR	863929	IncDec	++		863472	1					
ANR	863930	CompoundStatement		78:47:2280:2280	863472	3					
ANR	863931	ExpressionStatement	op_array -> brk_cont_array [ i ] . start = cfg -> loop_start [ i ] -> start_opline - new_opcodes	1274:3:41014:41096	863472	0	True				
ANR	863932	AssignmentExpression	op_array -> brk_cont_array [ i ] . start = cfg -> loop_start [ i ] -> start_opline - new_opcodes		863472	0		=			
ANR	863933	MemberAccess	op_array -> brk_cont_array [ i ] . start		863472	0					
ANR	863934	ArrayIndexing	op_array -> brk_cont_array [ i ]		863472	0					
ANR	863935	PtrMemberAccess	op_array -> brk_cont_array		863472	0					
ANR	863936	Identifier	op_array		863472	0					
ANR	863937	Identifier	brk_cont_array		863472	1					
ANR	863938	Identifier	i		863472	1					
ANR	863939	Identifier	start		863472	1					
ANR	863940	AdditiveExpression	cfg -> loop_start [ i ] -> start_opline - new_opcodes		863472	1		-			
ANR	863941	PtrMemberAccess	cfg -> loop_start [ i ] -> start_opline		863472	0					
ANR	863942	ArrayIndexing	cfg -> loop_start [ i ]		863472	0					
ANR	863943	PtrMemberAccess	cfg -> loop_start		863472	0					
ANR	863944	Identifier	cfg		863472	0					
ANR	863945	Identifier	loop_start		863472	1					
ANR	863946	Identifier	i		863472	1					
ANR	863947	Identifier	start_opline		863472	1					
ANR	863948	Identifier	new_opcodes		863472	1					
ANR	863949	ExpressionStatement	op_array -> brk_cont_array [ i ] . cont = cfg -> loop_cont [ i ] -> start_opline - new_opcodes	1275:3:41101:41181	863472	1	True				
ANR	863950	AssignmentExpression	op_array -> brk_cont_array [ i ] . cont = cfg -> loop_cont [ i ] -> start_opline - new_opcodes		863472	0		=			
ANR	863951	MemberAccess	op_array -> brk_cont_array [ i ] . cont		863472	0					
ANR	863952	ArrayIndexing	op_array -> brk_cont_array [ i ]		863472	0					
ANR	863953	PtrMemberAccess	op_array -> brk_cont_array		863472	0					
ANR	863954	Identifier	op_array		863472	0					
ANR	863955	Identifier	brk_cont_array		863472	1					
ANR	863956	Identifier	i		863472	1					
ANR	863957	Identifier	cont		863472	1					
ANR	863958	AdditiveExpression	cfg -> loop_cont [ i ] -> start_opline - new_opcodes		863472	1		-			
ANR	863959	PtrMemberAccess	cfg -> loop_cont [ i ] -> start_opline		863472	0					
ANR	863960	ArrayIndexing	cfg -> loop_cont [ i ]		863472	0					
ANR	863961	PtrMemberAccess	cfg -> loop_cont		863472	0					
ANR	863962	Identifier	cfg		863472	0					
ANR	863963	Identifier	loop_cont		863472	1					
ANR	863964	Identifier	i		863472	1					
ANR	863965	Identifier	start_opline		863472	1					
ANR	863966	Identifier	new_opcodes		863472	1					
ANR	863967	ExpressionStatement	op_array -> brk_cont_array [ i ] . brk = cfg -> loop_brk [ i ] -> start_opline - new_opcodes	1276:3:41186:41264	863472	2	True				
ANR	863968	AssignmentExpression	op_array -> brk_cont_array [ i ] . brk = cfg -> loop_brk [ i ] -> start_opline - new_opcodes		863472	0		=			
ANR	863969	MemberAccess	op_array -> brk_cont_array [ i ] . brk		863472	0					
ANR	863970	ArrayIndexing	op_array -> brk_cont_array [ i ]		863472	0					
ANR	863971	PtrMemberAccess	op_array -> brk_cont_array		863472	0					
ANR	863972	Identifier	op_array		863472	0					
ANR	863973	Identifier	brk_cont_array		863472	1					
ANR	863974	Identifier	i		863472	1					
ANR	863975	Identifier	brk		863472	1					
ANR	863976	AdditiveExpression	cfg -> loop_brk [ i ] -> start_opline - new_opcodes		863472	1		-			
ANR	863977	PtrMemberAccess	cfg -> loop_brk [ i ] -> start_opline		863472	0					
ANR	863978	ArrayIndexing	cfg -> loop_brk [ i ]		863472	0					
ANR	863979	PtrMemberAccess	cfg -> loop_brk		863472	0					
ANR	863980	Identifier	cfg		863472	0					
ANR	863981	Identifier	loop_brk		863472	1					
ANR	863982	Identifier	i		863472	1					
ANR	863983	Identifier	start_opline		863472	1					
ANR	863984	Identifier	new_opcodes		863472	1					
ANR	863985	ExpressionStatement	efree ( cfg -> loop_start )	1278:2:41272:41294	863472	2	True				
ANR	863986	CallExpression	efree ( cfg -> loop_start )		863472	0					
ANR	863987	Callee	efree		863472	0					
ANR	863988	Identifier	efree		863472	0					
ANR	863989	ArgumentList	cfg -> loop_start		863472	1					
ANR	863990	Argument	cfg -> loop_start		863472	0					
ANR	863991	PtrMemberAccess	cfg -> loop_start		863472	0					
ANR	863992	Identifier	cfg		863472	0					
ANR	863993	Identifier	loop_start		863472	1					
ANR	863994	ExpressionStatement	efree ( cfg -> loop_cont )	1279:2:41298:41319	863472	3	True				
ANR	863995	CallExpression	efree ( cfg -> loop_cont )		863472	0					
ANR	863996	Callee	efree		863472	0					
ANR	863997	Identifier	efree		863472	0					
ANR	863998	ArgumentList	cfg -> loop_cont		863472	1					
ANR	863999	Argument	cfg -> loop_cont		863472	0					
ANR	864000	PtrMemberAccess	cfg -> loop_cont		863472	0					
ANR	864001	Identifier	cfg		863472	0					
ANR	864002	Identifier	loop_cont		863472	1					
ANR	864003	ExpressionStatement	efree ( cfg -> loop_brk )	1280:2:41323:41343	863472	4	True				
ANR	864004	CallExpression	efree ( cfg -> loop_brk )		863472	0					
ANR	864005	Callee	efree		863472	0					
ANR	864006	Identifier	efree		863472	0					
ANR	864007	ArgumentList	cfg -> loop_brk		863472	1					
ANR	864008	Argument	cfg -> loop_brk		863472	0					
ANR	864009	PtrMemberAccess	cfg -> loop_brk		863472	0					
ANR	864010	Identifier	cfg		863472	0					
ANR	864011	Identifier	loop_brk		863472	1					
ANR	864012	ForStatement	for ( cur_block = blocks ; cur_block ; cur_block = cur_block -> next )		863472	13					
ANR	864013	ForInit	cur_block = blocks ;	1284:6:41385:41403	863472	0	True				
ANR	864014	AssignmentExpression	cur_block = blocks		863472	0		=			
ANR	864015	Identifier	cur_block		863472	0					
ANR	864016	Identifier	blocks		863472	1					
ANR	864017	Condition	cur_block	1284:26:41405:41413	863472	1	True				
ANR	864018	Identifier	cur_block		863472	0					
ANR	864019	AssignmentExpression	cur_block = cur_block -> next	1284:37:41416:41442	863472	2	True	=			
ANR	864020	Identifier	cur_block		863472	0					
ANR	864021	PtrMemberAccess	cur_block -> next		863472	1					
ANR	864022	Identifier	cur_block		863472	0					
ANR	864023	Identifier	next		863472	1					
ANR	864024	CompoundStatement		89:66:2716:2716	863472	3					
ANR	864025	IfStatement	if ( ! cur_block -> access )		863472	0					
ANR	864026	Condition	! cur_block -> access	1285:6:41453:41470	863472	0	True				
ANR	864027	UnaryOperationExpression	! cur_block -> access		863472	0					
ANR	864028	UnaryOperator	!		863472	0					
ANR	864029	PtrMemberAccess	cur_block -> access		863472	1					
ANR	864030	Identifier	cur_block		863472	0					
ANR	864031	Identifier	access		863472	1					
ANR	864032	CompoundStatement		90:26:2744:2744	863472	1					
ANR	864033	ContinueStatement	continue ;	1286:3:41478:41486	863472	0	True				
ANR	864034	ExpressionStatement	opline = cur_block -> start_opline + cur_block -> len - 1	1288:2:41494:41547	863472	1	True				
ANR	864035	AssignmentExpression	opline = cur_block -> start_opline + cur_block -> len - 1		863472	0		=			
ANR	864036	Identifier	opline		863472	0					
ANR	864037	AdditiveExpression	cur_block -> start_opline + cur_block -> len - 1		863472	1		+			
ANR	864038	PtrMemberAccess	cur_block -> start_opline		863472	0					
ANR	864039	Identifier	cur_block		863472	0					
ANR	864040	Identifier	start_opline		863472	1					
ANR	864041	AdditiveExpression	cur_block -> len - 1		863472	1		-			
ANR	864042	PtrMemberAccess	cur_block -> len		863472	0					
ANR	864043	Identifier	cur_block		863472	0					
ANR	864044	Identifier	len		863472	1					
ANR	864045	PrimaryExpression	1		863472	1					
ANR	864046	IfStatement	if ( opline -> opcode == ZEND_OP_DATA )		863472	2					
ANR	864047	Condition	opline -> opcode == ZEND_OP_DATA	1289:6:41555:41584	863472	0	True				
ANR	864048	EqualityExpression	opline -> opcode == ZEND_OP_DATA		863472	0		==			
ANR	864049	PtrMemberAccess	opline -> opcode		863472	0					
ANR	864050	Identifier	opline		863472	0					
ANR	864051	Identifier	opcode		863472	1					
ANR	864052	Identifier	ZEND_OP_DATA		863472	1					
ANR	864053	CompoundStatement		94:38:2858:2858	863472	1					
ANR	864054	ExpressionStatement	opline --	1290:3:41592:41600	863472	0	True				
ANR	864055	PostIncDecOperationExpression	opline --		863472	0					
ANR	864056	Identifier	opline		863472	0					
ANR	864057	IncDec	--		863472	1					
ANR	864058	IfStatement	if ( cur_block -> op1_to )		863472	3					
ANR	864059	Condition	cur_block -> op1_to	1292:6:41612:41628	863472	0	True				
ANR	864060	PtrMemberAccess	cur_block -> op1_to		863472	0					
ANR	864061	Identifier	cur_block		863472	0					
ANR	864062	Identifier	op1_to		863472	1					
ANR	864063	CompoundStatement		97:25:2902:2902	863472	1					
ANR	864064	ExpressionStatement	ZEND_OP1 ( opline ) . opline_num = cur_block -> op1_to -> start_opline - new_opcodes	1293:3:41636:41711	863472	0	True				
ANR	864065	AssignmentExpression	ZEND_OP1 ( opline ) . opline_num = cur_block -> op1_to -> start_opline - new_opcodes		863472	0		=			
ANR	864066	MemberAccess	ZEND_OP1 ( opline ) . opline_num		863472	0					
ANR	864067	CallExpression	ZEND_OP1 ( opline )		863472	0					
ANR	864068	Callee	ZEND_OP1		863472	0					
ANR	864069	Identifier	ZEND_OP1		863472	0					
ANR	864070	ArgumentList	opline		863472	1					
ANR	864071	Argument	opline		863472	0					
ANR	864072	Identifier	opline		863472	0					
ANR	864073	Identifier	opline_num		863472	1					
ANR	864074	AdditiveExpression	cur_block -> op1_to -> start_opline - new_opcodes		863472	1		-			
ANR	864075	PtrMemberAccess	cur_block -> op1_to -> start_opline		863472	0					
ANR	864076	PtrMemberAccess	cur_block -> op1_to		863472	0					
ANR	864077	Identifier	cur_block		863472	0					
ANR	864078	Identifier	op1_to		863472	1					
ANR	864079	Identifier	start_opline		863472	1					
ANR	864080	Identifier	new_opcodes		863472	1					
ANR	864081	IfStatement	if ( cur_block -> op2_to )		863472	4					
ANR	864082	Condition	cur_block -> op2_to	1295:6:41723:41739	863472	0	True				
ANR	864083	PtrMemberAccess	cur_block -> op2_to		863472	0					
ANR	864084	Identifier	cur_block		863472	0					
ANR	864085	Identifier	op2_to		863472	1					
ANR	864086	CompoundStatement		100:25:3013:3013	863472	1					
ANR	864087	ExpressionStatement	ZEND_OP2 ( opline ) . opline_num = cur_block -> op2_to -> start_opline - new_opcodes	1296:3:41747:41822	863472	0	True				
ANR	864088	AssignmentExpression	ZEND_OP2 ( opline ) . opline_num = cur_block -> op2_to -> start_opline - new_opcodes		863472	0		=			
ANR	864089	MemberAccess	ZEND_OP2 ( opline ) . opline_num		863472	0					
ANR	864090	CallExpression	ZEND_OP2 ( opline )		863472	0					
ANR	864091	Callee	ZEND_OP2		863472	0					
ANR	864092	Identifier	ZEND_OP2		863472	0					
ANR	864093	ArgumentList	opline		863472	1					
ANR	864094	Argument	opline		863472	0					
ANR	864095	Identifier	opline		863472	0					
ANR	864096	Identifier	opline_num		863472	1					
ANR	864097	AdditiveExpression	cur_block -> op2_to -> start_opline - new_opcodes		863472	1		-			
ANR	864098	PtrMemberAccess	cur_block -> op2_to -> start_opline		863472	0					
ANR	864099	PtrMemberAccess	cur_block -> op2_to		863472	0					
ANR	864100	Identifier	cur_block		863472	0					
ANR	864101	Identifier	op2_to		863472	1					
ANR	864102	Identifier	start_opline		863472	1					
ANR	864103	Identifier	new_opcodes		863472	1					
ANR	864104	IfStatement	if ( cur_block -> ext_to )		863472	5					
ANR	864105	Condition	cur_block -> ext_to	1298:6:41834:41850	863472	0	True				
ANR	864106	PtrMemberAccess	cur_block -> ext_to		863472	0					
ANR	864107	Identifier	cur_block		863472	0					
ANR	864108	Identifier	ext_to		863472	1					
ANR	864109	CompoundStatement		103:25:3124:3124	863472	1					
ANR	864110	ExpressionStatement	opline -> extended_value = cur_block -> ext_to -> start_opline - new_opcodes	1299:3:41858:41928	863472	0	True				
ANR	864111	AssignmentExpression	opline -> extended_value = cur_block -> ext_to -> start_opline - new_opcodes		863472	0		=			
ANR	864112	PtrMemberAccess	opline -> extended_value		863472	0					
ANR	864113	Identifier	opline		863472	0					
ANR	864114	Identifier	extended_value		863472	1					
ANR	864115	AdditiveExpression	cur_block -> ext_to -> start_opline - new_opcodes		863472	1		-			
ANR	864116	PtrMemberAccess	cur_block -> ext_to -> start_opline		863472	0					
ANR	864117	PtrMemberAccess	cur_block -> ext_to		863472	0					
ANR	864118	Identifier	cur_block		863472	0					
ANR	864119	Identifier	ext_to		863472	1					
ANR	864120	Identifier	start_opline		863472	1					
ANR	864121	Identifier	new_opcodes		863472	1					
ANR	864122	ExpressionStatement	"print_block ( cur_block , new_opcodes , ""Out "" )"	1301:2:41936:41979	863472	6	True				
ANR	864123	CallExpression	"print_block ( cur_block , new_opcodes , ""Out "" )"		863472	0					
ANR	864124	Callee	print_block		863472	0					
ANR	864125	Identifier	print_block		863472	0					
ANR	864126	ArgumentList	cur_block		863472	1					
ANR	864127	Argument	cur_block		863472	0					
ANR	864128	Identifier	cur_block		863472	0					
ANR	864129	Argument	new_opcodes		863472	1					
ANR	864130	Identifier	new_opcodes		863472	0					
ANR	864131	Argument	"""Out """		863472	2					
ANR	864132	PrimaryExpression	"""Out """		863472	0					
ANR	864133	ExpressionStatement	efree ( op_array -> opcodes )	1303:1:41985:42009	863472	14	True				
ANR	864134	CallExpression	efree ( op_array -> opcodes )		863472	0					
ANR	864135	Callee	efree		863472	0					
ANR	864136	Identifier	efree		863472	0					
ANR	864137	ArgumentList	op_array -> opcodes		863472	1					
ANR	864138	Argument	op_array -> opcodes		863472	0					
ANR	864139	PtrMemberAccess	op_array -> opcodes		863472	0					
ANR	864140	Identifier	op_array		863472	0					
ANR	864141	Identifier	opcodes		863472	1					
ANR	864142	ExpressionStatement	"op_array -> opcodes = erealloc ( new_opcodes , op_array -> last * sizeof ( zend_op ) )"	1304:1:42012:42087	863472	15	True				
ANR	864143	AssignmentExpression	"op_array -> opcodes = erealloc ( new_opcodes , op_array -> last * sizeof ( zend_op ) )"		863472	0		=			
ANR	864144	PtrMemberAccess	op_array -> opcodes		863472	0					
ANR	864145	Identifier	op_array		863472	0					
ANR	864146	Identifier	opcodes		863472	1					
ANR	864147	CallExpression	"erealloc ( new_opcodes , op_array -> last * sizeof ( zend_op ) )"		863472	1					
ANR	864148	Callee	erealloc		863472	0					
ANR	864149	Identifier	erealloc		863472	0					
ANR	864150	ArgumentList	new_opcodes		863472	1					
ANR	864151	Argument	new_opcodes		863472	0					
ANR	864152	Identifier	new_opcodes		863472	0					
ANR	864153	Argument	op_array -> last * sizeof ( zend_op )		863472	1					
ANR	864154	MultiplicativeExpression	op_array -> last * sizeof ( zend_op )		863472	0		*			
ANR	864155	PtrMemberAccess	op_array -> last		863472	0					
ANR	864156	Identifier	op_array		863472	0					
ANR	864157	Identifier	last		863472	1					
ANR	864158	SizeofExpression	sizeof ( zend_op )		863472	1					
ANR	864159	Sizeof	sizeof		863472	0					
ANR	864160	SizeofOperand	zend_op		863472	1					
ANR	864161	IfStatement	if ( op_array -> early_binding != ( zend_uint ) - 1 )		863472	16					
ANR	864162	Condition	op_array -> early_binding != ( zend_uint ) - 1	1308:5:42174:42213	863472	0	True				
ANR	864163	EqualityExpression	op_array -> early_binding != ( zend_uint ) - 1		863472	0		!=			
ANR	864164	PtrMemberAccess	op_array -> early_binding		863472	0					
ANR	864165	Identifier	op_array		863472	0					
ANR	864166	Identifier	early_binding		863472	1					
ANR	864167	CastExpression	( zend_uint ) - 1		863472	1					
ANR	864168	CastTarget	zend_uint		863472	0					
ANR	864169	UnaryOperationExpression	- 1		863472	1					
ANR	864170	UnaryOperator	-		863472	0					
ANR	864171	PrimaryExpression	1		863472	1					
ANR	864172	CompoundStatement		115:2:3543:3555	863472	1					
ANR	864173	IdentifierDeclStatement	zend_uint * opline_num = & op_array -> early_binding ;	1309:2:42220:42268	863472	0	True				
ANR	864174	IdentifierDecl	* opline_num = & op_array -> early_binding		863472	0					
ANR	864175	IdentifierDeclType	zend_uint *		863472	0					
ANR	864176	Identifier	opline_num		863472	1					
ANR	864177	AssignmentExpression	* opline_num = & op_array -> early_binding		863472	2		=			
ANR	864178	Identifier	opline_num		863472	0					
ANR	864179	UnaryOperationExpression	& op_array -> early_binding		863472	1					
ANR	864180	UnaryOperator	&		863472	0					
ANR	864181	PtrMemberAccess	op_array -> early_binding		863472	1					
ANR	864182	Identifier	op_array		863472	0					
ANR	864183	Identifier	early_binding		863472	1					
ANR	864184	IdentifierDeclStatement	zend_op * end ;	1310:2:42272:42284	863472	1	True				
ANR	864185	IdentifierDecl	* end		863472	0					
ANR	864186	IdentifierDeclType	zend_op *		863472	0					
ANR	864187	Identifier	end		863472	1					
ANR	864188	ExpressionStatement	opline = op_array -> opcodes	1312:2:42289:42315	863472	2	True				
ANR	864189	AssignmentExpression	opline = op_array -> opcodes		863472	0		=			
ANR	864190	Identifier	opline		863472	0					
ANR	864191	PtrMemberAccess	op_array -> opcodes		863472	1					
ANR	864192	Identifier	op_array		863472	0					
ANR	864193	Identifier	opcodes		863472	1					
ANR	864194	ExpressionStatement	end = opline + op_array -> last	1313:2:42319:42348	863472	3	True				
ANR	864195	AssignmentExpression	end = opline + op_array -> last		863472	0		=			
ANR	864196	Identifier	end		863472	0					
ANR	864197	AdditiveExpression	opline + op_array -> last		863472	1		+			
ANR	864198	Identifier	opline		863472	0					
ANR	864199	PtrMemberAccess	op_array -> last		863472	1					
ANR	864200	Identifier	op_array		863472	0					
ANR	864201	Identifier	last		863472	1					
ANR	864202	WhileStatement	while ( opline < end )		863472	4					
ANR	864203	Condition	opline < end	1314:9:42359:42370	863472	0	True				
ANR	864204	RelationalExpression	opline < end		863472	0		<			
ANR	864205	Identifier	opline		863472	0					
ANR	864206	Identifier	end		863472	1					
ANR	864207	CompoundStatement		119:23:3644:3644	863472	1					
ANR	864208	IfStatement	if ( opline -> opcode == ZEND_DECLARE_INHERITED_CLASS_DELAYED )		863472	0					
ANR	864209	Condition	opline -> opcode == ZEND_DECLARE_INHERITED_CLASS_DELAYED	1315:7:42382:42435	863472	0	True				
ANR	864210	EqualityExpression	opline -> opcode == ZEND_DECLARE_INHERITED_CLASS_DELAYED		863472	0		==			
ANR	864211	PtrMemberAccess	opline -> opcode		863472	0					
ANR	864212	Identifier	opline		863472	0					
ANR	864213	Identifier	opcode		863472	1					
ANR	864214	Identifier	ZEND_DECLARE_INHERITED_CLASS_DELAYED		863472	1					
ANR	864215	CompoundStatement		120:63:3709:3709	863472	1					
ANR	864216	ExpressionStatement	* opline_num = opline - op_array -> opcodes	1316:4:42444:42484	863472	0	True				
ANR	864217	AssignmentExpression	* opline_num = opline - op_array -> opcodes		863472	0		=			
ANR	864218	UnaryOperationExpression	* opline_num		863472	0					
ANR	864219	UnaryOperator	*		863472	0					
ANR	864220	Identifier	opline_num		863472	1					
ANR	864221	AdditiveExpression	opline - op_array -> opcodes		863472	1		-			
ANR	864222	Identifier	opline		863472	0					
ANR	864223	PtrMemberAccess	op_array -> opcodes		863472	1					
ANR	864224	Identifier	op_array		863472	0					
ANR	864225	Identifier	opcodes		863472	1					
ANR	864226	ExpressionStatement	opline_num = & ZEND_RESULT ( opline ) . opline_num	1317:4:42490:42534	863472	1	True				
ANR	864227	AssignmentExpression	opline_num = & ZEND_RESULT ( opline ) . opline_num		863472	0		=			
ANR	864228	Identifier	opline_num		863472	0					
ANR	864229	UnaryOperationExpression	& ZEND_RESULT ( opline ) . opline_num		863472	1					
ANR	864230	UnaryOperator	&		863472	0					
ANR	864231	MemberAccess	ZEND_RESULT ( opline ) . opline_num		863472	1					
ANR	864232	CallExpression	ZEND_RESULT ( opline )		863472	0					
ANR	864233	Callee	ZEND_RESULT		863472	0					
ANR	864234	Identifier	ZEND_RESULT		863472	0					
ANR	864235	ArgumentList	opline		863472	1					
ANR	864236	Argument	opline		863472	0					
ANR	864237	Identifier	opline		863472	0					
ANR	864238	Identifier	opline_num		863472	1					
ANR	864239	ExpressionStatement	++ opline	1319:3:42544:42552	863472	1	True				
ANR	864240	UnaryExpression	++ opline		863472	0					
ANR	864241	IncDec	++		863472	0					
ANR	864242	Identifier	opline		863472	1					
ANR	864243	ExpressionStatement	* opline_num = - 1	1321:2:42560:42576	863472	5	True				
ANR	864244	AssignmentExpression	* opline_num = - 1		863472	0		=			
ANR	864245	UnaryOperationExpression	* opline_num		863472	0					
ANR	864246	UnaryOperator	*		863472	0					
ANR	864247	Identifier	opline_num		863472	1					
ANR	864248	UnaryOperationExpression	- 1		863472	1					
ANR	864249	UnaryOperator	-		863472	0					
ANR	864250	PrimaryExpression	1		863472	1					
ANR	864251	ReturnType	static void		863472	1					
ANR	864252	Identifier	assemble_code_blocks		863472	2					
ANR	864253	ParameterList	"zend_cfg * cfg , zend_op_array * op_array"		863472	3					
ANR	864254	Parameter	zend_cfg * cfg	1195:33:38688:38700	863472	0	True				
ANR	864255	ParameterType	zend_cfg *		863472	0					
ANR	864256	Identifier	cfg		863472	1					
ANR	864257	Parameter	zend_op_array * op_array	1195:48:38703:38725	863472	1	True				
ANR	864258	ParameterType	zend_op_array *		863472	0					
ANR	864259	Identifier	op_array		863472	1					
ANR	864260	CFGEntryNode	ENTRY		863472		True				
ANR	864261	CFGExitNode	EXIT		863472		True				
ANR	864262	CFGErrorNode	ERROR		863472		True				
ANR	864263	CFGErrorNode	ERROR		863472		True				
ANR	864264	CFGErrorNode	ERROR		863472		True				
ANR	864265	Symbol	* cfg -> loop_brk		863472						
ANR	864266	Symbol	ZEND_OP1 ( opline ) . opline_num		863472						
ANR	864267	Symbol	ZEND_HANDLE_EXCEPTION		863472						
ANR	864268	Symbol	next -> next		863472						
ANR	864269	Symbol	ZEND_OP_DATA		863472						
ANR	864270	Symbol	* next		863472						
ANR	864271	Symbol	ZEND_OP2_TYPE		863472						
ANR	864272	Symbol	* * cfg -> loop_start		863472						
ANR	864273	Symbol	opline -> extended_value		863472						
ANR	864274	Symbol	opline -> lineno		863472						
ANR	864275	Symbol	cfg -> loop_brk		863472						
ANR	864276	Symbol	opline		863472						
ANR	864277	Symbol	* cur_block -> op2_to		863472						
ANR	864278	Symbol	cur_block -> ext_to -> start_opline		863472						
ANR	864279	Symbol	op_array -> early_binding		863472						
ANR	864280	Symbol	* cur_block		863472						
ANR	864281	Symbol	cur_block -> start_opline		863472						
ANR	864282	Symbol	cur_block -> op1_to		863472						
ANR	864283	Symbol	op_array -> brk_cont_array [ i ] . cont		863472						
ANR	864284	Symbol	& ZEND_RESULT ( opline ) . opline_num		863472						
ANR	864285	Symbol	opline [ - 1 ] . lineno		863472						
ANR	864286	Symbol	& op_array -> early_binding		863472						
ANR	864287	Symbol	erealloc		863472						
ANR	864288	Symbol	( opline - 1 ) -> opcode		863472						
ANR	864289	Symbol	cur_block -> follow_to		863472						
ANR	864290	Symbol	IS_CONST		863472						
ANR	864291	Symbol	* * * cfg		863472						
ANR	864292	Symbol	* * i		863472						
ANR	864293	Symbol	NULL		863472						
ANR	864294	Symbol	cfg -> loop_cont [ i ] -> start_opline		863472						
ANR	864295	Symbol	& ZEND_OP1_LITERAL		863472						
ANR	864296	Symbol	* op_array		863472						
ANR	864297	Symbol	op_array -> last		863472						
ANR	864298	Symbol	cur_block -> len		863472						
ANR	864299	Symbol	* opline_num		863472						
ANR	864300	Symbol	* cfg		863472						
ANR	864301	Symbol	cur_block -> next		863472						
ANR	864302	Symbol	ZEND_OP2 ( opline ) . opline_num		863472						
ANR	864303	Symbol	* cur_block -> op1_to		863472						
ANR	864304	Symbol	cur_block -> op2_to		863472						
ANR	864305	Symbol	* * cfg		863472						
ANR	864306	Symbol	cfg -> loop_start		863472						
ANR	864307	Symbol	opline_num		863472						
ANR	864308	Symbol	* * op_array		863472						
ANR	864309	Symbol	next		863472						
ANR	864310	Symbol	_opl		863472						
ANR	864311	Symbol	op_array -> brk_cont_array [ i ] . brk		863472						
ANR	864312	Symbol	cfg -> blocks		863472						
ANR	864313	Symbol	cur_block -> access		863472						
ANR	864314	Symbol	ZEND_THROW		863472						
ANR	864315	Symbol	emalloc		863472						
ANR	864316	Symbol	op_array -> brk_cont_array		863472						
ANR	864317	Symbol	op_array -> opcodes		863472						
ANR	864318	Symbol	cur_block		863472						
ANR	864319	Symbol	next -> access		863472						
ANR	864320	Symbol	cfg -> loop_start [ i ] -> start_opline		863472						
ANR	864321	Symbol	& ZEND_RESULT		863472						
ANR	864322	Symbol	ZEND_RESULT		863472						
ANR	864323	Symbol	end		863472						
ANR	864324	Symbol	ZEND_DECLARE_INHERITED_CLASS_DELAYED		863472						
ANR	864325	Symbol	cfg -> loop_cont		863472						
ANR	864326	Symbol	* * cur_block		863472						
ANR	864327	Symbol	& ZEND_OP2_LITERAL		863472						
ANR	864328	Symbol	* cur_block -> ext_to		863472						
ANR	864329	Symbol	cfg		863472						
ANR	864330	Symbol	* op_array -> brk_cont_array		863472						
ANR	864331	Symbol	op_array -> brk_cont_array [ i ] . start		863472						
ANR	864332	Symbol	blocks		863472						
ANR	864333	Symbol	cur_block -> ext_to		863472						
ANR	864334	Symbol	i		863472						
ANR	864335	Symbol	j		863472						
ANR	864336	Symbol	* * cfg -> loop_brk		863472						
ANR	864337	Symbol	ZEND_OP1		863472						
ANR	864338	Symbol	op_array -> last_try_catch		863472						
ANR	864339	Symbol	op_array -> last_brk_cont		863472						
ANR	864340	Symbol	ZEND_OP2		863472						
ANR	864341	Symbol	new_opcodes		863472						
ANR	864342	Symbol	ZEND_OP1_TYPE		863472						
ANR	864343	Symbol	cfg -> loop_brk [ i ] -> start_opline		863472						
ANR	864344	Symbol	cur_block -> op1_to -> start_opline		863472						
ANR	864345	Symbol	ZEND_JMP		863472						
ANR	864346	Symbol	* i		863472						
ANR	864347	Symbol	* opline		863472						
ANR	864348	Symbol	* cfg -> loop_start		863472						
ANR	864349	Symbol	* cfg -> loop_cont		863472						
ANR	864350	Symbol	opline -> opcode		863472						
ANR	864351	Symbol	* * cfg -> loop_cont		863472						
ANR	864352	Symbol	cur_block -> op2_to -> start_opline		863472						
ANR	864353	Symbol	op_array		863472						
ANR	864354	DeclStmt									
ANR	864355	Decl							zend_op	zend_op *	last_op
ANR	864356	DeclStmt									
ANR	864357	Decl							zend_op	zend_op *	target
ANR	864358	DeclStmt									
ANR	864359	Decl							zend_code_block	zend_code_block *	next
ANR	864360	DeclStmt									
ANR	864361	Decl							zval	zval	zv
ANR	864362	DeclStmt									
ANR	864363	Decl							zval	zval	zv
ANR	864364	DeclStmt									
ANR	864365	Decl							zend_bool	zend_bool	can_reorder
ANR	864366	DeclStmt									
ANR	864367	Decl							zend_block_source	zend_block_source *	cs
ANR	864368	DeclStmt									
ANR	864369	Decl							zend_code_block	zend_code_block *	prev
ANR	864370	DeclStmt									
ANR	864371	Decl							int	int	should_jmp
ANR	864372	DeclStmt									
ANR	864373	Decl							zend_uchar	zend_uchar	same_type
ANR	864374	DeclStmt									
ANR	864375	Decl							zend_uint	zend_uint	same_var
ANR	864376	DeclStmt									
ANR	864377	Decl							zend_op	zend_op *	target
ANR	864378	DeclStmt									
ANR	864379	Decl							zend_op	zend_op *	target_end
ANR	864380	DeclStmt									
ANR	864381	Decl							zend_code_block	zend_code_block *	target_block
ANR	864382	DeclStmt									
ANR	864383	Decl							zend_op	zend_op *	target
ANR	864384	DeclStmt									
ANR	864385	Decl							zend_op	zend_op *	target_end
ANR	864386	DeclStmt									
ANR	864387	Decl							int	int	should_jmp
ANR	864388	DeclStmt									
ANR	864389	Decl							zend_op	zend_op *	target
ANR	864390	Decl							zend_op	zend_op *	target_end
ANR	864391	DeclStmt									
ANR	864392	Decl							char	char *	same_t
ANR	864393	DeclStmt									
ANR	864394	Decl							zend_code_block	zend_code_block *	target_block
ANR	864395	DeclStmt									
ANR	864396	Decl							int	int	var_num
ANR	864397	DeclStmt									
ANR	864398	Decl							zend_code_block	zend_code_block *	next
ANR	864399	DeclStmt									
ANR	864400	Decl							zend_code_block	zend_code_block *	todel
ANR	864401	DeclStmt									
ANR	864402	Decl							zend_code_block	zend_code_block *	todel
ANR	864403	DeclStmt									
ANR	864404	Decl							zend_uchar	zend_uchar	same_type
ANR	864405	DeclStmt									
ANR	864406	Decl							zend_uchar	zend_uchar	same_var
ANR	864407	DeclStmt									
ANR	864408	Decl							zend_op	zend_op *	target
ANR	864409	DeclStmt									
ANR	864410	Decl							zend_op	zend_op *	target_end
ANR	864411	DeclStmt									
ANR	864412	Decl							zend_code_block	zend_code_block *	target_block
ANR	864413	Function	zend_t_usage	1876:0:61354:65680							
ANR	864414	FunctionDef	"zend_t_usage (zend_code_block * block , zend_op_array * op_array , char * used_ext)"		864413	0					
ANR	864415	CompoundStatement		1877:0:61444:65680	864413	0					
ANR	864416	IdentifierDeclStatement	zend_code_block * next_block = block -> next ;	1878:1:61447:61488	864413	0	True				
ANR	864417	IdentifierDecl	* next_block = block -> next		864413	0					
ANR	864418	IdentifierDeclType	zend_code_block *		864413	0					
ANR	864419	Identifier	next_block		864413	1					
ANR	864420	AssignmentExpression	* next_block = block -> next		864413	2		=			
ANR	864421	Identifier	next_block		864413	0					
ANR	864422	PtrMemberAccess	block -> next		864413	1					
ANR	864423	Identifier	block		864413	0					
ANR	864424	Identifier	next		864413	1					
ANR	864425	IdentifierDeclStatement	char * usage ;	1879:1:61491:61502	864413	1	True				
ANR	864426	IdentifierDecl	* usage		864413	0					
ANR	864427	IdentifierDeclType	char *		864413	0					
ANR	864428	Identifier	usage		864413	1					
ANR	864429	IdentifierDeclStatement	char * defined_here ;	1880:1:61505:61523	864413	2	True				
ANR	864430	IdentifierDecl	* defined_here		864413	0					
ANR	864431	IdentifierDeclType	char *		864413	0					
ANR	864432	Identifier	defined_here		864413	1					
ANR	864433	IfStatement	if ( op_array -> T == 0 )		864413	3					
ANR	864434	Condition	op_array -> T == 0	1882:5:61531:61546	864413	0	True				
ANR	864435	EqualityExpression	op_array -> T == 0		864413	0		==			
ANR	864436	PtrMemberAccess	op_array -> T		864413	0					
ANR	864437	Identifier	op_array		864413	0					
ANR	864438	Identifier	T		864413	1					
ANR	864439	PrimaryExpression	0		864413	1					
ANR	864440	CompoundStatement		6:23:104:104	864413	1					
ANR	864441	ReturnStatement	return ;	1884:2:61596:61602	864413	0	True				
ANR	864442	ExpressionStatement	"usage = ecalloc ( op_array -> T , 1 )"	1887:1:61609:61640	864413	4	True				
ANR	864443	AssignmentExpression	"usage = ecalloc ( op_array -> T , 1 )"		864413	0		=			
ANR	864444	Identifier	usage		864413	0					
ANR	864445	CallExpression	"ecalloc ( op_array -> T , 1 )"		864413	1					
ANR	864446	Callee	ecalloc		864413	0					
ANR	864447	Identifier	ecalloc		864413	0					
ANR	864448	ArgumentList	op_array -> T		864413	1					
ANR	864449	Argument	op_array -> T		864413	0					
ANR	864450	PtrMemberAccess	op_array -> T		864413	0					
ANR	864451	Identifier	op_array		864413	0					
ANR	864452	Identifier	T		864413	1					
ANR	864453	Argument	1		864413	1					
ANR	864454	PrimaryExpression	1		864413	0					
ANR	864455	ExpressionStatement	defined_here = emalloc ( op_array -> T )	1888:1:61643:61678	864413	5	True				
ANR	864456	AssignmentExpression	defined_here = emalloc ( op_array -> T )		864413	0		=			
ANR	864457	Identifier	defined_here		864413	0					
ANR	864458	CallExpression	emalloc ( op_array -> T )		864413	1					
ANR	864459	Callee	emalloc		864413	0					
ANR	864460	Identifier	emalloc		864413	0					
ANR	864461	ArgumentList	op_array -> T		864413	1					
ANR	864462	Argument	op_array -> T		864413	0					
ANR	864463	PtrMemberAccess	op_array -> T		864413	0					
ANR	864464	Identifier	op_array		864413	0					
ANR	864465	Identifier	T		864413	1					
ANR	864466	WhileStatement	while ( next_block )		864413	6					
ANR	864467	Condition	next_block	1890:8:61689:61698	864413	0	True				
ANR	864468	Identifier	next_block		864413	0					
ANR	864469	CompoundStatement		16:2:306:345	864413	1					
ANR	864470	IdentifierDeclStatement	zend_op * opline = next_block -> start_opline ;	1891:2:61705:61747	864413	0	True				
ANR	864471	IdentifierDecl	* opline = next_block -> start_opline		864413	0					
ANR	864472	IdentifierDeclType	zend_op *		864413	0					
ANR	864473	Identifier	opline		864413	1					
ANR	864474	AssignmentExpression	* opline = next_block -> start_opline		864413	2		=			
ANR	864475	Identifier	opline		864413	0					
ANR	864476	PtrMemberAccess	next_block -> start_opline		864413	1					
ANR	864477	Identifier	next_block		864413	0					
ANR	864478	Identifier	start_opline		864413	1					
ANR	864479	IdentifierDeclStatement	zend_op * end = opline + next_block -> len ;	1892:2:61751:61790	864413	1	True				
ANR	864480	IdentifierDecl	* end = opline + next_block -> len		864413	0					
ANR	864481	IdentifierDeclType	zend_op *		864413	0					
ANR	864482	Identifier	end		864413	1					
ANR	864483	AssignmentExpression	* end = opline + next_block -> len		864413	2		=			
ANR	864484	Identifier	end		864413	0					
ANR	864485	AdditiveExpression	opline + next_block -> len		864413	1		+			
ANR	864486	Identifier	opline		864413	0					
ANR	864487	PtrMemberAccess	next_block -> len		864413	1					
ANR	864488	Identifier	next_block		864413	0					
ANR	864489	Identifier	len		864413	1					
ANR	864490	IfStatement	if ( ! next_block -> access )		864413	2					
ANR	864491	Condition	! next_block -> access	1894:6:61799:61817	864413	0	True				
ANR	864492	UnaryOperationExpression	! next_block -> access		864413	0					
ANR	864493	UnaryOperator	!		864413	0					
ANR	864494	PtrMemberAccess	next_block -> access		864413	1					
ANR	864495	Identifier	next_block		864413	0					
ANR	864496	Identifier	access		864413	1					
ANR	864497	CompoundStatement		18:27:375:375	864413	1					
ANR	864498	ExpressionStatement	next_block = next_block -> next	1895:3:61825:61854	864413	0	True				
ANR	864499	AssignmentExpression	next_block = next_block -> next		864413	0		=			
ANR	864500	Identifier	next_block		864413	0					
ANR	864501	PtrMemberAccess	next_block -> next		864413	1					
ANR	864502	Identifier	next_block		864413	0					
ANR	864503	Identifier	next		864413	1					
ANR	864504	ContinueStatement	continue ;	1896:3:61859:61867	864413	1	True				
ANR	864505	ExpressionStatement	"memset ( defined_here , 0 , op_array -> T )"	1898:2:61875:61911	864413	3	True				
ANR	864506	CallExpression	"memset ( defined_here , 0 , op_array -> T )"		864413	0					
ANR	864507	Callee	memset		864413	0					
ANR	864508	Identifier	memset		864413	0					
ANR	864509	ArgumentList	defined_here		864413	1					
ANR	864510	Argument	defined_here		864413	0					
ANR	864511	Identifier	defined_here		864413	0					
ANR	864512	Argument	0		864413	1					
ANR	864513	PrimaryExpression	0		864413	0					
ANR	864514	Argument	op_array -> T		864413	2					
ANR	864515	PtrMemberAccess	op_array -> T		864413	0					
ANR	864516	Identifier	op_array		864413	0					
ANR	864517	Identifier	T		864413	1					
ANR	864518	WhileStatement	while ( opline < end )		864413	4					
ANR	864519	Condition	opline < end	1900:9:61923:61932	864413	0	True				
ANR	864520	RelationalExpression	opline < end		864413	0		<			
ANR	864521	Identifier	opline		864413	0					
ANR	864522	Identifier	end		864413	1					
ANR	864523	CompoundStatement		24:21:490:490	864413	1					
ANR	864524	ExpressionStatement	T_USAGE ( opline -> op1 )	1901:3:61940:61960	864413	0	True				
ANR	864525	CallExpression	T_USAGE ( opline -> op1 )		864413	0					
ANR	864526	Callee	T_USAGE		864413	0					
ANR	864527	Identifier	T_USAGE		864413	0					
ANR	864528	ArgumentList	opline -> op1		864413	1					
ANR	864529	Argument	opline -> op1		864413	0					
ANR	864530	PtrMemberAccess	opline -> op1		864413	0					
ANR	864531	Identifier	opline		864413	0					
ANR	864532	Identifier	op1		864413	1					
ANR	864533	ExpressionStatement	T_USAGE ( opline -> op2 )	1902:3:61965:61985	864413	1	True				
ANR	864534	CallExpression	T_USAGE ( opline -> op2 )		864413	0					
ANR	864535	Callee	T_USAGE		864413	0					
ANR	864536	Identifier	T_USAGE		864413	0					
ANR	864537	ArgumentList	opline -> op2		864413	1					
ANR	864538	Argument	opline -> op2		864413	0					
ANR	864539	PtrMemberAccess	opline -> op2		864413	0					
ANR	864540	Identifier	opline		864413	0					
ANR	864541	Identifier	op2		864413	1					
ANR	864542	IfStatement	if ( RESULT_USED ( opline ) )		864413	2					
ANR	864543	Condition	RESULT_USED ( opline )	1904:7:61995:62013	864413	0	True				
ANR	864544	CallExpression	RESULT_USED ( opline )		864413	0					
ANR	864545	Callee	RESULT_USED		864413	0					
ANR	864546	Identifier	RESULT_USED		864413	0					
ANR	864547	ArgumentList	opline		864413	1					
ANR	864548	Argument	opline		864413	0					
ANR	864549	Identifier	opline		864413	0					
ANR	864550	CompoundStatement		28:28:571:571	864413	1					
ANR	864551	Statement	if	1905:4:62022:62023	864413	0	True				
ANR	864552	Statement	(	1905:7:62025:62025	864413	1	True				
ANR	864553	Statement	!	1905:8:62026:62026	864413	2	True				
ANR	864554	Statement	defined_here	1905:9:62027:62038	864413	3	True				
ANR	864555	Statement	[	1905:21:62039:62039	864413	4	True				
ANR	864556	Statement	VAR_NUM	1905:22:62040:62046	864413	5	True				
ANR	864557	Statement	(	1905:29:62047:62047	864413	6	True				
ANR	864558	Statement	ZEND_RESULT	1905:30:62048:62058	864413	7	True				
ANR	864559	Statement	(	1905:41:62059:62059	864413	8	True				
ANR	864560	Statement	opline	1905:42:62060:62065	864413	9	True				
ANR	864561	Statement	)	1905:48:62066:62066	864413	10	True				
ANR	864562	Statement	.	1905:49:62067:62067	864413	11	True				
ANR	864563	Statement	var	1905:50:62068:62070	864413	12	True				
ANR	864564	Statement	)	1905:53:62071:62071	864413	13	True				
ANR	864565	Statement	]	1905:54:62072:62072	864413	14	True				
ANR	864566	Statement	&&	1905:56:62074:62075	864413	15	True				
ANR	864567	Statement	!	1905:59:62077:62077	864413	16	True				
ANR	864568	Statement	used_ext	1905:60:62078:62085	864413	17	True				
ANR	864569	Statement	[	1905:68:62086:62086	864413	18	True				
ANR	864570	Statement	VAR_NUM	1905:69:62087:62093	864413	19	True				
ANR	864571	Statement	(	1905:76:62094:62094	864413	20	True				
ANR	864572	Statement	ZEND_RESULT	1905:77:62095:62105	864413	21	True				
ANR	864573	Statement	(	1905:88:62106:62106	864413	22	True				
ANR	864574	Statement	opline	1905:89:62107:62112	864413	23	True				
ANR	864575	Statement	)	1905:95:62113:62113	864413	24	True				
ANR	864576	Statement	.	1905:96:62114:62114	864413	25	True				
ANR	864577	Statement	var	1905:97:62115:62117	864413	26	True				
ANR	864578	Statement	)	1905:100:62118:62118	864413	27	True				
ANR	864579	Statement	]	1905:101:62119:62119	864413	28	True				
ANR	864580	Statement	&&	1905:103:62121:62122	864413	29	True				
ANR	864581	Statement	(	1906:8:62132:62132	864413	30	True				
ANR	864582	Statement	opline	1906:9:62133:62138	864413	31	True				
ANR	864583	Statement	->	1906:15:62139:62140	864413	32	True				
ANR	864584	Statement	opcode	1906:17:62141:62146	864413	33	True				
ANR	864585	Statement	==	1906:24:62148:62149	864413	34	True				
ANR	864586	Statement	ZEND_RECV	1906:27:62151:62159	864413	35	True				
ANR	864587	Statement	||	1906:37:62161:62162	864413	36	True				
ANR	864588	Statement	opline	1906:40:62164:62169	864413	37	True				
ANR	864589	Statement	->	1906:46:62170:62171	864413	38	True				
ANR	864590	Statement	opcode	1906:48:62172:62177	864413	39	True				
ANR	864591	Statement	==	1906:55:62179:62180	864413	40	True				
ANR	864592	Statement	ZEND_RECV_INIT	1906:58:62182:62195	864413	41	True				
ANR	864593	Statement	||	1906:73:62197:62198	864413	42	True				
ANR	864594	Statement	opline	1908:9:62254:62259	864413	43	True				
ANR	864595	Statement	->	1908:15:62260:62261	864413	44	True				
ANR	864596	Statement	opcode	1908:17:62262:62267	864413	45	True				
ANR	864597	Statement	==	1908:24:62269:62270	864413	46	True				
ANR	864598	Statement	ZEND_RECV_VARIADIC	1908:27:62272:62289	864413	47	True				
ANR	864599	Statement	||	1908:46:62291:62292	864413	48	True				
ANR	864600	Statement	(	1910:5:62306:62306	864413	49	True				
ANR	864601	Statement	opline	1910:6:62307:62312	864413	50	True				
ANR	864602	Statement	->	1910:12:62313:62314	864413	51	True				
ANR	864603	Statement	opcode	1910:14:62315:62320	864413	52	True				
ANR	864604	Statement	==	1910:21:62322:62323	864413	53	True				
ANR	864605	Statement	ZEND_OP_DATA	1910:24:62325:62336	864413	54	True				
ANR	864606	Statement	&&	1910:37:62338:62339	864413	55	True				
ANR	864607	Statement	ZEND_RESULT_TYPE	1910:40:62341:62356	864413	56	True				
ANR	864608	Statement	(	1910:56:62357:62357	864413	57	True				
ANR	864609	Statement	opline	1910:57:62358:62363	864413	58	True				
ANR	864610	Statement	)	1910:63:62364:62364	864413	59	True				
ANR	864611	Statement	==	1910:65:62366:62367	864413	60	True				
ANR	864612	Statement	IS_TMP_VAR	1910:68:62369:62378	864413	61	True				
ANR	864613	Statement	)	1910:78:62379:62379	864413	62	True				
ANR	864614	Statement	||	1910:80:62381:62382	864413	63	True				
ANR	864615	Statement	opline	1911:5:62389:62394	864413	64	True				
ANR	864616	Statement	->	1911:11:62395:62396	864413	65	True				
ANR	864617	Statement	opcode	1911:13:62397:62402	864413	66	True				
ANR	864618	Statement	==	1911:20:62404:62405	864413	67	True				
ANR	864619	Statement	ZEND_ADD_ARRAY_ELEMENT	1911:23:62407:62428	864413	68	True				
ANR	864620	Statement	)	1911:45:62429:62429	864413	69	True				
ANR	864621	Statement	)	1911:46:62430:62430	864413	70	True				
ANR	864622	CompoundStatement		35:48:987:987	864413	71					
ANR	864623	ExpressionStatement	used_ext [ VAR_NUM ( ZEND_RESULT ( opline ) . var ) ] = 1	1913:5:62491:62537	864413	0	True				
ANR	864624	AssignmentExpression	used_ext [ VAR_NUM ( ZEND_RESULT ( opline ) . var ) ] = 1		864413	0		=			
ANR	864625	ArrayIndexing	used_ext [ VAR_NUM ( ZEND_RESULT ( opline ) . var ) ]		864413	0					
ANR	864626	Identifier	used_ext		864413	0					
ANR	864627	CallExpression	VAR_NUM ( ZEND_RESULT ( opline ) . var )		864413	1					
ANR	864628	Callee	VAR_NUM		864413	0					
ANR	864629	Identifier	VAR_NUM		864413	0					
ANR	864630	ArgumentList	ZEND_RESULT ( opline ) . var		864413	1					
ANR	864631	Argument	ZEND_RESULT ( opline ) . var		864413	0					
ANR	864632	MemberAccess	ZEND_RESULT ( opline ) . var		864413	0					
ANR	864633	CallExpression	ZEND_RESULT ( opline )		864413	0					
ANR	864634	Callee	ZEND_RESULT		864413	0					
ANR	864635	Identifier	ZEND_RESULT		864413	0					
ANR	864636	ArgumentList	opline		864413	1					
ANR	864637	Argument	opline		864413	0					
ANR	864638	Identifier	opline		864413	0					
ANR	864639	Identifier	var		864413	1					
ANR	864640	PrimaryExpression	1		864413	1					
ANR	864641	ExpressionStatement	defined_here [ VAR_NUM ( ZEND_RESULT ( opline ) . var ) ] = 1	1915:4:62549:62599	864413	72	True				
ANR	864642	AssignmentExpression	defined_here [ VAR_NUM ( ZEND_RESULT ( opline ) . var ) ] = 1		864413	0		=			
ANR	864643	ArrayIndexing	defined_here [ VAR_NUM ( ZEND_RESULT ( opline ) . var ) ]		864413	0					
ANR	864644	Identifier	defined_here		864413	0					
ANR	864645	CallExpression	VAR_NUM ( ZEND_RESULT ( opline ) . var )		864413	1					
ANR	864646	Callee	VAR_NUM		864413	0					
ANR	864647	Identifier	VAR_NUM		864413	0					
ANR	864648	ArgumentList	ZEND_RESULT ( opline ) . var		864413	1					
ANR	864649	Argument	ZEND_RESULT ( opline ) . var		864413	0					
ANR	864650	MemberAccess	ZEND_RESULT ( opline ) . var		864413	0					
ANR	864651	CallExpression	ZEND_RESULT ( opline )		864413	0					
ANR	864652	Callee	ZEND_RESULT		864413	0					
ANR	864653	Identifier	ZEND_RESULT		864413	0					
ANR	864654	ArgumentList	opline		864413	1					
ANR	864655	Argument	opline		864413	0					
ANR	864656	Identifier	opline		864413	0					
ANR	864657	Identifier	var		864413	1					
ANR	864658	PrimaryExpression	1		864413	1					
ANR	864659	ExpressionStatement	opline ++	1917:3:62609:62617	864413	3	True				
ANR	864660	PostIncDecOperationExpression	opline ++		864413	0					
ANR	864661	Identifier	opline		864413	0					
ANR	864662	IncDec	++		864413	1					
ANR	864663	ExpressionStatement	next_block = next_block -> next	1919:2:62625:62654	864413	5	True				
ANR	864664	AssignmentExpression	next_block = next_block -> next		864413	0		=			
ANR	864665	Identifier	next_block		864413	0					
ANR	864666	PtrMemberAccess	next_block -> next		864413	1					
ANR	864667	Identifier	next_block		864413	0					
ANR	864668	Identifier	next		864413	1					
ANR	864669	CompoundStatement		48:2:1240:1245	864413	7					
ANR	864670	IdentifierDeclStatement	int i ;	1924:2:62685:62690	864413	0	True				
ANR	864671	IdentifierDecl	i		864413	0					
ANR	864672	IdentifierDeclType	int		864413	0					
ANR	864673	Identifier	i		864413	1					
ANR	864674	ForStatement	for ( i = 0 ; i < op_array -> T ; i ++ )		864413	1					
ANR	864675	ForInit	i = 0 ;	1925:7:62699:62704	864413	0	True				
ANR	864676	AssignmentExpression	i = 0		864413	0		=			
ANR	864677	Identifier	i		864413	0					
ANR	864678	PrimaryExpression	0		864413	1					
ANR	864679	Condition	i < op_array -> T	1925:14:62706:62719	864413	1	True				
ANR	864680	RelationalExpression	i < op_array -> T		864413	0		<			
ANR	864681	Identifier	i		864413	0					
ANR	864682	PtrMemberAccess	op_array -> T		864413	1					
ANR	864683	Identifier	op_array		864413	0					
ANR	864684	Identifier	T		864413	1					
ANR	864685	PostIncDecOperationExpression	i ++	1925:30:62722:62724	864413	2	True				
ANR	864686	Identifier	i		864413	0					
ANR	864687	IncDec	++		864413	1					
ANR	864688	CompoundStatement		49:35:1282:1282	864413	3					
ANR	864689	ExpressionStatement	"fprintf ( stderr , ""T%d: %c\\n"" , i , used_ext [ i ] + '0' )"	1926:3:62732:62782	864413	0	True				
ANR	864690	CallExpression	"fprintf ( stderr , ""T%d: %c\\n"" , i , used_ext [ i ] + '0' )"		864413	0					
ANR	864691	Callee	fprintf		864413	0					
ANR	864692	Identifier	fprintf		864413	0					
ANR	864693	ArgumentList	stderr		864413	1					
ANR	864694	Argument	stderr		864413	0					
ANR	864695	Identifier	stderr		864413	0					
ANR	864696	Argument	"""T%d: %c\\n"""		864413	1					
ANR	864697	PrimaryExpression	"""T%d: %c\\n"""		864413	0					
ANR	864698	Argument	i		864413	2					
ANR	864699	Identifier	i		864413	0					
ANR	864700	Argument	used_ext [ i ] + '0'		864413	3					
ANR	864701	AdditiveExpression	used_ext [ i ] + '0'		864413	0		+			
ANR	864702	ArrayIndexing	used_ext [ i ]		864413	0					
ANR	864703	Identifier	used_ext		864413	0					
ANR	864704	Identifier	i		864413	1					
ANR	864705	PrimaryExpression	'0'		864413	1					
ANR	864706	WhileStatement	while ( block )		864413	8					
ANR	864707	Condition	block	1931:8:62807:62811	864413	0	True				
ANR	864708	Identifier	block		864413	0					
ANR	864709	CompoundStatement		56:2:1373:1427	864413	1					
ANR	864710	IdentifierDeclStatement	zend_op * opline = block -> start_opline + block -> len - 1 ;	1932:2:62818:62872	864413	0	True				
ANR	864711	IdentifierDecl	* opline = block -> start_opline + block -> len - 1		864413	0					
ANR	864712	IdentifierDeclType	zend_op *		864413	0					
ANR	864713	Identifier	opline		864413	1					
ANR	864714	AssignmentExpression	* opline = block -> start_opline + block -> len - 1		864413	2		=			
ANR	864715	Identifier	opline		864413	0					
ANR	864716	AdditiveExpression	block -> start_opline + block -> len - 1		864413	1		+			
ANR	864717	PtrMemberAccess	block -> start_opline		864413	0					
ANR	864718	Identifier	block		864413	0					
ANR	864719	Identifier	start_opline		864413	1					
ANR	864720	AdditiveExpression	block -> len - 1		864413	1		-			
ANR	864721	PtrMemberAccess	block -> len		864413	0					
ANR	864722	Identifier	block		864413	0					
ANR	864723	Identifier	len		864413	1					
ANR	864724	PrimaryExpression	1		864413	1					
ANR	864725	IfStatement	if ( ! block -> access )		864413	1					
ANR	864726	Condition	! block -> access	1934:6:62881:62894	864413	0	True				
ANR	864727	UnaryOperationExpression	! block -> access		864413	0					
ANR	864728	UnaryOperator	!		864413	0					
ANR	864729	PtrMemberAccess	block -> access		864413	1					
ANR	864730	Identifier	block		864413	0					
ANR	864731	Identifier	access		864413	1					
ANR	864732	CompoundStatement		58:22:1452:1452	864413	1					
ANR	864733	ExpressionStatement	block = block -> next	1935:3:62902:62921	864413	0	True				
ANR	864734	AssignmentExpression	block = block -> next		864413	0		=			
ANR	864735	Identifier	block		864413	0					
ANR	864736	PtrMemberAccess	block -> next		864413	1					
ANR	864737	Identifier	block		864413	0					
ANR	864738	Identifier	next		864413	1					
ANR	864739	ContinueStatement	continue ;	1936:3:62926:62934	864413	1	True				
ANR	864740	ExpressionStatement	"memcpy ( usage , used_ext , op_array -> T )"	1939:2:62943:62979	864413	2	True				
ANR	864741	CallExpression	"memcpy ( usage , used_ext , op_array -> T )"		864413	0					
ANR	864742	Callee	memcpy		864413	0					
ANR	864743	Identifier	memcpy		864413	0					
ANR	864744	ArgumentList	usage		864413	1					
ANR	864745	Argument	usage		864413	0					
ANR	864746	Identifier	usage		864413	0					
ANR	864747	Argument	used_ext		864413	1					
ANR	864748	Identifier	used_ext		864413	0					
ANR	864749	Argument	op_array -> T		864413	2					
ANR	864750	PtrMemberAccess	op_array -> T		864413	0					
ANR	864751	Identifier	op_array		864413	0					
ANR	864752	Identifier	T		864413	1					
ANR	864753	WhileStatement	while ( opline >= block -> start_opline )		864413	3					
ANR	864754	Condition	opline >= block -> start_opline	1941:9:62991:63019	864413	0	True				
ANR	864755	RelationalExpression	opline >= block -> start_opline		864413	0		>=			
ANR	864756	Identifier	opline		864413	0					
ANR	864757	PtrMemberAccess	block -> start_opline		864413	1					
ANR	864758	Identifier	block		864413	0					
ANR	864759	Identifier	start_opline		864413	1					
ANR	864760	CompoundStatement		65:40:1577:1577	864413	1					
ANR	864761	IfStatement	if ( RES_NEVER_USED ( opline ) )		864413	0					
ANR	864762	Condition	RES_NEVER_USED ( opline )	1943:7:63053:63074	864413	0	True				
ANR	864763	CallExpression	RES_NEVER_USED ( opline )		864413	0					
ANR	864764	Callee	RES_NEVER_USED		864413	0					
ANR	864765	Identifier	RES_NEVER_USED		864413	0					
ANR	864766	ArgumentList	opline		864413	1					
ANR	864767	Argument	opline		864413	0					
ANR	864768	Identifier	opline		864413	0					
ANR	864769	CompoundStatement		67:31:1632:1632	864413	1					
ANR	864770	SwitchStatement	switch ( opline -> opcode )		864413	0					
ANR	864771	Condition	opline -> opcode	1944:12:63091:63104	864413	0	True				
ANR	864772	PtrMemberAccess	opline -> opcode		864413	0					
ANR	864773	Identifier	opline		864413	0					
ANR	864774	Identifier	opcode		864413	1					
ANR	864775	CompoundStatement		68:28:1662:1662	864413	1					
ANR	864776	Label	case ZEND_ASSIGN_ADD :	1945:5:63114:63134	864413	0	True				
ANR	864777	Identifier	ZEND_ASSIGN_ADD		864413	0					
ANR	864778	Label	case ZEND_ASSIGN_SUB :	1946:5:63141:63161	864413	1	True				
ANR	864779	Identifier	ZEND_ASSIGN_SUB		864413	0					
ANR	864780	Label	case ZEND_ASSIGN_MUL :	1947:5:63168:63188	864413	2	True				
ANR	864781	Identifier	ZEND_ASSIGN_MUL		864413	0					
ANR	864782	Label	case ZEND_ASSIGN_DIV :	1948:5:63195:63215	864413	3	True				
ANR	864783	Identifier	ZEND_ASSIGN_DIV		864413	0					
ANR	864784	Label	case ZEND_ASSIGN_MOD :	1949:5:63222:63242	864413	4	True				
ANR	864785	Identifier	ZEND_ASSIGN_MOD		864413	0					
ANR	864786	Label	case ZEND_ASSIGN_SL :	1950:5:63249:63268	864413	5	True				
ANR	864787	Identifier	ZEND_ASSIGN_SL		864413	0					
ANR	864788	Label	case ZEND_ASSIGN_SR :	1951:5:63275:63294	864413	6	True				
ANR	864789	Identifier	ZEND_ASSIGN_SR		864413	0					
ANR	864790	Label	case ZEND_ASSIGN_CONCAT :	1952:5:63301:63324	864413	7	True				
ANR	864791	Identifier	ZEND_ASSIGN_CONCAT		864413	0					
ANR	864792	Label	case ZEND_ASSIGN_BW_OR :	1953:5:63331:63353	864413	8	True				
ANR	864793	Identifier	ZEND_ASSIGN_BW_OR		864413	0					
ANR	864794	Label	case ZEND_ASSIGN_BW_AND :	1954:5:63360:63383	864413	9	True				
ANR	864795	Identifier	ZEND_ASSIGN_BW_AND		864413	0					
ANR	864796	Label	case ZEND_ASSIGN_BW_XOR :	1955:5:63390:63413	864413	10	True				
ANR	864797	Identifier	ZEND_ASSIGN_BW_XOR		864413	0					
ANR	864798	Label	case ZEND_PRE_INC :	1956:5:63420:63437	864413	11	True				
ANR	864799	Identifier	ZEND_PRE_INC		864413	0					
ANR	864800	Label	case ZEND_PRE_DEC :	1957:5:63444:63461	864413	12	True				
ANR	864801	Identifier	ZEND_PRE_DEC		864413	0					
ANR	864802	Label	case ZEND_POST_INC :	1958:5:63468:63486	864413	13	True				
ANR	864803	Identifier	ZEND_POST_INC		864413	0					
ANR	864804	Label	case ZEND_POST_DEC :	1959:5:63493:63511	864413	14	True				
ANR	864805	Identifier	ZEND_POST_DEC		864413	0					
ANR	864806	Label	case ZEND_ASSIGN :	1960:5:63518:63534	864413	15	True				
ANR	864807	Identifier	ZEND_ASSIGN		864413	0					
ANR	864808	Label	case ZEND_ASSIGN_REF :	1961:5:63541:63561	864413	16	True				
ANR	864809	Identifier	ZEND_ASSIGN_REF		864413	0					
ANR	864810	Label	case ZEND_DO_FCALL :	1962:5:63568:63586	864413	17	True				
ANR	864811	Identifier	ZEND_DO_FCALL		864413	0					
ANR	864812	Label	case ZEND_DO_FCALL_BY_NAME :	1963:5:63593:63619	864413	18	True				
ANR	864813	Identifier	ZEND_DO_FCALL_BY_NAME		864413	0					
ANR	864814	IfStatement	if ( ZEND_RESULT_TYPE ( opline ) == IS_VAR )		864413	19					
ANR	864815	Condition	ZEND_RESULT_TYPE ( opline ) == IS_VAR	1964:10:63631:63664	864413	0	True				
ANR	864816	EqualityExpression	ZEND_RESULT_TYPE ( opline ) == IS_VAR		864413	0		==			
ANR	864817	CallExpression	ZEND_RESULT_TYPE ( opline )		864413	0					
ANR	864818	Callee	ZEND_RESULT_TYPE		864413	0					
ANR	864819	Identifier	ZEND_RESULT_TYPE		864413	0					
ANR	864820	ArgumentList	opline		864413	1					
ANR	864821	Argument	opline		864413	0					
ANR	864822	Identifier	opline		864413	0					
ANR	864823	Identifier	IS_VAR		864413	1					
ANR	864824	CompoundStatement		88:46:2222:2222	864413	1					
ANR	864825	ExpressionStatement	ZEND_RESULT_TYPE ( opline ) |= EXT_TYPE_UNUSED	1966:7:63721:63764	864413	0	True				
ANR	864826	AssignmentExpression	ZEND_RESULT_TYPE ( opline ) |= EXT_TYPE_UNUSED		864413	0		|=			
ANR	864827	CallExpression	ZEND_RESULT_TYPE ( opline )		864413	0					
ANR	864828	Callee	ZEND_RESULT_TYPE		864413	0					
ANR	864829	Identifier	ZEND_RESULT_TYPE		864413	0					
ANR	864830	ArgumentList	opline		864413	1					
ANR	864831	Argument	opline		864413	0					
ANR	864832	Identifier	opline		864413	0					
ANR	864833	Identifier	EXT_TYPE_UNUSED		864413	1					
ANR	864834	BreakStatement	break ;	1971:6:63848:63853	864413	20	True				
ANR	864835	Label	case ZEND_QM_ASSIGN :	1972:5:63860:63879	864413	21	True				
ANR	864836	Identifier	ZEND_QM_ASSIGN		864413	0					
ANR	864837	Label	case ZEND_BOOL :	1973:5:63886:63900	864413	22	True				
ANR	864838	Identifier	ZEND_BOOL		864413	0					
ANR	864839	Label	case ZEND_BOOL_NOT :	1974:5:63907:63925	864413	23	True				
ANR	864840	Identifier	ZEND_BOOL_NOT		864413	0					
ANR	864841	IfStatement	if ( ZEND_OP1_TYPE ( opline ) == IS_CONST )		864413	24					
ANR	864842	Condition	ZEND_OP1_TYPE ( opline ) == IS_CONST	1975:10:63937:63969	864413	0	True				
ANR	864843	EqualityExpression	ZEND_OP1_TYPE ( opline ) == IS_CONST		864413	0		==			
ANR	864844	CallExpression	ZEND_OP1_TYPE ( opline )		864413	0					
ANR	864845	Callee	ZEND_OP1_TYPE		864413	0					
ANR	864846	Identifier	ZEND_OP1_TYPE		864413	0					
ANR	864847	ArgumentList	opline		864413	1					
ANR	864848	Argument	opline		864413	0					
ANR	864849	Identifier	opline		864413	0					
ANR	864850	Identifier	IS_CONST		864413	1					
ANR	864851	CompoundStatement		99:45:2527:2527	864413	1					
ANR	864852	ExpressionStatement	literal_dtor ( & ZEND_OP1_LITERAL ( opline ) )	1976:7:63981:64020	864413	0	True				
ANR	864853	CallExpression	literal_dtor ( & ZEND_OP1_LITERAL ( opline ) )		864413	0					
ANR	864854	Callee	literal_dtor		864413	0					
ANR	864855	Identifier	literal_dtor		864413	0					
ANR	864856	ArgumentList	& ZEND_OP1_LITERAL ( opline )		864413	1					
ANR	864857	Argument	& ZEND_OP1_LITERAL ( opline )		864413	0					
ANR	864858	UnaryOperationExpression	& ZEND_OP1_LITERAL ( opline )		864413	0					
ANR	864859	UnaryOperator	&		864413	0					
ANR	864860	CallExpression	ZEND_OP1_LITERAL ( opline )		864413	1					
ANR	864861	Callee	ZEND_OP1_LITERAL		864413	0					
ANR	864862	Identifier	ZEND_OP1_LITERAL		864413	0					
ANR	864863	ArgumentList	opline		864413	1					
ANR	864864	Argument	opline		864413	0					
ANR	864865	Identifier	opline		864413	0					
ANR	864866	ExpressionStatement	MAKE_NOP ( opline )	1978:6:64036:64052	864413	25	True				
ANR	864867	CallExpression	MAKE_NOP ( opline )		864413	0					
ANR	864868	Callee	MAKE_NOP		864413	0					
ANR	864869	Identifier	MAKE_NOP		864413	0					
ANR	864870	ArgumentList	opline		864413	1					
ANR	864871	Argument	opline		864413	0					
ANR	864872	Identifier	opline		864413	0					
ANR	864873	BreakStatement	break ;	1979:6:64060:64065	864413	26	True				
ANR	864874	Label	case ZEND_PRINT :	1980:5:64072:64087	864413	27	True				
ANR	864875	Identifier	ZEND_PRINT		864413	0					
ANR	864876	ExpressionStatement	opline -> opcode = ZEND_ECHO	1981:6:64095:64121	864413	28	True				
ANR	864877	AssignmentExpression	opline -> opcode = ZEND_ECHO		864413	0		=			
ANR	864878	PtrMemberAccess	opline -> opcode		864413	0					
ANR	864879	Identifier	opline		864413	0					
ANR	864880	Identifier	opcode		864413	1					
ANR	864881	Identifier	ZEND_ECHO		864413	1					
ANR	864882	ExpressionStatement	ZEND_RESULT_TYPE ( opline ) = IS_UNUSED	1982:6:64129:64165	864413	29	True				
ANR	864883	AssignmentExpression	ZEND_RESULT_TYPE ( opline ) = IS_UNUSED		864413	0		=			
ANR	864884	CallExpression	ZEND_RESULT_TYPE ( opline )		864413	0					
ANR	864885	Callee	ZEND_RESULT_TYPE		864413	0					
ANR	864886	Identifier	ZEND_RESULT_TYPE		864413	0					
ANR	864887	ArgumentList	opline		864413	1					
ANR	864888	Argument	opline		864413	0					
ANR	864889	Identifier	opline		864413	0					
ANR	864890	Identifier	IS_UNUSED		864413	1					
ANR	864891	BreakStatement	break ;	1983:6:64173:64178	864413	30	True				
ANR	864892	Label	case ZEND_JMPZ_EX :	1984:5:64185:64202	864413	31	True				
ANR	864893	Identifier	ZEND_JMPZ_EX		864413	0					
ANR	864894	Label	case ZEND_JMPNZ_EX :	1985:5:64209:64227	864413	32	True				
ANR	864895	Identifier	ZEND_JMPNZ_EX		864413	0					
ANR	864896	ExpressionStatement	opline -> opcode -= 3	1986:6:64235:64254	864413	33	True				
ANR	864897	AssignmentExpression	opline -> opcode -= 3		864413	0		-=			
ANR	864898	PtrMemberAccess	opline -> opcode		864413	0					
ANR	864899	Identifier	opline		864413	0					
ANR	864900	Identifier	opcode		864413	1					
ANR	864901	PrimaryExpression	3		864413	1					
ANR	864902	ExpressionStatement	SET_UNUSED ( opline -> result )	1987:6:64262:64288	864413	34	True				
ANR	864903	CallExpression	SET_UNUSED ( opline -> result )		864413	0					
ANR	864904	Callee	SET_UNUSED		864413	0					
ANR	864905	Identifier	SET_UNUSED		864413	0					
ANR	864906	ArgumentList	opline -> result		864413	1					
ANR	864907	Argument	opline -> result		864413	0					
ANR	864908	PtrMemberAccess	opline -> result		864413	0					
ANR	864909	Identifier	opline		864413	0					
ANR	864910	Identifier	result		864413	1					
ANR	864911	BreakStatement	break ;	1988:6:64296:64301	864413	35	True				
ANR	864912	ElseStatement	else		864413	0					
ANR	864913	CompoundStatement		125:10:3276:3276	864413	0					
ANR	864914	IfStatement	if ( RESULT_USED ( opline ) )		864413	0					
ANR	864915	Condition	RESULT_USED ( opline )	2002:8:64731:64749	864413	0	True				
ANR	864916	CallExpression	RESULT_USED ( opline )		864413	0					
ANR	864917	Callee	RESULT_USED		864413	0					
ANR	864918	Identifier	RESULT_USED		864413	0					
ANR	864919	ArgumentList	opline		864413	1					
ANR	864920	Argument	opline		864413	0					
ANR	864921	Identifier	opline		864413	0					
ANR	864922	CompoundStatement		126:29:3307:3307	864413	1					
ANR	864923	ExpressionStatement	usage [ VAR_NUM ( ZEND_RESULT ( opline ) . var ) ] = 0	2003:5:64759:64802	864413	0	True				
ANR	864924	AssignmentExpression	usage [ VAR_NUM ( ZEND_RESULT ( opline ) . var ) ] = 0		864413	0		=			
ANR	864925	ArrayIndexing	usage [ VAR_NUM ( ZEND_RESULT ( opline ) . var ) ]		864413	0					
ANR	864926	Identifier	usage		864413	0					
ANR	864927	CallExpression	VAR_NUM ( ZEND_RESULT ( opline ) . var )		864413	1					
ANR	864928	Callee	VAR_NUM		864413	0					
ANR	864929	Identifier	VAR_NUM		864413	0					
ANR	864930	ArgumentList	ZEND_RESULT ( opline ) . var		864413	1					
ANR	864931	Argument	ZEND_RESULT ( opline ) . var		864413	0					
ANR	864932	MemberAccess	ZEND_RESULT ( opline ) . var		864413	0					
ANR	864933	CallExpression	ZEND_RESULT ( opline )		864413	0					
ANR	864934	Callee	ZEND_RESULT		864413	0					
ANR	864935	Identifier	ZEND_RESULT		864413	0					
ANR	864936	ArgumentList	opline		864413	1					
ANR	864937	Argument	opline		864413	0					
ANR	864938	Identifier	opline		864413	0					
ANR	864939	Identifier	var		864413	1					
ANR	864940	PrimaryExpression	0		864413	1					
ANR	864941	Statement	if	1992:3:64318:64319	864413	1	True				
ANR	864942	Statement	(	1992:6:64321:64321	864413	2	True				
ANR	864943	Statement	opline	1992:7:64322:64327	864413	3	True				
ANR	864944	Statement	->	1992:13:64328:64329	864413	4	True				
ANR	864945	Statement	opcode	1992:15:64330:64335	864413	5	True				
ANR	864946	Statement	==	1992:22:64337:64338	864413	6	True				
ANR	864947	Statement	ZEND_RECV	1992:25:64340:64348	864413	7	True				
ANR	864948	Statement	||	1992:35:64350:64351	864413	8	True				
ANR	864949	Statement	opline	1993:16:64369:64374	864413	9	True				
ANR	864950	Statement	->	1993:22:64375:64376	864413	10	True				
ANR	864951	Statement	opcode	1993:24:64377:64382	864413	11	True				
ANR	864952	Statement	==	1993:31:64384:64385	864413	12	True				
ANR	864953	Statement	ZEND_RECV_INIT	1993:34:64387:64400	864413	13	True				
ANR	864954	Statement	||	1993:49:64402:64403	864413	14	True				
ANR	864955	Statement	opline	1995:16:64466:64471	864413	15	True				
ANR	864956	Statement	->	1995:22:64472:64473	864413	16	True				
ANR	864957	Statement	opcode	1995:24:64474:64479	864413	17	True				
ANR	864958	Statement	==	1995:31:64481:64482	864413	18	True				
ANR	864959	Statement	ZEND_RECV_VARIADIC	1995:34:64484:64501	864413	19	True				
ANR	864960	Statement	||	1995:53:64503:64504	864413	20	True				
ANR	864961	Statement	opline	1997:16:64529:64534	864413	21	True				
ANR	864962	Statement	->	1997:22:64535:64536	864413	22	True				
ANR	864963	Statement	opcode	1997:24:64537:64542	864413	23	True				
ANR	864964	Statement	==	1997:31:64544:64545	864413	24	True				
ANR	864965	Statement	ZEND_ADD_ARRAY_ELEMENT	1997:34:64547:64568	864413	25	True				
ANR	864966	Statement	)	1997:56:64569:64569	864413	26	True				
ANR	864967	CompoundStatement		121:58:3126:3126	864413	27					
ANR	864968	IfStatement	if ( ZEND_OP1_TYPE ( opline ) == IS_VAR || ZEND_OP1_TYPE ( opline ) == IS_TMP_VAR )		864413	0					
ANR	864969	Condition	ZEND_OP1_TYPE ( opline ) == IS_VAR || ZEND_OP1_TYPE ( opline ) == IS_TMP_VAR	1998:8:64581:64650	864413	0	True				
ANR	864970	OrExpression	ZEND_OP1_TYPE ( opline ) == IS_VAR || ZEND_OP1_TYPE ( opline ) == IS_TMP_VAR		864413	0		||			
ANR	864971	EqualityExpression	ZEND_OP1_TYPE ( opline ) == IS_VAR		864413	0		==			
ANR	864972	CallExpression	ZEND_OP1_TYPE ( opline )		864413	0					
ANR	864973	Callee	ZEND_OP1_TYPE		864413	0					
ANR	864974	Identifier	ZEND_OP1_TYPE		864413	0					
ANR	864975	ArgumentList	opline		864413	1					
ANR	864976	Argument	opline		864413	0					
ANR	864977	Identifier	opline		864413	0					
ANR	864978	Identifier	IS_VAR		864413	1					
ANR	864979	EqualityExpression	ZEND_OP1_TYPE ( opline ) == IS_TMP_VAR		864413	1		==			
ANR	864980	CallExpression	ZEND_OP1_TYPE ( opline )		864413	0					
ANR	864981	Callee	ZEND_OP1_TYPE		864413	0					
ANR	864982	Identifier	ZEND_OP1_TYPE		864413	0					
ANR	864983	ArgumentList	opline		864413	1					
ANR	864984	Argument	opline		864413	0					
ANR	864985	Identifier	opline		864413	0					
ANR	864986	Identifier	IS_TMP_VAR		864413	1					
ANR	864987	CompoundStatement		122:80:3208:3208	864413	1					
ANR	864988	ExpressionStatement	usage [ VAR_NUM ( ZEND_RESULT ( opline ) . var ) ] = 1	1999:5:64660:64703	864413	0	True				
ANR	864989	AssignmentExpression	usage [ VAR_NUM ( ZEND_RESULT ( opline ) . var ) ] = 1		864413	0		=			
ANR	864990	ArrayIndexing	usage [ VAR_NUM ( ZEND_RESULT ( opline ) . var ) ]		864413	0					
ANR	864991	Identifier	usage		864413	0					
ANR	864992	CallExpression	VAR_NUM ( ZEND_RESULT ( opline ) . var )		864413	1					
ANR	864993	Callee	VAR_NUM		864413	0					
ANR	864994	Identifier	VAR_NUM		864413	0					
ANR	864995	ArgumentList	ZEND_RESULT ( opline ) . var		864413	1					
ANR	864996	Argument	ZEND_RESULT ( opline ) . var		864413	0					
ANR	864997	MemberAccess	ZEND_RESULT ( opline ) . var		864413	0					
ANR	864998	CallExpression	ZEND_RESULT ( opline )		864413	0					
ANR	864999	Callee	ZEND_RESULT		864413	0					
ANR	865000	Identifier	ZEND_RESULT		864413	0					
ANR	865001	ArgumentList	opline		864413	1					
ANR	865002	Argument	opline		864413	0					
ANR	865003	Identifier	opline		864413	0					
ANR	865004	Identifier	var		864413	1					
ANR	865005	PrimaryExpression	1		864413	1					
ANR	865006	IfStatement	if ( ZEND_OP1_TYPE ( opline ) == IS_VAR || ZEND_OP1_TYPE ( opline ) == IS_TMP_VAR )		864413	28					
ANR	865007	Condition	ZEND_OP1_TYPE ( opline ) == IS_VAR || ZEND_OP1_TYPE ( opline ) == IS_TMP_VAR	2007:7:64823:64892	864413	0	True				
ANR	865008	OrExpression	ZEND_OP1_TYPE ( opline ) == IS_VAR || ZEND_OP1_TYPE ( opline ) == IS_TMP_VAR		864413	0		||			
ANR	865009	EqualityExpression	ZEND_OP1_TYPE ( opline ) == IS_VAR		864413	0		==			
ANR	865010	CallExpression	ZEND_OP1_TYPE ( opline )		864413	0					
ANR	865011	Callee	ZEND_OP1_TYPE		864413	0					
ANR	865012	Identifier	ZEND_OP1_TYPE		864413	0					
ANR	865013	ArgumentList	opline		864413	1					
ANR	865014	Argument	opline		864413	0					
ANR	865015	Identifier	opline		864413	0					
ANR	865016	Identifier	IS_VAR		864413	1					
ANR	865017	EqualityExpression	ZEND_OP1_TYPE ( opline ) == IS_TMP_VAR		864413	1		==			
ANR	865018	CallExpression	ZEND_OP1_TYPE ( opline )		864413	0					
ANR	865019	Callee	ZEND_OP1_TYPE		864413	0					
ANR	865020	Identifier	ZEND_OP1_TYPE		864413	0					
ANR	865021	ArgumentList	opline		864413	1					
ANR	865022	Argument	opline		864413	0					
ANR	865023	Identifier	opline		864413	0					
ANR	865024	Identifier	IS_TMP_VAR		864413	1					
ANR	865025	CompoundStatement		131:79:3450:3450	864413	1					
ANR	865026	ExpressionStatement	usage [ VAR_NUM ( ZEND_OP1 ( opline ) . var ) ] = 1	2008:4:64901:64941	864413	0	True				
ANR	865027	AssignmentExpression	usage [ VAR_NUM ( ZEND_OP1 ( opline ) . var ) ] = 1		864413	0		=			
ANR	865028	ArrayIndexing	usage [ VAR_NUM ( ZEND_OP1 ( opline ) . var ) ]		864413	0					
ANR	865029	Identifier	usage		864413	0					
ANR	865030	CallExpression	VAR_NUM ( ZEND_OP1 ( opline ) . var )		864413	1					
ANR	865031	Callee	VAR_NUM		864413	0					
ANR	865032	Identifier	VAR_NUM		864413	0					
ANR	865033	ArgumentList	ZEND_OP1 ( opline ) . var		864413	1					
ANR	865034	Argument	ZEND_OP1 ( opline ) . var		864413	0					
ANR	865035	MemberAccess	ZEND_OP1 ( opline ) . var		864413	0					
ANR	865036	CallExpression	ZEND_OP1 ( opline )		864413	0					
ANR	865037	Callee	ZEND_OP1		864413	0					
ANR	865038	Identifier	ZEND_OP1		864413	0					
ANR	865039	ArgumentList	opline		864413	1					
ANR	865040	Argument	opline		864413	0					
ANR	865041	Identifier	opline		864413	0					
ANR	865042	Identifier	var		864413	1					
ANR	865043	PrimaryExpression	1		864413	1					
ANR	865044	IfStatement	if ( ZEND_OP2_TYPE ( opline ) == IS_VAR || ZEND_OP2_TYPE ( opline ) == IS_TMP_VAR )		864413	29					
ANR	865045	Condition	ZEND_OP2_TYPE ( opline ) == IS_VAR || ZEND_OP2_TYPE ( opline ) == IS_TMP_VAR	2010:7:64955:65024	864413	0	True				
ANR	865046	OrExpression	ZEND_OP2_TYPE ( opline ) == IS_VAR || ZEND_OP2_TYPE ( opline ) == IS_TMP_VAR		864413	0		||			
ANR	865047	EqualityExpression	ZEND_OP2_TYPE ( opline ) == IS_VAR		864413	0		==			
ANR	865048	CallExpression	ZEND_OP2_TYPE ( opline )		864413	0					
ANR	865049	Callee	ZEND_OP2_TYPE		864413	0					
ANR	865050	Identifier	ZEND_OP2_TYPE		864413	0					
ANR	865051	ArgumentList	opline		864413	1					
ANR	865052	Argument	opline		864413	0					
ANR	865053	Identifier	opline		864413	0					
ANR	865054	Identifier	IS_VAR		864413	1					
ANR	865055	EqualityExpression	ZEND_OP2_TYPE ( opline ) == IS_TMP_VAR		864413	1		==			
ANR	865056	CallExpression	ZEND_OP2_TYPE ( opline )		864413	0					
ANR	865057	Callee	ZEND_OP2_TYPE		864413	0					
ANR	865058	Identifier	ZEND_OP2_TYPE		864413	0					
ANR	865059	ArgumentList	opline		864413	1					
ANR	865060	Argument	opline		864413	0					
ANR	865061	Identifier	opline		864413	0					
ANR	865062	Identifier	IS_TMP_VAR		864413	1					
ANR	865063	CompoundStatement		134:79:3582:3582	864413	1					
ANR	865064	ExpressionStatement	usage [ VAR_NUM ( ZEND_OP2 ( opline ) . var ) ] = 1	2011:4:65033:65073	864413	0	True				
ANR	865065	AssignmentExpression	usage [ VAR_NUM ( ZEND_OP2 ( opline ) . var ) ] = 1		864413	0		=			
ANR	865066	ArrayIndexing	usage [ VAR_NUM ( ZEND_OP2 ( opline ) . var ) ]		864413	0					
ANR	865067	Identifier	usage		864413	0					
ANR	865068	CallExpression	VAR_NUM ( ZEND_OP2 ( opline ) . var )		864413	1					
ANR	865069	Callee	VAR_NUM		864413	0					
ANR	865070	Identifier	VAR_NUM		864413	0					
ANR	865071	ArgumentList	ZEND_OP2 ( opline ) . var		864413	1					
ANR	865072	Argument	ZEND_OP2 ( opline ) . var		864413	0					
ANR	865073	MemberAccess	ZEND_OP2 ( opline ) . var		864413	0					
ANR	865074	CallExpression	ZEND_OP2 ( opline )		864413	0					
ANR	865075	Callee	ZEND_OP2		864413	0					
ANR	865076	Identifier	ZEND_OP2		864413	0					
ANR	865077	ArgumentList	opline		864413	1					
ANR	865078	Argument	opline		864413	0					
ANR	865079	Identifier	opline		864413	0					
ANR	865080	Identifier	var		864413	1					
ANR	865081	PrimaryExpression	1		864413	1					
ANR	865082	IfStatement	if ( ( ZEND_RESULT_TYPE ( opline ) & IS_VAR ) && ( ZEND_RESULT_TYPE ( opline ) & EXT_TYPE_UNUSED ) && usage [ VAR_NUM ( ZEND_RESULT ( opline ) . var ) ] )		864413	30					
ANR	865083	Condition	( ZEND_RESULT_TYPE ( opline ) & IS_VAR ) && ( ZEND_RESULT_TYPE ( opline ) & EXT_TYPE_UNUSED ) && usage [ VAR_NUM ( ZEND_RESULT ( opline ) . var ) ]	2016:7:65134:65291	864413	0	True				
ANR	865084	AndExpression	( ZEND_RESULT_TYPE ( opline ) & IS_VAR ) && ( ZEND_RESULT_TYPE ( opline ) & EXT_TYPE_UNUSED ) && usage [ VAR_NUM ( ZEND_RESULT ( opline ) . var ) ]		864413	0		&&			
ANR	865085	BitAndExpression	ZEND_RESULT_TYPE ( opline ) & IS_VAR		864413	0		&			
ANR	865086	CallExpression	ZEND_RESULT_TYPE ( opline )		864413	0					
ANR	865087	Callee	ZEND_RESULT_TYPE		864413	0					
ANR	865088	Identifier	ZEND_RESULT_TYPE		864413	0					
ANR	865089	ArgumentList	opline		864413	1					
ANR	865090	Argument	opline		864413	0					
ANR	865091	Identifier	opline		864413	0					
ANR	865092	Identifier	IS_VAR		864413	1					
ANR	865093	AndExpression	( ZEND_RESULT_TYPE ( opline ) & EXT_TYPE_UNUSED ) && usage [ VAR_NUM ( ZEND_RESULT ( opline ) . var ) ]		864413	1		&&			
ANR	865094	BitAndExpression	ZEND_RESULT_TYPE ( opline ) & EXT_TYPE_UNUSED		864413	0		&			
ANR	865095	CallExpression	ZEND_RESULT_TYPE ( opline )		864413	0					
ANR	865096	Callee	ZEND_RESULT_TYPE		864413	0					
ANR	865097	Identifier	ZEND_RESULT_TYPE		864413	0					
ANR	865098	ArgumentList	opline		864413	1					
ANR	865099	Argument	opline		864413	0					
ANR	865100	Identifier	opline		864413	0					
ANR	865101	Identifier	EXT_TYPE_UNUSED		864413	1					
ANR	865102	ArrayIndexing	usage [ VAR_NUM ( ZEND_RESULT ( opline ) . var ) ]		864413	1					
ANR	865103	Identifier	usage		864413	0					
ANR	865104	CallExpression	VAR_NUM ( ZEND_RESULT ( opline ) . var )		864413	1					
ANR	865105	Callee	VAR_NUM		864413	0					
ANR	865106	Identifier	VAR_NUM		864413	0					
ANR	865107	ArgumentList	ZEND_RESULT ( opline ) . var		864413	1					
ANR	865108	Argument	ZEND_RESULT ( opline ) . var		864413	0					
ANR	865109	MemberAccess	ZEND_RESULT ( opline ) . var		864413	0					
ANR	865110	CallExpression	ZEND_RESULT ( opline )		864413	0					
ANR	865111	Callee	ZEND_RESULT		864413	0					
ANR	865112	Identifier	ZEND_RESULT		864413	0					
ANR	865113	ArgumentList	opline		864413	1					
ANR	865114	Argument	opline		864413	0					
ANR	865115	Identifier	opline		864413	0					
ANR	865116	Identifier	var		864413	1					
ANR	865117	CompoundStatement		142:57:3849:3849	864413	1					
ANR	865118	ExpressionStatement	ZEND_RESULT_TYPE ( opline ) &= ~EXT_TYPE_UNUSED	2019:4:65300:65344	864413	0	True				
ANR	865119	AssignmentExpression	ZEND_RESULT_TYPE ( opline ) &= ~EXT_TYPE_UNUSED		864413	0		&=			
ANR	865120	CallExpression	ZEND_RESULT_TYPE ( opline )		864413	0					
ANR	865121	Callee	ZEND_RESULT_TYPE		864413	0					
ANR	865122	Identifier	ZEND_RESULT_TYPE		864413	0					
ANR	865123	ArgumentList	opline		864413	1					
ANR	865124	Argument	opline		864413	0					
ANR	865125	Identifier	opline		864413	0					
ANR	865126	Identifier	~EXT_TYPE_UNUSED		864413	1					
ANR	865127	ExpressionStatement	opline --	2029:3:65585:65593	864413	31	True				
ANR	865128	PostIncDecOperationExpression	opline --		864413	0					
ANR	865129	Identifier	opline		864413	0					
ANR	865130	IncDec	--		864413	1					
ANR	865131	ExpressionStatement	block = block -> next	2031:2:65601:65620	864413	4	True				
ANR	865132	AssignmentExpression	block = block -> next		864413	0		=			
ANR	865133	Identifier	block		864413	0					
ANR	865134	PtrMemberAccess	block -> next		864413	1					
ANR	865135	Identifier	block		864413	0					
ANR	865136	Identifier	next		864413	1					
ANR	865137	ExpressionStatement	efree ( defined_here )	2034:1:65644:65663	864413	9	True				
ANR	865138	CallExpression	efree ( defined_here )		864413	0					
ANR	865139	Callee	efree		864413	0					
ANR	865140	Identifier	efree		864413	0					
ANR	865141	ArgumentList	defined_here		864413	1					
ANR	865142	Argument	defined_here		864413	0					
ANR	865143	Identifier	defined_here		864413	0					
ANR	865144	ExpressionStatement	efree ( usage )	2035:1:65666:65678	864413	10	True				
ANR	865145	CallExpression	efree ( usage )		864413	0					
ANR	865146	Callee	efree		864413	0					
ANR	865147	Identifier	efree		864413	0					
ANR	865148	ArgumentList	usage		864413	1					
ANR	865149	Argument	usage		864413	0					
ANR	865150	Identifier	usage		864413	0					
ANR	865151	ReturnType	static void		864413	1					
ANR	865152	Identifier	zend_t_usage		864413	2					
ANR	865153	ParameterList	"zend_code_block * block , zend_op_array * op_array , char * used_ext"		864413	3					
ANR	865154	Parameter	zend_code_block * block	1876:25:61379:61400	864413	0	True				
ANR	865155	ParameterType	zend_code_block *		864413	0					
ANR	865156	Identifier	block		864413	1					
ANR	865157	Parameter	zend_op_array * op_array	1876:49:61403:61425	864413	1	True				
ANR	865158	ParameterType	zend_op_array *		864413	0					
ANR	865159	Identifier	op_array		864413	1					
ANR	865160	Parameter	char * used_ext	1876:74:61428:61441	864413	2	True				
ANR	865161	ParameterType	char *		864413	0					
ANR	865162	Identifier	used_ext		864413	1					
ANR	865163	CFGEntryNode	ENTRY		864413		True				
ANR	865164	CFGExitNode	EXIT		864413		True				
ANR	865165	Symbol	next_block -> access		864413						
ANR	865166	Symbol	usage		864413						
ANR	865167	Symbol	RESULT_USED		864413						
ANR	865168	Symbol	ZEND_OP2_TYPE		864413						
ANR	865169	Symbol	opline -> result		864413						
ANR	865170	Symbol	next_block -> len		864413						
ANR	865171	Symbol	ZEND_RESULT ( opline ) . var		864413						
ANR	865172	Symbol	opline		864413						
ANR	865173	Symbol	ecalloc		864413						
ANR	865174	Symbol	block		864413						
ANR	865175	Symbol	IS_TMP_VAR		864413						
ANR	865176	Symbol	op_array -> T		864413						
ANR	865177	Symbol	* used_ext		864413						
ANR	865178	Symbol	IS_CONST		864413						
ANR	865179	Symbol	ZEND_OP2 ( opline ) . var		864413						
ANR	865180	Symbol	* next_block		864413						
ANR	865181	Symbol	& ZEND_OP1_LITERAL		864413						
ANR	865182	Symbol	stderr		864413						
ANR	865183	Symbol	* usage		864413						
ANR	865184	Symbol	* op_array		864413						
ANR	865185	Symbol	block -> start_opline		864413						
ANR	865186	Symbol	ZEND_RESULT_TYPE		864413						
ANR	865187	Symbol	block -> access		864413						
ANR	865188	Symbol	IS_VAR		864413						
ANR	865189	Symbol	opline -> op1		864413						
ANR	865190	Symbol	next_block -> start_opline		864413						
ANR	865191	Symbol	opline -> op2		864413						
ANR	865192	Symbol	used_ext		864413						
ANR	865193	Symbol	* defined_here		864413						
ANR	865194	Symbol	ZEND_ECHO		864413						
ANR	865195	Symbol	block -> next		864413						
ANR	865196	Symbol	next_block -> next		864413						
ANR	865197	Symbol	emalloc		864413						
ANR	865198	Symbol	~EXT_TYPE_UNUSED		864413						
ANR	865199	Symbol	ZEND_RESULT		864413						
ANR	865200	Symbol	end		864413						
ANR	865201	Symbol	VAR_NUM		864413						
ANR	865202	Symbol	EXT_TYPE_UNUSED		864413						
ANR	865203	Symbol	next_block		864413						
ANR	865204	Symbol	ZEND_OP1 ( opline ) . var		864413						
ANR	865205	Symbol	RES_NEVER_USED		864413						
ANR	865206	Symbol	i		864413						
ANR	865207	Symbol	* VAR_NUM		864413						
ANR	865208	Symbol	block -> len		864413						
ANR	865209	Symbol	ZEND_OP1		864413						
ANR	865210	Symbol	* block		864413						
ANR	865211	Symbol	ZEND_OP2		864413						
ANR	865212	Symbol	ZEND_OP1_TYPE		864413						
ANR	865213	Symbol	* i		864413						
ANR	865214	Symbol	* opline		864413						
ANR	865215	Symbol	opline -> opcode		864413						
ANR	865216	Symbol	defined_here		864413						
ANR	865217	Symbol	op_array		864413						
ANR	865218	Symbol	IS_UNUSED		864413						
ANR	865219	DeclStmt									
ANR	865220	Decl							zend_cfg	zend_cfg	cfg
ANR	865221	DeclStmt									
ANR	865222	Decl							zend_code_block	zend_code_block *	cur_block
ANR	865223	DeclStmt									
ANR	865224	Decl							int	int	pass
ANR	865225	DeclStmt									
ANR	865226	Decl							char	char *	usage
ANR	865227	DeclStmt									
ANR	865228	Decl							zend_block_source	zend_block_source *	cs
ANR	865229	DeclStmt									
ANR	865230	Decl							zend_block_source	zend_block_source *	n
