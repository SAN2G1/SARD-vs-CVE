command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	69369	File	data/converged/CVE-2017-11142_php-src/Zend_zend_execute.h								
ANR	69370	ClassDef	_temp_variable	30:8:1396:1805							
ANR	69371	DeclStmt									
ANR	69372	Decl							zval	zval	tmp_var
ANR	69373	ClassDef	<unnamed>	32:1:1435:1519							
ANR	69374	DeclStmt									
ANR	69375	Decl							zval	zval * *	ptr_ptr
ANR	69376	DeclStmt									
ANR	69377	Decl							zval	zval *	ptr
ANR	69378	DeclStmt									
ANR	69379	Decl							zend_bool	zend_bool	fcall_returned_reference
ANR	69380	DeclStmt									
ANR	69381	Decl									var
ANR	69382	ClassDef	<unnamed>	37:1:1522:1625							
ANR	69383	DeclStmt									
ANR	69384	Decl							zval	zval * *	ptr_ptr
ANR	69385	DeclStmt									
ANR	69386	Decl							zval	zval *	str
ANR	69387	DeclStmt									
ANR	69388	Decl							zend_uint	zend_uint	offset
ANR	69389	DeclStmt									
ANR	69390	Decl									str_offset
ANR	69391	ClassDef	<unnamed>	42:1:1628:1756							
ANR	69392	DeclStmt									
ANR	69393	Decl							zval	zval * *	ptr_ptr
ANR	69394	DeclStmt									
ANR	69395	Decl							zval	zval *	ptr
ANR	69396	DeclStmt									
ANR	69397	Decl							HashPointer	HashPointer	fe_pos
ANR	69398	DeclStmt									
ANR	69399	Decl									fe
ANR	69400	DeclStmt									
ANR	69401	Decl							zend_class_entry	zend_class_entry *	class_entry
ANR	69402	DeclStmt									
ANR	69403	Decl							_temp_variable	_temp_variable	temp_variable
ANR	69404	DeclStmt									
ANR	69405	Decl							"ZEND_API extern void ( * ) ( zend_execute_data * execute_data_ptr , struct _zend_fcall_info * fci , int return_value_used TSRMLS_DC )"	"ZEND_API extern void ( * ) ( zend_execute_data * execute_data_ptr , struct _zend_fcall_info * fci , int return_value_used TSRMLS_DC )"	zend_execute_internal
ANR	69406	DeclStmt									
ANR	69407	Decl							void	void ( TSRMLS_D )	init_executor
ANR	69408	DeclStmt									
ANR	69409	Decl							void	void ( TSRMLS_D )	shutdown_executor
ANR	69410	DeclStmt									
ANR	69411	Decl							void	void ( TSRMLS_D )	shutdown_destructors
ANR	69412	DeclStmt									
ANR	69413	Decl							ZEND_API zend_execute_data	"ZEND_API zend_execute_data * ( zend_op_array * op_array , zend_bool nested TSRMLS_DC )"	zend_create_execute_data_from_op_array
ANR	69414	DeclStmt									
ANR	69415	Decl							ZEND_API void	"ZEND_API void ( zend_execute_data * execute_data_ptr , struct _zend_fcall_info * fci , int return_value_used TSRMLS_DC )"	execute_internal
ANR	69416	DeclStmt									
ANR	69417	Decl							ZEND_API int	ZEND_API int ( zval * op )	zend_is_true
ANR	69418	DeclStmt									
ANR	69419	Decl							ZEND_API int	"ZEND_API int ( char * str , zval * retval_ptr , char * string_name , int handle_exceptions TSRMLS_DC )"	zend_eval_string_ex
ANR	69420	DeclStmt									
ANR	69421	Decl							ZEND_API int	"ZEND_API int ( char * str , int str_len , zval * retval_ptr , char * string_name , int handle_exceptions TSRMLS_DC )"	zend_eval_stringl_ex
ANR	69422	Function	i_zend_is_true	104:0:4389:5546							
ANR	69423	FunctionDef	i_zend_is_true (zval * op)		69422	0					
ANR	69424	CompoundStatement		105:0:4444:5546	69422	0					
ANR	69425	IdentifierDeclStatement	int result ;	106:1:4447:4457	69422	0	True				
ANR	69426	IdentifierDecl	result		69422	0					
ANR	69427	IdentifierDeclType	int		69422	0					
ANR	69428	Identifier	result		69422	1					
ANR	69429	SwitchStatement	switch ( Z_TYPE_P ( op ) )		69422	1					
ANR	69430	Condition	Z_TYPE_P ( op )	108:9:4469:4480	69422	0	True				
ANR	69431	CallExpression	Z_TYPE_P ( op )		69422	0					
ANR	69432	Callee	Z_TYPE_P		69422	0					
ANR	69433	Identifier	Z_TYPE_P		69422	0					
ANR	69434	ArgumentList	op		69422	1					
ANR	69435	Argument	op		69422	0					
ANR	69436	Identifier	op		69422	0					
ANR	69437	CompoundStatement		4:23:38:38	69422	1					
ANR	69438	Label	case IS_NULL :	109:2:4487:4499	69422	0	True				
ANR	69439	Identifier	IS_NULL		69422	0					
ANR	69440	ExpressionStatement	result = 0	110:3:4504:4514	69422	1	True				
ANR	69441	AssignmentExpression	result = 0		69422	0		=			
ANR	69442	Identifier	result		69422	0					
ANR	69443	PrimaryExpression	0		69422	1					
ANR	69444	BreakStatement	break ;	111:3:4519:4524	69422	2	True				
ANR	69445	Label	case IS_LONG :	112:2:4528:4540	69422	3	True				
ANR	69446	Identifier	IS_LONG		69422	0					
ANR	69447	Label	case IS_BOOL :	113:2:4544:4556	69422	4	True				
ANR	69448	Identifier	IS_BOOL		69422	0					
ANR	69449	Label	case IS_RESOURCE :	114:2:4560:4576	69422	5	True				
ANR	69450	Identifier	IS_RESOURCE		69422	0					
ANR	69451	ExpressionStatement	result = ( Z_LVAL_P ( op ) ? 1 : 0 )	115:3:4581:4608	69422	6	True				
ANR	69452	AssignmentExpression	result = ( Z_LVAL_P ( op ) ? 1 : 0 )		69422	0		=			
ANR	69453	Identifier	result		69422	0					
ANR	69454	ConditionalExpression	Z_LVAL_P ( op ) ? 1 : 0		69422	1					
ANR	69455	Condition	Z_LVAL_P ( op )		69422	0					
ANR	69456	CallExpression	Z_LVAL_P ( op )		69422	0					
ANR	69457	Callee	Z_LVAL_P		69422	0					
ANR	69458	Identifier	Z_LVAL_P		69422	0					
ANR	69459	ArgumentList	op		69422	1					
ANR	69460	Argument	op		69422	0					
ANR	69461	Identifier	op		69422	0					
ANR	69462	PrimaryExpression	1		69422	1					
ANR	69463	PrimaryExpression	0		69422	2					
ANR	69464	BreakStatement	break ;	116:3:4613:4618	69422	7	True				
ANR	69465	Label	case IS_DOUBLE :	117:2:4622:4636	69422	8	True				
ANR	69466	Identifier	IS_DOUBLE		69422	0					
ANR	69467	ExpressionStatement	result = ( Z_DVAL_P ( op ) ? 1 : 0 )	118:3:4641:4672	69422	9	True				
ANR	69468	AssignmentExpression	result = ( Z_DVAL_P ( op ) ? 1 : 0 )		69422	0		=			
ANR	69469	Identifier	result		69422	0					
ANR	69470	ConditionalExpression	Z_DVAL_P ( op ) ? 1 : 0		69422	1					
ANR	69471	Condition	Z_DVAL_P ( op )		69422	0					
ANR	69472	CallExpression	Z_DVAL_P ( op )		69422	0					
ANR	69473	Callee	Z_DVAL_P		69422	0					
ANR	69474	Identifier	Z_DVAL_P		69422	0					
ANR	69475	ArgumentList	op		69422	1					
ANR	69476	Argument	op		69422	0					
ANR	69477	Identifier	op		69422	0					
ANR	69478	PrimaryExpression	1		69422	1					
ANR	69479	PrimaryExpression	0		69422	2					
ANR	69480	BreakStatement	break ;	119:3:4677:4682	69422	10	True				
ANR	69481	Label	case IS_STRING :	120:2:4686:4700	69422	11	True				
ANR	69482	Identifier	IS_STRING		69422	0					
ANR	69483	IfStatement	if ( Z_STRLEN_P ( op ) == 0 || ( Z_STRLEN_P ( op ) == 1 && Z_STRVAL_P ( op ) [ 0 ] == '0' ) )		69422	12					
ANR	69484	Condition	Z_STRLEN_P ( op ) == 0 || ( Z_STRLEN_P ( op ) == 1 && Z_STRVAL_P ( op ) [ 0 ] == '0' )	121:7:4709:4780	69422	0	True				
ANR	69485	OrExpression	Z_STRLEN_P ( op ) == 0 || ( Z_STRLEN_P ( op ) == 1 && Z_STRVAL_P ( op ) [ 0 ] == '0' )		69422	0		||			
ANR	69486	EqualityExpression	Z_STRLEN_P ( op ) == 0		69422	0		==			
ANR	69487	CallExpression	Z_STRLEN_P ( op )		69422	0					
ANR	69488	Callee	Z_STRLEN_P		69422	0					
ANR	69489	Identifier	Z_STRLEN_P		69422	0					
ANR	69490	ArgumentList	op		69422	1					
ANR	69491	Argument	op		69422	0					
ANR	69492	Identifier	op		69422	0					
ANR	69493	PrimaryExpression	0		69422	1					
ANR	69494	AndExpression	Z_STRLEN_P ( op ) == 1 && Z_STRVAL_P ( op ) [ 0 ] == '0'		69422	1		&&			
ANR	69495	EqualityExpression	Z_STRLEN_P ( op ) == 1		69422	0		==			
ANR	69496	CallExpression	Z_STRLEN_P ( op )		69422	0					
ANR	69497	Callee	Z_STRLEN_P		69422	0					
ANR	69498	Identifier	Z_STRLEN_P		69422	0					
ANR	69499	ArgumentList	op		69422	1					
ANR	69500	Argument	op		69422	0					
ANR	69501	Identifier	op		69422	0					
ANR	69502	PrimaryExpression	1		69422	1					
ANR	69503	EqualityExpression	Z_STRVAL_P ( op ) [ 0 ] == '0'		69422	1		==			
ANR	69504	ArrayIndexing	Z_STRVAL_P ( op ) [ 0 ]		69422	0					
ANR	69505	CallExpression	Z_STRVAL_P ( op )		69422	0					
ANR	69506	Callee	Z_STRVAL_P		69422	0					
ANR	69507	Identifier	Z_STRVAL_P		69422	0					
ANR	69508	ArgumentList	op		69422	1					
ANR	69509	Argument	op		69422	0					
ANR	69510	Identifier	op		69422	0					
ANR	69511	PrimaryExpression	0		69422	1					
ANR	69512	PrimaryExpression	'0'		69422	1					
ANR	69513	CompoundStatement		18:54:338:338	69422	1					
ANR	69514	ExpressionStatement	result = 0	123:4:4789:4799	69422	0	True				
ANR	69515	AssignmentExpression	result = 0		69422	0		=			
ANR	69516	Identifier	result		69422	0					
ANR	69517	PrimaryExpression	0		69422	1					
ANR	69518	ElseStatement	else		69422	0					
ANR	69519	CompoundStatement		20:10:366:366	69422	0					
ANR	69520	ExpressionStatement	result = 1	125:4:4817:4827	69422	0	True				
ANR	69521	AssignmentExpression	result = 1		69422	0		=			
ANR	69522	Identifier	result		69422	0					
ANR	69523	PrimaryExpression	1		69422	1					
ANR	69524	BreakStatement	break ;	127:3:4837:4842	69422	13	True				
ANR	69525	Label	case IS_ARRAY :	128:2:4846:4859	69422	14	True				
ANR	69526	Identifier	IS_ARRAY		69422	0					
ANR	69527	ExpressionStatement	result = ( zend_hash_num_elements ( Z_ARRVAL_P ( op ) ) ? 1 : 0 )	129:3:4864:4917	69422	15	True				
ANR	69528	AssignmentExpression	result = ( zend_hash_num_elements ( Z_ARRVAL_P ( op ) ) ? 1 : 0 )		69422	0		=			
ANR	69529	Identifier	result		69422	0					
ANR	69530	ConditionalExpression	zend_hash_num_elements ( Z_ARRVAL_P ( op ) ) ? 1 : 0		69422	1					
ANR	69531	Condition	zend_hash_num_elements ( Z_ARRVAL_P ( op ) )		69422	0					
ANR	69532	CallExpression	zend_hash_num_elements ( Z_ARRVAL_P ( op ) )		69422	0					
ANR	69533	Callee	zend_hash_num_elements		69422	0					
ANR	69534	Identifier	zend_hash_num_elements		69422	0					
ANR	69535	ArgumentList	Z_ARRVAL_P ( op )		69422	1					
ANR	69536	Argument	Z_ARRVAL_P ( op )		69422	0					
ANR	69537	CallExpression	Z_ARRVAL_P ( op )		69422	0					
ANR	69538	Callee	Z_ARRVAL_P		69422	0					
ANR	69539	Identifier	Z_ARRVAL_P		69422	0					
ANR	69540	ArgumentList	op		69422	1					
ANR	69541	Argument	op		69422	0					
ANR	69542	Identifier	op		69422	0					
ANR	69543	PrimaryExpression	1		69422	1					
ANR	69544	PrimaryExpression	0		69422	2					
ANR	69545	BreakStatement	break ;	130:3:4922:4927	69422	16	True				
ANR	69546	Label	case IS_OBJECT :	131:2:4931:4945	69422	17	True				
ANR	69547	Identifier	IS_OBJECT		69422	0					
ANR	69548	IfStatement	if ( IS_ZEND_STD_OBJECT ( * op ) )		69422	18					
ANR	69549	Condition	IS_ZEND_STD_OBJECT ( * op )	132:6:4953:4975	69422	0	True				
ANR	69550	CallExpression	IS_ZEND_STD_OBJECT ( * op )		69422	0					
ANR	69551	Callee	IS_ZEND_STD_OBJECT		69422	0					
ANR	69552	Identifier	IS_ZEND_STD_OBJECT		69422	0					
ANR	69553	ArgumentList	* op		69422	1					
ANR	69554	Argument	* op		69422	0					
ANR	69555	UnaryOperationExpression	* op		69422	0					
ANR	69556	UnaryOperator	*		69422	0					
ANR	69557	Identifier	op		69422	1					
ANR	69558	CompoundStatement		28:31:533:533	69422	1					
ANR	69559	ExpressionStatement	TSRMLS_FETCH ( )	133:4:4984:4998	69422	0	True				
ANR	69560	CallExpression	TSRMLS_FETCH ( )		69422	0					
ANR	69561	Callee	TSRMLS_FETCH		69422	0					
ANR	69562	Identifier	TSRMLS_FETCH		69422	0					
ANR	69563	ArgumentList			69422	1					
ANR	69564	IfStatement	if ( Z_OBJ_HT_P ( op ) -> cast_object )		69422	1					
ANR	69565	Condition	Z_OBJ_HT_P ( op ) -> cast_object	135:8:5009:5035	69422	0	True				
ANR	69566	PtrMemberAccess	Z_OBJ_HT_P ( op ) -> cast_object		69422	0					
ANR	69567	CallExpression	Z_OBJ_HT_P ( op )		69422	0					
ANR	69568	Callee	Z_OBJ_HT_P		69422	0					
ANR	69569	Identifier	Z_OBJ_HT_P		69422	0					
ANR	69570	ArgumentList	op		69422	1					
ANR	69571	Argument	op		69422	0					
ANR	69572	Identifier	op		69422	0					
ANR	69573	Identifier	cast_object		69422	1					
ANR	69574	CompoundStatement		32:5:600:608	69422	1					
ANR	69575	IdentifierDeclStatement	zval tmp ;	136:5:5045:5053	69422	0	True				
ANR	69576	IdentifierDecl	tmp		69422	0					
ANR	69577	IdentifierDeclType	zval		69422	0					
ANR	69578	Identifier	tmp		69422	1					
ANR	69579	Statement	if	137:5:5060:5061	69422	1	True				
ANR	69580	Statement	(	137:8:5063:5063	69422	2	True				
ANR	69581	Statement	Z_OBJ_HT_P	137:9:5064:5073	69422	3	True				
ANR	69582	Statement	(	137:19:5074:5074	69422	4	True				
ANR	69583	Statement	op	137:20:5075:5076	69422	5	True				
ANR	69584	Statement	)	137:22:5077:5077	69422	6	True				
ANR	69585	Statement	->	137:23:5078:5079	69422	7	True				
ANR	69586	Statement	cast_object	137:25:5080:5090	69422	8	True				
ANR	69587	Statement	(	137:36:5091:5091	69422	9	True				
ANR	69588	Statement	op	137:37:5092:5093	69422	10	True				
ANR	69589	Statement	","	137:39:5094:5094	69422	11	True				
ANR	69590	Statement	&	137:41:5096:5096	69422	12	True				
ANR	69591	Statement	tmp	137:42:5097:5099	69422	13	True				
ANR	69592	Statement	","	137:45:5100:5100	69422	14	True				
ANR	69593	Statement	IS_BOOL	137:47:5102:5108	69422	15	True				
ANR	69594	Statement	TSRMLS_CC	137:55:5110:5118	69422	16	True				
ANR	69595	Statement	)	137:64:5119:5119	69422	17	True				
ANR	69596	Statement	==	137:66:5121:5122	69422	18	True				
ANR	69597	Statement	SUCCESS	137:69:5124:5130	69422	19	True				
ANR	69598	Statement	)	137:76:5131:5131	69422	20	True				
ANR	69599	CompoundStatement		33:78:688:688	69422	21					
ANR	69600	ExpressionStatement	result = Z_LVAL ( tmp )	138:6:5141:5161	69422	0	True				
ANR	69601	AssignmentExpression	result = Z_LVAL ( tmp )		69422	0		=			
ANR	69602	Identifier	result		69422	0					
ANR	69603	CallExpression	Z_LVAL ( tmp )		69422	1					
ANR	69604	Callee	Z_LVAL		69422	0					
ANR	69605	Identifier	Z_LVAL		69422	0					
ANR	69606	ArgumentList	tmp		69422	1					
ANR	69607	Argument	tmp		69422	0					
ANR	69608	Identifier	tmp		69422	0					
ANR	69609	BreakStatement	break ;	139:6:5169:5174	69422	1	True				
ANR	69610	ElseStatement	else		69422	0					
ANR	69611	IfStatement	if ( Z_OBJ_HT_P ( op ) -> get )		69422	0					
ANR	69612	Condition	Z_OBJ_HT_P ( op ) -> get	141:15:5198:5216	69422	0	True				
ANR	69613	PtrMemberAccess	Z_OBJ_HT_P ( op ) -> get		69422	0					
ANR	69614	CallExpression	Z_OBJ_HT_P ( op )		69422	0					
ANR	69615	Callee	Z_OBJ_HT_P		69422	0					
ANR	69616	Identifier	Z_OBJ_HT_P		69422	0					
ANR	69617	ArgumentList	op		69422	1					
ANR	69618	Argument	op		69422	0					
ANR	69619	Identifier	op		69422	0					
ANR	69620	Identifier	get		69422	1					
ANR	69621	CompoundStatement		37:36:774:774	69422	1					
ANR	69622	Statement	zval	142:5:5226:5229	69422	0	True				
ANR	69623	Statement	*	142:10:5231:5231	69422	1	True				
ANR	69624	Statement	tmp	142:11:5232:5234	69422	2	True				
ANR	69625	Statement	=	142:15:5236:5236	69422	3	True				
ANR	69626	Statement	Z_OBJ_HT_P	142:17:5238:5247	69422	4	True				
ANR	69627	Statement	(	142:27:5248:5248	69422	5	True				
ANR	69628	Statement	op	142:28:5249:5250	69422	6	True				
ANR	69629	Statement	)	142:30:5251:5251	69422	7	True				
ANR	69630	Statement	->	142:31:5252:5253	69422	8	True				
ANR	69631	Statement	get	142:33:5254:5256	69422	9	True				
ANR	69632	Statement	(	142:36:5257:5257	69422	10	True				
ANR	69633	Statement	op	142:37:5258:5259	69422	11	True				
ANR	69634	Statement	TSRMLS_CC	142:40:5261:5269	69422	12	True				
ANR	69635	Statement	)	142:49:5270:5270	69422	13	True				
ANR	69636	ExpressionStatement		142:50:5271:5271	69422	14	True				
ANR	69637	IfStatement	if ( Z_TYPE_P ( tmp ) != IS_OBJECT )		69422	15					
ANR	69638	Condition	Z_TYPE_P ( tmp ) != IS_OBJECT	143:8:5281:5306	69422	0	True				
ANR	69639	EqualityExpression	Z_TYPE_P ( tmp ) != IS_OBJECT		69422	0		!=			
ANR	69640	CallExpression	Z_TYPE_P ( tmp )		69422	0					
ANR	69641	Callee	Z_TYPE_P		69422	0					
ANR	69642	Identifier	Z_TYPE_P		69422	0					
ANR	69643	ArgumentList	tmp		69422	1					
ANR	69644	Argument	tmp		69422	0					
ANR	69645	Identifier	tmp		69422	0					
ANR	69646	Identifier	IS_OBJECT		69422	1					
ANR	69647	CompoundStatement		39:36:864:864	69422	1					
ANR	69648	ExpressionStatement	convert_to_boolean ( tmp )	145:6:5353:5376	69422	0	True				
ANR	69649	CallExpression	convert_to_boolean ( tmp )		69422	0					
ANR	69650	Callee	convert_to_boolean		69422	0					
ANR	69651	Identifier	convert_to_boolean		69422	0					
ANR	69652	ArgumentList	tmp		69422	1					
ANR	69653	Argument	tmp		69422	0					
ANR	69654	Identifier	tmp		69422	0					
ANR	69655	ExpressionStatement	result = Z_LVAL_P ( tmp )	146:6:5384:5406	69422	1	True				
ANR	69656	AssignmentExpression	result = Z_LVAL_P ( tmp )		69422	0		=			
ANR	69657	Identifier	result		69422	0					
ANR	69658	CallExpression	Z_LVAL_P ( tmp )		69422	1					
ANR	69659	Callee	Z_LVAL_P		69422	0					
ANR	69660	Identifier	Z_LVAL_P		69422	0					
ANR	69661	ArgumentList	tmp		69422	1					
ANR	69662	Argument	tmp		69422	0					
ANR	69663	Identifier	tmp		69422	0					
ANR	69664	ExpressionStatement	zval_ptr_dtor ( & tmp )	147:6:5414:5433	69422	2	True				
ANR	69665	CallExpression	zval_ptr_dtor ( & tmp )		69422	0					
ANR	69666	Callee	zval_ptr_dtor		69422	0					
ANR	69667	Identifier	zval_ptr_dtor		69422	0					
ANR	69668	ArgumentList	& tmp		69422	1					
ANR	69669	Argument	& tmp		69422	0					
ANR	69670	UnaryOperationExpression	& tmp		69422	0					
ANR	69671	UnaryOperator	&		69422	0					
ANR	69672	Identifier	tmp		69422	1					
ANR	69673	BreakStatement	break ;	148:6:5441:5446	69422	3	True				
ANR	69674	ExpressionStatement	result = 1	152:3:5469:5479	69422	19	True				
ANR	69675	AssignmentExpression	result = 1		69422	0		=			
ANR	69676	Identifier	result		69422	0					
ANR	69677	PrimaryExpression	1		69422	1					
ANR	69678	BreakStatement	break ;	153:3:5484:5489	69422	20	True				
ANR	69679	Label	default :	154:2:5493:5500	69422	21	True				
ANR	69680	Identifier	default		69422	0					
ANR	69681	ExpressionStatement	result = 0	155:3:5505:5515	69422	22	True				
ANR	69682	AssignmentExpression	result = 0		69422	0		=			
ANR	69683	Identifier	result		69422	0					
ANR	69684	PrimaryExpression	0		69422	1					
ANR	69685	BreakStatement	break ;	156:3:5520:5525	69422	23	True				
ANR	69686	ReturnStatement	return result ;	158:1:5531:5544	69422	2	True				
ANR	69687	Identifier	result		69422	0					
ANR	69688	ReturnType	static zend_always_inline int		69422	1					
ANR	69689	Identifier	i_zend_is_true		69422	2					
ANR	69690	ParameterList	zval * op		69422	3					
ANR	69691	Parameter	zval * op	104:45:4434:4441	69422	0	True				
ANR	69692	ParameterType	zval *		69422	0					
ANR	69693	Identifier	op		69422	1					
ANR	69694	CFGEntryNode	ENTRY		69422		True				
ANR	69695	CFGExitNode	EXIT		69422		True				
ANR	69696	Symbol	op		69422						
ANR	69697	Symbol	* op		69422						
ANR	69698	Symbol	zend_hash_num_elements		69422						
ANR	69699	Symbol	Z_LVAL		69422						
ANR	69700	Symbol	Z_TYPE_P		69422						
ANR	69701	Symbol	Z_STRVAL_P		69422						
ANR	69702	Symbol	* Z_OBJ_HT_P		69422						
ANR	69703	Symbol	Z_DVAL_P		69422						
ANR	69704	Symbol	IS_ZEND_STD_OBJECT		69422						
ANR	69705	Symbol	Z_LVAL_P		69422						
ANR	69706	Symbol	result		69422						
ANR	69707	Symbol	Z_OBJ_HT_P ( op ) -> get		69422						
ANR	69708	Symbol	tmp		69422						
ANR	69709	Symbol	Z_OBJ_HT_P		69422						
ANR	69710	Symbol	Z_STRLEN_P		69422						
ANR	69711	Symbol	Z_OBJ_HT_P ( op ) -> cast_object		69422						
ANR	69712	Symbol	& tmp		69422						
ANR	69713	Symbol	* Z_STRVAL_P		69422						
ANR	69714	Symbol	Z_ARRVAL_P		69422						
ANR	69715	Symbol	IS_OBJECT		69422						
ANR	69716	DeclStmt									
ANR	69717	Decl							ZEND_API int	"ZEND_API int ( zval * * pp , zend_bool inline_change TSRMLS_DC )"	zval_update_constant
ANR	69718	ClassDef	_zend_vm_stack	169:0:6039:6110							
ANR	69719	DeclStmt									
ANR	69720	Decl							void	void * *	top
ANR	69721	DeclStmt									
ANR	69722	Decl							void	void * *	end
ANR	69723	DeclStmt									
ANR	69724	Decl							zend_vm_stack	zend_vm_stack	prev
ANR	69725	Function	zend_vm_stack_new_page	186:0:6494:6786							
ANR	69726	FunctionDef	zend_vm_stack_new_page (int count)		69725	0					
ANR	69727	CompoundStatement		186:74:6568:6786	69725	0					
ANR	69728	IdentifierDeclStatement	zend_vm_stack page = ( zend_vm_stack ) emalloc ( ZEND_MM_ALIGNED_SIZE ( sizeof ( * page ) ) + sizeof ( void * ) * count ) ;	187:1:6571:6675	69725	0	True				
ANR	69729	IdentifierDecl	page = ( zend_vm_stack ) emalloc ( ZEND_MM_ALIGNED_SIZE ( sizeof ( * page ) ) + sizeof ( void * ) * count )		69725	0					
ANR	69730	IdentifierDeclType	zend_vm_stack		69725	0					
ANR	69731	Identifier	page		69725	1					
ANR	69732	AssignmentExpression	page = ( zend_vm_stack ) emalloc ( ZEND_MM_ALIGNED_SIZE ( sizeof ( * page ) ) + sizeof ( void * ) * count )		69725	2		=			
ANR	69733	Identifier	page		69725	0					
ANR	69734	CastExpression	( zend_vm_stack ) emalloc ( ZEND_MM_ALIGNED_SIZE ( sizeof ( * page ) ) + sizeof ( void * ) * count )		69725	1					
ANR	69735	CastTarget	zend_vm_stack		69725	0					
ANR	69736	CallExpression	emalloc ( ZEND_MM_ALIGNED_SIZE ( sizeof ( * page ) ) + sizeof ( void * ) * count )		69725	1					
ANR	69737	Callee	emalloc		69725	0					
ANR	69738	Identifier	emalloc		69725	0					
ANR	69739	ArgumentList	ZEND_MM_ALIGNED_SIZE ( sizeof ( * page ) ) + sizeof ( void * ) * count		69725	1					
ANR	69740	Argument	ZEND_MM_ALIGNED_SIZE ( sizeof ( * page ) ) + sizeof ( void * ) * count		69725	0					
ANR	69741	AdditiveExpression	ZEND_MM_ALIGNED_SIZE ( sizeof ( * page ) ) + sizeof ( void * ) * count		69725	0		+			
ANR	69742	CallExpression	ZEND_MM_ALIGNED_SIZE ( sizeof ( * page ) )		69725	0					
ANR	69743	Callee	ZEND_MM_ALIGNED_SIZE		69725	0					
ANR	69744	Identifier	ZEND_MM_ALIGNED_SIZE		69725	0					
ANR	69745	ArgumentList	sizeof ( * page )		69725	1					
ANR	69746	Argument	sizeof ( * page )		69725	0					
ANR	69747	SizeofExpression	sizeof ( * page )		69725	0					
ANR	69748	Sizeof	sizeof		69725	0					
ANR	69749	UnaryOperationExpression	* page		69725	1					
ANR	69750	UnaryOperator	*		69725	0					
ANR	69751	Identifier	page		69725	1					
ANR	69752	MultiplicativeExpression	sizeof ( void * ) * count		69725	1		*			
ANR	69753	SizeofExpression	sizeof ( void * )		69725	0					
ANR	69754	Sizeof	sizeof		69725	0					
ANR	69755	SizeofOperand	void *		69725	1					
ANR	69756	Identifier	count		69725	1					
ANR	69757	ExpressionStatement	page -> top = ZEND_VM_STACK_ELEMETS ( page )	189:1:6679:6718	69725	1	True				
ANR	69758	AssignmentExpression	page -> top = ZEND_VM_STACK_ELEMETS ( page )		69725	0		=			
ANR	69759	PtrMemberAccess	page -> top		69725	0					
ANR	69760	Identifier	page		69725	0					
ANR	69761	Identifier	top		69725	1					
ANR	69762	CallExpression	ZEND_VM_STACK_ELEMETS ( page )		69725	1					
ANR	69763	Callee	ZEND_VM_STACK_ELEMETS		69725	0					
ANR	69764	Identifier	ZEND_VM_STACK_ELEMETS		69725	0					
ANR	69765	ArgumentList	page		69725	1					
ANR	69766	Argument	page		69725	0					
ANR	69767	Identifier	page		69725	0					
ANR	69768	ExpressionStatement	page -> end = page -> top + count	190:1:6721:6750	69725	2	True				
ANR	69769	AssignmentExpression	page -> end = page -> top + count		69725	0		=			
ANR	69770	PtrMemberAccess	page -> end		69725	0					
ANR	69771	Identifier	page		69725	0					
ANR	69772	Identifier	end		69725	1					
ANR	69773	AdditiveExpression	page -> top + count		69725	1		+			
ANR	69774	PtrMemberAccess	page -> top		69725	0					
ANR	69775	Identifier	page		69725	0					
ANR	69776	Identifier	top		69725	1					
ANR	69777	Identifier	count		69725	1					
ANR	69778	ExpressionStatement	page -> prev = NULL	191:1:6753:6770	69725	3	True				
ANR	69779	AssignmentExpression	page -> prev = NULL		69725	0		=			
ANR	69780	PtrMemberAccess	page -> prev		69725	0					
ANR	69781	Identifier	page		69725	0					
ANR	69782	Identifier	prev		69725	1					
ANR	69783	Identifier	NULL		69725	1					
ANR	69784	ReturnStatement	return page ;	192:1:6773:6784	69725	4	True				
ANR	69785	Identifier	page		69725	0					
ANR	69786	ReturnType	static zend_always_inline zend_vm_stack		69725	1					
ANR	69787	Identifier	zend_vm_stack_new_page		69725	2					
ANR	69788	ParameterList	int count		69725	3					
ANR	69789	Parameter	int count	186:63:6557:6565	69725	0	True				
ANR	69790	ParameterType	int		69725	0					
ANR	69791	Identifier	count		69725	1					
ANR	69792	CFGEntryNode	ENTRY		69725		True				
ANR	69793	CFGExitNode	EXIT		69725		True				
ANR	69794	Symbol	page -> end		69725						
ANR	69795	Symbol	emalloc		69725						
ANR	69796	Symbol	NULL		69725						
ANR	69797	Symbol	ZEND_MM_ALIGNED_SIZE		69725						
ANR	69798	Symbol	* page		69725						
ANR	69799	Symbol	count		69725						
ANR	69800	Symbol	page		69725						
ANR	69801	Symbol	page -> top		69725						
ANR	69802	Symbol	ZEND_VM_STACK_ELEMETS		69725						
ANR	69803	Symbol	page -> prev		69725						
ANR	69804	DeclStmt									
ANR	69805	Decl							zend_vm_stack	zend_vm_stack	stack
ANR	69806	DeclStmt									
ANR	69807	Decl							zend_vm_stack	zend_vm_stack	p
ANR	69808	Function	zend_vm_stack_extend	211:0:7127:7369							
ANR	69809	FunctionDef	zend_vm_stack_extend (int count TSRMLS_DC)		69808	0					
ANR	69810	CompoundStatement		212:0:7200:7369	69808	0					
ANR	69811	IdentifierDeclStatement	zend_vm_stack p = zend_vm_stack_new_page ( count >= ZEND_VM_STACK_PAGE_SIZE ? count : ZEND_VM_STACK_PAGE_SIZE ) ;	213:1:7203:7311	69808	0	True				
ANR	69812	IdentifierDecl	p = zend_vm_stack_new_page ( count >= ZEND_VM_STACK_PAGE_SIZE ? count : ZEND_VM_STACK_PAGE_SIZE )		69808	0					
ANR	69813	IdentifierDeclType	zend_vm_stack		69808	0					
ANR	69814	Identifier	p		69808	1					
ANR	69815	AssignmentExpression	p = zend_vm_stack_new_page ( count >= ZEND_VM_STACK_PAGE_SIZE ? count : ZEND_VM_STACK_PAGE_SIZE )		69808	2		=			
ANR	69816	Identifier	p		69808	0					
ANR	69817	CallExpression	zend_vm_stack_new_page ( count >= ZEND_VM_STACK_PAGE_SIZE ? count : ZEND_VM_STACK_PAGE_SIZE )		69808	1					
ANR	69818	Callee	zend_vm_stack_new_page		69808	0					
ANR	69819	Identifier	zend_vm_stack_new_page		69808	0					
ANR	69820	ArgumentList	count >= ZEND_VM_STACK_PAGE_SIZE ? count : ZEND_VM_STACK_PAGE_SIZE		69808	1					
ANR	69821	Argument	count >= ZEND_VM_STACK_PAGE_SIZE ? count : ZEND_VM_STACK_PAGE_SIZE		69808	0					
ANR	69822	ConditionalExpression	count >= ZEND_VM_STACK_PAGE_SIZE ? count : ZEND_VM_STACK_PAGE_SIZE		69808	0					
ANR	69823	Condition	count >= ZEND_VM_STACK_PAGE_SIZE		69808	0					
ANR	69824	RelationalExpression	count >= ZEND_VM_STACK_PAGE_SIZE		69808	0		>=			
ANR	69825	Identifier	count		69808	0					
ANR	69826	Identifier	ZEND_VM_STACK_PAGE_SIZE		69808	1					
ANR	69827	Identifier	count		69808	1					
ANR	69828	Identifier	ZEND_VM_STACK_PAGE_SIZE		69808	2					
ANR	69829	ExpressionStatement	p -> prev = EG ( argument_stack )	214:1:7314:7342	69808	1	True				
ANR	69830	AssignmentExpression	p -> prev = EG ( argument_stack )		69808	0		=			
ANR	69831	PtrMemberAccess	p -> prev		69808	0					
ANR	69832	Identifier	p		69808	0					
ANR	69833	Identifier	prev		69808	1					
ANR	69834	CallExpression	EG ( argument_stack )		69808	1					
ANR	69835	Callee	EG		69808	0					
ANR	69836	Identifier	EG		69808	0					
ANR	69837	ArgumentList	argument_stack		69808	1					
ANR	69838	Argument	argument_stack		69808	0					
ANR	69839	Identifier	argument_stack		69808	0					
ANR	69840	ExpressionStatement	EG ( argument_stack ) = p	215:1:7345:7367	69808	2	True				
ANR	69841	AssignmentExpression	EG ( argument_stack ) = p		69808	0		=			
ANR	69842	CallExpression	EG ( argument_stack )		69808	0					
ANR	69843	Callee	EG		69808	0					
ANR	69844	Identifier	EG		69808	0					
ANR	69845	ArgumentList	argument_stack		69808	1					
ANR	69846	Argument	argument_stack		69808	0					
ANR	69847	Identifier	argument_stack		69808	0					
ANR	69848	Identifier	p		69808	1					
ANR	69849	ReturnType	static zend_always_inline void		69808	1					
ANR	69850	Identifier	zend_vm_stack_extend		69808	2					
ANR	69851	ParameterList	int count TSRMLS_DC		69808	3					
ANR	69852	Parameter	int count TSRMLS_DC	211:52:7179:7197	69808	0	True				
ANR	69853	ParameterType	int count		69808	0					
ANR	69854	Identifier	TSRMLS_DC		69808	1					
ANR	69855	CFGEntryNode	ENTRY		69808		True				
ANR	69856	CFGExitNode	EXIT		69808		True				
ANR	69857	Symbol	p		69808						
ANR	69858	Symbol	p -> prev		69808						
ANR	69859	Symbol	EG		69808						
ANR	69860	Symbol	argument_stack		69808						
ANR	69861	Symbol	count		69808						
ANR	69862	Symbol	* p		69808						
ANR	69863	Symbol	TSRMLS_DC		69808						
ANR	69864	Symbol	zend_vm_stack_new_page		69808						
ANR	69865	Symbol	ZEND_VM_STACK_PAGE_SIZE		69808						
ANR	69866	DeclStmt									
ANR	69867	Decl							void	void *	el
ANR	69868	Function	zend_vm_stack_alloc	235:0:7704:8693							
ANR	69869	FunctionDef	zend_vm_stack_alloc (size_t size TSRMLS_DC)		69868	0					
ANR	69870	CompoundStatement		236:0:7779:8693	69868	0					
ANR	69871	IdentifierDeclStatement	void * ret ;	237:1:7782:7791	69868	0	True				
ANR	69872	IdentifierDecl	* ret		69868	0					
ANR	69873	IdentifierDeclType	void *		69868	0					
ANR	69874	Identifier	ret		69868	1					
ANR	69875	ExpressionStatement	size = ( size + ( sizeof ( void * ) - 1 ) ) / sizeof ( void * )	239:1:7795:7846	69868	1	True				
ANR	69876	AssignmentExpression	size = ( size + ( sizeof ( void * ) - 1 ) ) / sizeof ( void * )		69868	0		=			
ANR	69877	Identifier	size		69868	0					
ANR	69878	MultiplicativeExpression	( size + ( sizeof ( void * ) - 1 ) ) / sizeof ( void * )		69868	1		/			
ANR	69879	AdditiveExpression	size + ( sizeof ( void * ) - 1 )		69868	0		+			
ANR	69880	Identifier	size		69868	0					
ANR	69881	AdditiveExpression	sizeof ( void * ) - 1		69868	1		-			
ANR	69882	SizeofExpression	sizeof ( void * )		69868	0					
ANR	69883	Sizeof	sizeof		69868	0					
ANR	69884	SizeofOperand	void *		69868	1					
ANR	69885	PrimaryExpression	1		69868	1					
ANR	69886	SizeofExpression	sizeof ( void * )		69868	1					
ANR	69887	Sizeof	sizeof		69868	0					
ANR	69888	SizeofOperand	void *		69868	1					
ANR	69889	IfStatement	if ( ZEND_MM_ALIGNMENT > sizeof ( void * ) )		69868	2					
ANR	69890	Condition	ZEND_MM_ALIGNMENT > sizeof ( void * )	242:5:7924:7956	69868	0	True				
ANR	69891	RelationalExpression	ZEND_MM_ALIGNMENT > sizeof ( void * )		69868	0		>			
ANR	69892	Identifier	ZEND_MM_ALIGNMENT		69868	0					
ANR	69893	SizeofExpression	sizeof ( void * )		69868	1					
ANR	69894	Sizeof	sizeof		69868	0					
ANR	69895	SizeofOperand	void *		69868	1					
ANR	69896	CompoundStatement		8:2:183:300	69868	1					
ANR	69897	IdentifierDeclStatement	int extra = ( ZEND_MM_ALIGNMENT - ( ( zend_uintptr_t ) EG ( argument_stack ) -> top & ( ZEND_MM_ALIGNMENT - 1 ) ) ) / sizeof ( void * ) ;	243:2:7963:8080	69868	0	True				
ANR	69898	IdentifierDecl	extra = ( ZEND_MM_ALIGNMENT - ( ( zend_uintptr_t ) EG ( argument_stack ) -> top & ( ZEND_MM_ALIGNMENT - 1 ) ) ) / sizeof ( void * )		69868	0					
ANR	69899	IdentifierDeclType	int		69868	0					
ANR	69900	Identifier	extra		69868	1					
ANR	69901	AssignmentExpression	extra = ( ZEND_MM_ALIGNMENT - ( ( zend_uintptr_t ) EG ( argument_stack ) -> top & ( ZEND_MM_ALIGNMENT - 1 ) ) ) / sizeof ( void * )		69868	2		=			
ANR	69902	Identifier	extra		69868	0					
ANR	69903	MultiplicativeExpression	( ZEND_MM_ALIGNMENT - ( ( zend_uintptr_t ) EG ( argument_stack ) -> top & ( ZEND_MM_ALIGNMENT - 1 ) ) ) / sizeof ( void * )		69868	1		/			
ANR	69904	AdditiveExpression	ZEND_MM_ALIGNMENT - ( ( zend_uintptr_t ) EG ( argument_stack ) -> top & ( ZEND_MM_ALIGNMENT - 1 ) )		69868	0		-			
ANR	69905	Identifier	ZEND_MM_ALIGNMENT		69868	0					
ANR	69906	BitAndExpression	( zend_uintptr_t ) EG ( argument_stack ) -> top & ( ZEND_MM_ALIGNMENT - 1 )		69868	1		&			
ANR	69907	CastExpression	( zend_uintptr_t ) EG ( argument_stack ) -> top		69868	0					
ANR	69908	CastTarget	zend_uintptr_t		69868	0					
ANR	69909	PtrMemberAccess	EG ( argument_stack ) -> top		69868	1					
ANR	69910	CallExpression	EG ( argument_stack )		69868	0					
ANR	69911	Callee	EG		69868	0					
ANR	69912	Identifier	EG		69868	0					
ANR	69913	ArgumentList	argument_stack		69868	1					
ANR	69914	Argument	argument_stack		69868	0					
ANR	69915	Identifier	argument_stack		69868	0					
ANR	69916	Identifier	top		69868	1					
ANR	69917	AdditiveExpression	ZEND_MM_ALIGNMENT - 1		69868	1		-			
ANR	69918	Identifier	ZEND_MM_ALIGNMENT		69868	0					
ANR	69919	PrimaryExpression	1		69868	1					
ANR	69920	SizeofExpression	sizeof ( void * )		69868	1					
ANR	69921	Sizeof	sizeof		69868	0					
ANR	69922	SizeofOperand	void *		69868	1					
ANR	69923	IfStatement	if ( UNEXPECTED ( size + extra + ZEND_MM_ALIGNED_SIZE ( sizeof ( void * ) ) / sizeof ( void * ) > ( zend_uintptr_t ) ( EG ( argument_stack ) -> end - EG ( argument_stack ) -> top ) ) )		69868	1					
ANR	69924	Condition	UNEXPECTED ( size + extra + ZEND_MM_ALIGNED_SIZE ( sizeof ( void * ) ) / sizeof ( void * ) > ( zend_uintptr_t ) ( EG ( argument_stack ) -> end - EG ( argument_stack ) -> top ) )	245:6:8089:8242	69868	0	True				
ANR	69925	CallExpression	UNEXPECTED ( size + extra + ZEND_MM_ALIGNED_SIZE ( sizeof ( void * ) ) / sizeof ( void * ) > ( zend_uintptr_t ) ( EG ( argument_stack ) -> end - EG ( argument_stack ) -> top ) )		69868	0					
ANR	69926	Callee	UNEXPECTED		69868	0					
ANR	69927	Identifier	UNEXPECTED		69868	0					
ANR	69928	ArgumentList	size + extra + ZEND_MM_ALIGNED_SIZE ( sizeof ( void * ) ) / sizeof ( void * ) > ( zend_uintptr_t ) ( EG ( argument_stack ) -> end - EG ( argument_stack ) -> top )		69868	1					
ANR	69929	Argument	size + extra + ZEND_MM_ALIGNED_SIZE ( sizeof ( void * ) ) / sizeof ( void * ) > ( zend_uintptr_t ) ( EG ( argument_stack ) -> end - EG ( argument_stack ) -> top )		69868	0					
ANR	69930	RelationalExpression	size + extra + ZEND_MM_ALIGNED_SIZE ( sizeof ( void * ) ) / sizeof ( void * ) > ( zend_uintptr_t ) ( EG ( argument_stack ) -> end - EG ( argument_stack ) -> top )		69868	0		>			
ANR	69931	AdditiveExpression	size + extra + ZEND_MM_ALIGNED_SIZE ( sizeof ( void * ) ) / sizeof ( void * )		69868	0		+			
ANR	69932	Identifier	size		69868	0					
ANR	69933	AdditiveExpression	extra + ZEND_MM_ALIGNED_SIZE ( sizeof ( void * ) ) / sizeof ( void * )		69868	1		+			
ANR	69934	Identifier	extra		69868	0					
ANR	69935	MultiplicativeExpression	ZEND_MM_ALIGNED_SIZE ( sizeof ( void * ) ) / sizeof ( void * )		69868	1		/			
ANR	69936	CallExpression	ZEND_MM_ALIGNED_SIZE ( sizeof ( void * ) )		69868	0					
ANR	69937	Callee	ZEND_MM_ALIGNED_SIZE		69868	0					
ANR	69938	Identifier	ZEND_MM_ALIGNED_SIZE		69868	0					
ANR	69939	ArgumentList	sizeof ( void * )		69868	1					
ANR	69940	Argument	sizeof ( void * )		69868	0					
ANR	69941	SizeofExpression	sizeof ( void * )		69868	0					
ANR	69942	Sizeof	sizeof		69868	0					
ANR	69943	SizeofOperand	void *		69868	1					
ANR	69944	SizeofExpression	sizeof ( void * )		69868	1					
ANR	69945	Sizeof	sizeof		69868	0					
ANR	69946	SizeofOperand	void *		69868	1					
ANR	69947	CastExpression	( zend_uintptr_t ) ( EG ( argument_stack ) -> end - EG ( argument_stack ) -> top )		69868	1					
ANR	69948	CastTarget	zend_uintptr_t		69868	0					
ANR	69949	AdditiveExpression	EG ( argument_stack ) -> end - EG ( argument_stack ) -> top		69868	1		-			
ANR	69950	PtrMemberAccess	EG ( argument_stack ) -> end		69868	0					
ANR	69951	CallExpression	EG ( argument_stack )		69868	0					
ANR	69952	Callee	EG		69868	0					
ANR	69953	Identifier	EG		69868	0					
ANR	69954	ArgumentList	argument_stack		69868	1					
ANR	69955	Argument	argument_stack		69868	0					
ANR	69956	Identifier	argument_stack		69868	0					
ANR	69957	Identifier	end		69868	1					
ANR	69958	PtrMemberAccess	EG ( argument_stack ) -> top		69868	1					
ANR	69959	CallExpression	EG ( argument_stack )		69868	0					
ANR	69960	Callee	EG		69868	0					
ANR	69961	Identifier	EG		69868	0					
ANR	69962	ArgumentList	argument_stack		69868	1					
ANR	69963	Argument	argument_stack		69868	0					
ANR	69964	Identifier	argument_stack		69868	0					
ANR	69965	Identifier	top		69868	1					
ANR	69966	CompoundStatement		11:76:465:465	69868	1					
ANR	69967	Statement	zend_vm_stack_extend	247:3:8250:8269	69868	0	True				
ANR	69968	Statement	(	247:23:8270:8270	69868	1	True				
ANR	69969	Statement	size	247:24:8271:8274	69868	2	True				
ANR	69970	Statement	TSRMLS_CC	247:29:8276:8284	69868	3	True				
ANR	69971	Statement	)	247:38:8285:8285	69868	4	True				
ANR	69972	ExpressionStatement		247:39:8286:8286	69868	5	True				
ANR	69973	ElseStatement	else		69868	0					
ANR	69974	CompoundStatement		14:3:522:562	69868	0					
ANR	69975	IdentifierDeclStatement	void * * old_top = EG ( argument_stack ) -> top ;	249:3:8302:8342	69868	0	True				
ANR	69976	IdentifierDecl	* * old_top = EG ( argument_stack ) -> top		69868	0					
ANR	69977	IdentifierDeclType	void * *		69868	0					
ANR	69978	Identifier	old_top		69868	1					
ANR	69979	AssignmentExpression	* * old_top = EG ( argument_stack ) -> top		69868	2		=			
ANR	69980	Identifier	old_top		69868	0					
ANR	69981	PtrMemberAccess	EG ( argument_stack ) -> top		69868	1					
ANR	69982	CallExpression	EG ( argument_stack )		69868	0					
ANR	69983	Callee	EG		69868	0					
ANR	69984	Identifier	EG		69868	0					
ANR	69985	ArgumentList	argument_stack		69868	1					
ANR	69986	Argument	argument_stack		69868	0					
ANR	69987	Identifier	argument_stack		69868	0					
ANR	69988	Identifier	top		69868	1					
ANR	69989	ExpressionStatement	EG ( argument_stack ) -> top += extra	251:3:8348:8380	69868	1	True				
ANR	69990	AssignmentExpression	EG ( argument_stack ) -> top += extra		69868	0		+=			
ANR	69991	PtrMemberAccess	EG ( argument_stack ) -> top		69868	0					
ANR	69992	CallExpression	EG ( argument_stack )		69868	0					
ANR	69993	Callee	EG		69868	0					
ANR	69994	Identifier	EG		69868	0					
ANR	69995	ArgumentList	argument_stack		69868	1					
ANR	69996	Argument	argument_stack		69868	0					
ANR	69997	Identifier	argument_stack		69868	0					
ANR	69998	Identifier	top		69868	1					
ANR	69999	Identifier	extra		69868	1					
ANR	70000	ExpressionStatement	* EG ( argument_stack ) -> top = ( void * ) old_top	253:3:8421:8462	69868	2	True				
ANR	70001	AssignmentExpression	* EG ( argument_stack ) -> top = ( void * ) old_top		69868	0		=			
ANR	70002	UnaryOperationExpression	* EG ( argument_stack ) -> top		69868	0					
ANR	70003	UnaryOperator	*		69868	0					
ANR	70004	PtrMemberAccess	EG ( argument_stack ) -> top		69868	1					
ANR	70005	CallExpression	EG ( argument_stack )		69868	0					
ANR	70006	Callee	EG		69868	0					
ANR	70007	Identifier	EG		69868	0					
ANR	70008	ArgumentList	argument_stack		69868	1					
ANR	70009	Argument	argument_stack		69868	0					
ANR	70010	Identifier	argument_stack		69868	0					
ANR	70011	Identifier	top		69868	1					
ANR	70012	CastExpression	( void * ) old_top		69868	1					
ANR	70013	CastTarget	void *		69868	0					
ANR	70014	Identifier	old_top		69868	1					
ANR	70015	ExpressionStatement	EG ( argument_stack ) -> top += ZEND_MM_ALIGNED_SIZE ( sizeof ( void * ) ) / sizeof ( void * )	254:3:8467:8545	69868	3	True				
ANR	70016	AssignmentExpression	EG ( argument_stack ) -> top += ZEND_MM_ALIGNED_SIZE ( sizeof ( void * ) ) / sizeof ( void * )		69868	0		+=			
ANR	70017	PtrMemberAccess	EG ( argument_stack ) -> top		69868	0					
ANR	70018	CallExpression	EG ( argument_stack )		69868	0					
ANR	70019	Callee	EG		69868	0					
ANR	70020	Identifier	EG		69868	0					
ANR	70021	ArgumentList	argument_stack		69868	1					
ANR	70022	Argument	argument_stack		69868	0					
ANR	70023	Identifier	argument_stack		69868	0					
ANR	70024	Identifier	top		69868	1					
ANR	70025	MultiplicativeExpression	ZEND_MM_ALIGNED_SIZE ( sizeof ( void * ) ) / sizeof ( void * )		69868	1		/			
ANR	70026	CallExpression	ZEND_MM_ALIGNED_SIZE ( sizeof ( void * ) )		69868	0					
ANR	70027	Callee	ZEND_MM_ALIGNED_SIZE		69868	0					
ANR	70028	Identifier	ZEND_MM_ALIGNED_SIZE		69868	0					
ANR	70029	ArgumentList	sizeof ( void * )		69868	1					
ANR	70030	Argument	sizeof ( void * )		69868	0					
ANR	70031	SizeofExpression	sizeof ( void * )		69868	0					
ANR	70032	Sizeof	sizeof		69868	0					
ANR	70033	SizeofOperand	void *		69868	1					
ANR	70034	SizeofExpression	sizeof ( void * )		69868	1					
ANR	70035	Sizeof	sizeof		69868	0					
ANR	70036	SizeofOperand	void *		69868	1					
ANR	70037	ElseStatement	else		69868	0					
ANR	70038	CompoundStatement		21:8:779:779	69868	0					
ANR	70039	ExpressionStatement	ZEND_VM_STACK_GROW_IF_NEEDED ( ( int ) size )	257:2:8563:8602	69868	0	True				
ANR	70040	CallExpression	ZEND_VM_STACK_GROW_IF_NEEDED ( ( int ) size )		69868	0					
ANR	70041	Callee	ZEND_VM_STACK_GROW_IF_NEEDED		69868	0					
ANR	70042	Identifier	ZEND_VM_STACK_GROW_IF_NEEDED		69868	0					
ANR	70043	ArgumentList	( int ) size		69868	1					
ANR	70044	Argument	( int ) size		69868	0					
ANR	70045	CastExpression	( int ) size		69868	0					
ANR	70046	CastTarget	int		69868	0					
ANR	70047	Identifier	size		69868	1					
ANR	70048	ExpressionStatement	ret = ( void * ) EG ( argument_stack ) -> top	259:1:8608:8644	69868	3	True				
ANR	70049	AssignmentExpression	ret = ( void * ) EG ( argument_stack ) -> top		69868	0		=			
ANR	70050	Identifier	ret		69868	0					
ANR	70051	CastExpression	( void * ) EG ( argument_stack ) -> top		69868	1					
ANR	70052	CastTarget	void *		69868	0					
ANR	70053	PtrMemberAccess	EG ( argument_stack ) -> top		69868	1					
ANR	70054	CallExpression	EG ( argument_stack )		69868	0					
ANR	70055	Callee	EG		69868	0					
ANR	70056	Identifier	EG		69868	0					
ANR	70057	ArgumentList	argument_stack		69868	1					
ANR	70058	Argument	argument_stack		69868	0					
ANR	70059	Identifier	argument_stack		69868	0					
ANR	70060	Identifier	top		69868	1					
ANR	70061	ExpressionStatement	EG ( argument_stack ) -> top += size	260:1:8647:8678	69868	4	True				
ANR	70062	AssignmentExpression	EG ( argument_stack ) -> top += size		69868	0		+=			
ANR	70063	PtrMemberAccess	EG ( argument_stack ) -> top		69868	0					
ANR	70064	CallExpression	EG ( argument_stack )		69868	0					
ANR	70065	Callee	EG		69868	0					
ANR	70066	Identifier	EG		69868	0					
ANR	70067	ArgumentList	argument_stack		69868	1					
ANR	70068	Argument	argument_stack		69868	0					
ANR	70069	Identifier	argument_stack		69868	0					
ANR	70070	Identifier	top		69868	1					
ANR	70071	Identifier	size		69868	1					
ANR	70072	ReturnStatement	return ret ;	261:1:8681:8691	69868	5	True				
ANR	70073	Identifier	ret		69868	0					
ANR	70074	ReturnType	static zend_always_inline void *		69868	1					
ANR	70075	Identifier	zend_vm_stack_alloc		69868	2					
ANR	70076	ParameterList	size_t size TSRMLS_DC		69868	3					
ANR	70077	Parameter	size_t size TSRMLS_DC	235:52:7756:7776	69868	0	True				
ANR	70078	ParameterType	size_t size		69868	0					
ANR	70079	Identifier	TSRMLS_DC		69868	1					
ANR	70080	CFGEntryNode	ENTRY		69868		True				
ANR	70081	CFGExitNode	EXIT		69868		True				
ANR	70082	Symbol	ret		69868						
ANR	70083	Symbol	EG		69868						
ANR	70084	Symbol	ZEND_MM_ALIGNED_SIZE		69868						
ANR	70085	Symbol	argument_stack		69868						
ANR	70086	Symbol	* EG ( argument_stack ) -> top		69868						
ANR	70087	Symbol	EG ( argument_stack ) -> end		69868						
ANR	70088	Symbol	* EG		69868						
ANR	70089	Symbol	* * EG		69868						
ANR	70090	Symbol	TSRMLS_DC		69868						
ANR	70091	Symbol	EG ( argument_stack ) -> top		69868						
ANR	70092	Symbol	UNEXPECTED		69868						
ANR	70093	Symbol	old_top		69868						
ANR	70094	Symbol	size		69868						
ANR	70095	Symbol	extra		69868						
ANR	70096	Symbol	ZEND_MM_ALIGNMENT		69868						
ANR	70097	Function	zend_vm_stack_frame_base	264:0:8696:8893							
ANR	70098	FunctionDef	zend_vm_stack_frame_base (zend_execute_data * ex)		70097	0					
ANR	70099	CompoundStatement		265:0:8777:8893	70097	0					
ANR	70100	ReturnStatement	return ( void * * ) ( ( char * ) ex -> call_slots + ZEND_MM_ALIGNED_SIZE ( sizeof ( call_slot ) ) * ex -> op_array -> nested_calls ) ;	266:1:8780:8891	70097	0	True				
ANR	70101	CastExpression	( void * * ) ( ( char * ) ex -> call_slots + ZEND_MM_ALIGNED_SIZE ( sizeof ( call_slot ) ) * ex -> op_array -> nested_calls )		70097	0					
ANR	70102	CastTarget	void * *		70097	0					
ANR	70103	AdditiveExpression	( char * ) ex -> call_slots + ZEND_MM_ALIGNED_SIZE ( sizeof ( call_slot ) ) * ex -> op_array -> nested_calls		70097	1		+			
ANR	70104	CastExpression	( char * ) ex -> call_slots		70097	0					
ANR	70105	CastTarget	char *		70097	0					
ANR	70106	PtrMemberAccess	ex -> call_slots		70097	1					
ANR	70107	Identifier	ex		70097	0					
ANR	70108	Identifier	call_slots		70097	1					
ANR	70109	MultiplicativeExpression	ZEND_MM_ALIGNED_SIZE ( sizeof ( call_slot ) ) * ex -> op_array -> nested_calls		70097	1		*			
ANR	70110	CallExpression	ZEND_MM_ALIGNED_SIZE ( sizeof ( call_slot ) )		70097	0					
ANR	70111	Callee	ZEND_MM_ALIGNED_SIZE		70097	0					
ANR	70112	Identifier	ZEND_MM_ALIGNED_SIZE		70097	0					
ANR	70113	ArgumentList	sizeof ( call_slot )		70097	1					
ANR	70114	Argument	sizeof ( call_slot )		70097	0					
ANR	70115	SizeofExpression	sizeof ( call_slot )		70097	0					
ANR	70116	Sizeof	sizeof		70097	0					
ANR	70117	SizeofOperand	call_slot		70097	1					
ANR	70118	PtrMemberAccess	ex -> op_array -> nested_calls		70097	1					
ANR	70119	PtrMemberAccess	ex -> op_array		70097	0					
ANR	70120	Identifier	ex		70097	0					
ANR	70121	Identifier	op_array		70097	1					
ANR	70122	Identifier	nested_calls		70097	1					
ANR	70123	ReturnType	static zend_always_inline void * *		70097	1					
ANR	70124	Identifier	zend_vm_stack_frame_base		70097	2					
ANR	70125	ParameterList	zend_execute_data * ex		70097	3					
ANR	70126	Parameter	zend_execute_data * ex	264:58:8754:8774	70097	0	True				
ANR	70127	ParameterType	zend_execute_data *		70097	0					
ANR	70128	Identifier	ex		70097	1					
ANR	70129	CFGEntryNode	ENTRY		70097		True				
ANR	70130	CFGExitNode	EXIT		70097		True				
ANR	70131	Symbol	ex		70097						
ANR	70132	Symbol	ZEND_MM_ALIGNED_SIZE		70097						
ANR	70133	Symbol	ex -> op_array -> nested_calls		70097						
ANR	70134	Symbol	* ex -> op_array		70097						
ANR	70135	Symbol	ex -> call_slots		70097						
ANR	70136	Symbol	* ex		70097						
ANR	70137	Symbol	* * ex		70097						
ANR	70138	Symbol	ex -> op_array		70097						
ANR	70139	DeclStmt									
ANR	70140	Decl							zend_vm_stack	zend_vm_stack	p
ANR	70141	DeclStmt									
ANR	70142	Decl							zend_vm_stack	zend_vm_stack	p
ANR	70143	Function	zend_vm_stack_clear_multiple	300:0:9728:10111							
ANR	70144	FunctionDef	zend_vm_stack_clear_multiple (int nested TSRMLS_DC)		70143	0					
ANR	70145	CompoundStatement		301:0:9810:10111	70143	0					
ANR	70146	IdentifierDeclStatement	void * * p = EG ( argument_stack ) -> top - 1 ;	302:1:9813:9851	70143	0	True				
ANR	70147	IdentifierDecl	* * p = EG ( argument_stack ) -> top - 1		70143	0					
ANR	70148	IdentifierDeclType	void * *		70143	0					
ANR	70149	Identifier	p		70143	1					
ANR	70150	AssignmentExpression	* * p = EG ( argument_stack ) -> top - 1		70143	2		=			
ANR	70151	Identifier	p		70143	0					
ANR	70152	AdditiveExpression	EG ( argument_stack ) -> top - 1		70143	1		-			
ANR	70153	PtrMemberAccess	EG ( argument_stack ) -> top		70143	0					
ANR	70154	CallExpression	EG ( argument_stack )		70143	0					
ANR	70155	Callee	EG		70143	0					
ANR	70156	Identifier	EG		70143	0					
ANR	70157	ArgumentList	argument_stack		70143	1					
ANR	70158	Argument	argument_stack		70143	0					
ANR	70159	Identifier	argument_stack		70143	0					
ANR	70160	Identifier	top		70143	1					
ANR	70161	PrimaryExpression	1		70143	1					
ANR	70162	IdentifierDeclStatement	void * * end = p - ( int ) ( zend_uintptr_t ) * p ;	303:2:9855:9895	70143	1	True				
ANR	70163	IdentifierDecl	* * end = p - ( int ) ( zend_uintptr_t ) * p		70143	0					
ANR	70164	IdentifierDeclType	void * *		70143	0					
ANR	70165	Identifier	end		70143	1					
ANR	70166	AssignmentExpression	* * end = p - ( int ) ( zend_uintptr_t ) * p		70143	2		=			
ANR	70167	Identifier	end		70143	0					
ANR	70168	AdditiveExpression	p - ( int ) ( zend_uintptr_t ) * p		70143	1		-			
ANR	70169	Identifier	p		70143	0					
ANR	70170	CastExpression	( int ) ( zend_uintptr_t ) * p		70143	1					
ANR	70171	CastTarget	int		70143	0					
ANR	70172	CastExpression	( zend_uintptr_t ) * p		70143	1					
ANR	70173	CastTarget	zend_uintptr_t		70143	0					
ANR	70174	UnaryOperationExpression	* p		70143	1					
ANR	70175	UnaryOperator	*		70143	0					
ANR	70176	Identifier	p		70143	1					
ANR	70177	WhileStatement	while ( p != end )		70143	2					
ANR	70178	Condition	p != end	305:8:9906:9913	70143	0	True				
ANR	70179	EqualityExpression	p != end		70143	0		!=			
ANR	70180	Identifier	p		70143	0					
ANR	70181	Identifier	end		70143	1					
ANR	70182	CompoundStatement		6:2:109:134	70143	1					
ANR	70183	IdentifierDeclStatement	zval * q = ( zval * ) * ( -- p ) ;	306:2:9920:9945	70143	0	True				
ANR	70184	IdentifierDecl	* q = ( zval * ) * ( -- p )		70143	0					
ANR	70185	IdentifierDeclType	zval *		70143	0					
ANR	70186	Identifier	q		70143	1					
ANR	70187	AssignmentExpression	* q = ( zval * ) * ( -- p )		70143	2		=			
ANR	70188	Identifier	q		70143	0					
ANR	70189	CastExpression	( zval * ) * ( -- p )		70143	1					
ANR	70190	CastTarget	zval *		70143	0					
ANR	70191	UnaryOperationExpression	* ( -- p )		70143	1					
ANR	70192	UnaryOperator	*		70143	0					
ANR	70193	UnaryExpression	-- p		70143	1					
ANR	70194	IncDec	--		70143	0					
ANR	70195	Identifier	p		70143	1					
ANR	70196	ExpressionStatement	* p = NULL	307:2:9949:9958	70143	1	True				
ANR	70197	AssignmentExpression	* p = NULL		70143	0		=			
ANR	70198	UnaryOperationExpression	* p		70143	0					
ANR	70199	UnaryOperator	*		70143	0					
ANR	70200	Identifier	p		70143	1					
ANR	70201	Identifier	NULL		70143	1					
ANR	70202	Statement	i_zval_ptr_dtor	308:2:9962:9976	70143	2	True				
ANR	70203	Statement	(	308:17:9977:9977	70143	3	True				
ANR	70204	Statement	q	308:18:9978:9978	70143	4	True				
ANR	70205	Statement	ZEND_FILE_LINE_CC	308:20:9980:9996	70143	5	True				
ANR	70206	Statement	TSRMLS_CC	308:38:9998:10006	70143	6	True				
ANR	70207	Statement	)	308:47:10007:10007	70143	7	True				
ANR	70208	ExpressionStatement		308:48:10008:10008	70143	8	True				
ANR	70209	IfStatement	if ( nested )		70143	3					
ANR	70210	Condition	nested	310:5:10018:10023	70143	0	True				
ANR	70211	Identifier	nested		70143	0					
ANR	70212	CompoundStatement		10:13:215:215	70143	1					
ANR	70213	ExpressionStatement	EG ( argument_stack ) -> top = p	311:2:10030:10057	70143	0	True				
ANR	70214	AssignmentExpression	EG ( argument_stack ) -> top = p		70143	0		=			
ANR	70215	PtrMemberAccess	EG ( argument_stack ) -> top		70143	0					
ANR	70216	CallExpression	EG ( argument_stack )		70143	0					
ANR	70217	Callee	EG		70143	0					
ANR	70218	Identifier	EG		70143	0					
ANR	70219	ArgumentList	argument_stack		70143	1					
ANR	70220	Argument	argument_stack		70143	0					
ANR	70221	Identifier	argument_stack		70143	0					
ANR	70222	Identifier	top		70143	1					
ANR	70223	Identifier	p		70143	1					
ANR	70224	ElseStatement	else		70143	0					
ANR	70225	CompoundStatement		12:8:256:256	70143	0					
ANR	70226	Statement	zend_vm_stack_free_int	313:2:10071:10092	70143	0	True				
ANR	70227	Statement	(	313:24:10093:10093	70143	1	True				
ANR	70228	Statement	p	313:25:10094:10094	70143	2	True				
ANR	70229	Statement	TSRMLS_CC	313:27:10096:10104	70143	3	True				
ANR	70230	Statement	)	313:36:10105:10105	70143	4	True				
ANR	70231	ExpressionStatement		313:37:10106:10106	70143	5	True				
ANR	70232	ReturnType	static zend_always_inline void		70143	1					
ANR	70233	Identifier	zend_vm_stack_clear_multiple		70143	2					
ANR	70234	ParameterList	int nested TSRMLS_DC		70143	3					
ANR	70235	Parameter	int nested TSRMLS_DC	300:60:9788:9807	70143	0	True				
ANR	70236	ParameterType	int nested		70143	0					
ANR	70237	Identifier	TSRMLS_DC		70143	1					
ANR	70238	CFGEntryNode	ENTRY		70143		True				
ANR	70239	CFGExitNode	EXIT		70143		True				
ANR	70240	Symbol	p		70143						
ANR	70241	Symbol	q		70143						
ANR	70242	Symbol	EG		70143						
ANR	70243	Symbol	* ( -- p )		70143						
ANR	70244	Symbol	NULL		70143						
ANR	70245	Symbol	argument_stack		70143						
ANR	70246	Symbol	end		70143						
ANR	70247	Symbol	* p		70143						
ANR	70248	Symbol	* EG		70143						
ANR	70249	Symbol	TSRMLS_DC		70143						
ANR	70250	Symbol	nested		70143						
ANR	70251	Symbol	EG ( argument_stack ) -> top		70143						
ANR	70252	Function	zend_vm_stack_get_args_count_ex	317:0:10114:10318							
ANR	70253	FunctionDef	zend_vm_stack_get_args_count_ex (zend_execute_data * ex)		70252	0					
ANR	70254	CompoundStatement		318:0:10199:10318	70252	0					
ANR	70255	IfStatement	if ( ex )		70252	0					
ANR	70256	Condition	ex	319:5:10206:10207	70252	0	True				
ANR	70257	Identifier	ex		70252	0					
ANR	70258	CompoundStatement		3:2:14:53	70252	1					
ANR	70259	IdentifierDeclStatement	void * * p = ex -> function_state . arguments ;	320:2:10214:10253	70252	0	True				
ANR	70260	IdentifierDecl	* * p = ex -> function_state . arguments		70252	0					
ANR	70261	IdentifierDeclType	void * *		70252	0					
ANR	70262	Identifier	p		70252	1					
ANR	70263	AssignmentExpression	* * p = ex -> function_state . arguments		70252	2		=			
ANR	70264	Identifier	p		70252	0					
ANR	70265	MemberAccess	ex -> function_state . arguments		70252	1					
ANR	70266	PtrMemberAccess	ex -> function_state		70252	0					
ANR	70267	Identifier	ex		70252	0					
ANR	70268	Identifier	function_state		70252	1					
ANR	70269	Identifier	arguments		70252	1					
ANR	70270	ReturnStatement	return ( int ) ( zend_uintptr_t ) * p ;	321:2:10257:10288	70252	1	True				
ANR	70271	CastExpression	( int ) ( zend_uintptr_t ) * p		70252	0					
ANR	70272	CastTarget	int		70252	0					
ANR	70273	CastExpression	( zend_uintptr_t ) * p		70252	1					
ANR	70274	CastTarget	zend_uintptr_t		70252	0					
ANR	70275	UnaryOperationExpression	* p		70252	1					
ANR	70276	UnaryOperator	*		70252	0					
ANR	70277	Identifier	p		70252	1					
ANR	70278	ElseStatement	else		70252	0					
ANR	70279	CompoundStatement		5:8:98:98	70252	0					
ANR	70280	ReturnStatement	return 0 ;	323:2:10302:10310	70252	0	True				
ANR	70281	PrimaryExpression	0		70252	0					
ANR	70282	ReturnType	static zend_always_inline int		70252	1					
ANR	70283	Identifier	zend_vm_stack_get_args_count_ex		70252	2					
ANR	70284	ParameterList	zend_execute_data * ex		70252	3					
ANR	70285	Parameter	zend_execute_data * ex	317:62:10176:10196	70252	0	True				
ANR	70286	ParameterType	zend_execute_data *		70252	0					
ANR	70287	Identifier	ex		70252	1					
ANR	70288	CFGEntryNode	ENTRY		70252		True				
ANR	70289	CFGExitNode	EXIT		70252		True				
ANR	70290	Symbol	p		70252						
ANR	70291	Symbol	ex		70252						
ANR	70292	Symbol	ex -> function_state . arguments		70252						
ANR	70293	Symbol	* ex		70252						
ANR	70294	Symbol	* p		70252						
ANR	70295	Symbol	ex -> function_state		70252						
ANR	70296	Function	zend_vm_stack_get_arg_ex	327:0:10321:10624							
ANR	70297	FunctionDef	"zend_vm_stack_get_arg_ex (zend_execute_data * ex , int requested_arg)"		70296	0					
ANR	70298	CompoundStatement		328:0:10421:10624	70296	0					
ANR	70299	IdentifierDeclStatement	void * * p = ex -> function_state . arguments ;	329:1:10424:10463	70296	0	True				
ANR	70300	IdentifierDecl	* * p = ex -> function_state . arguments		70296	0					
ANR	70301	IdentifierDeclType	void * *		70296	0					
ANR	70302	Identifier	p		70296	1					
ANR	70303	AssignmentExpression	* * p = ex -> function_state . arguments		70296	2		=			
ANR	70304	Identifier	p		70296	0					
ANR	70305	MemberAccess	ex -> function_state . arguments		70296	1					
ANR	70306	PtrMemberAccess	ex -> function_state		70296	0					
ANR	70307	Identifier	ex		70296	0					
ANR	70308	Identifier	function_state		70296	1					
ANR	70309	Identifier	arguments		70296	1					
ANR	70310	IdentifierDeclStatement	int arg_count = ( int ) ( zend_uintptr_t ) * p ;	330:1:10466:10506	70296	1	True				
ANR	70311	IdentifierDecl	arg_count = ( int ) ( zend_uintptr_t ) * p		70296	0					
ANR	70312	IdentifierDeclType	int		70296	0					
ANR	70313	Identifier	arg_count		70296	1					
ANR	70314	AssignmentExpression	arg_count = ( int ) ( zend_uintptr_t ) * p		70296	2		=			
ANR	70315	Identifier	arg_count		70296	0					
ANR	70316	CastExpression	( int ) ( zend_uintptr_t ) * p		70296	1					
ANR	70317	CastTarget	int		70296	0					
ANR	70318	CastExpression	( zend_uintptr_t ) * p		70296	1					
ANR	70319	CastTarget	zend_uintptr_t		70296	0					
ANR	70320	UnaryOperationExpression	* p		70296	1					
ANR	70321	UnaryOperator	*		70296	0					
ANR	70322	Identifier	p		70296	1					
ANR	70323	IfStatement	if ( UNEXPECTED ( requested_arg > arg_count ) )		70296	2					
ANR	70324	Condition	UNEXPECTED ( requested_arg > arg_count )	332:5:10514:10550	70296	0	True				
ANR	70325	CallExpression	UNEXPECTED ( requested_arg > arg_count )		70296	0					
ANR	70326	Callee	UNEXPECTED		70296	0					
ANR	70327	Identifier	UNEXPECTED		70296	0					
ANR	70328	ArgumentList	requested_arg > arg_count		70296	1					
ANR	70329	Argument	requested_arg > arg_count		70296	0					
ANR	70330	RelationalExpression	requested_arg > arg_count		70296	0		>			
ANR	70331	Identifier	requested_arg		70296	0					
ANR	70332	Identifier	arg_count		70296	1					
ANR	70333	CompoundStatement		5:44:131:131	70296	1					
ANR	70334	ReturnStatement	return NULL ;	333:2:10557:10568	70296	0	True				
ANR	70335	Identifier	NULL		70296	0					
ANR	70336	ReturnStatement	return ( zval * * ) p - arg_count + requested_arg - 1 ;	335:1:10574:10622	70296	3	True				
ANR	70337	AdditiveExpression	( zval * * ) p - arg_count + requested_arg - 1		70296	0		-			
ANR	70338	CastExpression	( zval * * ) p		70296	0					
ANR	70339	CastTarget	zval * *		70296	0					
ANR	70340	Identifier	p		70296	1					
ANR	70341	AdditiveExpression	arg_count + requested_arg - 1		70296	1		+			
ANR	70342	Identifier	arg_count		70296	0					
ANR	70343	AdditiveExpression	requested_arg - 1		70296	1		-			
ANR	70344	Identifier	requested_arg		70296	0					
ANR	70345	PrimaryExpression	1		70296	1					
ANR	70346	ReturnType	static zend_always_inline zval * *		70296	1					
ANR	70347	Identifier	zend_vm_stack_get_arg_ex		70296	2					
ANR	70348	ParameterList	"zend_execute_data * ex , int requested_arg"		70296	3					
ANR	70349	Parameter	zend_execute_data * ex	327:58:10379:10399	70296	0	True				
ANR	70350	ParameterType	zend_execute_data *		70296	0					
ANR	70351	Identifier	ex		70296	1					
ANR	70352	Parameter	int requested_arg	327:81:10402:10418	70296	1	True				
ANR	70353	ParameterType	int		70296	0					
ANR	70354	Identifier	requested_arg		70296	1					
ANR	70355	CFGEntryNode	ENTRY		70296		True				
ANR	70356	CFGExitNode	EXIT		70296		True				
ANR	70357	Symbol	p		70296						
ANR	70358	Symbol	UNEXPECTED		70296						
ANR	70359	Symbol	ex		70296						
ANR	70360	Symbol	NULL		70296						
ANR	70361	Symbol	requested_arg		70296						
ANR	70362	Symbol	* ex		70296						
ANR	70363	Symbol	ex -> function_state . arguments		70296						
ANR	70364	Symbol	* p		70296						
ANR	70365	Symbol	ex -> function_state		70296						
ANR	70366	Symbol	arg_count		70296						
ANR	70367	Function	zend_vm_stack_get_arg	343:0:10787:10967							
ANR	70368	FunctionDef	zend_vm_stack_get_arg (int requested_arg TSRMLS_DC)		70367	0					
ANR	70369	CompoundStatement		344:0:10871:10967	70367	0					
ANR	70370	ReturnStatement	"return zend_vm_stack_get_arg_ex ( EG ( current_execute_data ) -> prev_execute_data , requested_arg ) ;"	345:1:10874:10965	70367	0	True				
ANR	70371	CallExpression	"zend_vm_stack_get_arg_ex ( EG ( current_execute_data ) -> prev_execute_data , requested_arg )"		70367	0					
ANR	70372	Callee	zend_vm_stack_get_arg_ex		70367	0					
ANR	70373	Identifier	zend_vm_stack_get_arg_ex		70367	0					
ANR	70374	ArgumentList	EG ( current_execute_data ) -> prev_execute_data		70367	1					
ANR	70375	Argument	EG ( current_execute_data ) -> prev_execute_data		70367	0					
ANR	70376	PtrMemberAccess	EG ( current_execute_data ) -> prev_execute_data		70367	0					
ANR	70377	CallExpression	EG ( current_execute_data )		70367	0					
ANR	70378	Callee	EG		70367	0					
ANR	70379	Identifier	EG		70367	0					
ANR	70380	ArgumentList	current_execute_data		70367	1					
ANR	70381	Argument	current_execute_data		70367	0					
ANR	70382	Identifier	current_execute_data		70367	0					
ANR	70383	Identifier	prev_execute_data		70367	1					
ANR	70384	Argument	requested_arg		70367	1					
ANR	70385	Identifier	requested_arg		70367	0					
ANR	70386	ReturnType	static zend_always_inline zval * *		70367	1					
ANR	70387	Identifier	zend_vm_stack_get_arg		70367	2					
ANR	70388	ParameterList	int requested_arg TSRMLS_DC		70367	3					
ANR	70389	Parameter	int requested_arg TSRMLS_DC	343:55:10842:10868	70367	0	True				
ANR	70390	ParameterType	int requested_arg		70367	0					
ANR	70391	Identifier	TSRMLS_DC		70367	1					
ANR	70392	CFGEntryNode	ENTRY		70367		True				
ANR	70393	CFGExitNode	EXIT		70367		True				
ANR	70394	Symbol	EG		70367						
ANR	70395	Symbol	requested_arg		70367						
ANR	70396	Symbol	current_execute_data		70367						
ANR	70397	Symbol	EG ( current_execute_data ) -> prev_execute_data		70367						
ANR	70398	Symbol	* EG		70367						
ANR	70399	Symbol	TSRMLS_DC		70367						
ANR	70400	Symbol	zend_vm_stack_get_arg_ex		70367						
ANR	70401	DeclStmt									
ANR	70402	Decl							void	void ( TSRMLS_D )	execute_new_code
ANR	70403	DeclStmt									
ANR	70404	Decl							const char	const char * ( TSRMLS_D )	get_active_function_name
ANR	70405	DeclStmt									
ANR	70406	Decl							const char	const char * ( TSRMLS_D )	zend_get_executed_filename
ANR	70407	DeclStmt									
ANR	70408	Decl							ZEND_API uint	ZEND_API uint ( TSRMLS_D )	zend_get_executed_lineno
ANR	70409	DeclStmt									
ANR	70410	Decl							ZEND_API zend_bool	ZEND_API zend_bool ( TSRMLS_D )	zend_is_executing
ANR	70411	DeclStmt									
ANR	70412	Decl							ZEND_API void	"ZEND_API void ( long seconds , int reset_signals )"	zend_set_timeout
ANR	70413	DeclStmt									
ANR	70414	Decl							ZEND_API void	ZEND_API void ( TSRMLS_D )	zend_unset_timeout
ANR	70415	DeclStmt									
ANR	70416	Decl							ZEND_API void	ZEND_API void ( int dummy )	zend_timeout
ANR	70417	DeclStmt									
ANR	70418	Decl							ZEND_API zend_class_entry	"ZEND_API zend_class_entry * ( const char * class_name , uint class_name_len , int fetch_type TSRMLS_DC )"	zend_fetch_class
ANR	70419	DeclStmt									
ANR	70420	Decl							ZEND_API zend_class_entry	"ZEND_API zend_class_entry * ( const char * class_name , uint class_name_len , const zend_literal * key , int fetch_type TSRMLS_DC )"	zend_fetch_class_by_name
ANR	70421	DeclStmt									
ANR	70422	Decl							ZEND_API zval	"ZEND_API zval * * ( const zend_execute_data * execute_data_ptr , zend_uint var )"	zend_get_compiled_variable_value
ANR	70423	DeclStmt									
ANR	70424	Decl							ZEND_API int	"ZEND_API int ( zend_uchar opcode , user_opcode_handler_t handler )"	zend_set_user_opcode_handler
ANR	70425	DeclStmt									
ANR	70426	Decl							ZEND_API user_opcode_handler_t	ZEND_API user_opcode_handler_t ( zend_uchar opcode )	zend_get_user_opcode_handler
ANR	70427	ClassDef	_zend_free_op	391:8:13221:13290							
ANR	70428	DeclStmt									
ANR	70429	Decl							zval	zval *	var
ANR	70430	DeclStmt									
ANR	70431	Decl							_zend_free_op	_zend_free_op	zend_free_op
ANR	70432	DeclStmt									
ANR	70433	Decl							ZEND_API zval	"ZEND_API zval * ( int op_type , const znode_op * node , const zend_execute_data * execute_data , zend_free_op * should_free , int type TSRMLS_DC )"	zend_get_zval_ptr
ANR	70434	DeclStmt									
ANR	70435	Decl							ZEND_API zval	"ZEND_API zval * * ( int op_type , const znode_op * node , const zend_execute_data * execute_data , zend_free_op * should_free , int type TSRMLS_DC )"	zend_get_zval_ptr_ptr
ANR	70436	DeclStmt									
ANR	70437	Decl							ZEND_API int	ZEND_API int ( ZEND_OPCODE_HANDLER_ARGS )	zend_do_fcall
