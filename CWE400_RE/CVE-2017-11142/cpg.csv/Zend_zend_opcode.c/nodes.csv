command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	95792	File	data/converged/CVE-2017-11142_php-src/Zend_zend_opcode.c								
ANR	95793	Function	op_array_alloc_ops	46:0:1778:1926							
ANR	95794	FunctionDef	"op_array_alloc_ops (zend_op_array * op_array , zend_uint size)"		95793	0					
ANR	95795	CompoundStatement		47:0:1850:1926	95793	0					
ANR	95796	ExpressionStatement	"op_array -> opcodes = erealloc ( op_array -> opcodes , size * sizeof ( zend_op ) )"	48:1:1853:1924	95793	0	True				
ANR	95797	AssignmentExpression	"op_array -> opcodes = erealloc ( op_array -> opcodes , size * sizeof ( zend_op ) )"		95793	0		=			
ANR	95798	PtrMemberAccess	op_array -> opcodes		95793	0					
ANR	95799	Identifier	op_array		95793	0					
ANR	95800	Identifier	opcodes		95793	1					
ANR	95801	CallExpression	"erealloc ( op_array -> opcodes , size * sizeof ( zend_op ) )"		95793	1					
ANR	95802	Callee	erealloc		95793	0					
ANR	95803	Identifier	erealloc		95793	0					
ANR	95804	ArgumentList	op_array -> opcodes		95793	1					
ANR	95805	Argument	op_array -> opcodes		95793	0					
ANR	95806	PtrMemberAccess	op_array -> opcodes		95793	0					
ANR	95807	Identifier	op_array		95793	0					
ANR	95808	Identifier	opcodes		95793	1					
ANR	95809	Argument	size * sizeof ( zend_op )		95793	1					
ANR	95810	MultiplicativeExpression	size * sizeof ( zend_op )		95793	0		*			
ANR	95811	Identifier	size		95793	0					
ANR	95812	SizeofExpression	sizeof ( zend_op )		95793	1					
ANR	95813	Sizeof	sizeof		95793	0					
ANR	95814	SizeofOperand	zend_op		95793	1					
ANR	95815	ReturnType	static void		95793	1					
ANR	95816	Identifier	op_array_alloc_ops		95793	2					
ANR	95817	ParameterList	"zend_op_array * op_array , zend_uint size"		95793	3					
ANR	95818	Parameter	zend_op_array * op_array	46:31:1809:1831	95793	0	True				
ANR	95819	ParameterType	zend_op_array *		95793	0					
ANR	95820	Identifier	op_array		95793	1					
ANR	95821	Parameter	zend_uint size	46:56:1834:1847	95793	1	True				
ANR	95822	ParameterType	zend_uint		95793	0					
ANR	95823	Identifier	size		95793	1					
ANR	95824	CFGEntryNode	ENTRY		95793		True				
ANR	95825	CFGExitNode	EXIT		95793		True				
ANR	95826	Symbol	op_array -> opcodes		95793						
ANR	95827	Symbol	size		95793						
ANR	95828	Symbol	erealloc		95793						
ANR	95829	Symbol	op_array		95793						
ANR	95830	Symbol	* op_array		95793						
ANR	95831	Function	init_op_array	51:0:1929:3511							
ANR	95832	FunctionDef	"init_op_array (zend_op_array * op_array , zend_uchar type , int initial_ops_size TSRMLS_DC)"		95831	0					
ANR	95833	CompoundStatement		52:0:2022:3511	95831	0					
ANR	95834	ExpressionStatement	op_array -> type = type	53:1:2025:2046	95831	0	True				
ANR	95835	AssignmentExpression	op_array -> type = type		95831	0		=			
ANR	95836	PtrMemberAccess	op_array -> type		95831	0					
ANR	95837	Identifier	op_array		95831	0					
ANR	95838	Identifier	type		95831	1					
ANR	95839	Identifier	type		95831	1					
ANR	95840	IfStatement	if ( CG ( interactive ) )		95831	1					
ANR	95841	Condition	CG ( interactive )	55:5:2054:2068	95831	0	True				
ANR	95842	CallExpression	CG ( interactive )		95831	0					
ANR	95843	Callee	CG		95831	0					
ANR	95844	Identifier	CG		95831	0					
ANR	95845	ArgumentList	interactive		95831	1					
ANR	95846	Argument	interactive		95831	0					
ANR	95847	Identifier	interactive		95831	0					
ANR	95848	CompoundStatement		4:22:48:48	95831	1					
ANR	95849	ExpressionStatement	initial_ops_size = INITIAL_INTERACTIVE_OP_ARRAY_SIZE	59:2:2202:2254	95831	0	True				
ANR	95850	AssignmentExpression	initial_ops_size = INITIAL_INTERACTIVE_OP_ARRAY_SIZE		95831	0		=			
ANR	95851	Identifier	initial_ops_size		95831	0					
ANR	95852	Identifier	INITIAL_INTERACTIVE_OP_ARRAY_SIZE		95831	1					
ANR	95853	ExpressionStatement	op_array -> refcount = ( zend_uint * ) emalloc ( sizeof ( zend_uint ) )	62:1:2261:2322	95831	2	True				
ANR	95854	AssignmentExpression	op_array -> refcount = ( zend_uint * ) emalloc ( sizeof ( zend_uint ) )		95831	0		=			
ANR	95855	PtrMemberAccess	op_array -> refcount		95831	0					
ANR	95856	Identifier	op_array		95831	0					
ANR	95857	Identifier	refcount		95831	1					
ANR	95858	CastExpression	( zend_uint * ) emalloc ( sizeof ( zend_uint ) )		95831	1					
ANR	95859	CastTarget	zend_uint *		95831	0					
ANR	95860	CallExpression	emalloc ( sizeof ( zend_uint ) )		95831	1					
ANR	95861	Callee	emalloc		95831	0					
ANR	95862	Identifier	emalloc		95831	0					
ANR	95863	ArgumentList	sizeof ( zend_uint )		95831	1					
ANR	95864	Argument	sizeof ( zend_uint )		95831	0					
ANR	95865	SizeofExpression	sizeof ( zend_uint )		95831	0					
ANR	95866	Sizeof	sizeof		95831	0					
ANR	95867	SizeofOperand	zend_uint		95831	1					
ANR	95868	ExpressionStatement	* op_array -> refcount = 1	63:1:2325:2348	95831	3	True				
ANR	95869	AssignmentExpression	* op_array -> refcount = 1		95831	0		=			
ANR	95870	UnaryOperationExpression	* op_array -> refcount		95831	0					
ANR	95871	UnaryOperator	*		95831	0					
ANR	95872	PtrMemberAccess	op_array -> refcount		95831	1					
ANR	95873	Identifier	op_array		95831	0					
ANR	95874	Identifier	refcount		95831	1					
ANR	95875	PrimaryExpression	1		95831	1					
ANR	95876	ExpressionStatement	op_array -> last = 0	64:1:2351:2369	95831	4	True				
ANR	95877	AssignmentExpression	op_array -> last = 0		95831	0		=			
ANR	95878	PtrMemberAccess	op_array -> last		95831	0					
ANR	95879	Identifier	op_array		95831	0					
ANR	95880	Identifier	last		95831	1					
ANR	95881	PrimaryExpression	0		95831	1					
ANR	95882	ExpressionStatement	op_array -> opcodes = NULL	65:1:2372:2396	95831	5	True				
ANR	95883	AssignmentExpression	op_array -> opcodes = NULL		95831	0		=			
ANR	95884	PtrMemberAccess	op_array -> opcodes		95831	0					
ANR	95885	Identifier	op_array		95831	0					
ANR	95886	Identifier	opcodes		95831	1					
ANR	95887	Identifier	NULL		95831	1					
ANR	95888	ExpressionStatement	"op_array_alloc_ops ( op_array , initial_ops_size )"	66:1:2399:2445	95831	6	True				
ANR	95889	CallExpression	"op_array_alloc_ops ( op_array , initial_ops_size )"		95831	0					
ANR	95890	Callee	op_array_alloc_ops		95831	0					
ANR	95891	Identifier	op_array_alloc_ops		95831	0					
ANR	95892	ArgumentList	op_array		95831	1					
ANR	95893	Argument	op_array		95831	0					
ANR	95894	Identifier	op_array		95831	0					
ANR	95895	Argument	initial_ops_size		95831	1					
ANR	95896	Identifier	initial_ops_size		95831	0					
ANR	95897	ExpressionStatement	op_array -> last_var = 0	68:1:2449:2471	95831	7	True				
ANR	95898	AssignmentExpression	op_array -> last_var = 0		95831	0		=			
ANR	95899	PtrMemberAccess	op_array -> last_var		95831	0					
ANR	95900	Identifier	op_array		95831	0					
ANR	95901	Identifier	last_var		95831	1					
ANR	95902	PrimaryExpression	0		95831	1					
ANR	95903	ExpressionStatement	op_array -> vars = NULL	69:1:2474:2495	95831	8	True				
ANR	95904	AssignmentExpression	op_array -> vars = NULL		95831	0		=			
ANR	95905	PtrMemberAccess	op_array -> vars		95831	0					
ANR	95906	Identifier	op_array		95831	0					
ANR	95907	Identifier	vars		95831	1					
ANR	95908	Identifier	NULL		95831	1					
ANR	95909	ExpressionStatement	op_array -> T = 0	71:1:2499:2514	95831	9	True				
ANR	95910	AssignmentExpression	op_array -> T = 0		95831	0		=			
ANR	95911	PtrMemberAccess	op_array -> T		95831	0					
ANR	95912	Identifier	op_array		95831	0					
ANR	95913	Identifier	T		95831	1					
ANR	95914	PrimaryExpression	0		95831	1					
ANR	95915	ExpressionStatement	op_array -> nested_calls = 0	73:1:2518:2544	95831	10	True				
ANR	95916	AssignmentExpression	op_array -> nested_calls = 0		95831	0		=			
ANR	95917	PtrMemberAccess	op_array -> nested_calls		95831	0					
ANR	95918	Identifier	op_array		95831	0					
ANR	95919	Identifier	nested_calls		95831	1					
ANR	95920	PrimaryExpression	0		95831	1					
ANR	95921	ExpressionStatement	op_array -> used_stack = 0	74:1:2547:2571	95831	11	True				
ANR	95922	AssignmentExpression	op_array -> used_stack = 0		95831	0		=			
ANR	95923	PtrMemberAccess	op_array -> used_stack		95831	0					
ANR	95924	Identifier	op_array		95831	0					
ANR	95925	Identifier	used_stack		95831	1					
ANR	95926	PrimaryExpression	0		95831	1					
ANR	95927	ExpressionStatement	op_array -> function_name = NULL	76:1:2575:2605	95831	12	True				
ANR	95928	AssignmentExpression	op_array -> function_name = NULL		95831	0		=			
ANR	95929	PtrMemberAccess	op_array -> function_name		95831	0					
ANR	95930	Identifier	op_array		95831	0					
ANR	95931	Identifier	function_name		95831	1					
ANR	95932	Identifier	NULL		95831	1					
ANR	95933	ExpressionStatement	op_array -> filename = zend_get_compiled_filename ( TSRMLS_C )	77:1:2608:2665	95831	13	True				
ANR	95934	AssignmentExpression	op_array -> filename = zend_get_compiled_filename ( TSRMLS_C )		95831	0		=			
ANR	95935	PtrMemberAccess	op_array -> filename		95831	0					
ANR	95936	Identifier	op_array		95831	0					
ANR	95937	Identifier	filename		95831	1					
ANR	95938	CallExpression	zend_get_compiled_filename ( TSRMLS_C )		95831	1					
ANR	95939	Callee	zend_get_compiled_filename		95831	0					
ANR	95940	Identifier	zend_get_compiled_filename		95831	0					
ANR	95941	ArgumentList	TSRMLS_C		95831	1					
ANR	95942	Argument	TSRMLS_C		95831	0					
ANR	95943	Identifier	TSRMLS_C		95831	0					
ANR	95944	ExpressionStatement	op_array -> doc_comment = NULL	78:1:2668:2696	95831	14	True				
ANR	95945	AssignmentExpression	op_array -> doc_comment = NULL		95831	0		=			
ANR	95946	PtrMemberAccess	op_array -> doc_comment		95831	0					
ANR	95947	Identifier	op_array		95831	0					
ANR	95948	Identifier	doc_comment		95831	1					
ANR	95949	Identifier	NULL		95831	1					
ANR	95950	ExpressionStatement	op_array -> doc_comment_len = 0	79:1:2699:2728	95831	15	True				
ANR	95951	AssignmentExpression	op_array -> doc_comment_len = 0		95831	0		=			
ANR	95952	PtrMemberAccess	op_array -> doc_comment_len		95831	0					
ANR	95953	Identifier	op_array		95831	0					
ANR	95954	Identifier	doc_comment_len		95831	1					
ANR	95955	PrimaryExpression	0		95831	1					
ANR	95956	ExpressionStatement	op_array -> arg_info = NULL	81:1:2732:2757	95831	16	True				
ANR	95957	AssignmentExpression	op_array -> arg_info = NULL		95831	0		=			
ANR	95958	PtrMemberAccess	op_array -> arg_info		95831	0					
ANR	95959	Identifier	op_array		95831	0					
ANR	95960	Identifier	arg_info		95831	1					
ANR	95961	Identifier	NULL		95831	1					
ANR	95962	ExpressionStatement	op_array -> num_args = 0	82:1:2760:2782	95831	17	True				
ANR	95963	AssignmentExpression	op_array -> num_args = 0		95831	0		=			
ANR	95964	PtrMemberAccess	op_array -> num_args		95831	0					
ANR	95965	Identifier	op_array		95831	0					
ANR	95966	Identifier	num_args		95831	1					
ANR	95967	PrimaryExpression	0		95831	1					
ANR	95968	ExpressionStatement	op_array -> required_num_args = 0	83:1:2785:2816	95831	18	True				
ANR	95969	AssignmentExpression	op_array -> required_num_args = 0		95831	0		=			
ANR	95970	PtrMemberAccess	op_array -> required_num_args		95831	0					
ANR	95971	Identifier	op_array		95831	0					
ANR	95972	Identifier	required_num_args		95831	1					
ANR	95973	PrimaryExpression	0		95831	1					
ANR	95974	ExpressionStatement	op_array -> scope = NULL	85:1:2820:2842	95831	19	True				
ANR	95975	AssignmentExpression	op_array -> scope = NULL		95831	0		=			
ANR	95976	PtrMemberAccess	op_array -> scope		95831	0					
ANR	95977	Identifier	op_array		95831	0					
ANR	95978	Identifier	scope		95831	1					
ANR	95979	Identifier	NULL		95831	1					
ANR	95980	ExpressionStatement	op_array -> brk_cont_array = NULL	87:1:2846:2877	95831	20	True				
ANR	95981	AssignmentExpression	op_array -> brk_cont_array = NULL		95831	0		=			
ANR	95982	PtrMemberAccess	op_array -> brk_cont_array		95831	0					
ANR	95983	Identifier	op_array		95831	0					
ANR	95984	Identifier	brk_cont_array		95831	1					
ANR	95985	Identifier	NULL		95831	1					
ANR	95986	ExpressionStatement	op_array -> try_catch_array = NULL	88:1:2880:2912	95831	21	True				
ANR	95987	AssignmentExpression	op_array -> try_catch_array = NULL		95831	0		=			
ANR	95988	PtrMemberAccess	op_array -> try_catch_array		95831	0					
ANR	95989	Identifier	op_array		95831	0					
ANR	95990	Identifier	try_catch_array		95831	1					
ANR	95991	Identifier	NULL		95831	1					
ANR	95992	ExpressionStatement	op_array -> last_brk_cont = 0	89:1:2915:2942	95831	22	True				
ANR	95993	AssignmentExpression	op_array -> last_brk_cont = 0		95831	0		=			
ANR	95994	PtrMemberAccess	op_array -> last_brk_cont		95831	0					
ANR	95995	Identifier	op_array		95831	0					
ANR	95996	Identifier	last_brk_cont		95831	1					
ANR	95997	PrimaryExpression	0		95831	1					
ANR	95998	ExpressionStatement	op_array -> static_variables = NULL	91:1:2946:2979	95831	23	True				
ANR	95999	AssignmentExpression	op_array -> static_variables = NULL		95831	0		=			
ANR	96000	PtrMemberAccess	op_array -> static_variables		95831	0					
ANR	96001	Identifier	op_array		95831	0					
ANR	96002	Identifier	static_variables		95831	1					
ANR	96003	Identifier	NULL		95831	1					
ANR	96004	ExpressionStatement	op_array -> last_try_catch = 0	92:1:2982:3010	95831	24	True				
ANR	96005	AssignmentExpression	op_array -> last_try_catch = 0		95831	0		=			
ANR	96006	PtrMemberAccess	op_array -> last_try_catch		95831	0					
ANR	96007	Identifier	op_array		95831	0					
ANR	96008	Identifier	last_try_catch		95831	1					
ANR	96009	PrimaryExpression	0		95831	1					
ANR	96010	ExpressionStatement	op_array -> has_finally_block = 0	93:1:3013:3044	95831	25	True				
ANR	96011	AssignmentExpression	op_array -> has_finally_block = 0		95831	0		=			
ANR	96012	PtrMemberAccess	op_array -> has_finally_block		95831	0					
ANR	96013	Identifier	op_array		95831	0					
ANR	96014	Identifier	has_finally_block		95831	1					
ANR	96015	PrimaryExpression	0		95831	1					
ANR	96016	ExpressionStatement	op_array -> this_var = - 1	95:1:3048:3071	95831	26	True				
ANR	96017	AssignmentExpression	op_array -> this_var = - 1		95831	0		=			
ANR	96018	PtrMemberAccess	op_array -> this_var		95831	0					
ANR	96019	Identifier	op_array		95831	0					
ANR	96020	Identifier	this_var		95831	1					
ANR	96021	UnaryOperationExpression	- 1		95831	1					
ANR	96022	UnaryOperator	-		95831	0					
ANR	96023	PrimaryExpression	1		95831	1					
ANR	96024	ExpressionStatement	op_array -> fn_flags = CG ( interactive ) ? ZEND_ACC_INTERACTIVE : 0	97:1:3075:3134	95831	27	True				
ANR	96025	AssignmentExpression	op_array -> fn_flags = CG ( interactive ) ? ZEND_ACC_INTERACTIVE : 0		95831	0		=			
ANR	96026	PtrMemberAccess	op_array -> fn_flags		95831	0					
ANR	96027	Identifier	op_array		95831	0					
ANR	96028	Identifier	fn_flags		95831	1					
ANR	96029	ConditionalExpression	CG ( interactive ) ? ZEND_ACC_INTERACTIVE : 0		95831	1					
ANR	96030	Condition	CG ( interactive )		95831	0					
ANR	96031	CallExpression	CG ( interactive )		95831	0					
ANR	96032	Callee	CG		95831	0					
ANR	96033	Identifier	CG		95831	0					
ANR	96034	ArgumentList	interactive		95831	1					
ANR	96035	Argument	interactive		95831	0					
ANR	96036	Identifier	interactive		95831	0					
ANR	96037	Identifier	ZEND_ACC_INTERACTIVE		95831	1					
ANR	96038	PrimaryExpression	0		95831	2					
ANR	96039	ExpressionStatement	op_array -> early_binding = - 1	99:1:3138:3166	95831	28	True				
ANR	96040	AssignmentExpression	op_array -> early_binding = - 1		95831	0		=			
ANR	96041	PtrMemberAccess	op_array -> early_binding		95831	0					
ANR	96042	Identifier	op_array		95831	0					
ANR	96043	Identifier	early_binding		95831	1					
ANR	96044	UnaryOperationExpression	- 1		95831	1					
ANR	96045	UnaryOperator	-		95831	0					
ANR	96046	PrimaryExpression	1		95831	1					
ANR	96047	ExpressionStatement	op_array -> last_literal = 0	101:1:3170:3196	95831	29	True				
ANR	96048	AssignmentExpression	op_array -> last_literal = 0		95831	0		=			
ANR	96049	PtrMemberAccess	op_array -> last_literal		95831	0					
ANR	96050	Identifier	op_array		95831	0					
ANR	96051	Identifier	last_literal		95831	1					
ANR	96052	PrimaryExpression	0		95831	1					
ANR	96053	ExpressionStatement	op_array -> literals = NULL	102:1:3199:3224	95831	30	True				
ANR	96054	AssignmentExpression	op_array -> literals = NULL		95831	0		=			
ANR	96055	PtrMemberAccess	op_array -> literals		95831	0					
ANR	96056	Identifier	op_array		95831	0					
ANR	96057	Identifier	literals		95831	1					
ANR	96058	Identifier	NULL		95831	1					
ANR	96059	ExpressionStatement	op_array -> run_time_cache = NULL	104:1:3228:3259	95831	31	True				
ANR	96060	AssignmentExpression	op_array -> run_time_cache = NULL		95831	0		=			
ANR	96061	PtrMemberAccess	op_array -> run_time_cache		95831	0					
ANR	96062	Identifier	op_array		95831	0					
ANR	96063	Identifier	run_time_cache		95831	1					
ANR	96064	Identifier	NULL		95831	1					
ANR	96065	ExpressionStatement	op_array -> last_cache_slot = 0	105:1:3262:3291	95831	32	True				
ANR	96066	AssignmentExpression	op_array -> last_cache_slot = 0		95831	0		=			
ANR	96067	PtrMemberAccess	op_array -> last_cache_slot		95831	0					
ANR	96068	Identifier	op_array		95831	0					
ANR	96069	Identifier	last_cache_slot		95831	1					
ANR	96070	PrimaryExpression	0		95831	1					
ANR	96071	ExpressionStatement	"memset ( op_array -> reserved , 0 , ZEND_MAX_RESERVED_RESOURCES * sizeof ( void * ) )"	107:1:3295:3369	95831	33	True				
ANR	96072	CallExpression	"memset ( op_array -> reserved , 0 , ZEND_MAX_RESERVED_RESOURCES * sizeof ( void * ) )"		95831	0					
ANR	96073	Callee	memset		95831	0					
ANR	96074	Identifier	memset		95831	0					
ANR	96075	ArgumentList	op_array -> reserved		95831	1					
ANR	96076	Argument	op_array -> reserved		95831	0					
ANR	96077	PtrMemberAccess	op_array -> reserved		95831	0					
ANR	96078	Identifier	op_array		95831	0					
ANR	96079	Identifier	reserved		95831	1					
ANR	96080	Argument	0		95831	1					
ANR	96081	PrimaryExpression	0		95831	0					
ANR	96082	Argument	ZEND_MAX_RESERVED_RESOURCES * sizeof ( void * )		95831	2					
ANR	96083	MultiplicativeExpression	ZEND_MAX_RESERVED_RESOURCES * sizeof ( void * )		95831	0		*			
ANR	96084	Identifier	ZEND_MAX_RESERVED_RESOURCES		95831	0					
ANR	96085	SizeofExpression	sizeof ( void * )		95831	1					
ANR	96086	Sizeof	sizeof		95831	0					
ANR	96087	SizeofOperand	void *		95831	1					
ANR	96088	Statement	zend_llist_apply_with_argument	109:1:3373:3402	95831	34	True				
ANR	96089	Statement	(	109:31:3403:3403	95831	35	True				
ANR	96090	Statement	&	109:32:3404:3404	95831	36	True				
ANR	96091	Statement	zend_extensions	109:33:3405:3419	95831	37	True				
ANR	96092	Statement	","	109:48:3420:3420	95831	38	True				
ANR	96093	Statement	(	109:50:3422:3422	95831	39	True				
ANR	96094	Statement	llist_apply_with_arg_func_t	109:51:3423:3449	95831	40	True				
ANR	96095	Statement	)	109:78:3450:3450	95831	41	True				
ANR	96096	Statement	zend_extension_op_array_ctor_handler	109:80:3452:3487	95831	42	True				
ANR	96097	Statement	","	109:116:3488:3488	95831	43	True				
ANR	96098	Statement	op_array	109:118:3490:3497	95831	44	True				
ANR	96099	Statement	TSRMLS_CC	109:127:3499:3507	95831	45	True				
ANR	96100	Statement	)	109:136:3508:3508	95831	46	True				
ANR	96101	ExpressionStatement		109:137:3509:3509	95831	47	True				
ANR	96102	ReturnType	void		95831	1					
ANR	96103	Identifier	init_op_array		95831	2					
ANR	96104	ParameterList	"zend_op_array * op_array , zend_uchar type , int initial_ops_size TSRMLS_DC"		95831	3					
ANR	96105	Parameter	zend_op_array * op_array	51:19:1948:1970	95831	0	True				
ANR	96106	ParameterType	zend_op_array *		95831	0					
ANR	96107	Identifier	op_array		95831	1					
ANR	96108	Parameter	zend_uchar type	51:44:1973:1987	95831	1	True				
ANR	96109	ParameterType	zend_uchar		95831	0					
ANR	96110	Identifier	type		95831	1					
ANR	96111	Parameter	int initial_ops_size TSRMLS_DC	51:61:1990:2019	95831	2	True				
ANR	96112	ParameterType	int initial_ops_size		95831	0					
ANR	96113	Identifier	TSRMLS_DC		95831	1					
ANR	96114	CFGEntryNode	ENTRY		95831		True				
ANR	96115	CFGExitNode	EXIT		95831		True				
ANR	96116	Symbol	op_array -> used_stack		95831						
ANR	96117	Symbol	INITIAL_INTERACTIVE_OP_ARRAY_SIZE		95831						
ANR	96118	Symbol	op_array -> doc_comment_len		95831						
ANR	96119	Symbol	interactive		95831						
ANR	96120	Symbol	op_array -> last_var		95831						
ANR	96121	Symbol	* op_array -> refcount		95831						
ANR	96122	Symbol	type		95831						
ANR	96123	Symbol	TSRMLS_DC		95831						
ANR	96124	Symbol	op_array -> last_cache_slot		95831						
ANR	96125	Symbol	op_array -> type		95831						
ANR	96126	Symbol	op_array -> run_time_cache		95831						
ANR	96127	Symbol	emalloc		95831						
ANR	96128	Symbol	op_array -> brk_cont_array		95831						
ANR	96129	Symbol	op_array -> opcodes		95831						
ANR	96130	Symbol	TSRMLS_C		95831						
ANR	96131	Symbol	op_array -> required_num_args		95831						
ANR	96132	Symbol	op_array -> fn_flags		95831						
ANR	96133	Symbol	op_array -> early_binding		95831						
ANR	96134	Symbol	op_array -> last_literal		95831						
ANR	96135	Symbol	op_array -> nested_calls		95831						
ANR	96136	Symbol	op_array -> num_args		95831						
ANR	96137	Symbol	op_array -> static_variables		95831						
ANR	96138	Symbol	op_array -> try_catch_array		95831						
ANR	96139	Symbol	op_array -> doc_comment		95831						
ANR	96140	Symbol	op_array -> T		95831						
ANR	96141	Symbol	NULL		95831						
ANR	96142	Symbol	op_array -> vars		95831						
ANR	96143	Symbol	CG		95831						
ANR	96144	Symbol	op_array -> this_var		95831						
ANR	96145	Symbol	op_array -> reserved		95831						
ANR	96146	Symbol	ZEND_MAX_RESERVED_RESOURCES		95831						
ANR	96147	Symbol	initial_ops_size		95831						
ANR	96148	Symbol	* op_array		95831						
ANR	96149	Symbol	op_array -> refcount		95831						
ANR	96150	Symbol	op_array -> scope		95831						
ANR	96151	Symbol	op_array -> function_name		95831						
ANR	96152	Symbol	op_array -> last_brk_cont		95831						
ANR	96153	Symbol	op_array -> last_try_catch		95831						
ANR	96154	Symbol	op_array -> last		95831						
ANR	96155	Symbol	zend_get_compiled_filename		95831						
ANR	96156	Symbol	op_array -> literals		95831						
ANR	96157	Symbol	ZEND_ACC_INTERACTIVE		95831						
ANR	96158	Symbol	* * op_array		95831						
ANR	96159	Symbol	op_array -> has_finally_block		95831						
ANR	96160	Symbol	op_array -> filename		95831						
ANR	96161	Symbol	op_array		95831						
ANR	96162	Symbol	op_array -> arg_info		95831						
ANR	96163	Function	zend_function_dtor	124:0:3777:3899							
ANR	96164	FunctionDef	zend_function_dtor (zend_function * function)		96163	0					
ANR	96165	CompoundStatement		125:0:3835:3899	96163	0					
ANR	96166	ExpressionStatement	TSRMLS_FETCH ( )	126:1:3838:3852	96163	0	True				
ANR	96167	CallExpression	TSRMLS_FETCH ( )		96163	0					
ANR	96168	Callee	TSRMLS_FETCH		96163	0					
ANR	96169	Identifier	TSRMLS_FETCH		96163	0					
ANR	96170	ArgumentList			96163	1					
ANR	96171	Statement	destroy_zend_function	128:1:3856:3876	96163	1	True				
ANR	96172	Statement	(	128:22:3877:3877	96163	2	True				
ANR	96173	Statement	function	128:23:3878:3885	96163	3	True				
ANR	96174	Statement	TSRMLS_CC	128:32:3887:3895	96163	4	True				
ANR	96175	Statement	)	128:41:3896:3896	96163	5	True				
ANR	96176	ExpressionStatement		128:42:3897:3897	96163	6	True				
ANR	96177	ReturnType	ZEND_API void		96163	1					
ANR	96178	Identifier	zend_function_dtor		96163	2					
ANR	96179	ParameterList	zend_function * function		96163	3					
ANR	96180	Parameter	zend_function * function	124:33:3810:3832	96163	0	True				
ANR	96181	ParameterType	zend_function *		96163	0					
ANR	96182	Identifier	function		96163	1					
ANR	96183	CFGEntryNode	ENTRY		96163		True				
ANR	96184	CFGExitNode	EXIT		96163		True				
ANR	96185	Symbol	function		96163						
ANR	96186	Function	zend_cleanup_op_array_data	131:0:3902:4053							
ANR	96187	FunctionDef	zend_cleanup_op_array_data (zend_op_array * op_array)		96186	0					
ANR	96188	CompoundStatement		132:0:3966:4053	96186	0					
ANR	96189	IfStatement	if ( op_array -> static_variables )		96186	0					
ANR	96190	Condition	op_array -> static_variables	133:5:3973:3998	96186	0	True				
ANR	96191	PtrMemberAccess	op_array -> static_variables		96186	0					
ANR	96192	Identifier	op_array		96186	0					
ANR	96193	Identifier	static_variables		96186	1					
ANR	96194	CompoundStatement		2:33:34:34	96186	1					
ANR	96195	ExpressionStatement	zend_hash_clean ( op_array -> static_variables )	134:2:4005:4048	96186	0	True				
ANR	96196	CallExpression	zend_hash_clean ( op_array -> static_variables )		96186	0					
ANR	96197	Callee	zend_hash_clean		96186	0					
ANR	96198	Identifier	zend_hash_clean		96186	0					
ANR	96199	ArgumentList	op_array -> static_variables		96186	1					
ANR	96200	Argument	op_array -> static_variables		96186	0					
ANR	96201	PtrMemberAccess	op_array -> static_variables		96186	0					
ANR	96202	Identifier	op_array		96186	0					
ANR	96203	Identifier	static_variables		96186	1					
ANR	96204	ReturnType	static void		96186	1					
ANR	96205	Identifier	zend_cleanup_op_array_data		96186	2					
ANR	96206	ParameterList	zend_op_array * op_array		96186	3					
ANR	96207	Parameter	zend_op_array * op_array	131:39:3941:3963	96186	0	True				
ANR	96208	ParameterType	zend_op_array *		96186	0					
ANR	96209	Identifier	op_array		96186	1					
ANR	96210	CFGEntryNode	ENTRY		96186		True				
ANR	96211	CFGExitNode	EXIT		96186		True				
ANR	96212	Symbol	op_array -> static_variables		96186						
ANR	96213	Symbol	op_array		96186						
ANR	96214	Symbol	* op_array		96186						
ANR	96215	DeclStmt									
ANR	96216	Decl							zval	zval * *	static_members
ANR	96217	DeclStmt									
ANR	96218	Decl							int	int	count
ANR	96219	DeclStmt									
ANR	96220	Decl							int	int	i
ANR	96221	DeclStmt									
ANR	96222	Decl							int	int	i
ANR	96223	Function	_destroy_zend_class_traits_info	220:0:6301:7738							
ANR	96224	FunctionDef	_destroy_zend_class_traits_info (zend_class_entry * ce)		96223	0					
ANR	96225	CompoundStatement		221:0:6360:7738	96223	0					
ANR	96226	IfStatement	if ( ce -> num_traits > 0 && ce -> traits )		96223	0					
ANR	96227	Condition	ce -> num_traits > 0 && ce -> traits	222:5:6367:6398	96223	0	True				
ANR	96228	AndExpression	ce -> num_traits > 0 && ce -> traits		96223	0		&&			
ANR	96229	RelationalExpression	ce -> num_traits > 0		96223	0		>			
ANR	96230	PtrMemberAccess	ce -> num_traits		96223	0					
ANR	96231	Identifier	ce		96223	0					
ANR	96232	Identifier	num_traits		96223	1					
ANR	96233	PrimaryExpression	0		96223	1					
ANR	96234	PtrMemberAccess	ce -> traits		96223	1					
ANR	96235	Identifier	ce		96223	0					
ANR	96236	Identifier	traits		96223	1					
ANR	96237	CompoundStatement		2:39:40:40	96223	1					
ANR	96238	ExpressionStatement	efree ( ce -> traits )	223:2:6405:6422	96223	0	True				
ANR	96239	CallExpression	efree ( ce -> traits )		96223	0					
ANR	96240	Callee	efree		96223	0					
ANR	96241	Identifier	efree		96223	0					
ANR	96242	ArgumentList	ce -> traits		96223	1					
ANR	96243	Argument	ce -> traits		96223	0					
ANR	96244	PtrMemberAccess	ce -> traits		96223	0					
ANR	96245	Identifier	ce		96223	0					
ANR	96246	Identifier	traits		96223	1					
ANR	96247	IfStatement	if ( ce -> trait_aliases )		96223	1					
ANR	96248	Condition	ce -> trait_aliases	226:5:6434:6450	96223	0	True				
ANR	96249	PtrMemberAccess	ce -> trait_aliases		96223	0					
ANR	96250	Identifier	ce		96223	0					
ANR	96251	Identifier	trait_aliases		96223	1					
ANR	96252	CompoundStatement		7:2:96:108	96223	1					
ANR	96253	IdentifierDeclStatement	size_t i = 0 ;	227:2:6457:6469	96223	0	True				
ANR	96254	IdentifierDecl	i = 0		96223	0					
ANR	96255	IdentifierDeclType	size_t		96223	0					
ANR	96256	Identifier	i		96223	1					
ANR	96257	AssignmentExpression	i = 0		96223	2		=			
ANR	96258	Identifier	i		96223	0					
ANR	96259	PrimaryExpression	0		96223	1					
ANR	96260	WhileStatement	while ( ce -> trait_aliases [ i ] )		96223	1					
ANR	96261	Condition	ce -> trait_aliases [ i ]	228:9:6480:6499	96223	0	True				
ANR	96262	ArrayIndexing	ce -> trait_aliases [ i ]		96223	0					
ANR	96263	PtrMemberAccess	ce -> trait_aliases		96223	0					
ANR	96264	Identifier	ce		96223	0					
ANR	96265	Identifier	trait_aliases		96223	1					
ANR	96266	Identifier	i		96223	1					
ANR	96267	CompoundStatement		8:31:141:141	96223	1					
ANR	96268	IfStatement	if ( ce -> trait_aliases [ i ] -> trait_method )		96223	0					
ANR	96269	Condition	ce -> trait_aliases [ i ] -> trait_method	229:7:6511:6544	96223	0	True				
ANR	96270	PtrMemberAccess	ce -> trait_aliases [ i ] -> trait_method		96223	0					
ANR	96271	ArrayIndexing	ce -> trait_aliases [ i ]		96223	0					
ANR	96272	PtrMemberAccess	ce -> trait_aliases		96223	0					
ANR	96273	Identifier	ce		96223	0					
ANR	96274	Identifier	trait_aliases		96223	1					
ANR	96275	Identifier	i		96223	1					
ANR	96276	Identifier	trait_method		96223	1					
ANR	96277	CompoundStatement		9:43:186:186	96223	1					
ANR	96278	IfStatement	if ( ce -> trait_aliases [ i ] -> trait_method -> method_name )		96223	0					
ANR	96279	Condition	ce -> trait_aliases [ i ] -> trait_method -> method_name	230:8:6557:6603	96223	0	True				
ANR	96280	PtrMemberAccess	ce -> trait_aliases [ i ] -> trait_method -> method_name		96223	0					
ANR	96281	PtrMemberAccess	ce -> trait_aliases [ i ] -> trait_method		96223	0					
ANR	96282	ArrayIndexing	ce -> trait_aliases [ i ]		96223	0					
ANR	96283	PtrMemberAccess	ce -> trait_aliases		96223	0					
ANR	96284	Identifier	ce		96223	0					
ANR	96285	Identifier	trait_aliases		96223	1					
ANR	96286	Identifier	i		96223	1					
ANR	96287	Identifier	trait_method		96223	1					
ANR	96288	Identifier	method_name		96223	1					
ANR	96289	CompoundStatement		10:57:245:245	96223	1					
ANR	96290	ExpressionStatement	efree ( ( char * ) ce -> trait_aliases [ i ] -> trait_method -> method_name )	231:6:6614:6675	96223	0	True				
ANR	96291	CallExpression	efree ( ( char * ) ce -> trait_aliases [ i ] -> trait_method -> method_name )		96223	0					
ANR	96292	Callee	efree		96223	0					
ANR	96293	Identifier	efree		96223	0					
ANR	96294	ArgumentList	( char * ) ce -> trait_aliases [ i ] -> trait_method -> method_name		96223	1					
ANR	96295	Argument	( char * ) ce -> trait_aliases [ i ] -> trait_method -> method_name		96223	0					
ANR	96296	CastExpression	( char * ) ce -> trait_aliases [ i ] -> trait_method -> method_name		96223	0					
ANR	96297	CastTarget	char *		96223	0					
ANR	96298	PtrMemberAccess	ce -> trait_aliases [ i ] -> trait_method -> method_name		96223	1					
ANR	96299	PtrMemberAccess	ce -> trait_aliases [ i ] -> trait_method		96223	0					
ANR	96300	ArrayIndexing	ce -> trait_aliases [ i ]		96223	0					
ANR	96301	PtrMemberAccess	ce -> trait_aliases		96223	0					
ANR	96302	Identifier	ce		96223	0					
ANR	96303	Identifier	trait_aliases		96223	1					
ANR	96304	Identifier	i		96223	1					
ANR	96305	Identifier	trait_method		96223	1					
ANR	96306	Identifier	method_name		96223	1					
ANR	96307	IfStatement	if ( ce -> trait_aliases [ i ] -> trait_method -> class_name )		96223	1					
ANR	96308	Condition	ce -> trait_aliases [ i ] -> trait_method -> class_name	233:8:6691:6736	96223	0	True				
ANR	96309	PtrMemberAccess	ce -> trait_aliases [ i ] -> trait_method -> class_name		96223	0					
ANR	96310	PtrMemberAccess	ce -> trait_aliases [ i ] -> trait_method		96223	0					
ANR	96311	ArrayIndexing	ce -> trait_aliases [ i ]		96223	0					
ANR	96312	PtrMemberAccess	ce -> trait_aliases		96223	0					
ANR	96313	Identifier	ce		96223	0					
ANR	96314	Identifier	trait_aliases		96223	1					
ANR	96315	Identifier	i		96223	1					
ANR	96316	Identifier	trait_method		96223	1					
ANR	96317	Identifier	class_name		96223	1					
ANR	96318	CompoundStatement		13:56:378:378	96223	1					
ANR	96319	ExpressionStatement	efree ( ( char * ) ce -> trait_aliases [ i ] -> trait_method -> class_name )	234:6:6747:6807	96223	0	True				
ANR	96320	CallExpression	efree ( ( char * ) ce -> trait_aliases [ i ] -> trait_method -> class_name )		96223	0					
ANR	96321	Callee	efree		96223	0					
ANR	96322	Identifier	efree		96223	0					
ANR	96323	ArgumentList	( char * ) ce -> trait_aliases [ i ] -> trait_method -> class_name		96223	1					
ANR	96324	Argument	( char * ) ce -> trait_aliases [ i ] -> trait_method -> class_name		96223	0					
ANR	96325	CastExpression	( char * ) ce -> trait_aliases [ i ] -> trait_method -> class_name		96223	0					
ANR	96326	CastTarget	char *		96223	0					
ANR	96327	PtrMemberAccess	ce -> trait_aliases [ i ] -> trait_method -> class_name		96223	1					
ANR	96328	PtrMemberAccess	ce -> trait_aliases [ i ] -> trait_method		96223	0					
ANR	96329	ArrayIndexing	ce -> trait_aliases [ i ]		96223	0					
ANR	96330	PtrMemberAccess	ce -> trait_aliases		96223	0					
ANR	96331	Identifier	ce		96223	0					
ANR	96332	Identifier	trait_aliases		96223	1					
ANR	96333	Identifier	i		96223	1					
ANR	96334	Identifier	trait_method		96223	1					
ANR	96335	Identifier	class_name		96223	1					
ANR	96336	ExpressionStatement	efree ( ce -> trait_aliases [ i ] -> trait_method )	236:4:6819:6860	96223	2	True				
ANR	96337	CallExpression	efree ( ce -> trait_aliases [ i ] -> trait_method )		96223	0					
ANR	96338	Callee	efree		96223	0					
ANR	96339	Identifier	efree		96223	0					
ANR	96340	ArgumentList	ce -> trait_aliases [ i ] -> trait_method		96223	1					
ANR	96341	Argument	ce -> trait_aliases [ i ] -> trait_method		96223	0					
ANR	96342	PtrMemberAccess	ce -> trait_aliases [ i ] -> trait_method		96223	0					
ANR	96343	ArrayIndexing	ce -> trait_aliases [ i ]		96223	0					
ANR	96344	PtrMemberAccess	ce -> trait_aliases		96223	0					
ANR	96345	Identifier	ce		96223	0					
ANR	96346	Identifier	trait_aliases		96223	1					
ANR	96347	Identifier	i		96223	1					
ANR	96348	Identifier	trait_method		96223	1					
ANR	96349	IfStatement	if ( ce -> trait_aliases [ i ] -> alias )		96223	1					
ANR	96350	Condition	ce -> trait_aliases [ i ] -> alias	239:7:6878:6904	96223	0	True				
ANR	96351	PtrMemberAccess	ce -> trait_aliases [ i ] -> alias		96223	0					
ANR	96352	ArrayIndexing	ce -> trait_aliases [ i ]		96223	0					
ANR	96353	PtrMemberAccess	ce -> trait_aliases		96223	0					
ANR	96354	Identifier	ce		96223	0					
ANR	96355	Identifier	trait_aliases		96223	1					
ANR	96356	Identifier	i		96223	1					
ANR	96357	Identifier	alias		96223	1					
ANR	96358	CompoundStatement		19:36:546:546	96223	1					
ANR	96359	ExpressionStatement	efree ( ( char * ) ce -> trait_aliases [ i ] -> alias )	240:4:6913:6954	96223	0	True				
ANR	96360	CallExpression	efree ( ( char * ) ce -> trait_aliases [ i ] -> alias )		96223	0					
ANR	96361	Callee	efree		96223	0					
ANR	96362	Identifier	efree		96223	0					
ANR	96363	ArgumentList	( char * ) ce -> trait_aliases [ i ] -> alias		96223	1					
ANR	96364	Argument	( char * ) ce -> trait_aliases [ i ] -> alias		96223	0					
ANR	96365	CastExpression	( char * ) ce -> trait_aliases [ i ] -> alias		96223	0					
ANR	96366	CastTarget	char *		96223	0					
ANR	96367	PtrMemberAccess	ce -> trait_aliases [ i ] -> alias		96223	1					
ANR	96368	ArrayIndexing	ce -> trait_aliases [ i ]		96223	0					
ANR	96369	PtrMemberAccess	ce -> trait_aliases		96223	0					
ANR	96370	Identifier	ce		96223	0					
ANR	96371	Identifier	trait_aliases		96223	1					
ANR	96372	Identifier	i		96223	1					
ANR	96373	Identifier	alias		96223	1					
ANR	96374	ExpressionStatement	efree ( ce -> trait_aliases [ i ] )	243:3:6968:6995	96223	2	True				
ANR	96375	CallExpression	efree ( ce -> trait_aliases [ i ] )		96223	0					
ANR	96376	Callee	efree		96223	0					
ANR	96377	Identifier	efree		96223	0					
ANR	96378	ArgumentList	ce -> trait_aliases [ i ]		96223	1					
ANR	96379	Argument	ce -> trait_aliases [ i ]		96223	0					
ANR	96380	ArrayIndexing	ce -> trait_aliases [ i ]		96223	0					
ANR	96381	PtrMemberAccess	ce -> trait_aliases		96223	0					
ANR	96382	Identifier	ce		96223	0					
ANR	96383	Identifier	trait_aliases		96223	1					
ANR	96384	Identifier	i		96223	1					
ANR	96385	ExpressionStatement	i ++	244:3:7000:7003	96223	3	True				
ANR	96386	PostIncDecOperationExpression	i ++		96223	0					
ANR	96387	Identifier	i		96223	0					
ANR	96388	IncDec	++		96223	1					
ANR	96389	ExpressionStatement	efree ( ce -> trait_aliases )	247:2:7014:7038	96223	2	True				
ANR	96390	CallExpression	efree ( ce -> trait_aliases )		96223	0					
ANR	96391	Callee	efree		96223	0					
ANR	96392	Identifier	efree		96223	0					
ANR	96393	ArgumentList	ce -> trait_aliases		96223	1					
ANR	96394	Argument	ce -> trait_aliases		96223	0					
ANR	96395	PtrMemberAccess	ce -> trait_aliases		96223	0					
ANR	96396	Identifier	ce		96223	0					
ANR	96397	Identifier	trait_aliases		96223	1					
ANR	96398	IfStatement	if ( ce -> trait_precedences )		96223	2					
ANR	96399	Condition	ce -> trait_precedences	250:5:7049:7069	96223	0	True				
ANR	96400	PtrMemberAccess	ce -> trait_precedences		96223	0					
ANR	96401	Identifier	ce		96223	0					
ANR	96402	Identifier	trait_precedences		96223	1					
ANR	96403	CompoundStatement		31:2:715:727	96223	1					
ANR	96404	IdentifierDeclStatement	size_t i = 0 ;	251:2:7076:7088	96223	0	True				
ANR	96405	IdentifierDecl	i = 0		96223	0					
ANR	96406	IdentifierDeclType	size_t		96223	0					
ANR	96407	Identifier	i		96223	1					
ANR	96408	AssignmentExpression	i = 0		96223	2		=			
ANR	96409	Identifier	i		96223	0					
ANR	96410	PrimaryExpression	0		96223	1					
ANR	96411	WhileStatement	while ( ce -> trait_precedences [ i ] )		96223	1					
ANR	96412	Condition	ce -> trait_precedences [ i ]	253:9:7102:7125	96223	0	True				
ANR	96413	ArrayIndexing	ce -> trait_precedences [ i ]		96223	0					
ANR	96414	PtrMemberAccess	ce -> trait_precedences		96223	0					
ANR	96415	Identifier	ce		96223	0					
ANR	96416	Identifier	trait_precedences		96223	1					
ANR	96417	Identifier	i		96223	1					
ANR	96418	CompoundStatement		33:35:767:767	96223	1					
ANR	96419	ExpressionStatement	efree ( ( char * ) ce -> trait_precedences [ i ] -> trait_method -> method_name )	254:3:7133:7198	96223	0	True				
ANR	96420	CallExpression	efree ( ( char * ) ce -> trait_precedences [ i ] -> trait_method -> method_name )		96223	0					
ANR	96421	Callee	efree		96223	0					
ANR	96422	Identifier	efree		96223	0					
ANR	96423	ArgumentList	( char * ) ce -> trait_precedences [ i ] -> trait_method -> method_name		96223	1					
ANR	96424	Argument	( char * ) ce -> trait_precedences [ i ] -> trait_method -> method_name		96223	0					
ANR	96425	CastExpression	( char * ) ce -> trait_precedences [ i ] -> trait_method -> method_name		96223	0					
ANR	96426	CastTarget	char *		96223	0					
ANR	96427	PtrMemberAccess	ce -> trait_precedences [ i ] -> trait_method -> method_name		96223	1					
ANR	96428	PtrMemberAccess	ce -> trait_precedences [ i ] -> trait_method		96223	0					
ANR	96429	ArrayIndexing	ce -> trait_precedences [ i ]		96223	0					
ANR	96430	PtrMemberAccess	ce -> trait_precedences		96223	0					
ANR	96431	Identifier	ce		96223	0					
ANR	96432	Identifier	trait_precedences		96223	1					
ANR	96433	Identifier	i		96223	1					
ANR	96434	Identifier	trait_method		96223	1					
ANR	96435	Identifier	method_name		96223	1					
ANR	96436	ExpressionStatement	efree ( ( char * ) ce -> trait_precedences [ i ] -> trait_method -> class_name )	255:3:7203:7267	96223	1	True				
ANR	96437	CallExpression	efree ( ( char * ) ce -> trait_precedences [ i ] -> trait_method -> class_name )		96223	0					
ANR	96438	Callee	efree		96223	0					
ANR	96439	Identifier	efree		96223	0					
ANR	96440	ArgumentList	( char * ) ce -> trait_precedences [ i ] -> trait_method -> class_name		96223	1					
ANR	96441	Argument	( char * ) ce -> trait_precedences [ i ] -> trait_method -> class_name		96223	0					
ANR	96442	CastExpression	( char * ) ce -> trait_precedences [ i ] -> trait_method -> class_name		96223	0					
ANR	96443	CastTarget	char *		96223	0					
ANR	96444	PtrMemberAccess	ce -> trait_precedences [ i ] -> trait_method -> class_name		96223	1					
ANR	96445	PtrMemberAccess	ce -> trait_precedences [ i ] -> trait_method		96223	0					
ANR	96446	ArrayIndexing	ce -> trait_precedences [ i ]		96223	0					
ANR	96447	PtrMemberAccess	ce -> trait_precedences		96223	0					
ANR	96448	Identifier	ce		96223	0					
ANR	96449	Identifier	trait_precedences		96223	1					
ANR	96450	Identifier	i		96223	1					
ANR	96451	Identifier	trait_method		96223	1					
ANR	96452	Identifier	class_name		96223	1					
ANR	96453	ExpressionStatement	efree ( ce -> trait_precedences [ i ] -> trait_method )	256:3:7272:7317	96223	2	True				
ANR	96454	CallExpression	efree ( ce -> trait_precedences [ i ] -> trait_method )		96223	0					
ANR	96455	Callee	efree		96223	0					
ANR	96456	Identifier	efree		96223	0					
ANR	96457	ArgumentList	ce -> trait_precedences [ i ] -> trait_method		96223	1					
ANR	96458	Argument	ce -> trait_precedences [ i ] -> trait_method		96223	0					
ANR	96459	PtrMemberAccess	ce -> trait_precedences [ i ] -> trait_method		96223	0					
ANR	96460	ArrayIndexing	ce -> trait_precedences [ i ]		96223	0					
ANR	96461	PtrMemberAccess	ce -> trait_precedences		96223	0					
ANR	96462	Identifier	ce		96223	0					
ANR	96463	Identifier	trait_precedences		96223	1					
ANR	96464	Identifier	i		96223	1					
ANR	96465	Identifier	trait_method		96223	1					
ANR	96466	IfStatement	if ( ce -> trait_precedences [ i ] -> exclude_from_classes )		96223	3					
ANR	96467	Condition	ce -> trait_precedences [ i ] -> exclude_from_classes	258:7:7327:7372	96223	0	True				
ANR	96468	PtrMemberAccess	ce -> trait_precedences [ i ] -> exclude_from_classes		96223	0					
ANR	96469	ArrayIndexing	ce -> trait_precedences [ i ]		96223	0					
ANR	96470	PtrMemberAccess	ce -> trait_precedences		96223	0					
ANR	96471	Identifier	ce		96223	0					
ANR	96472	Identifier	trait_precedences		96223	1					
ANR	96473	Identifier	i		96223	1					
ANR	96474	Identifier	exclude_from_classes		96223	1					
ANR	96475	CompoundStatement		40:4:1041:1105	96223	1					
ANR	96476	IdentifierDeclStatement	zend_uint j = 0 ;	259:4:7381:7396	96223	0	True				
ANR	96477	IdentifierDecl	j = 0		96223	0					
ANR	96478	IdentifierDeclType	zend_uint		96223	0					
ANR	96479	Identifier	j		96223	1					
ANR	96480	AssignmentExpression	j = 0		96223	2		=			
ANR	96481	Identifier	j		96223	0					
ANR	96482	PrimaryExpression	0		96223	1					
ANR	96483	IdentifierDeclStatement	zend_trait_precedence * cur_precedence = ce -> trait_precedences [ i ] ;	260:4:7402:7466	96223	1	True				
ANR	96484	IdentifierDecl	* cur_precedence = ce -> trait_precedences [ i ]		96223	0					
ANR	96485	IdentifierDeclType	zend_trait_precedence *		96223	0					
ANR	96486	Identifier	cur_precedence		96223	1					
ANR	96487	AssignmentExpression	* cur_precedence = ce -> trait_precedences [ i ]		96223	2		=			
ANR	96488	Identifier	cur_precedence		96223	0					
ANR	96489	ArrayIndexing	ce -> trait_precedences [ i ]		96223	1					
ANR	96490	PtrMemberAccess	ce -> trait_precedences		96223	0					
ANR	96491	Identifier	ce		96223	0					
ANR	96492	Identifier	trait_precedences		96223	1					
ANR	96493	Identifier	i		96223	1					
ANR	96494	WhileStatement	while ( cur_precedence -> exclude_from_classes [ j ] )		96223	2					
ANR	96495	Condition	cur_precedence -> exclude_from_classes [ j ]	261:11:7479:7517	96223	0	True				
ANR	96496	ArrayIndexing	cur_precedence -> exclude_from_classes [ j ]		96223	0					
ANR	96497	PtrMemberAccess	cur_precedence -> exclude_from_classes		96223	0					
ANR	96498	Identifier	cur_precedence		96223	0					
ANR	96499	Identifier	exclude_from_classes		96223	1					
ANR	96500	Identifier	j		96223	1					
ANR	96501	CompoundStatement		41:52:1159:1159	96223	1					
ANR	96502	ExpressionStatement	efree ( cur_precedence -> exclude_from_classes [ j ] )	262:5:7527:7573	96223	0	True				
ANR	96503	CallExpression	efree ( cur_precedence -> exclude_from_classes [ j ] )		96223	0					
ANR	96504	Callee	efree		96223	0					
ANR	96505	Identifier	efree		96223	0					
ANR	96506	ArgumentList	cur_precedence -> exclude_from_classes [ j ]		96223	1					
ANR	96507	Argument	cur_precedence -> exclude_from_classes [ j ]		96223	0					
ANR	96508	ArrayIndexing	cur_precedence -> exclude_from_classes [ j ]		96223	0					
ANR	96509	PtrMemberAccess	cur_precedence -> exclude_from_classes		96223	0					
ANR	96510	Identifier	cur_precedence		96223	0					
ANR	96511	Identifier	exclude_from_classes		96223	1					
ANR	96512	Identifier	j		96223	1					
ANR	96513	ExpressionStatement	j ++	263:5:7580:7583	96223	1	True				
ANR	96514	PostIncDecOperationExpression	j ++		96223	0					
ANR	96515	Identifier	j		96223	0					
ANR	96516	IncDec	++		96223	1					
ANR	96517	ExpressionStatement	efree ( ce -> trait_precedences [ i ] -> exclude_from_classes )	265:4:7595:7648	96223	3	True				
ANR	96518	CallExpression	efree ( ce -> trait_precedences [ i ] -> exclude_from_classes )		96223	0					
ANR	96519	Callee	efree		96223	0					
ANR	96520	Identifier	efree		96223	0					
ANR	96521	ArgumentList	ce -> trait_precedences [ i ] -> exclude_from_classes		96223	1					
ANR	96522	Argument	ce -> trait_precedences [ i ] -> exclude_from_classes		96223	0					
ANR	96523	PtrMemberAccess	ce -> trait_precedences [ i ] -> exclude_from_classes		96223	0					
ANR	96524	ArrayIndexing	ce -> trait_precedences [ i ]		96223	0					
ANR	96525	PtrMemberAccess	ce -> trait_precedences		96223	0					
ANR	96526	Identifier	ce		96223	0					
ANR	96527	Identifier	trait_precedences		96223	1					
ANR	96528	Identifier	i		96223	1					
ANR	96529	Identifier	exclude_from_classes		96223	1					
ANR	96530	ExpressionStatement	efree ( ce -> trait_precedences [ i ] )	267:3:7658:7689	96223	4	True				
ANR	96531	CallExpression	efree ( ce -> trait_precedences [ i ] )		96223	0					
ANR	96532	Callee	efree		96223	0					
ANR	96533	Identifier	efree		96223	0					
ANR	96534	ArgumentList	ce -> trait_precedences [ i ]		96223	1					
ANR	96535	Argument	ce -> trait_precedences [ i ]		96223	0					
ANR	96536	ArrayIndexing	ce -> trait_precedences [ i ]		96223	0					
ANR	96537	PtrMemberAccess	ce -> trait_precedences		96223	0					
ANR	96538	Identifier	ce		96223	0					
ANR	96539	Identifier	trait_precedences		96223	1					
ANR	96540	Identifier	i		96223	1					
ANR	96541	ExpressionStatement	i ++	268:3:7694:7697	96223	5	True				
ANR	96542	PostIncDecOperationExpression	i ++		96223	0					
ANR	96543	Identifier	i		96223	0					
ANR	96544	IncDec	++		96223	1					
ANR	96545	ExpressionStatement	efree ( ce -> trait_precedences )	270:2:7705:7733	96223	2	True				
ANR	96546	CallExpression	efree ( ce -> trait_precedences )		96223	0					
ANR	96547	Callee	efree		96223	0					
ANR	96548	Identifier	efree		96223	0					
ANR	96549	ArgumentList	ce -> trait_precedences		96223	1					
ANR	96550	Argument	ce -> trait_precedences		96223	0					
ANR	96551	PtrMemberAccess	ce -> trait_precedences		96223	0					
ANR	96552	Identifier	ce		96223	0					
ANR	96553	Identifier	trait_precedences		96223	1					
ANR	96554	ReturnType	void		96223	1					
ANR	96555	Identifier	_destroy_zend_class_traits_info		96223	2					
ANR	96556	ParameterList	zend_class_entry * ce		96223	3					
ANR	96557	Parameter	zend_class_entry * ce	220:37:6338:6357	96223	0	True				
ANR	96558	ParameterType	zend_class_entry *		96223	0					
ANR	96559	Identifier	ce		96223	1					
ANR	96560	CFGEntryNode	ENTRY		96223		True				
ANR	96561	CFGExitNode	EXIT		96223		True				
ANR	96562	Symbol	ce -> trait_aliases [ i ] -> trait_method -> class_name		96223						
ANR	96563	Symbol	ce -> trait_aliases [ i ] -> alias		96223						
ANR	96564	Symbol	* ce		96223						
ANR	96565	Symbol	* * ce		96223						
ANR	96566	Symbol	cur_precedence		96223						
ANR	96567	Symbol	ce -> trait_precedences [ i ] -> trait_method -> class_name		96223						
ANR	96568	Symbol	ce -> trait_precedences [ i ] -> exclude_from_classes		96223						
ANR	96569	Symbol	* ce -> trait_precedences		96223						
ANR	96570	Symbol	ce -> trait_aliases [ i ] -> trait_method -> method_name		96223						
ANR	96571	Symbol	* * ce -> trait_aliases		96223						
ANR	96572	Symbol	* * * ce -> trait_precedences		96223						
ANR	96573	Symbol	* cur_precedence		96223						
ANR	96574	Symbol	ce		96223						
ANR	96575	Symbol	* * i		96223						
ANR	96576	Symbol	ce -> trait_aliases		96223						
ANR	96577	Symbol	* * ce -> trait_precedences		96223						
ANR	96578	Symbol	ce -> trait_precedences [ i ] -> trait_method -> method_name		96223						
ANR	96579	Symbol	ce -> trait_precedences [ i ] -> trait_method		96223						
ANR	96580	Symbol	i		96223						
ANR	96581	Symbol	j		96223						
ANR	96582	Symbol	ce -> num_traits		96223						
ANR	96583	Symbol	* cur_precedence -> exclude_from_classes		96223						
ANR	96584	Symbol	ce -> trait_precedences		96223						
ANR	96585	Symbol	cur_precedence -> exclude_from_classes		96223						
ANR	96586	Symbol	ce -> traits		96223						
ANR	96587	Symbol	* * * * ce		96223						
ANR	96588	Symbol	* * * ce -> trait_aliases		96223						
ANR	96589	Symbol	* i		96223						
ANR	96590	Symbol	ce -> trait_aliases [ i ] -> trait_method		96223						
ANR	96591	Symbol	* ce -> trait_aliases		96223						
ANR	96592	Symbol	* j		96223						
ANR	96593	Symbol	* ce -> trait_aliases [ i ] -> trait_method		96223						
ANR	96594	Symbol	* * * i		96223						
ANR	96595	Symbol	* ce -> trait_precedences [ i ] -> trait_method		96223						
ANR	96596	Symbol	* * cur_precedence		96223						
ANR	96597	Symbol	* * * ce		96223						
ANR	96598	Function	destroy_zend_class	274:0:7741:9652							
ANR	96599	FunctionDef	destroy_zend_class (zend_class_entry * * pce)		96598	0					
ANR	96600	CompoundStatement		275:0:7798:9652	96598	0					
ANR	96601	IdentifierDeclStatement	zend_class_entry * ce = * pce ;	276:1:7801:7828	96598	0	True				
ANR	96602	IdentifierDecl	* ce = * pce		96598	0					
ANR	96603	IdentifierDeclType	zend_class_entry *		96598	0					
ANR	96604	Identifier	ce		96598	1					
ANR	96605	AssignmentExpression	* ce = * pce		96598	2		=			
ANR	96606	Identifier	ce		96598	0					
ANR	96607	UnaryOperationExpression	* pce		96598	1					
ANR	96608	UnaryOperator	*		96598	0					
ANR	96609	Identifier	pce		96598	1					
ANR	96610	IfStatement	if ( -- ce -> refcount > 0 )		96598	1					
ANR	96611	Condition	-- ce -> refcount > 0	278:5:7837:7854	96598	0	True				
ANR	96612	RelationalExpression	-- ce -> refcount > 0		96598	0		>			
ANR	96613	UnaryExpression	-- ce -> refcount		96598	0					
ANR	96614	IncDec	--		96598	0					
ANR	96615	PtrMemberAccess	ce -> refcount		96598	1					
ANR	96616	Identifier	ce		96598	0					
ANR	96617	Identifier	refcount		96598	1					
ANR	96618	PrimaryExpression	0		96598	1					
ANR	96619	CompoundStatement		4:25:58:58	96598	1					
ANR	96620	ReturnStatement	return ;	279:2:7861:7867	96598	0	True				
ANR	96621	SwitchStatement	switch ( ce -> type )		96598	2					
ANR	96622	Condition	ce -> type	281:9:7881:7888	96598	0	True				
ANR	96623	PtrMemberAccess	ce -> type		96598	0					
ANR	96624	Identifier	ce		96598	0					
ANR	96625	Identifier	type		96598	1					
ANR	96626	CompoundStatement		7:19:92:92	96598	1					
ANR	96627	Label	case ZEND_USER_CLASS :	282:2:7895:7915	96598	0	True				
ANR	96628	Identifier	ZEND_USER_CLASS		96598	0					
ANR	96629	IfStatement	if ( ce -> default_properties_table )		96598	1					
ANR	96630	Condition	ce -> default_properties_table	283:7:7924:7951	96598	0	True				
ANR	96631	PtrMemberAccess	ce -> default_properties_table		96598	0					
ANR	96632	Identifier	ce		96598	0					
ANR	96633	Identifier	default_properties_table		96598	1					
ANR	96634	CompoundStatement		10:4:161:166	96598	1					
ANR	96635	IdentifierDeclStatement	int i ;	284:4:7960:7965	96598	0	True				
ANR	96636	IdentifierDecl	i		96598	0					
ANR	96637	IdentifierDeclType	int		96598	0					
ANR	96638	Identifier	i		96598	1					
ANR	96639	ForStatement	for ( i = 0 ; i < ce -> default_properties_count ; i ++ )		96598	1					
ANR	96640	ForInit	i = 0 ;	286:9:7977:7982	96598	0	True				
ANR	96641	AssignmentExpression	i = 0		96598	0		=			
ANR	96642	Identifier	i		96598	0					
ANR	96643	PrimaryExpression	0		96598	1					
ANR	96644	Condition	i < ce -> default_properties_count	286:16:7984:8015	96598	1	True				
ANR	96645	RelationalExpression	i < ce -> default_properties_count		96598	0		<			
ANR	96646	Identifier	i		96598	0					
ANR	96647	PtrMemberAccess	ce -> default_properties_count		96598	1					
ANR	96648	Identifier	ce		96598	0					
ANR	96649	Identifier	default_properties_count		96598	1					
ANR	96650	PostIncDecOperationExpression	i ++	286:50:8018:8020	96598	2	True				
ANR	96651	Identifier	i		96598	0					
ANR	96652	IncDec	++		96598	1					
ANR	96653	CompoundStatement		12:55:224:224	96598	3					
ANR	96654	IfStatement	if ( ce -> default_properties_table [ i ] )		96598	0					
ANR	96655	Condition	ce -> default_properties_table [ i ]	287:9:8034:8064	96598	0	True				
ANR	96656	ArrayIndexing	ce -> default_properties_table [ i ]		96598	0					
ANR	96657	PtrMemberAccess	ce -> default_properties_table		96598	0					
ANR	96658	Identifier	ce		96598	0					
ANR	96659	Identifier	default_properties_table		96598	1					
ANR	96660	Identifier	i		96598	1					
ANR	96661	CompoundStatement		13:42:268:268	96598	1					
ANR	96662	ExpressionStatement	zval_ptr_dtor ( & ce -> default_properties_table [ i ] )	288:6:8075:8122	96598	0	True				
ANR	96663	CallExpression	zval_ptr_dtor ( & ce -> default_properties_table [ i ] )		96598	0					
ANR	96664	Callee	zval_ptr_dtor		96598	0					
ANR	96665	Identifier	zval_ptr_dtor		96598	0					
ANR	96666	ArgumentList	& ce -> default_properties_table [ i ]		96598	1					
ANR	96667	Argument	& ce -> default_properties_table [ i ]		96598	0					
ANR	96668	UnaryOperationExpression	& ce -> default_properties_table [ i ]		96598	0					
ANR	96669	UnaryOperator	&		96598	0					
ANR	96670	ArrayIndexing	ce -> default_properties_table [ i ]		96598	1					
ANR	96671	PtrMemberAccess	ce -> default_properties_table		96598	0					
ANR	96672	Identifier	ce		96598	0					
ANR	96673	Identifier	default_properties_table		96598	1					
ANR	96674	Identifier	i		96598	1					
ANR	96675	ExpressionStatement	efree ( ce -> default_properties_table )	291:4:8144:8179	96598	2	True				
ANR	96676	CallExpression	efree ( ce -> default_properties_table )		96598	0					
ANR	96677	Callee	efree		96598	0					
ANR	96678	Identifier	efree		96598	0					
ANR	96679	ArgumentList	ce -> default_properties_table		96598	1					
ANR	96680	Argument	ce -> default_properties_table		96598	0					
ANR	96681	PtrMemberAccess	ce -> default_properties_table		96598	0					
ANR	96682	Identifier	ce		96598	0					
ANR	96683	Identifier	default_properties_table		96598	1					
ANR	96684	IfStatement	if ( ce -> default_static_members_table )		96598	2					
ANR	96685	Condition	ce -> default_static_members_table	293:7:8193:8224	96598	0	True				
ANR	96686	PtrMemberAccess	ce -> default_static_members_table		96598	0					
ANR	96687	Identifier	ce		96598	0					
ANR	96688	Identifier	default_static_members_table		96598	1					
ANR	96689	CompoundStatement		20:4:434:439	96598	1					
ANR	96690	IdentifierDeclStatement	int i ;	294:4:8233:8238	96598	0	True				
ANR	96691	IdentifierDecl	i		96598	0					
ANR	96692	IdentifierDeclType	int		96598	0					
ANR	96693	Identifier	i		96598	1					
ANR	96694	ForStatement	for ( i = 0 ; i < ce -> default_static_members_count ; i ++ )		96598	1					
ANR	96695	ForInit	i = 0 ;	296:9:8250:8255	96598	0	True				
ANR	96696	AssignmentExpression	i = 0		96598	0		=			
ANR	96697	Identifier	i		96598	0					
ANR	96698	PrimaryExpression	0		96598	1					
ANR	96699	Condition	i < ce -> default_static_members_count	296:16:8257:8292	96598	1	True				
ANR	96700	RelationalExpression	i < ce -> default_static_members_count		96598	0		<			
ANR	96701	Identifier	i		96598	0					
ANR	96702	PtrMemberAccess	ce -> default_static_members_count		96598	1					
ANR	96703	Identifier	ce		96598	0					
ANR	96704	Identifier	default_static_members_count		96598	1					
ANR	96705	PostIncDecOperationExpression	i ++	296:54:8295:8297	96598	2	True				
ANR	96706	Identifier	i		96598	0					
ANR	96707	IncDec	++		96598	1					
ANR	96708	CompoundStatement		22:59:501:501	96598	3					
ANR	96709	IfStatement	if ( ce -> default_static_members_table [ i ] )		96598	0					
ANR	96710	Condition	ce -> default_static_members_table [ i ]	297:9:8311:8345	96598	0	True				
ANR	96711	ArrayIndexing	ce -> default_static_members_table [ i ]		96598	0					
ANR	96712	PtrMemberAccess	ce -> default_static_members_table		96598	0					
ANR	96713	Identifier	ce		96598	0					
ANR	96714	Identifier	default_static_members_table		96598	1					
ANR	96715	Identifier	i		96598	1					
ANR	96716	CompoundStatement		23:46:549:549	96598	1					
ANR	96717	ExpressionStatement	zval_ptr_dtor ( & ce -> default_static_members_table [ i ] )	298:6:8356:8407	96598	0	True				
ANR	96718	CallExpression	zval_ptr_dtor ( & ce -> default_static_members_table [ i ] )		96598	0					
ANR	96719	Callee	zval_ptr_dtor		96598	0					
ANR	96720	Identifier	zval_ptr_dtor		96598	0					
ANR	96721	ArgumentList	& ce -> default_static_members_table [ i ]		96598	1					
ANR	96722	Argument	& ce -> default_static_members_table [ i ]		96598	0					
ANR	96723	UnaryOperationExpression	& ce -> default_static_members_table [ i ]		96598	0					
ANR	96724	UnaryOperator	&		96598	0					
ANR	96725	ArrayIndexing	ce -> default_static_members_table [ i ]		96598	1					
ANR	96726	PtrMemberAccess	ce -> default_static_members_table		96598	0					
ANR	96727	Identifier	ce		96598	0					
ANR	96728	Identifier	default_static_members_table		96598	1					
ANR	96729	Identifier	i		96598	1					
ANR	96730	ExpressionStatement	efree ( ce -> default_static_members_table )	301:4:8426:8465	96598	2	True				
ANR	96731	CallExpression	efree ( ce -> default_static_members_table )		96598	0					
ANR	96732	Callee	efree		96598	0					
ANR	96733	Identifier	efree		96598	0					
ANR	96734	ArgumentList	ce -> default_static_members_table		96598	1					
ANR	96735	Argument	ce -> default_static_members_table		96598	0					
ANR	96736	PtrMemberAccess	ce -> default_static_members_table		96598	0					
ANR	96737	Identifier	ce		96598	0					
ANR	96738	Identifier	default_static_members_table		96598	1					
ANR	96739	ExpressionStatement	zend_hash_destroy ( & ce -> properties_info )	303:3:8475:8514	96598	3	True				
ANR	96740	CallExpression	zend_hash_destroy ( & ce -> properties_info )		96598	0					
ANR	96741	Callee	zend_hash_destroy		96598	0					
ANR	96742	Identifier	zend_hash_destroy		96598	0					
ANR	96743	ArgumentList	& ce -> properties_info		96598	1					
ANR	96744	Argument	& ce -> properties_info		96598	0					
ANR	96745	UnaryOperationExpression	& ce -> properties_info		96598	0					
ANR	96746	UnaryOperator	&		96598	0					
ANR	96747	PtrMemberAccess	ce -> properties_info		96598	1					
ANR	96748	Identifier	ce		96598	0					
ANR	96749	Identifier	properties_info		96598	1					
ANR	96750	ExpressionStatement	str_efree ( ce -> name )	304:3:8519:8538	96598	4	True				
ANR	96751	CallExpression	str_efree ( ce -> name )		96598	0					
ANR	96752	Callee	str_efree		96598	0					
ANR	96753	Identifier	str_efree		96598	0					
ANR	96754	ArgumentList	ce -> name		96598	1					
ANR	96755	Argument	ce -> name		96598	0					
ANR	96756	PtrMemberAccess	ce -> name		96598	0					
ANR	96757	Identifier	ce		96598	0					
ANR	96758	Identifier	name		96598	1					
ANR	96759	ExpressionStatement	zend_hash_destroy ( & ce -> function_table )	305:3:8543:8581	96598	5	True				
ANR	96760	CallExpression	zend_hash_destroy ( & ce -> function_table )		96598	0					
ANR	96761	Callee	zend_hash_destroy		96598	0					
ANR	96762	Identifier	zend_hash_destroy		96598	0					
ANR	96763	ArgumentList	& ce -> function_table		96598	1					
ANR	96764	Argument	& ce -> function_table		96598	0					
ANR	96765	UnaryOperationExpression	& ce -> function_table		96598	0					
ANR	96766	UnaryOperator	&		96598	0					
ANR	96767	PtrMemberAccess	ce -> function_table		96598	1					
ANR	96768	Identifier	ce		96598	0					
ANR	96769	Identifier	function_table		96598	1					
ANR	96770	ExpressionStatement	zend_hash_destroy ( & ce -> constants_table )	306:3:8586:8625	96598	6	True				
ANR	96771	CallExpression	zend_hash_destroy ( & ce -> constants_table )		96598	0					
ANR	96772	Callee	zend_hash_destroy		96598	0					
ANR	96773	Identifier	zend_hash_destroy		96598	0					
ANR	96774	ArgumentList	& ce -> constants_table		96598	1					
ANR	96775	Argument	& ce -> constants_table		96598	0					
ANR	96776	UnaryOperationExpression	& ce -> constants_table		96598	0					
ANR	96777	UnaryOperator	&		96598	0					
ANR	96778	PtrMemberAccess	ce -> constants_table		96598	1					
ANR	96779	Identifier	ce		96598	0					
ANR	96780	Identifier	constants_table		96598	1					
ANR	96781	IfStatement	if ( ce -> num_interfaces > 0 && ce -> interfaces )		96598	7					
ANR	96782	Condition	ce -> num_interfaces > 0 && ce -> interfaces	307:7:8634:8673	96598	0	True				
ANR	96783	AndExpression	ce -> num_interfaces > 0 && ce -> interfaces		96598	0		&&			
ANR	96784	RelationalExpression	ce -> num_interfaces > 0		96598	0		>			
ANR	96785	PtrMemberAccess	ce -> num_interfaces		96598	0					
ANR	96786	Identifier	ce		96598	0					
ANR	96787	Identifier	num_interfaces		96598	1					
ANR	96788	PrimaryExpression	0		96598	1					
ANR	96789	PtrMemberAccess	ce -> interfaces		96598	1					
ANR	96790	Identifier	ce		96598	0					
ANR	96791	Identifier	interfaces		96598	1					
ANR	96792	CompoundStatement		33:49:877:877	96598	1					
ANR	96793	ExpressionStatement	efree ( ce -> interfaces )	308:4:8682:8703	96598	0	True				
ANR	96794	CallExpression	efree ( ce -> interfaces )		96598	0					
ANR	96795	Callee	efree		96598	0					
ANR	96796	Identifier	efree		96598	0					
ANR	96797	ArgumentList	ce -> interfaces		96598	1					
ANR	96798	Argument	ce -> interfaces		96598	0					
ANR	96799	PtrMemberAccess	ce -> interfaces		96598	0					
ANR	96800	Identifier	ce		96598	0					
ANR	96801	Identifier	interfaces		96598	1					
ANR	96802	IfStatement	if ( ce -> info . user . doc_comment )		96598	8					
ANR	96803	Condition	ce -> info . user . doc_comment	310:7:8717:8741	96598	0	True				
ANR	96804	MemberAccess	ce -> info . user . doc_comment		96598	0					
ANR	96805	MemberAccess	ce -> info . user		96598	0					
ANR	96806	PtrMemberAccess	ce -> info		96598	0					
ANR	96807	Identifier	ce		96598	0					
ANR	96808	Identifier	info		96598	1					
ANR	96809	Identifier	user		96598	1					
ANR	96810	Identifier	doc_comment		96598	1					
ANR	96811	CompoundStatement		36:34:945:945	96598	1					
ANR	96812	ExpressionStatement	efree ( ( char * ) ce -> info . user . doc_comment )	311:4:8750:8789	96598	0	True				
ANR	96813	CallExpression	efree ( ( char * ) ce -> info . user . doc_comment )		96598	0					
ANR	96814	Callee	efree		96598	0					
ANR	96815	Identifier	efree		96598	0					
ANR	96816	ArgumentList	( char * ) ce -> info . user . doc_comment		96598	1					
ANR	96817	Argument	( char * ) ce -> info . user . doc_comment		96598	0					
ANR	96818	CastExpression	( char * ) ce -> info . user . doc_comment		96598	0					
ANR	96819	CastTarget	char *		96598	0					
ANR	96820	MemberAccess	ce -> info . user . doc_comment		96598	1					
ANR	96821	MemberAccess	ce -> info . user		96598	0					
ANR	96822	PtrMemberAccess	ce -> info		96598	0					
ANR	96823	Identifier	ce		96598	0					
ANR	96824	Identifier	info		96598	1					
ANR	96825	Identifier	user		96598	1					
ANR	96826	Identifier	doc_comment		96598	1					
ANR	96827	ExpressionStatement	_destroy_zend_class_traits_info ( ce )	314:3:8803:8838	96598	9	True				
ANR	96828	CallExpression	_destroy_zend_class_traits_info ( ce )		96598	0					
ANR	96829	Callee	_destroy_zend_class_traits_info		96598	0					
ANR	96830	Identifier	_destroy_zend_class_traits_info		96598	0					
ANR	96831	ArgumentList	ce		96598	1					
ANR	96832	Argument	ce		96598	0					
ANR	96833	Identifier	ce		96598	0					
ANR	96834	ExpressionStatement	efree ( ce )	316:3:8847:8856	96598	10	True				
ANR	96835	CallExpression	efree ( ce )		96598	0					
ANR	96836	Callee	efree		96598	0					
ANR	96837	Identifier	efree		96598	0					
ANR	96838	ArgumentList	ce		96598	1					
ANR	96839	Argument	ce		96598	0					
ANR	96840	Identifier	ce		96598	0					
ANR	96841	BreakStatement	break ;	317:3:8861:8866	96598	11	True				
ANR	96842	Label	case ZEND_INTERNAL_CLASS :	318:2:8870:8894	96598	12	True				
ANR	96843	Identifier	ZEND_INTERNAL_CLASS		96598	0					
ANR	96844	IfStatement	if ( ce -> default_properties_table )		96598	13					
ANR	96845	Condition	ce -> default_properties_table	319:7:8903:8930	96598	0	True				
ANR	96846	PtrMemberAccess	ce -> default_properties_table		96598	0					
ANR	96847	Identifier	ce		96598	0					
ANR	96848	Identifier	default_properties_table		96598	1					
ANR	96849	CompoundStatement		46:4:1140:1145	96598	1					
ANR	96850	IdentifierDeclStatement	int i ;	320:4:8939:8944	96598	0	True				
ANR	96851	IdentifierDecl	i		96598	0					
ANR	96852	IdentifierDeclType	int		96598	0					
ANR	96853	Identifier	i		96598	1					
ANR	96854	ForStatement	for ( i = 0 ; i < ce -> default_properties_count ; i ++ )		96598	1					
ANR	96855	ForInit	i = 0 ;	322:9:8956:8961	96598	0	True				
ANR	96856	AssignmentExpression	i = 0		96598	0		=			
ANR	96857	Identifier	i		96598	0					
ANR	96858	PrimaryExpression	0		96598	1					
ANR	96859	Condition	i < ce -> default_properties_count	322:16:8963:8994	96598	1	True				
ANR	96860	RelationalExpression	i < ce -> default_properties_count		96598	0		<			
ANR	96861	Identifier	i		96598	0					
ANR	96862	PtrMemberAccess	ce -> default_properties_count		96598	1					
ANR	96863	Identifier	ce		96598	0					
ANR	96864	Identifier	default_properties_count		96598	1					
ANR	96865	PostIncDecOperationExpression	i ++	322:50:8997:8999	96598	2	True				
ANR	96866	Identifier	i		96598	0					
ANR	96867	IncDec	++		96598	1					
ANR	96868	CompoundStatement		48:55:1203:1203	96598	3					
ANR	96869	IfStatement	if ( ce -> default_properties_table [ i ] )		96598	0					
ANR	96870	Condition	ce -> default_properties_table [ i ]	323:9:9013:9043	96598	0	True				
ANR	96871	ArrayIndexing	ce -> default_properties_table [ i ]		96598	0					
ANR	96872	PtrMemberAccess	ce -> default_properties_table		96598	0					
ANR	96873	Identifier	ce		96598	0					
ANR	96874	Identifier	default_properties_table		96598	1					
ANR	96875	Identifier	i		96598	1					
ANR	96876	CompoundStatement		49:42:1247:1247	96598	1					
ANR	96877	ExpressionStatement	zval_internal_ptr_dtor ( & ce -> default_properties_table [ i ] )	324:6:9054:9110	96598	0	True				
ANR	96878	CallExpression	zval_internal_ptr_dtor ( & ce -> default_properties_table [ i ] )		96598	0					
ANR	96879	Callee	zval_internal_ptr_dtor		96598	0					
ANR	96880	Identifier	zval_internal_ptr_dtor		96598	0					
ANR	96881	ArgumentList	& ce -> default_properties_table [ i ]		96598	1					
ANR	96882	Argument	& ce -> default_properties_table [ i ]		96598	0					
ANR	96883	UnaryOperationExpression	& ce -> default_properties_table [ i ]		96598	0					
ANR	96884	UnaryOperator	&		96598	0					
ANR	96885	ArrayIndexing	ce -> default_properties_table [ i ]		96598	1					
ANR	96886	PtrMemberAccess	ce -> default_properties_table		96598	0					
ANR	96887	Identifier	ce		96598	0					
ANR	96888	Identifier	default_properties_table		96598	1					
ANR	96889	Identifier	i		96598	1					
ANR	96890	ExpressionStatement	free ( ce -> default_properties_table )	327:4:9129:9163	96598	2	True				
ANR	96891	CallExpression	free ( ce -> default_properties_table )		96598	0					
ANR	96892	Callee	free		96598	0					
ANR	96893	Identifier	free		96598	0					
ANR	96894	ArgumentList	ce -> default_properties_table		96598	1					
ANR	96895	Argument	ce -> default_properties_table		96598	0					
ANR	96896	PtrMemberAccess	ce -> default_properties_table		96598	0					
ANR	96897	Identifier	ce		96598	0					
ANR	96898	Identifier	default_properties_table		96598	1					
ANR	96899	IfStatement	if ( ce -> default_static_members_table )		96598	14					
ANR	96900	Condition	ce -> default_static_members_table	329:7:9177:9208	96598	0	True				
ANR	96901	PtrMemberAccess	ce -> default_static_members_table		96598	0					
ANR	96902	Identifier	ce		96598	0					
ANR	96903	Identifier	default_static_members_table		96598	1					
ANR	96904	CompoundStatement		56:4:1418:1423	96598	1					
ANR	96905	IdentifierDeclStatement	int i ;	330:4:9217:9222	96598	0	True				
ANR	96906	IdentifierDecl	i		96598	0					
ANR	96907	IdentifierDeclType	int		96598	0					
ANR	96908	Identifier	i		96598	1					
ANR	96909	ForStatement	for ( i = 0 ; i < ce -> default_static_members_count ; i ++ )		96598	1					
ANR	96910	ForInit	i = 0 ;	332:9:9234:9239	96598	0	True				
ANR	96911	AssignmentExpression	i = 0		96598	0		=			
ANR	96912	Identifier	i		96598	0					
ANR	96913	PrimaryExpression	0		96598	1					
ANR	96914	Condition	i < ce -> default_static_members_count	332:16:9241:9276	96598	1	True				
ANR	96915	RelationalExpression	i < ce -> default_static_members_count		96598	0		<			
ANR	96916	Identifier	i		96598	0					
ANR	96917	PtrMemberAccess	ce -> default_static_members_count		96598	1					
ANR	96918	Identifier	ce		96598	0					
ANR	96919	Identifier	default_static_members_count		96598	1					
ANR	96920	PostIncDecOperationExpression	i ++	332:54:9279:9281	96598	2	True				
ANR	96921	Identifier	i		96598	0					
ANR	96922	IncDec	++		96598	1					
ANR	96923	CompoundStatement		58:59:1485:1485	96598	3					
ANR	96924	ExpressionStatement	zval_internal_ptr_dtor ( & ce -> default_static_members_table [ i ] )	333:5:9291:9351	96598	0	True				
ANR	96925	CallExpression	zval_internal_ptr_dtor ( & ce -> default_static_members_table [ i ] )		96598	0					
ANR	96926	Callee	zval_internal_ptr_dtor		96598	0					
ANR	96927	Identifier	zval_internal_ptr_dtor		96598	0					
ANR	96928	ArgumentList	& ce -> default_static_members_table [ i ]		96598	1					
ANR	96929	Argument	& ce -> default_static_members_table [ i ]		96598	0					
ANR	96930	UnaryOperationExpression	& ce -> default_static_members_table [ i ]		96598	0					
ANR	96931	UnaryOperator	&		96598	0					
ANR	96932	ArrayIndexing	ce -> default_static_members_table [ i ]		96598	1					
ANR	96933	PtrMemberAccess	ce -> default_static_members_table		96598	0					
ANR	96934	Identifier	ce		96598	0					
ANR	96935	Identifier	default_static_members_table		96598	1					
ANR	96936	Identifier	i		96598	1					
ANR	96937	ExpressionStatement	free ( ce -> default_static_members_table )	335:4:9363:9401	96598	2	True				
ANR	96938	CallExpression	free ( ce -> default_static_members_table )		96598	0					
ANR	96939	Callee	free		96598	0					
ANR	96940	Identifier	free		96598	0					
ANR	96941	ArgumentList	ce -> default_static_members_table		96598	1					
ANR	96942	Argument	ce -> default_static_members_table		96598	0					
ANR	96943	PtrMemberAccess	ce -> default_static_members_table		96598	0					
ANR	96944	Identifier	ce		96598	0					
ANR	96945	Identifier	default_static_members_table		96598	1					
ANR	96946	ExpressionStatement	zend_hash_destroy ( & ce -> properties_info )	337:3:9411:9450	96598	15	True				
ANR	96947	CallExpression	zend_hash_destroy ( & ce -> properties_info )		96598	0					
ANR	96948	Callee	zend_hash_destroy		96598	0					
ANR	96949	Identifier	zend_hash_destroy		96598	0					
ANR	96950	ArgumentList	& ce -> properties_info		96598	1					
ANR	96951	Argument	& ce -> properties_info		96598	0					
ANR	96952	UnaryOperationExpression	& ce -> properties_info		96598	0					
ANR	96953	UnaryOperator	&		96598	0					
ANR	96954	PtrMemberAccess	ce -> properties_info		96598	1					
ANR	96955	Identifier	ce		96598	0					
ANR	96956	Identifier	properties_info		96598	1					
ANR	96957	ExpressionStatement	str_free ( ce -> name )	338:3:9455:9473	96598	16	True				
ANR	96958	CallExpression	str_free ( ce -> name )		96598	0					
ANR	96959	Callee	str_free		96598	0					
ANR	96960	Identifier	str_free		96598	0					
ANR	96961	ArgumentList	ce -> name		96598	1					
ANR	96962	Argument	ce -> name		96598	0					
ANR	96963	PtrMemberAccess	ce -> name		96598	0					
ANR	96964	Identifier	ce		96598	0					
ANR	96965	Identifier	name		96598	1					
ANR	96966	ExpressionStatement	zend_hash_destroy ( & ce -> function_table )	339:3:9478:9516	96598	17	True				
ANR	96967	CallExpression	zend_hash_destroy ( & ce -> function_table )		96598	0					
ANR	96968	Callee	zend_hash_destroy		96598	0					
ANR	96969	Identifier	zend_hash_destroy		96598	0					
ANR	96970	ArgumentList	& ce -> function_table		96598	1					
ANR	96971	Argument	& ce -> function_table		96598	0					
ANR	96972	UnaryOperationExpression	& ce -> function_table		96598	0					
ANR	96973	UnaryOperator	&		96598	0					
ANR	96974	PtrMemberAccess	ce -> function_table		96598	1					
ANR	96975	Identifier	ce		96598	0					
ANR	96976	Identifier	function_table		96598	1					
ANR	96977	ExpressionStatement	zend_hash_destroy ( & ce -> constants_table )	340:3:9521:9560	96598	18	True				
ANR	96978	CallExpression	zend_hash_destroy ( & ce -> constants_table )		96598	0					
ANR	96979	Callee	zend_hash_destroy		96598	0					
ANR	96980	Identifier	zend_hash_destroy		96598	0					
ANR	96981	ArgumentList	& ce -> constants_table		96598	1					
ANR	96982	Argument	& ce -> constants_table		96598	0					
ANR	96983	UnaryOperationExpression	& ce -> constants_table		96598	0					
ANR	96984	UnaryOperator	&		96598	0					
ANR	96985	PtrMemberAccess	ce -> constants_table		96598	1					
ANR	96986	Identifier	ce		96598	0					
ANR	96987	Identifier	constants_table		96598	1					
ANR	96988	IfStatement	if ( ce -> num_interfaces > 0 )		96598	19					
ANR	96989	Condition	ce -> num_interfaces > 0	341:7:9569:9590	96598	0	True				
ANR	96990	RelationalExpression	ce -> num_interfaces > 0		96598	0		>			
ANR	96991	PtrMemberAccess	ce -> num_interfaces		96598	0					
ANR	96992	Identifier	ce		96598	0					
ANR	96993	Identifier	num_interfaces		96598	1					
ANR	96994	PrimaryExpression	0		96598	1					
ANR	96995	CompoundStatement		67:31:1794:1794	96598	1					
ANR	96996	ExpressionStatement	free ( ce -> interfaces )	342:4:9599:9619	96598	0	True				
ANR	96997	CallExpression	free ( ce -> interfaces )		96598	0					
ANR	96998	Callee	free		96598	0					
ANR	96999	Identifier	free		96598	0					
ANR	97000	ArgumentList	ce -> interfaces		96598	1					
ANR	97001	Argument	ce -> interfaces		96598	0					
ANR	97002	PtrMemberAccess	ce -> interfaces		96598	0					
ANR	97003	Identifier	ce		96598	0					
ANR	97004	Identifier	interfaces		96598	1					
ANR	97005	ExpressionStatement	free ( ce )	344:3:9629:9637	96598	20	True				
ANR	97006	CallExpression	free ( ce )		96598	0					
ANR	97007	Callee	free		96598	0					
ANR	97008	Identifier	free		96598	0					
ANR	97009	ArgumentList	ce		96598	1					
ANR	97010	Argument	ce		96598	0					
ANR	97011	Identifier	ce		96598	0					
ANR	97012	BreakStatement	break ;	345:3:9642:9647	96598	21	True				
ANR	97013	ReturnType	ZEND_API void		96598	1					
ANR	97014	Identifier	destroy_zend_class		96598	2					
ANR	97015	ParameterList	zend_class_entry * * pce		96598	3					
ANR	97016	Parameter	zend_class_entry * * pce	274:33:7774:7795	96598	0	True				
ANR	97017	ParameterType	zend_class_entry * *		96598	0					
ANR	97018	Identifier	pce		96598	1					
ANR	97019	CFGEntryNode	ENTRY		96598		True				
ANR	97020	CFGExitNode	EXIT		96598		True				
ANR	97021	Symbol	ce -> type		96598						
ANR	97022	Symbol	ce		96598						
ANR	97023	Symbol	ce -> default_properties_count		96598						
ANR	97024	Symbol	ce -> default_static_members_count		96598						
ANR	97025	Symbol	ce -> interfaces		96598						
ANR	97026	Symbol	ce -> info . user		96598						
ANR	97027	Symbol	ce -> default_properties_table		96598						
ANR	97028	Symbol	i		96598						
ANR	97029	Symbol	& ce -> function_table		96598						
ANR	97030	Symbol	* ce		96598						
ANR	97031	Symbol	ce -> refcount		96598						
ANR	97032	Symbol	* * ce		96598						
ANR	97033	Symbol	ce -> default_static_members_table		96598						
ANR	97034	Symbol	& ce -> constants_table		96598						
ANR	97035	Symbol	ce -> info . user . doc_comment		96598						
ANR	97036	Symbol	pce		96598						
ANR	97037	Symbol	* i		96598						
ANR	97038	Symbol	ce -> num_interfaces		96598						
ANR	97039	Symbol	& ce -> properties_info		96598						
ANR	97040	Symbol	ce -> info		96598						
ANR	97041	Symbol	* ce -> default_properties_table		96598						
ANR	97042	Symbol	ce -> name		96598						
ANR	97043	Symbol	* pce		96598						
ANR	97044	Symbol	* ce -> default_static_members_table		96598						
ANR	97045	Function	zend_class_add_ref	349:0:9655:9724							
ANR	97046	FunctionDef	zend_class_add_ref (zend_class_entry * * ce)		97045	0					
ANR	97047	CompoundStatement		350:0:9702:9724	97045	0					
ANR	97048	ExpressionStatement	( * ce ) -> refcount ++	351:1:9705:9722	97045	0	True				
ANR	97049	PostIncDecOperationExpression	( * ce ) -> refcount ++		97045	0					
ANR	97050	PtrMemberAccess	( * ce ) -> refcount		97045	0					
ANR	97051	UnaryOperationExpression	* ce		97045	0					
ANR	97052	UnaryOperator	*		97045	0					
ANR	97053	Identifier	ce		97045	1					
ANR	97054	Identifier	refcount		97045	1					
ANR	97055	IncDec	++		97045	1					
ANR	97056	ReturnType	void		97045	1					
ANR	97057	Identifier	zend_class_add_ref		97045	2					
ANR	97058	ParameterList	zend_class_entry * * ce		97045	3					
ANR	97059	Parameter	zend_class_entry * * ce	349:24:9679:9699	97045	0	True				
ANR	97060	ParameterType	zend_class_entry * *		97045	0					
ANR	97061	Identifier	ce		97045	1					
ANR	97062	CFGEntryNode	ENTRY		97045		True				
ANR	97063	CFGExitNode	EXIT		97045		True				
ANR	97064	Symbol	ce		97045						
ANR	97065	Symbol	( * ce ) -> refcount		97045						
ANR	97066	Symbol	* ce		97045						
ANR	97067	Symbol	* * ce		97045						
ANR	97068	DeclStmt									
ANR	97069	Decl							zend_literal	zend_literal *	literal
ANR	97070	DeclStmt									
ANR	97071	Decl							zend_literal	zend_literal *	end
ANR	97072	DeclStmt									
ANR	97073	Decl							zend_uint	zend_uint	i
ANR	97074	DeclStmt									
ANR	97075	Decl							zend_uint	zend_uint	next_op_num
ANR	97076	DeclStmt									
ANR	97077	Decl							zend_op	zend_op *	next_op
ANR	97078	Function	get_next_op_number	450:0:11947:12021							
ANR	97079	FunctionDef	get_next_op_number (zend_op_array * op_array)		97078	0					
ANR	97080	CompoundStatement		451:0:11995:12021	97078	0					
ANR	97081	ReturnStatement	return op_array -> last ;	452:1:11998:12019	97078	0	True				
ANR	97082	PtrMemberAccess	op_array -> last		97078	0					
ANR	97083	Identifier	op_array		97078	0					
ANR	97084	Identifier	last		97078	1					
ANR	97085	ReturnType	int		97078	1					
ANR	97086	Identifier	get_next_op_number		97078	2					
ANR	97087	ParameterList	zend_op_array * op_array		97078	3					
ANR	97088	Parameter	zend_op_array * op_array	450:23:11970:11992	97078	0	True				
ANR	97089	ParameterType	zend_op_array *		97078	0					
ANR	97090	Identifier	op_array		97078	1					
ANR	97091	CFGEntryNode	ENTRY		97078		True				
ANR	97092	CFGExitNode	EXIT		97078		True				
ANR	97093	Symbol	op_array -> last		97078						
ANR	97094	Symbol	op_array		97078						
ANR	97095	Symbol	* op_array		97078						
ANR	97096	Function	get_next_brk_cont_element	455:0:12024:12309							
ANR	97097	FunctionDef	get_next_brk_cont_element (zend_op_array * op_array)		97096	0					
ANR	97098	CompoundStatement		456:0:12098:12309	97096	0					
ANR	97099	ExpressionStatement	op_array -> last_brk_cont ++	457:1:12101:12126	97096	0	True				
ANR	97100	PostIncDecOperationExpression	op_array -> last_brk_cont ++		97096	0					
ANR	97101	PtrMemberAccess	op_array -> last_brk_cont		97096	0					
ANR	97102	Identifier	op_array		97096	0					
ANR	97103	Identifier	last_brk_cont		97096	1					
ANR	97104	IncDec	++		97096	1					
ANR	97105	ExpressionStatement	"op_array -> brk_cont_array = erealloc ( op_array -> brk_cont_array , sizeof ( zend_brk_cont_element ) * op_array -> last_brk_cont )"	458:1:12129:12245	97096	1	True				
ANR	97106	AssignmentExpression	"op_array -> brk_cont_array = erealloc ( op_array -> brk_cont_array , sizeof ( zend_brk_cont_element ) * op_array -> last_brk_cont )"		97096	0		=			
ANR	97107	PtrMemberAccess	op_array -> brk_cont_array		97096	0					
ANR	97108	Identifier	op_array		97096	0					
ANR	97109	Identifier	brk_cont_array		97096	1					
ANR	97110	CallExpression	"erealloc ( op_array -> brk_cont_array , sizeof ( zend_brk_cont_element ) * op_array -> last_brk_cont )"		97096	1					
ANR	97111	Callee	erealloc		97096	0					
ANR	97112	Identifier	erealloc		97096	0					
ANR	97113	ArgumentList	op_array -> brk_cont_array		97096	1					
ANR	97114	Argument	op_array -> brk_cont_array		97096	0					
ANR	97115	PtrMemberAccess	op_array -> brk_cont_array		97096	0					
ANR	97116	Identifier	op_array		97096	0					
ANR	97117	Identifier	brk_cont_array		97096	1					
ANR	97118	Argument	sizeof ( zend_brk_cont_element ) * op_array -> last_brk_cont		97096	1					
ANR	97119	MultiplicativeExpression	sizeof ( zend_brk_cont_element ) * op_array -> last_brk_cont		97096	0		*			
ANR	97120	SizeofExpression	sizeof ( zend_brk_cont_element )		97096	0					
ANR	97121	Sizeof	sizeof		97096	0					
ANR	97122	SizeofOperand	zend_brk_cont_element		97096	1					
ANR	97123	PtrMemberAccess	op_array -> last_brk_cont		97096	1					
ANR	97124	Identifier	op_array		97096	0					
ANR	97125	Identifier	last_brk_cont		97096	1					
ANR	97126	ReturnStatement	return & op_array -> brk_cont_array [ op_array -> last_brk_cont - 1 ] ;	459:1:12248:12307	97096	2	True				
ANR	97127	UnaryOperationExpression	& op_array -> brk_cont_array [ op_array -> last_brk_cont - 1 ]		97096	0					
ANR	97128	UnaryOperator	&		97096	0					
ANR	97129	ArrayIndexing	op_array -> brk_cont_array [ op_array -> last_brk_cont - 1 ]		97096	1					
ANR	97130	PtrMemberAccess	op_array -> brk_cont_array		97096	0					
ANR	97131	Identifier	op_array		97096	0					
ANR	97132	Identifier	brk_cont_array		97096	1					
ANR	97133	AdditiveExpression	op_array -> last_brk_cont - 1		97096	1		-			
ANR	97134	PtrMemberAccess	op_array -> last_brk_cont		97096	0					
ANR	97135	Identifier	op_array		97096	0					
ANR	97136	Identifier	last_brk_cont		97096	1					
ANR	97137	PrimaryExpression	1		97096	1					
ANR	97138	ReturnType	zend_brk_cont_element *		97096	1					
ANR	97139	Identifier	get_next_brk_cont_element		97096	2					
ANR	97140	ParameterList	zend_op_array * op_array		97096	3					
ANR	97141	Parameter	zend_op_array * op_array	455:49:12073:12095	97096	0	True				
ANR	97142	ParameterType	zend_op_array *		97096	0					
ANR	97143	Identifier	op_array		97096	1					
ANR	97144	CFGEntryNode	ENTRY		97096		True				
ANR	97145	CFGExitNode	EXIT		97096		True				
ANR	97146	Symbol	op_array -> brk_cont_array		97096						
ANR	97147	Symbol	erealloc		97096						
ANR	97148	Symbol	op_array		97096						
ANR	97149	Symbol	* op_array		97096						
ANR	97150	Symbol	op_array -> last_brk_cont		97096						
ANR	97151	DeclStmt									
ANR	97152	Decl							zend_op	zend_op *	opline
ANR	97153	Decl							zend_op	zend_op *	end
ANR	97154	Function	zend_check_finally_breakout	492:0:12988:14066							
ANR	97155	FunctionDef	"zend_check_finally_breakout (zend_op_array * op_array , zend_uint op_num , zend_uint dst_num TSRMLS_DC)"		97154	0					
ANR	97156	CompoundStatement		493:0:13100:14066	97154	0					
ANR	97157	IdentifierDeclStatement	zend_uint i ;	494:1:13103:13114	97154	0	True				
ANR	97158	IdentifierDecl	i		97154	0					
ANR	97159	IdentifierDeclType	zend_uint		97154	0					
ANR	97160	Identifier	i		97154	1					
ANR	97161	ForStatement	for ( i = 0 ; i < op_array -> last_try_catch ; i ++ )		97154	1					
ANR	97162	ForInit	i = 0 ;	496:6:13123:13128	97154	0	True				
ANR	97163	AssignmentExpression	i = 0		97154	0		=			
ANR	97164	Identifier	i		97154	0					
ANR	97165	PrimaryExpression	0		97154	1					
ANR	97166	Condition	i < op_array -> last_try_catch	496:13:13130:13157	97154	1	True				
ANR	97167	RelationalExpression	i < op_array -> last_try_catch		97154	0		<			
ANR	97168	Identifier	i		97154	0					
ANR	97169	PtrMemberAccess	op_array -> last_try_catch		97154	1					
ANR	97170	Identifier	op_array		97154	0					
ANR	97171	Identifier	last_try_catch		97154	1					
ANR	97172	PostIncDecOperationExpression	i ++	496:43:13160:13162	97154	2	True				
ANR	97173	Identifier	i		97154	0					
ANR	97174	IncDec	++		97154	1					
ANR	97175	CompoundStatement		4:48:64:64	97154	3					
ANR	97176	IfStatement	if ( ( op_num < op_array -> try_catch_array [ i ] . finally_op || op_num >= op_array -> try_catch_array [ i ] . finally_end ) && ( dst_num >= op_array -> try_catch_array [ i ] . finally_op && dst_num <= op_array -> try_catch_array [ i ] . finally_end ) )		97154	0					
ANR	97177	Condition	( op_num < op_array -> try_catch_array [ i ] . finally_op || op_num >= op_array -> try_catch_array [ i ] . finally_end ) && ( dst_num >= op_array -> try_catch_array [ i ] . finally_op && dst_num <= op_array -> try_catch_array [ i ] . finally_end )	497:6:13173:13402	97154	0	True				
ANR	97178	AndExpression	( op_num < op_array -> try_catch_array [ i ] . finally_op || op_num >= op_array -> try_catch_array [ i ] . finally_end ) && ( dst_num >= op_array -> try_catch_array [ i ] . finally_op && dst_num <= op_array -> try_catch_array [ i ] . finally_end )		97154	0		&&			
ANR	97179	OrExpression	op_num < op_array -> try_catch_array [ i ] . finally_op || op_num >= op_array -> try_catch_array [ i ] . finally_end		97154	0		||			
ANR	97180	RelationalExpression	op_num < op_array -> try_catch_array [ i ] . finally_op		97154	0		<			
ANR	97181	Identifier	op_num		97154	0					
ANR	97182	MemberAccess	op_array -> try_catch_array [ i ] . finally_op		97154	1					
ANR	97183	ArrayIndexing	op_array -> try_catch_array [ i ]		97154	0					
ANR	97184	PtrMemberAccess	op_array -> try_catch_array		97154	0					
ANR	97185	Identifier	op_array		97154	0					
ANR	97186	Identifier	try_catch_array		97154	1					
ANR	97187	Identifier	i		97154	1					
ANR	97188	Identifier	finally_op		97154	1					
ANR	97189	RelationalExpression	op_num >= op_array -> try_catch_array [ i ] . finally_end		97154	1		>=			
ANR	97190	Identifier	op_num		97154	0					
ANR	97191	MemberAccess	op_array -> try_catch_array [ i ] . finally_end		97154	1					
ANR	97192	ArrayIndexing	op_array -> try_catch_array [ i ]		97154	0					
ANR	97193	PtrMemberAccess	op_array -> try_catch_array		97154	0					
ANR	97194	Identifier	op_array		97154	0					
ANR	97195	Identifier	try_catch_array		97154	1					
ANR	97196	Identifier	i		97154	1					
ANR	97197	Identifier	finally_end		97154	1					
ANR	97198	AndExpression	dst_num >= op_array -> try_catch_array [ i ] . finally_op && dst_num <= op_array -> try_catch_array [ i ] . finally_end		97154	1		&&			
ANR	97199	RelationalExpression	dst_num >= op_array -> try_catch_array [ i ] . finally_op		97154	0		>=			
ANR	97200	Identifier	dst_num		97154	0					
ANR	97201	MemberAccess	op_array -> try_catch_array [ i ] . finally_op		97154	1					
ANR	97202	ArrayIndexing	op_array -> try_catch_array [ i ]		97154	0					
ANR	97203	PtrMemberAccess	op_array -> try_catch_array		97154	0					
ANR	97204	Identifier	op_array		97154	0					
ANR	97205	Identifier	try_catch_array		97154	1					
ANR	97206	Identifier	i		97154	1					
ANR	97207	Identifier	finally_op		97154	1					
ANR	97208	RelationalExpression	dst_num <= op_array -> try_catch_array [ i ] . finally_end		97154	1		<=			
ANR	97209	Identifier	dst_num		97154	0					
ANR	97210	MemberAccess	op_array -> try_catch_array [ i ] . finally_end		97154	1					
ANR	97211	ArrayIndexing	op_array -> try_catch_array [ i ]		97154	0					
ANR	97212	PtrMemberAccess	op_array -> try_catch_array		97154	0					
ANR	97213	Identifier	op_array		97154	0					
ANR	97214	Identifier	try_catch_array		97154	1					
ANR	97215	Identifier	i		97154	1					
ANR	97216	Identifier	finally_end		97154	1					
ANR	97217	CompoundStatement		8:60:304:304	97154	1					
ANR	97218	ExpressionStatement	CG ( in_compilation ) = 1	501:3:13410:13432	97154	0	True				
ANR	97219	AssignmentExpression	CG ( in_compilation ) = 1		97154	0		=			
ANR	97220	CallExpression	CG ( in_compilation )		97154	0					
ANR	97221	Callee	CG		97154	0					
ANR	97222	Identifier	CG		97154	0					
ANR	97223	ArgumentList	in_compilation		97154	1					
ANR	97224	Argument	in_compilation		97154	0					
ANR	97225	Identifier	in_compilation		97154	0					
ANR	97226	PrimaryExpression	1		97154	1					
ANR	97227	ExpressionStatement	CG ( active_op_array ) = op_array	502:3:13437:13467	97154	1	True				
ANR	97228	AssignmentExpression	CG ( active_op_array ) = op_array		97154	0		=			
ANR	97229	CallExpression	CG ( active_op_array )		97154	0					
ANR	97230	Callee	CG		97154	0					
ANR	97231	Identifier	CG		97154	0					
ANR	97232	ArgumentList	active_op_array		97154	1					
ANR	97233	Argument	active_op_array		97154	0					
ANR	97234	Identifier	active_op_array		97154	0					
ANR	97235	Identifier	op_array		97154	1					
ANR	97236	ExpressionStatement	CG ( zend_lineno ) = op_array -> opcodes [ op_num ] . lineno	503:3:13472:13522	97154	2	True				
ANR	97237	AssignmentExpression	CG ( zend_lineno ) = op_array -> opcodes [ op_num ] . lineno		97154	0		=			
ANR	97238	CallExpression	CG ( zend_lineno )		97154	0					
ANR	97239	Callee	CG		97154	0					
ANR	97240	Identifier	CG		97154	0					
ANR	97241	ArgumentList	zend_lineno		97154	1					
ANR	97242	Argument	zend_lineno		97154	0					
ANR	97243	Identifier	zend_lineno		97154	0					
ANR	97244	MemberAccess	op_array -> opcodes [ op_num ] . lineno		97154	1					
ANR	97245	ArrayIndexing	op_array -> opcodes [ op_num ]		97154	0					
ANR	97246	PtrMemberAccess	op_array -> opcodes		97154	0					
ANR	97247	Identifier	op_array		97154	0					
ANR	97248	Identifier	opcodes		97154	1					
ANR	97249	Identifier	op_num		97154	1					
ANR	97250	Identifier	lineno		97154	1					
ANR	97251	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""jump into a finally block is disallowed"" )"	504:3:13527:13606	97154	3	True				
ANR	97252	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""jump into a finally block is disallowed"" )"		97154	0					
ANR	97253	Callee	zend_error_noreturn		97154	0					
ANR	97254	Identifier	zend_error_noreturn		97154	0					
ANR	97255	ArgumentList	E_COMPILE_ERROR		97154	1					
ANR	97256	Argument	E_COMPILE_ERROR		97154	0					
ANR	97257	Identifier	E_COMPILE_ERROR		97154	0					
ANR	97258	Argument	"""jump into a finally block is disallowed"""		97154	1					
ANR	97259	PrimaryExpression	"""jump into a finally block is disallowed"""		97154	0					
ANR	97260	ElseStatement	else		97154	0					
ANR	97261	IfStatement	if ( ( op_num >= op_array -> try_catch_array [ i ] . finally_op && op_num <= op_array -> try_catch_array [ i ] . finally_end ) && ( dst_num > op_array -> try_catch_array [ i ] . finally_end || dst_num < op_array -> try_catch_array [ i ] . finally_op ) )		97154	0					
ANR	97262	Condition	( op_num >= op_array -> try_catch_array [ i ] . finally_op && op_num <= op_array -> try_catch_array [ i ] . finally_end ) && ( dst_num > op_array -> try_catch_array [ i ] . finally_end || dst_num < op_array -> try_catch_array [ i ] . finally_op )	505:13:13621:13850	97154	0	True				
ANR	97263	AndExpression	( op_num >= op_array -> try_catch_array [ i ] . finally_op && op_num <= op_array -> try_catch_array [ i ] . finally_end ) && ( dst_num > op_array -> try_catch_array [ i ] . finally_end || dst_num < op_array -> try_catch_array [ i ] . finally_op )		97154	0		&&			
ANR	97264	AndExpression	op_num >= op_array -> try_catch_array [ i ] . finally_op && op_num <= op_array -> try_catch_array [ i ] . finally_end		97154	0		&&			
ANR	97265	RelationalExpression	op_num >= op_array -> try_catch_array [ i ] . finally_op		97154	0		>=			
ANR	97266	Identifier	op_num		97154	0					
ANR	97267	MemberAccess	op_array -> try_catch_array [ i ] . finally_op		97154	1					
ANR	97268	ArrayIndexing	op_array -> try_catch_array [ i ]		97154	0					
ANR	97269	PtrMemberAccess	op_array -> try_catch_array		97154	0					
ANR	97270	Identifier	op_array		97154	0					
ANR	97271	Identifier	try_catch_array		97154	1					
ANR	97272	Identifier	i		97154	1					
ANR	97273	Identifier	finally_op		97154	1					
ANR	97274	RelationalExpression	op_num <= op_array -> try_catch_array [ i ] . finally_end		97154	1		<=			
ANR	97275	Identifier	op_num		97154	0					
ANR	97276	MemberAccess	op_array -> try_catch_array [ i ] . finally_end		97154	1					
ANR	97277	ArrayIndexing	op_array -> try_catch_array [ i ]		97154	0					
ANR	97278	PtrMemberAccess	op_array -> try_catch_array		97154	0					
ANR	97279	Identifier	op_array		97154	0					
ANR	97280	Identifier	try_catch_array		97154	1					
ANR	97281	Identifier	i		97154	1					
ANR	97282	Identifier	finally_end		97154	1					
ANR	97283	OrExpression	dst_num > op_array -> try_catch_array [ i ] . finally_end || dst_num < op_array -> try_catch_array [ i ] . finally_op		97154	1		||			
ANR	97284	RelationalExpression	dst_num > op_array -> try_catch_array [ i ] . finally_end		97154	0		>			
ANR	97285	Identifier	dst_num		97154	0					
ANR	97286	MemberAccess	op_array -> try_catch_array [ i ] . finally_end		97154	1					
ANR	97287	ArrayIndexing	op_array -> try_catch_array [ i ]		97154	0					
ANR	97288	PtrMemberAccess	op_array -> try_catch_array		97154	0					
ANR	97289	Identifier	op_array		97154	0					
ANR	97290	Identifier	try_catch_array		97154	1					
ANR	97291	Identifier	i		97154	1					
ANR	97292	Identifier	finally_end		97154	1					
ANR	97293	RelationalExpression	dst_num < op_array -> try_catch_array [ i ] . finally_op		97154	1		<			
ANR	97294	Identifier	dst_num		97154	0					
ANR	97295	MemberAccess	op_array -> try_catch_array [ i ] . finally_op		97154	1					
ANR	97296	ArrayIndexing	op_array -> try_catch_array [ i ]		97154	0					
ANR	97297	PtrMemberAccess	op_array -> try_catch_array		97154	0					
ANR	97298	Identifier	op_array		97154	0					
ANR	97299	Identifier	try_catch_array		97154	1					
ANR	97300	Identifier	i		97154	1					
ANR	97301	Identifier	finally_op		97154	1					
ANR	97302	CompoundStatement		16:60:752:752	97154	1					
ANR	97303	ExpressionStatement	CG ( in_compilation ) = 1	509:3:13858:13880	97154	0	True				
ANR	97304	AssignmentExpression	CG ( in_compilation ) = 1		97154	0		=			
ANR	97305	CallExpression	CG ( in_compilation )		97154	0					
ANR	97306	Callee	CG		97154	0					
ANR	97307	Identifier	CG		97154	0					
ANR	97308	ArgumentList	in_compilation		97154	1					
ANR	97309	Argument	in_compilation		97154	0					
ANR	97310	Identifier	in_compilation		97154	0					
ANR	97311	PrimaryExpression	1		97154	1					
ANR	97312	ExpressionStatement	CG ( active_op_array ) = op_array	510:3:13885:13915	97154	1	True				
ANR	97313	AssignmentExpression	CG ( active_op_array ) = op_array		97154	0		=			
ANR	97314	CallExpression	CG ( active_op_array )		97154	0					
ANR	97315	Callee	CG		97154	0					
ANR	97316	Identifier	CG		97154	0					
ANR	97317	ArgumentList	active_op_array		97154	1					
ANR	97318	Argument	active_op_array		97154	0					
ANR	97319	Identifier	active_op_array		97154	0					
ANR	97320	Identifier	op_array		97154	1					
ANR	97321	ExpressionStatement	CG ( zend_lineno ) = op_array -> opcodes [ op_num ] . lineno	511:3:13920:13970	97154	2	True				
ANR	97322	AssignmentExpression	CG ( zend_lineno ) = op_array -> opcodes [ op_num ] . lineno		97154	0		=			
ANR	97323	CallExpression	CG ( zend_lineno )		97154	0					
ANR	97324	Callee	CG		97154	0					
ANR	97325	Identifier	CG		97154	0					
ANR	97326	ArgumentList	zend_lineno		97154	1					
ANR	97327	Argument	zend_lineno		97154	0					
ANR	97328	Identifier	zend_lineno		97154	0					
ANR	97329	MemberAccess	op_array -> opcodes [ op_num ] . lineno		97154	1					
ANR	97330	ArrayIndexing	op_array -> opcodes [ op_num ]		97154	0					
ANR	97331	PtrMemberAccess	op_array -> opcodes		97154	0					
ANR	97332	Identifier	op_array		97154	0					
ANR	97333	Identifier	opcodes		97154	1					
ANR	97334	Identifier	op_num		97154	1					
ANR	97335	Identifier	lineno		97154	1					
ANR	97336	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""jump out of a finally block is disallowed"" )"	512:3:13975:14056	97154	3	True				
ANR	97337	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""jump out of a finally block is disallowed"" )"		97154	0					
ANR	97338	Callee	zend_error_noreturn		97154	0					
ANR	97339	Identifier	zend_error_noreturn		97154	0					
ANR	97340	ArgumentList	E_COMPILE_ERROR		97154	1					
ANR	97341	Argument	E_COMPILE_ERROR		97154	0					
ANR	97342	Identifier	E_COMPILE_ERROR		97154	0					
ANR	97343	Argument	"""jump out of a finally block is disallowed"""		97154	1					
ANR	97344	PrimaryExpression	"""jump out of a finally block is disallowed"""		97154	0					
ANR	97345	ReturnType	static void		97154	1					
ANR	97346	Identifier	zend_check_finally_breakout		97154	2					
ANR	97347	ParameterList	"zend_op_array * op_array , zend_uint op_num , zend_uint dst_num TSRMLS_DC"		97154	3					
ANR	97348	Parameter	zend_op_array * op_array	492:40:13028:13050	97154	0	True				
ANR	97349	ParameterType	zend_op_array *		97154	0					
ANR	97350	Identifier	op_array		97154	1					
ANR	97351	Parameter	zend_uint op_num	492:65:13053:13068	97154	1	True				
ANR	97352	ParameterType	zend_uint		97154	0					
ANR	97353	Identifier	op_num		97154	1					
ANR	97354	Parameter	zend_uint dst_num TSRMLS_DC	492:83:13071:13097	97154	2	True				
ANR	97355	ParameterType	zend_uint dst_num		97154	0					
ANR	97356	Identifier	TSRMLS_DC		97154	1					
ANR	97357	CFGEntryNode	ENTRY		97154		True				
ANR	97358	CFGExitNode	EXIT		97154		True				
ANR	97359	Symbol	CG		97154						
ANR	97360	Symbol	active_op_array		97154						
ANR	97361	Symbol	* op_num		97154						
ANR	97362	Symbol	E_COMPILE_ERROR		97154						
ANR	97363	Symbol	op_num		97154						
ANR	97364	Symbol	i		97154						
ANR	97365	Symbol	* op_array -> try_catch_array		97154						
ANR	97366	Symbol	op_array -> opcodes [ op_num ] . lineno		97154						
ANR	97367	Symbol	TSRMLS_DC		97154						
ANR	97368	Symbol	* op_array		97154						
ANR	97369	Symbol	in_compilation		97154						
ANR	97370	Symbol	op_array -> last_try_catch		97154						
ANR	97371	Symbol	op_array -> try_catch_array [ i ] . finally_op		97154						
ANR	97372	Symbol	* i		97154						
ANR	97373	Symbol	op_array -> opcodes		97154						
ANR	97374	Symbol	dst_num		97154						
ANR	97375	Symbol	zend_lineno		97154						
ANR	97376	Symbol	op_array -> try_catch_array [ i ] . finally_end		97154						
ANR	97377	Symbol	op_array -> try_catch_array		97154						
ANR	97378	Symbol	* * op_array		97154						
ANR	97379	Symbol	op_array		97154						
ANR	97380	Symbol	* op_array -> opcodes		97154						
ANR	97381	Function	zend_adjust_fast_call	517:0:14069:14759							
ANR	97382	FunctionDef	"zend_adjust_fast_call (zend_op_array * op_array , zend_uint fast_call , zend_uint start , zend_uint end TSRMLS_DC)"		97381	0					
ANR	97383	CompoundStatement		518:0:14191:14759	97381	0					
ANR	97384	IdentifierDeclStatement	int i ;	519:1:14194:14199	97381	0	True				
ANR	97385	IdentifierDecl	i		97381	0					
ANR	97386	IdentifierDeclType	int		97381	0					
ANR	97387	Identifier	i		97381	1					
ANR	97388	IdentifierDeclStatement	zend_uint op_num = 0 ;	520:1:14202:14222	97381	1	True				
ANR	97389	IdentifierDecl	op_num = 0		97381	0					
ANR	97390	IdentifierDeclType	zend_uint		97381	0					
ANR	97391	Identifier	op_num		97381	1					
ANR	97392	AssignmentExpression	op_num = 0		97381	2		=			
ANR	97393	Identifier	op_num		97381	0					
ANR	97394	PrimaryExpression	0		97381	1					
ANR	97395	ForStatement	for ( i = 0 ; i < op_array -> last_try_catch ; i ++ )		97381	2					
ANR	97396	ForInit	i = 0 ;	522:6:14231:14236	97381	0	True				
ANR	97397	AssignmentExpression	i = 0		97381	0		=			
ANR	97398	Identifier	i		97381	0					
ANR	97399	PrimaryExpression	0		97381	1					
ANR	97400	Condition	i < op_array -> last_try_catch	522:13:14238:14265	97381	1	True				
ANR	97401	RelationalExpression	i < op_array -> last_try_catch		97381	0		<			
ANR	97402	Identifier	i		97381	0					
ANR	97403	PtrMemberAccess	op_array -> last_try_catch		97381	1					
ANR	97404	Identifier	op_array		97381	0					
ANR	97405	Identifier	last_try_catch		97381	1					
ANR	97406	PostIncDecOperationExpression	i ++	522:43:14268:14270	97381	2	True				
ANR	97407	Identifier	i		97381	0					
ANR	97408	IncDec	++		97381	1					
ANR	97409	CompoundStatement		5:48:81:81	97381	3					
ANR	97410	IfStatement	if ( op_array -> try_catch_array [ i ] . finally_op > start && op_array -> try_catch_array [ i ] . finally_end < end )		97381	0					
ANR	97411	Condition	op_array -> try_catch_array [ i ] . finally_op > start && op_array -> try_catch_array [ i ] . finally_end < end	523:6:14281:14382	97381	0	True				
ANR	97412	AndExpression	op_array -> try_catch_array [ i ] . finally_op > start && op_array -> try_catch_array [ i ] . finally_end < end		97381	0		&&			
ANR	97413	RelationalExpression	op_array -> try_catch_array [ i ] . finally_op > start		97381	0		>			
ANR	97414	MemberAccess	op_array -> try_catch_array [ i ] . finally_op		97381	0					
ANR	97415	ArrayIndexing	op_array -> try_catch_array [ i ]		97381	0					
ANR	97416	PtrMemberAccess	op_array -> try_catch_array		97381	0					
ANR	97417	Identifier	op_array		97381	0					
ANR	97418	Identifier	try_catch_array		97381	1					
ANR	97419	Identifier	i		97381	1					
ANR	97420	Identifier	finally_op		97381	1					
ANR	97421	Identifier	start		97381	1					
ANR	97422	RelationalExpression	op_array -> try_catch_array [ i ] . finally_end < end		97381	1		<			
ANR	97423	MemberAccess	op_array -> try_catch_array [ i ] . finally_end		97381	0					
ANR	97424	ArrayIndexing	op_array -> try_catch_array [ i ]		97381	0					
ANR	97425	PtrMemberAccess	op_array -> try_catch_array		97381	0					
ANR	97426	Identifier	op_array		97381	0					
ANR	97427	Identifier	try_catch_array		97381	1					
ANR	97428	Identifier	i		97381	1					
ANR	97429	Identifier	finally_end		97381	1					
ANR	97430	Identifier	end		97381	1					
ANR	97431	CompoundStatement		7:55:193:193	97381	1					
ANR	97432	ExpressionStatement	op_num = op_array -> try_catch_array [ i ] . finally_op	525:3:14390:14438	97381	0	True				
ANR	97433	AssignmentExpression	op_num = op_array -> try_catch_array [ i ] . finally_op		97381	0		=			
ANR	97434	Identifier	op_num		97381	0					
ANR	97435	MemberAccess	op_array -> try_catch_array [ i ] . finally_op		97381	1					
ANR	97436	ArrayIndexing	op_array -> try_catch_array [ i ]		97381	0					
ANR	97437	PtrMemberAccess	op_array -> try_catch_array		97381	0					
ANR	97438	Identifier	op_array		97381	0					
ANR	97439	Identifier	try_catch_array		97381	1					
ANR	97440	Identifier	i		97381	1					
ANR	97441	Identifier	finally_op		97381	1					
ANR	97442	ExpressionStatement	start = op_array -> try_catch_array [ i ] . finally_end	526:3:14443:14491	97381	1	True				
ANR	97443	AssignmentExpression	start = op_array -> try_catch_array [ i ] . finally_end		97381	0		=			
ANR	97444	Identifier	start		97381	0					
ANR	97445	MemberAccess	op_array -> try_catch_array [ i ] . finally_end		97381	1					
ANR	97446	ArrayIndexing	op_array -> try_catch_array [ i ]		97381	0					
ANR	97447	PtrMemberAccess	op_array -> try_catch_array		97381	0					
ANR	97448	Identifier	op_array		97381	0					
ANR	97449	Identifier	try_catch_array		97381	1					
ANR	97450	Identifier	i		97381	1					
ANR	97451	Identifier	finally_end		97381	1					
ANR	97452	IfStatement	if ( op_num )		97381	3					
ANR	97453	Condition	op_num	530:5:14506:14511	97381	0	True				
ANR	97454	Identifier	op_num		97381	0					
ANR	97455	CompoundStatement		13:13:322:322	97381	1					
ANR	97456	ExpressionStatement	ZEND_ASSERT ( op_array -> opcodes [ op_num - 2 ] . opcode == ZEND_FAST_CALL )	532:2:14549:14616	97381	0	True				
ANR	97457	CallExpression	ZEND_ASSERT ( op_array -> opcodes [ op_num - 2 ] . opcode == ZEND_FAST_CALL )		97381	0					
ANR	97458	Callee	ZEND_ASSERT		97381	0					
ANR	97459	Identifier	ZEND_ASSERT		97381	0					
ANR	97460	ArgumentList	op_array -> opcodes [ op_num - 2 ] . opcode == ZEND_FAST_CALL		97381	1					
ANR	97461	Argument	op_array -> opcodes [ op_num - 2 ] . opcode == ZEND_FAST_CALL		97381	0					
ANR	97462	EqualityExpression	op_array -> opcodes [ op_num - 2 ] . opcode == ZEND_FAST_CALL		97381	0		==			
ANR	97463	MemberAccess	op_array -> opcodes [ op_num - 2 ] . opcode		97381	0					
ANR	97464	ArrayIndexing	op_array -> opcodes [ op_num - 2 ]		97381	0					
ANR	97465	PtrMemberAccess	op_array -> opcodes		97381	0					
ANR	97466	Identifier	op_array		97381	0					
ANR	97467	Identifier	opcodes		97381	1					
ANR	97468	AdditiveExpression	op_num - 2		97381	1		-			
ANR	97469	Identifier	op_num		97381	0					
ANR	97470	PrimaryExpression	2		97381	1					
ANR	97471	Identifier	opcode		97381	1					
ANR	97472	Identifier	ZEND_FAST_CALL		97381	1					
ANR	97473	ExpressionStatement	op_array -> opcodes [ op_num - 2 ] . extended_value = ZEND_FAST_CALL_FROM_FINALLY	533:2:14620:14694	97381	1	True				
ANR	97474	AssignmentExpression	op_array -> opcodes [ op_num - 2 ] . extended_value = ZEND_FAST_CALL_FROM_FINALLY		97381	0		=			
ANR	97475	MemberAccess	op_array -> opcodes [ op_num - 2 ] . extended_value		97381	0					
ANR	97476	ArrayIndexing	op_array -> opcodes [ op_num - 2 ]		97381	0					
ANR	97477	PtrMemberAccess	op_array -> opcodes		97381	0					
ANR	97478	Identifier	op_array		97381	0					
ANR	97479	Identifier	opcodes		97381	1					
ANR	97480	AdditiveExpression	op_num - 2		97381	1		-			
ANR	97481	Identifier	op_num		97381	0					
ANR	97482	PrimaryExpression	2		97381	1					
ANR	97483	Identifier	extended_value		97381	1					
ANR	97484	Identifier	ZEND_FAST_CALL_FROM_FINALLY		97381	1					
ANR	97485	ExpressionStatement	op_array -> opcodes [ op_num - 2 ] . op2 . opline_num = fast_call	534:2:14698:14754	97381	2	True				
ANR	97486	AssignmentExpression	op_array -> opcodes [ op_num - 2 ] . op2 . opline_num = fast_call		97381	0		=			
ANR	97487	MemberAccess	op_array -> opcodes [ op_num - 2 ] . op2 . opline_num		97381	0					
ANR	97488	MemberAccess	op_array -> opcodes [ op_num - 2 ] . op2		97381	0					
ANR	97489	ArrayIndexing	op_array -> opcodes [ op_num - 2 ]		97381	0					
ANR	97490	PtrMemberAccess	op_array -> opcodes		97381	0					
ANR	97491	Identifier	op_array		97381	0					
ANR	97492	Identifier	opcodes		97381	1					
ANR	97493	AdditiveExpression	op_num - 2		97381	1		-			
ANR	97494	Identifier	op_num		97381	0					
ANR	97495	PrimaryExpression	2		97381	1					
ANR	97496	Identifier	op2		97381	1					
ANR	97497	Identifier	opline_num		97381	1					
ANR	97498	Identifier	fast_call		97381	1					
ANR	97499	ReturnType	static void		97381	1					
ANR	97500	Identifier	zend_adjust_fast_call		97381	2					
ANR	97501	ParameterList	"zend_op_array * op_array , zend_uint fast_call , zend_uint start , zend_uint end TSRMLS_DC"		97381	3					
ANR	97502	Parameter	zend_op_array * op_array	517:34:14103:14125	97381	0	True				
ANR	97503	ParameterType	zend_op_array *		97381	0					
ANR	97504	Identifier	op_array		97381	1					
ANR	97505	Parameter	zend_uint fast_call	517:59:14128:14146	97381	1	True				
ANR	97506	ParameterType	zend_uint		97381	0					
ANR	97507	Identifier	fast_call		97381	1					
ANR	97508	Parameter	zend_uint start	517:80:14149:14163	97381	2	True				
ANR	97509	ParameterType	zend_uint		97381	0					
ANR	97510	Identifier	start		97381	1					
ANR	97511	Parameter	zend_uint end TSRMLS_DC	517:97:14166:14188	97381	3	True				
ANR	97512	ParameterType	zend_uint end		97381	0					
ANR	97513	Identifier	TSRMLS_DC		97381	1					
ANR	97514	CFGEntryNode	ENTRY		97381		True				
ANR	97515	CFGExitNode	EXIT		97381		True				
ANR	97516	Symbol	op_array -> opcodes [ op_num - 2 ] . opcode		97381						
ANR	97517	Symbol	ZEND_FAST_CALL		97381						
ANR	97518	Symbol	* op_num		97381						
ANR	97519	Symbol	op_array -> opcodes [ op_num - 2 ] . extended_value		97381						
ANR	97520	Symbol	op_array -> opcodes [ op_num - 2 ] . op2 . opline_num		97381						
ANR	97521	Symbol	start		97381						
ANR	97522	Symbol	i		97381						
ANR	97523	Symbol	op_num		97381						
ANR	97524	Symbol	* op_array -> try_catch_array		97381						
ANR	97525	Symbol	TSRMLS_DC		97381						
ANR	97526	Symbol	* op_array		97381						
ANR	97527	Symbol	op_array -> last_try_catch		97381						
ANR	97528	Symbol	op_array -> try_catch_array [ i ] . finally_op		97381						
ANR	97529	Symbol	* i		97381						
ANR	97530	Symbol	op_array -> opcodes		97381						
ANR	97531	Symbol	ZEND_FAST_CALL_FROM_FINALLY		97381						
ANR	97532	Symbol	op_array -> try_catch_array [ i ] . finally_end		97381						
ANR	97533	Symbol	end		97381						
ANR	97534	Symbol	op_array -> try_catch_array		97381						
ANR	97535	Symbol	* * op_array		97381						
ANR	97536	Symbol	op_array -> opcodes [ op_num - 2 ] . op2		97381						
ANR	97537	Symbol	op_array		97381						
ANR	97538	Symbol	* op_array -> opcodes		97381						
ANR	97539	Symbol	fast_call		97381						
ANR	97540	Function	zend_resolve_fast_call	538:0:14762:15494							
ANR	97541	FunctionDef	"zend_resolve_fast_call (zend_op_array * op_array , zend_uint fast_call , zend_uint op_num TSRMLS_DC)"		97540	0					
ANR	97542	CompoundStatement		539:0:14871:15494	97540	0					
ANR	97543	IdentifierDeclStatement	int i ;	540:1:14874:14879	97540	0	True				
ANR	97544	IdentifierDecl	i		97540	0					
ANR	97545	IdentifierDeclType	int		97540	0					
ANR	97546	Identifier	i		97540	1					
ANR	97547	IdentifierDeclStatement	zend_uint finally_op_num = 0 ;	541:1:14882:14910	97540	1	True				
ANR	97548	IdentifierDecl	finally_op_num = 0		97540	0					
ANR	97549	IdentifierDeclType	zend_uint		97540	0					
ANR	97550	Identifier	finally_op_num		97540	1					
ANR	97551	AssignmentExpression	finally_op_num = 0		97540	2		=			
ANR	97552	Identifier	finally_op_num		97540	0					
ANR	97553	PrimaryExpression	0		97540	1					
ANR	97554	ForStatement	for ( i = 0 ; i < op_array -> last_try_catch ; i ++ )		97540	2					
ANR	97555	ForInit	i = 0 ;	543:6:14919:14924	97540	0	True				
ANR	97556	AssignmentExpression	i = 0		97540	0		=			
ANR	97557	Identifier	i		97540	0					
ANR	97558	PrimaryExpression	0		97540	1					
ANR	97559	Condition	i < op_array -> last_try_catch	543:13:14926:14953	97540	1	True				
ANR	97560	RelationalExpression	i < op_array -> last_try_catch		97540	0		<			
ANR	97561	Identifier	i		97540	0					
ANR	97562	PtrMemberAccess	op_array -> last_try_catch		97540	1					
ANR	97563	Identifier	op_array		97540	0					
ANR	97564	Identifier	last_try_catch		97540	1					
ANR	97565	PostIncDecOperationExpression	i ++	543:43:14956:14958	97540	2	True				
ANR	97566	Identifier	i		97540	0					
ANR	97567	IncDec	++		97540	1					
ANR	97568	CompoundStatement		5:48:89:89	97540	3					
ANR	97569	IfStatement	if ( op_num >= op_array -> try_catch_array [ i ] . finally_op && op_num < op_array -> try_catch_array [ i ] . finally_end )		97540	0					
ANR	97570	Condition	op_num >= op_array -> try_catch_array [ i ] . finally_op && op_num < op_array -> try_catch_array [ i ] . finally_end	544:6:14969:15074	97540	0	True				
ANR	97571	AndExpression	op_num >= op_array -> try_catch_array [ i ] . finally_op && op_num < op_array -> try_catch_array [ i ] . finally_end		97540	0		&&			
ANR	97572	RelationalExpression	op_num >= op_array -> try_catch_array [ i ] . finally_op		97540	0		>=			
ANR	97573	Identifier	op_num		97540	0					
ANR	97574	MemberAccess	op_array -> try_catch_array [ i ] . finally_op		97540	1					
ANR	97575	ArrayIndexing	op_array -> try_catch_array [ i ]		97540	0					
ANR	97576	PtrMemberAccess	op_array -> try_catch_array		97540	0					
ANR	97577	Identifier	op_array		97540	0					
ANR	97578	Identifier	try_catch_array		97540	1					
ANR	97579	Identifier	i		97540	1					
ANR	97580	Identifier	finally_op		97540	1					
ANR	97581	RelationalExpression	op_num < op_array -> try_catch_array [ i ] . finally_end		97540	1		<			
ANR	97582	Identifier	op_num		97540	0					
ANR	97583	MemberAccess	op_array -> try_catch_array [ i ] . finally_end		97540	1					
ANR	97584	ArrayIndexing	op_array -> try_catch_array [ i ]		97540	0					
ANR	97585	PtrMemberAccess	op_array -> try_catch_array		97540	0					
ANR	97586	Identifier	op_array		97540	0					
ANR	97587	Identifier	try_catch_array		97540	1					
ANR	97588	Identifier	i		97540	1					
ANR	97589	Identifier	finally_end		97540	1					
ANR	97590	CompoundStatement		7:58:205:205	97540	1					
ANR	97591	ExpressionStatement	finally_op_num = op_array -> try_catch_array [ i ] . finally_op	546:3:15082:15138	97540	0	True				
ANR	97592	AssignmentExpression	finally_op_num = op_array -> try_catch_array [ i ] . finally_op		97540	0		=			
ANR	97593	Identifier	finally_op_num		97540	0					
ANR	97594	MemberAccess	op_array -> try_catch_array [ i ] . finally_op		97540	1					
ANR	97595	ArrayIndexing	op_array -> try_catch_array [ i ]		97540	0					
ANR	97596	PtrMemberAccess	op_array -> try_catch_array		97540	0					
ANR	97597	Identifier	op_array		97540	0					
ANR	97598	Identifier	try_catch_array		97540	1					
ANR	97599	Identifier	i		97540	1					
ANR	97600	Identifier	finally_op		97540	1					
ANR	97601	IfStatement	if ( finally_op_num )		97540	3					
ANR	97602	Condition	finally_op_num	550:5:15153:15166	97540	0	True				
ANR	97603	Identifier	finally_op_num		97540	0					
ANR	97604	CompoundStatement		12:21:297:297	97540	1					
ANR	97605	ExpressionStatement	ZEND_ASSERT ( op_array -> opcodes [ finally_op_num - 2 ] . opcode == ZEND_FAST_CALL )	552:2:15204:15279	97540	0	True				
ANR	97606	CallExpression	ZEND_ASSERT ( op_array -> opcodes [ finally_op_num - 2 ] . opcode == ZEND_FAST_CALL )		97540	0					
ANR	97607	Callee	ZEND_ASSERT		97540	0					
ANR	97608	Identifier	ZEND_ASSERT		97540	0					
ANR	97609	ArgumentList	op_array -> opcodes [ finally_op_num - 2 ] . opcode == ZEND_FAST_CALL		97540	1					
ANR	97610	Argument	op_array -> opcodes [ finally_op_num - 2 ] . opcode == ZEND_FAST_CALL		97540	0					
ANR	97611	EqualityExpression	op_array -> opcodes [ finally_op_num - 2 ] . opcode == ZEND_FAST_CALL		97540	0		==			
ANR	97612	MemberAccess	op_array -> opcodes [ finally_op_num - 2 ] . opcode		97540	0					
ANR	97613	ArrayIndexing	op_array -> opcodes [ finally_op_num - 2 ]		97540	0					
ANR	97614	PtrMemberAccess	op_array -> opcodes		97540	0					
ANR	97615	Identifier	op_array		97540	0					
ANR	97616	Identifier	opcodes		97540	1					
ANR	97617	AdditiveExpression	finally_op_num - 2		97540	1		-			
ANR	97618	Identifier	finally_op_num		97540	0					
ANR	97619	PrimaryExpression	2		97540	1					
ANR	97620	Identifier	opcode		97540	1					
ANR	97621	Identifier	ZEND_FAST_CALL		97540	1					
ANR	97622	IfStatement	if ( op_array -> opcodes [ fast_call ] . extended_value == 0 )		97540	1					
ANR	97623	Condition	op_array -> opcodes [ fast_call ] . extended_value == 0	553:6:15287:15334	97540	0	True				
ANR	97624	EqualityExpression	op_array -> opcodes [ fast_call ] . extended_value == 0		97540	0		==			
ANR	97625	MemberAccess	op_array -> opcodes [ fast_call ] . extended_value		97540	0					
ANR	97626	ArrayIndexing	op_array -> opcodes [ fast_call ]		97540	0					
ANR	97627	PtrMemberAccess	op_array -> opcodes		97540	0					
ANR	97628	Identifier	op_array		97540	0					
ANR	97629	Identifier	opcodes		97540	1					
ANR	97630	Identifier	fast_call		97540	1					
ANR	97631	Identifier	extended_value		97540	1					
ANR	97632	PrimaryExpression	0		97540	1					
ANR	97633	CompoundStatement		15:56:465:465	97540	1					
ANR	97634	ExpressionStatement	op_array -> opcodes [ fast_call ] . extended_value = ZEND_FAST_CALL_FROM_FINALLY	554:3:15342:15415	97540	0	True				
ANR	97635	AssignmentExpression	op_array -> opcodes [ fast_call ] . extended_value = ZEND_FAST_CALL_FROM_FINALLY		97540	0		=			
ANR	97636	MemberAccess	op_array -> opcodes [ fast_call ] . extended_value		97540	0					
ANR	97637	ArrayIndexing	op_array -> opcodes [ fast_call ]		97540	0					
ANR	97638	PtrMemberAccess	op_array -> opcodes		97540	0					
ANR	97639	Identifier	op_array		97540	0					
ANR	97640	Identifier	opcodes		97540	1					
ANR	97641	Identifier	fast_call		97540	1					
ANR	97642	Identifier	extended_value		97540	1					
ANR	97643	Identifier	ZEND_FAST_CALL_FROM_FINALLY		97540	1					
ANR	97644	ExpressionStatement	op_array -> opcodes [ fast_call ] . op2 . opline_num = finally_op_num - 2	555:3:15420:15484	97540	1	True				
ANR	97645	AssignmentExpression	op_array -> opcodes [ fast_call ] . op2 . opline_num = finally_op_num - 2		97540	0		=			
ANR	97646	MemberAccess	op_array -> opcodes [ fast_call ] . op2 . opline_num		97540	0					
ANR	97647	MemberAccess	op_array -> opcodes [ fast_call ] . op2		97540	0					
ANR	97648	ArrayIndexing	op_array -> opcodes [ fast_call ]		97540	0					
ANR	97649	PtrMemberAccess	op_array -> opcodes		97540	0					
ANR	97650	Identifier	op_array		97540	0					
ANR	97651	Identifier	opcodes		97540	1					
ANR	97652	Identifier	fast_call		97540	1					
ANR	97653	Identifier	op2		97540	1					
ANR	97654	Identifier	opline_num		97540	1					
ANR	97655	AdditiveExpression	finally_op_num - 2		97540	1		-			
ANR	97656	Identifier	finally_op_num		97540	0					
ANR	97657	PrimaryExpression	2		97540	1					
ANR	97658	ReturnType	static void		97540	1					
ANR	97659	Identifier	zend_resolve_fast_call		97540	2					
ANR	97660	ParameterList	"zend_op_array * op_array , zend_uint fast_call , zend_uint op_num TSRMLS_DC"		97540	3					
ANR	97661	Parameter	zend_op_array * op_array	538:35:14797:14819	97540	0	True				
ANR	97662	ParameterType	zend_op_array *		97540	0					
ANR	97663	Identifier	op_array		97540	1					
ANR	97664	Parameter	zend_uint fast_call	538:60:14822:14840	97540	1	True				
ANR	97665	ParameterType	zend_uint		97540	0					
ANR	97666	Identifier	fast_call		97540	1					
ANR	97667	Parameter	zend_uint op_num TSRMLS_DC	538:81:14843:14868	97540	2	True				
ANR	97668	ParameterType	zend_uint op_num		97540	0					
ANR	97669	Identifier	TSRMLS_DC		97540	1					
ANR	97670	CFGEntryNode	ENTRY		97540		True				
ANR	97671	CFGExitNode	EXIT		97540		True				
ANR	97672	Symbol	op_array -> opcodes [ finally_op_num - 2 ] . opcode		97540						
ANR	97673	Symbol	ZEND_FAST_CALL		97540						
ANR	97674	Symbol	op_array -> opcodes [ fast_call ] . op2		97540						
ANR	97675	Symbol	i		97540						
ANR	97676	Symbol	* op_array -> try_catch_array		97540						
ANR	97677	Symbol	op_num		97540						
ANR	97678	Symbol	TSRMLS_DC		97540						
ANR	97679	Symbol	* op_array		97540						
ANR	97680	Symbol	op_array -> last_try_catch		97540						
ANR	97681	Symbol	op_array -> try_catch_array [ i ] . finally_op		97540						
ANR	97682	Symbol	* i		97540						
ANR	97683	Symbol	op_array -> opcodes		97540						
ANR	97684	Symbol	* finally_op_num		97540						
ANR	97685	Symbol	op_array -> opcodes [ fast_call ] . extended_value		97540						
ANR	97686	Symbol	finally_op_num		97540						
ANR	97687	Symbol	ZEND_FAST_CALL_FROM_FINALLY		97540						
ANR	97688	Symbol	op_array -> try_catch_array [ i ] . finally_end		97540						
ANR	97689	Symbol	* fast_call		97540						
ANR	97690	Symbol	op_array -> try_catch_array		97540						
ANR	97691	Symbol	* * op_array		97540						
ANR	97692	Symbol	op_array -> opcodes [ fast_call ] . op2 . opline_num		97540						
ANR	97693	Symbol	op_array		97540						
ANR	97694	Symbol	* op_array -> opcodes		97540						
ANR	97695	Symbol	fast_call		97540						
ANR	97696	Function	zend_resolve_finally_call	560:0:15497:18300							
ANR	97697	FunctionDef	"zend_resolve_finally_call (zend_op_array * op_array , zend_uint op_num , zend_uint dst_num TSRMLS_DC)"		97696	0					
ANR	97698	CompoundStatement		561:0:15607:18300	97696	0					
ANR	97699	IdentifierDeclStatement	zend_uint start_op ;	562:1:15610:15628	97696	0	True				
ANR	97700	IdentifierDecl	start_op		97696	0					
ANR	97701	IdentifierDeclType	zend_uint		97696	0					
ANR	97702	Identifier	start_op		97696	1					
ANR	97703	IdentifierDeclStatement	zend_op * opline ;	563:1:15631:15646	97696	1	True				
ANR	97704	IdentifierDecl	* opline		97696	0					
ANR	97705	IdentifierDeclType	zend_op *		97696	0					
ANR	97706	Identifier	opline		97696	1					
ANR	97707	IdentifierDeclStatement	zend_uint i = op_array -> last_try_catch ;	564:1:15649:15687	97696	2	True				
ANR	97708	IdentifierDecl	i = op_array -> last_try_catch		97696	0					
ANR	97709	IdentifierDeclType	zend_uint		97696	0					
ANR	97710	Identifier	i		97696	1					
ANR	97711	AssignmentExpression	i = op_array -> last_try_catch		97696	2		=			
ANR	97712	Identifier	i		97696	0					
ANR	97713	PtrMemberAccess	op_array -> last_try_catch		97696	1					
ANR	97714	Identifier	op_array		97696	0					
ANR	97715	Identifier	last_try_catch		97696	1					
ANR	97716	IfStatement	if ( dst_num != ( zend_uint ) - 1 )		97696	3					
ANR	97717	Condition	dst_num != ( zend_uint ) - 1	566:5:15695:15718	97696	0	True				
ANR	97718	EqualityExpression	dst_num != ( zend_uint ) - 1		97696	0		!=			
ANR	97719	Identifier	dst_num		97696	0					
ANR	97720	CastExpression	( zend_uint ) - 1		97696	1					
ANR	97721	CastTarget	zend_uint		97696	0					
ANR	97722	UnaryOperationExpression	- 1		97696	1					
ANR	97723	UnaryOperator	-		97696	0					
ANR	97724	PrimaryExpression	1		97696	1					
ANR	97725	CompoundStatement		6:31:113:113	97696	1					
ANR	97726	Statement	zend_check_finally_breakout	567:2:15725:15751	97696	0	True				
ANR	97727	Statement	(	567:29:15752:15752	97696	1	True				
ANR	97728	Statement	op_array	567:30:15753:15760	97696	2	True				
ANR	97729	Statement	","	567:38:15761:15761	97696	3	True				
ANR	97730	Statement	op_num	567:40:15763:15768	97696	4	True				
ANR	97731	Statement	","	567:46:15769:15769	97696	5	True				
ANR	97732	Statement	dst_num	567:48:15771:15777	97696	6	True				
ANR	97733	Statement	TSRMLS_CC	567:56:15779:15787	97696	7	True				
ANR	97734	Statement	)	567:65:15788:15788	97696	8	True				
ANR	97735	ExpressionStatement		567:66:15789:15789	97696	9	True				
ANR	97736	WhileStatement	while ( i > 0 )		97696	4					
ANR	97737	Condition	i > 0	571:8:15838:15842	97696	0	True				
ANR	97738	RelationalExpression	i > 0		97696	0		>			
ANR	97739	Identifier	i		97696	0					
ANR	97740	PrimaryExpression	0		97696	1					
ANR	97741	CompoundStatement		11:15:237:237	97696	1					
ANR	97742	ExpressionStatement	i --	572:2:15849:15852	97696	0	True				
ANR	97743	PostIncDecOperationExpression	i --		97696	0					
ANR	97744	Identifier	i		97696	0					
ANR	97745	IncDec	--		97696	1					
ANR	97746	IfStatement	if ( op_array -> try_catch_array [ i ] . finally_op && op_num >= op_array -> try_catch_array [ i ] . try_op && op_num < op_array -> try_catch_array [ i ] . finally_op - 1 && ( dst_num < op_array -> try_catch_array [ i ] . try_op || dst_num > op_array -> try_catch_array [ i ] . finally_end ) )		97696	1					
ANR	97747	Condition	op_array -> try_catch_array [ i ] . finally_op && op_num >= op_array -> try_catch_array [ i ] . try_op && op_num < op_array -> try_catch_array [ i ] . finally_op - 1 && ( dst_num < op_array -> try_catch_array [ i ] . try_op || dst_num > op_array -> try_catch_array [ i ] . finally_end )	573:6:15860:16133	97696	0	True				
ANR	97748	AndExpression	op_array -> try_catch_array [ i ] . finally_op && op_num >= op_array -> try_catch_array [ i ] . try_op && op_num < op_array -> try_catch_array [ i ] . finally_op - 1 && ( dst_num < op_array -> try_catch_array [ i ] . try_op || dst_num > op_array -> try_catch_array [ i ] . finally_end )		97696	0		&&			
ANR	97749	MemberAccess	op_array -> try_catch_array [ i ] . finally_op		97696	0					
ANR	97750	ArrayIndexing	op_array -> try_catch_array [ i ]		97696	0					
ANR	97751	PtrMemberAccess	op_array -> try_catch_array		97696	0					
ANR	97752	Identifier	op_array		97696	0					
ANR	97753	Identifier	try_catch_array		97696	1					
ANR	97754	Identifier	i		97696	1					
ANR	97755	Identifier	finally_op		97696	1					
ANR	97756	AndExpression	op_num >= op_array -> try_catch_array [ i ] . try_op && op_num < op_array -> try_catch_array [ i ] . finally_op - 1 && ( dst_num < op_array -> try_catch_array [ i ] . try_op || dst_num > op_array -> try_catch_array [ i ] . finally_end )		97696	1		&&			
ANR	97757	RelationalExpression	op_num >= op_array -> try_catch_array [ i ] . try_op		97696	0		>=			
ANR	97758	Identifier	op_num		97696	0					
ANR	97759	MemberAccess	op_array -> try_catch_array [ i ] . try_op		97696	1					
ANR	97760	ArrayIndexing	op_array -> try_catch_array [ i ]		97696	0					
ANR	97761	PtrMemberAccess	op_array -> try_catch_array		97696	0					
ANR	97762	Identifier	op_array		97696	0					
ANR	97763	Identifier	try_catch_array		97696	1					
ANR	97764	Identifier	i		97696	1					
ANR	97765	Identifier	try_op		97696	1					
ANR	97766	AndExpression	op_num < op_array -> try_catch_array [ i ] . finally_op - 1 && ( dst_num < op_array -> try_catch_array [ i ] . try_op || dst_num > op_array -> try_catch_array [ i ] . finally_end )		97696	1		&&			
ANR	97767	RelationalExpression	op_num < op_array -> try_catch_array [ i ] . finally_op - 1		97696	0		<			
ANR	97768	Identifier	op_num		97696	0					
ANR	97769	AdditiveExpression	op_array -> try_catch_array [ i ] . finally_op - 1		97696	1		-			
ANR	97770	MemberAccess	op_array -> try_catch_array [ i ] . finally_op		97696	0					
ANR	97771	ArrayIndexing	op_array -> try_catch_array [ i ]		97696	0					
ANR	97772	PtrMemberAccess	op_array -> try_catch_array		97696	0					
ANR	97773	Identifier	op_array		97696	0					
ANR	97774	Identifier	try_catch_array		97696	1					
ANR	97775	Identifier	i		97696	1					
ANR	97776	Identifier	finally_op		97696	1					
ANR	97777	PrimaryExpression	1		97696	1					
ANR	97778	OrExpression	dst_num < op_array -> try_catch_array [ i ] . try_op || dst_num > op_array -> try_catch_array [ i ] . finally_end		97696	1		||			
ANR	97779	RelationalExpression	dst_num < op_array -> try_catch_array [ i ] . try_op		97696	0		<			
ANR	97780	Identifier	dst_num		97696	0					
ANR	97781	MemberAccess	op_array -> try_catch_array [ i ] . try_op		97696	1					
ANR	97782	ArrayIndexing	op_array -> try_catch_array [ i ]		97696	0					
ANR	97783	PtrMemberAccess	op_array -> try_catch_array		97696	0					
ANR	97784	Identifier	op_array		97696	0					
ANR	97785	Identifier	try_catch_array		97696	1					
ANR	97786	Identifier	i		97696	1					
ANR	97787	Identifier	try_op		97696	1					
ANR	97788	RelationalExpression	dst_num > op_array -> try_catch_array [ i ] . finally_end		97696	1		>			
ANR	97789	Identifier	dst_num		97696	0					
ANR	97790	MemberAccess	op_array -> try_catch_array [ i ] . finally_end		97696	1					
ANR	97791	ArrayIndexing	op_array -> try_catch_array [ i ]		97696	0					
ANR	97792	PtrMemberAccess	op_array -> try_catch_array		97696	0					
ANR	97793	Identifier	op_array		97696	0					
ANR	97794	Identifier	try_catch_array		97696	1					
ANR	97795	Identifier	i		97696	1					
ANR	97796	Identifier	finally_end		97696	1					
ANR	97797	CompoundStatement		17:60:528:528	97696	1					
ANR	97798	ExpressionStatement	start_op = get_next_op_number ( op_array )	581:6:16262:16301	97696	0	True				
ANR	97799	AssignmentExpression	start_op = get_next_op_number ( op_array )		97696	0		=			
ANR	97800	Identifier	start_op		97696	0					
ANR	97801	CallExpression	get_next_op_number ( op_array )		97696	1					
ANR	97802	Callee	get_next_op_number		97696	0					
ANR	97803	Identifier	get_next_op_number		97696	0					
ANR	97804	ArgumentList	op_array		97696	1					
ANR	97805	Argument	op_array		97696	0					
ANR	97806	Identifier	op_array		97696	0					
ANR	97807	Statement	opline	583:3:16307:16312	97696	1	True				
ANR	97808	Statement	=	583:10:16314:16314	97696	2	True				
ANR	97809	Statement	get_next_op	583:12:16316:16326	97696	3	True				
ANR	97810	Statement	(	583:23:16327:16327	97696	4	True				
ANR	97811	Statement	op_array	583:24:16328:16335	97696	5	True				
ANR	97812	Statement	TSRMLS_CC	583:33:16337:16345	97696	6	True				
ANR	97813	Statement	)	583:42:16346:16346	97696	7	True				
ANR	97814	ExpressionStatement		583:43:16347:16347	97696	8	True				
ANR	97815	ExpressionStatement	opline -> opcode = ZEND_FAST_CALL	584:3:16352:16383	97696	9	True				
ANR	97816	AssignmentExpression	opline -> opcode = ZEND_FAST_CALL		97696	0		=			
ANR	97817	PtrMemberAccess	opline -> opcode		97696	0					
ANR	97818	Identifier	opline		97696	0					
ANR	97819	Identifier	opcode		97696	1					
ANR	97820	Identifier	ZEND_FAST_CALL		97696	1					
ANR	97821	ExpressionStatement	SET_UNUSED ( opline -> op1 )	585:3:16388:16411	97696	10	True				
ANR	97822	CallExpression	SET_UNUSED ( opline -> op1 )		97696	0					
ANR	97823	Callee	SET_UNUSED		97696	0					
ANR	97824	Identifier	SET_UNUSED		97696	0					
ANR	97825	ArgumentList	opline -> op1		97696	1					
ANR	97826	Argument	opline -> op1		97696	0					
ANR	97827	PtrMemberAccess	opline -> op1		97696	0					
ANR	97828	Identifier	opline		97696	0					
ANR	97829	Identifier	op1		97696	1					
ANR	97830	ExpressionStatement	SET_UNUSED ( opline -> op2 )	586:3:16416:16439	97696	11	True				
ANR	97831	CallExpression	SET_UNUSED ( opline -> op2 )		97696	0					
ANR	97832	Callee	SET_UNUSED		97696	0					
ANR	97833	Identifier	SET_UNUSED		97696	0					
ANR	97834	ArgumentList	opline -> op2		97696	1					
ANR	97835	Argument	opline -> op2		97696	0					
ANR	97836	PtrMemberAccess	opline -> op2		97696	0					
ANR	97837	Identifier	opline		97696	0					
ANR	97838	Identifier	op2		97696	1					
ANR	97839	Statement	zend_adjust_fast_call	587:3:16444:16464	97696	12	True				
ANR	97840	Statement	(	587:24:16465:16465	97696	13	True				
ANR	97841	Statement	op_array	587:25:16466:16473	97696	14	True				
ANR	97842	Statement	","	587:33:16474:16474	97696	15	True				
ANR	97843	Statement	start_op	587:35:16476:16483	97696	16	True				
ANR	97844	Statement	","	587:43:16484:16484	97696	17	True				
ANR	97845	Statement	op_array	588:5:16491:16498	97696	18	True				
ANR	97846	Statement	->	588:13:16499:16500	97696	19	True				
ANR	97847	Statement	try_catch_array	588:15:16501:16515	97696	20	True				
ANR	97848	Statement	[	588:30:16516:16516	97696	21	True				
ANR	97849	Statement	i	588:31:16517:16517	97696	22	True				
ANR	97850	Statement	]	588:32:16518:16518	97696	23	True				
ANR	97851	Statement	.	588:33:16519:16519	97696	24	True				
ANR	97852	Statement	finally_op	588:34:16520:16529	97696	25	True				
ANR	97853	Statement	","	588:44:16530:16530	97696	26	True				
ANR	97854	Statement	op_array	589:5:16537:16544	97696	27	True				
ANR	97855	Statement	->	589:13:16545:16546	97696	28	True				
ANR	97856	Statement	try_catch_array	589:15:16547:16561	97696	29	True				
ANR	97857	Statement	[	589:30:16562:16562	97696	30	True				
ANR	97858	Statement	i	589:31:16563:16563	97696	31	True				
ANR	97859	Statement	]	589:32:16564:16564	97696	32	True				
ANR	97860	Statement	.	589:33:16565:16565	97696	33	True				
ANR	97861	Statement	finally_end	589:34:16566:16576	97696	34	True				
ANR	97862	Statement	TSRMLS_CC	589:46:16578:16586	97696	35	True				
ANR	97863	Statement	)	589:55:16587:16587	97696	36	True				
ANR	97864	ExpressionStatement		589:56:16588:16588	97696	37	True				
ANR	97865	IfStatement	if ( op_array -> try_catch_array [ i ] . catch_op )		97696	38					
ANR	97866	Condition	op_array -> try_catch_array [ i ] . catch_op	590:7:16597:16633	97696	0	True				
ANR	97867	MemberAccess	op_array -> try_catch_array [ i ] . catch_op		97696	0					
ANR	97868	ArrayIndexing	op_array -> try_catch_array [ i ]		97696	0					
ANR	97869	PtrMemberAccess	op_array -> try_catch_array		97696	0					
ANR	97870	Identifier	op_array		97696	0					
ANR	97871	Identifier	try_catch_array		97696	1					
ANR	97872	Identifier	i		97696	1					
ANR	97873	Identifier	catch_op		97696	1					
ANR	97874	CompoundStatement		30:46:1028:1028	97696	1					
ANR	97875	ExpressionStatement	opline -> extended_value = ZEND_FAST_CALL_FROM_CATCH	591:4:16642:16692	97696	0	True				
ANR	97876	AssignmentExpression	opline -> extended_value = ZEND_FAST_CALL_FROM_CATCH		97696	0		=			
ANR	97877	PtrMemberAccess	opline -> extended_value		97696	0					
ANR	97878	Identifier	opline		97696	0					
ANR	97879	Identifier	extended_value		97696	1					
ANR	97880	Identifier	ZEND_FAST_CALL_FROM_CATCH		97696	1					
ANR	97881	ExpressionStatement	opline -> op2 . opline_num = op_array -> try_catch_array [ i ] . catch_op	592:4:16698:16760	97696	1	True				
ANR	97882	AssignmentExpression	opline -> op2 . opline_num = op_array -> try_catch_array [ i ] . catch_op		97696	0		=			
ANR	97883	MemberAccess	opline -> op2 . opline_num		97696	0					
ANR	97884	PtrMemberAccess	opline -> op2		97696	0					
ANR	97885	Identifier	opline		97696	0					
ANR	97886	Identifier	op2		97696	1					
ANR	97887	Identifier	opline_num		97696	1					
ANR	97888	MemberAccess	op_array -> try_catch_array [ i ] . catch_op		97696	1					
ANR	97889	ArrayIndexing	op_array -> try_catch_array [ i ]		97696	0					
ANR	97890	PtrMemberAccess	op_array -> try_catch_array		97696	0					
ANR	97891	Identifier	op_array		97696	0					
ANR	97892	Identifier	try_catch_array		97696	1					
ANR	97893	Identifier	i		97696	1					
ANR	97894	Identifier	catch_op		97696	1					
ANR	97895	ExpressionStatement	opline -> op1 . opline_num = get_next_op_number ( op_array )	593:4:16766:16819	97696	2	True				
ANR	97896	AssignmentExpression	opline -> op1 . opline_num = get_next_op_number ( op_array )		97696	0		=			
ANR	97897	MemberAccess	opline -> op1 . opline_num		97696	0					
ANR	97898	PtrMemberAccess	opline -> op1		97696	0					
ANR	97899	Identifier	opline		97696	0					
ANR	97900	Identifier	op1		97696	1					
ANR	97901	Identifier	opline_num		97696	1					
ANR	97902	CallExpression	get_next_op_number ( op_array )		97696	1					
ANR	97903	Callee	get_next_op_number		97696	0					
ANR	97904	Identifier	get_next_op_number		97696	0					
ANR	97905	ArgumentList	op_array		97696	1					
ANR	97906	Argument	op_array		97696	0					
ANR	97907	Identifier	op_array		97696	0					
ANR	97908	Statement	opline	595:4:16882:16887	97696	3	True				
ANR	97909	Statement	=	595:11:16889:16889	97696	4	True				
ANR	97910	Statement	get_next_op	595:13:16891:16901	97696	5	True				
ANR	97911	Statement	(	595:24:16902:16902	97696	6	True				
ANR	97912	Statement	op_array	595:25:16903:16910	97696	7	True				
ANR	97913	Statement	TSRMLS_CC	595:34:16912:16920	97696	8	True				
ANR	97914	Statement	)	595:43:16921:16921	97696	9	True				
ANR	97915	ExpressionStatement		595:44:16922:16922	97696	10	True				
ANR	97916	ExpressionStatement	opline -> opcode = ZEND_FAST_CALL	596:4:16928:16959	97696	11	True				
ANR	97917	AssignmentExpression	opline -> opcode = ZEND_FAST_CALL		97696	0		=			
ANR	97918	PtrMemberAccess	opline -> opcode		97696	0					
ANR	97919	Identifier	opline		97696	0					
ANR	97920	Identifier	opcode		97696	1					
ANR	97921	Identifier	ZEND_FAST_CALL		97696	1					
ANR	97922	ExpressionStatement	SET_UNUSED ( opline -> op1 )	597:4:16965:16988	97696	12	True				
ANR	97923	CallExpression	SET_UNUSED ( opline -> op1 )		97696	0					
ANR	97924	Callee	SET_UNUSED		97696	0					
ANR	97925	Identifier	SET_UNUSED		97696	0					
ANR	97926	ArgumentList	opline -> op1		97696	1					
ANR	97927	Argument	opline -> op1		97696	0					
ANR	97928	PtrMemberAccess	opline -> op1		97696	0					
ANR	97929	Identifier	opline		97696	0					
ANR	97930	Identifier	op1		97696	1					
ANR	97931	ExpressionStatement	SET_UNUSED ( opline -> op2 )	598:4:16994:17017	97696	13	True				
ANR	97932	CallExpression	SET_UNUSED ( opline -> op2 )		97696	0					
ANR	97933	Callee	SET_UNUSED		97696	0					
ANR	97934	Identifier	SET_UNUSED		97696	0					
ANR	97935	ArgumentList	opline -> op2		97696	1					
ANR	97936	Argument	opline -> op2		97696	0					
ANR	97937	PtrMemberAccess	opline -> op2		97696	0					
ANR	97938	Identifier	opline		97696	0					
ANR	97939	Identifier	op2		97696	1					
ANR	97940	Statement	zend_resolve_fast_call	599:4:17023:17044	97696	14	True				
ANR	97941	Statement	(	599:26:17045:17045	97696	15	True				
ANR	97942	Statement	op_array	599:27:17046:17053	97696	16	True				
ANR	97943	Statement	","	599:35:17054:17054	97696	17	True				
ANR	97944	Statement	start_op	599:37:17056:17063	97696	18	True				
ANR	97945	Statement	+	599:46:17065:17065	97696	19	True				
ANR	97946	Statement	1	599:48:17067:17067	97696	20	True				
ANR	97947	Statement	","	599:49:17068:17068	97696	21	True				
ANR	97948	Statement	op_array	599:51:17070:17077	97696	22	True				
ANR	97949	Statement	->	599:59:17078:17079	97696	23	True				
ANR	97950	Statement	try_catch_array	599:61:17080:17094	97696	24	True				
ANR	97951	Statement	[	599:76:17095:17095	97696	25	True				
ANR	97952	Statement	i	599:77:17096:17096	97696	26	True				
ANR	97953	Statement	]	599:78:17097:17097	97696	27	True				
ANR	97954	Statement	.	599:79:17098:17098	97696	28	True				
ANR	97955	Statement	finally_op	599:80:17099:17108	97696	29	True				
ANR	97956	Statement	-	599:91:17110:17110	97696	30	True				
ANR	97957	Statement	2	599:93:17112:17112	97696	31	True				
ANR	97958	Statement	TSRMLS_CC	599:95:17114:17122	97696	32	True				
ANR	97959	Statement	)	599:104:17123:17123	97696	33	True				
ANR	97960	ExpressionStatement		599:105:17124:17124	97696	34	True				
ANR	97961	ElseStatement	else		97696	0					
ANR	97962	CompoundStatement		40:10:1528:1528	97696	0					
ANR	97963	Statement	zend_resolve_fast_call	601:4:17142:17163	97696	0	True				
ANR	97964	Statement	(	601:26:17164:17164	97696	1	True				
ANR	97965	Statement	op_array	601:27:17165:17172	97696	2	True				
ANR	97966	Statement	","	601:35:17173:17173	97696	3	True				
ANR	97967	Statement	start_op	601:37:17175:17182	97696	4	True				
ANR	97968	Statement	","	601:45:17183:17183	97696	5	True				
ANR	97969	Statement	op_array	601:47:17185:17192	97696	6	True				
ANR	97970	Statement	->	601:55:17193:17194	97696	7	True				
ANR	97971	Statement	try_catch_array	601:57:17195:17209	97696	8	True				
ANR	97972	Statement	[	601:72:17210:17210	97696	9	True				
ANR	97973	Statement	i	601:73:17211:17211	97696	10	True				
ANR	97974	Statement	]	601:74:17212:17212	97696	11	True				
ANR	97975	Statement	.	601:75:17213:17213	97696	12	True				
ANR	97976	Statement	finally_op	601:76:17214:17223	97696	13	True				
ANR	97977	Statement	-	601:87:17225:17225	97696	14	True				
ANR	97978	Statement	2	601:89:17227:17227	97696	15	True				
ANR	97979	Statement	TSRMLS_CC	601:91:17229:17237	97696	16	True				
ANR	97980	Statement	)	601:100:17238:17238	97696	17	True				
ANR	97981	ExpressionStatement		601:101:17239:17239	97696	18	True				
ANR	97982	ExpressionStatement	opline -> op1 . opline_num = op_array -> try_catch_array [ i ] . finally_op	603:3:17249:17313	97696	39	True				
ANR	97983	AssignmentExpression	opline -> op1 . opline_num = op_array -> try_catch_array [ i ] . finally_op		97696	0		=			
ANR	97984	MemberAccess	opline -> op1 . opline_num		97696	0					
ANR	97985	PtrMemberAccess	opline -> op1		97696	0					
ANR	97986	Identifier	opline		97696	0					
ANR	97987	Identifier	op1		97696	1					
ANR	97988	Identifier	opline_num		97696	1					
ANR	97989	MemberAccess	op_array -> try_catch_array [ i ] . finally_op		97696	1					
ANR	97990	ArrayIndexing	op_array -> try_catch_array [ i ]		97696	0					
ANR	97991	PtrMemberAccess	op_array -> try_catch_array		97696	0					
ANR	97992	Identifier	op_array		97696	0					
ANR	97993	Identifier	try_catch_array		97696	1					
ANR	97994	Identifier	i		97696	1					
ANR	97995	Identifier	finally_op		97696	1					
ANR	97996	WhileStatement	while ( i > 0 )		97696	40					
ANR	97997	Condition	i > 0	606:10:17392:17396	97696	0	True				
ANR	97998	RelationalExpression	i > 0		97696	0		>			
ANR	97999	Identifier	i		97696	0					
ANR	98000	PrimaryExpression	0		97696	1					
ANR	98001	CompoundStatement		46:17:1791:1791	97696	1					
ANR	98002	ExpressionStatement	i --	607:4:17405:17408	97696	0	True				
ANR	98003	PostIncDecOperationExpression	i --		97696	0					
ANR	98004	Identifier	i		97696	0					
ANR	98005	IncDec	--		97696	1					
ANR	98006	IfStatement	if ( op_array -> try_catch_array [ i ] . finally_op && op_num >= op_array -> try_catch_array [ i ] . try_op && op_num < op_array -> try_catch_array [ i ] . finally_op - 1 && ( dst_num < op_array -> try_catch_array [ i ] . try_op || dst_num > op_array -> try_catch_array [ i ] . finally_end ) )		97696	1					
ANR	98007	Condition	op_array -> try_catch_array [ i ] . finally_op && op_num >= op_array -> try_catch_array [ i ] . try_op && op_num < op_array -> try_catch_array [ i ] . finally_op - 1 && ( dst_num < op_array -> try_catch_array [ i ] . try_op || dst_num > op_array -> try_catch_array [ i ] . finally_end )	608:8:17418:17687	97696	0	True				
ANR	98008	AndExpression	op_array -> try_catch_array [ i ] . finally_op && op_num >= op_array -> try_catch_array [ i ] . try_op && op_num < op_array -> try_catch_array [ i ] . finally_op - 1 && ( dst_num < op_array -> try_catch_array [ i ] . try_op || dst_num > op_array -> try_catch_array [ i ] . finally_end )		97696	0		&&			
ANR	98009	MemberAccess	op_array -> try_catch_array [ i ] . finally_op		97696	0					
ANR	98010	ArrayIndexing	op_array -> try_catch_array [ i ]		97696	0					
ANR	98011	PtrMemberAccess	op_array -> try_catch_array		97696	0					
ANR	98012	Identifier	op_array		97696	0					
ANR	98013	Identifier	try_catch_array		97696	1					
ANR	98014	Identifier	i		97696	1					
ANR	98015	Identifier	finally_op		97696	1					
ANR	98016	AndExpression	op_num >= op_array -> try_catch_array [ i ] . try_op && op_num < op_array -> try_catch_array [ i ] . finally_op - 1 && ( dst_num < op_array -> try_catch_array [ i ] . try_op || dst_num > op_array -> try_catch_array [ i ] . finally_end )		97696	1		&&			
ANR	98017	RelationalExpression	op_num >= op_array -> try_catch_array [ i ] . try_op		97696	0		>=			
ANR	98018	Identifier	op_num		97696	0					
ANR	98019	MemberAccess	op_array -> try_catch_array [ i ] . try_op		97696	1					
ANR	98020	ArrayIndexing	op_array -> try_catch_array [ i ]		97696	0					
ANR	98021	PtrMemberAccess	op_array -> try_catch_array		97696	0					
ANR	98022	Identifier	op_array		97696	0					
ANR	98023	Identifier	try_catch_array		97696	1					
ANR	98024	Identifier	i		97696	1					
ANR	98025	Identifier	try_op		97696	1					
ANR	98026	AndExpression	op_num < op_array -> try_catch_array [ i ] . finally_op - 1 && ( dst_num < op_array -> try_catch_array [ i ] . try_op || dst_num > op_array -> try_catch_array [ i ] . finally_end )		97696	1		&&			
ANR	98027	RelationalExpression	op_num < op_array -> try_catch_array [ i ] . finally_op - 1		97696	0		<			
ANR	98028	Identifier	op_num		97696	0					
ANR	98029	AdditiveExpression	op_array -> try_catch_array [ i ] . finally_op - 1		97696	1		-			
ANR	98030	MemberAccess	op_array -> try_catch_array [ i ] . finally_op		97696	0					
ANR	98031	ArrayIndexing	op_array -> try_catch_array [ i ]		97696	0					
ANR	98032	PtrMemberAccess	op_array -> try_catch_array		97696	0					
ANR	98033	Identifier	op_array		97696	0					
ANR	98034	Identifier	try_catch_array		97696	1					
ANR	98035	Identifier	i		97696	1					
ANR	98036	Identifier	finally_op		97696	1					
ANR	98037	PrimaryExpression	1		97696	1					
ANR	98038	OrExpression	dst_num < op_array -> try_catch_array [ i ] . try_op || dst_num > op_array -> try_catch_array [ i ] . finally_end		97696	1		||			
ANR	98039	RelationalExpression	dst_num < op_array -> try_catch_array [ i ] . try_op		97696	0		<			
ANR	98040	Identifier	dst_num		97696	0					
ANR	98041	MemberAccess	op_array -> try_catch_array [ i ] . try_op		97696	1					
ANR	98042	ArrayIndexing	op_array -> try_catch_array [ i ]		97696	0					
ANR	98043	PtrMemberAccess	op_array -> try_catch_array		97696	0					
ANR	98044	Identifier	op_array		97696	0					
ANR	98045	Identifier	try_catch_array		97696	1					
ANR	98046	Identifier	i		97696	1					
ANR	98047	Identifier	try_op		97696	1					
ANR	98048	RelationalExpression	dst_num > op_array -> try_catch_array [ i ] . finally_end		97696	1		>			
ANR	98049	Identifier	dst_num		97696	0					
ANR	98050	MemberAccess	op_array -> try_catch_array [ i ] . finally_end		97696	1					
ANR	98051	ArrayIndexing	op_array -> try_catch_array [ i ]		97696	0					
ANR	98052	PtrMemberAccess	op_array -> try_catch_array		97696	0					
ANR	98053	Identifier	op_array		97696	0					
ANR	98054	Identifier	try_catch_array		97696	1					
ANR	98055	Identifier	i		97696	1					
ANR	98056	Identifier	finally_end		97696	1					
ANR	98057	CompoundStatement		52:59:2082:2082	97696	1					
ANR	98058	Statement	opline	614:5:17698:17703	97696	0	True				
ANR	98059	Statement	=	614:12:17705:17705	97696	1	True				
ANR	98060	Statement	get_next_op	614:14:17707:17717	97696	2	True				
ANR	98061	Statement	(	614:25:17718:17718	97696	3	True				
ANR	98062	Statement	op_array	614:26:17719:17726	97696	4	True				
ANR	98063	Statement	TSRMLS_CC	614:35:17728:17736	97696	5	True				
ANR	98064	Statement	)	614:44:17737:17737	97696	6	True				
ANR	98065	ExpressionStatement		614:45:17738:17738	97696	7	True				
ANR	98066	ExpressionStatement	opline -> opcode = ZEND_FAST_CALL	615:5:17745:17776	97696	8	True				
ANR	98067	AssignmentExpression	opline -> opcode = ZEND_FAST_CALL		97696	0		=			
ANR	98068	PtrMemberAccess	opline -> opcode		97696	0					
ANR	98069	Identifier	opline		97696	0					
ANR	98070	Identifier	opcode		97696	1					
ANR	98071	Identifier	ZEND_FAST_CALL		97696	1					
ANR	98072	ExpressionStatement	SET_UNUSED ( opline -> op1 )	616:5:17783:17806	97696	9	True				
ANR	98073	CallExpression	SET_UNUSED ( opline -> op1 )		97696	0					
ANR	98074	Callee	SET_UNUSED		97696	0					
ANR	98075	Identifier	SET_UNUSED		97696	0					
ANR	98076	ArgumentList	opline -> op1		97696	1					
ANR	98077	Argument	opline -> op1		97696	0					
ANR	98078	PtrMemberAccess	opline -> op1		97696	0					
ANR	98079	Identifier	opline		97696	0					
ANR	98080	Identifier	op1		97696	1					
ANR	98081	ExpressionStatement	SET_UNUSED ( opline -> op2 )	617:5:17813:17836	97696	10	True				
ANR	98082	CallExpression	SET_UNUSED ( opline -> op2 )		97696	0					
ANR	98083	Callee	SET_UNUSED		97696	0					
ANR	98084	Identifier	SET_UNUSED		97696	0					
ANR	98085	ArgumentList	opline -> op2		97696	1					
ANR	98086	Argument	opline -> op2		97696	0					
ANR	98087	PtrMemberAccess	opline -> op2		97696	0					
ANR	98088	Identifier	opline		97696	0					
ANR	98089	Identifier	op2		97696	1					
ANR	98090	ExpressionStatement	opline -> op1 . opline_num = op_array -> try_catch_array [ i ] . finally_op	618:5:17843:17907	97696	11	True				
ANR	98091	AssignmentExpression	opline -> op1 . opline_num = op_array -> try_catch_array [ i ] . finally_op		97696	0		=			
ANR	98092	MemberAccess	opline -> op1 . opline_num		97696	0					
ANR	98093	PtrMemberAccess	opline -> op1		97696	0					
ANR	98094	Identifier	opline		97696	0					
ANR	98095	Identifier	op1		97696	1					
ANR	98096	Identifier	opline_num		97696	1					
ANR	98097	MemberAccess	op_array -> try_catch_array [ i ] . finally_op		97696	1					
ANR	98098	ArrayIndexing	op_array -> try_catch_array [ i ]		97696	0					
ANR	98099	PtrMemberAccess	op_array -> try_catch_array		97696	0					
ANR	98100	Identifier	op_array		97696	0					
ANR	98101	Identifier	try_catch_array		97696	1					
ANR	98102	Identifier	i		97696	1					
ANR	98103	Identifier	finally_op		97696	1					
ANR	98104	Statement	opline	623:3:17974:17979	97696	41	True				
ANR	98105	Statement	=	623:10:17981:17981	97696	42	True				
ANR	98106	Statement	get_next_op	623:12:17983:17993	97696	43	True				
ANR	98107	Statement	(	623:23:17994:17994	97696	44	True				
ANR	98108	Statement	op_array	623:24:17995:18002	97696	45	True				
ANR	98109	Statement	TSRMLS_CC	623:33:18004:18012	97696	46	True				
ANR	98110	Statement	)	623:42:18013:18013	97696	47	True				
ANR	98111	ExpressionStatement		623:43:18014:18014	97696	48	True				
ANR	98112	ExpressionStatement	* opline = op_array -> opcodes [ op_num ]	624:3:18019:18054	97696	49	True				
ANR	98113	AssignmentExpression	* opline = op_array -> opcodes [ op_num ]		97696	0		=			
ANR	98114	UnaryOperationExpression	* opline		97696	0					
ANR	98115	UnaryOperator	*		97696	0					
ANR	98116	Identifier	opline		97696	1					
ANR	98117	ArrayIndexing	op_array -> opcodes [ op_num ]		97696	1					
ANR	98118	PtrMemberAccess	op_array -> opcodes		97696	0					
ANR	98119	Identifier	op_array		97696	0					
ANR	98120	Identifier	opcodes		97696	1					
ANR	98121	Identifier	op_num		97696	1					
ANR	98122	ExpressionStatement	opline = op_array -> opcodes + op_num	627:3:18120:18155	97696	50	True				
ANR	98123	AssignmentExpression	opline = op_array -> opcodes + op_num		97696	0		=			
ANR	98124	Identifier	opline		97696	0					
ANR	98125	AdditiveExpression	op_array -> opcodes + op_num		97696	1		+			
ANR	98126	PtrMemberAccess	op_array -> opcodes		97696	0					
ANR	98127	Identifier	op_array		97696	0					
ANR	98128	Identifier	opcodes		97696	1					
ANR	98129	Identifier	op_num		97696	1					
ANR	98130	ExpressionStatement	opline -> opcode = ZEND_JMP	628:3:18160:18185	97696	51	True				
ANR	98131	AssignmentExpression	opline -> opcode = ZEND_JMP		97696	0		=			
ANR	98132	PtrMemberAccess	opline -> opcode		97696	0					
ANR	98133	Identifier	opline		97696	0					
ANR	98134	Identifier	opcode		97696	1					
ANR	98135	Identifier	ZEND_JMP		97696	1					
ANR	98136	ExpressionStatement	SET_UNUSED ( opline -> op1 )	629:3:18190:18213	97696	52	True				
ANR	98137	CallExpression	SET_UNUSED ( opline -> op1 )		97696	0					
ANR	98138	Callee	SET_UNUSED		97696	0					
ANR	98139	Identifier	SET_UNUSED		97696	0					
ANR	98140	ArgumentList	opline -> op1		97696	1					
ANR	98141	Argument	opline -> op1		97696	0					
ANR	98142	PtrMemberAccess	opline -> op1		97696	0					
ANR	98143	Identifier	opline		97696	0					
ANR	98144	Identifier	op1		97696	1					
ANR	98145	ExpressionStatement	SET_UNUSED ( opline -> op2 )	630:3:18218:18241	97696	53	True				
ANR	98146	CallExpression	SET_UNUSED ( opline -> op2 )		97696	0					
ANR	98147	Callee	SET_UNUSED		97696	0					
ANR	98148	Identifier	SET_UNUSED		97696	0					
ANR	98149	ArgumentList	opline -> op2		97696	1					
ANR	98150	Argument	opline -> op2		97696	0					
ANR	98151	PtrMemberAccess	opline -> op2		97696	0					
ANR	98152	Identifier	opline		97696	0					
ANR	98153	Identifier	op2		97696	1					
ANR	98154	ExpressionStatement	opline -> op1 . opline_num = start_op	631:3:18246:18279	97696	54	True				
ANR	98155	AssignmentExpression	opline -> op1 . opline_num = start_op		97696	0		=			
ANR	98156	MemberAccess	opline -> op1 . opline_num		97696	0					
ANR	98157	PtrMemberAccess	opline -> op1		97696	0					
ANR	98158	Identifier	opline		97696	0					
ANR	98159	Identifier	op1		97696	1					
ANR	98160	Identifier	opline_num		97696	1					
ANR	98161	Identifier	start_op		97696	1					
ANR	98162	BreakStatement	break ;	633:3:18285:18290	97696	55	True				
ANR	98163	ReturnType	static void		97696	1					
ANR	98164	Identifier	zend_resolve_finally_call		97696	2					
ANR	98165	ParameterList	"zend_op_array * op_array , zend_uint op_num , zend_uint dst_num TSRMLS_DC"		97696	3					
ANR	98166	Parameter	zend_op_array * op_array	560:38:15535:15557	97696	0	True				
ANR	98167	ParameterType	zend_op_array *		97696	0					
ANR	98168	Identifier	op_array		97696	1					
ANR	98169	Parameter	zend_uint op_num	560:63:15560:15575	97696	1	True				
ANR	98170	ParameterType	zend_uint		97696	0					
ANR	98171	Identifier	op_num		97696	1					
ANR	98172	Parameter	zend_uint dst_num TSRMLS_DC	560:81:15578:15604	97696	2	True				
ANR	98173	ParameterType	zend_uint dst_num		97696	0					
ANR	98174	Identifier	TSRMLS_DC		97696	1					
ANR	98175	CFGEntryNode	ENTRY		97696		True				
ANR	98176	CFGExitNode	EXIT		97696		True				
ANR	98177	Symbol	opline -> op1		97696						
ANR	98178	Symbol	opline -> op2		97696						
ANR	98179	Symbol	op_array -> try_catch_array [ i ] . try_op		97696						
ANR	98180	Symbol	* op_array -> try_catch_array		97696						
ANR	98181	Symbol	TSRMLS_DC		97696						
ANR	98182	Symbol	opline -> extended_value		97696						
ANR	98183	Symbol	opline		97696						
ANR	98184	Symbol	op_array -> opcodes		97696						
ANR	98185	Symbol	op_array -> try_catch_array [ i ] . finally_end		97696						
ANR	98186	Symbol	op_array -> try_catch_array		97696						
ANR	98187	Symbol	ZEND_FAST_CALL		97696						
ANR	98188	Symbol	start_op		97696						
ANR	98189	Symbol	ZEND_FAST_CALL_FROM_CATCH		97696						
ANR	98190	Symbol	opline -> op2 . opline_num		97696						
ANR	98191	Symbol	opline -> op1 . opline_num		97696						
ANR	98192	Symbol	* op_num		97696						
ANR	98193	Symbol	op_num		97696						
ANR	98194	Symbol	i		97696						
ANR	98195	Symbol	* op_array		97696						
ANR	98196	Symbol	op_array -> last_try_catch		97696						
ANR	98197	Symbol	op_array -> try_catch_array [ i ] . finally_op		97696						
ANR	98198	Symbol	* i		97696						
ANR	98199	Symbol	ZEND_JMP		97696						
ANR	98200	Symbol	* opline		97696						
ANR	98201	Symbol	opline -> opcode		97696						
ANR	98202	Symbol	dst_num		97696						
ANR	98203	Symbol	op_array -> try_catch_array [ i ] . catch_op		97696						
ANR	98204	Symbol	* * op_array		97696						
ANR	98205	Symbol	get_next_op_number		97696						
ANR	98206	Symbol	op_array		97696						
ANR	98207	Symbol	* op_array -> opcodes		97696						
ANR	98208	Function	zend_resolve_finally_ret	638:0:18303:19320							
ANR	98209	FunctionDef	"zend_resolve_finally_ret (zend_op_array * op_array , zend_uint op_num TSRMLS_DC)"		98208	0					
ANR	98210	CompoundStatement		639:0:18393:19320	98208	0					
ANR	98211	IdentifierDeclStatement	int i ;	640:1:18396:18401	98208	0	True				
ANR	98212	IdentifierDecl	i		98208	0					
ANR	98213	IdentifierDeclType	int		98208	0					
ANR	98214	Identifier	i		98208	1					
ANR	98215	IdentifierDeclStatement	"zend_uint catch_op_num = 0 , finally_op_num = 0 ;"	641:1:18404:18450	98208	1	True				
ANR	98216	IdentifierDecl	catch_op_num = 0		98208	0					
ANR	98217	IdentifierDeclType	zend_uint		98208	0					
ANR	98218	Identifier	catch_op_num		98208	1					
ANR	98219	AssignmentExpression	catch_op_num = 0		98208	2		=			
ANR	98220	Identifier	catch_op_num		98208	0					
ANR	98221	PrimaryExpression	0		98208	1					
ANR	98222	IdentifierDecl	finally_op_num = 0		98208	1					
ANR	98223	IdentifierDeclType	zend_uint		98208	0					
ANR	98224	Identifier	finally_op_num		98208	1					
ANR	98225	AssignmentExpression	finally_op_num = 0		98208	2		=			
ANR	98226	Identifier	finally_op_num		98208	0					
ANR	98227	PrimaryExpression	0		98208	1					
ANR	98228	ForStatement	for ( i = 0 ; i < op_array -> last_try_catch ; i ++ )		98208	2					
ANR	98229	ForInit	i = 0 ;	643:6:18459:18464	98208	0	True				
ANR	98230	AssignmentExpression	i = 0		98208	0		=			
ANR	98231	Identifier	i		98208	0					
ANR	98232	PrimaryExpression	0		98208	1					
ANR	98233	Condition	i < op_array -> last_try_catch	643:13:18466:18493	98208	1	True				
ANR	98234	RelationalExpression	i < op_array -> last_try_catch		98208	0		<			
ANR	98235	Identifier	i		98208	0					
ANR	98236	PtrMemberAccess	op_array -> last_try_catch		98208	1					
ANR	98237	Identifier	op_array		98208	0					
ANR	98238	Identifier	last_try_catch		98208	1					
ANR	98239	PostIncDecOperationExpression	i ++	643:43:18496:18498	98208	2	True				
ANR	98240	Identifier	i		98208	0					
ANR	98241	IncDec	++		98208	1					
ANR	98242	CompoundStatement		5:48:107:107	98208	3					
ANR	98243	IfStatement	if ( op_array -> try_catch_array [ i ] . try_op > op_num )		98208	0					
ANR	98244	Condition	op_array -> try_catch_array [ i ] . try_op > op_num	644:6:18509:18552	98208	0	True				
ANR	98245	RelationalExpression	op_array -> try_catch_array [ i ] . try_op > op_num		98208	0		>			
ANR	98246	MemberAccess	op_array -> try_catch_array [ i ] . try_op		98208	0					
ANR	98247	ArrayIndexing	op_array -> try_catch_array [ i ]		98208	0					
ANR	98248	PtrMemberAccess	op_array -> try_catch_array		98208	0					
ANR	98249	Identifier	op_array		98208	0					
ANR	98250	Identifier	try_catch_array		98208	1					
ANR	98251	Identifier	i		98208	1					
ANR	98252	Identifier	try_op		98208	1					
ANR	98253	Identifier	op_num		98208	1					
ANR	98254	CompoundStatement		6:52:161:161	98208	1					
ANR	98255	BreakStatement	break ;	645:3:18560:18565	98208	0	True				
ANR	98256	IfStatement	if ( op_num < op_array -> try_catch_array [ i ] . finally_op )		98208	1					
ANR	98257	Condition	op_num < op_array -> try_catch_array [ i ] . finally_op	647:6:18577:18624	98208	0	True				
ANR	98258	RelationalExpression	op_num < op_array -> try_catch_array [ i ] . finally_op		98208	0		<			
ANR	98259	Identifier	op_num		98208	0					
ANR	98260	MemberAccess	op_array -> try_catch_array [ i ] . finally_op		98208	1					
ANR	98261	ArrayIndexing	op_array -> try_catch_array [ i ]		98208	0					
ANR	98262	PtrMemberAccess	op_array -> try_catch_array		98208	0					
ANR	98263	Identifier	op_array		98208	0					
ANR	98264	Identifier	try_catch_array		98208	1					
ANR	98265	Identifier	i		98208	1					
ANR	98266	Identifier	finally_op		98208	1					
ANR	98267	CompoundStatement		9:56:233:233	98208	1					
ANR	98268	ExpressionStatement	finally_op_num = op_array -> try_catch_array [ i ] . finally_op	648:3:18632:18688	98208	0	True				
ANR	98269	AssignmentExpression	finally_op_num = op_array -> try_catch_array [ i ] . finally_op		98208	0		=			
ANR	98270	Identifier	finally_op_num		98208	0					
ANR	98271	MemberAccess	op_array -> try_catch_array [ i ] . finally_op		98208	1					
ANR	98272	ArrayIndexing	op_array -> try_catch_array [ i ]		98208	0					
ANR	98273	PtrMemberAccess	op_array -> try_catch_array		98208	0					
ANR	98274	Identifier	op_array		98208	0					
ANR	98275	Identifier	try_catch_array		98208	1					
ANR	98276	Identifier	i		98208	1					
ANR	98277	Identifier	finally_op		98208	1					
ANR	98278	IfStatement	if ( op_num < op_array -> try_catch_array [ i ] . catch_op )		98208	2					
ANR	98279	Condition	op_num < op_array -> try_catch_array [ i ] . catch_op	650:6:18700:18745	98208	0	True				
ANR	98280	RelationalExpression	op_num < op_array -> try_catch_array [ i ] . catch_op		98208	0		<			
ANR	98281	Identifier	op_num		98208	0					
ANR	98282	MemberAccess	op_array -> try_catch_array [ i ] . catch_op		98208	1					
ANR	98283	ArrayIndexing	op_array -> try_catch_array [ i ]		98208	0					
ANR	98284	PtrMemberAccess	op_array -> try_catch_array		98208	0					
ANR	98285	Identifier	op_array		98208	0					
ANR	98286	Identifier	try_catch_array		98208	1					
ANR	98287	Identifier	i		98208	1					
ANR	98288	Identifier	catch_op		98208	1					
ANR	98289	CompoundStatement		12:54:354:354	98208	1					
ANR	98290	ExpressionStatement	catch_op_num = op_array -> try_catch_array [ i ] . catch_op	651:3:18753:18805	98208	0	True				
ANR	98291	AssignmentExpression	catch_op_num = op_array -> try_catch_array [ i ] . catch_op		98208	0		=			
ANR	98292	Identifier	catch_op_num		98208	0					
ANR	98293	MemberAccess	op_array -> try_catch_array [ i ] . catch_op		98208	1					
ANR	98294	ArrayIndexing	op_array -> try_catch_array [ i ]		98208	0					
ANR	98295	PtrMemberAccess	op_array -> try_catch_array		98208	0					
ANR	98296	Identifier	op_array		98208	0					
ANR	98297	Identifier	try_catch_array		98208	1					
ANR	98298	Identifier	i		98208	1					
ANR	98299	Identifier	catch_op		98208	1					
ANR	98300	IfStatement	if ( finally_op_num && ( ! catch_op_num || catch_op_num >= finally_op_num ) )		98208	3					
ANR	98301	Condition	finally_op_num && ( ! catch_op_num || catch_op_num >= finally_op_num )	655:5:18820:18886	98208	0	True				
ANR	98302	AndExpression	finally_op_num && ( ! catch_op_num || catch_op_num >= finally_op_num )		98208	0		&&			
ANR	98303	Identifier	finally_op_num		98208	0					
ANR	98304	OrExpression	! catch_op_num || catch_op_num >= finally_op_num		98208	1		||			
ANR	98305	UnaryOperationExpression	! catch_op_num		98208	0					
ANR	98306	UnaryOperator	!		98208	0					
ANR	98307	Identifier	catch_op_num		98208	1					
ANR	98308	RelationalExpression	catch_op_num >= finally_op_num		98208	1		>=			
ANR	98309	Identifier	catch_op_num		98208	0					
ANR	98310	Identifier	finally_op_num		98208	1					
ANR	98311	CompoundStatement		17:74:495:495	98208	1					
ANR	98312	ExpressionStatement	op_array -> opcodes [ op_num ] . extended_value = ZEND_FAST_RET_TO_FINALLY	657:2:18963:19030	98208	0	True				
ANR	98313	AssignmentExpression	op_array -> opcodes [ op_num ] . extended_value = ZEND_FAST_RET_TO_FINALLY		98208	0		=			
ANR	98314	MemberAccess	op_array -> opcodes [ op_num ] . extended_value		98208	0					
ANR	98315	ArrayIndexing	op_array -> opcodes [ op_num ]		98208	0					
ANR	98316	PtrMemberAccess	op_array -> opcodes		98208	0					
ANR	98317	Identifier	op_array		98208	0					
ANR	98318	Identifier	opcodes		98208	1					
ANR	98319	Identifier	op_num		98208	1					
ANR	98320	Identifier	extended_value		98208	1					
ANR	98321	Identifier	ZEND_FAST_RET_TO_FINALLY		98208	1					
ANR	98322	ExpressionStatement	op_array -> opcodes [ op_num ] . op2 . opline_num = finally_op_num	658:2:19034:19091	98208	1	True				
ANR	98323	AssignmentExpression	op_array -> opcodes [ op_num ] . op2 . opline_num = finally_op_num		98208	0		=			
ANR	98324	MemberAccess	op_array -> opcodes [ op_num ] . op2 . opline_num		98208	0					
ANR	98325	MemberAccess	op_array -> opcodes [ op_num ] . op2		98208	0					
ANR	98326	ArrayIndexing	op_array -> opcodes [ op_num ]		98208	0					
ANR	98327	PtrMemberAccess	op_array -> opcodes		98208	0					
ANR	98328	Identifier	op_array		98208	0					
ANR	98329	Identifier	opcodes		98208	1					
ANR	98330	Identifier	op_num		98208	1					
ANR	98331	Identifier	op2		98208	1					
ANR	98332	Identifier	opline_num		98208	1					
ANR	98333	Identifier	finally_op_num		98208	1					
ANR	98334	ElseStatement	else		98208	0					
ANR	98335	IfStatement	if ( catch_op_num )		98208	0					
ANR	98336	Condition	catch_op_num	659:12:19105:19116	98208	0	True				
ANR	98337	Identifier	catch_op_num		98208	0					
ANR	98338	CompoundStatement		21:26:725:725	98208	1					
ANR	98339	ExpressionStatement	op_array -> opcodes [ op_num ] . extended_value = ZEND_FAST_RET_TO_CATCH	661:2:19191:19256	98208	0	True				
ANR	98340	AssignmentExpression	op_array -> opcodes [ op_num ] . extended_value = ZEND_FAST_RET_TO_CATCH		98208	0		=			
ANR	98341	MemberAccess	op_array -> opcodes [ op_num ] . extended_value		98208	0					
ANR	98342	ArrayIndexing	op_array -> opcodes [ op_num ]		98208	0					
ANR	98343	PtrMemberAccess	op_array -> opcodes		98208	0					
ANR	98344	Identifier	op_array		98208	0					
ANR	98345	Identifier	opcodes		98208	1					
ANR	98346	Identifier	op_num		98208	1					
ANR	98347	Identifier	extended_value		98208	1					
ANR	98348	Identifier	ZEND_FAST_RET_TO_CATCH		98208	1					
ANR	98349	ExpressionStatement	op_array -> opcodes [ op_num ] . op2 . opline_num = catch_op_num	662:2:19260:19315	98208	1	True				
ANR	98350	AssignmentExpression	op_array -> opcodes [ op_num ] . op2 . opline_num = catch_op_num		98208	0		=			
ANR	98351	MemberAccess	op_array -> opcodes [ op_num ] . op2 . opline_num		98208	0					
ANR	98352	MemberAccess	op_array -> opcodes [ op_num ] . op2		98208	0					
ANR	98353	ArrayIndexing	op_array -> opcodes [ op_num ]		98208	0					
ANR	98354	PtrMemberAccess	op_array -> opcodes		98208	0					
ANR	98355	Identifier	op_array		98208	0					
ANR	98356	Identifier	opcodes		98208	1					
ANR	98357	Identifier	op_num		98208	1					
ANR	98358	Identifier	op2		98208	1					
ANR	98359	Identifier	opline_num		98208	1					
ANR	98360	Identifier	catch_op_num		98208	1					
ANR	98361	ReturnType	static void		98208	1					
ANR	98362	Identifier	zend_resolve_finally_ret		98208	2					
ANR	98363	ParameterList	"zend_op_array * op_array , zend_uint op_num TSRMLS_DC"		98208	3					
ANR	98364	Parameter	zend_op_array * op_array	638:37:18340:18362	98208	0	True				
ANR	98365	ParameterType	zend_op_array *		98208	0					
ANR	98366	Identifier	op_array		98208	1					
ANR	98367	Parameter	zend_uint op_num TSRMLS_DC	638:62:18365:18390	98208	1	True				
ANR	98368	ParameterType	zend_uint op_num		98208	0					
ANR	98369	Identifier	TSRMLS_DC		98208	1					
ANR	98370	CFGEntryNode	ENTRY		98208		True				
ANR	98371	CFGExitNode	EXIT		98208		True				
ANR	98372	Symbol	ZEND_FAST_RET_TO_CATCH		98208						
ANR	98373	Symbol	op_array -> opcodes [ op_num ] . op2		98208						
ANR	98374	Symbol	op_array -> try_catch_array [ i ] . try_op		98208						
ANR	98375	Symbol	* op_num		98208						
ANR	98376	Symbol	catch_op_num		98208						
ANR	98377	Symbol	i		98208						
ANR	98378	Symbol	* op_array -> try_catch_array		98208						
ANR	98379	Symbol	op_num		98208						
ANR	98380	Symbol	TSRMLS_DC		98208						
ANR	98381	Symbol	* op_array		98208						
ANR	98382	Symbol	op_array -> last_try_catch		98208						
ANR	98383	Symbol	op_array -> try_catch_array [ i ] . finally_op		98208						
ANR	98384	Symbol	op_array -> opcodes [ op_num ] . extended_value		98208						
ANR	98385	Symbol	* i		98208						
ANR	98386	Symbol	op_array -> opcodes		98208						
ANR	98387	Symbol	ZEND_FAST_RET_TO_FINALLY		98208						
ANR	98388	Symbol	finally_op_num		98208						
ANR	98389	Symbol	op_array -> try_catch_array [ i ] . catch_op		98208						
ANR	98390	Symbol	op_array -> opcodes [ op_num ] . op2 . opline_num		98208						
ANR	98391	Symbol	op_array -> try_catch_array		98208						
ANR	98392	Symbol	* * op_array		98208						
ANR	98393	Symbol	op_array		98208						
ANR	98394	Symbol	* op_array -> opcodes		98208						
ANR	98395	DeclStmt									
ANR	98396	Decl							zend_uint	zend_uint	i
ANR	98397	Decl							zend_uint	zend_uint	j
ANR	98398	DeclStmt									
ANR	98399	Decl							zend_op	zend_op *	opline
ANR	98400	DeclStmt									
ANR	98401	Decl							int	int	nest_levels
ANR	98402	Decl							int	int	array_offset
ANR	98403	DeclStmt									
ANR	98404	Decl							zend_brk_cont_element	zend_brk_cont_element *	jmp_to
ANR	98405	DeclStmt									
ANR	98406	Decl							zend_uint	zend_uint	num
ANR	98407	DeclStmt									
ANR	98408	Decl							zend_op	zend_op *	opline
ANR	98409	Decl							zend_op	zend_op *	end
ANR	98410	Function	get_unary_op	805:0:23911:24194							
ANR	98411	FunctionDef	get_unary_op (int opcode)		98410	0					
ANR	98412	CompoundStatement		806:0:23959:24194	98410	0					
ANR	98413	SwitchStatement	switch ( opcode )		98410	0					
ANR	98414	Condition	opcode	807:9:23970:23975	98410	0	True				
ANR	98415	Identifier	opcode		98410	0					
ANR	98416	CompoundStatement		2:17:18:18	98410	1					
ANR	98417	Label	case ZEND_BW_NOT :	808:2:23982:23998	98410	0	True				
ANR	98418	Identifier	ZEND_BW_NOT		98410	0					
ANR	98419	ReturnStatement	return ( unary_op_type ) bitwise_not_function ;	809:3:24003:24046	98410	1	True				
ANR	98420	CastExpression	( unary_op_type ) bitwise_not_function		98410	0					
ANR	98421	CastTarget	unary_op_type		98410	0					
ANR	98422	Identifier	bitwise_not_function		98410	1					
ANR	98423	BreakStatement	break ;	810:3:24051:24056	98410	2	True				
ANR	98424	Label	case ZEND_BOOL_NOT :	811:2:24060:24078	98410	3	True				
ANR	98425	Identifier	ZEND_BOOL_NOT		98410	0					
ANR	98426	ReturnStatement	return ( unary_op_type ) boolean_not_function ;	812:3:24083:24126	98410	4	True				
ANR	98427	CastExpression	( unary_op_type ) boolean_not_function		98410	0					
ANR	98428	CastTarget	unary_op_type		98410	0					
ANR	98429	Identifier	boolean_not_function		98410	1					
ANR	98430	BreakStatement	break ;	813:3:24131:24136	98410	5	True				
ANR	98431	Label	default :	814:2:24140:24147	98410	6	True				
ANR	98432	Identifier	default		98410	0					
ANR	98433	ReturnStatement	return ( unary_op_type ) NULL ;	815:3:24152:24179	98410	7	True				
ANR	98434	CastExpression	( unary_op_type ) NULL		98410	0					
ANR	98435	CastTarget	unary_op_type		98410	0					
ANR	98436	Identifier	NULL		98410	1					
ANR	98437	BreakStatement	break ;	816:3:24184:24189	98410	8	True				
ANR	98438	ReturnType	ZEND_API unary_op_type		98410	1					
ANR	98439	Identifier	get_unary_op		98410	2					
ANR	98440	ParameterList	int opcode		98410	3					
ANR	98441	Parameter	int opcode	805:36:23947:23956	98410	0	True				
ANR	98442	ParameterType	int		98410	0					
ANR	98443	Identifier	opcode		98410	1					
ANR	98444	CFGEntryNode	ENTRY		98410		True				
ANR	98445	CFGExitNode	EXIT		98410		True				
ANR	98446	Symbol	NULL		98410						
ANR	98447	Symbol	bitwise_not_function		98410						
ANR	98448	Symbol	opcode		98410						
ANR	98449	Symbol	boolean_not_function		98410						
ANR	98450	Function	get_binary_op	820:0:24197:26071							
ANR	98451	FunctionDef	get_binary_op (int opcode)		98450	0					
ANR	98452	CompoundStatement		821:0:24247:26071	98450	0					
ANR	98453	SwitchStatement	switch ( opcode )		98450	0					
ANR	98454	Condition	opcode	822:9:24258:24263	98450	0	True				
ANR	98455	Identifier	opcode		98450	0					
ANR	98456	CompoundStatement		2:17:18:18	98450	1					
ANR	98457	Label	case ZEND_ADD :	823:2:24270:24283	98450	0	True				
ANR	98458	Identifier	ZEND_ADD		98450	0					
ANR	98459	Label	case ZEND_ASSIGN_ADD :	824:2:24287:24307	98450	1	True				
ANR	98460	Identifier	ZEND_ASSIGN_ADD		98450	0					
ANR	98461	ReturnStatement	return ( binary_op_type ) add_function ;	825:3:24312:24348	98450	2	True				
ANR	98462	CastExpression	( binary_op_type ) add_function		98450	0					
ANR	98463	CastTarget	binary_op_type		98450	0					
ANR	98464	Identifier	add_function		98450	1					
ANR	98465	BreakStatement	break ;	826:3:24353:24358	98450	3	True				
ANR	98466	Label	case ZEND_SUB :	827:2:24362:24375	98450	4	True				
ANR	98467	Identifier	ZEND_SUB		98450	0					
ANR	98468	Label	case ZEND_ASSIGN_SUB :	828:2:24379:24399	98450	5	True				
ANR	98469	Identifier	ZEND_ASSIGN_SUB		98450	0					
ANR	98470	ReturnStatement	return ( binary_op_type ) sub_function ;	829:3:24404:24440	98450	6	True				
ANR	98471	CastExpression	( binary_op_type ) sub_function		98450	0					
ANR	98472	CastTarget	binary_op_type		98450	0					
ANR	98473	Identifier	sub_function		98450	1					
ANR	98474	BreakStatement	break ;	830:3:24445:24450	98450	7	True				
ANR	98475	Label	case ZEND_MUL :	831:2:24454:24467	98450	8	True				
ANR	98476	Identifier	ZEND_MUL		98450	0					
ANR	98477	Label	case ZEND_ASSIGN_MUL :	832:2:24471:24491	98450	9	True				
ANR	98478	Identifier	ZEND_ASSIGN_MUL		98450	0					
ANR	98479	ReturnStatement	return ( binary_op_type ) mul_function ;	833:3:24496:24532	98450	10	True				
ANR	98480	CastExpression	( binary_op_type ) mul_function		98450	0					
ANR	98481	CastTarget	binary_op_type		98450	0					
ANR	98482	Identifier	mul_function		98450	1					
ANR	98483	BreakStatement	break ;	834:3:24537:24542	98450	11	True				
ANR	98484	Label	case ZEND_POW :	835:2:24546:24559	98450	12	True				
ANR	98485	Identifier	ZEND_POW		98450	0					
ANR	98486	ReturnStatement	return ( binary_op_type ) pow_function ;	836:3:24564:24600	98450	13	True				
ANR	98487	CastExpression	( binary_op_type ) pow_function		98450	0					
ANR	98488	CastTarget	binary_op_type		98450	0					
ANR	98489	Identifier	pow_function		98450	1					
ANR	98490	BreakStatement	break ;	837:3:24605:24610	98450	14	True				
ANR	98491	Label	case ZEND_DIV :	838:2:24614:24627	98450	15	True				
ANR	98492	Identifier	ZEND_DIV		98450	0					
ANR	98493	Label	case ZEND_ASSIGN_DIV :	839:2:24631:24651	98450	16	True				
ANR	98494	Identifier	ZEND_ASSIGN_DIV		98450	0					
ANR	98495	ReturnStatement	return ( binary_op_type ) div_function ;	840:3:24656:24692	98450	17	True				
ANR	98496	CastExpression	( binary_op_type ) div_function		98450	0					
ANR	98497	CastTarget	binary_op_type		98450	0					
ANR	98498	Identifier	div_function		98450	1					
ANR	98499	BreakStatement	break ;	841:3:24697:24702	98450	18	True				
ANR	98500	Label	case ZEND_MOD :	842:2:24706:24719	98450	19	True				
ANR	98501	Identifier	ZEND_MOD		98450	0					
ANR	98502	Label	case ZEND_ASSIGN_MOD :	843:2:24723:24743	98450	20	True				
ANR	98503	Identifier	ZEND_ASSIGN_MOD		98450	0					
ANR	98504	ReturnStatement	return ( binary_op_type ) mod_function ;	844:3:24748:24784	98450	21	True				
ANR	98505	CastExpression	( binary_op_type ) mod_function		98450	0					
ANR	98506	CastTarget	binary_op_type		98450	0					
ANR	98507	Identifier	mod_function		98450	1					
ANR	98508	BreakStatement	break ;	845:3:24789:24794	98450	22	True				
ANR	98509	Label	case ZEND_SL :	846:2:24798:24810	98450	23	True				
ANR	98510	Identifier	ZEND_SL		98450	0					
ANR	98511	Label	case ZEND_ASSIGN_SL :	847:2:24814:24833	98450	24	True				
ANR	98512	Identifier	ZEND_ASSIGN_SL		98450	0					
ANR	98513	ReturnStatement	return ( binary_op_type ) shift_left_function ;	848:3:24838:24881	98450	25	True				
ANR	98514	CastExpression	( binary_op_type ) shift_left_function		98450	0					
ANR	98515	CastTarget	binary_op_type		98450	0					
ANR	98516	Identifier	shift_left_function		98450	1					
ANR	98517	BreakStatement	break ;	849:3:24886:24891	98450	26	True				
ANR	98518	Label	case ZEND_SR :	850:2:24895:24907	98450	27	True				
ANR	98519	Identifier	ZEND_SR		98450	0					
ANR	98520	Label	case ZEND_ASSIGN_SR :	851:2:24911:24930	98450	28	True				
ANR	98521	Identifier	ZEND_ASSIGN_SR		98450	0					
ANR	98522	ReturnStatement	return ( binary_op_type ) shift_right_function ;	852:3:24935:24979	98450	29	True				
ANR	98523	CastExpression	( binary_op_type ) shift_right_function		98450	0					
ANR	98524	CastTarget	binary_op_type		98450	0					
ANR	98525	Identifier	shift_right_function		98450	1					
ANR	98526	BreakStatement	break ;	853:3:24984:24989	98450	30	True				
ANR	98527	Label	case ZEND_CONCAT :	854:2:24993:25009	98450	31	True				
ANR	98528	Identifier	ZEND_CONCAT		98450	0					
ANR	98529	Label	case ZEND_ASSIGN_CONCAT :	855:2:25013:25036	98450	32	True				
ANR	98530	Identifier	ZEND_ASSIGN_CONCAT		98450	0					
ANR	98531	ReturnStatement	return ( binary_op_type ) concat_function ;	856:3:25041:25080	98450	33	True				
ANR	98532	CastExpression	( binary_op_type ) concat_function		98450	0					
ANR	98533	CastTarget	binary_op_type		98450	0					
ANR	98534	Identifier	concat_function		98450	1					
ANR	98535	BreakStatement	break ;	857:3:25085:25090	98450	34	True				
ANR	98536	Label	case ZEND_IS_IDENTICAL :	858:2:25094:25116	98450	35	True				
ANR	98537	Identifier	ZEND_IS_IDENTICAL		98450	0					
ANR	98538	ReturnStatement	return ( binary_op_type ) is_identical_function ;	859:3:25121:25166	98450	36	True				
ANR	98539	CastExpression	( binary_op_type ) is_identical_function		98450	0					
ANR	98540	CastTarget	binary_op_type		98450	0					
ANR	98541	Identifier	is_identical_function		98450	1					
ANR	98542	BreakStatement	break ;	860:3:25171:25176	98450	37	True				
ANR	98543	Label	case ZEND_IS_NOT_IDENTICAL :	861:2:25180:25206	98450	38	True				
ANR	98544	Identifier	ZEND_IS_NOT_IDENTICAL		98450	0					
ANR	98545	ReturnStatement	return ( binary_op_type ) is_not_identical_function ;	862:3:25211:25260	98450	39	True				
ANR	98546	CastExpression	( binary_op_type ) is_not_identical_function		98450	0					
ANR	98547	CastTarget	binary_op_type		98450	0					
ANR	98548	Identifier	is_not_identical_function		98450	1					
ANR	98549	BreakStatement	break ;	863:3:25265:25270	98450	40	True				
ANR	98550	Label	case ZEND_IS_EQUAL :	864:2:25274:25292	98450	41	True				
ANR	98551	Identifier	ZEND_IS_EQUAL		98450	0					
ANR	98552	ReturnStatement	return ( binary_op_type ) is_equal_function ;	865:3:25297:25338	98450	42	True				
ANR	98553	CastExpression	( binary_op_type ) is_equal_function		98450	0					
ANR	98554	CastTarget	binary_op_type		98450	0					
ANR	98555	Identifier	is_equal_function		98450	1					
ANR	98556	BreakStatement	break ;	866:3:25343:25348	98450	43	True				
ANR	98557	Label	case ZEND_IS_NOT_EQUAL :	867:2:25352:25374	98450	44	True				
ANR	98558	Identifier	ZEND_IS_NOT_EQUAL		98450	0					
ANR	98559	ReturnStatement	return ( binary_op_type ) is_not_equal_function ;	868:3:25379:25424	98450	45	True				
ANR	98560	CastExpression	( binary_op_type ) is_not_equal_function		98450	0					
ANR	98561	CastTarget	binary_op_type		98450	0					
ANR	98562	Identifier	is_not_equal_function		98450	1					
ANR	98563	BreakStatement	break ;	869:3:25429:25434	98450	46	True				
ANR	98564	Label	case ZEND_IS_SMALLER :	870:2:25438:25458	98450	47	True				
ANR	98565	Identifier	ZEND_IS_SMALLER		98450	0					
ANR	98566	ReturnStatement	return ( binary_op_type ) is_smaller_function ;	871:3:25463:25506	98450	48	True				
ANR	98567	CastExpression	( binary_op_type ) is_smaller_function		98450	0					
ANR	98568	CastTarget	binary_op_type		98450	0					
ANR	98569	Identifier	is_smaller_function		98450	1					
ANR	98570	BreakStatement	break ;	872:3:25511:25516	98450	49	True				
ANR	98571	Label	case ZEND_IS_SMALLER_OR_EQUAL :	873:2:25520:25549	98450	50	True				
ANR	98572	Identifier	ZEND_IS_SMALLER_OR_EQUAL		98450	0					
ANR	98573	ReturnStatement	return ( binary_op_type ) is_smaller_or_equal_function ;	874:3:25554:25606	98450	51	True				
ANR	98574	CastExpression	( binary_op_type ) is_smaller_or_equal_function		98450	0					
ANR	98575	CastTarget	binary_op_type		98450	0					
ANR	98576	Identifier	is_smaller_or_equal_function		98450	1					
ANR	98577	BreakStatement	break ;	875:3:25611:25616	98450	52	True				
ANR	98578	Label	case ZEND_BW_OR :	876:2:25620:25635	98450	53	True				
ANR	98579	Identifier	ZEND_BW_OR		98450	0					
ANR	98580	Label	case ZEND_ASSIGN_BW_OR :	877:2:25639:25661	98450	54	True				
ANR	98581	Identifier	ZEND_ASSIGN_BW_OR		98450	0					
ANR	98582	ReturnStatement	return ( binary_op_type ) bitwise_or_function ;	878:3:25666:25709	98450	55	True				
ANR	98583	CastExpression	( binary_op_type ) bitwise_or_function		98450	0					
ANR	98584	CastTarget	binary_op_type		98450	0					
ANR	98585	Identifier	bitwise_or_function		98450	1					
ANR	98586	BreakStatement	break ;	879:3:25714:25719	98450	56	True				
ANR	98587	Label	case ZEND_BW_AND :	880:2:25723:25739	98450	57	True				
ANR	98588	Identifier	ZEND_BW_AND		98450	0					
ANR	98589	Label	case ZEND_ASSIGN_BW_AND :	881:2:25743:25766	98450	58	True				
ANR	98590	Identifier	ZEND_ASSIGN_BW_AND		98450	0					
ANR	98591	ReturnStatement	return ( binary_op_type ) bitwise_and_function ;	882:3:25771:25815	98450	59	True				
ANR	98592	CastExpression	( binary_op_type ) bitwise_and_function		98450	0					
ANR	98593	CastTarget	binary_op_type		98450	0					
ANR	98594	Identifier	bitwise_and_function		98450	1					
ANR	98595	BreakStatement	break ;	883:3:25820:25825	98450	60	True				
ANR	98596	Label	case ZEND_BW_XOR :	884:2:25829:25845	98450	61	True				
ANR	98597	Identifier	ZEND_BW_XOR		98450	0					
ANR	98598	Label	case ZEND_ASSIGN_BW_XOR :	885:2:25849:25872	98450	62	True				
ANR	98599	Identifier	ZEND_ASSIGN_BW_XOR		98450	0					
ANR	98600	ReturnStatement	return ( binary_op_type ) bitwise_xor_function ;	886:3:25877:25921	98450	63	True				
ANR	98601	CastExpression	( binary_op_type ) bitwise_xor_function		98450	0					
ANR	98602	CastTarget	binary_op_type		98450	0					
ANR	98603	Identifier	bitwise_xor_function		98450	1					
ANR	98604	BreakStatement	break ;	887:3:25926:25931	98450	64	True				
ANR	98605	Label	case ZEND_BOOL_XOR :	888:2:25935:25953	98450	65	True				
ANR	98606	Identifier	ZEND_BOOL_XOR		98450	0					
ANR	98607	ReturnStatement	return ( binary_op_type ) boolean_xor_function ;	889:3:25958:26002	98450	66	True				
ANR	98608	CastExpression	( binary_op_type ) boolean_xor_function		98450	0					
ANR	98609	CastTarget	binary_op_type		98450	0					
ANR	98610	Identifier	boolean_xor_function		98450	1					
ANR	98611	BreakStatement	break ;	890:3:26007:26012	98450	67	True				
ANR	98612	Label	default :	891:2:26016:26023	98450	68	True				
ANR	98613	Identifier	default		98450	0					
ANR	98614	ReturnStatement	return ( binary_op_type ) NULL ;	892:3:26028:26056	98450	69	True				
ANR	98615	CastExpression	( binary_op_type ) NULL		98450	0					
ANR	98616	CastTarget	binary_op_type		98450	0					
ANR	98617	Identifier	NULL		98450	1					
ANR	98618	BreakStatement	break ;	893:3:26061:26066	98450	70	True				
ANR	98619	ReturnType	ZEND_API binary_op_type		98450	1					
ANR	98620	Identifier	get_binary_op		98450	2					
ANR	98621	ParameterList	int opcode		98450	3					
ANR	98622	Parameter	int opcode	820:38:24235:24244	98450	0	True				
ANR	98623	ParameterType	int		98450	0					
ANR	98624	Identifier	opcode		98450	1					
ANR	98625	CFGEntryNode	ENTRY		98450		True				
ANR	98626	CFGExitNode	EXIT		98450		True				
ANR	98627	Symbol	is_identical_function		98450						
ANR	98628	Symbol	is_not_equal_function		98450						
ANR	98629	Symbol	bitwise_or_function		98450						
ANR	98630	Symbol	boolean_xor_function		98450						
ANR	98631	Symbol	NULL		98450						
ANR	98632	Symbol	mod_function		98450						
ANR	98633	Symbol	concat_function		98450						
ANR	98634	Symbol	pow_function		98450						
ANR	98635	Symbol	div_function		98450						
ANR	98636	Symbol	is_equal_function		98450						
ANR	98637	Symbol	bitwise_xor_function		98450						
ANR	98638	Symbol	mul_function		98450						
ANR	98639	Symbol	bitwise_and_function		98450						
ANR	98640	Symbol	shift_right_function		98450						
ANR	98641	Symbol	opcode		98450						
ANR	98642	Symbol	is_not_identical_function		98450						
ANR	98643	Symbol	sub_function		98450						
ANR	98644	Symbol	is_smaller_function		98450						
ANR	98645	Symbol	is_smaller_or_equal_function		98450						
ANR	98646	Symbol	shift_left_function		98450						
ANR	98647	Symbol	add_function		98450						
