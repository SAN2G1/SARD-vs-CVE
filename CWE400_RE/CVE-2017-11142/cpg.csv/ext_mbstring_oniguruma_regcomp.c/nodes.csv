command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	697112	File	data/converged/CVE-2017-11142_php-src/ext_mbstring_oniguruma_regcomp.c								
ANR	697113	DeclStmt									
ANR	697114	Decl							OnigCaseFoldType	OnigCaseFoldType	OnigDefaultCaseFoldFlag
ANR	697115	Function	onig_get_default_case_fold_flag	34:0:1678:1776							
ANR	697116	FunctionDef	onig_get_default_case_fold_flag ()		697115	0					
ANR	697117	CompoundStatement		36:0:1740:1776	697115	0					
ANR	697118	ReturnStatement	return OnigDefaultCaseFoldFlag ;	37:2:1744:1774	697115	0	True				
ANR	697119	Identifier	OnigDefaultCaseFoldFlag		697115	0					
ANR	697120	ReturnType	extern OnigCaseFoldType		697115	1					
ANR	697121	Identifier	onig_get_default_case_fold_flag		697115	2					
ANR	697122	ParameterList			697115	3					
ANR	697123	CFGEntryNode	ENTRY		697115		True				
ANR	697124	CFGExitNode	EXIT		697115		True				
ANR	697125	Symbol	OnigDefaultCaseFoldFlag		697115						
ANR	697126	Function	onig_set_default_case_fold_flag	40:0:1779:1913							
ANR	697127	FunctionDef	onig_set_default_case_fold_flag (OnigCaseFoldType case_fold_flag)		697126	0					
ANR	697128	CompoundStatement		42:0:1855:1913	697126	0					
ANR	697129	ExpressionStatement	OnigDefaultCaseFoldFlag = case_fold_flag	43:2:1859:1899	697126	0	True				
ANR	697130	AssignmentExpression	OnigDefaultCaseFoldFlag = case_fold_flag		697126	0		=			
ANR	697131	Identifier	OnigDefaultCaseFoldFlag		697126	0					
ANR	697132	Identifier	case_fold_flag		697126	1					
ANR	697133	ReturnStatement	return 0 ;	44:2:1903:1911	697126	1	True				
ANR	697134	PrimaryExpression	0		697126	0					
ANR	697135	ReturnType	extern int		697126	1					
ANR	697136	Identifier	onig_set_default_case_fold_flag		697126	2					
ANR	697137	ParameterList	OnigCaseFoldType case_fold_flag		697126	3					
ANR	697138	Parameter	OnigCaseFoldType case_fold_flag	41:32:1822:1852	697126	0	True				
ANR	697139	ParameterType	OnigCaseFoldType		697126	0					
ANR	697140	Identifier	case_fold_flag		697126	1					
ANR	697141	CFGEntryNode	ENTRY		697126		True				
ANR	697142	CFGExitNode	EXIT		697126		True				
ANR	697143	Symbol	OnigDefaultCaseFoldFlag		697126						
ANR	697144	Symbol	case_fold_flag		697126						
ANR	697145	DeclStmt									
ANR	697146	Decl							unsigned char	unsigned char [ WORD_ALIGNMENT_SIZE ]	PadBuf
ANR	697147	Function	str_dup	52:0:2014:2253							
ANR	697148	FunctionDef	"str_dup (UChar * s , UChar * end)"		697147	0					
ANR	697149	CompoundStatement		54:0:2058:2253	697147	0					
ANR	697150	IdentifierDeclStatement	int len = end - s ;	55:2:2062:2079	697147	0	True				
ANR	697151	IdentifierDecl	len = end - s		697147	0					
ANR	697152	IdentifierDeclType	int		697147	0					
ANR	697153	Identifier	len		697147	1					
ANR	697154	AssignmentExpression	len = end - s		697147	2		=			
ANR	697155	Identifier	len		697147	0					
ANR	697156	AdditiveExpression	end - s		697147	1		-			
ANR	697157	Identifier	end		697147	0					
ANR	697158	Identifier	s		697147	1					
ANR	697159	IfStatement	if ( len > 0 )		697147	1					
ANR	697160	Condition	len > 0	57:6:2088:2094	697147	0	True				
ANR	697161	RelationalExpression	len > 0		697147	0		>			
ANR	697162	Identifier	len		697147	0					
ANR	697163	PrimaryExpression	0		697147	1					
ANR	697164	CompoundStatement		5:4:44:80	697147	1					
ANR	697165	IdentifierDeclStatement	UChar * r = ( UChar * ) xmalloc ( len + 1 ) ;	58:4:2103:2139	697147	0	True				
ANR	697166	IdentifierDecl	* r = ( UChar * ) xmalloc ( len + 1 )		697147	0					
ANR	697167	IdentifierDeclType	UChar *		697147	0					
ANR	697168	Identifier	r		697147	1					
ANR	697169	AssignmentExpression	* r = ( UChar * ) xmalloc ( len + 1 )		697147	2		=			
ANR	697170	Identifier	r		697147	0					
ANR	697171	CastExpression	( UChar * ) xmalloc ( len + 1 )		697147	1					
ANR	697172	CastTarget	UChar *		697147	0					
ANR	697173	CallExpression	xmalloc ( len + 1 )		697147	1					
ANR	697174	Callee	xmalloc		697147	0					
ANR	697175	Identifier	xmalloc		697147	0					
ANR	697176	ArgumentList	len + 1		697147	1					
ANR	697177	Argument	len + 1		697147	0					
ANR	697178	AdditiveExpression	len + 1		697147	0		+			
ANR	697179	Identifier	len		697147	0					
ANR	697180	PrimaryExpression	1		697147	1					
ANR	697181	ExpressionStatement	CHECK_NULL_RETURN ( r )	59:4:2145:2165	697147	1	True				
ANR	697182	CallExpression	CHECK_NULL_RETURN ( r )		697147	0					
ANR	697183	Callee	CHECK_NULL_RETURN		697147	0					
ANR	697184	Identifier	CHECK_NULL_RETURN		697147	0					
ANR	697185	ArgumentList	r		697147	1					
ANR	697186	Argument	r		697147	0					
ANR	697187	Identifier	r		697147	0					
ANR	697188	ExpressionStatement	"xmemcpy ( r , s , len )"	60:4:2171:2189	697147	2	True				
ANR	697189	CallExpression	"xmemcpy ( r , s , len )"		697147	0					
ANR	697190	Callee	xmemcpy		697147	0					
ANR	697191	Identifier	xmemcpy		697147	0					
ANR	697192	ArgumentList	r		697147	1					
ANR	697193	Argument	r		697147	0					
ANR	697194	Identifier	r		697147	0					
ANR	697195	Argument	s		697147	1					
ANR	697196	Identifier	s		697147	0					
ANR	697197	Argument	len		697147	2					
ANR	697198	Identifier	len		697147	0					
ANR	697199	ExpressionStatement	r [ len ] = ( UChar ) 0	61:4:2195:2213	697147	3	True				
ANR	697200	AssignmentExpression	r [ len ] = ( UChar ) 0		697147	0		=			
ANR	697201	ArrayIndexing	r [ len ]		697147	0					
ANR	697202	Identifier	r		697147	0					
ANR	697203	Identifier	len		697147	1					
ANR	697204	CastExpression	( UChar ) 0		697147	1					
ANR	697205	CastTarget	UChar		697147	0					
ANR	697206	PrimaryExpression	0		697147	1					
ANR	697207	ReturnStatement	return r ;	62:4:2219:2227	697147	4	True				
ANR	697208	Identifier	r		697147	0					
ANR	697209	ElseStatement	else		697147	0					
ANR	697210	ReturnStatement	return NULL ;	64:7:2240:2251	697147	0	True				
ANR	697211	Identifier	NULL		697147	0					
ANR	697212	ReturnType	static UChar *		697147	1					
ANR	697213	Identifier	str_dup		697147	2					
ANR	697214	ParameterList	"UChar * s , UChar * end"		697147	3					
ANR	697215	Parameter	UChar * s	53:8:2036:2043	697147	0	True				
ANR	697216	ParameterType	UChar *		697147	0					
ANR	697217	Identifier	s		697147	1					
ANR	697218	Parameter	UChar * end	53:18:2046:2055	697147	1	True				
ANR	697219	ParameterType	UChar *		697147	0					
ANR	697220	Identifier	end		697147	1					
ANR	697221	CFGEntryNode	ENTRY		697147		True				
ANR	697222	CFGExitNode	EXIT		697147		True				
ANR	697223	Symbol	r		697147						
ANR	697224	Symbol	s		697147						
ANR	697225	Symbol	NULL		697147						
ANR	697226	Symbol	len		697147						
ANR	697227	Symbol	xmalloc		697147						
ANR	697228	Symbol	end		697147						
ANR	697229	Symbol	* r		697147						
ANR	697230	Symbol	* len		697147						
ANR	697231	Function	swap_node	67:0:2256:2691							
ANR	697232	FunctionDef	"swap_node (Node * a , Node * b)"		697231	0					
ANR	697233	CompoundStatement		69:0:2296:2691	697231	0					
ANR	697234	IdentifierDeclStatement	Node c ;	70:2:2300:2306	697231	0	True				
ANR	697235	IdentifierDecl	c		697231	0					
ANR	697236	IdentifierDeclType	Node		697231	0					
ANR	697237	Identifier	c		697231	1					
ANR	697238	ExpressionStatement	c = * a	71:2:2310:2316	697231	1	True				
ANR	697239	AssignmentExpression	c = * a		697231	0		=			
ANR	697240	Identifier	c		697231	0					
ANR	697241	UnaryOperationExpression	* a		697231	1					
ANR	697242	UnaryOperator	*		697231	0					
ANR	697243	Identifier	a		697231	1					
ANR	697244	ExpressionStatement	* a = * b	71:10:2318:2325	697231	2	True				
ANR	697245	AssignmentExpression	* a = * b		697231	0		=			
ANR	697246	UnaryOperationExpression	* a		697231	0					
ANR	697247	UnaryOperator	*		697231	0					
ANR	697248	Identifier	a		697231	1					
ANR	697249	UnaryOperationExpression	* b		697231	1					
ANR	697250	UnaryOperator	*		697231	0					
ANR	697251	Identifier	b		697231	1					
ANR	697252	ExpressionStatement	* b = c	71:19:2327:2333	697231	3	True				
ANR	697253	AssignmentExpression	* b = c		697231	0		=			
ANR	697254	UnaryOperationExpression	* b		697231	0					
ANR	697255	UnaryOperator	*		697231	0					
ANR	697256	Identifier	b		697231	1					
ANR	697257	Identifier	c		697231	1					
ANR	697258	IfStatement	if ( NTYPE ( a ) == NT_STR )		697231	4					
ANR	697259	Condition	NTYPE ( a ) == NT_STR	73:6:2342:2359	697231	0	True				
ANR	697260	EqualityExpression	NTYPE ( a ) == NT_STR		697231	0		==			
ANR	697261	CallExpression	NTYPE ( a )		697231	0					
ANR	697262	Callee	NTYPE		697231	0					
ANR	697263	Identifier	NTYPE		697231	0					
ANR	697264	ArgumentList	a		697231	1					
ANR	697265	Argument	a		697231	0					
ANR	697266	Identifier	a		697231	0					
ANR	697267	Identifier	NT_STR		697231	1					
ANR	697268	CompoundStatement		6:4:71:92	697231	1					
ANR	697269	IdentifierDeclStatement	StrNode * sn = NSTR ( a ) ;	74:4:2368:2389	697231	0	True				
ANR	697270	IdentifierDecl	* sn = NSTR ( a )		697231	0					
ANR	697271	IdentifierDeclType	StrNode *		697231	0					
ANR	697272	Identifier	sn		697231	1					
ANR	697273	AssignmentExpression	* sn = NSTR ( a )		697231	2		=			
ANR	697274	Identifier	sn		697231	0					
ANR	697275	CallExpression	NSTR ( a )		697231	1					
ANR	697276	Callee	NSTR		697231	0					
ANR	697277	Identifier	NSTR		697231	0					
ANR	697278	ArgumentList	a		697231	1					
ANR	697279	Argument	a		697231	0					
ANR	697280	Identifier	a		697231	0					
ANR	697281	IfStatement	if ( sn -> capa == 0 )		697231	1					
ANR	697282	Condition	sn -> capa == 0	75:8:2399:2411	697231	0	True				
ANR	697283	EqualityExpression	sn -> capa == 0		697231	0		==			
ANR	697284	PtrMemberAccess	sn -> capa		697231	0					
ANR	697285	Identifier	sn		697231	0					
ANR	697286	Identifier	capa		697231	1					
ANR	697287	PrimaryExpression	0		697231	1					
ANR	697288	CompoundStatement		8:6:125:150	697231	1					
ANR	697289	IdentifierDeclStatement	int len = sn -> end - sn -> s ;	76:6:2422:2447	697231	0	True				
ANR	697290	IdentifierDecl	len = sn -> end - sn -> s		697231	0					
ANR	697291	IdentifierDeclType	int		697231	0					
ANR	697292	Identifier	len		697231	1					
ANR	697293	AssignmentExpression	len = sn -> end - sn -> s		697231	2		=			
ANR	697294	Identifier	len		697231	0					
ANR	697295	AdditiveExpression	sn -> end - sn -> s		697231	1		-			
ANR	697296	PtrMemberAccess	sn -> end		697231	0					
ANR	697297	Identifier	sn		697231	0					
ANR	697298	Identifier	end		697231	1					
ANR	697299	PtrMemberAccess	sn -> s		697231	1					
ANR	697300	Identifier	sn		697231	0					
ANR	697301	Identifier	s		697231	1					
ANR	697302	ExpressionStatement	sn -> s = sn -> buf	77:6:2455:2472	697231	1	True				
ANR	697303	AssignmentExpression	sn -> s = sn -> buf		697231	0		=			
ANR	697304	PtrMemberAccess	sn -> s		697231	0					
ANR	697305	Identifier	sn		697231	0					
ANR	697306	Identifier	s		697231	1					
ANR	697307	PtrMemberAccess	sn -> buf		697231	1					
ANR	697308	Identifier	sn		697231	0					
ANR	697309	Identifier	buf		697231	1					
ANR	697310	ExpressionStatement	sn -> end = sn -> s + len	78:6:2480:2501	697231	2	True				
ANR	697311	AssignmentExpression	sn -> end = sn -> s + len		697231	0		=			
ANR	697312	PtrMemberAccess	sn -> end		697231	0					
ANR	697313	Identifier	sn		697231	0					
ANR	697314	Identifier	end		697231	1					
ANR	697315	AdditiveExpression	sn -> s + len		697231	1		+			
ANR	697316	PtrMemberAccess	sn -> s		697231	0					
ANR	697317	Identifier	sn		697231	0					
ANR	697318	Identifier	s		697231	1					
ANR	697319	Identifier	len		697231	1					
ANR	697320	IfStatement	if ( NTYPE ( b ) == NT_STR )		697231	5					
ANR	697321	Condition	NTYPE ( b ) == NT_STR	82:6:2520:2537	697231	0	True				
ANR	697322	EqualityExpression	NTYPE ( b ) == NT_STR		697231	0		==			
ANR	697323	CallExpression	NTYPE ( b )		697231	0					
ANR	697324	Callee	NTYPE		697231	0					
ANR	697325	Identifier	NTYPE		697231	0					
ANR	697326	ArgumentList	b		697231	1					
ANR	697327	Argument	b		697231	0					
ANR	697328	Identifier	b		697231	0					
ANR	697329	Identifier	NT_STR		697231	1					
ANR	697330	CompoundStatement		15:4:249:270	697231	1					
ANR	697331	IdentifierDeclStatement	StrNode * sn = NSTR ( b ) ;	83:4:2546:2567	697231	0	True				
ANR	697332	IdentifierDecl	* sn = NSTR ( b )		697231	0					
ANR	697333	IdentifierDeclType	StrNode *		697231	0					
ANR	697334	Identifier	sn		697231	1					
ANR	697335	AssignmentExpression	* sn = NSTR ( b )		697231	2		=			
ANR	697336	Identifier	sn		697231	0					
ANR	697337	CallExpression	NSTR ( b )		697231	1					
ANR	697338	Callee	NSTR		697231	0					
ANR	697339	Identifier	NSTR		697231	0					
ANR	697340	ArgumentList	b		697231	1					
ANR	697341	Argument	b		697231	0					
ANR	697342	Identifier	b		697231	0					
ANR	697343	IfStatement	if ( sn -> capa == 0 )		697231	1					
ANR	697344	Condition	sn -> capa == 0	84:8:2577:2589	697231	0	True				
ANR	697345	EqualityExpression	sn -> capa == 0		697231	0		==			
ANR	697346	PtrMemberAccess	sn -> capa		697231	0					
ANR	697347	Identifier	sn		697231	0					
ANR	697348	Identifier	capa		697231	1					
ANR	697349	PrimaryExpression	0		697231	1					
ANR	697350	CompoundStatement		17:6:303:328	697231	1					
ANR	697351	IdentifierDeclStatement	int len = sn -> end - sn -> s ;	85:6:2600:2625	697231	0	True				
ANR	697352	IdentifierDecl	len = sn -> end - sn -> s		697231	0					
ANR	697353	IdentifierDeclType	int		697231	0					
ANR	697354	Identifier	len		697231	1					
ANR	697355	AssignmentExpression	len = sn -> end - sn -> s		697231	2		=			
ANR	697356	Identifier	len		697231	0					
ANR	697357	AdditiveExpression	sn -> end - sn -> s		697231	1		-			
ANR	697358	PtrMemberAccess	sn -> end		697231	0					
ANR	697359	Identifier	sn		697231	0					
ANR	697360	Identifier	end		697231	1					
ANR	697361	PtrMemberAccess	sn -> s		697231	1					
ANR	697362	Identifier	sn		697231	0					
ANR	697363	Identifier	s		697231	1					
ANR	697364	ExpressionStatement	sn -> s = sn -> buf	86:6:2633:2650	697231	1	True				
ANR	697365	AssignmentExpression	sn -> s = sn -> buf		697231	0		=			
ANR	697366	PtrMemberAccess	sn -> s		697231	0					
ANR	697367	Identifier	sn		697231	0					
ANR	697368	Identifier	s		697231	1					
ANR	697369	PtrMemberAccess	sn -> buf		697231	1					
ANR	697370	Identifier	sn		697231	0					
ANR	697371	Identifier	buf		697231	1					
ANR	697372	ExpressionStatement	sn -> end = sn -> s + len	87:6:2658:2679	697231	2	True				
ANR	697373	AssignmentExpression	sn -> end = sn -> s + len		697231	0		=			
ANR	697374	PtrMemberAccess	sn -> end		697231	0					
ANR	697375	Identifier	sn		697231	0					
ANR	697376	Identifier	end		697231	1					
ANR	697377	AdditiveExpression	sn -> s + len		697231	1		+			
ANR	697378	PtrMemberAccess	sn -> s		697231	0					
ANR	697379	Identifier	sn		697231	0					
ANR	697380	Identifier	s		697231	1					
ANR	697381	Identifier	len		697231	1					
ANR	697382	ReturnType	static void		697231	1					
ANR	697383	Identifier	swap_node		697231	2					
ANR	697384	ParameterList	"Node * a , Node * b"		697231	3					
ANR	697385	Parameter	Node * a	68:10:2278:2284	697231	0	True				
ANR	697386	ParameterType	Node *		697231	0					
ANR	697387	Identifier	a		697231	1					
ANR	697388	Parameter	Node * b	68:19:2287:2293	697231	1	True				
ANR	697389	ParameterType	Node *		697231	0					
ANR	697390	Identifier	b		697231	1					
ANR	697391	CFGEntryNode	ENTRY		697231		True				
ANR	697392	CFGExitNode	EXIT		697231		True				
ANR	697393	Symbol	a		697231						
ANR	697394	Symbol	b		697231						
ANR	697395	Symbol	* sn		697231						
ANR	697396	Symbol	c		697231						
ANR	697397	Symbol	sn -> buf		697231						
ANR	697398	Symbol	NSTR		697231						
ANR	697399	Symbol	* a		697231						
ANR	697400	Symbol	* b		697231						
ANR	697401	Symbol	sn -> s		697231						
ANR	697402	Symbol	len		697231						
ANR	697403	Symbol	sn -> capa		697231						
ANR	697404	Symbol	NTYPE		697231						
ANR	697405	Symbol	sn		697231						
ANR	697406	Symbol	sn -> end		697231						
ANR	697407	Symbol	NT_STR		697231						
ANR	697408	Function	distance_add	92:0:2694:2978							
ANR	697409	FunctionDef	"distance_add (OnigDistance d1 , OnigDistance d2)"		697408	0					
ANR	697410	CompoundStatement		94:0:2761:2978	697408	0					
ANR	697411	IfStatement	if ( d1 == ONIG_INFINITE_DISTANCE || d2 == ONIG_INFINITE_DISTANCE )		697408	0					
ANR	697412	Condition	d1 == ONIG_INFINITE_DISTANCE || d2 == ONIG_INFINITE_DISTANCE	95:6:2769:2828	697408	0	True				
ANR	697413	OrExpression	d1 == ONIG_INFINITE_DISTANCE || d2 == ONIG_INFINITE_DISTANCE		697408	0		||			
ANR	697414	EqualityExpression	d1 == ONIG_INFINITE_DISTANCE		697408	0		==			
ANR	697415	Identifier	d1		697408	0					
ANR	697416	Identifier	ONIG_INFINITE_DISTANCE		697408	1					
ANR	697417	EqualityExpression	d2 == ONIG_INFINITE_DISTANCE		697408	1		==			
ANR	697418	Identifier	d2		697408	0					
ANR	697419	Identifier	ONIG_INFINITE_DISTANCE		697408	1					
ANR	697420	ReturnStatement	return ONIG_INFINITE_DISTANCE ;	96:4:2835:2864	697408	1	True				
ANR	697421	Identifier	ONIG_INFINITE_DISTANCE		697408	0					
ANR	697422	ElseStatement	else		697408	0					
ANR	697423	CompoundStatement		4:7:111:111	697408	0					
ANR	697424	IfStatement	if ( d1 <= ONIG_INFINITE_DISTANCE - d2 )		697408	0					
ANR	697425	Condition	d1 <= ONIG_INFINITE_DISTANCE - d2	98:8:2883:2915	697408	0	True				
ANR	697426	RelationalExpression	d1 <= ONIG_INFINITE_DISTANCE - d2		697408	0		<=			
ANR	697427	Identifier	d1		697408	0					
ANR	697428	AdditiveExpression	ONIG_INFINITE_DISTANCE - d2		697408	1		-			
ANR	697429	Identifier	ONIG_INFINITE_DISTANCE		697408	0					
ANR	697430	Identifier	d2		697408	1					
ANR	697431	ReturnStatement	return d1 + d2 ;	98:43:2918:2932	697408	1	True				
ANR	697432	AdditiveExpression	d1 + d2		697408	0		+			
ANR	697433	Identifier	d1		697408	0					
ANR	697434	Identifier	d2		697408	1					
ANR	697435	ElseStatement	else		697408	0					
ANR	697436	ReturnStatement	return ONIG_INFINITE_DISTANCE ;	99:9:2943:2972	697408	0	True				
ANR	697437	Identifier	ONIG_INFINITE_DISTANCE		697408	0					
ANR	697438	ReturnType	static OnigDistance		697408	1					
ANR	697439	Identifier	distance_add		697408	2					
ANR	697440	ParameterList	"OnigDistance d1 , OnigDistance d2"		697408	3					
ANR	697441	Parameter	OnigDistance d1	93:13:2727:2741	697408	0	True				
ANR	697442	ParameterType	OnigDistance		697408	0					
ANR	697443	Identifier	d1		697408	1					
ANR	697444	Parameter	OnigDistance d2	93:30:2744:2758	697408	1	True				
ANR	697445	ParameterType	OnigDistance		697408	0					
ANR	697446	Identifier	d2		697408	1					
ANR	697447	CFGEntryNode	ENTRY		697408		True				
ANR	697448	CFGExitNode	EXIT		697408		True				
ANR	697449	Symbol	ONIG_INFINITE_DISTANCE		697408						
ANR	697450	Symbol	d1		697408						
ANR	697451	Symbol	d2		697408						
ANR	697452	Function	distance_multiply	103:0:2981:3167							
ANR	697453	FunctionDef	"distance_multiply (OnigDistance d , int m)"		697452	0					
ANR	697454	CompoundStatement		105:0:3042:3167	697452	0					
ANR	697455	IfStatement	if ( m == 0 )		697452	0					
ANR	697456	Condition	m == 0	106:6:3050:3055	697452	0	True				
ANR	697457	EqualityExpression	m == 0		697452	0		==			
ANR	697458	Identifier	m		697452	0					
ANR	697459	PrimaryExpression	0		697452	1					
ANR	697460	ReturnStatement	return 0 ;	106:14:3058:3066	697452	1	True				
ANR	697461	PrimaryExpression	0		697452	0					
ANR	697462	IfStatement	if ( d < ONIG_INFINITE_DISTANCE / m )		697452	1					
ANR	697463	Condition	d < ONIG_INFINITE_DISTANCE / m	108:6:3075:3104	697452	0	True				
ANR	697464	RelationalExpression	d < ONIG_INFINITE_DISTANCE / m		697452	0		<			
ANR	697465	Identifier	d		697452	0					
ANR	697466	MultiplicativeExpression	ONIG_INFINITE_DISTANCE / m		697452	1		/			
ANR	697467	Identifier	ONIG_INFINITE_DISTANCE		697452	0					
ANR	697468	Identifier	m		697452	1					
ANR	697469	ReturnStatement	return d * m ;	109:4:3111:3123	697452	1	True				
ANR	697470	MultiplicativeExpression	d * m		697452	0		*			
ANR	697471	Identifier	d		697452	0					
ANR	697472	Identifier	m		697452	1					
ANR	697473	ElseStatement	else		697452	0					
ANR	697474	ReturnStatement	return ONIG_INFINITE_DISTANCE ;	111:4:3136:3165	697452	0	True				
ANR	697475	Identifier	ONIG_INFINITE_DISTANCE		697452	0					
ANR	697476	ReturnType	static OnigDistance		697452	1					
ANR	697477	Identifier	distance_multiply		697452	2					
ANR	697478	ParameterList	"OnigDistance d , int m"		697452	3					
ANR	697479	Parameter	OnigDistance d	104:18:3019:3032	697452	0	True				
ANR	697480	ParameterType	OnigDistance		697452	0					
ANR	697481	Identifier	d		697452	1					
ANR	697482	Parameter	int m	104:34:3035:3039	697452	1	True				
ANR	697483	ParameterType	int		697452	0					
ANR	697484	Identifier	m		697452	1					
ANR	697485	CFGEntryNode	ENTRY		697452		True				
ANR	697486	CFGExitNode	EXIT		697452		True				
ANR	697487	Symbol	ONIG_INFINITE_DISTANCE		697452						
ANR	697488	Symbol	d		697452						
ANR	697489	Symbol	m		697452						
ANR	697490	Function	bitset_is_empty	114:0:3170:3312							
ANR	697491	FunctionDef	bitset_is_empty (BitSetRef bs)		697490	0					
ANR	697492	CompoundStatement		116:0:3211:3312	697490	0					
ANR	697493	IdentifierDeclStatement	int i ;	117:2:3215:3220	697490	0	True				
ANR	697494	IdentifierDecl	i		697490	0					
ANR	697495	IdentifierDeclType	int		697490	0					
ANR	697496	Identifier	i		697490	1					
ANR	697497	ForStatement	for ( i = 0 ; i < ( int ) BITSET_SIZE ; i ++ )		697490	1					
ANR	697498	ForInit	i = 0 ;	118:7:3229:3234	697490	0	True				
ANR	697499	AssignmentExpression	i = 0		697490	0		=			
ANR	697500	Identifier	i		697490	0					
ANR	697501	PrimaryExpression	0		697490	1					
ANR	697502	Condition	i < ( int ) BITSET_SIZE	118:14:3236:3256	697490	1	True				
ANR	697503	RelationalExpression	i < ( int ) BITSET_SIZE		697490	0		<			
ANR	697504	Identifier	i		697490	0					
ANR	697505	CastExpression	( int ) BITSET_SIZE		697490	1					
ANR	697506	CastTarget	int		697490	0					
ANR	697507	Identifier	BITSET_SIZE		697490	1					
ANR	697508	PostIncDecOperationExpression	i ++	118:37:3259:3261	697490	2	True				
ANR	697509	Identifier	i		697490	0					
ANR	697510	IncDec	++		697490	1					
ANR	697511	CompoundStatement		3:42:52:52	697490	3					
ANR	697512	IfStatement	if ( bs [ i ] != 0 )		697490	0					
ANR	697513	Condition	bs [ i ] != 0	119:8:3274:3283	697490	0	True				
ANR	697514	EqualityExpression	bs [ i ] != 0		697490	0		!=			
ANR	697515	ArrayIndexing	bs [ i ]		697490	0					
ANR	697516	Identifier	bs		697490	0					
ANR	697517	Identifier	i		697490	1					
ANR	697518	PrimaryExpression	0		697490	1					
ANR	697519	ReturnStatement	return 0 ;	119:20:3286:3294	697490	1	True				
ANR	697520	PrimaryExpression	0		697490	0					
ANR	697521	ReturnStatement	return 1 ;	121:2:3302:3310	697490	2	True				
ANR	697522	PrimaryExpression	1		697490	0					
ANR	697523	ReturnType	static int		697490	1					
ANR	697524	Identifier	bitset_is_empty		697490	2					
ANR	697525	ParameterList	BitSetRef bs		697490	3					
ANR	697526	Parameter	BitSetRef bs	115:16:3197:3208	697490	0	True				
ANR	697527	ParameterType	BitSetRef		697490	0					
ANR	697528	Identifier	bs		697490	1					
ANR	697529	CFGEntryNode	ENTRY		697490		True				
ANR	697530	CFGExitNode	EXIT		697490		True				
ANR	697531	Symbol	bs		697490						
ANR	697532	Symbol	* i		697490						
ANR	697533	Symbol	* bs		697490						
ANR	697534	Symbol	BITSET_SIZE		697490						
ANR	697535	Symbol	i		697490						
ANR	697536	Function	bitset_on_num	125:0:3333:3486							
ANR	697537	FunctionDef	bitset_on_num (BitSetRef bs)		697536	0					
ANR	697538	CompoundStatement		127:0:3372:3486	697536	0					
ANR	697539	IdentifierDeclStatement	"int i , n ;"	128:2:3376:3384	697536	0	True				
ANR	697540	IdentifierDecl	i		697536	0					
ANR	697541	IdentifierDeclType	int		697536	0					
ANR	697542	Identifier	i		697536	1					
ANR	697543	IdentifierDecl	n		697536	1					
ANR	697544	IdentifierDeclType	int		697536	0					
ANR	697545	Identifier	n		697536	1					
ANR	697546	ExpressionStatement	n = 0	130:2:3389:3394	697536	1	True				
ANR	697547	AssignmentExpression	n = 0		697536	0		=			
ANR	697548	Identifier	n		697536	0					
ANR	697549	PrimaryExpression	0		697536	1					
ANR	697550	ForStatement	for ( i = 0 ; i < SINGLE_BYTE_SIZE ; i ++ )		697536	2					
ANR	697551	ForInit	i = 0 ;	131:7:3403:3408	697536	0	True				
ANR	697552	AssignmentExpression	i = 0		697536	0		=			
ANR	697553	Identifier	i		697536	0					
ANR	697554	PrimaryExpression	0		697536	1					
ANR	697555	Condition	i < SINGLE_BYTE_SIZE	131:14:3410:3429	697536	1	True				
ANR	697556	RelationalExpression	i < SINGLE_BYTE_SIZE		697536	0		<			
ANR	697557	Identifier	i		697536	0					
ANR	697558	Identifier	SINGLE_BYTE_SIZE		697536	1					
ANR	697559	PostIncDecOperationExpression	i ++	131:36:3432:3434	697536	2	True				
ANR	697560	Identifier	i		697536	0					
ANR	697561	IncDec	++		697536	1					
ANR	697562	CompoundStatement		5:41:64:64	697536	3					
ANR	697563	IfStatement	"if ( BITSET_AT ( bs , i ) )"		697536	0					
ANR	697564	Condition	"BITSET_AT ( bs , i )"	132:8:3447:3462	697536	0	True				
ANR	697565	CallExpression	"BITSET_AT ( bs , i )"		697536	0					
ANR	697566	Callee	BITSET_AT		697536	0					
ANR	697567	Identifier	BITSET_AT		697536	0					
ANR	697568	ArgumentList	bs		697536	1					
ANR	697569	Argument	bs		697536	0					
ANR	697570	Identifier	bs		697536	0					
ANR	697571	Argument	i		697536	1					
ANR	697572	Identifier	i		697536	0					
ANR	697573	ExpressionStatement	n ++	132:26:3465:3468	697536	1	True				
ANR	697574	PostIncDecOperationExpression	n ++		697536	0					
ANR	697575	Identifier	n		697536	0					
ANR	697576	IncDec	++		697536	1					
ANR	697577	ReturnStatement	return n ;	134:2:3476:3484	697536	3	True				
ANR	697578	Identifier	n		697536	0					
ANR	697579	ReturnType	static int		697536	1					
ANR	697580	Identifier	bitset_on_num		697536	2					
ANR	697581	ParameterList	BitSetRef bs		697536	3					
ANR	697582	Parameter	BitSetRef bs	126:14:3358:3369	697536	0	True				
ANR	697583	ParameterType	BitSetRef		697536	0					
ANR	697584	Identifier	bs		697536	1					
ANR	697585	CFGEntryNode	ENTRY		697536		True				
ANR	697586	CFGExitNode	EXIT		697536		True				
ANR	697587	Symbol	SINGLE_BYTE_SIZE		697536						
ANR	697588	Symbol	bs		697536						
ANR	697589	Symbol	BITSET_AT		697536						
ANR	697590	Symbol	i		697536						
ANR	697591	Symbol	n		697536						
ANR	697592	Function	onig_bbuf_init	138:0:3496:3754							
ANR	697593	FunctionDef	"onig_bbuf_init (BBuf * buf , int size)"		697592	0					
ANR	697594	CompoundStatement		140:0:3543:3754	697592	0					
ANR	697595	IfStatement	if ( size <= 0 )		697592	0					
ANR	697596	Condition	size <= 0	141:6:3551:3559	697592	0	True				
ANR	697597	RelationalExpression	size <= 0		697592	0		<=			
ANR	697598	Identifier	size		697592	0					
ANR	697599	PrimaryExpression	0		697592	1					
ANR	697600	CompoundStatement		2:17:18:18	697592	1					
ANR	697601	ExpressionStatement	size = 0	142:4:3568:3578	697592	0	True				
ANR	697602	AssignmentExpression	size = 0		697592	0		=			
ANR	697603	Identifier	size		697592	0					
ANR	697604	PrimaryExpression	0		697592	1					
ANR	697605	ExpressionStatement	buf -> p = NULL	143:4:3584:3597	697592	1	True				
ANR	697606	AssignmentExpression	buf -> p = NULL		697592	0		=			
ANR	697607	PtrMemberAccess	buf -> p		697592	0					
ANR	697608	Identifier	buf		697592	0					
ANR	697609	Identifier	p		697592	1					
ANR	697610	Identifier	NULL		697592	1					
ANR	697611	ElseStatement	else		697592	0					
ANR	697612	CompoundStatement		6:7:66:66	697592	0					
ANR	697613	ExpressionStatement	buf -> p = ( UChar * ) xmalloc ( size )	146:4:3616:3647	697592	0	True				
ANR	697614	AssignmentExpression	buf -> p = ( UChar * ) xmalloc ( size )		697592	0		=			
ANR	697615	PtrMemberAccess	buf -> p		697592	0					
ANR	697616	Identifier	buf		697592	0					
ANR	697617	Identifier	p		697592	1					
ANR	697618	CastExpression	( UChar * ) xmalloc ( size )		697592	1					
ANR	697619	CastTarget	UChar *		697592	0					
ANR	697620	CallExpression	xmalloc ( size )		697592	1					
ANR	697621	Callee	xmalloc		697592	0					
ANR	697622	Identifier	xmalloc		697592	0					
ANR	697623	ArgumentList	size		697592	1					
ANR	697624	Argument	size		697592	0					
ANR	697625	Identifier	size		697592	0					
ANR	697626	IfStatement	if ( IS_NULL ( buf -> p ) )		697592	1					
ANR	697627	Condition	IS_NULL ( buf -> p )	147:8:3657:3671	697592	0	True				
ANR	697628	CallExpression	IS_NULL ( buf -> p )		697592	0					
ANR	697629	Callee	IS_NULL		697592	0					
ANR	697630	Identifier	IS_NULL		697592	0					
ANR	697631	ArgumentList	buf -> p		697592	1					
ANR	697632	Argument	buf -> p		697592	0					
ANR	697633	PtrMemberAccess	buf -> p		697592	0					
ANR	697634	Identifier	buf		697592	0					
ANR	697635	Identifier	p		697592	1					
ANR	697636	ReturnStatement	return ( ONIGERR_MEMORY ) ;	147:25:3674:3696	697592	1	True				
ANR	697637	Identifier	ONIGERR_MEMORY		697592	0					
ANR	697638	ExpressionStatement	buf -> alloc = size	150:2:3705:3722	697592	1	True				
ANR	697639	AssignmentExpression	buf -> alloc = size		697592	0		=			
ANR	697640	PtrMemberAccess	buf -> alloc		697592	0					
ANR	697641	Identifier	buf		697592	0					
ANR	697642	Identifier	alloc		697592	1					
ANR	697643	Identifier	size		697592	1					
ANR	697644	ExpressionStatement	buf -> used = 0	151:2:3726:3740	697592	2	True				
ANR	697645	AssignmentExpression	buf -> used = 0		697592	0		=			
ANR	697646	PtrMemberAccess	buf -> used		697592	0					
ANR	697647	Identifier	buf		697592	0					
ANR	697648	Identifier	used		697592	1					
ANR	697649	PrimaryExpression	0		697592	1					
ANR	697650	ReturnStatement	return 0 ;	152:2:3744:3752	697592	3	True				
ANR	697651	PrimaryExpression	0		697592	0					
ANR	697652	ReturnType	extern int		697592	1					
ANR	697653	Identifier	onig_bbuf_init		697592	2					
ANR	697654	ParameterList	"BBuf * buf , int size"		697592	3					
ANR	697655	Parameter	BBuf * buf	139:15:3522:3530	697592	0	True				
ANR	697656	ParameterType	BBuf *		697592	0					
ANR	697657	Identifier	buf		697592	1					
ANR	697658	Parameter	int size	139:26:3533:3540	697592	1	True				
ANR	697659	ParameterType	int		697592	0					
ANR	697660	Identifier	size		697592	1					
ANR	697661	CFGEntryNode	ENTRY		697592		True				
ANR	697662	CFGExitNode	EXIT		697592		True				
ANR	697663	Symbol	buf -> alloc		697592						
ANR	697664	Symbol	buf		697592						
ANR	697665	Symbol	* buf		697592						
ANR	697666	Symbol	NULL		697592						
ANR	697667	Symbol	size		697592						
ANR	697668	Symbol	IS_NULL		697592						
ANR	697669	Symbol	xmalloc		697592						
ANR	697670	Symbol	ONIGERR_MEMORY		697592						
ANR	697671	Symbol	buf -> used		697592						
ANR	697672	Symbol	buf -> p		697592						
ANR	697673	Function	unset_addr_list_init	158:0:3782:4028							
ANR	697674	FunctionDef	"unset_addr_list_init (UnsetAddrList * uslist , int size)"		697673	0					
ANR	697675	CompoundStatement		160:0:3847:4028	697673	0					
ANR	697676	IdentifierDeclStatement	UnsetAddr * p ;	161:2:3851:3863	697673	0	True				
ANR	697677	IdentifierDecl	* p		697673	0					
ANR	697678	IdentifierDeclType	UnsetAddr *		697673	0					
ANR	697679	Identifier	p		697673	1					
ANR	697680	ExpressionStatement	p = ( UnsetAddr * ) xmalloc ( sizeof ( UnsetAddr ) * size )	163:2:3868:3917	697673	1	True				
ANR	697681	AssignmentExpression	p = ( UnsetAddr * ) xmalloc ( sizeof ( UnsetAddr ) * size )		697673	0		=			
ANR	697682	Identifier	p		697673	0					
ANR	697683	CastExpression	( UnsetAddr * ) xmalloc ( sizeof ( UnsetAddr ) * size )		697673	1					
ANR	697684	CastTarget	UnsetAddr *		697673	0					
ANR	697685	CallExpression	xmalloc ( sizeof ( UnsetAddr ) * size )		697673	1					
ANR	697686	Callee	xmalloc		697673	0					
ANR	697687	Identifier	xmalloc		697673	0					
ANR	697688	ArgumentList	sizeof ( UnsetAddr ) * size		697673	1					
ANR	697689	Argument	sizeof ( UnsetAddr ) * size		697673	0					
ANR	697690	MultiplicativeExpression	sizeof ( UnsetAddr ) * size		697673	0		*			
ANR	697691	SizeofExpression	sizeof ( UnsetAddr )		697673	0					
ANR	697692	Sizeof	sizeof		697673	0					
ANR	697693	SizeofOperand	UnsetAddr		697673	1					
ANR	697694	Identifier	size		697673	1					
ANR	697695	ExpressionStatement	CHECK_NULL_RETURN_MEMERR ( p )	164:2:3921:3948	697673	2	True				
ANR	697696	CallExpression	CHECK_NULL_RETURN_MEMERR ( p )		697673	0					
ANR	697697	Callee	CHECK_NULL_RETURN_MEMERR		697673	0					
ANR	697698	Identifier	CHECK_NULL_RETURN_MEMERR		697673	0					
ANR	697699	ArgumentList	p		697673	1					
ANR	697700	Argument	p		697673	0					
ANR	697701	Identifier	p		697673	0					
ANR	697702	ExpressionStatement	uslist -> num = 0	165:2:3952:3969	697673	3	True				
ANR	697703	AssignmentExpression	uslist -> num = 0		697673	0		=			
ANR	697704	PtrMemberAccess	uslist -> num		697673	0					
ANR	697705	Identifier	uslist		697673	0					
ANR	697706	Identifier	num		697673	1					
ANR	697707	PrimaryExpression	0		697673	1					
ANR	697708	ExpressionStatement	uslist -> alloc = size	166:2:3973:3993	697673	4	True				
ANR	697709	AssignmentExpression	uslist -> alloc = size		697673	0		=			
ANR	697710	PtrMemberAccess	uslist -> alloc		697673	0					
ANR	697711	Identifier	uslist		697673	0					
ANR	697712	Identifier	alloc		697673	1					
ANR	697713	Identifier	size		697673	1					
ANR	697714	ExpressionStatement	uslist -> us = p	167:2:3997:4014	697673	5	True				
ANR	697715	AssignmentExpression	uslist -> us = p		697673	0		=			
ANR	697716	PtrMemberAccess	uslist -> us		697673	0					
ANR	697717	Identifier	uslist		697673	0					
ANR	697718	Identifier	us		697673	1					
ANR	697719	Identifier	p		697673	1					
ANR	697720	ReturnStatement	return 0 ;	168:2:4018:4026	697673	6	True				
ANR	697721	PrimaryExpression	0		697673	0					
ANR	697722	ReturnType	static int		697673	1					
ANR	697723	Identifier	unset_addr_list_init		697673	2					
ANR	697724	ParameterList	"UnsetAddrList * uslist , int size"		697673	3					
ANR	697725	Parameter	UnsetAddrList * uslist	159:21:3814:3834	697673	0	True				
ANR	697726	ParameterType	UnsetAddrList *		697673	0					
ANR	697727	Identifier	uslist		697673	1					
ANR	697728	Parameter	int size	159:44:3837:3844	697673	1	True				
ANR	697729	ParameterType	int		697673	0					
ANR	697730	Identifier	size		697673	1					
ANR	697731	CFGEntryNode	ENTRY		697673		True				
ANR	697732	CFGExitNode	EXIT		697673		True				
ANR	697733	Symbol	p		697673						
ANR	697734	Symbol	uslist -> num		697673						
ANR	697735	Symbol	uslist -> alloc		697673						
ANR	697736	Symbol	uslist		697673						
ANR	697737	Symbol	size		697673						
ANR	697738	Symbol	xmalloc		697673						
ANR	697739	Symbol	* uslist		697673						
ANR	697740	Symbol	uslist -> us		697673						
ANR	697741	Function	unset_addr_list_end	171:0:4031:4142							
ANR	697742	FunctionDef	unset_addr_list_end (UnsetAddrList * uslist)		697741	0					
ANR	697743	CompoundStatement		173:0:4086:4142	697741	0					
ANR	697744	IfStatement	if ( IS_NOT_NULL ( uslist -> us ) )		697741	0					
ANR	697745	Condition	IS_NOT_NULL ( uslist -> us )	174:6:4094:4116	697741	0	True				
ANR	697746	CallExpression	IS_NOT_NULL ( uslist -> us )		697741	0					
ANR	697747	Callee	IS_NOT_NULL		697741	0					
ANR	697748	Identifier	IS_NOT_NULL		697741	0					
ANR	697749	ArgumentList	uslist -> us		697741	1					
ANR	697750	Argument	uslist -> us		697741	0					
ANR	697751	PtrMemberAccess	uslist -> us		697741	0					
ANR	697752	Identifier	uslist		697741	0					
ANR	697753	Identifier	us		697741	1					
ANR	697754	ExpressionStatement	xfree ( uslist -> us )	175:4:4123:4140	697741	1	True				
ANR	697755	CallExpression	xfree ( uslist -> us )		697741	0					
ANR	697756	Callee	xfree		697741	0					
ANR	697757	Identifier	xfree		697741	0					
ANR	697758	ArgumentList	uslist -> us		697741	1					
ANR	697759	Argument	uslist -> us		697741	0					
ANR	697760	PtrMemberAccess	uslist -> us		697741	0					
ANR	697761	Identifier	uslist		697741	0					
ANR	697762	Identifier	us		697741	1					
ANR	697763	ReturnType	static void		697741	1					
ANR	697764	Identifier	unset_addr_list_end		697741	2					
ANR	697765	ParameterList	UnsetAddrList * uslist		697741	3					
ANR	697766	Parameter	UnsetAddrList * uslist	172:20:4063:4083	697741	0	True				
ANR	697767	ParameterType	UnsetAddrList *		697741	0					
ANR	697768	Identifier	uslist		697741	1					
ANR	697769	CFGEntryNode	ENTRY		697741		True				
ANR	697770	CFGExitNode	EXIT		697741		True				
ANR	697771	Symbol	uslist		697741						
ANR	697772	Symbol	IS_NOT_NULL		697741						
ANR	697773	Symbol	* uslist		697741						
ANR	697774	Symbol	uslist -> us		697741						
ANR	697775	Function	unset_addr_list_add	178:0:4145:4599							
ANR	697776	FunctionDef	"unset_addr_list_add (UnsetAddrList * uslist , int offset , struct _Node * node)"		697775	0					
ANR	697777	CompoundStatement		180:0:4231:4599	697775	0					
ANR	697778	IdentifierDeclStatement	UnsetAddr * p ;	181:2:4235:4247	697775	0	True				
ANR	697779	IdentifierDecl	* p		697775	0					
ANR	697780	IdentifierDeclType	UnsetAddr *		697775	0					
ANR	697781	Identifier	p		697775	1					
ANR	697782	IdentifierDeclStatement	int size ;	182:2:4251:4259	697775	1	True				
ANR	697783	IdentifierDecl	size		697775	0					
ANR	697784	IdentifierDeclType	int		697775	0					
ANR	697785	Identifier	size		697775	1					
ANR	697786	IfStatement	if ( uslist -> num >= uslist -> alloc )		697775	2					
ANR	697787	Condition	uslist -> num >= uslist -> alloc	184:6:4268:4295	697775	0	True				
ANR	697788	RelationalExpression	uslist -> num >= uslist -> alloc		697775	0		>=			
ANR	697789	PtrMemberAccess	uslist -> num		697775	0					
ANR	697790	Identifier	uslist		697775	0					
ANR	697791	Identifier	num		697775	1					
ANR	697792	PtrMemberAccess	uslist -> alloc		697775	1					
ANR	697793	Identifier	uslist		697775	0					
ANR	697794	Identifier	alloc		697775	1					
ANR	697795	CompoundStatement		5:36:66:66	697775	1					
ANR	697796	ExpressionStatement	size = uslist -> alloc * 2	185:4:4304:4328	697775	0	True				
ANR	697797	AssignmentExpression	size = uslist -> alloc * 2		697775	0		=			
ANR	697798	Identifier	size		697775	0					
ANR	697799	MultiplicativeExpression	uslist -> alloc * 2		697775	1		*			
ANR	697800	PtrMemberAccess	uslist -> alloc		697775	0					
ANR	697801	Identifier	uslist		697775	0					
ANR	697802	Identifier	alloc		697775	1					
ANR	697803	PrimaryExpression	2		697775	1					
ANR	697804	ExpressionStatement	"p = ( UnsetAddr * ) xrealloc ( uslist -> us , sizeof ( UnsetAddr ) * size )"	186:4:4334:4397	697775	1	True				
ANR	697805	AssignmentExpression	"p = ( UnsetAddr * ) xrealloc ( uslist -> us , sizeof ( UnsetAddr ) * size )"		697775	0		=			
ANR	697806	Identifier	p		697775	0					
ANR	697807	CastExpression	"( UnsetAddr * ) xrealloc ( uslist -> us , sizeof ( UnsetAddr ) * size )"		697775	1					
ANR	697808	CastTarget	UnsetAddr *		697775	0					
ANR	697809	CallExpression	"xrealloc ( uslist -> us , sizeof ( UnsetAddr ) * size )"		697775	1					
ANR	697810	Callee	xrealloc		697775	0					
ANR	697811	Identifier	xrealloc		697775	0					
ANR	697812	ArgumentList	uslist -> us		697775	1					
ANR	697813	Argument	uslist -> us		697775	0					
ANR	697814	PtrMemberAccess	uslist -> us		697775	0					
ANR	697815	Identifier	uslist		697775	0					
ANR	697816	Identifier	us		697775	1					
ANR	697817	Argument	sizeof ( UnsetAddr ) * size		697775	1					
ANR	697818	MultiplicativeExpression	sizeof ( UnsetAddr ) * size		697775	0		*			
ANR	697819	SizeofExpression	sizeof ( UnsetAddr )		697775	0					
ANR	697820	Sizeof	sizeof		697775	0					
ANR	697821	SizeofOperand	UnsetAddr		697775	1					
ANR	697822	Identifier	size		697775	1					
ANR	697823	ExpressionStatement	CHECK_NULL_RETURN_MEMERR ( p )	187:4:4403:4430	697775	2	True				
ANR	697824	CallExpression	CHECK_NULL_RETURN_MEMERR ( p )		697775	0					
ANR	697825	Callee	CHECK_NULL_RETURN_MEMERR		697775	0					
ANR	697826	Identifier	CHECK_NULL_RETURN_MEMERR		697775	0					
ANR	697827	ArgumentList	p		697775	1					
ANR	697828	Argument	p		697775	0					
ANR	697829	Identifier	p		697775	0					
ANR	697830	ExpressionStatement	uslist -> alloc = size	188:4:4436:4456	697775	3	True				
ANR	697831	AssignmentExpression	uslist -> alloc = size		697775	0		=			
ANR	697832	PtrMemberAccess	uslist -> alloc		697775	0					
ANR	697833	Identifier	uslist		697775	0					
ANR	697834	Identifier	alloc		697775	1					
ANR	697835	Identifier	size		697775	1					
ANR	697836	ExpressionStatement	uslist -> us = p	189:4:4462:4479	697775	4	True				
ANR	697837	AssignmentExpression	uslist -> us = p		697775	0		=			
ANR	697838	PtrMemberAccess	uslist -> us		697775	0					
ANR	697839	Identifier	uslist		697775	0					
ANR	697840	Identifier	us		697775	1					
ANR	697841	Identifier	p		697775	1					
ANR	697842	ExpressionStatement	uslist -> us [ uslist -> num ] . offset = offset	192:2:4488:4527	697775	3	True				
ANR	697843	AssignmentExpression	uslist -> us [ uslist -> num ] . offset = offset		697775	0		=			
ANR	697844	MemberAccess	uslist -> us [ uslist -> num ] . offset		697775	0					
ANR	697845	ArrayIndexing	uslist -> us [ uslist -> num ]		697775	0					
ANR	697846	PtrMemberAccess	uslist -> us		697775	0					
ANR	697847	Identifier	uslist		697775	0					
ANR	697848	Identifier	us		697775	1					
ANR	697849	PtrMemberAccess	uslist -> num		697775	1					
ANR	697850	Identifier	uslist		697775	0					
ANR	697851	Identifier	num		697775	1					
ANR	697852	Identifier	offset		697775	1					
ANR	697853	Identifier	offset		697775	1					
ANR	697854	ExpressionStatement	uslist -> us [ uslist -> num ] . target = node	193:2:4531:4568	697775	4	True				
ANR	697855	AssignmentExpression	uslist -> us [ uslist -> num ] . target = node		697775	0		=			
ANR	697856	MemberAccess	uslist -> us [ uslist -> num ] . target		697775	0					
ANR	697857	ArrayIndexing	uslist -> us [ uslist -> num ]		697775	0					
ANR	697858	PtrMemberAccess	uslist -> us		697775	0					
ANR	697859	Identifier	uslist		697775	0					
ANR	697860	Identifier	us		697775	1					
ANR	697861	PtrMemberAccess	uslist -> num		697775	1					
ANR	697862	Identifier	uslist		697775	0					
ANR	697863	Identifier	num		697775	1					
ANR	697864	Identifier	target		697775	1					
ANR	697865	Identifier	node		697775	1					
ANR	697866	ExpressionStatement	uslist -> num ++	194:2:4572:4585	697775	5	True				
ANR	697867	PostIncDecOperationExpression	uslist -> num ++		697775	0					
ANR	697868	PtrMemberAccess	uslist -> num		697775	0					
ANR	697869	Identifier	uslist		697775	0					
ANR	697870	Identifier	num		697775	1					
ANR	697871	IncDec	++		697775	1					
ANR	697872	ReturnStatement	return 0 ;	195:2:4589:4597	697775	6	True				
ANR	697873	PrimaryExpression	0		697775	0					
ANR	697874	ReturnType	static int		697775	1					
ANR	697875	Identifier	unset_addr_list_add		697775	2					
ANR	697876	ParameterList	"UnsetAddrList * uslist , int offset , struct _Node * node"		697775	3					
ANR	697877	Parameter	UnsetAddrList * uslist	179:20:4176:4196	697775	0	True				
ANR	697878	ParameterType	UnsetAddrList *		697775	0					
ANR	697879	Identifier	uslist		697775	1					
ANR	697880	Parameter	int offset	179:43:4199:4208	697775	1	True				
ANR	697881	ParameterType	int		697775	0					
ANR	697882	Identifier	offset		697775	1					
ANR	697883	Parameter	struct _Node * node	179:55:4211:4228	697775	2	True				
ANR	697884	ParameterType	struct _Node *		697775	0					
ANR	697885	Identifier	node		697775	1					
ANR	697886	CFGEntryNode	ENTRY		697775		True				
ANR	697887	CFGExitNode	EXIT		697775		True				
ANR	697888	Symbol	uslist -> num		697775						
ANR	697889	Symbol	uslist -> us [ uslist -> num ] . offset		697775						
ANR	697890	Symbol	offset		697775						
ANR	697891	Symbol	* * uslist		697775						
ANR	697892	Symbol	uslist -> us		697775						
ANR	697893	Symbol	p		697775						
ANR	697894	Symbol	uslist -> alloc		697775						
ANR	697895	Symbol	node		697775						
ANR	697896	Symbol	* uslist -> num		697775						
ANR	697897	Symbol	uslist		697775						
ANR	697898	Symbol	size		697775						
ANR	697899	Symbol	* uslist		697775						
ANR	697900	Symbol	* uslist -> us		697775						
ANR	697901	Symbol	uslist -> us [ uslist -> num ] . target		697775						
ANR	697902	Symbol	xrealloc		697775						
ANR	697903	Function	add_opcode	200:0:4632:4720							
ANR	697904	FunctionDef	"add_opcode (regex_t * reg , int opcode)"		697903	0					
ANR	697905	CompoundStatement		202:0:4680:4720	697903	0					
ANR	697906	ExpressionStatement	"BBUF_ADD1 ( reg , opcode )"	203:2:4684:4706	697903	0	True				
ANR	697907	CallExpression	"BBUF_ADD1 ( reg , opcode )"		697903	0					
ANR	697908	Callee	BBUF_ADD1		697903	0					
ANR	697909	Identifier	BBUF_ADD1		697903	0					
ANR	697910	ArgumentList	reg		697903	1					
ANR	697911	Argument	reg		697903	0					
ANR	697912	Identifier	reg		697903	0					
ANR	697913	Argument	opcode		697903	1					
ANR	697914	Identifier	opcode		697903	0					
ANR	697915	ReturnStatement	return 0 ;	204:2:4710:4718	697903	1	True				
ANR	697916	PrimaryExpression	0		697903	0					
ANR	697917	ReturnType	static int		697903	1					
ANR	697918	Identifier	add_opcode		697903	2					
ANR	697919	ParameterList	"regex_t * reg , int opcode"		697903	3					
ANR	697920	Parameter	regex_t * reg	201:11:4654:4665	697903	0	True				
ANR	697921	ParameterType	regex_t *		697903	0					
ANR	697922	Identifier	reg		697903	1					
ANR	697923	Parameter	int opcode	201:25:4668:4677	697903	1	True				
ANR	697924	ParameterType	int		697903	0					
ANR	697925	Identifier	opcode		697903	1					
ANR	697926	CFGEntryNode	ENTRY		697903		True				
ANR	697927	CFGExitNode	EXIT		697903		True				
ANR	697928	Symbol	reg		697903						
ANR	697929	Symbol	opcode		697903						
ANR	697930	Function	add_state_check_num	208:0:4762:4923							
ANR	697931	FunctionDef	"add_state_check_num (regex_t * reg , int num)"		697930	0					
ANR	697932	CompoundStatement		210:0:4816:4923	697930	0					
ANR	697933	IdentifierDeclStatement	StateCheckNumType n = ( StateCheckNumType ) num ;	211:2:4820:4865	697930	0	True				
ANR	697934	IdentifierDecl	n = ( StateCheckNumType ) num		697930	0					
ANR	697935	IdentifierDeclType	StateCheckNumType		697930	0					
ANR	697936	Identifier	n		697930	1					
ANR	697937	AssignmentExpression	n = ( StateCheckNumType ) num		697930	2		=			
ANR	697938	Identifier	n		697930	0					
ANR	697939	CastExpression	( StateCheckNumType ) num		697930	1					
ANR	697940	CastTarget	StateCheckNumType		697930	0					
ANR	697941	Identifier	num		697930	1					
ANR	697942	ExpressionStatement	"BBUF_ADD ( reg , & n , SIZE_STATE_CHECK_NUM )"	213:2:4870:4909	697930	1	True				
ANR	697943	CallExpression	"BBUF_ADD ( reg , & n , SIZE_STATE_CHECK_NUM )"		697930	0					
ANR	697944	Callee	BBUF_ADD		697930	0					
ANR	697945	Identifier	BBUF_ADD		697930	0					
ANR	697946	ArgumentList	reg		697930	1					
ANR	697947	Argument	reg		697930	0					
ANR	697948	Identifier	reg		697930	0					
ANR	697949	Argument	& n		697930	1					
ANR	697950	UnaryOperationExpression	& n		697930	0					
ANR	697951	UnaryOperator	&		697930	0					
ANR	697952	Identifier	n		697930	1					
ANR	697953	Argument	SIZE_STATE_CHECK_NUM		697930	2					
ANR	697954	Identifier	SIZE_STATE_CHECK_NUM		697930	0					
ANR	697955	ReturnStatement	return 0 ;	214:2:4913:4921	697930	2	True				
ANR	697956	PrimaryExpression	0		697930	0					
ANR	697957	ReturnType	static int		697930	1					
ANR	697958	Identifier	add_state_check_num		697930	2					
ANR	697959	ParameterList	"regex_t * reg , int num"		697930	3					
ANR	697960	Parameter	regex_t * reg	209:20:4793:4804	697930	0	True				
ANR	697961	ParameterType	regex_t *		697930	0					
ANR	697962	Identifier	reg		697930	1					
ANR	697963	Parameter	int num	209:34:4807:4813	697930	1	True				
ANR	697964	ParameterType	int		697930	0					
ANR	697965	Identifier	num		697930	1					
ANR	697966	CFGEntryNode	ENTRY		697930		True				
ANR	697967	CFGExitNode	EXIT		697930		True				
ANR	697968	Symbol	& n		697930						
ANR	697969	Symbol	reg		697930						
ANR	697970	Symbol	num		697930						
ANR	697971	Symbol	n		697930						
ANR	697972	Symbol	SIZE_STATE_CHECK_NUM		697930						
ANR	697973	Function	add_rel_addr	218:0:4933:5071							
ANR	697974	FunctionDef	"add_rel_addr (regex_t * reg , int addr)"		697973	0					
ANR	697975	CompoundStatement		220:0:4981:5071	697973	0					
ANR	697976	IdentifierDeclStatement	RelAddrType ra = ( RelAddrType ) addr ;	221:2:4985:5020	697973	0	True				
ANR	697977	IdentifierDecl	ra = ( RelAddrType ) addr		697973	0					
ANR	697978	IdentifierDeclType	RelAddrType		697973	0					
ANR	697979	Identifier	ra		697973	1					
ANR	697980	AssignmentExpression	ra = ( RelAddrType ) addr		697973	2		=			
ANR	697981	Identifier	ra		697973	0					
ANR	697982	CastExpression	( RelAddrType ) addr		697973	1					
ANR	697983	CastTarget	RelAddrType		697973	0					
ANR	697984	Identifier	addr		697973	1					
ANR	697985	ExpressionStatement	"BBUF_ADD ( reg , & ra , SIZE_RELADDR )"	223:2:5025:5057	697973	1	True				
ANR	697986	CallExpression	"BBUF_ADD ( reg , & ra , SIZE_RELADDR )"		697973	0					
ANR	697987	Callee	BBUF_ADD		697973	0					
ANR	697988	Identifier	BBUF_ADD		697973	0					
ANR	697989	ArgumentList	reg		697973	1					
ANR	697990	Argument	reg		697973	0					
ANR	697991	Identifier	reg		697973	0					
ANR	697992	Argument	& ra		697973	1					
ANR	697993	UnaryOperationExpression	& ra		697973	0					
ANR	697994	UnaryOperator	&		697973	0					
ANR	697995	Identifier	ra		697973	1					
ANR	697996	Argument	SIZE_RELADDR		697973	2					
ANR	697997	Identifier	SIZE_RELADDR		697973	0					
ANR	697998	ReturnStatement	return 0 ;	224:2:5061:5069	697973	2	True				
ANR	697999	PrimaryExpression	0		697973	0					
ANR	698000	ReturnType	static int		697973	1					
ANR	698001	Identifier	add_rel_addr		697973	2					
ANR	698002	ParameterList	"regex_t * reg , int addr"		697973	3					
ANR	698003	Parameter	regex_t * reg	219:13:4957:4968	697973	0	True				
ANR	698004	ParameterType	regex_t *		697973	0					
ANR	698005	Identifier	reg		697973	1					
ANR	698006	Parameter	int addr	219:27:4971:4978	697973	1	True				
ANR	698007	ParameterType	int		697973	0					
ANR	698008	Identifier	addr		697973	1					
ANR	698009	CFGEntryNode	ENTRY		697973		True				
ANR	698010	CFGExitNode	EXIT		697973		True				
ANR	698011	Symbol	SIZE_RELADDR		697973						
ANR	698012	Symbol	reg		697973						
ANR	698013	Symbol	& ra		697973						
ANR	698014	Symbol	addr		697973						
ANR	698015	Symbol	ra		697973						
ANR	698016	Function	add_abs_addr	227:0:5074:5212							
ANR	698017	FunctionDef	"add_abs_addr (regex_t * reg , int addr)"		698016	0					
ANR	698018	CompoundStatement		229:0:5122:5212	698016	0					
ANR	698019	IdentifierDeclStatement	AbsAddrType ra = ( AbsAddrType ) addr ;	230:2:5126:5161	698016	0	True				
ANR	698020	IdentifierDecl	ra = ( AbsAddrType ) addr		698016	0					
ANR	698021	IdentifierDeclType	AbsAddrType		698016	0					
ANR	698022	Identifier	ra		698016	1					
ANR	698023	AssignmentExpression	ra = ( AbsAddrType ) addr		698016	2		=			
ANR	698024	Identifier	ra		698016	0					
ANR	698025	CastExpression	( AbsAddrType ) addr		698016	1					
ANR	698026	CastTarget	AbsAddrType		698016	0					
ANR	698027	Identifier	addr		698016	1					
ANR	698028	ExpressionStatement	"BBUF_ADD ( reg , & ra , SIZE_ABSADDR )"	232:2:5166:5198	698016	1	True				
ANR	698029	CallExpression	"BBUF_ADD ( reg , & ra , SIZE_ABSADDR )"		698016	0					
ANR	698030	Callee	BBUF_ADD		698016	0					
ANR	698031	Identifier	BBUF_ADD		698016	0					
ANR	698032	ArgumentList	reg		698016	1					
ANR	698033	Argument	reg		698016	0					
ANR	698034	Identifier	reg		698016	0					
ANR	698035	Argument	& ra		698016	1					
ANR	698036	UnaryOperationExpression	& ra		698016	0					
ANR	698037	UnaryOperator	&		698016	0					
ANR	698038	Identifier	ra		698016	1					
ANR	698039	Argument	SIZE_ABSADDR		698016	2					
ANR	698040	Identifier	SIZE_ABSADDR		698016	0					
ANR	698041	ReturnStatement	return 0 ;	233:2:5202:5210	698016	2	True				
ANR	698042	PrimaryExpression	0		698016	0					
ANR	698043	ReturnType	static int		698016	1					
ANR	698044	Identifier	add_abs_addr		698016	2					
ANR	698045	ParameterList	"regex_t * reg , int addr"		698016	3					
ANR	698046	Parameter	regex_t * reg	228:13:5098:5109	698016	0	True				
ANR	698047	ParameterType	regex_t *		698016	0					
ANR	698048	Identifier	reg		698016	1					
ANR	698049	Parameter	int addr	228:27:5112:5119	698016	1	True				
ANR	698050	ParameterType	int		698016	0					
ANR	698051	Identifier	addr		698016	1					
ANR	698052	CFGEntryNode	ENTRY		698016		True				
ANR	698053	CFGExitNode	EXIT		698016		True				
ANR	698054	Symbol	reg		698016						
ANR	698055	Symbol	& ra		698016						
ANR	698056	Symbol	addr		698016						
ANR	698057	Symbol	SIZE_ABSADDR		698016						
ANR	698058	Symbol	ra		698016						
ANR	698059	Function	add_length	236:0:5215:5344							
ANR	698060	FunctionDef	"add_length (regex_t * reg , int len)"		698059	0					
ANR	698061	CompoundStatement		238:0:5260:5344	698059	0					
ANR	698062	IdentifierDeclStatement	LengthType l = ( LengthType ) len ;	239:2:5264:5295	698059	0	True				
ANR	698063	IdentifierDecl	l = ( LengthType ) len		698059	0					
ANR	698064	IdentifierDeclType	LengthType		698059	0					
ANR	698065	Identifier	l		698059	1					
ANR	698066	AssignmentExpression	l = ( LengthType ) len		698059	2		=			
ANR	698067	Identifier	l		698059	0					
ANR	698068	CastExpression	( LengthType ) len		698059	1					
ANR	698069	CastTarget	LengthType		698059	0					
ANR	698070	Identifier	len		698059	1					
ANR	698071	ExpressionStatement	"BBUF_ADD ( reg , & l , SIZE_LENGTH )"	241:2:5300:5330	698059	1	True				
ANR	698072	CallExpression	"BBUF_ADD ( reg , & l , SIZE_LENGTH )"		698059	0					
ANR	698073	Callee	BBUF_ADD		698059	0					
ANR	698074	Identifier	BBUF_ADD		698059	0					
ANR	698075	ArgumentList	reg		698059	1					
ANR	698076	Argument	reg		698059	0					
ANR	698077	Identifier	reg		698059	0					
ANR	698078	Argument	& l		698059	1					
ANR	698079	UnaryOperationExpression	& l		698059	0					
ANR	698080	UnaryOperator	&		698059	0					
ANR	698081	Identifier	l		698059	1					
ANR	698082	Argument	SIZE_LENGTH		698059	2					
ANR	698083	Identifier	SIZE_LENGTH		698059	0					
ANR	698084	ReturnStatement	return 0 ;	242:2:5334:5342	698059	2	True				
ANR	698085	PrimaryExpression	0		698059	0					
ANR	698086	ReturnType	static int		698059	1					
ANR	698087	Identifier	add_length		698059	2					
ANR	698088	ParameterList	"regex_t * reg , int len"		698059	3					
ANR	698089	Parameter	regex_t * reg	237:11:5237:5248	698059	0	True				
ANR	698090	ParameterType	regex_t *		698059	0					
ANR	698091	Identifier	reg		698059	1					
ANR	698092	Parameter	int len	237:25:5251:5257	698059	1	True				
ANR	698093	ParameterType	int		698059	0					
ANR	698094	Identifier	len		698059	1					
ANR	698095	CFGEntryNode	ENTRY		698059		True				
ANR	698096	CFGExitNode	EXIT		698059		True				
ANR	698097	Symbol	& l		698059						
ANR	698098	Symbol	len		698059						
ANR	698099	Symbol	reg		698059						
ANR	698100	Symbol	l		698059						
ANR	698101	Symbol	SIZE_LENGTH		698059						
ANR	698102	Function	add_mem_num	245:0:5347:5477							
ANR	698103	FunctionDef	"add_mem_num (regex_t * reg , int num)"		698102	0					
ANR	698104	CompoundStatement		247:0:5393:5477	698102	0					
ANR	698105	IdentifierDeclStatement	MemNumType n = ( MemNumType ) num ;	248:2:5397:5428	698102	0	True				
ANR	698106	IdentifierDecl	n = ( MemNumType ) num		698102	0					
ANR	698107	IdentifierDeclType	MemNumType		698102	0					
ANR	698108	Identifier	n		698102	1					
ANR	698109	AssignmentExpression	n = ( MemNumType ) num		698102	2		=			
ANR	698110	Identifier	n		698102	0					
ANR	698111	CastExpression	( MemNumType ) num		698102	1					
ANR	698112	CastTarget	MemNumType		698102	0					
ANR	698113	Identifier	num		698102	1					
ANR	698114	ExpressionStatement	"BBUF_ADD ( reg , & n , SIZE_MEMNUM )"	250:2:5433:5463	698102	1	True				
ANR	698115	CallExpression	"BBUF_ADD ( reg , & n , SIZE_MEMNUM )"		698102	0					
ANR	698116	Callee	BBUF_ADD		698102	0					
ANR	698117	Identifier	BBUF_ADD		698102	0					
ANR	698118	ArgumentList	reg		698102	1					
ANR	698119	Argument	reg		698102	0					
ANR	698120	Identifier	reg		698102	0					
ANR	698121	Argument	& n		698102	1					
ANR	698122	UnaryOperationExpression	& n		698102	0					
ANR	698123	UnaryOperator	&		698102	0					
ANR	698124	Identifier	n		698102	1					
ANR	698125	Argument	SIZE_MEMNUM		698102	2					
ANR	698126	Identifier	SIZE_MEMNUM		698102	0					
ANR	698127	ReturnStatement	return 0 ;	251:2:5467:5475	698102	2	True				
ANR	698128	PrimaryExpression	0		698102	0					
ANR	698129	ReturnType	static int		698102	1					
ANR	698130	Identifier	add_mem_num		698102	2					
ANR	698131	ParameterList	"regex_t * reg , int num"		698102	3					
ANR	698132	Parameter	regex_t * reg	246:12:5370:5381	698102	0	True				
ANR	698133	ParameterType	regex_t *		698102	0					
ANR	698134	Identifier	reg		698102	1					
ANR	698135	Parameter	int num	246:26:5384:5390	698102	1	True				
ANR	698136	ParameterType	int		698102	0					
ANR	698137	Identifier	num		698102	1					
ANR	698138	CFGEntryNode	ENTRY		698102		True				
ANR	698139	CFGExitNode	EXIT		698102		True				
ANR	698140	Symbol	SIZE_MEMNUM		698102						
ANR	698141	Symbol	& n		698102						
ANR	698142	Symbol	reg		698102						
ANR	698143	Symbol	num		698102						
ANR	698144	Symbol	n		698102						
ANR	698145	Function	add_pointer	254:0:5480:5621							
ANR	698146	FunctionDef	"add_pointer (regex_t * reg , void * addr)"		698145	0					
ANR	698147	CompoundStatement		256:0:5529:5621	698145	0					
ANR	698148	IdentifierDeclStatement	PointerType ptr = ( PointerType ) addr ;	257:2:5533:5569	698145	0	True				
ANR	698149	IdentifierDecl	ptr = ( PointerType ) addr		698145	0					
ANR	698150	IdentifierDeclType	PointerType		698145	0					
ANR	698151	Identifier	ptr		698145	1					
ANR	698152	AssignmentExpression	ptr = ( PointerType ) addr		698145	2		=			
ANR	698153	Identifier	ptr		698145	0					
ANR	698154	CastExpression	( PointerType ) addr		698145	1					
ANR	698155	CastTarget	PointerType		698145	0					
ANR	698156	Identifier	addr		698145	1					
ANR	698157	ExpressionStatement	"BBUF_ADD ( reg , & ptr , SIZE_POINTER )"	259:2:5574:5607	698145	1	True				
ANR	698158	CallExpression	"BBUF_ADD ( reg , & ptr , SIZE_POINTER )"		698145	0					
ANR	698159	Callee	BBUF_ADD		698145	0					
ANR	698160	Identifier	BBUF_ADD		698145	0					
ANR	698161	ArgumentList	reg		698145	1					
ANR	698162	Argument	reg		698145	0					
ANR	698163	Identifier	reg		698145	0					
ANR	698164	Argument	& ptr		698145	1					
ANR	698165	UnaryOperationExpression	& ptr		698145	0					
ANR	698166	UnaryOperator	&		698145	0					
ANR	698167	Identifier	ptr		698145	1					
ANR	698168	Argument	SIZE_POINTER		698145	2					
ANR	698169	Identifier	SIZE_POINTER		698145	0					
ANR	698170	ReturnStatement	return 0 ;	260:2:5611:5619	698145	2	True				
ANR	698171	PrimaryExpression	0		698145	0					
ANR	698172	ReturnType	static int		698145	1					
ANR	698173	Identifier	add_pointer		698145	2					
ANR	698174	ParameterList	"regex_t * reg , void * addr"		698145	3					
ANR	698175	Parameter	regex_t * reg	255:12:5503:5514	698145	0	True				
ANR	698176	ParameterType	regex_t *		698145	0					
ANR	698177	Identifier	reg		698145	1					
ANR	698178	Parameter	void * addr	255:26:5517:5526	698145	1	True				
ANR	698179	ParameterType	void *		698145	0					
ANR	698180	Identifier	addr		698145	1					
ANR	698181	CFGEntryNode	ENTRY		698145		True				
ANR	698182	CFGExitNode	EXIT		698145		True				
ANR	698183	Symbol	SIZE_POINTER		698145						
ANR	698184	Symbol	& ptr		698145						
ANR	698185	Symbol	reg		698145						
ANR	698186	Symbol	addr		698145						
ANR	698187	Symbol	ptr		698145						
ANR	698188	Function	add_option	263:0:5624:5736							
ANR	698189	FunctionDef	"add_option (regex_t * reg , OnigOptionType option)"		698188	0					
ANR	698190	CompoundStatement		265:0:5683:5736	698188	0					
ANR	698191	ExpressionStatement	"BBUF_ADD ( reg , & option , SIZE_OPTION )"	266:2:5687:5722	698188	0	True				
ANR	698192	CallExpression	"BBUF_ADD ( reg , & option , SIZE_OPTION )"		698188	0					
ANR	698193	Callee	BBUF_ADD		698188	0					
ANR	698194	Identifier	BBUF_ADD		698188	0					
ANR	698195	ArgumentList	reg		698188	1					
ANR	698196	Argument	reg		698188	0					
ANR	698197	Identifier	reg		698188	0					
ANR	698198	Argument	& option		698188	1					
ANR	698199	UnaryOperationExpression	& option		698188	0					
ANR	698200	UnaryOperator	&		698188	0					
ANR	698201	Identifier	option		698188	1					
ANR	698202	Argument	SIZE_OPTION		698188	2					
ANR	698203	Identifier	SIZE_OPTION		698188	0					
ANR	698204	ReturnStatement	return 0 ;	267:2:5726:5734	698188	1	True				
ANR	698205	PrimaryExpression	0		698188	0					
ANR	698206	ReturnType	static int		698188	1					
ANR	698207	Identifier	add_option		698188	2					
ANR	698208	ParameterList	"regex_t * reg , OnigOptionType option"		698188	3					
ANR	698209	Parameter	regex_t * reg	264:11:5646:5657	698188	0	True				
ANR	698210	ParameterType	regex_t *		698188	0					
ANR	698211	Identifier	reg		698188	1					
ANR	698212	Parameter	OnigOptionType option	264:25:5660:5680	698188	1	True				
ANR	698213	ParameterType	OnigOptionType		698188	0					
ANR	698214	Identifier	option		698188	1					
ANR	698215	CFGEntryNode	ENTRY		698188		True				
ANR	698216	CFGExitNode	EXIT		698188		True				
ANR	698217	Symbol	& option		698188						
ANR	698218	Symbol	reg		698188						
ANR	698219	Symbol	SIZE_OPTION		698188						
ANR	698220	Symbol	option		698188						
ANR	698221	Function	add_opcode_rel_addr	270:0:5739:5911							
ANR	698222	FunctionDef	"add_opcode_rel_addr (regex_t * reg , int opcode , int addr)"		698221	0					
ANR	698223	CompoundStatement		272:0:5806:5911	698221	0					
ANR	698224	IdentifierDeclStatement	int r ;	273:2:5810:5815	698221	0	True				
ANR	698225	IdentifierDecl	r		698221	0					
ANR	698226	IdentifierDeclType	int		698221	0					
ANR	698227	Identifier	r		698221	1					
ANR	698228	ExpressionStatement	"r = add_opcode ( reg , opcode )"	275:2:5820:5847	698221	1	True				
ANR	698229	AssignmentExpression	"r = add_opcode ( reg , opcode )"		698221	0		=			
ANR	698230	Identifier	r		698221	0					
ANR	698231	CallExpression	"add_opcode ( reg , opcode )"		698221	1					
ANR	698232	Callee	add_opcode		698221	0					
ANR	698233	Identifier	add_opcode		698221	0					
ANR	698234	ArgumentList	reg		698221	1					
ANR	698235	Argument	reg		698221	0					
ANR	698236	Identifier	reg		698221	0					
ANR	698237	Argument	opcode		698221	1					
ANR	698238	Identifier	opcode		698221	0					
ANR	698239	IfStatement	if ( r )		698221	2					
ANR	698240	Condition	r	276:6:5855:5855	698221	0	True				
ANR	698241	Identifier	r		698221	0					
ANR	698242	ReturnStatement	return r ;	276:9:5858:5866	698221	1	True				
ANR	698243	Identifier	r		698221	0					
ANR	698244	ExpressionStatement	"r = add_rel_addr ( reg , addr )"	277:2:5870:5897	698221	3	True				
ANR	698245	AssignmentExpression	"r = add_rel_addr ( reg , addr )"		698221	0		=			
ANR	698246	Identifier	r		698221	0					
ANR	698247	CallExpression	"add_rel_addr ( reg , addr )"		698221	1					
ANR	698248	Callee	add_rel_addr		698221	0					
ANR	698249	Identifier	add_rel_addr		698221	0					
ANR	698250	ArgumentList	reg		698221	1					
ANR	698251	Argument	reg		698221	0					
ANR	698252	Identifier	reg		698221	0					
ANR	698253	Argument	addr		698221	1					
ANR	698254	Identifier	addr		698221	0					
ANR	698255	ReturnStatement	return r ;	278:2:5901:5909	698221	4	True				
ANR	698256	Identifier	r		698221	0					
ANR	698257	ReturnType	static int		698221	1					
ANR	698258	Identifier	add_opcode_rel_addr		698221	2					
ANR	698259	ParameterList	"regex_t * reg , int opcode , int addr"		698221	3					
ANR	698260	Parameter	regex_t * reg	271:20:5770:5781	698221	0	True				
ANR	698261	ParameterType	regex_t *		698221	0					
ANR	698262	Identifier	reg		698221	1					
ANR	698263	Parameter	int opcode	271:34:5784:5793	698221	1	True				
ANR	698264	ParameterType	int		698221	0					
ANR	698265	Identifier	opcode		698221	1					
ANR	698266	Parameter	int addr	271:46:5796:5803	698221	2	True				
ANR	698267	ParameterType	int		698221	0					
ANR	698268	Identifier	addr		698221	1					
ANR	698269	CFGEntryNode	ENTRY		698221		True				
ANR	698270	CFGExitNode	EXIT		698221		True				
ANR	698271	Symbol	r		698221						
ANR	698272	Symbol	reg		698221						
ANR	698273	Symbol	add_opcode		698221						
ANR	698274	Symbol	opcode		698221						
ANR	698275	Symbol	addr		698221						
ANR	698276	Symbol	add_rel_addr		698221						
ANR	698277	Function	add_bytes	281:0:5914:6015							
ANR	698278	FunctionDef	"add_bytes (regex_t * reg , UChar * bytes , int len)"		698277	0					
ANR	698279	CompoundStatement		283:0:5972:6015	698277	0					
ANR	698280	ExpressionStatement	"BBUF_ADD ( reg , bytes , len )"	284:2:5976:6001	698277	0	True				
ANR	698281	CallExpression	"BBUF_ADD ( reg , bytes , len )"		698277	0					
ANR	698282	Callee	BBUF_ADD		698277	0					
ANR	698283	Identifier	BBUF_ADD		698277	0					
ANR	698284	ArgumentList	reg		698277	1					
ANR	698285	Argument	reg		698277	0					
ANR	698286	Identifier	reg		698277	0					
ANR	698287	Argument	bytes		698277	1					
ANR	698288	Identifier	bytes		698277	0					
ANR	698289	Argument	len		698277	2					
ANR	698290	Identifier	len		698277	0					
ANR	698291	ReturnStatement	return 0 ;	285:2:6005:6013	698277	1	True				
ANR	698292	PrimaryExpression	0		698277	0					
ANR	698293	ReturnType	static int		698277	1					
ANR	698294	Identifier	add_bytes		698277	2					
ANR	698295	ParameterList	"regex_t * reg , UChar * bytes , int len"		698277	3					
ANR	698296	Parameter	regex_t * reg	282:10:5935:5946	698277	0	True				
ANR	698297	ParameterType	regex_t *		698277	0					
ANR	698298	Identifier	reg		698277	1					
ANR	698299	Parameter	UChar * bytes	282:24:5949:5960	698277	1	True				
ANR	698300	ParameterType	UChar *		698277	0					
ANR	698301	Identifier	bytes		698277	1					
ANR	698302	Parameter	int len	282:38:5963:5969	698277	2	True				
ANR	698303	ParameterType	int		698277	0					
ANR	698304	Identifier	len		698277	1					
ANR	698305	CFGEntryNode	ENTRY		698277		True				
ANR	698306	CFGExitNode	EXIT		698277		True				
ANR	698307	Symbol	len		698277						
ANR	698308	Symbol	reg		698277						
ANR	698309	Symbol	bytes		698277						
ANR	698310	Function	add_bitset	288:0:6018:6116							
ANR	698311	FunctionDef	"add_bitset (regex_t * reg , BitSetRef bs)"		698310	0					
ANR	698312	CompoundStatement		290:0:6068:6116	698310	0					
ANR	698313	ExpressionStatement	"BBUF_ADD ( reg , bs , SIZE_BITSET )"	291:2:6072:6102	698310	0	True				
ANR	698314	CallExpression	"BBUF_ADD ( reg , bs , SIZE_BITSET )"		698310	0					
ANR	698315	Callee	BBUF_ADD		698310	0					
ANR	698316	Identifier	BBUF_ADD		698310	0					
ANR	698317	ArgumentList	reg		698310	1					
ANR	698318	Argument	reg		698310	0					
ANR	698319	Identifier	reg		698310	0					
ANR	698320	Argument	bs		698310	1					
ANR	698321	Identifier	bs		698310	0					
ANR	698322	Argument	SIZE_BITSET		698310	2					
ANR	698323	Identifier	SIZE_BITSET		698310	0					
ANR	698324	ReturnStatement	return 0 ;	292:2:6106:6114	698310	1	True				
ANR	698325	PrimaryExpression	0		698310	0					
ANR	698326	ReturnType	static int		698310	1					
ANR	698327	Identifier	add_bitset		698310	2					
ANR	698328	ParameterList	"regex_t * reg , BitSetRef bs"		698310	3					
ANR	698329	Parameter	regex_t * reg	289:11:6040:6051	698310	0	True				
ANR	698330	ParameterType	regex_t *		698310	0					
ANR	698331	Identifier	reg		698310	1					
ANR	698332	Parameter	BitSetRef bs	289:25:6054:6065	698310	1	True				
ANR	698333	ParameterType	BitSetRef		698310	0					
ANR	698334	Identifier	bs		698310	1					
ANR	698335	CFGEntryNode	ENTRY		698310		True				
ANR	698336	CFGExitNode	EXIT		698310		True				
ANR	698337	Symbol	SIZE_BITSET		698310						
ANR	698338	Symbol	bs		698310						
ANR	698339	Symbol	reg		698310						
ANR	698340	Function	add_opcode_option	295:0:6119:6302							
ANR	698341	FunctionDef	"add_opcode_option (regex_t * reg , int opcode , OnigOptionType option)"		698340	0					
ANR	698342	CompoundStatement		297:0:6197:6302	698340	0					
ANR	698343	IdentifierDeclStatement	int r ;	298:2:6201:6206	698340	0	True				
ANR	698344	IdentifierDecl	r		698340	0					
ANR	698345	IdentifierDeclType	int		698340	0					
ANR	698346	Identifier	r		698340	1					
ANR	698347	ExpressionStatement	"r = add_opcode ( reg , opcode )"	300:2:6211:6238	698340	1	True				
ANR	698348	AssignmentExpression	"r = add_opcode ( reg , opcode )"		698340	0		=			
ANR	698349	Identifier	r		698340	0					
ANR	698350	CallExpression	"add_opcode ( reg , opcode )"		698340	1					
ANR	698351	Callee	add_opcode		698340	0					
ANR	698352	Identifier	add_opcode		698340	0					
ANR	698353	ArgumentList	reg		698340	1					
ANR	698354	Argument	reg		698340	0					
ANR	698355	Identifier	reg		698340	0					
ANR	698356	Argument	opcode		698340	1					
ANR	698357	Identifier	opcode		698340	0					
ANR	698358	IfStatement	if ( r )		698340	2					
ANR	698359	Condition	r	301:6:6246:6246	698340	0	True				
ANR	698360	Identifier	r		698340	0					
ANR	698361	ReturnStatement	return r ;	301:9:6249:6257	698340	1	True				
ANR	698362	Identifier	r		698340	0					
ANR	698363	ExpressionStatement	"r = add_option ( reg , option )"	302:2:6261:6288	698340	3	True				
ANR	698364	AssignmentExpression	"r = add_option ( reg , option )"		698340	0		=			
ANR	698365	Identifier	r		698340	0					
ANR	698366	CallExpression	"add_option ( reg , option )"		698340	1					
ANR	698367	Callee	add_option		698340	0					
ANR	698368	Identifier	add_option		698340	0					
ANR	698369	ArgumentList	reg		698340	1					
ANR	698370	Argument	reg		698340	0					
ANR	698371	Identifier	reg		698340	0					
ANR	698372	Argument	option		698340	1					
ANR	698373	Identifier	option		698340	0					
ANR	698374	ReturnStatement	return r ;	303:2:6292:6300	698340	4	True				
ANR	698375	Identifier	r		698340	0					
ANR	698376	ReturnType	static int		698340	1					
ANR	698377	Identifier	add_opcode_option		698340	2					
ANR	698378	ParameterList	"regex_t * reg , int opcode , OnigOptionType option"		698340	3					
ANR	698379	Parameter	regex_t * reg	296:18:6148:6159	698340	0	True				
ANR	698380	ParameterType	regex_t *		698340	0					
ANR	698381	Identifier	reg		698340	1					
ANR	698382	Parameter	int opcode	296:32:6162:6171	698340	1	True				
ANR	698383	ParameterType	int		698340	0					
ANR	698384	Identifier	opcode		698340	1					
ANR	698385	Parameter	OnigOptionType option	296:44:6174:6194	698340	2	True				
ANR	698386	ParameterType	OnigOptionType		698340	0					
ANR	698387	Identifier	option		698340	1					
ANR	698388	CFGEntryNode	ENTRY		698340		True				
ANR	698389	CFGExitNode	EXIT		698340		True				
ANR	698390	Symbol	r		698340						
ANR	698391	Symbol	reg		698340						
ANR	698392	Symbol	add_opcode		698340						
ANR	698393	Symbol	opcode		698340						
ANR	698394	Symbol	add_option		698340						
ANR	698395	Symbol	option		698340						
ANR	698396	DeclStmt									
ANR	698397	Decl							int	"int ( Node * node , regex_t * reg )"	compile_length_tree
ANR	698398	DeclStmt									
ANR	698399	Decl							int	"int ( Node * node , regex_t * reg )"	compile_tree
ANR	698400	Function	select_str_opcode	314:0:6583:7468							
ANR	698401	FunctionDef	"select_str_opcode (int mb_len , int str_len , int ignore_case)"		698400	0					
ANR	698402	CompoundStatement		316:0:6654:7468	698400	0					
ANR	698403	IdentifierDeclStatement	int op ;	317:2:6658:6664	698400	0	True				
ANR	698404	IdentifierDecl	op		698400	0					
ANR	698405	IdentifierDeclType	int		698400	0					
ANR	698406	Identifier	op		698400	1					
ANR	698407	IfStatement	if ( ignore_case )		698400	1					
ANR	698408	Condition	ignore_case	319:6:6673:6683	698400	0	True				
ANR	698409	Identifier	ignore_case		698400	0					
ANR	698410	CompoundStatement		4:19:31:31	698400	1					
ANR	698411	SwitchStatement	switch ( str_len )		698400	0					
ANR	698412	Condition	str_len	320:12:6700:6706	698400	0	True				
ANR	698413	Identifier	str_len		698400	0					
ANR	698414	CompoundStatement		5:21:54:54	698400	1					
ANR	698415	Label	case 1 :	321:4:6715:6721	698400	0	True				
ANR	698416	ExpressionStatement	op = OP_EXACT1_IC	321:13:6724:6741	698400	1	True				
ANR	698417	AssignmentExpression	op = OP_EXACT1_IC		698400	0		=			
ANR	698418	Identifier	op		698400	0					
ANR	698419	Identifier	OP_EXACT1_IC		698400	1					
ANR	698420	BreakStatement	break ;	321:32:6743:6748	698400	2	True				
ANR	698421	Label	default :	322:4:6754:6761	698400	3	True				
ANR	698422	Identifier	default		698400	0					
ANR	698423	ExpressionStatement	op = OP_EXACTN_IC	322:13:6763:6780	698400	4	True				
ANR	698424	AssignmentExpression	op = OP_EXACTN_IC		698400	0		=			
ANR	698425	Identifier	op		698400	0					
ANR	698426	Identifier	OP_EXACTN_IC		698400	1					
ANR	698427	BreakStatement	break ;	322:32:6782:6787	698400	5	True				
ANR	698428	ElseStatement	else		698400	0					
ANR	698429	CompoundStatement		10:7:151:151	698400	0					
ANR	698430	SwitchStatement	switch ( mb_len )		698400	0					
ANR	698431	Condition	mb_len	326:12:6820:6825	698400	0	True				
ANR	698432	Identifier	mb_len		698400	0					
ANR	698433	CompoundStatement		11:20:173:173	698400	1					
ANR	698434	Label	case 1 :	327:4:6834:6840	698400	0	True				
ANR	698435	SwitchStatement	switch ( str_len )		698400	1					
ANR	698436	Condition	str_len	328:14:6856:6862	698400	0	True				
ANR	698437	Identifier	str_len		698400	0					
ANR	698438	CompoundStatement		13:23:210:210	698400	1					
ANR	698439	Label	case 1 :	329:6:6873:6879	698400	0	True				
ANR	698440	ExpressionStatement	op = OP_EXACT1	329:15:6882:6896	698400	1	True				
ANR	698441	AssignmentExpression	op = OP_EXACT1		698400	0		=			
ANR	698442	Identifier	op		698400	0					
ANR	698443	Identifier	OP_EXACT1		698400	1					
ANR	698444	BreakStatement	break ;	329:31:6898:6903	698400	2	True				
ANR	698445	Label	case 2 :	330:6:6911:6917	698400	3	True				
ANR	698446	ExpressionStatement	op = OP_EXACT2	330:15:6920:6934	698400	4	True				
ANR	698447	AssignmentExpression	op = OP_EXACT2		698400	0		=			
ANR	698448	Identifier	op		698400	0					
ANR	698449	Identifier	OP_EXACT2		698400	1					
ANR	698450	BreakStatement	break ;	330:31:6936:6941	698400	5	True				
ANR	698451	Label	case 3 :	331:6:6949:6955	698400	6	True				
ANR	698452	ExpressionStatement	op = OP_EXACT3	331:15:6958:6972	698400	7	True				
ANR	698453	AssignmentExpression	op = OP_EXACT3		698400	0		=			
ANR	698454	Identifier	op		698400	0					
ANR	698455	Identifier	OP_EXACT3		698400	1					
ANR	698456	BreakStatement	break ;	331:31:6974:6979	698400	8	True				
ANR	698457	Label	case 4 :	332:6:6987:6993	698400	9	True				
ANR	698458	ExpressionStatement	op = OP_EXACT4	332:15:6996:7010	698400	10	True				
ANR	698459	AssignmentExpression	op = OP_EXACT4		698400	0		=			
ANR	698460	Identifier	op		698400	0					
ANR	698461	Identifier	OP_EXACT4		698400	1					
ANR	698462	BreakStatement	break ;	332:31:7012:7017	698400	11	True				
ANR	698463	Label	case 5 :	333:6:7025:7031	698400	12	True				
ANR	698464	ExpressionStatement	op = OP_EXACT5	333:15:7034:7048	698400	13	True				
ANR	698465	AssignmentExpression	op = OP_EXACT5		698400	0		=			
ANR	698466	Identifier	op		698400	0					
ANR	698467	Identifier	OP_EXACT5		698400	1					
ANR	698468	BreakStatement	break ;	333:31:7050:7055	698400	14	True				
ANR	698469	Label	default :	334:6:7063:7070	698400	15	True				
ANR	698470	Identifier	default		698400	0					
ANR	698471	ExpressionStatement	op = OP_EXACTN	334:15:7072:7086	698400	16	True				
ANR	698472	AssignmentExpression	op = OP_EXACTN		698400	0		=			
ANR	698473	Identifier	op		698400	0					
ANR	698474	Identifier	OP_EXACTN		698400	1					
ANR	698475	BreakStatement	break ;	334:31:7088:7093	698400	17	True				
ANR	698476	BreakStatement	break ;	336:6:7109:7114	698400	2	True				
ANR	698477	Label	case 2 :	338:4:7121:7127	698400	3	True				
ANR	698478	SwitchStatement	switch ( str_len )		698400	4					
ANR	698479	Condition	str_len	339:14:7143:7149	698400	0	True				
ANR	698480	Identifier	str_len		698400	0					
ANR	698481	CompoundStatement		24:23:497:497	698400	1					
ANR	698482	Label	case 1 :	340:6:7160:7166	698400	0	True				
ANR	698483	ExpressionStatement	op = OP_EXACTMB2N1	340:15:7169:7187	698400	1	True				
ANR	698484	AssignmentExpression	op = OP_EXACTMB2N1		698400	0		=			
ANR	698485	Identifier	op		698400	0					
ANR	698486	Identifier	OP_EXACTMB2N1		698400	1					
ANR	698487	BreakStatement	break ;	340:35:7189:7194	698400	2	True				
ANR	698488	Label	case 2 :	341:6:7202:7208	698400	3	True				
ANR	698489	ExpressionStatement	op = OP_EXACTMB2N2	341:15:7211:7229	698400	4	True				
ANR	698490	AssignmentExpression	op = OP_EXACTMB2N2		698400	0		=			
ANR	698491	Identifier	op		698400	0					
ANR	698492	Identifier	OP_EXACTMB2N2		698400	1					
ANR	698493	BreakStatement	break ;	341:35:7231:7236	698400	5	True				
ANR	698494	Label	case 3 :	342:6:7244:7250	698400	6	True				
ANR	698495	ExpressionStatement	op = OP_EXACTMB2N3	342:15:7253:7271	698400	7	True				
ANR	698496	AssignmentExpression	op = OP_EXACTMB2N3		698400	0		=			
ANR	698497	Identifier	op		698400	0					
ANR	698498	Identifier	OP_EXACTMB2N3		698400	1					
ANR	698499	BreakStatement	break ;	342:35:7273:7278	698400	8	True				
ANR	698500	Label	default :	343:6:7286:7293	698400	9	True				
ANR	698501	Identifier	default		698400	0					
ANR	698502	ExpressionStatement	op = OP_EXACTMB2N	343:15:7295:7312	698400	10	True				
ANR	698503	AssignmentExpression	op = OP_EXACTMB2N		698400	0		=			
ANR	698504	Identifier	op		698400	0					
ANR	698505	Identifier	OP_EXACTMB2N		698400	1					
ANR	698506	BreakStatement	break ;	343:35:7315:7320	698400	11	True				
ANR	698507	BreakStatement	break ;	345:6:7336:7341	698400	5	True				
ANR	698508	Label	case 3 :	347:4:7348:7354	698400	6	True				
ANR	698509	ExpressionStatement	op = OP_EXACTMB3N	348:6:7362:7379	698400	7	True				
ANR	698510	AssignmentExpression	op = OP_EXACTMB3N		698400	0		=			
ANR	698511	Identifier	op		698400	0					
ANR	698512	Identifier	OP_EXACTMB3N		698400	1					
ANR	698513	BreakStatement	break ;	349:6:7387:7392	698400	8	True				
ANR	698514	Label	default :	351:4:7399:7406	698400	9	True				
ANR	698515	Identifier	default		698400	0					
ANR	698516	ExpressionStatement	op = OP_EXACTMBN	352:6:7414:7430	698400	10	True				
ANR	698517	AssignmentExpression	op = OP_EXACTMBN		698400	0		=			
ANR	698518	Identifier	op		698400	0					
ANR	698519	Identifier	OP_EXACTMBN		698400	1					
ANR	698520	BreakStatement	break ;	353:6:7438:7443	698400	11	True				
ANR	698521	ReturnStatement	return op ;	356:2:7457:7466	698400	2	True				
ANR	698522	Identifier	op		698400	0					
ANR	698523	ReturnType	static int		698400	1					
ANR	698524	Identifier	select_str_opcode		698400	2					
ANR	698525	ParameterList	"int mb_len , int str_len , int ignore_case"		698400	3					
ANR	698526	Parameter	int mb_len	315:18:6612:6621	698400	0	True				
ANR	698527	ParameterType	int		698400	0					
ANR	698528	Identifier	mb_len		698400	1					
ANR	698529	Parameter	int str_len	315:30:6624:6634	698400	1	True				
ANR	698530	ParameterType	int		698400	0					
ANR	698531	Identifier	str_len		698400	1					
ANR	698532	Parameter	int ignore_case	315:43:6637:6651	698400	2	True				
ANR	698533	ParameterType	int		698400	0					
ANR	698534	Identifier	ignore_case		698400	1					
ANR	698535	CFGEntryNode	ENTRY		698400		True				
ANR	698536	CFGExitNode	EXIT		698400		True				
ANR	698537	Symbol	OP_EXACTMB3N		698400						
ANR	698538	Symbol	op		698400						
ANR	698539	Symbol	OP_EXACTMB2N3		698400						
ANR	698540	Symbol	OP_EXACTMB2N2		698400						
ANR	698541	Symbol	OP_EXACTMB2N		698400						
ANR	698542	Symbol	OP_EXACT1_IC		698400						
ANR	698543	Symbol	OP_EXACTN		698400						
ANR	698544	Symbol	ignore_case		698400						
ANR	698545	Symbol	OP_EXACT2		698400						
ANR	698546	Symbol	OP_EXACT1		698400						
ANR	698547	Symbol	OP_EXACT4		698400						
ANR	698548	Symbol	OP_EXACT3		698400						
ANR	698549	Symbol	str_len		698400						
ANR	698550	Symbol	OP_EXACT5		698400						
ANR	698551	Symbol	mb_len		698400						
ANR	698552	Symbol	OP_EXACTMBN		698400						
ANR	698553	Symbol	OP_EXACTMB2N1		698400						
ANR	698554	Symbol	OP_EXACTN_IC		698400						
ANR	698555	Function	compile_tree_empty_check	359:0:7471:8304							
ANR	698556	FunctionDef	"compile_tree_empty_check (Node * node , regex_t * reg , int empty_info)"		698555	0					
ANR	698557	CompoundStatement		361:0:7549:8304	698555	0					
ANR	698558	IdentifierDeclStatement	int r ;	362:2:7553:7558	698555	0	True				
ANR	698559	IdentifierDecl	r		698555	0					
ANR	698560	IdentifierDeclType	int		698555	0					
ANR	698561	Identifier	r		698555	1					
ANR	698562	IdentifierDeclStatement	int saved_num_null_check = reg -> num_null_check ;	363:2:7562:7608	698555	1	True				
ANR	698563	IdentifierDecl	saved_num_null_check = reg -> num_null_check		698555	0					
ANR	698564	IdentifierDeclType	int		698555	0					
ANR	698565	Identifier	saved_num_null_check		698555	1					
ANR	698566	AssignmentExpression	saved_num_null_check = reg -> num_null_check		698555	2		=			
ANR	698567	Identifier	saved_num_null_check		698555	0					
ANR	698568	PtrMemberAccess	reg -> num_null_check		698555	1					
ANR	698569	Identifier	reg		698555	0					
ANR	698570	Identifier	num_null_check		698555	1					
ANR	698571	IfStatement	if ( empty_info != 0 )		698555	2					
ANR	698572	Condition	empty_info != 0	365:6:7617:7631	698555	0	True				
ANR	698573	EqualityExpression	empty_info != 0		698555	0		!=			
ANR	698574	Identifier	empty_info		698555	0					
ANR	698575	PrimaryExpression	0		698555	1					
ANR	698576	CompoundStatement		5:23:84:84	698555	1					
ANR	698577	ExpressionStatement	"r = add_opcode ( reg , OP_NULL_CHECK_START )"	366:4:7640:7680	698555	0	True				
ANR	698578	AssignmentExpression	"r = add_opcode ( reg , OP_NULL_CHECK_START )"		698555	0		=			
ANR	698579	Identifier	r		698555	0					
ANR	698580	CallExpression	"add_opcode ( reg , OP_NULL_CHECK_START )"		698555	1					
ANR	698581	Callee	add_opcode		698555	0					
ANR	698582	Identifier	add_opcode		698555	0					
ANR	698583	ArgumentList	reg		698555	1					
ANR	698584	Argument	reg		698555	0					
ANR	698585	Identifier	reg		698555	0					
ANR	698586	Argument	OP_NULL_CHECK_START		698555	1					
ANR	698587	Identifier	OP_NULL_CHECK_START		698555	0					
ANR	698588	IfStatement	if ( r )		698555	1					
ANR	698589	Condition	r	367:8:7690:7690	698555	0	True				
ANR	698590	Identifier	r		698555	0					
ANR	698591	ReturnStatement	return r ;	367:11:7693:7701	698555	1	True				
ANR	698592	Identifier	r		698555	0					
ANR	698593	ExpressionStatement	"r = add_mem_num ( reg , reg -> num_null_check )"	368:4:7707:7748	698555	2	True				
ANR	698594	AssignmentExpression	"r = add_mem_num ( reg , reg -> num_null_check )"		698555	0		=			
ANR	698595	Identifier	r		698555	0					
ANR	698596	CallExpression	"add_mem_num ( reg , reg -> num_null_check )"		698555	1					
ANR	698597	Callee	add_mem_num		698555	0					
ANR	698598	Identifier	add_mem_num		698555	0					
ANR	698599	ArgumentList	reg		698555	1					
ANR	698600	Argument	reg		698555	0					
ANR	698601	Identifier	reg		698555	0					
ANR	698602	Argument	reg -> num_null_check		698555	1					
ANR	698603	PtrMemberAccess	reg -> num_null_check		698555	0					
ANR	698604	Identifier	reg		698555	0					
ANR	698605	Identifier	num_null_check		698555	1					
ANR	698606	IfStatement	if ( r )		698555	3					
ANR	698607	Condition	r	369:8:7778:7778	698555	0	True				
ANR	698608	Identifier	r		698555	0					
ANR	698609	ReturnStatement	return r ;	369:11:7781:7789	698555	1	True				
ANR	698610	Identifier	r		698555	0					
ANR	698611	ExpressionStatement	reg -> num_null_check ++	370:4:7795:7816	698555	4	True				
ANR	698612	PostIncDecOperationExpression	reg -> num_null_check ++		698555	0					
ANR	698613	PtrMemberAccess	reg -> num_null_check		698555	0					
ANR	698614	Identifier	reg		698555	0					
ANR	698615	Identifier	num_null_check		698555	1					
ANR	698616	IncDec	++		698555	1					
ANR	698617	ExpressionStatement	"r = compile_tree ( node , reg )"	373:2:7825:7852	698555	3	True				
ANR	698618	AssignmentExpression	"r = compile_tree ( node , reg )"		698555	0		=			
ANR	698619	Identifier	r		698555	0					
ANR	698620	CallExpression	"compile_tree ( node , reg )"		698555	1					
ANR	698621	Callee	compile_tree		698555	0					
ANR	698622	Identifier	compile_tree		698555	0					
ANR	698623	ArgumentList	node		698555	1					
ANR	698624	Argument	node		698555	0					
ANR	698625	Identifier	node		698555	0					
ANR	698626	Argument	reg		698555	1					
ANR	698627	Identifier	reg		698555	0					
ANR	698628	IfStatement	if ( r )		698555	4					
ANR	698629	Condition	r	374:6:7860:7860	698555	0	True				
ANR	698630	Identifier	r		698555	0					
ANR	698631	ReturnStatement	return r ;	374:9:7863:7871	698555	1	True				
ANR	698632	Identifier	r		698555	0					
ANR	698633	IfStatement	if ( empty_info != 0 )		698555	5					
ANR	698634	Condition	empty_info != 0	376:6:7880:7894	698555	0	True				
ANR	698635	EqualityExpression	empty_info != 0		698555	0		!=			
ANR	698636	Identifier	empty_info		698555	0					
ANR	698637	PrimaryExpression	0		698555	1					
ANR	698638	CompoundStatement		16:23:347:347	698555	1					
ANR	698639	IfStatement	if ( empty_info == NQ_TARGET_IS_EMPTY )		698555	0					
ANR	698640	Condition	empty_info == NQ_TARGET_IS_EMPTY	377:8:7907:7938	698555	0	True				
ANR	698641	EqualityExpression	empty_info == NQ_TARGET_IS_EMPTY		698555	0		==			
ANR	698642	Identifier	empty_info		698555	0					
ANR	698643	Identifier	NQ_TARGET_IS_EMPTY		698555	1					
ANR	698644	ExpressionStatement	"r = add_opcode ( reg , OP_NULL_CHECK_END )"	378:6:7947:7985	698555	1	True				
ANR	698645	AssignmentExpression	"r = add_opcode ( reg , OP_NULL_CHECK_END )"		698555	0		=			
ANR	698646	Identifier	r		698555	0					
ANR	698647	CallExpression	"add_opcode ( reg , OP_NULL_CHECK_END )"		698555	1					
ANR	698648	Callee	add_opcode		698555	0					
ANR	698649	Identifier	add_opcode		698555	0					
ANR	698650	ArgumentList	reg		698555	1					
ANR	698651	Argument	reg		698555	0					
ANR	698652	Identifier	reg		698555	0					
ANR	698653	Argument	OP_NULL_CHECK_END		698555	1					
ANR	698654	Identifier	OP_NULL_CHECK_END		698555	0					
ANR	698655	ElseStatement	else		698555	0					
ANR	698656	IfStatement	if ( empty_info == NQ_TARGET_IS_EMPTY_MEM )		698555	0					
ANR	698657	Condition	empty_info == NQ_TARGET_IS_EMPTY_MEM	379:13:8000:8035	698555	0	True				
ANR	698658	EqualityExpression	empty_info == NQ_TARGET_IS_EMPTY_MEM		698555	0		==			
ANR	698659	Identifier	empty_info		698555	0					
ANR	698660	Identifier	NQ_TARGET_IS_EMPTY_MEM		698555	1					
ANR	698661	ExpressionStatement	"r = add_opcode ( reg , OP_NULL_CHECK_END_MEMST )"	380:6:8044:8088	698555	1	True				
ANR	698662	AssignmentExpression	"r = add_opcode ( reg , OP_NULL_CHECK_END_MEMST )"		698555	0		=			
ANR	698663	Identifier	r		698555	0					
ANR	698664	CallExpression	"add_opcode ( reg , OP_NULL_CHECK_END_MEMST )"		698555	1					
ANR	698665	Callee	add_opcode		698555	0					
ANR	698666	Identifier	add_opcode		698555	0					
ANR	698667	ArgumentList	reg		698555	1					
ANR	698668	Argument	reg		698555	0					
ANR	698669	Identifier	reg		698555	0					
ANR	698670	Argument	OP_NULL_CHECK_END_MEMST		698555	1					
ANR	698671	Identifier	OP_NULL_CHECK_END_MEMST		698555	0					
ANR	698672	ElseStatement	else		698555	0					
ANR	698673	IfStatement	if ( empty_info == NQ_TARGET_IS_EMPTY_REC )		698555	0					
ANR	698674	Condition	empty_info == NQ_TARGET_IS_EMPTY_REC	381:13:8103:8138	698555	0	True				
ANR	698675	EqualityExpression	empty_info == NQ_TARGET_IS_EMPTY_REC		698555	0		==			
ANR	698676	Identifier	empty_info		698555	0					
ANR	698677	Identifier	NQ_TARGET_IS_EMPTY_REC		698555	1					
ANR	698678	ExpressionStatement	"r = add_opcode ( reg , OP_NULL_CHECK_END_MEMST_PUSH )"	382:6:8147:8196	698555	1	True				
ANR	698679	AssignmentExpression	"r = add_opcode ( reg , OP_NULL_CHECK_END_MEMST_PUSH )"		698555	0		=			
ANR	698680	Identifier	r		698555	0					
ANR	698681	CallExpression	"add_opcode ( reg , OP_NULL_CHECK_END_MEMST_PUSH )"		698555	1					
ANR	698682	Callee	add_opcode		698555	0					
ANR	698683	Identifier	add_opcode		698555	0					
ANR	698684	ArgumentList	reg		698555	1					
ANR	698685	Argument	reg		698555	0					
ANR	698686	Identifier	reg		698555	0					
ANR	698687	Argument	OP_NULL_CHECK_END_MEMST_PUSH		698555	1					
ANR	698688	Identifier	OP_NULL_CHECK_END_MEMST_PUSH		698555	0					
ANR	698689	IfStatement	if ( r )		698555	1					
ANR	698690	Condition	r	384:8:8207:8207	698555	0	True				
ANR	698691	Identifier	r		698555	0					
ANR	698692	ReturnStatement	return r ;	384:11:8210:8218	698555	1	True				
ANR	698693	Identifier	r		698555	0					
ANR	698694	ExpressionStatement	"r = add_mem_num ( reg , saved_num_null_check )"	385:4:8224:8266	698555	2	True				
ANR	698695	AssignmentExpression	"r = add_mem_num ( reg , saved_num_null_check )"		698555	0		=			
ANR	698696	Identifier	r		698555	0					
ANR	698697	CallExpression	"add_mem_num ( reg , saved_num_null_check )"		698555	1					
ANR	698698	Callee	add_mem_num		698555	0					
ANR	698699	Identifier	add_mem_num		698555	0					
ANR	698700	ArgumentList	reg		698555	1					
ANR	698701	Argument	reg		698555	0					
ANR	698702	Identifier	reg		698555	0					
ANR	698703	Argument	saved_num_null_check		698555	1					
ANR	698704	Identifier	saved_num_null_check		698555	0					
ANR	698705	ReturnStatement	return r ;	387:2:8294:8302	698555	6	True				
ANR	698706	Identifier	r		698555	0					
ANR	698707	ReturnType	static int		698555	1					
ANR	698708	Identifier	compile_tree_empty_check		698555	2					
ANR	698709	ParameterList	"Node * node , regex_t * reg , int empty_info"		698555	3					
ANR	698710	Parameter	Node * node	360:25:7507:7516	698555	0	True				
ANR	698711	ParameterType	Node *		698555	0					
ANR	698712	Identifier	node		698555	1					
ANR	698713	Parameter	regex_t * reg	360:37:7519:7530	698555	1	True				
ANR	698714	ParameterType	regex_t *		698555	0					
ANR	698715	Identifier	reg		698555	1					
ANR	698716	Parameter	int empty_info	360:51:7533:7546	698555	2	True				
ANR	698717	ParameterType	int		698555	0					
ANR	698718	Identifier	empty_info		698555	1					
ANR	698719	CFGEntryNode	ENTRY		698555		True				
ANR	698720	CFGExitNode	EXIT		698555		True				
ANR	698721	Symbol	NQ_TARGET_IS_EMPTY		698555						
ANR	698722	Symbol	NQ_TARGET_IS_EMPTY_MEM		698555						
ANR	698723	Symbol	OP_NULL_CHECK_START		698555						
ANR	698724	Symbol	OP_NULL_CHECK_END_MEMST		698555						
ANR	698725	Symbol	add_mem_num		698555						
ANR	698726	Symbol	reg -> num_null_check		698555						
ANR	698727	Symbol	node		698555						
ANR	698728	Symbol	r		698555						
ANR	698729	Symbol	saved_num_null_check		698555						
ANR	698730	Symbol	compile_tree		698555						
ANR	698731	Symbol	reg		698555						
ANR	698732	Symbol	OP_NULL_CHECK_END		698555						
ANR	698733	Symbol	OP_NULL_CHECK_END_MEMST_PUSH		698555						
ANR	698734	Symbol	empty_info		698555						
ANR	698735	Symbol	add_opcode		698555						
ANR	698736	Symbol	* reg		698555						
ANR	698737	Symbol	NQ_TARGET_IS_EMPTY_REC		698555						
ANR	698738	Function	compile_call	391:0:8330:8638							
ANR	698739	FunctionDef	"compile_call (CallNode * node , regex_t * reg)"		698738	0					
ANR	698740	CompoundStatement		393:0:8384:8638	698738	0					
ANR	698741	IdentifierDeclStatement	int r ;	394:2:8388:8393	698738	0	True				
ANR	698742	IdentifierDecl	r		698738	0					
ANR	698743	IdentifierDeclType	int		698738	0					
ANR	698744	Identifier	r		698738	1					
ANR	698745	ExpressionStatement	"r = add_opcode ( reg , OP_CALL )"	396:2:8398:8426	698738	1	True				
ANR	698746	AssignmentExpression	"r = add_opcode ( reg , OP_CALL )"		698738	0		=			
ANR	698747	Identifier	r		698738	0					
ANR	698748	CallExpression	"add_opcode ( reg , OP_CALL )"		698738	1					
ANR	698749	Callee	add_opcode		698738	0					
ANR	698750	Identifier	add_opcode		698738	0					
ANR	698751	ArgumentList	reg		698738	1					
ANR	698752	Argument	reg		698738	0					
ANR	698753	Identifier	reg		698738	0					
ANR	698754	Argument	OP_CALL		698738	1					
ANR	698755	Identifier	OP_CALL		698738	0					
ANR	698756	IfStatement	if ( r )		698738	2					
ANR	698757	Condition	r	397:6:8434:8434	698738	0	True				
ANR	698758	Identifier	r		698738	0					
ANR	698759	ReturnStatement	return r ;	397:9:8437:8445	698738	1	True				
ANR	698760	Identifier	r		698738	0					
ANR	698761	ExpressionStatement	"r = unset_addr_list_add ( node -> unset_addr_list , BBUF_GET_OFFSET_POS ( reg ) , node -> target )"	398:2:8449:8561	698738	3	True				
ANR	698762	AssignmentExpression	"r = unset_addr_list_add ( node -> unset_addr_list , BBUF_GET_OFFSET_POS ( reg ) , node -> target )"		698738	0		=			
ANR	698763	Identifier	r		698738	0					
ANR	698764	CallExpression	"unset_addr_list_add ( node -> unset_addr_list , BBUF_GET_OFFSET_POS ( reg ) , node -> target )"		698738	1					
ANR	698765	Callee	unset_addr_list_add		698738	0					
ANR	698766	Identifier	unset_addr_list_add		698738	0					
ANR	698767	ArgumentList	node -> unset_addr_list		698738	1					
ANR	698768	Argument	node -> unset_addr_list		698738	0					
ANR	698769	PtrMemberAccess	node -> unset_addr_list		698738	0					
ANR	698770	Identifier	node		698738	0					
ANR	698771	Identifier	unset_addr_list		698738	1					
ANR	698772	Argument	BBUF_GET_OFFSET_POS ( reg )		698738	1					
ANR	698773	CallExpression	BBUF_GET_OFFSET_POS ( reg )		698738	0					
ANR	698774	Callee	BBUF_GET_OFFSET_POS		698738	0					
ANR	698775	Identifier	BBUF_GET_OFFSET_POS		698738	0					
ANR	698776	ArgumentList	reg		698738	1					
ANR	698777	Argument	reg		698738	0					
ANR	698778	Identifier	reg		698738	0					
ANR	698779	Argument	node -> target		698738	2					
ANR	698780	PtrMemberAccess	node -> target		698738	0					
ANR	698781	Identifier	node		698738	0					
ANR	698782	Identifier	target		698738	1					
ANR	698783	IfStatement	if ( r )		698738	4					
ANR	698784	Condition	r	400:6:8569:8569	698738	0	True				
ANR	698785	Identifier	r		698738	0					
ANR	698786	ReturnStatement	return r ;	400:9:8572:8580	698738	1	True				
ANR	698787	Identifier	r		698738	0					
ANR	698788	ExpressionStatement	"r = add_abs_addr ( reg , 0 )"	401:2:8584:8624	698738	5	True				
ANR	698789	AssignmentExpression	"r = add_abs_addr ( reg , 0 )"		698738	0		=			
ANR	698790	Identifier	r		698738	0					
ANR	698791	CallExpression	"add_abs_addr ( reg , 0 )"		698738	1					
ANR	698792	Callee	add_abs_addr		698738	0					
ANR	698793	Identifier	add_abs_addr		698738	0					
ANR	698794	ArgumentList	reg		698738	1					
ANR	698795	Argument	reg		698738	0					
ANR	698796	Identifier	reg		698738	0					
ANR	698797	Argument	0		698738	1					
ANR	698798	PrimaryExpression	0		698738	0					
ANR	698799	ReturnStatement	return r ;	402:2:8628:8636	698738	6	True				
ANR	698800	Identifier	r		698738	0					
ANR	698801	ReturnType	static int		698738	1					
ANR	698802	Identifier	compile_call		698738	2					
ANR	698803	ParameterList	"CallNode * node , regex_t * reg"		698738	3					
ANR	698804	Parameter	CallNode * node	392:13:8354:8367	698738	0	True				
ANR	698805	ParameterType	CallNode *		698738	0					
ANR	698806	Identifier	node		698738	1					
ANR	698807	Parameter	regex_t * reg	392:29:8370:8381	698738	1	True				
ANR	698808	ParameterType	regex_t *		698738	0					
ANR	698809	Identifier	reg		698738	1					
ANR	698810	CFGEntryNode	ENTRY		698738		True				
ANR	698811	CFGExitNode	EXIT		698738		True				
ANR	698812	Symbol	node		698738						
ANR	698813	Symbol	r		698738						
ANR	698814	Symbol	BBUF_GET_OFFSET_POS		698738						
ANR	698815	Symbol	node -> unset_addr_list		698738						
ANR	698816	Symbol	reg		698738						
ANR	698817	Symbol	OP_CALL		698738						
ANR	698818	Symbol	add_abs_addr		698738						
ANR	698819	Symbol	* node		698738						
ANR	698820	Symbol	add_opcode		698738						
ANR	698821	Symbol	node -> target		698738						
ANR	698822	Symbol	unset_addr_list_add		698738						
ANR	698823	Function	compile_tree_n_times	406:0:8648:8826							
ANR	698824	FunctionDef	"compile_tree_n_times (Node * node , int n , regex_t * reg)"		698823	0					
ANR	698825	CompoundStatement		408:0:8713:8826	698823	0					
ANR	698826	IdentifierDeclStatement	"int i , r ;"	409:2:8717:8725	698823	0	True				
ANR	698827	IdentifierDecl	i		698823	0					
ANR	698828	IdentifierDeclType	int		698823	0					
ANR	698829	Identifier	i		698823	1					
ANR	698830	IdentifierDecl	r		698823	1					
ANR	698831	IdentifierDeclType	int		698823	0					
ANR	698832	Identifier	r		698823	1					
ANR	698833	ForStatement	for ( i = 0 ; i < n ; i ++ )		698823	1					
ANR	698834	ForInit	i = 0 ;	411:7:8735:8740	698823	0	True				
ANR	698835	AssignmentExpression	i = 0		698823	0		=			
ANR	698836	Identifier	i		698823	0					
ANR	698837	PrimaryExpression	0		698823	1					
ANR	698838	Condition	i < n	411:14:8742:8746	698823	1	True				
ANR	698839	RelationalExpression	i < n		698823	0		<			
ANR	698840	Identifier	i		698823	0					
ANR	698841	Identifier	n		698823	1					
ANR	698842	PostIncDecOperationExpression	i ++	411:21:8749:8751	698823	2	True				
ANR	698843	Identifier	i		698823	0					
ANR	698844	IncDec	++		698823	1					
ANR	698845	CompoundStatement		4:26:40:40	698823	3					
ANR	698846	ExpressionStatement	"r = compile_tree ( node , reg )"	412:4:8760:8787	698823	0	True				
ANR	698847	AssignmentExpression	"r = compile_tree ( node , reg )"		698823	0		=			
ANR	698848	Identifier	r		698823	0					
ANR	698849	CallExpression	"compile_tree ( node , reg )"		698823	1					
ANR	698850	Callee	compile_tree		698823	0					
ANR	698851	Identifier	compile_tree		698823	0					
ANR	698852	ArgumentList	node		698823	1					
ANR	698853	Argument	node		698823	0					
ANR	698854	Identifier	node		698823	0					
ANR	698855	Argument	reg		698823	1					
ANR	698856	Identifier	reg		698823	0					
ANR	698857	IfStatement	if ( r )		698823	1					
ANR	698858	Condition	r	413:8:8797:8797	698823	0	True				
ANR	698859	Identifier	r		698823	0					
ANR	698860	ReturnStatement	return r ;	413:11:8800:8808	698823	1	True				
ANR	698861	Identifier	r		698823	0					
ANR	698862	ReturnStatement	return 0 ;	415:2:8816:8824	698823	2	True				
ANR	698863	PrimaryExpression	0		698823	0					
ANR	698864	ReturnType	static int		698823	1					
ANR	698865	Identifier	compile_tree_n_times		698823	2					
ANR	698866	ParameterList	"Node * node , int n , regex_t * reg"		698823	3					
ANR	698867	Parameter	Node * node	407:21:8680:8689	698823	0	True				
ANR	698868	ParameterType	Node *		698823	0					
ANR	698869	Identifier	node		698823	1					
ANR	698870	Parameter	int n	407:33:8692:8696	698823	1	True				
ANR	698871	ParameterType	int		698823	0					
ANR	698872	Identifier	n		698823	1					
ANR	698873	Parameter	regex_t * reg	407:40:8699:8710	698823	2	True				
ANR	698874	ParameterType	regex_t *		698823	0					
ANR	698875	Identifier	reg		698823	1					
ANR	698876	CFGEntryNode	ENTRY		698823		True				
ANR	698877	CFGExitNode	EXIT		698823		True				
ANR	698878	Symbol	node		698823						
ANR	698879	Symbol	r		698823						
ANR	698880	Symbol	compile_tree		698823						
ANR	698881	Symbol	reg		698823						
ANR	698882	Symbol	i		698823						
ANR	698883	Symbol	n		698823						
ANR	698884	DeclStmt									
ANR	698885	Decl							int	int	len
ANR	698886	DeclStmt									
ANR	698887	Decl							int	int	op
ANR	698888	DeclStmt									
ANR	698889	Decl							mb_len	mb_len *	str_len
ANR	698890	Function	add_compile_string	435:0:9227:9687							
ANR	698891	FunctionDef	"add_compile_string (UChar * s , int mb_len , int str_len , regex_t * reg , int ignore_case)"		698890	0					
ANR	698892	CompoundStatement		438:0:9342:9687	698890	0					
ANR	698893	IdentifierDeclStatement	"int op = select_str_opcode ( mb_len , str_len , ignore_case ) ;"	439:2:9346:9402	698890	0	True				
ANR	698894	IdentifierDecl	"op = select_str_opcode ( mb_len , str_len , ignore_case )"		698890	0					
ANR	698895	IdentifierDeclType	int		698890	0					
ANR	698896	Identifier	op		698890	1					
ANR	698897	AssignmentExpression	"op = select_str_opcode ( mb_len , str_len , ignore_case )"		698890	2		=			
ANR	698898	Identifier	op		698890	0					
ANR	698899	CallExpression	"select_str_opcode ( mb_len , str_len , ignore_case )"		698890	1					
ANR	698900	Callee	select_str_opcode		698890	0					
ANR	698901	Identifier	select_str_opcode		698890	0					
ANR	698902	ArgumentList	mb_len		698890	1					
ANR	698903	Argument	mb_len		698890	0					
ANR	698904	Identifier	mb_len		698890	0					
ANR	698905	Argument	str_len		698890	1					
ANR	698906	Identifier	str_len		698890	0					
ANR	698907	Argument	ignore_case		698890	2					
ANR	698908	Identifier	ignore_case		698890	0					
ANR	698909	ExpressionStatement	"add_opcode ( reg , op )"	440:2:9406:9425	698890	1	True				
ANR	698910	CallExpression	"add_opcode ( reg , op )"		698890	0					
ANR	698911	Callee	add_opcode		698890	0					
ANR	698912	Identifier	add_opcode		698890	0					
ANR	698913	ArgumentList	reg		698890	1					
ANR	698914	Argument	reg		698890	0					
ANR	698915	Identifier	reg		698890	0					
ANR	698916	Argument	op		698890	1					
ANR	698917	Identifier	op		698890	0					
ANR	698918	IfStatement	if ( op == OP_EXACTMBN )		698890	2					
ANR	698919	Condition	op == OP_EXACTMBN	442:6:9434:9450	698890	0	True				
ANR	698920	EqualityExpression	op == OP_EXACTMBN		698890	0		==			
ANR	698921	Identifier	op		698890	0					
ANR	698922	Identifier	OP_EXACTMBN		698890	1					
ANR	698923	ExpressionStatement	"add_length ( reg , mb_len )"	443:4:9457:9480	698890	1	True				
ANR	698924	CallExpression	"add_length ( reg , mb_len )"		698890	0					
ANR	698925	Callee	add_length		698890	0					
ANR	698926	Identifier	add_length		698890	0					
ANR	698927	ArgumentList	reg		698890	1					
ANR	698928	Argument	reg		698890	0					
ANR	698929	Identifier	reg		698890	0					
ANR	698930	Argument	mb_len		698890	1					
ANR	698931	Identifier	mb_len		698890	0					
ANR	698932	IfStatement	if ( IS_NEED_STR_LEN_OP_EXACT ( op ) )		698890	3					
ANR	698933	Condition	IS_NEED_STR_LEN_OP_EXACT ( op )	445:6:9489:9516	698890	0	True				
ANR	698934	CallExpression	IS_NEED_STR_LEN_OP_EXACT ( op )		698890	0					
ANR	698935	Callee	IS_NEED_STR_LEN_OP_EXACT		698890	0					
ANR	698936	Identifier	IS_NEED_STR_LEN_OP_EXACT		698890	0					
ANR	698937	ArgumentList	op		698890	1					
ANR	698938	Argument	op		698890	0					
ANR	698939	Identifier	op		698890	0					
ANR	698940	CompoundStatement		8:36:176:176	698890	1					
ANR	698941	IfStatement	if ( op == OP_EXACTN_IC )		698890	0					
ANR	698942	Condition	op == OP_EXACTN_IC	446:8:9529:9546	698890	0	True				
ANR	698943	EqualityExpression	op == OP_EXACTN_IC		698890	0		==			
ANR	698944	Identifier	op		698890	0					
ANR	698945	Identifier	OP_EXACTN_IC		698890	1					
ANR	698946	ExpressionStatement	"add_length ( reg , mb_len * str_len )"	447:6:9555:9588	698890	1	True				
ANR	698947	CallExpression	"add_length ( reg , mb_len * str_len )"		698890	0					
ANR	698948	Callee	add_length		698890	0					
ANR	698949	Identifier	add_length		698890	0					
ANR	698950	ArgumentList	reg		698890	1					
ANR	698951	Argument	reg		698890	0					
ANR	698952	Identifier	reg		698890	0					
ANR	698953	Argument	mb_len * str_len		698890	1					
ANR	698954	MultiplicativeExpression	mb_len * str_len		698890	0		*			
ANR	698955	Identifier	mb_len		698890	0					
ANR	698956	Identifier	str_len		698890	1					
ANR	698957	ElseStatement	else		698890	0					
ANR	698958	ExpressionStatement	"add_length ( reg , str_len )"	449:6:9605:9629	698890	0	True				
ANR	698959	CallExpression	"add_length ( reg , str_len )"		698890	0					
ANR	698960	Callee	add_length		698890	0					
ANR	698961	Identifier	add_length		698890	0					
ANR	698962	ArgumentList	reg		698890	1					
ANR	698963	Argument	reg		698890	0					
ANR	698964	Identifier	reg		698890	0					
ANR	698965	Argument	str_len		698890	1					
ANR	698966	Identifier	str_len		698890	0					
ANR	698967	ExpressionStatement	"add_bytes ( reg , s , mb_len * str_len )"	452:2:9638:9673	698890	4	True				
ANR	698968	CallExpression	"add_bytes ( reg , s , mb_len * str_len )"		698890	0					
ANR	698969	Callee	add_bytes		698890	0					
ANR	698970	Identifier	add_bytes		698890	0					
ANR	698971	ArgumentList	reg		698890	1					
ANR	698972	Argument	reg		698890	0					
ANR	698973	Identifier	reg		698890	0					
ANR	698974	Argument	s		698890	1					
ANR	698975	Identifier	s		698890	0					
ANR	698976	Argument	mb_len * str_len		698890	2					
ANR	698977	MultiplicativeExpression	mb_len * str_len		698890	0		*			
ANR	698978	Identifier	mb_len		698890	0					
ANR	698979	Identifier	str_len		698890	1					
ANR	698980	ReturnStatement	return 0 ;	453:2:9677:9685	698890	5	True				
ANR	698981	PrimaryExpression	0		698890	0					
ANR	698982	ReturnType	static int		698890	1					
ANR	698983	Identifier	add_compile_string		698890	2					
ANR	698984	ParameterList	"UChar * s , int mb_len , int str_len , regex_t * reg , int ignore_case"		698890	3					
ANR	698985	Parameter	UChar * s	436:19:9257:9264	698890	0	True				
ANR	698986	ParameterType	UChar *		698890	0					
ANR	698987	Identifier	s		698890	1					
ANR	698988	Parameter	int mb_len	436:29:9267:9276	698890	1	True				
ANR	698989	ParameterType	int		698890	0					
ANR	698990	Identifier	mb_len		698890	1					
ANR	698991	Parameter	int str_len	436:41:9279:9289	698890	2	True				
ANR	698992	ParameterType	int		698890	0					
ANR	698993	Identifier	str_len		698890	1					
ANR	698994	Parameter	regex_t * reg	437:19:9311:9322	698890	3	True				
ANR	698995	ParameterType	regex_t *		698890	0					
ANR	698996	Identifier	reg		698890	1					
ANR	698997	Parameter	int ignore_case	437:33:9325:9339	698890	4	True				
ANR	698998	ParameterType	int		698890	0					
ANR	698999	Identifier	ignore_case		698890	1					
ANR	699000	CFGEntryNode	ENTRY		698890		True				
ANR	699001	CFGExitNode	EXIT		698890		True				
ANR	699002	Symbol	ignore_case		698890						
ANR	699003	Symbol	op		698890						
ANR	699004	Symbol	select_str_opcode		698890						
ANR	699005	Symbol	s		698890						
ANR	699006	Symbol	str_len		698890						
ANR	699007	Symbol	reg		698890						
ANR	699008	Symbol	mb_len		698890						
ANR	699009	Symbol	OP_EXACTMBN		698890						
ANR	699010	Symbol	IS_NEED_STR_LEN_OP_EXACT		698890						
ANR	699011	Symbol	OP_EXACTN_IC		698890						
ANR	699012	Function	compile_length_string_node	457:0:9691:10421							
ANR	699013	FunctionDef	"compile_length_string_node (Node * node , regex_t * reg)"		699012	0					
ANR	699014	CompoundStatement		459:0:9755:10421	699012	0					
ANR	699015	IdentifierDeclStatement	"int rlen , r , len , prev_len , slen , ambig ;"	460:2:9759:9798	699012	0	True				
ANR	699016	IdentifierDecl	rlen		699012	0					
ANR	699017	IdentifierDeclType	int		699012	0					
ANR	699018	Identifier	rlen		699012	1					
ANR	699019	IdentifierDecl	r		699012	1					
ANR	699020	IdentifierDeclType	int		699012	0					
ANR	699021	Identifier	r		699012	1					
ANR	699022	IdentifierDecl	len		699012	2					
ANR	699023	IdentifierDeclType	int		699012	0					
ANR	699024	Identifier	len		699012	1					
ANR	699025	IdentifierDecl	prev_len		699012	3					
ANR	699026	IdentifierDeclType	int		699012	0					
ANR	699027	Identifier	prev_len		699012	1					
ANR	699028	IdentifierDecl	slen		699012	4					
ANR	699029	IdentifierDeclType	int		699012	0					
ANR	699030	Identifier	slen		699012	1					
ANR	699031	IdentifierDecl	ambig		699012	5					
ANR	699032	IdentifierDeclType	int		699012	0					
ANR	699033	Identifier	ambig		699012	1					
ANR	699034	IdentifierDeclStatement	OnigEncoding enc = reg -> enc ;	461:2:9802:9829	699012	1	True				
ANR	699035	IdentifierDecl	enc = reg -> enc		699012	0					
ANR	699036	IdentifierDeclType	OnigEncoding		699012	0					
ANR	699037	Identifier	enc		699012	1					
ANR	699038	AssignmentExpression	enc = reg -> enc		699012	2		=			
ANR	699039	Identifier	enc		699012	0					
ANR	699040	PtrMemberAccess	reg -> enc		699012	1					
ANR	699041	Identifier	reg		699012	0					
ANR	699042	Identifier	enc		699012	1					
ANR	699043	IdentifierDeclStatement	"UChar * p , * prev ;"	462:2:9833:9848	699012	2	True				
ANR	699044	IdentifierDecl	* p		699012	0					
ANR	699045	IdentifierDeclType	UChar *		699012	0					
ANR	699046	Identifier	p		699012	1					
ANR	699047	IdentifierDecl	* prev		699012	1					
ANR	699048	IdentifierDeclType	UChar *		699012	0					
ANR	699049	Identifier	prev		699012	1					
ANR	699050	IdentifierDeclStatement	StrNode * sn ;	463:2:9852:9863	699012	3	True				
ANR	699051	IdentifierDecl	* sn		699012	0					
ANR	699052	IdentifierDeclType	StrNode *		699012	0					
ANR	699053	Identifier	sn		699012	1					
ANR	699054	ExpressionStatement	sn = NSTR ( node )	465:2:9868:9883	699012	4	True				
ANR	699055	AssignmentExpression	sn = NSTR ( node )		699012	0		=			
ANR	699056	Identifier	sn		699012	0					
ANR	699057	CallExpression	NSTR ( node )		699012	1					
ANR	699058	Callee	NSTR		699012	0					
ANR	699059	Identifier	NSTR		699012	0					
ANR	699060	ArgumentList	node		699012	1					
ANR	699061	Argument	node		699012	0					
ANR	699062	Identifier	node		699012	0					
ANR	699063	IfStatement	if ( sn -> end <= sn -> s )		699012	5					
ANR	699064	Condition	sn -> end <= sn -> s	466:6:9891:9906	699012	0	True				
ANR	699065	RelationalExpression	sn -> end <= sn -> s		699012	0		<=			
ANR	699066	PtrMemberAccess	sn -> end		699012	0					
ANR	699067	Identifier	sn		699012	0					
ANR	699068	Identifier	end		699012	1					
ANR	699069	PtrMemberAccess	sn -> s		699012	1					
ANR	699070	Identifier	sn		699012	0					
ANR	699071	Identifier	s		699012	1					
ANR	699072	ReturnStatement	return 0 ;	467:4:9913:9921	699012	1	True				
ANR	699073	PrimaryExpression	0		699012	0					
ANR	699074	ExpressionStatement	ambig = NSTRING_IS_AMBIG ( node )	469:2:9926:9956	699012	6	True				
ANR	699075	AssignmentExpression	ambig = NSTRING_IS_AMBIG ( node )		699012	0		=			
ANR	699076	Identifier	ambig		699012	0					
ANR	699077	CallExpression	NSTRING_IS_AMBIG ( node )		699012	1					
ANR	699078	Callee	NSTRING_IS_AMBIG		699012	0					
ANR	699079	Identifier	NSTRING_IS_AMBIG		699012	0					
ANR	699080	ArgumentList	node		699012	1					
ANR	699081	Argument	node		699012	0					
ANR	699082	Identifier	node		699012	0					
ANR	699083	ExpressionStatement	p = prev = sn -> s	471:2:9961:9977	699012	7	True				
ANR	699084	AssignmentExpression	p = prev = sn -> s		699012	0		=			
ANR	699085	Identifier	p		699012	0					
ANR	699086	AssignmentExpression	prev = sn -> s		699012	1		=			
ANR	699087	Identifier	prev		699012	0					
ANR	699088	PtrMemberAccess	sn -> s		699012	1					
ANR	699089	Identifier	sn		699012	0					
ANR	699090	Identifier	s		699012	1					
ANR	699091	ExpressionStatement	"prev_len = enclen ( enc , p )"	472:2:9981:10006	699012	8	True				
ANR	699092	AssignmentExpression	"prev_len = enclen ( enc , p )"		699012	0		=			
ANR	699093	Identifier	prev_len		699012	0					
ANR	699094	CallExpression	"enclen ( enc , p )"		699012	1					
ANR	699095	Callee	enclen		699012	0					
ANR	699096	Identifier	enclen		699012	0					
ANR	699097	ArgumentList	enc		699012	1					
ANR	699098	Argument	enc		699012	0					
ANR	699099	Identifier	enc		699012	0					
ANR	699100	Argument	p		699012	1					
ANR	699101	Identifier	p		699012	0					
ANR	699102	ExpressionStatement	p += prev_len	473:2:10010:10023	699012	9	True				
ANR	699103	AssignmentExpression	p += prev_len		699012	0		+=			
ANR	699104	Identifier	p		699012	0					
ANR	699105	Identifier	prev_len		699012	1					
ANR	699106	ExpressionStatement	slen = 1	474:2:10027:10035	699012	10	True				
ANR	699107	AssignmentExpression	slen = 1		699012	0		=			
ANR	699108	Identifier	slen		699012	0					
ANR	699109	PrimaryExpression	1		699012	1					
ANR	699110	ExpressionStatement	rlen = 0	475:2:10039:10047	699012	11	True				
ANR	699111	AssignmentExpression	rlen = 0		699012	0		=			
ANR	699112	Identifier	rlen		699012	0					
ANR	699113	PrimaryExpression	0		699012	1					
ANR	699114	ForStatement	for ( ; p < sn -> end ; )		699012	12					
ANR	699115	Condition	p < sn -> end	477:9:10059:10069	699012	0	True				
ANR	699116	RelationalExpression	p < sn -> end		699012	0		<			
ANR	699117	Identifier	p		699012	0					
ANR	699118	PtrMemberAccess	sn -> end		699012	1					
ANR	699119	Identifier	sn		699012	0					
ANR	699120	Identifier	end		699012	1					
ANR	699121	CompoundStatement		19:24:318:318	699012	1					
ANR	699122	ExpressionStatement	"len = enclen ( enc , p )"	478:4:10080:10100	699012	0	True				
ANR	699123	AssignmentExpression	"len = enclen ( enc , p )"		699012	0		=			
ANR	699124	Identifier	len		699012	0					
ANR	699125	CallExpression	"enclen ( enc , p )"		699012	1					
ANR	699126	Callee	enclen		699012	0					
ANR	699127	Identifier	enclen		699012	0					
ANR	699128	ArgumentList	enc		699012	1					
ANR	699129	Argument	enc		699012	0					
ANR	699130	Identifier	enc		699012	0					
ANR	699131	Argument	p		699012	1					
ANR	699132	Identifier	p		699012	0					
ANR	699133	IfStatement	if ( len == prev_len )		699012	1					
ANR	699134	Condition	len == prev_len	479:8:10110:10124	699012	0	True				
ANR	699135	EqualityExpression	len == prev_len		699012	0		==			
ANR	699136	Identifier	len		699012	0					
ANR	699137	Identifier	prev_len		699012	1					
ANR	699138	CompoundStatement		21:25:371:371	699012	1					
ANR	699139	ExpressionStatement	slen ++	480:6:10135:10141	699012	0	True				
ANR	699140	PostIncDecOperationExpression	slen ++		699012	0					
ANR	699141	Identifier	slen		699012	0					
ANR	699142	IncDec	++		699012	1					
ANR	699143	ElseStatement	else		699012	0					
ANR	699144	CompoundStatement		24:9:402:402	699012	0					
ANR	699145	ExpressionStatement	"r = add_compile_string_length ( prev , prev_len , slen , reg , ambig )"	483:6:10166:10229	699012	0	True				
ANR	699146	AssignmentExpression	"r = add_compile_string_length ( prev , prev_len , slen , reg , ambig )"		699012	0		=			
ANR	699147	Identifier	r		699012	0					
ANR	699148	CallExpression	"add_compile_string_length ( prev , prev_len , slen , reg , ambig )"		699012	1					
ANR	699149	Callee	add_compile_string_length		699012	0					
ANR	699150	Identifier	add_compile_string_length		699012	0					
ANR	699151	ArgumentList	prev		699012	1					
ANR	699152	Argument	prev		699012	0					
ANR	699153	Identifier	prev		699012	0					
ANR	699154	Argument	prev_len		699012	1					
ANR	699155	Identifier	prev_len		699012	0					
ANR	699156	Argument	slen		699012	2					
ANR	699157	Identifier	slen		699012	0					
ANR	699158	Argument	reg		699012	3					
ANR	699159	Identifier	reg		699012	0					
ANR	699160	Argument	ambig		699012	4					
ANR	699161	Identifier	ambig		699012	0					
ANR	699162	ExpressionStatement	rlen += r	484:6:10237:10246	699012	1	True				
ANR	699163	AssignmentExpression	rlen += r		699012	0		+=			
ANR	699164	Identifier	rlen		699012	0					
ANR	699165	Identifier	r		699012	1					
ANR	699166	ExpressionStatement	prev = p	485:6:10254:10262	699012	2	True				
ANR	699167	AssignmentExpression	prev = p		699012	0		=			
ANR	699168	Identifier	prev		699012	0					
ANR	699169	Identifier	p		699012	1					
ANR	699170	ExpressionStatement	slen = 1	486:6:10270:10278	699012	3	True				
ANR	699171	AssignmentExpression	slen = 1		699012	0		=			
ANR	699172	Identifier	slen		699012	0					
ANR	699173	PrimaryExpression	1		699012	1					
ANR	699174	ExpressionStatement	prev_len = len	487:6:10286:10300	699012	4	True				
ANR	699175	AssignmentExpression	prev_len = len		699012	0		=			
ANR	699176	Identifier	prev_len		699012	0					
ANR	699177	Identifier	len		699012	1					
ANR	699178	ExpressionStatement	p += len	489:4:10312:10320	699012	2	True				
ANR	699179	AssignmentExpression	p += len		699012	0		+=			
ANR	699180	Identifier	p		699012	0					
ANR	699181	Identifier	len		699012	1					
ANR	699182	ExpressionStatement	"r = add_compile_string_length ( prev , prev_len , slen , reg , ambig )"	491:2:10328:10391	699012	13	True				
ANR	699183	AssignmentExpression	"r = add_compile_string_length ( prev , prev_len , slen , reg , ambig )"		699012	0		=			
ANR	699184	Identifier	r		699012	0					
ANR	699185	CallExpression	"add_compile_string_length ( prev , prev_len , slen , reg , ambig )"		699012	1					
ANR	699186	Callee	add_compile_string_length		699012	0					
ANR	699187	Identifier	add_compile_string_length		699012	0					
ANR	699188	ArgumentList	prev		699012	1					
ANR	699189	Argument	prev		699012	0					
ANR	699190	Identifier	prev		699012	0					
ANR	699191	Argument	prev_len		699012	1					
ANR	699192	Identifier	prev_len		699012	0					
ANR	699193	Argument	slen		699012	2					
ANR	699194	Identifier	slen		699012	0					
ANR	699195	Argument	reg		699012	3					
ANR	699196	Identifier	reg		699012	0					
ANR	699197	Argument	ambig		699012	4					
ANR	699198	Identifier	ambig		699012	0					
ANR	699199	ExpressionStatement	rlen += r	492:2:10395:10404	699012	14	True				
ANR	699200	AssignmentExpression	rlen += r		699012	0		+=			
ANR	699201	Identifier	rlen		699012	0					
ANR	699202	Identifier	r		699012	1					
ANR	699203	ReturnStatement	return rlen ;	493:2:10408:10419	699012	15	True				
ANR	699204	Identifier	rlen		699012	0					
ANR	699205	ReturnType	static int		699012	1					
ANR	699206	Identifier	compile_length_string_node		699012	2					
ANR	699207	ParameterList	"Node * node , regex_t * reg"		699012	3					
ANR	699208	Parameter	Node * node	458:27:9729:9738	699012	0	True				
ANR	699209	ParameterType	Node *		699012	0					
ANR	699210	Identifier	node		699012	1					
ANR	699211	Parameter	regex_t * reg	458:39:9741:9752	699012	1	True				
ANR	699212	ParameterType	regex_t *		699012	0					
ANR	699213	Identifier	reg		699012	1					
ANR	699214	CFGEntryNode	ENTRY		699012		True				
ANR	699215	CFGExitNode	EXIT		699012		True				
ANR	699216	Symbol	* sn		699012						
ANR	699217	Symbol	NSTRING_IS_AMBIG		699012						
ANR	699218	Symbol	prev_len		699012						
ANR	699219	Symbol	prev		699012						
ANR	699220	Symbol	NSTR		699012						
ANR	699221	Symbol	enclen		699012						
ANR	699222	Symbol	reg -> enc		699012						
ANR	699223	Symbol	p		699012						
ANR	699224	Symbol	node		699012						
ANR	699225	Symbol	r		699012						
ANR	699226	Symbol	sn -> s		699012						
ANR	699227	Symbol	len		699012						
ANR	699228	Symbol	reg		699012						
ANR	699229	Symbol	add_compile_string_length		699012						
ANR	699230	Symbol	rlen		699012						
ANR	699231	Symbol	slen		699012						
ANR	699232	Symbol	enc		699012						
ANR	699233	Symbol	sn		699012						
ANR	699234	Symbol	sn -> end		699012						
ANR	699235	Symbol	ambig		699012						
ANR	699236	Symbol	* reg		699012						
ANR	699237	Function	compile_length_string_raw_node	496:0:10424:10614							
ANR	699238	FunctionDef	"compile_length_string_raw_node (StrNode * sn , regex_t * reg)"		699237	0					
ANR	699239	CompoundStatement		498:0:10493:10614	699237	0					
ANR	699240	IfStatement	if ( sn -> end <= sn -> s )		699237	0					
ANR	699241	Condition	sn -> end <= sn -> s	499:6:10501:10516	699237	0	True				
ANR	699242	RelationalExpression	sn -> end <= sn -> s		699237	0		<=			
ANR	699243	PtrMemberAccess	sn -> end		699237	0					
ANR	699244	Identifier	sn		699237	0					
ANR	699245	Identifier	end		699237	1					
ANR	699246	PtrMemberAccess	sn -> s		699237	1					
ANR	699247	Identifier	sn		699237	0					
ANR	699248	Identifier	s		699237	1					
ANR	699249	ReturnStatement	return 0 ;	500:4:10523:10531	699237	1	True				
ANR	699250	PrimaryExpression	0		699237	0					
ANR	699251	ReturnStatement	"return add_compile_string_length ( sn -> s , 1 , sn -> end - sn -> s , reg , 0 ) ;"	502:2:10536:10612	699237	1	True				
ANR	699252	CallExpression	"add_compile_string_length ( sn -> s , 1 , sn -> end - sn -> s , reg , 0 )"		699237	0					
ANR	699253	Callee	add_compile_string_length		699237	0					
ANR	699254	Identifier	add_compile_string_length		699237	0					
ANR	699255	ArgumentList	sn -> s		699237	1					
ANR	699256	Argument	sn -> s		699237	0					
ANR	699257	PtrMemberAccess	sn -> s		699237	0					
ANR	699258	Identifier	sn		699237	0					
ANR	699259	Identifier	s		699237	1					
ANR	699260	Argument	1		699237	1					
ANR	699261	PrimaryExpression	1		699237	0					
ANR	699262	Argument	sn -> end - sn -> s		699237	2					
ANR	699263	AdditiveExpression	sn -> end - sn -> s		699237	0		-			
ANR	699264	PtrMemberAccess	sn -> end		699237	0					
ANR	699265	Identifier	sn		699237	0					
ANR	699266	Identifier	end		699237	1					
ANR	699267	PtrMemberAccess	sn -> s		699237	1					
ANR	699268	Identifier	sn		699237	0					
ANR	699269	Identifier	s		699237	1					
ANR	699270	Argument	reg		699237	3					
ANR	699271	Identifier	reg		699237	0					
ANR	699272	Argument	0		699237	4					
ANR	699273	PrimaryExpression	0		699237	0					
ANR	699274	ReturnType	static int		699237	1					
ANR	699275	Identifier	compile_length_string_raw_node		699237	2					
ANR	699276	ParameterList	"StrNode * sn , regex_t * reg"		699237	3					
ANR	699277	Parameter	StrNode * sn	497:31:10466:10476	699237	0	True				
ANR	699278	ParameterType	StrNode *		699237	0					
ANR	699279	Identifier	sn		699237	1					
ANR	699280	Parameter	regex_t * reg	497:44:10479:10490	699237	1	True				
ANR	699281	ParameterType	regex_t *		699237	0					
ANR	699282	Identifier	reg		699237	1					
ANR	699283	CFGEntryNode	ENTRY		699237		True				
ANR	699284	CFGExitNode	EXIT		699237		True				
ANR	699285	Symbol	* sn		699237						
ANR	699286	Symbol	sn -> s		699237						
ANR	699287	Symbol	reg		699237						
ANR	699288	Symbol	add_compile_string_length		699237						
ANR	699289	Symbol	sn		699237						
ANR	699290	Symbol	sn -> end		699237						
ANR	699291	Function	compile_string_node	505:0:10617:11312							
ANR	699292	FunctionDef	"compile_string_node (Node * node , regex_t * reg)"		699291	0					
ANR	699293	CompoundStatement		507:0:10674:11312	699291	0					
ANR	699294	IdentifierDeclStatement	"int r , len , prev_len , slen , ambig ;"	508:2:10678:10711	699291	0	True				
ANR	699295	IdentifierDecl	r		699291	0					
ANR	699296	IdentifierDeclType	int		699291	0					
ANR	699297	Identifier	r		699291	1					
ANR	699298	IdentifierDecl	len		699291	1					
ANR	699299	IdentifierDeclType	int		699291	0					
ANR	699300	Identifier	len		699291	1					
ANR	699301	IdentifierDecl	prev_len		699291	2					
ANR	699302	IdentifierDeclType	int		699291	0					
ANR	699303	Identifier	prev_len		699291	1					
ANR	699304	IdentifierDecl	slen		699291	3					
ANR	699305	IdentifierDeclType	int		699291	0					
ANR	699306	Identifier	slen		699291	1					
ANR	699307	IdentifierDecl	ambig		699291	4					
ANR	699308	IdentifierDeclType	int		699291	0					
ANR	699309	Identifier	ambig		699291	1					
ANR	699310	IdentifierDeclStatement	OnigEncoding enc = reg -> enc ;	509:2:10715:10742	699291	1	True				
ANR	699311	IdentifierDecl	enc = reg -> enc		699291	0					
ANR	699312	IdentifierDeclType	OnigEncoding		699291	0					
ANR	699313	Identifier	enc		699291	1					
ANR	699314	AssignmentExpression	enc = reg -> enc		699291	2		=			
ANR	699315	Identifier	enc		699291	0					
ANR	699316	PtrMemberAccess	reg -> enc		699291	1					
ANR	699317	Identifier	reg		699291	0					
ANR	699318	Identifier	enc		699291	1					
ANR	699319	IdentifierDeclStatement	"UChar * p , * prev , * end ;"	510:2:10746:10767	699291	2	True				
ANR	699320	IdentifierDecl	* p		699291	0					
ANR	699321	IdentifierDeclType	UChar *		699291	0					
ANR	699322	Identifier	p		699291	1					
ANR	699323	IdentifierDecl	* prev		699291	1					
ANR	699324	IdentifierDeclType	UChar *		699291	0					
ANR	699325	Identifier	prev		699291	1					
ANR	699326	IdentifierDecl	* end		699291	2					
ANR	699327	IdentifierDeclType	UChar *		699291	0					
ANR	699328	Identifier	end		699291	1					
ANR	699329	IdentifierDeclStatement	StrNode * sn ;	511:2:10771:10782	699291	3	True				
ANR	699330	IdentifierDecl	* sn		699291	0					
ANR	699331	IdentifierDeclType	StrNode *		699291	0					
ANR	699332	Identifier	sn		699291	1					
ANR	699333	ExpressionStatement	sn = NSTR ( node )	513:2:10787:10802	699291	4	True				
ANR	699334	AssignmentExpression	sn = NSTR ( node )		699291	0		=			
ANR	699335	Identifier	sn		699291	0					
ANR	699336	CallExpression	NSTR ( node )		699291	1					
ANR	699337	Callee	NSTR		699291	0					
ANR	699338	Identifier	NSTR		699291	0					
ANR	699339	ArgumentList	node		699291	1					
ANR	699340	Argument	node		699291	0					
ANR	699341	Identifier	node		699291	0					
ANR	699342	IfStatement	if ( sn -> end <= sn -> s )		699291	5					
ANR	699343	Condition	sn -> end <= sn -> s	514:6:10810:10825	699291	0	True				
ANR	699344	RelationalExpression	sn -> end <= sn -> s		699291	0		<=			
ANR	699345	PtrMemberAccess	sn -> end		699291	0					
ANR	699346	Identifier	sn		699291	0					
ANR	699347	Identifier	end		699291	1					
ANR	699348	PtrMemberAccess	sn -> s		699291	1					
ANR	699349	Identifier	sn		699291	0					
ANR	699350	Identifier	s		699291	1					
ANR	699351	ReturnStatement	return 0 ;	515:4:10832:10840	699291	1	True				
ANR	699352	PrimaryExpression	0		699291	0					
ANR	699353	ExpressionStatement	end = sn -> end	517:2:10845:10858	699291	6	True				
ANR	699354	AssignmentExpression	end = sn -> end		699291	0		=			
ANR	699355	Identifier	end		699291	0					
ANR	699356	PtrMemberAccess	sn -> end		699291	1					
ANR	699357	Identifier	sn		699291	0					
ANR	699358	Identifier	end		699291	1					
ANR	699359	ExpressionStatement	ambig = NSTRING_IS_AMBIG ( node )	518:2:10862:10892	699291	7	True				
ANR	699360	AssignmentExpression	ambig = NSTRING_IS_AMBIG ( node )		699291	0		=			
ANR	699361	Identifier	ambig		699291	0					
ANR	699362	CallExpression	NSTRING_IS_AMBIG ( node )		699291	1					
ANR	699363	Callee	NSTRING_IS_AMBIG		699291	0					
ANR	699364	Identifier	NSTRING_IS_AMBIG		699291	0					
ANR	699365	ArgumentList	node		699291	1					
ANR	699366	Argument	node		699291	0					
ANR	699367	Identifier	node		699291	0					
ANR	699368	ExpressionStatement	p = prev = sn -> s	520:2:10897:10913	699291	8	True				
ANR	699369	AssignmentExpression	p = prev = sn -> s		699291	0		=			
ANR	699370	Identifier	p		699291	0					
ANR	699371	AssignmentExpression	prev = sn -> s		699291	1		=			
ANR	699372	Identifier	prev		699291	0					
ANR	699373	PtrMemberAccess	sn -> s		699291	1					
ANR	699374	Identifier	sn		699291	0					
ANR	699375	Identifier	s		699291	1					
ANR	699376	ExpressionStatement	"prev_len = enclen ( enc , p )"	521:2:10917:10942	699291	9	True				
ANR	699377	AssignmentExpression	"prev_len = enclen ( enc , p )"		699291	0		=			
ANR	699378	Identifier	prev_len		699291	0					
ANR	699379	CallExpression	"enclen ( enc , p )"		699291	1					
ANR	699380	Callee	enclen		699291	0					
ANR	699381	Identifier	enclen		699291	0					
ANR	699382	ArgumentList	enc		699291	1					
ANR	699383	Argument	enc		699291	0					
ANR	699384	Identifier	enc		699291	0					
ANR	699385	Argument	p		699291	1					
ANR	699386	Identifier	p		699291	0					
ANR	699387	ExpressionStatement	p += prev_len	522:2:10946:10959	699291	10	True				
ANR	699388	AssignmentExpression	p += prev_len		699291	0		+=			
ANR	699389	Identifier	p		699291	0					
ANR	699390	Identifier	prev_len		699291	1					
ANR	699391	ExpressionStatement	slen = 1	523:2:10963:10971	699291	11	True				
ANR	699392	AssignmentExpression	slen = 1		699291	0		=			
ANR	699393	Identifier	slen		699291	0					
ANR	699394	PrimaryExpression	1		699291	1					
ANR	699395	ForStatement	for ( ; p < end ; )		699291	12					
ANR	699396	Condition	p < end	525:9:10983:10989	699291	0	True				
ANR	699397	RelationalExpression	p < end		699291	0		<			
ANR	699398	Identifier	p		699291	0					
ANR	699399	Identifier	end		699291	1					
ANR	699400	CompoundStatement		19:20:319:319	699291	1					
ANR	699401	ExpressionStatement	"len = enclen ( enc , p )"	526:4:11000:11020	699291	0	True				
ANR	699402	AssignmentExpression	"len = enclen ( enc , p )"		699291	0		=			
ANR	699403	Identifier	len		699291	0					
ANR	699404	CallExpression	"enclen ( enc , p )"		699291	1					
ANR	699405	Callee	enclen		699291	0					
ANR	699406	Identifier	enclen		699291	0					
ANR	699407	ArgumentList	enc		699291	1					
ANR	699408	Argument	enc		699291	0					
ANR	699409	Identifier	enc		699291	0					
ANR	699410	Argument	p		699291	1					
ANR	699411	Identifier	p		699291	0					
ANR	699412	IfStatement	if ( len == prev_len )		699291	1					
ANR	699413	Condition	len == prev_len	527:8:11030:11044	699291	0	True				
ANR	699414	EqualityExpression	len == prev_len		699291	0		==			
ANR	699415	Identifier	len		699291	0					
ANR	699416	Identifier	prev_len		699291	1					
ANR	699417	CompoundStatement		21:25:372:372	699291	1					
ANR	699418	ExpressionStatement	slen ++	528:6:11055:11061	699291	0	True				
ANR	699419	PostIncDecOperationExpression	slen ++		699291	0					
ANR	699420	Identifier	slen		699291	0					
ANR	699421	IncDec	++		699291	1					
ANR	699422	ElseStatement	else		699291	0					
ANR	699423	CompoundStatement		24:9:403:403	699291	0					
ANR	699424	ExpressionStatement	"r = add_compile_string ( prev , prev_len , slen , reg , ambig )"	531:6:11086:11142	699291	0	True				
ANR	699425	AssignmentExpression	"r = add_compile_string ( prev , prev_len , slen , reg , ambig )"		699291	0		=			
ANR	699426	Identifier	r		699291	0					
ANR	699427	CallExpression	"add_compile_string ( prev , prev_len , slen , reg , ambig )"		699291	1					
ANR	699428	Callee	add_compile_string		699291	0					
ANR	699429	Identifier	add_compile_string		699291	0					
ANR	699430	ArgumentList	prev		699291	1					
ANR	699431	Argument	prev		699291	0					
ANR	699432	Identifier	prev		699291	0					
ANR	699433	Argument	prev_len		699291	1					
ANR	699434	Identifier	prev_len		699291	0					
ANR	699435	Argument	slen		699291	2					
ANR	699436	Identifier	slen		699291	0					
ANR	699437	Argument	reg		699291	3					
ANR	699438	Identifier	reg		699291	0					
ANR	699439	Argument	ambig		699291	4					
ANR	699440	Identifier	ambig		699291	0					
ANR	699441	IfStatement	if ( r )		699291	1					
ANR	699442	Condition	r	532:10:11154:11154	699291	0	True				
ANR	699443	Identifier	r		699291	0					
ANR	699444	ReturnStatement	return r ;	532:13:11157:11165	699291	1	True				
ANR	699445	Identifier	r		699291	0					
ANR	699446	ExpressionStatement	prev = p	534:6:11174:11183	699291	2	True				
ANR	699447	AssignmentExpression	prev = p		699291	0		=			
ANR	699448	Identifier	prev		699291	0					
ANR	699449	Identifier	p		699291	1					
ANR	699450	ExpressionStatement	slen = 1	535:6:11191:11200	699291	3	True				
ANR	699451	AssignmentExpression	slen = 1		699291	0		=			
ANR	699452	Identifier	slen		699291	0					
ANR	699453	PrimaryExpression	1		699291	1					
ANR	699454	ExpressionStatement	prev_len = len	536:6:11208:11222	699291	4	True				
ANR	699455	AssignmentExpression	prev_len = len		699291	0		=			
ANR	699456	Identifier	prev_len		699291	0					
ANR	699457	Identifier	len		699291	1					
ANR	699458	ExpressionStatement	p += len	539:4:11235:11243	699291	2	True				
ANR	699459	AssignmentExpression	p += len		699291	0		+=			
ANR	699460	Identifier	p		699291	0					
ANR	699461	Identifier	len		699291	1					
ANR	699462	ReturnStatement	"return add_compile_string ( prev , prev_len , slen , reg , ambig ) ;"	541:2:11251:11310	699291	13	True				
ANR	699463	CallExpression	"add_compile_string ( prev , prev_len , slen , reg , ambig )"		699291	0					
ANR	699464	Callee	add_compile_string		699291	0					
ANR	699465	Identifier	add_compile_string		699291	0					
ANR	699466	ArgumentList	prev		699291	1					
ANR	699467	Argument	prev		699291	0					
ANR	699468	Identifier	prev		699291	0					
ANR	699469	Argument	prev_len		699291	1					
ANR	699470	Identifier	prev_len		699291	0					
ANR	699471	Argument	slen		699291	2					
ANR	699472	Identifier	slen		699291	0					
ANR	699473	Argument	reg		699291	3					
ANR	699474	Identifier	reg		699291	0					
ANR	699475	Argument	ambig		699291	4					
ANR	699476	Identifier	ambig		699291	0					
ANR	699477	ReturnType	static int		699291	1					
ANR	699478	Identifier	compile_string_node		699291	2					
ANR	699479	ParameterList	"Node * node , regex_t * reg"		699291	3					
ANR	699480	Parameter	Node * node	506:20:10648:10657	699291	0	True				
ANR	699481	ParameterType	Node *		699291	0					
ANR	699482	Identifier	node		699291	1					
ANR	699483	Parameter	regex_t * reg	506:32:10660:10671	699291	1	True				
ANR	699484	ParameterType	regex_t *		699291	0					
ANR	699485	Identifier	reg		699291	1					
ANR	699486	CFGEntryNode	ENTRY		699291		True				
ANR	699487	CFGExitNode	EXIT		699291		True				
ANR	699488	Symbol	* sn		699291						
ANR	699489	Symbol	NSTRING_IS_AMBIG		699291						
ANR	699490	Symbol	prev_len		699291						
ANR	699491	Symbol	prev		699291						
ANR	699492	Symbol	NSTR		699291						
ANR	699493	Symbol	enclen		699291						
ANR	699494	Symbol	reg -> enc		699291						
ANR	699495	Symbol	p		699291						
ANR	699496	Symbol	node		699291						
ANR	699497	Symbol	r		699291						
ANR	699498	Symbol	add_compile_string		699291						
ANR	699499	Symbol	sn -> s		699291						
ANR	699500	Symbol	len		699291						
ANR	699501	Symbol	reg		699291						
ANR	699502	Symbol	slen		699291						
ANR	699503	Symbol	end		699291						
ANR	699504	Symbol	enc		699291						
ANR	699505	Symbol	sn		699291						
ANR	699506	Symbol	sn -> end		699291						
ANR	699507	Symbol	ambig		699291						
ANR	699508	Symbol	* reg		699291						
ANR	699509	Function	compile_string_raw_node	544:0:11315:11491							
ANR	699510	FunctionDef	"compile_string_raw_node (StrNode * sn , regex_t * reg)"		699509	0					
ANR	699511	CompoundStatement		546:0:11377:11491	699509	0					
ANR	699512	IfStatement	if ( sn -> end <= sn -> s )		699509	0					
ANR	699513	Condition	sn -> end <= sn -> s	547:6:11385:11400	699509	0	True				
ANR	699514	RelationalExpression	sn -> end <= sn -> s		699509	0		<=			
ANR	699515	PtrMemberAccess	sn -> end		699509	0					
ANR	699516	Identifier	sn		699509	0					
ANR	699517	Identifier	end		699509	1					
ANR	699518	PtrMemberAccess	sn -> s		699509	1					
ANR	699519	Identifier	sn		699509	0					
ANR	699520	Identifier	s		699509	1					
ANR	699521	ReturnStatement	return 0 ;	548:4:11407:11415	699509	1	True				
ANR	699522	PrimaryExpression	0		699509	0					
ANR	699523	ReturnStatement	"return add_compile_string ( sn -> s , 1 , sn -> end - sn -> s , reg , 0 ) ;"	550:2:11420:11489	699509	1	True				
ANR	699524	CallExpression	"add_compile_string ( sn -> s , 1 , sn -> end - sn -> s , reg , 0 )"		699509	0					
ANR	699525	Callee	add_compile_string		699509	0					
ANR	699526	Identifier	add_compile_string		699509	0					
ANR	699527	ArgumentList	sn -> s		699509	1					
ANR	699528	Argument	sn -> s		699509	0					
ANR	699529	PtrMemberAccess	sn -> s		699509	0					
ANR	699530	Identifier	sn		699509	0					
ANR	699531	Identifier	s		699509	1					
ANR	699532	Argument	1		699509	1					
ANR	699533	PrimaryExpression	1		699509	0					
ANR	699534	Argument	sn -> end - sn -> s		699509	2					
ANR	699535	AdditiveExpression	sn -> end - sn -> s		699509	0		-			
ANR	699536	PtrMemberAccess	sn -> end		699509	0					
ANR	699537	Identifier	sn		699509	0					
ANR	699538	Identifier	end		699509	1					
ANR	699539	PtrMemberAccess	sn -> s		699509	1					
ANR	699540	Identifier	sn		699509	0					
ANR	699541	Identifier	s		699509	1					
ANR	699542	Argument	reg		699509	3					
ANR	699543	Identifier	reg		699509	0					
ANR	699544	Argument	0		699509	4					
ANR	699545	PrimaryExpression	0		699509	0					
ANR	699546	ReturnType	static int		699509	1					
ANR	699547	Identifier	compile_string_raw_node		699509	2					
ANR	699548	ParameterList	"StrNode * sn , regex_t * reg"		699509	3					
ANR	699549	Parameter	StrNode * sn	545:24:11350:11360	699509	0	True				
ANR	699550	ParameterType	StrNode *		699509	0					
ANR	699551	Identifier	sn		699509	1					
ANR	699552	Parameter	regex_t * reg	545:37:11363:11374	699509	1	True				
ANR	699553	ParameterType	regex_t *		699509	0					
ANR	699554	Identifier	reg		699509	1					
ANR	699555	CFGEntryNode	ENTRY		699509		True				
ANR	699556	CFGExitNode	EXIT		699509		True				
ANR	699557	Symbol	* sn		699509						
ANR	699558	Symbol	add_compile_string		699509						
ANR	699559	Symbol	sn -> s		699509						
ANR	699560	Symbol	reg		699509						
ANR	699561	Symbol	sn		699509						
ANR	699562	Symbol	sn -> end		699509						
ANR	699563	Function	add_multi_byte_cclass	553:0:11494:12151							
ANR	699564	FunctionDef	"add_multi_byte_cclass (BBuf * mbuf , regex_t * reg)"		699563	0					
ANR	699565	CompoundStatement		555:0:11553:12151	699563	0					
ANR	699566	ExpressionStatement	"add_length ( reg , mbuf -> used )"	557:2:11595:11622	699563	0	True				
ANR	699567	CallExpression	"add_length ( reg , mbuf -> used )"		699563	0					
ANR	699568	Callee	add_length		699563	0					
ANR	699569	Identifier	add_length		699563	0					
ANR	699570	ArgumentList	reg		699563	1					
ANR	699571	Argument	reg		699563	0					
ANR	699572	Identifier	reg		699563	0					
ANR	699573	Argument	mbuf -> used		699563	1					
ANR	699574	PtrMemberAccess	mbuf -> used		699563	0					
ANR	699575	Identifier	mbuf		699563	0					
ANR	699576	Identifier	used		699563	1					
ANR	699577	ReturnStatement	"return add_bytes ( reg , mbuf -> p , mbuf -> used ) ;"	558:2:11626:11668	699563	1	True				
ANR	699578	CallExpression	"add_bytes ( reg , mbuf -> p , mbuf -> used )"		699563	0					
ANR	699579	Callee	add_bytes		699563	0					
ANR	699580	Identifier	add_bytes		699563	0					
ANR	699581	ArgumentList	reg		699563	1					
ANR	699582	Argument	reg		699563	0					
ANR	699583	Identifier	reg		699563	0					
ANR	699584	Argument	mbuf -> p		699563	1					
ANR	699585	PtrMemberAccess	mbuf -> p		699563	0					
ANR	699586	Identifier	mbuf		699563	0					
ANR	699587	Identifier	p		699563	1					
ANR	699588	Argument	mbuf -> used		699563	2					
ANR	699589	PtrMemberAccess	mbuf -> used		699563	0					
ANR	699590	Identifier	mbuf		699563	0					
ANR	699591	Identifier	used		699563	1					
ANR	699592	ReturnType	static int		699563	1					
ANR	699593	Identifier	add_multi_byte_cclass		699563	2					
ANR	699594	ParameterList	"BBuf * mbuf , regex_t * reg"		699563	3					
ANR	699595	Parameter	BBuf * mbuf	554:22:11527:11536	699563	0	True				
ANR	699596	ParameterType	BBuf *		699563	0					
ANR	699597	Identifier	mbuf		699563	1					
ANR	699598	Parameter	regex_t * reg	554:34:11539:11550	699563	1	True				
ANR	699599	ParameterType	regex_t *		699563	0					
ANR	699600	Identifier	reg		699563	1					
ANR	699601	CFGEntryNode	ENTRY		699563		True				
ANR	699602	CFGExitNode	EXIT		699563		True				
ANR	699603	Symbol	add_bytes		699563						
ANR	699604	Symbol	mbuf		699563						
ANR	699605	Symbol	reg		699563						
ANR	699606	Symbol	mbuf -> used		699563						
ANR	699607	Symbol	* mbuf		699563						
ANR	699608	Symbol	mbuf -> p		699563						
ANR	699609	Function	compile_length_cclass_node	576:0:12154:12740							
ANR	699610	FunctionDef	"compile_length_cclass_node (CClassNode * cc , regex_t * reg)"		699609	0					
ANR	699611	CompoundStatement		578:0:12222:12740	699609	0					
ANR	699612	IdentifierDeclStatement	int len ;	579:2:12226:12233	699609	0	True				
ANR	699613	IdentifierDecl	len		699609	0					
ANR	699614	IdentifierDeclType	int		699609	0					
ANR	699615	Identifier	len		699609	1					
ANR	699616	IfStatement	if ( IS_NCCLASS_SHARE ( cc ) )		699609	1					
ANR	699617	Condition	IS_NCCLASS_SHARE ( cc )	581:6:12242:12261	699609	0	True				
ANR	699618	CallExpression	IS_NCCLASS_SHARE ( cc )		699609	0					
ANR	699619	Callee	IS_NCCLASS_SHARE		699609	0					
ANR	699620	Identifier	IS_NCCLASS_SHARE		699609	0					
ANR	699621	ArgumentList	cc		699609	1					
ANR	699622	Argument	cc		699609	0					
ANR	699623	Identifier	cc		699609	0					
ANR	699624	CompoundStatement		4:28:41:41	699609	1					
ANR	699625	ExpressionStatement	len = SIZE_OPCODE + SIZE_POINTER	582:4:12270:12302	699609	0	True				
ANR	699626	AssignmentExpression	len = SIZE_OPCODE + SIZE_POINTER		699609	0		=			
ANR	699627	Identifier	len		699609	0					
ANR	699628	AdditiveExpression	SIZE_OPCODE + SIZE_POINTER		699609	1		+			
ANR	699629	Identifier	SIZE_OPCODE		699609	0					
ANR	699630	Identifier	SIZE_POINTER		699609	1					
ANR	699631	ReturnStatement	return len ;	583:4:12308:12318	699609	1	True				
ANR	699632	Identifier	len		699609	0					
ANR	699633	IfStatement	if ( IS_NULL ( cc -> mbuf ) )		699609	2					
ANR	699634	Condition	IS_NULL ( cc -> mbuf )	586:6:12331:12347	699609	0	True				
ANR	699635	CallExpression	IS_NULL ( cc -> mbuf )		699609	0					
ANR	699636	Callee	IS_NULL		699609	0					
ANR	699637	Identifier	IS_NULL		699609	0					
ANR	699638	ArgumentList	cc -> mbuf		699609	1					
ANR	699639	Argument	cc -> mbuf		699609	0					
ANR	699640	PtrMemberAccess	cc -> mbuf		699609	0					
ANR	699641	Identifier	cc		699609	0					
ANR	699642	Identifier	mbuf		699609	1					
ANR	699643	CompoundStatement		9:25:127:127	699609	1					
ANR	699644	ExpressionStatement	len = SIZE_OPCODE + SIZE_BITSET	587:4:12356:12387	699609	0	True				
ANR	699645	AssignmentExpression	len = SIZE_OPCODE + SIZE_BITSET		699609	0		=			
ANR	699646	Identifier	len		699609	0					
ANR	699647	AdditiveExpression	SIZE_OPCODE + SIZE_BITSET		699609	1		+			
ANR	699648	Identifier	SIZE_OPCODE		699609	0					
ANR	699649	Identifier	SIZE_BITSET		699609	1					
ANR	699650	ElseStatement	else		699609	0					
ANR	699651	CompoundStatement		12:7:177:177	699609	0					
ANR	699652	IfStatement	if ( ONIGENC_MBC_MINLEN ( reg -> enc ) > 1 || bitset_is_empty ( cc -> bs ) )		699609	0					
ANR	699653	Condition	ONIGENC_MBC_MINLEN ( reg -> enc ) > 1 || bitset_is_empty ( cc -> bs )	590:8:12410:12468	699609	0	True				
ANR	699654	OrExpression	ONIGENC_MBC_MINLEN ( reg -> enc ) > 1 || bitset_is_empty ( cc -> bs )		699609	0		||			
ANR	699655	RelationalExpression	ONIGENC_MBC_MINLEN ( reg -> enc ) > 1		699609	0		>			
ANR	699656	CallExpression	ONIGENC_MBC_MINLEN ( reg -> enc )		699609	0					
ANR	699657	Callee	ONIGENC_MBC_MINLEN		699609	0					
ANR	699658	Identifier	ONIGENC_MBC_MINLEN		699609	0					
ANR	699659	ArgumentList	reg -> enc		699609	1					
ANR	699660	Argument	reg -> enc		699609	0					
ANR	699661	PtrMemberAccess	reg -> enc		699609	0					
ANR	699662	Identifier	reg		699609	0					
ANR	699663	Identifier	enc		699609	1					
ANR	699664	PrimaryExpression	1		699609	1					
ANR	699665	CallExpression	bitset_is_empty ( cc -> bs )		699609	1					
ANR	699666	Callee	bitset_is_empty		699609	0					
ANR	699667	Identifier	bitset_is_empty		699609	0					
ANR	699668	ArgumentList	cc -> bs		699609	1					
ANR	699669	Argument	cc -> bs		699609	0					
ANR	699670	PtrMemberAccess	cc -> bs		699609	0					
ANR	699671	Identifier	cc		699609	0					
ANR	699672	Identifier	bs		699609	1					
ANR	699673	CompoundStatement		13:69:248:248	699609	1					
ANR	699674	ExpressionStatement	len = SIZE_OPCODE	591:6:12479:12496	699609	0	True				
ANR	699675	AssignmentExpression	len = SIZE_OPCODE		699609	0		=			
ANR	699676	Identifier	len		699609	0					
ANR	699677	Identifier	SIZE_OPCODE		699609	1					
ANR	699678	ElseStatement	else		699609	0					
ANR	699679	CompoundStatement		16:9:290:290	699609	0					
ANR	699680	ExpressionStatement	len = SIZE_OPCODE + SIZE_BITSET	594:6:12521:12552	699609	0	True				
ANR	699681	AssignmentExpression	len = SIZE_OPCODE + SIZE_BITSET		699609	0		=			
ANR	699682	Identifier	len		699609	0					
ANR	699683	AdditiveExpression	SIZE_OPCODE + SIZE_BITSET		699609	1		+			
ANR	699684	Identifier	SIZE_OPCODE		699609	0					
ANR	699685	Identifier	SIZE_BITSET		699609	1					
ANR	699686	ExpressionStatement	len += SIZE_LENGTH + cc -> mbuf -> used	597:4:12602:12637	699609	1	True				
ANR	699687	AssignmentExpression	len += SIZE_LENGTH + cc -> mbuf -> used		699609	0		+=			
ANR	699688	Identifier	len		699609	0					
ANR	699689	AdditiveExpression	SIZE_LENGTH + cc -> mbuf -> used		699609	1		+			
ANR	699690	Identifier	SIZE_LENGTH		699609	0					
ANR	699691	PtrMemberAccess	cc -> mbuf -> used		699609	1					
ANR	699692	PtrMemberAccess	cc -> mbuf		699609	0					
ANR	699693	Identifier	cc		699609	0					
ANR	699694	Identifier	mbuf		699609	1					
ANR	699695	Identifier	used		699609	1					
ANR	699696	ReturnStatement	return len ;	603:2:12728:12738	699609	3	True				
ANR	699697	Identifier	len		699609	0					
ANR	699698	ReturnType	static int		699609	1					
ANR	699699	Identifier	compile_length_cclass_node		699609	2					
ANR	699700	ParameterList	"CClassNode * cc , regex_t * reg"		699609	3					
ANR	699701	Parameter	CClassNode * cc	577:27:12192:12205	699609	0	True				
ANR	699702	ParameterType	CClassNode *		699609	0					
ANR	699703	Identifier	cc		699609	1					
ANR	699704	Parameter	regex_t * reg	577:43:12208:12219	699609	1	True				
ANR	699705	ParameterType	regex_t *		699609	0					
ANR	699706	Identifier	reg		699609	1					
ANR	699707	CFGEntryNode	ENTRY		699609		True				
ANR	699708	CFGExitNode	EXIT		699609		True				
ANR	699709	Symbol	cc		699609						
ANR	699710	Symbol	SIZE_BITSET		699609						
ANR	699711	Symbol	* cc		699609						
ANR	699712	Symbol	ONIGENC_MBC_MINLEN		699609						
ANR	699713	Symbol	cc -> mbuf -> used		699609						
ANR	699714	Symbol	cc -> mbuf		699609						
ANR	699715	Symbol	SIZE_LENGTH		699609						
ANR	699716	Symbol	* * cc		699609						
ANR	699717	Symbol	cc -> bs		699609						
ANR	699718	Symbol	reg -> enc		699609						
ANR	699719	Symbol	SIZE_OPCODE		699609						
ANR	699720	Symbol	SIZE_POINTER		699609						
ANR	699721	Symbol	bitset_is_empty		699609						
ANR	699722	Symbol	* cc -> mbuf		699609						
ANR	699723	Symbol	len		699609						
ANR	699724	Symbol	IS_NULL		699609						
ANR	699725	Symbol	reg		699609						
ANR	699726	Symbol	IS_NCCLASS_SHARE		699609						
ANR	699727	Symbol	* reg		699609						
ANR	699728	Function	compile_cclass_node	606:0:12743:13630							
ANR	699729	FunctionDef	"compile_cclass_node (CClassNode * cc , regex_t * reg)"		699728	0					
ANR	699730	CompoundStatement		608:0:12804:13630	699728	0					
ANR	699731	IdentifierDeclStatement	int r ;	609:2:12808:12813	699728	0	True				
ANR	699732	IdentifierDecl	r		699728	0					
ANR	699733	IdentifierDeclType	int		699728	0					
ANR	699734	Identifier	r		699728	1					
ANR	699735	IfStatement	if ( IS_NCCLASS_SHARE ( cc ) )		699728	1					
ANR	699736	Condition	IS_NCCLASS_SHARE ( cc )	611:6:12822:12841	699728	0	True				
ANR	699737	CallExpression	IS_NCCLASS_SHARE ( cc )		699728	0					
ANR	699738	Callee	IS_NCCLASS_SHARE		699728	0					
ANR	699739	Identifier	IS_NCCLASS_SHARE		699728	0					
ANR	699740	ArgumentList	cc		699728	1					
ANR	699741	Argument	cc		699728	0					
ANR	699742	Identifier	cc		699728	0					
ANR	699743	CompoundStatement		4:28:39:39	699728	1					
ANR	699744	ExpressionStatement	"add_opcode ( reg , OP_CCLASS_NODE )"	612:4:12850:12881	699728	0	True				
ANR	699745	CallExpression	"add_opcode ( reg , OP_CCLASS_NODE )"		699728	0					
ANR	699746	Callee	add_opcode		699728	0					
ANR	699747	Identifier	add_opcode		699728	0					
ANR	699748	ArgumentList	reg		699728	1					
ANR	699749	Argument	reg		699728	0					
ANR	699750	Identifier	reg		699728	0					
ANR	699751	Argument	OP_CCLASS_NODE		699728	1					
ANR	699752	Identifier	OP_CCLASS_NODE		699728	0					
ANR	699753	ExpressionStatement	"r = add_pointer ( reg , cc )"	613:4:12887:12911	699728	1	True				
ANR	699754	AssignmentExpression	"r = add_pointer ( reg , cc )"		699728	0		=			
ANR	699755	Identifier	r		699728	0					
ANR	699756	CallExpression	"add_pointer ( reg , cc )"		699728	1					
ANR	699757	Callee	add_pointer		699728	0					
ANR	699758	Identifier	add_pointer		699728	0					
ANR	699759	ArgumentList	reg		699728	1					
ANR	699760	Argument	reg		699728	0					
ANR	699761	Identifier	reg		699728	0					
ANR	699762	Argument	cc		699728	1					
ANR	699763	Identifier	cc		699728	0					
ANR	699764	ReturnStatement	return r ;	614:4:12917:12925	699728	2	True				
ANR	699765	Identifier	r		699728	0					
ANR	699766	IfStatement	if ( IS_NULL ( cc -> mbuf ) )		699728	2					
ANR	699767	Condition	IS_NULL ( cc -> mbuf )	617:6:12938:12954	699728	0	True				
ANR	699768	CallExpression	IS_NULL ( cc -> mbuf )		699728	0					
ANR	699769	Callee	IS_NULL		699728	0					
ANR	699770	Identifier	IS_NULL		699728	0					
ANR	699771	ArgumentList	cc -> mbuf		699728	1					
ANR	699772	Argument	cc -> mbuf		699728	0					
ANR	699773	PtrMemberAccess	cc -> mbuf		699728	0					
ANR	699774	Identifier	cc		699728	0					
ANR	699775	Identifier	mbuf		699728	1					
ANR	699776	CompoundStatement		10:25:152:152	699728	1					
ANR	699777	IfStatement	if ( IS_NCCLASS_NOT ( cc ) )		699728	0					
ANR	699778	Condition	IS_NCCLASS_NOT ( cc )	618:8:12967:12984	699728	0	True				
ANR	699779	CallExpression	IS_NCCLASS_NOT ( cc )		699728	0					
ANR	699780	Callee	IS_NCCLASS_NOT		699728	0					
ANR	699781	Identifier	IS_NCCLASS_NOT		699728	0					
ANR	699782	ArgumentList	cc		699728	1					
ANR	699783	Argument	cc		699728	0					
ANR	699784	Identifier	cc		699728	0					
ANR	699785	ExpressionStatement	"add_opcode ( reg , OP_CCLASS_NOT )"	619:6:12993:13023	699728	1	True				
ANR	699786	CallExpression	"add_opcode ( reg , OP_CCLASS_NOT )"		699728	0					
ANR	699787	Callee	add_opcode		699728	0					
ANR	699788	Identifier	add_opcode		699728	0					
ANR	699789	ArgumentList	reg		699728	1					
ANR	699790	Argument	reg		699728	0					
ANR	699791	Identifier	reg		699728	0					
ANR	699792	Argument	OP_CCLASS_NOT		699728	1					
ANR	699793	Identifier	OP_CCLASS_NOT		699728	0					
ANR	699794	ElseStatement	else		699728	0					
ANR	699795	ExpressionStatement	"add_opcode ( reg , OP_CCLASS )"	621:6:13040:13066	699728	0	True				
ANR	699796	CallExpression	"add_opcode ( reg , OP_CCLASS )"		699728	0					
ANR	699797	Callee	add_opcode		699728	0					
ANR	699798	Identifier	add_opcode		699728	0					
ANR	699799	ArgumentList	reg		699728	1					
ANR	699800	Argument	reg		699728	0					
ANR	699801	Identifier	reg		699728	0					
ANR	699802	Argument	OP_CCLASS		699728	1					
ANR	699803	Identifier	OP_CCLASS		699728	0					
ANR	699804	ExpressionStatement	"r = add_bitset ( reg , cc -> bs )"	623:4:13073:13100	699728	1	True				
ANR	699805	AssignmentExpression	"r = add_bitset ( reg , cc -> bs )"		699728	0		=			
ANR	699806	Identifier	r		699728	0					
ANR	699807	CallExpression	"add_bitset ( reg , cc -> bs )"		699728	1					
ANR	699808	Callee	add_bitset		699728	0					
ANR	699809	Identifier	add_bitset		699728	0					
ANR	699810	ArgumentList	reg		699728	1					
ANR	699811	Argument	reg		699728	0					
ANR	699812	Identifier	reg		699728	0					
ANR	699813	Argument	cc -> bs		699728	1					
ANR	699814	PtrMemberAccess	cc -> bs		699728	0					
ANR	699815	Identifier	cc		699728	0					
ANR	699816	Identifier	bs		699728	1					
ANR	699817	ElseStatement	else		699728	0					
ANR	699818	CompoundStatement		18:7:308:308	699728	0					
ANR	699819	IfStatement	if ( ONIGENC_MBC_MINLEN ( reg -> enc ) > 1 || bitset_is_empty ( cc -> bs ) )		699728	0					
ANR	699820	Condition	ONIGENC_MBC_MINLEN ( reg -> enc ) > 1 || bitset_is_empty ( cc -> bs )	626:8:13123:13181	699728	0	True				
ANR	699821	OrExpression	ONIGENC_MBC_MINLEN ( reg -> enc ) > 1 || bitset_is_empty ( cc -> bs )		699728	0		||			
ANR	699822	RelationalExpression	ONIGENC_MBC_MINLEN ( reg -> enc ) > 1		699728	0		>			
ANR	699823	CallExpression	ONIGENC_MBC_MINLEN ( reg -> enc )		699728	0					
ANR	699824	Callee	ONIGENC_MBC_MINLEN		699728	0					
ANR	699825	Identifier	ONIGENC_MBC_MINLEN		699728	0					
ANR	699826	ArgumentList	reg -> enc		699728	1					
ANR	699827	Argument	reg -> enc		699728	0					
ANR	699828	PtrMemberAccess	reg -> enc		699728	0					
ANR	699829	Identifier	reg		699728	0					
ANR	699830	Identifier	enc		699728	1					
ANR	699831	PrimaryExpression	1		699728	1					
ANR	699832	CallExpression	bitset_is_empty ( cc -> bs )		699728	1					
ANR	699833	Callee	bitset_is_empty		699728	0					
ANR	699834	Identifier	bitset_is_empty		699728	0					
ANR	699835	ArgumentList	cc -> bs		699728	1					
ANR	699836	Argument	cc -> bs		699728	0					
ANR	699837	PtrMemberAccess	cc -> bs		699728	0					
ANR	699838	Identifier	cc		699728	0					
ANR	699839	Identifier	bs		699728	1					
ANR	699840	CompoundStatement		19:69:379:379	699728	1					
ANR	699841	IfStatement	if ( IS_NCCLASS_NOT ( cc ) )		699728	0					
ANR	699842	Condition	IS_NCCLASS_NOT ( cc )	627:10:13196:13213	699728	0	True				
ANR	699843	CallExpression	IS_NCCLASS_NOT ( cc )		699728	0					
ANR	699844	Callee	IS_NCCLASS_NOT		699728	0					
ANR	699845	Identifier	IS_NCCLASS_NOT		699728	0					
ANR	699846	ArgumentList	cc		699728	1					
ANR	699847	Argument	cc		699728	0					
ANR	699848	Identifier	cc		699728	0					
ANR	699849	ExpressionStatement	"add_opcode ( reg , OP_CCLASS_MB_NOT )"	628:8:13224:13257	699728	1	True				
ANR	699850	CallExpression	"add_opcode ( reg , OP_CCLASS_MB_NOT )"		699728	0					
ANR	699851	Callee	add_opcode		699728	0					
ANR	699852	Identifier	add_opcode		699728	0					
ANR	699853	ArgumentList	reg		699728	1					
ANR	699854	Argument	reg		699728	0					
ANR	699855	Identifier	reg		699728	0					
ANR	699856	Argument	OP_CCLASS_MB_NOT		699728	1					
ANR	699857	Identifier	OP_CCLASS_MB_NOT		699728	0					
ANR	699858	ElseStatement	else		699728	0					
ANR	699859	ExpressionStatement	"add_opcode ( reg , OP_CCLASS_MB )"	630:8:13278:13307	699728	0	True				
ANR	699860	CallExpression	"add_opcode ( reg , OP_CCLASS_MB )"		699728	0					
ANR	699861	Callee	add_opcode		699728	0					
ANR	699862	Identifier	add_opcode		699728	0					
ANR	699863	ArgumentList	reg		699728	1					
ANR	699864	Argument	reg		699728	0					
ANR	699865	Identifier	reg		699728	0					
ANR	699866	Argument	OP_CCLASS_MB		699728	1					
ANR	699867	Identifier	OP_CCLASS_MB		699728	0					
ANR	699868	ExpressionStatement	"r = add_multi_byte_cclass ( cc -> mbuf , reg )"	632:6:13316:13356	699728	1	True				
ANR	699869	AssignmentExpression	"r = add_multi_byte_cclass ( cc -> mbuf , reg )"		699728	0		=			
ANR	699870	Identifier	r		699728	0					
ANR	699871	CallExpression	"add_multi_byte_cclass ( cc -> mbuf , reg )"		699728	1					
ANR	699872	Callee	add_multi_byte_cclass		699728	0					
ANR	699873	Identifier	add_multi_byte_cclass		699728	0					
ANR	699874	ArgumentList	cc -> mbuf		699728	1					
ANR	699875	Argument	cc -> mbuf		699728	0					
ANR	699876	PtrMemberAccess	cc -> mbuf		699728	0					
ANR	699877	Identifier	cc		699728	0					
ANR	699878	Identifier	mbuf		699728	1					
ANR	699879	Argument	reg		699728	1					
ANR	699880	Identifier	reg		699728	0					
ANR	699881	ElseStatement	else		699728	0					
ANR	699882	CompoundStatement		27:9:568:568	699728	0					
ANR	699883	IfStatement	if ( IS_NCCLASS_NOT ( cc ) )		699728	0					
ANR	699884	Condition	IS_NCCLASS_NOT ( cc )	635:10:13385:13402	699728	0	True				
ANR	699885	CallExpression	IS_NCCLASS_NOT ( cc )		699728	0					
ANR	699886	Callee	IS_NCCLASS_NOT		699728	0					
ANR	699887	Identifier	IS_NCCLASS_NOT		699728	0					
ANR	699888	ArgumentList	cc		699728	1					
ANR	699889	Argument	cc		699728	0					
ANR	699890	Identifier	cc		699728	0					
ANR	699891	ExpressionStatement	"add_opcode ( reg , OP_CCLASS_MIX_NOT )"	636:8:13413:13447	699728	1	True				
ANR	699892	CallExpression	"add_opcode ( reg , OP_CCLASS_MIX_NOT )"		699728	0					
ANR	699893	Callee	add_opcode		699728	0					
ANR	699894	Identifier	add_opcode		699728	0					
ANR	699895	ArgumentList	reg		699728	1					
ANR	699896	Argument	reg		699728	0					
ANR	699897	Identifier	reg		699728	0					
ANR	699898	Argument	OP_CCLASS_MIX_NOT		699728	1					
ANR	699899	Identifier	OP_CCLASS_MIX_NOT		699728	0					
ANR	699900	ElseStatement	else		699728	0					
ANR	699901	ExpressionStatement	"add_opcode ( reg , OP_CCLASS_MIX )"	638:8:13468:13498	699728	0	True				
ANR	699902	CallExpression	"add_opcode ( reg , OP_CCLASS_MIX )"		699728	0					
ANR	699903	Callee	add_opcode		699728	0					
ANR	699904	Identifier	add_opcode		699728	0					
ANR	699905	ArgumentList	reg		699728	1					
ANR	699906	Argument	reg		699728	0					
ANR	699907	Identifier	reg		699728	0					
ANR	699908	Argument	OP_CCLASS_MIX		699728	1					
ANR	699909	Identifier	OP_CCLASS_MIX		699728	0					
ANR	699910	ExpressionStatement	"r = add_bitset ( reg , cc -> bs )"	640:6:13507:13534	699728	1	True				
ANR	699911	AssignmentExpression	"r = add_bitset ( reg , cc -> bs )"		699728	0		=			
ANR	699912	Identifier	r		699728	0					
ANR	699913	CallExpression	"add_bitset ( reg , cc -> bs )"		699728	1					
ANR	699914	Callee	add_bitset		699728	0					
ANR	699915	Identifier	add_bitset		699728	0					
ANR	699916	ArgumentList	reg		699728	1					
ANR	699917	Argument	reg		699728	0					
ANR	699918	Identifier	reg		699728	0					
ANR	699919	Argument	cc -> bs		699728	1					
ANR	699920	PtrMemberAccess	cc -> bs		699728	0					
ANR	699921	Identifier	cc		699728	0					
ANR	699922	Identifier	bs		699728	1					
ANR	699923	IfStatement	if ( r )		699728	2					
ANR	699924	Condition	r	641:10:13546:13546	699728	0	True				
ANR	699925	Identifier	r		699728	0					
ANR	699926	ReturnStatement	return r ;	641:13:13549:13557	699728	1	True				
ANR	699927	Identifier	r		699728	0					
ANR	699928	ExpressionStatement	"r = add_multi_byte_cclass ( cc -> mbuf , reg )"	642:6:13565:13605	699728	3	True				
ANR	699929	AssignmentExpression	"r = add_multi_byte_cclass ( cc -> mbuf , reg )"		699728	0		=			
ANR	699930	Identifier	r		699728	0					
ANR	699931	CallExpression	"add_multi_byte_cclass ( cc -> mbuf , reg )"		699728	1					
ANR	699932	Callee	add_multi_byte_cclass		699728	0					
ANR	699933	Identifier	add_multi_byte_cclass		699728	0					
ANR	699934	ArgumentList	cc -> mbuf		699728	1					
ANR	699935	Argument	cc -> mbuf		699728	0					
ANR	699936	PtrMemberAccess	cc -> mbuf		699728	0					
ANR	699937	Identifier	cc		699728	0					
ANR	699938	Identifier	mbuf		699728	1					
ANR	699939	Argument	reg		699728	1					
ANR	699940	Identifier	reg		699728	0					
ANR	699941	ReturnStatement	return r ;	646:2:13620:13628	699728	3	True				
ANR	699942	Identifier	r		699728	0					
ANR	699943	ReturnType	static int		699728	1					
ANR	699944	Identifier	compile_cclass_node		699728	2					
ANR	699945	ParameterList	"CClassNode * cc , regex_t * reg"		699728	3					
ANR	699946	Parameter	CClassNode * cc	607:20:12774:12787	699728	0	True				
ANR	699947	ParameterType	CClassNode *		699728	0					
ANR	699948	Identifier	cc		699728	1					
ANR	699949	Parameter	regex_t * reg	607:36:12790:12801	699728	1	True				
ANR	699950	ParameterType	regex_t *		699728	0					
ANR	699951	Identifier	reg		699728	1					
ANR	699952	CFGEntryNode	ENTRY		699728		True				
ANR	699953	CFGExitNode	EXIT		699728		True				
ANR	699954	Symbol	cc		699728						
ANR	699955	Symbol	OP_CCLASS_MB		699728						
ANR	699956	Symbol	* cc		699728						
ANR	699957	Symbol	IS_NCCLASS_NOT		699728						
ANR	699958	Symbol	OP_CCLASS_NOT		699728						
ANR	699959	Symbol	OP_CCLASS		699728						
ANR	699960	Symbol	ONIGENC_MBC_MINLEN		699728						
ANR	699961	Symbol	OP_CCLASS_NODE		699728						
ANR	699962	Symbol	cc -> mbuf		699728						
ANR	699963	Symbol	cc -> bs		699728						
ANR	699964	Symbol	reg -> enc		699728						
ANR	699965	Symbol	OP_CCLASS_MIX		699728						
ANR	699966	Symbol	r		699728						
ANR	699967	Symbol	bitset_is_empty		699728						
ANR	699968	Symbol	OP_CCLASS_MIX_NOT		699728						
ANR	699969	Symbol	IS_NULL		699728						
ANR	699970	Symbol	reg		699728						
ANR	699971	Symbol	IS_NCCLASS_SHARE		699728						
ANR	699972	Symbol	add_pointer		699728						
ANR	699973	Symbol	add_bitset		699728						
ANR	699974	Symbol	* reg		699728						
ANR	699975	Symbol	OP_CCLASS_MB_NOT		699728						
ANR	699976	Symbol	add_multi_byte_cclass		699728						
ANR	699977	Function	entry_repeat_range	649:0:13633:14466							
ANR	699978	FunctionDef	"entry_repeat_range (regex_t * reg , int id , int lower , int upper)"		699977	0					
ANR	699979	CompoundStatement		651:0:13707:14466	699977	0					
ANR	699980	Statement	define	652:1:13710:13715	699977	0	True				
ANR	699981	Statement	REPEAT_RANGE_ALLOC	652:8:13717:13734	699977	1	True				
ANR	699982	Statement	4	652:28:13737:13737	699977	2	True				
ANR	699983	IdentifierDeclStatement	OnigRepeatRange * p ;	654:2:13742:13760	699977	3	True				
ANR	699984	IdentifierDecl	* p		699977	0					
ANR	699985	IdentifierDeclType	OnigRepeatRange *		699977	0					
ANR	699986	Identifier	p		699977	1					
ANR	699987	IfStatement	if ( reg -> repeat_range_alloc == 0 )		699977	4					
ANR	699988	Condition	reg -> repeat_range_alloc == 0	656:6:13769:13796	699977	0	True				
ANR	699989	EqualityExpression	reg -> repeat_range_alloc == 0		699977	0		==			
ANR	699990	PtrMemberAccess	reg -> repeat_range_alloc		699977	0					
ANR	699991	Identifier	reg		699977	0					
ANR	699992	Identifier	repeat_range_alloc		699977	1					
ANR	699993	PrimaryExpression	0		699977	1					
ANR	699994	CompoundStatement		6:36:91:91	699977	1					
ANR	699995	ExpressionStatement	p = ( OnigRepeatRange * ) xmalloc ( sizeof ( OnigRepeatRange ) * REPEAT_RANGE_ALLOC )	657:4:13805:13881	699977	0	True				
ANR	699996	AssignmentExpression	p = ( OnigRepeatRange * ) xmalloc ( sizeof ( OnigRepeatRange ) * REPEAT_RANGE_ALLOC )		699977	0		=			
ANR	699997	Identifier	p		699977	0					
ANR	699998	CastExpression	( OnigRepeatRange * ) xmalloc ( sizeof ( OnigRepeatRange ) * REPEAT_RANGE_ALLOC )		699977	1					
ANR	699999	CastTarget	OnigRepeatRange *		699977	0					
ANR	700000	CallExpression	xmalloc ( sizeof ( OnigRepeatRange ) * REPEAT_RANGE_ALLOC )		699977	1					
ANR	700001	Callee	xmalloc		699977	0					
ANR	700002	Identifier	xmalloc		699977	0					
ANR	700003	ArgumentList	sizeof ( OnigRepeatRange ) * REPEAT_RANGE_ALLOC		699977	1					
ANR	700004	Argument	sizeof ( OnigRepeatRange ) * REPEAT_RANGE_ALLOC		699977	0					
ANR	700005	MultiplicativeExpression	sizeof ( OnigRepeatRange ) * REPEAT_RANGE_ALLOC		699977	0		*			
ANR	700006	SizeofExpression	sizeof ( OnigRepeatRange )		699977	0					
ANR	700007	Sizeof	sizeof		699977	0					
ANR	700008	SizeofOperand	OnigRepeatRange		699977	1					
ANR	700009	Identifier	REPEAT_RANGE_ALLOC		699977	1					
ANR	700010	ExpressionStatement	CHECK_NULL_RETURN_MEMERR ( p )	658:4:13887:13914	699977	1	True				
ANR	700011	CallExpression	CHECK_NULL_RETURN_MEMERR ( p )		699977	0					
ANR	700012	Callee	CHECK_NULL_RETURN_MEMERR		699977	0					
ANR	700013	Identifier	CHECK_NULL_RETURN_MEMERR		699977	0					
ANR	700014	ArgumentList	p		699977	1					
ANR	700015	Argument	p		699977	0					
ANR	700016	Identifier	p		699977	0					
ANR	700017	ExpressionStatement	reg -> repeat_range = p	659:4:13920:13941	699977	2	True				
ANR	700018	AssignmentExpression	reg -> repeat_range = p		699977	0		=			
ANR	700019	PtrMemberAccess	reg -> repeat_range		699977	0					
ANR	700020	Identifier	reg		699977	0					
ANR	700021	Identifier	repeat_range		699977	1					
ANR	700022	Identifier	p		699977	1					
ANR	700023	ExpressionStatement	reg -> repeat_range_alloc = REPEAT_RANGE_ALLOC	660:4:13947:13991	699977	3	True				
ANR	700024	AssignmentExpression	reg -> repeat_range_alloc = REPEAT_RANGE_ALLOC		699977	0		=			
ANR	700025	PtrMemberAccess	reg -> repeat_range_alloc		699977	0					
ANR	700026	Identifier	reg		699977	0					
ANR	700027	Identifier	repeat_range_alloc		699977	1					
ANR	700028	Identifier	REPEAT_RANGE_ALLOC		699977	1					
ANR	700029	ElseStatement	else		699977	0					
ANR	700030	IfStatement	if ( reg -> repeat_range_alloc <= id )		699977	0					
ANR	700031	Condition	reg -> repeat_range_alloc <= id	662:11:14008:14036	699977	0	True				
ANR	700032	RelationalExpression	reg -> repeat_range_alloc <= id		699977	0		<=			
ANR	700033	PtrMemberAccess	reg -> repeat_range_alloc		699977	0					
ANR	700034	Identifier	reg		699977	0					
ANR	700035	Identifier	repeat_range_alloc		699977	1					
ANR	700036	Identifier	id		699977	1					
ANR	700037	CompoundStatement		13:4:337:342	699977	1					
ANR	700038	IdentifierDeclStatement	int n ;	663:4:14045:14050	699977	0	True				
ANR	700039	IdentifierDecl	n		699977	0					
ANR	700040	IdentifierDeclType	int		699977	0					
ANR	700041	Identifier	n		699977	1					
ANR	700042	ExpressionStatement	n = reg -> repeat_range_alloc + REPEAT_RANGE_ALLOC	664:4:14056:14104	699977	1	True				
ANR	700043	AssignmentExpression	n = reg -> repeat_range_alloc + REPEAT_RANGE_ALLOC		699977	0		=			
ANR	700044	Identifier	n		699977	0					
ANR	700045	AdditiveExpression	reg -> repeat_range_alloc + REPEAT_RANGE_ALLOC		699977	1		+			
ANR	700046	PtrMemberAccess	reg -> repeat_range_alloc		699977	0					
ANR	700047	Identifier	reg		699977	0					
ANR	700048	Identifier	repeat_range_alloc		699977	1					
ANR	700049	Identifier	REPEAT_RANGE_ALLOC		699977	1					
ANR	700050	ExpressionStatement	"p = ( OnigRepeatRange * ) xrealloc ( reg -> repeat_range , sizeof ( OnigRepeatRange ) * n )"	665:4:14110:14225	699977	2	True				
ANR	700051	AssignmentExpression	"p = ( OnigRepeatRange * ) xrealloc ( reg -> repeat_range , sizeof ( OnigRepeatRange ) * n )"		699977	0		=			
ANR	700052	Identifier	p		699977	0					
ANR	700053	CastExpression	"( OnigRepeatRange * ) xrealloc ( reg -> repeat_range , sizeof ( OnigRepeatRange ) * n )"		699977	1					
ANR	700054	CastTarget	OnigRepeatRange *		699977	0					
ANR	700055	CallExpression	"xrealloc ( reg -> repeat_range , sizeof ( OnigRepeatRange ) * n )"		699977	1					
ANR	700056	Callee	xrealloc		699977	0					
ANR	700057	Identifier	xrealloc		699977	0					
ANR	700058	ArgumentList	reg -> repeat_range		699977	1					
ANR	700059	Argument	reg -> repeat_range		699977	0					
ANR	700060	PtrMemberAccess	reg -> repeat_range		699977	0					
ANR	700061	Identifier	reg		699977	0					
ANR	700062	Identifier	repeat_range		699977	1					
ANR	700063	Argument	sizeof ( OnigRepeatRange ) * n		699977	1					
ANR	700064	MultiplicativeExpression	sizeof ( OnigRepeatRange ) * n		699977	0		*			
ANR	700065	SizeofExpression	sizeof ( OnigRepeatRange )		699977	0					
ANR	700066	Sizeof	sizeof		699977	0					
ANR	700067	SizeofOperand	OnigRepeatRange		699977	1					
ANR	700068	Identifier	n		699977	1					
ANR	700069	ExpressionStatement	CHECK_NULL_RETURN_MEMERR ( p )	667:4:14231:14258	699977	3	True				
ANR	700070	CallExpression	CHECK_NULL_RETURN_MEMERR ( p )		699977	0					
ANR	700071	Callee	CHECK_NULL_RETURN_MEMERR		699977	0					
ANR	700072	Identifier	CHECK_NULL_RETURN_MEMERR		699977	0					
ANR	700073	ArgumentList	p		699977	1					
ANR	700074	Argument	p		699977	0					
ANR	700075	Identifier	p		699977	0					
ANR	700076	ExpressionStatement	reg -> repeat_range = p	668:4:14264:14285	699977	4	True				
ANR	700077	AssignmentExpression	reg -> repeat_range = p		699977	0		=			
ANR	700078	PtrMemberAccess	reg -> repeat_range		699977	0					
ANR	700079	Identifier	reg		699977	0					
ANR	700080	Identifier	repeat_range		699977	1					
ANR	700081	Identifier	p		699977	1					
ANR	700082	ExpressionStatement	reg -> repeat_range_alloc = n	669:4:14291:14318	699977	5	True				
ANR	700083	AssignmentExpression	reg -> repeat_range_alloc = n		699977	0		=			
ANR	700084	PtrMemberAccess	reg -> repeat_range_alloc		699977	0					
ANR	700085	Identifier	reg		699977	0					
ANR	700086	Identifier	repeat_range_alloc		699977	1					
ANR	700087	Identifier	n		699977	1					
ANR	700088	ElseStatement	else		699977	0					
ANR	700089	CompoundStatement		21:7:623:623	699977	0					
ANR	700090	ExpressionStatement	p = reg -> repeat_range	672:4:14337:14358	699977	0	True				
ANR	700091	AssignmentExpression	p = reg -> repeat_range		699977	0		=			
ANR	700092	Identifier	p		699977	0					
ANR	700093	PtrMemberAccess	reg -> repeat_range		699977	1					
ANR	700094	Identifier	reg		699977	0					
ANR	700095	Identifier	repeat_range		699977	1					
ANR	700096	ExpressionStatement	p [ id ] . lower = lower	675:2:14367:14386	699977	5	True				
ANR	700097	AssignmentExpression	p [ id ] . lower = lower		699977	0		=			
ANR	700098	MemberAccess	p [ id ] . lower		699977	0					
ANR	700099	ArrayIndexing	p [ id ]		699977	0					
ANR	700100	Identifier	p		699977	0					
ANR	700101	Identifier	id		699977	1					
ANR	700102	Identifier	lower		699977	1					
ANR	700103	Identifier	lower		699977	1					
ANR	700104	ExpressionStatement	p [ id ] . upper = ( IS_REPEAT_INFINITE ( upper ) ? 0x7fffffff : upper )	676:2:14390:14452	699977	6	True				
ANR	700105	AssignmentExpression	p [ id ] . upper = ( IS_REPEAT_INFINITE ( upper ) ? 0x7fffffff : upper )		699977	0		=			
ANR	700106	MemberAccess	p [ id ] . upper		699977	0					
ANR	700107	ArrayIndexing	p [ id ]		699977	0					
ANR	700108	Identifier	p		699977	0					
ANR	700109	Identifier	id		699977	1					
ANR	700110	Identifier	upper		699977	1					
ANR	700111	ConditionalExpression	IS_REPEAT_INFINITE ( upper ) ? 0x7fffffff : upper		699977	1					
ANR	700112	Condition	IS_REPEAT_INFINITE ( upper )		699977	0					
ANR	700113	CallExpression	IS_REPEAT_INFINITE ( upper )		699977	0					
ANR	700114	Callee	IS_REPEAT_INFINITE		699977	0					
ANR	700115	Identifier	IS_REPEAT_INFINITE		699977	0					
ANR	700116	ArgumentList	upper		699977	1					
ANR	700117	Argument	upper		699977	0					
ANR	700118	Identifier	upper		699977	0					
ANR	700119	PrimaryExpression	0x7fffffff		699977	1					
ANR	700120	Identifier	upper		699977	2					
ANR	700121	ReturnStatement	return 0 ;	677:2:14456:14464	699977	7	True				
ANR	700122	PrimaryExpression	0		699977	0					
ANR	700123	ReturnType	static int		699977	1					
ANR	700124	Identifier	entry_repeat_range		699977	2					
ANR	700125	ParameterList	"regex_t * reg , int id , int lower , int upper"		699977	3					
ANR	700126	Parameter	regex_t * reg	650:19:13663:13674	699977	0	True				
ANR	700127	ParameterType	regex_t *		699977	0					
ANR	700128	Identifier	reg		699977	1					
ANR	700129	Parameter	int id	650:33:13677:13682	699977	1	True				
ANR	700130	ParameterType	int		699977	0					
ANR	700131	Identifier	id		699977	1					
ANR	700132	Parameter	int lower	650:41:13685:13693	699977	2	True				
ANR	700133	ParameterType	int		699977	0					
ANR	700134	Identifier	lower		699977	1					
ANR	700135	Parameter	int upper	650:52:13696:13704	699977	3	True				
ANR	700136	ParameterType	int		699977	0					
ANR	700137	Identifier	upper		699977	1					
ANR	700138	CFGEntryNode	ENTRY		699977		True				
ANR	700139	CFGExitNode	EXIT		699977		True				
ANR	700140	Symbol	REPEAT_RANGE_ALLOC		699977						
ANR	700141	Symbol	* id		699977						
ANR	700142	Symbol	reg -> repeat_range		699977						
ANR	700143	Symbol	p [ id ] . lower		699977						
ANR	700144	Symbol	lower		699977						
ANR	700145	Symbol	upper		699977						
ANR	700146	Symbol	p [ id ] . upper		699977						
ANR	700147	Symbol	n		699977						
ANR	700148	Symbol	p		699977						
ANR	700149	Symbol	reg -> repeat_range_alloc		699977						
ANR	700150	Symbol	reg		699977						
ANR	700151	Symbol	xmalloc		699977						
ANR	700152	Symbol	* p		699977						
ANR	700153	Symbol	id		699977						
ANR	700154	Symbol	IS_REPEAT_INFINITE		699977						
ANR	700155	Symbol	xrealloc		699977						
ANR	700156	Symbol	* reg		699977						
ANR	700157	Function	compile_range_repeat_node	680:0:14469:15414							
ANR	700158	FunctionDef	"compile_range_repeat_node (QtfrNode * qn , int target_len , int empty_info , regex_t * reg)"		700157	0					
ANR	700159	CompoundStatement		683:0:14592:15414	700157	0					
ANR	700160	IdentifierDeclStatement	int r ;	684:2:14596:14601	700157	0	True				
ANR	700161	IdentifierDecl	r		700157	0					
ANR	700162	IdentifierDeclType	int		700157	0					
ANR	700163	Identifier	r		700157	1					
ANR	700164	IdentifierDeclStatement	int num_repeat = reg -> num_repeat ;	685:2:14605:14637	700157	1	True				
ANR	700165	IdentifierDecl	num_repeat = reg -> num_repeat		700157	0					
ANR	700166	IdentifierDeclType	int		700157	0					
ANR	700167	Identifier	num_repeat		700157	1					
ANR	700168	AssignmentExpression	num_repeat = reg -> num_repeat		700157	2		=			
ANR	700169	Identifier	num_repeat		700157	0					
ANR	700170	PtrMemberAccess	reg -> num_repeat		700157	1					
ANR	700171	Identifier	reg		700157	0					
ANR	700172	Identifier	num_repeat		700157	1					
ANR	700173	ExpressionStatement	"r = add_opcode ( reg , qn -> greedy ? OP_REPEAT : OP_REPEAT_NG )"	687:2:14642:14700	700157	2	True				
ANR	700174	AssignmentExpression	"r = add_opcode ( reg , qn -> greedy ? OP_REPEAT : OP_REPEAT_NG )"		700157	0		=			
ANR	700175	Identifier	r		700157	0					
ANR	700176	CallExpression	"add_opcode ( reg , qn -> greedy ? OP_REPEAT : OP_REPEAT_NG )"		700157	1					
ANR	700177	Callee	add_opcode		700157	0					
ANR	700178	Identifier	add_opcode		700157	0					
ANR	700179	ArgumentList	reg		700157	1					
ANR	700180	Argument	reg		700157	0					
ANR	700181	Identifier	reg		700157	0					
ANR	700182	Argument	qn -> greedy ? OP_REPEAT : OP_REPEAT_NG		700157	1					
ANR	700183	ConditionalExpression	qn -> greedy ? OP_REPEAT : OP_REPEAT_NG		700157	0					
ANR	700184	Condition	qn -> greedy		700157	0					
ANR	700185	PtrMemberAccess	qn -> greedy		700157	0					
ANR	700186	Identifier	qn		700157	0					
ANR	700187	Identifier	greedy		700157	1					
ANR	700188	Identifier	OP_REPEAT		700157	1					
ANR	700189	Identifier	OP_REPEAT_NG		700157	2					
ANR	700190	IfStatement	if ( r )		700157	3					
ANR	700191	Condition	r	688:6:14708:14708	700157	0	True				
ANR	700192	Identifier	r		700157	0					
ANR	700193	ReturnStatement	return r ;	688:9:14711:14719	700157	1	True				
ANR	700194	Identifier	r		700157	0					
ANR	700195	ExpressionStatement	"r = add_mem_num ( reg , num_repeat )"	689:2:14723:14755	700157	4	True				
ANR	700196	AssignmentExpression	"r = add_mem_num ( reg , num_repeat )"		700157	0		=			
ANR	700197	Identifier	r		700157	0					
ANR	700198	CallExpression	"add_mem_num ( reg , num_repeat )"		700157	1					
ANR	700199	Callee	add_mem_num		700157	0					
ANR	700200	Identifier	add_mem_num		700157	0					
ANR	700201	ArgumentList	reg		700157	1					
ANR	700202	Argument	reg		700157	0					
ANR	700203	Identifier	reg		700157	0					
ANR	700204	Argument	num_repeat		700157	1					
ANR	700205	Identifier	num_repeat		700157	0					
ANR	700206	ExpressionStatement	reg -> num_repeat ++	690:2:14778:14795	700157	5	True				
ANR	700207	PostIncDecOperationExpression	reg -> num_repeat ++		700157	0					
ANR	700208	PtrMemberAccess	reg -> num_repeat		700157	0					
ANR	700209	Identifier	reg		700157	0					
ANR	700210	Identifier	num_repeat		700157	1					
ANR	700211	IncDec	++		700157	1					
ANR	700212	IfStatement	if ( r )		700157	6					
ANR	700213	Condition	r	691:6:14803:14803	700157	0	True				
ANR	700214	Identifier	r		700157	0					
ANR	700215	ReturnStatement	return r ;	691:9:14806:14814	700157	1	True				
ANR	700216	Identifier	r		700157	0					
ANR	700217	ExpressionStatement	"r = add_rel_addr ( reg , target_len + SIZE_OP_REPEAT_INC )"	692:2:14818:14872	700157	7	True				
ANR	700218	AssignmentExpression	"r = add_rel_addr ( reg , target_len + SIZE_OP_REPEAT_INC )"		700157	0		=			
ANR	700219	Identifier	r		700157	0					
ANR	700220	CallExpression	"add_rel_addr ( reg , target_len + SIZE_OP_REPEAT_INC )"		700157	1					
ANR	700221	Callee	add_rel_addr		700157	0					
ANR	700222	Identifier	add_rel_addr		700157	0					
ANR	700223	ArgumentList	reg		700157	1					
ANR	700224	Argument	reg		700157	0					
ANR	700225	Identifier	reg		700157	0					
ANR	700226	Argument	target_len + SIZE_OP_REPEAT_INC		700157	1					
ANR	700227	AdditiveExpression	target_len + SIZE_OP_REPEAT_INC		700157	0		+			
ANR	700228	Identifier	target_len		700157	0					
ANR	700229	Identifier	SIZE_OP_REPEAT_INC		700157	1					
ANR	700230	IfStatement	if ( r )		700157	8					
ANR	700231	Condition	r	693:6:14880:14880	700157	0	True				
ANR	700232	Identifier	r		700157	0					
ANR	700233	ReturnStatement	return r ;	693:9:14883:14891	700157	1	True				
ANR	700234	Identifier	r		700157	0					
ANR	700235	ExpressionStatement	"r = entry_repeat_range ( reg , num_repeat , qn -> lower , qn -> upper )"	695:2:14896:14957	700157	9	True				
ANR	700236	AssignmentExpression	"r = entry_repeat_range ( reg , num_repeat , qn -> lower , qn -> upper )"		700157	0		=			
ANR	700237	Identifier	r		700157	0					
ANR	700238	CallExpression	"entry_repeat_range ( reg , num_repeat , qn -> lower , qn -> upper )"		700157	1					
ANR	700239	Callee	entry_repeat_range		700157	0					
ANR	700240	Identifier	entry_repeat_range		700157	0					
ANR	700241	ArgumentList	reg		700157	1					
ANR	700242	Argument	reg		700157	0					
ANR	700243	Identifier	reg		700157	0					
ANR	700244	Argument	num_repeat		700157	1					
ANR	700245	Identifier	num_repeat		700157	0					
ANR	700246	Argument	qn -> lower		700157	2					
ANR	700247	PtrMemberAccess	qn -> lower		700157	0					
ANR	700248	Identifier	qn		700157	0					
ANR	700249	Identifier	lower		700157	1					
ANR	700250	Argument	qn -> upper		700157	3					
ANR	700251	PtrMemberAccess	qn -> upper		700157	0					
ANR	700252	Identifier	qn		700157	0					
ANR	700253	Identifier	upper		700157	1					
ANR	700254	IfStatement	if ( r )		700157	10					
ANR	700255	Condition	r	696:6:14965:14965	700157	0	True				
ANR	700256	Identifier	r		700157	0					
ANR	700257	ReturnStatement	return r ;	696:9:14968:14976	700157	1	True				
ANR	700258	Identifier	r		700157	0					
ANR	700259	ExpressionStatement	"r = compile_tree_empty_check ( qn -> target , reg , empty_info )"	698:2:14981:15038	700157	11	True				
ANR	700260	AssignmentExpression	"r = compile_tree_empty_check ( qn -> target , reg , empty_info )"		700157	0		=			
ANR	700261	Identifier	r		700157	0					
ANR	700262	CallExpression	"compile_tree_empty_check ( qn -> target , reg , empty_info )"		700157	1					
ANR	700263	Callee	compile_tree_empty_check		700157	0					
ANR	700264	Identifier	compile_tree_empty_check		700157	0					
ANR	700265	ArgumentList	qn -> target		700157	1					
ANR	700266	Argument	qn -> target		700157	0					
ANR	700267	PtrMemberAccess	qn -> target		700157	0					
ANR	700268	Identifier	qn		700157	0					
ANR	700269	Identifier	target		700157	1					
ANR	700270	Argument	reg		700157	1					
ANR	700271	Identifier	reg		700157	0					
ANR	700272	Argument	empty_info		700157	2					
ANR	700273	Identifier	empty_info		700157	0					
ANR	700274	IfStatement	if ( r )		700157	12					
ANR	700275	Condition	r	699:6:15046:15046	700157	0	True				
ANR	700276	Identifier	r		700157	0					
ANR	700277	ReturnStatement	return r ;	699:9:15049:15057	700157	1	True				
ANR	700278	Identifier	r		700157	0					
ANR	700279	ElseStatement	else		700157	0					
ANR	700280	CompoundStatement		26:7:657:657	700157	0					
ANR	700281	ExpressionStatement	"r = add_opcode ( reg , qn -> greedy ? OP_REPEAT_INC : OP_REPEAT_INC_NG )"	709:4:15256:15322	700157	0	True				
ANR	700282	AssignmentExpression	"r = add_opcode ( reg , qn -> greedy ? OP_REPEAT_INC : OP_REPEAT_INC_NG )"		700157	0		=			
ANR	700283	Identifier	r		700157	0					
ANR	700284	CallExpression	"add_opcode ( reg , qn -> greedy ? OP_REPEAT_INC : OP_REPEAT_INC_NG )"		700157	1					
ANR	700285	Callee	add_opcode		700157	0					
ANR	700286	Identifier	add_opcode		700157	0					
ANR	700287	ArgumentList	reg		700157	1					
ANR	700288	Argument	reg		700157	0					
ANR	700289	Identifier	reg		700157	0					
ANR	700290	Argument	qn -> greedy ? OP_REPEAT_INC : OP_REPEAT_INC_NG		700157	1					
ANR	700291	ConditionalExpression	qn -> greedy ? OP_REPEAT_INC : OP_REPEAT_INC_NG		700157	0					
ANR	700292	Condition	qn -> greedy		700157	0					
ANR	700293	PtrMemberAccess	qn -> greedy		700157	0					
ANR	700294	Identifier	qn		700157	0					
ANR	700295	Identifier	greedy		700157	1					
ANR	700296	Identifier	OP_REPEAT_INC		700157	1					
ANR	700297	Identifier	OP_REPEAT_INC_NG		700157	2					
ANR	700298	Statement	if	701:2:15062:15063	700157	13	True				
ANR	700299	Statement	(	701:5:15065:15065	700157	14	True				
ANR	700300	Statement	reg	703:6:15096:15098	700157	15	True				
ANR	700301	Statement	->	703:9:15099:15100	700157	16	True				
ANR	700302	Statement	num_call	703:11:15101:15108	700157	17	True				
ANR	700303	Statement	>	703:20:15110:15110	700157	18	True				
ANR	700304	Statement	0	703:22:15112:15112	700157	19	True				
ANR	700305	Statement	||	703:24:15114:15115	700157	20	True				
ANR	700306	Statement	IS_QUANTIFIER_IN_REPEAT	705:6:15130:15152	700157	21	True				
ANR	700307	Statement	(	705:29:15153:15153	700157	22	True				
ANR	700308	Statement	qn	705:30:15154:15155	700157	23	True				
ANR	700309	Statement	)	705:32:15156:15156	700157	24	True				
ANR	700310	Statement	)	705:33:15157:15157	700157	25	True				
ANR	700311	CompoundStatement		23:35:566:566	700157	26					
ANR	700312	ExpressionStatement	"r = add_opcode ( reg , qn -> greedy ? OP_REPEAT_INC_SG : OP_REPEAT_INC_NG_SG )"	706:4:15165:15237	700157	0	True				
ANR	700313	AssignmentExpression	"r = add_opcode ( reg , qn -> greedy ? OP_REPEAT_INC_SG : OP_REPEAT_INC_NG_SG )"		700157	0		=			
ANR	700314	Identifier	r		700157	0					
ANR	700315	CallExpression	"add_opcode ( reg , qn -> greedy ? OP_REPEAT_INC_SG : OP_REPEAT_INC_NG_SG )"		700157	1					
ANR	700316	Callee	add_opcode		700157	0					
ANR	700317	Identifier	add_opcode		700157	0					
ANR	700318	ArgumentList	reg		700157	1					
ANR	700319	Argument	reg		700157	0					
ANR	700320	Identifier	reg		700157	0					
ANR	700321	Argument	qn -> greedy ? OP_REPEAT_INC_SG : OP_REPEAT_INC_NG_SG		700157	1					
ANR	700322	ConditionalExpression	qn -> greedy ? OP_REPEAT_INC_SG : OP_REPEAT_INC_NG_SG		700157	0					
ANR	700323	Condition	qn -> greedy		700157	0					
ANR	700324	PtrMemberAccess	qn -> greedy		700157	0					
ANR	700325	Identifier	qn		700157	0					
ANR	700326	Identifier	greedy		700157	1					
ANR	700327	Identifier	OP_REPEAT_INC_SG		700157	1					
ANR	700328	Identifier	OP_REPEAT_INC_NG_SG		700157	2					
ANR	700329	IfStatement	if ( r )		700157	27					
ANR	700330	Condition	r	711:6:15334:15334	700157	0	True				
ANR	700331	Identifier	r		700157	0					
ANR	700332	ReturnStatement	return r ;	711:9:15337:15345	700157	1	True				
ANR	700333	Identifier	r		700157	0					
ANR	700334	ExpressionStatement	"r = add_mem_num ( reg , num_repeat )"	712:2:15349:15381	700157	28	True				
ANR	700335	AssignmentExpression	"r = add_mem_num ( reg , num_repeat )"		700157	0		=			
ANR	700336	Identifier	r		700157	0					
ANR	700337	CallExpression	"add_mem_num ( reg , num_repeat )"		700157	1					
ANR	700338	Callee	add_mem_num		700157	0					
ANR	700339	Identifier	add_mem_num		700157	0					
ANR	700340	ArgumentList	reg		700157	1					
ANR	700341	Argument	reg		700157	0					
ANR	700342	Identifier	reg		700157	0					
ANR	700343	Argument	num_repeat		700157	1					
ANR	700344	Identifier	num_repeat		700157	0					
ANR	700345	ReturnStatement	return r ;	713:2:15404:15412	700157	29	True				
ANR	700346	Identifier	r		700157	0					
ANR	700347	ReturnType	static int		700157	1					
ANR	700348	Identifier	compile_range_repeat_node		700157	2					
ANR	700349	ParameterList	"QtfrNode * qn , int target_len , int empty_info , regex_t * reg"		700157	3					
ANR	700350	Parameter	QtfrNode * qn	681:26:14506:14517	700157	0	True				
ANR	700351	ParameterType	QtfrNode *		700157	0					
ANR	700352	Identifier	qn		700157	1					
ANR	700353	Parameter	int target_len	681:40:14520:14533	700157	1	True				
ANR	700354	ParameterType	int		700157	0					
ANR	700355	Identifier	target_len		700157	1					
ANR	700356	Parameter	int empty_info	681:56:14536:14549	700157	2	True				
ANR	700357	ParameterType	int		700157	0					
ANR	700358	Identifier	empty_info		700157	1					
ANR	700359	Parameter	regex_t * reg	682:26:14578:14589	700157	3	True				
ANR	700360	ParameterType	regex_t *		700157	0					
ANR	700361	Identifier	reg		700157	1					
ANR	700362	CFGEntryNode	ENTRY		700157		True				
ANR	700363	CFGExitNode	EXIT		700157		True				
ANR	700364	Symbol	* qn		700157						
ANR	700365	Symbol	qn -> greedy		700157						
ANR	700366	Symbol	num_repeat		700157						
ANR	700367	Symbol	compile_tree_empty_check		700157						
ANR	700368	Symbol	add_mem_num		700157						
ANR	700369	Symbol	OP_REPEAT_INC_NG		700157						
ANR	700370	Symbol	qn -> lower		700157						
ANR	700371	Symbol	OP_REPEAT_INC_NG_SG		700157						
ANR	700372	Symbol	OP_REPEAT_INC		700157						
ANR	700373	Symbol	OP_REPEAT_INC_SG		700157						
ANR	700374	Symbol	reg		700157						
ANR	700375	Symbol	SIZE_OP_REPEAT_INC		700157						
ANR	700376	Symbol	add_opcode		700157						
ANR	700377	Symbol	qn		700157						
ANR	700378	Symbol	target_len		700157						
ANR	700379	Symbol	OP_REPEAT_NG		700157						
ANR	700380	Symbol	qn -> target		700157						
ANR	700381	Symbol	qn -> upper		700157						
ANR	700382	Symbol	r		700157						
ANR	700383	Symbol	OP_REPEAT		700157						
ANR	700384	Symbol	empty_info		700157						
ANR	700385	Symbol	add_rel_addr		700157						
ANR	700386	Symbol	entry_repeat_range		700157						
ANR	700387	Symbol	* reg		700157						
ANR	700388	Symbol	reg -> num_repeat		700157						
ANR	700389	Function	is_anychar_star_quantifier	716:0:15417:15595							
ANR	700390	FunctionDef	is_anychar_star_quantifier (QtfrNode * qn)		700389	0					
ANR	700391	CompoundStatement		718:0:15469:15595	700389	0					
ANR	700392	IfStatement	if ( qn -> greedy && IS_REPEAT_INFINITE ( qn -> upper ) && NTYPE ( qn -> target ) == NT_CANY )		700389	0					
ANR	700393	Condition	qn -> greedy && IS_REPEAT_INFINITE ( qn -> upper ) && NTYPE ( qn -> target ) == NT_CANY	719:6:15477:15557	700389	0	True				
ANR	700394	AndExpression	qn -> greedy && IS_REPEAT_INFINITE ( qn -> upper ) && NTYPE ( qn -> target ) == NT_CANY		700389	0		&&			
ANR	700395	PtrMemberAccess	qn -> greedy		700389	0					
ANR	700396	Identifier	qn		700389	0					
ANR	700397	Identifier	greedy		700389	1					
ANR	700398	AndExpression	IS_REPEAT_INFINITE ( qn -> upper ) && NTYPE ( qn -> target ) == NT_CANY		700389	1		&&			
ANR	700399	CallExpression	IS_REPEAT_INFINITE ( qn -> upper )		700389	0					
ANR	700400	Callee	IS_REPEAT_INFINITE		700389	0					
ANR	700401	Identifier	IS_REPEAT_INFINITE		700389	0					
ANR	700402	ArgumentList	qn -> upper		700389	1					
ANR	700403	Argument	qn -> upper		700389	0					
ANR	700404	PtrMemberAccess	qn -> upper		700389	0					
ANR	700405	Identifier	qn		700389	0					
ANR	700406	Identifier	upper		700389	1					
ANR	700407	EqualityExpression	NTYPE ( qn -> target ) == NT_CANY		700389	1		==			
ANR	700408	CallExpression	NTYPE ( qn -> target )		700389	0					
ANR	700409	Callee	NTYPE		700389	0					
ANR	700410	Identifier	NTYPE		700389	0					
ANR	700411	ArgumentList	qn -> target		700389	1					
ANR	700412	Argument	qn -> target		700389	0					
ANR	700413	PtrMemberAccess	qn -> target		700389	0					
ANR	700414	Identifier	qn		700389	0					
ANR	700415	Identifier	target		700389	1					
ANR	700416	Identifier	NT_CANY		700389	1					
ANR	700417	ReturnStatement	return 1 ;	721:4:15564:15572	700389	1	True				
ANR	700418	PrimaryExpression	1		700389	0					
ANR	700419	ElseStatement	else		700389	0					
ANR	700420	ReturnStatement	return 0 ;	723:4:15585:15593	700389	0	True				
ANR	700421	PrimaryExpression	0		700389	0					
ANR	700422	ReturnType	static int		700389	1					
ANR	700423	Identifier	is_anychar_star_quantifier		700389	2					
ANR	700424	ParameterList	QtfrNode * qn		700389	3					
ANR	700425	Parameter	QtfrNode * qn	717:27:15455:15466	700389	0	True				
ANR	700426	ParameterType	QtfrNode *		700389	0					
ANR	700427	Identifier	qn		700389	1					
ANR	700428	CFGEntryNode	ENTRY		700389		True				
ANR	700429	CFGExitNode	EXIT		700389		True				
ANR	700430	Symbol	* qn		700389						
ANR	700431	Symbol	qn -> upper		700389						
ANR	700432	Symbol	qn -> greedy		700389						
ANR	700433	Symbol	NT_CANY		700389						
ANR	700434	Symbol	NTYPE		700389						
ANR	700435	Symbol	IS_REPEAT_INFINITE		700389						
ANR	700436	Symbol	qn		700389						
ANR	700437	Symbol	qn -> target		700389						
ANR	700438	Function	compile_length_quantifier_node	731:0:15708:17547							
ANR	700439	FunctionDef	"compile_length_quantifier_node (QtfrNode * qn , regex_t * reg)"		700438	0					
ANR	700440	CompoundStatement		733:0:15778:17547	700438	0					
ANR	700441	IdentifierDeclStatement	"int len , mod_tlen , cklen ;"	734:2:15782:15806	700438	0	True				
ANR	700442	IdentifierDecl	len		700438	0					
ANR	700443	IdentifierDeclType	int		700438	0					
ANR	700444	Identifier	len		700438	1					
ANR	700445	IdentifierDecl	mod_tlen		700438	1					
ANR	700446	IdentifierDeclType	int		700438	0					
ANR	700447	Identifier	mod_tlen		700438	1					
ANR	700448	IdentifierDecl	cklen		700438	2					
ANR	700449	IdentifierDeclType	int		700438	0					
ANR	700450	Identifier	cklen		700438	1					
ANR	700451	IdentifierDeclStatement	int ckn ;	735:2:15810:15817	700438	1	True				
ANR	700452	IdentifierDecl	ckn		700438	0					
ANR	700453	IdentifierDeclType	int		700438	0					
ANR	700454	Identifier	ckn		700438	1					
ANR	700455	IdentifierDeclStatement	int infinite = IS_REPEAT_INFINITE ( qn -> upper ) ;	736:2:15821:15865	700438	2	True				
ANR	700456	IdentifierDecl	infinite = IS_REPEAT_INFINITE ( qn -> upper )		700438	0					
ANR	700457	IdentifierDeclType	int		700438	0					
ANR	700458	Identifier	infinite		700438	1					
ANR	700459	AssignmentExpression	infinite = IS_REPEAT_INFINITE ( qn -> upper )		700438	2		=			
ANR	700460	Identifier	infinite		700438	0					
ANR	700461	CallExpression	IS_REPEAT_INFINITE ( qn -> upper )		700438	1					
ANR	700462	Callee	IS_REPEAT_INFINITE		700438	0					
ANR	700463	Identifier	IS_REPEAT_INFINITE		700438	0					
ANR	700464	ArgumentList	qn -> upper		700438	1					
ANR	700465	Argument	qn -> upper		700438	0					
ANR	700466	PtrMemberAccess	qn -> upper		700438	0					
ANR	700467	Identifier	qn		700438	0					
ANR	700468	Identifier	upper		700438	1					
ANR	700469	IdentifierDeclStatement	int empty_info = qn -> target_empty_info ;	737:2:15869:15907	700438	3	True				
ANR	700470	IdentifierDecl	empty_info = qn -> target_empty_info		700438	0					
ANR	700471	IdentifierDeclType	int		700438	0					
ANR	700472	Identifier	empty_info		700438	1					
ANR	700473	AssignmentExpression	empty_info = qn -> target_empty_info		700438	2		=			
ANR	700474	Identifier	empty_info		700438	0					
ANR	700475	PtrMemberAccess	qn -> target_empty_info		700438	1					
ANR	700476	Identifier	qn		700438	0					
ANR	700477	Identifier	target_empty_info		700438	1					
ANR	700478	IdentifierDeclStatement	"int tlen = compile_length_tree ( qn -> target , reg ) ;"	738:2:15911:15958	700438	4	True				
ANR	700479	IdentifierDecl	"tlen = compile_length_tree ( qn -> target , reg )"		700438	0					
ANR	700480	IdentifierDeclType	int		700438	0					
ANR	700481	Identifier	tlen		700438	1					
ANR	700482	AssignmentExpression	"tlen = compile_length_tree ( qn -> target , reg )"		700438	2		=			
ANR	700483	Identifier	tlen		700438	0					
ANR	700484	CallExpression	"compile_length_tree ( qn -> target , reg )"		700438	1					
ANR	700485	Callee	compile_length_tree		700438	0					
ANR	700486	Identifier	compile_length_tree		700438	0					
ANR	700487	ArgumentList	qn -> target		700438	1					
ANR	700488	Argument	qn -> target		700438	0					
ANR	700489	PtrMemberAccess	qn -> target		700438	0					
ANR	700490	Identifier	qn		700438	0					
ANR	700491	Identifier	target		700438	1					
ANR	700492	Argument	reg		700438	1					
ANR	700493	Identifier	reg		700438	0					
ANR	700494	IfStatement	if ( tlen < 0 )		700438	5					
ANR	700495	Condition	tlen < 0	740:6:15967:15974	700438	0	True				
ANR	700496	RelationalExpression	tlen < 0		700438	0		<			
ANR	700497	Identifier	tlen		700438	0					
ANR	700498	PrimaryExpression	0		700438	1					
ANR	700499	ReturnStatement	return tlen ;	740:16:15977:15988	700438	1	True				
ANR	700500	Identifier	tlen		700438	0					
ANR	700501	ExpressionStatement	ckn = ( ( reg -> num_comb_exp_check > 0 ) ? qn -> comb_exp_check_num : 0 )	742:2:15993:16059	700438	6	True				
ANR	700502	AssignmentExpression	ckn = ( ( reg -> num_comb_exp_check > 0 ) ? qn -> comb_exp_check_num : 0 )		700438	0		=			
ANR	700503	Identifier	ckn		700438	0					
ANR	700504	ConditionalExpression	( reg -> num_comb_exp_check > 0 ) ? qn -> comb_exp_check_num : 0		700438	1					
ANR	700505	Condition	reg -> num_comb_exp_check > 0		700438	0					
ANR	700506	RelationalExpression	reg -> num_comb_exp_check > 0		700438	0		>			
ANR	700507	PtrMemberAccess	reg -> num_comb_exp_check		700438	0					
ANR	700508	Identifier	reg		700438	0					
ANR	700509	Identifier	num_comb_exp_check		700438	1					
ANR	700510	PrimaryExpression	0		700438	1					
ANR	700511	PtrMemberAccess	qn -> comb_exp_check_num		700438	1					
ANR	700512	Identifier	qn		700438	0					
ANR	700513	Identifier	comb_exp_check_num		700438	1					
ANR	700514	PrimaryExpression	0		700438	2					
ANR	700515	ExpressionStatement	cklen = ( CKN_ON ? SIZE_STATE_CHECK_NUM : 0 )	744:2:16064:16106	700438	7	True				
ANR	700516	AssignmentExpression	cklen = ( CKN_ON ? SIZE_STATE_CHECK_NUM : 0 )		700438	0		=			
ANR	700517	Identifier	cklen		700438	0					
ANR	700518	ConditionalExpression	CKN_ON ? SIZE_STATE_CHECK_NUM : 0		700438	1					
ANR	700519	Condition	CKN_ON		700438	0					
ANR	700520	Identifier	CKN_ON		700438	0					
ANR	700521	Identifier	SIZE_STATE_CHECK_NUM		700438	1					
ANR	700522	PrimaryExpression	0		700438	2					
ANR	700523	IfStatement	if ( NTYPE ( qn -> target ) == NT_CANY )		700438	8					
ANR	700524	Condition	NTYPE ( qn -> target ) == NT_CANY	747:6:16138:16165	700438	0	True				
ANR	700525	EqualityExpression	NTYPE ( qn -> target ) == NT_CANY		700438	0		==			
ANR	700526	CallExpression	NTYPE ( qn -> target )		700438	0					
ANR	700527	Callee	NTYPE		700438	0					
ANR	700528	Identifier	NTYPE		700438	0					
ANR	700529	ArgumentList	qn -> target		700438	1					
ANR	700530	Argument	qn -> target		700438	0					
ANR	700531	PtrMemberAccess	qn -> target		700438	0					
ANR	700532	Identifier	qn		700438	0					
ANR	700533	Identifier	target		700438	1					
ANR	700534	Identifier	NT_CANY		700438	1					
ANR	700535	CompoundStatement		15:36:389:389	700438	1					
ANR	700536	IfStatement	if ( qn -> greedy && infinite )		700438	0					
ANR	700537	Condition	qn -> greedy && infinite	748:8:16178:16199	700438	0	True				
ANR	700538	AndExpression	qn -> greedy && infinite		700438	0		&&			
ANR	700539	PtrMemberAccess	qn -> greedy		700438	0					
ANR	700540	Identifier	qn		700438	0					
ANR	700541	Identifier	greedy		700438	1					
ANR	700542	Identifier	infinite		700438	1					
ANR	700543	CompoundStatement		16:32:423:423	700438	1					
ANR	700544	IfStatement	if ( IS_NOT_NULL ( qn -> next_head_exact ) && ! CKN_ON )		700438	0					
ANR	700545	Condition	IS_NOT_NULL ( qn -> next_head_exact ) && ! CKN_ON	749:10:16214:16256	700438	0	True				
ANR	700546	AndExpression	IS_NOT_NULL ( qn -> next_head_exact ) && ! CKN_ON		700438	0		&&			
ANR	700547	CallExpression	IS_NOT_NULL ( qn -> next_head_exact )		700438	0					
ANR	700548	Callee	IS_NOT_NULL		700438	0					
ANR	700549	Identifier	IS_NOT_NULL		700438	0					
ANR	700550	ArgumentList	qn -> next_head_exact		700438	1					
ANR	700551	Argument	qn -> next_head_exact		700438	0					
ANR	700552	PtrMemberAccess	qn -> next_head_exact		700438	0					
ANR	700553	Identifier	qn		700438	0					
ANR	700554	Identifier	next_head_exact		700438	1					
ANR	700555	UnaryOperationExpression	! CKN_ON		700438	1					
ANR	700556	UnaryOperator	!		700438	0					
ANR	700557	Identifier	CKN_ON		700438	1					
ANR	700558	ReturnStatement	return SIZE_OP_ANYCHAR_STAR_PEEK_NEXT + tlen * qn -> lower + cklen ;	750:8:16267:16331	700438	1	True				
ANR	700559	AdditiveExpression	SIZE_OP_ANYCHAR_STAR_PEEK_NEXT + tlen * qn -> lower + cklen		700438	0		+			
ANR	700560	Identifier	SIZE_OP_ANYCHAR_STAR_PEEK_NEXT		700438	0					
ANR	700561	AdditiveExpression	tlen * qn -> lower + cklen		700438	1		+			
ANR	700562	MultiplicativeExpression	tlen * qn -> lower		700438	0		*			
ANR	700563	Identifier	tlen		700438	0					
ANR	700564	PtrMemberAccess	qn -> lower		700438	1					
ANR	700565	Identifier	qn		700438	0					
ANR	700566	Identifier	lower		700438	1					
ANR	700567	Identifier	cklen		700438	1					
ANR	700568	ElseStatement	else		700438	0					
ANR	700569	ReturnStatement	return SIZE_OP_ANYCHAR_STAR + tlen * qn -> lower + cklen ;	752:8:16352:16406	700438	0	True				
ANR	700570	AdditiveExpression	SIZE_OP_ANYCHAR_STAR + tlen * qn -> lower + cklen		700438	0		+			
ANR	700571	Identifier	SIZE_OP_ANYCHAR_STAR		700438	0					
ANR	700572	AdditiveExpression	tlen * qn -> lower + cklen		700438	1		+			
ANR	700573	MultiplicativeExpression	tlen * qn -> lower		700438	0		*			
ANR	700574	Identifier	tlen		700438	0					
ANR	700575	PtrMemberAccess	qn -> lower		700438	1					
ANR	700576	Identifier	qn		700438	0					
ANR	700577	Identifier	lower		700438	1					
ANR	700578	Identifier	cklen		700438	1					
ANR	700579	IfStatement	if ( empty_info != 0 )		700438	9					
ANR	700580	Condition	empty_info != 0	756:6:16425:16439	700438	0	True				
ANR	700581	EqualityExpression	empty_info != 0		700438	0		!=			
ANR	700582	Identifier	empty_info		700438	0					
ANR	700583	PrimaryExpression	0		700438	1					
ANR	700584	ExpressionStatement	mod_tlen = tlen + ( SIZE_OP_NULL_CHECK_START + SIZE_OP_NULL_CHECK_END )	757:4:16446:16515	700438	1	True				
ANR	700585	AssignmentExpression	mod_tlen = tlen + ( SIZE_OP_NULL_CHECK_START + SIZE_OP_NULL_CHECK_END )		700438	0		=			
ANR	700586	Identifier	mod_tlen		700438	0					
ANR	700587	AdditiveExpression	tlen + ( SIZE_OP_NULL_CHECK_START + SIZE_OP_NULL_CHECK_END )		700438	1		+			
ANR	700588	Identifier	tlen		700438	0					
ANR	700589	AdditiveExpression	SIZE_OP_NULL_CHECK_START + SIZE_OP_NULL_CHECK_END		700438	1		+			
ANR	700590	Identifier	SIZE_OP_NULL_CHECK_START		700438	0					
ANR	700591	Identifier	SIZE_OP_NULL_CHECK_END		700438	1					
ANR	700592	ElseStatement	else		700438	0					
ANR	700593	ExpressionStatement	mod_tlen = tlen	759:4:16528:16543	700438	0	True				
ANR	700594	AssignmentExpression	mod_tlen = tlen		700438	0		=			
ANR	700595	Identifier	mod_tlen		700438	0					
ANR	700596	Identifier	tlen		700438	1					
ANR	700597	IfStatement	if ( infinite && qn -> lower <= 1 )		700438	10					
ANR	700598	Condition	infinite && qn -> lower <= 1	761:6:16552:16577	700438	0	True				
ANR	700599	AndExpression	infinite && qn -> lower <= 1		700438	0		&&			
ANR	700600	Identifier	infinite		700438	0					
ANR	700601	RelationalExpression	qn -> lower <= 1		700438	1		<=			
ANR	700602	PtrMemberAccess	qn -> lower		700438	0					
ANR	700603	Identifier	qn		700438	0					
ANR	700604	Identifier	lower		700438	1					
ANR	700605	PrimaryExpression	1		700438	1					
ANR	700606	CompoundStatement		29:34:801:801	700438	1					
ANR	700607	IfStatement	if ( qn -> greedy )		700438	0					
ANR	700608	Condition	qn -> greedy	762:8:16590:16599	700438	0	True				
ANR	700609	PtrMemberAccess	qn -> greedy		700438	0					
ANR	700610	Identifier	qn		700438	0					
ANR	700611	Identifier	greedy		700438	1					
ANR	700612	CompoundStatement		30:20:823:823	700438	1					
ANR	700613	IfStatement	if ( qn -> lower == 1 )		700438	0					
ANR	700614	Condition	qn -> lower == 1	763:10:16614:16627	700438	0	True				
ANR	700615	EqualityExpression	qn -> lower == 1		700438	0		==			
ANR	700616	PtrMemberAccess	qn -> lower		700438	0					
ANR	700617	Identifier	qn		700438	0					
ANR	700618	Identifier	lower		700438	1					
ANR	700619	PrimaryExpression	1		700438	1					
ANR	700620	ExpressionStatement	len = SIZE_OP_JUMP	764:1:16631:16649	700438	1	True				
ANR	700621	AssignmentExpression	len = SIZE_OP_JUMP		700438	0		=			
ANR	700622	Identifier	len		700438	0					
ANR	700623	Identifier	SIZE_OP_JUMP		700438	1					
ANR	700624	ElseStatement	else		700438	0					
ANR	700625	ExpressionStatement	len = 0	766:1:16663:16670	700438	0	True				
ANR	700626	AssignmentExpression	len = 0		700438	0		=			
ANR	700627	Identifier	len		700438	0					
ANR	700628	PrimaryExpression	0		700438	1					
ANR	700629	ExpressionStatement	len += SIZE_OP_PUSH + cklen + mod_tlen + SIZE_OP_JUMP	768:6:16679:16732	700438	1	True				
ANR	700630	AssignmentExpression	len += SIZE_OP_PUSH + cklen + mod_tlen + SIZE_OP_JUMP		700438	0		+=			
ANR	700631	Identifier	len		700438	0					
ANR	700632	AdditiveExpression	SIZE_OP_PUSH + cklen + mod_tlen + SIZE_OP_JUMP		700438	1		+			
ANR	700633	Identifier	SIZE_OP_PUSH		700438	0					
ANR	700634	AdditiveExpression	cklen + mod_tlen + SIZE_OP_JUMP		700438	1		+			
ANR	700635	Identifier	cklen		700438	0					
ANR	700636	AdditiveExpression	mod_tlen + SIZE_OP_JUMP		700438	1		+			
ANR	700637	Identifier	mod_tlen		700438	0					
ANR	700638	Identifier	SIZE_OP_JUMP		700438	1					
ANR	700639	ElseStatement	else		700438	0					
ANR	700640	CompoundStatement		38:9:970:970	700438	0					
ANR	700641	IfStatement	if ( qn -> lower == 0 )		700438	0					
ANR	700642	Condition	qn -> lower == 0	771:10:16761:16774	700438	0	True				
ANR	700643	EqualityExpression	qn -> lower == 0		700438	0		==			
ANR	700644	PtrMemberAccess	qn -> lower		700438	0					
ANR	700645	Identifier	qn		700438	0					
ANR	700646	Identifier	lower		700438	1					
ANR	700647	PrimaryExpression	0		700438	1					
ANR	700648	ExpressionStatement	len = SIZE_OP_JUMP	772:1:16778:16796	700438	1	True				
ANR	700649	AssignmentExpression	len = SIZE_OP_JUMP		700438	0		=			
ANR	700650	Identifier	len		700438	0					
ANR	700651	Identifier	SIZE_OP_JUMP		700438	1					
ANR	700652	ElseStatement	else		700438	0					
ANR	700653	ExpressionStatement	len = 0	774:1:16810:16817	700438	0	True				
ANR	700654	AssignmentExpression	len = 0		700438	0		=			
ANR	700655	Identifier	len		700438	0					
ANR	700656	PrimaryExpression	0		700438	1					
ANR	700657	ExpressionStatement	len += mod_tlen + SIZE_OP_PUSH + cklen	776:6:16826:16864	700438	1	True				
ANR	700658	AssignmentExpression	len += mod_tlen + SIZE_OP_PUSH + cklen		700438	0		+=			
ANR	700659	Identifier	len		700438	0					
ANR	700660	AdditiveExpression	mod_tlen + SIZE_OP_PUSH + cklen		700438	1		+			
ANR	700661	Identifier	mod_tlen		700438	0					
ANR	700662	AdditiveExpression	SIZE_OP_PUSH + cklen		700438	1		+			
ANR	700663	Identifier	SIZE_OP_PUSH		700438	0					
ANR	700664	Identifier	cklen		700438	1					
ANR	700665	ElseStatement	else		700438	0					
ANR	700666	IfStatement	if ( qn -> upper == 0 )		700438	0					
ANR	700667	Condition	qn -> upper == 0	779:11:16887:16900	700438	0	True				
ANR	700668	EqualityExpression	qn -> upper == 0		700438	0		==			
ANR	700669	PtrMemberAccess	qn -> upper		700438	0					
ANR	700670	Identifier	qn		700438	0					
ANR	700671	Identifier	upper		700438	1					
ANR	700672	PrimaryExpression	0		700438	1					
ANR	700673	CompoundStatement		47:27:1124:1124	700438	1					
ANR	700674	IfStatement	if ( qn -> is_refered != 0 )		700438	0					
ANR	700675	Condition	qn -> is_refered != 0	780:8:16913:16931	700438	0	True				
ANR	700676	EqualityExpression	qn -> is_refered != 0		700438	0		!=			
ANR	700677	PtrMemberAccess	qn -> is_refered		700438	0					
ANR	700678	Identifier	qn		700438	0					
ANR	700679	Identifier	is_refered		700438	1					
ANR	700680	PrimaryExpression	0		700438	1					
ANR	700681	ExpressionStatement	len = SIZE_OP_JUMP + tlen	781:6:16960:16985	700438	1	True				
ANR	700682	AssignmentExpression	len = SIZE_OP_JUMP + tlen		700438	0		=			
ANR	700683	Identifier	len		700438	0					
ANR	700684	AdditiveExpression	SIZE_OP_JUMP + tlen		700438	1		+			
ANR	700685	Identifier	SIZE_OP_JUMP		700438	0					
ANR	700686	Identifier	tlen		700438	1					
ANR	700687	ElseStatement	else		700438	0					
ANR	700688	ExpressionStatement	len = 0	783:6:17002:17009	700438	0	True				
ANR	700689	AssignmentExpression	len = 0		700438	0		=			
ANR	700690	Identifier	len		700438	0					
ANR	700691	PrimaryExpression	0		700438	1					
ANR	700692	ElseStatement	else		700438	0					
ANR	700693	IfStatement	if ( qn -> upper == 1 && qn -> greedy )		700438	0					
ANR	700694	Condition	qn -> upper == 1 && qn -> greedy	785:11:17026:17053	700438	0	True				
ANR	700695	AndExpression	qn -> upper == 1 && qn -> greedy		700438	0		&&			
ANR	700696	EqualityExpression	qn -> upper == 1		700438	0		==			
ANR	700697	PtrMemberAccess	qn -> upper		700438	0					
ANR	700698	Identifier	qn		700438	0					
ANR	700699	Identifier	upper		700438	1					
ANR	700700	PrimaryExpression	1		700438	1					
ANR	700701	PtrMemberAccess	qn -> greedy		700438	1					
ANR	700702	Identifier	qn		700438	0					
ANR	700703	Identifier	greedy		700438	1					
ANR	700704	CompoundStatement		53:41:1277:1277	700438	1					
ANR	700705	IfStatement	if ( qn -> lower == 0 )		700438	0					
ANR	700706	Condition	qn -> lower == 0	786:8:17066:17079	700438	0	True				
ANR	700707	EqualityExpression	qn -> lower == 0		700438	0		==			
ANR	700708	PtrMemberAccess	qn -> lower		700438	0					
ANR	700709	Identifier	qn		700438	0					
ANR	700710	Identifier	lower		700438	1					
ANR	700711	PrimaryExpression	0		700438	1					
ANR	700712	CompoundStatement		54:24:1303:1303	700438	1					
ANR	700713	IfStatement	if ( CKN_ON )		700438	0					
ANR	700714	Condition	CKN_ON	787:10:17094:17099	700438	0	True				
ANR	700715	Identifier	CKN_ON		700438	0					
ANR	700716	CompoundStatement		55:18:1323:1323	700438	1					
ANR	700717	ExpressionStatement	len = SIZE_OP_STATE_CHECK_PUSH + tlen	788:1:17105:17142	700438	0	True				
ANR	700718	AssignmentExpression	len = SIZE_OP_STATE_CHECK_PUSH + tlen		700438	0		=			
ANR	700719	Identifier	len		700438	0					
ANR	700720	AdditiveExpression	SIZE_OP_STATE_CHECK_PUSH + tlen		700438	1		+			
ANR	700721	Identifier	SIZE_OP_STATE_CHECK_PUSH		700438	0					
ANR	700722	Identifier	tlen		700438	1					
ANR	700723	ElseStatement	else		700438	0					
ANR	700724	CompoundStatement		58:11:1384:1384	700438	0					
ANR	700725	ExpressionStatement	len = SIZE_OP_PUSH + tlen	791:1:17166:17191	700438	0	True				
ANR	700726	AssignmentExpression	len = SIZE_OP_PUSH + tlen		700438	0		=			
ANR	700727	Identifier	len		700438	0					
ANR	700728	AdditiveExpression	SIZE_OP_PUSH + tlen		700438	1		+			
ANR	700729	Identifier	SIZE_OP_PUSH		700438	0					
ANR	700730	Identifier	tlen		700438	1					
ANR	700731	ElseStatement	else		700438	0					
ANR	700732	CompoundStatement		62:9:1437:1437	700438	0					
ANR	700733	ExpressionStatement	len = tlen	795:6:17224:17234	700438	0	True				
ANR	700734	AssignmentExpression	len = tlen		700438	0		=			
ANR	700735	Identifier	len		700438	0					
ANR	700736	Identifier	tlen		700438	1					
ANR	700737	ElseStatement	else		700438	0					
ANR	700738	IfStatement	if ( ! qn -> greedy && qn -> upper == 1 && qn -> lower == 0 )		700438	0					
ANR	700739	Condition	! qn -> greedy && qn -> upper == 1 && qn -> lower == 0	798:11:17257:17303	700438	0	True				
ANR	700740	AndExpression	! qn -> greedy && qn -> upper == 1 && qn -> lower == 0		700438	0		&&			
ANR	700741	UnaryOperationExpression	! qn -> greedy		700438	0					
ANR	700742	UnaryOperator	!		700438	0					
ANR	700743	PtrMemberAccess	qn -> greedy		700438	1					
ANR	700744	Identifier	qn		700438	0					
ANR	700745	Identifier	greedy		700438	1					
ANR	700746	AndExpression	qn -> upper == 1 && qn -> lower == 0		700438	1		&&			
ANR	700747	EqualityExpression	qn -> upper == 1		700438	0		==			
ANR	700748	PtrMemberAccess	qn -> upper		700438	0					
ANR	700749	Identifier	qn		700438	0					
ANR	700750	Identifier	upper		700438	1					
ANR	700751	PrimaryExpression	1		700438	1					
ANR	700752	EqualityExpression	qn -> lower == 0		700438	1		==			
ANR	700753	PtrMemberAccess	qn -> lower		700438	0					
ANR	700754	Identifier	qn		700438	0					
ANR	700755	Identifier	lower		700438	1					
ANR	700756	PrimaryExpression	0		700438	1					
ANR	700757	CompoundStatement		66:60:1527:1527	700438	1					
ANR	700758	ExpressionStatement	len = SIZE_OP_PUSH + cklen + SIZE_OP_JUMP + tlen	799:4:17323:17371	700438	0	True				
ANR	700759	AssignmentExpression	len = SIZE_OP_PUSH + cklen + SIZE_OP_JUMP + tlen		700438	0		=			
ANR	700760	Identifier	len		700438	0					
ANR	700761	AdditiveExpression	SIZE_OP_PUSH + cklen + SIZE_OP_JUMP + tlen		700438	1		+			
ANR	700762	Identifier	SIZE_OP_PUSH		700438	0					
ANR	700763	AdditiveExpression	cklen + SIZE_OP_JUMP + tlen		700438	1		+			
ANR	700764	Identifier	cklen		700438	0					
ANR	700765	AdditiveExpression	SIZE_OP_JUMP + tlen		700438	1		+			
ANR	700766	Identifier	SIZE_OP_JUMP		700438	0					
ANR	700767	Identifier	tlen		700438	1					
ANR	700768	ElseStatement	else		700438	0					
ANR	700769	CompoundStatement		69:7:1605:1605	700438	0					
ANR	700770	ExpressionStatement	len = SIZE_OP_REPEAT_INC + mod_tlen + SIZE_OPCODE + SIZE_RELADDR + SIZE_MEMNUM	802:4:17390:17476	700438	0	True				
ANR	700771	AssignmentExpression	len = SIZE_OP_REPEAT_INC + mod_tlen + SIZE_OPCODE + SIZE_RELADDR + SIZE_MEMNUM		700438	0		=			
ANR	700772	Identifier	len		700438	0					
ANR	700773	AdditiveExpression	SIZE_OP_REPEAT_INC + mod_tlen + SIZE_OPCODE + SIZE_RELADDR + SIZE_MEMNUM		700438	1		+			
ANR	700774	Identifier	SIZE_OP_REPEAT_INC		700438	0					
ANR	700775	AdditiveExpression	mod_tlen + SIZE_OPCODE + SIZE_RELADDR + SIZE_MEMNUM		700438	1		+			
ANR	700776	Identifier	mod_tlen		700438	0					
ANR	700777	AdditiveExpression	SIZE_OPCODE + SIZE_RELADDR + SIZE_MEMNUM		700438	1		+			
ANR	700778	Identifier	SIZE_OPCODE		700438	0					
ANR	700779	AdditiveExpression	SIZE_RELADDR + SIZE_MEMNUM		700438	1		+			
ANR	700780	Identifier	SIZE_RELADDR		700438	0					
ANR	700781	Identifier	SIZE_MEMNUM		700438	1					
ANR	700782	IfStatement	if ( CKN_ON )		700438	1					
ANR	700783	Condition	CKN_ON	804:8:17486:17491	700438	0	True				
ANR	700784	Identifier	CKN_ON		700438	0					
ANR	700785	ExpressionStatement	len += SIZE_OP_STATE_CHECK	805:6:17500:17526	700438	1	True				
ANR	700786	AssignmentExpression	len += SIZE_OP_STATE_CHECK		700438	0		+=			
ANR	700787	Identifier	len		700438	0					
ANR	700788	Identifier	SIZE_OP_STATE_CHECK		700438	1					
ANR	700789	ReturnStatement	return len ;	808:2:17535:17545	700438	11	True				
ANR	700790	Identifier	len		700438	0					
ANR	700791	ReturnType	static int		700438	1					
ANR	700792	Identifier	compile_length_quantifier_node		700438	2					
ANR	700793	ParameterList	"QtfrNode * qn , regex_t * reg"		700438	3					
ANR	700794	Parameter	QtfrNode * qn	732:31:15750:15761	700438	0	True				
ANR	700795	ParameterType	QtfrNode *		700438	0					
ANR	700796	Identifier	qn		700438	1					
ANR	700797	Parameter	regex_t * reg	732:45:15764:15775	700438	1	True				
ANR	700798	ParameterType	regex_t *		700438	0					
ANR	700799	Identifier	reg		700438	1					
ANR	700800	CFGEntryNode	ENTRY		700438		True				
ANR	700801	CFGExitNode	EXIT		700438		True				
ANR	700802	Symbol	* qn		700438						
ANR	700803	Symbol	qn -> target_empty_info		700438						
ANR	700804	Symbol	qn -> greedy		700438						
ANR	700805	Symbol	SIZE_RELADDR		700438						
ANR	700806	Symbol	CKN_ON		700438						
ANR	700807	Symbol	IS_NOT_NULL		700438						
ANR	700808	Symbol	SIZE_OP_ANYCHAR_STAR_PEEK_NEXT		700438						
ANR	700809	Symbol	infinite		700438						
ANR	700810	Symbol	ckn		700438						
ANR	700811	Symbol	cklen		700438						
ANR	700812	Symbol	qn -> next_head_exact		700438						
ANR	700813	Symbol	SIZE_OP_NULL_CHECK_END		700438						
ANR	700814	Symbol	SIZE_STATE_CHECK_NUM		700438						
ANR	700815	Symbol	SIZE_OPCODE		700438						
ANR	700816	Symbol	qn -> lower		700438						
ANR	700817	Symbol	SIZE_MEMNUM		700438						
ANR	700818	Symbol	len		700438						
ANR	700819	Symbol	reg		700438						
ANR	700820	Symbol	NT_CANY		700438						
ANR	700821	Symbol	SIZE_OP_ANYCHAR_STAR		700438						
ANR	700822	Symbol	tlen		700438						
ANR	700823	Symbol	reg -> num_comb_exp_check		700438						
ANR	700824	Symbol	SIZE_OP_REPEAT_INC		700438						
ANR	700825	Symbol	IS_REPEAT_INFINITE		700438						
ANR	700826	Symbol	SIZE_OP_NULL_CHECK_START		700438						
ANR	700827	Symbol	qn		700438						
ANR	700828	Symbol	SIZE_OP_JUMP		700438						
ANR	700829	Symbol	SIZE_OP_STATE_CHECK		700438						
ANR	700830	Symbol	compile_length_tree		700438						
ANR	700831	Symbol	qn -> comb_exp_check_num		700438						
ANR	700832	Symbol	SIZE_OP_PUSH		700438						
ANR	700833	Symbol	qn -> target		700438						
ANR	700834	Symbol	qn -> upper		700438						
ANR	700835	Symbol	qn -> is_refered		700438						
ANR	700836	Symbol	mod_tlen		700438						
ANR	700837	Symbol	empty_info		700438						
ANR	700838	Symbol	NTYPE		700438						
ANR	700839	Symbol	SIZE_OP_STATE_CHECK_PUSH		700438						
ANR	700840	Symbol	* reg		700438						
ANR	700841	Function	compile_quantifier_node	811:0:17550:21520							
ANR	700842	FunctionDef	"compile_quantifier_node (QtfrNode * qn , regex_t * reg)"		700841	0					
ANR	700843	CompoundStatement		813:0:17613:21520	700841	0					
ANR	700844	IdentifierDeclStatement	"int r , mod_tlen ;"	814:2:17617:17632	700841	0	True				
ANR	700845	IdentifierDecl	r		700841	0					
ANR	700846	IdentifierDeclType	int		700841	0					
ANR	700847	Identifier	r		700841	1					
ANR	700848	IdentifierDecl	mod_tlen		700841	1					
ANR	700849	IdentifierDeclType	int		700841	0					
ANR	700850	Identifier	mod_tlen		700841	1					
ANR	700851	IdentifierDeclStatement	int ckn ;	815:2:17636:17643	700841	1	True				
ANR	700852	IdentifierDecl	ckn		700841	0					
ANR	700853	IdentifierDeclType	int		700841	0					
ANR	700854	Identifier	ckn		700841	1					
ANR	700855	IdentifierDeclStatement	int infinite = IS_REPEAT_INFINITE ( qn -> upper ) ;	816:2:17647:17691	700841	2	True				
ANR	700856	IdentifierDecl	infinite = IS_REPEAT_INFINITE ( qn -> upper )		700841	0					
ANR	700857	IdentifierDeclType	int		700841	0					
ANR	700858	Identifier	infinite		700841	1					
ANR	700859	AssignmentExpression	infinite = IS_REPEAT_INFINITE ( qn -> upper )		700841	2		=			
ANR	700860	Identifier	infinite		700841	0					
ANR	700861	CallExpression	IS_REPEAT_INFINITE ( qn -> upper )		700841	1					
ANR	700862	Callee	IS_REPEAT_INFINITE		700841	0					
ANR	700863	Identifier	IS_REPEAT_INFINITE		700841	0					
ANR	700864	ArgumentList	qn -> upper		700841	1					
ANR	700865	Argument	qn -> upper		700841	0					
ANR	700866	PtrMemberAccess	qn -> upper		700841	0					
ANR	700867	Identifier	qn		700841	0					
ANR	700868	Identifier	upper		700841	1					
ANR	700869	IdentifierDeclStatement	int empty_info = qn -> target_empty_info ;	817:2:17695:17733	700841	3	True				
ANR	700870	IdentifierDecl	empty_info = qn -> target_empty_info		700841	0					
ANR	700871	IdentifierDeclType	int		700841	0					
ANR	700872	Identifier	empty_info		700841	1					
ANR	700873	AssignmentExpression	empty_info = qn -> target_empty_info		700841	2		=			
ANR	700874	Identifier	empty_info		700841	0					
ANR	700875	PtrMemberAccess	qn -> target_empty_info		700841	1					
ANR	700876	Identifier	qn		700841	0					
ANR	700877	Identifier	target_empty_info		700841	1					
ANR	700878	IdentifierDeclStatement	"int tlen = compile_length_tree ( qn -> target , reg ) ;"	818:2:17737:17784	700841	4	True				
ANR	700879	IdentifierDecl	"tlen = compile_length_tree ( qn -> target , reg )"		700841	0					
ANR	700880	IdentifierDeclType	int		700841	0					
ANR	700881	Identifier	tlen		700841	1					
ANR	700882	AssignmentExpression	"tlen = compile_length_tree ( qn -> target , reg )"		700841	2		=			
ANR	700883	Identifier	tlen		700841	0					
ANR	700884	CallExpression	"compile_length_tree ( qn -> target , reg )"		700841	1					
ANR	700885	Callee	compile_length_tree		700841	0					
ANR	700886	Identifier	compile_length_tree		700841	0					
ANR	700887	ArgumentList	qn -> target		700841	1					
ANR	700888	Argument	qn -> target		700841	0					
ANR	700889	PtrMemberAccess	qn -> target		700841	0					
ANR	700890	Identifier	qn		700841	0					
ANR	700891	Identifier	target		700841	1					
ANR	700892	Argument	reg		700841	1					
ANR	700893	Identifier	reg		700841	0					
ANR	700894	IfStatement	if ( tlen < 0 )		700841	5					
ANR	700895	Condition	tlen < 0	820:6:17793:17800	700841	0	True				
ANR	700896	RelationalExpression	tlen < 0		700841	0		<			
ANR	700897	Identifier	tlen		700841	0					
ANR	700898	PrimaryExpression	0		700841	1					
ANR	700899	ReturnStatement	return tlen ;	820:16:17803:17814	700841	1	True				
ANR	700900	Identifier	tlen		700841	0					
ANR	700901	ExpressionStatement	ckn = ( ( reg -> num_comb_exp_check > 0 ) ? qn -> comb_exp_check_num : 0 )	822:2:17819:17885	700841	6	True				
ANR	700902	AssignmentExpression	ckn = ( ( reg -> num_comb_exp_check > 0 ) ? qn -> comb_exp_check_num : 0 )		700841	0		=			
ANR	700903	Identifier	ckn		700841	0					
ANR	700904	ConditionalExpression	( reg -> num_comb_exp_check > 0 ) ? qn -> comb_exp_check_num : 0		700841	1					
ANR	700905	Condition	reg -> num_comb_exp_check > 0		700841	0					
ANR	700906	RelationalExpression	reg -> num_comb_exp_check > 0		700841	0		>			
ANR	700907	PtrMemberAccess	reg -> num_comb_exp_check		700841	0					
ANR	700908	Identifier	reg		700841	0					
ANR	700909	Identifier	num_comb_exp_check		700841	1					
ANR	700910	PrimaryExpression	0		700841	1					
ANR	700911	PtrMemberAccess	qn -> comb_exp_check_num		700841	1					
ANR	700912	Identifier	qn		700841	0					
ANR	700913	Identifier	comb_exp_check_num		700841	1					
ANR	700914	PrimaryExpression	0		700841	2					
ANR	700915	IfStatement	if ( is_anychar_star_quantifier ( qn ) )		700841	7					
ANR	700916	Condition	is_anychar_star_quantifier ( qn )	824:6:17894:17923	700841	0	True				
ANR	700917	CallExpression	is_anychar_star_quantifier ( qn )		700841	0					
ANR	700918	Callee	is_anychar_star_quantifier		700841	0					
ANR	700919	Identifier	is_anychar_star_quantifier		700841	0					
ANR	700920	ArgumentList	qn		700841	1					
ANR	700921	Argument	qn		700841	0					
ANR	700922	Identifier	qn		700841	0					
ANR	700923	CompoundStatement		12:38:312:312	700841	1					
ANR	700924	ExpressionStatement	"r = compile_tree_n_times ( qn -> target , qn -> lower , reg )"	825:4:17932:17984	700841	0	True				
ANR	700925	AssignmentExpression	"r = compile_tree_n_times ( qn -> target , qn -> lower , reg )"		700841	0		=			
ANR	700926	Identifier	r		700841	0					
ANR	700927	CallExpression	"compile_tree_n_times ( qn -> target , qn -> lower , reg )"		700841	1					
ANR	700928	Callee	compile_tree_n_times		700841	0					
ANR	700929	Identifier	compile_tree_n_times		700841	0					
ANR	700930	ArgumentList	qn -> target		700841	1					
ANR	700931	Argument	qn -> target		700841	0					
ANR	700932	PtrMemberAccess	qn -> target		700841	0					
ANR	700933	Identifier	qn		700841	0					
ANR	700934	Identifier	target		700841	1					
ANR	700935	Argument	qn -> lower		700841	1					
ANR	700936	PtrMemberAccess	qn -> lower		700841	0					
ANR	700937	Identifier	qn		700841	0					
ANR	700938	Identifier	lower		700841	1					
ANR	700939	Argument	reg		700841	2					
ANR	700940	Identifier	reg		700841	0					
ANR	700941	IfStatement	if ( r )		700841	1					
ANR	700942	Condition	r	826:8:17994:17994	700841	0	True				
ANR	700943	Identifier	r		700841	0					
ANR	700944	ReturnStatement	return r ;	826:11:17997:18005	700841	1	True				
ANR	700945	Identifier	r		700841	0					
ANR	700946	IfStatement	if ( IS_NOT_NULL ( qn -> next_head_exact ) && ! CKN_ON )		700841	2					
ANR	700947	Condition	IS_NOT_NULL ( qn -> next_head_exact ) && ! CKN_ON	827:8:18015:18057	700841	0	True				
ANR	700948	AndExpression	IS_NOT_NULL ( qn -> next_head_exact ) && ! CKN_ON		700841	0		&&			
ANR	700949	CallExpression	IS_NOT_NULL ( qn -> next_head_exact )		700841	0					
ANR	700950	Callee	IS_NOT_NULL		700841	0					
ANR	700951	Identifier	IS_NOT_NULL		700841	0					
ANR	700952	ArgumentList	qn -> next_head_exact		700841	1					
ANR	700953	Argument	qn -> next_head_exact		700841	0					
ANR	700954	PtrMemberAccess	qn -> next_head_exact		700841	0					
ANR	700955	Identifier	qn		700841	0					
ANR	700956	Identifier	next_head_exact		700841	1					
ANR	700957	UnaryOperationExpression	! CKN_ON		700841	1					
ANR	700958	UnaryOperator	!		700841	0					
ANR	700959	Identifier	CKN_ON		700841	1					
ANR	700960	CompoundStatement		15:53:446:446	700841	1					
ANR	700961	IfStatement	if ( IS_MULTILINE ( reg -> options ) )		700841	0					
ANR	700962	Condition	IS_MULTILINE ( reg -> options )	828:10:18072:18097	700841	0	True				
ANR	700963	CallExpression	IS_MULTILINE ( reg -> options )		700841	0					
ANR	700964	Callee	IS_MULTILINE		700841	0					
ANR	700965	Identifier	IS_MULTILINE		700841	0					
ANR	700966	ArgumentList	reg -> options		700841	1					
ANR	700967	Argument	reg -> options		700841	0					
ANR	700968	PtrMemberAccess	reg -> options		700841	0					
ANR	700969	Identifier	reg		700841	0					
ANR	700970	Identifier	options		700841	1					
ANR	700971	ExpressionStatement	"r = add_opcode ( reg , OP_ANYCHAR_ML_STAR_PEEK_NEXT )"	829:1:18101:18150	700841	1	True				
ANR	700972	AssignmentExpression	"r = add_opcode ( reg , OP_ANYCHAR_ML_STAR_PEEK_NEXT )"		700841	0		=			
ANR	700973	Identifier	r		700841	0					
ANR	700974	CallExpression	"add_opcode ( reg , OP_ANYCHAR_ML_STAR_PEEK_NEXT )"		700841	1					
ANR	700975	Callee	add_opcode		700841	0					
ANR	700976	Identifier	add_opcode		700841	0					
ANR	700977	ArgumentList	reg		700841	1					
ANR	700978	Argument	reg		700841	0					
ANR	700979	Identifier	reg		700841	0					
ANR	700980	Argument	OP_ANYCHAR_ML_STAR_PEEK_NEXT		700841	1					
ANR	700981	Identifier	OP_ANYCHAR_ML_STAR_PEEK_NEXT		700841	0					
ANR	700982	ElseStatement	else		700841	0					
ANR	700983	ExpressionStatement	"r = add_opcode ( reg , OP_ANYCHAR_STAR_PEEK_NEXT )"	831:1:18164:18210	700841	0	True				
ANR	700984	AssignmentExpression	"r = add_opcode ( reg , OP_ANYCHAR_STAR_PEEK_NEXT )"		700841	0		=			
ANR	700985	Identifier	r		700841	0					
ANR	700986	CallExpression	"add_opcode ( reg , OP_ANYCHAR_STAR_PEEK_NEXT )"		700841	1					
ANR	700987	Callee	add_opcode		700841	0					
ANR	700988	Identifier	add_opcode		700841	0					
ANR	700989	ArgumentList	reg		700841	1					
ANR	700990	Argument	reg		700841	0					
ANR	700991	Identifier	reg		700841	0					
ANR	700992	Argument	OP_ANYCHAR_STAR_PEEK_NEXT		700841	1					
ANR	700993	Identifier	OP_ANYCHAR_STAR_PEEK_NEXT		700841	0					
ANR	700994	IfStatement	if ( r )		700841	1					
ANR	700995	Condition	r	832:10:18222:18222	700841	0	True				
ANR	700996	Identifier	r		700841	0					
ANR	700997	ReturnStatement	return r ;	832:13:18225:18233	700841	1	True				
ANR	700998	Identifier	r		700841	0					
ANR	700999	IfStatement	if ( CKN_ON )		700841	2					
ANR	701000	Condition	CKN_ON	833:10:18245:18250	700841	0	True				
ANR	701001	Identifier	CKN_ON		700841	0					
ANR	701002	CompoundStatement		21:18:639:639	700841	1					
ANR	701003	ExpressionStatement	"r = add_state_check_num ( reg , ckn )"	834:1:18256:18289	700841	0	True				
ANR	701004	AssignmentExpression	"r = add_state_check_num ( reg , ckn )"		700841	0		=			
ANR	701005	Identifier	r		700841	0					
ANR	701006	CallExpression	"add_state_check_num ( reg , ckn )"		700841	1					
ANR	701007	Callee	add_state_check_num		700841	0					
ANR	701008	Identifier	add_state_check_num		700841	0					
ANR	701009	ArgumentList	reg		700841	1					
ANR	701010	Argument	reg		700841	0					
ANR	701011	Identifier	reg		700841	0					
ANR	701012	Argument	ckn		700841	1					
ANR	701013	Identifier	ckn		700841	0					
ANR	701014	IfStatement	if ( r )		700841	1					
ANR	701015	Condition	r	835:5:18296:18296	700841	0	True				
ANR	701016	Identifier	r		700841	0					
ANR	701017	ReturnStatement	return r ;	835:8:18299:18307	700841	1	True				
ANR	701018	Identifier	r		700841	0					
ANR	701019	ReturnStatement	"return add_bytes ( reg , NSTR ( qn -> next_head_exact ) -> s , 1 ) ;"	838:6:18324:18378	700841	3	True				
ANR	701020	CallExpression	"add_bytes ( reg , NSTR ( qn -> next_head_exact ) -> s , 1 )"		700841	0					
ANR	701021	Callee	add_bytes		700841	0					
ANR	701022	Identifier	add_bytes		700841	0					
ANR	701023	ArgumentList	reg		700841	1					
ANR	701024	Argument	reg		700841	0					
ANR	701025	Identifier	reg		700841	0					
ANR	701026	Argument	NSTR ( qn -> next_head_exact ) -> s		700841	1					
ANR	701027	PtrMemberAccess	NSTR ( qn -> next_head_exact ) -> s		700841	0					
ANR	701028	CallExpression	NSTR ( qn -> next_head_exact )		700841	0					
ANR	701029	Callee	NSTR		700841	0					
ANR	701030	Identifier	NSTR		700841	0					
ANR	701031	ArgumentList	qn -> next_head_exact		700841	1					
ANR	701032	Argument	qn -> next_head_exact		700841	0					
ANR	701033	PtrMemberAccess	qn -> next_head_exact		700841	0					
ANR	701034	Identifier	qn		700841	0					
ANR	701035	Identifier	next_head_exact		700841	1					
ANR	701036	Identifier	s		700841	1					
ANR	701037	Argument	1		700841	2					
ANR	701038	PrimaryExpression	1		700841	0					
ANR	701039	ElseStatement	else		700841	0					
ANR	701040	CompoundStatement		28:9:781:781	700841	0					
ANR	701041	IfStatement	if ( IS_MULTILINE ( reg -> options ) )		700841	0					
ANR	701042	Condition	IS_MULTILINE ( reg -> options )	841:10:18407:18432	700841	0	True				
ANR	701043	CallExpression	IS_MULTILINE ( reg -> options )		700841	0					
ANR	701044	Callee	IS_MULTILINE		700841	0					
ANR	701045	Identifier	IS_MULTILINE		700841	0					
ANR	701046	ArgumentList	reg -> options		700841	1					
ANR	701047	Argument	reg -> options		700841	0					
ANR	701048	PtrMemberAccess	reg -> options		700841	0					
ANR	701049	Identifier	reg		700841	0					
ANR	701050	Identifier	options		700841	1					
ANR	701051	CompoundStatement		29:38:821:821	700841	1					
ANR	701052	ExpressionStatement	"r = add_opcode ( reg , ( CKN_ON ? OP_STATE_CHECK_ANYCHAR_ML_STAR : OP_ANYCHAR_ML_STAR ) )"	842:1:18438:18539	700841	0	True				
ANR	701053	AssignmentExpression	"r = add_opcode ( reg , ( CKN_ON ? OP_STATE_CHECK_ANYCHAR_ML_STAR : OP_ANYCHAR_ML_STAR ) )"		700841	0		=			
ANR	701054	Identifier	r		700841	0					
ANR	701055	CallExpression	"add_opcode ( reg , ( CKN_ON ? OP_STATE_CHECK_ANYCHAR_ML_STAR : OP_ANYCHAR_ML_STAR ) )"		700841	1					
ANR	701056	Callee	add_opcode		700841	0					
ANR	701057	Identifier	add_opcode		700841	0					
ANR	701058	ArgumentList	reg		700841	1					
ANR	701059	Argument	reg		700841	0					
ANR	701060	Identifier	reg		700841	0					
ANR	701061	Argument	CKN_ON ? OP_STATE_CHECK_ANYCHAR_ML_STAR : OP_ANYCHAR_ML_STAR		700841	1					
ANR	701062	ConditionalExpression	CKN_ON ? OP_STATE_CHECK_ANYCHAR_ML_STAR : OP_ANYCHAR_ML_STAR		700841	0					
ANR	701063	Condition	CKN_ON		700841	0					
ANR	701064	Identifier	CKN_ON		700841	0					
ANR	701065	Identifier	OP_STATE_CHECK_ANYCHAR_ML_STAR		700841	1					
ANR	701066	Identifier	OP_ANYCHAR_ML_STAR		700841	2					
ANR	701067	ElseStatement	else		700841	0					
ANR	701068	CompoundStatement		34:11:946:946	700841	0					
ANR	701069	ExpressionStatement	"r = add_opcode ( reg , ( CKN_ON ? OP_STATE_CHECK_ANYCHAR_STAR : OP_ANYCHAR_STAR ) )"	847:1:18563:18658	700841	0	True				
ANR	701070	AssignmentExpression	"r = add_opcode ( reg , ( CKN_ON ? OP_STATE_CHECK_ANYCHAR_STAR : OP_ANYCHAR_STAR ) )"		700841	0		=			
ANR	701071	Identifier	r		700841	0					
ANR	701072	CallExpression	"add_opcode ( reg , ( CKN_ON ? OP_STATE_CHECK_ANYCHAR_STAR : OP_ANYCHAR_STAR ) )"		700841	1					
ANR	701073	Callee	add_opcode		700841	0					
ANR	701074	Identifier	add_opcode		700841	0					
ANR	701075	ArgumentList	reg		700841	1					
ANR	701076	Argument	reg		700841	0					
ANR	701077	Identifier	reg		700841	0					
ANR	701078	Argument	CKN_ON ? OP_STATE_CHECK_ANYCHAR_STAR : OP_ANYCHAR_STAR		700841	1					
ANR	701079	ConditionalExpression	CKN_ON ? OP_STATE_CHECK_ANYCHAR_STAR : OP_ANYCHAR_STAR		700841	0					
ANR	701080	Condition	CKN_ON		700841	0					
ANR	701081	Identifier	CKN_ON		700841	0					
ANR	701082	Identifier	OP_STATE_CHECK_ANYCHAR_STAR		700841	1					
ANR	701083	Identifier	OP_ANYCHAR_STAR		700841	2					
ANR	701084	IfStatement	if ( r )		700841	1					
ANR	701085	Condition	r	851:10:18678:18678	700841	0	True				
ANR	701086	Identifier	r		700841	0					
ANR	701087	ReturnStatement	return r ;	851:13:18681:18689	700841	1	True				
ANR	701088	Identifier	r		700841	0					
ANR	701089	IfStatement	if ( CKN_ON )		700841	2					
ANR	701090	Condition	CKN_ON	852:10:18701:18706	700841	0	True				
ANR	701091	Identifier	CKN_ON		700841	0					
ANR	701092	ExpressionStatement	"r = add_state_check_num ( reg , ckn )"	853:1:18710:18743	700841	1	True				
ANR	701093	AssignmentExpression	"r = add_state_check_num ( reg , ckn )"		700841	0		=			
ANR	701094	Identifier	r		700841	0					
ANR	701095	CallExpression	"add_state_check_num ( reg , ckn )"		700841	1					
ANR	701096	Callee	add_state_check_num		700841	0					
ANR	701097	Identifier	add_state_check_num		700841	0					
ANR	701098	ArgumentList	reg		700841	1					
ANR	701099	Argument	reg		700841	0					
ANR	701100	Identifier	reg		700841	0					
ANR	701101	Argument	ckn		700841	1					
ANR	701102	Identifier	ckn		700841	0					
ANR	701103	ReturnStatement	return r ;	855:6:18752:18760	700841	3	True				
ANR	701104	Identifier	r		700841	0					
ANR	701105	IfStatement	if ( empty_info != 0 )		700841	8					
ANR	701106	Condition	empty_info != 0	859:6:18779:18793	700841	0	True				
ANR	701107	EqualityExpression	empty_info != 0		700841	0		!=			
ANR	701108	Identifier	empty_info		700841	0					
ANR	701109	PrimaryExpression	0		700841	1					
ANR	701110	ExpressionStatement	mod_tlen = tlen + ( SIZE_OP_NULL_CHECK_START + SIZE_OP_NULL_CHECK_END )	860:4:18800:18869	700841	1	True				
ANR	701111	AssignmentExpression	mod_tlen = tlen + ( SIZE_OP_NULL_CHECK_START + SIZE_OP_NULL_CHECK_END )		700841	0		=			
ANR	701112	Identifier	mod_tlen		700841	0					
ANR	701113	AdditiveExpression	tlen + ( SIZE_OP_NULL_CHECK_START + SIZE_OP_NULL_CHECK_END )		700841	1		+			
ANR	701114	Identifier	tlen		700841	0					
ANR	701115	AdditiveExpression	SIZE_OP_NULL_CHECK_START + SIZE_OP_NULL_CHECK_END		700841	1		+			
ANR	701116	Identifier	SIZE_OP_NULL_CHECK_START		700841	0					
ANR	701117	Identifier	SIZE_OP_NULL_CHECK_END		700841	1					
ANR	701118	ElseStatement	else		700841	0					
ANR	701119	ExpressionStatement	mod_tlen = tlen	862:4:18882:18897	700841	0	True				
ANR	701120	AssignmentExpression	mod_tlen = tlen		700841	0		=			
ANR	701121	Identifier	mod_tlen		700841	0					
ANR	701122	Identifier	tlen		700841	1					
ANR	701123	IfStatement	if ( infinite && qn -> lower <= 1 )		700841	9					
ANR	701124	Condition	infinite && qn -> lower <= 1	864:6:18906:18931	700841	0	True				
ANR	701125	AndExpression	infinite && qn -> lower <= 1		700841	0		&&			
ANR	701126	Identifier	infinite		700841	0					
ANR	701127	RelationalExpression	qn -> lower <= 1		700841	1		<=			
ANR	701128	PtrMemberAccess	qn -> lower		700841	0					
ANR	701129	Identifier	qn		700841	0					
ANR	701130	Identifier	lower		700841	1					
ANR	701131	PrimaryExpression	1		700841	1					
ANR	701132	CompoundStatement		52:34:1320:1320	700841	1					
ANR	701133	IfStatement	if ( qn -> greedy )		700841	0					
ANR	701134	Condition	qn -> greedy	865:8:18944:18953	700841	0	True				
ANR	701135	PtrMemberAccess	qn -> greedy		700841	0					
ANR	701136	Identifier	qn		700841	0					
ANR	701137	Identifier	greedy		700841	1					
ANR	701138	CompoundStatement		53:20:1342:1342	700841	1					
ANR	701139	IfStatement	if ( qn -> lower == 1 )		700841	0					
ANR	701140	Condition	qn -> lower == 1	866:10:18968:18981	700841	0	True				
ANR	701141	EqualityExpression	qn -> lower == 1		700841	0		==			
ANR	701142	PtrMemberAccess	qn -> lower		700841	0					
ANR	701143	Identifier	qn		700841	0					
ANR	701144	Identifier	lower		700841	1					
ANR	701145	PrimaryExpression	1		700841	1					
ANR	701146	CompoundStatement		54:26:1370:1370	700841	1					
ANR	701147	ExpressionStatement	"r = add_opcode_rel_addr ( reg , OP_JUMP , ( CKN_ON ? SIZE_OP_STATE_CHECK_PUSH : SIZE_OP_PUSH ) )"	867:1:18987:19079	700841	0	True				
ANR	701148	AssignmentExpression	"r = add_opcode_rel_addr ( reg , OP_JUMP , ( CKN_ON ? SIZE_OP_STATE_CHECK_PUSH : SIZE_OP_PUSH ) )"		700841	0		=			
ANR	701149	Identifier	r		700841	0					
ANR	701150	CallExpression	"add_opcode_rel_addr ( reg , OP_JUMP , ( CKN_ON ? SIZE_OP_STATE_CHECK_PUSH : SIZE_OP_PUSH ) )"		700841	1					
ANR	701151	Callee	add_opcode_rel_addr		700841	0					
ANR	701152	Identifier	add_opcode_rel_addr		700841	0					
ANR	701153	ArgumentList	reg		700841	1					
ANR	701154	Argument	reg		700841	0					
ANR	701155	Identifier	reg		700841	0					
ANR	701156	Argument	OP_JUMP		700841	1					
ANR	701157	Identifier	OP_JUMP		700841	0					
ANR	701158	Argument	CKN_ON ? SIZE_OP_STATE_CHECK_PUSH : SIZE_OP_PUSH		700841	2					
ANR	701159	ConditionalExpression	CKN_ON ? SIZE_OP_STATE_CHECK_PUSH : SIZE_OP_PUSH		700841	0					
ANR	701160	Condition	CKN_ON		700841	0					
ANR	701161	Identifier	CKN_ON		700841	0					
ANR	701162	Identifier	SIZE_OP_STATE_CHECK_PUSH		700841	1					
ANR	701163	Identifier	SIZE_OP_PUSH		700841	2					
ANR	701164	IfStatement	if ( r )		700841	1					
ANR	701165	Condition	r	869:5:19086:19086	700841	0	True				
ANR	701166	Identifier	r		700841	0					
ANR	701167	ReturnStatement	return r ;	869:8:19089:19097	700841	1	True				
ANR	701168	Identifier	r		700841	0					
ANR	701169	IfStatement	if ( CKN_ON )		700841	1					
ANR	701170	Condition	CKN_ON	872:10:19118:19123	700841	0	True				
ANR	701171	Identifier	CKN_ON		700841	0					
ANR	701172	CompoundStatement		60:18:1512:1512	700841	1					
ANR	701173	ExpressionStatement	"r = add_opcode ( reg , OP_STATE_CHECK_PUSH )"	873:1:19129:19169	700841	0	True				
ANR	701174	AssignmentExpression	"r = add_opcode ( reg , OP_STATE_CHECK_PUSH )"		700841	0		=			
ANR	701175	Identifier	r		700841	0					
ANR	701176	CallExpression	"add_opcode ( reg , OP_STATE_CHECK_PUSH )"		700841	1					
ANR	701177	Callee	add_opcode		700841	0					
ANR	701178	Identifier	add_opcode		700841	0					
ANR	701179	ArgumentList	reg		700841	1					
ANR	701180	Argument	reg		700841	0					
ANR	701181	Identifier	reg		700841	0					
ANR	701182	Argument	OP_STATE_CHECK_PUSH		700841	1					
ANR	701183	Identifier	OP_STATE_CHECK_PUSH		700841	0					
ANR	701184	IfStatement	if ( r )		700841	1					
ANR	701185	Condition	r	874:5:19176:19176	700841	0	True				
ANR	701186	Identifier	r		700841	0					
ANR	701187	ReturnStatement	return r ;	874:8:19179:19187	700841	1	True				
ANR	701188	Identifier	r		700841	0					
ANR	701189	ExpressionStatement	"r = add_state_check_num ( reg , ckn )"	875:1:19190:19223	700841	2	True				
ANR	701190	AssignmentExpression	"r = add_state_check_num ( reg , ckn )"		700841	0		=			
ANR	701191	Identifier	r		700841	0					
ANR	701192	CallExpression	"add_state_check_num ( reg , ckn )"		700841	1					
ANR	701193	Callee	add_state_check_num		700841	0					
ANR	701194	Identifier	add_state_check_num		700841	0					
ANR	701195	ArgumentList	reg		700841	1					
ANR	701196	Argument	reg		700841	0					
ANR	701197	Identifier	reg		700841	0					
ANR	701198	Argument	ckn		700841	1					
ANR	701199	Identifier	ckn		700841	0					
ANR	701200	IfStatement	if ( r )		700841	3					
ANR	701201	Condition	r	876:5:19230:19230	700841	0	True				
ANR	701202	Identifier	r		700841	0					
ANR	701203	ReturnStatement	return r ;	876:8:19233:19241	700841	1	True				
ANR	701204	Identifier	r		700841	0					
ANR	701205	ExpressionStatement	"r = add_rel_addr ( reg , mod_tlen + SIZE_OP_JUMP )"	877:1:19244:19290	700841	4	True				
ANR	701206	AssignmentExpression	"r = add_rel_addr ( reg , mod_tlen + SIZE_OP_JUMP )"		700841	0		=			
ANR	701207	Identifier	r		700841	0					
ANR	701208	CallExpression	"add_rel_addr ( reg , mod_tlen + SIZE_OP_JUMP )"		700841	1					
ANR	701209	Callee	add_rel_addr		700841	0					
ANR	701210	Identifier	add_rel_addr		700841	0					
ANR	701211	ArgumentList	reg		700841	1					
ANR	701212	Argument	reg		700841	0					
ANR	701213	Identifier	reg		700841	0					
ANR	701214	Argument	mod_tlen + SIZE_OP_JUMP		700841	1					
ANR	701215	AdditiveExpression	mod_tlen + SIZE_OP_JUMP		700841	0		+			
ANR	701216	Identifier	mod_tlen		700841	0					
ANR	701217	Identifier	SIZE_OP_JUMP		700841	1					
ANR	701218	ElseStatement	else		700841	0					
ANR	701219	CompoundStatement		67:11:1697:1697	700841	0					
ANR	701220	ExpressionStatement	"r = add_opcode_rel_addr ( reg , OP_PUSH , mod_tlen + SIZE_OP_JUMP )"	880:1:19314:19376	700841	0	True				
ANR	701221	AssignmentExpression	"r = add_opcode_rel_addr ( reg , OP_PUSH , mod_tlen + SIZE_OP_JUMP )"		700841	0		=			
ANR	701222	Identifier	r		700841	0					
ANR	701223	CallExpression	"add_opcode_rel_addr ( reg , OP_PUSH , mod_tlen + SIZE_OP_JUMP )"		700841	1					
ANR	701224	Callee	add_opcode_rel_addr		700841	0					
ANR	701225	Identifier	add_opcode_rel_addr		700841	0					
ANR	701226	ArgumentList	reg		700841	1					
ANR	701227	Argument	reg		700841	0					
ANR	701228	Identifier	reg		700841	0					
ANR	701229	Argument	OP_PUSH		700841	1					
ANR	701230	Identifier	OP_PUSH		700841	0					
ANR	701231	Argument	mod_tlen + SIZE_OP_JUMP		700841	2					
ANR	701232	AdditiveExpression	mod_tlen + SIZE_OP_JUMP		700841	0		+			
ANR	701233	Identifier	mod_tlen		700841	0					
ANR	701234	Identifier	SIZE_OP_JUMP		700841	1					
ANR	701235	IfStatement	if ( r )		700841	2					
ANR	701236	Condition	r	882:10:19396:19396	700841	0	True				
ANR	701237	Identifier	r		700841	0					
ANR	701238	ReturnStatement	return r ;	882:13:19399:19407	700841	1	True				
ANR	701239	Identifier	r		700841	0					
ANR	701240	ExpressionStatement	"r = compile_tree_empty_check ( qn -> target , reg , empty_info )"	883:6:19415:19472	700841	3	True				
ANR	701241	AssignmentExpression	"r = compile_tree_empty_check ( qn -> target , reg , empty_info )"		700841	0		=			
ANR	701242	Identifier	r		700841	0					
ANR	701243	CallExpression	"compile_tree_empty_check ( qn -> target , reg , empty_info )"		700841	1					
ANR	701244	Callee	compile_tree_empty_check		700841	0					
ANR	701245	Identifier	compile_tree_empty_check		700841	0					
ANR	701246	ArgumentList	qn -> target		700841	1					
ANR	701247	Argument	qn -> target		700841	0					
ANR	701248	PtrMemberAccess	qn -> target		700841	0					
ANR	701249	Identifier	qn		700841	0					
ANR	701250	Identifier	target		700841	1					
ANR	701251	Argument	reg		700841	1					
ANR	701252	Identifier	reg		700841	0					
ANR	701253	Argument	empty_info		700841	2					
ANR	701254	Identifier	empty_info		700841	0					
ANR	701255	IfStatement	if ( r )		700841	4					
ANR	701256	Condition	r	884:10:19484:19484	700841	0	True				
ANR	701257	Identifier	r		700841	0					
ANR	701258	ReturnStatement	return r ;	884:13:19487:19495	700841	1	True				
ANR	701259	Identifier	r		700841	0					
ANR	701260	ExpressionStatement	"r = add_opcode_rel_addr ( reg , OP_JUMP , - ( mod_tlen + ( int ) SIZE_OP_JUMP + ( int ) ( CKN_ON ? SIZE_OP_STATE_CHECK_PUSH : SIZE_OP_PUSH ) ) )"	885:6:19503:19642	700841	5	True				
ANR	701261	AssignmentExpression	"r = add_opcode_rel_addr ( reg , OP_JUMP , - ( mod_tlen + ( int ) SIZE_OP_JUMP + ( int ) ( CKN_ON ? SIZE_OP_STATE_CHECK_PUSH : SIZE_OP_PUSH ) ) )"		700841	0		=			
ANR	701262	Identifier	r		700841	0					
ANR	701263	CallExpression	"add_opcode_rel_addr ( reg , OP_JUMP , - ( mod_tlen + ( int ) SIZE_OP_JUMP + ( int ) ( CKN_ON ? SIZE_OP_STATE_CHECK_PUSH : SIZE_OP_PUSH ) ) )"		700841	1					
ANR	701264	Callee	add_opcode_rel_addr		700841	0					
ANR	701265	Identifier	add_opcode_rel_addr		700841	0					
ANR	701266	ArgumentList	reg		700841	1					
ANR	701267	Argument	reg		700841	0					
ANR	701268	Identifier	reg		700841	0					
ANR	701269	Argument	OP_JUMP		700841	1					
ANR	701270	Identifier	OP_JUMP		700841	0					
ANR	701271	Argument	- ( mod_tlen + ( int ) SIZE_OP_JUMP + ( int ) ( CKN_ON ? SIZE_OP_STATE_CHECK_PUSH : SIZE_OP_PUSH ) )		700841	2					
ANR	701272	UnaryOperationExpression	- ( mod_tlen + ( int ) SIZE_OP_JUMP + ( int ) ( CKN_ON ? SIZE_OP_STATE_CHECK_PUSH : SIZE_OP_PUSH ) )		700841	0					
ANR	701273	UnaryOperator	-		700841	0					
ANR	701274	AdditiveExpression	mod_tlen + ( int ) SIZE_OP_JUMP + ( int ) ( CKN_ON ? SIZE_OP_STATE_CHECK_PUSH : SIZE_OP_PUSH )		700841	1		+			
ANR	701275	Identifier	mod_tlen		700841	0					
ANR	701276	AdditiveExpression	( int ) SIZE_OP_JUMP + ( int ) ( CKN_ON ? SIZE_OP_STATE_CHECK_PUSH : SIZE_OP_PUSH )		700841	1		+			
ANR	701277	CastExpression	( int ) SIZE_OP_JUMP		700841	0					
ANR	701278	CastTarget	int		700841	0					
ANR	701279	Identifier	SIZE_OP_JUMP		700841	1					
ANR	701280	CastExpression	( int ) ( CKN_ON ? SIZE_OP_STATE_CHECK_PUSH : SIZE_OP_PUSH )		700841	1					
ANR	701281	CastTarget	int		700841	0					
ANR	701282	ConditionalExpression	CKN_ON ? SIZE_OP_STATE_CHECK_PUSH : SIZE_OP_PUSH		700841	1					
ANR	701283	Condition	CKN_ON		700841	0					
ANR	701284	Identifier	CKN_ON		700841	0					
ANR	701285	Identifier	SIZE_OP_STATE_CHECK_PUSH		700841	1					
ANR	701286	Identifier	SIZE_OP_PUSH		700841	2					
ANR	701287	ElseStatement	else		700841	0					
ANR	701288	CompoundStatement		77:9:2045:2045	700841	0					
ANR	701289	IfStatement	if ( qn -> lower == 0 )		700841	0					
ANR	701290	Condition	qn -> lower == 0	890:10:19671:19684	700841	0	True				
ANR	701291	EqualityExpression	qn -> lower == 0		700841	0		==			
ANR	701292	PtrMemberAccess	qn -> lower		700841	0					
ANR	701293	Identifier	qn		700841	0					
ANR	701294	Identifier	lower		700841	1					
ANR	701295	PrimaryExpression	0		700841	1					
ANR	701296	CompoundStatement		78:26:2073:2073	700841	1					
ANR	701297	ExpressionStatement	"r = add_opcode_rel_addr ( reg , OP_JUMP , mod_tlen )"	891:1:19690:19737	700841	0	True				
ANR	701298	AssignmentExpression	"r = add_opcode_rel_addr ( reg , OP_JUMP , mod_tlen )"		700841	0		=			
ANR	701299	Identifier	r		700841	0					
ANR	701300	CallExpression	"add_opcode_rel_addr ( reg , OP_JUMP , mod_tlen )"		700841	1					
ANR	701301	Callee	add_opcode_rel_addr		700841	0					
ANR	701302	Identifier	add_opcode_rel_addr		700841	0					
ANR	701303	ArgumentList	reg		700841	1					
ANR	701304	Argument	reg		700841	0					
ANR	701305	Identifier	reg		700841	0					
ANR	701306	Argument	OP_JUMP		700841	1					
ANR	701307	Identifier	OP_JUMP		700841	0					
ANR	701308	Argument	mod_tlen		700841	2					
ANR	701309	Identifier	mod_tlen		700841	0					
ANR	701310	IfStatement	if ( r )		700841	1					
ANR	701311	Condition	r	892:5:19744:19744	700841	0	True				
ANR	701312	Identifier	r		700841	0					
ANR	701313	ReturnStatement	return r ;	892:8:19747:19755	700841	1	True				
ANR	701314	Identifier	r		700841	0					
ANR	701315	ExpressionStatement	"r = compile_tree_empty_check ( qn -> target , reg , empty_info )"	894:6:19771:19828	700841	1	True				
ANR	701316	AssignmentExpression	"r = compile_tree_empty_check ( qn -> target , reg , empty_info )"		700841	0		=			
ANR	701317	Identifier	r		700841	0					
ANR	701318	CallExpression	"compile_tree_empty_check ( qn -> target , reg , empty_info )"		700841	1					
ANR	701319	Callee	compile_tree_empty_check		700841	0					
ANR	701320	Identifier	compile_tree_empty_check		700841	0					
ANR	701321	ArgumentList	qn -> target		700841	1					
ANR	701322	Argument	qn -> target		700841	0					
ANR	701323	PtrMemberAccess	qn -> target		700841	0					
ANR	701324	Identifier	qn		700841	0					
ANR	701325	Identifier	target		700841	1					
ANR	701326	Argument	reg		700841	1					
ANR	701327	Identifier	reg		700841	0					
ANR	701328	Argument	empty_info		700841	2					
ANR	701329	Identifier	empty_info		700841	0					
ANR	701330	IfStatement	if ( r )		700841	2					
ANR	701331	Condition	r	895:10:19840:19840	700841	0	True				
ANR	701332	Identifier	r		700841	0					
ANR	701333	ReturnStatement	return r ;	895:13:19843:19851	700841	1	True				
ANR	701334	Identifier	r		700841	0					
ANR	701335	IfStatement	if ( CKN_ON )		700841	3					
ANR	701336	Condition	CKN_ON	896:10:19863:19868	700841	0	True				
ANR	701337	Identifier	CKN_ON		700841	0					
ANR	701338	CompoundStatement		84:18:2257:2257	700841	1					
ANR	701339	ExpressionStatement	"r = add_opcode ( reg , OP_STATE_CHECK_PUSH_OR_JUMP )"	897:1:19874:19922	700841	0	True				
ANR	701340	AssignmentExpression	"r = add_opcode ( reg , OP_STATE_CHECK_PUSH_OR_JUMP )"		700841	0		=			
ANR	701341	Identifier	r		700841	0					
ANR	701342	CallExpression	"add_opcode ( reg , OP_STATE_CHECK_PUSH_OR_JUMP )"		700841	1					
ANR	701343	Callee	add_opcode		700841	0					
ANR	701344	Identifier	add_opcode		700841	0					
ANR	701345	ArgumentList	reg		700841	1					
ANR	701346	Argument	reg		700841	0					
ANR	701347	Identifier	reg		700841	0					
ANR	701348	Argument	OP_STATE_CHECK_PUSH_OR_JUMP		700841	1					
ANR	701349	Identifier	OP_STATE_CHECK_PUSH_OR_JUMP		700841	0					
ANR	701350	IfStatement	if ( r )		700841	1					
ANR	701351	Condition	r	898:5:19929:19929	700841	0	True				
ANR	701352	Identifier	r		700841	0					
ANR	701353	ReturnStatement	return r ;	898:8:19932:19940	700841	1	True				
ANR	701354	Identifier	r		700841	0					
ANR	701355	ExpressionStatement	"r = add_state_check_num ( reg , ckn )"	899:1:19943:19976	700841	2	True				
ANR	701356	AssignmentExpression	"r = add_state_check_num ( reg , ckn )"		700841	0		=			
ANR	701357	Identifier	r		700841	0					
ANR	701358	CallExpression	"add_state_check_num ( reg , ckn )"		700841	1					
ANR	701359	Callee	add_state_check_num		700841	0					
ANR	701360	Identifier	add_state_check_num		700841	0					
ANR	701361	ArgumentList	reg		700841	1					
ANR	701362	Argument	reg		700841	0					
ANR	701363	Identifier	reg		700841	0					
ANR	701364	Argument	ckn		700841	1					
ANR	701365	Identifier	ckn		700841	0					
ANR	701366	IfStatement	if ( r )		700841	3					
ANR	701367	Condition	r	900:5:19983:19983	700841	0	True				
ANR	701368	Identifier	r		700841	0					
ANR	701369	ReturnStatement	return r ;	900:8:19986:19994	700841	1	True				
ANR	701370	Identifier	r		700841	0					
ANR	701371	ExpressionStatement	"r = add_rel_addr ( reg , - ( mod_tlen + ( int ) SIZE_OP_STATE_CHECK_PUSH_OR_JUMP ) )"	901:1:19997:20075	700841	4	True				
ANR	701372	AssignmentExpression	"r = add_rel_addr ( reg , - ( mod_tlen + ( int ) SIZE_OP_STATE_CHECK_PUSH_OR_JUMP ) )"		700841	0		=			
ANR	701373	Identifier	r		700841	0					
ANR	701374	CallExpression	"add_rel_addr ( reg , - ( mod_tlen + ( int ) SIZE_OP_STATE_CHECK_PUSH_OR_JUMP ) )"		700841	1					
ANR	701375	Callee	add_rel_addr		700841	0					
ANR	701376	Identifier	add_rel_addr		700841	0					
ANR	701377	ArgumentList	reg		700841	1					
ANR	701378	Argument	reg		700841	0					
ANR	701379	Identifier	reg		700841	0					
ANR	701380	Argument	- ( mod_tlen + ( int ) SIZE_OP_STATE_CHECK_PUSH_OR_JUMP )		700841	1					
ANR	701381	UnaryOperationExpression	- ( mod_tlen + ( int ) SIZE_OP_STATE_CHECK_PUSH_OR_JUMP )		700841	0					
ANR	701382	UnaryOperator	-		700841	0					
ANR	701383	AdditiveExpression	mod_tlen + ( int ) SIZE_OP_STATE_CHECK_PUSH_OR_JUMP		700841	1		+			
ANR	701384	Identifier	mod_tlen		700841	0					
ANR	701385	CastExpression	( int ) SIZE_OP_STATE_CHECK_PUSH_OR_JUMP		700841	1					
ANR	701386	CastTarget	int		700841	0					
ANR	701387	Identifier	SIZE_OP_STATE_CHECK_PUSH_OR_JUMP		700841	1					
ANR	701388	ElseStatement	else		700841	0					
ANR	701389	ExpressionStatement	"r = add_opcode_rel_addr ( reg , OP_PUSH , - ( mod_tlen + ( int ) SIZE_OP_PUSH ) )"	905:1:20097:20168	700841	0	True				
ANR	701390	AssignmentExpression	"r = add_opcode_rel_addr ( reg , OP_PUSH , - ( mod_tlen + ( int ) SIZE_OP_PUSH ) )"		700841	0		=			
ANR	701391	Identifier	r		700841	0					
ANR	701392	CallExpression	"add_opcode_rel_addr ( reg , OP_PUSH , - ( mod_tlen + ( int ) SIZE_OP_PUSH ) )"		700841	1					
ANR	701393	Callee	add_opcode_rel_addr		700841	0					
ANR	701394	Identifier	add_opcode_rel_addr		700841	0					
ANR	701395	ArgumentList	reg		700841	1					
ANR	701396	Argument	reg		700841	0					
ANR	701397	Identifier	reg		700841	0					
ANR	701398	Argument	OP_PUSH		700841	1					
ANR	701399	Identifier	OP_PUSH		700841	0					
ANR	701400	Argument	- ( mod_tlen + ( int ) SIZE_OP_PUSH )		700841	2					
ANR	701401	UnaryOperationExpression	- ( mod_tlen + ( int ) SIZE_OP_PUSH )		700841	0					
ANR	701402	UnaryOperator	-		700841	0					
ANR	701403	AdditiveExpression	mod_tlen + ( int ) SIZE_OP_PUSH		700841	1		+			
ANR	701404	Identifier	mod_tlen		700841	0					
ANR	701405	CastExpression	( int ) SIZE_OP_PUSH		700841	1					
ANR	701406	CastTarget	int		700841	0					
ANR	701407	Identifier	SIZE_OP_PUSH		700841	1					
ANR	701408	ElseStatement	else		700841	0					
ANR	701409	IfStatement	if ( qn -> upper == 0 )		700841	0					
ANR	701410	Condition	qn -> upper == 0	908:11:20191:20204	700841	0	True				
ANR	701411	EqualityExpression	qn -> upper == 0		700841	0		==			
ANR	701412	PtrMemberAccess	qn -> upper		700841	0					
ANR	701413	Identifier	qn		700841	0					
ANR	701414	Identifier	upper		700841	1					
ANR	701415	PrimaryExpression	0		700841	1					
ANR	701416	CompoundStatement		96:27:2593:2593	700841	1					
ANR	701417	IfStatement	if ( qn -> is_refered != 0 )		700841	0					
ANR	701418	Condition	qn -> is_refered != 0	909:8:20217:20235	700841	0	True				
ANR	701419	EqualityExpression	qn -> is_refered != 0		700841	0		!=			
ANR	701420	PtrMemberAccess	qn -> is_refered		700841	0					
ANR	701421	Identifier	qn		700841	0					
ANR	701422	Identifier	is_refered		700841	1					
ANR	701423	PrimaryExpression	0		700841	1					
ANR	701424	CompoundStatement		97:29:2624:2624	700841	1					
ANR	701425	ExpressionStatement	"r = add_opcode_rel_addr ( reg , OP_JUMP , tlen )"	910:6:20266:20309	700841	0	True				
ANR	701426	AssignmentExpression	"r = add_opcode_rel_addr ( reg , OP_JUMP , tlen )"		700841	0		=			
ANR	701427	Identifier	r		700841	0					
ANR	701428	CallExpression	"add_opcode_rel_addr ( reg , OP_JUMP , tlen )"		700841	1					
ANR	701429	Callee	add_opcode_rel_addr		700841	0					
ANR	701430	Identifier	add_opcode_rel_addr		700841	0					
ANR	701431	ArgumentList	reg		700841	1					
ANR	701432	Argument	reg		700841	0					
ANR	701433	Identifier	reg		700841	0					
ANR	701434	Argument	OP_JUMP		700841	1					
ANR	701435	Identifier	OP_JUMP		700841	0					
ANR	701436	Argument	tlen		700841	2					
ANR	701437	Identifier	tlen		700841	0					
ANR	701438	IfStatement	if ( r )		700841	1					
ANR	701439	Condition	r	911:10:20321:20321	700841	0	True				
ANR	701440	Identifier	r		700841	0					
ANR	701441	ReturnStatement	return r ;	911:13:20324:20332	700841	1	True				
ANR	701442	Identifier	r		700841	0					
ANR	701443	ExpressionStatement	"r = compile_tree ( qn -> target , reg )"	912:6:20340:20373	700841	2	True				
ANR	701444	AssignmentExpression	"r = compile_tree ( qn -> target , reg )"		700841	0		=			
ANR	701445	Identifier	r		700841	0					
ANR	701446	CallExpression	"compile_tree ( qn -> target , reg )"		700841	1					
ANR	701447	Callee	compile_tree		700841	0					
ANR	701448	Identifier	compile_tree		700841	0					
ANR	701449	ArgumentList	qn -> target		700841	1					
ANR	701450	Argument	qn -> target		700841	0					
ANR	701451	PtrMemberAccess	qn -> target		700841	0					
ANR	701452	Identifier	qn		700841	0					
ANR	701453	Identifier	target		700841	1					
ANR	701454	Argument	reg		700841	1					
ANR	701455	Identifier	reg		700841	0					
ANR	701456	ElseStatement	else		700841	0					
ANR	701457	ExpressionStatement	r = 0	915:6:20396:20401	700841	0	True				
ANR	701458	AssignmentExpression	r = 0		700841	0		=			
ANR	701459	Identifier	r		700841	0					
ANR	701460	PrimaryExpression	0		700841	1					
ANR	701461	ElseStatement	else		700841	0					
ANR	701462	IfStatement	if ( qn -> upper == 1 && qn -> greedy )		700841	0					
ANR	701463	Condition	qn -> upper == 1 && qn -> greedy	917:11:20418:20445	700841	0	True				
ANR	701464	AndExpression	qn -> upper == 1 && qn -> greedy		700841	0		&&			
ANR	701465	EqualityExpression	qn -> upper == 1		700841	0		==			
ANR	701466	PtrMemberAccess	qn -> upper		700841	0					
ANR	701467	Identifier	qn		700841	0					
ANR	701468	Identifier	upper		700841	1					
ANR	701469	PrimaryExpression	1		700841	1					
ANR	701470	PtrMemberAccess	qn -> greedy		700841	1					
ANR	701471	Identifier	qn		700841	0					
ANR	701472	Identifier	greedy		700841	1					
ANR	701473	CompoundStatement		105:41:2834:2834	700841	1					
ANR	701474	IfStatement	if ( qn -> lower == 0 )		700841	0					
ANR	701475	Condition	qn -> lower == 0	918:8:20458:20471	700841	0	True				
ANR	701476	EqualityExpression	qn -> lower == 0		700841	0		==			
ANR	701477	PtrMemberAccess	qn -> lower		700841	0					
ANR	701478	Identifier	qn		700841	0					
ANR	701479	Identifier	lower		700841	1					
ANR	701480	PrimaryExpression	0		700841	1					
ANR	701481	CompoundStatement		106:24:2860:2860	700841	1					
ANR	701482	IfStatement	if ( CKN_ON )		700841	0					
ANR	701483	Condition	CKN_ON	919:10:20486:20491	700841	0	True				
ANR	701484	Identifier	CKN_ON		700841	0					
ANR	701485	CompoundStatement		107:18:2880:2880	700841	1					
ANR	701486	ExpressionStatement	"r = add_opcode ( reg , OP_STATE_CHECK_PUSH )"	920:1:20497:20537	700841	0	True				
ANR	701487	AssignmentExpression	"r = add_opcode ( reg , OP_STATE_CHECK_PUSH )"		700841	0		=			
ANR	701488	Identifier	r		700841	0					
ANR	701489	CallExpression	"add_opcode ( reg , OP_STATE_CHECK_PUSH )"		700841	1					
ANR	701490	Callee	add_opcode		700841	0					
ANR	701491	Identifier	add_opcode		700841	0					
ANR	701492	ArgumentList	reg		700841	1					
ANR	701493	Argument	reg		700841	0					
ANR	701494	Identifier	reg		700841	0					
ANR	701495	Argument	OP_STATE_CHECK_PUSH		700841	1					
ANR	701496	Identifier	OP_STATE_CHECK_PUSH		700841	0					
ANR	701497	IfStatement	if ( r )		700841	1					
ANR	701498	Condition	r	921:5:20544:20544	700841	0	True				
ANR	701499	Identifier	r		700841	0					
ANR	701500	ReturnStatement	return r ;	921:8:20547:20555	700841	1	True				
ANR	701501	Identifier	r		700841	0					
ANR	701502	ExpressionStatement	"r = add_state_check_num ( reg , ckn )"	922:1:20558:20591	700841	2	True				
ANR	701503	AssignmentExpression	"r = add_state_check_num ( reg , ckn )"		700841	0		=			
ANR	701504	Identifier	r		700841	0					
ANR	701505	CallExpression	"add_state_check_num ( reg , ckn )"		700841	1					
ANR	701506	Callee	add_state_check_num		700841	0					
ANR	701507	Identifier	add_state_check_num		700841	0					
ANR	701508	ArgumentList	reg		700841	1					
ANR	701509	Argument	reg		700841	0					
ANR	701510	Identifier	reg		700841	0					
ANR	701511	Argument	ckn		700841	1					
ANR	701512	Identifier	ckn		700841	0					
ANR	701513	IfStatement	if ( r )		700841	3					
ANR	701514	Condition	r	923:5:20598:20598	700841	0	True				
ANR	701515	Identifier	r		700841	0					
ANR	701516	ReturnStatement	return r ;	923:8:20601:20609	700841	1	True				
ANR	701517	Identifier	r		700841	0					
ANR	701518	ExpressionStatement	"r = add_rel_addr ( reg , tlen )"	924:1:20612:20639	700841	4	True				
ANR	701519	AssignmentExpression	"r = add_rel_addr ( reg , tlen )"		700841	0		=			
ANR	701520	Identifier	r		700841	0					
ANR	701521	CallExpression	"add_rel_addr ( reg , tlen )"		700841	1					
ANR	701522	Callee	add_rel_addr		700841	0					
ANR	701523	Identifier	add_rel_addr		700841	0					
ANR	701524	ArgumentList	reg		700841	1					
ANR	701525	Argument	reg		700841	0					
ANR	701526	Identifier	reg		700841	0					
ANR	701527	Argument	tlen		700841	1					
ANR	701528	Identifier	tlen		700841	0					
ANR	701529	ElseStatement	else		700841	0					
ANR	701530	CompoundStatement		114:11:3046:3046	700841	0					
ANR	701531	ExpressionStatement	"r = add_opcode_rel_addr ( reg , OP_PUSH , tlen )"	927:1:20663:20706	700841	0	True				
ANR	701532	AssignmentExpression	"r = add_opcode_rel_addr ( reg , OP_PUSH , tlen )"		700841	0		=			
ANR	701533	Identifier	r		700841	0					
ANR	701534	CallExpression	"add_opcode_rel_addr ( reg , OP_PUSH , tlen )"		700841	1					
ANR	701535	Callee	add_opcode_rel_addr		700841	0					
ANR	701536	Identifier	add_opcode_rel_addr		700841	0					
ANR	701537	ArgumentList	reg		700841	1					
ANR	701538	Argument	reg		700841	0					
ANR	701539	Identifier	reg		700841	0					
ANR	701540	Argument	OP_PUSH		700841	1					
ANR	701541	Identifier	OP_PUSH		700841	0					
ANR	701542	Argument	tlen		700841	2					
ANR	701543	Identifier	tlen		700841	0					
ANR	701544	IfStatement	if ( r )		700841	1					
ANR	701545	Condition	r	929:10:20726:20726	700841	0	True				
ANR	701546	Identifier	r		700841	0					
ANR	701547	ReturnStatement	return r ;	929:13:20729:20737	700841	1	True				
ANR	701548	Identifier	r		700841	0					
ANR	701549	ExpressionStatement	"r = compile_tree ( qn -> target , reg )"	932:4:20750:20783	700841	1	True				
ANR	701550	AssignmentExpression	"r = compile_tree ( qn -> target , reg )"		700841	0		=			
ANR	701551	Identifier	r		700841	0					
ANR	701552	CallExpression	"compile_tree ( qn -> target , reg )"		700841	1					
ANR	701553	Callee	compile_tree		700841	0					
ANR	701554	Identifier	compile_tree		700841	0					
ANR	701555	ArgumentList	qn -> target		700841	1					
ANR	701556	Argument	qn -> target		700841	0					
ANR	701557	PtrMemberAccess	qn -> target		700841	0					
ANR	701558	Identifier	qn		700841	0					
ANR	701559	Identifier	target		700841	1					
ANR	701560	Argument	reg		700841	1					
ANR	701561	Identifier	reg		700841	0					
ANR	701562	ElseStatement	else		700841	0					
ANR	701563	IfStatement	if ( ! qn -> greedy && qn -> upper == 1 && qn -> lower == 0 )		700841	0					
ANR	701564	Condition	! qn -> greedy && qn -> upper == 1 && qn -> lower == 0	934:11:20800:20846	700841	0	True				
ANR	701565	AndExpression	! qn -> greedy && qn -> upper == 1 && qn -> lower == 0		700841	0		&&			
ANR	701566	UnaryOperationExpression	! qn -> greedy		700841	0					
ANR	701567	UnaryOperator	!		700841	0					
ANR	701568	PtrMemberAccess	qn -> greedy		700841	1					
ANR	701569	Identifier	qn		700841	0					
ANR	701570	Identifier	greedy		700841	1					
ANR	701571	AndExpression	qn -> upper == 1 && qn -> lower == 0		700841	1		&&			
ANR	701572	EqualityExpression	qn -> upper == 1		700841	0		==			
ANR	701573	PtrMemberAccess	qn -> upper		700841	0					
ANR	701574	Identifier	qn		700841	0					
ANR	701575	Identifier	upper		700841	1					
ANR	701576	PrimaryExpression	1		700841	1					
ANR	701577	EqualityExpression	qn -> lower == 0		700841	1		==			
ANR	701578	PtrMemberAccess	qn -> lower		700841	0					
ANR	701579	Identifier	qn		700841	0					
ANR	701580	Identifier	lower		700841	1					
ANR	701581	PrimaryExpression	0		700841	1					
ANR	701582	CompoundStatement		122:60:3235:3235	700841	1					
ANR	701583	IfStatement	if ( CKN_ON )		700841	0					
ANR	701584	Condition	CKN_ON	935:8:20870:20875	700841	0	True				
ANR	701585	Identifier	CKN_ON		700841	0					
ANR	701586	CompoundStatement		123:16:3264:3264	700841	1					
ANR	701587	ExpressionStatement	"r = add_opcode ( reg , OP_STATE_CHECK_PUSH )"	936:6:20886:20926	700841	0	True				
ANR	701588	AssignmentExpression	"r = add_opcode ( reg , OP_STATE_CHECK_PUSH )"		700841	0		=			
ANR	701589	Identifier	r		700841	0					
ANR	701590	CallExpression	"add_opcode ( reg , OP_STATE_CHECK_PUSH )"		700841	1					
ANR	701591	Callee	add_opcode		700841	0					
ANR	701592	Identifier	add_opcode		700841	0					
ANR	701593	ArgumentList	reg		700841	1					
ANR	701594	Argument	reg		700841	0					
ANR	701595	Identifier	reg		700841	0					
ANR	701596	Argument	OP_STATE_CHECK_PUSH		700841	1					
ANR	701597	Identifier	OP_STATE_CHECK_PUSH		700841	0					
ANR	701598	IfStatement	if ( r )		700841	1					
ANR	701599	Condition	r	937:10:20938:20938	700841	0	True				
ANR	701600	Identifier	r		700841	0					
ANR	701601	ReturnStatement	return r ;	937:13:20941:20949	700841	1	True				
ANR	701602	Identifier	r		700841	0					
ANR	701603	ExpressionStatement	"r = add_state_check_num ( reg , ckn )"	938:6:20957:20990	700841	2	True				
ANR	701604	AssignmentExpression	"r = add_state_check_num ( reg , ckn )"		700841	0		=			
ANR	701605	Identifier	r		700841	0					
ANR	701606	CallExpression	"add_state_check_num ( reg , ckn )"		700841	1					
ANR	701607	Callee	add_state_check_num		700841	0					
ANR	701608	Identifier	add_state_check_num		700841	0					
ANR	701609	ArgumentList	reg		700841	1					
ANR	701610	Argument	reg		700841	0					
ANR	701611	Identifier	reg		700841	0					
ANR	701612	Argument	ckn		700841	1					
ANR	701613	Identifier	ckn		700841	0					
ANR	701614	IfStatement	if ( r )		700841	3					
ANR	701615	Condition	r	939:10:21002:21002	700841	0	True				
ANR	701616	Identifier	r		700841	0					
ANR	701617	ReturnStatement	return r ;	939:13:21005:21013	700841	1	True				
ANR	701618	Identifier	r		700841	0					
ANR	701619	ExpressionStatement	"r = add_rel_addr ( reg , SIZE_OP_JUMP )"	940:6:21021:21056	700841	4	True				
ANR	701620	AssignmentExpression	"r = add_rel_addr ( reg , SIZE_OP_JUMP )"		700841	0		=			
ANR	701621	Identifier	r		700841	0					
ANR	701622	CallExpression	"add_rel_addr ( reg , SIZE_OP_JUMP )"		700841	1					
ANR	701623	Callee	add_rel_addr		700841	0					
ANR	701624	Identifier	add_rel_addr		700841	0					
ANR	701625	ArgumentList	reg		700841	1					
ANR	701626	Argument	reg		700841	0					
ANR	701627	Identifier	reg		700841	0					
ANR	701628	Argument	SIZE_OP_JUMP		700841	1					
ANR	701629	Identifier	SIZE_OP_JUMP		700841	0					
ANR	701630	ElseStatement	else		700841	0					
ANR	701631	CompoundStatement		130:9:3459:3459	700841	0					
ANR	701632	ExpressionStatement	"r = add_opcode_rel_addr ( reg , OP_PUSH , SIZE_OP_JUMP )"	943:6:21081:21132	700841	0	True				
ANR	701633	AssignmentExpression	"r = add_opcode_rel_addr ( reg , OP_PUSH , SIZE_OP_JUMP )"		700841	0		=			
ANR	701634	Identifier	r		700841	0					
ANR	701635	CallExpression	"add_opcode_rel_addr ( reg , OP_PUSH , SIZE_OP_JUMP )"		700841	1					
ANR	701636	Callee	add_opcode_rel_addr		700841	0					
ANR	701637	Identifier	add_opcode_rel_addr		700841	0					
ANR	701638	ArgumentList	reg		700841	1					
ANR	701639	Argument	reg		700841	0					
ANR	701640	Identifier	reg		700841	0					
ANR	701641	Argument	OP_PUSH		700841	1					
ANR	701642	Identifier	OP_PUSH		700841	0					
ANR	701643	Argument	SIZE_OP_JUMP		700841	2					
ANR	701644	Identifier	SIZE_OP_JUMP		700841	0					
ANR	701645	IfStatement	if ( r )		700841	1					
ANR	701646	Condition	r	946:8:21149:21149	700841	0	True				
ANR	701647	Identifier	r		700841	0					
ANR	701648	ReturnStatement	return r ;	946:11:21152:21160	700841	1	True				
ANR	701649	Identifier	r		700841	0					
ANR	701650	ExpressionStatement	"r = add_opcode_rel_addr ( reg , OP_JUMP , tlen )"	947:4:21166:21209	700841	2	True				
ANR	701651	AssignmentExpression	"r = add_opcode_rel_addr ( reg , OP_JUMP , tlen )"		700841	0		=			
ANR	701652	Identifier	r		700841	0					
ANR	701653	CallExpression	"add_opcode_rel_addr ( reg , OP_JUMP , tlen )"		700841	1					
ANR	701654	Callee	add_opcode_rel_addr		700841	0					
ANR	701655	Identifier	add_opcode_rel_addr		700841	0					
ANR	701656	ArgumentList	reg		700841	1					
ANR	701657	Argument	reg		700841	0					
ANR	701658	Identifier	reg		700841	0					
ANR	701659	Argument	OP_JUMP		700841	1					
ANR	701660	Identifier	OP_JUMP		700841	0					
ANR	701661	Argument	tlen		700841	2					
ANR	701662	Identifier	tlen		700841	0					
ANR	701663	IfStatement	if ( r )		700841	3					
ANR	701664	Condition	r	948:8:21219:21219	700841	0	True				
ANR	701665	Identifier	r		700841	0					
ANR	701666	ReturnStatement	return r ;	948:11:21222:21230	700841	1	True				
ANR	701667	Identifier	r		700841	0					
ANR	701668	ExpressionStatement	"r = compile_tree ( qn -> target , reg )"	949:4:21236:21269	700841	4	True				
ANR	701669	AssignmentExpression	"r = compile_tree ( qn -> target , reg )"		700841	0		=			
ANR	701670	Identifier	r		700841	0					
ANR	701671	CallExpression	"compile_tree ( qn -> target , reg )"		700841	1					
ANR	701672	Callee	compile_tree		700841	0					
ANR	701673	Identifier	compile_tree		700841	0					
ANR	701674	ArgumentList	qn -> target		700841	1					
ANR	701675	Argument	qn -> target		700841	0					
ANR	701676	PtrMemberAccess	qn -> target		700841	0					
ANR	701677	Identifier	qn		700841	0					
ANR	701678	Identifier	target		700841	1					
ANR	701679	Argument	reg		700841	1					
ANR	701680	Identifier	reg		700841	0					
ANR	701681	ElseStatement	else		700841	0					
ANR	701682	CompoundStatement		139:7:3668:3668	700841	0					
ANR	701683	ExpressionStatement	"r = compile_range_repeat_node ( qn , mod_tlen , empty_info , reg )"	952:4:21288:21348	700841	0	True				
ANR	701684	AssignmentExpression	"r = compile_range_repeat_node ( qn , mod_tlen , empty_info , reg )"		700841	0		=			
ANR	701685	Identifier	r		700841	0					
ANR	701686	CallExpression	"compile_range_repeat_node ( qn , mod_tlen , empty_info , reg )"		700841	1					
ANR	701687	Callee	compile_range_repeat_node		700841	0					
ANR	701688	Identifier	compile_range_repeat_node		700841	0					
ANR	701689	ArgumentList	qn		700841	1					
ANR	701690	Argument	qn		700841	0					
ANR	701691	Identifier	qn		700841	0					
ANR	701692	Argument	mod_tlen		700841	1					
ANR	701693	Identifier	mod_tlen		700841	0					
ANR	701694	Argument	empty_info		700841	2					
ANR	701695	Identifier	empty_info		700841	0					
ANR	701696	Argument	reg		700841	3					
ANR	701697	Identifier	reg		700841	0					
ANR	701698	IfStatement	if ( CKN_ON )		700841	1					
ANR	701699	Condition	CKN_ON	953:8:21358:21363	700841	0	True				
ANR	701700	Identifier	CKN_ON		700841	0					
ANR	701701	CompoundStatement		141:16:3752:3752	700841	1					
ANR	701702	IfStatement	if ( r )		700841	0					
ANR	701703	Condition	r	954:10:21378:21378	700841	0	True				
ANR	701704	Identifier	r		700841	0					
ANR	701705	ReturnStatement	return r ;	954:13:21381:21389	700841	1	True				
ANR	701706	Identifier	r		700841	0					
ANR	701707	ExpressionStatement	"r = add_opcode ( reg , OP_STATE_CHECK )"	955:6:21397:21432	700841	1	True				
ANR	701708	AssignmentExpression	"r = add_opcode ( reg , OP_STATE_CHECK )"		700841	0		=			
ANR	701709	Identifier	r		700841	0					
ANR	701710	CallExpression	"add_opcode ( reg , OP_STATE_CHECK )"		700841	1					
ANR	701711	Callee	add_opcode		700841	0					
ANR	701712	Identifier	add_opcode		700841	0					
ANR	701713	ArgumentList	reg		700841	1					
ANR	701714	Argument	reg		700841	0					
ANR	701715	Identifier	reg		700841	0					
ANR	701716	Argument	OP_STATE_CHECK		700841	1					
ANR	701717	Identifier	OP_STATE_CHECK		700841	0					
ANR	701718	IfStatement	if ( r )		700841	2					
ANR	701719	Condition	r	956:10:21444:21444	700841	0	True				
ANR	701720	Identifier	r		700841	0					
ANR	701721	ReturnStatement	return r ;	956:13:21447:21455	700841	1	True				
ANR	701722	Identifier	r		700841	0					
ANR	701723	ExpressionStatement	"r = add_state_check_num ( reg , ckn )"	957:6:21463:21496	700841	3	True				
ANR	701724	AssignmentExpression	"r = add_state_check_num ( reg , ckn )"		700841	0		=			
ANR	701725	Identifier	r		700841	0					
ANR	701726	CallExpression	"add_state_check_num ( reg , ckn )"		700841	1					
ANR	701727	Callee	add_state_check_num		700841	0					
ANR	701728	Identifier	add_state_check_num		700841	0					
ANR	701729	ArgumentList	reg		700841	1					
ANR	701730	Argument	reg		700841	0					
ANR	701731	Identifier	reg		700841	0					
ANR	701732	Argument	ckn		700841	1					
ANR	701733	Identifier	ckn		700841	0					
ANR	701734	ReturnStatement	return r ;	960:2:21510:21518	700841	10	True				
ANR	701735	Identifier	r		700841	0					
ANR	701736	ReturnType	static int		700841	1					
ANR	701737	Identifier	compile_quantifier_node		700841	2					
ANR	701738	ParameterList	"QtfrNode * qn , regex_t * reg"		700841	3					
ANR	701739	Parameter	QtfrNode * qn	812:24:17585:17596	700841	0	True				
ANR	701740	ParameterType	QtfrNode *		700841	0					
ANR	701741	Identifier	qn		700841	1					
ANR	701742	Parameter	regex_t * reg	812:38:17599:17610	700841	1	True				
ANR	701743	ParameterType	regex_t *		700841	0					
ANR	701744	Identifier	reg		700841	1					
ANR	701745	CFGEntryNode	ENTRY		700841		True				
ANR	701746	CFGExitNode	EXIT		700841		True				
ANR	701747	Symbol	OP_ANYCHAR_STAR_PEEK_NEXT		700841						
ANR	701748	Symbol	compile_range_repeat_node		700841						
ANR	701749	Symbol	ckn		700841						
ANR	701750	Symbol	OP_STATE_CHECK_ANYCHAR_ML_STAR		700841						
ANR	701751	Symbol	OP_ANYCHAR_ML_STAR_PEEK_NEXT		700841						
ANR	701752	Symbol	reg		700841						
ANR	701753	Symbol	reg -> options		700841						
ANR	701754	Symbol	tlen		700841						
ANR	701755	Symbol	OP_ANYCHAR_STAR		700841						
ANR	701756	Symbol	IS_REPEAT_INFINITE		700841						
ANR	701757	Symbol	add_opcode		700841						
ANR	701758	Symbol	SIZE_OP_NULL_CHECK_START		700841						
ANR	701759	Symbol	qn		700841						
ANR	701760	Symbol	SIZE_OP_JUMP		700841						
ANR	701761	Symbol	OP_JUMP		700841						
ANR	701762	Symbol	OP_ANYCHAR_ML_STAR		700841						
ANR	701763	Symbol	NSTR		700841						
ANR	701764	Symbol	* NSTR		700841						
ANR	701765	Symbol	qn -> target		700841						
ANR	701766	Symbol	qn -> upper		700841						
ANR	701767	Symbol	qn -> is_refered		700841						
ANR	701768	Symbol	NSTR ( qn -> next_head_exact ) -> s		700841						
ANR	701769	Symbol	empty_info		700841						
ANR	701770	Symbol	SIZE_OP_STATE_CHECK_PUSH		700841						
ANR	701771	Symbol	add_rel_addr		700841						
ANR	701772	Symbol	* qn		700841						
ANR	701773	Symbol	qn -> target_empty_info		700841						
ANR	701774	Symbol	add_bytes		700841						
ANR	701775	Symbol	qn -> greedy		700841						
ANR	701776	Symbol	CKN_ON		700841						
ANR	701777	Symbol	IS_NOT_NULL		700841						
ANR	701778	Symbol	infinite		700841						
ANR	701779	Symbol	compile_tree_n_times		700841						
ANR	701780	Symbol	OP_PUSH		700841						
ANR	701781	Symbol	compile_tree_empty_check		700841						
ANR	701782	Symbol	qn -> next_head_exact		700841						
ANR	701783	Symbol	SIZE_OP_NULL_CHECK_END		700841						
ANR	701784	Symbol	OP_STATE_CHECK_ANYCHAR_STAR		700841						
ANR	701785	Symbol	qn -> lower		700841						
ANR	701786	Symbol	reg -> num_comb_exp_check		700841						
ANR	701787	Symbol	OP_STATE_CHECK_PUSH_OR_JUMP		700841						
ANR	701788	Symbol	add_opcode_rel_addr		700841						
ANR	701789	Symbol	compile_length_tree		700841						
ANR	701790	Symbol	SIZE_OP_STATE_CHECK_PUSH_OR_JUMP		700841						
ANR	701791	Symbol	qn -> comb_exp_check_num		700841						
ANR	701792	Symbol	SIZE_OP_PUSH		700841						
ANR	701793	Symbol	is_anychar_star_quantifier		700841						
ANR	701794	Symbol	OP_STATE_CHECK_PUSH		700841						
ANR	701795	Symbol	OP_STATE_CHECK		700841						
ANR	701796	Symbol	r		700841						
ANR	701797	Symbol	compile_tree		700841						
ANR	701798	Symbol	mod_tlen		700841						
ANR	701799	Symbol	IS_MULTILINE		700841						
ANR	701800	Symbol	add_state_check_num		700841						
ANR	701801	Symbol	* reg		700841						
ANR	701802	Function	compile_length_quantifier_node	965:0:21568:23467							
ANR	701803	FunctionDef	"compile_length_quantifier_node (QtfrNode * qn , regex_t * reg)"		701802	0					
ANR	701804	CompoundStatement		967:0:21638:23467	701802	0					
ANR	701805	IdentifierDeclStatement	"int len , mod_tlen ;"	968:2:21642:21659	701802	0	True				
ANR	701806	IdentifierDecl	len		701802	0					
ANR	701807	IdentifierDeclType	int		701802	0					
ANR	701808	Identifier	len		701802	1					
ANR	701809	IdentifierDecl	mod_tlen		701802	1					
ANR	701810	IdentifierDeclType	int		701802	0					
ANR	701811	Identifier	mod_tlen		701802	1					
ANR	701812	IdentifierDeclStatement	int infinite = IS_REPEAT_INFINITE ( qn -> upper ) ;	969:2:21663:21707	701802	1	True				
ANR	701813	IdentifierDecl	infinite = IS_REPEAT_INFINITE ( qn -> upper )		701802	0					
ANR	701814	IdentifierDeclType	int		701802	0					
ANR	701815	Identifier	infinite		701802	1					
ANR	701816	AssignmentExpression	infinite = IS_REPEAT_INFINITE ( qn -> upper )		701802	2		=			
ANR	701817	Identifier	infinite		701802	0					
ANR	701818	CallExpression	IS_REPEAT_INFINITE ( qn -> upper )		701802	1					
ANR	701819	Callee	IS_REPEAT_INFINITE		701802	0					
ANR	701820	Identifier	IS_REPEAT_INFINITE		701802	0					
ANR	701821	ArgumentList	qn -> upper		701802	1					
ANR	701822	Argument	qn -> upper		701802	0					
ANR	701823	PtrMemberAccess	qn -> upper		701802	0					
ANR	701824	Identifier	qn		701802	0					
ANR	701825	Identifier	upper		701802	1					
ANR	701826	IdentifierDeclStatement	int empty_info = qn -> target_empty_info ;	970:2:21711:21749	701802	2	True				
ANR	701827	IdentifierDecl	empty_info = qn -> target_empty_info		701802	0					
ANR	701828	IdentifierDeclType	int		701802	0					
ANR	701829	Identifier	empty_info		701802	1					
ANR	701830	AssignmentExpression	empty_info = qn -> target_empty_info		701802	2		=			
ANR	701831	Identifier	empty_info		701802	0					
ANR	701832	PtrMemberAccess	qn -> target_empty_info		701802	1					
ANR	701833	Identifier	qn		701802	0					
ANR	701834	Identifier	target_empty_info		701802	1					
ANR	701835	IdentifierDeclStatement	"int tlen = compile_length_tree ( qn -> target , reg ) ;"	971:2:21753:21800	701802	3	True				
ANR	701836	IdentifierDecl	"tlen = compile_length_tree ( qn -> target , reg )"		701802	0					
ANR	701837	IdentifierDeclType	int		701802	0					
ANR	701838	Identifier	tlen		701802	1					
ANR	701839	AssignmentExpression	"tlen = compile_length_tree ( qn -> target , reg )"		701802	2		=			
ANR	701840	Identifier	tlen		701802	0					
ANR	701841	CallExpression	"compile_length_tree ( qn -> target , reg )"		701802	1					
ANR	701842	Callee	compile_length_tree		701802	0					
ANR	701843	Identifier	compile_length_tree		701802	0					
ANR	701844	ArgumentList	qn -> target		701802	1					
ANR	701845	Argument	qn -> target		701802	0					
ANR	701846	PtrMemberAccess	qn -> target		701802	0					
ANR	701847	Identifier	qn		701802	0					
ANR	701848	Identifier	target		701802	1					
ANR	701849	Argument	reg		701802	1					
ANR	701850	Identifier	reg		701802	0					
ANR	701851	IfStatement	if ( tlen < 0 )		701802	4					
ANR	701852	Condition	tlen < 0	973:6:21809:21816	701802	0	True				
ANR	701853	RelationalExpression	tlen < 0		701802	0		<			
ANR	701854	Identifier	tlen		701802	0					
ANR	701855	PrimaryExpression	0		701802	1					
ANR	701856	ReturnStatement	return tlen ;	973:16:21819:21830	701802	1	True				
ANR	701857	Identifier	tlen		701802	0					
ANR	701858	IfStatement	if ( NTYPE ( qn -> target ) == NT_CANY )		701802	5					
ANR	701859	Condition	NTYPE ( qn -> target ) == NT_CANY	976:6:21862:21889	701802	0	True				
ANR	701860	EqualityExpression	NTYPE ( qn -> target ) == NT_CANY		701802	0		==			
ANR	701861	CallExpression	NTYPE ( qn -> target )		701802	0					
ANR	701862	Callee	NTYPE		701802	0					
ANR	701863	Identifier	NTYPE		701802	0					
ANR	701864	ArgumentList	qn -> target		701802	1					
ANR	701865	Argument	qn -> target		701802	0					
ANR	701866	PtrMemberAccess	qn -> target		701802	0					
ANR	701867	Identifier	qn		701802	0					
ANR	701868	Identifier	target		701802	1					
ANR	701869	Identifier	NT_CANY		701802	1					
ANR	701870	CompoundStatement		10:36:253:253	701802	1					
ANR	701871	IfStatement	if ( qn -> greedy && infinite )		701802	0					
ANR	701872	Condition	qn -> greedy && infinite	977:8:21902:21923	701802	0	True				
ANR	701873	AndExpression	qn -> greedy && infinite		701802	0		&&			
ANR	701874	PtrMemberAccess	qn -> greedy		701802	0					
ANR	701875	Identifier	qn		701802	0					
ANR	701876	Identifier	greedy		701802	1					
ANR	701877	Identifier	infinite		701802	1					
ANR	701878	CompoundStatement		11:32:287:287	701802	1					
ANR	701879	IfStatement	if ( IS_NOT_NULL ( qn -> next_head_exact ) )		701802	0					
ANR	701880	Condition	IS_NOT_NULL ( qn -> next_head_exact )	978:10:21938:21969	701802	0	True				
ANR	701881	CallExpression	IS_NOT_NULL ( qn -> next_head_exact )		701802	0					
ANR	701882	Callee	IS_NOT_NULL		701802	0					
ANR	701883	Identifier	IS_NOT_NULL		701802	0					
ANR	701884	ArgumentList	qn -> next_head_exact		701802	1					
ANR	701885	Argument	qn -> next_head_exact		701802	0					
ANR	701886	PtrMemberAccess	qn -> next_head_exact		701802	0					
ANR	701887	Identifier	qn		701802	0					
ANR	701888	Identifier	next_head_exact		701802	1					
ANR	701889	ReturnStatement	return SIZE_OP_ANYCHAR_STAR_PEEK_NEXT + tlen * qn -> lower ;	979:8:21980:22036	701802	1	True				
ANR	701890	AdditiveExpression	SIZE_OP_ANYCHAR_STAR_PEEK_NEXT + tlen * qn -> lower		701802	0		+			
ANR	701891	Identifier	SIZE_OP_ANYCHAR_STAR_PEEK_NEXT		701802	0					
ANR	701892	MultiplicativeExpression	tlen * qn -> lower		701802	1		*			
ANR	701893	Identifier	tlen		701802	0					
ANR	701894	PtrMemberAccess	qn -> lower		701802	1					
ANR	701895	Identifier	qn		701802	0					
ANR	701896	Identifier	lower		701802	1					
ANR	701897	ElseStatement	else		701802	0					
ANR	701898	ReturnStatement	return SIZE_OP_ANYCHAR_STAR + tlen * qn -> lower ;	981:8:22057:22103	701802	0	True				
ANR	701899	AdditiveExpression	SIZE_OP_ANYCHAR_STAR + tlen * qn -> lower		701802	0		+			
ANR	701900	Identifier	SIZE_OP_ANYCHAR_STAR		701802	0					
ANR	701901	MultiplicativeExpression	tlen * qn -> lower		701802	1		*			
ANR	701902	Identifier	tlen		701802	0					
ANR	701903	PtrMemberAccess	qn -> lower		701802	1					
ANR	701904	Identifier	qn		701802	0					
ANR	701905	Identifier	lower		701802	1					
ANR	701906	IfStatement	if ( empty_info != 0 )		701802	6					
ANR	701907	Condition	empty_info != 0	985:6:22122:22136	701802	0	True				
ANR	701908	EqualityExpression	empty_info != 0		701802	0		!=			
ANR	701909	Identifier	empty_info		701802	0					
ANR	701910	PrimaryExpression	0		701802	1					
ANR	701911	ExpressionStatement	mod_tlen = tlen + ( SIZE_OP_NULL_CHECK_START + SIZE_OP_NULL_CHECK_END )	986:4:22143:22212	701802	1	True				
ANR	701912	AssignmentExpression	mod_tlen = tlen + ( SIZE_OP_NULL_CHECK_START + SIZE_OP_NULL_CHECK_END )		701802	0		=			
ANR	701913	Identifier	mod_tlen		701802	0					
ANR	701914	AdditiveExpression	tlen + ( SIZE_OP_NULL_CHECK_START + SIZE_OP_NULL_CHECK_END )		701802	1		+			
ANR	701915	Identifier	tlen		701802	0					
ANR	701916	AdditiveExpression	SIZE_OP_NULL_CHECK_START + SIZE_OP_NULL_CHECK_END		701802	1		+			
ANR	701917	Identifier	SIZE_OP_NULL_CHECK_START		701802	0					
ANR	701918	Identifier	SIZE_OP_NULL_CHECK_END		701802	1					
ANR	701919	ElseStatement	else		701802	0					
ANR	701920	ExpressionStatement	mod_tlen = tlen	988:4:22225:22240	701802	0	True				
ANR	701921	AssignmentExpression	mod_tlen = tlen		701802	0		=			
ANR	701922	Identifier	mod_tlen		701802	0					
ANR	701923	Identifier	tlen		701802	1					
ANR	701924	IfStatement	if ( infinite && ( qn -> lower <= 1 || tlen * qn -> lower <= QUANTIFIER_EXPAND_LIMIT_SIZE ) )		701802	7					
ANR	701925	Condition	infinite && ( qn -> lower <= 1 || tlen * qn -> lower <= QUANTIFIER_EXPAND_LIMIT_SIZE )	990:6:22249:22334	701802	0	True				
ANR	701926	AndExpression	infinite && ( qn -> lower <= 1 || tlen * qn -> lower <= QUANTIFIER_EXPAND_LIMIT_SIZE )		701802	0		&&			
ANR	701927	Identifier	infinite		701802	0					
ANR	701928	OrExpression	qn -> lower <= 1 || tlen * qn -> lower <= QUANTIFIER_EXPAND_LIMIT_SIZE		701802	1		||			
ANR	701929	RelationalExpression	qn -> lower <= 1		701802	0		<=			
ANR	701930	PtrMemberAccess	qn -> lower		701802	0					
ANR	701931	Identifier	qn		701802	0					
ANR	701932	Identifier	lower		701802	1					
ANR	701933	PrimaryExpression	1		701802	1					
ANR	701934	RelationalExpression	tlen * qn -> lower <= QUANTIFIER_EXPAND_LIMIT_SIZE		701802	1		<=			
ANR	701935	MultiplicativeExpression	tlen * qn -> lower		701802	0		*			
ANR	701936	Identifier	tlen		701802	0					
ANR	701937	PtrMemberAccess	qn -> lower		701802	1					
ANR	701938	Identifier	qn		701802	0					
ANR	701939	Identifier	lower		701802	1					
ANR	701940	Identifier	QUANTIFIER_EXPAND_LIMIT_SIZE		701802	1					
ANR	701941	CompoundStatement		25:76:698:698	701802	1					
ANR	701942	IfStatement	if ( qn -> lower == 1 && tlen > QUANTIFIER_EXPAND_LIMIT_SIZE )		701802	0					
ANR	701943	Condition	qn -> lower == 1 && tlen > QUANTIFIER_EXPAND_LIMIT_SIZE	992:8:22347:22399	701802	0	True				
ANR	701944	AndExpression	qn -> lower == 1 && tlen > QUANTIFIER_EXPAND_LIMIT_SIZE		701802	0		&&			
ANR	701945	EqualityExpression	qn -> lower == 1		701802	0		==			
ANR	701946	PtrMemberAccess	qn -> lower		701802	0					
ANR	701947	Identifier	qn		701802	0					
ANR	701948	Identifier	lower		701802	1					
ANR	701949	PrimaryExpression	1		701802	1					
ANR	701950	RelationalExpression	tlen > QUANTIFIER_EXPAND_LIMIT_SIZE		701802	1		>			
ANR	701951	Identifier	tlen		701802	0					
ANR	701952	Identifier	QUANTIFIER_EXPAND_LIMIT_SIZE		701802	1					
ANR	701953	CompoundStatement		26:63:763:763	701802	1					
ANR	701954	ExpressionStatement	len = SIZE_OP_JUMP	993:6:22410:22428	701802	0	True				
ANR	701955	AssignmentExpression	len = SIZE_OP_JUMP		701802	0		=			
ANR	701956	Identifier	len		701802	0					
ANR	701957	Identifier	SIZE_OP_JUMP		701802	1					
ANR	701958	ElseStatement	else		701802	0					
ANR	701959	CompoundStatement		29:9:806:806	701802	0					
ANR	701960	ExpressionStatement	len = tlen * qn -> lower	996:6:22453:22475	701802	0	True				
ANR	701961	AssignmentExpression	len = tlen * qn -> lower		701802	0		=			
ANR	701962	Identifier	len		701802	0					
ANR	701963	MultiplicativeExpression	tlen * qn -> lower		701802	1		*			
ANR	701964	Identifier	tlen		701802	0					
ANR	701965	PtrMemberAccess	qn -> lower		701802	1					
ANR	701966	Identifier	qn		701802	0					
ANR	701967	Identifier	lower		701802	1					
ANR	701968	IfStatement	if ( qn -> greedy )		701802	1					
ANR	701969	Condition	qn -> greedy	999:8:22492:22501	701802	0	True				
ANR	701970	PtrMemberAccess	qn -> greedy		701802	0					
ANR	701971	Identifier	qn		701802	0					
ANR	701972	Identifier	greedy		701802	1					
ANR	701973	CompoundStatement		33:20:865:865	701802	1					
ANR	701974	IfStatement	if ( IS_NOT_NULL ( qn -> head_exact ) )		701802	0					
ANR	701975	Condition	IS_NOT_NULL ( qn -> head_exact )	1000:10:22516:22542	701802	0	True				
ANR	701976	CallExpression	IS_NOT_NULL ( qn -> head_exact )		701802	0					
ANR	701977	Callee	IS_NOT_NULL		701802	0					
ANR	701978	Identifier	IS_NOT_NULL		701802	0					
ANR	701979	ArgumentList	qn -> head_exact		701802	1					
ANR	701980	Argument	qn -> head_exact		701802	0					
ANR	701981	PtrMemberAccess	qn -> head_exact		701802	0					
ANR	701982	Identifier	qn		701802	0					
ANR	701983	Identifier	head_exact		701802	1					
ANR	701984	ExpressionStatement	len += SIZE_OP_PUSH_OR_JUMP_EXACT1 + mod_tlen + SIZE_OP_JUMP	1001:1:22546:22606	701802	1	True				
ANR	701985	AssignmentExpression	len += SIZE_OP_PUSH_OR_JUMP_EXACT1 + mod_tlen + SIZE_OP_JUMP		701802	0		+=			
ANR	701986	Identifier	len		701802	0					
ANR	701987	AdditiveExpression	SIZE_OP_PUSH_OR_JUMP_EXACT1 + mod_tlen + SIZE_OP_JUMP		701802	1		+			
ANR	701988	Identifier	SIZE_OP_PUSH_OR_JUMP_EXACT1		701802	0					
ANR	701989	AdditiveExpression	mod_tlen + SIZE_OP_JUMP		701802	1		+			
ANR	701990	Identifier	mod_tlen		701802	0					
ANR	701991	Identifier	SIZE_OP_JUMP		701802	1					
ANR	701992	ElseStatement	else		701802	0					
ANR	701993	IfStatement	if ( IS_NOT_NULL ( qn -> next_head_exact ) )		701802	0					
ANR	701994	Condition	IS_NOT_NULL ( qn -> next_head_exact )	1002:15:22623:22654	701802	0	True				
ANR	701995	CallExpression	IS_NOT_NULL ( qn -> next_head_exact )		701802	0					
ANR	701996	Callee	IS_NOT_NULL		701802	0					
ANR	701997	Identifier	IS_NOT_NULL		701802	0					
ANR	701998	ArgumentList	qn -> next_head_exact		701802	1					
ANR	701999	Argument	qn -> next_head_exact		701802	0					
ANR	702000	PtrMemberAccess	qn -> next_head_exact		701802	0					
ANR	702001	Identifier	qn		701802	0					
ANR	702002	Identifier	next_head_exact		701802	1					
ANR	702003	ExpressionStatement	len += SIZE_OP_PUSH_IF_PEEK_NEXT + mod_tlen + SIZE_OP_JUMP	1003:1:22658:22716	701802	1	True				
ANR	702004	AssignmentExpression	len += SIZE_OP_PUSH_IF_PEEK_NEXT + mod_tlen + SIZE_OP_JUMP		701802	0		+=			
ANR	702005	Identifier	len		701802	0					
ANR	702006	AdditiveExpression	SIZE_OP_PUSH_IF_PEEK_NEXT + mod_tlen + SIZE_OP_JUMP		701802	1		+			
ANR	702007	Identifier	SIZE_OP_PUSH_IF_PEEK_NEXT		701802	0					
ANR	702008	AdditiveExpression	mod_tlen + SIZE_OP_JUMP		701802	1		+			
ANR	702009	Identifier	mod_tlen		701802	0					
ANR	702010	Identifier	SIZE_OP_JUMP		701802	1					
ANR	702011	ElseStatement	else		701802	0					
ANR	702012	ExpressionStatement	len += SIZE_OP_PUSH + mod_tlen + SIZE_OP_JUMP	1005:1:22730:22775	701802	0	True				
ANR	702013	AssignmentExpression	len += SIZE_OP_PUSH + mod_tlen + SIZE_OP_JUMP		701802	0		+=			
ANR	702014	Identifier	len		701802	0					
ANR	702015	AdditiveExpression	SIZE_OP_PUSH + mod_tlen + SIZE_OP_JUMP		701802	1		+			
ANR	702016	Identifier	SIZE_OP_PUSH		701802	0					
ANR	702017	AdditiveExpression	mod_tlen + SIZE_OP_JUMP		701802	1		+			
ANR	702018	Identifier	mod_tlen		701802	0					
ANR	702019	Identifier	SIZE_OP_JUMP		701802	1					
ANR	702020	ElseStatement	else		701802	0					
ANR	702021	ExpressionStatement	len += SIZE_OP_JUMP + mod_tlen + SIZE_OP_PUSH	1008:6:22798:22843	701802	0	True				
ANR	702022	AssignmentExpression	len += SIZE_OP_JUMP + mod_tlen + SIZE_OP_PUSH		701802	0		+=			
ANR	702023	Identifier	len		701802	0					
ANR	702024	AdditiveExpression	SIZE_OP_JUMP + mod_tlen + SIZE_OP_PUSH		701802	1		+			
ANR	702025	Identifier	SIZE_OP_JUMP		701802	0					
ANR	702026	AdditiveExpression	mod_tlen + SIZE_OP_PUSH		701802	1		+			
ANR	702027	Identifier	mod_tlen		701802	0					
ANR	702028	Identifier	SIZE_OP_PUSH		701802	1					
ANR	702029	ElseStatement	else		701802	0					
ANR	702030	IfStatement	if ( qn -> upper == 0 && qn -> is_refered != 0 )		701802	0					
ANR	702031	Condition	qn -> upper == 0 && qn -> is_refered != 0	1010:11:22860:22896	701802	0	True				
ANR	702032	AndExpression	qn -> upper == 0 && qn -> is_refered != 0		701802	0		&&			
ANR	702033	EqualityExpression	qn -> upper == 0		701802	0		==			
ANR	702034	PtrMemberAccess	qn -> upper		701802	0					
ANR	702035	Identifier	qn		701802	0					
ANR	702036	Identifier	upper		701802	1					
ANR	702037	PrimaryExpression	0		701802	1					
ANR	702038	EqualityExpression	qn -> is_refered != 0		701802	1		!=			
ANR	702039	PtrMemberAccess	qn -> is_refered		701802	0					
ANR	702040	Identifier	qn		701802	0					
ANR	702041	Identifier	is_refered		701802	1					
ANR	702042	PrimaryExpression	0		701802	1					
ANR	702043	CompoundStatement		44:50:1260:1260	701802	1					
ANR	702044	ExpressionStatement	len = SIZE_OP_JUMP + tlen	1011:4:22925:22950	701802	0	True				
ANR	702045	AssignmentExpression	len = SIZE_OP_JUMP + tlen		701802	0		=			
ANR	702046	Identifier	len		701802	0					
ANR	702047	AdditiveExpression	SIZE_OP_JUMP + tlen		701802	1		+			
ANR	702048	Identifier	SIZE_OP_JUMP		701802	0					
ANR	702049	Identifier	tlen		701802	1					
ANR	702050	ElseStatement	else		701802	0					
ANR	702051	IfStatement	if ( ! infinite && qn -> greedy && ( qn -> upper == 1 || ( tlen + SIZE_OP_PUSH ) * qn -> upper <= QUANTIFIER_EXPAND_LIMIT_SIZE ) )		701802	0					
ANR	702052	Condition	! infinite && qn -> greedy && ( qn -> upper == 1 || ( tlen + SIZE_OP_PUSH ) * qn -> upper <= QUANTIFIER_EXPAND_LIMIT_SIZE )	1013:11:22967:23127	701802	0	True				
ANR	702053	AndExpression	! infinite && qn -> greedy && ( qn -> upper == 1 || ( tlen + SIZE_OP_PUSH ) * qn -> upper <= QUANTIFIER_EXPAND_LIMIT_SIZE )		701802	0		&&			
ANR	702054	UnaryOperationExpression	! infinite		701802	0					
ANR	702055	UnaryOperator	!		701802	0					
ANR	702056	Identifier	infinite		701802	1					
ANR	702057	AndExpression	qn -> greedy && ( qn -> upper == 1 || ( tlen + SIZE_OP_PUSH ) * qn -> upper <= QUANTIFIER_EXPAND_LIMIT_SIZE )		701802	1		&&			
ANR	702058	PtrMemberAccess	qn -> greedy		701802	0					
ANR	702059	Identifier	qn		701802	0					
ANR	702060	Identifier	greedy		701802	1					
ANR	702061	OrExpression	qn -> upper == 1 || ( tlen + SIZE_OP_PUSH ) * qn -> upper <= QUANTIFIER_EXPAND_LIMIT_SIZE		701802	1		||			
ANR	702062	EqualityExpression	qn -> upper == 1		701802	0		==			
ANR	702063	PtrMemberAccess	qn -> upper		701802	0					
ANR	702064	Identifier	qn		701802	0					
ANR	702065	Identifier	upper		701802	1					
ANR	702066	PrimaryExpression	1		701802	1					
ANR	702067	RelationalExpression	( tlen + SIZE_OP_PUSH ) * qn -> upper <= QUANTIFIER_EXPAND_LIMIT_SIZE		701802	1		<=			
ANR	702068	MultiplicativeExpression	( tlen + SIZE_OP_PUSH ) * qn -> upper		701802	0		*			
ANR	702069	AdditiveExpression	tlen + SIZE_OP_PUSH		701802	0		+			
ANR	702070	Identifier	tlen		701802	0					
ANR	702071	Identifier	SIZE_OP_PUSH		701802	1					
ANR	702072	PtrMemberAccess	qn -> upper		701802	1					
ANR	702073	Identifier	qn		701802	0					
ANR	702074	Identifier	upper		701802	1					
ANR	702075	Identifier	QUANTIFIER_EXPAND_LIMIT_SIZE		701802	1					
ANR	702076	CompoundStatement		49:72:1491:1491	701802	1					
ANR	702077	ExpressionStatement	len = tlen * qn -> lower	1016:4:23136:23158	701802	0	True				
ANR	702078	AssignmentExpression	len = tlen * qn -> lower		701802	0		=			
ANR	702079	Identifier	len		701802	0					
ANR	702080	MultiplicativeExpression	tlen * qn -> lower		701802	1		*			
ANR	702081	Identifier	tlen		701802	0					
ANR	702082	PtrMemberAccess	qn -> lower		701802	1					
ANR	702083	Identifier	qn		701802	0					
ANR	702084	Identifier	lower		701802	1					
ANR	702085	ExpressionStatement	len += ( SIZE_OP_PUSH + tlen ) * ( qn -> upper - qn -> lower )	1017:4:23164:23218	701802	1	True				
ANR	702086	AssignmentExpression	len += ( SIZE_OP_PUSH + tlen ) * ( qn -> upper - qn -> lower )		701802	0		+=			
ANR	702087	Identifier	len		701802	0					
ANR	702088	MultiplicativeExpression	( SIZE_OP_PUSH + tlen ) * ( qn -> upper - qn -> lower )		701802	1		*			
ANR	702089	AdditiveExpression	SIZE_OP_PUSH + tlen		701802	0		+			
ANR	702090	Identifier	SIZE_OP_PUSH		701802	0					
ANR	702091	Identifier	tlen		701802	1					
ANR	702092	AdditiveExpression	qn -> upper - qn -> lower		701802	1		-			
ANR	702093	PtrMemberAccess	qn -> upper		701802	0					
ANR	702094	Identifier	qn		701802	0					
ANR	702095	Identifier	upper		701802	1					
ANR	702096	PtrMemberAccess	qn -> lower		701802	1					
ANR	702097	Identifier	qn		701802	0					
ANR	702098	Identifier	lower		701802	1					
ANR	702099	ElseStatement	else		701802	0					
ANR	702100	IfStatement	if ( ! qn -> greedy && qn -> upper == 1 && qn -> lower == 0 )		701802	0					
ANR	702101	Condition	! qn -> greedy && qn -> upper == 1 && qn -> lower == 0	1019:11:23235:23281	701802	0	True				
ANR	702102	AndExpression	! qn -> greedy && qn -> upper == 1 && qn -> lower == 0		701802	0		&&			
ANR	702103	UnaryOperationExpression	! qn -> greedy		701802	0					
ANR	702104	UnaryOperator	!		701802	0					
ANR	702105	PtrMemberAccess	qn -> greedy		701802	1					
ANR	702106	Identifier	qn		701802	0					
ANR	702107	Identifier	greedy		701802	1					
ANR	702108	AndExpression	qn -> upper == 1 && qn -> lower == 0		701802	1		&&			
ANR	702109	EqualityExpression	qn -> upper == 1		701802	0		==			
ANR	702110	PtrMemberAccess	qn -> upper		701802	0					
ANR	702111	Identifier	qn		701802	0					
ANR	702112	Identifier	upper		701802	1					
ANR	702113	PrimaryExpression	1		701802	1					
ANR	702114	EqualityExpression	qn -> lower == 0		701802	1		==			
ANR	702115	PtrMemberAccess	qn -> lower		701802	0					
ANR	702116	Identifier	qn		701802	0					
ANR	702117	Identifier	lower		701802	1					
ANR	702118	PrimaryExpression	0		701802	1					
ANR	702119	CompoundStatement		53:60:1645:1645	701802	1					
ANR	702120	ExpressionStatement	len = SIZE_OP_PUSH + SIZE_OP_JUMP + tlen	1020:4:23301:23341	701802	0	True				
ANR	702121	AssignmentExpression	len = SIZE_OP_PUSH + SIZE_OP_JUMP + tlen		701802	0		=			
ANR	702122	Identifier	len		701802	0					
ANR	702123	AdditiveExpression	SIZE_OP_PUSH + SIZE_OP_JUMP + tlen		701802	1		+			
ANR	702124	Identifier	SIZE_OP_PUSH		701802	0					
ANR	702125	AdditiveExpression	SIZE_OP_JUMP + tlen		701802	1		+			
ANR	702126	Identifier	SIZE_OP_JUMP		701802	0					
ANR	702127	Identifier	tlen		701802	1					
ANR	702128	ElseStatement	else		701802	0					
ANR	702129	CompoundStatement		56:7:1715:1715	701802	0					
ANR	702130	ExpressionStatement	len = SIZE_OP_REPEAT_INC + mod_tlen + SIZE_OPCODE + SIZE_RELADDR + SIZE_MEMNUM	1023:4:23360:23446	701802	0	True				
ANR	702131	AssignmentExpression	len = SIZE_OP_REPEAT_INC + mod_tlen + SIZE_OPCODE + SIZE_RELADDR + SIZE_MEMNUM		701802	0		=			
ANR	702132	Identifier	len		701802	0					
ANR	702133	AdditiveExpression	SIZE_OP_REPEAT_INC + mod_tlen + SIZE_OPCODE + SIZE_RELADDR + SIZE_MEMNUM		701802	1		+			
ANR	702134	Identifier	SIZE_OP_REPEAT_INC		701802	0					
ANR	702135	AdditiveExpression	mod_tlen + SIZE_OPCODE + SIZE_RELADDR + SIZE_MEMNUM		701802	1		+			
ANR	702136	Identifier	mod_tlen		701802	0					
ANR	702137	AdditiveExpression	SIZE_OPCODE + SIZE_RELADDR + SIZE_MEMNUM		701802	1		+			
ANR	702138	Identifier	SIZE_OPCODE		701802	0					
ANR	702139	AdditiveExpression	SIZE_RELADDR + SIZE_MEMNUM		701802	1		+			
ANR	702140	Identifier	SIZE_RELADDR		701802	0					
ANR	702141	Identifier	SIZE_MEMNUM		701802	1					
ANR	702142	ReturnStatement	return len ;	1027:2:23455:23465	701802	8	True				
ANR	702143	Identifier	len		701802	0					
ANR	702144	ReturnType	static int		701802	1					
ANR	702145	Identifier	compile_length_quantifier_node		701802	2					
ANR	702146	ParameterList	"QtfrNode * qn , regex_t * reg"		701802	3					
ANR	702147	Parameter	QtfrNode * qn	966:31:21610:21621	701802	0	True				
ANR	702148	ParameterType	QtfrNode *		701802	0					
ANR	702149	Identifier	qn		701802	1					
ANR	702150	Parameter	regex_t * reg	966:45:21624:21635	701802	1	True				
ANR	702151	ParameterType	regex_t *		701802	0					
ANR	702152	Identifier	reg		701802	1					
ANR	702153	CFGEntryNode	ENTRY		701802		True				
ANR	702154	CFGExitNode	EXIT		701802		True				
ANR	702155	Symbol	* qn		701802						
ANR	702156	Symbol	qn -> target_empty_info		701802						
ANR	702157	Symbol	qn -> greedy		701802						
ANR	702158	Symbol	SIZE_RELADDR		701802						
ANR	702159	Symbol	IS_NOT_NULL		701802						
ANR	702160	Symbol	SIZE_OP_ANYCHAR_STAR_PEEK_NEXT		701802						
ANR	702161	Symbol	infinite		701802						
ANR	702162	Symbol	qn -> next_head_exact		701802						
ANR	702163	Symbol	SIZE_OP_NULL_CHECK_END		701802						
ANR	702164	Symbol	SIZE_OPCODE		701802						
ANR	702165	Symbol	qn -> lower		701802						
ANR	702166	Symbol	SIZE_MEMNUM		701802						
ANR	702167	Symbol	len		701802						
ANR	702168	Symbol	reg		701802						
ANR	702169	Symbol	NT_CANY		701802						
ANR	702170	Symbol	SIZE_OP_ANYCHAR_STAR		701802						
ANR	702171	Symbol	tlen		701802						
ANR	702172	Symbol	SIZE_OP_REPEAT_INC		701802						
ANR	702173	Symbol	IS_REPEAT_INFINITE		701802						
ANR	702174	Symbol	SIZE_OP_NULL_CHECK_START		701802						
ANR	702175	Symbol	SIZE_OP_PUSH_IF_PEEK_NEXT		701802						
ANR	702176	Symbol	qn		701802						
ANR	702177	Symbol	SIZE_OP_JUMP		701802						
ANR	702178	Symbol	compile_length_tree		701802						
ANR	702179	Symbol	SIZE_OP_PUSH		701802						
ANR	702180	Symbol	qn -> target		701802						
ANR	702181	Symbol	qn -> head_exact		701802						
ANR	702182	Symbol	qn -> upper		701802						
ANR	702183	Symbol	QUANTIFIER_EXPAND_LIMIT_SIZE		701802						
ANR	702184	Symbol	qn -> is_refered		701802						
ANR	702185	Symbol	mod_tlen		701802						
ANR	702186	Symbol	empty_info		701802						
ANR	702187	Symbol	NTYPE		701802						
ANR	702188	Symbol	SIZE_OP_PUSH_OR_JUMP_EXACT1		701802						
ANR	702189	Function	compile_quantifier_node	1030:0:23470:27519							
ANR	702190	FunctionDef	"compile_quantifier_node (QtfrNode * qn , regex_t * reg)"		702189	0					
ANR	702191	CompoundStatement		1032:0:23533:27519	702189	0					
ANR	702192	IdentifierDeclStatement	"int i , r , mod_tlen ;"	1033:2:23537:23555	702189	0	True				
ANR	702193	IdentifierDecl	i		702189	0					
ANR	702194	IdentifierDeclType	int		702189	0					
ANR	702195	Identifier	i		702189	1					
ANR	702196	IdentifierDecl	r		702189	1					
ANR	702197	IdentifierDeclType	int		702189	0					
ANR	702198	Identifier	r		702189	1					
ANR	702199	IdentifierDecl	mod_tlen		702189	2					
ANR	702200	IdentifierDeclType	int		702189	0					
ANR	702201	Identifier	mod_tlen		702189	1					
ANR	702202	IdentifierDeclStatement	int infinite = IS_REPEAT_INFINITE ( qn -> upper ) ;	1034:2:23559:23603	702189	1	True				
ANR	702203	IdentifierDecl	infinite = IS_REPEAT_INFINITE ( qn -> upper )		702189	0					
ANR	702204	IdentifierDeclType	int		702189	0					
ANR	702205	Identifier	infinite		702189	1					
ANR	702206	AssignmentExpression	infinite = IS_REPEAT_INFINITE ( qn -> upper )		702189	2		=			
ANR	702207	Identifier	infinite		702189	0					
ANR	702208	CallExpression	IS_REPEAT_INFINITE ( qn -> upper )		702189	1					
ANR	702209	Callee	IS_REPEAT_INFINITE		702189	0					
ANR	702210	Identifier	IS_REPEAT_INFINITE		702189	0					
ANR	702211	ArgumentList	qn -> upper		702189	1					
ANR	702212	Argument	qn -> upper		702189	0					
ANR	702213	PtrMemberAccess	qn -> upper		702189	0					
ANR	702214	Identifier	qn		702189	0					
ANR	702215	Identifier	upper		702189	1					
ANR	702216	IdentifierDeclStatement	int empty_info = qn -> target_empty_info ;	1035:2:23607:23645	702189	2	True				
ANR	702217	IdentifierDecl	empty_info = qn -> target_empty_info		702189	0					
ANR	702218	IdentifierDeclType	int		702189	0					
ANR	702219	Identifier	empty_info		702189	1					
ANR	702220	AssignmentExpression	empty_info = qn -> target_empty_info		702189	2		=			
ANR	702221	Identifier	empty_info		702189	0					
ANR	702222	PtrMemberAccess	qn -> target_empty_info		702189	1					
ANR	702223	Identifier	qn		702189	0					
ANR	702224	Identifier	target_empty_info		702189	1					
ANR	702225	IdentifierDeclStatement	"int tlen = compile_length_tree ( qn -> target , reg ) ;"	1036:2:23649:23696	702189	3	True				
ANR	702226	IdentifierDecl	"tlen = compile_length_tree ( qn -> target , reg )"		702189	0					
ANR	702227	IdentifierDeclType	int		702189	0					
ANR	702228	Identifier	tlen		702189	1					
ANR	702229	AssignmentExpression	"tlen = compile_length_tree ( qn -> target , reg )"		702189	2		=			
ANR	702230	Identifier	tlen		702189	0					
ANR	702231	CallExpression	"compile_length_tree ( qn -> target , reg )"		702189	1					
ANR	702232	Callee	compile_length_tree		702189	0					
ANR	702233	Identifier	compile_length_tree		702189	0					
ANR	702234	ArgumentList	qn -> target		702189	1					
ANR	702235	Argument	qn -> target		702189	0					
ANR	702236	PtrMemberAccess	qn -> target		702189	0					
ANR	702237	Identifier	qn		702189	0					
ANR	702238	Identifier	target		702189	1					
ANR	702239	Argument	reg		702189	1					
ANR	702240	Identifier	reg		702189	0					
ANR	702241	IfStatement	if ( tlen < 0 )		702189	4					
ANR	702242	Condition	tlen < 0	1038:6:23705:23712	702189	0	True				
ANR	702243	RelationalExpression	tlen < 0		702189	0		<			
ANR	702244	Identifier	tlen		702189	0					
ANR	702245	PrimaryExpression	0		702189	1					
ANR	702246	ReturnStatement	return tlen ;	1038:16:23715:23726	702189	1	True				
ANR	702247	Identifier	tlen		702189	0					
ANR	702248	IfStatement	if ( is_anychar_star_quantifier ( qn ) )		702189	5					
ANR	702249	Condition	is_anychar_star_quantifier ( qn )	1040:6:23735:23764	702189	0	True				
ANR	702250	CallExpression	is_anychar_star_quantifier ( qn )		702189	0					
ANR	702251	Callee	is_anychar_star_quantifier		702189	0					
ANR	702252	Identifier	is_anychar_star_quantifier		702189	0					
ANR	702253	ArgumentList	qn		702189	1					
ANR	702254	Argument	qn		702189	0					
ANR	702255	Identifier	qn		702189	0					
ANR	702256	CompoundStatement		9:38:233:233	702189	1					
ANR	702257	ExpressionStatement	"r = compile_tree_n_times ( qn -> target , qn -> lower , reg )"	1041:4:23773:23825	702189	0	True				
ANR	702258	AssignmentExpression	"r = compile_tree_n_times ( qn -> target , qn -> lower , reg )"		702189	0		=			
ANR	702259	Identifier	r		702189	0					
ANR	702260	CallExpression	"compile_tree_n_times ( qn -> target , qn -> lower , reg )"		702189	1					
ANR	702261	Callee	compile_tree_n_times		702189	0					
ANR	702262	Identifier	compile_tree_n_times		702189	0					
ANR	702263	ArgumentList	qn -> target		702189	1					
ANR	702264	Argument	qn -> target		702189	0					
ANR	702265	PtrMemberAccess	qn -> target		702189	0					
ANR	702266	Identifier	qn		702189	0					
ANR	702267	Identifier	target		702189	1					
ANR	702268	Argument	qn -> lower		702189	1					
ANR	702269	PtrMemberAccess	qn -> lower		702189	0					
ANR	702270	Identifier	qn		702189	0					
ANR	702271	Identifier	lower		702189	1					
ANR	702272	Argument	reg		702189	2					
ANR	702273	Identifier	reg		702189	0					
ANR	702274	IfStatement	if ( r )		702189	1					
ANR	702275	Condition	r	1042:8:23835:23835	702189	0	True				
ANR	702276	Identifier	r		702189	0					
ANR	702277	ReturnStatement	return r ;	1042:11:23838:23846	702189	1	True				
ANR	702278	Identifier	r		702189	0					
ANR	702279	IfStatement	if ( IS_NOT_NULL ( qn -> next_head_exact ) )		702189	2					
ANR	702280	Condition	IS_NOT_NULL ( qn -> next_head_exact )	1043:8:23856:23887	702189	0	True				
ANR	702281	CallExpression	IS_NOT_NULL ( qn -> next_head_exact )		702189	0					
ANR	702282	Callee	IS_NOT_NULL		702189	0					
ANR	702283	Identifier	IS_NOT_NULL		702189	0					
ANR	702284	ArgumentList	qn -> next_head_exact		702189	1					
ANR	702285	Argument	qn -> next_head_exact		702189	0					
ANR	702286	PtrMemberAccess	qn -> next_head_exact		702189	0					
ANR	702287	Identifier	qn		702189	0					
ANR	702288	Identifier	next_head_exact		702189	1					
ANR	702289	CompoundStatement		12:42:356:356	702189	1					
ANR	702290	IfStatement	if ( IS_MULTILINE ( reg -> options ) )		702189	0					
ANR	702291	Condition	IS_MULTILINE ( reg -> options )	1044:10:23902:23927	702189	0	True				
ANR	702292	CallExpression	IS_MULTILINE ( reg -> options )		702189	0					
ANR	702293	Callee	IS_MULTILINE		702189	0					
ANR	702294	Identifier	IS_MULTILINE		702189	0					
ANR	702295	ArgumentList	reg -> options		702189	1					
ANR	702296	Argument	reg -> options		702189	0					
ANR	702297	PtrMemberAccess	reg -> options		702189	0					
ANR	702298	Identifier	reg		702189	0					
ANR	702299	Identifier	options		702189	1					
ANR	702300	ExpressionStatement	"r = add_opcode ( reg , OP_ANYCHAR_ML_STAR_PEEK_NEXT )"	1045:1:23931:23980	702189	1	True				
ANR	702301	AssignmentExpression	"r = add_opcode ( reg , OP_ANYCHAR_ML_STAR_PEEK_NEXT )"		702189	0		=			
ANR	702302	Identifier	r		702189	0					
ANR	702303	CallExpression	"add_opcode ( reg , OP_ANYCHAR_ML_STAR_PEEK_NEXT )"		702189	1					
ANR	702304	Callee	add_opcode		702189	0					
ANR	702305	Identifier	add_opcode		702189	0					
ANR	702306	ArgumentList	reg		702189	1					
ANR	702307	Argument	reg		702189	0					
ANR	702308	Identifier	reg		702189	0					
ANR	702309	Argument	OP_ANYCHAR_ML_STAR_PEEK_NEXT		702189	1					
ANR	702310	Identifier	OP_ANYCHAR_ML_STAR_PEEK_NEXT		702189	0					
ANR	702311	ElseStatement	else		702189	0					
ANR	702312	ExpressionStatement	"r = add_opcode ( reg , OP_ANYCHAR_STAR_PEEK_NEXT )"	1047:1:23994:24040	702189	0	True				
ANR	702313	AssignmentExpression	"r = add_opcode ( reg , OP_ANYCHAR_STAR_PEEK_NEXT )"		702189	0		=			
ANR	702314	Identifier	r		702189	0					
ANR	702315	CallExpression	"add_opcode ( reg , OP_ANYCHAR_STAR_PEEK_NEXT )"		702189	1					
ANR	702316	Callee	add_opcode		702189	0					
ANR	702317	Identifier	add_opcode		702189	0					
ANR	702318	ArgumentList	reg		702189	1					
ANR	702319	Argument	reg		702189	0					
ANR	702320	Identifier	reg		702189	0					
ANR	702321	Argument	OP_ANYCHAR_STAR_PEEK_NEXT		702189	1					
ANR	702322	Identifier	OP_ANYCHAR_STAR_PEEK_NEXT		702189	0					
ANR	702323	IfStatement	if ( r )		702189	1					
ANR	702324	Condition	r	1048:10:24052:24052	702189	0	True				
ANR	702325	Identifier	r		702189	0					
ANR	702326	ReturnStatement	return r ;	1048:13:24055:24063	702189	1	True				
ANR	702327	Identifier	r		702189	0					
ANR	702328	ReturnStatement	"return add_bytes ( reg , NSTR ( qn -> next_head_exact ) -> s , 1 ) ;"	1049:6:24071:24125	702189	2	True				
ANR	702329	CallExpression	"add_bytes ( reg , NSTR ( qn -> next_head_exact ) -> s , 1 )"		702189	0					
ANR	702330	Callee	add_bytes		702189	0					
ANR	702331	Identifier	add_bytes		702189	0					
ANR	702332	ArgumentList	reg		702189	1					
ANR	702333	Argument	reg		702189	0					
ANR	702334	Identifier	reg		702189	0					
ANR	702335	Argument	NSTR ( qn -> next_head_exact ) -> s		702189	1					
ANR	702336	PtrMemberAccess	NSTR ( qn -> next_head_exact ) -> s		702189	0					
ANR	702337	CallExpression	NSTR ( qn -> next_head_exact )		702189	0					
ANR	702338	Callee	NSTR		702189	0					
ANR	702339	Identifier	NSTR		702189	0					
ANR	702340	ArgumentList	qn -> next_head_exact		702189	1					
ANR	702341	Argument	qn -> next_head_exact		702189	0					
ANR	702342	PtrMemberAccess	qn -> next_head_exact		702189	0					
ANR	702343	Identifier	qn		702189	0					
ANR	702344	Identifier	next_head_exact		702189	1					
ANR	702345	Identifier	s		702189	1					
ANR	702346	Argument	1		702189	2					
ANR	702347	PrimaryExpression	1		702189	0					
ANR	702348	ElseStatement	else		702189	0					
ANR	702349	CompoundStatement		20:9:608:608	702189	0					
ANR	702350	IfStatement	if ( IS_MULTILINE ( reg -> options ) )		702189	0					
ANR	702351	Condition	IS_MULTILINE ( reg -> options )	1052:10:24154:24179	702189	0	True				
ANR	702352	CallExpression	IS_MULTILINE ( reg -> options )		702189	0					
ANR	702353	Callee	IS_MULTILINE		702189	0					
ANR	702354	Identifier	IS_MULTILINE		702189	0					
ANR	702355	ArgumentList	reg -> options		702189	1					
ANR	702356	Argument	reg -> options		702189	0					
ANR	702357	PtrMemberAccess	reg -> options		702189	0					
ANR	702358	Identifier	reg		702189	0					
ANR	702359	Identifier	options		702189	1					
ANR	702360	ReturnStatement	"return add_opcode ( reg , OP_ANYCHAR_ML_STAR ) ;"	1053:1:24183:24225	702189	1	True				
ANR	702361	CallExpression	"add_opcode ( reg , OP_ANYCHAR_ML_STAR )"		702189	0					
ANR	702362	Callee	add_opcode		702189	0					
ANR	702363	Identifier	add_opcode		702189	0					
ANR	702364	ArgumentList	reg		702189	1					
ANR	702365	Argument	reg		702189	0					
ANR	702366	Identifier	reg		702189	0					
ANR	702367	Argument	OP_ANYCHAR_ML_STAR		702189	1					
ANR	702368	Identifier	OP_ANYCHAR_ML_STAR		702189	0					
ANR	702369	ElseStatement	else		702189	0					
ANR	702370	ReturnStatement	"return add_opcode ( reg , OP_ANYCHAR_STAR ) ;"	1055:1:24239:24278	702189	0	True				
ANR	702371	CallExpression	"add_opcode ( reg , OP_ANYCHAR_STAR )"		702189	0					
ANR	702372	Callee	add_opcode		702189	0					
ANR	702373	Identifier	add_opcode		702189	0					
ANR	702374	ArgumentList	reg		702189	1					
ANR	702375	Argument	reg		702189	0					
ANR	702376	Identifier	reg		702189	0					
ANR	702377	Argument	OP_ANYCHAR_STAR		702189	1					
ANR	702378	Identifier	OP_ANYCHAR_STAR		702189	0					
ANR	702379	IfStatement	if ( empty_info != 0 )		702189	6					
ANR	702380	Condition	empty_info != 0	1059:6:24297:24311	702189	0	True				
ANR	702381	EqualityExpression	empty_info != 0		702189	0		!=			
ANR	702382	Identifier	empty_info		702189	0					
ANR	702383	PrimaryExpression	0		702189	1					
ANR	702384	ExpressionStatement	mod_tlen = tlen + ( SIZE_OP_NULL_CHECK_START + SIZE_OP_NULL_CHECK_END )	1060:4:24318:24387	702189	1	True				
ANR	702385	AssignmentExpression	mod_tlen = tlen + ( SIZE_OP_NULL_CHECK_START + SIZE_OP_NULL_CHECK_END )		702189	0		=			
ANR	702386	Identifier	mod_tlen		702189	0					
ANR	702387	AdditiveExpression	tlen + ( SIZE_OP_NULL_CHECK_START + SIZE_OP_NULL_CHECK_END )		702189	1		+			
ANR	702388	Identifier	tlen		702189	0					
ANR	702389	AdditiveExpression	SIZE_OP_NULL_CHECK_START + SIZE_OP_NULL_CHECK_END		702189	1		+			
ANR	702390	Identifier	SIZE_OP_NULL_CHECK_START		702189	0					
ANR	702391	Identifier	SIZE_OP_NULL_CHECK_END		702189	1					
ANR	702392	ElseStatement	else		702189	0					
ANR	702393	ExpressionStatement	mod_tlen = tlen	1062:4:24400:24415	702189	0	True				
ANR	702394	AssignmentExpression	mod_tlen = tlen		702189	0		=			
ANR	702395	Identifier	mod_tlen		702189	0					
ANR	702396	Identifier	tlen		702189	1					
ANR	702397	IfStatement	if ( infinite && ( qn -> lower <= 1 || tlen * qn -> lower <= QUANTIFIER_EXPAND_LIMIT_SIZE ) )		702189	7					
ANR	702398	Condition	infinite && ( qn -> lower <= 1 || tlen * qn -> lower <= QUANTIFIER_EXPAND_LIMIT_SIZE )	1064:6:24424:24509	702189	0	True				
ANR	702399	AndExpression	infinite && ( qn -> lower <= 1 || tlen * qn -> lower <= QUANTIFIER_EXPAND_LIMIT_SIZE )		702189	0		&&			
ANR	702400	Identifier	infinite		702189	0					
ANR	702401	OrExpression	qn -> lower <= 1 || tlen * qn -> lower <= QUANTIFIER_EXPAND_LIMIT_SIZE		702189	1		||			
ANR	702402	RelationalExpression	qn -> lower <= 1		702189	0		<=			
ANR	702403	PtrMemberAccess	qn -> lower		702189	0					
ANR	702404	Identifier	qn		702189	0					
ANR	702405	Identifier	lower		702189	1					
ANR	702406	PrimaryExpression	1		702189	1					
ANR	702407	RelationalExpression	tlen * qn -> lower <= QUANTIFIER_EXPAND_LIMIT_SIZE		702189	1		<=			
ANR	702408	MultiplicativeExpression	tlen * qn -> lower		702189	0		*			
ANR	702409	Identifier	tlen		702189	0					
ANR	702410	PtrMemberAccess	qn -> lower		702189	1					
ANR	702411	Identifier	qn		702189	0					
ANR	702412	Identifier	lower		702189	1					
ANR	702413	Identifier	QUANTIFIER_EXPAND_LIMIT_SIZE		702189	1					
ANR	702414	CompoundStatement		34:76:978:978	702189	1					
ANR	702415	IfStatement	if ( qn -> lower == 1 && tlen > QUANTIFIER_EXPAND_LIMIT_SIZE )		702189	0					
ANR	702416	Condition	qn -> lower == 1 && tlen > QUANTIFIER_EXPAND_LIMIT_SIZE	1066:8:24522:24574	702189	0	True				
ANR	702417	AndExpression	qn -> lower == 1 && tlen > QUANTIFIER_EXPAND_LIMIT_SIZE		702189	0		&&			
ANR	702418	EqualityExpression	qn -> lower == 1		702189	0		==			
ANR	702419	PtrMemberAccess	qn -> lower		702189	0					
ANR	702420	Identifier	qn		702189	0					
ANR	702421	Identifier	lower		702189	1					
ANR	702422	PrimaryExpression	1		702189	1					
ANR	702423	RelationalExpression	tlen > QUANTIFIER_EXPAND_LIMIT_SIZE		702189	1		>			
ANR	702424	Identifier	tlen		702189	0					
ANR	702425	Identifier	QUANTIFIER_EXPAND_LIMIT_SIZE		702189	1					
ANR	702426	CompoundStatement		35:63:1043:1043	702189	1					
ANR	702427	IfStatement	if ( qn -> greedy )		702189	0					
ANR	702428	Condition	qn -> greedy	1067:10:24589:24598	702189	0	True				
ANR	702429	PtrMemberAccess	qn -> greedy		702189	0					
ANR	702430	Identifier	qn		702189	0					
ANR	702431	Identifier	greedy		702189	1					
ANR	702432	CompoundStatement		36:22:1067:1067	702189	1					
ANR	702433	IfStatement	if ( IS_NOT_NULL ( qn -> head_exact ) )		702189	0					
ANR	702434	Condition	IS_NOT_NULL ( qn -> head_exact )	1068:5:24608:24634	702189	0	True				
ANR	702435	CallExpression	IS_NOT_NULL ( qn -> head_exact )		702189	0					
ANR	702436	Callee	IS_NOT_NULL		702189	0					
ANR	702437	Identifier	IS_NOT_NULL		702189	0					
ANR	702438	ArgumentList	qn -> head_exact		702189	1					
ANR	702439	Argument	qn -> head_exact		702189	0					
ANR	702440	PtrMemberAccess	qn -> head_exact		702189	0					
ANR	702441	Identifier	qn		702189	0					
ANR	702442	Identifier	head_exact		702189	1					
ANR	702443	ExpressionStatement	"r = add_opcode_rel_addr ( reg , OP_JUMP , SIZE_OP_PUSH_OR_JUMP_EXACT1 )"	1069:3:24640:24706	702189	1	True				
ANR	702444	AssignmentExpression	"r = add_opcode_rel_addr ( reg , OP_JUMP , SIZE_OP_PUSH_OR_JUMP_EXACT1 )"		702189	0		=			
ANR	702445	Identifier	r		702189	0					
ANR	702446	CallExpression	"add_opcode_rel_addr ( reg , OP_JUMP , SIZE_OP_PUSH_OR_JUMP_EXACT1 )"		702189	1					
ANR	702447	Callee	add_opcode_rel_addr		702189	0					
ANR	702448	Identifier	add_opcode_rel_addr		702189	0					
ANR	702449	ArgumentList	reg		702189	1					
ANR	702450	Argument	reg		702189	0					
ANR	702451	Identifier	reg		702189	0					
ANR	702452	Argument	OP_JUMP		702189	1					
ANR	702453	Identifier	OP_JUMP		702189	0					
ANR	702454	Argument	SIZE_OP_PUSH_OR_JUMP_EXACT1		702189	2					
ANR	702455	Identifier	SIZE_OP_PUSH_OR_JUMP_EXACT1		702189	0					
ANR	702456	ElseStatement	else		702189	0					
ANR	702457	IfStatement	if ( IS_NOT_NULL ( qn -> next_head_exact ) )		702189	0					
ANR	702458	Condition	IS_NOT_NULL ( qn -> next_head_exact )	1070:10:24718:24749	702189	0	True				
ANR	702459	CallExpression	IS_NOT_NULL ( qn -> next_head_exact )		702189	0					
ANR	702460	Callee	IS_NOT_NULL		702189	0					
ANR	702461	Identifier	IS_NOT_NULL		702189	0					
ANR	702462	ArgumentList	qn -> next_head_exact		702189	1					
ANR	702463	Argument	qn -> next_head_exact		702189	0					
ANR	702464	PtrMemberAccess	qn -> next_head_exact		702189	0					
ANR	702465	Identifier	qn		702189	0					
ANR	702466	Identifier	next_head_exact		702189	1					
ANR	702467	ExpressionStatement	"r = add_opcode_rel_addr ( reg , OP_JUMP , SIZE_OP_PUSH_IF_PEEK_NEXT )"	1071:3:24755:24819	702189	1	True				
ANR	702468	AssignmentExpression	"r = add_opcode_rel_addr ( reg , OP_JUMP , SIZE_OP_PUSH_IF_PEEK_NEXT )"		702189	0		=			
ANR	702469	Identifier	r		702189	0					
ANR	702470	CallExpression	"add_opcode_rel_addr ( reg , OP_JUMP , SIZE_OP_PUSH_IF_PEEK_NEXT )"		702189	1					
ANR	702471	Callee	add_opcode_rel_addr		702189	0					
ANR	702472	Identifier	add_opcode_rel_addr		702189	0					
ANR	702473	ArgumentList	reg		702189	1					
ANR	702474	Argument	reg		702189	0					
ANR	702475	Identifier	reg		702189	0					
ANR	702476	Argument	OP_JUMP		702189	1					
ANR	702477	Identifier	OP_JUMP		702189	0					
ANR	702478	Argument	SIZE_OP_PUSH_IF_PEEK_NEXT		702189	2					
ANR	702479	Identifier	SIZE_OP_PUSH_IF_PEEK_NEXT		702189	0					
ANR	702480	ElseStatement	else		702189	0					
ANR	702481	ExpressionStatement	"r = add_opcode_rel_addr ( reg , OP_JUMP , SIZE_OP_PUSH )"	1073:3:24830:24881	702189	0	True				
ANR	702482	AssignmentExpression	"r = add_opcode_rel_addr ( reg , OP_JUMP , SIZE_OP_PUSH )"		702189	0		=			
ANR	702483	Identifier	r		702189	0					
ANR	702484	CallExpression	"add_opcode_rel_addr ( reg , OP_JUMP , SIZE_OP_PUSH )"		702189	1					
ANR	702485	Callee	add_opcode_rel_addr		702189	0					
ANR	702486	Identifier	add_opcode_rel_addr		702189	0					
ANR	702487	ArgumentList	reg		702189	1					
ANR	702488	Argument	reg		702189	0					
ANR	702489	Identifier	reg		702189	0					
ANR	702490	Argument	OP_JUMP		702189	1					
ANR	702491	Identifier	OP_JUMP		702189	0					
ANR	702492	Argument	SIZE_OP_PUSH		702189	2					
ANR	702493	Identifier	SIZE_OP_PUSH		702189	0					
ANR	702494	ElseStatement	else		702189	0					
ANR	702495	CompoundStatement		44:11:1368:1368	702189	0					
ANR	702496	ExpressionStatement	"r = add_opcode_rel_addr ( reg , OP_JUMP , SIZE_OP_JUMP )"	1076:1:24905:24956	702189	0	True				
ANR	702497	AssignmentExpression	"r = add_opcode_rel_addr ( reg , OP_JUMP , SIZE_OP_JUMP )"		702189	0		=			
ANR	702498	Identifier	r		702189	0					
ANR	702499	CallExpression	"add_opcode_rel_addr ( reg , OP_JUMP , SIZE_OP_JUMP )"		702189	1					
ANR	702500	Callee	add_opcode_rel_addr		702189	0					
ANR	702501	Identifier	add_opcode_rel_addr		702189	0					
ANR	702502	ArgumentList	reg		702189	1					
ANR	702503	Argument	reg		702189	0					
ANR	702504	Identifier	reg		702189	0					
ANR	702505	Argument	OP_JUMP		702189	1					
ANR	702506	Identifier	OP_JUMP		702189	0					
ANR	702507	Argument	SIZE_OP_JUMP		702189	2					
ANR	702508	Identifier	SIZE_OP_JUMP		702189	0					
ANR	702509	IfStatement	if ( r )		702189	1					
ANR	702510	Condition	r	1078:10:24976:24976	702189	0	True				
ANR	702511	Identifier	r		702189	0					
ANR	702512	ReturnStatement	return r ;	1078:13:24979:24987	702189	1	True				
ANR	702513	Identifier	r		702189	0					
ANR	702514	ElseStatement	else		702189	0					
ANR	702515	CompoundStatement		49:9:1470:1470	702189	0					
ANR	702516	ExpressionStatement	"r = compile_tree_n_times ( qn -> target , qn -> lower , reg )"	1081:6:25012:25064	702189	0	True				
ANR	702517	AssignmentExpression	"r = compile_tree_n_times ( qn -> target , qn -> lower , reg )"		702189	0		=			
ANR	702518	Identifier	r		702189	0					
ANR	702519	CallExpression	"compile_tree_n_times ( qn -> target , qn -> lower , reg )"		702189	1					
ANR	702520	Callee	compile_tree_n_times		702189	0					
ANR	702521	Identifier	compile_tree_n_times		702189	0					
ANR	702522	ArgumentList	qn -> target		702189	1					
ANR	702523	Argument	qn -> target		702189	0					
ANR	702524	PtrMemberAccess	qn -> target		702189	0					
ANR	702525	Identifier	qn		702189	0					
ANR	702526	Identifier	target		702189	1					
ANR	702527	Argument	qn -> lower		702189	1					
ANR	702528	PtrMemberAccess	qn -> lower		702189	0					
ANR	702529	Identifier	qn		702189	0					
ANR	702530	Identifier	lower		702189	1					
ANR	702531	Argument	reg		702189	2					
ANR	702532	Identifier	reg		702189	0					
ANR	702533	IfStatement	if ( r )		702189	1					
ANR	702534	Condition	r	1082:10:25076:25076	702189	0	True				
ANR	702535	Identifier	r		702189	0					
ANR	702536	ReturnStatement	return r ;	1082:13:25079:25087	702189	1	True				
ANR	702537	Identifier	r		702189	0					
ANR	702538	IfStatement	if ( qn -> greedy )		702189	1					
ANR	702539	Condition	qn -> greedy	1085:8:25104:25113	702189	0	True				
ANR	702540	PtrMemberAccess	qn -> greedy		702189	0					
ANR	702541	Identifier	qn		702189	0					
ANR	702542	Identifier	greedy		702189	1					
ANR	702543	CompoundStatement		54:20:1582:1582	702189	1					
ANR	702544	IfStatement	if ( IS_NOT_NULL ( qn -> head_exact ) )		702189	0					
ANR	702545	Condition	IS_NOT_NULL ( qn -> head_exact )	1086:10:25128:25154	702189	0	True				
ANR	702546	CallExpression	IS_NOT_NULL ( qn -> head_exact )		702189	0					
ANR	702547	Callee	IS_NOT_NULL		702189	0					
ANR	702548	Identifier	IS_NOT_NULL		702189	0					
ANR	702549	ArgumentList	qn -> head_exact		702189	1					
ANR	702550	Argument	qn -> head_exact		702189	0					
ANR	702551	PtrMemberAccess	qn -> head_exact		702189	0					
ANR	702552	Identifier	qn		702189	0					
ANR	702553	Identifier	head_exact		702189	1					
ANR	702554	CompoundStatement		55:39:1623:1623	702189	1					
ANR	702555	ExpressionStatement	"r = add_opcode_rel_addr ( reg , OP_PUSH_OR_JUMP_EXACT1 , mod_tlen + SIZE_OP_JUMP )"	1087:1:25160:25245	702189	0	True				
ANR	702556	AssignmentExpression	"r = add_opcode_rel_addr ( reg , OP_PUSH_OR_JUMP_EXACT1 , mod_tlen + SIZE_OP_JUMP )"		702189	0		=			
ANR	702557	Identifier	r		702189	0					
ANR	702558	CallExpression	"add_opcode_rel_addr ( reg , OP_PUSH_OR_JUMP_EXACT1 , mod_tlen + SIZE_OP_JUMP )"		702189	1					
ANR	702559	Callee	add_opcode_rel_addr		702189	0					
ANR	702560	Identifier	add_opcode_rel_addr		702189	0					
ANR	702561	ArgumentList	reg		702189	1					
ANR	702562	Argument	reg		702189	0					
ANR	702563	Identifier	reg		702189	0					
ANR	702564	Argument	OP_PUSH_OR_JUMP_EXACT1		702189	1					
ANR	702565	Identifier	OP_PUSH_OR_JUMP_EXACT1		702189	0					
ANR	702566	Argument	mod_tlen + SIZE_OP_JUMP		702189	2					
ANR	702567	AdditiveExpression	mod_tlen + SIZE_OP_JUMP		702189	0		+			
ANR	702568	Identifier	mod_tlen		702189	0					
ANR	702569	Identifier	SIZE_OP_JUMP		702189	1					
ANR	702570	IfStatement	if ( r )		702189	1					
ANR	702571	Condition	r	1089:5:25252:25252	702189	0	True				
ANR	702572	Identifier	r		702189	0					
ANR	702573	ReturnStatement	return r ;	1089:8:25255:25263	702189	1	True				
ANR	702574	Identifier	r		702189	0					
ANR	702575	ExpressionStatement	"add_bytes ( reg , NSTR ( qn -> head_exact ) -> s , 1 )"	1090:1:25266:25308	702189	2	True				
ANR	702576	CallExpression	"add_bytes ( reg , NSTR ( qn -> head_exact ) -> s , 1 )"		702189	0					
ANR	702577	Callee	add_bytes		702189	0					
ANR	702578	Identifier	add_bytes		702189	0					
ANR	702579	ArgumentList	reg		702189	1					
ANR	702580	Argument	reg		702189	0					
ANR	702581	Identifier	reg		702189	0					
ANR	702582	Argument	NSTR ( qn -> head_exact ) -> s		702189	1					
ANR	702583	PtrMemberAccess	NSTR ( qn -> head_exact ) -> s		702189	0					
ANR	702584	CallExpression	NSTR ( qn -> head_exact )		702189	0					
ANR	702585	Callee	NSTR		702189	0					
ANR	702586	Identifier	NSTR		702189	0					
ANR	702587	ArgumentList	qn -> head_exact		702189	1					
ANR	702588	Argument	qn -> head_exact		702189	0					
ANR	702589	PtrMemberAccess	qn -> head_exact		702189	0					
ANR	702590	Identifier	qn		702189	0					
ANR	702591	Identifier	head_exact		702189	1					
ANR	702592	Identifier	s		702189	1					
ANR	702593	Argument	1		702189	2					
ANR	702594	PrimaryExpression	1		702189	0					
ANR	702595	ExpressionStatement	"r = compile_tree_empty_check ( qn -> target , reg , empty_info )"	1091:1:25311:25368	702189	3	True				
ANR	702596	AssignmentExpression	"r = compile_tree_empty_check ( qn -> target , reg , empty_info )"		702189	0		=			
ANR	702597	Identifier	r		702189	0					
ANR	702598	CallExpression	"compile_tree_empty_check ( qn -> target , reg , empty_info )"		702189	1					
ANR	702599	Callee	compile_tree_empty_check		702189	0					
ANR	702600	Identifier	compile_tree_empty_check		702189	0					
ANR	702601	ArgumentList	qn -> target		702189	1					
ANR	702602	Argument	qn -> target		702189	0					
ANR	702603	PtrMemberAccess	qn -> target		702189	0					
ANR	702604	Identifier	qn		702189	0					
ANR	702605	Identifier	target		702189	1					
ANR	702606	Argument	reg		702189	1					
ANR	702607	Identifier	reg		702189	0					
ANR	702608	Argument	empty_info		702189	2					
ANR	702609	Identifier	empty_info		702189	0					
ANR	702610	IfStatement	if ( r )		702189	4					
ANR	702611	Condition	r	1092:5:25375:25375	702189	0	True				
ANR	702612	Identifier	r		702189	0					
ANR	702613	ReturnStatement	return r ;	1092:8:25378:25386	702189	1	True				
ANR	702614	Identifier	r		702189	0					
ANR	702615	ExpressionStatement	"r = add_opcode_rel_addr ( reg , OP_JUMP , - ( mod_tlen + ( int ) SIZE_OP_JUMP + ( int ) SIZE_OP_PUSH_OR_JUMP_EXACT1 ) )"	1093:1:25389:25497	702189	5	True				
ANR	702616	AssignmentExpression	"r = add_opcode_rel_addr ( reg , OP_JUMP , - ( mod_tlen + ( int ) SIZE_OP_JUMP + ( int ) SIZE_OP_PUSH_OR_JUMP_EXACT1 ) )"		702189	0		=			
ANR	702617	Identifier	r		702189	0					
ANR	702618	CallExpression	"add_opcode_rel_addr ( reg , OP_JUMP , - ( mod_tlen + ( int ) SIZE_OP_JUMP + ( int ) SIZE_OP_PUSH_OR_JUMP_EXACT1 ) )"		702189	1					
ANR	702619	Callee	add_opcode_rel_addr		702189	0					
ANR	702620	Identifier	add_opcode_rel_addr		702189	0					
ANR	702621	ArgumentList	reg		702189	1					
ANR	702622	Argument	reg		702189	0					
ANR	702623	Identifier	reg		702189	0					
ANR	702624	Argument	OP_JUMP		702189	1					
ANR	702625	Identifier	OP_JUMP		702189	0					
ANR	702626	Argument	- ( mod_tlen + ( int ) SIZE_OP_JUMP + ( int ) SIZE_OP_PUSH_OR_JUMP_EXACT1 )		702189	2					
ANR	702627	UnaryOperationExpression	- ( mod_tlen + ( int ) SIZE_OP_JUMP + ( int ) SIZE_OP_PUSH_OR_JUMP_EXACT1 )		702189	0					
ANR	702628	UnaryOperator	-		702189	0					
ANR	702629	AdditiveExpression	mod_tlen + ( int ) SIZE_OP_JUMP + ( int ) SIZE_OP_PUSH_OR_JUMP_EXACT1		702189	1		+			
ANR	702630	Identifier	mod_tlen		702189	0					
ANR	702631	AdditiveExpression	( int ) SIZE_OP_JUMP + ( int ) SIZE_OP_PUSH_OR_JUMP_EXACT1		702189	1		+			
ANR	702632	CastExpression	( int ) SIZE_OP_JUMP		702189	0					
ANR	702633	CastTarget	int		702189	0					
ANR	702634	Identifier	SIZE_OP_JUMP		702189	1					
ANR	702635	CastExpression	( int ) SIZE_OP_PUSH_OR_JUMP_EXACT1		702189	1					
ANR	702636	CastTarget	int		702189	0					
ANR	702637	Identifier	SIZE_OP_PUSH_OR_JUMP_EXACT1		702189	1					
ANR	702638	ElseStatement	else		702189	0					
ANR	702639	IfStatement	if ( IS_NOT_NULL ( qn -> next_head_exact ) )		702189	0					
ANR	702640	Condition	IS_NOT_NULL ( qn -> next_head_exact )	1096:15:25522:25553	702189	0	True				
ANR	702641	CallExpression	IS_NOT_NULL ( qn -> next_head_exact )		702189	0					
ANR	702642	Callee	IS_NOT_NULL		702189	0					
ANR	702643	Identifier	IS_NOT_NULL		702189	0					
ANR	702644	ArgumentList	qn -> next_head_exact		702189	1					
ANR	702645	Argument	qn -> next_head_exact		702189	0					
ANR	702646	PtrMemberAccess	qn -> next_head_exact		702189	0					
ANR	702647	Identifier	qn		702189	0					
ANR	702648	Identifier	next_head_exact		702189	1					
ANR	702649	CompoundStatement		65:49:2022:2022	702189	1					
ANR	702650	ExpressionStatement	"r = add_opcode_rel_addr ( reg , OP_PUSH_IF_PEEK_NEXT , mod_tlen + SIZE_OP_JUMP )"	1097:1:25559:25638	702189	0	True				
ANR	702651	AssignmentExpression	"r = add_opcode_rel_addr ( reg , OP_PUSH_IF_PEEK_NEXT , mod_tlen + SIZE_OP_JUMP )"		702189	0		=			
ANR	702652	Identifier	r		702189	0					
ANR	702653	CallExpression	"add_opcode_rel_addr ( reg , OP_PUSH_IF_PEEK_NEXT , mod_tlen + SIZE_OP_JUMP )"		702189	1					
ANR	702654	Callee	add_opcode_rel_addr		702189	0					
ANR	702655	Identifier	add_opcode_rel_addr		702189	0					
ANR	702656	ArgumentList	reg		702189	1					
ANR	702657	Argument	reg		702189	0					
ANR	702658	Identifier	reg		702189	0					
ANR	702659	Argument	OP_PUSH_IF_PEEK_NEXT		702189	1					
ANR	702660	Identifier	OP_PUSH_IF_PEEK_NEXT		702189	0					
ANR	702661	Argument	mod_tlen + SIZE_OP_JUMP		702189	2					
ANR	702662	AdditiveExpression	mod_tlen + SIZE_OP_JUMP		702189	0		+			
ANR	702663	Identifier	mod_tlen		702189	0					
ANR	702664	Identifier	SIZE_OP_JUMP		702189	1					
ANR	702665	IfStatement	if ( r )		702189	1					
ANR	702666	Condition	r	1099:5:25645:25645	702189	0	True				
ANR	702667	Identifier	r		702189	0					
ANR	702668	ReturnStatement	return r ;	1099:8:25648:25656	702189	1	True				
ANR	702669	Identifier	r		702189	0					
ANR	702670	ExpressionStatement	"add_bytes ( reg , NSTR ( qn -> next_head_exact ) -> s , 1 )"	1100:1:25659:25706	702189	2	True				
ANR	702671	CallExpression	"add_bytes ( reg , NSTR ( qn -> next_head_exact ) -> s , 1 )"		702189	0					
ANR	702672	Callee	add_bytes		702189	0					
ANR	702673	Identifier	add_bytes		702189	0					
ANR	702674	ArgumentList	reg		702189	1					
ANR	702675	Argument	reg		702189	0					
ANR	702676	Identifier	reg		702189	0					
ANR	702677	Argument	NSTR ( qn -> next_head_exact ) -> s		702189	1					
ANR	702678	PtrMemberAccess	NSTR ( qn -> next_head_exact ) -> s		702189	0					
ANR	702679	CallExpression	NSTR ( qn -> next_head_exact )		702189	0					
ANR	702680	Callee	NSTR		702189	0					
ANR	702681	Identifier	NSTR		702189	0					
ANR	702682	ArgumentList	qn -> next_head_exact		702189	1					
ANR	702683	Argument	qn -> next_head_exact		702189	0					
ANR	702684	PtrMemberAccess	qn -> next_head_exact		702189	0					
ANR	702685	Identifier	qn		702189	0					
ANR	702686	Identifier	next_head_exact		702189	1					
ANR	702687	Identifier	s		702189	1					
ANR	702688	Argument	1		702189	2					
ANR	702689	PrimaryExpression	1		702189	0					
ANR	702690	ExpressionStatement	"r = compile_tree_empty_check ( qn -> target , reg , empty_info )"	1101:1:25709:25766	702189	3	True				
ANR	702691	AssignmentExpression	"r = compile_tree_empty_check ( qn -> target , reg , empty_info )"		702189	0		=			
ANR	702692	Identifier	r		702189	0					
ANR	702693	CallExpression	"compile_tree_empty_check ( qn -> target , reg , empty_info )"		702189	1					
ANR	702694	Callee	compile_tree_empty_check		702189	0					
ANR	702695	Identifier	compile_tree_empty_check		702189	0					
ANR	702696	ArgumentList	qn -> target		702189	1					
ANR	702697	Argument	qn -> target		702189	0					
ANR	702698	PtrMemberAccess	qn -> target		702189	0					
ANR	702699	Identifier	qn		702189	0					
ANR	702700	Identifier	target		702189	1					
ANR	702701	Argument	reg		702189	1					
ANR	702702	Identifier	reg		702189	0					
ANR	702703	Argument	empty_info		702189	2					
ANR	702704	Identifier	empty_info		702189	0					
ANR	702705	IfStatement	if ( r )		702189	4					
ANR	702706	Condition	r	1102:5:25773:25773	702189	0	True				
ANR	702707	Identifier	r		702189	0					
ANR	702708	ReturnStatement	return r ;	1102:8:25776:25784	702189	1	True				
ANR	702709	Identifier	r		702189	0					
ANR	702710	ExpressionStatement	"r = add_opcode_rel_addr ( reg , OP_JUMP , - ( mod_tlen + ( int ) SIZE_OP_JUMP + ( int ) SIZE_OP_PUSH_IF_PEEK_NEXT ) )"	1103:1:25787:25902	702189	5	True				
ANR	702711	AssignmentExpression	"r = add_opcode_rel_addr ( reg , OP_JUMP , - ( mod_tlen + ( int ) SIZE_OP_JUMP + ( int ) SIZE_OP_PUSH_IF_PEEK_NEXT ) )"		702189	0		=			
ANR	702712	Identifier	r		702189	0					
ANR	702713	CallExpression	"add_opcode_rel_addr ( reg , OP_JUMP , - ( mod_tlen + ( int ) SIZE_OP_JUMP + ( int ) SIZE_OP_PUSH_IF_PEEK_NEXT ) )"		702189	1					
ANR	702714	Callee	add_opcode_rel_addr		702189	0					
ANR	702715	Identifier	add_opcode_rel_addr		702189	0					
ANR	702716	ArgumentList	reg		702189	1					
ANR	702717	Argument	reg		702189	0					
ANR	702718	Identifier	reg		702189	0					
ANR	702719	Argument	OP_JUMP		702189	1					
ANR	702720	Identifier	OP_JUMP		702189	0					
ANR	702721	Argument	- ( mod_tlen + ( int ) SIZE_OP_JUMP + ( int ) SIZE_OP_PUSH_IF_PEEK_NEXT )		702189	2					
ANR	702722	UnaryOperationExpression	- ( mod_tlen + ( int ) SIZE_OP_JUMP + ( int ) SIZE_OP_PUSH_IF_PEEK_NEXT )		702189	0					
ANR	702723	UnaryOperator	-		702189	0					
ANR	702724	AdditiveExpression	mod_tlen + ( int ) SIZE_OP_JUMP + ( int ) SIZE_OP_PUSH_IF_PEEK_NEXT		702189	1		+			
ANR	702725	Identifier	mod_tlen		702189	0					
ANR	702726	AdditiveExpression	( int ) SIZE_OP_JUMP + ( int ) SIZE_OP_PUSH_IF_PEEK_NEXT		702189	1		+			
ANR	702727	CastExpression	( int ) SIZE_OP_JUMP		702189	0					
ANR	702728	CastTarget	int		702189	0					
ANR	702729	Identifier	SIZE_OP_JUMP		702189	1					
ANR	702730	CastExpression	( int ) SIZE_OP_PUSH_IF_PEEK_NEXT		702189	1					
ANR	702731	CastTarget	int		702189	0					
ANR	702732	Identifier	SIZE_OP_PUSH_IF_PEEK_NEXT		702189	1					
ANR	702733	ElseStatement	else		702189	0					
ANR	702734	CompoundStatement		75:11:2389:2389	702189	0					
ANR	702735	ExpressionStatement	"r = add_opcode_rel_addr ( reg , OP_PUSH , mod_tlen + SIZE_OP_JUMP )"	1107:1:25926:25988	702189	0	True				
ANR	702736	AssignmentExpression	"r = add_opcode_rel_addr ( reg , OP_PUSH , mod_tlen + SIZE_OP_JUMP )"		702189	0		=			
ANR	702737	Identifier	r		702189	0					
ANR	702738	CallExpression	"add_opcode_rel_addr ( reg , OP_PUSH , mod_tlen + SIZE_OP_JUMP )"		702189	1					
ANR	702739	Callee	add_opcode_rel_addr		702189	0					
ANR	702740	Identifier	add_opcode_rel_addr		702189	0					
ANR	702741	ArgumentList	reg		702189	1					
ANR	702742	Argument	reg		702189	0					
ANR	702743	Identifier	reg		702189	0					
ANR	702744	Argument	OP_PUSH		702189	1					
ANR	702745	Identifier	OP_PUSH		702189	0					
ANR	702746	Argument	mod_tlen + SIZE_OP_JUMP		702189	2					
ANR	702747	AdditiveExpression	mod_tlen + SIZE_OP_JUMP		702189	0		+			
ANR	702748	Identifier	mod_tlen		702189	0					
ANR	702749	Identifier	SIZE_OP_JUMP		702189	1					
ANR	702750	IfStatement	if ( r )		702189	1					
ANR	702751	Condition	r	1108:5:25995:25995	702189	0	True				
ANR	702752	Identifier	r		702189	0					
ANR	702753	ReturnStatement	return r ;	1108:8:25998:26006	702189	1	True				
ANR	702754	Identifier	r		702189	0					
ANR	702755	ExpressionStatement	"r = compile_tree_empty_check ( qn -> target , reg , empty_info )"	1109:1:26009:26066	702189	2	True				
ANR	702756	AssignmentExpression	"r = compile_tree_empty_check ( qn -> target , reg , empty_info )"		702189	0		=			
ANR	702757	Identifier	r		702189	0					
ANR	702758	CallExpression	"compile_tree_empty_check ( qn -> target , reg , empty_info )"		702189	1					
ANR	702759	Callee	compile_tree_empty_check		702189	0					
ANR	702760	Identifier	compile_tree_empty_check		702189	0					
ANR	702761	ArgumentList	qn -> target		702189	1					
ANR	702762	Argument	qn -> target		702189	0					
ANR	702763	PtrMemberAccess	qn -> target		702189	0					
ANR	702764	Identifier	qn		702189	0					
ANR	702765	Identifier	target		702189	1					
ANR	702766	Argument	reg		702189	1					
ANR	702767	Identifier	reg		702189	0					
ANR	702768	Argument	empty_info		702189	2					
ANR	702769	Identifier	empty_info		702189	0					
ANR	702770	IfStatement	if ( r )		702189	3					
ANR	702771	Condition	r	1110:5:26073:26073	702189	0	True				
ANR	702772	Identifier	r		702189	0					
ANR	702773	ReturnStatement	return r ;	1110:8:26076:26084	702189	1	True				
ANR	702774	Identifier	r		702189	0					
ANR	702775	ExpressionStatement	"r = add_opcode_rel_addr ( reg , OP_JUMP , - ( mod_tlen + ( int ) SIZE_OP_JUMP + ( int ) SIZE_OP_PUSH ) )"	1111:1:26087:26186	702189	4	True				
ANR	702776	AssignmentExpression	"r = add_opcode_rel_addr ( reg , OP_JUMP , - ( mod_tlen + ( int ) SIZE_OP_JUMP + ( int ) SIZE_OP_PUSH ) )"		702189	0		=			
ANR	702777	Identifier	r		702189	0					
ANR	702778	CallExpression	"add_opcode_rel_addr ( reg , OP_JUMP , - ( mod_tlen + ( int ) SIZE_OP_JUMP + ( int ) SIZE_OP_PUSH ) )"		702189	1					
ANR	702779	Callee	add_opcode_rel_addr		702189	0					
ANR	702780	Identifier	add_opcode_rel_addr		702189	0					
ANR	702781	ArgumentList	reg		702189	1					
ANR	702782	Argument	reg		702189	0					
ANR	702783	Identifier	reg		702189	0					
ANR	702784	Argument	OP_JUMP		702189	1					
ANR	702785	Identifier	OP_JUMP		702189	0					
ANR	702786	Argument	- ( mod_tlen + ( int ) SIZE_OP_JUMP + ( int ) SIZE_OP_PUSH )		702189	2					
ANR	702787	UnaryOperationExpression	- ( mod_tlen + ( int ) SIZE_OP_JUMP + ( int ) SIZE_OP_PUSH )		702189	0					
ANR	702788	UnaryOperator	-		702189	0					
ANR	702789	AdditiveExpression	mod_tlen + ( int ) SIZE_OP_JUMP + ( int ) SIZE_OP_PUSH		702189	1		+			
ANR	702790	Identifier	mod_tlen		702189	0					
ANR	702791	AdditiveExpression	( int ) SIZE_OP_JUMP + ( int ) SIZE_OP_PUSH		702189	1		+			
ANR	702792	CastExpression	( int ) SIZE_OP_JUMP		702189	0					
ANR	702793	CastTarget	int		702189	0					
ANR	702794	Identifier	SIZE_OP_JUMP		702189	1					
ANR	702795	CastExpression	( int ) SIZE_OP_PUSH		702189	1					
ANR	702796	CastTarget	int		702189	0					
ANR	702797	Identifier	SIZE_OP_PUSH		702189	1					
ANR	702798	ElseStatement	else		702189	0					
ANR	702799	CompoundStatement		84:9:2677:2677	702189	0					
ANR	702800	ExpressionStatement	"r = add_opcode_rel_addr ( reg , OP_JUMP , mod_tlen )"	1116:6:26219:26266	702189	0	True				
ANR	702801	AssignmentExpression	"r = add_opcode_rel_addr ( reg , OP_JUMP , mod_tlen )"		702189	0		=			
ANR	702802	Identifier	r		702189	0					
ANR	702803	CallExpression	"add_opcode_rel_addr ( reg , OP_JUMP , mod_tlen )"		702189	1					
ANR	702804	Callee	add_opcode_rel_addr		702189	0					
ANR	702805	Identifier	add_opcode_rel_addr		702189	0					
ANR	702806	ArgumentList	reg		702189	1					
ANR	702807	Argument	reg		702189	0					
ANR	702808	Identifier	reg		702189	0					
ANR	702809	Argument	OP_JUMP		702189	1					
ANR	702810	Identifier	OP_JUMP		702189	0					
ANR	702811	Argument	mod_tlen		702189	2					
ANR	702812	Identifier	mod_tlen		702189	0					
ANR	702813	IfStatement	if ( r )		702189	1					
ANR	702814	Condition	r	1117:10:26278:26278	702189	0	True				
ANR	702815	Identifier	r		702189	0					
ANR	702816	ReturnStatement	return r ;	1117:13:26281:26289	702189	1	True				
ANR	702817	Identifier	r		702189	0					
ANR	702818	ExpressionStatement	"r = compile_tree_empty_check ( qn -> target , reg , empty_info )"	1118:6:26297:26354	702189	2	True				
ANR	702819	AssignmentExpression	"r = compile_tree_empty_check ( qn -> target , reg , empty_info )"		702189	0		=			
ANR	702820	Identifier	r		702189	0					
ANR	702821	CallExpression	"compile_tree_empty_check ( qn -> target , reg , empty_info )"		702189	1					
ANR	702822	Callee	compile_tree_empty_check		702189	0					
ANR	702823	Identifier	compile_tree_empty_check		702189	0					
ANR	702824	ArgumentList	qn -> target		702189	1					
ANR	702825	Argument	qn -> target		702189	0					
ANR	702826	PtrMemberAccess	qn -> target		702189	0					
ANR	702827	Identifier	qn		702189	0					
ANR	702828	Identifier	target		702189	1					
ANR	702829	Argument	reg		702189	1					
ANR	702830	Identifier	reg		702189	0					
ANR	702831	Argument	empty_info		702189	2					
ANR	702832	Identifier	empty_info		702189	0					
ANR	702833	IfStatement	if ( r )		702189	3					
ANR	702834	Condition	r	1119:10:26366:26366	702189	0	True				
ANR	702835	Identifier	r		702189	0					
ANR	702836	ReturnStatement	return r ;	1119:13:26369:26377	702189	1	True				
ANR	702837	Identifier	r		702189	0					
ANR	702838	ExpressionStatement	"r = add_opcode_rel_addr ( reg , OP_PUSH , - ( mod_tlen + ( int ) SIZE_OP_PUSH ) )"	1120:6:26385:26456	702189	4	True				
ANR	702839	AssignmentExpression	"r = add_opcode_rel_addr ( reg , OP_PUSH , - ( mod_tlen + ( int ) SIZE_OP_PUSH ) )"		702189	0		=			
ANR	702840	Identifier	r		702189	0					
ANR	702841	CallExpression	"add_opcode_rel_addr ( reg , OP_PUSH , - ( mod_tlen + ( int ) SIZE_OP_PUSH ) )"		702189	1					
ANR	702842	Callee	add_opcode_rel_addr		702189	0					
ANR	702843	Identifier	add_opcode_rel_addr		702189	0					
ANR	702844	ArgumentList	reg		702189	1					
ANR	702845	Argument	reg		702189	0					
ANR	702846	Identifier	reg		702189	0					
ANR	702847	Argument	OP_PUSH		702189	1					
ANR	702848	Identifier	OP_PUSH		702189	0					
ANR	702849	Argument	- ( mod_tlen + ( int ) SIZE_OP_PUSH )		702189	2					
ANR	702850	UnaryOperationExpression	- ( mod_tlen + ( int ) SIZE_OP_PUSH )		702189	0					
ANR	702851	UnaryOperator	-		702189	0					
ANR	702852	AdditiveExpression	mod_tlen + ( int ) SIZE_OP_PUSH		702189	1		+			
ANR	702853	Identifier	mod_tlen		702189	0					
ANR	702854	CastExpression	( int ) SIZE_OP_PUSH		702189	1					
ANR	702855	CastTarget	int		702189	0					
ANR	702856	Identifier	SIZE_OP_PUSH		702189	1					
ANR	702857	ElseStatement	else		702189	0					
ANR	702858	IfStatement	if ( qn -> upper == 0 && qn -> is_refered != 0 )		702189	0					
ANR	702859	Condition	qn -> upper == 0 && qn -> is_refered != 0	1123:11:26479:26515	702189	0	True				
ANR	702860	AndExpression	qn -> upper == 0 && qn -> is_refered != 0		702189	0		&&			
ANR	702861	EqualityExpression	qn -> upper == 0		702189	0		==			
ANR	702862	PtrMemberAccess	qn -> upper		702189	0					
ANR	702863	Identifier	qn		702189	0					
ANR	702864	Identifier	upper		702189	1					
ANR	702865	PrimaryExpression	0		702189	1					
ANR	702866	EqualityExpression	qn -> is_refered != 0		702189	1		!=			
ANR	702867	PtrMemberAccess	qn -> is_refered		702189	0					
ANR	702868	Identifier	qn		702189	0					
ANR	702869	Identifier	is_refered		702189	1					
ANR	702870	PrimaryExpression	0		702189	1					
ANR	702871	CompoundStatement		92:50:2984:2984	702189	1					
ANR	702872	ExpressionStatement	"r = add_opcode_rel_addr ( reg , OP_JUMP , tlen )"	1124:4:26544:26587	702189	0	True				
ANR	702873	AssignmentExpression	"r = add_opcode_rel_addr ( reg , OP_JUMP , tlen )"		702189	0		=			
ANR	702874	Identifier	r		702189	0					
ANR	702875	CallExpression	"add_opcode_rel_addr ( reg , OP_JUMP , tlen )"		702189	1					
ANR	702876	Callee	add_opcode_rel_addr		702189	0					
ANR	702877	Identifier	add_opcode_rel_addr		702189	0					
ANR	702878	ArgumentList	reg		702189	1					
ANR	702879	Argument	reg		702189	0					
ANR	702880	Identifier	reg		702189	0					
ANR	702881	Argument	OP_JUMP		702189	1					
ANR	702882	Identifier	OP_JUMP		702189	0					
ANR	702883	Argument	tlen		702189	2					
ANR	702884	Identifier	tlen		702189	0					
ANR	702885	IfStatement	if ( r )		702189	1					
ANR	702886	Condition	r	1125:8:26597:26597	702189	0	True				
ANR	702887	Identifier	r		702189	0					
ANR	702888	ReturnStatement	return r ;	1125:11:26600:26608	702189	1	True				
ANR	702889	Identifier	r		702189	0					
ANR	702890	ExpressionStatement	"r = compile_tree ( qn -> target , reg )"	1126:4:26614:26647	702189	2	True				
ANR	702891	AssignmentExpression	"r = compile_tree ( qn -> target , reg )"		702189	0		=			
ANR	702892	Identifier	r		702189	0					
ANR	702893	CallExpression	"compile_tree ( qn -> target , reg )"		702189	1					
ANR	702894	Callee	compile_tree		702189	0					
ANR	702895	Identifier	compile_tree		702189	0					
ANR	702896	ArgumentList	qn -> target		702189	1					
ANR	702897	Argument	qn -> target		702189	0					
ANR	702898	PtrMemberAccess	qn -> target		702189	0					
ANR	702899	Identifier	qn		702189	0					
ANR	702900	Identifier	target		702189	1					
ANR	702901	Argument	reg		702189	1					
ANR	702902	Identifier	reg		702189	0					
ANR	702903	ElseStatement	else		702189	0					
ANR	702904	IfStatement	if ( ! infinite && qn -> greedy && ( qn -> upper == 1 || ( tlen + SIZE_OP_PUSH ) * qn -> upper <= QUANTIFIER_EXPAND_LIMIT_SIZE ) )		702189	0					
ANR	702905	Condition	! infinite && qn -> greedy && ( qn -> upper == 1 || ( tlen + SIZE_OP_PUSH ) * qn -> upper <= QUANTIFIER_EXPAND_LIMIT_SIZE )	1128:11:26664:26820	702189	0	True				
ANR	702906	AndExpression	! infinite && qn -> greedy && ( qn -> upper == 1 || ( tlen + SIZE_OP_PUSH ) * qn -> upper <= QUANTIFIER_EXPAND_LIMIT_SIZE )		702189	0		&&			
ANR	702907	UnaryOperationExpression	! infinite		702189	0					
ANR	702908	UnaryOperator	!		702189	0					
ANR	702909	Identifier	infinite		702189	1					
ANR	702910	AndExpression	qn -> greedy && ( qn -> upper == 1 || ( tlen + SIZE_OP_PUSH ) * qn -> upper <= QUANTIFIER_EXPAND_LIMIT_SIZE )		702189	1		&&			
ANR	702911	PtrMemberAccess	qn -> greedy		702189	0					
ANR	702912	Identifier	qn		702189	0					
ANR	702913	Identifier	greedy		702189	1					
ANR	702914	OrExpression	qn -> upper == 1 || ( tlen + SIZE_OP_PUSH ) * qn -> upper <= QUANTIFIER_EXPAND_LIMIT_SIZE		702189	1		||			
ANR	702915	EqualityExpression	qn -> upper == 1		702189	0		==			
ANR	702916	PtrMemberAccess	qn -> upper		702189	0					
ANR	702917	Identifier	qn		702189	0					
ANR	702918	Identifier	upper		702189	1					
ANR	702919	PrimaryExpression	1		702189	1					
ANR	702920	RelationalExpression	( tlen + SIZE_OP_PUSH ) * qn -> upper <= QUANTIFIER_EXPAND_LIMIT_SIZE		702189	1		<=			
ANR	702921	MultiplicativeExpression	( tlen + SIZE_OP_PUSH ) * qn -> upper		702189	0		*			
ANR	702922	AdditiveExpression	tlen + SIZE_OP_PUSH		702189	0		+			
ANR	702923	Identifier	tlen		702189	0					
ANR	702924	Identifier	SIZE_OP_PUSH		702189	1					
ANR	702925	PtrMemberAccess	qn -> upper		702189	1					
ANR	702926	Identifier	qn		702189	0					
ANR	702927	Identifier	upper		702189	1					
ANR	702928	Identifier	QUANTIFIER_EXPAND_LIMIT_SIZE		702189	1					
ANR	702929	CompoundStatement		100:4:3295:3324	702189	1					
ANR	702930	IdentifierDeclStatement	int n = qn -> upper - qn -> lower ;	1131:4:26829:26858	702189	0	True				
ANR	702931	IdentifierDecl	n = qn -> upper - qn -> lower		702189	0					
ANR	702932	IdentifierDeclType	int		702189	0					
ANR	702933	Identifier	n		702189	1					
ANR	702934	AssignmentExpression	n = qn -> upper - qn -> lower		702189	2		=			
ANR	702935	Identifier	n		702189	0					
ANR	702936	AdditiveExpression	qn -> upper - qn -> lower		702189	1		-			
ANR	702937	PtrMemberAccess	qn -> upper		702189	0					
ANR	702938	Identifier	qn		702189	0					
ANR	702939	Identifier	upper		702189	1					
ANR	702940	PtrMemberAccess	qn -> lower		702189	1					
ANR	702941	Identifier	qn		702189	0					
ANR	702942	Identifier	lower		702189	1					
ANR	702943	ExpressionStatement	"r = compile_tree_n_times ( qn -> target , qn -> lower , reg )"	1133:4:26865:26917	702189	1	True				
ANR	702944	AssignmentExpression	"r = compile_tree_n_times ( qn -> target , qn -> lower , reg )"		702189	0		=			
ANR	702945	Identifier	r		702189	0					
ANR	702946	CallExpression	"compile_tree_n_times ( qn -> target , qn -> lower , reg )"		702189	1					
ANR	702947	Callee	compile_tree_n_times		702189	0					
ANR	702948	Identifier	compile_tree_n_times		702189	0					
ANR	702949	ArgumentList	qn -> target		702189	1					
ANR	702950	Argument	qn -> target		702189	0					
ANR	702951	PtrMemberAccess	qn -> target		702189	0					
ANR	702952	Identifier	qn		702189	0					
ANR	702953	Identifier	target		702189	1					
ANR	702954	Argument	qn -> lower		702189	1					
ANR	702955	PtrMemberAccess	qn -> lower		702189	0					
ANR	702956	Identifier	qn		702189	0					
ANR	702957	Identifier	lower		702189	1					
ANR	702958	Argument	reg		702189	2					
ANR	702959	Identifier	reg		702189	0					
ANR	702960	IfStatement	if ( r )		702189	2					
ANR	702961	Condition	r	1134:8:26927:26927	702189	0	True				
ANR	702962	Identifier	r		702189	0					
ANR	702963	ReturnStatement	return r ;	1134:11:26930:26938	702189	1	True				
ANR	702964	Identifier	r		702189	0					
ANR	702965	ForStatement	for ( i = 0 ; i < n ; i ++ )		702189	3					
ANR	702966	ForInit	i = 0 ;	1136:9:26950:26955	702189	0	True				
ANR	702967	AssignmentExpression	i = 0		702189	0		=			
ANR	702968	Identifier	i		702189	0					
ANR	702969	PrimaryExpression	0		702189	1					
ANR	702970	Condition	i < n	1136:16:26957:26961	702189	1	True				
ANR	702971	RelationalExpression	i < n		702189	0		<			
ANR	702972	Identifier	i		702189	0					
ANR	702973	Identifier	n		702189	1					
ANR	702974	PostIncDecOperationExpression	i ++	1136:23:26964:26966	702189	2	True				
ANR	702975	Identifier	i		702189	0					
ANR	702976	IncDec	++		702189	1					
ANR	702977	CompoundStatement		105:28:3435:3435	702189	3					
ANR	702978	ExpressionStatement	"r = add_opcode_rel_addr ( reg , OP_PUSH , ( n - i ) * tlen + ( n - i - 1 ) * SIZE_OP_PUSH )"	1137:6:26977:27065	702189	0	True				
ANR	702979	AssignmentExpression	"r = add_opcode_rel_addr ( reg , OP_PUSH , ( n - i ) * tlen + ( n - i - 1 ) * SIZE_OP_PUSH )"		702189	0		=			
ANR	702980	Identifier	r		702189	0					
ANR	702981	CallExpression	"add_opcode_rel_addr ( reg , OP_PUSH , ( n - i ) * tlen + ( n - i - 1 ) * SIZE_OP_PUSH )"		702189	1					
ANR	702982	Callee	add_opcode_rel_addr		702189	0					
ANR	702983	Identifier	add_opcode_rel_addr		702189	0					
ANR	702984	ArgumentList	reg		702189	1					
ANR	702985	Argument	reg		702189	0					
ANR	702986	Identifier	reg		702189	0					
ANR	702987	Argument	OP_PUSH		702189	1					
ANR	702988	Identifier	OP_PUSH		702189	0					
ANR	702989	Argument	( n - i ) * tlen + ( n - i - 1 ) * SIZE_OP_PUSH		702189	2					
ANR	702990	AdditiveExpression	( n - i ) * tlen + ( n - i - 1 ) * SIZE_OP_PUSH		702189	0		+			
ANR	702991	MultiplicativeExpression	( n - i ) * tlen		702189	0		*			
ANR	702992	AdditiveExpression	n - i		702189	0		-			
ANR	702993	Identifier	n		702189	0					
ANR	702994	Identifier	i		702189	1					
ANR	702995	Identifier	tlen		702189	1					
ANR	702996	MultiplicativeExpression	( n - i - 1 ) * SIZE_OP_PUSH		702189	1		*			
ANR	702997	AdditiveExpression	n - i - 1		702189	0		-			
ANR	702998	Identifier	n		702189	0					
ANR	702999	AdditiveExpression	i - 1		702189	1		-			
ANR	703000	Identifier	i		702189	0					
ANR	703001	PrimaryExpression	1		702189	1					
ANR	703002	Identifier	SIZE_OP_PUSH		702189	1					
ANR	703003	IfStatement	if ( r )		702189	1					
ANR	703004	Condition	r	1139:10:27077:27077	702189	0	True				
ANR	703005	Identifier	r		702189	0					
ANR	703006	ReturnStatement	return r ;	1139:13:27080:27088	702189	1	True				
ANR	703007	Identifier	r		702189	0					
ANR	703008	ExpressionStatement	"r = compile_tree ( qn -> target , reg )"	1140:6:27096:27129	702189	2	True				
ANR	703009	AssignmentExpression	"r = compile_tree ( qn -> target , reg )"		702189	0		=			
ANR	703010	Identifier	r		702189	0					
ANR	703011	CallExpression	"compile_tree ( qn -> target , reg )"		702189	1					
ANR	703012	Callee	compile_tree		702189	0					
ANR	703013	Identifier	compile_tree		702189	0					
ANR	703014	ArgumentList	qn -> target		702189	1					
ANR	703015	Argument	qn -> target		702189	0					
ANR	703016	PtrMemberAccess	qn -> target		702189	0					
ANR	703017	Identifier	qn		702189	0					
ANR	703018	Identifier	target		702189	1					
ANR	703019	Argument	reg		702189	1					
ANR	703020	Identifier	reg		702189	0					
ANR	703021	IfStatement	if ( r )		702189	3					
ANR	703022	Condition	r	1141:10:27141:27141	702189	0	True				
ANR	703023	Identifier	r		702189	0					
ANR	703024	ReturnStatement	return r ;	1141:13:27144:27152	702189	1	True				
ANR	703025	Identifier	r		702189	0					
ANR	703026	ElseStatement	else		702189	0					
ANR	703027	IfStatement	if ( ! qn -> greedy && qn -> upper == 1 && qn -> lower == 0 )		702189	0					
ANR	703028	Condition	! qn -> greedy && qn -> upper == 1 && qn -> lower == 0	1144:11:27175:27221	702189	0	True				
ANR	703029	AndExpression	! qn -> greedy && qn -> upper == 1 && qn -> lower == 0		702189	0		&&			
ANR	703030	UnaryOperationExpression	! qn -> greedy		702189	0					
ANR	703031	UnaryOperator	!		702189	0					
ANR	703032	PtrMemberAccess	qn -> greedy		702189	1					
ANR	703033	Identifier	qn		702189	0					
ANR	703034	Identifier	greedy		702189	1					
ANR	703035	AndExpression	qn -> upper == 1 && qn -> lower == 0		702189	1		&&			
ANR	703036	EqualityExpression	qn -> upper == 1		702189	0		==			
ANR	703037	PtrMemberAccess	qn -> upper		702189	0					
ANR	703038	Identifier	qn		702189	0					
ANR	703039	Identifier	upper		702189	1					
ANR	703040	PrimaryExpression	1		702189	1					
ANR	703041	EqualityExpression	qn -> lower == 0		702189	1		==			
ANR	703042	PtrMemberAccess	qn -> lower		702189	0					
ANR	703043	Identifier	qn		702189	0					
ANR	703044	Identifier	lower		702189	1					
ANR	703045	PrimaryExpression	0		702189	1					
ANR	703046	CompoundStatement		113:60:3690:3690	702189	1					
ANR	703047	ExpressionStatement	"r = add_opcode_rel_addr ( reg , OP_PUSH , SIZE_OP_JUMP )"	1145:4:27241:27292	702189	0	True				
ANR	703048	AssignmentExpression	"r = add_opcode_rel_addr ( reg , OP_PUSH , SIZE_OP_JUMP )"		702189	0		=			
ANR	703049	Identifier	r		702189	0					
ANR	703050	CallExpression	"add_opcode_rel_addr ( reg , OP_PUSH , SIZE_OP_JUMP )"		702189	1					
ANR	703051	Callee	add_opcode_rel_addr		702189	0					
ANR	703052	Identifier	add_opcode_rel_addr		702189	0					
ANR	703053	ArgumentList	reg		702189	1					
ANR	703054	Argument	reg		702189	0					
ANR	703055	Identifier	reg		702189	0					
ANR	703056	Argument	OP_PUSH		702189	1					
ANR	703057	Identifier	OP_PUSH		702189	0					
ANR	703058	Argument	SIZE_OP_JUMP		702189	2					
ANR	703059	Identifier	SIZE_OP_JUMP		702189	0					
ANR	703060	IfStatement	if ( r )		702189	1					
ANR	703061	Condition	r	1146:8:27302:27302	702189	0	True				
ANR	703062	Identifier	r		702189	0					
ANR	703063	ReturnStatement	return r ;	1146:11:27305:27313	702189	1	True				
ANR	703064	Identifier	r		702189	0					
ANR	703065	ExpressionStatement	"r = add_opcode_rel_addr ( reg , OP_JUMP , tlen )"	1147:4:27319:27362	702189	2	True				
ANR	703066	AssignmentExpression	"r = add_opcode_rel_addr ( reg , OP_JUMP , tlen )"		702189	0		=			
ANR	703067	Identifier	r		702189	0					
ANR	703068	CallExpression	"add_opcode_rel_addr ( reg , OP_JUMP , tlen )"		702189	1					
ANR	703069	Callee	add_opcode_rel_addr		702189	0					
ANR	703070	Identifier	add_opcode_rel_addr		702189	0					
ANR	703071	ArgumentList	reg		702189	1					
ANR	703072	Argument	reg		702189	0					
ANR	703073	Identifier	reg		702189	0					
ANR	703074	Argument	OP_JUMP		702189	1					
ANR	703075	Identifier	OP_JUMP		702189	0					
ANR	703076	Argument	tlen		702189	2					
ANR	703077	Identifier	tlen		702189	0					
ANR	703078	IfStatement	if ( r )		702189	3					
ANR	703079	Condition	r	1148:8:27372:27372	702189	0	True				
ANR	703080	Identifier	r		702189	0					
ANR	703081	ReturnStatement	return r ;	1148:11:27375:27383	702189	1	True				
ANR	703082	Identifier	r		702189	0					
ANR	703083	ExpressionStatement	"r = compile_tree ( qn -> target , reg )"	1149:4:27389:27422	702189	4	True				
ANR	703084	AssignmentExpression	"r = compile_tree ( qn -> target , reg )"		702189	0		=			
ANR	703085	Identifier	r		702189	0					
ANR	703086	CallExpression	"compile_tree ( qn -> target , reg )"		702189	1					
ANR	703087	Callee	compile_tree		702189	0					
ANR	703088	Identifier	compile_tree		702189	0					
ANR	703089	ArgumentList	qn -> target		702189	1					
ANR	703090	Argument	qn -> target		702189	0					
ANR	703091	PtrMemberAccess	qn -> target		702189	0					
ANR	703092	Identifier	qn		702189	0					
ANR	703093	Identifier	target		702189	1					
ANR	703094	Argument	reg		702189	1					
ANR	703095	Identifier	reg		702189	0					
ANR	703096	ElseStatement	else		702189	0					
ANR	703097	CompoundStatement		120:7:3901:3901	702189	0					
ANR	703098	ExpressionStatement	"r = compile_range_repeat_node ( qn , mod_tlen , empty_info , reg )"	1152:4:27441:27501	702189	0	True				
ANR	703099	AssignmentExpression	"r = compile_range_repeat_node ( qn , mod_tlen , empty_info , reg )"		702189	0		=			
ANR	703100	Identifier	r		702189	0					
ANR	703101	CallExpression	"compile_range_repeat_node ( qn , mod_tlen , empty_info , reg )"		702189	1					
ANR	703102	Callee	compile_range_repeat_node		702189	0					
ANR	703103	Identifier	compile_range_repeat_node		702189	0					
ANR	703104	ArgumentList	qn		702189	1					
ANR	703105	Argument	qn		702189	0					
ANR	703106	Identifier	qn		702189	0					
ANR	703107	Argument	mod_tlen		702189	1					
ANR	703108	Identifier	mod_tlen		702189	0					
ANR	703109	Argument	empty_info		702189	2					
ANR	703110	Identifier	empty_info		702189	0					
ANR	703111	Argument	reg		702189	3					
ANR	703112	Identifier	reg		702189	0					
ANR	703113	ReturnStatement	return r ;	1154:2:27509:27517	702189	8	True				
ANR	703114	Identifier	r		702189	0					
ANR	703115	ReturnType	static int		702189	1					
ANR	703116	Identifier	compile_quantifier_node		702189	2					
ANR	703117	ParameterList	"QtfrNode * qn , regex_t * reg"		702189	3					
ANR	703118	Parameter	QtfrNode * qn	1031:24:23505:23516	702189	0	True				
ANR	703119	ParameterType	QtfrNode *		702189	0					
ANR	703120	Identifier	qn		702189	1					
ANR	703121	Parameter	regex_t * reg	1031:38:23519:23530	702189	1	True				
ANR	703122	ParameterType	regex_t *		702189	0					
ANR	703123	Identifier	reg		702189	1					
ANR	703124	CFGEntryNode	ENTRY		702189		True				
ANR	703125	CFGExitNode	EXIT		702189		True				
ANR	703126	Symbol	OP_ANYCHAR_STAR_PEEK_NEXT		702189						
ANR	703127	Symbol	compile_range_repeat_node		702189						
ANR	703128	Symbol	OP_ANYCHAR_ML_STAR_PEEK_NEXT		702189						
ANR	703129	Symbol	reg		702189						
ANR	703130	Symbol	reg -> options		702189						
ANR	703131	Symbol	tlen		702189						
ANR	703132	Symbol	OP_ANYCHAR_STAR		702189						
ANR	703133	Symbol	IS_REPEAT_INFINITE		702189						
ANR	703134	Symbol	add_opcode		702189						
ANR	703135	Symbol	SIZE_OP_NULL_CHECK_START		702189						
ANR	703136	Symbol	SIZE_OP_PUSH_IF_PEEK_NEXT		702189						
ANR	703137	Symbol	qn		702189						
ANR	703138	Symbol	SIZE_OP_JUMP		702189						
ANR	703139	Symbol	OP_JUMP		702189						
ANR	703140	Symbol	OP_ANYCHAR_ML_STAR		702189						
ANR	703141	Symbol	NSTR		702189						
ANR	703142	Symbol	* NSTR		702189						
ANR	703143	Symbol	qn -> target		702189						
ANR	703144	Symbol	OP_PUSH_OR_JUMP_EXACT1		702189						
ANR	703145	Symbol	qn -> upper		702189						
ANR	703146	Symbol	OP_PUSH_IF_PEEK_NEXT		702189						
ANR	703147	Symbol	qn -> is_refered		702189						
ANR	703148	Symbol	NSTR ( qn -> next_head_exact ) -> s		702189						
ANR	703149	Symbol	NSTR ( qn -> head_exact ) -> s		702189						
ANR	703150	Symbol	empty_info		702189						
ANR	703151	Symbol	SIZE_OP_PUSH_OR_JUMP_EXACT1		702189						
ANR	703152	Symbol	* qn		702189						
ANR	703153	Symbol	qn -> target_empty_info		702189						
ANR	703154	Symbol	add_bytes		702189						
ANR	703155	Symbol	qn -> greedy		702189						
ANR	703156	Symbol	IS_NOT_NULL		702189						
ANR	703157	Symbol	infinite		702189						
ANR	703158	Symbol	compile_tree_n_times		702189						
ANR	703159	Symbol	OP_PUSH		702189						
ANR	703160	Symbol	compile_tree_empty_check		702189						
ANR	703161	Symbol	qn -> next_head_exact		702189						
ANR	703162	Symbol	SIZE_OP_NULL_CHECK_END		702189						
ANR	703163	Symbol	qn -> lower		702189						
ANR	703164	Symbol	add_opcode_rel_addr		702189						
ANR	703165	Symbol	compile_length_tree		702189						
ANR	703166	Symbol	i		702189						
ANR	703167	Symbol	SIZE_OP_PUSH		702189						
ANR	703168	Symbol	is_anychar_star_quantifier		702189						
ANR	703169	Symbol	qn -> head_exact		702189						
ANR	703170	Symbol	n		702189						
ANR	703171	Symbol	r		702189						
ANR	703172	Symbol	QUANTIFIER_EXPAND_LIMIT_SIZE		702189						
ANR	703173	Symbol	compile_tree		702189						
ANR	703174	Symbol	mod_tlen		702189						
ANR	703175	Symbol	IS_MULTILINE		702189						
ANR	703176	Symbol	* reg		702189						
ANR	703177	Function	compile_length_option_node	1158:0:27567:28012							
ANR	703178	FunctionDef	"compile_length_option_node (EncloseNode * node , regex_t * reg)"		703177	0					
ANR	703179	CompoundStatement		1160:0:27638:28012	703177	0					
ANR	703180	IdentifierDeclStatement	int tlen ;	1161:2:27642:27650	703177	0	True				
ANR	703181	IdentifierDecl	tlen		703177	0					
ANR	703182	IdentifierDeclType	int		703177	0					
ANR	703183	Identifier	tlen		703177	1					
ANR	703184	IdentifierDeclStatement	OnigOptionType prev = reg -> options ;	1162:2:27654:27688	703177	1	True				
ANR	703185	IdentifierDecl	prev = reg -> options		703177	0					
ANR	703186	IdentifierDeclType	OnigOptionType		703177	0					
ANR	703187	Identifier	prev		703177	1					
ANR	703188	AssignmentExpression	prev = reg -> options		703177	2		=			
ANR	703189	Identifier	prev		703177	0					
ANR	703190	PtrMemberAccess	reg -> options		703177	1					
ANR	703191	Identifier	reg		703177	0					
ANR	703192	Identifier	options		703177	1					
ANR	703193	ExpressionStatement	reg -> options = node -> option	1164:2:27693:27720	703177	2	True				
ANR	703194	AssignmentExpression	reg -> options = node -> option		703177	0		=			
ANR	703195	PtrMemberAccess	reg -> options		703177	0					
ANR	703196	Identifier	reg		703177	0					
ANR	703197	Identifier	options		703177	1					
ANR	703198	PtrMemberAccess	node -> option		703177	1					
ANR	703199	Identifier	node		703177	0					
ANR	703200	Identifier	option		703177	1					
ANR	703201	ExpressionStatement	"tlen = compile_length_tree ( node -> target , reg )"	1165:2:27724:27769	703177	3	True				
ANR	703202	AssignmentExpression	"tlen = compile_length_tree ( node -> target , reg )"		703177	0		=			
ANR	703203	Identifier	tlen		703177	0					
ANR	703204	CallExpression	"compile_length_tree ( node -> target , reg )"		703177	1					
ANR	703205	Callee	compile_length_tree		703177	0					
ANR	703206	Identifier	compile_length_tree		703177	0					
ANR	703207	ArgumentList	node -> target		703177	1					
ANR	703208	Argument	node -> target		703177	0					
ANR	703209	PtrMemberAccess	node -> target		703177	0					
ANR	703210	Identifier	node		703177	0					
ANR	703211	Identifier	target		703177	1					
ANR	703212	Argument	reg		703177	1					
ANR	703213	Identifier	reg		703177	0					
ANR	703214	ExpressionStatement	reg -> options = prev	1166:2:27773:27792	703177	4	True				
ANR	703215	AssignmentExpression	reg -> options = prev		703177	0		=			
ANR	703216	PtrMemberAccess	reg -> options		703177	0					
ANR	703217	Identifier	reg		703177	0					
ANR	703218	Identifier	options		703177	1					
ANR	703219	Identifier	prev		703177	1					
ANR	703220	IfStatement	if ( tlen < 0 )		703177	5					
ANR	703221	Condition	tlen < 0	1168:6:27801:27808	703177	0	True				
ANR	703222	RelationalExpression	tlen < 0		703177	0		<			
ANR	703223	Identifier	tlen		703177	0					
ANR	703224	PrimaryExpression	0		703177	1					
ANR	703225	ReturnStatement	return tlen ;	1168:16:27811:27822	703177	1	True				
ANR	703226	Identifier	tlen		703177	0					
ANR	703227	IfStatement	if ( IS_DYNAMIC_OPTION ( prev ^ node -> option ) )		703177	6					
ANR	703228	Condition	IS_DYNAMIC_OPTION ( prev ^ node -> option )	1170:6:27831:27868	703177	0	True				
ANR	703229	CallExpression	IS_DYNAMIC_OPTION ( prev ^ node -> option )		703177	0					
ANR	703230	Callee	IS_DYNAMIC_OPTION		703177	0					
ANR	703231	Identifier	IS_DYNAMIC_OPTION		703177	0					
ANR	703232	ArgumentList	prev ^ node -> option		703177	1					
ANR	703233	Argument	prev ^ node -> option		703177	0					
ANR	703234	ExclusiveOrExpression	prev ^ node -> option		703177	0		^			
ANR	703235	Identifier	prev		703177	0					
ANR	703236	PtrMemberAccess	node -> option		703177	1					
ANR	703237	Identifier	node		703177	0					
ANR	703238	Identifier	option		703177	1					
ANR	703239	CompoundStatement		11:46:232:232	703177	1					
ANR	703240	ReturnStatement	return SIZE_OP_SET_OPTION_PUSH + SIZE_OP_SET_OPTION + SIZE_OP_FAIL + tlen + SIZE_OP_SET_OPTION ;	1171:4:27877:27982	703177	0	True				
ANR	703241	AdditiveExpression	SIZE_OP_SET_OPTION_PUSH + SIZE_OP_SET_OPTION + SIZE_OP_FAIL + tlen + SIZE_OP_SET_OPTION		703177	0		+			
ANR	703242	Identifier	SIZE_OP_SET_OPTION_PUSH		703177	0					
ANR	703243	AdditiveExpression	SIZE_OP_SET_OPTION + SIZE_OP_FAIL + tlen + SIZE_OP_SET_OPTION		703177	1		+			
ANR	703244	Identifier	SIZE_OP_SET_OPTION		703177	0					
ANR	703245	AdditiveExpression	SIZE_OP_FAIL + tlen + SIZE_OP_SET_OPTION		703177	1		+			
ANR	703246	Identifier	SIZE_OP_FAIL		703177	0					
ANR	703247	AdditiveExpression	tlen + SIZE_OP_SET_OPTION		703177	1		+			
ANR	703248	Identifier	tlen		703177	0					
ANR	703249	Identifier	SIZE_OP_SET_OPTION		703177	1					
ANR	703250	ElseStatement	else		703177	0					
ANR	703251	ReturnStatement	return tlen ;	1175:4:27999:28010	703177	0	True				
ANR	703252	Identifier	tlen		703177	0					
ANR	703253	ReturnType	static int		703177	1					
ANR	703254	Identifier	compile_length_option_node		703177	2					
ANR	703255	ParameterList	"EncloseNode * node , regex_t * reg"		703177	3					
ANR	703256	Parameter	EncloseNode * node	1159:27:27605:27621	703177	0	True				
ANR	703257	ParameterType	EncloseNode *		703177	0					
ANR	703258	Identifier	node		703177	1					
ANR	703259	Parameter	regex_t * reg	1159:46:27624:27635	703177	1	True				
ANR	703260	ParameterType	regex_t *		703177	0					
ANR	703261	Identifier	reg		703177	1					
ANR	703262	CFGEntryNode	ENTRY		703177		True				
ANR	703263	CFGExitNode	EXIT		703177		True				
ANR	703264	Symbol	compile_length_tree		703177						
ANR	703265	Symbol	prev		703177						
ANR	703266	Symbol	node -> option		703177						
ANR	703267	Symbol	SIZE_OP_SET_OPTION		703177						
ANR	703268	Symbol	IS_DYNAMIC_OPTION		703177						
ANR	703269	Symbol	SIZE_OP_FAIL		703177						
ANR	703270	Symbol	node		703177						
ANR	703271	Symbol	reg		703177						
ANR	703272	Symbol	reg -> options		703177						
ANR	703273	Symbol	tlen		703177						
ANR	703274	Symbol	SIZE_OP_SET_OPTION_PUSH		703177						
ANR	703275	Symbol	* node		703177						
ANR	703276	Symbol	node -> target		703177						
ANR	703277	Symbol	* reg		703177						
ANR	703278	Function	compile_option_node	1178:0:28015:28630							
ANR	703279	FunctionDef	"compile_option_node (EncloseNode * node , regex_t * reg)"		703278	0					
ANR	703280	CompoundStatement		1180:0:28079:28630	703278	0					
ANR	703281	IdentifierDeclStatement	int r ;	1181:2:28083:28088	703278	0	True				
ANR	703282	IdentifierDecl	r		703278	0					
ANR	703283	IdentifierDeclType	int		703278	0					
ANR	703284	Identifier	r		703278	1					
ANR	703285	IdentifierDeclStatement	OnigOptionType prev = reg -> options ;	1182:2:28092:28126	703278	1	True				
ANR	703286	IdentifierDecl	prev = reg -> options		703278	0					
ANR	703287	IdentifierDeclType	OnigOptionType		703278	0					
ANR	703288	Identifier	prev		703278	1					
ANR	703289	AssignmentExpression	prev = reg -> options		703278	2		=			
ANR	703290	Identifier	prev		703278	0					
ANR	703291	PtrMemberAccess	reg -> options		703278	1					
ANR	703292	Identifier	reg		703278	0					
ANR	703293	Identifier	options		703278	1					
ANR	703294	IfStatement	if ( IS_DYNAMIC_OPTION ( prev ^ node -> option ) )		703278	2					
ANR	703295	Condition	IS_DYNAMIC_OPTION ( prev ^ node -> option )	1184:6:28135:28172	703278	0	True				
ANR	703296	CallExpression	IS_DYNAMIC_OPTION ( prev ^ node -> option )		703278	0					
ANR	703297	Callee	IS_DYNAMIC_OPTION		703278	0					
ANR	703298	Identifier	IS_DYNAMIC_OPTION		703278	0					
ANR	703299	ArgumentList	prev ^ node -> option		703278	1					
ANR	703300	Argument	prev ^ node -> option		703278	0					
ANR	703301	ExclusiveOrExpression	prev ^ node -> option		703278	0		^			
ANR	703302	Identifier	prev		703278	0					
ANR	703303	PtrMemberAccess	node -> option		703278	1					
ANR	703304	Identifier	node		703278	0					
ANR	703305	Identifier	option		703278	1					
ANR	703306	CompoundStatement		5:46:95:95	703278	1					
ANR	703307	ExpressionStatement	"r = add_opcode_option ( reg , OP_SET_OPTION_PUSH , node -> option )"	1185:4:28181:28241	703278	0	True				
ANR	703308	AssignmentExpression	"r = add_opcode_option ( reg , OP_SET_OPTION_PUSH , node -> option )"		703278	0		=			
ANR	703309	Identifier	r		703278	0					
ANR	703310	CallExpression	"add_opcode_option ( reg , OP_SET_OPTION_PUSH , node -> option )"		703278	1					
ANR	703311	Callee	add_opcode_option		703278	0					
ANR	703312	Identifier	add_opcode_option		703278	0					
ANR	703313	ArgumentList	reg		703278	1					
ANR	703314	Argument	reg		703278	0					
ANR	703315	Identifier	reg		703278	0					
ANR	703316	Argument	OP_SET_OPTION_PUSH		703278	1					
ANR	703317	Identifier	OP_SET_OPTION_PUSH		703278	0					
ANR	703318	Argument	node -> option		703278	2					
ANR	703319	PtrMemberAccess	node -> option		703278	0					
ANR	703320	Identifier	node		703278	0					
ANR	703321	Identifier	option		703278	1					
ANR	703322	IfStatement	if ( r )		703278	1					
ANR	703323	Condition	r	1186:8:28251:28251	703278	0	True				
ANR	703324	Identifier	r		703278	0					
ANR	703325	ReturnStatement	return r ;	1186:11:28254:28262	703278	1	True				
ANR	703326	Identifier	r		703278	0					
ANR	703327	ExpressionStatement	"r = add_opcode_option ( reg , OP_SET_OPTION , prev )"	1187:4:28268:28315	703278	2	True				
ANR	703328	AssignmentExpression	"r = add_opcode_option ( reg , OP_SET_OPTION , prev )"		703278	0		=			
ANR	703329	Identifier	r		703278	0					
ANR	703330	CallExpression	"add_opcode_option ( reg , OP_SET_OPTION , prev )"		703278	1					
ANR	703331	Callee	add_opcode_option		703278	0					
ANR	703332	Identifier	add_opcode_option		703278	0					
ANR	703333	ArgumentList	reg		703278	1					
ANR	703334	Argument	reg		703278	0					
ANR	703335	Identifier	reg		703278	0					
ANR	703336	Argument	OP_SET_OPTION		703278	1					
ANR	703337	Identifier	OP_SET_OPTION		703278	0					
ANR	703338	Argument	prev		703278	2					
ANR	703339	Identifier	prev		703278	0					
ANR	703340	IfStatement	if ( r )		703278	3					
ANR	703341	Condition	r	1188:8:28325:28325	703278	0	True				
ANR	703342	Identifier	r		703278	0					
ANR	703343	ReturnStatement	return r ;	1188:11:28328:28336	703278	1	True				
ANR	703344	Identifier	r		703278	0					
ANR	703345	ExpressionStatement	"r = add_opcode ( reg , OP_FAIL )"	1189:4:28342:28370	703278	4	True				
ANR	703346	AssignmentExpression	"r = add_opcode ( reg , OP_FAIL )"		703278	0		=			
ANR	703347	Identifier	r		703278	0					
ANR	703348	CallExpression	"add_opcode ( reg , OP_FAIL )"		703278	1					
ANR	703349	Callee	add_opcode		703278	0					
ANR	703350	Identifier	add_opcode		703278	0					
ANR	703351	ArgumentList	reg		703278	1					
ANR	703352	Argument	reg		703278	0					
ANR	703353	Identifier	reg		703278	0					
ANR	703354	Argument	OP_FAIL		703278	1					
ANR	703355	Identifier	OP_FAIL		703278	0					
ANR	703356	IfStatement	if ( r )		703278	5					
ANR	703357	Condition	r	1190:8:28380:28380	703278	0	True				
ANR	703358	Identifier	r		703278	0					
ANR	703359	ReturnStatement	return r ;	1190:11:28383:28391	703278	1	True				
ANR	703360	Identifier	r		703278	0					
ANR	703361	ExpressionStatement	reg -> options = node -> option	1193:2:28400:28427	703278	3	True				
ANR	703362	AssignmentExpression	reg -> options = node -> option		703278	0		=			
ANR	703363	PtrMemberAccess	reg -> options		703278	0					
ANR	703364	Identifier	reg		703278	0					
ANR	703365	Identifier	options		703278	1					
ANR	703366	PtrMemberAccess	node -> option		703278	1					
ANR	703367	Identifier	node		703278	0					
ANR	703368	Identifier	option		703278	1					
ANR	703369	ExpressionStatement	"r = compile_tree ( node -> target , reg )"	1194:2:28431:28466	703278	4	True				
ANR	703370	AssignmentExpression	"r = compile_tree ( node -> target , reg )"		703278	0		=			
ANR	703371	Identifier	r		703278	0					
ANR	703372	CallExpression	"compile_tree ( node -> target , reg )"		703278	1					
ANR	703373	Callee	compile_tree		703278	0					
ANR	703374	Identifier	compile_tree		703278	0					
ANR	703375	ArgumentList	node -> target		703278	1					
ANR	703376	Argument	node -> target		703278	0					
ANR	703377	PtrMemberAccess	node -> target		703278	0					
ANR	703378	Identifier	node		703278	0					
ANR	703379	Identifier	target		703278	1					
ANR	703380	Argument	reg		703278	1					
ANR	703381	Identifier	reg		703278	0					
ANR	703382	ExpressionStatement	reg -> options = prev	1195:2:28470:28489	703278	5	True				
ANR	703383	AssignmentExpression	reg -> options = prev		703278	0		=			
ANR	703384	PtrMemberAccess	reg -> options		703278	0					
ANR	703385	Identifier	reg		703278	0					
ANR	703386	Identifier	options		703278	1					
ANR	703387	Identifier	prev		703278	1					
ANR	703388	IfStatement	if ( IS_DYNAMIC_OPTION ( prev ^ node -> option ) )		703278	6					
ANR	703389	Condition	IS_DYNAMIC_OPTION ( prev ^ node -> option )	1197:6:28498:28535	703278	0	True				
ANR	703390	CallExpression	IS_DYNAMIC_OPTION ( prev ^ node -> option )		703278	0					
ANR	703391	Callee	IS_DYNAMIC_OPTION		703278	0					
ANR	703392	Identifier	IS_DYNAMIC_OPTION		703278	0					
ANR	703393	ArgumentList	prev ^ node -> option		703278	1					
ANR	703394	Argument	prev ^ node -> option		703278	0					
ANR	703395	ExclusiveOrExpression	prev ^ node -> option		703278	0		^			
ANR	703396	Identifier	prev		703278	0					
ANR	703397	PtrMemberAccess	node -> option		703278	1					
ANR	703398	Identifier	node		703278	0					
ANR	703399	Identifier	option		703278	1					
ANR	703400	CompoundStatement		18:46:458:458	703278	1					
ANR	703401	IfStatement	if ( r )		703278	0					
ANR	703402	Condition	r	1198:8:28548:28548	703278	0	True				
ANR	703403	Identifier	r		703278	0					
ANR	703404	ReturnStatement	return r ;	1198:11:28551:28559	703278	1	True				
ANR	703405	Identifier	r		703278	0					
ANR	703406	ExpressionStatement	"r = add_opcode_option ( reg , OP_SET_OPTION , prev )"	1199:4:28565:28612	703278	1	True				
ANR	703407	AssignmentExpression	"r = add_opcode_option ( reg , OP_SET_OPTION , prev )"		703278	0		=			
ANR	703408	Identifier	r		703278	0					
ANR	703409	CallExpression	"add_opcode_option ( reg , OP_SET_OPTION , prev )"		703278	1					
ANR	703410	Callee	add_opcode_option		703278	0					
ANR	703411	Identifier	add_opcode_option		703278	0					
ANR	703412	ArgumentList	reg		703278	1					
ANR	703413	Argument	reg		703278	0					
ANR	703414	Identifier	reg		703278	0					
ANR	703415	Argument	OP_SET_OPTION		703278	1					
ANR	703416	Identifier	OP_SET_OPTION		703278	0					
ANR	703417	Argument	prev		703278	2					
ANR	703418	Identifier	prev		703278	0					
ANR	703419	ReturnStatement	return r ;	1201:2:28620:28628	703278	7	True				
ANR	703420	Identifier	r		703278	0					
ANR	703421	ReturnType	static int		703278	1					
ANR	703422	Identifier	compile_option_node		703278	2					
ANR	703423	ParameterList	"EncloseNode * node , regex_t * reg"		703278	3					
ANR	703424	Parameter	EncloseNode * node	1179:20:28046:28062	703278	0	True				
ANR	703425	ParameterType	EncloseNode *		703278	0					
ANR	703426	Identifier	node		703278	1					
ANR	703427	Parameter	regex_t * reg	1179:39:28065:28076	703278	1	True				
ANR	703428	ParameterType	regex_t *		703278	0					
ANR	703429	Identifier	reg		703278	1					
ANR	703430	CFGEntryNode	ENTRY		703278		True				
ANR	703431	CFGExitNode	EXIT		703278		True				
ANR	703432	Symbol	OP_SET_OPTION_PUSH		703278						
ANR	703433	Symbol	prev		703278						
ANR	703434	Symbol	node -> option		703278						
ANR	703435	Symbol	IS_DYNAMIC_OPTION		703278						
ANR	703436	Symbol	node		703278						
ANR	703437	Symbol	add_opcode_option		703278						
ANR	703438	Symbol	r		703278						
ANR	703439	Symbol	OP_SET_OPTION		703278						
ANR	703440	Symbol	compile_tree		703278						
ANR	703441	Symbol	reg		703278						
ANR	703442	Symbol	reg -> options		703278						
ANR	703443	Symbol	OP_FAIL		703278						
ANR	703444	Symbol	* node		703278						
ANR	703445	Symbol	add_opcode		703278						
ANR	703446	Symbol	node -> target		703278						
ANR	703447	Symbol	* reg		703278						
ANR	703448	Function	compile_length_enclose_node	1204:0:28633:30159							
ANR	703449	FunctionDef	"compile_length_enclose_node (EncloseNode * node , regex_t * reg)"		703448	0					
ANR	703450	CompoundStatement		1206:0:28705:30159	703448	0					
ANR	703451	IdentifierDeclStatement	int len ;	1207:2:28709:28716	703448	0	True				
ANR	703452	IdentifierDecl	len		703448	0					
ANR	703453	IdentifierDeclType	int		703448	0					
ANR	703454	Identifier	len		703448	1					
ANR	703455	IdentifierDeclStatement	int tlen ;	1208:2:28720:28728	703448	1	True				
ANR	703456	IdentifierDecl	tlen		703448	0					
ANR	703457	IdentifierDeclType	int		703448	0					
ANR	703458	Identifier	tlen		703448	1					
ANR	703459	IfStatement	if ( node -> type == ENCLOSE_OPTION )		703448	2					
ANR	703460	Condition	node -> type == ENCLOSE_OPTION	1210:6:28737:28764	703448	0	True				
ANR	703461	EqualityExpression	node -> type == ENCLOSE_OPTION		703448	0		==			
ANR	703462	PtrMemberAccess	node -> type		703448	0					
ANR	703463	Identifier	node		703448	0					
ANR	703464	Identifier	type		703448	1					
ANR	703465	Identifier	ENCLOSE_OPTION		703448	1					
ANR	703466	ReturnStatement	"return compile_length_option_node ( node , reg ) ;"	1211:4:28771:28815	703448	1	True				
ANR	703467	CallExpression	"compile_length_option_node ( node , reg )"		703448	0					
ANR	703468	Callee	compile_length_option_node		703448	0					
ANR	703469	Identifier	compile_length_option_node		703448	0					
ANR	703470	ArgumentList	node		703448	1					
ANR	703471	Argument	node		703448	0					
ANR	703472	Identifier	node		703448	0					
ANR	703473	Argument	reg		703448	1					
ANR	703474	Identifier	reg		703448	0					
ANR	703475	IfStatement	if ( node -> target )		703448	3					
ANR	703476	Condition	node -> target	1213:6:28824:28835	703448	0	True				
ANR	703477	PtrMemberAccess	node -> target		703448	0					
ANR	703478	Identifier	node		703448	0					
ANR	703479	Identifier	target		703448	1					
ANR	703480	CompoundStatement		8:20:132:132	703448	1					
ANR	703481	ExpressionStatement	"tlen = compile_length_tree ( node -> target , reg )"	1214:4:28844:28889	703448	0	True				
ANR	703482	AssignmentExpression	"tlen = compile_length_tree ( node -> target , reg )"		703448	0		=			
ANR	703483	Identifier	tlen		703448	0					
ANR	703484	CallExpression	"compile_length_tree ( node -> target , reg )"		703448	1					
ANR	703485	Callee	compile_length_tree		703448	0					
ANR	703486	Identifier	compile_length_tree		703448	0					
ANR	703487	ArgumentList	node -> target		703448	1					
ANR	703488	Argument	node -> target		703448	0					
ANR	703489	PtrMemberAccess	node -> target		703448	0					
ANR	703490	Identifier	node		703448	0					
ANR	703491	Identifier	target		703448	1					
ANR	703492	Argument	reg		703448	1					
ANR	703493	Identifier	reg		703448	0					
ANR	703494	IfStatement	if ( tlen < 0 )		703448	1					
ANR	703495	Condition	tlen < 0	1215:8:28899:28906	703448	0	True				
ANR	703496	RelationalExpression	tlen < 0		703448	0		<			
ANR	703497	Identifier	tlen		703448	0					
ANR	703498	PrimaryExpression	0		703448	1					
ANR	703499	ReturnStatement	return tlen ;	1215:18:28909:28920	703448	1	True				
ANR	703500	Identifier	tlen		703448	0					
ANR	703501	ElseStatement	else		703448	0					
ANR	703502	ExpressionStatement	tlen = 0	1218:4:28937:28945	703448	0	True				
ANR	703503	AssignmentExpression	tlen = 0		703448	0		=			
ANR	703504	Identifier	tlen		703448	0					
ANR	703505	PrimaryExpression	0		703448	1					
ANR	703506	SwitchStatement	switch ( node -> type )		703448	4					
ANR	703507	Condition	node -> type	1220:10:28958:28967	703448	0	True				
ANR	703508	PtrMemberAccess	node -> type		703448	0					
ANR	703509	Identifier	node		703448	0					
ANR	703510	Identifier	type		703448	1					
ANR	703511	CompoundStatement		15:22:264:264	703448	1					
ANR	703512	Label	case ENCLOSE_MEMORY :	1221:2:28974:28993	703448	0	True				
ANR	703513	Identifier	ENCLOSE_MEMORY		703448	0					
ANR	703514	IfStatement	if ( IS_ENCLOSE_CALLED ( node ) )		703448	1					
ANR	703515	Condition	IS_ENCLOSE_CALLED ( node )	1223:8:29026:29048	703448	0	True				
ANR	703516	CallExpression	IS_ENCLOSE_CALLED ( node )		703448	0					
ANR	703517	Callee	IS_ENCLOSE_CALLED		703448	0					
ANR	703518	Identifier	IS_ENCLOSE_CALLED		703448	0					
ANR	703519	ArgumentList	node		703448	1					
ANR	703520	Argument	node		703448	0					
ANR	703521	Identifier	node		703448	0					
ANR	703522	CompoundStatement		18:33:345:345	703448	1					
ANR	703523	ExpressionStatement	len = SIZE_OP_MEMORY_START_PUSH + tlen + SIZE_OP_CALL + SIZE_OP_JUMP + SIZE_OP_RETURN	1224:6:29059:29147	703448	0	True				
ANR	703524	AssignmentExpression	len = SIZE_OP_MEMORY_START_PUSH + tlen + SIZE_OP_CALL + SIZE_OP_JUMP + SIZE_OP_RETURN		703448	0		=			
ANR	703525	Identifier	len		703448	0					
ANR	703526	AdditiveExpression	SIZE_OP_MEMORY_START_PUSH + tlen + SIZE_OP_CALL + SIZE_OP_JUMP + SIZE_OP_RETURN		703448	1		+			
ANR	703527	Identifier	SIZE_OP_MEMORY_START_PUSH		703448	0					
ANR	703528	AdditiveExpression	tlen + SIZE_OP_CALL + SIZE_OP_JUMP + SIZE_OP_RETURN		703448	1		+			
ANR	703529	Identifier	tlen		703448	0					
ANR	703530	AdditiveExpression	SIZE_OP_CALL + SIZE_OP_JUMP + SIZE_OP_RETURN		703448	1		+			
ANR	703531	Identifier	SIZE_OP_CALL		703448	0					
ANR	703532	AdditiveExpression	SIZE_OP_JUMP + SIZE_OP_RETURN		703448	1		+			
ANR	703533	Identifier	SIZE_OP_JUMP		703448	0					
ANR	703534	Identifier	SIZE_OP_RETURN		703448	1					
ANR	703535	IfStatement	"if ( BIT_STATUS_AT ( reg -> bt_mem_end , node -> regnum ) )"		703448	1					
ANR	703536	Condition	"BIT_STATUS_AT ( reg -> bt_mem_end , node -> regnum )"	1226:10:29159:29202	703448	0	True				
ANR	703537	CallExpression	"BIT_STATUS_AT ( reg -> bt_mem_end , node -> regnum )"		703448	0					
ANR	703538	Callee	BIT_STATUS_AT		703448	0					
ANR	703539	Identifier	BIT_STATUS_AT		703448	0					
ANR	703540	ArgumentList	reg -> bt_mem_end		703448	1					
ANR	703541	Argument	reg -> bt_mem_end		703448	0					
ANR	703542	PtrMemberAccess	reg -> bt_mem_end		703448	0					
ANR	703543	Identifier	reg		703448	0					
ANR	703544	Identifier	bt_mem_end		703448	1					
ANR	703545	Argument	node -> regnum		703448	1					
ANR	703546	PtrMemberAccess	node -> regnum		703448	0					
ANR	703547	Identifier	node		703448	0					
ANR	703548	Identifier	regnum		703448	1					
ANR	703549	ExpressionStatement	len += ( IS_ENCLOSE_RECURSION ( node ) ? SIZE_OP_MEMORY_END_PUSH_REC : SIZE_OP_MEMORY_END_PUSH )	1227:1:29206:29299	703448	1	True				
ANR	703550	AssignmentExpression	len += ( IS_ENCLOSE_RECURSION ( node ) ? SIZE_OP_MEMORY_END_PUSH_REC : SIZE_OP_MEMORY_END_PUSH )		703448	0		+=			
ANR	703551	Identifier	len		703448	0					
ANR	703552	ConditionalExpression	IS_ENCLOSE_RECURSION ( node ) ? SIZE_OP_MEMORY_END_PUSH_REC : SIZE_OP_MEMORY_END_PUSH		703448	1					
ANR	703553	Condition	IS_ENCLOSE_RECURSION ( node )		703448	0					
ANR	703554	CallExpression	IS_ENCLOSE_RECURSION ( node )		703448	0					
ANR	703555	Callee	IS_ENCLOSE_RECURSION		703448	0					
ANR	703556	Identifier	IS_ENCLOSE_RECURSION		703448	0					
ANR	703557	ArgumentList	node		703448	1					
ANR	703558	Argument	node		703448	0					
ANR	703559	Identifier	node		703448	0					
ANR	703560	Identifier	SIZE_OP_MEMORY_END_PUSH_REC		703448	1					
ANR	703561	Identifier	SIZE_OP_MEMORY_END_PUSH		703448	2					
ANR	703562	ElseStatement	else		703448	0					
ANR	703563	ExpressionStatement	len += ( IS_ENCLOSE_RECURSION ( node ) ? SIZE_OP_MEMORY_END_REC : SIZE_OP_MEMORY_END )	1230:1:29313:29396	703448	0	True				
ANR	703564	AssignmentExpression	len += ( IS_ENCLOSE_RECURSION ( node ) ? SIZE_OP_MEMORY_END_REC : SIZE_OP_MEMORY_END )		703448	0		+=			
ANR	703565	Identifier	len		703448	0					
ANR	703566	ConditionalExpression	IS_ENCLOSE_RECURSION ( node ) ? SIZE_OP_MEMORY_END_REC : SIZE_OP_MEMORY_END		703448	1					
ANR	703567	Condition	IS_ENCLOSE_RECURSION ( node )		703448	0					
ANR	703568	CallExpression	IS_ENCLOSE_RECURSION ( node )		703448	0					
ANR	703569	Callee	IS_ENCLOSE_RECURSION		703448	0					
ANR	703570	Identifier	IS_ENCLOSE_RECURSION		703448	0					
ANR	703571	ArgumentList	node		703448	1					
ANR	703572	Argument	node		703448	0					
ANR	703573	Identifier	node		703448	0					
ANR	703574	Identifier	SIZE_OP_MEMORY_END_REC		703448	1					
ANR	703575	Identifier	SIZE_OP_MEMORY_END		703448	2					
ANR	703576	ElseStatement	else		703448	0					
ANR	703577	CompoundStatement		30:4:718:718	703448	0					
ANR	703578	IfStatement	"if ( BIT_STATUS_AT ( reg -> bt_mem_start , node -> regnum ) )"		703448	0					
ANR	703579	Condition	"BIT_STATUS_AT ( reg -> bt_mem_start , node -> regnum )"	1236:10:29436:29481	703448	0	True				
ANR	703580	CallExpression	"BIT_STATUS_AT ( reg -> bt_mem_start , node -> regnum )"		703448	0					
ANR	703581	Callee	BIT_STATUS_AT		703448	0					
ANR	703582	Identifier	BIT_STATUS_AT		703448	0					
ANR	703583	ArgumentList	reg -> bt_mem_start		703448	1					
ANR	703584	Argument	reg -> bt_mem_start		703448	0					
ANR	703585	PtrMemberAccess	reg -> bt_mem_start		703448	0					
ANR	703586	Identifier	reg		703448	0					
ANR	703587	Identifier	bt_mem_start		703448	1					
ANR	703588	Argument	node -> regnum		703448	1					
ANR	703589	PtrMemberAccess	node -> regnum		703448	0					
ANR	703590	Identifier	node		703448	0					
ANR	703591	Identifier	regnum		703448	1					
ANR	703592	ExpressionStatement	len = SIZE_OP_MEMORY_START_PUSH	1237:1:29485:29516	703448	1	True				
ANR	703593	AssignmentExpression	len = SIZE_OP_MEMORY_START_PUSH		703448	0		=			
ANR	703594	Identifier	len		703448	0					
ANR	703595	Identifier	SIZE_OP_MEMORY_START_PUSH		703448	1					
ANR	703596	ElseStatement	else		703448	0					
ANR	703597	ExpressionStatement	len = SIZE_OP_MEMORY_START	1239:1:29530:29556	703448	0	True				
ANR	703598	AssignmentExpression	len = SIZE_OP_MEMORY_START		703448	0		=			
ANR	703599	Identifier	len		703448	0					
ANR	703600	Identifier	SIZE_OP_MEMORY_START		703448	1					
ANR	703601	ExpressionStatement	"len += tlen + ( BIT_STATUS_AT ( reg -> bt_mem_end , node -> regnum ) ? SIZE_OP_MEMORY_END_PUSH : SIZE_OP_MEMORY_END )"	1241:6:29565:29679	703448	1	True				
ANR	703602	AssignmentExpression	"len += tlen + ( BIT_STATUS_AT ( reg -> bt_mem_end , node -> regnum ) ? SIZE_OP_MEMORY_END_PUSH : SIZE_OP_MEMORY_END )"		703448	0		+=			
ANR	703603	Identifier	len		703448	0					
ANR	703604	AdditiveExpression	"tlen + ( BIT_STATUS_AT ( reg -> bt_mem_end , node -> regnum ) ? SIZE_OP_MEMORY_END_PUSH : SIZE_OP_MEMORY_END )"		703448	1		+			
ANR	703605	Identifier	tlen		703448	0					
ANR	703606	ConditionalExpression	"BIT_STATUS_AT ( reg -> bt_mem_end , node -> regnum ) ? SIZE_OP_MEMORY_END_PUSH : SIZE_OP_MEMORY_END"		703448	1					
ANR	703607	Condition	"BIT_STATUS_AT ( reg -> bt_mem_end , node -> regnum )"		703448	0					
ANR	703608	CallExpression	"BIT_STATUS_AT ( reg -> bt_mem_end , node -> regnum )"		703448	0					
ANR	703609	Callee	BIT_STATUS_AT		703448	0					
ANR	703610	Identifier	BIT_STATUS_AT		703448	0					
ANR	703611	ArgumentList	reg -> bt_mem_end		703448	1					
ANR	703612	Argument	reg -> bt_mem_end		703448	0					
ANR	703613	PtrMemberAccess	reg -> bt_mem_end		703448	0					
ANR	703614	Identifier	reg		703448	0					
ANR	703615	Identifier	bt_mem_end		703448	1					
ANR	703616	Argument	node -> regnum		703448	1					
ANR	703617	PtrMemberAccess	node -> regnum		703448	0					
ANR	703618	Identifier	node		703448	0					
ANR	703619	Identifier	regnum		703448	1					
ANR	703620	Identifier	SIZE_OP_MEMORY_END_PUSH		703448	1					
ANR	703621	Identifier	SIZE_OP_MEMORY_END		703448	2					
ANR	703622	BreakStatement	break ;	1244:4:29691:29696	703448	2	True				
ANR	703623	Label	case ENCLOSE_STOP_BACKTRACK :	1246:2:29701:29728	703448	3	True				
ANR	703624	Identifier	ENCLOSE_STOP_BACKTRACK		703448	0					
ANR	703625	IfStatement	if ( IS_ENCLOSE_STOP_BT_SIMPLE_REPEAT ( node ) )		703448	4					
ANR	703626	Condition	IS_ENCLOSE_STOP_BT_SIMPLE_REPEAT ( node )	1247:8:29738:29775	703448	0	True				
ANR	703627	CallExpression	IS_ENCLOSE_STOP_BT_SIMPLE_REPEAT ( node )		703448	0					
ANR	703628	Callee	IS_ENCLOSE_STOP_BT_SIMPLE_REPEAT		703448	0					
ANR	703629	Identifier	IS_ENCLOSE_STOP_BT_SIMPLE_REPEAT		703448	0					
ANR	703630	ArgumentList	node		703448	1					
ANR	703631	Argument	node		703448	0					
ANR	703632	Identifier	node		703448	0					
ANR	703633	CompoundStatement		43:6:1080:1114	703448	1					
ANR	703634	IdentifierDeclStatement	QtfrNode * qn = NQTFR ( node -> target ) ;	1248:6:29786:29820	703448	0	True				
ANR	703635	IdentifierDecl	* qn = NQTFR ( node -> target )		703448	0					
ANR	703636	IdentifierDeclType	QtfrNode *		703448	0					
ANR	703637	Identifier	qn		703448	1					
ANR	703638	AssignmentExpression	* qn = NQTFR ( node -> target )		703448	2		=			
ANR	703639	Identifier	qn		703448	0					
ANR	703640	CallExpression	NQTFR ( node -> target )		703448	1					
ANR	703641	Callee	NQTFR		703448	0					
ANR	703642	Identifier	NQTFR		703448	0					
ANR	703643	ArgumentList	node -> target		703448	1					
ANR	703644	Argument	node -> target		703448	0					
ANR	703645	PtrMemberAccess	node -> target		703448	0					
ANR	703646	Identifier	node		703448	0					
ANR	703647	Identifier	target		703448	1					
ANR	703648	ExpressionStatement	"tlen = compile_length_tree ( qn -> target , reg )"	1249:6:29828:29871	703448	1	True				
ANR	703649	AssignmentExpression	"tlen = compile_length_tree ( qn -> target , reg )"		703448	0		=			
ANR	703650	Identifier	tlen		703448	0					
ANR	703651	CallExpression	"compile_length_tree ( qn -> target , reg )"		703448	1					
ANR	703652	Callee	compile_length_tree		703448	0					
ANR	703653	Identifier	compile_length_tree		703448	0					
ANR	703654	ArgumentList	qn -> target		703448	1					
ANR	703655	Argument	qn -> target		703448	0					
ANR	703656	PtrMemberAccess	qn -> target		703448	0					
ANR	703657	Identifier	qn		703448	0					
ANR	703658	Identifier	target		703448	1					
ANR	703659	Argument	reg		703448	1					
ANR	703660	Identifier	reg		703448	0					
ANR	703661	IfStatement	if ( tlen < 0 )		703448	2					
ANR	703662	Condition	tlen < 0	1250:10:29883:29890	703448	0	True				
ANR	703663	RelationalExpression	tlen < 0		703448	0		<			
ANR	703664	Identifier	tlen		703448	0					
ANR	703665	PrimaryExpression	0		703448	1					
ANR	703666	ReturnStatement	return tlen ;	1250:20:29893:29904	703448	1	True				
ANR	703667	Identifier	tlen		703448	0					
ANR	703668	ExpressionStatement	len = tlen * qn -> lower + SIZE_OP_PUSH + tlen + SIZE_OP_POP + SIZE_OP_JUMP	1252:6:29913:29989	703448	3	True				
ANR	703669	AssignmentExpression	len = tlen * qn -> lower + SIZE_OP_PUSH + tlen + SIZE_OP_POP + SIZE_OP_JUMP		703448	0		=			
ANR	703670	Identifier	len		703448	0					
ANR	703671	AdditiveExpression	tlen * qn -> lower + SIZE_OP_PUSH + tlen + SIZE_OP_POP + SIZE_OP_JUMP		703448	1		+			
ANR	703672	MultiplicativeExpression	tlen * qn -> lower		703448	0		*			
ANR	703673	Identifier	tlen		703448	0					
ANR	703674	PtrMemberAccess	qn -> lower		703448	1					
ANR	703675	Identifier	qn		703448	0					
ANR	703676	Identifier	lower		703448	1					
ANR	703677	AdditiveExpression	SIZE_OP_PUSH + tlen + SIZE_OP_POP + SIZE_OP_JUMP		703448	1		+			
ANR	703678	Identifier	SIZE_OP_PUSH		703448	0					
ANR	703679	AdditiveExpression	tlen + SIZE_OP_POP + SIZE_OP_JUMP		703448	1		+			
ANR	703680	Identifier	tlen		703448	0					
ANR	703681	AdditiveExpression	SIZE_OP_POP + SIZE_OP_JUMP		703448	1		+			
ANR	703682	Identifier	SIZE_OP_POP		703448	0					
ANR	703683	Identifier	SIZE_OP_JUMP		703448	1					
ANR	703684	ElseStatement	else		703448	0					
ANR	703685	CompoundStatement		50:9:1300:1300	703448	0					
ANR	703686	ExpressionStatement	len = SIZE_OP_PUSH_STOP_BT + tlen + SIZE_OP_POP_STOP_BT	1256:6:30014:30069	703448	0	True				
ANR	703687	AssignmentExpression	len = SIZE_OP_PUSH_STOP_BT + tlen + SIZE_OP_POP_STOP_BT		703448	0		=			
ANR	703688	Identifier	len		703448	0					
ANR	703689	AdditiveExpression	SIZE_OP_PUSH_STOP_BT + tlen + SIZE_OP_POP_STOP_BT		703448	1		+			
ANR	703690	Identifier	SIZE_OP_PUSH_STOP_BT		703448	0					
ANR	703691	AdditiveExpression	tlen + SIZE_OP_POP_STOP_BT		703448	1		+			
ANR	703692	Identifier	tlen		703448	0					
ANR	703693	Identifier	SIZE_OP_POP_STOP_BT		703448	1					
ANR	703694	BreakStatement	break ;	1258:4:30081:30086	703448	5	True				
ANR	703695	Label	default :	1260:2:30091:30098	703448	6	True				
ANR	703696	Identifier	default		703448	0					
ANR	703697	ReturnStatement	return ONIGERR_TYPE_BUG ;	1261:4:30104:30127	703448	7	True				
ANR	703698	Identifier	ONIGERR_TYPE_BUG		703448	0					
ANR	703699	BreakStatement	break ;	1262:4:30133:30138	703448	8	True				
ANR	703700	ReturnStatement	return len ;	1265:2:30147:30157	703448	5	True				
ANR	703701	Identifier	len		703448	0					
ANR	703702	ReturnType	static int		703448	1					
ANR	703703	Identifier	compile_length_enclose_node		703448	2					
ANR	703704	ParameterList	"EncloseNode * node , regex_t * reg"		703448	3					
ANR	703705	Parameter	EncloseNode * node	1205:28:28672:28688	703448	0	True				
ANR	703706	ParameterType	EncloseNode *		703448	0					
ANR	703707	Identifier	node		703448	1					
ANR	703708	Parameter	regex_t * reg	1205:47:28691:28702	703448	1	True				
ANR	703709	ParameterType	regex_t *		703448	0					
ANR	703710	Identifier	reg		703448	1					
ANR	703711	CFGEntryNode	ENTRY		703448		True				
ANR	703712	CFGExitNode	EXIT		703448		True				
ANR	703713	Symbol	* qn		703448						
ANR	703714	Symbol	SIZE_OP_MEMORY_END_PUSH_REC		703448						
ANR	703715	Symbol	ENCLOSE_OPTION		703448						
ANR	703716	Symbol	SIZE_OP_MEMORY_START		703448						
ANR	703717	Symbol	SIZE_OP_MEMORY_END		703448						
ANR	703718	Symbol	NQTFR		703448						
ANR	703719	Symbol	SIZE_OP_MEMORY_START_PUSH		703448						
ANR	703720	Symbol	qn -> lower		703448						
ANR	703721	Symbol	len		703448						
ANR	703722	Symbol	reg -> bt_mem_end		703448						
ANR	703723	Symbol	reg		703448						
ANR	703724	Symbol	tlen		703448						
ANR	703725	Symbol	SIZE_OP_MEMORY_END_REC		703448						
ANR	703726	Symbol	IS_ENCLOSE_STOP_BT_SIMPLE_REPEAT		703448						
ANR	703727	Symbol	SIZE_OP_PUSH_STOP_BT		703448						
ANR	703728	Symbol	* node		703448						
ANR	703729	Symbol	qn		703448						
ANR	703730	Symbol	SIZE_OP_JUMP		703448						
ANR	703731	Symbol	BIT_STATUS_AT		703448						
ANR	703732	Symbol	compile_length_tree		703448						
ANR	703733	Symbol	compile_length_option_node		703448						
ANR	703734	Symbol	IS_ENCLOSE_CALLED		703448						
ANR	703735	Symbol	SIZE_OP_PUSH		703448						
ANR	703736	Symbol	node -> regnum		703448						
ANR	703737	Symbol	SIZE_OP_POP_STOP_BT		703448						
ANR	703738	Symbol	ONIGERR_TYPE_BUG		703448						
ANR	703739	Symbol	qn -> target		703448						
ANR	703740	Symbol	node		703448						
ANR	703741	Symbol	SIZE_OP_CALL		703448						
ANR	703742	Symbol	reg -> bt_mem_start		703448						
ANR	703743	Symbol	SIZE_OP_POP		703448						
ANR	703744	Symbol	node -> type		703448						
ANR	703745	Symbol	IS_ENCLOSE_RECURSION		703448						
ANR	703746	Symbol	SIZE_OP_RETURN		703448						
ANR	703747	Symbol	node -> target		703448						
ANR	703748	Symbol	* reg		703448						
ANR	703749	Symbol	SIZE_OP_MEMORY_END_PUSH		703448						
ANR	703750	DeclStmt									
ANR	703751	Decl							int	"int ( Node * node , regex_t * reg , int * len )"	get_char_length_tree
ANR	703752	Function	compile_enclose_node	1270:0:30232:33119							
ANR	703753	FunctionDef	"compile_enclose_node (EncloseNode * node , regex_t * reg)"		703752	0					
ANR	703754	CompoundStatement		1272:0:30297:33119	703752	0					
ANR	703755	IdentifierDeclStatement	"int r , len ;"	1273:2:30301:30311	703752	0	True				
ANR	703756	IdentifierDecl	r		703752	0					
ANR	703757	IdentifierDeclType	int		703752	0					
ANR	703758	Identifier	r		703752	1					
ANR	703759	IdentifierDecl	len		703752	1					
ANR	703760	IdentifierDeclType	int		703752	0					
ANR	703761	Identifier	len		703752	1					
ANR	703762	IfStatement	if ( node -> type == ENCLOSE_OPTION )		703752	1					
ANR	703763	Condition	node -> type == ENCLOSE_OPTION	1275:6:30320:30347	703752	0	True				
ANR	703764	EqualityExpression	node -> type == ENCLOSE_OPTION		703752	0		==			
ANR	703765	PtrMemberAccess	node -> type		703752	0					
ANR	703766	Identifier	node		703752	0					
ANR	703767	Identifier	type		703752	1					
ANR	703768	Identifier	ENCLOSE_OPTION		703752	1					
ANR	703769	ReturnStatement	"return compile_option_node ( node , reg ) ;"	1276:4:30354:30391	703752	1	True				
ANR	703770	CallExpression	"compile_option_node ( node , reg )"		703752	0					
ANR	703771	Callee	compile_option_node		703752	0					
ANR	703772	Identifier	compile_option_node		703752	0					
ANR	703773	ArgumentList	node		703752	1					
ANR	703774	Argument	node		703752	0					
ANR	703775	Identifier	node		703752	0					
ANR	703776	Argument	reg		703752	1					
ANR	703777	Identifier	reg		703752	0					
ANR	703778	SwitchStatement	switch ( node -> type )		703752	2					
ANR	703779	Condition	node -> type	1278:10:30404:30413	703752	0	True				
ANR	703780	PtrMemberAccess	node -> type		703752	0					
ANR	703781	Identifier	node		703752	0					
ANR	703782	Identifier	type		703752	1					
ANR	703783	CompoundStatement		7:22:118:118	703752	1					
ANR	703784	Label	case ENCLOSE_MEMORY :	1279:2:30420:30439	703752	0	True				
ANR	703785	Identifier	ENCLOSE_MEMORY		703752	0					
ANR	703786	IfStatement	if ( IS_ENCLOSE_CALLED ( node ) )		703752	1					
ANR	703787	Condition	IS_ENCLOSE_CALLED ( node )	1281:8:30472:30494	703752	0	True				
ANR	703788	CallExpression	IS_ENCLOSE_CALLED ( node )		703752	0					
ANR	703789	Callee	IS_ENCLOSE_CALLED		703752	0					
ANR	703790	Identifier	IS_ENCLOSE_CALLED		703752	0					
ANR	703791	ArgumentList	node		703752	1					
ANR	703792	Argument	node		703752	0					
ANR	703793	Identifier	node		703752	0					
ANR	703794	CompoundStatement		10:33:199:199	703752	1					
ANR	703795	ExpressionStatement	"r = add_opcode ( reg , OP_CALL )"	1282:6:30505:30533	703752	0	True				
ANR	703796	AssignmentExpression	"r = add_opcode ( reg , OP_CALL )"		703752	0		=			
ANR	703797	Identifier	r		703752	0					
ANR	703798	CallExpression	"add_opcode ( reg , OP_CALL )"		703752	1					
ANR	703799	Callee	add_opcode		703752	0					
ANR	703800	Identifier	add_opcode		703752	0					
ANR	703801	ArgumentList	reg		703752	1					
ANR	703802	Argument	reg		703752	0					
ANR	703803	Identifier	reg		703752	0					
ANR	703804	Argument	OP_CALL		703752	1					
ANR	703805	Identifier	OP_CALL		703752	0					
ANR	703806	IfStatement	if ( r )		703752	1					
ANR	703807	Condition	r	1283:10:30545:30545	703752	0	True				
ANR	703808	Identifier	r		703752	0					
ANR	703809	ReturnStatement	return r ;	1283:13:30548:30556	703752	1	True				
ANR	703810	Identifier	r		703752	0					
ANR	703811	ExpressionStatement	node -> call_addr = BBUF_GET_OFFSET_POS ( reg ) + SIZE_ABSADDR + SIZE_OP_JUMP	1284:6:30564:30636	703752	2	True				
ANR	703812	AssignmentExpression	node -> call_addr = BBUF_GET_OFFSET_POS ( reg ) + SIZE_ABSADDR + SIZE_OP_JUMP		703752	0		=			
ANR	703813	PtrMemberAccess	node -> call_addr		703752	0					
ANR	703814	Identifier	node		703752	0					
ANR	703815	Identifier	call_addr		703752	1					
ANR	703816	AdditiveExpression	BBUF_GET_OFFSET_POS ( reg ) + SIZE_ABSADDR + SIZE_OP_JUMP		703752	1		+			
ANR	703817	CallExpression	BBUF_GET_OFFSET_POS ( reg )		703752	0					
ANR	703818	Callee	BBUF_GET_OFFSET_POS		703752	0					
ANR	703819	Identifier	BBUF_GET_OFFSET_POS		703752	0					
ANR	703820	ArgumentList	reg		703752	1					
ANR	703821	Argument	reg		703752	0					
ANR	703822	Identifier	reg		703752	0					
ANR	703823	AdditiveExpression	SIZE_ABSADDR + SIZE_OP_JUMP		703752	1		+			
ANR	703824	Identifier	SIZE_ABSADDR		703752	0					
ANR	703825	Identifier	SIZE_OP_JUMP		703752	1					
ANR	703826	ExpressionStatement	node -> state |= NST_ADDR_FIXED	1285:6:30644:30673	703752	3	True				
ANR	703827	AssignmentExpression	node -> state |= NST_ADDR_FIXED		703752	0		|=			
ANR	703828	PtrMemberAccess	node -> state		703752	0					
ANR	703829	Identifier	node		703752	0					
ANR	703830	Identifier	state		703752	1					
ANR	703831	Identifier	NST_ADDR_FIXED		703752	1					
ANR	703832	ExpressionStatement	"r = add_abs_addr ( reg , ( int ) node -> call_addr )"	1286:6:30681:30725	703752	4	True				
ANR	703833	AssignmentExpression	"r = add_abs_addr ( reg , ( int ) node -> call_addr )"		703752	0		=			
ANR	703834	Identifier	r		703752	0					
ANR	703835	CallExpression	"add_abs_addr ( reg , ( int ) node -> call_addr )"		703752	1					
ANR	703836	Callee	add_abs_addr		703752	0					
ANR	703837	Identifier	add_abs_addr		703752	0					
ANR	703838	ArgumentList	reg		703752	1					
ANR	703839	Argument	reg		703752	0					
ANR	703840	Identifier	reg		703752	0					
ANR	703841	Argument	( int ) node -> call_addr		703752	1					
ANR	703842	CastExpression	( int ) node -> call_addr		703752	0					
ANR	703843	CastTarget	int		703752	0					
ANR	703844	PtrMemberAccess	node -> call_addr		703752	1					
ANR	703845	Identifier	node		703752	0					
ANR	703846	Identifier	call_addr		703752	1					
ANR	703847	IfStatement	if ( r )		703752	5					
ANR	703848	Condition	r	1287:10:30737:30737	703752	0	True				
ANR	703849	Identifier	r		703752	0					
ANR	703850	ReturnStatement	return r ;	1287:13:30740:30748	703752	1	True				
ANR	703851	Identifier	r		703752	0					
ANR	703852	ExpressionStatement	"len = compile_length_tree ( node -> target , reg )"	1288:6:30756:30800	703752	6	True				
ANR	703853	AssignmentExpression	"len = compile_length_tree ( node -> target , reg )"		703752	0		=			
ANR	703854	Identifier	len		703752	0					
ANR	703855	CallExpression	"compile_length_tree ( node -> target , reg )"		703752	1					
ANR	703856	Callee	compile_length_tree		703752	0					
ANR	703857	Identifier	compile_length_tree		703752	0					
ANR	703858	ArgumentList	node -> target		703752	1					
ANR	703859	Argument	node -> target		703752	0					
ANR	703860	PtrMemberAccess	node -> target		703752	0					
ANR	703861	Identifier	node		703752	0					
ANR	703862	Identifier	target		703752	1					
ANR	703863	Argument	reg		703752	1					
ANR	703864	Identifier	reg		703752	0					
ANR	703865	ExpressionStatement	len += ( SIZE_OP_MEMORY_START_PUSH + SIZE_OP_RETURN )	1289:6:30808:30859	703752	7	True				
ANR	703866	AssignmentExpression	len += ( SIZE_OP_MEMORY_START_PUSH + SIZE_OP_RETURN )		703752	0		+=			
ANR	703867	Identifier	len		703752	0					
ANR	703868	AdditiveExpression	SIZE_OP_MEMORY_START_PUSH + SIZE_OP_RETURN		703752	1		+			
ANR	703869	Identifier	SIZE_OP_MEMORY_START_PUSH		703752	0					
ANR	703870	Identifier	SIZE_OP_RETURN		703752	1					
ANR	703871	IfStatement	"if ( BIT_STATUS_AT ( reg -> bt_mem_end , node -> regnum ) )"		703752	8					
ANR	703872	Condition	"BIT_STATUS_AT ( reg -> bt_mem_end , node -> regnum )"	1290:10:30871:30914	703752	0	True				
ANR	703873	CallExpression	"BIT_STATUS_AT ( reg -> bt_mem_end , node -> regnum )"		703752	0					
ANR	703874	Callee	BIT_STATUS_AT		703752	0					
ANR	703875	Identifier	BIT_STATUS_AT		703752	0					
ANR	703876	ArgumentList	reg -> bt_mem_end		703752	1					
ANR	703877	Argument	reg -> bt_mem_end		703752	0					
ANR	703878	PtrMemberAccess	reg -> bt_mem_end		703752	0					
ANR	703879	Identifier	reg		703752	0					
ANR	703880	Identifier	bt_mem_end		703752	1					
ANR	703881	Argument	node -> regnum		703752	1					
ANR	703882	PtrMemberAccess	node -> regnum		703752	0					
ANR	703883	Identifier	node		703752	0					
ANR	703884	Identifier	regnum		703752	1					
ANR	703885	ExpressionStatement	len += ( IS_ENCLOSE_RECURSION ( node ) ? SIZE_OP_MEMORY_END_PUSH_REC : SIZE_OP_MEMORY_END_PUSH )	1291:1:30918:31011	703752	1	True				
ANR	703886	AssignmentExpression	len += ( IS_ENCLOSE_RECURSION ( node ) ? SIZE_OP_MEMORY_END_PUSH_REC : SIZE_OP_MEMORY_END_PUSH )		703752	0		+=			
ANR	703887	Identifier	len		703752	0					
ANR	703888	ConditionalExpression	IS_ENCLOSE_RECURSION ( node ) ? SIZE_OP_MEMORY_END_PUSH_REC : SIZE_OP_MEMORY_END_PUSH		703752	1					
ANR	703889	Condition	IS_ENCLOSE_RECURSION ( node )		703752	0					
ANR	703890	CallExpression	IS_ENCLOSE_RECURSION ( node )		703752	0					
ANR	703891	Callee	IS_ENCLOSE_RECURSION		703752	0					
ANR	703892	Identifier	IS_ENCLOSE_RECURSION		703752	0					
ANR	703893	ArgumentList	node		703752	1					
ANR	703894	Argument	node		703752	0					
ANR	703895	Identifier	node		703752	0					
ANR	703896	Identifier	SIZE_OP_MEMORY_END_PUSH_REC		703752	1					
ANR	703897	Identifier	SIZE_OP_MEMORY_END_PUSH		703752	2					
ANR	703898	ElseStatement	else		703752	0					
ANR	703899	ExpressionStatement	len += ( IS_ENCLOSE_RECURSION ( node ) ? SIZE_OP_MEMORY_END_REC : SIZE_OP_MEMORY_END )	1294:1:31025:31108	703752	0	True				
ANR	703900	AssignmentExpression	len += ( IS_ENCLOSE_RECURSION ( node ) ? SIZE_OP_MEMORY_END_REC : SIZE_OP_MEMORY_END )		703752	0		+=			
ANR	703901	Identifier	len		703752	0					
ANR	703902	ConditionalExpression	IS_ENCLOSE_RECURSION ( node ) ? SIZE_OP_MEMORY_END_REC : SIZE_OP_MEMORY_END		703752	1					
ANR	703903	Condition	IS_ENCLOSE_RECURSION ( node )		703752	0					
ANR	703904	CallExpression	IS_ENCLOSE_RECURSION ( node )		703752	0					
ANR	703905	Callee	IS_ENCLOSE_RECURSION		703752	0					
ANR	703906	Identifier	IS_ENCLOSE_RECURSION		703752	0					
ANR	703907	ArgumentList	node		703752	1					
ANR	703908	Argument	node		703752	0					
ANR	703909	Identifier	node		703752	0					
ANR	703910	Identifier	SIZE_OP_MEMORY_END_REC		703752	1					
ANR	703911	Identifier	SIZE_OP_MEMORY_END		703752	2					
ANR	703912	ExpressionStatement	"r = add_opcode_rel_addr ( reg , OP_JUMP , len )"	1297:6:31117:31159	703752	9	True				
ANR	703913	AssignmentExpression	"r = add_opcode_rel_addr ( reg , OP_JUMP , len )"		703752	0		=			
ANR	703914	Identifier	r		703752	0					
ANR	703915	CallExpression	"add_opcode_rel_addr ( reg , OP_JUMP , len )"		703752	1					
ANR	703916	Callee	add_opcode_rel_addr		703752	0					
ANR	703917	Identifier	add_opcode_rel_addr		703752	0					
ANR	703918	ArgumentList	reg		703752	1					
ANR	703919	Argument	reg		703752	0					
ANR	703920	Identifier	reg		703752	0					
ANR	703921	Argument	OP_JUMP		703752	1					
ANR	703922	Identifier	OP_JUMP		703752	0					
ANR	703923	Argument	len		703752	2					
ANR	703924	Identifier	len		703752	0					
ANR	703925	IfStatement	if ( r )		703752	10					
ANR	703926	Condition	r	1298:10:31171:31171	703752	0	True				
ANR	703927	Identifier	r		703752	0					
ANR	703928	ReturnStatement	return r ;	1298:13:31174:31182	703752	1	True				
ANR	703929	Identifier	r		703752	0					
ANR	703930	IfStatement	"if ( BIT_STATUS_AT ( reg -> bt_mem_start , node -> regnum ) )"		703752	2					
ANR	703931	Condition	"BIT_STATUS_AT ( reg -> bt_mem_start , node -> regnum )"	1301:8:31205:31250	703752	0	True				
ANR	703932	CallExpression	"BIT_STATUS_AT ( reg -> bt_mem_start , node -> regnum )"		703752	0					
ANR	703933	Callee	BIT_STATUS_AT		703752	0					
ANR	703934	Identifier	BIT_STATUS_AT		703752	0					
ANR	703935	ArgumentList	reg -> bt_mem_start		703752	1					
ANR	703936	Argument	reg -> bt_mem_start		703752	0					
ANR	703937	PtrMemberAccess	reg -> bt_mem_start		703752	0					
ANR	703938	Identifier	reg		703752	0					
ANR	703939	Identifier	bt_mem_start		703752	1					
ANR	703940	Argument	node -> regnum		703752	1					
ANR	703941	PtrMemberAccess	node -> regnum		703752	0					
ANR	703942	Identifier	node		703752	0					
ANR	703943	Identifier	regnum		703752	1					
ANR	703944	ExpressionStatement	"r = add_opcode ( reg , OP_MEMORY_START_PUSH )"	1302:6:31259:31300	703752	1	True				
ANR	703945	AssignmentExpression	"r = add_opcode ( reg , OP_MEMORY_START_PUSH )"		703752	0		=			
ANR	703946	Identifier	r		703752	0					
ANR	703947	CallExpression	"add_opcode ( reg , OP_MEMORY_START_PUSH )"		703752	1					
ANR	703948	Callee	add_opcode		703752	0					
ANR	703949	Identifier	add_opcode		703752	0					
ANR	703950	ArgumentList	reg		703752	1					
ANR	703951	Argument	reg		703752	0					
ANR	703952	Identifier	reg		703752	0					
ANR	703953	Argument	OP_MEMORY_START_PUSH		703752	1					
ANR	703954	Identifier	OP_MEMORY_START_PUSH		703752	0					
ANR	703955	ElseStatement	else		703752	0					
ANR	703956	ExpressionStatement	"r = add_opcode ( reg , OP_MEMORY_START )"	1304:6:31317:31353	703752	0	True				
ANR	703957	AssignmentExpression	"r = add_opcode ( reg , OP_MEMORY_START )"		703752	0		=			
ANR	703958	Identifier	r		703752	0					
ANR	703959	CallExpression	"add_opcode ( reg , OP_MEMORY_START )"		703752	1					
ANR	703960	Callee	add_opcode		703752	0					
ANR	703961	Identifier	add_opcode		703752	0					
ANR	703962	ArgumentList	reg		703752	1					
ANR	703963	Argument	reg		703752	0					
ANR	703964	Identifier	reg		703752	0					
ANR	703965	Argument	OP_MEMORY_START		703752	1					
ANR	703966	Identifier	OP_MEMORY_START		703752	0					
ANR	703967	IfStatement	if ( r )		703752	3					
ANR	703968	Condition	r	1305:8:31363:31363	703752	0	True				
ANR	703969	Identifier	r		703752	0					
ANR	703970	ReturnStatement	return r ;	1305:11:31366:31374	703752	1	True				
ANR	703971	Identifier	r		703752	0					
ANR	703972	ExpressionStatement	"r = add_mem_num ( reg , node -> regnum )"	1306:4:31380:31414	703752	4	True				
ANR	703973	AssignmentExpression	"r = add_mem_num ( reg , node -> regnum )"		703752	0		=			
ANR	703974	Identifier	r		703752	0					
ANR	703975	CallExpression	"add_mem_num ( reg , node -> regnum )"		703752	1					
ANR	703976	Callee	add_mem_num		703752	0					
ANR	703977	Identifier	add_mem_num		703752	0					
ANR	703978	ArgumentList	reg		703752	1					
ANR	703979	Argument	reg		703752	0					
ANR	703980	Identifier	reg		703752	0					
ANR	703981	Argument	node -> regnum		703752	1					
ANR	703982	PtrMemberAccess	node -> regnum		703752	0					
ANR	703983	Identifier	node		703752	0					
ANR	703984	Identifier	regnum		703752	1					
ANR	703985	IfStatement	if ( r )		703752	5					
ANR	703986	Condition	r	1307:8:31424:31424	703752	0	True				
ANR	703987	Identifier	r		703752	0					
ANR	703988	ReturnStatement	return r ;	1307:11:31427:31435	703752	1	True				
ANR	703989	Identifier	r		703752	0					
ANR	703990	ExpressionStatement	"r = compile_tree ( node -> target , reg )"	1308:4:31441:31476	703752	6	True				
ANR	703991	AssignmentExpression	"r = compile_tree ( node -> target , reg )"		703752	0		=			
ANR	703992	Identifier	r		703752	0					
ANR	703993	CallExpression	"compile_tree ( node -> target , reg )"		703752	1					
ANR	703994	Callee	compile_tree		703752	0					
ANR	703995	Identifier	compile_tree		703752	0					
ANR	703996	ArgumentList	node -> target		703752	1					
ANR	703997	Argument	node -> target		703752	0					
ANR	703998	PtrMemberAccess	node -> target		703752	0					
ANR	703999	Identifier	node		703752	0					
ANR	704000	Identifier	target		703752	1					
ANR	704001	Argument	reg		703752	1					
ANR	704002	Identifier	reg		703752	0					
ANR	704003	IfStatement	if ( r )		703752	7					
ANR	704004	Condition	r	1309:8:31486:31486	703752	0	True				
ANR	704005	Identifier	r		703752	0					
ANR	704006	ReturnStatement	return r ;	1309:11:31489:31497	703752	1	True				
ANR	704007	Identifier	r		703752	0					
ANR	704008	IfStatement	if ( IS_ENCLOSE_CALLED ( node ) )		703752	8					
ANR	704009	Condition	IS_ENCLOSE_CALLED ( node )	1311:8:31530:31552	703752	0	True				
ANR	704010	CallExpression	IS_ENCLOSE_CALLED ( node )		703752	0					
ANR	704011	Callee	IS_ENCLOSE_CALLED		703752	0					
ANR	704012	Identifier	IS_ENCLOSE_CALLED		703752	0					
ANR	704013	ArgumentList	node		703752	1					
ANR	704014	Argument	node		703752	0					
ANR	704015	Identifier	node		703752	0					
ANR	704016	CompoundStatement		40:33:1257:1257	703752	1					
ANR	704017	IfStatement	"if ( BIT_STATUS_AT ( reg -> bt_mem_end , node -> regnum ) )"		703752	0					
ANR	704018	Condition	"BIT_STATUS_AT ( reg -> bt_mem_end , node -> regnum )"	1312:10:31567:31610	703752	0	True				
ANR	704019	CallExpression	"BIT_STATUS_AT ( reg -> bt_mem_end , node -> regnum )"		703752	0					
ANR	704020	Callee	BIT_STATUS_AT		703752	0					
ANR	704021	Identifier	BIT_STATUS_AT		703752	0					
ANR	704022	ArgumentList	reg -> bt_mem_end		703752	1					
ANR	704023	Argument	reg -> bt_mem_end		703752	0					
ANR	704024	PtrMemberAccess	reg -> bt_mem_end		703752	0					
ANR	704025	Identifier	reg		703752	0					
ANR	704026	Identifier	bt_mem_end		703752	1					
ANR	704027	Argument	node -> regnum		703752	1					
ANR	704028	PtrMemberAccess	node -> regnum		703752	0					
ANR	704029	Identifier	node		703752	0					
ANR	704030	Identifier	regnum		703752	1					
ANR	704031	ExpressionStatement	"r = add_opcode ( reg , ( IS_ENCLOSE_RECURSION ( node ) ? OP_MEMORY_END_PUSH_REC : OP_MEMORY_END_PUSH ) )"	1313:1:31614:31717	703752	1	True				
ANR	704032	AssignmentExpression	"r = add_opcode ( reg , ( IS_ENCLOSE_RECURSION ( node ) ? OP_MEMORY_END_PUSH_REC : OP_MEMORY_END_PUSH ) )"		703752	0		=			
ANR	704033	Identifier	r		703752	0					
ANR	704034	CallExpression	"add_opcode ( reg , ( IS_ENCLOSE_RECURSION ( node ) ? OP_MEMORY_END_PUSH_REC : OP_MEMORY_END_PUSH ) )"		703752	1					
ANR	704035	Callee	add_opcode		703752	0					
ANR	704036	Identifier	add_opcode		703752	0					
ANR	704037	ArgumentList	reg		703752	1					
ANR	704038	Argument	reg		703752	0					
ANR	704039	Identifier	reg		703752	0					
ANR	704040	Argument	IS_ENCLOSE_RECURSION ( node ) ? OP_MEMORY_END_PUSH_REC : OP_MEMORY_END_PUSH		703752	1					
ANR	704041	ConditionalExpression	IS_ENCLOSE_RECURSION ( node ) ? OP_MEMORY_END_PUSH_REC : OP_MEMORY_END_PUSH		703752	0					
ANR	704042	Condition	IS_ENCLOSE_RECURSION ( node )		703752	0					
ANR	704043	CallExpression	IS_ENCLOSE_RECURSION ( node )		703752	0					
ANR	704044	Callee	IS_ENCLOSE_RECURSION		703752	0					
ANR	704045	Identifier	IS_ENCLOSE_RECURSION		703752	0					
ANR	704046	ArgumentList	node		703752	1					
ANR	704047	Argument	node		703752	0					
ANR	704048	Identifier	node		703752	0					
ANR	704049	Identifier	OP_MEMORY_END_PUSH_REC		703752	1					
ANR	704050	Identifier	OP_MEMORY_END_PUSH		703752	2					
ANR	704051	ElseStatement	else		703752	0					
ANR	704052	ExpressionStatement	"r = add_opcode ( reg , ( IS_ENCLOSE_RECURSION ( node ) ? OP_MEMORY_END_REC : OP_MEMORY_END ) )"	1316:1:31731:31824	703752	0	True				
ANR	704053	AssignmentExpression	"r = add_opcode ( reg , ( IS_ENCLOSE_RECURSION ( node ) ? OP_MEMORY_END_REC : OP_MEMORY_END ) )"		703752	0		=			
ANR	704054	Identifier	r		703752	0					
ANR	704055	CallExpression	"add_opcode ( reg , ( IS_ENCLOSE_RECURSION ( node ) ? OP_MEMORY_END_REC : OP_MEMORY_END ) )"		703752	1					
ANR	704056	Callee	add_opcode		703752	0					
ANR	704057	Identifier	add_opcode		703752	0					
ANR	704058	ArgumentList	reg		703752	1					
ANR	704059	Argument	reg		703752	0					
ANR	704060	Identifier	reg		703752	0					
ANR	704061	Argument	IS_ENCLOSE_RECURSION ( node ) ? OP_MEMORY_END_REC : OP_MEMORY_END		703752	1					
ANR	704062	ConditionalExpression	IS_ENCLOSE_RECURSION ( node ) ? OP_MEMORY_END_REC : OP_MEMORY_END		703752	0					
ANR	704063	Condition	IS_ENCLOSE_RECURSION ( node )		703752	0					
ANR	704064	CallExpression	IS_ENCLOSE_RECURSION ( node )		703752	0					
ANR	704065	Callee	IS_ENCLOSE_RECURSION		703752	0					
ANR	704066	Identifier	IS_ENCLOSE_RECURSION		703752	0					
ANR	704067	ArgumentList	node		703752	1					
ANR	704068	Argument	node		703752	0					
ANR	704069	Identifier	node		703752	0					
ANR	704070	Identifier	OP_MEMORY_END_REC		703752	1					
ANR	704071	Identifier	OP_MEMORY_END		703752	2					
ANR	704072	IfStatement	if ( r )		703752	1					
ANR	704073	Condition	r	1319:10:31837:31837	703752	0	True				
ANR	704074	Identifier	r		703752	0					
ANR	704075	ReturnStatement	return r ;	1319:13:31840:31848	703752	1	True				
ANR	704076	Identifier	r		703752	0					
ANR	704077	ExpressionStatement	"r = add_mem_num ( reg , node -> regnum )"	1320:6:31856:31890	703752	2	True				
ANR	704078	AssignmentExpression	"r = add_mem_num ( reg , node -> regnum )"		703752	0		=			
ANR	704079	Identifier	r		703752	0					
ANR	704080	CallExpression	"add_mem_num ( reg , node -> regnum )"		703752	1					
ANR	704081	Callee	add_mem_num		703752	0					
ANR	704082	Identifier	add_mem_num		703752	0					
ANR	704083	ArgumentList	reg		703752	1					
ANR	704084	Argument	reg		703752	0					
ANR	704085	Identifier	reg		703752	0					
ANR	704086	Argument	node -> regnum		703752	1					
ANR	704087	PtrMemberAccess	node -> regnum		703752	0					
ANR	704088	Identifier	node		703752	0					
ANR	704089	Identifier	regnum		703752	1					
ANR	704090	IfStatement	if ( r )		703752	3					
ANR	704091	Condition	r	1321:10:31902:31902	703752	0	True				
ANR	704092	Identifier	r		703752	0					
ANR	704093	ReturnStatement	return r ;	1321:13:31905:31913	703752	1	True				
ANR	704094	Identifier	r		703752	0					
ANR	704095	ExpressionStatement	"r = add_opcode ( reg , OP_RETURN )"	1322:6:31921:31951	703752	4	True				
ANR	704096	AssignmentExpression	"r = add_opcode ( reg , OP_RETURN )"		703752	0		=			
ANR	704097	Identifier	r		703752	0					
ANR	704098	CallExpression	"add_opcode ( reg , OP_RETURN )"		703752	1					
ANR	704099	Callee	add_opcode		703752	0					
ANR	704100	Identifier	add_opcode		703752	0					
ANR	704101	ArgumentList	reg		703752	1					
ANR	704102	Argument	reg		703752	0					
ANR	704103	Identifier	reg		703752	0					
ANR	704104	Argument	OP_RETURN		703752	1					
ANR	704105	Identifier	OP_RETURN		703752	0					
ANR	704106	ElseStatement	else		703752	0					
ANR	704107	CompoundStatement		55:4:1681:1681	703752	0					
ANR	704108	IfStatement	"if ( BIT_STATUS_AT ( reg -> bt_mem_end , node -> regnum ) )"		703752	0					
ANR	704109	Condition	"BIT_STATUS_AT ( reg -> bt_mem_end , node -> regnum )"	1327:10:31991:32034	703752	0	True				
ANR	704110	CallExpression	"BIT_STATUS_AT ( reg -> bt_mem_end , node -> regnum )"		703752	0					
ANR	704111	Callee	BIT_STATUS_AT		703752	0					
ANR	704112	Identifier	BIT_STATUS_AT		703752	0					
ANR	704113	ArgumentList	reg -> bt_mem_end		703752	1					
ANR	704114	Argument	reg -> bt_mem_end		703752	0					
ANR	704115	PtrMemberAccess	reg -> bt_mem_end		703752	0					
ANR	704116	Identifier	reg		703752	0					
ANR	704117	Identifier	bt_mem_end		703752	1					
ANR	704118	Argument	node -> regnum		703752	1					
ANR	704119	PtrMemberAccess	node -> regnum		703752	0					
ANR	704120	Identifier	node		703752	0					
ANR	704121	Identifier	regnum		703752	1					
ANR	704122	ExpressionStatement	"r = add_opcode ( reg , OP_MEMORY_END_PUSH )"	1328:1:32038:32077	703752	1	True				
ANR	704123	AssignmentExpression	"r = add_opcode ( reg , OP_MEMORY_END_PUSH )"		703752	0		=			
ANR	704124	Identifier	r		703752	0					
ANR	704125	CallExpression	"add_opcode ( reg , OP_MEMORY_END_PUSH )"		703752	1					
ANR	704126	Callee	add_opcode		703752	0					
ANR	704127	Identifier	add_opcode		703752	0					
ANR	704128	ArgumentList	reg		703752	1					
ANR	704129	Argument	reg		703752	0					
ANR	704130	Identifier	reg		703752	0					
ANR	704131	Argument	OP_MEMORY_END_PUSH		703752	1					
ANR	704132	Identifier	OP_MEMORY_END_PUSH		703752	0					
ANR	704133	ElseStatement	else		703752	0					
ANR	704134	ExpressionStatement	"r = add_opcode ( reg , OP_MEMORY_END )"	1330:1:32091:32125	703752	0	True				
ANR	704135	AssignmentExpression	"r = add_opcode ( reg , OP_MEMORY_END )"		703752	0		=			
ANR	704136	Identifier	r		703752	0					
ANR	704137	CallExpression	"add_opcode ( reg , OP_MEMORY_END )"		703752	1					
ANR	704138	Callee	add_opcode		703752	0					
ANR	704139	Identifier	add_opcode		703752	0					
ANR	704140	ArgumentList	reg		703752	1					
ANR	704141	Argument	reg		703752	0					
ANR	704142	Identifier	reg		703752	0					
ANR	704143	Argument	OP_MEMORY_END		703752	1					
ANR	704144	Identifier	OP_MEMORY_END		703752	0					
ANR	704145	IfStatement	if ( r )		703752	1					
ANR	704146	Condition	r	1331:10:32137:32137	703752	0	True				
ANR	704147	Identifier	r		703752	0					
ANR	704148	ReturnStatement	return r ;	1331:13:32140:32148	703752	1	True				
ANR	704149	Identifier	r		703752	0					
ANR	704150	ExpressionStatement	"r = add_mem_num ( reg , node -> regnum )"	1332:6:32156:32190	703752	2	True				
ANR	704151	AssignmentExpression	"r = add_mem_num ( reg , node -> regnum )"		703752	0		=			
ANR	704152	Identifier	r		703752	0					
ANR	704153	CallExpression	"add_mem_num ( reg , node -> regnum )"		703752	1					
ANR	704154	Callee	add_mem_num		703752	0					
ANR	704155	Identifier	add_mem_num		703752	0					
ANR	704156	ArgumentList	reg		703752	1					
ANR	704157	Argument	reg		703752	0					
ANR	704158	Identifier	reg		703752	0					
ANR	704159	Argument	node -> regnum		703752	1					
ANR	704160	PtrMemberAccess	node -> regnum		703752	0					
ANR	704161	Identifier	node		703752	0					
ANR	704162	Identifier	regnum		703752	1					
ANR	704163	BreakStatement	break ;	1334:4:32202:32207	703752	9	True				
ANR	704164	Label	case ENCLOSE_STOP_BACKTRACK :	1336:2:32212:32239	703752	10	True				
ANR	704165	Identifier	ENCLOSE_STOP_BACKTRACK		703752	0					
ANR	704166	IfStatement	if ( IS_ENCLOSE_STOP_BT_SIMPLE_REPEAT ( node ) )		703752	11					
ANR	704167	Condition	IS_ENCLOSE_STOP_BT_SIMPLE_REPEAT ( node )	1337:8:32249:32286	703752	0	True				
ANR	704168	CallExpression	IS_ENCLOSE_STOP_BT_SIMPLE_REPEAT ( node )		703752	0					
ANR	704169	Callee	IS_ENCLOSE_STOP_BT_SIMPLE_REPEAT		703752	0					
ANR	704170	Identifier	IS_ENCLOSE_STOP_BT_SIMPLE_REPEAT		703752	0					
ANR	704171	ArgumentList	node		703752	1					
ANR	704172	Argument	node		703752	0					
ANR	704173	Identifier	node		703752	0					
ANR	704174	CompoundStatement		67:6:1999:2033	703752	1					
ANR	704175	IdentifierDeclStatement	QtfrNode * qn = NQTFR ( node -> target ) ;	1338:6:32297:32331	703752	0	True				
ANR	704176	IdentifierDecl	* qn = NQTFR ( node -> target )		703752	0					
ANR	704177	IdentifierDeclType	QtfrNode *		703752	0					
ANR	704178	Identifier	qn		703752	1					
ANR	704179	AssignmentExpression	* qn = NQTFR ( node -> target )		703752	2		=			
ANR	704180	Identifier	qn		703752	0					
ANR	704181	CallExpression	NQTFR ( node -> target )		703752	1					
ANR	704182	Callee	NQTFR		703752	0					
ANR	704183	Identifier	NQTFR		703752	0					
ANR	704184	ArgumentList	node -> target		703752	1					
ANR	704185	Argument	node -> target		703752	0					
ANR	704186	PtrMemberAccess	node -> target		703752	0					
ANR	704187	Identifier	node		703752	0					
ANR	704188	Identifier	target		703752	1					
ANR	704189	ExpressionStatement	"r = compile_tree_n_times ( qn -> target , qn -> lower , reg )"	1339:6:32339:32391	703752	1	True				
ANR	704190	AssignmentExpression	"r = compile_tree_n_times ( qn -> target , qn -> lower , reg )"		703752	0		=			
ANR	704191	Identifier	r		703752	0					
ANR	704192	CallExpression	"compile_tree_n_times ( qn -> target , qn -> lower , reg )"		703752	1					
ANR	704193	Callee	compile_tree_n_times		703752	0					
ANR	704194	Identifier	compile_tree_n_times		703752	0					
ANR	704195	ArgumentList	qn -> target		703752	1					
ANR	704196	Argument	qn -> target		703752	0					
ANR	704197	PtrMemberAccess	qn -> target		703752	0					
ANR	704198	Identifier	qn		703752	0					
ANR	704199	Identifier	target		703752	1					
ANR	704200	Argument	qn -> lower		703752	1					
ANR	704201	PtrMemberAccess	qn -> lower		703752	0					
ANR	704202	Identifier	qn		703752	0					
ANR	704203	Identifier	lower		703752	1					
ANR	704204	Argument	reg		703752	2					
ANR	704205	Identifier	reg		703752	0					
ANR	704206	IfStatement	if ( r )		703752	2					
ANR	704207	Condition	r	1340:10:32403:32403	703752	0	True				
ANR	704208	Identifier	r		703752	0					
ANR	704209	ReturnStatement	return r ;	1340:13:32406:32414	703752	1	True				
ANR	704210	Identifier	r		703752	0					
ANR	704211	ExpressionStatement	"len = compile_length_tree ( qn -> target , reg )"	1342:6:32423:32465	703752	3	True				
ANR	704212	AssignmentExpression	"len = compile_length_tree ( qn -> target , reg )"		703752	0		=			
ANR	704213	Identifier	len		703752	0					
ANR	704214	CallExpression	"compile_length_tree ( qn -> target , reg )"		703752	1					
ANR	704215	Callee	compile_length_tree		703752	0					
ANR	704216	Identifier	compile_length_tree		703752	0					
ANR	704217	ArgumentList	qn -> target		703752	1					
ANR	704218	Argument	qn -> target		703752	0					
ANR	704219	PtrMemberAccess	qn -> target		703752	0					
ANR	704220	Identifier	qn		703752	0					
ANR	704221	Identifier	target		703752	1					
ANR	704222	Argument	reg		703752	1					
ANR	704223	Identifier	reg		703752	0					
ANR	704224	IfStatement	if ( len < 0 )		703752	4					
ANR	704225	Condition	len < 0	1343:10:32477:32483	703752	0	True				
ANR	704226	RelationalExpression	len < 0		703752	0		<			
ANR	704227	Identifier	len		703752	0					
ANR	704228	PrimaryExpression	0		703752	1					
ANR	704229	ReturnStatement	return len ;	1343:19:32486:32496	703752	1	True				
ANR	704230	Identifier	len		703752	0					
ANR	704231	ExpressionStatement	"r = add_opcode_rel_addr ( reg , OP_PUSH , len + SIZE_OP_POP + SIZE_OP_JUMP )"	1345:6:32505:32576	703752	5	True				
ANR	704232	AssignmentExpression	"r = add_opcode_rel_addr ( reg , OP_PUSH , len + SIZE_OP_POP + SIZE_OP_JUMP )"		703752	0		=			
ANR	704233	Identifier	r		703752	0					
ANR	704234	CallExpression	"add_opcode_rel_addr ( reg , OP_PUSH , len + SIZE_OP_POP + SIZE_OP_JUMP )"		703752	1					
ANR	704235	Callee	add_opcode_rel_addr		703752	0					
ANR	704236	Identifier	add_opcode_rel_addr		703752	0					
ANR	704237	ArgumentList	reg		703752	1					
ANR	704238	Argument	reg		703752	0					
ANR	704239	Identifier	reg		703752	0					
ANR	704240	Argument	OP_PUSH		703752	1					
ANR	704241	Identifier	OP_PUSH		703752	0					
ANR	704242	Argument	len + SIZE_OP_POP + SIZE_OP_JUMP		703752	2					
ANR	704243	AdditiveExpression	len + SIZE_OP_POP + SIZE_OP_JUMP		703752	0		+			
ANR	704244	Identifier	len		703752	0					
ANR	704245	AdditiveExpression	SIZE_OP_POP + SIZE_OP_JUMP		703752	1		+			
ANR	704246	Identifier	SIZE_OP_POP		703752	0					
ANR	704247	Identifier	SIZE_OP_JUMP		703752	1					
ANR	704248	IfStatement	if ( r )		703752	6					
ANR	704249	Condition	r	1346:10:32588:32588	703752	0	True				
ANR	704250	Identifier	r		703752	0					
ANR	704251	ReturnStatement	return r ;	1346:13:32591:32599	703752	1	True				
ANR	704252	Identifier	r		703752	0					
ANR	704253	ExpressionStatement	"r = compile_tree ( qn -> target , reg )"	1347:6:32607:32640	703752	7	True				
ANR	704254	AssignmentExpression	"r = compile_tree ( qn -> target , reg )"		703752	0		=			
ANR	704255	Identifier	r		703752	0					
ANR	704256	CallExpression	"compile_tree ( qn -> target , reg )"		703752	1					
ANR	704257	Callee	compile_tree		703752	0					
ANR	704258	Identifier	compile_tree		703752	0					
ANR	704259	ArgumentList	qn -> target		703752	1					
ANR	704260	Argument	qn -> target		703752	0					
ANR	704261	PtrMemberAccess	qn -> target		703752	0					
ANR	704262	Identifier	qn		703752	0					
ANR	704263	Identifier	target		703752	1					
ANR	704264	Argument	reg		703752	1					
ANR	704265	Identifier	reg		703752	0					
ANR	704266	IfStatement	if ( r )		703752	8					
ANR	704267	Condition	r	1348:10:32652:32652	703752	0	True				
ANR	704268	Identifier	r		703752	0					
ANR	704269	ReturnStatement	return r ;	1348:13:32655:32663	703752	1	True				
ANR	704270	Identifier	r		703752	0					
ANR	704271	ExpressionStatement	"r = add_opcode ( reg , OP_POP )"	1349:6:32671:32698	703752	9	True				
ANR	704272	AssignmentExpression	"r = add_opcode ( reg , OP_POP )"		703752	0		=			
ANR	704273	Identifier	r		703752	0					
ANR	704274	CallExpression	"add_opcode ( reg , OP_POP )"		703752	1					
ANR	704275	Callee	add_opcode		703752	0					
ANR	704276	Identifier	add_opcode		703752	0					
ANR	704277	ArgumentList	reg		703752	1					
ANR	704278	Argument	reg		703752	0					
ANR	704279	Identifier	reg		703752	0					
ANR	704280	Argument	OP_POP		703752	1					
ANR	704281	Identifier	OP_POP		703752	0					
ANR	704282	IfStatement	if ( r )		703752	10					
ANR	704283	Condition	r	1350:10:32710:32710	703752	0	True				
ANR	704284	Identifier	r		703752	0					
ANR	704285	ReturnStatement	return r ;	1350:13:32713:32721	703752	1	True				
ANR	704286	Identifier	r		703752	0					
ANR	704287	ExpressionStatement	"r = add_opcode_rel_addr ( reg , OP_JUMP , - ( ( int ) SIZE_OP_PUSH + len + ( int ) SIZE_OP_POP + ( int ) SIZE_OP_JUMP ) )"	1351:6:32729:32838	703752	11	True				
ANR	704288	AssignmentExpression	"r = add_opcode_rel_addr ( reg , OP_JUMP , - ( ( int ) SIZE_OP_PUSH + len + ( int ) SIZE_OP_POP + ( int ) SIZE_OP_JUMP ) )"		703752	0		=			
ANR	704289	Identifier	r		703752	0					
ANR	704290	CallExpression	"add_opcode_rel_addr ( reg , OP_JUMP , - ( ( int ) SIZE_OP_PUSH + len + ( int ) SIZE_OP_POP + ( int ) SIZE_OP_JUMP ) )"		703752	1					
ANR	704291	Callee	add_opcode_rel_addr		703752	0					
ANR	704292	Identifier	add_opcode_rel_addr		703752	0					
ANR	704293	ArgumentList	reg		703752	1					
ANR	704294	Argument	reg		703752	0					
ANR	704295	Identifier	reg		703752	0					
ANR	704296	Argument	OP_JUMP		703752	1					
ANR	704297	Identifier	OP_JUMP		703752	0					
ANR	704298	Argument	- ( ( int ) SIZE_OP_PUSH + len + ( int ) SIZE_OP_POP + ( int ) SIZE_OP_JUMP )		703752	2					
ANR	704299	UnaryOperationExpression	- ( ( int ) SIZE_OP_PUSH + len + ( int ) SIZE_OP_POP + ( int ) SIZE_OP_JUMP )		703752	0					
ANR	704300	UnaryOperator	-		703752	0					
ANR	704301	AdditiveExpression	( int ) SIZE_OP_PUSH + len + ( int ) SIZE_OP_POP + ( int ) SIZE_OP_JUMP		703752	1		+			
ANR	704302	CastExpression	( int ) SIZE_OP_PUSH		703752	0					
ANR	704303	CastTarget	int		703752	0					
ANR	704304	Identifier	SIZE_OP_PUSH		703752	1					
ANR	704305	AdditiveExpression	len + ( int ) SIZE_OP_POP + ( int ) SIZE_OP_JUMP		703752	1		+			
ANR	704306	Identifier	len		703752	0					
ANR	704307	AdditiveExpression	( int ) SIZE_OP_POP + ( int ) SIZE_OP_JUMP		703752	1		+			
ANR	704308	CastExpression	( int ) SIZE_OP_POP		703752	0					
ANR	704309	CastTarget	int		703752	0					
ANR	704310	Identifier	SIZE_OP_POP		703752	1					
ANR	704311	CastExpression	( int ) SIZE_OP_JUMP		703752	1					
ANR	704312	CastTarget	int		703752	0					
ANR	704313	Identifier	SIZE_OP_JUMP		703752	1					
ANR	704314	ElseStatement	else		703752	0					
ANR	704315	CompoundStatement		83:9:2557:2557	703752	0					
ANR	704316	ExpressionStatement	"r = add_opcode ( reg , OP_PUSH_STOP_BT )"	1355:6:32863:32899	703752	0	True				
ANR	704317	AssignmentExpression	"r = add_opcode ( reg , OP_PUSH_STOP_BT )"		703752	0		=			
ANR	704318	Identifier	r		703752	0					
ANR	704319	CallExpression	"add_opcode ( reg , OP_PUSH_STOP_BT )"		703752	1					
ANR	704320	Callee	add_opcode		703752	0					
ANR	704321	Identifier	add_opcode		703752	0					
ANR	704322	ArgumentList	reg		703752	1					
ANR	704323	Argument	reg		703752	0					
ANR	704324	Identifier	reg		703752	0					
ANR	704325	Argument	OP_PUSH_STOP_BT		703752	1					
ANR	704326	Identifier	OP_PUSH_STOP_BT		703752	0					
ANR	704327	IfStatement	if ( r )		703752	1					
ANR	704328	Condition	r	1356:10:32911:32911	703752	0	True				
ANR	704329	Identifier	r		703752	0					
ANR	704330	ReturnStatement	return r ;	1356:13:32914:32922	703752	1	True				
ANR	704331	Identifier	r		703752	0					
ANR	704332	ExpressionStatement	"r = compile_tree ( node -> target , reg )"	1357:6:32930:32965	703752	2	True				
ANR	704333	AssignmentExpression	"r = compile_tree ( node -> target , reg )"		703752	0		=			
ANR	704334	Identifier	r		703752	0					
ANR	704335	CallExpression	"compile_tree ( node -> target , reg )"		703752	1					
ANR	704336	Callee	compile_tree		703752	0					
ANR	704337	Identifier	compile_tree		703752	0					
ANR	704338	ArgumentList	node -> target		703752	1					
ANR	704339	Argument	node -> target		703752	0					
ANR	704340	PtrMemberAccess	node -> target		703752	0					
ANR	704341	Identifier	node		703752	0					
ANR	704342	Identifier	target		703752	1					
ANR	704343	Argument	reg		703752	1					
ANR	704344	Identifier	reg		703752	0					
ANR	704345	IfStatement	if ( r )		703752	3					
ANR	704346	Condition	r	1358:10:32977:32977	703752	0	True				
ANR	704347	Identifier	r		703752	0					
ANR	704348	ReturnStatement	return r ;	1358:13:32980:32988	703752	1	True				
ANR	704349	Identifier	r		703752	0					
ANR	704350	ExpressionStatement	"r = add_opcode ( reg , OP_POP_STOP_BT )"	1359:6:32996:33031	703752	4	True				
ANR	704351	AssignmentExpression	"r = add_opcode ( reg , OP_POP_STOP_BT )"		703752	0		=			
ANR	704352	Identifier	r		703752	0					
ANR	704353	CallExpression	"add_opcode ( reg , OP_POP_STOP_BT )"		703752	1					
ANR	704354	Callee	add_opcode		703752	0					
ANR	704355	Identifier	add_opcode		703752	0					
ANR	704356	ArgumentList	reg		703752	1					
ANR	704357	Argument	reg		703752	0					
ANR	704358	Identifier	reg		703752	0					
ANR	704359	Argument	OP_POP_STOP_BT		703752	1					
ANR	704360	Identifier	OP_POP_STOP_BT		703752	0					
ANR	704361	BreakStatement	break ;	1361:4:33043:33048	703752	12	True				
ANR	704362	Label	default :	1363:2:33053:33060	703752	13	True				
ANR	704363	Identifier	default		703752	0					
ANR	704364	ReturnStatement	return ONIGERR_TYPE_BUG ;	1364:4:33066:33089	703752	14	True				
ANR	704365	Identifier	ONIGERR_TYPE_BUG		703752	0					
ANR	704366	BreakStatement	break ;	1365:4:33095:33100	703752	15	True				
ANR	704367	ReturnStatement	return r ;	1368:2:33109:33117	703752	3	True				
ANR	704368	Identifier	r		703752	0					
ANR	704369	ReturnType	static int		703752	1					
ANR	704370	Identifier	compile_enclose_node		703752	2					
ANR	704371	ParameterList	"EncloseNode * node , regex_t * reg"		703752	3					
ANR	704372	Parameter	EncloseNode * node	1271:21:30264:30280	703752	0	True				
ANR	704373	ParameterType	EncloseNode *		703752	0					
ANR	704374	Identifier	node		703752	1					
ANR	704375	Parameter	regex_t * reg	1271:40:30283:30294	703752	1	True				
ANR	704376	ParameterType	regex_t *		703752	0					
ANR	704377	Identifier	reg		703752	1					
ANR	704378	CFGEntryNode	ENTRY		703752		True				
ANR	704379	CFGExitNode	EXIT		703752		True				
ANR	704380	Symbol	BBUF_GET_OFFSET_POS		703752						
ANR	704381	Symbol	OP_RETURN		703752						
ANR	704382	Symbol	SIZE_OP_MEMORY_END_PUSH_REC		703752						
ANR	704383	Symbol	ENCLOSE_OPTION		703752						
ANR	704384	Symbol	NQTFR		703752						
ANR	704385	Symbol	SIZE_OP_MEMORY_START_PUSH		703752						
ANR	704386	Symbol	OP_MEMORY_END_PUSH		703752						
ANR	704387	Symbol	len		703752						
ANR	704388	Symbol	reg		703752						
ANR	704389	Symbol	compile_option_node		703752						
ANR	704390	Symbol	OP_CALL		703752						
ANR	704391	Symbol	OP_PUSH_STOP_BT		703752						
ANR	704392	Symbol	* node		703752						
ANR	704393	Symbol	add_opcode		703752						
ANR	704394	Symbol	OP_POP_STOP_BT		703752						
ANR	704395	Symbol	qn		703752						
ANR	704396	Symbol	SIZE_OP_JUMP		703752						
ANR	704397	Symbol	BIT_STATUS_AT		703752						
ANR	704398	Symbol	OP_JUMP		703752						
ANR	704399	Symbol	NST_ADDR_FIXED		703752						
ANR	704400	Symbol	OP_MEMORY_END_REC		703752						
ANR	704401	Symbol	add_abs_addr		703752						
ANR	704402	Symbol	node -> regnum		703752						
ANR	704403	Symbol	ONIGERR_TYPE_BUG		703752						
ANR	704404	Symbol	qn -> target		703752						
ANR	704405	Symbol	node		703752						
ANR	704406	Symbol	OP_POP		703752						
ANR	704407	Symbol	OP_MEMORY_END_PUSH_REC		703752						
ANR	704408	Symbol	node -> type		703752						
ANR	704409	Symbol	OP_MEMORY_END		703752						
ANR	704410	Symbol	OP_MEMORY_START_PUSH		703752						
ANR	704411	Symbol	SIZE_OP_MEMORY_END_PUSH		703752						
ANR	704412	Symbol	* qn		703752						
ANR	704413	Symbol	compile_tree_n_times		703752						
ANR	704414	Symbol	OP_PUSH		703752						
ANR	704415	Symbol	SIZE_OP_MEMORY_END		703752						
ANR	704416	Symbol	OP_MEMORY_START		703752						
ANR	704417	Symbol	add_mem_num		703752						
ANR	704418	Symbol	qn -> lower		703752						
ANR	704419	Symbol	reg -> bt_mem_end		703752						
ANR	704420	Symbol	SIZE_OP_MEMORY_END_REC		703752						
ANR	704421	Symbol	IS_ENCLOSE_STOP_BT_SIMPLE_REPEAT		703752						
ANR	704422	Symbol	node -> call_addr		703752						
ANR	704423	Symbol	add_opcode_rel_addr		703752						
ANR	704424	Symbol	compile_length_tree		703752						
ANR	704425	Symbol	IS_ENCLOSE_CALLED		703752						
ANR	704426	Symbol	SIZE_OP_PUSH		703752						
ANR	704427	Symbol	SIZE_ABSADDR		703752						
ANR	704428	Symbol	node -> state		703752						
ANR	704429	Symbol	r		703752						
ANR	704430	Symbol	compile_tree		703752						
ANR	704431	Symbol	reg -> bt_mem_start		703752						
ANR	704432	Symbol	SIZE_OP_POP		703752						
ANR	704433	Symbol	IS_ENCLOSE_RECURSION		703752						
ANR	704434	Symbol	SIZE_OP_RETURN		703752						
ANR	704435	Symbol	node -> target		703752						
ANR	704436	Symbol	* reg		703752						
ANR	704437	Function	compile_length_anchor_node	1371:0:33122:33803							
ANR	704438	FunctionDef	"compile_length_anchor_node (AnchorNode * node , regex_t * reg)"		704437	0					
ANR	704439	CompoundStatement		1373:0:33192:33803	704437	0					
ANR	704440	IdentifierDeclStatement	int len ;	1374:2:33196:33203	704437	0	True				
ANR	704441	IdentifierDecl	len		704437	0					
ANR	704442	IdentifierDeclType	int		704437	0					
ANR	704443	Identifier	len		704437	1					
ANR	704444	IdentifierDeclStatement	int tlen = 0 ;	1375:2:33207:33219	704437	1	True				
ANR	704445	IdentifierDecl	tlen = 0		704437	0					
ANR	704446	IdentifierDeclType	int		704437	0					
ANR	704447	Identifier	tlen		704437	1					
ANR	704448	AssignmentExpression	tlen = 0		704437	2		=			
ANR	704449	Identifier	tlen		704437	0					
ANR	704450	PrimaryExpression	0		704437	1					
ANR	704451	IfStatement	if ( node -> target )		704437	2					
ANR	704452	Condition	node -> target	1377:6:33228:33239	704437	0	True				
ANR	704453	PtrMemberAccess	node -> target		704437	0					
ANR	704454	Identifier	node		704437	0					
ANR	704455	Identifier	target		704437	1					
ANR	704456	CompoundStatement		5:20:49:49	704437	1					
ANR	704457	ExpressionStatement	"tlen = compile_length_tree ( node -> target , reg )"	1378:4:33248:33293	704437	0	True				
ANR	704458	AssignmentExpression	"tlen = compile_length_tree ( node -> target , reg )"		704437	0		=			
ANR	704459	Identifier	tlen		704437	0					
ANR	704460	CallExpression	"compile_length_tree ( node -> target , reg )"		704437	1					
ANR	704461	Callee	compile_length_tree		704437	0					
ANR	704462	Identifier	compile_length_tree		704437	0					
ANR	704463	ArgumentList	node -> target		704437	1					
ANR	704464	Argument	node -> target		704437	0					
ANR	704465	PtrMemberAccess	node -> target		704437	0					
ANR	704466	Identifier	node		704437	0					
ANR	704467	Identifier	target		704437	1					
ANR	704468	Argument	reg		704437	1					
ANR	704469	Identifier	reg		704437	0					
ANR	704470	IfStatement	if ( tlen < 0 )		704437	1					
ANR	704471	Condition	tlen < 0	1379:8:33303:33310	704437	0	True				
ANR	704472	RelationalExpression	tlen < 0		704437	0		<			
ANR	704473	Identifier	tlen		704437	0					
ANR	704474	PrimaryExpression	0		704437	1					
ANR	704475	ReturnStatement	return tlen ;	1379:18:33313:33324	704437	1	True				
ANR	704476	Identifier	tlen		704437	0					
ANR	704477	SwitchStatement	switch ( node -> type )		704437	3					
ANR	704478	Condition	node -> type	1382:10:33341:33350	704437	0	True				
ANR	704479	PtrMemberAccess	node -> type		704437	0					
ANR	704480	Identifier	node		704437	0					
ANR	704481	Identifier	type		704437	1					
ANR	704482	CompoundStatement		10:22:160:160	704437	1					
ANR	704483	Label	case ANCHOR_PREC_READ :	1383:2:33357:33378	704437	0	True				
ANR	704484	Identifier	ANCHOR_PREC_READ		704437	0					
ANR	704485	ExpressionStatement	len = SIZE_OP_PUSH_POS + tlen + SIZE_OP_POP_POS	1384:4:33384:33431	704437	1	True				
ANR	704486	AssignmentExpression	len = SIZE_OP_PUSH_POS + tlen + SIZE_OP_POP_POS		704437	0		=			
ANR	704487	Identifier	len		704437	0					
ANR	704488	AdditiveExpression	SIZE_OP_PUSH_POS + tlen + SIZE_OP_POP_POS		704437	1		+			
ANR	704489	Identifier	SIZE_OP_PUSH_POS		704437	0					
ANR	704490	AdditiveExpression	tlen + SIZE_OP_POP_POS		704437	1		+			
ANR	704491	Identifier	tlen		704437	0					
ANR	704492	Identifier	SIZE_OP_POP_POS		704437	1					
ANR	704493	BreakStatement	break ;	1385:4:33437:33442	704437	2	True				
ANR	704494	Label	case ANCHOR_PREC_READ_NOT :	1386:2:33446:33471	704437	3	True				
ANR	704495	Identifier	ANCHOR_PREC_READ_NOT		704437	0					
ANR	704496	ExpressionStatement	len = SIZE_OP_PUSH_POS_NOT + tlen + SIZE_OP_FAIL_POS	1387:4:33477:33529	704437	4	True				
ANR	704497	AssignmentExpression	len = SIZE_OP_PUSH_POS_NOT + tlen + SIZE_OP_FAIL_POS		704437	0		=			
ANR	704498	Identifier	len		704437	0					
ANR	704499	AdditiveExpression	SIZE_OP_PUSH_POS_NOT + tlen + SIZE_OP_FAIL_POS		704437	1		+			
ANR	704500	Identifier	SIZE_OP_PUSH_POS_NOT		704437	0					
ANR	704501	AdditiveExpression	tlen + SIZE_OP_FAIL_POS		704437	1		+			
ANR	704502	Identifier	tlen		704437	0					
ANR	704503	Identifier	SIZE_OP_FAIL_POS		704437	1					
ANR	704504	BreakStatement	break ;	1388:4:33535:33540	704437	5	True				
ANR	704505	Label	case ANCHOR_LOOK_BEHIND :	1389:2:33544:33567	704437	6	True				
ANR	704506	Identifier	ANCHOR_LOOK_BEHIND		704437	0					
ANR	704507	ExpressionStatement	len = SIZE_OP_LOOK_BEHIND + tlen	1390:4:33573:33605	704437	7	True				
ANR	704508	AssignmentExpression	len = SIZE_OP_LOOK_BEHIND + tlen		704437	0		=			
ANR	704509	Identifier	len		704437	0					
ANR	704510	AdditiveExpression	SIZE_OP_LOOK_BEHIND + tlen		704437	1		+			
ANR	704511	Identifier	SIZE_OP_LOOK_BEHIND		704437	0					
ANR	704512	Identifier	tlen		704437	1					
ANR	704513	BreakStatement	break ;	1391:4:33611:33616	704437	8	True				
ANR	704514	Label	case ANCHOR_LOOK_BEHIND_NOT :	1392:2:33620:33647	704437	9	True				
ANR	704515	Identifier	ANCHOR_LOOK_BEHIND_NOT		704437	0					
ANR	704516	ExpressionStatement	len = SIZE_OP_PUSH_LOOK_BEHIND_NOT + tlen + SIZE_OP_FAIL_LOOK_BEHIND_NOT	1393:4:33653:33725	704437	10	True				
ANR	704517	AssignmentExpression	len = SIZE_OP_PUSH_LOOK_BEHIND_NOT + tlen + SIZE_OP_FAIL_LOOK_BEHIND_NOT		704437	0		=			
ANR	704518	Identifier	len		704437	0					
ANR	704519	AdditiveExpression	SIZE_OP_PUSH_LOOK_BEHIND_NOT + tlen + SIZE_OP_FAIL_LOOK_BEHIND_NOT		704437	1		+			
ANR	704520	Identifier	SIZE_OP_PUSH_LOOK_BEHIND_NOT		704437	0					
ANR	704521	AdditiveExpression	tlen + SIZE_OP_FAIL_LOOK_BEHIND_NOT		704437	1		+			
ANR	704522	Identifier	tlen		704437	0					
ANR	704523	Identifier	SIZE_OP_FAIL_LOOK_BEHIND_NOT		704437	1					
ANR	704524	BreakStatement	break ;	1394:4:33731:33736	704437	11	True				
ANR	704525	Label	default :	1396:2:33741:33748	704437	12	True				
ANR	704526	Identifier	default		704437	0					
ANR	704527	ExpressionStatement	len = SIZE_OPCODE	1397:4:33754:33771	704437	13	True				
ANR	704528	AssignmentExpression	len = SIZE_OPCODE		704437	0		=			
ANR	704529	Identifier	len		704437	0					
ANR	704530	Identifier	SIZE_OPCODE		704437	1					
ANR	704531	BreakStatement	break ;	1398:4:33777:33782	704437	14	True				
ANR	704532	ReturnStatement	return len ;	1401:2:33791:33801	704437	4	True				
ANR	704533	Identifier	len		704437	0					
ANR	704534	ReturnType	static int		704437	1					
ANR	704535	Identifier	compile_length_anchor_node		704437	2					
ANR	704536	ParameterList	"AnchorNode * node , regex_t * reg"		704437	3					
ANR	704537	Parameter	AnchorNode * node	1372:27:33160:33175	704437	0	True				
ANR	704538	ParameterType	AnchorNode *		704437	0					
ANR	704539	Identifier	node		704437	1					
ANR	704540	Parameter	regex_t * reg	1372:45:33178:33189	704437	1	True				
ANR	704541	ParameterType	regex_t *		704437	0					
ANR	704542	Identifier	reg		704437	1					
ANR	704543	CFGEntryNode	ENTRY		704437		True				
ANR	704544	CFGExitNode	EXIT		704437		True				
ANR	704545	Symbol	SIZE_OP_FAIL_POS		704437						
ANR	704546	Symbol	compile_length_tree		704437						
ANR	704547	Symbol	SIZE_OP_POP_POS		704437						
ANR	704548	Symbol	SIZE_OP_LOOK_BEHIND		704437						
ANR	704549	Symbol	SIZE_OP_PUSH_LOOK_BEHIND_NOT		704437						
ANR	704550	Symbol	node		704437						
ANR	704551	Symbol	SIZE_OPCODE		704437						
ANR	704552	Symbol	len		704437						
ANR	704553	Symbol	SIZE_OP_PUSH_POS_NOT		704437						
ANR	704554	Symbol	SIZE_OP_FAIL_LOOK_BEHIND_NOT		704437						
ANR	704555	Symbol	reg		704437						
ANR	704556	Symbol	tlen		704437						
ANR	704557	Symbol	node -> type		704437						
ANR	704558	Symbol	* node		704437						
ANR	704559	Symbol	node -> target		704437						
ANR	704560	Symbol	SIZE_OP_PUSH_POS		704437						
ANR	704561	Function	compile_anchor_node	1404:0:33806:36285							
ANR	704562	FunctionDef	"compile_anchor_node (AnchorNode * node , regex_t * reg)"		704561	0					
ANR	704563	CompoundStatement		1406:0:33869:36285	704561	0					
ANR	704564	IdentifierDeclStatement	"int r , len ;"	1407:2:33873:33883	704561	0	True				
ANR	704565	IdentifierDecl	r		704561	0					
ANR	704566	IdentifierDeclType	int		704561	0					
ANR	704567	Identifier	r		704561	1					
ANR	704568	IdentifierDecl	len		704561	1					
ANR	704569	IdentifierDeclType	int		704561	0					
ANR	704570	Identifier	len		704561	1					
ANR	704571	SwitchStatement	switch ( node -> type )		704561	1					
ANR	704572	Condition	node -> type	1409:10:33896:33905	704561	0	True				
ANR	704573	PtrMemberAccess	node -> type		704561	0					
ANR	704574	Identifier	node		704561	0					
ANR	704575	Identifier	type		704561	1					
ANR	704576	CompoundStatement		4:22:38:38	704561	1					
ANR	704577	Label	case ANCHOR_BEGIN_BUF :	1410:2:33912:33933	704561	0	True				
ANR	704578	Identifier	ANCHOR_BEGIN_BUF		704561	0					
ANR	704579	ExpressionStatement	"r = add_opcode ( reg , OP_BEGIN_BUF )"	1410:30:33940:33973	704561	1	True				
ANR	704580	AssignmentExpression	"r = add_opcode ( reg , OP_BEGIN_BUF )"		704561	0		=			
ANR	704581	Identifier	r		704561	0					
ANR	704582	CallExpression	"add_opcode ( reg , OP_BEGIN_BUF )"		704561	1					
ANR	704583	Callee	add_opcode		704561	0					
ANR	704584	Identifier	add_opcode		704561	0					
ANR	704585	ArgumentList	reg		704561	1					
ANR	704586	Argument	reg		704561	0					
ANR	704587	Identifier	reg		704561	0					
ANR	704588	Argument	OP_BEGIN_BUF		704561	1					
ANR	704589	Identifier	OP_BEGIN_BUF		704561	0					
ANR	704590	BreakStatement	break ;	1410:70:33980:33985	704561	2	True				
ANR	704591	Label	case ANCHOR_END_BUF :	1411:2:33989:34008	704561	3	True				
ANR	704592	Identifier	ANCHOR_END_BUF		704561	0					
ANR	704593	ExpressionStatement	"r = add_opcode ( reg , OP_END_BUF )"	1411:30:34017:34048	704561	4	True				
ANR	704594	AssignmentExpression	"r = add_opcode ( reg , OP_END_BUF )"		704561	0		=			
ANR	704595	Identifier	r		704561	0					
ANR	704596	CallExpression	"add_opcode ( reg , OP_END_BUF )"		704561	1					
ANR	704597	Callee	add_opcode		704561	0					
ANR	704598	Identifier	add_opcode		704561	0					
ANR	704599	ArgumentList	reg		704561	1					
ANR	704600	Argument	reg		704561	0					
ANR	704601	Identifier	reg		704561	0					
ANR	704602	Argument	OP_END_BUF		704561	1					
ANR	704603	Identifier	OP_END_BUF		704561	0					
ANR	704604	BreakStatement	break ;	1411:70:34057:34062	704561	5	True				
ANR	704605	Label	case ANCHOR_BEGIN_LINE :	1412:2:34066:34088	704561	6	True				
ANR	704606	Identifier	ANCHOR_BEGIN_LINE		704561	0					
ANR	704607	ExpressionStatement	"r = add_opcode ( reg , OP_BEGIN_LINE )"	1412:30:34094:34128	704561	7	True				
ANR	704608	AssignmentExpression	"r = add_opcode ( reg , OP_BEGIN_LINE )"		704561	0		=			
ANR	704609	Identifier	r		704561	0					
ANR	704610	CallExpression	"add_opcode ( reg , OP_BEGIN_LINE )"		704561	1					
ANR	704611	Callee	add_opcode		704561	0					
ANR	704612	Identifier	add_opcode		704561	0					
ANR	704613	ArgumentList	reg		704561	1					
ANR	704614	Argument	reg		704561	0					
ANR	704615	Identifier	reg		704561	0					
ANR	704616	Argument	OP_BEGIN_LINE		704561	1					
ANR	704617	Identifier	OP_BEGIN_LINE		704561	0					
ANR	704618	BreakStatement	break ;	1412:70:34134:34139	704561	8	True				
ANR	704619	Label	case ANCHOR_END_LINE :	1413:2:34143:34163	704561	9	True				
ANR	704620	Identifier	ANCHOR_END_LINE		704561	0					
ANR	704621	ExpressionStatement	"r = add_opcode ( reg , OP_END_LINE )"	1413:30:34171:34203	704561	10	True				
ANR	704622	AssignmentExpression	"r = add_opcode ( reg , OP_END_LINE )"		704561	0		=			
ANR	704623	Identifier	r		704561	0					
ANR	704624	CallExpression	"add_opcode ( reg , OP_END_LINE )"		704561	1					
ANR	704625	Callee	add_opcode		704561	0					
ANR	704626	Identifier	add_opcode		704561	0					
ANR	704627	ArgumentList	reg		704561	1					
ANR	704628	Argument	reg		704561	0					
ANR	704629	Identifier	reg		704561	0					
ANR	704630	Argument	OP_END_LINE		704561	1					
ANR	704631	Identifier	OP_END_LINE		704561	0					
ANR	704632	BreakStatement	break ;	1413:70:34211:34216	704561	11	True				
ANR	704633	Label	case ANCHOR_SEMI_END_BUF :	1414:2:34220:34244	704561	12	True				
ANR	704634	Identifier	ANCHOR_SEMI_END_BUF		704561	0					
ANR	704635	ExpressionStatement	"r = add_opcode ( reg , OP_SEMI_END_BUF )"	1414:30:34248:34284	704561	13	True				
ANR	704636	AssignmentExpression	"r = add_opcode ( reg , OP_SEMI_END_BUF )"		704561	0		=			
ANR	704637	Identifier	r		704561	0					
ANR	704638	CallExpression	"add_opcode ( reg , OP_SEMI_END_BUF )"		704561	1					
ANR	704639	Callee	add_opcode		704561	0					
ANR	704640	Identifier	add_opcode		704561	0					
ANR	704641	ArgumentList	reg		704561	1					
ANR	704642	Argument	reg		704561	0					
ANR	704643	Identifier	reg		704561	0					
ANR	704644	Argument	OP_SEMI_END_BUF		704561	1					
ANR	704645	Identifier	OP_SEMI_END_BUF		704561	0					
ANR	704646	BreakStatement	break ;	1414:70:34288:34293	704561	14	True				
ANR	704647	Label	case ANCHOR_BEGIN_POSITION :	1415:2:34297:34323	704561	15	True				
ANR	704648	Identifier	ANCHOR_BEGIN_POSITION		704561	0					
ANR	704649	ExpressionStatement	"r = add_opcode ( reg , OP_BEGIN_POSITION )"	1415:30:34325:34363	704561	16	True				
ANR	704650	AssignmentExpression	"r = add_opcode ( reg , OP_BEGIN_POSITION )"		704561	0		=			
ANR	704651	Identifier	r		704561	0					
ANR	704652	CallExpression	"add_opcode ( reg , OP_BEGIN_POSITION )"		704561	1					
ANR	704653	Callee	add_opcode		704561	0					
ANR	704654	Identifier	add_opcode		704561	0					
ANR	704655	ArgumentList	reg		704561	1					
ANR	704656	Argument	reg		704561	0					
ANR	704657	Identifier	reg		704561	0					
ANR	704658	Argument	OP_BEGIN_POSITION		704561	1					
ANR	704659	Identifier	OP_BEGIN_POSITION		704561	0					
ANR	704660	BreakStatement	break ;	1415:70:34365:34370	704561	17	True				
ANR	704661	Label	case ANCHOR_WORD_BOUND :	1417:2:34375:34397	704561	18	True				
ANR	704662	Identifier	ANCHOR_WORD_BOUND		704561	0					
ANR	704663	ExpressionStatement	"r = add_opcode ( reg , OP_WORD_BOUND )"	1417:30:34403:34437	704561	19	True				
ANR	704664	AssignmentExpression	"r = add_opcode ( reg , OP_WORD_BOUND )"		704561	0		=			
ANR	704665	Identifier	r		704561	0					
ANR	704666	CallExpression	"add_opcode ( reg , OP_WORD_BOUND )"		704561	1					
ANR	704667	Callee	add_opcode		704561	0					
ANR	704668	Identifier	add_opcode		704561	0					
ANR	704669	ArgumentList	reg		704561	1					
ANR	704670	Argument	reg		704561	0					
ANR	704671	Identifier	reg		704561	0					
ANR	704672	Argument	OP_WORD_BOUND		704561	1					
ANR	704673	Identifier	OP_WORD_BOUND		704561	0					
ANR	704674	BreakStatement	break ;	1417:70:34443:34448	704561	20	True				
ANR	704675	Label	case ANCHOR_NOT_WORD_BOUND :	1418:2:34452:34478	704561	21	True				
ANR	704676	Identifier	ANCHOR_NOT_WORD_BOUND		704561	0					
ANR	704677	ExpressionStatement	"r = add_opcode ( reg , OP_NOT_WORD_BOUND )"	1418:30:34480:34518	704561	22	True				
ANR	704678	AssignmentExpression	"r = add_opcode ( reg , OP_NOT_WORD_BOUND )"		704561	0		=			
ANR	704679	Identifier	r		704561	0					
ANR	704680	CallExpression	"add_opcode ( reg , OP_NOT_WORD_BOUND )"		704561	1					
ANR	704681	Callee	add_opcode		704561	0					
ANR	704682	Identifier	add_opcode		704561	0					
ANR	704683	ArgumentList	reg		704561	1					
ANR	704684	Argument	reg		704561	0					
ANR	704685	Identifier	reg		704561	0					
ANR	704686	Argument	OP_NOT_WORD_BOUND		704561	1					
ANR	704687	Identifier	OP_NOT_WORD_BOUND		704561	0					
ANR	704688	BreakStatement	break ;	1418:70:34520:34525	704561	23	True				
ANR	704689	Label	case ANCHOR_WORD_BEGIN :	1420:2:34555:34577	704561	24	True				
ANR	704690	Identifier	ANCHOR_WORD_BEGIN		704561	0					
ANR	704691	ExpressionStatement	"r = add_opcode ( reg , OP_WORD_BEGIN )"	1420:30:34583:34617	704561	25	True				
ANR	704692	AssignmentExpression	"r = add_opcode ( reg , OP_WORD_BEGIN )"		704561	0		=			
ANR	704693	Identifier	r		704561	0					
ANR	704694	CallExpression	"add_opcode ( reg , OP_WORD_BEGIN )"		704561	1					
ANR	704695	Callee	add_opcode		704561	0					
ANR	704696	Identifier	add_opcode		704561	0					
ANR	704697	ArgumentList	reg		704561	1					
ANR	704698	Argument	reg		704561	0					
ANR	704699	Identifier	reg		704561	0					
ANR	704700	Argument	OP_WORD_BEGIN		704561	1					
ANR	704701	Identifier	OP_WORD_BEGIN		704561	0					
ANR	704702	BreakStatement	break ;	1420:70:34623:34628	704561	26	True				
ANR	704703	Label	case ANCHOR_WORD_END :	1421:2:34632:34652	704561	27	True				
ANR	704704	Identifier	ANCHOR_WORD_END		704561	0					
ANR	704705	ExpressionStatement	"r = add_opcode ( reg , OP_WORD_END )"	1421:30:34660:34692	704561	28	True				
ANR	704706	AssignmentExpression	"r = add_opcode ( reg , OP_WORD_END )"		704561	0		=			
ANR	704707	Identifier	r		704561	0					
ANR	704708	CallExpression	"add_opcode ( reg , OP_WORD_END )"		704561	1					
ANR	704709	Callee	add_opcode		704561	0					
ANR	704710	Identifier	add_opcode		704561	0					
ANR	704711	ArgumentList	reg		704561	1					
ANR	704712	Argument	reg		704561	0					
ANR	704713	Identifier	reg		704561	0					
ANR	704714	Argument	OP_WORD_END		704561	1					
ANR	704715	Identifier	OP_WORD_END		704561	0					
ANR	704716	BreakStatement	break ;	1421:70:34700:34705	704561	29	True				
ANR	704717	Label	case ANCHOR_PREC_READ :	1424:2:34717:34738	704561	30	True				
ANR	704718	Identifier	ANCHOR_PREC_READ		704561	0					
ANR	704719	ExpressionStatement	"r = add_opcode ( reg , OP_PUSH_POS )"	1425:4:34744:34776	704561	31	True				
ANR	704720	AssignmentExpression	"r = add_opcode ( reg , OP_PUSH_POS )"		704561	0		=			
ANR	704721	Identifier	r		704561	0					
ANR	704722	CallExpression	"add_opcode ( reg , OP_PUSH_POS )"		704561	1					
ANR	704723	Callee	add_opcode		704561	0					
ANR	704724	Identifier	add_opcode		704561	0					
ANR	704725	ArgumentList	reg		704561	1					
ANR	704726	Argument	reg		704561	0					
ANR	704727	Identifier	reg		704561	0					
ANR	704728	Argument	OP_PUSH_POS		704561	1					
ANR	704729	Identifier	OP_PUSH_POS		704561	0					
ANR	704730	IfStatement	if ( r )		704561	32					
ANR	704731	Condition	r	1426:8:34786:34786	704561	0	True				
ANR	704732	Identifier	r		704561	0					
ANR	704733	ReturnStatement	return r ;	1426:11:34789:34797	704561	1	True				
ANR	704734	Identifier	r		704561	0					
ANR	704735	ExpressionStatement	"r = compile_tree ( node -> target , reg )"	1427:4:34803:34838	704561	33	True				
ANR	704736	AssignmentExpression	"r = compile_tree ( node -> target , reg )"		704561	0		=			
ANR	704737	Identifier	r		704561	0					
ANR	704738	CallExpression	"compile_tree ( node -> target , reg )"		704561	1					
ANR	704739	Callee	compile_tree		704561	0					
ANR	704740	Identifier	compile_tree		704561	0					
ANR	704741	ArgumentList	node -> target		704561	1					
ANR	704742	Argument	node -> target		704561	0					
ANR	704743	PtrMemberAccess	node -> target		704561	0					
ANR	704744	Identifier	node		704561	0					
ANR	704745	Identifier	target		704561	1					
ANR	704746	Argument	reg		704561	1					
ANR	704747	Identifier	reg		704561	0					
ANR	704748	IfStatement	if ( r )		704561	34					
ANR	704749	Condition	r	1428:8:34848:34848	704561	0	True				
ANR	704750	Identifier	r		704561	0					
ANR	704751	ReturnStatement	return r ;	1428:11:34851:34859	704561	1	True				
ANR	704752	Identifier	r		704561	0					
ANR	704753	ExpressionStatement	"r = add_opcode ( reg , OP_POP_POS )"	1429:4:34865:34896	704561	35	True				
ANR	704754	AssignmentExpression	"r = add_opcode ( reg , OP_POP_POS )"		704561	0		=			
ANR	704755	Identifier	r		704561	0					
ANR	704756	CallExpression	"add_opcode ( reg , OP_POP_POS )"		704561	1					
ANR	704757	Callee	add_opcode		704561	0					
ANR	704758	Identifier	add_opcode		704561	0					
ANR	704759	ArgumentList	reg		704561	1					
ANR	704760	Argument	reg		704561	0					
ANR	704761	Identifier	reg		704561	0					
ANR	704762	Argument	OP_POP_POS		704561	1					
ANR	704763	Identifier	OP_POP_POS		704561	0					
ANR	704764	BreakStatement	break ;	1430:4:34902:34907	704561	36	True				
ANR	704765	Label	case ANCHOR_PREC_READ_NOT :	1432:2:34912:34937	704561	37	True				
ANR	704766	Identifier	ANCHOR_PREC_READ_NOT		704561	0					
ANR	704767	ExpressionStatement	"len = compile_length_tree ( node -> target , reg )"	1433:4:34943:34987	704561	38	True				
ANR	704768	AssignmentExpression	"len = compile_length_tree ( node -> target , reg )"		704561	0		=			
ANR	704769	Identifier	len		704561	0					
ANR	704770	CallExpression	"compile_length_tree ( node -> target , reg )"		704561	1					
ANR	704771	Callee	compile_length_tree		704561	0					
ANR	704772	Identifier	compile_length_tree		704561	0					
ANR	704773	ArgumentList	node -> target		704561	1					
ANR	704774	Argument	node -> target		704561	0					
ANR	704775	PtrMemberAccess	node -> target		704561	0					
ANR	704776	Identifier	node		704561	0					
ANR	704777	Identifier	target		704561	1					
ANR	704778	Argument	reg		704561	1					
ANR	704779	Identifier	reg		704561	0					
ANR	704780	IfStatement	if ( len < 0 )		704561	39					
ANR	704781	Condition	len < 0	1434:8:34997:35003	704561	0	True				
ANR	704782	RelationalExpression	len < 0		704561	0		<			
ANR	704783	Identifier	len		704561	0					
ANR	704784	PrimaryExpression	0		704561	1					
ANR	704785	ReturnStatement	return len ;	1434:17:35006:35016	704561	1	True				
ANR	704786	Identifier	len		704561	0					
ANR	704787	ExpressionStatement	"r = add_opcode_rel_addr ( reg , OP_PUSH_POS_NOT , len + SIZE_OP_FAIL_POS )"	1435:4:35022:35091	704561	40	True				
ANR	704788	AssignmentExpression	"r = add_opcode_rel_addr ( reg , OP_PUSH_POS_NOT , len + SIZE_OP_FAIL_POS )"		704561	0		=			
ANR	704789	Identifier	r		704561	0					
ANR	704790	CallExpression	"add_opcode_rel_addr ( reg , OP_PUSH_POS_NOT , len + SIZE_OP_FAIL_POS )"		704561	1					
ANR	704791	Callee	add_opcode_rel_addr		704561	0					
ANR	704792	Identifier	add_opcode_rel_addr		704561	0					
ANR	704793	ArgumentList	reg		704561	1					
ANR	704794	Argument	reg		704561	0					
ANR	704795	Identifier	reg		704561	0					
ANR	704796	Argument	OP_PUSH_POS_NOT		704561	1					
ANR	704797	Identifier	OP_PUSH_POS_NOT		704561	0					
ANR	704798	Argument	len + SIZE_OP_FAIL_POS		704561	2					
ANR	704799	AdditiveExpression	len + SIZE_OP_FAIL_POS		704561	0		+			
ANR	704800	Identifier	len		704561	0					
ANR	704801	Identifier	SIZE_OP_FAIL_POS		704561	1					
ANR	704802	IfStatement	if ( r )		704561	41					
ANR	704803	Condition	r	1436:8:35101:35101	704561	0	True				
ANR	704804	Identifier	r		704561	0					
ANR	704805	ReturnStatement	return r ;	1436:11:35104:35112	704561	1	True				
ANR	704806	Identifier	r		704561	0					
ANR	704807	ExpressionStatement	"r = compile_tree ( node -> target , reg )"	1437:4:35118:35153	704561	42	True				
ANR	704808	AssignmentExpression	"r = compile_tree ( node -> target , reg )"		704561	0		=			
ANR	704809	Identifier	r		704561	0					
ANR	704810	CallExpression	"compile_tree ( node -> target , reg )"		704561	1					
ANR	704811	Callee	compile_tree		704561	0					
ANR	704812	Identifier	compile_tree		704561	0					
ANR	704813	ArgumentList	node -> target		704561	1					
ANR	704814	Argument	node -> target		704561	0					
ANR	704815	PtrMemberAccess	node -> target		704561	0					
ANR	704816	Identifier	node		704561	0					
ANR	704817	Identifier	target		704561	1					
ANR	704818	Argument	reg		704561	1					
ANR	704819	Identifier	reg		704561	0					
ANR	704820	IfStatement	if ( r )		704561	43					
ANR	704821	Condition	r	1438:8:35163:35163	704561	0	True				
ANR	704822	Identifier	r		704561	0					
ANR	704823	ReturnStatement	return r ;	1438:11:35166:35174	704561	1	True				
ANR	704824	Identifier	r		704561	0					
ANR	704825	ExpressionStatement	"r = add_opcode ( reg , OP_FAIL_POS )"	1439:4:35180:35212	704561	44	True				
ANR	704826	AssignmentExpression	"r = add_opcode ( reg , OP_FAIL_POS )"		704561	0		=			
ANR	704827	Identifier	r		704561	0					
ANR	704828	CallExpression	"add_opcode ( reg , OP_FAIL_POS )"		704561	1					
ANR	704829	Callee	add_opcode		704561	0					
ANR	704830	Identifier	add_opcode		704561	0					
ANR	704831	ArgumentList	reg		704561	1					
ANR	704832	Argument	reg		704561	0					
ANR	704833	Identifier	reg		704561	0					
ANR	704834	Argument	OP_FAIL_POS		704561	1					
ANR	704835	Identifier	OP_FAIL_POS		704561	0					
ANR	704836	BreakStatement	break ;	1440:4:35218:35223	704561	45	True				
ANR	704837	Label	case ANCHOR_LOOK_BEHIND :	1442:2:35228:35251	704561	46	True				
ANR	704838	Identifier	ANCHOR_LOOK_BEHIND		704561	0					
ANR	704839	CompoundStatement		39:6:1395:1400	704561	47					
ANR	704840	IdentifierDeclStatement	int n ;	1444:6:35265:35270	704561	0	True				
ANR	704841	IdentifierDecl	n		704561	0					
ANR	704842	IdentifierDeclType	int		704561	0					
ANR	704843	Identifier	n		704561	1					
ANR	704844	ExpressionStatement	"r = add_opcode ( reg , OP_LOOK_BEHIND )"	1445:6:35278:35313	704561	1	True				
ANR	704845	AssignmentExpression	"r = add_opcode ( reg , OP_LOOK_BEHIND )"		704561	0		=			
ANR	704846	Identifier	r		704561	0					
ANR	704847	CallExpression	"add_opcode ( reg , OP_LOOK_BEHIND )"		704561	1					
ANR	704848	Callee	add_opcode		704561	0					
ANR	704849	Identifier	add_opcode		704561	0					
ANR	704850	ArgumentList	reg		704561	1					
ANR	704851	Argument	reg		704561	0					
ANR	704852	Identifier	reg		704561	0					
ANR	704853	Argument	OP_LOOK_BEHIND		704561	1					
ANR	704854	Identifier	OP_LOOK_BEHIND		704561	0					
ANR	704855	IfStatement	if ( r )		704561	2					
ANR	704856	Condition	r	1446:10:35325:35325	704561	0	True				
ANR	704857	Identifier	r		704561	0					
ANR	704858	ReturnStatement	return r ;	1446:13:35328:35336	704561	1	True				
ANR	704859	Identifier	r		704561	0					
ANR	704860	IfStatement	if ( node -> char_len < 0 )		704561	3					
ANR	704861	Condition	node -> char_len < 0	1447:10:35348:35365	704561	0	True				
ANR	704862	RelationalExpression	node -> char_len < 0		704561	0		<			
ANR	704863	PtrMemberAccess	node -> char_len		704561	0					
ANR	704864	Identifier	node		704561	0					
ANR	704865	Identifier	char_len		704561	1					
ANR	704866	PrimaryExpression	0		704561	1					
ANR	704867	CompoundStatement		42:30:1498:1498	704561	1					
ANR	704868	ExpressionStatement	"r = get_char_length_tree ( node -> target , reg , & n )"	1448:1:35371:35418	704561	0	True				
ANR	704869	AssignmentExpression	"r = get_char_length_tree ( node -> target , reg , & n )"		704561	0		=			
ANR	704870	Identifier	r		704561	0					
ANR	704871	CallExpression	"get_char_length_tree ( node -> target , reg , & n )"		704561	1					
ANR	704872	Callee	get_char_length_tree		704561	0					
ANR	704873	Identifier	get_char_length_tree		704561	0					
ANR	704874	ArgumentList	node -> target		704561	1					
ANR	704875	Argument	node -> target		704561	0					
ANR	704876	PtrMemberAccess	node -> target		704561	0					
ANR	704877	Identifier	node		704561	0					
ANR	704878	Identifier	target		704561	1					
ANR	704879	Argument	reg		704561	1					
ANR	704880	Identifier	reg		704561	0					
ANR	704881	Argument	& n		704561	2					
ANR	704882	UnaryOperationExpression	& n		704561	0					
ANR	704883	UnaryOperator	&		704561	0					
ANR	704884	Identifier	n		704561	1					
ANR	704885	IfStatement	if ( r )		704561	1					
ANR	704886	Condition	r	1449:5:35425:35425	704561	0	True				
ANR	704887	Identifier	r		704561	0					
ANR	704888	ReturnStatement	return ONIGERR_INVALID_LOOK_BEHIND_PATTERN ;	1449:8:35428:35470	704561	1	True				
ANR	704889	Identifier	ONIGERR_INVALID_LOOK_BEHIND_PATTERN		704561	0					
ANR	704890	ElseStatement	else		704561	0					
ANR	704891	ExpressionStatement	n = node -> char_len	1452:1:35492:35510	704561	0	True				
ANR	704892	AssignmentExpression	n = node -> char_len		704561	0		=			
ANR	704893	Identifier	n		704561	0					
ANR	704894	PtrMemberAccess	node -> char_len		704561	1					
ANR	704895	Identifier	node		704561	0					
ANR	704896	Identifier	char_len		704561	1					
ANR	704897	ExpressionStatement	"r = add_length ( reg , n )"	1453:6:35518:35540	704561	4	True				
ANR	704898	AssignmentExpression	"r = add_length ( reg , n )"		704561	0		=			
ANR	704899	Identifier	r		704561	0					
ANR	704900	CallExpression	"add_length ( reg , n )"		704561	1					
ANR	704901	Callee	add_length		704561	0					
ANR	704902	Identifier	add_length		704561	0					
ANR	704903	ArgumentList	reg		704561	1					
ANR	704904	Argument	reg		704561	0					
ANR	704905	Identifier	reg		704561	0					
ANR	704906	Argument	n		704561	1					
ANR	704907	Identifier	n		704561	0					
ANR	704908	IfStatement	if ( r )		704561	5					
ANR	704909	Condition	r	1454:10:35552:35552	704561	0	True				
ANR	704910	Identifier	r		704561	0					
ANR	704911	ReturnStatement	return r ;	1454:13:35555:35563	704561	1	True				
ANR	704912	Identifier	r		704561	0					
ANR	704913	ExpressionStatement	"r = compile_tree ( node -> target , reg )"	1455:6:35571:35606	704561	6	True				
ANR	704914	AssignmentExpression	"r = compile_tree ( node -> target , reg )"		704561	0		=			
ANR	704915	Identifier	r		704561	0					
ANR	704916	CallExpression	"compile_tree ( node -> target , reg )"		704561	1					
ANR	704917	Callee	compile_tree		704561	0					
ANR	704918	Identifier	compile_tree		704561	0					
ANR	704919	ArgumentList	node -> target		704561	1					
ANR	704920	Argument	node -> target		704561	0					
ANR	704921	PtrMemberAccess	node -> target		704561	0					
ANR	704922	Identifier	node		704561	0					
ANR	704923	Identifier	target		704561	1					
ANR	704924	Argument	reg		704561	1					
ANR	704925	Identifier	reg		704561	0					
ANR	704926	BreakStatement	break ;	1457:4:35618:35623	704561	48	True				
ANR	704927	Label	case ANCHOR_LOOK_BEHIND_NOT :	1459:2:35628:35655	704561	49	True				
ANR	704928	Identifier	ANCHOR_LOOK_BEHIND_NOT		704561	0					
ANR	704929	CompoundStatement		56:6:1799:1804	704561	50					
ANR	704930	IdentifierDeclStatement	int n ;	1461:6:35669:35674	704561	0	True				
ANR	704931	IdentifierDecl	n		704561	0					
ANR	704932	IdentifierDeclType	int		704561	0					
ANR	704933	Identifier	n		704561	1					
ANR	704934	ExpressionStatement	"len = compile_length_tree ( node -> target , reg )"	1462:6:35682:35726	704561	1	True				
ANR	704935	AssignmentExpression	"len = compile_length_tree ( node -> target , reg )"		704561	0		=			
ANR	704936	Identifier	len		704561	0					
ANR	704937	CallExpression	"compile_length_tree ( node -> target , reg )"		704561	1					
ANR	704938	Callee	compile_length_tree		704561	0					
ANR	704939	Identifier	compile_length_tree		704561	0					
ANR	704940	ArgumentList	node -> target		704561	1					
ANR	704941	Argument	node -> target		704561	0					
ANR	704942	PtrMemberAccess	node -> target		704561	0					
ANR	704943	Identifier	node		704561	0					
ANR	704944	Identifier	target		704561	1					
ANR	704945	Argument	reg		704561	1					
ANR	704946	Identifier	reg		704561	0					
ANR	704947	ExpressionStatement	"r = add_opcode_rel_addr ( reg , OP_PUSH_LOOK_BEHIND_NOT , len + SIZE_OP_FAIL_LOOK_BEHIND_NOT )"	1463:6:35734:35829	704561	2	True				
ANR	704948	AssignmentExpression	"r = add_opcode_rel_addr ( reg , OP_PUSH_LOOK_BEHIND_NOT , len + SIZE_OP_FAIL_LOOK_BEHIND_NOT )"		704561	0		=			
ANR	704949	Identifier	r		704561	0					
ANR	704950	CallExpression	"add_opcode_rel_addr ( reg , OP_PUSH_LOOK_BEHIND_NOT , len + SIZE_OP_FAIL_LOOK_BEHIND_NOT )"		704561	1					
ANR	704951	Callee	add_opcode_rel_addr		704561	0					
ANR	704952	Identifier	add_opcode_rel_addr		704561	0					
ANR	704953	ArgumentList	reg		704561	1					
ANR	704954	Argument	reg		704561	0					
ANR	704955	Identifier	reg		704561	0					
ANR	704956	Argument	OP_PUSH_LOOK_BEHIND_NOT		704561	1					
ANR	704957	Identifier	OP_PUSH_LOOK_BEHIND_NOT		704561	0					
ANR	704958	Argument	len + SIZE_OP_FAIL_LOOK_BEHIND_NOT		704561	2					
ANR	704959	AdditiveExpression	len + SIZE_OP_FAIL_LOOK_BEHIND_NOT		704561	0		+			
ANR	704960	Identifier	len		704561	0					
ANR	704961	Identifier	SIZE_OP_FAIL_LOOK_BEHIND_NOT		704561	1					
ANR	704962	IfStatement	if ( r )		704561	3					
ANR	704963	Condition	r	1465:10:35841:35841	704561	0	True				
ANR	704964	Identifier	r		704561	0					
ANR	704965	ReturnStatement	return r ;	1465:13:35844:35852	704561	1	True				
ANR	704966	Identifier	r		704561	0					
ANR	704967	IfStatement	if ( node -> char_len < 0 )		704561	4					
ANR	704968	Condition	node -> char_len < 0	1466:10:35864:35881	704561	0	True				
ANR	704969	RelationalExpression	node -> char_len < 0		704561	0		<			
ANR	704970	PtrMemberAccess	node -> char_len		704561	0					
ANR	704971	Identifier	node		704561	0					
ANR	704972	Identifier	char_len		704561	1					
ANR	704973	PrimaryExpression	0		704561	1					
ANR	704974	CompoundStatement		61:30:2014:2014	704561	1					
ANR	704975	ExpressionStatement	"r = get_char_length_tree ( node -> target , reg , & n )"	1467:1:35887:35934	704561	0	True				
ANR	704976	AssignmentExpression	"r = get_char_length_tree ( node -> target , reg , & n )"		704561	0		=			
ANR	704977	Identifier	r		704561	0					
ANR	704978	CallExpression	"get_char_length_tree ( node -> target , reg , & n )"		704561	1					
ANR	704979	Callee	get_char_length_tree		704561	0					
ANR	704980	Identifier	get_char_length_tree		704561	0					
ANR	704981	ArgumentList	node -> target		704561	1					
ANR	704982	Argument	node -> target		704561	0					
ANR	704983	PtrMemberAccess	node -> target		704561	0					
ANR	704984	Identifier	node		704561	0					
ANR	704985	Identifier	target		704561	1					
ANR	704986	Argument	reg		704561	1					
ANR	704987	Identifier	reg		704561	0					
ANR	704988	Argument	& n		704561	2					
ANR	704989	UnaryOperationExpression	& n		704561	0					
ANR	704990	UnaryOperator	&		704561	0					
ANR	704991	Identifier	n		704561	1					
ANR	704992	IfStatement	if ( r )		704561	1					
ANR	704993	Condition	r	1468:5:35941:35941	704561	0	True				
ANR	704994	Identifier	r		704561	0					
ANR	704995	ReturnStatement	return ONIGERR_INVALID_LOOK_BEHIND_PATTERN ;	1468:8:35944:35986	704561	1	True				
ANR	704996	Identifier	ONIGERR_INVALID_LOOK_BEHIND_PATTERN		704561	0					
ANR	704997	ElseStatement	else		704561	0					
ANR	704998	ExpressionStatement	n = node -> char_len	1471:1:36008:36026	704561	0	True				
ANR	704999	AssignmentExpression	n = node -> char_len		704561	0		=			
ANR	705000	Identifier	n		704561	0					
ANR	705001	PtrMemberAccess	node -> char_len		704561	1					
ANR	705002	Identifier	node		704561	0					
ANR	705003	Identifier	char_len		704561	1					
ANR	705004	ExpressionStatement	"r = add_length ( reg , n )"	1472:6:36034:36056	704561	5	True				
ANR	705005	AssignmentExpression	"r = add_length ( reg , n )"		704561	0		=			
ANR	705006	Identifier	r		704561	0					
ANR	705007	CallExpression	"add_length ( reg , n )"		704561	1					
ANR	705008	Callee	add_length		704561	0					
ANR	705009	Identifier	add_length		704561	0					
ANR	705010	ArgumentList	reg		704561	1					
ANR	705011	Argument	reg		704561	0					
ANR	705012	Identifier	reg		704561	0					
ANR	705013	Argument	n		704561	1					
ANR	705014	Identifier	n		704561	0					
ANR	705015	IfStatement	if ( r )		704561	6					
ANR	705016	Condition	r	1473:10:36068:36068	704561	0	True				
ANR	705017	Identifier	r		704561	0					
ANR	705018	ReturnStatement	return r ;	1473:13:36071:36079	704561	1	True				
ANR	705019	Identifier	r		704561	0					
ANR	705020	ExpressionStatement	"r = compile_tree ( node -> target , reg )"	1474:6:36087:36122	704561	7	True				
ANR	705021	AssignmentExpression	"r = compile_tree ( node -> target , reg )"		704561	0		=			
ANR	705022	Identifier	r		704561	0					
ANR	705023	CallExpression	"compile_tree ( node -> target , reg )"		704561	1					
ANR	705024	Callee	compile_tree		704561	0					
ANR	705025	Identifier	compile_tree		704561	0					
ANR	705026	ArgumentList	node -> target		704561	1					
ANR	705027	Argument	node -> target		704561	0					
ANR	705028	PtrMemberAccess	node -> target		704561	0					
ANR	705029	Identifier	node		704561	0					
ANR	705030	Identifier	target		704561	1					
ANR	705031	Argument	reg		704561	1					
ANR	705032	Identifier	reg		704561	0					
ANR	705033	IfStatement	if ( r )		704561	8					
ANR	705034	Condition	r	1475:10:36134:36134	704561	0	True				
ANR	705035	Identifier	r		704561	0					
ANR	705036	ReturnStatement	return r ;	1475:13:36137:36145	704561	1	True				
ANR	705037	Identifier	r		704561	0					
ANR	705038	ExpressionStatement	"r = add_opcode ( reg , OP_FAIL_LOOK_BEHIND_NOT )"	1476:6:36153:36197	704561	9	True				
ANR	705039	AssignmentExpression	"r = add_opcode ( reg , OP_FAIL_LOOK_BEHIND_NOT )"		704561	0		=			
ANR	705040	Identifier	r		704561	0					
ANR	705041	CallExpression	"add_opcode ( reg , OP_FAIL_LOOK_BEHIND_NOT )"		704561	1					
ANR	705042	Callee	add_opcode		704561	0					
ANR	705043	Identifier	add_opcode		704561	0					
ANR	705044	ArgumentList	reg		704561	1					
ANR	705045	Argument	reg		704561	0					
ANR	705046	Identifier	reg		704561	0					
ANR	705047	Argument	OP_FAIL_LOOK_BEHIND_NOT		704561	1					
ANR	705048	Identifier	OP_FAIL_LOOK_BEHIND_NOT		704561	0					
ANR	705049	BreakStatement	break ;	1478:4:36209:36214	704561	51	True				
ANR	705050	Label	default :	1480:2:36219:36226	704561	52	True				
ANR	705051	Identifier	default		704561	0					
ANR	705052	ReturnStatement	return ONIGERR_TYPE_BUG ;	1481:4:36232:36255	704561	53	True				
ANR	705053	Identifier	ONIGERR_TYPE_BUG		704561	0					
ANR	705054	BreakStatement	break ;	1482:4:36261:36266	704561	54	True				
ANR	705055	ReturnStatement	return r ;	1485:2:36275:36283	704561	2	True				
ANR	705056	Identifier	r		704561	0					
ANR	705057	ReturnType	static int		704561	1					
ANR	705058	Identifier	compile_anchor_node		704561	2					
ANR	705059	ParameterList	"AnchorNode * node , regex_t * reg"		704561	3					
ANR	705060	Parameter	AnchorNode * node	1405:20:33837:33852	704561	0	True				
ANR	705061	ParameterType	AnchorNode *		704561	0					
ANR	705062	Identifier	node		704561	1					
ANR	705063	Parameter	regex_t * reg	1405:38:33855:33866	704561	1	True				
ANR	705064	ParameterType	regex_t *		704561	0					
ANR	705065	Identifier	reg		704561	1					
ANR	705066	CFGEntryNode	ENTRY		704561		True				
ANR	705067	CFGExitNode	EXIT		704561		True				
ANR	705068	Symbol	OP_SEMI_END_BUF		704561						
ANR	705069	Symbol	SIZE_OP_FAIL_POS		704561						
ANR	705070	Symbol	OP_PUSH_LOOK_BEHIND_NOT		704561						
ANR	705071	Symbol	OP_NOT_WORD_BOUND		704561						
ANR	705072	Symbol	ONIGERR_INVALID_LOOK_BEHIND_PATTERN		704561						
ANR	705073	Symbol	add_length		704561						
ANR	705074	Symbol	OP_BEGIN_LINE		704561						
ANR	705075	Symbol	OP_LOOK_BEHIND		704561						
ANR	705076	Symbol	OP_FAIL_POS		704561						
ANR	705077	Symbol	len		704561						
ANR	705078	Symbol	OP_PUSH_POS_NOT		704561						
ANR	705079	Symbol	reg		704561						
ANR	705080	Symbol	OP_WORD_BOUND		704561						
ANR	705081	Symbol	* node		704561						
ANR	705082	Symbol	add_opcode		704561						
ANR	705083	Symbol	OP_BEGIN_POSITION		704561						
ANR	705084	Symbol	OP_FAIL_LOOK_BEHIND_NOT		704561						
ANR	705085	Symbol	OP_END_BUF		704561						
ANR	705086	Symbol	add_opcode_rel_addr		704561						
ANR	705087	Symbol	compile_length_tree		704561						
ANR	705088	Symbol	node -> char_len		704561						
ANR	705089	Symbol	ONIGERR_TYPE_BUG		704561						
ANR	705090	Symbol	OP_PUSH_POS		704561						
ANR	705091	Symbol	n		704561						
ANR	705092	Symbol	node		704561						
ANR	705093	Symbol	get_char_length_tree		704561						
ANR	705094	Symbol	r		704561						
ANR	705095	Symbol	OP_WORD_END		704561						
ANR	705096	Symbol	compile_tree		704561						
ANR	705097	Symbol	& n		704561						
ANR	705098	Symbol	SIZE_OP_FAIL_LOOK_BEHIND_NOT		704561						
ANR	705099	Symbol	node -> type		704561						
ANR	705100	Symbol	OP_WORD_BEGIN		704561						
ANR	705101	Symbol	OP_POP_POS		704561						
ANR	705102	Symbol	OP_BEGIN_BUF		704561						
ANR	705103	Symbol	OP_END_LINE		704561						
ANR	705104	Symbol	node -> target		704561						
ANR	705105	Function	compile_length_tree	1488:0:36288:38093							
ANR	705106	FunctionDef	"compile_length_tree (Node * node , regex_t * reg)"		705105	0					
ANR	705107	CompoundStatement		1490:0:36345:38093	705105	0					
ANR	705108	IdentifierDeclStatement	"int len , type , r ;"	1491:2:36349:36365	705105	0	True				
ANR	705109	IdentifierDecl	len		705105	0					
ANR	705110	IdentifierDeclType	int		705105	0					
ANR	705111	Identifier	len		705105	1					
ANR	705112	IdentifierDecl	type		705105	1					
ANR	705113	IdentifierDeclType	int		705105	0					
ANR	705114	Identifier	type		705105	1					
ANR	705115	IdentifierDecl	r		705105	2					
ANR	705116	IdentifierDeclType	int		705105	0					
ANR	705117	Identifier	r		705105	1					
ANR	705118	ExpressionStatement	type = NTYPE ( node )	1493:2:36370:36388	705105	1	True				
ANR	705119	AssignmentExpression	type = NTYPE ( node )		705105	0		=			
ANR	705120	Identifier	type		705105	0					
ANR	705121	CallExpression	NTYPE ( node )		705105	1					
ANR	705122	Callee	NTYPE		705105	0					
ANR	705123	Identifier	NTYPE		705105	0					
ANR	705124	ArgumentList	node		705105	1					
ANR	705125	Argument	node		705105	0					
ANR	705126	Identifier	node		705105	0					
ANR	705127	SwitchStatement	switch ( type )		705105	2					
ANR	705128	Condition	type	1494:10:36400:36403	705105	0	True				
ANR	705129	Identifier	type		705105	0					
ANR	705130	CompoundStatement		5:16:60:60	705105	1					
ANR	705131	Label	case NT_LIST :	1495:2:36410:36422	705105	0	True				
ANR	705132	Identifier	NT_LIST		705105	0					
ANR	705133	ExpressionStatement	len = 0	1496:4:36428:36435	705105	1	True				
ANR	705134	AssignmentExpression	len = 0		705105	0		=			
ANR	705135	Identifier	len		705105	0					
ANR	705136	PrimaryExpression	0		705105	1					
ANR	705137	DoStatement	do		705105	2					
ANR	705138	CompoundStatement		8:7:98:98	705105	0					
ANR	705139	ExpressionStatement	"r = compile_length_tree ( NCAR ( node ) , reg )"	1498:6:36452:36492	705105	0	True				
ANR	705140	AssignmentExpression	"r = compile_length_tree ( NCAR ( node ) , reg )"		705105	0		=			
ANR	705141	Identifier	r		705105	0					
ANR	705142	CallExpression	"compile_length_tree ( NCAR ( node ) , reg )"		705105	1					
ANR	705143	Callee	compile_length_tree		705105	0					
ANR	705144	Identifier	compile_length_tree		705105	0					
ANR	705145	ArgumentList	NCAR ( node )		705105	1					
ANR	705146	Argument	NCAR ( node )		705105	0					
ANR	705147	CallExpression	NCAR ( node )		705105	0					
ANR	705148	Callee	NCAR		705105	0					
ANR	705149	Identifier	NCAR		705105	0					
ANR	705150	ArgumentList	node		705105	1					
ANR	705151	Argument	node		705105	0					
ANR	705152	Identifier	node		705105	0					
ANR	705153	Argument	reg		705105	1					
ANR	705154	Identifier	reg		705105	0					
ANR	705155	IfStatement	if ( r < 0 )		705105	1					
ANR	705156	Condition	r < 0	1499:10:36504:36508	705105	0	True				
ANR	705157	RelationalExpression	r < 0		705105	0		<			
ANR	705158	Identifier	r		705105	0					
ANR	705159	PrimaryExpression	0		705105	1					
ANR	705160	ReturnStatement	return r ;	1499:17:36511:36519	705105	1	True				
ANR	705161	Identifier	r		705105	0					
ANR	705162	ExpressionStatement	len += r	1500:6:36527:36535	705105	2	True				
ANR	705163	AssignmentExpression	len += r		705105	0		+=			
ANR	705164	Identifier	len		705105	0					
ANR	705165	Identifier	r		705105	1					
ANR	705166	Condition	IS_NOT_NULL ( node = NCDR ( node ) )	1501:13:36550:36579	705105	1	True				
ANR	705167	CallExpression	IS_NOT_NULL ( node = NCDR ( node ) )		705105	0					
ANR	705168	Callee	IS_NOT_NULL		705105	0					
ANR	705169	Identifier	IS_NOT_NULL		705105	0					
ANR	705170	ArgumentList	node = NCDR ( node )		705105	1					
ANR	705171	Argument	node = NCDR ( node )		705105	0					
ANR	705172	AssignmentExpression	node = NCDR ( node )		705105	0		=			
ANR	705173	Identifier	node		705105	0					
ANR	705174	CallExpression	NCDR ( node )		705105	1					
ANR	705175	Callee	NCDR		705105	0					
ANR	705176	Identifier	NCDR		705105	0					
ANR	705177	ArgumentList	node		705105	1					
ANR	705178	Argument	node		705105	0					
ANR	705179	Identifier	node		705105	0					
ANR	705180	ExpressionStatement	r = len	1502:4:36587:36594	705105	3	True				
ANR	705181	AssignmentExpression	r = len		705105	0		=			
ANR	705182	Identifier	r		705105	0					
ANR	705183	Identifier	len		705105	1					
ANR	705184	BreakStatement	break ;	1503:4:36600:36605	705105	4	True				
ANR	705185	Label	case NT_ALT :	1505:2:36610:36621	705105	5	True				
ANR	705186	Identifier	NT_ALT		705105	0					
ANR	705187	CompoundStatement		18:6:289:294	705105	6					
ANR	705188	IdentifierDeclStatement	int n ;	1507:6:36635:36640	705105	0	True				
ANR	705189	IdentifierDecl	n		705105	0					
ANR	705190	IdentifierDeclType	int		705105	0					
ANR	705191	Identifier	n		705105	1					
ANR	705192	ExpressionStatement	n = r = 0	1509:6:36649:36658	705105	1	True				
ANR	705193	AssignmentExpression	n = r = 0		705105	0		=			
ANR	705194	Identifier	n		705105	0					
ANR	705195	AssignmentExpression	r = 0		705105	1		=			
ANR	705196	Identifier	r		705105	0					
ANR	705197	PrimaryExpression	0		705105	1					
ANR	705198	DoStatement	do		705105	2					
ANR	705199	CompoundStatement		21:9:323:323	705105	0					
ANR	705200	ExpressionStatement	"r += compile_length_tree ( NCAR ( node ) , reg )"	1511:1:36672:36713	705105	0	True				
ANR	705201	AssignmentExpression	"r += compile_length_tree ( NCAR ( node ) , reg )"		705105	0		+=			
ANR	705202	Identifier	r		705105	0					
ANR	705203	CallExpression	"compile_length_tree ( NCAR ( node ) , reg )"		705105	1					
ANR	705204	Callee	compile_length_tree		705105	0					
ANR	705205	Identifier	compile_length_tree		705105	0					
ANR	705206	ArgumentList	NCAR ( node )		705105	1					
ANR	705207	Argument	NCAR ( node )		705105	0					
ANR	705208	CallExpression	NCAR ( node )		705105	0					
ANR	705209	Callee	NCAR		705105	0					
ANR	705210	Identifier	NCAR		705105	0					
ANR	705211	ArgumentList	node		705105	1					
ANR	705212	Argument	node		705105	0					
ANR	705213	Identifier	node		705105	0					
ANR	705214	Argument	reg		705105	1					
ANR	705215	Identifier	reg		705105	0					
ANR	705216	ExpressionStatement	n ++	1512:1:36716:36719	705105	1	True				
ANR	705217	PostIncDecOperationExpression	n ++		705105	0					
ANR	705218	Identifier	n		705105	0					
ANR	705219	IncDec	++		705105	1					
ANR	705220	Condition	IS_NOT_NULL ( node = NCDR ( node ) )	1513:15:36736:36765	705105	1	True				
ANR	705221	CallExpression	IS_NOT_NULL ( node = NCDR ( node ) )		705105	0					
ANR	705222	Callee	IS_NOT_NULL		705105	0					
ANR	705223	Identifier	IS_NOT_NULL		705105	0					
ANR	705224	ArgumentList	node = NCDR ( node )		705105	1					
ANR	705225	Argument	node = NCDR ( node )		705105	0					
ANR	705226	AssignmentExpression	node = NCDR ( node )		705105	0		=			
ANR	705227	Identifier	node		705105	0					
ANR	705228	CallExpression	NCDR ( node )		705105	1					
ANR	705229	Callee	NCDR		705105	0					
ANR	705230	Identifier	NCDR		705105	0					
ANR	705231	ArgumentList	node		705105	1					
ANR	705232	Argument	node		705105	0					
ANR	705233	Identifier	node		705105	0					
ANR	705234	ExpressionStatement	r += ( SIZE_OP_PUSH + SIZE_OP_JUMP ) * ( n - 1 )	1514:6:36775:36819	705105	3	True				
ANR	705235	AssignmentExpression	r += ( SIZE_OP_PUSH + SIZE_OP_JUMP ) * ( n - 1 )		705105	0		+=			
ANR	705236	Identifier	r		705105	0					
ANR	705237	MultiplicativeExpression	( SIZE_OP_PUSH + SIZE_OP_JUMP ) * ( n - 1 )		705105	1		*			
ANR	705238	AdditiveExpression	SIZE_OP_PUSH + SIZE_OP_JUMP		705105	0		+			
ANR	705239	Identifier	SIZE_OP_PUSH		705105	0					
ANR	705240	Identifier	SIZE_OP_JUMP		705105	1					
ANR	705241	AdditiveExpression	n - 1		705105	1		-			
ANR	705242	Identifier	n		705105	0					
ANR	705243	PrimaryExpression	1		705105	1					
ANR	705244	BreakStatement	break ;	1516:4:36831:36836	705105	7	True				
ANR	705245	Label	case NT_STR :	1518:2:36841:36852	705105	8	True				
ANR	705246	Identifier	NT_STR		705105	0					
ANR	705247	IfStatement	if ( NSTRING_IS_RAW ( node ) )		705105	9					
ANR	705248	Condition	NSTRING_IS_RAW ( node )	1519:8:36862:36881	705105	0	True				
ANR	705249	CallExpression	NSTRING_IS_RAW ( node )		705105	0					
ANR	705250	Callee	NSTRING_IS_RAW		705105	0					
ANR	705251	Identifier	NSTRING_IS_RAW		705105	0					
ANR	705252	ArgumentList	node		705105	1					
ANR	705253	Argument	node		705105	0					
ANR	705254	Identifier	node		705105	0					
ANR	705255	ExpressionStatement	"r = compile_length_string_raw_node ( NSTR ( node ) , reg )"	1520:6:36890:36941	705105	1	True				
ANR	705256	AssignmentExpression	"r = compile_length_string_raw_node ( NSTR ( node ) , reg )"		705105	0		=			
ANR	705257	Identifier	r		705105	0					
ANR	705258	CallExpression	"compile_length_string_raw_node ( NSTR ( node ) , reg )"		705105	1					
ANR	705259	Callee	compile_length_string_raw_node		705105	0					
ANR	705260	Identifier	compile_length_string_raw_node		705105	0					
ANR	705261	ArgumentList	NSTR ( node )		705105	1					
ANR	705262	Argument	NSTR ( node )		705105	0					
ANR	705263	CallExpression	NSTR ( node )		705105	0					
ANR	705264	Callee	NSTR		705105	0					
ANR	705265	Identifier	NSTR		705105	0					
ANR	705266	ArgumentList	node		705105	1					
ANR	705267	Argument	node		705105	0					
ANR	705268	Identifier	node		705105	0					
ANR	705269	Argument	reg		705105	1					
ANR	705270	Identifier	reg		705105	0					
ANR	705271	ElseStatement	else		705105	0					
ANR	705272	ExpressionStatement	"r = compile_length_string_node ( node , reg )"	1522:6:36958:36999	705105	0	True				
ANR	705273	AssignmentExpression	"r = compile_length_string_node ( node , reg )"		705105	0		=			
ANR	705274	Identifier	r		705105	0					
ANR	705275	CallExpression	"compile_length_string_node ( node , reg )"		705105	1					
ANR	705276	Callee	compile_length_string_node		705105	0					
ANR	705277	Identifier	compile_length_string_node		705105	0					
ANR	705278	ArgumentList	node		705105	1					
ANR	705279	Argument	node		705105	0					
ANR	705280	Identifier	node		705105	0					
ANR	705281	Argument	reg		705105	1					
ANR	705282	Identifier	reg		705105	0					
ANR	705283	BreakStatement	break ;	1523:4:37005:37010	705105	10	True				
ANR	705284	Label	case NT_CCLASS :	1525:2:37015:37029	705105	11	True				
ANR	705285	Identifier	NT_CCLASS		705105	0					
ANR	705286	ExpressionStatement	"r = compile_length_cclass_node ( NCCLASS ( node ) , reg )"	1526:4:37035:37085	705105	12	True				
ANR	705287	AssignmentExpression	"r = compile_length_cclass_node ( NCCLASS ( node ) , reg )"		705105	0		=			
ANR	705288	Identifier	r		705105	0					
ANR	705289	CallExpression	"compile_length_cclass_node ( NCCLASS ( node ) , reg )"		705105	1					
ANR	705290	Callee	compile_length_cclass_node		705105	0					
ANR	705291	Identifier	compile_length_cclass_node		705105	0					
ANR	705292	ArgumentList	NCCLASS ( node )		705105	1					
ANR	705293	Argument	NCCLASS ( node )		705105	0					
ANR	705294	CallExpression	NCCLASS ( node )		705105	0					
ANR	705295	Callee	NCCLASS		705105	0					
ANR	705296	Identifier	NCCLASS		705105	0					
ANR	705297	ArgumentList	node		705105	1					
ANR	705298	Argument	node		705105	0					
ANR	705299	Identifier	node		705105	0					
ANR	705300	Argument	reg		705105	1					
ANR	705301	Identifier	reg		705105	0					
ANR	705302	BreakStatement	break ;	1527:4:37091:37096	705105	13	True				
ANR	705303	Label	case NT_CTYPE :	1529:2:37101:37114	705105	14	True				
ANR	705304	Identifier	NT_CTYPE		705105	0					
ANR	705305	Label	case NT_CANY :	1530:2:37118:37130	705105	15	True				
ANR	705306	Identifier	NT_CANY		705105	0					
ANR	705307	ExpressionStatement	r = SIZE_OPCODE	1531:4:37136:37151	705105	16	True				
ANR	705308	AssignmentExpression	r = SIZE_OPCODE		705105	0		=			
ANR	705309	Identifier	r		705105	0					
ANR	705310	Identifier	SIZE_OPCODE		705105	1					
ANR	705311	BreakStatement	break ;	1532:4:37157:37162	705105	17	True				
ANR	705312	Label	case NT_BREF :	1534:2:37167:37179	705105	18	True				
ANR	705313	Identifier	NT_BREF		705105	0					
ANR	705314	CompoundStatement		47:6:847:873	705105	19					
ANR	705315	IdentifierDeclStatement	BRefNode * br = NBREF ( node ) ;	1536:6:37193:37219	705105	0	True				
ANR	705316	IdentifierDecl	* br = NBREF ( node )		705105	0					
ANR	705317	IdentifierDeclType	BRefNode *		705105	0					
ANR	705318	Identifier	br		705105	1					
ANR	705319	AssignmentExpression	* br = NBREF ( node )		705105	2		=			
ANR	705320	Identifier	br		705105	0					
ANR	705321	CallExpression	NBREF ( node )		705105	1					
ANR	705322	Callee	NBREF		705105	0					
ANR	705323	Identifier	NBREF		705105	0					
ANR	705324	ArgumentList	node		705105	1					
ANR	705325	Argument	node		705105	0					
ANR	705326	Identifier	node		705105	0					
ANR	705327	IfStatement	if ( IS_BACKREF_NEST_LEVEL ( br ) )		705105	1					
ANR	705328	Condition	IS_BACKREF_NEST_LEVEL ( br )	1539:10:37262:37286	705105	0	True				
ANR	705329	CallExpression	IS_BACKREF_NEST_LEVEL ( br )		705105	0					
ANR	705330	Callee	IS_BACKREF_NEST_LEVEL		705105	0					
ANR	705331	Identifier	IS_BACKREF_NEST_LEVEL		705105	0					
ANR	705332	ArgumentList	br		705105	1					
ANR	705333	Argument	br		705105	0					
ANR	705334	Identifier	br		705105	0					
ANR	705335	CompoundStatement		50:37:943:943	705105	1					
ANR	705336	ExpressionStatement	r = SIZE_OPCODE + SIZE_OPTION + SIZE_LENGTH + SIZE_LENGTH + ( SIZE_MEMNUM * br -> back_num )	1540:8:37299:37399	705105	0	True				
ANR	705337	AssignmentExpression	r = SIZE_OPCODE + SIZE_OPTION + SIZE_LENGTH + SIZE_LENGTH + ( SIZE_MEMNUM * br -> back_num )		705105	0		=			
ANR	705338	Identifier	r		705105	0					
ANR	705339	AdditiveExpression	SIZE_OPCODE + SIZE_OPTION + SIZE_LENGTH + SIZE_LENGTH + ( SIZE_MEMNUM * br -> back_num )		705105	1		+			
ANR	705340	Identifier	SIZE_OPCODE		705105	0					
ANR	705341	AdditiveExpression	SIZE_OPTION + SIZE_LENGTH + SIZE_LENGTH + ( SIZE_MEMNUM * br -> back_num )		705105	1		+			
ANR	705342	Identifier	SIZE_OPTION		705105	0					
ANR	705343	AdditiveExpression	SIZE_LENGTH + SIZE_LENGTH + ( SIZE_MEMNUM * br -> back_num )		705105	1		+			
ANR	705344	Identifier	SIZE_LENGTH		705105	0					
ANR	705345	AdditiveExpression	SIZE_LENGTH + ( SIZE_MEMNUM * br -> back_num )		705105	1		+			
ANR	705346	Identifier	SIZE_LENGTH		705105	0					
ANR	705347	MultiplicativeExpression	SIZE_MEMNUM * br -> back_num		705105	1		*			
ANR	705348	Identifier	SIZE_MEMNUM		705105	0					
ANR	705349	PtrMemberAccess	br -> back_num		705105	1					
ANR	705350	Identifier	br		705105	0					
ANR	705351	Identifier	back_num		705105	1					
ANR	705352	ElseStatement	else		705105	0					
ANR	705353	IfStatement	if ( br -> back_num == 1 )		705105	0					
ANR	705354	Condition	br -> back_num == 1	1545:10:37437:37453	705105	0	True				
ANR	705355	EqualityExpression	br -> back_num == 1		705105	0		==			
ANR	705356	PtrMemberAccess	br -> back_num		705105	0					
ANR	705357	Identifier	br		705105	0					
ANR	705358	Identifier	back_num		705105	1					
ANR	705359	PrimaryExpression	1		705105	1					
ANR	705360	CompoundStatement		56:29:1110:1110	705105	1					
ANR	705361	ExpressionStatement	r = ( ( ! IS_IGNORECASE ( reg -> options ) && br -> back_static [ 0 ] <= 2 ) ? SIZE_OPCODE : ( SIZE_OPCODE + SIZE_MEMNUM ) )	1546:1:37459:37572	705105	0	True				
ANR	705362	AssignmentExpression	r = ( ( ! IS_IGNORECASE ( reg -> options ) && br -> back_static [ 0 ] <= 2 ) ? SIZE_OPCODE : ( SIZE_OPCODE + SIZE_MEMNUM ) )		705105	0		=			
ANR	705363	Identifier	r		705105	0					
ANR	705364	ConditionalExpression	( ! IS_IGNORECASE ( reg -> options ) && br -> back_static [ 0 ] <= 2 ) ? SIZE_OPCODE : ( SIZE_OPCODE + SIZE_MEMNUM )		705105	1					
ANR	705365	Condition	! IS_IGNORECASE ( reg -> options ) && br -> back_static [ 0 ] <= 2		705105	0					
ANR	705366	AndExpression	! IS_IGNORECASE ( reg -> options ) && br -> back_static [ 0 ] <= 2		705105	0		&&			
ANR	705367	UnaryOperationExpression	! IS_IGNORECASE ( reg -> options )		705105	0					
ANR	705368	UnaryOperator	!		705105	0					
ANR	705369	CallExpression	IS_IGNORECASE ( reg -> options )		705105	1					
ANR	705370	Callee	IS_IGNORECASE		705105	0					
ANR	705371	Identifier	IS_IGNORECASE		705105	0					
ANR	705372	ArgumentList	reg -> options		705105	1					
ANR	705373	Argument	reg -> options		705105	0					
ANR	705374	PtrMemberAccess	reg -> options		705105	0					
ANR	705375	Identifier	reg		705105	0					
ANR	705376	Identifier	options		705105	1					
ANR	705377	RelationalExpression	br -> back_static [ 0 ] <= 2		705105	1		<=			
ANR	705378	ArrayIndexing	br -> back_static [ 0 ]		705105	0					
ANR	705379	PtrMemberAccess	br -> back_static		705105	0					
ANR	705380	Identifier	br		705105	0					
ANR	705381	Identifier	back_static		705105	1					
ANR	705382	PrimaryExpression	0		705105	1					
ANR	705383	PrimaryExpression	2		705105	1					
ANR	705384	Identifier	SIZE_OPCODE		705105	1					
ANR	705385	AdditiveExpression	SIZE_OPCODE + SIZE_MEMNUM		705105	2		+			
ANR	705386	Identifier	SIZE_OPCODE		705105	0					
ANR	705387	Identifier	SIZE_MEMNUM		705105	1					
ANR	705388	ElseStatement	else		705105	0					
ANR	705389	CompoundStatement		60:11:1247:1247	705105	0					
ANR	705390	ExpressionStatement	r = SIZE_OPCODE + SIZE_LENGTH + ( SIZE_MEMNUM * br -> back_num )	1550:1:37596:37656	705105	0	True				
ANR	705391	AssignmentExpression	r = SIZE_OPCODE + SIZE_LENGTH + ( SIZE_MEMNUM * br -> back_num )		705105	0		=			
ANR	705392	Identifier	r		705105	0					
ANR	705393	AdditiveExpression	SIZE_OPCODE + SIZE_LENGTH + ( SIZE_MEMNUM * br -> back_num )		705105	1		+			
ANR	705394	Identifier	SIZE_OPCODE		705105	0					
ANR	705395	AdditiveExpression	SIZE_LENGTH + ( SIZE_MEMNUM * br -> back_num )		705105	1		+			
ANR	705396	Identifier	SIZE_LENGTH		705105	0					
ANR	705397	MultiplicativeExpression	SIZE_MEMNUM * br -> back_num		705105	1		*			
ANR	705398	Identifier	SIZE_MEMNUM		705105	0					
ANR	705399	PtrMemberAccess	br -> back_num		705105	1					
ANR	705400	Identifier	br		705105	0					
ANR	705401	Identifier	back_num		705105	1					
ANR	705402	BreakStatement	break ;	1553:4:37676:37681	705105	20	True				
ANR	705403	Label	case NT_CALL :	1556:2:37709:37721	705105	21	True				
ANR	705404	Identifier	NT_CALL		705105	0					
ANR	705405	ExpressionStatement	r = SIZE_OP_CALL	1557:4:37727:37743	705105	22	True				
ANR	705406	AssignmentExpression	r = SIZE_OP_CALL		705105	0		=			
ANR	705407	Identifier	r		705105	0					
ANR	705408	Identifier	SIZE_OP_CALL		705105	1					
ANR	705409	BreakStatement	break ;	1558:4:37749:37754	705105	23	True				
ANR	705410	Label	case NT_QTFR :	1561:2:37766:37778	705105	24	True				
ANR	705411	Identifier	NT_QTFR		705105	0					
ANR	705412	ExpressionStatement	"r = compile_length_quantifier_node ( NQTFR ( node ) , reg )"	1562:4:37784:37836	705105	25	True				
ANR	705413	AssignmentExpression	"r = compile_length_quantifier_node ( NQTFR ( node ) , reg )"		705105	0		=			
ANR	705414	Identifier	r		705105	0					
ANR	705415	CallExpression	"compile_length_quantifier_node ( NQTFR ( node ) , reg )"		705105	1					
ANR	705416	Callee	compile_length_quantifier_node		705105	0					
ANR	705417	Identifier	compile_length_quantifier_node		705105	0					
ANR	705418	ArgumentList	NQTFR ( node )		705105	1					
ANR	705419	Argument	NQTFR ( node )		705105	0					
ANR	705420	CallExpression	NQTFR ( node )		705105	0					
ANR	705421	Callee	NQTFR		705105	0					
ANR	705422	Identifier	NQTFR		705105	0					
ANR	705423	ArgumentList	node		705105	1					
ANR	705424	Argument	node		705105	0					
ANR	705425	Identifier	node		705105	0					
ANR	705426	Argument	reg		705105	1					
ANR	705427	Identifier	reg		705105	0					
ANR	705428	BreakStatement	break ;	1563:4:37842:37847	705105	26	True				
ANR	705429	Label	case NT_ENCLOSE :	1565:2:37852:37867	705105	27	True				
ANR	705430	Identifier	NT_ENCLOSE		705105	0					
ANR	705431	ExpressionStatement	"r = compile_length_enclose_node ( NENCLOSE ( node ) , reg )"	1566:4:37873:37925	705105	28	True				
ANR	705432	AssignmentExpression	"r = compile_length_enclose_node ( NENCLOSE ( node ) , reg )"		705105	0		=			
ANR	705433	Identifier	r		705105	0					
ANR	705434	CallExpression	"compile_length_enclose_node ( NENCLOSE ( node ) , reg )"		705105	1					
ANR	705435	Callee	compile_length_enclose_node		705105	0					
ANR	705436	Identifier	compile_length_enclose_node		705105	0					
ANR	705437	ArgumentList	NENCLOSE ( node )		705105	1					
ANR	705438	Argument	NENCLOSE ( node )		705105	0					
ANR	705439	CallExpression	NENCLOSE ( node )		705105	0					
ANR	705440	Callee	NENCLOSE		705105	0					
ANR	705441	Identifier	NENCLOSE		705105	0					
ANR	705442	ArgumentList	node		705105	1					
ANR	705443	Argument	node		705105	0					
ANR	705444	Identifier	node		705105	0					
ANR	705445	Argument	reg		705105	1					
ANR	705446	Identifier	reg		705105	0					
ANR	705447	BreakStatement	break ;	1567:4:37931:37936	705105	29	True				
ANR	705448	Label	case NT_ANCHOR :	1569:2:37941:37955	705105	30	True				
ANR	705449	Identifier	NT_ANCHOR		705105	0					
ANR	705450	ExpressionStatement	"r = compile_length_anchor_node ( NANCHOR ( node ) , reg )"	1570:4:37961:38011	705105	31	True				
ANR	705451	AssignmentExpression	"r = compile_length_anchor_node ( NANCHOR ( node ) , reg )"		705105	0		=			
ANR	705452	Identifier	r		705105	0					
ANR	705453	CallExpression	"compile_length_anchor_node ( NANCHOR ( node ) , reg )"		705105	1					
ANR	705454	Callee	compile_length_anchor_node		705105	0					
ANR	705455	Identifier	compile_length_anchor_node		705105	0					
ANR	705456	ArgumentList	NANCHOR ( node )		705105	1					
ANR	705457	Argument	NANCHOR ( node )		705105	0					
ANR	705458	CallExpression	NANCHOR ( node )		705105	0					
ANR	705459	Callee	NANCHOR		705105	0					
ANR	705460	Identifier	NANCHOR		705105	0					
ANR	705461	ArgumentList	node		705105	1					
ANR	705462	Argument	node		705105	0					
ANR	705463	Identifier	node		705105	0					
ANR	705464	Argument	reg		705105	1					
ANR	705465	Identifier	reg		705105	0					
ANR	705466	BreakStatement	break ;	1571:4:38017:38022	705105	32	True				
ANR	705467	Label	default :	1573:2:38027:38034	705105	33	True				
ANR	705468	Identifier	default		705105	0					
ANR	705469	ReturnStatement	return ONIGERR_TYPE_BUG ;	1574:4:38040:38063	705105	34	True				
ANR	705470	Identifier	ONIGERR_TYPE_BUG		705105	0					
ANR	705471	BreakStatement	break ;	1575:4:38069:38074	705105	35	True				
ANR	705472	ReturnStatement	return r ;	1578:2:38083:38091	705105	3	True				
ANR	705473	Identifier	r		705105	0					
ANR	705474	ReturnType	static int		705105	1					
ANR	705475	Identifier	compile_length_tree		705105	2					
ANR	705476	ParameterList	"Node * node , regex_t * reg"		705105	3					
ANR	705477	Parameter	Node * node	1489:20:36319:36328	705105	0	True				
ANR	705478	ParameterType	Node *		705105	0					
ANR	705479	Identifier	node		705105	1					
ANR	705480	Parameter	regex_t * reg	1489:32:36331:36342	705105	1	True				
ANR	705481	ParameterType	regex_t *		705105	0					
ANR	705482	Identifier	reg		705105	1					
ANR	705483	CFGEntryNode	ENTRY		705105		True				
ANR	705484	CFGExitNode	EXIT		705105		True				
ANR	705485	Symbol	IS_NOT_NULL		705105						
ANR	705486	Symbol	NCAR		705105						
ANR	705487	Symbol	br -> back_num		705105						
ANR	705488	Symbol	compile_length_enclose_node		705105						
ANR	705489	Symbol	* br -> back_static		705105						
ANR	705490	Symbol	NSTRING_IS_RAW		705105						
ANR	705491	Symbol	type		705105						
ANR	705492	Symbol	SIZE_LENGTH		705105						
ANR	705493	Symbol	NQTFR		705105						
ANR	705494	Symbol	NCCLASS		705105						
ANR	705495	Symbol	br		705105						
ANR	705496	Symbol	SIZE_OPCODE		705105						
ANR	705497	Symbol	compile_length_string_node		705105						
ANR	705498	Symbol	SIZE_MEMNUM		705105						
ANR	705499	Symbol	len		705105						
ANR	705500	Symbol	compile_length_anchor_node		705105						
ANR	705501	Symbol	reg		705105						
ANR	705502	Symbol	NBREF		705105						
ANR	705503	Symbol	* br		705105						
ANR	705504	Symbol	reg -> options		705105						
ANR	705505	Symbol	NENCLOSE		705105						
ANR	705506	Symbol	SIZE_OPTION		705105						
ANR	705507	Symbol	compile_length_string_raw_node		705105						
ANR	705508	Symbol	SIZE_OP_JUMP		705105						
ANR	705509	Symbol	compile_length_tree		705105						
ANR	705510	Symbol	compile_length_cclass_node		705105						
ANR	705511	Symbol	NCDR		705105						
ANR	705512	Symbol	NSTR		705105						
ANR	705513	Symbol	SIZE_OP_PUSH		705105						
ANR	705514	Symbol	ONIGERR_TYPE_BUG		705105						
ANR	705515	Symbol	n		705105						
ANR	705516	Symbol	br -> back_static		705105						
ANR	705517	Symbol	node		705105						
ANR	705518	Symbol	r		705105						
ANR	705519	Symbol	SIZE_OP_CALL		705105						
ANR	705520	Symbol	IS_IGNORECASE		705105						
ANR	705521	Symbol	NANCHOR		705105						
ANR	705522	Symbol	NTYPE		705105						
ANR	705523	Symbol	IS_BACKREF_NEST_LEVEL		705105						
ANR	705524	Symbol	* reg		705105						
ANR	705525	Symbol	* * br		705105						
ANR	705526	Symbol	compile_length_quantifier_node		705105						
ANR	705527	Function	compile_tree	1581:0:38096:41545							
ANR	705528	FunctionDef	"compile_tree (Node * node , regex_t * reg)"		705527	0					
ANR	705529	CompoundStatement		1583:0:38146:41545	705527	0					
ANR	705530	IdentifierDeclStatement	"int n , type , len , pos , r = 0 ;"	1584:2:38150:38178	705527	0	True				
ANR	705531	IdentifierDecl	n		705527	0					
ANR	705532	IdentifierDeclType	int		705527	0					
ANR	705533	Identifier	n		705527	1					
ANR	705534	IdentifierDecl	type		705527	1					
ANR	705535	IdentifierDeclType	int		705527	0					
ANR	705536	Identifier	type		705527	1					
ANR	705537	IdentifierDecl	len		705527	2					
ANR	705538	IdentifierDeclType	int		705527	0					
ANR	705539	Identifier	len		705527	1					
ANR	705540	IdentifierDecl	pos		705527	3					
ANR	705541	IdentifierDeclType	int		705527	0					
ANR	705542	Identifier	pos		705527	1					
ANR	705543	IdentifierDecl	r = 0		705527	4					
ANR	705544	IdentifierDeclType	int		705527	0					
ANR	705545	Identifier	r		705527	1					
ANR	705546	AssignmentExpression	r = 0		705527	2		=			
ANR	705547	Identifier	r		705527	0					
ANR	705548	PrimaryExpression	0		705527	1					
ANR	705549	ExpressionStatement	type = NTYPE ( node )	1586:2:38183:38201	705527	1	True				
ANR	705550	AssignmentExpression	type = NTYPE ( node )		705527	0		=			
ANR	705551	Identifier	type		705527	0					
ANR	705552	CallExpression	NTYPE ( node )		705527	1					
ANR	705553	Callee	NTYPE		705527	0					
ANR	705554	Identifier	NTYPE		705527	0					
ANR	705555	ArgumentList	node		705527	1					
ANR	705556	Argument	node		705527	0					
ANR	705557	Identifier	node		705527	0					
ANR	705558	SwitchStatement	switch ( type )		705527	2					
ANR	705559	Condition	type	1587:10:38213:38216	705527	0	True				
ANR	705560	Identifier	type		705527	0					
ANR	705561	CompoundStatement		5:16:72:72	705527	1					
ANR	705562	Label	case NT_LIST :	1588:2:38223:38235	705527	0	True				
ANR	705563	Identifier	NT_LIST		705527	0					
ANR	705564	DoStatement	do		705527	1					
ANR	705565	CompoundStatement		7:7:97:97	705527	0					
ANR	705566	ExpressionStatement	"r = compile_tree ( NCAR ( node ) , reg )"	1590:6:38252:38285	705527	0	True				
ANR	705567	AssignmentExpression	"r = compile_tree ( NCAR ( node ) , reg )"		705527	0		=			
ANR	705568	Identifier	r		705527	0					
ANR	705569	CallExpression	"compile_tree ( NCAR ( node ) , reg )"		705527	1					
ANR	705570	Callee	compile_tree		705527	0					
ANR	705571	Identifier	compile_tree		705527	0					
ANR	705572	ArgumentList	NCAR ( node )		705527	1					
ANR	705573	Argument	NCAR ( node )		705527	0					
ANR	705574	CallExpression	NCAR ( node )		705527	0					
ANR	705575	Callee	NCAR		705527	0					
ANR	705576	Identifier	NCAR		705527	0					
ANR	705577	ArgumentList	node		705527	1					
ANR	705578	Argument	node		705527	0					
ANR	705579	Identifier	node		705527	0					
ANR	705580	Argument	reg		705527	1					
ANR	705581	Identifier	reg		705527	0					
ANR	705582	Condition	r == 0 && IS_NOT_NULL ( node = NCDR ( node ) )	1591:13:38300:38339	705527	1	True				
ANR	705583	AndExpression	r == 0 && IS_NOT_NULL ( node = NCDR ( node ) )		705527	0		&&			
ANR	705584	EqualityExpression	r == 0		705527	0		==			
ANR	705585	Identifier	r		705527	0					
ANR	705586	PrimaryExpression	0		705527	1					
ANR	705587	CallExpression	IS_NOT_NULL ( node = NCDR ( node ) )		705527	1					
ANR	705588	Callee	IS_NOT_NULL		705527	0					
ANR	705589	Identifier	IS_NOT_NULL		705527	0					
ANR	705590	ArgumentList	node = NCDR ( node )		705527	1					
ANR	705591	Argument	node = NCDR ( node )		705527	0					
ANR	705592	AssignmentExpression	node = NCDR ( node )		705527	0		=			
ANR	705593	Identifier	node		705527	0					
ANR	705594	CallExpression	NCDR ( node )		705527	1					
ANR	705595	Callee	NCDR		705527	0					
ANR	705596	Identifier	NCDR		705527	0					
ANR	705597	ArgumentList	node		705527	1					
ANR	705598	Argument	node		705527	0					
ANR	705599	Identifier	node		705527	0					
ANR	705600	BreakStatement	break ;	1592:4:38347:38352	705527	2	True				
ANR	705601	Label	case NT_ALT :	1594:2:38357:38368	705527	3	True				
ANR	705602	Identifier	NT_ALT		705527	0					
ANR	705603	CompoundStatement		14:6:235:249	705527	4					
ANR	705604	IdentifierDeclStatement	Node * x = node ;	1596:6:38382:38396	705527	0	True				
ANR	705605	IdentifierDecl	* x = node		705527	0					
ANR	705606	IdentifierDeclType	Node *		705527	0					
ANR	705607	Identifier	x		705527	1					
ANR	705608	AssignmentExpression	* x = node		705527	2		=			
ANR	705609	Identifier	node		705527	0					
ANR	705610	Identifier	node		705527	1					
ANR	705611	ExpressionStatement	len = 0	1597:6:38404:38411	705527	1	True				
ANR	705612	AssignmentExpression	len = 0		705527	0		=			
ANR	705613	Identifier	len		705527	0					
ANR	705614	PrimaryExpression	0		705527	1					
ANR	705615	DoStatement	do		705527	2					
ANR	705616	CompoundStatement		16:9:275:275	705527	0					
ANR	705617	ExpressionStatement	"len += compile_length_tree ( NCAR ( x ) , reg )"	1599:1:38425:38465	705527	0	True				
ANR	705618	AssignmentExpression	"len += compile_length_tree ( NCAR ( x ) , reg )"		705527	0		+=			
ANR	705619	Identifier	len		705527	0					
ANR	705620	CallExpression	"compile_length_tree ( NCAR ( x ) , reg )"		705527	1					
ANR	705621	Callee	compile_length_tree		705527	0					
ANR	705622	Identifier	compile_length_tree		705527	0					
ANR	705623	ArgumentList	NCAR ( x )		705527	1					
ANR	705624	Argument	NCAR ( x )		705527	0					
ANR	705625	CallExpression	NCAR ( x )		705527	0					
ANR	705626	Callee	NCAR		705527	0					
ANR	705627	Identifier	NCAR		705527	0					
ANR	705628	ArgumentList	x		705527	1					
ANR	705629	Argument	x		705527	0					
ANR	705630	Identifier	x		705527	0					
ANR	705631	Argument	reg		705527	1					
ANR	705632	Identifier	reg		705527	0					
ANR	705633	IfStatement	if ( NCDR ( x ) != NULL )		705527	1					
ANR	705634	Condition	NCDR ( x ) != NULL	1600:5:38472:38486	705527	0	True				
ANR	705635	EqualityExpression	NCDR ( x ) != NULL		705527	0		!=			
ANR	705636	CallExpression	NCDR ( x )		705527	0					
ANR	705637	Callee	NCDR		705527	0					
ANR	705638	Identifier	NCDR		705527	0					
ANR	705639	ArgumentList	x		705527	1					
ANR	705640	Argument	x		705527	0					
ANR	705641	Identifier	x		705527	0					
ANR	705642	Identifier	NULL		705527	1					
ANR	705643	CompoundStatement		18:22:342:342	705527	1					
ANR	705644	ExpressionStatement	len += SIZE_OP_PUSH + SIZE_OP_JUMP	1601:3:38494:38528	705527	0	True				
ANR	705645	AssignmentExpression	len += SIZE_OP_PUSH + SIZE_OP_JUMP		705527	0		+=			
ANR	705646	Identifier	len		705527	0					
ANR	705647	AdditiveExpression	SIZE_OP_PUSH + SIZE_OP_JUMP		705527	1		+			
ANR	705648	Identifier	SIZE_OP_PUSH		705527	0					
ANR	705649	Identifier	SIZE_OP_JUMP		705527	1					
ANR	705650	Condition	IS_NOT_NULL ( x = NCDR ( x ) )	1603:15:38548:38571	705527	1	True				
ANR	705651	CallExpression	IS_NOT_NULL ( x = NCDR ( x ) )		705527	0					
ANR	705652	Callee	IS_NOT_NULL		705527	0					
ANR	705653	Identifier	IS_NOT_NULL		705527	0					
ANR	705654	ArgumentList	x = NCDR ( x )		705527	1					
ANR	705655	Argument	x = NCDR ( x )		705527	0					
ANR	705656	AssignmentExpression	x = NCDR ( x )		705527	0		=			
ANR	705657	Identifier	x		705527	0					
ANR	705658	CallExpression	NCDR ( x )		705527	1					
ANR	705659	Callee	NCDR		705527	0					
ANR	705660	Identifier	NCDR		705527	0					
ANR	705661	ArgumentList	x		705527	1					
ANR	705662	Argument	x		705527	0					
ANR	705663	Identifier	x		705527	0					
ANR	705664	ExpressionStatement	pos = reg -> used + len	1604:6:38581:38602	705527	3	True				
ANR	705665	AssignmentExpression	pos = reg -> used + len		705527	0		=			
ANR	705666	Identifier	pos		705527	0					
ANR	705667	AdditiveExpression	reg -> used + len		705527	1		+			
ANR	705668	PtrMemberAccess	reg -> used		705527	0					
ANR	705669	Identifier	reg		705527	0					
ANR	705670	Identifier	used		705527	1					
ANR	705671	Identifier	len		705527	1					
ANR	705672	DoStatement	do		705527	4					
ANR	705673	CompoundStatement		24:9:488:488	705527	0					
ANR	705674	ExpressionStatement	"len = compile_length_tree ( NCAR ( node ) , reg )"	1607:1:38638:38680	705527	0	True				
ANR	705675	AssignmentExpression	"len = compile_length_tree ( NCAR ( node ) , reg )"		705527	0		=			
ANR	705676	Identifier	len		705527	0					
ANR	705677	CallExpression	"compile_length_tree ( NCAR ( node ) , reg )"		705527	1					
ANR	705678	Callee	compile_length_tree		705527	0					
ANR	705679	Identifier	compile_length_tree		705527	0					
ANR	705680	ArgumentList	NCAR ( node )		705527	1					
ANR	705681	Argument	NCAR ( node )		705527	0					
ANR	705682	CallExpression	NCAR ( node )		705527	0					
ANR	705683	Callee	NCAR		705527	0					
ANR	705684	Identifier	NCAR		705527	0					
ANR	705685	ArgumentList	node		705527	1					
ANR	705686	Argument	node		705527	0					
ANR	705687	Identifier	node		705527	0					
ANR	705688	Argument	reg		705527	1					
ANR	705689	Identifier	reg		705527	0					
ANR	705690	IfStatement	if ( IS_NOT_NULL ( NCDR ( node ) ) )		705527	1					
ANR	705691	Condition	IS_NOT_NULL ( NCDR ( node ) )	1608:5:38687:38709	705527	0	True				
ANR	705692	CallExpression	IS_NOT_NULL ( NCDR ( node ) )		705527	0					
ANR	705693	Callee	IS_NOT_NULL		705527	0					
ANR	705694	Identifier	IS_NOT_NULL		705527	0					
ANR	705695	ArgumentList	NCDR ( node )		705527	1					
ANR	705696	Argument	NCDR ( node )		705527	0					
ANR	705697	CallExpression	NCDR ( node )		705527	0					
ANR	705698	Callee	NCDR		705527	0					
ANR	705699	Identifier	NCDR		705527	0					
ANR	705700	ArgumentList	node		705527	1					
ANR	705701	Argument	node		705527	0					
ANR	705702	Identifier	node		705527	0					
ANR	705703	CompoundStatement		26:30:565:565	705527	1					
ANR	705704	ExpressionStatement	"r = add_opcode_rel_addr ( reg , OP_PUSH , len + SIZE_OP_JUMP )"	1609:3:38717:38774	705527	0	True				
ANR	705705	AssignmentExpression	"r = add_opcode_rel_addr ( reg , OP_PUSH , len + SIZE_OP_JUMP )"		705527	0		=			
ANR	705706	Identifier	r		705527	0					
ANR	705707	CallExpression	"add_opcode_rel_addr ( reg , OP_PUSH , len + SIZE_OP_JUMP )"		705527	1					
ANR	705708	Callee	add_opcode_rel_addr		705527	0					
ANR	705709	Identifier	add_opcode_rel_addr		705527	0					
ANR	705710	ArgumentList	reg		705527	1					
ANR	705711	Argument	reg		705527	0					
ANR	705712	Identifier	reg		705527	0					
ANR	705713	Argument	OP_PUSH		705527	1					
ANR	705714	Identifier	OP_PUSH		705527	0					
ANR	705715	Argument	len + SIZE_OP_JUMP		705527	2					
ANR	705716	AdditiveExpression	len + SIZE_OP_JUMP		705527	0		+			
ANR	705717	Identifier	len		705527	0					
ANR	705718	Identifier	SIZE_OP_JUMP		705527	1					
ANR	705719	IfStatement	if ( r )		705527	1					
ANR	705720	Condition	r	1610:7:38783:38783	705527	0	True				
ANR	705721	Identifier	r		705527	0					
ANR	705722	BreakStatement	break ;	1610:10:38786:38791	705527	1	True				
ANR	705723	ExpressionStatement	"r = compile_tree ( NCAR ( node ) , reg )"	1612:1:38797:38830	705527	2	True				
ANR	705724	AssignmentExpression	"r = compile_tree ( NCAR ( node ) , reg )"		705527	0		=			
ANR	705725	Identifier	r		705527	0					
ANR	705726	CallExpression	"compile_tree ( NCAR ( node ) , reg )"		705527	1					
ANR	705727	Callee	compile_tree		705527	0					
ANR	705728	Identifier	compile_tree		705527	0					
ANR	705729	ArgumentList	NCAR ( node )		705527	1					
ANR	705730	Argument	NCAR ( node )		705527	0					
ANR	705731	CallExpression	NCAR ( node )		705527	0					
ANR	705732	Callee	NCAR		705527	0					
ANR	705733	Identifier	NCAR		705527	0					
ANR	705734	ArgumentList	node		705527	1					
ANR	705735	Argument	node		705527	0					
ANR	705736	Identifier	node		705527	0					
ANR	705737	Argument	reg		705527	1					
ANR	705738	Identifier	reg		705527	0					
ANR	705739	IfStatement	if ( r )		705527	3					
ANR	705740	Condition	r	1613:5:38837:38837	705527	0	True				
ANR	705741	Identifier	r		705527	0					
ANR	705742	BreakStatement	break ;	1613:8:38840:38845	705527	1	True				
ANR	705743	IfStatement	if ( IS_NOT_NULL ( NCDR ( node ) ) )		705527	4					
ANR	705744	Condition	IS_NOT_NULL ( NCDR ( node ) )	1614:5:38852:38874	705527	0	True				
ANR	705745	CallExpression	IS_NOT_NULL ( NCDR ( node ) )		705527	0					
ANR	705746	Callee	IS_NOT_NULL		705527	0					
ANR	705747	Identifier	IS_NOT_NULL		705527	0					
ANR	705748	ArgumentList	NCDR ( node )		705527	1					
ANR	705749	Argument	NCDR ( node )		705527	0					
ANR	705750	CallExpression	NCDR ( node )		705527	0					
ANR	705751	Callee	NCDR		705527	0					
ANR	705752	Identifier	NCDR		705527	0					
ANR	705753	ArgumentList	node		705527	1					
ANR	705754	Argument	node		705527	0					
ANR	705755	Identifier	node		705527	0					
ANR	705756	CompoundStatement		32:30:730:730	705527	1					
ANR	705757	ExpressionStatement	len = pos - ( reg -> used + SIZE_OP_JUMP )	1615:3:38882:38920	705527	0	True				
ANR	705758	AssignmentExpression	len = pos - ( reg -> used + SIZE_OP_JUMP )		705527	0		=			
ANR	705759	Identifier	len		705527	0					
ANR	705760	AdditiveExpression	pos - ( reg -> used + SIZE_OP_JUMP )		705527	1		-			
ANR	705761	Identifier	pos		705527	0					
ANR	705762	AdditiveExpression	reg -> used + SIZE_OP_JUMP		705527	1		+			
ANR	705763	PtrMemberAccess	reg -> used		705527	0					
ANR	705764	Identifier	reg		705527	0					
ANR	705765	Identifier	used		705527	1					
ANR	705766	Identifier	SIZE_OP_JUMP		705527	1					
ANR	705767	ExpressionStatement	"r = add_opcode_rel_addr ( reg , OP_JUMP , len )"	1616:3:38925:38967	705527	1	True				
ANR	705768	AssignmentExpression	"r = add_opcode_rel_addr ( reg , OP_JUMP , len )"		705527	0		=			
ANR	705769	Identifier	r		705527	0					
ANR	705770	CallExpression	"add_opcode_rel_addr ( reg , OP_JUMP , len )"		705527	1					
ANR	705771	Callee	add_opcode_rel_addr		705527	0					
ANR	705772	Identifier	add_opcode_rel_addr		705527	0					
ANR	705773	ArgumentList	reg		705527	1					
ANR	705774	Argument	reg		705527	0					
ANR	705775	Identifier	reg		705527	0					
ANR	705776	Argument	OP_JUMP		705527	1					
ANR	705777	Identifier	OP_JUMP		705527	0					
ANR	705778	Argument	len		705527	2					
ANR	705779	Identifier	len		705527	0					
ANR	705780	IfStatement	if ( r )		705527	2					
ANR	705781	Condition	r	1617:7:38976:38976	705527	0	True				
ANR	705782	Identifier	r		705527	0					
ANR	705783	BreakStatement	break ;	1617:10:38979:38984	705527	1	True				
ANR	705784	Condition	IS_NOT_NULL ( node = NCDR ( node ) )	1619:15:39004:39033	705527	1	True				
ANR	705785	CallExpression	IS_NOT_NULL ( node = NCDR ( node ) )		705527	0					
ANR	705786	Callee	IS_NOT_NULL		705527	0					
ANR	705787	Identifier	IS_NOT_NULL		705527	0					
ANR	705788	ArgumentList	node = NCDR ( node )		705527	1					
ANR	705789	Argument	node = NCDR ( node )		705527	0					
ANR	705790	AssignmentExpression	node = NCDR ( node )		705527	0		=			
ANR	705791	Identifier	node		705527	0					
ANR	705792	CallExpression	NCDR ( node )		705527	1					
ANR	705793	Callee	NCDR		705527	0					
ANR	705794	Identifier	NCDR		705527	0					
ANR	705795	ArgumentList	node		705527	1					
ANR	705796	Argument	node		705527	0					
ANR	705797	Identifier	node		705527	0					
ANR	705798	BreakStatement	break ;	1621:4:39047:39052	705527	5	True				
ANR	705799	Label	case NT_STR :	1623:2:39057:39068	705527	6	True				
ANR	705800	Identifier	NT_STR		705527	0					
ANR	705801	IfStatement	if ( NSTRING_IS_RAW ( node ) )		705527	7					
ANR	705802	Condition	NSTRING_IS_RAW ( node )	1624:8:39078:39097	705527	0	True				
ANR	705803	CallExpression	NSTRING_IS_RAW ( node )		705527	0					
ANR	705804	Callee	NSTRING_IS_RAW		705527	0					
ANR	705805	Identifier	NSTRING_IS_RAW		705527	0					
ANR	705806	ArgumentList	node		705527	1					
ANR	705807	Argument	node		705527	0					
ANR	705808	Identifier	node		705527	0					
ANR	705809	ExpressionStatement	"r = compile_string_raw_node ( NSTR ( node ) , reg )"	1625:6:39106:39150	705527	1	True				
ANR	705810	AssignmentExpression	"r = compile_string_raw_node ( NSTR ( node ) , reg )"		705527	0		=			
ANR	705811	Identifier	r		705527	0					
ANR	705812	CallExpression	"compile_string_raw_node ( NSTR ( node ) , reg )"		705527	1					
ANR	705813	Callee	compile_string_raw_node		705527	0					
ANR	705814	Identifier	compile_string_raw_node		705527	0					
ANR	705815	ArgumentList	NSTR ( node )		705527	1					
ANR	705816	Argument	NSTR ( node )		705527	0					
ANR	705817	CallExpression	NSTR ( node )		705527	0					
ANR	705818	Callee	NSTR		705527	0					
ANR	705819	Identifier	NSTR		705527	0					
ANR	705820	ArgumentList	node		705527	1					
ANR	705821	Argument	node		705527	0					
ANR	705822	Identifier	node		705527	0					
ANR	705823	Argument	reg		705527	1					
ANR	705824	Identifier	reg		705527	0					
ANR	705825	ElseStatement	else		705527	0					
ANR	705826	ExpressionStatement	"r = compile_string_node ( node , reg )"	1627:6:39167:39201	705527	0	True				
ANR	705827	AssignmentExpression	"r = compile_string_node ( node , reg )"		705527	0		=			
ANR	705828	Identifier	r		705527	0					
ANR	705829	CallExpression	"compile_string_node ( node , reg )"		705527	1					
ANR	705830	Callee	compile_string_node		705527	0					
ANR	705831	Identifier	compile_string_node		705527	0					
ANR	705832	ArgumentList	node		705527	1					
ANR	705833	Argument	node		705527	0					
ANR	705834	Identifier	node		705527	0					
ANR	705835	Argument	reg		705527	1					
ANR	705836	Identifier	reg		705527	0					
ANR	705837	BreakStatement	break ;	1628:4:39207:39212	705527	8	True				
ANR	705838	Label	case NT_CCLASS :	1630:2:39217:39231	705527	9	True				
ANR	705839	Identifier	NT_CCLASS		705527	0					
ANR	705840	ExpressionStatement	"r = compile_cclass_node ( NCCLASS ( node ) , reg )"	1631:4:39237:39280	705527	10	True				
ANR	705841	AssignmentExpression	"r = compile_cclass_node ( NCCLASS ( node ) , reg )"		705527	0		=			
ANR	705842	Identifier	r		705527	0					
ANR	705843	CallExpression	"compile_cclass_node ( NCCLASS ( node ) , reg )"		705527	1					
ANR	705844	Callee	compile_cclass_node		705527	0					
ANR	705845	Identifier	compile_cclass_node		705527	0					
ANR	705846	ArgumentList	NCCLASS ( node )		705527	1					
ANR	705847	Argument	NCCLASS ( node )		705527	0					
ANR	705848	CallExpression	NCCLASS ( node )		705527	0					
ANR	705849	Callee	NCCLASS		705527	0					
ANR	705850	Identifier	NCCLASS		705527	0					
ANR	705851	ArgumentList	node		705527	1					
ANR	705852	Argument	node		705527	0					
ANR	705853	Identifier	node		705527	0					
ANR	705854	Argument	reg		705527	1					
ANR	705855	Identifier	reg		705527	0					
ANR	705856	BreakStatement	break ;	1632:4:39286:39291	705527	11	True				
ANR	705857	Label	case NT_CTYPE :	1634:2:39296:39309	705527	12	True				
ANR	705858	Identifier	NT_CTYPE		705527	0					
ANR	705859	CompoundStatement		54:6:1176:1182	705527	13					
ANR	705860	IdentifierDeclStatement	int op ;	1636:6:39323:39329	705527	0	True				
ANR	705861	IdentifierDecl	op		705527	0					
ANR	705862	IdentifierDeclType	int		705527	0					
ANR	705863	Identifier	op		705527	1					
ANR	705864	SwitchStatement	switch ( NCTYPE ( node ) -> ctype )		705527	1					
ANR	705865	Condition	NCTYPE ( node ) -> ctype	1638:14:39346:39364	705527	0	True				
ANR	705866	PtrMemberAccess	NCTYPE ( node ) -> ctype		705527	0					
ANR	705867	CallExpression	NCTYPE ( node )		705527	0					
ANR	705868	Callee	NCTYPE		705527	0					
ANR	705869	Identifier	NCTYPE		705527	0					
ANR	705870	ArgumentList	node		705527	1					
ANR	705871	Argument	node		705527	0					
ANR	705872	Identifier	node		705527	0					
ANR	705873	Identifier	ctype		705527	1					
ANR	705874	CompoundStatement		56:35:1220:1220	705527	1					
ANR	705875	Label	case ONIGENC_CTYPE_WORD :	1639:6:39375:39398	705527	0	True				
ANR	705876	Identifier	ONIGENC_CTYPE_WORD		705527	0					
ANR	705877	IfStatement	if ( NCTYPE ( node ) -> not != 0 )		705527	1					
ANR	705878	Condition	NCTYPE ( node ) -> not != 0	1640:5:39405:39426	705527	0	True				
ANR	705879	EqualityExpression	NCTYPE ( node ) -> not != 0		705527	0		!=			
ANR	705880	PtrMemberAccess	NCTYPE ( node ) -> not		705527	0					
ANR	705881	CallExpression	NCTYPE ( node )		705527	0					
ANR	705882	Callee	NCTYPE		705527	0					
ANR	705883	Identifier	NCTYPE		705527	0					
ANR	705884	ArgumentList	node		705527	1					
ANR	705885	Argument	node		705527	0					
ANR	705886	Identifier	node		705527	0					
ANR	705887	Identifier	not		705527	1					
ANR	705888	PrimaryExpression	0		705527	1					
ANR	705889	ExpressionStatement	op = OP_NOT_WORD	1640:30:39430:39446	705527	1	True				
ANR	705890	AssignmentExpression	op = OP_NOT_WORD		705527	0		=			
ANR	705891	Identifier	op		705527	0					
ANR	705892	Identifier	OP_NOT_WORD		705527	1					
ANR	705893	ElseStatement	else		705527	0					
ANR	705894	ExpressionStatement	op = OP_WORD	1641:30:39478:39490	705527	0	True				
ANR	705895	AssignmentExpression	op = OP_WORD		705527	0		=			
ANR	705896	Identifier	op		705527	0					
ANR	705897	Identifier	OP_WORD		705527	1					
ANR	705898	BreakStatement	break ;	1642:1:39493:39498	705527	2	True				
ANR	705899	Label	default :	1643:6:39506:39513	705527	3	True				
ANR	705900	Identifier	default		705527	0					
ANR	705901	ReturnStatement	return ONIGERR_TYPE_BUG ;	1644:1:39516:39539	705527	4	True				
ANR	705902	Identifier	ONIGERR_TYPE_BUG		705527	0					
ANR	705903	BreakStatement	break ;	1645:1:39542:39547	705527	5	True				
ANR	705904	ExpressionStatement	"r = add_opcode ( reg , op )"	1647:6:39563:39586	705527	2	True				
ANR	705905	AssignmentExpression	"r = add_opcode ( reg , op )"		705527	0		=			
ANR	705906	Identifier	r		705527	0					
ANR	705907	CallExpression	"add_opcode ( reg , op )"		705527	1					
ANR	705908	Callee	add_opcode		705527	0					
ANR	705909	Identifier	add_opcode		705527	0					
ANR	705910	ArgumentList	reg		705527	1					
ANR	705911	Argument	reg		705527	0					
ANR	705912	Identifier	reg		705527	0					
ANR	705913	Argument	op		705527	1					
ANR	705914	Identifier	op		705527	0					
ANR	705915	BreakStatement	break ;	1649:4:39598:39603	705527	14	True				
ANR	705916	Label	case NT_CANY :	1651:2:39608:39620	705527	15	True				
ANR	705917	Identifier	NT_CANY		705527	0					
ANR	705918	IfStatement	if ( IS_MULTILINE ( reg -> options ) )		705527	16					
ANR	705919	Condition	IS_MULTILINE ( reg -> options )	1652:8:39630:39655	705527	0	True				
ANR	705920	CallExpression	IS_MULTILINE ( reg -> options )		705527	0					
ANR	705921	Callee	IS_MULTILINE		705527	0					
ANR	705922	Identifier	IS_MULTILINE		705527	0					
ANR	705923	ArgumentList	reg -> options		705527	1					
ANR	705924	Argument	reg -> options		705527	0					
ANR	705925	PtrMemberAccess	reg -> options		705527	0					
ANR	705926	Identifier	reg		705527	0					
ANR	705927	Identifier	options		705527	1					
ANR	705928	ExpressionStatement	"r = add_opcode ( reg , OP_ANYCHAR_ML )"	1653:6:39664:39698	705527	1	True				
ANR	705929	AssignmentExpression	"r = add_opcode ( reg , OP_ANYCHAR_ML )"		705527	0		=			
ANR	705930	Identifier	r		705527	0					
ANR	705931	CallExpression	"add_opcode ( reg , OP_ANYCHAR_ML )"		705527	1					
ANR	705932	Callee	add_opcode		705527	0					
ANR	705933	Identifier	add_opcode		705527	0					
ANR	705934	ArgumentList	reg		705527	1					
ANR	705935	Argument	reg		705527	0					
ANR	705936	Identifier	reg		705527	0					
ANR	705937	Argument	OP_ANYCHAR_ML		705527	1					
ANR	705938	Identifier	OP_ANYCHAR_ML		705527	0					
ANR	705939	ElseStatement	else		705527	0					
ANR	705940	ExpressionStatement	"r = add_opcode ( reg , OP_ANYCHAR )"	1655:6:39715:39746	705527	0	True				
ANR	705941	AssignmentExpression	"r = add_opcode ( reg , OP_ANYCHAR )"		705527	0		=			
ANR	705942	Identifier	r		705527	0					
ANR	705943	CallExpression	"add_opcode ( reg , OP_ANYCHAR )"		705527	1					
ANR	705944	Callee	add_opcode		705527	0					
ANR	705945	Identifier	add_opcode		705527	0					
ANR	705946	ArgumentList	reg		705527	1					
ANR	705947	Argument	reg		705527	0					
ANR	705948	Identifier	reg		705527	0					
ANR	705949	Argument	OP_ANYCHAR		705527	1					
ANR	705950	Identifier	OP_ANYCHAR		705527	0					
ANR	705951	BreakStatement	break ;	1656:4:39752:39757	705527	17	True				
ANR	705952	Label	case NT_BREF :	1658:2:39762:39774	705527	18	True				
ANR	705953	Identifier	NT_BREF		705527	0					
ANR	705954	CompoundStatement		78:6:1641:1667	705527	19					
ANR	705955	IdentifierDeclStatement	BRefNode * br = NBREF ( node ) ;	1660:6:39788:39814	705527	0	True				
ANR	705956	IdentifierDecl	* br = NBREF ( node )		705527	0					
ANR	705957	IdentifierDeclType	BRefNode *		705527	0					
ANR	705958	Identifier	br		705527	1					
ANR	705959	AssignmentExpression	* br = NBREF ( node )		705527	2		=			
ANR	705960	Identifier	br		705527	0					
ANR	705961	CallExpression	NBREF ( node )		705527	1					
ANR	705962	Callee	NBREF		705527	0					
ANR	705963	Identifier	NBREF		705527	0					
ANR	705964	ArgumentList	node		705527	1					
ANR	705965	Argument	node		705527	0					
ANR	705966	Identifier	node		705527	0					
ANR	705967	IfStatement	if ( IS_BACKREF_NEST_LEVEL ( br ) )		705527	1					
ANR	705968	Condition	IS_BACKREF_NEST_LEVEL ( br )	1663:10:39857:39881	705527	0	True				
ANR	705969	CallExpression	IS_BACKREF_NEST_LEVEL ( br )		705527	0					
ANR	705970	Callee	IS_BACKREF_NEST_LEVEL		705527	0					
ANR	705971	Identifier	IS_BACKREF_NEST_LEVEL		705527	0					
ANR	705972	ArgumentList	br		705527	1					
ANR	705973	Argument	br		705527	0					
ANR	705974	Identifier	br		705527	0					
ANR	705975	CompoundStatement		81:37:1737:1737	705527	1					
ANR	705976	ExpressionStatement	"r = add_opcode ( reg , OP_BACKREF_WITH_LEVEL )"	1664:1:39887:39929	705527	0	True				
ANR	705977	AssignmentExpression	"r = add_opcode ( reg , OP_BACKREF_WITH_LEVEL )"		705527	0		=			
ANR	705978	Identifier	r		705527	0					
ANR	705979	CallExpression	"add_opcode ( reg , OP_BACKREF_WITH_LEVEL )"		705527	1					
ANR	705980	Callee	add_opcode		705527	0					
ANR	705981	Identifier	add_opcode		705527	0					
ANR	705982	ArgumentList	reg		705527	1					
ANR	705983	Argument	reg		705527	0					
ANR	705984	Identifier	reg		705527	0					
ANR	705985	Argument	OP_BACKREF_WITH_LEVEL		705527	1					
ANR	705986	Identifier	OP_BACKREF_WITH_LEVEL		705527	0					
ANR	705987	IfStatement	if ( r )		705527	1					
ANR	705988	Condition	r	1665:5:39936:39936	705527	0	True				
ANR	705989	Identifier	r		705527	0					
ANR	705990	ReturnStatement	return r ;	1665:8:39939:39947	705527	1	True				
ANR	705991	Identifier	r		705527	0					
ANR	705992	ExpressionStatement	"r = add_option ( reg , ( reg -> options & ONIG_OPTION_IGNORECASE ) )"	1666:1:39950:40010	705527	2	True				
ANR	705993	AssignmentExpression	"r = add_option ( reg , ( reg -> options & ONIG_OPTION_IGNORECASE ) )"		705527	0		=			
ANR	705994	Identifier	r		705527	0					
ANR	705995	CallExpression	"add_option ( reg , ( reg -> options & ONIG_OPTION_IGNORECASE ) )"		705527	1					
ANR	705996	Callee	add_option		705527	0					
ANR	705997	Identifier	add_option		705527	0					
ANR	705998	ArgumentList	reg		705527	1					
ANR	705999	Argument	reg		705527	0					
ANR	706000	Identifier	reg		705527	0					
ANR	706001	Argument	reg -> options & ONIG_OPTION_IGNORECASE		705527	1					
ANR	706002	BitAndExpression	reg -> options & ONIG_OPTION_IGNORECASE		705527	0		&			
ANR	706003	PtrMemberAccess	reg -> options		705527	0					
ANR	706004	Identifier	reg		705527	0					
ANR	706005	Identifier	options		705527	1					
ANR	706006	Identifier	ONIG_OPTION_IGNORECASE		705527	1					
ANR	706007	IfStatement	if ( r )		705527	3					
ANR	706008	Condition	r	1667:5:40017:40017	705527	0	True				
ANR	706009	Identifier	r		705527	0					
ANR	706010	ReturnStatement	return r ;	1667:8:40020:40028	705527	1	True				
ANR	706011	Identifier	r		705527	0					
ANR	706012	ExpressionStatement	"r = add_length ( reg , br -> nest_level )"	1668:1:40031:40066	705527	4	True				
ANR	706013	AssignmentExpression	"r = add_length ( reg , br -> nest_level )"		705527	0		=			
ANR	706014	Identifier	r		705527	0					
ANR	706015	CallExpression	"add_length ( reg , br -> nest_level )"		705527	1					
ANR	706016	Callee	add_length		705527	0					
ANR	706017	Identifier	add_length		705527	0					
ANR	706018	ArgumentList	reg		705527	1					
ANR	706019	Argument	reg		705527	0					
ANR	706020	Identifier	reg		705527	0					
ANR	706021	Argument	br -> nest_level		705527	1					
ANR	706022	PtrMemberAccess	br -> nest_level		705527	0					
ANR	706023	Identifier	br		705527	0					
ANR	706024	Identifier	nest_level		705527	1					
ANR	706025	IfStatement	if ( r )		705527	5					
ANR	706026	Condition	r	1669:5:40073:40073	705527	0	True				
ANR	706027	Identifier	r		705527	0					
ANR	706028	ReturnStatement	return r ;	1669:8:40076:40084	705527	1	True				
ANR	706029	Identifier	r		705527	0					
ANR	706030	GotoStatement	goto add_bacref_mems ;	1671:1:40088:40108	705527	6	True				
ANR	706031	Identifier	add_bacref_mems		705527	0					
ANR	706032	ElseStatement	else		705527	0					
ANR	706033	IfStatement	if ( br -> back_num == 1 )		705527	0					
ANR	706034	Condition	br -> back_num == 1	1675:10:40146:40162	705527	0	True				
ANR	706035	EqualityExpression	br -> back_num == 1		705527	0		==			
ANR	706036	PtrMemberAccess	br -> back_num		705527	0					
ANR	706037	Identifier	br		705527	0					
ANR	706038	Identifier	back_num		705527	1					
ANR	706039	PrimaryExpression	1		705527	1					
ANR	706040	CompoundStatement		93:29:2018:2018	705527	1					
ANR	706041	ExpressionStatement	n = br -> back_static [ 0 ]	1676:1:40168:40190	705527	0	True				
ANR	706042	AssignmentExpression	n = br -> back_static [ 0 ]		705527	0		=			
ANR	706043	Identifier	n		705527	0					
ANR	706044	ArrayIndexing	br -> back_static [ 0 ]		705527	1					
ANR	706045	PtrMemberAccess	br -> back_static		705527	0					
ANR	706046	Identifier	br		705527	0					
ANR	706047	Identifier	back_static		705527	1					
ANR	706048	PrimaryExpression	0		705527	1					
ANR	706049	IfStatement	if ( IS_IGNORECASE ( reg -> options ) )		705527	1					
ANR	706050	Condition	IS_IGNORECASE ( reg -> options )	1677:5:40197:40223	705527	0	True				
ANR	706051	CallExpression	IS_IGNORECASE ( reg -> options )		705527	0					
ANR	706052	Callee	IS_IGNORECASE		705527	0					
ANR	706053	Identifier	IS_IGNORECASE		705527	0					
ANR	706054	ArgumentList	reg -> options		705527	1					
ANR	706055	Argument	reg -> options		705527	0					
ANR	706056	PtrMemberAccess	reg -> options		705527	0					
ANR	706057	Identifier	reg		705527	0					
ANR	706058	Identifier	options		705527	1					
ANR	706059	CompoundStatement		95:34:2079:2079	705527	1					
ANR	706060	ExpressionStatement	"r = add_opcode ( reg , OP_BACKREFN_IC )"	1678:3:40231:40266	705527	0	True				
ANR	706061	AssignmentExpression	"r = add_opcode ( reg , OP_BACKREFN_IC )"		705527	0		=			
ANR	706062	Identifier	r		705527	0					
ANR	706063	CallExpression	"add_opcode ( reg , OP_BACKREFN_IC )"		705527	1					
ANR	706064	Callee	add_opcode		705527	0					
ANR	706065	Identifier	add_opcode		705527	0					
ANR	706066	ArgumentList	reg		705527	1					
ANR	706067	Argument	reg		705527	0					
ANR	706068	Identifier	reg		705527	0					
ANR	706069	Argument	OP_BACKREFN_IC		705527	1					
ANR	706070	Identifier	OP_BACKREFN_IC		705527	0					
ANR	706071	IfStatement	if ( r )		705527	1					
ANR	706072	Condition	r	1679:7:40275:40275	705527	0	True				
ANR	706073	Identifier	r		705527	0					
ANR	706074	ReturnStatement	return r ;	1679:10:40278:40286	705527	1	True				
ANR	706075	Identifier	r		705527	0					
ANR	706076	ExpressionStatement	"r = add_mem_num ( reg , n )"	1680:3:40291:40314	705527	2	True				
ANR	706077	AssignmentExpression	"r = add_mem_num ( reg , n )"		705527	0		=			
ANR	706078	Identifier	r		705527	0					
ANR	706079	CallExpression	"add_mem_num ( reg , n )"		705527	1					
ANR	706080	Callee	add_mem_num		705527	0					
ANR	706081	Identifier	add_mem_num		705527	0					
ANR	706082	ArgumentList	reg		705527	1					
ANR	706083	Argument	reg		705527	0					
ANR	706084	Identifier	reg		705527	0					
ANR	706085	Argument	n		705527	1					
ANR	706086	Identifier	n		705527	0					
ANR	706087	ElseStatement	else		705527	0					
ANR	706088	CompoundStatement		100:6:2178:2178	705527	0					
ANR	706089	SwitchStatement	switch ( n )		705527	0					
ANR	706090	Condition	n	1683:11:40338:40338	705527	0	True				
ANR	706091	Identifier	n		705527	0					
ANR	706092	CompoundStatement		101:14:2194:2194	705527	1					
ANR	706093	Label	case 1 :	1684:3:40346:40352	705527	0	True				
ANR	706094	ExpressionStatement	"r = add_opcode ( reg , OP_BACKREF1 )"	1684:12:40355:40387	705527	1	True				
ANR	706095	AssignmentExpression	"r = add_opcode ( reg , OP_BACKREF1 )"		705527	0		=			
ANR	706096	Identifier	r		705527	0					
ANR	706097	CallExpression	"add_opcode ( reg , OP_BACKREF1 )"		705527	1					
ANR	706098	Callee	add_opcode		705527	0					
ANR	706099	Identifier	add_opcode		705527	0					
ANR	706100	ArgumentList	reg		705527	1					
ANR	706101	Argument	reg		705527	0					
ANR	706102	Identifier	reg		705527	0					
ANR	706103	Argument	OP_BACKREF1		705527	1					
ANR	706104	Identifier	OP_BACKREF1		705527	0					
ANR	706105	BreakStatement	break ;	1684:46:40389:40394	705527	2	True				
ANR	706106	Label	case 2 :	1685:3:40399:40405	705527	3	True				
ANR	706107	ExpressionStatement	"r = add_opcode ( reg , OP_BACKREF2 )"	1685:12:40408:40440	705527	4	True				
ANR	706108	AssignmentExpression	"r = add_opcode ( reg , OP_BACKREF2 )"		705527	0		=			
ANR	706109	Identifier	r		705527	0					
ANR	706110	CallExpression	"add_opcode ( reg , OP_BACKREF2 )"		705527	1					
ANR	706111	Callee	add_opcode		705527	0					
ANR	706112	Identifier	add_opcode		705527	0					
ANR	706113	ArgumentList	reg		705527	1					
ANR	706114	Argument	reg		705527	0					
ANR	706115	Identifier	reg		705527	0					
ANR	706116	Argument	OP_BACKREF2		705527	1					
ANR	706117	Identifier	OP_BACKREF2		705527	0					
ANR	706118	BreakStatement	break ;	1685:46:40442:40447	705527	5	True				
ANR	706119	Label	default :	1686:3:40452:40459	705527	6	True				
ANR	706120	Identifier	default		705527	0					
ANR	706121	ExpressionStatement	"r = add_opcode ( reg , OP_BACKREFN )"	1687:5:40466:40498	705527	7	True				
ANR	706122	AssignmentExpression	"r = add_opcode ( reg , OP_BACKREFN )"		705527	0		=			
ANR	706123	Identifier	r		705527	0					
ANR	706124	CallExpression	"add_opcode ( reg , OP_BACKREFN )"		705527	1					
ANR	706125	Callee	add_opcode		705527	0					
ANR	706126	Identifier	add_opcode		705527	0					
ANR	706127	ArgumentList	reg		705527	1					
ANR	706128	Argument	reg		705527	0					
ANR	706129	Identifier	reg		705527	0					
ANR	706130	Argument	OP_BACKREFN		705527	1					
ANR	706131	Identifier	OP_BACKREFN		705527	0					
ANR	706132	IfStatement	if ( r )		705527	8					
ANR	706133	Condition	r	1688:9:40509:40509	705527	0	True				
ANR	706134	Identifier	r		705527	0					
ANR	706135	ReturnStatement	return r ;	1688:12:40512:40520	705527	1	True				
ANR	706136	Identifier	r		705527	0					
ANR	706137	ExpressionStatement	"r = add_mem_num ( reg , n )"	1689:5:40527:40550	705527	9	True				
ANR	706138	AssignmentExpression	"r = add_mem_num ( reg , n )"		705527	0		=			
ANR	706139	Identifier	r		705527	0					
ANR	706140	CallExpression	"add_mem_num ( reg , n )"		705527	1					
ANR	706141	Callee	add_mem_num		705527	0					
ANR	706142	Identifier	add_mem_num		705527	0					
ANR	706143	ArgumentList	reg		705527	1					
ANR	706144	Argument	reg		705527	0					
ANR	706145	Identifier	reg		705527	0					
ANR	706146	Argument	n		705527	1					
ANR	706147	Identifier	n		705527	0					
ANR	706148	BreakStatement	break ;	1690:5:40557:40562	705527	10	True				
ANR	706149	ElseStatement	else		705527	0					
ANR	706150	CompoundStatement		114:1:2455:2461	705527	0					
ANR	706151	IdentifierDeclStatement	int i ;	1695:1:40594:40599	705527	0	True				
ANR	706152	IdentifierDecl	i		705527	0					
ANR	706153	IdentifierDeclType	int		705527	0					
ANR	706154	Identifier	i		705527	1					
ANR	706155	IdentifierDeclStatement	int * p ;	1696:1:40602:40608	705527	1	True				
ANR	706156	IdentifierDecl	* p		705527	0					
ANR	706157	IdentifierDeclType	int *		705527	0					
ANR	706158	Identifier	p		705527	1					
ANR	706159	IfStatement	if ( IS_IGNORECASE ( reg -> options ) )		705527	2					
ANR	706160	Condition	IS_IGNORECASE ( reg -> options )	1698:12:40623:40649	705527	0	True				
ANR	706161	CallExpression	IS_IGNORECASE ( reg -> options )		705527	0					
ANR	706162	Callee	IS_IGNORECASE		705527	0					
ANR	706163	Identifier	IS_IGNORECASE		705527	0					
ANR	706164	ArgumentList	reg -> options		705527	1					
ANR	706165	Argument	reg -> options		705527	0					
ANR	706166	PtrMemberAccess	reg -> options		705527	0					
ANR	706167	Identifier	reg		705527	0					
ANR	706168	Identifier	options		705527	1					
ANR	706169	CompoundStatement		116:41:2505:2505	705527	1					
ANR	706170	ExpressionStatement	"r = add_opcode ( reg , OP_BACKREF_MULTI_IC )"	1699:10:40664:40704	705527	0	True				
ANR	706171	AssignmentExpression	"r = add_opcode ( reg , OP_BACKREF_MULTI_IC )"		705527	0		=			
ANR	706172	Identifier	r		705527	0					
ANR	706173	CallExpression	"add_opcode ( reg , OP_BACKREF_MULTI_IC )"		705527	1					
ANR	706174	Callee	add_opcode		705527	0					
ANR	706175	Identifier	add_opcode		705527	0					
ANR	706176	ArgumentList	reg		705527	1					
ANR	706177	Argument	reg		705527	0					
ANR	706178	Identifier	reg		705527	0					
ANR	706179	Argument	OP_BACKREF_MULTI_IC		705527	1					
ANR	706180	Identifier	OP_BACKREF_MULTI_IC		705527	0					
ANR	706181	ElseStatement	else		705527	0					
ANR	706182	CompoundStatement		119:13:2582:2582	705527	0					
ANR	706183	ExpressionStatement	"r = add_opcode ( reg , OP_BACKREF_MULTI )"	1702:10:40741:40778	705527	0	True				
ANR	706184	AssignmentExpression	"r = add_opcode ( reg , OP_BACKREF_MULTI )"		705527	0		=			
ANR	706185	Identifier	r		705527	0					
ANR	706186	CallExpression	"add_opcode ( reg , OP_BACKREF_MULTI )"		705527	1					
ANR	706187	Callee	add_opcode		705527	0					
ANR	706188	Identifier	add_opcode		705527	0					
ANR	706189	ArgumentList	reg		705527	1					
ANR	706190	Argument	reg		705527	0					
ANR	706191	Identifier	reg		705527	0					
ANR	706192	Argument	OP_BACKREF_MULTI		705527	1					
ANR	706193	Identifier	OP_BACKREF_MULTI		705527	0					
ANR	706194	IfStatement	if ( r )		705527	3					
ANR	706195	Condition	r	1704:5:40795:40795	705527	0	True				
ANR	706196	Identifier	r		705527	0					
ANR	706197	ReturnStatement	return r ;	1704:8:40798:40806	705527	1	True				
ANR	706198	Identifier	r		705527	0					
ANR	706199	Label	add_bacref_mems :	1707:6:40845:40860	705527	4	True				
ANR	706200	Identifier	add_bacref_mems		705527	0					
ANR	706201	ExpressionStatement	"r = add_length ( reg , br -> back_num )"	1709:1:40870:40903	705527	5	True				
ANR	706202	AssignmentExpression	"r = add_length ( reg , br -> back_num )"		705527	0		=			
ANR	706203	Identifier	r		705527	0					
ANR	706204	CallExpression	"add_length ( reg , br -> back_num )"		705527	1					
ANR	706205	Callee	add_length		705527	0					
ANR	706206	Identifier	add_length		705527	0					
ANR	706207	ArgumentList	reg		705527	1					
ANR	706208	Argument	reg		705527	0					
ANR	706209	Identifier	reg		705527	0					
ANR	706210	Argument	br -> back_num		705527	1					
ANR	706211	PtrMemberAccess	br -> back_num		705527	0					
ANR	706212	Identifier	br		705527	0					
ANR	706213	Identifier	back_num		705527	1					
ANR	706214	IfStatement	if ( r )		705527	6					
ANR	706215	Condition	r	1710:5:40910:40910	705527	0	True				
ANR	706216	Identifier	r		705527	0					
ANR	706217	ReturnStatement	return r ;	1710:8:40913:40921	705527	1	True				
ANR	706218	Identifier	r		705527	0					
ANR	706219	ExpressionStatement	p = BACKREFS_P ( br )	1711:1:40924:40942	705527	7	True				
ANR	706220	AssignmentExpression	p = BACKREFS_P ( br )		705527	0		=			
ANR	706221	Identifier	p		705527	0					
ANR	706222	CallExpression	BACKREFS_P ( br )		705527	1					
ANR	706223	Callee	BACKREFS_P		705527	0					
ANR	706224	Identifier	BACKREFS_P		705527	0					
ANR	706225	ArgumentList	br		705527	1					
ANR	706226	Argument	br		705527	0					
ANR	706227	Identifier	br		705527	0					
ANR	706228	ForStatement	for ( i = br -> back_num - 1 ; i >= 0 ; i -- )		705527	8					
ANR	706229	ForInit	i = br -> back_num - 1 ;	1712:6:40950:40970	705527	0	True				
ANR	706230	AssignmentExpression	i = br -> back_num - 1		705527	0		=			
ANR	706231	Identifier	i		705527	0					
ANR	706232	AdditiveExpression	br -> back_num - 1		705527	1		-			
ANR	706233	PtrMemberAccess	br -> back_num		705527	0					
ANR	706234	Identifier	br		705527	0					
ANR	706235	Identifier	back_num		705527	1					
ANR	706236	PrimaryExpression	1		705527	1					
ANR	706237	Condition	i >= 0	1712:28:40972:40977	705527	1	True				
ANR	706238	RelationalExpression	i >= 0		705527	0		>=			
ANR	706239	Identifier	i		705527	0					
ANR	706240	PrimaryExpression	0		705527	1					
ANR	706241	PostIncDecOperationExpression	i --	1712:36:40980:40982	705527	2	True				
ANR	706242	Identifier	i		705527	0					
ANR	706243	IncDec	--		705527	1					
ANR	706244	CompoundStatement		130:41:2838:2838	705527	3					
ANR	706245	ExpressionStatement	"r = add_mem_num ( reg , p [ i ] )"	1713:3:40990:41016	705527	0	True				
ANR	706246	AssignmentExpression	"r = add_mem_num ( reg , p [ i ] )"		705527	0		=			
ANR	706247	Identifier	r		705527	0					
ANR	706248	CallExpression	"add_mem_num ( reg , p [ i ] )"		705527	1					
ANR	706249	Callee	add_mem_num		705527	0					
ANR	706250	Identifier	add_mem_num		705527	0					
ANR	706251	ArgumentList	reg		705527	1					
ANR	706252	Argument	reg		705527	0					
ANR	706253	Identifier	reg		705527	0					
ANR	706254	Argument	p [ i ]		705527	1					
ANR	706255	ArrayIndexing	p [ i ]		705527	0					
ANR	706256	Identifier	p		705527	0					
ANR	706257	Identifier	i		705527	1					
ANR	706258	IfStatement	if ( r )		705527	1					
ANR	706259	Condition	r	1714:7:41025:41025	705527	0	True				
ANR	706260	Identifier	r		705527	0					
ANR	706261	ReturnStatement	return r ;	1714:10:41028:41036	705527	1	True				
ANR	706262	Identifier	r		705527	0					
ANR	706263	BreakStatement	break ;	1718:4:41059:41064	705527	20	True				
ANR	706264	Label	case NT_CALL :	1721:2:41092:41104	705527	21	True				
ANR	706265	Identifier	NT_CALL		705527	0					
ANR	706266	ExpressionStatement	"r = compile_call ( NCALL ( node ) , reg )"	1722:4:41110:41144	705527	22	True				
ANR	706267	AssignmentExpression	"r = compile_call ( NCALL ( node ) , reg )"		705527	0		=			
ANR	706268	Identifier	r		705527	0					
ANR	706269	CallExpression	"compile_call ( NCALL ( node ) , reg )"		705527	1					
ANR	706270	Callee	compile_call		705527	0					
ANR	706271	Identifier	compile_call		705527	0					
ANR	706272	ArgumentList	NCALL ( node )		705527	1					
ANR	706273	Argument	NCALL ( node )		705527	0					
ANR	706274	CallExpression	NCALL ( node )		705527	0					
ANR	706275	Callee	NCALL		705527	0					
ANR	706276	Identifier	NCALL		705527	0					
ANR	706277	ArgumentList	node		705527	1					
ANR	706278	Argument	node		705527	0					
ANR	706279	Identifier	node		705527	0					
ANR	706280	Argument	reg		705527	1					
ANR	706281	Identifier	reg		705527	0					
ANR	706282	BreakStatement	break ;	1723:4:41150:41155	705527	23	True				
ANR	706283	Label	case NT_QTFR :	1726:2:41167:41179	705527	24	True				
ANR	706284	Identifier	NT_QTFR		705527	0					
ANR	706285	ExpressionStatement	"r = compile_quantifier_node ( NQTFR ( node ) , reg )"	1727:4:41185:41230	705527	25	True				
ANR	706286	AssignmentExpression	"r = compile_quantifier_node ( NQTFR ( node ) , reg )"		705527	0		=			
ANR	706287	Identifier	r		705527	0					
ANR	706288	CallExpression	"compile_quantifier_node ( NQTFR ( node ) , reg )"		705527	1					
ANR	706289	Callee	compile_quantifier_node		705527	0					
ANR	706290	Identifier	compile_quantifier_node		705527	0					
ANR	706291	ArgumentList	NQTFR ( node )		705527	1					
ANR	706292	Argument	NQTFR ( node )		705527	0					
ANR	706293	CallExpression	NQTFR ( node )		705527	0					
ANR	706294	Callee	NQTFR		705527	0					
ANR	706295	Identifier	NQTFR		705527	0					
ANR	706296	ArgumentList	node		705527	1					
ANR	706297	Argument	node		705527	0					
ANR	706298	Identifier	node		705527	0					
ANR	706299	Argument	reg		705527	1					
ANR	706300	Identifier	reg		705527	0					
ANR	706301	BreakStatement	break ;	1728:4:41236:41241	705527	26	True				
ANR	706302	Label	case NT_ENCLOSE :	1730:2:41246:41261	705527	27	True				
ANR	706303	Identifier	NT_ENCLOSE		705527	0					
ANR	706304	ExpressionStatement	"r = compile_enclose_node ( NENCLOSE ( node ) , reg )"	1731:4:41267:41312	705527	28	True				
ANR	706305	AssignmentExpression	"r = compile_enclose_node ( NENCLOSE ( node ) , reg )"		705527	0		=			
ANR	706306	Identifier	r		705527	0					
ANR	706307	CallExpression	"compile_enclose_node ( NENCLOSE ( node ) , reg )"		705527	1					
ANR	706308	Callee	compile_enclose_node		705527	0					
ANR	706309	Identifier	compile_enclose_node		705527	0					
ANR	706310	ArgumentList	NENCLOSE ( node )		705527	1					
ANR	706311	Argument	NENCLOSE ( node )		705527	0					
ANR	706312	CallExpression	NENCLOSE ( node )		705527	0					
ANR	706313	Callee	NENCLOSE		705527	0					
ANR	706314	Identifier	NENCLOSE		705527	0					
ANR	706315	ArgumentList	node		705527	1					
ANR	706316	Argument	node		705527	0					
ANR	706317	Identifier	node		705527	0					
ANR	706318	Argument	reg		705527	1					
ANR	706319	Identifier	reg		705527	0					
ANR	706320	BreakStatement	break ;	1732:4:41318:41323	705527	29	True				
ANR	706321	Label	case NT_ANCHOR :	1734:2:41328:41342	705527	30	True				
ANR	706322	Identifier	NT_ANCHOR		705527	0					
ANR	706323	ExpressionStatement	"r = compile_anchor_node ( NANCHOR ( node ) , reg )"	1735:4:41348:41391	705527	31	True				
ANR	706324	AssignmentExpression	"r = compile_anchor_node ( NANCHOR ( node ) , reg )"		705527	0		=			
ANR	706325	Identifier	r		705527	0					
ANR	706326	CallExpression	"compile_anchor_node ( NANCHOR ( node ) , reg )"		705527	1					
ANR	706327	Callee	compile_anchor_node		705527	0					
ANR	706328	Identifier	compile_anchor_node		705527	0					
ANR	706329	ArgumentList	NANCHOR ( node )		705527	1					
ANR	706330	Argument	NANCHOR ( node )		705527	0					
ANR	706331	CallExpression	NANCHOR ( node )		705527	0					
ANR	706332	Callee	NANCHOR		705527	0					
ANR	706333	Identifier	NANCHOR		705527	0					
ANR	706334	ArgumentList	node		705527	1					
ANR	706335	Argument	node		705527	0					
ANR	706336	Identifier	node		705527	0					
ANR	706337	Argument	reg		705527	1					
ANR	706338	Identifier	reg		705527	0					
ANR	706339	BreakStatement	break ;	1736:4:41397:41402	705527	32	True				
ANR	706340	Label	default :	1738:2:41407:41414	705527	33	True				
ANR	706341	Identifier	default		705527	0					
ANR	706342	ExpressionStatement	"fprintf ( stderr , ""compile_tree: undefined node type %d\\n"" , NTYPE ( node ) )"	1740:4:41438:41508	705527	34	True				
ANR	706343	CallExpression	"fprintf ( stderr , ""compile_tree: undefined node type %d\\n"" , NTYPE ( node ) )"		705527	0					
ANR	706344	Callee	fprintf		705527	0					
ANR	706345	Identifier	fprintf		705527	0					
ANR	706346	ArgumentList	stderr		705527	1					
ANR	706347	Argument	stderr		705527	0					
ANR	706348	Identifier	stderr		705527	0					
ANR	706349	Argument	"""compile_tree: undefined node type %d\\n"""		705527	1					
ANR	706350	PrimaryExpression	"""compile_tree: undefined node type %d\\n"""		705527	0					
ANR	706351	Argument	NTYPE ( node )		705527	2					
ANR	706352	CallExpression	NTYPE ( node )		705527	0					
ANR	706353	Callee	NTYPE		705527	0					
ANR	706354	Identifier	NTYPE		705527	0					
ANR	706355	ArgumentList	node		705527	1					
ANR	706356	Argument	node		705527	0					
ANR	706357	Identifier	node		705527	0					
ANR	706358	BreakStatement	break ;	1742:4:41521:41526	705527	35	True				
ANR	706359	ReturnStatement	return r ;	1745:2:41535:41543	705527	3	True				
ANR	706360	Identifier	r		705527	0					
ANR	706361	ReturnType	static int		705527	1					
ANR	706362	Identifier	compile_tree		705527	2					
ANR	706363	ParameterList	"Node * node , regex_t * reg"		705527	3					
ANR	706364	Parameter	Node * node	1582:13:38120:38129	705527	0	True				
ANR	706365	ParameterType	Node *		705527	0					
ANR	706366	Identifier	node		705527	1					
ANR	706367	Parameter	regex_t * reg	1582:25:38132:38143	705527	1	True				
ANR	706368	ParameterType	regex_t *		705527	0					
ANR	706369	Identifier	reg		705527	1					
ANR	706370	CFGEntryNode	ENTRY		705527		True				
ANR	706371	CFGExitNode	EXIT		705527		True				
ANR	706372	Symbol	NCAR		705527						
ANR	706373	Symbol	br -> back_num		705527						
ANR	706374	Symbol	OP_ANYCHAR_ML		705527						
ANR	706375	Symbol	ONIG_OPTION_IGNORECASE		705527						
ANR	706376	Symbol	* br -> back_static		705527						
ANR	706377	Symbol	compile_string_node		705527						
ANR	706378	Symbol	type		705527						
ANR	706379	Symbol	NQTFR		705527						
ANR	706380	Symbol	NCCLASS		705527						
ANR	706381	Symbol	* NCTYPE		705527						
ANR	706382	Symbol	len		705527						
ANR	706383	Symbol	reg		705527						
ANR	706384	Symbol	* br		705527						
ANR	706385	Symbol	reg -> options		705527						
ANR	706386	Symbol	compile_cclass_node		705527						
ANR	706387	Symbol	add_opcode		705527						
ANR	706388	Symbol	SIZE_OP_JUMP		705527						
ANR	706389	Symbol	NCTYPE		705527						
ANR	706390	Symbol	OP_JUMP		705527						
ANR	706391	Symbol	NULL		705527						
ANR	706392	Symbol	NCDR		705527						
ANR	706393	Symbol	NSTR		705527						
ANR	706394	Symbol	OP_BACKREF1		705527						
ANR	706395	Symbol	compile_anchor_node		705527						
ANR	706396	Symbol	ONIGERR_TYPE_BUG		705527						
ANR	706397	Symbol	stderr		705527						
ANR	706398	Symbol	OP_BACKREF2		705527						
ANR	706399	Symbol	br -> back_static		705527						
ANR	706400	Symbol	OP_BACKREFN_IC		705527						
ANR	706401	Symbol	node		705527						
ANR	706402	Symbol	compile_string_raw_node		705527						
ANR	706403	Symbol	BACKREFS_P		705527						
ANR	706404	Symbol	OP_BACKREF_WITH_LEVEL		705527						
ANR	706405	Symbol	compile_call		705527						
ANR	706406	Symbol	* * br		705527						
ANR	706407	Symbol	compile_enclose_node		705527						
ANR	706408	Symbol	IS_NOT_NULL		705527						
ANR	706409	Symbol	NCTYPE ( node ) -> ctype		705527						
ANR	706410	Symbol	add_length		705527						
ANR	706411	Symbol	NCALL		705527						
ANR	706412	Symbol	OP_PUSH		705527						
ANR	706413	Symbol	OP_BACKREF_MULTI_IC		705527						
ANR	706414	Symbol	OP_BACKREFN		705527						
ANR	706415	Symbol	NSTRING_IS_RAW		705527						
ANR	706416	Symbol	add_mem_num		705527						
ANR	706417	Symbol	br		705527						
ANR	706418	Symbol	pos		705527						
ANR	706419	Symbol	NBREF		705527						
ANR	706420	Symbol	compile_quantifier_node		705527						
ANR	706421	Symbol	NENCLOSE		705527						
ANR	706422	Symbol	OP_WORD		705527						
ANR	706423	Symbol	OP_BACKREF_MULTI		705527						
ANR	706424	Symbol	op		705527						
ANR	706425	Symbol	add_opcode_rel_addr		705527						
ANR	706426	Symbol	compile_length_tree		705527						
ANR	706427	Symbol	SIZE_OP_PUSH		705527						
ANR	706428	Symbol	i		705527						
ANR	706429	Symbol	add_option		705527						
ANR	706430	Symbol	br -> nest_level		705527						
ANR	706431	Symbol	n		705527						
ANR	706432	Symbol	p		705527						
ANR	706433	Symbol	r		705527						
ANR	706434	Symbol	compile_tree		705527						
ANR	706435	Symbol	* i		705527						
ANR	706436	Symbol	OP_ANYCHAR		705527						
ANR	706437	Symbol	NCTYPE ( node ) -> not		705527						
ANR	706438	Symbol	IS_IGNORECASE		705527						
ANR	706439	Symbol	x		705527						
ANR	706440	Symbol	NANCHOR		705527						
ANR	706441	Symbol	IS_MULTILINE		705527						
ANR	706442	Symbol	NTYPE		705527						
ANR	706443	Symbol	OP_NOT_WORD		705527						
ANR	706444	Symbol	* p		705527						
ANR	706445	Symbol	reg -> used		705527						
ANR	706446	Symbol	* reg		705527						
ANR	706447	Symbol	IS_BACKREF_NEST_LEVEL		705527						
ANR	706448	Function	noname_disable_map	1750:0:41572:42711							
ANR	706449	FunctionDef	"noname_disable_map (Node * * plink , GroupNumRemap * map , int * counter)"		706448	0					
ANR	706450	CompoundStatement		1752:0:41650:42711	706448	0					
ANR	706451	IdentifierDeclStatement	int r = 0 ;	1753:2:41654:41663	706448	0	True				
ANR	706452	IdentifierDecl	r = 0		706448	0					
ANR	706453	IdentifierDeclType	int		706448	0					
ANR	706454	Identifier	r		706448	1					
ANR	706455	AssignmentExpression	r = 0		706448	2		=			
ANR	706456	Identifier	r		706448	0					
ANR	706457	PrimaryExpression	0		706448	1					
ANR	706458	IdentifierDeclStatement	Node * node = * plink ;	1754:2:41667:41686	706448	1	True				
ANR	706459	IdentifierDecl	* node = * plink		706448	0					
ANR	706460	IdentifierDeclType	Node *		706448	0					
ANR	706461	Identifier	node		706448	1					
ANR	706462	AssignmentExpression	* node = * plink		706448	2		=			
ANR	706463	Identifier	node		706448	0					
ANR	706464	UnaryOperationExpression	* plink		706448	1					
ANR	706465	UnaryOperator	*		706448	0					
ANR	706466	Identifier	plink		706448	1					
ANR	706467	SwitchStatement	switch ( NTYPE ( node ) )		706448	2					
ANR	706468	Condition	NTYPE ( node )	1756:10:41699:41709	706448	0	True				
ANR	706469	CallExpression	NTYPE ( node )		706448	0					
ANR	706470	Callee	NTYPE		706448	0					
ANR	706471	Identifier	NTYPE		706448	0					
ANR	706472	ArgumentList	node		706448	1					
ANR	706473	Argument	node		706448	0					
ANR	706474	Identifier	node		706448	0					
ANR	706475	CompoundStatement		5:23:61:61	706448	1					
ANR	706476	Label	case NT_LIST :	1757:2:41716:41728	706448	0	True				
ANR	706477	Identifier	NT_LIST		706448	0					
ANR	706478	Label	case NT_ALT :	1758:2:41732:41743	706448	1	True				
ANR	706479	Identifier	NT_ALT		706448	0					
ANR	706480	DoStatement	do		706448	2					
ANR	706481	CompoundStatement		8:7:101:101	706448	0					
ANR	706482	ExpressionStatement	"r = noname_disable_map ( & ( NCAR ( node ) ) , map , counter )"	1760:6:41760:41811	706448	0	True				
ANR	706483	AssignmentExpression	"r = noname_disable_map ( & ( NCAR ( node ) ) , map , counter )"		706448	0		=			
ANR	706484	Identifier	r		706448	0					
ANR	706485	CallExpression	"noname_disable_map ( & ( NCAR ( node ) ) , map , counter )"		706448	1					
ANR	706486	Callee	noname_disable_map		706448	0					
ANR	706487	Identifier	noname_disable_map		706448	0					
ANR	706488	ArgumentList	& ( NCAR ( node ) )		706448	1					
ANR	706489	Argument	& ( NCAR ( node ) )		706448	0					
ANR	706490	UnaryOperationExpression	& ( NCAR ( node ) )		706448	0					
ANR	706491	UnaryOperator	&		706448	0					
ANR	706492	CallExpression	NCAR ( node )		706448	1					
ANR	706493	Callee	NCAR		706448	0					
ANR	706494	Identifier	NCAR		706448	0					
ANR	706495	ArgumentList	node		706448	1					
ANR	706496	Argument	node		706448	0					
ANR	706497	Identifier	node		706448	0					
ANR	706498	Argument	map		706448	1					
ANR	706499	Identifier	map		706448	0					
ANR	706500	Argument	counter		706448	2					
ANR	706501	Identifier	counter		706448	0					
ANR	706502	Condition	r == 0 && IS_NOT_NULL ( node = NCDR ( node ) )	1761:13:41826:41865	706448	1	True				
ANR	706503	AndExpression	r == 0 && IS_NOT_NULL ( node = NCDR ( node ) )		706448	0		&&			
ANR	706504	EqualityExpression	r == 0		706448	0		==			
ANR	706505	Identifier	r		706448	0					
ANR	706506	PrimaryExpression	0		706448	1					
ANR	706507	CallExpression	IS_NOT_NULL ( node = NCDR ( node ) )		706448	1					
ANR	706508	Callee	IS_NOT_NULL		706448	0					
ANR	706509	Identifier	IS_NOT_NULL		706448	0					
ANR	706510	ArgumentList	node = NCDR ( node )		706448	1					
ANR	706511	Argument	node = NCDR ( node )		706448	0					
ANR	706512	AssignmentExpression	node = NCDR ( node )		706448	0		=			
ANR	706513	Identifier	node		706448	0					
ANR	706514	CallExpression	NCDR ( node )		706448	1					
ANR	706515	Callee	NCDR		706448	0					
ANR	706516	Identifier	NCDR		706448	0					
ANR	706517	ArgumentList	node		706448	1					
ANR	706518	Argument	node		706448	0					
ANR	706519	Identifier	node		706448	0					
ANR	706520	BreakStatement	break ;	1762:4:41873:41878	706448	3	True				
ANR	706521	Label	case NT_QTFR :	1764:2:41883:41895	706448	4	True				
ANR	706522	Identifier	NT_QTFR		706448	0					
ANR	706523	CompoundStatement		16:6:305:326	706448	5					
ANR	706524	IdentifierDeclStatement	Node * * ptarget = & ( NQTFR ( node ) -> target ) ;	1766:6:41909:41948	706448	0	True				
ANR	706525	IdentifierDecl	* * ptarget = & ( NQTFR ( node ) -> target )		706448	0					
ANR	706526	IdentifierDeclType	Node * *		706448	0					
ANR	706527	Identifier	ptarget		706448	1					
ANR	706528	AssignmentExpression	* * ptarget = & ( NQTFR ( node ) -> target )		706448	2		=			
ANR	706529	Identifier	ptarget		706448	0					
ANR	706530	UnaryOperationExpression	& ( NQTFR ( node ) -> target )		706448	1					
ANR	706531	UnaryOperator	&		706448	0					
ANR	706532	PtrMemberAccess	NQTFR ( node ) -> target		706448	1					
ANR	706533	CallExpression	NQTFR ( node )		706448	0					
ANR	706534	Callee	NQTFR		706448	0					
ANR	706535	Identifier	NQTFR		706448	0					
ANR	706536	ArgumentList	node		706448	1					
ANR	706537	Argument	node		706448	0					
ANR	706538	Identifier	node		706448	0					
ANR	706539	Identifier	target		706448	1					
ANR	706540	IdentifierDeclStatement	Node * old = * ptarget ;	1767:6:41956:41977	706448	1	True				
ANR	706541	IdentifierDecl	* old = * ptarget		706448	0					
ANR	706542	IdentifierDeclType	Node *		706448	0					
ANR	706543	Identifier	old		706448	1					
ANR	706544	AssignmentExpression	* old = * ptarget		706448	2		=			
ANR	706545	Identifier	old		706448	0					
ANR	706546	UnaryOperationExpression	* ptarget		706448	1					
ANR	706547	UnaryOperator	*		706448	0					
ANR	706548	Identifier	ptarget		706448	1					
ANR	706549	ExpressionStatement	"r = noname_disable_map ( ptarget , map , counter )"	1768:6:41985:42030	706448	2	True				
ANR	706550	AssignmentExpression	"r = noname_disable_map ( ptarget , map , counter )"		706448	0		=			
ANR	706551	Identifier	r		706448	0					
ANR	706552	CallExpression	"noname_disable_map ( ptarget , map , counter )"		706448	1					
ANR	706553	Callee	noname_disable_map		706448	0					
ANR	706554	Identifier	noname_disable_map		706448	0					
ANR	706555	ArgumentList	ptarget		706448	1					
ANR	706556	Argument	ptarget		706448	0					
ANR	706557	Identifier	ptarget		706448	0					
ANR	706558	Argument	map		706448	1					
ANR	706559	Identifier	map		706448	0					
ANR	706560	Argument	counter		706448	2					
ANR	706561	Identifier	counter		706448	0					
ANR	706562	IfStatement	if ( * ptarget != old && NTYPE ( * ptarget ) == NT_QTFR )		706448	3					
ANR	706563	Condition	* ptarget != old && NTYPE ( * ptarget ) == NT_QTFR	1769:10:42042:42086	706448	0	True				
ANR	706564	AndExpression	* ptarget != old && NTYPE ( * ptarget ) == NT_QTFR		706448	0		&&			
ANR	706565	EqualityExpression	* ptarget != old		706448	0		!=			
ANR	706566	UnaryOperationExpression	* ptarget		706448	0					
ANR	706567	UnaryOperator	*		706448	0					
ANR	706568	Identifier	ptarget		706448	1					
ANR	706569	Identifier	old		706448	1					
ANR	706570	EqualityExpression	NTYPE ( * ptarget ) == NT_QTFR		706448	1		==			
ANR	706571	CallExpression	NTYPE ( * ptarget )		706448	0					
ANR	706572	Callee	NTYPE		706448	0					
ANR	706573	Identifier	NTYPE		706448	0					
ANR	706574	ArgumentList	* ptarget		706448	1					
ANR	706575	Argument	* ptarget		706448	0					
ANR	706576	UnaryOperationExpression	* ptarget		706448	0					
ANR	706577	UnaryOperator	*		706448	0					
ANR	706578	Identifier	ptarget		706448	1					
ANR	706579	Identifier	NT_QTFR		706448	1					
ANR	706580	CompoundStatement		18:57:438:438	706448	1					
ANR	706581	ExpressionStatement	"onig_reduce_nested_quantifier ( node , * ptarget )"	1770:1:42092:42137	706448	0	True				
ANR	706582	CallExpression	"onig_reduce_nested_quantifier ( node , * ptarget )"		706448	0					
ANR	706583	Callee	onig_reduce_nested_quantifier		706448	0					
ANR	706584	Identifier	onig_reduce_nested_quantifier		706448	0					
ANR	706585	ArgumentList	node		706448	1					
ANR	706586	Argument	node		706448	0					
ANR	706587	Identifier	node		706448	0					
ANR	706588	Argument	* ptarget		706448	1					
ANR	706589	UnaryOperationExpression	* ptarget		706448	0					
ANR	706590	UnaryOperator	*		706448	0					
ANR	706591	Identifier	ptarget		706448	1					
ANR	706592	BreakStatement	break ;	1773:4:42157:42162	706448	6	True				
ANR	706593	Label	case NT_ENCLOSE :	1775:2:42167:42182	706448	7	True				
ANR	706594	Identifier	NT_ENCLOSE		706448	0					
ANR	706595	CompoundStatement		26:6:545:577	706448	8					
ANR	706596	IdentifierDeclStatement	EncloseNode * en = NENCLOSE ( node ) ;	1777:6:42196:42228	706448	0	True				
ANR	706597	IdentifierDecl	* en = NENCLOSE ( node )		706448	0					
ANR	706598	IdentifierDeclType	EncloseNode *		706448	0					
ANR	706599	Identifier	en		706448	1					
ANR	706600	AssignmentExpression	* en = NENCLOSE ( node )		706448	2		=			
ANR	706601	Identifier	en		706448	0					
ANR	706602	CallExpression	NENCLOSE ( node )		706448	1					
ANR	706603	Callee	NENCLOSE		706448	0					
ANR	706604	Identifier	NENCLOSE		706448	0					
ANR	706605	ArgumentList	node		706448	1					
ANR	706606	Argument	node		706448	0					
ANR	706607	Identifier	node		706448	0					
ANR	706608	IfStatement	if ( en -> type == ENCLOSE_MEMORY )		706448	1					
ANR	706609	Condition	en -> type == ENCLOSE_MEMORY	1778:10:42240:42265	706448	0	True				
ANR	706610	EqualityExpression	en -> type == ENCLOSE_MEMORY		706448	0		==			
ANR	706611	PtrMemberAccess	en -> type		706448	0					
ANR	706612	Identifier	en		706448	0					
ANR	706613	Identifier	type		706448	1					
ANR	706614	Identifier	ENCLOSE_MEMORY		706448	1					
ANR	706615	CompoundStatement		27:38:617:617	706448	1					
ANR	706616	IfStatement	if ( IS_ENCLOSE_NAMED_GROUP ( en ) )		706448	0					
ANR	706617	Condition	IS_ENCLOSE_NAMED_GROUP ( en )	1779:5:42275:42300	706448	0	True				
ANR	706618	CallExpression	IS_ENCLOSE_NAMED_GROUP ( en )		706448	0					
ANR	706619	Callee	IS_ENCLOSE_NAMED_GROUP		706448	0					
ANR	706620	Identifier	IS_ENCLOSE_NAMED_GROUP		706448	0					
ANR	706621	ArgumentList	en		706448	1					
ANR	706622	Argument	en		706448	0					
ANR	706623	Identifier	en		706448	0					
ANR	706624	CompoundStatement		28:33:652:652	706448	1					
ANR	706625	ExpressionStatement	( * counter ) ++	1780:3:42308:42320	706448	0	True				
ANR	706626	PostIncDecOperationExpression	( * counter ) ++		706448	0					
ANR	706627	UnaryOperationExpression	* counter		706448	0					
ANR	706628	UnaryOperator	*		706448	0					
ANR	706629	Identifier	counter		706448	1					
ANR	706630	IncDec	++		706448	1					
ANR	706631	ExpressionStatement	map [ en -> regnum ] . new_val = * counter	1781:3:42325:42359	706448	1	True				
ANR	706632	AssignmentExpression	map [ en -> regnum ] . new_val = * counter		706448	0		=			
ANR	706633	MemberAccess	map [ en -> regnum ] . new_val		706448	0					
ANR	706634	ArrayIndexing	map [ en -> regnum ]		706448	0					
ANR	706635	Identifier	map		706448	0					
ANR	706636	PtrMemberAccess	en -> regnum		706448	1					
ANR	706637	Identifier	en		706448	0					
ANR	706638	Identifier	regnum		706448	1					
ANR	706639	Identifier	new_val		706448	1					
ANR	706640	UnaryOperationExpression	* counter		706448	1					
ANR	706641	UnaryOperator	*		706448	0					
ANR	706642	Identifier	counter		706448	1					
ANR	706643	ExpressionStatement	en -> regnum = * counter	1782:3:42364:42385	706448	2	True				
ANR	706644	AssignmentExpression	en -> regnum = * counter		706448	0		=			
ANR	706645	PtrMemberAccess	en -> regnum		706448	0					
ANR	706646	Identifier	en		706448	0					
ANR	706647	Identifier	regnum		706448	1					
ANR	706648	UnaryOperationExpression	* counter		706448	1					
ANR	706649	UnaryOperator	*		706448	0					
ANR	706650	Identifier	counter		706448	1					
ANR	706651	ExpressionStatement	"r = noname_disable_map ( & ( en -> target ) , map , counter )"	1783:3:42390:42441	706448	3	True				
ANR	706652	AssignmentExpression	"r = noname_disable_map ( & ( en -> target ) , map , counter )"		706448	0		=			
ANR	706653	Identifier	r		706448	0					
ANR	706654	CallExpression	"noname_disable_map ( & ( en -> target ) , map , counter )"		706448	1					
ANR	706655	Callee	noname_disable_map		706448	0					
ANR	706656	Identifier	noname_disable_map		706448	0					
ANR	706657	ArgumentList	& ( en -> target )		706448	1					
ANR	706658	Argument	& ( en -> target )		706448	0					
ANR	706659	UnaryOperationExpression	& ( en -> target )		706448	0					
ANR	706660	UnaryOperator	&		706448	0					
ANR	706661	PtrMemberAccess	en -> target		706448	1					
ANR	706662	Identifier	en		706448	0					
ANR	706663	Identifier	target		706448	1					
ANR	706664	Argument	map		706448	1					
ANR	706665	Identifier	map		706448	0					
ANR	706666	Argument	counter		706448	2					
ANR	706667	Identifier	counter		706448	0					
ANR	706668	ElseStatement	else		706448	0					
ANR	706669	CompoundStatement		34:6:801:801	706448	0					
ANR	706670	ExpressionStatement	* plink = en -> target	1786:3:42457:42476	706448	0	True				
ANR	706671	AssignmentExpression	* plink = en -> target		706448	0		=			
ANR	706672	UnaryOperationExpression	* plink		706448	0					
ANR	706673	UnaryOperator	*		706448	0					
ANR	706674	Identifier	plink		706448	1					
ANR	706675	PtrMemberAccess	en -> target		706448	1					
ANR	706676	Identifier	en		706448	0					
ANR	706677	Identifier	target		706448	1					
ANR	706678	ExpressionStatement	en -> target = NULL_NODE	1787:3:42481:42503	706448	1	True				
ANR	706679	AssignmentExpression	en -> target = NULL_NODE		706448	0		=			
ANR	706680	PtrMemberAccess	en -> target		706448	0					
ANR	706681	Identifier	en		706448	0					
ANR	706682	Identifier	target		706448	1					
ANR	706683	Identifier	NULL_NODE		706448	1					
ANR	706684	ExpressionStatement	onig_node_free ( node )	1788:3:42508:42528	706448	2	True				
ANR	706685	CallExpression	onig_node_free ( node )		706448	0					
ANR	706686	Callee	onig_node_free		706448	0					
ANR	706687	Identifier	onig_node_free		706448	0					
ANR	706688	ArgumentList	node		706448	1					
ANR	706689	Argument	node		706448	0					
ANR	706690	Identifier	node		706448	0					
ANR	706691	ExpressionStatement	"r = noname_disable_map ( plink , map , counter )"	1789:3:42533:42576	706448	3	True				
ANR	706692	AssignmentExpression	"r = noname_disable_map ( plink , map , counter )"		706448	0		=			
ANR	706693	Identifier	r		706448	0					
ANR	706694	CallExpression	"noname_disable_map ( plink , map , counter )"		706448	1					
ANR	706695	Callee	noname_disable_map		706448	0					
ANR	706696	Identifier	noname_disable_map		706448	0					
ANR	706697	ArgumentList	plink		706448	1					
ANR	706698	Argument	plink		706448	0					
ANR	706699	Identifier	plink		706448	0					
ANR	706700	Argument	map		706448	1					
ANR	706701	Identifier	map		706448	0					
ANR	706702	Argument	counter		706448	2					
ANR	706703	Identifier	counter		706448	0					
ANR	706704	ElseStatement	else		706448	0					
ANR	706705	ExpressionStatement	"r = noname_disable_map ( & ( en -> target ) , map , counter )"	1793:1:42601:42652	706448	0	True				
ANR	706706	AssignmentExpression	"r = noname_disable_map ( & ( en -> target ) , map , counter )"		706448	0		=			
ANR	706707	Identifier	r		706448	0					
ANR	706708	CallExpression	"noname_disable_map ( & ( en -> target ) , map , counter )"		706448	1					
ANR	706709	Callee	noname_disable_map		706448	0					
ANR	706710	Identifier	noname_disable_map		706448	0					
ANR	706711	ArgumentList	& ( en -> target )		706448	1					
ANR	706712	Argument	& ( en -> target )		706448	0					
ANR	706713	UnaryOperationExpression	& ( en -> target )		706448	0					
ANR	706714	UnaryOperator	&		706448	0					
ANR	706715	PtrMemberAccess	en -> target		706448	1					
ANR	706716	Identifier	en		706448	0					
ANR	706717	Identifier	target		706448	1					
ANR	706718	Argument	map		706448	1					
ANR	706719	Identifier	map		706448	0					
ANR	706720	Argument	counter		706448	2					
ANR	706721	Identifier	counter		706448	0					
ANR	706722	BreakStatement	break ;	1795:4:42664:42669	706448	9	True				
ANR	706723	Label	default :	1797:2:42674:42681	706448	10	True				
ANR	706724	Identifier	default		706448	0					
ANR	706725	BreakStatement	break ;	1798:4:42687:42692	706448	11	True				
ANR	706726	ReturnStatement	return r ;	1801:2:42701:42709	706448	3	True				
ANR	706727	Identifier	r		706448	0					
ANR	706728	ReturnType	static int		706448	1					
ANR	706729	Identifier	noname_disable_map		706448	2					
ANR	706730	ParameterList	"Node * * plink , GroupNumRemap * map , int * counter"		706448	3					
ANR	706731	Parameter	Node * * plink	1751:19:41602:41613	706448	0	True				
ANR	706732	ParameterType	Node * *		706448	0					
ANR	706733	Identifier	plink		706448	1					
ANR	706734	Parameter	GroupNumRemap * map	1751:33:41616:41633	706448	1	True				
ANR	706735	ParameterType	GroupNumRemap *		706448	0					
ANR	706736	Identifier	map		706448	1					
ANR	706737	Parameter	int * counter	1751:53:41636:41647	706448	2	True				
ANR	706738	ParameterType	int *		706448	0					
ANR	706739	Identifier	counter		706448	1					
ANR	706740	CFGEntryNode	ENTRY		706448		True				
ANR	706741	CFGExitNode	EXIT		706448		True				
ANR	706742	Symbol	IS_NOT_NULL		706448						
ANR	706743	Symbol	* map		706448						
ANR	706744	Symbol	IS_ENCLOSE_NAMED_GROUP		706448						
ANR	706745	Symbol	* plink		706448						
ANR	706746	Symbol	NQTFR		706448						
ANR	706747	Symbol	* en		706448						
ANR	706748	Symbol	& en -> target		706448						
ANR	706749	Symbol	& NQTFR ( node ) -> target		706448						
ANR	706750	Symbol	* ptarget		706448						
ANR	706751	Symbol	map [ en -> regnum ] . new_val		706448						
ANR	706752	Symbol	NT_QTFR		706448						
ANR	706753	Symbol	NENCLOSE		706448						
ANR	706754	Symbol	ENCLOSE_MEMORY		706448						
ANR	706755	Symbol	en -> type		706448						
ANR	706756	Symbol	* * en		706448						
ANR	706757	Symbol	map		706448						
ANR	706758	Symbol	& NCAR		706448						
ANR	706759	Symbol	en -> regnum		706448						
ANR	706760	Symbol	old		706448						
ANR	706761	Symbol	NCDR		706448						
ANR	706762	Symbol	en		706448						
ANR	706763	Symbol	counter		706448						
ANR	706764	Symbol	* en -> regnum		706448						
ANR	706765	Symbol	node		706448						
ANR	706766	Symbol	noname_disable_map		706448						
ANR	706767	Symbol	* counter		706448						
ANR	706768	Symbol	r		706448						
ANR	706769	Symbol	plink		706448						
ANR	706770	Symbol	en -> target		706448						
ANR	706771	Symbol	ptarget		706448						
ANR	706772	Symbol	NTYPE		706448						
ANR	706773	Symbol	NULL_NODE		706448						
ANR	706774	Function	renumber_node_backref	1804:0:42714:43240							
ANR	706775	FunctionDef	"renumber_node_backref (Node * node , GroupNumRemap * map)"		706774	0					
ANR	706776	CompoundStatement		1806:0:42779:43240	706774	0					
ANR	706777	IdentifierDeclStatement	"int i , pos , n , old_num ;"	1807:2:42783:42805	706774	0	True				
ANR	706778	IdentifierDecl	i		706774	0					
ANR	706779	IdentifierDeclType	int		706774	0					
ANR	706780	Identifier	i		706774	1					
ANR	706781	IdentifierDecl	pos		706774	1					
ANR	706782	IdentifierDeclType	int		706774	0					
ANR	706783	Identifier	pos		706774	1					
ANR	706784	IdentifierDecl	n		706774	2					
ANR	706785	IdentifierDeclType	int		706774	0					
ANR	706786	Identifier	n		706774	1					
ANR	706787	IdentifierDecl	old_num		706774	3					
ANR	706788	IdentifierDeclType	int		706774	0					
ANR	706789	Identifier	old_num		706774	1					
ANR	706790	IdentifierDeclStatement	int * backs ;	1808:2:42809:42819	706774	1	True				
ANR	706791	IdentifierDecl	* backs		706774	0					
ANR	706792	IdentifierDeclType	int *		706774	0					
ANR	706793	Identifier	backs		706774	1					
ANR	706794	IdentifierDeclStatement	BRefNode * bn = NBREF ( node ) ;	1809:2:42823:42849	706774	2	True				
ANR	706795	IdentifierDecl	* bn = NBREF ( node )		706774	0					
ANR	706796	IdentifierDeclType	BRefNode *		706774	0					
ANR	706797	Identifier	bn		706774	1					
ANR	706798	AssignmentExpression	* bn = NBREF ( node )		706774	2		=			
ANR	706799	Identifier	bn		706774	0					
ANR	706800	CallExpression	NBREF ( node )		706774	1					
ANR	706801	Callee	NBREF		706774	0					
ANR	706802	Identifier	NBREF		706774	0					
ANR	706803	ArgumentList	node		706774	1					
ANR	706804	Argument	node		706774	0					
ANR	706805	Identifier	node		706774	0					
ANR	706806	IfStatement	if ( ! IS_BACKREF_NAME_REF ( bn ) )		706774	3					
ANR	706807	Condition	! IS_BACKREF_NAME_REF ( bn )	1811:6:42858:42882	706774	0	True				
ANR	706808	UnaryOperationExpression	! IS_BACKREF_NAME_REF ( bn )		706774	0					
ANR	706809	UnaryOperator	!		706774	0					
ANR	706810	CallExpression	IS_BACKREF_NAME_REF ( bn )		706774	1					
ANR	706811	Callee	IS_BACKREF_NAME_REF		706774	0					
ANR	706812	Identifier	IS_BACKREF_NAME_REF		706774	0					
ANR	706813	ArgumentList	bn		706774	1					
ANR	706814	Argument	bn		706774	0					
ANR	706815	Identifier	bn		706774	0					
ANR	706816	ReturnStatement	return ONIGERR_NUMBERED_BACKREF_OR_CALL_NOT_ALLOWED ;	1812:4:42889:42940	706774	1	True				
ANR	706817	Identifier	ONIGERR_NUMBERED_BACKREF_OR_CALL_NOT_ALLOWED		706774	0					
ANR	706818	ExpressionStatement	old_num = bn -> back_num	1814:2:42945:42967	706774	4	True				
ANR	706819	AssignmentExpression	old_num = bn -> back_num		706774	0		=			
ANR	706820	Identifier	old_num		706774	0					
ANR	706821	PtrMemberAccess	bn -> back_num		706774	1					
ANR	706822	Identifier	bn		706774	0					
ANR	706823	Identifier	back_num		706774	1					
ANR	706824	IfStatement	if ( IS_NULL ( bn -> back_dynamic ) )		706774	5					
ANR	706825	Condition	IS_NULL ( bn -> back_dynamic )	1815:6:42975:42999	706774	0	True				
ANR	706826	CallExpression	IS_NULL ( bn -> back_dynamic )		706774	0					
ANR	706827	Callee	IS_NULL		706774	0					
ANR	706828	Identifier	IS_NULL		706774	0					
ANR	706829	ArgumentList	bn -> back_dynamic		706774	1					
ANR	706830	Argument	bn -> back_dynamic		706774	0					
ANR	706831	PtrMemberAccess	bn -> back_dynamic		706774	0					
ANR	706832	Identifier	bn		706774	0					
ANR	706833	Identifier	back_dynamic		706774	1					
ANR	706834	ExpressionStatement	backs = bn -> back_static	1816:4:43006:43029	706774	1	True				
ANR	706835	AssignmentExpression	backs = bn -> back_static		706774	0		=			
ANR	706836	Identifier	backs		706774	0					
ANR	706837	PtrMemberAccess	bn -> back_static		706774	1					
ANR	706838	Identifier	bn		706774	0					
ANR	706839	Identifier	back_static		706774	1					
ANR	706840	ElseStatement	else		706774	0					
ANR	706841	ExpressionStatement	backs = bn -> back_dynamic	1818:4:43042:43066	706774	0	True				
ANR	706842	AssignmentExpression	backs = bn -> back_dynamic		706774	0		=			
ANR	706843	Identifier	backs		706774	0					
ANR	706844	PtrMemberAccess	bn -> back_dynamic		706774	1					
ANR	706845	Identifier	bn		706774	0					
ANR	706846	Identifier	back_dynamic		706774	1					
ANR	706847	ForStatement	"for ( i = 0 , pos = 0 ; i < old_num ; i ++ )"		706774	6					
ANR	706848	ForInit	"i = 0 , pos = 0 ;"	1820:7:43076:43090	706774	0	True				
ANR	706849	Expression	"i = 0 , pos = 0"		706774	0					
ANR	706850	AssignmentExpression	i = 0		706774	0		=			
ANR	706851	Identifier	i		706774	0					
ANR	706852	PrimaryExpression	0		706774	1					
ANR	706853	AssignmentExpression	pos = 0		706774	1		=			
ANR	706854	Identifier	pos		706774	0					
ANR	706855	PrimaryExpression	0		706774	1					
ANR	706856	Condition	i < old_num	1820:23:43092:43102	706774	1	True				
ANR	706857	RelationalExpression	i < old_num		706774	0		<			
ANR	706858	Identifier	i		706774	0					
ANR	706859	Identifier	old_num		706774	1					
ANR	706860	PostIncDecOperationExpression	i ++	1820:36:43105:43107	706774	2	True				
ANR	706861	Identifier	i		706774	0					
ANR	706862	IncDec	++		706774	1					
ANR	706863	CompoundStatement		15:41:330:330	706774	3					
ANR	706864	ExpressionStatement	n = map [ backs [ i ] ] . new_val	1821:4:43116:43141	706774	0	True				
ANR	706865	AssignmentExpression	n = map [ backs [ i ] ] . new_val		706774	0		=			
ANR	706866	Identifier	n		706774	0					
ANR	706867	MemberAccess	map [ backs [ i ] ] . new_val		706774	1					
ANR	706868	ArrayIndexing	map [ backs [ i ] ]		706774	0					
ANR	706869	Identifier	map		706774	0					
ANR	706870	ArrayIndexing	backs [ i ]		706774	1					
ANR	706871	Identifier	backs		706774	0					
ANR	706872	Identifier	i		706774	1					
ANR	706873	Identifier	new_val		706774	1					
ANR	706874	IfStatement	if ( n > 0 )		706774	1					
ANR	706875	Condition	n > 0	1822:8:43151:43155	706774	0	True				
ANR	706876	RelationalExpression	n > 0		706774	0		>			
ANR	706877	Identifier	n		706774	0					
ANR	706878	PrimaryExpression	0		706774	1					
ANR	706879	CompoundStatement		17:15:378:378	706774	1					
ANR	706880	ExpressionStatement	backs [ pos ] = n	1823:6:43166:43180	706774	0	True				
ANR	706881	AssignmentExpression	backs [ pos ] = n		706774	0		=			
ANR	706882	ArrayIndexing	backs [ pos ]		706774	0					
ANR	706883	Identifier	backs		706774	0					
ANR	706884	Identifier	pos		706774	1					
ANR	706885	Identifier	n		706774	1					
ANR	706886	ExpressionStatement	pos ++	1824:6:43188:43193	706774	1	True				
ANR	706887	PostIncDecOperationExpression	pos ++		706774	0					
ANR	706888	Identifier	pos		706774	0					
ANR	706889	IncDec	++		706774	1					
ANR	706890	ExpressionStatement	bn -> back_num = pos	1828:2:43208:43226	706774	7	True				
ANR	706891	AssignmentExpression	bn -> back_num = pos		706774	0		=			
ANR	706892	PtrMemberAccess	bn -> back_num		706774	0					
ANR	706893	Identifier	bn		706774	0					
ANR	706894	Identifier	back_num		706774	1					
ANR	706895	Identifier	pos		706774	1					
ANR	706896	ReturnStatement	return 0 ;	1829:2:43230:43238	706774	8	True				
ANR	706897	PrimaryExpression	0		706774	0					
ANR	706898	ReturnType	static int		706774	1					
ANR	706899	Identifier	renumber_node_backref		706774	2					
ANR	706900	ParameterList	"Node * node , GroupNumRemap * map"		706774	3					
ANR	706901	Parameter	Node * node	1805:22:42747:42756	706774	0	True				
ANR	706902	ParameterType	Node *		706774	0					
ANR	706903	Identifier	node		706774	1					
ANR	706904	Parameter	GroupNumRemap * map	1805:34:42759:42776	706774	1	True				
ANR	706905	ParameterType	GroupNumRemap *		706774	0					
ANR	706906	Identifier	map		706774	1					
ANR	706907	CFGEntryNode	ENTRY		706774		True				
ANR	706908	CFGExitNode	EXIT		706774		True				
ANR	706909	Symbol	* * i		706774						
ANR	706910	Symbol	old_num		706774						
ANR	706911	Symbol	* backs		706774						
ANR	706912	Symbol	* map		706774						
ANR	706913	Symbol	i		706774						
ANR	706914	Symbol	bn -> back_num		706774						
ANR	706915	Symbol	bn -> back_static		706774						
ANR	706916	Symbol	bn		706774						
ANR	706917	Symbol	n		706774						
ANR	706918	Symbol	node		706774						
ANR	706919	Symbol	* bn		706774						
ANR	706920	Symbol	* * backs		706774						
ANR	706921	Symbol	* i		706774						
ANR	706922	Symbol	IS_NULL		706774						
ANR	706923	Symbol	pos		706774						
ANR	706924	Symbol	NBREF		706774						
ANR	706925	Symbol	ONIGERR_NUMBERED_BACKREF_OR_CALL_NOT_ALLOWED		706774						
ANR	706926	Symbol	IS_BACKREF_NAME_REF		706774						
ANR	706927	Symbol	bn -> back_dynamic		706774						
ANR	706928	Symbol	map [ backs [ i ] ] . new_val		706774						
ANR	706929	Symbol	map		706774						
ANR	706930	Symbol	backs		706774						
ANR	706931	Symbol	* pos		706774						
ANR	706932	Function	renumber_by_map	1832:0:43243:43766							
ANR	706933	FunctionDef	"renumber_by_map (Node * node , GroupNumRemap * map)"		706932	0					
ANR	706934	CompoundStatement		1834:0:43302:43766	706932	0					
ANR	706935	IdentifierDeclStatement	int r = 0 ;	1835:2:43306:43315	706932	0	True				
ANR	706936	IdentifierDecl	r = 0		706932	0					
ANR	706937	IdentifierDeclType	int		706932	0					
ANR	706938	Identifier	r		706932	1					
ANR	706939	AssignmentExpression	r = 0		706932	2		=			
ANR	706940	Identifier	r		706932	0					
ANR	706941	PrimaryExpression	0		706932	1					
ANR	706942	SwitchStatement	switch ( NTYPE ( node ) )		706932	1					
ANR	706943	Condition	NTYPE ( node )	1837:10:43328:43338	706932	0	True				
ANR	706944	CallExpression	NTYPE ( node )		706932	0					
ANR	706945	Callee	NTYPE		706932	0					
ANR	706946	Identifier	NTYPE		706932	0					
ANR	706947	ArgumentList	node		706932	1					
ANR	706948	Argument	node		706932	0					
ANR	706949	Identifier	node		706932	0					
ANR	706950	CompoundStatement		4:23:38:38	706932	1					
ANR	706951	Label	case NT_LIST :	1838:2:43345:43357	706932	0	True				
ANR	706952	Identifier	NT_LIST		706932	0					
ANR	706953	Label	case NT_ALT :	1839:2:43361:43372	706932	1	True				
ANR	706954	Identifier	NT_ALT		706932	0					
ANR	706955	DoStatement	do		706932	2					
ANR	706956	CompoundStatement		7:7:78:78	706932	0					
ANR	706957	ExpressionStatement	"r = renumber_by_map ( NCAR ( node ) , map )"	1841:6:43389:43425	706932	0	True				
ANR	706958	AssignmentExpression	"r = renumber_by_map ( NCAR ( node ) , map )"		706932	0		=			
ANR	706959	Identifier	r		706932	0					
ANR	706960	CallExpression	"renumber_by_map ( NCAR ( node ) , map )"		706932	1					
ANR	706961	Callee	renumber_by_map		706932	0					
ANR	706962	Identifier	renumber_by_map		706932	0					
ANR	706963	ArgumentList	NCAR ( node )		706932	1					
ANR	706964	Argument	NCAR ( node )		706932	0					
ANR	706965	CallExpression	NCAR ( node )		706932	0					
ANR	706966	Callee	NCAR		706932	0					
ANR	706967	Identifier	NCAR		706932	0					
ANR	706968	ArgumentList	node		706932	1					
ANR	706969	Argument	node		706932	0					
ANR	706970	Identifier	node		706932	0					
ANR	706971	Argument	map		706932	1					
ANR	706972	Identifier	map		706932	0					
ANR	706973	Condition	r == 0 && IS_NOT_NULL ( node = NCDR ( node ) )	1842:13:43440:43479	706932	1	True				
ANR	706974	AndExpression	r == 0 && IS_NOT_NULL ( node = NCDR ( node ) )		706932	0		&&			
ANR	706975	EqualityExpression	r == 0		706932	0		==			
ANR	706976	Identifier	r		706932	0					
ANR	706977	PrimaryExpression	0		706932	1					
ANR	706978	CallExpression	IS_NOT_NULL ( node = NCDR ( node ) )		706932	1					
ANR	706979	Callee	IS_NOT_NULL		706932	0					
ANR	706980	Identifier	IS_NOT_NULL		706932	0					
ANR	706981	ArgumentList	node = NCDR ( node )		706932	1					
ANR	706982	Argument	node = NCDR ( node )		706932	0					
ANR	706983	AssignmentExpression	node = NCDR ( node )		706932	0		=			
ANR	706984	Identifier	node		706932	0					
ANR	706985	CallExpression	NCDR ( node )		706932	1					
ANR	706986	Callee	NCDR		706932	0					
ANR	706987	Identifier	NCDR		706932	0					
ANR	706988	ArgumentList	node		706932	1					
ANR	706989	Argument	node		706932	0					
ANR	706990	Identifier	node		706932	0					
ANR	706991	BreakStatement	break ;	1843:4:43487:43492	706932	3	True				
ANR	706992	Label	case NT_QTFR :	1844:2:43496:43508	706932	4	True				
ANR	706993	Identifier	NT_QTFR		706932	0					
ANR	706994	ExpressionStatement	"r = renumber_by_map ( NQTFR ( node ) -> target , map )"	1845:4:43514:43559	706932	5	True				
ANR	706995	AssignmentExpression	"r = renumber_by_map ( NQTFR ( node ) -> target , map )"		706932	0		=			
ANR	706996	Identifier	r		706932	0					
ANR	706997	CallExpression	"renumber_by_map ( NQTFR ( node ) -> target , map )"		706932	1					
ANR	706998	Callee	renumber_by_map		706932	0					
ANR	706999	Identifier	renumber_by_map		706932	0					
ANR	707000	ArgumentList	NQTFR ( node ) -> target		706932	1					
ANR	707001	Argument	NQTFR ( node ) -> target		706932	0					
ANR	707002	PtrMemberAccess	NQTFR ( node ) -> target		706932	0					
ANR	707003	CallExpression	NQTFR ( node )		706932	0					
ANR	707004	Callee	NQTFR		706932	0					
ANR	707005	Identifier	NQTFR		706932	0					
ANR	707006	ArgumentList	node		706932	1					
ANR	707007	Argument	node		706932	0					
ANR	707008	Identifier	node		706932	0					
ANR	707009	Identifier	target		706932	1					
ANR	707010	Argument	map		706932	1					
ANR	707011	Identifier	map		706932	0					
ANR	707012	BreakStatement	break ;	1846:4:43565:43570	706932	6	True				
ANR	707013	Label	case NT_ENCLOSE :	1847:2:43574:43589	706932	7	True				
ANR	707014	Identifier	NT_ENCLOSE		706932	0					
ANR	707015	ExpressionStatement	"r = renumber_by_map ( NENCLOSE ( node ) -> target , map )"	1848:4:43595:43643	706932	8	True				
ANR	707016	AssignmentExpression	"r = renumber_by_map ( NENCLOSE ( node ) -> target , map )"		706932	0		=			
ANR	707017	Identifier	r		706932	0					
ANR	707018	CallExpression	"renumber_by_map ( NENCLOSE ( node ) -> target , map )"		706932	1					
ANR	707019	Callee	renumber_by_map		706932	0					
ANR	707020	Identifier	renumber_by_map		706932	0					
ANR	707021	ArgumentList	NENCLOSE ( node ) -> target		706932	1					
ANR	707022	Argument	NENCLOSE ( node ) -> target		706932	0					
ANR	707023	PtrMemberAccess	NENCLOSE ( node ) -> target		706932	0					
ANR	707024	CallExpression	NENCLOSE ( node )		706932	0					
ANR	707025	Callee	NENCLOSE		706932	0					
ANR	707026	Identifier	NENCLOSE		706932	0					
ANR	707027	ArgumentList	node		706932	1					
ANR	707028	Argument	node		706932	0					
ANR	707029	Identifier	node		706932	0					
ANR	707030	Identifier	target		706932	1					
ANR	707031	Argument	map		706932	1					
ANR	707032	Identifier	map		706932	0					
ANR	707033	BreakStatement	break ;	1849:4:43649:43654	706932	9	True				
ANR	707034	Label	case NT_BREF :	1851:2:43659:43671	706932	10	True				
ANR	707035	Identifier	NT_BREF		706932	0					
ANR	707036	ExpressionStatement	"r = renumber_node_backref ( node , map )"	1852:4:43677:43713	706932	11	True				
ANR	707037	AssignmentExpression	"r = renumber_node_backref ( node , map )"		706932	0		=			
ANR	707038	Identifier	r		706932	0					
ANR	707039	CallExpression	"renumber_node_backref ( node , map )"		706932	1					
ANR	707040	Callee	renumber_node_backref		706932	0					
ANR	707041	Identifier	renumber_node_backref		706932	0					
ANR	707042	ArgumentList	node		706932	1					
ANR	707043	Argument	node		706932	0					
ANR	707044	Identifier	node		706932	0					
ANR	707045	Argument	map		706932	1					
ANR	707046	Identifier	map		706932	0					
ANR	707047	BreakStatement	break ;	1853:4:43719:43724	706932	12	True				
ANR	707048	Label	default :	1855:2:43729:43736	706932	13	True				
ANR	707049	Identifier	default		706932	0					
ANR	707050	BreakStatement	break ;	1856:4:43742:43747	706932	14	True				
ANR	707051	ReturnStatement	return r ;	1859:2:43756:43764	706932	2	True				
ANR	707052	Identifier	r		706932	0					
ANR	707053	ReturnType	static int		706932	1					
ANR	707054	Identifier	renumber_by_map		706932	2					
ANR	707055	ParameterList	"Node * node , GroupNumRemap * map"		706932	3					
ANR	707056	Parameter	Node * node	1833:16:43270:43279	706932	0	True				
ANR	707057	ParameterType	Node *		706932	0					
ANR	707058	Identifier	node		706932	1					
ANR	707059	Parameter	GroupNumRemap * map	1833:28:43282:43299	706932	1	True				
ANR	707060	ParameterType	GroupNumRemap *		706932	0					
ANR	707061	Identifier	map		706932	1					
ANR	707062	CFGEntryNode	ENTRY		706932		True				
ANR	707063	CFGExitNode	EXIT		706932		True				
ANR	707064	Symbol	renumber_by_map		706932						
ANR	707065	Symbol	NQTFR ( node ) -> target		706932						
ANR	707066	Symbol	IS_NOT_NULL		706932						
ANR	707067	Symbol	NCAR		706932						
ANR	707068	Symbol	* NENCLOSE		706932						
ANR	707069	Symbol	NCDR		706932						
ANR	707070	Symbol	NQTFR		706932						
ANR	707071	Symbol	NENCLOSE ( node ) -> target		706932						
ANR	707072	Symbol	node		706932						
ANR	707073	Symbol	r		706932						
ANR	707074	Symbol	* NQTFR		706932						
ANR	707075	Symbol	NENCLOSE		706932						
ANR	707076	Symbol	renumber_node_backref		706932						
ANR	707077	Symbol	NTYPE		706932						
ANR	707078	Symbol	map		706932						
ANR	707079	Function	numbered_ref_check	1862:0:43769:44330							
ANR	707080	FunctionDef	numbered_ref_check (Node * node)		707079	0					
ANR	707081	CompoundStatement		1864:0:43811:44330	707079	0					
ANR	707082	IdentifierDeclStatement	int r = 0 ;	1865:2:43815:43824	707079	0	True				
ANR	707083	IdentifierDecl	r = 0		707079	0					
ANR	707084	IdentifierDeclType	int		707079	0					
ANR	707085	Identifier	r		707079	1					
ANR	707086	AssignmentExpression	r = 0		707079	2		=			
ANR	707087	Identifier	r		707079	0					
ANR	707088	PrimaryExpression	0		707079	1					
ANR	707089	SwitchStatement	switch ( NTYPE ( node ) )		707079	1					
ANR	707090	Condition	NTYPE ( node )	1867:10:43837:43847	707079	0	True				
ANR	707091	CallExpression	NTYPE ( node )		707079	0					
ANR	707092	Callee	NTYPE		707079	0					
ANR	707093	Identifier	NTYPE		707079	0					
ANR	707094	ArgumentList	node		707079	1					
ANR	707095	Argument	node		707079	0					
ANR	707096	Identifier	node		707079	0					
ANR	707097	CompoundStatement		4:23:38:38	707079	1					
ANR	707098	Label	case NT_LIST :	1868:2:43854:43866	707079	0	True				
ANR	707099	Identifier	NT_LIST		707079	0					
ANR	707100	Label	case NT_ALT :	1869:2:43870:43881	707079	1	True				
ANR	707101	Identifier	NT_ALT		707079	0					
ANR	707102	DoStatement	do		707079	2					
ANR	707103	CompoundStatement		7:7:78:78	707079	0					
ANR	707104	ExpressionStatement	r = numbered_ref_check ( NCAR ( node ) )	1871:6:43898:43932	707079	0	True				
ANR	707105	AssignmentExpression	r = numbered_ref_check ( NCAR ( node ) )		707079	0		=			
ANR	707106	Identifier	r		707079	0					
ANR	707107	CallExpression	numbered_ref_check ( NCAR ( node ) )		707079	1					
ANR	707108	Callee	numbered_ref_check		707079	0					
ANR	707109	Identifier	numbered_ref_check		707079	0					
ANR	707110	ArgumentList	NCAR ( node )		707079	1					
ANR	707111	Argument	NCAR ( node )		707079	0					
ANR	707112	CallExpression	NCAR ( node )		707079	0					
ANR	707113	Callee	NCAR		707079	0					
ANR	707114	Identifier	NCAR		707079	0					
ANR	707115	ArgumentList	node		707079	1					
ANR	707116	Argument	node		707079	0					
ANR	707117	Identifier	node		707079	0					
ANR	707118	Condition	r == 0 && IS_NOT_NULL ( node = NCDR ( node ) )	1872:13:43947:43986	707079	1	True				
ANR	707119	AndExpression	r == 0 && IS_NOT_NULL ( node = NCDR ( node ) )		707079	0		&&			
ANR	707120	EqualityExpression	r == 0		707079	0		==			
ANR	707121	Identifier	r		707079	0					
ANR	707122	PrimaryExpression	0		707079	1					
ANR	707123	CallExpression	IS_NOT_NULL ( node = NCDR ( node ) )		707079	1					
ANR	707124	Callee	IS_NOT_NULL		707079	0					
ANR	707125	Identifier	IS_NOT_NULL		707079	0					
ANR	707126	ArgumentList	node = NCDR ( node )		707079	1					
ANR	707127	Argument	node = NCDR ( node )		707079	0					
ANR	707128	AssignmentExpression	node = NCDR ( node )		707079	0		=			
ANR	707129	Identifier	node		707079	0					
ANR	707130	CallExpression	NCDR ( node )		707079	1					
ANR	707131	Callee	NCDR		707079	0					
ANR	707132	Identifier	NCDR		707079	0					
ANR	707133	ArgumentList	node		707079	1					
ANR	707134	Argument	node		707079	0					
ANR	707135	Identifier	node		707079	0					
ANR	707136	BreakStatement	break ;	1873:4:43994:43999	707079	3	True				
ANR	707137	Label	case NT_QTFR :	1874:2:44003:44015	707079	4	True				
ANR	707138	Identifier	NT_QTFR		707079	0					
ANR	707139	ExpressionStatement	r = numbered_ref_check ( NQTFR ( node ) -> target )	1875:4:44021:44064	707079	5	True				
ANR	707140	AssignmentExpression	r = numbered_ref_check ( NQTFR ( node ) -> target )		707079	0		=			
ANR	707141	Identifier	r		707079	0					
ANR	707142	CallExpression	numbered_ref_check ( NQTFR ( node ) -> target )		707079	1					
ANR	707143	Callee	numbered_ref_check		707079	0					
ANR	707144	Identifier	numbered_ref_check		707079	0					
ANR	707145	ArgumentList	NQTFR ( node ) -> target		707079	1					
ANR	707146	Argument	NQTFR ( node ) -> target		707079	0					
ANR	707147	PtrMemberAccess	NQTFR ( node ) -> target		707079	0					
ANR	707148	CallExpression	NQTFR ( node )		707079	0					
ANR	707149	Callee	NQTFR		707079	0					
ANR	707150	Identifier	NQTFR		707079	0					
ANR	707151	ArgumentList	node		707079	1					
ANR	707152	Argument	node		707079	0					
ANR	707153	Identifier	node		707079	0					
ANR	707154	Identifier	target		707079	1					
ANR	707155	BreakStatement	break ;	1876:4:44070:44075	707079	6	True				
ANR	707156	Label	case NT_ENCLOSE :	1877:2:44079:44094	707079	7	True				
ANR	707157	Identifier	NT_ENCLOSE		707079	0					
ANR	707158	ExpressionStatement	r = numbered_ref_check ( NENCLOSE ( node ) -> target )	1878:4:44100:44146	707079	8	True				
ANR	707159	AssignmentExpression	r = numbered_ref_check ( NENCLOSE ( node ) -> target )		707079	0		=			
ANR	707160	Identifier	r		707079	0					
ANR	707161	CallExpression	numbered_ref_check ( NENCLOSE ( node ) -> target )		707079	1					
ANR	707162	Callee	numbered_ref_check		707079	0					
ANR	707163	Identifier	numbered_ref_check		707079	0					
ANR	707164	ArgumentList	NENCLOSE ( node ) -> target		707079	1					
ANR	707165	Argument	NENCLOSE ( node ) -> target		707079	0					
ANR	707166	PtrMemberAccess	NENCLOSE ( node ) -> target		707079	0					
ANR	707167	CallExpression	NENCLOSE ( node )		707079	0					
ANR	707168	Callee	NENCLOSE		707079	0					
ANR	707169	Identifier	NENCLOSE		707079	0					
ANR	707170	ArgumentList	node		707079	1					
ANR	707171	Argument	node		707079	0					
ANR	707172	Identifier	node		707079	0					
ANR	707173	Identifier	target		707079	1					
ANR	707174	BreakStatement	break ;	1879:4:44152:44157	707079	9	True				
ANR	707175	Label	case NT_BREF :	1881:2:44162:44174	707079	10	True				
ANR	707176	Identifier	NT_BREF		707079	0					
ANR	707177	IfStatement	if ( ! IS_BACKREF_NAME_REF ( NBREF ( node ) ) )		707079	11					
ANR	707178	Condition	! IS_BACKREF_NAME_REF ( NBREF ( node ) )	1882:8:44184:44217	707079	0	True				
ANR	707179	UnaryOperationExpression	! IS_BACKREF_NAME_REF ( NBREF ( node ) )		707079	0					
ANR	707180	UnaryOperator	!		707079	0					
ANR	707181	CallExpression	IS_BACKREF_NAME_REF ( NBREF ( node ) )		707079	1					
ANR	707182	Callee	IS_BACKREF_NAME_REF		707079	0					
ANR	707183	Identifier	IS_BACKREF_NAME_REF		707079	0					
ANR	707184	ArgumentList	NBREF ( node )		707079	1					
ANR	707185	Argument	NBREF ( node )		707079	0					
ANR	707186	CallExpression	NBREF ( node )		707079	0					
ANR	707187	Callee	NBREF		707079	0					
ANR	707188	Identifier	NBREF		707079	0					
ANR	707189	ArgumentList	node		707079	1					
ANR	707190	Argument	node		707079	0					
ANR	707191	Identifier	node		707079	0					
ANR	707192	ReturnStatement	return ONIGERR_NUMBERED_BACKREF_OR_CALL_NOT_ALLOWED ;	1883:6:44226:44277	707079	1	True				
ANR	707193	Identifier	ONIGERR_NUMBERED_BACKREF_OR_CALL_NOT_ALLOWED		707079	0					
ANR	707194	BreakStatement	break ;	1884:4:44283:44288	707079	12	True				
ANR	707195	Label	default :	1886:2:44293:44300	707079	13	True				
ANR	707196	Identifier	default		707079	0					
ANR	707197	BreakStatement	break ;	1887:4:44306:44311	707079	14	True				
ANR	707198	ReturnStatement	return r ;	1890:2:44320:44328	707079	2	True				
ANR	707199	Identifier	r		707079	0					
ANR	707200	ReturnType	static int		707079	1					
ANR	707201	Identifier	numbered_ref_check		707079	2					
ANR	707202	ParameterList	Node * node		707079	3					
ANR	707203	Parameter	Node * node	1863:19:43799:43808	707079	0	True				
ANR	707204	ParameterType	Node *		707079	0					
ANR	707205	Identifier	node		707079	1					
ANR	707206	CFGEntryNode	ENTRY		707079		True				
ANR	707207	CFGExitNode	EXIT		707079		True				
ANR	707208	Symbol	NQTFR ( node ) -> target		707079						
ANR	707209	Symbol	IS_NOT_NULL		707079						
ANR	707210	Symbol	NCAR		707079						
ANR	707211	Symbol	* NENCLOSE		707079						
ANR	707212	Symbol	NCDR		707079						
ANR	707213	Symbol	NQTFR		707079						
ANR	707214	Symbol	NENCLOSE ( node ) -> target		707079						
ANR	707215	Symbol	node		707079						
ANR	707216	Symbol	r		707079						
ANR	707217	Symbol	* NQTFR		707079						
ANR	707218	Symbol	NBREF		707079						
ANR	707219	Symbol	ONIGERR_NUMBERED_BACKREF_OR_CALL_NOT_ALLOWED		707079						
ANR	707220	Symbol	NENCLOSE		707079						
ANR	707221	Symbol	IS_BACKREF_NAME_REF		707079						
ANR	707222	Symbol	NTYPE		707079						
ANR	707223	Symbol	numbered_ref_check		707079						
ANR	707224	Function	disable_noname_group_capture	1893:0:44333:45333							
ANR	707225	FunctionDef	"disable_noname_group_capture (Node * * root , regex_t * reg , ScanEnv * env)"		707224	0					
ANR	707226	CompoundStatement		1895:0:44414:45333	707224	0					
ANR	707227	IdentifierDeclStatement	"int r , i , pos , counter ;"	1896:2:44418:44440	707224	0	True				
ANR	707228	IdentifierDecl	r		707224	0					
ANR	707229	IdentifierDeclType	int		707224	0					
ANR	707230	Identifier	r		707224	1					
ANR	707231	IdentifierDecl	i		707224	1					
ANR	707232	IdentifierDeclType	int		707224	0					
ANR	707233	Identifier	i		707224	1					
ANR	707234	IdentifierDecl	pos		707224	2					
ANR	707235	IdentifierDeclType	int		707224	0					
ANR	707236	Identifier	pos		707224	1					
ANR	707237	IdentifierDecl	counter		707224	3					
ANR	707238	IdentifierDeclType	int		707224	0					
ANR	707239	Identifier	counter		707224	1					
ANR	707240	IdentifierDeclStatement	BitStatusType loc ;	1897:2:44444:44461	707224	1	True				
ANR	707241	IdentifierDecl	loc		707224	0					
ANR	707242	IdentifierDeclType	BitStatusType		707224	0					
ANR	707243	Identifier	loc		707224	1					
ANR	707244	IdentifierDeclStatement	GroupNumRemap * map ;	1898:2:44465:44483	707224	2	True				
ANR	707245	IdentifierDecl	* map		707224	0					
ANR	707246	IdentifierDeclType	GroupNumRemap *		707224	0					
ANR	707247	Identifier	map		707224	1					
ANR	707248	ExpressionStatement	map = ( GroupNumRemap * ) xalloca ( sizeof ( GroupNumRemap ) * ( env -> num_mem + 1 ) )	1900:2:44488:44562	707224	3	True				
ANR	707249	AssignmentExpression	map = ( GroupNumRemap * ) xalloca ( sizeof ( GroupNumRemap ) * ( env -> num_mem + 1 ) )		707224	0		=			
ANR	707250	Identifier	map		707224	0					
ANR	707251	CastExpression	( GroupNumRemap * ) xalloca ( sizeof ( GroupNumRemap ) * ( env -> num_mem + 1 ) )		707224	1					
ANR	707252	CastTarget	GroupNumRemap *		707224	0					
ANR	707253	CallExpression	xalloca ( sizeof ( GroupNumRemap ) * ( env -> num_mem + 1 ) )		707224	1					
ANR	707254	Callee	xalloca		707224	0					
ANR	707255	Identifier	xalloca		707224	0					
ANR	707256	ArgumentList	sizeof ( GroupNumRemap ) * ( env -> num_mem + 1 )		707224	1					
ANR	707257	Argument	sizeof ( GroupNumRemap ) * ( env -> num_mem + 1 )		707224	0					
ANR	707258	MultiplicativeExpression	sizeof ( GroupNumRemap ) * ( env -> num_mem + 1 )		707224	0		*			
ANR	707259	SizeofExpression	sizeof ( GroupNumRemap )		707224	0					
ANR	707260	Sizeof	sizeof		707224	0					
ANR	707261	SizeofOperand	GroupNumRemap		707224	1					
ANR	707262	AdditiveExpression	env -> num_mem + 1		707224	1		+			
ANR	707263	PtrMemberAccess	env -> num_mem		707224	0					
ANR	707264	Identifier	env		707224	0					
ANR	707265	Identifier	num_mem		707224	1					
ANR	707266	PrimaryExpression	1		707224	1					
ANR	707267	ExpressionStatement	CHECK_NULL_RETURN_MEMERR ( map )	1901:2:44566:44595	707224	4	True				
ANR	707268	CallExpression	CHECK_NULL_RETURN_MEMERR ( map )		707224	0					
ANR	707269	Callee	CHECK_NULL_RETURN_MEMERR		707224	0					
ANR	707270	Identifier	CHECK_NULL_RETURN_MEMERR		707224	0					
ANR	707271	ArgumentList	map		707224	1					
ANR	707272	Argument	map		707224	0					
ANR	707273	Identifier	map		707224	0					
ANR	707274	ForStatement	for ( i = 1 ; i <= env -> num_mem ; i ++ )		707224	5					
ANR	707275	ForInit	i = 1 ;	1902:7:44604:44609	707224	0	True				
ANR	707276	AssignmentExpression	i = 1		707224	0		=			
ANR	707277	Identifier	i		707224	0					
ANR	707278	PrimaryExpression	1		707224	1					
ANR	707279	Condition	i <= env -> num_mem	1902:14:44611:44627	707224	1	True				
ANR	707280	RelationalExpression	i <= env -> num_mem		707224	0		<=			
ANR	707281	Identifier	i		707224	0					
ANR	707282	PtrMemberAccess	env -> num_mem		707224	1					
ANR	707283	Identifier	env		707224	0					
ANR	707284	Identifier	num_mem		707224	1					
ANR	707285	PostIncDecOperationExpression	i ++	1902:33:44630:44632	707224	2	True				
ANR	707286	Identifier	i		707224	0					
ANR	707287	IncDec	++		707224	1					
ANR	707288	CompoundStatement		8:38:220:220	707224	3					
ANR	707289	ExpressionStatement	map [ i ] . new_val = 0	1903:4:44641:44659	707224	0	True				
ANR	707290	AssignmentExpression	map [ i ] . new_val = 0		707224	0		=			
ANR	707291	MemberAccess	map [ i ] . new_val		707224	0					
ANR	707292	ArrayIndexing	map [ i ]		707224	0					
ANR	707293	Identifier	map		707224	0					
ANR	707294	Identifier	i		707224	1					
ANR	707295	Identifier	new_val		707224	1					
ANR	707296	PrimaryExpression	0		707224	1					
ANR	707297	ExpressionStatement	counter = 0	1905:2:44667:44678	707224	6	True				
ANR	707298	AssignmentExpression	counter = 0		707224	0		=			
ANR	707299	Identifier	counter		707224	0					
ANR	707300	PrimaryExpression	0		707224	1					
ANR	707301	ExpressionStatement	"r = noname_disable_map ( root , map , & counter )"	1906:2:44682:44725	707224	7	True				
ANR	707302	AssignmentExpression	"r = noname_disable_map ( root , map , & counter )"		707224	0		=			
ANR	707303	Identifier	r		707224	0					
ANR	707304	CallExpression	"noname_disable_map ( root , map , & counter )"		707224	1					
ANR	707305	Callee	noname_disable_map		707224	0					
ANR	707306	Identifier	noname_disable_map		707224	0					
ANR	707307	ArgumentList	root		707224	1					
ANR	707308	Argument	root		707224	0					
ANR	707309	Identifier	root		707224	0					
ANR	707310	Argument	map		707224	1					
ANR	707311	Identifier	map		707224	0					
ANR	707312	Argument	& counter		707224	2					
ANR	707313	UnaryOperationExpression	& counter		707224	0					
ANR	707314	UnaryOperator	&		707224	0					
ANR	707315	Identifier	counter		707224	1					
ANR	707316	IfStatement	if ( r != 0 )		707224	8					
ANR	707317	Condition	r != 0	1907:6:44733:44738	707224	0	True				
ANR	707318	EqualityExpression	r != 0		707224	0		!=			
ANR	707319	Identifier	r		707224	0					
ANR	707320	PrimaryExpression	0		707224	1					
ANR	707321	ReturnStatement	return r ;	1907:14:44741:44749	707224	1	True				
ANR	707322	Identifier	r		707224	0					
ANR	707323	ExpressionStatement	"r = renumber_by_map ( * root , map )"	1909:2:44754:44785	707224	9	True				
ANR	707324	AssignmentExpression	"r = renumber_by_map ( * root , map )"		707224	0		=			
ANR	707325	Identifier	r		707224	0					
ANR	707326	CallExpression	"renumber_by_map ( * root , map )"		707224	1					
ANR	707327	Callee	renumber_by_map		707224	0					
ANR	707328	Identifier	renumber_by_map		707224	0					
ANR	707329	ArgumentList	* root		707224	1					
ANR	707330	Argument	* root		707224	0					
ANR	707331	UnaryOperationExpression	* root		707224	0					
ANR	707332	UnaryOperator	*		707224	0					
ANR	707333	Identifier	root		707224	1					
ANR	707334	Argument	map		707224	1					
ANR	707335	Identifier	map		707224	0					
ANR	707336	IfStatement	if ( r != 0 )		707224	10					
ANR	707337	Condition	r != 0	1910:6:44793:44798	707224	0	True				
ANR	707338	EqualityExpression	r != 0		707224	0		!=			
ANR	707339	Identifier	r		707224	0					
ANR	707340	PrimaryExpression	0		707224	1					
ANR	707341	ReturnStatement	return r ;	1910:14:44801:44809	707224	1	True				
ANR	707342	Identifier	r		707224	0					
ANR	707343	ForStatement	"for ( i = 1 , pos = 1 ; i <= env -> num_mem ; i ++ )"		707224	11					
ANR	707344	ForInit	"i = 1 , pos = 1 ;"	1912:7:44819:44833	707224	0	True				
ANR	707345	Expression	"i = 1 , pos = 1"		707224	0					
ANR	707346	AssignmentExpression	i = 1		707224	0		=			
ANR	707347	Identifier	i		707224	0					
ANR	707348	PrimaryExpression	1		707224	1					
ANR	707349	AssignmentExpression	pos = 1		707224	1		=			
ANR	707350	Identifier	pos		707224	0					
ANR	707351	PrimaryExpression	1		707224	1					
ANR	707352	Condition	i <= env -> num_mem	1912:23:44835:44851	707224	1	True				
ANR	707353	RelationalExpression	i <= env -> num_mem		707224	0		<=			
ANR	707354	Identifier	i		707224	0					
ANR	707355	PtrMemberAccess	env -> num_mem		707224	1					
ANR	707356	Identifier	env		707224	0					
ANR	707357	Identifier	num_mem		707224	1					
ANR	707358	PostIncDecOperationExpression	i ++	1912:42:44854:44856	707224	2	True				
ANR	707359	Identifier	i		707224	0					
ANR	707360	IncDec	++		707224	1					
ANR	707361	CompoundStatement		18:47:444:444	707224	3					
ANR	707362	IfStatement	if ( map [ i ] . new_val > 0 )		707224	0					
ANR	707363	Condition	map [ i ] . new_val > 0	1913:8:44869:44886	707224	0	True				
ANR	707364	RelationalExpression	map [ i ] . new_val > 0		707224	0		>			
ANR	707365	MemberAccess	map [ i ] . new_val		707224	0					
ANR	707366	ArrayIndexing	map [ i ]		707224	0					
ANR	707367	Identifier	map		707224	0					
ANR	707368	Identifier	i		707224	1					
ANR	707369	Identifier	new_val		707224	1					
ANR	707370	PrimaryExpression	0		707224	1					
ANR	707371	CompoundStatement		19:28:474:474	707224	1					
ANR	707372	ExpressionStatement	SCANENV_MEM_NODES ( env ) [ pos ] = SCANENV_MEM_NODES ( env ) [ i ]	1914:6:44897:44952	707224	0	True				
ANR	707373	AssignmentExpression	SCANENV_MEM_NODES ( env ) [ pos ] = SCANENV_MEM_NODES ( env ) [ i ]		707224	0		=			
ANR	707374	ArrayIndexing	SCANENV_MEM_NODES ( env ) [ pos ]		707224	0					
ANR	707375	CallExpression	SCANENV_MEM_NODES ( env )		707224	0					
ANR	707376	Callee	SCANENV_MEM_NODES		707224	0					
ANR	707377	Identifier	SCANENV_MEM_NODES		707224	0					
ANR	707378	ArgumentList	env		707224	1					
ANR	707379	Argument	env		707224	0					
ANR	707380	Identifier	env		707224	0					
ANR	707381	Identifier	pos		707224	1					
ANR	707382	ArrayIndexing	SCANENV_MEM_NODES ( env ) [ i ]		707224	1					
ANR	707383	CallExpression	SCANENV_MEM_NODES ( env )		707224	0					
ANR	707384	Callee	SCANENV_MEM_NODES		707224	0					
ANR	707385	Identifier	SCANENV_MEM_NODES		707224	0					
ANR	707386	ArgumentList	env		707224	1					
ANR	707387	Argument	env		707224	0					
ANR	707388	Identifier	env		707224	0					
ANR	707389	Identifier	i		707224	1					
ANR	707390	ExpressionStatement	pos ++	1915:6:44960:44965	707224	1	True				
ANR	707391	PostIncDecOperationExpression	pos ++		707224	0					
ANR	707392	Identifier	pos		707224	0					
ANR	707393	IncDec	++		707224	1					
ANR	707394	ExpressionStatement	loc = env -> capture_history	1919:2:44980:45006	707224	12	True				
ANR	707395	AssignmentExpression	loc = env -> capture_history		707224	0		=			
ANR	707396	Identifier	loc		707224	0					
ANR	707397	PtrMemberAccess	env -> capture_history		707224	1					
ANR	707398	Identifier	env		707224	0					
ANR	707399	Identifier	capture_history		707224	1					
ANR	707400	ExpressionStatement	BIT_STATUS_CLEAR ( env -> capture_history )	1920:2:45010:45048	707224	13	True				
ANR	707401	CallExpression	BIT_STATUS_CLEAR ( env -> capture_history )		707224	0					
ANR	707402	Callee	BIT_STATUS_CLEAR		707224	0					
ANR	707403	Identifier	BIT_STATUS_CLEAR		707224	0					
ANR	707404	ArgumentList	env -> capture_history		707224	1					
ANR	707405	Argument	env -> capture_history		707224	0					
ANR	707406	PtrMemberAccess	env -> capture_history		707224	0					
ANR	707407	Identifier	env		707224	0					
ANR	707408	Identifier	capture_history		707224	1					
ANR	707409	ForStatement	for ( i = 1 ; i <= ONIG_MAX_CAPTURE_HISTORY_GROUP ; i ++ )		707224	14					
ANR	707410	ForInit	i = 1 ;	1921:7:45057:45062	707224	0	True				
ANR	707411	AssignmentExpression	i = 1		707224	0		=			
ANR	707412	Identifier	i		707224	0					
ANR	707413	PrimaryExpression	1		707224	1					
ANR	707414	Condition	i <= ONIG_MAX_CAPTURE_HISTORY_GROUP	1921:14:45064:45098	707224	1	True				
ANR	707415	RelationalExpression	i <= ONIG_MAX_CAPTURE_HISTORY_GROUP		707224	0		<=			
ANR	707416	Identifier	i		707224	0					
ANR	707417	Identifier	ONIG_MAX_CAPTURE_HISTORY_GROUP		707224	1					
ANR	707418	PostIncDecOperationExpression	i ++	1921:51:45101:45103	707224	2	True				
ANR	707419	Identifier	i		707224	0					
ANR	707420	IncDec	++		707224	1					
ANR	707421	CompoundStatement		27:56:691:691	707224	3					
ANR	707422	IfStatement	"if ( BIT_STATUS_AT ( loc , i ) )"		707224	0					
ANR	707423	Condition	"BIT_STATUS_AT ( loc , i )"	1922:8:45116:45136	707224	0	True				
ANR	707424	CallExpression	"BIT_STATUS_AT ( loc , i )"		707224	0					
ANR	707425	Callee	BIT_STATUS_AT		707224	0					
ANR	707426	Identifier	BIT_STATUS_AT		707224	0					
ANR	707427	ArgumentList	loc		707224	1					
ANR	707428	Argument	loc		707224	0					
ANR	707429	Identifier	loc		707224	0					
ANR	707430	Argument	i		707224	1					
ANR	707431	Identifier	i		707224	0					
ANR	707432	CompoundStatement		28:31:724:724	707224	1					
ANR	707433	ExpressionStatement	"BIT_STATUS_ON_AT_SIMPLE ( env -> capture_history , map [ i ] . new_val )"	1923:6:45147:45208	707224	0	True				
ANR	707434	CallExpression	"BIT_STATUS_ON_AT_SIMPLE ( env -> capture_history , map [ i ] . new_val )"		707224	0					
ANR	707435	Callee	BIT_STATUS_ON_AT_SIMPLE		707224	0					
ANR	707436	Identifier	BIT_STATUS_ON_AT_SIMPLE		707224	0					
ANR	707437	ArgumentList	env -> capture_history		707224	1					
ANR	707438	Argument	env -> capture_history		707224	0					
ANR	707439	PtrMemberAccess	env -> capture_history		707224	0					
ANR	707440	Identifier	env		707224	0					
ANR	707441	Identifier	capture_history		707224	1					
ANR	707442	Argument	map [ i ] . new_val		707224	1					
ANR	707443	MemberAccess	map [ i ] . new_val		707224	0					
ANR	707444	ArrayIndexing	map [ i ]		707224	0					
ANR	707445	Identifier	map		707224	0					
ANR	707446	Identifier	i		707224	1					
ANR	707447	Identifier	new_val		707224	1					
ANR	707448	ExpressionStatement	env -> num_mem = env -> num_named	1927:2:45223:45252	707224	15	True				
ANR	707449	AssignmentExpression	env -> num_mem = env -> num_named		707224	0		=			
ANR	707450	PtrMemberAccess	env -> num_mem		707224	0					
ANR	707451	Identifier	env		707224	0					
ANR	707452	Identifier	num_mem		707224	1					
ANR	707453	PtrMemberAccess	env -> num_named		707224	1					
ANR	707454	Identifier	env		707224	0					
ANR	707455	Identifier	num_named		707224	1					
ANR	707456	ExpressionStatement	reg -> num_mem = env -> num_named	1928:2:45256:45285	707224	16	True				
ANR	707457	AssignmentExpression	reg -> num_mem = env -> num_named		707224	0		=			
ANR	707458	PtrMemberAccess	reg -> num_mem		707224	0					
ANR	707459	Identifier	reg		707224	0					
ANR	707460	Identifier	num_mem		707224	1					
ANR	707461	PtrMemberAccess	env -> num_named		707224	1					
ANR	707462	Identifier	env		707224	0					
ANR	707463	Identifier	num_named		707224	1					
ANR	707464	ReturnStatement	"return onig_renumber_name_table ( reg , map ) ;"	1930:2:45290:45331	707224	17	True				
ANR	707465	CallExpression	"onig_renumber_name_table ( reg , map )"		707224	0					
ANR	707466	Callee	onig_renumber_name_table		707224	0					
ANR	707467	Identifier	onig_renumber_name_table		707224	0					
ANR	707468	ArgumentList	reg		707224	1					
ANR	707469	Argument	reg		707224	0					
ANR	707470	Identifier	reg		707224	0					
ANR	707471	Argument	map		707224	1					
ANR	707472	Identifier	map		707224	0					
ANR	707473	ReturnType	static int		707224	1					
ANR	707474	Identifier	disable_noname_group_capture		707224	2					
ANR	707475	ParameterList	"Node * * root , regex_t * reg , ScanEnv * env"		707224	3					
ANR	707476	Parameter	Node * * root	1894:29:44373:44383	707224	0	True				
ANR	707477	ParameterType	Node * *		707224	0					
ANR	707478	Identifier	root		707224	1					
ANR	707479	Parameter	regex_t * reg	1894:42:44386:44397	707224	1	True				
ANR	707480	ParameterType	regex_t *		707224	0					
ANR	707481	Identifier	reg		707224	1					
ANR	707482	Parameter	ScanEnv * env	1894:56:44400:44411	707224	2	True				
ANR	707483	ParameterType	ScanEnv *		707224	0					
ANR	707484	Identifier	env		707224	1					
ANR	707485	CFGEntryNode	ENTRY		707224		True				
ANR	707486	CFGExitNode	EXIT		707224		True				
ANR	707487	Symbol	loc		707224						
ANR	707488	Symbol	* map		707224						
ANR	707489	Symbol	ONIG_MAX_CAPTURE_HISTORY_GROUP		707224						
ANR	707490	Symbol	env -> num_named		707224						
ANR	707491	Symbol	* SCANENV_MEM_NODES		707224						
ANR	707492	Symbol	xalloca		707224						
ANR	707493	Symbol	reg		707224						
ANR	707494	Symbol	pos		707224						
ANR	707495	Symbol	root		707224						
ANR	707496	Symbol	onig_renumber_name_table		707224						
ANR	707497	Symbol	SCANENV_MEM_NODES		707224						
ANR	707498	Symbol	env -> capture_history		707224						
ANR	707499	Symbol	map		707224						
ANR	707500	Symbol	reg -> num_mem		707224						
ANR	707501	Symbol	renumber_by_map		707224						
ANR	707502	Symbol	BIT_STATUS_AT		707224						
ANR	707503	Symbol	& counter		707224						
ANR	707504	Symbol	* env		707224						
ANR	707505	Symbol	env -> num_mem		707224						
ANR	707506	Symbol	i		707224						
ANR	707507	Symbol	counter		707224						
ANR	707508	Symbol	env		707224						
ANR	707509	Symbol	noname_disable_map		707224						
ANR	707510	Symbol	r		707224						
ANR	707511	Symbol	* i		707224						
ANR	707512	Symbol	map [ i ] . new_val		707224						
ANR	707513	Symbol	* root		707224						
ANR	707514	Symbol	* pos		707224						
ANR	707515	Symbol	* reg		707224						
ANR	707516	Function	unset_addr_list_fix	1935:0:45388:45786							
ANR	707517	FunctionDef	"unset_addr_list_fix (UnsetAddrList * uslist , regex_t * reg)"		707516	0					
ANR	707518	CompoundStatement		1937:0:45456:45786	707516	0					
ANR	707519	IdentifierDeclStatement	"int i , offset ;"	1938:2:45460:45473	707516	0	True				
ANR	707520	IdentifierDecl	i		707516	0					
ANR	707521	IdentifierDeclType	int		707516	0					
ANR	707522	Identifier	i		707516	1					
ANR	707523	IdentifierDecl	offset		707516	1					
ANR	707524	IdentifierDeclType	int		707516	0					
ANR	707525	Identifier	offset		707516	1					
ANR	707526	IdentifierDeclStatement	EncloseNode * en ;	1939:2:45477:45492	707516	1	True				
ANR	707527	IdentifierDecl	* en		707516	0					
ANR	707528	IdentifierDeclType	EncloseNode *		707516	0					
ANR	707529	Identifier	en		707516	1					
ANR	707530	IdentifierDeclStatement	AbsAddrType addr ;	1940:2:45496:45512	707516	2	True				
ANR	707531	IdentifierDecl	addr		707516	0					
ANR	707532	IdentifierDeclType	AbsAddrType		707516	0					
ANR	707533	Identifier	addr		707516	1					
ANR	707534	ForStatement	for ( i = 0 ; i < uslist -> num ; i ++ )		707516	3					
ANR	707535	ForInit	i = 0 ;	1942:7:45522:45527	707516	0	True				
ANR	707536	AssignmentExpression	i = 0		707516	0		=			
ANR	707537	Identifier	i		707516	0					
ANR	707538	PrimaryExpression	0		707516	1					
ANR	707539	Condition	i < uslist -> num	1942:14:45529:45543	707516	1	True				
ANR	707540	RelationalExpression	i < uslist -> num		707516	0		<			
ANR	707541	Identifier	i		707516	0					
ANR	707542	PtrMemberAccess	uslist -> num		707516	1					
ANR	707543	Identifier	uslist		707516	0					
ANR	707544	Identifier	num		707516	1					
ANR	707545	PostIncDecOperationExpression	i ++	1942:31:45546:45548	707516	2	True				
ANR	707546	Identifier	i		707516	0					
ANR	707547	IncDec	++		707516	1					
ANR	707548	CompoundStatement		6:36:94:94	707516	3					
ANR	707549	ExpressionStatement	en = NENCLOSE ( uslist -> us [ i ] . target )	1943:4:45557:45592	707516	0	True				
ANR	707550	AssignmentExpression	en = NENCLOSE ( uslist -> us [ i ] . target )		707516	0		=			
ANR	707551	Identifier	en		707516	0					
ANR	707552	CallExpression	NENCLOSE ( uslist -> us [ i ] . target )		707516	1					
ANR	707553	Callee	NENCLOSE		707516	0					
ANR	707554	Identifier	NENCLOSE		707516	0					
ANR	707555	ArgumentList	uslist -> us [ i ] . target		707516	1					
ANR	707556	Argument	uslist -> us [ i ] . target		707516	0					
ANR	707557	MemberAccess	uslist -> us [ i ] . target		707516	0					
ANR	707558	ArrayIndexing	uslist -> us [ i ]		707516	0					
ANR	707559	PtrMemberAccess	uslist -> us		707516	0					
ANR	707560	Identifier	uslist		707516	0					
ANR	707561	Identifier	us		707516	1					
ANR	707562	Identifier	i		707516	1					
ANR	707563	Identifier	target		707516	1					
ANR	707564	IfStatement	if ( ! IS_ENCLOSE_ADDR_FIXED ( en ) )		707516	1					
ANR	707565	Condition	! IS_ENCLOSE_ADDR_FIXED ( en )	1944:8:45602:45628	707516	0	True				
ANR	707566	UnaryOperationExpression	! IS_ENCLOSE_ADDR_FIXED ( en )		707516	0					
ANR	707567	UnaryOperator	!		707516	0					
ANR	707568	CallExpression	IS_ENCLOSE_ADDR_FIXED ( en )		707516	1					
ANR	707569	Callee	IS_ENCLOSE_ADDR_FIXED		707516	0					
ANR	707570	Identifier	IS_ENCLOSE_ADDR_FIXED		707516	0					
ANR	707571	ArgumentList	en		707516	1					
ANR	707572	Argument	en		707516	0					
ANR	707573	Identifier	en		707516	0					
ANR	707574	ReturnStatement	return ONIGERR_PARSER_BUG ;	1944:37:45631:45656	707516	1	True				
ANR	707575	Identifier	ONIGERR_PARSER_BUG		707516	0					
ANR	707576	ExpressionStatement	addr = en -> call_addr	1945:4:45662:45682	707516	2	True				
ANR	707577	AssignmentExpression	addr = en -> call_addr		707516	0		=			
ANR	707578	Identifier	addr		707516	0					
ANR	707579	PtrMemberAccess	en -> call_addr		707516	1					
ANR	707580	Identifier	en		707516	0					
ANR	707581	Identifier	call_addr		707516	1					
ANR	707582	ExpressionStatement	offset = uslist -> us [ i ] . offset	1946:4:45688:45717	707516	3	True				
ANR	707583	AssignmentExpression	offset = uslist -> us [ i ] . offset		707516	0		=			
ANR	707584	Identifier	offset		707516	0					
ANR	707585	MemberAccess	uslist -> us [ i ] . offset		707516	1					
ANR	707586	ArrayIndexing	uslist -> us [ i ]		707516	0					
ANR	707587	PtrMemberAccess	uslist -> us		707516	0					
ANR	707588	Identifier	uslist		707516	0					
ANR	707589	Identifier	us		707516	1					
ANR	707590	Identifier	i		707516	1					
ANR	707591	Identifier	offset		707516	1					
ANR	707592	ExpressionStatement	"BBUF_WRITE ( reg , offset , & addr , SIZE_ABSADDR )"	1948:4:45724:45768	707516	4	True				
ANR	707593	CallExpression	"BBUF_WRITE ( reg , offset , & addr , SIZE_ABSADDR )"		707516	0					
ANR	707594	Callee	BBUF_WRITE		707516	0					
ANR	707595	Identifier	BBUF_WRITE		707516	0					
ANR	707596	ArgumentList	reg		707516	1					
ANR	707597	Argument	reg		707516	0					
ANR	707598	Identifier	reg		707516	0					
ANR	707599	Argument	offset		707516	1					
ANR	707600	Identifier	offset		707516	0					
ANR	707601	Argument	& addr		707516	2					
ANR	707602	UnaryOperationExpression	& addr		707516	0					
ANR	707603	UnaryOperator	&		707516	0					
ANR	707604	Identifier	addr		707516	1					
ANR	707605	Argument	SIZE_ABSADDR		707516	3					
ANR	707606	Identifier	SIZE_ABSADDR		707516	0					
ANR	707607	ReturnStatement	return 0 ;	1950:2:45776:45784	707516	4	True				
ANR	707608	PrimaryExpression	0		707516	0					
ANR	707609	ReturnType	static int		707516	1					
ANR	707610	Identifier	unset_addr_list_fix		707516	2					
ANR	707611	ParameterList	"UnsetAddrList * uslist , regex_t * reg"		707516	3					
ANR	707612	Parameter	UnsetAddrList * uslist	1936:20:45419:45439	707516	0	True				
ANR	707613	ParameterType	UnsetAddrList *		707516	0					
ANR	707614	Identifier	uslist		707516	1					
ANR	707615	Parameter	regex_t * reg	1936:43:45442:45453	707516	1	True				
ANR	707616	ParameterType	regex_t *		707516	0					
ANR	707617	Identifier	reg		707516	1					
ANR	707618	CFGEntryNode	ENTRY		707516		True				
ANR	707619	CFGExitNode	EXIT		707516		True				
ANR	707620	Symbol	uslist -> num		707516						
ANR	707621	Symbol	uslist -> us [ i ] . target		707516						
ANR	707622	Symbol	& addr		707516						
ANR	707623	Symbol	offset		707516						
ANR	707624	Symbol	i		707516						
ANR	707625	Symbol	en		707516						
ANR	707626	Symbol	* * uslist		707516						
ANR	707627	Symbol	* en		707516						
ANR	707628	Symbol	SIZE_ABSADDR		707516						
ANR	707629	Symbol	ONIGERR_PARSER_BUG		707516						
ANR	707630	Symbol	uslist -> us		707516						
ANR	707631	Symbol	uslist -> us [ i ] . offset		707516						
ANR	707632	Symbol	uslist		707516						
ANR	707633	Symbol	* i		707516						
ANR	707634	Symbol	reg		707516						
ANR	707635	Symbol	* uslist		707516						
ANR	707636	Symbol	* uslist -> us		707516						
ANR	707637	Symbol	NENCLOSE		707516						
ANR	707638	Symbol	IS_ENCLOSE_ADDR_FIXED		707516						
ANR	707639	Symbol	addr		707516						
ANR	707640	Symbol	en -> call_addr		707516						
ANR	707641	Function	quantifiers_memory_node_info	1955:0:45851:47000							
ANR	707642	FunctionDef	quantifiers_memory_node_info (Node * node)		707641	0					
ANR	707643	CompoundStatement		1957:0:45903:47000	707641	0					
ANR	707644	IdentifierDeclStatement	int r = 0 ;	1958:2:45907:45916	707641	0	True				
ANR	707645	IdentifierDecl	r = 0		707641	0					
ANR	707646	IdentifierDeclType	int		707641	0					
ANR	707647	Identifier	r		707641	1					
ANR	707648	AssignmentExpression	r = 0		707641	2		=			
ANR	707649	Identifier	r		707641	0					
ANR	707650	PrimaryExpression	0		707641	1					
ANR	707651	SwitchStatement	switch ( NTYPE ( node ) )		707641	1					
ANR	707652	Condition	NTYPE ( node )	1960:10:45929:45939	707641	0	True				
ANR	707653	CallExpression	NTYPE ( node )		707641	0					
ANR	707654	Callee	NTYPE		707641	0					
ANR	707655	Identifier	NTYPE		707641	0					
ANR	707656	ArgumentList	node		707641	1					
ANR	707657	Argument	node		707641	0					
ANR	707658	Identifier	node		707641	0					
ANR	707659	CompoundStatement		4:23:38:38	707641	1					
ANR	707660	Label	case NT_LIST :	1961:2:45946:45958	707641	0	True				
ANR	707661	Identifier	NT_LIST		707641	0					
ANR	707662	Label	case NT_ALT :	1962:2:45962:45973	707641	1	True				
ANR	707663	Identifier	NT_ALT		707641	0					
ANR	707664	CompoundStatement		8:6:83:88	707641	2					
ANR	707665	IdentifierDeclStatement	int v ;	1964:6:45987:45992	707641	0	True				
ANR	707666	IdentifierDecl	v		707641	0					
ANR	707667	IdentifierDeclType	int		707641	0					
ANR	707668	Identifier	v		707641	1					
ANR	707669	DoStatement	do		707641	1					
ANR	707670	CompoundStatement		9:9:99:99	707641	0					
ANR	707671	ExpressionStatement	v = quantifiers_memory_node_info ( NCAR ( node ) )	1966:1:46006:46050	707641	0	True				
ANR	707672	AssignmentExpression	v = quantifiers_memory_node_info ( NCAR ( node ) )		707641	0		=			
ANR	707673	Identifier	v		707641	0					
ANR	707674	CallExpression	quantifiers_memory_node_info ( NCAR ( node ) )		707641	1					
ANR	707675	Callee	quantifiers_memory_node_info		707641	0					
ANR	707676	Identifier	quantifiers_memory_node_info		707641	0					
ANR	707677	ArgumentList	NCAR ( node )		707641	1					
ANR	707678	Argument	NCAR ( node )		707641	0					
ANR	707679	CallExpression	NCAR ( node )		707641	0					
ANR	707680	Callee	NCAR		707641	0					
ANR	707681	Identifier	NCAR		707641	0					
ANR	707682	ArgumentList	node		707641	1					
ANR	707683	Argument	node		707641	0					
ANR	707684	Identifier	node		707641	0					
ANR	707685	IfStatement	if ( v > r )		707641	1					
ANR	707686	Condition	v > r	1967:5:46057:46061	707641	0	True				
ANR	707687	RelationalExpression	v > r		707641	0		>			
ANR	707688	Identifier	v		707641	0					
ANR	707689	Identifier	r		707641	1					
ANR	707690	ExpressionStatement	r = v	1967:12:46064:46069	707641	1	True				
ANR	707691	AssignmentExpression	r = v		707641	0		=			
ANR	707692	Identifier	r		707641	0					
ANR	707693	Identifier	v		707641	1					
ANR	707694	Condition	v >= 0 && IS_NOT_NULL ( node = NCDR ( node ) )	1968:15:46086:46125	707641	1	True				
ANR	707695	AndExpression	v >= 0 && IS_NOT_NULL ( node = NCDR ( node ) )		707641	0		&&			
ANR	707696	RelationalExpression	v >= 0		707641	0		>=			
ANR	707697	Identifier	v		707641	0					
ANR	707698	PrimaryExpression	0		707641	1					
ANR	707699	CallExpression	IS_NOT_NULL ( node = NCDR ( node ) )		707641	1					
ANR	707700	Callee	IS_NOT_NULL		707641	0					
ANR	707701	Identifier	IS_NOT_NULL		707641	0					
ANR	707702	ArgumentList	node = NCDR ( node )		707641	1					
ANR	707703	Argument	node = NCDR ( node )		707641	0					
ANR	707704	AssignmentExpression	node = NCDR ( node )		707641	0		=			
ANR	707705	Identifier	node		707641	0					
ANR	707706	CallExpression	NCDR ( node )		707641	1					
ANR	707707	Callee	NCDR		707641	0					
ANR	707708	Identifier	NCDR		707641	0					
ANR	707709	ArgumentList	node		707641	1					
ANR	707710	Argument	node		707641	0					
ANR	707711	Identifier	node		707641	0					
ANR	707712	BreakStatement	break ;	1970:4:46139:46144	707641	3	True				
ANR	707713	Label	case NT_CALL :	1973:2:46172:46184	707641	4	True				
ANR	707714	Identifier	NT_CALL		707641	0					
ANR	707715	IfStatement	if ( IS_CALL_RECURSION ( NCALL ( node ) ) )		707641	5					
ANR	707716	Condition	IS_CALL_RECURSION ( NCALL ( node ) )	1974:8:46194:46223	707641	0	True				
ANR	707717	CallExpression	IS_CALL_RECURSION ( NCALL ( node ) )		707641	0					
ANR	707718	Callee	IS_CALL_RECURSION		707641	0					
ANR	707719	Identifier	IS_CALL_RECURSION		707641	0					
ANR	707720	ArgumentList	NCALL ( node )		707641	1					
ANR	707721	Argument	NCALL ( node )		707641	0					
ANR	707722	CallExpression	NCALL ( node )		707641	0					
ANR	707723	Callee	NCALL		707641	0					
ANR	707724	Identifier	NCALL		707641	0					
ANR	707725	ArgumentList	node		707641	1					
ANR	707726	Argument	node		707641	0					
ANR	707727	Identifier	node		707641	0					
ANR	707728	CompoundStatement		18:40:322:322	707641	1					
ANR	707729	ReturnStatement	return NQ_TARGET_IS_EMPTY_REC ;	1975:6:46234:46263	707641	0	True				
ANR	707730	Identifier	NQ_TARGET_IS_EMPTY_REC		707641	0					
ANR	707731	ElseStatement	else		707641	0					
ANR	707732	ExpressionStatement	r = quantifiers_memory_node_info ( NCALL ( node ) -> target )	1978:6:46305:46358	707641	0	True				
ANR	707733	AssignmentExpression	r = quantifiers_memory_node_info ( NCALL ( node ) -> target )		707641	0		=			
ANR	707734	Identifier	r		707641	0					
ANR	707735	CallExpression	quantifiers_memory_node_info ( NCALL ( node ) -> target )		707641	1					
ANR	707736	Callee	quantifiers_memory_node_info		707641	0					
ANR	707737	Identifier	quantifiers_memory_node_info		707641	0					
ANR	707738	ArgumentList	NCALL ( node ) -> target		707641	1					
ANR	707739	Argument	NCALL ( node ) -> target		707641	0					
ANR	707740	PtrMemberAccess	NCALL ( node ) -> target		707641	0					
ANR	707741	CallExpression	NCALL ( node )		707641	0					
ANR	707742	Callee	NCALL		707641	0					
ANR	707743	Identifier	NCALL		707641	0					
ANR	707744	ArgumentList	node		707641	1					
ANR	707745	Argument	node		707641	0					
ANR	707746	Identifier	node		707641	0					
ANR	707747	Identifier	target		707641	1					
ANR	707748	BreakStatement	break ;	1979:4:46364:46369	707641	6	True				
ANR	707749	Label	case NT_QTFR :	1982:2:46381:46393	707641	7	True				
ANR	707750	Identifier	NT_QTFR		707641	0					
ANR	707751	CompoundStatement		28:6:503:529	707641	8					
ANR	707752	IdentifierDeclStatement	QtfrNode * qn = NQTFR ( node ) ;	1984:6:46407:46433	707641	0	True				
ANR	707753	IdentifierDecl	* qn = NQTFR ( node )		707641	0					
ANR	707754	IdentifierDeclType	QtfrNode *		707641	0					
ANR	707755	Identifier	qn		707641	1					
ANR	707756	AssignmentExpression	* qn = NQTFR ( node )		707641	2		=			
ANR	707757	Identifier	qn		707641	0					
ANR	707758	CallExpression	NQTFR ( node )		707641	1					
ANR	707759	Callee	NQTFR		707641	0					
ANR	707760	Identifier	NQTFR		707641	0					
ANR	707761	ArgumentList	node		707641	1					
ANR	707762	Argument	node		707641	0					
ANR	707763	Identifier	node		707641	0					
ANR	707764	IfStatement	if ( qn -> upper != 0 )		707641	1					
ANR	707765	Condition	qn -> upper != 0	1985:10:46445:46458	707641	0	True				
ANR	707766	EqualityExpression	qn -> upper != 0		707641	0		!=			
ANR	707767	PtrMemberAccess	qn -> upper		707641	0					
ANR	707768	Identifier	qn		707641	0					
ANR	707769	Identifier	upper		707641	1					
ANR	707770	PrimaryExpression	0		707641	1					
ANR	707771	CompoundStatement		29:26:557:557	707641	1					
ANR	707772	ExpressionStatement	r = quantifiers_memory_node_info ( qn -> target )	1986:1:46464:46508	707641	0	True				
ANR	707773	AssignmentExpression	r = quantifiers_memory_node_info ( qn -> target )		707641	0		=			
ANR	707774	Identifier	r		707641	0					
ANR	707775	CallExpression	quantifiers_memory_node_info ( qn -> target )		707641	1					
ANR	707776	Callee	quantifiers_memory_node_info		707641	0					
ANR	707777	Identifier	quantifiers_memory_node_info		707641	0					
ANR	707778	ArgumentList	qn -> target		707641	1					
ANR	707779	Argument	qn -> target		707641	0					
ANR	707780	PtrMemberAccess	qn -> target		707641	0					
ANR	707781	Identifier	qn		707641	0					
ANR	707782	Identifier	target		707641	1					
ANR	707783	BreakStatement	break ;	1989:4:46528:46533	707641	9	True				
ANR	707784	Label	case NT_ENCLOSE :	1991:2:46538:46553	707641	10	True				
ANR	707785	Identifier	NT_ENCLOSE		707641	0					
ANR	707786	CompoundStatement		37:6:663:695	707641	11					
ANR	707787	IdentifierDeclStatement	EncloseNode * en = NENCLOSE ( node ) ;	1993:6:46567:46599	707641	0	True				
ANR	707788	IdentifierDecl	* en = NENCLOSE ( node )		707641	0					
ANR	707789	IdentifierDeclType	EncloseNode *		707641	0					
ANR	707790	Identifier	en		707641	1					
ANR	707791	AssignmentExpression	* en = NENCLOSE ( node )		707641	2		=			
ANR	707792	Identifier	en		707641	0					
ANR	707793	CallExpression	NENCLOSE ( node )		707641	1					
ANR	707794	Callee	NENCLOSE		707641	0					
ANR	707795	Identifier	NENCLOSE		707641	0					
ANR	707796	ArgumentList	node		707641	1					
ANR	707797	Argument	node		707641	0					
ANR	707798	Identifier	node		707641	0					
ANR	707799	SwitchStatement	switch ( en -> type )		707641	1					
ANR	707800	Condition	en -> type	1994:14:46615:46622	707641	0	True				
ANR	707801	PtrMemberAccess	en -> type		707641	0					
ANR	707802	Identifier	en		707641	0					
ANR	707803	Identifier	type		707641	1					
ANR	707804	CompoundStatement		38:24:721:721	707641	1					
ANR	707805	Label	case ENCLOSE_MEMORY :	1995:6:46633:46652	707641	0	True				
ANR	707806	Identifier	ENCLOSE_MEMORY		707641	0					
ANR	707807	ReturnStatement	return NQ_TARGET_IS_EMPTY_MEM ;	1996:1:46655:46684	707641	1	True				
ANR	707808	Identifier	NQ_TARGET_IS_EMPTY_MEM		707641	0					
ANR	707809	BreakStatement	break ;	1997:1:46687:46692	707641	2	True				
ANR	707810	Label	case ENCLOSE_OPTION :	1999:6:46701:46720	707641	3	True				
ANR	707811	Identifier	ENCLOSE_OPTION		707641	0					
ANR	707812	Label	case ENCLOSE_STOP_BACKTRACK :	2000:6:46728:46755	707641	4	True				
ANR	707813	Identifier	ENCLOSE_STOP_BACKTRACK		707641	0					
ANR	707814	ExpressionStatement	r = quantifiers_memory_node_info ( en -> target )	2001:1:46758:46802	707641	5	True				
ANR	707815	AssignmentExpression	r = quantifiers_memory_node_info ( en -> target )		707641	0		=			
ANR	707816	Identifier	r		707641	0					
ANR	707817	CallExpression	quantifiers_memory_node_info ( en -> target )		707641	1					
ANR	707818	Callee	quantifiers_memory_node_info		707641	0					
ANR	707819	Identifier	quantifiers_memory_node_info		707641	0					
ANR	707820	ArgumentList	en -> target		707641	1					
ANR	707821	Argument	en -> target		707641	0					
ANR	707822	PtrMemberAccess	en -> target		707641	0					
ANR	707823	Identifier	en		707641	0					
ANR	707824	Identifier	target		707641	1					
ANR	707825	BreakStatement	break ;	2002:1:46805:46810	707641	6	True				
ANR	707826	Label	default :	2003:6:46818:46825	707641	7	True				
ANR	707827	Identifier	default		707641	0					
ANR	707828	BreakStatement	break ;	2004:1:46828:46833	707641	8	True				
ANR	707829	BreakStatement	break ;	2007:4:46853:46858	707641	12	True				
ANR	707830	Label	case NT_BREF :	2009:2:46863:46875	707641	13	True				
ANR	707831	Identifier	NT_BREF		707641	0					
ANR	707832	Label	case NT_STR :	2010:2:46879:46890	707641	14	True				
ANR	707833	Identifier	NT_STR		707641	0					
ANR	707834	Label	case NT_CTYPE :	2011:2:46894:46907	707641	15	True				
ANR	707835	Identifier	NT_CTYPE		707641	0					
ANR	707836	Label	case NT_CCLASS :	2012:2:46911:46925	707641	16	True				
ANR	707837	Identifier	NT_CCLASS		707641	0					
ANR	707838	Label	case NT_CANY :	2013:2:46929:46941	707641	17	True				
ANR	707839	Identifier	NT_CANY		707641	0					
ANR	707840	Label	case NT_ANCHOR :	2014:2:46945:46959	707641	18	True				
ANR	707841	Identifier	NT_ANCHOR		707641	0					
ANR	707842	Label	default :	2015:2:46963:46970	707641	19	True				
ANR	707843	Identifier	default		707641	0					
ANR	707844	BreakStatement	break ;	2016:4:46976:46981	707641	20	True				
ANR	707845	ReturnStatement	return r ;	2019:2:46990:46998	707641	2	True				
ANR	707846	Identifier	r		707641	0					
ANR	707847	ReturnType	static int		707641	1					
ANR	707848	Identifier	quantifiers_memory_node_info		707641	2					
ANR	707849	ParameterList	Node * node		707641	3					
ANR	707850	Parameter	Node * node	1956:29:45891:45900	707641	0	True				
ANR	707851	ParameterType	Node *		707641	0					
ANR	707852	Identifier	node		707641	1					
ANR	707853	CFGEntryNode	ENTRY		707641		True				
ANR	707854	CFGExitNode	EXIT		707641		True				
ANR	707855	Symbol	* qn		707641						
ANR	707856	Symbol	IS_NOT_NULL		707641						
ANR	707857	Symbol	NCAR		707641						
ANR	707858	Symbol	NQ_TARGET_IS_EMPTY_MEM		707641						
ANR	707859	Symbol	NCALL		707641						
ANR	707860	Symbol	NCDR		707641						
ANR	707861	Symbol	quantifiers_memory_node_info		707641						
ANR	707862	Symbol	en		707641						
ANR	707863	Symbol	NQTFR		707641						
ANR	707864	Symbol	* en		707641						
ANR	707865	Symbol	qn -> target		707641						
ANR	707866	Symbol	node		707641						
ANR	707867	Symbol	qn -> upper		707641						
ANR	707868	Symbol	r		707641						
ANR	707869	Symbol	v		707641						
ANR	707870	Symbol	NENCLOSE		707641						
ANR	707871	Symbol	en -> target		707641						
ANR	707872	Symbol	en -> type		707641						
ANR	707873	Symbol	NCALL ( node ) -> target		707641						
ANR	707874	Symbol	IS_CALL_RECURSION		707641						
ANR	707875	Symbol	NTYPE		707641						
ANR	707876	Symbol	* NCALL		707641						
ANR	707877	Symbol	qn		707641						
ANR	707878	Symbol	NQ_TARGET_IS_EMPTY_REC		707641						
ANR	707879	Function	get_min_match_length	2023:0:47064:49551							
ANR	707880	FunctionDef	"get_min_match_length (Node * node , OnigDistance * min , ScanEnv * env)"		707879	0					
ANR	707881	CompoundStatement		2025:0:47141:49551	707879	0					
ANR	707882	IdentifierDeclStatement	OnigDistance tmin ;	2026:2:47145:47162	707879	0	True				
ANR	707883	IdentifierDecl	tmin		707879	0					
ANR	707884	IdentifierDeclType	OnigDistance		707879	0					
ANR	707885	Identifier	tmin		707879	1					
ANR	707886	IdentifierDeclStatement	int r = 0 ;	2027:2:47166:47175	707879	1	True				
ANR	707887	IdentifierDecl	r = 0		707879	0					
ANR	707888	IdentifierDeclType	int		707879	0					
ANR	707889	Identifier	r		707879	1					
ANR	707890	AssignmentExpression	r = 0		707879	2		=			
ANR	707891	Identifier	r		707879	0					
ANR	707892	PrimaryExpression	0		707879	1					
ANR	707893	ExpressionStatement	* min = 0	2029:2:47180:47188	707879	2	True				
ANR	707894	AssignmentExpression	* min = 0		707879	0		=			
ANR	707895	UnaryOperationExpression	* min		707879	0					
ANR	707896	UnaryOperator	*		707879	0					
ANR	707897	Identifier	min		707879	1					
ANR	707898	PrimaryExpression	0		707879	1					
ANR	707899	SwitchStatement	switch ( NTYPE ( node ) )		707879	3					
ANR	707900	Condition	NTYPE ( node )	2030:10:47200:47210	707879	0	True				
ANR	707901	CallExpression	NTYPE ( node )		707879	0					
ANR	707902	Callee	NTYPE		707879	0					
ANR	707903	Identifier	NTYPE		707879	0					
ANR	707904	ArgumentList	node		707879	1					
ANR	707905	Argument	node		707879	0					
ANR	707906	Identifier	node		707879	0					
ANR	707907	CompoundStatement		6:23:71:71	707879	1					
ANR	707908	Label	case NT_BREF :	2031:2:47217:47229	707879	0	True				
ANR	707909	Identifier	NT_BREF		707879	0					
ANR	707910	CompoundStatement		12:6:177:203	707879	1					
ANR	707911	IdentifierDeclStatement	int i ;	2033:6:47243:47248	707879	0	True				
ANR	707912	IdentifierDecl	i		707879	0					
ANR	707913	IdentifierDeclType	int		707879	0					
ANR	707914	Identifier	i		707879	1					
ANR	707915	IdentifierDeclStatement	int * backs ;	2034:6:47256:47266	707879	1	True				
ANR	707916	IdentifierDecl	* backs		707879	0					
ANR	707917	IdentifierDeclType	int *		707879	0					
ANR	707918	Identifier	backs		707879	1					
ANR	707919	IdentifierDeclStatement	Node * * nodes = SCANENV_MEM_NODES ( env ) ;	2035:6:47274:47311	707879	2	True				
ANR	707920	IdentifierDecl	* * nodes = SCANENV_MEM_NODES ( env )		707879	0					
ANR	707921	IdentifierDeclType	Node * *		707879	0					
ANR	707922	Identifier	nodes		707879	1					
ANR	707923	AssignmentExpression	* * nodes = SCANENV_MEM_NODES ( env )		707879	2		=			
ANR	707924	Identifier	nodes		707879	0					
ANR	707925	CallExpression	SCANENV_MEM_NODES ( env )		707879	1					
ANR	707926	Callee	SCANENV_MEM_NODES		707879	0					
ANR	707927	Identifier	SCANENV_MEM_NODES		707879	0					
ANR	707928	ArgumentList	env		707879	1					
ANR	707929	Argument	env		707879	0					
ANR	707930	Identifier	env		707879	0					
ANR	707931	IdentifierDeclStatement	BRefNode * br = NBREF ( node ) ;	2036:6:47319:47345	707879	3	True				
ANR	707932	IdentifierDecl	* br = NBREF ( node )		707879	0					
ANR	707933	IdentifierDeclType	BRefNode *		707879	0					
ANR	707934	Identifier	br		707879	1					
ANR	707935	AssignmentExpression	* br = NBREF ( node )		707879	2		=			
ANR	707936	Identifier	br		707879	0					
ANR	707937	CallExpression	NBREF ( node )		707879	1					
ANR	707938	Callee	NBREF		707879	0					
ANR	707939	Identifier	NBREF		707879	0					
ANR	707940	ArgumentList	node		707879	1					
ANR	707941	Argument	node		707879	0					
ANR	707942	Identifier	node		707879	0					
ANR	707943	IfStatement	if ( br -> state & NST_RECURSION )		707879	4					
ANR	707944	Condition	br -> state & NST_RECURSION	2037:10:47357:47381	707879	0	True				
ANR	707945	BitAndExpression	br -> state & NST_RECURSION		707879	0		&			
ANR	707946	PtrMemberAccess	br -> state		707879	0					
ANR	707947	Identifier	br		707879	0					
ANR	707948	Identifier	state		707879	1					
ANR	707949	Identifier	NST_RECURSION		707879	1					
ANR	707950	BreakStatement	break ;	2037:37:47384:47389	707879	1	True				
ANR	707951	ExpressionStatement	backs = BACKREFS_P ( br )	2039:6:47398:47420	707879	5	True				
ANR	707952	AssignmentExpression	backs = BACKREFS_P ( br )		707879	0		=			
ANR	707953	Identifier	backs		707879	0					
ANR	707954	CallExpression	BACKREFS_P ( br )		707879	1					
ANR	707955	Callee	BACKREFS_P		707879	0					
ANR	707956	Identifier	BACKREFS_P		707879	0					
ANR	707957	ArgumentList	br		707879	1					
ANR	707958	Argument	br		707879	0					
ANR	707959	Identifier	br		707879	0					
ANR	707960	IfStatement	if ( backs [ 0 ] > env -> num_mem )		707879	6					
ANR	707961	Condition	backs [ 0 ] > env -> num_mem	2040:10:47432:47454	707879	0	True				
ANR	707962	RelationalExpression	backs [ 0 ] > env -> num_mem		707879	0		>			
ANR	707963	ArrayIndexing	backs [ 0 ]		707879	0					
ANR	707964	Identifier	backs		707879	0					
ANR	707965	PrimaryExpression	0		707879	1					
ANR	707966	PtrMemberAccess	env -> num_mem		707879	1					
ANR	707967	Identifier	env		707879	0					
ANR	707968	Identifier	num_mem		707879	1					
ANR	707969	ReturnStatement	return ONIGERR_INVALID_BACKREF ;	2040:36:47458:47488	707879	1	True				
ANR	707970	Identifier	ONIGERR_INVALID_BACKREF		707879	0					
ANR	707971	ExpressionStatement	"r = get_min_match_length ( nodes [ backs [ 0 ] ] , min , env )"	2041:6:47496:47547	707879	7	True				
ANR	707972	AssignmentExpression	"r = get_min_match_length ( nodes [ backs [ 0 ] ] , min , env )"		707879	0		=			
ANR	707973	Identifier	r		707879	0					
ANR	707974	CallExpression	"get_min_match_length ( nodes [ backs [ 0 ] ] , min , env )"		707879	1					
ANR	707975	Callee	get_min_match_length		707879	0					
ANR	707976	Identifier	get_min_match_length		707879	0					
ANR	707977	ArgumentList	nodes [ backs [ 0 ] ]		707879	1					
ANR	707978	Argument	nodes [ backs [ 0 ] ]		707879	0					
ANR	707979	ArrayIndexing	nodes [ backs [ 0 ] ]		707879	0					
ANR	707980	Identifier	nodes		707879	0					
ANR	707981	ArrayIndexing	backs [ 0 ]		707879	1					
ANR	707982	Identifier	backs		707879	0					
ANR	707983	PrimaryExpression	0		707879	1					
ANR	707984	Argument	min		707879	1					
ANR	707985	Identifier	min		707879	0					
ANR	707986	Argument	env		707879	2					
ANR	707987	Identifier	env		707879	0					
ANR	707988	IfStatement	if ( r != 0 )		707879	8					
ANR	707989	Condition	r != 0	2042:10:47559:47564	707879	0	True				
ANR	707990	EqualityExpression	r != 0		707879	0		!=			
ANR	707991	Identifier	r		707879	0					
ANR	707992	PrimaryExpression	0		707879	1					
ANR	707993	BreakStatement	break ;	2042:18:47567:47572	707879	1	True				
ANR	707994	ForStatement	for ( i = 1 ; i < br -> back_num ; i ++ )		707879	9					
ANR	707995	ForInit	i = 1 ;	2043:11:47585:47590	707879	0	True				
ANR	707996	AssignmentExpression	i = 1		707879	0		=			
ANR	707997	Identifier	i		707879	0					
ANR	707998	PrimaryExpression	1		707879	1					
ANR	707999	Condition	i < br -> back_num	2043:18:47592:47607	707879	1	True				
ANR	708000	RelationalExpression	i < br -> back_num		707879	0		<			
ANR	708001	Identifier	i		707879	0					
ANR	708002	PtrMemberAccess	br -> back_num		707879	1					
ANR	708003	Identifier	br		707879	0					
ANR	708004	Identifier	back_num		707879	1					
ANR	708005	PostIncDecOperationExpression	i ++	2043:36:47610:47612	707879	2	True				
ANR	708006	Identifier	i		707879	0					
ANR	708007	IncDec	++		707879	1					
ANR	708008	CompoundStatement		19:41:473:473	707879	3					
ANR	708009	IfStatement	if ( backs [ i ] > env -> num_mem )		707879	0					
ANR	708010	Condition	backs [ i ] > env -> num_mem	2044:5:47622:47644	707879	0	True				
ANR	708011	RelationalExpression	backs [ i ] > env -> num_mem		707879	0		>			
ANR	708012	ArrayIndexing	backs [ i ]		707879	0					
ANR	708013	Identifier	backs		707879	0					
ANR	708014	Identifier	i		707879	1					
ANR	708015	PtrMemberAccess	env -> num_mem		707879	1					
ANR	708016	Identifier	env		707879	0					
ANR	708017	Identifier	num_mem		707879	1					
ANR	708018	ReturnStatement	return ONIGERR_INVALID_BACKREF ;	2044:31:47648:47678	707879	1	True				
ANR	708019	Identifier	ONIGERR_INVALID_BACKREF		707879	0					
ANR	708020	ExpressionStatement	"r = get_min_match_length ( nodes [ backs [ i ] ] , & tmin , env )"	2045:1:47681:47734	707879	1	True				
ANR	708021	AssignmentExpression	"r = get_min_match_length ( nodes [ backs [ i ] ] , & tmin , env )"		707879	0		=			
ANR	708022	Identifier	r		707879	0					
ANR	708023	CallExpression	"get_min_match_length ( nodes [ backs [ i ] ] , & tmin , env )"		707879	1					
ANR	708024	Callee	get_min_match_length		707879	0					
ANR	708025	Identifier	get_min_match_length		707879	0					
ANR	708026	ArgumentList	nodes [ backs [ i ] ]		707879	1					
ANR	708027	Argument	nodes [ backs [ i ] ]		707879	0					
ANR	708028	ArrayIndexing	nodes [ backs [ i ] ]		707879	0					
ANR	708029	Identifier	nodes		707879	0					
ANR	708030	ArrayIndexing	backs [ i ]		707879	1					
ANR	708031	Identifier	backs		707879	0					
ANR	708032	Identifier	i		707879	1					
ANR	708033	Argument	& tmin		707879	1					
ANR	708034	UnaryOperationExpression	& tmin		707879	0					
ANR	708035	UnaryOperator	&		707879	0					
ANR	708036	Identifier	tmin		707879	1					
ANR	708037	Argument	env		707879	2					
ANR	708038	Identifier	env		707879	0					
ANR	708039	IfStatement	if ( r != 0 )		707879	2					
ANR	708040	Condition	r != 0	2046:5:47741:47746	707879	0	True				
ANR	708041	EqualityExpression	r != 0		707879	0		!=			
ANR	708042	Identifier	r		707879	0					
ANR	708043	PrimaryExpression	0		707879	1					
ANR	708044	BreakStatement	break ;	2046:13:47749:47754	707879	1	True				
ANR	708045	IfStatement	if ( * min > tmin )		707879	3					
ANR	708046	Condition	* min > tmin	2047:5:47761:47771	707879	0	True				
ANR	708047	RelationalExpression	* min > tmin		707879	0		>			
ANR	708048	UnaryOperationExpression	* min		707879	0					
ANR	708049	UnaryOperator	*		707879	0					
ANR	708050	Identifier	min		707879	1					
ANR	708051	Identifier	tmin		707879	1					
ANR	708052	ExpressionStatement	* min = tmin	2047:18:47774:47785	707879	1	True				
ANR	708053	AssignmentExpression	* min = tmin		707879	0		=			
ANR	708054	UnaryOperationExpression	* min		707879	0					
ANR	708055	UnaryOperator	*		707879	0					
ANR	708056	Identifier	min		707879	1					
ANR	708057	Identifier	tmin		707879	1					
ANR	708058	BreakStatement	break ;	2050:4:47805:47810	707879	2	True				
ANR	708059	Label	case NT_CALL :	2053:2:47838:47850	707879	3	True				
ANR	708060	Identifier	NT_CALL		707879	0					
ANR	708061	IfStatement	if ( IS_CALL_RECURSION ( NCALL ( node ) ) )		707879	4					
ANR	708062	Condition	IS_CALL_RECURSION ( NCALL ( node ) )	2054:8:47860:47889	707879	0	True				
ANR	708063	CallExpression	IS_CALL_RECURSION ( NCALL ( node ) )		707879	0					
ANR	708064	Callee	IS_CALL_RECURSION		707879	0					
ANR	708065	Identifier	IS_CALL_RECURSION		707879	0					
ANR	708066	ArgumentList	NCALL ( node )		707879	1					
ANR	708067	Argument	NCALL ( node )		707879	0					
ANR	708068	CallExpression	NCALL ( node )		707879	0					
ANR	708069	Callee	NCALL		707879	0					
ANR	708070	Identifier	NCALL		707879	0					
ANR	708071	ArgumentList	node		707879	1					
ANR	708072	Argument	node		707879	0					
ANR	708073	Identifier	node		707879	0					
ANR	708074	CompoundStatement		31:6:758:805	707879	1					
ANR	708075	IdentifierDeclStatement	EncloseNode * en = NENCLOSE ( NCALL ( node ) -> target ) ;	2055:6:47900:47947	707879	0	True				
ANR	708076	IdentifierDecl	* en = NENCLOSE ( NCALL ( node ) -> target )		707879	0					
ANR	708077	IdentifierDeclType	EncloseNode *		707879	0					
ANR	708078	Identifier	en		707879	1					
ANR	708079	AssignmentExpression	* en = NENCLOSE ( NCALL ( node ) -> target )		707879	2		=			
ANR	708080	Identifier	en		707879	0					
ANR	708081	CallExpression	NENCLOSE ( NCALL ( node ) -> target )		707879	1					
ANR	708082	Callee	NENCLOSE		707879	0					
ANR	708083	Identifier	NENCLOSE		707879	0					
ANR	708084	ArgumentList	NCALL ( node ) -> target		707879	1					
ANR	708085	Argument	NCALL ( node ) -> target		707879	0					
ANR	708086	PtrMemberAccess	NCALL ( node ) -> target		707879	0					
ANR	708087	CallExpression	NCALL ( node )		707879	0					
ANR	708088	Callee	NCALL		707879	0					
ANR	708089	Identifier	NCALL		707879	0					
ANR	708090	ArgumentList	node		707879	1					
ANR	708091	Argument	node		707879	0					
ANR	708092	Identifier	node		707879	0					
ANR	708093	Identifier	target		707879	1					
ANR	708094	IfStatement	if ( IS_ENCLOSE_MIN_FIXED ( en ) )		707879	1					
ANR	708095	Condition	IS_ENCLOSE_MIN_FIXED ( en )	2056:10:47959:47982	707879	0	True				
ANR	708096	CallExpression	IS_ENCLOSE_MIN_FIXED ( en )		707879	0					
ANR	708097	Callee	IS_ENCLOSE_MIN_FIXED		707879	0					
ANR	708098	Identifier	IS_ENCLOSE_MIN_FIXED		707879	0					
ANR	708099	ArgumentList	en		707879	1					
ANR	708100	Argument	en		707879	0					
ANR	708101	Identifier	en		707879	0					
ANR	708102	ExpressionStatement	* min = en -> min_len	2057:1:47986:48004	707879	1	True				
ANR	708103	AssignmentExpression	* min = en -> min_len		707879	0		=			
ANR	708104	UnaryOperationExpression	* min		707879	0					
ANR	708105	UnaryOperator	*		707879	0					
ANR	708106	Identifier	min		707879	1					
ANR	708107	PtrMemberAccess	en -> min_len		707879	1					
ANR	708108	Identifier	en		707879	0					
ANR	708109	Identifier	min_len		707879	1					
ANR	708110	ElseStatement	else		707879	0					
ANR	708111	ExpressionStatement	"r = get_min_match_length ( NCALL ( node ) -> target , min , env )"	2060:6:48027:48082	707879	0	True				
ANR	708112	AssignmentExpression	"r = get_min_match_length ( NCALL ( node ) -> target , min , env )"		707879	0		=			
ANR	708113	Identifier	r		707879	0					
ANR	708114	CallExpression	"get_min_match_length ( NCALL ( node ) -> target , min , env )"		707879	1					
ANR	708115	Callee	get_min_match_length		707879	0					
ANR	708116	Identifier	get_min_match_length		707879	0					
ANR	708117	ArgumentList	NCALL ( node ) -> target		707879	1					
ANR	708118	Argument	NCALL ( node ) -> target		707879	0					
ANR	708119	PtrMemberAccess	NCALL ( node ) -> target		707879	0					
ANR	708120	CallExpression	NCALL ( node )		707879	0					
ANR	708121	Callee	NCALL		707879	0					
ANR	708122	Identifier	NCALL		707879	0					
ANR	708123	ArgumentList	node		707879	1					
ANR	708124	Argument	node		707879	0					
ANR	708125	Identifier	node		707879	0					
ANR	708126	Identifier	target		707879	1					
ANR	708127	Argument	min		707879	1					
ANR	708128	Identifier	min		707879	0					
ANR	708129	Argument	env		707879	2					
ANR	708130	Identifier	env		707879	0					
ANR	708131	BreakStatement	break ;	2061:4:48088:48093	707879	5	True				
ANR	708132	Label	case NT_LIST :	2064:2:48105:48117	707879	6	True				
ANR	708133	Identifier	NT_LIST		707879	0					
ANR	708134	DoStatement	do		707879	7					
ANR	708135	CompoundStatement		41:7:984:984	707879	0					
ANR	708136	ExpressionStatement	"r = get_min_match_length ( NCAR ( node ) , & tmin , env )"	2066:6:48134:48182	707879	0	True				
ANR	708137	AssignmentExpression	"r = get_min_match_length ( NCAR ( node ) , & tmin , env )"		707879	0		=			
ANR	708138	Identifier	r		707879	0					
ANR	708139	CallExpression	"get_min_match_length ( NCAR ( node ) , & tmin , env )"		707879	1					
ANR	708140	Callee	get_min_match_length		707879	0					
ANR	708141	Identifier	get_min_match_length		707879	0					
ANR	708142	ArgumentList	NCAR ( node )		707879	1					
ANR	708143	Argument	NCAR ( node )		707879	0					
ANR	708144	CallExpression	NCAR ( node )		707879	0					
ANR	708145	Callee	NCAR		707879	0					
ANR	708146	Identifier	NCAR		707879	0					
ANR	708147	ArgumentList	node		707879	1					
ANR	708148	Argument	node		707879	0					
ANR	708149	Identifier	node		707879	0					
ANR	708150	Argument	& tmin		707879	1					
ANR	708151	UnaryOperationExpression	& tmin		707879	0					
ANR	708152	UnaryOperator	&		707879	0					
ANR	708153	Identifier	tmin		707879	1					
ANR	708154	Argument	env		707879	2					
ANR	708155	Identifier	env		707879	0					
ANR	708156	IfStatement	if ( r == 0 )		707879	1					
ANR	708157	Condition	r == 0	2067:10:48194:48199	707879	0	True				
ANR	708158	EqualityExpression	r == 0		707879	0		==			
ANR	708159	Identifier	r		707879	0					
ANR	708160	PrimaryExpression	0		707879	1					
ANR	708161	ExpressionStatement	* min += tmin	2067:18:48202:48214	707879	1	True				
ANR	708162	AssignmentExpression	* min += tmin		707879	0		+=			
ANR	708163	UnaryOperationExpression	* min		707879	0					
ANR	708164	UnaryOperator	*		707879	0					
ANR	708165	Identifier	min		707879	1					
ANR	708166	Identifier	tmin		707879	1					
ANR	708167	Condition	r == 0 && IS_NOT_NULL ( node = NCDR ( node ) )	2068:13:48229:48268	707879	1	True				
ANR	708168	AndExpression	r == 0 && IS_NOT_NULL ( node = NCDR ( node ) )		707879	0		&&			
ANR	708169	EqualityExpression	r == 0		707879	0		==			
ANR	708170	Identifier	r		707879	0					
ANR	708171	PrimaryExpression	0		707879	1					
ANR	708172	CallExpression	IS_NOT_NULL ( node = NCDR ( node ) )		707879	1					
ANR	708173	Callee	IS_NOT_NULL		707879	0					
ANR	708174	Identifier	IS_NOT_NULL		707879	0					
ANR	708175	ArgumentList	node = NCDR ( node )		707879	1					
ANR	708176	Argument	node = NCDR ( node )		707879	0					
ANR	708177	AssignmentExpression	node = NCDR ( node )		707879	0		=			
ANR	708178	Identifier	node		707879	0					
ANR	708179	CallExpression	NCDR ( node )		707879	1					
ANR	708180	Callee	NCDR		707879	0					
ANR	708181	Identifier	NCDR		707879	0					
ANR	708182	ArgumentList	node		707879	1					
ANR	708183	Argument	node		707879	0					
ANR	708184	Identifier	node		707879	0					
ANR	708185	BreakStatement	break ;	2069:4:48276:48281	707879	8	True				
ANR	708186	Label	case NT_ALT :	2071:2:48286:48297	707879	9	True				
ANR	708187	Identifier	NT_ALT		707879	0					
ANR	708188	CompoundStatement		49:6:1169:1180	707879	10					
ANR	708189	IdentifierDeclStatement	"Node * x , * y ;"	2073:6:48311:48322	707879	0	True				
ANR	708190	IdentifierDecl	* x		707879	0					
ANR	708191	IdentifierDeclType	Node *		707879	0					
ANR	708192	Identifier	x		707879	1					
ANR	708193	IdentifierDecl	* y		707879	1					
ANR	708194	IdentifierDeclType	Node *		707879	0					
ANR	708195	Identifier	y		707879	1					
ANR	708196	ExpressionStatement	y = node	2074:6:48330:48338	707879	1	True				
ANR	708197	AssignmentExpression	y = node		707879	0		=			
ANR	708198	Identifier	y		707879	0					
ANR	708199	Identifier	node		707879	1					
ANR	708200	DoStatement	do		707879	2					
ANR	708201	CompoundStatement		51:9:1207:1207	707879	0					
ANR	708202	ExpressionStatement	x = NCAR ( y )	2076:1:48352:48363	707879	0	True				
ANR	708203	AssignmentExpression	x = NCAR ( y )		707879	0		=			
ANR	708204	Identifier	x		707879	0					
ANR	708205	CallExpression	NCAR ( y )		707879	1					
ANR	708206	Callee	NCAR		707879	0					
ANR	708207	Identifier	NCAR		707879	0					
ANR	708208	ArgumentList	y		707879	1					
ANR	708209	Argument	y		707879	0					
ANR	708210	Identifier	y		707879	0					
ANR	708211	ExpressionStatement	"r = get_min_match_length ( x , & tmin , env )"	2077:1:48366:48405	707879	1	True				
ANR	708212	AssignmentExpression	"r = get_min_match_length ( x , & tmin , env )"		707879	0		=			
ANR	708213	Identifier	r		707879	0					
ANR	708214	CallExpression	"get_min_match_length ( x , & tmin , env )"		707879	1					
ANR	708215	Callee	get_min_match_length		707879	0					
ANR	708216	Identifier	get_min_match_length		707879	0					
ANR	708217	ArgumentList	x		707879	1					
ANR	708218	Argument	x		707879	0					
ANR	708219	Identifier	x		707879	0					
ANR	708220	Argument	& tmin		707879	1					
ANR	708221	UnaryOperationExpression	& tmin		707879	0					
ANR	708222	UnaryOperator	&		707879	0					
ANR	708223	Identifier	tmin		707879	1					
ANR	708224	Argument	env		707879	2					
ANR	708225	Identifier	env		707879	0					
ANR	708226	IfStatement	if ( r != 0 )		707879	2					
ANR	708227	Condition	r != 0	2078:5:48412:48417	707879	0	True				
ANR	708228	EqualityExpression	r != 0		707879	0		!=			
ANR	708229	Identifier	r		707879	0					
ANR	708230	PrimaryExpression	0		707879	1					
ANR	708231	BreakStatement	break ;	2078:13:48420:48425	707879	1	True				
ANR	708232	IfStatement	if ( y == node )		707879	3					
ANR	708233	Condition	y == node	2079:5:48432:48440	707879	0	True				
ANR	708234	EqualityExpression	y == node		707879	0		==			
ANR	708235	Identifier	y		707879	0					
ANR	708236	Identifier	node		707879	1					
ANR	708237	ExpressionStatement	* min = tmin	2079:16:48443:48454	707879	1	True				
ANR	708238	AssignmentExpression	* min = tmin		707879	0		=			
ANR	708239	UnaryOperationExpression	* min		707879	0					
ANR	708240	UnaryOperator	*		707879	0					
ANR	708241	Identifier	min		707879	1					
ANR	708242	Identifier	tmin		707879	1					
ANR	708243	ElseStatement	else		707879	0					
ANR	708244	IfStatement	if ( * min > tmin )		707879	0					
ANR	708245	Condition	* min > tmin	2080:10:48466:48476	707879	0	True				
ANR	708246	RelationalExpression	* min > tmin		707879	0		>			
ANR	708247	UnaryOperationExpression	* min		707879	0					
ANR	708248	UnaryOperator	*		707879	0					
ANR	708249	Identifier	min		707879	1					
ANR	708250	Identifier	tmin		707879	1					
ANR	708251	ExpressionStatement	* min = tmin	2080:23:48479:48490	707879	1	True				
ANR	708252	AssignmentExpression	* min = tmin		707879	0		=			
ANR	708253	UnaryOperationExpression	* min		707879	0					
ANR	708254	UnaryOperator	*		707879	0					
ANR	708255	Identifier	min		707879	1					
ANR	708256	Identifier	tmin		707879	1					
ANR	708257	Condition	r == 0 && IS_NOT_NULL ( y = NCDR ( y ) )	2081:15:48507:48540	707879	1	True				
ANR	708258	AndExpression	r == 0 && IS_NOT_NULL ( y = NCDR ( y ) )		707879	0		&&			
ANR	708259	EqualityExpression	r == 0		707879	0		==			
ANR	708260	Identifier	r		707879	0					
ANR	708261	PrimaryExpression	0		707879	1					
ANR	708262	CallExpression	IS_NOT_NULL ( y = NCDR ( y ) )		707879	1					
ANR	708263	Callee	IS_NOT_NULL		707879	0					
ANR	708264	Identifier	IS_NOT_NULL		707879	0					
ANR	708265	ArgumentList	y = NCDR ( y )		707879	1					
ANR	708266	Argument	y = NCDR ( y )		707879	0					
ANR	708267	AssignmentExpression	y = NCDR ( y )		707879	0		=			
ANR	708268	Identifier	y		707879	0					
ANR	708269	CallExpression	NCDR ( y )		707879	1					
ANR	708270	Callee	NCDR		707879	0					
ANR	708271	Identifier	NCDR		707879	0					
ANR	708272	ArgumentList	y		707879	1					
ANR	708273	Argument	y		707879	0					
ANR	708274	Identifier	y		707879	0					
ANR	708275	BreakStatement	break ;	2083:4:48554:48559	707879	11	True				
ANR	708276	Label	case NT_STR :	2085:2:48564:48575	707879	12	True				
ANR	708277	Identifier	NT_STR		707879	0					
ANR	708278	CompoundStatement		63:6:1447:1471	707879	13					
ANR	708279	IdentifierDeclStatement	StrNode * sn = NSTR ( node ) ;	2087:6:48589:48613	707879	0	True				
ANR	708280	IdentifierDecl	* sn = NSTR ( node )		707879	0					
ANR	708281	IdentifierDeclType	StrNode *		707879	0					
ANR	708282	Identifier	sn		707879	1					
ANR	708283	AssignmentExpression	* sn = NSTR ( node )		707879	2		=			
ANR	708284	Identifier	sn		707879	0					
ANR	708285	CallExpression	NSTR ( node )		707879	1					
ANR	708286	Callee	NSTR		707879	0					
ANR	708287	Identifier	NSTR		707879	0					
ANR	708288	ArgumentList	node		707879	1					
ANR	708289	Argument	node		707879	0					
ANR	708290	Identifier	node		707879	0					
ANR	708291	ExpressionStatement	* min = sn -> end - sn -> s	2088:6:48621:48643	707879	1	True				
ANR	708292	AssignmentExpression	* min = sn -> end - sn -> s		707879	0		=			
ANR	708293	UnaryOperationExpression	* min		707879	0					
ANR	708294	UnaryOperator	*		707879	0					
ANR	708295	Identifier	min		707879	1					
ANR	708296	AdditiveExpression	sn -> end - sn -> s		707879	1		-			
ANR	708297	PtrMemberAccess	sn -> end		707879	0					
ANR	708298	Identifier	sn		707879	0					
ANR	708299	Identifier	end		707879	1					
ANR	708300	PtrMemberAccess	sn -> s		707879	1					
ANR	708301	Identifier	sn		707879	0					
ANR	708302	Identifier	s		707879	1					
ANR	708303	BreakStatement	break ;	2090:4:48655:48660	707879	14	True				
ANR	708304	Label	case NT_CTYPE :	2092:2:48665:48678	707879	15	True				
ANR	708305	Identifier	NT_CTYPE		707879	0					
ANR	708306	ExpressionStatement	* min = 1	2093:4:48684:48692	707879	16	True				
ANR	708307	AssignmentExpression	* min = 1		707879	0		=			
ANR	708308	UnaryOperationExpression	* min		707879	0					
ANR	708309	UnaryOperator	*		707879	0					
ANR	708310	Identifier	min		707879	1					
ANR	708311	PrimaryExpression	1		707879	1					
ANR	708312	BreakStatement	break ;	2094:4:48698:48703	707879	17	True				
ANR	708313	Label	case NT_CCLASS :	2096:2:48708:48722	707879	18	True				
ANR	708314	Identifier	NT_CCLASS		707879	0					
ANR	708315	Label	case NT_CANY :	2097:2:48726:48738	707879	19	True				
ANR	708316	Identifier	NT_CANY		707879	0					
ANR	708317	ExpressionStatement	* min = 1	2098:4:48744:48752	707879	20	True				
ANR	708318	AssignmentExpression	* min = 1		707879	0		=			
ANR	708319	UnaryOperationExpression	* min		707879	0					
ANR	708320	UnaryOperator	*		707879	0					
ANR	708321	Identifier	min		707879	1					
ANR	708322	PrimaryExpression	1		707879	1					
ANR	708323	BreakStatement	break ;	2099:4:48758:48763	707879	21	True				
ANR	708324	Label	case NT_QTFR :	2101:2:48768:48780	707879	22	True				
ANR	708325	Identifier	NT_QTFR		707879	0					
ANR	708326	CompoundStatement		79:6:1652:1678	707879	23					
ANR	708327	IdentifierDeclStatement	QtfrNode * qn = NQTFR ( node ) ;	2103:6:48794:48820	707879	0	True				
ANR	708328	IdentifierDecl	* qn = NQTFR ( node )		707879	0					
ANR	708329	IdentifierDeclType	QtfrNode *		707879	0					
ANR	708330	Identifier	qn		707879	1					
ANR	708331	AssignmentExpression	* qn = NQTFR ( node )		707879	2		=			
ANR	708332	Identifier	qn		707879	0					
ANR	708333	CallExpression	NQTFR ( node )		707879	1					
ANR	708334	Callee	NQTFR		707879	0					
ANR	708335	Identifier	NQTFR		707879	0					
ANR	708336	ArgumentList	node		707879	1					
ANR	708337	Argument	node		707879	0					
ANR	708338	Identifier	node		707879	0					
ANR	708339	IfStatement	if ( qn -> lower > 0 )		707879	1					
ANR	708340	Condition	qn -> lower > 0	2105:10:48833:48845	707879	0	True				
ANR	708341	RelationalExpression	qn -> lower > 0		707879	0		>			
ANR	708342	PtrMemberAccess	qn -> lower		707879	0					
ANR	708343	Identifier	qn		707879	0					
ANR	708344	Identifier	lower		707879	1					
ANR	708345	PrimaryExpression	0		707879	1					
ANR	708346	CompoundStatement		81:25:1706:1706	707879	1					
ANR	708347	ExpressionStatement	"r = get_min_match_length ( qn -> target , min , env )"	2106:1:48851:48897	707879	0	True				
ANR	708348	AssignmentExpression	"r = get_min_match_length ( qn -> target , min , env )"		707879	0		=			
ANR	708349	Identifier	r		707879	0					
ANR	708350	CallExpression	"get_min_match_length ( qn -> target , min , env )"		707879	1					
ANR	708351	Callee	get_min_match_length		707879	0					
ANR	708352	Identifier	get_min_match_length		707879	0					
ANR	708353	ArgumentList	qn -> target		707879	1					
ANR	708354	Argument	qn -> target		707879	0					
ANR	708355	PtrMemberAccess	qn -> target		707879	0					
ANR	708356	Identifier	qn		707879	0					
ANR	708357	Identifier	target		707879	1					
ANR	708358	Argument	min		707879	1					
ANR	708359	Identifier	min		707879	0					
ANR	708360	Argument	env		707879	2					
ANR	708361	Identifier	env		707879	0					
ANR	708362	IfStatement	if ( r == 0 )		707879	1					
ANR	708363	Condition	r == 0	2107:5:48904:48909	707879	0	True				
ANR	708364	EqualityExpression	r == 0		707879	0		==			
ANR	708365	Identifier	r		707879	0					
ANR	708366	PrimaryExpression	0		707879	1					
ANR	708367	ExpressionStatement	"* min = distance_multiply ( * min , qn -> lower )"	2108:3:48915:48956	707879	1	True				
ANR	708368	AssignmentExpression	"* min = distance_multiply ( * min , qn -> lower )"		707879	0		=			
ANR	708369	UnaryOperationExpression	* min		707879	0					
ANR	708370	UnaryOperator	*		707879	0					
ANR	708371	Identifier	min		707879	1					
ANR	708372	CallExpression	"distance_multiply ( * min , qn -> lower )"		707879	1					
ANR	708373	Callee	distance_multiply		707879	0					
ANR	708374	Identifier	distance_multiply		707879	0					
ANR	708375	ArgumentList	* min		707879	1					
ANR	708376	Argument	* min		707879	0					
ANR	708377	UnaryOperationExpression	* min		707879	0					
ANR	708378	UnaryOperator	*		707879	0					
ANR	708379	Identifier	min		707879	1					
ANR	708380	Argument	qn -> lower		707879	1					
ANR	708381	PtrMemberAccess	qn -> lower		707879	0					
ANR	708382	Identifier	qn		707879	0					
ANR	708383	Identifier	lower		707879	1					
ANR	708384	BreakStatement	break ;	2111:4:48976:48981	707879	24	True				
ANR	708385	Label	case NT_ENCLOSE :	2113:2:48986:49001	707879	25	True				
ANR	708386	Identifier	NT_ENCLOSE		707879	0					
ANR	708387	CompoundStatement		91:6:1873:1905	707879	26					
ANR	708388	IdentifierDeclStatement	EncloseNode * en = NENCLOSE ( node ) ;	2115:6:49015:49047	707879	0	True				
ANR	708389	IdentifierDecl	* en = NENCLOSE ( node )		707879	0					
ANR	708390	IdentifierDeclType	EncloseNode *		707879	0					
ANR	708391	Identifier	en		707879	1					
ANR	708392	AssignmentExpression	* en = NENCLOSE ( node )		707879	2		=			
ANR	708393	Identifier	en		707879	0					
ANR	708394	CallExpression	NENCLOSE ( node )		707879	1					
ANR	708395	Callee	NENCLOSE		707879	0					
ANR	708396	Identifier	NENCLOSE		707879	0					
ANR	708397	ArgumentList	node		707879	1					
ANR	708398	Argument	node		707879	0					
ANR	708399	Identifier	node		707879	0					
ANR	708400	SwitchStatement	switch ( en -> type )		707879	1					
ANR	708401	Condition	en -> type	2116:14:49063:49070	707879	0	True				
ANR	708402	PtrMemberAccess	en -> type		707879	0					
ANR	708403	Identifier	en		707879	0					
ANR	708404	Identifier	type		707879	1					
ANR	708405	CompoundStatement		92:24:1931:1931	707879	1					
ANR	708406	Label	case ENCLOSE_MEMORY :	2117:6:49081:49100	707879	0	True				
ANR	708407	Identifier	ENCLOSE_MEMORY		707879	0					
ANR	708408	IfStatement	if ( IS_ENCLOSE_MIN_FIXED ( en ) )		707879	1					
ANR	708409	Condition	IS_ENCLOSE_MIN_FIXED ( en )	2119:5:49130:49153	707879	0	True				
ANR	708410	CallExpression	IS_ENCLOSE_MIN_FIXED ( en )		707879	0					
ANR	708411	Callee	IS_ENCLOSE_MIN_FIXED		707879	0					
ANR	708412	Identifier	IS_ENCLOSE_MIN_FIXED		707879	0					
ANR	708413	ArgumentList	en		707879	1					
ANR	708414	Argument	en		707879	0					
ANR	708415	Identifier	en		707879	0					
ANR	708416	ExpressionStatement	* min = en -> min_len	2120:3:49159:49177	707879	1	True				
ANR	708417	AssignmentExpression	* min = en -> min_len		707879	0		=			
ANR	708418	UnaryOperationExpression	* min		707879	0					
ANR	708419	UnaryOperator	*		707879	0					
ANR	708420	Identifier	min		707879	1					
ANR	708421	PtrMemberAccess	en -> min_len		707879	1					
ANR	708422	Identifier	en		707879	0					
ANR	708423	Identifier	min_len		707879	1					
ANR	708424	ElseStatement	else		707879	0					
ANR	708425	CompoundStatement		97:6:2043:2043	707879	0					
ANR	708426	ExpressionStatement	"r = get_min_match_length ( en -> target , min , env )"	2122:3:49190:49236	707879	0	True				
ANR	708427	AssignmentExpression	"r = get_min_match_length ( en -> target , min , env )"		707879	0		=			
ANR	708428	Identifier	r		707879	0					
ANR	708429	CallExpression	"get_min_match_length ( en -> target , min , env )"		707879	1					
ANR	708430	Callee	get_min_match_length		707879	0					
ANR	708431	Identifier	get_min_match_length		707879	0					
ANR	708432	ArgumentList	en -> target		707879	1					
ANR	708433	Argument	en -> target		707879	0					
ANR	708434	PtrMemberAccess	en -> target		707879	0					
ANR	708435	Identifier	en		707879	0					
ANR	708436	Identifier	target		707879	1					
ANR	708437	Argument	min		707879	1					
ANR	708438	Identifier	min		707879	0					
ANR	708439	Argument	env		707879	2					
ANR	708440	Identifier	env		707879	0					
ANR	708441	IfStatement	if ( r == 0 )		707879	1					
ANR	708442	Condition	r == 0	2123:7:49245:49250	707879	0	True				
ANR	708443	EqualityExpression	r == 0		707879	0		==			
ANR	708444	Identifier	r		707879	0					
ANR	708445	PrimaryExpression	0		707879	1					
ANR	708446	CompoundStatement		99:15:2111:2111	707879	1					
ANR	708447	ExpressionStatement	en -> min_len = * min	2124:5:49260:49278	707879	0	True				
ANR	708448	AssignmentExpression	en -> min_len = * min		707879	0		=			
ANR	708449	PtrMemberAccess	en -> min_len		707879	0					
ANR	708450	Identifier	en		707879	0					
ANR	708451	Identifier	min_len		707879	1					
ANR	708452	UnaryOperationExpression	* min		707879	1					
ANR	708453	UnaryOperator	*		707879	0					
ANR	708454	Identifier	min		707879	1					
ANR	708455	ExpressionStatement	"SET_ENCLOSE_STATUS ( node , NST_MIN_FIXED )"	2125:5:49285:49324	707879	1	True				
ANR	708456	CallExpression	"SET_ENCLOSE_STATUS ( node , NST_MIN_FIXED )"		707879	0					
ANR	708457	Callee	SET_ENCLOSE_STATUS		707879	0					
ANR	708458	Identifier	SET_ENCLOSE_STATUS		707879	0					
ANR	708459	ArgumentList	node		707879	1					
ANR	708460	Argument	node		707879	0					
ANR	708461	Identifier	node		707879	0					
ANR	708462	Argument	NST_MIN_FIXED		707879	1					
ANR	708463	Identifier	NST_MIN_FIXED		707879	0					
ANR	708464	BreakStatement	break ;	2128:1:49335:49340	707879	2	True				
ANR	708465	Label	case ENCLOSE_OPTION :	2130:6:49355:49374	707879	3	True				
ANR	708466	Identifier	ENCLOSE_OPTION		707879	0					
ANR	708467	Label	case ENCLOSE_STOP_BACKTRACK :	2131:6:49382:49409	707879	4	True				
ANR	708468	Identifier	ENCLOSE_STOP_BACKTRACK		707879	0					
ANR	708469	ExpressionStatement	"r = get_min_match_length ( en -> target , min , env )"	2132:1:49412:49458	707879	5	True				
ANR	708470	AssignmentExpression	"r = get_min_match_length ( en -> target , min , env )"		707879	0		=			
ANR	708471	Identifier	r		707879	0					
ANR	708472	CallExpression	"get_min_match_length ( en -> target , min , env )"		707879	1					
ANR	708473	Callee	get_min_match_length		707879	0					
ANR	708474	Identifier	get_min_match_length		707879	0					
ANR	708475	ArgumentList	en -> target		707879	1					
ANR	708476	Argument	en -> target		707879	0					
ANR	708477	PtrMemberAccess	en -> target		707879	0					
ANR	708478	Identifier	en		707879	0					
ANR	708479	Identifier	target		707879	1					
ANR	708480	Argument	min		707879	1					
ANR	708481	Identifier	min		707879	0					
ANR	708482	Argument	env		707879	2					
ANR	708483	Identifier	env		707879	0					
ANR	708484	BreakStatement	break ;	2133:1:49461:49466	707879	6	True				
ANR	708485	BreakStatement	break ;	2136:4:49486:49491	707879	27	True				
ANR	708486	Label	case NT_ANCHOR :	2138:2:49496:49510	707879	28	True				
ANR	708487	Identifier	NT_ANCHOR		707879	0					
ANR	708488	Label	default :	2139:2:49514:49521	707879	29	True				
ANR	708489	Identifier	default		707879	0					
ANR	708490	BreakStatement	break ;	2140:4:49527:49532	707879	30	True				
ANR	708491	ReturnStatement	return r ;	2143:2:49541:49549	707879	4	True				
ANR	708492	Identifier	r		707879	0					
ANR	708493	ReturnType	static int		707879	1					
ANR	708494	Identifier	get_min_match_length		707879	2					
ANR	708495	ParameterList	"Node * node , OnigDistance * min , ScanEnv * env"		707879	3					
ANR	708496	Parameter	Node * node	2024:21:47096:47105	707879	0	True				
ANR	708497	ParameterType	Node *		707879	0					
ANR	708498	Identifier	node		707879	1					
ANR	708499	Parameter	OnigDistance * min	2024:33:47108:47124	707879	1	True				
ANR	708500	ParameterType	OnigDistance *		707879	0					
ANR	708501	Identifier	min		707879	1					
ANR	708502	Parameter	ScanEnv * env	2024:52:47127:47138	707879	2	True				
ANR	708503	ParameterType	ScanEnv *		707879	0					
ANR	708504	Identifier	env		707879	1					
ANR	708505	CFGEntryNode	ENTRY		707879		True				
ANR	708506	CFGExitNode	EXIT		707879		True				
ANR	708507	Symbol	br -> back_num		707879						
ANR	708508	Symbol	NCAR		707879						
ANR	708509	Symbol	* sn		707879						
ANR	708510	Symbol	* backs		707879						
ANR	708511	Symbol	NQTFR		707879						
ANR	708512	Symbol	sn -> s		707879						
ANR	708513	Symbol	* br		707879						
ANR	708514	Symbol	en -> type		707879						
ANR	708515	Symbol	* nodes		707879						
ANR	708516	Symbol	SCANENV_MEM_NODES		707879						
ANR	708517	Symbol	qn		707879						
ANR	708518	Symbol	* * i		707879						
ANR	708519	Symbol	NCDR		707879						
ANR	708520	Symbol	NSTR		707879						
ANR	708521	Symbol	* env		707879						
ANR	708522	Symbol	en		707879						
ANR	708523	Symbol	NST_MIN_FIXED		707879						
ANR	708524	Symbol	qn -> target		707879						
ANR	708525	Symbol	distance_multiply		707879						
ANR	708526	Symbol	node		707879						
ANR	708527	Symbol	BACKREFS_P		707879						
ANR	708528	Symbol	get_min_match_length		707879						
ANR	708529	Symbol	IS_CALL_RECURSION		707879						
ANR	708530	Symbol	* min		707879						
ANR	708531	Symbol	en -> min_len		707879						
ANR	708532	Symbol	IS_ENCLOSE_MIN_FIXED		707879						
ANR	708533	Symbol	* qn		707879						
ANR	708534	Symbol	ONIGERR_INVALID_BACKREF		707879						
ANR	708535	Symbol	IS_NOT_NULL		707879						
ANR	708536	Symbol	NCALL		707879						
ANR	708537	Symbol	& tmin		707879						
ANR	708538	Symbol	* en		707879						
ANR	708539	Symbol	br		707879						
ANR	708540	Symbol	qn -> lower		707879						
ANR	708541	Symbol	min		707879						
ANR	708542	Symbol	* * backs		707879						
ANR	708543	Symbol	NBREF		707879						
ANR	708544	Symbol	NST_RECURSION		707879						
ANR	708545	Symbol	NENCLOSE		707879						
ANR	708546	Symbol	NCALL ( node ) -> target		707879						
ANR	708547	Symbol	sn		707879						
ANR	708548	Symbol	sn -> end		707879						
ANR	708549	Symbol	tmin		707879						
ANR	708550	Symbol	env -> num_mem		707879						
ANR	708551	Symbol	i		707879						
ANR	708552	Symbol	env		707879						
ANR	708553	Symbol	r		707879						
ANR	708554	Symbol	nodes		707879						
ANR	708555	Symbol	* i		707879						
ANR	708556	Symbol	en -> target		707879						
ANR	708557	Symbol	x		707879						
ANR	708558	Symbol	br -> state		707879						
ANR	708559	Symbol	y		707879						
ANR	708560	Symbol	NTYPE		707879						
ANR	708561	Symbol	* NCALL		707879						
ANR	708562	Symbol	backs		707879						
ANR	708563	Function	get_max_match_length	2146:0:49554:51955							
ANR	708564	FunctionDef	"get_max_match_length (Node * node , OnigDistance * max , ScanEnv * env)"		708563	0					
ANR	708565	CompoundStatement		2148:0:49631:51955	708563	0					
ANR	708566	IdentifierDeclStatement	OnigDistance tmax ;	2149:2:49635:49652	708563	0	True				
ANR	708567	IdentifierDecl	tmax		708563	0					
ANR	708568	IdentifierDeclType	OnigDistance		708563	0					
ANR	708569	Identifier	tmax		708563	1					
ANR	708570	IdentifierDeclStatement	int r = 0 ;	2150:2:49656:49665	708563	1	True				
ANR	708571	IdentifierDecl	r = 0		708563	0					
ANR	708572	IdentifierDeclType	int		708563	0					
ANR	708573	Identifier	r		708563	1					
ANR	708574	AssignmentExpression	r = 0		708563	2		=			
ANR	708575	Identifier	r		708563	0					
ANR	708576	PrimaryExpression	0		708563	1					
ANR	708577	ExpressionStatement	* max = 0	2152:2:49670:49678	708563	2	True				
ANR	708578	AssignmentExpression	* max = 0		708563	0		=			
ANR	708579	UnaryOperationExpression	* max		708563	0					
ANR	708580	UnaryOperator	*		708563	0					
ANR	708581	Identifier	max		708563	1					
ANR	708582	PrimaryExpression	0		708563	1					
ANR	708583	SwitchStatement	switch ( NTYPE ( node ) )		708563	3					
ANR	708584	Condition	NTYPE ( node )	2153:10:49690:49700	708563	0	True				
ANR	708585	CallExpression	NTYPE ( node )		708563	0					
ANR	708586	Callee	NTYPE		708563	0					
ANR	708587	Identifier	NTYPE		708563	0					
ANR	708588	ArgumentList	node		708563	1					
ANR	708589	Argument	node		708563	0					
ANR	708590	Identifier	node		708563	0					
ANR	708591	CompoundStatement		6:23:71:71	708563	1					
ANR	708592	Label	case NT_LIST :	2154:2:49707:49719	708563	0	True				
ANR	708593	Identifier	NT_LIST		708563	0					
ANR	708594	DoStatement	do		708563	1					
ANR	708595	CompoundStatement		8:7:96:96	708563	0					
ANR	708596	ExpressionStatement	"r = get_max_match_length ( NCAR ( node ) , & tmax , env )"	2156:6:49736:49784	708563	0	True				
ANR	708597	AssignmentExpression	"r = get_max_match_length ( NCAR ( node ) , & tmax , env )"		708563	0		=			
ANR	708598	Identifier	r		708563	0					
ANR	708599	CallExpression	"get_max_match_length ( NCAR ( node ) , & tmax , env )"		708563	1					
ANR	708600	Callee	get_max_match_length		708563	0					
ANR	708601	Identifier	get_max_match_length		708563	0					
ANR	708602	ArgumentList	NCAR ( node )		708563	1					
ANR	708603	Argument	NCAR ( node )		708563	0					
ANR	708604	CallExpression	NCAR ( node )		708563	0					
ANR	708605	Callee	NCAR		708563	0					
ANR	708606	Identifier	NCAR		708563	0					
ANR	708607	ArgumentList	node		708563	1					
ANR	708608	Argument	node		708563	0					
ANR	708609	Identifier	node		708563	0					
ANR	708610	Argument	& tmax		708563	1					
ANR	708611	UnaryOperationExpression	& tmax		708563	0					
ANR	708612	UnaryOperator	&		708563	0					
ANR	708613	Identifier	tmax		708563	1					
ANR	708614	Argument	env		708563	2					
ANR	708615	Identifier	env		708563	0					
ANR	708616	IfStatement	if ( r == 0 )		708563	1					
ANR	708617	Condition	r == 0	2157:10:49796:49801	708563	0	True				
ANR	708618	EqualityExpression	r == 0		708563	0		==			
ANR	708619	Identifier	r		708563	0					
ANR	708620	PrimaryExpression	0		708563	1					
ANR	708621	ExpressionStatement	"* max = distance_add ( * max , tmax )"	2158:1:49805:49836	708563	1	True				
ANR	708622	AssignmentExpression	"* max = distance_add ( * max , tmax )"		708563	0		=			
ANR	708623	UnaryOperationExpression	* max		708563	0					
ANR	708624	UnaryOperator	*		708563	0					
ANR	708625	Identifier	max		708563	1					
ANR	708626	CallExpression	"distance_add ( * max , tmax )"		708563	1					
ANR	708627	Callee	distance_add		708563	0					
ANR	708628	Identifier	distance_add		708563	0					
ANR	708629	ArgumentList	* max		708563	1					
ANR	708630	Argument	* max		708563	0					
ANR	708631	UnaryOperationExpression	* max		708563	0					
ANR	708632	UnaryOperator	*		708563	0					
ANR	708633	Identifier	max		708563	1					
ANR	708634	Argument	tmax		708563	1					
ANR	708635	Identifier	tmax		708563	0					
ANR	708636	Condition	r == 0 && IS_NOT_NULL ( node = NCDR ( node ) )	2159:13:49851:49890	708563	1	True				
ANR	708637	AndExpression	r == 0 && IS_NOT_NULL ( node = NCDR ( node ) )		708563	0		&&			
ANR	708638	EqualityExpression	r == 0		708563	0		==			
ANR	708639	Identifier	r		708563	0					
ANR	708640	PrimaryExpression	0		708563	1					
ANR	708641	CallExpression	IS_NOT_NULL ( node = NCDR ( node ) )		708563	1					
ANR	708642	Callee	IS_NOT_NULL		708563	0					
ANR	708643	Identifier	IS_NOT_NULL		708563	0					
ANR	708644	ArgumentList	node = NCDR ( node )		708563	1					
ANR	708645	Argument	node = NCDR ( node )		708563	0					
ANR	708646	AssignmentExpression	node = NCDR ( node )		708563	0		=			
ANR	708647	Identifier	node		708563	0					
ANR	708648	CallExpression	NCDR ( node )		708563	1					
ANR	708649	Callee	NCDR		708563	0					
ANR	708650	Identifier	NCDR		708563	0					
ANR	708651	ArgumentList	node		708563	1					
ANR	708652	Argument	node		708563	0					
ANR	708653	Identifier	node		708563	0					
ANR	708654	BreakStatement	break ;	2160:4:49898:49903	708563	2	True				
ANR	708655	Label	case NT_ALT :	2162:2:49908:49919	708563	3	True				
ANR	708656	Identifier	NT_ALT		708563	0					
ANR	708657	DoStatement	do		708563	4					
ANR	708658	CompoundStatement		16:7:296:296	708563	0					
ANR	708659	ExpressionStatement	"r = get_max_match_length ( NCAR ( node ) , & tmax , env )"	2164:6:49936:49984	708563	0	True				
ANR	708660	AssignmentExpression	"r = get_max_match_length ( NCAR ( node ) , & tmax , env )"		708563	0		=			
ANR	708661	Identifier	r		708563	0					
ANR	708662	CallExpression	"get_max_match_length ( NCAR ( node ) , & tmax , env )"		708563	1					
ANR	708663	Callee	get_max_match_length		708563	0					
ANR	708664	Identifier	get_max_match_length		708563	0					
ANR	708665	ArgumentList	NCAR ( node )		708563	1					
ANR	708666	Argument	NCAR ( node )		708563	0					
ANR	708667	CallExpression	NCAR ( node )		708563	0					
ANR	708668	Callee	NCAR		708563	0					
ANR	708669	Identifier	NCAR		708563	0					
ANR	708670	ArgumentList	node		708563	1					
ANR	708671	Argument	node		708563	0					
ANR	708672	Identifier	node		708563	0					
ANR	708673	Argument	& tmax		708563	1					
ANR	708674	UnaryOperationExpression	& tmax		708563	0					
ANR	708675	UnaryOperator	&		708563	0					
ANR	708676	Identifier	tmax		708563	1					
ANR	708677	Argument	env		708563	2					
ANR	708678	Identifier	env		708563	0					
ANR	708679	IfStatement	if ( r == 0 && * max < tmax )		708563	1					
ANR	708680	Condition	r == 0 && * max < tmax	2165:10:49996:50016	708563	0	True				
ANR	708681	AndExpression	r == 0 && * max < tmax		708563	0		&&			
ANR	708682	EqualityExpression	r == 0		708563	0		==			
ANR	708683	Identifier	r		708563	0					
ANR	708684	PrimaryExpression	0		708563	1					
ANR	708685	RelationalExpression	* max < tmax		708563	1		<			
ANR	708686	UnaryOperationExpression	* max		708563	0					
ANR	708687	UnaryOperator	*		708563	0					
ANR	708688	Identifier	max		708563	1					
ANR	708689	Identifier	tmax		708563	1					
ANR	708690	ExpressionStatement	* max = tmax	2165:33:50019:50030	708563	1	True				
ANR	708691	AssignmentExpression	* max = tmax		708563	0		=			
ANR	708692	UnaryOperationExpression	* max		708563	0					
ANR	708693	UnaryOperator	*		708563	0					
ANR	708694	Identifier	max		708563	1					
ANR	708695	Identifier	tmax		708563	1					
ANR	708696	Condition	r == 0 && IS_NOT_NULL ( node = NCDR ( node ) )	2166:13:50045:50084	708563	1	True				
ANR	708697	AndExpression	r == 0 && IS_NOT_NULL ( node = NCDR ( node ) )		708563	0		&&			
ANR	708698	EqualityExpression	r == 0		708563	0		==			
ANR	708699	Identifier	r		708563	0					
ANR	708700	PrimaryExpression	0		708563	1					
ANR	708701	CallExpression	IS_NOT_NULL ( node = NCDR ( node ) )		708563	1					
ANR	708702	Callee	IS_NOT_NULL		708563	0					
ANR	708703	Identifier	IS_NOT_NULL		708563	0					
ANR	708704	ArgumentList	node = NCDR ( node )		708563	1					
ANR	708705	Argument	node = NCDR ( node )		708563	0					
ANR	708706	AssignmentExpression	node = NCDR ( node )		708563	0		=			
ANR	708707	Identifier	node		708563	0					
ANR	708708	CallExpression	NCDR ( node )		708563	1					
ANR	708709	Callee	NCDR		708563	0					
ANR	708710	Identifier	NCDR		708563	0					
ANR	708711	ArgumentList	node		708563	1					
ANR	708712	Argument	node		708563	0					
ANR	708713	Identifier	node		708563	0					
ANR	708714	BreakStatement	break ;	2167:4:50092:50097	708563	5	True				
ANR	708715	Label	case NT_STR :	2169:2:50102:50113	708563	6	True				
ANR	708716	Identifier	NT_STR		708563	0					
ANR	708717	CompoundStatement		24:6:495:519	708563	7					
ANR	708718	IdentifierDeclStatement	StrNode * sn = NSTR ( node ) ;	2171:6:50127:50151	708563	0	True				
ANR	708719	IdentifierDecl	* sn = NSTR ( node )		708563	0					
ANR	708720	IdentifierDeclType	StrNode *		708563	0					
ANR	708721	Identifier	sn		708563	1					
ANR	708722	AssignmentExpression	* sn = NSTR ( node )		708563	2		=			
ANR	708723	Identifier	sn		708563	0					
ANR	708724	CallExpression	NSTR ( node )		708563	1					
ANR	708725	Callee	NSTR		708563	0					
ANR	708726	Identifier	NSTR		708563	0					
ANR	708727	ArgumentList	node		708563	1					
ANR	708728	Argument	node		708563	0					
ANR	708729	Identifier	node		708563	0					
ANR	708730	ExpressionStatement	* max = sn -> end - sn -> s	2172:6:50159:50181	708563	1	True				
ANR	708731	AssignmentExpression	* max = sn -> end - sn -> s		708563	0		=			
ANR	708732	UnaryOperationExpression	* max		708563	0					
ANR	708733	UnaryOperator	*		708563	0					
ANR	708734	Identifier	max		708563	1					
ANR	708735	AdditiveExpression	sn -> end - sn -> s		708563	1		-			
ANR	708736	PtrMemberAccess	sn -> end		708563	0					
ANR	708737	Identifier	sn		708563	0					
ANR	708738	Identifier	end		708563	1					
ANR	708739	PtrMemberAccess	sn -> s		708563	1					
ANR	708740	Identifier	sn		708563	0					
ANR	708741	Identifier	s		708563	1					
ANR	708742	BreakStatement	break ;	2174:4:50193:50198	708563	8	True				
ANR	708743	Label	case NT_CTYPE :	2176:2:50203:50216	708563	9	True				
ANR	708744	Identifier	NT_CTYPE		708563	0					
ANR	708745	ExpressionStatement	* max = ONIGENC_MBC_MAXLEN_DIST ( env -> enc )	2177:4:50222:50262	708563	10	True				
ANR	708746	AssignmentExpression	* max = ONIGENC_MBC_MAXLEN_DIST ( env -> enc )		708563	0		=			
ANR	708747	UnaryOperationExpression	* max		708563	0					
ANR	708748	UnaryOperator	*		708563	0					
ANR	708749	Identifier	max		708563	1					
ANR	708750	CallExpression	ONIGENC_MBC_MAXLEN_DIST ( env -> enc )		708563	1					
ANR	708751	Callee	ONIGENC_MBC_MAXLEN_DIST		708563	0					
ANR	708752	Identifier	ONIGENC_MBC_MAXLEN_DIST		708563	0					
ANR	708753	ArgumentList	env -> enc		708563	1					
ANR	708754	Argument	env -> enc		708563	0					
ANR	708755	PtrMemberAccess	env -> enc		708563	0					
ANR	708756	Identifier	env		708563	0					
ANR	708757	Identifier	enc		708563	1					
ANR	708758	BreakStatement	break ;	2178:4:50268:50273	708563	11	True				
ANR	708759	Label	case NT_CCLASS :	2180:2:50278:50292	708563	12	True				
ANR	708760	Identifier	NT_CCLASS		708563	0					
ANR	708761	Label	case NT_CANY :	2181:2:50296:50308	708563	13	True				
ANR	708762	Identifier	NT_CANY		708563	0					
ANR	708763	ExpressionStatement	* max = ONIGENC_MBC_MAXLEN_DIST ( env -> enc )	2182:4:50314:50354	708563	14	True				
ANR	708764	AssignmentExpression	* max = ONIGENC_MBC_MAXLEN_DIST ( env -> enc )		708563	0		=			
ANR	708765	UnaryOperationExpression	* max		708563	0					
ANR	708766	UnaryOperator	*		708563	0					
ANR	708767	Identifier	max		708563	1					
ANR	708768	CallExpression	ONIGENC_MBC_MAXLEN_DIST ( env -> enc )		708563	1					
ANR	708769	Callee	ONIGENC_MBC_MAXLEN_DIST		708563	0					
ANR	708770	Identifier	ONIGENC_MBC_MAXLEN_DIST		708563	0					
ANR	708771	ArgumentList	env -> enc		708563	1					
ANR	708772	Argument	env -> enc		708563	0					
ANR	708773	PtrMemberAccess	env -> enc		708563	0					
ANR	708774	Identifier	env		708563	0					
ANR	708775	Identifier	enc		708563	1					
ANR	708776	BreakStatement	break ;	2183:4:50360:50365	708563	15	True				
ANR	708777	Label	case NT_BREF :	2185:2:50370:50382	708563	16	True				
ANR	708778	Identifier	NT_BREF		708563	0					
ANR	708779	CompoundStatement		43:6:840:866	708563	17					
ANR	708780	IdentifierDeclStatement	int i ;	2187:6:50396:50401	708563	0	True				
ANR	708781	IdentifierDecl	i		708563	0					
ANR	708782	IdentifierDeclType	int		708563	0					
ANR	708783	Identifier	i		708563	1					
ANR	708784	IdentifierDeclStatement	int * backs ;	2188:6:50409:50419	708563	1	True				
ANR	708785	IdentifierDecl	* backs		708563	0					
ANR	708786	IdentifierDeclType	int *		708563	0					
ANR	708787	Identifier	backs		708563	1					
ANR	708788	IdentifierDeclStatement	Node * * nodes = SCANENV_MEM_NODES ( env ) ;	2189:6:50427:50464	708563	2	True				
ANR	708789	IdentifierDecl	* * nodes = SCANENV_MEM_NODES ( env )		708563	0					
ANR	708790	IdentifierDeclType	Node * *		708563	0					
ANR	708791	Identifier	nodes		708563	1					
ANR	708792	AssignmentExpression	* * nodes = SCANENV_MEM_NODES ( env )		708563	2		=			
ANR	708793	Identifier	nodes		708563	0					
ANR	708794	CallExpression	SCANENV_MEM_NODES ( env )		708563	1					
ANR	708795	Callee	SCANENV_MEM_NODES		708563	0					
ANR	708796	Identifier	SCANENV_MEM_NODES		708563	0					
ANR	708797	ArgumentList	env		708563	1					
ANR	708798	Argument	env		708563	0					
ANR	708799	Identifier	env		708563	0					
ANR	708800	IdentifierDeclStatement	BRefNode * br = NBREF ( node ) ;	2190:6:50472:50498	708563	3	True				
ANR	708801	IdentifierDecl	* br = NBREF ( node )		708563	0					
ANR	708802	IdentifierDeclType	BRefNode *		708563	0					
ANR	708803	Identifier	br		708563	1					
ANR	708804	AssignmentExpression	* br = NBREF ( node )		708563	2		=			
ANR	708805	Identifier	br		708563	0					
ANR	708806	CallExpression	NBREF ( node )		708563	1					
ANR	708807	Callee	NBREF		708563	0					
ANR	708808	Identifier	NBREF		708563	0					
ANR	708809	ArgumentList	node		708563	1					
ANR	708810	Argument	node		708563	0					
ANR	708811	Identifier	node		708563	0					
ANR	708812	IfStatement	if ( br -> state & NST_RECURSION )		708563	4					
ANR	708813	Condition	br -> state & NST_RECURSION	2191:10:50510:50534	708563	0	True				
ANR	708814	BitAndExpression	br -> state & NST_RECURSION		708563	0		&			
ANR	708815	PtrMemberAccess	br -> state		708563	0					
ANR	708816	Identifier	br		708563	0					
ANR	708817	Identifier	state		708563	1					
ANR	708818	Identifier	NST_RECURSION		708563	1					
ANR	708819	CompoundStatement		44:37:905:905	708563	1					
ANR	708820	ExpressionStatement	* max = ONIG_INFINITE_DISTANCE	2192:1:50540:50569	708563	0	True				
ANR	708821	AssignmentExpression	* max = ONIG_INFINITE_DISTANCE		708563	0		=			
ANR	708822	UnaryOperationExpression	* max		708563	0					
ANR	708823	UnaryOperator	*		708563	0					
ANR	708824	Identifier	max		708563	1					
ANR	708825	Identifier	ONIG_INFINITE_DISTANCE		708563	1					
ANR	708826	BreakStatement	break ;	2193:1:50572:50577	708563	1	True				
ANR	708827	ExpressionStatement	backs = BACKREFS_P ( br )	2195:6:50593:50615	708563	5	True				
ANR	708828	AssignmentExpression	backs = BACKREFS_P ( br )		708563	0		=			
ANR	708829	Identifier	backs		708563	0					
ANR	708830	CallExpression	BACKREFS_P ( br )		708563	1					
ANR	708831	Callee	BACKREFS_P		708563	0					
ANR	708832	Identifier	BACKREFS_P		708563	0					
ANR	708833	ArgumentList	br		708563	1					
ANR	708834	Argument	br		708563	0					
ANR	708835	Identifier	br		708563	0					
ANR	708836	ForStatement	for ( i = 0 ; i < br -> back_num ; i ++ )		708563	6					
ANR	708837	ForInit	i = 0 ;	2196:11:50628:50633	708563	0	True				
ANR	708838	AssignmentExpression	i = 0		708563	0		=			
ANR	708839	Identifier	i		708563	0					
ANR	708840	PrimaryExpression	0		708563	1					
ANR	708841	Condition	i < br -> back_num	2196:18:50635:50650	708563	1	True				
ANR	708842	RelationalExpression	i < br -> back_num		708563	0		<			
ANR	708843	Identifier	i		708563	0					
ANR	708844	PtrMemberAccess	br -> back_num		708563	1					
ANR	708845	Identifier	br		708563	0					
ANR	708846	Identifier	back_num		708563	1					
ANR	708847	PostIncDecOperationExpression	i ++	2196:36:50653:50655	708563	2	True				
ANR	708848	Identifier	i		708563	0					
ANR	708849	IncDec	++		708563	1					
ANR	708850	CompoundStatement		49:41:1026:1026	708563	3					
ANR	708851	IfStatement	if ( backs [ i ] > env -> num_mem )		708563	0					
ANR	708852	Condition	backs [ i ] > env -> num_mem	2197:5:50665:50687	708563	0	True				
ANR	708853	RelationalExpression	backs [ i ] > env -> num_mem		708563	0		>			
ANR	708854	ArrayIndexing	backs [ i ]		708563	0					
ANR	708855	Identifier	backs		708563	0					
ANR	708856	Identifier	i		708563	1					
ANR	708857	PtrMemberAccess	env -> num_mem		708563	1					
ANR	708858	Identifier	env		708563	0					
ANR	708859	Identifier	num_mem		708563	1					
ANR	708860	ReturnStatement	return ONIGERR_INVALID_BACKREF ;	2197:31:50691:50721	708563	1	True				
ANR	708861	Identifier	ONIGERR_INVALID_BACKREF		708563	0					
ANR	708862	ExpressionStatement	"r = get_max_match_length ( nodes [ backs [ i ] ] , & tmax , env )"	2198:1:50724:50777	708563	1	True				
ANR	708863	AssignmentExpression	"r = get_max_match_length ( nodes [ backs [ i ] ] , & tmax , env )"		708563	0		=			
ANR	708864	Identifier	r		708563	0					
ANR	708865	CallExpression	"get_max_match_length ( nodes [ backs [ i ] ] , & tmax , env )"		708563	1					
ANR	708866	Callee	get_max_match_length		708563	0					
ANR	708867	Identifier	get_max_match_length		708563	0					
ANR	708868	ArgumentList	nodes [ backs [ i ] ]		708563	1					
ANR	708869	Argument	nodes [ backs [ i ] ]		708563	0					
ANR	708870	ArrayIndexing	nodes [ backs [ i ] ]		708563	0					
ANR	708871	Identifier	nodes		708563	0					
ANR	708872	ArrayIndexing	backs [ i ]		708563	1					
ANR	708873	Identifier	backs		708563	0					
ANR	708874	Identifier	i		708563	1					
ANR	708875	Argument	& tmax		708563	1					
ANR	708876	UnaryOperationExpression	& tmax		708563	0					
ANR	708877	UnaryOperator	&		708563	0					
ANR	708878	Identifier	tmax		708563	1					
ANR	708879	Argument	env		708563	2					
ANR	708880	Identifier	env		708563	0					
ANR	708881	IfStatement	if ( r != 0 )		708563	2					
ANR	708882	Condition	r != 0	2199:5:50784:50789	708563	0	True				
ANR	708883	EqualityExpression	r != 0		708563	0		!=			
ANR	708884	Identifier	r		708563	0					
ANR	708885	PrimaryExpression	0		708563	1					
ANR	708886	BreakStatement	break ;	2199:13:50792:50797	708563	1	True				
ANR	708887	IfStatement	if ( * max < tmax )		708563	3					
ANR	708888	Condition	* max < tmax	2200:5:50804:50814	708563	0	True				
ANR	708889	RelationalExpression	* max < tmax		708563	0		<			
ANR	708890	UnaryOperationExpression	* max		708563	0					
ANR	708891	UnaryOperator	*		708563	0					
ANR	708892	Identifier	max		708563	1					
ANR	708893	Identifier	tmax		708563	1					
ANR	708894	ExpressionStatement	* max = tmax	2200:18:50817:50828	708563	1	True				
ANR	708895	AssignmentExpression	* max = tmax		708563	0		=			
ANR	708896	UnaryOperationExpression	* max		708563	0					
ANR	708897	UnaryOperator	*		708563	0					
ANR	708898	Identifier	max		708563	1					
ANR	708899	Identifier	tmax		708563	1					
ANR	708900	BreakStatement	break ;	2203:4:50848:50853	708563	18	True				
ANR	708901	Label	case NT_CALL :	2206:2:50881:50893	708563	19	True				
ANR	708902	Identifier	NT_CALL		708563	0					
ANR	708903	IfStatement	if ( ! IS_CALL_RECURSION ( NCALL ( node ) ) )		708563	20					
ANR	708904	Condition	! IS_CALL_RECURSION ( NCALL ( node ) )	2207:8:50903:50934	708563	0	True				
ANR	708905	UnaryOperationExpression	! IS_CALL_RECURSION ( NCALL ( node ) )		708563	0					
ANR	708906	UnaryOperator	!		708563	0					
ANR	708907	CallExpression	IS_CALL_RECURSION ( NCALL ( node ) )		708563	1					
ANR	708908	Callee	IS_CALL_RECURSION		708563	0					
ANR	708909	Identifier	IS_CALL_RECURSION		708563	0					
ANR	708910	ArgumentList	NCALL ( node )		708563	1					
ANR	708911	Argument	NCALL ( node )		708563	0					
ANR	708912	CallExpression	NCALL ( node )		708563	0					
ANR	708913	Callee	NCALL		708563	0					
ANR	708914	Identifier	NCALL		708563	0					
ANR	708915	ArgumentList	node		708563	1					
ANR	708916	Argument	node		708563	0					
ANR	708917	Identifier	node		708563	0					
ANR	708918	ExpressionStatement	"r = get_max_match_length ( NCALL ( node ) -> target , max , env )"	2208:6:50943:50998	708563	1	True				
ANR	708919	AssignmentExpression	"r = get_max_match_length ( NCALL ( node ) -> target , max , env )"		708563	0		=			
ANR	708920	Identifier	r		708563	0					
ANR	708921	CallExpression	"get_max_match_length ( NCALL ( node ) -> target , max , env )"		708563	1					
ANR	708922	Callee	get_max_match_length		708563	0					
ANR	708923	Identifier	get_max_match_length		708563	0					
ANR	708924	ArgumentList	NCALL ( node ) -> target		708563	1					
ANR	708925	Argument	NCALL ( node ) -> target		708563	0					
ANR	708926	PtrMemberAccess	NCALL ( node ) -> target		708563	0					
ANR	708927	CallExpression	NCALL ( node )		708563	0					
ANR	708928	Callee	NCALL		708563	0					
ANR	708929	Identifier	NCALL		708563	0					
ANR	708930	ArgumentList	node		708563	1					
ANR	708931	Argument	node		708563	0					
ANR	708932	Identifier	node		708563	0					
ANR	708933	Identifier	target		708563	1					
ANR	708934	Argument	max		708563	1					
ANR	708935	Identifier	max		708563	0					
ANR	708936	Argument	env		708563	2					
ANR	708937	Identifier	env		708563	0					
ANR	708938	ElseStatement	else		708563	0					
ANR	708939	ExpressionStatement	* max = ONIG_INFINITE_DISTANCE	2210:6:51015:51044	708563	0	True				
ANR	708940	AssignmentExpression	* max = ONIG_INFINITE_DISTANCE		708563	0		=			
ANR	708941	UnaryOperationExpression	* max		708563	0					
ANR	708942	UnaryOperator	*		708563	0					
ANR	708943	Identifier	max		708563	1					
ANR	708944	Identifier	ONIG_INFINITE_DISTANCE		708563	1					
ANR	708945	BreakStatement	break ;	2211:4:51050:51055	708563	21	True				
ANR	708946	Label	case NT_QTFR :	2214:2:51067:51079	708563	22	True				
ANR	708947	Identifier	NT_QTFR		708563	0					
ANR	708948	CompoundStatement		69:6:1461:1487	708563	23					
ANR	708949	IdentifierDeclStatement	QtfrNode * qn = NQTFR ( node ) ;	2216:6:51093:51119	708563	0	True				
ANR	708950	IdentifierDecl	* qn = NQTFR ( node )		708563	0					
ANR	708951	IdentifierDeclType	QtfrNode *		708563	0					
ANR	708952	Identifier	qn		708563	1					
ANR	708953	AssignmentExpression	* qn = NQTFR ( node )		708563	2		=			
ANR	708954	Identifier	qn		708563	0					
ANR	708955	CallExpression	NQTFR ( node )		708563	1					
ANR	708956	Callee	NQTFR		708563	0					
ANR	708957	Identifier	NQTFR		708563	0					
ANR	708958	ArgumentList	node		708563	1					
ANR	708959	Argument	node		708563	0					
ANR	708960	Identifier	node		708563	0					
ANR	708961	IfStatement	if ( qn -> upper != 0 )		708563	1					
ANR	708962	Condition	qn -> upper != 0	2218:10:51132:51145	708563	0	True				
ANR	708963	EqualityExpression	qn -> upper != 0		708563	0		!=			
ANR	708964	PtrMemberAccess	qn -> upper		708563	0					
ANR	708965	Identifier	qn		708563	0					
ANR	708966	Identifier	upper		708563	1					
ANR	708967	PrimaryExpression	0		708563	1					
ANR	708968	CompoundStatement		71:26:1516:1516	708563	1					
ANR	708969	ExpressionStatement	"r = get_max_match_length ( qn -> target , max , env )"	2219:1:51151:51197	708563	0	True				
ANR	708970	AssignmentExpression	"r = get_max_match_length ( qn -> target , max , env )"		708563	0		=			
ANR	708971	Identifier	r		708563	0					
ANR	708972	CallExpression	"get_max_match_length ( qn -> target , max , env )"		708563	1					
ANR	708973	Callee	get_max_match_length		708563	0					
ANR	708974	Identifier	get_max_match_length		708563	0					
ANR	708975	ArgumentList	qn -> target		708563	1					
ANR	708976	Argument	qn -> target		708563	0					
ANR	708977	PtrMemberAccess	qn -> target		708563	0					
ANR	708978	Identifier	qn		708563	0					
ANR	708979	Identifier	target		708563	1					
ANR	708980	Argument	max		708563	1					
ANR	708981	Identifier	max		708563	0					
ANR	708982	Argument	env		708563	2					
ANR	708983	Identifier	env		708563	0					
ANR	708984	IfStatement	if ( r == 0 && * max != 0 )		708563	1					
ANR	708985	Condition	r == 0 && * max != 0	2220:5:51204:51222	708563	0	True				
ANR	708986	AndExpression	r == 0 && * max != 0		708563	0		&&			
ANR	708987	EqualityExpression	r == 0		708563	0		==			
ANR	708988	Identifier	r		708563	0					
ANR	708989	PrimaryExpression	0		708563	1					
ANR	708990	EqualityExpression	* max != 0		708563	1		!=			
ANR	708991	UnaryOperationExpression	* max		708563	0					
ANR	708992	UnaryOperator	*		708563	0					
ANR	708993	Identifier	max		708563	1					
ANR	708994	PrimaryExpression	0		708563	1					
ANR	708995	CompoundStatement		73:26:1593:1593	708563	1					
ANR	708996	IfStatement	if ( ! IS_REPEAT_INFINITE ( qn -> upper ) )		708563	0					
ANR	708997	Condition	! IS_REPEAT_INFINITE ( qn -> upper )	2221:7:51234:51264	708563	0	True				
ANR	708998	UnaryOperationExpression	! IS_REPEAT_INFINITE ( qn -> upper )		708563	0					
ANR	708999	UnaryOperator	!		708563	0					
ANR	709000	CallExpression	IS_REPEAT_INFINITE ( qn -> upper )		708563	1					
ANR	709001	Callee	IS_REPEAT_INFINITE		708563	0					
ANR	709002	Identifier	IS_REPEAT_INFINITE		708563	0					
ANR	709003	ArgumentList	qn -> upper		708563	1					
ANR	709004	Argument	qn -> upper		708563	0					
ANR	709005	PtrMemberAccess	qn -> upper		708563	0					
ANR	709006	Identifier	qn		708563	0					
ANR	709007	Identifier	upper		708563	1					
ANR	709008	ExpressionStatement	"* max = distance_multiply ( * max , qn -> upper )"	2222:5:51272:51313	708563	1	True				
ANR	709009	AssignmentExpression	"* max = distance_multiply ( * max , qn -> upper )"		708563	0		=			
ANR	709010	UnaryOperationExpression	* max		708563	0					
ANR	709011	UnaryOperator	*		708563	0					
ANR	709012	Identifier	max		708563	1					
ANR	709013	CallExpression	"distance_multiply ( * max , qn -> upper )"		708563	1					
ANR	709014	Callee	distance_multiply		708563	0					
ANR	709015	Identifier	distance_multiply		708563	0					
ANR	709016	ArgumentList	* max		708563	1					
ANR	709017	Argument	* max		708563	0					
ANR	709018	UnaryOperationExpression	* max		708563	0					
ANR	709019	UnaryOperator	*		708563	0					
ANR	709020	Identifier	max		708563	1					
ANR	709021	Argument	qn -> upper		708563	1					
ANR	709022	PtrMemberAccess	qn -> upper		708563	0					
ANR	709023	Identifier	qn		708563	0					
ANR	709024	Identifier	upper		708563	1					
ANR	709025	ElseStatement	else		708563	0					
ANR	709026	ExpressionStatement	* max = ONIG_INFINITE_DISTANCE	2224:5:51328:51357	708563	0	True				
ANR	709027	AssignmentExpression	* max = ONIG_INFINITE_DISTANCE		708563	0		=			
ANR	709028	UnaryOperationExpression	* max		708563	0					
ANR	709029	UnaryOperator	*		708563	0					
ANR	709030	Identifier	max		708563	1					
ANR	709031	Identifier	ONIG_INFINITE_DISTANCE		708563	1					
ANR	709032	BreakStatement	break ;	2228:4:51380:51385	708563	24	True				
ANR	709033	Label	case NT_ENCLOSE :	2230:2:51390:51405	708563	25	True				
ANR	709034	Identifier	NT_ENCLOSE		708563	0					
ANR	709035	CompoundStatement		85:6:1787:1819	708563	26					
ANR	709036	IdentifierDeclStatement	EncloseNode * en = NENCLOSE ( node ) ;	2232:6:51419:51451	708563	0	True				
ANR	709037	IdentifierDecl	* en = NENCLOSE ( node )		708563	0					
ANR	709038	IdentifierDeclType	EncloseNode *		708563	0					
ANR	709039	Identifier	en		708563	1					
ANR	709040	AssignmentExpression	* en = NENCLOSE ( node )		708563	2		=			
ANR	709041	Identifier	en		708563	0					
ANR	709042	CallExpression	NENCLOSE ( node )		708563	1					
ANR	709043	Callee	NENCLOSE		708563	0					
ANR	709044	Identifier	NENCLOSE		708563	0					
ANR	709045	ArgumentList	node		708563	1					
ANR	709046	Argument	node		708563	0					
ANR	709047	Identifier	node		708563	0					
ANR	709048	SwitchStatement	switch ( en -> type )		708563	1					
ANR	709049	Condition	en -> type	2233:14:51467:51474	708563	0	True				
ANR	709050	PtrMemberAccess	en -> type		708563	0					
ANR	709051	Identifier	en		708563	0					
ANR	709052	Identifier	type		708563	1					
ANR	709053	CompoundStatement		86:24:1845:1845	708563	1					
ANR	709054	Label	case ENCLOSE_MEMORY :	2234:6:51485:51504	708563	0	True				
ANR	709055	Identifier	ENCLOSE_MEMORY		708563	0					
ANR	709056	IfStatement	if ( IS_ENCLOSE_MAX_FIXED ( en ) )		708563	1					
ANR	709057	Condition	IS_ENCLOSE_MAX_FIXED ( en )	2236:5:51534:51557	708563	0	True				
ANR	709058	CallExpression	IS_ENCLOSE_MAX_FIXED ( en )		708563	0					
ANR	709059	Callee	IS_ENCLOSE_MAX_FIXED		708563	0					
ANR	709060	Identifier	IS_ENCLOSE_MAX_FIXED		708563	0					
ANR	709061	ArgumentList	en		708563	1					
ANR	709062	Argument	en		708563	0					
ANR	709063	Identifier	en		708563	0					
ANR	709064	ExpressionStatement	* max = en -> max_len	2237:3:51563:51581	708563	1	True				
ANR	709065	AssignmentExpression	* max = en -> max_len		708563	0		=			
ANR	709066	UnaryOperationExpression	* max		708563	0					
ANR	709067	UnaryOperator	*		708563	0					
ANR	709068	Identifier	max		708563	1					
ANR	709069	PtrMemberAccess	en -> max_len		708563	1					
ANR	709070	Identifier	en		708563	0					
ANR	709071	Identifier	max_len		708563	1					
ANR	709072	ElseStatement	else		708563	0					
ANR	709073	CompoundStatement		91:6:1957:1957	708563	0					
ANR	709074	ExpressionStatement	"r = get_max_match_length ( en -> target , max , env )"	2239:3:51594:51640	708563	0	True				
ANR	709075	AssignmentExpression	"r = get_max_match_length ( en -> target , max , env )"		708563	0		=			
ANR	709076	Identifier	r		708563	0					
ANR	709077	CallExpression	"get_max_match_length ( en -> target , max , env )"		708563	1					
ANR	709078	Callee	get_max_match_length		708563	0					
ANR	709079	Identifier	get_max_match_length		708563	0					
ANR	709080	ArgumentList	en -> target		708563	1					
ANR	709081	Argument	en -> target		708563	0					
ANR	709082	PtrMemberAccess	en -> target		708563	0					
ANR	709083	Identifier	en		708563	0					
ANR	709084	Identifier	target		708563	1					
ANR	709085	Argument	max		708563	1					
ANR	709086	Identifier	max		708563	0					
ANR	709087	Argument	env		708563	2					
ANR	709088	Identifier	env		708563	0					
ANR	709089	IfStatement	if ( r == 0 )		708563	1					
ANR	709090	Condition	r == 0	2240:7:51649:51654	708563	0	True				
ANR	709091	EqualityExpression	r == 0		708563	0		==			
ANR	709092	Identifier	r		708563	0					
ANR	709093	PrimaryExpression	0		708563	1					
ANR	709094	CompoundStatement		93:15:2025:2025	708563	1					
ANR	709095	ExpressionStatement	en -> max_len = * max	2241:5:51664:51682	708563	0	True				
ANR	709096	AssignmentExpression	en -> max_len = * max		708563	0		=			
ANR	709097	PtrMemberAccess	en -> max_len		708563	0					
ANR	709098	Identifier	en		708563	0					
ANR	709099	Identifier	max_len		708563	1					
ANR	709100	UnaryOperationExpression	* max		708563	1					
ANR	709101	UnaryOperator	*		708563	0					
ANR	709102	Identifier	max		708563	1					
ANR	709103	ExpressionStatement	"SET_ENCLOSE_STATUS ( node , NST_MAX_FIXED )"	2242:5:51689:51728	708563	1	True				
ANR	709104	CallExpression	"SET_ENCLOSE_STATUS ( node , NST_MAX_FIXED )"		708563	0					
ANR	709105	Callee	SET_ENCLOSE_STATUS		708563	0					
ANR	709106	Identifier	SET_ENCLOSE_STATUS		708563	0					
ANR	709107	ArgumentList	node		708563	1					
ANR	709108	Argument	node		708563	0					
ANR	709109	Identifier	node		708563	0					
ANR	709110	Argument	NST_MAX_FIXED		708563	1					
ANR	709111	Identifier	NST_MAX_FIXED		708563	0					
ANR	709112	BreakStatement	break ;	2245:1:51739:51744	708563	2	True				
ANR	709113	Label	case ENCLOSE_OPTION :	2247:6:51759:51778	708563	3	True				
ANR	709114	Identifier	ENCLOSE_OPTION		708563	0					
ANR	709115	Label	case ENCLOSE_STOP_BACKTRACK :	2248:6:51786:51813	708563	4	True				
ANR	709116	Identifier	ENCLOSE_STOP_BACKTRACK		708563	0					
ANR	709117	ExpressionStatement	"r = get_max_match_length ( en -> target , max , env )"	2249:1:51816:51862	708563	5	True				
ANR	709118	AssignmentExpression	"r = get_max_match_length ( en -> target , max , env )"		708563	0		=			
ANR	709119	Identifier	r		708563	0					
ANR	709120	CallExpression	"get_max_match_length ( en -> target , max , env )"		708563	1					
ANR	709121	Callee	get_max_match_length		708563	0					
ANR	709122	Identifier	get_max_match_length		708563	0					
ANR	709123	ArgumentList	en -> target		708563	1					
ANR	709124	Argument	en -> target		708563	0					
ANR	709125	PtrMemberAccess	en -> target		708563	0					
ANR	709126	Identifier	en		708563	0					
ANR	709127	Identifier	target		708563	1					
ANR	709128	Argument	max		708563	1					
ANR	709129	Identifier	max		708563	0					
ANR	709130	Argument	env		708563	2					
ANR	709131	Identifier	env		708563	0					
ANR	709132	BreakStatement	break ;	2250:1:51865:51870	708563	6	True				
ANR	709133	BreakStatement	break ;	2253:4:51890:51895	708563	27	True				
ANR	709134	Label	case NT_ANCHOR :	2255:2:51900:51914	708563	28	True				
ANR	709135	Identifier	NT_ANCHOR		708563	0					
ANR	709136	Label	default :	2256:2:51918:51925	708563	29	True				
ANR	709137	Identifier	default		708563	0					
ANR	709138	BreakStatement	break ;	2257:4:51931:51936	708563	30	True				
ANR	709139	ReturnStatement	return r ;	2260:2:51945:51953	708563	4	True				
ANR	709140	Identifier	r		708563	0					
ANR	709141	ReturnType	static int		708563	1					
ANR	709142	Identifier	get_max_match_length		708563	2					
ANR	709143	ParameterList	"Node * node , OnigDistance * max , ScanEnv * env"		708563	3					
ANR	709144	Parameter	Node * node	2147:21:49586:49595	708563	0	True				
ANR	709145	ParameterType	Node *		708563	0					
ANR	709146	Identifier	node		708563	1					
ANR	709147	Parameter	OnigDistance * max	2147:33:49598:49614	708563	1	True				
ANR	709148	ParameterType	OnigDistance *		708563	0					
ANR	709149	Identifier	max		708563	1					
ANR	709150	Parameter	ScanEnv * env	2147:52:49617:49628	708563	2	True				
ANR	709151	ParameterType	ScanEnv *		708563	0					
ANR	709152	Identifier	env		708563	1					
ANR	709153	CFGEntryNode	ENTRY		708563		True				
ANR	709154	CFGExitNode	EXIT		708563		True				
ANR	709155	Symbol	NCAR		708563						
ANR	709156	Symbol	* sn		708563						
ANR	709157	Symbol	br -> back_num		708563						
ANR	709158	Symbol	* backs		708563						
ANR	709159	Symbol	NQTFR		708563						
ANR	709160	Symbol	* max		708563						
ANR	709161	Symbol	ONIG_INFINITE_DISTANCE		708563						
ANR	709162	Symbol	sn -> s		708563						
ANR	709163	Symbol	* br		708563						
ANR	709164	Symbol	en -> type		708563						
ANR	709165	Symbol	ONIGENC_MBC_MAXLEN_DIST		708563						
ANR	709166	Symbol	* nodes		708563						
ANR	709167	Symbol	SCANENV_MEM_NODES		708563						
ANR	709168	Symbol	IS_REPEAT_INFINITE		708563						
ANR	709169	Symbol	qn		708563						
ANR	709170	Symbol	* * i		708563						
ANR	709171	Symbol	IS_ENCLOSE_MAX_FIXED		708563						
ANR	709172	Symbol	NCDR		708563						
ANR	709173	Symbol	NSTR		708563						
ANR	709174	Symbol	* env		708563						
ANR	709175	Symbol	en		708563						
ANR	709176	Symbol	qn -> target		708563						
ANR	709177	Symbol	distance_multiply		708563						
ANR	709178	Symbol	node		708563						
ANR	709179	Symbol	qn -> upper		708563						
ANR	709180	Symbol	en -> max_len		708563						
ANR	709181	Symbol	get_max_match_length		708563						
ANR	709182	Symbol	BACKREFS_P		708563						
ANR	709183	Symbol	IS_CALL_RECURSION		708563						
ANR	709184	Symbol	* qn		708563						
ANR	709185	Symbol	IS_NOT_NULL		708563						
ANR	709186	Symbol	ONIGERR_INVALID_BACKREF		708563						
ANR	709187	Symbol	tmax		708563						
ANR	709188	Symbol	NCALL		708563						
ANR	709189	Symbol	NST_MAX_FIXED		708563						
ANR	709190	Symbol	env -> enc		708563						
ANR	709191	Symbol	distance_add		708563						
ANR	709192	Symbol	* en		708563						
ANR	709193	Symbol	br		708563						
ANR	709194	Symbol	* * backs		708563						
ANR	709195	Symbol	NBREF		708563						
ANR	709196	Symbol	NST_RECURSION		708563						
ANR	709197	Symbol	NENCLOSE		708563						
ANR	709198	Symbol	NCALL ( node ) -> target		708563						
ANR	709199	Symbol	sn		708563						
ANR	709200	Symbol	sn -> end		708563						
ANR	709201	Symbol	max		708563						
ANR	709202	Symbol	env -> num_mem		708563						
ANR	709203	Symbol	i		708563						
ANR	709204	Symbol	env		708563						
ANR	709205	Symbol	r		708563						
ANR	709206	Symbol	nodes		708563						
ANR	709207	Symbol	* i		708563						
ANR	709208	Symbol	en -> target		708563						
ANR	709209	Symbol	br -> state		708563						
ANR	709210	Symbol	NTYPE		708563						
ANR	709211	Symbol	& tmax		708563						
ANR	709212	Symbol	* NCALL		708563						
ANR	709213	Symbol	backs		708563						
ANR	709214	Function	get_char_length_tree1	2267:0:52076:54341							
ANR	709215	FunctionDef	"get_char_length_tree1 (Node * node , regex_t * reg , int * len , int level)"		709214	0					
ANR	709216	CompoundStatement		2269:0:52156:54341	709214	0					
ANR	709217	IdentifierDeclStatement	int tlen ;	2270:2:52160:52168	709214	0	True				
ANR	709218	IdentifierDecl	tlen		709214	0					
ANR	709219	IdentifierDeclType	int		709214	0					
ANR	709220	Identifier	tlen		709214	1					
ANR	709221	IdentifierDeclStatement	int r = 0 ;	2271:2:52172:52181	709214	1	True				
ANR	709222	IdentifierDecl	r = 0		709214	0					
ANR	709223	IdentifierDeclType	int		709214	0					
ANR	709224	Identifier	r		709214	1					
ANR	709225	AssignmentExpression	r = 0		709214	2		=			
ANR	709226	Identifier	r		709214	0					
ANR	709227	PrimaryExpression	0		709214	1					
ANR	709228	ExpressionStatement	level ++	2273:2:52186:52193	709214	2	True				
ANR	709229	PostIncDecOperationExpression	level ++		709214	0					
ANR	709230	Identifier	level		709214	0					
ANR	709231	IncDec	++		709214	1					
ANR	709232	ExpressionStatement	* len = 0	2274:2:52197:52205	709214	3	True				
ANR	709233	AssignmentExpression	* len = 0		709214	0		=			
ANR	709234	UnaryOperationExpression	* len		709214	0					
ANR	709235	UnaryOperator	*		709214	0					
ANR	709236	Identifier	len		709214	1					
ANR	709237	PrimaryExpression	0		709214	1					
ANR	709238	SwitchStatement	switch ( NTYPE ( node ) )		709214	4					
ANR	709239	Condition	NTYPE ( node )	2275:10:52217:52227	709214	0	True				
ANR	709240	CallExpression	NTYPE ( node )		709214	0					
ANR	709241	Callee	NTYPE		709214	0					
ANR	709242	Identifier	NTYPE		709214	0					
ANR	709243	ArgumentList	node		709214	1					
ANR	709244	Argument	node		709214	0					
ANR	709245	Identifier	node		709214	0					
ANR	709246	CompoundStatement		7:23:73:73	709214	1					
ANR	709247	Label	case NT_LIST :	2276:2:52234:52246	709214	0	True				
ANR	709248	Identifier	NT_LIST		709214	0					
ANR	709249	DoStatement	do		709214	1					
ANR	709250	CompoundStatement		9:7:98:98	709214	0					
ANR	709251	ExpressionStatement	"r = get_char_length_tree1 ( NCAR ( node ) , reg , & tlen , level )"	2278:6:52263:52319	709214	0	True				
ANR	709252	AssignmentExpression	"r = get_char_length_tree1 ( NCAR ( node ) , reg , & tlen , level )"		709214	0		=			
ANR	709253	Identifier	r		709214	0					
ANR	709254	CallExpression	"get_char_length_tree1 ( NCAR ( node ) , reg , & tlen , level )"		709214	1					
ANR	709255	Callee	get_char_length_tree1		709214	0					
ANR	709256	Identifier	get_char_length_tree1		709214	0					
ANR	709257	ArgumentList	NCAR ( node )		709214	1					
ANR	709258	Argument	NCAR ( node )		709214	0					
ANR	709259	CallExpression	NCAR ( node )		709214	0					
ANR	709260	Callee	NCAR		709214	0					
ANR	709261	Identifier	NCAR		709214	0					
ANR	709262	ArgumentList	node		709214	1					
ANR	709263	Argument	node		709214	0					
ANR	709264	Identifier	node		709214	0					
ANR	709265	Argument	reg		709214	1					
ANR	709266	Identifier	reg		709214	0					
ANR	709267	Argument	& tlen		709214	2					
ANR	709268	UnaryOperationExpression	& tlen		709214	0					
ANR	709269	UnaryOperator	&		709214	0					
ANR	709270	Identifier	tlen		709214	1					
ANR	709271	Argument	level		709214	3					
ANR	709272	Identifier	level		709214	0					
ANR	709273	IfStatement	if ( r == 0 )		709214	1					
ANR	709274	Condition	r == 0	2279:10:52331:52336	709214	0	True				
ANR	709275	EqualityExpression	r == 0		709214	0		==			
ANR	709276	Identifier	r		709214	0					
ANR	709277	PrimaryExpression	0		709214	1					
ANR	709278	ExpressionStatement	"* len = distance_add ( * len , tlen )"	2280:1:52340:52371	709214	1	True				
ANR	709279	AssignmentExpression	"* len = distance_add ( * len , tlen )"		709214	0		=			
ANR	709280	UnaryOperationExpression	* len		709214	0					
ANR	709281	UnaryOperator	*		709214	0					
ANR	709282	Identifier	len		709214	1					
ANR	709283	CallExpression	"distance_add ( * len , tlen )"		709214	1					
ANR	709284	Callee	distance_add		709214	0					
ANR	709285	Identifier	distance_add		709214	0					
ANR	709286	ArgumentList	* len		709214	1					
ANR	709287	Argument	* len		709214	0					
ANR	709288	UnaryOperationExpression	* len		709214	0					
ANR	709289	UnaryOperator	*		709214	0					
ANR	709290	Identifier	len		709214	1					
ANR	709291	Argument	tlen		709214	1					
ANR	709292	Identifier	tlen		709214	0					
ANR	709293	Condition	r == 0 && IS_NOT_NULL ( node = NCDR ( node ) )	2281:13:52386:52425	709214	1	True				
ANR	709294	AndExpression	r == 0 && IS_NOT_NULL ( node = NCDR ( node ) )		709214	0		&&			
ANR	709295	EqualityExpression	r == 0		709214	0		==			
ANR	709296	Identifier	r		709214	0					
ANR	709297	PrimaryExpression	0		709214	1					
ANR	709298	CallExpression	IS_NOT_NULL ( node = NCDR ( node ) )		709214	1					
ANR	709299	Callee	IS_NOT_NULL		709214	0					
ANR	709300	Identifier	IS_NOT_NULL		709214	0					
ANR	709301	ArgumentList	node = NCDR ( node )		709214	1					
ANR	709302	Argument	node = NCDR ( node )		709214	0					
ANR	709303	AssignmentExpression	node = NCDR ( node )		709214	0		=			
ANR	709304	Identifier	node		709214	0					
ANR	709305	CallExpression	NCDR ( node )		709214	1					
ANR	709306	Callee	NCDR		709214	0					
ANR	709307	Identifier	NCDR		709214	0					
ANR	709308	ArgumentList	node		709214	1					
ANR	709309	Argument	node		709214	0					
ANR	709310	Identifier	node		709214	0					
ANR	709311	BreakStatement	break ;	2282:4:52433:52438	709214	2	True				
ANR	709312	Label	case NT_ALT :	2284:2:52443:52454	709214	3	True				
ANR	709313	Identifier	NT_ALT		709214	0					
ANR	709314	CompoundStatement		19:6:328:342	709214	4					
ANR	709315	IdentifierDeclStatement	int tlen2 ;	2286:6:52468:52477	709214	0	True				
ANR	709316	IdentifierDecl	tlen2		709214	0					
ANR	709317	IdentifierDeclType	int		709214	0					
ANR	709318	Identifier	tlen2		709214	1					
ANR	709319	IdentifierDeclStatement	int varlen = 0 ;	2287:6:52485:52499	709214	1	True				
ANR	709320	IdentifierDecl	varlen = 0		709214	0					
ANR	709321	IdentifierDeclType	int		709214	0					
ANR	709322	Identifier	varlen		709214	1					
ANR	709323	AssignmentExpression	varlen = 0		709214	2		=			
ANR	709324	Identifier	varlen		709214	0					
ANR	709325	PrimaryExpression	0		709214	1					
ANR	709326	ExpressionStatement	"r = get_char_length_tree1 ( NCAR ( node ) , reg , & tlen , level )"	2289:6:52508:52564	709214	2	True				
ANR	709327	AssignmentExpression	"r = get_char_length_tree1 ( NCAR ( node ) , reg , & tlen , level )"		709214	0		=			
ANR	709328	Identifier	r		709214	0					
ANR	709329	CallExpression	"get_char_length_tree1 ( NCAR ( node ) , reg , & tlen , level )"		709214	1					
ANR	709330	Callee	get_char_length_tree1		709214	0					
ANR	709331	Identifier	get_char_length_tree1		709214	0					
ANR	709332	ArgumentList	NCAR ( node )		709214	1					
ANR	709333	Argument	NCAR ( node )		709214	0					
ANR	709334	CallExpression	NCAR ( node )		709214	0					
ANR	709335	Callee	NCAR		709214	0					
ANR	709336	Identifier	NCAR		709214	0					
ANR	709337	ArgumentList	node		709214	1					
ANR	709338	Argument	node		709214	0					
ANR	709339	Identifier	node		709214	0					
ANR	709340	Argument	reg		709214	1					
ANR	709341	Identifier	reg		709214	0					
ANR	709342	Argument	& tlen		709214	2					
ANR	709343	UnaryOperationExpression	& tlen		709214	0					
ANR	709344	UnaryOperator	&		709214	0					
ANR	709345	Identifier	tlen		709214	1					
ANR	709346	Argument	level		709214	3					
ANR	709347	Identifier	level		709214	0					
ANR	709348	WhileStatement	while ( r == 0 && IS_NOT_NULL ( node = NCDR ( node ) ) )		709214	3					
ANR	709349	Condition	r == 0 && IS_NOT_NULL ( node = NCDR ( node ) )	2290:13:52579:52618	709214	0	True				
ANR	709350	AndExpression	r == 0 && IS_NOT_NULL ( node = NCDR ( node ) )		709214	0		&&			
ANR	709351	EqualityExpression	r == 0		709214	0		==			
ANR	709352	Identifier	r		709214	0					
ANR	709353	PrimaryExpression	0		709214	1					
ANR	709354	CallExpression	IS_NOT_NULL ( node = NCDR ( node ) )		709214	1					
ANR	709355	Callee	IS_NOT_NULL		709214	0					
ANR	709356	Identifier	IS_NOT_NULL		709214	0					
ANR	709357	ArgumentList	node = NCDR ( node )		709214	1					
ANR	709358	Argument	node = NCDR ( node )		709214	0					
ANR	709359	AssignmentExpression	node = NCDR ( node )		709214	0		=			
ANR	709360	Identifier	node		709214	0					
ANR	709361	CallExpression	NCDR ( node )		709214	1					
ANR	709362	Callee	NCDR		709214	0					
ANR	709363	Identifier	NCDR		709214	0					
ANR	709364	ArgumentList	node		709214	1					
ANR	709365	Argument	node		709214	0					
ANR	709366	Identifier	node		709214	0					
ANR	709367	CompoundStatement		22:55:464:464	709214	1					
ANR	709368	ExpressionStatement	"r = get_char_length_tree1 ( NCAR ( node ) , reg , & tlen2 , level )"	2291:1:52624:52681	709214	0	True				
ANR	709369	AssignmentExpression	"r = get_char_length_tree1 ( NCAR ( node ) , reg , & tlen2 , level )"		709214	0		=			
ANR	709370	Identifier	r		709214	0					
ANR	709371	CallExpression	"get_char_length_tree1 ( NCAR ( node ) , reg , & tlen2 , level )"		709214	1					
ANR	709372	Callee	get_char_length_tree1		709214	0					
ANR	709373	Identifier	get_char_length_tree1		709214	0					
ANR	709374	ArgumentList	NCAR ( node )		709214	1					
ANR	709375	Argument	NCAR ( node )		709214	0					
ANR	709376	CallExpression	NCAR ( node )		709214	0					
ANR	709377	Callee	NCAR		709214	0					
ANR	709378	Identifier	NCAR		709214	0					
ANR	709379	ArgumentList	node		709214	1					
ANR	709380	Argument	node		709214	0					
ANR	709381	Identifier	node		709214	0					
ANR	709382	Argument	reg		709214	1					
ANR	709383	Identifier	reg		709214	0					
ANR	709384	Argument	& tlen2		709214	2					
ANR	709385	UnaryOperationExpression	& tlen2		709214	0					
ANR	709386	UnaryOperator	&		709214	0					
ANR	709387	Identifier	tlen2		709214	1					
ANR	709388	Argument	level		709214	3					
ANR	709389	Identifier	level		709214	0					
ANR	709390	IfStatement	if ( r == 0 )		709214	1					
ANR	709391	Condition	r == 0	2292:5:52688:52693	709214	0	True				
ANR	709392	EqualityExpression	r == 0		709214	0		==			
ANR	709393	Identifier	r		709214	0					
ANR	709394	PrimaryExpression	0		709214	1					
ANR	709395	CompoundStatement		24:13:539:539	709214	1					
ANR	709396	IfStatement	if ( tlen != tlen2 )		709214	0					
ANR	709397	Condition	tlen != tlen2	2293:7:52705:52717	709214	0	True				
ANR	709398	EqualityExpression	tlen != tlen2		709214	0		!=			
ANR	709399	Identifier	tlen		709214	0					
ANR	709400	Identifier	tlen2		709214	1					
ANR	709401	ExpressionStatement	varlen = 1	2294:5:52725:52735	709214	1	True				
ANR	709402	AssignmentExpression	varlen = 1		709214	0		=			
ANR	709403	Identifier	varlen		709214	0					
ANR	709404	PrimaryExpression	1		709214	1					
ANR	709405	IfStatement	if ( r == 0 )		709214	4					
ANR	709406	Condition	r == 0	2297:10:52758:52763	709214	0	True				
ANR	709407	EqualityExpression	r == 0		709214	0		==			
ANR	709408	Identifier	r		709214	0					
ANR	709409	PrimaryExpression	0		709214	1					
ANR	709410	CompoundStatement		29:18:609:609	709214	1					
ANR	709411	IfStatement	if ( varlen != 0 )		709214	0					
ANR	709412	Condition	varlen != 0	2298:5:52773:52783	709214	0	True				
ANR	709413	EqualityExpression	varlen != 0		709214	0		!=			
ANR	709414	Identifier	varlen		709214	0					
ANR	709415	PrimaryExpression	0		709214	1					
ANR	709416	CompoundStatement		30:18:629:629	709214	1					
ANR	709417	IfStatement	if ( level == 1 )		709214	0					
ANR	709418	Condition	level == 1	2299:7:52795:52804	709214	0	True				
ANR	709419	EqualityExpression	level == 1		709214	0		==			
ANR	709420	Identifier	level		709214	0					
ANR	709421	PrimaryExpression	1		709214	1					
ANR	709422	ExpressionStatement	r = GET_CHAR_LEN_TOP_ALT_VARLEN	2300:5:52812:52843	709214	1	True				
ANR	709423	AssignmentExpression	r = GET_CHAR_LEN_TOP_ALT_VARLEN		709214	0		=			
ANR	709424	Identifier	r		709214	0					
ANR	709425	Identifier	GET_CHAR_LEN_TOP_ALT_VARLEN		709214	1					
ANR	709426	ElseStatement	else		709214	0					
ANR	709427	ExpressionStatement	r = GET_CHAR_LEN_VARLEN	2302:5:52858:52881	709214	0	True				
ANR	709428	AssignmentExpression	r = GET_CHAR_LEN_VARLEN		709214	0		=			
ANR	709429	Identifier	r		709214	0					
ANR	709430	Identifier	GET_CHAR_LEN_VARLEN		709214	1					
ANR	709431	ElseStatement	else		709214	0					
ANR	709432	ExpressionStatement	* len = tlen	2305:3:52895:52906	709214	0	True				
ANR	709433	AssignmentExpression	* len = tlen		709214	0		=			
ANR	709434	UnaryOperationExpression	* len		709214	0					
ANR	709435	UnaryOperator	*		709214	0					
ANR	709436	Identifier	len		709214	1					
ANR	709437	Identifier	tlen		709214	1					
ANR	709438	BreakStatement	break ;	2308:4:52926:52931	709214	5	True				
ANR	709439	Label	case NT_STR :	2310:2:52936:52947	709214	6	True				
ANR	709440	Identifier	NT_STR		709214	0					
ANR	709441	CompoundStatement		45:6:836:852	709214	7					
ANR	709442	IdentifierDeclStatement	StrNode * sn = NSTR ( node ) ;	2312:6:52961:52985	709214	0	True				
ANR	709443	IdentifierDecl	* sn = NSTR ( node )		709214	0					
ANR	709444	IdentifierDeclType	StrNode *		709214	0					
ANR	709445	Identifier	sn		709214	1					
ANR	709446	AssignmentExpression	* sn = NSTR ( node )		709214	2		=			
ANR	709447	Identifier	sn		709214	0					
ANR	709448	CallExpression	NSTR ( node )		709214	1					
ANR	709449	Callee	NSTR		709214	0					
ANR	709450	Identifier	NSTR		709214	0					
ANR	709451	ArgumentList	node		709214	1					
ANR	709452	Argument	node		709214	0					
ANR	709453	Identifier	node		709214	0					
ANR	709454	IdentifierDeclStatement	UChar * s = sn -> s ;	2313:6:52993:53009	709214	1	True				
ANR	709455	IdentifierDecl	* s = sn -> s		709214	0					
ANR	709456	IdentifierDeclType	UChar *		709214	0					
ANR	709457	Identifier	s		709214	1					
ANR	709458	AssignmentExpression	* s = sn -> s		709214	2		=			
ANR	709459	Identifier	s		709214	0					
ANR	709460	PtrMemberAccess	sn -> s		709214	1					
ANR	709461	Identifier	sn		709214	0					
ANR	709462	Identifier	s		709214	1					
ANR	709463	WhileStatement	while ( s < sn -> end )		709214	2					
ANR	709464	Condition	s < sn -> end	2314:13:53024:53034	709214	0	True				
ANR	709465	RelationalExpression	s < sn -> end		709214	0		<			
ANR	709466	Identifier	s		709214	0					
ANR	709467	PtrMemberAccess	sn -> end		709214	1					
ANR	709468	Identifier	sn		709214	0					
ANR	709469	Identifier	end		709214	1					
ANR	709470	CompoundStatement		46:26:880:880	709214	1					
ANR	709471	ExpressionStatement	"s += enclen ( reg -> enc , s )"	2315:1:53040:53064	709214	0	True				
ANR	709472	AssignmentExpression	"s += enclen ( reg -> enc , s )"		709214	0		+=			
ANR	709473	Identifier	s		709214	0					
ANR	709474	CallExpression	"enclen ( reg -> enc , s )"		709214	1					
ANR	709475	Callee	enclen		709214	0					
ANR	709476	Identifier	enclen		709214	0					
ANR	709477	ArgumentList	reg -> enc		709214	1					
ANR	709478	Argument	reg -> enc		709214	0					
ANR	709479	PtrMemberAccess	reg -> enc		709214	0					
ANR	709480	Identifier	reg		709214	0					
ANR	709481	Identifier	enc		709214	1					
ANR	709482	Argument	s		709214	1					
ANR	709483	Identifier	s		709214	0					
ANR	709484	ExpressionStatement	( * len ) ++	2316:1:53067:53075	709214	1	True				
ANR	709485	PostIncDecOperationExpression	( * len ) ++		709214	0					
ANR	709486	UnaryOperationExpression	* len		709214	0					
ANR	709487	UnaryOperator	*		709214	0					
ANR	709488	Identifier	len		709214	1					
ANR	709489	IncDec	++		709214	1					
ANR	709490	BreakStatement	break ;	2319:4:53095:53100	709214	8	True				
ANR	709491	Label	case NT_QTFR :	2321:2:53105:53117	709214	9	True				
ANR	709492	Identifier	NT_QTFR		709214	0					
ANR	709493	CompoundStatement		55:6:974:1000	709214	10					
ANR	709494	IdentifierDeclStatement	QtfrNode * qn = NQTFR ( node ) ;	2323:6:53131:53157	709214	0	True				
ANR	709495	IdentifierDecl	* qn = NQTFR ( node )		709214	0					
ANR	709496	IdentifierDeclType	QtfrNode *		709214	0					
ANR	709497	Identifier	qn		709214	1					
ANR	709498	AssignmentExpression	* qn = NQTFR ( node )		709214	2		=			
ANR	709499	Identifier	qn		709214	0					
ANR	709500	CallExpression	NQTFR ( node )		709214	1					
ANR	709501	Callee	NQTFR		709214	0					
ANR	709502	Identifier	NQTFR		709214	0					
ANR	709503	ArgumentList	node		709214	1					
ANR	709504	Argument	node		709214	0					
ANR	709505	Identifier	node		709214	0					
ANR	709506	IfStatement	if ( qn -> lower == qn -> upper )		709214	1					
ANR	709507	Condition	qn -> lower == qn -> upper	2324:10:53169:53190	709214	0	True				
ANR	709508	EqualityExpression	qn -> lower == qn -> upper		709214	0		==			
ANR	709509	PtrMemberAccess	qn -> lower		709214	0					
ANR	709510	Identifier	qn		709214	0					
ANR	709511	Identifier	lower		709214	1					
ANR	709512	PtrMemberAccess	qn -> upper		709214	1					
ANR	709513	Identifier	qn		709214	0					
ANR	709514	Identifier	upper		709214	1					
ANR	709515	CompoundStatement		56:34:1036:1036	709214	1					
ANR	709516	ExpressionStatement	"r = get_char_length_tree1 ( qn -> target , reg , & tlen , level )"	2325:1:53196:53252	709214	0	True				
ANR	709517	AssignmentExpression	"r = get_char_length_tree1 ( qn -> target , reg , & tlen , level )"		709214	0		=			
ANR	709518	Identifier	r		709214	0					
ANR	709519	CallExpression	"get_char_length_tree1 ( qn -> target , reg , & tlen , level )"		709214	1					
ANR	709520	Callee	get_char_length_tree1		709214	0					
ANR	709521	Identifier	get_char_length_tree1		709214	0					
ANR	709522	ArgumentList	qn -> target		709214	1					
ANR	709523	Argument	qn -> target		709214	0					
ANR	709524	PtrMemberAccess	qn -> target		709214	0					
ANR	709525	Identifier	qn		709214	0					
ANR	709526	Identifier	target		709214	1					
ANR	709527	Argument	reg		709214	1					
ANR	709528	Identifier	reg		709214	0					
ANR	709529	Argument	& tlen		709214	2					
ANR	709530	UnaryOperationExpression	& tlen		709214	0					
ANR	709531	UnaryOperator	&		709214	0					
ANR	709532	Identifier	tlen		709214	1					
ANR	709533	Argument	level		709214	3					
ANR	709534	Identifier	level		709214	0					
ANR	709535	IfStatement	if ( r == 0 )		709214	1					
ANR	709536	Condition	r == 0	2326:5:53259:53264	709214	0	True				
ANR	709537	EqualityExpression	r == 0		709214	0		==			
ANR	709538	Identifier	r		709214	0					
ANR	709539	PrimaryExpression	0		709214	1					
ANR	709540	ExpressionStatement	"* len = distance_multiply ( tlen , qn -> lower )"	2327:3:53270:53311	709214	1	True				
ANR	709541	AssignmentExpression	"* len = distance_multiply ( tlen , qn -> lower )"		709214	0		=			
ANR	709542	UnaryOperationExpression	* len		709214	0					
ANR	709543	UnaryOperator	*		709214	0					
ANR	709544	Identifier	len		709214	1					
ANR	709545	CallExpression	"distance_multiply ( tlen , qn -> lower )"		709214	1					
ANR	709546	Callee	distance_multiply		709214	0					
ANR	709547	Identifier	distance_multiply		709214	0					
ANR	709548	ArgumentList	tlen		709214	1					
ANR	709549	Argument	tlen		709214	0					
ANR	709550	Identifier	tlen		709214	0					
ANR	709551	Argument	qn -> lower		709214	1					
ANR	709552	PtrMemberAccess	qn -> lower		709214	0					
ANR	709553	Identifier	qn		709214	0					
ANR	709554	Identifier	lower		709214	1					
ANR	709555	ElseStatement	else		709214	0					
ANR	709556	ExpressionStatement	r = GET_CHAR_LEN_VARLEN	2330:1:53333:53356	709214	0	True				
ANR	709557	AssignmentExpression	r = GET_CHAR_LEN_VARLEN		709214	0		=			
ANR	709558	Identifier	r		709214	0					
ANR	709559	Identifier	GET_CHAR_LEN_VARLEN		709214	1					
ANR	709560	BreakStatement	break ;	2332:4:53368:53373	709214	11	True				
ANR	709561	Label	case NT_CALL :	2335:2:53401:53413	709214	12	True				
ANR	709562	Identifier	NT_CALL		709214	0					
ANR	709563	IfStatement	if ( ! IS_CALL_RECURSION ( NCALL ( node ) ) )		709214	13					
ANR	709564	Condition	! IS_CALL_RECURSION ( NCALL ( node ) )	2336:8:53423:53454	709214	0	True				
ANR	709565	UnaryOperationExpression	! IS_CALL_RECURSION ( NCALL ( node ) )		709214	0					
ANR	709566	UnaryOperator	!		709214	0					
ANR	709567	CallExpression	IS_CALL_RECURSION ( NCALL ( node ) )		709214	1					
ANR	709568	Callee	IS_CALL_RECURSION		709214	0					
ANR	709569	Identifier	IS_CALL_RECURSION		709214	0					
ANR	709570	ArgumentList	NCALL ( node )		709214	1					
ANR	709571	Argument	NCALL ( node )		709214	0					
ANR	709572	CallExpression	NCALL ( node )		709214	0					
ANR	709573	Callee	NCALL		709214	0					
ANR	709574	Identifier	NCALL		709214	0					
ANR	709575	ArgumentList	node		709214	1					
ANR	709576	Argument	node		709214	0					
ANR	709577	Identifier	node		709214	0					
ANR	709578	ExpressionStatement	"r = get_char_length_tree1 ( NCALL ( node ) -> target , reg , len , level )"	2337:6:53463:53526	709214	1	True				
ANR	709579	AssignmentExpression	"r = get_char_length_tree1 ( NCALL ( node ) -> target , reg , len , level )"		709214	0		=			
ANR	709580	Identifier	r		709214	0					
ANR	709581	CallExpression	"get_char_length_tree1 ( NCALL ( node ) -> target , reg , len , level )"		709214	1					
ANR	709582	Callee	get_char_length_tree1		709214	0					
ANR	709583	Identifier	get_char_length_tree1		709214	0					
ANR	709584	ArgumentList	NCALL ( node ) -> target		709214	1					
ANR	709585	Argument	NCALL ( node ) -> target		709214	0					
ANR	709586	PtrMemberAccess	NCALL ( node ) -> target		709214	0					
ANR	709587	CallExpression	NCALL ( node )		709214	0					
ANR	709588	Callee	NCALL		709214	0					
ANR	709589	Identifier	NCALL		709214	0					
ANR	709590	ArgumentList	node		709214	1					
ANR	709591	Argument	node		709214	0					
ANR	709592	Identifier	node		709214	0					
ANR	709593	Identifier	target		709214	1					
ANR	709594	Argument	reg		709214	1					
ANR	709595	Identifier	reg		709214	0					
ANR	709596	Argument	len		709214	2					
ANR	709597	Identifier	len		709214	0					
ANR	709598	Argument	level		709214	3					
ANR	709599	Identifier	level		709214	0					
ANR	709600	ElseStatement	else		709214	0					
ANR	709601	ExpressionStatement	r = GET_CHAR_LEN_VARLEN	2339:6:53543:53566	709214	0	True				
ANR	709602	AssignmentExpression	r = GET_CHAR_LEN_VARLEN		709214	0		=			
ANR	709603	Identifier	r		709214	0					
ANR	709604	Identifier	GET_CHAR_LEN_VARLEN		709214	1					
ANR	709605	BreakStatement	break ;	2340:4:53572:53577	709214	14	True				
ANR	709606	Label	case NT_CTYPE :	2343:2:53589:53602	709214	15	True				
ANR	709607	Identifier	NT_CTYPE		709214	0					
ANR	709608	ExpressionStatement	* len = 1	2344:4:53608:53616	709214	16	True				
ANR	709609	AssignmentExpression	* len = 1		709214	0		=			
ANR	709610	UnaryOperationExpression	* len		709214	0					
ANR	709611	UnaryOperator	*		709214	0					
ANR	709612	Identifier	len		709214	1					
ANR	709613	PrimaryExpression	1		709214	1					
ANR	709614	BreakStatement	break ;	2345:4:53622:53627	709214	17	True				
ANR	709615	Label	case NT_CCLASS :	2347:2:53632:53646	709214	18	True				
ANR	709616	Identifier	NT_CCLASS		709214	0					
ANR	709617	Label	case NT_CANY :	2348:2:53650:53662	709214	19	True				
ANR	709618	Identifier	NT_CANY		709214	0					
ANR	709619	ExpressionStatement	* len = 1	2349:4:53668:53676	709214	20	True				
ANR	709620	AssignmentExpression	* len = 1		709214	0		=			
ANR	709621	UnaryOperationExpression	* len		709214	0					
ANR	709622	UnaryOperator	*		709214	0					
ANR	709623	Identifier	len		709214	1					
ANR	709624	PrimaryExpression	1		709214	1					
ANR	709625	BreakStatement	break ;	2350:4:53682:53687	709214	21	True				
ANR	709626	Label	case NT_ENCLOSE :	2352:2:53692:53707	709214	22	True				
ANR	709627	Identifier	NT_ENCLOSE		709214	0					
ANR	709628	CompoundStatement		86:6:1564:1596	709214	23					
ANR	709629	IdentifierDeclStatement	EncloseNode * en = NENCLOSE ( node ) ;	2354:6:53721:53753	709214	0	True				
ANR	709630	IdentifierDecl	* en = NENCLOSE ( node )		709214	0					
ANR	709631	IdentifierDeclType	EncloseNode *		709214	0					
ANR	709632	Identifier	en		709214	1					
ANR	709633	AssignmentExpression	* en = NENCLOSE ( node )		709214	2		=			
ANR	709634	Identifier	en		709214	0					
ANR	709635	CallExpression	NENCLOSE ( node )		709214	1					
ANR	709636	Callee	NENCLOSE		709214	0					
ANR	709637	Identifier	NENCLOSE		709214	0					
ANR	709638	ArgumentList	node		709214	1					
ANR	709639	Argument	node		709214	0					
ANR	709640	Identifier	node		709214	0					
ANR	709641	SwitchStatement	switch ( en -> type )		709214	1					
ANR	709642	Condition	en -> type	2355:14:53769:53776	709214	0	True				
ANR	709643	PtrMemberAccess	en -> type		709214	0					
ANR	709644	Identifier	en		709214	0					
ANR	709645	Identifier	type		709214	1					
ANR	709646	CompoundStatement		87:24:1622:1622	709214	1					
ANR	709647	Label	case ENCLOSE_MEMORY :	2356:6:53787:53806	709214	0	True				
ANR	709648	Identifier	ENCLOSE_MEMORY		709214	0					
ANR	709649	IfStatement	if ( IS_ENCLOSE_CLEN_FIXED ( en ) )		709214	1					
ANR	709650	Condition	IS_ENCLOSE_CLEN_FIXED ( en )	2358:5:53836:53860	709214	0	True				
ANR	709651	CallExpression	IS_ENCLOSE_CLEN_FIXED ( en )		709214	0					
ANR	709652	Callee	IS_ENCLOSE_CLEN_FIXED		709214	0					
ANR	709653	Identifier	IS_ENCLOSE_CLEN_FIXED		709214	0					
ANR	709654	ArgumentList	en		709214	1					
ANR	709655	Argument	en		709214	0					
ANR	709656	Identifier	en		709214	0					
ANR	709657	ExpressionStatement	* len = en -> char_len	2359:3:53866:53885	709214	1	True				
ANR	709658	AssignmentExpression	* len = en -> char_len		709214	0		=			
ANR	709659	UnaryOperationExpression	* len		709214	0					
ANR	709660	UnaryOperator	*		709214	0					
ANR	709661	Identifier	len		709214	1					
ANR	709662	PtrMemberAccess	en -> char_len		709214	1					
ANR	709663	Identifier	en		709214	0					
ANR	709664	Identifier	char_len		709214	1					
ANR	709665	ElseStatement	else		709214	0					
ANR	709666	CompoundStatement		92:6:1736:1736	709214	0					
ANR	709667	ExpressionStatement	"r = get_char_length_tree1 ( en -> target , reg , len , level )"	2361:3:53898:53952	709214	0	True				
ANR	709668	AssignmentExpression	"r = get_char_length_tree1 ( en -> target , reg , len , level )"		709214	0		=			
ANR	709669	Identifier	r		709214	0					
ANR	709670	CallExpression	"get_char_length_tree1 ( en -> target , reg , len , level )"		709214	1					
ANR	709671	Callee	get_char_length_tree1		709214	0					
ANR	709672	Identifier	get_char_length_tree1		709214	0					
ANR	709673	ArgumentList	en -> target		709214	1					
ANR	709674	Argument	en -> target		709214	0					
ANR	709675	PtrMemberAccess	en -> target		709214	0					
ANR	709676	Identifier	en		709214	0					
ANR	709677	Identifier	target		709214	1					
ANR	709678	Argument	reg		709214	1					
ANR	709679	Identifier	reg		709214	0					
ANR	709680	Argument	len		709214	2					
ANR	709681	Identifier	len		709214	0					
ANR	709682	Argument	level		709214	3					
ANR	709683	Identifier	level		709214	0					
ANR	709684	IfStatement	if ( r == 0 )		709214	1					
ANR	709685	Condition	r == 0	2362:7:53961:53966	709214	0	True				
ANR	709686	EqualityExpression	r == 0		709214	0		==			
ANR	709687	Identifier	r		709214	0					
ANR	709688	PrimaryExpression	0		709214	1					
ANR	709689	CompoundStatement		94:15:1812:1812	709214	1					
ANR	709690	ExpressionStatement	en -> char_len = * len	2363:5:53976:53995	709214	0	True				
ANR	709691	AssignmentExpression	en -> char_len = * len		709214	0		=			
ANR	709692	PtrMemberAccess	en -> char_len		709214	0					
ANR	709693	Identifier	en		709214	0					
ANR	709694	Identifier	char_len		709214	1					
ANR	709695	UnaryOperationExpression	* len		709214	1					
ANR	709696	UnaryOperator	*		709214	0					
ANR	709697	Identifier	len		709214	1					
ANR	709698	ExpressionStatement	"SET_ENCLOSE_STATUS ( node , NST_CLEN_FIXED )"	2364:5:54002:54042	709214	1	True				
ANR	709699	CallExpression	"SET_ENCLOSE_STATUS ( node , NST_CLEN_FIXED )"		709214	0					
ANR	709700	Callee	SET_ENCLOSE_STATUS		709214	0					
ANR	709701	Identifier	SET_ENCLOSE_STATUS		709214	0					
ANR	709702	ArgumentList	node		709214	1					
ANR	709703	Argument	node		709214	0					
ANR	709704	Identifier	node		709214	0					
ANR	709705	Argument	NST_CLEN_FIXED		709214	1					
ANR	709706	Identifier	NST_CLEN_FIXED		709214	0					
ANR	709707	BreakStatement	break ;	2367:1:54053:54058	709214	2	True				
ANR	709708	Label	case ENCLOSE_OPTION :	2369:6:54073:54092	709214	3	True				
ANR	709709	Identifier	ENCLOSE_OPTION		709214	0					
ANR	709710	Label	case ENCLOSE_STOP_BACKTRACK :	2370:6:54100:54127	709214	4	True				
ANR	709711	Identifier	ENCLOSE_STOP_BACKTRACK		709214	0					
ANR	709712	ExpressionStatement	"r = get_char_length_tree1 ( en -> target , reg , len , level )"	2371:1:54130:54184	709214	5	True				
ANR	709713	AssignmentExpression	"r = get_char_length_tree1 ( en -> target , reg , len , level )"		709214	0		=			
ANR	709714	Identifier	r		709214	0					
ANR	709715	CallExpression	"get_char_length_tree1 ( en -> target , reg , len , level )"		709214	1					
ANR	709716	Callee	get_char_length_tree1		709214	0					
ANR	709717	Identifier	get_char_length_tree1		709214	0					
ANR	709718	ArgumentList	en -> target		709214	1					
ANR	709719	Argument	en -> target		709214	0					
ANR	709720	PtrMemberAccess	en -> target		709214	0					
ANR	709721	Identifier	en		709214	0					
ANR	709722	Identifier	target		709214	1					
ANR	709723	Argument	reg		709214	1					
ANR	709724	Identifier	reg		709214	0					
ANR	709725	Argument	len		709214	2					
ANR	709726	Identifier	len		709214	0					
ANR	709727	Argument	level		709214	3					
ANR	709728	Identifier	level		709214	0					
ANR	709729	BreakStatement	break ;	2372:1:54187:54192	709214	6	True				
ANR	709730	Label	default :	2373:6:54200:54207	709214	7	True				
ANR	709731	Identifier	default		709214	0					
ANR	709732	BreakStatement	break ;	2374:1:54210:54215	709214	8	True				
ANR	709733	BreakStatement	break ;	2377:4:54235:54240	709214	24	True				
ANR	709734	Label	case NT_ANCHOR :	2379:2:54245:54259	709214	25	True				
ANR	709735	Identifier	NT_ANCHOR		709214	0					
ANR	709736	BreakStatement	break ;	2380:4:54265:54270	709214	26	True				
ANR	709737	Label	default :	2382:2:54275:54282	709214	27	True				
ANR	709738	Identifier	default		709214	0					
ANR	709739	ExpressionStatement	r = GET_CHAR_LEN_VARLEN	2383:4:54288:54311	709214	28	True				
ANR	709740	AssignmentExpression	r = GET_CHAR_LEN_VARLEN		709214	0		=			
ANR	709741	Identifier	r		709214	0					
ANR	709742	Identifier	GET_CHAR_LEN_VARLEN		709214	1					
ANR	709743	BreakStatement	break ;	2384:4:54317:54322	709214	29	True				
ANR	709744	ReturnStatement	return r ;	2387:2:54331:54339	709214	5	True				
ANR	709745	Identifier	r		709214	0					
ANR	709746	ReturnType	static int		709214	1					
ANR	709747	Identifier	get_char_length_tree1		709214	2					
ANR	709748	ParameterList	"Node * node , regex_t * reg , int * len , int level"		709214	3					
ANR	709749	Parameter	Node * node	2268:22:52109:52118	709214	0	True				
ANR	709750	ParameterType	Node *		709214	0					
ANR	709751	Identifier	node		709214	1					
ANR	709752	Parameter	regex_t * reg	2268:34:52121:52132	709214	1	True				
ANR	709753	ParameterType	regex_t *		709214	0					
ANR	709754	Identifier	reg		709214	1					
ANR	709755	Parameter	int * len	2268:48:52135:52142	709214	2	True				
ANR	709756	ParameterType	int *		709214	0					
ANR	709757	Identifier	len		709214	1					
ANR	709758	Parameter	int level	2268:58:52145:52153	709214	3	True				
ANR	709759	ParameterType	int		709214	0					
ANR	709760	Identifier	level		709214	1					
ANR	709761	CFGEntryNode	ENTRY		709214		True				
ANR	709762	CFGExitNode	EXIT		709214		True				
ANR	709763	Symbol	* qn		709214						
ANR	709764	Symbol	IS_NOT_NULL		709214						
ANR	709765	Symbol	NCAR		709214						
ANR	709766	Symbol	* sn		709214						
ANR	709767	Symbol	NCALL		709214						
ANR	709768	Symbol	NST_CLEN_FIXED		709214						
ANR	709769	Symbol	& tlen		709214						
ANR	709770	Symbol	distance_add		709214						
ANR	709771	Symbol	NQTFR		709214						
ANR	709772	Symbol	* en		709214						
ANR	709773	Symbol	qn -> lower		709214						
ANR	709774	Symbol	sn -> s		709214						
ANR	709775	Symbol	len		709214						
ANR	709776	Symbol	GET_CHAR_LEN_TOP_ALT_VARLEN		709214						
ANR	709777	Symbol	reg		709214						
ANR	709778	Symbol	NENCLOSE		709214						
ANR	709779	Symbol	tlen		709214						
ANR	709780	Symbol	GET_CHAR_LEN_VARLEN		709214						
ANR	709781	Symbol	en -> type		709214						
ANR	709782	Symbol	IS_ENCLOSE_CLEN_FIXED		709214						
ANR	709783	Symbol	NCALL ( node ) -> target		709214						
ANR	709784	Symbol	sn		709214						
ANR	709785	Symbol	sn -> end		709214						
ANR	709786	Symbol	qn		709214						
ANR	709787	Symbol	tlen2		709214						
ANR	709788	Symbol	level		709214						
ANR	709789	Symbol	varlen		709214						
ANR	709790	Symbol	en -> char_len		709214						
ANR	709791	Symbol	NCDR		709214						
ANR	709792	Symbol	get_char_length_tree1		709214						
ANR	709793	Symbol	NSTR		709214						
ANR	709794	Symbol	en		709214						
ANR	709795	Symbol	& tlen2		709214						
ANR	709796	Symbol	enclen		709214						
ANR	709797	Symbol	qn -> target		709214						
ANR	709798	Symbol	reg -> enc		709214						
ANR	709799	Symbol	distance_multiply		709214						
ANR	709800	Symbol	node		709214						
ANR	709801	Symbol	qn -> upper		709214						
ANR	709802	Symbol	r		709214						
ANR	709803	Symbol	s		709214						
ANR	709804	Symbol	en -> target		709214						
ANR	709805	Symbol	IS_CALL_RECURSION		709214						
ANR	709806	Symbol	NTYPE		709214						
ANR	709807	Symbol	* NCALL		709214						
ANR	709808	Symbol	* reg		709214						
ANR	709809	Symbol	* len		709214						
ANR	709810	Function	get_char_length_tree	2390:0:54344:54465							
ANR	709811	FunctionDef	"get_char_length_tree (Node * node , regex_t * reg , int * len)"		709810	0					
ANR	709812	CompoundStatement		2392:0:54412:54465	709810	0					
ANR	709813	ReturnStatement	"return get_char_length_tree1 ( node , reg , len , 0 ) ;"	2393:2:54416:54463	709810	0	True				
ANR	709814	CallExpression	"get_char_length_tree1 ( node , reg , len , 0 )"		709810	0					
ANR	709815	Callee	get_char_length_tree1		709810	0					
ANR	709816	Identifier	get_char_length_tree1		709810	0					
ANR	709817	ArgumentList	node		709810	1					
ANR	709818	Argument	node		709810	0					
ANR	709819	Identifier	node		709810	0					
ANR	709820	Argument	reg		709810	1					
ANR	709821	Identifier	reg		709810	0					
ANR	709822	Argument	len		709810	2					
ANR	709823	Identifier	len		709810	0					
ANR	709824	Argument	0		709810	3					
ANR	709825	PrimaryExpression	0		709810	0					
ANR	709826	ReturnType	static int		709810	1					
ANR	709827	Identifier	get_char_length_tree		709810	2					
ANR	709828	ParameterList	"Node * node , regex_t * reg , int * len"		709810	3					
ANR	709829	Parameter	Node * node	2391:21:54376:54385	709810	0	True				
ANR	709830	ParameterType	Node *		709810	0					
ANR	709831	Identifier	node		709810	1					
ANR	709832	Parameter	regex_t * reg	2391:33:54388:54399	709810	1	True				
ANR	709833	ParameterType	regex_t *		709810	0					
ANR	709834	Identifier	reg		709810	1					
ANR	709835	Parameter	int * len	2391:47:54402:54409	709810	2	True				
ANR	709836	ParameterType	int *		709810	0					
ANR	709837	Identifier	len		709810	1					
ANR	709838	CFGEntryNode	ENTRY		709810		True				
ANR	709839	CFGExitNode	EXIT		709810		True				
ANR	709840	Symbol	node		709810						
ANR	709841	Symbol	len		709810						
ANR	709842	Symbol	reg		709810						
ANR	709843	Symbol	get_char_length_tree1		709810						
ANR	709844	Function	is_not_included	2397:0:54505:57757							
ANR	709845	FunctionDef	"is_not_included (Node * x , Node * y , regex_t * reg)"		709844	0					
ANR	709846	CompoundStatement		2399:0:54564:57757	709844	0					
ANR	709847	IdentifierDeclStatement	"int i , len ;"	2400:2:54568:54578	709844	0	True				
ANR	709848	IdentifierDecl	i		709844	0					
ANR	709849	IdentifierDeclType	int		709844	0					
ANR	709850	Identifier	i		709844	1					
ANR	709851	IdentifierDecl	len		709844	1					
ANR	709852	IdentifierDeclType	int		709844	0					
ANR	709853	Identifier	len		709844	1					
ANR	709854	IdentifierDeclStatement	OnigCodePoint code ;	2401:2:54582:54600	709844	1	True				
ANR	709855	IdentifierDecl	code		709844	0					
ANR	709856	IdentifierDeclType	OnigCodePoint		709844	0					
ANR	709857	Identifier	code		709844	1					
ANR	709858	IdentifierDeclStatement	UChar * p ;	2402:2:54604:54612	709844	2	True				
ANR	709859	IdentifierDecl	* p		709844	0					
ANR	709860	IdentifierDeclType	UChar *		709844	0					
ANR	709861	Identifier	p		709844	1					
ANR	709862	IdentifierDeclStatement	int ytype ;	2403:2:54616:54625	709844	3	True				
ANR	709863	IdentifierDecl	ytype		709844	0					
ANR	709864	IdentifierDeclType	int		709844	0					
ANR	709865	Identifier	ytype		709844	1					
ANR	709866	Label	retry :	2405:1:54629:54634	709844	4	True				
ANR	709867	Identifier	retry		709844	0					
ANR	709868	ExpressionStatement	ytype = NTYPE ( y )	2406:2:54638:54654	709844	5	True				
ANR	709869	AssignmentExpression	ytype = NTYPE ( y )		709844	0		=			
ANR	709870	Identifier	ytype		709844	0					
ANR	709871	CallExpression	NTYPE ( y )		709844	1					
ANR	709872	Callee	NTYPE		709844	0					
ANR	709873	Identifier	NTYPE		709844	0					
ANR	709874	ArgumentList	y		709844	1					
ANR	709875	Argument	y		709844	0					
ANR	709876	Identifier	y		709844	0					
ANR	709877	SwitchStatement	switch ( NTYPE ( x ) )		709844	6					
ANR	709878	Condition	NTYPE ( x )	2407:10:54666:54673	709844	0	True				
ANR	709879	CallExpression	NTYPE ( x )		709844	0					
ANR	709880	Callee	NTYPE		709844	0					
ANR	709881	Identifier	NTYPE		709844	0					
ANR	709882	ArgumentList	x		709844	1					
ANR	709883	Argument	x		709844	0					
ANR	709884	Identifier	x		709844	0					
ANR	709885	CompoundStatement		9:20:111:111	709844	1					
ANR	709886	Label	case NT_CTYPE :	2408:2:54680:54693	709844	0	True				
ANR	709887	Identifier	NT_CTYPE		709844	0					
ANR	709888	CompoundStatement		11:4:134:134	709844	1					
ANR	709889	SwitchStatement	switch ( ytype )		709844	0					
ANR	709890	Condition	ytype	2410:14:54715:54719	709844	0	True				
ANR	709891	Identifier	ytype		709844	0					
ANR	709892	CompoundStatement		12:21:157:157	709844	1					
ANR	709893	Label	case NT_CTYPE :	2411:6:54730:54743	709844	0	True				
ANR	709894	Identifier	NT_CTYPE		709844	0					
ANR	709895	IfStatement	if ( NCTYPE ( y ) -> ctype == NCTYPE ( x ) -> ctype && NCTYPE ( y ) -> not != NCTYPE ( x ) -> not )		709844	1					
ANR	709896	Condition	NCTYPE ( y ) -> ctype == NCTYPE ( x ) -> ctype && NCTYPE ( y ) -> not != NCTYPE ( x ) -> not	2412:5:54750:54828	709844	0	True				
ANR	709897	AndExpression	NCTYPE ( y ) -> ctype == NCTYPE ( x ) -> ctype && NCTYPE ( y ) -> not != NCTYPE ( x ) -> not		709844	0		&&			
ANR	709898	EqualityExpression	NCTYPE ( y ) -> ctype == NCTYPE ( x ) -> ctype		709844	0		==			
ANR	709899	PtrMemberAccess	NCTYPE ( y ) -> ctype		709844	0					
ANR	709900	CallExpression	NCTYPE ( y )		709844	0					
ANR	709901	Callee	NCTYPE		709844	0					
ANR	709902	Identifier	NCTYPE		709844	0					
ANR	709903	ArgumentList	y		709844	1					
ANR	709904	Argument	y		709844	0					
ANR	709905	Identifier	y		709844	0					
ANR	709906	Identifier	ctype		709844	1					
ANR	709907	PtrMemberAccess	NCTYPE ( x ) -> ctype		709844	1					
ANR	709908	CallExpression	NCTYPE ( x )		709844	0					
ANR	709909	Callee	NCTYPE		709844	0					
ANR	709910	Identifier	NCTYPE		709844	0					
ANR	709911	ArgumentList	x		709844	1					
ANR	709912	Argument	x		709844	0					
ANR	709913	Identifier	x		709844	0					
ANR	709914	Identifier	ctype		709844	1					
ANR	709915	EqualityExpression	NCTYPE ( y ) -> not != NCTYPE ( x ) -> not		709844	1		!=			
ANR	709916	PtrMemberAccess	NCTYPE ( y ) -> not		709844	0					
ANR	709917	CallExpression	NCTYPE ( y )		709844	0					
ANR	709918	Callee	NCTYPE		709844	0					
ANR	709919	Identifier	NCTYPE		709844	0					
ANR	709920	ArgumentList	y		709844	1					
ANR	709921	Argument	y		709844	0					
ANR	709922	Identifier	y		709844	0					
ANR	709923	Identifier	not		709844	1					
ANR	709924	PtrMemberAccess	NCTYPE ( x ) -> not		709844	1					
ANR	709925	CallExpression	NCTYPE ( x )		709844	0					
ANR	709926	Callee	NCTYPE		709844	0					
ANR	709927	Identifier	NCTYPE		709844	0					
ANR	709928	ArgumentList	x		709844	1					
ANR	709929	Argument	x		709844	0					
ANR	709930	Identifier	x		709844	0					
ANR	709931	Identifier	not		709844	1					
ANR	709932	ReturnStatement	return 1 ;	2414:3:54834:54842	709844	1	True				
ANR	709933	PrimaryExpression	1		709844	0					
ANR	709934	ElseStatement	else		709844	0					
ANR	709935	ReturnStatement	return 0 ;	2416:3:54853:54861	709844	0	True				
ANR	709936	PrimaryExpression	0		709844	0					
ANR	709937	BreakStatement	break ;	2417:1:54864:54869	709844	2	True				
ANR	709938	Label	case NT_CCLASS :	2419:6:54878:54892	709844	3	True				
ANR	709939	Identifier	NT_CCLASS		709844	0					
ANR	709940	Label	swap :	2420:6:54900:54904	709844	4	True				
ANR	709941	Identifier	swap		709844	0					
ANR	709942	CompoundStatement		24:3:347:356	709844	5					
ANR	709943	IdentifierDeclStatement	Node * tmp ;	2422:3:54912:54921	709844	0	True				
ANR	709944	IdentifierDecl	* tmp		709844	0					
ANR	709945	IdentifierDeclType	Node *		709844	0					
ANR	709946	Identifier	tmp		709844	1					
ANR	709947	ExpressionStatement	tmp = x	2423:3:54926:54933	709844	1	True				
ANR	709948	AssignmentExpression	tmp = x		709844	0		=			
ANR	709949	Identifier	tmp		709844	0					
ANR	709950	Identifier	x		709844	1					
ANR	709951	ExpressionStatement	x = y	2423:12:54935:54940	709844	2	True				
ANR	709952	AssignmentExpression	x = y		709844	0		=			
ANR	709953	Identifier	x		709844	0					
ANR	709954	Identifier	y		709844	1					
ANR	709955	ExpressionStatement	y = tmp	2423:19:54942:54949	709844	3	True				
ANR	709956	AssignmentExpression	y = tmp		709844	0		=			
ANR	709957	Identifier	y		709844	0					
ANR	709958	Identifier	tmp		709844	1					
ANR	709959	GotoStatement	goto retry ;	2424:3:54954:54964	709844	4	True				
ANR	709960	Identifier	retry		709844	0					
ANR	709961	BreakStatement	break ;	2426:1:54970:54975	709844	6	True				
ANR	709962	Label	case NT_STR :	2428:6:54984:54995	709844	7	True				
ANR	709963	Identifier	NT_STR		709844	0					
ANR	709964	GotoStatement	goto swap ;	2429:1:54998:55007	709844	8	True				
ANR	709965	Identifier	swap		709844	0					
ANR	709966	BreakStatement	break ;	2430:1:55010:55015	709844	9	True				
ANR	709967	Label	default :	2432:6:55024:55031	709844	10	True				
ANR	709968	Identifier	default		709844	0					
ANR	709969	BreakStatement	break ;	2433:1:55034:55039	709844	11	True				
ANR	709970	BreakStatement	break ;	2436:4:55059:55064	709844	2	True				
ANR	709971	Label	case NT_CCLASS :	2438:2:55069:55083	709844	3	True				
ANR	709972	Identifier	NT_CCLASS		709844	0					
ANR	709973	CompoundStatement		42:6:532:559	709844	4					
ANR	709974	IdentifierDeclStatement	CClassNode * xc = NCCLASS ( x ) ;	2440:6:55097:55124	709844	0	True				
ANR	709975	IdentifierDecl	* xc = NCCLASS ( x )		709844	0					
ANR	709976	IdentifierDeclType	CClassNode *		709844	0					
ANR	709977	Identifier	xc		709844	1					
ANR	709978	AssignmentExpression	* xc = NCCLASS ( x )		709844	2		=			
ANR	709979	Identifier	xc		709844	0					
ANR	709980	CallExpression	NCCLASS ( x )		709844	1					
ANR	709981	Callee	NCCLASS		709844	0					
ANR	709982	Identifier	NCCLASS		709844	0					
ANR	709983	ArgumentList	x		709844	1					
ANR	709984	Argument	x		709844	0					
ANR	709985	Identifier	x		709844	0					
ANR	709986	SwitchStatement	switch ( ytype )		709844	1					
ANR	709987	Condition	ytype	2441:14:55140:55144	709844	0	True				
ANR	709988	Identifier	ytype		709844	0					
ANR	709989	CompoundStatement		43:21:582:582	709844	1					
ANR	709990	Label	case NT_CTYPE :	2442:6:55155:55168	709844	0	True				
ANR	709991	Identifier	NT_CTYPE		709844	0					
ANR	709992	SwitchStatement	switch ( NCTYPE ( y ) -> ctype )		709844	1					
ANR	709993	Condition	NCTYPE ( y ) -> ctype	2443:9:55179:55194	709844	0	True				
ANR	709994	PtrMemberAccess	NCTYPE ( y ) -> ctype		709844	0					
ANR	709995	CallExpression	NCTYPE ( y )		709844	0					
ANR	709996	Callee	NCTYPE		709844	0					
ANR	709997	Identifier	NCTYPE		709844	0					
ANR	709998	ArgumentList	y		709844	1					
ANR	709999	Argument	y		709844	0					
ANR	710000	Identifier	y		709844	0					
ANR	710001	Identifier	ctype		709844	1					
ANR	710002	CompoundStatement		45:27:632:632	709844	1					
ANR	710003	Label	case ONIGENC_CTYPE_WORD :	2444:1:55200:55223	709844	0	True				
ANR	710004	Identifier	ONIGENC_CTYPE_WORD		709844	0					
ANR	710005	IfStatement	if ( NCTYPE ( y ) -> not == 0 )		709844	1					
ANR	710006	Condition	NCTYPE ( y ) -> not == 0	2445:7:55232:55250	709844	0	True				
ANR	710007	EqualityExpression	NCTYPE ( y ) -> not == 0		709844	0		==			
ANR	710008	PtrMemberAccess	NCTYPE ( y ) -> not		709844	0					
ANR	710009	CallExpression	NCTYPE ( y )		709844	0					
ANR	710010	Callee	NCTYPE		709844	0					
ANR	710011	Identifier	NCTYPE		709844	0					
ANR	710012	ArgumentList	y		709844	1					
ANR	710013	Argument	y		709844	0					
ANR	710014	Identifier	y		709844	0					
ANR	710015	Identifier	not		709844	1					
ANR	710016	PrimaryExpression	0		709844	1					
ANR	710017	CompoundStatement		47:28:688:688	709844	1					
ANR	710018	IfStatement	if ( IS_NULL ( xc -> mbuf ) && ! IS_NCCLASS_NOT ( xc ) )		709844	0					
ANR	710019	Condition	IS_NULL ( xc -> mbuf ) && ! IS_NCCLASS_NOT ( xc )	2446:9:55264:55303	709844	0	True				
ANR	710020	AndExpression	IS_NULL ( xc -> mbuf ) && ! IS_NCCLASS_NOT ( xc )		709844	0		&&			
ANR	710021	CallExpression	IS_NULL ( xc -> mbuf )		709844	0					
ANR	710022	Callee	IS_NULL		709844	0					
ANR	710023	Identifier	IS_NULL		709844	0					
ANR	710024	ArgumentList	xc -> mbuf		709844	1					
ANR	710025	Argument	xc -> mbuf		709844	0					
ANR	710026	PtrMemberAccess	xc -> mbuf		709844	0					
ANR	710027	Identifier	xc		709844	0					
ANR	710028	Identifier	mbuf		709844	1					
ANR	710029	UnaryOperationExpression	! IS_NCCLASS_NOT ( xc )		709844	1					
ANR	710030	UnaryOperator	!		709844	0					
ANR	710031	CallExpression	IS_NCCLASS_NOT ( xc )		709844	1					
ANR	710032	Callee	IS_NCCLASS_NOT		709844	0					
ANR	710033	Identifier	IS_NCCLASS_NOT		709844	0					
ANR	710034	ArgumentList	xc		709844	1					
ANR	710035	Argument	xc		709844	0					
ANR	710036	Identifier	xc		709844	0					
ANR	710037	CompoundStatement		48:51:741:741	709844	1					
ANR	710038	ForStatement	for ( i = 0 ; i < SINGLE_BYTE_SIZE ; i ++ )		709844	0					
ANR	710039	ForInit	i = 0 ;	2447:12:55320:55325	709844	0	True				
ANR	710040	AssignmentExpression	i = 0		709844	0		=			
ANR	710041	Identifier	i		709844	0					
ANR	710042	PrimaryExpression	0		709844	1					
ANR	710043	Condition	i < SINGLE_BYTE_SIZE	2447:19:55327:55346	709844	1	True				
ANR	710044	RelationalExpression	i < SINGLE_BYTE_SIZE		709844	0		<			
ANR	710045	Identifier	i		709844	0					
ANR	710046	Identifier	SINGLE_BYTE_SIZE		709844	1					
ANR	710047	PostIncDecOperationExpression	i ++	2447:41:55349:55351	709844	2	True				
ANR	710048	Identifier	i		709844	0					
ANR	710049	IncDec	++		709844	1					
ANR	710050	CompoundStatement		49:46:789:789	709844	3					
ANR	710051	IfStatement	"if ( BITSET_AT ( xc -> bs , i ) )"		709844	0					
ANR	710052	Condition	"BITSET_AT ( xc -> bs , i )"	2448:6:55362:55381	709844	0	True				
ANR	710053	CallExpression	"BITSET_AT ( xc -> bs , i )"		709844	0					
ANR	710054	Callee	BITSET_AT		709844	0					
ANR	710055	Identifier	BITSET_AT		709844	0					
ANR	710056	ArgumentList	xc -> bs		709844	1					
ANR	710057	Argument	xc -> bs		709844	0					
ANR	710058	PtrMemberAccess	xc -> bs		709844	0					
ANR	710059	Identifier	xc		709844	0					
ANR	710060	Identifier	bs		709844	1					
ANR	710061	Argument	i		709844	1					
ANR	710062	Identifier	i		709844	0					
ANR	710063	CompoundStatement		50:28:819:819	709844	1					
ANR	710064	IfStatement	"if ( IS_CODE_SB_WORD ( reg -> enc , i ) )"		709844	0					
ANR	710065	Condition	"IS_CODE_SB_WORD ( reg -> enc , i )"	2449:8:55394:55421	709844	0	True				
ANR	710066	CallExpression	"IS_CODE_SB_WORD ( reg -> enc , i )"		709844	0					
ANR	710067	Callee	IS_CODE_SB_WORD		709844	0					
ANR	710068	Identifier	IS_CODE_SB_WORD		709844	0					
ANR	710069	ArgumentList	reg -> enc		709844	1					
ANR	710070	Argument	reg -> enc		709844	0					
ANR	710071	PtrMemberAccess	reg -> enc		709844	0					
ANR	710072	Identifier	reg		709844	0					
ANR	710073	Identifier	enc		709844	1					
ANR	710074	Argument	i		709844	1					
ANR	710075	Identifier	i		709844	0					
ANR	710076	ReturnStatement	return 0 ;	2449:38:55424:55432	709844	1	True				
ANR	710077	PrimaryExpression	0		709844	0					
ANR	710078	ReturnStatement	return 1 ;	2452:7:55454:55462	709844	1	True				
ANR	710079	PrimaryExpression	1		709844	0					
ANR	710080	ReturnStatement	return 0 ;	2454:5:55476:55484	709844	1	True				
ANR	710081	PrimaryExpression	0		709844	0					
ANR	710082	ElseStatement	else		709844	0					
ANR	710083	CompoundStatement		58:8:934:934	709844	0					
ANR	710084	ForStatement	for ( i = 0 ; i < SINGLE_BYTE_SIZE ; i ++ )		709844	0					
ANR	710085	ForInit	i = 0 ;	2457:10:55511:55516	709844	0	True				
ANR	710086	AssignmentExpression	i = 0		709844	0		=			
ANR	710087	Identifier	i		709844	0					
ANR	710088	PrimaryExpression	0		709844	1					
ANR	710089	Condition	i < SINGLE_BYTE_SIZE	2457:17:55518:55537	709844	1	True				
ANR	710090	RelationalExpression	i < SINGLE_BYTE_SIZE		709844	0		<			
ANR	710091	Identifier	i		709844	0					
ANR	710092	Identifier	SINGLE_BYTE_SIZE		709844	1					
ANR	710093	PostIncDecOperationExpression	i ++	2457:39:55540:55542	709844	2	True				
ANR	710094	Identifier	i		709844	0					
ANR	710095	IncDec	++		709844	1					
ANR	710096	CompoundStatement		59:44:980:980	709844	3					
ANR	710097	IfStatement	"if ( ! IS_CODE_SB_WORD ( reg -> enc , i ) )"		709844	0					
ANR	710098	Condition	"! IS_CODE_SB_WORD ( reg -> enc , i )"	2458:11:55558:55587	709844	0	True				
ANR	710099	UnaryOperationExpression	"! IS_CODE_SB_WORD ( reg -> enc , i )"		709844	0					
ANR	710100	UnaryOperator	!		709844	0					
ANR	710101	CallExpression	"IS_CODE_SB_WORD ( reg -> enc , i )"		709844	1					
ANR	710102	Callee	IS_CODE_SB_WORD		709844	0					
ANR	710103	Identifier	IS_CODE_SB_WORD		709844	0					
ANR	710104	ArgumentList	reg -> enc		709844	1					
ANR	710105	Argument	reg -> enc		709844	0					
ANR	710106	PtrMemberAccess	reg -> enc		709844	0					
ANR	710107	Identifier	reg		709844	0					
ANR	710108	Identifier	enc		709844	1					
ANR	710109	Argument	i		709844	1					
ANR	710110	Identifier	i		709844	0					
ANR	710111	CompoundStatement		60:43:1025:1025	709844	1					
ANR	710112	IfStatement	if ( ! IS_NCCLASS_NOT ( xc ) )		709844	0					
ANR	710113	Condition	! IS_NCCLASS_NOT ( xc )	2459:6:55598:55616	709844	0	True				
ANR	710114	UnaryOperationExpression	! IS_NCCLASS_NOT ( xc )		709844	0					
ANR	710115	UnaryOperator	!		709844	0					
ANR	710116	CallExpression	IS_NCCLASS_NOT ( xc )		709844	1					
ANR	710117	Callee	IS_NCCLASS_NOT		709844	0					
ANR	710118	Identifier	IS_NCCLASS_NOT		709844	0					
ANR	710119	ArgumentList	xc		709844	1					
ANR	710120	Argument	xc		709844	0					
ANR	710121	Identifier	xc		709844	0					
ANR	710122	CompoundStatement		61:27:1054:1054	709844	1					
ANR	710123	IfStatement	"if ( BITSET_AT ( xc -> bs , i ) )"		709844	0					
ANR	710124	Condition	"BITSET_AT ( xc -> bs , i )"	2460:8:55629:55648	709844	0	True				
ANR	710125	CallExpression	"BITSET_AT ( xc -> bs , i )"		709844	0					
ANR	710126	Callee	BITSET_AT		709844	0					
ANR	710127	Identifier	BITSET_AT		709844	0					
ANR	710128	ArgumentList	xc -> bs		709844	1					
ANR	710129	Argument	xc -> bs		709844	0					
ANR	710130	PtrMemberAccess	xc -> bs		709844	0					
ANR	710131	Identifier	xc		709844	0					
ANR	710132	Identifier	bs		709844	1					
ANR	710133	Argument	i		709844	1					
ANR	710134	Identifier	i		709844	0					
ANR	710135	ReturnStatement	return 0 ;	2461:6:55657:55665	709844	1	True				
ANR	710136	PrimaryExpression	0		709844	0					
ANR	710137	ElseStatement	else		709844	0					
ANR	710138	CompoundStatement		65:7:1113:1113	709844	0					
ANR	710139	IfStatement	"if ( ! BITSET_AT ( xc -> bs , i ) )"		709844	0					
ANR	710140	Condition	"! BITSET_AT ( xc -> bs , i )"	2464:8:55688:55709	709844	0	True				
ANR	710141	UnaryOperationExpression	"! BITSET_AT ( xc -> bs , i )"		709844	0					
ANR	710142	UnaryOperator	!		709844	0					
ANR	710143	CallExpression	"BITSET_AT ( xc -> bs , i )"		709844	1					
ANR	710144	Callee	BITSET_AT		709844	0					
ANR	710145	Identifier	BITSET_AT		709844	0					
ANR	710146	ArgumentList	xc -> bs		709844	1					
ANR	710147	Argument	xc -> bs		709844	0					
ANR	710148	PtrMemberAccess	xc -> bs		709844	0					
ANR	710149	Identifier	xc		709844	0					
ANR	710150	Identifier	bs		709844	1					
ANR	710151	Argument	i		709844	1					
ANR	710152	Identifier	i		709844	0					
ANR	710153	ReturnStatement	return 0 ;	2465:6:55718:55726	709844	1	True				
ANR	710154	PrimaryExpression	0		709844	0					
ANR	710155	ReturnStatement	return 1 ;	2469:5:55753:55761	709844	1	True				
ANR	710156	PrimaryExpression	1		709844	0					
ANR	710157	BreakStatement	break ;	2471:3:55771:55776	709844	2	True				
ANR	710158	Label	default :	2473:1:55780:55787	709844	3	True				
ANR	710159	Identifier	default		709844	0					
ANR	710160	BreakStatement	break ;	2474:3:55792:55797	709844	4	True				
ANR	710161	BreakStatement	break ;	2476:1:55803:55808	709844	2	True				
ANR	710162	Label	case NT_CCLASS :	2478:6:55817:55831	709844	3	True				
ANR	710163	Identifier	NT_CCLASS		709844	0					
ANR	710164	CompoundStatement		83:3:1284:1311	709844	4					
ANR	710165	IdentifierDeclStatement	int v ;	2480:3:55839:55844	709844	0	True				
ANR	710166	IdentifierDecl	v		709844	0					
ANR	710167	IdentifierDeclType	int		709844	0					
ANR	710168	Identifier	v		709844	1					
ANR	710169	IdentifierDeclStatement	CClassNode * yc = NCCLASS ( y ) ;	2481:3:55849:55876	709844	1	True				
ANR	710170	IdentifierDecl	* yc = NCCLASS ( y )		709844	0					
ANR	710171	IdentifierDeclType	CClassNode *		709844	0					
ANR	710172	Identifier	yc		709844	1					
ANR	710173	AssignmentExpression	* yc = NCCLASS ( y )		709844	2		=			
ANR	710174	Identifier	yc		709844	0					
ANR	710175	CallExpression	NCCLASS ( y )		709844	1					
ANR	710176	Callee	NCCLASS		709844	0					
ANR	710177	Identifier	NCCLASS		709844	0					
ANR	710178	ArgumentList	y		709844	1					
ANR	710179	Argument	y		709844	0					
ANR	710180	Identifier	y		709844	0					
ANR	710181	ForStatement	for ( i = 0 ; i < SINGLE_BYTE_SIZE ; i ++ )		709844	2					
ANR	710182	ForInit	i = 0 ;	2483:8:55887:55892	709844	0	True				
ANR	710183	AssignmentExpression	i = 0		709844	0		=			
ANR	710184	Identifier	i		709844	0					
ANR	710185	PrimaryExpression	0		709844	1					
ANR	710186	Condition	i < SINGLE_BYTE_SIZE	2483:15:55894:55913	709844	1	True				
ANR	710187	RelationalExpression	i < SINGLE_BYTE_SIZE		709844	0		<			
ANR	710188	Identifier	i		709844	0					
ANR	710189	Identifier	SINGLE_BYTE_SIZE		709844	1					
ANR	710190	PostIncDecOperationExpression	i ++	2483:37:55916:55918	709844	2	True				
ANR	710191	Identifier	i		709844	0					
ANR	710192	IncDec	++		709844	1					
ANR	710193	CompoundStatement		85:42:1356:1356	709844	3					
ANR	710194	ExpressionStatement	"v = BITSET_AT ( xc -> bs , i )"	2484:5:55928:55952	709844	0	True				
ANR	710195	AssignmentExpression	"v = BITSET_AT ( xc -> bs , i )"		709844	0		=			
ANR	710196	Identifier	v		709844	0					
ANR	710197	CallExpression	"BITSET_AT ( xc -> bs , i )"		709844	1					
ANR	710198	Callee	BITSET_AT		709844	0					
ANR	710199	Identifier	BITSET_AT		709844	0					
ANR	710200	ArgumentList	xc -> bs		709844	1					
ANR	710201	Argument	xc -> bs		709844	0					
ANR	710202	PtrMemberAccess	xc -> bs		709844	0					
ANR	710203	Identifier	xc		709844	0					
ANR	710204	Identifier	bs		709844	1					
ANR	710205	Argument	i		709844	1					
ANR	710206	Identifier	i		709844	0					
ANR	710207	IfStatement	if ( ( v != 0 && ! IS_NCCLASS_NOT ( xc ) ) || ( v == 0 && IS_NCCLASS_NOT ( xc ) ) )		709844	1					
ANR	710208	Condition	( v != 0 && ! IS_NCCLASS_NOT ( xc ) ) || ( v == 0 && IS_NCCLASS_NOT ( xc ) )	2485:9:55963:56043	709844	0	True				
ANR	710209	OrExpression	( v != 0 && ! IS_NCCLASS_NOT ( xc ) ) || ( v == 0 && IS_NCCLASS_NOT ( xc ) )		709844	0		||			
ANR	710210	AndExpression	v != 0 && ! IS_NCCLASS_NOT ( xc )		709844	0		&&			
ANR	710211	EqualityExpression	v != 0		709844	0		!=			
ANR	710212	Identifier	v		709844	0					
ANR	710213	PrimaryExpression	0		709844	1					
ANR	710214	UnaryOperationExpression	! IS_NCCLASS_NOT ( xc )		709844	1					
ANR	710215	UnaryOperator	!		709844	0					
ANR	710216	CallExpression	IS_NCCLASS_NOT ( xc )		709844	1					
ANR	710217	Callee	IS_NCCLASS_NOT		709844	0					
ANR	710218	Identifier	IS_NCCLASS_NOT		709844	0					
ANR	710219	ArgumentList	xc		709844	1					
ANR	710220	Argument	xc		709844	0					
ANR	710221	Identifier	xc		709844	0					
ANR	710222	AndExpression	v == 0 && IS_NCCLASS_NOT ( xc )		709844	1		&&			
ANR	710223	EqualityExpression	v == 0		709844	0		==			
ANR	710224	Identifier	v		709844	0					
ANR	710225	PrimaryExpression	0		709844	1					
ANR	710226	CallExpression	IS_NCCLASS_NOT ( xc )		709844	1					
ANR	710227	Callee	IS_NCCLASS_NOT		709844	0					
ANR	710228	Identifier	IS_NCCLASS_NOT		709844	0					
ANR	710229	ArgumentList	xc		709844	1					
ANR	710230	Argument	xc		709844	0					
ANR	710231	Identifier	xc		709844	0					
ANR	710232	CompoundStatement		88:48:1481:1481	709844	1					
ANR	710233	ExpressionStatement	"v = BITSET_AT ( yc -> bs , i )"	2487:7:56055:56079	709844	0	True				
ANR	710234	AssignmentExpression	"v = BITSET_AT ( yc -> bs , i )"		709844	0		=			
ANR	710235	Identifier	v		709844	0					
ANR	710236	CallExpression	"BITSET_AT ( yc -> bs , i )"		709844	1					
ANR	710237	Callee	BITSET_AT		709844	0					
ANR	710238	Identifier	BITSET_AT		709844	0					
ANR	710239	ArgumentList	yc -> bs		709844	1					
ANR	710240	Argument	yc -> bs		709844	0					
ANR	710241	PtrMemberAccess	yc -> bs		709844	0					
ANR	710242	Identifier	yc		709844	0					
ANR	710243	Identifier	bs		709844	1					
ANR	710244	Argument	i		709844	1					
ANR	710245	Identifier	i		709844	0					
ANR	710246	IfStatement	if ( ( v != 0 && ! IS_NCCLASS_NOT ( yc ) ) || ( v == 0 && IS_NCCLASS_NOT ( yc ) ) )		709844	1					
ANR	710247	Condition	( v != 0 && ! IS_NCCLASS_NOT ( yc ) ) || ( v == 0 && IS_NCCLASS_NOT ( yc ) )	2488:11:56092:56174	709844	0	True				
ANR	710248	OrExpression	( v != 0 && ! IS_NCCLASS_NOT ( yc ) ) || ( v == 0 && IS_NCCLASS_NOT ( yc ) )		709844	0		||			
ANR	710249	AndExpression	v != 0 && ! IS_NCCLASS_NOT ( yc )		709844	0		&&			
ANR	710250	EqualityExpression	v != 0		709844	0		!=			
ANR	710251	Identifier	v		709844	0					
ANR	710252	PrimaryExpression	0		709844	1					
ANR	710253	UnaryOperationExpression	! IS_NCCLASS_NOT ( yc )		709844	1					
ANR	710254	UnaryOperator	!		709844	0					
ANR	710255	CallExpression	IS_NCCLASS_NOT ( yc )		709844	1					
ANR	710256	Callee	IS_NCCLASS_NOT		709844	0					
ANR	710257	Identifier	IS_NCCLASS_NOT		709844	0					
ANR	710258	ArgumentList	yc		709844	1					
ANR	710259	Argument	yc		709844	0					
ANR	710260	Identifier	yc		709844	0					
ANR	710261	AndExpression	v == 0 && IS_NCCLASS_NOT ( yc )		709844	1		&&			
ANR	710262	EqualityExpression	v == 0		709844	0		==			
ANR	710263	Identifier	v		709844	0					
ANR	710264	PrimaryExpression	0		709844	1					
ANR	710265	CallExpression	IS_NCCLASS_NOT ( yc )		709844	1					
ANR	710266	Callee	IS_NCCLASS_NOT		709844	0					
ANR	710267	Identifier	IS_NCCLASS_NOT		709844	0					
ANR	710268	ArgumentList	yc		709844	1					
ANR	710269	Argument	yc		709844	0					
ANR	710270	Identifier	yc		709844	0					
ANR	710271	ReturnStatement	return 0 ;	2490:2:56179:56187	709844	1	True				
ANR	710272	PrimaryExpression	0		709844	0					
ANR	710273	IfStatement	if ( ( IS_NULL ( xc -> mbuf ) && ! IS_NCCLASS_NOT ( xc ) ) || ( IS_NULL ( yc -> mbuf ) && ! IS_NCCLASS_NOT ( yc ) ) )		709844	3					
ANR	710274	Condition	( IS_NULL ( xc -> mbuf ) && ! IS_NCCLASS_NOT ( xc ) ) || ( IS_NULL ( yc -> mbuf ) && ! IS_NCCLASS_NOT ( yc ) )	2493:7:56208:56302	709844	0	True				
ANR	710275	OrExpression	( IS_NULL ( xc -> mbuf ) && ! IS_NCCLASS_NOT ( xc ) ) || ( IS_NULL ( yc -> mbuf ) && ! IS_NCCLASS_NOT ( yc ) )		709844	0		||			
ANR	710276	AndExpression	IS_NULL ( xc -> mbuf ) && ! IS_NCCLASS_NOT ( xc )		709844	0		&&			
ANR	710277	CallExpression	IS_NULL ( xc -> mbuf )		709844	0					
ANR	710278	Callee	IS_NULL		709844	0					
ANR	710279	Identifier	IS_NULL		709844	0					
ANR	710280	ArgumentList	xc -> mbuf		709844	1					
ANR	710281	Argument	xc -> mbuf		709844	0					
ANR	710282	PtrMemberAccess	xc -> mbuf		709844	0					
ANR	710283	Identifier	xc		709844	0					
ANR	710284	Identifier	mbuf		709844	1					
ANR	710285	UnaryOperationExpression	! IS_NCCLASS_NOT ( xc )		709844	1					
ANR	710286	UnaryOperator	!		709844	0					
ANR	710287	CallExpression	IS_NCCLASS_NOT ( xc )		709844	1					
ANR	710288	Callee	IS_NCCLASS_NOT		709844	0					
ANR	710289	Identifier	IS_NCCLASS_NOT		709844	0					
ANR	710290	ArgumentList	xc		709844	1					
ANR	710291	Argument	xc		709844	0					
ANR	710292	Identifier	xc		709844	0					
ANR	710293	AndExpression	IS_NULL ( yc -> mbuf ) && ! IS_NCCLASS_NOT ( yc )		709844	1		&&			
ANR	710294	CallExpression	IS_NULL ( yc -> mbuf )		709844	0					
ANR	710295	Callee	IS_NULL		709844	0					
ANR	710296	Identifier	IS_NULL		709844	0					
ANR	710297	ArgumentList	yc -> mbuf		709844	1					
ANR	710298	Argument	yc -> mbuf		709844	0					
ANR	710299	PtrMemberAccess	yc -> mbuf		709844	0					
ANR	710300	Identifier	yc		709844	0					
ANR	710301	Identifier	mbuf		709844	1					
ANR	710302	UnaryOperationExpression	! IS_NCCLASS_NOT ( yc )		709844	1					
ANR	710303	UnaryOperator	!		709844	0					
ANR	710304	CallExpression	IS_NCCLASS_NOT ( yc )		709844	1					
ANR	710305	Callee	IS_NCCLASS_NOT		709844	0					
ANR	710306	Identifier	IS_NCCLASS_NOT		709844	0					
ANR	710307	ArgumentList	yc		709844	1					
ANR	710308	Argument	yc		709844	0					
ANR	710309	Identifier	yc		709844	0					
ANR	710310	ReturnStatement	return 1 ;	2495:5:56310:56318	709844	1	True				
ANR	710311	PrimaryExpression	1		709844	0					
ANR	710312	ReturnStatement	return 0 ;	2496:3:56323:56331	709844	4	True				
ANR	710313	PrimaryExpression	0		709844	0					
ANR	710314	BreakStatement	break ;	2498:1:56337:56342	709844	5	True				
ANR	710315	Label	case NT_STR :	2500:6:56351:56362	709844	6	True				
ANR	710316	Identifier	NT_STR		709844	0					
ANR	710317	GotoStatement	goto swap ;	2501:1:56365:56374	709844	7	True				
ANR	710318	Identifier	swap		709844	0					
ANR	710319	BreakStatement	break ;	2502:1:56377:56382	709844	8	True				
ANR	710320	Label	default :	2504:6:56391:56398	709844	9	True				
ANR	710321	Identifier	default		709844	0					
ANR	710322	BreakStatement	break ;	2505:1:56401:56406	709844	10	True				
ANR	710323	BreakStatement	break ;	2508:4:56426:56431	709844	5	True				
ANR	710324	Label	case NT_STR :	2510:2:56436:56447	709844	6	True				
ANR	710325	Identifier	NT_STR		709844	0					
ANR	710326	CompoundStatement		114:6:1896:1917	709844	7					
ANR	710327	IdentifierDeclStatement	StrNode * xs = NSTR ( x ) ;	2512:6:56461:56482	709844	0	True				
ANR	710328	IdentifierDecl	* xs = NSTR ( x )		709844	0					
ANR	710329	IdentifierDeclType	StrNode *		709844	0					
ANR	710330	Identifier	xs		709844	1					
ANR	710331	AssignmentExpression	* xs = NSTR ( x )		709844	2		=			
ANR	710332	Identifier	xs		709844	0					
ANR	710333	CallExpression	NSTR ( x )		709844	1					
ANR	710334	Callee	NSTR		709844	0					
ANR	710335	Identifier	NSTR		709844	0					
ANR	710336	ArgumentList	x		709844	1					
ANR	710337	Argument	x		709844	0					
ANR	710338	Identifier	x		709844	0					
ANR	710339	IfStatement	if ( NSTRING_LEN ( x ) == 0 )		709844	1					
ANR	710340	Condition	NSTRING_LEN ( x ) == 0	2513:10:56494:56512	709844	0	True				
ANR	710341	EqualityExpression	NSTRING_LEN ( x ) == 0		709844	0		==			
ANR	710342	CallExpression	NSTRING_LEN ( x )		709844	0					
ANR	710343	Callee	NSTRING_LEN		709844	0					
ANR	710344	Identifier	NSTRING_LEN		709844	0					
ANR	710345	ArgumentList	x		709844	1					
ANR	710346	Argument	x		709844	0					
ANR	710347	Identifier	x		709844	0					
ANR	710348	PrimaryExpression	0		709844	1					
ANR	710349	BreakStatement	break ;	2514:1:56516:56521	709844	1	True				
ANR	710350	SwitchStatement	switch ( ytype )		709844	2					
ANR	710351	Condition	ytype	2517:14:56560:56564	709844	0	True				
ANR	710352	Identifier	ytype		709844	0					
ANR	710353	CompoundStatement		119:21:2002:2002	709844	1					
ANR	710354	Label	case NT_CTYPE :	2518:6:56575:56588	709844	0	True				
ANR	710355	Identifier	NT_CTYPE		709844	0					
ANR	710356	SwitchStatement	switch ( NCTYPE ( y ) -> ctype )		709844	1					
ANR	710357	Condition	NCTYPE ( y ) -> ctype	2519:16:56606:56621	709844	0	True				
ANR	710358	PtrMemberAccess	NCTYPE ( y ) -> ctype		709844	0					
ANR	710359	CallExpression	NCTYPE ( y )		709844	0					
ANR	710360	Callee	NCTYPE		709844	0					
ANR	710361	Identifier	NCTYPE		709844	0					
ANR	710362	ArgumentList	y		709844	1					
ANR	710363	Argument	y		709844	0					
ANR	710364	Identifier	y		709844	0					
ANR	710365	Identifier	ctype		709844	1					
ANR	710366	CompoundStatement		121:34:2059:2059	709844	1					
ANR	710367	Label	case ONIGENC_CTYPE_WORD :	2520:8:56634:56657	709844	0	True				
ANR	710368	Identifier	ONIGENC_CTYPE_WORD		709844	0					
ANR	710369	IfStatement	"if ( ONIGENC_IS_MBC_WORD ( reg -> enc , xs -> s , xs -> end ) )"		709844	1					
ANR	710370	Condition	"ONIGENC_IS_MBC_WORD ( reg -> enc , xs -> s , xs -> end )"	2521:14:56673:56717	709844	0	True				
ANR	710371	CallExpression	"ONIGENC_IS_MBC_WORD ( reg -> enc , xs -> s , xs -> end )"		709844	0					
ANR	710372	Callee	ONIGENC_IS_MBC_WORD		709844	0					
ANR	710373	Identifier	ONIGENC_IS_MBC_WORD		709844	0					
ANR	710374	ArgumentList	reg -> enc		709844	1					
ANR	710375	Argument	reg -> enc		709844	0					
ANR	710376	PtrMemberAccess	reg -> enc		709844	0					
ANR	710377	Identifier	reg		709844	0					
ANR	710378	Identifier	enc		709844	1					
ANR	710379	Argument	xs -> s		709844	1					
ANR	710380	PtrMemberAccess	xs -> s		709844	0					
ANR	710381	Identifier	xs		709844	0					
ANR	710382	Identifier	s		709844	1					
ANR	710383	Argument	xs -> end		709844	2					
ANR	710384	PtrMemberAccess	xs -> end		709844	0					
ANR	710385	Identifier	xs		709844	0					
ANR	710386	Identifier	end		709844	1					
ANR	710387	ReturnStatement	return NCTYPE ( y ) -> not ;	2522:12:56732:56753	709844	1	True				
ANR	710388	PtrMemberAccess	NCTYPE ( y ) -> not		709844	0					
ANR	710389	CallExpression	NCTYPE ( y )		709844	0					
ANR	710390	Callee	NCTYPE		709844	0					
ANR	710391	Identifier	NCTYPE		709844	0					
ANR	710392	ArgumentList	y		709844	1					
ANR	710393	Argument	y		709844	0					
ANR	710394	Identifier	y		709844	0					
ANR	710395	Identifier	not		709844	1					
ANR	710396	ElseStatement	else		709844	0					
ANR	710397	ReturnStatement	return ! ( NCTYPE ( y ) -> not ) ;	2524:12:56782:56806	709844	0	True				
ANR	710398	UnaryOperationExpression	! ( NCTYPE ( y ) -> not )		709844	0					
ANR	710399	UnaryOperator	!		709844	0					
ANR	710400	PtrMemberAccess	NCTYPE ( y ) -> not		709844	1					
ANR	710401	CallExpression	NCTYPE ( y )		709844	0					
ANR	710402	Callee	NCTYPE		709844	0					
ANR	710403	Identifier	NCTYPE		709844	0					
ANR	710404	ArgumentList	y		709844	1					
ANR	710405	Argument	y		709844	0					
ANR	710406	Identifier	y		709844	0					
ANR	710407	Identifier	not		709844	1					
ANR	710408	BreakStatement	break ;	2525:10:56818:56823	709844	2	True				
ANR	710409	Label	default :	2526:8:56833:56840	709844	3	True				
ANR	710410	Identifier	default		709844	0					
ANR	710411	BreakStatement	break ;	2527:10:56852:56857	709844	4	True				
ANR	710412	BreakStatement	break ;	2529:8:56877:56882	709844	2	True				
ANR	710413	Label	case NT_CCLASS :	2531:6:56891:56905	709844	3	True				
ANR	710414	Identifier	NT_CCLASS		709844	0					
ANR	710415	CompoundStatement		135:10:2362:2389	709844	4					
ANR	710416	IdentifierDeclStatement	CClassNode * cc = NCCLASS ( y ) ;	2533:10:56927:56954	709844	0	True				
ANR	710417	IdentifierDecl	* cc = NCCLASS ( y )		709844	0					
ANR	710418	IdentifierDeclType	CClassNode *		709844	0					
ANR	710419	Identifier	cc		709844	1					
ANR	710420	AssignmentExpression	* cc = NCCLASS ( y )		709844	2		=			
ANR	710421	Identifier	cc		709844	0					
ANR	710422	CallExpression	NCCLASS ( y )		709844	1					
ANR	710423	Callee	NCCLASS		709844	0					
ANR	710424	Identifier	NCCLASS		709844	0					
ANR	710425	ArgumentList	y		709844	1					
ANR	710426	Argument	y		709844	0					
ANR	710427	Identifier	y		709844	0					
ANR	710428	ExpressionStatement	"code = ONIGENC_MBC_TO_CODE ( reg -> enc , xs -> s , xs -> s + ONIGENC_MBC_MAXLEN ( reg -> enc ) )"	2535:10:56967:57085	709844	1	True				
ANR	710429	AssignmentExpression	"code = ONIGENC_MBC_TO_CODE ( reg -> enc , xs -> s , xs -> s + ONIGENC_MBC_MAXLEN ( reg -> enc ) )"		709844	0		=			
ANR	710430	Identifier	code		709844	0					
ANR	710431	CallExpression	"ONIGENC_MBC_TO_CODE ( reg -> enc , xs -> s , xs -> s + ONIGENC_MBC_MAXLEN ( reg -> enc ) )"		709844	1					
ANR	710432	Callee	ONIGENC_MBC_TO_CODE		709844	0					
ANR	710433	Identifier	ONIGENC_MBC_TO_CODE		709844	0					
ANR	710434	ArgumentList	reg -> enc		709844	1					
ANR	710435	Argument	reg -> enc		709844	0					
ANR	710436	PtrMemberAccess	reg -> enc		709844	0					
ANR	710437	Identifier	reg		709844	0					
ANR	710438	Identifier	enc		709844	1					
ANR	710439	Argument	xs -> s		709844	1					
ANR	710440	PtrMemberAccess	xs -> s		709844	0					
ANR	710441	Identifier	xs		709844	0					
ANR	710442	Identifier	s		709844	1					
ANR	710443	Argument	xs -> s + ONIGENC_MBC_MAXLEN ( reg -> enc )		709844	2					
ANR	710444	AdditiveExpression	xs -> s + ONIGENC_MBC_MAXLEN ( reg -> enc )		709844	0		+			
ANR	710445	PtrMemberAccess	xs -> s		709844	0					
ANR	710446	Identifier	xs		709844	0					
ANR	710447	Identifier	s		709844	1					
ANR	710448	CallExpression	ONIGENC_MBC_MAXLEN ( reg -> enc )		709844	1					
ANR	710449	Callee	ONIGENC_MBC_MAXLEN		709844	0					
ANR	710450	Identifier	ONIGENC_MBC_MAXLEN		709844	0					
ANR	710451	ArgumentList	reg -> enc		709844	1					
ANR	710452	Argument	reg -> enc		709844	0					
ANR	710453	PtrMemberAccess	reg -> enc		709844	0					
ANR	710454	Identifier	reg		709844	0					
ANR	710455	Identifier	enc		709844	1					
ANR	710456	ReturnStatement	"return ( onig_is_code_in_cc ( reg -> enc , code , cc ) != 0 ? 0 : 1 ) ;"	2537:10:57097:57157	709844	2	True				
ANR	710457	ConditionalExpression	"onig_is_code_in_cc ( reg -> enc , code , cc ) != 0 ? 0 : 1"		709844	0					
ANR	710458	Condition	"onig_is_code_in_cc ( reg -> enc , code , cc ) != 0"		709844	0					
ANR	710459	EqualityExpression	"onig_is_code_in_cc ( reg -> enc , code , cc ) != 0"		709844	0		!=			
ANR	710460	CallExpression	"onig_is_code_in_cc ( reg -> enc , code , cc )"		709844	0					
ANR	710461	Callee	onig_is_code_in_cc		709844	0					
ANR	710462	Identifier	onig_is_code_in_cc		709844	0					
ANR	710463	ArgumentList	reg -> enc		709844	1					
ANR	710464	Argument	reg -> enc		709844	0					
ANR	710465	PtrMemberAccess	reg -> enc		709844	0					
ANR	710466	Identifier	reg		709844	0					
ANR	710467	Identifier	enc		709844	1					
ANR	710468	Argument	code		709844	1					
ANR	710469	Identifier	code		709844	0					
ANR	710470	Argument	cc		709844	2					
ANR	710471	Identifier	cc		709844	0					
ANR	710472	PrimaryExpression	0		709844	1					
ANR	710473	PrimaryExpression	0		709844	1					
ANR	710474	PrimaryExpression	1		709844	2					
ANR	710475	BreakStatement	break ;	2539:8:57177:57182	709844	5	True				
ANR	710476	Label	case NT_STR :	2541:6:57191:57202	709844	6	True				
ANR	710477	Identifier	NT_STR		709844	0					
ANR	710478	CompoundStatement		146:10:2679:2700	709844	7					
ANR	710479	IdentifierDeclStatement	UChar * q ;	2543:10:57224:57232	709844	0	True				
ANR	710480	IdentifierDecl	* q		709844	0					
ANR	710481	IdentifierDeclType	UChar *		709844	0					
ANR	710482	Identifier	q		709844	1					
ANR	710483	IdentifierDeclStatement	StrNode * ys = NSTR ( y ) ;	2544:10:57244:57265	709844	1	True				
ANR	710484	IdentifierDecl	* ys = NSTR ( y )		709844	0					
ANR	710485	IdentifierDeclType	StrNode *		709844	0					
ANR	710486	Identifier	ys		709844	1					
ANR	710487	AssignmentExpression	* ys = NSTR ( y )		709844	2		=			
ANR	710488	Identifier	ys		709844	0					
ANR	710489	CallExpression	NSTR ( y )		709844	1					
ANR	710490	Callee	NSTR		709844	0					
ANR	710491	Identifier	NSTR		709844	0					
ANR	710492	ArgumentList	y		709844	1					
ANR	710493	Argument	y		709844	0					
ANR	710494	Identifier	y		709844	0					
ANR	710495	ExpressionStatement	len = NSTRING_LEN ( x )	2545:10:57277:57297	709844	2	True				
ANR	710496	AssignmentExpression	len = NSTRING_LEN ( x )		709844	0		=			
ANR	710497	Identifier	len		709844	0					
ANR	710498	CallExpression	NSTRING_LEN ( x )		709844	1					
ANR	710499	Callee	NSTRING_LEN		709844	0					
ANR	710500	Identifier	NSTRING_LEN		709844	0					
ANR	710501	ArgumentList	x		709844	1					
ANR	710502	Argument	x		709844	0					
ANR	710503	Identifier	x		709844	0					
ANR	710504	IfStatement	if ( len > NSTRING_LEN ( y ) )		709844	3					
ANR	710505	Condition	len > NSTRING_LEN ( y )	2546:14:57313:57332	709844	0	True				
ANR	710506	RelationalExpression	len > NSTRING_LEN ( y )		709844	0		>			
ANR	710507	Identifier	len		709844	0					
ANR	710508	CallExpression	NSTRING_LEN ( y )		709844	1					
ANR	710509	Callee	NSTRING_LEN		709844	0					
ANR	710510	Identifier	NSTRING_LEN		709844	0					
ANR	710511	ArgumentList	y		709844	1					
ANR	710512	Argument	y		709844	0					
ANR	710513	Identifier	y		709844	0					
ANR	710514	ExpressionStatement	len = NSTRING_LEN ( y )	2546:36:57335:57355	709844	1	True				
ANR	710515	AssignmentExpression	len = NSTRING_LEN ( y )		709844	0		=			
ANR	710516	Identifier	len		709844	0					
ANR	710517	CallExpression	NSTRING_LEN ( y )		709844	1					
ANR	710518	Callee	NSTRING_LEN		709844	0					
ANR	710519	Identifier	NSTRING_LEN		709844	0					
ANR	710520	ArgumentList	y		709844	1					
ANR	710521	Argument	y		709844	0					
ANR	710522	Identifier	y		709844	0					
ANR	710523	IfStatement	if ( NSTRING_IS_AMBIG ( x ) || NSTRING_IS_AMBIG ( y ) )		709844	4					
ANR	710524	Condition	NSTRING_IS_AMBIG ( x ) || NSTRING_IS_AMBIG ( y )	2547:14:57371:57412	709844	0	True				
ANR	710525	OrExpression	NSTRING_IS_AMBIG ( x ) || NSTRING_IS_AMBIG ( y )		709844	0		||			
ANR	710526	CallExpression	NSTRING_IS_AMBIG ( x )		709844	0					
ANR	710527	Callee	NSTRING_IS_AMBIG		709844	0					
ANR	710528	Identifier	NSTRING_IS_AMBIG		709844	0					
ANR	710529	ArgumentList	x		709844	1					
ANR	710530	Argument	x		709844	0					
ANR	710531	Identifier	x		709844	0					
ANR	710532	CallExpression	NSTRING_IS_AMBIG ( y )		709844	1					
ANR	710533	Callee	NSTRING_IS_AMBIG		709844	0					
ANR	710534	Identifier	NSTRING_IS_AMBIG		709844	0					
ANR	710535	ArgumentList	y		709844	1					
ANR	710536	Argument	y		709844	0					
ANR	710537	Identifier	y		709844	0					
ANR	710538	CompoundStatement		149:58:2850:2850	709844	1					
ANR	710539	ReturnStatement	return 0 ;	2549:12:57460:57468	709844	0	True				
ANR	710540	PrimaryExpression	0		709844	0					
ANR	710541	ElseStatement	else		709844	0					
ANR	710542	CompoundStatement		153:15:2932:2932	709844	0					
ANR	710543	ForStatement	"for ( i = 0 , p = ys -> s , q = xs -> s ; i < len ; i ++ , p ++ , q ++ )"		709844	0					
ANR	710544	ForInit	"i = 0 , p = ys -> s , q = xs -> s ;"	2552:17:57516:57543	709844	0	True				
ANR	710545	Expression	"i = 0 , p = ys -> s , q = xs -> s"		709844	0					
ANR	710546	AssignmentExpression	i = 0		709844	0		=			
ANR	710547	Identifier	i		709844	0					
ANR	710548	PrimaryExpression	0		709844	1					
ANR	710549	Expression	"p = ys -> s , q = xs -> s"		709844	1					
ANR	710550	AssignmentExpression	p = ys -> s		709844	0		=			
ANR	710551	Identifier	p		709844	0					
ANR	710552	PtrMemberAccess	ys -> s		709844	1					
ANR	710553	Identifier	ys		709844	0					
ANR	710554	Identifier	s		709844	1					
ANR	710555	AssignmentExpression	q = xs -> s		709844	1		=			
ANR	710556	Identifier	q		709844	0					
ANR	710557	PtrMemberAccess	xs -> s		709844	1					
ANR	710558	Identifier	xs		709844	0					
ANR	710559	Identifier	s		709844	1					
ANR	710560	Condition	i < len	2552:46:57545:57551	709844	1	True				
ANR	710561	RelationalExpression	i < len		709844	0		<			
ANR	710562	Identifier	i		709844	0					
ANR	710563	Identifier	len		709844	1					
ANR	710564	Expression	"i ++ , p ++ , q ++"	2552:55:57554:57566	709844	2	True				
ANR	710565	PostIncDecOperationExpression	i ++		709844	0					
ANR	710566	Identifier	i		709844	0					
ANR	710567	IncDec	++		709844	1					
ANR	710568	Expression	"p ++ , q ++"		709844	1					
ANR	710569	PostIncDecOperationExpression	p ++		709844	0					
ANR	710570	Identifier	p		709844	0					
ANR	710571	IncDec	++		709844	1					
ANR	710572	PostIncDecOperationExpression	q ++		709844	1					
ANR	710573	Identifier	q		709844	0					
ANR	710574	IncDec	++		709844	1					
ANR	710575	CompoundStatement		154:70:3004:3004	709844	3					
ANR	710576	IfStatement	if ( * p != * q )		709844	0					
ANR	710577	Condition	* p != * q	2553:18:57589:57596	709844	0	True				
ANR	710578	EqualityExpression	* p != * q		709844	0		!=			
ANR	710579	UnaryOperationExpression	* p		709844	0					
ANR	710580	UnaryOperator	*		709844	0					
ANR	710581	Identifier	p		709844	1					
ANR	710582	UnaryOperationExpression	* q		709844	1					
ANR	710583	UnaryOperator	*		709844	0					
ANR	710584	Identifier	q		709844	1					
ANR	710585	ReturnStatement	return 1 ;	2553:28:57599:57607	709844	1	True				
ANR	710586	PrimaryExpression	1		709844	0					
ANR	710587	BreakStatement	break ;	2557:8:57653:57658	709844	8	True				
ANR	710588	Label	default :	2559:6:57668:57675	709844	9	True				
ANR	710589	Identifier	default		709844	0					
ANR	710590	BreakStatement	break ;	2560:8:57685:57690	709844	10	True				
ANR	710591	BreakStatement	break ;	2563:4:57710:57715	709844	8	True				
ANR	710592	Label	default :	2565:2:57720:57727	709844	9	True				
ANR	710593	Identifier	default		709844	0					
ANR	710594	BreakStatement	break ;	2566:4:57733:57738	709844	10	True				
ANR	710595	ReturnStatement	return 0 ;	2569:2:57747:57755	709844	7	True				
ANR	710596	PrimaryExpression	0		709844	0					
ANR	710597	ReturnType	static int		709844	1					
ANR	710598	Identifier	is_not_included		709844	2					
ANR	710599	ParameterList	"Node * x , Node * y , regex_t * reg"		709844	3					
ANR	710600	Parameter	Node * x	2398:16:54532:54538	709844	0	True				
ANR	710601	ParameterType	Node *		709844	0					
ANR	710602	Identifier	x		709844	1					
ANR	710603	Parameter	Node * y	2398:25:54541:54547	709844	1	True				
ANR	710604	ParameterType	Node *		709844	0					
ANR	710605	Identifier	y		709844	1					
ANR	710606	Parameter	regex_t * reg	2398:34:54550:54561	709844	2	True				
ANR	710607	ParameterType	regex_t *		709844	0					
ANR	710608	Identifier	reg		709844	1					
ANR	710609	CFGEntryNode	ENTRY		709844		True				
ANR	710610	CFGExitNode	EXIT		709844		True				
ANR	710611	Symbol	BITSET_AT		709844						
ANR	710612	Symbol	xc -> mbuf		709844						
ANR	710613	Symbol	IS_NCCLASS_NOT		709844						
ANR	710614	Symbol	yc		709844						
ANR	710615	Symbol	NCCLASS		709844						
ANR	710616	Symbol	* NCTYPE		709844						
ANR	710617	Symbol	len		709844						
ANR	710618	Symbol	reg		709844						
ANR	710619	Symbol	tmp		709844						
ANR	710620	Symbol	ys		709844						
ANR	710621	Symbol	onig_is_code_in_cc		709844						
ANR	710622	Symbol	NCTYPE		709844						
ANR	710623	Symbol	ONIGENC_MBC_TO_CODE		709844						
ANR	710624	Symbol	SINGLE_BYTE_SIZE		709844						
ANR	710625	Symbol	* xs		709844						
ANR	710626	Symbol	yc -> bs		709844						
ANR	710627	Symbol	NSTRING_IS_AMBIG		709844						
ANR	710628	Symbol	NSTR		709844						
ANR	710629	Symbol	reg -> enc		709844						
ANR	710630	Symbol	* xc		709844						
ANR	710631	Symbol	NCTYPE ( y ) -> ctype		709844						
ANR	710632	Symbol	code		709844						
ANR	710633	Symbol	* ys		709844						
ANR	710634	Symbol	xs -> s		709844						
ANR	710635	Symbol	IS_CODE_SB_WORD		709844						
ANR	710636	Symbol	NCTYPE ( x ) -> ctype		709844						
ANR	710637	Symbol	yc -> mbuf		709844						
ANR	710638	Symbol	* yc		709844						
ANR	710639	Symbol	IS_NULL		709844						
ANR	710640	Symbol	NCTYPE ( x ) -> not		709844						
ANR	710641	Symbol	cc		709844						
ANR	710642	Symbol	ONIGENC_MBC_MAXLEN		709844						
ANR	710643	Symbol	i		709844						
ANR	710644	Symbol	xc		709844						
ANR	710645	Symbol	ytype		709844						
ANR	710646	Symbol	xc -> bs		709844						
ANR	710647	Symbol	ys -> s		709844						
ANR	710648	Symbol	p		709844						
ANR	710649	Symbol	q		709844						
ANR	710650	Symbol	v		709844						
ANR	710651	Symbol	NCTYPE ( y ) -> not		709844						
ANR	710652	Symbol	xs -> end		709844						
ANR	710653	Symbol	x		709844						
ANR	710654	Symbol	y		709844						
ANR	710655	Symbol	NTYPE		709844						
ANR	710656	Symbol	* p		709844						
ANR	710657	Symbol	xs		709844						
ANR	710658	Symbol	* q		709844						
ANR	710659	Symbol	NSTRING_LEN		709844						
ANR	710660	Symbol	ONIGENC_IS_MBC_WORD		709844						
ANR	710661	Symbol	* reg		709844						
ANR	710662	Function	get_head_value_node	2572:0:57760:59253							
ANR	710663	FunctionDef	"get_head_value_node (Node * node , int exact , regex_t * reg)"		710662	0					
ANR	710664	CompoundStatement		2574:0:57830:59253	710662	0					
ANR	710665	IdentifierDeclStatement	Node * n = NULL_NODE ;	2575:2:57834:57853	710662	0	True				
ANR	710666	IdentifierDecl	* n = NULL_NODE		710662	0					
ANR	710667	IdentifierDeclType	Node *		710662	0					
ANR	710668	Identifier	n		710662	1					
ANR	710669	AssignmentExpression	* n = NULL_NODE		710662	2		=			
ANR	710670	Identifier	NULL_NODE		710662	0					
ANR	710671	Identifier	NULL_NODE		710662	1					
ANR	710672	SwitchStatement	switch ( NTYPE ( node ) )		710662	1					
ANR	710673	Condition	NTYPE ( node )	2577:10:57866:57876	710662	0	True				
ANR	710674	CallExpression	NTYPE ( node )		710662	0					
ANR	710675	Callee	NTYPE		710662	0					
ANR	710676	Identifier	NTYPE		710662	0					
ANR	710677	ArgumentList	node		710662	1					
ANR	710678	Argument	node		710662	0					
ANR	710679	Identifier	node		710662	0					
ANR	710680	CompoundStatement		4:23:48:48	710662	1					
ANR	710681	Label	case NT_BREF :	2578:2:57883:57895	710662	0	True				
ANR	710682	Identifier	NT_BREF		710662	0					
ANR	710683	Label	case NT_ALT :	2579:2:57899:57910	710662	1	True				
ANR	710684	Identifier	NT_ALT		710662	0					
ANR	710685	Label	case NT_CANY :	2580:2:57914:57926	710662	2	True				
ANR	710686	Identifier	NT_CANY		710662	0					
ANR	710687	Label	case NT_CALL :	2582:2:57953:57965	710662	3	True				
ANR	710688	Identifier	NT_CALL		710662	0					
ANR	710689	BreakStatement	break ;	2584:4:57978:57983	710662	4	True				
ANR	710690	Label	case NT_CTYPE :	2586:2:57988:58001	710662	5	True				
ANR	710691	Identifier	NT_CTYPE		710662	0					
ANR	710692	Label	case NT_CCLASS :	2587:2:58005:58019	710662	6	True				
ANR	710693	Identifier	NT_CCLASS		710662	0					
ANR	710694	IfStatement	if ( exact == 0 )		710662	7					
ANR	710695	Condition	exact == 0	2588:8:58029:58038	710662	0	True				
ANR	710696	EqualityExpression	exact == 0		710662	0		==			
ANR	710697	Identifier	exact		710662	0					
ANR	710698	PrimaryExpression	0		710662	1					
ANR	710699	CompoundStatement		15:20:210:210	710662	1					
ANR	710700	ExpressionStatement	n = node	2589:6:58049:58057	710662	0	True				
ANR	710701	AssignmentExpression	n = node		710662	0		=			
ANR	710702	Identifier	n		710662	0					
ANR	710703	Identifier	node		710662	1					
ANR	710704	BreakStatement	break ;	2591:4:58069:58074	710662	8	True				
ANR	710705	Label	case NT_LIST :	2593:2:58079:58091	710662	9	True				
ANR	710706	Identifier	NT_LIST		710662	0					
ANR	710707	ExpressionStatement	"n = get_head_value_node ( NCAR ( node ) , exact , reg )"	2594:4:58097:58144	710662	10	True				
ANR	710708	AssignmentExpression	"n = get_head_value_node ( NCAR ( node ) , exact , reg )"		710662	0		=			
ANR	710709	Identifier	n		710662	0					
ANR	710710	CallExpression	"get_head_value_node ( NCAR ( node ) , exact , reg )"		710662	1					
ANR	710711	Callee	get_head_value_node		710662	0					
ANR	710712	Identifier	get_head_value_node		710662	0					
ANR	710713	ArgumentList	NCAR ( node )		710662	1					
ANR	710714	Argument	NCAR ( node )		710662	0					
ANR	710715	CallExpression	NCAR ( node )		710662	0					
ANR	710716	Callee	NCAR		710662	0					
ANR	710717	Identifier	NCAR		710662	0					
ANR	710718	ArgumentList	node		710662	1					
ANR	710719	Argument	node		710662	0					
ANR	710720	Identifier	node		710662	0					
ANR	710721	Argument	exact		710662	1					
ANR	710722	Identifier	exact		710662	0					
ANR	710723	Argument	reg		710662	2					
ANR	710724	Identifier	reg		710662	0					
ANR	710725	BreakStatement	break ;	2595:4:58150:58155	710662	11	True				
ANR	710726	Label	case NT_STR :	2597:2:58160:58171	710662	12	True				
ANR	710727	Identifier	NT_STR		710662	0					
ANR	710728	CompoundStatement		26:6:354:378	710662	13					
ANR	710729	IdentifierDeclStatement	StrNode * sn = NSTR ( node ) ;	2599:6:58185:58209	710662	0	True				
ANR	710730	IdentifierDecl	* sn = NSTR ( node )		710662	0					
ANR	710731	IdentifierDeclType	StrNode *		710662	0					
ANR	710732	Identifier	sn		710662	1					
ANR	710733	AssignmentExpression	* sn = NSTR ( node )		710662	2		=			
ANR	710734	Identifier	sn		710662	0					
ANR	710735	CallExpression	NSTR ( node )		710662	1					
ANR	710736	Callee	NSTR		710662	0					
ANR	710737	Identifier	NSTR		710662	0					
ANR	710738	ArgumentList	node		710662	1					
ANR	710739	Argument	node		710662	0					
ANR	710740	Identifier	node		710662	0					
ANR	710741	IfStatement	if ( sn -> end <= sn -> s )		710662	1					
ANR	710742	Condition	sn -> end <= sn -> s	2601:10:58222:58237	710662	0	True				
ANR	710743	RelationalExpression	sn -> end <= sn -> s		710662	0		<=			
ANR	710744	PtrMemberAccess	sn -> end		710662	0					
ANR	710745	Identifier	sn		710662	0					
ANR	710746	Identifier	end		710662	1					
ANR	710747	PtrMemberAccess	sn -> s		710662	1					
ANR	710748	Identifier	sn		710662	0					
ANR	710749	Identifier	s		710662	1					
ANR	710750	BreakStatement	break ;	2602:1:58241:58246	710662	1	True				
ANR	710751	IfStatement	if ( exact != 0 && ! NSTRING_IS_RAW ( node ) && IS_IGNORECASE ( reg -> options ) )		710662	2					
ANR	710752	Condition	exact != 0 && ! NSTRING_IS_RAW ( node ) && IS_IGNORECASE ( reg -> options )	2604:10:58259:58327	710662	0	True				
ANR	710753	AndExpression	exact != 0 && ! NSTRING_IS_RAW ( node ) && IS_IGNORECASE ( reg -> options )		710662	0		&&			
ANR	710754	EqualityExpression	exact != 0		710662	0		!=			
ANR	710755	Identifier	exact		710662	0					
ANR	710756	PrimaryExpression	0		710662	1					
ANR	710757	AndExpression	! NSTRING_IS_RAW ( node ) && IS_IGNORECASE ( reg -> options )		710662	1		&&			
ANR	710758	UnaryOperationExpression	! NSTRING_IS_RAW ( node )		710662	0					
ANR	710759	UnaryOperator	!		710662	0					
ANR	710760	CallExpression	NSTRING_IS_RAW ( node )		710662	1					
ANR	710761	Callee	NSTRING_IS_RAW		710662	0					
ANR	710762	Identifier	NSTRING_IS_RAW		710662	0					
ANR	710763	ArgumentList	node		710662	1					
ANR	710764	Argument	node		710662	0					
ANR	710765	Identifier	node		710662	0					
ANR	710766	CallExpression	IS_IGNORECASE ( reg -> options )		710662	1					
ANR	710767	Callee	IS_IGNORECASE		710662	0					
ANR	710768	Identifier	IS_IGNORECASE		710662	0					
ANR	710769	ArgumentList	reg -> options		710662	1					
ANR	710770	Argument	reg -> options		710662	0					
ANR	710771	PtrMemberAccess	reg -> options		710662	0					
ANR	710772	Identifier	reg		710662	0					
ANR	710773	Identifier	options		710662	1					
ANR	710774	CompoundStatement		32:57:499:499	710662	1					
ANR	710775	ElseStatement	else		710662	0					
ANR	710776	CompoundStatement		34:11:520:520	710662	0					
ANR	710777	ExpressionStatement	n = node	2608:1:58354:58362	710662	0	True				
ANR	710778	AssignmentExpression	n = node		710662	0		=			
ANR	710779	Identifier	n		710662	0					
ANR	710780	Identifier	node		710662	1					
ANR	710781	BreakStatement	break ;	2611:4:58382:58387	710662	14	True				
ANR	710782	Label	case NT_QTFR :	2613:2:58392:58404	710662	15	True				
ANR	710783	Identifier	NT_QTFR		710662	0					
ANR	710784	CompoundStatement		42:6:587:613	710662	16					
ANR	710785	IdentifierDeclStatement	QtfrNode * qn = NQTFR ( node ) ;	2615:6:58418:58444	710662	0	True				
ANR	710786	IdentifierDecl	* qn = NQTFR ( node )		710662	0					
ANR	710787	IdentifierDeclType	QtfrNode *		710662	0					
ANR	710788	Identifier	qn		710662	1					
ANR	710789	AssignmentExpression	* qn = NQTFR ( node )		710662	2		=			
ANR	710790	Identifier	qn		710662	0					
ANR	710791	CallExpression	NQTFR ( node )		710662	1					
ANR	710792	Callee	NQTFR		710662	0					
ANR	710793	Identifier	NQTFR		710662	0					
ANR	710794	ArgumentList	node		710662	1					
ANR	710795	Argument	node		710662	0					
ANR	710796	Identifier	node		710662	0					
ANR	710797	IfStatement	if ( qn -> lower > 0 )		710662	1					
ANR	710798	Condition	qn -> lower > 0	2616:10:58456:58468	710662	0	True				
ANR	710799	RelationalExpression	qn -> lower > 0		710662	0		>			
ANR	710800	PtrMemberAccess	qn -> lower		710662	0					
ANR	710801	Identifier	qn		710662	0					
ANR	710802	Identifier	lower		710662	1					
ANR	710803	PrimaryExpression	0		710662	1					
ANR	710804	CompoundStatement		43:25:640:640	710662	1					
ANR	710805	IfStatement	if ( IS_NOT_NULL ( qn -> head_exact ) )		710662	0					
ANR	710806	Condition	IS_NOT_NULL ( qn -> head_exact )	2617:5:58478:58504	710662	0	True				
ANR	710807	CallExpression	IS_NOT_NULL ( qn -> head_exact )		710662	0					
ANR	710808	Callee	IS_NOT_NULL		710662	0					
ANR	710809	Identifier	IS_NOT_NULL		710662	0					
ANR	710810	ArgumentList	qn -> head_exact		710662	1					
ANR	710811	Argument	qn -> head_exact		710662	0					
ANR	710812	PtrMemberAccess	qn -> head_exact		710662	0					
ANR	710813	Identifier	qn		710662	0					
ANR	710814	Identifier	head_exact		710662	1					
ANR	710815	ExpressionStatement	n = qn -> head_exact	2618:3:58510:58528	710662	1	True				
ANR	710816	AssignmentExpression	n = qn -> head_exact		710662	0		=			
ANR	710817	Identifier	n		710662	0					
ANR	710818	PtrMemberAccess	qn -> head_exact		710662	1					
ANR	710819	Identifier	qn		710662	0					
ANR	710820	Identifier	head_exact		710662	1					
ANR	710821	ElseStatement	else		710662	0					
ANR	710822	ExpressionStatement	"n = get_head_value_node ( qn -> target , exact , reg )"	2620:3:58539:58586	710662	0	True				
ANR	710823	AssignmentExpression	"n = get_head_value_node ( qn -> target , exact , reg )"		710662	0		=			
ANR	710824	Identifier	n		710662	0					
ANR	710825	CallExpression	"get_head_value_node ( qn -> target , exact , reg )"		710662	1					
ANR	710826	Callee	get_head_value_node		710662	0					
ANR	710827	Identifier	get_head_value_node		710662	0					
ANR	710828	ArgumentList	qn -> target		710662	1					
ANR	710829	Argument	qn -> target		710662	0					
ANR	710830	PtrMemberAccess	qn -> target		710662	0					
ANR	710831	Identifier	qn		710662	0					
ANR	710832	Identifier	target		710662	1					
ANR	710833	Argument	exact		710662	1					
ANR	710834	Identifier	exact		710662	0					
ANR	710835	Argument	reg		710662	2					
ANR	710836	Identifier	reg		710662	0					
ANR	710837	BreakStatement	break ;	2623:4:58606:58611	710662	17	True				
ANR	710838	Label	case NT_ENCLOSE :	2625:2:58616:58631	710662	18	True				
ANR	710839	Identifier	NT_ENCLOSE		710662	0					
ANR	710840	CompoundStatement		54:6:814:846	710662	19					
ANR	710841	IdentifierDeclStatement	EncloseNode * en = NENCLOSE ( node ) ;	2627:6:58645:58677	710662	0	True				
ANR	710842	IdentifierDecl	* en = NENCLOSE ( node )		710662	0					
ANR	710843	IdentifierDeclType	EncloseNode *		710662	0					
ANR	710844	Identifier	en		710662	1					
ANR	710845	AssignmentExpression	* en = NENCLOSE ( node )		710662	2		=			
ANR	710846	Identifier	en		710662	0					
ANR	710847	CallExpression	NENCLOSE ( node )		710662	1					
ANR	710848	Callee	NENCLOSE		710662	0					
ANR	710849	Identifier	NENCLOSE		710662	0					
ANR	710850	ArgumentList	node		710662	1					
ANR	710851	Argument	node		710662	0					
ANR	710852	Identifier	node		710662	0					
ANR	710853	SwitchStatement	switch ( en -> type )		710662	1					
ANR	710854	Condition	en -> type	2628:14:58693:58700	710662	0	True				
ANR	710855	PtrMemberAccess	en -> type		710662	0					
ANR	710856	Identifier	en		710662	0					
ANR	710857	Identifier	type		710662	1					
ANR	710858	CompoundStatement		55:24:872:872	710662	1					
ANR	710859	Label	case ENCLOSE_OPTION :	2629:6:58711:58730	710662	0	True				
ANR	710860	Identifier	ENCLOSE_OPTION		710662	0					
ANR	710861	CompoundStatement		58:3:907:944	710662	1					
ANR	710862	IdentifierDeclStatement	OnigOptionType options = reg -> options ;	2631:3:58738:58775	710662	0	True				
ANR	710863	IdentifierDecl	options = reg -> options		710662	0					
ANR	710864	IdentifierDeclType	OnigOptionType		710662	0					
ANR	710865	Identifier	options		710662	1					
ANR	710866	AssignmentExpression	options = reg -> options		710662	2		=			
ANR	710867	Identifier	options		710662	0					
ANR	710868	PtrMemberAccess	reg -> options		710662	1					
ANR	710869	Identifier	reg		710662	0					
ANR	710870	Identifier	options		710662	1					
ANR	710871	ExpressionStatement	reg -> options = NENCLOSE ( node ) -> option	2633:3:58781:58818	710662	1	True				
ANR	710872	AssignmentExpression	reg -> options = NENCLOSE ( node ) -> option		710662	0		=			
ANR	710873	PtrMemberAccess	reg -> options		710662	0					
ANR	710874	Identifier	reg		710662	0					
ANR	710875	Identifier	options		710662	1					
ANR	710876	PtrMemberAccess	NENCLOSE ( node ) -> option		710662	1					
ANR	710877	CallExpression	NENCLOSE ( node )		710662	0					
ANR	710878	Callee	NENCLOSE		710662	0					
ANR	710879	Identifier	NENCLOSE		710662	0					
ANR	710880	ArgumentList	node		710662	1					
ANR	710881	Argument	node		710662	0					
ANR	710882	Identifier	node		710662	0					
ANR	710883	Identifier	option		710662	1					
ANR	710884	ExpressionStatement	"n = get_head_value_node ( NENCLOSE ( node ) -> target , exact , reg )"	2634:3:58823:58882	710662	2	True				
ANR	710885	AssignmentExpression	"n = get_head_value_node ( NENCLOSE ( node ) -> target , exact , reg )"		710662	0		=			
ANR	710886	Identifier	n		710662	0					
ANR	710887	CallExpression	"get_head_value_node ( NENCLOSE ( node ) -> target , exact , reg )"		710662	1					
ANR	710888	Callee	get_head_value_node		710662	0					
ANR	710889	Identifier	get_head_value_node		710662	0					
ANR	710890	ArgumentList	NENCLOSE ( node ) -> target		710662	1					
ANR	710891	Argument	NENCLOSE ( node ) -> target		710662	0					
ANR	710892	PtrMemberAccess	NENCLOSE ( node ) -> target		710662	0					
ANR	710893	CallExpression	NENCLOSE ( node )		710662	0					
ANR	710894	Callee	NENCLOSE		710662	0					
ANR	710895	Identifier	NENCLOSE		710662	0					
ANR	710896	ArgumentList	node		710662	1					
ANR	710897	Argument	node		710662	0					
ANR	710898	Identifier	node		710662	0					
ANR	710899	Identifier	target		710662	1					
ANR	710900	Argument	exact		710662	1					
ANR	710901	Identifier	exact		710662	0					
ANR	710902	Argument	reg		710662	2					
ANR	710903	Identifier	reg		710662	0					
ANR	710904	ExpressionStatement	reg -> options = options	2635:3:58887:58909	710662	3	True				
ANR	710905	AssignmentExpression	reg -> options = options		710662	0		=			
ANR	710906	PtrMemberAccess	reg -> options		710662	0					
ANR	710907	Identifier	reg		710662	0					
ANR	710908	Identifier	options		710662	1					
ANR	710909	Identifier	options		710662	1					
ANR	710910	BreakStatement	break ;	2637:1:58915:58920	710662	2	True				
ANR	710911	Label	case ENCLOSE_MEMORY :	2639:6:58929:58948	710662	3	True				
ANR	710912	Identifier	ENCLOSE_MEMORY		710662	0					
ANR	710913	Label	case ENCLOSE_STOP_BACKTRACK :	2640:6:58956:58983	710662	4	True				
ANR	710914	Identifier	ENCLOSE_STOP_BACKTRACK		710662	0					
ANR	710915	ExpressionStatement	"n = get_head_value_node ( en -> target , exact , reg )"	2641:1:58986:59033	710662	5	True				
ANR	710916	AssignmentExpression	"n = get_head_value_node ( en -> target , exact , reg )"		710662	0		=			
ANR	710917	Identifier	n		710662	0					
ANR	710918	CallExpression	"get_head_value_node ( en -> target , exact , reg )"		710662	1					
ANR	710919	Callee	get_head_value_node		710662	0					
ANR	710920	Identifier	get_head_value_node		710662	0					
ANR	710921	ArgumentList	en -> target		710662	1					
ANR	710922	Argument	en -> target		710662	0					
ANR	710923	PtrMemberAccess	en -> target		710662	0					
ANR	710924	Identifier	en		710662	0					
ANR	710925	Identifier	target		710662	1					
ANR	710926	Argument	exact		710662	1					
ANR	710927	Identifier	exact		710662	0					
ANR	710928	Argument	reg		710662	2					
ANR	710929	Identifier	reg		710662	0					
ANR	710930	BreakStatement	break ;	2642:1:59036:59041	710662	6	True				
ANR	710931	BreakStatement	break ;	2645:4:59061:59066	710662	20	True				
ANR	710932	Label	case NT_ANCHOR :	2647:2:59071:59085	710662	21	True				
ANR	710933	Identifier	NT_ANCHOR		710662	0					
ANR	710934	IfStatement	if ( NANCHOR ( node ) -> type == ANCHOR_PREC_READ )		710662	22					
ANR	710935	Condition	NANCHOR ( node ) -> type == ANCHOR_PREC_READ	2648:8:59095:59133	710662	0	True				
ANR	710936	EqualityExpression	NANCHOR ( node ) -> type == ANCHOR_PREC_READ		710662	0		==			
ANR	710937	PtrMemberAccess	NANCHOR ( node ) -> type		710662	0					
ANR	710938	CallExpression	NANCHOR ( node )		710662	0					
ANR	710939	Callee	NANCHOR		710662	0					
ANR	710940	Identifier	NANCHOR		710662	0					
ANR	710941	ArgumentList	node		710662	1					
ANR	710942	Argument	node		710662	0					
ANR	710943	Identifier	node		710662	0					
ANR	710944	Identifier	type		710662	1					
ANR	710945	Identifier	ANCHOR_PREC_READ		710662	1					
ANR	710946	ExpressionStatement	"n = get_head_value_node ( NANCHOR ( node ) -> target , exact , reg )"	2649:6:59142:59200	710662	1	True				
ANR	710947	AssignmentExpression	"n = get_head_value_node ( NANCHOR ( node ) -> target , exact , reg )"		710662	0		=			
ANR	710948	Identifier	n		710662	0					
ANR	710949	CallExpression	"get_head_value_node ( NANCHOR ( node ) -> target , exact , reg )"		710662	1					
ANR	710950	Callee	get_head_value_node		710662	0					
ANR	710951	Identifier	get_head_value_node		710662	0					
ANR	710952	ArgumentList	NANCHOR ( node ) -> target		710662	1					
ANR	710953	Argument	NANCHOR ( node ) -> target		710662	0					
ANR	710954	PtrMemberAccess	NANCHOR ( node ) -> target		710662	0					
ANR	710955	CallExpression	NANCHOR ( node )		710662	0					
ANR	710956	Callee	NANCHOR		710662	0					
ANR	710957	Identifier	NANCHOR		710662	0					
ANR	710958	ArgumentList	node		710662	1					
ANR	710959	Argument	node		710662	0					
ANR	710960	Identifier	node		710662	0					
ANR	710961	Identifier	target		710662	1					
ANR	710962	Argument	exact		710662	1					
ANR	710963	Identifier	exact		710662	0					
ANR	710964	Argument	reg		710662	2					
ANR	710965	Identifier	reg		710662	0					
ANR	710966	BreakStatement	break ;	2650:4:59206:59211	710662	23	True				
ANR	710967	Label	default :	2652:2:59216:59223	710662	24	True				
ANR	710968	Identifier	default		710662	0					
ANR	710969	BreakStatement	break ;	2653:4:59229:59234	710662	25	True				
ANR	710970	ReturnStatement	return n ;	2656:2:59243:59251	710662	2	True				
ANR	710971	Identifier	n		710662	0					
ANR	710972	ReturnType	static Node *		710662	1					
ANR	710973	Identifier	get_head_value_node		710662	2					
ANR	710974	ParameterList	"Node * node , int exact , regex_t * reg"		710662	3					
ANR	710975	Parameter	Node * node	2573:20:57793:57802	710662	0	True				
ANR	710976	ParameterType	Node *		710662	0					
ANR	710977	Identifier	node		710662	1					
ANR	710978	Parameter	int exact	2573:32:57805:57813	710662	1	True				
ANR	710979	ParameterType	int		710662	0					
ANR	710980	Identifier	exact		710662	1					
ANR	710981	Parameter	regex_t * reg	2573:43:57816:57827	710662	2	True				
ANR	710982	ParameterType	regex_t *		710662	0					
ANR	710983	Identifier	reg		710662	1					
ANR	710984	CFGEntryNode	ENTRY		710662		True				
ANR	710985	CFGExitNode	EXIT		710662		True				
ANR	710986	Symbol	* qn		710662						
ANR	710987	Symbol	NCAR		710662						
ANR	710988	Symbol	* sn		710662						
ANR	710989	Symbol	IS_NOT_NULL		710662						
ANR	710990	Symbol	* NENCLOSE		710662						
ANR	710991	Symbol	NSTRING_IS_RAW		710662						
ANR	710992	Symbol	NANCHOR ( node ) -> type		710662						
ANR	710993	Symbol	NQTFR		710662						
ANR	710994	Symbol	* en		710662						
ANR	710995	Symbol	qn -> lower		710662						
ANR	710996	Symbol	sn -> s		710662						
ANR	710997	Symbol	reg		710662						
ANR	710998	Symbol	reg -> options		710662						
ANR	710999	Symbol	NENCLOSE		710662						
ANR	711000	Symbol	* NANCHOR		710662						
ANR	711001	Symbol	en -> type		710662						
ANR	711002	Symbol	options		710662						
ANR	711003	Symbol	sn		710662						
ANR	711004	Symbol	sn -> end		710662						
ANR	711005	Symbol	qn		710662						
ANR	711006	Symbol	NENCLOSE ( node ) -> option		710662						
ANR	711007	Symbol	NSTR		710662						
ANR	711008	Symbol	NANCHOR ( node ) -> target		710662						
ANR	711009	Symbol	en		710662						
ANR	711010	Symbol	n		710662						
ANR	711011	Symbol	qn -> head_exact		710662						
ANR	711012	Symbol	qn -> target		710662						
ANR	711013	Symbol	NENCLOSE ( node ) -> target		710662						
ANR	711014	Symbol	get_head_value_node		710662						
ANR	711015	Symbol	ANCHOR_PREC_READ		710662						
ANR	711016	Symbol	node		710662						
ANR	711017	Symbol	en -> target		710662						
ANR	711018	Symbol	IS_IGNORECASE		710662						
ANR	711019	Symbol	exact		710662						
ANR	711020	Symbol	NANCHOR		710662						
ANR	711021	Symbol	NTYPE		710662						
ANR	711022	Symbol	NULL_NODE		710662						
ANR	711023	Symbol	* reg		710662						
ANR	711024	Function	check_type_tree	2659:0:59256:60259							
ANR	711025	FunctionDef	"check_type_tree (Node * node , int type_mask , int enclose_mask , int anchor_mask)"		711024	0					
ANR	711026	CompoundStatement		2661:0:59345:60259	711024	0					
ANR	711027	IdentifierDeclStatement	"int type , r = 0 ;"	2662:2:59349:59364	711024	0	True				
ANR	711028	IdentifierDecl	type		711024	0					
ANR	711029	IdentifierDeclType	int		711024	0					
ANR	711030	Identifier	type		711024	1					
ANR	711031	IdentifierDecl	r = 0		711024	1					
ANR	711032	IdentifierDeclType	int		711024	0					
ANR	711033	Identifier	r		711024	1					
ANR	711034	AssignmentExpression	r = 0		711024	2		=			
ANR	711035	Identifier	r		711024	0					
ANR	711036	PrimaryExpression	0		711024	1					
ANR	711037	ExpressionStatement	type = NTYPE ( node )	2664:2:59369:59387	711024	1	True				
ANR	711038	AssignmentExpression	type = NTYPE ( node )		711024	0		=			
ANR	711039	Identifier	type		711024	0					
ANR	711040	CallExpression	NTYPE ( node )		711024	1					
ANR	711041	Callee	NTYPE		711024	0					
ANR	711042	Identifier	NTYPE		711024	0					
ANR	711043	ArgumentList	node		711024	1					
ANR	711044	Argument	node		711024	0					
ANR	711045	Identifier	node		711024	0					
ANR	711046	IfStatement	if ( ( NTYPE2BIT ( type ) & type_mask ) == 0 )		711024	2					
ANR	711047	Condition	( NTYPE2BIT ( type ) & type_mask ) == 0	2665:6:59395:59428	711024	0	True				
ANR	711048	EqualityExpression	( NTYPE2BIT ( type ) & type_mask ) == 0		711024	0		==			
ANR	711049	BitAndExpression	NTYPE2BIT ( type ) & type_mask		711024	0		&			
ANR	711050	CallExpression	NTYPE2BIT ( type )		711024	0					
ANR	711051	Callee	NTYPE2BIT		711024	0					
ANR	711052	Identifier	NTYPE2BIT		711024	0					
ANR	711053	ArgumentList	type		711024	1					
ANR	711054	Argument	type		711024	0					
ANR	711055	Identifier	type		711024	0					
ANR	711056	Identifier	type_mask		711024	1					
ANR	711057	PrimaryExpression	0		711024	1					
ANR	711058	ReturnStatement	return 1 ;	2666:4:59435:59443	711024	1	True				
ANR	711059	PrimaryExpression	1		711024	0					
ANR	711060	SwitchStatement	switch ( type )		711024	3					
ANR	711061	Condition	type	2668:10:59456:59459	711024	0	True				
ANR	711062	Identifier	type		711024	0					
ANR	711063	CompoundStatement		8:16:116:116	711024	1					
ANR	711064	Label	case NT_LIST :	2669:2:59466:59478	711024	0	True				
ANR	711065	Identifier	NT_LIST		711024	0					
ANR	711066	Label	case NT_ALT :	2670:2:59482:59493	711024	1	True				
ANR	711067	Identifier	NT_ALT		711024	0					
ANR	711068	DoStatement	do		711024	2					
ANR	711069	CompoundStatement		11:7:156:156	711024	0					
ANR	711070	ExpressionStatement	"r = check_type_tree ( NCAR ( node ) , type_mask , enclose_mask , anchor_mask )"	2672:6:59510:59584	711024	0	True				
ANR	711071	AssignmentExpression	"r = check_type_tree ( NCAR ( node ) , type_mask , enclose_mask , anchor_mask )"		711024	0		=			
ANR	711072	Identifier	r		711024	0					
ANR	711073	CallExpression	"check_type_tree ( NCAR ( node ) , type_mask , enclose_mask , anchor_mask )"		711024	1					
ANR	711074	Callee	check_type_tree		711024	0					
ANR	711075	Identifier	check_type_tree		711024	0					
ANR	711076	ArgumentList	NCAR ( node )		711024	1					
ANR	711077	Argument	NCAR ( node )		711024	0					
ANR	711078	CallExpression	NCAR ( node )		711024	0					
ANR	711079	Callee	NCAR		711024	0					
ANR	711080	Identifier	NCAR		711024	0					
ANR	711081	ArgumentList	node		711024	1					
ANR	711082	Argument	node		711024	0					
ANR	711083	Identifier	node		711024	0					
ANR	711084	Argument	type_mask		711024	1					
ANR	711085	Identifier	type_mask		711024	0					
ANR	711086	Argument	enclose_mask		711024	2					
ANR	711087	Identifier	enclose_mask		711024	0					
ANR	711088	Argument	anchor_mask		711024	3					
ANR	711089	Identifier	anchor_mask		711024	0					
ANR	711090	Condition	r == 0 && IS_NOT_NULL ( node = NCDR ( node ) )	2674:13:59599:59638	711024	1	True				
ANR	711091	AndExpression	r == 0 && IS_NOT_NULL ( node = NCDR ( node ) )		711024	0		&&			
ANR	711092	EqualityExpression	r == 0		711024	0		==			
ANR	711093	Identifier	r		711024	0					
ANR	711094	PrimaryExpression	0		711024	1					
ANR	711095	CallExpression	IS_NOT_NULL ( node = NCDR ( node ) )		711024	1					
ANR	711096	Callee	IS_NOT_NULL		711024	0					
ANR	711097	Identifier	IS_NOT_NULL		711024	0					
ANR	711098	ArgumentList	node = NCDR ( node )		711024	1					
ANR	711099	Argument	node = NCDR ( node )		711024	0					
ANR	711100	AssignmentExpression	node = NCDR ( node )		711024	0		=			
ANR	711101	Identifier	node		711024	0					
ANR	711102	CallExpression	NCDR ( node )		711024	1					
ANR	711103	Callee	NCDR		711024	0					
ANR	711104	Identifier	NCDR		711024	0					
ANR	711105	ArgumentList	node		711024	1					
ANR	711106	Argument	node		711024	0					
ANR	711107	Identifier	node		711024	0					
ANR	711108	BreakStatement	break ;	2675:4:59646:59651	711024	3	True				
ANR	711109	Label	case NT_QTFR :	2677:2:59656:59668	711024	4	True				
ANR	711110	Identifier	NT_QTFR		711024	0					
ANR	711111	ExpressionStatement	"r = check_type_tree ( NQTFR ( node ) -> target , type_mask , enclose_mask , anchor_mask )"	2678:4:59674:59755	711024	5	True				
ANR	711112	AssignmentExpression	"r = check_type_tree ( NQTFR ( node ) -> target , type_mask , enclose_mask , anchor_mask )"		711024	0		=			
ANR	711113	Identifier	r		711024	0					
ANR	711114	CallExpression	"check_type_tree ( NQTFR ( node ) -> target , type_mask , enclose_mask , anchor_mask )"		711024	1					
ANR	711115	Callee	check_type_tree		711024	0					
ANR	711116	Identifier	check_type_tree		711024	0					
ANR	711117	ArgumentList	NQTFR ( node ) -> target		711024	1					
ANR	711118	Argument	NQTFR ( node ) -> target		711024	0					
ANR	711119	PtrMemberAccess	NQTFR ( node ) -> target		711024	0					
ANR	711120	CallExpression	NQTFR ( node )		711024	0					
ANR	711121	Callee	NQTFR		711024	0					
ANR	711122	Identifier	NQTFR		711024	0					
ANR	711123	ArgumentList	node		711024	1					
ANR	711124	Argument	node		711024	0					
ANR	711125	Identifier	node		711024	0					
ANR	711126	Identifier	target		711024	1					
ANR	711127	Argument	type_mask		711024	1					
ANR	711128	Identifier	type_mask		711024	0					
ANR	711129	Argument	enclose_mask		711024	2					
ANR	711130	Identifier	enclose_mask		711024	0					
ANR	711131	Argument	anchor_mask		711024	3					
ANR	711132	Identifier	anchor_mask		711024	0					
ANR	711133	BreakStatement	break ;	2680:4:59761:59766	711024	6	True				
ANR	711134	Label	case NT_ENCLOSE :	2682:2:59771:59786	711024	7	True				
ANR	711135	Identifier	NT_ENCLOSE		711024	0					
ANR	711136	CompoundStatement		24:6:454:486	711024	8					
ANR	711137	IdentifierDeclStatement	EncloseNode * en = NENCLOSE ( node ) ;	2684:6:59800:59832	711024	0	True				
ANR	711138	IdentifierDecl	* en = NENCLOSE ( node )		711024	0					
ANR	711139	IdentifierDeclType	EncloseNode *		711024	0					
ANR	711140	Identifier	en		711024	1					
ANR	711141	AssignmentExpression	* en = NENCLOSE ( node )		711024	2		=			
ANR	711142	Identifier	en		711024	0					
ANR	711143	CallExpression	NENCLOSE ( node )		711024	1					
ANR	711144	Callee	NENCLOSE		711024	0					
ANR	711145	Identifier	NENCLOSE		711024	0					
ANR	711146	ArgumentList	node		711024	1					
ANR	711147	Argument	node		711024	0					
ANR	711148	Identifier	node		711024	0					
ANR	711149	IfStatement	if ( ( en -> type & enclose_mask ) == 0 )		711024	1					
ANR	711150	Condition	( en -> type & enclose_mask ) == 0	2685:10:59844:59873	711024	0	True				
ANR	711151	EqualityExpression	( en -> type & enclose_mask ) == 0		711024	0		==			
ANR	711152	BitAndExpression	en -> type & enclose_mask		711024	0		&			
ANR	711153	PtrMemberAccess	en -> type		711024	0					
ANR	711154	Identifier	en		711024	0					
ANR	711155	Identifier	type		711024	1					
ANR	711156	Identifier	enclose_mask		711024	1					
ANR	711157	PrimaryExpression	0		711024	1					
ANR	711158	ReturnStatement	return 1 ;	2686:1:59877:59885	711024	1	True				
ANR	711159	PrimaryExpression	1		711024	0					
ANR	711160	ExpressionStatement	"r = check_type_tree ( en -> target , type_mask , enclose_mask , anchor_mask )"	2688:6:59894:59963	711024	2	True				
ANR	711161	AssignmentExpression	"r = check_type_tree ( en -> target , type_mask , enclose_mask , anchor_mask )"		711024	0		=			
ANR	711162	Identifier	r		711024	0					
ANR	711163	CallExpression	"check_type_tree ( en -> target , type_mask , enclose_mask , anchor_mask )"		711024	1					
ANR	711164	Callee	check_type_tree		711024	0					
ANR	711165	Identifier	check_type_tree		711024	0					
ANR	711166	ArgumentList	en -> target		711024	1					
ANR	711167	Argument	en -> target		711024	0					
ANR	711168	PtrMemberAccess	en -> target		711024	0					
ANR	711169	Identifier	en		711024	0					
ANR	711170	Identifier	target		711024	1					
ANR	711171	Argument	type_mask		711024	1					
ANR	711172	Identifier	type_mask		711024	0					
ANR	711173	Argument	enclose_mask		711024	2					
ANR	711174	Identifier	enclose_mask		711024	0					
ANR	711175	Argument	anchor_mask		711024	3					
ANR	711176	Identifier	anchor_mask		711024	0					
ANR	711177	BreakStatement	break ;	2690:4:59975:59980	711024	9	True				
ANR	711178	Label	case NT_ANCHOR :	2692:2:59985:59999	711024	10	True				
ANR	711179	Identifier	NT_ANCHOR		711024	0					
ANR	711180	ExpressionStatement	type = NANCHOR ( node ) -> type	2693:4:60005:60031	711024	11	True				
ANR	711181	AssignmentExpression	type = NANCHOR ( node ) -> type		711024	0		=			
ANR	711182	Identifier	type		711024	0					
ANR	711183	PtrMemberAccess	NANCHOR ( node ) -> type		711024	1					
ANR	711184	CallExpression	NANCHOR ( node )		711024	0					
ANR	711185	Callee	NANCHOR		711024	0					
ANR	711186	Identifier	NANCHOR		711024	0					
ANR	711187	ArgumentList	node		711024	1					
ANR	711188	Argument	node		711024	0					
ANR	711189	Identifier	node		711024	0					
ANR	711190	Identifier	type		711024	1					
ANR	711191	IfStatement	if ( ( type & anchor_mask ) == 0 )		711024	12					
ANR	711192	Condition	( type & anchor_mask ) == 0	2694:8:60041:60065	711024	0	True				
ANR	711193	EqualityExpression	( type & anchor_mask ) == 0		711024	0		==			
ANR	711194	BitAndExpression	type & anchor_mask		711024	0		&			
ANR	711195	Identifier	type		711024	0					
ANR	711196	Identifier	anchor_mask		711024	1					
ANR	711197	PrimaryExpression	0		711024	1					
ANR	711198	ReturnStatement	return 1 ;	2695:6:60074:60082	711024	1	True				
ANR	711199	PrimaryExpression	1		711024	0					
ANR	711200	IfStatement	if ( NANCHOR ( node ) -> target )		711024	13					
ANR	711201	Condition	NANCHOR ( node ) -> target	2697:8:60093:60113	711024	0	True				
ANR	711202	PtrMemberAccess	NANCHOR ( node ) -> target		711024	0					
ANR	711203	CallExpression	NANCHOR ( node )		711024	0					
ANR	711204	Callee	NANCHOR		711024	0					
ANR	711205	Identifier	NANCHOR		711024	0					
ANR	711206	ArgumentList	node		711024	1					
ANR	711207	Argument	node		711024	0					
ANR	711208	Identifier	node		711024	0					
ANR	711209	Identifier	target		711024	1					
ANR	711210	ExpressionStatement	"r = check_type_tree ( NANCHOR ( node ) -> target , type_mask , enclose_mask , anchor_mask )"	2698:6:60122:60207	711024	1	True				
ANR	711211	AssignmentExpression	"r = check_type_tree ( NANCHOR ( node ) -> target , type_mask , enclose_mask , anchor_mask )"		711024	0		=			
ANR	711212	Identifier	r		711024	0					
ANR	711213	CallExpression	"check_type_tree ( NANCHOR ( node ) -> target , type_mask , enclose_mask , anchor_mask )"		711024	1					
ANR	711214	Callee	check_type_tree		711024	0					
ANR	711215	Identifier	check_type_tree		711024	0					
ANR	711216	ArgumentList	NANCHOR ( node ) -> target		711024	1					
ANR	711217	Argument	NANCHOR ( node ) -> target		711024	0					
ANR	711218	PtrMemberAccess	NANCHOR ( node ) -> target		711024	0					
ANR	711219	CallExpression	NANCHOR ( node )		711024	0					
ANR	711220	Callee	NANCHOR		711024	0					
ANR	711221	Identifier	NANCHOR		711024	0					
ANR	711222	ArgumentList	node		711024	1					
ANR	711223	Argument	node		711024	0					
ANR	711224	Identifier	node		711024	0					
ANR	711225	Identifier	target		711024	1					
ANR	711226	Argument	type_mask		711024	1					
ANR	711227	Identifier	type_mask		711024	0					
ANR	711228	Argument	enclose_mask		711024	2					
ANR	711229	Identifier	enclose_mask		711024	0					
ANR	711230	Argument	anchor_mask		711024	3					
ANR	711231	Identifier	anchor_mask		711024	0					
ANR	711232	BreakStatement	break ;	2700:4:60213:60218	711024	14	True				
ANR	711233	Label	default :	2702:2:60223:60230	711024	15	True				
ANR	711234	Identifier	default		711024	0					
ANR	711235	BreakStatement	break ;	2703:4:60236:60241	711024	16	True				
ANR	711236	ReturnStatement	return r ;	2705:2:60249:60257	711024	4	True				
ANR	711237	Identifier	r		711024	0					
ANR	711238	ReturnType	static int		711024	1					
ANR	711239	Identifier	check_type_tree		711024	2					
ANR	711240	ParameterList	"Node * node , int type_mask , int enclose_mask , int anchor_mask"		711024	3					
ANR	711241	Parameter	Node * node	2660:16:59283:59292	711024	0	True				
ANR	711242	ParameterType	Node *		711024	0					
ANR	711243	Identifier	node		711024	1					
ANR	711244	Parameter	int type_mask	2660:28:59295:59307	711024	1	True				
ANR	711245	ParameterType	int		711024	0					
ANR	711246	Identifier	type_mask		711024	1					
ANR	711247	Parameter	int enclose_mask	2660:43:59310:59325	711024	2	True				
ANR	711248	ParameterType	int		711024	0					
ANR	711249	Identifier	enclose_mask		711024	1					
ANR	711250	Parameter	int anchor_mask	2660:61:59328:59342	711024	3	True				
ANR	711251	ParameterType	int		711024	0					
ANR	711252	Identifier	anchor_mask		711024	1					
ANR	711253	CFGEntryNode	ENTRY		711024		True				
ANR	711254	CFGExitNode	EXIT		711024		True				
ANR	711255	Symbol	type_mask		711024						
ANR	711256	Symbol	NQTFR ( node ) -> target		711024						
ANR	711257	Symbol	IS_NOT_NULL		711024						
ANR	711258	Symbol	NCAR		711024						
ANR	711259	Symbol	anchor_mask		711024						
ANR	711260	Symbol	NCDR		711024						
ANR	711261	Symbol	NANCHOR ( node ) -> target		711024						
ANR	711262	Symbol	check_type_tree		711024						
ANR	711263	Symbol	en		711024						
ANR	711264	Symbol	enclose_mask		711024						
ANR	711265	Symbol	NANCHOR ( node ) -> type		711024						
ANR	711266	Symbol	type		711024						
ANR	711267	Symbol	NQTFR		711024						
ANR	711268	Symbol	* en		711024						
ANR	711269	Symbol	NTYPE2BIT		711024						
ANR	711270	Symbol	node		711024						
ANR	711271	Symbol	r		711024						
ANR	711272	Symbol	* NQTFR		711024						
ANR	711273	Symbol	NENCLOSE		711024						
ANR	711274	Symbol	en -> target		711024						
ANR	711275	Symbol	* NANCHOR		711024						
ANR	711276	Symbol	en -> type		711024						
ANR	711277	Symbol	NANCHOR		711024						
ANR	711278	Symbol	NTYPE		711024						
ANR	711279	Function	subexp_inf_recursive_check	2713:0:60351:62161							
ANR	711280	FunctionDef	"subexp_inf_recursive_check (Node * node , ScanEnv * env , int head)"		711279	0					
ANR	711281	CompoundStatement		2715:0:60425:62161	711279	0					
ANR	711282	IdentifierDeclStatement	int type ;	2716:2:60429:60437	711279	0	True				
ANR	711283	IdentifierDecl	type		711279	0					
ANR	711284	IdentifierDeclType	int		711279	0					
ANR	711285	Identifier	type		711279	1					
ANR	711286	IdentifierDeclStatement	int r = 0 ;	2717:2:60441:60450	711279	1	True				
ANR	711287	IdentifierDecl	r = 0		711279	0					
ANR	711288	IdentifierDeclType	int		711279	0					
ANR	711289	Identifier	r		711279	1					
ANR	711290	AssignmentExpression	r = 0		711279	2		=			
ANR	711291	Identifier	r		711279	0					
ANR	711292	PrimaryExpression	0		711279	1					
ANR	711293	ExpressionStatement	type = NTYPE ( node )	2719:2:60455:60473	711279	2	True				
ANR	711294	AssignmentExpression	type = NTYPE ( node )		711279	0		=			
ANR	711295	Identifier	type		711279	0					
ANR	711296	CallExpression	NTYPE ( node )		711279	1					
ANR	711297	Callee	NTYPE		711279	0					
ANR	711298	Identifier	NTYPE		711279	0					
ANR	711299	ArgumentList	node		711279	1					
ANR	711300	Argument	node		711279	0					
ANR	711301	Identifier	node		711279	0					
ANR	711302	SwitchStatement	switch ( type )		711279	3					
ANR	711303	Condition	type	2720:10:60485:60488	711279	0	True				
ANR	711304	Identifier	type		711279	0					
ANR	711305	CompoundStatement		6:16:65:65	711279	1					
ANR	711306	Label	case NT_LIST :	2721:2:60495:60507	711279	0	True				
ANR	711307	Identifier	NT_LIST		711279	0					
ANR	711308	CompoundStatement		11:6:134:141	711279	1					
ANR	711309	IdentifierDeclStatement	Node * x ;	2723:6:60521:60528	711279	0	True				
ANR	711310	IdentifierDecl	* x		711279	0					
ANR	711311	IdentifierDeclType	Node *		711279	0					
ANR	711312	Identifier	x		711279	1					
ANR	711313	IdentifierDeclStatement	OnigDistance min ;	2724:6:60536:60552	711279	1	True				
ANR	711314	IdentifierDecl	min		711279	0					
ANR	711315	IdentifierDeclType	OnigDistance		711279	0					
ANR	711316	Identifier	min		711279	1					
ANR	711317	IdentifierDeclStatement	int ret ;	2725:6:60560:60567	711279	2	True				
ANR	711318	IdentifierDecl	ret		711279	0					
ANR	711319	IdentifierDeclType	int		711279	0					
ANR	711320	Identifier	ret		711279	1					
ANR	711321	ExpressionStatement	x = node	2727:6:60576:60584	711279	3	True				
ANR	711322	AssignmentExpression	x = node		711279	0		=			
ANR	711323	Identifier	x		711279	0					
ANR	711324	Identifier	node		711279	1					
ANR	711325	DoStatement	do		711279	4					
ANR	711326	CompoundStatement		14:9:169:169	711279	0					
ANR	711327	ExpressionStatement	"ret = subexp_inf_recursive_check ( NCAR ( x ) , env , head )"	2729:1:60598:60650	711279	0	True				
ANR	711328	AssignmentExpression	"ret = subexp_inf_recursive_check ( NCAR ( x ) , env , head )"		711279	0		=			
ANR	711329	Identifier	ret		711279	0					
ANR	711330	CallExpression	"subexp_inf_recursive_check ( NCAR ( x ) , env , head )"		711279	1					
ANR	711331	Callee	subexp_inf_recursive_check		711279	0					
ANR	711332	Identifier	subexp_inf_recursive_check		711279	0					
ANR	711333	ArgumentList	NCAR ( x )		711279	1					
ANR	711334	Argument	NCAR ( x )		711279	0					
ANR	711335	CallExpression	NCAR ( x )		711279	0					
ANR	711336	Callee	NCAR		711279	0					
ANR	711337	Identifier	NCAR		711279	0					
ANR	711338	ArgumentList	x		711279	1					
ANR	711339	Argument	x		711279	0					
ANR	711340	Identifier	x		711279	0					
ANR	711341	Argument	env		711279	1					
ANR	711342	Identifier	env		711279	0					
ANR	711343	Argument	head		711279	2					
ANR	711344	Identifier	head		711279	0					
ANR	711345	IfStatement	if ( ret < 0 || ret == RECURSION_INFINITE )		711279	1					
ANR	711346	Condition	ret < 0 || ret == RECURSION_INFINITE	2730:5:60657:60692	711279	0	True				
ANR	711347	OrExpression	ret < 0 || ret == RECURSION_INFINITE		711279	0		||			
ANR	711348	RelationalExpression	ret < 0		711279	0		<			
ANR	711349	Identifier	ret		711279	0					
ANR	711350	PrimaryExpression	0		711279	1					
ANR	711351	EqualityExpression	ret == RECURSION_INFINITE		711279	1		==			
ANR	711352	Identifier	ret		711279	0					
ANR	711353	Identifier	RECURSION_INFINITE		711279	1					
ANR	711354	ReturnStatement	return ret ;	2730:43:60695:60705	711279	1	True				
ANR	711355	Identifier	ret		711279	0					
ANR	711356	ExpressionStatement	r |= ret	2731:1:60708:60716	711279	2	True				
ANR	711357	AssignmentExpression	r |= ret		711279	0		|=			
ANR	711358	Identifier	r		711279	0					
ANR	711359	Identifier	ret		711279	1					
ANR	711360	IfStatement	if ( head )		711279	3					
ANR	711361	Condition	head	2732:5:60723:60726	711279	0	True				
ANR	711362	Identifier	head		711279	0					
ANR	711363	CompoundStatement		18:11:303:303	711279	1					
ANR	711364	ExpressionStatement	"ret = get_min_match_length ( NCAR ( x ) , & min , env )"	2733:3:60734:60780	711279	0	True				
ANR	711365	AssignmentExpression	"ret = get_min_match_length ( NCAR ( x ) , & min , env )"		711279	0		=			
ANR	711366	Identifier	ret		711279	0					
ANR	711367	CallExpression	"get_min_match_length ( NCAR ( x ) , & min , env )"		711279	1					
ANR	711368	Callee	get_min_match_length		711279	0					
ANR	711369	Identifier	get_min_match_length		711279	0					
ANR	711370	ArgumentList	NCAR ( x )		711279	1					
ANR	711371	Argument	NCAR ( x )		711279	0					
ANR	711372	CallExpression	NCAR ( x )		711279	0					
ANR	711373	Callee	NCAR		711279	0					
ANR	711374	Identifier	NCAR		711279	0					
ANR	711375	ArgumentList	x		711279	1					
ANR	711376	Argument	x		711279	0					
ANR	711377	Identifier	x		711279	0					
ANR	711378	Argument	& min		711279	1					
ANR	711379	UnaryOperationExpression	& min		711279	0					
ANR	711380	UnaryOperator	&		711279	0					
ANR	711381	Identifier	min		711279	1					
ANR	711382	Argument	env		711279	2					
ANR	711383	Identifier	env		711279	0					
ANR	711384	IfStatement	if ( ret != 0 )		711279	1					
ANR	711385	Condition	ret != 0	2734:7:60789:60796	711279	0	True				
ANR	711386	EqualityExpression	ret != 0		711279	0		!=			
ANR	711387	Identifier	ret		711279	0					
ANR	711388	PrimaryExpression	0		711279	1					
ANR	711389	ReturnStatement	return ret ;	2734:17:60799:60809	711279	1	True				
ANR	711390	Identifier	ret		711279	0					
ANR	711391	IfStatement	if ( min != 0 )		711279	2					
ANR	711392	Condition	min != 0	2735:7:60818:60825	711279	0	True				
ANR	711393	EqualityExpression	min != 0		711279	0		!=			
ANR	711394	Identifier	min		711279	0					
ANR	711395	PrimaryExpression	0		711279	1					
ANR	711396	ExpressionStatement	head = 0	2735:17:60828:60836	711279	1	True				
ANR	711397	AssignmentExpression	head = 0		711279	0		=			
ANR	711398	Identifier	head		711279	0					
ANR	711399	PrimaryExpression	0		711279	1					
ANR	711400	Condition	IS_NOT_NULL ( x = NCDR ( x ) )	2737:15:60856:60879	711279	1	True				
ANR	711401	CallExpression	IS_NOT_NULL ( x = NCDR ( x ) )		711279	0					
ANR	711402	Callee	IS_NOT_NULL		711279	0					
ANR	711403	Identifier	IS_NOT_NULL		711279	0					
ANR	711404	ArgumentList	x = NCDR ( x )		711279	1					
ANR	711405	Argument	x = NCDR ( x )		711279	0					
ANR	711406	AssignmentExpression	x = NCDR ( x )		711279	0		=			
ANR	711407	Identifier	x		711279	0					
ANR	711408	CallExpression	NCDR ( x )		711279	1					
ANR	711409	Callee	NCDR		711279	0					
ANR	711410	Identifier	NCDR		711279	0					
ANR	711411	ArgumentList	x		711279	1					
ANR	711412	Argument	x		711279	0					
ANR	711413	Identifier	x		711279	0					
ANR	711414	BreakStatement	break ;	2739:4:60893:60898	711279	2	True				
ANR	711415	Label	case NT_ALT :	2741:2:60903:60914	711279	3	True				
ANR	711416	Identifier	NT_ALT		711279	0					
ANR	711417	CompoundStatement		29:6:502:509	711279	4					
ANR	711418	IdentifierDeclStatement	int ret ;	2743:6:60928:60935	711279	0	True				
ANR	711419	IdentifierDecl	ret		711279	0					
ANR	711420	IdentifierDeclType	int		711279	0					
ANR	711421	Identifier	ret		711279	1					
ANR	711422	ExpressionStatement	r = RECURSION_EXIST	2744:6:60943:60962	711279	1	True				
ANR	711423	AssignmentExpression	r = RECURSION_EXIST		711279	0		=			
ANR	711424	Identifier	r		711279	0					
ANR	711425	Identifier	RECURSION_EXIST		711279	1					
ANR	711426	DoStatement	do		711279	2					
ANR	711427	CompoundStatement		31:9:547:547	711279	0					
ANR	711428	ExpressionStatement	"ret = subexp_inf_recursive_check ( NCAR ( node ) , env , head )"	2746:1:60976:61031	711279	0	True				
ANR	711429	AssignmentExpression	"ret = subexp_inf_recursive_check ( NCAR ( node ) , env , head )"		711279	0		=			
ANR	711430	Identifier	ret		711279	0					
ANR	711431	CallExpression	"subexp_inf_recursive_check ( NCAR ( node ) , env , head )"		711279	1					
ANR	711432	Callee	subexp_inf_recursive_check		711279	0					
ANR	711433	Identifier	subexp_inf_recursive_check		711279	0					
ANR	711434	ArgumentList	NCAR ( node )		711279	1					
ANR	711435	Argument	NCAR ( node )		711279	0					
ANR	711436	CallExpression	NCAR ( node )		711279	0					
ANR	711437	Callee	NCAR		711279	0					
ANR	711438	Identifier	NCAR		711279	0					
ANR	711439	ArgumentList	node		711279	1					
ANR	711440	Argument	node		711279	0					
ANR	711441	Identifier	node		711279	0					
ANR	711442	Argument	env		711279	1					
ANR	711443	Identifier	env		711279	0					
ANR	711444	Argument	head		711279	2					
ANR	711445	Identifier	head		711279	0					
ANR	711446	IfStatement	if ( ret < 0 || ret == RECURSION_INFINITE )		711279	1					
ANR	711447	Condition	ret < 0 || ret == RECURSION_INFINITE	2747:5:61038:61073	711279	0	True				
ANR	711448	OrExpression	ret < 0 || ret == RECURSION_INFINITE		711279	0		||			
ANR	711449	RelationalExpression	ret < 0		711279	0		<			
ANR	711450	Identifier	ret		711279	0					
ANR	711451	PrimaryExpression	0		711279	1					
ANR	711452	EqualityExpression	ret == RECURSION_INFINITE		711279	1		==			
ANR	711453	Identifier	ret		711279	0					
ANR	711454	Identifier	RECURSION_INFINITE		711279	1					
ANR	711455	ReturnStatement	return ret ;	2747:43:61076:61086	711279	1	True				
ANR	711456	Identifier	ret		711279	0					
ANR	711457	ExpressionStatement	r &= ret	2748:1:61089:61097	711279	2	True				
ANR	711458	AssignmentExpression	r &= ret		711279	0		&=			
ANR	711459	Identifier	r		711279	0					
ANR	711460	Identifier	ret		711279	1					
ANR	711461	Condition	IS_NOT_NULL ( node = NCDR ( node ) )	2749:15:61114:61143	711279	1	True				
ANR	711462	CallExpression	IS_NOT_NULL ( node = NCDR ( node ) )		711279	0					
ANR	711463	Callee	IS_NOT_NULL		711279	0					
ANR	711464	Identifier	IS_NOT_NULL		711279	0					
ANR	711465	ArgumentList	node = NCDR ( node )		711279	1					
ANR	711466	Argument	node = NCDR ( node )		711279	0					
ANR	711467	AssignmentExpression	node = NCDR ( node )		711279	0		=			
ANR	711468	Identifier	node		711279	0					
ANR	711469	CallExpression	NCDR ( node )		711279	1					
ANR	711470	Callee	NCDR		711279	0					
ANR	711471	Identifier	NCDR		711279	0					
ANR	711472	ArgumentList	node		711279	1					
ANR	711473	Argument	node		711279	0					
ANR	711474	Identifier	node		711279	0					
ANR	711475	BreakStatement	break ;	2751:4:61157:61162	711279	5	True				
ANR	711476	Label	case NT_QTFR :	2753:2:61167:61179	711279	6	True				
ANR	711477	Identifier	NT_QTFR		711279	0					
ANR	711478	ExpressionStatement	"r = subexp_inf_recursive_check ( NQTFR ( node ) -> target , env , head )"	2754:4:61185:61247	711279	7	True				
ANR	711479	AssignmentExpression	"r = subexp_inf_recursive_check ( NQTFR ( node ) -> target , env , head )"		711279	0		=			
ANR	711480	Identifier	r		711279	0					
ANR	711481	CallExpression	"subexp_inf_recursive_check ( NQTFR ( node ) -> target , env , head )"		711279	1					
ANR	711482	Callee	subexp_inf_recursive_check		711279	0					
ANR	711483	Identifier	subexp_inf_recursive_check		711279	0					
ANR	711484	ArgumentList	NQTFR ( node ) -> target		711279	1					
ANR	711485	Argument	NQTFR ( node ) -> target		711279	0					
ANR	711486	PtrMemberAccess	NQTFR ( node ) -> target		711279	0					
ANR	711487	CallExpression	NQTFR ( node )		711279	0					
ANR	711488	Callee	NQTFR		711279	0					
ANR	711489	Identifier	NQTFR		711279	0					
ANR	711490	ArgumentList	node		711279	1					
ANR	711491	Argument	node		711279	0					
ANR	711492	Identifier	node		711279	0					
ANR	711493	Identifier	target		711279	1					
ANR	711494	Argument	env		711279	1					
ANR	711495	Identifier	env		711279	0					
ANR	711496	Argument	head		711279	2					
ANR	711497	Identifier	head		711279	0					
ANR	711498	IfStatement	if ( r == RECURSION_EXIST )		711279	8					
ANR	711499	Condition	r == RECURSION_EXIST	2755:8:61257:61276	711279	0	True				
ANR	711500	EqualityExpression	r == RECURSION_EXIST		711279	0		==			
ANR	711501	Identifier	r		711279	0					
ANR	711502	Identifier	RECURSION_EXIST		711279	1					
ANR	711503	CompoundStatement		41:30:853:853	711279	1					
ANR	711504	IfStatement	if ( NQTFR ( node ) -> lower == 0 )		711279	0					
ANR	711505	Condition	NQTFR ( node ) -> lower == 0	2756:10:61291:61313	711279	0	True				
ANR	711506	EqualityExpression	NQTFR ( node ) -> lower == 0		711279	0		==			
ANR	711507	PtrMemberAccess	NQTFR ( node ) -> lower		711279	0					
ANR	711508	CallExpression	NQTFR ( node )		711279	0					
ANR	711509	Callee	NQTFR		711279	0					
ANR	711510	Identifier	NQTFR		711279	0					
ANR	711511	ArgumentList	node		711279	1					
ANR	711512	Argument	node		711279	0					
ANR	711513	Identifier	node		711279	0					
ANR	711514	Identifier	lower		711279	1					
ANR	711515	PrimaryExpression	0		711279	1					
ANR	711516	ExpressionStatement	r = 0	2756:35:61316:61321	711279	1	True				
ANR	711517	AssignmentExpression	r = 0		711279	0		=			
ANR	711518	Identifier	r		711279	0					
ANR	711519	PrimaryExpression	0		711279	1					
ANR	711520	BreakStatement	break ;	2758:4:61333:61338	711279	9	True				
ANR	711521	Label	case NT_ANCHOR :	2760:2:61343:61357	711279	10	True				
ANR	711522	Identifier	NT_ANCHOR		711279	0					
ANR	711523	CompoundStatement		48:6:945:975	711279	11					
ANR	711524	IdentifierDeclStatement	AnchorNode * an = NANCHOR ( node ) ;	2762:6:61371:61401	711279	0	True				
ANR	711525	IdentifierDecl	* an = NANCHOR ( node )		711279	0					
ANR	711526	IdentifierDeclType	AnchorNode *		711279	0					
ANR	711527	Identifier	an		711279	1					
ANR	711528	AssignmentExpression	* an = NANCHOR ( node )		711279	2		=			
ANR	711529	Identifier	an		711279	0					
ANR	711530	CallExpression	NANCHOR ( node )		711279	1					
ANR	711531	Callee	NANCHOR		711279	0					
ANR	711532	Identifier	NANCHOR		711279	0					
ANR	711533	ArgumentList	node		711279	1					
ANR	711534	Argument	node		711279	0					
ANR	711535	Identifier	node		711279	0					
ANR	711536	SwitchStatement	switch ( an -> type )		711279	1					
ANR	711537	Condition	an -> type	2763:14:61417:61424	711279	0	True				
ANR	711538	PtrMemberAccess	an -> type		711279	0					
ANR	711539	Identifier	an		711279	0					
ANR	711540	Identifier	type		711279	1					
ANR	711541	CompoundStatement		49:24:1001:1001	711279	1					
ANR	711542	Label	case ANCHOR_PREC_READ :	2764:6:61435:61456	711279	0	True				
ANR	711543	Identifier	ANCHOR_PREC_READ		711279	0					
ANR	711544	Label	case ANCHOR_PREC_READ_NOT :	2765:6:61464:61489	711279	1	True				
ANR	711545	Identifier	ANCHOR_PREC_READ_NOT		711279	0					
ANR	711546	Label	case ANCHOR_LOOK_BEHIND :	2766:6:61497:61520	711279	2	True				
ANR	711547	Identifier	ANCHOR_LOOK_BEHIND		711279	0					
ANR	711548	Label	case ANCHOR_LOOK_BEHIND_NOT :	2767:6:61528:61555	711279	3	True				
ANR	711549	Identifier	ANCHOR_LOOK_BEHIND_NOT		711279	0					
ANR	711550	ExpressionStatement	"r = subexp_inf_recursive_check ( an -> target , env , head )"	2768:1:61558:61611	711279	4	True				
ANR	711551	AssignmentExpression	"r = subexp_inf_recursive_check ( an -> target , env , head )"		711279	0		=			
ANR	711552	Identifier	r		711279	0					
ANR	711553	CallExpression	"subexp_inf_recursive_check ( an -> target , env , head )"		711279	1					
ANR	711554	Callee	subexp_inf_recursive_check		711279	0					
ANR	711555	Identifier	subexp_inf_recursive_check		711279	0					
ANR	711556	ArgumentList	an -> target		711279	1					
ANR	711557	Argument	an -> target		711279	0					
ANR	711558	PtrMemberAccess	an -> target		711279	0					
ANR	711559	Identifier	an		711279	0					
ANR	711560	Identifier	target		711279	1					
ANR	711561	Argument	env		711279	1					
ANR	711562	Identifier	env		711279	0					
ANR	711563	Argument	head		711279	2					
ANR	711564	Identifier	head		711279	0					
ANR	711565	BreakStatement	break ;	2769:1:61614:61619	711279	5	True				
ANR	711566	BreakStatement	break ;	2772:4:61639:61644	711279	12	True				
ANR	711567	Label	case NT_CALL :	2774:2:61649:61661	711279	13	True				
ANR	711568	Identifier	NT_CALL		711279	0					
ANR	711569	ExpressionStatement	"r = subexp_inf_recursive_check ( NCALL ( node ) -> target , env , head )"	2775:4:61667:61729	711279	14	True				
ANR	711570	AssignmentExpression	"r = subexp_inf_recursive_check ( NCALL ( node ) -> target , env , head )"		711279	0		=			
ANR	711571	Identifier	r		711279	0					
ANR	711572	CallExpression	"subexp_inf_recursive_check ( NCALL ( node ) -> target , env , head )"		711279	1					
ANR	711573	Callee	subexp_inf_recursive_check		711279	0					
ANR	711574	Identifier	subexp_inf_recursive_check		711279	0					
ANR	711575	ArgumentList	NCALL ( node ) -> target		711279	1					
ANR	711576	Argument	NCALL ( node ) -> target		711279	0					
ANR	711577	PtrMemberAccess	NCALL ( node ) -> target		711279	0					
ANR	711578	CallExpression	NCALL ( node )		711279	0					
ANR	711579	Callee	NCALL		711279	0					
ANR	711580	Identifier	NCALL		711279	0					
ANR	711581	ArgumentList	node		711279	1					
ANR	711582	Argument	node		711279	0					
ANR	711583	Identifier	node		711279	0					
ANR	711584	Identifier	target		711279	1					
ANR	711585	Argument	env		711279	1					
ANR	711586	Identifier	env		711279	0					
ANR	711587	Argument	head		711279	2					
ANR	711588	Identifier	head		711279	0					
ANR	711589	BreakStatement	break ;	2776:4:61735:61740	711279	15	True				
ANR	711590	Label	case NT_ENCLOSE :	2778:2:61745:61760	711279	16	True				
ANR	711591	Identifier	NT_ENCLOSE		711279	0					
ANR	711592	IfStatement	if ( IS_ENCLOSE_MARK2 ( NENCLOSE ( node ) ) )		711279	17					
ANR	711593	Condition	IS_ENCLOSE_MARK2 ( NENCLOSE ( node ) )	2779:8:61770:61801	711279	0	True				
ANR	711594	CallExpression	IS_ENCLOSE_MARK2 ( NENCLOSE ( node ) )		711279	0					
ANR	711595	Callee	IS_ENCLOSE_MARK2		711279	0					
ANR	711596	Identifier	IS_ENCLOSE_MARK2		711279	0					
ANR	711597	ArgumentList	NENCLOSE ( node )		711279	1					
ANR	711598	Argument	NENCLOSE ( node )		711279	0					
ANR	711599	CallExpression	NENCLOSE ( node )		711279	0					
ANR	711600	Callee	NENCLOSE		711279	0					
ANR	711601	Identifier	NENCLOSE		711279	0					
ANR	711602	ArgumentList	node		711279	1					
ANR	711603	Argument	node		711279	0					
ANR	711604	Identifier	node		711279	0					
ANR	711605	ReturnStatement	return 0 ;	2780:6:61810:61818	711279	1	True				
ANR	711606	PrimaryExpression	0		711279	0					
ANR	711607	ElseStatement	else		711279	0					
ANR	711608	IfStatement	if ( IS_ENCLOSE_MARK1 ( NENCLOSE ( node ) ) )		711279	0					
ANR	711609	Condition	IS_ENCLOSE_MARK1 ( NENCLOSE ( node ) )	2781:13:61833:61864	711279	0	True				
ANR	711610	CallExpression	IS_ENCLOSE_MARK1 ( NENCLOSE ( node ) )		711279	0					
ANR	711611	Callee	IS_ENCLOSE_MARK1		711279	0					
ANR	711612	Identifier	IS_ENCLOSE_MARK1		711279	0					
ANR	711613	ArgumentList	NENCLOSE ( node )		711279	1					
ANR	711614	Argument	NENCLOSE ( node )		711279	0					
ANR	711615	CallExpression	NENCLOSE ( node )		711279	0					
ANR	711616	Callee	NENCLOSE		711279	0					
ANR	711617	Identifier	NENCLOSE		711279	0					
ANR	711618	ArgumentList	node		711279	1					
ANR	711619	Argument	node		711279	0					
ANR	711620	Identifier	node		711279	0					
ANR	711621	ReturnStatement	return ( head == 0 ? RECURSION_EXIST : RECURSION_INFINITE ) ;	2782:6:61873:61930	711279	1	True				
ANR	711622	ConditionalExpression	head == 0 ? RECURSION_EXIST : RECURSION_INFINITE		711279	0					
ANR	711623	Condition	head == 0		711279	0					
ANR	711624	EqualityExpression	head == 0		711279	0		==			
ANR	711625	Identifier	head		711279	0					
ANR	711626	PrimaryExpression	0		711279	1					
ANR	711627	Identifier	RECURSION_EXIST		711279	1					
ANR	711628	Identifier	RECURSION_INFINITE		711279	2					
ANR	711629	ElseStatement	else		711279	0					
ANR	711630	CompoundStatement		69:9:1515:1515	711279	0					
ANR	711631	ExpressionStatement	"SET_ENCLOSE_STATUS ( node , NST_MARK2 )"	2784:6:61949:61984	711279	0	True				
ANR	711632	CallExpression	"SET_ENCLOSE_STATUS ( node , NST_MARK2 )"		711279	0					
ANR	711633	Callee	SET_ENCLOSE_STATUS		711279	0					
ANR	711634	Identifier	SET_ENCLOSE_STATUS		711279	0					
ANR	711635	ArgumentList	node		711279	1					
ANR	711636	Argument	node		711279	0					
ANR	711637	Identifier	node		711279	0					
ANR	711638	Argument	NST_MARK2		711279	1					
ANR	711639	Identifier	NST_MARK2		711279	0					
ANR	711640	ExpressionStatement	"r = subexp_inf_recursive_check ( NENCLOSE ( node ) -> target , env , head )"	2785:6:61992:62057	711279	1	True				
ANR	711641	AssignmentExpression	"r = subexp_inf_recursive_check ( NENCLOSE ( node ) -> target , env , head )"		711279	0		=			
ANR	711642	Identifier	r		711279	0					
ANR	711643	CallExpression	"subexp_inf_recursive_check ( NENCLOSE ( node ) -> target , env , head )"		711279	1					
ANR	711644	Callee	subexp_inf_recursive_check		711279	0					
ANR	711645	Identifier	subexp_inf_recursive_check		711279	0					
ANR	711646	ArgumentList	NENCLOSE ( node ) -> target		711279	1					
ANR	711647	Argument	NENCLOSE ( node ) -> target		711279	0					
ANR	711648	PtrMemberAccess	NENCLOSE ( node ) -> target		711279	0					
ANR	711649	CallExpression	NENCLOSE ( node )		711279	0					
ANR	711650	Callee	NENCLOSE		711279	0					
ANR	711651	Identifier	NENCLOSE		711279	0					
ANR	711652	ArgumentList	node		711279	1					
ANR	711653	Argument	node		711279	0					
ANR	711654	Identifier	node		711279	0					
ANR	711655	Identifier	target		711279	1					
ANR	711656	Argument	env		711279	1					
ANR	711657	Identifier	env		711279	0					
ANR	711658	Argument	head		711279	2					
ANR	711659	Identifier	head		711279	0					
ANR	711660	ExpressionStatement	"CLEAR_ENCLOSE_STATUS ( node , NST_MARK2 )"	2786:6:62065:62102	711279	2	True				
ANR	711661	CallExpression	"CLEAR_ENCLOSE_STATUS ( node , NST_MARK2 )"		711279	0					
ANR	711662	Callee	CLEAR_ENCLOSE_STATUS		711279	0					
ANR	711663	Identifier	CLEAR_ENCLOSE_STATUS		711279	0					
ANR	711664	ArgumentList	node		711279	1					
ANR	711665	Argument	node		711279	0					
ANR	711666	Identifier	node		711279	0					
ANR	711667	Argument	NST_MARK2		711279	1					
ANR	711668	Identifier	NST_MARK2		711279	0					
ANR	711669	BreakStatement	break ;	2788:4:62114:62119	711279	18	True				
ANR	711670	Label	default :	2790:2:62124:62131	711279	19	True				
ANR	711671	Identifier	default		711279	0					
ANR	711672	BreakStatement	break ;	2791:4:62137:62142	711279	20	True				
ANR	711673	ReturnStatement	return r ;	2794:2:62151:62159	711279	4	True				
ANR	711674	Identifier	r		711279	0					
ANR	711675	ReturnType	static int		711279	1					
ANR	711676	Identifier	subexp_inf_recursive_check		711279	2					
ANR	711677	ParameterList	"Node * node , ScanEnv * env , int head"		711279	3					
ANR	711678	Parameter	Node * node	2714:27:60389:60398	711279	0	True				
ANR	711679	ParameterType	Node *		711279	0					
ANR	711680	Identifier	node		711279	1					
ANR	711681	Parameter	ScanEnv * env	2714:39:60401:60412	711279	1	True				
ANR	711682	ParameterType	ScanEnv *		711279	0					
ANR	711683	Identifier	env		711279	1					
ANR	711684	Parameter	int head	2714:53:60415:60422	711279	2	True				
ANR	711685	ParameterType	int		711279	0					
ANR	711686	Identifier	head		711279	1					
ANR	711687	CFGEntryNode	ENTRY		711279		True				
ANR	711688	CFGExitNode	EXIT		711279		True				
ANR	711689	Symbol	NQTFR ( node ) -> target		711279						
ANR	711690	Symbol	IS_NOT_NULL		711279						
ANR	711691	Symbol	NCAR		711279						
ANR	711692	Symbol	RECURSION_EXIST		711279						
ANR	711693	Symbol	NQTFR ( node ) -> lower		711279						
ANR	711694	Symbol	NCALL		711279						
ANR	711695	Symbol	* NENCLOSE		711279						
ANR	711696	Symbol	an -> type		711279						
ANR	711697	Symbol	IS_ENCLOSE_MARK2		711279						
ANR	711698	Symbol	type		711279						
ANR	711699	Symbol	NQTFR		711279						
ANR	711700	Symbol	head		711279						
ANR	711701	Symbol	min		711279						
ANR	711702	Symbol	* NQTFR		711279						
ANR	711703	Symbol	NENCLOSE		711279						
ANR	711704	Symbol	NCALL ( node ) -> target		711279						
ANR	711705	Symbol	ret		711279						
ANR	711706	Symbol	NCDR		711279						
ANR	711707	Symbol	NST_MARK2		711279						
ANR	711708	Symbol	env		711279						
ANR	711709	Symbol	an		711279						
ANR	711710	Symbol	NENCLOSE ( node ) -> target		711279						
ANR	711711	Symbol	* an		711279						
ANR	711712	Symbol	node		711279						
ANR	711713	Symbol	r		711279						
ANR	711714	Symbol	an -> target		711279						
ANR	711715	Symbol	IS_ENCLOSE_MARK1		711279						
ANR	711716	Symbol	get_min_match_length		711279						
ANR	711717	Symbol	x		711279						
ANR	711718	Symbol	RECURSION_INFINITE		711279						
ANR	711719	Symbol	NANCHOR		711279						
ANR	711720	Symbol	NTYPE		711279						
ANR	711721	Symbol	subexp_inf_recursive_check		711279						
ANR	711722	Symbol	* NCALL		711279						
ANR	711723	Symbol	& min		711279						
ANR	711724	Function	subexp_inf_recursive_check_trav	2797:0:62164:63281							
ANR	711725	FunctionDef	"subexp_inf_recursive_check_trav (Node * node , ScanEnv * env)"		711724	0					
ANR	711726	CompoundStatement		2799:0:62233:63281	711724	0					
ANR	711727	IdentifierDeclStatement	int type ;	2800:2:62237:62245	711724	0	True				
ANR	711728	IdentifierDecl	type		711724	0					
ANR	711729	IdentifierDeclType	int		711724	0					
ANR	711730	Identifier	type		711724	1					
ANR	711731	IdentifierDeclStatement	int r = 0 ;	2801:2:62249:62258	711724	1	True				
ANR	711732	IdentifierDecl	r = 0		711724	0					
ANR	711733	IdentifierDeclType	int		711724	0					
ANR	711734	Identifier	r		711724	1					
ANR	711735	AssignmentExpression	r = 0		711724	2		=			
ANR	711736	Identifier	r		711724	0					
ANR	711737	PrimaryExpression	0		711724	1					
ANR	711738	ExpressionStatement	type = NTYPE ( node )	2803:2:62263:62281	711724	2	True				
ANR	711739	AssignmentExpression	type = NTYPE ( node )		711724	0		=			
ANR	711740	Identifier	type		711724	0					
ANR	711741	CallExpression	NTYPE ( node )		711724	1					
ANR	711742	Callee	NTYPE		711724	0					
ANR	711743	Identifier	NTYPE		711724	0					
ANR	711744	ArgumentList	node		711724	1					
ANR	711745	Argument	node		711724	0					
ANR	711746	Identifier	node		711724	0					
ANR	711747	SwitchStatement	switch ( type )		711724	3					
ANR	711748	Condition	type	2804:10:62293:62296	711724	0	True				
ANR	711749	Identifier	type		711724	0					
ANR	711750	CompoundStatement		6:16:65:65	711724	1					
ANR	711751	Label	case NT_LIST :	2805:2:62303:62315	711724	0	True				
ANR	711752	Identifier	NT_LIST		711724	0					
ANR	711753	Label	case NT_ALT :	2806:2:62319:62330	711724	1	True				
ANR	711754	Identifier	NT_ALT		711724	0					
ANR	711755	DoStatement	do		711724	2					
ANR	711756	CompoundStatement		9:7:105:105	711724	0					
ANR	711757	ExpressionStatement	"r = subexp_inf_recursive_check_trav ( NCAR ( node ) , env )"	2808:6:62347:62399	711724	0	True				
ANR	711758	AssignmentExpression	"r = subexp_inf_recursive_check_trav ( NCAR ( node ) , env )"		711724	0		=			
ANR	711759	Identifier	r		711724	0					
ANR	711760	CallExpression	"subexp_inf_recursive_check_trav ( NCAR ( node ) , env )"		711724	1					
ANR	711761	Callee	subexp_inf_recursive_check_trav		711724	0					
ANR	711762	Identifier	subexp_inf_recursive_check_trav		711724	0					
ANR	711763	ArgumentList	NCAR ( node )		711724	1					
ANR	711764	Argument	NCAR ( node )		711724	0					
ANR	711765	CallExpression	NCAR ( node )		711724	0					
ANR	711766	Callee	NCAR		711724	0					
ANR	711767	Identifier	NCAR		711724	0					
ANR	711768	ArgumentList	node		711724	1					
ANR	711769	Argument	node		711724	0					
ANR	711770	Identifier	node		711724	0					
ANR	711771	Argument	env		711724	1					
ANR	711772	Identifier	env		711724	0					
ANR	711773	Condition	r == 0 && IS_NOT_NULL ( node = NCDR ( node ) )	2809:13:62414:62453	711724	1	True				
ANR	711774	AndExpression	r == 0 && IS_NOT_NULL ( node = NCDR ( node ) )		711724	0		&&			
ANR	711775	EqualityExpression	r == 0		711724	0		==			
ANR	711776	Identifier	r		711724	0					
ANR	711777	PrimaryExpression	0		711724	1					
ANR	711778	CallExpression	IS_NOT_NULL ( node = NCDR ( node ) )		711724	1					
ANR	711779	Callee	IS_NOT_NULL		711724	0					
ANR	711780	Identifier	IS_NOT_NULL		711724	0					
ANR	711781	ArgumentList	node = NCDR ( node )		711724	1					
ANR	711782	Argument	node = NCDR ( node )		711724	0					
ANR	711783	AssignmentExpression	node = NCDR ( node )		711724	0		=			
ANR	711784	Identifier	node		711724	0					
ANR	711785	CallExpression	NCDR ( node )		711724	1					
ANR	711786	Callee	NCDR		711724	0					
ANR	711787	Identifier	NCDR		711724	0					
ANR	711788	ArgumentList	node		711724	1					
ANR	711789	Argument	node		711724	0					
ANR	711790	Identifier	node		711724	0					
ANR	711791	BreakStatement	break ;	2810:4:62461:62466	711724	3	True				
ANR	711792	Label	case NT_QTFR :	2812:2:62471:62483	711724	4	True				
ANR	711793	Identifier	NT_QTFR		711724	0					
ANR	711794	ExpressionStatement	"r = subexp_inf_recursive_check_trav ( NQTFR ( node ) -> target , env )"	2813:4:62489:62550	711724	5	True				
ANR	711795	AssignmentExpression	"r = subexp_inf_recursive_check_trav ( NQTFR ( node ) -> target , env )"		711724	0		=			
ANR	711796	Identifier	r		711724	0					
ANR	711797	CallExpression	"subexp_inf_recursive_check_trav ( NQTFR ( node ) -> target , env )"		711724	1					
ANR	711798	Callee	subexp_inf_recursive_check_trav		711724	0					
ANR	711799	Identifier	subexp_inf_recursive_check_trav		711724	0					
ANR	711800	ArgumentList	NQTFR ( node ) -> target		711724	1					
ANR	711801	Argument	NQTFR ( node ) -> target		711724	0					
ANR	711802	PtrMemberAccess	NQTFR ( node ) -> target		711724	0					
ANR	711803	CallExpression	NQTFR ( node )		711724	0					
ANR	711804	Callee	NQTFR		711724	0					
ANR	711805	Identifier	NQTFR		711724	0					
ANR	711806	ArgumentList	node		711724	1					
ANR	711807	Argument	node		711724	0					
ANR	711808	Identifier	node		711724	0					
ANR	711809	Identifier	target		711724	1					
ANR	711810	Argument	env		711724	1					
ANR	711811	Identifier	env		711724	0					
ANR	711812	BreakStatement	break ;	2814:4:62556:62561	711724	6	True				
ANR	711813	Label	case NT_ANCHOR :	2816:2:62566:62580	711724	7	True				
ANR	711814	Identifier	NT_ANCHOR		711724	0					
ANR	711815	CompoundStatement		20:6:360:390	711724	8					
ANR	711816	IdentifierDeclStatement	AnchorNode * an = NANCHOR ( node ) ;	2818:6:62594:62624	711724	0	True				
ANR	711817	IdentifierDecl	* an = NANCHOR ( node )		711724	0					
ANR	711818	IdentifierDeclType	AnchorNode *		711724	0					
ANR	711819	Identifier	an		711724	1					
ANR	711820	AssignmentExpression	* an = NANCHOR ( node )		711724	2		=			
ANR	711821	Identifier	an		711724	0					
ANR	711822	CallExpression	NANCHOR ( node )		711724	1					
ANR	711823	Callee	NANCHOR		711724	0					
ANR	711824	Identifier	NANCHOR		711724	0					
ANR	711825	ArgumentList	node		711724	1					
ANR	711826	Argument	node		711724	0					
ANR	711827	Identifier	node		711724	0					
ANR	711828	SwitchStatement	switch ( an -> type )		711724	1					
ANR	711829	Condition	an -> type	2819:14:62640:62647	711724	0	True				
ANR	711830	PtrMemberAccess	an -> type		711724	0					
ANR	711831	Identifier	an		711724	0					
ANR	711832	Identifier	type		711724	1					
ANR	711833	CompoundStatement		21:24:416:416	711724	1					
ANR	711834	Label	case ANCHOR_PREC_READ :	2820:6:62658:62679	711724	0	True				
ANR	711835	Identifier	ANCHOR_PREC_READ		711724	0					
ANR	711836	Label	case ANCHOR_PREC_READ_NOT :	2821:6:62687:62712	711724	1	True				
ANR	711837	Identifier	ANCHOR_PREC_READ_NOT		711724	0					
ANR	711838	Label	case ANCHOR_LOOK_BEHIND :	2822:6:62720:62743	711724	2	True				
ANR	711839	Identifier	ANCHOR_LOOK_BEHIND		711724	0					
ANR	711840	Label	case ANCHOR_LOOK_BEHIND_NOT :	2823:6:62751:62778	711724	3	True				
ANR	711841	Identifier	ANCHOR_LOOK_BEHIND_NOT		711724	0					
ANR	711842	ExpressionStatement	"r = subexp_inf_recursive_check_trav ( an -> target , env )"	2824:1:62781:62833	711724	4	True				
ANR	711843	AssignmentExpression	"r = subexp_inf_recursive_check_trav ( an -> target , env )"		711724	0		=			
ANR	711844	Identifier	r		711724	0					
ANR	711845	CallExpression	"subexp_inf_recursive_check_trav ( an -> target , env )"		711724	1					
ANR	711846	Callee	subexp_inf_recursive_check_trav		711724	0					
ANR	711847	Identifier	subexp_inf_recursive_check_trav		711724	0					
ANR	711848	ArgumentList	an -> target		711724	1					
ANR	711849	Argument	an -> target		711724	0					
ANR	711850	PtrMemberAccess	an -> target		711724	0					
ANR	711851	Identifier	an		711724	0					
ANR	711852	Identifier	target		711724	1					
ANR	711853	Argument	env		711724	1					
ANR	711854	Identifier	env		711724	0					
ANR	711855	BreakStatement	break ;	2825:1:62836:62841	711724	5	True				
ANR	711856	BreakStatement	break ;	2828:4:62861:62866	711724	9	True				
ANR	711857	Label	case NT_ENCLOSE :	2830:2:62871:62886	711724	10	True				
ANR	711858	Identifier	NT_ENCLOSE		711724	0					
ANR	711859	CompoundStatement		34:6:666:698	711724	11					
ANR	711860	IdentifierDeclStatement	EncloseNode * en = NENCLOSE ( node ) ;	2832:6:62900:62932	711724	0	True				
ANR	711861	IdentifierDecl	* en = NENCLOSE ( node )		711724	0					
ANR	711862	IdentifierDeclType	EncloseNode *		711724	0					
ANR	711863	Identifier	en		711724	1					
ANR	711864	AssignmentExpression	* en = NENCLOSE ( node )		711724	2		=			
ANR	711865	Identifier	en		711724	0					
ANR	711866	CallExpression	NENCLOSE ( node )		711724	1					
ANR	711867	Callee	NENCLOSE		711724	0					
ANR	711868	Identifier	NENCLOSE		711724	0					
ANR	711869	ArgumentList	node		711724	1					
ANR	711870	Argument	node		711724	0					
ANR	711871	Identifier	node		711724	0					
ANR	711872	IfStatement	if ( IS_ENCLOSE_RECURSION ( en ) )		711724	1					
ANR	711873	Condition	IS_ENCLOSE_RECURSION ( en )	2834:10:62945:62968	711724	0	True				
ANR	711874	CallExpression	IS_ENCLOSE_RECURSION ( en )		711724	0					
ANR	711875	Callee	IS_ENCLOSE_RECURSION		711724	0					
ANR	711876	Identifier	IS_ENCLOSE_RECURSION		711724	0					
ANR	711877	ArgumentList	en		711724	1					
ANR	711878	Argument	en		711724	0					
ANR	711879	Identifier	en		711724	0					
ANR	711880	CompoundStatement		36:36:737:737	711724	1					
ANR	711881	ExpressionStatement	"SET_ENCLOSE_STATUS ( node , NST_MARK1 )"	2835:1:62974:63009	711724	0	True				
ANR	711882	CallExpression	"SET_ENCLOSE_STATUS ( node , NST_MARK1 )"		711724	0					
ANR	711883	Callee	SET_ENCLOSE_STATUS		711724	0					
ANR	711884	Identifier	SET_ENCLOSE_STATUS		711724	0					
ANR	711885	ArgumentList	node		711724	1					
ANR	711886	Argument	node		711724	0					
ANR	711887	Identifier	node		711724	0					
ANR	711888	Argument	NST_MARK1		711724	1					
ANR	711889	Identifier	NST_MARK1		711724	0					
ANR	711890	ExpressionStatement	"r = subexp_inf_recursive_check ( en -> target , env , 1 )"	2836:1:63012:63062	711724	1	True				
ANR	711891	AssignmentExpression	"r = subexp_inf_recursive_check ( en -> target , env , 1 )"		711724	0		=			
ANR	711892	Identifier	r		711724	0					
ANR	711893	CallExpression	"subexp_inf_recursive_check ( en -> target , env , 1 )"		711724	1					
ANR	711894	Callee	subexp_inf_recursive_check		711724	0					
ANR	711895	Identifier	subexp_inf_recursive_check		711724	0					
ANR	711896	ArgumentList	en -> target		711724	1					
ANR	711897	Argument	en -> target		711724	0					
ANR	711898	PtrMemberAccess	en -> target		711724	0					
ANR	711899	Identifier	en		711724	0					
ANR	711900	Identifier	target		711724	1					
ANR	711901	Argument	env		711724	1					
ANR	711902	Identifier	env		711724	0					
ANR	711903	Argument	1		711724	2					
ANR	711904	PrimaryExpression	1		711724	0					
ANR	711905	IfStatement	if ( r > 0 )		711724	2					
ANR	711906	Condition	r > 0	2837:5:63069:63073	711724	0	True				
ANR	711907	RelationalExpression	r > 0		711724	0		>			
ANR	711908	Identifier	r		711724	0					
ANR	711909	PrimaryExpression	0		711724	1					
ANR	711910	ReturnStatement	return ONIGERR_NEVER_ENDING_RECURSION ;	2837:12:63076:63113	711724	1	True				
ANR	711911	Identifier	ONIGERR_NEVER_ENDING_RECURSION		711724	0					
ANR	711912	ExpressionStatement	"CLEAR_ENCLOSE_STATUS ( node , NST_MARK1 )"	2838:1:63116:63153	711724	3	True				
ANR	711913	CallExpression	"CLEAR_ENCLOSE_STATUS ( node , NST_MARK1 )"		711724	0					
ANR	711914	Callee	CLEAR_ENCLOSE_STATUS		711724	0					
ANR	711915	Identifier	CLEAR_ENCLOSE_STATUS		711724	0					
ANR	711916	ArgumentList	node		711724	1					
ANR	711917	Argument	node		711724	0					
ANR	711918	Identifier	node		711724	0					
ANR	711919	Argument	NST_MARK1		711724	1					
ANR	711920	Identifier	NST_MARK1		711724	0					
ANR	711921	ExpressionStatement	"r = subexp_inf_recursive_check_trav ( en -> target , env )"	2840:6:63169:63221	711724	2	True				
ANR	711922	AssignmentExpression	"r = subexp_inf_recursive_check_trav ( en -> target , env )"		711724	0		=			
ANR	711923	Identifier	r		711724	0					
ANR	711924	CallExpression	"subexp_inf_recursive_check_trav ( en -> target , env )"		711724	1					
ANR	711925	Callee	subexp_inf_recursive_check_trav		711724	0					
ANR	711926	Identifier	subexp_inf_recursive_check_trav		711724	0					
ANR	711927	ArgumentList	en -> target		711724	1					
ANR	711928	Argument	en -> target		711724	0					
ANR	711929	PtrMemberAccess	en -> target		711724	0					
ANR	711930	Identifier	en		711724	0					
ANR	711931	Identifier	target		711724	1					
ANR	711932	Argument	env		711724	1					
ANR	711933	Identifier	env		711724	0					
ANR	711934	BreakStatement	break ;	2843:4:63234:63239	711724	12	True				
ANR	711935	Label	default :	2845:2:63244:63251	711724	13	True				
ANR	711936	Identifier	default		711724	0					
ANR	711937	BreakStatement	break ;	2846:4:63257:63262	711724	14	True				
ANR	711938	ReturnStatement	return r ;	2849:2:63271:63279	711724	4	True				
ANR	711939	Identifier	r		711724	0					
ANR	711940	ReturnType	static int		711724	1					
ANR	711941	Identifier	subexp_inf_recursive_check_trav		711724	2					
ANR	711942	ParameterList	"Node * node , ScanEnv * env"		711724	3					
ANR	711943	Parameter	Node * node	2798:32:62207:62216	711724	0	True				
ANR	711944	ParameterType	Node *		711724	0					
ANR	711945	Identifier	node		711724	1					
ANR	711946	Parameter	ScanEnv * env	2798:44:62219:62230	711724	1	True				
ANR	711947	ParameterType	ScanEnv *		711724	0					
ANR	711948	Identifier	env		711724	1					
ANR	711949	CFGEntryNode	ENTRY		711724		True				
ANR	711950	CFGExitNode	EXIT		711724		True				
ANR	711951	Symbol	NQTFR ( node ) -> target		711724						
ANR	711952	Symbol	IS_NOT_NULL		711724						
ANR	711953	Symbol	NCAR		711724						
ANR	711954	Symbol	an -> type		711724						
ANR	711955	Symbol	type		711724						
ANR	711956	Symbol	NQTFR		711724						
ANR	711957	Symbol	* en		711724						
ANR	711958	Symbol	ONIGERR_NEVER_ENDING_RECURSION		711724						
ANR	711959	Symbol	* NQTFR		711724						
ANR	711960	Symbol	NENCLOSE		711724						
ANR	711961	Symbol	subexp_inf_recursive_check_trav		711724						
ANR	711962	Symbol	NCDR		711724						
ANR	711963	Symbol	en		711724						
ANR	711964	Symbol	NST_MARK1		711724						
ANR	711965	Symbol	env		711724						
ANR	711966	Symbol	an		711724						
ANR	711967	Symbol	* an		711724						
ANR	711968	Symbol	node		711724						
ANR	711969	Symbol	r		711724						
ANR	711970	Symbol	an -> target		711724						
ANR	711971	Symbol	en -> target		711724						
ANR	711972	Symbol	NANCHOR		711724						
ANR	711973	Symbol	NTYPE		711724						
ANR	711974	Symbol	IS_ENCLOSE_RECURSION		711724						
ANR	711975	Symbol	subexp_inf_recursive_check		711724						
ANR	711976	Function	subexp_recursive_check	2852:0:63284:64381							
ANR	711977	FunctionDef	subexp_recursive_check (Node * node)		711976	0					
ANR	711978	CompoundStatement		2854:0:63330:64381	711976	0					
ANR	711979	IdentifierDeclStatement	int r = 0 ;	2855:2:63334:63343	711976	0	True				
ANR	711980	IdentifierDecl	r = 0		711976	0					
ANR	711981	IdentifierDeclType	int		711976	0					
ANR	711982	Identifier	r		711976	1					
ANR	711983	AssignmentExpression	r = 0		711976	2		=			
ANR	711984	Identifier	r		711976	0					
ANR	711985	PrimaryExpression	0		711976	1					
ANR	711986	SwitchStatement	switch ( NTYPE ( node ) )		711976	1					
ANR	711987	Condition	NTYPE ( node )	2857:10:63356:63366	711976	0	True				
ANR	711988	CallExpression	NTYPE ( node )		711976	0					
ANR	711989	Callee	NTYPE		711976	0					
ANR	711990	Identifier	NTYPE		711976	0					
ANR	711991	ArgumentList	node		711976	1					
ANR	711992	Argument	node		711976	0					
ANR	711993	Identifier	node		711976	0					
ANR	711994	CompoundStatement		4:23:38:38	711976	1					
ANR	711995	Label	case NT_LIST :	2858:2:63373:63385	711976	0	True				
ANR	711996	Identifier	NT_LIST		711976	0					
ANR	711997	Label	case NT_ALT :	2859:2:63389:63400	711976	1	True				
ANR	711998	Identifier	NT_ALT		711976	0					
ANR	711999	DoStatement	do		711976	2					
ANR	712000	CompoundStatement		7:7:78:78	711976	0					
ANR	712001	ExpressionStatement	r |= subexp_recursive_check ( NCAR ( node ) )	2861:6:63417:63456	711976	0	True				
ANR	712002	AssignmentExpression	r |= subexp_recursive_check ( NCAR ( node ) )		711976	0		|=			
ANR	712003	Identifier	r		711976	0					
ANR	712004	CallExpression	subexp_recursive_check ( NCAR ( node ) )		711976	1					
ANR	712005	Callee	subexp_recursive_check		711976	0					
ANR	712006	Identifier	subexp_recursive_check		711976	0					
ANR	712007	ArgumentList	NCAR ( node )		711976	1					
ANR	712008	Argument	NCAR ( node )		711976	0					
ANR	712009	CallExpression	NCAR ( node )		711976	0					
ANR	712010	Callee	NCAR		711976	0					
ANR	712011	Identifier	NCAR		711976	0					
ANR	712012	ArgumentList	node		711976	1					
ANR	712013	Argument	node		711976	0					
ANR	712014	Identifier	node		711976	0					
ANR	712015	Condition	IS_NOT_NULL ( node = NCDR ( node ) )	2862:13:63471:63500	711976	1	True				
ANR	712016	CallExpression	IS_NOT_NULL ( node = NCDR ( node ) )		711976	0					
ANR	712017	Callee	IS_NOT_NULL		711976	0					
ANR	712018	Identifier	IS_NOT_NULL		711976	0					
ANR	712019	ArgumentList	node = NCDR ( node )		711976	1					
ANR	712020	Argument	node = NCDR ( node )		711976	0					
ANR	712021	AssignmentExpression	node = NCDR ( node )		711976	0		=			
ANR	712022	Identifier	node		711976	0					
ANR	712023	CallExpression	NCDR ( node )		711976	1					
ANR	712024	Callee	NCDR		711976	0					
ANR	712025	Identifier	NCDR		711976	0					
ANR	712026	ArgumentList	node		711976	1					
ANR	712027	Argument	node		711976	0					
ANR	712028	Identifier	node		711976	0					
ANR	712029	BreakStatement	break ;	2863:4:63508:63513	711976	3	True				
ANR	712030	Label	case NT_QTFR :	2865:2:63518:63530	711976	4	True				
ANR	712031	Identifier	NT_QTFR		711976	0					
ANR	712032	ExpressionStatement	r = subexp_recursive_check ( NQTFR ( node ) -> target )	2866:4:63536:63583	711976	5	True				
ANR	712033	AssignmentExpression	r = subexp_recursive_check ( NQTFR ( node ) -> target )		711976	0		=			
ANR	712034	Identifier	r		711976	0					
ANR	712035	CallExpression	subexp_recursive_check ( NQTFR ( node ) -> target )		711976	1					
ANR	712036	Callee	subexp_recursive_check		711976	0					
ANR	712037	Identifier	subexp_recursive_check		711976	0					
ANR	712038	ArgumentList	NQTFR ( node ) -> target		711976	1					
ANR	712039	Argument	NQTFR ( node ) -> target		711976	0					
ANR	712040	PtrMemberAccess	NQTFR ( node ) -> target		711976	0					
ANR	712041	CallExpression	NQTFR ( node )		711976	0					
ANR	712042	Callee	NQTFR		711976	0					
ANR	712043	Identifier	NQTFR		711976	0					
ANR	712044	ArgumentList	node		711976	1					
ANR	712045	Argument	node		711976	0					
ANR	712046	Identifier	node		711976	0					
ANR	712047	Identifier	target		711976	1					
ANR	712048	BreakStatement	break ;	2867:4:63589:63594	711976	6	True				
ANR	712049	Label	case NT_ANCHOR :	2869:2:63599:63613	711976	7	True				
ANR	712050	Identifier	NT_ANCHOR		711976	0					
ANR	712051	CompoundStatement		18:6:296:326	711976	8					
ANR	712052	IdentifierDeclStatement	AnchorNode * an = NANCHOR ( node ) ;	2871:6:63627:63657	711976	0	True				
ANR	712053	IdentifierDecl	* an = NANCHOR ( node )		711976	0					
ANR	712054	IdentifierDeclType	AnchorNode *		711976	0					
ANR	712055	Identifier	an		711976	1					
ANR	712056	AssignmentExpression	* an = NANCHOR ( node )		711976	2		=			
ANR	712057	Identifier	an		711976	0					
ANR	712058	CallExpression	NANCHOR ( node )		711976	1					
ANR	712059	Callee	NANCHOR		711976	0					
ANR	712060	Identifier	NANCHOR		711976	0					
ANR	712061	ArgumentList	node		711976	1					
ANR	712062	Argument	node		711976	0					
ANR	712063	Identifier	node		711976	0					
ANR	712064	SwitchStatement	switch ( an -> type )		711976	1					
ANR	712065	Condition	an -> type	2872:14:63673:63680	711976	0	True				
ANR	712066	PtrMemberAccess	an -> type		711976	0					
ANR	712067	Identifier	an		711976	0					
ANR	712068	Identifier	type		711976	1					
ANR	712069	CompoundStatement		19:24:352:352	711976	1					
ANR	712070	Label	case ANCHOR_PREC_READ :	2873:6:63691:63712	711976	0	True				
ANR	712071	Identifier	ANCHOR_PREC_READ		711976	0					
ANR	712072	Label	case ANCHOR_PREC_READ_NOT :	2874:6:63720:63745	711976	1	True				
ANR	712073	Identifier	ANCHOR_PREC_READ_NOT		711976	0					
ANR	712074	Label	case ANCHOR_LOOK_BEHIND :	2875:6:63753:63776	711976	2	True				
ANR	712075	Identifier	ANCHOR_LOOK_BEHIND		711976	0					
ANR	712076	Label	case ANCHOR_LOOK_BEHIND_NOT :	2876:6:63784:63811	711976	3	True				
ANR	712077	Identifier	ANCHOR_LOOK_BEHIND_NOT		711976	0					
ANR	712078	ExpressionStatement	r = subexp_recursive_check ( an -> target )	2877:1:63814:63852	711976	4	True				
ANR	712079	AssignmentExpression	r = subexp_recursive_check ( an -> target )		711976	0		=			
ANR	712080	Identifier	r		711976	0					
ANR	712081	CallExpression	subexp_recursive_check ( an -> target )		711976	1					
ANR	712082	Callee	subexp_recursive_check		711976	0					
ANR	712083	Identifier	subexp_recursive_check		711976	0					
ANR	712084	ArgumentList	an -> target		711976	1					
ANR	712085	Argument	an -> target		711976	0					
ANR	712086	PtrMemberAccess	an -> target		711976	0					
ANR	712087	Identifier	an		711976	0					
ANR	712088	Identifier	target		711976	1					
ANR	712089	BreakStatement	break ;	2878:1:63855:63860	711976	5	True				
ANR	712090	BreakStatement	break ;	2881:4:63880:63885	711976	9	True				
ANR	712091	Label	case NT_CALL :	2883:2:63890:63902	711976	10	True				
ANR	712092	Identifier	NT_CALL		711976	0					
ANR	712093	ExpressionStatement	r = subexp_recursive_check ( NCALL ( node ) -> target )	2884:4:63908:63955	711976	11	True				
ANR	712094	AssignmentExpression	r = subexp_recursive_check ( NCALL ( node ) -> target )		711976	0		=			
ANR	712095	Identifier	r		711976	0					
ANR	712096	CallExpression	subexp_recursive_check ( NCALL ( node ) -> target )		711976	1					
ANR	712097	Callee	subexp_recursive_check		711976	0					
ANR	712098	Identifier	subexp_recursive_check		711976	0					
ANR	712099	ArgumentList	NCALL ( node ) -> target		711976	1					
ANR	712100	Argument	NCALL ( node ) -> target		711976	0					
ANR	712101	PtrMemberAccess	NCALL ( node ) -> target		711976	0					
ANR	712102	CallExpression	NCALL ( node )		711976	0					
ANR	712103	Callee	NCALL		711976	0					
ANR	712104	Identifier	NCALL		711976	0					
ANR	712105	ArgumentList	node		711976	1					
ANR	712106	Argument	node		711976	0					
ANR	712107	Identifier	node		711976	0					
ANR	712108	Identifier	target		711976	1					
ANR	712109	IfStatement	if ( r != 0 )		711976	12					
ANR	712110	Condition	r != 0	2885:8:63965:63970	711976	0	True				
ANR	712111	EqualityExpression	r != 0		711976	0		!=			
ANR	712112	Identifier	r		711976	0					
ANR	712113	PrimaryExpression	0		711976	1					
ANR	712114	ExpressionStatement	SET_CALL_RECURSION ( node )	2885:16:63973:63997	711976	1	True				
ANR	712115	CallExpression	SET_CALL_RECURSION ( node )		711976	0					
ANR	712116	Callee	SET_CALL_RECURSION		711976	0					
ANR	712117	Identifier	SET_CALL_RECURSION		711976	0					
ANR	712118	ArgumentList	node		711976	1					
ANR	712119	Argument	node		711976	0					
ANR	712120	Identifier	node		711976	0					
ANR	712121	BreakStatement	break ;	2886:4:64003:64008	711976	13	True				
ANR	712122	Label	case NT_ENCLOSE :	2888:2:64013:64028	711976	14	True				
ANR	712123	Identifier	NT_ENCLOSE		711976	0					
ANR	712124	IfStatement	if ( IS_ENCLOSE_MARK2 ( NENCLOSE ( node ) ) )		711976	15					
ANR	712125	Condition	IS_ENCLOSE_MARK2 ( NENCLOSE ( node ) )	2889:8:64038:64069	711976	0	True				
ANR	712126	CallExpression	IS_ENCLOSE_MARK2 ( NENCLOSE ( node ) )		711976	0					
ANR	712127	Callee	IS_ENCLOSE_MARK2		711976	0					
ANR	712128	Identifier	IS_ENCLOSE_MARK2		711976	0					
ANR	712129	ArgumentList	NENCLOSE ( node )		711976	1					
ANR	712130	Argument	NENCLOSE ( node )		711976	0					
ANR	712131	CallExpression	NENCLOSE ( node )		711976	0					
ANR	712132	Callee	NENCLOSE		711976	0					
ANR	712133	Identifier	NENCLOSE		711976	0					
ANR	712134	ArgumentList	node		711976	1					
ANR	712135	Argument	node		711976	0					
ANR	712136	Identifier	node		711976	0					
ANR	712137	ReturnStatement	return 0 ;	2890:6:64078:64086	711976	1	True				
ANR	712138	PrimaryExpression	0		711976	0					
ANR	712139	ElseStatement	else		711976	0					
ANR	712140	IfStatement	if ( IS_ENCLOSE_MARK1 ( NENCLOSE ( node ) ) )		711976	0					
ANR	712141	Condition	IS_ENCLOSE_MARK1 ( NENCLOSE ( node ) )	2891:13:64101:64132	711976	0	True				
ANR	712142	CallExpression	IS_ENCLOSE_MARK1 ( NENCLOSE ( node ) )		711976	0					
ANR	712143	Callee	IS_ENCLOSE_MARK1		711976	0					
ANR	712144	Identifier	IS_ENCLOSE_MARK1		711976	0					
ANR	712145	ArgumentList	NENCLOSE ( node )		711976	1					
ANR	712146	Argument	NENCLOSE ( node )		711976	0					
ANR	712147	CallExpression	NENCLOSE ( node )		711976	0					
ANR	712148	Callee	NENCLOSE		711976	0					
ANR	712149	Identifier	NENCLOSE		711976	0					
ANR	712150	ArgumentList	node		711976	1					
ANR	712151	Argument	node		711976	0					
ANR	712152	Identifier	node		711976	0					
ANR	712153	ReturnStatement	return 1 ;	2892:6:64141:64149	711976	1	True				
ANR	712154	PrimaryExpression	1		711976	0					
ANR	712155	ElseStatement	else		711976	0					
ANR	712156	CompoundStatement		40:9:845:845	711976	0					
ANR	712157	ExpressionStatement	"SET_ENCLOSE_STATUS ( node , NST_MARK2 )"	2894:6:64184:64219	711976	0	True				
ANR	712158	CallExpression	"SET_ENCLOSE_STATUS ( node , NST_MARK2 )"		711976	0					
ANR	712159	Callee	SET_ENCLOSE_STATUS		711976	0					
ANR	712160	Identifier	SET_ENCLOSE_STATUS		711976	0					
ANR	712161	ArgumentList	node		711976	1					
ANR	712162	Argument	node		711976	0					
ANR	712163	Identifier	node		711976	0					
ANR	712164	Argument	NST_MARK2		711976	1					
ANR	712165	Identifier	NST_MARK2		711976	0					
ANR	712166	ExpressionStatement	r = subexp_recursive_check ( NENCLOSE ( node ) -> target )	2895:6:64227:64277	711976	1	True				
ANR	712167	AssignmentExpression	r = subexp_recursive_check ( NENCLOSE ( node ) -> target )		711976	0		=			
ANR	712168	Identifier	r		711976	0					
ANR	712169	CallExpression	subexp_recursive_check ( NENCLOSE ( node ) -> target )		711976	1					
ANR	712170	Callee	subexp_recursive_check		711976	0					
ANR	712171	Identifier	subexp_recursive_check		711976	0					
ANR	712172	ArgumentList	NENCLOSE ( node ) -> target		711976	1					
ANR	712173	Argument	NENCLOSE ( node ) -> target		711976	0					
ANR	712174	PtrMemberAccess	NENCLOSE ( node ) -> target		711976	0					
ANR	712175	CallExpression	NENCLOSE ( node )		711976	0					
ANR	712176	Callee	NENCLOSE		711976	0					
ANR	712177	Identifier	NENCLOSE		711976	0					
ANR	712178	ArgumentList	node		711976	1					
ANR	712179	Argument	node		711976	0					
ANR	712180	Identifier	node		711976	0					
ANR	712181	Identifier	target		711976	1					
ANR	712182	ExpressionStatement	"CLEAR_ENCLOSE_STATUS ( node , NST_MARK2 )"	2896:6:64285:64322	711976	2	True				
ANR	712183	CallExpression	"CLEAR_ENCLOSE_STATUS ( node , NST_MARK2 )"		711976	0					
ANR	712184	Callee	CLEAR_ENCLOSE_STATUS		711976	0					
ANR	712185	Identifier	CLEAR_ENCLOSE_STATUS		711976	0					
ANR	712186	ArgumentList	node		711976	1					
ANR	712187	Argument	node		711976	0					
ANR	712188	Identifier	node		711976	0					
ANR	712189	Argument	NST_MARK2		711976	1					
ANR	712190	Identifier	NST_MARK2		711976	0					
ANR	712191	BreakStatement	break ;	2898:4:64334:64339	711976	16	True				
ANR	712192	Label	default :	2900:2:64344:64351	711976	17	True				
ANR	712193	Identifier	default		711976	0					
ANR	712194	BreakStatement	break ;	2901:4:64357:64362	711976	18	True				
ANR	712195	ReturnStatement	return r ;	2904:2:64371:64379	711976	2	True				
ANR	712196	Identifier	r		711976	0					
ANR	712197	ReturnType	static int		711976	1					
ANR	712198	Identifier	subexp_recursive_check		711976	2					
ANR	712199	ParameterList	Node * node		711976	3					
ANR	712200	Parameter	Node * node	2853:23:63318:63327	711976	0	True				
ANR	712201	ParameterType	Node *		711976	0					
ANR	712202	Identifier	node		711976	1					
ANR	712203	CFGEntryNode	ENTRY		711976		True				
ANR	712204	CFGExitNode	EXIT		711976		True				
ANR	712205	Symbol	NQTFR ( node ) -> target		711976						
ANR	712206	Symbol	IS_NOT_NULL		711976						
ANR	712207	Symbol	NCAR		711976						
ANR	712208	Symbol	NCALL		711976						
ANR	712209	Symbol	* NENCLOSE		711976						
ANR	712210	Symbol	NCDR		711976						
ANR	712211	Symbol	an -> type		711976						
ANR	712212	Symbol	IS_ENCLOSE_MARK2		711976						
ANR	712213	Symbol	NST_MARK2		711976						
ANR	712214	Symbol	subexp_recursive_check		711976						
ANR	712215	Symbol	NQTFR		711976						
ANR	712216	Symbol	an		711976						
ANR	712217	Symbol	NENCLOSE ( node ) -> target		711976						
ANR	712218	Symbol	* an		711976						
ANR	712219	Symbol	node		711976						
ANR	712220	Symbol	r		711976						
ANR	712221	Symbol	* NQTFR		711976						
ANR	712222	Symbol	an -> target		711976						
ANR	712223	Symbol	NENCLOSE		711976						
ANR	712224	Symbol	IS_ENCLOSE_MARK1		711976						
ANR	712225	Symbol	NANCHOR		711976						
ANR	712226	Symbol	NCALL ( node ) -> target		711976						
ANR	712227	Symbol	NTYPE		711976						
ANR	712228	Symbol	* NCALL		711976						
ANR	712229	Function	subexp_recursive_check_trav	2908:0:64385:65813							
ANR	712230	FunctionDef	"subexp_recursive_check_trav (Node * node , ScanEnv * env)"		712229	0					
ANR	712231	CompoundStatement		2910:0:64450:65813	712229	0					
ANR	712232	Statement	define	2911:1:64453:64458	712229	0	True				
ANR	712233	Statement	FOUND_CALLED_NODE	2911:8:64460:64476	712229	1	True				
ANR	712234	Statement	1	2911:29:64481:64481	712229	2	True				
ANR	712235	IdentifierDeclStatement	int type ;	2913:2:64486:64494	712229	3	True				
ANR	712236	IdentifierDecl	type		712229	0					
ANR	712237	IdentifierDeclType	int		712229	0					
ANR	712238	Identifier	type		712229	1					
ANR	712239	IdentifierDeclStatement	int r = 0 ;	2914:2:64498:64507	712229	4	True				
ANR	712240	IdentifierDecl	r = 0		712229	0					
ANR	712241	IdentifierDeclType	int		712229	0					
ANR	712242	Identifier	r		712229	1					
ANR	712243	AssignmentExpression	r = 0		712229	2		=			
ANR	712244	Identifier	r		712229	0					
ANR	712245	PrimaryExpression	0		712229	1					
ANR	712246	ExpressionStatement	type = NTYPE ( node )	2916:2:64512:64530	712229	5	True				
ANR	712247	AssignmentExpression	type = NTYPE ( node )		712229	0		=			
ANR	712248	Identifier	type		712229	0					
ANR	712249	CallExpression	NTYPE ( node )		712229	1					
ANR	712250	Callee	NTYPE		712229	0					
ANR	712251	Identifier	NTYPE		712229	0					
ANR	712252	ArgumentList	node		712229	1					
ANR	712253	Argument	node		712229	0					
ANR	712254	Identifier	node		712229	0					
ANR	712255	SwitchStatement	switch ( type )		712229	6					
ANR	712256	Condition	type	2917:10:64542:64545	712229	0	True				
ANR	712257	Identifier	type		712229	0					
ANR	712258	CompoundStatement		8:16:97:97	712229	1					
ANR	712259	Label	case NT_LIST :	2918:2:64552:64564	712229	0	True				
ANR	712260	Identifier	NT_LIST		712229	0					
ANR	712261	Label	case NT_ALT :	2919:2:64568:64579	712229	1	True				
ANR	712262	Identifier	NT_ALT		712229	0					
ANR	712263	CompoundStatement		12:6:142:149	712229	2					
ANR	712264	IdentifierDeclStatement	int ret ;	2921:6:64593:64600	712229	0	True				
ANR	712265	IdentifierDecl	ret		712229	0					
ANR	712266	IdentifierDeclType	int		712229	0					
ANR	712267	Identifier	ret		712229	1					
ANR	712268	DoStatement	do		712229	1					
ANR	712269	CompoundStatement		13:9:160:160	712229	0					
ANR	712270	ExpressionStatement	"ret = subexp_recursive_check_trav ( NCAR ( node ) , env )"	2923:1:64614:64664	712229	0	True				
ANR	712271	AssignmentExpression	"ret = subexp_recursive_check_trav ( NCAR ( node ) , env )"		712229	0		=			
ANR	712272	Identifier	ret		712229	0					
ANR	712273	CallExpression	"subexp_recursive_check_trav ( NCAR ( node ) , env )"		712229	1					
ANR	712274	Callee	subexp_recursive_check_trav		712229	0					
ANR	712275	Identifier	subexp_recursive_check_trav		712229	0					
ANR	712276	ArgumentList	NCAR ( node )		712229	1					
ANR	712277	Argument	NCAR ( node )		712229	0					
ANR	712278	CallExpression	NCAR ( node )		712229	0					
ANR	712279	Callee	NCAR		712229	0					
ANR	712280	Identifier	NCAR		712229	0					
ANR	712281	ArgumentList	node		712229	1					
ANR	712282	Argument	node		712229	0					
ANR	712283	Identifier	node		712229	0					
ANR	712284	Argument	env		712229	1					
ANR	712285	Identifier	env		712229	0					
ANR	712286	IfStatement	if ( ret == FOUND_CALLED_NODE )		712229	1					
ANR	712287	Condition	ret == FOUND_CALLED_NODE	2924:5:64671:64694	712229	0	True				
ANR	712288	EqualityExpression	ret == FOUND_CALLED_NODE		712229	0		==			
ANR	712289	Identifier	ret		712229	0					
ANR	712290	Identifier	FOUND_CALLED_NODE		712229	1					
ANR	712291	ExpressionStatement	r = FOUND_CALLED_NODE	2924:31:64697:64718	712229	1	True				
ANR	712292	AssignmentExpression	r = FOUND_CALLED_NODE		712229	0		=			
ANR	712293	Identifier	r		712229	0					
ANR	712294	Identifier	FOUND_CALLED_NODE		712229	1					
ANR	712295	ElseStatement	else		712229	0					
ANR	712296	IfStatement	if ( ret < 0 )		712229	0					
ANR	712297	Condition	ret < 0	2925:10:64730:64736	712229	0	True				
ANR	712298	RelationalExpression	ret < 0		712229	0		<			
ANR	712299	Identifier	ret		712229	0					
ANR	712300	PrimaryExpression	0		712229	1					
ANR	712301	ReturnStatement	return ret ;	2925:19:64739:64749	712229	1	True				
ANR	712302	Identifier	ret		712229	0					
ANR	712303	Condition	IS_NOT_NULL ( node = NCDR ( node ) )	2926:15:64766:64795	712229	1	True				
ANR	712304	CallExpression	IS_NOT_NULL ( node = NCDR ( node ) )		712229	0					
ANR	712305	Callee	IS_NOT_NULL		712229	0					
ANR	712306	Identifier	IS_NOT_NULL		712229	0					
ANR	712307	ArgumentList	node = NCDR ( node )		712229	1					
ANR	712308	Argument	node = NCDR ( node )		712229	0					
ANR	712309	AssignmentExpression	node = NCDR ( node )		712229	0		=			
ANR	712310	Identifier	node		712229	0					
ANR	712311	CallExpression	NCDR ( node )		712229	1					
ANR	712312	Callee	NCDR		712229	0					
ANR	712313	Identifier	NCDR		712229	0					
ANR	712314	ArgumentList	node		712229	1					
ANR	712315	Argument	node		712229	0					
ANR	712316	Identifier	node		712229	0					
ANR	712317	BreakStatement	break ;	2928:4:64809:64814	712229	3	True				
ANR	712318	Label	case NT_QTFR :	2930:2:64819:64831	712229	4	True				
ANR	712319	Identifier	NT_QTFR		712229	0					
ANR	712320	ExpressionStatement	"r = subexp_recursive_check_trav ( NQTFR ( node ) -> target , env )"	2931:4:64837:64894	712229	5	True				
ANR	712321	AssignmentExpression	"r = subexp_recursive_check_trav ( NQTFR ( node ) -> target , env )"		712229	0		=			
ANR	712322	Identifier	r		712229	0					
ANR	712323	CallExpression	"subexp_recursive_check_trav ( NQTFR ( node ) -> target , env )"		712229	1					
ANR	712324	Callee	subexp_recursive_check_trav		712229	0					
ANR	712325	Identifier	subexp_recursive_check_trav		712229	0					
ANR	712326	ArgumentList	NQTFR ( node ) -> target		712229	1					
ANR	712327	Argument	NQTFR ( node ) -> target		712229	0					
ANR	712328	PtrMemberAccess	NQTFR ( node ) -> target		712229	0					
ANR	712329	CallExpression	NQTFR ( node )		712229	0					
ANR	712330	Callee	NQTFR		712229	0					
ANR	712331	Identifier	NQTFR		712229	0					
ANR	712332	ArgumentList	node		712229	1					
ANR	712333	Argument	node		712229	0					
ANR	712334	Identifier	node		712229	0					
ANR	712335	Identifier	target		712229	1					
ANR	712336	Argument	env		712229	1					
ANR	712337	Identifier	env		712229	0					
ANR	712338	IfStatement	if ( NQTFR ( node ) -> upper == 0 )		712229	6					
ANR	712339	Condition	NQTFR ( node ) -> upper == 0	2932:8:64904:64926	712229	0	True				
ANR	712340	EqualityExpression	NQTFR ( node ) -> upper == 0		712229	0		==			
ANR	712341	PtrMemberAccess	NQTFR ( node ) -> upper		712229	0					
ANR	712342	CallExpression	NQTFR ( node )		712229	0					
ANR	712343	Callee	NQTFR		712229	0					
ANR	712344	Identifier	NQTFR		712229	0					
ANR	712345	ArgumentList	node		712229	1					
ANR	712346	Argument	node		712229	0					
ANR	712347	Identifier	node		712229	0					
ANR	712348	Identifier	upper		712229	1					
ANR	712349	PrimaryExpression	0		712229	1					
ANR	712350	CompoundStatement		23:33:478:478	712229	1					
ANR	712351	IfStatement	if ( r == FOUND_CALLED_NODE )		712229	0					
ANR	712352	Condition	r == FOUND_CALLED_NODE	2933:10:64941:64962	712229	0	True				
ANR	712353	EqualityExpression	r == FOUND_CALLED_NODE		712229	0		==			
ANR	712354	Identifier	r		712229	0					
ANR	712355	Identifier	FOUND_CALLED_NODE		712229	1					
ANR	712356	ExpressionStatement	NQTFR ( node ) -> is_refered = 1	2934:1:64966:64993	712229	1	True				
ANR	712357	AssignmentExpression	NQTFR ( node ) -> is_refered = 1		712229	0		=			
ANR	712358	PtrMemberAccess	NQTFR ( node ) -> is_refered		712229	0					
ANR	712359	CallExpression	NQTFR ( node )		712229	0					
ANR	712360	Callee	NQTFR		712229	0					
ANR	712361	Identifier	NQTFR		712229	0					
ANR	712362	ArgumentList	node		712229	1					
ANR	712363	Argument	node		712229	0					
ANR	712364	Identifier	node		712229	0					
ANR	712365	Identifier	is_refered		712229	1					
ANR	712366	PrimaryExpression	1		712229	1					
ANR	712367	BreakStatement	break ;	2936:4:65005:65010	712229	7	True				
ANR	712368	Label	case NT_ANCHOR :	2938:2:65015:65029	712229	8	True				
ANR	712369	Identifier	NT_ANCHOR		712229	0					
ANR	712370	CompoundStatement		31:6:592:622	712229	9					
ANR	712371	IdentifierDeclStatement	AnchorNode * an = NANCHOR ( node ) ;	2940:6:65043:65073	712229	0	True				
ANR	712372	IdentifierDecl	* an = NANCHOR ( node )		712229	0					
ANR	712373	IdentifierDeclType	AnchorNode *		712229	0					
ANR	712374	Identifier	an		712229	1					
ANR	712375	AssignmentExpression	* an = NANCHOR ( node )		712229	2		=			
ANR	712376	Identifier	an		712229	0					
ANR	712377	CallExpression	NANCHOR ( node )		712229	1					
ANR	712378	Callee	NANCHOR		712229	0					
ANR	712379	Identifier	NANCHOR		712229	0					
ANR	712380	ArgumentList	node		712229	1					
ANR	712381	Argument	node		712229	0					
ANR	712382	Identifier	node		712229	0					
ANR	712383	SwitchStatement	switch ( an -> type )		712229	1					
ANR	712384	Condition	an -> type	2941:14:65089:65096	712229	0	True				
ANR	712385	PtrMemberAccess	an -> type		712229	0					
ANR	712386	Identifier	an		712229	0					
ANR	712387	Identifier	type		712229	1					
ANR	712388	CompoundStatement		32:24:648:648	712229	1					
ANR	712389	Label	case ANCHOR_PREC_READ :	2942:6:65107:65128	712229	0	True				
ANR	712390	Identifier	ANCHOR_PREC_READ		712229	0					
ANR	712391	Label	case ANCHOR_PREC_READ_NOT :	2943:6:65136:65161	712229	1	True				
ANR	712392	Identifier	ANCHOR_PREC_READ_NOT		712229	0					
ANR	712393	Label	case ANCHOR_LOOK_BEHIND :	2944:6:65169:65192	712229	2	True				
ANR	712394	Identifier	ANCHOR_LOOK_BEHIND		712229	0					
ANR	712395	Label	case ANCHOR_LOOK_BEHIND_NOT :	2945:6:65200:65227	712229	3	True				
ANR	712396	Identifier	ANCHOR_LOOK_BEHIND_NOT		712229	0					
ANR	712397	ExpressionStatement	"r = subexp_recursive_check_trav ( an -> target , env )"	2946:1:65230:65278	712229	4	True				
ANR	712398	AssignmentExpression	"r = subexp_recursive_check_trav ( an -> target , env )"		712229	0		=			
ANR	712399	Identifier	r		712229	0					
ANR	712400	CallExpression	"subexp_recursive_check_trav ( an -> target , env )"		712229	1					
ANR	712401	Callee	subexp_recursive_check_trav		712229	0					
ANR	712402	Identifier	subexp_recursive_check_trav		712229	0					
ANR	712403	ArgumentList	an -> target		712229	1					
ANR	712404	Argument	an -> target		712229	0					
ANR	712405	PtrMemberAccess	an -> target		712229	0					
ANR	712406	Identifier	an		712229	0					
ANR	712407	Identifier	target		712229	1					
ANR	712408	Argument	env		712229	1					
ANR	712409	Identifier	env		712229	0					
ANR	712410	BreakStatement	break ;	2947:1:65281:65286	712229	5	True				
ANR	712411	BreakStatement	break ;	2950:4:65306:65311	712229	10	True				
ANR	712412	Label	case NT_ENCLOSE :	2952:2:65316:65331	712229	11	True				
ANR	712413	Identifier	NT_ENCLOSE		712229	0					
ANR	712414	CompoundStatement		45:6:894:926	712229	12					
ANR	712415	IdentifierDeclStatement	EncloseNode * en = NENCLOSE ( node ) ;	2954:6:65345:65377	712229	0	True				
ANR	712416	IdentifierDecl	* en = NENCLOSE ( node )		712229	0					
ANR	712417	IdentifierDeclType	EncloseNode *		712229	0					
ANR	712418	Identifier	en		712229	1					
ANR	712419	AssignmentExpression	* en = NENCLOSE ( node )		712229	2		=			
ANR	712420	Identifier	en		712229	0					
ANR	712421	CallExpression	NENCLOSE ( node )		712229	1					
ANR	712422	Callee	NENCLOSE		712229	0					
ANR	712423	Identifier	NENCLOSE		712229	0					
ANR	712424	ArgumentList	node		712229	1					
ANR	712425	Argument	node		712229	0					
ANR	712426	Identifier	node		712229	0					
ANR	712427	IfStatement	if ( ! IS_ENCLOSE_RECURSION ( en ) )		712229	1					
ANR	712428	Condition	! IS_ENCLOSE_RECURSION ( en )	2956:10:65390:65415	712229	0	True				
ANR	712429	UnaryOperationExpression	! IS_ENCLOSE_RECURSION ( en )		712229	0					
ANR	712430	UnaryOperator	!		712229	0					
ANR	712431	CallExpression	IS_ENCLOSE_RECURSION ( en )		712229	1					
ANR	712432	Callee	IS_ENCLOSE_RECURSION		712229	0					
ANR	712433	Identifier	IS_ENCLOSE_RECURSION		712229	0					
ANR	712434	ArgumentList	en		712229	1					
ANR	712435	Argument	en		712229	0					
ANR	712436	Identifier	en		712229	0					
ANR	712437	CompoundStatement		47:38:967:967	712229	1					
ANR	712438	IfStatement	if ( IS_ENCLOSE_CALLED ( en ) )		712229	0					
ANR	712439	Condition	IS_ENCLOSE_CALLED ( en )	2957:5:65425:65445	712229	0	True				
ANR	712440	CallExpression	IS_ENCLOSE_CALLED ( en )		712229	0					
ANR	712441	Callee	IS_ENCLOSE_CALLED		712229	0					
ANR	712442	Identifier	IS_ENCLOSE_CALLED		712229	0					
ANR	712443	ArgumentList	en		712229	1					
ANR	712444	Argument	en		712229	0					
ANR	712445	Identifier	en		712229	0					
ANR	712446	CompoundStatement		48:28:997:997	712229	1					
ANR	712447	ExpressionStatement	"SET_ENCLOSE_STATUS ( node , NST_MARK1 )"	2958:3:65453:65488	712229	0	True				
ANR	712448	CallExpression	"SET_ENCLOSE_STATUS ( node , NST_MARK1 )"		712229	0					
ANR	712449	Callee	SET_ENCLOSE_STATUS		712229	0					
ANR	712450	Identifier	SET_ENCLOSE_STATUS		712229	0					
ANR	712451	ArgumentList	node		712229	1					
ANR	712452	Argument	node		712229	0					
ANR	712453	Identifier	node		712229	0					
ANR	712454	Argument	NST_MARK1		712229	1					
ANR	712455	Identifier	NST_MARK1		712229	0					
ANR	712456	ExpressionStatement	r = subexp_recursive_check ( en -> target )	2959:3:65493:65531	712229	1	True				
ANR	712457	AssignmentExpression	r = subexp_recursive_check ( en -> target )		712229	0		=			
ANR	712458	Identifier	r		712229	0					
ANR	712459	CallExpression	subexp_recursive_check ( en -> target )		712229	1					
ANR	712460	Callee	subexp_recursive_check		712229	0					
ANR	712461	Identifier	subexp_recursive_check		712229	0					
ANR	712462	ArgumentList	en -> target		712229	1					
ANR	712463	Argument	en -> target		712229	0					
ANR	712464	PtrMemberAccess	en -> target		712229	0					
ANR	712465	Identifier	en		712229	0					
ANR	712466	Identifier	target		712229	1					
ANR	712467	IfStatement	if ( r != 0 )		712229	2					
ANR	712468	Condition	r != 0	2960:7:65540:65545	712229	0	True				
ANR	712469	EqualityExpression	r != 0		712229	0		!=			
ANR	712470	Identifier	r		712229	0					
ANR	712471	PrimaryExpression	0		712229	1					
ANR	712472	ExpressionStatement	"SET_ENCLOSE_STATUS ( node , NST_RECURSION )"	2960:15:65548:65587	712229	1	True				
ANR	712473	CallExpression	"SET_ENCLOSE_STATUS ( node , NST_RECURSION )"		712229	0					
ANR	712474	Callee	SET_ENCLOSE_STATUS		712229	0					
ANR	712475	Identifier	SET_ENCLOSE_STATUS		712229	0					
ANR	712476	ArgumentList	node		712229	1					
ANR	712477	Argument	node		712229	0					
ANR	712478	Identifier	node		712229	0					
ANR	712479	Argument	NST_RECURSION		712229	1					
ANR	712480	Identifier	NST_RECURSION		712229	0					
ANR	712481	ExpressionStatement	"CLEAR_ENCLOSE_STATUS ( node , NST_MARK1 )"	2961:3:65592:65629	712229	3	True				
ANR	712482	CallExpression	"CLEAR_ENCLOSE_STATUS ( node , NST_MARK1 )"		712229	0					
ANR	712483	Callee	CLEAR_ENCLOSE_STATUS		712229	0					
ANR	712484	Identifier	CLEAR_ENCLOSE_STATUS		712229	0					
ANR	712485	ArgumentList	node		712229	1					
ANR	712486	Argument	node		712229	0					
ANR	712487	Identifier	node		712229	0					
ANR	712488	Argument	NST_MARK1		712229	1					
ANR	712489	Identifier	NST_MARK1		712229	0					
ANR	712490	ExpressionStatement	"r = subexp_recursive_check_trav ( en -> target , env )"	2964:6:65648:65696	712229	2	True				
ANR	712491	AssignmentExpression	"r = subexp_recursive_check_trav ( en -> target , env )"		712229	0		=			
ANR	712492	Identifier	r		712229	0					
ANR	712493	CallExpression	"subexp_recursive_check_trav ( en -> target , env )"		712229	1					
ANR	712494	Callee	subexp_recursive_check_trav		712229	0					
ANR	712495	Identifier	subexp_recursive_check_trav		712229	0					
ANR	712496	ArgumentList	en -> target		712229	1					
ANR	712497	Argument	en -> target		712229	0					
ANR	712498	PtrMemberAccess	en -> target		712229	0					
ANR	712499	Identifier	en		712229	0					
ANR	712500	Identifier	target		712229	1					
ANR	712501	Argument	env		712229	1					
ANR	712502	Identifier	env		712229	0					
ANR	712503	IfStatement	if ( IS_ENCLOSE_CALLED ( en ) )		712229	3					
ANR	712504	Condition	IS_ENCLOSE_CALLED ( en )	2965:10:65708:65728	712229	0	True				
ANR	712505	CallExpression	IS_ENCLOSE_CALLED ( en )		712229	0					
ANR	712506	Callee	IS_ENCLOSE_CALLED		712229	0					
ANR	712507	Identifier	IS_ENCLOSE_CALLED		712229	0					
ANR	712508	ArgumentList	en		712229	1					
ANR	712509	Argument	en		712229	0					
ANR	712510	Identifier	en		712229	0					
ANR	712511	ExpressionStatement	r |= FOUND_CALLED_NODE	2966:1:65732:65754	712229	1	True				
ANR	712512	AssignmentExpression	r |= FOUND_CALLED_NODE		712229	0		|=			
ANR	712513	Identifier	r		712229	0					
ANR	712514	Identifier	FOUND_CALLED_NODE		712229	1					
ANR	712515	BreakStatement	break ;	2968:4:65766:65771	712229	13	True				
ANR	712516	Label	default :	2970:2:65776:65783	712229	14	True				
ANR	712517	Identifier	default		712229	0					
ANR	712518	BreakStatement	break ;	2971:4:65789:65794	712229	15	True				
ANR	712519	ReturnStatement	return r ;	2974:2:65803:65811	712229	7	True				
ANR	712520	Identifier	r		712229	0					
ANR	712521	ReturnType	static int		712229	1					
ANR	712522	Identifier	subexp_recursive_check_trav		712229	2					
ANR	712523	ParameterList	"Node * node , ScanEnv * env"		712229	3					
ANR	712524	Parameter	Node * node	2909:28:64424:64433	712229	0	True				
ANR	712525	ParameterType	Node *		712229	0					
ANR	712526	Identifier	node		712229	1					
ANR	712527	Parameter	ScanEnv * env	2909:40:64436:64447	712229	1	True				
ANR	712528	ParameterType	ScanEnv *		712229	0					
ANR	712529	Identifier	env		712229	1					
ANR	712530	CFGEntryNode	ENTRY		712229		True				
ANR	712531	CFGExitNode	EXIT		712229		True				
ANR	712532	Symbol	NQTFR ( node ) -> target		712229						
ANR	712533	Symbol	IS_NOT_NULL		712229						
ANR	712534	Symbol	NCAR		712229						
ANR	712535	Symbol	an -> type		712229						
ANR	712536	Symbol	type		712229						
ANR	712537	Symbol	NQTFR		712229						
ANR	712538	Symbol	* en		712229						
ANR	712539	Symbol	subexp_recursive_check		712229						
ANR	712540	Symbol	* NQTFR		712229						
ANR	712541	Symbol	NENCLOSE		712229						
ANR	712542	Symbol	NST_RECURSION		712229						
ANR	712543	Symbol	FOUND_CALLED_NODE		712229						
ANR	712544	Symbol	ret		712229						
ANR	712545	Symbol	NQTFR ( node ) -> upper		712229						
ANR	712546	Symbol	NCDR		712229						
ANR	712547	Symbol	IS_ENCLOSE_CALLED		712229						
ANR	712548	Symbol	en		712229						
ANR	712549	Symbol	NQTFR ( node ) -> is_refered		712229						
ANR	712550	Symbol	NST_MARK1		712229						
ANR	712551	Symbol	env		712229						
ANR	712552	Symbol	an		712229						
ANR	712553	Symbol	* an		712229						
ANR	712554	Symbol	node		712229						
ANR	712555	Symbol	r		712229						
ANR	712556	Symbol	an -> target		712229						
ANR	712557	Symbol	en -> target		712229						
ANR	712558	Symbol	NANCHOR		712229						
ANR	712559	Symbol	NTYPE		712229						
ANR	712560	Symbol	IS_ENCLOSE_RECURSION		712229						
ANR	712561	Symbol	subexp_recursive_check_trav		712229						
ANR	712562	Function	setup_subexp_call	2977:0:65816:68295							
ANR	712563	FunctionDef	"setup_subexp_call (Node * node , ScanEnv * env)"		712562	0					
ANR	712564	CompoundStatement		2979:0:65871:68295	712562	0					
ANR	712565	IdentifierDeclStatement	int type ;	2980:2:65875:65883	712562	0	True				
ANR	712566	IdentifierDecl	type		712562	0					
ANR	712567	IdentifierDeclType	int		712562	0					
ANR	712568	Identifier	type		712562	1					
ANR	712569	IdentifierDeclStatement	int r = 0 ;	2981:2:65887:65896	712562	1	True				
ANR	712570	IdentifierDecl	r = 0		712562	0					
ANR	712571	IdentifierDeclType	int		712562	0					
ANR	712572	Identifier	r		712562	1					
ANR	712573	AssignmentExpression	r = 0		712562	2		=			
ANR	712574	Identifier	r		712562	0					
ANR	712575	PrimaryExpression	0		712562	1					
ANR	712576	ExpressionStatement	type = NTYPE ( node )	2983:2:65901:65919	712562	2	True				
ANR	712577	AssignmentExpression	type = NTYPE ( node )		712562	0		=			
ANR	712578	Identifier	type		712562	0					
ANR	712579	CallExpression	NTYPE ( node )		712562	1					
ANR	712580	Callee	NTYPE		712562	0					
ANR	712581	Identifier	NTYPE		712562	0					
ANR	712582	ArgumentList	node		712562	1					
ANR	712583	Argument	node		712562	0					
ANR	712584	Identifier	node		712562	0					
ANR	712585	SwitchStatement	switch ( type )		712562	3					
ANR	712586	Condition	type	2984:10:65931:65934	712562	0	True				
ANR	712587	Identifier	type		712562	0					
ANR	712588	CompoundStatement		6:16:65:65	712562	1					
ANR	712589	Label	case NT_LIST :	2985:2:65941:65953	712562	0	True				
ANR	712590	Identifier	NT_LIST		712562	0					
ANR	712591	DoStatement	do		712562	1					
ANR	712592	CompoundStatement		8:7:90:90	712562	0					
ANR	712593	ExpressionStatement	"r = setup_subexp_call ( NCAR ( node ) , env )"	2987:6:65970:66008	712562	0	True				
ANR	712594	AssignmentExpression	"r = setup_subexp_call ( NCAR ( node ) , env )"		712562	0		=			
ANR	712595	Identifier	r		712562	0					
ANR	712596	CallExpression	"setup_subexp_call ( NCAR ( node ) , env )"		712562	1					
ANR	712597	Callee	setup_subexp_call		712562	0					
ANR	712598	Identifier	setup_subexp_call		712562	0					
ANR	712599	ArgumentList	NCAR ( node )		712562	1					
ANR	712600	Argument	NCAR ( node )		712562	0					
ANR	712601	CallExpression	NCAR ( node )		712562	0					
ANR	712602	Callee	NCAR		712562	0					
ANR	712603	Identifier	NCAR		712562	0					
ANR	712604	ArgumentList	node		712562	1					
ANR	712605	Argument	node		712562	0					
ANR	712606	Identifier	node		712562	0					
ANR	712607	Argument	env		712562	1					
ANR	712608	Identifier	env		712562	0					
ANR	712609	Condition	r == 0 && IS_NOT_NULL ( node = NCDR ( node ) )	2988:13:66023:66062	712562	1	True				
ANR	712610	AndExpression	r == 0 && IS_NOT_NULL ( node = NCDR ( node ) )		712562	0		&&			
ANR	712611	EqualityExpression	r == 0		712562	0		==			
ANR	712612	Identifier	r		712562	0					
ANR	712613	PrimaryExpression	0		712562	1					
ANR	712614	CallExpression	IS_NOT_NULL ( node = NCDR ( node ) )		712562	1					
ANR	712615	Callee	IS_NOT_NULL		712562	0					
ANR	712616	Identifier	IS_NOT_NULL		712562	0					
ANR	712617	ArgumentList	node = NCDR ( node )		712562	1					
ANR	712618	Argument	node = NCDR ( node )		712562	0					
ANR	712619	AssignmentExpression	node = NCDR ( node )		712562	0		=			
ANR	712620	Identifier	node		712562	0					
ANR	712621	CallExpression	NCDR ( node )		712562	1					
ANR	712622	Callee	NCDR		712562	0					
ANR	712623	Identifier	NCDR		712562	0					
ANR	712624	ArgumentList	node		712562	1					
ANR	712625	Argument	node		712562	0					
ANR	712626	Identifier	node		712562	0					
ANR	712627	BreakStatement	break ;	2989:4:66070:66075	712562	2	True				
ANR	712628	Label	case NT_ALT :	2991:2:66080:66091	712562	3	True				
ANR	712629	Identifier	NT_ALT		712562	0					
ANR	712630	DoStatement	do		712562	4					
ANR	712631	CompoundStatement		14:7:228:228	712562	0					
ANR	712632	ExpressionStatement	"r = setup_subexp_call ( NCAR ( node ) , env )"	2993:6:66108:66146	712562	0	True				
ANR	712633	AssignmentExpression	"r = setup_subexp_call ( NCAR ( node ) , env )"		712562	0		=			
ANR	712634	Identifier	r		712562	0					
ANR	712635	CallExpression	"setup_subexp_call ( NCAR ( node ) , env )"		712562	1					
ANR	712636	Callee	setup_subexp_call		712562	0					
ANR	712637	Identifier	setup_subexp_call		712562	0					
ANR	712638	ArgumentList	NCAR ( node )		712562	1					
ANR	712639	Argument	NCAR ( node )		712562	0					
ANR	712640	CallExpression	NCAR ( node )		712562	0					
ANR	712641	Callee	NCAR		712562	0					
ANR	712642	Identifier	NCAR		712562	0					
ANR	712643	ArgumentList	node		712562	1					
ANR	712644	Argument	node		712562	0					
ANR	712645	Identifier	node		712562	0					
ANR	712646	Argument	env		712562	1					
ANR	712647	Identifier	env		712562	0					
ANR	712648	Condition	r == 0 && IS_NOT_NULL ( node = NCDR ( node ) )	2994:13:66161:66200	712562	1	True				
ANR	712649	AndExpression	r == 0 && IS_NOT_NULL ( node = NCDR ( node ) )		712562	0		&&			
ANR	712650	EqualityExpression	r == 0		712562	0		==			
ANR	712651	Identifier	r		712562	0					
ANR	712652	PrimaryExpression	0		712562	1					
ANR	712653	CallExpression	IS_NOT_NULL ( node = NCDR ( node ) )		712562	1					
ANR	712654	Callee	IS_NOT_NULL		712562	0					
ANR	712655	Identifier	IS_NOT_NULL		712562	0					
ANR	712656	ArgumentList	node = NCDR ( node )		712562	1					
ANR	712657	Argument	node = NCDR ( node )		712562	0					
ANR	712658	AssignmentExpression	node = NCDR ( node )		712562	0		=			
ANR	712659	Identifier	node		712562	0					
ANR	712660	CallExpression	NCDR ( node )		712562	1					
ANR	712661	Callee	NCDR		712562	0					
ANR	712662	Identifier	NCDR		712562	0					
ANR	712663	ArgumentList	node		712562	1					
ANR	712664	Argument	node		712562	0					
ANR	712665	Identifier	node		712562	0					
ANR	712666	BreakStatement	break ;	2995:4:66208:66213	712562	5	True				
ANR	712667	Label	case NT_QTFR :	2997:2:66218:66230	712562	6	True				
ANR	712668	Identifier	NT_QTFR		712562	0					
ANR	712669	ExpressionStatement	"r = setup_subexp_call ( NQTFR ( node ) -> target , env )"	2998:4:66236:66283	712562	7	True				
ANR	712670	AssignmentExpression	"r = setup_subexp_call ( NQTFR ( node ) -> target , env )"		712562	0		=			
ANR	712671	Identifier	r		712562	0					
ANR	712672	CallExpression	"setup_subexp_call ( NQTFR ( node ) -> target , env )"		712562	1					
ANR	712673	Callee	setup_subexp_call		712562	0					
ANR	712674	Identifier	setup_subexp_call		712562	0					
ANR	712675	ArgumentList	NQTFR ( node ) -> target		712562	1					
ANR	712676	Argument	NQTFR ( node ) -> target		712562	0					
ANR	712677	PtrMemberAccess	NQTFR ( node ) -> target		712562	0					
ANR	712678	CallExpression	NQTFR ( node )		712562	0					
ANR	712679	Callee	NQTFR		712562	0					
ANR	712680	Identifier	NQTFR		712562	0					
ANR	712681	ArgumentList	node		712562	1					
ANR	712682	Argument	node		712562	0					
ANR	712683	Identifier	node		712562	0					
ANR	712684	Identifier	target		712562	1					
ANR	712685	Argument	env		712562	1					
ANR	712686	Identifier	env		712562	0					
ANR	712687	BreakStatement	break ;	2999:4:66289:66294	712562	8	True				
ANR	712688	Label	case NT_ENCLOSE :	3000:2:66298:66313	712562	9	True				
ANR	712689	Identifier	NT_ENCLOSE		712562	0					
ANR	712690	ExpressionStatement	"r = setup_subexp_call ( NENCLOSE ( node ) -> target , env )"	3001:4:66319:66369	712562	10	True				
ANR	712691	AssignmentExpression	"r = setup_subexp_call ( NENCLOSE ( node ) -> target , env )"		712562	0		=			
ANR	712692	Identifier	r		712562	0					
ANR	712693	CallExpression	"setup_subexp_call ( NENCLOSE ( node ) -> target , env )"		712562	1					
ANR	712694	Callee	setup_subexp_call		712562	0					
ANR	712695	Identifier	setup_subexp_call		712562	0					
ANR	712696	ArgumentList	NENCLOSE ( node ) -> target		712562	1					
ANR	712697	Argument	NENCLOSE ( node ) -> target		712562	0					
ANR	712698	PtrMemberAccess	NENCLOSE ( node ) -> target		712562	0					
ANR	712699	CallExpression	NENCLOSE ( node )		712562	0					
ANR	712700	Callee	NENCLOSE		712562	0					
ANR	712701	Identifier	NENCLOSE		712562	0					
ANR	712702	ArgumentList	node		712562	1					
ANR	712703	Argument	node		712562	0					
ANR	712704	Identifier	node		712562	0					
ANR	712705	Identifier	target		712562	1					
ANR	712706	Argument	env		712562	1					
ANR	712707	Identifier	env		712562	0					
ANR	712708	BreakStatement	break ;	3002:4:66375:66380	712562	11	True				
ANR	712709	Label	case NT_CALL :	3004:2:66385:66397	712562	12	True				
ANR	712710	Identifier	NT_CALL		712562	0					
ANR	712711	CompoundStatement		29:6:573:610	712562	13					
ANR	712712	IdentifierDeclStatement	CallNode * cn = NCALL ( node ) ;	3006:6:66411:66437	712562	0	True				
ANR	712713	IdentifierDecl	* cn = NCALL ( node )		712562	0					
ANR	712714	IdentifierDeclType	CallNode *		712562	0					
ANR	712715	Identifier	cn		712562	1					
ANR	712716	AssignmentExpression	* cn = NCALL ( node )		712562	2		=			
ANR	712717	Identifier	cn		712562	0					
ANR	712718	CallExpression	NCALL ( node )		712562	1					
ANR	712719	Callee	NCALL		712562	0					
ANR	712720	Identifier	NCALL		712562	0					
ANR	712721	ArgumentList	node		712562	1					
ANR	712722	Argument	node		712562	0					
ANR	712723	Identifier	node		712562	0					
ANR	712724	IdentifierDeclStatement	Node * * nodes = SCANENV_MEM_NODES ( env ) ;	3007:6:66445:66482	712562	1	True				
ANR	712725	IdentifierDecl	* * nodes = SCANENV_MEM_NODES ( env )		712562	0					
ANR	712726	IdentifierDeclType	Node * *		712562	0					
ANR	712727	Identifier	nodes		712562	1					
ANR	712728	AssignmentExpression	* * nodes = SCANENV_MEM_NODES ( env )		712562	2		=			
ANR	712729	Identifier	nodes		712562	0					
ANR	712730	CallExpression	SCANENV_MEM_NODES ( env )		712562	1					
ANR	712731	Callee	SCANENV_MEM_NODES		712562	0					
ANR	712732	Identifier	SCANENV_MEM_NODES		712562	0					
ANR	712733	ArgumentList	env		712562	1					
ANR	712734	Argument	env		712562	0					
ANR	712735	Identifier	env		712562	0					
ANR	712736	IfStatement	if ( cn -> group_num != 0 )		712562	2					
ANR	712737	Condition	cn -> group_num != 0	3009:10:66495:66512	712562	0	True				
ANR	712738	EqualityExpression	cn -> group_num != 0		712562	0		!=			
ANR	712739	PtrMemberAccess	cn -> group_num		712562	0					
ANR	712740	Identifier	cn		712562	0					
ANR	712741	Identifier	group_num		712562	1					
ANR	712742	PrimaryExpression	0		712562	1					
ANR	712743	CompoundStatement		32:1:646:670	712562	1					
ANR	712744	IdentifierDeclStatement	int gnum = cn -> group_num ;	3010:1:66518:66542	712562	0	True				
ANR	712745	IdentifierDecl	gnum = cn -> group_num		712562	0					
ANR	712746	IdentifierDeclType	int		712562	0					
ANR	712747	Identifier	gnum		712562	1					
ANR	712748	AssignmentExpression	gnum = cn -> group_num		712562	2		=			
ANR	712749	Identifier	gnum		712562	0					
ANR	712750	PtrMemberAccess	cn -> group_num		712562	1					
ANR	712751	Identifier	cn		712562	0					
ANR	712752	Identifier	group_num		712562	1					
ANR	712753	IfStatement	"if ( env -> num_named > 0 && IS_SYNTAX_BV ( env -> syntax , ONIG_SYN_CAPTURE_ONLY_NAMED_GROUP ) && ! ONIG_IS_OPTION_ON ( env -> option , ONIG_OPTION_CAPTURE_GROUP ) )"		712562	1					
ANR	712754	Condition	"env -> num_named > 0 && IS_SYNTAX_BV ( env -> syntax , ONIG_SYN_CAPTURE_ONLY_NAMED_GROUP ) && ! ONIG_IS_OPTION_ON ( env -> option , ONIG_OPTION_CAPTURE_GROUP )"	3013:5:66573:66726	712562	0	True				
ANR	712755	AndExpression	"env -> num_named > 0 && IS_SYNTAX_BV ( env -> syntax , ONIG_SYN_CAPTURE_ONLY_NAMED_GROUP ) && ! ONIG_IS_OPTION_ON ( env -> option , ONIG_OPTION_CAPTURE_GROUP )"		712562	0		&&			
ANR	712756	RelationalExpression	env -> num_named > 0		712562	0		>			
ANR	712757	PtrMemberAccess	env -> num_named		712562	0					
ANR	712758	Identifier	env		712562	0					
ANR	712759	Identifier	num_named		712562	1					
ANR	712760	PrimaryExpression	0		712562	1					
ANR	712761	AndExpression	"IS_SYNTAX_BV ( env -> syntax , ONIG_SYN_CAPTURE_ONLY_NAMED_GROUP ) && ! ONIG_IS_OPTION_ON ( env -> option , ONIG_OPTION_CAPTURE_GROUP )"		712562	1		&&			
ANR	712762	CallExpression	"IS_SYNTAX_BV ( env -> syntax , ONIG_SYN_CAPTURE_ONLY_NAMED_GROUP )"		712562	0					
ANR	712763	Callee	IS_SYNTAX_BV		712562	0					
ANR	712764	Identifier	IS_SYNTAX_BV		712562	0					
ANR	712765	ArgumentList	env -> syntax		712562	1					
ANR	712766	Argument	env -> syntax		712562	0					
ANR	712767	PtrMemberAccess	env -> syntax		712562	0					
ANR	712768	Identifier	env		712562	0					
ANR	712769	Identifier	syntax		712562	1					
ANR	712770	Argument	ONIG_SYN_CAPTURE_ONLY_NAMED_GROUP		712562	1					
ANR	712771	Identifier	ONIG_SYN_CAPTURE_ONLY_NAMED_GROUP		712562	0					
ANR	712772	UnaryOperationExpression	"! ONIG_IS_OPTION_ON ( env -> option , ONIG_OPTION_CAPTURE_GROUP )"		712562	1					
ANR	712773	UnaryOperator	!		712562	0					
ANR	712774	CallExpression	"ONIG_IS_OPTION_ON ( env -> option , ONIG_OPTION_CAPTURE_GROUP )"		712562	1					
ANR	712775	Callee	ONIG_IS_OPTION_ON		712562	0					
ANR	712776	Identifier	ONIG_IS_OPTION_ON		712562	0					
ANR	712777	ArgumentList	env -> option		712562	1					
ANR	712778	Argument	env -> option		712562	0					
ANR	712779	PtrMemberAccess	env -> option		712562	0					
ANR	712780	Identifier	env		712562	0					
ANR	712781	Identifier	option		712562	1					
ANR	712782	Argument	ONIG_OPTION_CAPTURE_GROUP		712562	1					
ANR	712783	Identifier	ONIG_OPTION_CAPTURE_GROUP		712562	0					
ANR	712784	CompoundStatement		37:65:857:857	712562	1					
ANR	712785	ReturnStatement	return ONIGERR_NUMBERED_BACKREF_OR_CALL_NOT_ALLOWED ;	3016:3:66734:66785	712562	0	True				
ANR	712786	Identifier	ONIGERR_NUMBERED_BACKREF_OR_CALL_NOT_ALLOWED		712562	0					
ANR	712787	IfStatement	if ( gnum > env -> num_mem )		712562	2					
ANR	712788	Condition	gnum > env -> num_mem	3019:5:66802:66820	712562	0	True				
ANR	712789	RelationalExpression	gnum > env -> num_mem		712562	0		>			
ANR	712790	Identifier	gnum		712562	0					
ANR	712791	PtrMemberAccess	env -> num_mem		712562	1					
ANR	712792	Identifier	env		712562	0					
ANR	712793	Identifier	num_mem		712562	1					
ANR	712794	CompoundStatement		41:26:951:951	712562	1					
ANR	712795	ExpressionStatement	"onig_scan_env_set_error_string ( env , ONIGERR_UNDEFINED_GROUP_REFERENCE , cn -> name , cn -> name_end )"	3020:3:66828:66925	712562	0	True				
ANR	712796	CallExpression	"onig_scan_env_set_error_string ( env , ONIGERR_UNDEFINED_GROUP_REFERENCE , cn -> name , cn -> name_end )"		712562	0					
ANR	712797	Callee	onig_scan_env_set_error_string		712562	0					
ANR	712798	Identifier	onig_scan_env_set_error_string		712562	0					
ANR	712799	ArgumentList	env		712562	1					
ANR	712800	Argument	env		712562	0					
ANR	712801	Identifier	env		712562	0					
ANR	712802	Argument	ONIGERR_UNDEFINED_GROUP_REFERENCE		712562	1					
ANR	712803	Identifier	ONIGERR_UNDEFINED_GROUP_REFERENCE		712562	0					
ANR	712804	Argument	cn -> name		712562	2					
ANR	712805	PtrMemberAccess	cn -> name		712562	0					
ANR	712806	Identifier	cn		712562	0					
ANR	712807	Identifier	name		712562	1					
ANR	712808	Argument	cn -> name_end		712562	3					
ANR	712809	PtrMemberAccess	cn -> name_end		712562	0					
ANR	712810	Identifier	cn		712562	0					
ANR	712811	Identifier	name_end		712562	1					
ANR	712812	ReturnStatement	return ONIGERR_UNDEFINED_GROUP_REFERENCE ;	3022:3:66930:66970	712562	1	True				
ANR	712813	Identifier	ONIGERR_UNDEFINED_GROUP_REFERENCE		712562	0					
ANR	712814	Label	set_call_attr :	3026:6:67005:67018	712562	3	True				
ANR	712815	Identifier	set_call_attr		712562	0					
ANR	712816	ExpressionStatement	cn -> target = nodes [ cn -> group_num ]	3028:1:67028:67061	712562	4	True				
ANR	712817	AssignmentExpression	cn -> target = nodes [ cn -> group_num ]		712562	0		=			
ANR	712818	PtrMemberAccess	cn -> target		712562	0					
ANR	712819	Identifier	cn		712562	0					
ANR	712820	Identifier	target		712562	1					
ANR	712821	ArrayIndexing	nodes [ cn -> group_num ]		712562	1					
ANR	712822	Identifier	nodes		712562	0					
ANR	712823	PtrMemberAccess	cn -> group_num		712562	1					
ANR	712824	Identifier	cn		712562	0					
ANR	712825	Identifier	group_num		712562	1					
ANR	712826	IfStatement	if ( IS_NULL ( cn -> target ) )		712562	5					
ANR	712827	Condition	IS_NULL ( cn -> target )	3029:5:67068:67086	712562	0	True				
ANR	712828	CallExpression	IS_NULL ( cn -> target )		712562	0					
ANR	712829	Callee	IS_NULL		712562	0					
ANR	712830	Identifier	IS_NULL		712562	0					
ANR	712831	ArgumentList	cn -> target		712562	1					
ANR	712832	Argument	cn -> target		712562	0					
ANR	712833	PtrMemberAccess	cn -> target		712562	0					
ANR	712834	Identifier	cn		712562	0					
ANR	712835	Identifier	target		712562	1					
ANR	712836	CompoundStatement		51:26:1217:1217	712562	1					
ANR	712837	ExpressionStatement	"onig_scan_env_set_error_string ( env , ONIGERR_UNDEFINED_NAME_REFERENCE , cn -> name , cn -> name_end )"	3030:3:67094:67190	712562	0	True				
ANR	712838	CallExpression	"onig_scan_env_set_error_string ( env , ONIGERR_UNDEFINED_NAME_REFERENCE , cn -> name , cn -> name_end )"		712562	0					
ANR	712839	Callee	onig_scan_env_set_error_string		712562	0					
ANR	712840	Identifier	onig_scan_env_set_error_string		712562	0					
ANR	712841	ArgumentList	env		712562	1					
ANR	712842	Argument	env		712562	0					
ANR	712843	Identifier	env		712562	0					
ANR	712844	Argument	ONIGERR_UNDEFINED_NAME_REFERENCE		712562	1					
ANR	712845	Identifier	ONIGERR_UNDEFINED_NAME_REFERENCE		712562	0					
ANR	712846	Argument	cn -> name		712562	2					
ANR	712847	PtrMemberAccess	cn -> name		712562	0					
ANR	712848	Identifier	cn		712562	0					
ANR	712849	Identifier	name		712562	1					
ANR	712850	Argument	cn -> name_end		712562	3					
ANR	712851	PtrMemberAccess	cn -> name_end		712562	0					
ANR	712852	Identifier	cn		712562	0					
ANR	712853	Identifier	name_end		712562	1					
ANR	712854	ReturnStatement	return ONIGERR_UNDEFINED_NAME_REFERENCE ;	3032:3:67195:67234	712562	1	True				
ANR	712855	Identifier	ONIGERR_UNDEFINED_NAME_REFERENCE		712562	0					
ANR	712856	ExpressionStatement	"SET_ENCLOSE_STATUS ( cn -> target , NST_CALLED )"	3034:1:67240:67282	712562	6	True				
ANR	712857	CallExpression	"SET_ENCLOSE_STATUS ( cn -> target , NST_CALLED )"		712562	0					
ANR	712858	Callee	SET_ENCLOSE_STATUS		712562	0					
ANR	712859	Identifier	SET_ENCLOSE_STATUS		712562	0					
ANR	712860	ArgumentList	cn -> target		712562	1					
ANR	712861	Argument	cn -> target		712562	0					
ANR	712862	PtrMemberAccess	cn -> target		712562	0					
ANR	712863	Identifier	cn		712562	0					
ANR	712864	Identifier	target		712562	1					
ANR	712865	Argument	NST_CALLED		712562	1					
ANR	712866	Identifier	NST_CALLED		712562	0					
ANR	712867	ExpressionStatement	"BIT_STATUS_ON_AT ( env -> bt_mem_start , cn -> group_num )"	3035:1:67285:67335	712562	7	True				
ANR	712868	CallExpression	"BIT_STATUS_ON_AT ( env -> bt_mem_start , cn -> group_num )"		712562	0					
ANR	712869	Callee	BIT_STATUS_ON_AT		712562	0					
ANR	712870	Identifier	BIT_STATUS_ON_AT		712562	0					
ANR	712871	ArgumentList	env -> bt_mem_start		712562	1					
ANR	712872	Argument	env -> bt_mem_start		712562	0					
ANR	712873	PtrMemberAccess	env -> bt_mem_start		712562	0					
ANR	712874	Identifier	env		712562	0					
ANR	712875	Identifier	bt_mem_start		712562	1					
ANR	712876	Argument	cn -> group_num		712562	1					
ANR	712877	PtrMemberAccess	cn -> group_num		712562	0					
ANR	712878	Identifier	cn		712562	0					
ANR	712879	Identifier	group_num		712562	1					
ANR	712880	ExpressionStatement	cn -> unset_addr_list = env -> unset_addr_list	3036:1:67338:67380	712562	8	True				
ANR	712881	AssignmentExpression	cn -> unset_addr_list = env -> unset_addr_list		712562	0		=			
ANR	712882	PtrMemberAccess	cn -> unset_addr_list		712562	0					
ANR	712883	Identifier	cn		712562	0					
ANR	712884	Identifier	unset_addr_list		712562	1					
ANR	712885	PtrMemberAccess	env -> unset_addr_list		712562	1					
ANR	712886	Identifier	env		712562	0					
ANR	712887	Identifier	unset_addr_list		712562	1					
ANR	712888	ElseStatement	else		712562	0					
ANR	712889	CompoundStatement		64:1:1568:1651	712562	0					
ANR	712890	IdentifierDeclStatement	int * refs ;	3040:1:67427:67436	712562	0	True				
ANR	712891	IdentifierDecl	* refs		712562	0					
ANR	712892	IdentifierDeclType	int *		712562	0					
ANR	712893	Identifier	refs		712562	1					
ANR	712894	IdentifierDeclStatement	"int n = onig_name_to_group_numbers ( env -> reg , cn -> name , cn -> name_end , & refs ) ;"	3042:1:67440:67523	712562	1	True				
ANR	712895	IdentifierDecl	"n = onig_name_to_group_numbers ( env -> reg , cn -> name , cn -> name_end , & refs )"		712562	0					
ANR	712896	IdentifierDeclType	int		712562	0					
ANR	712897	Identifier	n		712562	1					
ANR	712898	AssignmentExpression	"n = onig_name_to_group_numbers ( env -> reg , cn -> name , cn -> name_end , & refs )"		712562	2		=			
ANR	712899	Identifier	n		712562	0					
ANR	712900	CallExpression	"onig_name_to_group_numbers ( env -> reg , cn -> name , cn -> name_end , & refs )"		712562	1					
ANR	712901	Callee	onig_name_to_group_numbers		712562	0					
ANR	712902	Identifier	onig_name_to_group_numbers		712562	0					
ANR	712903	ArgumentList	env -> reg		712562	1					
ANR	712904	Argument	env -> reg		712562	0					
ANR	712905	PtrMemberAccess	env -> reg		712562	0					
ANR	712906	Identifier	env		712562	0					
ANR	712907	Identifier	reg		712562	1					
ANR	712908	Argument	cn -> name		712562	1					
ANR	712909	PtrMemberAccess	cn -> name		712562	0					
ANR	712910	Identifier	cn		712562	0					
ANR	712911	Identifier	name		712562	1					
ANR	712912	Argument	cn -> name_end		712562	2					
ANR	712913	PtrMemberAccess	cn -> name_end		712562	0					
ANR	712914	Identifier	cn		712562	0					
ANR	712915	Identifier	name_end		712562	1					
ANR	712916	Argument	& refs		712562	3					
ANR	712917	UnaryOperationExpression	& refs		712562	0					
ANR	712918	UnaryOperator	&		712562	0					
ANR	712919	Identifier	refs		712562	1					
ANR	712920	IfStatement	if ( n <= 0 )		712562	2					
ANR	712921	Condition	n <= 0	3044:5:67530:67535	712562	0	True				
ANR	712922	RelationalExpression	n <= 0		712562	0		<=			
ANR	712923	Identifier	n		712562	0					
ANR	712924	PrimaryExpression	0		712562	1					
ANR	712925	CompoundStatement		66:13:1666:1666	712562	1					
ANR	712926	ExpressionStatement	"onig_scan_env_set_error_string ( env , ONIGERR_UNDEFINED_NAME_REFERENCE , cn -> name , cn -> name_end )"	3045:3:67543:67639	712562	0	True				
ANR	712927	CallExpression	"onig_scan_env_set_error_string ( env , ONIGERR_UNDEFINED_NAME_REFERENCE , cn -> name , cn -> name_end )"		712562	0					
ANR	712928	Callee	onig_scan_env_set_error_string		712562	0					
ANR	712929	Identifier	onig_scan_env_set_error_string		712562	0					
ANR	712930	ArgumentList	env		712562	1					
ANR	712931	Argument	env		712562	0					
ANR	712932	Identifier	env		712562	0					
ANR	712933	Argument	ONIGERR_UNDEFINED_NAME_REFERENCE		712562	1					
ANR	712934	Identifier	ONIGERR_UNDEFINED_NAME_REFERENCE		712562	0					
ANR	712935	Argument	cn -> name		712562	2					
ANR	712936	PtrMemberAccess	cn -> name		712562	0					
ANR	712937	Identifier	cn		712562	0					
ANR	712938	Identifier	name		712562	1					
ANR	712939	Argument	cn -> name_end		712562	3					
ANR	712940	PtrMemberAccess	cn -> name_end		712562	0					
ANR	712941	Identifier	cn		712562	0					
ANR	712942	Identifier	name_end		712562	1					
ANR	712943	ReturnStatement	return ONIGERR_UNDEFINED_NAME_REFERENCE ;	3047:3:67644:67683	712562	1	True				
ANR	712944	Identifier	ONIGERR_UNDEFINED_NAME_REFERENCE		712562	0					
ANR	712945	ElseStatement	else		712562	0					
ANR	712946	IfStatement	if ( n > 1 )		712562	0					
ANR	712947	Condition	n > 1	3049:10:67698:67702	712562	0	True				
ANR	712948	RelationalExpression	n > 1		712562	0		>			
ANR	712949	Identifier	n		712562	0					
ANR	712950	PrimaryExpression	1		712562	1					
ANR	712951	CompoundStatement		71:17:1833:1833	712562	1					
ANR	712952	ExpressionStatement	"onig_scan_env_set_error_string ( env , ONIGERR_MULTIPLEX_DEFINITION_NAME_CALL , cn -> name , cn -> name_end )"	3050:3:67710:67814	712562	0	True				
ANR	712953	CallExpression	"onig_scan_env_set_error_string ( env , ONIGERR_MULTIPLEX_DEFINITION_NAME_CALL , cn -> name , cn -> name_end )"		712562	0					
ANR	712954	Callee	onig_scan_env_set_error_string		712562	0					
ANR	712955	Identifier	onig_scan_env_set_error_string		712562	0					
ANR	712956	ArgumentList	env		712562	1					
ANR	712957	Argument	env		712562	0					
ANR	712958	Identifier	env		712562	0					
ANR	712959	Argument	ONIGERR_MULTIPLEX_DEFINITION_NAME_CALL		712562	1					
ANR	712960	Identifier	ONIGERR_MULTIPLEX_DEFINITION_NAME_CALL		712562	0					
ANR	712961	Argument	cn -> name		712562	2					
ANR	712962	PtrMemberAccess	cn -> name		712562	0					
ANR	712963	Identifier	cn		712562	0					
ANR	712964	Identifier	name		712562	1					
ANR	712965	Argument	cn -> name_end		712562	3					
ANR	712966	PtrMemberAccess	cn -> name_end		712562	0					
ANR	712967	Identifier	cn		712562	0					
ANR	712968	Identifier	name_end		712562	1					
ANR	712969	ReturnStatement	return ONIGERR_MULTIPLEX_DEFINITION_NAME_CALL ;	3052:3:67819:67864	712562	1	True				
ANR	712970	Identifier	ONIGERR_MULTIPLEX_DEFINITION_NAME_CALL		712562	0					
ANR	712971	ElseStatement	else		712562	0					
ANR	712972	CompoundStatement		76:6:2003:2003	712562	0					
ANR	712973	ExpressionStatement	cn -> group_num = refs [ 0 ]	3055:3:67880:67903	712562	0	True				
ANR	712974	AssignmentExpression	cn -> group_num = refs [ 0 ]		712562	0		=			
ANR	712975	PtrMemberAccess	cn -> group_num		712562	0					
ANR	712976	Identifier	cn		712562	0					
ANR	712977	Identifier	group_num		712562	1					
ANR	712978	ArrayIndexing	refs [ 0 ]		712562	1					
ANR	712979	Identifier	refs		712562	0					
ANR	712980	PrimaryExpression	0		712562	1					
ANR	712981	GotoStatement	goto set_call_attr ;	3056:3:67908:67926	712562	1	True				
ANR	712982	Identifier	set_call_attr		712562	0					
ANR	712983	BreakStatement	break ;	3061:4:67956:67961	712562	14	True				
ANR	712984	Label	case NT_ANCHOR :	3063:2:67966:67980	712562	15	True				
ANR	712985	Identifier	NT_ANCHOR		712562	0					
ANR	712986	CompoundStatement		87:6:2122:2152	712562	16					
ANR	712987	IdentifierDeclStatement	AnchorNode * an = NANCHOR ( node ) ;	3065:6:67994:68024	712562	0	True				
ANR	712988	IdentifierDecl	* an = NANCHOR ( node )		712562	0					
ANR	712989	IdentifierDeclType	AnchorNode *		712562	0					
ANR	712990	Identifier	an		712562	1					
ANR	712991	AssignmentExpression	* an = NANCHOR ( node )		712562	2		=			
ANR	712992	Identifier	an		712562	0					
ANR	712993	CallExpression	NANCHOR ( node )		712562	1					
ANR	712994	Callee	NANCHOR		712562	0					
ANR	712995	Identifier	NANCHOR		712562	0					
ANR	712996	ArgumentList	node		712562	1					
ANR	712997	Argument	node		712562	0					
ANR	712998	Identifier	node		712562	0					
ANR	712999	SwitchStatement	switch ( an -> type )		712562	1					
ANR	713000	Condition	an -> type	3067:14:68041:68048	712562	0	True				
ANR	713001	PtrMemberAccess	an -> type		712562	0					
ANR	713002	Identifier	an		712562	0					
ANR	713003	Identifier	type		712562	1					
ANR	713004	CompoundStatement		89:24:2179:2179	712562	1					
ANR	713005	Label	case ANCHOR_PREC_READ :	3068:6:68059:68080	712562	0	True				
ANR	713006	Identifier	ANCHOR_PREC_READ		712562	0					
ANR	713007	Label	case ANCHOR_PREC_READ_NOT :	3069:6:68088:68113	712562	1	True				
ANR	713008	Identifier	ANCHOR_PREC_READ_NOT		712562	0					
ANR	713009	Label	case ANCHOR_LOOK_BEHIND :	3070:6:68121:68144	712562	2	True				
ANR	713010	Identifier	ANCHOR_LOOK_BEHIND		712562	0					
ANR	713011	Label	case ANCHOR_LOOK_BEHIND_NOT :	3071:6:68152:68179	712562	3	True				
ANR	713012	Identifier	ANCHOR_LOOK_BEHIND_NOT		712562	0					
ANR	713013	ExpressionStatement	"r = setup_subexp_call ( an -> target , env )"	3072:1:68182:68220	712562	4	True				
ANR	713014	AssignmentExpression	"r = setup_subexp_call ( an -> target , env )"		712562	0		=			
ANR	713015	Identifier	r		712562	0					
ANR	713016	CallExpression	"setup_subexp_call ( an -> target , env )"		712562	1					
ANR	713017	Callee	setup_subexp_call		712562	0					
ANR	713018	Identifier	setup_subexp_call		712562	0					
ANR	713019	ArgumentList	an -> target		712562	1					
ANR	713020	Argument	an -> target		712562	0					
ANR	713021	PtrMemberAccess	an -> target		712562	0					
ANR	713022	Identifier	an		712562	0					
ANR	713023	Identifier	target		712562	1					
ANR	713024	Argument	env		712562	1					
ANR	713025	Identifier	env		712562	0					
ANR	713026	BreakStatement	break ;	3073:1:68223:68228	712562	5	True				
ANR	713027	BreakStatement	break ;	3076:4:68248:68253	712562	17	True				
ANR	713028	Label	default :	3078:2:68258:68265	712562	18	True				
ANR	713029	Identifier	default		712562	0					
ANR	713030	BreakStatement	break ;	3079:4:68271:68276	712562	19	True				
ANR	713031	ReturnStatement	return r ;	3082:2:68285:68293	712562	4	True				
ANR	713032	Identifier	r		712562	0					
ANR	713033	ReturnType	static int		712562	1					
ANR	713034	Identifier	setup_subexp_call		712562	2					
ANR	713035	ParameterList	"Node * node , ScanEnv * env"		712562	3					
ANR	713036	Parameter	Node * node	2978:18:65845:65854	712562	0	True				
ANR	713037	ParameterType	Node *		712562	0					
ANR	713038	Identifier	node		712562	1					
ANR	713039	Parameter	ScanEnv * env	2978:30:65857:65868	712562	1	True				
ANR	713040	ParameterType	ScanEnv *		712562	0					
ANR	713041	Identifier	env		712562	1					
ANR	713042	CFGEntryNode	ENTRY		712562		True				
ANR	713043	CFGExitNode	EXIT		712562		True				
ANR	713044	Symbol	NQTFR ( node ) -> target		712562						
ANR	713045	Symbol	NCAR		712562						
ANR	713046	Symbol	env -> bt_mem_start		712562						
ANR	713047	Symbol	env -> num_named		712562						
ANR	713048	Symbol	cn -> name_end		712562						
ANR	713049	Symbol	type		712562						
ANR	713050	Symbol	NQTFR		712562						
ANR	713051	Symbol	gnum		712562						
ANR	713052	Symbol	env -> reg		712562						
ANR	713053	Symbol	env -> option		712562						
ANR	713054	Symbol	setup_subexp_call		712562						
ANR	713055	Symbol	ONIG_SYN_CAPTURE_ONLY_NAMED_GROUP		712562						
ANR	713056	Symbol	ONIGERR_NUMBERED_BACKREF_OR_CALL_NOT_ALLOWED		712562						
ANR	713057	Symbol	ONIGERR_UNDEFINED_NAME_REFERENCE		712562						
ANR	713058	Symbol	cn -> target		712562						
ANR	713059	Symbol	IS_SYNTAX_BV		712562						
ANR	713060	Symbol	* nodes		712562						
ANR	713061	Symbol	SCANENV_MEM_NODES		712562						
ANR	713062	Symbol	NCDR		712562						
ANR	713063	Symbol	* env		712562						
ANR	713064	Symbol	& refs		712562						
ANR	713065	Symbol	env -> unset_addr_list		712562						
ANR	713066	Symbol	an		712562						
ANR	713067	Symbol	NENCLOSE ( node ) -> target		712562						
ANR	713068	Symbol	env -> syntax		712562						
ANR	713069	Symbol	node		712562						
ANR	713070	Symbol	* cn		712562						
ANR	713071	Symbol	an -> target		712562						
ANR	713072	Symbol	* cn -> group_num		712562						
ANR	713073	Symbol	IS_NOT_NULL		712562						
ANR	713074	Symbol	onig_name_to_group_numbers		712562						
ANR	713075	Symbol	* NENCLOSE		712562						
ANR	713076	Symbol	NCALL		712562						
ANR	713077	Symbol	an -> type		712562						
ANR	713078	Symbol	cn -> name		712562						
ANR	713079	Symbol	cn -> unset_addr_list		712562						
ANR	713080	Symbol	IS_NULL		712562						
ANR	713081	Symbol	* NQTFR		712562						
ANR	713082	Symbol	* * cn		712562						
ANR	713083	Symbol	* refs		712562						
ANR	713084	Symbol	NENCLOSE		712562						
ANR	713085	Symbol	cn -> group_num		712562						
ANR	713086	Symbol	ONIG_IS_OPTION_ON		712562						
ANR	713087	Symbol	NST_CALLED		712562						
ANR	713088	Symbol	env -> num_mem		712562						
ANR	713089	Symbol	cn		712562						
ANR	713090	Symbol	env		712562						
ANR	713091	Symbol	ONIG_OPTION_CAPTURE_GROUP		712562						
ANR	713092	Symbol	n		712562						
ANR	713093	Symbol	* an		712562						
ANR	713094	Symbol	r		712562						
ANR	713095	Symbol	nodes		712562						
ANR	713096	Symbol	ONIGERR_UNDEFINED_GROUP_REFERENCE		712562						
ANR	713097	Symbol	refs		712562						
ANR	713098	Symbol	NANCHOR		712562						
ANR	713099	Symbol	NTYPE		712562						
ANR	713100	Symbol	ONIGERR_MULTIPLEX_DEFINITION_NAME_CALL		712562						
ANR	713101	Function	divide_look_behind_alternatives	3090:0:68421:69092							
ANR	713102	FunctionDef	divide_look_behind_alternatives (Node * node)		713101	0					
ANR	713103	CompoundStatement		3092:0:68476:69092	713101	0					
ANR	713104	IdentifierDeclStatement	"Node * head , * np , * insert_node ;"	3093:2:68480:68509	713101	0	True				
ANR	713105	IdentifierDecl	* head		713101	0					
ANR	713106	IdentifierDeclType	Node *		713101	0					
ANR	713107	Identifier	head		713101	1					
ANR	713108	IdentifierDecl	* np		713101	1					
ANR	713109	IdentifierDeclType	Node *		713101	0					
ANR	713110	Identifier	np		713101	1					
ANR	713111	IdentifierDecl	* insert_node		713101	2					
ANR	713112	IdentifierDeclType	Node *		713101	0					
ANR	713113	Identifier	insert_node		713101	1					
ANR	713114	IdentifierDeclStatement	AnchorNode * an = NANCHOR ( node ) ;	3094:2:68513:68543	713101	1	True				
ANR	713115	IdentifierDecl	* an = NANCHOR ( node )		713101	0					
ANR	713116	IdentifierDeclType	AnchorNode *		713101	0					
ANR	713117	Identifier	an		713101	1					
ANR	713118	AssignmentExpression	* an = NANCHOR ( node )		713101	2		=			
ANR	713119	Identifier	an		713101	0					
ANR	713120	CallExpression	NANCHOR ( node )		713101	1					
ANR	713121	Callee	NANCHOR		713101	0					
ANR	713122	Identifier	NANCHOR		713101	0					
ANR	713123	ArgumentList	node		713101	1					
ANR	713124	Argument	node		713101	0					
ANR	713125	Identifier	node		713101	0					
ANR	713126	IdentifierDeclStatement	int anc_type = an -> type ;	3095:2:68547:68570	713101	2	True				
ANR	713127	IdentifierDecl	anc_type = an -> type		713101	0					
ANR	713128	IdentifierDeclType	int		713101	0					
ANR	713129	Identifier	anc_type		713101	1					
ANR	713130	AssignmentExpression	anc_type = an -> type		713101	2		=			
ANR	713131	Identifier	anc_type		713101	0					
ANR	713132	PtrMemberAccess	an -> type		713101	1					
ANR	713133	Identifier	an		713101	0					
ANR	713134	Identifier	type		713101	1					
ANR	713135	ExpressionStatement	head = an -> target	3097:2:68575:68592	713101	3	True				
ANR	713136	AssignmentExpression	head = an -> target		713101	0		=			
ANR	713137	Identifier	head		713101	0					
ANR	713138	PtrMemberAccess	an -> target		713101	1					
ANR	713139	Identifier	an		713101	0					
ANR	713140	Identifier	target		713101	1					
ANR	713141	ExpressionStatement	np = NCAR ( head )	3098:2:68596:68611	713101	4	True				
ANR	713142	AssignmentExpression	np = NCAR ( head )		713101	0		=			
ANR	713143	Identifier	np		713101	0					
ANR	713144	CallExpression	NCAR ( head )		713101	1					
ANR	713145	Callee	NCAR		713101	0					
ANR	713146	Identifier	NCAR		713101	0					
ANR	713147	ArgumentList	head		713101	1					
ANR	713148	Argument	head		713101	0					
ANR	713149	Identifier	head		713101	0					
ANR	713150	ExpressionStatement	"swap_node ( node , head )"	3099:2:68615:68636	713101	5	True				
ANR	713151	CallExpression	"swap_node ( node , head )"		713101	0					
ANR	713152	Callee	swap_node		713101	0					
ANR	713153	Identifier	swap_node		713101	0					
ANR	713154	ArgumentList	node		713101	1					
ANR	713155	Argument	node		713101	0					
ANR	713156	Identifier	node		713101	0					
ANR	713157	Argument	head		713101	1					
ANR	713158	Identifier	head		713101	0					
ANR	713159	ExpressionStatement	NCAR ( node ) = head	3100:2:68640:68657	713101	6	True				
ANR	713160	AssignmentExpression	NCAR ( node ) = head		713101	0		=			
ANR	713161	CallExpression	NCAR ( node )		713101	0					
ANR	713162	Callee	NCAR		713101	0					
ANR	713163	Identifier	NCAR		713101	0					
ANR	713164	ArgumentList	node		713101	1					
ANR	713165	Argument	node		713101	0					
ANR	713166	Identifier	node		713101	0					
ANR	713167	Identifier	head		713101	1					
ANR	713168	ExpressionStatement	NANCHOR ( head ) -> target = np	3101:2:68661:68687	713101	7	True				
ANR	713169	AssignmentExpression	NANCHOR ( head ) -> target = np		713101	0		=			
ANR	713170	PtrMemberAccess	NANCHOR ( head ) -> target		713101	0					
ANR	713171	CallExpression	NANCHOR ( head )		713101	0					
ANR	713172	Callee	NANCHOR		713101	0					
ANR	713173	Identifier	NANCHOR		713101	0					
ANR	713174	ArgumentList	head		713101	1					
ANR	713175	Argument	head		713101	0					
ANR	713176	Identifier	head		713101	0					
ANR	713177	Identifier	target		713101	1					
ANR	713178	Identifier	np		713101	1					
ANR	713179	ExpressionStatement	np = node	3103:2:68692:68701	713101	8	True				
ANR	713180	AssignmentExpression	np = node		713101	0		=			
ANR	713181	Identifier	np		713101	0					
ANR	713182	Identifier	node		713101	1					
ANR	713183	WhileStatement	while ( ( np = NCDR ( np ) ) != NULL_NODE )		713101	9					
ANR	713184	Condition	( np = NCDR ( np ) ) != NULL_NODE	3104:9:68712:68739	713101	0	True				
ANR	713185	EqualityExpression	( np = NCDR ( np ) ) != NULL_NODE		713101	0		!=			
ANR	713186	AssignmentExpression	np = NCDR ( np )		713101	0		=			
ANR	713187	Identifier	np		713101	0					
ANR	713188	CallExpression	NCDR ( np )		713101	1					
ANR	713189	Callee	NCDR		713101	0					
ANR	713190	Identifier	NCDR		713101	0					
ANR	713191	ArgumentList	np		713101	1					
ANR	713192	Argument	np		713101	0					
ANR	713193	Identifier	np		713101	0					
ANR	713194	Identifier	NULL_NODE		713101	1					
ANR	713195	CompoundStatement		13:39:265:265	713101	1					
ANR	713196	ExpressionStatement	insert_node = onig_node_new_anchor ( anc_type )	3105:4:68748:68792	713101	0	True				
ANR	713197	AssignmentExpression	insert_node = onig_node_new_anchor ( anc_type )		713101	0		=			
ANR	713198	Identifier	insert_node		713101	0					
ANR	713199	CallExpression	onig_node_new_anchor ( anc_type )		713101	1					
ANR	713200	Callee	onig_node_new_anchor		713101	0					
ANR	713201	Identifier	onig_node_new_anchor		713101	0					
ANR	713202	ArgumentList	anc_type		713101	1					
ANR	713203	Argument	anc_type		713101	0					
ANR	713204	Identifier	anc_type		713101	0					
ANR	713205	ExpressionStatement	CHECK_NULL_RETURN_MEMERR ( insert_node )	3106:4:68798:68835	713101	1	True				
ANR	713206	CallExpression	CHECK_NULL_RETURN_MEMERR ( insert_node )		713101	0					
ANR	713207	Callee	CHECK_NULL_RETURN_MEMERR		713101	0					
ANR	713208	Identifier	CHECK_NULL_RETURN_MEMERR		713101	0					
ANR	713209	ArgumentList	insert_node		713101	1					
ANR	713210	Argument	insert_node		713101	0					
ANR	713211	Identifier	insert_node		713101	0					
ANR	713212	ExpressionStatement	NANCHOR ( insert_node ) -> target = NCAR ( np )	3107:4:68841:68880	713101	2	True				
ANR	713213	AssignmentExpression	NANCHOR ( insert_node ) -> target = NCAR ( np )		713101	0		=			
ANR	713214	PtrMemberAccess	NANCHOR ( insert_node ) -> target		713101	0					
ANR	713215	CallExpression	NANCHOR ( insert_node )		713101	0					
ANR	713216	Callee	NANCHOR		713101	0					
ANR	713217	Identifier	NANCHOR		713101	0					
ANR	713218	ArgumentList	insert_node		713101	1					
ANR	713219	Argument	insert_node		713101	0					
ANR	713220	Identifier	insert_node		713101	0					
ANR	713221	Identifier	target		713101	1					
ANR	713222	CallExpression	NCAR ( np )		713101	1					
ANR	713223	Callee	NCAR		713101	0					
ANR	713224	Identifier	NCAR		713101	0					
ANR	713225	ArgumentList	np		713101	1					
ANR	713226	Argument	np		713101	0					
ANR	713227	Identifier	np		713101	0					
ANR	713228	ExpressionStatement	NCAR ( np ) = insert_node	3108:4:68886:68908	713101	3	True				
ANR	713229	AssignmentExpression	NCAR ( np ) = insert_node		713101	0		=			
ANR	713230	CallExpression	NCAR ( np )		713101	0					
ANR	713231	Callee	NCAR		713101	0					
ANR	713232	Identifier	NCAR		713101	0					
ANR	713233	ArgumentList	np		713101	1					
ANR	713234	Argument	np		713101	0					
ANR	713235	Identifier	np		713101	0					
ANR	713236	Identifier	insert_node		713101	1					
ANR	713237	IfStatement	if ( anc_type == ANCHOR_LOOK_BEHIND_NOT )		713101	10					
ANR	713238	Condition	anc_type == ANCHOR_LOOK_BEHIND_NOT	3111:6:68921:68954	713101	0	True				
ANR	713239	EqualityExpression	anc_type == ANCHOR_LOOK_BEHIND_NOT		713101	0		==			
ANR	713240	Identifier	anc_type		713101	0					
ANR	713241	Identifier	ANCHOR_LOOK_BEHIND_NOT		713101	1					
ANR	713242	CompoundStatement		20:42:480:480	713101	1					
ANR	713243	ExpressionStatement	np = node	3112:4:68963:68972	713101	0	True				
ANR	713244	AssignmentExpression	np = node		713101	0		=			
ANR	713245	Identifier	np		713101	0					
ANR	713246	Identifier	node		713101	1					
ANR	713247	DoStatement	do		713101	1					
ANR	713248	CompoundStatement		22:7:504:504	713101	0					
ANR	713249	ExpressionStatement	"SET_NTYPE ( np , NT_LIST )"	3114:6:68989:69011	713101	0	True				
ANR	713250	CallExpression	"SET_NTYPE ( np , NT_LIST )"		713101	0					
ANR	713251	Callee	SET_NTYPE		713101	0					
ANR	713252	Identifier	SET_NTYPE		713101	0					
ANR	713253	ArgumentList	np		713101	1					
ANR	713254	Argument	np		713101	0					
ANR	713255	Identifier	np		713101	0					
ANR	713256	Argument	NT_LIST		713101	1					
ANR	713257	Identifier	NT_LIST		713101	0					
ANR	713258	Condition	( np = NCDR ( np ) ) != NULL_NODE	3115:13:69045:69072	713101	1	True				
ANR	713259	EqualityExpression	( np = NCDR ( np ) ) != NULL_NODE		713101	0		!=			
ANR	713260	AssignmentExpression	np = NCDR ( np )		713101	0		=			
ANR	713261	Identifier	np		713101	0					
ANR	713262	CallExpression	NCDR ( np )		713101	1					
ANR	713263	Callee	NCDR		713101	0					
ANR	713264	Identifier	NCDR		713101	0					
ANR	713265	ArgumentList	np		713101	1					
ANR	713266	Argument	np		713101	0					
ANR	713267	Identifier	np		713101	0					
ANR	713268	Identifier	NULL_NODE		713101	1					
ANR	713269	ReturnStatement	return 0 ;	3117:2:69082:69090	713101	11	True				
ANR	713270	PrimaryExpression	0		713101	0					
ANR	713271	ReturnType	static int		713101	1					
ANR	713272	Identifier	divide_look_behind_alternatives		713101	2					
ANR	713273	ParameterList	Node * node		713101	3					
ANR	713274	Parameter	Node * node	3091:32:68464:68473	713101	0	True				
ANR	713275	ParameterType	Node *		713101	0					
ANR	713276	Identifier	node		713101	1					
ANR	713277	CFGEntryNode	ENTRY		713101		True				
ANR	713278	CFGExitNode	EXIT		713101		True				
ANR	713279	Symbol	np		713101						
ANR	713280	Symbol	NCAR		713101						
ANR	713281	Symbol	anc_type		713101						
ANR	713282	Symbol	NCDR		713101						
ANR	713283	Symbol	an -> type		713101						
ANR	713284	Symbol	NT_LIST		713101						
ANR	713285	Symbol	an		713101						
ANR	713286	Symbol	NANCHOR ( insert_node ) -> target		713101						
ANR	713287	Symbol	head		713101						
ANR	713288	Symbol	* an		713101						
ANR	713289	Symbol	NANCHOR ( head ) -> target		713101						
ANR	713290	Symbol	node		713101						
ANR	713291	Symbol	an -> target		713101						
ANR	713292	Symbol	* NANCHOR		713101						
ANR	713293	Symbol	ANCHOR_LOOK_BEHIND_NOT		713101						
ANR	713294	Symbol	NANCHOR		713101						
ANR	713295	Symbol	NULL_NODE		713101						
ANR	713296	Symbol	onig_node_new_anchor		713101						
ANR	713297	Symbol	insert_node		713101						
ANR	713298	Function	setup_look_behind	3120:0:69095:69630							
ANR	713299	FunctionDef	"setup_look_behind (Node * node , regex_t * reg , ScanEnv * env)"		713298	0					
ANR	713300	CompoundStatement		3122:0:69164:69630	713298	0					
ANR	713301	IdentifierDeclStatement	"int r , len ;"	3123:2:69168:69178	713298	0	True				
ANR	713302	IdentifierDecl	r		713298	0					
ANR	713303	IdentifierDeclType	int		713298	0					
ANR	713304	Identifier	r		713298	1					
ANR	713305	IdentifierDecl	len		713298	1					
ANR	713306	IdentifierDeclType	int		713298	0					
ANR	713307	Identifier	len		713298	1					
ANR	713308	IdentifierDeclStatement	AnchorNode * an = NANCHOR ( node ) ;	3124:2:69182:69212	713298	1	True				
ANR	713309	IdentifierDecl	* an = NANCHOR ( node )		713298	0					
ANR	713310	IdentifierDeclType	AnchorNode *		713298	0					
ANR	713311	Identifier	an		713298	1					
ANR	713312	AssignmentExpression	* an = NANCHOR ( node )		713298	2		=			
ANR	713313	Identifier	an		713298	0					
ANR	713314	CallExpression	NANCHOR ( node )		713298	1					
ANR	713315	Callee	NANCHOR		713298	0					
ANR	713316	Identifier	NANCHOR		713298	0					
ANR	713317	ArgumentList	node		713298	1					
ANR	713318	Argument	node		713298	0					
ANR	713319	Identifier	node		713298	0					
ANR	713320	ExpressionStatement	"r = get_char_length_tree ( an -> target , reg , & len )"	3126:2:69217:69264	713298	2	True				
ANR	713321	AssignmentExpression	"r = get_char_length_tree ( an -> target , reg , & len )"		713298	0		=			
ANR	713322	Identifier	r		713298	0					
ANR	713323	CallExpression	"get_char_length_tree ( an -> target , reg , & len )"		713298	1					
ANR	713324	Callee	get_char_length_tree		713298	0					
ANR	713325	Identifier	get_char_length_tree		713298	0					
ANR	713326	ArgumentList	an -> target		713298	1					
ANR	713327	Argument	an -> target		713298	0					
ANR	713328	PtrMemberAccess	an -> target		713298	0					
ANR	713329	Identifier	an		713298	0					
ANR	713330	Identifier	target		713298	1					
ANR	713331	Argument	reg		713298	1					
ANR	713332	Identifier	reg		713298	0					
ANR	713333	Argument	& len		713298	2					
ANR	713334	UnaryOperationExpression	& len		713298	0					
ANR	713335	UnaryOperator	&		713298	0					
ANR	713336	Identifier	len		713298	1					
ANR	713337	IfStatement	if ( r == 0 )		713298	3					
ANR	713338	Condition	r == 0	3127:6:69272:69277	713298	0	True				
ANR	713339	EqualityExpression	r == 0		713298	0		==			
ANR	713340	Identifier	r		713298	0					
ANR	713341	PrimaryExpression	0		713298	1					
ANR	713342	ExpressionStatement	an -> char_len = len	3128:4:69284:69302	713298	1	True				
ANR	713343	AssignmentExpression	an -> char_len = len		713298	0		=			
ANR	713344	PtrMemberAccess	an -> char_len		713298	0					
ANR	713345	Identifier	an		713298	0					
ANR	713346	Identifier	char_len		713298	1					
ANR	713347	Identifier	len		713298	1					
ANR	713348	ElseStatement	else		713298	0					
ANR	713349	IfStatement	if ( r == GET_CHAR_LEN_VARLEN )		713298	0					
ANR	713350	Condition	r == GET_CHAR_LEN_VARLEN	3129:11:69315:69338	713298	0	True				
ANR	713351	EqualityExpression	r == GET_CHAR_LEN_VARLEN		713298	0		==			
ANR	713352	Identifier	r		713298	0					
ANR	713353	Identifier	GET_CHAR_LEN_VARLEN		713298	1					
ANR	713354	ExpressionStatement	r = ONIGERR_INVALID_LOOK_BEHIND_PATTERN	3130:4:69345:69384	713298	1	True				
ANR	713355	AssignmentExpression	r = ONIGERR_INVALID_LOOK_BEHIND_PATTERN		713298	0		=			
ANR	713356	Identifier	r		713298	0					
ANR	713357	Identifier	ONIGERR_INVALID_LOOK_BEHIND_PATTERN		713298	1					
ANR	713358	ElseStatement	else		713298	0					
ANR	713359	IfStatement	if ( r == GET_CHAR_LEN_TOP_ALT_VARLEN )		713298	0					
ANR	713360	Condition	r == GET_CHAR_LEN_TOP_ALT_VARLEN	3131:11:69397:69428	713298	0	True				
ANR	713361	EqualityExpression	r == GET_CHAR_LEN_TOP_ALT_VARLEN		713298	0		==			
ANR	713362	Identifier	r		713298	0					
ANR	713363	Identifier	GET_CHAR_LEN_TOP_ALT_VARLEN		713298	1					
ANR	713364	CompoundStatement		10:45:266:266	713298	1					
ANR	713365	IfStatement	"if ( IS_SYNTAX_BV ( env -> syntax , ONIG_SYN_DIFFERENT_LEN_ALT_LOOK_BEHIND ) )"		713298	0					
ANR	713366	Condition	"IS_SYNTAX_BV ( env -> syntax , ONIG_SYN_DIFFERENT_LEN_ALT_LOOK_BEHIND )"	3132:8:69441:69505	713298	0	True				
ANR	713367	CallExpression	"IS_SYNTAX_BV ( env -> syntax , ONIG_SYN_DIFFERENT_LEN_ALT_LOOK_BEHIND )"		713298	0					
ANR	713368	Callee	IS_SYNTAX_BV		713298	0					
ANR	713369	Identifier	IS_SYNTAX_BV		713298	0					
ANR	713370	ArgumentList	env -> syntax		713298	1					
ANR	713371	Argument	env -> syntax		713298	0					
ANR	713372	PtrMemberAccess	env -> syntax		713298	0					
ANR	713373	Identifier	env		713298	0					
ANR	713374	Identifier	syntax		713298	1					
ANR	713375	Argument	ONIG_SYN_DIFFERENT_LEN_ALT_LOOK_BEHIND		713298	1					
ANR	713376	Identifier	ONIG_SYN_DIFFERENT_LEN_ALT_LOOK_BEHIND		713298	0					
ANR	713377	ExpressionStatement	r = divide_look_behind_alternatives ( node )	3133:6:69514:69555	713298	1	True				
ANR	713378	AssignmentExpression	r = divide_look_behind_alternatives ( node )		713298	0		=			
ANR	713379	Identifier	r		713298	0					
ANR	713380	CallExpression	divide_look_behind_alternatives ( node )		713298	1					
ANR	713381	Callee	divide_look_behind_alternatives		713298	0					
ANR	713382	Identifier	divide_look_behind_alternatives		713298	0					
ANR	713383	ArgumentList	node		713298	1					
ANR	713384	Argument	node		713298	0					
ANR	713385	Identifier	node		713298	0					
ANR	713386	ElseStatement	else		713298	0					
ANR	713387	ExpressionStatement	r = ONIGERR_INVALID_LOOK_BEHIND_PATTERN	3135:6:69572:69611	713298	0	True				
ANR	713388	AssignmentExpression	r = ONIGERR_INVALID_LOOK_BEHIND_PATTERN		713298	0		=			
ANR	713389	Identifier	r		713298	0					
ANR	713390	Identifier	ONIGERR_INVALID_LOOK_BEHIND_PATTERN		713298	1					
ANR	713391	ReturnStatement	return r ;	3138:2:69620:69628	713298	4	True				
ANR	713392	Identifier	r		713298	0					
ANR	713393	ReturnType	static int		713298	1					
ANR	713394	Identifier	setup_look_behind		713298	2					
ANR	713395	ParameterList	"Node * node , regex_t * reg , ScanEnv * env"		713298	3					
ANR	713396	Parameter	Node * node	3121:18:69124:69133	713298	0	True				
ANR	713397	ParameterType	Node *		713298	0					
ANR	713398	Identifier	node		713298	1					
ANR	713399	Parameter	regex_t * reg	3121:30:69136:69147	713298	1	True				
ANR	713400	ParameterType	regex_t *		713298	0					
ANR	713401	Identifier	reg		713298	1					
ANR	713402	Parameter	ScanEnv * env	3121:44:69150:69161	713298	2	True				
ANR	713403	ParameterType	ScanEnv *		713298	0					
ANR	713404	Identifier	env		713298	1					
ANR	713405	CFGEntryNode	ENTRY		713298		True				
ANR	713406	CFGExitNode	EXIT		713298		True				
ANR	713407	Symbol	ONIG_SYN_DIFFERENT_LEN_ALT_LOOK_BEHIND		713298						
ANR	713408	Symbol	an -> char_len		713298						
ANR	713409	Symbol	ONIGERR_INVALID_LOOK_BEHIND_PATTERN		713298						
ANR	713410	Symbol	* env		713298						
ANR	713411	Symbol	env		713298						
ANR	713412	Symbol	an		713298						
ANR	713413	Symbol	env -> syntax		713298						
ANR	713414	Symbol	* an		713298						
ANR	713415	Symbol	node		713298						
ANR	713416	Symbol	get_char_length_tree		713298						
ANR	713417	Symbol	r		713298						
ANR	713418	Symbol	len		713298						
ANR	713419	Symbol	GET_CHAR_LEN_TOP_ALT_VARLEN		713298						
ANR	713420	Symbol	reg		713298						
ANR	713421	Symbol	an -> target		713298						
ANR	713422	Symbol	GET_CHAR_LEN_VARLEN		713298						
ANR	713423	Symbol	NANCHOR		713298						
ANR	713424	Symbol	IS_SYNTAX_BV		713298						
ANR	713425	Symbol	& len		713298						
ANR	713426	Symbol	divide_look_behind_alternatives		713298						
ANR	713427	Function	next_setup	3141:0:69633:70842							
ANR	713428	FunctionDef	"next_setup (Node * node , Node * next_node , regex_t * reg)"		713427	0					
ANR	713429	CompoundStatement		3143:0:69698:70842	713427	0					
ANR	713430	IdentifierDeclStatement	int type ;	3144:2:69702:69710	713427	0	True				
ANR	713431	IdentifierDecl	type		713427	0					
ANR	713432	IdentifierDeclType	int		713427	0					
ANR	713433	Identifier	type		713427	1					
ANR	713434	Label	retry :	3146:1:69714:69719	713427	1	True				
ANR	713435	Identifier	retry		713427	0					
ANR	713436	ExpressionStatement	type = NTYPE ( node )	3147:2:69723:69741	713427	2	True				
ANR	713437	AssignmentExpression	type = NTYPE ( node )		713427	0		=			
ANR	713438	Identifier	type		713427	0					
ANR	713439	CallExpression	NTYPE ( node )		713427	1					
ANR	713440	Callee	NTYPE		713427	0					
ANR	713441	Identifier	NTYPE		713427	0					
ANR	713442	ArgumentList	node		713427	1					
ANR	713443	Argument	node		713427	0					
ANR	713444	Identifier	node		713427	0					
ANR	713445	IfStatement	if ( type == NT_QTFR )		713427	3					
ANR	713446	Condition	type == NT_QTFR	3148:6:69749:69763	713427	0	True				
ANR	713447	EqualityExpression	type == NT_QTFR		713427	0		==			
ANR	713448	Identifier	type		713427	0					
ANR	713449	Identifier	NT_QTFR		713427	1					
ANR	713450	CompoundStatement		7:4:73:99	713427	1					
ANR	713451	IdentifierDeclStatement	QtfrNode * qn = NQTFR ( node ) ;	3149:4:69772:69798	713427	0	True				
ANR	713452	IdentifierDecl	* qn = NQTFR ( node )		713427	0					
ANR	713453	IdentifierDeclType	QtfrNode *		713427	0					
ANR	713454	Identifier	qn		713427	1					
ANR	713455	AssignmentExpression	* qn = NQTFR ( node )		713427	2		=			
ANR	713456	Identifier	qn		713427	0					
ANR	713457	CallExpression	NQTFR ( node )		713427	1					
ANR	713458	Callee	NQTFR		713427	0					
ANR	713459	Identifier	NQTFR		713427	0					
ANR	713460	ArgumentList	node		713427	1					
ANR	713461	Argument	node		713427	0					
ANR	713462	Identifier	node		713427	0					
ANR	713463	IfStatement	if ( qn -> greedy && IS_REPEAT_INFINITE ( qn -> upper ) )		713427	1					
ANR	713464	Condition	qn -> greedy && IS_REPEAT_INFINITE ( qn -> upper )	3150:8:69808:69850	713427	0	True				
ANR	713465	AndExpression	qn -> greedy && IS_REPEAT_INFINITE ( qn -> upper )		713427	0		&&			
ANR	713466	PtrMemberAccess	qn -> greedy		713427	0					
ANR	713467	Identifier	qn		713427	0					
ANR	713468	Identifier	greedy		713427	1					
ANR	713469	CallExpression	IS_REPEAT_INFINITE ( qn -> upper )		713427	1					
ANR	713470	Callee	IS_REPEAT_INFINITE		713427	0					
ANR	713471	Identifier	IS_REPEAT_INFINITE		713427	0					
ANR	713472	ArgumentList	qn -> upper		713427	1					
ANR	713473	Argument	qn -> upper		713427	0					
ANR	713474	PtrMemberAccess	qn -> upper		713427	0					
ANR	713475	Identifier	qn		713427	0					
ANR	713476	Identifier	upper		713427	1					
ANR	713477	CompoundStatement		10:6:188:236	713427	1					
ANR	713478	IdentifierDeclStatement	"Node * n = get_head_value_node ( next_node , 1 , reg ) ;"	3152:6:69887:69935	713427	0	True				
ANR	713479	IdentifierDecl	"* n = get_head_value_node ( next_node , 1 , reg )"		713427	0					
ANR	713480	IdentifierDeclType	Node *		713427	0					
ANR	713481	Identifier	n		713427	1					
ANR	713482	AssignmentExpression	"* n = get_head_value_node ( next_node , 1 , reg )"		713427	2		=			
ANR	713483	Identifier	n		713427	0					
ANR	713484	CallExpression	"get_head_value_node ( next_node , 1 , reg )"		713427	1					
ANR	713485	Callee	get_head_value_node		713427	0					
ANR	713486	Identifier	get_head_value_node		713427	0					
ANR	713487	ArgumentList	next_node		713427	1					
ANR	713488	Argument	next_node		713427	0					
ANR	713489	Identifier	next_node		713427	0					
ANR	713490	Argument	1		713427	1					
ANR	713491	PrimaryExpression	1		713427	0					
ANR	713492	Argument	reg		713427	2					
ANR	713493	Identifier	reg		713427	0					
ANR	713494	IfStatement	if ( IS_NOT_NULL ( n ) && NSTR ( n ) -> s [ 0 ] != '\\0' )		713427	1					
ANR	713495	Condition	IS_NOT_NULL ( n ) && NSTR ( n ) -> s [ 0 ] != '\\0'	3154:10:69985:70023	713427	0	True				
ANR	713496	AndExpression	IS_NOT_NULL ( n ) && NSTR ( n ) -> s [ 0 ] != '\\0'		713427	0		&&			
ANR	713497	CallExpression	IS_NOT_NULL ( n )		713427	0					
ANR	713498	Callee	IS_NOT_NULL		713427	0					
ANR	713499	Identifier	IS_NOT_NULL		713427	0					
ANR	713500	ArgumentList	n		713427	1					
ANR	713501	Argument	n		713427	0					
ANR	713502	Identifier	n		713427	0					
ANR	713503	EqualityExpression	NSTR ( n ) -> s [ 0 ] != '\\0'		713427	1		!=			
ANR	713504	ArrayIndexing	NSTR ( n ) -> s [ 0 ]		713427	0					
ANR	713505	PtrMemberAccess	NSTR ( n ) -> s		713427	0					
ANR	713506	CallExpression	NSTR ( n )		713427	0					
ANR	713507	Callee	NSTR		713427	0					
ANR	713508	Identifier	NSTR		713427	0					
ANR	713509	ArgumentList	n		713427	1					
ANR	713510	Argument	n		713427	0					
ANR	713511	Identifier	n		713427	0					
ANR	713512	Identifier	s		713427	1					
ANR	713513	PrimaryExpression	0		713427	1					
ANR	713514	PrimaryExpression	'\\0'		713427	1					
ANR	713515	CompoundStatement		12:51:327:327	713427	1					
ANR	713516	ExpressionStatement	qn -> next_head_exact = n	3155:1:70029:70052	713427	0	True				
ANR	713517	AssignmentExpression	qn -> next_head_exact = n		713427	0		=			
ANR	713518	PtrMemberAccess	qn -> next_head_exact		713427	0					
ANR	713519	Identifier	qn		713427	0					
ANR	713520	Identifier	next_head_exact		713427	1					
ANR	713521	Identifier	n		713427	1					
ANR	713522	IfStatement	if ( qn -> lower <= 1 )		713427	2					
ANR	713523	Condition	qn -> lower <= 1	3159:10:70130:70143	713427	0	True				
ANR	713524	RelationalExpression	qn -> lower <= 1		713427	0		<=			
ANR	713525	PtrMemberAccess	qn -> lower		713427	0					
ANR	713526	Identifier	qn		713427	0					
ANR	713527	Identifier	lower		713427	1					
ANR	713528	PrimaryExpression	1		713427	1					
ANR	713529	CompoundStatement		18:1:450:479	713427	1					
ANR	713530	IdentifierDeclStatement	int ttype = NTYPE ( qn -> target ) ;	3160:1:70149:70178	713427	0	True				
ANR	713531	IdentifierDecl	ttype = NTYPE ( qn -> target )		713427	0					
ANR	713532	IdentifierDeclType	int		713427	0					
ANR	713533	Identifier	ttype		713427	1					
ANR	713534	AssignmentExpression	ttype = NTYPE ( qn -> target )		713427	2		=			
ANR	713535	Identifier	ttype		713427	0					
ANR	713536	CallExpression	NTYPE ( qn -> target )		713427	1					
ANR	713537	Callee	NTYPE		713427	0					
ANR	713538	Identifier	NTYPE		713427	0					
ANR	713539	ArgumentList	qn -> target		713427	1					
ANR	713540	Argument	qn -> target		713427	0					
ANR	713541	PtrMemberAccess	qn -> target		713427	0					
ANR	713542	Identifier	qn		713427	0					
ANR	713543	Identifier	target		713427	1					
ANR	713544	IfStatement	if ( IS_NODE_TYPE_SIMPLE ( ttype ) )		713427	1					
ANR	713545	Condition	IS_NODE_TYPE_SIMPLE ( ttype )	3161:5:70185:70210	713427	0	True				
ANR	713546	CallExpression	IS_NODE_TYPE_SIMPLE ( ttype )		713427	0					
ANR	713547	Callee	IS_NODE_TYPE_SIMPLE		713427	0					
ANR	713548	Identifier	IS_NODE_TYPE_SIMPLE		713427	0					
ANR	713549	ArgumentList	ttype		713427	1					
ANR	713550	Argument	ttype		713427	0					
ANR	713551	Identifier	ttype		713427	0					
ANR	713552	CompoundStatement		20:3:519:530	713427	1					
ANR	713553	IdentifierDeclStatement	"Node * x , * y ;"	3162:3:70218:70229	713427	0	True				
ANR	713554	IdentifierDecl	* x		713427	0					
ANR	713555	IdentifierDeclType	Node *		713427	0					
ANR	713556	Identifier	x		713427	1					
ANR	713557	IdentifierDecl	* y		713427	1					
ANR	713558	IdentifierDeclType	Node *		713427	0					
ANR	713559	Identifier	y		713427	1					
ANR	713560	ExpressionStatement	"x = get_head_value_node ( qn -> target , 0 , reg )"	3163:3:70234:70277	713427	1	True				
ANR	713561	AssignmentExpression	"x = get_head_value_node ( qn -> target , 0 , reg )"		713427	0		=			
ANR	713562	Identifier	x		713427	0					
ANR	713563	CallExpression	"get_head_value_node ( qn -> target , 0 , reg )"		713427	1					
ANR	713564	Callee	get_head_value_node		713427	0					
ANR	713565	Identifier	get_head_value_node		713427	0					
ANR	713566	ArgumentList	qn -> target		713427	1					
ANR	713567	Argument	qn -> target		713427	0					
ANR	713568	PtrMemberAccess	qn -> target		713427	0					
ANR	713569	Identifier	qn		713427	0					
ANR	713570	Identifier	target		713427	1					
ANR	713571	Argument	0		713427	1					
ANR	713572	PrimaryExpression	0		713427	0					
ANR	713573	Argument	reg		713427	2					
ANR	713574	Identifier	reg		713427	0					
ANR	713575	IfStatement	if ( IS_NOT_NULL ( x ) )		713427	2					
ANR	713576	Condition	IS_NOT_NULL ( x )	3164:7:70286:70299	713427	0	True				
ANR	713577	CallExpression	IS_NOT_NULL ( x )		713427	0					
ANR	713578	Callee	IS_NOT_NULL		713427	0					
ANR	713579	Identifier	IS_NOT_NULL		713427	0					
ANR	713580	ArgumentList	x		713427	1					
ANR	713581	Argument	x		713427	0					
ANR	713582	Identifier	x		713427	0					
ANR	713583	CompoundStatement		22:23:603:603	713427	1					
ANR	713584	ExpressionStatement	"y = get_head_value_node ( next_node , 0 , reg )"	3165:5:70309:70352	713427	0	True				
ANR	713585	AssignmentExpression	"y = get_head_value_node ( next_node , 0 , reg )"		713427	0		=			
ANR	713586	Identifier	y		713427	0					
ANR	713587	CallExpression	"get_head_value_node ( next_node , 0 , reg )"		713427	1					
ANR	713588	Callee	get_head_value_node		713427	0					
ANR	713589	Identifier	get_head_value_node		713427	0					
ANR	713590	ArgumentList	next_node		713427	1					
ANR	713591	Argument	next_node		713427	0					
ANR	713592	Identifier	next_node		713427	0					
ANR	713593	Argument	0		713427	1					
ANR	713594	PrimaryExpression	0		713427	0					
ANR	713595	Argument	reg		713427	2					
ANR	713596	Identifier	reg		713427	0					
ANR	713597	IfStatement	"if ( IS_NOT_NULL ( y ) && is_not_included ( x , y , reg ) )"		713427	1					
ANR	713598	Condition	"IS_NOT_NULL ( y ) && is_not_included ( x , y , reg )"	3166:9:70363:70406	713427	0	True				
ANR	713599	AndExpression	"IS_NOT_NULL ( y ) && is_not_included ( x , y , reg )"		713427	0		&&			
ANR	713600	CallExpression	IS_NOT_NULL ( y )		713427	0					
ANR	713601	Callee	IS_NOT_NULL		713427	0					
ANR	713602	Identifier	IS_NOT_NULL		713427	0					
ANR	713603	ArgumentList	y		713427	1					
ANR	713604	Argument	y		713427	0					
ANR	713605	Identifier	y		713427	0					
ANR	713606	CallExpression	"is_not_included ( x , y , reg )"		713427	1					
ANR	713607	Callee	is_not_included		713427	0					
ANR	713608	Identifier	is_not_included		713427	0					
ANR	713609	ArgumentList	x		713427	1					
ANR	713610	Argument	x		713427	0					
ANR	713611	Identifier	x		713427	0					
ANR	713612	Argument	y		713427	1					
ANR	713613	Identifier	y		713427	0					
ANR	713614	Argument	reg		713427	2					
ANR	713615	Identifier	reg		713427	0					
ANR	713616	CompoundStatement		25:7:719:775	713427	1					
ANR	713617	IdentifierDeclStatement	Node * en = onig_node_new_enclose ( ENCLOSE_STOP_BACKTRACK ) ;	3167:7:70418:70474	713427	0	True				
ANR	713618	IdentifierDecl	* en = onig_node_new_enclose ( ENCLOSE_STOP_BACKTRACK )		713427	0					
ANR	713619	IdentifierDeclType	Node *		713427	0					
ANR	713620	Identifier	en		713427	1					
ANR	713621	AssignmentExpression	* en = onig_node_new_enclose ( ENCLOSE_STOP_BACKTRACK )		713427	2		=			
ANR	713622	Identifier	en		713427	0					
ANR	713623	CallExpression	onig_node_new_enclose ( ENCLOSE_STOP_BACKTRACK )		713427	1					
ANR	713624	Callee	onig_node_new_enclose		713427	0					
ANR	713625	Identifier	onig_node_new_enclose		713427	0					
ANR	713626	ArgumentList	ENCLOSE_STOP_BACKTRACK		713427	1					
ANR	713627	Argument	ENCLOSE_STOP_BACKTRACK		713427	0					
ANR	713628	Identifier	ENCLOSE_STOP_BACKTRACK		713427	0					
ANR	713629	ExpressionStatement	CHECK_NULL_RETURN_MEMERR ( en )	3168:7:70483:70511	713427	1	True				
ANR	713630	CallExpression	CHECK_NULL_RETURN_MEMERR ( en )		713427	0					
ANR	713631	Callee	CHECK_NULL_RETURN_MEMERR		713427	0					
ANR	713632	Identifier	CHECK_NULL_RETURN_MEMERR		713427	0					
ANR	713633	ArgumentList	en		713427	1					
ANR	713634	Argument	en		713427	0					
ANR	713635	Identifier	en		713427	0					
ANR	713636	ExpressionStatement	"SET_ENCLOSE_STATUS ( en , NST_STOP_BT_SIMPLE_REPEAT )"	3169:7:70520:70569	713427	2	True				
ANR	713637	CallExpression	"SET_ENCLOSE_STATUS ( en , NST_STOP_BT_SIMPLE_REPEAT )"		713427	0					
ANR	713638	Callee	SET_ENCLOSE_STATUS		713427	0					
ANR	713639	Identifier	SET_ENCLOSE_STATUS		713427	0					
ANR	713640	ArgumentList	en		713427	1					
ANR	713641	Argument	en		713427	0					
ANR	713642	Identifier	en		713427	0					
ANR	713643	Argument	NST_STOP_BT_SIMPLE_REPEAT		713427	1					
ANR	713644	Identifier	NST_STOP_BT_SIMPLE_REPEAT		713427	0					
ANR	713645	ExpressionStatement	"swap_node ( node , en )"	3170:7:70578:70597	713427	3	True				
ANR	713646	CallExpression	"swap_node ( node , en )"		713427	0					
ANR	713647	Callee	swap_node		713427	0					
ANR	713648	Identifier	swap_node		713427	0					
ANR	713649	ArgumentList	node		713427	1					
ANR	713650	Argument	node		713427	0					
ANR	713651	Identifier	node		713427	0					
ANR	713652	Argument	en		713427	1					
ANR	713653	Identifier	en		713427	0					
ANR	713654	ExpressionStatement	NENCLOSE ( node ) -> target = en	3171:7:70606:70633	713427	4	True				
ANR	713655	AssignmentExpression	NENCLOSE ( node ) -> target = en		713427	0		=			
ANR	713656	PtrMemberAccess	NENCLOSE ( node ) -> target		713427	0					
ANR	713657	CallExpression	NENCLOSE ( node )		713427	0					
ANR	713658	Callee	NENCLOSE		713427	0					
ANR	713659	Identifier	NENCLOSE		713427	0					
ANR	713660	ArgumentList	node		713427	1					
ANR	713661	Argument	node		713427	0					
ANR	713662	Identifier	node		713427	0					
ANR	713663	Identifier	target		713427	1					
ANR	713664	Identifier	en		713427	1					
ANR	713665	ElseStatement	else		713427	0					
ANR	713666	IfStatement	if ( type == NT_ENCLOSE )		713427	0					
ANR	713667	Condition	type == NT_ENCLOSE	3178:11:70679:70696	713427	0	True				
ANR	713668	EqualityExpression	type == NT_ENCLOSE		713427	0		==			
ANR	713669	Identifier	type		713427	0					
ANR	713670	Identifier	NT_ENCLOSE		713427	1					
ANR	713671	CompoundStatement		37:4:1006:1038	713427	1					
ANR	713672	IdentifierDeclStatement	EncloseNode * en = NENCLOSE ( node ) ;	3179:4:70705:70737	713427	0	True				
ANR	713673	IdentifierDecl	* en = NENCLOSE ( node )		713427	0					
ANR	713674	IdentifierDeclType	EncloseNode *		713427	0					
ANR	713675	Identifier	en		713427	1					
ANR	713676	AssignmentExpression	* en = NENCLOSE ( node )		713427	2		=			
ANR	713677	Identifier	en		713427	0					
ANR	713678	CallExpression	NENCLOSE ( node )		713427	1					
ANR	713679	Callee	NENCLOSE		713427	0					
ANR	713680	Identifier	NENCLOSE		713427	0					
ANR	713681	ArgumentList	node		713427	1					
ANR	713682	Argument	node		713427	0					
ANR	713683	Identifier	node		713427	0					
ANR	713684	IfStatement	if ( en -> type == ENCLOSE_MEMORY )		713427	1					
ANR	713685	Condition	en -> type == ENCLOSE_MEMORY	3180:8:70747:70772	713427	0	True				
ANR	713686	EqualityExpression	en -> type == ENCLOSE_MEMORY		713427	0		==			
ANR	713687	PtrMemberAccess	en -> type		713427	0					
ANR	713688	Identifier	en		713427	0					
ANR	713689	Identifier	type		713427	1					
ANR	713690	Identifier	ENCLOSE_MEMORY		713427	1					
ANR	713691	CompoundStatement		38:36:1076:1076	713427	1					
ANR	713692	ExpressionStatement	node = en -> target	3181:6:70783:70800	713427	0	True				
ANR	713693	AssignmentExpression	node = en -> target		713427	0		=			
ANR	713694	Identifier	node		713427	0					
ANR	713695	PtrMemberAccess	en -> target		713427	1					
ANR	713696	Identifier	en		713427	0					
ANR	713697	Identifier	target		713427	1					
ANR	713698	GotoStatement	goto retry ;	3182:6:70808:70818	713427	1	True				
ANR	713699	Identifier	retry		713427	0					
ANR	713700	ReturnStatement	return 0 ;	3185:2:70832:70840	713427	4	True				
ANR	713701	PrimaryExpression	0		713427	0					
ANR	713702	ReturnType	static int		713427	1					
ANR	713703	Identifier	next_setup		713427	2					
ANR	713704	ParameterList	"Node * node , Node * next_node , regex_t * reg"		713427	3					
ANR	713705	Parameter	Node * node	3142:11:69655:69664	713427	0	True				
ANR	713706	ParameterType	Node *		713427	0					
ANR	713707	Identifier	node		713427	1					
ANR	713708	Parameter	Node * next_node	3142:23:69667:69681	713427	1	True				
ANR	713709	ParameterType	Node *		713427	0					
ANR	713710	Identifier	next_node		713427	1					
ANR	713711	Parameter	regex_t * reg	3142:40:69684:69695	713427	2	True				
ANR	713712	ParameterType	regex_t *		713427	0					
ANR	713713	Identifier	reg		713427	1					
ANR	713714	CFGEntryNode	ENTRY		713427		True				
ANR	713715	CFGExitNode	EXIT		713427		True				
ANR	713716	Symbol	* qn		713427						
ANR	713717	Symbol	qn -> greedy		713427						
ANR	713718	Symbol	IS_NOT_NULL		713427						
ANR	713719	Symbol	next_node		713427						
ANR	713720	Symbol	* NENCLOSE		713427						
ANR	713721	Symbol	qn -> next_head_exact		713427						
ANR	713722	Symbol	type		713427						
ANR	713723	Symbol	NQTFR		713427						
ANR	713724	Symbol	onig_node_new_enclose		713427						
ANR	713725	Symbol	* en		713427						
ANR	713726	Symbol	qn -> lower		713427						
ANR	713727	Symbol	IS_NODE_TYPE_SIMPLE		713427						
ANR	713728	Symbol	reg		713427						
ANR	713729	Symbol	NT_QTFR		713427						
ANR	713730	Symbol	is_not_included		713427						
ANR	713731	Symbol	NENCLOSE		713427						
ANR	713732	Symbol	ENCLOSE_MEMORY		713427						
ANR	713733	Symbol	en -> type		713427						
ANR	713734	Symbol	IS_REPEAT_INFINITE		713427						
ANR	713735	Symbol	qn		713427						
ANR	713736	Symbol	NSTR ( n ) -> s		713427						
ANR	713737	Symbol	* * NSTR		713427						
ANR	713738	Symbol	NSTR		713427						
ANR	713739	Symbol	ENCLOSE_STOP_BACKTRACK		713427						
ANR	713740	Symbol	en		713427						
ANR	713741	Symbol	* NSTR		713427						
ANR	713742	Symbol	n		713427						
ANR	713743	Symbol	qn -> target		713427						
ANR	713744	Symbol	NENCLOSE ( node ) -> target		713427						
ANR	713745	Symbol	get_head_value_node		713427						
ANR	713746	Symbol	node		713427						
ANR	713747	Symbol	qn -> upper		713427						
ANR	713748	Symbol	NST_STOP_BT_SIMPLE_REPEAT		713427						
ANR	713749	Symbol	NT_ENCLOSE		713427						
ANR	713750	Symbol	en -> target		713427						
ANR	713751	Symbol	ttype		713427						
ANR	713752	Symbol	x		713427						
ANR	713753	Symbol	y		713427						
ANR	713754	Symbol	NTYPE		713427						
ANR	713755	Symbol	* NSTR ( n ) -> s		713427						
ANR	713756	Function	update_string_node_case_fold	3189:0:70846:71726							
ANR	713757	FunctionDef	"update_string_node_case_fold (regex_t * reg , Node * node)"		713756	0					
ANR	713758	CompoundStatement		3191:0:70912:71726	713756	0					
ANR	713759	IdentifierDeclStatement	"UChar * p , * end , buf [ ONIGENC_MBC_CASE_FOLD_MAXLEN ] ;"	3192:2:70916:70965	713756	0	True				
ANR	713760	IdentifierDecl	* p		713756	0					
ANR	713761	IdentifierDeclType	UChar *		713756	0					
ANR	713762	Identifier	p		713756	1					
ANR	713763	IdentifierDecl	* end		713756	1					
ANR	713764	IdentifierDeclType	UChar *		713756	0					
ANR	713765	Identifier	end		713756	1					
ANR	713766	IdentifierDecl	buf [ ONIGENC_MBC_CASE_FOLD_MAXLEN ]		713756	2					
ANR	713767	IdentifierDeclType	UChar [ ONIGENC_MBC_CASE_FOLD_MAXLEN ]		713756	0					
ANR	713768	Identifier	buf		713756	1					
ANR	713769	Identifier	ONIGENC_MBC_CASE_FOLD_MAXLEN		713756	2					
ANR	713770	IdentifierDeclStatement	"UChar * sbuf , * ebuf , * sp ;"	3193:2:70969:70992	713756	1	True				
ANR	713771	IdentifierDecl	* sbuf		713756	0					
ANR	713772	IdentifierDeclType	UChar *		713756	0					
ANR	713773	Identifier	sbuf		713756	1					
ANR	713774	IdentifierDecl	* ebuf		713756	1					
ANR	713775	IdentifierDeclType	UChar *		713756	0					
ANR	713776	Identifier	ebuf		713756	1					
ANR	713777	IdentifierDecl	* sp		713756	2					
ANR	713778	IdentifierDeclType	UChar *		713756	0					
ANR	713779	Identifier	sp		713756	1					
ANR	713780	IdentifierDeclStatement	"int r , i , len , sbuf_size ;"	3194:2:70996:71020	713756	2	True				
ANR	713781	IdentifierDecl	r		713756	0					
ANR	713782	IdentifierDeclType	int		713756	0					
ANR	713783	Identifier	r		713756	1					
ANR	713784	IdentifierDecl	i		713756	1					
ANR	713785	IdentifierDeclType	int		713756	0					
ANR	713786	Identifier	i		713756	1					
ANR	713787	IdentifierDecl	len		713756	2					
ANR	713788	IdentifierDeclType	int		713756	0					
ANR	713789	Identifier	len		713756	1					
ANR	713790	IdentifierDecl	sbuf_size		713756	3					
ANR	713791	IdentifierDeclType	int		713756	0					
ANR	713792	Identifier	sbuf_size		713756	1					
ANR	713793	IdentifierDeclStatement	StrNode * sn = NSTR ( node ) ;	3195:2:71024:71048	713756	3	True				
ANR	713794	IdentifierDecl	* sn = NSTR ( node )		713756	0					
ANR	713795	IdentifierDeclType	StrNode *		713756	0					
ANR	713796	Identifier	sn		713756	1					
ANR	713797	AssignmentExpression	* sn = NSTR ( node )		713756	2		=			
ANR	713798	Identifier	sn		713756	0					
ANR	713799	CallExpression	NSTR ( node )		713756	1					
ANR	713800	Callee	NSTR		713756	0					
ANR	713801	Identifier	NSTR		713756	0					
ANR	713802	ArgumentList	node		713756	1					
ANR	713803	Argument	node		713756	0					
ANR	713804	Identifier	node		713756	0					
ANR	713805	ExpressionStatement	end = sn -> end	3197:2:71053:71066	713756	4	True				
ANR	713806	AssignmentExpression	end = sn -> end		713756	0		=			
ANR	713807	Identifier	end		713756	0					
ANR	713808	PtrMemberAccess	sn -> end		713756	1					
ANR	713809	Identifier	sn		713756	0					
ANR	713810	Identifier	end		713756	1					
ANR	713811	ExpressionStatement	sbuf_size = ( end - sn -> s ) * 2	3198:2:71070:71099	713756	5	True				
ANR	713812	AssignmentExpression	sbuf_size = ( end - sn -> s ) * 2		713756	0		=			
ANR	713813	Identifier	sbuf_size		713756	0					
ANR	713814	MultiplicativeExpression	( end - sn -> s ) * 2		713756	1		*			
ANR	713815	AdditiveExpression	end - sn -> s		713756	0		-			
ANR	713816	Identifier	end		713756	0					
ANR	713817	PtrMemberAccess	sn -> s		713756	1					
ANR	713818	Identifier	sn		713756	0					
ANR	713819	Identifier	s		713756	1					
ANR	713820	PrimaryExpression	2		713756	1					
ANR	713821	ExpressionStatement	sbuf = ( UChar * ) xmalloc ( sbuf_size )	3199:2:71103:71137	713756	6	True				
ANR	713822	AssignmentExpression	sbuf = ( UChar * ) xmalloc ( sbuf_size )		713756	0		=			
ANR	713823	Identifier	sbuf		713756	0					
ANR	713824	CastExpression	( UChar * ) xmalloc ( sbuf_size )		713756	1					
ANR	713825	CastTarget	UChar *		713756	0					
ANR	713826	CallExpression	xmalloc ( sbuf_size )		713756	1					
ANR	713827	Callee	xmalloc		713756	0					
ANR	713828	Identifier	xmalloc		713756	0					
ANR	713829	ArgumentList	sbuf_size		713756	1					
ANR	713830	Argument	sbuf_size		713756	0					
ANR	713831	Identifier	sbuf_size		713756	0					
ANR	713832	ExpressionStatement	CHECK_NULL_RETURN_MEMERR ( sbuf )	3200:2:71141:71171	713756	7	True				
ANR	713833	CallExpression	CHECK_NULL_RETURN_MEMERR ( sbuf )		713756	0					
ANR	713834	Callee	CHECK_NULL_RETURN_MEMERR		713756	0					
ANR	713835	Identifier	CHECK_NULL_RETURN_MEMERR		713756	0					
ANR	713836	ArgumentList	sbuf		713756	1					
ANR	713837	Argument	sbuf		713756	0					
ANR	713838	Identifier	sbuf		713756	0					
ANR	713839	ExpressionStatement	ebuf = sbuf + sbuf_size	3201:2:71175:71198	713756	8	True				
ANR	713840	AssignmentExpression	ebuf = sbuf + sbuf_size		713756	0		=			
ANR	713841	Identifier	ebuf		713756	0					
ANR	713842	AdditiveExpression	sbuf + sbuf_size		713756	1		+			
ANR	713843	Identifier	sbuf		713756	0					
ANR	713844	Identifier	sbuf_size		713756	1					
ANR	713845	ExpressionStatement	sp = sbuf	3203:2:71203:71212	713756	9	True				
ANR	713846	AssignmentExpression	sp = sbuf		713756	0		=			
ANR	713847	Identifier	sp		713756	0					
ANR	713848	Identifier	sbuf		713756	1					
ANR	713849	ExpressionStatement	p = sn -> s	3204:2:71216:71225	713756	10	True				
ANR	713850	AssignmentExpression	p = sn -> s		713756	0		=			
ANR	713851	Identifier	p		713756	0					
ANR	713852	PtrMemberAccess	sn -> s		713756	1					
ANR	713853	Identifier	sn		713756	0					
ANR	713854	Identifier	s		713756	1					
ANR	713855	WhileStatement	while ( p < end )		713756	11					
ANR	713856	Condition	p < end	3205:9:71236:71242	713756	0	True				
ANR	713857	RelationalExpression	p < end		713756	0		<			
ANR	713858	Identifier	p		713756	0					
ANR	713859	Identifier	end		713756	1					
ANR	713860	CompoundStatement		15:18:332:332	713756	1					
ANR	713861	ExpressionStatement	"len = ONIGENC_MBC_CASE_FOLD ( reg -> enc , reg -> case_fold_flag , & p , end , buf )"	3206:4:71251:71323	713756	0	True				
ANR	713862	AssignmentExpression	"len = ONIGENC_MBC_CASE_FOLD ( reg -> enc , reg -> case_fold_flag , & p , end , buf )"		713756	0		=			
ANR	713863	Identifier	len		713756	0					
ANR	713864	CallExpression	"ONIGENC_MBC_CASE_FOLD ( reg -> enc , reg -> case_fold_flag , & p , end , buf )"		713756	1					
ANR	713865	Callee	ONIGENC_MBC_CASE_FOLD		713756	0					
ANR	713866	Identifier	ONIGENC_MBC_CASE_FOLD		713756	0					
ANR	713867	ArgumentList	reg -> enc		713756	1					
ANR	713868	Argument	reg -> enc		713756	0					
ANR	713869	PtrMemberAccess	reg -> enc		713756	0					
ANR	713870	Identifier	reg		713756	0					
ANR	713871	Identifier	enc		713756	1					
ANR	713872	Argument	reg -> case_fold_flag		713756	1					
ANR	713873	PtrMemberAccess	reg -> case_fold_flag		713756	0					
ANR	713874	Identifier	reg		713756	0					
ANR	713875	Identifier	case_fold_flag		713756	1					
ANR	713876	Argument	& p		713756	2					
ANR	713877	UnaryOperationExpression	& p		713756	0					
ANR	713878	UnaryOperator	&		713756	0					
ANR	713879	Identifier	p		713756	1					
ANR	713880	Argument	end		713756	3					
ANR	713881	Identifier	end		713756	0					
ANR	713882	Argument	buf		713756	4					
ANR	713883	Identifier	buf		713756	0					
ANR	713884	ForStatement	for ( i = 0 ; i < len ; i ++ )		713756	1					
ANR	713885	ForInit	i = 0 ;	3207:9:71334:71339	713756	0	True				
ANR	713886	AssignmentExpression	i = 0		713756	0		=			
ANR	713887	Identifier	i		713756	0					
ANR	713888	PrimaryExpression	0		713756	1					
ANR	713889	Condition	i < len	3207:16:71341:71347	713756	1	True				
ANR	713890	RelationalExpression	i < len		713756	0		<			
ANR	713891	Identifier	i		713756	0					
ANR	713892	Identifier	len		713756	1					
ANR	713893	PostIncDecOperationExpression	i ++	3207:25:71350:71352	713756	2	True				
ANR	713894	Identifier	i		713756	0					
ANR	713895	IncDec	++		713756	1					
ANR	713896	CompoundStatement		17:30:442:442	713756	3					
ANR	713897	IfStatement	if ( sp >= ebuf )		713756	0					
ANR	713898	Condition	sp >= ebuf	3208:10:71367:71376	713756	0	True				
ANR	713899	RelationalExpression	sp >= ebuf		713756	0		>=			
ANR	713900	Identifier	sp		713756	0					
ANR	713901	Identifier	ebuf		713756	1					
ANR	713902	CompoundStatement		18:22:466:466	713756	1					
ANR	713903	ExpressionStatement	"sbuf = ( UChar * ) xrealloc ( sbuf , sbuf_size * 2 )"	3209:8:71389:71434	713756	0	True				
ANR	713904	AssignmentExpression	"sbuf = ( UChar * ) xrealloc ( sbuf , sbuf_size * 2 )"		713756	0		=			
ANR	713905	Identifier	sbuf		713756	0					
ANR	713906	CastExpression	"( UChar * ) xrealloc ( sbuf , sbuf_size * 2 )"		713756	1					
ANR	713907	CastTarget	UChar *		713756	0					
ANR	713908	CallExpression	"xrealloc ( sbuf , sbuf_size * 2 )"		713756	1					
ANR	713909	Callee	xrealloc		713756	0					
ANR	713910	Identifier	xrealloc		713756	0					
ANR	713911	ArgumentList	sbuf		713756	1					
ANR	713912	Argument	sbuf		713756	0					
ANR	713913	Identifier	sbuf		713756	0					
ANR	713914	Argument	sbuf_size * 2		713756	1					
ANR	713915	MultiplicativeExpression	sbuf_size * 2		713756	0		*			
ANR	713916	Identifier	sbuf_size		713756	0					
ANR	713917	PrimaryExpression	2		713756	1					
ANR	713918	ExpressionStatement	CHECK_NULL_RETURN_MEMERR ( sbuf )	3210:8:71444:71474	713756	1	True				
ANR	713919	CallExpression	CHECK_NULL_RETURN_MEMERR ( sbuf )		713756	0					
ANR	713920	Callee	CHECK_NULL_RETURN_MEMERR		713756	0					
ANR	713921	Identifier	CHECK_NULL_RETURN_MEMERR		713756	0					
ANR	713922	ArgumentList	sbuf		713756	1					
ANR	713923	Argument	sbuf		713756	0					
ANR	713924	Identifier	sbuf		713756	0					
ANR	713925	ExpressionStatement	sp = sbuf + sbuf_size	3211:8:71484:71505	713756	2	True				
ANR	713926	AssignmentExpression	sp = sbuf + sbuf_size		713756	0		=			
ANR	713927	Identifier	sp		713756	0					
ANR	713928	AdditiveExpression	sbuf + sbuf_size		713756	1		+			
ANR	713929	Identifier	sbuf		713756	0					
ANR	713930	Identifier	sbuf_size		713756	1					
ANR	713931	ExpressionStatement	sbuf_size *= 2	3212:8:71515:71529	713756	3	True				
ANR	713932	AssignmentExpression	sbuf_size *= 2		713756	0		*=			
ANR	713933	Identifier	sbuf_size		713756	0					
ANR	713934	PrimaryExpression	2		713756	1					
ANR	713935	ExpressionStatement	ebuf = sbuf + sbuf_size	3213:8:71539:71562	713756	4	True				
ANR	713936	AssignmentExpression	ebuf = sbuf + sbuf_size		713756	0		=			
ANR	713937	Identifier	ebuf		713756	0					
ANR	713938	AdditiveExpression	sbuf + sbuf_size		713756	1		+			
ANR	713939	Identifier	sbuf		713756	0					
ANR	713940	Identifier	sbuf_size		713756	1					
ANR	713941	ExpressionStatement	* sp ++ = buf [ i ]	3216:6:71579:71593	713756	1	True				
ANR	713942	AssignmentExpression	* sp ++ = buf [ i ]		713756	0		=			
ANR	713943	UnaryOperationExpression	* sp ++		713756	0					
ANR	713944	UnaryOperator	*		713756	0					
ANR	713945	PostIncDecOperationExpression	sp ++		713756	1					
ANR	713946	Identifier	sp		713756	0					
ANR	713947	IncDec	++		713756	1					
ANR	713948	ArrayIndexing	buf [ i ]		713756	1					
ANR	713949	Identifier	buf		713756	0					
ANR	713950	Identifier	i		713756	1					
ANR	713951	ExpressionStatement	"r = onig_node_str_set ( node , sbuf , sp )"	3220:2:71608:71645	713756	12	True				
ANR	713952	AssignmentExpression	"r = onig_node_str_set ( node , sbuf , sp )"		713756	0		=			
ANR	713953	Identifier	r		713756	0					
ANR	713954	CallExpression	"onig_node_str_set ( node , sbuf , sp )"		713756	1					
ANR	713955	Callee	onig_node_str_set		713756	0					
ANR	713956	Identifier	onig_node_str_set		713756	0					
ANR	713957	ArgumentList	node		713756	1					
ANR	713958	Argument	node		713756	0					
ANR	713959	Identifier	node		713756	0					
ANR	713960	Argument	sbuf		713756	1					
ANR	713961	Identifier	sbuf		713756	0					
ANR	713962	Argument	sp		713756	2					
ANR	713963	Identifier	sp		713756	0					
ANR	713964	IfStatement	if ( r != 0 )		713756	13					
ANR	713965	Condition	r != 0	3221:6:71653:71658	713756	0	True				
ANR	713966	EqualityExpression	r != 0		713756	0		!=			
ANR	713967	Identifier	r		713756	0					
ANR	713968	PrimaryExpression	0		713756	1					
ANR	713969	CompoundStatement		31:14:748:748	713756	1					
ANR	713970	ExpressionStatement	xfree ( sbuf )	3222:4:71667:71678	713756	0	True				
ANR	713971	CallExpression	xfree ( sbuf )		713756	0					
ANR	713972	Callee	xfree		713756	0					
ANR	713973	Identifier	xfree		713756	0					
ANR	713974	ArgumentList	sbuf		713756	1					
ANR	713975	Argument	sbuf		713756	0					
ANR	713976	Identifier	sbuf		713756	0					
ANR	713977	ReturnStatement	return r ;	3223:4:71684:71692	713756	1	True				
ANR	713978	Identifier	r		713756	0					
ANR	713979	ExpressionStatement	xfree ( sbuf )	3226:2:71701:71712	713756	14	True				
ANR	713980	CallExpression	xfree ( sbuf )		713756	0					
ANR	713981	Callee	xfree		713756	0					
ANR	713982	Identifier	xfree		713756	0					
ANR	713983	ArgumentList	sbuf		713756	1					
ANR	713984	Argument	sbuf		713756	0					
ANR	713985	Identifier	sbuf		713756	0					
ANR	713986	ReturnStatement	return 0 ;	3227:2:71716:71724	713756	15	True				
ANR	713987	PrimaryExpression	0		713756	0					
ANR	713988	ReturnType	static int		713756	1					
ANR	713989	Identifier	update_string_node_case_fold		713756	2					
ANR	713990	ParameterList	"regex_t * reg , Node * node"		713756	3					
ANR	713991	Parameter	regex_t * reg	3190:29:70886:70897	713756	0	True				
ANR	713992	ParameterType	regex_t *		713756	0					
ANR	713993	Identifier	reg		713756	1					
ANR	713994	Parameter	Node * node	3190:43:70900:70909	713756	1	True				
ANR	713995	ParameterType	Node *		713756	0					
ANR	713996	Identifier	node		713756	1					
ANR	713997	CFGEntryNode	ENTRY		713756		True				
ANR	713998	CFGExitNode	EXIT		713756		True				
ANR	713999	Symbol	ebuf		713756						
ANR	714000	Symbol	* sn		713756						
ANR	714001	Symbol	sn -> s		713756						
ANR	714002	Symbol	len		713756						
ANR	714003	Symbol	reg		713756						
ANR	714004	Symbol	sbuf		713756						
ANR	714005	Symbol	xmalloc		713756						
ANR	714006	Symbol	end		713756						
ANR	714007	Symbol	sn		713756						
ANR	714008	Symbol	sn -> end		713756						
ANR	714009	Symbol	xrealloc		713756						
ANR	714010	Symbol	sp		713756						
ANR	714011	Symbol	* buf		713756						
ANR	714012	Symbol	* sp ++		713756						
ANR	714013	Symbol	onig_node_str_set		713756						
ANR	714014	Symbol	NSTR		713756						
ANR	714015	Symbol	sbuf_size		713756						
ANR	714016	Symbol	i		713756						
ANR	714017	Symbol	reg -> enc		713756						
ANR	714018	Symbol	p		713756						
ANR	714019	Symbol	node		713756						
ANR	714020	Symbol	buf		713756						
ANR	714021	Symbol	r		713756						
ANR	714022	Symbol	* i		713756						
ANR	714023	Symbol	ONIGENC_MBC_CASE_FOLD		713756						
ANR	714024	Symbol	& p		713756						
ANR	714025	Symbol	reg -> case_fold_flag		713756						
ANR	714026	Symbol	* reg		713756						
ANR	714027	Function	expand_case_fold_make_rem_string	3230:0:71729:72138							
ANR	714028	FunctionDef	"expand_case_fold_make_rem_string (Node * * rnode , UChar * s , UChar * end , regex_t * reg)"		714027	0					
ANR	714029	CompoundStatement		3233:0:71828:72138	714027	0					
ANR	714030	IdentifierDeclStatement	int r ;	3234:2:71832:71837	714027	0	True				
ANR	714031	IdentifierDecl	r		714027	0					
ANR	714032	IdentifierDeclType	int		714027	0					
ANR	714033	Identifier	r		714027	1					
ANR	714034	IdentifierDeclStatement	Node * node ;	3235:2:71841:71851	714027	1	True				
ANR	714035	IdentifierDecl	* node		714027	0					
ANR	714036	IdentifierDeclType	Node *		714027	0					
ANR	714037	Identifier	node		714027	1					
ANR	714038	ExpressionStatement	"node = onig_node_new_str ( s , end )"	3237:2:71856:71888	714027	2	True				
ANR	714039	AssignmentExpression	"node = onig_node_new_str ( s , end )"		714027	0		=			
ANR	714040	Identifier	node		714027	0					
ANR	714041	CallExpression	"onig_node_new_str ( s , end )"		714027	1					
ANR	714042	Callee	onig_node_new_str		714027	0					
ANR	714043	Identifier	onig_node_new_str		714027	0					
ANR	714044	ArgumentList	s		714027	1					
ANR	714045	Argument	s		714027	0					
ANR	714046	Identifier	s		714027	0					
ANR	714047	Argument	end		714027	1					
ANR	714048	Identifier	end		714027	0					
ANR	714049	IfStatement	if ( IS_NULL ( node ) )		714027	3					
ANR	714050	Condition	IS_NULL ( node )	3238:6:71896:71908	714027	0	True				
ANR	714051	CallExpression	IS_NULL ( node )		714027	0					
ANR	714052	Callee	IS_NULL		714027	0					
ANR	714053	Identifier	IS_NULL		714027	0					
ANR	714054	ArgumentList	node		714027	1					
ANR	714055	Argument	node		714027	0					
ANR	714056	Identifier	node		714027	0					
ANR	714057	ReturnStatement	return ONIGERR_MEMORY ;	3238:21:71911:71932	714027	1	True				
ANR	714058	Identifier	ONIGERR_MEMORY		714027	0					
ANR	714059	ExpressionStatement	"r = update_string_node_case_fold ( reg , node )"	3240:2:71937:71980	714027	4	True				
ANR	714060	AssignmentExpression	"r = update_string_node_case_fold ( reg , node )"		714027	0		=			
ANR	714061	Identifier	r		714027	0					
ANR	714062	CallExpression	"update_string_node_case_fold ( reg , node )"		714027	1					
ANR	714063	Callee	update_string_node_case_fold		714027	0					
ANR	714064	Identifier	update_string_node_case_fold		714027	0					
ANR	714065	ArgumentList	reg		714027	1					
ANR	714066	Argument	reg		714027	0					
ANR	714067	Identifier	reg		714027	0					
ANR	714068	Argument	node		714027	1					
ANR	714069	Identifier	node		714027	0					
ANR	714070	IfStatement	if ( r != 0 )		714027	5					
ANR	714071	Condition	r != 0	3241:6:71988:71993	714027	0	True				
ANR	714072	EqualityExpression	r != 0		714027	0		!=			
ANR	714073	Identifier	r		714027	0					
ANR	714074	PrimaryExpression	0		714027	1					
ANR	714075	CompoundStatement		9:14:167:167	714027	1					
ANR	714076	ExpressionStatement	onig_node_free ( node )	3242:4:72002:72022	714027	0	True				
ANR	714077	CallExpression	onig_node_free ( node )		714027	0					
ANR	714078	Callee	onig_node_free		714027	0					
ANR	714079	Identifier	onig_node_free		714027	0					
ANR	714080	ArgumentList	node		714027	1					
ANR	714081	Argument	node		714027	0					
ANR	714082	Identifier	node		714027	0					
ANR	714083	ReturnStatement	return r ;	3243:4:72028:72036	714027	1	True				
ANR	714084	Identifier	r		714027	0					
ANR	714085	ExpressionStatement	NSTRING_SET_AMBIG ( node )	3246:2:72045:72068	714027	6	True				
ANR	714086	CallExpression	NSTRING_SET_AMBIG ( node )		714027	0					
ANR	714087	Callee	NSTRING_SET_AMBIG		714027	0					
ANR	714088	Identifier	NSTRING_SET_AMBIG		714027	0					
ANR	714089	ArgumentList	node		714027	1					
ANR	714090	Argument	node		714027	0					
ANR	714091	Identifier	node		714027	0					
ANR	714092	ExpressionStatement	NSTRING_SET_DONT_GET_OPT_INFO ( node )	3247:2:72072:72107	714027	7	True				
ANR	714093	CallExpression	NSTRING_SET_DONT_GET_OPT_INFO ( node )		714027	0					
ANR	714094	Callee	NSTRING_SET_DONT_GET_OPT_INFO		714027	0					
ANR	714095	Identifier	NSTRING_SET_DONT_GET_OPT_INFO		714027	0					
ANR	714096	ArgumentList	node		714027	1					
ANR	714097	Argument	node		714027	0					
ANR	714098	Identifier	node		714027	0					
ANR	714099	ExpressionStatement	* rnode = node	3248:2:72111:72124	714027	8	True				
ANR	714100	AssignmentExpression	* rnode = node		714027	0		=			
ANR	714101	UnaryOperationExpression	* rnode		714027	0					
ANR	714102	UnaryOperator	*		714027	0					
ANR	714103	Identifier	rnode		714027	1					
ANR	714104	Identifier	node		714027	1					
ANR	714105	ReturnStatement	return 0 ;	3249:2:72128:72136	714027	9	True				
ANR	714106	PrimaryExpression	0		714027	0					
ANR	714107	ReturnType	static int		714027	1					
ANR	714108	Identifier	expand_case_fold_make_rem_string		714027	2					
ANR	714109	ParameterList	"Node * * rnode , UChar * s , UChar * end , regex_t * reg"		714027	3					
ANR	714110	Parameter	Node * * rnode	3231:33:71773:71784	714027	0	True				
ANR	714111	ParameterType	Node * *		714027	0					
ANR	714112	Identifier	rnode		714027	1					
ANR	714113	Parameter	UChar * s	3231:47:71787:71794	714027	1	True				
ANR	714114	ParameterType	UChar *		714027	0					
ANR	714115	Identifier	s		714027	1					
ANR	714116	Parameter	UChar * end	3231:57:71797:71806	714027	2	True				
ANR	714117	ParameterType	UChar *		714027	0					
ANR	714118	Identifier	end		714027	1					
ANR	714119	Parameter	regex_t * reg	3232:5:71814:71825	714027	3	True				
ANR	714120	ParameterType	regex_t *		714027	0					
ANR	714121	Identifier	reg		714027	1					
ANR	714122	CFGEntryNode	ENTRY		714027		True				
ANR	714123	CFGExitNode	EXIT		714027		True				
ANR	714124	Symbol	node		714027						
ANR	714125	Symbol	r		714027						
ANR	714126	Symbol	s		714027						
ANR	714127	Symbol	update_string_node_case_fold		714027						
ANR	714128	Symbol	IS_NULL		714027						
ANR	714129	Symbol	* rnode		714027						
ANR	714130	Symbol	reg		714027						
ANR	714131	Symbol	ONIGERR_MEMORY		714027						
ANR	714132	Symbol	end		714027						
ANR	714133	Symbol	onig_node_new_str		714027						
ANR	714134	Symbol	rnode		714027						
ANR	714135	Function	expand_case_fold_string_alt	3252:0:72141:74640							
ANR	714136	FunctionDef	"expand_case_fold_string_alt (int item_num , OnigCaseFoldCodeItem items [ ] , UChar * p , int slen , UChar * end , regex_t * reg , Node * * rnode)"		714135	0					
ANR	714137	CompoundStatement		3256:0:72298:74640	714135	0					
ANR	714138	IdentifierDeclStatement	"int r , i , j , len , varlen ;"	3257:2:72302:72326	714135	0	True				
ANR	714139	IdentifierDecl	r		714135	0					
ANR	714140	IdentifierDeclType	int		714135	0					
ANR	714141	Identifier	r		714135	1					
ANR	714142	IdentifierDecl	i		714135	1					
ANR	714143	IdentifierDeclType	int		714135	0					
ANR	714144	Identifier	i		714135	1					
ANR	714145	IdentifierDecl	j		714135	2					
ANR	714146	IdentifierDeclType	int		714135	0					
ANR	714147	Identifier	j		714135	1					
ANR	714148	IdentifierDecl	len		714135	3					
ANR	714149	IdentifierDeclType	int		714135	0					
ANR	714150	Identifier	len		714135	1					
ANR	714151	IdentifierDecl	varlen		714135	4					
ANR	714152	IdentifierDeclType	int		714135	0					
ANR	714153	Identifier	varlen		714135	1					
ANR	714154	IdentifierDeclStatement	"Node * anode , * var_anode , * snode , * xnode , * an ;"	3258:2:72330:72374	714135	1	True				
ANR	714155	IdentifierDecl	* anode		714135	0					
ANR	714156	IdentifierDeclType	Node *		714135	0					
ANR	714157	Identifier	anode		714135	1					
ANR	714158	IdentifierDecl	* var_anode		714135	1					
ANR	714159	IdentifierDeclType	Node *		714135	0					
ANR	714160	Identifier	var_anode		714135	1					
ANR	714161	IdentifierDecl	* snode		714135	2					
ANR	714162	IdentifierDeclType	Node *		714135	0					
ANR	714163	Identifier	snode		714135	1					
ANR	714164	IdentifierDecl	* xnode		714135	3					
ANR	714165	IdentifierDeclType	Node *		714135	0					
ANR	714166	Identifier	xnode		714135	1					
ANR	714167	IdentifierDecl	* an		714135	4					
ANR	714168	IdentifierDeclType	Node *		714135	0					
ANR	714169	Identifier	an		714135	1					
ANR	714170	IdentifierDeclStatement	UChar buf [ ONIGENC_CODE_TO_MBC_MAXLEN ] ;	3259:2:72378:72415	714135	2	True				
ANR	714171	IdentifierDecl	buf [ ONIGENC_CODE_TO_MBC_MAXLEN ]		714135	0					
ANR	714172	IdentifierDeclType	UChar [ ONIGENC_CODE_TO_MBC_MAXLEN ]		714135	0					
ANR	714173	Identifier	buf		714135	1					
ANR	714174	Identifier	ONIGENC_CODE_TO_MBC_MAXLEN		714135	2					
ANR	714175	ExpressionStatement	* rnode = var_anode = NULL_NODE	3261:2:72420:72450	714135	3	True				
ANR	714176	AssignmentExpression	* rnode = var_anode = NULL_NODE		714135	0		=			
ANR	714177	UnaryOperationExpression	* rnode		714135	0					
ANR	714178	UnaryOperator	*		714135	0					
ANR	714179	Identifier	rnode		714135	1					
ANR	714180	AssignmentExpression	var_anode = NULL_NODE		714135	1		=			
ANR	714181	Identifier	var_anode		714135	0					
ANR	714182	Identifier	NULL_NODE		714135	1					
ANR	714183	ExpressionStatement	varlen = 0	3263:2:72455:72465	714135	4	True				
ANR	714184	AssignmentExpression	varlen = 0		714135	0		=			
ANR	714185	Identifier	varlen		714135	0					
ANR	714186	PrimaryExpression	0		714135	1					
ANR	714187	ForStatement	for ( i = 0 ; i < item_num ; i ++ )		714135	5					
ANR	714188	ForInit	i = 0 ;	3264:7:72474:72479	714135	0	True				
ANR	714189	AssignmentExpression	i = 0		714135	0		=			
ANR	714190	Identifier	i		714135	0					
ANR	714191	PrimaryExpression	0		714135	1					
ANR	714192	Condition	i < item_num	3264:14:72481:72492	714135	1	True				
ANR	714193	RelationalExpression	i < item_num		714135	0		<			
ANR	714194	Identifier	i		714135	0					
ANR	714195	Identifier	item_num		714135	1					
ANR	714196	PostIncDecOperationExpression	i ++	3264:28:72495:72497	714135	2	True				
ANR	714197	Identifier	i		714135	0					
ANR	714198	IncDec	++		714135	1					
ANR	714199	CompoundStatement		9:33:201:201	714135	3					
ANR	714200	IfStatement	if ( items [ i ] . byte_len != slen )		714135	0					
ANR	714201	Condition	items [ i ] . byte_len != slen	3265:8:72510:72534	714135	0	True				
ANR	714202	EqualityExpression	items [ i ] . byte_len != slen		714135	0		!=			
ANR	714203	MemberAccess	items [ i ] . byte_len		714135	0					
ANR	714204	ArrayIndexing	items [ i ]		714135	0					
ANR	714205	Identifier	items		714135	0					
ANR	714206	Identifier	i		714135	1					
ANR	714207	Identifier	byte_len		714135	1					
ANR	714208	Identifier	slen		714135	1					
ANR	714209	CompoundStatement		10:35:238:238	714135	1					
ANR	714210	ExpressionStatement	varlen = 1	3266:6:72545:72555	714135	0	True				
ANR	714211	AssignmentExpression	varlen = 1		714135	0		=			
ANR	714212	Identifier	varlen		714135	0					
ANR	714213	PrimaryExpression	1		714135	1					
ANR	714214	BreakStatement	break ;	3267:6:72563:72568	714135	1	True				
ANR	714215	IfStatement	if ( varlen != 0 )		714135	6					
ANR	714216	Condition	varlen != 0	3271:6:72587:72597	714135	0	True				
ANR	714217	EqualityExpression	varlen != 0		714135	0		!=			
ANR	714218	Identifier	varlen		714135	0					
ANR	714219	PrimaryExpression	0		714135	1					
ANR	714220	CompoundStatement		16:19:301:301	714135	1					
ANR	714221	ExpressionStatement	"* rnode = var_anode = onig_node_new_alt ( NULL_NODE , NULL_NODE )"	3272:4:72606:72666	714135	0	True				
ANR	714222	AssignmentExpression	"* rnode = var_anode = onig_node_new_alt ( NULL_NODE , NULL_NODE )"		714135	0		=			
ANR	714223	UnaryOperationExpression	* rnode		714135	0					
ANR	714224	UnaryOperator	*		714135	0					
ANR	714225	Identifier	rnode		714135	1					
ANR	714226	AssignmentExpression	"var_anode = onig_node_new_alt ( NULL_NODE , NULL_NODE )"		714135	1		=			
ANR	714227	Identifier	var_anode		714135	0					
ANR	714228	CallExpression	"onig_node_new_alt ( NULL_NODE , NULL_NODE )"		714135	1					
ANR	714229	Callee	onig_node_new_alt		714135	0					
ANR	714230	Identifier	onig_node_new_alt		714135	0					
ANR	714231	ArgumentList	NULL_NODE		714135	1					
ANR	714232	Argument	NULL_NODE		714135	0					
ANR	714233	Identifier	NULL_NODE		714135	0					
ANR	714234	Argument	NULL_NODE		714135	1					
ANR	714235	Identifier	NULL_NODE		714135	0					
ANR	714236	IfStatement	if ( IS_NULL ( var_anode ) )		714135	1					
ANR	714237	Condition	IS_NULL ( var_anode )	3273:8:72676:72693	714135	0	True				
ANR	714238	CallExpression	IS_NULL ( var_anode )		714135	0					
ANR	714239	Callee	IS_NULL		714135	0					
ANR	714240	Identifier	IS_NULL		714135	0					
ANR	714241	ArgumentList	var_anode		714135	1					
ANR	714242	Argument	var_anode		714135	0					
ANR	714243	Identifier	var_anode		714135	0					
ANR	714244	ReturnStatement	return ONIGERR_MEMORY ;	3273:28:72696:72717	714135	1	True				
ANR	714245	Identifier	ONIGERR_MEMORY		714135	0					
ANR	714246	ExpressionStatement	"xnode = onig_node_new_list ( NULL , NULL )"	3275:4:72724:72762	714135	2	True				
ANR	714247	AssignmentExpression	"xnode = onig_node_new_list ( NULL , NULL )"		714135	0		=			
ANR	714248	Identifier	xnode		714135	0					
ANR	714249	CallExpression	"onig_node_new_list ( NULL , NULL )"		714135	1					
ANR	714250	Callee	onig_node_new_list		714135	0					
ANR	714251	Identifier	onig_node_new_list		714135	0					
ANR	714252	ArgumentList	NULL		714135	1					
ANR	714253	Argument	NULL		714135	0					
ANR	714254	Identifier	NULL		714135	0					
ANR	714255	Argument	NULL		714135	1					
ANR	714256	Identifier	NULL		714135	0					
ANR	714257	IfStatement	if ( IS_NULL ( xnode ) )		714135	3					
ANR	714258	Condition	IS_NULL ( xnode )	3276:8:72772:72785	714135	0	True				
ANR	714259	CallExpression	IS_NULL ( xnode )		714135	0					
ANR	714260	Callee	IS_NULL		714135	0					
ANR	714261	Identifier	IS_NULL		714135	0					
ANR	714262	ArgumentList	xnode		714135	1					
ANR	714263	Argument	xnode		714135	0					
ANR	714264	Identifier	xnode		714135	0					
ANR	714265	GotoStatement	goto mem_err ;	3276:24:72788:72800	714135	1	True				
ANR	714266	Identifier	mem_err		714135	0					
ANR	714267	ExpressionStatement	NCAR ( var_anode ) = xnode	3277:4:72806:72829	714135	4	True				
ANR	714268	AssignmentExpression	NCAR ( var_anode ) = xnode		714135	0		=			
ANR	714269	CallExpression	NCAR ( var_anode )		714135	0					
ANR	714270	Callee	NCAR		714135	0					
ANR	714271	Identifier	NCAR		714135	0					
ANR	714272	ArgumentList	var_anode		714135	1					
ANR	714273	Argument	var_anode		714135	0					
ANR	714274	Identifier	var_anode		714135	0					
ANR	714275	Identifier	xnode		714135	1					
ANR	714276	ExpressionStatement	"anode = onig_node_new_alt ( NULL_NODE , NULL_NODE )"	3279:4:72836:72883	714135	5	True				
ANR	714277	AssignmentExpression	"anode = onig_node_new_alt ( NULL_NODE , NULL_NODE )"		714135	0		=			
ANR	714278	Identifier	anode		714135	0					
ANR	714279	CallExpression	"onig_node_new_alt ( NULL_NODE , NULL_NODE )"		714135	1					
ANR	714280	Callee	onig_node_new_alt		714135	0					
ANR	714281	Identifier	onig_node_new_alt		714135	0					
ANR	714282	ArgumentList	NULL_NODE		714135	1					
ANR	714283	Argument	NULL_NODE		714135	0					
ANR	714284	Identifier	NULL_NODE		714135	0					
ANR	714285	Argument	NULL_NODE		714135	1					
ANR	714286	Identifier	NULL_NODE		714135	0					
ANR	714287	IfStatement	if ( IS_NULL ( anode ) )		714135	6					
ANR	714288	Condition	IS_NULL ( anode )	3280:8:72893:72906	714135	0	True				
ANR	714289	CallExpression	IS_NULL ( anode )		714135	0					
ANR	714290	Callee	IS_NULL		714135	0					
ANR	714291	Identifier	IS_NULL		714135	0					
ANR	714292	ArgumentList	anode		714135	1					
ANR	714293	Argument	anode		714135	0					
ANR	714294	Identifier	anode		714135	0					
ANR	714295	GotoStatement	goto mem_err ;	3280:24:72909:72921	714135	1	True				
ANR	714296	Identifier	mem_err		714135	0					
ANR	714297	ExpressionStatement	NCAR ( xnode ) = anode	3281:4:72927:72946	714135	7	True				
ANR	714298	AssignmentExpression	NCAR ( xnode ) = anode		714135	0		=			
ANR	714299	CallExpression	NCAR ( xnode )		714135	0					
ANR	714300	Callee	NCAR		714135	0					
ANR	714301	Identifier	NCAR		714135	0					
ANR	714302	ArgumentList	xnode		714135	1					
ANR	714303	Argument	xnode		714135	0					
ANR	714304	Identifier	xnode		714135	0					
ANR	714305	Identifier	anode		714135	1					
ANR	714306	ElseStatement	else		714135	0					
ANR	714307	CompoundStatement		28:7:660:660	714135	0					
ANR	714308	ExpressionStatement	"* rnode = anode = onig_node_new_alt ( NULL_NODE , NULL_NODE )"	3284:4:72965:73021	714135	0	True				
ANR	714309	AssignmentExpression	"* rnode = anode = onig_node_new_alt ( NULL_NODE , NULL_NODE )"		714135	0		=			
ANR	714310	UnaryOperationExpression	* rnode		714135	0					
ANR	714311	UnaryOperator	*		714135	0					
ANR	714312	Identifier	rnode		714135	1					
ANR	714313	AssignmentExpression	"anode = onig_node_new_alt ( NULL_NODE , NULL_NODE )"		714135	1		=			
ANR	714314	Identifier	anode		714135	0					
ANR	714315	CallExpression	"onig_node_new_alt ( NULL_NODE , NULL_NODE )"		714135	1					
ANR	714316	Callee	onig_node_new_alt		714135	0					
ANR	714317	Identifier	onig_node_new_alt		714135	0					
ANR	714318	ArgumentList	NULL_NODE		714135	1					
ANR	714319	Argument	NULL_NODE		714135	0					
ANR	714320	Identifier	NULL_NODE		714135	0					
ANR	714321	Argument	NULL_NODE		714135	1					
ANR	714322	Identifier	NULL_NODE		714135	0					
ANR	714323	IfStatement	if ( IS_NULL ( anode ) )		714135	1					
ANR	714324	Condition	IS_NULL ( anode )	3285:8:73031:73044	714135	0	True				
ANR	714325	CallExpression	IS_NULL ( anode )		714135	0					
ANR	714326	Callee	IS_NULL		714135	0					
ANR	714327	Identifier	IS_NULL		714135	0					
ANR	714328	ArgumentList	anode		714135	1					
ANR	714329	Argument	anode		714135	0					
ANR	714330	Identifier	anode		714135	0					
ANR	714331	ReturnStatement	return ONIGERR_MEMORY ;	3285:24:73047:73068	714135	1	True				
ANR	714332	Identifier	ONIGERR_MEMORY		714135	0					
ANR	714333	ExpressionStatement	"snode = onig_node_new_str ( p , p + slen )"	3288:2:73077:73115	714135	7	True				
ANR	714334	AssignmentExpression	"snode = onig_node_new_str ( p , p + slen )"		714135	0		=			
ANR	714335	Identifier	snode		714135	0					
ANR	714336	CallExpression	"onig_node_new_str ( p , p + slen )"		714135	1					
ANR	714337	Callee	onig_node_new_str		714135	0					
ANR	714338	Identifier	onig_node_new_str		714135	0					
ANR	714339	ArgumentList	p		714135	1					
ANR	714340	Argument	p		714135	0					
ANR	714341	Identifier	p		714135	0					
ANR	714342	Argument	p + slen		714135	1					
ANR	714343	AdditiveExpression	p + slen		714135	0		+			
ANR	714344	Identifier	p		714135	0					
ANR	714345	Identifier	slen		714135	1					
ANR	714346	IfStatement	if ( IS_NULL ( snode ) )		714135	8					
ANR	714347	Condition	IS_NULL ( snode )	3289:6:73123:73136	714135	0	True				
ANR	714348	CallExpression	IS_NULL ( snode )		714135	0					
ANR	714349	Callee	IS_NULL		714135	0					
ANR	714350	Identifier	IS_NULL		714135	0					
ANR	714351	ArgumentList	snode		714135	1					
ANR	714352	Argument	snode		714135	0					
ANR	714353	Identifier	snode		714135	0					
ANR	714354	GotoStatement	goto mem_err ;	3289:22:73139:73151	714135	1	True				
ANR	714355	Identifier	mem_err		714135	0					
ANR	714356	ExpressionStatement	NCAR ( anode ) = snode	3291:2:73156:73175	714135	9	True				
ANR	714357	AssignmentExpression	NCAR ( anode ) = snode		714135	0		=			
ANR	714358	CallExpression	NCAR ( anode )		714135	0					
ANR	714359	Callee	NCAR		714135	0					
ANR	714360	Identifier	NCAR		714135	0					
ANR	714361	ArgumentList	anode		714135	1					
ANR	714362	Argument	anode		714135	0					
ANR	714363	Identifier	anode		714135	0					
ANR	714364	Identifier	snode		714135	1					
ANR	714365	ForStatement	for ( i = 0 ; i < item_num ; i ++ )		714135	10					
ANR	714366	ForInit	i = 0 ;	3293:7:73185:73190	714135	0	True				
ANR	714367	AssignmentExpression	i = 0		714135	0		=			
ANR	714368	Identifier	i		714135	0					
ANR	714369	PrimaryExpression	0		714135	1					
ANR	714370	Condition	i < item_num	3293:14:73192:73203	714135	1	True				
ANR	714371	RelationalExpression	i < item_num		714135	0		<			
ANR	714372	Identifier	i		714135	0					
ANR	714373	Identifier	item_num		714135	1					
ANR	714374	PostIncDecOperationExpression	i ++	3293:28:73206:73208	714135	2	True				
ANR	714375	Identifier	i		714135	0					
ANR	714376	IncDec	++		714135	1					
ANR	714377	CompoundStatement		38:33:912:912	714135	3					
ANR	714378	ExpressionStatement	"snode = onig_node_new_str ( NULL , NULL )"	3294:4:73217:73254	714135	0	True				
ANR	714379	AssignmentExpression	"snode = onig_node_new_str ( NULL , NULL )"		714135	0		=			
ANR	714380	Identifier	snode		714135	0					
ANR	714381	CallExpression	"onig_node_new_str ( NULL , NULL )"		714135	1					
ANR	714382	Callee	onig_node_new_str		714135	0					
ANR	714383	Identifier	onig_node_new_str		714135	0					
ANR	714384	ArgumentList	NULL		714135	1					
ANR	714385	Argument	NULL		714135	0					
ANR	714386	Identifier	NULL		714135	0					
ANR	714387	Argument	NULL		714135	1					
ANR	714388	Identifier	NULL		714135	0					
ANR	714389	IfStatement	if ( IS_NULL ( snode ) )		714135	1					
ANR	714390	Condition	IS_NULL ( snode )	3295:8:73264:73277	714135	0	True				
ANR	714391	CallExpression	IS_NULL ( snode )		714135	0					
ANR	714392	Callee	IS_NULL		714135	0					
ANR	714393	Identifier	IS_NULL		714135	0					
ANR	714394	ArgumentList	snode		714135	1					
ANR	714395	Argument	snode		714135	0					
ANR	714396	Identifier	snode		714135	0					
ANR	714397	GotoStatement	goto mem_err ;	3295:24:73280:73292	714135	1	True				
ANR	714398	Identifier	mem_err		714135	0					
ANR	714399	ForStatement	for ( j = 0 ; j < items [ i ] . code_len ; j ++ )		714135	2					
ANR	714400	ForInit	j = 0 ;	3297:9:73308:73313	714135	0	True				
ANR	714401	AssignmentExpression	j = 0		714135	0		=			
ANR	714402	Identifier	j		714135	0					
ANR	714403	PrimaryExpression	0		714135	1					
ANR	714404	Condition	j < items [ i ] . code_len	3297:16:73315:73335	714135	1	True				
ANR	714405	RelationalExpression	j < items [ i ] . code_len		714135	0		<			
ANR	714406	Identifier	j		714135	0					
ANR	714407	MemberAccess	items [ i ] . code_len		714135	1					
ANR	714408	ArrayIndexing	items [ i ]		714135	0					
ANR	714409	Identifier	items		714135	0					
ANR	714410	Identifier	i		714135	1					
ANR	714411	Identifier	code_len		714135	1					
ANR	714412	PostIncDecOperationExpression	j ++	3297:39:73338:73340	714135	2	True				
ANR	714413	Identifier	j		714135	0					
ANR	714414	IncDec	++		714135	1					
ANR	714415	CompoundStatement		42:44:1044:1044	714135	3					
ANR	714416	ExpressionStatement	"len = ONIGENC_CODE_TO_MBC ( reg -> enc , items [ i ] . code [ j ] , buf )"	3298:6:73351:73409	714135	0	True				
ANR	714417	AssignmentExpression	"len = ONIGENC_CODE_TO_MBC ( reg -> enc , items [ i ] . code [ j ] , buf )"		714135	0		=			
ANR	714418	Identifier	len		714135	0					
ANR	714419	CallExpression	"ONIGENC_CODE_TO_MBC ( reg -> enc , items [ i ] . code [ j ] , buf )"		714135	1					
ANR	714420	Callee	ONIGENC_CODE_TO_MBC		714135	0					
ANR	714421	Identifier	ONIGENC_CODE_TO_MBC		714135	0					
ANR	714422	ArgumentList	reg -> enc		714135	1					
ANR	714423	Argument	reg -> enc		714135	0					
ANR	714424	PtrMemberAccess	reg -> enc		714135	0					
ANR	714425	Identifier	reg		714135	0					
ANR	714426	Identifier	enc		714135	1					
ANR	714427	Argument	items [ i ] . code [ j ]		714135	1					
ANR	714428	ArrayIndexing	items [ i ] . code [ j ]		714135	0					
ANR	714429	MemberAccess	items [ i ] . code		714135	0					
ANR	714430	ArrayIndexing	items [ i ]		714135	0					
ANR	714431	Identifier	items		714135	0					
ANR	714432	Identifier	i		714135	1					
ANR	714433	Identifier	code		714135	1					
ANR	714434	Identifier	j		714135	1					
ANR	714435	Argument	buf		714135	2					
ANR	714436	Identifier	buf		714135	0					
ANR	714437	IfStatement	if ( len < 0 )		714135	1					
ANR	714438	Condition	len < 0	3299:10:73421:73427	714135	0	True				
ANR	714439	RelationalExpression	len < 0		714135	0		<			
ANR	714440	Identifier	len		714135	0					
ANR	714441	PrimaryExpression	0		714135	1					
ANR	714442	CompoundStatement		44:19:1131:1131	714135	1					
ANR	714443	ExpressionStatement	r = len	3300:1:73433:73440	714135	0	True				
ANR	714444	AssignmentExpression	r = len		714135	0		=			
ANR	714445	Identifier	r		714135	0					
ANR	714446	Identifier	len		714135	1					
ANR	714447	GotoStatement	goto mem_err2 ;	3301:1:73443:73456	714135	1	True				
ANR	714448	Identifier	mem_err2		714135	0					
ANR	714449	ExpressionStatement	"r = onig_node_str_cat ( snode , buf , buf + len )"	3304:6:73473:73517	714135	2	True				
ANR	714450	AssignmentExpression	"r = onig_node_str_cat ( snode , buf , buf + len )"		714135	0		=			
ANR	714451	Identifier	r		714135	0					
ANR	714452	CallExpression	"onig_node_str_cat ( snode , buf , buf + len )"		714135	1					
ANR	714453	Callee	onig_node_str_cat		714135	0					
ANR	714454	Identifier	onig_node_str_cat		714135	0					
ANR	714455	ArgumentList	snode		714135	1					
ANR	714456	Argument	snode		714135	0					
ANR	714457	Identifier	snode		714135	0					
ANR	714458	Argument	buf		714135	1					
ANR	714459	Identifier	buf		714135	0					
ANR	714460	Argument	buf + len		714135	2					
ANR	714461	AdditiveExpression	buf + len		714135	0		+			
ANR	714462	Identifier	buf		714135	0					
ANR	714463	Identifier	len		714135	1					
ANR	714464	IfStatement	if ( r != 0 )		714135	3					
ANR	714465	Condition	r != 0	3305:10:73529:73534	714135	0	True				
ANR	714466	EqualityExpression	r != 0		714135	0		!=			
ANR	714467	Identifier	r		714135	0					
ANR	714468	PrimaryExpression	0		714135	1					
ANR	714469	GotoStatement	goto mem_err2 ;	3305:18:73537:73550	714135	1	True				
ANR	714470	Identifier	mem_err2		714135	0					
ANR	714471	ExpressionStatement	"an = onig_node_new_alt ( NULL_NODE , NULL_NODE )"	3308:4:73563:73607	714135	3	True				
ANR	714472	AssignmentExpression	"an = onig_node_new_alt ( NULL_NODE , NULL_NODE )"		714135	0		=			
ANR	714473	Identifier	an		714135	0					
ANR	714474	CallExpression	"onig_node_new_alt ( NULL_NODE , NULL_NODE )"		714135	1					
ANR	714475	Callee	onig_node_new_alt		714135	0					
ANR	714476	Identifier	onig_node_new_alt		714135	0					
ANR	714477	ArgumentList	NULL_NODE		714135	1					
ANR	714478	Argument	NULL_NODE		714135	0					
ANR	714479	Identifier	NULL_NODE		714135	0					
ANR	714480	Argument	NULL_NODE		714135	1					
ANR	714481	Identifier	NULL_NODE		714135	0					
ANR	714482	IfStatement	if ( IS_NULL ( an ) )		714135	4					
ANR	714483	Condition	IS_NULL ( an )	3309:8:73617:73627	714135	0	True				
ANR	714484	CallExpression	IS_NULL ( an )		714135	0					
ANR	714485	Callee	IS_NULL		714135	0					
ANR	714486	Identifier	IS_NULL		714135	0					
ANR	714487	ArgumentList	an		714135	1					
ANR	714488	Argument	an		714135	0					
ANR	714489	Identifier	an		714135	0					
ANR	714490	CompoundStatement		54:21:1331:1331	714135	1					
ANR	714491	GotoStatement	goto mem_err2 ;	3310:6:73638:73651	714135	0	True				
ANR	714492	Identifier	mem_err2		714135	0					
ANR	714493	IfStatement	if ( items [ i ] . byte_len != slen )		714135	5					
ANR	714494	Condition	items [ i ] . byte_len != slen	3313:8:73668:73692	714135	0	True				
ANR	714495	EqualityExpression	items [ i ] . byte_len != slen		714135	0		!=			
ANR	714496	MemberAccess	items [ i ] . byte_len		714135	0					
ANR	714497	ArrayIndexing	items [ i ]		714135	0					
ANR	714498	Identifier	items		714135	0					
ANR	714499	Identifier	i		714135	1					
ANR	714500	Identifier	byte_len		714135	1					
ANR	714501	Identifier	slen		714135	1					
ANR	714502	CompoundStatement		60:6:1421:1453	714135	1					
ANR	714503	IdentifierDeclStatement	Node * rem ;	3314:6:73703:73712	714135	0	True				
ANR	714504	IdentifierDecl	* rem		714135	0					
ANR	714505	IdentifierDeclType	Node *		714135	0					
ANR	714506	Identifier	rem		714135	1					
ANR	714507	IdentifierDeclStatement	UChar * q = p + items [ i ] . byte_len ;	3315:6:73720:73752	714135	1	True				
ANR	714508	IdentifierDecl	* q = p + items [ i ] . byte_len		714135	0					
ANR	714509	IdentifierDeclType	UChar *		714135	0					
ANR	714510	Identifier	q		714135	1					
ANR	714511	AssignmentExpression	* q = p + items [ i ] . byte_len		714135	2		=			
ANR	714512	Identifier	q		714135	0					
ANR	714513	AdditiveExpression	p + items [ i ] . byte_len		714135	1		+			
ANR	714514	Identifier	p		714135	0					
ANR	714515	MemberAccess	items [ i ] . byte_len		714135	1					
ANR	714516	ArrayIndexing	items [ i ]		714135	0					
ANR	714517	Identifier	items		714135	0					
ANR	714518	Identifier	i		714135	1					
ANR	714519	Identifier	byte_len		714135	1					
ANR	714520	IfStatement	if ( q < end )		714135	2					
ANR	714521	Condition	q < end	3317:10:73765:73771	714135	0	True				
ANR	714522	RelationalExpression	q < end		714135	0		<			
ANR	714523	Identifier	q		714135	0					
ANR	714524	Identifier	end		714135	1					
ANR	714525	CompoundStatement		62:19:1475:1475	714135	1					
ANR	714526	ExpressionStatement	"r = expand_case_fold_make_rem_string ( & rem , q , end , reg )"	3318:8:73784:73839	714135	0	True				
ANR	714527	AssignmentExpression	"r = expand_case_fold_make_rem_string ( & rem , q , end , reg )"		714135	0		=			
ANR	714528	Identifier	r		714135	0					
ANR	714529	CallExpression	"expand_case_fold_make_rem_string ( & rem , q , end , reg )"		714135	1					
ANR	714530	Callee	expand_case_fold_make_rem_string		714135	0					
ANR	714531	Identifier	expand_case_fold_make_rem_string		714135	0					
ANR	714532	ArgumentList	& rem		714135	1					
ANR	714533	Argument	& rem		714135	0					
ANR	714534	UnaryOperationExpression	& rem		714135	0					
ANR	714535	UnaryOperator	&		714135	0					
ANR	714536	Identifier	rem		714135	1					
ANR	714537	Argument	q		714135	1					
ANR	714538	Identifier	q		714135	0					
ANR	714539	Argument	end		714135	2					
ANR	714540	Identifier	end		714135	0					
ANR	714541	Argument	reg		714135	3					
ANR	714542	Identifier	reg		714135	0					
ANR	714543	IfStatement	if ( r != 0 )		714135	1					
ANR	714544	Condition	r != 0	3319:12:73853:73858	714135	0	True				
ANR	714545	EqualityExpression	r != 0		714135	0		!=			
ANR	714546	Identifier	r		714135	0					
ANR	714547	PrimaryExpression	0		714135	1					
ANR	714548	CompoundStatement		64:20:1562:1562	714135	1					
ANR	714549	ExpressionStatement	onig_node_free ( an )	3320:10:73873:73891	714135	0	True				
ANR	714550	CallExpression	onig_node_free ( an )		714135	0					
ANR	714551	Callee	onig_node_free		714135	0					
ANR	714552	Identifier	onig_node_free		714135	0					
ANR	714553	ArgumentList	an		714135	1					
ANR	714554	Argument	an		714135	0					
ANR	714555	Identifier	an		714135	0					
ANR	714556	GotoStatement	goto mem_err2 ;	3321:10:73903:73916	714135	1	True				
ANR	714557	Identifier	mem_err2		714135	0					
ANR	714558	ExpressionStatement	"xnode = onig_node_list_add ( NULL_NODE , snode )"	3324:8:73937:73981	714135	2	True				
ANR	714559	AssignmentExpression	"xnode = onig_node_list_add ( NULL_NODE , snode )"		714135	0		=			
ANR	714560	Identifier	xnode		714135	0					
ANR	714561	CallExpression	"onig_node_list_add ( NULL_NODE , snode )"		714135	1					
ANR	714562	Callee	onig_node_list_add		714135	0					
ANR	714563	Identifier	onig_node_list_add		714135	0					
ANR	714564	ArgumentList	NULL_NODE		714135	1					
ANR	714565	Argument	NULL_NODE		714135	0					
ANR	714566	Identifier	NULL_NODE		714135	0					
ANR	714567	Argument	snode		714135	1					
ANR	714568	Identifier	snode		714135	0					
ANR	714569	IfStatement	if ( IS_NULL ( xnode ) )		714135	3					
ANR	714570	Condition	IS_NULL ( xnode )	3325:12:73995:74008	714135	0	True				
ANR	714571	CallExpression	IS_NULL ( xnode )		714135	0					
ANR	714572	Callee	IS_NULL		714135	0					
ANR	714573	Identifier	IS_NULL		714135	0					
ANR	714574	ArgumentList	xnode		714135	1					
ANR	714575	Argument	xnode		714135	0					
ANR	714576	Identifier	xnode		714135	0					
ANR	714577	CompoundStatement		70:28:1712:1712	714135	1					
ANR	714578	ExpressionStatement	onig_node_free ( an )	3326:10:74023:74041	714135	0	True				
ANR	714579	CallExpression	onig_node_free ( an )		714135	0					
ANR	714580	Callee	onig_node_free		714135	0					
ANR	714581	Identifier	onig_node_free		714135	0					
ANR	714582	ArgumentList	an		714135	1					
ANR	714583	Argument	an		714135	0					
ANR	714584	Identifier	an		714135	0					
ANR	714585	ExpressionStatement	onig_node_free ( rem )	3327:10:74053:74072	714135	1	True				
ANR	714586	CallExpression	onig_node_free ( rem )		714135	0					
ANR	714587	Callee	onig_node_free		714135	0					
ANR	714588	Identifier	onig_node_free		714135	0					
ANR	714589	ArgumentList	rem		714135	1					
ANR	714590	Argument	rem		714135	0					
ANR	714591	Identifier	rem		714135	0					
ANR	714592	GotoStatement	goto mem_err2 ;	3328:10:74084:74097	714135	2	True				
ANR	714593	Identifier	mem_err2		714135	0					
ANR	714594	IfStatement	"if ( IS_NULL ( onig_node_list_add ( xnode , rem ) ) )"		714135	4					
ANR	714595	Condition	"IS_NULL ( onig_node_list_add ( xnode , rem ) )"	3330:12:74121:74159	714135	0	True				
ANR	714596	CallExpression	"IS_NULL ( onig_node_list_add ( xnode , rem ) )"		714135	0					
ANR	714597	Callee	IS_NULL		714135	0					
ANR	714598	Identifier	IS_NULL		714135	0					
ANR	714599	ArgumentList	"onig_node_list_add ( xnode , rem )"		714135	1					
ANR	714600	Argument	"onig_node_list_add ( xnode , rem )"		714135	0					
ANR	714601	CallExpression	"onig_node_list_add ( xnode , rem )"		714135	0					
ANR	714602	Callee	onig_node_list_add		714135	0					
ANR	714603	Identifier	onig_node_list_add		714135	0					
ANR	714604	ArgumentList	xnode		714135	1					
ANR	714605	Argument	xnode		714135	0					
ANR	714606	Identifier	xnode		714135	0					
ANR	714607	Argument	rem		714135	1					
ANR	714608	Identifier	rem		714135	0					
ANR	714609	CompoundStatement		75:53:1863:1863	714135	1					
ANR	714610	ExpressionStatement	onig_node_free ( an )	3331:10:74174:74192	714135	0	True				
ANR	714611	CallExpression	onig_node_free ( an )		714135	0					
ANR	714612	Callee	onig_node_free		714135	0					
ANR	714613	Identifier	onig_node_free		714135	0					
ANR	714614	ArgumentList	an		714135	1					
ANR	714615	Argument	an		714135	0					
ANR	714616	Identifier	an		714135	0					
ANR	714617	ExpressionStatement	onig_node_free ( xnode )	3332:10:74204:74225	714135	1	True				
ANR	714618	CallExpression	onig_node_free ( xnode )		714135	0					
ANR	714619	Callee	onig_node_free		714135	0					
ANR	714620	Identifier	onig_node_free		714135	0					
ANR	714621	ArgumentList	xnode		714135	1					
ANR	714622	Argument	xnode		714135	0					
ANR	714623	Identifier	xnode		714135	0					
ANR	714624	ExpressionStatement	onig_node_free ( rem )	3333:10:74237:74256	714135	2	True				
ANR	714625	CallExpression	onig_node_free ( rem )		714135	0					
ANR	714626	Callee	onig_node_free		714135	0					
ANR	714627	Identifier	onig_node_free		714135	0					
ANR	714628	ArgumentList	rem		714135	1					
ANR	714629	Argument	rem		714135	0					
ANR	714630	Identifier	rem		714135	0					
ANR	714631	GotoStatement	goto mem_err ;	3334:10:74268:74280	714135	3	True				
ANR	714632	Identifier	mem_err		714135	0					
ANR	714633	ExpressionStatement	NCAR ( an ) = xnode	3337:8:74301:74317	714135	5	True				
ANR	714634	AssignmentExpression	NCAR ( an ) = xnode		714135	0		=			
ANR	714635	CallExpression	NCAR ( an )		714135	0					
ANR	714636	Callee	NCAR		714135	0					
ANR	714637	Identifier	NCAR		714135	0					
ANR	714638	ArgumentList	an		714135	1					
ANR	714639	Argument	an		714135	0					
ANR	714640	Identifier	an		714135	0					
ANR	714641	Identifier	xnode		714135	1					
ANR	714642	ElseStatement	else		714135	0					
ANR	714643	CompoundStatement		84:11:2039:2039	714135	0					
ANR	714644	ExpressionStatement	NCAR ( an ) = snode	3340:8:74348:74364	714135	0	True				
ANR	714645	AssignmentExpression	NCAR ( an ) = snode		714135	0		=			
ANR	714646	CallExpression	NCAR ( an )		714135	0					
ANR	714647	Callee	NCAR		714135	0					
ANR	714648	Identifier	NCAR		714135	0					
ANR	714649	ArgumentList	an		714135	1					
ANR	714650	Argument	an		714135	0					
ANR	714651	Identifier	an		714135	0					
ANR	714652	Identifier	snode		714135	1					
ANR	714653	ExpressionStatement	NCDR ( var_anode ) = an	3343:6:74381:74401	714135	3	True				
ANR	714654	AssignmentExpression	NCDR ( var_anode ) = an		714135	0		=			
ANR	714655	CallExpression	NCDR ( var_anode )		714135	0					
ANR	714656	Callee	NCDR		714135	0					
ANR	714657	Identifier	NCDR		714135	0					
ANR	714658	ArgumentList	var_anode		714135	1					
ANR	714659	Argument	var_anode		714135	0					
ANR	714660	Identifier	var_anode		714135	0					
ANR	714661	Identifier	an		714135	1					
ANR	714662	ExpressionStatement	var_anode = an	3344:6:74409:74423	714135	4	True				
ANR	714663	AssignmentExpression	var_anode = an		714135	0		=			
ANR	714664	Identifier	var_anode		714135	0					
ANR	714665	Identifier	an		714135	1					
ANR	714666	ElseStatement	else		714135	0					
ANR	714667	CompoundStatement		91:9:2141:2141	714135	0					
ANR	714668	ExpressionStatement	NCAR ( an ) = snode	3347:6:74448:74468	714135	0	True				
ANR	714669	AssignmentExpression	NCAR ( an ) = snode		714135	0		=			
ANR	714670	CallExpression	NCAR ( an )		714135	0					
ANR	714671	Callee	NCAR		714135	0					
ANR	714672	Identifier	NCAR		714135	0					
ANR	714673	ArgumentList	an		714135	1					
ANR	714674	Argument	an		714135	0					
ANR	714675	Identifier	an		714135	0					
ANR	714676	Identifier	snode		714135	1					
ANR	714677	ExpressionStatement	NCDR ( anode ) = an	3348:6:74476:74492	714135	1	True				
ANR	714678	AssignmentExpression	NCDR ( anode ) = an		714135	0		=			
ANR	714679	CallExpression	NCDR ( anode )		714135	0					
ANR	714680	Callee	NCDR		714135	0					
ANR	714681	Identifier	NCDR		714135	0					
ANR	714682	ArgumentList	anode		714135	1					
ANR	714683	Argument	anode		714135	0					
ANR	714684	Identifier	anode		714135	0					
ANR	714685	Identifier	an		714135	1					
ANR	714686	ExpressionStatement	anode = an	3349:6:74500:74510	714135	2	True				
ANR	714687	AssignmentExpression	anode = an		714135	0		=			
ANR	714688	Identifier	anode		714135	0					
ANR	714689	Identifier	an		714135	1					
ANR	714690	ReturnStatement	return varlen ;	3353:2:74525:74538	714135	11	True				
ANR	714691	Identifier	varlen		714135	0					
ANR	714692	Label	mem_err2 :	3355:1:74542:74550	714135	12	True				
ANR	714693	Identifier	mem_err2		714135	0					
ANR	714694	ExpressionStatement	onig_node_free ( snode )	3356:2:74554:74575	714135	13	True				
ANR	714695	CallExpression	onig_node_free ( snode )		714135	0					
ANR	714696	Callee	onig_node_free		714135	0					
ANR	714697	Identifier	onig_node_free		714135	0					
ANR	714698	ArgumentList	snode		714135	1					
ANR	714699	Argument	snode		714135	0					
ANR	714700	Identifier	snode		714135	0					
ANR	714701	Label	mem_err :	3358:1:74579:74586	714135	14	True				
ANR	714702	Identifier	mem_err		714135	0					
ANR	714703	ExpressionStatement	onig_node_free ( * rnode )	3359:2:74590:74612	714135	15	True				
ANR	714704	CallExpression	onig_node_free ( * rnode )		714135	0					
ANR	714705	Callee	onig_node_free		714135	0					
ANR	714706	Identifier	onig_node_free		714135	0					
ANR	714707	ArgumentList	* rnode		714135	1					
ANR	714708	Argument	* rnode		714135	0					
ANR	714709	UnaryOperationExpression	* rnode		714135	0					
ANR	714710	UnaryOperator	*		714135	0					
ANR	714711	Identifier	rnode		714135	1					
ANR	714712	ReturnStatement	return ONIGERR_MEMORY ;	3361:2:74617:74638	714135	16	True				
ANR	714713	Identifier	ONIGERR_MEMORY		714135	0					
ANR	714714	ReturnType	static int		714135	1					
ANR	714715	Identifier	expand_case_fold_string_alt		714135	2					
ANR	714716	ParameterList	"int item_num , OnigCaseFoldCodeItem items [ ] , UChar * p , int slen , UChar * end , regex_t * reg , Node * * rnode"		714135	3					
ANR	714717	Parameter	int item_num	3253:28:72180:72191	714135	0	True				
ANR	714718	ParameterType	int		714135	0					
ANR	714719	Identifier	item_num		714135	1					
ANR	714720	Parameter	OnigCaseFoldCodeItem items [ ]	3253:42:72194:72221	714135	1	True				
ANR	714721	ParameterType	OnigCaseFoldCodeItem [ ]		714135	0					
ANR	714722	Identifier	items		714135	1					
ANR	714723	Parameter	UChar * p	3254:7:72231:72238	714135	2	True				
ANR	714724	ParameterType	UChar *		714135	0					
ANR	714725	Identifier	p		714135	1					
ANR	714726	Parameter	int slen	3254:17:72241:72248	714135	3	True				
ANR	714727	ParameterType	int		714135	0					
ANR	714728	Identifier	slen		714135	1					
ANR	714729	Parameter	UChar * end	3254:27:72251:72260	714135	4	True				
ANR	714730	ParameterType	UChar *		714135	0					
ANR	714731	Identifier	end		714135	1					
ANR	714732	Parameter	regex_t * reg	3255:7:72270:72281	714135	5	True				
ANR	714733	ParameterType	regex_t *		714135	0					
ANR	714734	Identifier	reg		714135	1					
ANR	714735	Parameter	Node * * rnode	3255:21:72284:72295	714135	6	True				
ANR	714736	ParameterType	Node * *		714135	0					
ANR	714737	Identifier	rnode		714135	1					
ANR	714738	CFGEntryNode	ENTRY		714135		True				
ANR	714739	CFGExitNode	EXIT		714135		True				
ANR	714740	Symbol	var_anode		714135						
ANR	714741	Symbol	NCAR		714135						
ANR	714742	Symbol	* items [ i ] . code		714135						
ANR	714743	Symbol	expand_case_fold_make_rem_string		714135						
ANR	714744	Symbol	& rem		714135						
ANR	714745	Symbol	items [ i ] . byte_len		714135						
ANR	714746	Symbol	rnode		714135						
ANR	714747	Symbol	len		714135						
ANR	714748	Symbol	* items		714135						
ANR	714749	Symbol	IS_NULL		714135						
ANR	714750	Symbol	reg		714135						
ANR	714751	Symbol	end		714135						
ANR	714752	Symbol	rem		714135						
ANR	714753	Symbol	onig_node_new_alt		714135						
ANR	714754	Symbol	* * i		714135						
ANR	714755	Symbol	NULL		714135						
ANR	714756	Symbol	* rnode		714135						
ANR	714757	Symbol	varlen		714135						
ANR	714758	Symbol	items [ i ] . code		714135						
ANR	714759	Symbol	NCDR		714135						
ANR	714760	Symbol	ONIGERR_MEMORY		714135						
ANR	714761	Symbol	i		714135						
ANR	714762	Symbol	anode		714135						
ANR	714763	Symbol	j		714135						
ANR	714764	Symbol	* * items		714135						
ANR	714765	Symbol	an		714135						
ANR	714766	Symbol	item_num		714135						
ANR	714767	Symbol	items [ i ] . code_len		714135						
ANR	714768	Symbol	reg -> enc		714135						
ANR	714769	Symbol	p		714135						
ANR	714770	Symbol	q		714135						
ANR	714771	Symbol	onig_node_list_add		714135						
ANR	714772	Symbol	r		714135						
ANR	714773	Symbol	buf		714135						
ANR	714774	Symbol	* i		714135						
ANR	714775	Symbol	ONIGENC_CODE_TO_MBC		714135						
ANR	714776	Symbol	onig_node_str_cat		714135						
ANR	714777	Symbol	xnode		714135						
ANR	714778	Symbol	* j		714135						
ANR	714779	Symbol	slen		714135						
ANR	714780	Symbol	onig_node_new_str		714135						
ANR	714781	Symbol	NULL_NODE		714135						
ANR	714782	Symbol	onig_node_new_list		714135						
ANR	714783	Symbol	items		714135						
ANR	714784	Symbol	snode		714135						
ANR	714785	Symbol	* reg		714135						
ANR	714786	Function	expand_case_fold_string	3364:0:74643:77513							
ANR	714787	FunctionDef	"expand_case_fold_string (Node * node , regex_t * reg)"		714786	0					
ANR	714788	CompoundStatement		3366:0:74704:77513	714786	0					
ANR	714789	Statement	define	3367:1:74707:74712	714786	0	True				
ANR	714790	Statement	THRESHOLD_CASE_FOLD_ALT_FOR_EXPANSION	3367:8:74714:74750	714786	1	True				
ANR	714791	Statement	8	3367:47:74753:74753	714786	2	True				
ANR	714792	IdentifierDeclStatement	"int r , n , len , alt_num ;"	3369:2:74758:74780	714786	3	True				
ANR	714793	IdentifierDecl	r		714786	0					
ANR	714794	IdentifierDeclType	int		714786	0					
ANR	714795	Identifier	r		714786	1					
ANR	714796	IdentifierDecl	n		714786	1					
ANR	714797	IdentifierDeclType	int		714786	0					
ANR	714798	Identifier	n		714786	1					
ANR	714799	IdentifierDecl	len		714786	2					
ANR	714800	IdentifierDeclType	int		714786	0					
ANR	714801	Identifier	len		714786	1					
ANR	714802	IdentifierDecl	alt_num		714786	3					
ANR	714803	IdentifierDeclType	int		714786	0					
ANR	714804	Identifier	alt_num		714786	1					
ANR	714805	IdentifierDeclStatement	"UChar * start , * end , * p ;"	3370:2:74784:74806	714786	4	True				
ANR	714806	IdentifierDecl	* start		714786	0					
ANR	714807	IdentifierDeclType	UChar *		714786	0					
ANR	714808	Identifier	start		714786	1					
ANR	714809	IdentifierDecl	* end		714786	1					
ANR	714810	IdentifierDeclType	UChar *		714786	0					
ANR	714811	Identifier	end		714786	1					
ANR	714812	IdentifierDecl	* p		714786	2					
ANR	714813	IdentifierDeclType	UChar *		714786	0					
ANR	714814	Identifier	p		714786	1					
ANR	714815	IdentifierDeclStatement	"Node * top_root , * root , * snode , * prev_node ;"	3371:2:74810:74851	714786	5	True				
ANR	714816	IdentifierDecl	* top_root		714786	0					
ANR	714817	IdentifierDeclType	Node *		714786	0					
ANR	714818	Identifier	top_root		714786	1					
ANR	714819	IdentifierDecl	* root		714786	1					
ANR	714820	IdentifierDeclType	Node *		714786	0					
ANR	714821	Identifier	root		714786	1					
ANR	714822	IdentifierDecl	* snode		714786	2					
ANR	714823	IdentifierDeclType	Node *		714786	0					
ANR	714824	Identifier	snode		714786	1					
ANR	714825	IdentifierDecl	* prev_node		714786	3					
ANR	714826	IdentifierDeclType	Node *		714786	0					
ANR	714827	Identifier	prev_node		714786	1					
ANR	714828	IdentifierDeclStatement	OnigCaseFoldCodeItem items [ ONIGENC_GET_CASE_FOLD_CODES_MAX_NUM ] ;	3372:2:74855:74918	714786	6	True				
ANR	714829	IdentifierDecl	items [ ONIGENC_GET_CASE_FOLD_CODES_MAX_NUM ]		714786	0					
ANR	714830	IdentifierDeclType	OnigCaseFoldCodeItem [ ONIGENC_GET_CASE_FOLD_CODES_MAX_NUM ]		714786	0					
ANR	714831	Identifier	items		714786	1					
ANR	714832	Identifier	ONIGENC_GET_CASE_FOLD_CODES_MAX_NUM		714786	2					
ANR	714833	IdentifierDeclStatement	StrNode * sn = NSTR ( node ) ;	3373:2:74922:74946	714786	7	True				
ANR	714834	IdentifierDecl	* sn = NSTR ( node )		714786	0					
ANR	714835	IdentifierDeclType	StrNode *		714786	0					
ANR	714836	Identifier	sn		714786	1					
ANR	714837	AssignmentExpression	* sn = NSTR ( node )		714786	2		=			
ANR	714838	Identifier	sn		714786	0					
ANR	714839	CallExpression	NSTR ( node )		714786	1					
ANR	714840	Callee	NSTR		714786	0					
ANR	714841	Identifier	NSTR		714786	0					
ANR	714842	ArgumentList	node		714786	1					
ANR	714843	Argument	node		714786	0					
ANR	714844	Identifier	node		714786	0					
ANR	714845	IfStatement	if ( NSTRING_IS_AMBIG ( node ) )		714786	8					
ANR	714846	Condition	NSTRING_IS_AMBIG ( node )	3375:6:74955:74976	714786	0	True				
ANR	714847	CallExpression	NSTRING_IS_AMBIG ( node )		714786	0					
ANR	714848	Callee	NSTRING_IS_AMBIG		714786	0					
ANR	714849	Identifier	NSTRING_IS_AMBIG		714786	0					
ANR	714850	ArgumentList	node		714786	1					
ANR	714851	Argument	node		714786	0					
ANR	714852	Identifier	node		714786	0					
ANR	714853	ReturnStatement	return 0 ;	3375:30:74979:74987	714786	1	True				
ANR	714854	PrimaryExpression	0		714786	0					
ANR	714855	ExpressionStatement	start = sn -> s	3377:2:74992:75005	714786	9	True				
ANR	714856	AssignmentExpression	start = sn -> s		714786	0		=			
ANR	714857	Identifier	start		714786	0					
ANR	714858	PtrMemberAccess	sn -> s		714786	1					
ANR	714859	Identifier	sn		714786	0					
ANR	714860	Identifier	s		714786	1					
ANR	714861	ExpressionStatement	end = sn -> end	3378:2:75009:75024	714786	10	True				
ANR	714862	AssignmentExpression	end = sn -> end		714786	0		=			
ANR	714863	Identifier	end		714786	0					
ANR	714864	PtrMemberAccess	sn -> end		714786	1					
ANR	714865	Identifier	sn		714786	0					
ANR	714866	Identifier	end		714786	1					
ANR	714867	IfStatement	if ( start >= end )		714786	11					
ANR	714868	Condition	start >= end	3379:6:75032:75043	714786	0	True				
ANR	714869	RelationalExpression	start >= end		714786	0		>=			
ANR	714870	Identifier	start		714786	0					
ANR	714871	Identifier	end		714786	1					
ANR	714872	ReturnStatement	return 0 ;	3379:20:75046:75054	714786	1	True				
ANR	714873	PrimaryExpression	0		714786	0					
ANR	714874	ExpressionStatement	r = 0	3381:2:75059:75064	714786	12	True				
ANR	714875	AssignmentExpression	r = 0		714786	0		=			
ANR	714876	Identifier	r		714786	0					
ANR	714877	PrimaryExpression	0		714786	1					
ANR	714878	ExpressionStatement	top_root = root = prev_node = snode = NULL_NODE	3382:2:75068:75115	714786	13	True				
ANR	714879	AssignmentExpression	top_root = root = prev_node = snode = NULL_NODE		714786	0		=			
ANR	714880	Identifier	top_root		714786	0					
ANR	714881	AssignmentExpression	root = prev_node = snode = NULL_NODE		714786	1		=			
ANR	714882	Identifier	root		714786	0					
ANR	714883	AssignmentExpression	prev_node = snode = NULL_NODE		714786	1		=			
ANR	714884	Identifier	prev_node		714786	0					
ANR	714885	AssignmentExpression	snode = NULL_NODE		714786	1		=			
ANR	714886	Identifier	snode		714786	0					
ANR	714887	Identifier	NULL_NODE		714786	1					
ANR	714888	ExpressionStatement	alt_num = 1	3383:2:75119:75130	714786	14	True				
ANR	714889	AssignmentExpression	alt_num = 1		714786	0		=			
ANR	714890	Identifier	alt_num		714786	0					
ANR	714891	PrimaryExpression	1		714786	1					
ANR	714892	ExpressionStatement	p = start	3384:2:75134:75143	714786	15	True				
ANR	714893	AssignmentExpression	p = start		714786	0		=			
ANR	714894	Identifier	p		714786	0					
ANR	714895	Identifier	start		714786	1					
ANR	714896	WhileStatement	while ( p < end )		714786	16					
ANR	714897	Condition	p < end	3385:9:75154:75160	714786	0	True				
ANR	714898	RelationalExpression	p < end		714786	0		<			
ANR	714899	Identifier	p		714786	0					
ANR	714900	Identifier	end		714786	1					
ANR	714901	CompoundStatement		20:18:458:458	714786	1					
ANR	714902	ExpressionStatement	"n = ONIGENC_GET_CASE_FOLD_CODES_BY_STR ( reg -> enc , reg -> case_fold_flag , p , end , items )"	3386:4:75169:75261	714786	0	True				
ANR	714903	AssignmentExpression	"n = ONIGENC_GET_CASE_FOLD_CODES_BY_STR ( reg -> enc , reg -> case_fold_flag , p , end , items )"		714786	0		=			
ANR	714904	Identifier	n		714786	0					
ANR	714905	CallExpression	"ONIGENC_GET_CASE_FOLD_CODES_BY_STR ( reg -> enc , reg -> case_fold_flag , p , end , items )"		714786	1					
ANR	714906	Callee	ONIGENC_GET_CASE_FOLD_CODES_BY_STR		714786	0					
ANR	714907	Identifier	ONIGENC_GET_CASE_FOLD_CODES_BY_STR		714786	0					
ANR	714908	ArgumentList	reg -> enc		714786	1					
ANR	714909	Argument	reg -> enc		714786	0					
ANR	714910	PtrMemberAccess	reg -> enc		714786	0					
ANR	714911	Identifier	reg		714786	0					
ANR	714912	Identifier	enc		714786	1					
ANR	714913	Argument	reg -> case_fold_flag		714786	1					
ANR	714914	PtrMemberAccess	reg -> case_fold_flag		714786	0					
ANR	714915	Identifier	reg		714786	0					
ANR	714916	Identifier	case_fold_flag		714786	1					
ANR	714917	Argument	p		714786	2					
ANR	714918	Identifier	p		714786	0					
ANR	714919	Argument	end		714786	3					
ANR	714920	Identifier	end		714786	0					
ANR	714921	Argument	items		714786	4					
ANR	714922	Identifier	items		714786	0					
ANR	714923	IfStatement	if ( n < 0 )		714786	1					
ANR	714924	Condition	n < 0	3388:8:75271:75275	714786	0	True				
ANR	714925	RelationalExpression	n < 0		714786	0		<			
ANR	714926	Identifier	n		714786	0					
ANR	714927	PrimaryExpression	0		714786	1					
ANR	714928	CompoundStatement		23:15:573:573	714786	1					
ANR	714929	ExpressionStatement	r = n	3389:6:75286:75291	714786	0	True				
ANR	714930	AssignmentExpression	r = n		714786	0		=			
ANR	714931	Identifier	r		714786	0					
ANR	714932	Identifier	n		714786	1					
ANR	714933	GotoStatement	goto err ;	3390:6:75299:75307	714786	1	True				
ANR	714934	Identifier	err		714786	0					
ANR	714935	ExpressionStatement	"len = enclen ( reg -> enc , p )"	3393:4:75320:75345	714786	2	True				
ANR	714936	AssignmentExpression	"len = enclen ( reg -> enc , p )"		714786	0		=			
ANR	714937	Identifier	len		714786	0					
ANR	714938	CallExpression	"enclen ( reg -> enc , p )"		714786	1					
ANR	714939	Callee	enclen		714786	0					
ANR	714940	Identifier	enclen		714786	0					
ANR	714941	ArgumentList	reg -> enc		714786	1					
ANR	714942	Argument	reg -> enc		714786	0					
ANR	714943	PtrMemberAccess	reg -> enc		714786	0					
ANR	714944	Identifier	reg		714786	0					
ANR	714945	Identifier	enc		714786	1					
ANR	714946	Argument	p		714786	1					
ANR	714947	Identifier	p		714786	0					
ANR	714948	IfStatement	if ( n == 0 )		714786	3					
ANR	714949	Condition	n == 0	3395:8:75356:75361	714786	0	True				
ANR	714950	EqualityExpression	n == 0		714786	0		==			
ANR	714951	Identifier	n		714786	0					
ANR	714952	PrimaryExpression	0		714786	1					
ANR	714953	CompoundStatement		30:16:659:659	714786	1					
ANR	714954	IfStatement	if ( IS_NULL ( snode ) )		714786	0					
ANR	714955	Condition	IS_NULL ( snode )	3396:10:75376:75389	714786	0	True				
ANR	714956	CallExpression	IS_NULL ( snode )		714786	0					
ANR	714957	Callee	IS_NULL		714786	0					
ANR	714958	Identifier	IS_NULL		714786	0					
ANR	714959	ArgumentList	snode		714786	1					
ANR	714960	Argument	snode		714786	0					
ANR	714961	Identifier	snode		714786	0					
ANR	714962	CompoundStatement		31:26:687:687	714786	1					
ANR	714963	IfStatement	if ( IS_NULL ( root ) && IS_NOT_NULL ( prev_node ) )		714786	0					
ANR	714964	Condition	IS_NULL ( root ) && IS_NOT_NULL ( prev_node )	3397:5:75399:75437	714786	0	True				
ANR	714965	AndExpression	IS_NULL ( root ) && IS_NOT_NULL ( prev_node )		714786	0		&&			
ANR	714966	CallExpression	IS_NULL ( root )		714786	0					
ANR	714967	Callee	IS_NULL		714786	0					
ANR	714968	Identifier	IS_NULL		714786	0					
ANR	714969	ArgumentList	root		714786	1					
ANR	714970	Argument	root		714786	0					
ANR	714971	Identifier	root		714786	0					
ANR	714972	CallExpression	IS_NOT_NULL ( prev_node )		714786	1					
ANR	714973	Callee	IS_NOT_NULL		714786	0					
ANR	714974	Identifier	IS_NOT_NULL		714786	0					
ANR	714975	ArgumentList	prev_node		714786	1					
ANR	714976	Argument	prev_node		714786	0					
ANR	714977	Identifier	prev_node		714786	0					
ANR	714978	CompoundStatement		32:46:735:735	714786	1					
ANR	714979	ExpressionStatement	"top_root = root = onig_node_list_add ( NULL_NODE , prev_node )"	3398:3:75445:75503	714786	0	True				
ANR	714980	AssignmentExpression	"top_root = root = onig_node_list_add ( NULL_NODE , prev_node )"		714786	0		=			
ANR	714981	Identifier	top_root		714786	0					
ANR	714982	AssignmentExpression	"root = onig_node_list_add ( NULL_NODE , prev_node )"		714786	1		=			
ANR	714983	Identifier	root		714786	0					
ANR	714984	CallExpression	"onig_node_list_add ( NULL_NODE , prev_node )"		714786	1					
ANR	714985	Callee	onig_node_list_add		714786	0					
ANR	714986	Identifier	onig_node_list_add		714786	0					
ANR	714987	ArgumentList	NULL_NODE		714786	1					
ANR	714988	Argument	NULL_NODE		714786	0					
ANR	714989	Identifier	NULL_NODE		714786	0					
ANR	714990	Argument	prev_node		714786	1					
ANR	714991	Identifier	prev_node		714786	0					
ANR	714992	IfStatement	if ( IS_NULL ( root ) )		714786	1					
ANR	714993	Condition	IS_NULL ( root )	3399:7:75512:75524	714786	0	True				
ANR	714994	CallExpression	IS_NULL ( root )		714786	0					
ANR	714995	Callee	IS_NULL		714786	0					
ANR	714996	Identifier	IS_NULL		714786	0					
ANR	714997	ArgumentList	root		714786	1					
ANR	714998	Argument	root		714786	0					
ANR	714999	Identifier	root		714786	0					
ANR	715000	CompoundStatement		34:22:822:822	714786	1					
ANR	715001	ExpressionStatement	onig_node_free ( prev_node )	3400:5:75534:75559	714786	0	True				
ANR	715002	CallExpression	onig_node_free ( prev_node )		714786	0					
ANR	715003	Callee	onig_node_free		714786	0					
ANR	715004	Identifier	onig_node_free		714786	0					
ANR	715005	ArgumentList	prev_node		714786	1					
ANR	715006	Argument	prev_node		714786	0					
ANR	715007	Identifier	prev_node		714786	0					
ANR	715008	GotoStatement	goto mem_err ;	3401:5:75566:75578	714786	1	True				
ANR	715009	Identifier	mem_err		714786	0					
ANR	715010	ExpressionStatement	"prev_node = snode = onig_node_new_str ( NULL , NULL )"	3405:1:75590:75639	714786	1	True				
ANR	715011	AssignmentExpression	"prev_node = snode = onig_node_new_str ( NULL , NULL )"		714786	0		=			
ANR	715012	Identifier	prev_node		714786	0					
ANR	715013	AssignmentExpression	"snode = onig_node_new_str ( NULL , NULL )"		714786	1		=			
ANR	715014	Identifier	snode		714786	0					
ANR	715015	CallExpression	"onig_node_new_str ( NULL , NULL )"		714786	1					
ANR	715016	Callee	onig_node_new_str		714786	0					
ANR	715017	Identifier	onig_node_new_str		714786	0					
ANR	715018	ArgumentList	NULL		714786	1					
ANR	715019	Argument	NULL		714786	0					
ANR	715020	Identifier	NULL		714786	0					
ANR	715021	Argument	NULL		714786	1					
ANR	715022	Identifier	NULL		714786	0					
ANR	715023	IfStatement	if ( IS_NULL ( snode ) )		714786	2					
ANR	715024	Condition	IS_NULL ( snode )	3406:5:75646:75659	714786	0	True				
ANR	715025	CallExpression	IS_NULL ( snode )		714786	0					
ANR	715026	Callee	IS_NULL		714786	0					
ANR	715027	Identifier	IS_NULL		714786	0					
ANR	715028	ArgumentList	snode		714786	1					
ANR	715029	Argument	snode		714786	0					
ANR	715030	Identifier	snode		714786	0					
ANR	715031	GotoStatement	goto mem_err ;	3406:21:75662:75674	714786	1	True				
ANR	715032	Identifier	mem_err		714786	0					
ANR	715033	IfStatement	if ( IS_NOT_NULL ( root ) )		714786	3					
ANR	715034	Condition	IS_NOT_NULL ( root )	3407:5:75681:75697	714786	0	True				
ANR	715035	CallExpression	IS_NOT_NULL ( root )		714786	0					
ANR	715036	Callee	IS_NOT_NULL		714786	0					
ANR	715037	Identifier	IS_NOT_NULL		714786	0					
ANR	715038	ArgumentList	root		714786	1					
ANR	715039	Argument	root		714786	0					
ANR	715040	Identifier	root		714786	0					
ANR	715041	CompoundStatement		42:24:995:995	714786	1					
ANR	715042	IfStatement	"if ( IS_NULL ( onig_node_list_add ( root , snode ) ) )"		714786	0					
ANR	715043	Condition	"IS_NULL ( onig_node_list_add ( root , snode ) )"	3408:7:75709:75748	714786	0	True				
ANR	715044	CallExpression	"IS_NULL ( onig_node_list_add ( root , snode ) )"		714786	0					
ANR	715045	Callee	IS_NULL		714786	0					
ANR	715046	Identifier	IS_NULL		714786	0					
ANR	715047	ArgumentList	"onig_node_list_add ( root , snode )"		714786	1					
ANR	715048	Argument	"onig_node_list_add ( root , snode )"		714786	0					
ANR	715049	CallExpression	"onig_node_list_add ( root , snode )"		714786	0					
ANR	715050	Callee	onig_node_list_add		714786	0					
ANR	715051	Identifier	onig_node_list_add		714786	0					
ANR	715052	ArgumentList	root		714786	1					
ANR	715053	Argument	root		714786	0					
ANR	715054	Identifier	root		714786	0					
ANR	715055	Argument	snode		714786	1					
ANR	715056	Identifier	snode		714786	0					
ANR	715057	CompoundStatement		43:49:1046:1046	714786	1					
ANR	715058	ExpressionStatement	onig_node_free ( snode )	3409:5:75758:75779	714786	0	True				
ANR	715059	CallExpression	onig_node_free ( snode )		714786	0					
ANR	715060	Callee	onig_node_free		714786	0					
ANR	715061	Identifier	onig_node_free		714786	0					
ANR	715062	ArgumentList	snode		714786	1					
ANR	715063	Argument	snode		714786	0					
ANR	715064	Identifier	snode		714786	0					
ANR	715065	GotoStatement	goto mem_err ;	3410:5:75786:75798	714786	1	True				
ANR	715066	Identifier	mem_err		714786	0					
ANR	715067	ExpressionStatement	"r = onig_node_str_cat ( snode , p , p + len )"	3415:6:75823:75863	714786	1	True				
ANR	715068	AssignmentExpression	"r = onig_node_str_cat ( snode , p , p + len )"		714786	0		=			
ANR	715069	Identifier	r		714786	0					
ANR	715070	CallExpression	"onig_node_str_cat ( snode , p , p + len )"		714786	1					
ANR	715071	Callee	onig_node_str_cat		714786	0					
ANR	715072	Identifier	onig_node_str_cat		714786	0					
ANR	715073	ArgumentList	snode		714786	1					
ANR	715074	Argument	snode		714786	0					
ANR	715075	Identifier	snode		714786	0					
ANR	715076	Argument	p		714786	1					
ANR	715077	Identifier	p		714786	0					
ANR	715078	Argument	p + len		714786	2					
ANR	715079	AdditiveExpression	p + len		714786	0		+			
ANR	715080	Identifier	p		714786	0					
ANR	715081	Identifier	len		714786	1					
ANR	715082	IfStatement	if ( r != 0 )		714786	2					
ANR	715083	Condition	r != 0	3416:10:75875:75880	714786	0	True				
ANR	715084	EqualityExpression	r != 0		714786	0		!=			
ANR	715085	Identifier	r		714786	0					
ANR	715086	PrimaryExpression	0		714786	1					
ANR	715087	GotoStatement	goto err ;	3416:18:75883:75891	714786	1	True				
ANR	715088	Identifier	err		714786	0					
ANR	715089	ElseStatement	else		714786	0					
ANR	715090	CompoundStatement		53:9:1203:1203	714786	0					
ANR	715091	ExpressionStatement	alt_num *= ( n + 1 )	3419:6:75916:75934	714786	0	True				
ANR	715092	AssignmentExpression	alt_num *= ( n + 1 )		714786	0		*=			
ANR	715093	Identifier	alt_num		714786	0					
ANR	715094	AdditiveExpression	n + 1		714786	1		+			
ANR	715095	Identifier	n		714786	0					
ANR	715096	PrimaryExpression	1		714786	1					
ANR	715097	IfStatement	if ( alt_num > THRESHOLD_CASE_FOLD_ALT_FOR_EXPANSION )		714786	1					
ANR	715098	Condition	alt_num > THRESHOLD_CASE_FOLD_ALT_FOR_EXPANSION	3420:10:75946:75992	714786	0	True				
ANR	715099	RelationalExpression	alt_num > THRESHOLD_CASE_FOLD_ALT_FOR_EXPANSION		714786	0		>			
ANR	715100	Identifier	alt_num		714786	0					
ANR	715101	Identifier	THRESHOLD_CASE_FOLD_ALT_FOR_EXPANSION		714786	1					
ANR	715102	BreakStatement	break ;	3420:59:75995:76000	714786	1	True				
ANR	715103	IfStatement	if ( IS_NULL ( root ) && IS_NOT_NULL ( prev_node ) )		714786	2					
ANR	715104	Condition	IS_NULL ( root ) && IS_NOT_NULL ( prev_node )	3422:10:76013:76051	714786	0	True				
ANR	715105	AndExpression	IS_NULL ( root ) && IS_NOT_NULL ( prev_node )		714786	0		&&			
ANR	715106	CallExpression	IS_NULL ( root )		714786	0					
ANR	715107	Callee	IS_NULL		714786	0					
ANR	715108	Identifier	IS_NULL		714786	0					
ANR	715109	ArgumentList	root		714786	1					
ANR	715110	Argument	root		714786	0					
ANR	715111	Identifier	root		714786	0					
ANR	715112	CallExpression	IS_NOT_NULL ( prev_node )		714786	1					
ANR	715113	Callee	IS_NOT_NULL		714786	0					
ANR	715114	Identifier	IS_NOT_NULL		714786	0					
ANR	715115	ArgumentList	prev_node		714786	1					
ANR	715116	Argument	prev_node		714786	0					
ANR	715117	Identifier	prev_node		714786	0					
ANR	715118	CompoundStatement		57:51:1349:1349	714786	1					
ANR	715119	ExpressionStatement	"top_root = root = onig_node_list_add ( NULL_NODE , prev_node )"	3423:1:76057:76115	714786	0	True				
ANR	715120	AssignmentExpression	"top_root = root = onig_node_list_add ( NULL_NODE , prev_node )"		714786	0		=			
ANR	715121	Identifier	top_root		714786	0					
ANR	715122	AssignmentExpression	"root = onig_node_list_add ( NULL_NODE , prev_node )"		714786	1		=			
ANR	715123	Identifier	root		714786	0					
ANR	715124	CallExpression	"onig_node_list_add ( NULL_NODE , prev_node )"		714786	1					
ANR	715125	Callee	onig_node_list_add		714786	0					
ANR	715126	Identifier	onig_node_list_add		714786	0					
ANR	715127	ArgumentList	NULL_NODE		714786	1					
ANR	715128	Argument	NULL_NODE		714786	0					
ANR	715129	Identifier	NULL_NODE		714786	0					
ANR	715130	Argument	prev_node		714786	1					
ANR	715131	Identifier	prev_node		714786	0					
ANR	715132	IfStatement	if ( IS_NULL ( root ) )		714786	1					
ANR	715133	Condition	IS_NULL ( root )	3424:5:76122:76134	714786	0	True				
ANR	715134	CallExpression	IS_NULL ( root )		714786	0					
ANR	715135	Callee	IS_NULL		714786	0					
ANR	715136	Identifier	IS_NULL		714786	0					
ANR	715137	ArgumentList	root		714786	1					
ANR	715138	Argument	root		714786	0					
ANR	715139	Identifier	root		714786	0					
ANR	715140	CompoundStatement		59:20:1432:1432	714786	1					
ANR	715141	ExpressionStatement	onig_node_free ( prev_node )	3425:3:76142:76167	714786	0	True				
ANR	715142	CallExpression	onig_node_free ( prev_node )		714786	0					
ANR	715143	Callee	onig_node_free		714786	0					
ANR	715144	Identifier	onig_node_free		714786	0					
ANR	715145	ArgumentList	prev_node		714786	1					
ANR	715146	Argument	prev_node		714786	0					
ANR	715147	Identifier	prev_node		714786	0					
ANR	715148	GotoStatement	goto mem_err ;	3426:3:76172:76184	714786	1	True				
ANR	715149	Identifier	mem_err		714786	0					
ANR	715150	ExpressionStatement	"r = expand_case_fold_string_alt ( n , items , p , len , end , reg , & prev_node )"	3430:6:76204:76275	714786	3	True				
ANR	715151	AssignmentExpression	"r = expand_case_fold_string_alt ( n , items , p , len , end , reg , & prev_node )"		714786	0		=			
ANR	715152	Identifier	r		714786	0					
ANR	715153	CallExpression	"expand_case_fold_string_alt ( n , items , p , len , end , reg , & prev_node )"		714786	1					
ANR	715154	Callee	expand_case_fold_string_alt		714786	0					
ANR	715155	Identifier	expand_case_fold_string_alt		714786	0					
ANR	715156	ArgumentList	n		714786	1					
ANR	715157	Argument	n		714786	0					
ANR	715158	Identifier	n		714786	0					
ANR	715159	Argument	items		714786	1					
ANR	715160	Identifier	items		714786	0					
ANR	715161	Argument	p		714786	2					
ANR	715162	Identifier	p		714786	0					
ANR	715163	Argument	len		714786	3					
ANR	715164	Identifier	len		714786	0					
ANR	715165	Argument	end		714786	4					
ANR	715166	Identifier	end		714786	0					
ANR	715167	Argument	reg		714786	5					
ANR	715168	Identifier	reg		714786	0					
ANR	715169	Argument	& prev_node		714786	6					
ANR	715170	UnaryOperationExpression	& prev_node		714786	0					
ANR	715171	UnaryOperator	&		714786	0					
ANR	715172	Identifier	prev_node		714786	1					
ANR	715173	IfStatement	if ( r < 0 )		714786	4					
ANR	715174	Condition	r < 0	3431:10:76287:76291	714786	0	True				
ANR	715175	RelationalExpression	r < 0		714786	0		<			
ANR	715176	Identifier	r		714786	0					
ANR	715177	PrimaryExpression	0		714786	1					
ANR	715178	GotoStatement	goto mem_err ;	3431:17:76294:76306	714786	1	True				
ANR	715179	Identifier	mem_err		714786	0					
ANR	715180	IfStatement	if ( r == 1 )		714786	5					
ANR	715181	Condition	r == 1	3432:10:76318:76323	714786	0	True				
ANR	715182	EqualityExpression	r == 1		714786	0		==			
ANR	715183	Identifier	r		714786	0					
ANR	715184	PrimaryExpression	1		714786	1					
ANR	715185	CompoundStatement		67:18:1621:1621	714786	1					
ANR	715186	IfStatement	if ( IS_NULL ( root ) )		714786	0					
ANR	715187	Condition	IS_NULL ( root )	3433:5:76333:76345	714786	0	True				
ANR	715188	CallExpression	IS_NULL ( root )		714786	0					
ANR	715189	Callee	IS_NULL		714786	0					
ANR	715190	Identifier	IS_NULL		714786	0					
ANR	715191	ArgumentList	root		714786	1					
ANR	715192	Argument	root		714786	0					
ANR	715193	Identifier	root		714786	0					
ANR	715194	CompoundStatement		68:20:1643:1643	714786	1					
ANR	715195	ExpressionStatement	top_root = prev_node	3434:3:76353:76373	714786	0	True				
ANR	715196	AssignmentExpression	top_root = prev_node		714786	0		=			
ANR	715197	Identifier	top_root		714786	0					
ANR	715198	Identifier	prev_node		714786	1					
ANR	715199	ElseStatement	else		714786	0					
ANR	715200	CompoundStatement		71:6:1679:1679	714786	0					
ANR	715201	IfStatement	"if ( IS_NULL ( onig_node_list_add ( root , prev_node ) ) )"		714786	0					
ANR	715202	Condition	"IS_NULL ( onig_node_list_add ( root , prev_node ) )"	3437:7:76393:76436	714786	0	True				
ANR	715203	CallExpression	"IS_NULL ( onig_node_list_add ( root , prev_node ) )"		714786	0					
ANR	715204	Callee	IS_NULL		714786	0					
ANR	715205	Identifier	IS_NULL		714786	0					
ANR	715206	ArgumentList	"onig_node_list_add ( root , prev_node )"		714786	1					
ANR	715207	Argument	"onig_node_list_add ( root , prev_node )"		714786	0					
ANR	715208	CallExpression	"onig_node_list_add ( root , prev_node )"		714786	0					
ANR	715209	Callee	onig_node_list_add		714786	0					
ANR	715210	Identifier	onig_node_list_add		714786	0					
ANR	715211	ArgumentList	root		714786	1					
ANR	715212	Argument	root		714786	0					
ANR	715213	Identifier	root		714786	0					
ANR	715214	Argument	prev_node		714786	1					
ANR	715215	Identifier	prev_node		714786	0					
ANR	715216	CompoundStatement		72:53:1734:1734	714786	1					
ANR	715217	ExpressionStatement	onig_node_free ( prev_node )	3438:5:76446:76471	714786	0	True				
ANR	715218	CallExpression	onig_node_free ( prev_node )		714786	0					
ANR	715219	Callee	onig_node_free		714786	0					
ANR	715220	Identifier	onig_node_free		714786	0					
ANR	715221	ArgumentList	prev_node		714786	1					
ANR	715222	Argument	prev_node		714786	0					
ANR	715223	Identifier	prev_node		714786	0					
ANR	715224	GotoStatement	goto mem_err ;	3439:5:76478:76490	714786	1	True				
ANR	715225	Identifier	mem_err		714786	0					
ANR	715226	ExpressionStatement	root = NCAR ( prev_node )	3443:1:76502:76524	714786	1	True				
ANR	715227	AssignmentExpression	root = NCAR ( prev_node )		714786	0		=			
ANR	715228	Identifier	root		714786	0					
ANR	715229	CallExpression	NCAR ( prev_node )		714786	1					
ANR	715230	Callee	NCAR		714786	0					
ANR	715231	Identifier	NCAR		714786	0					
ANR	715232	ArgumentList	prev_node		714786	1					
ANR	715233	Argument	prev_node		714786	0					
ANR	715234	Identifier	prev_node		714786	0					
ANR	715235	ElseStatement	else		714786	0					
ANR	715236	CompoundStatement		80:11:1840:1840	714786	0					
ANR	715237	IfStatement	if ( IS_NOT_NULL ( root ) )		714786	0					
ANR	715238	Condition	IS_NOT_NULL ( root )	3446:5:76565:76581	714786	0	True				
ANR	715239	CallExpression	IS_NOT_NULL ( root )		714786	0					
ANR	715240	Callee	IS_NOT_NULL		714786	0					
ANR	715241	Identifier	IS_NOT_NULL		714786	0					
ANR	715242	ArgumentList	root		714786	1					
ANR	715243	Argument	root		714786	0					
ANR	715244	Identifier	root		714786	0					
ANR	715245	CompoundStatement		81:24:1879:1879	714786	1					
ANR	715246	IfStatement	"if ( IS_NULL ( onig_node_list_add ( root , prev_node ) ) )"		714786	0					
ANR	715247	Condition	"IS_NULL ( onig_node_list_add ( root , prev_node ) )"	3447:7:76593:76636	714786	0	True				
ANR	715248	CallExpression	"IS_NULL ( onig_node_list_add ( root , prev_node ) )"		714786	0					
ANR	715249	Callee	IS_NULL		714786	0					
ANR	715250	Identifier	IS_NULL		714786	0					
ANR	715251	ArgumentList	"onig_node_list_add ( root , prev_node )"		714786	1					
ANR	715252	Argument	"onig_node_list_add ( root , prev_node )"		714786	0					
ANR	715253	CallExpression	"onig_node_list_add ( root , prev_node )"		714786	0					
ANR	715254	Callee	onig_node_list_add		714786	0					
ANR	715255	Identifier	onig_node_list_add		714786	0					
ANR	715256	ArgumentList	root		714786	1					
ANR	715257	Argument	root		714786	0					
ANR	715258	Identifier	root		714786	0					
ANR	715259	Argument	prev_node		714786	1					
ANR	715260	Identifier	prev_node		714786	0					
ANR	715261	CompoundStatement		82:53:1934:1934	714786	1					
ANR	715262	ExpressionStatement	onig_node_free ( prev_node )	3448:5:76646:76671	714786	0	True				
ANR	715263	CallExpression	onig_node_free ( prev_node )		714786	0					
ANR	715264	Callee	onig_node_free		714786	0					
ANR	715265	Identifier	onig_node_free		714786	0					
ANR	715266	ArgumentList	prev_node		714786	1					
ANR	715267	Argument	prev_node		714786	0					
ANR	715268	Identifier	prev_node		714786	0					
ANR	715269	GotoStatement	goto mem_err ;	3449:5:76678:76690	714786	1	True				
ANR	715270	Identifier	mem_err		714786	0					
ANR	715271	ExpressionStatement	snode = NULL_NODE	3454:6:76715:76732	714786	6	True				
ANR	715272	AssignmentExpression	snode = NULL_NODE		714786	0		=			
ANR	715273	Identifier	snode		714786	0					
ANR	715274	Identifier	NULL_NODE		714786	1					
ANR	715275	ExpressionStatement	p += len	3457:4:76745:76753	714786	4	True				
ANR	715276	AssignmentExpression	p += len		714786	0		+=			
ANR	715277	Identifier	p		714786	0					
ANR	715278	Identifier	len		714786	1					
ANR	715279	IfStatement	if ( p < end )		714786	17					
ANR	715280	Condition	p < end	3460:6:76766:76772	714786	0	True				
ANR	715281	RelationalExpression	p < end		714786	0		<			
ANR	715282	Identifier	p		714786	0					
ANR	715283	Identifier	end		714786	1					
ANR	715284	CompoundStatement		96:4:2076:2086	714786	1					
ANR	715285	IdentifierDeclStatement	Node * srem ;	3461:4:76781:76791	714786	0	True				
ANR	715286	IdentifierDecl	* srem		714786	0					
ANR	715287	IdentifierDeclType	Node *		714786	0					
ANR	715288	Identifier	srem		714786	1					
ANR	715289	ExpressionStatement	"r = expand_case_fold_make_rem_string ( & srem , p , end , reg )"	3463:4:76798:76854	714786	1	True				
ANR	715290	AssignmentExpression	"r = expand_case_fold_make_rem_string ( & srem , p , end , reg )"		714786	0		=			
ANR	715291	Identifier	r		714786	0					
ANR	715292	CallExpression	"expand_case_fold_make_rem_string ( & srem , p , end , reg )"		714786	1					
ANR	715293	Callee	expand_case_fold_make_rem_string		714786	0					
ANR	715294	Identifier	expand_case_fold_make_rem_string		714786	0					
ANR	715295	ArgumentList	& srem		714786	1					
ANR	715296	Argument	& srem		714786	0					
ANR	715297	UnaryOperationExpression	& srem		714786	0					
ANR	715298	UnaryOperator	&		714786	0					
ANR	715299	Identifier	srem		714786	1					
ANR	715300	Argument	p		714786	1					
ANR	715301	Identifier	p		714786	0					
ANR	715302	Argument	end		714786	2					
ANR	715303	Identifier	end		714786	0					
ANR	715304	Argument	reg		714786	3					
ANR	715305	Identifier	reg		714786	0					
ANR	715306	IfStatement	if ( r != 0 )		714786	2					
ANR	715307	Condition	r != 0	3464:8:76864:76869	714786	0	True				
ANR	715308	EqualityExpression	r != 0		714786	0		!=			
ANR	715309	Identifier	r		714786	0					
ANR	715310	PrimaryExpression	0		714786	1					
ANR	715311	GotoStatement	goto mem_err ;	3464:16:76872:76884	714786	1	True				
ANR	715312	Identifier	mem_err		714786	0					
ANR	715313	IfStatement	if ( IS_NOT_NULL ( prev_node ) && IS_NULL ( root ) )		714786	3					
ANR	715314	Condition	IS_NOT_NULL ( prev_node ) && IS_NULL ( root )	3466:8:76895:76933	714786	0	True				
ANR	715315	AndExpression	IS_NOT_NULL ( prev_node ) && IS_NULL ( root )		714786	0		&&			
ANR	715316	CallExpression	IS_NOT_NULL ( prev_node )		714786	0					
ANR	715317	Callee	IS_NOT_NULL		714786	0					
ANR	715318	Identifier	IS_NOT_NULL		714786	0					
ANR	715319	ArgumentList	prev_node		714786	1					
ANR	715320	Argument	prev_node		714786	0					
ANR	715321	Identifier	prev_node		714786	0					
ANR	715322	CallExpression	IS_NULL ( root )		714786	1					
ANR	715323	Callee	IS_NULL		714786	0					
ANR	715324	Identifier	IS_NULL		714786	0					
ANR	715325	ArgumentList	root		714786	1					
ANR	715326	Argument	root		714786	0					
ANR	715327	Identifier	root		714786	0					
ANR	715328	CompoundStatement		101:49:2231:2231	714786	1					
ANR	715329	ExpressionStatement	"top_root = root = onig_node_list_add ( NULL_NODE , prev_node )"	3467:6:76944:77002	714786	0	True				
ANR	715330	AssignmentExpression	"top_root = root = onig_node_list_add ( NULL_NODE , prev_node )"		714786	0		=			
ANR	715331	Identifier	top_root		714786	0					
ANR	715332	AssignmentExpression	"root = onig_node_list_add ( NULL_NODE , prev_node )"		714786	1		=			
ANR	715333	Identifier	root		714786	0					
ANR	715334	CallExpression	"onig_node_list_add ( NULL_NODE , prev_node )"		714786	1					
ANR	715335	Callee	onig_node_list_add		714786	0					
ANR	715336	Identifier	onig_node_list_add		714786	0					
ANR	715337	ArgumentList	NULL_NODE		714786	1					
ANR	715338	Argument	NULL_NODE		714786	0					
ANR	715339	Identifier	NULL_NODE		714786	0					
ANR	715340	Argument	prev_node		714786	1					
ANR	715341	Identifier	prev_node		714786	0					
ANR	715342	IfStatement	if ( IS_NULL ( root ) )		714786	1					
ANR	715343	Condition	IS_NULL ( root )	3468:10:77014:77026	714786	0	True				
ANR	715344	CallExpression	IS_NULL ( root )		714786	0					
ANR	715345	Callee	IS_NULL		714786	0					
ANR	715346	Identifier	IS_NULL		714786	0					
ANR	715347	ArgumentList	root		714786	1					
ANR	715348	Argument	root		714786	0					
ANR	715349	Identifier	root		714786	0					
ANR	715350	CompoundStatement		103:25:2324:2324	714786	1					
ANR	715351	ExpressionStatement	onig_node_free ( srem )	3469:1:77032:77052	714786	0	True				
ANR	715352	CallExpression	onig_node_free ( srem )		714786	0					
ANR	715353	Callee	onig_node_free		714786	0					
ANR	715354	Identifier	onig_node_free		714786	0					
ANR	715355	ArgumentList	srem		714786	1					
ANR	715356	Argument	srem		714786	0					
ANR	715357	Identifier	srem		714786	0					
ANR	715358	ExpressionStatement	onig_node_free ( prev_node )	3470:1:77055:77080	714786	1	True				
ANR	715359	CallExpression	onig_node_free ( prev_node )		714786	0					
ANR	715360	Callee	onig_node_free		714786	0					
ANR	715361	Identifier	onig_node_free		714786	0					
ANR	715362	ArgumentList	prev_node		714786	1					
ANR	715363	Argument	prev_node		714786	0					
ANR	715364	Identifier	prev_node		714786	0					
ANR	715365	GotoStatement	goto mem_err ;	3471:1:77083:77095	714786	2	True				
ANR	715366	Identifier	mem_err		714786	0					
ANR	715367	IfStatement	if ( IS_NULL ( root ) )		714786	4					
ANR	715368	Condition	IS_NULL ( root )	3475:8:77120:77132	714786	0	True				
ANR	715369	CallExpression	IS_NULL ( root )		714786	0					
ANR	715370	Callee	IS_NULL		714786	0					
ANR	715371	Identifier	IS_NULL		714786	0					
ANR	715372	ArgumentList	root		714786	1					
ANR	715373	Argument	root		714786	0					
ANR	715374	Identifier	root		714786	0					
ANR	715375	CompoundStatement		110:23:2430:2430	714786	1					
ANR	715376	ExpressionStatement	prev_node = srem	3476:6:77143:77159	714786	0	True				
ANR	715377	AssignmentExpression	prev_node = srem		714786	0		=			
ANR	715378	Identifier	prev_node		714786	0					
ANR	715379	Identifier	srem		714786	1					
ANR	715380	ElseStatement	else		714786	0					
ANR	715381	CompoundStatement		113:9:2471:2471	714786	0					
ANR	715382	IfStatement	"if ( IS_NULL ( onig_node_list_add ( root , srem ) ) )"		714786	0					
ANR	715383	Condition	"IS_NULL ( onig_node_list_add ( root , srem ) )"	3479:10:77188:77226	714786	0	True				
ANR	715384	CallExpression	"IS_NULL ( onig_node_list_add ( root , srem ) )"		714786	0					
ANR	715385	Callee	IS_NULL		714786	0					
ANR	715386	Identifier	IS_NULL		714786	0					
ANR	715387	ArgumentList	"onig_node_list_add ( root , srem )"		714786	1					
ANR	715388	Argument	"onig_node_list_add ( root , srem )"		714786	0					
ANR	715389	CallExpression	"onig_node_list_add ( root , srem )"		714786	0					
ANR	715390	Callee	onig_node_list_add		714786	0					
ANR	715391	Identifier	onig_node_list_add		714786	0					
ANR	715392	ArgumentList	root		714786	1					
ANR	715393	Argument	root		714786	0					
ANR	715394	Identifier	root		714786	0					
ANR	715395	Argument	srem		714786	1					
ANR	715396	Identifier	srem		714786	0					
ANR	715397	CompoundStatement		114:51:2524:2524	714786	1					
ANR	715398	ExpressionStatement	onig_node_free ( srem )	3480:1:77232:77252	714786	0	True				
ANR	715399	CallExpression	onig_node_free ( srem )		714786	0					
ANR	715400	Callee	onig_node_free		714786	0					
ANR	715401	Identifier	onig_node_free		714786	0					
ANR	715402	ArgumentList	srem		714786	1					
ANR	715403	Argument	srem		714786	0					
ANR	715404	Identifier	srem		714786	0					
ANR	715405	GotoStatement	goto mem_err ;	3481:1:77255:77267	714786	1	True				
ANR	715406	Identifier	mem_err		714786	0					
ANR	715407	ExpressionStatement	top_root = ( IS_NOT_NULL ( top_root ) ? top_root : prev_node )	3487:2:77305:77362	714786	18	True				
ANR	715408	AssignmentExpression	top_root = ( IS_NOT_NULL ( top_root ) ? top_root : prev_node )		714786	0		=			
ANR	715409	Identifier	top_root		714786	0					
ANR	715410	ConditionalExpression	IS_NOT_NULL ( top_root ) ? top_root : prev_node		714786	1					
ANR	715411	Condition	IS_NOT_NULL ( top_root )		714786	0					
ANR	715412	CallExpression	IS_NOT_NULL ( top_root )		714786	0					
ANR	715413	Callee	IS_NOT_NULL		714786	0					
ANR	715414	Identifier	IS_NOT_NULL		714786	0					
ANR	715415	ArgumentList	top_root		714786	1					
ANR	715416	Argument	top_root		714786	0					
ANR	715417	Identifier	top_root		714786	0					
ANR	715418	Identifier	top_root		714786	1					
ANR	715419	Identifier	prev_node		714786	2					
ANR	715420	ExpressionStatement	"swap_node ( node , top_root )"	3488:2:77366:77391	714786	19	True				
ANR	715421	CallExpression	"swap_node ( node , top_root )"		714786	0					
ANR	715422	Callee	swap_node		714786	0					
ANR	715423	Identifier	swap_node		714786	0					
ANR	715424	ArgumentList	node		714786	1					
ANR	715425	Argument	node		714786	0					
ANR	715426	Identifier	node		714786	0					
ANR	715427	Argument	top_root		714786	1					
ANR	715428	Identifier	top_root		714786	0					
ANR	715429	ExpressionStatement	onig_node_free ( top_root )	3489:2:77395:77419	714786	20	True				
ANR	715430	CallExpression	onig_node_free ( top_root )		714786	0					
ANR	715431	Callee	onig_node_free		714786	0					
ANR	715432	Identifier	onig_node_free		714786	0					
ANR	715433	ArgumentList	top_root		714786	1					
ANR	715434	Argument	top_root		714786	0					
ANR	715435	Identifier	top_root		714786	0					
ANR	715436	ReturnStatement	return 0 ;	3490:2:77423:77431	714786	21	True				
ANR	715437	PrimaryExpression	0		714786	0					
ANR	715438	Label	mem_err :	3492:1:77435:77442	714786	22	True				
ANR	715439	Identifier	mem_err		714786	0					
ANR	715440	ExpressionStatement	r = ONIGERR_MEMORY	3493:2:77446:77464	714786	23	True				
ANR	715441	AssignmentExpression	r = ONIGERR_MEMORY		714786	0		=			
ANR	715442	Identifier	r		714786	0					
ANR	715443	Identifier	ONIGERR_MEMORY		714786	1					
ANR	715444	Label	err :	3495:1:77468:77471	714786	24	True				
ANR	715445	Identifier	err		714786	0					
ANR	715446	ExpressionStatement	onig_node_free ( top_root )	3496:2:77475:77499	714786	25	True				
ANR	715447	CallExpression	onig_node_free ( top_root )		714786	0					
ANR	715448	Callee	onig_node_free		714786	0					
ANR	715449	Identifier	onig_node_free		714786	0					
ANR	715450	ArgumentList	top_root		714786	1					
ANR	715451	Argument	top_root		714786	0					
ANR	715452	Identifier	top_root		714786	0					
ANR	715453	ReturnStatement	return r ;	3497:2:77503:77511	714786	26	True				
ANR	715454	Identifier	r		714786	0					
ANR	715455	ReturnType	static int		714786	1					
ANR	715456	Identifier	expand_case_fold_string		714786	2					
ANR	715457	ParameterList	"Node * node , regex_t * reg"		714786	3					
ANR	715458	Parameter	Node * node	3365:24:74678:74687	714786	0	True				
ANR	715459	ParameterType	Node *		714786	0					
ANR	715460	Identifier	node		714786	1					
ANR	715461	Parameter	regex_t * reg	3365:36:74690:74701	714786	1	True				
ANR	715462	ParameterType	regex_t *		714786	0					
ANR	715463	Identifier	reg		714786	1					
ANR	715464	CFGEntryNode	ENTRY		714786		True				
ANR	715465	CFGExitNode	EXIT		714786		True				
ANR	715466	Symbol	* sn		714786						
ANR	715467	Symbol	IS_NOT_NULL		714786						
ANR	715468	Symbol	NCAR		714786						
ANR	715469	Symbol	expand_case_fold_make_rem_string		714786						
ANR	715470	Symbol	& srem		714786						
ANR	715471	Symbol	sn -> s		714786						
ANR	715472	Symbol	len		714786						
ANR	715473	Symbol	IS_NULL		714786						
ANR	715474	Symbol	reg		714786						
ANR	715475	Symbol	root		714786						
ANR	715476	Symbol	prev_node		714786						
ANR	715477	Symbol	end		714786						
ANR	715478	Symbol	ONIGENC_GET_CASE_FOLD_CODES_BY_STR		714786						
ANR	715479	Symbol	sn		714786						
ANR	715480	Symbol	sn -> end		714786						
ANR	715481	Symbol	& prev_node		714786						
ANR	715482	Symbol	NSTRING_IS_AMBIG		714786						
ANR	715483	Symbol	NULL		714786						
ANR	715484	Symbol	alt_num		714786						
ANR	715485	Symbol	top_root		714786						
ANR	715486	Symbol	NSTR		714786						
ANR	715487	Symbol	start		714786						
ANR	715488	Symbol	ONIGERR_MEMORY		714786						
ANR	715489	Symbol	enclen		714786						
ANR	715490	Symbol	n		714786						
ANR	715491	Symbol	reg -> enc		714786						
ANR	715492	Symbol	p		714786						
ANR	715493	Symbol	node		714786						
ANR	715494	Symbol	onig_node_list_add		714786						
ANR	715495	Symbol	THRESHOLD_CASE_FOLD_ALT_FOR_EXPANSION		714786						
ANR	715496	Symbol	r		714786						
ANR	715497	Symbol	srem		714786						
ANR	715498	Symbol	onig_node_str_cat		714786						
ANR	715499	Symbol	expand_case_fold_string_alt		714786						
ANR	715500	Symbol	reg -> case_fold_flag		714786						
ANR	715501	Symbol	onig_node_new_str		714786						
ANR	715502	Symbol	NULL_NODE		714786						
ANR	715503	Symbol	snode		714786						
ANR	715504	Symbol	items		714786						
ANR	715505	Symbol	* reg		714786						
ANR	715506	Function	setup_comb_exp_check	3510:0:77772:80595							
ANR	715507	FunctionDef	"setup_comb_exp_check (Node * node , int state , ScanEnv * env)"		715506	0					
ANR	715508	CompoundStatement		3512:0:77841:80595	715506	0					
ANR	715509	IdentifierDeclStatement	int type ;	3513:2:77845:77853	715506	0	True				
ANR	715510	IdentifierDecl	type		715506	0					
ANR	715511	IdentifierDeclType	int		715506	0					
ANR	715512	Identifier	type		715506	1					
ANR	715513	IdentifierDeclStatement	int r = state ;	3514:2:77857:77870	715506	1	True				
ANR	715514	IdentifierDecl	r = state		715506	0					
ANR	715515	IdentifierDeclType	int		715506	0					
ANR	715516	Identifier	r		715506	1					
ANR	715517	AssignmentExpression	r = state		715506	2		=			
ANR	715518	Identifier	state		715506	0					
ANR	715519	Identifier	state		715506	1					
ANR	715520	ExpressionStatement	type = NTYPE ( node )	3516:2:77875:77893	715506	2	True				
ANR	715521	AssignmentExpression	type = NTYPE ( node )		715506	0		=			
ANR	715522	Identifier	type		715506	0					
ANR	715523	CallExpression	NTYPE ( node )		715506	1					
ANR	715524	Callee	NTYPE		715506	0					
ANR	715525	Identifier	NTYPE		715506	0					
ANR	715526	ArgumentList	node		715506	1					
ANR	715527	Argument	node		715506	0					
ANR	715528	Identifier	node		715506	0					
ANR	715529	SwitchStatement	switch ( type )		715506	3					
ANR	715530	Condition	type	3517:10:77905:77908	715506	0	True				
ANR	715531	Identifier	type		715506	0					
ANR	715532	CompoundStatement		6:16:69:69	715506	1					
ANR	715533	Label	case NT_LIST :	3518:2:77915:77927	715506	0	True				
ANR	715534	Identifier	NT_LIST		715506	0					
ANR	715535	CompoundStatement		9:6:99:121	715506	1					
ANR	715536	IdentifierDeclStatement	Node * prev = NULL_NODE ;	3520:6:77941:77963	715506	0	True				
ANR	715537	IdentifierDecl	* prev = NULL_NODE		715506	0					
ANR	715538	IdentifierDeclType	Node *		715506	0					
ANR	715539	Identifier	prev		715506	1					
ANR	715540	AssignmentExpression	* prev = NULL_NODE		715506	2		=			
ANR	715541	Identifier	NULL_NODE		715506	0					
ANR	715542	Identifier	NULL_NODE		715506	1					
ANR	715543	DoStatement	do		715506	1					
ANR	715544	CompoundStatement		10:9:132:132	715506	0					
ANR	715545	ExpressionStatement	"r = setup_comb_exp_check ( NCAR ( node ) , r , env )"	3522:1:77977:78021	715506	0	True				
ANR	715546	AssignmentExpression	"r = setup_comb_exp_check ( NCAR ( node ) , r , env )"		715506	0		=			
ANR	715547	Identifier	r		715506	0					
ANR	715548	CallExpression	"setup_comb_exp_check ( NCAR ( node ) , r , env )"		715506	1					
ANR	715549	Callee	setup_comb_exp_check		715506	0					
ANR	715550	Identifier	setup_comb_exp_check		715506	0					
ANR	715551	ArgumentList	NCAR ( node )		715506	1					
ANR	715552	Argument	NCAR ( node )		715506	0					
ANR	715553	CallExpression	NCAR ( node )		715506	0					
ANR	715554	Callee	NCAR		715506	0					
ANR	715555	Identifier	NCAR		715506	0					
ANR	715556	ArgumentList	node		715506	1					
ANR	715557	Argument	node		715506	0					
ANR	715558	Identifier	node		715506	0					
ANR	715559	Argument	r		715506	1					
ANR	715560	Identifier	r		715506	0					
ANR	715561	Argument	env		715506	2					
ANR	715562	Identifier	env		715506	0					
ANR	715563	ExpressionStatement	prev = NCAR ( node )	3523:1:78024:78041	715506	1	True				
ANR	715564	AssignmentExpression	prev = NCAR ( node )		715506	0		=			
ANR	715565	Identifier	prev		715506	0					
ANR	715566	CallExpression	NCAR ( node )		715506	1					
ANR	715567	Callee	NCAR		715506	0					
ANR	715568	Identifier	NCAR		715506	0					
ANR	715569	ArgumentList	node		715506	1					
ANR	715570	Argument	node		715506	0					
ANR	715571	Identifier	node		715506	0					
ANR	715572	Condition	r >= 0 && IS_NOT_NULL ( node = NCDR ( node ) )	3524:15:78058:78097	715506	1	True				
ANR	715573	AndExpression	r >= 0 && IS_NOT_NULL ( node = NCDR ( node ) )		715506	0		&&			
ANR	715574	RelationalExpression	r >= 0		715506	0		>=			
ANR	715575	Identifier	r		715506	0					
ANR	715576	PrimaryExpression	0		715506	1					
ANR	715577	CallExpression	IS_NOT_NULL ( node = NCDR ( node ) )		715506	1					
ANR	715578	Callee	IS_NOT_NULL		715506	0					
ANR	715579	Identifier	IS_NOT_NULL		715506	0					
ANR	715580	ArgumentList	node = NCDR ( node )		715506	1					
ANR	715581	Argument	node = NCDR ( node )		715506	0					
ANR	715582	AssignmentExpression	node = NCDR ( node )		715506	0		=			
ANR	715583	Identifier	node		715506	0					
ANR	715584	CallExpression	NCDR ( node )		715506	1					
ANR	715585	Callee	NCDR		715506	0					
ANR	715586	Identifier	NCDR		715506	0					
ANR	715587	ArgumentList	node		715506	1					
ANR	715588	Argument	node		715506	0					
ANR	715589	Identifier	node		715506	0					
ANR	715590	BreakStatement	break ;	3526:4:78111:78116	715506	2	True				
ANR	715591	Label	case NT_ALT :	3528:2:78121:78132	715506	3	True				
ANR	715592	Identifier	NT_ALT		715506	0					
ANR	715593	CompoundStatement		19:6:304:311	715506	4					
ANR	715594	IdentifierDeclStatement	int ret ;	3530:6:78146:78153	715506	0	True				
ANR	715595	IdentifierDecl	ret		715506	0					
ANR	715596	IdentifierDeclType	int		715506	0					
ANR	715597	Identifier	ret		715506	1					
ANR	715598	DoStatement	do		715506	1					
ANR	715599	CompoundStatement		20:9:322:322	715506	0					
ANR	715600	ExpressionStatement	"ret = setup_comb_exp_check ( NCAR ( node ) , state , env )"	3532:1:78167:78217	715506	0	True				
ANR	715601	AssignmentExpression	"ret = setup_comb_exp_check ( NCAR ( node ) , state , env )"		715506	0		=			
ANR	715602	Identifier	ret		715506	0					
ANR	715603	CallExpression	"setup_comb_exp_check ( NCAR ( node ) , state , env )"		715506	1					
ANR	715604	Callee	setup_comb_exp_check		715506	0					
ANR	715605	Identifier	setup_comb_exp_check		715506	0					
ANR	715606	ArgumentList	NCAR ( node )		715506	1					
ANR	715607	Argument	NCAR ( node )		715506	0					
ANR	715608	CallExpression	NCAR ( node )		715506	0					
ANR	715609	Callee	NCAR		715506	0					
ANR	715610	Identifier	NCAR		715506	0					
ANR	715611	ArgumentList	node		715506	1					
ANR	715612	Argument	node		715506	0					
ANR	715613	Identifier	node		715506	0					
ANR	715614	Argument	state		715506	1					
ANR	715615	Identifier	state		715506	0					
ANR	715616	Argument	env		715506	2					
ANR	715617	Identifier	env		715506	0					
ANR	715618	ExpressionStatement	r |= ret	3533:1:78220:78228	715506	1	True				
ANR	715619	AssignmentExpression	r |= ret		715506	0		|=			
ANR	715620	Identifier	r		715506	0					
ANR	715621	Identifier	ret		715506	1					
ANR	715622	Condition	ret >= 0 && IS_NOT_NULL ( node = NCDR ( node ) )	3534:15:78245:78286	715506	1	True				
ANR	715623	AndExpression	ret >= 0 && IS_NOT_NULL ( node = NCDR ( node ) )		715506	0		&&			
ANR	715624	RelationalExpression	ret >= 0		715506	0		>=			
ANR	715625	Identifier	ret		715506	0					
ANR	715626	PrimaryExpression	0		715506	1					
ANR	715627	CallExpression	IS_NOT_NULL ( node = NCDR ( node ) )		715506	1					
ANR	715628	Callee	IS_NOT_NULL		715506	0					
ANR	715629	Identifier	IS_NOT_NULL		715506	0					
ANR	715630	ArgumentList	node = NCDR ( node )		715506	1					
ANR	715631	Argument	node = NCDR ( node )		715506	0					
ANR	715632	AssignmentExpression	node = NCDR ( node )		715506	0		=			
ANR	715633	Identifier	node		715506	0					
ANR	715634	CallExpression	NCDR ( node )		715506	1					
ANR	715635	Callee	NCDR		715506	0					
ANR	715636	Identifier	NCDR		715506	0					
ANR	715637	ArgumentList	node		715506	1					
ANR	715638	Argument	node		715506	0					
ANR	715639	Identifier	node		715506	0					
ANR	715640	BreakStatement	break ;	3536:4:78300:78305	715506	5	True				
ANR	715641	Label	case NT_QTFR :	3538:2:78310:78322	715506	6	True				
ANR	715642	Identifier	NT_QTFR		715506	0					
ANR	715643	CompoundStatement		33:6:617:628	715506	7					
ANR	715644	IdentifierDeclStatement	int child_state = state ;	3540:6:78336:78359	715506	0	True				
ANR	715645	IdentifierDecl	child_state = state		715506	0					
ANR	715646	IdentifierDeclType	int		715506	0					
ANR	715647	Identifier	child_state		715506	1					
ANR	715648	AssignmentExpression	child_state = state		715506	2		=			
ANR	715649	Identifier	state		715506	0					
ANR	715650	Identifier	state		715506	1					
ANR	715651	IdentifierDeclStatement	int add_state = 0 ;	3541:6:78367:78384	715506	1	True				
ANR	715652	IdentifierDecl	add_state = 0		715506	0					
ANR	715653	IdentifierDeclType	int		715506	0					
ANR	715654	Identifier	add_state		715506	1					
ANR	715655	AssignmentExpression	add_state = 0		715506	2		=			
ANR	715656	Identifier	add_state		715506	0					
ANR	715657	PrimaryExpression	0		715506	1					
ANR	715658	IdentifierDeclStatement	QtfrNode * qn = NQTFR ( node ) ;	3542:6:78392:78418	715506	2	True				
ANR	715659	IdentifierDecl	* qn = NQTFR ( node )		715506	0					
ANR	715660	IdentifierDeclType	QtfrNode *		715506	0					
ANR	715661	Identifier	qn		715506	1					
ANR	715662	AssignmentExpression	* qn = NQTFR ( node )		715506	2		=			
ANR	715663	Identifier	qn		715506	0					
ANR	715664	CallExpression	NQTFR ( node )		715506	1					
ANR	715665	Callee	NQTFR		715506	0					
ANR	715666	Identifier	NQTFR		715506	0					
ANR	715667	ArgumentList	node		715506	1					
ANR	715668	Argument	node		715506	0					
ANR	715669	Identifier	node		715506	0					
ANR	715670	IdentifierDeclStatement	Node * target = qn -> target ;	3543:6:78426:78451	715506	3	True				
ANR	715671	IdentifierDecl	* target = qn -> target		715506	0					
ANR	715672	IdentifierDeclType	Node *		715506	0					
ANR	715673	Identifier	target		715506	1					
ANR	715674	AssignmentExpression	* target = qn -> target		715506	2		=			
ANR	715675	Identifier	target		715506	0					
ANR	715676	PtrMemberAccess	qn -> target		715506	1					
ANR	715677	Identifier	qn		715506	0					
ANR	715678	Identifier	target		715506	1					
ANR	715679	IdentifierDeclStatement	int var_num ;	3544:6:78459:78470	715506	4	True				
ANR	715680	IdentifierDecl	var_num		715506	0					
ANR	715681	IdentifierDeclType	int		715506	0					
ANR	715682	Identifier	var_num		715506	1					
ANR	715683	IfStatement	if ( ! IS_REPEAT_INFINITE ( qn -> upper ) )		715506	5					
ANR	715684	Condition	! IS_REPEAT_INFINITE ( qn -> upper )	3546:10:78483:78513	715506	0	True				
ANR	715685	UnaryOperationExpression	! IS_REPEAT_INFINITE ( qn -> upper )		715506	0					
ANR	715686	UnaryOperator	!		715506	0					
ANR	715687	CallExpression	IS_REPEAT_INFINITE ( qn -> upper )		715506	1					
ANR	715688	Callee	IS_REPEAT_INFINITE		715506	0					
ANR	715689	Identifier	IS_REPEAT_INFINITE		715506	0					
ANR	715690	ArgumentList	qn -> upper		715506	1					
ANR	715691	Argument	qn -> upper		715506	0					
ANR	715692	PtrMemberAccess	qn -> upper		715506	0					
ANR	715693	Identifier	qn		715506	0					
ANR	715694	Identifier	upper		715506	1					
ANR	715695	CompoundStatement		35:43:674:674	715506	1					
ANR	715696	IfStatement	if ( qn -> upper > 1 )		715506	0					
ANR	715697	Condition	qn -> upper > 1	3547:5:78523:78535	715506	0	True				
ANR	715698	RelationalExpression	qn -> upper > 1		715506	0		>			
ANR	715699	PtrMemberAccess	qn -> upper		715506	0					
ANR	715700	Identifier	qn		715506	0					
ANR	715701	Identifier	upper		715506	1					
ANR	715702	PrimaryExpression	1		715506	1					
ANR	715703	CompoundStatement		36:20:696:696	715506	1					
ANR	715704	ExpressionStatement	child_state |= CEC_IN_FINITE_REPEAT	3549:3:78577:78612	715506	0	True				
ANR	715705	AssignmentExpression	child_state |= CEC_IN_FINITE_REPEAT		715506	0		|=			
ANR	715706	Identifier	child_state		715506	0					
ANR	715707	Identifier	CEC_IN_FINITE_REPEAT		715506	1					
ANR	715708	IfStatement	if ( env -> backrefed_mem == 0 )		715506	1					
ANR	715709	Condition	env -> backrefed_mem == 0	3552:7:78682:78704	715506	0	True				
ANR	715710	EqualityExpression	env -> backrefed_mem == 0		715506	0		==			
ANR	715711	PtrMemberAccess	env -> backrefed_mem		715506	0					
ANR	715712	Identifier	env		715506	0					
ANR	715713	Identifier	backrefed_mem		715506	1					
ANR	715714	PrimaryExpression	0		715506	1					
ANR	715715	CompoundStatement		41:32:865:865	715506	1					
ANR	715716	IfStatement	if ( NTYPE ( qn -> target ) == NT_ENCLOSE )		715506	0					
ANR	715717	Condition	NTYPE ( qn -> target ) == NT_ENCLOSE	3553:9:78718:78748	715506	0	True				
ANR	715718	EqualityExpression	NTYPE ( qn -> target ) == NT_ENCLOSE		715506	0		==			
ANR	715719	CallExpression	NTYPE ( qn -> target )		715506	0					
ANR	715720	Callee	NTYPE		715506	0					
ANR	715721	Identifier	NTYPE		715506	0					
ANR	715722	ArgumentList	qn -> target		715506	1					
ANR	715723	Argument	qn -> target		715506	0					
ANR	715724	PtrMemberAccess	qn -> target		715506	0					
ANR	715725	Identifier	qn		715506	0					
ANR	715726	Identifier	target		715506	1					
ANR	715727	Identifier	NT_ENCLOSE		715506	1					
ANR	715728	CompoundStatement		43:7:918:956	715506	1					
ANR	715729	IdentifierDeclStatement	EncloseNode * en = NENCLOSE ( qn -> target ) ;	3554:7:78760:78798	715506	0	True				
ANR	715730	IdentifierDecl	* en = NENCLOSE ( qn -> target )		715506	0					
ANR	715731	IdentifierDeclType	EncloseNode *		715506	0					
ANR	715732	Identifier	en		715506	1					
ANR	715733	AssignmentExpression	* en = NENCLOSE ( qn -> target )		715506	2		=			
ANR	715734	Identifier	en		715506	0					
ANR	715735	CallExpression	NENCLOSE ( qn -> target )		715506	1					
ANR	715736	Callee	NENCLOSE		715506	0					
ANR	715737	Identifier	NENCLOSE		715506	0					
ANR	715738	ArgumentList	qn -> target		715506	1					
ANR	715739	Argument	qn -> target		715506	0					
ANR	715740	PtrMemberAccess	qn -> target		715506	0					
ANR	715741	Identifier	qn		715506	0					
ANR	715742	Identifier	target		715506	1					
ANR	715743	IfStatement	if ( en -> type == ENCLOSE_MEMORY )		715506	1					
ANR	715744	Condition	en -> type == ENCLOSE_MEMORY	3555:11:78811:78836	715506	0	True				
ANR	715745	EqualityExpression	en -> type == ENCLOSE_MEMORY		715506	0		==			
ANR	715746	PtrMemberAccess	en -> type		715506	0					
ANR	715747	Identifier	en		715506	0					
ANR	715748	Identifier	type		715506	1					
ANR	715749	Identifier	ENCLOSE_MEMORY		715506	1					
ANR	715750	CompoundStatement		44:39:997:997	715506	1					
ANR	715751	IfStatement	if ( NTYPE ( en -> target ) == NT_QTFR )		715506	0					
ANR	715752	Condition	NTYPE ( en -> target ) == NT_QTFR	3556:6:78847:78874	715506	0	True				
ANR	715753	EqualityExpression	NTYPE ( en -> target ) == NT_QTFR		715506	0		==			
ANR	715754	CallExpression	NTYPE ( en -> target )		715506	0					
ANR	715755	Callee	NTYPE		715506	0					
ANR	715756	Identifier	NTYPE		715506	0					
ANR	715757	ArgumentList	en -> target		715506	1					
ANR	715758	Argument	en -> target		715506	0					
ANR	715759	PtrMemberAccess	en -> target		715506	0					
ANR	715760	Identifier	en		715506	0					
ANR	715761	Identifier	target		715506	1					
ANR	715762	Identifier	NT_QTFR		715506	1					
ANR	715763	CompoundStatement		46:4:1041:1072	715506	1					
ANR	715764	IdentifierDeclStatement	QtfrNode * q = NQTFR ( en -> target ) ;	3557:4:78883:78914	715506	0	True				
ANR	715765	IdentifierDecl	* q = NQTFR ( en -> target )		715506	0					
ANR	715766	IdentifierDeclType	QtfrNode *		715506	0					
ANR	715767	Identifier	q		715506	1					
ANR	715768	AssignmentExpression	* q = NQTFR ( en -> target )		715506	2		=			
ANR	715769	Identifier	q		715506	0					
ANR	715770	CallExpression	NQTFR ( en -> target )		715506	1					
ANR	715771	Callee	NQTFR		715506	0					
ANR	715772	Identifier	NQTFR		715506	0					
ANR	715773	ArgumentList	en -> target		715506	1					
ANR	715774	Argument	en -> target		715506	0					
ANR	715775	PtrMemberAccess	en -> target		715506	0					
ANR	715776	Identifier	en		715506	0					
ANR	715777	Identifier	target		715506	1					
ANR	715778	IfStatement	if ( IS_REPEAT_INFINITE ( q -> upper ) && q -> greedy == qn -> greedy )		715506	1					
ANR	715779	Condition	IS_REPEAT_INFINITE ( q -> upper ) && q -> greedy == qn -> greedy	3558:8:78924:78986	715506	0	True				
ANR	715780	AndExpression	IS_REPEAT_INFINITE ( q -> upper ) && q -> greedy == qn -> greedy		715506	0		&&			
ANR	715781	CallExpression	IS_REPEAT_INFINITE ( q -> upper )		715506	0					
ANR	715782	Callee	IS_REPEAT_INFINITE		715506	0					
ANR	715783	Identifier	IS_REPEAT_INFINITE		715506	0					
ANR	715784	ArgumentList	q -> upper		715506	1					
ANR	715785	Argument	q -> upper		715506	0					
ANR	715786	PtrMemberAccess	q -> upper		715506	0					
ANR	715787	Identifier	q		715506	0					
ANR	715788	Identifier	upper		715506	1					
ANR	715789	EqualityExpression	q -> greedy == qn -> greedy		715506	1		==			
ANR	715790	PtrMemberAccess	q -> greedy		715506	0					
ANR	715791	Identifier	q		715506	0					
ANR	715792	Identifier	greedy		715506	1					
ANR	715793	PtrMemberAccess	qn -> greedy		715506	1					
ANR	715794	Identifier	qn		715506	0					
ANR	715795	Identifier	greedy		715506	1					
ANR	715796	CompoundStatement		48:36:1147:1147	715506	1					
ANR	715797	ExpressionStatement	qn -> upper = ( qn -> lower == 0 ? 1 : qn -> lower )	3560:6:78997:79041	715506	0	True				
ANR	715798	AssignmentExpression	qn -> upper = ( qn -> lower == 0 ? 1 : qn -> lower )		715506	0		=			
ANR	715799	PtrMemberAccess	qn -> upper		715506	0					
ANR	715800	Identifier	qn		715506	0					
ANR	715801	Identifier	upper		715506	1					
ANR	715802	ConditionalExpression	qn -> lower == 0 ? 1 : qn -> lower		715506	1					
ANR	715803	Condition	qn -> lower == 0		715506	0					
ANR	715804	EqualityExpression	qn -> lower == 0		715506	0		==			
ANR	715805	PtrMemberAccess	qn -> lower		715506	0					
ANR	715806	Identifier	qn		715506	0					
ANR	715807	Identifier	lower		715506	1					
ANR	715808	PrimaryExpression	0		715506	1					
ANR	715809	PrimaryExpression	1		715506	1					
ANR	715810	PtrMemberAccess	qn -> lower		715506	2					
ANR	715811	Identifier	qn		715506	0					
ANR	715812	Identifier	lower		715506	1					
ANR	715813	IfStatement	if ( qn -> upper == 1 )		715506	1					
ANR	715814	Condition	qn -> upper == 1	3561:10:79053:79066	715506	0	True				
ANR	715815	EqualityExpression	qn -> upper == 1		715506	0		==			
ANR	715816	PtrMemberAccess	qn -> upper		715506	0					
ANR	715817	Identifier	qn		715506	0					
ANR	715818	Identifier	upper		715506	1					
ANR	715819	PrimaryExpression	1		715506	1					
ANR	715820	ExpressionStatement	child_state = state	3562:8:79077:79096	715506	1	True				
ANR	715821	AssignmentExpression	child_state = state		715506	0		=			
ANR	715822	Identifier	child_state		715506	0					
ANR	715823	Identifier	state		715506	1					
ANR	715824	IfStatement	if ( state & CEC_IN_FINITE_REPEAT )		715506	6					
ANR	715825	Condition	state & CEC_IN_FINITE_REPEAT	3571:10:79151:79178	715506	0	True				
ANR	715826	BitAndExpression	state & CEC_IN_FINITE_REPEAT		715506	0		&			
ANR	715827	Identifier	state		715506	0					
ANR	715828	Identifier	CEC_IN_FINITE_REPEAT		715506	1					
ANR	715829	CompoundStatement		60:40:1339:1339	715506	1					
ANR	715830	ExpressionStatement	qn -> comb_exp_check_num = - 1	3572:1:79184:79211	715506	0	True				
ANR	715831	AssignmentExpression	qn -> comb_exp_check_num = - 1		715506	0		=			
ANR	715832	PtrMemberAccess	qn -> comb_exp_check_num		715506	0					
ANR	715833	Identifier	qn		715506	0					
ANR	715834	Identifier	comb_exp_check_num		715506	1					
ANR	715835	UnaryOperationExpression	- 1		715506	1					
ANR	715836	UnaryOperator	-		715506	0					
ANR	715837	PrimaryExpression	1		715506	1					
ANR	715838	ElseStatement	else		715506	0					
ANR	715839	CompoundStatement		63:11:1390:1390	715506	0					
ANR	715840	IfStatement	if ( IS_REPEAT_INFINITE ( qn -> upper ) )		715506	0					
ANR	715841	Condition	IS_REPEAT_INFINITE ( qn -> upper )	3575:5:79239:79267	715506	0	True				
ANR	715842	CallExpression	IS_REPEAT_INFINITE ( qn -> upper )		715506	0					
ANR	715843	Callee	IS_REPEAT_INFINITE		715506	0					
ANR	715844	Identifier	IS_REPEAT_INFINITE		715506	0					
ANR	715845	ArgumentList	qn -> upper		715506	1					
ANR	715846	Argument	qn -> upper		715506	0					
ANR	715847	PtrMemberAccess	qn -> upper		715506	0					
ANR	715848	Identifier	qn		715506	0					
ANR	715849	Identifier	upper		715506	1					
ANR	715850	CompoundStatement		64:36:1428:1428	715506	1					
ANR	715851	ExpressionStatement	var_num = CEC_INFINITE_NUM	3576:3:79275:79301	715506	0	True				
ANR	715852	AssignmentExpression	var_num = CEC_INFINITE_NUM		715506	0		=			
ANR	715853	Identifier	var_num		715506	0					
ANR	715854	Identifier	CEC_INFINITE_NUM		715506	1					
ANR	715855	ExpressionStatement	child_state |= CEC_IN_INFINITE_REPEAT	3577:3:79306:79343	715506	1	True				
ANR	715856	AssignmentExpression	child_state |= CEC_IN_INFINITE_REPEAT		715506	0		|=			
ANR	715857	Identifier	child_state		715506	0					
ANR	715858	Identifier	CEC_IN_INFINITE_REPEAT		715506	1					
ANR	715859	ElseStatement	else		715506	0					
ANR	715860	CompoundStatement		68:6:1512:1512	715506	0					
ANR	715861	ExpressionStatement	var_num = qn -> upper - qn -> lower	3580:3:79359:79390	715506	0	True				
ANR	715862	AssignmentExpression	var_num = qn -> upper - qn -> lower		715506	0		=			
ANR	715863	Identifier	var_num		715506	0					
ANR	715864	AdditiveExpression	qn -> upper - qn -> lower		715506	1		-			
ANR	715865	PtrMemberAccess	qn -> upper		715506	0					
ANR	715866	Identifier	qn		715506	0					
ANR	715867	Identifier	upper		715506	1					
ANR	715868	PtrMemberAccess	qn -> lower		715506	1					
ANR	715869	Identifier	qn		715506	0					
ANR	715870	Identifier	lower		715506	1					
ANR	715871	IfStatement	if ( var_num >= CEC_THRES_NUM_BIG_REPEAT )		715506	1					
ANR	715872	Condition	var_num >= CEC_THRES_NUM_BIG_REPEAT	3583:5:79401:79435	715506	0	True				
ANR	715873	RelationalExpression	var_num >= CEC_THRES_NUM_BIG_REPEAT		715506	0		>=			
ANR	715874	Identifier	var_num		715506	0					
ANR	715875	Identifier	CEC_THRES_NUM_BIG_REPEAT		715506	1					
ANR	715876	ExpressionStatement	add_state |= CEC_CONT_BIG_REPEAT	3584:3:79441:79473	715506	1	True				
ANR	715877	AssignmentExpression	add_state |= CEC_CONT_BIG_REPEAT		715506	0		|=			
ANR	715878	Identifier	add_state		715506	0					
ANR	715879	Identifier	CEC_CONT_BIG_REPEAT		715506	1					
ANR	715880	IfStatement	if ( ( ( state & CEC_IN_INFINITE_REPEAT ) != 0 && var_num != 0 ) || ( ( state & CEC_CONT_BIG_REPEAT ) != 0 && var_num >= CEC_THRES_NUM_BIG_REPEAT ) )		715506	2					
ANR	715881	Condition	( ( state & CEC_IN_INFINITE_REPEAT ) != 0 && var_num != 0 ) || ( ( state & CEC_CONT_BIG_REPEAT ) != 0 && var_num >= CEC_THRES_NUM_BIG_REPEAT )	3586:5:79481:79625	715506	0	True				
ANR	715882	OrExpression	( ( state & CEC_IN_INFINITE_REPEAT ) != 0 && var_num != 0 ) || ( ( state & CEC_CONT_BIG_REPEAT ) != 0 && var_num >= CEC_THRES_NUM_BIG_REPEAT )		715506	0		||			
ANR	715883	AndExpression	( state & CEC_IN_INFINITE_REPEAT ) != 0 && var_num != 0		715506	0		&&			
ANR	715884	EqualityExpression	( state & CEC_IN_INFINITE_REPEAT ) != 0		715506	0		!=			
ANR	715885	BitAndExpression	state & CEC_IN_INFINITE_REPEAT		715506	0		&			
ANR	715886	Identifier	state		715506	0					
ANR	715887	Identifier	CEC_IN_INFINITE_REPEAT		715506	1					
ANR	715888	PrimaryExpression	0		715506	1					
ANR	715889	EqualityExpression	var_num != 0		715506	1		!=			
ANR	715890	Identifier	var_num		715506	0					
ANR	715891	PrimaryExpression	0		715506	1					
ANR	715892	AndExpression	( state & CEC_CONT_BIG_REPEAT ) != 0 && var_num >= CEC_THRES_NUM_BIG_REPEAT		715506	1		&&			
ANR	715893	EqualityExpression	( state & CEC_CONT_BIG_REPEAT ) != 0		715506	0		!=			
ANR	715894	BitAndExpression	state & CEC_CONT_BIG_REPEAT		715506	0		&			
ANR	715895	Identifier	state		715506	0					
ANR	715896	Identifier	CEC_CONT_BIG_REPEAT		715506	1					
ANR	715897	PrimaryExpression	0		715506	1					
ANR	715898	RelationalExpression	var_num >= CEC_THRES_NUM_BIG_REPEAT		715506	1		>=			
ANR	715899	Identifier	var_num		715506	0					
ANR	715900	Identifier	CEC_THRES_NUM_BIG_REPEAT		715506	1					
ANR	715901	CompoundStatement		77:44:1786:1786	715506	1					
ANR	715902	IfStatement	if ( qn -> comb_exp_check_num == 0 )		715506	0					
ANR	715903	Condition	qn -> comb_exp_check_num == 0	3589:7:79637:79663	715506	0	True				
ANR	715904	EqualityExpression	qn -> comb_exp_check_num == 0		715506	0		==			
ANR	715905	PtrMemberAccess	qn -> comb_exp_check_num		715506	0					
ANR	715906	Identifier	qn		715506	0					
ANR	715907	Identifier	comb_exp_check_num		715506	1					
ANR	715908	PrimaryExpression	0		715506	1					
ANR	715909	CompoundStatement		78:36:1824:1824	715506	1					
ANR	715910	ExpressionStatement	env -> num_comb_exp_check ++	3590:5:79673:79698	715506	0	True				
ANR	715911	PostIncDecOperationExpression	env -> num_comb_exp_check ++		715506	0					
ANR	715912	PtrMemberAccess	env -> num_comb_exp_check		715506	0					
ANR	715913	Identifier	env		715506	0					
ANR	715914	Identifier	num_comb_exp_check		715506	1					
ANR	715915	IncDec	++		715506	1					
ANR	715916	ExpressionStatement	qn -> comb_exp_check_num = env -> num_comb_exp_check	3591:5:79705:79753	715506	1	True				
ANR	715917	AssignmentExpression	qn -> comb_exp_check_num = env -> num_comb_exp_check		715506	0		=			
ANR	715918	PtrMemberAccess	qn -> comb_exp_check_num		715506	0					
ANR	715919	Identifier	qn		715506	0					
ANR	715920	Identifier	comb_exp_check_num		715506	1					
ANR	715921	PtrMemberAccess	env -> num_comb_exp_check		715506	1					
ANR	715922	Identifier	env		715506	0					
ANR	715923	Identifier	num_comb_exp_check		715506	1					
ANR	715924	IfStatement	if ( env -> curr_max_regnum > env -> comb_exp_max_regnum )		715506	2					
ANR	715925	Condition	env -> curr_max_regnum > env -> comb_exp_max_regnum	3592:9:79764:79810	715506	0	True				
ANR	715926	RelationalExpression	env -> curr_max_regnum > env -> comb_exp_max_regnum		715506	0		>			
ANR	715927	PtrMemberAccess	env -> curr_max_regnum		715506	0					
ANR	715928	Identifier	env		715506	0					
ANR	715929	Identifier	curr_max_regnum		715506	1					
ANR	715930	PtrMemberAccess	env -> comb_exp_max_regnum		715506	1					
ANR	715931	Identifier	env		715506	0					
ANR	715932	Identifier	comb_exp_max_regnum		715506	1					
ANR	715933	ExpressionStatement	env -> comb_exp_max_regnum = env -> curr_max_regnum	3593:7:79820:79867	715506	1	True				
ANR	715934	AssignmentExpression	env -> comb_exp_max_regnum = env -> curr_max_regnum		715506	0		=			
ANR	715935	PtrMemberAccess	env -> comb_exp_max_regnum		715506	0					
ANR	715936	Identifier	env		715506	0					
ANR	715937	Identifier	comb_exp_max_regnum		715506	1					
ANR	715938	PtrMemberAccess	env -> curr_max_regnum		715506	1					
ANR	715939	Identifier	env		715506	0					
ANR	715940	Identifier	curr_max_regnum		715506	1					
ANR	715941	ExpressionStatement	"r = setup_comb_exp_check ( target , child_state , env )"	3598:6:79892:79942	715506	7	True				
ANR	715942	AssignmentExpression	"r = setup_comb_exp_check ( target , child_state , env )"		715506	0		=			
ANR	715943	Identifier	r		715506	0					
ANR	715944	CallExpression	"setup_comb_exp_check ( target , child_state , env )"		715506	1					
ANR	715945	Callee	setup_comb_exp_check		715506	0					
ANR	715946	Identifier	setup_comb_exp_check		715506	0					
ANR	715947	ArgumentList	target		715506	1					
ANR	715948	Argument	target		715506	0					
ANR	715949	Identifier	target		715506	0					
ANR	715950	Argument	child_state		715506	1					
ANR	715951	Identifier	child_state		715506	0					
ANR	715952	Argument	env		715506	2					
ANR	715953	Identifier	env		715506	0					
ANR	715954	ExpressionStatement	r |= add_state	3599:6:79950:79964	715506	8	True				
ANR	715955	AssignmentExpression	r |= add_state		715506	0		|=			
ANR	715956	Identifier	r		715506	0					
ANR	715957	Identifier	add_state		715506	1					
ANR	715958	BreakStatement	break ;	3601:4:79976:79981	715506	8	True				
ANR	715959	Label	case NT_ENCLOSE :	3603:2:79986:80001	715506	9	True				
ANR	715960	Identifier	NT_ENCLOSE		715506	0					
ANR	715961	CompoundStatement		94:6:2173:2205	715506	10					
ANR	715962	IdentifierDeclStatement	EncloseNode * en = NENCLOSE ( node ) ;	3605:6:80015:80047	715506	0	True				
ANR	715963	IdentifierDecl	* en = NENCLOSE ( node )		715506	0					
ANR	715964	IdentifierDeclType	EncloseNode *		715506	0					
ANR	715965	Identifier	en		715506	1					
ANR	715966	AssignmentExpression	* en = NENCLOSE ( node )		715506	2		=			
ANR	715967	Identifier	en		715506	0					
ANR	715968	CallExpression	NENCLOSE ( node )		715506	1					
ANR	715969	Callee	NENCLOSE		715506	0					
ANR	715970	Identifier	NENCLOSE		715506	0					
ANR	715971	ArgumentList	node		715506	1					
ANR	715972	Argument	node		715506	0					
ANR	715973	Identifier	node		715506	0					
ANR	715974	SwitchStatement	switch ( en -> type )		715506	1					
ANR	715975	Condition	en -> type	3607:14:80064:80071	715506	0	True				
ANR	715976	PtrMemberAccess	en -> type		715506	0					
ANR	715977	Identifier	en		715506	0					
ANR	715978	Identifier	type		715506	1					
ANR	715979	CompoundStatement		96:24:2232:2232	715506	1					
ANR	715980	Label	case ENCLOSE_MEMORY :	3608:6:80082:80101	715506	0	True				
ANR	715981	Identifier	ENCLOSE_MEMORY		715506	0					
ANR	715982	CompoundStatement		98:1:2262:2262	715506	1					
ANR	715983	IfStatement	if ( env -> curr_max_regnum < en -> regnum )		715506	0					
ANR	715984	Condition	env -> curr_max_regnum < en -> regnum	3610:7:80113:80145	715506	0	True				
ANR	715985	RelationalExpression	env -> curr_max_regnum < en -> regnum		715506	0		<			
ANR	715986	PtrMemberAccess	env -> curr_max_regnum		715506	0					
ANR	715987	Identifier	env		715506	0					
ANR	715988	Identifier	curr_max_regnum		715506	1					
ANR	715989	PtrMemberAccess	en -> regnum		715506	1					
ANR	715990	Identifier	en		715506	0					
ANR	715991	Identifier	regnum		715506	1					
ANR	715992	ExpressionStatement	env -> curr_max_regnum = en -> regnum	3611:5:80153:80186	715506	1	True				
ANR	715993	AssignmentExpression	env -> curr_max_regnum = en -> regnum		715506	0		=			
ANR	715994	PtrMemberAccess	env -> curr_max_regnum		715506	0					
ANR	715995	Identifier	env		715506	0					
ANR	715996	Identifier	curr_max_regnum		715506	1					
ANR	715997	PtrMemberAccess	en -> regnum		715506	1					
ANR	715998	Identifier	en		715506	0					
ANR	715999	Identifier	regnum		715506	1					
ANR	716000	ExpressionStatement	"r = setup_comb_exp_check ( en -> target , state , env )"	3613:3:80192:80240	715506	1	True				
ANR	716001	AssignmentExpression	"r = setup_comb_exp_check ( en -> target , state , env )"		715506	0		=			
ANR	716002	Identifier	r		715506	0					
ANR	716003	CallExpression	"setup_comb_exp_check ( en -> target , state , env )"		715506	1					
ANR	716004	Callee	setup_comb_exp_check		715506	0					
ANR	716005	Identifier	setup_comb_exp_check		715506	0					
ANR	716006	ArgumentList	en -> target		715506	1					
ANR	716007	Argument	en -> target		715506	0					
ANR	716008	PtrMemberAccess	en -> target		715506	0					
ANR	716009	Identifier	en		715506	0					
ANR	716010	Identifier	target		715506	1					
ANR	716011	Argument	state		715506	1					
ANR	716012	Identifier	state		715506	0					
ANR	716013	Argument	env		715506	2					
ANR	716014	Identifier	env		715506	0					
ANR	716015	BreakStatement	break ;	3615:1:80246:80251	715506	2	True				
ANR	716016	Label	default :	3617:6:80260:80267	715506	3	True				
ANR	716017	Identifier	default		715506	0					
ANR	716018	ExpressionStatement	"r = setup_comb_exp_check ( en -> target , state , env )"	3618:1:80270:80318	715506	4	True				
ANR	716019	AssignmentExpression	"r = setup_comb_exp_check ( en -> target , state , env )"		715506	0		=			
ANR	716020	Identifier	r		715506	0					
ANR	716021	CallExpression	"setup_comb_exp_check ( en -> target , state , env )"		715506	1					
ANR	716022	Callee	setup_comb_exp_check		715506	0					
ANR	716023	Identifier	setup_comb_exp_check		715506	0					
ANR	716024	ArgumentList	en -> target		715506	1					
ANR	716025	Argument	en -> target		715506	0					
ANR	716026	PtrMemberAccess	en -> target		715506	0					
ANR	716027	Identifier	en		715506	0					
ANR	716028	Identifier	target		715506	1					
ANR	716029	Argument	state		715506	1					
ANR	716030	Identifier	state		715506	0					
ANR	716031	Argument	env		715506	2					
ANR	716032	Identifier	env		715506	0					
ANR	716033	BreakStatement	break ;	3619:1:80321:80326	715506	5	True				
ANR	716034	BreakStatement	break ;	3622:4:80346:80351	715506	11	True				
ANR	716035	Label	case NT_CALL :	3625:2:80379:80391	715506	12	True				
ANR	716036	Identifier	NT_CALL		715506	0					
ANR	716037	IfStatement	if ( IS_CALL_RECURSION ( NCALL ( node ) ) )		715506	13					
ANR	716038	Condition	IS_CALL_RECURSION ( NCALL ( node ) )	3626:8:80401:80430	715506	0	True				
ANR	716039	CallExpression	IS_CALL_RECURSION ( NCALL ( node ) )		715506	0					
ANR	716040	Callee	IS_CALL_RECURSION		715506	0					
ANR	716041	Identifier	IS_CALL_RECURSION		715506	0					
ANR	716042	ArgumentList	NCALL ( node )		715506	1					
ANR	716043	Argument	NCALL ( node )		715506	0					
ANR	716044	CallExpression	NCALL ( node )		715506	0					
ANR	716045	Callee	NCALL		715506	0					
ANR	716046	Identifier	NCALL		715506	0					
ANR	716047	ArgumentList	node		715506	1					
ANR	716048	Argument	node		715506	0					
ANR	716049	Identifier	node		715506	0					
ANR	716050	ExpressionStatement	env -> has_recursion = 1	3627:6:80439:80461	715506	1	True				
ANR	716051	AssignmentExpression	env -> has_recursion = 1		715506	0		=			
ANR	716052	PtrMemberAccess	env -> has_recursion		715506	0					
ANR	716053	Identifier	env		715506	0					
ANR	716054	Identifier	has_recursion		715506	1					
ANR	716055	PrimaryExpression	1		715506	1					
ANR	716056	ElseStatement	else		715506	0					
ANR	716057	ExpressionStatement	"r = setup_comb_exp_check ( NCALL ( node ) -> target , state , env )"	3629:6:80478:80535	715506	0	True				
ANR	716058	AssignmentExpression	"r = setup_comb_exp_check ( NCALL ( node ) -> target , state , env )"		715506	0		=			
ANR	716059	Identifier	r		715506	0					
ANR	716060	CallExpression	"setup_comb_exp_check ( NCALL ( node ) -> target , state , env )"		715506	1					
ANR	716061	Callee	setup_comb_exp_check		715506	0					
ANR	716062	Identifier	setup_comb_exp_check		715506	0					
ANR	716063	ArgumentList	NCALL ( node ) -> target		715506	1					
ANR	716064	Argument	NCALL ( node ) -> target		715506	0					
ANR	716065	PtrMemberAccess	NCALL ( node ) -> target		715506	0					
ANR	716066	CallExpression	NCALL ( node )		715506	0					
ANR	716067	Callee	NCALL		715506	0					
ANR	716068	Identifier	NCALL		715506	0					
ANR	716069	ArgumentList	node		715506	1					
ANR	716070	Argument	node		715506	0					
ANR	716071	Identifier	node		715506	0					
ANR	716072	Identifier	target		715506	1					
ANR	716073	Argument	state		715506	1					
ANR	716074	Identifier	state		715506	0					
ANR	716075	Argument	env		715506	2					
ANR	716076	Identifier	env		715506	0					
ANR	716077	BreakStatement	break ;	3630:4:80541:80546	715506	14	True				
ANR	716078	Label	default :	3633:2:80558:80565	715506	15	True				
ANR	716079	Identifier	default		715506	0					
ANR	716080	BreakStatement	break ;	3634:4:80571:80576	715506	16	True				
ANR	716081	ReturnStatement	return r ;	3637:2:80585:80593	715506	4	True				
ANR	716082	Identifier	r		715506	0					
ANR	716083	ReturnType	static int		715506	1					
ANR	716084	Identifier	setup_comb_exp_check		715506	2					
ANR	716085	ParameterList	"Node * node , int state , ScanEnv * env"		715506	3					
ANR	716086	Parameter	Node * node	3511:21:77804:77813	715506	0	True				
ANR	716087	ParameterType	Node *		715506	0					
ANR	716088	Identifier	node		715506	1					
ANR	716089	Parameter	int state	3511:33:77816:77824	715506	1	True				
ANR	716090	ParameterType	int		715506	0					
ANR	716091	Identifier	state		715506	1					
ANR	716092	Parameter	ScanEnv * env	3511:44:77827:77838	715506	2	True				
ANR	716093	ParameterType	ScanEnv *		715506	0					
ANR	716094	Identifier	env		715506	1					
ANR	716095	CFGEntryNode	ENTRY		715506		True				
ANR	716096	CFGExitNode	EXIT		715506		True				
ANR	716097	Symbol	NCAR		715506						
ANR	716098	Symbol	prev		715506						
ANR	716099	Symbol	add_state		715506						
ANR	716100	Symbol	type		715506						
ANR	716101	Symbol	NQTFR		715506						
ANR	716102	Symbol	ENCLOSE_MEMORY		715506						
ANR	716103	Symbol	en -> type		715506						
ANR	716104	Symbol	env -> curr_max_regnum		715506						
ANR	716105	Symbol	state		715506						
ANR	716106	Symbol	IS_REPEAT_INFINITE		715506						
ANR	716107	Symbol	env -> backrefed_mem		715506						
ANR	716108	Symbol	qn		715506						
ANR	716109	Symbol	ret		715506						
ANR	716110	Symbol	CEC_IN_FINITE_REPEAT		715506						
ANR	716111	Symbol	en -> regnum		715506						
ANR	716112	Symbol	CEC_THRES_NUM_BIG_REPEAT		715506						
ANR	716113	Symbol	NCDR		715506						
ANR	716114	Symbol	* env		715506						
ANR	716115	Symbol	en		715506						
ANR	716116	Symbol	qn -> target		715506						
ANR	716117	Symbol	env -> has_recursion		715506						
ANR	716118	Symbol	node		715506						
ANR	716119	Symbol	qn -> upper		715506						
ANR	716120	Symbol	q -> greedy		715506						
ANR	716121	Symbol	NT_ENCLOSE		715506						
ANR	716122	Symbol	IS_CALL_RECURSION		715506						
ANR	716123	Symbol	NULL_NODE		715506						
ANR	716124	Symbol	* qn		715506						
ANR	716125	Symbol	qn -> greedy		715506						
ANR	716126	Symbol	IS_NOT_NULL		715506						
ANR	716127	Symbol	child_state		715506						
ANR	716128	Symbol	NCALL		715506						
ANR	716129	Symbol	env -> num_comb_exp_check		715506						
ANR	716130	Symbol	* en		715506						
ANR	716131	Symbol	CEC_CONT_BIG_REPEAT		715506						
ANR	716132	Symbol	q -> upper		715506						
ANR	716133	Symbol	qn -> lower		715506						
ANR	716134	Symbol	NT_QTFR		715506						
ANR	716135	Symbol	NENCLOSE		715506						
ANR	716136	Symbol	setup_comb_exp_check		715506						
ANR	716137	Symbol	NCALL ( node ) -> target		715506						
ANR	716138	Symbol	env -> comb_exp_max_regnum		715506						
ANR	716139	Symbol	qn -> comb_exp_check_num		715506						
ANR	716140	Symbol	CEC_INFINITE_NUM		715506						
ANR	716141	Symbol	CEC_IN_INFINITE_REPEAT		715506						
ANR	716142	Symbol	env		715506						
ANR	716143	Symbol	target		715506						
ANR	716144	Symbol	q		715506						
ANR	716145	Symbol	r		715506						
ANR	716146	Symbol	var_num		715506						
ANR	716147	Symbol	en -> target		715506						
ANR	716148	Symbol	NTYPE		715506						
ANR	716149	Symbol	* q		715506						
ANR	716150	Symbol	* NCALL		715506						
ANR	716151	Function	setup_tree	3654:0:81047:87189							
ANR	716152	FunctionDef	"setup_tree (Node * node , regex_t * reg , int state , ScanEnv * env)"		716151	0					
ANR	716153	CompoundStatement		3656:0:81120:87189	716151	0					
ANR	716154	IdentifierDeclStatement	int type ;	3657:2:81124:81132	716151	0	True				
ANR	716155	IdentifierDecl	type		716151	0					
ANR	716156	IdentifierDeclType	int		716151	0					
ANR	716157	Identifier	type		716151	1					
ANR	716158	IdentifierDeclStatement	int r = 0 ;	3658:2:81136:81145	716151	1	True				
ANR	716159	IdentifierDecl	r = 0		716151	0					
ANR	716160	IdentifierDeclType	int		716151	0					
ANR	716161	Identifier	r		716151	1					
ANR	716162	AssignmentExpression	r = 0		716151	2		=			
ANR	716163	Identifier	r		716151	0					
ANR	716164	PrimaryExpression	0		716151	1					
ANR	716165	ExpressionStatement	type = NTYPE ( node )	3660:2:81150:81168	716151	2	True				
ANR	716166	AssignmentExpression	type = NTYPE ( node )		716151	0		=			
ANR	716167	Identifier	type		716151	0					
ANR	716168	CallExpression	NTYPE ( node )		716151	1					
ANR	716169	Callee	NTYPE		716151	0					
ANR	716170	Identifier	NTYPE		716151	0					
ANR	716171	ArgumentList	node		716151	1					
ANR	716172	Argument	node		716151	0					
ANR	716173	Identifier	node		716151	0					
ANR	716174	SwitchStatement	switch ( type )		716151	3					
ANR	716175	Condition	type	3661:10:81180:81183	716151	0	True				
ANR	716176	Identifier	type		716151	0					
ANR	716177	CompoundStatement		6:16:65:65	716151	1					
ANR	716178	Label	case NT_LIST :	3662:2:81190:81202	716151	0	True				
ANR	716179	Identifier	NT_LIST		716151	0					
ANR	716180	CompoundStatement		9:6:95:117	716151	1					
ANR	716181	IdentifierDeclStatement	Node * prev = NULL_NODE ;	3664:6:81216:81238	716151	0	True				
ANR	716182	IdentifierDecl	* prev = NULL_NODE		716151	0					
ANR	716183	IdentifierDeclType	Node *		716151	0					
ANR	716184	Identifier	prev		716151	1					
ANR	716185	AssignmentExpression	* prev = NULL_NODE		716151	2		=			
ANR	716186	Identifier	NULL_NODE		716151	0					
ANR	716187	Identifier	NULL_NODE		716151	1					
ANR	716188	DoStatement	do		716151	1					
ANR	716189	CompoundStatement		10:9:128:128	716151	0					
ANR	716190	ExpressionStatement	"r = setup_tree ( NCAR ( node ) , reg , state , env )"	3666:1:81252:81295	716151	0	True				
ANR	716191	AssignmentExpression	"r = setup_tree ( NCAR ( node ) , reg , state , env )"		716151	0		=			
ANR	716192	Identifier	r		716151	0					
ANR	716193	CallExpression	"setup_tree ( NCAR ( node ) , reg , state , env )"		716151	1					
ANR	716194	Callee	setup_tree		716151	0					
ANR	716195	Identifier	setup_tree		716151	0					
ANR	716196	ArgumentList	NCAR ( node )		716151	1					
ANR	716197	Argument	NCAR ( node )		716151	0					
ANR	716198	CallExpression	NCAR ( node )		716151	0					
ANR	716199	Callee	NCAR		716151	0					
ANR	716200	Identifier	NCAR		716151	0					
ANR	716201	ArgumentList	node		716151	1					
ANR	716202	Argument	node		716151	0					
ANR	716203	Identifier	node		716151	0					
ANR	716204	Argument	reg		716151	1					
ANR	716205	Identifier	reg		716151	0					
ANR	716206	Argument	state		716151	2					
ANR	716207	Identifier	state		716151	0					
ANR	716208	Argument	env		716151	3					
ANR	716209	Identifier	env		716151	0					
ANR	716210	IfStatement	if ( IS_NOT_NULL ( prev ) && r == 0 )		716151	1					
ANR	716211	Condition	IS_NOT_NULL ( prev ) && r == 0	3667:5:81302:81328	716151	0	True				
ANR	716212	AndExpression	IS_NOT_NULL ( prev ) && r == 0		716151	0		&&			
ANR	716213	CallExpression	IS_NOT_NULL ( prev )		716151	0					
ANR	716214	Callee	IS_NOT_NULL		716151	0					
ANR	716215	Identifier	IS_NOT_NULL		716151	0					
ANR	716216	ArgumentList	prev		716151	1					
ANR	716217	Argument	prev		716151	0					
ANR	716218	Identifier	prev		716151	0					
ANR	716219	EqualityExpression	r == 0		716151	1		==			
ANR	716220	Identifier	r		716151	0					
ANR	716221	PrimaryExpression	0		716151	1					
ANR	716222	CompoundStatement		12:34:210:210	716151	1					
ANR	716223	ExpressionStatement	"r = next_setup ( prev , NCAR ( node ) , reg )"	3668:3:81336:81373	716151	0	True				
ANR	716224	AssignmentExpression	"r = next_setup ( prev , NCAR ( node ) , reg )"		716151	0		=			
ANR	716225	Identifier	r		716151	0					
ANR	716226	CallExpression	"next_setup ( prev , NCAR ( node ) , reg )"		716151	1					
ANR	716227	Callee	next_setup		716151	0					
ANR	716228	Identifier	next_setup		716151	0					
ANR	716229	ArgumentList	prev		716151	1					
ANR	716230	Argument	prev		716151	0					
ANR	716231	Identifier	prev		716151	0					
ANR	716232	Argument	NCAR ( node )		716151	1					
ANR	716233	CallExpression	NCAR ( node )		716151	0					
ANR	716234	Callee	NCAR		716151	0					
ANR	716235	Identifier	NCAR		716151	0					
ANR	716236	ArgumentList	node		716151	1					
ANR	716237	Argument	node		716151	0					
ANR	716238	Identifier	node		716151	0					
ANR	716239	Argument	reg		716151	2					
ANR	716240	Identifier	reg		716151	0					
ANR	716241	ExpressionStatement	prev = NCAR ( node )	3670:1:81379:81396	716151	2	True				
ANR	716242	AssignmentExpression	prev = NCAR ( node )		716151	0		=			
ANR	716243	Identifier	prev		716151	0					
ANR	716244	CallExpression	NCAR ( node )		716151	1					
ANR	716245	Callee	NCAR		716151	0					
ANR	716246	Identifier	NCAR		716151	0					
ANR	716247	ArgumentList	node		716151	1					
ANR	716248	Argument	node		716151	0					
ANR	716249	Identifier	node		716151	0					
ANR	716250	Condition	r == 0 && IS_NOT_NULL ( node = NCDR ( node ) )	3671:15:81413:81452	716151	1	True				
ANR	716251	AndExpression	r == 0 && IS_NOT_NULL ( node = NCDR ( node ) )		716151	0		&&			
ANR	716252	EqualityExpression	r == 0		716151	0		==			
ANR	716253	Identifier	r		716151	0					
ANR	716254	PrimaryExpression	0		716151	1					
ANR	716255	CallExpression	IS_NOT_NULL ( node = NCDR ( node ) )		716151	1					
ANR	716256	Callee	IS_NOT_NULL		716151	0					
ANR	716257	Identifier	IS_NOT_NULL		716151	0					
ANR	716258	ArgumentList	node = NCDR ( node )		716151	1					
ANR	716259	Argument	node = NCDR ( node )		716151	0					
ANR	716260	AssignmentExpression	node = NCDR ( node )		716151	0		=			
ANR	716261	Identifier	node		716151	0					
ANR	716262	CallExpression	NCDR ( node )		716151	1					
ANR	716263	Callee	NCDR		716151	0					
ANR	716264	Identifier	NCDR		716151	0					
ANR	716265	ArgumentList	node		716151	1					
ANR	716266	Argument	node		716151	0					
ANR	716267	Identifier	node		716151	0					
ANR	716268	BreakStatement	break ;	3673:4:81466:81471	716151	2	True				
ANR	716269	Label	case NT_ALT :	3675:2:81476:81487	716151	3	True				
ANR	716270	Identifier	NT_ALT		716151	0					
ANR	716271	DoStatement	do		716151	4					
ANR	716272	CompoundStatement		21:7:375:375	716151	0					
ANR	716273	ExpressionStatement	"r = setup_tree ( NCAR ( node ) , reg , ( state | IN_ALT ) , env )"	3677:6:81504:81558	716151	0	True				
ANR	716274	AssignmentExpression	"r = setup_tree ( NCAR ( node ) , reg , ( state | IN_ALT ) , env )"		716151	0		=			
ANR	716275	Identifier	r		716151	0					
ANR	716276	CallExpression	"setup_tree ( NCAR ( node ) , reg , ( state | IN_ALT ) , env )"		716151	1					
ANR	716277	Callee	setup_tree		716151	0					
ANR	716278	Identifier	setup_tree		716151	0					
ANR	716279	ArgumentList	NCAR ( node )		716151	1					
ANR	716280	Argument	NCAR ( node )		716151	0					
ANR	716281	CallExpression	NCAR ( node )		716151	0					
ANR	716282	Callee	NCAR		716151	0					
ANR	716283	Identifier	NCAR		716151	0					
ANR	716284	ArgumentList	node		716151	1					
ANR	716285	Argument	node		716151	0					
ANR	716286	Identifier	node		716151	0					
ANR	716287	Argument	reg		716151	1					
ANR	716288	Identifier	reg		716151	0					
ANR	716289	Argument	state | IN_ALT		716151	2					
ANR	716290	InclusiveOrExpression	state | IN_ALT		716151	0		|			
ANR	716291	Identifier	state		716151	0					
ANR	716292	Identifier	IN_ALT		716151	1					
ANR	716293	Argument	env		716151	3					
ANR	716294	Identifier	env		716151	0					
ANR	716295	Condition	r == 0 && IS_NOT_NULL ( node = NCDR ( node ) )	3678:13:81573:81612	716151	1	True				
ANR	716296	AndExpression	r == 0 && IS_NOT_NULL ( node = NCDR ( node ) )		716151	0		&&			
ANR	716297	EqualityExpression	r == 0		716151	0		==			
ANR	716298	Identifier	r		716151	0					
ANR	716299	PrimaryExpression	0		716151	1					
ANR	716300	CallExpression	IS_NOT_NULL ( node = NCDR ( node ) )		716151	1					
ANR	716301	Callee	IS_NOT_NULL		716151	0					
ANR	716302	Identifier	IS_NOT_NULL		716151	0					
ANR	716303	ArgumentList	node = NCDR ( node )		716151	1					
ANR	716304	Argument	node = NCDR ( node )		716151	0					
ANR	716305	AssignmentExpression	node = NCDR ( node )		716151	0		=			
ANR	716306	Identifier	node		716151	0					
ANR	716307	CallExpression	NCDR ( node )		716151	1					
ANR	716308	Callee	NCDR		716151	0					
ANR	716309	Identifier	NCDR		716151	0					
ANR	716310	ArgumentList	node		716151	1					
ANR	716311	Argument	node		716151	0					
ANR	716312	Identifier	node		716151	0					
ANR	716313	BreakStatement	break ;	3679:4:81620:81625	716151	5	True				
ANR	716314	Label	case NT_CCLASS :	3681:2:81630:81644	716151	6	True				
ANR	716315	Identifier	NT_CCLASS		716151	0					
ANR	716316	BreakStatement	break ;	3682:4:81650:81655	716151	7	True				
ANR	716317	Label	case NT_STR :	3684:2:81660:81671	716151	8	True				
ANR	716318	Identifier	NT_STR		716151	0					
ANR	716319	IfStatement	if ( IS_IGNORECASE ( reg -> options ) && ! NSTRING_IS_RAW ( node ) )		716151	9					
ANR	716320	Condition	IS_IGNORECASE ( reg -> options ) && ! NSTRING_IS_RAW ( node )	3685:8:81681:81732	716151	0	True				
ANR	716321	AndExpression	IS_IGNORECASE ( reg -> options ) && ! NSTRING_IS_RAW ( node )		716151	0		&&			
ANR	716322	CallExpression	IS_IGNORECASE ( reg -> options )		716151	0					
ANR	716323	Callee	IS_IGNORECASE		716151	0					
ANR	716324	Identifier	IS_IGNORECASE		716151	0					
ANR	716325	ArgumentList	reg -> options		716151	1					
ANR	716326	Argument	reg -> options		716151	0					
ANR	716327	PtrMemberAccess	reg -> options		716151	0					
ANR	716328	Identifier	reg		716151	0					
ANR	716329	Identifier	options		716151	1					
ANR	716330	UnaryOperationExpression	! NSTRING_IS_RAW ( node )		716151	1					
ANR	716331	UnaryOperator	!		716151	0					
ANR	716332	CallExpression	NSTRING_IS_RAW ( node )		716151	1					
ANR	716333	Callee	NSTRING_IS_RAW		716151	0					
ANR	716334	Identifier	NSTRING_IS_RAW		716151	0					
ANR	716335	ArgumentList	node		716151	1					
ANR	716336	Argument	node		716151	0					
ANR	716337	Identifier	node		716151	0					
ANR	716338	CompoundStatement		30:62:614:614	716151	1					
ANR	716339	ExpressionStatement	"r = expand_case_fold_string ( node , reg )"	3686:6:81743:81781	716151	0	True				
ANR	716340	AssignmentExpression	"r = expand_case_fold_string ( node , reg )"		716151	0		=			
ANR	716341	Identifier	r		716151	0					
ANR	716342	CallExpression	"expand_case_fold_string ( node , reg )"		716151	1					
ANR	716343	Callee	expand_case_fold_string		716151	0					
ANR	716344	Identifier	expand_case_fold_string		716151	0					
ANR	716345	ArgumentList	node		716151	1					
ANR	716346	Argument	node		716151	0					
ANR	716347	Identifier	node		716151	0					
ANR	716348	Argument	reg		716151	1					
ANR	716349	Identifier	reg		716151	0					
ANR	716350	BreakStatement	break ;	3688:4:81793:81798	716151	10	True				
ANR	716351	Label	case NT_CTYPE :	3690:2:81803:81816	716151	11	True				
ANR	716352	Identifier	NT_CTYPE		716151	0					
ANR	716353	Label	case NT_CANY :	3691:2:81820:81832	716151	12	True				
ANR	716354	Identifier	NT_CANY		716151	0					
ANR	716355	BreakStatement	break ;	3692:4:81838:81843	716151	13	True				
ANR	716356	Label	case NT_CALL :	3695:2:81871:81883	716151	14	True				
ANR	716357	Identifier	NT_CALL		716151	0					
ANR	716358	BreakStatement	break ;	3696:4:81889:81894	716151	15	True				
ANR	716359	Label	case NT_BREF :	3699:2:81906:81918	716151	16	True				
ANR	716360	Identifier	NT_BREF		716151	0					
ANR	716361	CompoundStatement		49:6:883:909	716151	17					
ANR	716362	IdentifierDeclStatement	int i ;	3701:6:81932:81937	716151	0	True				
ANR	716363	IdentifierDecl	i		716151	0					
ANR	716364	IdentifierDeclType	int		716151	0					
ANR	716365	Identifier	i		716151	1					
ANR	716366	IdentifierDeclStatement	int * p ;	3702:6:81945:81951	716151	1	True				
ANR	716367	IdentifierDecl	* p		716151	0					
ANR	716368	IdentifierDeclType	int *		716151	0					
ANR	716369	Identifier	p		716151	1					
ANR	716370	IdentifierDeclStatement	Node * * nodes = SCANENV_MEM_NODES ( env ) ;	3703:6:81959:81996	716151	2	True				
ANR	716371	IdentifierDecl	* * nodes = SCANENV_MEM_NODES ( env )		716151	0					
ANR	716372	IdentifierDeclType	Node * *		716151	0					
ANR	716373	Identifier	nodes		716151	1					
ANR	716374	AssignmentExpression	* * nodes = SCANENV_MEM_NODES ( env )		716151	2		=			
ANR	716375	Identifier	nodes		716151	0					
ANR	716376	CallExpression	SCANENV_MEM_NODES ( env )		716151	1					
ANR	716377	Callee	SCANENV_MEM_NODES		716151	0					
ANR	716378	Identifier	SCANENV_MEM_NODES		716151	0					
ANR	716379	ArgumentList	env		716151	1					
ANR	716380	Argument	env		716151	0					
ANR	716381	Identifier	env		716151	0					
ANR	716382	IdentifierDeclStatement	BRefNode * br = NBREF ( node ) ;	3704:6:82004:82030	716151	3	True				
ANR	716383	IdentifierDecl	* br = NBREF ( node )		716151	0					
ANR	716384	IdentifierDeclType	BRefNode *		716151	0					
ANR	716385	Identifier	br		716151	1					
ANR	716386	AssignmentExpression	* br = NBREF ( node )		716151	2		=			
ANR	716387	Identifier	br		716151	0					
ANR	716388	CallExpression	NBREF ( node )		716151	1					
ANR	716389	Callee	NBREF		716151	0					
ANR	716390	Identifier	NBREF		716151	0					
ANR	716391	ArgumentList	node		716151	1					
ANR	716392	Argument	node		716151	0					
ANR	716393	Identifier	node		716151	0					
ANR	716394	ExpressionStatement	p = BACKREFS_P ( br )	3705:6:82038:82056	716151	4	True				
ANR	716395	AssignmentExpression	p = BACKREFS_P ( br )		716151	0		=			
ANR	716396	Identifier	p		716151	0					
ANR	716397	CallExpression	BACKREFS_P ( br )		716151	1					
ANR	716398	Callee	BACKREFS_P		716151	0					
ANR	716399	Identifier	BACKREFS_P		716151	0					
ANR	716400	ArgumentList	br		716151	1					
ANR	716401	Argument	br		716151	0					
ANR	716402	Identifier	br		716151	0					
ANR	716403	ForStatement	for ( i = 0 ; i < br -> back_num ; i ++ )		716151	5					
ANR	716404	ForInit	i = 0 ;	3706:11:82069:82074	716151	0	True				
ANR	716405	AssignmentExpression	i = 0		716151	0		=			
ANR	716406	Identifier	i		716151	0					
ANR	716407	PrimaryExpression	0		716151	1					
ANR	716408	Condition	i < br -> back_num	3706:18:82076:82091	716151	1	True				
ANR	716409	RelationalExpression	i < br -> back_num		716151	0		<			
ANR	716410	Identifier	i		716151	0					
ANR	716411	PtrMemberAccess	br -> back_num		716151	1					
ANR	716412	Identifier	br		716151	0					
ANR	716413	Identifier	back_num		716151	1					
ANR	716414	PostIncDecOperationExpression	i ++	3706:36:82094:82096	716151	2	True				
ANR	716415	Identifier	i		716151	0					
ANR	716416	IncDec	++		716151	1					
ANR	716417	CompoundStatement		51:41:978:978	716151	3					
ANR	716418	IfStatement	if ( p [ i ] > env -> num_mem )		716151	0					
ANR	716419	Condition	p [ i ] > env -> num_mem	3707:5:82106:82124	716151	0	True				
ANR	716420	RelationalExpression	p [ i ] > env -> num_mem		716151	0		>			
ANR	716421	ArrayIndexing	p [ i ]		716151	0					
ANR	716422	Identifier	p		716151	0					
ANR	716423	Identifier	i		716151	1					
ANR	716424	PtrMemberAccess	env -> num_mem		716151	1					
ANR	716425	Identifier	env		716151	0					
ANR	716426	Identifier	num_mem		716151	1					
ANR	716427	ReturnStatement	return ONIGERR_INVALID_BACKREF ;	3707:27:82128:82158	716151	1	True				
ANR	716428	Identifier	ONIGERR_INVALID_BACKREF		716151	0					
ANR	716429	ExpressionStatement	"BIT_STATUS_ON_AT ( env -> backrefed_mem , p [ i ] )"	3708:1:82161:82203	716151	1	True				
ANR	716430	CallExpression	"BIT_STATUS_ON_AT ( env -> backrefed_mem , p [ i ] )"		716151	0					
ANR	716431	Callee	BIT_STATUS_ON_AT		716151	0					
ANR	716432	Identifier	BIT_STATUS_ON_AT		716151	0					
ANR	716433	ArgumentList	env -> backrefed_mem		716151	1					
ANR	716434	Argument	env -> backrefed_mem		716151	0					
ANR	716435	PtrMemberAccess	env -> backrefed_mem		716151	0					
ANR	716436	Identifier	env		716151	0					
ANR	716437	Identifier	backrefed_mem		716151	1					
ANR	716438	Argument	p [ i ]		716151	1					
ANR	716439	ArrayIndexing	p [ i ]		716151	0					
ANR	716440	Identifier	p		716151	0					
ANR	716441	Identifier	i		716151	1					
ANR	716442	ExpressionStatement	"BIT_STATUS_ON_AT ( env -> bt_mem_start , p [ i ] )"	3709:1:82206:82247	716151	2	True				
ANR	716443	CallExpression	"BIT_STATUS_ON_AT ( env -> bt_mem_start , p [ i ] )"		716151	0					
ANR	716444	Callee	BIT_STATUS_ON_AT		716151	0					
ANR	716445	Identifier	BIT_STATUS_ON_AT		716151	0					
ANR	716446	ArgumentList	env -> bt_mem_start		716151	1					
ANR	716447	Argument	env -> bt_mem_start		716151	0					
ANR	716448	PtrMemberAccess	env -> bt_mem_start		716151	0					
ANR	716449	Identifier	env		716151	0					
ANR	716450	Identifier	bt_mem_start		716151	1					
ANR	716451	Argument	p [ i ]		716151	1					
ANR	716452	ArrayIndexing	p [ i ]		716151	0					
ANR	716453	Identifier	p		716151	0					
ANR	716454	Identifier	i		716151	1					
ANR	716455	IfStatement	if ( IS_BACKREF_NEST_LEVEL ( br ) )		716151	3					
ANR	716456	Condition	IS_BACKREF_NEST_LEVEL ( br )	3711:5:82284:82308	716151	0	True				
ANR	716457	CallExpression	IS_BACKREF_NEST_LEVEL ( br )		716151	0					
ANR	716458	Callee	IS_BACKREF_NEST_LEVEL		716151	0					
ANR	716459	Identifier	IS_BACKREF_NEST_LEVEL		716151	0					
ANR	716460	ArgumentList	br		716151	1					
ANR	716461	Argument	br		716151	0					
ANR	716462	Identifier	br		716151	0					
ANR	716463	CompoundStatement		56:32:1190:1190	716151	1					
ANR	716464	ExpressionStatement	"BIT_STATUS_ON_AT ( env -> bt_mem_end , p [ i ] )"	3712:3:82316:82355	716151	0	True				
ANR	716465	CallExpression	"BIT_STATUS_ON_AT ( env -> bt_mem_end , p [ i ] )"		716151	0					
ANR	716466	Callee	BIT_STATUS_ON_AT		716151	0					
ANR	716467	Identifier	BIT_STATUS_ON_AT		716151	0					
ANR	716468	ArgumentList	env -> bt_mem_end		716151	1					
ANR	716469	Argument	env -> bt_mem_end		716151	0					
ANR	716470	PtrMemberAccess	env -> bt_mem_end		716151	0					
ANR	716471	Identifier	env		716151	0					
ANR	716472	Identifier	bt_mem_end		716151	1					
ANR	716473	Argument	p [ i ]		716151	1					
ANR	716474	ArrayIndexing	p [ i ]		716151	0					
ANR	716475	Identifier	p		716151	0					
ANR	716476	Identifier	i		716151	1					
ANR	716477	ExpressionStatement	"SET_ENCLOSE_STATUS ( nodes [ p [ i ] ] , NST_MEM_BACKREFED )"	3715:1:82368:82418	716151	4	True				
ANR	716478	CallExpression	"SET_ENCLOSE_STATUS ( nodes [ p [ i ] ] , NST_MEM_BACKREFED )"		716151	0					
ANR	716479	Callee	SET_ENCLOSE_STATUS		716151	0					
ANR	716480	Identifier	SET_ENCLOSE_STATUS		716151	0					
ANR	716481	ArgumentList	nodes [ p [ i ] ]		716151	1					
ANR	716482	Argument	nodes [ p [ i ] ]		716151	0					
ANR	716483	ArrayIndexing	nodes [ p [ i ] ]		716151	0					
ANR	716484	Identifier	nodes		716151	0					
ANR	716485	ArrayIndexing	p [ i ]		716151	1					
ANR	716486	Identifier	p		716151	0					
ANR	716487	Identifier	i		716151	1					
ANR	716488	Argument	NST_MEM_BACKREFED		716151	1					
ANR	716489	Identifier	NST_MEM_BACKREFED		716151	0					
ANR	716490	BreakStatement	break ;	3718:4:82438:82443	716151	18	True				
ANR	716491	Label	case NT_QTFR :	3720:2:82448:82460	716151	19	True				
ANR	716492	Identifier	NT_QTFR		716151	0					
ANR	716493	CompoundStatement		69:6:1409:1434	716151	20					
ANR	716494	IdentifierDeclStatement	OnigDistance d ;	3722:6:82474:82488	716151	0	True				
ANR	716495	IdentifierDecl	d		716151	0					
ANR	716496	IdentifierDeclType	OnigDistance		716151	0					
ANR	716497	Identifier	d		716151	1					
ANR	716498	IdentifierDeclStatement	QtfrNode * qn = NQTFR ( node ) ;	3723:6:82496:82522	716151	1	True				
ANR	716499	IdentifierDecl	* qn = NQTFR ( node )		716151	0					
ANR	716500	IdentifierDeclType	QtfrNode *		716151	0					
ANR	716501	Identifier	qn		716151	1					
ANR	716502	AssignmentExpression	* qn = NQTFR ( node )		716151	2		=			
ANR	716503	Identifier	qn		716151	0					
ANR	716504	CallExpression	NQTFR ( node )		716151	1					
ANR	716505	Callee	NQTFR		716151	0					
ANR	716506	Identifier	NQTFR		716151	0					
ANR	716507	ArgumentList	node		716151	1					
ANR	716508	Argument	node		716151	0					
ANR	716509	Identifier	node		716151	0					
ANR	716510	IdentifierDeclStatement	Node * target = qn -> target ;	3724:6:82530:82555	716151	2	True				
ANR	716511	IdentifierDecl	* target = qn -> target		716151	0					
ANR	716512	IdentifierDeclType	Node *		716151	0					
ANR	716513	Identifier	target		716151	1					
ANR	716514	AssignmentExpression	* target = qn -> target		716151	2		=			
ANR	716515	Identifier	target		716151	0					
ANR	716516	PtrMemberAccess	qn -> target		716151	1					
ANR	716517	Identifier	qn		716151	0					
ANR	716518	Identifier	target		716151	1					
ANR	716519	IfStatement	if ( ( state & IN_REPEAT ) != 0 )		716151	3					
ANR	716520	Condition	( state & IN_REPEAT ) != 0	3726:10:82568:82591	716151	0	True				
ANR	716521	EqualityExpression	( state & IN_REPEAT ) != 0		716151	0		!=			
ANR	716522	BitAndExpression	state & IN_REPEAT		716151	0		&			
ANR	716523	Identifier	state		716151	0					
ANR	716524	Identifier	IN_REPEAT		716151	1					
ANR	716525	PrimaryExpression	0		716151	1					
ANR	716526	CompoundStatement		71:36:1473:1473	716151	1					
ANR	716527	ExpressionStatement	qn -> state |= NST_IN_REPEAT	3727:8:82604:82630	716151	0	True				
ANR	716528	AssignmentExpression	qn -> state |= NST_IN_REPEAT		716151	0		|=			
ANR	716529	PtrMemberAccess	qn -> state		716151	0					
ANR	716530	Identifier	qn		716151	0					
ANR	716531	Identifier	state		716151	1					
ANR	716532	Identifier	NST_IN_REPEAT		716151	1					
ANR	716533	IfStatement	if ( IS_REPEAT_INFINITE ( qn -> upper ) || qn -> upper >= 1 )		716151	4					
ANR	716534	Condition	IS_REPEAT_INFINITE ( qn -> upper ) || qn -> upper >= 1	3730:10:82651:82697	716151	0	True				
ANR	716535	OrExpression	IS_REPEAT_INFINITE ( qn -> upper ) || qn -> upper >= 1		716151	0		||			
ANR	716536	CallExpression	IS_REPEAT_INFINITE ( qn -> upper )		716151	0					
ANR	716537	Callee	IS_REPEAT_INFINITE		716151	0					
ANR	716538	Identifier	IS_REPEAT_INFINITE		716151	0					
ANR	716539	ArgumentList	qn -> upper		716151	1					
ANR	716540	Argument	qn -> upper		716151	0					
ANR	716541	PtrMemberAccess	qn -> upper		716151	0					
ANR	716542	Identifier	qn		716151	0					
ANR	716543	Identifier	upper		716151	1					
ANR	716544	RelationalExpression	qn -> upper >= 1		716151	1		>=			
ANR	716545	PtrMemberAccess	qn -> upper		716151	0					
ANR	716546	Identifier	qn		716151	0					
ANR	716547	Identifier	upper		716151	1					
ANR	716548	PrimaryExpression	1		716151	1					
ANR	716549	CompoundStatement		75:59:1579:1579	716151	1					
ANR	716550	ExpressionStatement	"r = get_min_match_length ( target , & d , env )"	3731:1:82703:82744	716151	0	True				
ANR	716551	AssignmentExpression	"r = get_min_match_length ( target , & d , env )"		716151	0		=			
ANR	716552	Identifier	r		716151	0					
ANR	716553	CallExpression	"get_min_match_length ( target , & d , env )"		716151	1					
ANR	716554	Callee	get_min_match_length		716151	0					
ANR	716555	Identifier	get_min_match_length		716151	0					
ANR	716556	ArgumentList	target		716151	1					
ANR	716557	Argument	target		716151	0					
ANR	716558	Identifier	target		716151	0					
ANR	716559	Argument	& d		716151	1					
ANR	716560	UnaryOperationExpression	& d		716151	0					
ANR	716561	UnaryOperator	&		716151	0					
ANR	716562	Identifier	d		716151	1					
ANR	716563	Argument	env		716151	2					
ANR	716564	Identifier	env		716151	0					
ANR	716565	IfStatement	if ( r )		716151	1					
ANR	716566	Condition	r	3732:5:82751:82751	716151	0	True				
ANR	716567	Identifier	r		716151	0					
ANR	716568	BreakStatement	break ;	3732:8:82754:82759	716151	1	True				
ANR	716569	IfStatement	if ( d == 0 )		716151	2					
ANR	716570	Condition	d == 0	3733:5:82766:82771	716151	0	True				
ANR	716571	EqualityExpression	d == 0		716151	0		==			
ANR	716572	Identifier	d		716151	0					
ANR	716573	PrimaryExpression	0		716151	1					
ANR	716574	CompoundStatement		78:13:1653:1653	716151	1					
ANR	716575	ExpressionStatement	qn -> target_empty_info = NQ_TARGET_IS_EMPTY	3734:3:82779:82821	716151	0	True				
ANR	716576	AssignmentExpression	qn -> target_empty_info = NQ_TARGET_IS_EMPTY		716151	0		=			
ANR	716577	PtrMemberAccess	qn -> target_empty_info		716151	0					
ANR	716578	Identifier	qn		716151	0					
ANR	716579	Identifier	target_empty_info		716151	1					
ANR	716580	Identifier	NQ_TARGET_IS_EMPTY		716151	1					
ANR	716581	ExpressionStatement	r = quantifiers_memory_node_info ( target )	3736:3:82881:82921	716151	1	True				
ANR	716582	AssignmentExpression	r = quantifiers_memory_node_info ( target )		716151	0		=			
ANR	716583	Identifier	r		716151	0					
ANR	716584	CallExpression	quantifiers_memory_node_info ( target )		716151	1					
ANR	716585	Callee	quantifiers_memory_node_info		716151	0					
ANR	716586	Identifier	quantifiers_memory_node_info		716151	0					
ANR	716587	ArgumentList	target		716151	1					
ANR	716588	Argument	target		716151	0					
ANR	716589	Identifier	target		716151	0					
ANR	716590	IfStatement	if ( r < 0 )		716151	2					
ANR	716591	Condition	r < 0	3737:7:82930:82934	716151	0	True				
ANR	716592	RelationalExpression	r < 0		716151	0		<			
ANR	716593	Identifier	r		716151	0					
ANR	716594	PrimaryExpression	0		716151	1					
ANR	716595	BreakStatement	break ;	3737:14:82937:82942	716151	1	True				
ANR	716596	IfStatement	if ( r > 0 )		716151	3					
ANR	716597	Condition	r > 0	3738:7:82951:82955	716151	0	True				
ANR	716598	RelationalExpression	r > 0		716151	0		>			
ANR	716599	Identifier	r		716151	0					
ANR	716600	PrimaryExpression	0		716151	1					
ANR	716601	CompoundStatement		83:14:1837:1837	716151	1					
ANR	716602	ExpressionStatement	qn -> target_empty_info = r	3739:5:82965:82990	716151	0	True				
ANR	716603	AssignmentExpression	qn -> target_empty_info = r		716151	0		=			
ANR	716604	PtrMemberAccess	qn -> target_empty_info		716151	0					
ANR	716605	Identifier	qn		716151	0					
ANR	716606	Identifier	target_empty_info		716151	1					
ANR	716607	Identifier	r		716151	1					
ANR	716608	ExpressionStatement	"r = get_max_match_length ( target , & d , env )"	3743:3:83013:83054	716151	4	True				
ANR	716609	AssignmentExpression	"r = get_max_match_length ( target , & d , env )"		716151	0		=			
ANR	716610	Identifier	r		716151	0					
ANR	716611	CallExpression	"get_max_match_length ( target , & d , env )"		716151	1					
ANR	716612	Callee	get_max_match_length		716151	0					
ANR	716613	Identifier	get_max_match_length		716151	0					
ANR	716614	ArgumentList	target		716151	1					
ANR	716615	Argument	target		716151	0					
ANR	716616	Identifier	target		716151	0					
ANR	716617	Argument	& d		716151	1					
ANR	716618	UnaryOperationExpression	& d		716151	0					
ANR	716619	UnaryOperator	&		716151	0					
ANR	716620	Identifier	d		716151	1					
ANR	716621	Argument	env		716151	2					
ANR	716622	Identifier	env		716151	0					
ANR	716623	IfStatement	if ( r == 0 && d == 0 )		716151	5					
ANR	716624	Condition	r == 0 && d == 0	3744:7:83063:83078	716151	0	True				
ANR	716625	AndExpression	r == 0 && d == 0		716151	0		&&			
ANR	716626	EqualityExpression	r == 0		716151	0		==			
ANR	716627	Identifier	r		716151	0					
ANR	716628	PrimaryExpression	0		716151	1					
ANR	716629	EqualityExpression	d == 0		716151	1		==			
ANR	716630	Identifier	d		716151	0					
ANR	716631	PrimaryExpression	0		716151	1					
ANR	716632	CompoundStatement		89:25:1960:1960	716151	1					
ANR	716633	ExpressionStatement	qn -> upper = 1	3746:5:83125:83138	716151	0	True				
ANR	716634	AssignmentExpression	qn -> upper = 1		716151	0		=			
ANR	716635	PtrMemberAccess	qn -> upper		716151	0					
ANR	716636	Identifier	qn		716151	0					
ANR	716637	Identifier	upper		716151	1					
ANR	716638	PrimaryExpression	1		716151	1					
ANR	716639	IfStatement	if ( qn -> lower > 1 )		716151	1					
ANR	716640	Condition	qn -> lower > 1	3747:9:83149:83161	716151	0	True				
ANR	716641	RelationalExpression	qn -> lower > 1		716151	0		>			
ANR	716642	PtrMemberAccess	qn -> lower		716151	0					
ANR	716643	Identifier	qn		716151	0					
ANR	716644	Identifier	lower		716151	1					
ANR	716645	PrimaryExpression	1		716151	1					
ANR	716646	ExpressionStatement	qn -> lower = 1	3747:24:83164:83177	716151	1	True				
ANR	716647	AssignmentExpression	qn -> lower = 1		716151	0		=			
ANR	716648	PtrMemberAccess	qn -> lower		716151	0					
ANR	716649	Identifier	qn		716151	0					
ANR	716650	Identifier	lower		716151	1					
ANR	716651	PrimaryExpression	1		716151	1					
ANR	716652	IfStatement	if ( NTYPE ( target ) == NT_STR )		716151	2					
ANR	716653	Condition	NTYPE ( target ) == NT_STR	3748:9:83188:83210	716151	0	True				
ANR	716654	EqualityExpression	NTYPE ( target ) == NT_STR		716151	0		==			
ANR	716655	CallExpression	NTYPE ( target )		716151	0					
ANR	716656	Callee	NTYPE		716151	0					
ANR	716657	Identifier	NTYPE		716151	0					
ANR	716658	ArgumentList	target		716151	1					
ANR	716659	Argument	target		716151	0					
ANR	716660	Identifier	target		716151	0					
ANR	716661	Identifier	NT_STR		716151	1					
ANR	716662	CompoundStatement		93:34:2092:2092	716151	1					
ANR	716663	ExpressionStatement	qn -> upper = qn -> lower = 0	3749:7:83222:83247	716151	0	True				
ANR	716664	AssignmentExpression	qn -> upper = qn -> lower = 0		716151	0		=			
ANR	716665	PtrMemberAccess	qn -> upper		716151	0					
ANR	716666	Identifier	qn		716151	0					
ANR	716667	Identifier	upper		716151	1					
ANR	716668	AssignmentExpression	qn -> lower = 0		716151	1		=			
ANR	716669	PtrMemberAccess	qn -> lower		716151	0					
ANR	716670	Identifier	qn		716151	0					
ANR	716671	Identifier	lower		716151	1					
ANR	716672	PrimaryExpression	0		716151	1					
ANR	716673	ExpressionStatement	state |= IN_REPEAT	3756:6:83308:83326	716151	5	True				
ANR	716674	AssignmentExpression	state |= IN_REPEAT		716151	0		|=			
ANR	716675	Identifier	state		716151	0					
ANR	716676	Identifier	IN_REPEAT		716151	1					
ANR	716677	IfStatement	if ( qn -> lower != qn -> upper )		716151	6					
ANR	716678	Condition	qn -> lower != qn -> upper	3757:10:83338:83359	716151	0	True				
ANR	716679	EqualityExpression	qn -> lower != qn -> upper		716151	0		!=			
ANR	716680	PtrMemberAccess	qn -> lower		716151	0					
ANR	716681	Identifier	qn		716151	0					
ANR	716682	Identifier	lower		716151	1					
ANR	716683	PtrMemberAccess	qn -> upper		716151	1					
ANR	716684	Identifier	qn		716151	0					
ANR	716685	Identifier	upper		716151	1					
ANR	716686	ExpressionStatement	state |= IN_VAR_REPEAT	3758:1:83363:83385	716151	1	True				
ANR	716687	AssignmentExpression	state |= IN_VAR_REPEAT		716151	0		|=			
ANR	716688	Identifier	state		716151	0					
ANR	716689	Identifier	IN_VAR_REPEAT		716151	1					
ANR	716690	ExpressionStatement	"r = setup_tree ( target , reg , state , env )"	3759:6:83393:83432	716151	7	True				
ANR	716691	AssignmentExpression	"r = setup_tree ( target , reg , state , env )"		716151	0		=			
ANR	716692	Identifier	r		716151	0					
ANR	716693	CallExpression	"setup_tree ( target , reg , state , env )"		716151	1					
ANR	716694	Callee	setup_tree		716151	0					
ANR	716695	Identifier	setup_tree		716151	0					
ANR	716696	ArgumentList	target		716151	1					
ANR	716697	Argument	target		716151	0					
ANR	716698	Identifier	target		716151	0					
ANR	716699	Argument	reg		716151	1					
ANR	716700	Identifier	reg		716151	0					
ANR	716701	Argument	state		716151	2					
ANR	716702	Identifier	state		716151	0					
ANR	716703	Argument	env		716151	3					
ANR	716704	Identifier	env		716151	0					
ANR	716705	IfStatement	if ( r )		716151	8					
ANR	716706	Condition	r	3760:10:83444:83444	716151	0	True				
ANR	716707	Identifier	r		716151	0					
ANR	716708	BreakStatement	break ;	3760:13:83447:83452	716151	1	True				
ANR	716709	Statement	define	3763:1:83482:83487	716151	9	True				
ANR	716710	Statement	EXPAND_STRING_MAX_LENGTH	3763:8:83489:83512	716151	10	True				
ANR	716711	Statement	100	3763:34:83515:83517	716151	11	True				
ANR	716712	IfStatement	if ( NTYPE ( target ) == NT_STR )		716151	12					
ANR	716713	Condition	NTYPE ( target ) == NT_STR	3764:10:83529:83551	716151	0	True				
ANR	716714	EqualityExpression	NTYPE ( target ) == NT_STR		716151	0		==			
ANR	716715	CallExpression	NTYPE ( target )		716151	0					
ANR	716716	Callee	NTYPE		716151	0					
ANR	716717	Identifier	NTYPE		716151	0					
ANR	716718	ArgumentList	target		716151	1					
ANR	716719	Argument	target		716151	0					
ANR	716720	Identifier	target		716151	0					
ANR	716721	Identifier	NT_STR		716151	1					
ANR	716722	CompoundStatement		109:35:2433:2433	716151	1					
ANR	716723	IfStatement	if ( ! IS_REPEAT_INFINITE ( qn -> lower ) && qn -> lower == qn -> upper && qn -> lower > 1 && qn -> lower <= EXPAND_STRING_MAX_LENGTH )		716151	0					
ANR	716724	Condition	! IS_REPEAT_INFINITE ( qn -> lower ) && qn -> lower == qn -> upper && qn -> lower > 1 && qn -> lower <= EXPAND_STRING_MAX_LENGTH	3765:5:83561:83679	716151	0	True				
ANR	716725	AndExpression	! IS_REPEAT_INFINITE ( qn -> lower ) && qn -> lower == qn -> upper && qn -> lower > 1 && qn -> lower <= EXPAND_STRING_MAX_LENGTH		716151	0		&&			
ANR	716726	UnaryOperationExpression	! IS_REPEAT_INFINITE ( qn -> lower )		716151	0					
ANR	716727	UnaryOperator	!		716151	0					
ANR	716728	CallExpression	IS_REPEAT_INFINITE ( qn -> lower )		716151	1					
ANR	716729	Callee	IS_REPEAT_INFINITE		716151	0					
ANR	716730	Identifier	IS_REPEAT_INFINITE		716151	0					
ANR	716731	ArgumentList	qn -> lower		716151	1					
ANR	716732	Argument	qn -> lower		716151	0					
ANR	716733	PtrMemberAccess	qn -> lower		716151	0					
ANR	716734	Identifier	qn		716151	0					
ANR	716735	Identifier	lower		716151	1					
ANR	716736	AndExpression	qn -> lower == qn -> upper && qn -> lower > 1 && qn -> lower <= EXPAND_STRING_MAX_LENGTH		716151	1		&&			
ANR	716737	EqualityExpression	qn -> lower == qn -> upper		716151	0		==			
ANR	716738	PtrMemberAccess	qn -> lower		716151	0					
ANR	716739	Identifier	qn		716151	0					
ANR	716740	Identifier	lower		716151	1					
ANR	716741	PtrMemberAccess	qn -> upper		716151	1					
ANR	716742	Identifier	qn		716151	0					
ANR	716743	Identifier	upper		716151	1					
ANR	716744	AndExpression	qn -> lower > 1 && qn -> lower <= EXPAND_STRING_MAX_LENGTH		716151	1		&&			
ANR	716745	RelationalExpression	qn -> lower > 1		716151	0		>			
ANR	716746	PtrMemberAccess	qn -> lower		716151	0					
ANR	716747	Identifier	qn		716151	0					
ANR	716748	Identifier	lower		716151	1					
ANR	716749	PrimaryExpression	1		716151	1					
ANR	716750	RelationalExpression	qn -> lower <= EXPAND_STRING_MAX_LENGTH		716151	1		<=			
ANR	716751	PtrMemberAccess	qn -> lower		716151	0					
ANR	716752	Identifier	qn		716151	0					
ANR	716753	Identifier	lower		716151	1					
ANR	716754	Identifier	EXPAND_STRING_MAX_LENGTH		716151	1					
ANR	716755	CompoundStatement		113:3:2600:2626	716151	1					
ANR	716756	IdentifierDeclStatement	int len = NSTRING_LEN ( target ) ;	3767:3:83687:83716	716151	0	True				
ANR	716757	IdentifierDecl	len = NSTRING_LEN ( target )		716151	0					
ANR	716758	IdentifierDeclType	int		716151	0					
ANR	716759	Identifier	len		716151	1					
ANR	716760	AssignmentExpression	len = NSTRING_LEN ( target )		716151	2		=			
ANR	716761	Identifier	len		716151	0					
ANR	716762	CallExpression	NSTRING_LEN ( target )		716151	1					
ANR	716763	Callee	NSTRING_LEN		716151	0					
ANR	716764	Identifier	NSTRING_LEN		716151	0					
ANR	716765	ArgumentList	target		716151	1					
ANR	716766	Argument	target		716151	0					
ANR	716767	Identifier	target		716151	0					
ANR	716768	IdentifierDeclStatement	StrNode * sn = NSTR ( target ) ;	3768:3:83721:83747	716151	1	True				
ANR	716769	IdentifierDecl	* sn = NSTR ( target )		716151	0					
ANR	716770	IdentifierDeclType	StrNode *		716151	0					
ANR	716771	Identifier	sn		716151	1					
ANR	716772	AssignmentExpression	* sn = NSTR ( target )		716151	2		=			
ANR	716773	Identifier	sn		716151	0					
ANR	716774	CallExpression	NSTR ( target )		716151	1					
ANR	716775	Callee	NSTR		716151	0					
ANR	716776	Identifier	NSTR		716151	0					
ANR	716777	ArgumentList	target		716151	1					
ANR	716778	Argument	target		716151	0					
ANR	716779	Identifier	target		716151	0					
ANR	716780	IfStatement	if ( len * qn -> lower <= EXPAND_STRING_MAX_LENGTH )		716151	2					
ANR	716781	Condition	len * qn -> lower <= EXPAND_STRING_MAX_LENGTH	3770:7:83757:83799	716151	0	True				
ANR	716782	RelationalExpression	len * qn -> lower <= EXPAND_STRING_MAX_LENGTH		716151	0		<=			
ANR	716783	MultiplicativeExpression	len * qn -> lower		716151	0		*			
ANR	716784	Identifier	len		716151	0					
ANR	716785	PtrMemberAccess	qn -> lower		716151	1					
ANR	716786	Identifier	qn		716151	0					
ANR	716787	Identifier	lower		716151	1					
ANR	716788	Identifier	EXPAND_STRING_MAX_LENGTH		716151	1					
ANR	716789	CompoundStatement		116:5:2688:2708	716151	1					
ANR	716790	IdentifierDeclStatement	"int i , n = qn -> lower ;"	3771:5:83809:83829	716151	0	True				
ANR	716791	IdentifierDecl	i		716151	0					
ANR	716792	IdentifierDeclType	int		716151	0					
ANR	716793	Identifier	i		716151	1					
ANR	716794	IdentifierDecl	n = qn -> lower		716151	1					
ANR	716795	IdentifierDeclType	int		716151	0					
ANR	716796	Identifier	n		716151	1					
ANR	716797	AssignmentExpression	n = qn -> lower		716151	2		=			
ANR	716798	Identifier	n		716151	0					
ANR	716799	PtrMemberAccess	qn -> lower		716151	1					
ANR	716800	Identifier	qn		716151	0					
ANR	716801	Identifier	lower		716151	1					
ANR	716802	ExpressionStatement	"onig_node_conv_to_str_node ( node , NSTR ( target ) -> flag )"	3772:5:83836:83888	716151	1	True				
ANR	716803	CallExpression	"onig_node_conv_to_str_node ( node , NSTR ( target ) -> flag )"		716151	0					
ANR	716804	Callee	onig_node_conv_to_str_node		716151	0					
ANR	716805	Identifier	onig_node_conv_to_str_node		716151	0					
ANR	716806	ArgumentList	node		716151	1					
ANR	716807	Argument	node		716151	0					
ANR	716808	Identifier	node		716151	0					
ANR	716809	Argument	NSTR ( target ) -> flag		716151	1					
ANR	716810	PtrMemberAccess	NSTR ( target ) -> flag		716151	0					
ANR	716811	CallExpression	NSTR ( target )		716151	0					
ANR	716812	Callee	NSTR		716151	0					
ANR	716813	Identifier	NSTR		716151	0					
ANR	716814	ArgumentList	target		716151	1					
ANR	716815	Argument	target		716151	0					
ANR	716816	Identifier	target		716151	0					
ANR	716817	Identifier	flag		716151	1					
ANR	716818	ForStatement	for ( i = 0 ; i < n ; i ++ )		716151	2					
ANR	716819	ForInit	i = 0 ;	3773:10:83900:83905	716151	0	True				
ANR	716820	AssignmentExpression	i = 0		716151	0		=			
ANR	716821	Identifier	i		716151	0					
ANR	716822	PrimaryExpression	0		716151	1					
ANR	716823	Condition	i < n	3773:17:83907:83911	716151	1	True				
ANR	716824	RelationalExpression	i < n		716151	0		<			
ANR	716825	Identifier	i		716151	0					
ANR	716826	Identifier	n		716151	1					
ANR	716827	PostIncDecOperationExpression	i ++	3773:24:83914:83916	716151	2	True				
ANR	716828	Identifier	i		716151	0					
ANR	716829	IncDec	++		716151	1					
ANR	716830	CompoundStatement		118:29:2798:2798	716151	3					
ANR	716831	ExpressionStatement	"r = onig_node_str_cat ( node , sn -> s , sn -> end )"	3774:7:83928:83971	716151	0	True				
ANR	716832	AssignmentExpression	"r = onig_node_str_cat ( node , sn -> s , sn -> end )"		716151	0		=			
ANR	716833	Identifier	r		716151	0					
ANR	716834	CallExpression	"onig_node_str_cat ( node , sn -> s , sn -> end )"		716151	1					
ANR	716835	Callee	onig_node_str_cat		716151	0					
ANR	716836	Identifier	onig_node_str_cat		716151	0					
ANR	716837	ArgumentList	node		716151	1					
ANR	716838	Argument	node		716151	0					
ANR	716839	Identifier	node		716151	0					
ANR	716840	Argument	sn -> s		716151	1					
ANR	716841	PtrMemberAccess	sn -> s		716151	0					
ANR	716842	Identifier	sn		716151	0					
ANR	716843	Identifier	s		716151	1					
ANR	716844	Argument	sn -> end		716151	2					
ANR	716845	PtrMemberAccess	sn -> end		716151	0					
ANR	716846	Identifier	sn		716151	0					
ANR	716847	Identifier	end		716151	1					
ANR	716848	IfStatement	if ( r )		716151	1					
ANR	716849	Condition	r	3775:11:83984:83984	716151	0	True				
ANR	716850	Identifier	r		716151	0					
ANR	716851	BreakStatement	break ;	3775:14:83987:83992	716151	1	True				
ANR	716852	ExpressionStatement	onig_node_free ( target )	3777:5:84006:84028	716151	3	True				
ANR	716853	CallExpression	onig_node_free ( target )		716151	0					
ANR	716854	Callee	onig_node_free		716151	0					
ANR	716855	Identifier	onig_node_free		716151	0					
ANR	716856	ArgumentList	target		716151	1					
ANR	716857	Argument	target		716151	0					
ANR	716858	Identifier	target		716151	0					
ANR	716859	BreakStatement	break ;	3778:5:84035:84040	716151	4	True				
ANR	716860	IfStatement	if ( qn -> greedy && ( qn -> target_empty_info != 0 ) )		716151	13					
ANR	716861	Condition	qn -> greedy && ( qn -> target_empty_info != 0 )	3784:10:84128:84169	716151	0	True				
ANR	716862	AndExpression	qn -> greedy && ( qn -> target_empty_info != 0 )		716151	0		&&			
ANR	716863	PtrMemberAccess	qn -> greedy		716151	0					
ANR	716864	Identifier	qn		716151	0					
ANR	716865	Identifier	greedy		716151	1					
ANR	716866	EqualityExpression	qn -> target_empty_info != 0		716151	1		!=			
ANR	716867	PtrMemberAccess	qn -> target_empty_info		716151	0					
ANR	716868	Identifier	qn		716151	0					
ANR	716869	Identifier	target_empty_info		716151	1					
ANR	716870	PrimaryExpression	0		716151	1					
ANR	716871	CompoundStatement		129:54:3051:3051	716151	1					
ANR	716872	IfStatement	if ( NTYPE ( target ) == NT_QTFR )		716151	0					
ANR	716873	Condition	NTYPE ( target ) == NT_QTFR	3785:5:84179:84202	716151	0	True				
ANR	716874	EqualityExpression	NTYPE ( target ) == NT_QTFR		716151	0		==			
ANR	716875	CallExpression	NTYPE ( target )		716151	0					
ANR	716876	Callee	NTYPE		716151	0					
ANR	716877	Identifier	NTYPE		716151	0					
ANR	716878	ArgumentList	target		716151	1					
ANR	716879	Argument	target		716151	0					
ANR	716880	Identifier	target		716151	0					
ANR	716881	Identifier	NT_QTFR		716151	1					
ANR	716882	CompoundStatement		131:3:3089:3118	716151	1					
ANR	716883	IdentifierDeclStatement	QtfrNode * tqn = NQTFR ( target ) ;	3786:3:84210:84239	716151	0	True				
ANR	716884	IdentifierDecl	* tqn = NQTFR ( target )		716151	0					
ANR	716885	IdentifierDeclType	QtfrNode *		716151	0					
ANR	716886	Identifier	tqn		716151	1					
ANR	716887	AssignmentExpression	* tqn = NQTFR ( target )		716151	2		=			
ANR	716888	Identifier	tqn		716151	0					
ANR	716889	CallExpression	NQTFR ( target )		716151	1					
ANR	716890	Callee	NQTFR		716151	0					
ANR	716891	Identifier	NQTFR		716151	0					
ANR	716892	ArgumentList	target		716151	1					
ANR	716893	Argument	target		716151	0					
ANR	716894	Identifier	target		716151	0					
ANR	716895	IfStatement	if ( IS_NOT_NULL ( tqn -> head_exact ) )		716151	1					
ANR	716896	Condition	IS_NOT_NULL ( tqn -> head_exact )	3787:7:84248:84275	716151	0	True				
ANR	716897	CallExpression	IS_NOT_NULL ( tqn -> head_exact )		716151	0					
ANR	716898	Callee	IS_NOT_NULL		716151	0					
ANR	716899	Identifier	IS_NOT_NULL		716151	0					
ANR	716900	ArgumentList	tqn -> head_exact		716151	1					
ANR	716901	Argument	tqn -> head_exact		716151	0					
ANR	716902	PtrMemberAccess	tqn -> head_exact		716151	0					
ANR	716903	Identifier	tqn		716151	0					
ANR	716904	Identifier	head_exact		716151	1					
ANR	716905	CompoundStatement		132:37:3157:3157	716151	1					
ANR	716906	ExpressionStatement	qn -> head_exact = tqn -> head_exact	3788:5:84285:84318	716151	0	True				
ANR	716907	AssignmentExpression	qn -> head_exact = tqn -> head_exact		716151	0		=			
ANR	716908	PtrMemberAccess	qn -> head_exact		716151	0					
ANR	716909	Identifier	qn		716151	0					
ANR	716910	Identifier	head_exact		716151	1					
ANR	716911	PtrMemberAccess	tqn -> head_exact		716151	1					
ANR	716912	Identifier	tqn		716151	0					
ANR	716913	Identifier	head_exact		716151	1					
ANR	716914	ExpressionStatement	tqn -> head_exact = NULL	3789:5:84325:84347	716151	1	True				
ANR	716915	AssignmentExpression	tqn -> head_exact = NULL		716151	0		=			
ANR	716916	PtrMemberAccess	tqn -> head_exact		716151	0					
ANR	716917	Identifier	tqn		716151	0					
ANR	716918	Identifier	head_exact		716151	1					
ANR	716919	Identifier	NULL		716151	1					
ANR	716920	ElseStatement	else		716151	0					
ANR	716921	CompoundStatement		137:6:3242:3242	716151	0					
ANR	716922	ExpressionStatement	"qn -> head_exact = get_head_value_node ( qn -> target , 1 , reg )"	3793:3:84368:84424	716151	0	True				
ANR	716923	AssignmentExpression	"qn -> head_exact = get_head_value_node ( qn -> target , 1 , reg )"		716151	0		=			
ANR	716924	PtrMemberAccess	qn -> head_exact		716151	0					
ANR	716925	Identifier	qn		716151	0					
ANR	716926	Identifier	head_exact		716151	1					
ANR	716927	CallExpression	"get_head_value_node ( qn -> target , 1 , reg )"		716151	1					
ANR	716928	Callee	get_head_value_node		716151	0					
ANR	716929	Identifier	get_head_value_node		716151	0					
ANR	716930	ArgumentList	qn -> target		716151	1					
ANR	716931	Argument	qn -> target		716151	0					
ANR	716932	PtrMemberAccess	qn -> target		716151	0					
ANR	716933	Identifier	qn		716151	0					
ANR	716934	Identifier	target		716151	1					
ANR	716935	Argument	1		716151	1					
ANR	716936	PrimaryExpression	1		716151	0					
ANR	716937	Argument	reg		716151	2					
ANR	716938	Identifier	reg		716151	0					
ANR	716939	BreakStatement	break ;	3798:4:84454:84459	716151	21	True				
ANR	716940	Label	case NT_ENCLOSE :	3800:2:84464:84479	716151	22	True				
ANR	716941	Identifier	NT_ENCLOSE		716151	0					
ANR	716942	CompoundStatement		147:6:3372:3404	716151	23					
ANR	716943	IdentifierDeclStatement	EncloseNode * en = NENCLOSE ( node ) ;	3802:6:84493:84525	716151	0	True				
ANR	716944	IdentifierDecl	* en = NENCLOSE ( node )		716151	0					
ANR	716945	IdentifierDeclType	EncloseNode *		716151	0					
ANR	716946	Identifier	en		716151	1					
ANR	716947	AssignmentExpression	* en = NENCLOSE ( node )		716151	2		=			
ANR	716948	Identifier	en		716151	0					
ANR	716949	CallExpression	NENCLOSE ( node )		716151	1					
ANR	716950	Callee	NENCLOSE		716151	0					
ANR	716951	Identifier	NENCLOSE		716151	0					
ANR	716952	ArgumentList	node		716151	1					
ANR	716953	Argument	node		716151	0					
ANR	716954	Identifier	node		716151	0					
ANR	716955	SwitchStatement	switch ( en -> type )		716151	1					
ANR	716956	Condition	en -> type	3804:14:84542:84549	716151	0	True				
ANR	716957	PtrMemberAccess	en -> type		716151	0					
ANR	716958	Identifier	en		716151	0					
ANR	716959	Identifier	type		716151	1					
ANR	716960	CompoundStatement		149:24:3431:3431	716151	1					
ANR	716961	Label	case ENCLOSE_OPTION :	3805:6:84560:84579	716151	0	True				
ANR	716962	Identifier	ENCLOSE_OPTION		716151	0					
ANR	716963	CompoundStatement		152:3:3466:3503	716151	1					
ANR	716964	IdentifierDeclStatement	OnigOptionType options = reg -> options ;	3807:3:84587:84624	716151	0	True				
ANR	716965	IdentifierDecl	options = reg -> options		716151	0					
ANR	716966	IdentifierDeclType	OnigOptionType		716151	0					
ANR	716967	Identifier	options		716151	1					
ANR	716968	AssignmentExpression	options = reg -> options		716151	2		=			
ANR	716969	Identifier	options		716151	0					
ANR	716970	PtrMemberAccess	reg -> options		716151	1					
ANR	716971	Identifier	reg		716151	0					
ANR	716972	Identifier	options		716151	1					
ANR	716973	ExpressionStatement	reg -> options = NENCLOSE ( node ) -> option	3808:3:84629:84666	716151	1	True				
ANR	716974	AssignmentExpression	reg -> options = NENCLOSE ( node ) -> option		716151	0		=			
ANR	716975	PtrMemberAccess	reg -> options		716151	0					
ANR	716976	Identifier	reg		716151	0					
ANR	716977	Identifier	options		716151	1					
ANR	716978	PtrMemberAccess	NENCLOSE ( node ) -> option		716151	1					
ANR	716979	CallExpression	NENCLOSE ( node )		716151	0					
ANR	716980	Callee	NENCLOSE		716151	0					
ANR	716981	Identifier	NENCLOSE		716151	0					
ANR	716982	ArgumentList	node		716151	1					
ANR	716983	Argument	node		716151	0					
ANR	716984	Identifier	node		716151	0					
ANR	716985	Identifier	option		716151	1					
ANR	716986	ExpressionStatement	"r = setup_tree ( NENCLOSE ( node ) -> target , reg , state , env )"	3809:3:84671:84726	716151	2	True				
ANR	716987	AssignmentExpression	"r = setup_tree ( NENCLOSE ( node ) -> target , reg , state , env )"		716151	0		=			
ANR	716988	Identifier	r		716151	0					
ANR	716989	CallExpression	"setup_tree ( NENCLOSE ( node ) -> target , reg , state , env )"		716151	1					
ANR	716990	Callee	setup_tree		716151	0					
ANR	716991	Identifier	setup_tree		716151	0					
ANR	716992	ArgumentList	NENCLOSE ( node ) -> target		716151	1					
ANR	716993	Argument	NENCLOSE ( node ) -> target		716151	0					
ANR	716994	PtrMemberAccess	NENCLOSE ( node ) -> target		716151	0					
ANR	716995	CallExpression	NENCLOSE ( node )		716151	0					
ANR	716996	Callee	NENCLOSE		716151	0					
ANR	716997	Identifier	NENCLOSE		716151	0					
ANR	716998	ArgumentList	node		716151	1					
ANR	716999	Argument	node		716151	0					
ANR	717000	Identifier	node		716151	0					
ANR	717001	Identifier	target		716151	1					
ANR	717002	Argument	reg		716151	1					
ANR	717003	Identifier	reg		716151	0					
ANR	717004	Argument	state		716151	2					
ANR	717005	Identifier	state		716151	0					
ANR	717006	Argument	env		716151	3					
ANR	717007	Identifier	env		716151	0					
ANR	717008	ExpressionStatement	reg -> options = options	3810:3:84731:84753	716151	3	True				
ANR	717009	AssignmentExpression	reg -> options = options		716151	0		=			
ANR	717010	PtrMemberAccess	reg -> options		716151	0					
ANR	717011	Identifier	reg		716151	0					
ANR	717012	Identifier	options		716151	1					
ANR	717013	Identifier	options		716151	1					
ANR	717014	BreakStatement	break ;	3812:1:84759:84764	716151	2	True				
ANR	717015	Label	case ENCLOSE_MEMORY :	3814:6:84773:84792	716151	3	True				
ANR	717016	Identifier	ENCLOSE_MEMORY		716151	0					
ANR	717017	IfStatement	if ( ( state & ( IN_ALT | IN_NOT | IN_VAR_REPEAT ) ) != 0 )		716151	4					
ANR	717018	Condition	( state & ( IN_ALT | IN_NOT | IN_VAR_REPEAT ) ) != 0	3815:5:84799:84846	716151	0	True				
ANR	717019	EqualityExpression	( state & ( IN_ALT | IN_NOT | IN_VAR_REPEAT ) ) != 0		716151	0		!=			
ANR	717020	BitAndExpression	state & ( IN_ALT | IN_NOT | IN_VAR_REPEAT )		716151	0		&			
ANR	717021	Identifier	state		716151	0					
ANR	717022	InclusiveOrExpression	IN_ALT | IN_NOT | IN_VAR_REPEAT		716151	1		|			
ANR	717023	Identifier	IN_ALT		716151	0					
ANR	717024	InclusiveOrExpression	IN_NOT | IN_VAR_REPEAT		716151	1		|			
ANR	717025	Identifier	IN_NOT		716151	0					
ANR	717026	Identifier	IN_VAR_REPEAT		716151	1					
ANR	717027	PrimaryExpression	0		716151	1					
ANR	717028	CompoundStatement		160:55:3728:3728	716151	1					
ANR	717029	ExpressionStatement	"BIT_STATUS_ON_AT ( env -> bt_mem_start , en -> regnum )"	3816:3:84854:84901	716151	0	True				
ANR	717030	CallExpression	"BIT_STATUS_ON_AT ( env -> bt_mem_start , en -> regnum )"		716151	0					
ANR	717031	Callee	BIT_STATUS_ON_AT		716151	0					
ANR	717032	Identifier	BIT_STATUS_ON_AT		716151	0					
ANR	717033	ArgumentList	env -> bt_mem_start		716151	1					
ANR	717034	Argument	env -> bt_mem_start		716151	0					
ANR	717035	PtrMemberAccess	env -> bt_mem_start		716151	0					
ANR	717036	Identifier	env		716151	0					
ANR	717037	Identifier	bt_mem_start		716151	1					
ANR	717038	Argument	en -> regnum		716151	1					
ANR	717039	PtrMemberAccess	en -> regnum		716151	0					
ANR	717040	Identifier	en		716151	0					
ANR	717041	Identifier	regnum		716151	1					
ANR	717042	ExpressionStatement	"r = setup_tree ( en -> target , reg , state , env )"	3819:8:84969:85012	716151	5	True				
ANR	717043	AssignmentExpression	"r = setup_tree ( en -> target , reg , state , env )"		716151	0		=			
ANR	717044	Identifier	r		716151	0					
ANR	717045	CallExpression	"setup_tree ( en -> target , reg , state , env )"		716151	1					
ANR	717046	Callee	setup_tree		716151	0					
ANR	717047	Identifier	setup_tree		716151	0					
ANR	717048	ArgumentList	en -> target		716151	1					
ANR	717049	Argument	en -> target		716151	0					
ANR	717050	PtrMemberAccess	en -> target		716151	0					
ANR	717051	Identifier	en		716151	0					
ANR	717052	Identifier	target		716151	1					
ANR	717053	Argument	reg		716151	1					
ANR	717054	Identifier	reg		716151	0					
ANR	717055	Argument	state		716151	2					
ANR	717056	Identifier	state		716151	0					
ANR	717057	Argument	env		716151	3					
ANR	717058	Identifier	env		716151	0					
ANR	717059	BreakStatement	break ;	3820:8:85022:85027	716151	6	True				
ANR	717060	Label	case ENCLOSE_STOP_BACKTRACK :	3822:6:85036:85063	716151	7	True				
ANR	717061	Identifier	ENCLOSE_STOP_BACKTRACK		716151	0					
ANR	717062	CompoundStatement		169:3:3950:3975	716151	8					
ANR	717063	IdentifierDeclStatement	Node * target = en -> target ;	3824:3:85071:85096	716151	0	True				
ANR	717064	IdentifierDecl	* target = en -> target		716151	0					
ANR	717065	IdentifierDeclType	Node *		716151	0					
ANR	717066	Identifier	target		716151	1					
ANR	717067	AssignmentExpression	* target = en -> target		716151	2		=			
ANR	717068	Identifier	target		716151	0					
ANR	717069	PtrMemberAccess	en -> target		716151	1					
ANR	717070	Identifier	en		716151	0					
ANR	717071	Identifier	target		716151	1					
ANR	717072	ExpressionStatement	"r = setup_tree ( target , reg , state , env )"	3825:3:85101:85140	716151	1	True				
ANR	717073	AssignmentExpression	"r = setup_tree ( target , reg , state , env )"		716151	0		=			
ANR	717074	Identifier	r		716151	0					
ANR	717075	CallExpression	"setup_tree ( target , reg , state , env )"		716151	1					
ANR	717076	Callee	setup_tree		716151	0					
ANR	717077	Identifier	setup_tree		716151	0					
ANR	717078	ArgumentList	target		716151	1					
ANR	717079	Argument	target		716151	0					
ANR	717080	Identifier	target		716151	0					
ANR	717081	Argument	reg		716151	1					
ANR	717082	Identifier	reg		716151	0					
ANR	717083	Argument	state		716151	2					
ANR	717084	Identifier	state		716151	0					
ANR	717085	Argument	env		716151	3					
ANR	717086	Identifier	env		716151	0					
ANR	717087	IfStatement	if ( NTYPE ( target ) == NT_QTFR )		716151	2					
ANR	717088	Condition	NTYPE ( target ) == NT_QTFR	3826:7:85149:85172	716151	0	True				
ANR	717089	EqualityExpression	NTYPE ( target ) == NT_QTFR		716151	0		==			
ANR	717090	CallExpression	NTYPE ( target )		716151	0					
ANR	717091	Callee	NTYPE		716151	0					
ANR	717092	Identifier	NTYPE		716151	0					
ANR	717093	ArgumentList	target		716151	1					
ANR	717094	Argument	target		716151	0					
ANR	717095	Identifier	target		716151	0					
ANR	717096	Identifier	NT_QTFR		716151	1					
ANR	717097	CompoundStatement		172:5:4061:4090	716151	1					
ANR	717098	IdentifierDeclStatement	QtfrNode * tqn = NQTFR ( target ) ;	3827:5:85182:85211	716151	0	True				
ANR	717099	IdentifierDecl	* tqn = NQTFR ( target )		716151	0					
ANR	717100	IdentifierDeclType	QtfrNode *		716151	0					
ANR	717101	Identifier	tqn		716151	1					
ANR	717102	AssignmentExpression	* tqn = NQTFR ( target )		716151	2		=			
ANR	717103	Identifier	tqn		716151	0					
ANR	717104	CallExpression	NQTFR ( target )		716151	1					
ANR	717105	Callee	NQTFR		716151	0					
ANR	717106	Identifier	NQTFR		716151	0					
ANR	717107	ArgumentList	target		716151	1					
ANR	717108	Argument	target		716151	0					
ANR	717109	Identifier	target		716151	0					
ANR	717110	IfStatement	if ( IS_REPEAT_INFINITE ( tqn -> upper ) && tqn -> lower <= 1 && tqn -> greedy != 0 )		716151	1					
ANR	717111	Condition	IS_REPEAT_INFINITE ( tqn -> upper ) && tqn -> lower <= 1 && tqn -> greedy != 0	3828:9:85222:85292	716151	0	True				
ANR	717112	AndExpression	IS_REPEAT_INFINITE ( tqn -> upper ) && tqn -> lower <= 1 && tqn -> greedy != 0		716151	0		&&			
ANR	717113	CallExpression	IS_REPEAT_INFINITE ( tqn -> upper )		716151	0					
ANR	717114	Callee	IS_REPEAT_INFINITE		716151	0					
ANR	717115	Identifier	IS_REPEAT_INFINITE		716151	0					
ANR	717116	ArgumentList	tqn -> upper		716151	1					
ANR	717117	Argument	tqn -> upper		716151	0					
ANR	717118	PtrMemberAccess	tqn -> upper		716151	0					
ANR	717119	Identifier	tqn		716151	0					
ANR	717120	Identifier	upper		716151	1					
ANR	717121	AndExpression	tqn -> lower <= 1 && tqn -> greedy != 0		716151	1		&&			
ANR	717122	RelationalExpression	tqn -> lower <= 1		716151	0		<=			
ANR	717123	PtrMemberAccess	tqn -> lower		716151	0					
ANR	717124	Identifier	tqn		716151	0					
ANR	717125	Identifier	lower		716151	1					
ANR	717126	PrimaryExpression	1		716151	1					
ANR	717127	EqualityExpression	tqn -> greedy != 0		716151	1		!=			
ANR	717128	PtrMemberAccess	tqn -> greedy		716151	0					
ANR	717129	Identifier	tqn		716151	0					
ANR	717130	Identifier	greedy		716151	1					
ANR	717131	PrimaryExpression	0		716151	1					
ANR	717132	CompoundStatement		175:7:4209:4239	716151	1					
ANR	717133	IdentifierDeclStatement	int qtype = NTYPE ( tqn -> target ) ;	3830:7:85330:85360	716151	0	True				
ANR	717134	IdentifierDecl	qtype = NTYPE ( tqn -> target )		716151	0					
ANR	717135	IdentifierDeclType	int		716151	0					
ANR	717136	Identifier	qtype		716151	1					
ANR	717137	AssignmentExpression	qtype = NTYPE ( tqn -> target )		716151	2		=			
ANR	717138	Identifier	qtype		716151	0					
ANR	717139	CallExpression	NTYPE ( tqn -> target )		716151	1					
ANR	717140	Callee	NTYPE		716151	0					
ANR	717141	Identifier	NTYPE		716151	0					
ANR	717142	ArgumentList	tqn -> target		716151	1					
ANR	717143	Argument	tqn -> target		716151	0					
ANR	717144	PtrMemberAccess	tqn -> target		716151	0					
ANR	717145	Identifier	tqn		716151	0					
ANR	717146	Identifier	target		716151	1					
ANR	717147	IfStatement	if ( IS_NODE_TYPE_SIMPLE ( qtype ) )		716151	1					
ANR	717148	Condition	IS_NODE_TYPE_SIMPLE ( qtype )	3831:11:85373:85398	716151	0	True				
ANR	717149	CallExpression	IS_NODE_TYPE_SIMPLE ( qtype )		716151	0					
ANR	717150	Callee	IS_NODE_TYPE_SIMPLE		716151	0					
ANR	717151	Identifier	IS_NODE_TYPE_SIMPLE		716151	0					
ANR	717152	ArgumentList	qtype		716151	1					
ANR	717153	Argument	qtype		716151	0					
ANR	717154	Identifier	qtype		716151	0					
ANR	717155	ExpressionStatement	"SET_ENCLOSE_STATUS ( node , NST_STOP_BT_SIMPLE_REPEAT )"	3832:2:85403:85454	716151	1	True				
ANR	717156	CallExpression	"SET_ENCLOSE_STATUS ( node , NST_STOP_BT_SIMPLE_REPEAT )"		716151	0					
ANR	717157	Callee	SET_ENCLOSE_STATUS		716151	0					
ANR	717158	Identifier	SET_ENCLOSE_STATUS		716151	0					
ANR	717159	ArgumentList	node		716151	1					
ANR	717160	Argument	node		716151	0					
ANR	717161	Identifier	node		716151	0					
ANR	717162	Argument	NST_STOP_BT_SIMPLE_REPEAT		716151	1					
ANR	717163	Identifier	NST_STOP_BT_SIMPLE_REPEAT		716151	0					
ANR	717164	BreakStatement	break ;	3836:1:85472:85477	716151	9	True				
ANR	717165	BreakStatement	break ;	3839:4:85497:85502	716151	24	True				
ANR	717166	Label	case NT_ANCHOR :	3841:2:85507:85521	716151	25	True				
ANR	717167	Identifier	NT_ANCHOR		716151	0					
ANR	717168	CompoundStatement		188:6:4414:4444	716151	26					
ANR	717169	IdentifierDeclStatement	AnchorNode * an = NANCHOR ( node ) ;	3843:6:85535:85565	716151	0	True				
ANR	717170	IdentifierDecl	* an = NANCHOR ( node )		716151	0					
ANR	717171	IdentifierDeclType	AnchorNode *		716151	0					
ANR	717172	Identifier	an		716151	1					
ANR	717173	AssignmentExpression	* an = NANCHOR ( node )		716151	2		=			
ANR	717174	Identifier	an		716151	0					
ANR	717175	CallExpression	NANCHOR ( node )		716151	1					
ANR	717176	Callee	NANCHOR		716151	0					
ANR	717177	Identifier	NANCHOR		716151	0					
ANR	717178	ArgumentList	node		716151	1					
ANR	717179	Argument	node		716151	0					
ANR	717180	Identifier	node		716151	0					
ANR	717181	SwitchStatement	switch ( an -> type )		716151	1					
ANR	717182	Condition	an -> type	3845:14:85582:85589	716151	0	True				
ANR	717183	PtrMemberAccess	an -> type		716151	0					
ANR	717184	Identifier	an		716151	0					
ANR	717185	Identifier	type		716151	1					
ANR	717186	CompoundStatement		190:24:4471:4471	716151	1					
ANR	717187	Label	case ANCHOR_PREC_READ :	3846:6:85600:85621	716151	0	True				
ANR	717188	Identifier	ANCHOR_PREC_READ		716151	0					
ANR	717189	ExpressionStatement	"r = setup_tree ( an -> target , reg , state , env )"	3847:1:85624:85667	716151	1	True				
ANR	717190	AssignmentExpression	"r = setup_tree ( an -> target , reg , state , env )"		716151	0		=			
ANR	717191	Identifier	r		716151	0					
ANR	717192	CallExpression	"setup_tree ( an -> target , reg , state , env )"		716151	1					
ANR	717193	Callee	setup_tree		716151	0					
ANR	717194	Identifier	setup_tree		716151	0					
ANR	717195	ArgumentList	an -> target		716151	1					
ANR	717196	Argument	an -> target		716151	0					
ANR	717197	PtrMemberAccess	an -> target		716151	0					
ANR	717198	Identifier	an		716151	0					
ANR	717199	Identifier	target		716151	1					
ANR	717200	Argument	reg		716151	1					
ANR	717201	Identifier	reg		716151	0					
ANR	717202	Argument	state		716151	2					
ANR	717203	Identifier	state		716151	0					
ANR	717204	Argument	env		716151	3					
ANR	717205	Identifier	env		716151	0					
ANR	717206	BreakStatement	break ;	3848:1:85670:85675	716151	2	True				
ANR	717207	Label	case ANCHOR_PREC_READ_NOT :	3849:6:85683:85708	716151	3	True				
ANR	717208	Identifier	ANCHOR_PREC_READ_NOT		716151	0					
ANR	717209	ExpressionStatement	"r = setup_tree ( an -> target , reg , ( state | IN_NOT ) , env )"	3850:1:85711:85765	716151	4	True				
ANR	717210	AssignmentExpression	"r = setup_tree ( an -> target , reg , ( state | IN_NOT ) , env )"		716151	0		=			
ANR	717211	Identifier	r		716151	0					
ANR	717212	CallExpression	"setup_tree ( an -> target , reg , ( state | IN_NOT ) , env )"		716151	1					
ANR	717213	Callee	setup_tree		716151	0					
ANR	717214	Identifier	setup_tree		716151	0					
ANR	717215	ArgumentList	an -> target		716151	1					
ANR	717216	Argument	an -> target		716151	0					
ANR	717217	PtrMemberAccess	an -> target		716151	0					
ANR	717218	Identifier	an		716151	0					
ANR	717219	Identifier	target		716151	1					
ANR	717220	Argument	reg		716151	1					
ANR	717221	Identifier	reg		716151	0					
ANR	717222	Argument	state | IN_NOT		716151	2					
ANR	717223	InclusiveOrExpression	state | IN_NOT		716151	0		|			
ANR	717224	Identifier	state		716151	0					
ANR	717225	Identifier	IN_NOT		716151	1					
ANR	717226	Argument	env		716151	3					
ANR	717227	Identifier	env		716151	0					
ANR	717228	BreakStatement	break ;	3851:1:85768:85773	716151	5	True				
ANR	717229	Statement	define	3854:1:85817:85822	716151	6	True				
ANR	717230	Statement	ALLOWED_TYPE_IN_LB	3854:8:85824:85841	716151	7	True				
ANR	717231	Statement	(	3855:2:85848:85848	716151	8	True				
ANR	717232	Statement	BIT_NT_LIST	3855:4:85850:85860	716151	9	True				
ANR	717233	Statement	|	3855:16:85862:85862	716151	10	True				
ANR	717234	Statement	BIT_NT_ALT	3855:18:85864:85873	716151	11	True				
ANR	717235	Statement	|	3855:29:85875:85875	716151	12	True				
ANR	717236	Statement	BIT_NT_STR	3855:31:85877:85886	716151	13	True				
ANR	717237	Statement	|	3855:42:85888:85888	716151	14	True				
ANR	717238	Statement	BIT_NT_CCLASS	3855:44:85890:85902	716151	15	True				
ANR	717239	Statement	|	3855:58:85904:85904	716151	16	True				
ANR	717240	Statement	BIT_NT_CTYPE	3855:60:85906:85917	716151	17	True				
ANR	717241	Statement	|	3855:73:85919:85919	716151	18	True				
ANR	717242	Statement	BIT_NT_CANY	3856:4:85927:85937	716151	19	True				
ANR	717243	Statement	|	3856:16:85939:85939	716151	20	True				
ANR	717244	Statement	BIT_NT_ANCHOR	3856:18:85941:85953	716151	21	True				
ANR	717245	Statement	|	3856:32:85955:85955	716151	22	True				
ANR	717246	Statement	BIT_NT_ENCLOSE	3856:34:85957:85970	716151	23	True				
ANR	717247	Statement	|	3856:49:85972:85972	716151	24	True				
ANR	717248	Statement	BIT_NT_QTFR	3856:51:85974:85984	716151	25	True				
ANR	717249	Statement	|	3856:63:85986:85986	716151	26	True				
ANR	717250	Statement	BIT_NT_CALL	3856:65:85988:85998	716151	27	True				
ANR	717251	Statement	)	3856:77:86000:86000	716151	28	True				
ANR	717252	Statement	define	3858:1:86004:86009	716151	29	True				
ANR	717253	Statement	ALLOWED_ENCLOSE_IN_LB	3858:8:86011:86031	716151	30	True				
ANR	717254	Statement	(	3858:36:86039:86039	716151	31	True				
ANR	717255	Statement	ENCLOSE_MEMORY	3858:38:86041:86054	716151	32	True				
ANR	717256	Statement	)	3858:53:86056:86056	716151	33	True				
ANR	717257	Statement	define	3859:1:86059:86064	716151	34	True				
ANR	717258	Statement	ALLOWED_ENCLOSE_IN_LB_NOT	3859:8:86066:86090	716151	35	True				
ANR	717259	Statement	0	3859:36:86094:86094	716151	36	True				
ANR	717260	Statement	define	3861:1:86098:86103	716151	37	True				
ANR	717261	Statement	ALLOWED_ANCHOR_IN_LB	3861:8:86105:86124	716151	38	True				
ANR	717262	Statement	(	3862:0:86128:86128	716151	39	True				
ANR	717263	Statement	ANCHOR_LOOK_BEHIND	3862:2:86130:86147	716151	40	True				
ANR	717264	Statement	|	3862:21:86149:86149	716151	41	True				
ANR	717265	Statement	ANCHOR_BEGIN_LINE	3862:23:86151:86167	716151	42	True				
ANR	717266	Statement	|	3862:41:86169:86169	716151	43	True				
ANR	717267	Statement	ANCHOR_END_LINE	3862:43:86171:86185	716151	44	True				
ANR	717268	Statement	|	3862:59:86187:86187	716151	45	True				
ANR	717269	Statement	ANCHOR_BEGIN_BUF	3862:61:86189:86204	716151	46	True				
ANR	717270	Statement	|	3862:78:86206:86206	716151	47	True				
ANR	717271	Statement	ANCHOR_BEGIN_POSITION	3862:80:86208:86228	716151	48	True				
ANR	717272	Statement	)	3862:102:86230:86230	716151	49	True				
ANR	717273	Statement	define	3863:1:86233:86238	716151	50	True				
ANR	717274	Statement	ALLOWED_ANCHOR_IN_LB_NOT	3863:8:86240:86263	716151	51	True				
ANR	717275	Statement	(	3864:0:86267:86267	716151	52	True				
ANR	717276	Statement	ANCHOR_LOOK_BEHIND	3864:2:86269:86286	716151	53	True				
ANR	717277	Statement	|	3864:21:86288:86288	716151	54	True				
ANR	717278	Statement	ANCHOR_LOOK_BEHIND_NOT	3864:23:86290:86311	716151	55	True				
ANR	717279	Statement	|	3864:46:86313:86313	716151	56	True				
ANR	717280	Statement	ANCHOR_BEGIN_LINE	3864:48:86315:86331	716151	57	True				
ANR	717281	Statement	|	3864:66:86333:86333	716151	58	True				
ANR	717282	Statement	ANCHOR_END_LINE	3864:68:86335:86349	716151	59	True				
ANR	717283	Statement	|	3864:84:86351:86351	716151	60	True				
ANR	717284	Statement	ANCHOR_BEGIN_BUF	3864:86:86353:86368	716151	61	True				
ANR	717285	Statement	|	3864:103:86370:86370	716151	62	True				
ANR	717286	Statement	ANCHOR_BEGIN_POSITION	3864:105:86372:86392	716151	63	True				
ANR	717287	Statement	)	3864:127:86394:86394	716151	64	True				
ANR	717288	Label	case ANCHOR_LOOK_BEHIND :	3866:6:86403:86426	716151	65	True				
ANR	717289	Identifier	ANCHOR_LOOK_BEHIND		716151	0					
ANR	717290	CompoundStatement		212:1:5308:5308	716151	66					
ANR	717291	ExpressionStatement	"r = check_type_tree ( an -> target , ALLOWED_TYPE_IN_LB , ALLOWED_ENCLOSE_IN_LB , ALLOWED_ANCHOR_IN_LB )"	3868:3:86434:86539	716151	0	True				
ANR	717292	AssignmentExpression	"r = check_type_tree ( an -> target , ALLOWED_TYPE_IN_LB , ALLOWED_ENCLOSE_IN_LB , ALLOWED_ANCHOR_IN_LB )"		716151	0		=			
ANR	717293	Identifier	r		716151	0					
ANR	717294	CallExpression	"check_type_tree ( an -> target , ALLOWED_TYPE_IN_LB , ALLOWED_ENCLOSE_IN_LB , ALLOWED_ANCHOR_IN_LB )"		716151	1					
ANR	717295	Callee	check_type_tree		716151	0					
ANR	717296	Identifier	check_type_tree		716151	0					
ANR	717297	ArgumentList	an -> target		716151	1					
ANR	717298	Argument	an -> target		716151	0					
ANR	717299	PtrMemberAccess	an -> target		716151	0					
ANR	717300	Identifier	an		716151	0					
ANR	717301	Identifier	target		716151	1					
ANR	717302	Argument	ALLOWED_TYPE_IN_LB		716151	1					
ANR	717303	Identifier	ALLOWED_TYPE_IN_LB		716151	0					
ANR	717304	Argument	ALLOWED_ENCLOSE_IN_LB		716151	2					
ANR	717305	Identifier	ALLOWED_ENCLOSE_IN_LB		716151	0					
ANR	717306	Argument	ALLOWED_ANCHOR_IN_LB		716151	3					
ANR	717307	Identifier	ALLOWED_ANCHOR_IN_LB		716151	0					
ANR	717308	IfStatement	if ( r < 0 )		716151	1					
ANR	717309	Condition	r < 0	3870:7:86548:86552	716151	0	True				
ANR	717310	RelationalExpression	r < 0		716151	0		<			
ANR	717311	Identifier	r		716151	0					
ANR	717312	PrimaryExpression	0		716151	1					
ANR	717313	ReturnStatement	return r ;	3870:14:86555:86563	716151	1	True				
ANR	717314	Identifier	r		716151	0					
ANR	717315	IfStatement	if ( r > 0 )		716151	2					
ANR	717316	Condition	r > 0	3871:7:86572:86576	716151	0	True				
ANR	717317	RelationalExpression	r > 0		716151	0		>			
ANR	717318	Identifier	r		716151	0					
ANR	717319	PrimaryExpression	0		716151	1					
ANR	717320	ReturnStatement	return ONIGERR_INVALID_LOOK_BEHIND_PATTERN ;	3871:14:86579:86621	716151	1	True				
ANR	717321	Identifier	ONIGERR_INVALID_LOOK_BEHIND_PATTERN		716151	0					
ANR	717322	ExpressionStatement	"r = setup_look_behind ( node , reg , env )"	3872:3:86626:86663	716151	3	True				
ANR	717323	AssignmentExpression	"r = setup_look_behind ( node , reg , env )"		716151	0		=			
ANR	717324	Identifier	r		716151	0					
ANR	717325	CallExpression	"setup_look_behind ( node , reg , env )"		716151	1					
ANR	717326	Callee	setup_look_behind		716151	0					
ANR	717327	Identifier	setup_look_behind		716151	0					
ANR	717328	ArgumentList	node		716151	1					
ANR	717329	Argument	node		716151	0					
ANR	717330	Identifier	node		716151	0					
ANR	717331	Argument	reg		716151	1					
ANR	717332	Identifier	reg		716151	0					
ANR	717333	Argument	env		716151	2					
ANR	717334	Identifier	env		716151	0					
ANR	717335	IfStatement	if ( r != 0 )		716151	4					
ANR	717336	Condition	r != 0	3873:7:86672:86677	716151	0	True				
ANR	717337	EqualityExpression	r != 0		716151	0		!=			
ANR	717338	Identifier	r		716151	0					
ANR	717339	PrimaryExpression	0		716151	1					
ANR	717340	ReturnStatement	return r ;	3873:15:86680:86688	716151	1	True				
ANR	717341	Identifier	r		716151	0					
ANR	717342	ExpressionStatement	"r = setup_tree ( an -> target , reg , state , env )"	3874:3:86693:86736	716151	5	True				
ANR	717343	AssignmentExpression	"r = setup_tree ( an -> target , reg , state , env )"		716151	0		=			
ANR	717344	Identifier	r		716151	0					
ANR	717345	CallExpression	"setup_tree ( an -> target , reg , state , env )"		716151	1					
ANR	717346	Callee	setup_tree		716151	0					
ANR	717347	Identifier	setup_tree		716151	0					
ANR	717348	ArgumentList	an -> target		716151	1					
ANR	717349	Argument	an -> target		716151	0					
ANR	717350	PtrMemberAccess	an -> target		716151	0					
ANR	717351	Identifier	an		716151	0					
ANR	717352	Identifier	target		716151	1					
ANR	717353	Argument	reg		716151	1					
ANR	717354	Identifier	reg		716151	0					
ANR	717355	Argument	state		716151	2					
ANR	717356	Identifier	state		716151	0					
ANR	717357	Argument	env		716151	3					
ANR	717358	Identifier	env		716151	0					
ANR	717359	BreakStatement	break ;	3876:1:86742:86747	716151	67	True				
ANR	717360	Label	case ANCHOR_LOOK_BEHIND_NOT :	3878:6:86756:86783	716151	68	True				
ANR	717361	Identifier	ANCHOR_LOOK_BEHIND_NOT		716151	0					
ANR	717362	CompoundStatement		224:1:5665:5665	716151	69					
ANR	717363	ExpressionStatement	"r = check_type_tree ( an -> target , ALLOWED_TYPE_IN_LB , ALLOWED_ENCLOSE_IN_LB_NOT , ALLOWED_ANCHOR_IN_LB_NOT )"	3880:3:86791:86903	716151	0	True				
ANR	717364	AssignmentExpression	"r = check_type_tree ( an -> target , ALLOWED_TYPE_IN_LB , ALLOWED_ENCLOSE_IN_LB_NOT , ALLOWED_ANCHOR_IN_LB_NOT )"		716151	0		=			
ANR	717365	Identifier	r		716151	0					
ANR	717366	CallExpression	"check_type_tree ( an -> target , ALLOWED_TYPE_IN_LB , ALLOWED_ENCLOSE_IN_LB_NOT , ALLOWED_ANCHOR_IN_LB_NOT )"		716151	1					
ANR	717367	Callee	check_type_tree		716151	0					
ANR	717368	Identifier	check_type_tree		716151	0					
ANR	717369	ArgumentList	an -> target		716151	1					
ANR	717370	Argument	an -> target		716151	0					
ANR	717371	PtrMemberAccess	an -> target		716151	0					
ANR	717372	Identifier	an		716151	0					
ANR	717373	Identifier	target		716151	1					
ANR	717374	Argument	ALLOWED_TYPE_IN_LB		716151	1					
ANR	717375	Identifier	ALLOWED_TYPE_IN_LB		716151	0					
ANR	717376	Argument	ALLOWED_ENCLOSE_IN_LB_NOT		716151	2					
ANR	717377	Identifier	ALLOWED_ENCLOSE_IN_LB_NOT		716151	0					
ANR	717378	Argument	ALLOWED_ANCHOR_IN_LB_NOT		716151	3					
ANR	717379	Identifier	ALLOWED_ANCHOR_IN_LB_NOT		716151	0					
ANR	717380	IfStatement	if ( r < 0 )		716151	1					
ANR	717381	Condition	r < 0	3882:7:86912:86916	716151	0	True				
ANR	717382	RelationalExpression	r < 0		716151	0		<			
ANR	717383	Identifier	r		716151	0					
ANR	717384	PrimaryExpression	0		716151	1					
ANR	717385	ReturnStatement	return r ;	3882:14:86919:86927	716151	1	True				
ANR	717386	Identifier	r		716151	0					
ANR	717387	IfStatement	if ( r > 0 )		716151	2					
ANR	717388	Condition	r > 0	3883:7:86936:86940	716151	0	True				
ANR	717389	RelationalExpression	r > 0		716151	0		>			
ANR	717390	Identifier	r		716151	0					
ANR	717391	PrimaryExpression	0		716151	1					
ANR	717392	ReturnStatement	return ONIGERR_INVALID_LOOK_BEHIND_PATTERN ;	3883:14:86943:86985	716151	1	True				
ANR	717393	Identifier	ONIGERR_INVALID_LOOK_BEHIND_PATTERN		716151	0					
ANR	717394	ExpressionStatement	"r = setup_look_behind ( node , reg , env )"	3884:3:86990:87027	716151	3	True				
ANR	717395	AssignmentExpression	"r = setup_look_behind ( node , reg , env )"		716151	0		=			
ANR	717396	Identifier	r		716151	0					
ANR	717397	CallExpression	"setup_look_behind ( node , reg , env )"		716151	1					
ANR	717398	Callee	setup_look_behind		716151	0					
ANR	717399	Identifier	setup_look_behind		716151	0					
ANR	717400	ArgumentList	node		716151	1					
ANR	717401	Argument	node		716151	0					
ANR	717402	Identifier	node		716151	0					
ANR	717403	Argument	reg		716151	1					
ANR	717404	Identifier	reg		716151	0					
ANR	717405	Argument	env		716151	2					
ANR	717406	Identifier	env		716151	0					
ANR	717407	IfStatement	if ( r != 0 )		716151	4					
ANR	717408	Condition	r != 0	3885:7:87036:87041	716151	0	True				
ANR	717409	EqualityExpression	r != 0		716151	0		!=			
ANR	717410	Identifier	r		716151	0					
ANR	717411	PrimaryExpression	0		716151	1					
ANR	717412	ReturnStatement	return r ;	3885:15:87044:87052	716151	1	True				
ANR	717413	Identifier	r		716151	0					
ANR	717414	ExpressionStatement	"r = setup_tree ( an -> target , reg , ( state | IN_NOT ) , env )"	3886:3:87057:87111	716151	5	True				
ANR	717415	AssignmentExpression	"r = setup_tree ( an -> target , reg , ( state | IN_NOT ) , env )"		716151	0		=			
ANR	717416	Identifier	r		716151	0					
ANR	717417	CallExpression	"setup_tree ( an -> target , reg , ( state | IN_NOT ) , env )"		716151	1					
ANR	717418	Callee	setup_tree		716151	0					
ANR	717419	Identifier	setup_tree		716151	0					
ANR	717420	ArgumentList	an -> target		716151	1					
ANR	717421	Argument	an -> target		716151	0					
ANR	717422	PtrMemberAccess	an -> target		716151	0					
ANR	717423	Identifier	an		716151	0					
ANR	717424	Identifier	target		716151	1					
ANR	717425	Argument	reg		716151	1					
ANR	717426	Identifier	reg		716151	0					
ANR	717427	Argument	state | IN_NOT		716151	2					
ANR	717428	InclusiveOrExpression	state | IN_NOT		716151	0		|			
ANR	717429	Identifier	state		716151	0					
ANR	717430	Identifier	IN_NOT		716151	1					
ANR	717431	Argument	env		716151	3					
ANR	717432	Identifier	env		716151	0					
ANR	717433	BreakStatement	break ;	3888:1:87117:87122	716151	70	True				
ANR	717434	BreakStatement	break ;	3891:4:87142:87147	716151	27	True				
ANR	717435	Label	default :	3893:2:87152:87159	716151	28	True				
ANR	717436	Identifier	default		716151	0					
ANR	717437	BreakStatement	break ;	3894:4:87165:87170	716151	29	True				
ANR	717438	ReturnStatement	return r ;	3897:2:87179:87187	716151	4	True				
ANR	717439	Identifier	r		716151	0					
ANR	717440	ReturnType	static int		716151	1					
ANR	717441	Identifier	setup_tree		716151	2					
ANR	717442	ParameterList	"Node * node , regex_t * reg , int state , ScanEnv * env"		716151	3					
ANR	717443	Parameter	Node * node	3655:11:81069:81078	716151	0	True				
ANR	717444	ParameterType	Node *		716151	0					
ANR	717445	Identifier	node		716151	1					
ANR	717446	Parameter	regex_t * reg	3655:23:81081:81092	716151	1	True				
ANR	717447	ParameterType	regex_t *		716151	0					
ANR	717448	Identifier	reg		716151	1					
ANR	717449	Parameter	int state	3655:37:81095:81103	716151	2	True				
ANR	717450	ParameterType	int		716151	0					
ANR	717451	Identifier	state		716151	1					
ANR	717452	Parameter	ScanEnv * env	3655:48:81106:81117	716151	3	True				
ANR	717453	ParameterType	ScanEnv *		716151	0					
ANR	717454	Identifier	env		716151	1					
ANR	717455	CFGEntryNode	ENTRY		716151		True				
ANR	717456	CFGExitNode	EXIT		716151		True				
ANR	717457	Symbol	* sn		716151						
ANR	717458	Symbol	env -> bt_mem_start		716151						
ANR	717459	Symbol	tqn -> target		716151						
ANR	717460	Symbol	ONIGERR_INVALID_LOOK_BEHIND_PATTERN		716151						
ANR	717461	Symbol	prev		716151						
ANR	717462	Symbol	tqn -> upper		716151						
ANR	717463	Symbol	type		716151						
ANR	717464	Symbol	NQTFR		716151						
ANR	717465	Symbol	env -> bt_mem_end		716151						
ANR	717466	Symbol	expand_case_fold_string		716151						
ANR	717467	Symbol	len		716151						
ANR	717468	Symbol	IS_NODE_TYPE_SIMPLE		716151						
ANR	717469	Symbol	* br		716151						
ANR	717470	Symbol	en -> type		716151						
ANR	717471	Symbol	options		716151						
ANR	717472	Symbol	SCANENV_MEM_NODES		716151						
ANR	717473	Symbol	state		716151						
ANR	717474	Symbol	IS_REPEAT_INFINITE		716151						
ANR	717475	Symbol	qn		716151						
ANR	717476	Symbol	NENCLOSE ( node ) -> option		716151						
ANR	717477	Symbol	en -> regnum		716151						
ANR	717478	Symbol	NCDR		716151						
ANR	717479	Symbol	NSTR		716151						
ANR	717480	Symbol	tqn -> lower		716151						
ANR	717481	Symbol	NSTR ( target ) -> flag		716151						
ANR	717482	Symbol	check_type_tree		716151						
ANR	717483	Symbol	an		716151						
ANR	717484	Symbol	qn -> target		716151						
ANR	717485	Symbol	node		716151						
ANR	717486	Symbol	BACKREFS_P		716151						
ANR	717487	Symbol	get_max_match_length		716151						
ANR	717488	Symbol	an -> target		716151						
ANR	717489	Symbol	NST_STOP_BT_SIMPLE_REPEAT		716151						
ANR	717490	Symbol	next_setup		716151						
ANR	717491	Symbol	ALLOWED_ENCLOSE_IN_LB		716151						
ANR	717492	Symbol	qtype		716151						
ANR	717493	Symbol	NSTRING_IS_RAW		716151						
ANR	717494	Symbol	* en		716151						
ANR	717495	Symbol	br		716151						
ANR	717496	Symbol	qn -> lower		716151						
ANR	717497	Symbol	NBREF		716151						
ANR	717498	Symbol	NENCLOSE		716151						
ANR	717499	Symbol	* * p		716151						
ANR	717500	Symbol	sn		716151						
ANR	717501	Symbol	d		716151						
ANR	717502	Symbol	IN_ALT		716151						
ANR	717503	Symbol	i		716151						
ANR	717504	Symbol	ALLOWED_ENCLOSE_IN_LB_NOT		716151						
ANR	717505	Symbol	n		716151						
ANR	717506	Symbol	get_head_value_node		716151						
ANR	717507	Symbol	p		716151						
ANR	717508	Symbol	r		716151						
ANR	717509	Symbol	ALLOWED_TYPE_IN_LB		716151						
ANR	717510	Symbol	ALLOWED_ANCHOR_IN_LB		716151						
ANR	717511	Symbol	setup_look_behind		716151						
ANR	717512	Symbol	en -> target		716151						
ANR	717513	Symbol	ALLOWED_ANCHOR_IN_LB_NOT		716151						
ANR	717514	Symbol	IS_IGNORECASE		716151						
ANR	717515	Symbol	NSTRING_LEN		716151						
ANR	717516	Symbol	NCAR		716151						
ANR	717517	Symbol	br -> back_num		716151						
ANR	717518	Symbol	EXPAND_STRING_MAX_LENGTH		716151						
ANR	717519	Symbol	qn -> state		716151						
ANR	717520	Symbol	tqn		716151						
ANR	717521	Symbol	IN_NOT		716151						
ANR	717522	Symbol	sn -> s		716151						
ANR	717523	Symbol	reg		716151						
ANR	717524	Symbol	reg -> options		716151						
ANR	717525	Symbol	* nodes		716151						
ANR	717526	Symbol	IN_REPEAT		716151						
ANR	717527	Symbol	tqn -> head_exact		716151						
ANR	717528	Symbol	env -> backrefed_mem		716151						
ANR	717529	Symbol	* * i		716151						
ANR	717530	Symbol	NQ_TARGET_IS_EMPTY		716151						
ANR	717531	Symbol	NULL		716151						
ANR	717532	Symbol	* env		716151						
ANR	717533	Symbol	en		716151						
ANR	717534	Symbol	* NSTR		716151						
ANR	717535	Symbol	NENCLOSE ( node ) -> target		716151						
ANR	717536	Symbol	qn -> upper		716151						
ANR	717537	Symbol	get_min_match_length		716151						
ANR	717538	Symbol	NULL_NODE		716151						
ANR	717539	Symbol	* qn		716151						
ANR	717540	Symbol	qn -> target_empty_info		716151						
ANR	717541	Symbol	qn -> greedy		716151						
ANR	717542	Symbol	IS_NOT_NULL		716151						
ANR	717543	Symbol	ONIGERR_INVALID_BACKREF		716151						
ANR	717544	Symbol	* NENCLOSE		716151						
ANR	717545	Symbol	an -> type		716151						
ANR	717546	Symbol	NST_MEM_BACKREFED		716151						
ANR	717547	Symbol	NT_QTFR		716151						
ANR	717548	Symbol	NST_IN_REPEAT		716151						
ANR	717549	Symbol	sn -> end		716151						
ANR	717550	Symbol	env -> num_mem		716151						
ANR	717551	Symbol	quantifiers_memory_node_info		716151						
ANR	717552	Symbol	& d		716151						
ANR	717553	Symbol	env		716151						
ANR	717554	Symbol	tqn -> greedy		716151						
ANR	717555	Symbol	setup_tree		716151						
ANR	717556	Symbol	qn -> head_exact		716151						
ANR	717557	Symbol	target		716151						
ANR	717558	Symbol	* an		716151						
ANR	717559	Symbol	nodes		716151						
ANR	717560	Symbol	* i		716151						
ANR	717561	Symbol	onig_node_str_cat		716151						
ANR	717562	Symbol	NANCHOR		716151						
ANR	717563	Symbol	NTYPE		716151						
ANR	717564	Symbol	* p		716151						
ANR	717565	Symbol	IN_VAR_REPEAT		716151						
ANR	717566	Symbol	* tqn		716151						
ANR	717567	Symbol	* reg		716151						
ANR	717568	Symbol	IS_BACKREF_NEST_LEVEL		716151						
ANR	717569	Symbol	NT_STR		716151						
ANR	717570	Function	set_bm_skip	3901:0:87233:87872							
ANR	717571	FunctionDef	"set_bm_skip (UChar * s , UChar * end , OnigEncoding enc ARG_UNUSED , UChar skip [ ] , int * * int_skip)"		717570	0					
ANR	717572	CompoundStatement		3904:0:87342:87872	717570	0					
ANR	717573	IdentifierDeclStatement	"int i , len ;"	3905:2:87346:87356	717570	0	True				
ANR	717574	IdentifierDecl	i		717570	0					
ANR	717575	IdentifierDeclType	int		717570	0					
ANR	717576	Identifier	i		717570	1					
ANR	717577	IdentifierDecl	len		717570	1					
ANR	717578	IdentifierDeclType	int		717570	0					
ANR	717579	Identifier	len		717570	1					
ANR	717580	ExpressionStatement	len = end - s	3907:2:87361:87374	717570	1	True				
ANR	717581	AssignmentExpression	len = end - s		717570	0		=			
ANR	717582	Identifier	len		717570	0					
ANR	717583	AdditiveExpression	end - s		717570	1		-			
ANR	717584	Identifier	end		717570	0					
ANR	717585	Identifier	s		717570	1					
ANR	717586	IfStatement	if ( len < ONIG_CHAR_TABLE_SIZE )		717570	2					
ANR	717587	Condition	len < ONIG_CHAR_TABLE_SIZE	3908:6:87382:87407	717570	0	True				
ANR	717588	RelationalExpression	len < ONIG_CHAR_TABLE_SIZE		717570	0		<			
ANR	717589	Identifier	len		717570	0					
ANR	717590	Identifier	ONIG_CHAR_TABLE_SIZE		717570	1					
ANR	717591	CompoundStatement		5:34:67:67	717570	1					
ANR	717592	ForStatement	for ( i = 0 ; i < ONIG_CHAR_TABLE_SIZE ; i ++ )		717570	0					
ANR	717593	ForInit	i = 0 ;	3909:9:87421:87426	717570	0	True				
ANR	717594	AssignmentExpression	i = 0		717570	0		=			
ANR	717595	Identifier	i		717570	0					
ANR	717596	PrimaryExpression	0		717570	1					
ANR	717597	Condition	i < ONIG_CHAR_TABLE_SIZE	3909:16:87428:87451	717570	1	True				
ANR	717598	RelationalExpression	i < ONIG_CHAR_TABLE_SIZE		717570	0		<			
ANR	717599	Identifier	i		717570	0					
ANR	717600	Identifier	ONIG_CHAR_TABLE_SIZE		717570	1					
ANR	717601	PostIncDecOperationExpression	i ++	3909:42:87454:87456	717570	2	True				
ANR	717602	Identifier	i		717570	0					
ANR	717603	IncDec	++		717570	1					
ANR	717604	ExpressionStatement	skip [ i ] = len	3909:47:87459:87472	717570	3	True				
ANR	717605	AssignmentExpression	skip [ i ] = len		717570	0		=			
ANR	717606	ArrayIndexing	skip [ i ]		717570	0					
ANR	717607	Identifier	skip		717570	0					
ANR	717608	Identifier	i		717570	1					
ANR	717609	Identifier	len		717570	1					
ANR	717610	ForStatement	for ( i = 0 ; i < len - 1 ; i ++ )		717570	1					
ANR	717611	ForInit	i = 0 ;	3911:9:87484:87489	717570	0	True				
ANR	717612	AssignmentExpression	i = 0		717570	0		=			
ANR	717613	Identifier	i		717570	0					
ANR	717614	PrimaryExpression	0		717570	1					
ANR	717615	Condition	i < len - 1	3911:16:87491:87501	717570	1	True				
ANR	717616	RelationalExpression	i < len - 1		717570	0		<			
ANR	717617	Identifier	i		717570	0					
ANR	717618	AdditiveExpression	len - 1		717570	1		-			
ANR	717619	Identifier	len		717570	0					
ANR	717620	PrimaryExpression	1		717570	1					
ANR	717621	PostIncDecOperationExpression	i ++	3911:29:87504:87506	717570	2	True				
ANR	717622	Identifier	i		717570	0					
ANR	717623	IncDec	++		717570	1					
ANR	717624	ExpressionStatement	skip [ s [ i ] ] = len - 1 - i	3912:6:87515:87539	717570	3	True				
ANR	717625	AssignmentExpression	skip [ s [ i ] ] = len - 1 - i		717570	0		=			
ANR	717626	ArrayIndexing	skip [ s [ i ] ]		717570	0					
ANR	717627	Identifier	skip		717570	0					
ANR	717628	ArrayIndexing	s [ i ]		717570	1					
ANR	717629	Identifier	s		717570	0					
ANR	717630	Identifier	i		717570	1					
ANR	717631	AdditiveExpression	len - 1 - i		717570	1		-			
ANR	717632	Identifier	len		717570	0					
ANR	717633	AdditiveExpression	1 - i		717570	1		-			
ANR	717634	PrimaryExpression	1		717570	0					
ANR	717635	Identifier	i		717570	1					
ANR	717636	ElseStatement	else		717570	0					
ANR	717637	CompoundStatement		11:7:209:209	717570	0					
ANR	717638	IfStatement	if ( IS_NULL ( * int_skip ) )		717570	0					
ANR	717639	Condition	IS_NULL ( * int_skip )	3915:8:87562:87579	717570	0	True				
ANR	717640	CallExpression	IS_NULL ( * int_skip )		717570	0					
ANR	717641	Callee	IS_NULL		717570	0					
ANR	717642	Identifier	IS_NULL		717570	0					
ANR	717643	ArgumentList	* int_skip		717570	1					
ANR	717644	Argument	* int_skip		717570	0					
ANR	717645	UnaryOperationExpression	* int_skip		717570	0					
ANR	717646	UnaryOperator	*		717570	0					
ANR	717647	Identifier	int_skip		717570	1					
ANR	717648	CompoundStatement		12:28:239:239	717570	1					
ANR	717649	ExpressionStatement	* int_skip = ( int * ) xmalloc ( sizeof ( int ) * ONIG_CHAR_TABLE_SIZE )	3916:6:87590:87652	717570	0	True				
ANR	717650	AssignmentExpression	* int_skip = ( int * ) xmalloc ( sizeof ( int ) * ONIG_CHAR_TABLE_SIZE )		717570	0		=			
ANR	717651	UnaryOperationExpression	* int_skip		717570	0					
ANR	717652	UnaryOperator	*		717570	0					
ANR	717653	Identifier	int_skip		717570	1					
ANR	717654	CastExpression	( int * ) xmalloc ( sizeof ( int ) * ONIG_CHAR_TABLE_SIZE )		717570	1					
ANR	717655	CastTarget	int *		717570	0					
ANR	717656	CallExpression	xmalloc ( sizeof ( int ) * ONIG_CHAR_TABLE_SIZE )		717570	1					
ANR	717657	Callee	xmalloc		717570	0					
ANR	717658	Identifier	xmalloc		717570	0					
ANR	717659	ArgumentList	sizeof ( int ) * ONIG_CHAR_TABLE_SIZE		717570	1					
ANR	717660	Argument	sizeof ( int ) * ONIG_CHAR_TABLE_SIZE		717570	0					
ANR	717661	MultiplicativeExpression	sizeof ( int ) * ONIG_CHAR_TABLE_SIZE		717570	0		*			
ANR	717662	SizeofExpression	sizeof ( int )		717570	0					
ANR	717663	Sizeof	sizeof		717570	0					
ANR	717664	SizeofOperand	int		717570	1					
ANR	717665	Identifier	ONIG_CHAR_TABLE_SIZE		717570	1					
ANR	717666	IfStatement	if ( IS_NULL ( * int_skip ) )		717570	1					
ANR	717667	Condition	IS_NULL ( * int_skip )	3917:10:87664:87681	717570	0	True				
ANR	717668	CallExpression	IS_NULL ( * int_skip )		717570	0					
ANR	717669	Callee	IS_NULL		717570	0					
ANR	717670	Identifier	IS_NULL		717570	0					
ANR	717671	ArgumentList	* int_skip		717570	1					
ANR	717672	Argument	* int_skip		717570	0					
ANR	717673	UnaryOperationExpression	* int_skip		717570	0					
ANR	717674	UnaryOperator	*		717570	0					
ANR	717675	Identifier	int_skip		717570	1					
ANR	717676	ReturnStatement	return ONIGERR_MEMORY ;	3917:30:87684:87705	717570	1	True				
ANR	717677	Identifier	ONIGERR_MEMORY		717570	0					
ANR	717678	ForStatement	for ( i = 0 ; i < ONIG_CHAR_TABLE_SIZE ; i ++ )		717570	1					
ANR	717679	ForInit	i = 0 ;	3919:9:87722:87727	717570	0	True				
ANR	717680	AssignmentExpression	i = 0		717570	0		=			
ANR	717681	Identifier	i		717570	0					
ANR	717682	PrimaryExpression	0		717570	1					
ANR	717683	Condition	i < ONIG_CHAR_TABLE_SIZE	3919:16:87729:87752	717570	1	True				
ANR	717684	RelationalExpression	i < ONIG_CHAR_TABLE_SIZE		717570	0		<			
ANR	717685	Identifier	i		717570	0					
ANR	717686	Identifier	ONIG_CHAR_TABLE_SIZE		717570	1					
ANR	717687	PostIncDecOperationExpression	i ++	3919:42:87755:87757	717570	2	True				
ANR	717688	Identifier	i		717570	0					
ANR	717689	IncDec	++		717570	1					
ANR	717690	ExpressionStatement	( * int_skip ) [ i ] = len	3919:47:87760:87780	717570	3	True				
ANR	717691	AssignmentExpression	( * int_skip ) [ i ] = len		717570	0		=			
ANR	717692	ArrayIndexing	( * int_skip ) [ i ]		717570	0					
ANR	717693	UnaryOperationExpression	* int_skip		717570	0					
ANR	717694	UnaryOperator	*		717570	0					
ANR	717695	Identifier	int_skip		717570	1					
ANR	717696	Identifier	i		717570	1					
ANR	717697	Identifier	len		717570	1					
ANR	717698	ForStatement	for ( i = 0 ; i < len - 1 ; i ++ )		717570	2					
ANR	717699	ForInit	i = 0 ;	3921:9:87792:87797	717570	0	True				
ANR	717700	AssignmentExpression	i = 0		717570	0		=			
ANR	717701	Identifier	i		717570	0					
ANR	717702	PrimaryExpression	0		717570	1					
ANR	717703	Condition	i < len - 1	3921:16:87799:87809	717570	1	True				
ANR	717704	RelationalExpression	i < len - 1		717570	0		<			
ANR	717705	Identifier	i		717570	0					
ANR	717706	AdditiveExpression	len - 1		717570	1		-			
ANR	717707	Identifier	len		717570	0					
ANR	717708	PrimaryExpression	1		717570	1					
ANR	717709	PostIncDecOperationExpression	i ++	3921:29:87812:87814	717570	2	True				
ANR	717710	Identifier	i		717570	0					
ANR	717711	IncDec	++		717570	1					
ANR	717712	ExpressionStatement	( * int_skip ) [ s [ i ] ] = len - 1 - i	3922:6:87823:87854	717570	3	True				
ANR	717713	AssignmentExpression	( * int_skip ) [ s [ i ] ] = len - 1 - i		717570	0		=			
ANR	717714	ArrayIndexing	( * int_skip ) [ s [ i ] ]		717570	0					
ANR	717715	UnaryOperationExpression	* int_skip		717570	0					
ANR	717716	UnaryOperator	*		717570	0					
ANR	717717	Identifier	int_skip		717570	1					
ANR	717718	ArrayIndexing	s [ i ]		717570	1					
ANR	717719	Identifier	s		717570	0					
ANR	717720	Identifier	i		717570	1					
ANR	717721	AdditiveExpression	len - 1 - i		717570	1		-			
ANR	717722	Identifier	len		717570	0					
ANR	717723	AdditiveExpression	1 - i		717570	1		-			
ANR	717724	PrimaryExpression	1		717570	0					
ANR	717725	Identifier	i		717570	1					
ANR	717726	ReturnStatement	return 0 ;	3924:2:87862:87870	717570	3	True				
ANR	717727	PrimaryExpression	0		717570	0					
ANR	717728	ReturnType	static int		717570	1					
ANR	717729	Identifier	set_bm_skip		717570	2					
ANR	717730	ParameterList	"UChar * s , UChar * end , OnigEncoding enc ARG_UNUSED , UChar skip [ ] , int * * int_skip"		717570	3					
ANR	717731	Parameter	UChar * s	3902:12:87256:87263	717570	0	True				
ANR	717732	ParameterType	UChar *		717570	0					
ANR	717733	Identifier	s		717570	1					
ANR	717734	Parameter	UChar * end	3902:22:87266:87275	717570	1	True				
ANR	717735	ParameterType	UChar *		717570	0					
ANR	717736	Identifier	end		717570	1					
ANR	717737	Parameter	OnigEncoding enc ARG_UNUSED	3902:34:87278:87304	717570	2	True				
ANR	717738	ParameterType	OnigEncoding enc		717570	0					
ANR	717739	Identifier	ARG_UNUSED		717570	1					
ANR	717740	Parameter	UChar skip [ ]	3903:5:87312:87323	717570	3	True				
ANR	717741	ParameterType	UChar [ ]		717570	0					
ANR	717742	Identifier	skip		717570	1					
ANR	717743	Parameter	int * * int_skip	3903:19:87326:87339	717570	4	True				
ANR	717744	ParameterType	int * *		717570	0					
ANR	717745	Identifier	int_skip		717570	1					
ANR	717746	CFGEntryNode	ENTRY		717570		True				
ANR	717747	CFGExitNode	EXIT		717570		True				
ANR	717748	Symbol	* * i		717570						
ANR	717749	Symbol	* int_skip		717570						
ANR	717750	Symbol	int_skip		717570						
ANR	717751	Symbol	ONIGERR_MEMORY		717570						
ANR	717752	Symbol	i		717570						
ANR	717753	Symbol	skip		717570						
ANR	717754	Symbol	ARG_UNUSED		717570						
ANR	717755	Symbol	* skip		717570						
ANR	717756	Symbol	s		717570						
ANR	717757	Symbol	ONIG_CHAR_TABLE_SIZE		717570						
ANR	717758	Symbol	* i		717570						
ANR	717759	Symbol	len		717570						
ANR	717760	Symbol	IS_NULL		717570						
ANR	717761	Symbol	xmalloc		717570						
ANR	717762	Symbol	* * s		717570						
ANR	717763	Symbol	end		717570						
ANR	717764	Symbol	* * int_skip		717570						
ANR	717765	Symbol	* s		717570						
ANR	717766	ClassDef	<unnamed>	3929:8:87914:88020							
ANR	717767	DeclStmt									
ANR	717768	Decl							OnigDistance	OnigDistance	min
ANR	717769	DeclStmt									
ANR	717770	Decl							OnigDistance	OnigDistance	max
ANR	717771	DeclStmt									
ANR	717772	Decl									MinMaxLen
ANR	717773	ClassDef	<unnamed>	3934:8:88031:88188							
ANR	717774	DeclStmt									
ANR	717775	Decl							MinMaxLen	MinMaxLen	mmd
ANR	717776	DeclStmt									
ANR	717777	Decl							OnigEncoding	OnigEncoding	enc
ANR	717778	DeclStmt									
ANR	717779	Decl							OnigOptionType	OnigOptionType	options
ANR	717780	DeclStmt									
ANR	717781	Decl							OnigCaseFoldType	OnigCaseFoldType	case_fold_flag
ANR	717782	DeclStmt									
ANR	717783	Decl							ScanEnv	ScanEnv *	scan_env
ANR	717784	DeclStmt									
ANR	717785	Decl									OptEnv
ANR	717786	ClassDef	<unnamed>	3942:8:88199:88259							
ANR	717787	DeclStmt									
ANR	717788	Decl							int	int	left_anchor
ANR	717789	DeclStmt									
ANR	717790	Decl							int	int	right_anchor
ANR	717791	DeclStmt									
ANR	717792	Decl									OptAncInfo
ANR	717793	ClassDef	<unnamed>	3947:8:88270:88432							
ANR	717794	DeclStmt									
ANR	717795	Decl							MinMaxLen	MinMaxLen	mmd
ANR	717796	DeclStmt									
ANR	717797	Decl							OptAncInfo	OptAncInfo	anc
ANR	717798	DeclStmt									
ANR	717799	Decl							int	int	reach_end
ANR	717800	DeclStmt									
ANR	717801	Decl							int	int	ignore_case
ANR	717802	DeclStmt									
ANR	717803	Decl							int	int	len
ANR	717804	DeclStmt									
ANR	717805	Decl							UChar	UChar [ OPT_EXACT_MAXLEN ]	s
ANR	717806	DeclStmt									
ANR	717807	Decl									OptExactInfo
ANR	717808	ClassDef	<unnamed>	3957:8:88443:88596							
ANR	717809	DeclStmt									
ANR	717810	Decl							MinMaxLen	MinMaxLen	mmd
ANR	717811	DeclStmt									
ANR	717812	Decl							OptAncInfo	OptAncInfo	anc
ANR	717813	DeclStmt									
ANR	717814	Decl							int	int	value
ANR	717815	DeclStmt									
ANR	717816	Decl							UChar	UChar [ ONIG_CHAR_TABLE_SIZE ]	map
ANR	717817	DeclStmt									
ANR	717818	Decl									OptMapInfo
ANR	717819	ClassDef	<unnamed>	3965:8:88607:88829							
ANR	717820	DeclStmt									
ANR	717821	Decl							MinMaxLen	MinMaxLen	len
ANR	717822	DeclStmt									
ANR	717823	Decl							OptAncInfo	OptAncInfo	anc
ANR	717824	DeclStmt									
ANR	717825	Decl							OptExactInfo	OptExactInfo	exb
ANR	717826	DeclStmt									
ANR	717827	Decl							OptExactInfo	OptExactInfo	exm
ANR	717828	DeclStmt									
ANR	717829	Decl							OptExactInfo	OptExactInfo	expr
ANR	717830	DeclStmt									
ANR	717831	Decl							OptMapInfo	OptMapInfo	map
ANR	717832	DeclStmt									
ANR	717833	Decl									NodeOptInfo
ANR	717834	Function	map_position_value	3977:0:88833:89705							
ANR	717835	FunctionDef	"map_position_value (OnigEncoding enc , int i)"		717834	0					
ANR	717836	CompoundStatement		3979:0:88888:89705	717834	0					
ANR	717837	Statement	static	3980:2:88892:88897	717834	0	True				
ANR	717838	IdentifierDeclStatement	"const short int ByteValTable [ ] = { 5 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 10 , 10 , 1 , 1 , 10 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 12 , 4 , 7 , 4 , 4 , 4 , 4 , 4 , 4 , 5 , 5 , 5 , 5 , 5 , 5 , 5 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 5 , 5 , 5 , 5 , 5 , 5 , 5 , 6 , 6 , 6 , 6 , 7 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 5 , 6 , 5 , 5 , 5 , 5 , 6 , 6 , 6 , 6 , 7 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 5 , 5 , 5 , 5 , 1 } ;"	3980:9:88899:89480	717834	1	True				
ANR	717839	IdentifierDecl	"ByteValTable [ ] = { 5 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 10 , 10 , 1 , 1 , 10 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 12 , 4 , 7 , 4 , 4 , 4 , 4 , 4 , 4 , 5 , 5 , 5 , 5 , 5 , 5 , 5 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 5 , 5 , 5 , 5 , 5 , 5 , 5 , 6 , 6 , 6 , 6 , 7 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 5 , 6 , 5 , 5 , 5 , 5 , 6 , 6 , 6 , 6 , 7 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 5 , 5 , 5 , 5 , 1 }"		717834	0					
ANR	717840	IdentifierDeclType	const short int [ ]		717834	0					
ANR	717841	Identifier	ByteValTable		717834	1					
ANR	717842	AssignmentExpression	"ByteValTable [ ] = { 5 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 10 , 10 , 1 , 1 , 10 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 12 , 4 , 7 , 4 , 4 , 4 , 4 , 4 , 4 , 5 , 5 , 5 , 5 , 5 , 5 , 5 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 5 , 5 , 5 , 5 , 5 , 5 , 5 , 6 , 6 , 6 , 6 , 7 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 5 , 6 , 5 , 5 , 5 , 5 , 6 , 6 , 6 , 6 , 7 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 5 , 5 , 5 , 5 , 1 }"		717834	2		=			
ANR	717843	Identifier	ByteValTable		717834	0					
ANR	717844	InitializerList	5		717834	1					
ANR	717845	PrimaryExpression	5		717834	0					
ANR	717846	PrimaryExpression	1		717834	1					
ANR	717847	PrimaryExpression	1		717834	2					
ANR	717848	PrimaryExpression	1		717834	3					
ANR	717849	PrimaryExpression	1		717834	4					
ANR	717850	PrimaryExpression	1		717834	5					
ANR	717851	PrimaryExpression	1		717834	6					
ANR	717852	PrimaryExpression	1		717834	7					
ANR	717853	PrimaryExpression	1		717834	8					
ANR	717854	PrimaryExpression	10		717834	9					
ANR	717855	PrimaryExpression	10		717834	10					
ANR	717856	PrimaryExpression	1		717834	11					
ANR	717857	PrimaryExpression	1		717834	12					
ANR	717858	PrimaryExpression	10		717834	13					
ANR	717859	PrimaryExpression	1		717834	14					
ANR	717860	PrimaryExpression	1		717834	15					
ANR	717861	PrimaryExpression	1		717834	16					
ANR	717862	PrimaryExpression	1		717834	17					
ANR	717863	PrimaryExpression	1		717834	18					
ANR	717864	PrimaryExpression	1		717834	19					
ANR	717865	PrimaryExpression	1		717834	20					
ANR	717866	PrimaryExpression	1		717834	21					
ANR	717867	PrimaryExpression	1		717834	22					
ANR	717868	PrimaryExpression	1		717834	23					
ANR	717869	PrimaryExpression	1		717834	24					
ANR	717870	PrimaryExpression	1		717834	25					
ANR	717871	PrimaryExpression	1		717834	26					
ANR	717872	PrimaryExpression	1		717834	27					
ANR	717873	PrimaryExpression	1		717834	28					
ANR	717874	PrimaryExpression	1		717834	29					
ANR	717875	PrimaryExpression	1		717834	30					
ANR	717876	PrimaryExpression	1		717834	31					
ANR	717877	PrimaryExpression	12		717834	32					
ANR	717878	PrimaryExpression	4		717834	33					
ANR	717879	PrimaryExpression	7		717834	34					
ANR	717880	PrimaryExpression	4		717834	35					
ANR	717881	PrimaryExpression	4		717834	36					
ANR	717882	PrimaryExpression	4		717834	37					
ANR	717883	PrimaryExpression	4		717834	38					
ANR	717884	PrimaryExpression	4		717834	39					
ANR	717885	PrimaryExpression	4		717834	40					
ANR	717886	PrimaryExpression	5		717834	41					
ANR	717887	PrimaryExpression	5		717834	42					
ANR	717888	PrimaryExpression	5		717834	43					
ANR	717889	PrimaryExpression	5		717834	44					
ANR	717890	PrimaryExpression	5		717834	45					
ANR	717891	PrimaryExpression	5		717834	46					
ANR	717892	PrimaryExpression	5		717834	47					
ANR	717893	PrimaryExpression	6		717834	48					
ANR	717894	PrimaryExpression	6		717834	49					
ANR	717895	PrimaryExpression	6		717834	50					
ANR	717896	PrimaryExpression	6		717834	51					
ANR	717897	PrimaryExpression	6		717834	52					
ANR	717898	PrimaryExpression	6		717834	53					
ANR	717899	PrimaryExpression	6		717834	54					
ANR	717900	PrimaryExpression	6		717834	55					
ANR	717901	PrimaryExpression	6		717834	56					
ANR	717902	PrimaryExpression	6		717834	57					
ANR	717903	PrimaryExpression	5		717834	58					
ANR	717904	PrimaryExpression	5		717834	59					
ANR	717905	PrimaryExpression	5		717834	60					
ANR	717906	PrimaryExpression	5		717834	61					
ANR	717907	PrimaryExpression	5		717834	62					
ANR	717908	PrimaryExpression	5		717834	63					
ANR	717909	PrimaryExpression	5		717834	64					
ANR	717910	PrimaryExpression	6		717834	65					
ANR	717911	PrimaryExpression	6		717834	66					
ANR	717912	PrimaryExpression	6		717834	67					
ANR	717913	PrimaryExpression	6		717834	68					
ANR	717914	PrimaryExpression	7		717834	69					
ANR	717915	PrimaryExpression	6		717834	70					
ANR	717916	PrimaryExpression	6		717834	71					
ANR	717917	PrimaryExpression	6		717834	72					
ANR	717918	PrimaryExpression	6		717834	73					
ANR	717919	PrimaryExpression	6		717834	74					
ANR	717920	PrimaryExpression	6		717834	75					
ANR	717921	PrimaryExpression	6		717834	76					
ANR	717922	PrimaryExpression	6		717834	77					
ANR	717923	PrimaryExpression	6		717834	78					
ANR	717924	PrimaryExpression	6		717834	79					
ANR	717925	PrimaryExpression	6		717834	80					
ANR	717926	PrimaryExpression	6		717834	81					
ANR	717927	PrimaryExpression	6		717834	82					
ANR	717928	PrimaryExpression	6		717834	83					
ANR	717929	PrimaryExpression	6		717834	84					
ANR	717930	PrimaryExpression	6		717834	85					
ANR	717931	PrimaryExpression	6		717834	86					
ANR	717932	PrimaryExpression	6		717834	87					
ANR	717933	PrimaryExpression	6		717834	88					
ANR	717934	PrimaryExpression	6		717834	89					
ANR	717935	PrimaryExpression	6		717834	90					
ANR	717936	PrimaryExpression	5		717834	91					
ANR	717937	PrimaryExpression	6		717834	92					
ANR	717938	PrimaryExpression	5		717834	93					
ANR	717939	PrimaryExpression	5		717834	94					
ANR	717940	PrimaryExpression	5		717834	95					
ANR	717941	PrimaryExpression	5		717834	96					
ANR	717942	PrimaryExpression	6		717834	97					
ANR	717943	PrimaryExpression	6		717834	98					
ANR	717944	PrimaryExpression	6		717834	99					
ANR	717945	PrimaryExpression	6		717834	100					
ANR	717946	PrimaryExpression	7		717834	101					
ANR	717947	PrimaryExpression	6		717834	102					
ANR	717948	PrimaryExpression	6		717834	103					
ANR	717949	PrimaryExpression	6		717834	104					
ANR	717950	PrimaryExpression	6		717834	105					
ANR	717951	PrimaryExpression	6		717834	106					
ANR	717952	PrimaryExpression	6		717834	107					
ANR	717953	PrimaryExpression	6		717834	108					
ANR	717954	PrimaryExpression	6		717834	109					
ANR	717955	PrimaryExpression	6		717834	110					
ANR	717956	PrimaryExpression	6		717834	111					
ANR	717957	PrimaryExpression	6		717834	112					
ANR	717958	PrimaryExpression	6		717834	113					
ANR	717959	PrimaryExpression	6		717834	114					
ANR	717960	PrimaryExpression	6		717834	115					
ANR	717961	PrimaryExpression	6		717834	116					
ANR	717962	PrimaryExpression	6		717834	117					
ANR	717963	PrimaryExpression	6		717834	118					
ANR	717964	PrimaryExpression	6		717834	119					
ANR	717965	PrimaryExpression	6		717834	120					
ANR	717966	PrimaryExpression	6		717834	121					
ANR	717967	PrimaryExpression	6		717834	122					
ANR	717968	PrimaryExpression	5		717834	123					
ANR	717969	PrimaryExpression	5		717834	124					
ANR	717970	PrimaryExpression	5		717834	125					
ANR	717971	PrimaryExpression	5		717834	126					
ANR	717972	PrimaryExpression	1		717834	127					
ANR	717973	IfStatement	if ( i < ( int ) ( sizeof ( ByteValTable ) / sizeof ( ByteValTable [ 0 ] ) ) )		717834	2					
ANR	717974	Condition	i < ( int ) ( sizeof ( ByteValTable ) / sizeof ( ByteValTable [ 0 ] ) )	3991:6:89489:89544	717834	0	True				
ANR	717975	RelationalExpression	i < ( int ) ( sizeof ( ByteValTable ) / sizeof ( ByteValTable [ 0 ] ) )		717834	0		<			
ANR	717976	Identifier	i		717834	0					
ANR	717977	CastExpression	( int ) ( sizeof ( ByteValTable ) / sizeof ( ByteValTable [ 0 ] ) )		717834	1					
ANR	717978	CastTarget	int		717834	0					
ANR	717979	MultiplicativeExpression	sizeof ( ByteValTable ) / sizeof ( ByteValTable [ 0 ] )		717834	1		/			
ANR	717980	SizeofExpression	sizeof ( ByteValTable )		717834	0					
ANR	717981	Sizeof	sizeof		717834	0					
ANR	717982	SizeofOperand	ByteValTable		717834	1					
ANR	717983	SizeofExpression	sizeof ( ByteValTable [ 0 ] )		717834	1					
ANR	717984	Sizeof	sizeof		717834	0					
ANR	717985	ArrayIndexing	ByteValTable [ 0 ]		717834	1					
ANR	717986	Identifier	ByteValTable		717834	0					
ANR	717987	PrimaryExpression	0		717834	1					
ANR	717988	CompoundStatement		13:64:658:658	717834	1					
ANR	717989	IfStatement	if ( i == 0 && ONIGENC_MBC_MINLEN ( enc ) > 1 )		717834	0					
ANR	717990	Condition	i == 0 && ONIGENC_MBC_MINLEN ( enc ) > 1	3992:8:89557:89593	717834	0	True				
ANR	717991	AndExpression	i == 0 && ONIGENC_MBC_MINLEN ( enc ) > 1		717834	0		&&			
ANR	717992	EqualityExpression	i == 0		717834	0		==			
ANR	717993	Identifier	i		717834	0					
ANR	717994	PrimaryExpression	0		717834	1					
ANR	717995	RelationalExpression	ONIGENC_MBC_MINLEN ( enc ) > 1		717834	1		>			
ANR	717996	CallExpression	ONIGENC_MBC_MINLEN ( enc )		717834	0					
ANR	717997	Callee	ONIGENC_MBC_MINLEN		717834	0					
ANR	717998	Identifier	ONIGENC_MBC_MINLEN		717834	0					
ANR	717999	ArgumentList	enc		717834	1					
ANR	718000	Argument	enc		717834	0					
ANR	718001	Identifier	enc		717834	0					
ANR	718002	PrimaryExpression	1		717834	1					
ANR	718003	ReturnStatement	return 20 ;	3993:6:89602:89611	717834	1	True				
ANR	718004	PrimaryExpression	20		717834	0					
ANR	718005	ElseStatement	else		717834	0					
ANR	718006	ReturnStatement	return ( int ) ByteValTable [ i ] ;	3995:6:89628:89656	717834	0	True				
ANR	718007	CastExpression	( int ) ByteValTable [ i ]		717834	0					
ANR	718008	CastTarget	int		717834	0					
ANR	718009	ArrayIndexing	ByteValTable [ i ]		717834	1					
ANR	718010	Identifier	ByteValTable		717834	0					
ANR	718011	Identifier	i		717834	1					
ANR	718012	ElseStatement	else		717834	0					
ANR	718013	ReturnStatement	return 4 ;	3998:4:89673:89681	717834	0	True				
ANR	718014	PrimaryExpression	4		717834	0					
ANR	718015	ReturnType	static int		717834	1					
ANR	718016	Identifier	map_position_value		717834	2					
ANR	718017	ParameterList	"OnigEncoding enc , int i"		717834	3					
ANR	718018	Parameter	OnigEncoding enc	3978:19:88863:88878	717834	0	True				
ANR	718019	ParameterType	OnigEncoding		717834	0					
ANR	718020	Identifier	enc		717834	1					
ANR	718021	Parameter	int i	3978:37:88881:88885	717834	1	True				
ANR	718022	ParameterType	int		717834	0					
ANR	718023	Identifier	i		717834	1					
ANR	718024	CFGEntryNode	ENTRY		717834		True				
ANR	718025	CFGExitNode	EXIT		717834		True				
ANR	718026	Symbol	* ByteValTable		717834						
ANR	718027	Symbol	ByteValTable		717834						
ANR	718028	Symbol	* i		717834						
ANR	718029	Symbol	ONIGENC_MBC_MINLEN		717834						
ANR	718030	Symbol	i		717834						
ANR	718031	Symbol	enc		717834						
ANR	718032	Function	distance_value	4001:0:89708:90730							
ANR	718033	FunctionDef	distance_value (MinMaxLen * mm)		718032	0					
ANR	718034	CompoundStatement		4003:0:89749:90730	718032	0					
ANR	718035	Statement	static	4005:2:89787:89792	718032	0	True				
ANR	718036	IdentifierDeclStatement	"const short int dist_vals [ ] = { 1000 , 500 , 333 , 250 , 200 , 167 , 143 , 125 , 111 , 100 , 91 , 83 , 77 , 71 , 67 , 63 , 59 , 56 , 53 , 50 , 48 , 45 , 43 , 42 , 40 , 38 , 37 , 36 , 34 , 33 , 32 , 31 , 30 , 29 , 29 , 28 , 27 , 26 , 26 , 25 , 24 , 24 , 23 , 23 , 22 , 22 , 21 , 21 , 20 , 20 , 20 , 19 , 19 , 19 , 18 , 18 , 18 , 17 , 17 , 17 , 16 , 16 , 16 , 16 , 15 , 15 , 15 , 15 , 14 , 14 , 14 , 14 , 14 , 14 , 13 , 13 , 13 , 13 , 13 , 13 , 12 , 12 , 12 , 12 , 12 , 12 , 11 , 11 , 11 , 11 , 11 , 11 , 11 , 11 , 11 , 10 , 10 , 10 , 10 , 10 } ;"	4005:9:89794:90477	718032	1	True				
ANR	718037	IdentifierDecl	"dist_vals [ ] = { 1000 , 500 , 333 , 250 , 200 , 167 , 143 , 125 , 111 , 100 , 91 , 83 , 77 , 71 , 67 , 63 , 59 , 56 , 53 , 50 , 48 , 45 , 43 , 42 , 40 , 38 , 37 , 36 , 34 , 33 , 32 , 31 , 30 , 29 , 29 , 28 , 27 , 26 , 26 , 25 , 24 , 24 , 23 , 23 , 22 , 22 , 21 , 21 , 20 , 20 , 20 , 19 , 19 , 19 , 18 , 18 , 18 , 17 , 17 , 17 , 16 , 16 , 16 , 16 , 15 , 15 , 15 , 15 , 14 , 14 , 14 , 14 , 14 , 14 , 13 , 13 , 13 , 13 , 13 , 13 , 12 , 12 , 12 , 12 , 12 , 12 , 11 , 11 , 11 , 11 , 11 , 11 , 11 , 11 , 11 , 10 , 10 , 10 , 10 , 10 }"		718032	0					
ANR	718038	IdentifierDeclType	const short int [ ]		718032	0					
ANR	718039	Identifier	dist_vals		718032	1					
ANR	718040	AssignmentExpression	"dist_vals [ ] = { 1000 , 500 , 333 , 250 , 200 , 167 , 143 , 125 , 111 , 100 , 91 , 83 , 77 , 71 , 67 , 63 , 59 , 56 , 53 , 50 , 48 , 45 , 43 , 42 , 40 , 38 , 37 , 36 , 34 , 33 , 32 , 31 , 30 , 29 , 29 , 28 , 27 , 26 , 26 , 25 , 24 , 24 , 23 , 23 , 22 , 22 , 21 , 21 , 20 , 20 , 20 , 19 , 19 , 19 , 18 , 18 , 18 , 17 , 17 , 17 , 16 , 16 , 16 , 16 , 15 , 15 , 15 , 15 , 14 , 14 , 14 , 14 , 14 , 14 , 13 , 13 , 13 , 13 , 13 , 13 , 12 , 12 , 12 , 12 , 12 , 12 , 11 , 11 , 11 , 11 , 11 , 11 , 11 , 11 , 11 , 10 , 10 , 10 , 10 , 10 }"		718032	2		=			
ANR	718041	Identifier	dist_vals		718032	0					
ANR	718042	InitializerList	1000		718032	1					
ANR	718043	PrimaryExpression	1000		718032	0					
ANR	718044	PrimaryExpression	500		718032	1					
ANR	718045	PrimaryExpression	333		718032	2					
ANR	718046	PrimaryExpression	250		718032	3					
ANR	718047	PrimaryExpression	200		718032	4					
ANR	718048	PrimaryExpression	167		718032	5					
ANR	718049	PrimaryExpression	143		718032	6					
ANR	718050	PrimaryExpression	125		718032	7					
ANR	718051	PrimaryExpression	111		718032	8					
ANR	718052	PrimaryExpression	100		718032	9					
ANR	718053	PrimaryExpression	91		718032	10					
ANR	718054	PrimaryExpression	83		718032	11					
ANR	718055	PrimaryExpression	77		718032	12					
ANR	718056	PrimaryExpression	71		718032	13					
ANR	718057	PrimaryExpression	67		718032	14					
ANR	718058	PrimaryExpression	63		718032	15					
ANR	718059	PrimaryExpression	59		718032	16					
ANR	718060	PrimaryExpression	56		718032	17					
ANR	718061	PrimaryExpression	53		718032	18					
ANR	718062	PrimaryExpression	50		718032	19					
ANR	718063	PrimaryExpression	48		718032	20					
ANR	718064	PrimaryExpression	45		718032	21					
ANR	718065	PrimaryExpression	43		718032	22					
ANR	718066	PrimaryExpression	42		718032	23					
ANR	718067	PrimaryExpression	40		718032	24					
ANR	718068	PrimaryExpression	38		718032	25					
ANR	718069	PrimaryExpression	37		718032	26					
ANR	718070	PrimaryExpression	36		718032	27					
ANR	718071	PrimaryExpression	34		718032	28					
ANR	718072	PrimaryExpression	33		718032	29					
ANR	718073	PrimaryExpression	32		718032	30					
ANR	718074	PrimaryExpression	31		718032	31					
ANR	718075	PrimaryExpression	30		718032	32					
ANR	718076	PrimaryExpression	29		718032	33					
ANR	718077	PrimaryExpression	29		718032	34					
ANR	718078	PrimaryExpression	28		718032	35					
ANR	718079	PrimaryExpression	27		718032	36					
ANR	718080	PrimaryExpression	26		718032	37					
ANR	718081	PrimaryExpression	26		718032	38					
ANR	718082	PrimaryExpression	25		718032	39					
ANR	718083	PrimaryExpression	24		718032	40					
ANR	718084	PrimaryExpression	24		718032	41					
ANR	718085	PrimaryExpression	23		718032	42					
ANR	718086	PrimaryExpression	23		718032	43					
ANR	718087	PrimaryExpression	22		718032	44					
ANR	718088	PrimaryExpression	22		718032	45					
ANR	718089	PrimaryExpression	21		718032	46					
ANR	718090	PrimaryExpression	21		718032	47					
ANR	718091	PrimaryExpression	20		718032	48					
ANR	718092	PrimaryExpression	20		718032	49					
ANR	718093	PrimaryExpression	20		718032	50					
ANR	718094	PrimaryExpression	19		718032	51					
ANR	718095	PrimaryExpression	19		718032	52					
ANR	718096	PrimaryExpression	19		718032	53					
ANR	718097	PrimaryExpression	18		718032	54					
ANR	718098	PrimaryExpression	18		718032	55					
ANR	718099	PrimaryExpression	18		718032	56					
ANR	718100	PrimaryExpression	17		718032	57					
ANR	718101	PrimaryExpression	17		718032	58					
ANR	718102	PrimaryExpression	17		718032	59					
ANR	718103	PrimaryExpression	16		718032	60					
ANR	718104	PrimaryExpression	16		718032	61					
ANR	718105	PrimaryExpression	16		718032	62					
ANR	718106	PrimaryExpression	16		718032	63					
ANR	718107	PrimaryExpression	15		718032	64					
ANR	718108	PrimaryExpression	15		718032	65					
ANR	718109	PrimaryExpression	15		718032	66					
ANR	718110	PrimaryExpression	15		718032	67					
ANR	718111	PrimaryExpression	14		718032	68					
ANR	718112	PrimaryExpression	14		718032	69					
ANR	718113	PrimaryExpression	14		718032	70					
ANR	718114	PrimaryExpression	14		718032	71					
ANR	718115	PrimaryExpression	14		718032	72					
ANR	718116	PrimaryExpression	14		718032	73					
ANR	718117	PrimaryExpression	13		718032	74					
ANR	718118	PrimaryExpression	13		718032	75					
ANR	718119	PrimaryExpression	13		718032	76					
ANR	718120	PrimaryExpression	13		718032	77					
ANR	718121	PrimaryExpression	13		718032	78					
ANR	718122	PrimaryExpression	13		718032	79					
ANR	718123	PrimaryExpression	12		718032	80					
ANR	718124	PrimaryExpression	12		718032	81					
ANR	718125	PrimaryExpression	12		718032	82					
ANR	718126	PrimaryExpression	12		718032	83					
ANR	718127	PrimaryExpression	12		718032	84					
ANR	718128	PrimaryExpression	12		718032	85					
ANR	718129	PrimaryExpression	11		718032	86					
ANR	718130	PrimaryExpression	11		718032	87					
ANR	718131	PrimaryExpression	11		718032	88					
ANR	718132	PrimaryExpression	11		718032	89					
ANR	718133	PrimaryExpression	11		718032	90					
ANR	718134	PrimaryExpression	11		718032	91					
ANR	718135	PrimaryExpression	11		718032	92					
ANR	718136	PrimaryExpression	11		718032	93					
ANR	718137	PrimaryExpression	11		718032	94					
ANR	718138	PrimaryExpression	10		718032	95					
ANR	718139	PrimaryExpression	10		718032	96					
ANR	718140	PrimaryExpression	10		718032	97					
ANR	718141	PrimaryExpression	10		718032	98					
ANR	718142	PrimaryExpression	10		718032	99					
ANR	718143	IdentifierDeclStatement	int d ;	4018:2:90482:90487	718032	2	True				
ANR	718144	IdentifierDecl	d		718032	0					
ANR	718145	IdentifierDeclType	int		718032	0					
ANR	718146	Identifier	d		718032	1					
ANR	718147	IfStatement	if ( mm -> max == ONIG_INFINITE_DISTANCE )		718032	3					
ANR	718148	Condition	mm -> max == ONIG_INFINITE_DISTANCE	4020:6:90496:90528	718032	0	True				
ANR	718149	EqualityExpression	mm -> max == ONIG_INFINITE_DISTANCE		718032	0		==			
ANR	718150	PtrMemberAccess	mm -> max		718032	0					
ANR	718151	Identifier	mm		718032	0					
ANR	718152	Identifier	max		718032	1					
ANR	718153	Identifier	ONIG_INFINITE_DISTANCE		718032	1					
ANR	718154	ReturnStatement	return 0 ;	4020:41:90531:90539	718032	1	True				
ANR	718155	PrimaryExpression	0		718032	0					
ANR	718156	ExpressionStatement	d = mm -> max - mm -> min	4022:2:90544:90565	718032	4	True				
ANR	718157	AssignmentExpression	d = mm -> max - mm -> min		718032	0		=			
ANR	718158	Identifier	d		718032	0					
ANR	718159	AdditiveExpression	mm -> max - mm -> min		718032	1		-			
ANR	718160	PtrMemberAccess	mm -> max		718032	0					
ANR	718161	Identifier	mm		718032	0					
ANR	718162	Identifier	max		718032	1					
ANR	718163	PtrMemberAccess	mm -> min		718032	1					
ANR	718164	Identifier	mm		718032	0					
ANR	718165	Identifier	min		718032	1					
ANR	718166	IfStatement	if ( d < ( int ) ( sizeof ( dist_vals ) / sizeof ( dist_vals [ 0 ] ) ) )		718032	5					
ANR	718167	Condition	d < ( int ) ( sizeof ( dist_vals ) / sizeof ( dist_vals [ 0 ] ) )	4023:6:90573:90622	718032	0	True				
ANR	718168	RelationalExpression	d < ( int ) ( sizeof ( dist_vals ) / sizeof ( dist_vals [ 0 ] ) )		718032	0		<			
ANR	718169	Identifier	d		718032	0					
ANR	718170	CastExpression	( int ) ( sizeof ( dist_vals ) / sizeof ( dist_vals [ 0 ] ) )		718032	1					
ANR	718171	CastTarget	int		718032	0					
ANR	718172	MultiplicativeExpression	sizeof ( dist_vals ) / sizeof ( dist_vals [ 0 ] )		718032	1		/			
ANR	718173	SizeofExpression	sizeof ( dist_vals )		718032	0					
ANR	718174	Sizeof	sizeof		718032	0					
ANR	718175	SizeofOperand	dist_vals		718032	1					
ANR	718176	SizeofExpression	sizeof ( dist_vals [ 0 ] )		718032	1					
ANR	718177	Sizeof	sizeof		718032	0					
ANR	718178	ArrayIndexing	dist_vals [ 0 ]		718032	1					
ANR	718179	Identifier	dist_vals		718032	0					
ANR	718180	PrimaryExpression	0		718032	1					
ANR	718181	ReturnStatement	return ( int ) dist_vals [ d ] ;	4025:4:90682:90707	718032	1	True				
ANR	718182	CastExpression	( int ) dist_vals [ d ]		718032	0					
ANR	718183	CastTarget	int		718032	0					
ANR	718184	ArrayIndexing	dist_vals [ d ]		718032	1					
ANR	718185	Identifier	dist_vals		718032	0					
ANR	718186	Identifier	d		718032	1					
ANR	718187	ElseStatement	else		718032	0					
ANR	718188	ReturnStatement	return 1 ;	4027:4:90720:90728	718032	0	True				
ANR	718189	PrimaryExpression	1		718032	0					
ANR	718190	ReturnType	static int		718032	1					
ANR	718191	Identifier	distance_value		718032	2					
ANR	718192	ParameterList	MinMaxLen * mm		718032	3					
ANR	718193	Parameter	MinMaxLen * mm	4002:15:89734:89746	718032	0	True				
ANR	718194	ParameterType	MinMaxLen *		718032	0					
ANR	718195	Identifier	mm		718032	1					
ANR	718196	CFGEntryNode	ENTRY		718032		True				
ANR	718197	CFGExitNode	EXIT		718032		True				
ANR	718198	Symbol	mm		718032						
ANR	718199	Symbol	ONIG_INFINITE_DISTANCE		718032						
ANR	718200	Symbol	d		718032						
ANR	718201	Symbol	* mm		718032						
ANR	718202	Symbol	mm -> max		718032						
ANR	718203	Symbol	dist_vals		718032						
ANR	718204	Symbol	mm -> min		718032						
ANR	718205	Symbol	* d		718032						
ANR	718206	Symbol	* dist_vals		718032						
ANR	718207	Function	comp_distance_value	4030:0:90733:91059							
ANR	718208	FunctionDef	"comp_distance_value (MinMaxLen * d1 , MinMaxLen * d2 , int v1 , int v2)"		718207	0					
ANR	718209	CompoundStatement		4032:0:90810:91059	718207	0					
ANR	718210	IfStatement	if ( v2 <= 0 )		718207	0					
ANR	718211	Condition	v2 <= 0	4033:6:90818:90824	718207	0	True				
ANR	718212	RelationalExpression	v2 <= 0		718207	0		<=			
ANR	718213	Identifier	v2		718207	0					
ANR	718214	PrimaryExpression	0		718207	1					
ANR	718215	ReturnStatement	return - 1 ;	4033:15:90827:90836	718207	1	True				
ANR	718216	UnaryOperationExpression	- 1		718207	0					
ANR	718217	UnaryOperator	-		718207	0					
ANR	718218	PrimaryExpression	1		718207	1					
ANR	718219	IfStatement	if ( v1 <= 0 )		718207	1					
ANR	718220	Condition	v1 <= 0	4034:6:90844:90850	718207	0	True				
ANR	718221	RelationalExpression	v1 <= 0		718207	0		<=			
ANR	718222	Identifier	v1		718207	0					
ANR	718223	PrimaryExpression	0		718207	1					
ANR	718224	ReturnStatement	return 1 ;	4034:15:90853:90862	718207	1	True				
ANR	718225	PrimaryExpression	1		718207	0					
ANR	718226	ExpressionStatement	v1 *= distance_value ( d1 )	4036:2:90867:90891	718207	2	True				
ANR	718227	AssignmentExpression	v1 *= distance_value ( d1 )		718207	0		*=			
ANR	718228	Identifier	v1		718207	0					
ANR	718229	CallExpression	distance_value ( d1 )		718207	1					
ANR	718230	Callee	distance_value		718207	0					
ANR	718231	Identifier	distance_value		718207	0					
ANR	718232	ArgumentList	d1		718207	1					
ANR	718233	Argument	d1		718207	0					
ANR	718234	Identifier	d1		718207	0					
ANR	718235	ExpressionStatement	v2 *= distance_value ( d2 )	4037:2:90895:90919	718207	3	True				
ANR	718236	AssignmentExpression	v2 *= distance_value ( d2 )		718207	0		*=			
ANR	718237	Identifier	v2		718207	0					
ANR	718238	CallExpression	distance_value ( d2 )		718207	1					
ANR	718239	Callee	distance_value		718207	0					
ANR	718240	Identifier	distance_value		718207	0					
ANR	718241	ArgumentList	d2		718207	1					
ANR	718242	Argument	d2		718207	0					
ANR	718243	Identifier	d2		718207	0					
ANR	718244	IfStatement	if ( v2 > v1 )		718207	4					
ANR	718245	Condition	v2 > v1	4039:6:90928:90934	718207	0	True				
ANR	718246	RelationalExpression	v2 > v1		718207	0		>			
ANR	718247	Identifier	v2		718207	0					
ANR	718248	Identifier	v1		718207	1					
ANR	718249	ReturnStatement	return 1 ;	4039:15:90937:90946	718207	1	True				
ANR	718250	PrimaryExpression	1		718207	0					
ANR	718251	IfStatement	if ( v2 < v1 )		718207	5					
ANR	718252	Condition	v2 < v1	4040:6:90954:90960	718207	0	True				
ANR	718253	RelationalExpression	v2 < v1		718207	0		<			
ANR	718254	Identifier	v2		718207	0					
ANR	718255	Identifier	v1		718207	1					
ANR	718256	ReturnStatement	return - 1 ;	4040:15:90963:90972	718207	1	True				
ANR	718257	UnaryOperationExpression	- 1		718207	0					
ANR	718258	UnaryOperator	-		718207	0					
ANR	718259	PrimaryExpression	1		718207	1					
ANR	718260	IfStatement	if ( d2 -> min < d1 -> min )		718207	6					
ANR	718261	Condition	d2 -> min < d1 -> min	4042:6:90981:90997	718207	0	True				
ANR	718262	RelationalExpression	d2 -> min < d1 -> min		718207	0		<			
ANR	718263	PtrMemberAccess	d2 -> min		718207	0					
ANR	718264	Identifier	d2		718207	0					
ANR	718265	Identifier	min		718207	1					
ANR	718266	PtrMemberAccess	d1 -> min		718207	1					
ANR	718267	Identifier	d1		718207	0					
ANR	718268	Identifier	min		718207	1					
ANR	718269	ReturnStatement	return 1 ;	4042:25:91000:91009	718207	1	True				
ANR	718270	PrimaryExpression	1		718207	0					
ANR	718271	IfStatement	if ( d2 -> min > d1 -> min )		718207	7					
ANR	718272	Condition	d2 -> min > d1 -> min	4043:6:91017:91033	718207	0	True				
ANR	718273	RelationalExpression	d2 -> min > d1 -> min		718207	0		>			
ANR	718274	PtrMemberAccess	d2 -> min		718207	0					
ANR	718275	Identifier	d2		718207	0					
ANR	718276	Identifier	min		718207	1					
ANR	718277	PtrMemberAccess	d1 -> min		718207	1					
ANR	718278	Identifier	d1		718207	0					
ANR	718279	Identifier	min		718207	1					
ANR	718280	ReturnStatement	return - 1 ;	4043:25:91036:91045	718207	1	True				
ANR	718281	UnaryOperationExpression	- 1		718207	0					
ANR	718282	UnaryOperator	-		718207	0					
ANR	718283	PrimaryExpression	1		718207	1					
ANR	718284	ReturnStatement	return 0 ;	4044:2:91049:91057	718207	8	True				
ANR	718285	PrimaryExpression	0		718207	0					
ANR	718286	ReturnType	static int		718207	1					
ANR	718287	Identifier	comp_distance_value		718207	2					
ANR	718288	ParameterList	"MinMaxLen * d1 , MinMaxLen * d2 , int v1 , int v2"		718207	3					
ANR	718289	Parameter	MinMaxLen * d1	4031:20:90764:90776	718207	0	True				
ANR	718290	ParameterType	MinMaxLen *		718207	0					
ANR	718291	Identifier	d1		718207	1					
ANR	718292	Parameter	MinMaxLen * d2	4031:35:90779:90791	718207	1	True				
ANR	718293	ParameterType	MinMaxLen *		718207	0					
ANR	718294	Identifier	d2		718207	1					
ANR	718295	Parameter	int v1	4031:50:90794:90799	718207	2	True				
ANR	718296	ParameterType	int		718207	0					
ANR	718297	Identifier	v1		718207	1					
ANR	718298	Parameter	int v2	4031:58:90802:90807	718207	3	True				
ANR	718299	ParameterType	int		718207	0					
ANR	718300	Identifier	v2		718207	1					
ANR	718301	CFGEntryNode	ENTRY		718207		True				
ANR	718302	CFGExitNode	EXIT		718207		True				
ANR	718303	Symbol	* d1		718207						
ANR	718304	Symbol	d2 -> min		718207						
ANR	718305	Symbol	d1 -> min		718207						
ANR	718306	Symbol	* d2		718207						
ANR	718307	Symbol	v1		718207						
ANR	718308	Symbol	distance_value		718207						
ANR	718309	Symbol	v2		718207						
ANR	718310	Symbol	d1		718207						
ANR	718311	Symbol	d2		718207						
ANR	718312	Function	is_equal_mml	4047:0:91062:91173							
ANR	718313	FunctionDef	"is_equal_mml (MinMaxLen * a , MinMaxLen * b)"		718312	0					
ANR	718314	CompoundStatement		4049:0:91114:91173	718312	0					
ANR	718315	ReturnStatement	return ( a -> min == b -> min && a -> max == b -> max ) ? 1 : 0 ;	4050:2:91118:91171	718312	0	True				
ANR	718316	ConditionalExpression	( a -> min == b -> min && a -> max == b -> max ) ? 1 : 0		718312	0					
ANR	718317	Condition	a -> min == b -> min && a -> max == b -> max		718312	0					
ANR	718318	AndExpression	a -> min == b -> min && a -> max == b -> max		718312	0		&&			
ANR	718319	EqualityExpression	a -> min == b -> min		718312	0		==			
ANR	718320	PtrMemberAccess	a -> min		718312	0					
ANR	718321	Identifier	a		718312	0					
ANR	718322	Identifier	min		718312	1					
ANR	718323	PtrMemberAccess	b -> min		718312	1					
ANR	718324	Identifier	b		718312	0					
ANR	718325	Identifier	min		718312	1					
ANR	718326	EqualityExpression	a -> max == b -> max		718312	1		==			
ANR	718327	PtrMemberAccess	a -> max		718312	0					
ANR	718328	Identifier	a		718312	0					
ANR	718329	Identifier	max		718312	1					
ANR	718330	PtrMemberAccess	b -> max		718312	1					
ANR	718331	Identifier	b		718312	0					
ANR	718332	Identifier	max		718312	1					
ANR	718333	PrimaryExpression	1		718312	1					
ANR	718334	PrimaryExpression	0		718312	2					
ANR	718335	ReturnType	static int		718312	1					
ANR	718336	Identifier	is_equal_mml		718312	2					
ANR	718337	ParameterList	"MinMaxLen * a , MinMaxLen * b"		718312	3					
ANR	718338	Parameter	MinMaxLen * a	4048:13:91086:91097	718312	0	True				
ANR	718339	ParameterType	MinMaxLen *		718312	0					
ANR	718340	Identifier	a		718312	1					
ANR	718341	Parameter	MinMaxLen * b	4048:27:91100:91111	718312	1	True				
ANR	718342	ParameterType	MinMaxLen *		718312	0					
ANR	718343	Identifier	b		718312	1					
ANR	718344	CFGEntryNode	ENTRY		718312		True				
ANR	718345	CFGExitNode	EXIT		718312		True				
ANR	718346	Symbol	a		718312						
ANR	718347	Symbol	b		718312						
ANR	718348	Symbol	a -> max		718312						
ANR	718349	Symbol	* a		718312						
ANR	718350	Symbol	* b		718312						
ANR	718351	Symbol	b -> max		718312						
ANR	718352	Symbol	b -> min		718312						
ANR	718353	Symbol	a -> min		718312						
ANR	718354	Function	set_mml	4054:0:91177:91287							
ANR	718355	FunctionDef	"set_mml (MinMaxLen * mml , OnigDistance min , OnigDistance max)"		718354	0					
ANR	718356	CompoundStatement		4056:0:91249:91287	718354	0					
ANR	718357	ExpressionStatement	mml -> min = min	4057:2:91253:91267	718354	0	True				
ANR	718358	AssignmentExpression	mml -> min = min		718354	0		=			
ANR	718359	PtrMemberAccess	mml -> min		718354	0					
ANR	718360	Identifier	mml		718354	0					
ANR	718361	Identifier	min		718354	1					
ANR	718362	Identifier	min		718354	1					
ANR	718363	ExpressionStatement	mml -> max = max	4058:2:91271:91285	718354	1	True				
ANR	718364	AssignmentExpression	mml -> max = max		718354	0		=			
ANR	718365	PtrMemberAccess	mml -> max		718354	0					
ANR	718366	Identifier	mml		718354	0					
ANR	718367	Identifier	max		718354	1					
ANR	718368	Identifier	max		718354	1					
ANR	718369	ReturnType	static void		718354	1					
ANR	718370	Identifier	set_mml		718354	2					
ANR	718371	ParameterList	"MinMaxLen * mml , OnigDistance min , OnigDistance max"		718354	3					
ANR	718372	Parameter	MinMaxLen * mml	4055:8:91197:91210	718354	0	True				
ANR	718373	ParameterType	MinMaxLen *		718354	0					
ANR	718374	Identifier	mml		718354	1					
ANR	718375	Parameter	OnigDistance min	4055:24:91213:91228	718354	1	True				
ANR	718376	ParameterType	OnigDistance		718354	0					
ANR	718377	Identifier	min		718354	1					
ANR	718378	Parameter	OnigDistance max	4055:42:91231:91246	718354	2	True				
ANR	718379	ParameterType	OnigDistance		718354	0					
ANR	718380	Identifier	max		718354	1					
ANR	718381	CFGEntryNode	ENTRY		718354		True				
ANR	718382	CFGExitNode	EXIT		718354		True				
ANR	718383	Symbol	min		718354						
ANR	718384	Symbol	max		718354						
ANR	718385	Symbol	mml -> min		718354						
ANR	718386	Symbol	* mml		718354						
ANR	718387	Symbol	mml -> max		718354						
ANR	718388	Symbol	mml		718354						
ANR	718389	Function	clear_mml	4061:0:91290:91357							
ANR	718390	FunctionDef	clear_mml (MinMaxLen * mml)		718389	0					
ANR	718391	CompoundStatement		4063:0:91328:91357	718389	0					
ANR	718392	ExpressionStatement	mml -> min = mml -> max = 0	4064:2:91332:91355	718389	0	True				
ANR	718393	AssignmentExpression	mml -> min = mml -> max = 0		718389	0		=			
ANR	718394	PtrMemberAccess	mml -> min		718389	0					
ANR	718395	Identifier	mml		718389	0					
ANR	718396	Identifier	min		718389	1					
ANR	718397	AssignmentExpression	mml -> max = 0		718389	1		=			
ANR	718398	PtrMemberAccess	mml -> max		718389	0					
ANR	718399	Identifier	mml		718389	0					
ANR	718400	Identifier	max		718389	1					
ANR	718401	PrimaryExpression	0		718389	1					
ANR	718402	ReturnType	static void		718389	1					
ANR	718403	Identifier	clear_mml		718389	2					
ANR	718404	ParameterList	MinMaxLen * mml		718389	3					
ANR	718405	Parameter	MinMaxLen * mml	4062:10:91312:91325	718389	0	True				
ANR	718406	ParameterType	MinMaxLen *		718389	0					
ANR	718407	Identifier	mml		718389	1					
ANR	718408	CFGEntryNode	ENTRY		718389		True				
ANR	718409	CFGExitNode	EXIT		718389		True				
ANR	718410	Symbol	mml -> min		718389						
ANR	718411	Symbol	* mml		718389						
ANR	718412	Symbol	mml -> max		718389						
ANR	718413	Symbol	mml		718389						
ANR	718414	Function	copy_mml	4067:0:91360:91461							
ANR	718415	FunctionDef	"copy_mml (MinMaxLen * to , MinMaxLen * from)"		718414	0					
ANR	718416	CompoundStatement		4069:0:91413:91461	718414	0					
ANR	718417	ExpressionStatement	to -> min = from -> min	4070:2:91417:91436	718414	0	True				
ANR	718418	AssignmentExpression	to -> min = from -> min		718414	0		=			
ANR	718419	PtrMemberAccess	to -> min		718414	0					
ANR	718420	Identifier	to		718414	0					
ANR	718421	Identifier	min		718414	1					
ANR	718422	PtrMemberAccess	from -> min		718414	1					
ANR	718423	Identifier	from		718414	0					
ANR	718424	Identifier	min		718414	1					
ANR	718425	ExpressionStatement	to -> max = from -> max	4071:2:91440:91459	718414	1	True				
ANR	718426	AssignmentExpression	to -> max = from -> max		718414	0		=			
ANR	718427	PtrMemberAccess	to -> max		718414	0					
ANR	718428	Identifier	to		718414	0					
ANR	718429	Identifier	max		718414	1					
ANR	718430	PtrMemberAccess	from -> max		718414	1					
ANR	718431	Identifier	from		718414	0					
ANR	718432	Identifier	max		718414	1					
ANR	718433	ReturnType	static void		718414	1					
ANR	718434	Identifier	copy_mml		718414	2					
ANR	718435	ParameterList	"MinMaxLen * to , MinMaxLen * from"		718414	3					
ANR	718436	Parameter	MinMaxLen * to	4068:9:91381:91393	718414	0	True				
ANR	718437	ParameterType	MinMaxLen *		718414	0					
ANR	718438	Identifier	to		718414	1					
ANR	718439	Parameter	MinMaxLen * from	4068:24:91396:91410	718414	1	True				
ANR	718440	ParameterType	MinMaxLen *		718414	0					
ANR	718441	Identifier	from		718414	1					
ANR	718442	CFGEntryNode	ENTRY		718414		True				
ANR	718443	CFGExitNode	EXIT		718414		True				
ANR	718444	Symbol	from -> max		718414						
ANR	718445	Symbol	* to		718414						
ANR	718446	Symbol	from -> min		718414						
ANR	718447	Symbol	to -> min		718414						
ANR	718448	Symbol	from		718414						
ANR	718449	Symbol	to -> max		718414						
ANR	718450	Symbol	to		718414						
ANR	718451	Symbol	* from		718414						
ANR	718452	Function	add_mml	4074:0:91464:91610							
ANR	718453	FunctionDef	"add_mml (MinMaxLen * to , MinMaxLen * from)"		718452	0					
ANR	718454	CompoundStatement		4076:0:91516:91610	718452	0					
ANR	718455	ExpressionStatement	"to -> min = distance_add ( to -> min , from -> min )"	4077:2:91520:91562	718452	0	True				
ANR	718456	AssignmentExpression	"to -> min = distance_add ( to -> min , from -> min )"		718452	0		=			
ANR	718457	PtrMemberAccess	to -> min		718452	0					
ANR	718458	Identifier	to		718452	0					
ANR	718459	Identifier	min		718452	1					
ANR	718460	CallExpression	"distance_add ( to -> min , from -> min )"		718452	1					
ANR	718461	Callee	distance_add		718452	0					
ANR	718462	Identifier	distance_add		718452	0					
ANR	718463	ArgumentList	to -> min		718452	1					
ANR	718464	Argument	to -> min		718452	0					
ANR	718465	PtrMemberAccess	to -> min		718452	0					
ANR	718466	Identifier	to		718452	0					
ANR	718467	Identifier	min		718452	1					
ANR	718468	Argument	from -> min		718452	1					
ANR	718469	PtrMemberAccess	from -> min		718452	0					
ANR	718470	Identifier	from		718452	0					
ANR	718471	Identifier	min		718452	1					
ANR	718472	ExpressionStatement	"to -> max = distance_add ( to -> max , from -> max )"	4078:2:91566:91608	718452	1	True				
ANR	718473	AssignmentExpression	"to -> max = distance_add ( to -> max , from -> max )"		718452	0		=			
ANR	718474	PtrMemberAccess	to -> max		718452	0					
ANR	718475	Identifier	to		718452	0					
ANR	718476	Identifier	max		718452	1					
ANR	718477	CallExpression	"distance_add ( to -> max , from -> max )"		718452	1					
ANR	718478	Callee	distance_add		718452	0					
ANR	718479	Identifier	distance_add		718452	0					
ANR	718480	ArgumentList	to -> max		718452	1					
ANR	718481	Argument	to -> max		718452	0					
ANR	718482	PtrMemberAccess	to -> max		718452	0					
ANR	718483	Identifier	to		718452	0					
ANR	718484	Identifier	max		718452	1					
ANR	718485	Argument	from -> max		718452	1					
ANR	718486	PtrMemberAccess	from -> max		718452	0					
ANR	718487	Identifier	from		718452	0					
ANR	718488	Identifier	max		718452	1					
ANR	718489	ReturnType	static void		718452	1					
ANR	718490	Identifier	add_mml		718452	2					
ANR	718491	ParameterList	"MinMaxLen * to , MinMaxLen * from"		718452	3					
ANR	718492	Parameter	MinMaxLen * to	4075:8:91484:91496	718452	0	True				
ANR	718493	ParameterType	MinMaxLen *		718452	0					
ANR	718494	Identifier	to		718452	1					
ANR	718495	Parameter	MinMaxLen * from	4075:23:91499:91513	718452	1	True				
ANR	718496	ParameterType	MinMaxLen *		718452	0					
ANR	718497	Identifier	from		718452	1					
ANR	718498	CFGEntryNode	ENTRY		718452		True				
ANR	718499	CFGExitNode	EXIT		718452		True				
ANR	718500	Symbol	from -> max		718452						
ANR	718501	Symbol	from -> min		718452						
ANR	718502	Symbol	* to		718452						
ANR	718503	Symbol	to -> min		718452						
ANR	718504	Symbol	from		718452						
ANR	718505	Symbol	distance_add		718452						
ANR	718506	Symbol	to -> max		718452						
ANR	718507	Symbol	to		718452						
ANR	718508	Symbol	* from		718452						
ANR	718509	Function	add_len_mml	4082:0:91619:91758							
ANR	718510	FunctionDef	"add_len_mml (MinMaxLen * to , OnigDistance len)"		718509	0					
ANR	718511	CompoundStatement		4084:0:91676:91758	718509	0					
ANR	718512	ExpressionStatement	"to -> min = distance_add ( to -> min , len )"	4085:2:91680:91716	718509	0	True				
ANR	718513	AssignmentExpression	"to -> min = distance_add ( to -> min , len )"		718509	0		=			
ANR	718514	PtrMemberAccess	to -> min		718509	0					
ANR	718515	Identifier	to		718509	0					
ANR	718516	Identifier	min		718509	1					
ANR	718517	CallExpression	"distance_add ( to -> min , len )"		718509	1					
ANR	718518	Callee	distance_add		718509	0					
ANR	718519	Identifier	distance_add		718509	0					
ANR	718520	ArgumentList	to -> min		718509	1					
ANR	718521	Argument	to -> min		718509	0					
ANR	718522	PtrMemberAccess	to -> min		718509	0					
ANR	718523	Identifier	to		718509	0					
ANR	718524	Identifier	min		718509	1					
ANR	718525	Argument	len		718509	1					
ANR	718526	Identifier	len		718509	0					
ANR	718527	ExpressionStatement	"to -> max = distance_add ( to -> max , len )"	4086:2:91720:91756	718509	1	True				
ANR	718528	AssignmentExpression	"to -> max = distance_add ( to -> max , len )"		718509	0		=			
ANR	718529	PtrMemberAccess	to -> max		718509	0					
ANR	718530	Identifier	to		718509	0					
ANR	718531	Identifier	max		718509	1					
ANR	718532	CallExpression	"distance_add ( to -> max , len )"		718509	1					
ANR	718533	Callee	distance_add		718509	0					
ANR	718534	Identifier	distance_add		718509	0					
ANR	718535	ArgumentList	to -> max		718509	1					
ANR	718536	Argument	to -> max		718509	0					
ANR	718537	PtrMemberAccess	to -> max		718509	0					
ANR	718538	Identifier	to		718509	0					
ANR	718539	Identifier	max		718509	1					
ANR	718540	Argument	len		718509	1					
ANR	718541	Identifier	len		718509	0					
ANR	718542	ReturnType	static void		718509	1					
ANR	718543	Identifier	add_len_mml		718509	2					
ANR	718544	ParameterList	"MinMaxLen * to , OnigDistance len"		718509	3					
ANR	718545	Parameter	MinMaxLen * to	4083:12:91643:91655	718509	0	True				
ANR	718546	ParameterType	MinMaxLen *		718509	0					
ANR	718547	Identifier	to		718509	1					
ANR	718548	Parameter	OnigDistance len	4083:27:91658:91673	718509	1	True				
ANR	718549	ParameterType	OnigDistance		718509	0					
ANR	718550	Identifier	len		718509	1					
ANR	718551	CFGEntryNode	ENTRY		718509		True				
ANR	718552	CFGExitNode	EXIT		718509		True				
ANR	718553	Symbol	* to		718509						
ANR	718554	Symbol	len		718509						
ANR	718555	Symbol	to -> min		718509						
ANR	718556	Symbol	distance_add		718509						
ANR	718557	Symbol	to -> max		718509						
ANR	718558	Symbol	to		718509						
ANR	718559	Function	alt_merge_mml	4090:0:91768:91924							
ANR	718560	FunctionDef	"alt_merge_mml (MinMaxLen * to , MinMaxLen * from)"		718559	0					
ANR	718561	CompoundStatement		4092:0:91826:91924	718559	0					
ANR	718562	IfStatement	if ( to -> min > from -> min )		718559	0					
ANR	718563	Condition	to -> min > from -> min	4093:6:91834:91852	718559	0	True				
ANR	718564	RelationalExpression	to -> min > from -> min		718559	0		>			
ANR	718565	PtrMemberAccess	to -> min		718559	0					
ANR	718566	Identifier	to		718559	0					
ANR	718567	Identifier	min		718559	1					
ANR	718568	PtrMemberAccess	from -> min		718559	1					
ANR	718569	Identifier	from		718559	0					
ANR	718570	Identifier	min		718559	1					
ANR	718571	ExpressionStatement	to -> min = from -> min	4093:27:91855:91874	718559	1	True				
ANR	718572	AssignmentExpression	to -> min = from -> min		718559	0		=			
ANR	718573	PtrMemberAccess	to -> min		718559	0					
ANR	718574	Identifier	to		718559	0					
ANR	718575	Identifier	min		718559	1					
ANR	718576	PtrMemberAccess	from -> min		718559	1					
ANR	718577	Identifier	from		718559	0					
ANR	718578	Identifier	min		718559	1					
ANR	718579	IfStatement	if ( to -> max < from -> max )		718559	1					
ANR	718580	Condition	to -> max < from -> max	4094:6:91882:91900	718559	0	True				
ANR	718581	RelationalExpression	to -> max < from -> max		718559	0		<			
ANR	718582	PtrMemberAccess	to -> max		718559	0					
ANR	718583	Identifier	to		718559	0					
ANR	718584	Identifier	max		718559	1					
ANR	718585	PtrMemberAccess	from -> max		718559	1					
ANR	718586	Identifier	from		718559	0					
ANR	718587	Identifier	max		718559	1					
ANR	718588	ExpressionStatement	to -> max = from -> max	4094:27:91903:91922	718559	1	True				
ANR	718589	AssignmentExpression	to -> max = from -> max		718559	0		=			
ANR	718590	PtrMemberAccess	to -> max		718559	0					
ANR	718591	Identifier	to		718559	0					
ANR	718592	Identifier	max		718559	1					
ANR	718593	PtrMemberAccess	from -> max		718559	1					
ANR	718594	Identifier	from		718559	0					
ANR	718595	Identifier	max		718559	1					
ANR	718596	ReturnType	static void		718559	1					
ANR	718597	Identifier	alt_merge_mml		718559	2					
ANR	718598	ParameterList	"MinMaxLen * to , MinMaxLen * from"		718559	3					
ANR	718599	Parameter	MinMaxLen * to	4091:14:91794:91806	718559	0	True				
ANR	718600	ParameterType	MinMaxLen *		718559	0					
ANR	718601	Identifier	to		718559	1					
ANR	718602	Parameter	MinMaxLen * from	4091:29:91809:91823	718559	1	True				
ANR	718603	ParameterType	MinMaxLen *		718559	0					
ANR	718604	Identifier	from		718559	1					
ANR	718605	CFGEntryNode	ENTRY		718559		True				
ANR	718606	CFGExitNode	EXIT		718559		True				
ANR	718607	Symbol	from -> max		718559						
ANR	718608	Symbol	from -> min		718559						
ANR	718609	Symbol	* to		718559						
ANR	718610	Symbol	to -> min		718559						
ANR	718611	Symbol	from		718559						
ANR	718612	Symbol	to -> max		718559						
ANR	718613	Symbol	to		718559						
ANR	718614	Symbol	* from		718559						
ANR	718615	Function	copy_opt_env	4097:0:91927:91995							
ANR	718616	FunctionDef	"copy_opt_env (OptEnv * to , OptEnv * from)"		718615	0					
ANR	718617	CompoundStatement		4099:0:91978:91995	718615	0					
ANR	718618	ExpressionStatement	* to = * from	4100:2:91982:91993	718615	0	True				
ANR	718619	AssignmentExpression	* to = * from		718615	0		=			
ANR	718620	UnaryOperationExpression	* to		718615	0					
ANR	718621	UnaryOperator	*		718615	0					
ANR	718622	Identifier	to		718615	1					
ANR	718623	UnaryOperationExpression	* from		718615	1					
ANR	718624	UnaryOperator	*		718615	0					
ANR	718625	Identifier	from		718615	1					
ANR	718626	ReturnType	static void		718615	1					
ANR	718627	Identifier	copy_opt_env		718615	2					
ANR	718628	ParameterList	"OptEnv * to , OptEnv * from"		718615	3					
ANR	718629	Parameter	OptEnv * to	4098:13:91952:91961	718615	0	True				
ANR	718630	ParameterType	OptEnv *		718615	0					
ANR	718631	Identifier	to		718615	1					
ANR	718632	Parameter	OptEnv * from	4098:25:91964:91975	718615	1	True				
ANR	718633	ParameterType	OptEnv *		718615	0					
ANR	718634	Identifier	from		718615	1					
ANR	718635	CFGEntryNode	ENTRY		718615		True				
ANR	718636	CFGExitNode	EXIT		718615		True				
ANR	718637	Symbol	* to		718615						
ANR	718638	Symbol	from		718615						
ANR	718639	Symbol	to		718615						
ANR	718640	Symbol	* from		718615						
ANR	718641	Function	clear_opt_anc_info	4103:0:91998:92098							
ANR	718642	FunctionDef	clear_opt_anc_info (OptAncInfo * anc)		718641	0					
ANR	718643	CompoundStatement		4105:0:92046:92098	718641	0					
ANR	718644	ExpressionStatement	anc -> left_anchor = 0	4106:2:92050:92071	718641	0	True				
ANR	718645	AssignmentExpression	anc -> left_anchor = 0		718641	0		=			
ANR	718646	PtrMemberAccess	anc -> left_anchor		718641	0					
ANR	718647	Identifier	anc		718641	0					
ANR	718648	Identifier	left_anchor		718641	1					
ANR	718649	PrimaryExpression	0		718641	1					
ANR	718650	ExpressionStatement	anc -> right_anchor = 0	4107:2:92075:92096	718641	1	True				
ANR	718651	AssignmentExpression	anc -> right_anchor = 0		718641	0		=			
ANR	718652	PtrMemberAccess	anc -> right_anchor		718641	0					
ANR	718653	Identifier	anc		718641	0					
ANR	718654	Identifier	right_anchor		718641	1					
ANR	718655	PrimaryExpression	0		718641	1					
ANR	718656	ReturnType	static void		718641	1					
ANR	718657	Identifier	clear_opt_anc_info		718641	2					
ANR	718658	ParameterList	OptAncInfo * anc		718641	3					
ANR	718659	Parameter	OptAncInfo * anc	4104:19:92029:92043	718641	0	True				
ANR	718660	ParameterType	OptAncInfo *		718641	0					
ANR	718661	Identifier	anc		718641	1					
ANR	718662	CFGEntryNode	ENTRY		718641		True				
ANR	718663	CFGExitNode	EXIT		718641		True				
ANR	718664	Symbol	anc -> left_anchor		718641						
ANR	718665	Symbol	anc		718641						
ANR	718666	Symbol	anc -> right_anchor		718641						
ANR	718667	Symbol	* anc		718641						
ANR	718668	Function	copy_opt_anc_info	4110:0:92101:92182							
ANR	718669	FunctionDef	"copy_opt_anc_info (OptAncInfo * to , OptAncInfo * from)"		718668	0					
ANR	718670	CompoundStatement		4112:0:92165:92182	718668	0					
ANR	718671	ExpressionStatement	* to = * from	4113:2:92169:92180	718668	0	True				
ANR	718672	AssignmentExpression	* to = * from		718668	0		=			
ANR	718673	UnaryOperationExpression	* to		718668	0					
ANR	718674	UnaryOperator	*		718668	0					
ANR	718675	Identifier	to		718668	1					
ANR	718676	UnaryOperationExpression	* from		718668	1					
ANR	718677	UnaryOperator	*		718668	0					
ANR	718678	Identifier	from		718668	1					
ANR	718679	ReturnType	static void		718668	1					
ANR	718680	Identifier	copy_opt_anc_info		718668	2					
ANR	718681	ParameterList	"OptAncInfo * to , OptAncInfo * from"		718668	3					
ANR	718682	Parameter	OptAncInfo * to	4111:18:92131:92144	718668	0	True				
ANR	718683	ParameterType	OptAncInfo *		718668	0					
ANR	718684	Identifier	to		718668	1					
ANR	718685	Parameter	OptAncInfo * from	4111:34:92147:92162	718668	1	True				
ANR	718686	ParameterType	OptAncInfo *		718668	0					
ANR	718687	Identifier	from		718668	1					
ANR	718688	CFGEntryNode	ENTRY		718668		True				
ANR	718689	CFGExitNode	EXIT		718668		True				
ANR	718690	Symbol	* to		718668						
ANR	718691	Symbol	from		718668						
ANR	718692	Symbol	to		718668						
ANR	718693	Symbol	* from		718668						
ANR	718694	Function	concat_opt_anc_info	4116:0:92185:92576							
ANR	718695	FunctionDef	"concat_opt_anc_info (OptAncInfo * to , OptAncInfo * left , OptAncInfo * right , OnigDistance left_len , OnigDistance right_len)"		718694	0					
ANR	718696	CompoundStatement		4119:0:92323:92576	718694	0					
ANR	718697	ExpressionStatement	clear_opt_anc_info ( to )	4120:2:92327:92349	718694	0	True				
ANR	718698	CallExpression	clear_opt_anc_info ( to )		718694	0					
ANR	718699	Callee	clear_opt_anc_info		718694	0					
ANR	718700	Identifier	clear_opt_anc_info		718694	0					
ANR	718701	ArgumentList	to		718694	1					
ANR	718702	Argument	to		718694	0					
ANR	718703	Identifier	to		718694	0					
ANR	718704	ExpressionStatement	to -> left_anchor = left -> left_anchor	4122:2:92354:92389	718694	1	True				
ANR	718705	AssignmentExpression	to -> left_anchor = left -> left_anchor		718694	0		=			
ANR	718706	PtrMemberAccess	to -> left_anchor		718694	0					
ANR	718707	Identifier	to		718694	0					
ANR	718708	Identifier	left_anchor		718694	1					
ANR	718709	PtrMemberAccess	left -> left_anchor		718694	1					
ANR	718710	Identifier	left		718694	0					
ANR	718711	Identifier	left_anchor		718694	1					
ANR	718712	IfStatement	if ( left_len == 0 )		718694	2					
ANR	718713	Condition	left_len == 0	4123:6:92397:92409	718694	0	True				
ANR	718714	EqualityExpression	left_len == 0		718694	0		==			
ANR	718715	Identifier	left_len		718694	0					
ANR	718716	PrimaryExpression	0		718694	1					
ANR	718717	CompoundStatement		5:21:88:88	718694	1					
ANR	718718	ExpressionStatement	to -> left_anchor |= right -> left_anchor	4124:4:92418:92455	718694	0	True				
ANR	718719	AssignmentExpression	to -> left_anchor |= right -> left_anchor		718694	0		|=			
ANR	718720	PtrMemberAccess	to -> left_anchor		718694	0					
ANR	718721	Identifier	to		718694	0					
ANR	718722	Identifier	left_anchor		718694	1					
ANR	718723	PtrMemberAccess	right -> left_anchor		718694	1					
ANR	718724	Identifier	right		718694	0					
ANR	718725	Identifier	left_anchor		718694	1					
ANR	718726	ExpressionStatement	to -> right_anchor = right -> right_anchor	4127:2:92464:92502	718694	3	True				
ANR	718727	AssignmentExpression	to -> right_anchor = right -> right_anchor		718694	0		=			
ANR	718728	PtrMemberAccess	to -> right_anchor		718694	0					
ANR	718729	Identifier	to		718694	0					
ANR	718730	Identifier	right_anchor		718694	1					
ANR	718731	PtrMemberAccess	right -> right_anchor		718694	1					
ANR	718732	Identifier	right		718694	0					
ANR	718733	Identifier	right_anchor		718694	1					
ANR	718734	IfStatement	if ( right_len == 0 )		718694	4					
ANR	718735	Condition	right_len == 0	4128:6:92510:92523	718694	0	True				
ANR	718736	EqualityExpression	right_len == 0		718694	0		==			
ANR	718737	Identifier	right_len		718694	0					
ANR	718738	PrimaryExpression	0		718694	1					
ANR	718739	CompoundStatement		10:22:202:202	718694	1					
ANR	718740	ExpressionStatement	to -> right_anchor |= left -> right_anchor	4129:4:92532:92570	718694	0	True				
ANR	718741	AssignmentExpression	to -> right_anchor |= left -> right_anchor		718694	0		|=			
ANR	718742	PtrMemberAccess	to -> right_anchor		718694	0					
ANR	718743	Identifier	to		718694	0					
ANR	718744	Identifier	right_anchor		718694	1					
ANR	718745	PtrMemberAccess	left -> right_anchor		718694	1					
ANR	718746	Identifier	left		718694	0					
ANR	718747	Identifier	right_anchor		718694	1					
ANR	718748	ReturnType	static void		718694	1					
ANR	718749	Identifier	concat_opt_anc_info		718694	2					
ANR	718750	ParameterList	"OptAncInfo * to , OptAncInfo * left , OptAncInfo * right , OnigDistance left_len , OnigDistance right_len"		718694	3					
ANR	718751	Parameter	OptAncInfo * to	4117:20:92217:92230	718694	0	True				
ANR	718752	ParameterType	OptAncInfo *		718694	0					
ANR	718753	Identifier	to		718694	1					
ANR	718754	Parameter	OptAncInfo * left	4117:36:92233:92248	718694	1	True				
ANR	718755	ParameterType	OptAncInfo *		718694	0					
ANR	718756	Identifier	left		718694	1					
ANR	718757	Parameter	OptAncInfo * right	4117:54:92251:92267	718694	2	True				
ANR	718758	ParameterType	OptAncInfo *		718694	0					
ANR	718759	Identifier	right		718694	1					
ANR	718760	Parameter	OnigDistance left_len	4118:6:92276:92296	718694	3	True				
ANR	718761	ParameterType	OnigDistance		718694	0					
ANR	718762	Identifier	left_len		718694	1					
ANR	718763	Parameter	OnigDistance right_len	4118:29:92299:92320	718694	4	True				
ANR	718764	ParameterType	OnigDistance		718694	0					
ANR	718765	Identifier	right_len		718694	1					
ANR	718766	CFGEntryNode	ENTRY		718694		True				
ANR	718767	CFGExitNode	EXIT		718694		True				
ANR	718768	Symbol	* to		718694						
ANR	718769	Symbol	to -> left_anchor		718694						
ANR	718770	Symbol	to -> right_anchor		718694						
ANR	718771	Symbol	right -> right_anchor		718694						
ANR	718772	Symbol	right		718694						
ANR	718773	Symbol	right_len		718694						
ANR	718774	Symbol	right -> left_anchor		718694						
ANR	718775	Symbol	left_len		718694						
ANR	718776	Symbol	left -> left_anchor		718694						
ANR	718777	Symbol	left -> right_anchor		718694						
ANR	718778	Symbol	left		718694						
ANR	718779	Symbol	to		718694						
ANR	718780	Symbol	* left		718694						
ANR	718781	Symbol	* right		718694						
ANR	718782	Function	is_left_anchor	4133:0:92579:92798							
ANR	718783	FunctionDef	is_left_anchor (int anc)		718782	0					
ANR	718784	CompoundStatement		4135:0:92614:92798	718782	0					
ANR	718785	IfStatement	if ( anc == ANCHOR_END_BUF || anc == ANCHOR_SEMI_END_BUF || anc == ANCHOR_END_LINE || anc == ANCHOR_PREC_READ || anc == ANCHOR_PREC_READ_NOT )		718782	0					
ANR	718786	Condition	anc == ANCHOR_END_BUF || anc == ANCHOR_SEMI_END_BUF || anc == ANCHOR_END_LINE || anc == ANCHOR_PREC_READ || anc == ANCHOR_PREC_READ_NOT	4136:6:92622:92768	718782	0	True				
ANR	718787	OrExpression	anc == ANCHOR_END_BUF || anc == ANCHOR_SEMI_END_BUF || anc == ANCHOR_END_LINE || anc == ANCHOR_PREC_READ || anc == ANCHOR_PREC_READ_NOT		718782	0		||			
ANR	718788	EqualityExpression	anc == ANCHOR_END_BUF		718782	0		==			
ANR	718789	Identifier	anc		718782	0					
ANR	718790	Identifier	ANCHOR_END_BUF		718782	1					
ANR	718791	OrExpression	anc == ANCHOR_SEMI_END_BUF || anc == ANCHOR_END_LINE || anc == ANCHOR_PREC_READ || anc == ANCHOR_PREC_READ_NOT		718782	1		||			
ANR	718792	EqualityExpression	anc == ANCHOR_SEMI_END_BUF		718782	0		==			
ANR	718793	Identifier	anc		718782	0					
ANR	718794	Identifier	ANCHOR_SEMI_END_BUF		718782	1					
ANR	718795	OrExpression	anc == ANCHOR_END_LINE || anc == ANCHOR_PREC_READ || anc == ANCHOR_PREC_READ_NOT		718782	1		||			
ANR	718796	EqualityExpression	anc == ANCHOR_END_LINE		718782	0		==			
ANR	718797	Identifier	anc		718782	0					
ANR	718798	Identifier	ANCHOR_END_LINE		718782	1					
ANR	718799	OrExpression	anc == ANCHOR_PREC_READ || anc == ANCHOR_PREC_READ_NOT		718782	1		||			
ANR	718800	EqualityExpression	anc == ANCHOR_PREC_READ		718782	0		==			
ANR	718801	Identifier	anc		718782	0					
ANR	718802	Identifier	ANCHOR_PREC_READ		718782	1					
ANR	718803	EqualityExpression	anc == ANCHOR_PREC_READ_NOT		718782	1		==			
ANR	718804	Identifier	anc		718782	0					
ANR	718805	Identifier	ANCHOR_PREC_READ_NOT		718782	1					
ANR	718806	ReturnStatement	return 0 ;	4139:4:92775:92783	718782	1	True				
ANR	718807	PrimaryExpression	0		718782	0					
ANR	718808	ReturnStatement	return 1 ;	4141:2:92788:92796	718782	1	True				
ANR	718809	PrimaryExpression	1		718782	0					
ANR	718810	ReturnType	static int		718782	1					
ANR	718811	Identifier	is_left_anchor		718782	2					
ANR	718812	ParameterList	int anc		718782	3					
ANR	718813	Parameter	int anc	4134:15:92605:92611	718782	0	True				
ANR	718814	ParameterType	int		718782	0					
ANR	718815	Identifier	anc		718782	1					
ANR	718816	CFGEntryNode	ENTRY		718782		True				
ANR	718817	CFGExitNode	EXIT		718782		True				
ANR	718818	Symbol	ANCHOR_PREC_READ_NOT		718782						
ANR	718819	Symbol	ANCHOR_END_BUF		718782						
ANR	718820	Symbol	ANCHOR_SEMI_END_BUF		718782						
ANR	718821	Symbol	anc		718782						
ANR	718822	Symbol	ANCHOR_END_LINE		718782						
ANR	718823	Symbol	ANCHOR_PREC_READ		718782						
ANR	718824	Function	is_set_opt_anc_info	4144:0:92801:92956							
ANR	718825	FunctionDef	"is_set_opt_anc_info (OptAncInfo * to , int anc)"		718824	0					
ANR	718826	CompoundStatement		4146:0:92857:92956	718824	0					
ANR	718827	IfStatement	if ( ( to -> left_anchor & anc ) != 0 )		718824	0					
ANR	718828	Condition	( to -> left_anchor & anc ) != 0	4147:6:92865:92892	718824	0	True				
ANR	718829	EqualityExpression	( to -> left_anchor & anc ) != 0		718824	0		!=			
ANR	718830	BitAndExpression	to -> left_anchor & anc		718824	0		&			
ANR	718831	PtrMemberAccess	to -> left_anchor		718824	0					
ANR	718832	Identifier	to		718824	0					
ANR	718833	Identifier	left_anchor		718824	1					
ANR	718834	Identifier	anc		718824	1					
ANR	718835	PrimaryExpression	0		718824	1					
ANR	718836	ReturnStatement	return 1 ;	4147:36:92895:92903	718824	1	True				
ANR	718837	PrimaryExpression	1		718824	0					
ANR	718838	ReturnStatement	return ( ( to -> right_anchor & anc ) != 0 ? 1 : 0 ) ;	4149:2:92908:92954	718824	1	True				
ANR	718839	ConditionalExpression	( to -> right_anchor & anc ) != 0 ? 1 : 0		718824	0					
ANR	718840	Condition	( to -> right_anchor & anc ) != 0		718824	0					
ANR	718841	EqualityExpression	( to -> right_anchor & anc ) != 0		718824	0		!=			
ANR	718842	BitAndExpression	to -> right_anchor & anc		718824	0		&			
ANR	718843	PtrMemberAccess	to -> right_anchor		718824	0					
ANR	718844	Identifier	to		718824	0					
ANR	718845	Identifier	right_anchor		718824	1					
ANR	718846	Identifier	anc		718824	1					
ANR	718847	PrimaryExpression	0		718824	1					
ANR	718848	PrimaryExpression	1		718824	1					
ANR	718849	PrimaryExpression	0		718824	2					
ANR	718850	ReturnType	static int		718824	1					
ANR	718851	Identifier	is_set_opt_anc_info		718824	2					
ANR	718852	ParameterList	"OptAncInfo * to , int anc"		718824	3					
ANR	718853	Parameter	OptAncInfo * to	4145:20:92832:92845	718824	0	True				
ANR	718854	ParameterType	OptAncInfo *		718824	0					
ANR	718855	Identifier	to		718824	1					
ANR	718856	Parameter	int anc	4145:36:92848:92854	718824	1	True				
ANR	718857	ParameterType	int		718824	0					
ANR	718858	Identifier	anc		718824	1					
ANR	718859	CFGEntryNode	ENTRY		718824		True				
ANR	718860	CFGExitNode	EXIT		718824		True				
ANR	718861	Symbol	* to		718824						
ANR	718862	Symbol	to -> left_anchor		718824						
ANR	718863	Symbol	to -> right_anchor		718824						
ANR	718864	Symbol	anc		718824						
ANR	718865	Symbol	to		718824						
ANR	718866	Function	add_opt_anc_info	4152:0:92959:93106							
ANR	718867	FunctionDef	"add_opt_anc_info (OptAncInfo * to , int anc)"		718866	0					
ANR	718868	CompoundStatement		4154:0:93013:93106	718866	0					
ANR	718869	IfStatement	if ( is_left_anchor ( anc ) )		718866	0					
ANR	718870	Condition	is_left_anchor ( anc )	4155:6:93021:93039	718866	0	True				
ANR	718871	CallExpression	is_left_anchor ( anc )		718866	0					
ANR	718872	Callee	is_left_anchor		718866	0					
ANR	718873	Identifier	is_left_anchor		718866	0					
ANR	718874	ArgumentList	anc		718866	1					
ANR	718875	Argument	anc		718866	0					
ANR	718876	Identifier	anc		718866	0					
ANR	718877	ExpressionStatement	to -> left_anchor |= anc	4156:4:93046:93068	718866	1	True				
ANR	718878	AssignmentExpression	to -> left_anchor |= anc		718866	0		|=			
ANR	718879	PtrMemberAccess	to -> left_anchor		718866	0					
ANR	718880	Identifier	to		718866	0					
ANR	718881	Identifier	left_anchor		718866	1					
ANR	718882	Identifier	anc		718866	1					
ANR	718883	ElseStatement	else		718866	0					
ANR	718884	ExpressionStatement	to -> right_anchor |= anc	4158:4:93081:93104	718866	0	True				
ANR	718885	AssignmentExpression	to -> right_anchor |= anc		718866	0		|=			
ANR	718886	PtrMemberAccess	to -> right_anchor		718866	0					
ANR	718887	Identifier	to		718866	0					
ANR	718888	Identifier	right_anchor		718866	1					
ANR	718889	Identifier	anc		718866	1					
ANR	718890	ReturnType	static void		718866	1					
ANR	718891	Identifier	add_opt_anc_info		718866	2					
ANR	718892	ParameterList	"OptAncInfo * to , int anc"		718866	3					
ANR	718893	Parameter	OptAncInfo * to	4153:17:92988:93001	718866	0	True				
ANR	718894	ParameterType	OptAncInfo *		718866	0					
ANR	718895	Identifier	to		718866	1					
ANR	718896	Parameter	int anc	4153:33:93004:93010	718866	1	True				
ANR	718897	ParameterType	int		718866	0					
ANR	718898	Identifier	anc		718866	1					
ANR	718899	CFGEntryNode	ENTRY		718866		True				
ANR	718900	CFGExitNode	EXIT		718866		True				
ANR	718901	Symbol	* to		718866						
ANR	718902	Symbol	to -> left_anchor		718866						
ANR	718903	Symbol	to -> right_anchor		718866						
ANR	718904	Symbol	anc		718866						
ANR	718905	Symbol	to		718866						
ANR	718906	Symbol	is_left_anchor		718866						
ANR	718907	Function	remove_opt_anc_info	4161:0:93109:93261							
ANR	718908	FunctionDef	"remove_opt_anc_info (OptAncInfo * to , int anc)"		718907	0					
ANR	718909	CompoundStatement		4163:0:93166:93261	718907	0					
ANR	718910	IfStatement	if ( is_left_anchor ( anc ) )		718907	0					
ANR	718911	Condition	is_left_anchor ( anc )	4164:6:93174:93192	718907	0	True				
ANR	718912	CallExpression	is_left_anchor ( anc )		718907	0					
ANR	718913	Callee	is_left_anchor		718907	0					
ANR	718914	Identifier	is_left_anchor		718907	0					
ANR	718915	ArgumentList	anc		718907	1					
ANR	718916	Argument	anc		718907	0					
ANR	718917	Identifier	anc		718907	0					
ANR	718918	ExpressionStatement	to -> left_anchor &= ~anc	4165:4:93199:93222	718907	1	True				
ANR	718919	AssignmentExpression	to -> left_anchor &= ~anc		718907	0		&=			
ANR	718920	PtrMemberAccess	to -> left_anchor		718907	0					
ANR	718921	Identifier	to		718907	0					
ANR	718922	Identifier	left_anchor		718907	1					
ANR	718923	Identifier	~anc		718907	1					
ANR	718924	ElseStatement	else		718907	0					
ANR	718925	ExpressionStatement	to -> right_anchor &= ~anc	4167:4:93235:93259	718907	0	True				
ANR	718926	AssignmentExpression	to -> right_anchor &= ~anc		718907	0		&=			
ANR	718927	PtrMemberAccess	to -> right_anchor		718907	0					
ANR	718928	Identifier	to		718907	0					
ANR	718929	Identifier	right_anchor		718907	1					
ANR	718930	Identifier	~anc		718907	1					
ANR	718931	ReturnType	static void		718907	1					
ANR	718932	Identifier	remove_opt_anc_info		718907	2					
ANR	718933	ParameterList	"OptAncInfo * to , int anc"		718907	3					
ANR	718934	Parameter	OptAncInfo * to	4162:20:93141:93154	718907	0	True				
ANR	718935	ParameterType	OptAncInfo *		718907	0					
ANR	718936	Identifier	to		718907	1					
ANR	718937	Parameter	int anc	4162:36:93157:93163	718907	1	True				
ANR	718938	ParameterType	int		718907	0					
ANR	718939	Identifier	anc		718907	1					
ANR	718940	CFGEntryNode	ENTRY		718907		True				
ANR	718941	CFGExitNode	EXIT		718907		True				
ANR	718942	Symbol	~anc		718907						
ANR	718943	Symbol	* to		718907						
ANR	718944	Symbol	to -> left_anchor		718907						
ANR	718945	Symbol	to -> right_anchor		718907						
ANR	718946	Symbol	anc		718907						
ANR	718947	Symbol	to		718907						
ANR	718948	Symbol	is_left_anchor		718907						
ANR	718949	Function	alt_merge_opt_anc_info	4170:0:93264:93415							
ANR	718950	FunctionDef	"alt_merge_opt_anc_info (OptAncInfo * to , OptAncInfo * add)"		718949	0					
ANR	718951	CompoundStatement		4172:0:93332:93415	718949	0					
ANR	718952	ExpressionStatement	to -> left_anchor &= add -> left_anchor	4173:2:93336:93372	718949	0	True				
ANR	718953	AssignmentExpression	to -> left_anchor &= add -> left_anchor		718949	0		&=			
ANR	718954	PtrMemberAccess	to -> left_anchor		718949	0					
ANR	718955	Identifier	to		718949	0					
ANR	718956	Identifier	left_anchor		718949	1					
ANR	718957	PtrMemberAccess	add -> left_anchor		718949	1					
ANR	718958	Identifier	add		718949	0					
ANR	718959	Identifier	left_anchor		718949	1					
ANR	718960	ExpressionStatement	to -> right_anchor &= add -> right_anchor	4174:2:93376:93413	718949	1	True				
ANR	718961	AssignmentExpression	to -> right_anchor &= add -> right_anchor		718949	0		&=			
ANR	718962	PtrMemberAccess	to -> right_anchor		718949	0					
ANR	718963	Identifier	to		718949	0					
ANR	718964	Identifier	right_anchor		718949	1					
ANR	718965	PtrMemberAccess	add -> right_anchor		718949	1					
ANR	718966	Identifier	add		718949	0					
ANR	718967	Identifier	right_anchor		718949	1					
ANR	718968	ReturnType	static void		718949	1					
ANR	718969	Identifier	alt_merge_opt_anc_info		718949	2					
ANR	718970	ParameterList	"OptAncInfo * to , OptAncInfo * add"		718949	3					
ANR	718971	Parameter	OptAncInfo * to	4171:23:93299:93312	718949	0	True				
ANR	718972	ParameterType	OptAncInfo *		718949	0					
ANR	718973	Identifier	to		718949	1					
ANR	718974	Parameter	OptAncInfo * add	4171:39:93315:93329	718949	1	True				
ANR	718975	ParameterType	OptAncInfo *		718949	0					
ANR	718976	Identifier	add		718949	1					
ANR	718977	CFGEntryNode	ENTRY		718949		True				
ANR	718978	CFGExitNode	EXIT		718949		True				
ANR	718979	Symbol	add		718949						
ANR	718980	Symbol	add -> right_anchor		718949						
ANR	718981	Symbol	* to		718949						
ANR	718982	Symbol	* add		718949						
ANR	718983	Symbol	to -> left_anchor		718949						
ANR	718984	Symbol	to -> right_anchor		718949						
ANR	718985	Symbol	add -> left_anchor		718949						
ANR	718986	Symbol	to		718949						
ANR	718987	Function	is_full_opt_exact_info	4177:0:93418:93520							
ANR	718988	FunctionDef	is_full_opt_exact_info (OptExactInfo * ex)		718987	0					
ANR	718989	CompoundStatement		4179:0:93470:93520	718987	0					
ANR	718990	ReturnStatement	return ( ex -> len >= OPT_EXACT_MAXLEN ? 1 : 0 ) ;	4180:2:93474:93518	718987	0	True				
ANR	718991	ConditionalExpression	ex -> len >= OPT_EXACT_MAXLEN ? 1 : 0		718987	0					
ANR	718992	Condition	ex -> len >= OPT_EXACT_MAXLEN		718987	0					
ANR	718993	RelationalExpression	ex -> len >= OPT_EXACT_MAXLEN		718987	0		>=			
ANR	718994	PtrMemberAccess	ex -> len		718987	0					
ANR	718995	Identifier	ex		718987	0					
ANR	718996	Identifier	len		718987	1					
ANR	718997	Identifier	OPT_EXACT_MAXLEN		718987	1					
ANR	718998	PrimaryExpression	1		718987	1					
ANR	718999	PrimaryExpression	0		718987	2					
ANR	719000	ReturnType	static int		718987	1					
ANR	719001	Identifier	is_full_opt_exact_info		718987	2					
ANR	719002	ParameterList	OptExactInfo * ex		718987	3					
ANR	719003	Parameter	OptExactInfo * ex	4178:23:93452:93467	718987	0	True				
ANR	719004	ParameterType	OptExactInfo *		718987	0					
ANR	719005	Identifier	ex		718987	1					
ANR	719006	CFGEntryNode	ENTRY		718987		True				
ANR	719007	CFGExitNode	EXIT		718987		True				
ANR	719008	Symbol	OPT_EXACT_MAXLEN		718987						
ANR	719009	Symbol	ex		718987						
ANR	719010	Symbol	* ex		718987						
ANR	719011	Symbol	ex -> len		718987						
ANR	719012	Function	clear_opt_exact_info	4183:0:93523:93726							
ANR	719013	FunctionDef	clear_opt_exact_info (OptExactInfo * ex)		719012	0					
ANR	719014	CompoundStatement		4185:0:93574:93726	719012	0					
ANR	719015	ExpressionStatement	clear_mml ( & ex -> mmd )	4186:2:93578:93597	719012	0	True				
ANR	719016	CallExpression	clear_mml ( & ex -> mmd )		719012	0					
ANR	719017	Callee	clear_mml		719012	0					
ANR	719018	Identifier	clear_mml		719012	0					
ANR	719019	ArgumentList	& ex -> mmd		719012	1					
ANR	719020	Argument	& ex -> mmd		719012	0					
ANR	719021	UnaryOperationExpression	& ex -> mmd		719012	0					
ANR	719022	UnaryOperator	&		719012	0					
ANR	719023	PtrMemberAccess	ex -> mmd		719012	1					
ANR	719024	Identifier	ex		719012	0					
ANR	719025	Identifier	mmd		719012	1					
ANR	719026	ExpressionStatement	clear_opt_anc_info ( & ex -> anc )	4187:2:93601:93629	719012	1	True				
ANR	719027	CallExpression	clear_opt_anc_info ( & ex -> anc )		719012	0					
ANR	719028	Callee	clear_opt_anc_info		719012	0					
ANR	719029	Identifier	clear_opt_anc_info		719012	0					
ANR	719030	ArgumentList	& ex -> anc		719012	1					
ANR	719031	Argument	& ex -> anc		719012	0					
ANR	719032	UnaryOperationExpression	& ex -> anc		719012	0					
ANR	719033	UnaryOperator	&		719012	0					
ANR	719034	PtrMemberAccess	ex -> anc		719012	1					
ANR	719035	Identifier	ex		719012	0					
ANR	719036	Identifier	anc		719012	1					
ANR	719037	ExpressionStatement	ex -> reach_end = 0	4188:2:93633:93652	719012	2	True				
ANR	719038	AssignmentExpression	ex -> reach_end = 0		719012	0		=			
ANR	719039	PtrMemberAccess	ex -> reach_end		719012	0					
ANR	719040	Identifier	ex		719012	0					
ANR	719041	Identifier	reach_end		719012	1					
ANR	719042	PrimaryExpression	0		719012	1					
ANR	719043	ExpressionStatement	ex -> ignore_case = 0	4189:2:93656:93675	719012	3	True				
ANR	719044	AssignmentExpression	ex -> ignore_case = 0		719012	0		=			
ANR	719045	PtrMemberAccess	ex -> ignore_case		719012	0					
ANR	719046	Identifier	ex		719012	0					
ANR	719047	Identifier	ignore_case		719012	1					
ANR	719048	PrimaryExpression	0		719012	1					
ANR	719049	ExpressionStatement	ex -> len = 0	4190:2:93679:93698	719012	4	True				
ANR	719050	AssignmentExpression	ex -> len = 0		719012	0		=			
ANR	719051	PtrMemberAccess	ex -> len		719012	0					
ANR	719052	Identifier	ex		719012	0					
ANR	719053	Identifier	len		719012	1					
ANR	719054	PrimaryExpression	0		719012	1					
ANR	719055	ExpressionStatement	ex -> s [ 0 ] = '\\0'	4191:2:93702:93724	719012	5	True				
ANR	719056	AssignmentExpression	ex -> s [ 0 ] = '\\0'		719012	0		=			
ANR	719057	ArrayIndexing	ex -> s [ 0 ]		719012	0					
ANR	719058	PtrMemberAccess	ex -> s		719012	0					
ANR	719059	Identifier	ex		719012	0					
ANR	719060	Identifier	s		719012	1					
ANR	719061	PrimaryExpression	0		719012	1					
ANR	719062	PrimaryExpression	'\\0'		719012	1					
ANR	719063	ReturnType	static void		719012	1					
ANR	719064	Identifier	clear_opt_exact_info		719012	2					
ANR	719065	ParameterList	OptExactInfo * ex		719012	3					
ANR	719066	Parameter	OptExactInfo * ex	4184:21:93556:93571	719012	0	True				
ANR	719067	ParameterType	OptExactInfo *		719012	0					
ANR	719068	Identifier	ex		719012	1					
ANR	719069	CFGEntryNode	ENTRY		719012		True				
ANR	719070	CFGExitNode	EXIT		719012		True				
ANR	719071	Symbol	& ex -> mmd		719012						
ANR	719072	Symbol	ex -> ignore_case		719012						
ANR	719073	Symbol	& ex -> anc		719012						
ANR	719074	Symbol	ex -> s		719012						
ANR	719075	Symbol	ex		719012						
ANR	719076	Symbol	* ex -> s		719012						
ANR	719077	Symbol	* ex		719012						
ANR	719078	Symbol	ex -> reach_end		719012						
ANR	719079	Symbol	ex -> len		719012						
ANR	719080	Symbol	* * ex		719012						
ANR	719081	Function	copy_opt_exact_info	4194:0:93729:93816							
ANR	719082	FunctionDef	"copy_opt_exact_info (OptExactInfo * to , OptExactInfo * from)"		719081	0					
ANR	719083	CompoundStatement		4196:0:93799:93816	719081	0					
ANR	719084	ExpressionStatement	* to = * from	4197:2:93803:93814	719081	0	True				
ANR	719085	AssignmentExpression	* to = * from		719081	0		=			
ANR	719086	UnaryOperationExpression	* to		719081	0					
ANR	719087	UnaryOperator	*		719081	0					
ANR	719088	Identifier	to		719081	1					
ANR	719089	UnaryOperationExpression	* from		719081	1					
ANR	719090	UnaryOperator	*		719081	0					
ANR	719091	Identifier	from		719081	1					
ANR	719092	ReturnType	static void		719081	1					
ANR	719093	Identifier	copy_opt_exact_info		719081	2					
ANR	719094	ParameterList	"OptExactInfo * to , OptExactInfo * from"		719081	3					
ANR	719095	Parameter	OptExactInfo * to	4195:20:93761:93776	719081	0	True				
ANR	719096	ParameterType	OptExactInfo *		719081	0					
ANR	719097	Identifier	to		719081	1					
ANR	719098	Parameter	OptExactInfo * from	4195:38:93779:93796	719081	1	True				
ANR	719099	ParameterType	OptExactInfo *		719081	0					
ANR	719100	Identifier	from		719081	1					
ANR	719101	CFGEntryNode	ENTRY		719081		True				
ANR	719102	CFGExitNode	EXIT		719081		True				
ANR	719103	Symbol	* to		719081						
ANR	719104	Symbol	from		719081						
ANR	719105	Symbol	to		719081						
ANR	719106	Symbol	* from		719081						
ANR	719107	Function	concat_opt_exact_info	4200:0:93819:94511							
ANR	719108	FunctionDef	"concat_opt_exact_info (OptExactInfo * to , OptExactInfo * add , OnigEncoding enc)"		719107	0					
ANR	719109	CompoundStatement		4202:0:93908:94511	719107	0					
ANR	719110	IdentifierDeclStatement	"int i , j , len ;"	4203:2:93912:93925	719107	0	True				
ANR	719111	IdentifierDecl	i		719107	0					
ANR	719112	IdentifierDeclType	int		719107	0					
ANR	719113	Identifier	i		719107	1					
ANR	719114	IdentifierDecl	j		719107	1					
ANR	719115	IdentifierDeclType	int		719107	0					
ANR	719116	Identifier	j		719107	1					
ANR	719117	IdentifierDecl	len		719107	2					
ANR	719118	IdentifierDeclType	int		719107	0					
ANR	719119	Identifier	len		719107	1					
ANR	719120	IdentifierDeclStatement	"UChar * p , * end ;"	4204:2:93929:93943	719107	1	True				
ANR	719121	IdentifierDecl	* p		719107	0					
ANR	719122	IdentifierDeclType	UChar *		719107	0					
ANR	719123	Identifier	p		719107	1					
ANR	719124	IdentifierDecl	* end		719107	1					
ANR	719125	IdentifierDeclType	UChar *		719107	0					
ANR	719126	Identifier	end		719107	1					
ANR	719127	IdentifierDeclStatement	OptAncInfo tanc ;	4205:2:93947:93962	719107	2	True				
ANR	719128	IdentifierDecl	tanc		719107	0					
ANR	719129	IdentifierDeclType	OptAncInfo		719107	0					
ANR	719130	Identifier	tanc		719107	1					
ANR	719131	IfStatement	if ( ! to -> ignore_case && add -> ignore_case )		719107	3					
ANR	719132	Condition	! to -> ignore_case && add -> ignore_case	4207:6:93971:94007	719107	0	True				
ANR	719133	AndExpression	! to -> ignore_case && add -> ignore_case		719107	0		&&			
ANR	719134	UnaryOperationExpression	! to -> ignore_case		719107	0					
ANR	719135	UnaryOperator	!		719107	0					
ANR	719136	PtrMemberAccess	to -> ignore_case		719107	1					
ANR	719137	Identifier	to		719107	0					
ANR	719138	Identifier	ignore_case		719107	1					
ANR	719139	PtrMemberAccess	add -> ignore_case		719107	1					
ANR	719140	Identifier	add		719107	0					
ANR	719141	Identifier	ignore_case		719107	1					
ANR	719142	CompoundStatement		6:45:101:101	719107	1					
ANR	719143	IfStatement	if ( to -> len >= add -> len )		719107	0					
ANR	719144	Condition	to -> len >= add -> len	4208:8:94020:94038	719107	0	True				
ANR	719145	RelationalExpression	to -> len >= add -> len		719107	0		>=			
ANR	719146	PtrMemberAccess	to -> len		719107	0					
ANR	719147	Identifier	to		719107	0					
ANR	719148	Identifier	len		719107	1					
ANR	719149	PtrMemberAccess	add -> len		719107	1					
ANR	719150	Identifier	add		719107	0					
ANR	719151	Identifier	len		719107	1					
ANR	719152	ReturnStatement	return ;	4208:29:94041:94048	719107	1	True				
ANR	719153	ExpressionStatement	to -> ignore_case = 1	4210:4:94068:94087	719107	1	True				
ANR	719154	AssignmentExpression	to -> ignore_case = 1		719107	0		=			
ANR	719155	PtrMemberAccess	to -> ignore_case		719107	0					
ANR	719156	Identifier	to		719107	0					
ANR	719157	Identifier	ignore_case		719107	1					
ANR	719158	PrimaryExpression	1		719107	1					
ANR	719159	ExpressionStatement	p = add -> s	4213:2:94096:94106	719107	4	True				
ANR	719160	AssignmentExpression	p = add -> s		719107	0		=			
ANR	719161	Identifier	p		719107	0					
ANR	719162	PtrMemberAccess	add -> s		719107	1					
ANR	719163	Identifier	add		719107	0					
ANR	719164	Identifier	s		719107	1					
ANR	719165	ExpressionStatement	end = p + add -> len	4214:2:94110:94128	719107	5	True				
ANR	719166	AssignmentExpression	end = p + add -> len		719107	0		=			
ANR	719167	Identifier	end		719107	0					
ANR	719168	AdditiveExpression	p + add -> len		719107	1		+			
ANR	719169	Identifier	p		719107	0					
ANR	719170	PtrMemberAccess	add -> len		719107	1					
ANR	719171	Identifier	add		719107	0					
ANR	719172	Identifier	len		719107	1					
ANR	719173	ForStatement	for ( i = to -> len ; p < end ; )		719107	6					
ANR	719174	ForInit	i = to -> len ;	4215:7:94137:94148	719107	0	True				
ANR	719175	AssignmentExpression	i = to -> len		719107	0		=			
ANR	719176	Identifier	i		719107	0					
ANR	719177	PtrMemberAccess	to -> len		719107	1					
ANR	719178	Identifier	to		719107	0					
ANR	719179	Identifier	len		719107	1					
ANR	719180	Condition	p < end	4215:20:94150:94156	719107	1	True				
ANR	719181	RelationalExpression	p < end		719107	0		<			
ANR	719182	Identifier	p		719107	0					
ANR	719183	Identifier	end		719107	1					
ANR	719184	CompoundStatement		14:31:252:252	719107	2					
ANR	719185	ExpressionStatement	"len = enclen ( enc , p )"	4216:4:94167:94187	719107	0	True				
ANR	719186	AssignmentExpression	"len = enclen ( enc , p )"		719107	0		=			
ANR	719187	Identifier	len		719107	0					
ANR	719188	CallExpression	"enclen ( enc , p )"		719107	1					
ANR	719189	Callee	enclen		719107	0					
ANR	719190	Identifier	enclen		719107	0					
ANR	719191	ArgumentList	enc		719107	1					
ANR	719192	Argument	enc		719107	0					
ANR	719193	Identifier	enc		719107	0					
ANR	719194	Argument	p		719107	1					
ANR	719195	Identifier	p		719107	0					
ANR	719196	IfStatement	if ( i + len > OPT_EXACT_MAXLEN )		719107	1					
ANR	719197	Condition	i + len > OPT_EXACT_MAXLEN	4217:8:94197:94222	719107	0	True				
ANR	719198	RelationalExpression	i + len > OPT_EXACT_MAXLEN		719107	0		>			
ANR	719199	AdditiveExpression	i + len		719107	0		+			
ANR	719200	Identifier	i		719107	0					
ANR	719201	Identifier	len		719107	1					
ANR	719202	Identifier	OPT_EXACT_MAXLEN		719107	1					
ANR	719203	BreakStatement	break ;	4217:36:94225:94230	719107	1	True				
ANR	719204	ForStatement	for ( j = 0 ; j < len && p < end ; j ++ )		719107	2					
ANR	719205	ForInit	j = 0 ;	4218:9:94241:94246	719107	0	True				
ANR	719206	AssignmentExpression	j = 0		719107	0		=			
ANR	719207	Identifier	j		719107	0					
ANR	719208	PrimaryExpression	0		719107	1					
ANR	719209	Condition	j < len && p < end	4218:16:94248:94265	719107	1	True				
ANR	719210	AndExpression	j < len && p < end		719107	0		&&			
ANR	719211	RelationalExpression	j < len		719107	0		<			
ANR	719212	Identifier	j		719107	0					
ANR	719213	Identifier	len		719107	1					
ANR	719214	RelationalExpression	p < end		719107	1		<			
ANR	719215	Identifier	p		719107	0					
ANR	719216	Identifier	end		719107	1					
ANR	719217	PostIncDecOperationExpression	j ++	4218:36:94268:94270	719107	2	True				
ANR	719218	Identifier	j		719107	0					
ANR	719219	IncDec	++		719107	1					
ANR	719220	ExpressionStatement	to -> s [ i ++ ] = * p ++	4219:6:94279:94296	719107	3	True				
ANR	719221	AssignmentExpression	to -> s [ i ++ ] = * p ++		719107	0		=			
ANR	719222	ArrayIndexing	to -> s [ i ++ ]		719107	0					
ANR	719223	PtrMemberAccess	to -> s		719107	0					
ANR	719224	Identifier	to		719107	0					
ANR	719225	Identifier	s		719107	1					
ANR	719226	PostIncDecOperationExpression	i ++		719107	1					
ANR	719227	Identifier	i		719107	0					
ANR	719228	IncDec	++		719107	1					
ANR	719229	UnaryOperationExpression	* p ++		719107	1					
ANR	719230	UnaryOperator	*		719107	0					
ANR	719231	PostIncDecOperationExpression	p ++		719107	1					
ANR	719232	Identifier	p		719107	0					
ANR	719233	IncDec	++		719107	1					
ANR	719234	ExpressionStatement	to -> len = i	4222:2:94305:94316	719107	7	True				
ANR	719235	AssignmentExpression	to -> len = i		719107	0		=			
ANR	719236	PtrMemberAccess	to -> len		719107	0					
ANR	719237	Identifier	to		719107	0					
ANR	719238	Identifier	len		719107	1					
ANR	719239	Identifier	i		719107	1					
ANR	719240	ExpressionStatement	to -> reach_end = ( p == end ? add -> reach_end : 0 )	4223:2:94320:94367	719107	8	True				
ANR	719241	AssignmentExpression	to -> reach_end = ( p == end ? add -> reach_end : 0 )		719107	0		=			
ANR	719242	PtrMemberAccess	to -> reach_end		719107	0					
ANR	719243	Identifier	to		719107	0					
ANR	719244	Identifier	reach_end		719107	1					
ANR	719245	ConditionalExpression	p == end ? add -> reach_end : 0		719107	1					
ANR	719246	Condition	p == end		719107	0					
ANR	719247	EqualityExpression	p == end		719107	0		==			
ANR	719248	Identifier	p		719107	0					
ANR	719249	Identifier	end		719107	1					
ANR	719250	PtrMemberAccess	add -> reach_end		719107	1					
ANR	719251	Identifier	add		719107	0					
ANR	719252	Identifier	reach_end		719107	1					
ANR	719253	PrimaryExpression	0		719107	2					
ANR	719254	ExpressionStatement	"concat_opt_anc_info ( & tanc , & to -> anc , & add -> anc , 1 , 1 )"	4225:2:94372:94425	719107	9	True				
ANR	719255	CallExpression	"concat_opt_anc_info ( & tanc , & to -> anc , & add -> anc , 1 , 1 )"		719107	0					
ANR	719256	Callee	concat_opt_anc_info		719107	0					
ANR	719257	Identifier	concat_opt_anc_info		719107	0					
ANR	719258	ArgumentList	& tanc		719107	1					
ANR	719259	Argument	& tanc		719107	0					
ANR	719260	UnaryOperationExpression	& tanc		719107	0					
ANR	719261	UnaryOperator	&		719107	0					
ANR	719262	Identifier	tanc		719107	1					
ANR	719263	Argument	& to -> anc		719107	1					
ANR	719264	UnaryOperationExpression	& to -> anc		719107	0					
ANR	719265	UnaryOperator	&		719107	0					
ANR	719266	PtrMemberAccess	to -> anc		719107	1					
ANR	719267	Identifier	to		719107	0					
ANR	719268	Identifier	anc		719107	1					
ANR	719269	Argument	& add -> anc		719107	2					
ANR	719270	UnaryOperationExpression	& add -> anc		719107	0					
ANR	719271	UnaryOperator	&		719107	0					
ANR	719272	PtrMemberAccess	add -> anc		719107	1					
ANR	719273	Identifier	add		719107	0					
ANR	719274	Identifier	anc		719107	1					
ANR	719275	Argument	1		719107	3					
ANR	719276	PrimaryExpression	1		719107	0					
ANR	719277	Argument	1		719107	4					
ANR	719278	PrimaryExpression	1		719107	0					
ANR	719279	IfStatement	if ( ! to -> reach_end )		719107	10					
ANR	719280	Condition	! to -> reach_end	4226:6:94433:94447	719107	0	True				
ANR	719281	UnaryOperationExpression	! to -> reach_end		719107	0					
ANR	719282	UnaryOperator	!		719107	0					
ANR	719283	PtrMemberAccess	to -> reach_end		719107	1					
ANR	719284	Identifier	to		719107	0					
ANR	719285	Identifier	reach_end		719107	1					
ANR	719286	ExpressionStatement	tanc . right_anchor = 0	4226:23:94450:94471	719107	1	True				
ANR	719287	AssignmentExpression	tanc . right_anchor = 0		719107	0		=			
ANR	719288	MemberAccess	tanc . right_anchor		719107	0					
ANR	719289	Identifier	tanc		719107	0					
ANR	719290	Identifier	right_anchor		719107	1					
ANR	719291	PrimaryExpression	0		719107	1					
ANR	719292	ExpressionStatement	"copy_opt_anc_info ( & to -> anc , & tanc )"	4227:2:94475:94509	719107	11	True				
ANR	719293	CallExpression	"copy_opt_anc_info ( & to -> anc , & tanc )"		719107	0					
ANR	719294	Callee	copy_opt_anc_info		719107	0					
ANR	719295	Identifier	copy_opt_anc_info		719107	0					
ANR	719296	ArgumentList	& to -> anc		719107	1					
ANR	719297	Argument	& to -> anc		719107	0					
ANR	719298	UnaryOperationExpression	& to -> anc		719107	0					
ANR	719299	UnaryOperator	&		719107	0					
ANR	719300	PtrMemberAccess	to -> anc		719107	1					
ANR	719301	Identifier	to		719107	0					
ANR	719302	Identifier	anc		719107	1					
ANR	719303	Argument	& tanc		719107	1					
ANR	719304	UnaryOperationExpression	& tanc		719107	0					
ANR	719305	UnaryOperator	&		719107	0					
ANR	719306	Identifier	tanc		719107	1					
ANR	719307	ReturnType	static void		719107	1					
ANR	719308	Identifier	concat_opt_exact_info		719107	2					
ANR	719309	ParameterList	"OptExactInfo * to , OptExactInfo * add , OnigEncoding enc"		719107	3					
ANR	719310	Parameter	OptExactInfo * to	4201:22:93853:93868	719107	0	True				
ANR	719311	ParameterType	OptExactInfo *		719107	0					
ANR	719312	Identifier	to		719107	1					
ANR	719313	Parameter	OptExactInfo * add	4201:40:93871:93887	719107	1	True				
ANR	719314	ParameterType	OptExactInfo *		719107	0					
ANR	719315	Identifier	add		719107	1					
ANR	719316	Parameter	OnigEncoding enc	4201:59:93890:93905	719107	2	True				
ANR	719317	ParameterType	OnigEncoding		719107	0					
ANR	719318	Identifier	enc		719107	1					
ANR	719319	CFGEntryNode	ENTRY		719107		True				
ANR	719320	CFGExitNode	EXIT		719107		True				
ANR	719321	Symbol	OPT_EXACT_MAXLEN		719107						
ANR	719322	Symbol	to -> reach_end		719107						
ANR	719323	Symbol	& add -> anc		719107						
ANR	719324	Symbol	& tanc		719107						
ANR	719325	Symbol	add -> ignore_case		719107						
ANR	719326	Symbol	add -> reach_end		719107						
ANR	719327	Symbol	len		719107						
ANR	719328	Symbol	tanc		719107						
ANR	719329	Symbol	add -> len		719107						
ANR	719330	Symbol	end		719107						
ANR	719331	Symbol	enc		719107						
ANR	719332	Symbol	to -> len		719107						
ANR	719333	Symbol	to -> s		719107						
ANR	719334	Symbol	add -> s		719107						
ANR	719335	Symbol	add		719107						
ANR	719336	Symbol	* to		719107						
ANR	719337	Symbol	& to -> anc		719107						
ANR	719338	Symbol	* * to		719107						
ANR	719339	Symbol	* p ++		719107						
ANR	719340	Symbol	* to -> s		719107						
ANR	719341	Symbol	i		719107						
ANR	719342	Symbol	j		719107						
ANR	719343	Symbol	to -> ignore_case		719107						
ANR	719344	Symbol	enclen		719107						
ANR	719345	Symbol	tanc . right_anchor		719107						
ANR	719346	Symbol	p		719107						
ANR	719347	Symbol	* add		719107						
ANR	719348	Symbol	to		719107						
ANR	719349	Function	concat_opt_exact_info_str	4230:0:94514:94886							
ANR	719350	FunctionDef	"concat_opt_exact_info_str (OptExactInfo * to , UChar * s , UChar * end , int raw ARG_UNUSED , OnigEncoding enc)"		719349	0					
ANR	719351	CompoundStatement		4233:0:94635:94886	719349	0					
ANR	719352	IdentifierDeclStatement	"int i , j , len ;"	4234:2:94639:94652	719349	0	True				
ANR	719353	IdentifierDecl	i		719349	0					
ANR	719354	IdentifierDeclType	int		719349	0					
ANR	719355	Identifier	i		719349	1					
ANR	719356	IdentifierDecl	j		719349	1					
ANR	719357	IdentifierDeclType	int		719349	0					
ANR	719358	Identifier	j		719349	1					
ANR	719359	IdentifierDecl	len		719349	2					
ANR	719360	IdentifierDeclType	int		719349	0					
ANR	719361	Identifier	len		719349	1					
ANR	719362	IdentifierDeclStatement	UChar * p ;	4235:2:94656:94664	719349	1	True				
ANR	719363	IdentifierDecl	* p		719349	0					
ANR	719364	IdentifierDeclType	UChar *		719349	0					
ANR	719365	Identifier	p		719349	1					
ANR	719366	ForStatement	"for ( i = to -> len , p = s ; p < end && i < OPT_EXACT_MAXLEN ; )"		719349	2					
ANR	719367	ForInit	"i = to -> len , p = s ;"	4237:7:94674:94692	719349	0	True				
ANR	719368	Expression	"i = to -> len , p = s"		719349	0					
ANR	719369	AssignmentExpression	i = to -> len		719349	0		=			
ANR	719370	Identifier	i		719349	0					
ANR	719371	PtrMemberAccess	to -> len		719349	1					
ANR	719372	Identifier	to		719349	0					
ANR	719373	Identifier	len		719349	1					
ANR	719374	AssignmentExpression	p = s		719349	1		=			
ANR	719375	Identifier	p		719349	0					
ANR	719376	Identifier	s		719349	1					
ANR	719377	Condition	p < end && i < OPT_EXACT_MAXLEN	4237:27:94694:94724	719349	1	True				
ANR	719378	AndExpression	p < end && i < OPT_EXACT_MAXLEN		719349	0		&&			
ANR	719379	RelationalExpression	p < end		719349	0		<			
ANR	719380	Identifier	p		719349	0					
ANR	719381	Identifier	end		719349	1					
ANR	719382	RelationalExpression	i < OPT_EXACT_MAXLEN		719349	1		<			
ANR	719383	Identifier	i		719349	0					
ANR	719384	Identifier	OPT_EXACT_MAXLEN		719349	1					
ANR	719385	CompoundStatement		5:62:93:93	719349	2					
ANR	719386	ExpressionStatement	"len = enclen ( enc , p )"	4238:4:94735:94755	719349	0	True				
ANR	719387	AssignmentExpression	"len = enclen ( enc , p )"		719349	0		=			
ANR	719388	Identifier	len		719349	0					
ANR	719389	CallExpression	"enclen ( enc , p )"		719349	1					
ANR	719390	Callee	enclen		719349	0					
ANR	719391	Identifier	enclen		719349	0					
ANR	719392	ArgumentList	enc		719349	1					
ANR	719393	Argument	enc		719349	0					
ANR	719394	Identifier	enc		719349	0					
ANR	719395	Argument	p		719349	1					
ANR	719396	Identifier	p		719349	0					
ANR	719397	IfStatement	if ( i + len > OPT_EXACT_MAXLEN )		719349	1					
ANR	719398	Condition	i + len > OPT_EXACT_MAXLEN	4239:8:94765:94790	719349	0	True				
ANR	719399	RelationalExpression	i + len > OPT_EXACT_MAXLEN		719349	0		>			
ANR	719400	AdditiveExpression	i + len		719349	0		+			
ANR	719401	Identifier	i		719349	0					
ANR	719402	Identifier	len		719349	1					
ANR	719403	Identifier	OPT_EXACT_MAXLEN		719349	1					
ANR	719404	BreakStatement	break ;	4239:36:94793:94798	719349	1	True				
ANR	719405	ForStatement	for ( j = 0 ; j < len && p < end ; j ++ )		719349	2					
ANR	719406	ForInit	j = 0 ;	4240:9:94809:94814	719349	0	True				
ANR	719407	AssignmentExpression	j = 0		719349	0		=			
ANR	719408	Identifier	j		719349	0					
ANR	719409	PrimaryExpression	0		719349	1					
ANR	719410	Condition	j < len && p < end	4240:16:94816:94833	719349	1	True				
ANR	719411	AndExpression	j < len && p < end		719349	0		&&			
ANR	719412	RelationalExpression	j < len		719349	0		<			
ANR	719413	Identifier	j		719349	0					
ANR	719414	Identifier	len		719349	1					
ANR	719415	RelationalExpression	p < end		719349	1		<			
ANR	719416	Identifier	p		719349	0					
ANR	719417	Identifier	end		719349	1					
ANR	719418	PostIncDecOperationExpression	j ++	4240:36:94836:94838	719349	2	True				
ANR	719419	Identifier	j		719349	0					
ANR	719420	IncDec	++		719349	1					
ANR	719421	ExpressionStatement	to -> s [ i ++ ] = * p ++	4241:6:94847:94864	719349	3	True				
ANR	719422	AssignmentExpression	to -> s [ i ++ ] = * p ++		719349	0		=			
ANR	719423	ArrayIndexing	to -> s [ i ++ ]		719349	0					
ANR	719424	PtrMemberAccess	to -> s		719349	0					
ANR	719425	Identifier	to		719349	0					
ANR	719426	Identifier	s		719349	1					
ANR	719427	PostIncDecOperationExpression	i ++		719349	1					
ANR	719428	Identifier	i		719349	0					
ANR	719429	IncDec	++		719349	1					
ANR	719430	UnaryOperationExpression	* p ++		719349	1					
ANR	719431	UnaryOperator	*		719349	0					
ANR	719432	PostIncDecOperationExpression	p ++		719349	1					
ANR	719433	Identifier	p		719349	0					
ANR	719434	IncDec	++		719349	1					
ANR	719435	ExpressionStatement	to -> len = i	4244:2:94873:94884	719349	3	True				
ANR	719436	AssignmentExpression	to -> len = i		719349	0		=			
ANR	719437	PtrMemberAccess	to -> len		719349	0					
ANR	719438	Identifier	to		719349	0					
ANR	719439	Identifier	len		719349	1					
ANR	719440	Identifier	i		719349	1					
ANR	719441	ReturnType	static void		719349	1					
ANR	719442	Identifier	concat_opt_exact_info_str		719349	2					
ANR	719443	ParameterList	"OptExactInfo * to , UChar * s , UChar * end , int raw ARG_UNUSED , OnigEncoding enc"		719349	3					
ANR	719444	Parameter	OptExactInfo * to	4231:26:94552:94567	719349	0	True				
ANR	719445	ParameterType	OptExactInfo *		719349	0					
ANR	719446	Identifier	to		719349	1					
ANR	719447	Parameter	UChar * s	4231:44:94570:94577	719349	1	True				
ANR	719448	ParameterType	UChar *		719349	0					
ANR	719449	Identifier	s		719349	1					
ANR	719450	Parameter	UChar * end	4231:54:94580:94589	719349	2	True				
ANR	719451	ParameterType	UChar *		719349	0					
ANR	719452	Identifier	end		719349	1					
ANR	719453	Parameter	int raw ARG_UNUSED	4232:5:94597:94614	719349	3	True				
ANR	719454	ParameterType	int raw		719349	0					
ANR	719455	Identifier	ARG_UNUSED		719349	1					
ANR	719456	Parameter	OnigEncoding enc	4232:25:94617:94632	719349	4	True				
ANR	719457	ParameterType	OnigEncoding		719349	0					
ANR	719458	Identifier	enc		719349	1					
ANR	719459	CFGEntryNode	ENTRY		719349		True				
ANR	719460	CFGExitNode	EXIT		719349		True				
ANR	719461	Symbol	OPT_EXACT_MAXLEN		719349						
ANR	719462	Symbol	* to		719349						
ANR	719463	Symbol	* * to		719349						
ANR	719464	Symbol	* p ++		719349						
ANR	719465	Symbol	* to -> s		719349						
ANR	719466	Symbol	i		719349						
ANR	719467	Symbol	j		719349						
ANR	719468	Symbol	ARG_UNUSED		719349						
ANR	719469	Symbol	enclen		719349						
ANR	719470	Symbol	p		719349						
ANR	719471	Symbol	s		719349						
ANR	719472	Symbol	len		719349						
ANR	719473	Symbol	end		719349						
ANR	719474	Symbol	to		719349						
ANR	719475	Symbol	enc		719349						
ANR	719476	Symbol	to -> len		719349						
ANR	719477	Symbol	to -> s		719349						
ANR	719478	Function	alt_merge_opt_exact_info	4247:0:94889:95661							
ANR	719479	FunctionDef	"alt_merge_opt_exact_info (OptExactInfo * to , OptExactInfo * add , OptEnv * env)"		719478	0					
ANR	719480	CompoundStatement		4249:0:94976:95661	719478	0					
ANR	719481	IdentifierDeclStatement	"int i , j , len ;"	4250:2:94980:94993	719478	0	True				
ANR	719482	IdentifierDecl	i		719478	0					
ANR	719483	IdentifierDeclType	int		719478	0					
ANR	719484	Identifier	i		719478	1					
ANR	719485	IdentifierDecl	j		719478	1					
ANR	719486	IdentifierDeclType	int		719478	0					
ANR	719487	Identifier	j		719478	1					
ANR	719488	IdentifierDecl	len		719478	2					
ANR	719489	IdentifierDeclType	int		719478	0					
ANR	719490	Identifier	len		719478	1					
ANR	719491	IfStatement	if ( add -> len == 0 || to -> len == 0 )		719478	1					
ANR	719492	Condition	add -> len == 0 || to -> len == 0	4252:6:95002:95030	719478	0	True				
ANR	719493	OrExpression	add -> len == 0 || to -> len == 0		719478	0		||			
ANR	719494	EqualityExpression	add -> len == 0		719478	0		==			
ANR	719495	PtrMemberAccess	add -> len		719478	0					
ANR	719496	Identifier	add		719478	0					
ANR	719497	Identifier	len		719478	1					
ANR	719498	PrimaryExpression	0		719478	1					
ANR	719499	EqualityExpression	to -> len == 0		719478	1		==			
ANR	719500	PtrMemberAccess	to -> len		719478	0					
ANR	719501	Identifier	to		719478	0					
ANR	719502	Identifier	len		719478	1					
ANR	719503	PrimaryExpression	0		719478	1					
ANR	719504	CompoundStatement		4:37:56:56	719478	1					
ANR	719505	ExpressionStatement	clear_opt_exact_info ( to )	4253:4:95039:95063	719478	0	True				
ANR	719506	CallExpression	clear_opt_exact_info ( to )		719478	0					
ANR	719507	Callee	clear_opt_exact_info		719478	0					
ANR	719508	Identifier	clear_opt_exact_info		719478	0					
ANR	719509	ArgumentList	to		719478	1					
ANR	719510	Argument	to		719478	0					
ANR	719511	Identifier	to		719478	0					
ANR	719512	ReturnStatement	return ;	4254:4:95069:95076	719478	1	True				
ANR	719513	IfStatement	"if ( ! is_equal_mml ( & to -> mmd , & add -> mmd ) )"		719478	2					
ANR	719514	Condition	"! is_equal_mml ( & to -> mmd , & add -> mmd )"	4257:6:95089:95123	719478	0	True				
ANR	719515	UnaryOperationExpression	"! is_equal_mml ( & to -> mmd , & add -> mmd )"		719478	0					
ANR	719516	UnaryOperator	!		719478	0					
ANR	719517	CallExpression	"is_equal_mml ( & to -> mmd , & add -> mmd )"		719478	1					
ANR	719518	Callee	is_equal_mml		719478	0					
ANR	719519	Identifier	is_equal_mml		719478	0					
ANR	719520	ArgumentList	& to -> mmd		719478	1					
ANR	719521	Argument	& to -> mmd		719478	0					
ANR	719522	UnaryOperationExpression	& to -> mmd		719478	0					
ANR	719523	UnaryOperator	&		719478	0					
ANR	719524	PtrMemberAccess	to -> mmd		719478	1					
ANR	719525	Identifier	to		719478	0					
ANR	719526	Identifier	mmd		719478	1					
ANR	719527	Argument	& add -> mmd		719478	1					
ANR	719528	UnaryOperationExpression	& add -> mmd		719478	0					
ANR	719529	UnaryOperator	&		719478	0					
ANR	719530	PtrMemberAccess	add -> mmd		719478	1					
ANR	719531	Identifier	add		719478	0					
ANR	719532	Identifier	mmd		719478	1					
ANR	719533	CompoundStatement		9:43:149:149	719478	1					
ANR	719534	ExpressionStatement	clear_opt_exact_info ( to )	4258:4:95132:95156	719478	0	True				
ANR	719535	CallExpression	clear_opt_exact_info ( to )		719478	0					
ANR	719536	Callee	clear_opt_exact_info		719478	0					
ANR	719537	Identifier	clear_opt_exact_info		719478	0					
ANR	719538	ArgumentList	to		719478	1					
ANR	719539	Argument	to		719478	0					
ANR	719540	Identifier	to		719478	0					
ANR	719541	ReturnStatement	return ;	4259:4:95162:95169	719478	1	True				
ANR	719542	ForStatement	for ( i = 0 ; i < to -> len && i < add -> len ; )		719478	3					
ANR	719543	ForInit	i = 0 ;	4262:7:95183:95188	719478	0	True				
ANR	719544	AssignmentExpression	i = 0		719478	0		=			
ANR	719545	Identifier	i		719478	0					
ANR	719546	PrimaryExpression	0		719478	1					
ANR	719547	Condition	i < to -> len && i < add -> len	4262:14:95190:95216	719478	1	True				
ANR	719548	AndExpression	i < to -> len && i < add -> len		719478	0		&&			
ANR	719549	RelationalExpression	i < to -> len		719478	0		<			
ANR	719550	Identifier	i		719478	0					
ANR	719551	PtrMemberAccess	to -> len		719478	1					
ANR	719552	Identifier	to		719478	0					
ANR	719553	Identifier	len		719478	1					
ANR	719554	RelationalExpression	i < add -> len		719478	1		<			
ANR	719555	Identifier	i		719478	0					
ANR	719556	PtrMemberAccess	add -> len		719478	1					
ANR	719557	Identifier	add		719478	0					
ANR	719558	Identifier	len		719478	1					
ANR	719559	CompoundStatement		14:45:244:244	719478	2					
ANR	719560	IfStatement	if ( to -> s [ i ] != add -> s [ i ] )		719478	0					
ANR	719561	Condition	to -> s [ i ] != add -> s [ i ]	4263:8:95231:95251	719478	0	True				
ANR	719562	EqualityExpression	to -> s [ i ] != add -> s [ i ]		719478	0		!=			
ANR	719563	ArrayIndexing	to -> s [ i ]		719478	0					
ANR	719564	PtrMemberAccess	to -> s		719478	0					
ANR	719565	Identifier	to		719478	0					
ANR	719566	Identifier	s		719478	1					
ANR	719567	Identifier	i		719478	1					
ANR	719568	ArrayIndexing	add -> s [ i ]		719478	1					
ANR	719569	PtrMemberAccess	add -> s		719478	0					
ANR	719570	Identifier	add		719478	0					
ANR	719571	Identifier	s		719478	1					
ANR	719572	Identifier	i		719478	1					
ANR	719573	BreakStatement	break ;	4263:31:95254:95259	719478	1	True				
ANR	719574	ExpressionStatement	"len = enclen ( env -> enc , to -> s + i )"	4264:4:95265:95298	719478	1	True				
ANR	719575	AssignmentExpression	"len = enclen ( env -> enc , to -> s + i )"		719478	0		=			
ANR	719576	Identifier	len		719478	0					
ANR	719577	CallExpression	"enclen ( env -> enc , to -> s + i )"		719478	1					
ANR	719578	Callee	enclen		719478	0					
ANR	719579	Identifier	enclen		719478	0					
ANR	719580	ArgumentList	env -> enc		719478	1					
ANR	719581	Argument	env -> enc		719478	0					
ANR	719582	PtrMemberAccess	env -> enc		719478	0					
ANR	719583	Identifier	env		719478	0					
ANR	719584	Identifier	enc		719478	1					
ANR	719585	Argument	to -> s + i		719478	1					
ANR	719586	AdditiveExpression	to -> s + i		719478	0		+			
ANR	719587	PtrMemberAccess	to -> s		719478	0					
ANR	719588	Identifier	to		719478	0					
ANR	719589	Identifier	s		719478	1					
ANR	719590	Identifier	i		719478	1					
ANR	719591	ForStatement	for ( j = 1 ; j < len ; j ++ )		719478	2					
ANR	719592	ForInit	j = 1 ;	4266:9:95310:95315	719478	0	True				
ANR	719593	AssignmentExpression	j = 1		719478	0		=			
ANR	719594	Identifier	j		719478	0					
ANR	719595	PrimaryExpression	1		719478	1					
ANR	719596	Condition	j < len	4266:16:95317:95323	719478	1	True				
ANR	719597	RelationalExpression	j < len		719478	0		<			
ANR	719598	Identifier	j		719478	0					
ANR	719599	Identifier	len		719478	1					
ANR	719600	PostIncDecOperationExpression	j ++	4266:25:95326:95328	719478	2	True				
ANR	719601	Identifier	j		719478	0					
ANR	719602	IncDec	++		719478	1					
ANR	719603	CompoundStatement		18:30:354:354	719478	3					
ANR	719604	IfStatement	if ( to -> s [ i + j ] != add -> s [ i + j ] )		719478	0					
ANR	719605	Condition	to -> s [ i + j ] != add -> s [ i + j ]	4267:10:95343:95367	719478	0	True				
ANR	719606	EqualityExpression	to -> s [ i + j ] != add -> s [ i + j ]		719478	0		!=			
ANR	719607	ArrayIndexing	to -> s [ i + j ]		719478	0					
ANR	719608	PtrMemberAccess	to -> s		719478	0					
ANR	719609	Identifier	to		719478	0					
ANR	719610	Identifier	s		719478	1					
ANR	719611	AdditiveExpression	i + j		719478	1		+			
ANR	719612	Identifier	i		719478	0					
ANR	719613	Identifier	j		719478	1					
ANR	719614	ArrayIndexing	add -> s [ i + j ]		719478	1					
ANR	719615	PtrMemberAccess	add -> s		719478	0					
ANR	719616	Identifier	add		719478	0					
ANR	719617	Identifier	s		719478	1					
ANR	719618	AdditiveExpression	i + j		719478	1		+			
ANR	719619	Identifier	i		719478	0					
ANR	719620	Identifier	j		719478	1					
ANR	719621	BreakStatement	break ;	4267:37:95370:95375	719478	1	True				
ANR	719622	IfStatement	if ( j < len )		719478	3					
ANR	719623	Condition	j < len	4269:8:95391:95397	719478	0	True				
ANR	719624	RelationalExpression	j < len		719478	0		<			
ANR	719625	Identifier	j		719478	0					
ANR	719626	Identifier	len		719478	1					
ANR	719627	BreakStatement	break ;	4269:17:95400:95405	719478	1	True				
ANR	719628	ExpressionStatement	i += len	4270:4:95411:95419	719478	4	True				
ANR	719629	AssignmentExpression	i += len		719478	0		+=			
ANR	719630	Identifier	i		719478	0					
ANR	719631	Identifier	len		719478	1					
ANR	719632	IfStatement	if ( ! add -> reach_end || i < add -> len || i < to -> len )		719478	4					
ANR	719633	Condition	! add -> reach_end || i < add -> len || i < to -> len	4273:6:95432:95478	719478	0	True				
ANR	719634	OrExpression	! add -> reach_end || i < add -> len || i < to -> len		719478	0		||			
ANR	719635	UnaryOperationExpression	! add -> reach_end		719478	0					
ANR	719636	UnaryOperator	!		719478	0					
ANR	719637	PtrMemberAccess	add -> reach_end		719478	1					
ANR	719638	Identifier	add		719478	0					
ANR	719639	Identifier	reach_end		719478	1					
ANR	719640	OrExpression	i < add -> len || i < to -> len		719478	1		||			
ANR	719641	RelationalExpression	i < add -> len		719478	0		<			
ANR	719642	Identifier	i		719478	0					
ANR	719643	PtrMemberAccess	add -> len		719478	1					
ANR	719644	Identifier	add		719478	0					
ANR	719645	Identifier	len		719478	1					
ANR	719646	RelationalExpression	i < to -> len		719478	1		<			
ANR	719647	Identifier	i		719478	0					
ANR	719648	PtrMemberAccess	to -> len		719478	1					
ANR	719649	Identifier	to		719478	0					
ANR	719650	Identifier	len		719478	1					
ANR	719651	CompoundStatement		25:55:504:504	719478	1					
ANR	719652	ExpressionStatement	to -> reach_end = 0	4274:4:95487:95504	719478	0	True				
ANR	719653	AssignmentExpression	to -> reach_end = 0		719478	0		=			
ANR	719654	PtrMemberAccess	to -> reach_end		719478	0					
ANR	719655	Identifier	to		719478	0					
ANR	719656	Identifier	reach_end		719478	1					
ANR	719657	PrimaryExpression	0		719478	1					
ANR	719658	ExpressionStatement	to -> len = i	4276:2:95512:95523	719478	5	True				
ANR	719659	AssignmentExpression	to -> len = i		719478	0		=			
ANR	719660	PtrMemberAccess	to -> len		719478	0					
ANR	719661	Identifier	to		719478	0					
ANR	719662	Identifier	len		719478	1					
ANR	719663	Identifier	i		719478	1					
ANR	719664	ExpressionStatement	to -> ignore_case |= add -> ignore_case	4277:2:95527:95562	719478	6	True				
ANR	719665	AssignmentExpression	to -> ignore_case |= add -> ignore_case		719478	0		|=			
ANR	719666	PtrMemberAccess	to -> ignore_case		719478	0					
ANR	719667	Identifier	to		719478	0					
ANR	719668	Identifier	ignore_case		719478	1					
ANR	719669	PtrMemberAccess	add -> ignore_case		719478	1					
ANR	719670	Identifier	add		719478	0					
ANR	719671	Identifier	ignore_case		719478	1					
ANR	719672	ExpressionStatement	"alt_merge_opt_anc_info ( & to -> anc , & add -> anc )"	4279:2:95567:95610	719478	7	True				
ANR	719673	CallExpression	"alt_merge_opt_anc_info ( & to -> anc , & add -> anc )"		719478	0					
ANR	719674	Callee	alt_merge_opt_anc_info		719478	0					
ANR	719675	Identifier	alt_merge_opt_anc_info		719478	0					
ANR	719676	ArgumentList	& to -> anc		719478	1					
ANR	719677	Argument	& to -> anc		719478	0					
ANR	719678	UnaryOperationExpression	& to -> anc		719478	0					
ANR	719679	UnaryOperator	&		719478	0					
ANR	719680	PtrMemberAccess	to -> anc		719478	1					
ANR	719681	Identifier	to		719478	0					
ANR	719682	Identifier	anc		719478	1					
ANR	719683	Argument	& add -> anc		719478	1					
ANR	719684	UnaryOperationExpression	& add -> anc		719478	0					
ANR	719685	UnaryOperator	&		719478	0					
ANR	719686	PtrMemberAccess	add -> anc		719478	1					
ANR	719687	Identifier	add		719478	0					
ANR	719688	Identifier	anc		719478	1					
ANR	719689	IfStatement	if ( ! to -> reach_end )		719478	8					
ANR	719690	Condition	! to -> reach_end	4280:6:95618:95632	719478	0	True				
ANR	719691	UnaryOperationExpression	! to -> reach_end		719478	0					
ANR	719692	UnaryOperator	!		719478	0					
ANR	719693	PtrMemberAccess	to -> reach_end		719478	1					
ANR	719694	Identifier	to		719478	0					
ANR	719695	Identifier	reach_end		719478	1					
ANR	719696	ExpressionStatement	to -> anc . right_anchor = 0	4280:23:95635:95659	719478	1	True				
ANR	719697	AssignmentExpression	to -> anc . right_anchor = 0		719478	0		=			
ANR	719698	MemberAccess	to -> anc . right_anchor		719478	0					
ANR	719699	PtrMemberAccess	to -> anc		719478	0					
ANR	719700	Identifier	to		719478	0					
ANR	719701	Identifier	anc		719478	1					
ANR	719702	Identifier	right_anchor		719478	1					
ANR	719703	PrimaryExpression	0		719478	1					
ANR	719704	ReturnType	static void		719478	1					
ANR	719705	Identifier	alt_merge_opt_exact_info		719478	2					
ANR	719706	ParameterList	"OptExactInfo * to , OptExactInfo * add , OptEnv * env"		719478	3					
ANR	719707	Parameter	OptExactInfo * to	4248:25:94926:94941	719478	0	True				
ANR	719708	ParameterType	OptExactInfo *		719478	0					
ANR	719709	Identifier	to		719478	1					
ANR	719710	Parameter	OptExactInfo * add	4248:43:94944:94960	719478	1	True				
ANR	719711	ParameterType	OptExactInfo *		719478	0					
ANR	719712	Identifier	add		719478	1					
ANR	719713	Parameter	OptEnv * env	4248:62:94963:94973	719478	2	True				
ANR	719714	ParameterType	OptEnv *		719478	0					
ANR	719715	Identifier	env		719478	1					
ANR	719716	CFGEntryNode	ENTRY		719478		True				
ANR	719717	CFGExitNode	EXIT		719478		True				
ANR	719718	Symbol	to -> reach_end		719478						
ANR	719719	Symbol	* add -> s		719478						
ANR	719720	Symbol	to -> anc		719478						
ANR	719721	Symbol	& add -> anc		719478						
ANR	719722	Symbol	env -> enc		719478						
ANR	719723	Symbol	add -> ignore_case		719478						
ANR	719724	Symbol	add -> reach_end		719478						
ANR	719725	Symbol	len		719478						
ANR	719726	Symbol	add -> len		719478						
ANR	719727	Symbol	to -> len		719478						
ANR	719728	Symbol	to -> s		719478						
ANR	719729	Symbol	add -> s		719478						
ANR	719730	Symbol	add		719478						
ANR	719731	Symbol	* to		719478						
ANR	719732	Symbol	& to -> anc		719478						
ANR	719733	Symbol	* * to		719478						
ANR	719734	Symbol	* to -> s		719478						
ANR	719735	Symbol	* env		719478						
ANR	719736	Symbol	i		719478						
ANR	719737	Symbol	j		719478						
ANR	719738	Symbol	& add -> mmd		719478						
ANR	719739	Symbol	env		719478						
ANR	719740	Symbol	enclen		719478						
ANR	719741	Symbol	to -> ignore_case		719478						
ANR	719742	Symbol	& to -> mmd		719478						
ANR	719743	Symbol	is_equal_mml		719478						
ANR	719744	Symbol	* i		719478						
ANR	719745	Symbol	* add		719478						
ANR	719746	Symbol	* j		719478						
ANR	719747	Symbol	* * add		719478						
ANR	719748	Symbol	to		719478						
ANR	719749	Symbol	to -> anc . right_anchor		719478						
ANR	719750	Function	select_opt_exact_info	4283:0:95664:96331							
ANR	719751	FunctionDef	"select_opt_exact_info (OnigEncoding enc , OptExactInfo * now , OptExactInfo * alt)"		719750	0					
ANR	719752	CompoundStatement		4285:0:95754:96331	719750	0					
ANR	719753	IdentifierDeclStatement	"int v1 , v2 ;"	4286:2:95758:95768	719750	0	True				
ANR	719754	IdentifierDecl	v1		719750	0					
ANR	719755	IdentifierDeclType	int		719750	0					
ANR	719756	Identifier	v1		719750	1					
ANR	719757	IdentifierDecl	v2		719750	1					
ANR	719758	IdentifierDeclType	int		719750	0					
ANR	719759	Identifier	v2		719750	1					
ANR	719760	ExpressionStatement	v1 = now -> len	4288:2:95773:95786	719750	1	True				
ANR	719761	AssignmentExpression	v1 = now -> len		719750	0		=			
ANR	719762	Identifier	v1		719750	0					
ANR	719763	PtrMemberAccess	now -> len		719750	1					
ANR	719764	Identifier	now		719750	0					
ANR	719765	Identifier	len		719750	1					
ANR	719766	ExpressionStatement	v2 = alt -> len	4289:2:95790:95803	719750	2	True				
ANR	719767	AssignmentExpression	v2 = alt -> len		719750	0		=			
ANR	719768	Identifier	v2		719750	0					
ANR	719769	PtrMemberAccess	alt -> len		719750	1					
ANR	719770	Identifier	alt		719750	0					
ANR	719771	Identifier	len		719750	1					
ANR	719772	IfStatement	if ( v2 == 0 )		719750	3					
ANR	719773	Condition	v2 == 0	4291:6:95812:95818	719750	0	True				
ANR	719774	EqualityExpression	v2 == 0		719750	0		==			
ANR	719775	Identifier	v2		719750	0					
ANR	719776	PrimaryExpression	0		719750	1					
ANR	719777	CompoundStatement		7:15:66:66	719750	1					
ANR	719778	ReturnStatement	return ;	4292:4:95827:95834	719750	0	True				
ANR	719779	ElseStatement	else		719750	0					
ANR	719780	IfStatement	if ( v1 == 0 )		719750	0					
ANR	719781	Condition	v1 == 0	4294:11:95851:95857	719750	0	True				
ANR	719782	EqualityExpression	v1 == 0		719750	0		==			
ANR	719783	Identifier	v1		719750	0					
ANR	719784	PrimaryExpression	0		719750	1					
ANR	719785	CompoundStatement		10:20:105:105	719750	1					
ANR	719786	ExpressionStatement	"copy_opt_exact_info ( now , alt )"	4295:4:95866:95895	719750	0	True				
ANR	719787	CallExpression	"copy_opt_exact_info ( now , alt )"		719750	0					
ANR	719788	Callee	copy_opt_exact_info		719750	0					
ANR	719789	Identifier	copy_opt_exact_info		719750	0					
ANR	719790	ArgumentList	now		719750	1					
ANR	719791	Argument	now		719750	0					
ANR	719792	Identifier	now		719750	0					
ANR	719793	Argument	alt		719750	1					
ANR	719794	Identifier	alt		719750	0					
ANR	719795	ReturnStatement	return ;	4296:4:95901:95908	719750	1	True				
ANR	719796	ElseStatement	else		719750	0					
ANR	719797	IfStatement	if ( v1 <= 2 && v2 <= 2 )		719750	0					
ANR	719798	Condition	v1 <= 2 && v2 <= 2	4298:11:95925:95942	719750	0	True				
ANR	719799	AndExpression	v1 <= 2 && v2 <= 2		719750	0		&&			
ANR	719800	RelationalExpression	v1 <= 2		719750	0		<=			
ANR	719801	Identifier	v1		719750	0					
ANR	719802	PrimaryExpression	2		719750	1					
ANR	719803	RelationalExpression	v2 <= 2		719750	1		<=			
ANR	719804	Identifier	v2		719750	0					
ANR	719805	PrimaryExpression	2		719750	1					
ANR	719806	CompoundStatement		14:31:190:190	719750	1					
ANR	719807	ExpressionStatement	"v2 = map_position_value ( enc , now -> s [ 0 ] )"	4300:4:96004:96043	719750	0	True				
ANR	719808	AssignmentExpression	"v2 = map_position_value ( enc , now -> s [ 0 ] )"		719750	0		=			
ANR	719809	Identifier	v2		719750	0					
ANR	719810	CallExpression	"map_position_value ( enc , now -> s [ 0 ] )"		719750	1					
ANR	719811	Callee	map_position_value		719750	0					
ANR	719812	Identifier	map_position_value		719750	0					
ANR	719813	ArgumentList	enc		719750	1					
ANR	719814	Argument	enc		719750	0					
ANR	719815	Identifier	enc		719750	0					
ANR	719816	Argument	now -> s [ 0 ]		719750	1					
ANR	719817	ArrayIndexing	now -> s [ 0 ]		719750	0					
ANR	719818	PtrMemberAccess	now -> s		719750	0					
ANR	719819	Identifier	now		719750	0					
ANR	719820	Identifier	s		719750	1					
ANR	719821	PrimaryExpression	0		719750	1					
ANR	719822	ExpressionStatement	"v1 = map_position_value ( enc , alt -> s [ 0 ] )"	4301:4:96049:96088	719750	1	True				
ANR	719823	AssignmentExpression	"v1 = map_position_value ( enc , alt -> s [ 0 ] )"		719750	0		=			
ANR	719824	Identifier	v1		719750	0					
ANR	719825	CallExpression	"map_position_value ( enc , alt -> s [ 0 ] )"		719750	1					
ANR	719826	Callee	map_position_value		719750	0					
ANR	719827	Identifier	map_position_value		719750	0					
ANR	719828	ArgumentList	enc		719750	1					
ANR	719829	Argument	enc		719750	0					
ANR	719830	Identifier	enc		719750	0					
ANR	719831	Argument	alt -> s [ 0 ]		719750	1					
ANR	719832	ArrayIndexing	alt -> s [ 0 ]		719750	0					
ANR	719833	PtrMemberAccess	alt -> s		719750	0					
ANR	719834	Identifier	alt		719750	0					
ANR	719835	Identifier	s		719750	1					
ANR	719836	PrimaryExpression	0		719750	1					
ANR	719837	IfStatement	if ( now -> len > 1 )		719750	2					
ANR	719838	Condition	now -> len > 1	4303:8:96099:96110	719750	0	True				
ANR	719839	RelationalExpression	now -> len > 1		719750	0		>			
ANR	719840	PtrMemberAccess	now -> len		719750	0					
ANR	719841	Identifier	now		719750	0					
ANR	719842	Identifier	len		719750	1					
ANR	719843	PrimaryExpression	1		719750	1					
ANR	719844	ExpressionStatement	v1 += 5	4303:22:96113:96120	719750	1	True				
ANR	719845	AssignmentExpression	v1 += 5		719750	0		+=			
ANR	719846	Identifier	v1		719750	0					
ANR	719847	PrimaryExpression	5		719750	1					
ANR	719848	IfStatement	if ( alt -> len > 1 )		719750	3					
ANR	719849	Condition	alt -> len > 1	4304:8:96130:96141	719750	0	True				
ANR	719850	RelationalExpression	alt -> len > 1		719750	0		>			
ANR	719851	PtrMemberAccess	alt -> len		719750	0					
ANR	719852	Identifier	alt		719750	0					
ANR	719853	Identifier	len		719750	1					
ANR	719854	PrimaryExpression	1		719750	1					
ANR	719855	ExpressionStatement	v2 += 5	4304:22:96144:96151	719750	1	True				
ANR	719856	AssignmentExpression	v2 += 5		719750	0		+=			
ANR	719857	Identifier	v2		719750	0					
ANR	719858	PrimaryExpression	5		719750	1					
ANR	719859	IfStatement	if ( now -> ignore_case == 0 )		719750	4					
ANR	719860	Condition	now -> ignore_case == 0	4307:6:96164:96184	719750	0	True				
ANR	719861	EqualityExpression	now -> ignore_case == 0		719750	0		==			
ANR	719862	PtrMemberAccess	now -> ignore_case		719750	0					
ANR	719863	Identifier	now		719750	0					
ANR	719864	Identifier	ignore_case		719750	1					
ANR	719865	PrimaryExpression	0		719750	1					
ANR	719866	ExpressionStatement	v1 *= 2	4307:29:96187:96194	719750	1	True				
ANR	719867	AssignmentExpression	v1 *= 2		719750	0		*=			
ANR	719868	Identifier	v1		719750	0					
ANR	719869	PrimaryExpression	2		719750	1					
ANR	719870	IfStatement	if ( alt -> ignore_case == 0 )		719750	5					
ANR	719871	Condition	alt -> ignore_case == 0	4308:6:96202:96222	719750	0	True				
ANR	719872	EqualityExpression	alt -> ignore_case == 0		719750	0		==			
ANR	719873	PtrMemberAccess	alt -> ignore_case		719750	0					
ANR	719874	Identifier	alt		719750	0					
ANR	719875	Identifier	ignore_case		719750	1					
ANR	719876	PrimaryExpression	0		719750	1					
ANR	719877	ExpressionStatement	v2 *= 2	4308:29:96225:96232	719750	1	True				
ANR	719878	AssignmentExpression	v2 *= 2		719750	0		*=			
ANR	719879	Identifier	v2		719750	0					
ANR	719880	PrimaryExpression	2		719750	1					
ANR	719881	IfStatement	"if ( comp_distance_value ( & now -> mmd , & alt -> mmd , v1 , v2 ) > 0 )"		719750	6					
ANR	719882	Condition	"comp_distance_value ( & now -> mmd , & alt -> mmd , v1 , v2 ) > 0"	4310:6:96241:96293	719750	0	True				
ANR	719883	RelationalExpression	"comp_distance_value ( & now -> mmd , & alt -> mmd , v1 , v2 ) > 0"		719750	0		>			
ANR	719884	CallExpression	"comp_distance_value ( & now -> mmd , & alt -> mmd , v1 , v2 )"		719750	0					
ANR	719885	Callee	comp_distance_value		719750	0					
ANR	719886	Identifier	comp_distance_value		719750	0					
ANR	719887	ArgumentList	& now -> mmd		719750	1					
ANR	719888	Argument	& now -> mmd		719750	0					
ANR	719889	UnaryOperationExpression	& now -> mmd		719750	0					
ANR	719890	UnaryOperator	&		719750	0					
ANR	719891	PtrMemberAccess	now -> mmd		719750	1					
ANR	719892	Identifier	now		719750	0					
ANR	719893	Identifier	mmd		719750	1					
ANR	719894	Argument	& alt -> mmd		719750	1					
ANR	719895	UnaryOperationExpression	& alt -> mmd		719750	0					
ANR	719896	UnaryOperator	&		719750	0					
ANR	719897	PtrMemberAccess	alt -> mmd		719750	1					
ANR	719898	Identifier	alt		719750	0					
ANR	719899	Identifier	mmd		719750	1					
ANR	719900	Argument	v1		719750	2					
ANR	719901	Identifier	v1		719750	0					
ANR	719902	Argument	v2		719750	3					
ANR	719903	Identifier	v2		719750	0					
ANR	719904	PrimaryExpression	0		719750	1					
ANR	719905	ExpressionStatement	"copy_opt_exact_info ( now , alt )"	4311:4:96300:96329	719750	1	True				
ANR	719906	CallExpression	"copy_opt_exact_info ( now , alt )"		719750	0					
ANR	719907	Callee	copy_opt_exact_info		719750	0					
ANR	719908	Identifier	copy_opt_exact_info		719750	0					
ANR	719909	ArgumentList	now		719750	1					
ANR	719910	Argument	now		719750	0					
ANR	719911	Identifier	now		719750	0					
ANR	719912	Argument	alt		719750	1					
ANR	719913	Identifier	alt		719750	0					
ANR	719914	ReturnType	static void		719750	1					
ANR	719915	Identifier	select_opt_exact_info		719750	2					
ANR	719916	ParameterList	"OnigEncoding enc , OptExactInfo * now , OptExactInfo * alt"		719750	3					
ANR	719917	Parameter	OnigEncoding enc	4284:22:95698:95713	719750	0	True				
ANR	719918	ParameterType	OnigEncoding		719750	0					
ANR	719919	Identifier	enc		719750	1					
ANR	719920	Parameter	OptExactInfo * now	4284:40:95716:95732	719750	1	True				
ANR	719921	ParameterType	OptExactInfo *		719750	0					
ANR	719922	Identifier	now		719750	1					
ANR	719923	Parameter	OptExactInfo * alt	4284:59:95735:95751	719750	2	True				
ANR	719924	ParameterType	OptExactInfo *		719750	0					
ANR	719925	Identifier	alt		719750	1					
ANR	719926	CFGEntryNode	ENTRY		719750		True				
ANR	719927	CFGExitNode	EXIT		719750		True				
ANR	719928	Symbol	* now		719750						
ANR	719929	Symbol	now -> len		719750						
ANR	719930	Symbol	map_position_value		719750						
ANR	719931	Symbol	comp_distance_value		719750						
ANR	719932	Symbol	* alt -> s		719750						
ANR	719933	Symbol	alt -> s		719750						
ANR	719934	Symbol	alt		719750						
ANR	719935	Symbol	* * now		719750						
ANR	719936	Symbol	alt -> ignore_case		719750						
ANR	719937	Symbol	* alt		719750						
ANR	719938	Symbol	now -> s		719750						
ANR	719939	Symbol	now -> ignore_case		719750						
ANR	719940	Symbol	now		719750						
ANR	719941	Symbol	enc		719750						
ANR	719942	Symbol	v1		719750						
ANR	719943	Symbol	alt -> len		719750						
ANR	719944	Symbol	v2		719750						
ANR	719945	Symbol	* now -> s		719750						
ANR	719946	Symbol	* * alt		719750						
ANR	719947	Symbol	& alt -> mmd		719750						
ANR	719948	Symbol	& now -> mmd		719750						
ANR	719949	Function	clear_opt_map_info	4314:0:96334:97378							
ANR	719950	FunctionDef	clear_opt_map_info (OptMapInfo * map)		719949	0					
ANR	719951	CompoundStatement		4316:0:96382:97378	719949	0					
ANR	719952	Statement	static	4317:2:96386:96391	719949	0	True				
ANR	719953	IdentifierDeclStatement	"const OptMapInfo clean_info = { { 0 , 0 } , { 0 , 0 } , 0 , { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 } } ;"	4317:9:96393:97326	719949	1	True				
ANR	719954	IdentifierDecl	"clean_info = { { 0 , 0 } , { 0 , 0 } , 0 , { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 } }"		719949	0					
ANR	719955	IdentifierDeclType	const OptMapInfo		719949	0					
ANR	719956	Identifier	clean_info		719949	1					
ANR	719957	AssignmentExpression	"clean_info = { { 0 , 0 } , { 0 , 0 } , 0 , { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 } }"		719949	2		=			
ANR	719958	Identifier	clean_info		719949	0					
ANR	719959	InitializerList	0		719949	1					
ANR	719960	InitializerList	0		719949	0					
ANR	719961	PrimaryExpression	0		719949	0					
ANR	719962	PrimaryExpression	0		719949	1					
ANR	719963	InitializerList	0		719949	1					
ANR	719964	PrimaryExpression	0		719949	0					
ANR	719965	PrimaryExpression	0		719949	1					
ANR	719966	PrimaryExpression	0		719949	2					
ANR	719967	InitializerList	0		719949	3					
ANR	719968	PrimaryExpression	0		719949	0					
ANR	719969	PrimaryExpression	0		719949	1					
ANR	719970	PrimaryExpression	0		719949	2					
ANR	719971	PrimaryExpression	0		719949	3					
ANR	719972	PrimaryExpression	0		719949	4					
ANR	719973	PrimaryExpression	0		719949	5					
ANR	719974	PrimaryExpression	0		719949	6					
ANR	719975	PrimaryExpression	0		719949	7					
ANR	719976	PrimaryExpression	0		719949	8					
ANR	719977	PrimaryExpression	0		719949	9					
ANR	719978	PrimaryExpression	0		719949	10					
ANR	719979	PrimaryExpression	0		719949	11					
ANR	719980	PrimaryExpression	0		719949	12					
ANR	719981	PrimaryExpression	0		719949	13					
ANR	719982	PrimaryExpression	0		719949	14					
ANR	719983	PrimaryExpression	0		719949	15					
ANR	719984	PrimaryExpression	0		719949	16					
ANR	719985	PrimaryExpression	0		719949	17					
ANR	719986	PrimaryExpression	0		719949	18					
ANR	719987	PrimaryExpression	0		719949	19					
ANR	719988	PrimaryExpression	0		719949	20					
ANR	719989	PrimaryExpression	0		719949	21					
ANR	719990	PrimaryExpression	0		719949	22					
ANR	719991	PrimaryExpression	0		719949	23					
ANR	719992	PrimaryExpression	0		719949	24					
ANR	719993	PrimaryExpression	0		719949	25					
ANR	719994	PrimaryExpression	0		719949	26					
ANR	719995	PrimaryExpression	0		719949	27					
ANR	719996	PrimaryExpression	0		719949	28					
ANR	719997	PrimaryExpression	0		719949	29					
ANR	719998	PrimaryExpression	0		719949	30					
ANR	719999	PrimaryExpression	0		719949	31					
ANR	720000	PrimaryExpression	0		719949	32					
ANR	720001	PrimaryExpression	0		719949	33					
ANR	720002	PrimaryExpression	0		719949	34					
ANR	720003	PrimaryExpression	0		719949	35					
ANR	720004	PrimaryExpression	0		719949	36					
ANR	720005	PrimaryExpression	0		719949	37					
ANR	720006	PrimaryExpression	0		719949	38					
ANR	720007	PrimaryExpression	0		719949	39					
ANR	720008	PrimaryExpression	0		719949	40					
ANR	720009	PrimaryExpression	0		719949	41					
ANR	720010	PrimaryExpression	0		719949	42					
ANR	720011	PrimaryExpression	0		719949	43					
ANR	720012	PrimaryExpression	0		719949	44					
ANR	720013	PrimaryExpression	0		719949	45					
ANR	720014	PrimaryExpression	0		719949	46					
ANR	720015	PrimaryExpression	0		719949	47					
ANR	720016	PrimaryExpression	0		719949	48					
ANR	720017	PrimaryExpression	0		719949	49					
ANR	720018	PrimaryExpression	0		719949	50					
ANR	720019	PrimaryExpression	0		719949	51					
ANR	720020	PrimaryExpression	0		719949	52					
ANR	720021	PrimaryExpression	0		719949	53					
ANR	720022	PrimaryExpression	0		719949	54					
ANR	720023	PrimaryExpression	0		719949	55					
ANR	720024	PrimaryExpression	0		719949	56					
ANR	720025	PrimaryExpression	0		719949	57					
ANR	720026	PrimaryExpression	0		719949	58					
ANR	720027	PrimaryExpression	0		719949	59					
ANR	720028	PrimaryExpression	0		719949	60					
ANR	720029	PrimaryExpression	0		719949	61					
ANR	720030	PrimaryExpression	0		719949	62					
ANR	720031	PrimaryExpression	0		719949	63					
ANR	720032	PrimaryExpression	0		719949	64					
ANR	720033	PrimaryExpression	0		719949	65					
ANR	720034	PrimaryExpression	0		719949	66					
ANR	720035	PrimaryExpression	0		719949	67					
ANR	720036	PrimaryExpression	0		719949	68					
ANR	720037	PrimaryExpression	0		719949	69					
ANR	720038	PrimaryExpression	0		719949	70					
ANR	720039	PrimaryExpression	0		719949	71					
ANR	720040	PrimaryExpression	0		719949	72					
ANR	720041	PrimaryExpression	0		719949	73					
ANR	720042	PrimaryExpression	0		719949	74					
ANR	720043	PrimaryExpression	0		719949	75					
ANR	720044	PrimaryExpression	0		719949	76					
ANR	720045	PrimaryExpression	0		719949	77					
ANR	720046	PrimaryExpression	0		719949	78					
ANR	720047	PrimaryExpression	0		719949	79					
ANR	720048	PrimaryExpression	0		719949	80					
ANR	720049	PrimaryExpression	0		719949	81					
ANR	720050	PrimaryExpression	0		719949	82					
ANR	720051	PrimaryExpression	0		719949	83					
ANR	720052	PrimaryExpression	0		719949	84					
ANR	720053	PrimaryExpression	0		719949	85					
ANR	720054	PrimaryExpression	0		719949	86					
ANR	720055	PrimaryExpression	0		719949	87					
ANR	720056	PrimaryExpression	0		719949	88					
ANR	720057	PrimaryExpression	0		719949	89					
ANR	720058	PrimaryExpression	0		719949	90					
ANR	720059	PrimaryExpression	0		719949	91					
ANR	720060	PrimaryExpression	0		719949	92					
ANR	720061	PrimaryExpression	0		719949	93					
ANR	720062	PrimaryExpression	0		719949	94					
ANR	720063	PrimaryExpression	0		719949	95					
ANR	720064	PrimaryExpression	0		719949	96					
ANR	720065	PrimaryExpression	0		719949	97					
ANR	720066	PrimaryExpression	0		719949	98					
ANR	720067	PrimaryExpression	0		719949	99					
ANR	720068	PrimaryExpression	0		719949	100					
ANR	720069	PrimaryExpression	0		719949	101					
ANR	720070	PrimaryExpression	0		719949	102					
ANR	720071	PrimaryExpression	0		719949	103					
ANR	720072	PrimaryExpression	0		719949	104					
ANR	720073	PrimaryExpression	0		719949	105					
ANR	720074	PrimaryExpression	0		719949	106					
ANR	720075	PrimaryExpression	0		719949	107					
ANR	720076	PrimaryExpression	0		719949	108					
ANR	720077	PrimaryExpression	0		719949	109					
ANR	720078	PrimaryExpression	0		719949	110					
ANR	720079	PrimaryExpression	0		719949	111					
ANR	720080	PrimaryExpression	0		719949	112					
ANR	720081	PrimaryExpression	0		719949	113					
ANR	720082	PrimaryExpression	0		719949	114					
ANR	720083	PrimaryExpression	0		719949	115					
ANR	720084	PrimaryExpression	0		719949	116					
ANR	720085	PrimaryExpression	0		719949	117					
ANR	720086	PrimaryExpression	0		719949	118					
ANR	720087	PrimaryExpression	0		719949	119					
ANR	720088	PrimaryExpression	0		719949	120					
ANR	720089	PrimaryExpression	0		719949	121					
ANR	720090	PrimaryExpression	0		719949	122					
ANR	720091	PrimaryExpression	0		719949	123					
ANR	720092	PrimaryExpression	0		719949	124					
ANR	720093	PrimaryExpression	0		719949	125					
ANR	720094	PrimaryExpression	0		719949	126					
ANR	720095	PrimaryExpression	0		719949	127					
ANR	720096	PrimaryExpression	0		719949	128					
ANR	720097	PrimaryExpression	0		719949	129					
ANR	720098	PrimaryExpression	0		719949	130					
ANR	720099	PrimaryExpression	0		719949	131					
ANR	720100	PrimaryExpression	0		719949	132					
ANR	720101	PrimaryExpression	0		719949	133					
ANR	720102	PrimaryExpression	0		719949	134					
ANR	720103	PrimaryExpression	0		719949	135					
ANR	720104	PrimaryExpression	0		719949	136					
ANR	720105	PrimaryExpression	0		719949	137					
ANR	720106	PrimaryExpression	0		719949	138					
ANR	720107	PrimaryExpression	0		719949	139					
ANR	720108	PrimaryExpression	0		719949	140					
ANR	720109	PrimaryExpression	0		719949	141					
ANR	720110	PrimaryExpression	0		719949	142					
ANR	720111	PrimaryExpression	0		719949	143					
ANR	720112	PrimaryExpression	0		719949	144					
ANR	720113	PrimaryExpression	0		719949	145					
ANR	720114	PrimaryExpression	0		719949	146					
ANR	720115	PrimaryExpression	0		719949	147					
ANR	720116	PrimaryExpression	0		719949	148					
ANR	720117	PrimaryExpression	0		719949	149					
ANR	720118	PrimaryExpression	0		719949	150					
ANR	720119	PrimaryExpression	0		719949	151					
ANR	720120	PrimaryExpression	0		719949	152					
ANR	720121	PrimaryExpression	0		719949	153					
ANR	720122	PrimaryExpression	0		719949	154					
ANR	720123	PrimaryExpression	0		719949	155					
ANR	720124	PrimaryExpression	0		719949	156					
ANR	720125	PrimaryExpression	0		719949	157					
ANR	720126	PrimaryExpression	0		719949	158					
ANR	720127	PrimaryExpression	0		719949	159					
ANR	720128	PrimaryExpression	0		719949	160					
ANR	720129	PrimaryExpression	0		719949	161					
ANR	720130	PrimaryExpression	0		719949	162					
ANR	720131	PrimaryExpression	0		719949	163					
ANR	720132	PrimaryExpression	0		719949	164					
ANR	720133	PrimaryExpression	0		719949	165					
ANR	720134	PrimaryExpression	0		719949	166					
ANR	720135	PrimaryExpression	0		719949	167					
ANR	720136	PrimaryExpression	0		719949	168					
ANR	720137	PrimaryExpression	0		719949	169					
ANR	720138	PrimaryExpression	0		719949	170					
ANR	720139	PrimaryExpression	0		719949	171					
ANR	720140	PrimaryExpression	0		719949	172					
ANR	720141	PrimaryExpression	0		719949	173					
ANR	720142	PrimaryExpression	0		719949	174					
ANR	720143	PrimaryExpression	0		719949	175					
ANR	720144	PrimaryExpression	0		719949	176					
ANR	720145	PrimaryExpression	0		719949	177					
ANR	720146	PrimaryExpression	0		719949	178					
ANR	720147	PrimaryExpression	0		719949	179					
ANR	720148	PrimaryExpression	0		719949	180					
ANR	720149	PrimaryExpression	0		719949	181					
ANR	720150	PrimaryExpression	0		719949	182					
ANR	720151	PrimaryExpression	0		719949	183					
ANR	720152	PrimaryExpression	0		719949	184					
ANR	720153	PrimaryExpression	0		719949	185					
ANR	720154	PrimaryExpression	0		719949	186					
ANR	720155	PrimaryExpression	0		719949	187					
ANR	720156	PrimaryExpression	0		719949	188					
ANR	720157	PrimaryExpression	0		719949	189					
ANR	720158	PrimaryExpression	0		719949	190					
ANR	720159	PrimaryExpression	0		719949	191					
ANR	720160	PrimaryExpression	0		719949	192					
ANR	720161	PrimaryExpression	0		719949	193					
ANR	720162	PrimaryExpression	0		719949	194					
ANR	720163	PrimaryExpression	0		719949	195					
ANR	720164	PrimaryExpression	0		719949	196					
ANR	720165	PrimaryExpression	0		719949	197					
ANR	720166	PrimaryExpression	0		719949	198					
ANR	720167	PrimaryExpression	0		719949	199					
ANR	720168	PrimaryExpression	0		719949	200					
ANR	720169	PrimaryExpression	0		719949	201					
ANR	720170	PrimaryExpression	0		719949	202					
ANR	720171	PrimaryExpression	0		719949	203					
ANR	720172	PrimaryExpression	0		719949	204					
ANR	720173	PrimaryExpression	0		719949	205					
ANR	720174	PrimaryExpression	0		719949	206					
ANR	720175	PrimaryExpression	0		719949	207					
ANR	720176	PrimaryExpression	0		719949	208					
ANR	720177	PrimaryExpression	0		719949	209					
ANR	720178	PrimaryExpression	0		719949	210					
ANR	720179	PrimaryExpression	0		719949	211					
ANR	720180	PrimaryExpression	0		719949	212					
ANR	720181	PrimaryExpression	0		719949	213					
ANR	720182	PrimaryExpression	0		719949	214					
ANR	720183	PrimaryExpression	0		719949	215					
ANR	720184	PrimaryExpression	0		719949	216					
ANR	720185	PrimaryExpression	0		719949	217					
ANR	720186	PrimaryExpression	0		719949	218					
ANR	720187	PrimaryExpression	0		719949	219					
ANR	720188	PrimaryExpression	0		719949	220					
ANR	720189	PrimaryExpression	0		719949	221					
ANR	720190	PrimaryExpression	0		719949	222					
ANR	720191	PrimaryExpression	0		719949	223					
ANR	720192	PrimaryExpression	0		719949	224					
ANR	720193	PrimaryExpression	0		719949	225					
ANR	720194	PrimaryExpression	0		719949	226					
ANR	720195	PrimaryExpression	0		719949	227					
ANR	720196	PrimaryExpression	0		719949	228					
ANR	720197	PrimaryExpression	0		719949	229					
ANR	720198	PrimaryExpression	0		719949	230					
ANR	720199	PrimaryExpression	0		719949	231					
ANR	720200	PrimaryExpression	0		719949	232					
ANR	720201	PrimaryExpression	0		719949	233					
ANR	720202	PrimaryExpression	0		719949	234					
ANR	720203	PrimaryExpression	0		719949	235					
ANR	720204	PrimaryExpression	0		719949	236					
ANR	720205	PrimaryExpression	0		719949	237					
ANR	720206	PrimaryExpression	0		719949	238					
ANR	720207	PrimaryExpression	0		719949	239					
ANR	720208	PrimaryExpression	0		719949	240					
ANR	720209	PrimaryExpression	0		719949	241					
ANR	720210	PrimaryExpression	0		719949	242					
ANR	720211	PrimaryExpression	0		719949	243					
ANR	720212	PrimaryExpression	0		719949	244					
ANR	720213	PrimaryExpression	0		719949	245					
ANR	720214	PrimaryExpression	0		719949	246					
ANR	720215	PrimaryExpression	0		719949	247					
ANR	720216	PrimaryExpression	0		719949	248					
ANR	720217	PrimaryExpression	0		719949	249					
ANR	720218	PrimaryExpression	0		719949	250					
ANR	720219	PrimaryExpression	0		719949	251					
ANR	720220	PrimaryExpression	0		719949	252					
ANR	720221	PrimaryExpression	0		719949	253					
ANR	720222	PrimaryExpression	0		719949	254					
ANR	720223	PrimaryExpression	0		719949	255					
ANR	720224	ExpressionStatement	"xmemcpy ( map , & clean_info , sizeof ( OptMapInfo ) )"	4339:2:97331:97376	719949	2	True				
ANR	720225	CallExpression	"xmemcpy ( map , & clean_info , sizeof ( OptMapInfo ) )"		719949	0					
ANR	720226	Callee	xmemcpy		719949	0					
ANR	720227	Identifier	xmemcpy		719949	0					
ANR	720228	ArgumentList	map		719949	1					
ANR	720229	Argument	map		719949	0					
ANR	720230	Identifier	map		719949	0					
ANR	720231	Argument	& clean_info		719949	1					
ANR	720232	UnaryOperationExpression	& clean_info		719949	0					
ANR	720233	UnaryOperator	&		719949	0					
ANR	720234	Identifier	clean_info		719949	1					
ANR	720235	Argument	sizeof ( OptMapInfo )		719949	2					
ANR	720236	SizeofExpression	sizeof ( OptMapInfo )		719949	0					
ANR	720237	Sizeof	sizeof		719949	0					
ANR	720238	SizeofOperand	OptMapInfo		719949	1					
ANR	720239	ReturnType	static void		719949	1					
ANR	720240	Identifier	clear_opt_map_info		719949	2					
ANR	720241	ParameterList	OptMapInfo * map		719949	3					
ANR	720242	Parameter	OptMapInfo * map	4315:19:96365:96379	719949	0	True				
ANR	720243	ParameterType	OptMapInfo *		719949	0					
ANR	720244	Identifier	map		719949	1					
ANR	720245	CFGEntryNode	ENTRY		719949		True				
ANR	720246	CFGExitNode	EXIT		719949		True				
ANR	720247	Symbol	& clean_info		719949						
ANR	720248	Symbol	map		719949						
ANR	720249	Symbol	clean_info		719949						
ANR	720250	Function	copy_opt_map_info	4342:0:97381:97462							
ANR	720251	FunctionDef	"copy_opt_map_info (OptMapInfo * to , OptMapInfo * from)"		720250	0					
ANR	720252	CompoundStatement		4344:0:97445:97462	720250	0					
ANR	720253	ExpressionStatement	* to = * from	4345:2:97449:97460	720250	0	True				
ANR	720254	AssignmentExpression	* to = * from		720250	0		=			
ANR	720255	UnaryOperationExpression	* to		720250	0					
ANR	720256	UnaryOperator	*		720250	0					
ANR	720257	Identifier	to		720250	1					
ANR	720258	UnaryOperationExpression	* from		720250	1					
ANR	720259	UnaryOperator	*		720250	0					
ANR	720260	Identifier	from		720250	1					
ANR	720261	ReturnType	static void		720250	1					
ANR	720262	Identifier	copy_opt_map_info		720250	2					
ANR	720263	ParameterList	"OptMapInfo * to , OptMapInfo * from"		720250	3					
ANR	720264	Parameter	OptMapInfo * to	4343:18:97411:97424	720250	0	True				
ANR	720265	ParameterType	OptMapInfo *		720250	0					
ANR	720266	Identifier	to		720250	1					
ANR	720267	Parameter	OptMapInfo * from	4343:34:97427:97442	720250	1	True				
ANR	720268	ParameterType	OptMapInfo *		720250	0					
ANR	720269	Identifier	from		720250	1					
ANR	720270	CFGEntryNode	ENTRY		720250		True				
ANR	720271	CFGExitNode	EXIT		720250		True				
ANR	720272	Symbol	* to		720250						
ANR	720273	Symbol	from		720250						
ANR	720274	Symbol	to		720250						
ANR	720275	Symbol	* from		720250						
ANR	720276	Function	add_char_opt_map_info	4348:0:97465:97642							
ANR	720277	FunctionDef	"add_char_opt_map_info (OptMapInfo * map , UChar c , OnigEncoding enc)"		720276	0					
ANR	720278	CompoundStatement		4350:0:97543:97642	720276	0					
ANR	720279	IfStatement	if ( map -> map [ c ] == 0 )		720276	0					
ANR	720280	Condition	map -> map [ c ] == 0	4351:6:97551:97566	720276	0	True				
ANR	720281	EqualityExpression	map -> map [ c ] == 0		720276	0		==			
ANR	720282	ArrayIndexing	map -> map [ c ]		720276	0					
ANR	720283	PtrMemberAccess	map -> map		720276	0					
ANR	720284	Identifier	map		720276	0					
ANR	720285	Identifier	map		720276	1					
ANR	720286	Identifier	c		720276	1					
ANR	720287	PrimaryExpression	0		720276	1					
ANR	720288	CompoundStatement		2:24:25:25	720276	1					
ANR	720289	ExpressionStatement	map -> map [ c ] = 1	4352:4:97575:97590	720276	0	True				
ANR	720290	AssignmentExpression	map -> map [ c ] = 1		720276	0		=			
ANR	720291	ArrayIndexing	map -> map [ c ]		720276	0					
ANR	720292	PtrMemberAccess	map -> map		720276	0					
ANR	720293	Identifier	map		720276	0					
ANR	720294	Identifier	map		720276	1					
ANR	720295	Identifier	c		720276	1					
ANR	720296	PrimaryExpression	1		720276	1					
ANR	720297	ExpressionStatement	"map -> value += map_position_value ( enc , c )"	4353:4:97596:97636	720276	1	True				
ANR	720298	AssignmentExpression	"map -> value += map_position_value ( enc , c )"		720276	0		+=			
ANR	720299	PtrMemberAccess	map -> value		720276	0					
ANR	720300	Identifier	map		720276	0					
ANR	720301	Identifier	value		720276	1					
ANR	720302	CallExpression	"map_position_value ( enc , c )"		720276	1					
ANR	720303	Callee	map_position_value		720276	0					
ANR	720304	Identifier	map_position_value		720276	0					
ANR	720305	ArgumentList	enc		720276	1					
ANR	720306	Argument	enc		720276	0					
ANR	720307	Identifier	enc		720276	0					
ANR	720308	Argument	c		720276	1					
ANR	720309	Identifier	c		720276	0					
ANR	720310	ReturnType	static void		720276	1					
ANR	720311	Identifier	add_char_opt_map_info		720276	2					
ANR	720312	ParameterList	"OptMapInfo * map , UChar c , OnigEncoding enc"		720276	3					
ANR	720313	Parameter	OptMapInfo * map	4349:22:97499:97513	720276	0	True				
ANR	720314	ParameterType	OptMapInfo *		720276	0					
ANR	720315	Identifier	map		720276	1					
ANR	720316	Parameter	UChar c	4349:39:97516:97522	720276	1	True				
ANR	720317	ParameterType	UChar		720276	0					
ANR	720318	Identifier	c		720276	1					
ANR	720319	Parameter	OnigEncoding enc	4349:48:97525:97540	720276	2	True				
ANR	720320	ParameterType	OnigEncoding		720276	0					
ANR	720321	Identifier	enc		720276	1					
ANR	720322	CFGEntryNode	ENTRY		720276		True				
ANR	720323	CFGExitNode	EXIT		720276		True				
ANR	720324	Symbol	* * map		720276						
ANR	720325	Symbol	map_position_value		720276						
ANR	720326	Symbol	c		720276						
ANR	720327	Symbol	map -> map		720276						
ANR	720328	Symbol	* map		720276						
ANR	720329	Symbol	* map -> map		720276						
ANR	720330	Symbol	enc		720276						
ANR	720331	Symbol	map		720276						
ANR	720332	Symbol	* c		720276						
ANR	720333	Symbol	map -> value		720276						
ANR	720334	Function	add_char_amb_opt_map_info	4357:0:97645:98273							
ANR	720335	FunctionDef	"add_char_amb_opt_map_info (OptMapInfo * map , UChar * p , UChar * end , OnigEncoding enc , OnigCaseFoldType case_fold_flag)"		720334	0					
ANR	720336	CompoundStatement		4360:0:97798:98273	720334	0					
ANR	720337	IdentifierDeclStatement	OnigCaseFoldCodeItem items [ ONIGENC_GET_CASE_FOLD_CODES_MAX_NUM ] ;	4361:2:97802:97865	720334	0	True				
ANR	720338	IdentifierDecl	items [ ONIGENC_GET_CASE_FOLD_CODES_MAX_NUM ]		720334	0					
ANR	720339	IdentifierDeclType	OnigCaseFoldCodeItem [ ONIGENC_GET_CASE_FOLD_CODES_MAX_NUM ]		720334	0					
ANR	720340	Identifier	items		720334	1					
ANR	720341	Identifier	ONIGENC_GET_CASE_FOLD_CODES_MAX_NUM		720334	2					
ANR	720342	IdentifierDeclStatement	UChar buf [ ONIGENC_CODE_TO_MBC_MAXLEN ] ;	4362:2:97869:97906	720334	1	True				
ANR	720343	IdentifierDecl	buf [ ONIGENC_CODE_TO_MBC_MAXLEN ]		720334	0					
ANR	720344	IdentifierDeclType	UChar [ ONIGENC_CODE_TO_MBC_MAXLEN ]		720334	0					
ANR	720345	Identifier	buf		720334	1					
ANR	720346	Identifier	ONIGENC_CODE_TO_MBC_MAXLEN		720334	2					
ANR	720347	IdentifierDeclStatement	"int i , n ;"	4363:2:97910:97918	720334	2	True				
ANR	720348	IdentifierDecl	i		720334	0					
ANR	720349	IdentifierDeclType	int		720334	0					
ANR	720350	Identifier	i		720334	1					
ANR	720351	IdentifierDecl	n		720334	1					
ANR	720352	IdentifierDeclType	int		720334	0					
ANR	720353	Identifier	n		720334	1					
ANR	720354	ExpressionStatement	"add_char_opt_map_info ( map , p [ 0 ] , enc )"	4365:2:97923:97960	720334	3	True				
ANR	720355	CallExpression	"add_char_opt_map_info ( map , p [ 0 ] , enc )"		720334	0					
ANR	720356	Callee	add_char_opt_map_info		720334	0					
ANR	720357	Identifier	add_char_opt_map_info		720334	0					
ANR	720358	ArgumentList	map		720334	1					
ANR	720359	Argument	map		720334	0					
ANR	720360	Identifier	map		720334	0					
ANR	720361	Argument	p [ 0 ]		720334	1					
ANR	720362	ArrayIndexing	p [ 0 ]		720334	0					
ANR	720363	Identifier	p		720334	0					
ANR	720364	PrimaryExpression	0		720334	1					
ANR	720365	Argument	enc		720334	2					
ANR	720366	Identifier	enc		720334	0					
ANR	720367	ExpressionStatement	case_fold_flag = DISABLE_CASE_FOLD_MULTI_CHAR ( case_fold_flag )	4367:2:97965:98026	720334	4	True				
ANR	720368	AssignmentExpression	case_fold_flag = DISABLE_CASE_FOLD_MULTI_CHAR ( case_fold_flag )		720334	0		=			
ANR	720369	Identifier	case_fold_flag		720334	0					
ANR	720370	CallExpression	DISABLE_CASE_FOLD_MULTI_CHAR ( case_fold_flag )		720334	1					
ANR	720371	Callee	DISABLE_CASE_FOLD_MULTI_CHAR		720334	0					
ANR	720372	Identifier	DISABLE_CASE_FOLD_MULTI_CHAR		720334	0					
ANR	720373	ArgumentList	case_fold_flag		720334	1					
ANR	720374	Argument	case_fold_flag		720334	0					
ANR	720375	Identifier	case_fold_flag		720334	0					
ANR	720376	ExpressionStatement	"n = ONIGENC_GET_CASE_FOLD_CODES_BY_STR ( enc , case_fold_flag , p , end , items )"	4368:2:98030:98104	720334	5	True				
ANR	720377	AssignmentExpression	"n = ONIGENC_GET_CASE_FOLD_CODES_BY_STR ( enc , case_fold_flag , p , end , items )"		720334	0		=			
ANR	720378	Identifier	n		720334	0					
ANR	720379	CallExpression	"ONIGENC_GET_CASE_FOLD_CODES_BY_STR ( enc , case_fold_flag , p , end , items )"		720334	1					
ANR	720380	Callee	ONIGENC_GET_CASE_FOLD_CODES_BY_STR		720334	0					
ANR	720381	Identifier	ONIGENC_GET_CASE_FOLD_CODES_BY_STR		720334	0					
ANR	720382	ArgumentList	enc		720334	1					
ANR	720383	Argument	enc		720334	0					
ANR	720384	Identifier	enc		720334	0					
ANR	720385	Argument	case_fold_flag		720334	1					
ANR	720386	Identifier	case_fold_flag		720334	0					
ANR	720387	Argument	p		720334	2					
ANR	720388	Identifier	p		720334	0					
ANR	720389	Argument	end		720334	3					
ANR	720390	Identifier	end		720334	0					
ANR	720391	Argument	items		720334	4					
ANR	720392	Identifier	items		720334	0					
ANR	720393	IfStatement	if ( n < 0 )		720334	6					
ANR	720394	Condition	n < 0	4369:6:98112:98116	720334	0	True				
ANR	720395	RelationalExpression	n < 0		720334	0		<			
ANR	720396	Identifier	n		720334	0					
ANR	720397	PrimaryExpression	0		720334	1					
ANR	720398	ReturnStatement	return n ;	4369:13:98119:98127	720334	1	True				
ANR	720399	Identifier	n		720334	0					
ANR	720400	ForStatement	for ( i = 0 ; i < n ; i ++ )		720334	7					
ANR	720401	ForInit	i = 0 ;	4371:7:98137:98142	720334	0	True				
ANR	720402	AssignmentExpression	i = 0		720334	0		=			
ANR	720403	Identifier	i		720334	0					
ANR	720404	PrimaryExpression	0		720334	1					
ANR	720405	Condition	i < n	4371:14:98144:98148	720334	1	True				
ANR	720406	RelationalExpression	i < n		720334	0		<			
ANR	720407	Identifier	i		720334	0					
ANR	720408	Identifier	n		720334	1					
ANR	720409	PostIncDecOperationExpression	i ++	4371:21:98151:98153	720334	2	True				
ANR	720410	Identifier	i		720334	0					
ANR	720411	IncDec	++		720334	1					
ANR	720412	CompoundStatement		12:26:357:357	720334	3					
ANR	720413	ExpressionStatement	"ONIGENC_CODE_TO_MBC ( enc , items [ i ] . code [ 0 ] , buf )"	4372:4:98162:98209	720334	0	True				
ANR	720414	CallExpression	"ONIGENC_CODE_TO_MBC ( enc , items [ i ] . code [ 0 ] , buf )"		720334	0					
ANR	720415	Callee	ONIGENC_CODE_TO_MBC		720334	0					
ANR	720416	Identifier	ONIGENC_CODE_TO_MBC		720334	0					
ANR	720417	ArgumentList	enc		720334	1					
ANR	720418	Argument	enc		720334	0					
ANR	720419	Identifier	enc		720334	0					
ANR	720420	Argument	items [ i ] . code [ 0 ]		720334	1					
ANR	720421	ArrayIndexing	items [ i ] . code [ 0 ]		720334	0					
ANR	720422	MemberAccess	items [ i ] . code		720334	0					
ANR	720423	ArrayIndexing	items [ i ]		720334	0					
ANR	720424	Identifier	items		720334	0					
ANR	720425	Identifier	i		720334	1					
ANR	720426	Identifier	code		720334	1					
ANR	720427	PrimaryExpression	0		720334	1					
ANR	720428	Argument	buf		720334	2					
ANR	720429	Identifier	buf		720334	0					
ANR	720430	ExpressionStatement	"add_char_opt_map_info ( map , buf [ 0 ] , enc )"	4373:4:98215:98254	720334	1	True				
ANR	720431	CallExpression	"add_char_opt_map_info ( map , buf [ 0 ] , enc )"		720334	0					
ANR	720432	Callee	add_char_opt_map_info		720334	0					
ANR	720433	Identifier	add_char_opt_map_info		720334	0					
ANR	720434	ArgumentList	map		720334	1					
ANR	720435	Argument	map		720334	0					
ANR	720436	Identifier	map		720334	0					
ANR	720437	Argument	buf [ 0 ]		720334	1					
ANR	720438	ArrayIndexing	buf [ 0 ]		720334	0					
ANR	720439	Identifier	buf		720334	0					
ANR	720440	PrimaryExpression	0		720334	1					
ANR	720441	Argument	enc		720334	2					
ANR	720442	Identifier	enc		720334	0					
ANR	720443	ReturnStatement	return 0 ;	4376:2:98263:98271	720334	8	True				
ANR	720444	PrimaryExpression	0		720334	0					
ANR	720445	ReturnType	static int		720334	1					
ANR	720446	Identifier	add_char_amb_opt_map_info		720334	2					
ANR	720447	ParameterList	"OptMapInfo * map , UChar * p , UChar * end , OnigEncoding enc , OnigCaseFoldType case_fold_flag"		720334	3					
ANR	720448	Parameter	OptMapInfo * map	4358:26:97682:97696	720334	0	True				
ANR	720449	ParameterType	OptMapInfo *		720334	0					
ANR	720450	Identifier	map		720334	1					
ANR	720451	Parameter	UChar * p	4358:43:97699:97706	720334	1	True				
ANR	720452	ParameterType	UChar *		720334	0					
ANR	720453	Identifier	p		720334	1					
ANR	720454	Parameter	UChar * end	4358:53:97709:97718	720334	2	True				
ANR	720455	ParameterType	UChar *		720334	0					
ANR	720456	Identifier	end		720334	1					
ANR	720457	Parameter	OnigEncoding enc	4359:26:97747:97762	720334	3	True				
ANR	720458	ParameterType	OnigEncoding		720334	0					
ANR	720459	Identifier	enc		720334	1					
ANR	720460	Parameter	OnigCaseFoldType case_fold_flag	4359:44:97765:97795	720334	4	True				
ANR	720461	ParameterType	OnigCaseFoldType		720334	0					
ANR	720462	Identifier	case_fold_flag		720334	1					
ANR	720463	CFGEntryNode	ENTRY		720334		True				
ANR	720464	CFGExitNode	EXIT		720334		True				
ANR	720465	Symbol	* * i		720334						
ANR	720466	Symbol	* buf		720334						
ANR	720467	Symbol	* items [ i ] . code		720334						
ANR	720468	Symbol	items [ i ] . code		720334						
ANR	720469	Symbol	DISABLE_CASE_FOLD_MULTI_CHAR		720334						
ANR	720470	Symbol	i		720334						
ANR	720471	Symbol	* * items		720334						
ANR	720472	Symbol	n		720334						
ANR	720473	Symbol	p		720334						
ANR	720474	Symbol	case_fold_flag		720334						
ANR	720475	Symbol	buf		720334						
ANR	720476	Symbol	* i		720334						
ANR	720477	Symbol	* items		720334						
ANR	720478	Symbol	end		720334						
ANR	720479	Symbol	* p		720334						
ANR	720480	Symbol	ONIGENC_GET_CASE_FOLD_CODES_BY_STR		720334						
ANR	720481	Symbol	enc		720334						
ANR	720482	Symbol	map		720334						
ANR	720483	Symbol	items		720334						
ANR	720484	Function	select_opt_map_info	4379:0:98276:98665							
ANR	720485	FunctionDef	"select_opt_map_info (OptMapInfo * now , OptMapInfo * alt)"		720484	0					
ANR	720486	CompoundStatement		4381:0:98342:98665	720484	0					
ANR	720487	Statement	static	4382:2:98346:98351	720484	0	True				
ANR	720488	IdentifierDeclStatement	int z = 1 << 15 ;	4382:9:98353:98366	720484	1	True				
ANR	720489	IdentifierDecl	z = 1 << 15		720484	0					
ANR	720490	IdentifierDeclType	int		720484	0					
ANR	720491	Identifier	z		720484	1					
ANR	720492	AssignmentExpression	z = 1 << 15		720484	2		=			
ANR	720493	Identifier	z		720484	0					
ANR	720494	ShiftExpression	1 << 15		720484	1		<<			
ANR	720495	PrimaryExpression	1		720484	0					
ANR	720496	PrimaryExpression	15		720484	1					
ANR	720497	IdentifierDeclStatement	"int v1 , v2 ;"	4384:2:98404:98414	720484	2	True				
ANR	720498	IdentifierDecl	v1		720484	0					
ANR	720499	IdentifierDeclType	int		720484	0					
ANR	720500	Identifier	v1		720484	1					
ANR	720501	IdentifierDecl	v2		720484	1					
ANR	720502	IdentifierDeclType	int		720484	0					
ANR	720503	Identifier	v2		720484	1					
ANR	720504	IfStatement	if ( alt -> value == 0 )		720484	3					
ANR	720505	Condition	alt -> value == 0	4386:6:98423:98437	720484	0	True				
ANR	720506	EqualityExpression	alt -> value == 0		720484	0		==			
ANR	720507	PtrMemberAccess	alt -> value		720484	0					
ANR	720508	Identifier	alt		720484	0					
ANR	720509	Identifier	value		720484	1					
ANR	720510	PrimaryExpression	0		720484	1					
ANR	720511	ReturnStatement	return ;	4386:23:98440:98447	720484	1	True				
ANR	720512	IfStatement	if ( now -> value == 0 )		720484	4					
ANR	720513	Condition	now -> value == 0	4387:6:98455:98469	720484	0	True				
ANR	720514	EqualityExpression	now -> value == 0		720484	0		==			
ANR	720515	PtrMemberAccess	now -> value		720484	0					
ANR	720516	Identifier	now		720484	0					
ANR	720517	Identifier	value		720484	1					
ANR	720518	PrimaryExpression	0		720484	1					
ANR	720519	CompoundStatement		7:23:129:129	720484	1					
ANR	720520	ExpressionStatement	"copy_opt_map_info ( now , alt )"	4388:4:98478:98505	720484	0	True				
ANR	720521	CallExpression	"copy_opt_map_info ( now , alt )"		720484	0					
ANR	720522	Callee	copy_opt_map_info		720484	0					
ANR	720523	Identifier	copy_opt_map_info		720484	0					
ANR	720524	ArgumentList	now		720484	1					
ANR	720525	Argument	now		720484	0					
ANR	720526	Identifier	now		720484	0					
ANR	720527	Argument	alt		720484	1					
ANR	720528	Identifier	alt		720484	0					
ANR	720529	ReturnStatement	return ;	4389:4:98511:98518	720484	1	True				
ANR	720530	ExpressionStatement	v1 = z / now -> value	4392:2:98527:98546	720484	5	True				
ANR	720531	AssignmentExpression	v1 = z / now -> value		720484	0		=			
ANR	720532	Identifier	v1		720484	0					
ANR	720533	MultiplicativeExpression	z / now -> value		720484	1		/			
ANR	720534	Identifier	z		720484	0					
ANR	720535	PtrMemberAccess	now -> value		720484	1					
ANR	720536	Identifier	now		720484	0					
ANR	720537	Identifier	value		720484	1					
ANR	720538	ExpressionStatement	v2 = z / alt -> value	4393:2:98550:98569	720484	6	True				
ANR	720539	AssignmentExpression	v2 = z / alt -> value		720484	0		=			
ANR	720540	Identifier	v2		720484	0					
ANR	720541	MultiplicativeExpression	z / alt -> value		720484	1		/			
ANR	720542	Identifier	z		720484	0					
ANR	720543	PtrMemberAccess	alt -> value		720484	1					
ANR	720544	Identifier	alt		720484	0					
ANR	720545	Identifier	value		720484	1					
ANR	720546	IfStatement	"if ( comp_distance_value ( & now -> mmd , & alt -> mmd , v1 , v2 ) > 0 )"		720484	7					
ANR	720547	Condition	"comp_distance_value ( & now -> mmd , & alt -> mmd , v1 , v2 ) > 0"	4394:6:98577:98629	720484	0	True				
ANR	720548	RelationalExpression	"comp_distance_value ( & now -> mmd , & alt -> mmd , v1 , v2 ) > 0"		720484	0		>			
ANR	720549	CallExpression	"comp_distance_value ( & now -> mmd , & alt -> mmd , v1 , v2 )"		720484	0					
ANR	720550	Callee	comp_distance_value		720484	0					
ANR	720551	Identifier	comp_distance_value		720484	0					
ANR	720552	ArgumentList	& now -> mmd		720484	1					
ANR	720553	Argument	& now -> mmd		720484	0					
ANR	720554	UnaryOperationExpression	& now -> mmd		720484	0					
ANR	720555	UnaryOperator	&		720484	0					
ANR	720556	PtrMemberAccess	now -> mmd		720484	1					
ANR	720557	Identifier	now		720484	0					
ANR	720558	Identifier	mmd		720484	1					
ANR	720559	Argument	& alt -> mmd		720484	1					
ANR	720560	UnaryOperationExpression	& alt -> mmd		720484	0					
ANR	720561	UnaryOperator	&		720484	0					
ANR	720562	PtrMemberAccess	alt -> mmd		720484	1					
ANR	720563	Identifier	alt		720484	0					
ANR	720564	Identifier	mmd		720484	1					
ANR	720565	Argument	v1		720484	2					
ANR	720566	Identifier	v1		720484	0					
ANR	720567	Argument	v2		720484	3					
ANR	720568	Identifier	v2		720484	0					
ANR	720569	PrimaryExpression	0		720484	1					
ANR	720570	ExpressionStatement	"copy_opt_map_info ( now , alt )"	4395:4:98636:98663	720484	1	True				
ANR	720571	CallExpression	"copy_opt_map_info ( now , alt )"		720484	0					
ANR	720572	Callee	copy_opt_map_info		720484	0					
ANR	720573	Identifier	copy_opt_map_info		720484	0					
ANR	720574	ArgumentList	now		720484	1					
ANR	720575	Argument	now		720484	0					
ANR	720576	Identifier	now		720484	0					
ANR	720577	Argument	alt		720484	1					
ANR	720578	Identifier	alt		720484	0					
ANR	720579	ReturnType	static void		720484	1					
ANR	720580	Identifier	select_opt_map_info		720484	2					
ANR	720581	ParameterList	"OptMapInfo * now , OptMapInfo * alt"		720484	3					
ANR	720582	Parameter	OptMapInfo * now	4380:20:98308:98322	720484	0	True				
ANR	720583	ParameterType	OptMapInfo *		720484	0					
ANR	720584	Identifier	now		720484	1					
ANR	720585	Parameter	OptMapInfo * alt	4380:37:98325:98339	720484	1	True				
ANR	720586	ParameterType	OptMapInfo *		720484	0					
ANR	720587	Identifier	alt		720484	1					
ANR	720588	CFGEntryNode	ENTRY		720484		True				
ANR	720589	CFGExitNode	EXIT		720484		True				
ANR	720590	Symbol	* now		720484						
ANR	720591	Symbol	now -> value		720484						
ANR	720592	Symbol	comp_distance_value		720484						
ANR	720593	Symbol	alt -> value		720484						
ANR	720594	Symbol	now		720484						
ANR	720595	Symbol	alt		720484						
ANR	720596	Symbol	z		720484						
ANR	720597	Symbol	v1		720484						
ANR	720598	Symbol	v2		720484						
ANR	720599	Symbol	* alt		720484						
ANR	720600	Symbol	& alt -> mmd		720484						
ANR	720601	Symbol	& now -> mmd		720484						
ANR	720602	Function	comp_opt_exact_or_map_info	4398:0:98668:98966							
ANR	720603	FunctionDef	"comp_opt_exact_or_map_info (OptExactInfo * e , OptMapInfo * m)"		720602	0					
ANR	720604	CompoundStatement		4400:0:98738:98966	720602	0					
ANR	720605	Statement	define	4401:1:98741:98746	720602	0	True				
ANR	720606	Statement	COMP_EM_BASE	4401:8:98748:98759	720602	1	True				
ANR	720607	Statement	20	4401:22:98762:98763	720602	2	True				
ANR	720608	IdentifierDeclStatement	"int ve , vm ;"	4402:2:98767:98777	720602	3	True				
ANR	720609	IdentifierDecl	ve		720602	0					
ANR	720610	IdentifierDeclType	int		720602	0					
ANR	720611	Identifier	ve		720602	1					
ANR	720612	IdentifierDecl	vm		720602	1					
ANR	720613	IdentifierDeclType	int		720602	0					
ANR	720614	Identifier	vm		720602	1					
ANR	720615	IfStatement	if ( m -> value <= 0 )		720602	4					
ANR	720616	Condition	m -> value <= 0	4404:6:98786:98798	720602	0	True				
ANR	720617	RelationalExpression	m -> value <= 0		720602	0		<=			
ANR	720618	PtrMemberAccess	m -> value		720602	0					
ANR	720619	Identifier	m		720602	0					
ANR	720620	Identifier	value		720602	1					
ANR	720621	PrimaryExpression	0		720602	1					
ANR	720622	ReturnStatement	return - 1 ;	4404:21:98801:98810	720602	1	True				
ANR	720623	UnaryOperationExpression	- 1		720602	0					
ANR	720624	UnaryOperator	-		720602	0					
ANR	720625	PrimaryExpression	1		720602	1					
ANR	720626	ExpressionStatement	ve = COMP_EM_BASE * e -> len * ( e -> ignore_case ? 1 : 2 )	4406:2:98815:98868	720602	5	True				
ANR	720627	AssignmentExpression	ve = COMP_EM_BASE * e -> len * ( e -> ignore_case ? 1 : 2 )		720602	0		=			
ANR	720628	Identifier	ve		720602	0					
ANR	720629	MultiplicativeExpression	COMP_EM_BASE * e -> len * ( e -> ignore_case ? 1 : 2 )		720602	1		*			
ANR	720630	Identifier	COMP_EM_BASE		720602	0					
ANR	720631	MultiplicativeExpression	e -> len * ( e -> ignore_case ? 1 : 2 )		720602	1		*			
ANR	720632	PtrMemberAccess	e -> len		720602	0					
ANR	720633	Identifier	e		720602	0					
ANR	720634	Identifier	len		720602	1					
ANR	720635	ConditionalExpression	e -> ignore_case ? 1 : 2		720602	1					
ANR	720636	Condition	e -> ignore_case		720602	0					
ANR	720637	PtrMemberAccess	e -> ignore_case		720602	0					
ANR	720638	Identifier	e		720602	0					
ANR	720639	Identifier	ignore_case		720602	1					
ANR	720640	PrimaryExpression	1		720602	1					
ANR	720641	PrimaryExpression	2		720602	2					
ANR	720642	ExpressionStatement	vm = COMP_EM_BASE * 5 * 2 / m -> value	4407:2:98872:98908	720602	6	True				
ANR	720643	AssignmentExpression	vm = COMP_EM_BASE * 5 * 2 / m -> value		720602	0		=			
ANR	720644	Identifier	vm		720602	0					
ANR	720645	MultiplicativeExpression	COMP_EM_BASE * 5 * 2 / m -> value		720602	1		*			
ANR	720646	Identifier	COMP_EM_BASE		720602	0					
ANR	720647	MultiplicativeExpression	5 * 2 / m -> value		720602	1		*			
ANR	720648	PrimaryExpression	5		720602	0					
ANR	720649	MultiplicativeExpression	2 / m -> value		720602	1		/			
ANR	720650	PrimaryExpression	2		720602	0					
ANR	720651	PtrMemberAccess	m -> value		720602	1					
ANR	720652	Identifier	m		720602	0					
ANR	720653	Identifier	value		720602	1					
ANR	720654	ReturnStatement	"return comp_distance_value ( & e -> mmd , & m -> mmd , ve , vm ) ;"	4408:2:98912:98964	720602	7	True				
ANR	720655	CallExpression	"comp_distance_value ( & e -> mmd , & m -> mmd , ve , vm )"		720602	0					
ANR	720656	Callee	comp_distance_value		720602	0					
ANR	720657	Identifier	comp_distance_value		720602	0					
ANR	720658	ArgumentList	& e -> mmd		720602	1					
ANR	720659	Argument	& e -> mmd		720602	0					
ANR	720660	UnaryOperationExpression	& e -> mmd		720602	0					
ANR	720661	UnaryOperator	&		720602	0					
ANR	720662	PtrMemberAccess	e -> mmd		720602	1					
ANR	720663	Identifier	e		720602	0					
ANR	720664	Identifier	mmd		720602	1					
ANR	720665	Argument	& m -> mmd		720602	1					
ANR	720666	UnaryOperationExpression	& m -> mmd		720602	0					
ANR	720667	UnaryOperator	&		720602	0					
ANR	720668	PtrMemberAccess	m -> mmd		720602	1					
ANR	720669	Identifier	m		720602	0					
ANR	720670	Identifier	mmd		720602	1					
ANR	720671	Argument	ve		720602	2					
ANR	720672	Identifier	ve		720602	0					
ANR	720673	Argument	vm		720602	3					
ANR	720674	Identifier	vm		720602	0					
ANR	720675	ReturnType	static int		720602	1					
ANR	720676	Identifier	comp_opt_exact_or_map_info		720602	2					
ANR	720677	ParameterList	"OptExactInfo * e , OptMapInfo * m"		720602	3					
ANR	720678	Parameter	OptExactInfo * e	4399:27:98706:98720	720602	0	True				
ANR	720679	ParameterType	OptExactInfo *		720602	0					
ANR	720680	Identifier	e		720602	1					
ANR	720681	Parameter	OptMapInfo * m	4399:44:98723:98735	720602	1	True				
ANR	720682	ParameterType	OptMapInfo *		720602	0					
ANR	720683	Identifier	m		720602	1					
ANR	720684	CFGEntryNode	ENTRY		720602		True				
ANR	720685	CFGExitNode	EXIT		720602		True				
ANR	720686	Symbol	& m -> mmd		720602						
ANR	720687	Symbol	e -> len		720602						
ANR	720688	Symbol	m -> value		720602						
ANR	720689	Symbol	e		720602						
ANR	720690	Symbol	comp_distance_value		720602						
ANR	720691	Symbol	m		720602						
ANR	720692	Symbol	ve		720602						
ANR	720693	Symbol	* e		720602						
ANR	720694	Symbol	vm		720602						
ANR	720695	Symbol	* m		720602						
ANR	720696	Symbol	e -> ignore_case		720602						
ANR	720697	Symbol	& e -> mmd		720602						
ANR	720698	Symbol	COMP_EM_BASE		720602						
ANR	720699	Function	alt_merge_opt_map_info	4411:0:98969:99535							
ANR	720700	FunctionDef	"alt_merge_opt_map_info (OnigEncoding enc , OptMapInfo * to , OptMapInfo * add)"		720699	0					
ANR	720701	CompoundStatement		4413:0:99055:99535	720699	0					
ANR	720702	IdentifierDeclStatement	"int i , val ;"	4414:2:99059:99069	720699	0	True				
ANR	720703	IdentifierDecl	i		720699	0					
ANR	720704	IdentifierDeclType	int		720699	0					
ANR	720705	Identifier	i		720699	1					
ANR	720706	IdentifierDecl	val		720699	1					
ANR	720707	IdentifierDeclType	int		720699	0					
ANR	720708	Identifier	val		720699	1					
ANR	720709	IfStatement	if ( to -> value == 0 )		720699	1					
ANR	720710	Condition	to -> value == 0	4417:6:99136:99149	720699	0	True				
ANR	720711	EqualityExpression	to -> value == 0		720699	0		==			
ANR	720712	PtrMemberAccess	to -> value		720699	0					
ANR	720713	Identifier	to		720699	0					
ANR	720714	Identifier	value		720699	1					
ANR	720715	PrimaryExpression	0		720699	1					
ANR	720716	ReturnStatement	return ;	4417:22:99152:99159	720699	1	True				
ANR	720717	IfStatement	if ( add -> value == 0 || to -> mmd . max < add -> mmd . min )		720699	2					
ANR	720718	Condition	add -> value == 0 || to -> mmd . max < add -> mmd . min	4418:6:99167:99211	720699	0	True				
ANR	720719	OrExpression	add -> value == 0 || to -> mmd . max < add -> mmd . min		720699	0		||			
ANR	720720	EqualityExpression	add -> value == 0		720699	0		==			
ANR	720721	PtrMemberAccess	add -> value		720699	0					
ANR	720722	Identifier	add		720699	0					
ANR	720723	Identifier	value		720699	1					
ANR	720724	PrimaryExpression	0		720699	1					
ANR	720725	RelationalExpression	to -> mmd . max < add -> mmd . min		720699	1		<			
ANR	720726	MemberAccess	to -> mmd . max		720699	0					
ANR	720727	PtrMemberAccess	to -> mmd		720699	0					
ANR	720728	Identifier	to		720699	0					
ANR	720729	Identifier	mmd		720699	1					
ANR	720730	Identifier	max		720699	1					
ANR	720731	MemberAccess	add -> mmd . min		720699	1					
ANR	720732	PtrMemberAccess	add -> mmd		720699	0					
ANR	720733	Identifier	add		720699	0					
ANR	720734	Identifier	mmd		720699	1					
ANR	720735	Identifier	min		720699	1					
ANR	720736	CompoundStatement		6:53:158:158	720699	1					
ANR	720737	ExpressionStatement	clear_opt_map_info ( to )	4419:4:99220:99242	720699	0	True				
ANR	720738	CallExpression	clear_opt_map_info ( to )		720699	0					
ANR	720739	Callee	clear_opt_map_info		720699	0					
ANR	720740	Identifier	clear_opt_map_info		720699	0					
ANR	720741	ArgumentList	to		720699	1					
ANR	720742	Argument	to		720699	0					
ANR	720743	Identifier	to		720699	0					
ANR	720744	ReturnStatement	return ;	4420:4:99248:99255	720699	1	True				
ANR	720745	ExpressionStatement	"alt_merge_mml ( & to -> mmd , & add -> mmd )"	4423:2:99264:99298	720699	3	True				
ANR	720746	CallExpression	"alt_merge_mml ( & to -> mmd , & add -> mmd )"		720699	0					
ANR	720747	Callee	alt_merge_mml		720699	0					
ANR	720748	Identifier	alt_merge_mml		720699	0					
ANR	720749	ArgumentList	& to -> mmd		720699	1					
ANR	720750	Argument	& to -> mmd		720699	0					
ANR	720751	UnaryOperationExpression	& to -> mmd		720699	0					
ANR	720752	UnaryOperator	&		720699	0					
ANR	720753	PtrMemberAccess	to -> mmd		720699	1					
ANR	720754	Identifier	to		720699	0					
ANR	720755	Identifier	mmd		720699	1					
ANR	720756	Argument	& add -> mmd		720699	1					
ANR	720757	UnaryOperationExpression	& add -> mmd		720699	0					
ANR	720758	UnaryOperator	&		720699	0					
ANR	720759	PtrMemberAccess	add -> mmd		720699	1					
ANR	720760	Identifier	add		720699	0					
ANR	720761	Identifier	mmd		720699	1					
ANR	720762	ExpressionStatement	val = 0	4425:2:99303:99310	720699	4	True				
ANR	720763	AssignmentExpression	val = 0		720699	0		=			
ANR	720764	Identifier	val		720699	0					
ANR	720765	PrimaryExpression	0		720699	1					
ANR	720766	ForStatement	for ( i = 0 ; i < ONIG_CHAR_TABLE_SIZE ; i ++ )		720699	5					
ANR	720767	ForInit	i = 0 ;	4426:7:99319:99324	720699	0	True				
ANR	720768	AssignmentExpression	i = 0		720699	0		=			
ANR	720769	Identifier	i		720699	0					
ANR	720770	PrimaryExpression	0		720699	1					
ANR	720771	Condition	i < ONIG_CHAR_TABLE_SIZE	4426:14:99326:99349	720699	1	True				
ANR	720772	RelationalExpression	i < ONIG_CHAR_TABLE_SIZE		720699	0		<			
ANR	720773	Identifier	i		720699	0					
ANR	720774	Identifier	ONIG_CHAR_TABLE_SIZE		720699	1					
ANR	720775	PostIncDecOperationExpression	i ++	4426:40:99352:99354	720699	2	True				
ANR	720776	Identifier	i		720699	0					
ANR	720777	IncDec	++		720699	1					
ANR	720778	CompoundStatement		14:45:301:301	720699	3					
ANR	720779	IfStatement	if ( add -> map [ i ] )		720699	0					
ANR	720780	Condition	add -> map [ i ]	4427:8:99367:99377	720699	0	True				
ANR	720781	ArrayIndexing	add -> map [ i ]		720699	0					
ANR	720782	PtrMemberAccess	add -> map		720699	0					
ANR	720783	Identifier	add		720699	0					
ANR	720784	Identifier	map		720699	1					
ANR	720785	Identifier	i		720699	1					
ANR	720786	ExpressionStatement	to -> map [ i ] = 1	4428:6:99386:99400	720699	1	True				
ANR	720787	AssignmentExpression	to -> map [ i ] = 1		720699	0		=			
ANR	720788	ArrayIndexing	to -> map [ i ]		720699	0					
ANR	720789	PtrMemberAccess	to -> map		720699	0					
ANR	720790	Identifier	to		720699	0					
ANR	720791	Identifier	map		720699	1					
ANR	720792	Identifier	i		720699	1					
ANR	720793	PrimaryExpression	1		720699	1					
ANR	720794	IfStatement	if ( to -> map [ i ] )		720699	1					
ANR	720795	Condition	to -> map [ i ]	4430:8:99411:99420	720699	0	True				
ANR	720796	ArrayIndexing	to -> map [ i ]		720699	0					
ANR	720797	PtrMemberAccess	to -> map		720699	0					
ANR	720798	Identifier	to		720699	0					
ANR	720799	Identifier	map		720699	1					
ANR	720800	Identifier	i		720699	1					
ANR	720801	ExpressionStatement	"val += map_position_value ( enc , i )"	4431:6:99429:99462	720699	1	True				
ANR	720802	AssignmentExpression	"val += map_position_value ( enc , i )"		720699	0		+=			
ANR	720803	Identifier	val		720699	0					
ANR	720804	CallExpression	"map_position_value ( enc , i )"		720699	1					
ANR	720805	Callee	map_position_value		720699	0					
ANR	720806	Identifier	map_position_value		720699	0					
ANR	720807	ArgumentList	enc		720699	1					
ANR	720808	Argument	enc		720699	0					
ANR	720809	Identifier	enc		720699	0					
ANR	720810	Argument	i		720699	1					
ANR	720811	Identifier	i		720699	0					
ANR	720812	ExpressionStatement	to -> value = val	4433:2:99470:99485	720699	6	True				
ANR	720813	AssignmentExpression	to -> value = val		720699	0		=			
ANR	720814	PtrMemberAccess	to -> value		720699	0					
ANR	720815	Identifier	to		720699	0					
ANR	720816	Identifier	value		720699	1					
ANR	720817	Identifier	val		720699	1					
ANR	720818	ExpressionStatement	"alt_merge_opt_anc_info ( & to -> anc , & add -> anc )"	4435:2:99490:99533	720699	7	True				
ANR	720819	CallExpression	"alt_merge_opt_anc_info ( & to -> anc , & add -> anc )"		720699	0					
ANR	720820	Callee	alt_merge_opt_anc_info		720699	0					
ANR	720821	Identifier	alt_merge_opt_anc_info		720699	0					
ANR	720822	ArgumentList	& to -> anc		720699	1					
ANR	720823	Argument	& to -> anc		720699	0					
ANR	720824	UnaryOperationExpression	& to -> anc		720699	0					
ANR	720825	UnaryOperator	&		720699	0					
ANR	720826	PtrMemberAccess	to -> anc		720699	1					
ANR	720827	Identifier	to		720699	0					
ANR	720828	Identifier	anc		720699	1					
ANR	720829	Argument	& add -> anc		720699	1					
ANR	720830	UnaryOperationExpression	& add -> anc		720699	0					
ANR	720831	UnaryOperator	&		720699	0					
ANR	720832	PtrMemberAccess	add -> anc		720699	1					
ANR	720833	Identifier	add		720699	0					
ANR	720834	Identifier	anc		720699	1					
ANR	720835	ReturnType	static void		720699	1					
ANR	720836	Identifier	alt_merge_opt_map_info		720699	2					
ANR	720837	ParameterList	"OnigEncoding enc , OptMapInfo * to , OptMapInfo * add"		720699	3					
ANR	720838	Parameter	OnigEncoding enc	4412:23:99004:99019	720699	0	True				
ANR	720839	ParameterType	OnigEncoding		720699	0					
ANR	720840	Identifier	enc		720699	1					
ANR	720841	Parameter	OptMapInfo * to	4412:41:99022:99035	720699	1	True				
ANR	720842	ParameterType	OptMapInfo *		720699	0					
ANR	720843	Identifier	to		720699	1					
ANR	720844	Parameter	OptMapInfo * add	4412:57:99038:99052	720699	2	True				
ANR	720845	ParameterType	OptMapInfo *		720699	0					
ANR	720846	Identifier	add		720699	1					
ANR	720847	CFGEntryNode	ENTRY		720699		True				
ANR	720848	CFGExitNode	EXIT		720699		True				
ANR	720849	Symbol	to -> map		720699						
ANR	720850	Symbol	map_position_value		720699						
ANR	720851	Symbol	to -> mmd . max		720699						
ANR	720852	Symbol	& add -> anc		720699						
ANR	720853	Symbol	* add -> map		720699						
ANR	720854	Symbol	enc		720699						
ANR	720855	Symbol	add -> mmd . min		720699						
ANR	720856	Symbol	add -> map		720699						
ANR	720857	Symbol	* to -> map		720699						
ANR	720858	Symbol	add		720699						
ANR	720859	Symbol	val		720699						
ANR	720860	Symbol	* to		720699						
ANR	720861	Symbol	to -> value		720699						
ANR	720862	Symbol	& to -> anc		720699						
ANR	720863	Symbol	add -> value		720699						
ANR	720864	Symbol	add -> mmd		720699						
ANR	720865	Symbol	* * to		720699						
ANR	720866	Symbol	i		720699						
ANR	720867	Symbol	to -> mmd		720699						
ANR	720868	Symbol	& add -> mmd		720699						
ANR	720869	Symbol	& to -> mmd		720699						
ANR	720870	Symbol	ONIG_CHAR_TABLE_SIZE		720699						
ANR	720871	Symbol	* i		720699						
ANR	720872	Symbol	* add		720699						
ANR	720873	Symbol	* * add		720699						
ANR	720874	Symbol	to		720699						
ANR	720875	Function	set_bound_node_opt_info	4438:0:99538:99715							
ANR	720876	FunctionDef	"set_bound_node_opt_info (NodeOptInfo * opt , MinMaxLen * mmd)"		720875	0					
ANR	720877	CompoundStatement		4440:0:99608:99715	720875	0					
ANR	720878	ExpressionStatement	"copy_mml ( & ( opt -> exb . mmd ) , mmd )"	4441:2:99612:99643	720875	0	True				
ANR	720879	CallExpression	"copy_mml ( & ( opt -> exb . mmd ) , mmd )"		720875	0					
ANR	720880	Callee	copy_mml		720875	0					
ANR	720881	Identifier	copy_mml		720875	0					
ANR	720882	ArgumentList	& ( opt -> exb . mmd )		720875	1					
ANR	720883	Argument	& ( opt -> exb . mmd )		720875	0					
ANR	720884	UnaryOperationExpression	& ( opt -> exb . mmd )		720875	0					
ANR	720885	UnaryOperator	&		720875	0					
ANR	720886	MemberAccess	opt -> exb . mmd		720875	1					
ANR	720887	PtrMemberAccess	opt -> exb		720875	0					
ANR	720888	Identifier	opt		720875	0					
ANR	720889	Identifier	exb		720875	1					
ANR	720890	Identifier	mmd		720875	1					
ANR	720891	Argument	mmd		720875	1					
ANR	720892	Identifier	mmd		720875	0					
ANR	720893	ExpressionStatement	"copy_mml ( & ( opt -> expr . mmd ) , mmd )"	4442:2:99647:99678	720875	1	True				
ANR	720894	CallExpression	"copy_mml ( & ( opt -> expr . mmd ) , mmd )"		720875	0					
ANR	720895	Callee	copy_mml		720875	0					
ANR	720896	Identifier	copy_mml		720875	0					
ANR	720897	ArgumentList	& ( opt -> expr . mmd )		720875	1					
ANR	720898	Argument	& ( opt -> expr . mmd )		720875	0					
ANR	720899	UnaryOperationExpression	& ( opt -> expr . mmd )		720875	0					
ANR	720900	UnaryOperator	&		720875	0					
ANR	720901	MemberAccess	opt -> expr . mmd		720875	1					
ANR	720902	PtrMemberAccess	opt -> expr		720875	0					
ANR	720903	Identifier	opt		720875	0					
ANR	720904	Identifier	expr		720875	1					
ANR	720905	Identifier	mmd		720875	1					
ANR	720906	Argument	mmd		720875	1					
ANR	720907	Identifier	mmd		720875	0					
ANR	720908	ExpressionStatement	"copy_mml ( & ( opt -> map . mmd ) , mmd )"	4443:2:99682:99713	720875	2	True				
ANR	720909	CallExpression	"copy_mml ( & ( opt -> map . mmd ) , mmd )"		720875	0					
ANR	720910	Callee	copy_mml		720875	0					
ANR	720911	Identifier	copy_mml		720875	0					
ANR	720912	ArgumentList	& ( opt -> map . mmd )		720875	1					
ANR	720913	Argument	& ( opt -> map . mmd )		720875	0					
ANR	720914	UnaryOperationExpression	& ( opt -> map . mmd )		720875	0					
ANR	720915	UnaryOperator	&		720875	0					
ANR	720916	MemberAccess	opt -> map . mmd		720875	1					
ANR	720917	PtrMemberAccess	opt -> map		720875	0					
ANR	720918	Identifier	opt		720875	0					
ANR	720919	Identifier	map		720875	1					
ANR	720920	Identifier	mmd		720875	1					
ANR	720921	Argument	mmd		720875	1					
ANR	720922	Identifier	mmd		720875	0					
ANR	720923	ReturnType	static void		720875	1					
ANR	720924	Identifier	set_bound_node_opt_info		720875	2					
ANR	720925	ParameterList	"NodeOptInfo * opt , MinMaxLen * mmd"		720875	3					
ANR	720926	Parameter	NodeOptInfo * opt	4439:24:99574:99589	720875	0	True				
ANR	720927	ParameterType	NodeOptInfo *		720875	0					
ANR	720928	Identifier	opt		720875	1					
ANR	720929	Parameter	MinMaxLen * mmd	4439:42:99592:99605	720875	1	True				
ANR	720930	ParameterType	MinMaxLen *		720875	0					
ANR	720931	Identifier	mmd		720875	1					
ANR	720932	CFGEntryNode	ENTRY		720875		True				
ANR	720933	CFGExitNode	EXIT		720875		True				
ANR	720934	Symbol	opt -> exb		720875						
ANR	720935	Symbol	opt		720875						
ANR	720936	Symbol	mmd		720875						
ANR	720937	Symbol	& opt -> map		720875						
ANR	720938	Symbol	& opt -> exb . mmd		720875						
ANR	720939	Symbol	& opt -> exb		720875						
ANR	720940	Symbol	opt -> map		720875						
ANR	720941	Symbol	& opt -> map . mmd		720875						
ANR	720942	Symbol	& opt -> expr . mmd		720875						
ANR	720943	Symbol	* opt		720875						
ANR	720944	Symbol	opt -> expr		720875						
ANR	720945	Symbol	& opt -> expr		720875						
ANR	720946	Function	clear_node_opt_info	4446:0:99718:99966							
ANR	720947	FunctionDef	clear_node_opt_info (NodeOptInfo * opt)		720946	0					
ANR	720948	CompoundStatement		4448:0:99768:99966	720946	0					
ANR	720949	ExpressionStatement	clear_mml ( & opt -> len )	4449:2:99772:99792	720946	0	True				
ANR	720950	CallExpression	clear_mml ( & opt -> len )		720946	0					
ANR	720951	Callee	clear_mml		720946	0					
ANR	720952	Identifier	clear_mml		720946	0					
ANR	720953	ArgumentList	& opt -> len		720946	1					
ANR	720954	Argument	& opt -> len		720946	0					
ANR	720955	UnaryOperationExpression	& opt -> len		720946	0					
ANR	720956	UnaryOperator	&		720946	0					
ANR	720957	PtrMemberAccess	opt -> len		720946	1					
ANR	720958	Identifier	opt		720946	0					
ANR	720959	Identifier	len		720946	1					
ANR	720960	ExpressionStatement	clear_opt_anc_info ( & opt -> anc )	4450:2:99796:99825	720946	1	True				
ANR	720961	CallExpression	clear_opt_anc_info ( & opt -> anc )		720946	0					
ANR	720962	Callee	clear_opt_anc_info		720946	0					
ANR	720963	Identifier	clear_opt_anc_info		720946	0					
ANR	720964	ArgumentList	& opt -> anc		720946	1					
ANR	720965	Argument	& opt -> anc		720946	0					
ANR	720966	UnaryOperationExpression	& opt -> anc		720946	0					
ANR	720967	UnaryOperator	&		720946	0					
ANR	720968	PtrMemberAccess	opt -> anc		720946	1					
ANR	720969	Identifier	opt		720946	0					
ANR	720970	Identifier	anc		720946	1					
ANR	720971	ExpressionStatement	clear_opt_exact_info ( & opt -> exb )	4451:2:99829:99860	720946	2	True				
ANR	720972	CallExpression	clear_opt_exact_info ( & opt -> exb )		720946	0					
ANR	720973	Callee	clear_opt_exact_info		720946	0					
ANR	720974	Identifier	clear_opt_exact_info		720946	0					
ANR	720975	ArgumentList	& opt -> exb		720946	1					
ANR	720976	Argument	& opt -> exb		720946	0					
ANR	720977	UnaryOperationExpression	& opt -> exb		720946	0					
ANR	720978	UnaryOperator	&		720946	0					
ANR	720979	PtrMemberAccess	opt -> exb		720946	1					
ANR	720980	Identifier	opt		720946	0					
ANR	720981	Identifier	exb		720946	1					
ANR	720982	ExpressionStatement	clear_opt_exact_info ( & opt -> exm )	4452:2:99864:99895	720946	3	True				
ANR	720983	CallExpression	clear_opt_exact_info ( & opt -> exm )		720946	0					
ANR	720984	Callee	clear_opt_exact_info		720946	0					
ANR	720985	Identifier	clear_opt_exact_info		720946	0					
ANR	720986	ArgumentList	& opt -> exm		720946	1					
ANR	720987	Argument	& opt -> exm		720946	0					
ANR	720988	UnaryOperationExpression	& opt -> exm		720946	0					
ANR	720989	UnaryOperator	&		720946	0					
ANR	720990	PtrMemberAccess	opt -> exm		720946	1					
ANR	720991	Identifier	opt		720946	0					
ANR	720992	Identifier	exm		720946	1					
ANR	720993	ExpressionStatement	clear_opt_exact_info ( & opt -> expr )	4453:2:99899:99931	720946	4	True				
ANR	720994	CallExpression	clear_opt_exact_info ( & opt -> expr )		720946	0					
ANR	720995	Callee	clear_opt_exact_info		720946	0					
ANR	720996	Identifier	clear_opt_exact_info		720946	0					
ANR	720997	ArgumentList	& opt -> expr		720946	1					
ANR	720998	Argument	& opt -> expr		720946	0					
ANR	720999	UnaryOperationExpression	& opt -> expr		720946	0					
ANR	721000	UnaryOperator	&		720946	0					
ANR	721001	PtrMemberAccess	opt -> expr		720946	1					
ANR	721002	Identifier	opt		720946	0					
ANR	721003	Identifier	expr		720946	1					
ANR	721004	ExpressionStatement	clear_opt_map_info ( & opt -> map )	4454:2:99935:99964	720946	5	True				
ANR	721005	CallExpression	clear_opt_map_info ( & opt -> map )		720946	0					
ANR	721006	Callee	clear_opt_map_info		720946	0					
ANR	721007	Identifier	clear_opt_map_info		720946	0					
ANR	721008	ArgumentList	& opt -> map		720946	1					
ANR	721009	Argument	& opt -> map		720946	0					
ANR	721010	UnaryOperationExpression	& opt -> map		720946	0					
ANR	721011	UnaryOperator	&		720946	0					
ANR	721012	PtrMemberAccess	opt -> map		720946	1					
ANR	721013	Identifier	opt		720946	0					
ANR	721014	Identifier	map		720946	1					
ANR	721015	ReturnType	static void		720946	1					
ANR	721016	Identifier	clear_node_opt_info		720946	2					
ANR	721017	ParameterList	NodeOptInfo * opt		720946	3					
ANR	721018	Parameter	NodeOptInfo * opt	4447:20:99750:99765	720946	0	True				
ANR	721019	ParameterType	NodeOptInfo *		720946	0					
ANR	721020	Identifier	opt		720946	1					
ANR	721021	CFGEntryNode	ENTRY		720946		True				
ANR	721022	CFGExitNode	EXIT		720946		True				
ANR	721023	Symbol	opt		720946						
ANR	721024	Symbol	& opt -> exm		720946						
ANR	721025	Symbol	& opt -> map		720946						
ANR	721026	Symbol	& opt -> exb		720946						
ANR	721027	Symbol	& opt -> len		720946						
ANR	721028	Symbol	& opt -> anc		720946						
ANR	721029	Symbol	& opt -> expr		720946						
ANR	721030	Function	copy_node_opt_info	4457:0:99969:100053							
ANR	721031	FunctionDef	"copy_node_opt_info (NodeOptInfo * to , NodeOptInfo * from)"		721030	0					
ANR	721032	CompoundStatement		4459:0:100036:100053	721030	0					
ANR	721033	ExpressionStatement	* to = * from	4460:2:100040:100051	721030	0	True				
ANR	721034	AssignmentExpression	* to = * from		721030	0		=			
ANR	721035	UnaryOperationExpression	* to		721030	0					
ANR	721036	UnaryOperator	*		721030	0					
ANR	721037	Identifier	to		721030	1					
ANR	721038	UnaryOperationExpression	* from		721030	1					
ANR	721039	UnaryOperator	*		721030	0					
ANR	721040	Identifier	from		721030	1					
ANR	721041	ReturnType	static void		721030	1					
ANR	721042	Identifier	copy_node_opt_info		721030	2					
ANR	721043	ParameterList	"NodeOptInfo * to , NodeOptInfo * from"		721030	3					
ANR	721044	Parameter	NodeOptInfo * to	4458:19:100000:100014	721030	0	True				
ANR	721045	ParameterType	NodeOptInfo *		721030	0					
ANR	721046	Identifier	to		721030	1					
ANR	721047	Parameter	NodeOptInfo * from	4458:36:100017:100033	721030	1	True				
ANR	721048	ParameterType	NodeOptInfo *		721030	0					
ANR	721049	Identifier	from		721030	1					
ANR	721050	CFGEntryNode	ENTRY		721030		True				
ANR	721051	CFGExitNode	EXIT		721030		True				
ANR	721052	Symbol	* to		721030						
ANR	721053	Symbol	from		721030						
ANR	721054	Symbol	to		721030						
ANR	721055	Symbol	* from		721030						
ANR	721056	Function	concat_left_node_opt_info	4463:0:100056:101602							
ANR	721057	FunctionDef	"concat_left_node_opt_info (OnigEncoding enc , NodeOptInfo * to , NodeOptInfo * add)"		721056	0					
ANR	721058	CompoundStatement		4465:0:100147:101602	721056	0					
ANR	721059	IdentifierDeclStatement	"int exb_reach , exm_reach ;"	4466:2:100151:100175	721056	0	True				
ANR	721060	IdentifierDecl	exb_reach		721056	0					
ANR	721061	IdentifierDeclType	int		721056	0					
ANR	721062	Identifier	exb_reach		721056	1					
ANR	721063	IdentifierDecl	exm_reach		721056	1					
ANR	721064	IdentifierDeclType	int		721056	0					
ANR	721065	Identifier	exm_reach		721056	1					
ANR	721066	IdentifierDeclStatement	OptAncInfo tanc ;	4467:2:100179:100194	721056	1	True				
ANR	721067	IdentifierDecl	tanc		721056	0					
ANR	721068	IdentifierDeclType	OptAncInfo		721056	0					
ANR	721069	Identifier	tanc		721056	1					
ANR	721070	ExpressionStatement	"concat_opt_anc_info ( & tanc , & to -> anc , & add -> anc , to -> len . max , add -> len . max )"	4469:2:100199:100273	721056	2	True				
ANR	721071	CallExpression	"concat_opt_anc_info ( & tanc , & to -> anc , & add -> anc , to -> len . max , add -> len . max )"		721056	0					
ANR	721072	Callee	concat_opt_anc_info		721056	0					
ANR	721073	Identifier	concat_opt_anc_info		721056	0					
ANR	721074	ArgumentList	& tanc		721056	1					
ANR	721075	Argument	& tanc		721056	0					
ANR	721076	UnaryOperationExpression	& tanc		721056	0					
ANR	721077	UnaryOperator	&		721056	0					
ANR	721078	Identifier	tanc		721056	1					
ANR	721079	Argument	& to -> anc		721056	1					
ANR	721080	UnaryOperationExpression	& to -> anc		721056	0					
ANR	721081	UnaryOperator	&		721056	0					
ANR	721082	PtrMemberAccess	to -> anc		721056	1					
ANR	721083	Identifier	to		721056	0					
ANR	721084	Identifier	anc		721056	1					
ANR	721085	Argument	& add -> anc		721056	2					
ANR	721086	UnaryOperationExpression	& add -> anc		721056	0					
ANR	721087	UnaryOperator	&		721056	0					
ANR	721088	PtrMemberAccess	add -> anc		721056	1					
ANR	721089	Identifier	add		721056	0					
ANR	721090	Identifier	anc		721056	1					
ANR	721091	Argument	to -> len . max		721056	3					
ANR	721092	MemberAccess	to -> len . max		721056	0					
ANR	721093	PtrMemberAccess	to -> len		721056	0					
ANR	721094	Identifier	to		721056	0					
ANR	721095	Identifier	len		721056	1					
ANR	721096	Identifier	max		721056	1					
ANR	721097	Argument	add -> len . max		721056	4					
ANR	721098	MemberAccess	add -> len . max		721056	0					
ANR	721099	PtrMemberAccess	add -> len		721056	0					
ANR	721100	Identifier	add		721056	0					
ANR	721101	Identifier	len		721056	1					
ANR	721102	Identifier	max		721056	1					
ANR	721103	ExpressionStatement	"copy_opt_anc_info ( & to -> anc , & tanc )"	4470:2:100277:100311	721056	3	True				
ANR	721104	CallExpression	"copy_opt_anc_info ( & to -> anc , & tanc )"		721056	0					
ANR	721105	Callee	copy_opt_anc_info		721056	0					
ANR	721106	Identifier	copy_opt_anc_info		721056	0					
ANR	721107	ArgumentList	& to -> anc		721056	1					
ANR	721108	Argument	& to -> anc		721056	0					
ANR	721109	UnaryOperationExpression	& to -> anc		721056	0					
ANR	721110	UnaryOperator	&		721056	0					
ANR	721111	PtrMemberAccess	to -> anc		721056	1					
ANR	721112	Identifier	to		721056	0					
ANR	721113	Identifier	anc		721056	1					
ANR	721114	Argument	& tanc		721056	1					
ANR	721115	UnaryOperationExpression	& tanc		721056	0					
ANR	721116	UnaryOperator	&		721056	0					
ANR	721117	Identifier	tanc		721056	1					
ANR	721118	IfStatement	if ( add -> exb . len > 0 && to -> len . max == 0 )		721056	4					
ANR	721119	Condition	add -> exb . len > 0 && to -> len . max == 0	4472:6:100320:100355	721056	0	True				
ANR	721120	AndExpression	add -> exb . len > 0 && to -> len . max == 0		721056	0		&&			
ANR	721121	RelationalExpression	add -> exb . len > 0		721056	0		>			
ANR	721122	MemberAccess	add -> exb . len		721056	0					
ANR	721123	PtrMemberAccess	add -> exb		721056	0					
ANR	721124	Identifier	add		721056	0					
ANR	721125	Identifier	exb		721056	1					
ANR	721126	Identifier	len		721056	1					
ANR	721127	PrimaryExpression	0		721056	1					
ANR	721128	EqualityExpression	to -> len . max == 0		721056	1		==			
ANR	721129	MemberAccess	to -> len . max		721056	0					
ANR	721130	PtrMemberAccess	to -> len		721056	0					
ANR	721131	Identifier	to		721056	0					
ANR	721132	Identifier	len		721056	1					
ANR	721133	Identifier	max		721056	1					
ANR	721134	PrimaryExpression	0		721056	1					
ANR	721135	CompoundStatement		8:44:210:210	721056	1					
ANR	721136	ExpressionStatement	"concat_opt_anc_info ( & tanc , & to -> anc , & add -> exb . anc , to -> len . max , add -> len . max )"	4473:4:100364:100445	721056	0	True				
ANR	721137	CallExpression	"concat_opt_anc_info ( & tanc , & to -> anc , & add -> exb . anc , to -> len . max , add -> len . max )"		721056	0					
ANR	721138	Callee	concat_opt_anc_info		721056	0					
ANR	721139	Identifier	concat_opt_anc_info		721056	0					
ANR	721140	ArgumentList	& tanc		721056	1					
ANR	721141	Argument	& tanc		721056	0					
ANR	721142	UnaryOperationExpression	& tanc		721056	0					
ANR	721143	UnaryOperator	&		721056	0					
ANR	721144	Identifier	tanc		721056	1					
ANR	721145	Argument	& to -> anc		721056	1					
ANR	721146	UnaryOperationExpression	& to -> anc		721056	0					
ANR	721147	UnaryOperator	&		721056	0					
ANR	721148	PtrMemberAccess	to -> anc		721056	1					
ANR	721149	Identifier	to		721056	0					
ANR	721150	Identifier	anc		721056	1					
ANR	721151	Argument	& add -> exb . anc		721056	2					
ANR	721152	UnaryOperationExpression	& add -> exb . anc		721056	0					
ANR	721153	UnaryOperator	&		721056	0					
ANR	721154	MemberAccess	add -> exb . anc		721056	1					
ANR	721155	PtrMemberAccess	add -> exb		721056	0					
ANR	721156	Identifier	add		721056	0					
ANR	721157	Identifier	exb		721056	1					
ANR	721158	Identifier	anc		721056	1					
ANR	721159	Argument	to -> len . max		721056	3					
ANR	721160	MemberAccess	to -> len . max		721056	0					
ANR	721161	PtrMemberAccess	to -> len		721056	0					
ANR	721162	Identifier	to		721056	0					
ANR	721163	Identifier	len		721056	1					
ANR	721164	Identifier	max		721056	1					
ANR	721165	Argument	add -> len . max		721056	4					
ANR	721166	MemberAccess	add -> len . max		721056	0					
ANR	721167	PtrMemberAccess	add -> len		721056	0					
ANR	721168	Identifier	add		721056	0					
ANR	721169	Identifier	len		721056	1					
ANR	721170	Identifier	max		721056	1					
ANR	721171	ExpressionStatement	"copy_opt_anc_info ( & add -> exb . anc , & tanc )"	4475:4:100451:100490	721056	1	True				
ANR	721172	CallExpression	"copy_opt_anc_info ( & add -> exb . anc , & tanc )"		721056	0					
ANR	721173	Callee	copy_opt_anc_info		721056	0					
ANR	721174	Identifier	copy_opt_anc_info		721056	0					
ANR	721175	ArgumentList	& add -> exb . anc		721056	1					
ANR	721176	Argument	& add -> exb . anc		721056	0					
ANR	721177	UnaryOperationExpression	& add -> exb . anc		721056	0					
ANR	721178	UnaryOperator	&		721056	0					
ANR	721179	MemberAccess	add -> exb . anc		721056	1					
ANR	721180	PtrMemberAccess	add -> exb		721056	0					
ANR	721181	Identifier	add		721056	0					
ANR	721182	Identifier	exb		721056	1					
ANR	721183	Identifier	anc		721056	1					
ANR	721184	Argument	& tanc		721056	1					
ANR	721185	UnaryOperationExpression	& tanc		721056	0					
ANR	721186	UnaryOperator	&		721056	0					
ANR	721187	Identifier	tanc		721056	1					
ANR	721188	IfStatement	if ( add -> map . value > 0 && to -> len . max == 0 )		721056	5					
ANR	721189	Condition	add -> map . value > 0 && to -> len . max == 0	4478:6:100503:100540	721056	0	True				
ANR	721190	AndExpression	add -> map . value > 0 && to -> len . max == 0		721056	0		&&			
ANR	721191	RelationalExpression	add -> map . value > 0		721056	0		>			
ANR	721192	MemberAccess	add -> map . value		721056	0					
ANR	721193	PtrMemberAccess	add -> map		721056	0					
ANR	721194	Identifier	add		721056	0					
ANR	721195	Identifier	map		721056	1					
ANR	721196	Identifier	value		721056	1					
ANR	721197	PrimaryExpression	0		721056	1					
ANR	721198	EqualityExpression	to -> len . max == 0		721056	1		==			
ANR	721199	MemberAccess	to -> len . max		721056	0					
ANR	721200	PtrMemberAccess	to -> len		721056	0					
ANR	721201	Identifier	to		721056	0					
ANR	721202	Identifier	len		721056	1					
ANR	721203	Identifier	max		721056	1					
ANR	721204	PrimaryExpression	0		721056	1					
ANR	721205	CompoundStatement		14:46:395:395	721056	1					
ANR	721206	IfStatement	if ( add -> map . mmd . max == 0 )		721056	0					
ANR	721207	Condition	add -> map . mmd . max == 0	4479:8:100553:100573	721056	0	True				
ANR	721208	EqualityExpression	add -> map . mmd . max == 0		721056	0		==			
ANR	721209	MemberAccess	add -> map . mmd . max		721056	0					
ANR	721210	MemberAccess	add -> map . mmd		721056	0					
ANR	721211	PtrMemberAccess	add -> map		721056	0					
ANR	721212	Identifier	add		721056	0					
ANR	721213	Identifier	map		721056	1					
ANR	721214	Identifier	mmd		721056	1					
ANR	721215	Identifier	max		721056	1					
ANR	721216	PrimaryExpression	0		721056	1					
ANR	721217	ExpressionStatement	add -> map . anc . left_anchor |= to -> anc . left_anchor	4480:6:100582:100629	721056	1	True				
ANR	721218	AssignmentExpression	add -> map . anc . left_anchor |= to -> anc . left_anchor		721056	0		|=			
ANR	721219	MemberAccess	add -> map . anc . left_anchor		721056	0					
ANR	721220	MemberAccess	add -> map . anc		721056	0					
ANR	721221	PtrMemberAccess	add -> map		721056	0					
ANR	721222	Identifier	add		721056	0					
ANR	721223	Identifier	map		721056	1					
ANR	721224	Identifier	anc		721056	1					
ANR	721225	Identifier	left_anchor		721056	1					
ANR	721226	MemberAccess	to -> anc . left_anchor		721056	1					
ANR	721227	PtrMemberAccess	to -> anc		721056	0					
ANR	721228	Identifier	to		721056	0					
ANR	721229	Identifier	anc		721056	1					
ANR	721230	Identifier	left_anchor		721056	1					
ANR	721231	ExpressionStatement	exb_reach = to -> exb . reach_end	4483:2:100638:100667	721056	6	True				
ANR	721232	AssignmentExpression	exb_reach = to -> exb . reach_end		721056	0		=			
ANR	721233	Identifier	exb_reach		721056	0					
ANR	721234	MemberAccess	to -> exb . reach_end		721056	1					
ANR	721235	PtrMemberAccess	to -> exb		721056	0					
ANR	721236	Identifier	to		721056	0					
ANR	721237	Identifier	exb		721056	1					
ANR	721238	Identifier	reach_end		721056	1					
ANR	721239	ExpressionStatement	exm_reach = to -> exm . reach_end	4484:2:100671:100700	721056	7	True				
ANR	721240	AssignmentExpression	exm_reach = to -> exm . reach_end		721056	0		=			
ANR	721241	Identifier	exm_reach		721056	0					
ANR	721242	MemberAccess	to -> exm . reach_end		721056	1					
ANR	721243	PtrMemberAccess	to -> exm		721056	0					
ANR	721244	Identifier	to		721056	0					
ANR	721245	Identifier	exm		721056	1					
ANR	721246	Identifier	reach_end		721056	1					
ANR	721247	IfStatement	if ( add -> len . max != 0 )		721056	8					
ANR	721248	Condition	add -> len . max != 0	4486:6:100709:100725	721056	0	True				
ANR	721249	EqualityExpression	add -> len . max != 0		721056	0		!=			
ANR	721250	MemberAccess	add -> len . max		721056	0					
ANR	721251	PtrMemberAccess	add -> len		721056	0					
ANR	721252	Identifier	add		721056	0					
ANR	721253	Identifier	len		721056	1					
ANR	721254	Identifier	max		721056	1					
ANR	721255	PrimaryExpression	0		721056	1					
ANR	721256	ExpressionStatement	to -> exb . reach_end = to -> exm . reach_end = 0	4487:4:100732:100773	721056	1	True				
ANR	721257	AssignmentExpression	to -> exb . reach_end = to -> exm . reach_end = 0		721056	0		=			
ANR	721258	MemberAccess	to -> exb . reach_end		721056	0					
ANR	721259	PtrMemberAccess	to -> exb		721056	0					
ANR	721260	Identifier	to		721056	0					
ANR	721261	Identifier	exb		721056	1					
ANR	721262	Identifier	reach_end		721056	1					
ANR	721263	AssignmentExpression	to -> exm . reach_end = 0		721056	1		=			
ANR	721264	MemberAccess	to -> exm . reach_end		721056	0					
ANR	721265	PtrMemberAccess	to -> exm		721056	0					
ANR	721266	Identifier	to		721056	0					
ANR	721267	Identifier	exm		721056	1					
ANR	721268	Identifier	reach_end		721056	1					
ANR	721269	PrimaryExpression	0		721056	1					
ANR	721270	IfStatement	if ( add -> exb . len > 0 )		721056	9					
ANR	721271	Condition	add -> exb . len > 0	4489:6:100782:100797	721056	0	True				
ANR	721272	RelationalExpression	add -> exb . len > 0		721056	0		>			
ANR	721273	MemberAccess	add -> exb . len		721056	0					
ANR	721274	PtrMemberAccess	add -> exb		721056	0					
ANR	721275	Identifier	add		721056	0					
ANR	721276	Identifier	exb		721056	1					
ANR	721277	Identifier	len		721056	1					
ANR	721278	PrimaryExpression	0		721056	1					
ANR	721279	CompoundStatement		25:24:652:652	721056	1					
ANR	721280	IfStatement	if ( exb_reach )		721056	0					
ANR	721281	Condition	exb_reach	4490:8:100810:100818	721056	0	True				
ANR	721282	Identifier	exb_reach		721056	0					
ANR	721283	CompoundStatement		26:19:673:673	721056	1					
ANR	721284	ExpressionStatement	"concat_opt_exact_info ( & to -> exb , & add -> exb , enc )"	4491:6:100829:100876	721056	0	True				
ANR	721285	CallExpression	"concat_opt_exact_info ( & to -> exb , & add -> exb , enc )"		721056	0					
ANR	721286	Callee	concat_opt_exact_info		721056	0					
ANR	721287	Identifier	concat_opt_exact_info		721056	0					
ANR	721288	ArgumentList	& to -> exb		721056	1					
ANR	721289	Argument	& to -> exb		721056	0					
ANR	721290	UnaryOperationExpression	& to -> exb		721056	0					
ANR	721291	UnaryOperator	&		721056	0					
ANR	721292	PtrMemberAccess	to -> exb		721056	1					
ANR	721293	Identifier	to		721056	0					
ANR	721294	Identifier	exb		721056	1					
ANR	721295	Argument	& add -> exb		721056	1					
ANR	721296	UnaryOperationExpression	& add -> exb		721056	0					
ANR	721297	UnaryOperator	&		721056	0					
ANR	721298	PtrMemberAccess	add -> exb		721056	1					
ANR	721299	Identifier	add		721056	0					
ANR	721300	Identifier	exb		721056	1					
ANR	721301	Argument	enc		721056	2					
ANR	721302	Identifier	enc		721056	0					
ANR	721303	ExpressionStatement	clear_opt_exact_info ( & add -> exb )	4492:6:100884:100915	721056	1	True				
ANR	721304	CallExpression	clear_opt_exact_info ( & add -> exb )		721056	0					
ANR	721305	Callee	clear_opt_exact_info		721056	0					
ANR	721306	Identifier	clear_opt_exact_info		721056	0					
ANR	721307	ArgumentList	& add -> exb		721056	1					
ANR	721308	Argument	& add -> exb		721056	0					
ANR	721309	UnaryOperationExpression	& add -> exb		721056	0					
ANR	721310	UnaryOperator	&		721056	0					
ANR	721311	PtrMemberAccess	add -> exb		721056	1					
ANR	721312	Identifier	add		721056	0					
ANR	721313	Identifier	exb		721056	1					
ANR	721314	ElseStatement	else		721056	0					
ANR	721315	IfStatement	if ( exm_reach )		721056	0					
ANR	721316	Condition	exm_reach	4494:13:100936:100944	721056	0	True				
ANR	721317	Identifier	exm_reach		721056	0					
ANR	721318	CompoundStatement		30:24:799:799	721056	1					
ANR	721319	ExpressionStatement	"concat_opt_exact_info ( & to -> exm , & add -> exb , enc )"	4495:6:100955:101002	721056	0	True				
ANR	721320	CallExpression	"concat_opt_exact_info ( & to -> exm , & add -> exb , enc )"		721056	0					
ANR	721321	Callee	concat_opt_exact_info		721056	0					
ANR	721322	Identifier	concat_opt_exact_info		721056	0					
ANR	721323	ArgumentList	& to -> exm		721056	1					
ANR	721324	Argument	& to -> exm		721056	0					
ANR	721325	UnaryOperationExpression	& to -> exm		721056	0					
ANR	721326	UnaryOperator	&		721056	0					
ANR	721327	PtrMemberAccess	to -> exm		721056	1					
ANR	721328	Identifier	to		721056	0					
ANR	721329	Identifier	exm		721056	1					
ANR	721330	Argument	& add -> exb		721056	1					
ANR	721331	UnaryOperationExpression	& add -> exb		721056	0					
ANR	721332	UnaryOperator	&		721056	0					
ANR	721333	PtrMemberAccess	add -> exb		721056	1					
ANR	721334	Identifier	add		721056	0					
ANR	721335	Identifier	exb		721056	1					
ANR	721336	Argument	enc		721056	2					
ANR	721337	Identifier	enc		721056	0					
ANR	721338	ExpressionStatement	clear_opt_exact_info ( & add -> exb )	4496:6:101010:101041	721056	1	True				
ANR	721339	CallExpression	clear_opt_exact_info ( & add -> exb )		721056	0					
ANR	721340	Callee	clear_opt_exact_info		721056	0					
ANR	721341	Identifier	clear_opt_exact_info		721056	0					
ANR	721342	ArgumentList	& add -> exb		721056	1					
ANR	721343	Argument	& add -> exb		721056	0					
ANR	721344	UnaryOperationExpression	& add -> exb		721056	0					
ANR	721345	UnaryOperator	&		721056	0					
ANR	721346	PtrMemberAccess	add -> exb		721056	1					
ANR	721347	Identifier	add		721056	0					
ANR	721348	Identifier	exb		721056	1					
ANR	721349	ExpressionStatement	"select_opt_exact_info ( enc , & to -> exm , & add -> exb )"	4499:2:101055:101102	721056	10	True				
ANR	721350	CallExpression	"select_opt_exact_info ( enc , & to -> exm , & add -> exb )"		721056	0					
ANR	721351	Callee	select_opt_exact_info		721056	0					
ANR	721352	Identifier	select_opt_exact_info		721056	0					
ANR	721353	ArgumentList	enc		721056	1					
ANR	721354	Argument	enc		721056	0					
ANR	721355	Identifier	enc		721056	0					
ANR	721356	Argument	& to -> exm		721056	1					
ANR	721357	UnaryOperationExpression	& to -> exm		721056	0					
ANR	721358	UnaryOperator	&		721056	0					
ANR	721359	PtrMemberAccess	to -> exm		721056	1					
ANR	721360	Identifier	to		721056	0					
ANR	721361	Identifier	exm		721056	1					
ANR	721362	Argument	& add -> exb		721056	2					
ANR	721363	UnaryOperationExpression	& add -> exb		721056	0					
ANR	721364	UnaryOperator	&		721056	0					
ANR	721365	PtrMemberAccess	add -> exb		721056	1					
ANR	721366	Identifier	add		721056	0					
ANR	721367	Identifier	exb		721056	1					
ANR	721368	ExpressionStatement	"select_opt_exact_info ( enc , & to -> exm , & add -> exm )"	4500:2:101106:101153	721056	11	True				
ANR	721369	CallExpression	"select_opt_exact_info ( enc , & to -> exm , & add -> exm )"		721056	0					
ANR	721370	Callee	select_opt_exact_info		721056	0					
ANR	721371	Identifier	select_opt_exact_info		721056	0					
ANR	721372	ArgumentList	enc		721056	1					
ANR	721373	Argument	enc		721056	0					
ANR	721374	Identifier	enc		721056	0					
ANR	721375	Argument	& to -> exm		721056	1					
ANR	721376	UnaryOperationExpression	& to -> exm		721056	0					
ANR	721377	UnaryOperator	&		721056	0					
ANR	721378	PtrMemberAccess	to -> exm		721056	1					
ANR	721379	Identifier	to		721056	0					
ANR	721380	Identifier	exm		721056	1					
ANR	721381	Argument	& add -> exm		721056	2					
ANR	721382	UnaryOperationExpression	& add -> exm		721056	0					
ANR	721383	UnaryOperator	&		721056	0					
ANR	721384	PtrMemberAccess	add -> exm		721056	1					
ANR	721385	Identifier	add		721056	0					
ANR	721386	Identifier	exm		721056	1					
ANR	721387	IfStatement	if ( to -> expr . len > 0 )		721056	12					
ANR	721388	Condition	to -> expr . len > 0	4502:6:101162:101177	721056	0	True				
ANR	721389	RelationalExpression	to -> expr . len > 0		721056	0		>			
ANR	721390	MemberAccess	to -> expr . len		721056	0					
ANR	721391	PtrMemberAccess	to -> expr		721056	0					
ANR	721392	Identifier	to		721056	0					
ANR	721393	Identifier	expr		721056	1					
ANR	721394	Identifier	len		721056	1					
ANR	721395	PrimaryExpression	0		721056	1					
ANR	721396	CompoundStatement		38:24:1032:1032	721056	1					
ANR	721397	IfStatement	if ( add -> len . max > 0 )		721056	0					
ANR	721398	Condition	add -> len . max > 0	4503:8:101190:101205	721056	0	True				
ANR	721399	RelationalExpression	add -> len . max > 0		721056	0		>			
ANR	721400	MemberAccess	add -> len . max		721056	0					
ANR	721401	PtrMemberAccess	add -> len		721056	0					
ANR	721402	Identifier	add		721056	0					
ANR	721403	Identifier	len		721056	1					
ANR	721404	Identifier	max		721056	1					
ANR	721405	PrimaryExpression	0		721056	1					
ANR	721406	CompoundStatement		39:26:1060:1060	721056	1					
ANR	721407	IfStatement	if ( to -> expr . len > ( int ) add -> len . max )		721056	0					
ANR	721408	Condition	to -> expr . len > ( int ) add -> len . max	4504:10:101220:101252	721056	0	True				
ANR	721409	RelationalExpression	to -> expr . len > ( int ) add -> len . max		721056	0		>			
ANR	721410	MemberAccess	to -> expr . len		721056	0					
ANR	721411	PtrMemberAccess	to -> expr		721056	0					
ANR	721412	Identifier	to		721056	0					
ANR	721413	Identifier	expr		721056	1					
ANR	721414	Identifier	len		721056	1					
ANR	721415	CastExpression	( int ) add -> len . max		721056	1					
ANR	721416	CastTarget	int		721056	0					
ANR	721417	MemberAccess	add -> len . max		721056	1					
ANR	721418	PtrMemberAccess	add -> len		721056	0					
ANR	721419	Identifier	add		721056	0					
ANR	721420	Identifier	len		721056	1					
ANR	721421	Identifier	max		721056	1					
ANR	721422	ExpressionStatement	to -> expr . len = add -> len . max	4505:1:101256:101283	721056	1	True				
ANR	721423	AssignmentExpression	to -> expr . len = add -> len . max		721056	0		=			
ANR	721424	MemberAccess	to -> expr . len		721056	0					
ANR	721425	PtrMemberAccess	to -> expr		721056	0					
ANR	721426	Identifier	to		721056	0					
ANR	721427	Identifier	expr		721056	1					
ANR	721428	Identifier	len		721056	1					
ANR	721429	MemberAccess	add -> len . max		721056	1					
ANR	721430	PtrMemberAccess	add -> len		721056	0					
ANR	721431	Identifier	add		721056	0					
ANR	721432	Identifier	len		721056	1					
ANR	721433	Identifier	max		721056	1					
ANR	721434	IfStatement	if ( to -> expr . mmd . max == 0 )		721056	1					
ANR	721435	Condition	to -> expr . mmd . max == 0	4507:10:101296:101316	721056	0	True				
ANR	721436	EqualityExpression	to -> expr . mmd . max == 0		721056	0		==			
ANR	721437	MemberAccess	to -> expr . mmd . max		721056	0					
ANR	721438	MemberAccess	to -> expr . mmd		721056	0					
ANR	721439	PtrMemberAccess	to -> expr		721056	0					
ANR	721440	Identifier	to		721056	0					
ANR	721441	Identifier	expr		721056	1					
ANR	721442	Identifier	mmd		721056	1					
ANR	721443	Identifier	max		721056	1					
ANR	721444	PrimaryExpression	0		721056	1					
ANR	721445	ExpressionStatement	"select_opt_exact_info ( enc , & to -> exb , & to -> expr )"	4508:1:101320:101367	721056	1	True				
ANR	721446	CallExpression	"select_opt_exact_info ( enc , & to -> exb , & to -> expr )"		721056	0					
ANR	721447	Callee	select_opt_exact_info		721056	0					
ANR	721448	Identifier	select_opt_exact_info		721056	0					
ANR	721449	ArgumentList	enc		721056	1					
ANR	721450	Argument	enc		721056	0					
ANR	721451	Identifier	enc		721056	0					
ANR	721452	Argument	& to -> exb		721056	1					
ANR	721453	UnaryOperationExpression	& to -> exb		721056	0					
ANR	721454	UnaryOperator	&		721056	0					
ANR	721455	PtrMemberAccess	to -> exb		721056	1					
ANR	721456	Identifier	to		721056	0					
ANR	721457	Identifier	exb		721056	1					
ANR	721458	Argument	& to -> expr		721056	2					
ANR	721459	UnaryOperationExpression	& to -> expr		721056	0					
ANR	721460	UnaryOperator	&		721056	0					
ANR	721461	PtrMemberAccess	to -> expr		721056	1					
ANR	721462	Identifier	to		721056	0					
ANR	721463	Identifier	expr		721056	1					
ANR	721464	ElseStatement	else		721056	0					
ANR	721465	ExpressionStatement	"select_opt_exact_info ( enc , & to -> exm , & to -> expr )"	4510:1:101381:101428	721056	0	True				
ANR	721466	CallExpression	"select_opt_exact_info ( enc , & to -> exm , & to -> expr )"		721056	0					
ANR	721467	Callee	select_opt_exact_info		721056	0					
ANR	721468	Identifier	select_opt_exact_info		721056	0					
ANR	721469	ArgumentList	enc		721056	1					
ANR	721470	Argument	enc		721056	0					
ANR	721471	Identifier	enc		721056	0					
ANR	721472	Argument	& to -> exm		721056	1					
ANR	721473	UnaryOperationExpression	& to -> exm		721056	0					
ANR	721474	UnaryOperator	&		721056	0					
ANR	721475	PtrMemberAccess	to -> exm		721056	1					
ANR	721476	Identifier	to		721056	0					
ANR	721477	Identifier	exm		721056	1					
ANR	721478	Argument	& to -> expr		721056	2					
ANR	721479	UnaryOperationExpression	& to -> expr		721056	0					
ANR	721480	UnaryOperator	&		721056	0					
ANR	721481	PtrMemberAccess	to -> expr		721056	1					
ANR	721482	Identifier	to		721056	0					
ANR	721483	Identifier	expr		721056	1					
ANR	721484	ElseStatement	else		721056	0					
ANR	721485	IfStatement	if ( add -> expr . len > 0 )		721056	0					
ANR	721486	Condition	add -> expr . len > 0	4513:11:101451:101467	721056	0	True				
ANR	721487	RelationalExpression	add -> expr . len > 0		721056	0		>			
ANR	721488	MemberAccess	add -> expr . len		721056	0					
ANR	721489	PtrMemberAccess	add -> expr		721056	0					
ANR	721490	Identifier	add		721056	0					
ANR	721491	Identifier	expr		721056	1					
ANR	721492	Identifier	len		721056	1					
ANR	721493	PrimaryExpression	0		721056	1					
ANR	721494	CompoundStatement		49:30:1322:1322	721056	1					
ANR	721495	ExpressionStatement	"copy_opt_exact_info ( & to -> expr , & add -> expr )"	4514:4:101476:101518	721056	0	True				
ANR	721496	CallExpression	"copy_opt_exact_info ( & to -> expr , & add -> expr )"		721056	0					
ANR	721497	Callee	copy_opt_exact_info		721056	0					
ANR	721498	Identifier	copy_opt_exact_info		721056	0					
ANR	721499	ArgumentList	& to -> expr		721056	1					
ANR	721500	Argument	& to -> expr		721056	0					
ANR	721501	UnaryOperationExpression	& to -> expr		721056	0					
ANR	721502	UnaryOperator	&		721056	0					
ANR	721503	PtrMemberAccess	to -> expr		721056	1					
ANR	721504	Identifier	to		721056	0					
ANR	721505	Identifier	expr		721056	1					
ANR	721506	Argument	& add -> expr		721056	1					
ANR	721507	UnaryOperationExpression	& add -> expr		721056	0					
ANR	721508	UnaryOperator	&		721056	0					
ANR	721509	PtrMemberAccess	add -> expr		721056	1					
ANR	721510	Identifier	add		721056	0					
ANR	721511	Identifier	expr		721056	1					
ANR	721512	ExpressionStatement	"select_opt_map_info ( & to -> map , & add -> map )"	4517:2:101527:101567	721056	13	True				
ANR	721513	CallExpression	"select_opt_map_info ( & to -> map , & add -> map )"		721056	0					
ANR	721514	Callee	select_opt_map_info		721056	0					
ANR	721515	Identifier	select_opt_map_info		721056	0					
ANR	721516	ArgumentList	& to -> map		721056	1					
ANR	721517	Argument	& to -> map		721056	0					
ANR	721518	UnaryOperationExpression	& to -> map		721056	0					
ANR	721519	UnaryOperator	&		721056	0					
ANR	721520	PtrMemberAccess	to -> map		721056	1					
ANR	721521	Identifier	to		721056	0					
ANR	721522	Identifier	map		721056	1					
ANR	721523	Argument	& add -> map		721056	1					
ANR	721524	UnaryOperationExpression	& add -> map		721056	0					
ANR	721525	UnaryOperator	&		721056	0					
ANR	721526	PtrMemberAccess	add -> map		721056	1					
ANR	721527	Identifier	add		721056	0					
ANR	721528	Identifier	map		721056	1					
ANR	721529	ExpressionStatement	"add_mml ( & to -> len , & add -> len )"	4519:2:101572:101600	721056	14	True				
ANR	721530	CallExpression	"add_mml ( & to -> len , & add -> len )"		721056	0					
ANR	721531	Callee	add_mml		721056	0					
ANR	721532	Identifier	add_mml		721056	0					
ANR	721533	ArgumentList	& to -> len		721056	1					
ANR	721534	Argument	& to -> len		721056	0					
ANR	721535	UnaryOperationExpression	& to -> len		721056	0					
ANR	721536	UnaryOperator	&		721056	0					
ANR	721537	PtrMemberAccess	to -> len		721056	1					
ANR	721538	Identifier	to		721056	0					
ANR	721539	Identifier	len		721056	1					
ANR	721540	Argument	& add -> len		721056	1					
ANR	721541	UnaryOperationExpression	& add -> len		721056	0					
ANR	721542	UnaryOperator	&		721056	0					
ANR	721543	PtrMemberAccess	add -> len		721056	1					
ANR	721544	Identifier	add		721056	0					
ANR	721545	Identifier	len		721056	1					
ANR	721546	ReturnType	static void		721056	1					
ANR	721547	Identifier	concat_left_node_opt_info		721056	2					
ANR	721548	ParameterList	"OnigEncoding enc , NodeOptInfo * to , NodeOptInfo * add"		721056	3					
ANR	721549	Parameter	OnigEncoding enc	4464:26:100094:100109	721056	0	True				
ANR	721550	ParameterType	OnigEncoding		721056	0					
ANR	721551	Identifier	enc		721056	1					
ANR	721552	Parameter	NodeOptInfo * to	4464:44:100112:100126	721056	1	True				
ANR	721553	ParameterType	NodeOptInfo *		721056	0					
ANR	721554	Identifier	to		721056	1					
ANR	721555	Parameter	NodeOptInfo * add	4464:61:100129:100144	721056	2	True				
ANR	721556	ParameterType	NodeOptInfo *		721056	0					
ANR	721557	Identifier	add		721056	1					
ANR	721558	CFGEntryNode	ENTRY		721056		True				
ANR	721559	CFGExitNode	EXIT		721056		True				
ANR	721560	Symbol	to -> exm		721056						
ANR	721561	Symbol	& add -> exm		721056						
ANR	721562	Symbol	exb_reach		721056						
ANR	721563	Symbol	to -> anc		721056						
ANR	721564	Symbol	& add -> map		721056						
ANR	721565	Symbol	& add -> anc		721056						
ANR	721566	Symbol	to -> expr . len		721056						
ANR	721567	Symbol	& tanc		721056						
ANR	721568	Symbol	add -> map . value		721056						
ANR	721569	Symbol	add -> map . mmd . max		721056						
ANR	721570	Symbol	to -> expr		721056						
ANR	721571	Symbol	add -> map . mmd		721056						
ANR	721572	Symbol	& add -> expr		721056						
ANR	721573	Symbol	tanc		721056						
ANR	721574	Symbol	add -> len		721056						
ANR	721575	Symbol	to -> exb		721056						
ANR	721576	Symbol	to -> exm . reach_end		721056						
ANR	721577	Symbol	enc		721056						
ANR	721578	Symbol	to -> len		721056						
ANR	721579	Symbol	add -> map		721056						
ANR	721580	Symbol	& to -> expr		721056						
ANR	721581	Symbol	to -> anc . left_anchor		721056						
ANR	721582	Symbol	add		721056						
ANR	721583	Symbol	& to -> len		721056						
ANR	721584	Symbol	* to		721056						
ANR	721585	Symbol	& to -> anc		721056						
ANR	721586	Symbol	to -> len . max		721056						
ANR	721587	Symbol	& to -> exm		721056						
ANR	721588	Symbol	exm_reach		721056						
ANR	721589	Symbol	& to -> map		721056						
ANR	721590	Symbol	add -> exb . len		721056						
ANR	721591	Symbol	add -> exb		721056						
ANR	721592	Symbol	& add -> exb . anc		721056						
ANR	721593	Symbol	to -> expr . mmd . max		721056						
ANR	721594	Symbol	* add		721056						
ANR	721595	Symbol	add -> map . anc . left_anchor		721056						
ANR	721596	Symbol	to -> expr . mmd		721056						
ANR	721597	Symbol	add -> expr		721056						
ANR	721598	Symbol	add -> len . max		721056						
ANR	721599	Symbol	to		721056						
ANR	721600	Symbol	to -> exb . reach_end		721056						
ANR	721601	Symbol	& to -> exb		721056						
ANR	721602	Symbol	& add -> len		721056						
ANR	721603	Symbol	add -> map . anc		721056						
ANR	721604	Symbol	& add -> exb		721056						
ANR	721605	Symbol	add -> expr . len		721056						
ANR	721606	Function	alt_merge_node_opt_info	4522:0:101605:102004							
ANR	721607	FunctionDef	"alt_merge_node_opt_info (NodeOptInfo * to , NodeOptInfo * add , OptEnv * env)"		721606	0					
ANR	721608	CompoundStatement		4524:0:101689:102004	721606	0					
ANR	721609	ExpressionStatement	"alt_merge_opt_anc_info ( & to -> anc , & add -> anc )"	4525:2:101693:101739	721606	0	True				
ANR	721610	CallExpression	"alt_merge_opt_anc_info ( & to -> anc , & add -> anc )"		721606	0					
ANR	721611	Callee	alt_merge_opt_anc_info		721606	0					
ANR	721612	Identifier	alt_merge_opt_anc_info		721606	0					
ANR	721613	ArgumentList	& to -> anc		721606	1					
ANR	721614	Argument	& to -> anc		721606	0					
ANR	721615	UnaryOperationExpression	& to -> anc		721606	0					
ANR	721616	UnaryOperator	&		721606	0					
ANR	721617	PtrMemberAccess	to -> anc		721606	1					
ANR	721618	Identifier	to		721606	0					
ANR	721619	Identifier	anc		721606	1					
ANR	721620	Argument	& add -> anc		721606	1					
ANR	721621	UnaryOperationExpression	& add -> anc		721606	0					
ANR	721622	UnaryOperator	&		721606	0					
ANR	721623	PtrMemberAccess	add -> anc		721606	1					
ANR	721624	Identifier	add		721606	0					
ANR	721625	Identifier	anc		721606	1					
ANR	721626	ExpressionStatement	"alt_merge_opt_exact_info ( & to -> exb , & add -> exb , env )"	4526:2:101743:101794	721606	1	True				
ANR	721627	CallExpression	"alt_merge_opt_exact_info ( & to -> exb , & add -> exb , env )"		721606	0					
ANR	721628	Callee	alt_merge_opt_exact_info		721606	0					
ANR	721629	Identifier	alt_merge_opt_exact_info		721606	0					
ANR	721630	ArgumentList	& to -> exb		721606	1					
ANR	721631	Argument	& to -> exb		721606	0					
ANR	721632	UnaryOperationExpression	& to -> exb		721606	0					
ANR	721633	UnaryOperator	&		721606	0					
ANR	721634	PtrMemberAccess	to -> exb		721606	1					
ANR	721635	Identifier	to		721606	0					
ANR	721636	Identifier	exb		721606	1					
ANR	721637	Argument	& add -> exb		721606	1					
ANR	721638	UnaryOperationExpression	& add -> exb		721606	0					
ANR	721639	UnaryOperator	&		721606	0					
ANR	721640	PtrMemberAccess	add -> exb		721606	1					
ANR	721641	Identifier	add		721606	0					
ANR	721642	Identifier	exb		721606	1					
ANR	721643	Argument	env		721606	2					
ANR	721644	Identifier	env		721606	0					
ANR	721645	ExpressionStatement	"alt_merge_opt_exact_info ( & to -> exm , & add -> exm , env )"	4527:2:101798:101849	721606	2	True				
ANR	721646	CallExpression	"alt_merge_opt_exact_info ( & to -> exm , & add -> exm , env )"		721606	0					
ANR	721647	Callee	alt_merge_opt_exact_info		721606	0					
ANR	721648	Identifier	alt_merge_opt_exact_info		721606	0					
ANR	721649	ArgumentList	& to -> exm		721606	1					
ANR	721650	Argument	& to -> exm		721606	0					
ANR	721651	UnaryOperationExpression	& to -> exm		721606	0					
ANR	721652	UnaryOperator	&		721606	0					
ANR	721653	PtrMemberAccess	to -> exm		721606	1					
ANR	721654	Identifier	to		721606	0					
ANR	721655	Identifier	exm		721606	1					
ANR	721656	Argument	& add -> exm		721606	1					
ANR	721657	UnaryOperationExpression	& add -> exm		721606	0					
ANR	721658	UnaryOperator	&		721606	0					
ANR	721659	PtrMemberAccess	add -> exm		721606	1					
ANR	721660	Identifier	add		721606	0					
ANR	721661	Identifier	exm		721606	1					
ANR	721662	Argument	env		721606	2					
ANR	721663	Identifier	env		721606	0					
ANR	721664	ExpressionStatement	"alt_merge_opt_exact_info ( & to -> expr , & add -> expr , env )"	4528:2:101853:101905	721606	3	True				
ANR	721665	CallExpression	"alt_merge_opt_exact_info ( & to -> expr , & add -> expr , env )"		721606	0					
ANR	721666	Callee	alt_merge_opt_exact_info		721606	0					
ANR	721667	Identifier	alt_merge_opt_exact_info		721606	0					
ANR	721668	ArgumentList	& to -> expr		721606	1					
ANR	721669	Argument	& to -> expr		721606	0					
ANR	721670	UnaryOperationExpression	& to -> expr		721606	0					
ANR	721671	UnaryOperator	&		721606	0					
ANR	721672	PtrMemberAccess	to -> expr		721606	1					
ANR	721673	Identifier	to		721606	0					
ANR	721674	Identifier	expr		721606	1					
ANR	721675	Argument	& add -> expr		721606	1					
ANR	721676	UnaryOperationExpression	& add -> expr		721606	0					
ANR	721677	UnaryOperator	&		721606	0					
ANR	721678	PtrMemberAccess	add -> expr		721606	1					
ANR	721679	Identifier	add		721606	0					
ANR	721680	Identifier	expr		721606	1					
ANR	721681	Argument	env		721606	2					
ANR	721682	Identifier	env		721606	0					
ANR	721683	ExpressionStatement	"alt_merge_opt_map_info ( env -> enc , & to -> map , & add -> map )"	4529:2:101909:101963	721606	4	True				
ANR	721684	CallExpression	"alt_merge_opt_map_info ( env -> enc , & to -> map , & add -> map )"		721606	0					
ANR	721685	Callee	alt_merge_opt_map_info		721606	0					
ANR	721686	Identifier	alt_merge_opt_map_info		721606	0					
ANR	721687	ArgumentList	env -> enc		721606	1					
ANR	721688	Argument	env -> enc		721606	0					
ANR	721689	PtrMemberAccess	env -> enc		721606	0					
ANR	721690	Identifier	env		721606	0					
ANR	721691	Identifier	enc		721606	1					
ANR	721692	Argument	& to -> map		721606	1					
ANR	721693	UnaryOperationExpression	& to -> map		721606	0					
ANR	721694	UnaryOperator	&		721606	0					
ANR	721695	PtrMemberAccess	to -> map		721606	1					
ANR	721696	Identifier	to		721606	0					
ANR	721697	Identifier	map		721606	1					
ANR	721698	Argument	& add -> map		721606	2					
ANR	721699	UnaryOperationExpression	& add -> map		721606	0					
ANR	721700	UnaryOperator	&		721606	0					
ANR	721701	PtrMemberAccess	add -> map		721606	1					
ANR	721702	Identifier	add		721606	0					
ANR	721703	Identifier	map		721606	1					
ANR	721704	ExpressionStatement	"alt_merge_mml ( & to -> len , & add -> len )"	4531:2:101968:102002	721606	5	True				
ANR	721705	CallExpression	"alt_merge_mml ( & to -> len , & add -> len )"		721606	0					
ANR	721706	Callee	alt_merge_mml		721606	0					
ANR	721707	Identifier	alt_merge_mml		721606	0					
ANR	721708	ArgumentList	& to -> len		721606	1					
ANR	721709	Argument	& to -> len		721606	0					
ANR	721710	UnaryOperationExpression	& to -> len		721606	0					
ANR	721711	UnaryOperator	&		721606	0					
ANR	721712	PtrMemberAccess	to -> len		721606	1					
ANR	721713	Identifier	to		721606	0					
ANR	721714	Identifier	len		721606	1					
ANR	721715	Argument	& add -> len		721606	1					
ANR	721716	UnaryOperationExpression	& add -> len		721606	0					
ANR	721717	UnaryOperator	&		721606	0					
ANR	721718	PtrMemberAccess	add -> len		721606	1					
ANR	721719	Identifier	add		721606	0					
ANR	721720	Identifier	len		721606	1					
ANR	721721	ReturnType	static void		721606	1					
ANR	721722	Identifier	alt_merge_node_opt_info		721606	2					
ANR	721723	ParameterList	"NodeOptInfo * to , NodeOptInfo * add , OptEnv * env"		721606	3					
ANR	721724	Parameter	NodeOptInfo * to	4523:24:101641:101655	721606	0	True				
ANR	721725	ParameterType	NodeOptInfo *		721606	0					
ANR	721726	Identifier	to		721606	1					
ANR	721727	Parameter	NodeOptInfo * add	4523:41:101658:101673	721606	1	True				
ANR	721728	ParameterType	NodeOptInfo *		721606	0					
ANR	721729	Identifier	add		721606	1					
ANR	721730	Parameter	OptEnv * env	4523:59:101676:101686	721606	2	True				
ANR	721731	ParameterType	OptEnv *		721606	0					
ANR	721732	Identifier	env		721606	1					
ANR	721733	CFGEntryNode	ENTRY		721606		True				
ANR	721734	CFGExitNode	EXIT		721606		True				
ANR	721735	Symbol	add		721606						
ANR	721736	Symbol	& add -> exm		721606						
ANR	721737	Symbol	& to -> len		721606						
ANR	721738	Symbol	& to -> anc		721606						
ANR	721739	Symbol	& add -> map		721606						
ANR	721740	Symbol	& add -> anc		721606						
ANR	721741	Symbol	& to -> exm		721606						
ANR	721742	Symbol	& to -> map		721606						
ANR	721743	Symbol	* env		721606						
ANR	721744	Symbol	env -> enc		721606						
ANR	721745	Symbol	env		721606						
ANR	721746	Symbol	& add -> expr		721606						
ANR	721747	Symbol	to		721606						
ANR	721748	Symbol	& to -> exb		721606						
ANR	721749	Symbol	& add -> len		721606						
ANR	721750	Symbol	& to -> expr		721606						
ANR	721751	Symbol	& add -> exb		721606						
ANR	721752	Function	optimize_node_left	4537:0:102050:110077							
ANR	721753	FunctionDef	"optimize_node_left (Node * node , NodeOptInfo * opt , OptEnv * env)"		721752	0					
ANR	721754	CompoundStatement		4539:0:102123:110077	721752	0					
ANR	721755	IdentifierDeclStatement	int type ;	4540:2:102127:102135	721752	0	True				
ANR	721756	IdentifierDecl	type		721752	0					
ANR	721757	IdentifierDeclType	int		721752	0					
ANR	721758	Identifier	type		721752	1					
ANR	721759	IdentifierDeclStatement	int r = 0 ;	4541:2:102139:102148	721752	1	True				
ANR	721760	IdentifierDecl	r = 0		721752	0					
ANR	721761	IdentifierDeclType	int		721752	0					
ANR	721762	Identifier	r		721752	1					
ANR	721763	AssignmentExpression	r = 0		721752	2		=			
ANR	721764	Identifier	r		721752	0					
ANR	721765	PrimaryExpression	0		721752	1					
ANR	721766	ExpressionStatement	clear_node_opt_info ( opt )	4543:2:102153:102177	721752	2	True				
ANR	721767	CallExpression	clear_node_opt_info ( opt )		721752	0					
ANR	721768	Callee	clear_node_opt_info		721752	0					
ANR	721769	Identifier	clear_node_opt_info		721752	0					
ANR	721770	ArgumentList	opt		721752	1					
ANR	721771	Argument	opt		721752	0					
ANR	721772	Identifier	opt		721752	0					
ANR	721773	ExpressionStatement	"set_bound_node_opt_info ( opt , & env -> mmd )"	4544:2:102181:102220	721752	3	True				
ANR	721774	CallExpression	"set_bound_node_opt_info ( opt , & env -> mmd )"		721752	0					
ANR	721775	Callee	set_bound_node_opt_info		721752	0					
ANR	721776	Identifier	set_bound_node_opt_info		721752	0					
ANR	721777	ArgumentList	opt		721752	1					
ANR	721778	Argument	opt		721752	0					
ANR	721779	Identifier	opt		721752	0					
ANR	721780	Argument	& env -> mmd		721752	1					
ANR	721781	UnaryOperationExpression	& env -> mmd		721752	0					
ANR	721782	UnaryOperator	&		721752	0					
ANR	721783	PtrMemberAccess	env -> mmd		721752	1					
ANR	721784	Identifier	env		721752	0					
ANR	721785	Identifier	mmd		721752	1					
ANR	721786	ExpressionStatement	type = NTYPE ( node )	4546:2:102225:102243	721752	4	True				
ANR	721787	AssignmentExpression	type = NTYPE ( node )		721752	0		=			
ANR	721788	Identifier	type		721752	0					
ANR	721789	CallExpression	NTYPE ( node )		721752	1					
ANR	721790	Callee	NTYPE		721752	0					
ANR	721791	Identifier	NTYPE		721752	0					
ANR	721792	ArgumentList	node		721752	1					
ANR	721793	Argument	node		721752	0					
ANR	721794	Identifier	node		721752	0					
ANR	721795	SwitchStatement	switch ( type )		721752	5					
ANR	721796	Condition	type	4547:10:102255:102258	721752	0	True				
ANR	721797	Identifier	type		721752	0					
ANR	721798	CompoundStatement		9:16:137:137	721752	1					
ANR	721799	Label	case NT_LIST :	4548:2:102265:102277	721752	0	True				
ANR	721800	Identifier	NT_LIST		721752	0					
ANR	721801	CompoundStatement		14:6:210:225	721752	1					
ANR	721802	IdentifierDeclStatement	OptEnv nenv ;	4550:6:102291:102302	721752	0	True				
ANR	721803	IdentifierDecl	nenv		721752	0					
ANR	721804	IdentifierDeclType	OptEnv		721752	0					
ANR	721805	Identifier	nenv		721752	1					
ANR	721806	IdentifierDeclStatement	NodeOptInfo nopt ;	4551:6:102310:102326	721752	1	True				
ANR	721807	IdentifierDecl	nopt		721752	0					
ANR	721808	IdentifierDeclType	NodeOptInfo		721752	0					
ANR	721809	Identifier	nopt		721752	1					
ANR	721810	IdentifierDeclStatement	Node * nd = node ;	4552:6:102334:102349	721752	2	True				
ANR	721811	IdentifierDecl	* nd = node		721752	0					
ANR	721812	IdentifierDeclType	Node *		721752	0					
ANR	721813	Identifier	nd		721752	1					
ANR	721814	AssignmentExpression	* nd = node		721752	2		=			
ANR	721815	Identifier	node		721752	0					
ANR	721816	Identifier	node		721752	1					
ANR	721817	ExpressionStatement	"copy_opt_env ( & nenv , env )"	4554:6:102358:102382	721752	3	True				
ANR	721818	CallExpression	"copy_opt_env ( & nenv , env )"		721752	0					
ANR	721819	Callee	copy_opt_env		721752	0					
ANR	721820	Identifier	copy_opt_env		721752	0					
ANR	721821	ArgumentList	& nenv		721752	1					
ANR	721822	Argument	& nenv		721752	0					
ANR	721823	UnaryOperationExpression	& nenv		721752	0					
ANR	721824	UnaryOperator	&		721752	0					
ANR	721825	Identifier	nenv		721752	1					
ANR	721826	Argument	env		721752	1					
ANR	721827	Identifier	env		721752	0					
ANR	721828	DoStatement	do		721752	4					
ANR	721829	CompoundStatement		17:9:269:269	721752	0					
ANR	721830	ExpressionStatement	"r = optimize_node_left ( NCAR ( nd ) , & nopt , & nenv )"	4556:1:102396:102442	721752	0	True				
ANR	721831	AssignmentExpression	"r = optimize_node_left ( NCAR ( nd ) , & nopt , & nenv )"		721752	0		=			
ANR	721832	Identifier	r		721752	0					
ANR	721833	CallExpression	"optimize_node_left ( NCAR ( nd ) , & nopt , & nenv )"		721752	1					
ANR	721834	Callee	optimize_node_left		721752	0					
ANR	721835	Identifier	optimize_node_left		721752	0					
ANR	721836	ArgumentList	NCAR ( nd )		721752	1					
ANR	721837	Argument	NCAR ( nd )		721752	0					
ANR	721838	CallExpression	NCAR ( nd )		721752	0					
ANR	721839	Callee	NCAR		721752	0					
ANR	721840	Identifier	NCAR		721752	0					
ANR	721841	ArgumentList	nd		721752	1					
ANR	721842	Argument	nd		721752	0					
ANR	721843	Identifier	nd		721752	0					
ANR	721844	Argument	& nopt		721752	1					
ANR	721845	UnaryOperationExpression	& nopt		721752	0					
ANR	721846	UnaryOperator	&		721752	0					
ANR	721847	Identifier	nopt		721752	1					
ANR	721848	Argument	& nenv		721752	2					
ANR	721849	UnaryOperationExpression	& nenv		721752	0					
ANR	721850	UnaryOperator	&		721752	0					
ANR	721851	Identifier	nenv		721752	1					
ANR	721852	IfStatement	if ( r == 0 )		721752	1					
ANR	721853	Condition	r == 0	4557:5:102449:102454	721752	0	True				
ANR	721854	EqualityExpression	r == 0		721752	0		==			
ANR	721855	Identifier	r		721752	0					
ANR	721856	PrimaryExpression	0		721752	1					
ANR	721857	CompoundStatement		19:13:333:333	721752	1					
ANR	721858	ExpressionStatement	"add_mml ( & nenv . mmd , & nopt . len )"	4558:3:102462:102491	721752	0	True				
ANR	721859	CallExpression	"add_mml ( & nenv . mmd , & nopt . len )"		721752	0					
ANR	721860	Callee	add_mml		721752	0					
ANR	721861	Identifier	add_mml		721752	0					
ANR	721862	ArgumentList	& nenv . mmd		721752	1					
ANR	721863	Argument	& nenv . mmd		721752	0					
ANR	721864	UnaryOperationExpression	& nenv . mmd		721752	0					
ANR	721865	UnaryOperator	&		721752	0					
ANR	721866	MemberAccess	nenv . mmd		721752	1					
ANR	721867	Identifier	nenv		721752	0					
ANR	721868	Identifier	mmd		721752	1					
ANR	721869	Argument	& nopt . len		721752	1					
ANR	721870	UnaryOperationExpression	& nopt . len		721752	0					
ANR	721871	UnaryOperator	&		721752	0					
ANR	721872	MemberAccess	nopt . len		721752	1					
ANR	721873	Identifier	nopt		721752	0					
ANR	721874	Identifier	len		721752	1					
ANR	721875	ExpressionStatement	"concat_left_node_opt_info ( env -> enc , opt , & nopt )"	4559:3:102496:102543	721752	1	True				
ANR	721876	CallExpression	"concat_left_node_opt_info ( env -> enc , opt , & nopt )"		721752	0					
ANR	721877	Callee	concat_left_node_opt_info		721752	0					
ANR	721878	Identifier	concat_left_node_opt_info		721752	0					
ANR	721879	ArgumentList	env -> enc		721752	1					
ANR	721880	Argument	env -> enc		721752	0					
ANR	721881	PtrMemberAccess	env -> enc		721752	0					
ANR	721882	Identifier	env		721752	0					
ANR	721883	Identifier	enc		721752	1					
ANR	721884	Argument	opt		721752	1					
ANR	721885	Identifier	opt		721752	0					
ANR	721886	Argument	& nopt		721752	2					
ANR	721887	UnaryOperationExpression	& nopt		721752	0					
ANR	721888	UnaryOperator	&		721752	0					
ANR	721889	Identifier	nopt		721752	1					
ANR	721890	Condition	r == 0 && IS_NOT_NULL ( nd = NCDR ( nd ) )	4561:15:102563:102598	721752	1	True				
ANR	721891	AndExpression	r == 0 && IS_NOT_NULL ( nd = NCDR ( nd ) )		721752	0		&&			
ANR	721892	EqualityExpression	r == 0		721752	0		==			
ANR	721893	Identifier	r		721752	0					
ANR	721894	PrimaryExpression	0		721752	1					
ANR	721895	CallExpression	IS_NOT_NULL ( nd = NCDR ( nd ) )		721752	1					
ANR	721896	Callee	IS_NOT_NULL		721752	0					
ANR	721897	Identifier	IS_NOT_NULL		721752	0					
ANR	721898	ArgumentList	nd = NCDR ( nd )		721752	1					
ANR	721899	Argument	nd = NCDR ( nd )		721752	0					
ANR	721900	AssignmentExpression	nd = NCDR ( nd )		721752	0		=			
ANR	721901	Identifier	nd		721752	0					
ANR	721902	CallExpression	NCDR ( nd )		721752	1					
ANR	721903	Callee	NCDR		721752	0					
ANR	721904	Identifier	NCDR		721752	0					
ANR	721905	ArgumentList	nd		721752	1					
ANR	721906	Argument	nd		721752	0					
ANR	721907	Identifier	nd		721752	0					
ANR	721908	BreakStatement	break ;	4563:4:102612:102617	721752	2	True				
ANR	721909	Label	case NT_ALT :	4565:2:102622:102633	721752	3	True				
ANR	721910	Identifier	NT_ALT		721752	0					
ANR	721911	CompoundStatement		30:6:547:562	721752	4					
ANR	721912	IdentifierDeclStatement	NodeOptInfo nopt ;	4567:6:102647:102663	721752	0	True				
ANR	721913	IdentifierDecl	nopt		721752	0					
ANR	721914	IdentifierDeclType	NodeOptInfo		721752	0					
ANR	721915	Identifier	nopt		721752	1					
ANR	721916	IdentifierDeclStatement	Node * nd = node ;	4568:6:102671:102686	721752	1	True				
ANR	721917	IdentifierDecl	* nd = node		721752	0					
ANR	721918	IdentifierDeclType	Node *		721752	0					
ANR	721919	Identifier	nd		721752	1					
ANR	721920	AssignmentExpression	* nd = node		721752	2		=			
ANR	721921	Identifier	node		721752	0					
ANR	721922	Identifier	node		721752	1					
ANR	721923	DoStatement	do		721752	2					
ANR	721924	CompoundStatement		32:9:574:574	721752	0					
ANR	721925	ExpressionStatement	"r = optimize_node_left ( NCAR ( nd ) , & nopt , env )"	4571:1:102701:102745	721752	0	True				
ANR	721926	AssignmentExpression	"r = optimize_node_left ( NCAR ( nd ) , & nopt , env )"		721752	0		=			
ANR	721927	Identifier	r		721752	0					
ANR	721928	CallExpression	"optimize_node_left ( NCAR ( nd ) , & nopt , env )"		721752	1					
ANR	721929	Callee	optimize_node_left		721752	0					
ANR	721930	Identifier	optimize_node_left		721752	0					
ANR	721931	ArgumentList	NCAR ( nd )		721752	1					
ANR	721932	Argument	NCAR ( nd )		721752	0					
ANR	721933	CallExpression	NCAR ( nd )		721752	0					
ANR	721934	Callee	NCAR		721752	0					
ANR	721935	Identifier	NCAR		721752	0					
ANR	721936	ArgumentList	nd		721752	1					
ANR	721937	Argument	nd		721752	0					
ANR	721938	Identifier	nd		721752	0					
ANR	721939	Argument	& nopt		721752	1					
ANR	721940	UnaryOperationExpression	& nopt		721752	0					
ANR	721941	UnaryOperator	&		721752	0					
ANR	721942	Identifier	nopt		721752	1					
ANR	721943	Argument	env		721752	2					
ANR	721944	Identifier	env		721752	0					
ANR	721945	IfStatement	if ( r == 0 )		721752	1					
ANR	721946	Condition	r == 0	4572:5:102752:102757	721752	0	True				
ANR	721947	EqualityExpression	r == 0		721752	0		==			
ANR	721948	Identifier	r		721752	0					
ANR	721949	PrimaryExpression	0		721752	1					
ANR	721950	CompoundStatement		34:13:636:636	721752	1					
ANR	721951	IfStatement	if ( nd == node )		721752	0					
ANR	721952	Condition	nd == node	4573:7:102769:102778	721752	0	True				
ANR	721953	EqualityExpression	nd == node		721752	0		==			
ANR	721954	Identifier	nd		721752	0					
ANR	721955	Identifier	node		721752	1					
ANR	721956	ExpressionStatement	"copy_node_opt_info ( opt , & nopt )"	4573:19:102781:102811	721752	1	True				
ANR	721957	CallExpression	"copy_node_opt_info ( opt , & nopt )"		721752	0					
ANR	721958	Callee	copy_node_opt_info		721752	0					
ANR	721959	Identifier	copy_node_opt_info		721752	0					
ANR	721960	ArgumentList	opt		721752	1					
ANR	721961	Argument	opt		721752	0					
ANR	721962	Identifier	opt		721752	0					
ANR	721963	Argument	& nopt		721752	1					
ANR	721964	UnaryOperationExpression	& nopt		721752	0					
ANR	721965	UnaryOperator	&		721752	0					
ANR	721966	Identifier	nopt		721752	1					
ANR	721967	ElseStatement	else		721752	0					
ANR	721968	ExpressionStatement	"alt_merge_node_opt_info ( opt , & nopt , env )"	4574:19:102832:102872	721752	0	True				
ANR	721969	CallExpression	"alt_merge_node_opt_info ( opt , & nopt , env )"		721752	0					
ANR	721970	Callee	alt_merge_node_opt_info		721752	0					
ANR	721971	Identifier	alt_merge_node_opt_info		721752	0					
ANR	721972	ArgumentList	opt		721752	1					
ANR	721973	Argument	opt		721752	0					
ANR	721974	Identifier	opt		721752	0					
ANR	721975	Argument	& nopt		721752	1					
ANR	721976	UnaryOperationExpression	& nopt		721752	0					
ANR	721977	UnaryOperator	&		721752	0					
ANR	721978	Identifier	nopt		721752	1					
ANR	721979	Argument	env		721752	2					
ANR	721980	Identifier	env		721752	0					
ANR	721981	Condition	( r == 0 ) && IS_NOT_NULL ( nd = NCDR ( nd ) )	4576:15:102892:102929	721752	1	True				
ANR	721982	AndExpression	( r == 0 ) && IS_NOT_NULL ( nd = NCDR ( nd ) )		721752	0		&&			
ANR	721983	EqualityExpression	r == 0		721752	0		==			
ANR	721984	Identifier	r		721752	0					
ANR	721985	PrimaryExpression	0		721752	1					
ANR	721986	CallExpression	IS_NOT_NULL ( nd = NCDR ( nd ) )		721752	1					
ANR	721987	Callee	IS_NOT_NULL		721752	0					
ANR	721988	Identifier	IS_NOT_NULL		721752	0					
ANR	721989	ArgumentList	nd = NCDR ( nd )		721752	1					
ANR	721990	Argument	nd = NCDR ( nd )		721752	0					
ANR	721991	AssignmentExpression	nd = NCDR ( nd )		721752	0		=			
ANR	721992	Identifier	nd		721752	0					
ANR	721993	CallExpression	NCDR ( nd )		721752	1					
ANR	721994	Callee	NCDR		721752	0					
ANR	721995	Identifier	NCDR		721752	0					
ANR	721996	ArgumentList	nd		721752	1					
ANR	721997	Argument	nd		721752	0					
ANR	721998	Identifier	nd		721752	0					
ANR	721999	BreakStatement	break ;	4578:4:102943:102948	721752	5	True				
ANR	722000	Label	case NT_STR :	4580:2:102953:102964	721752	6	True				
ANR	722001	Identifier	NT_STR		721752	0					
ANR	722002	CompoundStatement		46:6:920:953	721752	7					
ANR	722003	IdentifierDeclStatement	StrNode * sn = NSTR ( node ) ;	4582:6:102978:103002	721752	0	True				
ANR	722004	IdentifierDecl	* sn = NSTR ( node )		721752	0					
ANR	722005	IdentifierDeclType	StrNode *		721752	0					
ANR	722006	Identifier	sn		721752	1					
ANR	722007	AssignmentExpression	* sn = NSTR ( node )		721752	2		=			
ANR	722008	Identifier	sn		721752	0					
ANR	722009	CallExpression	NSTR ( node )		721752	1					
ANR	722010	Callee	NSTR		721752	0					
ANR	722011	Identifier	NSTR		721752	0					
ANR	722012	ArgumentList	node		721752	1					
ANR	722013	Argument	node		721752	0					
ANR	722014	Identifier	node		721752	0					
ANR	722015	IdentifierDeclStatement	int slen = sn -> end - sn -> s ;	4583:6:103010:103036	721752	1	True				
ANR	722016	IdentifierDecl	slen = sn -> end - sn -> s		721752	0					
ANR	722017	IdentifierDeclType	int		721752	0					
ANR	722018	Identifier	slen		721752	1					
ANR	722019	AssignmentExpression	slen = sn -> end - sn -> s		721752	2		=			
ANR	722020	Identifier	slen		721752	0					
ANR	722021	AdditiveExpression	sn -> end - sn -> s		721752	1		-			
ANR	722022	PtrMemberAccess	sn -> end		721752	0					
ANR	722023	Identifier	sn		721752	0					
ANR	722024	Identifier	end		721752	1					
ANR	722025	PtrMemberAccess	sn -> s		721752	1					
ANR	722026	Identifier	sn		721752	0					
ANR	722027	Identifier	s		721752	1					
ANR	722028	IdentifierDeclStatement	int is_raw = NSTRING_IS_RAW ( node ) ;	4584:6:103044:103077	721752	2	True				
ANR	722029	IdentifierDecl	is_raw = NSTRING_IS_RAW ( node )		721752	0					
ANR	722030	IdentifierDeclType	int		721752	0					
ANR	722031	Identifier	is_raw		721752	1					
ANR	722032	AssignmentExpression	is_raw = NSTRING_IS_RAW ( node )		721752	2		=			
ANR	722033	Identifier	is_raw		721752	0					
ANR	722034	CallExpression	NSTRING_IS_RAW ( node )		721752	1					
ANR	722035	Callee	NSTRING_IS_RAW		721752	0					
ANR	722036	Identifier	NSTRING_IS_RAW		721752	0					
ANR	722037	ArgumentList	node		721752	1					
ANR	722038	Argument	node		721752	0					
ANR	722039	Identifier	node		721752	0					
ANR	722040	IfStatement	if ( ! NSTRING_IS_AMBIG ( node ) )		721752	3					
ANR	722041	Condition	! NSTRING_IS_AMBIG ( node )	4586:10:103090:103113	721752	0	True				
ANR	722042	UnaryOperationExpression	! NSTRING_IS_AMBIG ( node )		721752	0					
ANR	722043	UnaryOperator	!		721752	0					
ANR	722044	CallExpression	NSTRING_IS_AMBIG ( node )		721752	1					
ANR	722045	Callee	NSTRING_IS_AMBIG		721752	0					
ANR	722046	Identifier	NSTRING_IS_AMBIG		721752	0					
ANR	722047	ArgumentList	node		721752	1					
ANR	722048	Argument	node		721752	0					
ANR	722049	Identifier	node		721752	0					
ANR	722050	CompoundStatement		48:36:992:992	721752	1					
ANR	722051	ExpressionStatement	"concat_opt_exact_info_str ( & opt -> exb , sn -> s , sn -> end , NSTRING_IS_RAW ( node ) , env -> enc )"	4587:1:103119:103209	721752	0	True				
ANR	722052	CallExpression	"concat_opt_exact_info_str ( & opt -> exb , sn -> s , sn -> end , NSTRING_IS_RAW ( node ) , env -> enc )"		721752	0					
ANR	722053	Callee	concat_opt_exact_info_str		721752	0					
ANR	722054	Identifier	concat_opt_exact_info_str		721752	0					
ANR	722055	ArgumentList	& opt -> exb		721752	1					
ANR	722056	Argument	& opt -> exb		721752	0					
ANR	722057	UnaryOperationExpression	& opt -> exb		721752	0					
ANR	722058	UnaryOperator	&		721752	0					
ANR	722059	PtrMemberAccess	opt -> exb		721752	1					
ANR	722060	Identifier	opt		721752	0					
ANR	722061	Identifier	exb		721752	1					
ANR	722062	Argument	sn -> s		721752	1					
ANR	722063	PtrMemberAccess	sn -> s		721752	0					
ANR	722064	Identifier	sn		721752	0					
ANR	722065	Identifier	s		721752	1					
ANR	722066	Argument	sn -> end		721752	2					
ANR	722067	PtrMemberAccess	sn -> end		721752	0					
ANR	722068	Identifier	sn		721752	0					
ANR	722069	Identifier	end		721752	1					
ANR	722070	Argument	NSTRING_IS_RAW ( node )		721752	3					
ANR	722071	CallExpression	NSTRING_IS_RAW ( node )		721752	0					
ANR	722072	Callee	NSTRING_IS_RAW		721752	0					
ANR	722073	Identifier	NSTRING_IS_RAW		721752	0					
ANR	722074	ArgumentList	node		721752	1					
ANR	722075	Argument	node		721752	0					
ANR	722076	Identifier	node		721752	0					
ANR	722077	Argument	env -> enc		721752	4					
ANR	722078	PtrMemberAccess	env -> enc		721752	0					
ANR	722079	Identifier	env		721752	0					
ANR	722080	Identifier	enc		721752	1					
ANR	722081	IfStatement	if ( slen > 0 )		721752	1					
ANR	722082	Condition	slen > 0	4589:5:103216:103223	721752	0	True				
ANR	722083	RelationalExpression	slen > 0		721752	0		>			
ANR	722084	Identifier	slen		721752	0					
ANR	722085	PrimaryExpression	0		721752	1					
ANR	722086	CompoundStatement		51:15:1102:1102	721752	1					
ANR	722087	ExpressionStatement	"add_char_opt_map_info ( & opt -> map , * ( sn -> s ) , env -> enc )"	4590:3:103231:103283	721752	0	True				
ANR	722088	CallExpression	"add_char_opt_map_info ( & opt -> map , * ( sn -> s ) , env -> enc )"		721752	0					
ANR	722089	Callee	add_char_opt_map_info		721752	0					
ANR	722090	Identifier	add_char_opt_map_info		721752	0					
ANR	722091	ArgumentList	& opt -> map		721752	1					
ANR	722092	Argument	& opt -> map		721752	0					
ANR	722093	UnaryOperationExpression	& opt -> map		721752	0					
ANR	722094	UnaryOperator	&		721752	0					
ANR	722095	PtrMemberAccess	opt -> map		721752	1					
ANR	722096	Identifier	opt		721752	0					
ANR	722097	Identifier	map		721752	1					
ANR	722098	Argument	* ( sn -> s )		721752	1					
ANR	722099	UnaryOperationExpression	* ( sn -> s )		721752	0					
ANR	722100	UnaryOperator	*		721752	0					
ANR	722101	PtrMemberAccess	sn -> s		721752	1					
ANR	722102	Identifier	sn		721752	0					
ANR	722103	Identifier	s		721752	1					
ANR	722104	Argument	env -> enc		721752	2					
ANR	722105	PtrMemberAccess	env -> enc		721752	0					
ANR	722106	Identifier	env		721752	0					
ANR	722107	Identifier	enc		721752	1					
ANR	722108	ExpressionStatement	"set_mml ( & opt -> len , slen , slen )"	4592:8:103296:103326	721752	2	True				
ANR	722109	CallExpression	"set_mml ( & opt -> len , slen , slen )"		721752	0					
ANR	722110	Callee	set_mml		721752	0					
ANR	722111	Identifier	set_mml		721752	0					
ANR	722112	ArgumentList	& opt -> len		721752	1					
ANR	722113	Argument	& opt -> len		721752	0					
ANR	722114	UnaryOperationExpression	& opt -> len		721752	0					
ANR	722115	UnaryOperator	&		721752	0					
ANR	722116	PtrMemberAccess	opt -> len		721752	1					
ANR	722117	Identifier	opt		721752	0					
ANR	722118	Identifier	len		721752	1					
ANR	722119	Argument	slen		721752	1					
ANR	722120	Identifier	slen		721752	0					
ANR	722121	Argument	slen		721752	2					
ANR	722122	Identifier	slen		721752	0					
ANR	722123	ElseStatement	else		721752	0					
ANR	722124	CompoundStatement		57:8:1233:1240	721752	0					
ANR	722125	IdentifierDeclStatement	int max ;	4595:8:103357:103364	721752	0	True				
ANR	722126	IdentifierDecl	max		721752	0					
ANR	722127	IdentifierDeclType	int		721752	0					
ANR	722128	Identifier	max		721752	1					
ANR	722129	IfStatement	if ( NSTRING_IS_DONT_GET_OPT_INFO ( node ) )		721752	1					
ANR	722130	Condition	NSTRING_IS_DONT_GET_OPT_INFO ( node )	4597:5:103372:103405	721752	0	True				
ANR	722131	CallExpression	NSTRING_IS_DONT_GET_OPT_INFO ( node )		721752	0					
ANR	722132	Callee	NSTRING_IS_DONT_GET_OPT_INFO		721752	0					
ANR	722133	Identifier	NSTRING_IS_DONT_GET_OPT_INFO		721752	0					
ANR	722134	ArgumentList	node		721752	1					
ANR	722135	Argument	node		721752	0					
ANR	722136	Identifier	node		721752	0					
ANR	722137	CompoundStatement		60:10:1296:1344	721752	1					
ANR	722138	IdentifierDeclStatement	"int n = onigenc_strlen ( env -> enc , sn -> s , sn -> end ) ;"	4598:10:103420:103468	721752	0	True				
ANR	722139	IdentifierDecl	"n = onigenc_strlen ( env -> enc , sn -> s , sn -> end )"		721752	0					
ANR	722140	IdentifierDeclType	int		721752	0					
ANR	722141	Identifier	n		721752	1					
ANR	722142	AssignmentExpression	"n = onigenc_strlen ( env -> enc , sn -> s , sn -> end )"		721752	2		=			
ANR	722143	Identifier	n		721752	0					
ANR	722144	CallExpression	"onigenc_strlen ( env -> enc , sn -> s , sn -> end )"		721752	1					
ANR	722145	Callee	onigenc_strlen		721752	0					
ANR	722146	Identifier	onigenc_strlen		721752	0					
ANR	722147	ArgumentList	env -> enc		721752	1					
ANR	722148	Argument	env -> enc		721752	0					
ANR	722149	PtrMemberAccess	env -> enc		721752	0					
ANR	722150	Identifier	env		721752	0					
ANR	722151	Identifier	enc		721752	1					
ANR	722152	Argument	sn -> s		721752	1					
ANR	722153	PtrMemberAccess	sn -> s		721752	0					
ANR	722154	Identifier	sn		721752	0					
ANR	722155	Identifier	s		721752	1					
ANR	722156	Argument	sn -> end		721752	2					
ANR	722157	PtrMemberAccess	sn -> end		721752	0					
ANR	722158	Identifier	sn		721752	0					
ANR	722159	Identifier	end		721752	1					
ANR	722160	ExpressionStatement	max = ONIGENC_MBC_MAXLEN_DIST ( env -> enc ) * n	4599:10:103480:103523	721752	1	True				
ANR	722161	AssignmentExpression	max = ONIGENC_MBC_MAXLEN_DIST ( env -> enc ) * n		721752	0		=			
ANR	722162	Identifier	max		721752	0					
ANR	722163	MultiplicativeExpression	ONIGENC_MBC_MAXLEN_DIST ( env -> enc ) * n		721752	1		*			
ANR	722164	CallExpression	ONIGENC_MBC_MAXLEN_DIST ( env -> enc )		721752	0					
ANR	722165	Callee	ONIGENC_MBC_MAXLEN_DIST		721752	0					
ANR	722166	Identifier	ONIGENC_MBC_MAXLEN_DIST		721752	0					
ANR	722167	ArgumentList	env -> enc		721752	1					
ANR	722168	Argument	env -> enc		721752	0					
ANR	722169	PtrMemberAccess	env -> enc		721752	0					
ANR	722170	Identifier	env		721752	0					
ANR	722171	Identifier	enc		721752	1					
ANR	722172	Identifier	n		721752	1					
ANR	722173	ElseStatement	else		721752	0					
ANR	722174	CompoundStatement		63:6:1410:1410	721752	0					
ANR	722175	ExpressionStatement	"concat_opt_exact_info_str ( & opt -> exb , sn -> s , sn -> end , is_raw , env -> enc )"	4602:3:103539:103617	721752	0	True				
ANR	722176	CallExpression	"concat_opt_exact_info_str ( & opt -> exb , sn -> s , sn -> end , is_raw , env -> enc )"		721752	0					
ANR	722177	Callee	concat_opt_exact_info_str		721752	0					
ANR	722178	Identifier	concat_opt_exact_info_str		721752	0					
ANR	722179	ArgumentList	& opt -> exb		721752	1					
ANR	722180	Argument	& opt -> exb		721752	0					
ANR	722181	UnaryOperationExpression	& opt -> exb		721752	0					
ANR	722182	UnaryOperator	&		721752	0					
ANR	722183	PtrMemberAccess	opt -> exb		721752	1					
ANR	722184	Identifier	opt		721752	0					
ANR	722185	Identifier	exb		721752	1					
ANR	722186	Argument	sn -> s		721752	1					
ANR	722187	PtrMemberAccess	sn -> s		721752	0					
ANR	722188	Identifier	sn		721752	0					
ANR	722189	Identifier	s		721752	1					
ANR	722190	Argument	sn -> end		721752	2					
ANR	722191	PtrMemberAccess	sn -> end		721752	0					
ANR	722192	Identifier	sn		721752	0					
ANR	722193	Identifier	end		721752	1					
ANR	722194	Argument	is_raw		721752	3					
ANR	722195	Identifier	is_raw		721752	0					
ANR	722196	Argument	env -> enc		721752	4					
ANR	722197	PtrMemberAccess	env -> enc		721752	0					
ANR	722198	Identifier	env		721752	0					
ANR	722199	Identifier	enc		721752	1					
ANR	722200	ExpressionStatement	opt -> exb . ignore_case = 1	4604:3:103622:103646	721752	1	True				
ANR	722201	AssignmentExpression	opt -> exb . ignore_case = 1		721752	0		=			
ANR	722202	MemberAccess	opt -> exb . ignore_case		721752	0					
ANR	722203	PtrMemberAccess	opt -> exb		721752	0					
ANR	722204	Identifier	opt		721752	0					
ANR	722205	Identifier	exb		721752	1					
ANR	722206	Identifier	ignore_case		721752	1					
ANR	722207	PrimaryExpression	1		721752	1					
ANR	722208	IfStatement	if ( slen > 0 )		721752	2					
ANR	722209	Condition	slen > 0	4606:7:103656:103663	721752	0	True				
ANR	722210	RelationalExpression	slen > 0		721752	0		>			
ANR	722211	Identifier	slen		721752	0					
ANR	722212	PrimaryExpression	0		721752	1					
ANR	722213	CompoundStatement		68:17:1542:1542	721752	1					
ANR	722214	ExpressionStatement	"r = add_char_amb_opt_map_info ( & opt -> map , sn -> s , sn -> end , env -> enc , env -> case_fold_flag )"	4607:5:103673:103767	721752	0	True				
ANR	722215	AssignmentExpression	"r = add_char_amb_opt_map_info ( & opt -> map , sn -> s , sn -> end , env -> enc , env -> case_fold_flag )"		721752	0		=			
ANR	722216	Identifier	r		721752	0					
ANR	722217	CallExpression	"add_char_amb_opt_map_info ( & opt -> map , sn -> s , sn -> end , env -> enc , env -> case_fold_flag )"		721752	1					
ANR	722218	Callee	add_char_amb_opt_map_info		721752	0					
ANR	722219	Identifier	add_char_amb_opt_map_info		721752	0					
ANR	722220	ArgumentList	& opt -> map		721752	1					
ANR	722221	Argument	& opt -> map		721752	0					
ANR	722222	UnaryOperationExpression	& opt -> map		721752	0					
ANR	722223	UnaryOperator	&		721752	0					
ANR	722224	PtrMemberAccess	opt -> map		721752	1					
ANR	722225	Identifier	opt		721752	0					
ANR	722226	Identifier	map		721752	1					
ANR	722227	Argument	sn -> s		721752	1					
ANR	722228	PtrMemberAccess	sn -> s		721752	0					
ANR	722229	Identifier	sn		721752	0					
ANR	722230	Identifier	s		721752	1					
ANR	722231	Argument	sn -> end		721752	2					
ANR	722232	PtrMemberAccess	sn -> end		721752	0					
ANR	722233	Identifier	sn		721752	0					
ANR	722234	Identifier	end		721752	1					
ANR	722235	Argument	env -> enc		721752	3					
ANR	722236	PtrMemberAccess	env -> enc		721752	0					
ANR	722237	Identifier	env		721752	0					
ANR	722238	Identifier	enc		721752	1					
ANR	722239	Argument	env -> case_fold_flag		721752	4					
ANR	722240	PtrMemberAccess	env -> case_fold_flag		721752	0					
ANR	722241	Identifier	env		721752	0					
ANR	722242	Identifier	case_fold_flag		721752	1					
ANR	722243	IfStatement	if ( r != 0 )		721752	1					
ANR	722244	Condition	r != 0	4609:9:103778:103783	721752	0	True				
ANR	722245	EqualityExpression	r != 0		721752	0		!=			
ANR	722246	Identifier	r		721752	0					
ANR	722247	PrimaryExpression	0		721752	1					
ANR	722248	BreakStatement	break ;	4609:17:103786:103791	721752	1	True				
ANR	722249	ExpressionStatement	max = slen	4612:3:103802:103812	721752	3	True				
ANR	722250	AssignmentExpression	max = slen		721752	0		=			
ANR	722251	Identifier	max		721752	0					
ANR	722252	Identifier	slen		721752	1					
ANR	722253	ExpressionStatement	"set_mml ( & opt -> len , slen , max )"	4615:8:103826:103855	721752	2	True				
ANR	722254	CallExpression	"set_mml ( & opt -> len , slen , max )"		721752	0					
ANR	722255	Callee	set_mml		721752	0					
ANR	722256	Identifier	set_mml		721752	0					
ANR	722257	ArgumentList	& opt -> len		721752	1					
ANR	722258	Argument	& opt -> len		721752	0					
ANR	722259	UnaryOperationExpression	& opt -> len		721752	0					
ANR	722260	UnaryOperator	&		721752	0					
ANR	722261	PtrMemberAccess	opt -> len		721752	1					
ANR	722262	Identifier	opt		721752	0					
ANR	722263	Identifier	len		721752	1					
ANR	722264	Argument	slen		721752	1					
ANR	722265	Identifier	slen		721752	0					
ANR	722266	Argument	max		721752	2					
ANR	722267	Identifier	max		721752	0					
ANR	722268	IfStatement	if ( opt -> exb . len == slen )		721752	4					
ANR	722269	Condition	opt -> exb . len == slen	4618:10:103876:103895	721752	0	True				
ANR	722270	EqualityExpression	opt -> exb . len == slen		721752	0		==			
ANR	722271	MemberAccess	opt -> exb . len		721752	0					
ANR	722272	PtrMemberAccess	opt -> exb		721752	0					
ANR	722273	Identifier	opt		721752	0					
ANR	722274	Identifier	exb		721752	1					
ANR	722275	Identifier	len		721752	1					
ANR	722276	Identifier	slen		721752	1					
ANR	722277	ExpressionStatement	opt -> exb . reach_end = 1	4619:1:103899:103921	721752	1	True				
ANR	722278	AssignmentExpression	opt -> exb . reach_end = 1		721752	0		=			
ANR	722279	MemberAccess	opt -> exb . reach_end		721752	0					
ANR	722280	PtrMemberAccess	opt -> exb		721752	0					
ANR	722281	Identifier	opt		721752	0					
ANR	722282	Identifier	exb		721752	1					
ANR	722283	Identifier	reach_end		721752	1					
ANR	722284	PrimaryExpression	1		721752	1					
ANR	722285	BreakStatement	break ;	4621:4:103933:103938	721752	8	True				
ANR	722286	Label	case NT_CCLASS :	4623:2:103943:103957	721752	9	True				
ANR	722287	Identifier	NT_CCLASS		721752	0					
ANR	722288	CompoundStatement		88:6:1863:1893	721752	10					
ANR	722289	IdentifierDeclStatement	"int i , z ;"	4625:6:103971:103979	721752	0	True				
ANR	722290	IdentifierDecl	i		721752	0					
ANR	722291	IdentifierDeclType	int		721752	0					
ANR	722292	Identifier	i		721752	1					
ANR	722293	IdentifierDecl	z		721752	1					
ANR	722294	IdentifierDeclType	int		721752	0					
ANR	722295	Identifier	z		721752	1					
ANR	722296	IdentifierDeclStatement	CClassNode * cc = NCCLASS ( node ) ;	4626:6:103987:104017	721752	1	True				
ANR	722297	IdentifierDecl	* cc = NCCLASS ( node )		721752	0					
ANR	722298	IdentifierDeclType	CClassNode *		721752	0					
ANR	722299	Identifier	cc		721752	1					
ANR	722300	AssignmentExpression	* cc = NCCLASS ( node )		721752	2		=			
ANR	722301	Identifier	cc		721752	0					
ANR	722302	CallExpression	NCCLASS ( node )		721752	1					
ANR	722303	Callee	NCCLASS		721752	0					
ANR	722304	Identifier	NCCLASS		721752	0					
ANR	722305	ArgumentList	node		721752	1					
ANR	722306	Argument	node		721752	0					
ANR	722307	Identifier	node		721752	0					
ANR	722308	IfStatement	if ( IS_NOT_NULL ( cc -> mbuf ) || IS_NCCLASS_NOT ( cc ) )		721752	2					
ANR	722309	Condition	IS_NOT_NULL ( cc -> mbuf ) || IS_NCCLASS_NOT ( cc )	4630:10:104098:104140	721752	0	True				
ANR	722310	OrExpression	IS_NOT_NULL ( cc -> mbuf ) || IS_NCCLASS_NOT ( cc )		721752	0		||			
ANR	722311	CallExpression	IS_NOT_NULL ( cc -> mbuf )		721752	0					
ANR	722312	Callee	IS_NOT_NULL		721752	0					
ANR	722313	Identifier	IS_NOT_NULL		721752	0					
ANR	722314	ArgumentList	cc -> mbuf		721752	1					
ANR	722315	Argument	cc -> mbuf		721752	0					
ANR	722316	PtrMemberAccess	cc -> mbuf		721752	0					
ANR	722317	Identifier	cc		721752	0					
ANR	722318	Identifier	mbuf		721752	1					
ANR	722319	CallExpression	IS_NCCLASS_NOT ( cc )		721752	1					
ANR	722320	Callee	IS_NCCLASS_NOT		721752	0					
ANR	722321	Identifier	IS_NCCLASS_NOT		721752	0					
ANR	722322	ArgumentList	cc		721752	1					
ANR	722323	Argument	cc		721752	0					
ANR	722324	Identifier	cc		721752	0					
ANR	722325	CompoundStatement		94:1:2079:2131	721752	1					
ANR	722326	IdentifierDeclStatement	OnigDistance min = ONIGENC_MBC_MINLEN ( env -> enc ) ;	4631:8:104153:104200	721752	0	True				
ANR	722327	IdentifierDecl	min = ONIGENC_MBC_MINLEN ( env -> enc )		721752	0					
ANR	722328	IdentifierDeclType	OnigDistance		721752	0					
ANR	722329	Identifier	min		721752	1					
ANR	722330	AssignmentExpression	min = ONIGENC_MBC_MINLEN ( env -> enc )		721752	2		=			
ANR	722331	Identifier	min		721752	0					
ANR	722332	CallExpression	ONIGENC_MBC_MINLEN ( env -> enc )		721752	1					
ANR	722333	Callee	ONIGENC_MBC_MINLEN		721752	0					
ANR	722334	Identifier	ONIGENC_MBC_MINLEN		721752	0					
ANR	722335	ArgumentList	env -> enc		721752	1					
ANR	722336	Argument	env -> enc		721752	0					
ANR	722337	PtrMemberAccess	env -> enc		721752	0					
ANR	722338	Identifier	env		721752	0					
ANR	722339	Identifier	enc		721752	1					
ANR	722340	IdentifierDeclStatement	OnigDistance max = ONIGENC_MBC_MAXLEN_DIST ( env -> enc ) ;	4632:1:104203:104255	721752	1	True				
ANR	722341	IdentifierDecl	max = ONIGENC_MBC_MAXLEN_DIST ( env -> enc )		721752	0					
ANR	722342	IdentifierDeclType	OnigDistance		721752	0					
ANR	722343	Identifier	max		721752	1					
ANR	722344	AssignmentExpression	max = ONIGENC_MBC_MAXLEN_DIST ( env -> enc )		721752	2		=			
ANR	722345	Identifier	max		721752	0					
ANR	722346	CallExpression	ONIGENC_MBC_MAXLEN_DIST ( env -> enc )		721752	1					
ANR	722347	Callee	ONIGENC_MBC_MAXLEN_DIST		721752	0					
ANR	722348	Identifier	ONIGENC_MBC_MAXLEN_DIST		721752	0					
ANR	722349	ArgumentList	env -> enc		721752	1					
ANR	722350	Argument	env -> enc		721752	0					
ANR	722351	PtrMemberAccess	env -> enc		721752	0					
ANR	722352	Identifier	env		721752	0					
ANR	722353	Identifier	enc		721752	1					
ANR	722354	ExpressionStatement	"set_mml ( & opt -> len , min , max )"	4634:1:104259:104287	721752	2	True				
ANR	722355	CallExpression	"set_mml ( & opt -> len , min , max )"		721752	0					
ANR	722356	Callee	set_mml		721752	0					
ANR	722357	Identifier	set_mml		721752	0					
ANR	722358	ArgumentList	& opt -> len		721752	1					
ANR	722359	Argument	& opt -> len		721752	0					
ANR	722360	UnaryOperationExpression	& opt -> len		721752	0					
ANR	722361	UnaryOperator	&		721752	0					
ANR	722362	PtrMemberAccess	opt -> len		721752	1					
ANR	722363	Identifier	opt		721752	0					
ANR	722364	Identifier	len		721752	1					
ANR	722365	Argument	min		721752	1					
ANR	722366	Identifier	min		721752	0					
ANR	722367	Argument	max		721752	2					
ANR	722368	Identifier	max		721752	0					
ANR	722369	ElseStatement	else		721752	0					
ANR	722370	CompoundStatement		98:11:2184:2184	721752	0					
ANR	722371	ForStatement	for ( i = 0 ; i < SINGLE_BYTE_SIZE ; i ++ )		721752	0					
ANR	722372	ForInit	i = 0 ;	4637:13:104323:104328	721752	0	True				
ANR	722373	AssignmentExpression	i = 0		721752	0		=			
ANR	722374	Identifier	i		721752	0					
ANR	722375	PrimaryExpression	0		721752	1					
ANR	722376	Condition	i < SINGLE_BYTE_SIZE	4637:20:104330:104349	721752	1	True				
ANR	722377	RelationalExpression	i < SINGLE_BYTE_SIZE		721752	0		<			
ANR	722378	Identifier	i		721752	0					
ANR	722379	Identifier	SINGLE_BYTE_SIZE		721752	1					
ANR	722380	PostIncDecOperationExpression	i ++	4637:42:104352:104354	721752	2	True				
ANR	722381	Identifier	i		721752	0					
ANR	722382	IncDec	++		721752	1					
ANR	722383	CompoundStatement		99:47:2233:2233	721752	3					
ANR	722384	ExpressionStatement	"z = BITSET_AT ( cc -> bs , i )"	4638:10:104369:104393	721752	0	True				
ANR	722385	AssignmentExpression	"z = BITSET_AT ( cc -> bs , i )"		721752	0		=			
ANR	722386	Identifier	z		721752	0					
ANR	722387	CallExpression	"BITSET_AT ( cc -> bs , i )"		721752	1					
ANR	722388	Callee	BITSET_AT		721752	0					
ANR	722389	Identifier	BITSET_AT		721752	0					
ANR	722390	ArgumentList	cc -> bs		721752	1					
ANR	722391	Argument	cc -> bs		721752	0					
ANR	722392	PtrMemberAccess	cc -> bs		721752	0					
ANR	722393	Identifier	cc		721752	0					
ANR	722394	Identifier	bs		721752	1					
ANR	722395	Argument	i		721752	1					
ANR	722396	Identifier	i		721752	0					
ANR	722397	IfStatement	if ( ( z && ! IS_NCCLASS_NOT ( cc ) ) || ( ! z && IS_NCCLASS_NOT ( cc ) ) )		721752	1					
ANR	722398	Condition	( z && ! IS_NCCLASS_NOT ( cc ) ) || ( ! z && IS_NCCLASS_NOT ( cc ) )	4639:14:104409:104464	721752	0	True				
ANR	722399	OrExpression	( z && ! IS_NCCLASS_NOT ( cc ) ) || ( ! z && IS_NCCLASS_NOT ( cc ) )		721752	0		||			
ANR	722400	AndExpression	z && ! IS_NCCLASS_NOT ( cc )		721752	0		&&			
ANR	722401	Identifier	z		721752	0					
ANR	722402	UnaryOperationExpression	! IS_NCCLASS_NOT ( cc )		721752	1					
ANR	722403	UnaryOperator	!		721752	0					
ANR	722404	CallExpression	IS_NCCLASS_NOT ( cc )		721752	1					
ANR	722405	Callee	IS_NCCLASS_NOT		721752	0					
ANR	722406	Identifier	IS_NCCLASS_NOT		721752	0					
ANR	722407	ArgumentList	cc		721752	1					
ANR	722408	Argument	cc		721752	0					
ANR	722409	Identifier	cc		721752	0					
ANR	722410	AndExpression	! z && IS_NCCLASS_NOT ( cc )		721752	1		&&			
ANR	722411	UnaryOperationExpression	! z		721752	0					
ANR	722412	UnaryOperator	!		721752	0					
ANR	722413	Identifier	z		721752	1					
ANR	722414	CallExpression	IS_NCCLASS_NOT ( cc )		721752	1					
ANR	722415	Callee	IS_NCCLASS_NOT		721752	0					
ANR	722416	Identifier	IS_NCCLASS_NOT		721752	0					
ANR	722417	ArgumentList	cc		721752	1					
ANR	722418	Argument	cc		721752	0					
ANR	722419	Identifier	cc		721752	0					
ANR	722420	CompoundStatement		101:72:2343:2343	721752	1					
ANR	722421	ExpressionStatement	"add_char_opt_map_info ( & opt -> map , ( UChar ) i , env -> enc )"	4640:12:104481:104534	721752	0	True				
ANR	722422	CallExpression	"add_char_opt_map_info ( & opt -> map , ( UChar ) i , env -> enc )"		721752	0					
ANR	722423	Callee	add_char_opt_map_info		721752	0					
ANR	722424	Identifier	add_char_opt_map_info		721752	0					
ANR	722425	ArgumentList	& opt -> map		721752	1					
ANR	722426	Argument	& opt -> map		721752	0					
ANR	722427	UnaryOperationExpression	& opt -> map		721752	0					
ANR	722428	UnaryOperator	&		721752	0					
ANR	722429	PtrMemberAccess	opt -> map		721752	1					
ANR	722430	Identifier	opt		721752	0					
ANR	722431	Identifier	map		721752	1					
ANR	722432	Argument	( UChar ) i		721752	1					
ANR	722433	CastExpression	( UChar ) i		721752	0					
ANR	722434	CastTarget	UChar		721752	0					
ANR	722435	Identifier	i		721752	1					
ANR	722436	Argument	env -> enc		721752	2					
ANR	722437	PtrMemberAccess	env -> enc		721752	0					
ANR	722438	Identifier	env		721752	0					
ANR	722439	Identifier	enc		721752	1					
ANR	722440	ExpressionStatement	"set_mml ( & opt -> len , 1 , 1 )"	4643:1:104559:104583	721752	1	True				
ANR	722441	CallExpression	"set_mml ( & opt -> len , 1 , 1 )"		721752	0					
ANR	722442	Callee	set_mml		721752	0					
ANR	722443	Identifier	set_mml		721752	0					
ANR	722444	ArgumentList	& opt -> len		721752	1					
ANR	722445	Argument	& opt -> len		721752	0					
ANR	722446	UnaryOperationExpression	& opt -> len		721752	0					
ANR	722447	UnaryOperator	&		721752	0					
ANR	722448	PtrMemberAccess	opt -> len		721752	1					
ANR	722449	Identifier	opt		721752	0					
ANR	722450	Identifier	len		721752	1					
ANR	722451	Argument	1		721752	1					
ANR	722452	PrimaryExpression	1		721752	0					
ANR	722453	Argument	1		721752	2					
ANR	722454	PrimaryExpression	1		721752	0					
ANR	722455	BreakStatement	break ;	4646:4:104603:104608	721752	11	True				
ANR	722456	Label	case NT_CTYPE :	4648:2:104613:104626	721752	12	True				
ANR	722457	Identifier	NT_CTYPE		721752	0					
ANR	722458	CompoundStatement		112:6:2516:2531	721752	13					
ANR	722459	IdentifierDeclStatement	"int i , min , max ;"	4650:6:104640:104655	721752	0	True				
ANR	722460	IdentifierDecl	i		721752	0					
ANR	722461	IdentifierDeclType	int		721752	0					
ANR	722462	Identifier	i		721752	1					
ANR	722463	IdentifierDecl	min		721752	1					
ANR	722464	IdentifierDeclType	int		721752	0					
ANR	722465	Identifier	min		721752	1					
ANR	722466	IdentifierDecl	max		721752	2					
ANR	722467	IdentifierDeclType	int		721752	0					
ANR	722468	Identifier	max		721752	1					
ANR	722469	ExpressionStatement	max = ONIGENC_MBC_MAXLEN_DIST ( env -> enc )	4652:6:104664:104703	721752	1	True				
ANR	722470	AssignmentExpression	max = ONIGENC_MBC_MAXLEN_DIST ( env -> enc )		721752	0		=			
ANR	722471	Identifier	max		721752	0					
ANR	722472	CallExpression	ONIGENC_MBC_MAXLEN_DIST ( env -> enc )		721752	1					
ANR	722473	Callee	ONIGENC_MBC_MAXLEN_DIST		721752	0					
ANR	722474	Identifier	ONIGENC_MBC_MAXLEN_DIST		721752	0					
ANR	722475	ArgumentList	env -> enc		721752	1					
ANR	722476	Argument	env -> enc		721752	0					
ANR	722477	PtrMemberAccess	env -> enc		721752	0					
ANR	722478	Identifier	env		721752	0					
ANR	722479	Identifier	enc		721752	1					
ANR	722480	IfStatement	if ( max == 1 )		721752	2					
ANR	722481	Condition	max == 1	4654:10:104716:104723	721752	0	True				
ANR	722482	EqualityExpression	max == 1		721752	0		==			
ANR	722483	Identifier	max		721752	0					
ANR	722484	PrimaryExpression	1		721752	1					
ANR	722485	CompoundStatement		116:20:2602:2602	721752	1					
ANR	722486	ExpressionStatement	min = 1	4655:8:104736:104743	721752	0	True				
ANR	722487	AssignmentExpression	min = 1		721752	0		=			
ANR	722488	Identifier	min		721752	0					
ANR	722489	PrimaryExpression	1		721752	1					
ANR	722490	SwitchStatement	switch ( NCTYPE ( node ) -> ctype )		721752	1					
ANR	722491	Condition	NCTYPE ( node ) -> ctype	4657:9:104755:104773	721752	0	True				
ANR	722492	PtrMemberAccess	NCTYPE ( node ) -> ctype		721752	0					
ANR	722493	CallExpression	NCTYPE ( node )		721752	0					
ANR	722494	Callee	NCTYPE		721752	0					
ANR	722495	Identifier	NCTYPE		721752	0					
ANR	722496	ArgumentList	node		721752	1					
ANR	722497	Argument	node		721752	0					
ANR	722498	Identifier	node		721752	0					
ANR	722499	Identifier	ctype		721752	1					
ANR	722500	CompoundStatement		119:30:2652:2652	721752	1					
ANR	722501	Label	case ONIGENC_CTYPE_WORD :	4658:1:104779:104802	721752	0	True				
ANR	722502	Identifier	ONIGENC_CTYPE_WORD		721752	0					
ANR	722503	IfStatement	if ( NCTYPE ( node ) -> not != 0 )		721752	1					
ANR	722504	Condition	NCTYPE ( node ) -> not != 0	4659:7:104811:104832	721752	0	True				
ANR	722505	EqualityExpression	NCTYPE ( node ) -> not != 0		721752	0		!=			
ANR	722506	PtrMemberAccess	NCTYPE ( node ) -> not		721752	0					
ANR	722507	CallExpression	NCTYPE ( node )		721752	0					
ANR	722508	Callee	NCTYPE		721752	0					
ANR	722509	Identifier	NCTYPE		721752	0					
ANR	722510	ArgumentList	node		721752	1					
ANR	722511	Argument	node		721752	0					
ANR	722512	Identifier	node		721752	0					
ANR	722513	Identifier	not		721752	1					
ANR	722514	PrimaryExpression	0		721752	1					
ANR	722515	CompoundStatement		121:31:2711:2711	721752	1					
ANR	722516	ForStatement	for ( i = 0 ; i < SINGLE_BYTE_SIZE ; i ++ )		721752	0					
ANR	722517	ForInit	i = 0 ;	4660:10:104847:104852	721752	0	True				
ANR	722518	AssignmentExpression	i = 0		721752	0		=			
ANR	722519	Identifier	i		721752	0					
ANR	722520	PrimaryExpression	0		721752	1					
ANR	722521	Condition	i < SINGLE_BYTE_SIZE	4660:17:104854:104873	721752	1	True				
ANR	722522	RelationalExpression	i < SINGLE_BYTE_SIZE		721752	0		<			
ANR	722523	Identifier	i		721752	0					
ANR	722524	Identifier	SINGLE_BYTE_SIZE		721752	1					
ANR	722525	PostIncDecOperationExpression	i ++	4660:39:104876:104878	721752	2	True				
ANR	722526	Identifier	i		721752	0					
ANR	722527	IncDec	++		721752	1					
ANR	722528	CompoundStatement		122:44:2757:2757	721752	3					
ANR	722529	IfStatement	"if ( ! ONIGENC_IS_CODE_WORD ( env -> enc , i ) )"		721752	0					
ANR	722530	Condition	"! ONIGENC_IS_CODE_WORD ( env -> enc , i )"	4661:11:104894:104928	721752	0	True				
ANR	722531	UnaryOperationExpression	"! ONIGENC_IS_CODE_WORD ( env -> enc , i )"		721752	0					
ANR	722532	UnaryOperator	!		721752	0					
ANR	722533	CallExpression	"ONIGENC_IS_CODE_WORD ( env -> enc , i )"		721752	1					
ANR	722534	Callee	ONIGENC_IS_CODE_WORD		721752	0					
ANR	722535	Identifier	ONIGENC_IS_CODE_WORD		721752	0					
ANR	722536	ArgumentList	env -> enc		721752	1					
ANR	722537	Argument	env -> enc		721752	0					
ANR	722538	PtrMemberAccess	env -> enc		721752	0					
ANR	722539	Identifier	env		721752	0					
ANR	722540	Identifier	enc		721752	1					
ANR	722541	Argument	i		721752	1					
ANR	722542	Identifier	i		721752	0					
ANR	722543	CompoundStatement		123:48:2807:2807	721752	1					
ANR	722544	ExpressionStatement	"add_char_opt_map_info ( & opt -> map , ( UChar ) i , env -> enc )"	4662:2:104935:104988	721752	0	True				
ANR	722545	CallExpression	"add_char_opt_map_info ( & opt -> map , ( UChar ) i , env -> enc )"		721752	0					
ANR	722546	Callee	add_char_opt_map_info		721752	0					
ANR	722547	Identifier	add_char_opt_map_info		721752	0					
ANR	722548	ArgumentList	& opt -> map		721752	1					
ANR	722549	Argument	& opt -> map		721752	0					
ANR	722550	UnaryOperationExpression	& opt -> map		721752	0					
ANR	722551	UnaryOperator	&		721752	0					
ANR	722552	PtrMemberAccess	opt -> map		721752	1					
ANR	722553	Identifier	opt		721752	0					
ANR	722554	Identifier	map		721752	1					
ANR	722555	Argument	( UChar ) i		721752	1					
ANR	722556	CastExpression	( UChar ) i		721752	0					
ANR	722557	CastTarget	UChar		721752	0					
ANR	722558	Identifier	i		721752	1					
ANR	722559	Argument	env -> enc		721752	2					
ANR	722560	PtrMemberAccess	env -> enc		721752	0					
ANR	722561	Identifier	env		721752	0					
ANR	722562	Identifier	enc		721752	1					
ANR	722563	ElseStatement	else		721752	0					
ANR	722564	CompoundStatement		128:8:2895:2895	721752	0					
ANR	722565	ForStatement	for ( i = 0 ; i < SINGLE_BYTE_SIZE ; i ++ )		721752	0					
ANR	722566	ForInit	i = 0 ;	4667:10:105031:105036	721752	0	True				
ANR	722567	AssignmentExpression	i = 0		721752	0		=			
ANR	722568	Identifier	i		721752	0					
ANR	722569	PrimaryExpression	0		721752	1					
ANR	722570	Condition	i < SINGLE_BYTE_SIZE	4667:17:105038:105057	721752	1	True				
ANR	722571	RelationalExpression	i < SINGLE_BYTE_SIZE		721752	0		<			
ANR	722572	Identifier	i		721752	0					
ANR	722573	Identifier	SINGLE_BYTE_SIZE		721752	1					
ANR	722574	PostIncDecOperationExpression	i ++	4667:39:105060:105062	721752	2	True				
ANR	722575	Identifier	i		721752	0					
ANR	722576	IncDec	++		721752	1					
ANR	722577	CompoundStatement		129:44:2941:2941	721752	3					
ANR	722578	IfStatement	"if ( ONIGENC_IS_CODE_WORD ( env -> enc , i ) )"		721752	0					
ANR	722579	Condition	"ONIGENC_IS_CODE_WORD ( env -> enc , i )"	4668:11:105078:105110	721752	0	True				
ANR	722580	CallExpression	"ONIGENC_IS_CODE_WORD ( env -> enc , i )"		721752	0					
ANR	722581	Callee	ONIGENC_IS_CODE_WORD		721752	0					
ANR	722582	Identifier	ONIGENC_IS_CODE_WORD		721752	0					
ANR	722583	ArgumentList	env -> enc		721752	1					
ANR	722584	Argument	env -> enc		721752	0					
ANR	722585	PtrMemberAccess	env -> enc		721752	0					
ANR	722586	Identifier	env		721752	0					
ANR	722587	Identifier	enc		721752	1					
ANR	722588	Argument	i		721752	1					
ANR	722589	Identifier	i		721752	0					
ANR	722590	CompoundStatement		130:46:2989:2989	721752	1					
ANR	722591	ExpressionStatement	"add_char_opt_map_info ( & opt -> map , ( UChar ) i , env -> enc )"	4669:2:105117:105170	721752	0	True				
ANR	722592	CallExpression	"add_char_opt_map_info ( & opt -> map , ( UChar ) i , env -> enc )"		721752	0					
ANR	722593	Callee	add_char_opt_map_info		721752	0					
ANR	722594	Identifier	add_char_opt_map_info		721752	0					
ANR	722595	ArgumentList	& opt -> map		721752	1					
ANR	722596	Argument	& opt -> map		721752	0					
ANR	722597	UnaryOperationExpression	& opt -> map		721752	0					
ANR	722598	UnaryOperator	&		721752	0					
ANR	722599	PtrMemberAccess	opt -> map		721752	1					
ANR	722600	Identifier	opt		721752	0					
ANR	722601	Identifier	map		721752	1					
ANR	722602	Argument	( UChar ) i		721752	1					
ANR	722603	CastExpression	( UChar ) i		721752	0					
ANR	722604	CastTarget	UChar		721752	0					
ANR	722605	Identifier	i		721752	1					
ANR	722606	Argument	env -> enc		721752	2					
ANR	722607	PtrMemberAccess	env -> enc		721752	0					
ANR	722608	Identifier	env		721752	0					
ANR	722609	Identifier	enc		721752	1					
ANR	722610	BreakStatement	break ;	4673:3:105196:105201	721752	2	True				
ANR	722611	ElseStatement	else		721752	0					
ANR	722612	CompoundStatement		138:11:3101:3101	721752	0					
ANR	722613	ExpressionStatement	min = ONIGENC_MBC_MINLEN ( env -> enc )	4677:8:105235:105269	721752	0	True				
ANR	722614	AssignmentExpression	min = ONIGENC_MBC_MINLEN ( env -> enc )		721752	0		=			
ANR	722615	Identifier	min		721752	0					
ANR	722616	CallExpression	ONIGENC_MBC_MINLEN ( env -> enc )		721752	1					
ANR	722617	Callee	ONIGENC_MBC_MINLEN		721752	0					
ANR	722618	Identifier	ONIGENC_MBC_MINLEN		721752	0					
ANR	722619	ArgumentList	env -> enc		721752	1					
ANR	722620	Argument	env -> enc		721752	0					
ANR	722621	PtrMemberAccess	env -> enc		721752	0					
ANR	722622	Identifier	env		721752	0					
ANR	722623	Identifier	enc		721752	1					
ANR	722624	ExpressionStatement	"set_mml ( & opt -> len , min , max )"	4679:6:105285:105313	721752	3	True				
ANR	722625	CallExpression	"set_mml ( & opt -> len , min , max )"		721752	0					
ANR	722626	Callee	set_mml		721752	0					
ANR	722627	Identifier	set_mml		721752	0					
ANR	722628	ArgumentList	& opt -> len		721752	1					
ANR	722629	Argument	& opt -> len		721752	0					
ANR	722630	UnaryOperationExpression	& opt -> len		721752	0					
ANR	722631	UnaryOperator	&		721752	0					
ANR	722632	PtrMemberAccess	opt -> len		721752	1					
ANR	722633	Identifier	opt		721752	0					
ANR	722634	Identifier	len		721752	1					
ANR	722635	Argument	min		721752	1					
ANR	722636	Identifier	min		721752	0					
ANR	722637	Argument	max		721752	2					
ANR	722638	Identifier	max		721752	0					
ANR	722639	BreakStatement	break ;	4681:4:105325:105330	721752	14	True				
ANR	722640	Label	case NT_CANY :	4683:2:105335:105347	721752	15	True				
ANR	722641	Identifier	NT_CANY		721752	0					
ANR	722642	CompoundStatement		148:6:3292:3344	721752	16					
ANR	722643	IdentifierDeclStatement	OnigDistance min = ONIGENC_MBC_MINLEN ( env -> enc ) ;	4685:6:105361:105408	721752	0	True				
ANR	722644	IdentifierDecl	min = ONIGENC_MBC_MINLEN ( env -> enc )		721752	0					
ANR	722645	IdentifierDeclType	OnigDistance		721752	0					
ANR	722646	Identifier	min		721752	1					
ANR	722647	AssignmentExpression	min = ONIGENC_MBC_MINLEN ( env -> enc )		721752	2		=			
ANR	722648	Identifier	min		721752	0					
ANR	722649	CallExpression	ONIGENC_MBC_MINLEN ( env -> enc )		721752	1					
ANR	722650	Callee	ONIGENC_MBC_MINLEN		721752	0					
ANR	722651	Identifier	ONIGENC_MBC_MINLEN		721752	0					
ANR	722652	ArgumentList	env -> enc		721752	1					
ANR	722653	Argument	env -> enc		721752	0					
ANR	722654	PtrMemberAccess	env -> enc		721752	0					
ANR	722655	Identifier	env		721752	0					
ANR	722656	Identifier	enc		721752	1					
ANR	722657	IdentifierDeclStatement	OnigDistance max = ONIGENC_MBC_MAXLEN_DIST ( env -> enc ) ;	4686:6:105416:105468	721752	1	True				
ANR	722658	IdentifierDecl	max = ONIGENC_MBC_MAXLEN_DIST ( env -> enc )		721752	0					
ANR	722659	IdentifierDeclType	OnigDistance		721752	0					
ANR	722660	Identifier	max		721752	1					
ANR	722661	AssignmentExpression	max = ONIGENC_MBC_MAXLEN_DIST ( env -> enc )		721752	2		=			
ANR	722662	Identifier	max		721752	0					
ANR	722663	CallExpression	ONIGENC_MBC_MAXLEN_DIST ( env -> enc )		721752	1					
ANR	722664	Callee	ONIGENC_MBC_MAXLEN_DIST		721752	0					
ANR	722665	Identifier	ONIGENC_MBC_MAXLEN_DIST		721752	0					
ANR	722666	ArgumentList	env -> enc		721752	1					
ANR	722667	Argument	env -> enc		721752	0					
ANR	722668	PtrMemberAccess	env -> enc		721752	0					
ANR	722669	Identifier	env		721752	0					
ANR	722670	Identifier	enc		721752	1					
ANR	722671	ExpressionStatement	"set_mml ( & opt -> len , min , max )"	4687:6:105476:105504	721752	2	True				
ANR	722672	CallExpression	"set_mml ( & opt -> len , min , max )"		721752	0					
ANR	722673	Callee	set_mml		721752	0					
ANR	722674	Identifier	set_mml		721752	0					
ANR	722675	ArgumentList	& opt -> len		721752	1					
ANR	722676	Argument	& opt -> len		721752	0					
ANR	722677	UnaryOperationExpression	& opt -> len		721752	0					
ANR	722678	UnaryOperator	&		721752	0					
ANR	722679	PtrMemberAccess	opt -> len		721752	1					
ANR	722680	Identifier	opt		721752	0					
ANR	722681	Identifier	len		721752	1					
ANR	722682	Argument	min		721752	1					
ANR	722683	Identifier	min		721752	0					
ANR	722684	Argument	max		721752	2					
ANR	722685	Identifier	max		721752	0					
ANR	722686	BreakStatement	break ;	4689:4:105516:105521	721752	17	True				
ANR	722687	Label	case NT_ANCHOR :	4691:2:105526:105540	721752	18	True				
ANR	722688	Identifier	NT_ANCHOR		721752	0					
ANR	722689	SwitchStatement	switch ( NANCHOR ( node ) -> type )		721752	19					
ANR	722690	Condition	NANCHOR ( node ) -> type	4692:12:105554:105572	721752	0	True				
ANR	722691	PtrMemberAccess	NANCHOR ( node ) -> type		721752	0					
ANR	722692	CallExpression	NANCHOR ( node )		721752	0					
ANR	722693	Callee	NANCHOR		721752	0					
ANR	722694	Identifier	NANCHOR		721752	0					
ANR	722695	ArgumentList	node		721752	1					
ANR	722696	Argument	node		721752	0					
ANR	722697	Identifier	node		721752	0					
ANR	722698	Identifier	type		721752	1					
ANR	722699	CompoundStatement		154:33:3451:3451	721752	1					
ANR	722700	Label	case ANCHOR_BEGIN_BUF :	4693:4:105581:105602	721752	0	True				
ANR	722701	Identifier	ANCHOR_BEGIN_BUF		721752	0					
ANR	722702	Label	case ANCHOR_BEGIN_POSITION :	4694:4:105608:105634	721752	1	True				
ANR	722703	Identifier	ANCHOR_BEGIN_POSITION		721752	0					
ANR	722704	Label	case ANCHOR_BEGIN_LINE :	4695:4:105640:105662	721752	2	True				
ANR	722705	Identifier	ANCHOR_BEGIN_LINE		721752	0					
ANR	722706	Label	case ANCHOR_END_BUF :	4696:4:105668:105687	721752	3	True				
ANR	722707	Identifier	ANCHOR_END_BUF		721752	0					
ANR	722708	Label	case ANCHOR_SEMI_END_BUF :	4697:4:105693:105717	721752	4	True				
ANR	722709	Identifier	ANCHOR_SEMI_END_BUF		721752	0					
ANR	722710	Label	case ANCHOR_END_LINE :	4698:4:105723:105743	721752	5	True				
ANR	722711	Identifier	ANCHOR_END_LINE		721752	0					
ANR	722712	ExpressionStatement	"add_opt_anc_info ( & opt -> anc , NANCHOR ( node ) -> type )"	4699:6:105751:105799	721752	6	True				
ANR	722713	CallExpression	"add_opt_anc_info ( & opt -> anc , NANCHOR ( node ) -> type )"		721752	0					
ANR	722714	Callee	add_opt_anc_info		721752	0					
ANR	722715	Identifier	add_opt_anc_info		721752	0					
ANR	722716	ArgumentList	& opt -> anc		721752	1					
ANR	722717	Argument	& opt -> anc		721752	0					
ANR	722718	UnaryOperationExpression	& opt -> anc		721752	0					
ANR	722719	UnaryOperator	&		721752	0					
ANR	722720	PtrMemberAccess	opt -> anc		721752	1					
ANR	722721	Identifier	opt		721752	0					
ANR	722722	Identifier	anc		721752	1					
ANR	722723	Argument	NANCHOR ( node ) -> type		721752	1					
ANR	722724	PtrMemberAccess	NANCHOR ( node ) -> type		721752	0					
ANR	722725	CallExpression	NANCHOR ( node )		721752	0					
ANR	722726	Callee	NANCHOR		721752	0					
ANR	722727	Identifier	NANCHOR		721752	0					
ANR	722728	ArgumentList	node		721752	1					
ANR	722729	Argument	node		721752	0					
ANR	722730	Identifier	node		721752	0					
ANR	722731	Identifier	type		721752	1					
ANR	722732	BreakStatement	break ;	4700:6:105807:105812	721752	7	True				
ANR	722733	Label	case ANCHOR_PREC_READ :	4702:4:105819:105840	721752	8	True				
ANR	722734	Identifier	ANCHOR_PREC_READ		721752	0					
ANR	722735	CompoundStatement		166:1:3727:3743	721752	9					
ANR	722736	IdentifierDeclStatement	NodeOptInfo nopt ;	4704:1:105851:105867	721752	0	True				
ANR	722737	IdentifierDecl	nopt		721752	0					
ANR	722738	IdentifierDeclType	NodeOptInfo		721752	0					
ANR	722739	Identifier	nopt		721752	1					
ANR	722740	ExpressionStatement	"r = optimize_node_left ( NANCHOR ( node ) -> target , & nopt , env )"	4706:1:105871:105928	721752	1	True				
ANR	722741	AssignmentExpression	"r = optimize_node_left ( NANCHOR ( node ) -> target , & nopt , env )"		721752	0		=			
ANR	722742	Identifier	r		721752	0					
ANR	722743	CallExpression	"optimize_node_left ( NANCHOR ( node ) -> target , & nopt , env )"		721752	1					
ANR	722744	Callee	optimize_node_left		721752	0					
ANR	722745	Identifier	optimize_node_left		721752	0					
ANR	722746	ArgumentList	NANCHOR ( node ) -> target		721752	1					
ANR	722747	Argument	NANCHOR ( node ) -> target		721752	0					
ANR	722748	PtrMemberAccess	NANCHOR ( node ) -> target		721752	0					
ANR	722749	CallExpression	NANCHOR ( node )		721752	0					
ANR	722750	Callee	NANCHOR		721752	0					
ANR	722751	Identifier	NANCHOR		721752	0					
ANR	722752	ArgumentList	node		721752	1					
ANR	722753	Argument	node		721752	0					
ANR	722754	Identifier	node		721752	0					
ANR	722755	Identifier	target		721752	1					
ANR	722756	Argument	& nopt		721752	1					
ANR	722757	UnaryOperationExpression	& nopt		721752	0					
ANR	722758	UnaryOperator	&		721752	0					
ANR	722759	Identifier	nopt		721752	1					
ANR	722760	Argument	env		721752	2					
ANR	722761	Identifier	env		721752	0					
ANR	722762	IfStatement	if ( r == 0 )		721752	2					
ANR	722763	Condition	r == 0	4707:5:105935:105940	721752	0	True				
ANR	722764	EqualityExpression	r == 0		721752	0		==			
ANR	722765	Identifier	r		721752	0					
ANR	722766	PrimaryExpression	0		721752	1					
ANR	722767	CompoundStatement		169:13:3819:3819	721752	1					
ANR	722768	IfStatement	if ( nopt . exb . len > 0 )		721752	0					
ANR	722769	Condition	nopt . exb . len > 0	4708:7:105952:105967	721752	0	True				
ANR	722770	RelationalExpression	nopt . exb . len > 0		721752	0		>			
ANR	722771	MemberAccess	nopt . exb . len		721752	0					
ANR	722772	MemberAccess	nopt . exb		721752	0					
ANR	722773	Identifier	nopt		721752	0					
ANR	722774	Identifier	exb		721752	1					
ANR	722775	Identifier	len		721752	1					
ANR	722776	PrimaryExpression	0		721752	1					
ANR	722777	ExpressionStatement	"copy_opt_exact_info ( & opt -> expr , & nopt . exb )"	4709:5:105975:106017	721752	1	True				
ANR	722778	CallExpression	"copy_opt_exact_info ( & opt -> expr , & nopt . exb )"		721752	0					
ANR	722779	Callee	copy_opt_exact_info		721752	0					
ANR	722780	Identifier	copy_opt_exact_info		721752	0					
ANR	722781	ArgumentList	& opt -> expr		721752	1					
ANR	722782	Argument	& opt -> expr		721752	0					
ANR	722783	UnaryOperationExpression	& opt -> expr		721752	0					
ANR	722784	UnaryOperator	&		721752	0					
ANR	722785	PtrMemberAccess	opt -> expr		721752	1					
ANR	722786	Identifier	opt		721752	0					
ANR	722787	Identifier	expr		721752	1					
ANR	722788	Argument	& nopt . exb		721752	1					
ANR	722789	UnaryOperationExpression	& nopt . exb		721752	0					
ANR	722790	UnaryOperator	&		721752	0					
ANR	722791	MemberAccess	nopt . exb		721752	1					
ANR	722792	Identifier	nopt		721752	0					
ANR	722793	Identifier	exb		721752	1					
ANR	722794	ElseStatement	else		721752	0					
ANR	722795	IfStatement	if ( nopt . exm . len > 0 )		721752	0					
ANR	722796	Condition	nopt . exm . len > 0	4710:12:106031:106046	721752	0	True				
ANR	722797	RelationalExpression	nopt . exm . len > 0		721752	0		>			
ANR	722798	MemberAccess	nopt . exm . len		721752	0					
ANR	722799	MemberAccess	nopt . exm		721752	0					
ANR	722800	Identifier	nopt		721752	0					
ANR	722801	Identifier	exm		721752	1					
ANR	722802	Identifier	len		721752	1					
ANR	722803	PrimaryExpression	0		721752	1					
ANR	722804	ExpressionStatement	"copy_opt_exact_info ( & opt -> expr , & nopt . exm )"	4711:5:106054:106096	721752	1	True				
ANR	722805	CallExpression	"copy_opt_exact_info ( & opt -> expr , & nopt . exm )"		721752	0					
ANR	722806	Callee	copy_opt_exact_info		721752	0					
ANR	722807	Identifier	copy_opt_exact_info		721752	0					
ANR	722808	ArgumentList	& opt -> expr		721752	1					
ANR	722809	Argument	& opt -> expr		721752	0					
ANR	722810	UnaryOperationExpression	& opt -> expr		721752	0					
ANR	722811	UnaryOperator	&		721752	0					
ANR	722812	PtrMemberAccess	opt -> expr		721752	1					
ANR	722813	Identifier	opt		721752	0					
ANR	722814	Identifier	expr		721752	1					
ANR	722815	Argument	& nopt . exm		721752	1					
ANR	722816	UnaryOperationExpression	& nopt . exm		721752	0					
ANR	722817	UnaryOperator	&		721752	0					
ANR	722818	MemberAccess	nopt . exm		721752	1					
ANR	722819	Identifier	nopt		721752	0					
ANR	722820	Identifier	exm		721752	1					
ANR	722821	ExpressionStatement	opt -> expr . reach_end = 0	4713:3:106102:106125	721752	1	True				
ANR	722822	AssignmentExpression	opt -> expr . reach_end = 0		721752	0		=			
ANR	722823	MemberAccess	opt -> expr . reach_end		721752	0					
ANR	722824	PtrMemberAccess	opt -> expr		721752	0					
ANR	722825	Identifier	opt		721752	0					
ANR	722826	Identifier	expr		721752	1					
ANR	722827	Identifier	reach_end		721752	1					
ANR	722828	PrimaryExpression	0		721752	1					
ANR	722829	IfStatement	if ( nopt . map . value > 0 )		721752	2					
ANR	722830	Condition	nopt . map . value > 0	4715:7:106135:106152	721752	0	True				
ANR	722831	RelationalExpression	nopt . map . value > 0		721752	0		>			
ANR	722832	MemberAccess	nopt . map . value		721752	0					
ANR	722833	MemberAccess	nopt . map		721752	0					
ANR	722834	Identifier	nopt		721752	0					
ANR	722835	Identifier	map		721752	1					
ANR	722836	Identifier	value		721752	1					
ANR	722837	PrimaryExpression	0		721752	1					
ANR	722838	ExpressionStatement	"copy_opt_map_info ( & opt -> map , & nopt . map )"	4716:5:106160:106199	721752	1	True				
ANR	722839	CallExpression	"copy_opt_map_info ( & opt -> map , & nopt . map )"		721752	0					
ANR	722840	Callee	copy_opt_map_info		721752	0					
ANR	722841	Identifier	copy_opt_map_info		721752	0					
ANR	722842	ArgumentList	& opt -> map		721752	1					
ANR	722843	Argument	& opt -> map		721752	0					
ANR	722844	UnaryOperationExpression	& opt -> map		721752	0					
ANR	722845	UnaryOperator	&		721752	0					
ANR	722846	PtrMemberAccess	opt -> map		721752	1					
ANR	722847	Identifier	opt		721752	0					
ANR	722848	Identifier	map		721752	1					
ANR	722849	Argument	& nopt . map		721752	1					
ANR	722850	UnaryOperationExpression	& nopt . map		721752	0					
ANR	722851	UnaryOperator	&		721752	0					
ANR	722852	MemberAccess	nopt . map		721752	1					
ANR	722853	Identifier	nopt		721752	0					
ANR	722854	Identifier	map		721752	1					
ANR	722855	BreakStatement	break ;	4719:6:106218:106223	721752	10	True				
ANR	722856	Label	case ANCHOR_PREC_READ_NOT :	4721:4:106230:106255	721752	11	True				
ANR	722857	Identifier	ANCHOR_PREC_READ_NOT		721752	0					
ANR	722858	Label	case ANCHOR_LOOK_BEHIND :	4722:4:106261:106284	721752	12	True				
ANR	722859	Identifier	ANCHOR_LOOK_BEHIND		721752	0					
ANR	722860	Label	case ANCHOR_LOOK_BEHIND_NOT :	4723:4:106327:106354	721752	13	True				
ANR	722861	Identifier	ANCHOR_LOOK_BEHIND_NOT		721752	0					
ANR	722862	BreakStatement	break ;	4724:6:106362:106367	721752	14	True				
ANR	722863	BreakStatement	break ;	4726:4:106379:106384	721752	20	True				
ANR	722864	Label	case NT_BREF :	4728:2:106389:106401	721752	21	True				
ANR	722865	Identifier	NT_BREF		721752	0					
ANR	722866	CompoundStatement		196:6:4418:4444	721752	22					
ANR	722867	IdentifierDeclStatement	int i ;	4730:6:106415:106420	721752	0	True				
ANR	722868	IdentifierDecl	i		721752	0					
ANR	722869	IdentifierDeclType	int		721752	0					
ANR	722870	Identifier	i		721752	1					
ANR	722871	IdentifierDeclStatement	int * backs ;	4731:6:106428:106438	721752	1	True				
ANR	722872	IdentifierDecl	* backs		721752	0					
ANR	722873	IdentifierDeclType	int *		721752	0					
ANR	722874	Identifier	backs		721752	1					
ANR	722875	IdentifierDeclStatement	"OnigDistance min , max , tmin , tmax ;"	4732:6:106446:106479	721752	2	True				
ANR	722876	IdentifierDecl	min		721752	0					
ANR	722877	IdentifierDeclType	OnigDistance		721752	0					
ANR	722878	Identifier	min		721752	1					
ANR	722879	IdentifierDecl	max		721752	1					
ANR	722880	IdentifierDeclType	OnigDistance		721752	0					
ANR	722881	Identifier	max		721752	1					
ANR	722882	IdentifierDecl	tmin		721752	2					
ANR	722883	IdentifierDeclType	OnigDistance		721752	0					
ANR	722884	Identifier	tmin		721752	1					
ANR	722885	IdentifierDecl	tmax		721752	3					
ANR	722886	IdentifierDeclType	OnigDistance		721752	0					
ANR	722887	Identifier	tmax		721752	1					
ANR	722888	IdentifierDeclStatement	Node * * nodes = SCANENV_MEM_NODES ( env -> scan_env ) ;	4733:6:106487:106534	721752	3	True				
ANR	722889	IdentifierDecl	* * nodes = SCANENV_MEM_NODES ( env -> scan_env )		721752	0					
ANR	722890	IdentifierDeclType	Node * *		721752	0					
ANR	722891	Identifier	nodes		721752	1					
ANR	722892	AssignmentExpression	* * nodes = SCANENV_MEM_NODES ( env -> scan_env )		721752	2		=			
ANR	722893	Identifier	nodes		721752	0					
ANR	722894	CallExpression	SCANENV_MEM_NODES ( env -> scan_env )		721752	1					
ANR	722895	Callee	SCANENV_MEM_NODES		721752	0					
ANR	722896	Identifier	SCANENV_MEM_NODES		721752	0					
ANR	722897	ArgumentList	env -> scan_env		721752	1					
ANR	722898	Argument	env -> scan_env		721752	0					
ANR	722899	PtrMemberAccess	env -> scan_env		721752	0					
ANR	722900	Identifier	env		721752	0					
ANR	722901	Identifier	scan_env		721752	1					
ANR	722902	IdentifierDeclStatement	BRefNode * br = NBREF ( node ) ;	4734:6:106542:106568	721752	4	True				
ANR	722903	IdentifierDecl	* br = NBREF ( node )		721752	0					
ANR	722904	IdentifierDeclType	BRefNode *		721752	0					
ANR	722905	Identifier	br		721752	1					
ANR	722906	AssignmentExpression	* br = NBREF ( node )		721752	2		=			
ANR	722907	Identifier	br		721752	0					
ANR	722908	CallExpression	NBREF ( node )		721752	1					
ANR	722909	Callee	NBREF		721752	0					
ANR	722910	Identifier	NBREF		721752	0					
ANR	722911	ArgumentList	node		721752	1					
ANR	722912	Argument	node		721752	0					
ANR	722913	Identifier	node		721752	0					
ANR	722914	IfStatement	if ( br -> state & NST_RECURSION )		721752	5					
ANR	722915	Condition	br -> state & NST_RECURSION	4736:10:106581:106605	721752	0	True				
ANR	722916	BitAndExpression	br -> state & NST_RECURSION		721752	0		&			
ANR	722917	PtrMemberAccess	br -> state		721752	0					
ANR	722918	Identifier	br		721752	0					
ANR	722919	Identifier	state		721752	1					
ANR	722920	Identifier	NST_RECURSION		721752	1					
ANR	722921	CompoundStatement		198:37:4484:4484	721752	1					
ANR	722922	ExpressionStatement	"set_mml ( & opt -> len , 0 , ONIG_INFINITE_DISTANCE )"	4737:1:106611:106656	721752	0	True				
ANR	722923	CallExpression	"set_mml ( & opt -> len , 0 , ONIG_INFINITE_DISTANCE )"		721752	0					
ANR	722924	Callee	set_mml		721752	0					
ANR	722925	Identifier	set_mml		721752	0					
ANR	722926	ArgumentList	& opt -> len		721752	1					
ANR	722927	Argument	& opt -> len		721752	0					
ANR	722928	UnaryOperationExpression	& opt -> len		721752	0					
ANR	722929	UnaryOperator	&		721752	0					
ANR	722930	PtrMemberAccess	opt -> len		721752	1					
ANR	722931	Identifier	opt		721752	0					
ANR	722932	Identifier	len		721752	1					
ANR	722933	Argument	0		721752	1					
ANR	722934	PrimaryExpression	0		721752	0					
ANR	722935	Argument	ONIG_INFINITE_DISTANCE		721752	2					
ANR	722936	Identifier	ONIG_INFINITE_DISTANCE		721752	0					
ANR	722937	BreakStatement	break ;	4738:1:106659:106664	721752	1	True				
ANR	722938	ExpressionStatement	backs = BACKREFS_P ( br )	4740:6:106680:106702	721752	6	True				
ANR	722939	AssignmentExpression	backs = BACKREFS_P ( br )		721752	0		=			
ANR	722940	Identifier	backs		721752	0					
ANR	722941	CallExpression	BACKREFS_P ( br )		721752	1					
ANR	722942	Callee	BACKREFS_P		721752	0					
ANR	722943	Identifier	BACKREFS_P		721752	0					
ANR	722944	ArgumentList	br		721752	1					
ANR	722945	Argument	br		721752	0					
ANR	722946	Identifier	br		721752	0					
ANR	722947	ExpressionStatement	"r = get_min_match_length ( nodes [ backs [ 0 ] ] , & min , env -> scan_env )"	4741:6:106710:106772	721752	7	True				
ANR	722948	AssignmentExpression	"r = get_min_match_length ( nodes [ backs [ 0 ] ] , & min , env -> scan_env )"		721752	0		=			
ANR	722949	Identifier	r		721752	0					
ANR	722950	CallExpression	"get_min_match_length ( nodes [ backs [ 0 ] ] , & min , env -> scan_env )"		721752	1					
ANR	722951	Callee	get_min_match_length		721752	0					
ANR	722952	Identifier	get_min_match_length		721752	0					
ANR	722953	ArgumentList	nodes [ backs [ 0 ] ]		721752	1					
ANR	722954	Argument	nodes [ backs [ 0 ] ]		721752	0					
ANR	722955	ArrayIndexing	nodes [ backs [ 0 ] ]		721752	0					
ANR	722956	Identifier	nodes		721752	0					
ANR	722957	ArrayIndexing	backs [ 0 ]		721752	1					
ANR	722958	Identifier	backs		721752	0					
ANR	722959	PrimaryExpression	0		721752	1					
ANR	722960	Argument	& min		721752	1					
ANR	722961	UnaryOperationExpression	& min		721752	0					
ANR	722962	UnaryOperator	&		721752	0					
ANR	722963	Identifier	min		721752	1					
ANR	722964	Argument	env -> scan_env		721752	2					
ANR	722965	PtrMemberAccess	env -> scan_env		721752	0					
ANR	722966	Identifier	env		721752	0					
ANR	722967	Identifier	scan_env		721752	1					
ANR	722968	IfStatement	if ( r != 0 )		721752	8					
ANR	722969	Condition	r != 0	4742:10:106784:106789	721752	0	True				
ANR	722970	EqualityExpression	r != 0		721752	0		!=			
ANR	722971	Identifier	r		721752	0					
ANR	722972	PrimaryExpression	0		721752	1					
ANR	722973	BreakStatement	break ;	4742:18:106792:106797	721752	1	True				
ANR	722974	ExpressionStatement	"r = get_max_match_length ( nodes [ backs [ 0 ] ] , & max , env -> scan_env )"	4743:6:106805:106867	721752	9	True				
ANR	722975	AssignmentExpression	"r = get_max_match_length ( nodes [ backs [ 0 ] ] , & max , env -> scan_env )"		721752	0		=			
ANR	722976	Identifier	r		721752	0					
ANR	722977	CallExpression	"get_max_match_length ( nodes [ backs [ 0 ] ] , & max , env -> scan_env )"		721752	1					
ANR	722978	Callee	get_max_match_length		721752	0					
ANR	722979	Identifier	get_max_match_length		721752	0					
ANR	722980	ArgumentList	nodes [ backs [ 0 ] ]		721752	1					
ANR	722981	Argument	nodes [ backs [ 0 ] ]		721752	0					
ANR	722982	ArrayIndexing	nodes [ backs [ 0 ] ]		721752	0					
ANR	722983	Identifier	nodes		721752	0					
ANR	722984	ArrayIndexing	backs [ 0 ]		721752	1					
ANR	722985	Identifier	backs		721752	0					
ANR	722986	PrimaryExpression	0		721752	1					
ANR	722987	Argument	& max		721752	1					
ANR	722988	UnaryOperationExpression	& max		721752	0					
ANR	722989	UnaryOperator	&		721752	0					
ANR	722990	Identifier	max		721752	1					
ANR	722991	Argument	env -> scan_env		721752	2					
ANR	722992	PtrMemberAccess	env -> scan_env		721752	0					
ANR	722993	Identifier	env		721752	0					
ANR	722994	Identifier	scan_env		721752	1					
ANR	722995	IfStatement	if ( r != 0 )		721752	10					
ANR	722996	Condition	r != 0	4744:10:106879:106884	721752	0	True				
ANR	722997	EqualityExpression	r != 0		721752	0		!=			
ANR	722998	Identifier	r		721752	0					
ANR	722999	PrimaryExpression	0		721752	1					
ANR	723000	BreakStatement	break ;	4744:18:106887:106892	721752	1	True				
ANR	723001	ForStatement	for ( i = 1 ; i < br -> back_num ; i ++ )		721752	11					
ANR	723002	ForInit	i = 1 ;	4745:11:106905:106910	721752	0	True				
ANR	723003	AssignmentExpression	i = 1		721752	0		=			
ANR	723004	Identifier	i		721752	0					
ANR	723005	PrimaryExpression	1		721752	1					
ANR	723006	Condition	i < br -> back_num	4745:18:106912:106927	721752	1	True				
ANR	723007	RelationalExpression	i < br -> back_num		721752	0		<			
ANR	723008	Identifier	i		721752	0					
ANR	723009	PtrMemberAccess	br -> back_num		721752	1					
ANR	723010	Identifier	br		721752	0					
ANR	723011	Identifier	back_num		721752	1					
ANR	723012	PostIncDecOperationExpression	i ++	4745:36:106930:106932	721752	2	True				
ANR	723013	Identifier	i		721752	0					
ANR	723014	IncDec	++		721752	1					
ANR	723015	CompoundStatement		207:41:4811:4811	721752	3					
ANR	723016	ExpressionStatement	"r = get_min_match_length ( nodes [ backs [ i ] ] , & tmin , env -> scan_env )"	4746:1:106938:107001	721752	0	True				
ANR	723017	AssignmentExpression	"r = get_min_match_length ( nodes [ backs [ i ] ] , & tmin , env -> scan_env )"		721752	0		=			
ANR	723018	Identifier	r		721752	0					
ANR	723019	CallExpression	"get_min_match_length ( nodes [ backs [ i ] ] , & tmin , env -> scan_env )"		721752	1					
ANR	723020	Callee	get_min_match_length		721752	0					
ANR	723021	Identifier	get_min_match_length		721752	0					
ANR	723022	ArgumentList	nodes [ backs [ i ] ]		721752	1					
ANR	723023	Argument	nodes [ backs [ i ] ]		721752	0					
ANR	723024	ArrayIndexing	nodes [ backs [ i ] ]		721752	0					
ANR	723025	Identifier	nodes		721752	0					
ANR	723026	ArrayIndexing	backs [ i ]		721752	1					
ANR	723027	Identifier	backs		721752	0					
ANR	723028	Identifier	i		721752	1					
ANR	723029	Argument	& tmin		721752	1					
ANR	723030	UnaryOperationExpression	& tmin		721752	0					
ANR	723031	UnaryOperator	&		721752	0					
ANR	723032	Identifier	tmin		721752	1					
ANR	723033	Argument	env -> scan_env		721752	2					
ANR	723034	PtrMemberAccess	env -> scan_env		721752	0					
ANR	723035	Identifier	env		721752	0					
ANR	723036	Identifier	scan_env		721752	1					
ANR	723037	IfStatement	if ( r != 0 )		721752	1					
ANR	723038	Condition	r != 0	4747:5:107008:107013	721752	0	True				
ANR	723039	EqualityExpression	r != 0		721752	0		!=			
ANR	723040	Identifier	r		721752	0					
ANR	723041	PrimaryExpression	0		721752	1					
ANR	723042	BreakStatement	break ;	4747:13:107016:107021	721752	1	True				
ANR	723043	ExpressionStatement	"r = get_max_match_length ( nodes [ backs [ i ] ] , & tmax , env -> scan_env )"	4748:1:107024:107087	721752	2	True				
ANR	723044	AssignmentExpression	"r = get_max_match_length ( nodes [ backs [ i ] ] , & tmax , env -> scan_env )"		721752	0		=			
ANR	723045	Identifier	r		721752	0					
ANR	723046	CallExpression	"get_max_match_length ( nodes [ backs [ i ] ] , & tmax , env -> scan_env )"		721752	1					
ANR	723047	Callee	get_max_match_length		721752	0					
ANR	723048	Identifier	get_max_match_length		721752	0					
ANR	723049	ArgumentList	nodes [ backs [ i ] ]		721752	1					
ANR	723050	Argument	nodes [ backs [ i ] ]		721752	0					
ANR	723051	ArrayIndexing	nodes [ backs [ i ] ]		721752	0					
ANR	723052	Identifier	nodes		721752	0					
ANR	723053	ArrayIndexing	backs [ i ]		721752	1					
ANR	723054	Identifier	backs		721752	0					
ANR	723055	Identifier	i		721752	1					
ANR	723056	Argument	& tmax		721752	1					
ANR	723057	UnaryOperationExpression	& tmax		721752	0					
ANR	723058	UnaryOperator	&		721752	0					
ANR	723059	Identifier	tmax		721752	1					
ANR	723060	Argument	env -> scan_env		721752	2					
ANR	723061	PtrMemberAccess	env -> scan_env		721752	0					
ANR	723062	Identifier	env		721752	0					
ANR	723063	Identifier	scan_env		721752	1					
ANR	723064	IfStatement	if ( r != 0 )		721752	3					
ANR	723065	Condition	r != 0	4749:5:107094:107099	721752	0	True				
ANR	723066	EqualityExpression	r != 0		721752	0		!=			
ANR	723067	Identifier	r		721752	0					
ANR	723068	PrimaryExpression	0		721752	1					
ANR	723069	BreakStatement	break ;	4749:13:107102:107107	721752	1	True				
ANR	723070	IfStatement	if ( min > tmin )		721752	4					
ANR	723071	Condition	min > tmin	4750:5:107114:107123	721752	0	True				
ANR	723072	RelationalExpression	min > tmin		721752	0		>			
ANR	723073	Identifier	min		721752	0					
ANR	723074	Identifier	tmin		721752	1					
ANR	723075	ExpressionStatement	min = tmin	4750:17:107126:107136	721752	1	True				
ANR	723076	AssignmentExpression	min = tmin		721752	0		=			
ANR	723077	Identifier	min		721752	0					
ANR	723078	Identifier	tmin		721752	1					
ANR	723079	IfStatement	if ( max < tmax )		721752	5					
ANR	723080	Condition	max < tmax	4751:5:107143:107152	721752	0	True				
ANR	723081	RelationalExpression	max < tmax		721752	0		<			
ANR	723082	Identifier	max		721752	0					
ANR	723083	Identifier	tmax		721752	1					
ANR	723084	ExpressionStatement	max = tmax	4751:17:107155:107165	721752	1	True				
ANR	723085	AssignmentExpression	max = tmax		721752	0		=			
ANR	723086	Identifier	max		721752	0					
ANR	723087	Identifier	tmax		721752	1					
ANR	723088	IfStatement	if ( r == 0 )		721752	12					
ANR	723089	Condition	r == 0	4753:10:107185:107190	721752	0	True				
ANR	723090	EqualityExpression	r == 0		721752	0		==			
ANR	723091	Identifier	r		721752	0					
ANR	723092	PrimaryExpression	0		721752	1					
ANR	723093	ExpressionStatement	"set_mml ( & opt -> len , min , max )"	4753:18:107193:107221	721752	1	True				
ANR	723094	CallExpression	"set_mml ( & opt -> len , min , max )"		721752	0					
ANR	723095	Callee	set_mml		721752	0					
ANR	723096	Identifier	set_mml		721752	0					
ANR	723097	ArgumentList	& opt -> len		721752	1					
ANR	723098	Argument	& opt -> len		721752	0					
ANR	723099	UnaryOperationExpression	& opt -> len		721752	0					
ANR	723100	UnaryOperator	&		721752	0					
ANR	723101	PtrMemberAccess	opt -> len		721752	1					
ANR	723102	Identifier	opt		721752	0					
ANR	723103	Identifier	len		721752	1					
ANR	723104	Argument	min		721752	1					
ANR	723105	Identifier	min		721752	0					
ANR	723106	Argument	max		721752	2					
ANR	723107	Identifier	max		721752	0					
ANR	723108	BreakStatement	break ;	4755:4:107233:107238	721752	23	True				
ANR	723109	Label	case NT_CALL :	4758:2:107266:107278	721752	24	True				
ANR	723110	Identifier	NT_CALL		721752	0					
ANR	723111	IfStatement	if ( IS_CALL_RECURSION ( NCALL ( node ) ) )		721752	25					
ANR	723112	Condition	IS_CALL_RECURSION ( NCALL ( node ) )	4759:8:107288:107317	721752	0	True				
ANR	723113	CallExpression	IS_CALL_RECURSION ( NCALL ( node ) )		721752	0					
ANR	723114	Callee	IS_CALL_RECURSION		721752	0					
ANR	723115	Identifier	IS_CALL_RECURSION		721752	0					
ANR	723116	ArgumentList	NCALL ( node )		721752	1					
ANR	723117	Argument	NCALL ( node )		721752	0					
ANR	723118	CallExpression	NCALL ( node )		721752	0					
ANR	723119	Callee	NCALL		721752	0					
ANR	723120	Identifier	NCALL		721752	0					
ANR	723121	ArgumentList	node		721752	1					
ANR	723122	Argument	node		721752	0					
ANR	723123	Identifier	node		721752	0					
ANR	723124	ExpressionStatement	"set_mml ( & opt -> len , 0 , ONIG_INFINITE_DISTANCE )"	4760:6:107326:107371	721752	1	True				
ANR	723125	CallExpression	"set_mml ( & opt -> len , 0 , ONIG_INFINITE_DISTANCE )"		721752	0					
ANR	723126	Callee	set_mml		721752	0					
ANR	723127	Identifier	set_mml		721752	0					
ANR	723128	ArgumentList	& opt -> len		721752	1					
ANR	723129	Argument	& opt -> len		721752	0					
ANR	723130	UnaryOperationExpression	& opt -> len		721752	0					
ANR	723131	UnaryOperator	&		721752	0					
ANR	723132	PtrMemberAccess	opt -> len		721752	1					
ANR	723133	Identifier	opt		721752	0					
ANR	723134	Identifier	len		721752	1					
ANR	723135	Argument	0		721752	1					
ANR	723136	PrimaryExpression	0		721752	0					
ANR	723137	Argument	ONIG_INFINITE_DISTANCE		721752	2					
ANR	723138	Identifier	ONIG_INFINITE_DISTANCE		721752	0					
ANR	723139	ElseStatement	else		721752	0					
ANR	723140	CompoundStatement		224:6:5266:5300	721752	0					
ANR	723141	IdentifierDeclStatement	OnigOptionType save = env -> options ;	4762:6:107390:107424	721752	0	True				
ANR	723142	IdentifierDecl	save = env -> options		721752	0					
ANR	723143	IdentifierDeclType	OnigOptionType		721752	0					
ANR	723144	Identifier	save		721752	1					
ANR	723145	AssignmentExpression	save = env -> options		721752	2		=			
ANR	723146	Identifier	save		721752	0					
ANR	723147	PtrMemberAccess	env -> options		721752	1					
ANR	723148	Identifier	env		721752	0					
ANR	723149	Identifier	options		721752	1					
ANR	723150	ExpressionStatement	env -> options = NENCLOSE ( NCALL ( node ) -> target ) -> option	4763:6:107432:107484	721752	1	True				
ANR	723151	AssignmentExpression	env -> options = NENCLOSE ( NCALL ( node ) -> target ) -> option		721752	0		=			
ANR	723152	PtrMemberAccess	env -> options		721752	0					
ANR	723153	Identifier	env		721752	0					
ANR	723154	Identifier	options		721752	1					
ANR	723155	PtrMemberAccess	NENCLOSE ( NCALL ( node ) -> target ) -> option		721752	1					
ANR	723156	CallExpression	NENCLOSE ( NCALL ( node ) -> target )		721752	0					
ANR	723157	Callee	NENCLOSE		721752	0					
ANR	723158	Identifier	NENCLOSE		721752	0					
ANR	723159	ArgumentList	NCALL ( node ) -> target		721752	1					
ANR	723160	Argument	NCALL ( node ) -> target		721752	0					
ANR	723161	PtrMemberAccess	NCALL ( node ) -> target		721752	0					
ANR	723162	CallExpression	NCALL ( node )		721752	0					
ANR	723163	Callee	NCALL		721752	0					
ANR	723164	Identifier	NCALL		721752	0					
ANR	723165	ArgumentList	node		721752	1					
ANR	723166	Argument	node		721752	0					
ANR	723167	Identifier	node		721752	0					
ANR	723168	Identifier	target		721752	1					
ANR	723169	Identifier	option		721752	1					
ANR	723170	ExpressionStatement	"r = optimize_node_left ( NCALL ( node ) -> target , opt , env )"	4764:6:107492:107545	721752	2	True				
ANR	723171	AssignmentExpression	"r = optimize_node_left ( NCALL ( node ) -> target , opt , env )"		721752	0		=			
ANR	723172	Identifier	r		721752	0					
ANR	723173	CallExpression	"optimize_node_left ( NCALL ( node ) -> target , opt , env )"		721752	1					
ANR	723174	Callee	optimize_node_left		721752	0					
ANR	723175	Identifier	optimize_node_left		721752	0					
ANR	723176	ArgumentList	NCALL ( node ) -> target		721752	1					
ANR	723177	Argument	NCALL ( node ) -> target		721752	0					
ANR	723178	PtrMemberAccess	NCALL ( node ) -> target		721752	0					
ANR	723179	CallExpression	NCALL ( node )		721752	0					
ANR	723180	Callee	NCALL		721752	0					
ANR	723181	Identifier	NCALL		721752	0					
ANR	723182	ArgumentList	node		721752	1					
ANR	723183	Argument	node		721752	0					
ANR	723184	Identifier	node		721752	0					
ANR	723185	Identifier	target		721752	1					
ANR	723186	Argument	opt		721752	1					
ANR	723187	Identifier	opt		721752	0					
ANR	723188	Argument	env		721752	2					
ANR	723189	Identifier	env		721752	0					
ANR	723190	ExpressionStatement	env -> options = save	4765:6:107553:107572	721752	3	True				
ANR	723191	AssignmentExpression	env -> options = save		721752	0		=			
ANR	723192	PtrMemberAccess	env -> options		721752	0					
ANR	723193	Identifier	env		721752	0					
ANR	723194	Identifier	options		721752	1					
ANR	723195	Identifier	save		721752	1					
ANR	723196	BreakStatement	break ;	4767:4:107584:107589	721752	26	True				
ANR	723197	Label	case NT_QTFR :	4770:2:107601:107613	721752	27	True				
ANR	723198	Identifier	NT_QTFR		721752	0					
ANR	723199	CompoundStatement		237:6:5569:5595	721752	28					
ANR	723200	IdentifierDeclStatement	int i ;	4772:6:107627:107632	721752	0	True				
ANR	723201	IdentifierDecl	i		721752	0					
ANR	723202	IdentifierDeclType	int		721752	0					
ANR	723203	Identifier	i		721752	1					
ANR	723204	IdentifierDeclStatement	"OnigDistance min , max ;"	4773:6:107640:107661	721752	1	True				
ANR	723205	IdentifierDecl	min		721752	0					
ANR	723206	IdentifierDeclType	OnigDistance		721752	0					
ANR	723207	Identifier	min		721752	1					
ANR	723208	IdentifierDecl	max		721752	1					
ANR	723209	IdentifierDeclType	OnigDistance		721752	0					
ANR	723210	Identifier	max		721752	1					
ANR	723211	IdentifierDeclStatement	NodeOptInfo nopt ;	4774:6:107669:107685	721752	2	True				
ANR	723212	IdentifierDecl	nopt		721752	0					
ANR	723213	IdentifierDeclType	NodeOptInfo		721752	0					
ANR	723214	Identifier	nopt		721752	1					
ANR	723215	IdentifierDeclStatement	QtfrNode * qn = NQTFR ( node ) ;	4775:6:107693:107719	721752	3	True				
ANR	723216	IdentifierDecl	* qn = NQTFR ( node )		721752	0					
ANR	723217	IdentifierDeclType	QtfrNode *		721752	0					
ANR	723218	Identifier	qn		721752	1					
ANR	723219	AssignmentExpression	* qn = NQTFR ( node )		721752	2		=			
ANR	723220	Identifier	qn		721752	0					
ANR	723221	CallExpression	NQTFR ( node )		721752	1					
ANR	723222	Callee	NQTFR		721752	0					
ANR	723223	Identifier	NQTFR		721752	0					
ANR	723224	ArgumentList	node		721752	1					
ANR	723225	Argument	node		721752	0					
ANR	723226	Identifier	node		721752	0					
ANR	723227	ExpressionStatement	"r = optimize_node_left ( qn -> target , & nopt , env )"	4777:6:107728:107774	721752	4	True				
ANR	723228	AssignmentExpression	"r = optimize_node_left ( qn -> target , & nopt , env )"		721752	0		=			
ANR	723229	Identifier	r		721752	0					
ANR	723230	CallExpression	"optimize_node_left ( qn -> target , & nopt , env )"		721752	1					
ANR	723231	Callee	optimize_node_left		721752	0					
ANR	723232	Identifier	optimize_node_left		721752	0					
ANR	723233	ArgumentList	qn -> target		721752	1					
ANR	723234	Argument	qn -> target		721752	0					
ANR	723235	PtrMemberAccess	qn -> target		721752	0					
ANR	723236	Identifier	qn		721752	0					
ANR	723237	Identifier	target		721752	1					
ANR	723238	Argument	& nopt		721752	1					
ANR	723239	UnaryOperationExpression	& nopt		721752	0					
ANR	723240	UnaryOperator	&		721752	0					
ANR	723241	Identifier	nopt		721752	1					
ANR	723242	Argument	env		721752	2					
ANR	723243	Identifier	env		721752	0					
ANR	723244	IfStatement	if ( r )		721752	5					
ANR	723245	Condition	r	4778:10:107786:107786	721752	0	True				
ANR	723246	Identifier	r		721752	0					
ANR	723247	BreakStatement	break ;	4778:13:107789:107794	721752	1	True				
ANR	723248	IfStatement	if ( qn -> lower == 0 && IS_REPEAT_INFINITE ( qn -> upper ) )		721752	6					
ANR	723249	Condition	qn -> lower == 0 && IS_REPEAT_INFINITE ( qn -> upper )	4780:10:107807:107853	721752	0	True				
ANR	723250	AndExpression	qn -> lower == 0 && IS_REPEAT_INFINITE ( qn -> upper )		721752	0		&&			
ANR	723251	EqualityExpression	qn -> lower == 0		721752	0		==			
ANR	723252	PtrMemberAccess	qn -> lower		721752	0					
ANR	723253	Identifier	qn		721752	0					
ANR	723254	Identifier	lower		721752	1					
ANR	723255	PrimaryExpression	0		721752	1					
ANR	723256	CallExpression	IS_REPEAT_INFINITE ( qn -> upper )		721752	1					
ANR	723257	Callee	IS_REPEAT_INFINITE		721752	0					
ANR	723258	Identifier	IS_REPEAT_INFINITE		721752	0					
ANR	723259	ArgumentList	qn -> upper		721752	1					
ANR	723260	Argument	qn -> upper		721752	0					
ANR	723261	PtrMemberAccess	qn -> upper		721752	0					
ANR	723262	Identifier	qn		721752	0					
ANR	723263	Identifier	upper		721752	1					
ANR	723264	CompoundStatement		242:59:5732:5732	721752	1					
ANR	723265	IfStatement	if ( env -> mmd . max == 0 && NTYPE ( qn -> target ) == NT_CANY && qn -> greedy )		721752	0					
ANR	723266	Condition	env -> mmd . max == 0 && NTYPE ( qn -> target ) == NT_CANY && qn -> greedy	4781:5:107863:107930	721752	0	True				
ANR	723267	AndExpression	env -> mmd . max == 0 && NTYPE ( qn -> target ) == NT_CANY && qn -> greedy		721752	0		&&			
ANR	723268	EqualityExpression	env -> mmd . max == 0		721752	0		==			
ANR	723269	MemberAccess	env -> mmd . max		721752	0					
ANR	723270	PtrMemberAccess	env -> mmd		721752	0					
ANR	723271	Identifier	env		721752	0					
ANR	723272	Identifier	mmd		721752	1					
ANR	723273	Identifier	max		721752	1					
ANR	723274	PrimaryExpression	0		721752	1					
ANR	723275	AndExpression	NTYPE ( qn -> target ) == NT_CANY && qn -> greedy		721752	1		&&			
ANR	723276	EqualityExpression	NTYPE ( qn -> target ) == NT_CANY		721752	0		==			
ANR	723277	CallExpression	NTYPE ( qn -> target )		721752	0					
ANR	723278	Callee	NTYPE		721752	0					
ANR	723279	Identifier	NTYPE		721752	0					
ANR	723280	ArgumentList	qn -> target		721752	1					
ANR	723281	Argument	qn -> target		721752	0					
ANR	723282	PtrMemberAccess	qn -> target		721752	0					
ANR	723283	Identifier	qn		721752	0					
ANR	723284	Identifier	target		721752	1					
ANR	723285	Identifier	NT_CANY		721752	1					
ANR	723286	PtrMemberAccess	qn -> greedy		721752	1					
ANR	723287	Identifier	qn		721752	0					
ANR	723288	Identifier	greedy		721752	1					
ANR	723289	CompoundStatement		244:49:5809:5809	721752	1					
ANR	723290	IfStatement	if ( IS_MULTILINE ( env -> options ) )		721752	0					
ANR	723291	Condition	IS_MULTILINE ( env -> options )	4783:7:107942:107967	721752	0	True				
ANR	723292	CallExpression	IS_MULTILINE ( env -> options )		721752	0					
ANR	723293	Callee	IS_MULTILINE		721752	0					
ANR	723294	Identifier	IS_MULTILINE		721752	0					
ANR	723295	ArgumentList	env -> options		721752	1					
ANR	723296	Argument	env -> options		721752	0					
ANR	723297	PtrMemberAccess	env -> options		721752	0					
ANR	723298	Identifier	env		721752	0					
ANR	723299	Identifier	options		721752	1					
ANR	723300	ExpressionStatement	"add_opt_anc_info ( & opt -> anc , ANCHOR_ANYCHAR_STAR_ML )"	4784:5:107975:108026	721752	1	True				
ANR	723301	CallExpression	"add_opt_anc_info ( & opt -> anc , ANCHOR_ANYCHAR_STAR_ML )"		721752	0					
ANR	723302	Callee	add_opt_anc_info		721752	0					
ANR	723303	Identifier	add_opt_anc_info		721752	0					
ANR	723304	ArgumentList	& opt -> anc		721752	1					
ANR	723305	Argument	& opt -> anc		721752	0					
ANR	723306	UnaryOperationExpression	& opt -> anc		721752	0					
ANR	723307	UnaryOperator	&		721752	0					
ANR	723308	PtrMemberAccess	opt -> anc		721752	1					
ANR	723309	Identifier	opt		721752	0					
ANR	723310	Identifier	anc		721752	1					
ANR	723311	Argument	ANCHOR_ANYCHAR_STAR_ML		721752	1					
ANR	723312	Identifier	ANCHOR_ANYCHAR_STAR_ML		721752	0					
ANR	723313	ElseStatement	else		721752	0					
ANR	723314	ExpressionStatement	"add_opt_anc_info ( & opt -> anc , ANCHOR_ANYCHAR_STAR )"	4786:5:108041:108089	721752	0	True				
ANR	723315	CallExpression	"add_opt_anc_info ( & opt -> anc , ANCHOR_ANYCHAR_STAR )"		721752	0					
ANR	723316	Callee	add_opt_anc_info		721752	0					
ANR	723317	Identifier	add_opt_anc_info		721752	0					
ANR	723318	ArgumentList	& opt -> anc		721752	1					
ANR	723319	Argument	& opt -> anc		721752	0					
ANR	723320	UnaryOperationExpression	& opt -> anc		721752	0					
ANR	723321	UnaryOperator	&		721752	0					
ANR	723322	PtrMemberAccess	opt -> anc		721752	1					
ANR	723323	Identifier	opt		721752	0					
ANR	723324	Identifier	anc		721752	1					
ANR	723325	Argument	ANCHOR_ANYCHAR_STAR		721752	1					
ANR	723326	Identifier	ANCHOR_ANYCHAR_STAR		721752	0					
ANR	723327	ElseStatement	else		721752	0					
ANR	723328	CompoundStatement		251:11:5989:5989	721752	0					
ANR	723329	IfStatement	if ( qn -> lower > 0 )		721752	0					
ANR	723330	Condition	qn -> lower > 0	4790:5:108120:108132	721752	0	True				
ANR	723331	RelationalExpression	qn -> lower > 0		721752	0		>			
ANR	723332	PtrMemberAccess	qn -> lower		721752	0					
ANR	723333	Identifier	qn		721752	0					
ANR	723334	Identifier	lower		721752	1					
ANR	723335	PrimaryExpression	0		721752	1					
ANR	723336	CompoundStatement		252:20:6011:6011	721752	1					
ANR	723337	ExpressionStatement	"copy_node_opt_info ( opt , & nopt )"	4791:3:108140:108170	721752	0	True				
ANR	723338	CallExpression	"copy_node_opt_info ( opt , & nopt )"		721752	0					
ANR	723339	Callee	copy_node_opt_info		721752	0					
ANR	723340	Identifier	copy_node_opt_info		721752	0					
ANR	723341	ArgumentList	opt		721752	1					
ANR	723342	Argument	opt		721752	0					
ANR	723343	Identifier	opt		721752	0					
ANR	723344	Argument	& nopt		721752	1					
ANR	723345	UnaryOperationExpression	& nopt		721752	0					
ANR	723346	UnaryOperator	&		721752	0					
ANR	723347	Identifier	nopt		721752	1					
ANR	723348	IfStatement	if ( nopt . exb . len > 0 )		721752	1					
ANR	723349	Condition	nopt . exb . len > 0	4792:7:108179:108194	721752	0	True				
ANR	723350	RelationalExpression	nopt . exb . len > 0		721752	0		>			
ANR	723351	MemberAccess	nopt . exb . len		721752	0					
ANR	723352	MemberAccess	nopt . exb		721752	0					
ANR	723353	Identifier	nopt		721752	0					
ANR	723354	Identifier	exb		721752	1					
ANR	723355	Identifier	len		721752	1					
ANR	723356	PrimaryExpression	0		721752	1					
ANR	723357	CompoundStatement		254:25:6073:6073	721752	1					
ANR	723358	IfStatement	if ( nopt . exb . reach_end )		721752	0					
ANR	723359	Condition	nopt . exb . reach_end	4793:9:108208:108225	721752	0	True				
ANR	723360	MemberAccess	nopt . exb . reach_end		721752	0					
ANR	723361	MemberAccess	nopt . exb		721752	0					
ANR	723362	Identifier	nopt		721752	0					
ANR	723363	Identifier	exb		721752	1					
ANR	723364	Identifier	reach_end		721752	1					
ANR	723365	CompoundStatement		255:29:6104:6104	721752	1					
ANR	723366	ForStatement	for ( i = 2 ; i <= qn -> lower && ! is_full_opt_exact_info ( & opt -> exb ) ; i ++ )		721752	0					
ANR	723367	ForInit	i = 2 ;	4794:12:108242:108247	721752	0	True				
ANR	723368	AssignmentExpression	i = 2		721752	0		=			
ANR	723369	Identifier	i		721752	0					
ANR	723370	PrimaryExpression	2		721752	1					
ANR	723371	Condition	i <= qn -> lower && ! is_full_opt_exact_info ( & opt -> exb )	4794:19:108249:108313	721752	1	True				
ANR	723372	AndExpression	i <= qn -> lower && ! is_full_opt_exact_info ( & opt -> exb )		721752	0		&&			
ANR	723373	RelationalExpression	i <= qn -> lower		721752	0		<=			
ANR	723374	Identifier	i		721752	0					
ANR	723375	PtrMemberAccess	qn -> lower		721752	1					
ANR	723376	Identifier	qn		721752	0					
ANR	723377	Identifier	lower		721752	1					
ANR	723378	UnaryOperationExpression	! is_full_opt_exact_info ( & opt -> exb )		721752	1					
ANR	723379	UnaryOperator	!		721752	0					
ANR	723380	CallExpression	is_full_opt_exact_info ( & opt -> exb )		721752	1					
ANR	723381	Callee	is_full_opt_exact_info		721752	0					
ANR	723382	Identifier	is_full_opt_exact_info		721752	0					
ANR	723383	ArgumentList	& opt -> exb		721752	1					
ANR	723384	Argument	& opt -> exb		721752	0					
ANR	723385	UnaryOperationExpression	& opt -> exb		721752	0					
ANR	723386	UnaryOperator	&		721752	0					
ANR	723387	PtrMemberAccess	opt -> exb		721752	1					
ANR	723388	Identifier	opt		721752	0					
ANR	723389	Identifier	exb		721752	1					
ANR	723390	PostIncDecOperationExpression	i ++	4795:49:108316:108318	721752	2	True				
ANR	723391	Identifier	i		721752	0					
ANR	723392	IncDec	++		721752	1					
ANR	723393	CompoundStatement		257:54:6197:6197	721752	3					
ANR	723394	ExpressionStatement	"concat_opt_exact_info ( & opt -> exb , & nopt . exb , env -> enc )"	4796:2:108325:108378	721752	0	True				
ANR	723395	CallExpression	"concat_opt_exact_info ( & opt -> exb , & nopt . exb , env -> enc )"		721752	0					
ANR	723396	Callee	concat_opt_exact_info		721752	0					
ANR	723397	Identifier	concat_opt_exact_info		721752	0					
ANR	723398	ArgumentList	& opt -> exb		721752	1					
ANR	723399	Argument	& opt -> exb		721752	0					
ANR	723400	UnaryOperationExpression	& opt -> exb		721752	0					
ANR	723401	UnaryOperator	&		721752	0					
ANR	723402	PtrMemberAccess	opt -> exb		721752	1					
ANR	723403	Identifier	opt		721752	0					
ANR	723404	Identifier	exb		721752	1					
ANR	723405	Argument	& nopt . exb		721752	1					
ANR	723406	UnaryOperationExpression	& nopt . exb		721752	0					
ANR	723407	UnaryOperator	&		721752	0					
ANR	723408	MemberAccess	nopt . exb		721752	1					
ANR	723409	Identifier	nopt		721752	0					
ANR	723410	Identifier	exb		721752	1					
ANR	723411	Argument	env -> enc		721752	2					
ANR	723412	PtrMemberAccess	env -> enc		721752	0					
ANR	723413	Identifier	env		721752	0					
ANR	723414	Identifier	enc		721752	1					
ANR	723415	IfStatement	if ( i < qn -> lower )		721752	1					
ANR	723416	Condition	i < qn -> lower	4798:11:108400:108412	721752	0	True				
ANR	723417	RelationalExpression	i < qn -> lower		721752	0		<			
ANR	723418	Identifier	i		721752	0					
ANR	723419	PtrMemberAccess	qn -> lower		721752	1					
ANR	723420	Identifier	qn		721752	0					
ANR	723421	Identifier	lower		721752	1					
ANR	723422	CompoundStatement		260:26:6291:6291	721752	1					
ANR	723423	ExpressionStatement	opt -> exb . reach_end = 0	4799:2:108419:108441	721752	0	True				
ANR	723424	AssignmentExpression	opt -> exb . reach_end = 0		721752	0		=			
ANR	723425	MemberAccess	opt -> exb . reach_end		721752	0					
ANR	723426	PtrMemberAccess	opt -> exb		721752	0					
ANR	723427	Identifier	opt		721752	0					
ANR	723428	Identifier	exb		721752	1					
ANR	723429	Identifier	reach_end		721752	1					
ANR	723430	PrimaryExpression	0		721752	1					
ANR	723431	IfStatement	if ( qn -> lower != qn -> upper )		721752	2					
ANR	723432	Condition	qn -> lower != qn -> upper	4804:7:108472:108493	721752	0	True				
ANR	723433	EqualityExpression	qn -> lower != qn -> upper		721752	0		!=			
ANR	723434	PtrMemberAccess	qn -> lower		721752	0					
ANR	723435	Identifier	qn		721752	0					
ANR	723436	Identifier	lower		721752	1					
ANR	723437	PtrMemberAccess	qn -> upper		721752	1					
ANR	723438	Identifier	qn		721752	0					
ANR	723439	Identifier	upper		721752	1					
ANR	723440	CompoundStatement		266:31:6372:6372	721752	1					
ANR	723441	ExpressionStatement	opt -> exb . reach_end = 0	4805:5:108503:108525	721752	0	True				
ANR	723442	AssignmentExpression	opt -> exb . reach_end = 0		721752	0		=			
ANR	723443	MemberAccess	opt -> exb . reach_end		721752	0					
ANR	723444	PtrMemberAccess	opt -> exb		721752	0					
ANR	723445	Identifier	opt		721752	0					
ANR	723446	Identifier	exb		721752	1					
ANR	723447	Identifier	reach_end		721752	1					
ANR	723448	PrimaryExpression	0		721752	1					
ANR	723449	ExpressionStatement	opt -> exm . reach_end = 0	4806:5:108532:108554	721752	1	True				
ANR	723450	AssignmentExpression	opt -> exm . reach_end = 0		721752	0		=			
ANR	723451	MemberAccess	opt -> exm . reach_end		721752	0					
ANR	723452	PtrMemberAccess	opt -> exm		721752	0					
ANR	723453	Identifier	opt		721752	0					
ANR	723454	Identifier	exm		721752	1					
ANR	723455	Identifier	reach_end		721752	1					
ANR	723456	PrimaryExpression	0		721752	1					
ANR	723457	IfStatement	if ( qn -> lower > 1 )		721752	3					
ANR	723458	Condition	qn -> lower > 1	4808:7:108568:108580	721752	0	True				
ANR	723459	RelationalExpression	qn -> lower > 1		721752	0		>			
ANR	723460	PtrMemberAccess	qn -> lower		721752	0					
ANR	723461	Identifier	qn		721752	0					
ANR	723462	Identifier	lower		721752	1					
ANR	723463	PrimaryExpression	1		721752	1					
ANR	723464	ExpressionStatement	opt -> exm . reach_end = 0	4809:5:108588:108610	721752	1	True				
ANR	723465	AssignmentExpression	opt -> exm . reach_end = 0		721752	0		=			
ANR	723466	MemberAccess	opt -> exm . reach_end		721752	0					
ANR	723467	PtrMemberAccess	opt -> exm		721752	0					
ANR	723468	Identifier	opt		721752	0					
ANR	723469	Identifier	exm		721752	1					
ANR	723470	Identifier	reach_end		721752	1					
ANR	723471	PrimaryExpression	0		721752	1					
ANR	723472	ExpressionStatement	"min = distance_multiply ( nopt . len . min , qn -> lower )"	4813:6:108630:108678	721752	7	True				
ANR	723473	AssignmentExpression	"min = distance_multiply ( nopt . len . min , qn -> lower )"		721752	0		=			
ANR	723474	Identifier	min		721752	0					
ANR	723475	CallExpression	"distance_multiply ( nopt . len . min , qn -> lower )"		721752	1					
ANR	723476	Callee	distance_multiply		721752	0					
ANR	723477	Identifier	distance_multiply		721752	0					
ANR	723478	ArgumentList	nopt . len . min		721752	1					
ANR	723479	Argument	nopt . len . min		721752	0					
ANR	723480	MemberAccess	nopt . len . min		721752	0					
ANR	723481	MemberAccess	nopt . len		721752	0					
ANR	723482	Identifier	nopt		721752	0					
ANR	723483	Identifier	len		721752	1					
ANR	723484	Identifier	min		721752	1					
ANR	723485	Argument	qn -> lower		721752	1					
ANR	723486	PtrMemberAccess	qn -> lower		721752	0					
ANR	723487	Identifier	qn		721752	0					
ANR	723488	Identifier	lower		721752	1					
ANR	723489	IfStatement	if ( IS_REPEAT_INFINITE ( qn -> upper ) )		721752	8					
ANR	723490	Condition	IS_REPEAT_INFINITE ( qn -> upper )	4814:10:108690:108718	721752	0	True				
ANR	723491	CallExpression	IS_REPEAT_INFINITE ( qn -> upper )		721752	0					
ANR	723492	Callee	IS_REPEAT_INFINITE		721752	0					
ANR	723493	Identifier	IS_REPEAT_INFINITE		721752	0					
ANR	723494	ArgumentList	qn -> upper		721752	1					
ANR	723495	Argument	qn -> upper		721752	0					
ANR	723496	PtrMemberAccess	qn -> upper		721752	0					
ANR	723497	Identifier	qn		721752	0					
ANR	723498	Identifier	upper		721752	1					
ANR	723499	ExpressionStatement	max = ( nopt . len . max > 0 ? ONIG_INFINITE_DISTANCE : 0 )	4815:1:108722:108775	721752	1	True				
ANR	723500	AssignmentExpression	max = ( nopt . len . max > 0 ? ONIG_INFINITE_DISTANCE : 0 )		721752	0		=			
ANR	723501	Identifier	max		721752	0					
ANR	723502	ConditionalExpression	nopt . len . max > 0 ? ONIG_INFINITE_DISTANCE : 0		721752	1					
ANR	723503	Condition	nopt . len . max > 0		721752	0					
ANR	723504	RelationalExpression	nopt . len . max > 0		721752	0		>			
ANR	723505	MemberAccess	nopt . len . max		721752	0					
ANR	723506	MemberAccess	nopt . len		721752	0					
ANR	723507	Identifier	nopt		721752	0					
ANR	723508	Identifier	len		721752	1					
ANR	723509	Identifier	max		721752	1					
ANR	723510	PrimaryExpression	0		721752	1					
ANR	723511	Identifier	ONIG_INFINITE_DISTANCE		721752	1					
ANR	723512	PrimaryExpression	0		721752	2					
ANR	723513	ElseStatement	else		721752	0					
ANR	723514	ExpressionStatement	"max = distance_multiply ( nopt . len . max , qn -> upper )"	4817:1:108789:108837	721752	0	True				
ANR	723515	AssignmentExpression	"max = distance_multiply ( nopt . len . max , qn -> upper )"		721752	0		=			
ANR	723516	Identifier	max		721752	0					
ANR	723517	CallExpression	"distance_multiply ( nopt . len . max , qn -> upper )"		721752	1					
ANR	723518	Callee	distance_multiply		721752	0					
ANR	723519	Identifier	distance_multiply		721752	0					
ANR	723520	ArgumentList	nopt . len . max		721752	1					
ANR	723521	Argument	nopt . len . max		721752	0					
ANR	723522	MemberAccess	nopt . len . max		721752	0					
ANR	723523	MemberAccess	nopt . len		721752	0					
ANR	723524	Identifier	nopt		721752	0					
ANR	723525	Identifier	len		721752	1					
ANR	723526	Identifier	max		721752	1					
ANR	723527	Argument	qn -> upper		721752	1					
ANR	723528	PtrMemberAccess	qn -> upper		721752	0					
ANR	723529	Identifier	qn		721752	0					
ANR	723530	Identifier	upper		721752	1					
ANR	723531	ExpressionStatement	"set_mml ( & opt -> len , min , max )"	4819:6:108846:108874	721752	9	True				
ANR	723532	CallExpression	"set_mml ( & opt -> len , min , max )"		721752	0					
ANR	723533	Callee	set_mml		721752	0					
ANR	723534	Identifier	set_mml		721752	0					
ANR	723535	ArgumentList	& opt -> len		721752	1					
ANR	723536	Argument	& opt -> len		721752	0					
ANR	723537	UnaryOperationExpression	& opt -> len		721752	0					
ANR	723538	UnaryOperator	&		721752	0					
ANR	723539	PtrMemberAccess	opt -> len		721752	1					
ANR	723540	Identifier	opt		721752	0					
ANR	723541	Identifier	len		721752	1					
ANR	723542	Argument	min		721752	1					
ANR	723543	Identifier	min		721752	0					
ANR	723544	Argument	max		721752	2					
ANR	723545	Identifier	max		721752	0					
ANR	723546	BreakStatement	break ;	4821:4:108886:108891	721752	29	True				
ANR	723547	Label	case NT_ENCLOSE :	4823:2:108896:108911	721752	30	True				
ANR	723548	Identifier	NT_ENCLOSE		721752	0					
ANR	723549	CompoundStatement		287:6:6801:6833	721752	31					
ANR	723550	IdentifierDeclStatement	EncloseNode * en = NENCLOSE ( node ) ;	4825:6:108925:108957	721752	0	True				
ANR	723551	IdentifierDecl	* en = NENCLOSE ( node )		721752	0					
ANR	723552	IdentifierDeclType	EncloseNode *		721752	0					
ANR	723553	Identifier	en		721752	1					
ANR	723554	AssignmentExpression	* en = NENCLOSE ( node )		721752	2		=			
ANR	723555	Identifier	en		721752	0					
ANR	723556	CallExpression	NENCLOSE ( node )		721752	1					
ANR	723557	Callee	NENCLOSE		721752	0					
ANR	723558	Identifier	NENCLOSE		721752	0					
ANR	723559	ArgumentList	node		721752	1					
ANR	723560	Argument	node		721752	0					
ANR	723561	Identifier	node		721752	0					
ANR	723562	SwitchStatement	switch ( en -> type )		721752	1					
ANR	723563	Condition	en -> type	4827:14:108974:108981	721752	0	True				
ANR	723564	PtrMemberAccess	en -> type		721752	0					
ANR	723565	Identifier	en		721752	0					
ANR	723566	Identifier	type		721752	1					
ANR	723567	CompoundStatement		289:24:6860:6860	721752	1					
ANR	723568	Label	case ENCLOSE_OPTION :	4828:6:108992:109011	721752	0	True				
ANR	723569	Identifier	ENCLOSE_OPTION		721752	0					
ANR	723570	CompoundStatement		292:3:6895:6929	721752	1					
ANR	723571	IdentifierDeclStatement	OnigOptionType save = env -> options ;	4830:3:109019:109053	721752	0	True				
ANR	723572	IdentifierDecl	save = env -> options		721752	0					
ANR	723573	IdentifierDeclType	OnigOptionType		721752	0					
ANR	723574	Identifier	save		721752	1					
ANR	723575	AssignmentExpression	save = env -> options		721752	2		=			
ANR	723576	Identifier	save		721752	0					
ANR	723577	PtrMemberAccess	env -> options		721752	1					
ANR	723578	Identifier	env		721752	0					
ANR	723579	Identifier	options		721752	1					
ANR	723580	ExpressionStatement	env -> options = en -> option	4832:3:109059:109084	721752	1	True				
ANR	723581	AssignmentExpression	env -> options = en -> option		721752	0		=			
ANR	723582	PtrMemberAccess	env -> options		721752	0					
ANR	723583	Identifier	env		721752	0					
ANR	723584	Identifier	options		721752	1					
ANR	723585	PtrMemberAccess	en -> option		721752	1					
ANR	723586	Identifier	en		721752	0					
ANR	723587	Identifier	option		721752	1					
ANR	723588	ExpressionStatement	"r = optimize_node_left ( en -> target , opt , env )"	4833:3:109089:109133	721752	2	True				
ANR	723589	AssignmentExpression	"r = optimize_node_left ( en -> target , opt , env )"		721752	0		=			
ANR	723590	Identifier	r		721752	0					
ANR	723591	CallExpression	"optimize_node_left ( en -> target , opt , env )"		721752	1					
ANR	723592	Callee	optimize_node_left		721752	0					
ANR	723593	Identifier	optimize_node_left		721752	0					
ANR	723594	ArgumentList	en -> target		721752	1					
ANR	723595	Argument	en -> target		721752	0					
ANR	723596	PtrMemberAccess	en -> target		721752	0					
ANR	723597	Identifier	en		721752	0					
ANR	723598	Identifier	target		721752	1					
ANR	723599	Argument	opt		721752	1					
ANR	723600	Identifier	opt		721752	0					
ANR	723601	Argument	env		721752	2					
ANR	723602	Identifier	env		721752	0					
ANR	723603	ExpressionStatement	env -> options = save	4834:3:109138:109157	721752	3	True				
ANR	723604	AssignmentExpression	env -> options = save		721752	0		=			
ANR	723605	PtrMemberAccess	env -> options		721752	0					
ANR	723606	Identifier	env		721752	0					
ANR	723607	Identifier	options		721752	1					
ANR	723608	Identifier	save		721752	1					
ANR	723609	BreakStatement	break ;	4836:1:109163:109168	721752	2	True				
ANR	723610	Label	case ENCLOSE_MEMORY :	4838:6:109177:109196	721752	3	True				
ANR	723611	Identifier	ENCLOSE_MEMORY		721752	0					
ANR	723612	ExpressionStatement	en -> opt_count ++	4840:1:109222:109237	721752	4	True				
ANR	723613	PostIncDecOperationExpression	en -> opt_count ++		721752	0					
ANR	723614	PtrMemberAccess	en -> opt_count		721752	0					
ANR	723615	Identifier	en		721752	0					
ANR	723616	Identifier	opt_count		721752	1					
ANR	723617	IncDec	++		721752	1					
ANR	723618	IfStatement	if ( en -> opt_count > MAX_NODE_OPT_INFO_REF_COUNT )		721752	5					
ANR	723619	Condition	en -> opt_count > MAX_NODE_OPT_INFO_REF_COUNT	4841:5:109244:109286	721752	0	True				
ANR	723620	RelationalExpression	en -> opt_count > MAX_NODE_OPT_INFO_REF_COUNT		721752	0		>			
ANR	723621	PtrMemberAccess	en -> opt_count		721752	0					
ANR	723622	Identifier	en		721752	0					
ANR	723623	Identifier	opt_count		721752	1					
ANR	723624	Identifier	MAX_NODE_OPT_INFO_REF_COUNT		721752	1					
ANR	723625	CompoundStatement		304:3:7170:7191	721752	1					
ANR	723626	IdentifierDeclStatement	"OnigDistance min , max ;"	4842:3:109294:109315	721752	0	True				
ANR	723627	IdentifierDecl	min		721752	0					
ANR	723628	IdentifierDeclType	OnigDistance		721752	0					
ANR	723629	Identifier	min		721752	1					
ANR	723630	IdentifierDecl	max		721752	1					
ANR	723631	IdentifierDeclType	OnigDistance		721752	0					
ANR	723632	Identifier	max		721752	1					
ANR	723633	ExpressionStatement	min = 0	4844:3:109321:109328	721752	1	True				
ANR	723634	AssignmentExpression	min = 0		721752	0		=			
ANR	723635	Identifier	min		721752	0					
ANR	723636	PrimaryExpression	0		721752	1					
ANR	723637	ExpressionStatement	max = ONIG_INFINITE_DISTANCE	4845:3:109333:109361	721752	2	True				
ANR	723638	AssignmentExpression	max = ONIG_INFINITE_DISTANCE		721752	0		=			
ANR	723639	Identifier	max		721752	0					
ANR	723640	Identifier	ONIG_INFINITE_DISTANCE		721752	1					
ANR	723641	IfStatement	if ( IS_ENCLOSE_MIN_FIXED ( en ) )		721752	3					
ANR	723642	Condition	IS_ENCLOSE_MIN_FIXED ( en )	4846:7:109370:109393	721752	0	True				
ANR	723643	CallExpression	IS_ENCLOSE_MIN_FIXED ( en )		721752	0					
ANR	723644	Callee	IS_ENCLOSE_MIN_FIXED		721752	0					
ANR	723645	Identifier	IS_ENCLOSE_MIN_FIXED		721752	0					
ANR	723646	ArgumentList	en		721752	1					
ANR	723647	Argument	en		721752	0					
ANR	723648	Identifier	en		721752	0					
ANR	723649	ExpressionStatement	min = en -> min_len	4846:33:109396:109413	721752	1	True				
ANR	723650	AssignmentExpression	min = en -> min_len		721752	0		=			
ANR	723651	Identifier	min		721752	0					
ANR	723652	PtrMemberAccess	en -> min_len		721752	1					
ANR	723653	Identifier	en		721752	0					
ANR	723654	Identifier	min_len		721752	1					
ANR	723655	IfStatement	if ( IS_ENCLOSE_MAX_FIXED ( en ) )		721752	4					
ANR	723656	Condition	IS_ENCLOSE_MAX_FIXED ( en )	4847:7:109422:109445	721752	0	True				
ANR	723657	CallExpression	IS_ENCLOSE_MAX_FIXED ( en )		721752	0					
ANR	723658	Callee	IS_ENCLOSE_MAX_FIXED		721752	0					
ANR	723659	Identifier	IS_ENCLOSE_MAX_FIXED		721752	0					
ANR	723660	ArgumentList	en		721752	1					
ANR	723661	Argument	en		721752	0					
ANR	723662	Identifier	en		721752	0					
ANR	723663	ExpressionStatement	max = en -> max_len	4847:33:109448:109465	721752	1	True				
ANR	723664	AssignmentExpression	max = en -> max_len		721752	0		=			
ANR	723665	Identifier	max		721752	0					
ANR	723666	PtrMemberAccess	en -> max_len		721752	1					
ANR	723667	Identifier	en		721752	0					
ANR	723668	Identifier	max_len		721752	1					
ANR	723669	ExpressionStatement	"set_mml ( & opt -> len , min , max )"	4848:3:109470:109498	721752	5	True				
ANR	723670	CallExpression	"set_mml ( & opt -> len , min , max )"		721752	0					
ANR	723671	Callee	set_mml		721752	0					
ANR	723672	Identifier	set_mml		721752	0					
ANR	723673	ArgumentList	& opt -> len		721752	1					
ANR	723674	Argument	& opt -> len		721752	0					
ANR	723675	UnaryOperationExpression	& opt -> len		721752	0					
ANR	723676	UnaryOperator	&		721752	0					
ANR	723677	PtrMemberAccess	opt -> len		721752	1					
ANR	723678	Identifier	opt		721752	0					
ANR	723679	Identifier	len		721752	1					
ANR	723680	Argument	min		721752	1					
ANR	723681	Identifier	min		721752	0					
ANR	723682	Argument	max		721752	2					
ANR	723683	Identifier	max		721752	0					
ANR	723684	ElseStatement	else		721752	0					
ANR	723685	CompoundStatement		314:1:7393:7393	721752	0					
ANR	723686	ExpressionStatement	"r = optimize_node_left ( en -> target , opt , env )"	4853:3:109522:109566	721752	0	True				
ANR	723687	AssignmentExpression	"r = optimize_node_left ( en -> target , opt , env )"		721752	0		=			
ANR	723688	Identifier	r		721752	0					
ANR	723689	CallExpression	"optimize_node_left ( en -> target , opt , env )"		721752	1					
ANR	723690	Callee	optimize_node_left		721752	0					
ANR	723691	Identifier	optimize_node_left		721752	0					
ANR	723692	ArgumentList	en -> target		721752	1					
ANR	723693	Argument	en -> target		721752	0					
ANR	723694	PtrMemberAccess	en -> target		721752	0					
ANR	723695	Identifier	en		721752	0					
ANR	723696	Identifier	target		721752	1					
ANR	723697	Argument	opt		721752	1					
ANR	723698	Identifier	opt		721752	0					
ANR	723699	Argument	env		721752	2					
ANR	723700	Identifier	env		721752	0					
ANR	723701	IfStatement	"if ( is_set_opt_anc_info ( & opt -> anc , ANCHOR_ANYCHAR_STAR_MASK ) )"		721752	1					
ANR	723702	Condition	"is_set_opt_anc_info ( & opt -> anc , ANCHOR_ANYCHAR_STAR_MASK )"	4855:7:109576:109631	721752	0	True				
ANR	723703	CallExpression	"is_set_opt_anc_info ( & opt -> anc , ANCHOR_ANYCHAR_STAR_MASK )"		721752	0					
ANR	723704	Callee	is_set_opt_anc_info		721752	0					
ANR	723705	Identifier	is_set_opt_anc_info		721752	0					
ANR	723706	ArgumentList	& opt -> anc		721752	1					
ANR	723707	Argument	& opt -> anc		721752	0					
ANR	723708	UnaryOperationExpression	& opt -> anc		721752	0					
ANR	723709	UnaryOperator	&		721752	0					
ANR	723710	PtrMemberAccess	opt -> anc		721752	1					
ANR	723711	Identifier	opt		721752	0					
ANR	723712	Identifier	anc		721752	1					
ANR	723713	Argument	ANCHOR_ANYCHAR_STAR_MASK		721752	1					
ANR	723714	Identifier	ANCHOR_ANYCHAR_STAR_MASK		721752	0					
ANR	723715	CompoundStatement		317:65:7510:7510	721752	1					
ANR	723716	IfStatement	"if ( BIT_STATUS_AT ( env -> scan_env -> backrefed_mem , en -> regnum ) )"		721752	0					
ANR	723717	Condition	"BIT_STATUS_AT ( env -> scan_env -> backrefed_mem , en -> regnum )"	4856:9:109645:109699	721752	0	True				
ANR	723718	CallExpression	"BIT_STATUS_AT ( env -> scan_env -> backrefed_mem , en -> regnum )"		721752	0					
ANR	723719	Callee	BIT_STATUS_AT		721752	0					
ANR	723720	Identifier	BIT_STATUS_AT		721752	0					
ANR	723721	ArgumentList	env -> scan_env -> backrefed_mem		721752	1					
ANR	723722	Argument	env -> scan_env -> backrefed_mem		721752	0					
ANR	723723	PtrMemberAccess	env -> scan_env -> backrefed_mem		721752	0					
ANR	723724	PtrMemberAccess	env -> scan_env		721752	0					
ANR	723725	Identifier	env		721752	0					
ANR	723726	Identifier	scan_env		721752	1					
ANR	723727	Identifier	backrefed_mem		721752	1					
ANR	723728	Argument	en -> regnum		721752	1					
ANR	723729	PtrMemberAccess	en -> regnum		721752	0					
ANR	723730	Identifier	en		721752	0					
ANR	723731	Identifier	regnum		721752	1					
ANR	723732	ExpressionStatement	"remove_opt_anc_info ( & opt -> anc , ANCHOR_ANYCHAR_STAR_MASK )"	4857:7:109709:109765	721752	1	True				
ANR	723733	CallExpression	"remove_opt_anc_info ( & opt -> anc , ANCHOR_ANYCHAR_STAR_MASK )"		721752	0					
ANR	723734	Callee	remove_opt_anc_info		721752	0					
ANR	723735	Identifier	remove_opt_anc_info		721752	0					
ANR	723736	ArgumentList	& opt -> anc		721752	1					
ANR	723737	Argument	& opt -> anc		721752	0					
ANR	723738	UnaryOperationExpression	& opt -> anc		721752	0					
ANR	723739	UnaryOperator	&		721752	0					
ANR	723740	PtrMemberAccess	opt -> anc		721752	1					
ANR	723741	Identifier	opt		721752	0					
ANR	723742	Identifier	anc		721752	1					
ANR	723743	Argument	ANCHOR_ANYCHAR_STAR_MASK		721752	1					
ANR	723744	Identifier	ANCHOR_ANYCHAR_STAR_MASK		721752	0					
ANR	723745	BreakStatement	break ;	4860:1:109776:109781	721752	6	True				
ANR	723746	Label	case ENCLOSE_STOP_BACKTRACK :	4862:6:109790:109817	721752	7	True				
ANR	723747	Identifier	ENCLOSE_STOP_BACKTRACK		721752	0					
ANR	723748	ExpressionStatement	"r = optimize_node_left ( en -> target , opt , env )"	4863:1:109820:109864	721752	8	True				
ANR	723749	AssignmentExpression	"r = optimize_node_left ( en -> target , opt , env )"		721752	0		=			
ANR	723750	Identifier	r		721752	0					
ANR	723751	CallExpression	"optimize_node_left ( en -> target , opt , env )"		721752	1					
ANR	723752	Callee	optimize_node_left		721752	0					
ANR	723753	Identifier	optimize_node_left		721752	0					
ANR	723754	ArgumentList	en -> target		721752	1					
ANR	723755	Argument	en -> target		721752	0					
ANR	723756	PtrMemberAccess	en -> target		721752	0					
ANR	723757	Identifier	en		721752	0					
ANR	723758	Identifier	target		721752	1					
ANR	723759	Argument	opt		721752	1					
ANR	723760	Identifier	opt		721752	0					
ANR	723761	Argument	env		721752	2					
ANR	723762	Identifier	env		721752	0					
ANR	723763	BreakStatement	break ;	4864:1:109867:109872	721752	9	True				
ANR	723764	BreakStatement	break ;	4867:4:109892:109897	721752	32	True				
ANR	723765	Label	default :	4869:2:109902:109909	721752	33	True				
ANR	723766	Identifier	default		721752	0					
ANR	723767	ExpressionStatement	"fprintf ( stderr , ""optimize_node_left: undefined node type %d\\n"" , NTYPE ( node ) )"	4871:4:109933:110014	721752	34	True				
ANR	723768	CallExpression	"fprintf ( stderr , ""optimize_node_left: undefined node type %d\\n"" , NTYPE ( node ) )"		721752	0					
ANR	723769	Callee	fprintf		721752	0					
ANR	723770	Identifier	fprintf		721752	0					
ANR	723771	ArgumentList	stderr		721752	1					
ANR	723772	Argument	stderr		721752	0					
ANR	723773	Identifier	stderr		721752	0					
ANR	723774	Argument	"""optimize_node_left: undefined node type %d\\n"""		721752	1					
ANR	723775	PrimaryExpression	"""optimize_node_left: undefined node type %d\\n"""		721752	0					
ANR	723776	Argument	NTYPE ( node )		721752	2					
ANR	723777	CallExpression	NTYPE ( node )		721752	0					
ANR	723778	Callee	NTYPE		721752	0					
ANR	723779	Identifier	NTYPE		721752	0					
ANR	723780	ArgumentList	node		721752	1					
ANR	723781	Argument	node		721752	0					
ANR	723782	Identifier	node		721752	0					
ANR	723783	ExpressionStatement	r = ONIGERR_TYPE_BUG	4874:4:110027:110047	721752	35	True				
ANR	723784	AssignmentExpression	r = ONIGERR_TYPE_BUG		721752	0		=			
ANR	723785	Identifier	r		721752	0					
ANR	723786	Identifier	ONIGERR_TYPE_BUG		721752	1					
ANR	723787	BreakStatement	break ;	4875:4:110053:110058	721752	36	True				
ANR	723788	ReturnStatement	return r ;	4878:2:110067:110075	721752	6	True				
ANR	723789	Identifier	r		721752	0					
ANR	723790	ReturnType	static int		721752	1					
ANR	723791	Identifier	optimize_node_left		721752	2					
ANR	723792	ParameterList	"Node * node , NodeOptInfo * opt , OptEnv * env"		721752	3					
ANR	723793	Parameter	Node * node	4538:19:102080:102089	721752	0	True				
ANR	723794	ParameterType	Node *		721752	0					
ANR	723795	Identifier	node		721752	1					
ANR	723796	Parameter	NodeOptInfo * opt	4538:31:102092:102107	721752	1	True				
ANR	723797	ParameterType	NodeOptInfo *		721752	0					
ANR	723798	Identifier	opt		721752	1					
ANR	723799	Parameter	OptEnv * env	4538:49:102110:102120	721752	2	True				
ANR	723800	ParameterType	OptEnv *		721752	0					
ANR	723801	Identifier	env		721752	1					
ANR	723802	CFGEntryNode	ENTRY		721752		True				
ANR	723803	CFGExitNode	EXIT		721752		True				
ANR	723804	Symbol	* sn		721752						
ANR	723805	Symbol	* cc		721752						
ANR	723806	Symbol	* backs		721752						
ANR	723807	Symbol	cc -> mbuf		721752						
ANR	723808	Symbol	type		721752						
ANR	723809	Symbol	NQTFR		721752						
ANR	723810	Symbol	opt -> exm . reach_end		721752						
ANR	723811	Symbol	ONIG_INFINITE_DISTANCE		721752						
ANR	723812	Symbol	nopt . map . value		721752						
ANR	723813	Symbol	* br		721752						
ANR	723814	Symbol	en -> type		721752						
ANR	723815	Symbol	SCANENV_MEM_NODES		721752						
ANR	723816	Symbol	IS_REPEAT_INFINITE		721752						
ANR	723817	Symbol	* env -> scan_env		721752						
ANR	723818	Symbol	qn		721752						
ANR	723819	Symbol	opt -> expr . reach_end		721752						
ANR	723820	Symbol	NSTRING_IS_AMBIG		721752						
ANR	723821	Symbol	en -> regnum		721752						
ANR	723822	Symbol	NCDR		721752						
ANR	723823	Symbol	NSTR		721752						
ANR	723824	Symbol	* sn -> s		721752						
ANR	723825	Symbol	qn -> target		721752						
ANR	723826	Symbol	cc -> bs		721752						
ANR	723827	Symbol	env -> options		721752						
ANR	723828	Symbol	distance_multiply		721752						
ANR	723829	Symbol	opt -> exb . reach_end		721752						
ANR	723830	Symbol	node		721752						
ANR	723831	Symbol	BACKREFS_P		721752						
ANR	723832	Symbol	get_max_match_length		721752						
ANR	723833	Symbol	& nopt . len		721752						
ANR	723834	Symbol	is_raw		721752						
ANR	723835	Symbol	opt -> expr		721752						
ANR	723836	Symbol	& nopt . exm		721752						
ANR	723837	Symbol	IS_ENCLOSE_MIN_FIXED		721752						
ANR	723838	Symbol	* * env		721752						
ANR	723839	Symbol	NCTYPE ( node ) -> ctype		721752						
ANR	723840	Symbol	tmax		721752						
ANR	723841	Symbol	ONIGENC_MBC_MINLEN		721752						
ANR	723842	Symbol	save		721752						
ANR	723843	Symbol	env -> enc		721752						
ANR	723844	Symbol	NSTRING_IS_RAW		721752						
ANR	723845	Symbol	opt -> exb . ignore_case		721752						
ANR	723846	Symbol	nopt . map		721752						
ANR	723847	Symbol	* en		721752						
ANR	723848	Symbol	& max		721752						
ANR	723849	Symbol	br		721752						
ANR	723850	Symbol	qn -> lower		721752						
ANR	723851	Symbol	min		721752						
ANR	723852	Symbol	* * backs		721752						
ANR	723853	Symbol	onigenc_strlen		721752						
ANR	723854	Symbol	NBREF		721752						
ANR	723855	Symbol	NT_CANY		721752						
ANR	723856	Symbol	* NANCHOR		721752						
ANR	723857	Symbol	NST_RECURSION		721752						
ANR	723858	Symbol	NENCLOSE		721752						
ANR	723859	Symbol	NCALL ( node ) -> target		721752						
ANR	723860	Symbol	sn		721752						
ANR	723861	Symbol	env -> mmd		721752						
ANR	723862	Symbol	cc		721752						
ANR	723863	Symbol	& opt -> map		721752						
ANR	723864	Symbol	max		721752						
ANR	723865	Symbol	tmin		721752						
ANR	723866	Symbol	i		721752						
ANR	723867	Symbol	nopt . exb . reach_end		721752						
ANR	723868	Symbol	nopt . exm . len		721752						
ANR	723869	Symbol	* ( sn -> s )		721752						
ANR	723870	Symbol	n		721752						
ANR	723871	Symbol	& nopt . map		721752						
ANR	723872	Symbol	MAX_NODE_OPT_INFO_REF_COUNT		721752						
ANR	723873	Symbol	r		721752						
ANR	723874	Symbol	env -> scan_env -> backrefed_mem		721752						
ANR	723875	Symbol	NCTYPE ( node ) -> not		721752						
ANR	723876	Symbol	en -> target		721752						
ANR	723877	Symbol	env -> case_fold_flag		721752						
ANR	723878	Symbol	br -> state		721752						
ANR	723879	Symbol	z		721752						
ANR	723880	Symbol	is_full_opt_exact_info		721752						
ANR	723881	Symbol	ANCHOR_ANYCHAR_STAR		721752						
ANR	723882	Symbol	& min		721752						
ANR	723883	Symbol	nopt . len . min		721752						
ANR	723884	Symbol	BITSET_AT		721752						
ANR	723885	Symbol	NCAR		721752						
ANR	723886	Symbol	br -> back_num		721752						
ANR	723887	Symbol	IS_NCCLASS_NOT		721752						
ANR	723888	Symbol	nopt . exb		721752						
ANR	723889	Symbol	nopt . exm		721752						
ANR	723890	Symbol	nenv		721752						
ANR	723891	Symbol	nopt . len		721752						
ANR	723892	Symbol	NCCLASS		721752						
ANR	723893	Symbol	ANCHOR_ANYCHAR_STAR_MASK		721752						
ANR	723894	Symbol	& env -> mmd		721752						
ANR	723895	Symbol	* NCTYPE		721752						
ANR	723896	Symbol	nopt . len . max		721752						
ANR	723897	Symbol	sn -> s		721752						
ANR	723898	Symbol	ONIGENC_MBC_MAXLEN_DIST		721752						
ANR	723899	Symbol	* nodes		721752						
ANR	723900	Symbol	NCTYPE		721752						
ANR	723901	Symbol	NSTRING_IS_DONT_GET_OPT_INFO		721752						
ANR	723902	Symbol	SINGLE_BYTE_SIZE		721752						
ANR	723903	Symbol	BIT_STATUS_AT		721752						
ANR	723904	Symbol	* * i		721752						
ANR	723905	Symbol	en -> option		721752						
ANR	723906	Symbol	IS_ENCLOSE_MAX_FIXED		721752						
ANR	723907	Symbol	* env		721752						
ANR	723908	Symbol	NANCHOR ( node ) -> target		721752						
ANR	723909	Symbol	en		721752						
ANR	723910	Symbol	stderr		721752						
ANR	723911	Symbol	ONIGERR_TYPE_BUG		721752						
ANR	723912	Symbol	add_char_amb_opt_map_info		721752						
ANR	723913	Symbol	qn -> upper		721752						
ANR	723914	Symbol	en -> max_len		721752						
ANR	723915	Symbol	opt		721752						
ANR	723916	Symbol	is_set_opt_anc_info		721752						
ANR	723917	Symbol	nopt		721752						
ANR	723918	Symbol	nd		721752						
ANR	723919	Symbol	& opt -> exb		721752						
ANR	723920	Symbol	& nenv		721752						
ANR	723921	Symbol	get_min_match_length		721752						
ANR	723922	Symbol	IS_CALL_RECURSION		721752						
ANR	723923	Symbol	en -> opt_count		721752						
ANR	723924	Symbol	& opt -> len		721752						
ANR	723925	Symbol	opt -> exb . len		721752						
ANR	723926	Symbol	en -> min_len		721752						
ANR	723927	Symbol	* qn		721752						
ANR	723928	Symbol	qn -> greedy		721752						
ANR	723929	Symbol	IS_NOT_NULL		721752						
ANR	723930	Symbol	* * sn		721752						
ANR	723931	Symbol	& nopt . exb		721752						
ANR	723932	Symbol	NCALL		721752						
ANR	723933	Symbol	* NENCLOSE		721752						
ANR	723934	Symbol	& tmin		721752						
ANR	723935	Symbol	NENCLOSE ( NCALL ( node ) -> target ) -> option		721752						
ANR	723936	Symbol	NANCHOR ( node ) -> type		721752						
ANR	723937	Symbol	ONIGENC_IS_CODE_WORD		721752						
ANR	723938	Symbol	& opt -> expr		721752						
ANR	723939	Symbol	nopt . exb . len		721752						
ANR	723940	Symbol	sn -> end		721752						
ANR	723941	Symbol	env -> mmd . max		721752						
ANR	723942	Symbol	* opt		721752						
ANR	723943	Symbol	ANCHOR_ANYCHAR_STAR_ML		721752						
ANR	723944	Symbol	opt -> exm		721752						
ANR	723945	Symbol	env		721752						
ANR	723946	Symbol	& nopt		721752						
ANR	723947	Symbol	opt -> exb		721752						
ANR	723948	Symbol	nodes		721752						
ANR	723949	Symbol	* i		721752						
ANR	723950	Symbol	env -> scan_env		721752						
ANR	723951	Symbol	slen		721752						
ANR	723952	Symbol	optimize_node_left		721752						
ANR	723953	Symbol	NANCHOR		721752						
ANR	723954	Symbol	IS_MULTILINE		721752						
ANR	723955	Symbol	NTYPE		721752						
ANR	723956	Symbol	& tmax		721752						
ANR	723957	Symbol	& nenv . mmd		721752						
ANR	723958	Symbol	* NCALL		721752						
ANR	723959	Symbol	backs		721752						
ANR	723960	Symbol	& opt -> anc		721752						
ANR	723961	Function	set_optimize_exact_info	4881:0:110080:111235							
ANR	723962	FunctionDef	"set_optimize_exact_info (regex_t * reg , OptExactInfo * e)"		723961	0					
ANR	723963	CompoundStatement		4883:0:110146:111235	723961	0					
ANR	723964	IdentifierDeclStatement	int r ;	4884:2:110150:110155	723961	0	True				
ANR	723965	IdentifierDecl	r		723961	0					
ANR	723966	IdentifierDeclType	int		723961	0					
ANR	723967	Identifier	r		723961	1					
ANR	723968	IfStatement	if ( e -> len == 0 )		723961	1					
ANR	723969	Condition	e -> len == 0	4886:6:110164:110174	723961	0	True				
ANR	723970	EqualityExpression	e -> len == 0		723961	0		==			
ANR	723971	PtrMemberAccess	e -> len		723961	0					
ANR	723972	Identifier	e		723961	0					
ANR	723973	Identifier	len		723961	1					
ANR	723974	PrimaryExpression	0		723961	1					
ANR	723975	ReturnStatement	return 0 ;	4886:19:110177:110185	723961	1	True				
ANR	723976	PrimaryExpression	0		723961	0					
ANR	723977	IfStatement	if ( e -> ignore_case )		723961	2					
ANR	723978	Condition	e -> ignore_case	4888:6:110194:110207	723961	0	True				
ANR	723979	PtrMemberAccess	e -> ignore_case		723961	0					
ANR	723980	Identifier	e		723961	0					
ANR	723981	Identifier	ignore_case		723961	1					
ANR	723982	CompoundStatement		6:22:63:63	723961	1					
ANR	723983	ExpressionStatement	reg -> exact = ( UChar * ) xmalloc ( e -> len )	4889:4:110216:110253	723961	0	True				
ANR	723984	AssignmentExpression	reg -> exact = ( UChar * ) xmalloc ( e -> len )		723961	0		=			
ANR	723985	PtrMemberAccess	reg -> exact		723961	0					
ANR	723986	Identifier	reg		723961	0					
ANR	723987	Identifier	exact		723961	1					
ANR	723988	CastExpression	( UChar * ) xmalloc ( e -> len )		723961	1					
ANR	723989	CastTarget	UChar *		723961	0					
ANR	723990	CallExpression	xmalloc ( e -> len )		723961	1					
ANR	723991	Callee	xmalloc		723961	0					
ANR	723992	Identifier	xmalloc		723961	0					
ANR	723993	ArgumentList	e -> len		723961	1					
ANR	723994	Argument	e -> len		723961	0					
ANR	723995	PtrMemberAccess	e -> len		723961	0					
ANR	723996	Identifier	e		723961	0					
ANR	723997	Identifier	len		723961	1					
ANR	723998	ExpressionStatement	CHECK_NULL_RETURN_MEMERR ( reg -> exact )	4890:4:110259:110295	723961	1	True				
ANR	723999	CallExpression	CHECK_NULL_RETURN_MEMERR ( reg -> exact )		723961	0					
ANR	724000	Callee	CHECK_NULL_RETURN_MEMERR		723961	0					
ANR	724001	Identifier	CHECK_NULL_RETURN_MEMERR		723961	0					
ANR	724002	ArgumentList	reg -> exact		723961	1					
ANR	724003	Argument	reg -> exact		723961	0					
ANR	724004	PtrMemberAccess	reg -> exact		723961	0					
ANR	724005	Identifier	reg		723961	0					
ANR	724006	Identifier	exact		723961	1					
ANR	724007	ExpressionStatement	"xmemcpy ( reg -> exact , e -> s , e -> len )"	4891:4:110301:110334	723961	2	True				
ANR	724008	CallExpression	"xmemcpy ( reg -> exact , e -> s , e -> len )"		723961	0					
ANR	724009	Callee	xmemcpy		723961	0					
ANR	724010	Identifier	xmemcpy		723961	0					
ANR	724011	ArgumentList	reg -> exact		723961	1					
ANR	724012	Argument	reg -> exact		723961	0					
ANR	724013	PtrMemberAccess	reg -> exact		723961	0					
ANR	724014	Identifier	reg		723961	0					
ANR	724015	Identifier	exact		723961	1					
ANR	724016	Argument	e -> s		723961	1					
ANR	724017	PtrMemberAccess	e -> s		723961	0					
ANR	724018	Identifier	e		723961	0					
ANR	724019	Identifier	s		723961	1					
ANR	724020	Argument	e -> len		723961	2					
ANR	724021	PtrMemberAccess	e -> len		723961	0					
ANR	724022	Identifier	e		723961	0					
ANR	724023	Identifier	len		723961	1					
ANR	724024	ExpressionStatement	reg -> exact_end = reg -> exact + e -> len	4892:4:110340:110376	723961	3	True				
ANR	724025	AssignmentExpression	reg -> exact_end = reg -> exact + e -> len		723961	0		=			
ANR	724026	PtrMemberAccess	reg -> exact_end		723961	0					
ANR	724027	Identifier	reg		723961	0					
ANR	724028	Identifier	exact_end		723961	1					
ANR	724029	AdditiveExpression	reg -> exact + e -> len		723961	1		+			
ANR	724030	PtrMemberAccess	reg -> exact		723961	0					
ANR	724031	Identifier	reg		723961	0					
ANR	724032	Identifier	exact		723961	1					
ANR	724033	PtrMemberAccess	e -> len		723961	1					
ANR	724034	Identifier	e		723961	0					
ANR	724035	Identifier	len		723961	1					
ANR	724036	ExpressionStatement	reg -> optimize = ONIG_OPTIMIZE_EXACT_IC	4893:4:110382:110420	723961	4	True				
ANR	724037	AssignmentExpression	reg -> optimize = ONIG_OPTIMIZE_EXACT_IC		723961	0		=			
ANR	724038	PtrMemberAccess	reg -> optimize		723961	0					
ANR	724039	Identifier	reg		723961	0					
ANR	724040	Identifier	optimize		723961	1					
ANR	724041	Identifier	ONIG_OPTIMIZE_EXACT_IC		723961	1					
ANR	724042	ElseStatement	else		723961	0					
ANR	724043	CompoundStatement		14:4:292:309	723961	0					
ANR	724044	IdentifierDeclStatement	int allow_reverse ;	4896:4:110439:110456	723961	0	True				
ANR	724045	IdentifierDecl	allow_reverse		723961	0					
ANR	724046	IdentifierDeclType	int		723961	0					
ANR	724047	Identifier	allow_reverse		723961	1					
ANR	724048	ExpressionStatement	"reg -> exact = str_dup ( e -> s , e -> s + e -> len )"	4898:4:110463:110504	723961	1	True				
ANR	724049	AssignmentExpression	"reg -> exact = str_dup ( e -> s , e -> s + e -> len )"		723961	0		=			
ANR	724050	PtrMemberAccess	reg -> exact		723961	0					
ANR	724051	Identifier	reg		723961	0					
ANR	724052	Identifier	exact		723961	1					
ANR	724053	CallExpression	"str_dup ( e -> s , e -> s + e -> len )"		723961	1					
ANR	724054	Callee	str_dup		723961	0					
ANR	724055	Identifier	str_dup		723961	0					
ANR	724056	ArgumentList	e -> s		723961	1					
ANR	724057	Argument	e -> s		723961	0					
ANR	724058	PtrMemberAccess	e -> s		723961	0					
ANR	724059	Identifier	e		723961	0					
ANR	724060	Identifier	s		723961	1					
ANR	724061	Argument	e -> s + e -> len		723961	1					
ANR	724062	AdditiveExpression	e -> s + e -> len		723961	0		+			
ANR	724063	PtrMemberAccess	e -> s		723961	0					
ANR	724064	Identifier	e		723961	0					
ANR	724065	Identifier	s		723961	1					
ANR	724066	PtrMemberAccess	e -> len		723961	1					
ANR	724067	Identifier	e		723961	0					
ANR	724068	Identifier	len		723961	1					
ANR	724069	ExpressionStatement	CHECK_NULL_RETURN_MEMERR ( reg -> exact )	4899:4:110510:110546	723961	2	True				
ANR	724070	CallExpression	CHECK_NULL_RETURN_MEMERR ( reg -> exact )		723961	0					
ANR	724071	Callee	CHECK_NULL_RETURN_MEMERR		723961	0					
ANR	724072	Identifier	CHECK_NULL_RETURN_MEMERR		723961	0					
ANR	724073	ArgumentList	reg -> exact		723961	1					
ANR	724074	Argument	reg -> exact		723961	0					
ANR	724075	PtrMemberAccess	reg -> exact		723961	0					
ANR	724076	Identifier	reg		723961	0					
ANR	724077	Identifier	exact		723961	1					
ANR	724078	ExpressionStatement	reg -> exact_end = reg -> exact + e -> len	4900:4:110552:110588	723961	3	True				
ANR	724079	AssignmentExpression	reg -> exact_end = reg -> exact + e -> len		723961	0		=			
ANR	724080	PtrMemberAccess	reg -> exact_end		723961	0					
ANR	724081	Identifier	reg		723961	0					
ANR	724082	Identifier	exact_end		723961	1					
ANR	724083	AdditiveExpression	reg -> exact + e -> len		723961	1		+			
ANR	724084	PtrMemberAccess	reg -> exact		723961	0					
ANR	724085	Identifier	reg		723961	0					
ANR	724086	Identifier	exact		723961	1					
ANR	724087	PtrMemberAccess	e -> len		723961	1					
ANR	724088	Identifier	e		723961	0					
ANR	724089	Identifier	len		723961	1					
ANR	724090	ExpressionStatement	"allow_reverse = ONIGENC_IS_ALLOWED_REVERSE_MATCH ( reg -> enc , reg -> exact , reg -> exact_end )"	4902:4:110596:110683	723961	4	True				
ANR	724091	AssignmentExpression	"allow_reverse = ONIGENC_IS_ALLOWED_REVERSE_MATCH ( reg -> enc , reg -> exact , reg -> exact_end )"		723961	0		=			
ANR	724092	Identifier	allow_reverse		723961	0					
ANR	724093	CallExpression	"ONIGENC_IS_ALLOWED_REVERSE_MATCH ( reg -> enc , reg -> exact , reg -> exact_end )"		723961	1					
ANR	724094	Callee	ONIGENC_IS_ALLOWED_REVERSE_MATCH		723961	0					
ANR	724095	Identifier	ONIGENC_IS_ALLOWED_REVERSE_MATCH		723961	0					
ANR	724096	ArgumentList	reg -> enc		723961	1					
ANR	724097	Argument	reg -> enc		723961	0					
ANR	724098	PtrMemberAccess	reg -> enc		723961	0					
ANR	724099	Identifier	reg		723961	0					
ANR	724100	Identifier	enc		723961	1					
ANR	724101	Argument	reg -> exact		723961	1					
ANR	724102	PtrMemberAccess	reg -> exact		723961	0					
ANR	724103	Identifier	reg		723961	0					
ANR	724104	Identifier	exact		723961	1					
ANR	724105	Argument	reg -> exact_end		723961	2					
ANR	724106	PtrMemberAccess	reg -> exact_end		723961	0					
ANR	724107	Identifier	reg		723961	0					
ANR	724108	Identifier	exact_end		723961	1					
ANR	724109	IfStatement	if ( e -> len >= 3 || ( e -> len >= 2 && allow_reverse ) )		723961	5					
ANR	724110	Condition	e -> len >= 3 || ( e -> len >= 2 && allow_reverse )	4905:8:110694:110738	723961	0	True				
ANR	724111	OrExpression	e -> len >= 3 || ( e -> len >= 2 && allow_reverse )		723961	0		||			
ANR	724112	RelationalExpression	e -> len >= 3		723961	0		>=			
ANR	724113	PtrMemberAccess	e -> len		723961	0					
ANR	724114	Identifier	e		723961	0					
ANR	724115	Identifier	len		723961	1					
ANR	724116	PrimaryExpression	3		723961	1					
ANR	724117	AndExpression	e -> len >= 2 && allow_reverse		723961	1		&&			
ANR	724118	RelationalExpression	e -> len >= 2		723961	0		>=			
ANR	724119	PtrMemberAccess	e -> len		723961	0					
ANR	724120	Identifier	e		723961	0					
ANR	724121	Identifier	len		723961	1					
ANR	724122	PrimaryExpression	2		723961	1					
ANR	724123	Identifier	allow_reverse		723961	1					
ANR	724124	CompoundStatement		23:55:594:594	723961	1					
ANR	724125	ExpressionStatement	"r = set_bm_skip ( reg -> exact , reg -> exact_end , reg -> enc , reg -> map , & ( reg -> int_map ) )"	4906:6:110749:110844	723961	0	True				
ANR	724126	AssignmentExpression	"r = set_bm_skip ( reg -> exact , reg -> exact_end , reg -> enc , reg -> map , & ( reg -> int_map ) )"		723961	0		=			
ANR	724127	Identifier	r		723961	0					
ANR	724128	CallExpression	"set_bm_skip ( reg -> exact , reg -> exact_end , reg -> enc , reg -> map , & ( reg -> int_map ) )"		723961	1					
ANR	724129	Callee	set_bm_skip		723961	0					
ANR	724130	Identifier	set_bm_skip		723961	0					
ANR	724131	ArgumentList	reg -> exact		723961	1					
ANR	724132	Argument	reg -> exact		723961	0					
ANR	724133	PtrMemberAccess	reg -> exact		723961	0					
ANR	724134	Identifier	reg		723961	0					
ANR	724135	Identifier	exact		723961	1					
ANR	724136	Argument	reg -> exact_end		723961	1					
ANR	724137	PtrMemberAccess	reg -> exact_end		723961	0					
ANR	724138	Identifier	reg		723961	0					
ANR	724139	Identifier	exact_end		723961	1					
ANR	724140	Argument	reg -> enc		723961	2					
ANR	724141	PtrMemberAccess	reg -> enc		723961	0					
ANR	724142	Identifier	reg		723961	0					
ANR	724143	Identifier	enc		723961	1					
ANR	724144	Argument	reg -> map		723961	3					
ANR	724145	PtrMemberAccess	reg -> map		723961	0					
ANR	724146	Identifier	reg		723961	0					
ANR	724147	Identifier	map		723961	1					
ANR	724148	Argument	& ( reg -> int_map )		723961	4					
ANR	724149	UnaryOperationExpression	& ( reg -> int_map )		723961	0					
ANR	724150	UnaryOperator	&		723961	0					
ANR	724151	PtrMemberAccess	reg -> int_map		723961	1					
ANR	724152	Identifier	reg		723961	0					
ANR	724153	Identifier	int_map		723961	1					
ANR	724154	IfStatement	if ( r )		723961	1					
ANR	724155	Condition	r	4908:10:110856:110856	723961	0	True				
ANR	724156	Identifier	r		723961	0					
ANR	724157	ReturnStatement	return r ;	4908:13:110859:110867	723961	1	True				
ANR	724158	Identifier	r		723961	0					
ANR	724159	ExpressionStatement	reg -> optimize = ( allow_reverse != 0 ? ONIG_OPTIMIZE_EXACT_BM : ONIG_OPTIMIZE_EXACT_BM_NOT_REV )	4910:6:110876:110979	723961	2	True				
ANR	724160	AssignmentExpression	reg -> optimize = ( allow_reverse != 0 ? ONIG_OPTIMIZE_EXACT_BM : ONIG_OPTIMIZE_EXACT_BM_NOT_REV )		723961	0		=			
ANR	724161	PtrMemberAccess	reg -> optimize		723961	0					
ANR	724162	Identifier	reg		723961	0					
ANR	724163	Identifier	optimize		723961	1					
ANR	724164	ConditionalExpression	allow_reverse != 0 ? ONIG_OPTIMIZE_EXACT_BM : ONIG_OPTIMIZE_EXACT_BM_NOT_REV		723961	1					
ANR	724165	Condition	allow_reverse != 0		723961	0					
ANR	724166	EqualityExpression	allow_reverse != 0		723961	0		!=			
ANR	724167	Identifier	allow_reverse		723961	0					
ANR	724168	PrimaryExpression	0		723961	1					
ANR	724169	Identifier	ONIG_OPTIMIZE_EXACT_BM		723961	1					
ANR	724170	Identifier	ONIG_OPTIMIZE_EXACT_BM_NOT_REV		723961	2					
ANR	724171	ElseStatement	else		723961	0					
ANR	724172	CompoundStatement		31:9:849:849	723961	0					
ANR	724173	ExpressionStatement	reg -> optimize = ONIG_OPTIMIZE_EXACT	4914:6:111004:111039	723961	0	True				
ANR	724174	AssignmentExpression	reg -> optimize = ONIG_OPTIMIZE_EXACT		723961	0		=			
ANR	724175	PtrMemberAccess	reg -> optimize		723961	0					
ANR	724176	Identifier	reg		723961	0					
ANR	724177	Identifier	optimize		723961	1					
ANR	724178	Identifier	ONIG_OPTIMIZE_EXACT		723961	1					
ANR	724179	ExpressionStatement	reg -> dmin = e -> mmd . min	4918:2:111054:111076	723961	3	True				
ANR	724180	AssignmentExpression	reg -> dmin = e -> mmd . min		723961	0		=			
ANR	724181	PtrMemberAccess	reg -> dmin		723961	0					
ANR	724182	Identifier	reg		723961	0					
ANR	724183	Identifier	dmin		723961	1					
ANR	724184	MemberAccess	e -> mmd . min		723961	1					
ANR	724185	PtrMemberAccess	e -> mmd		723961	0					
ANR	724186	Identifier	e		723961	0					
ANR	724187	Identifier	mmd		723961	1					
ANR	724188	Identifier	min		723961	1					
ANR	724189	ExpressionStatement	reg -> dmax = e -> mmd . max	4919:2:111080:111102	723961	4	True				
ANR	724190	AssignmentExpression	reg -> dmax = e -> mmd . max		723961	0		=			
ANR	724191	PtrMemberAccess	reg -> dmax		723961	0					
ANR	724192	Identifier	reg		723961	0					
ANR	724193	Identifier	dmax		723961	1					
ANR	724194	MemberAccess	e -> mmd . max		723961	1					
ANR	724195	PtrMemberAccess	e -> mmd		723961	0					
ANR	724196	Identifier	e		723961	0					
ANR	724197	Identifier	mmd		723961	1					
ANR	724198	Identifier	max		723961	1					
ANR	724199	IfStatement	if ( reg -> dmin != ONIG_INFINITE_DISTANCE )		723961	5					
ANR	724200	Condition	reg -> dmin != ONIG_INFINITE_DISTANCE	4921:6:111111:111145	723961	0	True				
ANR	724201	EqualityExpression	reg -> dmin != ONIG_INFINITE_DISTANCE		723961	0		!=			
ANR	724202	PtrMemberAccess	reg -> dmin		723961	0					
ANR	724203	Identifier	reg		723961	0					
ANR	724204	Identifier	dmin		723961	1					
ANR	724205	Identifier	ONIG_INFINITE_DISTANCE		723961	1					
ANR	724206	CompoundStatement		39:43:1001:1001	723961	1					
ANR	724207	ExpressionStatement	reg -> threshold_len = reg -> dmin + ( reg -> exact_end - reg -> exact )	4922:4:111154:111216	723961	0	True				
ANR	724208	AssignmentExpression	reg -> threshold_len = reg -> dmin + ( reg -> exact_end - reg -> exact )		723961	0		=			
ANR	724209	PtrMemberAccess	reg -> threshold_len		723961	0					
ANR	724210	Identifier	reg		723961	0					
ANR	724211	Identifier	threshold_len		723961	1					
ANR	724212	AdditiveExpression	reg -> dmin + ( reg -> exact_end - reg -> exact )		723961	1		+			
ANR	724213	PtrMemberAccess	reg -> dmin		723961	0					
ANR	724214	Identifier	reg		723961	0					
ANR	724215	Identifier	dmin		723961	1					
ANR	724216	AdditiveExpression	reg -> exact_end - reg -> exact		723961	1		-			
ANR	724217	PtrMemberAccess	reg -> exact_end		723961	0					
ANR	724218	Identifier	reg		723961	0					
ANR	724219	Identifier	exact_end		723961	1					
ANR	724220	PtrMemberAccess	reg -> exact		723961	1					
ANR	724221	Identifier	reg		723961	0					
ANR	724222	Identifier	exact		723961	1					
ANR	724223	ReturnStatement	return 0 ;	4925:2:111225:111233	723961	6	True				
ANR	724224	PrimaryExpression	0		723961	0					
ANR	724225	ReturnType	static int		723961	1					
ANR	724226	Identifier	set_optimize_exact_info		723961	2					
ANR	724227	ParameterList	"regex_t * reg , OptExactInfo * e"		723961	3					
ANR	724228	Parameter	regex_t * reg	4882:24:110115:110126	723961	0	True				
ANR	724229	ParameterType	regex_t *		723961	0					
ANR	724230	Identifier	reg		723961	1					
ANR	724231	Parameter	OptExactInfo * e	4882:38:110129:110143	723961	1	True				
ANR	724232	ParameterType	OptExactInfo *		723961	0					
ANR	724233	Identifier	e		723961	1					
ANR	724234	CFGEntryNode	ENTRY		723961		True				
ANR	724235	CFGExitNode	EXIT		723961		True				
ANR	724236	Symbol	ONIGENC_IS_ALLOWED_REVERSE_MATCH		723961						
ANR	724237	Symbol	reg -> dmin		723961						
ANR	724238	Symbol	reg -> threshold_len		723961						
ANR	724239	Symbol	set_bm_skip		723961						
ANR	724240	Symbol	reg -> exact_end		723961						
ANR	724241	Symbol	& reg -> int_map		723961						
ANR	724242	Symbol	e -> mmd . max		723961						
ANR	724243	Symbol	ONIG_INFINITE_DISTANCE		723961						
ANR	724244	Symbol	e -> mmd		723961						
ANR	724245	Symbol	reg		723961						
ANR	724246	Symbol	xmalloc		723961						
ANR	724247	Symbol	reg -> optimize		723961						
ANR	724248	Symbol	ONIG_OPTIMIZE_EXACT		723961						
ANR	724249	Symbol	str_dup		723961						
ANR	724250	Symbol	reg -> map		723961						
ANR	724251	Symbol	e -> mmd . min		723961						
ANR	724252	Symbol	e -> len		723961						
ANR	724253	Symbol	ONIG_OPTIMIZE_EXACT_BM		723961						
ANR	724254	Symbol	e		723961						
ANR	724255	Symbol	ONIG_OPTIMIZE_EXACT_BM_NOT_REV		723961						
ANR	724256	Symbol	e -> s		723961						
ANR	724257	Symbol	* e		723961						
ANR	724258	Symbol	reg -> enc		723961						
ANR	724259	Symbol	r		723961						
ANR	724260	Symbol	ONIG_OPTIMIZE_EXACT_IC		723961						
ANR	724261	Symbol	allow_reverse		723961						
ANR	724262	Symbol	reg -> dmax		723961						
ANR	724263	Symbol	reg -> exact		723961						
ANR	724264	Symbol	e -> ignore_case		723961						
ANR	724265	Symbol	* reg		723961						
ANR	724266	Function	set_optimize_map_info	4928:0:111238:111581							
ANR	724267	FunctionDef	"set_optimize_map_info (regex_t * reg , OptMapInfo * m)"		724266	0					
ANR	724268	CompoundStatement		4930:0:111301:111581	724266	0					
ANR	724269	IdentifierDeclStatement	int i ;	4931:2:111305:111310	724266	0	True				
ANR	724270	IdentifierDecl	i		724266	0					
ANR	724271	IdentifierDeclType	int		724266	0					
ANR	724272	Identifier	i		724266	1					
ANR	724273	ForStatement	for ( i = 0 ; i < ONIG_CHAR_TABLE_SIZE ; i ++ )		724266	1					
ANR	724274	ForInit	i = 0 ;	4933:7:111320:111325	724266	0	True				
ANR	724275	AssignmentExpression	i = 0		724266	0		=			
ANR	724276	Identifier	i		724266	0					
ANR	724277	PrimaryExpression	0		724266	1					
ANR	724278	Condition	i < ONIG_CHAR_TABLE_SIZE	4933:14:111327:111350	724266	1	True				
ANR	724279	RelationalExpression	i < ONIG_CHAR_TABLE_SIZE		724266	0		<			
ANR	724280	Identifier	i		724266	0					
ANR	724281	Identifier	ONIG_CHAR_TABLE_SIZE		724266	1					
ANR	724282	PostIncDecOperationExpression	i ++	4933:40:111353:111355	724266	2	True				
ANR	724283	Identifier	i		724266	0					
ANR	724284	IncDec	++		724266	1					
ANR	724285	ExpressionStatement	reg -> map [ i ] = m -> map [ i ]	4934:4:111362:111385	724266	3	True				
ANR	724286	AssignmentExpression	reg -> map [ i ] = m -> map [ i ]		724266	0		=			
ANR	724287	ArrayIndexing	reg -> map [ i ]		724266	0					
ANR	724288	PtrMemberAccess	reg -> map		724266	0					
ANR	724289	Identifier	reg		724266	0					
ANR	724290	Identifier	map		724266	1					
ANR	724291	Identifier	i		724266	1					
ANR	724292	ArrayIndexing	m -> map [ i ]		724266	1					
ANR	724293	PtrMemberAccess	m -> map		724266	0					
ANR	724294	Identifier	m		724266	0					
ANR	724295	Identifier	map		724266	1					
ANR	724296	Identifier	i		724266	1					
ANR	724297	ExpressionStatement	reg -> optimize = ONIG_OPTIMIZE_MAP	4936:2:111390:111425	724266	2	True				
ANR	724298	AssignmentExpression	reg -> optimize = ONIG_OPTIMIZE_MAP		724266	0		=			
ANR	724299	PtrMemberAccess	reg -> optimize		724266	0					
ANR	724300	Identifier	reg		724266	0					
ANR	724301	Identifier	optimize		724266	1					
ANR	724302	Identifier	ONIG_OPTIMIZE_MAP		724266	1					
ANR	724303	ExpressionStatement	reg -> dmin = m -> mmd . min	4937:2:111429:111457	724266	3	True				
ANR	724304	AssignmentExpression	reg -> dmin = m -> mmd . min		724266	0		=			
ANR	724305	PtrMemberAccess	reg -> dmin		724266	0					
ANR	724306	Identifier	reg		724266	0					
ANR	724307	Identifier	dmin		724266	1					
ANR	724308	MemberAccess	m -> mmd . min		724266	1					
ANR	724309	PtrMemberAccess	m -> mmd		724266	0					
ANR	724310	Identifier	m		724266	0					
ANR	724311	Identifier	mmd		724266	1					
ANR	724312	Identifier	min		724266	1					
ANR	724313	ExpressionStatement	reg -> dmax = m -> mmd . max	4938:2:111461:111489	724266	4	True				
ANR	724314	AssignmentExpression	reg -> dmax = m -> mmd . max		724266	0		=			
ANR	724315	PtrMemberAccess	reg -> dmax		724266	0					
ANR	724316	Identifier	reg		724266	0					
ANR	724317	Identifier	dmax		724266	1					
ANR	724318	MemberAccess	m -> mmd . max		724266	1					
ANR	724319	PtrMemberAccess	m -> mmd		724266	0					
ANR	724320	Identifier	m		724266	0					
ANR	724321	Identifier	mmd		724266	1					
ANR	724322	Identifier	max		724266	1					
ANR	724323	IfStatement	if ( reg -> dmin != ONIG_INFINITE_DISTANCE )		724266	5					
ANR	724324	Condition	reg -> dmin != ONIG_INFINITE_DISTANCE	4940:6:111498:111532	724266	0	True				
ANR	724325	EqualityExpression	reg -> dmin != ONIG_INFINITE_DISTANCE		724266	0		!=			
ANR	724326	PtrMemberAccess	reg -> dmin		724266	0					
ANR	724327	Identifier	reg		724266	0					
ANR	724328	Identifier	dmin		724266	1					
ANR	724329	Identifier	ONIG_INFINITE_DISTANCE		724266	1					
ANR	724330	CompoundStatement		11:43:233:233	724266	1					
ANR	724331	ExpressionStatement	reg -> threshold_len = reg -> dmin + 1	4941:4:111541:111575	724266	0	True				
ANR	724332	AssignmentExpression	reg -> threshold_len = reg -> dmin + 1		724266	0		=			
ANR	724333	PtrMemberAccess	reg -> threshold_len		724266	0					
ANR	724334	Identifier	reg		724266	0					
ANR	724335	Identifier	threshold_len		724266	1					
ANR	724336	AdditiveExpression	reg -> dmin + 1		724266	1		+			
ANR	724337	PtrMemberAccess	reg -> dmin		724266	0					
ANR	724338	Identifier	reg		724266	0					
ANR	724339	Identifier	dmin		724266	1					
ANR	724340	PrimaryExpression	1		724266	1					
ANR	724341	ReturnType	static void		724266	1					
ANR	724342	Identifier	set_optimize_map_info		724266	2					
ANR	724343	ParameterList	"regex_t * reg , OptMapInfo * m"		724266	3					
ANR	724344	Parameter	regex_t * reg	4929:22:111272:111283	724266	0	True				
ANR	724345	ParameterType	regex_t *		724266	0					
ANR	724346	Identifier	reg		724266	1					
ANR	724347	Parameter	OptMapInfo * m	4929:36:111286:111298	724266	1	True				
ANR	724348	ParameterType	OptMapInfo *		724266	0					
ANR	724349	Identifier	m		724266	1					
ANR	724350	CFGEntryNode	ENTRY		724266		True				
ANR	724351	CFGExitNode	EXIT		724266		True				
ANR	724352	Symbol	reg -> map		724266						
ANR	724353	Symbol	m -> mmd		724266						
ANR	724354	Symbol	reg -> dmin		724266						
ANR	724355	Symbol	reg -> threshold_len		724266						
ANR	724356	Symbol	* * reg		724266						
ANR	724357	Symbol	i		724266						
ANR	724358	Symbol	m -> mmd . min		724266						
ANR	724359	Symbol	m -> map		724266						
ANR	724360	Symbol	m		724266						
ANR	724361	Symbol	ONIG_INFINITE_DISTANCE		724266						
ANR	724362	Symbol	ONIG_CHAR_TABLE_SIZE		724266						
ANR	724363	Symbol	* i		724266						
ANR	724364	Symbol	* m -> map		724266						
ANR	724365	Symbol	reg		724266						
ANR	724366	Symbol	reg -> dmax		724266						
ANR	724367	Symbol	reg -> optimize		724266						
ANR	724368	Symbol	* m		724266						
ANR	724369	Symbol	ONIG_OPTIMIZE_MAP		724266						
ANR	724370	Symbol	* reg -> map		724266						
ANR	724371	Symbol	m -> mmd . max		724266						
ANR	724372	Symbol	* reg		724266						
ANR	724373	Symbol	* * m		724266						
ANR	724374	Function	set_sub_anchor	4945:0:111584:111762							
ANR	724375	FunctionDef	"set_sub_anchor (regex_t * reg , OptAncInfo * anc)"		724374	0					
ANR	724376	CompoundStatement		4947:0:111642:111762	724374	0					
ANR	724377	ExpressionStatement	reg -> sub_anchor |= anc -> left_anchor & ANCHOR_BEGIN_LINE	4948:2:111646:111702	724374	0	True				
ANR	724378	AssignmentExpression	reg -> sub_anchor |= anc -> left_anchor & ANCHOR_BEGIN_LINE		724374	0		|=			
ANR	724379	PtrMemberAccess	reg -> sub_anchor		724374	0					
ANR	724380	Identifier	reg		724374	0					
ANR	724381	Identifier	sub_anchor		724374	1					
ANR	724382	BitAndExpression	anc -> left_anchor & ANCHOR_BEGIN_LINE		724374	1		&			
ANR	724383	PtrMemberAccess	anc -> left_anchor		724374	0					
ANR	724384	Identifier	anc		724374	0					
ANR	724385	Identifier	left_anchor		724374	1					
ANR	724386	Identifier	ANCHOR_BEGIN_LINE		724374	1					
ANR	724387	ExpressionStatement	reg -> sub_anchor |= anc -> right_anchor & ANCHOR_END_LINE	4949:2:111706:111760	724374	1	True				
ANR	724388	AssignmentExpression	reg -> sub_anchor |= anc -> right_anchor & ANCHOR_END_LINE		724374	0		|=			
ANR	724389	PtrMemberAccess	reg -> sub_anchor		724374	0					
ANR	724390	Identifier	reg		724374	0					
ANR	724391	Identifier	sub_anchor		724374	1					
ANR	724392	BitAndExpression	anc -> right_anchor & ANCHOR_END_LINE		724374	1		&			
ANR	724393	PtrMemberAccess	anc -> right_anchor		724374	0					
ANR	724394	Identifier	anc		724374	0					
ANR	724395	Identifier	right_anchor		724374	1					
ANR	724396	Identifier	ANCHOR_END_LINE		724374	1					
ANR	724397	ReturnType	static void		724374	1					
ANR	724398	Identifier	set_sub_anchor		724374	2					
ANR	724399	ParameterList	"regex_t * reg , OptAncInfo * anc"		724374	3					
ANR	724400	Parameter	regex_t * reg	4946:15:111611:111622	724374	0	True				
ANR	724401	ParameterType	regex_t *		724374	0					
ANR	724402	Identifier	reg		724374	1					
ANR	724403	Parameter	OptAncInfo * anc	4946:29:111625:111639	724374	1	True				
ANR	724404	ParameterType	OptAncInfo *		724374	0					
ANR	724405	Identifier	anc		724374	1					
ANR	724406	CFGEntryNode	ENTRY		724374		True				
ANR	724407	CFGExitNode	EXIT		724374		True				
ANR	724408	Symbol	anc -> left_anchor		724374						
ANR	724409	Symbol	reg		724374						
ANR	724410	Symbol	reg -> sub_anchor		724374						
ANR	724411	Symbol	anc		724374						
ANR	724412	Symbol	ANCHOR_END_LINE		724374						
ANR	724413	Symbol	ANCHOR_BEGIN_LINE		724374						
ANR	724414	Symbol	anc -> right_anchor		724374						
ANR	724415	Symbol	* reg		724374						
ANR	724416	Symbol	* anc		724374						
ANR	724417	DeclStmt									
ANR	724418	Decl							void	"void ( FILE * f , regex_t * reg )"	print_optimize_info
ANR	724419	Function	set_optimize_info_from_tree	4956:0:111847:113302							
ANR	724420	FunctionDef	"set_optimize_info_from_tree (Node * node , regex_t * reg , ScanEnv * scan_env)"		724419	0					
ANR	724421	CompoundStatement		4958:0:111931:113302	724419	0					
ANR	724422	IdentifierDeclStatement	int r ;	4960:2:111936:111941	724419	0	True				
ANR	724423	IdentifierDecl	r		724419	0					
ANR	724424	IdentifierDeclType	int		724419	0					
ANR	724425	Identifier	r		724419	1					
ANR	724426	IdentifierDeclStatement	NodeOptInfo opt ;	4961:2:111945:111960	724419	1	True				
ANR	724427	IdentifierDecl	opt		724419	0					
ANR	724428	IdentifierDeclType	NodeOptInfo		724419	0					
ANR	724429	Identifier	opt		724419	1					
ANR	724430	IdentifierDeclStatement	OptEnv env ;	4962:2:111964:111974	724419	2	True				
ANR	724431	IdentifierDecl	env		724419	0					
ANR	724432	IdentifierDeclType	OptEnv		724419	0					
ANR	724433	Identifier	env		724419	1					
ANR	724434	ExpressionStatement	env . enc = reg -> enc	4964:2:111979:112008	724419	3	True				
ANR	724435	AssignmentExpression	env . enc = reg -> enc		724419	0		=			
ANR	724436	MemberAccess	env . enc		724419	0					
ANR	724437	Identifier	env		724419	0					
ANR	724438	Identifier	enc		724419	1					
ANR	724439	PtrMemberAccess	reg -> enc		724419	1					
ANR	724440	Identifier	reg		724419	0					
ANR	724441	Identifier	enc		724419	1					
ANR	724442	ExpressionStatement	env . options = reg -> options	4965:2:112012:112045	724419	4	True				
ANR	724443	AssignmentExpression	env . options = reg -> options		724419	0		=			
ANR	724444	MemberAccess	env . options		724419	0					
ANR	724445	Identifier	env		724419	0					
ANR	724446	Identifier	options		724419	1					
ANR	724447	PtrMemberAccess	reg -> options		724419	1					
ANR	724448	Identifier	reg		724419	0					
ANR	724449	Identifier	options		724419	1					
ANR	724450	ExpressionStatement	env . case_fold_flag = reg -> case_fold_flag	4966:2:112049:112089	724419	5	True				
ANR	724451	AssignmentExpression	env . case_fold_flag = reg -> case_fold_flag		724419	0		=			
ANR	724452	MemberAccess	env . case_fold_flag		724419	0					
ANR	724453	Identifier	env		724419	0					
ANR	724454	Identifier	case_fold_flag		724419	1					
ANR	724455	PtrMemberAccess	reg -> case_fold_flag		724419	1					
ANR	724456	Identifier	reg		724419	0					
ANR	724457	Identifier	case_fold_flag		724419	1					
ANR	724458	ExpressionStatement	env . scan_env = scan_env	4967:2:112093:112118	724419	6	True				
ANR	724459	AssignmentExpression	env . scan_env = scan_env		724419	0		=			
ANR	724460	MemberAccess	env . scan_env		724419	0					
ANR	724461	Identifier	env		724419	0					
ANR	724462	Identifier	scan_env		724419	1					
ANR	724463	Identifier	scan_env		724419	1					
ANR	724464	ExpressionStatement	clear_mml ( & env . mmd )	4968:2:112122:112141	724419	7	True				
ANR	724465	CallExpression	clear_mml ( & env . mmd )		724419	0					
ANR	724466	Callee	clear_mml		724419	0					
ANR	724467	Identifier	clear_mml		724419	0					
ANR	724468	ArgumentList	& env . mmd		724419	1					
ANR	724469	Argument	& env . mmd		724419	0					
ANR	724470	UnaryOperationExpression	& env . mmd		724419	0					
ANR	724471	UnaryOperator	&		724419	0					
ANR	724472	MemberAccess	env . mmd		724419	1					
ANR	724473	Identifier	env		724419	0					
ANR	724474	Identifier	mmd		724419	1					
ANR	724475	ExpressionStatement	"r = optimize_node_left ( node , & opt , & env )"	4970:2:112146:112186	724419	8	True				
ANR	724476	AssignmentExpression	"r = optimize_node_left ( node , & opt , & env )"		724419	0		=			
ANR	724477	Identifier	r		724419	0					
ANR	724478	CallExpression	"optimize_node_left ( node , & opt , & env )"		724419	1					
ANR	724479	Callee	optimize_node_left		724419	0					
ANR	724480	Identifier	optimize_node_left		724419	0					
ANR	724481	ArgumentList	node		724419	1					
ANR	724482	Argument	node		724419	0					
ANR	724483	Identifier	node		724419	0					
ANR	724484	Argument	& opt		724419	1					
ANR	724485	UnaryOperationExpression	& opt		724419	0					
ANR	724486	UnaryOperator	&		724419	0					
ANR	724487	Identifier	opt		724419	1					
ANR	724488	Argument	& env		724419	2					
ANR	724489	UnaryOperationExpression	& env		724419	0					
ANR	724490	UnaryOperator	&		724419	0					
ANR	724491	Identifier	env		724419	1					
ANR	724492	IfStatement	if ( r )		724419	9					
ANR	724493	Condition	r	4971:6:112194:112194	724419	0	True				
ANR	724494	Identifier	r		724419	0					
ANR	724495	ReturnStatement	return r ;	4971:9:112197:112205	724419	1	True				
ANR	724496	Identifier	r		724419	0					
ANR	724497	ExpressionStatement	reg -> anchor = opt . anc . left_anchor & ( ANCHOR_BEGIN_BUF | ANCHOR_BEGIN_POSITION | ANCHOR_ANYCHAR_STAR | ANCHOR_ANYCHAR_STAR_ML )	4973:2:112210:112343	724419	10	True				
ANR	724498	AssignmentExpression	reg -> anchor = opt . anc . left_anchor & ( ANCHOR_BEGIN_BUF | ANCHOR_BEGIN_POSITION | ANCHOR_ANYCHAR_STAR | ANCHOR_ANYCHAR_STAR_ML )		724419	0		=			
ANR	724499	PtrMemberAccess	reg -> anchor		724419	0					
ANR	724500	Identifier	reg		724419	0					
ANR	724501	Identifier	anchor		724419	1					
ANR	724502	BitAndExpression	opt . anc . left_anchor & ( ANCHOR_BEGIN_BUF | ANCHOR_BEGIN_POSITION | ANCHOR_ANYCHAR_STAR | ANCHOR_ANYCHAR_STAR_ML )		724419	1		&			
ANR	724503	MemberAccess	opt . anc . left_anchor		724419	0					
ANR	724504	MemberAccess	opt . anc		724419	0					
ANR	724505	Identifier	opt		724419	0					
ANR	724506	Identifier	anc		724419	1					
ANR	724507	Identifier	left_anchor		724419	1					
ANR	724508	InclusiveOrExpression	ANCHOR_BEGIN_BUF | ANCHOR_BEGIN_POSITION | ANCHOR_ANYCHAR_STAR | ANCHOR_ANYCHAR_STAR_ML		724419	1		|			
ANR	724509	Identifier	ANCHOR_BEGIN_BUF		724419	0					
ANR	724510	InclusiveOrExpression	ANCHOR_BEGIN_POSITION | ANCHOR_ANYCHAR_STAR | ANCHOR_ANYCHAR_STAR_ML		724419	1		|			
ANR	724511	Identifier	ANCHOR_BEGIN_POSITION		724419	0					
ANR	724512	InclusiveOrExpression	ANCHOR_ANYCHAR_STAR | ANCHOR_ANYCHAR_STAR_ML		724419	1		|			
ANR	724513	Identifier	ANCHOR_ANYCHAR_STAR		724419	0					
ANR	724514	Identifier	ANCHOR_ANYCHAR_STAR_ML		724419	1					
ANR	724515	ExpressionStatement	reg -> anchor |= opt . anc . right_anchor & ( ANCHOR_END_BUF | ANCHOR_SEMI_END_BUF )	4976:2:112348:112424	724419	11	True				
ANR	724516	AssignmentExpression	reg -> anchor |= opt . anc . right_anchor & ( ANCHOR_END_BUF | ANCHOR_SEMI_END_BUF )		724419	0		|=			
ANR	724517	PtrMemberAccess	reg -> anchor		724419	0					
ANR	724518	Identifier	reg		724419	0					
ANR	724519	Identifier	anchor		724419	1					
ANR	724520	BitAndExpression	opt . anc . right_anchor & ( ANCHOR_END_BUF | ANCHOR_SEMI_END_BUF )		724419	1		&			
ANR	724521	MemberAccess	opt . anc . right_anchor		724419	0					
ANR	724522	MemberAccess	opt . anc		724419	0					
ANR	724523	Identifier	opt		724419	0					
ANR	724524	Identifier	anc		724419	1					
ANR	724525	Identifier	right_anchor		724419	1					
ANR	724526	InclusiveOrExpression	ANCHOR_END_BUF | ANCHOR_SEMI_END_BUF		724419	1		|			
ANR	724527	Identifier	ANCHOR_END_BUF		724419	0					
ANR	724528	Identifier	ANCHOR_SEMI_END_BUF		724419	1					
ANR	724529	IfStatement	if ( reg -> anchor & ( ANCHOR_END_BUF | ANCHOR_SEMI_END_BUF ) )		724419	12					
ANR	724530	Condition	reg -> anchor & ( ANCHOR_END_BUF | ANCHOR_SEMI_END_BUF )	4978:6:112433:112484	724419	0	True				
ANR	724531	BitAndExpression	reg -> anchor & ( ANCHOR_END_BUF | ANCHOR_SEMI_END_BUF )		724419	0		&			
ANR	724532	PtrMemberAccess	reg -> anchor		724419	0					
ANR	724533	Identifier	reg		724419	0					
ANR	724534	Identifier	anchor		724419	1					
ANR	724535	InclusiveOrExpression	ANCHOR_END_BUF | ANCHOR_SEMI_END_BUF		724419	1		|			
ANR	724536	Identifier	ANCHOR_END_BUF		724419	0					
ANR	724537	Identifier	ANCHOR_SEMI_END_BUF		724419	1					
ANR	724538	CompoundStatement		21:60:555:555	724419	1					
ANR	724539	ExpressionStatement	reg -> anchor_dmin = opt . len . min	4979:4:112493:112523	724419	0	True				
ANR	724540	AssignmentExpression	reg -> anchor_dmin = opt . len . min		724419	0		=			
ANR	724541	PtrMemberAccess	reg -> anchor_dmin		724419	0					
ANR	724542	Identifier	reg		724419	0					
ANR	724543	Identifier	anchor_dmin		724419	1					
ANR	724544	MemberAccess	opt . len . min		724419	1					
ANR	724545	MemberAccess	opt . len		724419	0					
ANR	724546	Identifier	opt		724419	0					
ANR	724547	Identifier	len		724419	1					
ANR	724548	Identifier	min		724419	1					
ANR	724549	ExpressionStatement	reg -> anchor_dmax = opt . len . max	4980:4:112529:112559	724419	1	True				
ANR	724550	AssignmentExpression	reg -> anchor_dmax = opt . len . max		724419	0		=			
ANR	724551	PtrMemberAccess	reg -> anchor_dmax		724419	0					
ANR	724552	Identifier	reg		724419	0					
ANR	724553	Identifier	anchor_dmax		724419	1					
ANR	724554	MemberAccess	opt . len . max		724419	1					
ANR	724555	MemberAccess	opt . len		724419	0					
ANR	724556	Identifier	opt		724419	0					
ANR	724557	Identifier	len		724419	1					
ANR	724558	Identifier	max		724419	1					
ANR	724559	IfStatement	if ( opt . exb . len > 0 || opt . exm . len > 0 )		724419	13					
ANR	724560	Condition	opt . exb . len > 0 || opt . exm . len > 0	4983:6:112572:112605	724419	0	True				
ANR	724561	OrExpression	opt . exb . len > 0 || opt . exm . len > 0		724419	0		||			
ANR	724562	RelationalExpression	opt . exb . len > 0		724419	0		>			
ANR	724563	MemberAccess	opt . exb . len		724419	0					
ANR	724564	MemberAccess	opt . exb		724419	0					
ANR	724565	Identifier	opt		724419	0					
ANR	724566	Identifier	exb		724419	1					
ANR	724567	Identifier	len		724419	1					
ANR	724568	PrimaryExpression	0		724419	1					
ANR	724569	RelationalExpression	opt . exm . len > 0		724419	1		>			
ANR	724570	MemberAccess	opt . exm . len		724419	0					
ANR	724571	MemberAccess	opt . exm		724419	0					
ANR	724572	Identifier	opt		724419	0					
ANR	724573	Identifier	exm		724419	1					
ANR	724574	Identifier	len		724419	1					
ANR	724575	PrimaryExpression	0		724419	1					
ANR	724576	CompoundStatement		26:42:676:676	724419	1					
ANR	724577	ExpressionStatement	"select_opt_exact_info ( reg -> enc , & opt . exb , & opt . exm )"	4984:4:112614:112665	724419	0	True				
ANR	724578	CallExpression	"select_opt_exact_info ( reg -> enc , & opt . exb , & opt . exm )"		724419	0					
ANR	724579	Callee	select_opt_exact_info		724419	0					
ANR	724580	Identifier	select_opt_exact_info		724419	0					
ANR	724581	ArgumentList	reg -> enc		724419	1					
ANR	724582	Argument	reg -> enc		724419	0					
ANR	724583	PtrMemberAccess	reg -> enc		724419	0					
ANR	724584	Identifier	reg		724419	0					
ANR	724585	Identifier	enc		724419	1					
ANR	724586	Argument	& opt . exb		724419	1					
ANR	724587	UnaryOperationExpression	& opt . exb		724419	0					
ANR	724588	UnaryOperator	&		724419	0					
ANR	724589	MemberAccess	opt . exb		724419	1					
ANR	724590	Identifier	opt		724419	0					
ANR	724591	Identifier	exb		724419	1					
ANR	724592	Argument	& opt . exm		724419	2					
ANR	724593	UnaryOperationExpression	& opt . exm		724419	0					
ANR	724594	UnaryOperator	&		724419	0					
ANR	724595	MemberAccess	opt . exm		724419	1					
ANR	724596	Identifier	opt		724419	0					
ANR	724597	Identifier	exm		724419	1					
ANR	724598	IfStatement	"if ( opt . map . value > 0 && comp_opt_exact_or_map_info ( & opt . exb , & opt . map ) > 0 )"		724419	1					
ANR	724599	Condition	"opt . map . value > 0 && comp_opt_exact_or_map_info ( & opt . exb , & opt . map ) > 0"	4985:8:112675:112746	724419	0	True				
ANR	724600	AndExpression	"opt . map . value > 0 && comp_opt_exact_or_map_info ( & opt . exb , & opt . map ) > 0"		724419	0		&&			
ANR	724601	RelationalExpression	opt . map . value > 0		724419	0		>			
ANR	724602	MemberAccess	opt . map . value		724419	0					
ANR	724603	MemberAccess	opt . map		724419	0					
ANR	724604	Identifier	opt		724419	0					
ANR	724605	Identifier	map		724419	1					
ANR	724606	Identifier	value		724419	1					
ANR	724607	PrimaryExpression	0		724419	1					
ANR	724608	RelationalExpression	"comp_opt_exact_or_map_info ( & opt . exb , & opt . map ) > 0"		724419	1		>			
ANR	724609	CallExpression	"comp_opt_exact_or_map_info ( & opt . exb , & opt . map )"		724419	0					
ANR	724610	Callee	comp_opt_exact_or_map_info		724419	0					
ANR	724611	Identifier	comp_opt_exact_or_map_info		724419	0					
ANR	724612	ArgumentList	& opt . exb		724419	1					
ANR	724613	Argument	& opt . exb		724419	0					
ANR	724614	UnaryOperationExpression	& opt . exb		724419	0					
ANR	724615	UnaryOperator	&		724419	0					
ANR	724616	MemberAccess	opt . exb		724419	1					
ANR	724617	Identifier	opt		724419	0					
ANR	724618	Identifier	exb		724419	1					
ANR	724619	Argument	& opt . map		724419	1					
ANR	724620	UnaryOperationExpression	& opt . map		724419	0					
ANR	724621	UnaryOperator	&		724419	0					
ANR	724622	MemberAccess	opt . map		724419	1					
ANR	724623	Identifier	opt		724419	0					
ANR	724624	Identifier	map		724419	1					
ANR	724625	PrimaryExpression	0		724419	1					
ANR	724626	CompoundStatement		29:53:817:817	724419	1					
ANR	724627	GotoStatement	goto set_map ;	4987:6:112757:112769	724419	0	True				
ANR	724628	Identifier	set_map		724419	0					
ANR	724629	ElseStatement	else		724419	0					
ANR	724630	CompoundStatement		32:9:854:854	724419	0					
ANR	724631	ExpressionStatement	"r = set_optimize_exact_info ( reg , & opt . exb )"	4990:6:112794:112836	724419	0	True				
ANR	724632	AssignmentExpression	"r = set_optimize_exact_info ( reg , & opt . exb )"		724419	0		=			
ANR	724633	Identifier	r		724419	0					
ANR	724634	CallExpression	"set_optimize_exact_info ( reg , & opt . exb )"		724419	1					
ANR	724635	Callee	set_optimize_exact_info		724419	0					
ANR	724636	Identifier	set_optimize_exact_info		724419	0					
ANR	724637	ArgumentList	reg		724419	1					
ANR	724638	Argument	reg		724419	0					
ANR	724639	Identifier	reg		724419	0					
ANR	724640	Argument	& opt . exb		724419	1					
ANR	724641	UnaryOperationExpression	& opt . exb		724419	0					
ANR	724642	UnaryOperator	&		724419	0					
ANR	724643	MemberAccess	opt . exb		724419	1					
ANR	724644	Identifier	opt		724419	0					
ANR	724645	Identifier	exb		724419	1					
ANR	724646	ExpressionStatement	"set_sub_anchor ( reg , & opt . exb . anc )"	4991:6:112844:112877	724419	1	True				
ANR	724647	CallExpression	"set_sub_anchor ( reg , & opt . exb . anc )"		724419	0					
ANR	724648	Callee	set_sub_anchor		724419	0					
ANR	724649	Identifier	set_sub_anchor		724419	0					
ANR	724650	ArgumentList	reg		724419	1					
ANR	724651	Argument	reg		724419	0					
ANR	724652	Identifier	reg		724419	0					
ANR	724653	Argument	& opt . exb . anc		724419	1					
ANR	724654	UnaryOperationExpression	& opt . exb . anc		724419	0					
ANR	724655	UnaryOperator	&		724419	0					
ANR	724656	MemberAccess	opt . exb . anc		724419	1					
ANR	724657	MemberAccess	opt . exb		724419	0					
ANR	724658	Identifier	opt		724419	0					
ANR	724659	Identifier	exb		724419	1					
ANR	724660	Identifier	anc		724419	1					
ANR	724661	ElseStatement	else		724419	0					
ANR	724662	IfStatement	if ( opt . map . value > 0 )		724419	0					
ANR	724663	Condition	opt . map . value > 0	4994:11:112900:112916	724419	0	True				
ANR	724664	RelationalExpression	opt . map . value > 0		724419	0		>			
ANR	724665	MemberAccess	opt . map . value		724419	0					
ANR	724666	MemberAccess	opt . map		724419	0					
ANR	724667	Identifier	opt		724419	0					
ANR	724668	Identifier	map		724419	1					
ANR	724669	Identifier	value		724419	1					
ANR	724670	PrimaryExpression	0		724419	1					
ANR	724671	CompoundStatement		37:30:987:987	724419	1					
ANR	724672	Label	set_map :	4995:2:112923:112930	724419	0	True				
ANR	724673	Identifier	set_map		724419	0					
ANR	724674	ExpressionStatement	"set_optimize_map_info ( reg , & opt . map )"	4996:4:112936:112972	724419	1	True				
ANR	724675	CallExpression	"set_optimize_map_info ( reg , & opt . map )"		724419	0					
ANR	724676	Callee	set_optimize_map_info		724419	0					
ANR	724677	Identifier	set_optimize_map_info		724419	0					
ANR	724678	ArgumentList	reg		724419	1					
ANR	724679	Argument	reg		724419	0					
ANR	724680	Identifier	reg		724419	0					
ANR	724681	Argument	& opt . map		724419	1					
ANR	724682	UnaryOperationExpression	& opt . map		724419	0					
ANR	724683	UnaryOperator	&		724419	0					
ANR	724684	MemberAccess	opt . map		724419	1					
ANR	724685	Identifier	opt		724419	0					
ANR	724686	Identifier	map		724419	1					
ANR	724687	ExpressionStatement	"set_sub_anchor ( reg , & opt . map . anc )"	4997:4:112978:113011	724419	2	True				
ANR	724688	CallExpression	"set_sub_anchor ( reg , & opt . map . anc )"		724419	0					
ANR	724689	Callee	set_sub_anchor		724419	0					
ANR	724690	Identifier	set_sub_anchor		724419	0					
ANR	724691	ArgumentList	reg		724419	1					
ANR	724692	Argument	reg		724419	0					
ANR	724693	Identifier	reg		724419	0					
ANR	724694	Argument	& opt . map . anc		724419	1					
ANR	724695	UnaryOperationExpression	& opt . map . anc		724419	0					
ANR	724696	UnaryOperator	&		724419	0					
ANR	724697	MemberAccess	opt . map . anc		724419	1					
ANR	724698	MemberAccess	opt . map		724419	0					
ANR	724699	Identifier	opt		724419	0					
ANR	724700	Identifier	map		724419	1					
ANR	724701	Identifier	anc		724419	1					
ANR	724702	ElseStatement	else		724419	0					
ANR	724703	CompoundStatement		42:7:1092:1092	724419	0					
ANR	724704	ExpressionStatement	reg -> sub_anchor |= opt . anc . left_anchor & ANCHOR_BEGIN_LINE	5000:4:113030:113088	724419	0	True				
ANR	724705	AssignmentExpression	reg -> sub_anchor |= opt . anc . left_anchor & ANCHOR_BEGIN_LINE		724419	0		|=			
ANR	724706	PtrMemberAccess	reg -> sub_anchor		724419	0					
ANR	724707	Identifier	reg		724419	0					
ANR	724708	Identifier	sub_anchor		724419	1					
ANR	724709	BitAndExpression	opt . anc . left_anchor & ANCHOR_BEGIN_LINE		724419	1		&			
ANR	724710	MemberAccess	opt . anc . left_anchor		724419	0					
ANR	724711	MemberAccess	opt . anc		724419	0					
ANR	724712	Identifier	opt		724419	0					
ANR	724713	Identifier	anc		724419	1					
ANR	724714	Identifier	left_anchor		724419	1					
ANR	724715	Identifier	ANCHOR_BEGIN_LINE		724419	1					
ANR	724716	IfStatement	if ( opt . len . max == 0 )		724419	1					
ANR	724717	Condition	opt . len . max == 0	5001:8:113098:113113	724419	0	True				
ANR	724718	EqualityExpression	opt . len . max == 0		724419	0		==			
ANR	724719	MemberAccess	opt . len . max		724419	0					
ANR	724720	MemberAccess	opt . len		724419	0					
ANR	724721	Identifier	opt		724419	0					
ANR	724722	Identifier	len		724419	1					
ANR	724723	Identifier	max		724419	1					
ANR	724724	PrimaryExpression	0		724419	1					
ANR	724725	ExpressionStatement	reg -> sub_anchor |= opt . anc . right_anchor & ANCHOR_END_LINE	5002:6:113122:113179	724419	1	True				
ANR	724726	AssignmentExpression	reg -> sub_anchor |= opt . anc . right_anchor & ANCHOR_END_LINE		724419	0		|=			
ANR	724727	PtrMemberAccess	reg -> sub_anchor		724419	0					
ANR	724728	Identifier	reg		724419	0					
ANR	724729	Identifier	sub_anchor		724419	1					
ANR	724730	BitAndExpression	opt . anc . right_anchor & ANCHOR_END_LINE		724419	1		&			
ANR	724731	MemberAccess	opt . anc . right_anchor		724419	0					
ANR	724732	MemberAccess	opt . anc		724419	0					
ANR	724733	Identifier	opt		724419	0					
ANR	724734	Identifier	anc		724419	1					
ANR	724735	Identifier	right_anchor		724419	1					
ANR	724736	Identifier	ANCHOR_END_LINE		724419	1					
ANR	724737	ExpressionStatement	"print_optimize_info ( stderr , reg )"	5006:2:113249:113281	724419	14	True				
ANR	724738	CallExpression	"print_optimize_info ( stderr , reg )"		724419	0					
ANR	724739	Callee	print_optimize_info		724419	0					
ANR	724740	Identifier	print_optimize_info		724419	0					
ANR	724741	ArgumentList	stderr		724419	1					
ANR	724742	Argument	stderr		724419	0					
ANR	724743	Identifier	stderr		724419	0					
ANR	724744	Argument	reg		724419	1					
ANR	724745	Identifier	reg		724419	0					
ANR	724746	ReturnStatement	return r ;	5008:2:113292:113300	724419	15	True				
ANR	724747	Identifier	r		724419	0					
ANR	724748	ReturnType	static int		724419	1					
ANR	724749	Identifier	set_optimize_info_from_tree		724419	2					
ANR	724750	ParameterList	"Node * node , regex_t * reg , ScanEnv * scan_env"		724419	3					
ANR	724751	Parameter	Node * node	4957:28:111886:111895	724419	0	True				
ANR	724752	ParameterType	Node *		724419	0					
ANR	724753	Identifier	node		724419	1					
ANR	724754	Parameter	regex_t * reg	4957:40:111898:111909	724419	1	True				
ANR	724755	ParameterType	regex_t *		724419	0					
ANR	724756	Identifier	reg		724419	1					
ANR	724757	Parameter	ScanEnv * scan_env	4957:54:111912:111928	724419	2	True				
ANR	724758	ParameterType	ScanEnv *		724419	0					
ANR	724759	Identifier	scan_env		724419	1					
ANR	724760	CFGEntryNode	ENTRY		724419		True				
ANR	724761	CFGExitNode	EXIT		724419		True				
ANR	724762	Symbol	ANCHOR_END_BUF		724419						
ANR	724763	Symbol	opt . anc		724419						
ANR	724764	Symbol	env . scan_env		724419						
ANR	724765	Symbol	ANCHOR_END_LINE		724419						
ANR	724766	Symbol	opt . map		724419						
ANR	724767	Symbol	opt . len . max		724419						
ANR	724768	Symbol	reg		724419						
ANR	724769	Symbol	reg -> anchor_dmax		724419						
ANR	724770	Symbol	& opt . map		724419						
ANR	724771	Symbol	reg -> options		724419						
ANR	724772	Symbol	opt . exb . len		724419						
ANR	724773	Symbol	& opt . map . anc		724419						
ANR	724774	Symbol	& opt		724419						
ANR	724775	Symbol	& opt . exb		724419						
ANR	724776	Symbol	ANCHOR_BEGIN_POSITION		724419						
ANR	724777	Symbol	reg -> anchor_dmin		724419						
ANR	724778	Symbol	stderr		724419						
ANR	724779	Symbol	env . options		724419						
ANR	724780	Symbol	reg -> enc		724419						
ANR	724781	Symbol	node		724419						
ANR	724782	Symbol	opt		724419						
ANR	724783	Symbol	opt . anc . right_anchor		724419						
ANR	724784	Symbol	ANCHOR_BEGIN_LINE		724419						
ANR	724785	Symbol	opt . len		724419						
ANR	724786	Symbol	ANCHOR_SEMI_END_BUF		724419						
ANR	724787	Symbol	reg -> anchor		724419						
ANR	724788	Symbol	ANCHOR_BEGIN_BUF		724419						
ANR	724789	Symbol	opt . exb		724419						
ANR	724790	Symbol	set_optimize_exact_info		724419						
ANR	724791	Symbol	opt . exm		724419						
ANR	724792	Symbol	& env . mmd		724419						
ANR	724793	Symbol	opt . map . value		724419						
ANR	724794	Symbol	& env		724419						
ANR	724795	Symbol	env . case_fold_flag		724419						
ANR	724796	Symbol	reg -> sub_anchor		724419						
ANR	724797	Symbol	& opt . exm		724419						
ANR	724798	Symbol	scan_env		724419						
ANR	724799	Symbol	& opt . exb . anc		724419						
ANR	724800	Symbol	ANCHOR_ANYCHAR_STAR_ML		724419						
ANR	724801	Symbol	comp_opt_exact_or_map_info		724419						
ANR	724802	Symbol	env . enc		724419						
ANR	724803	Symbol	opt . anc . left_anchor		724419						
ANR	724804	Symbol	env		724419						
ANR	724805	Symbol	opt . len . min		724419						
ANR	724806	Symbol	r		724419						
ANR	724807	Symbol	opt . exm . len		724419						
ANR	724808	Symbol	optimize_node_left		724419						
ANR	724809	Symbol	reg -> case_fold_flag		724419						
ANR	724810	Symbol	ANCHOR_ANYCHAR_STAR		724419						
ANR	724811	Symbol	* reg		724419						
ANR	724812	Function	clear_optimize_info	5011:0:113305:113656							
ANR	724813	FunctionDef	clear_optimize_info (regex_t * reg)		724812	0					
ANR	724814	CompoundStatement		5013:0:113351:113656	724812	0					
ANR	724815	ExpressionStatement	reg -> optimize = ONIG_OPTIMIZE_NONE	5014:2:113355:113394	724812	0	True				
ANR	724816	AssignmentExpression	reg -> optimize = ONIG_OPTIMIZE_NONE		724812	0		=			
ANR	724817	PtrMemberAccess	reg -> optimize		724812	0					
ANR	724818	Identifier	reg		724812	0					
ANR	724819	Identifier	optimize		724812	1					
ANR	724820	Identifier	ONIG_OPTIMIZE_NONE		724812	1					
ANR	724821	ExpressionStatement	reg -> anchor = 0	5015:2:113398:113420	724812	1	True				
ANR	724822	AssignmentExpression	reg -> anchor = 0		724812	0		=			
ANR	724823	PtrMemberAccess	reg -> anchor		724812	0					
ANR	724824	Identifier	reg		724812	0					
ANR	724825	Identifier	anchor		724812	1					
ANR	724826	PrimaryExpression	0		724812	1					
ANR	724827	ExpressionStatement	reg -> anchor_dmin = 0	5016:2:113424:113446	724812	2	True				
ANR	724828	AssignmentExpression	reg -> anchor_dmin = 0		724812	0		=			
ANR	724829	PtrMemberAccess	reg -> anchor_dmin		724812	0					
ANR	724830	Identifier	reg		724812	0					
ANR	724831	Identifier	anchor_dmin		724812	1					
ANR	724832	PrimaryExpression	0		724812	1					
ANR	724833	ExpressionStatement	reg -> anchor_dmax = 0	5017:2:113450:113472	724812	3	True				
ANR	724834	AssignmentExpression	reg -> anchor_dmax = 0		724812	0		=			
ANR	724835	PtrMemberAccess	reg -> anchor_dmax		724812	0					
ANR	724836	Identifier	reg		724812	0					
ANR	724837	Identifier	anchor_dmax		724812	1					
ANR	724838	PrimaryExpression	0		724812	1					
ANR	724839	ExpressionStatement	reg -> sub_anchor = 0	5018:2:113476:113498	724812	4	True				
ANR	724840	AssignmentExpression	reg -> sub_anchor = 0		724812	0		=			
ANR	724841	PtrMemberAccess	reg -> sub_anchor		724812	0					
ANR	724842	Identifier	reg		724812	0					
ANR	724843	Identifier	sub_anchor		724812	1					
ANR	724844	PrimaryExpression	0		724812	1					
ANR	724845	ExpressionStatement	reg -> exact_end = ( UChar * ) NULL	5019:2:113502:113536	724812	5	True				
ANR	724846	AssignmentExpression	reg -> exact_end = ( UChar * ) NULL		724812	0		=			
ANR	724847	PtrMemberAccess	reg -> exact_end		724812	0					
ANR	724848	Identifier	reg		724812	0					
ANR	724849	Identifier	exact_end		724812	1					
ANR	724850	CastExpression	( UChar * ) NULL		724812	1					
ANR	724851	CastTarget	UChar *		724812	0					
ANR	724852	Identifier	NULL		724812	1					
ANR	724853	ExpressionStatement	reg -> threshold_len = 0	5020:2:113540:113562	724812	6	True				
ANR	724854	AssignmentExpression	reg -> threshold_len = 0		724812	0		=			
ANR	724855	PtrMemberAccess	reg -> threshold_len		724812	0					
ANR	724856	Identifier	reg		724812	0					
ANR	724857	Identifier	threshold_len		724812	1					
ANR	724858	PrimaryExpression	0		724812	1					
ANR	724859	IfStatement	if ( IS_NOT_NULL ( reg -> exact ) )		724812	7					
ANR	724860	Condition	IS_NOT_NULL ( reg -> exact )	5021:6:113570:113592	724812	0	True				
ANR	724861	CallExpression	IS_NOT_NULL ( reg -> exact )		724812	0					
ANR	724862	Callee	IS_NOT_NULL		724812	0					
ANR	724863	Identifier	IS_NOT_NULL		724812	0					
ANR	724864	ArgumentList	reg -> exact		724812	1					
ANR	724865	Argument	reg -> exact		724812	0					
ANR	724866	PtrMemberAccess	reg -> exact		724812	0					
ANR	724867	Identifier	reg		724812	0					
ANR	724868	Identifier	exact		724812	1					
ANR	724869	CompoundStatement		9:31:243:243	724812	1					
ANR	724870	ExpressionStatement	xfree ( reg -> exact )	5022:4:113601:113618	724812	0	True				
ANR	724871	CallExpression	xfree ( reg -> exact )		724812	0					
ANR	724872	Callee	xfree		724812	0					
ANR	724873	Identifier	xfree		724812	0					
ANR	724874	ArgumentList	reg -> exact		724812	1					
ANR	724875	Argument	reg -> exact		724812	0					
ANR	724876	PtrMemberAccess	reg -> exact		724812	0					
ANR	724877	Identifier	reg		724812	0					
ANR	724878	Identifier	exact		724812	1					
ANR	724879	ExpressionStatement	reg -> exact = ( UChar * ) NULL	5023:4:113624:113650	724812	1	True				
ANR	724880	AssignmentExpression	reg -> exact = ( UChar * ) NULL		724812	0		=			
ANR	724881	PtrMemberAccess	reg -> exact		724812	0					
ANR	724882	Identifier	reg		724812	0					
ANR	724883	Identifier	exact		724812	1					
ANR	724884	CastExpression	( UChar * ) NULL		724812	1					
ANR	724885	CastTarget	UChar *		724812	0					
ANR	724886	Identifier	NULL		724812	1					
ANR	724887	ReturnType	static void		724812	1					
ANR	724888	Identifier	clear_optimize_info		724812	2					
ANR	724889	ParameterList	regex_t * reg		724812	3					
ANR	724890	Parameter	regex_t * reg	5012:20:113337:113348	724812	0	True				
ANR	724891	ParameterType	regex_t *		724812	0					
ANR	724892	Identifier	reg		724812	1					
ANR	724893	CFGEntryNode	ENTRY		724812		True				
ANR	724894	CFGExitNode	EXIT		724812		True				
ANR	724895	Symbol	IS_NOT_NULL		724812						
ANR	724896	Symbol	reg -> anchor		724812						
ANR	724897	Symbol	NULL		724812						
ANR	724898	Symbol	reg -> anchor_dmin		724812						
ANR	724899	Symbol	reg -> threshold_len		724812						
ANR	724900	Symbol	reg -> exact_end		724812						
ANR	724901	Symbol	reg		724812						
ANR	724902	Symbol	reg -> anchor_dmax		724812						
ANR	724903	Symbol	reg -> optimize		724812						
ANR	724904	Symbol	reg -> sub_anchor		724812						
ANR	724905	Symbol	reg -> exact		724812						
ANR	724906	Symbol	ONIG_OPTIMIZE_NONE		724812						
ANR	724907	Symbol	* reg		724812						
ANR	724908	Function	print_enc_string	5029:0:113678:114230							
ANR	724909	FunctionDef	"print_enc_string (FILE * fp , OnigEncoding enc , const UChar * s , const UChar * end)"		724908	0					
ANR	724910	CompoundStatement		5031:0:113777:114230	724908	0					
ANR	724911	ExpressionStatement	"fprintf ( fp , ""\\nPATTERN: /"" )"	5032:2:113781:113808	724908	0	True				
ANR	724912	CallExpression	"fprintf ( fp , ""\\nPATTERN: /"" )"		724908	0					
ANR	724913	Callee	fprintf		724908	0					
ANR	724914	Identifier	fprintf		724908	0					
ANR	724915	ArgumentList	fp		724908	1					
ANR	724916	Argument	fp		724908	0					
ANR	724917	Identifier	fp		724908	0					
ANR	724918	Argument	"""\\nPATTERN: /"""		724908	1					
ANR	724919	PrimaryExpression	"""\\nPATTERN: /"""		724908	0					
ANR	724920	IfStatement	if ( ONIGENC_MBC_MINLEN ( enc ) > 1 )		724908	1					
ANR	724921	Condition	ONIGENC_MBC_MINLEN ( enc ) > 1	5034:6:113817:113843	724908	0	True				
ANR	724922	RelationalExpression	ONIGENC_MBC_MINLEN ( enc ) > 1		724908	0		>			
ANR	724923	CallExpression	ONIGENC_MBC_MINLEN ( enc )		724908	0					
ANR	724924	Callee	ONIGENC_MBC_MINLEN		724908	0					
ANR	724925	Identifier	ONIGENC_MBC_MINLEN		724908	0					
ANR	724926	ArgumentList	enc		724908	1					
ANR	724927	Argument	enc		724908	0					
ANR	724928	Identifier	enc		724908	0					
ANR	724929	PrimaryExpression	1		724908	1					
ANR	724930	CompoundStatement		6:4:94:112	724908	1					
ANR	724931	IdentifierDeclStatement	const UChar * p ;	5035:4:113852:113866	724908	0	True				
ANR	724932	IdentifierDecl	* p		724908	0					
ANR	724933	IdentifierDeclType	const UChar *		724908	0					
ANR	724934	Identifier	p		724908	1					
ANR	724935	IdentifierDeclStatement	OnigCodePoint code ;	5036:4:113872:113890	724908	1	True				
ANR	724936	IdentifierDecl	code		724908	0					
ANR	724937	IdentifierDeclType	OnigCodePoint		724908	0					
ANR	724938	Identifier	code		724908	1					
ANR	724939	ExpressionStatement	p = s	5038:4:113897:113902	724908	2	True				
ANR	724940	AssignmentExpression	p = s		724908	0		=			
ANR	724941	Identifier	p		724908	0					
ANR	724942	Identifier	s		724908	1					
ANR	724943	WhileStatement	while ( p < end )		724908	3					
ANR	724944	Condition	p < end	5039:11:113915:113921	724908	0	True				
ANR	724945	RelationalExpression	p < end		724908	0		<			
ANR	724946	Identifier	p		724908	0					
ANR	724947	Identifier	end		724908	1					
ANR	724948	CompoundStatement		9:20:146:146	724908	1					
ANR	724949	ExpressionStatement	"code = ONIGENC_MBC_TO_CODE ( enc , p , end )"	5040:6:113932:113971	724908	0	True				
ANR	724950	AssignmentExpression	"code = ONIGENC_MBC_TO_CODE ( enc , p , end )"		724908	0		=			
ANR	724951	Identifier	code		724908	0					
ANR	724952	CallExpression	"ONIGENC_MBC_TO_CODE ( enc , p , end )"		724908	1					
ANR	724953	Callee	ONIGENC_MBC_TO_CODE		724908	0					
ANR	724954	Identifier	ONIGENC_MBC_TO_CODE		724908	0					
ANR	724955	ArgumentList	enc		724908	1					
ANR	724956	Argument	enc		724908	0					
ANR	724957	Identifier	enc		724908	0					
ANR	724958	Argument	p		724908	1					
ANR	724959	Identifier	p		724908	0					
ANR	724960	Argument	end		724908	2					
ANR	724961	Identifier	end		724908	0					
ANR	724962	IfStatement	if ( code >= 0x80 )		724908	1					
ANR	724963	Condition	code >= 0x80	5041:10:113983:113994	724908	0	True				
ANR	724964	RelationalExpression	code >= 0x80		724908	0		>=			
ANR	724965	Identifier	code		724908	0					
ANR	724966	PrimaryExpression	0x80		724908	1					
ANR	724967	CompoundStatement		11:24:219:219	724908	1					
ANR	724968	ExpressionStatement	"fprintf ( fp , "" 0x%04x "" , ( int ) code )"	5042:1:114000:114035	724908	0	True				
ANR	724969	CallExpression	"fprintf ( fp , "" 0x%04x "" , ( int ) code )"		724908	0					
ANR	724970	Callee	fprintf		724908	0					
ANR	724971	Identifier	fprintf		724908	0					
ANR	724972	ArgumentList	fp		724908	1					
ANR	724973	Argument	fp		724908	0					
ANR	724974	Identifier	fp		724908	0					
ANR	724975	Argument	""" 0x%04x """		724908	1					
ANR	724976	PrimaryExpression	""" 0x%04x """		724908	0					
ANR	724977	Argument	( int ) code		724908	2					
ANR	724978	CastExpression	( int ) code		724908	0					
ANR	724979	CastTarget	int		724908	0					
ANR	724980	Identifier	code		724908	1					
ANR	724981	ElseStatement	else		724908	0					
ANR	724982	CompoundStatement		14:11:278:278	724908	0					
ANR	724983	ExpressionStatement	"fputc ( ( int ) code , fp )"	5045:1:114059:114080	724908	0	True				
ANR	724984	CallExpression	"fputc ( ( int ) code , fp )"		724908	0					
ANR	724985	Callee	fputc		724908	0					
ANR	724986	Identifier	fputc		724908	0					
ANR	724987	ArgumentList	( int ) code		724908	1					
ANR	724988	Argument	( int ) code		724908	0					
ANR	724989	CastExpression	( int ) code		724908	0					
ANR	724990	CastTarget	int		724908	0					
ANR	724991	Identifier	code		724908	1					
ANR	724992	Argument	fp		724908	1					
ANR	724993	Identifier	fp		724908	0					
ANR	724994	ExpressionStatement	"p += enclen ( enc , p )"	5048:6:114097:114116	724908	2	True				
ANR	724995	AssignmentExpression	"p += enclen ( enc , p )"		724908	0		+=			
ANR	724996	Identifier	p		724908	0					
ANR	724997	CallExpression	"enclen ( enc , p )"		724908	1					
ANR	724998	Callee	enclen		724908	0					
ANR	724999	Identifier	enclen		724908	0					
ANR	725000	ArgumentList	enc		724908	1					
ANR	725001	Argument	enc		724908	0					
ANR	725002	Identifier	enc		724908	0					
ANR	725003	Argument	p		724908	1					
ANR	725004	Identifier	p		724908	0					
ANR	725005	ElseStatement	else		724908	0					
ANR	725006	CompoundStatement		21:7:357:357	724908	0					
ANR	725007	WhileStatement	while ( s < end )		724908	0					
ANR	725008	Condition	s < end	5052:11:114148:114154	724908	0	True				
ANR	725009	RelationalExpression	s < end		724908	0		<			
ANR	725010	Identifier	s		724908	0					
ANR	725011	Identifier	end		724908	1					
ANR	725012	CompoundStatement		22:20:379:379	724908	1					
ANR	725013	ExpressionStatement	"fputc ( ( int ) * s , fp )"	5053:6:114165:114184	724908	0	True				
ANR	725014	CallExpression	"fputc ( ( int ) * s , fp )"		724908	0					
ANR	725015	Callee	fputc		724908	0					
ANR	725016	Identifier	fputc		724908	0					
ANR	725017	ArgumentList	( int ) * s		724908	1					
ANR	725018	Argument	( int ) * s		724908	0					
ANR	725019	CastExpression	( int ) * s		724908	0					
ANR	725020	CastTarget	int		724908	0					
ANR	725021	UnaryOperationExpression	* s		724908	1					
ANR	725022	UnaryOperator	*		724908	0					
ANR	725023	Identifier	s		724908	1					
ANR	725024	Argument	fp		724908	1					
ANR	725025	Identifier	fp		724908	0					
ANR	725026	ExpressionStatement	s ++	5054:6:114192:114195	724908	1	True				
ANR	725027	PostIncDecOperationExpression	s ++		724908	0					
ANR	725028	Identifier	s		724908	0					
ANR	725029	IncDec	++		724908	1					
ANR	725030	ExpressionStatement	"fprintf ( fp , ""/\\n"" )"	5058:2:114210:114228	724908	2	True				
ANR	725031	CallExpression	"fprintf ( fp , ""/\\n"" )"		724908	0					
ANR	725032	Callee	fprintf		724908	0					
ANR	725033	Identifier	fprintf		724908	0					
ANR	725034	ArgumentList	fp		724908	1					
ANR	725035	Argument	fp		724908	0					
ANR	725036	Identifier	fp		724908	0					
ANR	725037	Argument	"""/\\n"""		724908	1					
ANR	725038	PrimaryExpression	"""/\\n"""		724908	0					
ANR	725039	ReturnType	static void		724908	1					
ANR	725040	Identifier	print_enc_string		724908	2					
ANR	725041	ParameterList	"FILE * fp , OnigEncoding enc , const UChar * s , const UChar * end"		724908	3					
ANR	725042	Parameter	FILE * fp	5029:29:113707:113714	724908	0	True				
ANR	725043	ParameterType	FILE *		724908	0					
ANR	725044	Identifier	fp		724908	1					
ANR	725045	Parameter	OnigEncoding enc	5029:39:113717:113732	724908	1	True				
ANR	725046	ParameterType	OnigEncoding		724908	0					
ANR	725047	Identifier	enc		724908	1					
ANR	725048	Parameter	const UChar * s	5030:8:113743:113756	724908	2	True				
ANR	725049	ParameterType	const UChar *		724908	0					
ANR	725050	Identifier	s		724908	1					
ANR	725051	Parameter	const UChar * end	5030:24:113759:113774	724908	3	True				
ANR	725052	ParameterType	const UChar *		724908	0					
ANR	725053	Identifier	end		724908	1					
ANR	725054	CFGEntryNode	ENTRY		724908		True				
ANR	725055	CFGExitNode	EXIT		724908		True				
ANR	725056	Symbol	p		724908						
ANR	725057	Symbol	s		724908						
ANR	725058	Symbol	code		724908						
ANR	725059	Symbol	ONIGENC_MBC_MINLEN		724908						
ANR	725060	Symbol	fp		724908						
ANR	725061	Symbol	end		724908						
ANR	725062	Symbol	enc		724908						
ANR	725063	Symbol	enclen		724908						
ANR	725064	Symbol	* s		724908						
ANR	725065	Symbol	ONIGENC_MBC_TO_CODE		724908						
ANR	725066	Function	print_distance_range	5061:0:114233:114508							
ANR	725067	FunctionDef	"print_distance_range (FILE * f , OnigDistance a , OnigDistance b)"		725066	0					
ANR	725068	CompoundStatement		5063:0:114307:114508	725066	0					
ANR	725069	IfStatement	if ( a == ONIG_INFINITE_DISTANCE )		725066	0					
ANR	725070	Condition	a == ONIG_INFINITE_DISTANCE	5064:6:114315:114341	725066	0	True				
ANR	725071	EqualityExpression	a == ONIG_INFINITE_DISTANCE		725066	0		==			
ANR	725072	Identifier	a		725066	0					
ANR	725073	Identifier	ONIG_INFINITE_DISTANCE		725066	1					
ANR	725074	ExpressionStatement	"fputs ( ""inf"" , f )"	5065:4:114348:114363	725066	1	True				
ANR	725075	CallExpression	"fputs ( ""inf"" , f )"		725066	0					
ANR	725076	Callee	fputs		725066	0					
ANR	725077	Identifier	fputs		725066	0					
ANR	725078	ArgumentList	"""inf"""		725066	1					
ANR	725079	Argument	"""inf"""		725066	0					
ANR	725080	PrimaryExpression	"""inf"""		725066	0					
ANR	725081	Argument	f		725066	1					
ANR	725082	Identifier	f		725066	0					
ANR	725083	ElseStatement	else		725066	0					
ANR	725084	ExpressionStatement	"fprintf ( f , ""(%u)"" , a )"	5067:4:114376:114397	725066	0	True				
ANR	725085	CallExpression	"fprintf ( f , ""(%u)"" , a )"		725066	0					
ANR	725086	Callee	fprintf		725066	0					
ANR	725087	Identifier	fprintf		725066	0					
ANR	725088	ArgumentList	f		725066	1					
ANR	725089	Argument	f		725066	0					
ANR	725090	Identifier	f		725066	0					
ANR	725091	Argument	"""(%u)"""		725066	1					
ANR	725092	PrimaryExpression	"""(%u)"""		725066	0					
ANR	725093	Argument	a		725066	2					
ANR	725094	Identifier	a		725066	0					
ANR	725095	ExpressionStatement	"fputs ( ""-"" , f )"	5069:2:114402:114415	725066	1	True				
ANR	725096	CallExpression	"fputs ( ""-"" , f )"		725066	0					
ANR	725097	Callee	fputs		725066	0					
ANR	725098	Identifier	fputs		725066	0					
ANR	725099	ArgumentList	"""-"""		725066	1					
ANR	725100	Argument	"""-"""		725066	0					
ANR	725101	PrimaryExpression	"""-"""		725066	0					
ANR	725102	Argument	f		725066	1					
ANR	725103	Identifier	f		725066	0					
ANR	725104	IfStatement	if ( b == ONIG_INFINITE_DISTANCE )		725066	2					
ANR	725105	Condition	b == ONIG_INFINITE_DISTANCE	5071:6:114424:114450	725066	0	True				
ANR	725106	EqualityExpression	b == ONIG_INFINITE_DISTANCE		725066	0		==			
ANR	725107	Identifier	b		725066	0					
ANR	725108	Identifier	ONIG_INFINITE_DISTANCE		725066	1					
ANR	725109	ExpressionStatement	"fputs ( ""inf"" , f )"	5072:4:114457:114472	725066	1	True				
ANR	725110	CallExpression	"fputs ( ""inf"" , f )"		725066	0					
ANR	725111	Callee	fputs		725066	0					
ANR	725112	Identifier	fputs		725066	0					
ANR	725113	ArgumentList	"""inf"""		725066	1					
ANR	725114	Argument	"""inf"""		725066	0					
ANR	725115	PrimaryExpression	"""inf"""		725066	0					
ANR	725116	Argument	f		725066	1					
ANR	725117	Identifier	f		725066	0					
ANR	725118	ElseStatement	else		725066	0					
ANR	725119	ExpressionStatement	"fprintf ( f , ""(%u)"" , b )"	5074:4:114485:114506	725066	0	True				
ANR	725120	CallExpression	"fprintf ( f , ""(%u)"" , b )"		725066	0					
ANR	725121	Callee	fprintf		725066	0					
ANR	725122	Identifier	fprintf		725066	0					
ANR	725123	ArgumentList	f		725066	1					
ANR	725124	Argument	f		725066	0					
ANR	725125	Identifier	f		725066	0					
ANR	725126	Argument	"""(%u)"""		725066	1					
ANR	725127	PrimaryExpression	"""(%u)"""		725066	0					
ANR	725128	Argument	b		725066	2					
ANR	725129	Identifier	b		725066	0					
ANR	725130	ReturnType	static void		725066	1					
ANR	725131	Identifier	print_distance_range		725066	2					
ANR	725132	ParameterList	"FILE * f , OnigDistance a , OnigDistance b"		725066	3					
ANR	725133	Parameter	FILE * f	5062:21:114266:114272	725066	0	True				
ANR	725134	ParameterType	FILE *		725066	0					
ANR	725135	Identifier	f		725066	1					
ANR	725136	Parameter	OnigDistance a	5062:30:114275:114288	725066	1	True				
ANR	725137	ParameterType	OnigDistance		725066	0					
ANR	725138	Identifier	a		725066	1					
ANR	725139	Parameter	OnigDistance b	5062:46:114291:114304	725066	2	True				
ANR	725140	ParameterType	OnigDistance		725066	0					
ANR	725141	Identifier	b		725066	1					
ANR	725142	CFGEntryNode	ENTRY		725066		True				
ANR	725143	CFGExitNode	EXIT		725066		True				
ANR	725144	Symbol	a		725066						
ANR	725145	Symbol	ONIG_INFINITE_DISTANCE		725066						
ANR	725146	Symbol	b		725066						
ANR	725147	Symbol	f		725066						
ANR	725148	Function	print_anchor	5077:0:114511:115462							
ANR	725149	FunctionDef	"print_anchor (FILE * f , int anchor)"		725148	0					
ANR	725150	CompoundStatement		5079:0:114557:115462	725148	0					
ANR	725151	IdentifierDeclStatement	int q = 0 ;	5080:2:114561:114570	725148	0	True				
ANR	725152	IdentifierDecl	q = 0		725148	0					
ANR	725153	IdentifierDeclType	int		725148	0					
ANR	725154	Identifier	q		725148	1					
ANR	725155	AssignmentExpression	q = 0		725148	2		=			
ANR	725156	Identifier	q		725148	0					
ANR	725157	PrimaryExpression	0		725148	1					
ANR	725158	ExpressionStatement	"fprintf ( f , ""["" )"	5082:2:114575:114590	725148	1	True				
ANR	725159	CallExpression	"fprintf ( f , ""["" )"		725148	0					
ANR	725160	Callee	fprintf		725148	0					
ANR	725161	Identifier	fprintf		725148	0					
ANR	725162	ArgumentList	f		725148	1					
ANR	725163	Argument	f		725148	0					
ANR	725164	Identifier	f		725148	0					
ANR	725165	Argument	"""["""		725148	1					
ANR	725166	PrimaryExpression	"""["""		725148	0					
ANR	725167	IfStatement	if ( anchor & ANCHOR_BEGIN_BUF )		725148	2					
ANR	725168	Condition	anchor & ANCHOR_BEGIN_BUF	5084:6:114599:114623	725148	0	True				
ANR	725169	BitAndExpression	anchor & ANCHOR_BEGIN_BUF		725148	0		&			
ANR	725170	Identifier	anchor		725148	0					
ANR	725171	Identifier	ANCHOR_BEGIN_BUF		725148	1					
ANR	725172	CompoundStatement		6:33:68:68	725148	1					
ANR	725173	ExpressionStatement	"fprintf ( f , ""begin-buf"" )"	5085:4:114632:114655	725148	0	True				
ANR	725174	CallExpression	"fprintf ( f , ""begin-buf"" )"		725148	0					
ANR	725175	Callee	fprintf		725148	0					
ANR	725176	Identifier	fprintf		725148	0					
ANR	725177	ArgumentList	f		725148	1					
ANR	725178	Argument	f		725148	0					
ANR	725179	Identifier	f		725148	0					
ANR	725180	Argument	"""begin-buf"""		725148	1					
ANR	725181	PrimaryExpression	"""begin-buf"""		725148	0					
ANR	725182	ExpressionStatement	q = 1	5086:4:114661:114666	725148	1	True				
ANR	725183	AssignmentExpression	q = 1		725148	0		=			
ANR	725184	Identifier	q		725148	0					
ANR	725185	PrimaryExpression	1		725148	1					
ANR	725186	IfStatement	if ( anchor & ANCHOR_BEGIN_LINE )		725148	3					
ANR	725187	Condition	anchor & ANCHOR_BEGIN_LINE	5088:6:114678:114703	725148	0	True				
ANR	725188	BitAndExpression	anchor & ANCHOR_BEGIN_LINE		725148	0		&			
ANR	725189	Identifier	anchor		725148	0					
ANR	725190	Identifier	ANCHOR_BEGIN_LINE		725148	1					
ANR	725191	CompoundStatement		10:34:148:148	725148	1					
ANR	725192	IfStatement	if ( q )		725148	0					
ANR	725193	Condition	q	5089:8:114716:114716	725148	0	True				
ANR	725194	Identifier	q		725148	0					
ANR	725195	ExpressionStatement	"fprintf ( f , "", "" )"	5089:11:114719:114735	725148	1	True				
ANR	725196	CallExpression	"fprintf ( f , "", "" )"		725148	0					
ANR	725197	Callee	fprintf		725148	0					
ANR	725198	Identifier	fprintf		725148	0					
ANR	725199	ArgumentList	f		725148	1					
ANR	725200	Argument	f		725148	0					
ANR	725201	Identifier	f		725148	0					
ANR	725202	Argument	""", """		725148	1					
ANR	725203	PrimaryExpression	""", """		725148	0					
ANR	725204	ExpressionStatement	q = 1	5090:4:114741:114746	725148	1	True				
ANR	725205	AssignmentExpression	q = 1		725148	0		=			
ANR	725206	Identifier	q		725148	0					
ANR	725207	PrimaryExpression	1		725148	1					
ANR	725208	ExpressionStatement	"fprintf ( f , ""begin-line"" )"	5091:4:114752:114776	725148	2	True				
ANR	725209	CallExpression	"fprintf ( f , ""begin-line"" )"		725148	0					
ANR	725210	Callee	fprintf		725148	0					
ANR	725211	Identifier	fprintf		725148	0					
ANR	725212	ArgumentList	f		725148	1					
ANR	725213	Argument	f		725148	0					
ANR	725214	Identifier	f		725148	0					
ANR	725215	Argument	"""begin-line"""		725148	1					
ANR	725216	PrimaryExpression	"""begin-line"""		725148	0					
ANR	725217	IfStatement	if ( anchor & ANCHOR_BEGIN_POSITION )		725148	4					
ANR	725218	Condition	anchor & ANCHOR_BEGIN_POSITION	5093:6:114788:114817	725148	0	True				
ANR	725219	BitAndExpression	anchor & ANCHOR_BEGIN_POSITION		725148	0		&			
ANR	725220	Identifier	anchor		725148	0					
ANR	725221	Identifier	ANCHOR_BEGIN_POSITION		725148	1					
ANR	725222	CompoundStatement		15:38:262:262	725148	1					
ANR	725223	IfStatement	if ( q )		725148	0					
ANR	725224	Condition	q	5094:8:114830:114830	725148	0	True				
ANR	725225	Identifier	q		725148	0					
ANR	725226	ExpressionStatement	"fprintf ( f , "", "" )"	5094:11:114833:114849	725148	1	True				
ANR	725227	CallExpression	"fprintf ( f , "", "" )"		725148	0					
ANR	725228	Callee	fprintf		725148	0					
ANR	725229	Identifier	fprintf		725148	0					
ANR	725230	ArgumentList	f		725148	1					
ANR	725231	Argument	f		725148	0					
ANR	725232	Identifier	f		725148	0					
ANR	725233	Argument	""", """		725148	1					
ANR	725234	PrimaryExpression	""", """		725148	0					
ANR	725235	ExpressionStatement	q = 1	5095:4:114855:114860	725148	1	True				
ANR	725236	AssignmentExpression	q = 1		725148	0		=			
ANR	725237	Identifier	q		725148	0					
ANR	725238	PrimaryExpression	1		725148	1					
ANR	725239	ExpressionStatement	"fprintf ( f , ""begin-pos"" )"	5096:4:114866:114889	725148	2	True				
ANR	725240	CallExpression	"fprintf ( f , ""begin-pos"" )"		725148	0					
ANR	725241	Callee	fprintf		725148	0					
ANR	725242	Identifier	fprintf		725148	0					
ANR	725243	ArgumentList	f		725148	1					
ANR	725244	Argument	f		725148	0					
ANR	725245	Identifier	f		725148	0					
ANR	725246	Argument	"""begin-pos"""		725148	1					
ANR	725247	PrimaryExpression	"""begin-pos"""		725148	0					
ANR	725248	IfStatement	if ( anchor & ANCHOR_END_BUF )		725148	5					
ANR	725249	Condition	anchor & ANCHOR_END_BUF	5098:6:114901:114923	725148	0	True				
ANR	725250	BitAndExpression	anchor & ANCHOR_END_BUF		725148	0		&			
ANR	725251	Identifier	anchor		725148	0					
ANR	725252	Identifier	ANCHOR_END_BUF		725148	1					
ANR	725253	CompoundStatement		20:31:368:368	725148	1					
ANR	725254	IfStatement	if ( q )		725148	0					
ANR	725255	Condition	q	5099:8:114936:114936	725148	0	True				
ANR	725256	Identifier	q		725148	0					
ANR	725257	ExpressionStatement	"fprintf ( f , "", "" )"	5099:11:114939:114955	725148	1	True				
ANR	725258	CallExpression	"fprintf ( f , "", "" )"		725148	0					
ANR	725259	Callee	fprintf		725148	0					
ANR	725260	Identifier	fprintf		725148	0					
ANR	725261	ArgumentList	f		725148	1					
ANR	725262	Argument	f		725148	0					
ANR	725263	Identifier	f		725148	0					
ANR	725264	Argument	""", """		725148	1					
ANR	725265	PrimaryExpression	""", """		725148	0					
ANR	725266	ExpressionStatement	q = 1	5100:4:114961:114966	725148	1	True				
ANR	725267	AssignmentExpression	q = 1		725148	0		=			
ANR	725268	Identifier	q		725148	0					
ANR	725269	PrimaryExpression	1		725148	1					
ANR	725270	ExpressionStatement	"fprintf ( f , ""end-buf"" )"	5101:4:114972:114993	725148	2	True				
ANR	725271	CallExpression	"fprintf ( f , ""end-buf"" )"		725148	0					
ANR	725272	Callee	fprintf		725148	0					
ANR	725273	Identifier	fprintf		725148	0					
ANR	725274	ArgumentList	f		725148	1					
ANR	725275	Argument	f		725148	0					
ANR	725276	Identifier	f		725148	0					
ANR	725277	Argument	"""end-buf"""		725148	1					
ANR	725278	PrimaryExpression	"""end-buf"""		725148	0					
ANR	725279	IfStatement	if ( anchor & ANCHOR_SEMI_END_BUF )		725148	6					
ANR	725280	Condition	anchor & ANCHOR_SEMI_END_BUF	5103:6:115005:115032	725148	0	True				
ANR	725281	BitAndExpression	anchor & ANCHOR_SEMI_END_BUF		725148	0		&			
ANR	725282	Identifier	anchor		725148	0					
ANR	725283	Identifier	ANCHOR_SEMI_END_BUF		725148	1					
ANR	725284	CompoundStatement		25:36:477:477	725148	1					
ANR	725285	IfStatement	if ( q )		725148	0					
ANR	725286	Condition	q	5104:8:115045:115045	725148	0	True				
ANR	725287	Identifier	q		725148	0					
ANR	725288	ExpressionStatement	"fprintf ( f , "", "" )"	5104:11:115048:115064	725148	1	True				
ANR	725289	CallExpression	"fprintf ( f , "", "" )"		725148	0					
ANR	725290	Callee	fprintf		725148	0					
ANR	725291	Identifier	fprintf		725148	0					
ANR	725292	ArgumentList	f		725148	1					
ANR	725293	Argument	f		725148	0					
ANR	725294	Identifier	f		725148	0					
ANR	725295	Argument	""", """		725148	1					
ANR	725296	PrimaryExpression	""", """		725148	0					
ANR	725297	ExpressionStatement	q = 1	5105:4:115070:115075	725148	1	True				
ANR	725298	AssignmentExpression	q = 1		725148	0		=			
ANR	725299	Identifier	q		725148	0					
ANR	725300	PrimaryExpression	1		725148	1					
ANR	725301	ExpressionStatement	"fprintf ( f , ""semi-end-buf"" )"	5106:4:115081:115107	725148	2	True				
ANR	725302	CallExpression	"fprintf ( f , ""semi-end-buf"" )"		725148	0					
ANR	725303	Callee	fprintf		725148	0					
ANR	725304	Identifier	fprintf		725148	0					
ANR	725305	ArgumentList	f		725148	1					
ANR	725306	Argument	f		725148	0					
ANR	725307	Identifier	f		725148	0					
ANR	725308	Argument	"""semi-end-buf"""		725148	1					
ANR	725309	PrimaryExpression	"""semi-end-buf"""		725148	0					
ANR	725310	IfStatement	if ( anchor & ANCHOR_END_LINE )		725148	7					
ANR	725311	Condition	anchor & ANCHOR_END_LINE	5108:6:115119:115142	725148	0	True				
ANR	725312	BitAndExpression	anchor & ANCHOR_END_LINE		725148	0		&			
ANR	725313	Identifier	anchor		725148	0					
ANR	725314	Identifier	ANCHOR_END_LINE		725148	1					
ANR	725315	CompoundStatement		30:32:587:587	725148	1					
ANR	725316	IfStatement	if ( q )		725148	0					
ANR	725317	Condition	q	5109:8:115155:115155	725148	0	True				
ANR	725318	Identifier	q		725148	0					
ANR	725319	ExpressionStatement	"fprintf ( f , "", "" )"	5109:11:115158:115174	725148	1	True				
ANR	725320	CallExpression	"fprintf ( f , "", "" )"		725148	0					
ANR	725321	Callee	fprintf		725148	0					
ANR	725322	Identifier	fprintf		725148	0					
ANR	725323	ArgumentList	f		725148	1					
ANR	725324	Argument	f		725148	0					
ANR	725325	Identifier	f		725148	0					
ANR	725326	Argument	""", """		725148	1					
ANR	725327	PrimaryExpression	""", """		725148	0					
ANR	725328	ExpressionStatement	q = 1	5110:4:115180:115185	725148	1	True				
ANR	725329	AssignmentExpression	q = 1		725148	0		=			
ANR	725330	Identifier	q		725148	0					
ANR	725331	PrimaryExpression	1		725148	1					
ANR	725332	ExpressionStatement	"fprintf ( f , ""end-line"" )"	5111:4:115191:115213	725148	2	True				
ANR	725333	CallExpression	"fprintf ( f , ""end-line"" )"		725148	0					
ANR	725334	Callee	fprintf		725148	0					
ANR	725335	Identifier	fprintf		725148	0					
ANR	725336	ArgumentList	f		725148	1					
ANR	725337	Argument	f		725148	0					
ANR	725338	Identifier	f		725148	0					
ANR	725339	Argument	"""end-line"""		725148	1					
ANR	725340	PrimaryExpression	"""end-line"""		725148	0					
ANR	725341	IfStatement	if ( anchor & ANCHOR_ANYCHAR_STAR )		725148	8					
ANR	725342	Condition	anchor & ANCHOR_ANYCHAR_STAR	5113:6:115225:115252	725148	0	True				
ANR	725343	BitAndExpression	anchor & ANCHOR_ANYCHAR_STAR		725148	0		&			
ANR	725344	Identifier	anchor		725148	0					
ANR	725345	Identifier	ANCHOR_ANYCHAR_STAR		725148	1					
ANR	725346	CompoundStatement		35:36:697:697	725148	1					
ANR	725347	IfStatement	if ( q )		725148	0					
ANR	725348	Condition	q	5114:8:115265:115265	725148	0	True				
ANR	725349	Identifier	q		725148	0					
ANR	725350	ExpressionStatement	"fprintf ( f , "", "" )"	5114:11:115268:115284	725148	1	True				
ANR	725351	CallExpression	"fprintf ( f , "", "" )"		725148	0					
ANR	725352	Callee	fprintf		725148	0					
ANR	725353	Identifier	fprintf		725148	0					
ANR	725354	ArgumentList	f		725148	1					
ANR	725355	Argument	f		725148	0					
ANR	725356	Identifier	f		725148	0					
ANR	725357	Argument	""", """		725148	1					
ANR	725358	PrimaryExpression	""", """		725148	0					
ANR	725359	ExpressionStatement	q = 1	5115:4:115290:115295	725148	1	True				
ANR	725360	AssignmentExpression	q = 1		725148	0		=			
ANR	725361	Identifier	q		725148	0					
ANR	725362	PrimaryExpression	1		725148	1					
ANR	725363	ExpressionStatement	"fprintf ( f , ""anychar-star"" )"	5116:4:115301:115327	725148	2	True				
ANR	725364	CallExpression	"fprintf ( f , ""anychar-star"" )"		725148	0					
ANR	725365	Callee	fprintf		725148	0					
ANR	725366	Identifier	fprintf		725148	0					
ANR	725367	ArgumentList	f		725148	1					
ANR	725368	Argument	f		725148	0					
ANR	725369	Identifier	f		725148	0					
ANR	725370	Argument	"""anychar-star"""		725148	1					
ANR	725371	PrimaryExpression	"""anychar-star"""		725148	0					
ANR	725372	IfStatement	if ( anchor & ANCHOR_ANYCHAR_STAR_ML )		725148	9					
ANR	725373	Condition	anchor & ANCHOR_ANYCHAR_STAR_ML	5118:6:115339:115369	725148	0	True				
ANR	725374	BitAndExpression	anchor & ANCHOR_ANYCHAR_STAR_ML		725148	0		&			
ANR	725375	Identifier	anchor		725148	0					
ANR	725376	Identifier	ANCHOR_ANYCHAR_STAR_ML		725148	1					
ANR	725377	CompoundStatement		40:39:814:814	725148	1					
ANR	725378	IfStatement	if ( q )		725148	0					
ANR	725379	Condition	q	5119:8:115382:115382	725148	0	True				
ANR	725380	Identifier	q		725148	0					
ANR	725381	ExpressionStatement	"fprintf ( f , "", "" )"	5119:11:115385:115401	725148	1	True				
ANR	725382	CallExpression	"fprintf ( f , "", "" )"		725148	0					
ANR	725383	Callee	fprintf		725148	0					
ANR	725384	Identifier	fprintf		725148	0					
ANR	725385	ArgumentList	f		725148	1					
ANR	725386	Argument	f		725148	0					
ANR	725387	Identifier	f		725148	0					
ANR	725388	Argument	""", """		725148	1					
ANR	725389	PrimaryExpression	""", """		725148	0					
ANR	725390	ExpressionStatement	"fprintf ( f , ""anychar-star-pl"" )"	5120:4:115407:115436	725148	1	True				
ANR	725391	CallExpression	"fprintf ( f , ""anychar-star-pl"" )"		725148	0					
ANR	725392	Callee	fprintf		725148	0					
ANR	725393	Identifier	fprintf		725148	0					
ANR	725394	ArgumentList	f		725148	1					
ANR	725395	Argument	f		725148	0					
ANR	725396	Identifier	f		725148	0					
ANR	725397	Argument	"""anychar-star-pl"""		725148	1					
ANR	725398	PrimaryExpression	"""anychar-star-pl"""		725148	0					
ANR	725399	ExpressionStatement	"fprintf ( f , ""]"" )"	5123:2:115445:115460	725148	10	True				
ANR	725400	CallExpression	"fprintf ( f , ""]"" )"		725148	0					
ANR	725401	Callee	fprintf		725148	0					
ANR	725402	Identifier	fprintf		725148	0					
ANR	725403	ArgumentList	f		725148	1					
ANR	725404	Argument	f		725148	0					
ANR	725405	Identifier	f		725148	0					
ANR	725406	Argument	"""]"""		725148	1					
ANR	725407	PrimaryExpression	"""]"""		725148	0					
ANR	725408	ReturnType	static void		725148	1					
ANR	725409	Identifier	print_anchor		725148	2					
ANR	725410	ParameterList	"FILE * f , int anchor"		725148	3					
ANR	725411	Parameter	FILE * f	5078:13:114536:114542	725148	0	True				
ANR	725412	ParameterType	FILE *		725148	0					
ANR	725413	Identifier	f		725148	1					
ANR	725414	Parameter	int anchor	5078:22:114545:114554	725148	1	True				
ANR	725415	ParameterType	int		725148	0					
ANR	725416	Identifier	anchor		725148	1					
ANR	725417	CFGEntryNode	ENTRY		725148		True				
ANR	725418	CFGExitNode	EXIT		725148		True				
ANR	725419	Symbol	q		725148						
ANR	725420	Symbol	ANCHOR_END_BUF		725148						
ANR	725421	Symbol	ANCHOR_ANYCHAR_STAR_ML		725148						
ANR	725422	Symbol	ANCHOR_SEMI_END_BUF		725148						
ANR	725423	Symbol	ANCHOR_BEGIN_BUF		725148						
ANR	725424	Symbol	f		725148						
ANR	725425	Symbol	anchor		725148						
ANR	725426	Symbol	ANCHOR_BEGIN_POSITION		725148						
ANR	725427	Symbol	ANCHOR_END_LINE		725148						
ANR	725428	Symbol	ANCHOR_BEGIN_LINE		725148						
ANR	725429	Symbol	ANCHOR_ANYCHAR_STAR		725148						
ANR	725430	Function	print_optimize_info	5126:0:115465:116847							
ANR	725431	FunctionDef	"print_optimize_info (FILE * f , regex_t * reg)"		725430	0					
ANR	725432	CompoundStatement		5128:0:115520:116847	725430	0					
ANR	725433	Statement	static	5129:2:115524:115529	725430	0	True				
ANR	725434	IdentifierDeclStatement	"const char * on [ ] = { ""NONE"" , ""EXACT"" , ""EXACT_BM"" , ""EXACT_BM_NOT_REV"" , ""EXACT_IC"" , ""MAP"" } ;"	5129:9:115531:115650	725430	1	True				
ANR	725435	IdentifierDecl	"* on [ ] = { ""NONE"" , ""EXACT"" , ""EXACT_BM"" , ""EXACT_BM_NOT_REV"" , ""EXACT_IC"" , ""MAP"" }"		725430	0					
ANR	725436	IdentifierDeclType	const char * [ ]		725430	0					
ANR	725437	Identifier	on		725430	1					
ANR	725438	AssignmentExpression	"* on [ ] = { ""NONE"" , ""EXACT"" , ""EXACT_BM"" , ""EXACT_BM_NOT_REV"" , ""EXACT_IC"" , ""MAP"" }"		725430	2		=			
ANR	725439	Identifier	on		725430	0					
ANR	725440	InitializerList	"""NONE"""		725430	1					
ANR	725441	PrimaryExpression	"""NONE"""		725430	0					
ANR	725442	PrimaryExpression	"""EXACT"""		725430	1					
ANR	725443	PrimaryExpression	"""EXACT_BM"""		725430	2					
ANR	725444	PrimaryExpression	"""EXACT_BM_NOT_REV"""		725430	3					
ANR	725445	PrimaryExpression	"""EXACT_IC"""		725430	4					
ANR	725446	PrimaryExpression	"""MAP"""		725430	5					
ANR	725447	ExpressionStatement	"fprintf ( f , ""optimize: %s\\n"" , on [ reg -> optimize ] )"	5132:2:115655:115702	725430	2	True				
ANR	725448	CallExpression	"fprintf ( f , ""optimize: %s\\n"" , on [ reg -> optimize ] )"		725430	0					
ANR	725449	Callee	fprintf		725430	0					
ANR	725450	Identifier	fprintf		725430	0					
ANR	725451	ArgumentList	f		725430	1					
ANR	725452	Argument	f		725430	0					
ANR	725453	Identifier	f		725430	0					
ANR	725454	Argument	"""optimize: %s\\n"""		725430	1					
ANR	725455	PrimaryExpression	"""optimize: %s\\n"""		725430	0					
ANR	725456	Argument	on [ reg -> optimize ]		725430	2					
ANR	725457	ArrayIndexing	on [ reg -> optimize ]		725430	0					
ANR	725458	Identifier	on		725430	0					
ANR	725459	PtrMemberAccess	reg -> optimize		725430	1					
ANR	725460	Identifier	reg		725430	0					
ANR	725461	Identifier	optimize		725430	1					
ANR	725462	ExpressionStatement	"fprintf ( f , ""  anchor: "" )"	5133:2:115706:115730	725430	3	True				
ANR	725463	CallExpression	"fprintf ( f , ""  anchor: "" )"		725430	0					
ANR	725464	Callee	fprintf		725430	0					
ANR	725465	Identifier	fprintf		725430	0					
ANR	725466	ArgumentList	f		725430	1					
ANR	725467	Argument	f		725430	0					
ANR	725468	Identifier	f		725430	0					
ANR	725469	Argument	"""  anchor: """		725430	1					
ANR	725470	PrimaryExpression	"""  anchor: """		725430	0					
ANR	725471	ExpressionStatement	"print_anchor ( f , reg -> anchor )"	5133:28:115732:115760	725430	4	True				
ANR	725472	CallExpression	"print_anchor ( f , reg -> anchor )"		725430	0					
ANR	725473	Callee	print_anchor		725430	0					
ANR	725474	Identifier	print_anchor		725430	0					
ANR	725475	ArgumentList	f		725430	1					
ANR	725476	Argument	f		725430	0					
ANR	725477	Identifier	f		725430	0					
ANR	725478	Argument	reg -> anchor		725430	1					
ANR	725479	PtrMemberAccess	reg -> anchor		725430	0					
ANR	725480	Identifier	reg		725430	0					
ANR	725481	Identifier	anchor		725430	1					
ANR	725482	IfStatement	if ( ( reg -> anchor & ANCHOR_END_BUF_MASK ) != 0 )		725430	5					
ANR	725483	Condition	( reg -> anchor & ANCHOR_END_BUF_MASK ) != 0	5134:6:115768:115807	725430	0	True				
ANR	725484	EqualityExpression	( reg -> anchor & ANCHOR_END_BUF_MASK ) != 0		725430	0		!=			
ANR	725485	BitAndExpression	reg -> anchor & ANCHOR_END_BUF_MASK		725430	0		&			
ANR	725486	PtrMemberAccess	reg -> anchor		725430	0					
ANR	725487	Identifier	reg		725430	0					
ANR	725488	Identifier	anchor		725430	1					
ANR	725489	Identifier	ANCHOR_END_BUF_MASK		725430	1					
ANR	725490	PrimaryExpression	0		725430	1					
ANR	725491	ExpressionStatement	"print_distance_range ( f , reg -> anchor_dmin , reg -> anchor_dmax )"	5135:4:115814:115873	725430	1	True				
ANR	725492	CallExpression	"print_distance_range ( f , reg -> anchor_dmin , reg -> anchor_dmax )"		725430	0					
ANR	725493	Callee	print_distance_range		725430	0					
ANR	725494	Identifier	print_distance_range		725430	0					
ANR	725495	ArgumentList	f		725430	1					
ANR	725496	Argument	f		725430	0					
ANR	725497	Identifier	f		725430	0					
ANR	725498	Argument	reg -> anchor_dmin		725430	1					
ANR	725499	PtrMemberAccess	reg -> anchor_dmin		725430	0					
ANR	725500	Identifier	reg		725430	0					
ANR	725501	Identifier	anchor_dmin		725430	1					
ANR	725502	Argument	reg -> anchor_dmax		725430	2					
ANR	725503	PtrMemberAccess	reg -> anchor_dmax		725430	0					
ANR	725504	Identifier	reg		725430	0					
ANR	725505	Identifier	anchor_dmax		725430	1					
ANR	725506	ExpressionStatement	"fprintf ( f , ""\\n"" )"	5136:2:115877:115893	725430	6	True				
ANR	725507	CallExpression	"fprintf ( f , ""\\n"" )"		725430	0					
ANR	725508	Callee	fprintf		725430	0					
ANR	725509	Identifier	fprintf		725430	0					
ANR	725510	ArgumentList	f		725430	1					
ANR	725511	Argument	f		725430	0					
ANR	725512	Identifier	f		725430	0					
ANR	725513	Argument	"""\\n"""		725430	1					
ANR	725514	PrimaryExpression	"""\\n"""		725430	0					
ANR	725515	IfStatement	if ( reg -> optimize )		725430	7					
ANR	725516	Condition	reg -> optimize	5138:6:115902:115914	725430	0	True				
ANR	725517	PtrMemberAccess	reg -> optimize		725430	0					
ANR	725518	Identifier	reg		725430	0					
ANR	725519	Identifier	optimize		725430	1					
ANR	725520	CompoundStatement		11:21:396:396	725430	1					
ANR	725521	ExpressionStatement	"fprintf ( f , ""  sub anchor: "" )"	5139:4:115923:115951	725430	0	True				
ANR	725522	CallExpression	"fprintf ( f , ""  sub anchor: "" )"		725430	0					
ANR	725523	Callee	fprintf		725430	0					
ANR	725524	Identifier	fprintf		725430	0					
ANR	725525	ArgumentList	f		725430	1					
ANR	725526	Argument	f		725430	0					
ANR	725527	Identifier	f		725430	0					
ANR	725528	Argument	"""  sub anchor: """		725430	1					
ANR	725529	PrimaryExpression	"""  sub anchor: """		725430	0					
ANR	725530	ExpressionStatement	"print_anchor ( f , reg -> sub_anchor )"	5139:34:115953:115985	725430	1	True				
ANR	725531	CallExpression	"print_anchor ( f , reg -> sub_anchor )"		725430	0					
ANR	725532	Callee	print_anchor		725430	0					
ANR	725533	Identifier	print_anchor		725430	0					
ANR	725534	ArgumentList	f		725430	1					
ANR	725535	Argument	f		725430	0					
ANR	725536	Identifier	f		725430	0					
ANR	725537	Argument	reg -> sub_anchor		725430	1					
ANR	725538	PtrMemberAccess	reg -> sub_anchor		725430	0					
ANR	725539	Identifier	reg		725430	0					
ANR	725540	Identifier	sub_anchor		725430	1					
ANR	725541	ExpressionStatement	"fprintf ( f , ""\\n"" )"	5140:4:115991:116007	725430	2	True				
ANR	725542	CallExpression	"fprintf ( f , ""\\n"" )"		725430	0					
ANR	725543	Callee	fprintf		725430	0					
ANR	725544	Identifier	fprintf		725430	0					
ANR	725545	ArgumentList	f		725430	1					
ANR	725546	Argument	f		725430	0					
ANR	725547	Identifier	f		725430	0					
ANR	725548	Argument	"""\\n"""		725430	1					
ANR	725549	PrimaryExpression	"""\\n"""		725430	0					
ANR	725550	ExpressionStatement	"fprintf ( f , ""\\n"" )"	5142:2:116015:116031	725430	8	True				
ANR	725551	CallExpression	"fprintf ( f , ""\\n"" )"		725430	0					
ANR	725552	Callee	fprintf		725430	0					
ANR	725553	Identifier	fprintf		725430	0					
ANR	725554	ArgumentList	f		725430	1					
ANR	725555	Argument	f		725430	0					
ANR	725556	Identifier	f		725430	0					
ANR	725557	Argument	"""\\n"""		725430	1					
ANR	725558	PrimaryExpression	"""\\n"""		725430	0					
ANR	725559	IfStatement	if ( reg -> exact )		725430	9					
ANR	725560	Condition	reg -> exact	5144:6:116040:116049	725430	0	True				
ANR	725561	PtrMemberAccess	reg -> exact		725430	0					
ANR	725562	Identifier	reg		725430	0					
ANR	725563	Identifier	exact		725430	1					
ANR	725564	CompoundStatement		18:4:537:545	725430	1					
ANR	725565	IdentifierDeclStatement	UChar * p ;	5145:4:116058:116066	725430	0	True				
ANR	725566	IdentifierDecl	* p		725430	0					
ANR	725567	IdentifierDeclType	UChar *		725430	0					
ANR	725568	Identifier	p		725430	1					
ANR	725569	ExpressionStatement	"fprintf ( f , ""exact: ["" )"	5146:4:116072:116094	725430	1	True				
ANR	725570	CallExpression	"fprintf ( f , ""exact: ["" )"		725430	0					
ANR	725571	Callee	fprintf		725430	0					
ANR	725572	Identifier	fprintf		725430	0					
ANR	725573	ArgumentList	f		725430	1					
ANR	725574	Argument	f		725430	0					
ANR	725575	Identifier	f		725430	0					
ANR	725576	Argument	"""exact: ["""		725430	1					
ANR	725577	PrimaryExpression	"""exact: ["""		725430	0					
ANR	725578	ForStatement	for ( p = reg -> exact ; p < reg -> exact_end ; p ++ )		725430	2					
ANR	725579	ForInit	p = reg -> exact ;	5147:9:116105:116119	725430	0	True				
ANR	725580	AssignmentExpression	p = reg -> exact		725430	0		=			
ANR	725581	Identifier	p		725430	0					
ANR	725582	PtrMemberAccess	reg -> exact		725430	1					
ANR	725583	Identifier	reg		725430	0					
ANR	725584	Identifier	exact		725430	1					
ANR	725585	Condition	p < reg -> exact_end	5147:25:116121:116138	725430	1	True				
ANR	725586	RelationalExpression	p < reg -> exact_end		725430	0		<			
ANR	725587	Identifier	p		725430	0					
ANR	725588	PtrMemberAccess	reg -> exact_end		725430	1					
ANR	725589	Identifier	reg		725430	0					
ANR	725590	Identifier	exact_end		725430	1					
ANR	725591	PostIncDecOperationExpression	p ++	5147:45:116141:116143	725430	2	True				
ANR	725592	Identifier	p		725430	0					
ANR	725593	IncDec	++		725430	1					
ANR	725594	CompoundStatement		20:50:625:625	725430	3					
ANR	725595	ExpressionStatement	"fputc ( * p , f )"	5148:6:116154:116166	725430	0	True				
ANR	725596	CallExpression	"fputc ( * p , f )"		725430	0					
ANR	725597	Callee	fputc		725430	0					
ANR	725598	Identifier	fputc		725430	0					
ANR	725599	ArgumentList	* p		725430	1					
ANR	725600	Argument	* p		725430	0					
ANR	725601	UnaryOperationExpression	* p		725430	0					
ANR	725602	UnaryOperator	*		725430	0					
ANR	725603	Identifier	p		725430	1					
ANR	725604	Argument	f		725430	1					
ANR	725605	Identifier	f		725430	0					
ANR	725606	ExpressionStatement	"fprintf ( f , ""]: length: %d\\n"" , ( reg -> exact_end - reg -> exact ) )"	5150:4:116178:116238	725430	3	True				
ANR	725607	CallExpression	"fprintf ( f , ""]: length: %d\\n"" , ( reg -> exact_end - reg -> exact ) )"		725430	0					
ANR	725608	Callee	fprintf		725430	0					
ANR	725609	Identifier	fprintf		725430	0					
ANR	725610	ArgumentList	f		725430	1					
ANR	725611	Argument	f		725430	0					
ANR	725612	Identifier	f		725430	0					
ANR	725613	Argument	"""]: length: %d\\n"""		725430	1					
ANR	725614	PrimaryExpression	"""]: length: %d\\n"""		725430	0					
ANR	725615	Argument	reg -> exact_end - reg -> exact		725430	2					
ANR	725616	AdditiveExpression	reg -> exact_end - reg -> exact		725430	0		-			
ANR	725617	PtrMemberAccess	reg -> exact_end		725430	0					
ANR	725618	Identifier	reg		725430	0					
ANR	725619	Identifier	exact_end		725430	1					
ANR	725620	PtrMemberAccess	reg -> exact		725430	1					
ANR	725621	Identifier	reg		725430	0					
ANR	725622	Identifier	exact		725430	1					
ANR	725623	ElseStatement	else		725430	0					
ANR	725624	IfStatement	if ( reg -> optimize & ONIG_OPTIMIZE_MAP )		725430	0					
ANR	725625	Condition	reg -> optimize & ONIG_OPTIMIZE_MAP	5152:11:116255:116287	725430	0	True				
ANR	725626	BitAndExpression	reg -> optimize & ONIG_OPTIMIZE_MAP		725430	0		&			
ANR	725627	PtrMemberAccess	reg -> optimize		725430	0					
ANR	725628	Identifier	reg		725430	0					
ANR	725629	Identifier	optimize		725430	1					
ANR	725630	Identifier	ONIG_OPTIMIZE_MAP		725430	1					
ANR	725631	CompoundStatement		26:4:775:790	725430	1					
ANR	725632	IdentifierDeclStatement	"int c , i , n = 0 ;"	5153:4:116296:116311	725430	0	True				
ANR	725633	IdentifierDecl	c		725430	0					
ANR	725634	IdentifierDeclType	int		725430	0					
ANR	725635	Identifier	c		725430	1					
ANR	725636	IdentifierDecl	i		725430	1					
ANR	725637	IdentifierDeclType	int		725430	0					
ANR	725638	Identifier	i		725430	1					
ANR	725639	IdentifierDecl	n = 0		725430	2					
ANR	725640	IdentifierDeclType	int		725430	0					
ANR	725641	Identifier	n		725430	1					
ANR	725642	AssignmentExpression	n = 0		725430	2		=			
ANR	725643	Identifier	n		725430	0					
ANR	725644	PrimaryExpression	0		725430	1					
ANR	725645	ForStatement	for ( i = 0 ; i < ONIG_CHAR_TABLE_SIZE ; i ++ )		725430	1					
ANR	725646	ForInit	i = 0 ;	5155:9:116323:116328	725430	0	True				
ANR	725647	AssignmentExpression	i = 0		725430	0		=			
ANR	725648	Identifier	i		725430	0					
ANR	725649	PrimaryExpression	0		725430	1					
ANR	725650	Condition	i < ONIG_CHAR_TABLE_SIZE	5155:16:116330:116353	725430	1	True				
ANR	725651	RelationalExpression	i < ONIG_CHAR_TABLE_SIZE		725430	0		<			
ANR	725652	Identifier	i		725430	0					
ANR	725653	Identifier	ONIG_CHAR_TABLE_SIZE		725430	1					
ANR	725654	PostIncDecOperationExpression	i ++	5155:42:116356:116358	725430	2	True				
ANR	725655	Identifier	i		725430	0					
ANR	725656	IncDec	++		725430	1					
ANR	725657	IfStatement	if ( reg -> map [ i ] )		725430	3					
ANR	725658	Condition	reg -> map [ i ]	5156:10:116371:116381	725430	0	True				
ANR	725659	ArrayIndexing	reg -> map [ i ]		725430	0					
ANR	725660	PtrMemberAccess	reg -> map		725430	0					
ANR	725661	Identifier	reg		725430	0					
ANR	725662	Identifier	map		725430	1					
ANR	725663	Identifier	i		725430	1					
ANR	725664	ExpressionStatement	n ++	5156:23:116384:116387	725430	1	True				
ANR	725665	PostIncDecOperationExpression	n ++		725430	0					
ANR	725666	Identifier	n		725430	0					
ANR	725667	IncDec	++		725430	1					
ANR	725668	ExpressionStatement	"fprintf ( f , ""map: n=%d\\n"" , n )"	5158:4:116394:116422	725430	2	True				
ANR	725669	CallExpression	"fprintf ( f , ""map: n=%d\\n"" , n )"		725430	0					
ANR	725670	Callee	fprintf		725430	0					
ANR	725671	Identifier	fprintf		725430	0					
ANR	725672	ArgumentList	f		725430	1					
ANR	725673	Argument	f		725430	0					
ANR	725674	Identifier	f		725430	0					
ANR	725675	Argument	"""map: n=%d\\n"""		725430	1					
ANR	725676	PrimaryExpression	"""map: n=%d\\n"""		725430	0					
ANR	725677	Argument	n		725430	2					
ANR	725678	Identifier	n		725430	0					
ANR	725679	IfStatement	if ( n > 0 )		725430	3					
ANR	725680	Condition	n > 0	5159:8:116432:116436	725430	0	True				
ANR	725681	RelationalExpression	n > 0		725430	0		>			
ANR	725682	Identifier	n		725430	0					
ANR	725683	PrimaryExpression	0		725430	1					
ANR	725684	CompoundStatement		32:15:918:918	725430	1					
ANR	725685	ExpressionStatement	c = 0	5160:6:116447:116452	725430	0	True				
ANR	725686	AssignmentExpression	c = 0		725430	0		=			
ANR	725687	Identifier	c		725430	0					
ANR	725688	PrimaryExpression	0		725430	1					
ANR	725689	ExpressionStatement	"fputc ( '[' , f )"	5161:6:116460:116473	725430	1	True				
ANR	725690	CallExpression	"fputc ( '[' , f )"		725430	0					
ANR	725691	Callee	fputc		725430	0					
ANR	725692	Identifier	fputc		725430	0					
ANR	725693	ArgumentList	'['		725430	1					
ANR	725694	Argument	'['		725430	0					
ANR	725695	PrimaryExpression	'['		725430	0					
ANR	725696	Argument	f		725430	1					
ANR	725697	Identifier	f		725430	0					
ANR	725698	ForStatement	for ( i = 0 ; i < ONIG_CHAR_TABLE_SIZE ; i ++ )		725430	2					
ANR	725699	ForInit	i = 0 ;	5162:11:116486:116491	725430	0	True				
ANR	725700	AssignmentExpression	i = 0		725430	0		=			
ANR	725701	Identifier	i		725430	0					
ANR	725702	PrimaryExpression	0		725430	1					
ANR	725703	Condition	i < ONIG_CHAR_TABLE_SIZE	5162:18:116493:116516	725430	1	True				
ANR	725704	RelationalExpression	i < ONIG_CHAR_TABLE_SIZE		725430	0		<			
ANR	725705	Identifier	i		725430	0					
ANR	725706	Identifier	ONIG_CHAR_TABLE_SIZE		725430	1					
ANR	725707	PostIncDecOperationExpression	i ++	5162:44:116519:116521	725430	2	True				
ANR	725708	Identifier	i		725430	0					
ANR	725709	IncDec	++		725430	1					
ANR	725710	CompoundStatement		35:49:1003:1003	725430	3					
ANR	725711	IfStatement	if ( reg -> map [ i ] != 0 )		725430	0					
ANR	725712	Condition	reg -> map [ i ] != 0	5163:5:116531:116546	725430	0	True				
ANR	725713	EqualityExpression	reg -> map [ i ] != 0		725430	0		!=			
ANR	725714	ArrayIndexing	reg -> map [ i ]		725430	0					
ANR	725715	PtrMemberAccess	reg -> map		725430	0					
ANR	725716	Identifier	reg		725430	0					
ANR	725717	Identifier	map		725430	1					
ANR	725718	Identifier	i		725430	1					
ANR	725719	PrimaryExpression	0		725430	1					
ANR	725720	CompoundStatement		36:23:1028:1028	725430	1					
ANR	725721	IfStatement	if ( c > 0 )		725430	0					
ANR	725722	Condition	c > 0	5164:14:116565:116569	725430	0	True				
ANR	725723	RelationalExpression	c > 0		725430	0		>			
ANR	725724	Identifier	c		725430	0					
ANR	725725	PrimaryExpression	0		725430	1					
ANR	725726	ExpressionStatement	"fputs ( "", "" , f )"	5164:22:116573:116587	725430	1	True				
ANR	725727	CallExpression	"fputs ( "", "" , f )"		725430	0					
ANR	725728	Callee	fputs		725430	0					
ANR	725729	Identifier	fputs		725430	0					
ANR	725730	ArgumentList	""", """		725430	1					
ANR	725731	Argument	""", """		725430	0					
ANR	725732	PrimaryExpression	""", """		725430	0					
ANR	725733	Argument	f		725430	1					
ANR	725734	Identifier	f		725430	0					
ANR	725735	ExpressionStatement	c ++	5165:10:116599:116602	725430	1	True				
ANR	725736	PostIncDecOperationExpression	c ++		725430	0					
ANR	725737	Identifier	c		725430	0					
ANR	725738	IncDec	++		725430	1					
ANR	725739	IfStatement	"if ( ONIGENC_MBC_MAXLEN ( reg -> enc ) == 1 && ONIGENC_IS_CODE_PRINT ( reg -> enc , ( OnigCodePoint ) i ) )"		725430	2					
ANR	725740	Condition	"ONIGENC_MBC_MAXLEN ( reg -> enc ) == 1 && ONIGENC_IS_CODE_PRINT ( reg -> enc , ( OnigCodePoint ) i )"	5166:14:116618:116718	725430	0	True				
ANR	725741	AndExpression	"ONIGENC_MBC_MAXLEN ( reg -> enc ) == 1 && ONIGENC_IS_CODE_PRINT ( reg -> enc , ( OnigCodePoint ) i )"		725430	0		&&			
ANR	725742	EqualityExpression	ONIGENC_MBC_MAXLEN ( reg -> enc ) == 1		725430	0		==			
ANR	725743	CallExpression	ONIGENC_MBC_MAXLEN ( reg -> enc )		725430	0					
ANR	725744	Callee	ONIGENC_MBC_MAXLEN		725430	0					
ANR	725745	Identifier	ONIGENC_MBC_MAXLEN		725430	0					
ANR	725746	ArgumentList	reg -> enc		725430	1					
ANR	725747	Argument	reg -> enc		725430	0					
ANR	725748	PtrMemberAccess	reg -> enc		725430	0					
ANR	725749	Identifier	reg		725430	0					
ANR	725750	Identifier	enc		725430	1					
ANR	725751	PrimaryExpression	1		725430	1					
ANR	725752	CallExpression	"ONIGENC_IS_CODE_PRINT ( reg -> enc , ( OnigCodePoint ) i )"		725430	1					
ANR	725753	Callee	ONIGENC_IS_CODE_PRINT		725430	0					
ANR	725754	Identifier	ONIGENC_IS_CODE_PRINT		725430	0					
ANR	725755	ArgumentList	reg -> enc		725430	1					
ANR	725756	Argument	reg -> enc		725430	0					
ANR	725757	PtrMemberAccess	reg -> enc		725430	0					
ANR	725758	Identifier	reg		725430	0					
ANR	725759	Identifier	enc		725430	1					
ANR	725760	Argument	( OnigCodePoint ) i		725430	1					
ANR	725761	CastExpression	( OnigCodePoint ) i		725430	0					
ANR	725762	CastTarget	OnigCodePoint		725430	0					
ANR	725763	Identifier	i		725430	1					
ANR	725764	ExpressionStatement	"fputc ( i , f )"	5168:12:116733:116744	725430	1	True				
ANR	725765	CallExpression	"fputc ( i , f )"		725430	0					
ANR	725766	Callee	fputc		725430	0					
ANR	725767	Identifier	fputc		725430	0					
ANR	725768	ArgumentList	i		725430	1					
ANR	725769	Argument	i		725430	0					
ANR	725770	Identifier	i		725430	0					
ANR	725771	Argument	f		725430	1					
ANR	725772	Identifier	f		725430	0					
ANR	725773	ElseStatement	else		725430	0					
ANR	725774	ExpressionStatement	"fprintf ( f , ""%d"" , i )"	5170:12:116773:116792	725430	0	True				
ANR	725775	CallExpression	"fprintf ( f , ""%d"" , i )"		725430	0					
ANR	725776	Callee	fprintf		725430	0					
ANR	725777	Identifier	fprintf		725430	0					
ANR	725778	ArgumentList	f		725430	1					
ANR	725779	Argument	f		725430	0					
ANR	725780	Identifier	f		725430	0					
ANR	725781	Argument	"""%d"""		725430	1					
ANR	725782	PrimaryExpression	"""%d"""		725430	0					
ANR	725783	Argument	i		725430	2					
ANR	725784	Identifier	i		725430	0					
ANR	725785	ExpressionStatement	"fprintf ( f , ""]\\n"" )"	5173:6:116818:116835	725430	3	True				
ANR	725786	CallExpression	"fprintf ( f , ""]\\n"" )"		725430	0					
ANR	725787	Callee	fprintf		725430	0					
ANR	725788	Identifier	fprintf		725430	0					
ANR	725789	ArgumentList	f		725430	1					
ANR	725790	Argument	f		725430	0					
ANR	725791	Identifier	f		725430	0					
ANR	725792	Argument	"""]\\n"""		725430	1					
ANR	725793	PrimaryExpression	"""]\\n"""		725430	0					
ANR	725794	ReturnType	static void		725430	1					
ANR	725795	Identifier	print_optimize_info		725430	2					
ANR	725796	ParameterList	"FILE * f , regex_t * reg"		725430	3					
ANR	725797	Parameter	FILE * f	5127:20:115497:115503	725430	0	True				
ANR	725798	ParameterType	FILE *		725430	0					
ANR	725799	Identifier	f		725430	1					
ANR	725800	Parameter	regex_t * reg	5127:29:115506:115517	725430	1	True				
ANR	725801	ParameterType	regex_t *		725430	0					
ANR	725802	Identifier	reg		725430	1					
ANR	725803	CFGEntryNode	ENTRY		725430		True				
ANR	725804	CFGExitNode	EXIT		725430		True				
ANR	725805	Symbol	reg -> anchor		725430						
ANR	725806	Symbol	* on		725430						
ANR	725807	Symbol	reg -> exact_end		725430						
ANR	725808	Symbol	reg		725430						
ANR	725809	Symbol	reg -> anchor_dmax		725430						
ANR	725810	Symbol	reg -> optimize		725430						
ANR	725811	Symbol	reg -> sub_anchor		725430						
ANR	725812	Symbol	on		725430						
ANR	725813	Symbol	reg -> map		725430						
ANR	725814	Symbol	ONIGENC_MBC_MAXLEN		725430						
ANR	725815	Symbol	c		725430						
ANR	725816	Symbol	f		725430						
ANR	725817	Symbol	reg -> anchor_dmin		725430						
ANR	725818	Symbol	* * reg		725430						
ANR	725819	Symbol	i		725430						
ANR	725820	Symbol	n		725430						
ANR	725821	Symbol	reg -> enc		725430						
ANR	725822	Symbol	p		725430						
ANR	725823	Symbol	ONIG_CHAR_TABLE_SIZE		725430						
ANR	725824	Symbol	* i		725430						
ANR	725825	Symbol	reg -> exact		725430						
ANR	725826	Symbol	ONIGENC_IS_CODE_PRINT		725430						
ANR	725827	Symbol	ONIG_OPTIMIZE_MAP		725430						
ANR	725828	Symbol	* reg -> optimize		725430						
ANR	725829	Symbol	* p		725430						
ANR	725830	Symbol	* reg -> map		725430						
ANR	725831	Symbol	* reg		725430						
ANR	725832	Symbol	ANCHOR_END_BUF_MASK		725430						
ANR	725833	Function	onig_free_body	5180:0:116875:117403							
ANR	725834	FunctionDef	onig_free_body (regex_t * reg)		725833	0					
ANR	725835	CompoundStatement		5182:0:116916:117403	725833	0					
ANR	725836	IfStatement	if ( IS_NOT_NULL ( reg ) )		725833	0					
ANR	725837	Condition	IS_NOT_NULL ( reg )	5183:6:116924:116939	725833	0	True				
ANR	725838	CallExpression	IS_NOT_NULL ( reg )		725833	0					
ANR	725839	Callee	IS_NOT_NULL		725833	0					
ANR	725840	Identifier	IS_NOT_NULL		725833	0					
ANR	725841	ArgumentList	reg		725833	1					
ANR	725842	Argument	reg		725833	0					
ANR	725843	Identifier	reg		725833	0					
ANR	725844	CompoundStatement		2:24:25:25	725833	1					
ANR	725845	IfStatement	if ( IS_NOT_NULL ( reg -> p ) )		725833	0					
ANR	725846	Condition	IS_NOT_NULL ( reg -> p )	5184:8:116952:116970	725833	0	True				
ANR	725847	CallExpression	IS_NOT_NULL ( reg -> p )		725833	0					
ANR	725848	Callee	IS_NOT_NULL		725833	0					
ANR	725849	Identifier	IS_NOT_NULL		725833	0					
ANR	725850	ArgumentList	reg -> p		725833	1					
ANR	725851	Argument	reg -> p		725833	0					
ANR	725852	PtrMemberAccess	reg -> p		725833	0					
ANR	725853	Identifier	reg		725833	0					
ANR	725854	Identifier	p		725833	1					
ANR	725855	ExpressionStatement	xfree ( reg -> p )	5184:44:116988:117001	725833	1	True				
ANR	725856	CallExpression	xfree ( reg -> p )		725833	0					
ANR	725857	Callee	xfree		725833	0					
ANR	725858	Identifier	xfree		725833	0					
ANR	725859	ArgumentList	reg -> p		725833	1					
ANR	725860	Argument	reg -> p		725833	0					
ANR	725861	PtrMemberAccess	reg -> p		725833	0					
ANR	725862	Identifier	reg		725833	0					
ANR	725863	Identifier	p		725833	1					
ANR	725864	IfStatement	if ( IS_NOT_NULL ( reg -> exact ) )		725833	1					
ANR	725865	Condition	IS_NOT_NULL ( reg -> exact )	5185:8:117011:117033	725833	0	True				
ANR	725866	CallExpression	IS_NOT_NULL ( reg -> exact )		725833	0					
ANR	725867	Callee	IS_NOT_NULL		725833	0					
ANR	725868	Identifier	IS_NOT_NULL		725833	0					
ANR	725869	ArgumentList	reg -> exact		725833	1					
ANR	725870	Argument	reg -> exact		725833	0					
ANR	725871	PtrMemberAccess	reg -> exact		725833	0					
ANR	725872	Identifier	reg		725833	0					
ANR	725873	Identifier	exact		725833	1					
ANR	725874	ExpressionStatement	xfree ( reg -> exact )	5185:44:117047:117064	725833	1	True				
ANR	725875	CallExpression	xfree ( reg -> exact )		725833	0					
ANR	725876	Callee	xfree		725833	0					
ANR	725877	Identifier	xfree		725833	0					
ANR	725878	ArgumentList	reg -> exact		725833	1					
ANR	725879	Argument	reg -> exact		725833	0					
ANR	725880	PtrMemberAccess	reg -> exact		725833	0					
ANR	725881	Identifier	reg		725833	0					
ANR	725882	Identifier	exact		725833	1					
ANR	725883	IfStatement	if ( IS_NOT_NULL ( reg -> int_map ) )		725833	2					
ANR	725884	Condition	IS_NOT_NULL ( reg -> int_map )	5186:8:117074:117098	725833	0	True				
ANR	725885	CallExpression	IS_NOT_NULL ( reg -> int_map )		725833	0					
ANR	725886	Callee	IS_NOT_NULL		725833	0					
ANR	725887	Identifier	IS_NOT_NULL		725833	0					
ANR	725888	ArgumentList	reg -> int_map		725833	1					
ANR	725889	Argument	reg -> int_map		725833	0					
ANR	725890	PtrMemberAccess	reg -> int_map		725833	0					
ANR	725891	Identifier	reg		725833	0					
ANR	725892	Identifier	int_map		725833	1					
ANR	725893	ExpressionStatement	xfree ( reg -> int_map )	5186:44:117110:117129	725833	1	True				
ANR	725894	CallExpression	xfree ( reg -> int_map )		725833	0					
ANR	725895	Callee	xfree		725833	0					
ANR	725896	Identifier	xfree		725833	0					
ANR	725897	ArgumentList	reg -> int_map		725833	1					
ANR	725898	Argument	reg -> int_map		725833	0					
ANR	725899	PtrMemberAccess	reg -> int_map		725833	0					
ANR	725900	Identifier	reg		725833	0					
ANR	725901	Identifier	int_map		725833	1					
ANR	725902	IfStatement	if ( IS_NOT_NULL ( reg -> int_map_backward ) )		725833	3					
ANR	725903	Condition	IS_NOT_NULL ( reg -> int_map_backward )	5187:8:117139:117172	725833	0	True				
ANR	725904	CallExpression	IS_NOT_NULL ( reg -> int_map_backward )		725833	0					
ANR	725905	Callee	IS_NOT_NULL		725833	0					
ANR	725906	Identifier	IS_NOT_NULL		725833	0					
ANR	725907	ArgumentList	reg -> int_map_backward		725833	1					
ANR	725908	Argument	reg -> int_map_backward		725833	0					
ANR	725909	PtrMemberAccess	reg -> int_map_backward		725833	0					
ANR	725910	Identifier	reg		725833	0					
ANR	725911	Identifier	int_map_backward		725833	1					
ANR	725912	ExpressionStatement	xfree ( reg -> int_map_backward )	5187:44:117175:117203	725833	1	True				
ANR	725913	CallExpression	xfree ( reg -> int_map_backward )		725833	0					
ANR	725914	Callee	xfree		725833	0					
ANR	725915	Identifier	xfree		725833	0					
ANR	725916	ArgumentList	reg -> int_map_backward		725833	1					
ANR	725917	Argument	reg -> int_map_backward		725833	0					
ANR	725918	PtrMemberAccess	reg -> int_map_backward		725833	0					
ANR	725919	Identifier	reg		725833	0					
ANR	725920	Identifier	int_map_backward		725833	1					
ANR	725921	IfStatement	if ( IS_NOT_NULL ( reg -> repeat_range ) )		725833	4					
ANR	725922	Condition	IS_NOT_NULL ( reg -> repeat_range )	5188:8:117213:117242	725833	0	True				
ANR	725923	CallExpression	IS_NOT_NULL ( reg -> repeat_range )		725833	0					
ANR	725924	Callee	IS_NOT_NULL		725833	0					
ANR	725925	Identifier	IS_NOT_NULL		725833	0					
ANR	725926	ArgumentList	reg -> repeat_range		725833	1					
ANR	725927	Argument	reg -> repeat_range		725833	0					
ANR	725928	PtrMemberAccess	reg -> repeat_range		725833	0					
ANR	725929	Identifier	reg		725833	0					
ANR	725930	Identifier	repeat_range		725833	1					
ANR	725931	ExpressionStatement	xfree ( reg -> repeat_range )	5188:44:117249:117273	725833	1	True				
ANR	725932	CallExpression	xfree ( reg -> repeat_range )		725833	0					
ANR	725933	Callee	xfree		725833	0					
ANR	725934	Identifier	xfree		725833	0					
ANR	725935	ArgumentList	reg -> repeat_range		725833	1					
ANR	725936	Argument	reg -> repeat_range		725833	0					
ANR	725937	PtrMemberAccess	reg -> repeat_range		725833	0					
ANR	725938	Identifier	reg		725833	0					
ANR	725939	Identifier	repeat_range		725833	1					
ANR	725940	IfStatement	if ( IS_NOT_NULL ( reg -> chain ) )		725833	5					
ANR	725941	Condition	IS_NOT_NULL ( reg -> chain )	5189:8:117283:117305	725833	0	True				
ANR	725942	CallExpression	IS_NOT_NULL ( reg -> chain )		725833	0					
ANR	725943	Callee	IS_NOT_NULL		725833	0					
ANR	725944	Identifier	IS_NOT_NULL		725833	0					
ANR	725945	ArgumentList	reg -> chain		725833	1					
ANR	725946	Argument	reg -> chain		725833	0					
ANR	725947	PtrMemberAccess	reg -> chain		725833	0					
ANR	725948	Identifier	reg		725833	0					
ANR	725949	Identifier	chain		725833	1					
ANR	725950	ExpressionStatement	onig_free ( reg -> chain )	5189:44:117319:117340	725833	1	True				
ANR	725951	CallExpression	onig_free ( reg -> chain )		725833	0					
ANR	725952	Callee	onig_free		725833	0					
ANR	725953	Identifier	onig_free		725833	0					
ANR	725954	ArgumentList	reg -> chain		725833	1					
ANR	725955	Argument	reg -> chain		725833	0					
ANR	725956	PtrMemberAccess	reg -> chain		725833	0					
ANR	725957	Identifier	reg		725833	0					
ANR	725958	Identifier	chain		725833	1					
ANR	725959	ExpressionStatement	onig_names_free ( reg )	5192:4:117370:117390	725833	6	True				
ANR	725960	CallExpression	onig_names_free ( reg )		725833	0					
ANR	725961	Callee	onig_names_free		725833	0					
ANR	725962	Identifier	onig_names_free		725833	0					
ANR	725963	ArgumentList	reg		725833	1					
ANR	725964	Argument	reg		725833	0					
ANR	725965	Identifier	reg		725833	0					
ANR	725966	ReturnType	extern void		725833	1					
ANR	725967	Identifier	onig_free_body		725833	2					
ANR	725968	ParameterList	regex_t * reg		725833	3					
ANR	725969	Parameter	regex_t * reg	5181:15:116902:116913	725833	0	True				
ANR	725970	ParameterType	regex_t *		725833	0					
ANR	725971	Identifier	reg		725833	1					
ANR	725972	CFGEntryNode	ENTRY		725833		True				
ANR	725973	CFGExitNode	EXIT		725833		True				
ANR	725974	Symbol	reg -> int_map		725833						
ANR	725975	Symbol	reg -> int_map_backward		725833						
ANR	725976	Symbol	IS_NOT_NULL		725833						
ANR	725977	Symbol	reg -> repeat_range		725833						
ANR	725978	Symbol	reg		725833						
ANR	725979	Symbol	reg -> exact		725833						
ANR	725980	Symbol	reg -> chain		725833						
ANR	725981	Symbol	reg -> p		725833						
ANR	725982	Symbol	* reg		725833						
ANR	725983	Function	onig_free	5197:0:117406:117515							
ANR	725984	FunctionDef	onig_free (regex_t * reg)		725983	0					
ANR	725985	CompoundStatement		5199:0:117442:117515	725983	0					
ANR	725986	IfStatement	if ( IS_NOT_NULL ( reg ) )		725983	0					
ANR	725987	Condition	IS_NOT_NULL ( reg )	5200:6:117450:117465	725983	0	True				
ANR	725988	CallExpression	IS_NOT_NULL ( reg )		725983	0					
ANR	725989	Callee	IS_NOT_NULL		725983	0					
ANR	725990	Identifier	IS_NOT_NULL		725983	0					
ANR	725991	ArgumentList	reg		725983	1					
ANR	725992	Argument	reg		725983	0					
ANR	725993	Identifier	reg		725983	0					
ANR	725994	CompoundStatement		2:24:25:25	725983	1					
ANR	725995	ExpressionStatement	onig_free_body ( reg )	5201:4:117474:117493	725983	0	True				
ANR	725996	CallExpression	onig_free_body ( reg )		725983	0					
ANR	725997	Callee	onig_free_body		725983	0					
ANR	725998	Identifier	onig_free_body		725983	0					
ANR	725999	ArgumentList	reg		725983	1					
ANR	726000	Argument	reg		725983	0					
ANR	726001	Identifier	reg		725983	0					
ANR	726002	ExpressionStatement	xfree ( reg )	5202:4:117499:117509	725983	1	True				
ANR	726003	CallExpression	xfree ( reg )		725983	0					
ANR	726004	Callee	xfree		725983	0					
ANR	726005	Identifier	xfree		725983	0					
ANR	726006	ArgumentList	reg		725983	1					
ANR	726007	Argument	reg		725983	0					
ANR	726008	Identifier	reg		725983	0					
ANR	726009	ReturnType	extern void		725983	1					
ANR	726010	Identifier	onig_free		725983	2					
ANR	726011	ParameterList	regex_t * reg		725983	3					
ANR	726012	Parameter	regex_t * reg	5198:10:117428:117439	725983	0	True				
ANR	726013	ParameterType	regex_t *		725983	0					
ANR	726014	Identifier	reg		725983	1					
ANR	726015	CFGEntryNode	ENTRY		725983		True				
ANR	726016	CFGExitNode	EXIT		725983		True				
ANR	726017	Symbol	IS_NOT_NULL		725983						
ANR	726018	Symbol	reg		725983						
ANR	726019	Function	onig_transfer	5213:0:117683:117811							
ANR	726020	FunctionDef	"onig_transfer (regex_t * to , regex_t * from)"		726019	0					
ANR	726021	CompoundStatement		5215:0:117737:117811	726019	0					
ANR	726022	ExpressionStatement	THREAD_ATOMIC_START	5216:2:117741:117760	726019	0	True				
ANR	726023	Identifier	THREAD_ATOMIC_START		726019	0					
ANR	726024	ExpressionStatement	"REGEX_TRANSFER ( to , from )"	5217:2:117764:117788	726019	1	True				
ANR	726025	CallExpression	"REGEX_TRANSFER ( to , from )"		726019	0					
ANR	726026	Callee	REGEX_TRANSFER		726019	0					
ANR	726027	Identifier	REGEX_TRANSFER		726019	0					
ANR	726028	ArgumentList	to		726019	1					
ANR	726029	Argument	to		726019	0					
ANR	726030	Identifier	to		726019	0					
ANR	726031	Argument	from		726019	1					
ANR	726032	Identifier	from		726019	0					
ANR	726033	ExpressionStatement	THREAD_ATOMIC_END	5218:2:117792:117809	726019	2	True				
ANR	726034	Identifier	THREAD_ATOMIC_END		726019	0					
ANR	726035	ReturnType	extern void		726019	1					
ANR	726036	Identifier	onig_transfer		726019	2					
ANR	726037	ParameterList	"regex_t * to , regex_t * from"		726019	3					
ANR	726038	Parameter	regex_t * to	5214:14:117709:117719	726019	0	True				
ANR	726039	ParameterType	regex_t *		726019	0					
ANR	726040	Identifier	to		726019	1					
ANR	726041	Parameter	regex_t * from	5214:27:117722:117734	726019	1	True				
ANR	726042	ParameterType	regex_t *		726019	0					
ANR	726043	Identifier	from		726019	1					
ANR	726044	CFGEntryNode	ENTRY		726019		True				
ANR	726045	CFGExitNode	EXIT		726019		True				
ANR	726046	Symbol	from		726019						
ANR	726047	Symbol	to		726019						
ANR	726048	Function	onig_chain_link_add	5227:0:117934:118082							
ANR	726049	FunctionDef	"onig_chain_link_add (regex_t * to , regex_t * add)"		726048	0					
ANR	726050	CompoundStatement		5229:0:117993:118082	726048	0					
ANR	726051	ExpressionStatement	THREAD_ATOMIC_START	5230:2:117997:118016	726048	0	True				
ANR	726052	Identifier	THREAD_ATOMIC_START		726048	0					
ANR	726053	ExpressionStatement	REGEX_CHAIN_HEAD ( to )	5231:2:118020:118040	726048	1	True				
ANR	726054	CallExpression	REGEX_CHAIN_HEAD ( to )		726048	0					
ANR	726055	Callee	REGEX_CHAIN_HEAD		726048	0					
ANR	726056	Identifier	REGEX_CHAIN_HEAD		726048	0					
ANR	726057	ArgumentList	to		726048	1					
ANR	726058	Argument	to		726048	0					
ANR	726059	Identifier	to		726048	0					
ANR	726060	ExpressionStatement	to -> chain = add	5232:2:118044:118059	726048	2	True				
ANR	726061	AssignmentExpression	to -> chain = add		726048	0		=			
ANR	726062	PtrMemberAccess	to -> chain		726048	0					
ANR	726063	Identifier	to		726048	0					
ANR	726064	Identifier	chain		726048	1					
ANR	726065	Identifier	add		726048	1					
ANR	726066	ExpressionStatement	THREAD_ATOMIC_END	5233:2:118063:118080	726048	3	True				
ANR	726067	Identifier	THREAD_ATOMIC_END		726048	0					
ANR	726068	ReturnType	extern void		726048	1					
ANR	726069	Identifier	onig_chain_link_add		726048	2					
ANR	726070	ParameterList	"regex_t * to , regex_t * add"		726048	3					
ANR	726071	Parameter	regex_t * to	5228:20:117966:117976	726048	0	True				
ANR	726072	ParameterType	regex_t *		726048	0					
ANR	726073	Identifier	to		726048	1					
ANR	726074	Parameter	regex_t * add	5228:33:117979:117990	726048	1	True				
ANR	726075	ParameterType	regex_t *		726048	0					
ANR	726076	Identifier	add		726048	1					
ANR	726077	CFGEntryNode	ENTRY		726048		True				
ANR	726078	CFGExitNode	EXIT		726048		True				
ANR	726079	Symbol	add		726048						
ANR	726080	Symbol	* to		726048						
ANR	726081	Symbol	to -> chain		726048						
ANR	726082	Symbol	to		726048						
ANR	726083	Function	onig_chain_reduce	5236:0:118085:118415							
ANR	726084	FunctionDef	onig_chain_reduce (regex_t * reg)		726083	0					
ANR	726085	CompoundStatement		5238:0:118129:118415	726083	0					
ANR	726086	IdentifierDeclStatement	"regex_t * head , * prev ;"	5239:2:118133:118153	726083	0	True				
ANR	726087	IdentifierDecl	* head		726083	0					
ANR	726088	IdentifierDeclType	regex_t *		726083	0					
ANR	726089	Identifier	head		726083	1					
ANR	726090	IdentifierDecl	* prev		726083	1					
ANR	726091	IdentifierDeclType	regex_t *		726083	0					
ANR	726092	Identifier	prev		726083	1					
ANR	726093	ExpressionStatement	prev = reg	5241:2:118158:118168	726083	1	True				
ANR	726094	AssignmentExpression	prev = reg		726083	0		=			
ANR	726095	Identifier	prev		726083	0					
ANR	726096	Identifier	reg		726083	1					
ANR	726097	ExpressionStatement	head = prev -> chain	5242:2:118172:118190	726083	2	True				
ANR	726098	AssignmentExpression	head = prev -> chain		726083	0		=			
ANR	726099	Identifier	head		726083	0					
ANR	726100	PtrMemberAccess	prev -> chain		726083	1					
ANR	726101	Identifier	prev		726083	0					
ANR	726102	Identifier	chain		726083	1					
ANR	726103	IfStatement	if ( IS_NOT_NULL ( head ) )		726083	3					
ANR	726104	Condition	IS_NOT_NULL ( head )	5243:6:118198:118214	726083	0	True				
ANR	726105	CallExpression	IS_NOT_NULL ( head )		726083	0					
ANR	726106	Callee	IS_NOT_NULL		726083	0					
ANR	726107	Identifier	IS_NOT_NULL		726083	0					
ANR	726108	ArgumentList	head		726083	1					
ANR	726109	Argument	head		726083	0					
ANR	726110	Identifier	head		726083	0					
ANR	726111	CompoundStatement		6:25:87:87	726083	1					
ANR	726112	ExpressionStatement	reg -> state = ONIG_STATE_MODIFY	5244:4:118223:118253	726083	0	True				
ANR	726113	AssignmentExpression	reg -> state = ONIG_STATE_MODIFY		726083	0		=			
ANR	726114	PtrMemberAccess	reg -> state		726083	0					
ANR	726115	Identifier	reg		726083	0					
ANR	726116	Identifier	state		726083	1					
ANR	726117	Identifier	ONIG_STATE_MODIFY		726083	1					
ANR	726118	WhileStatement	while ( IS_NOT_NULL ( head -> chain ) )		726083	1					
ANR	726119	Condition	IS_NOT_NULL ( head -> chain )	5245:11:118266:118289	726083	0	True				
ANR	726120	CallExpression	IS_NOT_NULL ( head -> chain )		726083	0					
ANR	726121	Callee	IS_NOT_NULL		726083	0					
ANR	726122	Identifier	IS_NOT_NULL		726083	0					
ANR	726123	ArgumentList	head -> chain		726083	1					
ANR	726124	Argument	head -> chain		726083	0					
ANR	726125	PtrMemberAccess	head -> chain		726083	0					
ANR	726126	Identifier	head		726083	0					
ANR	726127	Identifier	chain		726083	1					
ANR	726128	CompoundStatement		8:37:162:162	726083	1					
ANR	726129	ExpressionStatement	prev = head	5246:6:118300:118311	726083	0	True				
ANR	726130	AssignmentExpression	prev = head		726083	0		=			
ANR	726131	Identifier	prev		726083	0					
ANR	726132	Identifier	head		726083	1					
ANR	726133	ExpressionStatement	head = head -> chain	5247:6:118319:118337	726083	1	True				
ANR	726134	AssignmentExpression	head = head -> chain		726083	0		=			
ANR	726135	Identifier	head		726083	0					
ANR	726136	PtrMemberAccess	head -> chain		726083	1					
ANR	726137	Identifier	head		726083	0					
ANR	726138	Identifier	chain		726083	1					
ANR	726139	ExpressionStatement	prev -> chain = ( regex_t * ) NULL	5249:4:118349:118378	726083	2	True				
ANR	726140	AssignmentExpression	prev -> chain = ( regex_t * ) NULL		726083	0		=			
ANR	726141	PtrMemberAccess	prev -> chain		726083	0					
ANR	726142	Identifier	prev		726083	0					
ANR	726143	Identifier	chain		726083	1					
ANR	726144	CastExpression	( regex_t * ) NULL		726083	1					
ANR	726145	CastTarget	regex_t *		726083	0					
ANR	726146	Identifier	NULL		726083	1					
ANR	726147	ExpressionStatement	"REGEX_TRANSFER ( reg , head )"	5250:4:118384:118409	726083	3	True				
ANR	726148	CallExpression	"REGEX_TRANSFER ( reg , head )"		726083	0					
ANR	726149	Callee	REGEX_TRANSFER		726083	0					
ANR	726150	Identifier	REGEX_TRANSFER		726083	0					
ANR	726151	ArgumentList	reg		726083	1					
ANR	726152	Argument	reg		726083	0					
ANR	726153	Identifier	reg		726083	0					
ANR	726154	Argument	head		726083	1					
ANR	726155	Identifier	head		726083	0					
ANR	726156	ReturnType	extern void		726083	1					
ANR	726157	Identifier	onig_chain_reduce		726083	2					
ANR	726158	ParameterList	regex_t * reg		726083	3					
ANR	726159	Parameter	regex_t * reg	5237:18:118115:118126	726083	0	True				
ANR	726160	ParameterType	regex_t *		726083	0					
ANR	726161	Identifier	reg		726083	1					
ANR	726162	CFGEntryNode	ENTRY		726083		True				
ANR	726163	CFGExitNode	EXIT		726083		True				
ANR	726164	Symbol	head		726083						
ANR	726165	Symbol	IS_NOT_NULL		726083						
ANR	726166	Symbol	reg -> state		726083						
ANR	726167	Symbol	NULL		726083						
ANR	726168	Symbol	reg		726083						
ANR	726169	Symbol	prev		726083						
ANR	726170	Symbol	ONIG_STATE_MODIFY		726083						
ANR	726171	Symbol	prev -> chain		726083						
ANR	726172	Symbol	* head		726083						
ANR	726173	Symbol	* prev		726083						
ANR	726174	Symbol	* reg		726083						
ANR	726175	Symbol	head -> chain		726083						
ANR	726176	DeclStmt									
ANR	726177	Decl							void print_compiled_byte_code_list	void print_compiled_byte_code_list	P_
ANR	726178	DeclStmt									
ANR	726179	Decl							void print_tree	void print_tree	P_
ANR	726180	Function	onig_compile	5261:0:118601:123231							
ANR	726181	FunctionDef	"onig_compile (regex_t * reg , const UChar * pattern , const UChar * pattern_end , OnigErrorInfo * einfo)"		726180	0					
ANR	726182	CompoundStatement		5264:0:118716:123231	726180	0					
ANR	726183	Statement	define	5265:1:118719:118724	726180	0	True				
ANR	726184	Statement	COMPILE_INIT_SIZE	5265:8:118726:118742	726180	1	True				
ANR	726185	Statement	20	5265:27:118745:118746	726180	2	True				
ANR	726186	IdentifierDeclStatement	"int r , init_size ;"	5267:2:118751:118767	726180	3	True				
ANR	726187	IdentifierDecl	r		726180	0					
ANR	726188	IdentifierDeclType	int		726180	0					
ANR	726189	Identifier	r		726180	1					
ANR	726190	IdentifierDecl	init_size		726180	1					
ANR	726191	IdentifierDeclType	int		726180	0					
ANR	726192	Identifier	init_size		726180	1					
ANR	726193	IdentifierDeclStatement	Node * root ;	5268:2:118771:118782	726180	4	True				
ANR	726194	IdentifierDecl	* root		726180	0					
ANR	726195	IdentifierDeclType	Node *		726180	0					
ANR	726196	Identifier	root		726180	1					
ANR	726197	IdentifierDeclStatement	ScanEnv scan_env ;	5269:2:118786:118803	726180	5	True				
ANR	726198	IdentifierDecl	scan_env		726180	0					
ANR	726199	IdentifierDeclType	ScanEnv		726180	0					
ANR	726200	Identifier	scan_env		726180	1					
ANR	726201	IdentifierDeclStatement	UnsetAddrList uslist ;	5271:2:118830:118851	726180	6	True				
ANR	726202	IdentifierDecl	uslist		726180	0					
ANR	726203	IdentifierDeclType	UnsetAddrList		726180	0					
ANR	726204	Identifier	uslist		726180	1					
ANR	726205	IfStatement	if ( IS_NOT_NULL ( einfo ) )		726180	7					
ANR	726206	Condition	IS_NOT_NULL ( einfo )	5274:6:118867:118884	726180	0	True				
ANR	726207	CallExpression	IS_NOT_NULL ( einfo )		726180	0					
ANR	726208	Callee	IS_NOT_NULL		726180	0					
ANR	726209	Identifier	IS_NOT_NULL		726180	0					
ANR	726210	ArgumentList	einfo		726180	1					
ANR	726211	Argument	einfo		726180	0					
ANR	726212	Identifier	einfo		726180	0					
ANR	726213	ExpressionStatement	einfo -> par = ( UChar * ) NULL	5274:26:118887:118913	726180	1	True				
ANR	726214	AssignmentExpression	einfo -> par = ( UChar * ) NULL		726180	0		=			
ANR	726215	PtrMemberAccess	einfo -> par		726180	0					
ANR	726216	Identifier	einfo		726180	0					
ANR	726217	Identifier	par		726180	1					
ANR	726218	CastExpression	( UChar * ) NULL		726180	1					
ANR	726219	CastTarget	UChar *		726180	0					
ANR	726220	Identifier	NULL		726180	1					
ANR	726221	ExpressionStatement	reg -> state = ONIG_STATE_COMPILING	5276:2:118918:118951	726180	8	True				
ANR	726222	AssignmentExpression	reg -> state = ONIG_STATE_COMPILING		726180	0		=			
ANR	726223	PtrMemberAccess	reg -> state		726180	0					
ANR	726224	Identifier	reg		726180	0					
ANR	726225	Identifier	state		726180	1					
ANR	726226	Identifier	ONIG_STATE_COMPILING		726180	1					
ANR	726227	ExpressionStatement	"print_enc_string ( stderr , reg -> enc , pattern , pattern_end )"	5279:2:118974:119030	726180	9	True				
ANR	726228	CallExpression	"print_enc_string ( stderr , reg -> enc , pattern , pattern_end )"		726180	0					
ANR	726229	Callee	print_enc_string		726180	0					
ANR	726230	Identifier	print_enc_string		726180	0					
ANR	726231	ArgumentList	stderr		726180	1					
ANR	726232	Argument	stderr		726180	0					
ANR	726233	Identifier	stderr		726180	0					
ANR	726234	Argument	reg -> enc		726180	1					
ANR	726235	PtrMemberAccess	reg -> enc		726180	0					
ANR	726236	Identifier	reg		726180	0					
ANR	726237	Identifier	enc		726180	1					
ANR	726238	Argument	pattern		726180	2					
ANR	726239	Identifier	pattern		726180	0					
ANR	726240	Argument	pattern_end		726180	3					
ANR	726241	Identifier	pattern_end		726180	0					
ANR	726242	IfStatement	if ( reg -> alloc == 0 )		726180	10					
ANR	726243	Condition	reg -> alloc == 0	5282:6:119046:119060	726180	0	True				
ANR	726244	EqualityExpression	reg -> alloc == 0		726180	0		==			
ANR	726245	PtrMemberAccess	reg -> alloc		726180	0					
ANR	726246	Identifier	reg		726180	0					
ANR	726247	Identifier	alloc		726180	1					
ANR	726248	PrimaryExpression	0		726180	1					
ANR	726249	CompoundStatement		19:23:346:346	726180	1					
ANR	726250	ExpressionStatement	init_size = ( pattern_end - pattern ) * 2	5283:4:119069:119108	726180	0	True				
ANR	726251	AssignmentExpression	init_size = ( pattern_end - pattern ) * 2		726180	0		=			
ANR	726252	Identifier	init_size		726180	0					
ANR	726253	MultiplicativeExpression	( pattern_end - pattern ) * 2		726180	1		*			
ANR	726254	AdditiveExpression	pattern_end - pattern		726180	0		-			
ANR	726255	Identifier	pattern_end		726180	0					
ANR	726256	Identifier	pattern		726180	1					
ANR	726257	PrimaryExpression	2		726180	1					
ANR	726258	IfStatement	if ( init_size <= 0 )		726180	1					
ANR	726259	Condition	init_size <= 0	5284:8:119118:119131	726180	0	True				
ANR	726260	RelationalExpression	init_size <= 0		726180	0		<=			
ANR	726261	Identifier	init_size		726180	0					
ANR	726262	PrimaryExpression	0		726180	1					
ANR	726263	ExpressionStatement	init_size = COMPILE_INIT_SIZE	5284:24:119134:119163	726180	1	True				
ANR	726264	AssignmentExpression	init_size = COMPILE_INIT_SIZE		726180	0		=			
ANR	726265	Identifier	init_size		726180	0					
ANR	726266	Identifier	COMPILE_INIT_SIZE		726180	1					
ANR	726267	ExpressionStatement	"r = BBUF_INIT ( reg , init_size )"	5285:4:119169:119198	726180	2	True				
ANR	726268	AssignmentExpression	"r = BBUF_INIT ( reg , init_size )"		726180	0		=			
ANR	726269	Identifier	r		726180	0					
ANR	726270	CallExpression	"BBUF_INIT ( reg , init_size )"		726180	1					
ANR	726271	Callee	BBUF_INIT		726180	0					
ANR	726272	Identifier	BBUF_INIT		726180	0					
ANR	726273	ArgumentList	reg		726180	1					
ANR	726274	Argument	reg		726180	0					
ANR	726275	Identifier	reg		726180	0					
ANR	726276	Argument	init_size		726180	1					
ANR	726277	Identifier	init_size		726180	0					
ANR	726278	IfStatement	if ( r != 0 )		726180	3					
ANR	726279	Condition	r != 0	5286:8:119208:119213	726180	0	True				
ANR	726280	EqualityExpression	r != 0		726180	0		!=			
ANR	726281	Identifier	r		726180	0					
ANR	726282	PrimaryExpression	0		726180	1					
ANR	726283	GotoStatement	goto end ;	5286:16:119216:119224	726180	1	True				
ANR	726284	Identifier	end		726180	0					
ANR	726285	ElseStatement	else		726180	0					
ANR	726286	ExpressionStatement	reg -> used = 0	5289:4:119241:119254	726180	0	True				
ANR	726287	AssignmentExpression	reg -> used = 0		726180	0		=			
ANR	726288	PtrMemberAccess	reg -> used		726180	0					
ANR	726289	Identifier	reg		726180	0					
ANR	726290	Identifier	used		726180	1					
ANR	726291	PrimaryExpression	0		726180	1					
ANR	726292	ExpressionStatement	reg -> num_mem = 0	5291:2:119259:119286	726180	11	True				
ANR	726293	AssignmentExpression	reg -> num_mem = 0		726180	0		=			
ANR	726294	PtrMemberAccess	reg -> num_mem		726180	0					
ANR	726295	Identifier	reg		726180	0					
ANR	726296	Identifier	num_mem		726180	1					
ANR	726297	PrimaryExpression	0		726180	1					
ANR	726298	ExpressionStatement	reg -> num_repeat = 0	5292:2:119290:119317	726180	12	True				
ANR	726299	AssignmentExpression	reg -> num_repeat = 0		726180	0		=			
ANR	726300	PtrMemberAccess	reg -> num_repeat		726180	0					
ANR	726301	Identifier	reg		726180	0					
ANR	726302	Identifier	num_repeat		726180	1					
ANR	726303	PrimaryExpression	0		726180	1					
ANR	726304	ExpressionStatement	reg -> num_null_check = 0	5293:2:119321:119348	726180	13	True				
ANR	726305	AssignmentExpression	reg -> num_null_check = 0		726180	0		=			
ANR	726306	PtrMemberAccess	reg -> num_null_check		726180	0					
ANR	726307	Identifier	reg		726180	0					
ANR	726308	Identifier	num_null_check		726180	1					
ANR	726309	PrimaryExpression	0		726180	1					
ANR	726310	ExpressionStatement	reg -> repeat_range_alloc = 0	5294:2:119352:119379	726180	14	True				
ANR	726311	AssignmentExpression	reg -> repeat_range_alloc = 0		726180	0		=			
ANR	726312	PtrMemberAccess	reg -> repeat_range_alloc		726180	0					
ANR	726313	Identifier	reg		726180	0					
ANR	726314	Identifier	repeat_range_alloc		726180	1					
ANR	726315	PrimaryExpression	0		726180	1					
ANR	726316	ExpressionStatement	reg -> repeat_range = ( OnigRepeatRange * ) NULL	5295:2:119383:119432	726180	15	True				
ANR	726317	AssignmentExpression	reg -> repeat_range = ( OnigRepeatRange * ) NULL		726180	0		=			
ANR	726318	PtrMemberAccess	reg -> repeat_range		726180	0					
ANR	726319	Identifier	reg		726180	0					
ANR	726320	Identifier	repeat_range		726180	1					
ANR	726321	CastExpression	( OnigRepeatRange * ) NULL		726180	1					
ANR	726322	CastTarget	OnigRepeatRange *		726180	0					
ANR	726323	Identifier	NULL		726180	1					
ANR	726324	ExpressionStatement	reg -> num_comb_exp_check = 0	5297:2:119475:119502	726180	16	True				
ANR	726325	AssignmentExpression	reg -> num_comb_exp_check = 0		726180	0		=			
ANR	726326	PtrMemberAccess	reg -> num_comb_exp_check		726180	0					
ANR	726327	Identifier	reg		726180	0					
ANR	726328	Identifier	num_comb_exp_check		726180	1					
ANR	726329	PrimaryExpression	0		726180	1					
ANR	726330	ExpressionStatement	"r = onig_parse_make_tree ( & root , pattern , pattern_end , reg , & scan_env )"	5300:2:119514:119583	726180	17	True				
ANR	726331	AssignmentExpression	"r = onig_parse_make_tree ( & root , pattern , pattern_end , reg , & scan_env )"		726180	0		=			
ANR	726332	Identifier	r		726180	0					
ANR	726333	CallExpression	"onig_parse_make_tree ( & root , pattern , pattern_end , reg , & scan_env )"		726180	1					
ANR	726334	Callee	onig_parse_make_tree		726180	0					
ANR	726335	Identifier	onig_parse_make_tree		726180	0					
ANR	726336	ArgumentList	& root		726180	1					
ANR	726337	Argument	& root		726180	0					
ANR	726338	UnaryOperationExpression	& root		726180	0					
ANR	726339	UnaryOperator	&		726180	0					
ANR	726340	Identifier	root		726180	1					
ANR	726341	Argument	pattern		726180	1					
ANR	726342	Identifier	pattern		726180	0					
ANR	726343	Argument	pattern_end		726180	2					
ANR	726344	Identifier	pattern_end		726180	0					
ANR	726345	Argument	reg		726180	3					
ANR	726346	Identifier	reg		726180	0					
ANR	726347	Argument	& scan_env		726180	4					
ANR	726348	UnaryOperationExpression	& scan_env		726180	0					
ANR	726349	UnaryOperator	&		726180	0					
ANR	726350	Identifier	scan_env		726180	1					
ANR	726351	IfStatement	if ( r != 0 )		726180	18					
ANR	726352	Condition	r != 0	5301:6:119591:119596	726180	0	True				
ANR	726353	EqualityExpression	r != 0		726180	0		!=			
ANR	726354	Identifier	r		726180	0					
ANR	726355	PrimaryExpression	0		726180	1					
ANR	726356	GotoStatement	goto err ;	5301:14:119599:119607	726180	1	True				
ANR	726357	Identifier	err		726180	0					
ANR	726358	IfStatement	"if ( scan_env . num_named > 0 && IS_SYNTAX_BV ( scan_env . syntax , ONIG_SYN_CAPTURE_ONLY_NAMED_GROUP ) && ! ONIG_IS_OPTION_ON ( reg -> options , ONIG_OPTION_CAPTURE_GROUP ) )"		726180	19					
ANR	726359	Condition	"scan_env . num_named > 0 && IS_SYNTAX_BV ( scan_env . syntax , ONIG_SYN_CAPTURE_ONLY_NAMED_GROUP ) && ! ONIG_IS_OPTION_ON ( reg -> options , ONIG_OPTION_CAPTURE_GROUP )"	5305:6:119688:119852	726180	0	True				
ANR	726360	AndExpression	"scan_env . num_named > 0 && IS_SYNTAX_BV ( scan_env . syntax , ONIG_SYN_CAPTURE_ONLY_NAMED_GROUP ) && ! ONIG_IS_OPTION_ON ( reg -> options , ONIG_OPTION_CAPTURE_GROUP )"		726180	0		&&			
ANR	726361	RelationalExpression	scan_env . num_named > 0		726180	0		>			
ANR	726362	MemberAccess	scan_env . num_named		726180	0					
ANR	726363	Identifier	scan_env		726180	0					
ANR	726364	Identifier	num_named		726180	1					
ANR	726365	PrimaryExpression	0		726180	1					
ANR	726366	AndExpression	"IS_SYNTAX_BV ( scan_env . syntax , ONIG_SYN_CAPTURE_ONLY_NAMED_GROUP ) && ! ONIG_IS_OPTION_ON ( reg -> options , ONIG_OPTION_CAPTURE_GROUP )"		726180	1		&&			
ANR	726367	CallExpression	"IS_SYNTAX_BV ( scan_env . syntax , ONIG_SYN_CAPTURE_ONLY_NAMED_GROUP )"		726180	0					
ANR	726368	Callee	IS_SYNTAX_BV		726180	0					
ANR	726369	Identifier	IS_SYNTAX_BV		726180	0					
ANR	726370	ArgumentList	scan_env . syntax		726180	1					
ANR	726371	Argument	scan_env . syntax		726180	0					
ANR	726372	MemberAccess	scan_env . syntax		726180	0					
ANR	726373	Identifier	scan_env		726180	0					
ANR	726374	Identifier	syntax		726180	1					
ANR	726375	Argument	ONIG_SYN_CAPTURE_ONLY_NAMED_GROUP		726180	1					
ANR	726376	Identifier	ONIG_SYN_CAPTURE_ONLY_NAMED_GROUP		726180	0					
ANR	726377	UnaryOperationExpression	"! ONIG_IS_OPTION_ON ( reg -> options , ONIG_OPTION_CAPTURE_GROUP )"		726180	1					
ANR	726378	UnaryOperator	!		726180	0					
ANR	726379	CallExpression	"ONIG_IS_OPTION_ON ( reg -> options , ONIG_OPTION_CAPTURE_GROUP )"		726180	1					
ANR	726380	Callee	ONIG_IS_OPTION_ON		726180	0					
ANR	726381	Identifier	ONIG_IS_OPTION_ON		726180	0					
ANR	726382	ArgumentList	reg -> options		726180	1					
ANR	726383	Argument	reg -> options		726180	0					
ANR	726384	PtrMemberAccess	reg -> options		726180	0					
ANR	726385	Identifier	reg		726180	0					
ANR	726386	Identifier	options		726180	1					
ANR	726387	Argument	ONIG_OPTION_CAPTURE_GROUP		726180	1					
ANR	726388	Identifier	ONIG_OPTION_CAPTURE_GROUP		726180	0					
ANR	726389	CompoundStatement		44:67:1138:1138	726180	1					
ANR	726390	IfStatement	if ( scan_env . num_named != scan_env . num_mem )		726180	0					
ANR	726391	Condition	scan_env . num_named != scan_env . num_mem	5308:8:119865:119902	726180	0	True				
ANR	726392	EqualityExpression	scan_env . num_named != scan_env . num_mem		726180	0		!=			
ANR	726393	MemberAccess	scan_env . num_named		726180	0					
ANR	726394	Identifier	scan_env		726180	0					
ANR	726395	Identifier	num_named		726180	1					
ANR	726396	MemberAccess	scan_env . num_mem		726180	1					
ANR	726397	Identifier	scan_env		726180	0					
ANR	726398	Identifier	num_mem		726180	1					
ANR	726399	ExpressionStatement	"r = disable_noname_group_capture ( & root , reg , & scan_env )"	5309:6:119911:119966	726180	1	True				
ANR	726400	AssignmentExpression	"r = disable_noname_group_capture ( & root , reg , & scan_env )"		726180	0		=			
ANR	726401	Identifier	r		726180	0					
ANR	726402	CallExpression	"disable_noname_group_capture ( & root , reg , & scan_env )"		726180	1					
ANR	726403	Callee	disable_noname_group_capture		726180	0					
ANR	726404	Identifier	disable_noname_group_capture		726180	0					
ANR	726405	ArgumentList	& root		726180	1					
ANR	726406	Argument	& root		726180	0					
ANR	726407	UnaryOperationExpression	& root		726180	0					
ANR	726408	UnaryOperator	&		726180	0					
ANR	726409	Identifier	root		726180	1					
ANR	726410	Argument	reg		726180	1					
ANR	726411	Identifier	reg		726180	0					
ANR	726412	Argument	& scan_env		726180	2					
ANR	726413	UnaryOperationExpression	& scan_env		726180	0					
ANR	726414	UnaryOperator	&		726180	0					
ANR	726415	Identifier	scan_env		726180	1					
ANR	726416	ElseStatement	else		726180	0					
ANR	726417	ExpressionStatement	r = numbered_ref_check ( root )	5311:6:119983:120011	726180	0	True				
ANR	726418	AssignmentExpression	r = numbered_ref_check ( root )		726180	0		=			
ANR	726419	Identifier	r		726180	0					
ANR	726420	CallExpression	numbered_ref_check ( root )		726180	1					
ANR	726421	Callee	numbered_ref_check		726180	0					
ANR	726422	Identifier	numbered_ref_check		726180	0					
ANR	726423	ArgumentList	root		726180	1					
ANR	726424	Argument	root		726180	0					
ANR	726425	Identifier	root		726180	0					
ANR	726426	IfStatement	if ( r != 0 )		726180	1					
ANR	726427	Condition	r != 0	5313:8:120022:120027	726180	0	True				
ANR	726428	EqualityExpression	r != 0		726180	0		!=			
ANR	726429	Identifier	r		726180	0					
ANR	726430	PrimaryExpression	0		726180	1					
ANR	726431	GotoStatement	goto err ;	5313:16:120030:120038	726180	1	True				
ANR	726432	Identifier	err		726180	0					
ANR	726433	IfStatement	if ( scan_env . num_call > 0 )		726180	20					
ANR	726434	Condition	scan_env . num_call > 0	5318:6:120081:120101	726180	0	True				
ANR	726435	RelationalExpression	scan_env . num_call > 0		726180	0		>			
ANR	726436	MemberAccess	scan_env . num_call		726180	0					
ANR	726437	Identifier	scan_env		726180	0					
ANR	726438	Identifier	num_call		726180	1					
ANR	726439	PrimaryExpression	0		726180	1					
ANR	726440	CompoundStatement		55:29:1387:1387	726180	1					
ANR	726441	ExpressionStatement	"r = unset_addr_list_init ( & uslist , scan_env . num_call )"	5319:4:120110:120162	726180	0	True				
ANR	726442	AssignmentExpression	"r = unset_addr_list_init ( & uslist , scan_env . num_call )"		726180	0		=			
ANR	726443	Identifier	r		726180	0					
ANR	726444	CallExpression	"unset_addr_list_init ( & uslist , scan_env . num_call )"		726180	1					
ANR	726445	Callee	unset_addr_list_init		726180	0					
ANR	726446	Identifier	unset_addr_list_init		726180	0					
ANR	726447	ArgumentList	& uslist		726180	1					
ANR	726448	Argument	& uslist		726180	0					
ANR	726449	UnaryOperationExpression	& uslist		726180	0					
ANR	726450	UnaryOperator	&		726180	0					
ANR	726451	Identifier	uslist		726180	1					
ANR	726452	Argument	scan_env . num_call		726180	1					
ANR	726453	MemberAccess	scan_env . num_call		726180	0					
ANR	726454	Identifier	scan_env		726180	0					
ANR	726455	Identifier	num_call		726180	1					
ANR	726456	IfStatement	if ( r != 0 )		726180	1					
ANR	726457	Condition	r != 0	5320:8:120172:120177	726180	0	True				
ANR	726458	EqualityExpression	r != 0		726180	0		!=			
ANR	726459	Identifier	r		726180	0					
ANR	726460	PrimaryExpression	0		726180	1					
ANR	726461	GotoStatement	goto err ;	5320:16:120180:120188	726180	1	True				
ANR	726462	Identifier	err		726180	0					
ANR	726463	ExpressionStatement	scan_env . unset_addr_list = & uslist	5321:4:120194:120228	726180	2	True				
ANR	726464	AssignmentExpression	scan_env . unset_addr_list = & uslist		726180	0		=			
ANR	726465	MemberAccess	scan_env . unset_addr_list		726180	0					
ANR	726466	Identifier	scan_env		726180	0					
ANR	726467	Identifier	unset_addr_list		726180	1					
ANR	726468	UnaryOperationExpression	& uslist		726180	1					
ANR	726469	UnaryOperator	&		726180	0					
ANR	726470	Identifier	uslist		726180	1					
ANR	726471	ExpressionStatement	"r = setup_subexp_call ( root , & scan_env )"	5322:4:120234:120272	726180	3	True				
ANR	726472	AssignmentExpression	"r = setup_subexp_call ( root , & scan_env )"		726180	0		=			
ANR	726473	Identifier	r		726180	0					
ANR	726474	CallExpression	"setup_subexp_call ( root , & scan_env )"		726180	1					
ANR	726475	Callee	setup_subexp_call		726180	0					
ANR	726476	Identifier	setup_subexp_call		726180	0					
ANR	726477	ArgumentList	root		726180	1					
ANR	726478	Argument	root		726180	0					
ANR	726479	Identifier	root		726180	0					
ANR	726480	Argument	& scan_env		726180	1					
ANR	726481	UnaryOperationExpression	& scan_env		726180	0					
ANR	726482	UnaryOperator	&		726180	0					
ANR	726483	Identifier	scan_env		726180	1					
ANR	726484	IfStatement	if ( r != 0 )		726180	4					
ANR	726485	Condition	r != 0	5323:8:120282:120287	726180	0	True				
ANR	726486	EqualityExpression	r != 0		726180	0		!=			
ANR	726487	Identifier	r		726180	0					
ANR	726488	PrimaryExpression	0		726180	1					
ANR	726489	GotoStatement	goto err_unset ;	5323:16:120290:120304	726180	1	True				
ANR	726490	Identifier	err_unset		726180	0					
ANR	726491	ExpressionStatement	"r = subexp_recursive_check_trav ( root , & scan_env )"	5324:4:120310:120358	726180	5	True				
ANR	726492	AssignmentExpression	"r = subexp_recursive_check_trav ( root , & scan_env )"		726180	0		=			
ANR	726493	Identifier	r		726180	0					
ANR	726494	CallExpression	"subexp_recursive_check_trav ( root , & scan_env )"		726180	1					
ANR	726495	Callee	subexp_recursive_check_trav		726180	0					
ANR	726496	Identifier	subexp_recursive_check_trav		726180	0					
ANR	726497	ArgumentList	root		726180	1					
ANR	726498	Argument	root		726180	0					
ANR	726499	Identifier	root		726180	0					
ANR	726500	Argument	& scan_env		726180	1					
ANR	726501	UnaryOperationExpression	& scan_env		726180	0					
ANR	726502	UnaryOperator	&		726180	0					
ANR	726503	Identifier	scan_env		726180	1					
ANR	726504	IfStatement	if ( r < 0 )		726180	6					
ANR	726505	Condition	r < 0	5325:8:120368:120373	726180	0	True				
ANR	726506	RelationalExpression	r < 0		726180	0		<			
ANR	726507	Identifier	r		726180	0					
ANR	726508	PrimaryExpression	0		726180	1					
ANR	726509	GotoStatement	goto err_unset ;	5325:16:120376:120390	726180	1	True				
ANR	726510	Identifier	err_unset		726180	0					
ANR	726511	ExpressionStatement	"r = subexp_inf_recursive_check_trav ( root , & scan_env )"	5326:4:120396:120448	726180	7	True				
ANR	726512	AssignmentExpression	"r = subexp_inf_recursive_check_trav ( root , & scan_env )"		726180	0		=			
ANR	726513	Identifier	r		726180	0					
ANR	726514	CallExpression	"subexp_inf_recursive_check_trav ( root , & scan_env )"		726180	1					
ANR	726515	Callee	subexp_inf_recursive_check_trav		726180	0					
ANR	726516	Identifier	subexp_inf_recursive_check_trav		726180	0					
ANR	726517	ArgumentList	root		726180	1					
ANR	726518	Argument	root		726180	0					
ANR	726519	Identifier	root		726180	0					
ANR	726520	Argument	& scan_env		726180	1					
ANR	726521	UnaryOperationExpression	& scan_env		726180	0					
ANR	726522	UnaryOperator	&		726180	0					
ANR	726523	Identifier	scan_env		726180	1					
ANR	726524	IfStatement	if ( r != 0 )		726180	8					
ANR	726525	Condition	r != 0	5327:8:120458:120463	726180	0	True				
ANR	726526	EqualityExpression	r != 0		726180	0		!=			
ANR	726527	Identifier	r		726180	0					
ANR	726528	PrimaryExpression	0		726180	1					
ANR	726529	GotoStatement	goto err_unset ;	5327:16:120466:120480	726180	1	True				
ANR	726530	Identifier	err_unset		726180	0					
ANR	726531	ExpressionStatement	reg -> num_call = scan_env . num_call	5329:4:120487:120520	726180	9	True				
ANR	726532	AssignmentExpression	reg -> num_call = scan_env . num_call		726180	0		=			
ANR	726533	PtrMemberAccess	reg -> num_call		726180	0					
ANR	726534	Identifier	reg		726180	0					
ANR	726535	Identifier	num_call		726180	1					
ANR	726536	MemberAccess	scan_env . num_call		726180	1					
ANR	726537	Identifier	scan_env		726180	0					
ANR	726538	Identifier	num_call		726180	1					
ANR	726539	ElseStatement	else		726180	0					
ANR	726540	ExpressionStatement	reg -> num_call = 0	5332:4:120537:120554	726180	0	True				
ANR	726541	AssignmentExpression	reg -> num_call = 0		726180	0		=			
ANR	726542	PtrMemberAccess	reg -> num_call		726180	0					
ANR	726543	Identifier	reg		726180	0					
ANR	726544	Identifier	num_call		726180	1					
ANR	726545	PrimaryExpression	0		726180	1					
ANR	726546	ExpressionStatement	"r = setup_tree ( root , reg , 0 , & scan_env )"	5335:2:120566:120605	726180	21	True				
ANR	726547	AssignmentExpression	"r = setup_tree ( root , reg , 0 , & scan_env )"		726180	0		=			
ANR	726548	Identifier	r		726180	0					
ANR	726549	CallExpression	"setup_tree ( root , reg , 0 , & scan_env )"		726180	1					
ANR	726550	Callee	setup_tree		726180	0					
ANR	726551	Identifier	setup_tree		726180	0					
ANR	726552	ArgumentList	root		726180	1					
ANR	726553	Argument	root		726180	0					
ANR	726554	Identifier	root		726180	0					
ANR	726555	Argument	reg		726180	1					
ANR	726556	Identifier	reg		726180	0					
ANR	726557	Argument	0		726180	2					
ANR	726558	PrimaryExpression	0		726180	0					
ANR	726559	Argument	& scan_env		726180	3					
ANR	726560	UnaryOperationExpression	& scan_env		726180	0					
ANR	726561	UnaryOperator	&		726180	0					
ANR	726562	Identifier	scan_env		726180	1					
ANR	726563	IfStatement	if ( r != 0 )		726180	22					
ANR	726564	Condition	r != 0	5336:6:120613:120618	726180	0	True				
ANR	726565	EqualityExpression	r != 0		726180	0		!=			
ANR	726566	Identifier	r		726180	0					
ANR	726567	PrimaryExpression	0		726180	1					
ANR	726568	GotoStatement	goto err_unset ;	5336:14:120621:120635	726180	1	True				
ANR	726569	Identifier	err_unset		726180	0					
ANR	726570	ExpressionStatement	"print_tree ( stderr , root )"	5339:2:120669:120693	726180	23	True				
ANR	726571	CallExpression	"print_tree ( stderr , root )"		726180	0					
ANR	726572	Callee	print_tree		726180	0					
ANR	726573	Identifier	print_tree		726180	0					
ANR	726574	ArgumentList	stderr		726180	1					
ANR	726575	Argument	stderr		726180	0					
ANR	726576	Identifier	stderr		726180	0					
ANR	726577	Argument	root		726180	1					
ANR	726578	Identifier	root		726180	0					
ANR	726579	ExpressionStatement	reg -> capture_history = scan_env . capture_history	5342:2:120705:120753	726180	24	True				
ANR	726580	AssignmentExpression	reg -> capture_history = scan_env . capture_history		726180	0		=			
ANR	726581	PtrMemberAccess	reg -> capture_history		726180	0					
ANR	726582	Identifier	reg		726180	0					
ANR	726583	Identifier	capture_history		726180	1					
ANR	726584	MemberAccess	scan_env . capture_history		726180	1					
ANR	726585	Identifier	scan_env		726180	0					
ANR	726586	Identifier	capture_history		726180	1					
ANR	726587	ExpressionStatement	reg -> bt_mem_start = scan_env . bt_mem_start	5343:2:120757:120802	726180	25	True				
ANR	726588	AssignmentExpression	reg -> bt_mem_start = scan_env . bt_mem_start		726180	0		=			
ANR	726589	PtrMemberAccess	reg -> bt_mem_start		726180	0					
ANR	726590	Identifier	reg		726180	0					
ANR	726591	Identifier	bt_mem_start		726180	1					
ANR	726592	MemberAccess	scan_env . bt_mem_start		726180	1					
ANR	726593	Identifier	scan_env		726180	0					
ANR	726594	Identifier	bt_mem_start		726180	1					
ANR	726595	ExpressionStatement	reg -> bt_mem_start |= reg -> capture_history	5344:2:120806:120850	726180	26	True				
ANR	726596	AssignmentExpression	reg -> bt_mem_start |= reg -> capture_history		726180	0		|=			
ANR	726597	PtrMemberAccess	reg -> bt_mem_start		726180	0					
ANR	726598	Identifier	reg		726180	0					
ANR	726599	Identifier	bt_mem_start		726180	1					
ANR	726600	PtrMemberAccess	reg -> capture_history		726180	1					
ANR	726601	Identifier	reg		726180	0					
ANR	726602	Identifier	capture_history		726180	1					
ANR	726603	IfStatement	if ( IS_FIND_CONDITION ( reg -> options ) )		726180	27					
ANR	726604	Condition	IS_FIND_CONDITION ( reg -> options )	5345:6:120858:120888	726180	0	True				
ANR	726605	CallExpression	IS_FIND_CONDITION ( reg -> options )		726180	0					
ANR	726606	Callee	IS_FIND_CONDITION		726180	0					
ANR	726607	Identifier	IS_FIND_CONDITION		726180	0					
ANR	726608	ArgumentList	reg -> options		726180	1					
ANR	726609	Argument	reg -> options		726180	0					
ANR	726610	PtrMemberAccess	reg -> options		726180	0					
ANR	726611	Identifier	reg		726180	0					
ANR	726612	Identifier	options		726180	1					
ANR	726613	ExpressionStatement	BIT_STATUS_ON_ALL ( reg -> bt_mem_end )	5346:4:120895:120929	726180	1	True				
ANR	726614	CallExpression	BIT_STATUS_ON_ALL ( reg -> bt_mem_end )		726180	0					
ANR	726615	Callee	BIT_STATUS_ON_ALL		726180	0					
ANR	726616	Identifier	BIT_STATUS_ON_ALL		726180	0					
ANR	726617	ArgumentList	reg -> bt_mem_end		726180	1					
ANR	726618	Argument	reg -> bt_mem_end		726180	0					
ANR	726619	PtrMemberAccess	reg -> bt_mem_end		726180	0					
ANR	726620	Identifier	reg		726180	0					
ANR	726621	Identifier	bt_mem_end		726180	1					
ANR	726622	ElseStatement	else		726180	0					
ANR	726623	CompoundStatement		84:7:2221:2221	726180	0					
ANR	726624	ExpressionStatement	reg -> bt_mem_end = scan_env . bt_mem_end	5348:4:120944:120982	726180	0	True				
ANR	726625	AssignmentExpression	reg -> bt_mem_end = scan_env . bt_mem_end		726180	0		=			
ANR	726626	PtrMemberAccess	reg -> bt_mem_end		726180	0					
ANR	726627	Identifier	reg		726180	0					
ANR	726628	Identifier	bt_mem_end		726180	1					
ANR	726629	MemberAccess	scan_env . bt_mem_end		726180	1					
ANR	726630	Identifier	scan_env		726180	0					
ANR	726631	Identifier	bt_mem_end		726180	1					
ANR	726632	ExpressionStatement	reg -> bt_mem_end |= reg -> capture_history	5349:4:120988:121027	726180	1	True				
ANR	726633	AssignmentExpression	reg -> bt_mem_end |= reg -> capture_history		726180	0		|=			
ANR	726634	PtrMemberAccess	reg -> bt_mem_end		726180	0					
ANR	726635	Identifier	reg		726180	0					
ANR	726636	Identifier	bt_mem_end		726180	1					
ANR	726637	PtrMemberAccess	reg -> capture_history		726180	1					
ANR	726638	Identifier	reg		726180	0					
ANR	726639	Identifier	capture_history		726180	1					
ANR	726640	Statement	if	5353:2:121075:121076	726180	28	True				
ANR	726641	Statement	(	5353:5:121078:121078	726180	29	True				
ANR	726642	Statement	scan_env	5353:6:121079:121086	726180	30	True				
ANR	726643	Statement	.	5353:14:121087:121087	726180	31	True				
ANR	726644	Statement	backrefed_mem	5353:15:121088:121100	726180	32	True				
ANR	726645	Statement	==	5353:29:121102:121103	726180	33	True				
ANR	726646	Statement	0	5353:32:121105:121105	726180	34	True				
ANR	726647	Statement	||	5355:6:121136:121137	726180	35	True				
ANR	726648	Statement	scan_env	5355:9:121139:121146	726180	36	True				
ANR	726649	Statement	.	5355:17:121147:121147	726180	37	True				
ANR	726650	Statement	num_call	5355:18:121148:121155	726180	38	True				
ANR	726651	Statement	==	5355:27:121157:121158	726180	39	True				
ANR	726652	Statement	0	5355:30:121160:121160	726180	40	True				
ANR	726653	Statement	)	5357:6:121175:121175	726180	41	True				
ANR	726654	CompoundStatement		94:8:2460:2460	726180	42					
ANR	726655	ExpressionStatement	"setup_comb_exp_check ( root , 0 , & scan_env )"	5358:4:121183:121223	726180	0	True				
ANR	726656	CallExpression	"setup_comb_exp_check ( root , 0 , & scan_env )"		726180	0					
ANR	726657	Callee	setup_comb_exp_check		726180	0					
ANR	726658	Identifier	setup_comb_exp_check		726180	0					
ANR	726659	ArgumentList	root		726180	1					
ANR	726660	Argument	root		726180	0					
ANR	726661	Identifier	root		726180	0					
ANR	726662	Argument	0		726180	1					
ANR	726663	PrimaryExpression	0		726180	0					
ANR	726664	Argument	& scan_env		726180	2					
ANR	726665	UnaryOperationExpression	& scan_env		726180	0					
ANR	726666	UnaryOperator	&		726180	0					
ANR	726667	Identifier	scan_env		726180	1					
ANR	726668	IfStatement	if ( scan_env . has_recursion != 0 )		726180	1					
ANR	726669	Condition	scan_env . has_recursion != 0	5360:8:121256:121282	726180	0	True				
ANR	726670	EqualityExpression	scan_env . has_recursion != 0		726180	0		!=			
ANR	726671	MemberAccess	scan_env . has_recursion		726180	0					
ANR	726672	Identifier	scan_env		726180	0					
ANR	726673	Identifier	has_recursion		726180	1					
ANR	726674	PrimaryExpression	0		726180	1					
ANR	726675	CompoundStatement		97:37:2568:2568	726180	1					
ANR	726676	ExpressionStatement	scan_env . num_comb_exp_check = 0	5361:6:121293:121324	726180	0	True				
ANR	726677	AssignmentExpression	scan_env . num_comb_exp_check = 0		726180	0		=			
ANR	726678	MemberAccess	scan_env . num_comb_exp_check		726180	0					
ANR	726679	Identifier	scan_env		726180	0					
ANR	726680	Identifier	num_comb_exp_check		726180	1					
ANR	726681	PrimaryExpression	0		726180	1					
ANR	726682	ElseStatement	else		726180	0					
ANR	726683	IfStatement	if ( scan_env . comb_exp_max_regnum > 0 )		726180	0					
ANR	726684	Condition	scan_env . comb_exp_max_regnum > 0	5365:8:121356:121387	726180	0	True				
ANR	726685	RelationalExpression	scan_env . comb_exp_max_regnum > 0		726180	0		>			
ANR	726686	MemberAccess	scan_env . comb_exp_max_regnum		726180	0					
ANR	726687	Identifier	scan_env		726180	0					
ANR	726688	Identifier	comb_exp_max_regnum		726180	1					
ANR	726689	PrimaryExpression	0		726180	1					
ANR	726690	CompoundStatement		103:6:2681:2686	726180	1					
ANR	726691	IdentifierDeclStatement	int i ;	5366:6:121398:121403	726180	0	True				
ANR	726692	IdentifierDecl	i		726180	0					
ANR	726693	IdentifierDeclType	int		726180	0					
ANR	726694	Identifier	i		726180	1					
ANR	726695	ForStatement	for ( i = 1 ; i <= scan_env . comb_exp_max_regnum ; i ++ )		726180	1					
ANR	726696	ForInit	i = 1 ;	5367:11:121416:121421	726180	0	True				
ANR	726697	AssignmentExpression	i = 1		726180	0		=			
ANR	726698	Identifier	i		726180	0					
ANR	726699	PrimaryExpression	1		726180	1					
ANR	726700	Condition	i <= scan_env . comb_exp_max_regnum	5367:18:121423:121455	726180	1	True				
ANR	726701	RelationalExpression	i <= scan_env . comb_exp_max_regnum		726180	0		<=			
ANR	726702	Identifier	i		726180	0					
ANR	726703	MemberAccess	scan_env . comb_exp_max_regnum		726180	1					
ANR	726704	Identifier	scan_env		726180	0					
ANR	726705	Identifier	comb_exp_max_regnum		726180	1					
ANR	726706	PostIncDecOperationExpression	i ++	5367:53:121458:121460	726180	2	True				
ANR	726707	Identifier	i		726180	0					
ANR	726708	IncDec	++		726180	1					
ANR	726709	CompoundStatement		104:58:2746:2746	726180	3					
ANR	726710	IfStatement	"if ( BIT_STATUS_AT ( scan_env . backrefed_mem , i ) != 0 )"		726180	0					
ANR	726711	Condition	"BIT_STATUS_AT ( scan_env . backrefed_mem , i ) != 0"	5368:5:121470:121514	726180	0	True				
ANR	726712	EqualityExpression	"BIT_STATUS_AT ( scan_env . backrefed_mem , i ) != 0"		726180	0		!=			
ANR	726713	CallExpression	"BIT_STATUS_AT ( scan_env . backrefed_mem , i )"		726180	0					
ANR	726714	Callee	BIT_STATUS_AT		726180	0					
ANR	726715	Identifier	BIT_STATUS_AT		726180	0					
ANR	726716	ArgumentList	scan_env . backrefed_mem		726180	1					
ANR	726717	Argument	scan_env . backrefed_mem		726180	0					
ANR	726718	MemberAccess	scan_env . backrefed_mem		726180	0					
ANR	726719	Identifier	scan_env		726180	0					
ANR	726720	Identifier	backrefed_mem		726180	1					
ANR	726721	Argument	i		726180	1					
ANR	726722	Identifier	i		726180	0					
ANR	726723	PrimaryExpression	0		726180	1					
ANR	726724	CompoundStatement		105:52:2800:2800	726180	1					
ANR	726725	ExpressionStatement	scan_env . num_comb_exp_check = 0	5369:3:121522:121553	726180	0	True				
ANR	726726	AssignmentExpression	scan_env . num_comb_exp_check = 0		726180	0		=			
ANR	726727	MemberAccess	scan_env . num_comb_exp_check		726180	0					
ANR	726728	Identifier	scan_env		726180	0					
ANR	726729	Identifier	num_comb_exp_check		726180	1					
ANR	726730	PrimaryExpression	0		726180	1					
ANR	726731	BreakStatement	break ;	5370:3:121558:121563	726180	1	True				
ANR	726732	ExpressionStatement	reg -> num_comb_exp_check = scan_env . num_comb_exp_check	5376:2:121589:121642	726180	43	True				
ANR	726733	AssignmentExpression	reg -> num_comb_exp_check = scan_env . num_comb_exp_check		726180	0		=			
ANR	726734	PtrMemberAccess	reg -> num_comb_exp_check		726180	0					
ANR	726735	Identifier	reg		726180	0					
ANR	726736	Identifier	num_comb_exp_check		726180	1					
ANR	726737	MemberAccess	scan_env . num_comb_exp_check		726180	1					
ANR	726738	Identifier	scan_env		726180	0					
ANR	726739	Identifier	num_comb_exp_check		726180	1					
ANR	726740	ExpressionStatement	clear_optimize_info ( reg )	5379:2:121654:121678	726180	44	True				
ANR	726741	CallExpression	clear_optimize_info ( reg )		726180	0					
ANR	726742	Callee	clear_optimize_info		726180	0					
ANR	726743	Identifier	clear_optimize_info		726180	0					
ANR	726744	ArgumentList	reg		726180	1					
ANR	726745	Argument	reg		726180	0					
ANR	726746	Identifier	reg		726180	0					
ANR	726747	ExpressionStatement	"r = set_optimize_info_from_tree ( root , reg , & scan_env )"	5381:2:121709:121762	726180	45	True				
ANR	726748	AssignmentExpression	"r = set_optimize_info_from_tree ( root , reg , & scan_env )"		726180	0		=			
ANR	726749	Identifier	r		726180	0					
ANR	726750	CallExpression	"set_optimize_info_from_tree ( root , reg , & scan_env )"		726180	1					
ANR	726751	Callee	set_optimize_info_from_tree		726180	0					
ANR	726752	Identifier	set_optimize_info_from_tree		726180	0					
ANR	726753	ArgumentList	root		726180	1					
ANR	726754	Argument	root		726180	0					
ANR	726755	Identifier	root		726180	0					
ANR	726756	Argument	reg		726180	1					
ANR	726757	Identifier	reg		726180	0					
ANR	726758	Argument	& scan_env		726180	2					
ANR	726759	UnaryOperationExpression	& scan_env		726180	0					
ANR	726760	UnaryOperator	&		726180	0					
ANR	726761	Identifier	scan_env		726180	1					
ANR	726762	IfStatement	if ( r != 0 )		726180	46					
ANR	726763	Condition	r != 0	5382:6:121770:121775	726180	0	True				
ANR	726764	EqualityExpression	r != 0		726180	0		!=			
ANR	726765	Identifier	r		726180	0					
ANR	726766	PrimaryExpression	0		726180	1					
ANR	726767	GotoStatement	goto err_unset ;	5382:14:121778:121792	726180	1	True				
ANR	726768	Identifier	err_unset		726180	0					
ANR	726769	IfStatement	if ( IS_NOT_NULL ( scan_env . mem_nodes_dynamic ) )		726180	47					
ANR	726770	Condition	IS_NOT_NULL ( scan_env . mem_nodes_dynamic )	5385:6:121808:121846	726180	0	True				
ANR	726771	CallExpression	IS_NOT_NULL ( scan_env . mem_nodes_dynamic )		726180	0					
ANR	726772	Callee	IS_NOT_NULL		726180	0					
ANR	726773	Identifier	IS_NOT_NULL		726180	0					
ANR	726774	ArgumentList	scan_env . mem_nodes_dynamic		726180	1					
ANR	726775	Argument	scan_env . mem_nodes_dynamic		726180	0					
ANR	726776	MemberAccess	scan_env . mem_nodes_dynamic		726180	0					
ANR	726777	Identifier	scan_env		726180	0					
ANR	726778	Identifier	mem_nodes_dynamic		726180	1					
ANR	726779	CompoundStatement		122:47:3132:3132	726180	1					
ANR	726780	ExpressionStatement	xfree ( scan_env . mem_nodes_dynamic )	5386:4:121855:121888	726180	0	True				
ANR	726781	CallExpression	xfree ( scan_env . mem_nodes_dynamic )		726180	0					
ANR	726782	Callee	xfree		726180	0					
ANR	726783	Identifier	xfree		726180	0					
ANR	726784	ArgumentList	scan_env . mem_nodes_dynamic		726180	1					
ANR	726785	Argument	scan_env . mem_nodes_dynamic		726180	0					
ANR	726786	MemberAccess	scan_env . mem_nodes_dynamic		726180	0					
ANR	726787	Identifier	scan_env		726180	0					
ANR	726788	Identifier	mem_nodes_dynamic		726180	1					
ANR	726789	ExpressionStatement	scan_env . mem_nodes_dynamic = ( Node * * ) NULL	5387:4:121894:121936	726180	1	True				
ANR	726790	AssignmentExpression	scan_env . mem_nodes_dynamic = ( Node * * ) NULL		726180	0		=			
ANR	726791	MemberAccess	scan_env . mem_nodes_dynamic		726180	0					
ANR	726792	Identifier	scan_env		726180	0					
ANR	726793	Identifier	mem_nodes_dynamic		726180	1					
ANR	726794	CastExpression	( Node * * ) NULL		726180	1					
ANR	726795	CastTarget	Node * *		726180	0					
ANR	726796	Identifier	NULL		726180	1					
ANR	726797	ExpressionStatement	"r = compile_tree ( root , reg )"	5390:2:121945:121972	726180	48	True				
ANR	726798	AssignmentExpression	"r = compile_tree ( root , reg )"		726180	0		=			
ANR	726799	Identifier	r		726180	0					
ANR	726800	CallExpression	"compile_tree ( root , reg )"		726180	1					
ANR	726801	Callee	compile_tree		726180	0					
ANR	726802	Identifier	compile_tree		726180	0					
ANR	726803	ArgumentList	root		726180	1					
ANR	726804	Argument	root		726180	0					
ANR	726805	Identifier	root		726180	0					
ANR	726806	Argument	reg		726180	1					
ANR	726807	Identifier	reg		726180	0					
ANR	726808	IfStatement	if ( r == 0 )		726180	49					
ANR	726809	Condition	r == 0	5391:6:121980:121985	726180	0	True				
ANR	726810	EqualityExpression	r == 0		726180	0		==			
ANR	726811	Identifier	r		726180	0					
ANR	726812	PrimaryExpression	0		726180	1					
ANR	726813	CompoundStatement		128:14:3271:3271	726180	1					
ANR	726814	ExpressionStatement	"r = add_opcode ( reg , OP_END )"	5392:4:121994:122021	726180	0	True				
ANR	726815	AssignmentExpression	"r = add_opcode ( reg , OP_END )"		726180	0		=			
ANR	726816	Identifier	r		726180	0					
ANR	726817	CallExpression	"add_opcode ( reg , OP_END )"		726180	1					
ANR	726818	Callee	add_opcode		726180	0					
ANR	726819	Identifier	add_opcode		726180	0					
ANR	726820	ArgumentList	reg		726180	1					
ANR	726821	Argument	reg		726180	0					
ANR	726822	Identifier	reg		726180	0					
ANR	726823	Argument	OP_END		726180	1					
ANR	726824	Identifier	OP_END		726180	0					
ANR	726825	IfStatement	if ( scan_env . num_call > 0 )		726180	1					
ANR	726826	Condition	scan_env . num_call > 0	5394:8:122054:122074	726180	0	True				
ANR	726827	RelationalExpression	scan_env . num_call > 0		726180	0		>			
ANR	726828	MemberAccess	scan_env . num_call		726180	0					
ANR	726829	Identifier	scan_env		726180	0					
ANR	726830	Identifier	num_call		726180	1					
ANR	726831	PrimaryExpression	0		726180	1					
ANR	726832	CompoundStatement		131:31:3360:3360	726180	1					
ANR	726833	ExpressionStatement	"r = unset_addr_list_fix ( & uslist , reg )"	5395:6:122085:122122	726180	0	True				
ANR	726834	AssignmentExpression	"r = unset_addr_list_fix ( & uslist , reg )"		726180	0		=			
ANR	726835	Identifier	r		726180	0					
ANR	726836	CallExpression	"unset_addr_list_fix ( & uslist , reg )"		726180	1					
ANR	726837	Callee	unset_addr_list_fix		726180	0					
ANR	726838	Identifier	unset_addr_list_fix		726180	0					
ANR	726839	ArgumentList	& uslist		726180	1					
ANR	726840	Argument	& uslist		726180	0					
ANR	726841	UnaryOperationExpression	& uslist		726180	0					
ANR	726842	UnaryOperator	&		726180	0					
ANR	726843	Identifier	uslist		726180	1					
ANR	726844	Argument	reg		726180	1					
ANR	726845	Identifier	reg		726180	0					
ANR	726846	ExpressionStatement	unset_addr_list_end ( & uslist )	5396:6:122130:122158	726180	1	True				
ANR	726847	CallExpression	unset_addr_list_end ( & uslist )		726180	0					
ANR	726848	Callee	unset_addr_list_end		726180	0					
ANR	726849	Identifier	unset_addr_list_end		726180	0					
ANR	726850	ArgumentList	& uslist		726180	1					
ANR	726851	Argument	& uslist		726180	0					
ANR	726852	UnaryOperationExpression	& uslist		726180	0					
ANR	726853	UnaryOperator	&		726180	0					
ANR	726854	Identifier	uslist		726180	1					
ANR	726855	IfStatement	if ( r )		726180	2					
ANR	726856	Condition	r	5397:10:122170:122170	726180	0	True				
ANR	726857	Identifier	r		726180	0					
ANR	726858	GotoStatement	goto err ;	5397:13:122173:122181	726180	1	True				
ANR	726859	Identifier	err		726180	0					
ANR	726860	IfStatement	if ( ( reg -> num_repeat != 0 ) || ( reg -> bt_mem_end != 0 ) )		726180	2					
ANR	726861	Condition	( reg -> num_repeat != 0 ) || ( reg -> bt_mem_end != 0 )	5401:8:122205:122252	726180	0	True				
ANR	726862	OrExpression	( reg -> num_repeat != 0 ) || ( reg -> bt_mem_end != 0 )		726180	0		||			
ANR	726863	EqualityExpression	reg -> num_repeat != 0		726180	0		!=			
ANR	726864	PtrMemberAccess	reg -> num_repeat		726180	0					
ANR	726865	Identifier	reg		726180	0					
ANR	726866	Identifier	num_repeat		726180	1					
ANR	726867	PrimaryExpression	0		726180	1					
ANR	726868	EqualityExpression	reg -> bt_mem_end != 0		726180	1		!=			
ANR	726869	PtrMemberAccess	reg -> bt_mem_end		726180	0					
ANR	726870	Identifier	reg		726180	0					
ANR	726871	Identifier	bt_mem_end		726180	1					
ANR	726872	PrimaryExpression	0		726180	1					
ANR	726873	ExpressionStatement	reg -> stack_pop_level = STACK_POP_LEVEL_ALL	5402:6:122261:122303	726180	1	True				
ANR	726874	AssignmentExpression	reg -> stack_pop_level = STACK_POP_LEVEL_ALL		726180	0		=			
ANR	726875	PtrMemberAccess	reg -> stack_pop_level		726180	0					
ANR	726876	Identifier	reg		726180	0					
ANR	726877	Identifier	stack_pop_level		726180	1					
ANR	726878	Identifier	STACK_POP_LEVEL_ALL		726180	1					
ANR	726879	ElseStatement	else		726180	0					
ANR	726880	CompoundStatement		140:9:3597:3597	726180	0					
ANR	726881	IfStatement	if ( reg -> bt_mem_start != 0 )		726180	0					
ANR	726882	Condition	reg -> bt_mem_start != 0	5404:10:122326:122347	726180	0	True				
ANR	726883	EqualityExpression	reg -> bt_mem_start != 0		726180	0		!=			
ANR	726884	PtrMemberAccess	reg -> bt_mem_start		726180	0					
ANR	726885	Identifier	reg		726180	0					
ANR	726886	Identifier	bt_mem_start		726180	1					
ANR	726887	PrimaryExpression	0		726180	1					
ANR	726888	ExpressionStatement	reg -> stack_pop_level = STACK_POP_LEVEL_MEM_START	5405:1:122351:122399	726180	1	True				
ANR	726889	AssignmentExpression	reg -> stack_pop_level = STACK_POP_LEVEL_MEM_START		726180	0		=			
ANR	726890	PtrMemberAccess	reg -> stack_pop_level		726180	0					
ANR	726891	Identifier	reg		726180	0					
ANR	726892	Identifier	stack_pop_level		726180	1					
ANR	726893	Identifier	STACK_POP_LEVEL_MEM_START		726180	1					
ANR	726894	ElseStatement	else		726180	0					
ANR	726895	ExpressionStatement	reg -> stack_pop_level = STACK_POP_LEVEL_FREE	5407:1:122413:122456	726180	0	True				
ANR	726896	AssignmentExpression	reg -> stack_pop_level = STACK_POP_LEVEL_FREE		726180	0		=			
ANR	726897	PtrMemberAccess	reg -> stack_pop_level		726180	0					
ANR	726898	Identifier	reg		726180	0					
ANR	726899	Identifier	stack_pop_level		726180	1					
ANR	726900	Identifier	STACK_POP_LEVEL_FREE		726180	1					
ANR	726901	ElseStatement	else		726180	0					
ANR	726902	IfStatement	if ( scan_env . num_call > 0 )		726180	0					
ANR	726903	Condition	scan_env . num_call > 0	5411:11:122502:122522	726180	0	True				
ANR	726904	RelationalExpression	scan_env . num_call > 0		726180	0		>			
ANR	726905	MemberAccess	scan_env . num_call		726180	0					
ANR	726906	Identifier	scan_env		726180	0					
ANR	726907	Identifier	num_call		726180	1					
ANR	726908	PrimaryExpression	0		726180	1					
ANR	726909	CompoundStatement		148:34:3808:3808	726180	1					
ANR	726910	ExpressionStatement	unset_addr_list_end ( & uslist )	5412:4:122531:122559	726180	0	True				
ANR	726911	CallExpression	unset_addr_list_end ( & uslist )		726180	0					
ANR	726912	Callee	unset_addr_list_end		726180	0					
ANR	726913	Identifier	unset_addr_list_end		726180	0					
ANR	726914	ArgumentList	& uslist		726180	1					
ANR	726915	Argument	& uslist		726180	0					
ANR	726916	UnaryOperationExpression	& uslist		726180	0					
ANR	726917	UnaryOperator	&		726180	0					
ANR	726918	Identifier	uslist		726180	1					
ANR	726919	ExpressionStatement	onig_node_free ( root )	5415:2:122574:122594	726180	50	True				
ANR	726920	CallExpression	onig_node_free ( root )		726180	0					
ANR	726921	Callee	onig_node_free		726180	0					
ANR	726922	Identifier	onig_node_free		726180	0					
ANR	726923	ArgumentList	root		726180	1					
ANR	726924	Argument	root		726180	0					
ANR	726925	Identifier	root		726180	0					
ANR	726926	ExpressionStatement	"onig_print_names ( stderr , reg )"	5419:2:122648:122677	726180	51	True				
ANR	726927	CallExpression	"onig_print_names ( stderr , reg )"		726180	0					
ANR	726928	Callee	onig_print_names		726180	0					
ANR	726929	Identifier	onig_print_names		726180	0					
ANR	726930	ArgumentList	stderr		726180	1					
ANR	726931	Argument	stderr		726180	0					
ANR	726932	Identifier	stderr		726180	0					
ANR	726933	Argument	reg		726180	1					
ANR	726934	Identifier	reg		726180	0					
ANR	726935	ExpressionStatement	"print_compiled_byte_code_list ( stderr , reg )"	5421:2:122688:122730	726180	52	True				
ANR	726936	CallExpression	"print_compiled_byte_code_list ( stderr , reg )"		726180	0					
ANR	726937	Callee	print_compiled_byte_code_list		726180	0					
ANR	726938	Identifier	print_compiled_byte_code_list		726180	0					
ANR	726939	ArgumentList	stderr		726180	1					
ANR	726940	Argument	stderr		726180	0					
ANR	726941	Identifier	stderr		726180	0					
ANR	726942	Argument	reg		726180	1					
ANR	726943	Identifier	reg		726180	0					
ANR	726944	Label	end :	5424:1:122741:122744	726180	53	True				
ANR	726945	Identifier	end		726180	0					
ANR	726946	ExpressionStatement	reg -> state = ONIG_STATE_NORMAL	5425:2:122748:122778	726180	54	True				
ANR	726947	AssignmentExpression	reg -> state = ONIG_STATE_NORMAL		726180	0		=			
ANR	726948	PtrMemberAccess	reg -> state		726180	0					
ANR	726949	Identifier	reg		726180	0					
ANR	726950	Identifier	state		726180	1					
ANR	726951	Identifier	ONIG_STATE_NORMAL		726180	1					
ANR	726952	ReturnStatement	return r ;	5426:2:122782:122790	726180	55	True				
ANR	726953	Identifier	r		726180	0					
ANR	726954	Label	err_unset :	5428:1:122794:122803	726180	56	True				
ANR	726955	Identifier	err_unset		726180	0					
ANR	726956	IfStatement	if ( scan_env . num_call > 0 )		726180	57					
ANR	726957	Condition	scan_env . num_call > 0	5430:6:122834:122854	726180	0	True				
ANR	726958	RelationalExpression	scan_env . num_call > 0		726180	0		>			
ANR	726959	MemberAccess	scan_env . num_call		726180	0					
ANR	726960	Identifier	scan_env		726180	0					
ANR	726961	Identifier	num_call		726180	1					
ANR	726962	PrimaryExpression	0		726180	1					
ANR	726963	CompoundStatement		167:29:4140:4140	726180	1					
ANR	726964	ExpressionStatement	unset_addr_list_end ( & uslist )	5431:4:122863:122891	726180	0	True				
ANR	726965	CallExpression	unset_addr_list_end ( & uslist )		726180	0					
ANR	726966	Callee	unset_addr_list_end		726180	0					
ANR	726967	Identifier	unset_addr_list_end		726180	0					
ANR	726968	ArgumentList	& uslist		726180	1					
ANR	726969	Argument	& uslist		726180	0					
ANR	726970	UnaryOperationExpression	& uslist		726180	0					
ANR	726971	UnaryOperator	&		726180	0					
ANR	726972	Identifier	uslist		726180	1					
ANR	726973	Label	err :	5434:1:122905:122908	726180	58	True				
ANR	726974	Identifier	err		726180	0					
ANR	726975	IfStatement	if ( IS_NOT_NULL ( scan_env . error ) )		726180	59					
ANR	726976	Condition	IS_NOT_NULL ( scan_env . error )	5435:6:122916:122942	726180	0	True				
ANR	726977	CallExpression	IS_NOT_NULL ( scan_env . error )		726180	0					
ANR	726978	Callee	IS_NOT_NULL		726180	0					
ANR	726979	Identifier	IS_NOT_NULL		726180	0					
ANR	726980	ArgumentList	scan_env . error		726180	1					
ANR	726981	Argument	scan_env . error		726180	0					
ANR	726982	MemberAccess	scan_env . error		726180	0					
ANR	726983	Identifier	scan_env		726180	0					
ANR	726984	Identifier	error		726180	1					
ANR	726985	CompoundStatement		172:35:4228:4228	726180	1					
ANR	726986	IfStatement	if ( IS_NOT_NULL ( einfo ) )		726180	0					
ANR	726987	Condition	IS_NOT_NULL ( einfo )	5436:8:122955:122972	726180	0	True				
ANR	726988	CallExpression	IS_NOT_NULL ( einfo )		726180	0					
ANR	726989	Callee	IS_NOT_NULL		726180	0					
ANR	726990	Identifier	IS_NOT_NULL		726180	0					
ANR	726991	ArgumentList	einfo		726180	1					
ANR	726992	Argument	einfo		726180	0					
ANR	726993	Identifier	einfo		726180	0					
ANR	726994	CompoundStatement		173:28:4258:4258	726180	1					
ANR	726995	ExpressionStatement	einfo -> enc = scan_env . enc	5437:6:122983:123012	726180	0	True				
ANR	726996	AssignmentExpression	einfo -> enc = scan_env . enc		726180	0		=			
ANR	726997	PtrMemberAccess	einfo -> enc		726180	0					
ANR	726998	Identifier	einfo		726180	0					
ANR	726999	Identifier	enc		726180	1					
ANR	727000	MemberAccess	scan_env . enc		726180	1					
ANR	727001	Identifier	scan_env		726180	0					
ANR	727002	Identifier	enc		726180	1					
ANR	727003	ExpressionStatement	einfo -> par = scan_env . error	5438:6:123020:123051	726180	1	True				
ANR	727004	AssignmentExpression	einfo -> par = scan_env . error		726180	0		=			
ANR	727005	PtrMemberAccess	einfo -> par		726180	0					
ANR	727006	Identifier	einfo		726180	0					
ANR	727007	Identifier	par		726180	1					
ANR	727008	MemberAccess	scan_env . error		726180	1					
ANR	727009	Identifier	scan_env		726180	0					
ANR	727010	Identifier	error		726180	1					
ANR	727011	ExpressionStatement	einfo -> par_end = scan_env . error_end	5439:6:123059:123094	726180	2	True				
ANR	727012	AssignmentExpression	einfo -> par_end = scan_env . error_end		726180	0		=			
ANR	727013	PtrMemberAccess	einfo -> par_end		726180	0					
ANR	727014	Identifier	einfo		726180	0					
ANR	727015	Identifier	par_end		726180	1					
ANR	727016	MemberAccess	scan_env . error_end		726180	1					
ANR	727017	Identifier	scan_env		726180	0					
ANR	727018	Identifier	error_end		726180	1					
ANR	727019	ExpressionStatement	onig_node_free ( root )	5443:2:123109:123129	726180	60	True				
ANR	727020	CallExpression	onig_node_free ( root )		726180	0					
ANR	727021	Callee	onig_node_free		726180	0					
ANR	727022	Identifier	onig_node_free		726180	0					
ANR	727023	ArgumentList	root		726180	1					
ANR	727024	Argument	root		726180	0					
ANR	727025	Identifier	root		726180	0					
ANR	727026	IfStatement	if ( IS_NOT_NULL ( scan_env . mem_nodes_dynamic ) )		726180	61					
ANR	727027	Condition	IS_NOT_NULL ( scan_env . mem_nodes_dynamic )	5444:6:123137:123175	726180	0	True				
ANR	727028	CallExpression	IS_NOT_NULL ( scan_env . mem_nodes_dynamic )		726180	0					
ANR	727029	Callee	IS_NOT_NULL		726180	0					
ANR	727030	Identifier	IS_NOT_NULL		726180	0					
ANR	727031	ArgumentList	scan_env . mem_nodes_dynamic		726180	1					
ANR	727032	Argument	scan_env . mem_nodes_dynamic		726180	0					
ANR	727033	MemberAccess	scan_env . mem_nodes_dynamic		726180	0					
ANR	727034	Identifier	scan_env		726180	0					
ANR	727035	Identifier	mem_nodes_dynamic		726180	1					
ANR	727036	ExpressionStatement	xfree ( scan_env . mem_nodes_dynamic )	5445:6:123184:123217	726180	1	True				
ANR	727037	CallExpression	xfree ( scan_env . mem_nodes_dynamic )		726180	0					
ANR	727038	Callee	xfree		726180	0					
ANR	727039	Identifier	xfree		726180	0					
ANR	727040	ArgumentList	scan_env . mem_nodes_dynamic		726180	1					
ANR	727041	Argument	scan_env . mem_nodes_dynamic		726180	0					
ANR	727042	MemberAccess	scan_env . mem_nodes_dynamic		726180	0					
ANR	727043	Identifier	scan_env		726180	0					
ANR	727044	Identifier	mem_nodes_dynamic		726180	1					
ANR	727045	ReturnStatement	return r ;	5446:2:123221:123229	726180	62	True				
ANR	727046	Identifier	r		726180	0					
ANR	727047	ReturnType	extern int		726180	1					
ANR	727048	Identifier	onig_compile		726180	2					
ANR	727049	ParameterList	"regex_t * reg , const UChar * pattern , const UChar * pattern_end , OnigErrorInfo * einfo"		726180	3					
ANR	727050	Parameter	regex_t * reg	5262:13:118625:118636	726180	0	True				
ANR	727051	ParameterType	regex_t *		726180	0					
ANR	727052	Identifier	reg		726180	1					
ANR	727053	Parameter	const UChar * pattern	5262:27:118639:118658	726180	1	True				
ANR	727054	ParameterType	const UChar *		726180	0					
ANR	727055	Identifier	pattern		726180	1					
ANR	727056	Parameter	const UChar * pattern_end	5262:49:118661:118684	726180	2	True				
ANR	727057	ParameterType	const UChar *		726180	0					
ANR	727058	Identifier	pattern_end		726180	1					
ANR	727059	Parameter	OnigErrorInfo * einfo	5263:7:118694:118713	726180	3	True				
ANR	727060	ParameterType	OnigErrorInfo *		726180	0					
ANR	727061	Identifier	einfo		726180	1					
ANR	727062	CFGEntryNode	ENTRY		726180		True				
ANR	727063	CFGExitNode	EXIT		726180		True				
ANR	727064	Symbol	& scan_env		726180						
ANR	727065	Symbol	scan_env . backrefed_mem		726180						
ANR	727066	Symbol	reg -> state		726180						
ANR	727067	Symbol	scan_env . enc		726180						
ANR	727068	Symbol	scan_env . comb_exp_max_regnum		726180						
ANR	727069	Symbol	einfo -> par_end		726180						
ANR	727070	Symbol	disable_noname_group_capture		726180						
ANR	727071	Symbol	scan_env . capture_history		726180						
ANR	727072	Symbol	scan_env . syntax		726180						
ANR	727073	Symbol	scan_env . num_mem		726180						
ANR	727074	Symbol	uslist		726180						
ANR	727075	Symbol	setup_subexp_call		726180						
ANR	727076	Symbol	onig_parse_make_tree		726180						
ANR	727077	Symbol	ONIG_SYN_CAPTURE_ONLY_NAMED_GROUP		726180						
ANR	727078	Symbol	& uslist		726180						
ANR	727079	Symbol	reg		726180						
ANR	727080	Symbol	reg -> options		726180						
ANR	727081	Symbol	IS_SYNTAX_BV		726180						
ANR	727082	Symbol	add_opcode		726180						
ANR	727083	Symbol	scan_env . unset_addr_list		726180						
ANR	727084	Symbol	ONIG_STATE_COMPILING		726180						
ANR	727085	Symbol	IS_FIND_CONDITION		726180						
ANR	727086	Symbol	BIT_STATUS_AT		726180						
ANR	727087	Symbol	reg -> stack_pop_level		726180						
ANR	727088	Symbol	NULL		726180						
ANR	727089	Symbol	subexp_inf_recursive_check_trav		726180						
ANR	727090	Symbol	scan_env . bt_mem_start		726180						
ANR	727091	Symbol	pattern_end		726180						
ANR	727092	Symbol	reg -> capture_history		726180						
ANR	727093	Symbol	stderr		726180						
ANR	727094	Symbol	reg -> enc		726180						
ANR	727095	Symbol	reg -> num_null_check		726180						
ANR	727096	Symbol	scan_env . num_named		726180						
ANR	727097	Symbol	unset_addr_list_fix		726180						
ANR	727098	Symbol	einfo -> par		726180						
ANR	727099	Symbol	numbered_ref_check		726180						
ANR	727100	Symbol	* einfo		726180						
ANR	727101	Symbol	scan_env . num_comb_exp_check		726180						
ANR	727102	Symbol	OP_END		726180						
ANR	727103	Symbol	ONIG_STATE_NORMAL		726180						
ANR	727104	Symbol	IS_NOT_NULL		726180						
ANR	727105	Symbol	reg -> repeat_range		726180						
ANR	727106	Symbol	pattern		726180						
ANR	727107	Symbol	scan_env . bt_mem_end		726180						
ANR	727108	Symbol	BBUF_INIT		726180						
ANR	727109	Symbol	STACK_POP_LEVEL_FREE		726180						
ANR	727110	Symbol	& root		726180						
ANR	727111	Symbol	einfo		726180						
ANR	727112	Symbol	reg -> repeat_range_alloc		726180						
ANR	727113	Symbol	reg -> bt_mem_end		726180						
ANR	727114	Symbol	STACK_POP_LEVEL_MEM_START		726180						
ANR	727115	Symbol	root		726180						
ANR	727116	Symbol	reg -> num_comb_exp_check		726180						
ANR	727117	Symbol	scan_env . mem_nodes_dynamic		726180						
ANR	727118	Symbol	scan_env		726180						
ANR	727119	Symbol	reg -> num_mem		726180						
ANR	727120	Symbol	scan_env . error_end		726180						
ANR	727121	Symbol	COMPILE_INIT_SIZE		726180						
ANR	727122	Symbol	unset_addr_list_init		726180						
ANR	727123	Symbol	ONIG_IS_OPTION_ON		726180						
ANR	727124	Symbol	set_optimize_info_from_tree		726180						
ANR	727125	Symbol	i		726180						
ANR	727126	Symbol	reg -> num_call		726180						
ANR	727127	Symbol	scan_env . num_call		726180						
ANR	727128	Symbol	ONIG_OPTION_CAPTURE_GROUP		726180						
ANR	727129	Symbol	setup_tree		726180						
ANR	727130	Symbol	STACK_POP_LEVEL_ALL		726180						
ANR	727131	Symbol	r		726180						
ANR	727132	Symbol	init_size		726180						
ANR	727133	Symbol	compile_tree		726180						
ANR	727134	Symbol	reg -> bt_mem_start		726180						
ANR	727135	Symbol	scan_env . has_recursion		726180						
ANR	727136	Symbol	scan_env . error		726180						
ANR	727137	Symbol	subexp_recursive_check_trav		726180						
ANR	727138	Symbol	einfo -> enc		726180						
ANR	727139	Symbol	* reg		726180						
ANR	727140	Symbol	reg -> alloc		726180						
ANR	727141	Symbol	reg -> used		726180						
ANR	727142	Symbol	reg -> num_repeat		726180						
ANR	727143	Function	onig_recompile	5450:0:123259:123718							
ANR	727144	FunctionDef	"onig_recompile (regex_t * reg , const UChar * pattern , const UChar * pattern_end , OnigOptionType option , OnigEncoding enc , OnigSyntaxType * syntax , OnigErrorInfo * einfo)"		727143	0					
ANR	727145	CompoundStatement		5454:0:123444:123718	727143	0					
ANR	727146	IdentifierDeclStatement	int r ;	5455:2:123448:123453	727143	0	True				
ANR	727147	IdentifierDecl	r		727143	0					
ANR	727148	IdentifierDeclType	int		727143	0					
ANR	727149	Identifier	r		727143	1					
ANR	727150	IdentifierDeclStatement	regex_t * new_reg ;	5456:2:123457:123473	727143	1	True				
ANR	727151	IdentifierDecl	* new_reg		727143	0					
ANR	727152	IdentifierDeclType	regex_t *		727143	0					
ANR	727153	Identifier	new_reg		727143	1					
ANR	727154	ExpressionStatement	"r = onig_new ( & new_reg , pattern , pattern_end , option , enc , syntax , einfo )"	5458:2:123478:123550	727143	2	True				
ANR	727155	AssignmentExpression	"r = onig_new ( & new_reg , pattern , pattern_end , option , enc , syntax , einfo )"		727143	0		=			
ANR	727156	Identifier	r		727143	0					
ANR	727157	CallExpression	"onig_new ( & new_reg , pattern , pattern_end , option , enc , syntax , einfo )"		727143	1					
ANR	727158	Callee	onig_new		727143	0					
ANR	727159	Identifier	onig_new		727143	0					
ANR	727160	ArgumentList	& new_reg		727143	1					
ANR	727161	Argument	& new_reg		727143	0					
ANR	727162	UnaryOperationExpression	& new_reg		727143	0					
ANR	727163	UnaryOperator	&		727143	0					
ANR	727164	Identifier	new_reg		727143	1					
ANR	727165	Argument	pattern		727143	1					
ANR	727166	Identifier	pattern		727143	0					
ANR	727167	Argument	pattern_end		727143	2					
ANR	727168	Identifier	pattern_end		727143	0					
ANR	727169	Argument	option		727143	3					
ANR	727170	Identifier	option		727143	0					
ANR	727171	Argument	enc		727143	4					
ANR	727172	Identifier	enc		727143	0					
ANR	727173	Argument	syntax		727143	5					
ANR	727174	Identifier	syntax		727143	0					
ANR	727175	Argument	einfo		727143	6					
ANR	727176	Identifier	einfo		727143	0					
ANR	727177	IfStatement	if ( r )		727143	3					
ANR	727178	Condition	r	5459:6:123558:123558	727143	0	True				
ANR	727179	Identifier	r		727143	0					
ANR	727180	ReturnStatement	return r ;	5459:9:123561:123569	727143	1	True				
ANR	727181	Identifier	r		727143	0					
ANR	727182	IfStatement	if ( ONIG_STATE ( reg ) == ONIG_STATE_NORMAL )		727143	4					
ANR	727183	Condition	ONIG_STATE ( reg ) == ONIG_STATE_NORMAL	5460:6:123577:123612	727143	0	True				
ANR	727184	EqualityExpression	ONIG_STATE ( reg ) == ONIG_STATE_NORMAL		727143	0		==			
ANR	727185	CallExpression	ONIG_STATE ( reg )		727143	0					
ANR	727186	Callee	ONIG_STATE		727143	0					
ANR	727187	Identifier	ONIG_STATE		727143	0					
ANR	727188	ArgumentList	reg		727143	1					
ANR	727189	Argument	reg		727143	0					
ANR	727190	Identifier	reg		727143	0					
ANR	727191	Identifier	ONIG_STATE_NORMAL		727143	1					
ANR	727192	CompoundStatement		7:44:170:170	727143	1					
ANR	727193	ExpressionStatement	"onig_transfer ( reg , new_reg )"	5461:4:123621:123648	727143	0	True				
ANR	727194	CallExpression	"onig_transfer ( reg , new_reg )"		727143	0					
ANR	727195	Callee	onig_transfer		727143	0					
ANR	727196	Identifier	onig_transfer		727143	0					
ANR	727197	ArgumentList	reg		727143	1					
ANR	727198	Argument	reg		727143	0					
ANR	727199	Identifier	reg		727143	0					
ANR	727200	Argument	new_reg		727143	1					
ANR	727201	Identifier	new_reg		727143	0					
ANR	727202	ElseStatement	else		727143	0					
ANR	727203	CompoundStatement		10:7:216:216	727143	0					
ANR	727204	ExpressionStatement	"onig_chain_link_add ( reg , new_reg )"	5464:4:123667:123700	727143	0	True				
ANR	727205	CallExpression	"onig_chain_link_add ( reg , new_reg )"		727143	0					
ANR	727206	Callee	onig_chain_link_add		727143	0					
ANR	727207	Identifier	onig_chain_link_add		727143	0					
ANR	727208	ArgumentList	reg		727143	1					
ANR	727209	Argument	reg		727143	0					
ANR	727210	Identifier	reg		727143	0					
ANR	727211	Argument	new_reg		727143	1					
ANR	727212	Identifier	new_reg		727143	0					
ANR	727213	ReturnStatement	return 0 ;	5466:2:123708:123716	727143	5	True				
ANR	727214	PrimaryExpression	0		727143	0					
ANR	727215	ReturnType	extern int		727143	1					
ANR	727216	Identifier	onig_recompile		727143	2					
ANR	727217	ParameterList	"regex_t * reg , const UChar * pattern , const UChar * pattern_end , OnigOptionType option , OnigEncoding enc , OnigSyntaxType * syntax , OnigErrorInfo * einfo"		727143	3					
ANR	727218	Parameter	regex_t * reg	5451:15:123285:123296	727143	0	True				
ANR	727219	ParameterType	regex_t *		727143	0					
ANR	727220	Identifier	reg		727143	1					
ANR	727221	Parameter	const UChar * pattern	5451:29:123299:123318	727143	1	True				
ANR	727222	ParameterType	const UChar *		727143	0					
ANR	727223	Identifier	pattern		727143	1					
ANR	727224	Parameter	const UChar * pattern_end	5451:51:123321:123344	727143	2	True				
ANR	727225	ParameterType	const UChar *		727143	0					
ANR	727226	Identifier	pattern_end		727143	1					
ANR	727227	Parameter	OnigOptionType option	5452:5:123352:123372	727143	3	True				
ANR	727228	ParameterType	OnigOptionType		727143	0					
ANR	727229	Identifier	option		727143	1					
ANR	727230	Parameter	OnigEncoding enc	5452:28:123375:123390	727143	4	True				
ANR	727231	ParameterType	OnigEncoding		727143	0					
ANR	727232	Identifier	enc		727143	1					
ANR	727233	Parameter	OnigSyntaxType * syntax	5452:46:123393:123414	727143	5	True				
ANR	727234	ParameterType	OnigSyntaxType *		727143	0					
ANR	727235	Identifier	syntax		727143	1					
ANR	727236	Parameter	OnigErrorInfo * einfo	5453:5:123422:123441	727143	6	True				
ANR	727237	ParameterType	OnigErrorInfo *		727143	0					
ANR	727238	Identifier	einfo		727143	1					
ANR	727239	CFGEntryNode	ENTRY		727143		True				
ANR	727240	CFGExitNode	EXIT		727143		True				
ANR	727241	Symbol	ONIG_STATE		727143						
ANR	727242	Symbol	pattern		727143						
ANR	727243	Symbol	pattern_end		727143						
ANR	727244	Symbol	onig_new		727143						
ANR	727245	Symbol	r		727143						
ANR	727246	Symbol	einfo		727143						
ANR	727247	Symbol	reg		727143						
ANR	727248	Symbol	new_reg		727143						
ANR	727249	Symbol	& new_reg		727143						
ANR	727250	Symbol	syntax		727143						
ANR	727251	Symbol	enc		727143						
ANR	727252	Symbol	option		727143						
ANR	727253	Symbol	ONIG_STATE_NORMAL		727143						
ANR	727254	DeclStmt									
ANR	727255	Decl							int	int	onig_inited
ANR	727256	Function	onig_reg_init	5472:0:123757:125007							
ANR	727257	FunctionDef	"onig_reg_init (regex_t * reg , OnigOptionType option , OnigCaseFoldType case_fold_flag , OnigEncoding enc , OnigSyntaxType * syntax)"		727256	0					
ANR	727258	CompoundStatement		5476:0:123908:125007	727256	0					
ANR	727259	IfStatement	if ( ! onig_inited )		727256	0					
ANR	727260	Condition	! onig_inited	5477:6:123916:123928	727256	0	True				
ANR	727261	UnaryOperationExpression	! onig_inited		727256	0					
ANR	727262	UnaryOperator	!		727256	0					
ANR	727263	Identifier	onig_inited		727256	1					
ANR	727264	ExpressionStatement	onig_init ( )	5478:4:123935:123946	727256	1	True				
ANR	727265	CallExpression	onig_init ( )		727256	0					
ANR	727266	Callee	onig_init		727256	0					
ANR	727267	Identifier	onig_init		727256	0					
ANR	727268	ArgumentList			727256	1					
ANR	727269	IfStatement	if ( IS_NULL ( reg ) )		727256	1					
ANR	727270	Condition	IS_NULL ( reg )	5480:6:123955:123966	727256	0	True				
ANR	727271	CallExpression	IS_NULL ( reg )		727256	0					
ANR	727272	Callee	IS_NULL		727256	0					
ANR	727273	Identifier	IS_NULL		727256	0					
ANR	727274	ArgumentList	reg		727256	1					
ANR	727275	Argument	reg		727256	0					
ANR	727276	Identifier	reg		727256	0					
ANR	727277	ReturnStatement	return ONIGERR_INVALID_ARGUMENT ;	5481:4:123973:124004	727256	1	True				
ANR	727278	Identifier	ONIGERR_INVALID_ARGUMENT		727256	0					
ANR	727279	IfStatement	if ( ONIGENC_IS_UNDEF ( enc ) )		727256	2					
ANR	727280	Condition	ONIGENC_IS_UNDEF ( enc )	5483:6:124013:124033	727256	0	True				
ANR	727281	CallExpression	ONIGENC_IS_UNDEF ( enc )		727256	0					
ANR	727282	Callee	ONIGENC_IS_UNDEF		727256	0					
ANR	727283	Identifier	ONIGENC_IS_UNDEF		727256	0					
ANR	727284	ArgumentList	enc		727256	1					
ANR	727285	Argument	enc		727256	0					
ANR	727286	Identifier	enc		727256	0					
ANR	727287	ReturnStatement	return ONIGERR_DEFAULT_ENCODING_IS_NOT_SETTED ;	5484:4:124040:124085	727256	1	True				
ANR	727288	Identifier	ONIGERR_DEFAULT_ENCODING_IS_NOT_SETTED		727256	0					
ANR	727289	IfStatement	if ( ( option & ( ONIG_OPTION_DONT_CAPTURE_GROUP | ONIG_OPTION_CAPTURE_GROUP ) ) == ( ONIG_OPTION_DONT_CAPTURE_GROUP | ONIG_OPTION_CAPTURE_GROUP ) )		727256	3					
ANR	727290	Condition	( option & ( ONIG_OPTION_DONT_CAPTURE_GROUP | ONIG_OPTION_CAPTURE_GROUP ) ) == ( ONIG_OPTION_DONT_CAPTURE_GROUP | ONIG_OPTION_CAPTURE_GROUP )	5486:6:124094:124230	727256	0	True				
ANR	727291	EqualityExpression	( option & ( ONIG_OPTION_DONT_CAPTURE_GROUP | ONIG_OPTION_CAPTURE_GROUP ) ) == ( ONIG_OPTION_DONT_CAPTURE_GROUP | ONIG_OPTION_CAPTURE_GROUP )		727256	0		==			
ANR	727292	BitAndExpression	option & ( ONIG_OPTION_DONT_CAPTURE_GROUP | ONIG_OPTION_CAPTURE_GROUP )		727256	0		&			
ANR	727293	Identifier	option		727256	0					
ANR	727294	InclusiveOrExpression	ONIG_OPTION_DONT_CAPTURE_GROUP | ONIG_OPTION_CAPTURE_GROUP		727256	1		|			
ANR	727295	Identifier	ONIG_OPTION_DONT_CAPTURE_GROUP		727256	0					
ANR	727296	Identifier	ONIG_OPTION_CAPTURE_GROUP		727256	1					
ANR	727297	InclusiveOrExpression	ONIG_OPTION_DONT_CAPTURE_GROUP | ONIG_OPTION_CAPTURE_GROUP		727256	1		|			
ANR	727298	Identifier	ONIG_OPTION_DONT_CAPTURE_GROUP		727256	0					
ANR	727299	Identifier	ONIG_OPTION_CAPTURE_GROUP		727256	1					
ANR	727300	CompoundStatement		12:69:324:324	727256	1					
ANR	727301	ReturnStatement	return ONIGERR_INVALID_COMBINATION_OF_OPTIONS ;	5488:4:124239:124284	727256	0	True				
ANR	727302	Identifier	ONIGERR_INVALID_COMBINATION_OF_OPTIONS		727256	0					
ANR	727303	ExpressionStatement	( reg ) -> state = ONIG_STATE_MODIFY	5491:2:124293:124325	727256	4	True				
ANR	727304	AssignmentExpression	( reg ) -> state = ONIG_STATE_MODIFY		727256	0		=			
ANR	727305	PtrMemberAccess	( reg ) -> state		727256	0					
ANR	727306	Identifier	reg		727256	0					
ANR	727307	Identifier	state		727256	1					
ANR	727308	Identifier	ONIG_STATE_MODIFY		727256	1					
ANR	727309	IfStatement	if ( ( option & ONIG_OPTION_NEGATE_SINGLELINE ) != 0 )		727256	5					
ANR	727310	Condition	( option & ONIG_OPTION_NEGATE_SINGLELINE ) != 0	5493:6:124334:124378	727256	0	True				
ANR	727311	EqualityExpression	( option & ONIG_OPTION_NEGATE_SINGLELINE ) != 0		727256	0		!=			
ANR	727312	BitAndExpression	option & ONIG_OPTION_NEGATE_SINGLELINE		727256	0		&			
ANR	727313	Identifier	option		727256	0					
ANR	727314	Identifier	ONIG_OPTION_NEGATE_SINGLELINE		727256	1					
ANR	727315	PrimaryExpression	0		727256	1					
ANR	727316	CompoundStatement		18:53:472:472	727256	1					
ANR	727317	ExpressionStatement	option |= syntax -> options	5494:4:124387:124412	727256	0	True				
ANR	727318	AssignmentExpression	option |= syntax -> options		727256	0		|=			
ANR	727319	Identifier	option		727256	0					
ANR	727320	PtrMemberAccess	syntax -> options		727256	1					
ANR	727321	Identifier	syntax		727256	0					
ANR	727322	Identifier	options		727256	1					
ANR	727323	ExpressionStatement	option &= ~ONIG_OPTION_SINGLELINE	5495:4:124418:124451	727256	1	True				
ANR	727324	AssignmentExpression	option &= ~ONIG_OPTION_SINGLELINE		727256	0		&=			
ANR	727325	Identifier	option		727256	0					
ANR	727326	Identifier	~ONIG_OPTION_SINGLELINE		727256	1					
ANR	727327	ElseStatement	else		727256	0					
ANR	727328	ExpressionStatement	option |= syntax -> options	5498:4:124468:124493	727256	0	True				
ANR	727329	AssignmentExpression	option |= syntax -> options		727256	0		|=			
ANR	727330	Identifier	option		727256	0					
ANR	727331	PtrMemberAccess	syntax -> options		727256	1					
ANR	727332	Identifier	syntax		727256	0					
ANR	727333	Identifier	options		727256	1					
ANR	727334	ExpressionStatement	( reg ) -> enc = enc	5500:2:124498:124527	727256	6	True				
ANR	727335	AssignmentExpression	( reg ) -> enc = enc		727256	0		=			
ANR	727336	PtrMemberAccess	( reg ) -> enc		727256	0					
ANR	727337	Identifier	reg		727256	0					
ANR	727338	Identifier	enc		727256	1					
ANR	727339	Identifier	enc		727256	1					
ANR	727340	ExpressionStatement	( reg ) -> options = option	5501:2:124531:124563	727256	7	True				
ANR	727341	AssignmentExpression	( reg ) -> options = option		727256	0		=			
ANR	727342	PtrMemberAccess	( reg ) -> options		727256	0					
ANR	727343	Identifier	reg		727256	0					
ANR	727344	Identifier	options		727256	1					
ANR	727345	Identifier	option		727256	1					
ANR	727346	ExpressionStatement	( reg ) -> syntax = syntax	5502:2:124567:124599	727256	8	True				
ANR	727347	AssignmentExpression	( reg ) -> syntax = syntax		727256	0		=			
ANR	727348	PtrMemberAccess	( reg ) -> syntax		727256	0					
ANR	727349	Identifier	reg		727256	0					
ANR	727350	Identifier	syntax		727256	1					
ANR	727351	Identifier	syntax		727256	1					
ANR	727352	ExpressionStatement	( reg ) -> optimize = 0	5503:2:124603:124630	727256	9	True				
ANR	727353	AssignmentExpression	( reg ) -> optimize = 0		727256	0		=			
ANR	727354	PtrMemberAccess	( reg ) -> optimize		727256	0					
ANR	727355	Identifier	reg		727256	0					
ANR	727356	Identifier	optimize		727256	1					
ANR	727357	PrimaryExpression	0		727256	1					
ANR	727358	ExpressionStatement	( reg ) -> exact = ( UChar * ) NULL	5504:2:124634:124673	727256	10	True				
ANR	727359	AssignmentExpression	( reg ) -> exact = ( UChar * ) NULL		727256	0		=			
ANR	727360	PtrMemberAccess	( reg ) -> exact		727256	0					
ANR	727361	Identifier	reg		727256	0					
ANR	727362	Identifier	exact		727256	1					
ANR	727363	CastExpression	( UChar * ) NULL		727256	1					
ANR	727364	CastTarget	UChar *		727256	0					
ANR	727365	Identifier	NULL		727256	1					
ANR	727366	ExpressionStatement	( reg ) -> int_map = ( int * ) NULL	5505:2:124677:124714	727256	11	True				
ANR	727367	AssignmentExpression	( reg ) -> int_map = ( int * ) NULL		727256	0		=			
ANR	727368	PtrMemberAccess	( reg ) -> int_map		727256	0					
ANR	727369	Identifier	reg		727256	0					
ANR	727370	Identifier	int_map		727256	1					
ANR	727371	CastExpression	( int * ) NULL		727256	1					
ANR	727372	CastTarget	int *		727256	0					
ANR	727373	Identifier	NULL		727256	1					
ANR	727374	ExpressionStatement	( reg ) -> int_map_backward = ( int * ) NULL	5506:2:124718:124755	727256	12	True				
ANR	727375	AssignmentExpression	( reg ) -> int_map_backward = ( int * ) NULL		727256	0		=			
ANR	727376	PtrMemberAccess	( reg ) -> int_map_backward		727256	0					
ANR	727377	Identifier	reg		727256	0					
ANR	727378	Identifier	int_map_backward		727256	1					
ANR	727379	CastExpression	( int * ) NULL		727256	1					
ANR	727380	CastTarget	int *		727256	0					
ANR	727381	Identifier	NULL		727256	1					
ANR	727382	ExpressionStatement	( reg ) -> chain = ( regex_t * ) NULL	5507:2:124759:124800	727256	13	True				
ANR	727383	AssignmentExpression	( reg ) -> chain = ( regex_t * ) NULL		727256	0		=			
ANR	727384	PtrMemberAccess	( reg ) -> chain		727256	0					
ANR	727385	Identifier	reg		727256	0					
ANR	727386	Identifier	chain		727256	1					
ANR	727387	CastExpression	( regex_t * ) NULL		727256	1					
ANR	727388	CastTarget	regex_t *		727256	0					
ANR	727389	Identifier	NULL		727256	1					
ANR	727390	ExpressionStatement	( reg ) -> p = ( UChar * ) NULL	5509:2:124805:124844	727256	14	True				
ANR	727391	AssignmentExpression	( reg ) -> p = ( UChar * ) NULL		727256	0		=			
ANR	727392	PtrMemberAccess	( reg ) -> p		727256	0					
ANR	727393	Identifier	reg		727256	0					
ANR	727394	Identifier	p		727256	1					
ANR	727395	CastExpression	( UChar * ) NULL		727256	1					
ANR	727396	CastTarget	UChar *		727256	0					
ANR	727397	Identifier	NULL		727256	1					
ANR	727398	ExpressionStatement	( reg ) -> alloc = 0	5510:2:124848:124875	727256	15	True				
ANR	727399	AssignmentExpression	( reg ) -> alloc = 0		727256	0		=			
ANR	727400	PtrMemberAccess	( reg ) -> alloc		727256	0					
ANR	727401	Identifier	reg		727256	0					
ANR	727402	Identifier	alloc		727256	1					
ANR	727403	PrimaryExpression	0		727256	1					
ANR	727404	ExpressionStatement	( reg ) -> used = 0	5511:2:124879:124906	727256	16	True				
ANR	727405	AssignmentExpression	( reg ) -> used = 0		727256	0		=			
ANR	727406	PtrMemberAccess	( reg ) -> used		727256	0					
ANR	727407	Identifier	reg		727256	0					
ANR	727408	Identifier	used		727256	1					
ANR	727409	PrimaryExpression	0		727256	1					
ANR	727410	ExpressionStatement	( reg ) -> name_table = ( void * ) NULL	5512:2:124910:124948	727256	17	True				
ANR	727411	AssignmentExpression	( reg ) -> name_table = ( void * ) NULL		727256	0		=			
ANR	727412	PtrMemberAccess	( reg ) -> name_table		727256	0					
ANR	727413	Identifier	reg		727256	0					
ANR	727414	Identifier	name_table		727256	1					
ANR	727415	CastExpression	( void * ) NULL		727256	1					
ANR	727416	CastTarget	void *		727256	0					
ANR	727417	Identifier	NULL		727256	1					
ANR	727418	ExpressionStatement	( reg ) -> case_fold_flag = case_fold_flag	5514:2:124953:124993	727256	18	True				
ANR	727419	AssignmentExpression	( reg ) -> case_fold_flag = case_fold_flag		727256	0		=			
ANR	727420	PtrMemberAccess	( reg ) -> case_fold_flag		727256	0					
ANR	727421	Identifier	reg		727256	0					
ANR	727422	Identifier	case_fold_flag		727256	1					
ANR	727423	Identifier	case_fold_flag		727256	1					
ANR	727424	ReturnStatement	return 0 ;	5515:2:124997:125005	727256	19	True				
ANR	727425	PrimaryExpression	0		727256	0					
ANR	727426	ReturnType	extern int		727256	1					
ANR	727427	Identifier	onig_reg_init		727256	2					
ANR	727428	ParameterList	"regex_t * reg , OnigOptionType option , OnigCaseFoldType case_fold_flag , OnigEncoding enc , OnigSyntaxType * syntax"		727256	3					
ANR	727429	Parameter	regex_t * reg	5473:14:123782:123793	727256	0	True				
ANR	727430	ParameterType	regex_t *		727256	0					
ANR	727431	Identifier	reg		727256	1					
ANR	727432	Parameter	OnigOptionType option	5473:28:123796:123816	727256	1	True				
ANR	727433	ParameterType	OnigOptionType		727256	0					
ANR	727434	Identifier	option		727256	1					
ANR	727435	Parameter	OnigCaseFoldType case_fold_flag	5474:7:123826:123856	727256	2	True				
ANR	727436	ParameterType	OnigCaseFoldType		727256	0					
ANR	727437	Identifier	case_fold_flag		727256	1					
ANR	727438	Parameter	OnigEncoding enc	5475:7:123866:123881	727256	3	True				
ANR	727439	ParameterType	OnigEncoding		727256	0					
ANR	727440	Identifier	enc		727256	1					
ANR	727441	Parameter	OnigSyntaxType * syntax	5475:25:123884:123905	727256	4	True				
ANR	727442	ParameterType	OnigSyntaxType *		727256	0					
ANR	727443	Identifier	syntax		727256	1					
ANR	727444	CFGEntryNode	ENTRY		727256		True				
ANR	727445	CFGExitNode	EXIT		727256		True				
ANR	727446	Symbol	ONIG_STATE_MODIFY		727256						
ANR	727447	Symbol	ONIGERR_INVALID_ARGUMENT		727256						
ANR	727448	Symbol	( reg ) -> chain		727256						
ANR	727449	Symbol	* syntax		727256						
ANR	727450	Symbol	onig_inited		727256						
ANR	727451	Symbol	case_fold_flag		727256						
ANR	727452	Symbol	( reg ) -> options		727256						
ANR	727453	Symbol	( reg ) -> enc		727256						
ANR	727454	Symbol	ONIGENC_IS_UNDEF		727256						
ANR	727455	Symbol	IS_NULL		727256						
ANR	727456	Symbol	ONIG_OPTION_NEGATE_SINGLELINE		727256						
ANR	727457	Symbol	reg		727256						
ANR	727458	Symbol	enc		727256						
ANR	727459	Symbol	( reg ) -> syntax		727256						
ANR	727460	Symbol	ONIGERR_INVALID_COMBINATION_OF_OPTIONS		727256						
ANR	727461	Symbol	( reg ) -> optimize		727256						
ANR	727462	Symbol	NULL		727256						
ANR	727463	Symbol	( reg ) -> case_fold_flag		727256						
ANR	727464	Symbol	( reg ) -> p		727256						
ANR	727465	Symbol	~ONIG_OPTION_SINGLELINE		727256						
ANR	727466	Symbol	( reg ) -> alloc		727256						
ANR	727467	Symbol	ONIG_OPTION_CAPTURE_GROUP		727256						
ANR	727468	Symbol	( reg ) -> exact		727256						
ANR	727469	Symbol	( reg ) -> used		727256						
ANR	727470	Symbol	( reg ) -> name_table		727256						
ANR	727471	Symbol	( reg ) -> int_map_backward		727256						
ANR	727472	Symbol	ONIGERR_DEFAULT_ENCODING_IS_NOT_SETTED		727256						
ANR	727473	Symbol	( reg ) -> state		727256						
ANR	727474	Symbol	syntax		727256						
ANR	727475	Symbol	ONIG_OPTION_DONT_CAPTURE_GROUP		727256						
ANR	727476	Symbol	syntax -> options		727256						
ANR	727477	Symbol	* reg		727256						
ANR	727478	Symbol	option		727256						
ANR	727479	Symbol	( reg ) -> int_map		727256						
ANR	727480	Function	onig_new_without_alloc	5518:0:125010:125385							
ANR	727481	FunctionDef	"onig_new_without_alloc (regex_t * reg , const UChar * pattern , const UChar * pattern_end , OnigOptionType option , OnigEncoding enc , OnigSyntaxType * syntax , OnigErrorInfo * einfo)"		727480	0					
ANR	727482	CompoundStatement		5522:0:125213:125385	727480	0					
ANR	727483	IdentifierDeclStatement	int r ;	5523:2:125217:125222	727480	0	True				
ANR	727484	IdentifierDecl	r		727480	0					
ANR	727485	IdentifierDeclType	int		727480	0					
ANR	727486	Identifier	r		727480	1					
ANR	727487	ExpressionStatement	"r = onig_reg_init ( reg , option , ONIGENC_CASE_FOLD_DEFAULT , enc , syntax )"	5525:2:125227:125297	727480	1	True				
ANR	727488	AssignmentExpression	"r = onig_reg_init ( reg , option , ONIGENC_CASE_FOLD_DEFAULT , enc , syntax )"		727480	0		=			
ANR	727489	Identifier	r		727480	0					
ANR	727490	CallExpression	"onig_reg_init ( reg , option , ONIGENC_CASE_FOLD_DEFAULT , enc , syntax )"		727480	1					
ANR	727491	Callee	onig_reg_init		727480	0					
ANR	727492	Identifier	onig_reg_init		727480	0					
ANR	727493	ArgumentList	reg		727480	1					
ANR	727494	Argument	reg		727480	0					
ANR	727495	Identifier	reg		727480	0					
ANR	727496	Argument	option		727480	1					
ANR	727497	Identifier	option		727480	0					
ANR	727498	Argument	ONIGENC_CASE_FOLD_DEFAULT		727480	2					
ANR	727499	Identifier	ONIGENC_CASE_FOLD_DEFAULT		727480	0					
ANR	727500	Argument	enc		727480	3					
ANR	727501	Identifier	enc		727480	0					
ANR	727502	Argument	syntax		727480	4					
ANR	727503	Identifier	syntax		727480	0					
ANR	727504	IfStatement	if ( r )		727480	2					
ANR	727505	Condition	r	5526:6:125305:125305	727480	0	True				
ANR	727506	Identifier	r		727480	0					
ANR	727507	ReturnStatement	return r ;	5526:9:125308:125316	727480	1	True				
ANR	727508	Identifier	r		727480	0					
ANR	727509	ExpressionStatement	"r = onig_compile ( reg , pattern , pattern_end , einfo )"	5528:2:125321:125371	727480	3	True				
ANR	727510	AssignmentExpression	"r = onig_compile ( reg , pattern , pattern_end , einfo )"		727480	0		=			
ANR	727511	Identifier	r		727480	0					
ANR	727512	CallExpression	"onig_compile ( reg , pattern , pattern_end , einfo )"		727480	1					
ANR	727513	Callee	onig_compile		727480	0					
ANR	727514	Identifier	onig_compile		727480	0					
ANR	727515	ArgumentList	reg		727480	1					
ANR	727516	Argument	reg		727480	0					
ANR	727517	Identifier	reg		727480	0					
ANR	727518	Argument	pattern		727480	1					
ANR	727519	Identifier	pattern		727480	0					
ANR	727520	Argument	pattern_end		727480	2					
ANR	727521	Identifier	pattern_end		727480	0					
ANR	727522	Argument	einfo		727480	3					
ANR	727523	Identifier	einfo		727480	0					
ANR	727524	ReturnStatement	return r ;	5529:2:125375:125383	727480	4	True				
ANR	727525	Identifier	r		727480	0					
ANR	727526	ReturnType	extern int		727480	1					
ANR	727527	Identifier	onig_new_without_alloc		727480	2					
ANR	727528	ParameterList	"regex_t * reg , const UChar * pattern , const UChar * pattern_end , OnigOptionType option , OnigEncoding enc , OnigSyntaxType * syntax , OnigErrorInfo * einfo"		727480	3					
ANR	727529	Parameter	regex_t * reg	5519:23:125044:125055	727480	0	True				
ANR	727530	ParameterType	regex_t *		727480	0					
ANR	727531	Identifier	reg		727480	1					
ANR	727532	Parameter	const UChar * pattern	5519:37:125058:125077	727480	1	True				
ANR	727533	ParameterType	const UChar *		727480	0					
ANR	727534	Identifier	pattern		727480	1					
ANR	727535	Parameter	const UChar * pattern_end	5520:10:125090:125113	727480	2	True				
ANR	727536	ParameterType	const UChar *		727480	0					
ANR	727537	Identifier	pattern_end		727480	1					
ANR	727538	Parameter	OnigOptionType option	5520:36:125116:125136	727480	3	True				
ANR	727539	ParameterType	OnigOptionType		727480	0					
ANR	727540	Identifier	option		727480	1					
ANR	727541	Parameter	OnigEncoding enc	5520:59:125139:125154	727480	4	True				
ANR	727542	ParameterType	OnigEncoding		727480	0					
ANR	727543	Identifier	enc		727480	1					
ANR	727544	Parameter	OnigSyntaxType * syntax	5521:10:125167:125188	727480	5	True				
ANR	727545	ParameterType	OnigSyntaxType *		727480	0					
ANR	727546	Identifier	syntax		727480	1					
ANR	727547	Parameter	OnigErrorInfo * einfo	5521:34:125191:125210	727480	6	True				
ANR	727548	ParameterType	OnigErrorInfo *		727480	0					
ANR	727549	Identifier	einfo		727480	1					
ANR	727550	CFGEntryNode	ENTRY		727480		True				
ANR	727551	CFGExitNode	EXIT		727480		True				
ANR	727552	Symbol	r		727480						
ANR	727553	Symbol	einfo		727480						
ANR	727554	Symbol	onig_reg_init		727480						
ANR	727555	Symbol	reg		727480						
ANR	727556	Symbol	pattern		727480						
ANR	727557	Symbol	pattern_end		727480						
ANR	727558	Symbol	syntax		727480						
ANR	727559	Symbol	ONIGENC_CASE_FOLD_DEFAULT		727480						
ANR	727560	Symbol	enc		727480						
ANR	727561	Symbol	onig_compile		727480						
ANR	727562	Symbol	option		727480						
ANR	727563	Function	onig_new	5532:0:125388:125889							
ANR	727564	FunctionDef	"onig_new (regex_t * * reg , const UChar * pattern , const UChar * pattern_end , OnigOptionType option , OnigEncoding enc , OnigSyntaxType * syntax , OnigErrorInfo * einfo)"		727563	0					
ANR	727565	CompoundStatement		5536:0:125564:125889	727563	0					
ANR	727566	IdentifierDeclStatement	int r ;	5537:2:125568:125573	727563	0	True				
ANR	727567	IdentifierDecl	r		727563	0					
ANR	727568	IdentifierDeclType	int		727563	0					
ANR	727569	Identifier	r		727563	1					
ANR	727570	ExpressionStatement	* reg = ( regex_t * ) xmalloc ( sizeof ( regex_t ) )	5539:2:125578:125620	727563	1	True				
ANR	727571	AssignmentExpression	* reg = ( regex_t * ) xmalloc ( sizeof ( regex_t ) )		727563	0		=			
ANR	727572	UnaryOperationExpression	* reg		727563	0					
ANR	727573	UnaryOperator	*		727563	0					
ANR	727574	Identifier	reg		727563	1					
ANR	727575	CastExpression	( regex_t * ) xmalloc ( sizeof ( regex_t ) )		727563	1					
ANR	727576	CastTarget	regex_t *		727563	0					
ANR	727577	CallExpression	xmalloc ( sizeof ( regex_t ) )		727563	1					
ANR	727578	Callee	xmalloc		727563	0					
ANR	727579	Identifier	xmalloc		727563	0					
ANR	727580	ArgumentList	sizeof ( regex_t )		727563	1					
ANR	727581	Argument	sizeof ( regex_t )		727563	0					
ANR	727582	SizeofExpression	sizeof ( regex_t )		727563	0					
ANR	727583	Sizeof	sizeof		727563	0					
ANR	727584	SizeofOperand	regex_t		727563	1					
ANR	727585	IfStatement	if ( IS_NULL ( * reg ) )		727563	2					
ANR	727586	Condition	IS_NULL ( * reg )	5540:6:125628:125640	727563	0	True				
ANR	727587	CallExpression	IS_NULL ( * reg )		727563	0					
ANR	727588	Callee	IS_NULL		727563	0					
ANR	727589	Identifier	IS_NULL		727563	0					
ANR	727590	ArgumentList	* reg		727563	1					
ANR	727591	Argument	* reg		727563	0					
ANR	727592	UnaryOperationExpression	* reg		727563	0					
ANR	727593	UnaryOperator	*		727563	0					
ANR	727594	Identifier	reg		727563	1					
ANR	727595	ReturnStatement	return ONIGERR_MEMORY ;	5540:21:125643:125664	727563	1	True				
ANR	727596	Identifier	ONIGERR_MEMORY		727563	0					
ANR	727597	ExpressionStatement	"r = onig_reg_init ( * reg , option , ONIGENC_CASE_FOLD_DEFAULT , enc , syntax )"	5542:2:125669:125740	727563	3	True				
ANR	727598	AssignmentExpression	"r = onig_reg_init ( * reg , option , ONIGENC_CASE_FOLD_DEFAULT , enc , syntax )"		727563	0		=			
ANR	727599	Identifier	r		727563	0					
ANR	727600	CallExpression	"onig_reg_init ( * reg , option , ONIGENC_CASE_FOLD_DEFAULT , enc , syntax )"		727563	1					
ANR	727601	Callee	onig_reg_init		727563	0					
ANR	727602	Identifier	onig_reg_init		727563	0					
ANR	727603	ArgumentList	* reg		727563	1					
ANR	727604	Argument	* reg		727563	0					
ANR	727605	UnaryOperationExpression	* reg		727563	0					
ANR	727606	UnaryOperator	*		727563	0					
ANR	727607	Identifier	reg		727563	1					
ANR	727608	Argument	option		727563	1					
ANR	727609	Identifier	option		727563	0					
ANR	727610	Argument	ONIGENC_CASE_FOLD_DEFAULT		727563	2					
ANR	727611	Identifier	ONIGENC_CASE_FOLD_DEFAULT		727563	0					
ANR	727612	Argument	enc		727563	3					
ANR	727613	Identifier	enc		727563	0					
ANR	727614	Argument	syntax		727563	4					
ANR	727615	Identifier	syntax		727563	0					
ANR	727616	IfStatement	if ( r )		727563	4					
ANR	727617	Condition	r	5543:6:125748:125748	727563	0	True				
ANR	727618	Identifier	r		727563	0					
ANR	727619	GotoStatement	goto err ;	5543:9:125751:125759	727563	1	True				
ANR	727620	Identifier	err		727563	0					
ANR	727621	ExpressionStatement	"r = onig_compile ( * reg , pattern , pattern_end , einfo )"	5545:2:125764:125815	727563	5	True				
ANR	727622	AssignmentExpression	"r = onig_compile ( * reg , pattern , pattern_end , einfo )"		727563	0		=			
ANR	727623	Identifier	r		727563	0					
ANR	727624	CallExpression	"onig_compile ( * reg , pattern , pattern_end , einfo )"		727563	1					
ANR	727625	Callee	onig_compile		727563	0					
ANR	727626	Identifier	onig_compile		727563	0					
ANR	727627	ArgumentList	* reg		727563	1					
ANR	727628	Argument	* reg		727563	0					
ANR	727629	UnaryOperationExpression	* reg		727563	0					
ANR	727630	UnaryOperator	*		727563	0					
ANR	727631	Identifier	reg		727563	1					
ANR	727632	Argument	pattern		727563	1					
ANR	727633	Identifier	pattern		727563	0					
ANR	727634	Argument	pattern_end		727563	2					
ANR	727635	Identifier	pattern_end		727563	0					
ANR	727636	Argument	einfo		727563	3					
ANR	727637	Identifier	einfo		727563	0					
ANR	727638	IfStatement	if ( r )		727563	6					
ANR	727639	Condition	r	5546:6:125823:125823	727563	0	True				
ANR	727640	Identifier	r		727563	0					
ANR	727641	CompoundStatement		11:9:261:261	727563	1					
ANR	727642	Label	err :	5547:2:125830:125833	727563	0	True				
ANR	727643	Identifier	err		727563	0					
ANR	727644	ExpressionStatement	onig_free ( * reg )	5548:4:125839:125854	727563	1	True				
ANR	727645	CallExpression	onig_free ( * reg )		727563	0					
ANR	727646	Callee	onig_free		727563	0					
ANR	727647	Identifier	onig_free		727563	0					
ANR	727648	ArgumentList	* reg		727563	1					
ANR	727649	Argument	* reg		727563	0					
ANR	727650	UnaryOperationExpression	* reg		727563	0					
ANR	727651	UnaryOperator	*		727563	0					
ANR	727652	Identifier	reg		727563	1					
ANR	727653	ExpressionStatement	* reg = NULL	5549:4:125860:125871	727563	2	True				
ANR	727654	AssignmentExpression	* reg = NULL		727563	0		=			
ANR	727655	UnaryOperationExpression	* reg		727563	0					
ANR	727656	UnaryOperator	*		727563	0					
ANR	727657	Identifier	reg		727563	1					
ANR	727658	Identifier	NULL		727563	1					
ANR	727659	ReturnStatement	return r ;	5551:2:125879:125887	727563	7	True				
ANR	727660	Identifier	r		727563	0					
ANR	727661	ReturnType	extern int		727563	1					
ANR	727662	Identifier	onig_new		727563	2					
ANR	727663	ParameterList	"regex_t * * reg , const UChar * pattern , const UChar * pattern_end , OnigOptionType option , OnigEncoding enc , OnigSyntaxType * syntax , OnigErrorInfo * einfo"		727563	3					
ANR	727664	Parameter	regex_t * * reg	5533:9:125408:125420	727563	0	True				
ANR	727665	ParameterType	regex_t * *		727563	0					
ANR	727666	Identifier	reg		727563	1					
ANR	727667	Parameter	const UChar * pattern	5533:24:125423:125442	727563	1	True				
ANR	727668	ParameterType	const UChar *		727563	0					
ANR	727669	Identifier	pattern		727563	1					
ANR	727670	Parameter	const UChar * pattern_end	5533:46:125445:125468	727563	2	True				
ANR	727671	ParameterType	const UChar *		727563	0					
ANR	727672	Identifier	pattern_end		727563	1					
ANR	727673	Parameter	OnigOptionType option	5534:3:125474:125494	727563	3	True				
ANR	727674	ParameterType	OnigOptionType		727563	0					
ANR	727675	Identifier	option		727563	1					
ANR	727676	Parameter	OnigEncoding enc	5534:26:125497:125512	727563	4	True				
ANR	727677	ParameterType	OnigEncoding		727563	0					
ANR	727678	Identifier	enc		727563	1					
ANR	727679	Parameter	OnigSyntaxType * syntax	5534:44:125515:125536	727563	5	True				
ANR	727680	ParameterType	OnigSyntaxType *		727563	0					
ANR	727681	Identifier	syntax		727563	1					
ANR	727682	Parameter	OnigErrorInfo * einfo	5535:3:125542:125561	727563	6	True				
ANR	727683	ParameterType	OnigErrorInfo *		727563	0					
ANR	727684	Identifier	einfo		727563	1					
ANR	727685	CFGEntryNode	ENTRY		727563		True				
ANR	727686	CFGExitNode	EXIT		727563		True				
ANR	727687	Symbol	NULL		727563						
ANR	727688	Symbol	pattern		727563						
ANR	727689	Symbol	ONIGERR_MEMORY		727563						
ANR	727690	Symbol	pattern_end		727563						
ANR	727691	Symbol	ONIGENC_CASE_FOLD_DEFAULT		727563						
ANR	727692	Symbol	r		727563						
ANR	727693	Symbol	einfo		727563						
ANR	727694	Symbol	onig_reg_init		727563						
ANR	727695	Symbol	IS_NULL		727563						
ANR	727696	Symbol	reg		727563						
ANR	727697	Symbol	xmalloc		727563						
ANR	727698	Symbol	syntax		727563						
ANR	727699	Symbol	enc		727563						
ANR	727700	Symbol	onig_compile		727563						
ANR	727701	Symbol	* reg		727563						
ANR	727702	Symbol	option		727563						
ANR	727703	Function	onig_init	5555:0:125893:126198							
ANR	727704	FunctionDef	onig_init ()		727703	0					
ANR	727705	CompoundStatement		5557:0:125920:126198	727703	0					
ANR	727706	IfStatement	if ( onig_inited != 0 )		727703	0					
ANR	727707	Condition	onig_inited != 0	5558:6:125928:125943	727703	0	True				
ANR	727708	EqualityExpression	onig_inited != 0		727703	0		!=			
ANR	727709	Identifier	onig_inited		727703	0					
ANR	727710	PrimaryExpression	0		727703	1					
ANR	727711	ReturnStatement	return 0 ;	5559:4:125950:125958	727703	1	True				
ANR	727712	PrimaryExpression	0		727703	0					
ANR	727713	ExpressionStatement	THREAD_SYSTEM_INIT	5561:2:125963:125981	727703	1	True				
ANR	727714	Identifier	THREAD_SYSTEM_INIT		727703	0					
ANR	727715	ExpressionStatement	THREAD_ATOMIC_START	5562:2:125985:126004	727703	2	True				
ANR	727716	Identifier	THREAD_ATOMIC_START		727703	0					
ANR	727717	ExpressionStatement	onig_inited = 1	5564:2:126009:126024	727703	3	True				
ANR	727718	AssignmentExpression	onig_inited = 1		727703	0		=			
ANR	727719	Identifier	onig_inited		727703	0					
ANR	727720	PrimaryExpression	1		727703	1					
ANR	727721	ExpressionStatement	onigenc_init ( )	5566:2:126029:126043	727703	4	True				
ANR	727722	CallExpression	onigenc_init ( )		727703	0					
ANR	727723	Callee	onigenc_init		727703	0					
ANR	727724	Identifier	onigenc_init		727703	0					
ANR	727725	ArgumentList			727703	1					
ANR	727726	ExpressionStatement	onig_statistics_init ( )	5570:2:126133:126155	727703	5	True				
ANR	727727	CallExpression	onig_statistics_init ( )		727703	0					
ANR	727728	Callee	onig_statistics_init		727703	0					
ANR	727729	Identifier	onig_statistics_init		727703	0					
ANR	727730	ArgumentList			727703	1					
ANR	727731	ExpressionStatement	THREAD_ATOMIC_END	5573:2:126167:126184	727703	6	True				
ANR	727732	Identifier	THREAD_ATOMIC_END		727703	0					
ANR	727733	ReturnStatement	return 0 ;	5574:2:126188:126196	727703	7	True				
ANR	727734	PrimaryExpression	0		727703	0					
ANR	727735	ReturnType	extern int		727703	1					
ANR	727736	Identifier	onig_init		727703	2					
ANR	727737	ParameterList			727703	3					
ANR	727738	CFGEntryNode	ENTRY		727703		True				
ANR	727739	CFGExitNode	EXIT		727703		True				
ANR	727740	Symbol	onig_inited		727703						
ANR	727741	Function	onig_end	5578:0:126202:126540							
ANR	727742	FunctionDef	onig_end ()		727741	0					
ANR	727743	CompoundStatement		5580:0:126228:126540	727741	0					
ANR	727744	ExpressionStatement	THREAD_ATOMIC_START	5581:2:126232:126251	727741	0	True				
ANR	727745	Identifier	THREAD_ATOMIC_START		727741	0					
ANR	727746	ExpressionStatement	onig_print_statistics ( stderr )	5584:2:126285:126314	727741	1	True				
ANR	727747	CallExpression	onig_print_statistics ( stderr )		727741	0					
ANR	727748	Callee	onig_print_statistics		727741	0					
ANR	727749	Identifier	onig_print_statistics		727741	0					
ANR	727750	ArgumentList	stderr		727741	1					
ANR	727751	Argument	stderr		727741	0					
ANR	727752	Identifier	stderr		727741	0					
ANR	727753	ExpressionStatement	onig_free_shared_cclass_table ( )	5588:2:126357:126388	727741	2	True				
ANR	727754	CallExpression	onig_free_shared_cclass_table ( )		727741	0					
ANR	727755	Callee	onig_free_shared_cclass_table		727741	0					
ANR	727756	Identifier	onig_free_shared_cclass_table		727741	0					
ANR	727757	ArgumentList			727741	1					
ANR	727758	ExpressionStatement	onig_free_node_list ( )	5592:2:126435:126456	727741	3	True				
ANR	727759	CallExpression	onig_free_node_list ( )		727741	0					
ANR	727760	Callee	onig_free_node_list		727741	0					
ANR	727761	Identifier	onig_free_node_list		727741	0					
ANR	727762	ArgumentList			727741	1					
ANR	727763	ExpressionStatement	onig_inited = 0	5595:2:126468:126483	727741	4	True				
ANR	727764	AssignmentExpression	onig_inited = 0		727741	0		=			
ANR	727765	Identifier	onig_inited		727741	0					
ANR	727766	PrimaryExpression	0		727741	1					
ANR	727767	ExpressionStatement	THREAD_ATOMIC_END	5597:2:126488:126505	727741	5	True				
ANR	727768	Identifier	THREAD_ATOMIC_END		727741	0					
ANR	727769	ExpressionStatement	THREAD_SYSTEM_END	5598:2:126509:126526	727741	6	True				
ANR	727770	Identifier	THREAD_SYSTEM_END		727741	0					
ANR	727771	ReturnStatement	return 0 ;	5599:2:126530:126538	727741	7	True				
ANR	727772	PrimaryExpression	0		727741	0					
ANR	727773	ReturnType	extern int		727741	1					
ANR	727774	Identifier	onig_end		727741	2					
ANR	727775	ParameterList			727741	3					
ANR	727776	CFGEntryNode	ENTRY		727741		True				
ANR	727777	CFGExitNode	EXIT		727741		True				
ANR	727778	Symbol	stderr		727741						
ANR	727779	Symbol	onig_inited		727741						
ANR	727780	Function	onig_is_in_code_range	5602:0:126543:126940							
ANR	727781	FunctionDef	"onig_is_in_code_range (const UChar * p , OnigCodePoint code)"		727780	0					
ANR	727782	CompoundStatement		5604:0:126612:126940	727780	0					
ANR	727783	IdentifierDeclStatement	"OnigCodePoint n , * data ;"	5605:2:126616:126638	727780	0	True				
ANR	727784	IdentifierDecl	n		727780	0					
ANR	727785	IdentifierDeclType	OnigCodePoint		727780	0					
ANR	727786	Identifier	n		727780	1					
ANR	727787	IdentifierDecl	* data		727780	1					
ANR	727788	IdentifierDeclType	OnigCodePoint *		727780	0					
ANR	727789	Identifier	data		727780	1					
ANR	727790	IdentifierDeclStatement	"OnigCodePoint low , high , x ;"	5606:2:126642:126668	727780	1	True				
ANR	727791	IdentifierDecl	low		727780	0					
ANR	727792	IdentifierDeclType	OnigCodePoint		727780	0					
ANR	727793	Identifier	low		727780	1					
ANR	727794	IdentifierDecl	high		727780	1					
ANR	727795	IdentifierDeclType	OnigCodePoint		727780	0					
ANR	727796	Identifier	high		727780	1					
ANR	727797	IdentifierDecl	x		727780	2					
ANR	727798	IdentifierDeclType	OnigCodePoint		727780	0					
ANR	727799	Identifier	x		727780	1					
ANR	727800	ExpressionStatement	"GET_CODE_POINT ( n , p )"	5608:2:126673:126693	727780	2	True				
ANR	727801	CallExpression	"GET_CODE_POINT ( n , p )"		727780	0					
ANR	727802	Callee	GET_CODE_POINT		727780	0					
ANR	727803	Identifier	GET_CODE_POINT		727780	0					
ANR	727804	ArgumentList	n		727780	1					
ANR	727805	Argument	n		727780	0					
ANR	727806	Identifier	n		727780	0					
ANR	727807	Argument	p		727780	1					
ANR	727808	Identifier	p		727780	0					
ANR	727809	ExpressionStatement	data = ( OnigCodePoint * ) p	5609:2:126697:126722	727780	3	True				
ANR	727810	AssignmentExpression	data = ( OnigCodePoint * ) p		727780	0		=			
ANR	727811	Identifier	data		727780	0					
ANR	727812	CastExpression	( OnigCodePoint * ) p		727780	1					
ANR	727813	CastTarget	OnigCodePoint *		727780	0					
ANR	727814	Identifier	p		727780	1					
ANR	727815	ExpressionStatement	data ++	5610:2:126726:126732	727780	4	True				
ANR	727816	PostIncDecOperationExpression	data ++		727780	0					
ANR	727817	Identifier	data		727780	0					
ANR	727818	IncDec	++		727780	1					
ANR	727819	ForStatement	"for ( low = 0 , high = n ; low < high ; )"		727780	5					
ANR	727820	ForInit	"low = 0 , high = n ;"	5612:7:126742:126759	727780	0	True				
ANR	727821	Expression	"low = 0 , high = n"		727780	0					
ANR	727822	AssignmentExpression	low = 0		727780	0		=			
ANR	727823	Identifier	low		727780	0					
ANR	727824	PrimaryExpression	0		727780	1					
ANR	727825	AssignmentExpression	high = n		727780	1		=			
ANR	727826	Identifier	high		727780	0					
ANR	727827	Identifier	n		727780	1					
ANR	727828	Condition	low < high	5612:26:126761:126770	727780	1	True				
ANR	727829	RelationalExpression	low < high		727780	0		<			
ANR	727830	Identifier	low		727780	0					
ANR	727831	Identifier	high		727780	1					
ANR	727832	CompoundStatement		9:40:162:162	727780	2					
ANR	727833	ExpressionStatement	x = ( low + high ) >> 1	5613:4:126781:126802	727780	0	True				
ANR	727834	AssignmentExpression	x = ( low + high ) >> 1		727780	0		=			
ANR	727835	Identifier	x		727780	0					
ANR	727836	ShiftExpression	( low + high ) >> 1		727780	1		>>			
ANR	727837	AdditiveExpression	low + high		727780	0		+			
ANR	727838	Identifier	low		727780	0					
ANR	727839	Identifier	high		727780	1					
ANR	727840	PrimaryExpression	1		727780	1					
ANR	727841	IfStatement	if ( code > data [ x * 2 + 1 ] )		727780	1					
ANR	727842	Condition	code > data [ x * 2 + 1 ]	5614:8:126812:126833	727780	0	True				
ANR	727843	RelationalExpression	code > data [ x * 2 + 1 ]		727780	0		>			
ANR	727844	Identifier	code		727780	0					
ANR	727845	ArrayIndexing	data [ x * 2 + 1 ]		727780	1					
ANR	727846	Identifier	data		727780	0					
ANR	727847	AdditiveExpression	x * 2 + 1		727780	1		+			
ANR	727848	MultiplicativeExpression	x * 2		727780	0		*			
ANR	727849	Identifier	x		727780	0					
ANR	727850	PrimaryExpression	2		727780	1					
ANR	727851	PrimaryExpression	1		727780	1					
ANR	727852	ExpressionStatement	low = x + 1	5615:6:126842:126853	727780	1	True				
ANR	727853	AssignmentExpression	low = x + 1		727780	0		=			
ANR	727854	Identifier	low		727780	0					
ANR	727855	AdditiveExpression	x + 1		727780	1		+			
ANR	727856	Identifier	x		727780	0					
ANR	727857	PrimaryExpression	1		727780	1					
ANR	727858	ElseStatement	else		727780	0					
ANR	727859	ExpressionStatement	high = x	5617:6:126870:126878	727780	0	True				
ANR	727860	AssignmentExpression	high = x		727780	0		=			
ANR	727861	Identifier	high		727780	0					
ANR	727862	Identifier	x		727780	1					
ANR	727863	ReturnStatement	return ( ( low < n && code >= data [ low * 2 ] ) ? 1 : 0 ) ;	5620:2:126887:126938	727780	6	True				
ANR	727864	ConditionalExpression	( low < n && code >= data [ low * 2 ] ) ? 1 : 0		727780	0					
ANR	727865	Condition	low < n && code >= data [ low * 2 ]		727780	0					
ANR	727866	AndExpression	low < n && code >= data [ low * 2 ]		727780	0		&&			
ANR	727867	RelationalExpression	low < n		727780	0		<			
ANR	727868	Identifier	low		727780	0					
ANR	727869	Identifier	n		727780	1					
ANR	727870	RelationalExpression	code >= data [ low * 2 ]		727780	1		>=			
ANR	727871	Identifier	code		727780	0					
ANR	727872	ArrayIndexing	data [ low * 2 ]		727780	1					
ANR	727873	Identifier	data		727780	0					
ANR	727874	MultiplicativeExpression	low * 2		727780	1		*			
ANR	727875	Identifier	low		727780	0					
ANR	727876	PrimaryExpression	2		727780	1					
ANR	727877	PrimaryExpression	1		727780	1					
ANR	727878	PrimaryExpression	0		727780	2					
ANR	727879	ReturnType	extern int		727780	1					
ANR	727880	Identifier	onig_is_in_code_range		727780	2					
ANR	727881	ParameterList	"const UChar * p , OnigCodePoint code"		727780	3					
ANR	727882	Parameter	const UChar * p	5603:22:126576:126589	727780	0	True				
ANR	727883	ParameterType	const UChar *		727780	0					
ANR	727884	Identifier	p		727780	1					
ANR	727885	Parameter	OnigCodePoint code	5603:38:126592:126609	727780	1	True				
ANR	727886	ParameterType	OnigCodePoint		727780	0					
ANR	727887	Identifier	code		727780	1					
ANR	727888	CFGEntryNode	ENTRY		727780		True				
ANR	727889	CFGExitNode	EXIT		727780		True				
ANR	727890	Symbol	p		727780						
ANR	727891	Symbol	high		727780						
ANR	727892	Symbol	* x		727780						
ANR	727893	Symbol	code		727780						
ANR	727894	Symbol	data		727780						
ANR	727895	Symbol	low		727780						
ANR	727896	Symbol	x		727780						
ANR	727897	Symbol	* data		727780						
ANR	727898	Symbol	n		727780						
ANR	727899	Symbol	* low		727780						
ANR	727900	Function	onig_is_code_in_cc_len	5623:0:126943:127367							
ANR	727901	FunctionDef	"onig_is_code_in_cc_len (int elen , OnigCodePoint code , CClassNode * cc)"		727900	0					
ANR	727902	CompoundStatement		5625:0:127023:127367	727900	0					
ANR	727903	IdentifierDeclStatement	int found ;	5626:2:127027:127036	727900	0	True				
ANR	727904	IdentifierDecl	found		727900	0					
ANR	727905	IdentifierDeclType	int		727900	0					
ANR	727906	Identifier	found		727900	1					
ANR	727907	IfStatement	if ( elen > 1 || ( code >= SINGLE_BYTE_SIZE ) )		727900	1					
ANR	727908	Condition	elen > 1 || ( code >= SINGLE_BYTE_SIZE )	5628:6:127045:127082	727900	0	True				
ANR	727909	OrExpression	elen > 1 || ( code >= SINGLE_BYTE_SIZE )		727900	0		||			
ANR	727910	RelationalExpression	elen > 1		727900	0		>			
ANR	727911	Identifier	elen		727900	0					
ANR	727912	PrimaryExpression	1		727900	1					
ANR	727913	RelationalExpression	code >= SINGLE_BYTE_SIZE		727900	1		>=			
ANR	727914	Identifier	code		727900	0					
ANR	727915	Identifier	SINGLE_BYTE_SIZE		727900	1					
ANR	727916	CompoundStatement		4:46:61:61	727900	1					
ANR	727917	IfStatement	if ( IS_NULL ( cc -> mbuf ) )		727900	0					
ANR	727918	Condition	IS_NULL ( cc -> mbuf )	5629:8:127095:127111	727900	0	True				
ANR	727919	CallExpression	IS_NULL ( cc -> mbuf )		727900	0					
ANR	727920	Callee	IS_NULL		727900	0					
ANR	727921	Identifier	IS_NULL		727900	0					
ANR	727922	ArgumentList	cc -> mbuf		727900	1					
ANR	727923	Argument	cc -> mbuf		727900	0					
ANR	727924	PtrMemberAccess	cc -> mbuf		727900	0					
ANR	727925	Identifier	cc		727900	0					
ANR	727926	Identifier	mbuf		727900	1					
ANR	727927	CompoundStatement		5:27:90:90	727900	1					
ANR	727928	ExpressionStatement	found = 0	5630:6:127122:127131	727900	0	True				
ANR	727929	AssignmentExpression	found = 0		727900	0		=			
ANR	727930	Identifier	found		727900	0					
ANR	727931	PrimaryExpression	0		727900	1					
ANR	727932	ElseStatement	else		727900	0					
ANR	727933	CompoundStatement		8:9:124:124	727900	0					
ANR	727934	ExpressionStatement	"found = ( onig_is_in_code_range ( cc -> mbuf -> p , code ) != 0 ? 1 : 0 )"	5633:6:127156:127219	727900	0	True				
ANR	727935	AssignmentExpression	"found = ( onig_is_in_code_range ( cc -> mbuf -> p , code ) != 0 ? 1 : 0 )"		727900	0		=			
ANR	727936	Identifier	found		727900	0					
ANR	727937	ConditionalExpression	"onig_is_in_code_range ( cc -> mbuf -> p , code ) != 0 ? 1 : 0"		727900	1					
ANR	727938	Condition	"onig_is_in_code_range ( cc -> mbuf -> p , code ) != 0"		727900	0					
ANR	727939	EqualityExpression	"onig_is_in_code_range ( cc -> mbuf -> p , code ) != 0"		727900	0		!=			
ANR	727940	CallExpression	"onig_is_in_code_range ( cc -> mbuf -> p , code )"		727900	0					
ANR	727941	Callee	onig_is_in_code_range		727900	0					
ANR	727942	Identifier	onig_is_in_code_range		727900	0					
ANR	727943	ArgumentList	cc -> mbuf -> p		727900	1					
ANR	727944	Argument	cc -> mbuf -> p		727900	0					
ANR	727945	PtrMemberAccess	cc -> mbuf -> p		727900	0					
ANR	727946	PtrMemberAccess	cc -> mbuf		727900	0					
ANR	727947	Identifier	cc		727900	0					
ANR	727948	Identifier	mbuf		727900	1					
ANR	727949	Identifier	p		727900	1					
ANR	727950	Argument	code		727900	1					
ANR	727951	Identifier	code		727900	0					
ANR	727952	PrimaryExpression	0		727900	1					
ANR	727953	PrimaryExpression	1		727900	1					
ANR	727954	PrimaryExpression	0		727900	2					
ANR	727955	ElseStatement	else		727900	0					
ANR	727956	CompoundStatement		12:7:214:214	727900	0					
ANR	727957	ExpressionStatement	"found = ( BITSET_AT ( cc -> bs , code ) == 0 ? 0 : 1 )"	5637:4:127244:127290	727900	0	True				
ANR	727958	AssignmentExpression	"found = ( BITSET_AT ( cc -> bs , code ) == 0 ? 0 : 1 )"		727900	0		=			
ANR	727959	Identifier	found		727900	0					
ANR	727960	ConditionalExpression	"BITSET_AT ( cc -> bs , code ) == 0 ? 0 : 1"		727900	1					
ANR	727961	Condition	"BITSET_AT ( cc -> bs , code ) == 0"		727900	0					
ANR	727962	EqualityExpression	"BITSET_AT ( cc -> bs , code ) == 0"		727900	0		==			
ANR	727963	CallExpression	"BITSET_AT ( cc -> bs , code )"		727900	0					
ANR	727964	Callee	BITSET_AT		727900	0					
ANR	727965	Identifier	BITSET_AT		727900	0					
ANR	727966	ArgumentList	cc -> bs		727900	1					
ANR	727967	Argument	cc -> bs		727900	0					
ANR	727968	PtrMemberAccess	cc -> bs		727900	0					
ANR	727969	Identifier	cc		727900	0					
ANR	727970	Identifier	bs		727900	1					
ANR	727971	Argument	code		727900	1					
ANR	727972	Identifier	code		727900	0					
ANR	727973	PrimaryExpression	0		727900	1					
ANR	727974	PrimaryExpression	0		727900	1					
ANR	727975	PrimaryExpression	1		727900	2					
ANR	727976	IfStatement	if ( IS_NCCLASS_NOT ( cc ) )		727900	2					
ANR	727977	Condition	IS_NCCLASS_NOT ( cc )	5640:6:127303:127320	727900	0	True				
ANR	727978	CallExpression	IS_NCCLASS_NOT ( cc )		727900	0					
ANR	727979	Callee	IS_NCCLASS_NOT		727900	0					
ANR	727980	Identifier	IS_NCCLASS_NOT		727900	0					
ANR	727981	ArgumentList	cc		727900	1					
ANR	727982	Argument	cc		727900	0					
ANR	727983	Identifier	cc		727900	0					
ANR	727984	ReturnStatement	return ! found ;	5641:4:127327:127340	727900	1	True				
ANR	727985	UnaryOperationExpression	! found		727900	0					
ANR	727986	UnaryOperator	!		727900	0					
ANR	727987	Identifier	found		727900	1					
ANR	727988	ElseStatement	else		727900	0					
ANR	727989	ReturnStatement	return found ;	5643:4:127353:127365	727900	0	True				
ANR	727990	Identifier	found		727900	0					
ANR	727991	ReturnType	extern int		727900	1					
ANR	727992	Identifier	onig_is_code_in_cc_len		727900	2					
ANR	727993	ParameterList	"int elen , OnigCodePoint code , CClassNode * cc"		727900	3					
ANR	727994	Parameter	int elen	5624:23:126977:126984	727900	0	True				
ANR	727995	ParameterType	int		727900	0					
ANR	727996	Identifier	elen		727900	1					
ANR	727997	Parameter	OnigCodePoint code	5624:33:126987:127004	727900	1	True				
ANR	727998	ParameterType	OnigCodePoint		727900	0					
ANR	727999	Identifier	code		727900	1					
ANR	728000	Parameter	CClassNode * cc	5624:53:127007:127020	727900	2	True				
ANR	728001	ParameterType	CClassNode *		727900	0					
ANR	728002	Identifier	cc		727900	1					
ANR	728003	CFGEntryNode	ENTRY		727900		True				
ANR	728004	CFGExitNode	EXIT		727900		True				
ANR	728005	Symbol	cc		727900						
ANR	728006	Symbol	SINGLE_BYTE_SIZE		727900						
ANR	728007	Symbol	BITSET_AT		727900						
ANR	728008	Symbol	code		727900						
ANR	728009	Symbol	* cc		727900						
ANR	728010	Symbol	IS_NCCLASS_NOT		727900						
ANR	728011	Symbol	cc -> mbuf		727900						
ANR	728012	Symbol	cc -> mbuf -> p		727900						
ANR	728013	Symbol	* * cc		727900						
ANR	728014	Symbol	cc -> bs		727900						
ANR	728015	Symbol	* cc -> mbuf		727900						
ANR	728016	Symbol	found		727900						
ANR	728017	Symbol	IS_NULL		727900						
ANR	728018	Symbol	onig_is_in_code_range		727900						
ANR	728019	Symbol	elen		727900						
ANR	728020	Function	onig_is_code_in_cc	5646:0:127370:127628							
ANR	728021	FunctionDef	"onig_is_code_in_cc (OnigEncoding enc , OnigCodePoint code , CClassNode * cc)"		728020	0					
ANR	728022	CompoundStatement		5648:0:127454:127628	728020	0					
ANR	728023	IdentifierDeclStatement	int len ;	5649:2:127458:127465	728020	0	True				
ANR	728024	IdentifierDecl	len		728020	0					
ANR	728025	IdentifierDeclType	int		728020	0					
ANR	728026	Identifier	len		728020	1					
ANR	728027	IfStatement	if ( ONIGENC_MBC_MINLEN ( enc ) > 1 )		728020	1					
ANR	728028	Condition	ONIGENC_MBC_MINLEN ( enc ) > 1	5651:6:127474:127500	728020	0	True				
ANR	728029	RelationalExpression	ONIGENC_MBC_MINLEN ( enc ) > 1		728020	0		>			
ANR	728030	CallExpression	ONIGENC_MBC_MINLEN ( enc )		728020	0					
ANR	728031	Callee	ONIGENC_MBC_MINLEN		728020	0					
ANR	728032	Identifier	ONIGENC_MBC_MINLEN		728020	0					
ANR	728033	ArgumentList	enc		728020	1					
ANR	728034	Argument	enc		728020	0					
ANR	728035	Identifier	enc		728020	0					
ANR	728036	PrimaryExpression	1		728020	1					
ANR	728037	CompoundStatement		4:35:48:48	728020	1					
ANR	728038	ExpressionStatement	len = 2	5652:4:127509:127516	728020	0	True				
ANR	728039	AssignmentExpression	len = 2		728020	0		=			
ANR	728040	Identifier	len		728020	0					
ANR	728041	PrimaryExpression	2		728020	1					
ANR	728042	ElseStatement	else		728020	0					
ANR	728043	CompoundStatement		7:7:74:74	728020	0					
ANR	728044	ExpressionStatement	"len = ONIGENC_CODE_TO_MBCLEN ( enc , code )"	5655:4:127535:127574	728020	0	True				
ANR	728045	AssignmentExpression	"len = ONIGENC_CODE_TO_MBCLEN ( enc , code )"		728020	0		=			
ANR	728046	Identifier	len		728020	0					
ANR	728047	CallExpression	"ONIGENC_CODE_TO_MBCLEN ( enc , code )"		728020	1					
ANR	728048	Callee	ONIGENC_CODE_TO_MBCLEN		728020	0					
ANR	728049	Identifier	ONIGENC_CODE_TO_MBCLEN		728020	0					
ANR	728050	ArgumentList	enc		728020	1					
ANR	728051	Argument	enc		728020	0					
ANR	728052	Identifier	enc		728020	0					
ANR	728053	Argument	code		728020	1					
ANR	728054	Identifier	code		728020	0					
ANR	728055	ReturnStatement	"return onig_is_code_in_cc_len ( len , code , cc ) ;"	5657:2:127582:127626	728020	2	True				
ANR	728056	CallExpression	"onig_is_code_in_cc_len ( len , code , cc )"		728020	0					
ANR	728057	Callee	onig_is_code_in_cc_len		728020	0					
ANR	728058	Identifier	onig_is_code_in_cc_len		728020	0					
ANR	728059	ArgumentList	len		728020	1					
ANR	728060	Argument	len		728020	0					
ANR	728061	Identifier	len		728020	0					
ANR	728062	Argument	code		728020	1					
ANR	728063	Identifier	code		728020	0					
ANR	728064	Argument	cc		728020	2					
ANR	728065	Identifier	cc		728020	0					
ANR	728066	ReturnType	extern int		728020	1					
ANR	728067	Identifier	onig_is_code_in_cc		728020	2					
ANR	728068	ParameterList	"OnigEncoding enc , OnigCodePoint code , CClassNode * cc"		728020	3					
ANR	728069	Parameter	OnigEncoding enc	5647:19:127400:127415	728020	0	True				
ANR	728070	ParameterType	OnigEncoding		728020	0					
ANR	728071	Identifier	enc		728020	1					
ANR	728072	Parameter	OnigCodePoint code	5647:37:127418:127435	728020	1	True				
ANR	728073	ParameterType	OnigCodePoint		728020	0					
ANR	728074	Identifier	code		728020	1					
ANR	728075	Parameter	CClassNode * cc	5647:57:127438:127451	728020	2	True				
ANR	728076	ParameterType	CClassNode *		728020	0					
ANR	728077	Identifier	cc		728020	1					
ANR	728078	CFGEntryNode	ENTRY		728020		True				
ANR	728079	CFGExitNode	EXIT		728020		True				
ANR	728080	Symbol	cc		728020						
ANR	728081	Symbol	ONIGENC_CODE_TO_MBCLEN		728020						
ANR	728082	Symbol	code		728020						
ANR	728083	Symbol	len		728020						
ANR	728084	Symbol	ONIGENC_MBC_MINLEN		728020						
ANR	728085	Symbol	enc		728020						
ANR	728086	Symbol	onig_is_code_in_cc_len		728020						
ANR	728087	DeclStmt									
ANR	728088	Decl							OnigOpInfoType	OnigOpInfoType [ ]	OnigOpInfo
ANR	728089	Function	op2name	5766:0:133572:133755							
ANR	728090	FunctionDef	op2name (int opcode)		728089	0					
ANR	728091	CompoundStatement		5768:0:133605:133755	728089	0					
ANR	728092	IdentifierDeclStatement	int i ;	5769:2:133609:133614	728089	0	True				
ANR	728093	IdentifierDecl	i		728089	0					
ANR	728094	IdentifierDeclType	int		728089	0					
ANR	728095	Identifier	i		728089	1					
ANR	728096	ForStatement	for ( i = 0 ; OnigOpInfo [ i ] . opcode >= 0 ; i ++ )		728089	1					
ANR	728097	ForInit	i = 0 ;	5771:7:133624:133629	728089	0	True				
ANR	728098	AssignmentExpression	i = 0		728089	0		=			
ANR	728099	Identifier	i		728089	0					
ANR	728100	PrimaryExpression	0		728089	1					
ANR	728101	Condition	OnigOpInfo [ i ] . opcode >= 0	5771:14:133631:133655	728089	1	True				
ANR	728102	RelationalExpression	OnigOpInfo [ i ] . opcode >= 0		728089	0		>=			
ANR	728103	MemberAccess	OnigOpInfo [ i ] . opcode		728089	0					
ANR	728104	ArrayIndexing	OnigOpInfo [ i ]		728089	0					
ANR	728105	Identifier	OnigOpInfo		728089	0					
ANR	728106	Identifier	i		728089	1					
ANR	728107	Identifier	opcode		728089	1					
ANR	728108	PrimaryExpression	0		728089	1					
ANR	728109	PostIncDecOperationExpression	i ++	5771:41:133658:133660	728089	2	True				
ANR	728110	Identifier	i		728089	0					
ANR	728111	IncDec	++		728089	1					
ANR	728112	CompoundStatement		4:46:57:57	728089	3					
ANR	728113	IfStatement	if ( opcode == OnigOpInfo [ i ] . opcode )		728089	0					
ANR	728114	Condition	opcode == OnigOpInfo [ i ] . opcode	5772:8:133673:133702	728089	0	True				
ANR	728115	EqualityExpression	opcode == OnigOpInfo [ i ] . opcode		728089	0		==			
ANR	728116	Identifier	opcode		728089	0					
ANR	728117	MemberAccess	OnigOpInfo [ i ] . opcode		728089	1					
ANR	728118	ArrayIndexing	OnigOpInfo [ i ]		728089	0					
ANR	728119	Identifier	OnigOpInfo		728089	0					
ANR	728120	Identifier	i		728089	1					
ANR	728121	Identifier	opcode		728089	1					
ANR	728122	ReturnStatement	return OnigOpInfo [ i ] . name ;	5773:6:133711:133736	728089	1	True				
ANR	728123	MemberAccess	OnigOpInfo [ i ] . name		728089	0					
ANR	728124	ArrayIndexing	OnigOpInfo [ i ]		728089	0					
ANR	728125	Identifier	OnigOpInfo		728089	0					
ANR	728126	Identifier	i		728089	1					
ANR	728127	Identifier	name		728089	1					
ANR	728128	ReturnStatement	"return """" ;"	5775:2:133744:133753	728089	2	True				
ANR	728129	PrimaryExpression	""""""		728089	0					
ANR	728130	ReturnType	static char *		728089	1					
ANR	728131	Identifier	op2name		728089	2					
ANR	728132	ParameterList	int opcode		728089	3					
ANR	728133	Parameter	int opcode	5767:8:133593:133602	728089	0	True				
ANR	728134	ParameterType	int		728089	0					
ANR	728135	Identifier	opcode		728089	1					
ANR	728136	CFGEntryNode	ENTRY		728089		True				
ANR	728137	CFGExitNode	EXIT		728089		True				
ANR	728138	Symbol	OnigOpInfo [ i ] . opcode		728089						
ANR	728139	Symbol	* i		728089						
ANR	728140	Symbol	* OnigOpInfo		728089						
ANR	728141	Symbol	OnigOpInfo		728089						
ANR	728142	Symbol	i		728089						
ANR	728143	Symbol	opcode		728089						
ANR	728144	Symbol	OnigOpInfo [ i ] . name		728089						
ANR	728145	Function	op2arg_type	5778:0:133758:133956							
ANR	728146	FunctionDef	op2arg_type (int opcode)		728145	0					
ANR	728147	CompoundStatement		5780:0:133793:133956	728145	0					
ANR	728148	IdentifierDeclStatement	int i ;	5781:2:133797:133802	728145	0	True				
ANR	728149	IdentifierDecl	i		728145	0					
ANR	728150	IdentifierDeclType	int		728145	0					
ANR	728151	Identifier	i		728145	1					
ANR	728152	ForStatement	for ( i = 0 ; OnigOpInfo [ i ] . opcode >= 0 ; i ++ )		728145	1					
ANR	728153	ForInit	i = 0 ;	5783:7:133812:133817	728145	0	True				
ANR	728154	AssignmentExpression	i = 0		728145	0		=			
ANR	728155	Identifier	i		728145	0					
ANR	728156	PrimaryExpression	0		728145	1					
ANR	728157	Condition	OnigOpInfo [ i ] . opcode >= 0	5783:14:133819:133843	728145	1	True				
ANR	728158	RelationalExpression	OnigOpInfo [ i ] . opcode >= 0		728145	0		>=			
ANR	728159	MemberAccess	OnigOpInfo [ i ] . opcode		728145	0					
ANR	728160	ArrayIndexing	OnigOpInfo [ i ]		728145	0					
ANR	728161	Identifier	OnigOpInfo		728145	0					
ANR	728162	Identifier	i		728145	1					
ANR	728163	Identifier	opcode		728145	1					
ANR	728164	PrimaryExpression	0		728145	1					
ANR	728165	PostIncDecOperationExpression	i ++	5783:41:133846:133848	728145	2	True				
ANR	728166	Identifier	i		728145	0					
ANR	728167	IncDec	++		728145	1					
ANR	728168	CompoundStatement		4:46:57:57	728145	3					
ANR	728169	IfStatement	if ( opcode == OnigOpInfo [ i ] . opcode )		728145	0					
ANR	728170	Condition	opcode == OnigOpInfo [ i ] . opcode	5784:8:133861:133890	728145	0	True				
ANR	728171	EqualityExpression	opcode == OnigOpInfo [ i ] . opcode		728145	0		==			
ANR	728172	Identifier	opcode		728145	0					
ANR	728173	MemberAccess	OnigOpInfo [ i ] . opcode		728145	1					
ANR	728174	ArrayIndexing	OnigOpInfo [ i ]		728145	0					
ANR	728175	Identifier	OnigOpInfo		728145	0					
ANR	728176	Identifier	i		728145	1					
ANR	728177	Identifier	opcode		728145	1					
ANR	728178	ReturnStatement	return OnigOpInfo [ i ] . arg_type ;	5785:6:133899:133928	728145	1	True				
ANR	728179	MemberAccess	OnigOpInfo [ i ] . arg_type		728145	0					
ANR	728180	ArrayIndexing	OnigOpInfo [ i ]		728145	0					
ANR	728181	Identifier	OnigOpInfo		728145	0					
ANR	728182	Identifier	i		728145	1					
ANR	728183	Identifier	arg_type		728145	1					
ANR	728184	ReturnStatement	return ARG_SPECIAL ;	5787:2:133936:133954	728145	2	True				
ANR	728185	Identifier	ARG_SPECIAL		728145	0					
ANR	728186	ReturnType	static int		728145	1					
ANR	728187	Identifier	op2arg_type		728145	2					
ANR	728188	ParameterList	int opcode		728145	3					
ANR	728189	Parameter	int opcode	5779:12:133781:133790	728145	0	True				
ANR	728190	ParameterType	int		728145	0					
ANR	728191	Identifier	opcode		728145	1					
ANR	728192	CFGEntryNode	ENTRY		728145		True				
ANR	728193	CFGExitNode	EXIT		728145		True				
ANR	728194	Symbol	OnigOpInfo [ i ] . arg_type		728145						
ANR	728195	Symbol	OnigOpInfo [ i ] . opcode		728145						
ANR	728196	Symbol	* i		728145						
ANR	728197	Symbol	* OnigOpInfo		728145						
ANR	728198	Symbol	OnigOpInfo		728145						
ANR	728199	Symbol	ARG_SPECIAL		728145						
ANR	728200	Symbol	i		728145						
ANR	728201	Symbol	opcode		728145						
ANR	728202	Function	Indent	5790:0:133959:134055							
ANR	728203	FunctionDef	"Indent (FILE * f , int indent)"		728202	0					
ANR	728204	CompoundStatement		5792:0:133999:134055	728202	0					
ANR	728205	IdentifierDeclStatement	int i ;	5793:2:134003:134008	728202	0	True				
ANR	728206	IdentifierDecl	i		728202	0					
ANR	728207	IdentifierDeclType	int		728202	0					
ANR	728208	Identifier	i		728202	1					
ANR	728209	ForStatement	for ( i = 0 ; i < indent ; i ++ )		728202	1					
ANR	728210	ForInit	i = 0 ;	5794:7:134017:134022	728202	0	True				
ANR	728211	AssignmentExpression	i = 0		728202	0		=			
ANR	728212	Identifier	i		728202	0					
ANR	728213	PrimaryExpression	0		728202	1					
ANR	728214	Condition	i < indent	5794:14:134024:134033	728202	1	True				
ANR	728215	RelationalExpression	i < indent		728202	0		<			
ANR	728216	Identifier	i		728202	0					
ANR	728217	Identifier	indent		728202	1					
ANR	728218	PostIncDecOperationExpression	i ++	5794:26:134036:134038	728202	2	True				
ANR	728219	Identifier	i		728202	0					
ANR	728220	IncDec	++		728202	1					
ANR	728221	ExpressionStatement	"putc ( ' ' , f )"	5794:31:134041:134053	728202	3	True				
ANR	728222	CallExpression	"putc ( ' ' , f )"		728202	0					
ANR	728223	Callee	putc		728202	0					
ANR	728224	Identifier	putc		728202	0					
ANR	728225	ArgumentList	' '		728202	1					
ANR	728226	Argument	' '		728202	0					
ANR	728227	PrimaryExpression	' '		728202	0					
ANR	728228	Argument	f		728202	1					
ANR	728229	Identifier	f		728202	0					
ANR	728230	ReturnType	static void		728202	1					
ANR	728231	Identifier	Indent		728202	2					
ANR	728232	ParameterList	"FILE * f , int indent"		728202	3					
ANR	728233	Parameter	FILE * f	5791:7:133978:133984	728202	0	True				
ANR	728234	ParameterType	FILE *		728202	0					
ANR	728235	Identifier	f		728202	1					
ANR	728236	Parameter	int indent	5791:16:133987:133996	728202	1	True				
ANR	728237	ParameterType	int		728202	0					
ANR	728238	Identifier	indent		728202	1					
ANR	728239	CFGEntryNode	ENTRY		728202		True				
ANR	728240	CFGExitNode	EXIT		728202		True				
ANR	728241	Symbol	indent		728202						
ANR	728242	Symbol	f		728202						
ANR	728243	Symbol	i		728202						
ANR	728244	Function	p_string	5797:0:134058:134166							
ANR	728245	FunctionDef	"p_string (FILE * f , int len , UChar * s)"		728244	0					
ANR	728246	CompoundStatement		5799:0:134107:134166	728244	0					
ANR	728247	ExpressionStatement	"fputs ( "":"" , f )"	5800:2:134111:134124	728244	0	True				
ANR	728248	CallExpression	"fputs ( "":"" , f )"		728244	0					
ANR	728249	Callee	fputs		728244	0					
ANR	728250	Identifier	fputs		728244	0					
ANR	728251	ArgumentList	""":"""		728244	1					
ANR	728252	Argument	""":"""		728244	0					
ANR	728253	PrimaryExpression	""":"""		728244	0					
ANR	728254	Argument	f		728244	1					
ANR	728255	Identifier	f		728244	0					
ANR	728256	WhileStatement	while ( len -- > 0 )		728244	1					
ANR	728257	Condition	len -- > 0	5801:9:134135:134143	728244	0	True				
ANR	728258	RelationalExpression	len -- > 0		728244	0		>			
ANR	728259	PostIncDecOperationExpression	len --		728244	0					
ANR	728260	Identifier	len		728244	0					
ANR	728261	IncDec	--		728244	1					
ANR	728262	PrimaryExpression	0		728244	1					
ANR	728263	CompoundStatement		3:20:38:38	728244	1					
ANR	728264	ExpressionStatement	"fputc ( * s ++ , f )"	5801:22:134148:134162	728244	0	True				
ANR	728265	CallExpression	"fputc ( * s ++ , f )"		728244	0					
ANR	728266	Callee	fputc		728244	0					
ANR	728267	Identifier	fputc		728244	0					
ANR	728268	ArgumentList	* s ++		728244	1					
ANR	728269	Argument	* s ++		728244	0					
ANR	728270	UnaryOperationExpression	* s ++		728244	0					
ANR	728271	UnaryOperator	*		728244	0					
ANR	728272	PostIncDecOperationExpression	s ++		728244	1					
ANR	728273	Identifier	s		728244	0					
ANR	728274	IncDec	++		728244	1					
ANR	728275	Argument	f		728244	1					
ANR	728276	Identifier	f		728244	0					
ANR	728277	ReturnType	static void		728244	1					
ANR	728278	Identifier	p_string		728244	2					
ANR	728279	ParameterList	"FILE * f , int len , UChar * s"		728244	3					
ANR	728280	Parameter	FILE * f	5798:9:134079:134085	728244	0	True				
ANR	728281	ParameterType	FILE *		728244	0					
ANR	728282	Identifier	f		728244	1					
ANR	728283	Parameter	int len	5798:18:134088:134094	728244	1	True				
ANR	728284	ParameterType	int		728244	0					
ANR	728285	Identifier	len		728244	1					
ANR	728286	Parameter	UChar * s	5798:27:134097:134104	728244	2	True				
ANR	728287	ParameterType	UChar *		728244	0					
ANR	728288	Identifier	s		728244	1					
ANR	728289	CFGEntryNode	ENTRY		728244		True				
ANR	728290	CFGExitNode	EXIT		728244		True				
ANR	728291	Symbol	* s ++		728244						
ANR	728292	Symbol	s		728244						
ANR	728293	Symbol	len		728244						
ANR	728294	Symbol	f		728244						
ANR	728295	Function	p_len_string	5804:0:134169:134333							
ANR	728296	FunctionDef	"p_len_string (FILE * f , LengthType len , int mb_len , UChar * s)"		728295	0					
ANR	728297	CompoundStatement		5806:0:134241:134333	728295	0					
ANR	728298	IdentifierDeclStatement	int x = len * mb_len ;	5807:2:134245:134265	728295	0	True				
ANR	728299	IdentifierDecl	x = len * mb_len		728295	0					
ANR	728300	IdentifierDeclType	int		728295	0					
ANR	728301	Identifier	x		728295	1					
ANR	728302	AssignmentExpression	x = len * mb_len		728295	2		=			
ANR	728303	Identifier	x		728295	0					
ANR	728304	MultiplicativeExpression	len * mb_len		728295	1		*			
ANR	728305	Identifier	len		728295	0					
ANR	728306	Identifier	mb_len		728295	1					
ANR	728307	ExpressionStatement	"fprintf ( f , "":%d:"" , len )"	5809:2:134270:134293	728295	1	True				
ANR	728308	CallExpression	"fprintf ( f , "":%d:"" , len )"		728295	0					
ANR	728309	Callee	fprintf		728295	0					
ANR	728310	Identifier	fprintf		728295	0					
ANR	728311	ArgumentList	f		728295	1					
ANR	728312	Argument	f		728295	0					
ANR	728313	Identifier	f		728295	0					
ANR	728314	Argument	""":%d:"""		728295	1					
ANR	728315	PrimaryExpression	""":%d:"""		728295	0					
ANR	728316	Argument	len		728295	2					
ANR	728317	Identifier	len		728295	0					
ANR	728318	WhileStatement	while ( x -- > 0 )		728295	2					
ANR	728319	Condition	x -- > 0	5810:9:134304:134310	728295	0	True				
ANR	728320	RelationalExpression	x -- > 0		728295	0		>			
ANR	728321	PostIncDecOperationExpression	x --		728295	0					
ANR	728322	Identifier	x		728295	0					
ANR	728323	IncDec	--		728295	1					
ANR	728324	PrimaryExpression	0		728295	1					
ANR	728325	CompoundStatement		5:18:71:71	728295	1					
ANR	728326	ExpressionStatement	"fputc ( * s ++ , f )"	5810:20:134315:134329	728295	0	True				
ANR	728327	CallExpression	"fputc ( * s ++ , f )"		728295	0					
ANR	728328	Callee	fputc		728295	0					
ANR	728329	Identifier	fputc		728295	0					
ANR	728330	ArgumentList	* s ++		728295	1					
ANR	728331	Argument	* s ++		728295	0					
ANR	728332	UnaryOperationExpression	* s ++		728295	0					
ANR	728333	UnaryOperator	*		728295	0					
ANR	728334	PostIncDecOperationExpression	s ++		728295	1					
ANR	728335	Identifier	s		728295	0					
ANR	728336	IncDec	++		728295	1					
ANR	728337	Argument	f		728295	1					
ANR	728338	Identifier	f		728295	0					
ANR	728339	ReturnType	static void		728295	1					
ANR	728340	Identifier	p_len_string		728295	2					
ANR	728341	ParameterList	"FILE * f , LengthType len , int mb_len , UChar * s"		728295	3					
ANR	728342	Parameter	FILE * f	5805:13:134194:134200	728295	0	True				
ANR	728343	ParameterType	FILE *		728295	0					
ANR	728344	Identifier	f		728295	1					
ANR	728345	Parameter	LengthType len	5805:22:134203:134216	728295	1	True				
ANR	728346	ParameterType	LengthType		728295	0					
ANR	728347	Identifier	len		728295	1					
ANR	728348	Parameter	int mb_len	5805:38:134219:134228	728295	2	True				
ANR	728349	ParameterType	int		728295	0					
ANR	728350	Identifier	mb_len		728295	1					
ANR	728351	Parameter	UChar * s	5805:50:134231:134238	728295	3	True				
ANR	728352	ParameterType	UChar *		728295	0					
ANR	728353	Identifier	s		728295	1					
ANR	728354	CFGEntryNode	ENTRY		728295		True				
ANR	728355	CFGExitNode	EXIT		728295		True				
ANR	728356	Symbol	* s ++		728295						
ANR	728357	Symbol	s		728295						
ANR	728358	Symbol	len		728295						
ANR	728359	Symbol	f		728295						
ANR	728360	Symbol	x		728295						
ANR	728361	Symbol	mb_len		728295						
ANR	728362	Function	onig_print_compiled_byte_code	5813:0:134336:139826							
ANR	728363	FunctionDef	"onig_print_compiled_byte_code (FILE * f , UChar * bp , UChar * * nextp , OnigEncoding enc)"		728362	0					
ANR	728364	CompoundStatement		5816:0:134461:139826	728362	0					
ANR	728365	IdentifierDeclStatement	"int i , n , arg_type ;"	5817:2:134465:134483	728362	0	True				
ANR	728366	IdentifierDecl	i		728362	0					
ANR	728367	IdentifierDeclType	int		728362	0					
ANR	728368	Identifier	i		728362	1					
ANR	728369	IdentifierDecl	n		728362	1					
ANR	728370	IdentifierDeclType	int		728362	0					
ANR	728371	Identifier	n		728362	1					
ANR	728372	IdentifierDecl	arg_type		728362	2					
ANR	728373	IdentifierDeclType	int		728362	0					
ANR	728374	Identifier	arg_type		728362	1					
ANR	728375	IdentifierDeclStatement	RelAddrType addr ;	5818:2:134487:134503	728362	1	True				
ANR	728376	IdentifierDecl	addr		728362	0					
ANR	728377	IdentifierDeclType	RelAddrType		728362	0					
ANR	728378	Identifier	addr		728362	1					
ANR	728379	IdentifierDeclStatement	LengthType len ;	5819:2:134507:134521	728362	2	True				
ANR	728380	IdentifierDecl	len		728362	0					
ANR	728381	IdentifierDeclType	LengthType		728362	0					
ANR	728382	Identifier	len		728362	1					
ANR	728383	IdentifierDeclStatement	MemNumType mem ;	5820:2:134525:134539	728362	3	True				
ANR	728384	IdentifierDecl	mem		728362	0					
ANR	728385	IdentifierDeclType	MemNumType		728362	0					
ANR	728386	Identifier	mem		728362	1					
ANR	728387	IdentifierDeclStatement	StateCheckNumType scn ;	5821:2:134543:134564	728362	4	True				
ANR	728388	IdentifierDecl	scn		728362	0					
ANR	728389	IdentifierDeclType	StateCheckNumType		728362	0					
ANR	728390	Identifier	scn		728362	1					
ANR	728391	IdentifierDeclStatement	OnigCodePoint code ;	5822:2:134568:134586	728362	5	True				
ANR	728392	IdentifierDecl	code		728362	0					
ANR	728393	IdentifierDeclType	OnigCodePoint		728362	0					
ANR	728394	Identifier	code		728362	1					
ANR	728395	IdentifierDeclStatement	UChar * q ;	5823:2:134590:134598	728362	6	True				
ANR	728396	IdentifierDecl	* q		728362	0					
ANR	728397	IdentifierDeclType	UChar *		728362	0					
ANR	728398	Identifier	q		728362	1					
ANR	728399	ExpressionStatement	"fprintf ( f , ""[%s"" , op2name ( * bp ) )"	5825:2:134603:134634	728362	7	True				
ANR	728400	CallExpression	"fprintf ( f , ""[%s"" , op2name ( * bp ) )"		728362	0					
ANR	728401	Callee	fprintf		728362	0					
ANR	728402	Identifier	fprintf		728362	0					
ANR	728403	ArgumentList	f		728362	1					
ANR	728404	Argument	f		728362	0					
ANR	728405	Identifier	f		728362	0					
ANR	728406	Argument	"""[%s"""		728362	1					
ANR	728407	PrimaryExpression	"""[%s"""		728362	0					
ANR	728408	Argument	op2name ( * bp )		728362	2					
ANR	728409	CallExpression	op2name ( * bp )		728362	0					
ANR	728410	Callee	op2name		728362	0					
ANR	728411	Identifier	op2name		728362	0					
ANR	728412	ArgumentList	* bp		728362	1					
ANR	728413	Argument	* bp		728362	0					
ANR	728414	UnaryOperationExpression	* bp		728362	0					
ANR	728415	UnaryOperator	*		728362	0					
ANR	728416	Identifier	bp		728362	1					
ANR	728417	ExpressionStatement	arg_type = op2arg_type ( * bp )	5826:2:134638:134665	728362	8	True				
ANR	728418	AssignmentExpression	arg_type = op2arg_type ( * bp )		728362	0		=			
ANR	728419	Identifier	arg_type		728362	0					
ANR	728420	CallExpression	op2arg_type ( * bp )		728362	1					
ANR	728421	Callee	op2arg_type		728362	0					
ANR	728422	Identifier	op2arg_type		728362	0					
ANR	728423	ArgumentList	* bp		728362	1					
ANR	728424	Argument	* bp		728362	0					
ANR	728425	UnaryOperationExpression	* bp		728362	0					
ANR	728426	UnaryOperator	*		728362	0					
ANR	728427	Identifier	bp		728362	1					
ANR	728428	IfStatement	if ( arg_type != ARG_SPECIAL )		728362	9					
ANR	728429	Condition	arg_type != ARG_SPECIAL	5827:6:134673:134695	728362	0	True				
ANR	728430	EqualityExpression	arg_type != ARG_SPECIAL		728362	0		!=			
ANR	728431	Identifier	arg_type		728362	0					
ANR	728432	Identifier	ARG_SPECIAL		728362	1					
ANR	728433	CompoundStatement		12:31:236:236	728362	1					
ANR	728434	ExpressionStatement	bp ++	5828:4:134704:134708	728362	0	True				
ANR	728435	PostIncDecOperationExpression	bp ++		728362	0					
ANR	728436	Identifier	bp		728362	0					
ANR	728437	IncDec	++		728362	1					
ANR	728438	SwitchStatement	switch ( arg_type )		728362	1					
ANR	728439	Condition	arg_type	5829:12:134722:134729	728362	0	True				
ANR	728440	Identifier	arg_type		728362	0					
ANR	728441	CompoundStatement		14:22:270:270	728362	1					
ANR	728442	Label	case ARG_NON :	5830:4:134738:134750	728362	0	True				
ANR	728443	Identifier	ARG_NON		728362	0					
ANR	728444	BreakStatement	break ;	5831:6:134758:134763	728362	1	True				
ANR	728445	Label	case ARG_RELADDR :	5832:4:134769:134785	728362	2	True				
ANR	728446	Identifier	ARG_RELADDR		728362	0					
ANR	728447	ExpressionStatement	"GET_RELADDR_INC ( addr , bp )"	5833:6:134793:134818	728362	3	True				
ANR	728448	CallExpression	"GET_RELADDR_INC ( addr , bp )"		728362	0					
ANR	728449	Callee	GET_RELADDR_INC		728362	0					
ANR	728450	Identifier	GET_RELADDR_INC		728362	0					
ANR	728451	ArgumentList	addr		728362	1					
ANR	728452	Argument	addr		728362	0					
ANR	728453	Identifier	addr		728362	0					
ANR	728454	Argument	bp		728362	1					
ANR	728455	Identifier	bp		728362	0					
ANR	728456	ExpressionStatement	"fprintf ( f , "":(%d)"" , addr )"	5834:6:134826:134851	728362	4	True				
ANR	728457	CallExpression	"fprintf ( f , "":(%d)"" , addr )"		728362	0					
ANR	728458	Callee	fprintf		728362	0					
ANR	728459	Identifier	fprintf		728362	0					
ANR	728460	ArgumentList	f		728362	1					
ANR	728461	Argument	f		728362	0					
ANR	728462	Identifier	f		728362	0					
ANR	728463	Argument	""":(%d)"""		728362	1					
ANR	728464	PrimaryExpression	""":(%d)"""		728362	0					
ANR	728465	Argument	addr		728362	2					
ANR	728466	Identifier	addr		728362	0					
ANR	728467	BreakStatement	break ;	5835:6:134859:134864	728362	5	True				
ANR	728468	Label	case ARG_ABSADDR :	5836:4:134870:134886	728362	6	True				
ANR	728469	Identifier	ARG_ABSADDR		728362	0					
ANR	728470	ExpressionStatement	"GET_ABSADDR_INC ( addr , bp )"	5837:6:134894:134919	728362	7	True				
ANR	728471	CallExpression	"GET_ABSADDR_INC ( addr , bp )"		728362	0					
ANR	728472	Callee	GET_ABSADDR_INC		728362	0					
ANR	728473	Identifier	GET_ABSADDR_INC		728362	0					
ANR	728474	ArgumentList	addr		728362	1					
ANR	728475	Argument	addr		728362	0					
ANR	728476	Identifier	addr		728362	0					
ANR	728477	Argument	bp		728362	1					
ANR	728478	Identifier	bp		728362	0					
ANR	728479	ExpressionStatement	"fprintf ( f , "":(%d)"" , addr )"	5838:6:134927:134952	728362	8	True				
ANR	728480	CallExpression	"fprintf ( f , "":(%d)"" , addr )"		728362	0					
ANR	728481	Callee	fprintf		728362	0					
ANR	728482	Identifier	fprintf		728362	0					
ANR	728483	ArgumentList	f		728362	1					
ANR	728484	Argument	f		728362	0					
ANR	728485	Identifier	f		728362	0					
ANR	728486	Argument	""":(%d)"""		728362	1					
ANR	728487	PrimaryExpression	""":(%d)"""		728362	0					
ANR	728488	Argument	addr		728362	2					
ANR	728489	Identifier	addr		728362	0					
ANR	728490	BreakStatement	break ;	5839:6:134960:134965	728362	9	True				
ANR	728491	Label	case ARG_LENGTH :	5840:4:134971:134986	728362	10	True				
ANR	728492	Identifier	ARG_LENGTH		728362	0					
ANR	728493	ExpressionStatement	"GET_LENGTH_INC ( len , bp )"	5841:6:134994:135017	728362	11	True				
ANR	728494	CallExpression	"GET_LENGTH_INC ( len , bp )"		728362	0					
ANR	728495	Callee	GET_LENGTH_INC		728362	0					
ANR	728496	Identifier	GET_LENGTH_INC		728362	0					
ANR	728497	ArgumentList	len		728362	1					
ANR	728498	Argument	len		728362	0					
ANR	728499	Identifier	len		728362	0					
ANR	728500	Argument	bp		728362	1					
ANR	728501	Identifier	bp		728362	0					
ANR	728502	ExpressionStatement	"fprintf ( f , "":%d"" , len )"	5842:6:135025:135047	728362	12	True				
ANR	728503	CallExpression	"fprintf ( f , "":%d"" , len )"		728362	0					
ANR	728504	Callee	fprintf		728362	0					
ANR	728505	Identifier	fprintf		728362	0					
ANR	728506	ArgumentList	f		728362	1					
ANR	728507	Argument	f		728362	0					
ANR	728508	Identifier	f		728362	0					
ANR	728509	Argument	""":%d"""		728362	1					
ANR	728510	PrimaryExpression	""":%d"""		728362	0					
ANR	728511	Argument	len		728362	2					
ANR	728512	Identifier	len		728362	0					
ANR	728513	BreakStatement	break ;	5843:6:135055:135060	728362	13	True				
ANR	728514	Label	case ARG_MEMNUM :	5844:4:135066:135081	728362	14	True				
ANR	728515	Identifier	ARG_MEMNUM		728362	0					
ANR	728516	ExpressionStatement	mem = * ( ( MemNumType * ) bp )	5845:6:135089:135114	728362	15	True				
ANR	728517	AssignmentExpression	mem = * ( ( MemNumType * ) bp )		728362	0		=			
ANR	728518	Identifier	mem		728362	0					
ANR	728519	UnaryOperationExpression	* ( ( MemNumType * ) bp )		728362	1					
ANR	728520	UnaryOperator	*		728362	0					
ANR	728521	CastExpression	( MemNumType * ) bp		728362	1					
ANR	728522	CastTarget	MemNumType *		728362	0					
ANR	728523	Identifier	bp		728362	1					
ANR	728524	ExpressionStatement	bp += SIZE_MEMNUM	5846:6:135122:135139	728362	16	True				
ANR	728525	AssignmentExpression	bp += SIZE_MEMNUM		728362	0		+=			
ANR	728526	Identifier	bp		728362	0					
ANR	728527	Identifier	SIZE_MEMNUM		728362	1					
ANR	728528	ExpressionStatement	"fprintf ( f , "":%d"" , mem )"	5847:6:135147:135169	728362	17	True				
ANR	728529	CallExpression	"fprintf ( f , "":%d"" , mem )"		728362	0					
ANR	728530	Callee	fprintf		728362	0					
ANR	728531	Identifier	fprintf		728362	0					
ANR	728532	ArgumentList	f		728362	1					
ANR	728533	Argument	f		728362	0					
ANR	728534	Identifier	f		728362	0					
ANR	728535	Argument	""":%d"""		728362	1					
ANR	728536	PrimaryExpression	""":%d"""		728362	0					
ANR	728537	Argument	mem		728362	2					
ANR	728538	Identifier	mem		728362	0					
ANR	728539	BreakStatement	break ;	5848:6:135177:135182	728362	18	True				
ANR	728540	Label	case ARG_OPTION :	5849:4:135188:135203	728362	19	True				
ANR	728541	Identifier	ARG_OPTION		728362	0					
ANR	728542	CompoundStatement		36:1:752:799	728362	20					
ANR	728543	IdentifierDeclStatement	OnigOptionType option = * ( ( OnigOptionType * ) bp ) ;	5851:1:135214:135261	728362	0	True				
ANR	728544	IdentifierDecl	option = * ( ( OnigOptionType * ) bp )		728362	0					
ANR	728545	IdentifierDeclType	OnigOptionType		728362	0					
ANR	728546	Identifier	option		728362	1					
ANR	728547	AssignmentExpression	option = * ( ( OnigOptionType * ) bp )		728362	2		=			
ANR	728548	Identifier	option		728362	0					
ANR	728549	UnaryOperationExpression	* ( ( OnigOptionType * ) bp )		728362	1					
ANR	728550	UnaryOperator	*		728362	0					
ANR	728551	CastExpression	( OnigOptionType * ) bp		728362	1					
ANR	728552	CastTarget	OnigOptionType *		728362	0					
ANR	728553	Identifier	bp		728362	1					
ANR	728554	ExpressionStatement	bp += SIZE_OPTION	5852:1:135264:135281	728362	1	True				
ANR	728555	AssignmentExpression	bp += SIZE_OPTION		728362	0		+=			
ANR	728556	Identifier	bp		728362	0					
ANR	728557	Identifier	SIZE_OPTION		728362	1					
ANR	728558	ExpressionStatement	"fprintf ( f , "":%d"" , option )"	5853:1:135284:135309	728362	2	True				
ANR	728559	CallExpression	"fprintf ( f , "":%d"" , option )"		728362	0					
ANR	728560	Callee	fprintf		728362	0					
ANR	728561	Identifier	fprintf		728362	0					
ANR	728562	ArgumentList	f		728362	1					
ANR	728563	Argument	f		728362	0					
ANR	728564	Identifier	f		728362	0					
ANR	728565	Argument	""":%d"""		728362	1					
ANR	728566	PrimaryExpression	""":%d"""		728362	0					
ANR	728567	Argument	option		728362	2					
ANR	728568	Identifier	option		728362	0					
ANR	728569	BreakStatement	break ;	5855:6:135325:135330	728362	21	True				
ANR	728570	Label	case ARG_STATE_CHECK :	5857:4:135337:135357	728362	22	True				
ANR	728571	Identifier	ARG_STATE_CHECK		728362	0					
ANR	728572	ExpressionStatement	scn = * ( ( StateCheckNumType * ) bp )	5858:6:135365:135397	728362	23	True				
ANR	728573	AssignmentExpression	scn = * ( ( StateCheckNumType * ) bp )		728362	0		=			
ANR	728574	Identifier	scn		728362	0					
ANR	728575	UnaryOperationExpression	* ( ( StateCheckNumType * ) bp )		728362	1					
ANR	728576	UnaryOperator	*		728362	0					
ANR	728577	CastExpression	( StateCheckNumType * ) bp		728362	1					
ANR	728578	CastTarget	StateCheckNumType *		728362	0					
ANR	728579	Identifier	bp		728362	1					
ANR	728580	ExpressionStatement	bp += SIZE_STATE_CHECK_NUM	5859:6:135405:135431	728362	24	True				
ANR	728581	AssignmentExpression	bp += SIZE_STATE_CHECK_NUM		728362	0		+=			
ANR	728582	Identifier	bp		728362	0					
ANR	728583	Identifier	SIZE_STATE_CHECK_NUM		728362	1					
ANR	728584	ExpressionStatement	"fprintf ( f , "":%d"" , scn )"	5860:6:135439:135461	728362	25	True				
ANR	728585	CallExpression	"fprintf ( f , "":%d"" , scn )"		728362	0					
ANR	728586	Callee	fprintf		728362	0					
ANR	728587	Identifier	fprintf		728362	0					
ANR	728588	ArgumentList	f		728362	1					
ANR	728589	Argument	f		728362	0					
ANR	728590	Identifier	f		728362	0					
ANR	728591	Argument	""":%d"""		728362	1					
ANR	728592	PrimaryExpression	""":%d"""		728362	0					
ANR	728593	Argument	scn		728362	2					
ANR	728594	Identifier	scn		728362	0					
ANR	728595	BreakStatement	break ;	5861:6:135469:135474	728362	26	True				
ANR	728596	ElseStatement	else		728362	0					
ANR	728597	CompoundStatement		49:7:1031:1031	728362	0					
ANR	728598	SwitchStatement	switch ( * bp ++ )		728362	0					
ANR	728599	Condition	* bp ++	5865:12:135507:135511	728362	0	True				
ANR	728600	UnaryOperationExpression	* bp ++		728362	0					
ANR	728601	UnaryOperator	*		728362	0					
ANR	728602	PostIncDecOperationExpression	bp ++		728362	1					
ANR	728603	Identifier	bp		728362	0					
ANR	728604	IncDec	++		728362	1					
ANR	728605	CompoundStatement		50:19:1052:1052	728362	1					
ANR	728606	Label	case OP_EXACT1 :	5866:4:135520:135534	728362	0	True				
ANR	728607	Identifier	OP_EXACT1		728362	0					
ANR	728608	Label	case OP_ANYCHAR_STAR_PEEK_NEXT :	5867:4:135540:135570	728362	1	True				
ANR	728609	Identifier	OP_ANYCHAR_STAR_PEEK_NEXT		728362	0					
ANR	728610	Label	case OP_ANYCHAR_ML_STAR_PEEK_NEXT :	5868:4:135576:135609	728362	2	True				
ANR	728611	Identifier	OP_ANYCHAR_ML_STAR_PEEK_NEXT		728362	0					
ANR	728612	ExpressionStatement	"p_string ( f , 1 , bp ++ )"	5869:6:135617:135637	728362	3	True				
ANR	728613	CallExpression	"p_string ( f , 1 , bp ++ )"		728362	0					
ANR	728614	Callee	p_string		728362	0					
ANR	728615	Identifier	p_string		728362	0					
ANR	728616	ArgumentList	f		728362	1					
ANR	728617	Argument	f		728362	0					
ANR	728618	Identifier	f		728362	0					
ANR	728619	Argument	1		728362	1					
ANR	728620	PrimaryExpression	1		728362	0					
ANR	728621	Argument	bp ++		728362	2					
ANR	728622	PostIncDecOperationExpression	bp ++		728362	0					
ANR	728623	Identifier	bp		728362	0					
ANR	728624	IncDec	++		728362	1					
ANR	728625	BreakStatement	break ;	5869:28:135639:135644	728362	4	True				
ANR	728626	Label	case OP_EXACT2 :	5870:4:135650:135664	728362	5	True				
ANR	728627	Identifier	OP_EXACT2		728362	0					
ANR	728628	ExpressionStatement	"p_string ( f , 2 , bp )"	5871:6:135672:135690	728362	6	True				
ANR	728629	CallExpression	"p_string ( f , 2 , bp )"		728362	0					
ANR	728630	Callee	p_string		728362	0					
ANR	728631	Identifier	p_string		728362	0					
ANR	728632	ArgumentList	f		728362	1					
ANR	728633	Argument	f		728362	0					
ANR	728634	Identifier	f		728362	0					
ANR	728635	Argument	2		728362	1					
ANR	728636	PrimaryExpression	2		728362	0					
ANR	728637	Argument	bp		728362	2					
ANR	728638	Identifier	bp		728362	0					
ANR	728639	ExpressionStatement	bp += 2	5871:26:135692:135699	728362	7	True				
ANR	728640	AssignmentExpression	bp += 2		728362	0		+=			
ANR	728641	Identifier	bp		728362	0					
ANR	728642	PrimaryExpression	2		728362	1					
ANR	728643	BreakStatement	break ;	5871:35:135701:135706	728362	8	True				
ANR	728644	Label	case OP_EXACT3 :	5872:4:135712:135726	728362	9	True				
ANR	728645	Identifier	OP_EXACT3		728362	0					
ANR	728646	ExpressionStatement	"p_string ( f , 3 , bp )"	5873:6:135734:135752	728362	10	True				
ANR	728647	CallExpression	"p_string ( f , 3 , bp )"		728362	0					
ANR	728648	Callee	p_string		728362	0					
ANR	728649	Identifier	p_string		728362	0					
ANR	728650	ArgumentList	f		728362	1					
ANR	728651	Argument	f		728362	0					
ANR	728652	Identifier	f		728362	0					
ANR	728653	Argument	3		728362	1					
ANR	728654	PrimaryExpression	3		728362	0					
ANR	728655	Argument	bp		728362	2					
ANR	728656	Identifier	bp		728362	0					
ANR	728657	ExpressionStatement	bp += 3	5873:26:135754:135761	728362	11	True				
ANR	728658	AssignmentExpression	bp += 3		728362	0		+=			
ANR	728659	Identifier	bp		728362	0					
ANR	728660	PrimaryExpression	3		728362	1					
ANR	728661	BreakStatement	break ;	5873:35:135763:135768	728362	12	True				
ANR	728662	Label	case OP_EXACT4 :	5874:4:135774:135788	728362	13	True				
ANR	728663	Identifier	OP_EXACT4		728362	0					
ANR	728664	ExpressionStatement	"p_string ( f , 4 , bp )"	5875:6:135796:135814	728362	14	True				
ANR	728665	CallExpression	"p_string ( f , 4 , bp )"		728362	0					
ANR	728666	Callee	p_string		728362	0					
ANR	728667	Identifier	p_string		728362	0					
ANR	728668	ArgumentList	f		728362	1					
ANR	728669	Argument	f		728362	0					
ANR	728670	Identifier	f		728362	0					
ANR	728671	Argument	4		728362	1					
ANR	728672	PrimaryExpression	4		728362	0					
ANR	728673	Argument	bp		728362	2					
ANR	728674	Identifier	bp		728362	0					
ANR	728675	ExpressionStatement	bp += 4	5875:26:135816:135823	728362	15	True				
ANR	728676	AssignmentExpression	bp += 4		728362	0		+=			
ANR	728677	Identifier	bp		728362	0					
ANR	728678	PrimaryExpression	4		728362	1					
ANR	728679	BreakStatement	break ;	5875:35:135825:135830	728362	16	True				
ANR	728680	Label	case OP_EXACT5 :	5876:4:135836:135850	728362	17	True				
ANR	728681	Identifier	OP_EXACT5		728362	0					
ANR	728682	ExpressionStatement	"p_string ( f , 5 , bp )"	5877:6:135858:135876	728362	18	True				
ANR	728683	CallExpression	"p_string ( f , 5 , bp )"		728362	0					
ANR	728684	Callee	p_string		728362	0					
ANR	728685	Identifier	p_string		728362	0					
ANR	728686	ArgumentList	f		728362	1					
ANR	728687	Argument	f		728362	0					
ANR	728688	Identifier	f		728362	0					
ANR	728689	Argument	5		728362	1					
ANR	728690	PrimaryExpression	5		728362	0					
ANR	728691	Argument	bp		728362	2					
ANR	728692	Identifier	bp		728362	0					
ANR	728693	ExpressionStatement	bp += 5	5877:26:135878:135885	728362	19	True				
ANR	728694	AssignmentExpression	bp += 5		728362	0		+=			
ANR	728695	Identifier	bp		728362	0					
ANR	728696	PrimaryExpression	5		728362	1					
ANR	728697	BreakStatement	break ;	5877:35:135887:135892	728362	20	True				
ANR	728698	Label	case OP_EXACTN :	5878:4:135898:135912	728362	21	True				
ANR	728699	Identifier	OP_EXACTN		728362	0					
ANR	728700	ExpressionStatement	"GET_LENGTH_INC ( len , bp )"	5879:6:135920:135943	728362	22	True				
ANR	728701	CallExpression	"GET_LENGTH_INC ( len , bp )"		728362	0					
ANR	728702	Callee	GET_LENGTH_INC		728362	0					
ANR	728703	Identifier	GET_LENGTH_INC		728362	0					
ANR	728704	ArgumentList	len		728362	1					
ANR	728705	Argument	len		728362	0					
ANR	728706	Identifier	len		728362	0					
ANR	728707	Argument	bp		728362	1					
ANR	728708	Identifier	bp		728362	0					
ANR	728709	ExpressionStatement	"p_len_string ( f , len , 1 , bp )"	5880:6:135951:135978	728362	23	True				
ANR	728710	CallExpression	"p_len_string ( f , len , 1 , bp )"		728362	0					
ANR	728711	Callee	p_len_string		728362	0					
ANR	728712	Identifier	p_len_string		728362	0					
ANR	728713	ArgumentList	f		728362	1					
ANR	728714	Argument	f		728362	0					
ANR	728715	Identifier	f		728362	0					
ANR	728716	Argument	len		728362	1					
ANR	728717	Identifier	len		728362	0					
ANR	728718	Argument	1		728362	2					
ANR	728719	PrimaryExpression	1		728362	0					
ANR	728720	Argument	bp		728362	3					
ANR	728721	Identifier	bp		728362	0					
ANR	728722	ExpressionStatement	bp += len	5881:6:135986:135995	728362	24	True				
ANR	728723	AssignmentExpression	bp += len		728362	0		+=			
ANR	728724	Identifier	bp		728362	0					
ANR	728725	Identifier	len		728362	1					
ANR	728726	BreakStatement	break ;	5882:6:136003:136008	728362	25	True				
ANR	728727	Label	case OP_EXACTMB2N1 :	5884:4:136019:136037	728362	26	True				
ANR	728728	Identifier	OP_EXACTMB2N1		728362	0					
ANR	728729	ExpressionStatement	"p_string ( f , 2 , bp )"	5885:6:136045:136063	728362	27	True				
ANR	728730	CallExpression	"p_string ( f , 2 , bp )"		728362	0					
ANR	728731	Callee	p_string		728362	0					
ANR	728732	Identifier	p_string		728362	0					
ANR	728733	ArgumentList	f		728362	1					
ANR	728734	Argument	f		728362	0					
ANR	728735	Identifier	f		728362	0					
ANR	728736	Argument	2		728362	1					
ANR	728737	PrimaryExpression	2		728362	0					
ANR	728738	Argument	bp		728362	2					
ANR	728739	Identifier	bp		728362	0					
ANR	728740	ExpressionStatement	bp += 2	5885:26:136065:136072	728362	28	True				
ANR	728741	AssignmentExpression	bp += 2		728362	0		+=			
ANR	728742	Identifier	bp		728362	0					
ANR	728743	PrimaryExpression	2		728362	1					
ANR	728744	BreakStatement	break ;	5885:35:136074:136079	728362	29	True				
ANR	728745	Label	case OP_EXACTMB2N2 :	5886:4:136085:136103	728362	30	True				
ANR	728746	Identifier	OP_EXACTMB2N2		728362	0					
ANR	728747	ExpressionStatement	"p_string ( f , 4 , bp )"	5887:6:136111:136129	728362	31	True				
ANR	728748	CallExpression	"p_string ( f , 4 , bp )"		728362	0					
ANR	728749	Callee	p_string		728362	0					
ANR	728750	Identifier	p_string		728362	0					
ANR	728751	ArgumentList	f		728362	1					
ANR	728752	Argument	f		728362	0					
ANR	728753	Identifier	f		728362	0					
ANR	728754	Argument	4		728362	1					
ANR	728755	PrimaryExpression	4		728362	0					
ANR	728756	Argument	bp		728362	2					
ANR	728757	Identifier	bp		728362	0					
ANR	728758	ExpressionStatement	bp += 4	5887:26:136131:136138	728362	32	True				
ANR	728759	AssignmentExpression	bp += 4		728362	0		+=			
ANR	728760	Identifier	bp		728362	0					
ANR	728761	PrimaryExpression	4		728362	1					
ANR	728762	BreakStatement	break ;	5887:35:136140:136145	728362	33	True				
ANR	728763	Label	case OP_EXACTMB2N3 :	5888:4:136151:136169	728362	34	True				
ANR	728764	Identifier	OP_EXACTMB2N3		728362	0					
ANR	728765	ExpressionStatement	"p_string ( f , 6 , bp )"	5889:6:136177:136195	728362	35	True				
ANR	728766	CallExpression	"p_string ( f , 6 , bp )"		728362	0					
ANR	728767	Callee	p_string		728362	0					
ANR	728768	Identifier	p_string		728362	0					
ANR	728769	ArgumentList	f		728362	1					
ANR	728770	Argument	f		728362	0					
ANR	728771	Identifier	f		728362	0					
ANR	728772	Argument	6		728362	1					
ANR	728773	PrimaryExpression	6		728362	0					
ANR	728774	Argument	bp		728362	2					
ANR	728775	Identifier	bp		728362	0					
ANR	728776	ExpressionStatement	bp += 6	5889:26:136197:136204	728362	36	True				
ANR	728777	AssignmentExpression	bp += 6		728362	0		+=			
ANR	728778	Identifier	bp		728362	0					
ANR	728779	PrimaryExpression	6		728362	1					
ANR	728780	BreakStatement	break ;	5889:35:136206:136211	728362	37	True				
ANR	728781	Label	case OP_EXACTMB2N :	5890:4:136217:136234	728362	38	True				
ANR	728782	Identifier	OP_EXACTMB2N		728362	0					
ANR	728783	ExpressionStatement	"GET_LENGTH_INC ( len , bp )"	5891:6:136242:136265	728362	39	True				
ANR	728784	CallExpression	"GET_LENGTH_INC ( len , bp )"		728362	0					
ANR	728785	Callee	GET_LENGTH_INC		728362	0					
ANR	728786	Identifier	GET_LENGTH_INC		728362	0					
ANR	728787	ArgumentList	len		728362	1					
ANR	728788	Argument	len		728362	0					
ANR	728789	Identifier	len		728362	0					
ANR	728790	Argument	bp		728362	1					
ANR	728791	Identifier	bp		728362	0					
ANR	728792	ExpressionStatement	"p_len_string ( f , len , 2 , bp )"	5892:6:136273:136300	728362	40	True				
ANR	728793	CallExpression	"p_len_string ( f , len , 2 , bp )"		728362	0					
ANR	728794	Callee	p_len_string		728362	0					
ANR	728795	Identifier	p_len_string		728362	0					
ANR	728796	ArgumentList	f		728362	1					
ANR	728797	Argument	f		728362	0					
ANR	728798	Identifier	f		728362	0					
ANR	728799	Argument	len		728362	1					
ANR	728800	Identifier	len		728362	0					
ANR	728801	Argument	2		728362	2					
ANR	728802	PrimaryExpression	2		728362	0					
ANR	728803	Argument	bp		728362	3					
ANR	728804	Identifier	bp		728362	0					
ANR	728805	ExpressionStatement	bp += len * 2	5893:6:136308:136321	728362	41	True				
ANR	728806	AssignmentExpression	bp += len * 2		728362	0		+=			
ANR	728807	Identifier	bp		728362	0					
ANR	728808	MultiplicativeExpression	len * 2		728362	1		*			
ANR	728809	Identifier	len		728362	0					
ANR	728810	PrimaryExpression	2		728362	1					
ANR	728811	BreakStatement	break ;	5894:6:136329:136334	728362	42	True				
ANR	728812	Label	case OP_EXACTMB3N :	5895:4:136340:136357	728362	43	True				
ANR	728813	Identifier	OP_EXACTMB3N		728362	0					
ANR	728814	ExpressionStatement	"GET_LENGTH_INC ( len , bp )"	5896:6:136365:136388	728362	44	True				
ANR	728815	CallExpression	"GET_LENGTH_INC ( len , bp )"		728362	0					
ANR	728816	Callee	GET_LENGTH_INC		728362	0					
ANR	728817	Identifier	GET_LENGTH_INC		728362	0					
ANR	728818	ArgumentList	len		728362	1					
ANR	728819	Argument	len		728362	0					
ANR	728820	Identifier	len		728362	0					
ANR	728821	Argument	bp		728362	1					
ANR	728822	Identifier	bp		728362	0					
ANR	728823	ExpressionStatement	"p_len_string ( f , len , 3 , bp )"	5897:6:136396:136423	728362	45	True				
ANR	728824	CallExpression	"p_len_string ( f , len , 3 , bp )"		728362	0					
ANR	728825	Callee	p_len_string		728362	0					
ANR	728826	Identifier	p_len_string		728362	0					
ANR	728827	ArgumentList	f		728362	1					
ANR	728828	Argument	f		728362	0					
ANR	728829	Identifier	f		728362	0					
ANR	728830	Argument	len		728362	1					
ANR	728831	Identifier	len		728362	0					
ANR	728832	Argument	3		728362	2					
ANR	728833	PrimaryExpression	3		728362	0					
ANR	728834	Argument	bp		728362	3					
ANR	728835	Identifier	bp		728362	0					
ANR	728836	ExpressionStatement	bp += len * 3	5898:6:136431:136444	728362	46	True				
ANR	728837	AssignmentExpression	bp += len * 3		728362	0		+=			
ANR	728838	Identifier	bp		728362	0					
ANR	728839	MultiplicativeExpression	len * 3		728362	1		*			
ANR	728840	Identifier	len		728362	0					
ANR	728841	PrimaryExpression	3		728362	1					
ANR	728842	BreakStatement	break ;	5899:6:136452:136457	728362	47	True				
ANR	728843	Label	case OP_EXACTMBN :	5900:4:136463:136479	728362	48	True				
ANR	728844	Identifier	OP_EXACTMBN		728362	0					
ANR	728845	CompoundStatement		87:1:2028:2038	728362	49					
ANR	728846	IdentifierDeclStatement	int mb_len ;	5902:1:136490:136500	728362	0	True				
ANR	728847	IdentifierDecl	mb_len		728362	0					
ANR	728848	IdentifierDeclType	int		728362	0					
ANR	728849	Identifier	mb_len		728362	1					
ANR	728850	ExpressionStatement	"GET_LENGTH_INC ( mb_len , bp )"	5904:1:136510:136536	728362	1	True				
ANR	728851	CallExpression	"GET_LENGTH_INC ( mb_len , bp )"		728362	0					
ANR	728852	Callee	GET_LENGTH_INC		728362	0					
ANR	728853	Identifier	GET_LENGTH_INC		728362	0					
ANR	728854	ArgumentList	mb_len		728362	1					
ANR	728855	Argument	mb_len		728362	0					
ANR	728856	Identifier	mb_len		728362	0					
ANR	728857	Argument	bp		728362	1					
ANR	728858	Identifier	bp		728362	0					
ANR	728859	ExpressionStatement	"GET_LENGTH_INC ( len , bp )"	5905:1:136539:136562	728362	2	True				
ANR	728860	CallExpression	"GET_LENGTH_INC ( len , bp )"		728362	0					
ANR	728861	Callee	GET_LENGTH_INC		728362	0					
ANR	728862	Identifier	GET_LENGTH_INC		728362	0					
ANR	728863	ArgumentList	len		728362	1					
ANR	728864	Argument	len		728362	0					
ANR	728865	Identifier	len		728362	0					
ANR	728866	Argument	bp		728362	1					
ANR	728867	Identifier	bp		728362	0					
ANR	728868	ExpressionStatement	"fprintf ( f , "":%d:%d:"" , mb_len , len )"	5906:1:136565:136599	728362	3	True				
ANR	728869	CallExpression	"fprintf ( f , "":%d:%d:"" , mb_len , len )"		728362	0					
ANR	728870	Callee	fprintf		728362	0					
ANR	728871	Identifier	fprintf		728362	0					
ANR	728872	ArgumentList	f		728362	1					
ANR	728873	Argument	f		728362	0					
ANR	728874	Identifier	f		728362	0					
ANR	728875	Argument	""":%d:%d:"""		728362	1					
ANR	728876	PrimaryExpression	""":%d:%d:"""		728362	0					
ANR	728877	Argument	mb_len		728362	2					
ANR	728878	Identifier	mb_len		728362	0					
ANR	728879	Argument	len		728362	3					
ANR	728880	Identifier	len		728362	0					
ANR	728881	ExpressionStatement	n = len * mb_len	5907:1:136602:136618	728362	4	True				
ANR	728882	AssignmentExpression	n = len * mb_len		728362	0		=			
ANR	728883	Identifier	n		728362	0					
ANR	728884	MultiplicativeExpression	len * mb_len		728362	1		*			
ANR	728885	Identifier	len		728362	0					
ANR	728886	Identifier	mb_len		728362	1					
ANR	728887	WhileStatement	while ( n -- > 0 )		728362	5					
ANR	728888	Condition	n -- > 0	5908:8:136628:136634	728362	0	True				
ANR	728889	RelationalExpression	n -- > 0		728362	0		>			
ANR	728890	PostIncDecOperationExpression	n --		728362	0					
ANR	728891	Identifier	n		728362	0					
ANR	728892	IncDec	--		728362	1					
ANR	728893	PrimaryExpression	0		728362	1					
ANR	728894	CompoundStatement		93:17:2175:2175	728362	1					
ANR	728895	ExpressionStatement	"fputc ( * bp ++ , f )"	5908:19:136639:136654	728362	0	True				
ANR	728896	CallExpression	"fputc ( * bp ++ , f )"		728362	0					
ANR	728897	Callee	fputc		728362	0					
ANR	728898	Identifier	fputc		728362	0					
ANR	728899	ArgumentList	* bp ++		728362	1					
ANR	728900	Argument	* bp ++		728362	0					
ANR	728901	UnaryOperationExpression	* bp ++		728362	0					
ANR	728902	UnaryOperator	*		728362	0					
ANR	728903	PostIncDecOperationExpression	bp ++		728362	1					
ANR	728904	Identifier	bp		728362	0					
ANR	728905	IncDec	++		728362	1					
ANR	728906	Argument	f		728362	1					
ANR	728907	Identifier	f		728362	0					
ANR	728908	BreakStatement	break ;	5910:6:136672:136677	728362	50	True				
ANR	728909	Label	case OP_EXACT1_IC :	5912:4:136684:136701	728362	51	True				
ANR	728910	Identifier	OP_EXACT1_IC		728362	0					
ANR	728911	ExpressionStatement	"len = enclen ( enc , bp )"	5913:6:136709:136730	728362	52	True				
ANR	728912	AssignmentExpression	"len = enclen ( enc , bp )"		728362	0		=			
ANR	728913	Identifier	len		728362	0					
ANR	728914	CallExpression	"enclen ( enc , bp )"		728362	1					
ANR	728915	Callee	enclen		728362	0					
ANR	728916	Identifier	enclen		728362	0					
ANR	728917	ArgumentList	enc		728362	1					
ANR	728918	Argument	enc		728362	0					
ANR	728919	Identifier	enc		728362	0					
ANR	728920	Argument	bp		728362	1					
ANR	728921	Identifier	bp		728362	0					
ANR	728922	ExpressionStatement	"p_string ( f , len , bp )"	5914:6:136738:136758	728362	53	True				
ANR	728923	CallExpression	"p_string ( f , len , bp )"		728362	0					
ANR	728924	Callee	p_string		728362	0					
ANR	728925	Identifier	p_string		728362	0					
ANR	728926	ArgumentList	f		728362	1					
ANR	728927	Argument	f		728362	0					
ANR	728928	Identifier	f		728362	0					
ANR	728929	Argument	len		728362	1					
ANR	728930	Identifier	len		728362	0					
ANR	728931	Argument	bp		728362	2					
ANR	728932	Identifier	bp		728362	0					
ANR	728933	ExpressionStatement	bp += len	5915:6:136766:136775	728362	54	True				
ANR	728934	AssignmentExpression	bp += len		728362	0		+=			
ANR	728935	Identifier	bp		728362	0					
ANR	728936	Identifier	len		728362	1					
ANR	728937	BreakStatement	break ;	5916:6:136783:136788	728362	55	True				
ANR	728938	Label	case OP_EXACTN_IC :	5917:4:136794:136811	728362	56	True				
ANR	728939	Identifier	OP_EXACTN_IC		728362	0					
ANR	728940	ExpressionStatement	"GET_LENGTH_INC ( len , bp )"	5918:6:136819:136842	728362	57	True				
ANR	728941	CallExpression	"GET_LENGTH_INC ( len , bp )"		728362	0					
ANR	728942	Callee	GET_LENGTH_INC		728362	0					
ANR	728943	Identifier	GET_LENGTH_INC		728362	0					
ANR	728944	ArgumentList	len		728362	1					
ANR	728945	Argument	len		728362	0					
ANR	728946	Identifier	len		728362	0					
ANR	728947	Argument	bp		728362	1					
ANR	728948	Identifier	bp		728362	0					
ANR	728949	ExpressionStatement	"p_len_string ( f , len , 1 , bp )"	5919:6:136850:136877	728362	58	True				
ANR	728950	CallExpression	"p_len_string ( f , len , 1 , bp )"		728362	0					
ANR	728951	Callee	p_len_string		728362	0					
ANR	728952	Identifier	p_len_string		728362	0					
ANR	728953	ArgumentList	f		728362	1					
ANR	728954	Argument	f		728362	0					
ANR	728955	Identifier	f		728362	0					
ANR	728956	Argument	len		728362	1					
ANR	728957	Identifier	len		728362	0					
ANR	728958	Argument	1		728362	2					
ANR	728959	PrimaryExpression	1		728362	0					
ANR	728960	Argument	bp		728362	3					
ANR	728961	Identifier	bp		728362	0					
ANR	728962	ExpressionStatement	bp += len	5920:6:136885:136894	728362	59	True				
ANR	728963	AssignmentExpression	bp += len		728362	0		+=			
ANR	728964	Identifier	bp		728362	0					
ANR	728965	Identifier	len		728362	1					
ANR	728966	BreakStatement	break ;	5921:6:136902:136907	728362	60	True				
ANR	728967	Label	case OP_CCLASS :	5923:4:136914:136928	728362	61	True				
ANR	728968	Identifier	OP_CCLASS		728362	0					
ANR	728969	ExpressionStatement	n = bitset_on_num ( ( BitSetRef ) bp )	5924:6:136936:136969	728362	62	True				
ANR	728970	AssignmentExpression	n = bitset_on_num ( ( BitSetRef ) bp )		728362	0		=			
ANR	728971	Identifier	n		728362	0					
ANR	728972	CallExpression	bitset_on_num ( ( BitSetRef ) bp )		728362	1					
ANR	728973	Callee	bitset_on_num		728362	0					
ANR	728974	Identifier	bitset_on_num		728362	0					
ANR	728975	ArgumentList	( BitSetRef ) bp		728362	1					
ANR	728976	Argument	( BitSetRef ) bp		728362	0					
ANR	728977	CastExpression	( BitSetRef ) bp		728362	0					
ANR	728978	CastTarget	BitSetRef		728362	0					
ANR	728979	Identifier	bp		728362	1					
ANR	728980	ExpressionStatement	bp += SIZE_BITSET	5925:6:136977:136994	728362	63	True				
ANR	728981	AssignmentExpression	bp += SIZE_BITSET		728362	0		+=			
ANR	728982	Identifier	bp		728362	0					
ANR	728983	Identifier	SIZE_BITSET		728362	1					
ANR	728984	ExpressionStatement	"fprintf ( f , "":%d"" , n )"	5926:6:137002:137022	728362	64	True				
ANR	728985	CallExpression	"fprintf ( f , "":%d"" , n )"		728362	0					
ANR	728986	Callee	fprintf		728362	0					
ANR	728987	Identifier	fprintf		728362	0					
ANR	728988	ArgumentList	f		728362	1					
ANR	728989	Argument	f		728362	0					
ANR	728990	Identifier	f		728362	0					
ANR	728991	Argument	""":%d"""		728362	1					
ANR	728992	PrimaryExpression	""":%d"""		728362	0					
ANR	728993	Argument	n		728362	2					
ANR	728994	Identifier	n		728362	0					
ANR	728995	BreakStatement	break ;	5927:6:137030:137035	728362	65	True				
ANR	728996	Label	case OP_CCLASS_NOT :	5929:4:137042:137060	728362	66	True				
ANR	728997	Identifier	OP_CCLASS_NOT		728362	0					
ANR	728998	ExpressionStatement	n = bitset_on_num ( ( BitSetRef ) bp )	5930:6:137068:137101	728362	67	True				
ANR	728999	AssignmentExpression	n = bitset_on_num ( ( BitSetRef ) bp )		728362	0		=			
ANR	729000	Identifier	n		728362	0					
ANR	729001	CallExpression	bitset_on_num ( ( BitSetRef ) bp )		728362	1					
ANR	729002	Callee	bitset_on_num		728362	0					
ANR	729003	Identifier	bitset_on_num		728362	0					
ANR	729004	ArgumentList	( BitSetRef ) bp		728362	1					
ANR	729005	Argument	( BitSetRef ) bp		728362	0					
ANR	729006	CastExpression	( BitSetRef ) bp		728362	0					
ANR	729007	CastTarget	BitSetRef		728362	0					
ANR	729008	Identifier	bp		728362	1					
ANR	729009	ExpressionStatement	bp += SIZE_BITSET	5931:6:137109:137126	728362	68	True				
ANR	729010	AssignmentExpression	bp += SIZE_BITSET		728362	0		+=			
ANR	729011	Identifier	bp		728362	0					
ANR	729012	Identifier	SIZE_BITSET		728362	1					
ANR	729013	ExpressionStatement	"fprintf ( f , "":%d"" , n )"	5932:6:137134:137154	728362	69	True				
ANR	729014	CallExpression	"fprintf ( f , "":%d"" , n )"		728362	0					
ANR	729015	Callee	fprintf		728362	0					
ANR	729016	Identifier	fprintf		728362	0					
ANR	729017	ArgumentList	f		728362	1					
ANR	729018	Argument	f		728362	0					
ANR	729019	Identifier	f		728362	0					
ANR	729020	Argument	""":%d"""		728362	1					
ANR	729021	PrimaryExpression	""":%d"""		728362	0					
ANR	729022	Argument	n		728362	2					
ANR	729023	Identifier	n		728362	0					
ANR	729024	BreakStatement	break ;	5933:6:137162:137167	728362	70	True				
ANR	729025	Label	case OP_CCLASS_MB :	5935:4:137174:137191	728362	71	True				
ANR	729026	Identifier	OP_CCLASS_MB		728362	0					
ANR	729027	Label	case OP_CCLASS_MB_NOT :	5936:4:137197:137218	728362	72	True				
ANR	729028	Identifier	OP_CCLASS_MB_NOT		728362	0					
ANR	729029	ExpressionStatement	"GET_LENGTH_INC ( len , bp )"	5937:6:137226:137249	728362	73	True				
ANR	729030	CallExpression	"GET_LENGTH_INC ( len , bp )"		728362	0					
ANR	729031	Callee	GET_LENGTH_INC		728362	0					
ANR	729032	Identifier	GET_LENGTH_INC		728362	0					
ANR	729033	ArgumentList	len		728362	1					
ANR	729034	Argument	len		728362	0					
ANR	729035	Identifier	len		728362	0					
ANR	729036	Argument	bp		728362	1					
ANR	729037	Identifier	bp		728362	0					
ANR	729038	ExpressionStatement	q = bp	5938:6:137257:137263	728362	74	True				
ANR	729039	AssignmentExpression	q = bp		728362	0		=			
ANR	729040	Identifier	q		728362	0					
ANR	729041	Identifier	bp		728362	1					
ANR	729042	ExpressionStatement	ALIGNMENT_RIGHT ( q )	5940:6:137310:137328	728362	75	True				
ANR	729043	CallExpression	ALIGNMENT_RIGHT ( q )		728362	0					
ANR	729044	Callee	ALIGNMENT_RIGHT		728362	0					
ANR	729045	Identifier	ALIGNMENT_RIGHT		728362	0					
ANR	729046	ArgumentList	q		728362	1					
ANR	729047	Argument	q		728362	0					
ANR	729048	Identifier	q		728362	0					
ANR	729049	ExpressionStatement	"GET_CODE_POINT ( code , q )"	5942:6:137343:137366	728362	76	True				
ANR	729050	CallExpression	"GET_CODE_POINT ( code , q )"		728362	0					
ANR	729051	Callee	GET_CODE_POINT		728362	0					
ANR	729052	Identifier	GET_CODE_POINT		728362	0					
ANR	729053	ArgumentList	code		728362	1					
ANR	729054	Argument	code		728362	0					
ANR	729055	Identifier	code		728362	0					
ANR	729056	Argument	q		728362	1					
ANR	729057	Identifier	q		728362	0					
ANR	729058	ExpressionStatement	bp += len	5943:6:137374:137383	728362	77	True				
ANR	729059	AssignmentExpression	bp += len		728362	0		+=			
ANR	729060	Identifier	bp		728362	0					
ANR	729061	Identifier	len		728362	1					
ANR	729062	ExpressionStatement	"fprintf ( f , "":%d:%d"" , ( int ) code , len )"	5944:6:137391:137428	728362	78	True				
ANR	729063	CallExpression	"fprintf ( f , "":%d:%d"" , ( int ) code , len )"		728362	0					
ANR	729064	Callee	fprintf		728362	0					
ANR	729065	Identifier	fprintf		728362	0					
ANR	729066	ArgumentList	f		728362	1					
ANR	729067	Argument	f		728362	0					
ANR	729068	Identifier	f		728362	0					
ANR	729069	Argument	""":%d:%d"""		728362	1					
ANR	729070	PrimaryExpression	""":%d:%d"""		728362	0					
ANR	729071	Argument	( int ) code		728362	2					
ANR	729072	CastExpression	( int ) code		728362	0					
ANR	729073	CastTarget	int		728362	0					
ANR	729074	Identifier	code		728362	1					
ANR	729075	Argument	len		728362	3					
ANR	729076	Identifier	len		728362	0					
ANR	729077	BreakStatement	break ;	5945:6:137436:137441	728362	79	True				
ANR	729078	Label	case OP_CCLASS_MIX :	5947:4:137448:137466	728362	80	True				
ANR	729079	Identifier	OP_CCLASS_MIX		728362	0					
ANR	729080	Label	case OP_CCLASS_MIX_NOT :	5948:4:137472:137494	728362	81	True				
ANR	729081	Identifier	OP_CCLASS_MIX_NOT		728362	0					
ANR	729082	ExpressionStatement	n = bitset_on_num ( ( BitSetRef ) bp )	5949:6:137502:137535	728362	82	True				
ANR	729083	AssignmentExpression	n = bitset_on_num ( ( BitSetRef ) bp )		728362	0		=			
ANR	729084	Identifier	n		728362	0					
ANR	729085	CallExpression	bitset_on_num ( ( BitSetRef ) bp )		728362	1					
ANR	729086	Callee	bitset_on_num		728362	0					
ANR	729087	Identifier	bitset_on_num		728362	0					
ANR	729088	ArgumentList	( BitSetRef ) bp		728362	1					
ANR	729089	Argument	( BitSetRef ) bp		728362	0					
ANR	729090	CastExpression	( BitSetRef ) bp		728362	0					
ANR	729091	CastTarget	BitSetRef		728362	0					
ANR	729092	Identifier	bp		728362	1					
ANR	729093	ExpressionStatement	bp += SIZE_BITSET	5950:6:137543:137560	728362	83	True				
ANR	729094	AssignmentExpression	bp += SIZE_BITSET		728362	0		+=			
ANR	729095	Identifier	bp		728362	0					
ANR	729096	Identifier	SIZE_BITSET		728362	1					
ANR	729097	ExpressionStatement	"GET_LENGTH_INC ( len , bp )"	5951:6:137568:137591	728362	84	True				
ANR	729098	CallExpression	"GET_LENGTH_INC ( len , bp )"		728362	0					
ANR	729099	Callee	GET_LENGTH_INC		728362	0					
ANR	729100	Identifier	GET_LENGTH_INC		728362	0					
ANR	729101	ArgumentList	len		728362	1					
ANR	729102	Argument	len		728362	0					
ANR	729103	Identifier	len		728362	0					
ANR	729104	Argument	bp		728362	1					
ANR	729105	Identifier	bp		728362	0					
ANR	729106	ExpressionStatement	q = bp	5952:6:137599:137605	728362	85	True				
ANR	729107	AssignmentExpression	q = bp		728362	0		=			
ANR	729108	Identifier	q		728362	0					
ANR	729109	Identifier	bp		728362	1					
ANR	729110	ExpressionStatement	ALIGNMENT_RIGHT ( q )	5954:6:137652:137670	728362	86	True				
ANR	729111	CallExpression	ALIGNMENT_RIGHT ( q )		728362	0					
ANR	729112	Callee	ALIGNMENT_RIGHT		728362	0					
ANR	729113	Identifier	ALIGNMENT_RIGHT		728362	0					
ANR	729114	ArgumentList	q		728362	1					
ANR	729115	Argument	q		728362	0					
ANR	729116	Identifier	q		728362	0					
ANR	729117	ExpressionStatement	"GET_CODE_POINT ( code , q )"	5956:6:137685:137708	728362	87	True				
ANR	729118	CallExpression	"GET_CODE_POINT ( code , q )"		728362	0					
ANR	729119	Callee	GET_CODE_POINT		728362	0					
ANR	729120	Identifier	GET_CODE_POINT		728362	0					
ANR	729121	ArgumentList	code		728362	1					
ANR	729122	Argument	code		728362	0					
ANR	729123	Identifier	code		728362	0					
ANR	729124	Argument	q		728362	1					
ANR	729125	Identifier	q		728362	0					
ANR	729126	ExpressionStatement	bp += len	5957:6:137716:137725	728362	88	True				
ANR	729127	AssignmentExpression	bp += len		728362	0		+=			
ANR	729128	Identifier	bp		728362	0					
ANR	729129	Identifier	len		728362	1					
ANR	729130	ExpressionStatement	"fprintf ( f , "":%d:%d:%d"" , n , ( int ) code , len )"	5958:6:137733:137776	728362	89	True				
ANR	729131	CallExpression	"fprintf ( f , "":%d:%d:%d"" , n , ( int ) code , len )"		728362	0					
ANR	729132	Callee	fprintf		728362	0					
ANR	729133	Identifier	fprintf		728362	0					
ANR	729134	ArgumentList	f		728362	1					
ANR	729135	Argument	f		728362	0					
ANR	729136	Identifier	f		728362	0					
ANR	729137	Argument	""":%d:%d:%d"""		728362	1					
ANR	729138	PrimaryExpression	""":%d:%d:%d"""		728362	0					
ANR	729139	Argument	n		728362	2					
ANR	729140	Identifier	n		728362	0					
ANR	729141	Argument	( int ) code		728362	3					
ANR	729142	CastExpression	( int ) code		728362	0					
ANR	729143	CastTarget	int		728362	0					
ANR	729144	Identifier	code		728362	1					
ANR	729145	Argument	len		728362	4					
ANR	729146	Identifier	len		728362	0					
ANR	729147	BreakStatement	break ;	5959:6:137784:137789	728362	90	True				
ANR	729148	Label	case OP_CCLASS_NODE :	5961:4:137796:137815	728362	91	True				
ANR	729149	Identifier	OP_CCLASS_NODE		728362	0					
ANR	729150	CompoundStatement		148:8:3371:3385	728362	92					
ANR	729151	IdentifierDeclStatement	CClassNode * cc ;	5963:8:137833:137847	728362	0	True				
ANR	729152	IdentifierDecl	* cc		728362	0					
ANR	729153	IdentifierDeclType	CClassNode *		728362	0					
ANR	729154	Identifier	cc		728362	1					
ANR	729155	ExpressionStatement	"GET_POINTER_INC ( cc , bp )"	5965:8:137858:137881	728362	1	True				
ANR	729156	CallExpression	"GET_POINTER_INC ( cc , bp )"		728362	0					
ANR	729157	Callee	GET_POINTER_INC		728362	0					
ANR	729158	Identifier	GET_POINTER_INC		728362	0					
ANR	729159	ArgumentList	cc		728362	1					
ANR	729160	Argument	cc		728362	0					
ANR	729161	Identifier	cc		728362	0					
ANR	729162	Argument	bp		728362	1					
ANR	729163	Identifier	bp		728362	0					
ANR	729164	ExpressionStatement	n = bitset_on_num ( cc -> bs )	5966:8:137891:137916	728362	2	True				
ANR	729165	AssignmentExpression	n = bitset_on_num ( cc -> bs )		728362	0		=			
ANR	729166	Identifier	n		728362	0					
ANR	729167	CallExpression	bitset_on_num ( cc -> bs )		728362	1					
ANR	729168	Callee	bitset_on_num		728362	0					
ANR	729169	Identifier	bitset_on_num		728362	0					
ANR	729170	ArgumentList	cc -> bs		728362	1					
ANR	729171	Argument	cc -> bs		728362	0					
ANR	729172	PtrMemberAccess	cc -> bs		728362	0					
ANR	729173	Identifier	cc		728362	0					
ANR	729174	Identifier	bs		728362	1					
ANR	729175	ExpressionStatement	"fprintf ( f , "":%u:%d"" , ( unsigned int ) cc , n )"	5967:8:137926:137968	728362	3	True				
ANR	729176	CallExpression	"fprintf ( f , "":%u:%d"" , ( unsigned int ) cc , n )"		728362	0					
ANR	729177	Callee	fprintf		728362	0					
ANR	729178	Identifier	fprintf		728362	0					
ANR	729179	ArgumentList	f		728362	1					
ANR	729180	Argument	f		728362	0					
ANR	729181	Identifier	f		728362	0					
ANR	729182	Argument	""":%u:%d"""		728362	1					
ANR	729183	PrimaryExpression	""":%u:%d"""		728362	0					
ANR	729184	Argument	( unsigned int ) cc		728362	2					
ANR	729185	CastExpression	( unsigned int ) cc		728362	0					
ANR	729186	CastTarget	unsigned int		728362	0					
ANR	729187	Identifier	cc		728362	1					
ANR	729188	Argument	n		728362	3					
ANR	729189	Identifier	n		728362	0					
ANR	729190	BreakStatement	break ;	5969:6:137984:137989	728362	93	True				
ANR	729191	Label	case OP_BACKREFN_IC :	5971:4:137996:138015	728362	94	True				
ANR	729192	Identifier	OP_BACKREFN_IC		728362	0					
ANR	729193	ExpressionStatement	mem = * ( ( MemNumType * ) bp )	5972:6:138023:138048	728362	95	True				
ANR	729194	AssignmentExpression	mem = * ( ( MemNumType * ) bp )		728362	0		=			
ANR	729195	Identifier	mem		728362	0					
ANR	729196	UnaryOperationExpression	* ( ( MemNumType * ) bp )		728362	1					
ANR	729197	UnaryOperator	*		728362	0					
ANR	729198	CastExpression	( MemNumType * ) bp		728362	1					
ANR	729199	CastTarget	MemNumType *		728362	0					
ANR	729200	Identifier	bp		728362	1					
ANR	729201	ExpressionStatement	bp += SIZE_MEMNUM	5973:6:138056:138073	728362	96	True				
ANR	729202	AssignmentExpression	bp += SIZE_MEMNUM		728362	0		+=			
ANR	729203	Identifier	bp		728362	0					
ANR	729204	Identifier	SIZE_MEMNUM		728362	1					
ANR	729205	ExpressionStatement	"fprintf ( f , "":%d"" , mem )"	5974:6:138081:138103	728362	97	True				
ANR	729206	CallExpression	"fprintf ( f , "":%d"" , mem )"		728362	0					
ANR	729207	Callee	fprintf		728362	0					
ANR	729208	Identifier	fprintf		728362	0					
ANR	729209	ArgumentList	f		728362	1					
ANR	729210	Argument	f		728362	0					
ANR	729211	Identifier	f		728362	0					
ANR	729212	Argument	""":%d"""		728362	1					
ANR	729213	PrimaryExpression	""":%d"""		728362	0					
ANR	729214	Argument	mem		728362	2					
ANR	729215	Identifier	mem		728362	0					
ANR	729216	BreakStatement	break ;	5975:6:138111:138116	728362	98	True				
ANR	729217	Label	case OP_BACKREF_MULTI_IC :	5977:4:138123:138147	728362	99	True				
ANR	729218	Identifier	OP_BACKREF_MULTI_IC		728362	0					
ANR	729219	Label	case OP_BACKREF_MULTI :	5978:4:138153:138174	728362	100	True				
ANR	729220	Identifier	OP_BACKREF_MULTI		728362	0					
ANR	729221	ExpressionStatement	"fputs ( "" "" , f )"	5979:6:138182:138195	728362	101	True				
ANR	729222	CallExpression	"fputs ( "" "" , f )"		728362	0					
ANR	729223	Callee	fputs		728362	0					
ANR	729224	Identifier	fputs		728362	0					
ANR	729225	ArgumentList	""" """		728362	1					
ANR	729226	Argument	""" """		728362	0					
ANR	729227	PrimaryExpression	""" """		728362	0					
ANR	729228	Argument	f		728362	1					
ANR	729229	Identifier	f		728362	0					
ANR	729230	ExpressionStatement	"GET_LENGTH_INC ( len , bp )"	5980:6:138203:138226	728362	102	True				
ANR	729231	CallExpression	"GET_LENGTH_INC ( len , bp )"		728362	0					
ANR	729232	Callee	GET_LENGTH_INC		728362	0					
ANR	729233	Identifier	GET_LENGTH_INC		728362	0					
ANR	729234	ArgumentList	len		728362	1					
ANR	729235	Argument	len		728362	0					
ANR	729236	Identifier	len		728362	0					
ANR	729237	Argument	bp		728362	1					
ANR	729238	Identifier	bp		728362	0					
ANR	729239	ForStatement	for ( i = 0 ; i < len ; i ++ )		728362	103					
ANR	729240	ForInit	i = 0 ;	5981:11:138239:138244	728362	0	True				
ANR	729241	AssignmentExpression	i = 0		728362	0		=			
ANR	729242	Identifier	i		728362	0					
ANR	729243	PrimaryExpression	0		728362	1					
ANR	729244	Condition	i < len	5981:18:138246:138252	728362	1	True				
ANR	729245	RelationalExpression	i < len		728362	0		<			
ANR	729246	Identifier	i		728362	0					
ANR	729247	Identifier	len		728362	1					
ANR	729248	PostIncDecOperationExpression	i ++	5981:27:138255:138257	728362	2	True				
ANR	729249	Identifier	i		728362	0					
ANR	729250	IncDec	++		728362	1					
ANR	729251	CompoundStatement		166:32:3798:3798	728362	3					
ANR	729252	ExpressionStatement	"GET_MEMNUM_INC ( mem , bp )"	5982:1:138263:138286	728362	0	True				
ANR	729253	CallExpression	"GET_MEMNUM_INC ( mem , bp )"		728362	0					
ANR	729254	Callee	GET_MEMNUM_INC		728362	0					
ANR	729255	Identifier	GET_MEMNUM_INC		728362	0					
ANR	729256	ArgumentList	mem		728362	1					
ANR	729257	Argument	mem		728362	0					
ANR	729258	Identifier	mem		728362	0					
ANR	729259	Argument	bp		728362	1					
ANR	729260	Identifier	bp		728362	0					
ANR	729261	IfStatement	if ( i > 0 )		728362	1					
ANR	729262	Condition	i > 0	5983:5:138293:138297	728362	0	True				
ANR	729263	RelationalExpression	i > 0		728362	0		>			
ANR	729264	Identifier	i		728362	0					
ANR	729265	PrimaryExpression	0		728362	1					
ANR	729266	ExpressionStatement	"fputs ( "", "" , f )"	5983:12:138300:138314	728362	1	True				
ANR	729267	CallExpression	"fputs ( "", "" , f )"		728362	0					
ANR	729268	Callee	fputs		728362	0					
ANR	729269	Identifier	fputs		728362	0					
ANR	729270	ArgumentList	""", """		728362	1					
ANR	729271	Argument	""", """		728362	0					
ANR	729272	PrimaryExpression	""", """		728362	0					
ANR	729273	Argument	f		728362	1					
ANR	729274	Identifier	f		728362	0					
ANR	729275	ExpressionStatement	"fprintf ( f , ""%d"" , mem )"	5984:1:138317:138338	728362	2	True				
ANR	729276	CallExpression	"fprintf ( f , ""%d"" , mem )"		728362	0					
ANR	729277	Callee	fprintf		728362	0					
ANR	729278	Identifier	fprintf		728362	0					
ANR	729279	ArgumentList	f		728362	1					
ANR	729280	Argument	f		728362	0					
ANR	729281	Identifier	f		728362	0					
ANR	729282	Argument	"""%d"""		728362	1					
ANR	729283	PrimaryExpression	"""%d"""		728362	0					
ANR	729284	Argument	mem		728362	2					
ANR	729285	Identifier	mem		728362	0					
ANR	729286	BreakStatement	break ;	5986:6:138354:138359	728362	104	True				
ANR	729287	Label	case OP_BACKREF_WITH_LEVEL :	5988:4:138366:138392	728362	105	True				
ANR	729288	Identifier	OP_BACKREF_WITH_LEVEL		728362	0					
ANR	729289	CompoundStatement		176:1:3965:3981	728362	106					
ANR	729290	IdentifierDeclStatement	OnigOptionType option ;	5990:1:138403:138424	728362	0	True				
ANR	729291	IdentifierDecl	option		728362	0					
ANR	729292	IdentifierDeclType	OnigOptionType		728362	0					
ANR	729293	Identifier	option		728362	1					
ANR	729294	IdentifierDeclStatement	LengthType level ;	5991:1:138427:138443	728362	1	True				
ANR	729295	IdentifierDecl	level		728362	0					
ANR	729296	IdentifierDeclType	LengthType		728362	0					
ANR	729297	Identifier	level		728362	1					
ANR	729298	ExpressionStatement	"GET_OPTION_INC ( option , bp )"	5993:1:138447:138473	728362	2	True				
ANR	729299	CallExpression	"GET_OPTION_INC ( option , bp )"		728362	0					
ANR	729300	Callee	GET_OPTION_INC		728362	0					
ANR	729301	Identifier	GET_OPTION_INC		728362	0					
ANR	729302	ArgumentList	option		728362	1					
ANR	729303	Argument	option		728362	0					
ANR	729304	Identifier	option		728362	0					
ANR	729305	Argument	bp		728362	1					
ANR	729306	Identifier	bp		728362	0					
ANR	729307	ExpressionStatement	"fprintf ( f , "":%d"" , option )"	5994:1:138476:138501	728362	3	True				
ANR	729308	CallExpression	"fprintf ( f , "":%d"" , option )"		728362	0					
ANR	729309	Callee	fprintf		728362	0					
ANR	729310	Identifier	fprintf		728362	0					
ANR	729311	ArgumentList	f		728362	1					
ANR	729312	Argument	f		728362	0					
ANR	729313	Identifier	f		728362	0					
ANR	729314	Argument	""":%d"""		728362	1					
ANR	729315	PrimaryExpression	""":%d"""		728362	0					
ANR	729316	Argument	option		728362	2					
ANR	729317	Identifier	option		728362	0					
ANR	729318	ExpressionStatement	"GET_LENGTH_INC ( level , bp )"	5995:1:138504:138529	728362	4	True				
ANR	729319	CallExpression	"GET_LENGTH_INC ( level , bp )"		728362	0					
ANR	729320	Callee	GET_LENGTH_INC		728362	0					
ANR	729321	Identifier	GET_LENGTH_INC		728362	0					
ANR	729322	ArgumentList	level		728362	1					
ANR	729323	Argument	level		728362	0					
ANR	729324	Identifier	level		728362	0					
ANR	729325	Argument	bp		728362	1					
ANR	729326	Identifier	bp		728362	0					
ANR	729327	ExpressionStatement	"fprintf ( f , "":%d"" , level )"	5996:1:138532:138556	728362	5	True				
ANR	729328	CallExpression	"fprintf ( f , "":%d"" , level )"		728362	0					
ANR	729329	Callee	fprintf		728362	0					
ANR	729330	Identifier	fprintf		728362	0					
ANR	729331	ArgumentList	f		728362	1					
ANR	729332	Argument	f		728362	0					
ANR	729333	Identifier	f		728362	0					
ANR	729334	Argument	""":%d"""		728362	1					
ANR	729335	PrimaryExpression	""":%d"""		728362	0					
ANR	729336	Argument	level		728362	2					
ANR	729337	Identifier	level		728362	0					
ANR	729338	ExpressionStatement	"fputs ( "" "" , f )"	5998:1:138560:138573	728362	6	True				
ANR	729339	CallExpression	"fputs ( "" "" , f )"		728362	0					
ANR	729340	Callee	fputs		728362	0					
ANR	729341	Identifier	fputs		728362	0					
ANR	729342	ArgumentList	""" """		728362	1					
ANR	729343	Argument	""" """		728362	0					
ANR	729344	PrimaryExpression	""" """		728362	0					
ANR	729345	Argument	f		728362	1					
ANR	729346	Identifier	f		728362	0					
ANR	729347	ExpressionStatement	"GET_LENGTH_INC ( len , bp )"	5999:1:138576:138599	728362	7	True				
ANR	729348	CallExpression	"GET_LENGTH_INC ( len , bp )"		728362	0					
ANR	729349	Callee	GET_LENGTH_INC		728362	0					
ANR	729350	Identifier	GET_LENGTH_INC		728362	0					
ANR	729351	ArgumentList	len		728362	1					
ANR	729352	Argument	len		728362	0					
ANR	729353	Identifier	len		728362	0					
ANR	729354	Argument	bp		728362	1					
ANR	729355	Identifier	bp		728362	0					
ANR	729356	ForStatement	for ( i = 0 ; i < len ; i ++ )		728362	8					
ANR	729357	ForInit	i = 0 ;	6000:6:138607:138612	728362	0	True				
ANR	729358	AssignmentExpression	i = 0		728362	0		=			
ANR	729359	Identifier	i		728362	0					
ANR	729360	PrimaryExpression	0		728362	1					
ANR	729361	Condition	i < len	6000:13:138614:138620	728362	1	True				
ANR	729362	RelationalExpression	i < len		728362	0		<			
ANR	729363	Identifier	i		728362	0					
ANR	729364	Identifier	len		728362	1					
ANR	729365	PostIncDecOperationExpression	i ++	6000:22:138623:138625	728362	2	True				
ANR	729366	Identifier	i		728362	0					
ANR	729367	IncDec	++		728362	1					
ANR	729368	CompoundStatement		185:27:4166:4166	728362	3					
ANR	729369	ExpressionStatement	"GET_MEMNUM_INC ( mem , bp )"	6001:3:138633:138656	728362	0	True				
ANR	729370	CallExpression	"GET_MEMNUM_INC ( mem , bp )"		728362	0					
ANR	729371	Callee	GET_MEMNUM_INC		728362	0					
ANR	729372	Identifier	GET_MEMNUM_INC		728362	0					
ANR	729373	ArgumentList	mem		728362	1					
ANR	729374	Argument	mem		728362	0					
ANR	729375	Identifier	mem		728362	0					
ANR	729376	Argument	bp		728362	1					
ANR	729377	Identifier	bp		728362	0					
ANR	729378	IfStatement	if ( i > 0 )		728362	1					
ANR	729379	Condition	i > 0	6002:7:138665:138669	728362	0	True				
ANR	729380	RelationalExpression	i > 0		728362	0		>			
ANR	729381	Identifier	i		728362	0					
ANR	729382	PrimaryExpression	0		728362	1					
ANR	729383	ExpressionStatement	"fputs ( "", "" , f )"	6002:14:138672:138686	728362	1	True				
ANR	729384	CallExpression	"fputs ( "", "" , f )"		728362	0					
ANR	729385	Callee	fputs		728362	0					
ANR	729386	Identifier	fputs		728362	0					
ANR	729387	ArgumentList	""", """		728362	1					
ANR	729388	Argument	""", """		728362	0					
ANR	729389	PrimaryExpression	""", """		728362	0					
ANR	729390	Argument	f		728362	1					
ANR	729391	Identifier	f		728362	0					
ANR	729392	ExpressionStatement	"fprintf ( f , ""%d"" , mem )"	6003:3:138691:138712	728362	2	True				
ANR	729393	CallExpression	"fprintf ( f , ""%d"" , mem )"		728362	0					
ANR	729394	Callee	fprintf		728362	0					
ANR	729395	Identifier	fprintf		728362	0					
ANR	729396	ArgumentList	f		728362	1					
ANR	729397	Argument	f		728362	0					
ANR	729398	Identifier	f		728362	0					
ANR	729399	Argument	"""%d"""		728362	1					
ANR	729400	PrimaryExpression	"""%d"""		728362	0					
ANR	729401	Argument	mem		728362	2					
ANR	729402	Identifier	mem		728362	0					
ANR	729403	BreakStatement	break ;	6006:6:138731:138736	728362	107	True				
ANR	729404	Label	case OP_REPEAT :	6008:4:138743:138757	728362	108	True				
ANR	729405	Identifier	OP_REPEAT		728362	0					
ANR	729406	Label	case OP_REPEAT_NG :	6009:4:138763:138780	728362	109	True				
ANR	729407	Identifier	OP_REPEAT_NG		728362	0					
ANR	729408	CompoundStatement		195:6:4326:4326	728362	110					
ANR	729409	ExpressionStatement	mem = * ( ( MemNumType * ) bp )	6011:1:138791:138816	728362	0	True				
ANR	729410	AssignmentExpression	mem = * ( ( MemNumType * ) bp )		728362	0		=			
ANR	729411	Identifier	mem		728362	0					
ANR	729412	UnaryOperationExpression	* ( ( MemNumType * ) bp )		728362	1					
ANR	729413	UnaryOperator	*		728362	0					
ANR	729414	CastExpression	( MemNumType * ) bp		728362	1					
ANR	729415	CastTarget	MemNumType *		728362	0					
ANR	729416	Identifier	bp		728362	1					
ANR	729417	ExpressionStatement	bp += SIZE_MEMNUM	6012:1:138819:138836	728362	1	True				
ANR	729418	AssignmentExpression	bp += SIZE_MEMNUM		728362	0		+=			
ANR	729419	Identifier	bp		728362	0					
ANR	729420	Identifier	SIZE_MEMNUM		728362	1					
ANR	729421	ExpressionStatement	addr = * ( ( RelAddrType * ) bp )	6013:1:138839:138866	728362	2	True				
ANR	729422	AssignmentExpression	addr = * ( ( RelAddrType * ) bp )		728362	0		=			
ANR	729423	Identifier	addr		728362	0					
ANR	729424	UnaryOperationExpression	* ( ( RelAddrType * ) bp )		728362	1					
ANR	729425	UnaryOperator	*		728362	0					
ANR	729426	CastExpression	( RelAddrType * ) bp		728362	1					
ANR	729427	CastTarget	RelAddrType *		728362	0					
ANR	729428	Identifier	bp		728362	1					
ANR	729429	ExpressionStatement	bp += SIZE_RELADDR	6014:1:138869:138887	728362	3	True				
ANR	729430	AssignmentExpression	bp += SIZE_RELADDR		728362	0		+=			
ANR	729431	Identifier	bp		728362	0					
ANR	729432	Identifier	SIZE_RELADDR		728362	1					
ANR	729433	ExpressionStatement	"fprintf ( f , "":%d:%d"" , mem , addr )"	6015:1:138890:138921	728362	4	True				
ANR	729434	CallExpression	"fprintf ( f , "":%d:%d"" , mem , addr )"		728362	0					
ANR	729435	Callee	fprintf		728362	0					
ANR	729436	Identifier	fprintf		728362	0					
ANR	729437	ArgumentList	f		728362	1					
ANR	729438	Argument	f		728362	0					
ANR	729439	Identifier	f		728362	0					
ANR	729440	Argument	""":%d:%d"""		728362	1					
ANR	729441	PrimaryExpression	""":%d:%d"""		728362	0					
ANR	729442	Argument	mem		728362	2					
ANR	729443	Identifier	mem		728362	0					
ANR	729444	Argument	addr		728362	3					
ANR	729445	Identifier	addr		728362	0					
ANR	729446	BreakStatement	break ;	6017:6:138937:138942	728362	111	True				
ANR	729447	Label	case OP_PUSH_OR_JUMP_EXACT1 :	6019:4:138949:138976	728362	112	True				
ANR	729448	Identifier	OP_PUSH_OR_JUMP_EXACT1		728362	0					
ANR	729449	Label	case OP_PUSH_IF_PEEK_NEXT :	6020:4:138982:139007	728362	113	True				
ANR	729450	Identifier	OP_PUSH_IF_PEEK_NEXT		728362	0					
ANR	729451	ExpressionStatement	addr = * ( ( RelAddrType * ) bp )	6021:6:139015:139042	728362	114	True				
ANR	729452	AssignmentExpression	addr = * ( ( RelAddrType * ) bp )		728362	0		=			
ANR	729453	Identifier	addr		728362	0					
ANR	729454	UnaryOperationExpression	* ( ( RelAddrType * ) bp )		728362	1					
ANR	729455	UnaryOperator	*		728362	0					
ANR	729456	CastExpression	( RelAddrType * ) bp		728362	1					
ANR	729457	CastTarget	RelAddrType *		728362	0					
ANR	729458	Identifier	bp		728362	1					
ANR	729459	ExpressionStatement	bp += SIZE_RELADDR	6022:6:139050:139068	728362	115	True				
ANR	729460	AssignmentExpression	bp += SIZE_RELADDR		728362	0		+=			
ANR	729461	Identifier	bp		728362	0					
ANR	729462	Identifier	SIZE_RELADDR		728362	1					
ANR	729463	ExpressionStatement	"fprintf ( f , "":(%d)"" , addr )"	6023:6:139076:139101	728362	116	True				
ANR	729464	CallExpression	"fprintf ( f , "":(%d)"" , addr )"		728362	0					
ANR	729465	Callee	fprintf		728362	0					
ANR	729466	Identifier	fprintf		728362	0					
ANR	729467	ArgumentList	f		728362	1					
ANR	729468	Argument	f		728362	0					
ANR	729469	Identifier	f		728362	0					
ANR	729470	Argument	""":(%d)"""		728362	1					
ANR	729471	PrimaryExpression	""":(%d)"""		728362	0					
ANR	729472	Argument	addr		728362	2					
ANR	729473	Identifier	addr		728362	0					
ANR	729474	ExpressionStatement	"p_string ( f , 1 , bp )"	6024:6:139109:139127	728362	117	True				
ANR	729475	CallExpression	"p_string ( f , 1 , bp )"		728362	0					
ANR	729476	Callee	p_string		728362	0					
ANR	729477	Identifier	p_string		728362	0					
ANR	729478	ArgumentList	f		728362	1					
ANR	729479	Argument	f		728362	0					
ANR	729480	Identifier	f		728362	0					
ANR	729481	Argument	1		728362	1					
ANR	729482	PrimaryExpression	1		728362	0					
ANR	729483	Argument	bp		728362	2					
ANR	729484	Identifier	bp		728362	0					
ANR	729485	ExpressionStatement	bp += 1	6025:6:139135:139142	728362	118	True				
ANR	729486	AssignmentExpression	bp += 1		728362	0		+=			
ANR	729487	Identifier	bp		728362	0					
ANR	729488	PrimaryExpression	1		728362	1					
ANR	729489	BreakStatement	break ;	6026:6:139150:139155	728362	119	True				
ANR	729490	Label	case OP_LOOK_BEHIND :	6028:4:139162:139181	728362	120	True				
ANR	729491	Identifier	OP_LOOK_BEHIND		728362	0					
ANR	729492	ExpressionStatement	"GET_LENGTH_INC ( len , bp )"	6029:6:139189:139212	728362	121	True				
ANR	729493	CallExpression	"GET_LENGTH_INC ( len , bp )"		728362	0					
ANR	729494	Callee	GET_LENGTH_INC		728362	0					
ANR	729495	Identifier	GET_LENGTH_INC		728362	0					
ANR	729496	ArgumentList	len		728362	1					
ANR	729497	Argument	len		728362	0					
ANR	729498	Identifier	len		728362	0					
ANR	729499	Argument	bp		728362	1					
ANR	729500	Identifier	bp		728362	0					
ANR	729501	ExpressionStatement	"fprintf ( f , "":%d"" , len )"	6030:6:139220:139242	728362	122	True				
ANR	729502	CallExpression	"fprintf ( f , "":%d"" , len )"		728362	0					
ANR	729503	Callee	fprintf		728362	0					
ANR	729504	Identifier	fprintf		728362	0					
ANR	729505	ArgumentList	f		728362	1					
ANR	729506	Argument	f		728362	0					
ANR	729507	Identifier	f		728362	0					
ANR	729508	Argument	""":%d"""		728362	1					
ANR	729509	PrimaryExpression	""":%d"""		728362	0					
ANR	729510	Argument	len		728362	2					
ANR	729511	Identifier	len		728362	0					
ANR	729512	BreakStatement	break ;	6031:6:139250:139255	728362	123	True				
ANR	729513	Label	case OP_PUSH_LOOK_BEHIND_NOT :	6033:4:139262:139290	728362	124	True				
ANR	729514	Identifier	OP_PUSH_LOOK_BEHIND_NOT		728362	0					
ANR	729515	ExpressionStatement	"GET_RELADDR_INC ( addr , bp )"	6034:6:139298:139323	728362	125	True				
ANR	729516	CallExpression	"GET_RELADDR_INC ( addr , bp )"		728362	0					
ANR	729517	Callee	GET_RELADDR_INC		728362	0					
ANR	729518	Identifier	GET_RELADDR_INC		728362	0					
ANR	729519	ArgumentList	addr		728362	1					
ANR	729520	Argument	addr		728362	0					
ANR	729521	Identifier	addr		728362	0					
ANR	729522	Argument	bp		728362	1					
ANR	729523	Identifier	bp		728362	0					
ANR	729524	ExpressionStatement	"GET_LENGTH_INC ( len , bp )"	6035:6:139331:139354	728362	126	True				
ANR	729525	CallExpression	"GET_LENGTH_INC ( len , bp )"		728362	0					
ANR	729526	Callee	GET_LENGTH_INC		728362	0					
ANR	729527	Identifier	GET_LENGTH_INC		728362	0					
ANR	729528	ArgumentList	len		728362	1					
ANR	729529	Argument	len		728362	0					
ANR	729530	Identifier	len		728362	0					
ANR	729531	Argument	bp		728362	1					
ANR	729532	Identifier	bp		728362	0					
ANR	729533	ExpressionStatement	"fprintf ( f , "":%d:(%d)"" , len , addr )"	6036:6:139362:139395	728362	127	True				
ANR	729534	CallExpression	"fprintf ( f , "":%d:(%d)"" , len , addr )"		728362	0					
ANR	729535	Callee	fprintf		728362	0					
ANR	729536	Identifier	fprintf		728362	0					
ANR	729537	ArgumentList	f		728362	1					
ANR	729538	Argument	f		728362	0					
ANR	729539	Identifier	f		728362	0					
ANR	729540	Argument	""":%d:(%d)"""		728362	1					
ANR	729541	PrimaryExpression	""":%d:(%d)"""		728362	0					
ANR	729542	Argument	len		728362	2					
ANR	729543	Identifier	len		728362	0					
ANR	729544	Argument	addr		728362	3					
ANR	729545	Identifier	addr		728362	0					
ANR	729546	BreakStatement	break ;	6037:6:139403:139408	728362	128	True				
ANR	729547	Label	case OP_STATE_CHECK_PUSH :	6039:4:139415:139439	728362	129	True				
ANR	729548	Identifier	OP_STATE_CHECK_PUSH		728362	0					
ANR	729549	Label	case OP_STATE_CHECK_PUSH_OR_JUMP :	6040:4:139445:139477	728362	130	True				
ANR	729550	Identifier	OP_STATE_CHECK_PUSH_OR_JUMP		728362	0					
ANR	729551	ExpressionStatement	scn = * ( ( StateCheckNumType * ) bp )	6041:6:139485:139517	728362	131	True				
ANR	729552	AssignmentExpression	scn = * ( ( StateCheckNumType * ) bp )		728362	0		=			
ANR	729553	Identifier	scn		728362	0					
ANR	729554	UnaryOperationExpression	* ( ( StateCheckNumType * ) bp )		728362	1					
ANR	729555	UnaryOperator	*		728362	0					
ANR	729556	CastExpression	( StateCheckNumType * ) bp		728362	1					
ANR	729557	CastTarget	StateCheckNumType *		728362	0					
ANR	729558	Identifier	bp		728362	1					
ANR	729559	ExpressionStatement	bp += SIZE_STATE_CHECK_NUM	6042:6:139525:139551	728362	132	True				
ANR	729560	AssignmentExpression	bp += SIZE_STATE_CHECK_NUM		728362	0		+=			
ANR	729561	Identifier	bp		728362	0					
ANR	729562	Identifier	SIZE_STATE_CHECK_NUM		728362	1					
ANR	729563	ExpressionStatement	addr = * ( ( RelAddrType * ) bp )	6043:6:139559:139586	728362	133	True				
ANR	729564	AssignmentExpression	addr = * ( ( RelAddrType * ) bp )		728362	0		=			
ANR	729565	Identifier	addr		728362	0					
ANR	729566	UnaryOperationExpression	* ( ( RelAddrType * ) bp )		728362	1					
ANR	729567	UnaryOperator	*		728362	0					
ANR	729568	CastExpression	( RelAddrType * ) bp		728362	1					
ANR	729569	CastTarget	RelAddrType *		728362	0					
ANR	729570	Identifier	bp		728362	1					
ANR	729571	ExpressionStatement	bp += SIZE_RELADDR	6044:6:139594:139612	728362	134	True				
ANR	729572	AssignmentExpression	bp += SIZE_RELADDR		728362	0		+=			
ANR	729573	Identifier	bp		728362	0					
ANR	729574	Identifier	SIZE_RELADDR		728362	1					
ANR	729575	ExpressionStatement	"fprintf ( f , "":%d:(%d)"" , scn , addr )"	6045:6:139620:139653	728362	135	True				
ANR	729576	CallExpression	"fprintf ( f , "":%d:(%d)"" , scn , addr )"		728362	0					
ANR	729577	Callee	fprintf		728362	0					
ANR	729578	Identifier	fprintf		728362	0					
ANR	729579	ArgumentList	f		728362	1					
ANR	729580	Argument	f		728362	0					
ANR	729581	Identifier	f		728362	0					
ANR	729582	Argument	""":%d:(%d)"""		728362	1					
ANR	729583	PrimaryExpression	""":%d:(%d)"""		728362	0					
ANR	729584	Argument	scn		728362	2					
ANR	729585	Identifier	scn		728362	0					
ANR	729586	Argument	addr		728362	3					
ANR	729587	Identifier	addr		728362	0					
ANR	729588	BreakStatement	break ;	6046:6:139661:139666	728362	136	True				
ANR	729589	Label	default :	6048:4:139673:139680	728362	137	True				
ANR	729590	Identifier	default		728362	0					
ANR	729591	ExpressionStatement	"fprintf ( stderr , ""onig_print_compiled_byte_code: undefined code %d\\n"" , * -- bp )"	6049:6:139688:139771	728362	138	True				
ANR	729592	CallExpression	"fprintf ( stderr , ""onig_print_compiled_byte_code: undefined code %d\\n"" , * -- bp )"		728362	0					
ANR	729593	Callee	fprintf		728362	0					
ANR	729594	Identifier	fprintf		728362	0					
ANR	729595	ArgumentList	stderr		728362	1					
ANR	729596	Argument	stderr		728362	0					
ANR	729597	Identifier	stderr		728362	0					
ANR	729598	Argument	"""onig_print_compiled_byte_code: undefined code %d\\n"""		728362	1					
ANR	729599	PrimaryExpression	"""onig_print_compiled_byte_code: undefined code %d\\n"""		728362	0					
ANR	729600	Argument	* -- bp		728362	2					
ANR	729601	UnaryOperationExpression	* -- bp		728362	0					
ANR	729602	UnaryOperator	*		728362	0					
ANR	729603	UnaryExpression	-- bp		728362	1					
ANR	729604	IncDec	--		728362	0					
ANR	729605	Identifier	bp		728362	1					
ANR	729606	ExpressionStatement	"fputs ( ""]"" , f )"	6053:2:139785:139798	728362	10	True				
ANR	729607	CallExpression	"fputs ( ""]"" , f )"		728362	0					
ANR	729608	Callee	fputs		728362	0					
ANR	729609	Identifier	fputs		728362	0					
ANR	729610	ArgumentList	"""]"""		728362	1					
ANR	729611	Argument	"""]"""		728362	0					
ANR	729612	PrimaryExpression	"""]"""		728362	0					
ANR	729613	Argument	f		728362	1					
ANR	729614	Identifier	f		728362	0					
ANR	729615	IfStatement	if ( nextp )		728362	11					
ANR	729616	Condition	nextp	6054:6:139806:139810	728362	0	True				
ANR	729617	Identifier	nextp		728362	0					
ANR	729618	ExpressionStatement	* nextp = bp	6054:13:139813:139824	728362	1	True				
ANR	729619	AssignmentExpression	* nextp = bp		728362	0		=			
ANR	729620	UnaryOperationExpression	* nextp		728362	0					
ANR	729621	UnaryOperator	*		728362	0					
ANR	729622	Identifier	nextp		728362	1					
ANR	729623	Identifier	bp		728362	1					
ANR	729624	ReturnType	extern void		728362	1					
ANR	729625	Identifier	onig_print_compiled_byte_code		728362	2					
ANR	729626	ParameterList	"FILE * f , UChar * bp , UChar * * nextp , OnigEncoding enc"		728362	3					
ANR	729627	Parameter	FILE * f	5814:30:134378:134384	728362	0	True				
ANR	729628	ParameterType	FILE *		728362	0					
ANR	729629	Identifier	f		728362	1					
ANR	729630	Parameter	UChar * bp	5814:39:134387:134395	728362	1	True				
ANR	729631	ParameterType	UChar *		728362	0					
ANR	729632	Identifier	bp		728362	1					
ANR	729633	Parameter	UChar * * nextp	5814:50:134398:134410	728362	2	True				
ANR	729634	ParameterType	UChar * *		728362	0					
ANR	729635	Identifier	nextp		728362	1					
ANR	729636	Parameter	OnigEncoding enc	5815:30:134443:134458	728362	3	True				
ANR	729637	ParameterType	OnigEncoding		728362	0					
ANR	729638	Identifier	enc		728362	1					
ANR	729639	CFGEntryNode	ENTRY		728362		True				
ANR	729640	CFGExitNode	EXIT		728362		True				
ANR	729641	Symbol	op2arg_type		728362						
ANR	729642	Symbol	SIZE_RELADDR		728362						
ANR	729643	Symbol	code		728362						
ANR	729644	Symbol	* ( ( RelAddrType * ) bp )		728362						
ANR	729645	Symbol	* bp ++		728362						
ANR	729646	Symbol	* cc		728362						
ANR	729647	Symbol	bp		728362						
ANR	729648	Symbol	SIZE_STATE_CHECK_NUM		728362						
ANR	729649	Symbol	arg_type		728362						
ANR	729650	Symbol	SIZE_MEMNUM		728362						
ANR	729651	Symbol	len		728362						
ANR	729652	Symbol	mem		728362						
ANR	729653	Symbol	* bp		728362						
ANR	729654	Symbol	SIZE_OPTION		728362						
ANR	729655	Symbol	op2name		728362						
ANR	729656	Symbol	enc		728362						
ANR	729657	Symbol	addr		728362						
ANR	729658	Symbol	scn		728362						
ANR	729659	Symbol	nextp		728362						
ANR	729660	Symbol	SIZE_BITSET		728362						
ANR	729661	Symbol	cc		728362						
ANR	729662	Symbol	level		728362						
ANR	729663	Symbol	f		728362						
ANR	729664	Symbol	ARG_SPECIAL		728362						
ANR	729665	Symbol	i		728362						
ANR	729666	Symbol	stderr		728362						
ANR	729667	Symbol	enclen		728362						
ANR	729668	Symbol	n		728362						
ANR	729669	Symbol	* ( ( OnigOptionType * ) bp )		728362						
ANR	729670	Symbol	* ( ( StateCheckNumType * ) bp )		728362						
ANR	729671	Symbol	cc -> bs		728362						
ANR	729672	Symbol	q		728362						
ANR	729673	Symbol	bitset_on_num		728362						
ANR	729674	Symbol	* -- bp		728362						
ANR	729675	Symbol	* ( ( MemNumType * ) bp )		728362						
ANR	729676	Symbol	mb_len		728362						
ANR	729677	Symbol	* nextp		728362						
ANR	729678	Symbol	option		728362						
ANR	729679	Function	print_compiled_byte_code_list	6057:0:139829:140244							
ANR	729680	FunctionDef	"print_compiled_byte_code_list (FILE * f , regex_t * reg)"		729679	0					
ANR	729681	CompoundStatement		6059:0:139894:140244	729679	0					
ANR	729682	IdentifierDeclStatement	int ncode ;	6060:2:139898:139907	729679	0	True				
ANR	729683	IdentifierDecl	ncode		729679	0					
ANR	729684	IdentifierDeclType	int		729679	0					
ANR	729685	Identifier	ncode		729679	1					
ANR	729686	IdentifierDeclStatement	UChar * bp = reg -> p ;	6061:2:139911:139929	729679	1	True				
ANR	729687	IdentifierDecl	* bp = reg -> p		729679	0					
ANR	729688	IdentifierDeclType	UChar *		729679	0					
ANR	729689	Identifier	bp		729679	1					
ANR	729690	AssignmentExpression	* bp = reg -> p		729679	2		=			
ANR	729691	Identifier	bp		729679	0					
ANR	729692	PtrMemberAccess	reg -> p		729679	1					
ANR	729693	Identifier	reg		729679	0					
ANR	729694	Identifier	p		729679	1					
ANR	729695	IdentifierDeclStatement	UChar * end = reg -> p + reg -> used ;	6062:2:139933:139964	729679	2	True				
ANR	729696	IdentifierDecl	* end = reg -> p + reg -> used		729679	0					
ANR	729697	IdentifierDeclType	UChar *		729679	0					
ANR	729698	Identifier	end		729679	1					
ANR	729699	AssignmentExpression	* end = reg -> p + reg -> used		729679	2		=			
ANR	729700	Identifier	end		729679	0					
ANR	729701	AdditiveExpression	reg -> p + reg -> used		729679	1		+			
ANR	729702	PtrMemberAccess	reg -> p		729679	0					
ANR	729703	Identifier	reg		729679	0					
ANR	729704	Identifier	p		729679	1					
ANR	729705	PtrMemberAccess	reg -> used		729679	1					
ANR	729706	Identifier	reg		729679	0					
ANR	729707	Identifier	used		729679	1					
ANR	729708	ExpressionStatement	"fprintf ( f , ""code length: %d\\n"" , reg -> used )"	6064:2:139969:140011	729679	3	True				
ANR	729709	CallExpression	"fprintf ( f , ""code length: %d\\n"" , reg -> used )"		729679	0					
ANR	729710	Callee	fprintf		729679	0					
ANR	729711	Identifier	fprintf		729679	0					
ANR	729712	ArgumentList	f		729679	1					
ANR	729713	Argument	f		729679	0					
ANR	729714	Identifier	f		729679	0					
ANR	729715	Argument	"""code length: %d\\n"""		729679	1					
ANR	729716	PrimaryExpression	"""code length: %d\\n"""		729679	0					
ANR	729717	Argument	reg -> used		729679	2					
ANR	729718	PtrMemberAccess	reg -> used		729679	0					
ANR	729719	Identifier	reg		729679	0					
ANR	729720	Identifier	used		729679	1					
ANR	729721	ExpressionStatement	ncode = 0	6066:2:140016:140025	729679	4	True				
ANR	729722	AssignmentExpression	ncode = 0		729679	0		=			
ANR	729723	Identifier	ncode		729679	0					
ANR	729724	PrimaryExpression	0		729679	1					
ANR	729725	WhileStatement	while ( bp < end )		729679	5					
ANR	729726	Condition	bp < end	6067:9:140036:140043	729679	0	True				
ANR	729727	RelationalExpression	bp < end		729679	0		<			
ANR	729728	Identifier	bp		729679	0					
ANR	729729	Identifier	end		729679	1					
ANR	729730	CompoundStatement		9:19:151:151	729679	1					
ANR	729731	ExpressionStatement	ncode ++	6068:4:140052:140059	729679	0	True				
ANR	729732	PostIncDecOperationExpression	ncode ++		729679	0					
ANR	729733	Identifier	ncode		729679	0					
ANR	729734	IncDec	++		729679	1					
ANR	729735	IfStatement	if ( bp > reg -> p )		729679	1					
ANR	729736	Condition	bp > reg -> p	6069:8:140069:140079	729679	0	True				
ANR	729737	RelationalExpression	bp > reg -> p		729679	0		>			
ANR	729738	Identifier	bp		729679	0					
ANR	729739	PtrMemberAccess	reg -> p		729679	1					
ANR	729740	Identifier	reg		729679	0					
ANR	729741	Identifier	p		729679	1					
ANR	729742	CompoundStatement		11:21:187:187	729679	1					
ANR	729743	IfStatement	if ( ncode % 5 == 0 )		729679	0					
ANR	729744	Condition	ncode % 5 == 0	6070:10:140094:140107	729679	0	True				
ANR	729745	EqualityExpression	ncode % 5 == 0		729679	0		==			
ANR	729746	MultiplicativeExpression	ncode % 5		729679	0		%			
ANR	729747	Identifier	ncode		729679	0					
ANR	729748	PrimaryExpression	5		729679	1					
ANR	729749	PrimaryExpression	0		729679	1					
ANR	729750	ExpressionStatement	"fprintf ( f , ""\\n"" )"	6071:1:140111:140127	729679	1	True				
ANR	729751	CallExpression	"fprintf ( f , ""\\n"" )"		729679	0					
ANR	729752	Callee	fprintf		729679	0					
ANR	729753	Identifier	fprintf		729679	0					
ANR	729754	ArgumentList	f		729679	1					
ANR	729755	Argument	f		729679	0					
ANR	729756	Identifier	f		729679	0					
ANR	729757	Argument	"""\\n"""		729679	1					
ANR	729758	PrimaryExpression	"""\\n"""		729679	0					
ANR	729759	ElseStatement	else		729679	0					
ANR	729760	ExpressionStatement	"fputs ( "" "" , f )"	6073:1:140141:140154	729679	0	True				
ANR	729761	CallExpression	"fputs ( "" "" , f )"		729679	0					
ANR	729762	Callee	fputs		729679	0					
ANR	729763	Identifier	fputs		729679	0					
ANR	729764	ArgumentList	""" """		729679	1					
ANR	729765	Argument	""" """		729679	0					
ANR	729766	PrimaryExpression	""" """		729679	0					
ANR	729767	Argument	f		729679	1					
ANR	729768	Identifier	f		729679	0					
ANR	729769	ExpressionStatement	"onig_print_compiled_byte_code ( f , bp , & bp , reg -> enc )"	6075:4:140166:140217	729679	2	True				
ANR	729770	CallExpression	"onig_print_compiled_byte_code ( f , bp , & bp , reg -> enc )"		729679	0					
ANR	729771	Callee	onig_print_compiled_byte_code		729679	0					
ANR	729772	Identifier	onig_print_compiled_byte_code		729679	0					
ANR	729773	ArgumentList	f		729679	1					
ANR	729774	Argument	f		729679	0					
ANR	729775	Identifier	f		729679	0					
ANR	729776	Argument	bp		729679	1					
ANR	729777	Identifier	bp		729679	0					
ANR	729778	Argument	& bp		729679	2					
ANR	729779	UnaryOperationExpression	& bp		729679	0					
ANR	729780	UnaryOperator	&		729679	0					
ANR	729781	Identifier	bp		729679	1					
ANR	729782	Argument	reg -> enc		729679	3					
ANR	729783	PtrMemberAccess	reg -> enc		729679	0					
ANR	729784	Identifier	reg		729679	0					
ANR	729785	Identifier	enc		729679	1					
ANR	729786	ExpressionStatement	"fprintf ( f , ""\\n"" )"	6078:2:140226:140242	729679	6	True				
ANR	729787	CallExpression	"fprintf ( f , ""\\n"" )"		729679	0					
ANR	729788	Callee	fprintf		729679	0					
ANR	729789	Identifier	fprintf		729679	0					
ANR	729790	ArgumentList	f		729679	1					
ANR	729791	Argument	f		729679	0					
ANR	729792	Identifier	f		729679	0					
ANR	729793	Argument	"""\\n"""		729679	1					
ANR	729794	PrimaryExpression	"""\\n"""		729679	0					
ANR	729795	ReturnType	static void		729679	1					
ANR	729796	Identifier	print_compiled_byte_code_list		729679	2					
ANR	729797	ParameterList	"FILE * f , regex_t * reg"		729679	3					
ANR	729798	Parameter	FILE * f	6058:30:139871:139877	729679	0	True				
ANR	729799	ParameterType	FILE *		729679	0					
ANR	729800	Identifier	f		729679	1					
ANR	729801	Parameter	regex_t * reg	6058:39:139880:139891	729679	1	True				
ANR	729802	ParameterType	regex_t *		729679	0					
ANR	729803	Identifier	reg		729679	1					
ANR	729804	CFGEntryNode	ENTRY		729679		True				
ANR	729805	CFGExitNode	EXIT		729679		True				
ANR	729806	Symbol	reg		729679						
ANR	729807	Symbol	f		729679						
ANR	729808	Symbol	ncode		729679						
ANR	729809	Symbol	& bp		729679						
ANR	729810	Symbol	end		729679						
ANR	729811	Symbol	reg -> p		729679						
ANR	729812	Symbol	* reg		729679						
ANR	729813	Symbol	bp		729679						
ANR	729814	Symbol	reg -> used		729679						
ANR	729815	Symbol	reg -> enc		729679						
ANR	729816	Function	print_indent_tree	6081:0:140247:144540							
ANR	729817	FunctionDef	"print_indent_tree (FILE * f , Node * node , int indent)"		729816	0					
ANR	729818	CompoundStatement		6083:0:140310:144540	729816	0					
ANR	729819	IdentifierDeclStatement	"int i , type ;"	6084:2:140314:140325	729816	0	True				
ANR	729820	IdentifierDecl	i		729816	0					
ANR	729821	IdentifierDeclType	int		729816	0					
ANR	729822	Identifier	i		729816	1					
ANR	729823	IdentifierDecl	type		729816	1					
ANR	729824	IdentifierDeclType	int		729816	0					
ANR	729825	Identifier	type		729816	1					
ANR	729826	IdentifierDeclStatement	int add = 3 ;	6085:2:140329:140340	729816	1	True				
ANR	729827	IdentifierDecl	add = 3		729816	0					
ANR	729828	IdentifierDeclType	int		729816	0					
ANR	729829	Identifier	add		729816	1					
ANR	729830	AssignmentExpression	add = 3		729816	2		=			
ANR	729831	Identifier	add		729816	0					
ANR	729832	PrimaryExpression	3		729816	1					
ANR	729833	IdentifierDeclStatement	UChar * p ;	6086:2:140344:140352	729816	2	True				
ANR	729834	IdentifierDecl	* p		729816	0					
ANR	729835	IdentifierDeclType	UChar *		729816	0					
ANR	729836	Identifier	p		729816	1					
ANR	729837	ExpressionStatement	"Indent ( f , indent )"	6088:2:140357:140374	729816	3	True				
ANR	729838	CallExpression	"Indent ( f , indent )"		729816	0					
ANR	729839	Callee	Indent		729816	0					
ANR	729840	Identifier	Indent		729816	0					
ANR	729841	ArgumentList	f		729816	1					
ANR	729842	Argument	f		729816	0					
ANR	729843	Identifier	f		729816	0					
ANR	729844	Argument	indent		729816	1					
ANR	729845	Identifier	indent		729816	0					
ANR	729846	IfStatement	if ( IS_NULL ( node ) )		729816	4					
ANR	729847	Condition	IS_NULL ( node )	6089:6:140382:140394	729816	0	True				
ANR	729848	CallExpression	IS_NULL ( node )		729816	0					
ANR	729849	Callee	IS_NULL		729816	0					
ANR	729850	Identifier	IS_NULL		729816	0					
ANR	729851	ArgumentList	node		729816	1					
ANR	729852	Argument	node		729816	0					
ANR	729853	Identifier	node		729816	0					
ANR	729854	CompoundStatement		7:21:86:86	729816	1					
ANR	729855	ExpressionStatement	"fprintf ( f , ""ERROR: null node!!!\\n"" )"	6090:4:140403:140438	729816	0	True				
ANR	729856	CallExpression	"fprintf ( f , ""ERROR: null node!!!\\n"" )"		729816	0					
ANR	729857	Callee	fprintf		729816	0					
ANR	729858	Identifier	fprintf		729816	0					
ANR	729859	ArgumentList	f		729816	1					
ANR	729860	Argument	f		729816	0					
ANR	729861	Identifier	f		729816	0					
ANR	729862	Argument	"""ERROR: null node!!!\\n"""		729816	1					
ANR	729863	PrimaryExpression	"""ERROR: null node!!!\\n"""		729816	0					
ANR	729864	ExpressionStatement	exit ( 0 )	6091:4:140444:140452	729816	1	True				
ANR	729865	CallExpression	exit ( 0 )		729816	0					
ANR	729866	Callee	exit		729816	0					
ANR	729867	Identifier	exit		729816	0					
ANR	729868	ArgumentList	0		729816	1					
ANR	729869	Argument	0		729816	0					
ANR	729870	PrimaryExpression	0		729816	0					
ANR	729871	ExpressionStatement	type = NTYPE ( node )	6094:2:140461:140479	729816	5	True				
ANR	729872	AssignmentExpression	type = NTYPE ( node )		729816	0		=			
ANR	729873	Identifier	type		729816	0					
ANR	729874	CallExpression	NTYPE ( node )		729816	1					
ANR	729875	Callee	NTYPE		729816	0					
ANR	729876	Identifier	NTYPE		729816	0					
ANR	729877	ArgumentList	node		729816	1					
ANR	729878	Argument	node		729816	0					
ANR	729879	Identifier	node		729816	0					
ANR	729880	SwitchStatement	switch ( type )		729816	6					
ANR	729881	Condition	type	6095:10:140491:140494	729816	0	True				
ANR	729882	Identifier	type		729816	0					
ANR	729883	CompoundStatement		13:16:186:186	729816	1					
ANR	729884	Label	case NT_LIST :	6096:2:140501:140513	729816	0	True				
ANR	729885	Identifier	NT_LIST		729816	0					
ANR	729886	Label	case NT_ALT :	6097:2:140517:140528	729816	1	True				
ANR	729887	Identifier	NT_ALT		729816	0					
ANR	729888	IfStatement	if ( NTYPE ( node ) == NT_LIST )		729816	2					
ANR	729889	Condition	NTYPE ( node ) == NT_LIST	6098:8:140538:140559	729816	0	True				
ANR	729890	EqualityExpression	NTYPE ( node ) == NT_LIST		729816	0		==			
ANR	729891	CallExpression	NTYPE ( node )		729816	0					
ANR	729892	Callee	NTYPE		729816	0					
ANR	729893	Identifier	NTYPE		729816	0					
ANR	729894	ArgumentList	node		729816	1					
ANR	729895	Argument	node		729816	0					
ANR	729896	Identifier	node		729816	0					
ANR	729897	Identifier	NT_LIST		729816	1					
ANR	729898	ExpressionStatement	"fprintf ( f , ""<list:%x>\\n"" , ( int ) node )"	6099:6:140568:140605	729816	1	True				
ANR	729899	CallExpression	"fprintf ( f , ""<list:%x>\\n"" , ( int ) node )"		729816	0					
ANR	729900	Callee	fprintf		729816	0					
ANR	729901	Identifier	fprintf		729816	0					
ANR	729902	ArgumentList	f		729816	1					
ANR	729903	Argument	f		729816	0					
ANR	729904	Identifier	f		729816	0					
ANR	729905	Argument	"""<list:%x>\\n"""		729816	1					
ANR	729906	PrimaryExpression	"""<list:%x>\\n"""		729816	0					
ANR	729907	Argument	( int ) node		729816	2					
ANR	729908	CastExpression	( int ) node		729816	0					
ANR	729909	CastTarget	int		729816	0					
ANR	729910	Identifier	node		729816	1					
ANR	729911	ElseStatement	else		729816	0					
ANR	729912	ExpressionStatement	"fprintf ( f , ""<alt:%x>\\n"" , ( int ) node )"	6101:6:140622:140658	729816	0	True				
ANR	729913	CallExpression	"fprintf ( f , ""<alt:%x>\\n"" , ( int ) node )"		729816	0					
ANR	729914	Callee	fprintf		729816	0					
ANR	729915	Identifier	fprintf		729816	0					
ANR	729916	ArgumentList	f		729816	1					
ANR	729917	Argument	f		729816	0					
ANR	729918	Identifier	f		729816	0					
ANR	729919	Argument	"""<alt:%x>\\n"""		729816	1					
ANR	729920	PrimaryExpression	"""<alt:%x>\\n"""		729816	0					
ANR	729921	Argument	( int ) node		729816	2					
ANR	729922	CastExpression	( int ) node		729816	0					
ANR	729923	CastTarget	int		729816	0					
ANR	729924	Identifier	node		729816	1					
ANR	729925	ExpressionStatement	"print_indent_tree ( f , NCAR ( node ) , indent + add )"	6103:4:140665:140711	729816	3	True				
ANR	729926	CallExpression	"print_indent_tree ( f , NCAR ( node ) , indent + add )"		729816	0					
ANR	729927	Callee	print_indent_tree		729816	0					
ANR	729928	Identifier	print_indent_tree		729816	0					
ANR	729929	ArgumentList	f		729816	1					
ANR	729930	Argument	f		729816	0					
ANR	729931	Identifier	f		729816	0					
ANR	729932	Argument	NCAR ( node )		729816	1					
ANR	729933	CallExpression	NCAR ( node )		729816	0					
ANR	729934	Callee	NCAR		729816	0					
ANR	729935	Identifier	NCAR		729816	0					
ANR	729936	ArgumentList	node		729816	1					
ANR	729937	Argument	node		729816	0					
ANR	729938	Identifier	node		729816	0					
ANR	729939	Argument	indent + add		729816	2					
ANR	729940	AdditiveExpression	indent + add		729816	0		+			
ANR	729941	Identifier	indent		729816	0					
ANR	729942	Identifier	add		729816	1					
ANR	729943	WhileStatement	while ( IS_NOT_NULL ( node = NCDR ( node ) ) )		729816	4					
ANR	729944	Condition	IS_NOT_NULL ( node = NCDR ( node ) )	6104:11:140724:140753	729816	0	True				
ANR	729945	CallExpression	IS_NOT_NULL ( node = NCDR ( node ) )		729816	0					
ANR	729946	Callee	IS_NOT_NULL		729816	0					
ANR	729947	Identifier	IS_NOT_NULL		729816	0					
ANR	729948	ArgumentList	node = NCDR ( node )		729816	1					
ANR	729949	Argument	node = NCDR ( node )		729816	0					
ANR	729950	AssignmentExpression	node = NCDR ( node )		729816	0		=			
ANR	729951	Identifier	node		729816	0					
ANR	729952	CallExpression	NCDR ( node )		729816	1					
ANR	729953	Callee	NCDR		729816	0					
ANR	729954	Identifier	NCDR		729816	0					
ANR	729955	ArgumentList	node		729816	1					
ANR	729956	Argument	node		729816	0					
ANR	729957	Identifier	node		729816	0					
ANR	729958	CompoundStatement		22:43:445:445	729816	1					
ANR	729959	IfStatement	if ( NTYPE ( node ) != type )		729816	0					
ANR	729960	Condition	NTYPE ( node ) != type	6105:10:140768:140786	729816	0	True				
ANR	729961	EqualityExpression	NTYPE ( node ) != type		729816	0		!=			
ANR	729962	CallExpression	NTYPE ( node )		729816	0					
ANR	729963	Callee	NTYPE		729816	0					
ANR	729964	Identifier	NTYPE		729816	0					
ANR	729965	ArgumentList	node		729816	1					
ANR	729966	Argument	node		729816	0					
ANR	729967	Identifier	node		729816	0					
ANR	729968	Identifier	type		729816	1					
ANR	729969	CompoundStatement		23:31:478:478	729816	1					
ANR	729970	ExpressionStatement	"fprintf ( f , ""ERROR: list/alt right is not a cons. %d\\n"" , NTYPE ( node ) )"	6106:1:140792:140860	729816	0	True				
ANR	729971	CallExpression	"fprintf ( f , ""ERROR: list/alt right is not a cons. %d\\n"" , NTYPE ( node ) )"		729816	0					
ANR	729972	Callee	fprintf		729816	0					
ANR	729973	Identifier	fprintf		729816	0					
ANR	729974	ArgumentList	f		729816	1					
ANR	729975	Argument	f		729816	0					
ANR	729976	Identifier	f		729816	0					
ANR	729977	Argument	"""ERROR: list/alt right is not a cons. %d\\n"""		729816	1					
ANR	729978	PrimaryExpression	"""ERROR: list/alt right is not a cons. %d\\n"""		729816	0					
ANR	729979	Argument	NTYPE ( node )		729816	2					
ANR	729980	CallExpression	NTYPE ( node )		729816	0					
ANR	729981	Callee	NTYPE		729816	0					
ANR	729982	Identifier	NTYPE		729816	0					
ANR	729983	ArgumentList	node		729816	1					
ANR	729984	Argument	node		729816	0					
ANR	729985	Identifier	node		729816	0					
ANR	729986	ExpressionStatement	exit ( 0 )	6107:1:140863:140870	729816	1	True				
ANR	729987	CallExpression	exit ( 0 )		729816	0					
ANR	729988	Callee	exit		729816	0					
ANR	729989	Identifier	exit		729816	0					
ANR	729990	ArgumentList	0		729816	1					
ANR	729991	Argument	0		729816	0					
ANR	729992	PrimaryExpression	0		729816	0					
ANR	729993	ExpressionStatement	"print_indent_tree ( f , NCAR ( node ) , indent + add )"	6109:6:140886:140932	729816	1	True				
ANR	729994	CallExpression	"print_indent_tree ( f , NCAR ( node ) , indent + add )"		729816	0					
ANR	729995	Callee	print_indent_tree		729816	0					
ANR	729996	Identifier	print_indent_tree		729816	0					
ANR	729997	ArgumentList	f		729816	1					
ANR	729998	Argument	f		729816	0					
ANR	729999	Identifier	f		729816	0					
ANR	730000	Argument	NCAR ( node )		729816	1					
ANR	730001	CallExpression	NCAR ( node )		729816	0					
ANR	730002	Callee	NCAR		729816	0					
ANR	730003	Identifier	NCAR		729816	0					
ANR	730004	ArgumentList	node		729816	1					
ANR	730005	Argument	node		729816	0					
ANR	730006	Identifier	node		729816	0					
ANR	730007	Argument	indent + add		729816	2					
ANR	730008	AdditiveExpression	indent + add		729816	0		+			
ANR	730009	Identifier	indent		729816	0					
ANR	730010	Identifier	add		729816	1					
ANR	730011	BreakStatement	break ;	6111:4:140944:140949	729816	5	True				
ANR	730012	Label	case NT_STR :	6113:2:140954:140965	729816	6	True				
ANR	730013	Identifier	NT_STR		729816	0					
ANR	730014	ExpressionStatement	"fprintf ( f , ""<string%s:%x>"" , ( NSTRING_IS_RAW ( node ) ? ""-raw"" : """" ) , ( int ) node )"	6114:4:140971:141053	729816	7	True				
ANR	730015	CallExpression	"fprintf ( f , ""<string%s:%x>"" , ( NSTRING_IS_RAW ( node ) ? ""-raw"" : """" ) , ( int ) node )"		729816	0					
ANR	730016	Callee	fprintf		729816	0					
ANR	730017	Identifier	fprintf		729816	0					
ANR	730018	ArgumentList	f		729816	1					
ANR	730019	Argument	f		729816	0					
ANR	730020	Identifier	f		729816	0					
ANR	730021	Argument	"""<string%s:%x>"""		729816	1					
ANR	730022	PrimaryExpression	"""<string%s:%x>"""		729816	0					
ANR	730023	Argument	"NSTRING_IS_RAW ( node ) ? ""-raw"" : """""		729816	2					
ANR	730024	ConditionalExpression	"NSTRING_IS_RAW ( node ) ? ""-raw"" : """""		729816	0					
ANR	730025	Condition	NSTRING_IS_RAW ( node )		729816	0					
ANR	730026	CallExpression	NSTRING_IS_RAW ( node )		729816	0					
ANR	730027	Callee	NSTRING_IS_RAW		729816	0					
ANR	730028	Identifier	NSTRING_IS_RAW		729816	0					
ANR	730029	ArgumentList	node		729816	1					
ANR	730030	Argument	node		729816	0					
ANR	730031	Identifier	node		729816	0					
ANR	730032	PrimaryExpression	"""-raw"""		729816	1					
ANR	730033	PrimaryExpression	""""""		729816	2					
ANR	730034	Argument	( int ) node		729816	3					
ANR	730035	CastExpression	( int ) node		729816	0					
ANR	730036	CastTarget	int		729816	0					
ANR	730037	Identifier	node		729816	1					
ANR	730038	ForStatement	for ( p = NSTR ( node ) -> s ; p < NSTR ( node ) -> end ; p ++ )		729816	8					
ANR	730039	ForInit	p = NSTR ( node ) -> s ;	6116:9:141064:141081	729816	0	True				
ANR	730040	AssignmentExpression	p = NSTR ( node ) -> s		729816	0		=			
ANR	730041	Identifier	p		729816	0					
ANR	730042	PtrMemberAccess	NSTR ( node ) -> s		729816	1					
ANR	730043	CallExpression	NSTR ( node )		729816	0					
ANR	730044	Callee	NSTR		729816	0					
ANR	730045	Identifier	NSTR		729816	0					
ANR	730046	ArgumentList	node		729816	1					
ANR	730047	Argument	node		729816	0					
ANR	730048	Identifier	node		729816	0					
ANR	730049	Identifier	s		729816	1					
ANR	730050	Condition	p < NSTR ( node ) -> end	6116:28:141083:141101	729816	1	True				
ANR	730051	RelationalExpression	p < NSTR ( node ) -> end		729816	0		<			
ANR	730052	Identifier	p		729816	0					
ANR	730053	PtrMemberAccess	NSTR ( node ) -> end		729816	1					
ANR	730054	CallExpression	NSTR ( node )		729816	0					
ANR	730055	Callee	NSTR		729816	0					
ANR	730056	Identifier	NSTR		729816	0					
ANR	730057	ArgumentList	node		729816	1					
ANR	730058	Argument	node		729816	0					
ANR	730059	Identifier	node		729816	0					
ANR	730060	Identifier	end		729816	1					
ANR	730061	PostIncDecOperationExpression	p ++	6116:49:141104:141106	729816	2	True				
ANR	730062	Identifier	p		729816	0					
ANR	730063	IncDec	++		729816	1					
ANR	730064	CompoundStatement		34:54:798:798	729816	3					
ANR	730065	IfStatement	if ( * p >= 0x20 && * p < 0x7f )		729816	0					
ANR	730066	Condition	* p >= 0x20 && * p < 0x7f	6117:10:141121:141143	729816	0	True				
ANR	730067	AndExpression	* p >= 0x20 && * p < 0x7f		729816	0		&&			
ANR	730068	RelationalExpression	* p >= 0x20		729816	0		>=			
ANR	730069	UnaryOperationExpression	* p		729816	0					
ANR	730070	UnaryOperator	*		729816	0					
ANR	730071	Identifier	p		729816	1					
ANR	730072	PrimaryExpression	0x20		729816	1					
ANR	730073	RelationalExpression	* p < 0x7f		729816	1		<			
ANR	730074	UnaryOperationExpression	* p		729816	0					
ANR	730075	UnaryOperator	*		729816	0					
ANR	730076	Identifier	p		729816	1					
ANR	730077	PrimaryExpression	0x7f		729816	1					
ANR	730078	ExpressionStatement	"fputc ( * p , f )"	6118:1:141147:141159	729816	1	True				
ANR	730079	CallExpression	"fputc ( * p , f )"		729816	0					
ANR	730080	Callee	fputc		729816	0					
ANR	730081	Identifier	fputc		729816	0					
ANR	730082	ArgumentList	* p		729816	1					
ANR	730083	Argument	* p		729816	0					
ANR	730084	UnaryOperationExpression	* p		729816	0					
ANR	730085	UnaryOperator	*		729816	0					
ANR	730086	Identifier	p		729816	1					
ANR	730087	Argument	f		729816	1					
ANR	730088	Identifier	f		729816	0					
ANR	730089	ElseStatement	else		729816	0					
ANR	730090	CompoundStatement		37:11:861:861	729816	0					
ANR	730091	ExpressionStatement	"fprintf ( f , "" 0x%02x"" , * p )"	6120:1:141175:141200	729816	0	True				
ANR	730092	CallExpression	"fprintf ( f , "" 0x%02x"" , * p )"		729816	0					
ANR	730093	Callee	fprintf		729816	0					
ANR	730094	Identifier	fprintf		729816	0					
ANR	730095	ArgumentList	f		729816	1					
ANR	730096	Argument	f		729816	0					
ANR	730097	Identifier	f		729816	0					
ANR	730098	Argument	""" 0x%02x"""		729816	1					
ANR	730099	PrimaryExpression	""" 0x%02x"""		729816	0					
ANR	730100	Argument	* p		729816	2					
ANR	730101	UnaryOperationExpression	* p		729816	0					
ANR	730102	UnaryOperator	*		729816	0					
ANR	730103	Identifier	p		729816	1					
ANR	730104	BreakStatement	break ;	6123:4:141220:141225	729816	9	True				
ANR	730105	Label	case NT_CCLASS :	6125:2:141230:141244	729816	10	True				
ANR	730106	Identifier	NT_CCLASS		729816	0					
ANR	730107	ExpressionStatement	"fprintf ( f , ""<cclass:%x>"" , ( int ) node )"	6126:4:141250:141287	729816	11	True				
ANR	730108	CallExpression	"fprintf ( f , ""<cclass:%x>"" , ( int ) node )"		729816	0					
ANR	730109	Callee	fprintf		729816	0					
ANR	730110	Identifier	fprintf		729816	0					
ANR	730111	ArgumentList	f		729816	1					
ANR	730112	Argument	f		729816	0					
ANR	730113	Identifier	f		729816	0					
ANR	730114	Argument	"""<cclass:%x>"""		729816	1					
ANR	730115	PrimaryExpression	"""<cclass:%x>"""		729816	0					
ANR	730116	Argument	( int ) node		729816	2					
ANR	730117	CastExpression	( int ) node		729816	0					
ANR	730118	CastTarget	int		729816	0					
ANR	730119	Identifier	node		729816	1					
ANR	730120	IfStatement	if ( IS_NCCLASS_NOT ( NCCLASS ( node ) ) )		729816	12					
ANR	730121	Condition	IS_NCCLASS_NOT ( NCCLASS ( node ) )	6127:8:141297:141325	729816	0	True				
ANR	730122	CallExpression	IS_NCCLASS_NOT ( NCCLASS ( node ) )		729816	0					
ANR	730123	Callee	IS_NCCLASS_NOT		729816	0					
ANR	730124	Identifier	IS_NCCLASS_NOT		729816	0					
ANR	730125	ArgumentList	NCCLASS ( node )		729816	1					
ANR	730126	Argument	NCCLASS ( node )		729816	0					
ANR	730127	CallExpression	NCCLASS ( node )		729816	0					
ANR	730128	Callee	NCCLASS		729816	0					
ANR	730129	Identifier	NCCLASS		729816	0					
ANR	730130	ArgumentList	node		729816	1					
ANR	730131	Argument	node		729816	0					
ANR	730132	Identifier	node		729816	0					
ANR	730133	ExpressionStatement	"fputs ( "" not"" , f )"	6127:39:141328:141344	729816	1	True				
ANR	730134	CallExpression	"fputs ( "" not"" , f )"		729816	0					
ANR	730135	Callee	fputs		729816	0					
ANR	730136	Identifier	fputs		729816	0					
ANR	730137	ArgumentList	""" not"""		729816	1					
ANR	730138	Argument	""" not"""		729816	0					
ANR	730139	PrimaryExpression	""" not"""		729816	0					
ANR	730140	Argument	f		729816	1					
ANR	730141	Identifier	f		729816	0					
ANR	730142	IfStatement	if ( NCCLASS ( node ) -> mbuf )		729816	13					
ANR	730143	Condition	NCCLASS ( node ) -> mbuf	6128:8:141354:141372	729816	0	True				
ANR	730144	PtrMemberAccess	NCCLASS ( node ) -> mbuf		729816	0					
ANR	730145	CallExpression	NCCLASS ( node )		729816	0					
ANR	730146	Callee	NCCLASS		729816	0					
ANR	730147	Identifier	NCCLASS		729816	0					
ANR	730148	ArgumentList	node		729816	1					
ANR	730149	Argument	node		729816	0					
ANR	730150	Identifier	node		729816	0					
ANR	730151	Identifier	mbuf		729816	1					
ANR	730152	CompoundStatement		47:6:1072:1104	729816	1					
ANR	730153	IdentifierDeclStatement	BBuf * bbuf = NCCLASS ( node ) -> mbuf ;	6129:6:141383:141415	729816	0	True				
ANR	730154	IdentifierDecl	* bbuf = NCCLASS ( node ) -> mbuf		729816	0					
ANR	730155	IdentifierDeclType	BBuf *		729816	0					
ANR	730156	Identifier	bbuf		729816	1					
ANR	730157	AssignmentExpression	* bbuf = NCCLASS ( node ) -> mbuf		729816	2		=			
ANR	730158	Identifier	bbuf		729816	0					
ANR	730159	PtrMemberAccess	NCCLASS ( node ) -> mbuf		729816	1					
ANR	730160	CallExpression	NCCLASS ( node )		729816	0					
ANR	730161	Callee	NCCLASS		729816	0					
ANR	730162	Identifier	NCCLASS		729816	0					
ANR	730163	ArgumentList	node		729816	1					
ANR	730164	Argument	node		729816	0					
ANR	730165	Identifier	node		729816	0					
ANR	730166	Identifier	mbuf		729816	1					
ANR	730167	ForStatement	for ( i = 0 ; i < bbuf -> used ; i ++ )		729816	1					
ANR	730168	ForInit	i = 0 ;	6130:11:141428:141433	729816	0	True				
ANR	730169	AssignmentExpression	i = 0		729816	0		=			
ANR	730170	Identifier	i		729816	0					
ANR	730171	PrimaryExpression	0		729816	1					
ANR	730172	Condition	i < bbuf -> used	6130:18:141435:141448	729816	1	True				
ANR	730173	RelationalExpression	i < bbuf -> used		729816	0		<			
ANR	730174	Identifier	i		729816	0					
ANR	730175	PtrMemberAccess	bbuf -> used		729816	1					
ANR	730176	Identifier	bbuf		729816	0					
ANR	730177	Identifier	used		729816	1					
ANR	730178	PostIncDecOperationExpression	i ++	6130:34:141451:141453	729816	2	True				
ANR	730179	Identifier	i		729816	0					
ANR	730180	IncDec	++		729816	1					
ANR	730181	CompoundStatement		48:39:1145:1145	729816	3					
ANR	730182	IfStatement	if ( i > 0 )		729816	0					
ANR	730183	Condition	i > 0	6131:5:141463:141467	729816	0	True				
ANR	730184	RelationalExpression	i > 0		729816	0		>			
ANR	730185	Identifier	i		729816	0					
ANR	730186	PrimaryExpression	0		729816	1					
ANR	730187	ExpressionStatement	"fprintf ( f , "","" )"	6131:12:141470:141485	729816	1	True				
ANR	730188	CallExpression	"fprintf ( f , "","" )"		729816	0					
ANR	730189	Callee	fprintf		729816	0					
ANR	730190	Identifier	fprintf		729816	0					
ANR	730191	ArgumentList	f		729816	1					
ANR	730192	Argument	f		729816	0					
ANR	730193	Identifier	f		729816	0					
ANR	730194	Argument	""","""		729816	1					
ANR	730195	PrimaryExpression	""","""		729816	0					
ANR	730196	ExpressionStatement	"fprintf ( f , ""%0x"" , bbuf -> p [ i ] )"	6132:1:141488:141517	729816	1	True				
ANR	730197	CallExpression	"fprintf ( f , ""%0x"" , bbuf -> p [ i ] )"		729816	0					
ANR	730198	Callee	fprintf		729816	0					
ANR	730199	Identifier	fprintf		729816	0					
ANR	730200	ArgumentList	f		729816	1					
ANR	730201	Argument	f		729816	0					
ANR	730202	Identifier	f		729816	0					
ANR	730203	Argument	"""%0x"""		729816	1					
ANR	730204	PrimaryExpression	"""%0x"""		729816	0					
ANR	730205	Argument	bbuf -> p [ i ]		729816	2					
ANR	730206	ArrayIndexing	bbuf -> p [ i ]		729816	0					
ANR	730207	PtrMemberAccess	bbuf -> p		729816	0					
ANR	730208	Identifier	bbuf		729816	0					
ANR	730209	Identifier	p		729816	1					
ANR	730210	Identifier	i		729816	1					
ANR	730211	BreakStatement	break ;	6135:4:141537:141542	729816	14	True				
ANR	730212	Label	case NT_CTYPE :	6137:2:141547:141560	729816	15	True				
ANR	730213	Identifier	NT_CTYPE		729816	0					
ANR	730214	ExpressionStatement	"fprintf ( f , ""<ctype:%x> "" , ( int ) node )"	6138:4:141566:141603	729816	16	True				
ANR	730215	CallExpression	"fprintf ( f , ""<ctype:%x> "" , ( int ) node )"		729816	0					
ANR	730216	Callee	fprintf		729816	0					
ANR	730217	Identifier	fprintf		729816	0					
ANR	730218	ArgumentList	f		729816	1					
ANR	730219	Argument	f		729816	0					
ANR	730220	Identifier	f		729816	0					
ANR	730221	Argument	"""<ctype:%x> """		729816	1					
ANR	730222	PrimaryExpression	"""<ctype:%x> """		729816	0					
ANR	730223	Argument	( int ) node		729816	2					
ANR	730224	CastExpression	( int ) node		729816	0					
ANR	730225	CastTarget	int		729816	0					
ANR	730226	Identifier	node		729816	1					
ANR	730227	SwitchStatement	switch ( NCTYPE ( node ) -> ctype )		729816	17					
ANR	730228	Condition	NCTYPE ( node ) -> ctype	6139:12:141617:141635	729816	0	True				
ANR	730229	PtrMemberAccess	NCTYPE ( node ) -> ctype		729816	0					
ANR	730230	CallExpression	NCTYPE ( node )		729816	0					
ANR	730231	Callee	NCTYPE		729816	0					
ANR	730232	Identifier	NCTYPE		729816	0					
ANR	730233	ArgumentList	node		729816	1					
ANR	730234	Argument	node		729816	0					
ANR	730235	Identifier	node		729816	0					
ANR	730236	Identifier	ctype		729816	1					
ANR	730237	CompoundStatement		57:33:1327:1327	729816	1					
ANR	730238	Label	case ONIGENC_CTYPE_WORD :	6140:4:141644:141667	729816	0	True				
ANR	730239	Identifier	ONIGENC_CTYPE_WORD		729816	0					
ANR	730240	IfStatement	if ( NCTYPE ( node ) -> not != 0 )		729816	1					
ANR	730241	Condition	NCTYPE ( node ) -> not != 0	6141:10:141679:141700	729816	0	True				
ANR	730242	EqualityExpression	NCTYPE ( node ) -> not != 0		729816	0		!=			
ANR	730243	PtrMemberAccess	NCTYPE ( node ) -> not		729816	0					
ANR	730244	CallExpression	NCTYPE ( node )		729816	0					
ANR	730245	Callee	NCTYPE		729816	0					
ANR	730246	Identifier	NCTYPE		729816	0					
ANR	730247	ArgumentList	node		729816	1					
ANR	730248	Argument	node		729816	0					
ANR	730249	Identifier	node		729816	0					
ANR	730250	Identifier	not		729816	1					
ANR	730251	PrimaryExpression	0		729816	1					
ANR	730252	ExpressionStatement	"fputs ( ""not word"" , f )"	6142:1:141704:141730	729816	1	True				
ANR	730253	CallExpression	"fputs ( ""not word"" , f )"		729816	0					
ANR	730254	Callee	fputs		729816	0					
ANR	730255	Identifier	fputs		729816	0					
ANR	730256	ArgumentList	"""not word"""		729816	1					
ANR	730257	Argument	"""not word"""		729816	0					
ANR	730258	PrimaryExpression	"""not word"""		729816	0					
ANR	730259	Argument	f		729816	1					
ANR	730260	Identifier	f		729816	0					
ANR	730261	ElseStatement	else		729816	0					
ANR	730262	ExpressionStatement	"fputs ( ""word"" , f )"	6144:1:141744:141770	729816	0	True				
ANR	730263	CallExpression	"fputs ( ""word"" , f )"		729816	0					
ANR	730264	Callee	fputs		729816	0					
ANR	730265	Identifier	fputs		729816	0					
ANR	730266	ArgumentList	"""word"""		729816	1					
ANR	730267	Argument	"""word"""		729816	0					
ANR	730268	PrimaryExpression	"""word"""		729816	0					
ANR	730269	Argument	f		729816	1					
ANR	730270	Identifier	f		729816	0					
ANR	730271	BreakStatement	break ;	6145:6:141778:141783	729816	2	True				
ANR	730272	Label	default :	6147:4:141790:141797	729816	3	True				
ANR	730273	Identifier	default		729816	0					
ANR	730274	ExpressionStatement	"fprintf ( f , ""ERROR: undefined ctype.\\n"" )"	6148:6:141805:141844	729816	4	True				
ANR	730275	CallExpression	"fprintf ( f , ""ERROR: undefined ctype.\\n"" )"		729816	0					
ANR	730276	Callee	fprintf		729816	0					
ANR	730277	Identifier	fprintf		729816	0					
ANR	730278	ArgumentList	f		729816	1					
ANR	730279	Argument	f		729816	0					
ANR	730280	Identifier	f		729816	0					
ANR	730281	Argument	"""ERROR: undefined ctype.\\n"""		729816	1					
ANR	730282	PrimaryExpression	"""ERROR: undefined ctype.\\n"""		729816	0					
ANR	730283	ExpressionStatement	exit ( 0 )	6149:6:141852:141859	729816	5	True				
ANR	730284	CallExpression	exit ( 0 )		729816	0					
ANR	730285	Callee	exit		729816	0					
ANR	730286	Identifier	exit		729816	0					
ANR	730287	ArgumentList	0		729816	1					
ANR	730288	Argument	0		729816	0					
ANR	730289	PrimaryExpression	0		729816	0					
ANR	730290	BreakStatement	break ;	6151:4:141871:141876	729816	18	True				
ANR	730291	Label	case NT_CANY :	6153:2:141881:141893	729816	19	True				
ANR	730292	Identifier	NT_CANY		729816	0					
ANR	730293	ExpressionStatement	"fprintf ( f , ""<anychar:%x>"" , ( int ) node )"	6154:4:141899:141937	729816	20	True				
ANR	730294	CallExpression	"fprintf ( f , ""<anychar:%x>"" , ( int ) node )"		729816	0					
ANR	730295	Callee	fprintf		729816	0					
ANR	730296	Identifier	fprintf		729816	0					
ANR	730297	ArgumentList	f		729816	1					
ANR	730298	Argument	f		729816	0					
ANR	730299	Identifier	f		729816	0					
ANR	730300	Argument	"""<anychar:%x>"""		729816	1					
ANR	730301	PrimaryExpression	"""<anychar:%x>"""		729816	0					
ANR	730302	Argument	( int ) node		729816	2					
ANR	730303	CastExpression	( int ) node		729816	0					
ANR	730304	CastTarget	int		729816	0					
ANR	730305	Identifier	node		729816	1					
ANR	730306	BreakStatement	break ;	6155:4:141943:141948	729816	21	True				
ANR	730307	Label	case NT_ANCHOR :	6157:2:141953:141967	729816	22	True				
ANR	730308	Identifier	NT_ANCHOR		729816	0					
ANR	730309	ExpressionStatement	"fprintf ( f , ""<anchor:%x> "" , ( int ) node )"	6158:4:141973:142011	729816	23	True				
ANR	730310	CallExpression	"fprintf ( f , ""<anchor:%x> "" , ( int ) node )"		729816	0					
ANR	730311	Callee	fprintf		729816	0					
ANR	730312	Identifier	fprintf		729816	0					
ANR	730313	ArgumentList	f		729816	1					
ANR	730314	Argument	f		729816	0					
ANR	730315	Identifier	f		729816	0					
ANR	730316	Argument	"""<anchor:%x> """		729816	1					
ANR	730317	PrimaryExpression	"""<anchor:%x> """		729816	0					
ANR	730318	Argument	( int ) node		729816	2					
ANR	730319	CastExpression	( int ) node		729816	0					
ANR	730320	CastTarget	int		729816	0					
ANR	730321	Identifier	node		729816	1					
ANR	730322	SwitchStatement	switch ( NANCHOR ( node ) -> type )		729816	24					
ANR	730323	Condition	NANCHOR ( node ) -> type	6159:12:142025:142043	729816	0	True				
ANR	730324	PtrMemberAccess	NANCHOR ( node ) -> type		729816	0					
ANR	730325	CallExpression	NANCHOR ( node )		729816	0					
ANR	730326	Callee	NANCHOR		729816	0					
ANR	730327	Identifier	NANCHOR		729816	0					
ANR	730328	ArgumentList	node		729816	1					
ANR	730329	Argument	node		729816	0					
ANR	730330	Identifier	node		729816	0					
ANR	730331	Identifier	type		729816	1					
ANR	730332	CompoundStatement		77:33:1735:1735	729816	1					
ANR	730333	Label	case ANCHOR_BEGIN_BUF :	6160:4:142052:142073	729816	0	True				
ANR	730334	Identifier	ANCHOR_BEGIN_BUF		729816	0					
ANR	730335	ExpressionStatement	"fputs ( ""begin buf"" , f )"	6160:32:142080:142106	729816	1	True				
ANR	730336	CallExpression	"fputs ( ""begin buf"" , f )"		729816	0					
ANR	730337	Callee	fputs		729816	0					
ANR	730338	Identifier	fputs		729816	0					
ANR	730339	ArgumentList	"""begin buf"""		729816	1					
ANR	730340	Argument	"""begin buf"""		729816	0					
ANR	730341	PrimaryExpression	"""begin buf"""		729816	0					
ANR	730342	Argument	f		729816	1					
ANR	730343	Identifier	f		729816	0					
ANR	730344	BreakStatement	break ;	6160:60:142108:142113	729816	2	True				
ANR	730345	Label	case ANCHOR_END_BUF :	6161:4:142119:142138	729816	3	True				
ANR	730346	Identifier	ANCHOR_END_BUF		729816	0					
ANR	730347	ExpressionStatement	"fputs ( ""end buf"" , f )"	6161:32:142147:142173	729816	4	True				
ANR	730348	CallExpression	"fputs ( ""end buf"" , f )"		729816	0					
ANR	730349	Callee	fputs		729816	0					
ANR	730350	Identifier	fputs		729816	0					
ANR	730351	ArgumentList	"""end buf"""		729816	1					
ANR	730352	Argument	"""end buf"""		729816	0					
ANR	730353	PrimaryExpression	"""end buf"""		729816	0					
ANR	730354	Argument	f		729816	1					
ANR	730355	Identifier	f		729816	0					
ANR	730356	BreakStatement	break ;	6161:60:142175:142180	729816	5	True				
ANR	730357	Label	case ANCHOR_BEGIN_LINE :	6162:4:142186:142208	729816	6	True				
ANR	730358	Identifier	ANCHOR_BEGIN_LINE		729816	0					
ANR	730359	ExpressionStatement	"fputs ( ""begin line"" , f )"	6162:32:142214:142240	729816	7	True				
ANR	730360	CallExpression	"fputs ( ""begin line"" , f )"		729816	0					
ANR	730361	Callee	fputs		729816	0					
ANR	730362	Identifier	fputs		729816	0					
ANR	730363	ArgumentList	"""begin line"""		729816	1					
ANR	730364	Argument	"""begin line"""		729816	0					
ANR	730365	PrimaryExpression	"""begin line"""		729816	0					
ANR	730366	Argument	f		729816	1					
ANR	730367	Identifier	f		729816	0					
ANR	730368	BreakStatement	break ;	6162:60:142242:142247	729816	8	True				
ANR	730369	Label	case ANCHOR_END_LINE :	6163:4:142253:142273	729816	9	True				
ANR	730370	Identifier	ANCHOR_END_LINE		729816	0					
ANR	730371	ExpressionStatement	"fputs ( ""end line"" , f )"	6163:32:142281:142307	729816	10	True				
ANR	730372	CallExpression	"fputs ( ""end line"" , f )"		729816	0					
ANR	730373	Callee	fputs		729816	0					
ANR	730374	Identifier	fputs		729816	0					
ANR	730375	ArgumentList	"""end line"""		729816	1					
ANR	730376	Argument	"""end line"""		729816	0					
ANR	730377	PrimaryExpression	"""end line"""		729816	0					
ANR	730378	Argument	f		729816	1					
ANR	730379	Identifier	f		729816	0					
ANR	730380	BreakStatement	break ;	6163:60:142309:142314	729816	11	True				
ANR	730381	Label	case ANCHOR_SEMI_END_BUF :	6164:4:142320:142344	729816	12	True				
ANR	730382	Identifier	ANCHOR_SEMI_END_BUF		729816	0					
ANR	730383	ExpressionStatement	"fputs ( ""semi end buf"" , f )"	6164:32:142348:142374	729816	13	True				
ANR	730384	CallExpression	"fputs ( ""semi end buf"" , f )"		729816	0					
ANR	730385	Callee	fputs		729816	0					
ANR	730386	Identifier	fputs		729816	0					
ANR	730387	ArgumentList	"""semi end buf"""		729816	1					
ANR	730388	Argument	"""semi end buf"""		729816	0					
ANR	730389	PrimaryExpression	"""semi end buf"""		729816	0					
ANR	730390	Argument	f		729816	1					
ANR	730391	Identifier	f		729816	0					
ANR	730392	BreakStatement	break ;	6164:60:142376:142381	729816	14	True				
ANR	730393	Label	case ANCHOR_BEGIN_POSITION :	6165:4:142387:142413	729816	15	True				
ANR	730394	Identifier	ANCHOR_BEGIN_POSITION		729816	0					
ANR	730395	ExpressionStatement	"fputs ( ""begin position"" , f )"	6165:32:142415:142441	729816	16	True				
ANR	730396	CallExpression	"fputs ( ""begin position"" , f )"		729816	0					
ANR	730397	Callee	fputs		729816	0					
ANR	730398	Identifier	fputs		729816	0					
ANR	730399	ArgumentList	"""begin position"""		729816	1					
ANR	730400	Argument	"""begin position"""		729816	0					
ANR	730401	PrimaryExpression	"""begin position"""		729816	0					
ANR	730402	Argument	f		729816	1					
ANR	730403	Identifier	f		729816	0					
ANR	730404	BreakStatement	break ;	6165:60:142443:142448	729816	17	True				
ANR	730405	Label	case ANCHOR_WORD_BOUND :	6167:4:142455:142477	729816	18	True				
ANR	730406	Identifier	ANCHOR_WORD_BOUND		729816	0					
ANR	730407	ExpressionStatement	"fputs ( ""word bound"" , f )"	6167:33:142484:142510	729816	19	True				
ANR	730408	CallExpression	"fputs ( ""word bound"" , f )"		729816	0					
ANR	730409	Callee	fputs		729816	0					
ANR	730410	Identifier	fputs		729816	0					
ANR	730411	ArgumentList	"""word bound"""		729816	1					
ANR	730412	Argument	"""word bound"""		729816	0					
ANR	730413	PrimaryExpression	"""word bound"""		729816	0					
ANR	730414	Argument	f		729816	1					
ANR	730415	Identifier	f		729816	0					
ANR	730416	BreakStatement	break ;	6167:61:142512:142517	729816	20	True				
ANR	730417	Label	case ANCHOR_NOT_WORD_BOUND :	6168:4:142523:142549	729816	21	True				
ANR	730418	Identifier	ANCHOR_NOT_WORD_BOUND		729816	0					
ANR	730419	ExpressionStatement	"fputs ( ""not word bound"" , f )"	6168:33:142552:142578	729816	22	True				
ANR	730420	CallExpression	"fputs ( ""not word bound"" , f )"		729816	0					
ANR	730421	Callee	fputs		729816	0					
ANR	730422	Identifier	fputs		729816	0					
ANR	730423	ArgumentList	"""not word bound"""		729816	1					
ANR	730424	Argument	"""not word bound"""		729816	0					
ANR	730425	PrimaryExpression	"""not word bound"""		729816	0					
ANR	730426	Argument	f		729816	1					
ANR	730427	Identifier	f		729816	0					
ANR	730428	BreakStatement	break ;	6168:61:142580:142585	729816	23	True				
ANR	730429	Label	case ANCHOR_WORD_BEGIN :	6170:4:142617:142639	729816	24	True				
ANR	730430	Identifier	ANCHOR_WORD_BEGIN		729816	0					
ANR	730431	ExpressionStatement	"fputs ( ""word begin"" , f )"	6170:33:142646:142668	729816	25	True				
ANR	730432	CallExpression	"fputs ( ""word begin"" , f )"		729816	0					
ANR	730433	Callee	fputs		729816	0					
ANR	730434	Identifier	fputs		729816	0					
ANR	730435	ArgumentList	"""word begin"""		729816	1					
ANR	730436	Argument	"""word begin"""		729816	0					
ANR	730437	PrimaryExpression	"""word begin"""		729816	0					
ANR	730438	Argument	f		729816	1					
ANR	730439	Identifier	f		729816	0					
ANR	730440	BreakStatement	break ;	6170:61:142674:142679	729816	26	True				
ANR	730441	Label	case ANCHOR_WORD_END :	6171:4:142685:142705	729816	27	True				
ANR	730442	Identifier	ANCHOR_WORD_END		729816	0					
ANR	730443	ExpressionStatement	"fputs ( ""word end"" , f )"	6171:33:142714:142734	729816	28	True				
ANR	730444	CallExpression	"fputs ( ""word end"" , f )"		729816	0					
ANR	730445	Callee	fputs		729816	0					
ANR	730446	Identifier	fputs		729816	0					
ANR	730447	ArgumentList	"""word end"""		729816	1					
ANR	730448	Argument	"""word end"""		729816	0					
ANR	730449	PrimaryExpression	"""word end"""		729816	0					
ANR	730450	Argument	f		729816	1					
ANR	730451	Identifier	f		729816	0					
ANR	730452	BreakStatement	break ;	6171:61:142742:142747	729816	29	True				
ANR	730453	Label	case ANCHOR_PREC_READ :	6173:4:142760:142781	729816	30	True				
ANR	730454	Identifier	ANCHOR_PREC_READ		729816	0					
ANR	730455	ExpressionStatement	"fputs ( ""prec read"" , f )"	6173:33:142789:142815	729816	31	True				
ANR	730456	CallExpression	"fputs ( ""prec read"" , f )"		729816	0					
ANR	730457	Callee	fputs		729816	0					
ANR	730458	Identifier	fputs		729816	0					
ANR	730459	ArgumentList	"""prec read"""		729816	1					
ANR	730460	Argument	"""prec read"""		729816	0					
ANR	730461	PrimaryExpression	"""prec read"""		729816	0					
ANR	730462	Argument	f		729816	1					
ANR	730463	Identifier	f		729816	0					
ANR	730464	BreakStatement	break ;	6173:61:142817:142822	729816	32	True				
ANR	730465	Label	case ANCHOR_PREC_READ_NOT :	6174:4:142828:142853	729816	33	True				
ANR	730466	Identifier	ANCHOR_PREC_READ_NOT		729816	0					
ANR	730467	ExpressionStatement	"fputs ( ""prec read not"" , f )"	6174:33:142857:142883	729816	34	True				
ANR	730468	CallExpression	"fputs ( ""prec read not"" , f )"		729816	0					
ANR	730469	Callee	fputs		729816	0					
ANR	730470	Identifier	fputs		729816	0					
ANR	730471	ArgumentList	"""prec read not"""		729816	1					
ANR	730472	Argument	"""prec read not"""		729816	0					
ANR	730473	PrimaryExpression	"""prec read not"""		729816	0					
ANR	730474	Argument	f		729816	1					
ANR	730475	Identifier	f		729816	0					
ANR	730476	BreakStatement	break ;	6174:61:142885:142890	729816	35	True				
ANR	730477	Label	case ANCHOR_LOOK_BEHIND :	6175:4:142896:142919	729816	36	True				
ANR	730478	Identifier	ANCHOR_LOOK_BEHIND		729816	0					
ANR	730479	ExpressionStatement	"fputs ( ""look_behind"" , f )"	6175:33:142925:142951	729816	37	True				
ANR	730480	CallExpression	"fputs ( ""look_behind"" , f )"		729816	0					
ANR	730481	Callee	fputs		729816	0					
ANR	730482	Identifier	fputs		729816	0					
ANR	730483	ArgumentList	"""look_behind"""		729816	1					
ANR	730484	Argument	"""look_behind"""		729816	0					
ANR	730485	PrimaryExpression	"""look_behind"""		729816	0					
ANR	730486	Argument	f		729816	1					
ANR	730487	Identifier	f		729816	0					
ANR	730488	BreakStatement	break ;	6175:61:142953:142958	729816	38	True				
ANR	730489	Label	case ANCHOR_LOOK_BEHIND_NOT :	6176:4:142964:142991	729816	39	True				
ANR	730490	Identifier	ANCHOR_LOOK_BEHIND_NOT		729816	0					
ANR	730491	ExpressionStatement	"fputs ( ""look_behind_not"" , f )"	6176:33:142993:143019	729816	40	True				
ANR	730492	CallExpression	"fputs ( ""look_behind_not"" , f )"		729816	0					
ANR	730493	Callee	fputs		729816	0					
ANR	730494	Identifier	fputs		729816	0					
ANR	730495	ArgumentList	"""look_behind_not"""		729816	1					
ANR	730496	Argument	"""look_behind_not"""		729816	0					
ANR	730497	PrimaryExpression	"""look_behind_not"""		729816	0					
ANR	730498	Argument	f		729816	1					
ANR	730499	Identifier	f		729816	0					
ANR	730500	BreakStatement	break ;	6176:61:143021:143026	729816	41	True				
ANR	730501	Label	default :	6178:4:143033:143040	729816	42	True				
ANR	730502	Identifier	default		729816	0					
ANR	730503	ExpressionStatement	"fprintf ( f , ""ERROR: undefined anchor type.\\n"" )"	6179:6:143048:143093	729816	43	True				
ANR	730504	CallExpression	"fprintf ( f , ""ERROR: undefined anchor type.\\n"" )"		729816	0					
ANR	730505	Callee	fprintf		729816	0					
ANR	730506	Identifier	fprintf		729816	0					
ANR	730507	ArgumentList	f		729816	1					
ANR	730508	Argument	f		729816	0					
ANR	730509	Identifier	f		729816	0					
ANR	730510	Argument	"""ERROR: undefined anchor type.\\n"""		729816	1					
ANR	730511	PrimaryExpression	"""ERROR: undefined anchor type.\\n"""		729816	0					
ANR	730512	BreakStatement	break ;	6180:6:143101:143106	729816	44	True				
ANR	730513	BreakStatement	break ;	6182:4:143118:143123	729816	25	True				
ANR	730514	Label	case NT_BREF :	6184:2:143128:143140	729816	26	True				
ANR	730515	Identifier	NT_BREF		729816	0					
ANR	730516	CompoundStatement		105:6:2857:2883	729816	27					
ANR	730517	IdentifierDeclStatement	int * p ;	6186:6:143154:143160	729816	0	True				
ANR	730518	IdentifierDecl	* p		729816	0					
ANR	730519	IdentifierDeclType	int *		729816	0					
ANR	730520	Identifier	p		729816	1					
ANR	730521	IdentifierDeclStatement	BRefNode * br = NBREF ( node ) ;	6187:6:143168:143194	729816	1	True				
ANR	730522	IdentifierDecl	* br = NBREF ( node )		729816	0					
ANR	730523	IdentifierDeclType	BRefNode *		729816	0					
ANR	730524	Identifier	br		729816	1					
ANR	730525	AssignmentExpression	* br = NBREF ( node )		729816	2		=			
ANR	730526	Identifier	br		729816	0					
ANR	730527	CallExpression	NBREF ( node )		729816	1					
ANR	730528	Callee	NBREF		729816	0					
ANR	730529	Identifier	NBREF		729816	0					
ANR	730530	ArgumentList	node		729816	1					
ANR	730531	Argument	node		729816	0					
ANR	730532	Identifier	node		729816	0					
ANR	730533	ExpressionStatement	p = BACKREFS_P ( br )	6188:6:143202:143220	729816	2	True				
ANR	730534	AssignmentExpression	p = BACKREFS_P ( br )		729816	0		=			
ANR	730535	Identifier	p		729816	0					
ANR	730536	CallExpression	BACKREFS_P ( br )		729816	1					
ANR	730537	Callee	BACKREFS_P		729816	0					
ANR	730538	Identifier	BACKREFS_P		729816	0					
ANR	730539	ArgumentList	br		729816	1					
ANR	730540	Argument	br		729816	0					
ANR	730541	Identifier	br		729816	0					
ANR	730542	ExpressionStatement	"fprintf ( f , ""<backref:%x>"" , ( int ) node )"	6189:6:143228:143266	729816	3	True				
ANR	730543	CallExpression	"fprintf ( f , ""<backref:%x>"" , ( int ) node )"		729816	0					
ANR	730544	Callee	fprintf		729816	0					
ANR	730545	Identifier	fprintf		729816	0					
ANR	730546	ArgumentList	f		729816	1					
ANR	730547	Argument	f		729816	0					
ANR	730548	Identifier	f		729816	0					
ANR	730549	Argument	"""<backref:%x>"""		729816	1					
ANR	730550	PrimaryExpression	"""<backref:%x>"""		729816	0					
ANR	730551	Argument	( int ) node		729816	2					
ANR	730552	CastExpression	( int ) node		729816	0					
ANR	730553	CastTarget	int		729816	0					
ANR	730554	Identifier	node		729816	1					
ANR	730555	ForStatement	for ( i = 0 ; i < br -> back_num ; i ++ )		729816	4					
ANR	730556	ForInit	i = 0 ;	6190:11:143279:143284	729816	0	True				
ANR	730557	AssignmentExpression	i = 0		729816	0		=			
ANR	730558	Identifier	i		729816	0					
ANR	730559	PrimaryExpression	0		729816	1					
ANR	730560	Condition	i < br -> back_num	6190:18:143286:143301	729816	1	True				
ANR	730561	RelationalExpression	i < br -> back_num		729816	0		<			
ANR	730562	Identifier	i		729816	0					
ANR	730563	PtrMemberAccess	br -> back_num		729816	1					
ANR	730564	Identifier	br		729816	0					
ANR	730565	Identifier	back_num		729816	1					
ANR	730566	PostIncDecOperationExpression	i ++	6190:36:143304:143306	729816	2	True				
ANR	730567	Identifier	i		729816	0					
ANR	730568	IncDec	++		729816	1					
ANR	730569	CompoundStatement		108:41:2998:2998	729816	3					
ANR	730570	IfStatement	if ( i > 0 )		729816	0					
ANR	730571	Condition	i > 0	6191:5:143316:143320	729816	0	True				
ANR	730572	RelationalExpression	i > 0		729816	0		>			
ANR	730573	Identifier	i		729816	0					
ANR	730574	PrimaryExpression	0		729816	1					
ANR	730575	ExpressionStatement	"fputs ( "", "" , f )"	6191:12:143323:143337	729816	1	True				
ANR	730576	CallExpression	"fputs ( "", "" , f )"		729816	0					
ANR	730577	Callee	fputs		729816	0					
ANR	730578	Identifier	fputs		729816	0					
ANR	730579	ArgumentList	""", """		729816	1					
ANR	730580	Argument	""", """		729816	0					
ANR	730581	PrimaryExpression	""", """		729816	0					
ANR	730582	Argument	f		729816	1					
ANR	730583	Identifier	f		729816	0					
ANR	730584	ExpressionStatement	"fprintf ( f , ""%d"" , p [ i ] )"	6192:1:143340:143362	729816	1	True				
ANR	730585	CallExpression	"fprintf ( f , ""%d"" , p [ i ] )"		729816	0					
ANR	730586	Callee	fprintf		729816	0					
ANR	730587	Identifier	fprintf		729816	0					
ANR	730588	ArgumentList	f		729816	1					
ANR	730589	Argument	f		729816	0					
ANR	730590	Identifier	f		729816	0					
ANR	730591	Argument	"""%d"""		729816	1					
ANR	730592	PrimaryExpression	"""%d"""		729816	0					
ANR	730593	Argument	p [ i ]		729816	2					
ANR	730594	ArrayIndexing	p [ i ]		729816	0					
ANR	730595	Identifier	p		729816	0					
ANR	730596	Identifier	i		729816	1					
ANR	730597	BreakStatement	break ;	6195:4:143382:143387	729816	28	True				
ANR	730598	Label	case NT_CALL :	6198:2:143415:143427	729816	29	True				
ANR	730599	Identifier	NT_CALL		729816	0					
ANR	730600	CompoundStatement		118:6:3130:3156	729816	30					
ANR	730601	IdentifierDeclStatement	CallNode * cn = NCALL ( node ) ;	6200:6:143441:143467	729816	0	True				
ANR	730602	IdentifierDecl	* cn = NCALL ( node )		729816	0					
ANR	730603	IdentifierDeclType	CallNode *		729816	0					
ANR	730604	Identifier	cn		729816	1					
ANR	730605	AssignmentExpression	* cn = NCALL ( node )		729816	2		=			
ANR	730606	Identifier	cn		729816	0					
ANR	730607	CallExpression	NCALL ( node )		729816	1					
ANR	730608	Callee	NCALL		729816	0					
ANR	730609	Identifier	NCALL		729816	0					
ANR	730610	ArgumentList	node		729816	1					
ANR	730611	Argument	node		729816	0					
ANR	730612	Identifier	node		729816	0					
ANR	730613	ExpressionStatement	"fprintf ( f , ""<call:%x>"" , ( int ) node )"	6201:6:143475:143510	729816	1	True				
ANR	730614	CallExpression	"fprintf ( f , ""<call:%x>"" , ( int ) node )"		729816	0					
ANR	730615	Callee	fprintf		729816	0					
ANR	730616	Identifier	fprintf		729816	0					
ANR	730617	ArgumentList	f		729816	1					
ANR	730618	Argument	f		729816	0					
ANR	730619	Identifier	f		729816	0					
ANR	730620	Argument	"""<call:%x>"""		729816	1					
ANR	730621	PrimaryExpression	"""<call:%x>"""		729816	0					
ANR	730622	Argument	( int ) node		729816	2					
ANR	730623	CastExpression	( int ) node		729816	0					
ANR	730624	CastTarget	int		729816	0					
ANR	730625	Identifier	node		729816	1					
ANR	730626	ExpressionStatement	"p_string ( f , cn -> name_end - cn -> name , cn -> name )"	6202:6:143518:143564	729816	2	True				
ANR	730627	CallExpression	"p_string ( f , cn -> name_end - cn -> name , cn -> name )"		729816	0					
ANR	730628	Callee	p_string		729816	0					
ANR	730629	Identifier	p_string		729816	0					
ANR	730630	ArgumentList	f		729816	1					
ANR	730631	Argument	f		729816	0					
ANR	730632	Identifier	f		729816	0					
ANR	730633	Argument	cn -> name_end - cn -> name		729816	1					
ANR	730634	AdditiveExpression	cn -> name_end - cn -> name		729816	0		-			
ANR	730635	PtrMemberAccess	cn -> name_end		729816	0					
ANR	730636	Identifier	cn		729816	0					
ANR	730637	Identifier	name_end		729816	1					
ANR	730638	PtrMemberAccess	cn -> name		729816	1					
ANR	730639	Identifier	cn		729816	0					
ANR	730640	Identifier	name		729816	1					
ANR	730641	Argument	cn -> name		729816	2					
ANR	730642	PtrMemberAccess	cn -> name		729816	0					
ANR	730643	Identifier	cn		729816	0					
ANR	730644	Identifier	name		729816	1					
ANR	730645	BreakStatement	break ;	6204:4:143576:143581	729816	31	True				
ANR	730646	Label	case NT_QTFR :	6207:2:143593:143605	729816	32	True				
ANR	730647	Identifier	NT_QTFR		729816	0					
ANR	730648	ExpressionStatement	"fprintf ( f , ""<quantifier:%x>{%d,%d}%s\\n"" , ( int ) node , NQTFR ( node ) -> lower , NQTFR ( node ) -> upper , ( NQTFR ( node ) -> greedy ? """" : ""?"" ) )"	6208:4:143611:143747	729816	33	True				
ANR	730649	CallExpression	"fprintf ( f , ""<quantifier:%x>{%d,%d}%s\\n"" , ( int ) node , NQTFR ( node ) -> lower , NQTFR ( node ) -> upper , ( NQTFR ( node ) -> greedy ? """" : ""?"" ) )"		729816	0					
ANR	730650	Callee	fprintf		729816	0					
ANR	730651	Identifier	fprintf		729816	0					
ANR	730652	ArgumentList	f		729816	1					
ANR	730653	Argument	f		729816	0					
ANR	730654	Identifier	f		729816	0					
ANR	730655	Argument	"""<quantifier:%x>{%d,%d}%s\\n"""		729816	1					
ANR	730656	PrimaryExpression	"""<quantifier:%x>{%d,%d}%s\\n"""		729816	0					
ANR	730657	Argument	( int ) node		729816	2					
ANR	730658	CastExpression	( int ) node		729816	0					
ANR	730659	CastTarget	int		729816	0					
ANR	730660	Identifier	node		729816	1					
ANR	730661	Argument	NQTFR ( node ) -> lower		729816	3					
ANR	730662	PtrMemberAccess	NQTFR ( node ) -> lower		729816	0					
ANR	730663	CallExpression	NQTFR ( node )		729816	0					
ANR	730664	Callee	NQTFR		729816	0					
ANR	730665	Identifier	NQTFR		729816	0					
ANR	730666	ArgumentList	node		729816	1					
ANR	730667	Argument	node		729816	0					
ANR	730668	Identifier	node		729816	0					
ANR	730669	Identifier	lower		729816	1					
ANR	730670	Argument	NQTFR ( node ) -> upper		729816	4					
ANR	730671	PtrMemberAccess	NQTFR ( node ) -> upper		729816	0					
ANR	730672	CallExpression	NQTFR ( node )		729816	0					
ANR	730673	Callee	NQTFR		729816	0					
ANR	730674	Identifier	NQTFR		729816	0					
ANR	730675	ArgumentList	node		729816	1					
ANR	730676	Argument	node		729816	0					
ANR	730677	Identifier	node		729816	0					
ANR	730678	Identifier	upper		729816	1					
ANR	730679	Argument	"NQTFR ( node ) -> greedy ? """" : ""?"""		729816	5					
ANR	730680	ConditionalExpression	"NQTFR ( node ) -> greedy ? """" : ""?"""		729816	0					
ANR	730681	Condition	NQTFR ( node ) -> greedy		729816	0					
ANR	730682	PtrMemberAccess	NQTFR ( node ) -> greedy		729816	0					
ANR	730683	CallExpression	NQTFR ( node )		729816	0					
ANR	730684	Callee	NQTFR		729816	0					
ANR	730685	Identifier	NQTFR		729816	0					
ANR	730686	ArgumentList	node		729816	1					
ANR	730687	Argument	node		729816	0					
ANR	730688	Identifier	node		729816	0					
ANR	730689	Identifier	greedy		729816	1					
ANR	730690	PrimaryExpression	""""""		729816	1					
ANR	730691	PrimaryExpression	"""?"""		729816	2					
ANR	730692	ExpressionStatement	"print_indent_tree ( f , NQTFR ( node ) -> target , indent + add )"	6211:4:143753:143808	729816	34	True				
ANR	730693	CallExpression	"print_indent_tree ( f , NQTFR ( node ) -> target , indent + add )"		729816	0					
ANR	730694	Callee	print_indent_tree		729816	0					
ANR	730695	Identifier	print_indent_tree		729816	0					
ANR	730696	ArgumentList	f		729816	1					
ANR	730697	Argument	f		729816	0					
ANR	730698	Identifier	f		729816	0					
ANR	730699	Argument	NQTFR ( node ) -> target		729816	1					
ANR	730700	PtrMemberAccess	NQTFR ( node ) -> target		729816	0					
ANR	730701	CallExpression	NQTFR ( node )		729816	0					
ANR	730702	Callee	NQTFR		729816	0					
ANR	730703	Identifier	NQTFR		729816	0					
ANR	730704	ArgumentList	node		729816	1					
ANR	730705	Argument	node		729816	0					
ANR	730706	Identifier	node		729816	0					
ANR	730707	Identifier	target		729816	1					
ANR	730708	Argument	indent + add		729816	2					
ANR	730709	AdditiveExpression	indent + add		729816	0		+			
ANR	730710	Identifier	indent		729816	0					
ANR	730711	Identifier	add		729816	1					
ANR	730712	BreakStatement	break ;	6212:4:143814:143819	729816	35	True				
ANR	730713	Label	case NT_ENCLOSE :	6214:2:143824:143839	729816	36	True				
ANR	730714	Identifier	NT_ENCLOSE		729816	0					
ANR	730715	ExpressionStatement	"fprintf ( f , ""<enclose:%x> "" , ( int ) node )"	6215:4:143845:143884	729816	37	True				
ANR	730716	CallExpression	"fprintf ( f , ""<enclose:%x> "" , ( int ) node )"		729816	0					
ANR	730717	Callee	fprintf		729816	0					
ANR	730718	Identifier	fprintf		729816	0					
ANR	730719	ArgumentList	f		729816	1					
ANR	730720	Argument	f		729816	0					
ANR	730721	Identifier	f		729816	0					
ANR	730722	Argument	"""<enclose:%x> """		729816	1					
ANR	730723	PrimaryExpression	"""<enclose:%x> """		729816	0					
ANR	730724	Argument	( int ) node		729816	2					
ANR	730725	CastExpression	( int ) node		729816	0					
ANR	730726	CastTarget	int		729816	0					
ANR	730727	Identifier	node		729816	1					
ANR	730728	SwitchStatement	switch ( NENCLOSE ( node ) -> type )		729816	38					
ANR	730729	Condition	NENCLOSE ( node ) -> type	6216:12:143898:143917	729816	0	True				
ANR	730730	PtrMemberAccess	NENCLOSE ( node ) -> type		729816	0					
ANR	730731	CallExpression	NENCLOSE ( node )		729816	0					
ANR	730732	Callee	NENCLOSE		729816	0					
ANR	730733	Identifier	NENCLOSE		729816	0					
ANR	730734	ArgumentList	node		729816	1					
ANR	730735	Argument	node		729816	0					
ANR	730736	Identifier	node		729816	0					
ANR	730737	Identifier	type		729816	1					
ANR	730738	CompoundStatement		134:34:3609:3609	729816	1					
ANR	730739	Label	case ENCLOSE_OPTION :	6217:4:143926:143945	729816	0	True				
ANR	730740	Identifier	ENCLOSE_OPTION		729816	0					
ANR	730741	ExpressionStatement	"fprintf ( f , ""option:%d"" , NENCLOSE ( node ) -> option )"	6218:6:143953:144000	729816	1	True				
ANR	730742	CallExpression	"fprintf ( f , ""option:%d"" , NENCLOSE ( node ) -> option )"		729816	0					
ANR	730743	Callee	fprintf		729816	0					
ANR	730744	Identifier	fprintf		729816	0					
ANR	730745	ArgumentList	f		729816	1					
ANR	730746	Argument	f		729816	0					
ANR	730747	Identifier	f		729816	0					
ANR	730748	Argument	"""option:%d"""		729816	1					
ANR	730749	PrimaryExpression	"""option:%d"""		729816	0					
ANR	730750	Argument	NENCLOSE ( node ) -> option		729816	2					
ANR	730751	PtrMemberAccess	NENCLOSE ( node ) -> option		729816	0					
ANR	730752	CallExpression	NENCLOSE ( node )		729816	0					
ANR	730753	Callee	NENCLOSE		729816	0					
ANR	730754	Identifier	NENCLOSE		729816	0					
ANR	730755	ArgumentList	node		729816	1					
ANR	730756	Argument	node		729816	0					
ANR	730757	Identifier	node		729816	0					
ANR	730758	Identifier	option		729816	1					
ANR	730759	BreakStatement	break ;	6219:6:144008:144013	729816	2	True				
ANR	730760	Label	case ENCLOSE_MEMORY :	6220:4:144019:144038	729816	3	True				
ANR	730761	Identifier	ENCLOSE_MEMORY		729816	0					
ANR	730762	ExpressionStatement	"fprintf ( f , ""memory:%d"" , NENCLOSE ( node ) -> regnum )"	6221:6:144046:144093	729816	4	True				
ANR	730763	CallExpression	"fprintf ( f , ""memory:%d"" , NENCLOSE ( node ) -> regnum )"		729816	0					
ANR	730764	Callee	fprintf		729816	0					
ANR	730765	Identifier	fprintf		729816	0					
ANR	730766	ArgumentList	f		729816	1					
ANR	730767	Argument	f		729816	0					
ANR	730768	Identifier	f		729816	0					
ANR	730769	Argument	"""memory:%d"""		729816	1					
ANR	730770	PrimaryExpression	"""memory:%d"""		729816	0					
ANR	730771	Argument	NENCLOSE ( node ) -> regnum		729816	2					
ANR	730772	PtrMemberAccess	NENCLOSE ( node ) -> regnum		729816	0					
ANR	730773	CallExpression	NENCLOSE ( node )		729816	0					
ANR	730774	Callee	NENCLOSE		729816	0					
ANR	730775	Identifier	NENCLOSE		729816	0					
ANR	730776	ArgumentList	node		729816	1					
ANR	730777	Argument	node		729816	0					
ANR	730778	Identifier	node		729816	0					
ANR	730779	Identifier	regnum		729816	1					
ANR	730780	BreakStatement	break ;	6222:6:144101:144106	729816	5	True				
ANR	730781	Label	case ENCLOSE_STOP_BACKTRACK :	6223:4:144112:144139	729816	6	True				
ANR	730782	Identifier	ENCLOSE_STOP_BACKTRACK		729816	0					
ANR	730783	ExpressionStatement	"fprintf ( f , ""stop-bt"" )"	6224:6:144147:144168	729816	7	True				
ANR	730784	CallExpression	"fprintf ( f , ""stop-bt"" )"		729816	0					
ANR	730785	Callee	fprintf		729816	0					
ANR	730786	Identifier	fprintf		729816	0					
ANR	730787	ArgumentList	f		729816	1					
ANR	730788	Argument	f		729816	0					
ANR	730789	Identifier	f		729816	0					
ANR	730790	Argument	"""stop-bt"""		729816	1					
ANR	730791	PrimaryExpression	"""stop-bt"""		729816	0					
ANR	730792	BreakStatement	break ;	6225:6:144176:144181	729816	8	True				
ANR	730793	Label	default :	6227:4:144188:144195	729816	9	True				
ANR	730794	Identifier	default		729816	0					
ANR	730795	BreakStatement	break ;	6228:6:144203:144208	729816	10	True				
ANR	730796	ExpressionStatement	"fprintf ( f , ""\\n"" )"	6230:4:144220:144236	729816	39	True				
ANR	730797	CallExpression	"fprintf ( f , ""\\n"" )"		729816	0					
ANR	730798	Callee	fprintf		729816	0					
ANR	730799	Identifier	fprintf		729816	0					
ANR	730800	ArgumentList	f		729816	1					
ANR	730801	Argument	f		729816	0					
ANR	730802	Identifier	f		729816	0					
ANR	730803	Argument	"""\\n"""		729816	1					
ANR	730804	PrimaryExpression	"""\\n"""		729816	0					
ANR	730805	ExpressionStatement	"print_indent_tree ( f , NENCLOSE ( node ) -> target , indent + add )"	6231:4:144242:144300	729816	40	True				
ANR	730806	CallExpression	"print_indent_tree ( f , NENCLOSE ( node ) -> target , indent + add )"		729816	0					
ANR	730807	Callee	print_indent_tree		729816	0					
ANR	730808	Identifier	print_indent_tree		729816	0					
ANR	730809	ArgumentList	f		729816	1					
ANR	730810	Argument	f		729816	0					
ANR	730811	Identifier	f		729816	0					
ANR	730812	Argument	NENCLOSE ( node ) -> target		729816	1					
ANR	730813	PtrMemberAccess	NENCLOSE ( node ) -> target		729816	0					
ANR	730814	CallExpression	NENCLOSE ( node )		729816	0					
ANR	730815	Callee	NENCLOSE		729816	0					
ANR	730816	Identifier	NENCLOSE		729816	0					
ANR	730817	ArgumentList	node		729816	1					
ANR	730818	Argument	node		729816	0					
ANR	730819	Identifier	node		729816	0					
ANR	730820	Identifier	target		729816	1					
ANR	730821	Argument	indent + add		729816	2					
ANR	730822	AdditiveExpression	indent + add		729816	0		+			
ANR	730823	Identifier	indent		729816	0					
ANR	730824	Identifier	add		729816	1					
ANR	730825	BreakStatement	break ;	6232:4:144306:144311	729816	41	True				
ANR	730826	Label	default :	6234:2:144316:144323	729816	42	True				
ANR	730827	Identifier	default		729816	0					
ANR	730828	ExpressionStatement	"fprintf ( f , ""print_indent_tree: undefined node type %d\\n"" , NTYPE ( node ) )"	6235:4:144329:144399	729816	43	True				
ANR	730829	CallExpression	"fprintf ( f , ""print_indent_tree: undefined node type %d\\n"" , NTYPE ( node ) )"		729816	0					
ANR	730830	Callee	fprintf		729816	0					
ANR	730831	Identifier	fprintf		729816	0					
ANR	730832	ArgumentList	f		729816	1					
ANR	730833	Argument	f		729816	0					
ANR	730834	Identifier	f		729816	0					
ANR	730835	Argument	"""print_indent_tree: undefined node type %d\\n"""		729816	1					
ANR	730836	PrimaryExpression	"""print_indent_tree: undefined node type %d\\n"""		729816	0					
ANR	730837	Argument	NTYPE ( node )		729816	2					
ANR	730838	CallExpression	NTYPE ( node )		729816	0					
ANR	730839	Callee	NTYPE		729816	0					
ANR	730840	Identifier	NTYPE		729816	0					
ANR	730841	ArgumentList	node		729816	1					
ANR	730842	Argument	node		729816	0					
ANR	730843	Identifier	node		729816	0					
ANR	730844	BreakStatement	break ;	6236:4:144405:144410	729816	44	True				
ANR	730845	IfStatement	if ( type != NT_LIST && type != NT_ALT && type != NT_QTFR && type != NT_ENCLOSE )		729816	7					
ANR	730846	Condition	type != NT_LIST && type != NT_ALT && type != NT_QTFR && type != NT_ENCLOSE	6239:6:144423:144502	729816	0	True				
ANR	730847	AndExpression	type != NT_LIST && type != NT_ALT && type != NT_QTFR && type != NT_ENCLOSE		729816	0		&&			
ANR	730848	EqualityExpression	type != NT_LIST		729816	0		!=			
ANR	730849	Identifier	type		729816	0					
ANR	730850	Identifier	NT_LIST		729816	1					
ANR	730851	AndExpression	type != NT_ALT && type != NT_QTFR && type != NT_ENCLOSE		729816	1		&&			
ANR	730852	EqualityExpression	type != NT_ALT		729816	0		!=			
ANR	730853	Identifier	type		729816	0					
ANR	730854	Identifier	NT_ALT		729816	1					
ANR	730855	AndExpression	type != NT_QTFR && type != NT_ENCLOSE		729816	1		&&			
ANR	730856	EqualityExpression	type != NT_QTFR		729816	0		!=			
ANR	730857	Identifier	type		729816	0					
ANR	730858	Identifier	NT_QTFR		729816	1					
ANR	730859	EqualityExpression	type != NT_ENCLOSE		729816	1		!=			
ANR	730860	Identifier	type		729816	0					
ANR	730861	Identifier	NT_ENCLOSE		729816	1					
ANR	730862	ExpressionStatement	"fprintf ( f , ""\\n"" )"	6241:4:144509:144525	729816	1	True				
ANR	730863	CallExpression	"fprintf ( f , ""\\n"" )"		729816	0					
ANR	730864	Callee	fprintf		729816	0					
ANR	730865	Identifier	fprintf		729816	0					
ANR	730866	ArgumentList	f		729816	1					
ANR	730867	Argument	f		729816	0					
ANR	730868	Identifier	f		729816	0					
ANR	730869	Argument	"""\\n"""		729816	1					
ANR	730870	PrimaryExpression	"""\\n"""		729816	0					
ANR	730871	ExpressionStatement	fflush ( f )	6242:2:144529:144538	729816	8	True				
ANR	730872	CallExpression	fflush ( f )		729816	0					
ANR	730873	Callee	fflush		729816	0					
ANR	730874	Identifier	fflush		729816	0					
ANR	730875	ArgumentList	f		729816	1					
ANR	730876	Argument	f		729816	0					
ANR	730877	Identifier	f		729816	0					
ANR	730878	ReturnType	static void		729816	1					
ANR	730879	Identifier	print_indent_tree		729816	2					
ANR	730880	ParameterList	"FILE * f , Node * node , int indent"		729816	3					
ANR	730881	Parameter	FILE * f	6082:18:140277:140283	729816	0	True				
ANR	730882	ParameterType	FILE *		729816	0					
ANR	730883	Identifier	f		729816	1					
ANR	730884	Parameter	Node * node	6082:27:140286:140295	729816	1	True				
ANR	730885	ParameterType	Node *		729816	0					
ANR	730886	Identifier	node		729816	1					
ANR	730887	Parameter	int indent	6082:39:140298:140307	729816	2	True				
ANR	730888	ParameterType	int		729816	0					
ANR	730889	Identifier	indent		729816	1					
ANR	730890	CFGEntryNode	ENTRY		729816		True				
ANR	730891	CFGExitNode	EXIT		729816		True				
ANR	730892	Symbol	NQTFR ( node ) -> target		729816						
ANR	730893	Symbol	NCAR		729816						
ANR	730894	Symbol	* bbuf -> p		729816						
ANR	730895	Symbol	br -> back_num		729816						
ANR	730896	Symbol	IS_NCCLASS_NOT		729816						
ANR	730897	Symbol	cn -> name_end		729816						
ANR	730898	Symbol	type		729816						
ANR	730899	Symbol	NQTFR		729816						
ANR	730900	Symbol	NCCLASS		729816						
ANR	730901	Symbol	* NCTYPE		729816						
ANR	730902	Symbol	* br		729816						
ANR	730903	Symbol	NENCLOSE ( node ) -> regnum		729816						
ANR	730904	Symbol	* bbuf		729816						
ANR	730905	Symbol	NCTYPE		729816						
ANR	730906	Symbol	NENCLOSE ( node ) -> option		729816						
ANR	730907	Symbol	add		729816						
ANR	730908	Symbol	NQTFR ( node ) -> upper		729816						
ANR	730909	Symbol	NCDR		729816						
ANR	730910	Symbol	NSTR		729816						
ANR	730911	Symbol	NCCLASS ( node ) -> mbuf		729816						
ANR	730912	Symbol	* NSTR		729816						
ANR	730913	Symbol	NT_LIST		729816						
ANR	730914	Symbol	NENCLOSE ( node ) -> target		729816						
ANR	730915	Symbol	node		729816						
ANR	730916	Symbol	NSTR ( node ) -> s		729816						
ANR	730917	Symbol	* cn		729816						
ANR	730918	Symbol	BACKREFS_P		729816						
ANR	730919	Symbol	bbuf -> p		729816						
ANR	730920	Symbol	NT_ENCLOSE		729816						
ANR	730921	Symbol	bbuf -> used		729816						
ANR	730922	Symbol	IS_NOT_NULL		729816						
ANR	730923	Symbol	indent		729816						
ANR	730924	Symbol	NCTYPE ( node ) -> ctype		729816						
ANR	730925	Symbol	NCALL		729816						
ANR	730926	Symbol	NQTFR ( node ) -> lower		729816						
ANR	730927	Symbol	* NENCLOSE		729816						
ANR	730928	Symbol	cn -> name		729816						
ANR	730929	Symbol	NSTRING_IS_RAW		729816						
ANR	730930	Symbol	NANCHOR ( node ) -> type		729816						
ANR	730931	Symbol	NENCLOSE ( node ) -> type		729816						
ANR	730932	Symbol	br		729816						
ANR	730933	Symbol	NSTR ( node ) -> end		729816						
ANR	730934	Symbol	IS_NULL		729816						
ANR	730935	Symbol	NBREF		729816						
ANR	730936	Symbol	* NQTFR		729816						
ANR	730937	Symbol	NT_QTFR		729816						
ANR	730938	Symbol	* NANCHOR		729816						
ANR	730939	Symbol	NENCLOSE		729816						
ANR	730940	Symbol	NQTFR ( node ) -> greedy		729816						
ANR	730941	Symbol	* NCCLASS		729816						
ANR	730942	Symbol	f		729816						
ANR	730943	Symbol	* * bbuf		729816						
ANR	730944	Symbol	i		729816						
ANR	730945	Symbol	cn		729816						
ANR	730946	Symbol	p		729816						
ANR	730947	Symbol	* i		729816						
ANR	730948	Symbol	NT_ALT		729816						
ANR	730949	Symbol	NCTYPE ( node ) -> not		729816						
ANR	730950	Symbol	NANCHOR		729816						
ANR	730951	Symbol	NTYPE		729816						
ANR	730952	Symbol	* p		729816						
ANR	730953	Symbol	bbuf		729816						
ANR	730954	Function	print_tree	6247:0:144596:144675							
ANR	730955	FunctionDef	"print_tree (FILE * f , Node * node)"		730954	0					
ANR	730956	CompoundStatement		6249:0:144640:144675	730954	0					
ANR	730957	ExpressionStatement	"print_indent_tree ( f , node , 0 )"	6250:2:144644:144673	730954	0	True				
ANR	730958	CallExpression	"print_indent_tree ( f , node , 0 )"		730954	0					
ANR	730959	Callee	print_indent_tree		730954	0					
ANR	730960	Identifier	print_indent_tree		730954	0					
ANR	730961	ArgumentList	f		730954	1					
ANR	730962	Argument	f		730954	0					
ANR	730963	Identifier	f		730954	0					
ANR	730964	Argument	node		730954	1					
ANR	730965	Identifier	node		730954	0					
ANR	730966	Argument	0		730954	2					
ANR	730967	PrimaryExpression	0		730954	0					
ANR	730968	ReturnType	static void		730954	1					
ANR	730969	Identifier	print_tree		730954	2					
ANR	730970	ParameterList	"FILE * f , Node * node"		730954	3					
ANR	730971	Parameter	FILE * f	6248:11:144619:144625	730954	0	True				
ANR	730972	ParameterType	FILE *		730954	0					
ANR	730973	Identifier	f		730954	1					
ANR	730974	Parameter	Node * node	6248:20:144628:144637	730954	1	True				
ANR	730975	ParameterType	Node *		730954	0					
ANR	730976	Identifier	node		730954	1					
ANR	730977	CFGEntryNode	ENTRY		730954		True				
ANR	730978	CFGExitNode	EXIT		730954		True				
ANR	730979	Symbol	node		730954						
ANR	730980	Symbol	f		730954						
